
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uql:     file format elf32-littlearm


Disassembly of section .init:

000144cc <.init>:
   144cc:	push	{r3, lr}
   144d0:	bl	153cc <_start@@Base+0x3c>
   144d4:	pop	{r3, pc}

Disassembly of section .plt:

000144d8 <raise@plt-0x14>:
   144d8:	push	{lr}		; (str lr, [sp, #-4]!)
   144dc:	ldr	lr, [pc, #4]	; 144e8 <raise@plt-0x4>
   144e0:	add	lr, pc, lr
   144e4:	ldr	pc, [lr, #8]!
   144e8:	andeq	r0, r4, r8, lsl fp

000144ec <raise@plt>:
   144ec:	add	ip, pc, #0, 12
   144f0:	add	ip, ip, #64, 20	; 0x40000
   144f4:	ldr	pc, [ip, #2840]!	; 0xb18

000144f8 <strcmp@plt>:
   144f8:	add	ip, pc, #0, 12
   144fc:	add	ip, ip, #64, 20	; 0x40000
   14500:	ldr	pc, [ip, #2832]!	; 0xb10

00014504 <memmove@plt>:
   14504:	add	ip, pc, #0, 12
   14508:	add	ip, ip, #64, 20	; 0x40000
   1450c:	ldr	pc, [ip, #2824]!	; 0xb08

00014510 <free@plt>:
   14510:	add	ip, pc, #0, 12
   14514:	add	ip, ip, #64, 20	; 0x40000
   14518:	ldr	pc, [ip, #2816]!	; 0xb00

0001451c <memcpy@plt>:
   1451c:	add	ip, pc, #0, 12
   14520:	add	ip, ip, #64, 20	; 0x40000
   14524:	ldr	pc, [ip, #2808]!	; 0xaf8

00014528 <memcmp@plt>:
   14528:	add	ip, pc, #0, 12
   1452c:	add	ip, ip, #64, 20	; 0x40000
   14530:	ldr	pc, [ip, #2800]!	; 0xaf0

00014534 <realloc@plt>:
   14534:	add	ip, pc, #0, 12
   14538:	add	ip, ip, #64, 20	; 0x40000
   1453c:	ldr	pc, [ip, #2792]!	; 0xae8

00014540 <fwrite@plt>:
   14540:	add	ip, pc, #0, 12
   14544:	add	ip, ip, #64, 20	; 0x40000
   14548:	ldr	pc, [ip, #2784]!	; 0xae0

0001454c <malloc@plt>:
   1454c:	add	ip, pc, #0, 12
   14550:	add	ip, ip, #64, 20	; 0x40000
   14554:	ldr	pc, [ip, #2776]!	; 0xad8

00014558 <__libc_start_main@plt>:
   14558:	add	ip, pc, #0, 12
   1455c:	add	ip, ip, #64, 20	; 0x40000
   14560:	ldr	pc, [ip, #2768]!	; 0xad0

00014564 <__gmon_start__@plt>:
   14564:	add	ip, pc, #0, 12
   14568:	add	ip, ip, #64, 20	; 0x40000
   1456c:	ldr	pc, [ip, #2760]!	; 0xac8

00014570 <strlen@plt>:
   14570:	add	ip, pc, #0, 12
   14574:	add	ip, ip, #64, 20	; 0x40000
   14578:	ldr	pc, [ip, #2752]!	; 0xac0

0001457c <fprintf@plt>:
   1457c:	add	ip, pc, #0, 12
   14580:	add	ip, ip, #64, 20	; 0x40000
   14584:	ldr	pc, [ip, #2744]!	; 0xab8

00014588 <posix_memalign@plt>:
   14588:	add	ip, pc, #0, 12
   1458c:	add	ip, ip, #64, 20	; 0x40000
   14590:	ldr	pc, [ip, #2736]!	; 0xab0

00014594 <memset@plt>:
   14594:	add	ip, pc, #0, 12
   14598:	add	ip, ip, #64, 20	; 0x40000
   1459c:	ldr	pc, [ip, #2728]!	; 0xaa8

000145a0 <strncpy@plt>:
   145a0:	add	ip, pc, #0, 12
   145a4:	add	ip, ip, #64, 20	; 0x40000
   145a8:	ldr	pc, [ip, #2720]!	; 0xaa0

000145ac <strtod@plt>:
   145ac:	add	ip, pc, #0, 12
   145b0:	add	ip, ip, #64, 20	; 0x40000
   145b4:	ldr	pc, [ip, #2712]!	; 0xa98

000145b8 <memchr@plt>:
   145b8:	add	ip, pc, #0, 12
   145bc:	add	ip, ip, #64, 20	; 0x40000
   145c0:	ldr	pc, [ip, #2704]!	; 0xa90

000145c4 <fputc@plt>:
   145c4:	add	ip, pc, #0, 12
   145c8:	add	ip, ip, #64, 20	; 0x40000
   145cc:	ldr	pc, [ip, #2696]!	; 0xa88

000145d0 <sprintf@plt>:
   145d0:	add	ip, pc, #0, 12
   145d4:	add	ip, ip, #64, 20	; 0x40000
   145d8:	ldr	pc, [ip, #2688]!	; 0xa80

000145dc <abort@plt>:
   145dc:	add	ip, pc, #0, 12
   145e0:	add	ip, ip, #64, 20	; 0x40000
   145e4:	ldr	pc, [ip, #2680]!	; 0xa78

000145e8 <__assert_fail@plt>:
   145e8:	add	ip, pc, #0, 12
   145ec:	add	ip, ip, #64, 20	; 0x40000
   145f0:	ldr	pc, [ip, #2672]!	; 0xa70

Disassembly of section .text:

000145f8 <main@@Base>:
   145f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   145fc:	mov	r4, #0
   14600:	strd	r6, [sp, #8]
   14604:	strd	r8, [sp, #16]
   14608:	strd	sl, [sp, #24]
   1460c:	str	lr, [sp, #32]
   14610:	sub	sp, sp, #52	; 0x34
   14614:	bl	24ad4 <edge_case_tests@@Base>
   14618:	mov	r5, r0
   1461c:	ldr	r7, [pc, #3064]	; 1521c <main@@Base+0xc24>
   14620:	bl	24e6c <error_case_tests@@Base>
   14624:	orr	r5, r5, r0
   14628:	ldr	r6, [pc, #3056]	; 15220 <main@@Base+0xc28>
   1462c:	bl	25594 <union_vector_tests@@Base>
   14630:	orr	r5, r5, r0
   14634:	ldr	r8, [pc, #3048]	; 15224 <main@@Base+0xc2c>
   14638:	bl	251b8 <base64_tests@@Base>
   1463c:	orr	r5, r5, r0
   14640:	add	r7, pc, r7
   14644:	ldr	r9, [pc, #3036]	; 15228 <main@@Base+0xc30>
   14648:	bl	253e8 <mixed_type_union_tests@@Base>
   1464c:	ldr	r1, [pc, #3032]	; 1522c <main@@Base+0xc34>
   14650:	movw	ip, #525	; 0x20d
   14654:	add	r6, pc, r6
   14658:	mov	r2, r7
   1465c:	mov	r3, r4
   14660:	str	r4, [sp]
   14664:	orr	r5, r5, r0
   14668:	mov	r0, r6
   1466c:	stmib	sp, {r4, ip}
   14670:	add	r8, pc, r8
   14674:	add	r9, pc, r9
   14678:	ldr	sl, [pc, #2992]	; 15230 <main@@Base+0xc38>
   1467c:	mov	fp, r9
   14680:	add	r1, pc, r1
   14684:	bl	245d8 <test_json@@Base>
   14688:	ldr	r1, [pc, #2980]	; 15234 <main@@Base+0xc3c>
   1468c:	mov	ip, #528	; 0x210
   14690:	mov	r3, r4
   14694:	mov	r2, r8
   14698:	orr	r5, r5, r0
   1469c:	str	r4, [sp]
   146a0:	mov	r0, r6
   146a4:	stmib	sp, {r4, ip}
   146a8:	add	sl, pc, sl
   146ac:	mov	r9, sl
   146b0:	ldr	sl, [pc, #2944]	; 15238 <main@@Base+0xc40>
   146b4:	add	r1, pc, r1
   146b8:	bl	245d8 <test_json@@Base>
   146bc:	ldr	r1, [pc, #2936]	; 1523c <main@@Base+0xc44>
   146c0:	movw	ip, #531	; 0x213
   146c4:	mov	r3, r4
   146c8:	mov	r2, fp
   146cc:	orr	r5, r5, r0
   146d0:	str	r4, [sp]
   146d4:	mov	r0, r6
   146d8:	stmib	sp, {r4, ip}
   146dc:	add	sl, pc, sl
   146e0:	add	r1, pc, r1
   146e4:	bl	245d8 <test_json@@Base>
   146e8:	ldr	r1, [pc, #2896]	; 15240 <main@@Base+0xc48>
   146ec:	movw	ip, #534	; 0x216
   146f0:	mov	r3, r4
   146f4:	mov	r2, r9
   146f8:	orr	r5, r5, r0
   146fc:	str	r4, [sp]
   14700:	mov	r0, r6
   14704:	stmib	sp, {r4, ip}
   14708:	add	r1, pc, r1
   1470c:	bl	245d8 <test_json@@Base>
   14710:	ldr	r1, [pc, #2860]	; 15244 <main@@Base+0xc4c>
   14714:	movw	ip, #537	; 0x219
   14718:	mov	r3, r4
   1471c:	mov	r2, r9
   14720:	orr	r5, r5, r0
   14724:	str	r4, [sp]
   14728:	mov	r0, r6
   1472c:	stmib	sp, {r4, ip}
   14730:	add	r1, pc, r1
   14734:	bl	245d8 <test_json@@Base>
   14738:	ldr	r1, [pc, #2824]	; 15248 <main@@Base+0xc50>
   1473c:	mov	ip, #540	; 0x21c
   14740:	mov	r3, r4
   14744:	mov	r2, r8
   14748:	orr	r5, r5, r0
   1474c:	str	r4, [sp]
   14750:	mov	r0, r6
   14754:	stmib	sp, {r4, ip}
   14758:	add	r1, pc, r1
   1475c:	bl	245d8 <test_json@@Base>
   14760:	ldr	r1, [pc, #2788]	; 1524c <main@@Base+0xc54>
   14764:	movw	ip, #543	; 0x21f
   14768:	mov	r3, r4
   1476c:	mov	r2, fp
   14770:	orr	r5, r5, r0
   14774:	str	r4, [sp]
   14778:	mov	r0, r6
   1477c:	stmib	sp, {r4, ip}
   14780:	add	r1, pc, r1
   14784:	bl	245d8 <test_json@@Base>
   14788:	ldr	r1, [pc, #2752]	; 15250 <main@@Base+0xc58>
   1478c:	movw	ip, #547	; 0x223
   14790:	mov	r3, r4
   14794:	mov	r2, r7
   14798:	orr	r5, r5, r0
   1479c:	str	r4, [sp]
   147a0:	mov	r0, r6
   147a4:	stmib	sp, {r4, ip}
   147a8:	add	r1, pc, r1
   147ac:	bl	245d8 <test_json@@Base>
   147b0:	ldr	r1, [pc, #2716]	; 15254 <main@@Base+0xc5c>
   147b4:	movw	ip, #551	; 0x227
   147b8:	mov	r3, r4
   147bc:	mov	r2, r7
   147c0:	orr	r5, r5, r0
   147c4:	str	r4, [sp]
   147c8:	mov	r0, r6
   147cc:	stmib	sp, {r4, ip}
   147d0:	add	r1, pc, r1
   147d4:	bl	245d8 <test_json@@Base>
   147d8:	ldr	r1, [pc, #2680]	; 15258 <main@@Base+0xc60>
   147dc:	movw	ip, #555	; 0x22b
   147e0:	mov	r3, r4
   147e4:	mov	r2, r7
   147e8:	orr	r5, r5, r0
   147ec:	str	r4, [sp]
   147f0:	mov	r0, r6
   147f4:	stmib	sp, {r4, ip}
   147f8:	add	r1, pc, r1
   147fc:	bl	245d8 <test_json@@Base>
   14800:	ldr	r1, [pc, #2644]	; 1525c <main@@Base+0xc64>
   14804:	movw	ip, #558	; 0x22e
   14808:	mov	r3, r4
   1480c:	mov	r2, r8
   14810:	orr	r5, r5, r0
   14814:	str	r4, [sp]
   14818:	mov	r0, r6
   1481c:	stmib	sp, {r4, ip}
   14820:	add	r1, pc, r1
   14824:	bl	245d8 <test_json@@Base>
   14828:	ldr	r1, [pc, #2608]	; 15260 <main@@Base+0xc68>
   1482c:	movw	ip, #561	; 0x231
   14830:	mov	r3, r4
   14834:	mov	r2, fp
   14838:	orr	r5, r5, r0
   1483c:	str	r4, [sp]
   14840:	mov	r0, r6
   14844:	stmib	sp, {r4, ip}
   14848:	add	r1, pc, r1
   1484c:	bl	245d8 <test_json@@Base>
   14850:	ldr	r1, [pc, #2572]	; 15264 <main@@Base+0xc6c>
   14854:	mov	ip, #564	; 0x234
   14858:	mov	r3, r4
   1485c:	mov	r2, r9
   14860:	orr	r5, r5, r0
   14864:	str	r4, [sp]
   14868:	mov	r0, r6
   1486c:	stmib	sp, {r4, ip}
   14870:	add	r1, pc, r1
   14874:	bl	245d8 <test_json@@Base>
   14878:	ldr	r1, [pc, #2536]	; 15268 <main@@Base+0xc70>
   1487c:	movw	ip, #567	; 0x237
   14880:	mov	r3, r4
   14884:	mov	r2, r9
   14888:	orr	r5, r5, r0
   1488c:	str	r4, [sp]
   14890:	mov	r0, r6
   14894:	stmib	sp, {r4, ip}
   14898:	add	r1, pc, r1
   1489c:	bl	245d8 <test_json@@Base>
   148a0:	ldr	r1, [pc, #2500]	; 1526c <main@@Base+0xc74>
   148a4:	movw	ip, #570	; 0x23a
   148a8:	mov	r3, r4
   148ac:	mov	r2, r8
   148b0:	orr	r5, r5, r0
   148b4:	str	r4, [sp]
   148b8:	mov	r0, r6
   148bc:	stmib	sp, {r4, ip}
   148c0:	add	r1, pc, r1
   148c4:	bl	245d8 <test_json@@Base>
   148c8:	ldr	r1, [pc, #2464]	; 15270 <main@@Base+0xc78>
   148cc:	movw	ip, #573	; 0x23d
   148d0:	mov	r3, r4
   148d4:	mov	r2, fp
   148d8:	orr	r5, r5, r0
   148dc:	str	r4, [sp]
   148e0:	mov	r0, r6
   148e4:	stmib	sp, {r4, ip}
   148e8:	add	r1, pc, r1
   148ec:	bl	245d8 <test_json@@Base>
   148f0:	ldr	r1, [pc, #2428]	; 15274 <main@@Base+0xc7c>
   148f4:	movw	ip, #577	; 0x241
   148f8:	mov	r3, r4
   148fc:	mov	r2, r7
   14900:	orr	r5, r5, r0
   14904:	str	r4, [sp]
   14908:	mov	r0, r6
   1490c:	stmib	sp, {r4, ip}
   14910:	add	r1, pc, r1
   14914:	bl	245d8 <test_json@@Base>
   14918:	ldr	r1, [pc, #2392]	; 15278 <main@@Base+0xc80>
   1491c:	movw	ip, #581	; 0x245
   14920:	mov	r3, r4
   14924:	mov	r2, r7
   14928:	orr	r5, r5, r0
   1492c:	str	r4, [sp]
   14930:	mov	r0, r6
   14934:	stmib	sp, {r4, ip}
   14938:	add	r1, pc, r1
   1493c:	bl	245d8 <test_json@@Base>
   14940:	ldr	r1, [pc, #2356]	; 1527c <main@@Base+0xc84>
   14944:	movw	ip, #585	; 0x249
   14948:	mov	r3, r4
   1494c:	mov	r2, sl
   14950:	orr	r5, r5, r0
   14954:	str	r4, [sp]
   14958:	mov	r0, r6
   1495c:	stmib	sp, {r4, ip}
   14960:	add	r1, pc, r1
   14964:	bl	245d8 <test_json@@Base>
   14968:	ldr	r1, [pc, #2320]	; 15280 <main@@Base+0xc88>
   1496c:	movw	ip, #591	; 0x24f
   14970:	mov	r3, r4
   14974:	mov	r2, sl
   14978:	orr	r5, r5, r0
   1497c:	str	r4, [sp]
   14980:	mov	r0, r6
   14984:	stmib	sp, {r4, ip}
   14988:	add	r1, pc, r1
   1498c:	bl	245d8 <test_json@@Base>
   14990:	ldr	r1, [pc, #2284]	; 15284 <main@@Base+0xc8c>
   14994:	movw	ip, #594	; 0x252
   14998:	mov	r2, sl
   1499c:	mov	r3, r4
   149a0:	orr	r5, r5, r0
   149a4:	str	r4, [sp]
   149a8:	mov	r0, r6
   149ac:	stmib	sp, {r4, ip}
   149b0:	ldr	sl, [pc, #2256]	; 15288 <main@@Base+0xc90>
   149b4:	add	r1, pc, r1
   149b8:	bl	245d8 <test_json@@Base>
   149bc:	ldr	r1, [pc, #2248]	; 1528c <main@@Base+0xc94>
   149c0:	movw	ip, #597	; 0x255
   149c4:	mov	r3, r4
   149c8:	mov	r2, r9
   149cc:	orr	r5, r5, r0
   149d0:	str	r4, [sp]
   149d4:	mov	r0, r6
   149d8:	stmib	sp, {r4, ip}
   149dc:	add	sl, pc, sl
   149e0:	add	r1, pc, r1
   149e4:	bl	245d8 <test_json@@Base>
   149e8:	ldr	r1, [pc, #2208]	; 15290 <main@@Base+0xc98>
   149ec:	movw	ip, #601	; 0x259
   149f0:	mov	r3, r4
   149f4:	mov	r2, r8
   149f8:	orr	r5, r5, r0
   149fc:	str	r4, [sp]
   14a00:	mov	r0, r6
   14a04:	stmib	sp, {r4, ip}
   14a08:	add	r1, pc, r1
   14a0c:	bl	245d8 <test_json@@Base>
   14a10:	ldr	r1, [pc, #2172]	; 15294 <main@@Base+0xc9c>
   14a14:	mov	ip, #604	; 0x25c
   14a18:	mov	r3, r4
   14a1c:	mov	r2, fp
   14a20:	orr	r5, r5, r0
   14a24:	str	r4, [sp]
   14a28:	mov	r0, r6
   14a2c:	stmib	sp, {r4, ip}
   14a30:	str	fp, [sp, #24]
   14a34:	ldr	fp, [pc, #2140]	; 15298 <main@@Base+0xca0>
   14a38:	add	r1, pc, r1
   14a3c:	bl	245d8 <test_json@@Base>
   14a40:	ldr	r1, [pc, #2132]	; 1529c <main@@Base+0xca4>
   14a44:	movw	ip, #607	; 0x25f
   14a48:	mov	r3, r4
   14a4c:	mov	r2, sl
   14a50:	orr	r5, r5, r0
   14a54:	str	r4, [sp]
   14a58:	mov	r0, r6
   14a5c:	stmib	sp, {r4, ip}
   14a60:	add	fp, pc, fp
   14a64:	str	sl, [sp, #28]
   14a68:	ldr	sl, [pc, #2096]	; 152a0 <main@@Base+0xca8>
   14a6c:	add	r1, pc, r1
   14a70:	bl	245d8 <test_json@@Base>
   14a74:	ldr	r1, [pc, #2088]	; 152a4 <main@@Base+0xcac>
   14a78:	movw	ip, #610	; 0x262
   14a7c:	mov	r3, r4
   14a80:	mov	r2, r9
   14a84:	orr	r5, r5, r0
   14a88:	str	r4, [sp]
   14a8c:	mov	r0, r6
   14a90:	stmib	sp, {r4, ip}
   14a94:	add	sl, pc, sl
   14a98:	add	r1, pc, r1
   14a9c:	bl	245d8 <test_json@@Base>
   14aa0:	mov	r1, fp
   14aa4:	movw	ip, #613	; 0x265
   14aa8:	str	r4, [sp]
   14aac:	mov	r3, r4
   14ab0:	mov	r2, fp
   14ab4:	ldr	fp, [pc, #2028]	; 152a8 <main@@Base+0xcb0>
   14ab8:	orr	r5, r5, r0
   14abc:	mov	r0, r6
   14ac0:	stmib	sp, {r4, ip}
   14ac4:	str	r1, [sp, #32]
   14ac8:	ldr	r1, [pc, #2012]	; 152ac <main@@Base+0xcb4>
   14acc:	add	fp, pc, fp
   14ad0:	add	r1, pc, r1
   14ad4:	bl	245d8 <test_json@@Base>
   14ad8:	ldr	r1, [pc, #2000]	; 152b0 <main@@Base+0xcb8>
   14adc:	mov	ip, #616	; 0x268
   14ae0:	mov	r3, r4
   14ae4:	mov	r2, sl
   14ae8:	orr	r5, r5, r0
   14aec:	str	r4, [sp]
   14af0:	mov	r0, r6
   14af4:	stmib	sp, {r4, ip}
   14af8:	str	sl, [sp, #36]	; 0x24
   14afc:	ldr	sl, [pc, #1968]	; 152b4 <main@@Base+0xcbc>
   14b00:	add	r1, pc, r1
   14b04:	bl	245d8 <test_json@@Base>
   14b08:	ldr	r1, [pc, #1960]	; 152b8 <main@@Base+0xcc0>
   14b0c:	movw	ip, #619	; 0x26b
   14b10:	mov	lr, fp
   14b14:	mov	r3, r4
   14b18:	mov	r2, fp
   14b1c:	str	r4, [sp]
   14b20:	orr	r5, r5, r0
   14b24:	mov	r0, r6
   14b28:	stmib	sp, {r4, ip}
   14b2c:	str	lr, [sp, #40]	; 0x28
   14b30:	add	sl, pc, sl
   14b34:	ldr	fp, [pc, #1920]	; 152bc <main@@Base+0xcc4>
   14b38:	add	r1, pc, r1
   14b3c:	bl	245d8 <test_json@@Base>
   14b40:	ldr	r1, [pc, #1912]	; 152c0 <main@@Base+0xcc8>
   14b44:	movw	ip, #622	; 0x26e
   14b48:	mov	r3, r4
   14b4c:	mov	r2, r8
   14b50:	orr	r5, r5, r0
   14b54:	str	r4, [sp]
   14b58:	mov	r0, r6
   14b5c:	stmib	sp, {r4, ip}
   14b60:	add	fp, pc, fp
   14b64:	add	r1, pc, r1
   14b68:	bl	245d8 <test_json@@Base>
   14b6c:	ldr	r1, [pc, #1872]	; 152c4 <main@@Base+0xccc>
   14b70:	movw	ip, #625	; 0x271
   14b74:	mov	r3, r4
   14b78:	mov	r2, r8
   14b7c:	orr	r5, r5, r0
   14b80:	str	r4, [sp]
   14b84:	mov	r0, r6
   14b88:	stmib	sp, {r4, ip}
   14b8c:	add	r1, pc, r1
   14b90:	bl	245d8 <test_json@@Base>
   14b94:	mov	ip, #628	; 0x274
   14b98:	mov	r1, fp
   14b9c:	str	r4, [sp]
   14ba0:	mov	r3, r4
   14ba4:	mov	r2, fp
   14ba8:	ldr	fp, [pc, #1816]	; 152c8 <main@@Base+0xcd0>
   14bac:	orr	r5, r5, r0
   14bb0:	mov	r0, r6
   14bb4:	stmib	sp, {r4, ip}
   14bb8:	str	r1, [sp, #20]
   14bbc:	mov	r1, sl
   14bc0:	bl	245d8 <test_json@@Base>
   14bc4:	movw	ip, #631	; 0x277
   14bc8:	mov	r1, sl
   14bcc:	str	r4, [sp]
   14bd0:	mov	r3, r4
   14bd4:	orr	r5, r5, r0
   14bd8:	ldr	r2, [sp, #20]
   14bdc:	mov	r0, r6
   14be0:	stmib	sp, {r4, ip}
   14be4:	add	fp, pc, fp
   14be8:	bl	245d8 <test_json@@Base>
   14bec:	ldr	r1, [pc, #1752]	; 152cc <main@@Base+0xcd4>
   14bf0:	movw	ip, #634	; 0x27a
   14bf4:	mov	lr, fp
   14bf8:	mov	r3, r4
   14bfc:	mov	r2, fp
   14c00:	str	r4, [sp]
   14c04:	orr	r5, r5, r0
   14c08:	mov	r0, r6
   14c0c:	stmib	sp, {r4, ip}
   14c10:	str	lr, [sp, #44]	; 0x2c
   14c14:	ldr	sl, [pc, #1716]	; 152d0 <main@@Base+0xcd8>
   14c18:	add	r1, pc, r1
   14c1c:	bl	245d8 <test_json@@Base>
   14c20:	movw	r1, #638	; 0x27e
   14c24:	mov	r3, r4
   14c28:	str	r4, [sp]
   14c2c:	orr	r5, r5, r0
   14c30:	mov	r0, r6
   14c34:	str	r4, [sp, #4]
   14c38:	str	r1, [sp, #8]
   14c3c:	add	sl, pc, sl
   14c40:	ldr	r1, [pc, #1676]	; 152d4 <main@@Base+0xcdc>
   14c44:	mov	r2, sl
   14c48:	ldr	fp, [pc, #1672]	; 152d8 <main@@Base+0xce0>
   14c4c:	add	r1, pc, r1
   14c50:	bl	245d8 <test_json@@Base>
   14c54:	movw	r1, #642	; 0x282
   14c58:	add	fp, pc, fp
   14c5c:	str	r4, [sp]
   14c60:	mov	r3, r4
   14c64:	mov	r2, fp
   14c68:	str	r4, [sp, #4]
   14c6c:	str	r1, [sp, #8]
   14c70:	orr	r5, r5, r0
   14c74:	mov	r0, r6
   14c78:	ldr	r1, [pc, #1628]	; 152dc <main@@Base+0xce4>
   14c7c:	add	r1, pc, r1
   14c80:	bl	245d8 <test_json@@Base>
   14c84:	movw	r1, #646	; 0x286
   14c88:	mov	r3, r4
   14c8c:	str	r4, [sp]
   14c90:	mov	r2, r7
   14c94:	orr	r5, r5, r0
   14c98:	str	r4, [sp, #4]
   14c9c:	str	r1, [sp, #8]
   14ca0:	mov	r0, r6
   14ca4:	ldr	r1, [pc, #1588]	; 152e0 <main@@Base+0xce8>
   14ca8:	add	r1, pc, r1
   14cac:	bl	245d8 <test_json@@Base>
   14cb0:	movw	r1, #649	; 0x289
   14cb4:	mov	r3, r4
   14cb8:	str	r4, [sp]
   14cbc:	mov	r2, r7
   14cc0:	orr	r5, r5, r0
   14cc4:	str	r4, [sp, #4]
   14cc8:	str	r1, [sp, #8]
   14ccc:	mov	r0, r6
   14cd0:	ldr	r1, [pc, #1548]	; 152e4 <main@@Base+0xcec>
   14cd4:	add	r1, pc, r1
   14cd8:	bl	245d8 <test_json@@Base>
   14cdc:	movw	r1, #653	; 0x28d
   14ce0:	mov	r3, r4
   14ce4:	str	r4, [sp]
   14ce8:	mov	r2, r8
   14cec:	orr	r5, r5, r0
   14cf0:	str	r4, [sp, #4]
   14cf4:	str	r1, [sp, #8]
   14cf8:	mov	r0, r6
   14cfc:	ldr	r1, [pc, #1508]	; 152e8 <main@@Base+0xcf0>
   14d00:	add	r1, pc, r1
   14d04:	bl	245d8 <test_json@@Base>
   14d08:	ldr	r1, [pc, #1500]	; 152ec <main@@Base+0xcf4>
   14d0c:	mov	ip, #656	; 0x290
   14d10:	mov	r3, r4
   14d14:	orr	r5, r5, r0
   14d18:	mov	r0, r6
   14d1c:	str	r4, [sp]
   14d20:	stmib	sp, {r4, ip}
   14d24:	ldr	r2, [sp, #24]
   14d28:	add	r1, pc, r1
   14d2c:	bl	245d8 <test_json@@Base>
   14d30:	ldr	r1, [pc, #1464]	; 152f0 <main@@Base+0xcf8>
   14d34:	movw	ip, #659	; 0x293
   14d38:	mov	r3, r4
   14d3c:	orr	r5, r5, r0
   14d40:	mov	r0, r6
   14d44:	str	r4, [sp]
   14d48:	stmib	sp, {r4, ip}
   14d4c:	ldr	r2, [sp, #28]
   14d50:	add	r1, pc, r1
   14d54:	bl	245d8 <test_json@@Base>
   14d58:	ldr	r1, [pc, #1428]	; 152f4 <main@@Base+0xcfc>
   14d5c:	movw	ip, #662	; 0x296
   14d60:	mov	r2, r9
   14d64:	mov	r3, r4
   14d68:	orr	r5, r5, r0
   14d6c:	str	r4, [sp]
   14d70:	mov	r0, r6
   14d74:	stmib	sp, {r4, ip}
   14d78:	ldr	r9, [pc, #1400]	; 152f8 <main@@Base+0xd00>
   14d7c:	add	r1, pc, r1
   14d80:	bl	245d8 <test_json@@Base>
   14d84:	ldr	r1, [pc, #1392]	; 152fc <main@@Base+0xd04>
   14d88:	movw	ip, #665	; 0x299
   14d8c:	mov	r3, r4
   14d90:	orr	r5, r5, r0
   14d94:	mov	r0, r6
   14d98:	str	r4, [sp]
   14d9c:	stmib	sp, {r4, ip}
   14da0:	add	r9, pc, r9
   14da4:	ldr	r2, [sp, #32]
   14da8:	add	r1, pc, r1
   14dac:	bl	245d8 <test_json@@Base>
   14db0:	ldr	r1, [pc, #1352]	; 15300 <main@@Base+0xd08>
   14db4:	mov	ip, #668	; 0x29c
   14db8:	mov	r3, r4
   14dbc:	orr	r5, r5, r0
   14dc0:	mov	r0, r6
   14dc4:	str	r4, [sp]
   14dc8:	stmib	sp, {r4, ip}
   14dcc:	ldr	r2, [sp, #36]	; 0x24
   14dd0:	add	r1, pc, r1
   14dd4:	bl	245d8 <test_json@@Base>
   14dd8:	ldr	r1, [pc, #1316]	; 15304 <main@@Base+0xd0c>
   14ddc:	movw	ip, #671	; 0x29f
   14de0:	mov	r3, r4
   14de4:	orr	r5, r5, r0
   14de8:	mov	r0, r6
   14dec:	str	r4, [sp]
   14df0:	stmib	sp, {r4, ip}
   14df4:	ldr	r2, [sp, #40]	; 0x28
   14df8:	add	r1, pc, r1
   14dfc:	bl	245d8 <test_json@@Base>
   14e00:	ldr	r1, [pc, #1280]	; 15308 <main@@Base+0xd10>
   14e04:	movw	ip, #674	; 0x2a2
   14e08:	mov	r3, r4
   14e0c:	mov	r2, r8
   14e10:	orr	r5, r5, r0
   14e14:	str	r4, [sp]
   14e18:	mov	r0, r6
   14e1c:	stmib	sp, {r4, ip}
   14e20:	add	r1, pc, r1
   14e24:	bl	245d8 <test_json@@Base>
   14e28:	ldr	r1, [pc, #1244]	; 1530c <main@@Base+0xd14>
   14e2c:	movw	ip, #677	; 0x2a5
   14e30:	mov	r2, r8
   14e34:	mov	r3, r4
   14e38:	orr	r5, r5, r0
   14e3c:	str	r4, [sp]
   14e40:	mov	r0, r6
   14e44:	stmib	sp, {r4, ip}
   14e48:	add	r1, pc, r1
   14e4c:	bl	245d8 <test_json@@Base>
   14e50:	ldr	r8, [sp, #20]
   14e54:	mov	ip, #680	; 0x2a8
   14e58:	mov	r3, r4
   14e5c:	mov	r1, r9
   14e60:	orr	r5, r5, r0
   14e64:	str	r4, [sp]
   14e68:	mov	r0, r6
   14e6c:	stmib	sp, {r4, ip}
   14e70:	mov	r2, r8
   14e74:	bl	245d8 <test_json@@Base>
   14e78:	movw	ip, #683	; 0x2ab
   14e7c:	mov	r2, r8
   14e80:	str	r4, [sp]
   14e84:	mov	r1, r9
   14e88:	mov	r3, r4
   14e8c:	ldr	r8, [pc, #1148]	; 15310 <main@@Base+0xd18>
   14e90:	orr	r5, r5, r0
   14e94:	mov	r0, r6
   14e98:	stmib	sp, {r4, ip}
   14e9c:	bl	245d8 <test_json@@Base>
   14ea0:	ldr	r1, [pc, #1132]	; 15314 <main@@Base+0xd1c>
   14ea4:	movw	ip, #686	; 0x2ae
   14ea8:	mov	r3, r4
   14eac:	orr	r5, r5, r0
   14eb0:	mov	r0, r6
   14eb4:	str	r4, [sp]
   14eb8:	stmib	sp, {r4, ip}
   14ebc:	add	r8, pc, r8
   14ec0:	ldr	r2, [sp, #44]	; 0x2c
   14ec4:	add	r1, pc, r1
   14ec8:	bl	245d8 <test_json@@Base>
   14ecc:	ldr	r1, [pc, #1092]	; 15318 <main@@Base+0xd20>
   14ed0:	movw	ip, #690	; 0x2b2
   14ed4:	mov	r2, sl
   14ed8:	mov	r3, r4
   14edc:	orr	r5, r5, r0
   14ee0:	str	r4, [sp]
   14ee4:	mov	r0, r6
   14ee8:	stmib	sp, {r4, ip}
   14eec:	add	r1, pc, r1
   14ef0:	bl	245d8 <test_json@@Base>
   14ef4:	ldr	r1, [pc, #1056]	; 1531c <main@@Base+0xd24>
   14ef8:	movw	ip, #694	; 0x2b6
   14efc:	mov	r2, fp
   14f00:	mov	r3, r4
   14f04:	orr	r5, r5, r0
   14f08:	str	r4, [sp]
   14f0c:	mov	r0, r6
   14f10:	stmib	sp, {r4, ip}
   14f14:	add	r1, pc, r1
   14f18:	bl	245d8 <test_json@@Base>
   14f1c:	ldr	r1, [pc, #1020]	; 15320 <main@@Base+0xd28>
   14f20:	movw	ip, #698	; 0x2ba
   14f24:	mov	r3, r4
   14f28:	mov	r2, r7
   14f2c:	orr	r5, r5, r0
   14f30:	str	r4, [sp]
   14f34:	mov	r0, r6
   14f38:	stmib	sp, {r4, ip}
   14f3c:	add	r1, pc, r1
   14f40:	bl	245d8 <test_json@@Base>
   14f44:	ldr	r1, [pc, #984]	; 15324 <main@@Base+0xd2c>
   14f48:	movw	ip, #701	; 0x2bd
   14f4c:	mov	r3, r4
   14f50:	mov	r2, r7
   14f54:	orr	r5, r5, r0
   14f58:	str	r4, [sp]
   14f5c:	mov	r0, r6
   14f60:	stmib	sp, {r4, ip}
   14f64:	add	r1, pc, r1
   14f68:	bl	245d8 <test_json@@Base>
   14f6c:	ldr	r1, [pc, #948]	; 15328 <main@@Base+0xd30>
   14f70:	movw	ip, #711	; 0x2c7
   14f74:	mov	r3, r4
   14f78:	mov	r2, r8
   14f7c:	orr	r5, r5, r0
   14f80:	str	r4, [sp]
   14f84:	mov	r0, r6
   14f88:	stmib	sp, {r4, ip}
   14f8c:	add	r1, pc, r1
   14f90:	bl	245d8 <test_json@@Base>
   14f94:	ldr	r1, [pc, #912]	; 1532c <main@@Base+0xd34>
   14f98:	mov	ip, #716	; 0x2cc
   14f9c:	mov	r2, r8
   14fa0:	mov	r3, r4
   14fa4:	orr	r5, r5, r0
   14fa8:	str	r4, [sp]
   14fac:	mov	r0, r6
   14fb0:	stmib	sp, {r4, ip}
   14fb4:	ldr	r8, [pc, #884]	; 15330 <main@@Base+0xd38>
   14fb8:	add	r1, pc, r1
   14fbc:	bl	245d8 <test_json@@Base>
   14fc0:	ldr	r2, [pc, #876]	; 15334 <main@@Base+0xd3c>
   14fc4:	movw	ip, #731	; 0x2db
   14fc8:	mov	r3, r4
   14fcc:	orr	r5, r5, r0
   14fd0:	mov	r0, r6
   14fd4:	str	r4, [sp]
   14fd8:	ldr	r1, [pc, #856]	; 15338 <main@@Base+0xd40>
   14fdc:	add	r8, pc, r8
   14fe0:	stmib	sp, {r4, ip}
   14fe4:	add	r2, pc, r2
   14fe8:	add	r1, pc, r1
   14fec:	bl	245d8 <test_json@@Base>
   14ff0:	ldr	r2, [pc, #836]	; 1533c <main@@Base+0xd44>
   14ff4:	movw	ip, #734	; 0x2de
   14ff8:	mov	r3, r4
   14ffc:	orr	r5, r5, r0
   15000:	mov	r0, r6
   15004:	str	r4, [sp]
   15008:	ldr	r1, [pc, #816]	; 15340 <main@@Base+0xd48>
   1500c:	stmib	sp, {r4, ip}
   15010:	add	r2, pc, r2
   15014:	add	r1, pc, r1
   15018:	bl	245d8 <test_json@@Base>
   1501c:	ldr	r1, [pc, #800]	; 15344 <main@@Base+0xd4c>
   15020:	movw	ip, #738	; 0x2e2
   15024:	mov	r3, r4
   15028:	mov	r2, r8
   1502c:	orr	r5, r5, r0
   15030:	str	r4, [sp]
   15034:	mov	r0, r6
   15038:	stmib	sp, {r4, ip}
   1503c:	add	r1, pc, r1
   15040:	bl	245d8 <test_json@@Base>
   15044:	ldr	r1, [pc, #764]	; 15348 <main@@Base+0xd50>
   15048:	movw	ip, #750	; 0x2ee
   1504c:	mov	r2, r8
   15050:	mov	r3, r4
   15054:	orr	r5, r5, r0
   15058:	str	r4, [sp]
   1505c:	mov	r0, r6
   15060:	stmib	sp, {r4, ip}
   15064:	add	r1, pc, r1
   15068:	bl	245d8 <test_json@@Base>
   1506c:	ldr	r2, [pc, #728]	; 1534c <main@@Base+0xd54>
   15070:	movw	ip, #766	; 0x2fe
   15074:	mov	r3, r4
   15078:	orr	r5, r5, r0
   1507c:	mov	r0, r6
   15080:	str	r4, [sp]
   15084:	ldr	r1, [pc, #708]	; 15350 <main@@Base+0xd58>
   15088:	stmib	sp, {r4, ip}
   1508c:	add	r2, pc, r2
   15090:	add	r1, pc, r1
   15094:	bl	245d8 <test_json@@Base>
   15098:	ldr	r2, [pc, #692]	; 15354 <main@@Base+0xd5c>
   1509c:	movw	ip, #770	; 0x302
   150a0:	mov	r3, r4
   150a4:	orr	r5, r5, r0
   150a8:	mov	r0, r6
   150ac:	str	r4, [sp]
   150b0:	ldr	r1, [pc, #672]	; 15358 <main@@Base+0xd60>
   150b4:	stmib	sp, {r4, ip}
   150b8:	add	r2, pc, r2
   150bc:	add	r1, pc, r1
   150c0:	bl	245d8 <test_json@@Base>
   150c4:	ldr	r2, [pc, #656]	; 1535c <main@@Base+0xd64>
   150c8:	mov	ip, #776	; 0x308
   150cc:	mov	r3, r4
   150d0:	orr	r5, r5, r0
   150d4:	mov	r0, r6
   150d8:	str	r4, [sp]
   150dc:	ldr	r1, [pc, #636]	; 15360 <main@@Base+0xd68>
   150e0:	stmib	sp, {r4, ip}
   150e4:	add	r2, pc, r2
   150e8:	add	r1, pc, r1
   150ec:	bl	245d8 <test_json@@Base>
   150f0:	ldr	r1, [pc, #620]	; 15364 <main@@Base+0xd6c>
   150f4:	movw	ip, #781	; 0x30d
   150f8:	mov	r2, r7
   150fc:	mov	r3, r4
   15100:	orr	r5, r5, r0
   15104:	str	r4, [sp]
   15108:	mov	r0, r6
   1510c:	stmib	sp, {r4, ip}
   15110:	add	r1, pc, r1
   15114:	bl	245d8 <test_json@@Base>
   15118:	ldr	r2, [pc, #584]	; 15368 <main@@Base+0xd70>
   1511c:	movw	ip, #786	; 0x312
   15120:	mov	r3, r4
   15124:	orr	r5, r5, r0
   15128:	mov	r0, r6
   1512c:	str	r4, [sp]
   15130:	ldr	r1, [pc, #564]	; 1536c <main@@Base+0xd74>
   15134:	stmib	sp, {r4, ip}
   15138:	add	r2, pc, r2
   1513c:	add	r1, pc, r1
   15140:	bl	245d8 <test_json@@Base>
   15144:	ldr	r2, [pc, #548]	; 15370 <main@@Base+0xd78>
   15148:	movw	ip, #791	; 0x317
   1514c:	mov	r3, r4
   15150:	orr	r5, r5, r0
   15154:	mov	r0, r6
   15158:	str	r4, [sp]
   1515c:	ldr	r1, [pc, #528]	; 15374 <main@@Base+0xd7c>
   15160:	stmib	sp, {r4, ip}
   15164:	add	r2, pc, r2
   15168:	add	r1, pc, r1
   1516c:	bl	245d8 <test_json@@Base>
   15170:	ldr	r2, [pc, #512]	; 15378 <main@@Base+0xd80>
   15174:	mov	ip, #796	; 0x31c
   15178:	mov	r3, r4
   1517c:	orr	r5, r5, r0
   15180:	mov	r0, r6
   15184:	str	r4, [sp]
   15188:	ldr	r1, [pc, #492]	; 1537c <main@@Base+0xd84>
   1518c:	stmib	sp, {r4, ip}
   15190:	add	r2, pc, r2
   15194:	add	r1, pc, r1
   15198:	bl	245d8 <test_json@@Base>
   1519c:	ldr	r2, [pc, #476]	; 15380 <main@@Base+0xd88>
   151a0:	movw	ip, #801	; 0x321
   151a4:	mov	r3, r4
   151a8:	orr	r5, r5, r0
   151ac:	mov	r0, r6
   151b0:	str	r4, [sp]
   151b4:	ldr	r1, [pc, #456]	; 15384 <main@@Base+0xd8c>
   151b8:	stmib	sp, {r4, ip}
   151bc:	add	r2, pc, r2
   151c0:	add	r1, pc, r1
   151c4:	bl	245d8 <test_json@@Base>
   151c8:	ldr	r2, [pc, #440]	; 15388 <main@@Base+0xd90>
   151cc:	movw	ip, #806	; 0x326
   151d0:	orr	r5, r5, r0
   151d4:	mov	r3, r4
   151d8:	mov	r0, r6
   151dc:	str	r4, [sp]
   151e0:	ldr	r1, [pc, #420]	; 1538c <main@@Base+0xd94>
   151e4:	stmib	sp, {r4, ip}
   151e8:	add	r2, pc, r2
   151ec:	add	r1, pc, r1
   151f0:	bl	245d8 <test_json@@Base>
   151f4:	orrs	r3, r5, r0
   151f8:	mvnne	r0, #0
   151fc:	moveq	r0, r4
   15200:	add	sp, sp, #52	; 0x34
   15204:	ldrd	r4, [sp]
   15208:	ldrd	r6, [sp, #8]
   1520c:	ldrd	r8, [sp, #16]
   15210:	ldrd	sl, [sp, #24]
   15214:	add	sp, sp, #32
   15218:	pop	{pc}		; (ldr pc, [sp], #4)
   1521c:	andeq	sl, r2, r8, asr #21
   15220:	andeq	r0, r4, ip, lsl #17
   15224:	andeq	ip, r2, r4, ror #24
   15228:	andeq	ip, r2, ip, lsr #25
   1522c:	andeq	ip, r2, ip, lsr ip
   15230:	andeq	ip, r2, r4, asr #25
   15234:	andeq	ip, r2, r4, asr #24
   15238:	ldrdeq	ip, [r2], -r8
   1523c:	andeq	ip, r2, r4, ror #24
   15240:	muleq	r2, r0, ip
   15244:	muleq	r2, ip, ip
   15248:			; <UNDEFINED> instruction: 0x0002ccb0
   1524c:			; <UNDEFINED> instruction: 0x0002ccb0
   15250:			; <UNDEFINED> instruction: 0x0002ccb4
   15254:	andeq	sl, r2, ip, asr #17
   15258:	andeq	ip, r2, ip, lsl #25
   1525c:	andeq	ip, r2, ip, ror ip
   15260:	andeq	ip, r2, r8, ror ip
   15264:	andeq	ip, r2, r4, ror ip
   15268:	andeq	ip, r2, ip, ror ip
   1526c:	andeq	ip, r2, ip, lsl #25
   15270:	andeq	ip, r2, r4, lsl #25
   15274:	andeq	ip, r2, r0, lsl #25
   15278:	andeq	sl, r2, r0, lsr #20
   1527c:	andeq	ip, r2, ip, ror ip
   15280:	andeq	ip, r2, ip, ror ip
   15284:	andeq	ip, r2, r8, ror ip
   15288:	strdeq	ip, [r2], -r0
   1528c:	andeq	ip, r2, r4, ror ip
   15290:	andeq	ip, r2, ip, ror ip
   15294:	andeq	ip, r2, r0, ror ip
   15298:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1529c:	andeq	ip, r2, r8, lsl #25
   152a0:	andeq	ip, r2, ip, ror #25
   152a4:	andeq	ip, r2, r0, lsl #25
   152a8:	strdeq	ip, [r2], -r8
   152ac:	andeq	ip, r2, ip, lsl #25
   152b0:	andeq	ip, r2, r0, lsr #25
   152b4:	andeq	ip, r2, ip, asr sp
   152b8:	andeq	ip, r2, ip, lsr #25
   152bc:	andeq	ip, r2, r0, lsl sp
   152c0:	andeq	ip, r2, r4, lsr #25
   152c4:	andeq	ip, r2, r8, lsr #25
   152c8:	ldrdeq	ip, [r2], -r4
   152cc:	andeq	ip, r2, r8, ror #25
   152d0:	andeq	ip, r2, r8, lsl sp
   152d4:	andeq	ip, r2, r4, asr sp
   152d8:	andeq	ip, r2, r0, lsr #27
   152dc:	andeq	ip, r2, r0, ror #27
   152e0:	andeq	ip, r2, r4, lsr #28
   152e4:	andeq	ip, r2, r4, lsr #28
   152e8:	andeq	ip, r2, r0, lsr #28
   152ec:	andeq	ip, r2, r8, lsl lr
   152f0:	andeq	ip, r2, r0, lsl lr
   152f4:	andeq	ip, r2, r4, lsl #28
   152f8:			; <UNDEFINED> instruction: 0x0002cebc
   152fc:	strdeq	ip, [r2], -r8
   15300:	strdeq	ip, [r2], -r0
   15304:	andeq	ip, r2, r8, ror #27
   15308:	andeq	ip, r2, r0, ror #27
   1530c:	andeq	ip, r2, r0, ror #27
   15310:	andeq	ip, r2, r4, lsl #30
   15314:			; <UNDEFINED> instruction: 0x0002cdbc
   15318:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1531c:	andeq	ip, r2, r0, lsl #28
   15320:	andeq	ip, r2, r8, lsr lr
   15324:	andeq	ip, r2, r8, lsr lr
   15328:	muleq	r2, r4, lr
   1532c:	andeq	ip, r2, r8, asr #29
   15330:			; <UNDEFINED> instruction: 0x0002cfb4
   15334:	andeq	ip, r2, ip, lsl #30
   15338:	andeq	ip, r2, r8, lsr pc
   1533c:	andeq	ip, r2, r0, asr pc
   15340:	andeq	ip, r2, r0, ror #30
   15344:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   15348:			; <UNDEFINED> instruction: 0x0002cfb8
   1534c:	andeq	sp, r2, r0, lsr r0
   15350:	andeq	sp, r2, r0, asr r0
   15354:	andeq	sp, r2, r0, asr r0
   15358:	andeq	sp, r2, r8, ror r0
   1535c:	andeq	sp, r2, r0, lsl #1
   15360:	andeq	sp, r2, ip, ror #1
   15364:	andeq	sp, r2, r0, asr #2
   15368:	muleq	r2, r0, r1
   1536c:	strdeq	sp, [r2], -ip
   15370:	andeq	sp, r2, r0, asr r2
   15374:	andeq	sp, r2, ip, asr #5
   15378:	andeq	sp, r2, r0, lsr r3
   1537c:	muleq	r2, ip, r3
   15380:	strdeq	sp, [r2], -r0
   15384:	andeq	sp, r2, ip, ror #8
   15388:	ldrdeq	sp, [r2], -r0
   1538c:	andeq	sp, r2, r0, asr r5

00015390 <_start@@Base>:
   15390:	mov	fp, #0
   15394:	mov	lr, #0
   15398:	pop	{r1}		; (ldr r1, [sp], #4)
   1539c:	mov	r2, sp
   153a0:	push	{r2}		; (str r2, [sp, #-4]!)
   153a4:	push	{r0}		; (str r0, [sp, #-4]!)
   153a8:	ldr	ip, [pc, #16]	; 153c0 <_start@@Base+0x30>
   153ac:	push	{ip}		; (str ip, [sp, #-4]!)
   153b0:	ldr	r0, [pc, #12]	; 153c4 <_start@@Base+0x34>
   153b4:	ldr	r3, [pc, #12]	; 153c8 <_start@@Base+0x38>
   153b8:	bl	14558 <__libc_start_main@plt>
   153bc:	bl	145dc <abort@plt>
   153c0:	andeq	lr, r3, r0, lsr #20
   153c4:	strdeq	r4, [r1], -r8
   153c8:	andeq	lr, r3, r0, asr #19
   153cc:	ldr	r3, [pc, #20]	; 153e8 <_start@@Base+0x58>
   153d0:	ldr	r2, [pc, #20]	; 153ec <_start@@Base+0x5c>
   153d4:	add	r3, pc, r3
   153d8:	ldr	r2, [r3, r2]
   153dc:	cmp	r2, #0
   153e0:	bxeq	lr
   153e4:	b	14564 <__gmon_start__@plt>
   153e8:	andeq	pc, r3, r4, lsr #24
   153ec:	andeq	r0, r0, ip, rrx
   153f0:	ldr	r0, [pc, #24]	; 15410 <_start@@Base+0x80>
   153f4:	ldr	r3, [pc, #24]	; 15414 <_start@@Base+0x84>
   153f8:	cmp	r3, r0
   153fc:	bxeq	lr
   15400:	ldr	r3, [pc, #16]	; 15418 <_start@@Base+0x88>
   15404:	cmp	r3, #0
   15408:	bxeq	lr
   1540c:	bx	r3
   15410:	andeq	r5, r5, r8, asr #7
   15414:	andeq	r5, r5, r8, asr #7
   15418:	andeq	r0, r0, r0
   1541c:	ldr	r0, [pc, #36]	; 15448 <_start@@Base+0xb8>
   15420:	ldr	r1, [pc, #36]	; 1544c <_start@@Base+0xbc>
   15424:	sub	r1, r1, r0
   15428:	asr	r1, r1, #2
   1542c:	add	r1, r1, r1, lsr #31
   15430:	asrs	r1, r1, #1
   15434:	bxeq	lr
   15438:	ldr	r3, [pc, #16]	; 15450 <_start@@Base+0xc0>
   1543c:	cmp	r3, #0
   15440:	bxeq	lr
   15444:	bx	r3
   15448:	andeq	r5, r5, r8, asr #7
   1544c:	andeq	r5, r5, r8, asr #7
   15450:	andeq	r0, r0, r0
   15454:	push	{r4, lr}
   15458:	ldr	r4, [pc, #24]	; 15478 <_start@@Base+0xe8>
   1545c:	ldrb	r3, [r4]
   15460:	cmp	r3, #0
   15464:	popne	{r4, pc}
   15468:	bl	153f0 <_start@@Base+0x60>
   1546c:	mov	r3, #1
   15470:	strb	r3, [r4]
   15474:	pop	{r4, pc}
   15478:	andeq	r5, r5, r8, asr #7
   1547c:	b	1541c <_start@@Base+0x8c>
   15480:	sub	r1, r1, r0
   15484:	strd	r4, [sp, #-8]!
   15488:	cmp	r1, #8
   1548c:	bhi	154c0 <_start@@Base+0x130>
   15490:	sub	r1, r1, #1
   15494:	cmp	r1, #7
   15498:	addls	pc, pc, r1, lsl #2
   1549c:	b	15568 <_start@@Base+0x1d8>
   154a0:	b	15520 <_start@@Base+0x190>
   154a4:	b	1552c <_start@@Base+0x19c>
   154a8:	b	15538 <_start@@Base+0x1a8>
   154ac:	b	15544 <_start@@Base+0x1b4>
   154b0:	b	15550 <_start@@Base+0x1c0>
   154b4:	b	1555c <_start@@Base+0x1cc>
   154b8:	b	15514 <_start@@Base+0x184>
   154bc:	b	154c0 <_start@@Base+0x130>
   154c0:	ldrb	r2, [r0, #7]
   154c4:	mov	r3, #0
   154c8:	mov	r1, r3
   154cc:	ldrb	r4, [r0, #6]
   154d0:	orr	r2, r2, r4, lsl #8
   154d4:	ldrb	r4, [r0, #5]
   154d8:	orr	r2, r2, r4, lsl #16
   154dc:	ldrb	r4, [r0, #4]
   154e0:	orr	r2, r2, r4, lsl #24
   154e4:	ldrb	r4, [r0, #3]
   154e8:	orr	r1, r1, r4
   154ec:	ldrb	r4, [r0, #2]
   154f0:	orr	r1, r1, r4, lsl #8
   154f4:	ldrb	r4, [r0, #1]
   154f8:	orr	r1, r1, r4, lsl #16
   154fc:	ldrb	r4, [r0]
   15500:	mov	r0, r2
   15504:	orr	r1, r1, r4, lsl #24
   15508:	ldrd	r4, [sp]
   1550c:	add	sp, sp, #8
   15510:	bx	lr
   15514:	mov	r2, #0
   15518:	mov	r3, #0
   1551c:	b	154c8 <_start@@Base+0x138>
   15520:	mov	r2, #0
   15524:	mov	r1, r2
   15528:	b	154fc <_start@@Base+0x16c>
   1552c:	mov	r2, #0
   15530:	mov	r1, r2
   15534:	b	154f4 <_start@@Base+0x164>
   15538:	mov	r2, #0
   1553c:	mov	r1, r2
   15540:	b	154ec <_start@@Base+0x15c>
   15544:	mov	r2, #0
   15548:	mov	r1, r2
   1554c:	b	154e4 <_start@@Base+0x154>
   15550:	mov	r2, #0
   15554:	mov	r1, r2
   15558:	b	154dc <_start@@Base+0x14c>
   1555c:	mov	r2, #0
   15560:	mov	r1, r2
   15564:	b	154d4 <_start@@Base+0x144>
   15568:	mov	r0, #0
   1556c:	mov	r1, r0
   15570:	b	15508 <_start@@Base+0x178>
   15574:	cmp	r0, #4
   15578:	movhi	r0, #0
   1557c:	movls	r0, #1
   15580:	bx	lr
   15584:	cmp	r0, #11
   15588:	bhi	155ac <_start@@Base+0x21c>
   1558c:	cmp	r0, #8
   15590:	bcs	155bc <_start@@Base+0x22c>
   15594:	cmp	r0, #0
   15598:	beq	155bc <_start@@Base+0x22c>
   1559c:	sub	r0, r0, #2
   155a0:	clz	r0, r0
   155a4:	lsr	r0, r0, #5
   155a8:	bx	lr
   155ac:	sub	r0, r0, #255	; 0xff
   155b0:	clz	r0, r0
   155b4:	lsr	r0, r0, #5
   155b8:	bx	lr
   155bc:	mov	r0, #1
   155c0:	bx	lr
   155c4:	bx	lr
   155c8:	mov	r0, #0
   155cc:	bx	lr
   155d0:	mov	r3, #4
   155d4:	mov	r1, #0
   155d8:	mov	r2, r3
   155dc:	b	2a700 <flatcc_verify_field@@Base>
   155e0:	ldr	ip, [pc, #144]	; 15678 <_start@@Base+0x2e8>
   155e4:	mov	r3, #21
   155e8:	mov	r2, #0
   155ec:	strd	r4, [sp, #-16]!
   155f0:	mov	r5, r0
   155f4:	mov	r4, #22
   155f8:	str	r6, [sp, #8]
   155fc:	mov	r6, r1
   15600:	str	lr, [sp, #12]
   15604:	sub	sp, sp, #8
   15608:	add	ip, pc, ip
   1560c:	stm	sp, {r3, ip}
   15610:	ldr	r3, [pc, #100]	; 1567c <_start@@Base+0x2ec>
   15614:	add	r3, pc, r3
   15618:	bl	3cb1c <flatcc_json_printer_table_field@@Base>
   1561c:	ldr	ip, [pc, #92]	; 15680 <_start@@Base+0x2f0>
   15620:	mov	r1, r6
   15624:	mov	r0, r5
   15628:	mov	r2, #1
   1562c:	ldr	r3, [pc, #80]	; 15684 <_start@@Base+0x2f4>
   15630:	add	ip, pc, ip
   15634:	add	r3, pc, r3
   15638:	stm	sp, {r4, ip}
   1563c:	bl	3cb1c <flatcc_json_printer_table_field@@Base>
   15640:	ldr	ip, [pc, #64]	; 15688 <_start@@Base+0x2f8>
   15644:	mov	r1, r6
   15648:	mov	r0, r5
   1564c:	mov	r2, #2
   15650:	ldr	r3, [pc, #52]	; 1568c <_start@@Base+0x2fc>
   15654:	add	ip, pc, ip
   15658:	add	r3, pc, r3
   1565c:	stm	sp, {r4, ip}
   15660:	bl	3cb1c <flatcc_json_printer_table_field@@Base>
   15664:	add	sp, sp, #8
   15668:	ldrd	r4, [sp]
   1566c:	ldr	r6, [sp, #8]
   15670:	add	sp, sp, #12
   15674:	pop	{pc}		; (ldr pc, [sp], #4)
   15678:			; <UNDEFINED> instruction: 0x000001b4
   1567c:	andeq	r9, r2, r8, lsl r4
   15680:	andeq	r0, r0, ip, lsl #2
   15684:	andeq	r9, r2, r0, lsl r4
   15688:	andeq	r0, r0, r8, rrx
   1568c:	andeq	r9, r2, r4, lsl #8
   15690:	ldr	r3, [pc, #40]	; 156c0 <_start@@Base+0x330>
   15694:	mov	ip, #0
   15698:	push	{lr}		; (str lr, [sp, #-4]!)
   1569c:	mov	lr, #19
   156a0:	sub	sp, sp, #12
   156a4:	mov	r2, ip
   156a8:	str	lr, [sp]
   156ac:	str	ip, [sp, #4]
   156b0:	add	r3, pc, r3
   156b4:	bl	33da8 <flatcc_json_printer_int32_field@@Base>
   156b8:	add	sp, sp, #12
   156bc:	pop	{pc}		; (ldr pc, [sp], #4)
   156c0:	andeq	r9, r2, r4, asr #7
   156c4:	ldr	r3, [pc, #112]	; 1573c <_start@@Base+0x3ac>
   156c8:	mov	ip, #15
   156cc:	mov	r2, #0
   156d0:	strd	r4, [sp, #-20]!	; 0xffffffec
   156d4:	mov	r4, r0
   156d8:	mov	r5, r1
   156dc:	strd	r6, [sp, #8]
   156e0:	mov	r6, #0
   156e4:	mov	r7, #0
   156e8:	str	lr, [sp, #16]
   156ec:	sub	sp, sp, #20
   156f0:	add	r3, pc, r3
   156f4:	str	ip, [sp]
   156f8:	strd	r6, [sp, #8]
   156fc:	bl	33fcc <flatcc_json_printer_int64_field@@Base>
   15700:	ldr	r3, [pc, #56]	; 15740 <_start@@Base+0x3b0>
   15704:	mov	ip, #0
   15708:	mov	lr, #21
   1570c:	mov	r1, r5
   15710:	mov	r0, r4
   15714:	mov	r2, #1
   15718:	str	lr, [sp]
   1571c:	str	ip, [sp, #4]
   15720:	add	r3, pc, r3
   15724:	bl	33540 <flatcc_json_printer_uint32_field@@Base>
   15728:	add	sp, sp, #20
   1572c:	ldrd	r4, [sp]
   15730:	ldrd	r6, [sp, #8]
   15734:	add	sp, sp, #16
   15738:	pop	{pc}		; (ldr pc, [sp], #4)
   1573c:	muleq	r2, r8, r3
   15740:	andeq	r9, r2, r8, ror r3
   15744:	ldr	r3, [pc, #112]	; 157bc <_start@@Base+0x42c>
   15748:	mov	ip, #15
   1574c:	mov	r2, #0
   15750:	strd	r4, [sp, #-20]!	; 0xffffffec
   15754:	mov	r4, r0
   15758:	mov	r5, r1
   1575c:	strd	r6, [sp, #8]
   15760:	mov	r6, #0
   15764:	mov	r7, #0
   15768:	str	lr, [sp, #16]
   1576c:	sub	sp, sp, #20
   15770:	add	r3, pc, r3
   15774:	str	ip, [sp]
   15778:	strd	r6, [sp, #8]
   1577c:	bl	33fcc <flatcc_json_printer_int64_field@@Base>
   15780:	ldr	r3, [pc, #56]	; 157c0 <_start@@Base+0x430>
   15784:	mov	ip, #0
   15788:	mov	lr, #16
   1578c:	mov	r1, r5
   15790:	mov	r0, r4
   15794:	mov	r2, #1
   15798:	str	lr, [sp]
   1579c:	str	ip, [sp, #4]
   157a0:	add	r3, pc, r3
   157a4:	bl	33540 <flatcc_json_printer_uint32_field@@Base>
   157a8:	add	sp, sp, #20
   157ac:	ldrd	r4, [sp]
   157b0:	ldrd	r6, [sp, #8]
   157b4:	add	sp, sp, #16
   157b8:	pop	{pc}		; (ldr pc, [sp], #4)
   157bc:	andeq	r9, r2, r8, lsl r3
   157c0:	andeq	r9, r2, r0, lsl r3
   157c4:	ldr	r3, [pc, #344]	; 15924 <_start@@Base+0x594>
   157c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   157cc:	mov	r4, r0
   157d0:	mov	r5, r1
   157d4:	strd	r6, [sp, #8]
   157d8:	mov	r7, #4
   157dc:	mov	r6, #8
   157e0:	strd	r8, [sp, #16]
   157e4:	mov	r8, #0
   157e8:	mov	r9, #0
   157ec:	strd	sl, [sp, #24]
   157f0:	mov	sl, #0
   157f4:	mov	fp, #9
   157f8:	str	lr, [sp, #32]
   157fc:	sub	sp, sp, #20
   15800:	mov	r2, sl
   15804:	add	r3, pc, r3
   15808:	str	r7, [sp]
   1580c:	bl	32be4 <flatcc_json_printer_string_field@@Base>
   15810:	ldr	r3, [pc, #272]	; 15928 <_start@@Base+0x598>
   15814:	mov	r1, r5
   15818:	mov	r0, r4
   1581c:	mov	r2, #1
   15820:	str	fp, [sp]
   15824:	str	sl, [sp, #4]
   15828:	add	r3, pc, r3
   1582c:	bl	33540 <flatcc_json_printer_uint32_field@@Base>
   15830:	ldr	r3, [pc, #244]	; 1592c <_start@@Base+0x59c>
   15834:	mov	r1, r5
   15838:	mov	r0, r4
   1583c:	mov	r2, #2
   15840:	str	r7, [sp]
   15844:	add	r3, pc, r3
   15848:	bl	32be4 <flatcc_json_printer_string_field@@Base>
   1584c:	ldr	r3, [pc, #220]	; 15930 <_start@@Base+0x5a0>
   15850:	mov	r1, r5
   15854:	mov	r0, r4
   15858:	mov	r2, #3
   1585c:	str	r6, [sp]
   15860:	strd	r8, [sp, #8]
   15864:	add	r3, pc, r3
   15868:	bl	33fcc <flatcc_json_printer_int64_field@@Base>
   1586c:	ldr	r3, [pc, #192]	; 15934 <_start@@Base+0x5a4>
   15870:	mov	r2, r7
   15874:	mov	r1, r5
   15878:	mov	r0, r4
   1587c:	str	r7, [sp]
   15880:	add	r3, pc, r3
   15884:	bl	32be4 <flatcc_json_printer_string_field@@Base>
   15888:	ldr	r3, [pc, #168]	; 15938 <_start@@Base+0x5a8>
   1588c:	mov	r1, r5
   15890:	mov	r0, r4
   15894:	mov	r2, #5
   15898:	str	r6, [sp]
   1589c:	strd	r8, [sp, #8]
   158a0:	add	r3, pc, r3
   158a4:	bl	33fcc <flatcc_json_printer_int64_field@@Base>
   158a8:	ldr	r3, [pc, #140]	; 1593c <_start@@Base+0x5ac>
   158ac:	mov	r1, r5
   158b0:	mov	r0, r4
   158b4:	mov	r2, #6
   158b8:	str	fp, [sp]
   158bc:	str	sl, [sp, #4]
   158c0:	add	r3, pc, r3
   158c4:	bl	33540 <flatcc_json_printer_uint32_field@@Base>
   158c8:	ldr	r3, [pc, #112]	; 15940 <_start@@Base+0x5b0>
   158cc:	mov	r1, r5
   158d0:	mov	r0, r4
   158d4:	mov	r2, #7
   158d8:	str	r6, [sp]
   158dc:	strd	r8, [sp, #8]
   158e0:	add	r3, pc, r3
   158e4:	bl	33fcc <flatcc_json_printer_int64_field@@Base>
   158e8:	ldr	r3, [pc, #84]	; 15944 <_start@@Base+0x5b4>
   158ec:	mov	r2, r6
   158f0:	mov	r1, r5
   158f4:	mov	r0, r4
   158f8:	str	fp, [sp]
   158fc:	str	sl, [sp, #4]
   15900:	add	r3, pc, r3
   15904:	bl	33540 <flatcc_json_printer_uint32_field@@Base>
   15908:	add	sp, sp, #20
   1590c:	ldrd	r4, [sp]
   15910:	ldrd	r6, [sp, #8]
   15914:	ldrd	r8, [sp, #16]
   15918:	ldrd	sl, [sp, #24]
   1591c:	add	sp, sp, #32
   15920:	pop	{pc}		; (ldr pc, [sp], #4)
   15924:	andeq	r9, r2, r0, asr #5
   15928:	andeq	r9, r2, r4, lsr #5
   1592c:	muleq	r2, r4, r2
   15930:	andeq	r9, r2, ip, ror r2
   15934:	andeq	r9, r2, ip, ror #4
   15938:	andeq	r9, r2, r4, asr r2
   1593c:	andeq	r9, r2, r0, asr #4
   15940:	andeq	r9, r2, ip, lsr #4
   15944:	andeq	r9, r2, r8, lsl r2
   15948:	ldr	ip, [pc, #1268]	; 15e44 <_start@@Base+0xab4>
   1594c:	mov	r2, #0
   15950:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15954:	mov	r4, r0
   15958:	mov	r5, r1
   1595c:	ldr	r3, [pc, #1252]	; 15e48 <_start@@Base+0xab8>
   15960:	strd	r6, [sp, #8]
   15964:	mov	r7, #4
   15968:	mov	r6, #17
   1596c:	strd	r8, [sp, #16]
   15970:	mov	r9, r2
   15974:	mov	r8, #16
   15978:	add	ip, pc, ip
   1597c:	strd	sl, [sp, #24]
   15980:	mov	sl, #3
   15984:	str	lr, [sp, #32]
   15988:	sub	sp, sp, #28
   1598c:	mov	fp, #9
   15990:	add	r3, pc, r3
   15994:	stm	sp, {sl, ip}
   15998:	bl	3d50c <flatcc_json_printer_struct_field@@Base>
   1599c:	ldr	r3, [pc, #1192]	; 15e4c <_start@@Base+0xabc>
   159a0:	mov	ip, #150	; 0x96
   159a4:	mov	r1, r5
   159a8:	mov	r0, r4
   159ac:	mov	r2, #1
   159b0:	stm	sp, {r7, ip}
   159b4:	add	r3, pc, r3
   159b8:	bl	33b80 <flatcc_json_printer_int16_field@@Base>
   159bc:	ldr	r3, [pc, #1164]	; 15e50 <_start@@Base+0xac0>
   159c0:	mov	ip, #100	; 0x64
   159c4:	mov	r2, #2
   159c8:	mov	r1, r5
   159cc:	mov	r0, r4
   159d0:	stm	sp, {r2, ip}
   159d4:	add	r3, pc, r3
   159d8:	bl	33b80 <flatcc_json_printer_int16_field@@Base>
   159dc:	ldr	r3, [pc, #1136]	; 15e54 <_start@@Base+0xac4>
   159e0:	mov	r2, sl
   159e4:	mov	r1, r5
   159e8:	mov	r0, r4
   159ec:	str	r7, [sp]
   159f0:	ldr	sl, [pc, #1120]	; 15e58 <_start@@Base+0xac8>
   159f4:	add	r3, pc, r3
   159f8:	bl	32be4 <flatcc_json_printer_string_field@@Base>
   159fc:	ldr	r3, [pc, #1112]	; 15e5c <_start@@Base+0xacc>
   15a00:	mov	r1, r5
   15a04:	mov	r0, r4
   15a08:	mov	r2, #5
   15a0c:	str	fp, [sp]
   15a10:	add	sl, pc, sl
   15a14:	add	r3, pc, r3
   15a18:	bl	3804c <flatcc_json_printer_uint8_vector_field@@Base>
   15a1c:	mov	lr, #8
   15a20:	mov	r3, #5
   15a24:	ldr	ip, [pc, #1076]	; 15e60 <_start@@Base+0xad0>
   15a28:	mov	r1, r5
   15a2c:	mov	r0, r4
   15a30:	stm	sp, {r3, lr}
   15a34:	mov	r2, #6
   15a38:	ldr	r3, [pc, #1060]	; 15e64 <_start@@Base+0xad4>
   15a3c:	add	ip, pc, ip
   15a40:	str	ip, [sp, #8]
   15a44:	add	r3, pc, r3
   15a48:	bl	35138 <flatcc_json_printer_int8_enum_field@@Base>
   15a4c:	ldr	ip, [pc, #1044]	; 15e68 <_start@@Base+0xad8>
   15a50:	mov	r1, r5
   15a54:	mov	r0, r4
   15a58:	mov	r2, #8
   15a5c:	str	r7, [sp]
   15a60:	ldr	r3, [pc, #1028]	; 15e6c <_start@@Base+0xadc>
   15a64:	add	ip, pc, ip
   15a68:	add	r3, pc, r3
   15a6c:	stmib	sp, {r3, ip}
   15a70:	ldr	r3, [pc, #1016]	; 15e70 <_start@@Base+0xae0>
   15a74:	add	r3, pc, r3
   15a78:	bl	3cde8 <flatcc_json_printer_union_field@@Base>
   15a7c:	mov	ip, #5
   15a80:	ldr	r3, [pc, #1004]	; 15e74 <_start@@Base+0xae4>
   15a84:	mov	r2, fp
   15a88:	mov	r1, r5
   15a8c:	mov	r0, r4
   15a90:	str	ip, [sp]
   15a94:	ldr	ip, [pc, #988]	; 15e78 <_start@@Base+0xae8>
   15a98:	str	r7, [sp, #4]
   15a9c:	add	r3, pc, r3
   15aa0:	add	ip, pc, ip
   15aa4:	str	ip, [sp, #8]
   15aa8:	str	ip, [sp, #20]
   15aac:	bl	3bb50 <flatcc_json_printer_struct_vector_field@@Base>
   15ab0:	ldr	r3, [pc, #964]	; 15e7c <_start@@Base+0xaec>
   15ab4:	mov	r1, r5
   15ab8:	mov	r0, r4
   15abc:	mov	r2, #10
   15ac0:	str	r6, [sp]
   15ac4:	add	r3, pc, r3
   15ac8:	bl	3bedc <flatcc_json_printer_string_vector_field@@Base>
   15acc:	ldr	r3, [pc, #940]	; 15e80 <_start@@Base+0xaf0>
   15ad0:	mov	r1, r5
   15ad4:	mov	r0, r4
   15ad8:	mov	r2, #11
   15adc:	stm	sp, {r6, sl}
   15ae0:	add	r3, pc, r3
   15ae4:	bl	3c2d4 <flatcc_json_printer_table_vector_field@@Base>
   15ae8:	ldr	r3, [pc, #916]	; 15e84 <_start@@Base+0xaf4>
   15aec:	mov	ip, #5
   15af0:	mov	r1, r5
   15af4:	mov	r0, r4
   15af8:	mov	r2, #12
   15afc:	str	ip, [sp]
   15b00:	str	sl, [sp, #4]
   15b04:	add	r3, pc, r3
   15b08:	bl	3cb1c <flatcc_json_printer_table_field@@Base>
   15b0c:	ldr	r3, [pc, #884]	; 15e88 <_start@@Base+0xaf8>
   15b10:	mov	lr, #20
   15b14:	mov	r1, r5
   15b18:	mov	r0, r4
   15b1c:	mov	r2, #13
   15b20:	str	lr, [sp]
   15b24:	stmib	sp, {r9, sl}
   15b28:	mov	sl, #0
   15b2c:	add	r3, pc, r3
   15b30:	bl	3dbbc <flatcc_json_printer_table_as_nested_root@@Base>
   15b34:	ldr	ip, [pc, #848]	; 15e8c <_start@@Base+0xafc>
   15b38:	mov	r1, r5
   15b3c:	mov	r0, r4
   15b40:	mov	r2, #14
   15b44:	ldr	r3, [pc, #836]	; 15e90 <_start@@Base+0xb00>
   15b48:	add	ip, pc, ip
   15b4c:	add	r3, pc, r3
   15b50:	stm	sp, {fp, ip}
   15b54:	mov	fp, #0
   15b58:	bl	3cb1c <flatcc_json_printer_table_field@@Base>
   15b5c:	ldr	r3, [pc, #816]	; 15e94 <_start@@Base+0xb04>
   15b60:	mov	lr, #8
   15b64:	mov	r2, #1
   15b68:	mov	r1, r5
   15b6c:	mov	r0, r4
   15b70:	str	lr, [sp]
   15b74:	str	r2, [sp, #4]
   15b78:	mov	r2, #15
   15b7c:	add	r3, pc, r3
   15b80:	bl	34208 <flatcc_json_printer_bool_field@@Base>
   15b84:	ldr	r3, [pc, #780]	; 15e98 <_start@@Base+0xb08>
   15b88:	mov	r1, r5
   15b8c:	mov	r0, r4
   15b90:	mov	r2, r8
   15b94:	strd	r8, [sp]
   15b98:	add	r3, pc, r3
   15b9c:	bl	33da8 <flatcc_json_printer_int32_field@@Base>
   15ba0:	ldr	r3, [pc, #756]	; 15e9c <_start@@Base+0xb0c>
   15ba4:	mov	r2, r6
   15ba8:	mov	r1, r5
   15bac:	mov	r0, r4
   15bb0:	strd	r8, [sp]
   15bb4:	add	r3, pc, r3
   15bb8:	bl	33540 <flatcc_json_printer_uint32_field@@Base>
   15bbc:	ldr	r3, [pc, #732]	; 15ea0 <_start@@Base+0xb10>
   15bc0:	mov	r1, r5
   15bc4:	mov	r0, r4
   15bc8:	mov	r2, #18
   15bcc:	str	r8, [sp]
   15bd0:	strd	sl, [sp, #8]
   15bd4:	add	r3, pc, r3
   15bd8:	bl	33fcc <flatcc_json_printer_int64_field@@Base>
   15bdc:	ldr	r3, [pc, #704]	; 15ea4 <_start@@Base+0xb14>
   15be0:	mov	r1, r5
   15be4:	mov	r0, r4
   15be8:	mov	r2, #19
   15bec:	str	r8, [sp]
   15bf0:	strd	sl, [sp, #8]
   15bf4:	add	r3, pc, r3
   15bf8:	bl	33744 <flatcc_json_printer_uint64_field@@Base>
   15bfc:	ldr	r3, [pc, #676]	; 15ea8 <_start@@Base+0xb18>
   15c00:	mov	r1, r5
   15c04:	mov	r0, r4
   15c08:	mov	r2, #20
   15c0c:	stm	sp, {r6, r9}
   15c10:	add	r3, pc, r3
   15c14:	bl	33da8 <flatcc_json_printer_int32_field@@Base>
   15c18:	ldr	r3, [pc, #652]	; 15eac <_start@@Base+0xb1c>
   15c1c:	mov	r1, r5
   15c20:	mov	r0, r4
   15c24:	mov	r2, #21
   15c28:	stm	sp, {r6, r9}
   15c2c:	mov	r9, #6
   15c30:	add	r3, pc, r3
   15c34:	bl	33540 <flatcc_json_printer_uint32_field@@Base>
   15c38:	ldr	r3, [pc, #624]	; 15eb0 <_start@@Base+0xb20>
   15c3c:	mov	r1, r5
   15c40:	mov	r0, r4
   15c44:	mov	r2, #22
   15c48:	str	r6, [sp]
   15c4c:	strd	sl, [sp, #8]
   15c50:	add	r3, pc, r3
   15c54:	bl	33fcc <flatcc_json_printer_int64_field@@Base>
   15c58:	ldr	r3, [pc, #596]	; 15eb4 <_start@@Base+0xb24>
   15c5c:	mov	r1, r5
   15c60:	mov	r0, r4
   15c64:	mov	r2, #23
   15c68:	str	r6, [sp]
   15c6c:	strd	sl, [sp, #8]
   15c70:	add	r3, pc, r3
   15c74:	bl	33744 <flatcc_json_printer_uint64_field@@Base>
   15c78:	ldr	r3, [pc, #568]	; 15eb8 <_start@@Base+0xb28>
   15c7c:	mov	r1, r5
   15c80:	mov	r0, r4
   15c84:	mov	r2, #24
   15c88:	str	r8, [sp]
   15c8c:	mov	r8, #5
   15c90:	add	r3, pc, r3
   15c94:	bl	39868 <flatcc_json_printer_bool_vector_field@@Base>
   15c98:	ldr	r3, [pc, #540]	; 15ebc <_start@@Base+0xb2c>
   15c9c:	mov	r1, r5
   15ca0:	mov	r0, r4
   15ca4:	mov	r2, #25
   15ca8:	str	r8, [sp]
   15cac:	vldr	s0, [pc, #388]	; 15e38 <_start@@Base+0xaa8>
   15cb0:	add	r3, pc, r3
   15cb4:	bl	3440c <flatcc_json_printer_float_field@@Base>
   15cb8:	ldr	r3, [pc, #512]	; 15ec0 <_start@@Base+0xb30>
   15cbc:	mov	r1, r5
   15cc0:	mov	r0, r4
   15cc4:	mov	r2, #26
   15cc8:	str	r9, [sp]
   15ccc:	vldr	s0, [pc, #360]	; 15e3c <_start@@Base+0xaac>
   15cd0:	add	r3, pc, r3
   15cd4:	bl	3440c <flatcc_json_printer_float_field@@Base>
   15cd8:	ldr	r3, [pc, #484]	; 15ec4 <_start@@Base+0xb34>
   15cdc:	mov	r1, r5
   15ce0:	mov	r0, r4
   15ce4:	mov	r2, #27
   15ce8:	str	r9, [sp]
   15cec:	vldr	s0, [pc, #332]	; 15e40 <_start@@Base+0xab0>
   15cf0:	add	r3, pc, r3
   15cf4:	bl	3440c <flatcc_json_printer_float_field@@Base>
   15cf8:	ldr	r3, [pc, #456]	; 15ec8 <_start@@Base+0xb38>
   15cfc:	mov	ip, #18
   15d00:	mov	r1, r5
   15d04:	mov	r0, r4
   15d08:	mov	r2, #28
   15d0c:	str	ip, [sp]
   15d10:	add	r3, pc, r3
   15d14:	bl	3bedc <flatcc_json_printer_string_vector_field@@Base>
   15d18:	ldr	ip, [pc, #428]	; 15ecc <_start@@Base+0xb3c>
   15d1c:	mov	r3, #8
   15d20:	mov	lr, #23
   15d24:	mov	r1, r5
   15d28:	mov	r0, r4
   15d2c:	mov	r2, #29
   15d30:	str	lr, [sp]
   15d34:	add	ip, pc, ip
   15d38:	stmib	sp, {r3, ip}
   15d3c:	ldr	r3, [pc, #396]	; 15ed0 <_start@@Base+0xb40>
   15d40:	add	r3, pc, r3
   15d44:	bl	3bb50 <flatcc_json_printer_struct_vector_field@@Base>
   15d48:	ldr	r3, [pc, #388]	; 15ed4 <_start@@Base+0xb44>
   15d4c:	mov	r1, r5
   15d50:	mov	r0, r4
   15d54:	mov	r2, #30
   15d58:	str	r7, [sp]
   15d5c:	add	r3, pc, r3
   15d60:	bl	3804c <flatcc_json_printer_uint8_vector_field@@Base>
   15d64:	ldr	r3, [pc, #364]	; 15ed8 <_start@@Base+0xb48>
   15d68:	mov	r1, r5
   15d6c:	mov	r0, r4
   15d70:	mov	r2, #31
   15d74:	str	r8, [sp]
   15d78:	ldr	ip, [sp, #20]
   15d7c:	add	r3, pc, r3
   15d80:	stmib	sp, {r7, ip}
   15d84:	bl	3bb50 <flatcc_json_printer_struct_vector_field@@Base>
   15d88:	ldr	r3, [pc, #332]	; 15edc <_start@@Base+0xb4c>
   15d8c:	mov	ip, #15
   15d90:	mov	r1, r5
   15d94:	mov	r0, r4
   15d98:	mov	r2, #32
   15d9c:	str	ip, [sp]
   15da0:	add	r3, pc, r3
   15da4:	bl	3958c <flatcc_json_printer_int64_vector_field@@Base>
   15da8:	ldr	r3, [pc, #304]	; 15ee0 <_start@@Base+0xb50>
   15dac:	mov	r1, r5
   15db0:	mov	r0, r4
   15db4:	mov	r2, #33	; 0x21
   15db8:	str	r6, [sp]
   15dbc:	add	r3, pc, r3
   15dc0:	bl	39e0c <flatcc_json_printer_double_vector_field@@Base>
   15dc4:	ldr	ip, [pc, #280]	; 15ee4 <_start@@Base+0xb54>
   15dc8:	mov	lr, #21
   15dcc:	mov	r1, r5
   15dd0:	mov	r0, r4
   15dd4:	mov	r2, #34	; 0x22
   15dd8:	ldr	r3, [pc, #264]	; 15ee8 <_start@@Base+0xb58>
   15ddc:	str	lr, [sp]
   15de0:	add	ip, pc, ip
   15de4:	add	r3, pc, r3
   15de8:	str	ip, [sp, #4]
   15dec:	bl	3cb1c <flatcc_json_printer_table_field@@Base>
   15df0:	ldr	ip, [pc, #244]	; 15eec <_start@@Base+0xb5c>
   15df4:	mov	lr, #10
   15df8:	mov	r1, r5
   15dfc:	mov	r0, r4
   15e00:	mov	r2, #35	; 0x23
   15e04:	ldr	r3, [pc, #228]	; 15ef0 <_start@@Base+0xb60>
   15e08:	str	lr, [sp]
   15e0c:	add	ip, pc, ip
   15e10:	add	r3, pc, r3
   15e14:	str	ip, [sp, #4]
   15e18:	bl	3cb1c <flatcc_json_printer_table_field@@Base>
   15e1c:	add	sp, sp, #28
   15e20:	ldrd	r4, [sp]
   15e24:	ldrd	r6, [sp, #8]
   15e28:	ldrd	r8, [sp, #16]
   15e2c:	ldrd	sl, [sp, #24]
   15e30:	add	sp, sp, #32
   15e34:	pop	{pc}		; (ldr pc, [sp], #4)
   15e38:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   15e3c:	submi	r0, r0, r0
   15e40:	andeq	r0, r0, r0
   15e44:	andeq	r0, r0, r8, ror #26
   15e48:	muleq	r2, r4, r1
   15e4c:	andeq	r9, r2, r4, ror r1
   15e50:	andeq	r9, r2, ip, asr r1
   15e54:	andeq	r9, r2, r0, asr #2
   15e58:			; <UNDEFINED> instruction: 0xffffff30
   15e5c:	andeq	r9, r2, r8, lsr #2
   15e60:	muleq	r0, ip, fp
   15e64:	andeq	r9, r2, r4, lsl #2
   15e68:	andeq	r0, r0, r0, asr #13
   15e6c:	andeq	r2, r0, ip, lsr #8
   15e70:	ldrdeq	r9, [r2], -ip
   15e74:	strheq	r9, [r2], -ip
   15e78:	andeq	r0, r0, r8, lsl #12
   15e7c:	muleq	r2, ip, r0
   15e80:	muleq	r2, r4, r0
   15e84:	andeq	r9, r2, r4, lsl #1
   15e88:	andeq	r9, r2, r4, rrx
   15e8c:			; <UNDEFINED> instruction: 0x000004b4
   15e90:	andeq	r9, r2, ip, asr r0
   15e94:	andeq	r9, r2, r8, lsr r0
   15e98:	andeq	r9, r2, r8, lsr #32
   15e9c:	andeq	r9, r2, r0, lsr #32
   15ea0:	andeq	r9, r2, r4, lsl r0
   15ea4:	andeq	r9, r2, r8
   15ea8:	andeq	r9, r2, r0
   15eac:	strdeq	r8, [r2], -r4
   15eb0:	andeq	r8, r2, r8, ror #31
   15eb4:	ldrdeq	r8, [r2], -ip
   15eb8:	ldrdeq	r8, [r2], -r0
   15ebc:	andeq	r8, r2, r4, asr #31
   15ec0:	andeq	r8, r2, ip, lsr #31
   15ec4:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   15ec8:	andeq	r8, r2, ip, ror pc
   15ecc:	andeq	r0, r0, r8, asr r2
   15ed0:	andeq	r8, r2, r0, ror #30
   15ed4:	andeq	r8, r2, ip, asr pc
   15ed8:	andeq	r8, r2, r4, asr #30
   15edc:	andeq	r8, r2, r8, lsr #30
   15ee0:	andeq	r8, r2, ip, lsl pc
   15ee4:			; <UNDEFINED> instruction: 0xfffff7dc
   15ee8:	andeq	r8, r2, r8, lsl #30
   15eec:	andeq	r0, r0, r0, ror #1
   15ef0:	strdeq	r8, [r2], -r4
   15ef4:	ldr	r3, [pc, #140]	; 15f88 <_start@@Base+0xbf8>
   15ef8:	mov	ip, #4
   15efc:	strd	r4, [sp, #-16]!
   15f00:	mov	r4, #0
   15f04:	mov	r5, r0
   15f08:	str	r6, [sp, #8]
   15f0c:	mov	r2, r4
   15f10:	mov	r6, r1
   15f14:	str	lr, [sp, #12]
   15f18:	sub	sp, sp, #8
   15f1c:	add	r3, pc, r3
   15f20:	str	ip, [sp]
   15f24:	str	r4, [sp, #4]
   15f28:	bl	32dd8 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15f2c:	ldr	r3, [pc, #88]	; 15f8c <_start@@Base+0xbfc>
   15f30:	mov	ip, #1
   15f34:	mov	r2, #7
   15f38:	mov	r1, r6
   15f3c:	mov	r0, r5
   15f40:	stm	sp, {r2, ip}
   15f44:	mov	r2, ip
   15f48:	add	r3, pc, r3
   15f4c:	bl	32dd8 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15f50:	ldr	r3, [pc, #56]	; 15f90 <_start@@Base+0xc00>
   15f54:	mov	ip, #6
   15f58:	mov	r1, r6
   15f5c:	mov	r0, r5
   15f60:	mov	r2, #2
   15f64:	str	ip, [sp]
   15f68:	str	r4, [sp, #4]
   15f6c:	add	r3, pc, r3
   15f70:	bl	32dd8 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15f74:	add	sp, sp, #8
   15f78:	ldrd	r4, [sp]
   15f7c:	ldr	r6, [sp, #8]
   15f80:	add	sp, sp, #12
   15f84:	pop	{pc}		; (ldr pc, [sp], #4)
   15f88:	strdeq	r8, [r2], -r4
   15f8c:	ldrdeq	r8, [r2], -r0
   15f90:			; <UNDEFINED> instruction: 0x00028db4
   15f94:	ldr	ip, [pc, #96]	; 15ffc <_start@@Base+0xc6c>
   15f98:	mov	r3, #0
   15f9c:	mov	r2, r1
   15fa0:	strd	r4, [sp, #-12]!
   15fa4:	mov	r4, r1
   15fa8:	mov	r1, r3
   15fac:	str	lr, [sp, #8]
   15fb0:	sub	sp, sp, #12
   15fb4:	mov	lr, #2
   15fb8:	mov	r5, r0
   15fbc:	add	ip, pc, ip
   15fc0:	stm	sp, {ip, lr}
   15fc4:	bl	36054 <flatcc_json_printer_uint32_struct_field@@Base>
   15fc8:	ldr	ip, [pc, #48]	; 16000 <_start@@Base+0xc70>
   15fcc:	mov	lr, #8
   15fd0:	mov	r2, r4
   15fd4:	mov	r0, r5
   15fd8:	mov	r3, #4
   15fdc:	mov	r1, #1
   15fe0:	add	ip, pc, ip
   15fe4:	stm	sp, {ip, lr}
   15fe8:	bl	36054 <flatcc_json_printer_uint32_struct_field@@Base>
   15fec:	add	sp, sp, #12
   15ff0:	ldrd	r4, [sp]
   15ff4:	add	sp, sp, #8
   15ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   15ffc:	andeq	r8, r2, ip, ror #26
   16000:	andeq	r8, r2, ip, asr #26
   16004:	ldr	r3, [pc, #152]	; 160a4 <_start@@Base+0xd14>
   16008:	mov	r2, #0
   1600c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16010:	mov	r4, r0
   16014:	mov	r5, r1
   16018:	str	r6, [sp, #8]
   1601c:	mov	r6, #2
   16020:	strd	r8, [sp, #12]
   16024:	mov	r8, #0
   16028:	mov	r9, #0
   1602c:	str	lr, [sp, #20]
   16030:	sub	sp, sp, #16
   16034:	add	r3, pc, r3
   16038:	str	r6, [sp]
   1603c:	bl	32be4 <flatcc_json_printer_string_field@@Base>
   16040:	ldr	r3, [pc, #96]	; 160a8 <_start@@Base+0xd18>
   16044:	mov	r2, #3
   16048:	mov	r1, r5
   1604c:	mov	r0, r4
   16050:	str	r2, [sp]
   16054:	mov	r2, #1
   16058:	strd	r8, [sp, #8]
   1605c:	add	r3, pc, r3
   16060:	bl	33fcc <flatcc_json_printer_int64_field@@Base>
   16064:	ldr	r3, [pc, #64]	; 160ac <_start@@Base+0xd1c>
   16068:	mov	ip, #0
   1606c:	mov	lr, #5
   16070:	mov	r2, r6
   16074:	mov	r1, r5
   16078:	mov	r0, r4
   1607c:	str	lr, [sp]
   16080:	str	ip, [sp, #4]
   16084:	add	r3, pc, r3
   16088:	bl	3333c <flatcc_json_printer_uint16_field@@Base>
   1608c:	add	sp, sp, #16
   16090:	ldrd	r4, [sp]
   16094:	ldr	r6, [sp, #8]
   16098:	ldrd	r8, [sp, #12]
   1609c:	add	sp, sp, #20
   160a0:	pop	{pc}		; (ldr pc, [sp], #4)
   160a4:	strdeq	r8, [r2], -r4
   160a8:	ldrdeq	r8, [r2], -ip
   160ac:			; <UNDEFINED> instruction: 0x00028cb8
   160b0:	ldr	ip, [pc, #108]	; 16124 <_start@@Base+0xd94>
   160b4:	mov	r3, #0
   160b8:	mov	r2, r1
   160bc:	strd	r4, [sp, #-16]!
   160c0:	mov	r4, #1
   160c4:	mov	r5, r1
   160c8:	str	r6, [sp, #8]
   160cc:	mov	r1, r3
   160d0:	mov	r6, r0
   160d4:	str	lr, [sp, #12]
   160d8:	sub	sp, sp, #8
   160dc:	add	ip, pc, ip
   160e0:	str	ip, [sp]
   160e4:	str	r4, [sp, #4]
   160e8:	bl	3652c <flatcc_json_printer_int16_struct_field@@Base>
   160ec:	ldr	ip, [pc, #52]	; 16128 <_start@@Base+0xd98>
   160f0:	mov	r2, r5
   160f4:	mov	r1, r4
   160f8:	mov	r0, r6
   160fc:	mov	r3, #2
   16100:	str	r4, [sp, #4]
   16104:	add	ip, pc, ip
   16108:	str	ip, [sp]
   1610c:	bl	36378 <flatcc_json_printer_int8_struct_field@@Base>
   16110:	add	sp, sp, #8
   16114:	ldrd	r4, [sp]
   16118:	ldr	r6, [sp, #8]
   1611c:	add	sp, sp, #12
   16120:	pop	{pc}		; (ldr pc, [sp], #4)
   16124:	andeq	r8, r2, r4, asr #22
   16128:	andeq	r8, r2, r0, asr #24
   1612c:	ldrb	r3, [r1, #8]
   16130:	sub	r3, r3, #1
   16134:	cmp	r3, #3
   16138:	addls	pc, pc, r3, lsl #2
   1613c:	b	16180 <_start@@Base+0xdf0>
   16140:	b	16174 <_start@@Base+0xde4>
   16144:	b	16168 <_start@@Base+0xdd8>
   16148:	b	1615c <_start@@Base+0xdcc>
   1614c:	b	16150 <_start@@Base+0xdc0>
   16150:	ldr	r2, [pc, #44]	; 16184 <_start@@Base+0xdf4>
   16154:	add	r2, pc, r2
   16158:	b	3d0c0 <flatcc_json_printer_union_table@@Base>
   1615c:	ldr	r2, [pc, #36]	; 16188 <_start@@Base+0xdf8>
   16160:	add	r2, pc, r2
   16164:	b	3d0c0 <flatcc_json_printer_union_table@@Base>
   16168:	ldr	r2, [pc, #28]	; 1618c <_start@@Base+0xdfc>
   1616c:	add	r2, pc, r2
   16170:	b	3d0c0 <flatcc_json_printer_union_table@@Base>
   16174:	ldr	r2, [pc, #20]	; 16190 <_start@@Base+0xe00>
   16178:	add	r2, pc, r2
   1617c:	b	3d0c0 <flatcc_json_printer_union_table@@Base>
   16180:	bx	lr
   16184:	andeq	r0, r0, r8, lsr r0
   16188:	andeq	r2, r0, ip, lsl #1
   1618c:	muleq	r0, ip, r3
   16190:			; <UNDEFINED> instruction: 0xfffff7c8
   16194:	ldr	ip, [pc, #148]	; 16230 <_start@@Base+0xea0>
   16198:	mov	r3, #6
   1619c:	mov	r2, #0
   161a0:	strd	r4, [sp, #-12]!
   161a4:	mov	r4, r0
   161a8:	mov	r5, r1
   161ac:	str	lr, [sp, #8]
   161b0:	sub	sp, sp, #20
   161b4:	add	ip, pc, ip
   161b8:	stm	sp, {r3, ip}
   161bc:	ldr	r3, [pc, #112]	; 16234 <_start@@Base+0xea4>
   161c0:	add	r3, pc, r3
   161c4:	bl	3cb1c <flatcc_json_printer_table_field@@Base>
   161c8:	ldr	ip, [pc, #104]	; 16238 <_start@@Base+0xea8>
   161cc:	mov	r3, #5
   161d0:	mov	r1, r5
   161d4:	mov	r0, r4
   161d8:	mov	r2, #1
   161dc:	add	ip, pc, ip
   161e0:	stm	sp, {r3, ip}
   161e4:	ldr	r3, [pc, #80]	; 1623c <_start@@Base+0xeac>
   161e8:	add	r3, pc, r3
   161ec:	bl	3cb1c <flatcc_json_printer_table_field@@Base>
   161f0:	ldr	lr, [pc, #72]	; 16240 <_start@@Base+0xeb0>
   161f4:	mov	r3, #7
   161f8:	mov	r1, r5
   161fc:	mov	r0, r4
   16200:	mov	r2, #3
   16204:	ldr	ip, [pc, #56]	; 16244 <_start@@Base+0xeb4>
   16208:	add	lr, pc, lr
   1620c:	add	ip, pc, ip
   16210:	stm	sp, {r3, ip, lr}
   16214:	ldr	r3, [pc, #44]	; 16248 <_start@@Base+0xeb8>
   16218:	add	r3, pc, r3
   1621c:	bl	3c790 <flatcc_json_printer_union_vector_field@@Base>
   16220:	add	sp, sp, #20
   16224:	ldrd	r4, [sp]
   16228:	add	sp, sp, #8
   1622c:	pop	{pc}		; (ldr pc, [sp], #4)
   16230:			; <UNDEFINED> instruction: 0xfffff424
   16234:	andeq	r8, r2, r8, lsl #23
   16238:	andeq	r0, r0, r8, rrx
   1623c:	andeq	r8, r2, r8, ror #22
   16240:			; <UNDEFINED> instruction: 0xffffff1c
   16244:	andeq	r1, r0, r8, lsl #25
   16248:	andeq	r8, r2, r0, asr #22
   1624c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16250:	mov	r3, #14
   16254:	mov	r2, #1
   16258:	ldr	r5, [pc, #232]	; 16348 <_start@@Base+0xfb8>
   1625c:	strd	r6, [sp, #8]
   16260:	mov	r6, r0
   16264:	mov	r7, r1
   16268:	ldr	r4, [pc, #220]	; 1634c <_start@@Base+0xfbc>
   1626c:	strd	r8, [sp, #16]
   16270:	mov	r8, #10
   16274:	mov	r9, #9
   16278:	str	lr, [sp, #24]
   1627c:	sub	sp, sp, #20
   16280:	add	r5, pc, r5
   16284:	stm	sp, {r3, r5}
   16288:	add	r4, pc, r4
   1628c:	ldr	r3, [pc, #188]	; 16350 <_start@@Base+0xfc0>
   16290:	str	r4, [sp, #8]
   16294:	add	r3, pc, r3
   16298:	bl	3cde8 <flatcc_json_printer_union_field@@Base>
   1629c:	ldr	r3, [pc, #176]	; 16354 <_start@@Base+0xfc4>
   162a0:	mov	r1, r7
   162a4:	mov	r0, r6
   162a8:	mov	r2, #3
   162ac:	str	r8, [sp]
   162b0:	str	r5, [sp, #4]
   162b4:	str	r4, [sp, #8]
   162b8:	add	r3, pc, r3
   162bc:	bl	3cde8 <flatcc_json_printer_union_field@@Base>
   162c0:	ldr	r3, [pc, #144]	; 16358 <_start@@Base+0xfc8>
   162c4:	mov	r1, r7
   162c8:	mov	r0, r6
   162cc:	mov	r2, #5
   162d0:	str	r9, [sp]
   162d4:	str	r5, [sp, #4]
   162d8:	str	r4, [sp, #8]
   162dc:	add	r3, pc, r3
   162e0:	bl	3cde8 <flatcc_json_printer_union_field@@Base>
   162e4:	ldr	r3, [pc, #112]	; 1635c <_start@@Base+0xfcc>
   162e8:	mov	ip, #5
   162ec:	mov	r1, r7
   162f0:	mov	r0, r6
   162f4:	mov	r2, #7
   162f8:	str	ip, [sp]
   162fc:	str	r5, [sp, #4]
   16300:	str	r4, [sp, #8]
   16304:	add	r3, pc, r3
   16308:	bl	3cde8 <flatcc_json_printer_union_field@@Base>
   1630c:	ldr	r3, [pc, #76]	; 16360 <_start@@Base+0xfd0>
   16310:	mov	r2, r9
   16314:	mov	r1, r7
   16318:	mov	r0, r6
   1631c:	str	r8, [sp]
   16320:	str	r5, [sp, #4]
   16324:	str	r4, [sp, #8]
   16328:	add	r3, pc, r3
   1632c:	bl	3c790 <flatcc_json_printer_union_vector_field@@Base>
   16330:	add	sp, sp, #20
   16334:	ldrd	r4, [sp]
   16338:	ldrd	r6, [sp, #8]
   1633c:	ldrd	r8, [sp, #16]
   16340:	add	sp, sp, #24
   16344:	pop	{pc}		; (ldr pc, [sp], #4)
   16348:	andeq	r0, r0, r4, asr #3
   1634c:	ldrdeq	r0, [r0], -r4
   16350:	andeq	r8, r2, ip, asr #21
   16354:			; <UNDEFINED> instruction: 0x00028ab8
   16358:	andeq	r8, r2, r0, lsr #21
   1635c:	andeq	r8, r2, r4, lsl #21
   16360:	andeq	r8, r2, r8, ror #20
   16364:	ldrb	r3, [r1, #8]
   16368:	mov	r2, r1
   1636c:	mov	ip, r0
   16370:	cmp	r3, #10
   16374:	bhi	1639c <_start@@Base+0x100c>
   16378:	cmp	r3, #9
   1637c:	bcs	163c0 <_start@@Base+0x1030>
   16380:	cmp	r3, #2
   16384:	beq	163cc <_start@@Base+0x103c>
   16388:	cmp	r3, #8
   1638c:	bne	163b8 <_start@@Base+0x1028>
   16390:	ldr	r2, [pc, #64]	; 163d8 <_start@@Base+0x1048>
   16394:	add	r2, pc, r2
   16398:	b	3d1ec <flatcc_json_printer_union_struct@@Base>
   1639c:	cmp	r3, #11
   163a0:	beq	163ac <_start@@Base+0x101c>
   163a4:	cmp	r3, #255	; 0xff
   163a8:	bne	163bc <_start@@Base+0x102c>
   163ac:	mov	r1, r2
   163b0:	mov	r0, ip
   163b4:	b	3d2c0 <flatcc_json_printer_union_string@@Base>
   163b8:	bx	lr
   163bc:	bx	lr
   163c0:	ldr	r2, [pc, #20]	; 163dc <_start@@Base+0x104c>
   163c4:	add	r2, pc, r2
   163c8:	b	3d1ec <flatcc_json_printer_union_struct@@Base>
   163cc:	ldr	r2, [pc, #12]	; 163e0 <_start@@Base+0x1050>
   163d0:	add	r2, pc, r2
   163d4:	b	3d0c0 <flatcc_json_printer_union_table@@Base>
   163d8:	andeq	r0, r0, ip, ror r0
   163dc:	andeq	r0, r0, r8, lsl r0
   163e0:			; <UNDEFINED> instruction: 0xfffff2b8
   163e4:	ldr	ip, [pc, #40]	; 16414 <_start@@Base+0x1084>
   163e8:	mov	r3, #0
   163ec:	mov	r2, r1
   163f0:	push	{lr}		; (str lr, [sp, #-4]!)
   163f4:	mov	lr, #10
   163f8:	sub	sp, sp, #12
   163fc:	mov	r1, r3
   16400:	add	ip, pc, ip
   16404:	stm	sp, {ip, lr}
   16408:	bl	366e0 <flatcc_json_printer_int32_struct_field@@Base>
   1640c:	add	sp, sp, #12
   16410:	pop	{pc}		; (ldr pc, [sp], #4)
   16414:	muleq	r2, ip, r9
   16418:	ldr	ip, [pc, #40]	; 16448 <_start@@Base+0x10b8>
   1641c:	mov	r3, #0
   16420:	mov	r2, r1
   16424:	push	{lr}		; (str lr, [sp, #-4]!)
   16428:	mov	lr, #11
   1642c:	sub	sp, sp, #12
   16430:	mov	r1, r3
   16434:	add	ip, pc, ip
   16438:	stm	sp, {ip, lr}
   1643c:	bl	35ec4 <flatcc_json_printer_uint16_struct_field@@Base>
   16440:	add	sp, sp, #12
   16444:	pop	{pc}		; (ldr pc, [sp], #4)
   16448:	andeq	r8, r2, r4, ror r9
   1644c:	cmp	r1, #9
   16450:	mov	r3, r0
   16454:	beq	164a0 <_start@@Base+0x1110>
   16458:	bls	16480 <_start@@Base+0x10f0>
   1645c:	cmp	r1, #11
   16460:	beq	164b0 <_start@@Base+0x1120>
   16464:	bcc	164c0 <_start@@Base+0x1130>
   16468:	cmp	r1, #255	; 0xff
   1646c:	bne	164d0 <_start@@Base+0x1140>
   16470:	ldr	r1, [pc, #124]	; 164f4 <_start@@Base+0x1164>
   16474:	mov	r2, #6
   16478:	add	r1, pc, r1
   1647c:	b	32a98 <flatcc_json_printer_enum@@Base>
   16480:	cmp	r1, #2
   16484:	beq	164e4 <_start@@Base+0x1154>
   16488:	cmp	r1, #8
   1648c:	bne	164d0 <_start@@Base+0x1140>
   16490:	mov	r2, r1
   16494:	ldr	r1, [pc, #92]	; 164f8 <_start@@Base+0x1168>
   16498:	add	r1, pc, r1
   1649c:	b	32a98 <flatcc_json_printer_enum@@Base>
   164a0:	ldr	r1, [pc, #84]	; 164fc <_start@@Base+0x116c>
   164a4:	mov	r2, #5
   164a8:	add	r1, pc, r1
   164ac:	b	32a98 <flatcc_json_printer_enum@@Base>
   164b0:	ldr	r1, [pc, #72]	; 16500 <_start@@Base+0x1170>
   164b4:	mov	r2, #5
   164b8:	add	r1, pc, r1
   164bc:	b	32a98 <flatcc_json_printer_enum@@Base>
   164c0:	ldr	r1, [pc, #60]	; 16504 <_start@@Base+0x1174>
   164c4:	mov	r2, #7
   164c8:	add	r1, pc, r1
   164cc:	b	32a98 <flatcc_json_printer_enum@@Base>
   164d0:	ldr	r1, [pc, #48]	; 16508 <_start@@Base+0x1178>
   164d4:	mov	r0, r3
   164d8:	mov	r2, #4
   164dc:	add	r1, pc, r1
   164e0:	b	32a98 <flatcc_json_printer_enum@@Base>
   164e4:	ldr	r1, [pc, #32]	; 1650c <_start@@Base+0x117c>
   164e8:	mov	r2, #5
   164ec:	add	r1, pc, r1
   164f0:	b	32a98 <flatcc_json_printer_enum@@Base>
   164f4:	andeq	r8, r2, r8, ror #18
   164f8:	andeq	r8, r2, r4, lsr #18
   164fc:	andeq	r8, r2, r0, lsr #18
   16500:	andeq	r8, r2, r0, lsr #18
   16504:	andeq	r8, r2, r8, lsl #18
   16508:	andeq	sp, r2, r0, asr r1
   1650c:	andeq	r8, r2, r8, asr #17
   16510:	strd	r4, [sp, #-20]!	; 0xffffffec
   16514:	mov	ip, #5
   16518:	mov	r4, #2
   1651c:	ldr	r5, [pc, #168]	; 165cc <_start@@Base+0x123c>
   16520:	mov	r2, #0
   16524:	strd	r6, [sp, #8]
   16528:	mov	r6, r0
   1652c:	mov	r7, r1
   16530:	ldr	r3, [pc, #152]	; 165d0 <_start@@Base+0x1240>
   16534:	str	lr, [sp, #16]
   16538:	sub	sp, sp, #20
   1653c:	add	r5, pc, r5
   16540:	str	ip, [sp]
   16544:	add	r3, pc, r3
   16548:	strd	r4, [sp, #4]
   1654c:	bl	35138 <flatcc_json_printer_int8_enum_field@@Base>
   16550:	ldr	r3, [pc, #124]	; 165d4 <_start@@Base+0x1244>
   16554:	mov	ip, #6
   16558:	mov	r1, r7
   1655c:	mov	r0, r6
   16560:	mov	r2, #1
   16564:	str	ip, [sp]
   16568:	strd	r4, [sp, #4]
   1656c:	add	r3, pc, r3
   16570:	bl	35138 <flatcc_json_printer_int8_enum_field@@Base>
   16574:	ldr	r3, [pc, #92]	; 165d8 <_start@@Base+0x1248>
   16578:	mov	r2, r4
   1657c:	mov	r1, r7
   16580:	mov	r0, r6
   16584:	str	r4, [sp]
   16588:	str	r4, [sp, #4]
   1658c:	add	r3, pc, r3
   16590:	bl	33138 <flatcc_json_printer_uint8_field@@Base>
   16594:	ldr	r3, [pc, #64]	; 165dc <_start@@Base+0x124c>
   16598:	mov	ip, #3
   1659c:	mov	r1, r7
   165a0:	mov	r0, r6
   165a4:	mov	r2, ip
   165a8:	str	ip, [sp]
   165ac:	str	r4, [sp, #4]
   165b0:	add	r3, pc, r3
   165b4:	bl	33138 <flatcc_json_printer_uint8_field@@Base>
   165b8:	add	sp, sp, #20
   165bc:	ldrd	r4, [sp]
   165c0:	ldrd	r6, [sp, #8]
   165c4:	add	sp, sp, #16
   165c8:	pop	{pc}		; (ldr pc, [sp], #4)
   165cc:	muleq	r0, ip, r0
   165d0:	andeq	r8, r2, r4, lsl #12
   165d4:	andeq	r8, r2, ip, ror r8
   165d8:	andeq	r8, r2, r4, ror #16
   165dc:	andeq	r8, r2, r4, asr #16
   165e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   165e4:	uxtb	r4, r1
   165e8:	tst	r4, #244	; 0xf4
   165ec:	strd	r6, [sp, #8]
   165f0:	movne	r5, #1
   165f4:	moveq	r5, #0
   165f8:	str	r8, [sp, #16]
   165fc:	cmp	r4, #0
   16600:	str	lr, [sp, #20]
   16604:	moveq	r5, #1
   16608:	cmp	r5, #0
   1660c:	beq	16628 <_start@@Base+0x1298>
   16610:	ldrd	r4, [sp]
   16614:	ldrd	r6, [sp, #8]
   16618:	ldr	r8, [sp, #16]
   1661c:	ldr	lr, [sp, #20]
   16620:	add	sp, sp, #24
   16624:	b	328c4 <flatcc_json_printer_int8@@Base>
   16628:	sub	r3, r4, #1
   1662c:	mov	r6, r0
   16630:	tst	r3, r4
   16634:	movne	r7, #1
   16638:	moveq	r7, #0
   1663c:	mov	r1, r7
   16640:	bl	32b28 <flatcc_json_printer_delimit_enum_flags@@Base>
   16644:	ands	r1, r4, #1
   16648:	bne	1667c <_start@@Base+0x12ec>
   1664c:	tst	r4, #2
   16650:	bne	166a0 <_start@@Base+0x1310>
   16654:	tst	r4, #8
   16658:	bne	166c4 <_start@@Base+0x1334>
   1665c:	mov	r1, r7
   16660:	mov	r0, r6
   16664:	ldrd	r4, [sp]
   16668:	ldrd	r6, [sp, #8]
   1666c:	ldr	r8, [sp, #16]
   16670:	ldr	lr, [sp, #20]
   16674:	add	sp, sp, #24
   16678:	b	32b28 <flatcc_json_printer_delimit_enum_flags@@Base>
   1667c:	ldr	r2, [pc, #88]	; 166dc <_start@@Base+0x134c>
   16680:	mov	r1, r5
   16684:	mov	r3, #3
   16688:	mov	r0, r6
   1668c:	add	r2, pc, r2
   16690:	bl	32b58 <flatcc_json_printer_enum_flag@@Base>
   16694:	tst	r4, #2
   16698:	mov	r1, #1
   1669c:	beq	16654 <_start@@Base+0x12c4>
   166a0:	ldr	r2, [pc, #56]	; 166e0 <_start@@Base+0x1350>
   166a4:	mov	r3, #5
   166a8:	mov	r0, r6
   166ac:	add	r5, r1, #1
   166b0:	add	r2, pc, r2
   166b4:	bl	32b58 <flatcc_json_printer_enum_flag@@Base>
   166b8:	tst	r4, #8
   166bc:	mov	r1, r5
   166c0:	beq	1665c <_start@@Base+0x12cc>
   166c4:	ldr	r2, [pc, #24]	; 166e4 <_start@@Base+0x1354>
   166c8:	mov	r3, #4
   166cc:	mov	r0, r6
   166d0:	add	r2, pc, r2
   166d4:	bl	32b58 <flatcc_json_printer_enum_flag@@Base>
   166d8:	b	1665c <_start@@Base+0x12cc>
   166dc:	andeq	r8, r2, ip, ror #14
   166e0:	andeq	r8, r2, ip, asr #14
   166e4:	andeq	r8, r2, r4, lsr r7
   166e8:	ldr	ip, [pc, #272]	; 16800 <_start@@Base+0x1470>
   166ec:	mov	r3, #0
   166f0:	mov	r2, r1
   166f4:	strd	r4, [sp, #-20]!	; 0xffffffec
   166f8:	mov	r4, r1
   166fc:	mov	r1, r3
   16700:	strd	r6, [sp, #8]
   16704:	mov	r7, #1
   16708:	mov	r5, r0
   1670c:	str	lr, [sp, #16]
   16710:	sub	sp, sp, #20
   16714:	mov	r6, #5
   16718:	add	ip, pc, ip
   1671c:	str	ip, [sp]
   16720:	str	r7, [sp, #4]
   16724:	bl	36bdc <flatcc_json_printer_float_struct_field@@Base>
   16728:	ldr	ip, [pc, #212]	; 16804 <_start@@Base+0x1474>
   1672c:	mov	r2, r4
   16730:	mov	r1, r7
   16734:	mov	r0, r5
   16738:	mov	r3, #4
   1673c:	str	r7, [sp, #4]
   16740:	add	ip, pc, ip
   16744:	str	ip, [sp]
   16748:	bl	36bdc <flatcc_json_printer_float_struct_field@@Base>
   1674c:	ldr	ip, [pc, #180]	; 16808 <_start@@Base+0x1478>
   16750:	mov	r2, r4
   16754:	mov	r0, r5
   16758:	mov	r3, #8
   1675c:	mov	r1, #2
   16760:	str	r7, [sp, #4]
   16764:	add	ip, pc, ip
   16768:	str	ip, [sp]
   1676c:	bl	36bdc <flatcc_json_printer_float_struct_field@@Base>
   16770:	ldr	ip, [pc, #148]	; 1680c <_start@@Base+0x147c>
   16774:	mov	r2, r4
   16778:	mov	r0, r5
   1677c:	mov	r3, #16
   16780:	mov	r1, #3
   16784:	str	r6, [sp, #4]
   16788:	add	ip, pc, ip
   1678c:	str	ip, [sp]
   16790:	bl	36d70 <flatcc_json_printer_double_struct_field@@Base>
   16794:	ldr	lr, [pc, #116]	; 16810 <_start@@Base+0x1480>
   16798:	mov	r2, r4
   1679c:	mov	r0, r5
   167a0:	mov	r3, #24
   167a4:	mov	r1, #4
   167a8:	ldr	ip, [pc, #100]	; 16814 <_start@@Base+0x1484>
   167ac:	add	lr, pc, lr
   167b0:	add	ip, pc, ip
   167b4:	str	ip, [sp]
   167b8:	stmib	sp, {r6, lr}
   167bc:	bl	3766c <flatcc_json_printer_int8_enum_struct_field@@Base>
   167c0:	ldr	lr, [pc, #80]	; 16818 <_start@@Base+0x1488>
   167c4:	mov	r2, r4
   167c8:	mov	r1, r6
   167cc:	mov	r0, r5
   167d0:	mov	r3, #26
   167d4:	ldr	ip, [pc, #64]	; 1681c <_start@@Base+0x148c>
   167d8:	add	lr, pc, lr
   167dc:	add	ip, pc, ip
   167e0:	str	ip, [sp]
   167e4:	stmib	sp, {r6, lr}
   167e8:	bl	3d2d8 <flatcc_json_printer_embedded_struct_field@@Base>
   167ec:	add	sp, sp, #20
   167f0:	ldrd	r4, [sp]
   167f4:	ldrd	r6, [sp, #8]
   167f8:	add	sp, sp, #16
   167fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16800:	andeq	r8, r2, r4, lsl #18
   16804:	andeq	r8, r2, ip, asr #8
   16808:	andeq	r8, r2, r8, lsr #13
   1680c:	andeq	r8, r2, r8, lsl #13
   16810:			; <UNDEFINED> instruction: 0xfffffe2c
   16814:	andeq	r8, r2, r8, ror #12
   16818:			; <UNDEFINED> instruction: 0xfffff8d0
   1681c:	andeq	r8, r2, r4, asr #12
   16820:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16824:	mov	r4, r1
   16828:	mov	r1, r2
   1682c:	strd	r6, [sp, #8]
   16830:	mov	r5, r2
   16834:	strd	r8, [sp, #16]
   16838:	mov	r8, r0
   1683c:	mov	r0, r4
   16840:	str	sl, [sp, #24]
   16844:	mov	r9, r3
   16848:	str	lr, [sp, #28]
   1684c:	sub	sp, sp, #8
   16850:	bl	15480 <_start@@Base+0xf0>
   16854:	add	r3, pc, #652	; 0x28c
   16858:	ldrd	r2, [r3]
   1685c:	cmp	r1, r3
   16860:	cmpeq	r0, r2
   16864:	bhi	16928 <_start@@Base+0x1598>
   16868:	add	r7, pc, #640	; 0x280
   1686c:	ldrd	r6, [r7]
   16870:	and	r2, r0, #-16777216	; 0xff000000
   16874:	mov	r3, r1
   16878:	cmp	r1, r7
   1687c:	cmpeq	r0, r6
   16880:	bhi	168b8 <_start@@Base+0x1528>
   16884:	add	r1, pc, #620	; 0x26c
   16888:	ldrd	r0, [r1]
   1688c:	cmp	r3, r1
   16890:	cmpeq	r2, r0
   16894:	beq	16a60 <_start@@Base+0x16d0>
   16898:	mov	r0, r4
   1689c:	add	sp, sp, #8
   168a0:	ldrd	r4, [sp]
   168a4:	ldrd	r6, [sp, #8]
   168a8:	ldrd	r8, [sp, #16]
   168ac:	ldr	sl, [sp, #24]
   168b0:	add	sp, sp, #28
   168b4:	pop	{pc}		; (ldr pc, [sp], #4)
   168b8:	add	r7, pc, #576	; 0x240
   168bc:	ldrd	r6, [r7]
   168c0:	cmp	r1, r7
   168c4:	cmpeq	r2, r6
   168c8:	beq	16a8c <_start@@Base+0x16fc>
   168cc:	add	r7, pc, #564	; 0x234
   168d0:	ldrd	r6, [r7]
   168d4:	bic	r2, r0, #255	; 0xff
   168d8:	cmp	r1, r7
   168dc:	cmpeq	r2, r6
   168e0:	bne	16898 <_start@@Base+0x1508>
   168e4:	ldr	r3, [sp, #44]	; 0x2c
   168e8:	mov	r2, r5
   168ec:	mov	r0, r8
   168f0:	mov	r1, r4
   168f4:	str	r3, [sp]
   168f8:	mov	r3, #7
   168fc:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   16900:	cmp	r4, r0
   16904:	movne	r6, #10
   16908:	beq	16898 <_start@@Base+0x1508>
   1690c:	ldr	r2, [sp, #40]	; 0x28
   16910:	mov	r7, #0
   16914:	mov	r3, #0
   16918:	mov	r4, r0
   1691c:	strd	r6, [r2]
   16920:	str	r3, [r9]
   16924:	b	16898 <_start@@Base+0x1508>
   16928:	add	r3, pc, #480	; 0x1e0
   1692c:	ldrd	r2, [r3]
   16930:	cmp	r1, r3
   16934:	cmpeq	r0, r2
   16938:	bhi	16994 <_start@@Base+0x1604>
   1693c:	add	r7, pc, #468	; 0x1d4
   16940:	ldrd	r6, [r7]
   16944:	mov	sl, #0
   16948:	cmp	r1, r7
   1694c:	cmpeq	sl, r6
   16950:	bne	16898 <_start@@Base+0x1508>
   16954:	ldr	r3, [sp, #44]	; 0x2c
   16958:	mov	r2, r5
   1695c:	mov	r0, r8
   16960:	mov	r1, r4
   16964:	str	r3, [sp]
   16968:	mov	r3, #4
   1696c:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   16970:	cmp	r4, r0
   16974:	beq	16898 <_start@@Base+0x1508>
   16978:	ldr	r1, [sp, #40]	; 0x28
   1697c:	mov	r2, #0
   16980:	mov	r3, #0
   16984:	mov	r4, r0
   16988:	strd	r2, [r1]
   1698c:	str	sl, [r9]
   16990:	b	16898 <_start@@Base+0x1508>
   16994:	add	r3, pc, #388	; 0x184
   16998:	ldrd	r2, [r3]
   1699c:	cmp	r1, r3
   169a0:	cmpeq	r0, r2
   169a4:	bls	16a1c <_start@@Base+0x168c>
   169a8:	add	r7, pc, #376	; 0x178
   169ac:	ldrd	r6, [r7]
   169b0:	lsr	r2, r0, #16
   169b4:	lsl	r2, r2, #16
   169b8:	cmp	r1, r7
   169bc:	cmpeq	r2, r6
   169c0:	beq	16ab8 <_start@@Base+0x1728>
   169c4:	add	r3, pc, #356	; 0x164
   169c8:	ldrd	r2, [r3]
   169cc:	cmp	r1, r3
   169d0:	cmpeq	r0, r2
   169d4:	bne	16898 <_start@@Base+0x1508>
   169d8:	ldr	r3, [sp, #44]	; 0x2c
   169dc:	mov	r2, r5
   169e0:	mov	r0, r8
   169e4:	mov	r1, r4
   169e8:	str	r3, [sp]
   169ec:	mov	r3, #8
   169f0:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   169f4:	cmp	r4, r0
   169f8:	beq	16898 <_start@@Base+0x1508>
   169fc:	ldr	r2, [sp, #40]	; 0x28
   16a00:	mov	r4, r0
   16a04:	mov	r1, #0
   16a08:	mov	r0, #8
   16a0c:	mov	r3, #0
   16a10:	strd	r0, [r2]
   16a14:	str	r3, [r9]
   16a18:	b	16898 <_start@@Base+0x1508>
   16a1c:	add	r7, pc, #276	; 0x114
   16a20:	ldrd	r6, [r7]
   16a24:	and	r2, r0, #-16777216	; 0xff000000
   16a28:	cmp	r1, r7
   16a2c:	cmpeq	r2, r6
   16a30:	bne	16898 <_start@@Base+0x1508>
   16a34:	ldr	r3, [sp, #44]	; 0x2c
   16a38:	mov	r2, r5
   16a3c:	mov	r0, r8
   16a40:	mov	r1, r4
   16a44:	str	r3, [sp]
   16a48:	mov	r3, #5
   16a4c:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   16a50:	cmp	r4, r0
   16a54:	movne	r6, #11
   16a58:	bne	1690c <_start@@Base+0x157c>
   16a5c:	b	16898 <_start@@Base+0x1508>
   16a60:	ldr	r3, [sp, #44]	; 0x2c
   16a64:	mov	r2, r5
   16a68:	mov	r0, r8
   16a6c:	mov	r1, r4
   16a70:	str	r3, [sp]
   16a74:	mov	r3, #5
   16a78:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   16a7c:	cmp	r4, r0
   16a80:	movne	r6, #9
   16a84:	bne	1690c <_start@@Base+0x157c>
   16a88:	b	16898 <_start@@Base+0x1508>
   16a8c:	ldr	r3, [sp, #44]	; 0x2c
   16a90:	mov	r2, r5
   16a94:	mov	r0, r8
   16a98:	mov	r1, r4
   16a9c:	str	r3, [sp]
   16aa0:	mov	r3, #5
   16aa4:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   16aa8:	cmp	r4, r0
   16aac:	movne	r6, #2
   16ab0:	bne	1690c <_start@@Base+0x157c>
   16ab4:	b	16898 <_start@@Base+0x1508>
   16ab8:	ldr	r3, [sp, #44]	; 0x2c
   16abc:	mov	r2, r5
   16ac0:	mov	r0, r8
   16ac4:	mov	r1, r4
   16ac8:	str	r3, [sp]
   16acc:	mov	r3, #6
   16ad0:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   16ad4:	cmp	r4, r0
   16ad8:	beq	16898 <_start@@Base+0x1508>
   16adc:	mov	r6, #255	; 0xff
   16ae0:	b	1690c <_start@@Base+0x157c>
   16ae4:	nop	{0}
   16ae8:			; <UNDEFINED> instruction: 0xffffffff
   16aec:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   16af0:			; <UNDEFINED> instruction: 0x46616dff
   16af4:	rsbmi	r6, pc, #428	; 0x1ac
   16af8:	strvs	r0, [r0, #-0]
   16afc:	rsbmi	r6, r5, #108, 24	; 0x6c00
   16b00:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   16b04:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   16b08:	strbtmi	r6, [r1], -r0, lsl #28
   16b0c:	rsbmi	r6, pc, #428	; 0x1ac
   16b10:	ldrshvc	pc, [pc, #255]	; 16c17 <_start@@Base+0x1887>	; <UNPREDICTABLE>
   16b14:	svcmi	0x00746865
   16b18:	andeq	r0, r0, r0
   16b1c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16b20:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   16b24:	rsbpl	r7, r1, #117	; 0x75
   16b28:	strbvs	r0, [r4, #-0]!
   16b2c:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   16b30:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   16b34:	rsbpl	r7, r1, #117	; 0x75
   16b38:	andvc	r0, r0, #0
   16b3c:	svcmi	0x00746865
   16b40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16b44:	mov	r4, r1
   16b48:	mov	r1, r2
   16b4c:	strd	r6, [sp, #8]
   16b50:	mov	r5, r2
   16b54:	strd	r8, [sp, #16]
   16b58:	mov	r8, r0
   16b5c:	mov	r0, r4
   16b60:	strd	sl, [sp, #24]
   16b64:	mov	r9, r3
   16b68:	str	lr, [sp, #32]
   16b6c:	sub	sp, sp, #12
   16b70:	bl	15480 <_start@@Base+0xf0>
   16b74:	add	r3, pc, #524	; 0x20c
   16b78:	ldrd	r2, [r3]
   16b7c:	cmp	r1, r3
   16b80:	cmpeq	r0, r2
   16b84:	bhi	16bc4 <_start@@Base+0x1834>
   16b88:	add	r7, pc, #512	; 0x200
   16b8c:	ldrd	r6, [r7]
   16b90:	bic	r3, r1, #255	; 0xff
   16b94:	mov	sl, #0
   16b98:	cmp	r3, r7
   16b9c:	cmpeq	sl, r6
   16ba0:	beq	16ca0 <_start@@Base+0x1910>
   16ba4:	mov	r0, r4
   16ba8:	add	sp, sp, #12
   16bac:	ldrd	r4, [sp]
   16bb0:	ldrd	r6, [sp, #8]
   16bb4:	ldrd	r8, [sp, #16]
   16bb8:	ldrd	sl, [sp, #24]
   16bbc:	add	sp, sp, #32
   16bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   16bc4:	add	r3, pc, #460	; 0x1cc
   16bc8:	ldrd	r2, [r3]
   16bcc:	cmp	r1, r3
   16bd0:	cmpeq	r0, r2
   16bd4:	beq	16d58 <_start@@Base+0x19c8>
   16bd8:	add	r7, pc, #448	; 0x1c0
   16bdc:	ldrd	r6, [r7]
   16be0:	bic	r2, r0, #255	; 0xff
   16be4:	cmp	r1, r7
   16be8:	cmpeq	r2, r6
   16bec:	beq	16d18 <_start@@Base+0x1988>
   16bf0:	add	r7, pc, #432	; 0x1b0
   16bf4:	ldrd	r6, [r7]
   16bf8:	mov	sl, #0
   16bfc:	cmp	r1, r7
   16c00:	cmpeq	sl, r6
   16c04:	beq	16cdc <_start@@Base+0x194c>
   16c08:	add	r3, pc, #416	; 0x1a0
   16c0c:	ldrd	r2, [r3]
   16c10:	cmp	r1, r3
   16c14:	cmpeq	r0, r2
   16c18:	bne	16ba4 <_start@@Base+0x1814>
   16c1c:	mov	r1, r5
   16c20:	add	r0, r4, #8
   16c24:	bl	15480 <_start@@Base+0xf0>
   16c28:	add	r3, pc, #392	; 0x188
   16c2c:	ldrd	r2, [r3]
   16c30:	cmp	r1, r3
   16c34:	cmpeq	r0, r2
   16c38:	bne	16ba4 <_start@@Base+0x1814>
   16c3c:	add	r7, pc, #380	; 0x17c
   16c40:	ldrd	r6, [r7]
   16c44:	add	fp, r4, #16
   16c48:	mov	r1, r5
   16c4c:	mov	r0, fp
   16c50:	bl	15480 <_start@@Base+0xf0>
   16c54:	bic	r2, r0, #255	; 0xff
   16c58:	cmp	r1, r7
   16c5c:	cmpeq	r2, r6
   16c60:	bne	16ba4 <_start@@Base+0x1814>
   16c64:	ldr	r3, [sp, #52]	; 0x34
   16c68:	mov	r2, r5
   16c6c:	mov	r0, r8
   16c70:	mov	r1, fp
   16c74:	str	r3, [sp]
   16c78:	mov	r3, #7
   16c7c:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   16c80:	cmp	fp, r0
   16c84:	beq	16ba4 <_start@@Base+0x1814>
   16c88:	ldr	r1, [sp, #48]	; 0x30
   16c8c:	mov	r2, #2
   16c90:	mov	r3, #0
   16c94:	strd	r2, [r1]
   16c98:	str	sl, [r9]
   16c9c:	b	16ba8 <_start@@Base+0x1818>
   16ca0:	ldr	r3, [sp, #52]	; 0x34
   16ca4:	mov	r2, r5
   16ca8:	mov	r0, r8
   16cac:	mov	r1, r4
   16cb0:	str	r3, [sp]
   16cb4:	mov	r3, #3
   16cb8:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   16cbc:	cmp	r4, r0
   16cc0:	beq	16ba8 <_start@@Base+0x1818>
   16cc4:	ldr	r1, [sp, #48]	; 0x30
   16cc8:	mov	r2, #4
   16ccc:	mov	r3, #0
   16cd0:	strd	r2, [r1]
   16cd4:	str	sl, [r9]
   16cd8:	b	16ba8 <_start@@Base+0x1818>
   16cdc:	ldr	r3, [sp, #52]	; 0x34
   16ce0:	mov	r2, r5
   16ce4:	mov	r0, r8
   16ce8:	mov	r1, r4
   16cec:	str	r3, [sp]
   16cf0:	mov	r3, #4
   16cf4:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   16cf8:	cmp	r4, r0
   16cfc:	beq	16ba8 <_start@@Base+0x1818>
   16d00:	ldr	r1, [sp, #48]	; 0x30
   16d04:	mov	r2, #0
   16d08:	mov	r3, #0
   16d0c:	strd	r2, [r1]
   16d10:	str	sl, [r9]
   16d14:	b	16ba8 <_start@@Base+0x1818>
   16d18:	ldr	r3, [sp, #52]	; 0x34
   16d1c:	mov	r2, r5
   16d20:	mov	r0, r8
   16d24:	mov	r1, r4
   16d28:	str	r3, [sp]
   16d2c:	mov	r3, #7
   16d30:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   16d34:	cmp	r4, r0
   16d38:	beq	16ba4 <_start@@Base+0x1814>
   16d3c:	mov	r4, #1
   16d40:	ldr	r2, [sp, #48]	; 0x30
   16d44:	mov	r5, #0
   16d48:	mov	r3, #0
   16d4c:	strd	r4, [r2]
   16d50:	str	r3, [r9]
   16d54:	b	16ba8 <_start@@Base+0x1818>
   16d58:	ldr	r3, [sp, #52]	; 0x34
   16d5c:	mov	r1, r4
   16d60:	mov	r2, r5
   16d64:	mov	r0, r8
   16d68:	str	r3, [sp]
   16d6c:	mov	r3, #8
   16d70:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   16d74:	cmp	r4, r0
   16d78:	movne	r4, #3
   16d7c:	bne	16d40 <_start@@Base+0x19b0>
   16d80:	b	16ba4 <_start@@Base+0x1814>
   16d84:	nop	{0}
   16d88:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   16d8c:	stclmi	14, cr6, [pc, #-460]!	; 16bc8 <_start@@Base+0x1838>
   16d90:	andeq	r0, r0, r0
   16d94:	cmnmi	ip, r0, lsl #8
   16d98:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   16d9c:	stclmi	14, cr6, [pc, #-460]!	; 16bd8 <_start@@Base+0x1848>
   16da0:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   16da4:	stclmi	14, cr6, [pc, #-460]!	; 16be0 <_start@@Base+0x1850>
   16da8:	andeq	r0, r0, r0
   16dac:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16db0:	cmnpl	r9, #112, 26	; 0x1c00
   16db4:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   16db8:	rsbvs	r6, ip, #364904448	; 0x15c00000
   16dbc:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   16dc0:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   16dc4:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   16dc8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16dcc:	mov	r4, r1
   16dd0:	mov	r5, r0
   16dd4:	mov	r1, r2
   16dd8:	mov	r0, r4
   16ddc:	strd	r6, [sp, #8]
   16de0:	strd	r8, [sp, #16]
   16de4:	strd	sl, [sp, #24]
   16de8:	mov	sl, r2
   16dec:	mov	fp, r3
   16df0:	str	lr, [sp, #32]
   16df4:	sub	sp, sp, #12
   16df8:	bl	15480 <_start@@Base+0xf0>
   16dfc:	add	r3, pc, #316	; 0x13c
   16e00:	ldrd	r2, [r3]
   16e04:	cmp	r1, r3
   16e08:	cmpeq	r0, r2
   16e0c:	bhi	16e48 <_start@@Base+0x1ab8>
   16e10:	add	r7, pc, #304	; 0x130
   16e14:	ldrd	r6, [r7]
   16e18:	mov	r8, #0
   16e1c:	cmp	r1, r7
   16e20:	cmpeq	r8, r6
   16e24:	beq	16ebc <_start@@Base+0x1b2c>
   16e28:	mov	r0, r4
   16e2c:	add	sp, sp, #12
   16e30:	ldrd	r4, [sp]
   16e34:	ldrd	r6, [sp, #8]
   16e38:	ldrd	r8, [sp, #16]
   16e3c:	ldrd	sl, [sp, #24]
   16e40:	add	sp, sp, #32
   16e44:	pop	{pc}		; (ldr pc, [sp], #4)
   16e48:	add	r9, pc, #256	; 0x100
   16e4c:	ldrd	r8, [r9]
   16e50:	lsr	r6, r0, #16
   16e54:	lsl	r6, r6, #16
   16e58:	cmp	r1, r9
   16e5c:	cmpeq	r6, r8
   16e60:	beq	16efc <_start@@Base+0x1b6c>
   16e64:	add	r7, pc, #236	; 0xec
   16e68:	ldrd	r6, [r7]
   16e6c:	mov	r8, #0
   16e70:	cmp	r1, r7
   16e74:	cmpeq	r8, r6
   16e78:	bne	16e28 <_start@@Base+0x1a98>
   16e7c:	ldr	r3, [sp, #52]	; 0x34
   16e80:	mov	r2, sl
   16e84:	mov	r0, r5
   16e88:	mov	r1, r4
   16e8c:	str	r3, [sp]
   16e90:	mov	r3, #4
   16e94:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   16e98:	cmp	r4, r0
   16e9c:	beq	16e28 <_start@@Base+0x1a98>
   16ea0:	add	r3, pc, #184	; 0xb8
   16ea4:	ldrd	r2, [r3]
   16ea8:	mov	r4, r0
   16eac:	ldr	r1, [sp, #48]	; 0x30
   16eb0:	strd	r2, [r1]
   16eb4:	str	r8, [fp]
   16eb8:	b	16e28 <_start@@Base+0x1a98>
   16ebc:	ldr	r3, [sp, #52]	; 0x34
   16ec0:	mov	r2, sl
   16ec4:	mov	r0, r5
   16ec8:	mov	r1, r4
   16ecc:	str	r3, [sp]
   16ed0:	mov	r3, #4
   16ed4:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   16ed8:	cmp	r4, r0
   16edc:	beq	16e28 <_start@@Base+0x1a98>
   16ee0:	ldr	r1, [sp, #48]	; 0x30
   16ee4:	mov	r2, #3
   16ee8:	mov	r3, #0
   16eec:	mov	r4, r0
   16ef0:	strd	r2, [r1]
   16ef4:	str	r8, [fp]
   16ef8:	b	16e28 <_start@@Base+0x1a98>
   16efc:	ldr	r3, [sp, #52]	; 0x34
   16f00:	mov	r2, sl
   16f04:	mov	r0, r5
   16f08:	mov	r1, r4
   16f0c:	str	r3, [sp]
   16f10:	mov	r3, #6
   16f14:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   16f18:	cmp	r4, r0
   16f1c:	beq	16e28 <_start@@Base+0x1a98>
   16f20:	ldr	r2, [sp, #48]	; 0x30
   16f24:	mvn	r6, #1
   16f28:	mvn	r7, #0
   16f2c:	mov	r3, #1
   16f30:	mov	r4, r0
   16f34:	strd	r6, [r2]
   16f38:	str	r3, [fp]
   16f3c:	b	16e28 <_start@@Base+0x1a98>
   16f40:			; <UNDEFINED> instruction: 0xffffffff
   16f44:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16f48:	andeq	r0, r0, r0
   16f4c:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16f50:	strbvs	r0, [r7, #-0]!
   16f54:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   16f58:	andeq	r0, r0, r0
   16f5c:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   16f60:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   16f64:	andeq	r0, r0, r0
   16f68:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16f6c:	mov	r4, r1
   16f70:	mov	r1, r2
   16f74:	strd	r6, [sp, #8]
   16f78:	mov	r5, r2
   16f7c:	strd	r8, [sp, #16]
   16f80:	mov	r8, r0
   16f84:	mov	r0, r4
   16f88:	str	sl, [sp, #24]
   16f8c:	mov	r9, r3
   16f90:	str	lr, [sp, #28]
   16f94:	sub	sp, sp, #8
   16f98:	bl	15480 <_start@@Base+0xf0>
   16f9c:	add	r3, pc, #412	; 0x19c
   16fa0:	ldrd	r2, [r3]
   16fa4:	cmp	r1, r3
   16fa8:	cmpeq	r0, r2
   16fac:	bhi	16fe8 <_start@@Base+0x1c58>
   16fb0:	add	r7, pc, #400	; 0x190
   16fb4:	ldrd	r6, [r7]
   16fb8:	mov	sl, #0
   16fbc:	cmp	r1, r7
   16fc0:	cmpeq	sl, r6
   16fc4:	beq	170b8 <_start@@Base+0x1d28>
   16fc8:	mov	r0, r4
   16fcc:	add	sp, sp, #8
   16fd0:	ldrd	r4, [sp]
   16fd4:	ldrd	r6, [sp, #8]
   16fd8:	ldrd	r8, [sp, #16]
   16fdc:	ldr	sl, [sp, #24]
   16fe0:	add	sp, sp, #28
   16fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   16fe8:	add	r3, pc, #352	; 0x160
   16fec:	ldrd	r2, [r3]
   16ff0:	cmp	r1, r3
   16ff4:	cmpeq	r0, r2
   16ff8:	bhi	17040 <_start@@Base+0x1cb0>
   16ffc:	add	r7, pc, #340	; 0x154
   17000:	ldrd	r6, [r7]
   17004:	mov	sl, #0
   17008:	cmp	r1, r7
   1700c:	cmpeq	sl, r6
   17010:	bne	16fc8 <_start@@Base+0x1c38>
   17014:	ldr	r3, [sp, #44]	; 0x2c
   17018:	mov	r2, r5
   1701c:	mov	r0, r8
   17020:	mov	r1, r4
   17024:	str	r3, [sp]
   17028:	mov	r3, #4
   1702c:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   17030:	cmp	r4, r0
   17034:	beq	16fc8 <_start@@Base+0x1c38>
   17038:	mov	r2, #42	; 0x2a
   1703c:	b	170e0 <_start@@Base+0x1d50>
   17040:	add	r7, pc, #280	; 0x118
   17044:	ldrd	r6, [r7]
   17048:	bic	r2, r0, #255	; 0xff
   1704c:	cmp	r1, r7
   17050:	cmpeq	r2, r6
   17054:	beq	170f8 <_start@@Base+0x1d68>
   17058:	add	r7, pc, #264	; 0x108
   1705c:	ldrd	r6, [r7]
   17060:	lsr	r2, r0, #16
   17064:	lsl	r2, r2, #16
   17068:	cmp	r1, r7
   1706c:	cmpeq	r2, r6
   17070:	bne	16fc8 <_start@@Base+0x1c38>
   17074:	ldr	r3, [sp, #44]	; 0x2c
   17078:	mov	r2, r5
   1707c:	mov	r0, r8
   17080:	mov	r1, r4
   17084:	str	r3, [sp]
   17088:	mov	r3, #6
   1708c:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   17090:	cmp	r4, r0
   17094:	beq	16fc8 <_start@@Base+0x1c38>
   17098:	ldr	r2, [sp, #40]	; 0x28
   1709c:	mov	r4, r0
   170a0:	mvn	r1, #0
   170a4:	mvn	r0, #1
   170a8:	mov	r3, #1
   170ac:	strd	r0, [r2]
   170b0:	str	r3, [r9]
   170b4:	b	16fc8 <_start@@Base+0x1c38>
   170b8:	ldr	r3, [sp, #44]	; 0x2c
   170bc:	mov	r2, r5
   170c0:	mov	r0, r8
   170c4:	mov	r1, r4
   170c8:	str	r3, [sp]
   170cc:	mov	r3, #4
   170d0:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   170d4:	cmp	r4, r0
   170d8:	movne	r2, #2
   170dc:	beq	16fc8 <_start@@Base+0x1c38>
   170e0:	ldr	r1, [sp, #40]	; 0x28
   170e4:	mov	r3, #0
   170e8:	mov	r4, r0
   170ec:	strd	r2, [r1]
   170f0:	str	sl, [r9]
   170f4:	b	16fc8 <_start@@Base+0x1c38>
   170f8:	ldr	r3, [sp, #44]	; 0x2c
   170fc:	mov	r2, r5
   17100:	mov	r0, r8
   17104:	mov	r1, r4
   17108:	str	r3, [sp]
   1710c:	mov	r3, #7
   17110:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   17114:	cmp	r4, r0
   17118:	beq	16fc8 <_start@@Base+0x1c38>
   1711c:	ldr	r2, [sp, #40]	; 0x28
   17120:	mvn	r6, #0
   17124:	mvn	r7, #0
   17128:	mov	r3, #1
   1712c:	mov	r4, r0
   17130:	strd	r6, [r2]
   17134:	str	r3, [r9]
   17138:	b	16fc8 <_start@@Base+0x1c38>
   1713c:	nop	{0}
   17140:			; <UNDEFINED> instruction: 0xffffffff
   17144:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   17148:	andeq	r0, r0, r0
   1714c:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   17150:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   17154:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   17158:	andeq	r0, r0, r0
   1715c:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   17160:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   17164:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   17168:	strbvs	r0, [r7, #-0]!
   1716c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   17170:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17174:	mov	r4, r1
   17178:	mov	r5, r0
   1717c:	mov	r1, r2
   17180:	mov	r0, r4
   17184:	strd	r6, [sp, #8]
   17188:	strd	r8, [sp, #16]
   1718c:	mov	r6, #0
   17190:	add	r9, pc, #312	; 0x138
   17194:	ldrd	r8, [r9]
   17198:	strd	sl, [sp, #24]
   1719c:	mov	sl, r2
   171a0:	mov	fp, r3
   171a4:	str	lr, [sp, #32]
   171a8:	sub	sp, sp, #12
   171ac:	bl	15480 <_start@@Base+0xf0>
   171b0:	cmp	r1, r9
   171b4:	cmpeq	r0, r8
   171b8:	bhi	171f0 <_start@@Base+0x1e60>
   171bc:	add	r3, pc, #276	; 0x114
   171c0:	ldrd	r2, [r3]
   171c4:	cmp	r1, r3
   171c8:	cmpeq	r6, r2
   171cc:	beq	1725c <_start@@Base+0x1ecc>
   171d0:	mov	r0, r4
   171d4:	add	sp, sp, #12
   171d8:	ldrd	r4, [sp]
   171dc:	ldrd	r6, [sp, #8]
   171e0:	ldrd	r8, [sp, #16]
   171e4:	ldrd	sl, [sp, #24]
   171e8:	add	sp, sp, #32
   171ec:	pop	{pc}		; (ldr pc, [sp], #4)
   171f0:	add	r3, pc, #232	; 0xe8
   171f4:	ldrd	r2, [r3]
   171f8:	cmp	r1, r3
   171fc:	cmpeq	r6, r2
   17200:	beq	172a0 <_start@@Base+0x1f10>
   17204:	add	r3, pc, #220	; 0xdc
   17208:	ldrd	r2, [r3]
   1720c:	cmp	r1, r3
   17210:	cmpeq	r6, r2
   17214:	bne	171d0 <_start@@Base+0x1e40>
   17218:	ldr	r3, [sp, #52]	; 0x34
   1721c:	mov	r2, sl
   17220:	mov	r0, r5
   17224:	mov	r1, r4
   17228:	str	r3, [sp]
   1722c:	mov	r3, #4
   17230:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   17234:	cmp	r4, r0
   17238:	beq	171d0 <_start@@Base+0x1e40>
   1723c:	ldr	r2, [sp, #48]	; 0x30
   17240:	mov	r4, r0
   17244:	mvn	r1, #0
   17248:	mvn	r0, #10
   1724c:	mov	r3, #1
   17250:	strd	r0, [r2]
   17254:	str	r3, [fp]
   17258:	b	171d0 <_start@@Base+0x1e40>
   1725c:	ldr	r3, [sp, #52]	; 0x34
   17260:	mov	r2, sl
   17264:	mov	r0, r5
   17268:	mov	r1, r4
   1726c:	str	r3, [sp]
   17270:	mov	r3, #4
   17274:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   17278:	cmp	r4, r0
   1727c:	mvnne	r6, #11
   17280:	beq	171d0 <_start@@Base+0x1e40>
   17284:	ldr	r2, [sp, #48]	; 0x30
   17288:	mvn	r7, #0
   1728c:	mov	r3, #1
   17290:	mov	r4, r0
   17294:	strd	r6, [r2]
   17298:	str	r3, [fp]
   1729c:	b	171d0 <_start@@Base+0x1e40>
   172a0:	ldr	r3, [sp, #52]	; 0x34
   172a4:	mov	r2, sl
   172a8:	mov	r0, r5
   172ac:	mov	r1, r4
   172b0:	str	r3, [sp]
   172b4:	mov	r3, #4
   172b8:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   172bc:	cmp	r4, r0
   172c0:	beq	171d0 <_start@@Base+0x1e40>
   172c4:	mvn	r6, #9
   172c8:	b	17284 <_start@@Base+0x1ef4>
   172cc:	nop	{0}
   172d0:			; <UNDEFINED> instruction: 0xffffffff
   172d4:	mcrvs	7, 3, r6, cr5, cr1, {1}
   172d8:	andeq	r0, r0, r0
   172dc:	mcrvs	7, 3, r6, cr5, cr1, {1}
   172e0:	andeq	r0, r0, r0
   172e4:	mcrvs	7, 3, r6, cr5, cr3, {1}
   172e8:	andeq	r0, r0, r0
   172ec:	mcrvs	7, 3, r6, cr5, cr2, {1}
   172f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   172f4:	mov	r4, r1
   172f8:	mov	r1, r2
   172fc:	strd	r6, [sp, #8]
   17300:	mov	r5, r2
   17304:	strd	r8, [sp, #16]
   17308:	mov	r8, r0
   1730c:	mov	r0, r4
   17310:	str	sl, [sp, #24]
   17314:	mov	r9, r3
   17318:	str	lr, [sp, #28]
   1731c:	sub	sp, sp, #8
   17320:	bl	15480 <_start@@Base+0xf0>
   17324:	add	r3, pc, #292	; 0x124
   17328:	ldrd	r2, [r3]
   1732c:	cmp	r1, r3
   17330:	cmpeq	r0, r2
   17334:	bhi	17370 <_start@@Base+0x1fe0>
   17338:	add	r7, pc, #280	; 0x118
   1733c:	ldrd	r6, [r7]
   17340:	mov	sl, #0
   17344:	cmp	r1, r7
   17348:	cmpeq	sl, r6
   1734c:	beq	173e4 <_start@@Base+0x2054>
   17350:	mov	r0, r4
   17354:	add	sp, sp, #8
   17358:	ldrd	r4, [sp]
   1735c:	ldrd	r6, [sp, #8]
   17360:	ldrd	r8, [sp, #16]
   17364:	ldr	sl, [sp, #24]
   17368:	add	sp, sp, #28
   1736c:	pop	{pc}		; (ldr pc, [sp], #4)
   17370:	add	r7, pc, #232	; 0xe8
   17374:	ldrd	r6, [r7]
   17378:	bic	r3, r1, #255	; 0xff
   1737c:	mov	sl, #0
   17380:	cmp	r3, r7
   17384:	cmpeq	sl, r6
   17388:	beq	17424 <_start@@Base+0x2094>
   1738c:	add	r7, pc, #212	; 0xd4
   17390:	ldrd	r6, [r7]
   17394:	and	r2, r0, #-16777216	; 0xff000000
   17398:	cmp	r1, r7
   1739c:	cmpeq	r2, r6
   173a0:	bne	17350 <_start@@Base+0x1fc0>
   173a4:	ldr	r3, [sp, #44]	; 0x2c
   173a8:	mov	r2, r5
   173ac:	mov	r0, r8
   173b0:	mov	r1, r4
   173b4:	str	r3, [sp]
   173b8:	mov	r3, #5
   173bc:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   173c0:	cmp	r4, r0
   173c4:	beq	17350 <_start@@Base+0x1fc0>
   173c8:	ldr	r1, [sp, #40]	; 0x28
   173cc:	mov	r2, #2
   173d0:	mov	r3, #0
   173d4:	mov	r4, r0
   173d8:	strd	r2, [r1]
   173dc:	str	sl, [r9]
   173e0:	b	17350 <_start@@Base+0x1fc0>
   173e4:	ldr	r3, [sp, #44]	; 0x2c
   173e8:	mov	r2, r5
   173ec:	mov	r0, r8
   173f0:	mov	r1, r4
   173f4:	str	r3, [sp]
   173f8:	mov	r3, #4
   173fc:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   17400:	cmp	r4, r0
   17404:	movne	r2, #8
   17408:	beq	17350 <_start@@Base+0x1fc0>
   1740c:	ldr	r1, [sp, #40]	; 0x28
   17410:	mov	r3, #0
   17414:	mov	r4, r0
   17418:	strd	r2, [r1]
   1741c:	str	sl, [r9]
   17420:	b	17350 <_start@@Base+0x1fc0>
   17424:	ldr	r3, [sp, #44]	; 0x2c
   17428:	mov	r2, r5
   1742c:	mov	r0, r8
   17430:	mov	r1, r4
   17434:	str	r3, [sp]
   17438:	mov	r3, #3
   1743c:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   17440:	cmp	r4, r0
   17444:	beq	17350 <_start@@Base+0x1fc0>
   17448:	mov	r2, #1
   1744c:	b	1740c <_start@@Base+0x207c>
   17450:	ldclvs	15, cr15, [pc, #1020]!	; 17854 <_start@@Base+0x24c4>
   17454:	ldrbmi	r6, [r2, -r5, ror #10]!
   17458:	andeq	r0, r0, r0
   1745c:	rsbmi	r7, ip, #423624704	; 0x19400000
   17460:	andeq	r0, r0, r0
   17464:	rsbpl	r6, r5, #0, 8
   17468:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   1746c:	ldrbmi	r6, [r2, -r5, ror #10]!
   17470:	sub	r3, r2, r1
   17474:	cmp	r3, #1
   17478:	ble	1748c <_start@@Base+0x20fc>
   1747c:	ldrb	r3, [r1]
   17480:	cmp	r3, #32
   17484:	bhi	17490 <_start@@Base+0x2100>
   17488:	beq	17498 <_start@@Base+0x2108>
   1748c:	b	2d0e4 <flatcc_json_parser_space_ext@@Base>
   17490:	mov	r0, r1
   17494:	bx	lr
   17498:	ldrb	r3, [r1, #1]
   1749c:	cmp	r3, #32
   174a0:	bls	1748c <_start@@Base+0x20fc>
   174a4:	add	r0, r1, #1
   174a8:	bx	lr
   174ac:	mov	r3, #8
   174b0:	mov	r1, #0
   174b4:	str	r4, [sp, #-8]!
   174b8:	mov	r2, r3
   174bc:	mov	r4, r0
   174c0:	str	lr, [sp, #4]
   174c4:	bl	2a700 <flatcc_verify_field@@Base>
   174c8:	cmp	r0, #0
   174cc:	beq	174dc <_start@@Base+0x214c>
   174d0:	ldr	r4, [sp]
   174d4:	add	sp, sp, #4
   174d8:	pop	{pc}		; (ldr pc, [sp], #4)
   174dc:	mov	r3, #4
   174e0:	mov	r0, r4
   174e4:	ldr	r4, [sp]
   174e8:	mov	r2, r3
   174ec:	mov	r1, #1
   174f0:	ldr	lr, [sp, #4]
   174f4:	add	sp, sp, #8
   174f8:	b	2a700 <flatcc_verify_field@@Base>
   174fc:	mov	r3, #1
   17500:	mov	r1, #0
   17504:	str	r4, [sp, #-8]!
   17508:	mov	r2, r3
   1750c:	mov	r4, r0
   17510:	str	lr, [sp, #4]
   17514:	bl	2a700 <flatcc_verify_field@@Base>
   17518:	cmp	r0, #0
   1751c:	beq	1752c <_start@@Base+0x219c>
   17520:	ldr	r4, [sp]
   17524:	add	sp, sp, #4
   17528:	pop	{pc}		; (ldr pc, [sp], #4)
   1752c:	mov	r3, #1
   17530:	mov	r0, r4
   17534:	mov	r2, r3
   17538:	mov	r1, r3
   1753c:	bl	2a700 <flatcc_verify_field@@Base>
   17540:	cmp	r0, #0
   17544:	bne	17520 <_start@@Base+0x2190>
   17548:	mov	r3, #1
   1754c:	mov	r1, #2
   17550:	mov	r2, r3
   17554:	mov	r0, r4
   17558:	bl	2a700 <flatcc_verify_field@@Base>
   1755c:	cmp	r0, #0
   17560:	bne	17520 <_start@@Base+0x2190>
   17564:	mov	r3, #1
   17568:	mov	r0, r4
   1756c:	ldr	r4, [sp]
   17570:	mov	r2, r3
   17574:	mov	r1, #3
   17578:	ldr	lr, [sp, #4]
   1757c:	add	sp, sp, #8
   17580:	b	2a700 <flatcc_verify_field@@Base>
   17584:	mov	r2, #0
   17588:	str	r4, [sp, #-8]!
   1758c:	mov	r4, r0
   17590:	mov	r1, r2
   17594:	str	lr, [sp, #4]
   17598:	bl	2a76c <flatcc_verify_string_field@@Base>
   1759c:	cmp	r0, #0
   175a0:	beq	175b0 <_start@@Base+0x2220>
   175a4:	ldr	r4, [sp]
   175a8:	add	sp, sp, #4
   175ac:	pop	{pc}		; (ldr pc, [sp], #4)
   175b0:	mov	r3, #8
   175b4:	mov	r1, #1
   175b8:	mov	r2, r3
   175bc:	mov	r0, r4
   175c0:	bl	2a700 <flatcc_verify_field@@Base>
   175c4:	cmp	r0, #0
   175c8:	bne	175a4 <_start@@Base+0x2214>
   175cc:	mov	r3, #2
   175d0:	mov	r0, r4
   175d4:	ldr	r4, [sp]
   175d8:	mov	r2, r3
   175dc:	mov	r1, r3
   175e0:	ldr	lr, [sp, #4]
   175e4:	add	sp, sp, #8
   175e8:	b	2a700 <flatcc_verify_field@@Base>
   175ec:	mov	r2, #0
   175f0:	str	r4, [sp, #-8]!
   175f4:	mov	r4, r0
   175f8:	mov	r1, r2
   175fc:	str	lr, [sp, #4]
   17600:	bl	2a76c <flatcc_verify_string_field@@Base>
   17604:	cmp	r0, #0
   17608:	beq	17618 <_start@@Base+0x2288>
   1760c:	ldr	r4, [sp]
   17610:	add	sp, sp, #4
   17614:	pop	{pc}		; (ldr pc, [sp], #4)
   17618:	mov	r3, #4
   1761c:	mov	r1, #1
   17620:	mov	r2, r3
   17624:	mov	r0, r4
   17628:	bl	2a700 <flatcc_verify_field@@Base>
   1762c:	cmp	r0, #0
   17630:	bne	1760c <_start@@Base+0x227c>
   17634:	mov	r2, r0
   17638:	mov	r1, #2
   1763c:	mov	r0, r4
   17640:	bl	2a76c <flatcc_verify_string_field@@Base>
   17644:	cmp	r0, #0
   17648:	bne	1760c <_start@@Base+0x227c>
   1764c:	mov	r3, #8
   17650:	mov	r1, #3
   17654:	mov	r2, r3
   17658:	mov	r0, r4
   1765c:	bl	2a700 <flatcc_verify_field@@Base>
   17660:	cmp	r0, #0
   17664:	bne	1760c <_start@@Base+0x227c>
   17668:	mov	r2, r0
   1766c:	mov	r1, #4
   17670:	mov	r0, r4
   17674:	bl	2a76c <flatcc_verify_string_field@@Base>
   17678:	cmp	r0, #0
   1767c:	bne	1760c <_start@@Base+0x227c>
   17680:	mov	r3, #8
   17684:	mov	r1, #5
   17688:	mov	r2, r3
   1768c:	mov	r0, r4
   17690:	bl	2a700 <flatcc_verify_field@@Base>
   17694:	cmp	r0, #0
   17698:	bne	1760c <_start@@Base+0x227c>
   1769c:	mov	r3, #4
   176a0:	mov	r1, #6
   176a4:	mov	r2, r3
   176a8:	mov	r0, r4
   176ac:	bl	2a700 <flatcc_verify_field@@Base>
   176b0:	cmp	r0, #0
   176b4:	bne	1760c <_start@@Base+0x227c>
   176b8:	mov	r3, #8
   176bc:	mov	r1, #7
   176c0:	mov	r2, r3
   176c4:	mov	r0, r4
   176c8:	bl	2a700 <flatcc_verify_field@@Base>
   176cc:	cmp	r0, #0
   176d0:	bne	1760c <_start@@Base+0x227c>
   176d4:	mov	r3, #4
   176d8:	mov	r0, r4
   176dc:	ldr	r4, [sp]
   176e0:	mov	r2, r3
   176e4:	mov	r1, #8
   176e8:	ldr	lr, [sp, #4]
   176ec:	add	sp, sp, #8
   176f0:	b	2a700 <flatcc_verify_field@@Base>
   176f4:	ldr	r3, [pc, #112]	; 1776c <_start@@Base+0x23dc>
   176f8:	mov	r2, #0
   176fc:	mov	r1, r2
   17700:	str	r4, [sp, #-8]!
   17704:	mov	r4, r0
   17708:	str	lr, [sp, #4]
   1770c:	add	r3, pc, r3
   17710:	bl	2ab34 <flatcc_verify_table_field@@Base>
   17714:	cmp	r0, #0
   17718:	beq	17728 <_start@@Base+0x2398>
   1771c:	ldr	r4, [sp]
   17720:	add	sp, sp, #4
   17724:	pop	{pc}		; (ldr pc, [sp], #4)
   17728:	ldr	r3, [pc, #64]	; 17770 <_start@@Base+0x23e0>
   1772c:	mov	r2, r0
   17730:	mov	r1, #1
   17734:	mov	r0, r4
   17738:	add	r3, pc, r3
   1773c:	bl	2ab34 <flatcc_verify_table_field@@Base>
   17740:	cmp	r0, #0
   17744:	bne	1771c <_start@@Base+0x238c>
   17748:	ldr	r3, [pc, #36]	; 17774 <_start@@Base+0x23e4>
   1774c:	mov	r2, r0
   17750:	mov	r1, #2
   17754:	mov	r0, r4
   17758:	ldr	r4, [sp]
   1775c:	ldr	lr, [sp, #4]
   17760:	add	sp, sp, #8
   17764:	add	r3, pc, r3
   17768:	b	2ab34 <flatcc_verify_table_field@@Base>
   1776c:			; <UNDEFINED> instruction: 0xfffffed8
   17770:	andeq	r0, r0, r8, lsl lr
   17774:			; <UNDEFINED> instruction: 0xfffffd40
   17778:	mov	r3, #16
   1777c:	mov	r2, #32
   17780:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17784:	mov	r1, #0
   17788:	strd	r6, [sp, #8]
   1778c:	mov	r4, r0
   17790:	str	r8, [sp, #16]
   17794:	str	lr, [sp, #20]
   17798:	sub	sp, sp, #8
   1779c:	bl	2a700 <flatcc_verify_field@@Base>
   177a0:	cmp	r0, #0
   177a4:	beq	177c0 <_start@@Base+0x2430>
   177a8:	add	sp, sp, #8
   177ac:	ldrd	r4, [sp]
   177b0:	ldrd	r6, [sp, #8]
   177b4:	ldr	r8, [sp, #16]
   177b8:	add	sp, sp, #20
   177bc:	pop	{pc}		; (ldr pc, [sp], #4)
   177c0:	mov	r3, #2
   177c4:	mov	r0, r4
   177c8:	mov	r2, r3
   177cc:	mov	r1, r3
   177d0:	bl	2a700 <flatcc_verify_field@@Base>
   177d4:	cmp	r0, #0
   177d8:	bne	177a8 <_start@@Base+0x2418>
   177dc:	mov	r3, #2
   177e0:	mov	r1, #1
   177e4:	mov	r2, r3
   177e8:	mov	r0, r4
   177ec:	bl	2a700 <flatcc_verify_field@@Base>
   177f0:	cmp	r0, #0
   177f4:	bne	177a8 <_start@@Base+0x2418>
   177f8:	mov	r2, #1
   177fc:	mov	r1, #3
   17800:	mov	r0, r4
   17804:	bl	2a76c <flatcc_verify_string_field@@Base>
   17808:	cmp	r0, #0
   1780c:	bne	177a8 <_start@@Base+0x2418>
   17810:	mov	r3, #1
   17814:	mov	r1, #6
   17818:	mov	r2, r3
   1781c:	mov	r0, r4
   17820:	bl	2a700 <flatcc_verify_field@@Base>
   17824:	cmp	r0, #0
   17828:	bne	177a8 <_start@@Base+0x2418>
   1782c:	mov	r5, #1
   17830:	mvn	r6, #0
   17834:	mov	r2, r0
   17838:	mov	r3, r5
   1783c:	mov	r1, #5
   17840:	mov	r0, r4
   17844:	stm	sp, {r5, r6}
   17848:	bl	2a84c <flatcc_verify_vector_field@@Base>
   1784c:	cmp	r0, #0
   17850:	bne	177a8 <_start@@Base+0x2418>
   17854:	ldr	r3, [pc, #888]	; 17bd4 <_start@@Base+0x2844>
   17858:	mov	r2, r0
   1785c:	mov	r1, #11
   17860:	mov	r0, r4
   17864:	add	r3, pc, r3
   17868:	bl	2aca0 <flatcc_verify_table_vector_field@@Base>
   1786c:	cmp	r0, #0
   17870:	bne	177a8 <_start@@Base+0x2418>
   17874:	mov	r2, r0
   17878:	mov	r1, #10
   1787c:	mov	r0, r4
   17880:	bl	2a950 <flatcc_verify_string_vector_field@@Base>
   17884:	cmp	r0, #0
   17888:	bne	177a8 <_start@@Base+0x2418>
   1788c:	mov	r2, r0
   17890:	mov	r1, #28
   17894:	mov	r0, r4
   17898:	bl	2a950 <flatcc_verify_string_vector_field@@Base>
   1789c:	cmp	r0, #0
   178a0:	bne	177a8 <_start@@Base+0x2418>
   178a4:	mov	r2, r0
   178a8:	mov	r3, r5
   178ac:	stm	sp, {r5, r6}
   178b0:	mov	r1, #24
   178b4:	mov	r0, r4
   178b8:	bl	2a84c <flatcc_verify_vector_field@@Base>
   178bc:	cmp	r0, #0
   178c0:	bne	177a8 <_start@@Base+0x2418>
   178c4:	mvn	ip, #-536870912	; 0xe0000000
   178c8:	mov	r5, #4
   178cc:	mov	r3, #8
   178d0:	mov	r2, #0
   178d4:	mov	r1, #29
   178d8:	mov	r0, r4
   178dc:	stm	sp, {r5, ip}
   178e0:	bl	2a84c <flatcc_verify_vector_field@@Base>
   178e4:	cmp	r0, #0
   178e8:	bne	177a8 <_start@@Base+0x2418>
   178ec:	ldr	r7, [pc, #740]	; 17bd8 <_start@@Base+0x2848>
   178f0:	mov	r2, r0
   178f4:	mov	r1, #12
   178f8:	mov	r0, r4
   178fc:	add	r7, pc, r7
   17900:	mov	r3, r7
   17904:	bl	2ab34 <flatcc_verify_table_field@@Base>
   17908:	cmp	r0, #0
   1790c:	bne	177a8 <_start@@Base+0x2418>
   17910:	ldr	r3, [pc, #708]	; 17bdc <_start@@Base+0x284c>
   17914:	mov	r2, r0
   17918:	mov	r1, #8
   1791c:	mov	r0, r4
   17920:	add	r3, pc, r3
   17924:	bl	2b8e8 <flatcc_verify_union_field@@Base>
   17928:	cmp	r0, #0
   1792c:	bne	177a8 <_start@@Base+0x2418>
   17930:	mvn	r6, #-1073741824	; 0xc0000000
   17934:	mov	r8, #2
   17938:	mov	r2, r0
   1793c:	mov	r3, r5
   17940:	mov	r1, #9
   17944:	mov	r0, r4
   17948:	str	r8, [sp]
   1794c:	str	r6, [sp, #4]
   17950:	bl	2a84c <flatcc_verify_vector_field@@Base>
   17954:	cmp	r0, #0
   17958:	bne	177a8 <_start@@Base+0x2418>
   1795c:	mov	r2, r0
   17960:	mov	r3, r5
   17964:	str	r8, [sp]
   17968:	mov	r1, #31
   1796c:	mov	r0, r4
   17970:	str	r6, [sp, #4]
   17974:	bl	2a84c <flatcc_verify_vector_field@@Base>
   17978:	cmp	r0, #0
   1797c:	bne	177a8 <_start@@Base+0x2418>
   17980:	mov	r6, #1
   17984:	mov	r3, r0
   17988:	mov	r2, r0
   1798c:	mov	r1, #13
   17990:	mov	r0, r4
   17994:	strd	r6, [sp]
   17998:	bl	2b714 <flatcc_verify_table_as_nested_root@@Base>
   1799c:	cmp	r0, #0
   179a0:	bne	177a8 <_start@@Base+0x2418>
   179a4:	ldr	r3, [pc, #564]	; 17be0 <_start@@Base+0x2850>
   179a8:	mov	r2, r0
   179ac:	mov	r1, #14
   179b0:	mov	r0, r4
   179b4:	add	r3, pc, r3
   179b8:	bl	2ab34 <flatcc_verify_table_field@@Base>
   179bc:	cmp	r0, #0
   179c0:	bne	177a8 <_start@@Base+0x2418>
   179c4:	mov	r3, r6
   179c8:	mov	r2, r6
   179cc:	mov	r1, #15
   179d0:	mov	r0, r4
   179d4:	bl	2a700 <flatcc_verify_field@@Base>
   179d8:	cmp	r0, #0
   179dc:	bne	177a8 <_start@@Base+0x2418>
   179e0:	mov	r3, r5
   179e4:	mov	r2, r5
   179e8:	mov	r1, #16
   179ec:	mov	r0, r4
   179f0:	bl	2a700 <flatcc_verify_field@@Base>
   179f4:	cmp	r0, #0
   179f8:	bne	177a8 <_start@@Base+0x2418>
   179fc:	mov	r3, r5
   17a00:	mov	r2, r5
   17a04:	mov	r1, #17
   17a08:	mov	r0, r4
   17a0c:	bl	2a700 <flatcc_verify_field@@Base>
   17a10:	cmp	r0, #0
   17a14:	bne	177a8 <_start@@Base+0x2418>
   17a18:	mov	r3, #8
   17a1c:	mov	r1, #18
   17a20:	mov	r2, r3
   17a24:	mov	r0, r4
   17a28:	bl	2a700 <flatcc_verify_field@@Base>
   17a2c:	cmp	r0, #0
   17a30:	bne	177a8 <_start@@Base+0x2418>
   17a34:	mov	r3, #8
   17a38:	mov	r1, #19
   17a3c:	mov	r2, r3
   17a40:	mov	r0, r4
   17a44:	bl	2a700 <flatcc_verify_field@@Base>
   17a48:	cmp	r0, #0
   17a4c:	bne	177a8 <_start@@Base+0x2418>
   17a50:	mov	r3, r5
   17a54:	mov	r1, #20
   17a58:	mov	r2, r5
   17a5c:	mov	r0, r4
   17a60:	bl	2a700 <flatcc_verify_field@@Base>
   17a64:	cmp	r0, #0
   17a68:	bne	177a8 <_start@@Base+0x2418>
   17a6c:	mov	r3, r5
   17a70:	mov	r1, #21
   17a74:	mov	r2, r5
   17a78:	mov	r0, r4
   17a7c:	bl	2a700 <flatcc_verify_field@@Base>
   17a80:	cmp	r0, #0
   17a84:	bne	177a8 <_start@@Base+0x2418>
   17a88:	mov	r3, #8
   17a8c:	mov	r1, #22
   17a90:	mov	r2, r3
   17a94:	mov	r0, r4
   17a98:	bl	2a700 <flatcc_verify_field@@Base>
   17a9c:	cmp	r0, #0
   17aa0:	bne	177a8 <_start@@Base+0x2418>
   17aa4:	mov	r3, #8
   17aa8:	mov	r1, #23
   17aac:	mov	r2, r3
   17ab0:	mov	r0, r4
   17ab4:	bl	2a700 <flatcc_verify_field@@Base>
   17ab8:	cmp	r0, #0
   17abc:	bne	177a8 <_start@@Base+0x2418>
   17ac0:	mov	r3, r5
   17ac4:	mov	r1, #25
   17ac8:	mov	r2, r5
   17acc:	mov	r0, r4
   17ad0:	bl	2a700 <flatcc_verify_field@@Base>
   17ad4:	cmp	r0, #0
   17ad8:	bne	177a8 <_start@@Base+0x2418>
   17adc:	mov	r3, r5
   17ae0:	mov	r1, #26
   17ae4:	mov	r2, r5
   17ae8:	mov	r0, r4
   17aec:	bl	2a700 <flatcc_verify_field@@Base>
   17af0:	cmp	r0, #0
   17af4:	bne	177a8 <_start@@Base+0x2418>
   17af8:	mov	r3, r5
   17afc:	mov	r1, #27
   17b00:	mov	r2, r5
   17b04:	mov	r0, r4
   17b08:	bl	2a700 <flatcc_verify_field@@Base>
   17b0c:	cmp	r0, #0
   17b10:	bne	177a8 <_start@@Base+0x2418>
   17b14:	mvn	ip, #0
   17b18:	mov	r1, r6
   17b1c:	mov	r2, r0
   17b20:	mov	r3, r6
   17b24:	mov	r0, r4
   17b28:	stm	sp, {r1, ip}
   17b2c:	mov	r1, #30
   17b30:	bl	2a84c <flatcc_verify_vector_field@@Base>
   17b34:	cmp	r0, #0
   17b38:	bne	177a8 <_start@@Base+0x2418>
   17b3c:	mov	r5, #8
   17b40:	mvn	r6, #-536870912	; 0xe0000000
   17b44:	mov	r3, r5
   17b48:	mov	r2, #0
   17b4c:	mov	r1, #32
   17b50:	mov	r0, r4
   17b54:	stm	sp, {r5, r6}
   17b58:	bl	2a84c <flatcc_verify_vector_field@@Base>
   17b5c:	cmp	r0, #0
   17b60:	bne	177a8 <_start@@Base+0x2418>
   17b64:	mov	r2, r0
   17b68:	mov	r3, r5
   17b6c:	stm	sp, {r5, r6}
   17b70:	mov	r1, #33	; 0x21
   17b74:	mov	r0, r4
   17b78:	bl	2a84c <flatcc_verify_vector_field@@Base>
   17b7c:	cmp	r0, #0
   17b80:	bne	177a8 <_start@@Base+0x2418>
   17b84:	ldr	r3, [pc, #88]	; 17be4 <_start@@Base+0x2854>
   17b88:	mov	r2, r0
   17b8c:	mov	r1, #34	; 0x22
   17b90:	mov	r0, r4
   17b94:	add	r3, pc, r3
   17b98:	bl	2ab34 <flatcc_verify_table_field@@Base>
   17b9c:	cmp	r0, #0
   17ba0:	bne	177a8 <_start@@Base+0x2418>
   17ba4:	ldr	r3, [pc, #60]	; 17be8 <_start@@Base+0x2858>
   17ba8:	mov	r2, r0
   17bac:	mov	r1, #35	; 0x23
   17bb0:	mov	r0, r4
   17bb4:	add	r3, pc, r3
   17bb8:	add	sp, sp, #8
   17bbc:	ldrd	r4, [sp]
   17bc0:	ldrd	r6, [sp, #8]
   17bc4:	ldr	r8, [sp, #16]
   17bc8:	ldr	lr, [sp, #20]
   17bcc:	add	sp, sp, #24
   17bd0:	b	2ab34 <flatcc_verify_table_field@@Base>
   17bd4:			; <UNDEFINED> instruction: 0xffffff0c
   17bd8:			; <UNDEFINED> instruction: 0xfffffe74
   17bdc:	andeq	r0, r0, r8, asr r3
   17be0:			; <UNDEFINED> instruction: 0xfffffbc8
   17be4:			; <UNDEFINED> instruction: 0xffffda2c
   17be8:	andeq	r0, r0, r0, lsr r0
   17bec:	strd	r4, [sp, #-16]!
   17bf0:	mov	r4, #1
   17bf4:	mvn	r5, #0
   17bf8:	str	r6, [sp, #8]
   17bfc:	mov	r2, #0
   17c00:	mov	r3, r4
   17c04:	str	lr, [sp, #12]
   17c08:	sub	sp, sp, #8
   17c0c:	mov	r1, r2
   17c10:	mov	r6, r0
   17c14:	strd	r4, [sp]
   17c18:	bl	2a84c <flatcc_verify_vector_field@@Base>
   17c1c:	subs	r2, r0, #0
   17c20:	beq	17c3c <_start@@Base+0x28ac>
   17c24:	mov	r0, r2
   17c28:	add	sp, sp, #8
   17c2c:	ldrd	r4, [sp]
   17c30:	ldr	r6, [sp, #8]
   17c34:	add	sp, sp, #12
   17c38:	pop	{pc}		; (ldr pc, [sp], #4)
   17c3c:	mov	r3, r4
   17c40:	mov	r1, r4
   17c44:	strd	r4, [sp]
   17c48:	mov	r0, r6
   17c4c:	bl	2a84c <flatcc_verify_vector_field@@Base>
   17c50:	subs	r2, r0, #0
   17c54:	bne	17c24 <_start@@Base+0x2894>
   17c58:	ldr	ip, [pc, #28]	; 17c7c <_start@@Base+0x28ec>
   17c5c:	mov	r3, r2
   17c60:	mov	r0, r6
   17c64:	mov	r1, #2
   17c68:	add	ip, pc, ip
   17c6c:	stm	sp, {r4, ip}
   17c70:	bl	2b714 <flatcc_verify_table_as_nested_root@@Base>
   17c74:	mov	r2, r0
   17c78:	b	17c24 <_start@@Base+0x2894>
   17c7c:			; <UNDEFINED> instruction: 0xfffffb08
   17c80:	ldrb	r3, [r0, #12]
   17c84:	sub	r3, r3, #1
   17c88:	cmp	r3, #3
   17c8c:	addls	pc, pc, r3, lsl #2
   17c90:	b	17cd4 <_start@@Base+0x2944>
   17c94:	b	17cc8 <_start@@Base+0x2938>
   17c98:	b	17cbc <_start@@Base+0x292c>
   17c9c:	b	17cb0 <_start@@Base+0x2920>
   17ca0:	b	17ca4 <_start@@Base+0x2914>
   17ca4:	ldr	r1, [pc, #48]	; 17cdc <_start@@Base+0x294c>
   17ca8:	add	r1, pc, r1
   17cac:	b	2afc4 <flatcc_verify_union_table@@Base>
   17cb0:	ldr	r1, [pc, #40]	; 17ce0 <_start@@Base+0x2950>
   17cb4:	add	r1, pc, r1
   17cb8:	b	2afc4 <flatcc_verify_union_table@@Base>
   17cbc:	ldr	r1, [pc, #32]	; 17ce4 <_start@@Base+0x2954>
   17cc0:	add	r1, pc, r1
   17cc4:	b	2afc4 <flatcc_verify_union_table@@Base>
   17cc8:	ldr	r1, [pc, #24]	; 17ce8 <_start@@Base+0x2958>
   17ccc:	add	r1, pc, r1
   17cd0:	b	2afc4 <flatcc_verify_union_table@@Base>
   17cd4:	mov	r0, #0
   17cd8:	bx	lr
   17cdc:	andeq	r0, r0, ip, lsr r0
   17ce0:	andeq	r0, r0, r0, lsr r5
   17ce4:			; <UNDEFINED> instruction: 0xfffff834
   17ce8:			; <UNDEFINED> instruction: 0xfffffaa4
   17cec:	ldr	r3, [pc, #112]	; 17d64 <_start@@Base+0x29d4>
   17cf0:	mov	r2, #0
   17cf4:	mov	r1, r2
   17cf8:	str	r4, [sp, #-8]!
   17cfc:	mov	r4, r0
   17d00:	str	lr, [sp, #4]
   17d04:	add	r3, pc, r3
   17d08:	bl	2ab34 <flatcc_verify_table_field@@Base>
   17d0c:	cmp	r0, #0
   17d10:	beq	17d20 <_start@@Base+0x2990>
   17d14:	ldr	r4, [sp]
   17d18:	add	sp, sp, #4
   17d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d20:	ldr	r3, [pc, #64]	; 17d68 <_start@@Base+0x29d8>
   17d24:	mov	r2, r0
   17d28:	mov	r1, #1
   17d2c:	mov	r0, r4
   17d30:	add	r3, pc, r3
   17d34:	bl	2ab34 <flatcc_verify_table_field@@Base>
   17d38:	cmp	r0, #0
   17d3c:	bne	17d14 <_start@@Base+0x2984>
   17d40:	ldr	r3, [pc, #36]	; 17d6c <_start@@Base+0x29dc>
   17d44:	mov	r2, r0
   17d48:	mov	r1, #3
   17d4c:	mov	r0, r4
   17d50:	ldr	r4, [sp]
   17d54:	ldr	lr, [sp, #4]
   17d58:	add	sp, sp, #8
   17d5c:	add	r3, pc, r3
   17d60:	b	2ba3c <flatcc_verify_union_vector_field@@Base>
   17d64:			; <UNDEFINED> instruction: 0xfffff9e8
   17d68:	andeq	r0, r0, r8, lsr r0
   17d6c:			; <UNDEFINED> instruction: 0xffffff1c
   17d70:	strd	r4, [sp, #-16]!
   17d74:	mov	r2, #0
   17d78:	mov	r1, #1
   17d7c:	ldr	r4, [pc, #164]	; 17e28 <_start@@Base+0x2a98>
   17d80:	mov	r5, r0
   17d84:	str	r6, [sp, #8]
   17d88:	str	lr, [sp, #12]
   17d8c:	add	r4, pc, r4
   17d90:	mov	r3, r4
   17d94:	bl	2b8e8 <flatcc_verify_union_field@@Base>
   17d98:	cmp	r0, #0
   17d9c:	beq	17db0 <_start@@Base+0x2a20>
   17da0:	ldrd	r4, [sp]
   17da4:	ldr	r6, [sp, #8]
   17da8:	add	sp, sp, #12
   17dac:	pop	{pc}		; (ldr pc, [sp], #4)
   17db0:	mov	r2, r0
   17db4:	mov	r3, r4
   17db8:	mov	r1, #3
   17dbc:	mov	r0, r5
   17dc0:	bl	2b8e8 <flatcc_verify_union_field@@Base>
   17dc4:	cmp	r0, #0
   17dc8:	bne	17da0 <_start@@Base+0x2a10>
   17dcc:	mov	r2, r0
   17dd0:	mov	r3, r4
   17dd4:	mov	r1, #5
   17dd8:	mov	r0, r5
   17ddc:	bl	2b8e8 <flatcc_verify_union_field@@Base>
   17de0:	cmp	r0, #0
   17de4:	bne	17da0 <_start@@Base+0x2a10>
   17de8:	mov	r2, r0
   17dec:	mov	r3, r4
   17df0:	mov	r1, #7
   17df4:	mov	r0, r5
   17df8:	bl	2b8e8 <flatcc_verify_union_field@@Base>
   17dfc:	cmp	r0, #0
   17e00:	bne	17da0 <_start@@Base+0x2a10>
   17e04:	mov	r3, r4
   17e08:	mov	r2, r0
   17e0c:	ldr	r6, [sp, #8]
   17e10:	mov	r0, r5
   17e14:	mov	r1, #9
   17e18:	ldrd	r4, [sp]
   17e1c:	ldr	lr, [sp, #12]
   17e20:	add	sp, sp, #16
   17e24:	b	2ba3c <flatcc_verify_union_vector_field@@Base>
   17e28:	muleq	r0, r8, r0
   17e2c:	ldrb	r3, [r0, #12]
   17e30:	mov	r2, r0
   17e34:	cmp	r3, #10
   17e38:	bhi	17e60 <_start@@Base+0x2ad0>
   17e3c:	cmp	r3, #9
   17e40:	bcs	17e78 <_start@@Base+0x2ae8>
   17e44:	cmp	r3, #2
   17e48:	beq	17e8c <_start@@Base+0x2afc>
   17e4c:	cmp	r3, #8
   17e50:	bne	17e84 <_start@@Base+0x2af4>
   17e54:	mov	r2, #2
   17e58:	mov	r1, r2
   17e5c:	b	2b0c0 <flatcc_verify_union_struct@@Base>
   17e60:	cmp	r3, #11
   17e64:	beq	17e70 <_start@@Base+0x2ae0>
   17e68:	cmp	r3, #255	; 0xff
   17e6c:	bne	17e84 <_start@@Base+0x2af4>
   17e70:	mov	r0, r2
   17e74:	b	2b120 <flatcc_verify_union_string@@Base>
   17e78:	mov	r2, #4
   17e7c:	mov	r1, r2
   17e80:	b	2b0c0 <flatcc_verify_union_struct@@Base>
   17e84:	mov	r0, #0
   17e88:	bx	lr
   17e8c:	ldr	r1, [pc, #4]	; 17e98 <_start@@Base+0x2b08>
   17e90:	add	r1, pc, r1
   17e94:	b	2afc4 <flatcc_verify_union_table@@Base>
   17e98:			; <UNDEFINED> instruction: 0xffffd738
   17e9c:	sub	r1, r1, #1
   17ea0:	cmp	r1, #3
   17ea4:	addls	pc, pc, r1, lsl #2
   17ea8:	b	17efc <_start@@Base+0x2b6c>
   17eac:	b	17eec <_start@@Base+0x2b5c>
   17eb0:	b	17edc <_start@@Base+0x2b4c>
   17eb4:	b	17ecc <_start@@Base+0x2b3c>
   17eb8:	b	17ebc <_start@@Base+0x2b2c>
   17ebc:	ldr	r1, [pc, #72]	; 17f0c <_start@@Base+0x2b7c>
   17ec0:	mov	r2, #3
   17ec4:	add	r1, pc, r1
   17ec8:	b	32a98 <flatcc_json_printer_enum@@Base>
   17ecc:	ldr	r1, [pc, #60]	; 17f10 <_start@@Base+0x2b80>
   17ed0:	mov	r2, #8
   17ed4:	add	r1, pc, r1
   17ed8:	b	32a98 <flatcc_json_printer_enum@@Base>
   17edc:	ldr	r1, [pc, #48]	; 17f14 <_start@@Base+0x2b84>
   17ee0:	mov	r2, #23
   17ee4:	add	r1, pc, r1
   17ee8:	b	32a98 <flatcc_json_printer_enum@@Base>
   17eec:	ldr	r1, [pc, #36]	; 17f18 <_start@@Base+0x2b88>
   17ef0:	mov	r2, #7
   17ef4:	add	r1, pc, r1
   17ef8:	b	32a98 <flatcc_json_printer_enum@@Base>
   17efc:	ldr	r1, [pc, #24]	; 17f1c <_start@@Base+0x2b8c>
   17f00:	mov	r2, #4
   17f04:	add	r1, pc, r1
   17f08:	b	32a98 <flatcc_json_printer_enum@@Base>
   17f0c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   17f10:	andeq	r6, r2, r4, ror pc
   17f14:	andeq	r6, r2, ip, asr #30
   17f18:	andeq	r6, r2, r4, lsr pc
   17f1c:	andeq	fp, r2, r8, lsr #14
   17f20:	strd	r4, [sp, #-20]!	; 0xffffffec
   17f24:	mov	r4, #0
   17f28:	mov	r5, #0
   17f2c:	strd	r6, [sp, #8]
   17f30:	mov	r7, #0
   17f34:	cmp	r1, r2
   17f38:	str	lr, [sp, #16]
   17f3c:	sub	sp, sp, #28
   17f40:	moveq	r0, r1
   17f44:	strd	r4, [r3]
   17f48:	str	r7, [sp, #12]
   17f4c:	strd	r4, [sp, #16]
   17f50:	beq	17f7c <_start@@Base+0x2bec>
   17f54:	add	ip, sp, #16
   17f58:	mov	r5, r3
   17f5c:	add	r3, sp, #12
   17f60:	mov	r4, r1
   17f64:	str	ip, [sp]
   17f68:	mov	r6, r0
   17f6c:	mov	r7, r2
   17f70:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   17f74:	cmp	r4, r0
   17f78:	bne	17f90 <_start@@Base+0x2c00>
   17f7c:	add	sp, sp, #28
   17f80:	ldrd	r4, [sp]
   17f84:	ldrd	r6, [sp, #8]
   17f88:	add	sp, sp, #16
   17f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   17f90:	ldr	r1, [sp, #12]
   17f94:	ldrd	r2, [sp, #16]
   17f98:	cmp	r1, #0
   17f9c:	beq	17fbc <_start@@Base+0x2c2c>
   17fa0:	cmp	r3, #-2147483648	; 0x80000000
   17fa4:	cmpeq	r2, #0
   17fa8:	bhi	17fe4 <_start@@Base+0x2c54>
   17fac:	rsbs	r2, r2, #0
   17fb0:	rsc	r3, r3, #0
   17fb4:	strd	r2, [r5]
   17fb8:	b	17f7c <_start@@Base+0x2bec>
   17fbc:	cmp	r2, #0
   17fc0:	sbcs	r1, r3, #0
   17fc4:	strdge	r2, [r5]
   17fc8:	bge	17f7c <_start@@Base+0x2bec>
   17fcc:	mov	r1, r0
   17fd0:	mov	r2, r7
   17fd4:	mov	r0, r6
   17fd8:	mov	r3, #7
   17fdc:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   17fe0:	b	17f7c <_start@@Base+0x2bec>
   17fe4:	mov	r1, r0
   17fe8:	mov	r2, r7
   17fec:	mov	r0, r6
   17ff0:	mov	r3, #8
   17ff4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   17ff8:	b	17f7c <_start@@Base+0x2bec>
   17ffc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18000:	mov	r4, r1
   18004:	mov	r1, r2
   18008:	strd	r6, [sp, #8]
   1800c:	mov	r6, r0
   18010:	mov	r0, r4
   18014:	strd	r8, [sp, #16]
   18018:	mov	r5, r2
   1801c:	mov	r7, r3
   18020:	str	sl, [sp, #24]
   18024:	str	lr, [sp, #28]
   18028:	sub	sp, sp, #8
   1802c:	bl	15480 <_start@@Base+0xf0>
   18030:	add	r3, pc, #256	; 0x100
   18034:	ldrd	r2, [r3]
   18038:	cmp	r1, r3
   1803c:	cmpeq	r0, r2
   18040:	beq	180b8 <_start@@Base+0x2d28>
   18044:	add	r9, pc, #244	; 0xf4
   18048:	ldrd	r8, [r9]
   1804c:	mov	sl, #0
   18050:	cmp	r1, r9
   18054:	cmpeq	sl, r8
   18058:	beq	1807c <_start@@Base+0x2cec>
   1805c:	mov	r0, r4
   18060:	add	sp, sp, #8
   18064:	ldrd	r4, [sp]
   18068:	ldrd	r6, [sp, #8]
   1806c:	ldrd	r8, [sp, #16]
   18070:	ldr	sl, [sp, #24]
   18074:	add	sp, sp, #28
   18078:	pop	{pc}		; (ldr pc, [sp], #4)
   1807c:	ldr	r3, [sp, #44]	; 0x2c
   18080:	mov	r2, r5
   18084:	mov	r0, r6
   18088:	mov	r1, r4
   1808c:	str	r3, [sp]
   18090:	mov	r3, #4
   18094:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   18098:	cmp	r4, r0
   1809c:	beq	18060 <_start@@Base+0x2cd0>
   180a0:	ldr	r1, [sp, #40]	; 0x28
   180a4:	mov	r2, #0
   180a8:	mov	r3, #0
   180ac:	strd	r2, [r1]
   180b0:	str	sl, [r7]
   180b4:	b	18060 <_start@@Base+0x2cd0>
   180b8:	mov	r1, r5
   180bc:	add	r0, r4, #8
   180c0:	bl	15480 <_start@@Base+0xf0>
   180c4:	add	r3, pc, #124	; 0x7c
   180c8:	ldrd	r2, [r3]
   180cc:	cmp	r1, r3
   180d0:	cmpeq	r0, r2
   180d4:	bne	1805c <_start@@Base+0x2ccc>
   180d8:	add	r8, r4, #16
   180dc:	mov	r1, r5
   180e0:	mov	r0, r8
   180e4:	mov	r9, #0
   180e8:	bl	15480 <_start@@Base+0xf0>
   180ec:	and	r3, r1, #-16777216	; 0xff000000
   180f0:	cmp	r3, #1694498816	; 0x65000000
   180f4:	cmpeq	r9, #0
   180f8:	bne	1805c <_start@@Base+0x2ccc>
   180fc:	ldr	r3, [sp, #44]	; 0x2c
   18100:	mov	r2, r5
   18104:	mov	r0, r6
   18108:	mov	r1, r8
   1810c:	str	r3, [sp]
   18110:	mov	r3, #1
   18114:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   18118:	cmp	r8, r0
   1811c:	beq	1805c <_start@@Base+0x2ccc>
   18120:	ldr	r1, [sp, #40]	; 0x28
   18124:	mov	r2, #1
   18128:	mov	r3, #0
   1812c:	strd	r2, [r1]
   18130:	str	r9, [r7]
   18134:	b	18060 <_start@@Base+0x2cd0>
   18138:	rsbvc	r6, r5, #116, 28	; 0x740
   1813c:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   18140:	andeq	r0, r0, r0
   18144:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   18148:	cmnvc	r0, #-1073741800	; 0xc0000018
   1814c:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   18150:	strd	r4, [sp, #-20]!	; 0xffffffec
   18154:	mov	r4, #0
   18158:	mov	r5, #0
   1815c:	strd	r6, [sp, #8]
   18160:	mov	r7, #0
   18164:	cmp	r1, r2
   18168:	str	lr, [sp, #16]
   1816c:	sub	sp, sp, #28
   18170:	moveq	r0, r1
   18174:	strd	r4, [r3]
   18178:	str	r7, [sp, #12]
   1817c:	strd	r4, [sp, #16]
   18180:	beq	181c0 <_start@@Base+0x2e30>
   18184:	add	ip, sp, #16
   18188:	mov	r5, r3
   1818c:	add	r3, sp, #12
   18190:	mov	r4, r1
   18194:	str	ip, [sp]
   18198:	mov	r6, r0
   1819c:	mov	r7, r2
   181a0:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   181a4:	cmp	r4, r0
   181a8:	beq	181c0 <_start@@Base+0x2e30>
   181ac:	ldr	r3, [sp, #12]
   181b0:	cmp	r3, #0
   181b4:	bne	181d4 <_start@@Base+0x2e44>
   181b8:	ldrd	r2, [sp, #16]
   181bc:	strd	r2, [r5]
   181c0:	add	sp, sp, #28
   181c4:	ldrd	r4, [sp]
   181c8:	ldrd	r6, [sp, #8]
   181cc:	add	sp, sp, #16
   181d0:	pop	{pc}		; (ldr pc, [sp], #4)
   181d4:	mov	r1, r0
   181d8:	mov	r2, r7
   181dc:	mov	r0, r6
   181e0:	mov	r3, #8
   181e4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   181e8:	b	181c0 <_start@@Base+0x2e30>
   181ec:	mov	r0, #0
   181f0:	bx	lr
   181f4:	bx	lr
   181f8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   181fc:	cmp	r1, r2
   18200:	strd	r6, [sp, #8]
   18204:	moveq	r0, r1
   18208:	strd	r8, [sp, #16]
   1820c:	mov	r8, #0
   18210:	mov	r9, #0
   18214:	str	lr, [sp, #24]
   18218:	sub	sp, sp, #28
   1821c:	mov	lr, #0
   18220:	str	lr, [r3]
   18224:	str	lr, [sp, #12]
   18228:	strd	r8, [sp, #16]
   1822c:	beq	18258 <_start@@Base+0x2ec8>
   18230:	add	ip, sp, #16
   18234:	mov	r5, r3
   18238:	add	r3, sp, #12
   1823c:	mov	r4, r1
   18240:	str	ip, [sp]
   18244:	mov	r7, r2
   18248:	mov	r6, r0
   1824c:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   18250:	cmp	r4, r0
   18254:	bne	18270 <_start@@Base+0x2ee0>
   18258:	add	sp, sp, #28
   1825c:	ldrd	r4, [sp]
   18260:	ldrd	r6, [sp, #8]
   18264:	ldrd	r8, [sp, #16]
   18268:	add	sp, sp, #24
   1826c:	pop	{pc}		; (ldr pc, [sp], #4)
   18270:	ldr	r3, [sp, #12]
   18274:	cmp	r3, #0
   18278:	bne	182b0 <_start@@Base+0x2f20>
   1827c:	ldrd	r2, [sp, #16]
   18280:	mov	r9, #0
   18284:	mvn	r8, #0
   18288:	cmp	r3, r9
   1828c:	cmpeq	r2, r8
   18290:	strls	r2, [r5]
   18294:	bls	18258 <_start@@Base+0x2ec8>
   18298:	mov	r1, r0
   1829c:	mov	r2, r7
   182a0:	mov	r0, r6
   182a4:	mov	r3, #7
   182a8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   182ac:	b	18258 <_start@@Base+0x2ec8>
   182b0:	mov	r1, r0
   182b4:	mov	r2, r7
   182b8:	mov	r0, r6
   182bc:	mov	r3, #8
   182c0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   182c4:	b	18258 <_start@@Base+0x2ec8>
   182c8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   182cc:	cmp	r1, r2
   182d0:	strd	r6, [sp, #8]
   182d4:	moveq	r0, r1
   182d8:	strd	r8, [sp, #16]
   182dc:	mov	r8, #0
   182e0:	mov	r9, #0
   182e4:	str	lr, [sp, #24]
   182e8:	sub	sp, sp, #28
   182ec:	mov	lr, #0
   182f0:	strb	lr, [r3]
   182f4:	str	lr, [sp, #12]
   182f8:	strd	r8, [sp, #16]
   182fc:	beq	18328 <_start@@Base+0x2f98>
   18300:	add	ip, sp, #16
   18304:	mov	r5, r3
   18308:	add	r3, sp, #12
   1830c:	mov	r4, r1
   18310:	str	ip, [sp]
   18314:	mov	r7, r2
   18318:	mov	r6, r0
   1831c:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   18320:	cmp	r4, r0
   18324:	bne	18340 <_start@@Base+0x2fb0>
   18328:	add	sp, sp, #28
   1832c:	ldrd	r4, [sp]
   18330:	ldrd	r6, [sp, #8]
   18334:	ldrd	r8, [sp, #16]
   18338:	add	sp, sp, #24
   1833c:	pop	{pc}		; (ldr pc, [sp], #4)
   18340:	ldr	r3, [sp, #12]
   18344:	cmp	r3, #0
   18348:	bne	18378 <_start@@Base+0x2fe8>
   1834c:	ldrd	r2, [sp, #16]
   18350:	cmp	r3, #0
   18354:	cmpeq	r2, #255	; 0xff
   18358:	strbls	r2, [r5]
   1835c:	bls	18328 <_start@@Base+0x2f98>
   18360:	mov	r1, r0
   18364:	mov	r2, r7
   18368:	mov	r0, r6
   1836c:	mov	r3, #7
   18370:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   18374:	b	18328 <_start@@Base+0x2f98>
   18378:	mov	r1, r0
   1837c:	mov	r2, r7
   18380:	mov	r0, r6
   18384:	mov	r3, #8
   18388:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1838c:	b	18328 <_start@@Base+0x2f98>
   18390:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18394:	cmp	r1, r2
   18398:	strd	r6, [sp, #8]
   1839c:	moveq	r0, r1
   183a0:	strd	r8, [sp, #16]
   183a4:	mov	r8, #0
   183a8:	mov	r9, #0
   183ac:	str	lr, [sp, #24]
   183b0:	sub	sp, sp, #28
   183b4:	mov	lr, #0
   183b8:	str	lr, [r3]
   183bc:	str	lr, [sp, #12]
   183c0:	strd	r8, [sp, #16]
   183c4:	beq	183f0 <_start@@Base+0x3060>
   183c8:	add	ip, sp, #16
   183cc:	mov	r5, r3
   183d0:	add	r3, sp, #12
   183d4:	mov	r4, r1
   183d8:	str	ip, [sp]
   183dc:	mov	r7, r2
   183e0:	mov	r6, r0
   183e4:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   183e8:	cmp	r4, r0
   183ec:	bne	18408 <_start@@Base+0x3078>
   183f0:	add	sp, sp, #28
   183f4:	ldrd	r4, [sp]
   183f8:	ldrd	r6, [sp, #8]
   183fc:	ldrd	r8, [sp, #16]
   18400:	add	sp, sp, #24
   18404:	pop	{pc}		; (ldr pc, [sp], #4)
   18408:	ldr	r1, [sp, #12]
   1840c:	ldrd	r2, [sp, #16]
   18410:	cmp	r1, #0
   18414:	beq	18444 <_start@@Base+0x30b4>
   18418:	cmp	r3, #0
   1841c:	cmpeq	r2, #-2147483648	; 0x80000000
   18420:	rsbls	r2, r2, #0
   18424:	strls	r2, [r5]
   18428:	bls	183f0 <_start@@Base+0x3060>
   1842c:	mov	r1, r0
   18430:	mov	r2, r7
   18434:	mov	r0, r6
   18438:	mov	r3, #8
   1843c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   18440:	b	183f0 <_start@@Base+0x3060>
   18444:	mov	r9, #0
   18448:	mvn	r8, #-2147483648	; 0x80000000
   1844c:	cmp	r3, r9
   18450:	cmpeq	r2, r8
   18454:	strls	r2, [r5]
   18458:	bls	183f0 <_start@@Base+0x3060>
   1845c:	mov	r1, r0
   18460:	mov	r2, r7
   18464:	mov	r0, r6
   18468:	mov	r3, #7
   1846c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   18470:	b	183f0 <_start@@Base+0x3060>
   18474:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18478:	cmp	r1, r2
   1847c:	strd	r6, [sp, #8]
   18480:	moveq	r0, r1
   18484:	strd	r8, [sp, #16]
   18488:	mov	r8, #0
   1848c:	mov	r9, #0
   18490:	str	lr, [sp, #24]
   18494:	sub	sp, sp, #28
   18498:	mov	lr, #0
   1849c:	strh	lr, [r3]
   184a0:	str	lr, [sp, #12]
   184a4:	strd	r8, [sp, #16]
   184a8:	beq	184d4 <_start@@Base+0x3144>
   184ac:	add	ip, sp, #16
   184b0:	mov	r5, r3
   184b4:	add	r3, sp, #12
   184b8:	mov	r4, r1
   184bc:	str	ip, [sp]
   184c0:	mov	r7, r2
   184c4:	mov	r6, r0
   184c8:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   184cc:	cmp	r4, r0
   184d0:	bne	184ec <_start@@Base+0x315c>
   184d4:	add	sp, sp, #28
   184d8:	ldrd	r4, [sp]
   184dc:	ldrd	r6, [sp, #8]
   184e0:	ldrd	r8, [sp, #16]
   184e4:	add	sp, sp, #24
   184e8:	pop	{pc}		; (ldr pc, [sp], #4)
   184ec:	ldr	r1, [sp, #12]
   184f0:	ldrd	r2, [sp, #16]
   184f4:	cmp	r1, #0
   184f8:	beq	18528 <_start@@Base+0x3198>
   184fc:	cmp	r3, #0
   18500:	cmpeq	r2, #32768	; 0x8000
   18504:	rsbls	r2, r2, #0
   18508:	strhls	r2, [r5]
   1850c:	bls	184d4 <_start@@Base+0x3144>
   18510:	mov	r1, r0
   18514:	mov	r2, r7
   18518:	mov	r0, r6
   1851c:	mov	r3, #8
   18520:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   18524:	b	184d4 <_start@@Base+0x3144>
   18528:	mov	r9, #0
   1852c:	movw	r8, #32767	; 0x7fff
   18530:	cmp	r3, r9
   18534:	cmpeq	r2, r8
   18538:	strhls	r2, [r5]
   1853c:	bls	184d4 <_start@@Base+0x3144>
   18540:	mov	r1, r0
   18544:	mov	r2, r7
   18548:	mov	r0, r6
   1854c:	mov	r3, #7
   18550:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   18554:	b	184d4 <_start@@Base+0x3144>
   18558:	mov	r3, #8
   1855c:	mov	r1, #0
   18560:	str	r4, [sp, #-8]!
   18564:	mov	r2, r3
   18568:	mov	r4, r0
   1856c:	str	lr, [sp, #4]
   18570:	bl	2a700 <flatcc_verify_field@@Base>
   18574:	cmp	r0, #0
   18578:	beq	18588 <_start@@Base+0x31f8>
   1857c:	ldr	r4, [sp]
   18580:	add	sp, sp, #4
   18584:	pop	{pc}		; (ldr pc, [sp], #4)
   18588:	mov	r3, #4
   1858c:	mov	r0, r4
   18590:	ldr	r4, [sp]
   18594:	mov	r2, r3
   18598:	mov	r1, #1
   1859c:	ldr	lr, [sp, #4]
   185a0:	add	sp, sp, #8
   185a4:	b	2a700 <flatcc_verify_field@@Base>
   185a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   185ac:	mov	r4, r1
   185b0:	mov	r5, r0
   185b4:	mov	r1, r2
   185b8:	mov	r0, r4
   185bc:	strd	r6, [sp, #8]
   185c0:	strd	r8, [sp, #16]
   185c4:	strd	sl, [sp, #24]
   185c8:	mov	sl, r2
   185cc:	mov	fp, r3
   185d0:	str	lr, [sp, #32]
   185d4:	sub	sp, sp, #20
   185d8:	bl	15480 <_start@@Base+0xf0>
   185dc:	add	r3, pc, #876	; 0x36c
   185e0:	ldrd	r2, [r3]
   185e4:	ldr	r9, [sp, #56]	; 0x38
   185e8:	ldr	r8, [sp, #60]	; 0x3c
   185ec:	cmp	r1, r3
   185f0:	cmpeq	r0, r2
   185f4:	bhi	186d4 <_start@@Base+0x3344>
   185f8:	add	r3, pc, #856	; 0x358
   185fc:	ldrd	r2, [r3]
   18600:	mov	r6, #0
   18604:	bic	r7, r1, #255	; 0xff
   18608:	cmp	r1, r3
   1860c:	cmpeq	r0, r2
   18610:	bhi	18660 <_start@@Base+0x32d0>
   18614:	add	r3, pc, #836	; 0x344
   18618:	ldrd	r2, [r3]
   1861c:	cmp	r7, r3
   18620:	cmpeq	r6, r2
   18624:	bne	18640 <_start@@Base+0x32b0>
   18628:	sub	r3, sl, r4
   1862c:	cmp	r3, #3
   18630:	ble	18640 <_start@@Base+0x32b0>
   18634:	ldrb	r3, [r4, #3]
   18638:	cmp	r3, #46	; 0x2e
   1863c:	beq	1889c <_start@@Base+0x350c>
   18640:	mov	r0, r4
   18644:	add	sp, sp, #20
   18648:	ldrd	r4, [sp]
   1864c:	ldrd	r6, [sp, #8]
   18650:	ldrd	r8, [sp, #16]
   18654:	ldrd	sl, [sp, #24]
   18658:	add	sp, sp, #32
   1865c:	pop	{pc}		; (ldr pc, [sp], #4)
   18660:	add	r3, pc, #768	; 0x300
   18664:	ldrd	r2, [r3]
   18668:	cmp	r7, r3
   1866c:	cmpeq	r6, r2
   18670:	beq	18854 <_start@@Base+0x34c4>
   18674:	add	r9, pc, #756	; 0x2f4
   18678:	ldrd	r8, [r9]
   1867c:	and	r6, r0, #-16777216	; 0xff000000
   18680:	cmp	r1, r9
   18684:	cmpeq	r6, r8
   18688:	bne	18640 <_start@@Base+0x32b0>
   1868c:	sub	r3, sl, r4
   18690:	cmp	r3, #5
   18694:	ble	18640 <_start@@Base+0x32b0>
   18698:	ldrb	r3, [r4, #5]
   1869c:	cmp	r3, #46	; 0x2e
   186a0:	bne	18640 <_start@@Base+0x32b0>
   186a4:	mov	r3, fp
   186a8:	mov	r2, sl
   186ac:	add	r1, r4, #6
   186b0:	mov	r0, r5
   186b4:	add	sp, sp, #20
   186b8:	ldrd	r4, [sp]
   186bc:	ldrd	r6, [sp, #8]
   186c0:	ldrd	r8, [sp, #16]
   186c4:	ldrd	sl, [sp, #24]
   186c8:	ldr	lr, [sp, #32]
   186cc:	add	sp, sp, #36	; 0x24
   186d0:	b	172f0 <_start@@Base+0x1f60>
   186d4:	add	r3, pc, #668	; 0x29c
   186d8:	ldrd	r2, [r3]
   186dc:	cmp	r1, r3
   186e0:	cmpeq	r0, r2
   186e4:	bhi	18744 <_start@@Base+0x33b4>
   186e8:	add	r3, pc, #656	; 0x290
   186ec:	ldrd	r2, [r3]
   186f0:	cmp	r1, r3
   186f4:	cmpeq	r0, r2
   186f8:	bne	18640 <_start@@Base+0x32b0>
   186fc:	sub	r3, sl, r4
   18700:	cmp	r3, #8
   18704:	ble	18640 <_start@@Base+0x32b0>
   18708:	ldrb	r3, [r4, #8]
   1870c:	cmp	r3, #46	; 0x2e
   18710:	bne	18640 <_start@@Base+0x32b0>
   18714:	mov	r3, fp
   18718:	mov	r2, sl
   1871c:	add	r1, r4, #9
   18720:	mov	r0, r5
   18724:	add	sp, sp, #20
   18728:	ldrd	r4, [sp]
   1872c:	ldrd	r6, [sp, #8]
   18730:	ldrd	r8, [sp, #16]
   18734:	ldrd	sl, [sp, #24]
   18738:	ldr	lr, [sp, #32]
   1873c:	add	sp, sp, #36	; 0x24
   18740:	b	16dc8 <_start@@Base+0x1a38>
   18744:	add	r3, pc, #572	; 0x23c
   18748:	ldrd	r2, [r3]
   1874c:	cmp	r1, r3
   18750:	cmpeq	r0, r2
   18754:	bhi	187b4 <_start@@Base+0x3424>
   18758:	add	r3, pc, #560	; 0x230
   1875c:	ldrd	r2, [r3]
   18760:	cmp	r1, r3
   18764:	cmpeq	r0, r2
   18768:	bne	18640 <_start@@Base+0x32b0>
   1876c:	sub	r3, sl, r4
   18770:	cmp	r3, #8
   18774:	ble	18640 <_start@@Base+0x32b0>
   18778:	ldrb	r3, [r4, #8]
   1877c:	cmp	r3, #46	; 0x2e
   18780:	bne	18640 <_start@@Base+0x32b0>
   18784:	mov	r3, fp
   18788:	mov	r2, sl
   1878c:	add	r1, r4, #9
   18790:	mov	r0, r5
   18794:	add	sp, sp, #20
   18798:	ldrd	r4, [sp]
   1879c:	ldrd	r6, [sp, #8]
   187a0:	ldrd	r8, [sp, #16]
   187a4:	ldrd	sl, [sp, #24]
   187a8:	ldr	lr, [sp, #32]
   187ac:	add	sp, sp, #36	; 0x24
   187b0:	b	16f68 <_start@@Base+0x1bd8>
   187b4:	add	r3, pc, #476	; 0x1dc
   187b8:	ldrd	r2, [r3]
   187bc:	cmp	r1, r3
   187c0:	cmpeq	r0, r2
   187c4:	beq	188cc <_start@@Base+0x353c>
   187c8:	add	r3, pc, #464	; 0x1d0
   187cc:	ldrd	r2, [r3]
   187d0:	cmp	r1, r3
   187d4:	cmpeq	r0, r2
   187d8:	bne	18640 <_start@@Base+0x32b0>
   187dc:	add	r6, r4, #8
   187e0:	mov	r1, sl
   187e4:	mov	r0, r6
   187e8:	mov	r7, #0
   187ec:	bl	15480 <_start@@Base+0xf0>
   187f0:	mov	r3, r1
   187f4:	add	r1, pc, #428	; 0x1ac
   187f8:	ldrd	r0, [r1]
   187fc:	cmp	r3, r1
   18800:	cmpeq	r7, r0
   18804:	bne	18640 <_start@@Base+0x32b0>
   18808:	sub	r3, sl, r6
   1880c:	cmp	r3, #4
   18810:	ble	18640 <_start@@Base+0x32b0>
   18814:	ldrb	r3, [r4, #12]
   18818:	cmp	r3, #46	; 0x2e
   1881c:	bne	18640 <_start@@Base+0x32b0>
   18820:	add	r3, r4, #13
   18824:	cmp	r6, r3
   18828:	str	r3, [sp, #12]
   1882c:	beq	18640 <_start@@Base+0x32b0>
   18830:	mov	r0, r3
   18834:	mov	r1, sl
   18838:	bl	15480 <_start@@Base+0xf0>
   1883c:	and	r3, r1, #-16777216	; 0xff000000
   18840:	cmp	r3, #2013265920	; 0x78000000
   18844:	cmpeq	r7, #0
   18848:	beq	18914 <_start@@Base+0x3584>
   1884c:	ldr	r4, [sp, #12]
   18850:	b	18640 <_start@@Base+0x32b0>
   18854:	sub	r3, sl, r4
   18858:	cmp	r3, #3
   1885c:	ble	18640 <_start@@Base+0x32b0>
   18860:	ldrb	r3, [r4, #3]
   18864:	cmp	r3, #46	; 0x2e
   18868:	bne	18640 <_start@@Base+0x32b0>
   1886c:	mov	r3, fp
   18870:	mov	r2, sl
   18874:	add	r1, r4, #4
   18878:	mov	r0, r5
   1887c:	add	sp, sp, #20
   18880:	ldrd	r4, [sp]
   18884:	ldrd	r6, [sp, #8]
   18888:	ldrd	r8, [sp, #16]
   1888c:	ldrd	sl, [sp, #24]
   18890:	ldr	lr, [sp, #32]
   18894:	add	sp, sp, #36	; 0x24
   18898:	b	17ffc <_start@@Base+0x2c6c>
   1889c:	mov	r3, fp
   188a0:	mov	r2, sl
   188a4:	add	r1, r4, #4
   188a8:	mov	r0, r5
   188ac:	add	sp, sp, #20
   188b0:	ldrd	r4, [sp]
   188b4:	ldrd	r6, [sp, #8]
   188b8:	ldrd	r8, [sp, #16]
   188bc:	ldrd	sl, [sp, #24]
   188c0:	ldr	lr, [sp, #32]
   188c4:	add	sp, sp, #36	; 0x24
   188c8:	b	16b40 <_start@@Base+0x17b0>
   188cc:	sub	r3, sl, r4
   188d0:	cmp	r3, #8
   188d4:	ble	18640 <_start@@Base+0x32b0>
   188d8:	ldrb	r3, [r4, #8]
   188dc:	cmp	r3, #46	; 0x2e
   188e0:	bne	18640 <_start@@Base+0x32b0>
   188e4:	mov	r3, fp
   188e8:	mov	r2, sl
   188ec:	add	r1, r4, #9
   188f0:	mov	r0, r5
   188f4:	add	sp, sp, #20
   188f8:	ldrd	r4, [sp]
   188fc:	ldrd	r6, [sp, #8]
   18900:	ldrd	r8, [sp, #16]
   18904:	ldrd	sl, [sp, #24]
   18908:	ldr	lr, [sp, #32]
   1890c:	add	sp, sp, #36	; 0x24
   18910:	b	17170 <_start@@Base+0x1de0>
   18914:	mov	r0, r5
   18918:	ldr	r5, [sp, #12]
   1891c:	mov	r2, sl
   18920:	mov	r3, #1
   18924:	str	r8, [sp]
   18928:	mov	r1, r5
   1892c:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   18930:	cmp	r5, r0
   18934:	mov	r4, r0
   18938:	beq	18640 <_start@@Base+0x32b0>
   1893c:	mov	r0, #0
   18940:	mov	r1, #0
   18944:	strd	r0, [r9]
   18948:	str	r7, [fp]
   1894c:	b	18640 <_start@@Base+0x32b0>
   18950:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   18954:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   18958:	ldrshvc	pc, [pc, #255]	; 18a5f <_start@@Base+0x36cf>	; <UNPREDICTABLE>
   1895c:	cmnmi	pc, #28416	; 0x6f00
   18960:	andeq	r0, r0, r0
   18964:	cmnmi	lr, r0, lsl #18
   18968:	andeq	r0, r0, r0
   1896c:	strbtmi	r6, [pc], -r0, lsl #30
   18970:	andvc	r0, r0, #0
   18974:	cmnmi	pc, #28416	; 0x6f00
   18978:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1897c:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   18980:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   18984:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   18988:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1898c:	mcrvs	7, 3, r6, cr5, cr15, {2}
   18990:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   18994:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   18998:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1899c:	mcrvs	7, 3, r6, cr5, cr15, {2}
   189a0:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   189a4:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   189a8:	andeq	r0, r0, r0
   189ac:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   189b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   189b4:	mov	r4, r1
   189b8:	mov	r1, r2
   189bc:	strd	r6, [sp, #8]
   189c0:	mov	r5, r2
   189c4:	strd	r8, [sp, #16]
   189c8:	mov	r8, r0
   189cc:	mov	r0, r4
   189d0:	strd	sl, [sp, #24]
   189d4:	mov	sl, r3
   189d8:	str	lr, [sp, #32]
   189dc:	sub	sp, sp, #20
   189e0:	bl	15480 <_start@@Base+0xf0>
   189e4:	add	r3, pc, #924	; 0x39c
   189e8:	ldrd	r2, [r3]
   189ec:	ldr	r7, [sp, #56]	; 0x38
   189f0:	ldr	fp, [sp, #60]	; 0x3c
   189f4:	cmp	r1, r3
   189f8:	cmpeq	r0, r2
   189fc:	bhi	18aa0 <_start@@Base+0x3710>
   18a00:	add	r3, pc, #904	; 0x388
   18a04:	ldrd	r2, [r3]
   18a08:	cmp	r1, r3
   18a0c:	cmpeq	r0, r2
   18a10:	bne	18be0 <_start@@Base+0x3850>
   18a14:	mov	r1, r5
   18a18:	add	r0, r4, #8
   18a1c:	bl	15480 <_start@@Base+0xf0>
   18a20:	add	r3, pc, #880	; 0x370
   18a24:	ldrd	r2, [r3]
   18a28:	cmp	r1, r3
   18a2c:	cmpeq	r0, r2
   18a30:	bne	18be0 <_start@@Base+0x3850>
   18a34:	add	r6, r4, #16
   18a38:	mov	r1, r5
   18a3c:	mov	r0, r6
   18a40:	bl	15480 <_start@@Base+0xf0>
   18a44:	and	r3, r1, #-16777216	; 0xff000000
   18a48:	mov	r2, #0
   18a4c:	cmp	r3, #1912602624	; 0x72000000
   18a50:	cmpeq	r2, #0
   18a54:	bne	18be0 <_start@@Base+0x3850>
   18a58:	sub	r6, r5, r6
   18a5c:	cmp	r6, #1
   18a60:	ble	18be0 <_start@@Base+0x3850>
   18a64:	ldrb	r3, [r4, #17]
   18a68:	cmp	r3, #46	; 0x2e
   18a6c:	bne	18be0 <_start@@Base+0x3850>
   18a70:	mov	r3, sl
   18a74:	mov	r2, r5
   18a78:	add	r1, r4, #18
   18a7c:	mov	r0, r8
   18a80:	add	sp, sp, #20
   18a84:	ldrd	r4, [sp]
   18a88:	ldrd	r6, [sp, #8]
   18a8c:	ldrd	r8, [sp, #16]
   18a90:	ldrd	sl, [sp, #24]
   18a94:	ldr	lr, [sp, #32]
   18a98:	add	sp, sp, #36	; 0x24
   18a9c:	b	16820 <_start@@Base+0x1490>
   18aa0:	add	r3, pc, #760	; 0x2f8
   18aa4:	ldrd	r2, [r3]
   18aa8:	cmp	r1, r3
   18aac:	cmpeq	r0, r2
   18ab0:	beq	18c00 <_start@@Base+0x3870>
   18ab4:	add	r3, pc, #748	; 0x2ec
   18ab8:	ldrd	r2, [r3]
   18abc:	cmp	r1, r3
   18ac0:	cmpeq	r0, r2
   18ac4:	bne	18be0 <_start@@Base+0x3850>
   18ac8:	mov	r1, r5
   18acc:	add	r0, r4, #8
   18ad0:	bl	15480 <_start@@Base+0xf0>
   18ad4:	add	r3, pc, #724	; 0x2d4
   18ad8:	ldrd	r2, [r3]
   18adc:	cmp	r1, r3
   18ae0:	cmpeq	r0, r2
   18ae4:	bne	18be0 <_start@@Base+0x3850>
   18ae8:	mov	r1, r5
   18aec:	add	r0, r4, #16
   18af0:	bl	15480 <_start@@Base+0xf0>
   18af4:	add	r3, pc, #700	; 0x2bc
   18af8:	ldrd	r2, [r3]
   18afc:	cmp	r1, r3
   18b00:	cmpeq	r0, r2
   18b04:	bne	18be0 <_start@@Base+0x3850>
   18b08:	mov	r1, r5
   18b0c:	add	r0, r4, #24
   18b10:	bl	15480 <_start@@Base+0xf0>
   18b14:	add	r3, pc, #676	; 0x2a4
   18b18:	ldrd	r2, [r3]
   18b1c:	cmp	r1, r3
   18b20:	cmpeq	r0, r2
   18b24:	bne	18be0 <_start@@Base+0x3850>
   18b28:	add	r6, r4, #32
   18b2c:	mov	r1, r5
   18b30:	mov	r0, r6
   18b34:	mov	r9, #0
   18b38:	bl	15480 <_start@@Base+0xf0>
   18b3c:	and	r3, r1, #-16777216	; 0xff000000
   18b40:	cmp	r3, #1694498816	; 0x65000000
   18b44:	cmpeq	r9, #0
   18b48:	bne	18be0 <_start@@Base+0x3850>
   18b4c:	sub	r6, r5, r6
   18b50:	cmp	r6, #1
   18b54:	ble	18be0 <_start@@Base+0x3850>
   18b58:	ldrb	r3, [r4, #33]	; 0x21
   18b5c:	cmp	r3, #46	; 0x2e
   18b60:	bne	18be0 <_start@@Base+0x3850>
   18b64:	add	r6, r4, #34	; 0x22
   18b68:	mov	r1, r5
   18b6c:	mov	r0, r6
   18b70:	bl	15480 <_start@@Base+0xf0>
   18b74:	bic	r3, r1, #255	; 0xff
   18b78:	strd	r0, [sp, #8]
   18b7c:	add	r1, pc, #580	; 0x244
   18b80:	ldrd	r0, [r1]
   18b84:	cmp	r3, r1
   18b88:	cmpeq	r9, r0
   18b8c:	beq	19104 <_start@@Base+0x3d74>
   18b90:	add	r3, pc, #568	; 0x238
   18b94:	ldrd	r2, [r3]
   18b98:	ldrd	r0, [sp, #8]
   18b9c:	cmp	r1, r3
   18ba0:	cmpeq	r0, r2
   18ba4:	bne	18bdc <_start@@Base+0x384c>
   18ba8:	add	r9, r4, #42	; 0x2a
   18bac:	mov	r1, r5
   18bb0:	mov	r0, r9
   18bb4:	bl	15480 <_start@@Base+0xf0>
   18bb8:	lsr	r3, r1, #16
   18bbc:	mov	r1, #0
   18bc0:	movt	r1, #24940	; 0x616c
   18bc4:	mov	r2, #0
   18bc8:	mov	r0, #0
   18bcc:	lsl	r3, r3, #16
   18bd0:	cmp	r3, r1
   18bd4:	cmpeq	r2, r0
   18bd8:	beq	1913c <_start@@Base+0x3dac>
   18bdc:	mov	r4, r6
   18be0:	mov	r0, r4
   18be4:	add	sp, sp, #20
   18be8:	ldrd	r4, [sp]
   18bec:	ldrd	r6, [sp, #8]
   18bf0:	ldrd	r8, [sp, #16]
   18bf4:	ldrd	sl, [sp, #24]
   18bf8:	add	sp, sp, #32
   18bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   18c00:	mov	r1, r5
   18c04:	add	r0, r4, #8
   18c08:	bl	15480 <_start@@Base+0xf0>
   18c0c:	add	r3, pc, #452	; 0x1c4
   18c10:	ldrd	r2, [r3]
   18c14:	cmp	r1, r3
   18c18:	cmpeq	r0, r2
   18c1c:	bhi	18cd8 <_start@@Base+0x3948>
   18c20:	add	r3, pc, #440	; 0x1b8
   18c24:	ldrd	r2, [r3]
   18c28:	cmp	r1, r3
   18c2c:	cmpeq	r0, r2
   18c30:	bls	18ec0 <_start@@Base+0x3b30>
   18c34:	add	r3, pc, #428	; 0x1ac
   18c38:	ldrd	r2, [r3]
   18c3c:	cmp	r1, r3
   18c40:	cmpeq	r0, r2
   18c44:	beq	18fdc <_start@@Base+0x3c4c>
   18c48:	add	r3, pc, #416	; 0x1a0
   18c4c:	ldrd	r2, [r3]
   18c50:	cmp	r1, r3
   18c54:	cmpeq	r0, r2
   18c58:	bne	18be0 <_start@@Base+0x3850>
   18c5c:	add	r9, r4, #16
   18c60:	mov	r1, r5
   18c64:	mov	r0, r9
   18c68:	mov	r7, #0
   18c6c:	movt	r7, #28527	; 0x6f6f
   18c70:	mov	r6, #0
   18c74:	bl	15480 <_start@@Base+0xf0>
   18c78:	lsr	r3, r1, #16
   18c7c:	mov	r2, #0
   18c80:	lsl	r3, r3, #16
   18c84:	cmp	r3, r7
   18c88:	cmpeq	r2, r6
   18c8c:	bne	18be0 <_start@@Base+0x3850>
   18c90:	sub	r9, r5, r9
   18c94:	cmp	r9, #2
   18c98:	ble	18be0 <_start@@Base+0x3850>
   18c9c:	ldrb	r3, [r4, #18]
   18ca0:	cmp	r3, #46	; 0x2e
   18ca4:	bne	18be0 <_start@@Base+0x3850>
   18ca8:	mov	r3, sl
   18cac:	mov	r2, r5
   18cb0:	add	r1, r4, #19
   18cb4:	mov	r0, r8
   18cb8:	add	sp, sp, #20
   18cbc:	ldrd	r4, [sp]
   18cc0:	ldrd	r6, [sp, #8]
   18cc4:	ldrd	r8, [sp, #16]
   18cc8:	ldrd	sl, [sp, #24]
   18ccc:	ldr	lr, [sp, #32]
   18cd0:	add	sp, sp, #36	; 0x24
   18cd4:	b	17ffc <_start@@Base+0x2c6c>
   18cd8:	add	r3, pc, #280	; 0x118
   18cdc:	ldrd	r2, [r3]
   18ce0:	cmp	r1, r3
   18ce4:	cmpeq	r0, r2
   18ce8:	beq	18e50 <_start@@Base+0x3ac0>
   18cec:	add	r3, pc, #268	; 0x10c
   18cf0:	ldrd	r2, [r3]
   18cf4:	cmp	r1, r3
   18cf8:	cmpeq	r0, r2
   18cfc:	bhi	18f50 <_start@@Base+0x3bc0>
   18d00:	add	r3, pc, #256	; 0x100
   18d04:	ldrd	r2, [r3]
   18d08:	cmp	r1, r3
   18d0c:	cmpeq	r0, r2
   18d10:	bne	18be0 <_start@@Base+0x3850>
   18d14:	add	r7, pc, #244	; 0xf4
   18d18:	ldrd	r6, [r7]
   18d1c:	add	r9, r4, #16
   18d20:	mov	r1, r5
   18d24:	mov	r0, r9
   18d28:	bl	15480 <_start@@Base+0xf0>
   18d2c:	bic	r2, r0, #255	; 0xff
   18d30:	cmp	r1, r7
   18d34:	cmpeq	r2, r6
   18d38:	bne	18be0 <_start@@Base+0x3850>
   18d3c:	sub	r9, r5, r9
   18d40:	cmp	r9, #7
   18d44:	ble	18be0 <_start@@Base+0x3850>
   18d48:	ldrb	r3, [r4, #23]
   18d4c:	cmp	r3, #46	; 0x2e
   18d50:	bne	18be0 <_start@@Base+0x3850>
   18d54:	mov	r3, sl
   18d58:	mov	r2, r5
   18d5c:	add	r1, r4, #24
   18d60:	mov	r0, r8
   18d64:	add	sp, sp, #20
   18d68:	ldrd	r4, [sp]
   18d6c:	ldrd	r6, [sp, #8]
   18d70:	ldrd	r8, [sp, #16]
   18d74:	ldrd	sl, [sp, #24]
   18d78:	ldr	lr, [sp, #32]
   18d7c:	add	sp, sp, #36	; 0x24
   18d80:	b	16f68 <_start@@Base+0x1bd8>
   18d84:	nop	{0}
   18d88:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   18d8c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   18d90:	cmnvs	r3, lr, lsr #18
   18d94:			; <UNDEFINED> instruction: 0x46616e74
   18d98:	cmnvs	r3, r5, ror #8
   18d9c:	cmnmi	r8, #-2147483620	; 0x8000001c
   18da0:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   18da4:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   18da8:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   18dac:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   18db0:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   18db4:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   18db8:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   18dbc:	cmnpl	r0, #-1073741800	; 0xc0000018
   18dc0:	cmnvs	ip, #100, 10	; 0x19000000
   18dc4:	svcvs	0x006d496e
   18dc8:	andeq	r0, r0, r0
   18dcc:	strbtmi	r6, [pc], -r0, lsl #30
   18dd0:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   18dd4:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   18dd8:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   18ddc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18de0:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   18de4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18de8:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   18dec:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18df0:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   18df4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18df8:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   18dfc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18e00:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   18e04:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18e08:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   18e0c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18e10:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   18e14:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   18e18:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   18e1c:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   18e20:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   18e24:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18e28:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   18e2c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18e30:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   18e34:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   18e38:	andeq	r0, r0, r0
   18e3c:	svcvs	0x006c6f72
   18e40:	rsbsvc	r7, r4, r5, ror #18
   18e44:	svcvs	0x0074656d
   18e48:	andeq	r0, r0, r0
   18e4c:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   18e50:	sub	r7, pc, #64	; 0x40
   18e54:	ldrd	r6, [r7]
   18e58:	add	r9, r4, #16
   18e5c:	mov	r1, r5
   18e60:	mov	r0, r9
   18e64:	bl	15480 <_start@@Base+0xf0>
   18e68:	bic	r2, r0, #255	; 0xff
   18e6c:	cmp	r1, r7
   18e70:	cmpeq	r2, r6
   18e74:	bne	18be0 <_start@@Base+0x3850>
   18e78:	sub	r9, r5, r9
   18e7c:	cmp	r9, #7
   18e80:	ble	18be0 <_start@@Base+0x3850>
   18e84:	ldrb	r3, [r4, #23]
   18e88:	cmp	r3, #46	; 0x2e
   18e8c:	bne	18be0 <_start@@Base+0x3850>
   18e90:	mov	r3, sl
   18e94:	mov	r2, r5
   18e98:	add	r1, r4, #24
   18e9c:	mov	r0, r8
   18ea0:	add	sp, sp, #20
   18ea4:	ldrd	r4, [sp]
   18ea8:	ldrd	r6, [sp, #8]
   18eac:	ldrd	r8, [sp, #16]
   18eb0:	ldrd	sl, [sp, #24]
   18eb4:	ldr	lr, [sp, #32]
   18eb8:	add	sp, sp, #36	; 0x24
   18ebc:	b	16dc8 <_start@@Base+0x1a38>
   18ec0:	sub	r3, pc, #168	; 0xa8
   18ec4:	ldrd	r2, [r3]
   18ec8:	cmp	r1, r3
   18ecc:	cmpeq	r0, r2
   18ed0:	bne	18be0 <_start@@Base+0x3850>
   18ed4:	add	r9, r4, #16
   18ed8:	mov	r1, r5
   18edc:	mov	r0, r9
   18ee0:	mov	r7, #0
   18ee4:	movt	r7, #28281	; 0x6e79
   18ee8:	mov	r6, #0
   18eec:	bl	15480 <_start@@Base+0xf0>
   18ef0:	lsr	r3, r1, #16
   18ef4:	mov	r2, #0
   18ef8:	lsl	r3, r3, #16
   18efc:	cmp	r3, r7
   18f00:	cmpeq	r2, r6
   18f04:	bne	18be0 <_start@@Base+0x3850>
   18f08:	sub	r9, r5, r9
   18f0c:	cmp	r9, #2
   18f10:	ble	18be0 <_start@@Base+0x3850>
   18f14:	ldrb	r3, [r4, #18]
   18f18:	cmp	r3, #46	; 0x2e
   18f1c:	bne	18be0 <_start@@Base+0x3850>
   18f20:	mov	r3, sl
   18f24:	mov	r2, r5
   18f28:	add	r1, r4, #19
   18f2c:	mov	r0, r8
   18f30:	add	sp, sp, #20
   18f34:	ldrd	r4, [sp]
   18f38:	ldrd	r6, [sp, #8]
   18f3c:	ldrd	r8, [sp, #16]
   18f40:	ldrd	sl, [sp, #24]
   18f44:	ldr	lr, [sp, #32]
   18f48:	add	sp, sp, #36	; 0x24
   18f4c:	b	16b40 <_start@@Base+0x17b0>
   18f50:	sub	r3, pc, #304	; 0x130
   18f54:	ldrd	r2, [r3]
   18f58:	cmp	r1, r3
   18f5c:	cmpeq	r0, r2
   18f60:	bne	18be0 <_start@@Base+0x3850>
   18f64:	add	r9, r4, #16
   18f68:	mov	r1, r5
   18f6c:	mov	r0, r9
   18f70:	bl	15480 <_start@@Base+0xf0>
   18f74:	bic	r2, r0, #255	; 0xff
   18f78:	mov	r3, r1
   18f7c:	strd	r0, [sp, #8]
   18f80:	sub	r1, pc, #344	; 0x158
   18f84:	ldrd	r0, [r1]
   18f88:	cmp	r3, r1
   18f8c:	cmpeq	r2, r0
   18f90:	bne	1904c <_start@@Base+0x3cbc>
   18f94:	sub	r9, r5, r9
   18f98:	cmp	r9, #7
   18f9c:	ble	18be0 <_start@@Base+0x3850>
   18fa0:	ldrb	r3, [r4, #23]
   18fa4:	cmp	r3, #46	; 0x2e
   18fa8:	bne	18be0 <_start@@Base+0x3850>
   18fac:	mov	r3, sl
   18fb0:	mov	r2, r5
   18fb4:	add	r1, r4, #24
   18fb8:	mov	r0, r8
   18fbc:	add	sp, sp, #20
   18fc0:	ldrd	r4, [sp]
   18fc4:	ldrd	r6, [sp, #8]
   18fc8:	ldrd	r8, [sp, #16]
   18fcc:	ldrd	sl, [sp, #24]
   18fd0:	ldr	lr, [sp, #32]
   18fd4:	add	sp, sp, #36	; 0x24
   18fd8:	b	17170 <_start@@Base+0x1de0>
   18fdc:	sub	r7, pc, #428	; 0x1ac
   18fe0:	ldrd	r6, [r7]
   18fe4:	add	r9, r4, #16
   18fe8:	mov	r1, r5
   18fec:	mov	r0, r9
   18ff0:	bl	15480 <_start@@Base+0xf0>
   18ff4:	mov	r2, #0
   18ff8:	cmp	r1, r7
   18ffc:	cmpeq	r2, r6
   19000:	bne	18be0 <_start@@Base+0x3850>
   19004:	sub	r9, r5, r9
   19008:	cmp	r9, #4
   1900c:	ble	18be0 <_start@@Base+0x3850>
   19010:	ldrb	r3, [r4, #20]
   19014:	cmp	r3, #46	; 0x2e
   19018:	bne	18be0 <_start@@Base+0x3850>
   1901c:	mov	r3, sl
   19020:	mov	r2, r5
   19024:	add	r1, r4, #21
   19028:	mov	r0, r8
   1902c:	add	sp, sp, #20
   19030:	ldrd	r4, [sp]
   19034:	ldrd	r6, [sp, #8]
   19038:	ldrd	r8, [sp, #16]
   1903c:	ldrd	sl, [sp, #24]
   19040:	ldr	lr, [sp, #32]
   19044:	add	sp, sp, #36	; 0x24
   19048:	b	172f0 <_start@@Base+0x1f60>
   1904c:	sub	r3, pc, #532	; 0x214
   19050:	ldrd	r2, [r3]
   19054:	ldrd	r0, [sp, #8]
   19058:	cmp	r1, r3
   1905c:	cmpeq	r0, r2
   19060:	bne	18be0 <_start@@Base+0x3850>
   19064:	add	r9, r4, #24
   19068:	mov	r1, r5
   1906c:	mov	r0, r9
   19070:	bl	15480 <_start@@Base+0xf0>
   19074:	bic	r3, r1, #255	; 0xff
   19078:	sub	r1, pc, #568	; 0x238
   1907c:	ldrd	r0, [r1]
   19080:	mov	r2, #0
   19084:	cmp	r3, r1
   19088:	cmpeq	r2, r0
   1908c:	bne	18be0 <_start@@Base+0x3850>
   19090:	sub	r9, r5, r9
   19094:	cmp	r9, #3
   19098:	ble	18be0 <_start@@Base+0x3850>
   1909c:	ldrb	r3, [r4, #27]
   190a0:	cmp	r3, #46	; 0x2e
   190a4:	bne	18be0 <_start@@Base+0x3850>
   190a8:	add	r6, r4, #28
   190ac:	mov	r1, r5
   190b0:	mov	r0, r6
   190b4:	mov	r9, #0
   190b8:	bl	15480 <_start@@Base+0xf0>
   190bc:	and	r3, r1, #-16777216	; 0xff000000
   190c0:	cmp	r3, #2013265920	; 0x78000000
   190c4:	cmpeq	r9, #0
   190c8:	bne	18bdc <_start@@Base+0x384c>
   190cc:	mov	r2, r5
   190d0:	mov	r0, r8
   190d4:	str	fp, [sp]
   190d8:	mov	r3, #1
   190dc:	mov	r1, r6
   190e0:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   190e4:	cmp	r6, r0
   190e8:	mov	r4, r0
   190ec:	beq	18be0 <_start@@Base+0x3850>
   190f0:	mov	r2, #0
   190f4:	mov	r3, #0
   190f8:	strd	r2, [r7]
   190fc:	str	r9, [sl]
   19100:	b	18be0 <_start@@Base+0x3850>
   19104:	mov	r2, r5
   19108:	mov	r0, r8
   1910c:	str	fp, [sp]
   19110:	mov	r3, #3
   19114:	mov	r1, r6
   19118:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   1911c:	cmp	r6, r0
   19120:	mov	r4, r0
   19124:	beq	18be0 <_start@@Base+0x3850>
   19128:	mov	r0, #17
   1912c:	mov	r1, #0
   19130:	strd	r0, [r7]
   19134:	str	r9, [sl]
   19138:	b	18be0 <_start@@Base+0x3850>
   1913c:	mov	r2, r5
   19140:	mov	r0, r8
   19144:	str	fp, [sp]
   19148:	mov	r3, #2
   1914c:	mov	r1, r9
   19150:	bl	2dd20 <flatcc_json_parser_match_constant@@Base>
   19154:	cmp	r9, r0
   19158:	mov	r4, r0
   1915c:	beq	18bdc <_start@@Base+0x384c>
   19160:	mov	r3, #0
   19164:	mov	r2, #0
   19168:	strd	r2, [r7]
   1916c:	mov	r3, #0
   19170:	str	r3, [sl]
   19174:	b	18be0 <_start@@Base+0x3850>
   19178:	cmp	r1, r2
   1917c:	beq	1918c <_start@@Base+0x3dfc>
   19180:	ldrb	ip, [r1]
   19184:	cmp	ip, #123	; 0x7b
   19188:	beq	1919c <_start@@Base+0x3e0c>
   1918c:	mov	ip, #0
   19190:	str	ip, [r3]
   19194:	mov	r3, #21
   19198:	b	2cff0 <flatcc_json_parser_set_error@@Base>
   1919c:	strd	r4, [sp, #-16]!
   191a0:	mov	r5, r0
   191a4:	add	r0, r1, #1
   191a8:	str	r6, [sp, #8]
   191ac:	mov	r6, r3
   191b0:	sub	r3, r2, r0
   191b4:	cmp	r3, #1
   191b8:	mov	r4, r2
   191bc:	str	lr, [sp, #12]
   191c0:	ble	191d4 <_start@@Base+0x3e44>
   191c4:	ldrb	r3, [r1, #1]
   191c8:	cmp	r3, #32
   191cc:	bhi	191e4 <_start@@Base+0x3e54>
   191d0:	beq	19210 <_start@@Base+0x3e80>
   191d4:	mov	r1, r0
   191d8:	mov	r2, r4
   191dc:	mov	r0, r5
   191e0:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   191e4:	cmp	r4, r0
   191e8:	beq	191f8 <_start@@Base+0x3e68>
   191ec:	ldrb	r3, [r0]
   191f0:	cmp	r3, #125	; 0x7d
   191f4:	beq	19224 <_start@@Base+0x3e94>
   191f8:	mov	r3, #1
   191fc:	ldrd	r4, [sp]
   19200:	str	r3, [r6]
   19204:	ldr	r6, [sp, #8]
   19208:	add	sp, sp, #12
   1920c:	pop	{pc}		; (ldr pc, [sp], #4)
   19210:	ldrb	r3, [r1, #2]
   19214:	cmp	r3, #32
   19218:	addhi	r0, r1, #2
   1921c:	bls	191d4 <_start@@Base+0x3e44>
   19220:	b	191e4 <_start@@Base+0x3e54>
   19224:	mov	r3, #0
   19228:	mov	r2, r4
   1922c:	ldr	lr, [sp, #12]
   19230:	add	r1, r0, #1
   19234:	mov	r0, r5
   19238:	ldrd	r4, [sp]
   1923c:	str	r3, [r6]
   19240:	ldr	r6, [sp, #8]
   19244:	add	sp, sp, #16
   19248:	b	17470 <_start@@Base+0x20e0>
   1924c:	strd	r4, [sp, #-16]!
   19250:	add	ip, r1, r3
   19254:	ldr	r4, [r0, #12]
   19258:	str	r6, [sp, #8]
   1925c:	str	lr, [sp, #12]
   19260:	ldrb	lr, [r1, r3]
   19264:	cmp	r4, #0
   19268:	beq	19308 <_start@@Base+0x3f78>
   1926c:	cmp	lr, #58	; 0x3a
   19270:	cmpne	lr, #32
   19274:	movls	lr, #0
   19278:	movhi	lr, #1
   1927c:	strls	lr, [r0, #12]
   19280:	bhi	192f4 <_start@@Base+0x3f64>
   19284:	sub	r3, r2, ip
   19288:	mov	r5, r2
   1928c:	cmp	r3, #1
   19290:	mov	r4, r0
   19294:	ble	192a8 <_start@@Base+0x3f18>
   19298:	ldrb	r3, [ip]
   1929c:	cmp	r3, #32
   192a0:	bhi	192bc <_start@@Base+0x3f2c>
   192a4:	beq	1931c <_start@@Base+0x3f8c>
   192a8:	mov	r1, ip
   192ac:	mov	r2, r5
   192b0:	mov	r0, r4
   192b4:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   192b8:	mov	ip, r0
   192bc:	cmp	r5, ip
   192c0:	mov	r2, r5
   192c4:	beq	192d4 <_start@@Base+0x3f44>
   192c8:	ldrb	r3, [ip]
   192cc:	cmp	r3, #58	; 0x3a
   192d0:	beq	19330 <_start@@Base+0x3fa0>
   192d4:	mov	r0, r4
   192d8:	mov	r1, ip
   192dc:	ldrd	r4, [sp]
   192e0:	mov	r3, #4
   192e4:	ldr	r6, [sp, #8]
   192e8:	ldr	lr, [sp, #12]
   192ec:	add	sp, sp, #16
   192f0:	b	2cff0 <flatcc_json_parser_set_error@@Base>
   192f4:	ldrd	r4, [sp]
   192f8:	mov	r0, r1
   192fc:	ldr	r6, [sp, #8]
   19300:	add	sp, sp, #12
   19304:	pop	{pc}		; (ldr pc, [sp], #4)
   19308:	cmp	lr, #34	; 0x22
   1930c:	bne	192f4 <_start@@Base+0x3f64>
   19310:	add	r3, r3, #1
   19314:	add	ip, r1, r3
   19318:	b	19284 <_start@@Base+0x3ef4>
   1931c:	ldrb	r3, [ip, #1]
   19320:	cmp	r3, #32
   19324:	addhi	ip, ip, #1
   19328:	bls	192a8 <_start@@Base+0x3f18>
   1932c:	b	192bc <_start@@Base+0x3f2c>
   19330:	mov	r0, r4
   19334:	add	r1, ip, #1
   19338:	ldrd	r4, [sp]
   1933c:	ldr	r6, [sp, #8]
   19340:	ldr	lr, [sp, #12]
   19344:	add	sp, sp, #16
   19348:	b	17470 <_start@@Base+0x20e0>
   1934c:	cmp	r1, r2
   19350:	beq	19360 <_start@@Base+0x3fd0>
   19354:	ldrb	ip, [r1]
   19358:	cmp	ip, #91	; 0x5b
   1935c:	beq	19370 <_start@@Base+0x3fe0>
   19360:	mov	ip, #0
   19364:	str	ip, [r3]
   19368:	mov	r3, #22
   1936c:	b	2cff0 <flatcc_json_parser_set_error@@Base>
   19370:	strd	r4, [sp, #-16]!
   19374:	mov	r5, r0
   19378:	add	r0, r1, #1
   1937c:	str	r6, [sp, #8]
   19380:	mov	r6, r3
   19384:	sub	r3, r2, r0
   19388:	cmp	r3, #1
   1938c:	mov	r4, r2
   19390:	str	lr, [sp, #12]
   19394:	ble	193a8 <_start@@Base+0x4018>
   19398:	ldrb	r3, [r1, #1]
   1939c:	cmp	r3, #32
   193a0:	bhi	193b8 <_start@@Base+0x4028>
   193a4:	beq	193e4 <_start@@Base+0x4054>
   193a8:	mov	r1, r0
   193ac:	mov	r2, r4
   193b0:	mov	r0, r5
   193b4:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   193b8:	cmp	r4, r0
   193bc:	beq	193cc <_start@@Base+0x403c>
   193c0:	ldrb	r3, [r0]
   193c4:	cmp	r3, #93	; 0x5d
   193c8:	beq	193f8 <_start@@Base+0x4068>
   193cc:	mov	r3, #1
   193d0:	ldrd	r4, [sp]
   193d4:	str	r3, [r6]
   193d8:	ldr	r6, [sp, #8]
   193dc:	add	sp, sp, #12
   193e0:	pop	{pc}		; (ldr pc, [sp], #4)
   193e4:	ldrb	r3, [r1, #2]
   193e8:	cmp	r3, #32
   193ec:	addhi	r0, r1, #2
   193f0:	bls	193a8 <_start@@Base+0x4018>
   193f4:	b	193b8 <_start@@Base+0x4028>
   193f8:	mov	r3, #0
   193fc:	mov	r2, r4
   19400:	ldr	lr, [sp, #12]
   19404:	add	r1, r0, #1
   19408:	mov	r0, r5
   1940c:	ldrd	r4, [sp]
   19410:	str	r3, [r6]
   19414:	ldr	r6, [sp, #8]
   19418:	add	sp, sp, #16
   1941c:	b	17470 <_start@@Base+0x20e0>
   19420:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19424:	cmp	r1, r2
   19428:	mov	r5, r2
   1942c:	strd	r6, [sp, #8]
   19430:	strd	r8, [sp, #16]
   19434:	mov	r8, r0
   19438:	strd	sl, [sp, #24]
   1943c:	str	lr, [sp, #32]
   19440:	sub	sp, sp, #36	; 0x24
   19444:	mov	lr, #0
   19448:	str	r3, [sp, #8]
   1944c:	ldr	r3, [sp, #72]	; 0x48
   19450:	str	lr, [r3]
   19454:	beq	19580 <_start@@Base+0x41f0>
   19458:	ldrb	r3, [r1]
   1945c:	cmp	r3, #34	; 0x22
   19460:	moveq	r2, #0
   19464:	addeq	r3, r1, #1
   19468:	streq	r2, [r0, #12]
   1946c:	beq	19594 <_start@@Base+0x4204>
   19470:	cmp	r3, #46	; 0x2e
   19474:	movne	r2, #1
   19478:	movne	r3, r1
   1947c:	strne	r2, [r0, #12]
   19480:	beq	1955c <_start@@Base+0x41cc>
   19484:	add	fp, sp, #16
   19488:	add	sl, sp, #20
   1948c:	add	r9, sp, #24
   19490:	ldr	r7, [sp, #8]
   19494:	mov	r6, r3
   19498:	mov	r1, r3
   1949c:	ldr	r4, [r7]
   194a0:	b	194bc <_start@@Base+0x412c>
   194a4:	cmp	r6, r0
   194a8:	mov	r6, r0
   194ac:	bne	19500 <_start@@Base+0x4170>
   194b0:	ldr	r4, [r7, #4]!
   194b4:	cmp	r4, #0
   194b8:	beq	19544 <_start@@Base+0x41b4>
   194bc:	mov	r3, fp
   194c0:	mov	r2, r5
   194c4:	stm	sp, {r9, sl}
   194c8:	mov	r0, r8
   194cc:	blx	r4
   194d0:	cmp	r5, r0
   194d4:	mov	r1, r0
   194d8:	bne	194a4 <_start@@Base+0x4114>
   194dc:	mov	r3, r0
   194e0:	mov	r0, r3
   194e4:	add	sp, sp, #36	; 0x24
   194e8:	ldrd	r4, [sp]
   194ec:	ldrd	r6, [sp, #8]
   194f0:	ldrd	r8, [sp, #16]
   194f4:	ldrd	sl, [sp, #24]
   194f8:	add	sp, sp, #32
   194fc:	pop	{pc}		; (ldr pc, [sp], #4)
   19500:	ldrd	r0, [sp, #24]
   19504:	str	r6, [sp, #12]
   19508:	bl	3e6ec <flatcc_json_printer_clear@@Base+0x5c8>
   1950c:	vmov	s14, r0
   19510:	ldr	r2, [sp, #16]
   19514:	ldr	r3, [sp, #12]
   19518:	cmp	r2, #0
   1951c:	ldr	r2, [sp, #72]	; 0x48
   19520:	vnegne.f32	s14, s14
   19524:	vldr	s15, [r2]
   19528:	ldr	r2, [sp, #20]
   1952c:	vadd.f32	s15, s15, s14
   19530:	cmp	r2, #0
   19534:	ldr	r2, [sp, #72]	; 0x48
   19538:	vstr	s15, [r2]
   1953c:	bne	19490 <_start@@Base+0x4100>
   19540:	b	194e0 <_start@@Base+0x4150>
   19544:	mov	r3, #23
   19548:	mov	r2, r5
   1954c:	mov	r0, r8
   19550:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   19554:	mov	r3, r0
   19558:	b	194e0 <_start@@Base+0x4150>
   1955c:	mov	r3, #5
   19560:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   19564:	ldr	r2, [r8, #12]
   19568:	mov	r3, r0
   1956c:	cmp	r2, #0
   19570:	beq	19594 <_start@@Base+0x4204>
   19574:	cmp	r5, r3
   19578:	bne	19484 <_start@@Base+0x40f4>
   1957c:	b	194e0 <_start@@Base+0x4150>
   19580:	ldr	r3, [r0, #12]
   19584:	cmp	r3, #0
   19588:	movne	r3, r1
   1958c:	bne	194e0 <_start@@Base+0x4150>
   19590:	mov	r3, r5
   19594:	sub	r2, r5, r3
   19598:	cmp	r2, #1
   1959c:	ble	195c0 <_start@@Base+0x4230>
   195a0:	ldrb	r2, [r3]
   195a4:	cmp	r2, #32
   195a8:	bhi	19574 <_start@@Base+0x41e4>
   195ac:	bne	195c0 <_start@@Base+0x4230>
   195b0:	ldrb	r2, [r3, #1]
   195b4:	cmp	r2, #32
   195b8:	addhi	r3, r3, #1
   195bc:	bhi	19574 <_start@@Base+0x41e4>
   195c0:	mov	r1, r3
   195c4:	mov	r2, r5
   195c8:	mov	r0, r8
   195cc:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   195d0:	mov	r3, r0
   195d4:	b	19574 <_start@@Base+0x41e4>
   195d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   195dc:	cmp	r1, r2
   195e0:	mov	r5, r2
   195e4:	strd	r6, [sp, #8]
   195e8:	mov	r6, #0
   195ec:	mov	r7, #0
   195f0:	strd	r8, [sp, #16]
   195f4:	mov	r8, r0
   195f8:	strd	sl, [sp, #24]
   195fc:	str	lr, [sp, #32]
   19600:	sub	sp, sp, #36	; 0x24
   19604:	str	r3, [sp, #8]
   19608:	ldr	r3, [sp, #72]	; 0x48
   1960c:	strd	r6, [r3]
   19610:	beq	1973c <_start@@Base+0x43ac>
   19614:	ldrb	r3, [r1]
   19618:	cmp	r3, #34	; 0x22
   1961c:	moveq	r2, #0
   19620:	addeq	r3, r1, #1
   19624:	streq	r2, [r0, #12]
   19628:	beq	19750 <_start@@Base+0x43c0>
   1962c:	cmp	r3, #46	; 0x2e
   19630:	movne	r2, #1
   19634:	movne	r3, r1
   19638:	strne	r2, [r0, #12]
   1963c:	beq	19718 <_start@@Base+0x4388>
   19640:	add	fp, sp, #16
   19644:	add	sl, sp, #20
   19648:	add	r9, sp, #24
   1964c:	ldr	r7, [sp, #8]
   19650:	mov	r6, r3
   19654:	mov	r1, r3
   19658:	ldr	r4, [r7]
   1965c:	b	19678 <_start@@Base+0x42e8>
   19660:	cmp	r6, r0
   19664:	mov	r6, r0
   19668:	bne	196bc <_start@@Base+0x432c>
   1966c:	ldr	r4, [r7, #4]!
   19670:	cmp	r4, #0
   19674:	beq	19700 <_start@@Base+0x4370>
   19678:	mov	r3, fp
   1967c:	mov	r2, r5
   19680:	stm	sp, {r9, sl}
   19684:	mov	r0, r8
   19688:	blx	r4
   1968c:	cmp	r5, r0
   19690:	mov	r1, r0
   19694:	bne	19660 <_start@@Base+0x42d0>
   19698:	mov	r3, r0
   1969c:	mov	r0, r3
   196a0:	add	sp, sp, #36	; 0x24
   196a4:	ldrd	r4, [sp]
   196a8:	ldrd	r6, [sp, #8]
   196ac:	ldrd	r8, [sp, #16]
   196b0:	ldrd	sl, [sp, #24]
   196b4:	add	sp, sp, #32
   196b8:	pop	{pc}		; (ldr pc, [sp], #4)
   196bc:	ldrd	r0, [sp, #24]
   196c0:	str	r6, [sp, #12]
   196c4:	bl	3e4b4 <flatcc_json_printer_clear@@Base+0x390>
   196c8:	vmov	d6, r0, r1
   196cc:	ldr	r2, [sp, #16]
   196d0:	ldr	r3, [sp, #12]
   196d4:	cmp	r2, #0
   196d8:	ldr	r2, [sp, #72]	; 0x48
   196dc:	vnegne.f64	d6, d6
   196e0:	vldr	d7, [r2]
   196e4:	ldr	r2, [sp, #20]
   196e8:	vadd.f64	d7, d7, d6
   196ec:	cmp	r2, #0
   196f0:	ldr	r2, [sp, #72]	; 0x48
   196f4:	vstr	d7, [r2]
   196f8:	bne	1964c <_start@@Base+0x42bc>
   196fc:	b	1969c <_start@@Base+0x430c>
   19700:	mov	r3, #23
   19704:	mov	r2, r5
   19708:	mov	r0, r8
   1970c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   19710:	mov	r3, r0
   19714:	b	1969c <_start@@Base+0x430c>
   19718:	mov	r3, #5
   1971c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   19720:	ldr	r2, [r8, #12]
   19724:	mov	r3, r0
   19728:	cmp	r2, #0
   1972c:	beq	19750 <_start@@Base+0x43c0>
   19730:	cmp	r5, r3
   19734:	bne	19640 <_start@@Base+0x42b0>
   19738:	b	1969c <_start@@Base+0x430c>
   1973c:	ldr	r3, [r0, #12]
   19740:	cmp	r3, #0
   19744:	movne	r3, r1
   19748:	bne	1969c <_start@@Base+0x430c>
   1974c:	mov	r3, r5
   19750:	sub	r2, r5, r3
   19754:	cmp	r2, #1
   19758:	ble	1977c <_start@@Base+0x43ec>
   1975c:	ldrb	r2, [r3]
   19760:	cmp	r2, #32
   19764:	bhi	19730 <_start@@Base+0x43a0>
   19768:	bne	1977c <_start@@Base+0x43ec>
   1976c:	ldrb	r2, [r3, #1]
   19770:	cmp	r2, #32
   19774:	addhi	r3, r3, #1
   19778:	bhi	19730 <_start@@Base+0x43a0>
   1977c:	mov	r1, r3
   19780:	mov	r2, r5
   19784:	mov	r0, r8
   19788:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1978c:	mov	r3, r0
   19790:	b	19730 <_start@@Base+0x43a0>
   19794:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19798:	mov	ip, #0
   1979c:	cmp	r1, r2
   197a0:	strd	r6, [sp, #8]
   197a4:	mov	r4, r1
   197a8:	mov	r6, r2
   197ac:	strd	r8, [sp, #16]
   197b0:	mov	r9, r0
   197b4:	strd	sl, [sp, #24]
   197b8:	str	lr, [sp, #32]
   197bc:	sub	sp, sp, #44	; 0x2c
   197c0:	str	r3, [sp, #16]
   197c4:	ldr	r3, [sp, #80]	; 0x50
   197c8:	strb	ip, [r3]
   197cc:	beq	19908 <_start@@Base+0x4578>
   197d0:	ldrb	r3, [r1]
   197d4:	cmp	r3, #34	; 0x22
   197d8:	addeq	r4, r1, #1
   197dc:	streq	ip, [r0, #12]
   197e0:	beq	19918 <_start@@Base+0x4588>
   197e4:	cmp	r3, #46	; 0x2e
   197e8:	movne	r3, #1
   197ec:	strne	r3, [r0, #12]
   197f0:	beq	198e4 <_start@@Base+0x4554>
   197f4:	mov	r3, #0
   197f8:	add	fp, sp, #24
   197fc:	add	sl, sp, #28
   19800:	str	r3, [sp, #12]
   19804:	add	r3, sp, #32
   19808:	str	r3, [sp, #20]
   1980c:	ldr	r8, [sp, #16]
   19810:	mov	r7, r4
   19814:	mov	r1, r4
   19818:	ldr	r4, [sp, #20]
   1981c:	ldr	r5, [r8]
   19820:	b	1983c <_start@@Base+0x44ac>
   19824:	cmp	r7, r0
   19828:	mov	r7, r0
   1982c:	bne	19880 <_start@@Base+0x44f0>
   19830:	ldr	r5, [r8, #4]!
   19834:	cmp	r5, #0
   19838:	beq	198cc <_start@@Base+0x453c>
   1983c:	mov	r3, fp
   19840:	mov	r2, r6
   19844:	stm	sp, {r4, sl}
   19848:	mov	r0, r9
   1984c:	blx	r5
   19850:	cmp	r6, r0
   19854:	mov	r1, r0
   19858:	bne	19824 <_start@@Base+0x4494>
   1985c:	mov	r4, r0
   19860:	mov	r0, r4
   19864:	add	sp, sp, #44	; 0x2c
   19868:	ldrd	r4, [sp]
   1986c:	ldrd	r6, [sp, #8]
   19870:	ldrd	r8, [sp, #16]
   19874:	ldrd	sl, [sp, #24]
   19878:	add	sp, sp, #32
   1987c:	pop	{pc}		; (ldr pc, [sp], #4)
   19880:	ldr	r3, [sp, #24]
   19884:	mov	r4, r0
   19888:	cmp	r3, #0
   1988c:	bne	1995c <_start@@Base+0x45cc>
   19890:	ldrd	r2, [sp, #32]
   19894:	orrs	r3, r2, r3
   19898:	movne	r3, #1
   1989c:	moveq	r3, #0
   198a0:	str	r3, [sp, #12]
   198a4:	ldr	r1, [sp, #12]
   198a8:	ldr	r3, [sp, #80]	; 0x50
   198ac:	ldr	r2, [sp, #28]
   198b0:	ldrb	r3, [r3]
   198b4:	cmp	r2, #0
   198b8:	ldr	r2, [sp, #80]	; 0x50
   198bc:	add	r3, r1, r3
   198c0:	strb	r3, [r2]
   198c4:	bne	1980c <_start@@Base+0x447c>
   198c8:	b	19860 <_start@@Base+0x44d0>
   198cc:	mov	r2, r6
   198d0:	mov	r0, r9
   198d4:	mov	r3, #23
   198d8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   198dc:	mov	r4, r0
   198e0:	b	19860 <_start@@Base+0x44d0>
   198e4:	mov	r3, #5
   198e8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   198ec:	ldr	r3, [r9, #12]
   198f0:	mov	r4, r0
   198f4:	cmp	r3, #0
   198f8:	beq	19918 <_start@@Base+0x4588>
   198fc:	cmp	r6, r4
   19900:	bne	197f4 <_start@@Base+0x4464>
   19904:	b	19860 <_start@@Base+0x44d0>
   19908:	ldr	r3, [r0, #12]
   1990c:	cmp	r3, #0
   19910:	bne	19860 <_start@@Base+0x44d0>
   19914:	mov	r4, r6
   19918:	sub	r3, r6, r4
   1991c:	cmp	r3, #1
   19920:	ble	19944 <_start@@Base+0x45b4>
   19924:	ldrb	r3, [r4]
   19928:	cmp	r3, #32
   1992c:	bhi	198fc <_start@@Base+0x456c>
   19930:	bne	19944 <_start@@Base+0x45b4>
   19934:	ldrb	r3, [r4, #1]
   19938:	cmp	r3, #32
   1993c:	addhi	r4, r4, #1
   19940:	bhi	198fc <_start@@Base+0x456c>
   19944:	mov	r1, r4
   19948:	mov	r2, r6
   1994c:	mov	r0, r9
   19950:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   19954:	mov	r4, r0
   19958:	b	198fc <_start@@Base+0x456c>
   1995c:	mov	r3, #8
   19960:	mov	r2, r6
   19964:	mov	r1, r4
   19968:	mov	r0, r9
   1996c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   19970:	cmp	r6, r0
   19974:	bne	198a4 <_start@@Base+0x4514>
   19978:	mov	r4, r6
   1997c:	b	19860 <_start@@Base+0x44d0>
   19980:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19984:	cmp	r1, r2
   19988:	mov	r4, r1
   1998c:	strd	r6, [sp, #8]
   19990:	mov	r6, r2
   19994:	strd	r8, [sp, #16]
   19998:	mov	r9, r0
   1999c:	strd	sl, [sp, #24]
   199a0:	mov	sl, #0
   199a4:	mov	fp, #0
   199a8:	str	lr, [sp, #32]
   199ac:	sub	sp, sp, #44	; 0x2c
   199b0:	str	r3, [sp, #16]
   199b4:	ldr	r3, [sp, #80]	; 0x50
   199b8:	strd	sl, [r3]
   199bc:	beq	19b10 <_start@@Base+0x4780>
   199c0:	ldrb	r3, [r1]
   199c4:	cmp	r3, #34	; 0x22
   199c8:	moveq	r3, #0
   199cc:	addeq	r4, r1, #1
   199d0:	streq	r3, [r0, #12]
   199d4:	beq	19b20 <_start@@Base+0x4790>
   199d8:	cmp	r3, #46	; 0x2e
   199dc:	movne	r3, #1
   199e0:	strne	r3, [r0, #12]
   199e4:	beq	19aec <_start@@Base+0x475c>
   199e8:	mov	r3, #0
   199ec:	add	fp, sp, #24
   199f0:	add	sl, sp, #28
   199f4:	str	r3, [sp, #8]
   199f8:	str	r3, [sp, #12]
   199fc:	add	r3, sp, #32
   19a00:	str	r3, [sp, #20]
   19a04:	ldr	r8, [sp, #16]
   19a08:	mov	r7, r4
   19a0c:	mov	r1, r4
   19a10:	ldr	r4, [sp, #20]
   19a14:	ldr	r5, [r8]
   19a18:	b	19a34 <_start@@Base+0x46a4>
   19a1c:	cmp	r7, r0
   19a20:	mov	r7, r0
   19a24:	bne	19a78 <_start@@Base+0x46e8>
   19a28:	ldr	r5, [r8, #4]!
   19a2c:	cmp	r5, #0
   19a30:	beq	19ad4 <_start@@Base+0x4744>
   19a34:	mov	r3, fp
   19a38:	mov	r2, r6
   19a3c:	stm	sp, {r4, sl}
   19a40:	mov	r0, r9
   19a44:	blx	r5
   19a48:	cmp	r6, r0
   19a4c:	mov	r1, r0
   19a50:	bne	19a1c <_start@@Base+0x468c>
   19a54:	mov	r4, r0
   19a58:	mov	r0, r4
   19a5c:	add	sp, sp, #44	; 0x2c
   19a60:	ldrd	r4, [sp]
   19a64:	ldrd	r6, [sp, #8]
   19a68:	ldrd	r8, [sp, #16]
   19a6c:	ldrd	sl, [sp, #24]
   19a70:	add	sp, sp, #32
   19a74:	pop	{pc}		; (ldr pc, [sp], #4)
   19a78:	ldr	r3, [sp, #24]
   19a7c:	mov	r4, r0
   19a80:	cmp	r3, #0
   19a84:	bne	19b64 <_start@@Base+0x47d4>
   19a88:	ldr	r3, [sp, #32]
   19a8c:	str	r3, [sp, #8]
   19a90:	ldr	r3, [sp, #36]	; 0x24
   19a94:	str	r3, [sp, #12]
   19a98:	ldr	r0, [sp, #8]
   19a9c:	ldr	r3, [sp, #80]	; 0x50
   19aa0:	ldr	r1, [sp, #28]
   19aa4:	ldr	r2, [sp, #80]	; 0x50
   19aa8:	ldr	r3, [r3]
   19aac:	ldr	r2, [r2, #4]
   19ab0:	adds	r3, r3, r0
   19ab4:	ldr	r0, [sp, #12]
   19ab8:	adc	r2, r2, r0
   19abc:	ldr	r0, [sp, #80]	; 0x50
   19ac0:	cmp	r1, #0
   19ac4:	str	r3, [r0]
   19ac8:	str	r2, [r0, #4]
   19acc:	bne	19a04 <_start@@Base+0x4674>
   19ad0:	b	19a58 <_start@@Base+0x46c8>
   19ad4:	mov	r2, r6
   19ad8:	mov	r0, r9
   19adc:	mov	r3, #23
   19ae0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   19ae4:	mov	r4, r0
   19ae8:	b	19a58 <_start@@Base+0x46c8>
   19aec:	mov	r3, #5
   19af0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   19af4:	ldr	r3, [r9, #12]
   19af8:	mov	r4, r0
   19afc:	cmp	r3, #0
   19b00:	beq	19b20 <_start@@Base+0x4790>
   19b04:	cmp	r6, r4
   19b08:	bne	199e8 <_start@@Base+0x4658>
   19b0c:	b	19a58 <_start@@Base+0x46c8>
   19b10:	ldr	r3, [r0, #12]
   19b14:	cmp	r3, #0
   19b18:	bne	19a58 <_start@@Base+0x46c8>
   19b1c:	mov	r4, r6
   19b20:	sub	r3, r6, r4
   19b24:	cmp	r3, #1
   19b28:	ble	19b4c <_start@@Base+0x47bc>
   19b2c:	ldrb	r3, [r4]
   19b30:	cmp	r3, #32
   19b34:	bhi	19b04 <_start@@Base+0x4774>
   19b38:	bne	19b4c <_start@@Base+0x47bc>
   19b3c:	ldrb	r3, [r4, #1]
   19b40:	cmp	r3, #32
   19b44:	addhi	r4, r4, #1
   19b48:	bhi	19b04 <_start@@Base+0x4774>
   19b4c:	mov	r1, r4
   19b50:	mov	r2, r6
   19b54:	mov	r0, r9
   19b58:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   19b5c:	mov	r4, r0
   19b60:	b	19b04 <_start@@Base+0x4774>
   19b64:	mov	r3, #8
   19b68:	mov	r2, r6
   19b6c:	mov	r1, r4
   19b70:	mov	r0, r9
   19b74:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   19b78:	cmp	r6, r0
   19b7c:	bne	19a98 <_start@@Base+0x4708>
   19b80:	mov	r4, r6
   19b84:	b	19a58 <_start@@Base+0x46c8>
   19b88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19b8c:	mov	ip, #0
   19b90:	cmp	r1, r2
   19b94:	strd	r6, [sp, #8]
   19b98:	mov	r4, r1
   19b9c:	mov	r6, r2
   19ba0:	strd	r8, [sp, #16]
   19ba4:	mov	r9, r0
   19ba8:	strd	sl, [sp, #24]
   19bac:	str	lr, [sp, #32]
   19bb0:	sub	sp, sp, #44	; 0x2c
   19bb4:	str	r3, [sp, #12]
   19bb8:	ldr	r3, [sp, #80]	; 0x50
   19bbc:	strb	ip, [r3]
   19bc0:	beq	19d00 <_start@@Base+0x4970>
   19bc4:	ldrb	r3, [r1]
   19bc8:	cmp	r3, #34	; 0x22
   19bcc:	addeq	r4, r1, #1
   19bd0:	streq	ip, [r0, #12]
   19bd4:	beq	19d10 <_start@@Base+0x4980>
   19bd8:	cmp	r3, #46	; 0x2e
   19bdc:	movne	r3, #1
   19be0:	strne	r3, [r0, #12]
   19be4:	beq	19cdc <_start@@Base+0x494c>
   19be8:	mov	r3, #0
   19bec:	add	fp, sp, #24
   19bf0:	add	sl, sp, #28
   19bf4:	str	r3, [sp, #16]
   19bf8:	add	r3, sp, #32
   19bfc:	str	r3, [sp, #20]
   19c00:	ldr	r8, [sp, #12]
   19c04:	mov	r7, r4
   19c08:	mov	r1, r4
   19c0c:	ldr	r4, [sp, #20]
   19c10:	ldr	r5, [r8]
   19c14:	b	19c30 <_start@@Base+0x48a0>
   19c18:	cmp	r7, r0
   19c1c:	mov	r7, r0
   19c20:	bne	19c74 <_start@@Base+0x48e4>
   19c24:	ldr	r5, [r8, #4]!
   19c28:	cmp	r5, #0
   19c2c:	beq	19cc4 <_start@@Base+0x4934>
   19c30:	mov	r3, fp
   19c34:	mov	r2, r6
   19c38:	stm	sp, {r4, sl}
   19c3c:	mov	r0, r9
   19c40:	blx	r5
   19c44:	cmp	r6, r0
   19c48:	mov	r1, r0
   19c4c:	bne	19c18 <_start@@Base+0x4888>
   19c50:	mov	r4, r0
   19c54:	mov	r0, r4
   19c58:	add	sp, sp, #44	; 0x2c
   19c5c:	ldrd	r4, [sp]
   19c60:	ldrd	r6, [sp, #8]
   19c64:	ldrd	r8, [sp, #16]
   19c68:	ldrd	sl, [sp, #24]
   19c6c:	add	sp, sp, #32
   19c70:	pop	{pc}		; (ldr pc, [sp], #4)
   19c74:	ldr	r3, [sp, #24]
   19c78:	mov	r4, r0
   19c7c:	cmp	r3, #0
   19c80:	bne	19d54 <_start@@Base+0x49c4>
   19c84:	ldrd	r2, [sp, #32]
   19c88:	cmp	r3, #0
   19c8c:	cmpeq	r2, #255	; 0xff
   19c90:	uxtbls	r3, r2
   19c94:	strls	r3, [sp, #16]
   19c98:	bhi	19d78 <_start@@Base+0x49e8>
   19c9c:	ldr	r1, [sp, #16]
   19ca0:	ldr	r3, [sp, #80]	; 0x50
   19ca4:	ldr	r2, [sp, #28]
   19ca8:	ldrb	r3, [r3]
   19cac:	cmp	r2, #0
   19cb0:	ldr	r2, [sp, #80]	; 0x50
   19cb4:	add	r3, r1, r3
   19cb8:	strb	r3, [r2]
   19cbc:	bne	19c00 <_start@@Base+0x4870>
   19cc0:	b	19c54 <_start@@Base+0x48c4>
   19cc4:	mov	r2, r6
   19cc8:	mov	r0, r9
   19ccc:	mov	r3, #23
   19cd0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   19cd4:	mov	r4, r0
   19cd8:	b	19c54 <_start@@Base+0x48c4>
   19cdc:	mov	r3, #5
   19ce0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   19ce4:	ldr	r3, [r9, #12]
   19ce8:	mov	r4, r0
   19cec:	cmp	r3, #0
   19cf0:	beq	19d10 <_start@@Base+0x4980>
   19cf4:	cmp	r6, r4
   19cf8:	bne	19be8 <_start@@Base+0x4858>
   19cfc:	b	19c54 <_start@@Base+0x48c4>
   19d00:	ldr	r3, [r0, #12]
   19d04:	cmp	r3, #0
   19d08:	bne	19c54 <_start@@Base+0x48c4>
   19d0c:	mov	r4, r6
   19d10:	sub	r3, r6, r4
   19d14:	cmp	r3, #1
   19d18:	ble	19d3c <_start@@Base+0x49ac>
   19d1c:	ldrb	r3, [r4]
   19d20:	cmp	r3, #32
   19d24:	bhi	19cf4 <_start@@Base+0x4964>
   19d28:	bne	19d3c <_start@@Base+0x49ac>
   19d2c:	ldrb	r3, [r4, #1]
   19d30:	cmp	r3, #32
   19d34:	addhi	r4, r4, #1
   19d38:	bhi	19cf4 <_start@@Base+0x4964>
   19d3c:	mov	r1, r4
   19d40:	mov	r2, r6
   19d44:	mov	r0, r9
   19d48:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   19d4c:	mov	r4, r0
   19d50:	b	19cf4 <_start@@Base+0x4964>
   19d54:	mov	r3, #8
   19d58:	mov	r2, r6
   19d5c:	mov	r1, r4
   19d60:	mov	r0, r9
   19d64:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   19d68:	cmp	r6, r0
   19d6c:	bne	19c9c <_start@@Base+0x490c>
   19d70:	mov	r4, r6
   19d74:	b	19c54 <_start@@Base+0x48c4>
   19d78:	mov	r3, #7
   19d7c:	mov	r2, r6
   19d80:	mov	r1, r4
   19d84:	mov	r0, r9
   19d88:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   19d8c:	b	19d68 <_start@@Base+0x49d8>
   19d90:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19d94:	mov	ip, #0
   19d98:	cmp	r1, r2
   19d9c:	strd	r6, [sp, #8]
   19da0:	mov	r4, r1
   19da4:	mov	r6, r2
   19da8:	strd	r8, [sp, #16]
   19dac:	mov	r9, r0
   19db0:	strd	sl, [sp, #24]
   19db4:	str	lr, [sp, #32]
   19db8:	sub	sp, sp, #44	; 0x2c
   19dbc:	str	r3, [sp, #12]
   19dc0:	ldr	r3, [sp, #80]	; 0x50
   19dc4:	strh	ip, [r3]
   19dc8:	beq	19f50 <_start@@Base+0x4bc0>
   19dcc:	ldrb	r3, [r1]
   19dd0:	cmp	r3, #34	; 0x22
   19dd4:	addeq	r4, r1, #1
   19dd8:	streq	ip, [r0, #12]
   19ddc:	beq	19f60 <_start@@Base+0x4bd0>
   19de0:	cmp	r3, #46	; 0x2e
   19de4:	movne	r3, #1
   19de8:	strne	r3, [r0, #12]
   19dec:	beq	19f2c <_start@@Base+0x4b9c>
   19df0:	mov	r3, #0
   19df4:	add	fp, sp, #24
   19df8:	add	sl, sp, #28
   19dfc:	str	r3, [sp, #20]
   19e00:	add	r3, sp, #32
   19e04:	str	r3, [sp, #16]
   19e08:	ldr	r8, [sp, #12]
   19e0c:	mov	r7, r4
   19e10:	mov	r1, r4
   19e14:	ldr	r4, [sp, #16]
   19e18:	ldr	r5, [r8]
   19e1c:	b	19e38 <_start@@Base+0x4aa8>
   19e20:	cmp	r7, r0
   19e24:	mov	r7, r0
   19e28:	bne	19e7c <_start@@Base+0x4aec>
   19e2c:	ldr	r5, [r8, #4]!
   19e30:	cmp	r5, #0
   19e34:	beq	19ed0 <_start@@Base+0x4b40>
   19e38:	mov	r3, fp
   19e3c:	mov	r2, r6
   19e40:	stm	sp, {r4, sl}
   19e44:	mov	r0, r9
   19e48:	blx	r5
   19e4c:	cmp	r6, r0
   19e50:	mov	r1, r0
   19e54:	bne	19e20 <_start@@Base+0x4a90>
   19e58:	mov	r4, r0
   19e5c:	mov	r0, r4
   19e60:	add	sp, sp, #44	; 0x2c
   19e64:	ldrd	r4, [sp]
   19e68:	ldrd	r6, [sp, #8]
   19e6c:	ldrd	r8, [sp, #16]
   19e70:	ldrd	sl, [sp, #24]
   19e74:	add	sp, sp, #32
   19e78:	pop	{pc}		; (ldr pc, [sp], #4)
   19e7c:	ldr	r1, [sp, #24]
   19e80:	mov	r4, r0
   19e84:	ldrd	r2, [sp, #32]
   19e88:	cmp	r1, #0
   19e8c:	beq	19ee8 <_start@@Base+0x4b58>
   19e90:	cmp	r3, #0
   19e94:	cmpeq	r2, #32768	; 0x8000
   19e98:	bhi	19fa4 <_start@@Base+0x4c14>
   19e9c:	rsb	r2, r2, #0
   19ea0:	uxth	r2, r2
   19ea4:	sxth	r3, r2
   19ea8:	str	r3, [sp, #20]
   19eac:	ldr	r3, [sp, #80]	; 0x50
   19eb0:	ldrh	r1, [r3]
   19eb4:	ldr	r3, [sp, #28]
   19eb8:	add	r2, r2, r1
   19ebc:	cmp	r3, #0
   19ec0:	ldr	r3, [sp, #80]	; 0x50
   19ec4:	strh	r2, [r3]
   19ec8:	bne	19e08 <_start@@Base+0x4a78>
   19ecc:	b	19e5c <_start@@Base+0x4acc>
   19ed0:	mov	r2, r6
   19ed4:	mov	r0, r9
   19ed8:	mov	r3, #23
   19edc:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   19ee0:	mov	r4, r0
   19ee4:	b	19e5c <_start@@Base+0x4acc>
   19ee8:	mov	r1, #0
   19eec:	movw	r0, #32767	; 0x7fff
   19ef0:	cmp	r3, r1
   19ef4:	cmpeq	r2, r0
   19ef8:	sxthls	r1, r2
   19efc:	uxthls	r2, r2
   19f00:	strls	r1, [sp, #20]
   19f04:	bls	19eac <_start@@Base+0x4b1c>
   19f08:	mov	r3, #7
   19f0c:	mov	r2, r6
   19f10:	mov	r1, r4
   19f14:	mov	r0, r9
   19f18:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   19f1c:	cmp	r6, r0
   19f20:	beq	19fbc <_start@@Base+0x4c2c>
   19f24:	ldrh	r2, [sp, #20]
   19f28:	b	19eac <_start@@Base+0x4b1c>
   19f2c:	mov	r3, #5
   19f30:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   19f34:	ldr	r3, [r9, #12]
   19f38:	mov	r4, r0
   19f3c:	cmp	r3, #0
   19f40:	beq	19f60 <_start@@Base+0x4bd0>
   19f44:	cmp	r6, r4
   19f48:	bne	19df0 <_start@@Base+0x4a60>
   19f4c:	b	19e5c <_start@@Base+0x4acc>
   19f50:	ldr	r3, [r0, #12]
   19f54:	cmp	r3, #0
   19f58:	bne	19e5c <_start@@Base+0x4acc>
   19f5c:	mov	r4, r6
   19f60:	sub	r3, r6, r4
   19f64:	cmp	r3, #1
   19f68:	ble	19f8c <_start@@Base+0x4bfc>
   19f6c:	ldrb	r3, [r4]
   19f70:	cmp	r3, #32
   19f74:	bhi	19f44 <_start@@Base+0x4bb4>
   19f78:	bne	19f8c <_start@@Base+0x4bfc>
   19f7c:	ldrb	r3, [r4, #1]
   19f80:	cmp	r3, #32
   19f84:	addhi	r4, r4, #1
   19f88:	bhi	19f44 <_start@@Base+0x4bb4>
   19f8c:	mov	r1, r4
   19f90:	mov	r2, r6
   19f94:	mov	r0, r9
   19f98:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   19f9c:	mov	r4, r0
   19fa0:	b	19f44 <_start@@Base+0x4bb4>
   19fa4:	mov	r3, #8
   19fa8:	mov	r2, r6
   19fac:	mov	r1, r4
   19fb0:	mov	r0, r9
   19fb4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   19fb8:	b	19f1c <_start@@Base+0x4b8c>
   19fbc:	mov	r4, r6
   19fc0:	b	19e5c <_start@@Base+0x4acc>
   19fc4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19fc8:	mov	ip, #0
   19fcc:	cmp	r1, r2
   19fd0:	strd	r6, [sp, #8]
   19fd4:	mov	r4, r1
   19fd8:	mov	r6, r2
   19fdc:	strd	r8, [sp, #16]
   19fe0:	mov	r9, r0
   19fe4:	strd	sl, [sp, #24]
   19fe8:	str	lr, [sp, #32]
   19fec:	sub	sp, sp, #44	; 0x2c
   19ff0:	str	r3, [sp, #16]
   19ff4:	ldr	r3, [sp, #80]	; 0x50
   19ff8:	str	ip, [r3]
   19ffc:	beq	1a178 <_start@@Base+0x4de8>
   1a000:	ldrb	r3, [r1]
   1a004:	cmp	r3, #34	; 0x22
   1a008:	addeq	r4, r1, #1
   1a00c:	streq	ip, [r0, #12]
   1a010:	beq	1a188 <_start@@Base+0x4df8>
   1a014:	cmp	r3, #46	; 0x2e
   1a018:	movne	r3, #1
   1a01c:	strne	r3, [r0, #12]
   1a020:	beq	1a154 <_start@@Base+0x4dc4>
   1a024:	mov	r3, #0
   1a028:	add	fp, sp, #24
   1a02c:	add	sl, sp, #28
   1a030:	str	r3, [sp, #12]
   1a034:	add	r3, sp, #32
   1a038:	str	r3, [sp, #20]
   1a03c:	ldr	r8, [sp, #16]
   1a040:	mov	r7, r4
   1a044:	mov	r1, r4
   1a048:	ldr	r4, [sp, #20]
   1a04c:	ldr	r5, [r8]
   1a050:	b	1a06c <_start@@Base+0x4cdc>
   1a054:	cmp	r7, r0
   1a058:	mov	r7, r0
   1a05c:	bne	1a0b0 <_start@@Base+0x4d20>
   1a060:	ldr	r5, [r8, #4]!
   1a064:	cmp	r5, #0
   1a068:	beq	1a100 <_start@@Base+0x4d70>
   1a06c:	mov	r3, fp
   1a070:	mov	r2, r6
   1a074:	stm	sp, {r4, sl}
   1a078:	mov	r0, r9
   1a07c:	blx	r5
   1a080:	cmp	r6, r0
   1a084:	mov	r1, r0
   1a088:	bne	1a054 <_start@@Base+0x4cc4>
   1a08c:	mov	r4, r0
   1a090:	mov	r0, r4
   1a094:	add	sp, sp, #44	; 0x2c
   1a098:	ldrd	r4, [sp]
   1a09c:	ldrd	r6, [sp, #8]
   1a0a0:	ldrd	r8, [sp, #16]
   1a0a4:	ldrd	sl, [sp, #24]
   1a0a8:	add	sp, sp, #32
   1a0ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0b0:	ldr	r1, [sp, #24]
   1a0b4:	mov	r4, r0
   1a0b8:	ldrd	r2, [sp, #32]
   1a0bc:	cmp	r1, #0
   1a0c0:	beq	1a118 <_start@@Base+0x4d88>
   1a0c4:	cmp	r3, #0
   1a0c8:	cmpeq	r2, #-2147483648	; 0x80000000
   1a0cc:	rsbls	r3, r2, #0
   1a0d0:	strls	r3, [sp, #12]
   1a0d4:	bhi	1a1cc <_start@@Base+0x4e3c>
   1a0d8:	ldr	r1, [sp, #12]
   1a0dc:	ldr	r3, [sp, #80]	; 0x50
   1a0e0:	ldr	r2, [sp, #28]
   1a0e4:	ldr	r3, [r3]
   1a0e8:	cmp	r2, #0
   1a0ec:	ldr	r2, [sp, #80]	; 0x50
   1a0f0:	add	r3, r3, r1
   1a0f4:	str	r3, [r2]
   1a0f8:	bne	1a03c <_start@@Base+0x4cac>
   1a0fc:	b	1a090 <_start@@Base+0x4d00>
   1a100:	mov	r2, r6
   1a104:	mov	r0, r9
   1a108:	mov	r3, #23
   1a10c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a110:	mov	r4, r0
   1a114:	b	1a090 <_start@@Base+0x4d00>
   1a118:	mov	r1, #0
   1a11c:	mvn	r0, #-2147483648	; 0x80000000
   1a120:	cmp	r3, r1
   1a124:	cmpeq	r2, r0
   1a128:	strls	r2, [sp, #12]
   1a12c:	bls	1a0d8 <_start@@Base+0x4d48>
   1a130:	mov	r3, #7
   1a134:	mov	r2, r6
   1a138:	mov	r1, r4
   1a13c:	mov	r0, r9
   1a140:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a144:	cmp	r6, r0
   1a148:	bne	1a0d8 <_start@@Base+0x4d48>
   1a14c:	mov	r4, r6
   1a150:	b	1a090 <_start@@Base+0x4d00>
   1a154:	mov	r3, #5
   1a158:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a15c:	ldr	r3, [r9, #12]
   1a160:	mov	r4, r0
   1a164:	cmp	r3, #0
   1a168:	beq	1a188 <_start@@Base+0x4df8>
   1a16c:	cmp	r6, r4
   1a170:	bne	1a024 <_start@@Base+0x4c94>
   1a174:	b	1a090 <_start@@Base+0x4d00>
   1a178:	ldr	r3, [r0, #12]
   1a17c:	cmp	r3, #0
   1a180:	bne	1a090 <_start@@Base+0x4d00>
   1a184:	mov	r4, r6
   1a188:	sub	r3, r6, r4
   1a18c:	cmp	r3, #1
   1a190:	ble	1a1b4 <_start@@Base+0x4e24>
   1a194:	ldrb	r3, [r4]
   1a198:	cmp	r3, #32
   1a19c:	bhi	1a16c <_start@@Base+0x4ddc>
   1a1a0:	bne	1a1b4 <_start@@Base+0x4e24>
   1a1a4:	ldrb	r3, [r4, #1]
   1a1a8:	cmp	r3, #32
   1a1ac:	addhi	r4, r4, #1
   1a1b0:	bhi	1a16c <_start@@Base+0x4ddc>
   1a1b4:	mov	r1, r4
   1a1b8:	mov	r2, r6
   1a1bc:	mov	r0, r9
   1a1c0:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1a1c4:	mov	r4, r0
   1a1c8:	b	1a16c <_start@@Base+0x4ddc>
   1a1cc:	mov	r3, #8
   1a1d0:	mov	r2, r6
   1a1d4:	mov	r1, r4
   1a1d8:	mov	r0, r9
   1a1dc:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a1e0:	b	1a144 <_start@@Base+0x4db4>
   1a1e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a1e8:	mov	ip, #0
   1a1ec:	cmp	r1, r2
   1a1f0:	strd	r6, [sp, #8]
   1a1f4:	mov	r4, r1
   1a1f8:	mov	r6, r2
   1a1fc:	strd	r8, [sp, #16]
   1a200:	mov	r9, r0
   1a204:	strd	sl, [sp, #24]
   1a208:	str	lr, [sp, #32]
   1a20c:	sub	sp, sp, #44	; 0x2c
   1a210:	str	r3, [sp, #12]
   1a214:	ldr	r3, [sp, #80]	; 0x50
   1a218:	strh	ip, [r3]
   1a21c:	beq	1a364 <_start@@Base+0x4fd4>
   1a220:	ldrb	r3, [r1]
   1a224:	cmp	r3, #34	; 0x22
   1a228:	addeq	r4, r1, #1
   1a22c:	streq	ip, [r0, #12]
   1a230:	beq	1a374 <_start@@Base+0x4fe4>
   1a234:	cmp	r3, #46	; 0x2e
   1a238:	movne	r3, #1
   1a23c:	strne	r3, [r0, #12]
   1a240:	beq	1a340 <_start@@Base+0x4fb0>
   1a244:	mov	r3, #0
   1a248:	add	fp, sp, #24
   1a24c:	add	sl, sp, #28
   1a250:	str	r3, [sp, #16]
   1a254:	add	r3, sp, #32
   1a258:	str	r3, [sp, #20]
   1a25c:	ldr	r8, [sp, #12]
   1a260:	mov	r7, r4
   1a264:	mov	r1, r4
   1a268:	ldr	r4, [sp, #20]
   1a26c:	ldr	r5, [r8]
   1a270:	b	1a28c <_start@@Base+0x4efc>
   1a274:	cmp	r7, r0
   1a278:	mov	r7, r0
   1a27c:	bne	1a2d0 <_start@@Base+0x4f40>
   1a280:	ldr	r5, [r8, #4]!
   1a284:	cmp	r5, #0
   1a288:	beq	1a328 <_start@@Base+0x4f98>
   1a28c:	mov	r3, fp
   1a290:	mov	r2, r6
   1a294:	stm	sp, {r4, sl}
   1a298:	mov	r0, r9
   1a29c:	blx	r5
   1a2a0:	cmp	r6, r0
   1a2a4:	mov	r1, r0
   1a2a8:	bne	1a274 <_start@@Base+0x4ee4>
   1a2ac:	mov	r4, r0
   1a2b0:	mov	r0, r4
   1a2b4:	add	sp, sp, #44	; 0x2c
   1a2b8:	ldrd	r4, [sp]
   1a2bc:	ldrd	r6, [sp, #8]
   1a2c0:	ldrd	r8, [sp, #16]
   1a2c4:	ldrd	sl, [sp, #24]
   1a2c8:	add	sp, sp, #32
   1a2cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2d0:	ldr	r3, [sp, #24]
   1a2d4:	mov	r4, r0
   1a2d8:	cmp	r3, #0
   1a2dc:	bne	1a3b8 <_start@@Base+0x5028>
   1a2e0:	ldrd	r2, [sp, #32]
   1a2e4:	mov	r1, #0
   1a2e8:	movw	r0, #65535	; 0xffff
   1a2ec:	cmp	r3, r1
   1a2f0:	cmpeq	r2, r0
   1a2f4:	uxthls	r3, r2
   1a2f8:	strls	r3, [sp, #16]
   1a2fc:	bhi	1a3dc <_start@@Base+0x504c>
   1a300:	ldr	r1, [sp, #16]
   1a304:	ldr	r3, [sp, #80]	; 0x50
   1a308:	ldr	r2, [sp, #28]
   1a30c:	ldrh	r3, [r3]
   1a310:	cmp	r2, #0
   1a314:	ldr	r2, [sp, #80]	; 0x50
   1a318:	add	r3, r1, r3
   1a31c:	strh	r3, [r2]
   1a320:	bne	1a25c <_start@@Base+0x4ecc>
   1a324:	b	1a2b0 <_start@@Base+0x4f20>
   1a328:	mov	r2, r6
   1a32c:	mov	r0, r9
   1a330:	mov	r3, #23
   1a334:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a338:	mov	r4, r0
   1a33c:	b	1a2b0 <_start@@Base+0x4f20>
   1a340:	mov	r3, #5
   1a344:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a348:	ldr	r3, [r9, #12]
   1a34c:	mov	r4, r0
   1a350:	cmp	r3, #0
   1a354:	beq	1a374 <_start@@Base+0x4fe4>
   1a358:	cmp	r6, r4
   1a35c:	bne	1a244 <_start@@Base+0x4eb4>
   1a360:	b	1a2b0 <_start@@Base+0x4f20>
   1a364:	ldr	r3, [r0, #12]
   1a368:	cmp	r3, #0
   1a36c:	bne	1a2b0 <_start@@Base+0x4f20>
   1a370:	mov	r4, r6
   1a374:	sub	r3, r6, r4
   1a378:	cmp	r3, #1
   1a37c:	ble	1a3a0 <_start@@Base+0x5010>
   1a380:	ldrb	r3, [r4]
   1a384:	cmp	r3, #32
   1a388:	bhi	1a358 <_start@@Base+0x4fc8>
   1a38c:	bne	1a3a0 <_start@@Base+0x5010>
   1a390:	ldrb	r3, [r4, #1]
   1a394:	cmp	r3, #32
   1a398:	addhi	r4, r4, #1
   1a39c:	bhi	1a358 <_start@@Base+0x4fc8>
   1a3a0:	mov	r1, r4
   1a3a4:	mov	r2, r6
   1a3a8:	mov	r0, r9
   1a3ac:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1a3b0:	mov	r4, r0
   1a3b4:	b	1a358 <_start@@Base+0x4fc8>
   1a3b8:	mov	r3, #8
   1a3bc:	mov	r2, r6
   1a3c0:	mov	r1, r4
   1a3c4:	mov	r0, r9
   1a3c8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a3cc:	cmp	r6, r0
   1a3d0:	bne	1a300 <_start@@Base+0x4f70>
   1a3d4:	mov	r4, r6
   1a3d8:	b	1a2b0 <_start@@Base+0x4f20>
   1a3dc:	mov	r3, #7
   1a3e0:	mov	r2, r6
   1a3e4:	mov	r1, r4
   1a3e8:	mov	r0, r9
   1a3ec:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a3f0:	b	1a3cc <_start@@Base+0x503c>
   1a3f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a3f8:	mov	ip, #0
   1a3fc:	cmp	r1, r2
   1a400:	strd	r6, [sp, #8]
   1a404:	mov	r4, r1
   1a408:	mov	r6, r2
   1a40c:	strd	r8, [sp, #16]
   1a410:	mov	r9, r0
   1a414:	strd	sl, [sp, #24]
   1a418:	str	lr, [sp, #32]
   1a41c:	sub	sp, sp, #44	; 0x2c
   1a420:	str	r3, [sp, #12]
   1a424:	ldr	r3, [sp, #80]	; 0x50
   1a428:	strb	ip, [r3]
   1a42c:	beq	1a5ac <_start@@Base+0x521c>
   1a430:	ldrb	r3, [r1]
   1a434:	cmp	r3, #34	; 0x22
   1a438:	addeq	r4, r1, #1
   1a43c:	streq	ip, [r0, #12]
   1a440:	beq	1a5bc <_start@@Base+0x522c>
   1a444:	cmp	r3, #46	; 0x2e
   1a448:	movne	r3, #1
   1a44c:	strne	r3, [r0, #12]
   1a450:	beq	1a588 <_start@@Base+0x51f8>
   1a454:	mov	r3, #0
   1a458:	add	fp, sp, #24
   1a45c:	add	sl, sp, #28
   1a460:	str	r3, [sp, #20]
   1a464:	add	r3, sp, #32
   1a468:	str	r3, [sp, #16]
   1a46c:	ldr	r8, [sp, #12]
   1a470:	mov	r7, r4
   1a474:	mov	r1, r4
   1a478:	ldr	r4, [sp, #16]
   1a47c:	ldr	r5, [r8]
   1a480:	b	1a49c <_start@@Base+0x510c>
   1a484:	cmp	r7, r0
   1a488:	mov	r7, r0
   1a48c:	bne	1a4e0 <_start@@Base+0x5150>
   1a490:	ldr	r5, [r8, #4]!
   1a494:	cmp	r5, #0
   1a498:	beq	1a534 <_start@@Base+0x51a4>
   1a49c:	mov	r3, fp
   1a4a0:	mov	r2, r6
   1a4a4:	stm	sp, {r4, sl}
   1a4a8:	mov	r0, r9
   1a4ac:	blx	r5
   1a4b0:	cmp	r6, r0
   1a4b4:	mov	r1, r0
   1a4b8:	bne	1a484 <_start@@Base+0x50f4>
   1a4bc:	mov	r4, r0
   1a4c0:	mov	r0, r4
   1a4c4:	add	sp, sp, #44	; 0x2c
   1a4c8:	ldrd	r4, [sp]
   1a4cc:	ldrd	r6, [sp, #8]
   1a4d0:	ldrd	r8, [sp, #16]
   1a4d4:	ldrd	sl, [sp, #24]
   1a4d8:	add	sp, sp, #32
   1a4dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4e0:	ldr	r1, [sp, #24]
   1a4e4:	mov	r4, r0
   1a4e8:	ldrd	r2, [sp, #32]
   1a4ec:	cmp	r1, #0
   1a4f0:	beq	1a54c <_start@@Base+0x51bc>
   1a4f4:	cmp	r3, #0
   1a4f8:	cmpeq	r2, #128	; 0x80
   1a4fc:	bhi	1a600 <_start@@Base+0x5270>
   1a500:	rsb	r2, r2, #0
   1a504:	uxtb	r2, r2
   1a508:	sxtb	r3, r2
   1a50c:	str	r3, [sp, #20]
   1a510:	ldr	r3, [sp, #80]	; 0x50
   1a514:	ldrb	r1, [r3]
   1a518:	ldr	r3, [sp, #28]
   1a51c:	add	r2, r2, r1
   1a520:	cmp	r3, #0
   1a524:	ldr	r3, [sp, #80]	; 0x50
   1a528:	strb	r2, [r3]
   1a52c:	bne	1a46c <_start@@Base+0x50dc>
   1a530:	b	1a4c0 <_start@@Base+0x5130>
   1a534:	mov	r2, r6
   1a538:	mov	r0, r9
   1a53c:	mov	r3, #23
   1a540:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a544:	mov	r4, r0
   1a548:	b	1a4c0 <_start@@Base+0x5130>
   1a54c:	cmp	r3, #0
   1a550:	cmpeq	r2, #127	; 0x7f
   1a554:	sxtbls	r1, r2
   1a558:	uxtbls	r2, r2
   1a55c:	strls	r1, [sp, #20]
   1a560:	bls	1a510 <_start@@Base+0x5180>
   1a564:	mov	r3, #7
   1a568:	mov	r2, r6
   1a56c:	mov	r1, r4
   1a570:	mov	r0, r9
   1a574:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a578:	cmp	r6, r0
   1a57c:	beq	1a618 <_start@@Base+0x5288>
   1a580:	ldrb	r2, [sp, #20]
   1a584:	b	1a510 <_start@@Base+0x5180>
   1a588:	mov	r3, #5
   1a58c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a590:	ldr	r3, [r9, #12]
   1a594:	mov	r4, r0
   1a598:	cmp	r3, #0
   1a59c:	beq	1a5bc <_start@@Base+0x522c>
   1a5a0:	cmp	r6, r4
   1a5a4:	bne	1a454 <_start@@Base+0x50c4>
   1a5a8:	b	1a4c0 <_start@@Base+0x5130>
   1a5ac:	ldr	r3, [r0, #12]
   1a5b0:	cmp	r3, #0
   1a5b4:	bne	1a4c0 <_start@@Base+0x5130>
   1a5b8:	mov	r4, r6
   1a5bc:	sub	r3, r6, r4
   1a5c0:	cmp	r3, #1
   1a5c4:	ble	1a5e8 <_start@@Base+0x5258>
   1a5c8:	ldrb	r3, [r4]
   1a5cc:	cmp	r3, #32
   1a5d0:	bhi	1a5a0 <_start@@Base+0x5210>
   1a5d4:	bne	1a5e8 <_start@@Base+0x5258>
   1a5d8:	ldrb	r3, [r4, #1]
   1a5dc:	cmp	r3, #32
   1a5e0:	addhi	r4, r4, #1
   1a5e4:	bhi	1a5a0 <_start@@Base+0x5210>
   1a5e8:	mov	r1, r4
   1a5ec:	mov	r2, r6
   1a5f0:	mov	r0, r9
   1a5f4:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1a5f8:	mov	r4, r0
   1a5fc:	b	1a5a0 <_start@@Base+0x5210>
   1a600:	mov	r3, #8
   1a604:	mov	r2, r6
   1a608:	mov	r1, r4
   1a60c:	mov	r0, r9
   1a610:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a614:	b	1a578 <_start@@Base+0x51e8>
   1a618:	mov	r4, r6
   1a61c:	b	1a4c0 <_start@@Base+0x5130>
   1a620:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a624:	mov	ip, #0
   1a628:	cmp	r1, r2
   1a62c:	strd	r6, [sp, #8]
   1a630:	mov	r4, r1
   1a634:	mov	r6, r2
   1a638:	strd	r8, [sp, #16]
   1a63c:	mov	r9, r0
   1a640:	strd	sl, [sp, #24]
   1a644:	str	lr, [sp, #32]
   1a648:	sub	sp, sp, #44	; 0x2c
   1a64c:	str	r3, [sp, #12]
   1a650:	ldr	r3, [sp, #80]	; 0x50
   1a654:	str	ip, [r3]
   1a658:	beq	1a79c <_start@@Base+0x540c>
   1a65c:	ldrb	r3, [r1]
   1a660:	cmp	r3, #34	; 0x22
   1a664:	addeq	r4, r1, #1
   1a668:	streq	ip, [r0, #12]
   1a66c:	beq	1a7ac <_start@@Base+0x541c>
   1a670:	cmp	r3, #46	; 0x2e
   1a674:	movne	r3, #1
   1a678:	strne	r3, [r0, #12]
   1a67c:	beq	1a778 <_start@@Base+0x53e8>
   1a680:	mov	r3, #0
   1a684:	add	fp, sp, #24
   1a688:	add	sl, sp, #28
   1a68c:	str	r3, [sp, #16]
   1a690:	add	r3, sp, #32
   1a694:	str	r3, [sp, #20]
   1a698:	ldr	r8, [sp, #12]
   1a69c:	mov	r7, r4
   1a6a0:	mov	r1, r4
   1a6a4:	ldr	r4, [sp, #20]
   1a6a8:	ldr	r5, [r8]
   1a6ac:	b	1a6c8 <_start@@Base+0x5338>
   1a6b0:	cmp	r7, r0
   1a6b4:	mov	r7, r0
   1a6b8:	bne	1a70c <_start@@Base+0x537c>
   1a6bc:	ldr	r5, [r8, #4]!
   1a6c0:	cmp	r5, #0
   1a6c4:	beq	1a760 <_start@@Base+0x53d0>
   1a6c8:	mov	r3, fp
   1a6cc:	mov	r2, r6
   1a6d0:	stm	sp, {r4, sl}
   1a6d4:	mov	r0, r9
   1a6d8:	blx	r5
   1a6dc:	cmp	r6, r0
   1a6e0:	mov	r1, r0
   1a6e4:	bne	1a6b0 <_start@@Base+0x5320>
   1a6e8:	mov	r4, r0
   1a6ec:	mov	r0, r4
   1a6f0:	add	sp, sp, #44	; 0x2c
   1a6f4:	ldrd	r4, [sp]
   1a6f8:	ldrd	r6, [sp, #8]
   1a6fc:	ldrd	r8, [sp, #16]
   1a700:	ldrd	sl, [sp, #24]
   1a704:	add	sp, sp, #32
   1a708:	pop	{pc}		; (ldr pc, [sp], #4)
   1a70c:	ldr	r3, [sp, #24]
   1a710:	mov	r4, r0
   1a714:	cmp	r3, #0
   1a718:	bne	1a7f0 <_start@@Base+0x5460>
   1a71c:	ldrd	r2, [sp, #32]
   1a720:	mov	r1, #0
   1a724:	mvn	r0, #0
   1a728:	cmp	r3, r1
   1a72c:	cmpeq	r2, r0
   1a730:	strls	r2, [sp, #16]
   1a734:	bhi	1a814 <_start@@Base+0x5484>
   1a738:	ldr	r1, [sp, #16]
   1a73c:	ldr	r3, [sp, #80]	; 0x50
   1a740:	ldr	r2, [sp, #28]
   1a744:	ldr	r3, [r3]
   1a748:	cmp	r2, #0
   1a74c:	ldr	r2, [sp, #80]	; 0x50
   1a750:	add	r3, r3, r1
   1a754:	str	r3, [r2]
   1a758:	bne	1a698 <_start@@Base+0x5308>
   1a75c:	b	1a6ec <_start@@Base+0x535c>
   1a760:	mov	r2, r6
   1a764:	mov	r0, r9
   1a768:	mov	r3, #23
   1a76c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a770:	mov	r4, r0
   1a774:	b	1a6ec <_start@@Base+0x535c>
   1a778:	mov	r3, #5
   1a77c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a780:	ldr	r3, [r9, #12]
   1a784:	mov	r4, r0
   1a788:	cmp	r3, #0
   1a78c:	beq	1a7ac <_start@@Base+0x541c>
   1a790:	cmp	r6, r4
   1a794:	bne	1a680 <_start@@Base+0x52f0>
   1a798:	b	1a6ec <_start@@Base+0x535c>
   1a79c:	ldr	r3, [r0, #12]
   1a7a0:	cmp	r3, #0
   1a7a4:	bne	1a6ec <_start@@Base+0x535c>
   1a7a8:	mov	r4, r6
   1a7ac:	sub	r3, r6, r4
   1a7b0:	cmp	r3, #1
   1a7b4:	ble	1a7d8 <_start@@Base+0x5448>
   1a7b8:	ldrb	r3, [r4]
   1a7bc:	cmp	r3, #32
   1a7c0:	bhi	1a790 <_start@@Base+0x5400>
   1a7c4:	bne	1a7d8 <_start@@Base+0x5448>
   1a7c8:	ldrb	r3, [r4, #1]
   1a7cc:	cmp	r3, #32
   1a7d0:	addhi	r4, r4, #1
   1a7d4:	bhi	1a790 <_start@@Base+0x5400>
   1a7d8:	mov	r1, r4
   1a7dc:	mov	r2, r6
   1a7e0:	mov	r0, r9
   1a7e4:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1a7e8:	mov	r4, r0
   1a7ec:	b	1a790 <_start@@Base+0x5400>
   1a7f0:	mov	r3, #8
   1a7f4:	mov	r2, r6
   1a7f8:	mov	r1, r4
   1a7fc:	mov	r0, r9
   1a800:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a804:	cmp	r6, r0
   1a808:	bne	1a738 <_start@@Base+0x53a8>
   1a80c:	mov	r4, r6
   1a810:	b	1a6ec <_start@@Base+0x535c>
   1a814:	mov	r3, #7
   1a818:	mov	r2, r6
   1a81c:	mov	r1, r4
   1a820:	mov	r0, r9
   1a824:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a828:	b	1a804 <_start@@Base+0x5474>
   1a82c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a830:	cmp	r1, r2
   1a834:	mov	r4, r1
   1a838:	strd	r6, [sp, #8]
   1a83c:	mov	r6, r2
   1a840:	strd	r8, [sp, #16]
   1a844:	mov	r9, r0
   1a848:	strd	sl, [sp, #24]
   1a84c:	mov	sl, #0
   1a850:	mov	fp, #0
   1a854:	str	lr, [sp, #32]
   1a858:	sub	sp, sp, #44	; 0x2c
   1a85c:	str	r3, [sp, #16]
   1a860:	ldr	r3, [sp, #80]	; 0x50
   1a864:	strd	sl, [r3]
   1a868:	beq	1a9f8 <_start@@Base+0x5668>
   1a86c:	ldrb	r3, [r1]
   1a870:	cmp	r3, #34	; 0x22
   1a874:	moveq	r3, #0
   1a878:	addeq	r4, r1, #1
   1a87c:	streq	r3, [r0, #12]
   1a880:	beq	1aa08 <_start@@Base+0x5678>
   1a884:	cmp	r3, #46	; 0x2e
   1a888:	movne	r3, #1
   1a88c:	strne	r3, [r0, #12]
   1a890:	beq	1a9d4 <_start@@Base+0x5644>
   1a894:	mov	r3, #0
   1a898:	add	fp, sp, #24
   1a89c:	add	sl, sp, #28
   1a8a0:	str	r3, [sp, #8]
   1a8a4:	str	r3, [sp, #12]
   1a8a8:	add	r3, sp, #32
   1a8ac:	str	r3, [sp, #20]
   1a8b0:	ldr	r8, [sp, #16]
   1a8b4:	mov	r7, r4
   1a8b8:	mov	r1, r4
   1a8bc:	ldr	r4, [sp, #20]
   1a8c0:	ldr	r5, [r8]
   1a8c4:	b	1a8e0 <_start@@Base+0x5550>
   1a8c8:	cmp	r7, r0
   1a8cc:	mov	r7, r0
   1a8d0:	bne	1a924 <_start@@Base+0x5594>
   1a8d4:	ldr	r5, [r8, #4]!
   1a8d8:	cmp	r5, #0
   1a8dc:	beq	1a98c <_start@@Base+0x55fc>
   1a8e0:	mov	r3, fp
   1a8e4:	mov	r2, r6
   1a8e8:	stm	sp, {r4, sl}
   1a8ec:	mov	r0, r9
   1a8f0:	blx	r5
   1a8f4:	cmp	r6, r0
   1a8f8:	mov	r1, r0
   1a8fc:	bne	1a8c8 <_start@@Base+0x5538>
   1a900:	mov	r4, r0
   1a904:	mov	r0, r4
   1a908:	add	sp, sp, #44	; 0x2c
   1a90c:	ldrd	r4, [sp]
   1a910:	ldrd	r6, [sp, #8]
   1a914:	ldrd	r8, [sp, #16]
   1a918:	ldrd	sl, [sp, #24]
   1a91c:	add	sp, sp, #32
   1a920:	pop	{pc}		; (ldr pc, [sp], #4)
   1a924:	ldr	r1, [sp, #24]
   1a928:	mov	r4, r0
   1a92c:	ldrd	r2, [sp, #32]
   1a930:	cmp	r1, #0
   1a934:	beq	1a9a4 <_start@@Base+0x5614>
   1a938:	cmp	r3, #-2147483648	; 0x80000000
   1a93c:	cmpeq	r2, #0
   1a940:	bhi	1aa4c <_start@@Base+0x56bc>
   1a944:	rsbs	r2, r2, #0
   1a948:	rsc	r3, r3, #0
   1a94c:	strd	r2, [sp, #8]
   1a950:	ldr	r0, [sp, #8]
   1a954:	ldr	r3, [sp, #80]	; 0x50
   1a958:	ldr	r1, [sp, #28]
   1a95c:	ldr	r2, [sp, #80]	; 0x50
   1a960:	ldr	r3, [r3]
   1a964:	ldr	r2, [r2, #4]
   1a968:	adds	r3, r3, r0
   1a96c:	ldr	r0, [sp, #12]
   1a970:	adc	r2, r2, r0
   1a974:	ldr	r0, [sp, #80]	; 0x50
   1a978:	cmp	r1, #0
   1a97c:	str	r3, [r0]
   1a980:	str	r2, [r0, #4]
   1a984:	bne	1a8b0 <_start@@Base+0x5520>
   1a988:	b	1a904 <_start@@Base+0x5574>
   1a98c:	mov	r2, r6
   1a990:	mov	r0, r9
   1a994:	mov	r3, #23
   1a998:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a99c:	mov	r4, r0
   1a9a0:	b	1a904 <_start@@Base+0x5574>
   1a9a4:	cmp	r2, #0
   1a9a8:	sbcs	r1, r3, #0
   1a9ac:	bge	1a94c <_start@@Base+0x55bc>
   1a9b0:	mov	r3, #7
   1a9b4:	mov	r2, r6
   1a9b8:	mov	r1, r4
   1a9bc:	mov	r0, r9
   1a9c0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a9c4:	cmp	r6, r0
   1a9c8:	bne	1a950 <_start@@Base+0x55c0>
   1a9cc:	mov	r4, r6
   1a9d0:	b	1a904 <_start@@Base+0x5574>
   1a9d4:	mov	r3, #5
   1a9d8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1a9dc:	ldr	r3, [r9, #12]
   1a9e0:	mov	r4, r0
   1a9e4:	cmp	r3, #0
   1a9e8:	beq	1aa08 <_start@@Base+0x5678>
   1a9ec:	cmp	r6, r4
   1a9f0:	bne	1a894 <_start@@Base+0x5504>
   1a9f4:	b	1a904 <_start@@Base+0x5574>
   1a9f8:	ldr	r3, [r0, #12]
   1a9fc:	cmp	r3, #0
   1aa00:	bne	1a904 <_start@@Base+0x5574>
   1aa04:	mov	r4, r6
   1aa08:	sub	r3, r6, r4
   1aa0c:	cmp	r3, #1
   1aa10:	ble	1aa34 <_start@@Base+0x56a4>
   1aa14:	ldrb	r3, [r4]
   1aa18:	cmp	r3, #32
   1aa1c:	bhi	1a9ec <_start@@Base+0x565c>
   1aa20:	bne	1aa34 <_start@@Base+0x56a4>
   1aa24:	ldrb	r3, [r4, #1]
   1aa28:	cmp	r3, #32
   1aa2c:	addhi	r4, r4, #1
   1aa30:	bhi	1a9ec <_start@@Base+0x565c>
   1aa34:	mov	r1, r4
   1aa38:	mov	r2, r6
   1aa3c:	mov	r0, r9
   1aa40:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1aa44:	mov	r4, r0
   1aa48:	b	1a9ec <_start@@Base+0x565c>
   1aa4c:	mov	r3, #8
   1aa50:	mov	r2, r6
   1aa54:	mov	r1, r4
   1aa58:	mov	r0, r9
   1aa5c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1aa60:	b	1a9c4 <_start@@Base+0x5634>
   1aa64:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aa68:	mov	r5, r0
   1aa6c:	mov	r4, r2
   1aa70:	ldr	r0, [r0]
   1aa74:	mov	r2, #4
   1aa78:	strd	r6, [sp, #8]
   1aa7c:	mov	r7, r3
   1aa80:	mov	r3, #0
   1aa84:	mov	r6, r1
   1aa88:	mov	r1, r2
   1aa8c:	strd	r8, [sp, #16]
   1aa90:	strd	sl, [sp, #24]
   1aa94:	str	lr, [sp, #32]
   1aa98:	sub	sp, sp, #52	; 0x34
   1aa9c:	str	r3, [r7]
   1aaa0:	bl	26acc <flatcc_builder_start_struct@@Base>
   1aaa4:	subs	r3, r0, #0
   1aaa8:	str	r3, [sp, #24]
   1aaac:	beq	1aafc <_start@@Base+0x576c>
   1aab0:	cmp	r6, r4
   1aab4:	beq	1aac4 <_start@@Base+0x5734>
   1aab8:	ldrb	r3, [r6]
   1aabc:	cmp	r3, #123	; 0x7b
   1aac0:	beq	1ab34 <_start@@Base+0x57a4>
   1aac4:	mov	r1, r6
   1aac8:	mov	r3, #21
   1aacc:	mov	r2, r4
   1aad0:	mov	r0, r5
   1aad4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1aad8:	mov	r8, r0
   1aadc:	cmp	r4, r8
   1aae0:	beq	1b174 <_start@@Base+0x5de4>
   1aae4:	ldr	r0, [r5]
   1aae8:	bl	26b90 <flatcc_builder_end_struct@@Base>
   1aaec:	cmp	r0, #0
   1aaf0:	str	r0, [r7]
   1aaf4:	moveq	r6, r8
   1aaf8:	bne	1ab14 <_start@@Base+0x5784>
   1aafc:	mov	r2, r4
   1ab00:	mov	r1, r6
   1ab04:	mov	r0, r5
   1ab08:	mov	r3, #33	; 0x21
   1ab0c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1ab10:	mov	r8, r0
   1ab14:	mov	r0, r8
   1ab18:	add	sp, sp, #52	; 0x34
   1ab1c:	ldrd	r4, [sp]
   1ab20:	ldrd	r6, [sp, #8]
   1ab24:	ldrd	r8, [sp, #16]
   1ab28:	ldrd	sl, [sp, #24]
   1ab2c:	add	sp, sp, #32
   1ab30:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab34:	add	r1, r6, #1
   1ab38:	sub	r3, r4, r1
   1ab3c:	cmp	r3, #1
   1ab40:	ble	1ab54 <_start@@Base+0x57c4>
   1ab44:	ldrb	r3, [r6, #1]
   1ab48:	cmp	r3, #32
   1ab4c:	bhi	1ab64 <_start@@Base+0x57d4>
   1ab50:	beq	1b12c <_start@@Base+0x5d9c>
   1ab54:	mov	r2, r4
   1ab58:	mov	r0, r5
   1ab5c:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1ab60:	mov	r1, r0
   1ab64:	cmp	r4, r1
   1ab68:	beq	1ab78 <_start@@Base+0x57e8>
   1ab6c:	ldrb	r3, [r1]
   1ab70:	cmp	r3, #125	; 0x7d
   1ab74:	beq	1b15c <_start@@Base+0x5dcc>
   1ab78:	mov	r3, #0
   1ab7c:	movt	r3, #65535	; 0xffff
   1ab80:	str	r3, [sp, #28]
   1ab84:	cmp	r4, r1
   1ab88:	beq	1abb4 <_start@@Base+0x5824>
   1ab8c:	ldrb	r3, [r1]
   1ab90:	cmp	r3, #34	; 0x22
   1ab94:	moveq	r3, #0
   1ab98:	addeq	r1, r1, #1
   1ab9c:	streq	r3, [r5, #12]
   1aba0:	beq	1abb4 <_start@@Base+0x5824>
   1aba4:	cmp	r3, #46	; 0x2e
   1aba8:	movne	r3, #1
   1abac:	strne	r3, [r5, #12]
   1abb0:	beq	1afdc <_start@@Base+0x5c4c>
   1abb4:	sub	r3, r4, r1
   1abb8:	cmp	r3, #8
   1abbc:	bhi	1abf0 <_start@@Base+0x5860>
   1abc0:	sub	r3, r3, #1
   1abc4:	cmp	r3, #7
   1abc8:	addls	pc, pc, r3, lsl #2
   1abcc:	b	1afb8 <_start@@Base+0x5c28>
   1abd0:	b	1aeb8 <_start@@Base+0x5b28>
   1abd4:	b	1aeac <_start@@Base+0x5b1c>
   1abd8:	b	1aea0 <_start@@Base+0x5b10>
   1abdc:	b	1ae94 <_start@@Base+0x5b04>
   1abe0:	b	1ae88 <_start@@Base+0x5af8>
   1abe4:	b	1ae7c <_start@@Base+0x5aec>
   1abe8:	b	1ae70 <_start@@Base+0x5ae0>
   1abec:	b	1abf0 <_start@@Base+0x5860>
   1abf0:	ldrb	sl, [r1, #7]
   1abf4:	mov	fp, #0
   1abf8:	mov	r3, fp
   1abfc:	ldrb	r8, [r1, #6]
   1ac00:	orr	r2, sl, r8, lsl #8
   1ac04:	ldrb	r8, [r1, #5]
   1ac08:	orr	r2, r2, r8, lsl #16
   1ac0c:	ldrb	r8, [r1, #4]
   1ac10:	orr	r2, r2, r8, lsl #24
   1ac14:	ldrb	sl, [r1, #3]
   1ac18:	orr	r3, r3, sl
   1ac1c:	ldrb	sl, [r1, #2]
   1ac20:	orr	sl, r3, sl, lsl #8
   1ac24:	ldrb	r8, [r1, #1]
   1ac28:	orr	sl, sl, r8, lsl #16
   1ac2c:	str	r2, [sp, #8]
   1ac30:	ldrb	r2, [r1]
   1ac34:	add	r9, pc, #964	; 0x3c4
   1ac38:	ldrd	r8, [r9]
   1ac3c:	orr	r3, sl, r2, lsl #24
   1ac40:	str	r3, [sp, #12]
   1ac44:	ldrd	r2, [sp, #8]
   1ac48:	cmp	r3, r9
   1ac4c:	cmpeq	r2, r8
   1ac50:	bne	1afb8 <_start@@Base+0x5c28>
   1ac54:	add	r6, r1, #8
   1ac58:	sub	r3, r4, r6
   1ac5c:	cmp	r3, #8
   1ac60:	bhi	1ac90 <_start@@Base+0x5900>
   1ac64:	sub	r2, r3, #2
   1ac68:	cmp	r2, #6
   1ac6c:	addls	pc, pc, r2, lsl #2
   1ac70:	b	1af8c <_start@@Base+0x5bfc>
   1ac74:	b	1aecc <_start@@Base+0x5b3c>
   1ac78:	b	1aec4 <_start@@Base+0x5b34>
   1ac7c:	b	1aed4 <_start@@Base+0x5b44>
   1ac80:	b	1ae68 <_start@@Base+0x5ad8>
   1ac84:	b	1ae68 <_start@@Base+0x5ad8>
   1ac88:	b	1ac90 <_start@@Base+0x5900>
   1ac8c:	b	1ac90 <_start@@Base+0x5900>
   1ac90:	mov	r9, #0
   1ac94:	mov	sl, r9
   1ac98:	mov	r8, sl
   1ac9c:	ldrb	sl, [r1, #11]
   1aca0:	orr	sl, r8, sl
   1aca4:	ldrb	r8, [r1, #10]
   1aca8:	orr	sl, sl, r8, lsl #8
   1acac:	ldrb	r8, [r1, #9]
   1acb0:	mov	r2, #0
   1acb4:	mov	fp, #0
   1acb8:	movt	fp, #24932	; 0x6164
   1acbc:	str	r2, [sp, #16]
   1acc0:	ldr	r2, [sp, #28]
   1acc4:	orr	sl, sl, r8, lsl #16
   1acc8:	ldrb	r8, [r1, #8]
   1accc:	orr	r8, sl, r8, lsl #24
   1acd0:	mov	sl, #0
   1acd4:	and	r2, r8, r2
   1acd8:	str	r2, [sp, #20]
   1acdc:	ldrd	r8, [sp, #16]
   1ace0:	cmp	r9, fp
   1ace4:	cmpeq	r8, sl
   1ace8:	bne	1af8c <_start@@Base+0x5bfc>
   1acec:	cmp	r3, #2
   1acf0:	ble	1af8c <_start@@Base+0x5bfc>
   1acf4:	ldr	r2, [r5, #12]
   1acf8:	ldrb	r3, [r1, #10]
   1acfc:	cmp	r2, #0
   1ad00:	beq	1afcc <_start@@Base+0x5c3c>
   1ad04:	cmp	r3, #58	; 0x3a
   1ad08:	cmpne	r3, #32
   1ad0c:	movhi	r3, #1
   1ad10:	movls	r3, #0
   1ad14:	bhi	1af8c <_start@@Base+0x5bfc>
   1ad18:	add	r1, r1, #10
   1ad1c:	str	r3, [r5, #12]
   1ad20:	sub	r3, r4, r1
   1ad24:	cmp	r3, #1
   1ad28:	ble	1ad3c <_start@@Base+0x59ac>
   1ad2c:	ldrb	r3, [r1]
   1ad30:	cmp	r3, #32
   1ad34:	bhi	1ad4c <_start@@Base+0x59bc>
   1ad38:	beq	1b0cc <_start@@Base+0x5d3c>
   1ad3c:	mov	r2, r4
   1ad40:	mov	r0, r5
   1ad44:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1ad48:	mov	r1, r0
   1ad4c:	cmp	r4, r1
   1ad50:	beq	1ad60 <_start@@Base+0x59d0>
   1ad54:	ldrb	r3, [r1]
   1ad58:	cmp	r3, #58	; 0x3a
   1ad5c:	beq	1b0e0 <_start@@Base+0x5d50>
   1ad60:	mov	r3, #4
   1ad64:	mov	r2, r4
   1ad68:	mov	r0, r5
   1ad6c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1ad70:	mov	r8, r0
   1ad74:	cmp	r6, r8
   1ad78:	beq	1af8c <_start@@Base+0x5bfc>
   1ad7c:	mov	r3, #0
   1ad80:	mov	r0, #0
   1ad84:	mov	r1, #0
   1ad88:	cmp	r4, r8
   1ad8c:	str	r3, [sp, #32]
   1ad90:	str	r3, [sp, #36]	; 0x24
   1ad94:	strd	r0, [sp, #40]	; 0x28
   1ad98:	beq	1aff4 <_start@@Base+0x5c64>
   1ad9c:	add	r0, sp, #40	; 0x28
   1ada0:	add	r3, sp, #36	; 0x24
   1ada4:	mov	r2, r4
   1ada8:	mov	r1, r8
   1adac:	str	r0, [sp]
   1adb0:	mov	r0, r5
   1adb4:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   1adb8:	cmp	r8, r0
   1adbc:	mov	r6, r0
   1adc0:	bne	1b00c <_start@@Base+0x5c7c>
   1adc4:	ldr	r3, [pc, #572]	; 1b008 <_start@@Base+0x5c78>
   1adc8:	add	ip, sp, #32
   1adcc:	mov	r2, r4
   1add0:	mov	r1, r6
   1add4:	mov	r0, r5
   1add8:	str	ip, [sp]
   1addc:	add	r3, pc, r3
   1ade0:	bl	19fc4 <_start@@Base+0x4c34>
   1ade4:	cmp	r4, r0
   1ade8:	cmpne	r0, r6
   1adec:	beq	1b140 <_start@@Base+0x5db0>
   1adf0:	ldr	r2, [sp, #32]
   1adf4:	mov	r6, r0
   1adf8:	ldr	r3, [sp, #24]
   1adfc:	str	r2, [r3]
   1ae00:	sub	r3, r4, r6
   1ae04:	cmp	r3, #1
   1ae08:	ble	1ae1c <_start@@Base+0x5a8c>
   1ae0c:	ldrb	r3, [r6]
   1ae10:	cmp	r3, #32
   1ae14:	bhi	1ae30 <_start@@Base+0x5aa0>
   1ae18:	beq	1afa4 <_start@@Base+0x5c14>
   1ae1c:	mov	r1, r6
   1ae20:	mov	r2, r4
   1ae24:	mov	r0, r5
   1ae28:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1ae2c:	mov	r6, r0
   1ae30:	cmp	r4, r6
   1ae34:	beq	1aafc <_start@@Base+0x576c>
   1ae38:	ldrb	r3, [r6]
   1ae3c:	cmp	r3, #44	; 0x2c
   1ae40:	beq	1af14 <_start@@Base+0x5b84>
   1ae44:	cmp	r3, #125	; 0x7d
   1ae48:	beq	1aedc <_start@@Base+0x5b4c>
   1ae4c:	mov	r1, r6
   1ae50:	mov	r3, #10
   1ae54:	mov	r2, r4
   1ae58:	mov	r0, r5
   1ae5c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1ae60:	mov	r8, r0
   1ae64:	b	1aadc <_start@@Base+0x574c>
   1ae68:	mov	sl, #0
   1ae6c:	b	1ac98 <_start@@Base+0x5908>
   1ae70:	mov	sl, #0
   1ae74:	mov	fp, #0
   1ae78:	b	1abf8 <_start@@Base+0x5868>
   1ae7c:	mov	r2, #0
   1ae80:	mov	r3, r2
   1ae84:	b	1ac04 <_start@@Base+0x5874>
   1ae88:	mov	r2, #0
   1ae8c:	mov	r3, r2
   1ae90:	b	1ac0c <_start@@Base+0x587c>
   1ae94:	mov	r2, #0
   1ae98:	mov	r3, r2
   1ae9c:	b	1ac14 <_start@@Base+0x5884>
   1aea0:	mov	r2, #0
   1aea4:	mov	r3, r2
   1aea8:	b	1ac1c <_start@@Base+0x588c>
   1aeac:	mov	r2, #0
   1aeb0:	mov	sl, r2
   1aeb4:	b	1ac24 <_start@@Base+0x5894>
   1aeb8:	mov	r2, #0
   1aebc:	mov	sl, r2
   1aec0:	b	1ac2c <_start@@Base+0x589c>
   1aec4:	mov	sl, #0
   1aec8:	b	1aca4 <_start@@Base+0x5914>
   1aecc:	mov	sl, #0
   1aed0:	b	1acac <_start@@Base+0x591c>
   1aed4:	mov	r8, #0
   1aed8:	b	1ac9c <_start@@Base+0x590c>
   1aedc:	add	r8, r6, #1
   1aee0:	sub	r3, r4, r8
   1aee4:	cmp	r3, #1
   1aee8:	ble	1aefc <_start@@Base+0x5b6c>
   1aeec:	ldrb	r3, [r6, #1]
   1aef0:	cmp	r3, #32
   1aef4:	bhi	1aadc <_start@@Base+0x574c>
   1aef8:	beq	1b054 <_start@@Base+0x5cc4>
   1aefc:	mov	r1, r8
   1af00:	mov	r2, r4
   1af04:	mov	r0, r5
   1af08:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1af0c:	mov	r8, r0
   1af10:	b	1aadc <_start@@Base+0x574c>
   1af14:	add	r1, r6, #1
   1af18:	sub	r3, r4, r1
   1af1c:	cmp	r3, #1
   1af20:	ble	1af34 <_start@@Base+0x5ba4>
   1af24:	ldrb	r3, [r6, #1]
   1af28:	cmp	r3, #32
   1af2c:	bhi	1af44 <_start@@Base+0x5bb4>
   1af30:	beq	1b068 <_start@@Base+0x5cd8>
   1af34:	mov	r2, r4
   1af38:	mov	r0, r5
   1af3c:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1af40:	mov	r1, r0
   1af44:	cmp	r4, r1
   1af48:	beq	1b080 <_start@@Base+0x5cf0>
   1af4c:	ldrb	r3, [r1]
   1af50:	cmp	r3, #125	; 0x7d
   1af54:	bne	1ab84 <_start@@Base+0x57f4>
   1af58:	add	r8, r1, #1
   1af5c:	sub	r3, r4, r8
   1af60:	cmp	r3, #1
   1af64:	ble	1aefc <_start@@Base+0x5b6c>
   1af68:	ldrb	r3, [r1, #1]
   1af6c:	cmp	r3, #32
   1af70:	bhi	1aadc <_start@@Base+0x574c>
   1af74:	bne	1aefc <_start@@Base+0x5b6c>
   1af78:	ldrb	r3, [r1, #2]
   1af7c:	cmp	r3, #32
   1af80:	addhi	r8, r1, #2
   1af84:	bls	1aefc <_start@@Base+0x5b6c>
   1af88:	b	1aadc <_start@@Base+0x574c>
   1af8c:	mov	r1, r6
   1af90:	mov	r2, r4
   1af94:	mov	r0, r5
   1af98:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   1af9c:	mov	r6, r0
   1afa0:	b	1ae00 <_start@@Base+0x5a70>
   1afa4:	ldrb	r3, [r6, #1]
   1afa8:	cmp	r3, #32
   1afac:	addhi	r6, r6, #1
   1afb0:	bls	1ae1c <_start@@Base+0x5a8c>
   1afb4:	b	1ae30 <_start@@Base+0x5aa0>
   1afb8:	mov	r2, r4
   1afbc:	mov	r0, r5
   1afc0:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   1afc4:	mov	r6, r0
   1afc8:	b	1ae00 <_start@@Base+0x5a70>
   1afcc:	cmp	r3, #34	; 0x22
   1afd0:	bne	1af8c <_start@@Base+0x5bfc>
   1afd4:	add	r1, r1, #11
   1afd8:	b	1ad20 <_start@@Base+0x5990>
   1afdc:	mov	r3, #5
   1afe0:	mov	r2, r4
   1afe4:	mov	r0, r5
   1afe8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1afec:	mov	r1, r0
   1aff0:	b	1abb4 <_start@@Base+0x5824>
   1aff4:	mov	r6, r4
   1aff8:	b	1adc4 <_start@@Base+0x5a34>
   1affc:	nop	{0}
   1b000:	cmpvc	pc, #1342177286	; 0x50000006
   1b004:	rsbvs	r6, pc, #428	; 0x1ac
   1b008:	andeq	sl, r3, r4, lsr #5
   1b00c:	ldr	r1, [sp, #36]	; 0x24
   1b010:	ldrd	r2, [sp, #40]	; 0x28
   1b014:	cmp	r1, #0
   1b018:	beq	1b09c <_start@@Base+0x5d0c>
   1b01c:	cmp	r3, #0
   1b020:	cmpeq	r2, #-2147483648	; 0x80000000
   1b024:	rsbls	r2, r2, #0
   1b028:	bls	1adf8 <_start@@Base+0x5a68>
   1b02c:	mov	r1, r0
   1b030:	mov	r3, #8
   1b034:	mov	r2, r4
   1b038:	mov	r0, r5
   1b03c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1b040:	mov	r6, r0
   1b044:	cmp	r8, r6
   1b048:	ldrne	r2, [sp, #32]
   1b04c:	bne	1adf8 <_start@@Base+0x5a68>
   1b050:	b	1adc4 <_start@@Base+0x5a34>
   1b054:	ldrb	r3, [r6, #2]
   1b058:	cmp	r3, #32
   1b05c:	addhi	r8, r6, #2
   1b060:	bls	1aefc <_start@@Base+0x5b6c>
   1b064:	b	1aadc <_start@@Base+0x574c>
   1b068:	ldrb	r3, [r6, #2]
   1b06c:	cmp	r3, #32
   1b070:	addhi	r1, r6, #2
   1b074:	bls	1af34 <_start@@Base+0x5ba4>
   1b078:	cmp	r4, r1
   1b07c:	bne	1af4c <_start@@Base+0x5bbc>
   1b080:	mov	r3, #10
   1b084:	mov	r2, r4
   1b088:	mov	r1, r4
   1b08c:	mov	r0, r5
   1b090:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1b094:	mov	r8, r0
   1b098:	b	1aadc <_start@@Base+0x574c>
   1b09c:	mov	r1, #0
   1b0a0:	mvn	r0, #-2147483648	; 0x80000000
   1b0a4:	cmp	r3, r1
   1b0a8:	cmpeq	r2, r0
   1b0ac:	bls	1adf8 <_start@@Base+0x5a68>
   1b0b0:	mov	r1, r6
   1b0b4:	mov	r3, #7
   1b0b8:	mov	r2, r4
   1b0bc:	mov	r0, r5
   1b0c0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1b0c4:	mov	r6, r0
   1b0c8:	b	1b044 <_start@@Base+0x5cb4>
   1b0cc:	ldrb	r3, [r1, #1]
   1b0d0:	cmp	r3, #32
   1b0d4:	addhi	r1, r1, #1
   1b0d8:	bls	1ad3c <_start@@Base+0x59ac>
   1b0dc:	b	1ad4c <_start@@Base+0x59bc>
   1b0e0:	add	r8, r1, #1
   1b0e4:	sub	r3, r4, r8
   1b0e8:	cmp	r3, #1
   1b0ec:	ble	1b100 <_start@@Base+0x5d70>
   1b0f0:	ldrb	r3, [r1, #1]
   1b0f4:	cmp	r3, #32
   1b0f8:	bhi	1ad74 <_start@@Base+0x59e4>
   1b0fc:	beq	1b118 <_start@@Base+0x5d88>
   1b100:	mov	r1, r8
   1b104:	mov	r2, r4
   1b108:	mov	r0, r5
   1b10c:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1b110:	mov	r8, r0
   1b114:	b	1ad74 <_start@@Base+0x59e4>
   1b118:	ldrb	r3, [r1, #2]
   1b11c:	cmp	r3, #32
   1b120:	addhi	r8, r1, #2
   1b124:	bls	1b100 <_start@@Base+0x5d70>
   1b128:	b	1ad74 <_start@@Base+0x59e4>
   1b12c:	ldrb	r3, [r6, #2]
   1b130:	cmp	r3, #32
   1b134:	addhi	r1, r6, #2
   1b138:	bls	1ab54 <_start@@Base+0x57c4>
   1b13c:	b	1ab64 <_start@@Base+0x57d4>
   1b140:	mov	r1, r0
   1b144:	mov	r3, #33	; 0x21
   1b148:	mov	r2, r4
   1b14c:	mov	r0, r5
   1b150:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1b154:	mov	r8, r0
   1b158:	b	1aadc <_start@@Base+0x574c>
   1b15c:	add	r1, r1, #1
   1b160:	mov	r2, r4
   1b164:	mov	r0, r5
   1b168:	bl	17470 <_start@@Base+0x20e0>
   1b16c:	mov	r8, r0
   1b170:	b	1aadc <_start@@Base+0x574c>
   1b174:	mov	r6, r4
   1b178:	b	1aafc <_start@@Base+0x576c>
   1b17c:	strd	r4, [sp, #-16]!
   1b180:	mov	r4, r2
   1b184:	sub	r2, r2, r1
   1b188:	cmp	r2, #1
   1b18c:	mov	r5, r0
   1b190:	str	r6, [sp, #8]
   1b194:	mov	r6, r3
   1b198:	str	lr, [sp, #12]
   1b19c:	ble	1b1b0 <_start@@Base+0x5e20>
   1b1a0:	ldrb	r3, [r1]
   1b1a4:	cmp	r3, #32
   1b1a8:	bhi	1b1c0 <_start@@Base+0x5e30>
   1b1ac:	beq	1b2b0 <_start@@Base+0x5f20>
   1b1b0:	mov	r2, r4
   1b1b4:	mov	r0, r5
   1b1b8:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1b1bc:	mov	r1, r0
   1b1c0:	cmp	r4, r1
   1b1c4:	moveq	r3, #0
   1b1c8:	moveq	r0, r4
   1b1cc:	streq	r3, [r6]
   1b1d0:	beq	1b2a0 <_start@@Base+0x5f10>
   1b1d4:	ldrb	r3, [r1]
   1b1d8:	cmp	r3, #44	; 0x2c
   1b1dc:	beq	1b254 <_start@@Base+0x5ec4>
   1b1e0:	mov	r3, #0
   1b1e4:	str	r3, [r6]
   1b1e8:	ldrb	r3, [r1]
   1b1ec:	cmp	r3, #125	; 0x7d
   1b1f0:	beq	1b214 <_start@@Base+0x5e84>
   1b1f4:	mov	r2, r4
   1b1f8:	mov	r0, r5
   1b1fc:	mov	r3, #10
   1b200:	ldrd	r4, [sp]
   1b204:	ldr	r6, [sp, #8]
   1b208:	ldr	lr, [sp, #12]
   1b20c:	add	sp, sp, #16
   1b210:	b	2cff0 <flatcc_json_parser_set_error@@Base>
   1b214:	add	r0, r1, #1
   1b218:	sub	r3, r4, r0
   1b21c:	cmp	r3, #1
   1b220:	ble	1b234 <_start@@Base+0x5ea4>
   1b224:	ldrb	r3, [r1, #1]
   1b228:	cmp	r3, #32
   1b22c:	bhi	1b2a0 <_start@@Base+0x5f10>
   1b230:	beq	1b2fc <_start@@Base+0x5f6c>
   1b234:	mov	r2, r4
   1b238:	mov	r1, r0
   1b23c:	ldr	r6, [sp, #8]
   1b240:	mov	r0, r5
   1b244:	ldrd	r4, [sp]
   1b248:	ldr	lr, [sp, #12]
   1b24c:	add	sp, sp, #16
   1b250:	b	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1b254:	add	r0, r1, #1
   1b258:	sub	r3, r4, r0
   1b25c:	cmp	r3, #1
   1b260:	ble	1b274 <_start@@Base+0x5ee4>
   1b264:	ldrb	r3, [r1, #1]
   1b268:	cmp	r3, #32
   1b26c:	bhi	1b284 <_start@@Base+0x5ef4>
   1b270:	beq	1b310 <_start@@Base+0x5f80>
   1b274:	mov	r1, r0
   1b278:	mov	r2, r4
   1b27c:	mov	r0, r5
   1b280:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1b284:	cmp	r4, r0
   1b288:	beq	1b324 <_start@@Base+0x5f94>
   1b28c:	ldrb	r3, [r0]
   1b290:	cmp	r3, #125	; 0x7d
   1b294:	movne	r3, #1
   1b298:	strne	r3, [r6]
   1b29c:	beq	1b2d4 <_start@@Base+0x5f44>
   1b2a0:	ldrd	r4, [sp]
   1b2a4:	ldr	r6, [sp, #8]
   1b2a8:	add	sp, sp, #12
   1b2ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2b0:	ldrb	r3, [r1, #1]
   1b2b4:	cmp	r3, #32
   1b2b8:	addhi	r1, r1, #1
   1b2bc:	bhi	1b1c0 <_start@@Base+0x5e30>
   1b2c0:	mov	r2, r4
   1b2c4:	mov	r0, r5
   1b2c8:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1b2cc:	mov	r1, r0
   1b2d0:	b	1b1c0 <_start@@Base+0x5e30>
   1b2d4:	mov	r3, #0
   1b2d8:	mov	r2, r4
   1b2dc:	ldr	lr, [sp, #12]
   1b2e0:	add	r1, r0, #1
   1b2e4:	mov	r0, r5
   1b2e8:	ldrd	r4, [sp]
   1b2ec:	str	r3, [r6]
   1b2f0:	ldr	r6, [sp, #8]
   1b2f4:	add	sp, sp, #16
   1b2f8:	b	17470 <_start@@Base+0x20e0>
   1b2fc:	ldrb	r3, [r1, #2]
   1b300:	cmp	r3, #32
   1b304:	addhi	r0, r1, #2
   1b308:	bls	1b234 <_start@@Base+0x5ea4>
   1b30c:	b	1b2a0 <_start@@Base+0x5f10>
   1b310:	ldrb	r3, [r1, #2]
   1b314:	cmp	r3, #32
   1b318:	addhi	r0, r1, #2
   1b31c:	bls	1b274 <_start@@Base+0x5ee4>
   1b320:	b	1b284 <_start@@Base+0x5ef4>
   1b324:	mov	ip, #0
   1b328:	mov	r0, r5
   1b32c:	mov	r3, #10
   1b330:	mov	r2, r4
   1b334:	mov	r1, r4
   1b338:	str	ip, [r6]
   1b33c:	b	1b200 <_start@@Base+0x5e70>
   1b340:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b344:	mov	r4, r1
   1b348:	mov	r1, #10
   1b34c:	strd	r6, [sp, #8]
   1b350:	mov	r5, r2
   1b354:	strd	sl, [sp, #24]
   1b358:	mov	sl, r3
   1b35c:	mov	r3, #0
   1b360:	strd	r8, [sp, #16]
   1b364:	mov	r8, r0
   1b368:	str	lr, [sp, #32]
   1b36c:	sub	sp, sp, #124	; 0x7c
   1b370:	ldr	r0, [r0]
   1b374:	str	r3, [sl]
   1b378:	bl	27878 <flatcc_builder_start_table@@Base>
   1b37c:	cmp	r0, #0
   1b380:	beq	1b3bc <_start@@Base+0x602c>
   1b384:	mov	r1, r4
   1b388:	mov	r2, r5
   1b38c:	mov	r0, r8
   1b390:	mov	r3, #33	; 0x21
   1b394:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1b398:	mov	r4, r0
   1b39c:	mov	r0, r4
   1b3a0:	add	sp, sp, #124	; 0x7c
   1b3a4:	ldrd	r4, [sp]
   1b3a8:	ldrd	r6, [sp, #8]
   1b3ac:	ldrd	r8, [sp, #16]
   1b3b0:	ldrd	sl, [sp, #24]
   1b3b4:	add	sp, sp, #32
   1b3b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3bc:	add	r0, sp, #116	; 0x74
   1b3c0:	mov	r3, #5
   1b3c4:	mov	r2, r5
   1b3c8:	mov	r1, r4
   1b3cc:	str	r0, [sp]
   1b3d0:	mov	r0, r8
   1b3d4:	bl	2f4d4 <flatcc_json_parser_prepare_unions@@Base>
   1b3d8:	cmp	r5, r0
   1b3dc:	beq	1b384 <_start@@Base+0x5ff4>
   1b3e0:	add	r9, sp, #112	; 0x70
   1b3e4:	mov	r1, r4
   1b3e8:	mov	r3, r9
   1b3ec:	mov	r2, r5
   1b3f0:	mov	r0, r8
   1b3f4:	bl	19178 <_start@@Base+0x3de8>
   1b3f8:	ldr	r3, [sp, #112]	; 0x70
   1b3fc:	mov	r4, r0
   1b400:	cmp	r3, #0
   1b404:	beq	1b74c <_start@@Base+0x63bc>
   1b408:	add	r7, pc, #888	; 0x378
   1b40c:	ldrd	r6, [r7]
   1b410:	str	sl, [sp, #92]	; 0x5c
   1b414:	b	1b4dc <_start@@Base+0x614c>
   1b418:	add	r3, pc, #880	; 0x370
   1b41c:	ldrd	r2, [r3]
   1b420:	cmp	r1, r3
   1b424:	cmpeq	r0, r2
   1b428:	beq	1b608 <_start@@Base+0x6278>
   1b42c:	add	r3, pc, #868	; 0x364
   1b430:	ldrd	r2, [r3]
   1b434:	cmp	r1, r3
   1b438:	cmpeq	r0, r2
   1b43c:	beq	1b7f4 <_start@@Base+0x6464>
   1b440:	and	ip, r0, #-16777216	; 0xff000000
   1b444:	add	r3, pc, #852	; 0x354
   1b448:	ldrd	r2, [r3]
   1b44c:	str	ip, [sp, #24]
   1b450:	str	r1, [sp, #28]
   1b454:	ldrd	r0, [sp, #24]
   1b458:	cmp	r1, r3
   1b45c:	cmpeq	r0, r2
   1b460:	bne	1b668 <_start@@Base+0x62d8>
   1b464:	sub	r3, r5, r4
   1b468:	cmp	r3, #5
   1b46c:	ble	1b668 <_start@@Base+0x62d8>
   1b470:	mov	r1, r4
   1b474:	mov	r3, #5
   1b478:	mov	r2, r5
   1b47c:	mov	r0, r8
   1b480:	bl	1924c <_start@@Base+0x3ebc>
   1b484:	cmp	r0, r4
   1b488:	mov	r1, r0
   1b48c:	beq	1b668 <_start@@Base+0x62d8>
   1b490:	ldr	ip, [pc, #840]	; 1b7e0 <_start@@Base+0x6450>
   1b494:	mov	r4, #7
   1b498:	mov	r3, #3
   1b49c:	add	ip, pc, ip
   1b4a0:	ldr	lr, [sp, #116]	; 0x74
   1b4a4:	mov	r2, r5
   1b4a8:	mov	r0, r8
   1b4ac:	stm	sp, {r4, lr}
   1b4b0:	str	ip, [sp, #8]
   1b4b4:	bl	2f5e0 <flatcc_json_parser_union@@Base>
   1b4b8:	mov	r1, r0
   1b4bc:	mov	r3, r9
   1b4c0:	mov	r2, r5
   1b4c4:	mov	r0, r8
   1b4c8:	bl	1b17c <_start@@Base+0x5dec>
   1b4cc:	ldr	r3, [sp, #112]	; 0x70
   1b4d0:	mov	r4, r0
   1b4d4:	cmp	r3, #0
   1b4d8:	beq	1b748 <_start@@Base+0x63b8>
   1b4dc:	cmp	r5, r4
   1b4e0:	beq	1b50c <_start@@Base+0x617c>
   1b4e4:	ldrb	r3, [r4]
   1b4e8:	cmp	r3, #34	; 0x22
   1b4ec:	moveq	r3, #0
   1b4f0:	addeq	r4, r4, #1
   1b4f4:	streq	r3, [r8, #12]
   1b4f8:	beq	1b50c <_start@@Base+0x617c>
   1b4fc:	cmp	r3, #46	; 0x2e
   1b500:	movne	r3, #1
   1b504:	strne	r3, [r8, #12]
   1b508:	beq	1ba60 <_start@@Base+0x66d0>
   1b50c:	mov	r1, r5
   1b510:	mov	r0, r4
   1b514:	bl	15480 <_start@@Base+0xf0>
   1b518:	cmp	r1, r7
   1b51c:	cmpeq	r0, r6
   1b520:	bls	1b418 <_start@@Base+0x6088>
   1b524:	add	r3, pc, #636	; 0x27c
   1b528:	ldrd	r2, [r3]
   1b52c:	cmp	r1, r3
   1b530:	cmpeq	r0, r2
   1b534:	bhi	1b680 <_start@@Base+0x62f0>
   1b538:	add	r3, pc, #624	; 0x270
   1b53c:	ldrd	r2, [r3]
   1b540:	cmp	r1, r3
   1b544:	cmpeq	r0, r2
   1b548:	bne	1b668 <_start@@Base+0x62d8>
   1b54c:	add	r4, r4, #8
   1b550:	mov	r1, r5
   1b554:	mov	r0, r4
   1b558:	bl	15480 <_start@@Base+0xf0>
   1b55c:	bic	r0, r0, #255	; 0xff
   1b560:	add	r3, pc, #592	; 0x250
   1b564:	ldrd	r2, [r3]
   1b568:	strd	r0, [sp, #72]	; 0x48
   1b56c:	ldrd	sl, [sp, #72]	; 0x48
   1b570:	cmp	fp, r3
   1b574:	cmpeq	sl, r2
   1b578:	beq	1bad4 <_start@@Base+0x6744>
   1b57c:	lsr	r1, r1, #16
   1b580:	mov	r3, #0
   1b584:	mov	r2, #0
   1b588:	lsl	r1, r1, #16
   1b58c:	str	r3, [sp, #56]	; 0x38
   1b590:	mov	r3, #0
   1b594:	movt	r3, #29299	; 0x7273
   1b598:	str	r1, [sp, #60]	; 0x3c
   1b59c:	ldrd	r0, [sp, #56]	; 0x38
   1b5a0:	cmp	r1, r3
   1b5a4:	cmpeq	r0, r2
   1b5a8:	bne	1b668 <_start@@Base+0x62d8>
   1b5ac:	sub	r3, r5, r4
   1b5b0:	cmp	r3, #2
   1b5b4:	ble	1b668 <_start@@Base+0x62d8>
   1b5b8:	mov	r1, r4
   1b5bc:	mov	r3, #2
   1b5c0:	mov	r2, r5
   1b5c4:	mov	r0, r8
   1b5c8:	bl	1924c <_start@@Base+0x3ebc>
   1b5cc:	cmp	r4, r0
   1b5d0:	mov	r1, r0
   1b5d4:	beq	1b668 <_start@@Base+0x62d8>
   1b5d8:	ldr	ip, [pc, #516]	; 1b7e4 <_start@@Base+0x6454>
   1b5dc:	mov	r4, #9
   1b5e0:	mov	r3, #4
   1b5e4:	mov	r2, r5
   1b5e8:	mov	r0, r8
   1b5ec:	ldr	lr, [sp, #116]	; 0x74
   1b5f0:	add	ip, pc, ip
   1b5f4:	stm	sp, {r4, lr}
   1b5f8:	str	ip, [sp, #8]
   1b5fc:	bl	2f994 <flatcc_json_parser_union_vector@@Base>
   1b600:	mov	r1, r0
   1b604:	b	1b4bc <_start@@Base+0x612c>
   1b608:	add	r4, r4, #8
   1b60c:	mov	r1, r5
   1b610:	mov	r0, r4
   1b614:	bl	15480 <_start@@Base+0xf0>
   1b618:	bic	r0, r0, #255	; 0xff
   1b61c:	add	r3, pc, #412	; 0x19c
   1b620:	ldrd	r2, [r3]
   1b624:	strd	r0, [sp, #48]	; 0x30
   1b628:	ldrd	sl, [sp, #48]	; 0x30
   1b62c:	cmp	fp, r3
   1b630:	cmpeq	sl, r2
   1b634:	beq	1ba7c <_start@@Base+0x66ec>
   1b638:	lsr	r1, r1, #16
   1b63c:	mov	r3, #0
   1b640:	mov	r2, #0
   1b644:	lsl	r1, r1, #16
   1b648:	str	r3, [sp, #32]
   1b64c:	mov	r3, #0
   1b650:	movt	r3, #29556	; 0x7374
   1b654:	str	r1, [sp, #36]	; 0x24
   1b658:	ldrd	r0, [sp, #32]
   1b65c:	cmp	r1, r3
   1b660:	cmpeq	r0, r2
   1b664:	beq	1b938 <_start@@Base+0x65a8>
   1b668:	mov	r1, r4
   1b66c:	mov	r2, r5
   1b670:	mov	r0, r8
   1b674:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   1b678:	mov	r1, r0
   1b67c:	b	1b4bc <_start@@Base+0x612c>
   1b680:	add	r3, pc, #320	; 0x140
   1b684:	ldrd	r2, [r3]
   1b688:	cmp	r1, r3
   1b68c:	cmpeq	r0, r2
   1b690:	beq	1b8a4 <_start@@Base+0x6514>
   1b694:	add	r3, pc, #308	; 0x134
   1b698:	ldrd	r2, [r3]
   1b69c:	cmp	r1, r3
   1b6a0:	cmpeq	r0, r2
   1b6a4:	bne	1b668 <_start@@Base+0x62d8>
   1b6a8:	add	r4, r4, #8
   1b6ac:	mov	r1, r5
   1b6b0:	mov	r0, r4
   1b6b4:	bl	15480 <_start@@Base+0xf0>
   1b6b8:	lsr	r3, r0, #16
   1b6bc:	str	r3, [sp, #64]	; 0x40
   1b6c0:	ldr	r0, [sp, #64]	; 0x40
   1b6c4:	str	r1, [sp, #68]	; 0x44
   1b6c8:	add	r3, pc, #264	; 0x108
   1b6cc:	ldrd	r2, [r3]
   1b6d0:	lsl	r0, r0, #16
   1b6d4:	str	r0, [sp, #64]	; 0x40
   1b6d8:	ldrd	sl, [sp, #64]	; 0x40
   1b6dc:	cmp	fp, r3
   1b6e0:	cmpeq	sl, r2
   1b6e4:	beq	1ba08 <_start@@Base+0x6678>
   1b6e8:	mov	r3, #0
   1b6ec:	str	r3, [sp, #96]	; 0x60
   1b6f0:	and	r3, r1, #-16777216	; 0xff000000
   1b6f4:	str	r3, [sp, #100]	; 0x64
   1b6f8:	ldrd	r2, [sp, #96]	; 0x60
   1b6fc:	cmp	r3, #1795162112	; 0x6b000000
   1b700:	cmpeq	r2, #0
   1b704:	bne	1b668 <_start@@Base+0x62d8>
   1b708:	sub	r3, r5, r4
   1b70c:	cmp	r3, #1
   1b710:	ble	1b668 <_start@@Base+0x62d8>
   1b714:	mov	r1, r4
   1b718:	mov	r3, #1
   1b71c:	mov	r2, r5
   1b720:	mov	r0, r8
   1b724:	bl	1924c <_start@@Base+0x3ebc>
   1b728:	cmp	r4, r0
   1b72c:	mov	r1, r0
   1b730:	beq	1b668 <_start@@Base+0x62d8>
   1b734:	ldr	ip, [pc, #172]	; 1b7e8 <_start@@Base+0x6458>
   1b738:	mov	r4, #5
   1b73c:	mov	r3, #2
   1b740:	add	ip, pc, ip
   1b744:	b	1b4a0 <_start@@Base+0x6110>
   1b748:	ldr	sl, [sp, #92]	; 0x5c
   1b74c:	ldr	r3, [r8, #24]
   1b750:	cmp	r3, #0
   1b754:	bne	1b384 <_start@@Base+0x5ff4>
   1b758:	mov	r1, r4
   1b75c:	mov	r2, r5
   1b760:	ldr	r3, [sp, #116]	; 0x74
   1b764:	mov	r0, r8
   1b768:	bl	2f568 <flatcc_json_parser_finalize_unions@@Base>
   1b76c:	mov	r4, r0
   1b770:	ldr	r0, [r8]
   1b774:	bl	2825c <flatcc_builder_end_table@@Base>
   1b778:	cmp	r0, #0
   1b77c:	str	r0, [sl]
   1b780:	bne	1b39c <_start@@Base+0x600c>
   1b784:	b	1b384 <_start@@Base+0x5ff4>
   1b788:	cmnvs	r3, r4, ror #8
   1b78c:	cmnvs	r8, #-2147483620	; 0x8000001c
   1b790:	strbvs	r6, [pc, -r9, ror #28]!
   1b794:	cmnvs	lr, r1, ror #8
   1b798:	svcvs	0x005f7479
   1b79c:	cmnvs	r1, #6464	; 0x1940
   1b7a0:	svcvs	0x00000000
   1b7a4:	cmnvs	r1, #6464	; 0x1940
   1b7a8:	svcpl	0x00636860
   1b7ac:			; <UNDEFINED> instruction: 0x6d61696e
   1b7b0:	cmnvs	r3, r5, ror #8
   1b7b4:	cmnvs	r8, #-2147483620	; 0x8000001c
   1b7b8:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1b7bc:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   1b7c0:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1b7c4:	cmnvc	r4, #116, 30	; 0x1d0
   1b7c8:	svcpl	0x00636861
   1b7cc:			; <UNDEFINED> instruction: 0x6d61696e
   1b7d0:	svcpl	0x006b6963
   1b7d4:	cmnvc	r9, #1694498816	; 0x65000000
   1b7d8:	rsbvc	r0, r5, r0
   1b7dc:	blvs	17f89c8 <__bss_end__@@Base+0x17a35fc>
   1b7e0:	andeq	r0, r0, r8, lsl #14
   1b7e4:			; <UNDEFINED> instruction: 0x000005b4
   1b7e8:	andeq	r0, r0, r4, ror #8
   1b7ec:	strdeq	r9, [r3], -ip
   1b7f0:	andeq	r0, r0, r8, lsl r3
   1b7f4:	mov	r3, #0
   1b7f8:	add	r4, r4, #8
   1b7fc:	mov	r1, r5
   1b800:	mov	r0, r4
   1b804:	str	r3, [sp, #40]	; 0x28
   1b808:	bl	15480 <_start@@Base+0xf0>
   1b80c:	lsr	r3, r1, #16
   1b810:	mov	r2, #0
   1b814:	str	r3, [sp, #44]	; 0x2c
   1b818:	mov	r3, #0
   1b81c:	movt	r3, #28773	; 0x7065
   1b820:	ldr	r1, [sp, #44]	; 0x2c
   1b824:	lsl	r1, r1, #16
   1b828:	str	r1, [sp, #44]	; 0x2c
   1b82c:	ldrd	r0, [sp, #40]	; 0x28
   1b830:	cmp	r1, r3
   1b834:	cmpeq	r0, r2
   1b838:	bne	1b668 <_start@@Base+0x62d8>
   1b83c:	sub	r3, r5, r4
   1b840:	cmp	r3, #2
   1b844:	ble	1b668 <_start@@Base+0x62d8>
   1b848:	mov	r1, r4
   1b84c:	mov	r3, #2
   1b850:	mov	r2, r5
   1b854:	mov	r0, r8
   1b858:	bl	1924c <_start@@Base+0x3ebc>
   1b85c:	cmp	r4, r0
   1b860:	mov	r1, r0
   1b864:	beq	1b668 <_start@@Base+0x62d8>
   1b868:	ldr	ip, [pc, #-132]	; 1b7ec <_start@@Base+0x645c>
   1b86c:	mov	r4, #7
   1b870:	mov	r3, #3
   1b874:	mov	r2, r5
   1b878:	ldr	lr, [pc, #-144]	; 1b7f0 <_start@@Base+0x6460>
   1b87c:	str	r4, [sp]
   1b880:	ldr	r4, [sp, #116]	; 0x74
   1b884:	add	ip, pc, ip
   1b888:	add	ip, ip, #28
   1b88c:	add	lr, pc, lr
   1b890:	mov	r0, r8
   1b894:	stmib	sp, {r4, ip, lr}
   1b898:	bl	2f73c <flatcc_json_parser_union_type@@Base>
   1b89c:	mov	r1, r0
   1b8a0:	b	1b4bc <_start@@Base+0x612c>
   1b8a4:	add	fp, r4, #8
   1b8a8:	mov	r1, r5
   1b8ac:	mov	r0, fp
   1b8b0:	bl	15480 <_start@@Base+0xf0>
   1b8b4:	add	r3, pc, #684	; 0x2ac
   1b8b8:	ldrd	r2, [r3]
   1b8bc:	cmp	r1, r3
   1b8c0:	cmpeq	r0, r2
   1b8c4:	beq	1b978 <_start@@Base+0x65e8>
   1b8c8:	lsr	r3, r0, #16
   1b8cc:	str	r3, [sp, #80]	; 0x50
   1b8d0:	ldr	ip, [sp, #80]	; 0x50
   1b8d4:	str	r1, [sp, #84]	; 0x54
   1b8d8:	add	r3, pc, #656	; 0x290
   1b8dc:	ldrd	r2, [r3]
   1b8e0:	lsl	ip, ip, #16
   1b8e4:	str	ip, [sp, #80]	; 0x50
   1b8e8:	ldrd	r0, [sp, #80]	; 0x50
   1b8ec:	cmp	r1, r3
   1b8f0:	cmpeq	r0, r2
   1b8f4:	bne	1bb50 <_start@@Base+0x67c0>
   1b8f8:	sub	r3, r5, fp
   1b8fc:	cmp	r3, #6
   1b900:	ble	1bb50 <_start@@Base+0x67c0>
   1b904:	mov	r1, fp
   1b908:	mov	r3, #6
   1b90c:	mov	r2, r5
   1b910:	mov	r0, r8
   1b914:	bl	1924c <_start@@Base+0x3ebc>
   1b918:	cmp	fp, r0
   1b91c:	mov	r1, r0
   1b920:	beq	1bb50 <_start@@Base+0x67c0>
   1b924:	ldr	ip, [pc, #596]	; 1bb80 <_start@@Base+0x67f0>
   1b928:	mov	r4, #1
   1b92c:	mov	r3, #0
   1b930:	add	ip, pc, ip
   1b934:	b	1b4a0 <_start@@Base+0x6110>
   1b938:	sub	r3, r5, r4
   1b93c:	cmp	r3, #2
   1b940:	ble	1b668 <_start@@Base+0x62d8>
   1b944:	mov	r1, r4
   1b948:	mov	r3, #2
   1b94c:	mov	r2, r5
   1b950:	mov	r0, r8
   1b954:	bl	1924c <_start@@Base+0x3ebc>
   1b958:	cmp	r0, r4
   1b95c:	mov	r1, r0
   1b960:	beq	1b668 <_start@@Base+0x62d8>
   1b964:	ldr	ip, [pc, #536]	; 1bb84 <_start@@Base+0x67f4>
   1b968:	mov	r4, #3
   1b96c:	mov	r3, #1
   1b970:	add	ip, pc, ip
   1b974:	b	1b4a0 <_start@@Base+0x6110>
   1b978:	add	r4, r4, #16
   1b97c:	mov	r1, r5
   1b980:	mov	r0, r4
   1b984:	mov	fp, #0
   1b988:	bl	15480 <_start@@Base+0xf0>
   1b98c:	bic	r1, r1, #255	; 0xff
   1b990:	str	fp, [sp, #104]	; 0x68
   1b994:	add	r3, pc, #476	; 0x1dc
   1b998:	ldrd	r2, [r3]
   1b99c:	str	r1, [sp, #108]	; 0x6c
   1b9a0:	ldrd	r0, [sp, #104]	; 0x68
   1b9a4:	cmp	r1, r3
   1b9a8:	cmpeq	r0, r2
   1b9ac:	bne	1b668 <_start@@Base+0x62d8>
   1b9b0:	sub	r3, r5, r4
   1b9b4:	cmp	r3, #3
   1b9b8:	ble	1b668 <_start@@Base+0x62d8>
   1b9bc:	mov	r1, r4
   1b9c0:	mov	r3, #3
   1b9c4:	mov	r2, r5
   1b9c8:	mov	r0, r8
   1b9cc:	bl	1924c <_start@@Base+0x3ebc>
   1b9d0:	cmp	r4, r0
   1b9d4:	mov	r1, r0
   1b9d8:	beq	1b668 <_start@@Base+0x62d8>
   1b9dc:	ldr	ip, [pc, #420]	; 1bb88 <_start@@Base+0x67f8>
   1b9e0:	mov	r4, #1
   1b9e4:	mov	r3, fp
   1b9e8:	mov	r2, r5
   1b9ec:	ldr	lr, [pc, #408]	; 1bb8c <_start@@Base+0x67fc>
   1b9f0:	str	r4, [sp]
   1b9f4:	ldr	r4, [sp, #116]	; 0x74
   1b9f8:	add	ip, pc, ip
   1b9fc:	add	ip, ip, #60	; 0x3c
   1ba00:	add	lr, pc, lr
   1ba04:	b	1b890 <_start@@Base+0x6500>
   1ba08:	sub	r3, r5, r4
   1ba0c:	cmp	r3, #6
   1ba10:	ble	1b668 <_start@@Base+0x62d8>
   1ba14:	mov	r1, r4
   1ba18:	mov	r3, #6
   1ba1c:	mov	r2, r5
   1ba20:	mov	r0, r8
   1ba24:	bl	1924c <_start@@Base+0x3ebc>
   1ba28:	cmp	r4, r0
   1ba2c:	mov	r1, r0
   1ba30:	beq	1b668 <_start@@Base+0x62d8>
   1ba34:	ldr	ip, [pc, #340]	; 1bb90 <_start@@Base+0x6800>
   1ba38:	mov	r4, #5
   1ba3c:	mov	r3, #2
   1ba40:	mov	r2, r5
   1ba44:	ldr	lr, [pc, #328]	; 1bb94 <_start@@Base+0x6804>
   1ba48:	str	r4, [sp]
   1ba4c:	ldr	r4, [sp, #116]	; 0x74
   1ba50:	add	ip, pc, ip
   1ba54:	add	ip, ip, #76	; 0x4c
   1ba58:	add	lr, pc, lr
   1ba5c:	b	1b890 <_start@@Base+0x6500>
   1ba60:	mov	r1, r4
   1ba64:	mov	r3, #5
   1ba68:	mov	r2, r5
   1ba6c:	mov	r0, r8
   1ba70:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1ba74:	mov	r4, r0
   1ba78:	b	1b50c <_start@@Base+0x617c>
   1ba7c:	sub	r3, r5, r4
   1ba80:	cmp	r3, #7
   1ba84:	ble	1b668 <_start@@Base+0x62d8>
   1ba88:	mov	r1, r4
   1ba8c:	mov	r3, #7
   1ba90:	mov	r2, r5
   1ba94:	mov	r0, r8
   1ba98:	bl	1924c <_start@@Base+0x3ebc>
   1ba9c:	cmp	r4, r0
   1baa0:	mov	r1, r0
   1baa4:	beq	1b668 <_start@@Base+0x62d8>
   1baa8:	ldr	ip, [pc, #232]	; 1bb98 <_start@@Base+0x6808>
   1baac:	mov	r4, #3
   1bab0:	mov	r3, #1
   1bab4:	mov	r2, r5
   1bab8:	ldr	lr, [pc, #220]	; 1bb9c <_start@@Base+0x680c>
   1babc:	str	r4, [sp]
   1bac0:	ldr	r4, [sp, #116]	; 0x74
   1bac4:	add	ip, pc, ip
   1bac8:	add	ip, ip, #12
   1bacc:	add	lr, pc, lr
   1bad0:	b	1b890 <_start@@Base+0x6500>
   1bad4:	sub	r3, r5, r4
   1bad8:	cmp	r3, #7
   1badc:	ble	1b668 <_start@@Base+0x62d8>
   1bae0:	mov	r1, r4
   1bae4:	mov	r3, #7
   1bae8:	mov	r2, r5
   1baec:	mov	r0, r8
   1baf0:	bl	1924c <_start@@Base+0x3ebc>
   1baf4:	cmp	r4, r0
   1baf8:	mov	r1, r0
   1bafc:	beq	1b668 <_start@@Base+0x62d8>
   1bb00:	mov	ip, #9
   1bb04:	ldr	r0, [pc, #148]	; 1bba0 <_start@@Base+0x6810>
   1bb08:	mov	r3, #4
   1bb0c:	mov	r2, r5
   1bb10:	ldr	lr, [pc, #140]	; 1bba4 <_start@@Base+0x6814>
   1bb14:	str	ip, [sp]
   1bb18:	ldr	ip, [pc, #136]	; 1bba8 <_start@@Base+0x6818>
   1bb1c:	add	r0, pc, r0
   1bb20:	ldr	r4, [sp, #116]	; 0x74
   1bb24:	add	r0, r0, #44	; 0x2c
   1bb28:	add	lr, pc, lr
   1bb2c:	add	ip, pc, ip
   1bb30:	str	r4, [sp, #4]
   1bb34:	str	r0, [sp, #8]
   1bb38:	mov	r0, r8
   1bb3c:	str	ip, [sp, #12]
   1bb40:	str	lr, [sp, #16]
   1bb44:	bl	2fab0 <flatcc_json_parser_union_type_vector@@Base>
   1bb48:	mov	r1, r0
   1bb4c:	b	1b4bc <_start@@Base+0x612c>
   1bb50:	mov	r1, fp
   1bb54:	mov	r2, r5
   1bb58:	mov	r0, r8
   1bb5c:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   1bb60:	mov	r1, r0
   1bb64:	b	1b4bc <_start@@Base+0x612c>
   1bb68:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   1bb6c:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1bb70:	ldrbvs	r0, [r2, #-0]!
   1bb74:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1bb78:	andeq	r0, r0, r0
   1bb7c:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1bb80:	andeq	r0, r0, r4, ror r2
   1bb84:	andeq	r0, r0, r4, lsr r2
   1bb88:	andeq	r9, r3, r8, lsl #13
   1bb8c:	andeq	r0, r0, r4, lsr #3
   1bb90:	andeq	r9, r3, r0, lsr r6
   1bb94:	andeq	r0, r0, ip, asr #2
   1bb98:			; <UNDEFINED> instruction: 0x000395bc
   1bb9c:	ldrdeq	r0, [r0], -r8
   1bba0:	andeq	r9, r3, r4, ror #10
   1bba4:			; <UNDEFINED> instruction: 0xffff9a54
   1bba8:	andeq	r0, r0, r8, ror r0
   1bbac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bbb0:	mov	r5, r2
   1bbb4:	mov	ip, #0
   1bbb8:	strd	r6, [sp, #8]
   1bbbc:	cmp	r3, #9
   1bbc0:	mov	r4, r1
   1bbc4:	strd	r8, [sp, #16]
   1bbc8:	mov	r6, r0
   1bbcc:	strd	sl, [sp, #24]
   1bbd0:	str	lr, [sp, #32]
   1bbd4:	sub	sp, sp, #44	; 0x2c
   1bbd8:	ldr	r2, [sp, #80]	; 0x50
   1bbdc:	str	ip, [r2]
   1bbe0:	beq	1bca8 <_start@@Base+0x6918>
   1bbe4:	bhi	1bc44 <_start@@Base+0x68b4>
   1bbe8:	cmp	r3, #2
   1bbec:	beq	1bf04 <_start@@Base+0x6b74>
   1bbf0:	cmp	r3, #8
   1bbf4:	beq	1bcdc <_start@@Base+0x694c>
   1bbf8:	cmp	r3, ip
   1bbfc:	beq	1bed0 <_start@@Base+0x6b40>
   1bc00:	ldr	r3, [r6, #8]
   1bc04:	mov	r2, r5
   1bc08:	mov	r1, r4
   1bc0c:	mov	r0, r6
   1bc10:	tst	r3, #1
   1bc14:	bne	1bcd0 <_start@@Base+0x6940>
   1bc18:	mov	r3, #15
   1bc1c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1bc20:	mov	r4, r0
   1bc24:	mov	r0, r4
   1bc28:	add	sp, sp, #44	; 0x2c
   1bc2c:	ldrd	r4, [sp]
   1bc30:	ldrd	r6, [sp, #8]
   1bc34:	ldrd	r8, [sp, #16]
   1bc38:	ldrd	sl, [sp, #24]
   1bc3c:	add	sp, sp, #32
   1bc40:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc44:	cmp	r3, #11
   1bc48:	beq	1bc58 <_start@@Base+0x68c8>
   1bc4c:	bcc	1bca8 <_start@@Base+0x6918>
   1bc50:	cmp	r3, #255	; 0xff
   1bc54:	bne	1bc00 <_start@@Base+0x6870>
   1bc58:	mov	r1, r4
   1bc5c:	mov	r2, r5
   1bc60:	ldr	r3, [sp, #80]	; 0x50
   1bc64:	mov	r0, r6
   1bc68:	bl	2f308 <flatcc_json_parser_build_string@@Base>
   1bc6c:	mov	r4, r0
   1bc70:	ldr	r3, [r6, #24]
   1bc74:	cmp	r3, #0
   1bc78:	bne	1bc24 <_start@@Base+0x6894>
   1bc7c:	ldr	r3, [sp, #80]	; 0x50
   1bc80:	ldr	r3, [r3]
   1bc84:	cmp	r3, #0
   1bc88:	bne	1bc24 <_start@@Base+0x6894>
   1bc8c:	mov	r1, r4
   1bc90:	mov	r2, r5
   1bc94:	mov	r0, r6
   1bc98:	mov	r3, #33	; 0x21
   1bc9c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1bca0:	mov	r4, r0
   1bca4:	b	1bc24 <_start@@Base+0x6894>
   1bca8:	mov	r1, r4
   1bcac:	mov	r2, r5
   1bcb0:	ldr	r3, [sp, #80]	; 0x50
   1bcb4:	mov	r0, r6
   1bcb8:	bl	1aa64 <_start@@Base+0x56d4>
   1bcbc:	ldr	r3, [r6, #24]
   1bcc0:	mov	r4, r0
   1bcc4:	cmp	r3, #0
   1bcc8:	beq	1bc7c <_start@@Base+0x68ec>
   1bccc:	b	1bc24 <_start@@Base+0x6894>
   1bcd0:	bl	2e138 <flatcc_json_parser_generic_json@@Base>
   1bcd4:	mov	r4, r0
   1bcd8:	b	1bc24 <_start@@Base+0x6894>
   1bcdc:	mov	r2, #2
   1bce0:	ldr	r0, [r0]
   1bce4:	mov	r1, r2
   1bce8:	bl	26acc <flatcc_builder_start_struct@@Base>
   1bcec:	subs	r3, r0, #0
   1bcf0:	str	r3, [sp, #8]
   1bcf4:	beq	1be94 <_start@@Base+0x6b04>
   1bcf8:	add	fp, sp, #24
   1bcfc:	mov	r1, r4
   1bd00:	mov	r3, fp
   1bd04:	mov	r2, r5
   1bd08:	mov	r0, r6
   1bd0c:	bl	19178 <_start@@Base+0x3de8>
   1bd10:	ldr	r3, [sp, #24]
   1bd14:	mov	r4, r0
   1bd18:	cmp	r3, #0
   1bd1c:	beq	1be74 <_start@@Base+0x6ae4>
   1bd20:	ldr	r3, [pc, #1120]	; 1c188 <_start@@Base+0x6df8>
   1bd24:	add	r3, pc, r3
   1bd28:	add	r3, r3, #104	; 0x68
   1bd2c:	str	r3, [sp, #12]
   1bd30:	cmp	r5, r4
   1bd34:	beq	1bd60 <_start@@Base+0x69d0>
   1bd38:	ldrb	r3, [r4]
   1bd3c:	cmp	r3, #34	; 0x22
   1bd40:	moveq	r3, #0
   1bd44:	addeq	r4, r4, #1
   1bd48:	streq	r3, [r6, #12]
   1bd4c:	beq	1bd60 <_start@@Base+0x69d0>
   1bd50:	cmp	r3, #46	; 0x2e
   1bd54:	movne	r3, #1
   1bd58:	strne	r3, [r6, #12]
   1bd5c:	beq	1c190 <_start@@Base+0x6e00>
   1bd60:	mov	r1, r5
   1bd64:	mov	r0, r4
   1bd68:	bl	15480 <_start@@Base+0xf0>
   1bd6c:	add	r3, pc, #1004	; 0x3ec
   1bd70:	ldrd	r2, [r3]
   1bd74:	cmp	r1, r3
   1bd78:	cmpeq	r0, r2
   1bd7c:	bne	1bebc <_start@@Base+0x6b2c>
   1bd80:	add	r4, r4, #8
   1bd84:	mov	r1, r5
   1bd88:	mov	r0, r4
   1bd8c:	mov	r7, #0
   1bd90:	bl	15480 <_start@@Base+0xf0>
   1bd94:	add	r3, pc, #972	; 0x3cc
   1bd98:	ldrd	r2, [r3]
   1bd9c:	bic	r9, r1, #255	; 0xff
   1bda0:	cmp	r9, r3
   1bda4:	cmpeq	r7, r2
   1bda8:	bne	1bebc <_start@@Base+0x6b2c>
   1bdac:	sub	r3, r5, r4
   1bdb0:	cmp	r3, #3
   1bdb4:	ble	1bebc <_start@@Base+0x6b2c>
   1bdb8:	mov	r3, #3
   1bdbc:	mov	r2, r5
   1bdc0:	mov	r1, r4
   1bdc4:	mov	r0, r6
   1bdc8:	bl	1924c <_start@@Base+0x3ebc>
   1bdcc:	cmp	r4, r0
   1bdd0:	mov	sl, r0
   1bdd4:	beq	1bebc <_start@@Base+0x6b2c>
   1bdd8:	mov	r2, #0
   1bddc:	mov	r3, #0
   1bde0:	strh	r7, [sp, #20]
   1bde4:	cmp	r5, r0
   1bde8:	str	r7, [sp, #28]
   1bdec:	strd	r2, [sp, #32]
   1bdf0:	beq	1c1ac <_start@@Base+0x6e1c>
   1bdf4:	mov	r1, r0
   1bdf8:	add	r0, sp, #32
   1bdfc:	add	r3, sp, #28
   1be00:	mov	r2, r5
   1be04:	str	r0, [sp]
   1be08:	mov	r0, r6
   1be0c:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   1be10:	cmp	sl, r0
   1be14:	mov	r4, r0
   1be18:	bne	1c1b4 <_start@@Base+0x6e24>
   1be1c:	add	r0, sp, #20
   1be20:	mov	r2, r5
   1be24:	ldr	r3, [sp, #12]
   1be28:	mov	r1, r4
   1be2c:	str	r0, [sp]
   1be30:	mov	r0, r6
   1be34:	bl	1a1e4 <_start@@Base+0x4e54>
   1be38:	cmp	r5, r0
   1be3c:	cmpne	r0, r4
   1be40:	beq	1c204 <_start@@Base+0x6e74>
   1be44:	ldrh	r2, [sp, #20]
   1be48:	ldr	r3, [sp, #8]
   1be4c:	strh	r2, [r3]
   1be50:	mov	r1, r0
   1be54:	mov	r3, fp
   1be58:	mov	r2, r5
   1be5c:	mov	r0, r6
   1be60:	bl	1b17c <_start@@Base+0x5dec>
   1be64:	ldr	r3, [sp, #24]
   1be68:	mov	r4, r0
   1be6c:	cmp	r3, #0
   1be70:	bne	1bd30 <_start@@Base+0x69a0>
   1be74:	cmp	r5, r4
   1be78:	beq	1be94 <_start@@Base+0x6b04>
   1be7c:	ldr	r0, [r6]
   1be80:	bl	26b90 <flatcc_builder_end_struct@@Base>
   1be84:	ldr	r3, [sp, #80]	; 0x50
   1be88:	cmp	r0, #0
   1be8c:	str	r0, [r3]
   1be90:	bne	1bc24 <_start@@Base+0x6894>
   1be94:	mov	r1, r4
   1be98:	mov	r3, #33	; 0x21
   1be9c:	mov	r2, r5
   1bea0:	mov	r0, r6
   1bea4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1bea8:	ldr	r3, [r6, #24]
   1beac:	mov	r4, r0
   1beb0:	cmp	r3, #0
   1beb4:	beq	1bc7c <_start@@Base+0x68ec>
   1beb8:	b	1bc24 <_start@@Base+0x6894>
   1bebc:	mov	r1, r4
   1bec0:	mov	r2, r5
   1bec4:	mov	r0, r6
   1bec8:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   1becc:	b	1be50 <_start@@Base+0x6ac0>
   1bed0:	sub	r3, r5, r1
   1bed4:	cmp	r3, #3
   1bed8:	ble	1bee8 <_start@@Base+0x6b58>
   1bedc:	ldrb	r3, [r1]
   1bee0:	cmp	r3, #110	; 0x6e
   1bee4:	beq	1c27c <_start@@Base+0x6eec>
   1bee8:	mov	r1, r4
   1beec:	mov	r2, r5
   1bef0:	mov	r0, r6
   1bef4:	mov	r3, #26
   1bef8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1befc:	mov	r4, r0
   1bf00:	b	1bc24 <_start@@Base+0x6894>
   1bf04:	mov	r1, #1
   1bf08:	ldr	r0, [r0]
   1bf0c:	bl	27878 <flatcc_builder_start_table@@Base>
   1bf10:	cmp	r0, #0
   1bf14:	bne	1be94 <_start@@Base+0x6b04>
   1bf18:	add	r7, sp, #20
   1bf1c:	mov	r1, r4
   1bf20:	mov	r3, r7
   1bf24:	mov	r2, r5
   1bf28:	mov	r0, r6
   1bf2c:	bl	19178 <_start@@Base+0x3de8>
   1bf30:	ldr	r3, [sp, #20]
   1bf34:	mov	r4, r0
   1bf38:	cmp	r3, #0
   1bf3c:	beq	1c104 <_start@@Base+0x6d74>
   1bf40:	ldr	r3, [pc, #580]	; 1c18c <_start@@Base+0x6dfc>
   1bf44:	add	r3, pc, r3
   1bf48:	add	r3, r3, #92	; 0x5c
   1bf4c:	str	r3, [sp, #8]
   1bf50:	cmp	r5, r4
   1bf54:	beq	1bf80 <_start@@Base+0x6bf0>
   1bf58:	ldrb	r3, [r4]
   1bf5c:	cmp	r3, #34	; 0x22
   1bf60:	moveq	r3, #0
   1bf64:	addeq	r4, r4, #1
   1bf68:	streq	r3, [r6, #12]
   1bf6c:	beq	1bf80 <_start@@Base+0x6bf0>
   1bf70:	cmp	r3, #46	; 0x2e
   1bf74:	movne	r3, #1
   1bf78:	strne	r3, [r6, #12]
   1bf7c:	beq	1c144 <_start@@Base+0x6db4>
   1bf80:	mov	r1, r5
   1bf84:	mov	r0, r4
   1bf88:	bl	15480 <_start@@Base+0xf0>
   1bf8c:	add	r3, pc, #476	; 0x1dc
   1bf90:	ldrd	r2, [r3]
   1bf94:	cmp	r1, r3
   1bf98:	cmpeq	r0, r2
   1bf9c:	bne	1c0cc <_start@@Base+0x6d3c>
   1bfa0:	add	r8, r4, #8
   1bfa4:	mov	r1, r5
   1bfa8:	mov	r0, r8
   1bfac:	bl	15480 <_start@@Base+0xf0>
   1bfb0:	add	r3, pc, #448	; 0x1c0
   1bfb4:	ldrd	r2, [r3]
   1bfb8:	cmp	r1, r3
   1bfbc:	cmpeq	r0, r2
   1bfc0:	bne	1c12c <_start@@Base+0x6d9c>
   1bfc4:	add	r4, r4, #16
   1bfc8:	mov	r1, r5
   1bfcc:	mov	r0, r4
   1bfd0:	mov	r8, #0
   1bfd4:	bl	15480 <_start@@Base+0xf0>
   1bfd8:	add	r3, pc, #416	; 0x1a0
   1bfdc:	ldrd	r2, [r3]
   1bfe0:	bic	fp, r1, #255	; 0xff
   1bfe4:	cmp	fp, r3
   1bfe8:	cmpeq	r8, r2
   1bfec:	bne	1c0cc <_start@@Base+0x6d3c>
   1bff0:	sub	r3, r5, r4
   1bff4:	cmp	r3, #3
   1bff8:	ble	1c0cc <_start@@Base+0x6d3c>
   1bffc:	mov	r3, #3
   1c000:	mov	r2, r5
   1c004:	mov	r1, r4
   1c008:	mov	r0, r6
   1c00c:	bl	1924c <_start@@Base+0x3ebc>
   1c010:	cmp	r4, r0
   1c014:	mov	r9, r0
   1c018:	beq	1c0cc <_start@@Base+0x6d3c>
   1c01c:	mov	r2, #0
   1c020:	mov	r3, #0
   1c024:	str	r8, [sp, #24]
   1c028:	cmp	r5, r0
   1c02c:	str	r8, [sp, #28]
   1c030:	strd	r2, [sp, #32]
   1c034:	beq	1c228 <_start@@Base+0x6e98>
   1c038:	mov	r1, r0
   1c03c:	add	r0, sp, #32
   1c040:	add	r3, sp, #28
   1c044:	mov	r2, r5
   1c048:	str	r0, [sp]
   1c04c:	mov	r0, r6
   1c050:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   1c054:	cmp	r9, r0
   1c058:	mov	r4, r0
   1c05c:	bne	1c230 <_start@@Base+0x6ea0>
   1c060:	add	r0, sp, #24
   1c064:	mov	r2, r5
   1c068:	ldr	r3, [sp, #8]
   1c06c:	mov	r1, r4
   1c070:	str	r0, [sp]
   1c074:	mov	r0, r6
   1c078:	bl	19fc4 <_start@@Base+0x4c34>
   1c07c:	cmp	r5, r0
   1c080:	cmpne	r0, r4
   1c084:	beq	1c220 <_start@@Base+0x6e90>
   1c088:	ldr	r2, [sp, #24]
   1c08c:	mov	r4, r0
   1c090:	cmp	r2, #0
   1c094:	bne	1c0a4 <_start@@Base+0x6d14>
   1c098:	ldr	r3, [r6, #8]
   1c09c:	tst	r3, #2
   1c0a0:	beq	1c0e0 <_start@@Base+0x6d50>
   1c0a4:	mov	r3, #4
   1c0a8:	mov	r1, #0
   1c0ac:	ldr	r0, [r6]
   1c0b0:	mov	r2, r3
   1c0b4:	bl	293ac <flatcc_builder_table_add@@Base>
   1c0b8:	cmp	r0, #0
   1c0bc:	beq	1be94 <_start@@Base+0x6b04>
   1c0c0:	ldr	r3, [sp, #24]
   1c0c4:	str	r3, [r0]
   1c0c8:	b	1c0e0 <_start@@Base+0x6d50>
   1c0cc:	mov	r1, r4
   1c0d0:	mov	r2, r5
   1c0d4:	mov	r0, r6
   1c0d8:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   1c0dc:	mov	r4, r0
   1c0e0:	mov	r1, r4
   1c0e4:	mov	r3, r7
   1c0e8:	mov	r2, r5
   1c0ec:	mov	r0, r6
   1c0f0:	bl	1b17c <_start@@Base+0x5dec>
   1c0f4:	ldr	r3, [sp, #20]
   1c0f8:	mov	r4, r0
   1c0fc:	cmp	r3, #0
   1c100:	bne	1bf50 <_start@@Base+0x6bc0>
   1c104:	ldr	r3, [r6, #24]
   1c108:	cmp	r3, #0
   1c10c:	bne	1be94 <_start@@Base+0x6b04>
   1c110:	ldr	r0, [r6]
   1c114:	bl	2825c <flatcc_builder_end_table@@Base>
   1c118:	ldr	r3, [sp, #80]	; 0x50
   1c11c:	cmp	r0, #0
   1c120:	str	r0, [r3]
   1c124:	bne	1bc70 <_start@@Base+0x68e0>
   1c128:	b	1be94 <_start@@Base+0x6b04>
   1c12c:	mov	r1, r8
   1c130:	mov	r2, r5
   1c134:	mov	r0, r6
   1c138:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   1c13c:	mov	r4, r0
   1c140:	b	1c0e0 <_start@@Base+0x6d50>
   1c144:	mov	r1, r4
   1c148:	mov	r3, #5
   1c14c:	mov	r2, r5
   1c150:	mov	r0, r6
   1c154:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1c158:	mov	r4, r0
   1c15c:	b	1bf80 <_start@@Base+0x6bf0>
   1c160:	svcpl	0x006c656e
   1c164:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   1c168:	andeq	r0, r0, r0
   1c16c:	ldrbvs	r6, [r4, -r0, lsl #16]!
   1c170:	ldrbvs	r6, [pc], #-372	; 1c178 <_start@@Base+0x6de8>
   1c174:	cmnvc	r7, #456	; 0x1c8
   1c178:	svcpl	0x0064616d
   1c17c:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   1c180:	andeq	r0, r0, r0
   1c184:	cmnvs	r7, r0, lsl #10
   1c188:	andeq	r9, r3, ip, asr r3
   1c18c:	andeq	r9, r3, ip, lsr r1
   1c190:	mov	r1, r4
   1c194:	mov	r3, #5
   1c198:	mov	r2, r5
   1c19c:	mov	r0, r6
   1c1a0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1c1a4:	mov	r4, r0
   1c1a8:	b	1bd60 <_start@@Base+0x69d0>
   1c1ac:	mov	r4, r5
   1c1b0:	b	1be1c <_start@@Base+0x6a8c>
   1c1b4:	ldr	r3, [sp, #28]
   1c1b8:	cmp	r3, r7
   1c1bc:	bne	1c2e0 <_start@@Base+0x6f50>
   1c1c0:	ldrd	r2, [sp, #32]
   1c1c4:	mov	r1, #0
   1c1c8:	movw	r0, #65535	; 0xffff
   1c1cc:	cmp	r3, r1
   1c1d0:	cmpeq	r2, r0
   1c1d4:	uxthls	r2, r2
   1c1d8:	movls	r0, r4
   1c1dc:	bls	1be48 <_start@@Base+0x6ab8>
   1c1e0:	mov	r1, r4
   1c1e4:	mov	r3, #7
   1c1e8:	mov	r2, r5
   1c1ec:	mov	r0, r6
   1c1f0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1c1f4:	cmp	sl, r0
   1c1f8:	bne	1be44 <_start@@Base+0x6ab4>
   1c1fc:	mov	r4, sl
   1c200:	b	1be1c <_start@@Base+0x6a8c>
   1c204:	mov	r1, r0
   1c208:	mov	r3, #33	; 0x21
   1c20c:	mov	r2, r5
   1c210:	mov	r0, r6
   1c214:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1c218:	mov	r4, r0
   1c21c:	b	1be74 <_start@@Base+0x6ae4>
   1c220:	mov	r4, r0
   1c224:	b	1be94 <_start@@Base+0x6b04>
   1c228:	mov	r4, r5
   1c22c:	b	1c060 <_start@@Base+0x6cd0>
   1c230:	ldr	r1, [sp, #28]
   1c234:	ldrd	r2, [sp, #32]
   1c238:	cmp	r1, r8
   1c23c:	beq	1c2ac <_start@@Base+0x6f1c>
   1c240:	cmp	r3, #0
   1c244:	cmpeq	r2, #-2147483648	; 0x80000000
   1c248:	rsbls	r2, r2, #0
   1c24c:	strls	r2, [sp, #24]
   1c250:	bls	1c090 <_start@@Base+0x6d00>
   1c254:	mov	r1, r0
   1c258:	mov	r3, #8
   1c25c:	mov	r2, r5
   1c260:	mov	r0, r6
   1c264:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1c268:	mov	r4, r0
   1c26c:	cmp	r9, r4
   1c270:	beq	1c060 <_start@@Base+0x6cd0>
   1c274:	ldr	r2, [sp, #24]
   1c278:	b	1c090 <_start@@Base+0x6d00>
   1c27c:	ldrb	r3, [r1, #1]
   1c280:	add	r2, r1, #1
   1c284:	cmp	r3, #117	; 0x75
   1c288:	bne	1bee8 <_start@@Base+0x6b58>
   1c28c:	ldrb	r3, [r2, #1]!
   1c290:	cmp	r3, #108	; 0x6c
   1c294:	bne	1bee8 <_start@@Base+0x6b58>
   1c298:	ldrb	r3, [r2, #1]
   1c29c:	cmp	r3, #108	; 0x6c
   1c2a0:	addeq	r4, r1, #4
   1c2a4:	bne	1bee8 <_start@@Base+0x6b58>
   1c2a8:	b	1bc24 <_start@@Base+0x6894>
   1c2ac:	mov	r1, #0
   1c2b0:	mvn	r0, #-2147483648	; 0x80000000
   1c2b4:	cmp	r3, r1
   1c2b8:	cmpeq	r2, r0
   1c2bc:	strls	r2, [sp, #24]
   1c2c0:	bls	1c090 <_start@@Base+0x6d00>
   1c2c4:	mov	r1, r4
   1c2c8:	mov	r3, #7
   1c2cc:	mov	r2, r5
   1c2d0:	mov	r0, r6
   1c2d4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1c2d8:	mov	r4, r0
   1c2dc:	b	1c26c <_start@@Base+0x6edc>
   1c2e0:	mov	r1, r0
   1c2e4:	mov	r3, #8
   1c2e8:	mov	r2, r5
   1c2ec:	mov	r0, r6
   1c2f0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1c2f4:	b	1c1f4 <_start@@Base+0x6e64>
   1c2f8:	strd	r4, [sp, #-16]!
   1c2fc:	mov	r4, r2
   1c300:	sub	r2, r2, r1
   1c304:	cmp	r2, #1
   1c308:	mov	r5, r0
   1c30c:	str	r6, [sp, #8]
   1c310:	mov	r6, r3
   1c314:	str	lr, [sp, #12]
   1c318:	ble	1c32c <_start@@Base+0x6f9c>
   1c31c:	ldrb	r3, [r1]
   1c320:	cmp	r3, #32
   1c324:	bhi	1c33c <_start@@Base+0x6fac>
   1c328:	beq	1c42c <_start@@Base+0x709c>
   1c32c:	mov	r2, r4
   1c330:	mov	r0, r5
   1c334:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1c338:	mov	r1, r0
   1c33c:	cmp	r4, r1
   1c340:	moveq	r3, #0
   1c344:	moveq	r0, r4
   1c348:	streq	r3, [r6]
   1c34c:	beq	1c41c <_start@@Base+0x708c>
   1c350:	ldrb	r3, [r1]
   1c354:	cmp	r3, #44	; 0x2c
   1c358:	beq	1c3d0 <_start@@Base+0x7040>
   1c35c:	mov	r3, #0
   1c360:	str	r3, [r6]
   1c364:	ldrb	r3, [r1]
   1c368:	cmp	r3, #93	; 0x5d
   1c36c:	beq	1c390 <_start@@Base+0x7000>
   1c370:	mov	r2, r4
   1c374:	mov	r0, r5
   1c378:	mov	r3, #9
   1c37c:	ldrd	r4, [sp]
   1c380:	ldr	r6, [sp, #8]
   1c384:	ldr	lr, [sp, #12]
   1c388:	add	sp, sp, #16
   1c38c:	b	2cff0 <flatcc_json_parser_set_error@@Base>
   1c390:	add	r0, r1, #1
   1c394:	sub	r3, r4, r0
   1c398:	cmp	r3, #1
   1c39c:	ble	1c3b0 <_start@@Base+0x7020>
   1c3a0:	ldrb	r3, [r1, #1]
   1c3a4:	cmp	r3, #32
   1c3a8:	bhi	1c41c <_start@@Base+0x708c>
   1c3ac:	beq	1c478 <_start@@Base+0x70e8>
   1c3b0:	mov	r2, r4
   1c3b4:	mov	r1, r0
   1c3b8:	ldr	r6, [sp, #8]
   1c3bc:	mov	r0, r5
   1c3c0:	ldrd	r4, [sp]
   1c3c4:	ldr	lr, [sp, #12]
   1c3c8:	add	sp, sp, #16
   1c3cc:	b	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1c3d0:	add	r0, r1, #1
   1c3d4:	sub	r3, r4, r0
   1c3d8:	cmp	r3, #1
   1c3dc:	ble	1c3f0 <_start@@Base+0x7060>
   1c3e0:	ldrb	r3, [r1, #1]
   1c3e4:	cmp	r3, #32
   1c3e8:	bhi	1c400 <_start@@Base+0x7070>
   1c3ec:	beq	1c48c <_start@@Base+0x70fc>
   1c3f0:	mov	r1, r0
   1c3f4:	mov	r2, r4
   1c3f8:	mov	r0, r5
   1c3fc:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1c400:	cmp	r4, r0
   1c404:	beq	1c4a0 <_start@@Base+0x7110>
   1c408:	ldrb	r3, [r0]
   1c40c:	cmp	r3, #93	; 0x5d
   1c410:	movne	r3, #1
   1c414:	strne	r3, [r6]
   1c418:	beq	1c450 <_start@@Base+0x70c0>
   1c41c:	ldrd	r4, [sp]
   1c420:	ldr	r6, [sp, #8]
   1c424:	add	sp, sp, #12
   1c428:	pop	{pc}		; (ldr pc, [sp], #4)
   1c42c:	ldrb	r3, [r1, #1]
   1c430:	cmp	r3, #32
   1c434:	addhi	r1, r1, #1
   1c438:	bhi	1c33c <_start@@Base+0x6fac>
   1c43c:	mov	r2, r4
   1c440:	mov	r0, r5
   1c444:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1c448:	mov	r1, r0
   1c44c:	b	1c33c <_start@@Base+0x6fac>
   1c450:	mov	r3, #0
   1c454:	mov	r2, r4
   1c458:	ldr	lr, [sp, #12]
   1c45c:	add	r1, r0, #1
   1c460:	mov	r0, r5
   1c464:	ldrd	r4, [sp]
   1c468:	str	r3, [r6]
   1c46c:	ldr	r6, [sp, #8]
   1c470:	add	sp, sp, #16
   1c474:	b	17470 <_start@@Base+0x20e0>
   1c478:	ldrb	r3, [r1, #2]
   1c47c:	cmp	r3, #32
   1c480:	addhi	r0, r1, #2
   1c484:	bls	1c3b0 <_start@@Base+0x7020>
   1c488:	b	1c41c <_start@@Base+0x708c>
   1c48c:	ldrb	r3, [r1, #2]
   1c490:	cmp	r3, #32
   1c494:	addhi	r0, r1, #2
   1c498:	bls	1c3f0 <_start@@Base+0x7060>
   1c49c:	b	1c400 <_start@@Base+0x7070>
   1c4a0:	mov	ip, #0
   1c4a4:	mov	r0, r5
   1c4a8:	mov	r3, #9
   1c4ac:	mov	r2, r4
   1c4b0:	mov	r1, r4
   1c4b4:	str	ip, [r6]
   1c4b8:	b	1c37c <_start@@Base+0x6fec>
   1c4bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c4c0:	mov	r4, r1
   1c4c4:	mov	r5, r0
   1c4c8:	strd	r6, [sp, #8]
   1c4cc:	strd	r8, [sp, #16]
   1c4d0:	strd	sl, [sp, #24]
   1c4d4:	mov	sl, r2
   1c4d8:	mov	fp, r3
   1c4dc:	str	lr, [sp, #32]
   1c4e0:	sub	sp, sp, #12
   1c4e4:	ldrd	r2, [sp, #48]	; 0x30
   1c4e8:	strd	r2, [sp]
   1c4ec:	sub	r2, sl, r1
   1c4f0:	cmp	r2, #8
   1c4f4:	bhi	1c528 <_start@@Base+0x7198>
   1c4f8:	sub	r2, r2, #1
   1c4fc:	cmp	r2, #7
   1c500:	addls	pc, pc, r2, lsl #2
   1c504:	b	1c600 <_start@@Base+0x7270>
   1c508:	b	1c620 <_start@@Base+0x7290>
   1c50c:	b	1c62c <_start@@Base+0x729c>
   1c510:	b	1c638 <_start@@Base+0x72a8>
   1c514:	b	1c644 <_start@@Base+0x72b4>
   1c518:	b	1c650 <_start@@Base+0x72c0>
   1c51c:	b	1c65c <_start@@Base+0x72cc>
   1c520:	b	1c668 <_start@@Base+0x72d8>
   1c524:	b	1c528 <_start@@Base+0x7198>
   1c528:	ldrb	r6, [r4, #7]
   1c52c:	mov	r7, #0
   1c530:	mov	r3, r7
   1c534:	ldrb	r0, [r4, #6]
   1c538:	orr	r2, r6, r0, lsl #8
   1c53c:	ldrb	r0, [r4, #5]
   1c540:	orr	r2, r2, r0, lsl #16
   1c544:	ldrb	r0, [r4, #4]
   1c548:	orr	r2, r2, r0, lsl #24
   1c54c:	ldrb	r8, [r4, #3]
   1c550:	orr	r3, r3, r8
   1c554:	ldrb	r6, [r4, #2]
   1c558:	orr	r3, r3, r6, lsl #8
   1c55c:	ldrb	r6, [r4, #1]
   1c560:	orr	r3, r3, r6, lsl #16
   1c564:	ldrb	r8, [r4]
   1c568:	add	r7, pc, #264	; 0x108
   1c56c:	ldrd	r6, [r7]
   1c570:	orr	r1, r3, r8, lsl #24
   1c574:	mov	r8, #0
   1c578:	cmp	r1, r7
   1c57c:	cmpeq	r2, r6
   1c580:	bne	1c600 <_start@@Base+0x7270>
   1c584:	add	r6, r4, #8
   1c588:	mov	r1, sl
   1c58c:	mov	r0, r6
   1c590:	bl	15480 <_start@@Base+0xf0>
   1c594:	and	r3, r1, #-16777216	; 0xff000000
   1c598:	cmp	r3, #1912602624	; 0x72000000
   1c59c:	cmpeq	r8, #0
   1c5a0:	bne	1c600 <_start@@Base+0x7270>
   1c5a4:	sub	r3, sl, r6
   1c5a8:	cmp	r3, #1
   1c5ac:	ble	1c600 <_start@@Base+0x7270>
   1c5b0:	ldrb	r3, [r4, #9]
   1c5b4:	cmp	r3, #46	; 0x2e
   1c5b8:	bne	1c600 <_start@@Base+0x7270>
   1c5bc:	add	r1, r4, #10
   1c5c0:	cmp	r6, r1
   1c5c4:	beq	1c600 <_start@@Base+0x7270>
   1c5c8:	ldm	sp, {r0, ip}
   1c5cc:	mov	r3, fp
   1c5d0:	mov	r2, sl
   1c5d4:	str	r0, [sp, #48]	; 0x30
   1c5d8:	mov	r0, r5
   1c5dc:	str	ip, [sp, #52]	; 0x34
   1c5e0:	add	sp, sp, #12
   1c5e4:	ldrd	r4, [sp]
   1c5e8:	ldrd	r6, [sp, #8]
   1c5ec:	ldrd	r8, [sp, #16]
   1c5f0:	ldrd	sl, [sp, #24]
   1c5f4:	ldr	lr, [sp, #32]
   1c5f8:	add	sp, sp, #36	; 0x24
   1c5fc:	b	16820 <_start@@Base+0x1490>
   1c600:	mov	r0, r4
   1c604:	add	sp, sp, #12
   1c608:	ldrd	r4, [sp]
   1c60c:	ldrd	r6, [sp, #8]
   1c610:	ldrd	r8, [sp, #16]
   1c614:	ldrd	sl, [sp, #24]
   1c618:	add	sp, sp, #32
   1c61c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c620:	mov	r2, #0
   1c624:	mov	r3, r2
   1c628:	b	1c564 <_start@@Base+0x71d4>
   1c62c:	mov	r2, #0
   1c630:	mov	r3, r2
   1c634:	b	1c55c <_start@@Base+0x71cc>
   1c638:	mov	r2, #0
   1c63c:	mov	r3, r2
   1c640:	b	1c554 <_start@@Base+0x71c4>
   1c644:	mov	r2, #0
   1c648:	mov	r3, r2
   1c64c:	b	1c54c <_start@@Base+0x71bc>
   1c650:	mov	r2, #0
   1c654:	mov	r3, r2
   1c658:	b	1c544 <_start@@Base+0x71b4>
   1c65c:	mov	r2, #0
   1c660:	mov	r3, r2
   1c664:	b	1c53c <_start@@Base+0x71ac>
   1c668:	mov	r6, #0
   1c66c:	mov	r7, #0
   1c670:	b	1c530 <_start@@Base+0x71a0>
   1c674:	nop	{0}
   1c678:	cmnvs	r3, r5, ror #8
   1c67c:	cmnmi	r8, #-2147483620	; 0x8000001c
   1c680:	cmp	r1, r2
   1c684:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c688:	strd	r6, [sp, #8]
   1c68c:	mov	r6, r2
   1c690:	mov	r7, r0
   1c694:	strd	r8, [sp, #16]
   1c698:	strd	sl, [sp, #24]
   1c69c:	str	lr, [sp, #32]
   1c6a0:	sub	sp, sp, #36	; 0x24
   1c6a4:	beq	1c6b8 <_start@@Base+0x7328>
   1c6a8:	mov	fp, r3
   1c6ac:	ldrb	r3, [r1]
   1c6b0:	cmp	r3, #123	; 0x7b
   1c6b4:	beq	1c6ec <_start@@Base+0x735c>
   1c6b8:	mov	r2, r6
   1c6bc:	mov	r0, r7
   1c6c0:	mov	r3, #21
   1c6c4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1c6c8:	mov	r5, r0
   1c6cc:	mov	r0, r5
   1c6d0:	add	sp, sp, #36	; 0x24
   1c6d4:	ldrd	r4, [sp]
   1c6d8:	ldrd	r6, [sp, #8]
   1c6dc:	ldrd	r8, [sp, #16]
   1c6e0:	ldrd	sl, [sp, #24]
   1c6e4:	add	sp, sp, #32
   1c6e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6ec:	add	r4, r1, #1
   1c6f0:	sub	r3, r2, r4
   1c6f4:	cmp	r3, #1
   1c6f8:	ble	1c70c <_start@@Base+0x737c>
   1c6fc:	ldrb	r3, [r1, #1]
   1c700:	cmp	r3, #32
   1c704:	bhi	1c720 <_start@@Base+0x7390>
   1c708:	beq	1ce00 <_start@@Base+0x7a70>
   1c70c:	mov	r1, r4
   1c710:	mov	r2, r6
   1c714:	mov	r0, r7
   1c718:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1c71c:	mov	r4, r0
   1c720:	cmp	r6, r4
   1c724:	beq	1c734 <_start@@Base+0x73a4>
   1c728:	ldrb	r3, [r4]
   1c72c:	cmp	r3, #125	; 0x7d
   1c730:	beq	1ce14 <_start@@Base+0x7a84>
   1c734:	ldr	r2, [pc, #1776]	; 1ce2c <_start@@Base+0x7a9c>
   1c738:	ldr	r3, [pc, #1776]	; 1ce30 <_start@@Base+0x7aa0>
   1c73c:	add	r2, pc, r2
   1c740:	add	r2, r2, #128	; 0x80
   1c744:	add	r3, pc, r3
   1c748:	add	r3, r3, #116	; 0x74
   1c74c:	strd	r2, [sp, #8]
   1c750:	cmp	r6, r4
   1c754:	beq	1c948 <_start@@Base+0x75b8>
   1c758:	ldrb	r3, [r4]
   1c75c:	cmp	r3, #34	; 0x22
   1c760:	moveq	r3, #0
   1c764:	addeq	r4, r4, #1
   1c768:	streq	r3, [r7, #12]
   1c76c:	beq	1c780 <_start@@Base+0x73f0>
   1c770:	cmp	r3, #46	; 0x2e
   1c774:	movne	r3, #1
   1c778:	strne	r3, [r7, #12]
   1c77c:	beq	1cbbc <_start@@Base+0x782c>
   1c780:	sub	r2, r6, r4
   1c784:	cmp	r2, #8
   1c788:	bls	1c960 <_start@@Base+0x75d0>
   1c78c:	mov	r1, #0
   1c790:	mov	r3, r1
   1c794:	ldrb	r0, [r4, #3]
   1c798:	orr	r3, r3, r0
   1c79c:	ldrb	r0, [r4, #2]
   1c7a0:	orr	r3, r3, r0, lsl #8
   1c7a4:	ldrb	r0, [r4, #1]
   1c7a8:	orr	r3, r3, r0, lsl #16
   1c7ac:	ldrb	r0, [r4]
   1c7b0:	mov	r8, #0
   1c7b4:	orr	r3, r3, r0, lsl #24
   1c7b8:	and	r9, r3, #-16777216	; 0xff000000
   1c7bc:	cmp	r9, #1644167168	; 0x62000000
   1c7c0:	cmpeq	r8, #0
   1c7c4:	beq	1c9b0 <_start@@Base+0x7620>
   1c7c8:	cmp	r9, #1627389952	; 0x61000000
   1c7cc:	cmpeq	r8, #0
   1c7d0:	bne	1c948 <_start@@Base+0x75b8>
   1c7d4:	cmp	r2, #1
   1c7d8:	ble	1c948 <_start@@Base+0x75b8>
   1c7dc:	ldr	r2, [r7, #12]
   1c7e0:	ldrb	r3, [r4, #1]
   1c7e4:	cmp	r2, #0
   1c7e8:	beq	1cb9c <_start@@Base+0x780c>
   1c7ec:	cmp	r3, #58	; 0x3a
   1c7f0:	cmpne	r3, #32
   1c7f4:	movhi	r3, #1
   1c7f8:	movls	r3, #0
   1c7fc:	bhi	1c948 <_start@@Base+0x75b8>
   1c800:	add	r1, r4, #1
   1c804:	str	r3, [r7, #12]
   1c808:	sub	r3, r6, r1
   1c80c:	cmp	r3, #1
   1c810:	ble	1c824 <_start@@Base+0x7494>
   1c814:	ldrb	r3, [r1]
   1c818:	cmp	r3, #32
   1c81c:	bhi	1c834 <_start@@Base+0x74a4>
   1c820:	beq	1cd2c <_start@@Base+0x799c>
   1c824:	mov	r2, r6
   1c828:	mov	r0, r7
   1c82c:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1c830:	mov	r1, r0
   1c834:	cmp	r6, r1
   1c838:	beq	1c848 <_start@@Base+0x74b8>
   1c83c:	ldrb	r3, [r1]
   1c840:	cmp	r3, #58	; 0x3a
   1c844:	beq	1cd88 <_start@@Base+0x79f8>
   1c848:	mov	r3, #4
   1c84c:	mov	r2, r6
   1c850:	mov	r0, r7
   1c854:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1c858:	mov	sl, r0
   1c85c:	cmp	sl, r4
   1c860:	beq	1c948 <_start@@Base+0x75b8>
   1c864:	mov	r3, #0
   1c868:	mov	r0, #0
   1c86c:	mov	r1, #0
   1c870:	cmp	r6, sl
   1c874:	strh	r3, [sp, #18]
   1c878:	str	r3, [sp, #20]
   1c87c:	strd	r0, [sp, #24]
   1c880:	beq	1cbb4 <_start@@Base+0x7824>
   1c884:	add	r0, sp, #24
   1c888:	add	r3, sp, #20
   1c88c:	mov	r2, r6
   1c890:	mov	r1, sl
   1c894:	str	r0, [sp]
   1c898:	mov	r0, r7
   1c89c:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   1c8a0:	cmp	sl, r0
   1c8a4:	mov	r5, r0
   1c8a8:	bne	1cc18 <_start@@Base+0x7888>
   1c8ac:	add	r0, sp, #18
   1c8b0:	mov	r2, r6
   1c8b4:	ldr	r3, [sp, #8]
   1c8b8:	mov	r1, r5
   1c8bc:	str	r0, [sp]
   1c8c0:	mov	r0, r7
   1c8c4:	bl	19d90 <_start@@Base+0x4a00>
   1c8c8:	cmp	r6, r0
   1c8cc:	cmpne	r0, r5
   1c8d0:	beq	1cde4 <_start@@Base+0x7a54>
   1c8d4:	ldrsh	r2, [sp, #18]
   1c8d8:	mov	r5, r0
   1c8dc:	strh	r2, [fp]
   1c8e0:	sub	r3, r6, r5
   1c8e4:	cmp	r3, #1
   1c8e8:	ble	1c8fc <_start@@Base+0x756c>
   1c8ec:	ldrb	r3, [r5]
   1c8f0:	cmp	r3, #32
   1c8f4:	bhi	1c910 <_start@@Base+0x7580>
   1c8f8:	beq	1caf8 <_start@@Base+0x7768>
   1c8fc:	mov	r1, r5
   1c900:	mov	r2, r6
   1c904:	mov	r0, r7
   1c908:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1c90c:	mov	r5, r0
   1c910:	cmp	r6, r5
   1c914:	beq	1c6cc <_start@@Base+0x733c>
   1c918:	ldrb	r3, [r5]
   1c91c:	cmp	r3, #44	; 0x2c
   1c920:	beq	1cb0c <_start@@Base+0x777c>
   1c924:	cmp	r3, #125	; 0x7d
   1c928:	beq	1cac0 <_start@@Base+0x7730>
   1c92c:	mov	r1, r5
   1c930:	mov	r2, r6
   1c934:	mov	r0, r7
   1c938:	mov	r3, #10
   1c93c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1c940:	mov	r5, r0
   1c944:	b	1c6cc <_start@@Base+0x733c>
   1c948:	mov	r1, r4
   1c94c:	mov	r2, r6
   1c950:	mov	r0, r7
   1c954:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   1c958:	mov	r5, r0
   1c95c:	b	1c8e0 <_start@@Base+0x7550>
   1c960:	sub	r3, r2, #1
   1c964:	cmp	r3, #7
   1c968:	addls	pc, pc, r3, lsl #2
   1c96c:	b	1c948 <_start@@Base+0x75b8>
   1c970:	b	1c9a8 <_start@@Base+0x7618>
   1c974:	b	1c9a0 <_start@@Base+0x7610>
   1c978:	b	1c998 <_start@@Base+0x7608>
   1c97c:	b	1c990 <_start@@Base+0x7600>
   1c980:	b	1c990 <_start@@Base+0x7600>
   1c984:	b	1c990 <_start@@Base+0x7600>
   1c988:	b	1c78c <_start@@Base+0x73fc>
   1c98c:	b	1c78c <_start@@Base+0x73fc>
   1c990:	mov	r3, #0
   1c994:	b	1c794 <_start@@Base+0x7404>
   1c998:	mov	r3, #0
   1c99c:	b	1c79c <_start@@Base+0x740c>
   1c9a0:	mov	r3, #0
   1c9a4:	b	1c7a4 <_start@@Base+0x7414>
   1c9a8:	mov	r3, #0
   1c9ac:	b	1c7ac <_start@@Base+0x741c>
   1c9b0:	cmp	r2, #1
   1c9b4:	ble	1c948 <_start@@Base+0x75b8>
   1c9b8:	ldr	r2, [r7, #12]
   1c9bc:	ldrb	r3, [r4, #1]
   1c9c0:	cmp	r2, r8
   1c9c4:	beq	1cb8c <_start@@Base+0x77fc>
   1c9c8:	cmp	r3, #58	; 0x3a
   1c9cc:	cmpne	r3, #32
   1c9d0:	movhi	r3, #1
   1c9d4:	movls	r3, #0
   1c9d8:	bhi	1c948 <_start@@Base+0x75b8>
   1c9dc:	add	r1, r4, #1
   1c9e0:	str	r3, [r7, #12]
   1c9e4:	sub	r3, r6, r1
   1c9e8:	cmp	r3, #1
   1c9ec:	ble	1ca00 <_start@@Base+0x7670>
   1c9f0:	ldrb	r3, [r1]
   1c9f4:	cmp	r3, #32
   1c9f8:	bhi	1ca10 <_start@@Base+0x7680>
   1c9fc:	beq	1cd18 <_start@@Base+0x7988>
   1ca00:	mov	r2, r6
   1ca04:	mov	r0, r7
   1ca08:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1ca0c:	mov	r1, r0
   1ca10:	cmp	r6, r1
   1ca14:	beq	1ca24 <_start@@Base+0x7694>
   1ca18:	ldrb	r3, [r1]
   1ca1c:	cmp	r3, #58	; 0x3a
   1ca20:	beq	1cd40 <_start@@Base+0x79b0>
   1ca24:	mov	r3, #4
   1ca28:	mov	r2, r6
   1ca2c:	mov	r0, r7
   1ca30:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1ca34:	mov	sl, r0
   1ca38:	cmp	sl, r4
   1ca3c:	beq	1c948 <_start@@Base+0x75b8>
   1ca40:	mov	r3, #0
   1ca44:	mov	r0, #0
   1ca48:	mov	r1, #0
   1ca4c:	cmp	r6, sl
   1ca50:	strb	r3, [sp, #18]
   1ca54:	str	r3, [sp, #20]
   1ca58:	strd	r0, [sp, #24]
   1ca5c:	beq	1cbac <_start@@Base+0x781c>
   1ca60:	add	r0, sp, #24
   1ca64:	add	r3, sp, #20
   1ca68:	mov	r2, r6
   1ca6c:	mov	r1, sl
   1ca70:	str	r0, [sp]
   1ca74:	mov	r0, r7
   1ca78:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   1ca7c:	cmp	sl, r0
   1ca80:	mov	r5, r0
   1ca84:	bne	1cbd8 <_start@@Base+0x7848>
   1ca88:	add	r0, sp, #18
   1ca8c:	mov	r2, r6
   1ca90:	ldr	r3, [sp, #12]
   1ca94:	mov	r1, r5
   1ca98:	str	r0, [sp]
   1ca9c:	mov	r0, r7
   1caa0:	bl	1a3f4 <_start@@Base+0x5064>
   1caa4:	cmp	r6, r0
   1caa8:	cmpne	r0, r5
   1caac:	beq	1cde4 <_start@@Base+0x7a54>
   1cab0:	ldrsb	r2, [sp, #18]
   1cab4:	mov	r5, r0
   1cab8:	strb	r2, [fp, #2]
   1cabc:	b	1c8e0 <_start@@Base+0x7550>
   1cac0:	add	r1, r5, #1
   1cac4:	sub	r3, r6, r1
   1cac8:	cmp	r3, #1
   1cacc:	ble	1cae4 <_start@@Base+0x7754>
   1cad0:	ldrb	r3, [r5, #1]
   1cad4:	cmp	r3, #32
   1cad8:	movhi	r5, r1
   1cadc:	bhi	1c6cc <_start@@Base+0x733c>
   1cae0:	beq	1cc64 <_start@@Base+0x78d4>
   1cae4:	mov	r2, r6
   1cae8:	mov	r0, r7
   1caec:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1caf0:	mov	r5, r0
   1caf4:	b	1c6cc <_start@@Base+0x733c>
   1caf8:	ldrb	r3, [r5, #1]
   1cafc:	cmp	r3, #32
   1cb00:	addhi	r5, r5, #1
   1cb04:	bls	1c8fc <_start@@Base+0x756c>
   1cb08:	b	1c910 <_start@@Base+0x7580>
   1cb0c:	add	r4, r5, #1
   1cb10:	sub	r3, r6, r4
   1cb14:	cmp	r3, #1
   1cb18:	ble	1cb2c <_start@@Base+0x779c>
   1cb1c:	ldrb	r3, [r5, #1]
   1cb20:	cmp	r3, #32
   1cb24:	bhi	1cb40 <_start@@Base+0x77b0>
   1cb28:	beq	1cce4 <_start@@Base+0x7954>
   1cb2c:	mov	r1, r4
   1cb30:	mov	r2, r6
   1cb34:	mov	r0, r7
   1cb38:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1cb3c:	mov	r4, r0
   1cb40:	cmp	r6, r4
   1cb44:	beq	1ccfc <_start@@Base+0x796c>
   1cb48:	ldrb	r3, [r4]
   1cb4c:	cmp	r3, #125	; 0x7d
   1cb50:	bne	1c750 <_start@@Base+0x73c0>
   1cb54:	add	r5, r4, #1
   1cb58:	sub	r3, r6, r5
   1cb5c:	cmp	r3, #1
   1cb60:	ble	1cb74 <_start@@Base+0x77e4>
   1cb64:	ldrb	r3, [r4, #1]
   1cb68:	cmp	r3, #32
   1cb6c:	bhi	1c6cc <_start@@Base+0x733c>
   1cb70:	beq	1cdd0 <_start@@Base+0x7a40>
   1cb74:	mov	r1, r5
   1cb78:	mov	r2, r6
   1cb7c:	mov	r0, r7
   1cb80:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1cb84:	mov	r5, r0
   1cb88:	b	1c6cc <_start@@Base+0x733c>
   1cb8c:	cmp	r3, #34	; 0x22
   1cb90:	bne	1c948 <_start@@Base+0x75b8>
   1cb94:	add	r1, r4, #2
   1cb98:	b	1c9e4 <_start@@Base+0x7654>
   1cb9c:	cmp	r3, #34	; 0x22
   1cba0:	bne	1c948 <_start@@Base+0x75b8>
   1cba4:	add	r1, r4, #2
   1cba8:	b	1c808 <_start@@Base+0x7478>
   1cbac:	mov	r5, r6
   1cbb0:	b	1ca88 <_start@@Base+0x76f8>
   1cbb4:	mov	r5, r6
   1cbb8:	b	1c8ac <_start@@Base+0x751c>
   1cbbc:	mov	r1, r4
   1cbc0:	mov	r3, #5
   1cbc4:	mov	r2, r6
   1cbc8:	mov	r0, r7
   1cbcc:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1cbd0:	mov	r4, r0
   1cbd4:	b	1c780 <_start@@Base+0x73f0>
   1cbd8:	ldr	r1, [sp, #20]
   1cbdc:	ldrd	r2, [sp, #24]
   1cbe0:	cmp	r1, #0
   1cbe4:	beq	1cc78 <_start@@Base+0x78e8>
   1cbe8:	cmp	r3, #0
   1cbec:	cmpeq	r2, #128	; 0x80
   1cbf0:	rsbls	r2, r2, #0
   1cbf4:	sxtbls	r2, r2
   1cbf8:	bls	1cab8 <_start@@Base+0x7728>
   1cbfc:	mov	r1, r0
   1cc00:	mov	r3, #8
   1cc04:	mov	r2, r6
   1cc08:	mov	r0, r7
   1cc0c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1cc10:	mov	r5, r0
   1cc14:	b	1cca0 <_start@@Base+0x7910>
   1cc18:	ldr	r1, [sp, #20]
   1cc1c:	ldrd	r2, [sp, #24]
   1cc20:	cmp	r1, #0
   1cc24:	beq	1ccb0 <_start@@Base+0x7920>
   1cc28:	cmp	r3, #0
   1cc2c:	cmpeq	r2, #32768	; 0x8000
   1cc30:	rsbls	r2, r2, #0
   1cc34:	sxthls	r2, r2
   1cc38:	bls	1c8dc <_start@@Base+0x754c>
   1cc3c:	mov	r1, r0
   1cc40:	mov	r3, #8
   1cc44:	mov	r2, r6
   1cc48:	mov	r0, r7
   1cc4c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1cc50:	mov	r5, r0
   1cc54:	cmp	sl, r5
   1cc58:	ldrshne	r2, [sp, #18]
   1cc5c:	bne	1c8dc <_start@@Base+0x754c>
   1cc60:	b	1c8ac <_start@@Base+0x751c>
   1cc64:	ldrb	r3, [r5, #2]
   1cc68:	cmp	r3, #32
   1cc6c:	addhi	r5, r5, #2
   1cc70:	bls	1cae4 <_start@@Base+0x7754>
   1cc74:	b	1c6cc <_start@@Base+0x733c>
   1cc78:	cmp	r3, #0
   1cc7c:	cmpeq	r2, #127	; 0x7f
   1cc80:	sxtbls	r2, r2
   1cc84:	bls	1cab8 <_start@@Base+0x7728>
   1cc88:	mov	r1, r0
   1cc8c:	mov	r3, #7
   1cc90:	mov	r2, r6
   1cc94:	mov	r0, r7
   1cc98:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1cc9c:	mov	r5, r0
   1cca0:	cmp	sl, r5
   1cca4:	ldrsbne	r2, [sp, #18]
   1cca8:	bne	1cab8 <_start@@Base+0x7728>
   1ccac:	b	1ca88 <_start@@Base+0x76f8>
   1ccb0:	mov	r1, #0
   1ccb4:	movw	r0, #32767	; 0x7fff
   1ccb8:	cmp	r3, r1
   1ccbc:	cmpeq	r2, r0
   1ccc0:	sxthls	r2, r2
   1ccc4:	bls	1c8dc <_start@@Base+0x754c>
   1ccc8:	mov	r1, r5
   1cccc:	mov	r3, #7
   1ccd0:	mov	r2, r6
   1ccd4:	mov	r0, r7
   1ccd8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1ccdc:	mov	r5, r0
   1cce0:	b	1cc54 <_start@@Base+0x78c4>
   1cce4:	ldrb	r3, [r5, #2]
   1cce8:	cmp	r3, #32
   1ccec:	addhi	r4, r5, #2
   1ccf0:	bls	1cb2c <_start@@Base+0x779c>
   1ccf4:	cmp	r6, r4
   1ccf8:	bne	1cb48 <_start@@Base+0x77b8>
   1ccfc:	mov	r0, r7
   1cd00:	mov	r3, #10
   1cd04:	mov	r2, r6
   1cd08:	mov	r1, r6
   1cd0c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1cd10:	mov	r5, r0
   1cd14:	b	1c6cc <_start@@Base+0x733c>
   1cd18:	ldrb	r3, [r1, #1]
   1cd1c:	cmp	r3, #32
   1cd20:	addhi	r1, r1, #1
   1cd24:	bls	1ca00 <_start@@Base+0x7670>
   1cd28:	b	1ca10 <_start@@Base+0x7680>
   1cd2c:	ldrb	r3, [r1, #1]
   1cd30:	cmp	r3, #32
   1cd34:	addhi	r1, r1, #1
   1cd38:	bls	1c824 <_start@@Base+0x7494>
   1cd3c:	b	1c834 <_start@@Base+0x74a4>
   1cd40:	add	sl, r1, #1
   1cd44:	sub	r3, r6, sl
   1cd48:	cmp	r3, #1
   1cd4c:	ble	1cd70 <_start@@Base+0x79e0>
   1cd50:	ldrb	r3, [r1, #1]
   1cd54:	cmp	r3, #32
   1cd58:	bhi	1ca38 <_start@@Base+0x76a8>
   1cd5c:	bne	1cd70 <_start@@Base+0x79e0>
   1cd60:	ldrb	r3, [r1, #2]
   1cd64:	cmp	r3, #32
   1cd68:	addhi	sl, r1, #2
   1cd6c:	bhi	1ca38 <_start@@Base+0x76a8>
   1cd70:	mov	r1, sl
   1cd74:	mov	r2, r6
   1cd78:	mov	r0, r7
   1cd7c:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1cd80:	mov	sl, r0
   1cd84:	b	1ca38 <_start@@Base+0x76a8>
   1cd88:	add	sl, r1, #1
   1cd8c:	sub	r3, r6, sl
   1cd90:	cmp	r3, #1
   1cd94:	ble	1cdb8 <_start@@Base+0x7a28>
   1cd98:	ldrb	r3, [r1, #1]
   1cd9c:	cmp	r3, #32
   1cda0:	bhi	1c85c <_start@@Base+0x74cc>
   1cda4:	bne	1cdb8 <_start@@Base+0x7a28>
   1cda8:	ldrb	r3, [r1, #2]
   1cdac:	cmp	r3, #32
   1cdb0:	addhi	sl, r1, #2
   1cdb4:	bhi	1c85c <_start@@Base+0x74cc>
   1cdb8:	mov	r1, sl
   1cdbc:	mov	r2, r6
   1cdc0:	mov	r0, r7
   1cdc4:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1cdc8:	mov	sl, r0
   1cdcc:	b	1c85c <_start@@Base+0x74cc>
   1cdd0:	ldrb	r3, [r4, #2]
   1cdd4:	cmp	r3, #32
   1cdd8:	addhi	r5, r4, #2
   1cddc:	bls	1cb74 <_start@@Base+0x77e4>
   1cde0:	b	1c6cc <_start@@Base+0x733c>
   1cde4:	mov	r1, r0
   1cde8:	mov	r2, r6
   1cdec:	mov	r0, r7
   1cdf0:	mov	r3, #33	; 0x21
   1cdf4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1cdf8:	mov	r5, r0
   1cdfc:	b	1c6cc <_start@@Base+0x733c>
   1ce00:	ldrb	r3, [r1, #2]
   1ce04:	cmp	r3, #32
   1ce08:	addhi	r4, r1, #2
   1ce0c:	bls	1c70c <_start@@Base+0x737c>
   1ce10:	b	1c720 <_start@@Base+0x7390>
   1ce14:	mov	r2, r6
   1ce18:	add	r1, r4, #1
   1ce1c:	mov	r0, r7
   1ce20:	bl	17470 <_start@@Base+0x20e0>
   1ce24:	mov	r5, r0
   1ce28:	b	1c6cc <_start@@Base+0x733c>
   1ce2c:	andeq	r8, r3, r4, asr #18
   1ce30:	andeq	r8, r3, ip, lsr r9
   1ce34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ce38:	mov	ip, r3
   1ce3c:	mov	r5, r2
   1ce40:	strd	r6, [sp, #8]
   1ce44:	mov	r7, r0
   1ce48:	mov	r6, r1
   1ce4c:	strd	r8, [sp, #16]
   1ce50:	mov	r1, #4
   1ce54:	strd	sl, [sp, #24]
   1ce58:	str	lr, [sp, #32]
   1ce5c:	sub	sp, sp, #260	; 0x104
   1ce60:	ldr	r0, [r0]
   1ce64:	str	r3, [sp, #212]	; 0xd4
   1ce68:	mov	r3, #0
   1ce6c:	str	r3, [ip]
   1ce70:	bl	27878 <flatcc_builder_start_table@@Base>
   1ce74:	cmp	r0, #0
   1ce78:	beq	1ceb4 <_start@@Base+0x7b24>
   1ce7c:	mov	r2, r5
   1ce80:	mov	r1, r6
   1ce84:	mov	r0, r7
   1ce88:	mov	r3, #33	; 0x21
   1ce8c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1ce90:	mov	sl, r0
   1ce94:	mov	r0, sl
   1ce98:	add	sp, sp, #260	; 0x104
   1ce9c:	ldrd	r4, [sp]
   1cea0:	ldrd	r6, [sp, #8]
   1cea4:	ldrd	r8, [sp, #16]
   1cea8:	ldrd	sl, [sp, #24]
   1ceac:	add	sp, sp, #32
   1ceb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1ceb4:	add	r0, sp, #224	; 0xe0
   1ceb8:	mov	r3, #1
   1cebc:	mov	r2, r5
   1cec0:	mov	r1, r6
   1cec4:	str	r0, [sp]
   1cec8:	mov	r0, r7
   1cecc:	bl	2f4d4 <flatcc_json_parser_prepare_unions@@Base>
   1ced0:	cmp	r5, r0
   1ced4:	beq	1ce7c <_start@@Base+0x7aec>
   1ced8:	mov	r1, r6
   1cedc:	add	r3, sp, #216	; 0xd8
   1cee0:	mov	r2, r5
   1cee4:	mov	r0, r7
   1cee8:	bl	19178 <_start@@Base+0x3de8>
   1ceec:	ldr	r3, [sp, #216]	; 0xd8
   1cef0:	mov	r4, r0
   1cef4:	mov	r6, r5
   1cef8:	cmp	r3, #0
   1cefc:	beq	1d0a0 <_start@@Base+0x7d10>
   1cf00:	cmp	r6, r4
   1cf04:	beq	1d0ac <_start@@Base+0x7d1c>
   1cf08:	ldrb	r3, [r4]
   1cf0c:	cmp	r3, #34	; 0x22
   1cf10:	moveq	r3, #0
   1cf14:	addeq	r4, r4, #1
   1cf18:	streq	r3, [r7, #12]
   1cf1c:	beq	1cf30 <_start@@Base+0x7ba0>
   1cf20:	cmp	r3, #46	; 0x2e
   1cf24:	movne	r3, #1
   1cf28:	strne	r3, [r7, #12]
   1cf2c:	beq	1e7a4 <_start@@Base+0x9414>
   1cf30:	sub	ip, r6, r4
   1cf34:	cmp	ip, #8
   1cf38:	bls	1d0c8 <_start@@Base+0x7d38>
   1cf3c:	ldrb	r2, [r4, #7]
   1cf40:	mov	r3, #0
   1cf44:	mov	lr, r3
   1cf48:	ldrb	r0, [r4, #6]
   1cf4c:	orr	r2, r2, r0, lsl #8
   1cf50:	ldrb	r8, [r4, #5]
   1cf54:	orr	r2, r2, r8, lsl #16
   1cf58:	ldrb	r8, [r4, #4]
   1cf5c:	orr	r2, r2, r8, lsl #24
   1cf60:	ldrb	r8, [r4, #3]
   1cf64:	orr	lr, lr, r8
   1cf68:	ldrb	r0, [r4]
   1cf6c:	mov	r5, #0
   1cf70:	str	r2, [sp, #40]	; 0x28
   1cf74:	ldrb	r8, [r4, #1]
   1cf78:	add	r3, pc, #960	; 0x3c0
   1cf7c:	ldrd	r2, [r3]
   1cf80:	lsl	r0, r0, #24
   1cf84:	orr	r8, r0, r8, lsl #16
   1cf88:	ldrb	r0, [r4, #2]
   1cf8c:	orr	r1, lr, r0, lsl #8
   1cf90:	orr	r1, r8, r1
   1cf94:	str	r1, [sp, #44]	; 0x2c
   1cf98:	ldrd	r0, [sp, #40]	; 0x28
   1cf9c:	cmp	r1, r3
   1cfa0:	cmpeq	r0, r2
   1cfa4:	beq	1d154 <_start@@Base+0x7dc4>
   1cfa8:	ldrd	r0, [sp, #40]	; 0x28
   1cfac:	add	r3, pc, #916	; 0x394
   1cfb0:	ldrd	r2, [r3]
   1cfb4:	bic	lr, r0, #255	; 0xff
   1cfb8:	str	lr, [sp, #104]	; 0x68
   1cfbc:	str	r1, [sp, #108]	; 0x6c
   1cfc0:	ldrd	r0, [sp, #104]	; 0x68
   1cfc4:	cmp	r1, r3
   1cfc8:	cmpeq	r0, r2
   1cfcc:	bne	1d238 <_start@@Base+0x7ea8>
   1cfd0:	cmp	ip, #7
   1cfd4:	ble	1d0b0 <_start@@Base+0x7d20>
   1cfd8:	mov	r3, #7
   1cfdc:	mov	r2, r6
   1cfe0:	mov	r1, r4
   1cfe4:	mov	r0, r7
   1cfe8:	bl	1924c <_start@@Base+0x3ebc>
   1cfec:	cmp	r0, r4
   1cff0:	beq	1d0b0 <_start@@Base+0x7d20>
   1cff4:	ldr	ip, [pc, #868]	; 1d360 <_start@@Base+0x7fd0>
   1cff8:	mov	r4, #3
   1cffc:	mov	r1, r0
   1d000:	mov	r3, #0
   1d004:	mov	r2, r6
   1d008:	ldr	lr, [sp, #224]	; 0xe0
   1d00c:	mov	r0, r7
   1d010:	add	ip, pc, ip
   1d014:	stm	sp, {r4, lr}
   1d018:	str	ip, [sp, #8]
   1d01c:	bl	2f994 <flatcc_json_parser_union_vector@@Base>
   1d020:	mov	r5, r0
   1d024:	sub	r3, r6, r5
   1d028:	cmp	r3, #1
   1d02c:	ble	1d040 <_start@@Base+0x7cb0>
   1d030:	ldrb	r3, [r5]
   1d034:	cmp	r3, #32
   1d038:	bhi	1d054 <_start@@Base+0x7cc4>
   1d03c:	beq	1e538 <_start@@Base+0x91a8>
   1d040:	mov	r1, r5
   1d044:	mov	r2, r6
   1d048:	mov	r0, r7
   1d04c:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1d050:	mov	r5, r0
   1d054:	cmp	r6, r5
   1d058:	beq	1e4e0 <_start@@Base+0x9150>
   1d05c:	ldrb	r3, [r5]
   1d060:	cmp	r3, #44	; 0x2c
   1d064:	beq	1e54c <_start@@Base+0x91bc>
   1d068:	mov	r3, #0
   1d06c:	str	r3, [sp, #216]	; 0xd8
   1d070:	ldrb	r3, [r5]
   1d074:	cmp	r3, #125	; 0x7d
   1d078:	beq	1d200 <_start@@Base+0x7e70>
   1d07c:	mov	r3, #10
   1d080:	mov	r1, r5
   1d084:	mov	r2, r6
   1d088:	mov	r0, r7
   1d08c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1d090:	ldr	r3, [sp, #216]	; 0xd8
   1d094:	mov	r4, r0
   1d098:	cmp	r3, #0
   1d09c:	bne	1cf00 <_start@@Base+0x7b70>
   1d0a0:	mov	r5, r6
   1d0a4:	mov	r6, r4
   1d0a8:	b	1e4f4 <_start@@Base+0x9164>
   1d0ac:	mov	r4, r6
   1d0b0:	mov	r1, r4
   1d0b4:	mov	r2, r6
   1d0b8:	mov	r0, r7
   1d0bc:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   1d0c0:	mov	r5, r0
   1d0c4:	b	1d024 <_start@@Base+0x7c94>
   1d0c8:	sub	r3, ip, #1
   1d0cc:	cmp	r3, #7
   1d0d0:	addls	pc, pc, r3, lsl #2
   1d0d4:	b	1d0b0 <_start@@Base+0x7d20>
   1d0d8:	b	1d0b0 <_start@@Base+0x7d20>
   1d0dc:	b	1d128 <_start@@Base+0x7d98>
   1d0e0:	b	1d11c <_start@@Base+0x7d8c>
   1d0e4:	b	1d110 <_start@@Base+0x7d80>
   1d0e8:	b	1d104 <_start@@Base+0x7d74>
   1d0ec:	b	1d0f8 <_start@@Base+0x7d68>
   1d0f0:	b	1d148 <_start@@Base+0x7db8>
   1d0f4:	b	1cf3c <_start@@Base+0x7bac>
   1d0f8:	mov	r2, #0
   1d0fc:	mov	lr, r2
   1d100:	b	1cf50 <_start@@Base+0x7bc0>
   1d104:	mov	r2, #0
   1d108:	mov	lr, r2
   1d10c:	b	1cf58 <_start@@Base+0x7bc8>
   1d110:	mov	r2, #0
   1d114:	mov	lr, r2
   1d118:	b	1cf60 <_start@@Base+0x7bd0>
   1d11c:	mov	r2, #0
   1d120:	mov	lr, r2
   1d124:	b	1cf68 <_start@@Base+0x7bd8>
   1d128:	ldrb	r2, [r4, #1]
   1d12c:	mov	r1, #0
   1d130:	ldrb	r0, [r4]
   1d134:	str	r1, [sp, #40]	; 0x28
   1d138:	lsl	r2, r2, #16
   1d13c:	orr	r3, r2, r0, lsl #24
   1d140:	str	r3, [sp, #44]	; 0x2c
   1d144:	b	1cfa8 <_start@@Base+0x7c18>
   1d148:	mov	r2, #0
   1d14c:	mov	r3, #0
   1d150:	b	1cf44 <_start@@Base+0x7bb4>
   1d154:	add	r4, r4, #8
   1d158:	mov	r1, r6
   1d15c:	str	r5, [sp, #152]	; 0x98
   1d160:	mov	r0, r4
   1d164:	bl	15480 <_start@@Base+0xf0>
   1d168:	str	r1, [sp, #156]	; 0x9c
   1d16c:	add	r3, pc, #476	; 0x1dc
   1d170:	ldrd	r2, [r3]
   1d174:	ldrd	r0, [sp, #152]	; 0x98
   1d178:	cmp	r1, r3
   1d17c:	cmpeq	r0, r2
   1d180:	bne	1d0b0 <_start@@Base+0x7d20>
   1d184:	sub	r3, r6, r4
   1d188:	cmp	r3, #4
   1d18c:	ble	1d0b0 <_start@@Base+0x7d20>
   1d190:	mov	r1, r4
   1d194:	mov	r3, #4
   1d198:	mov	r2, r6
   1d19c:	mov	r0, r7
   1d1a0:	bl	1924c <_start@@Base+0x3ebc>
   1d1a4:	cmp	r4, r0
   1d1a8:	mov	r1, r0
   1d1ac:	beq	1d0b0 <_start@@Base+0x7d20>
   1d1b0:	mov	ip, #3
   1d1b4:	ldr	r0, [pc, #424]	; 1d364 <_start@@Base+0x7fd4>
   1d1b8:	mov	r3, r5
   1d1bc:	mov	r2, r6
   1d1c0:	ldr	lr, [pc, #416]	; 1d368 <_start@@Base+0x7fd8>
   1d1c4:	str	ip, [sp]
   1d1c8:	ldr	ip, [pc, #412]	; 1d36c <_start@@Base+0x7fdc>
   1d1cc:	add	r0, pc, r0
   1d1d0:	ldr	r4, [sp, #224]	; 0xe0
   1d1d4:	add	r0, r0, #140	; 0x8c
   1d1d8:	add	lr, pc, lr
   1d1dc:	add	ip, pc, ip
   1d1e0:	str	r4, [sp, #4]
   1d1e4:	str	r0, [sp, #8]
   1d1e8:	mov	r0, r7
   1d1ec:	str	ip, [sp, #12]
   1d1f0:	str	lr, [sp, #16]
   1d1f4:	bl	2fab0 <flatcc_json_parser_union_type_vector@@Base>
   1d1f8:	mov	r5, r0
   1d1fc:	b	1d024 <_start@@Base+0x7c94>
   1d200:	add	r1, r5, #1
   1d204:	sub	r3, r6, r1
   1d208:	cmp	r3, #1
   1d20c:	ble	1d220 <_start@@Base+0x7e90>
   1d210:	ldrb	r3, [r5, #1]
   1d214:	cmp	r3, #32
   1d218:	bhi	1effc <_start@@Base+0x9c6c>
   1d21c:	beq	1f088 <_start@@Base+0x9cf8>
   1d220:	mov	r2, r6
   1d224:	mov	r0, r7
   1d228:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1d22c:	mov	r4, r0
   1d230:	ldr	r3, [sp, #216]	; 0xd8
   1d234:	b	1cef8 <_start@@Base+0x7b68>
   1d238:	ldrd	r0, [sp, #40]	; 0x28
   1d23c:	lsr	r3, r0, #16
   1d240:	str	r3, [sp, #144]	; 0x90
   1d244:	ldr	lr, [sp, #144]	; 0x90
   1d248:	str	r1, [sp, #148]	; 0x94
   1d24c:	add	r3, pc, #260	; 0x104
   1d250:	ldrd	r2, [r3]
   1d254:	lsl	lr, lr, #16
   1d258:	str	lr, [sp, #144]	; 0x90
   1d25c:	ldrd	r0, [sp, #144]	; 0x90
   1d260:	cmp	r1, r3
   1d264:	cmpeq	r0, r2
   1d268:	bne	1e600 <_start@@Base+0x9270>
   1d26c:	cmp	ip, #6
   1d270:	ble	1d0b0 <_start@@Base+0x7d20>
   1d274:	mov	r3, #6
   1d278:	mov	r2, r6
   1d27c:	mov	r1, r4
   1d280:	mov	r0, r7
   1d284:	bl	1924c <_start@@Base+0x3ebc>
   1d288:	cmp	r0, r4
   1d28c:	mov	r5, r0
   1d290:	beq	1d0b0 <_start@@Base+0x7d20>
   1d294:	mov	r3, #0
   1d298:	mov	r1, #3
   1d29c:	ldr	r0, [r7]
   1d2a0:	str	r3, [sp, #220]	; 0xdc
   1d2a4:	bl	27878 <flatcc_builder_start_table@@Base>
   1d2a8:	cmp	r0, #0
   1d2ac:	bne	1d650 <_start@@Base+0x82c0>
   1d2b0:	add	r3, sp, #228	; 0xe4
   1d2b4:	mov	r1, r5
   1d2b8:	mov	r2, r6
   1d2bc:	mov	r0, r7
   1d2c0:	bl	19178 <_start@@Base+0x3de8>
   1d2c4:	ldr	r3, [sp, #228]	; 0xe4
   1d2c8:	cmp	r3, #0
   1d2cc:	beq	1f430 <_start@@Base+0xa0a0>
   1d2d0:	cmp	r6, r0
   1d2d4:	beq	1d300 <_start@@Base+0x7f70>
   1d2d8:	ldrb	r3, [r0]
   1d2dc:	cmp	r3, #34	; 0x22
   1d2e0:	moveq	r3, #0
   1d2e4:	addeq	r0, r0, #1
   1d2e8:	streq	r3, [r7, #12]
   1d2ec:	beq	1d300 <_start@@Base+0x7f70>
   1d2f0:	cmp	r3, #46	; 0x2e
   1d2f4:	movne	r3, #1
   1d2f8:	strne	r3, [r7, #12]
   1d2fc:	beq	1e5b8 <_start@@Base+0x9228>
   1d300:	sub	r3, r6, r0
   1d304:	cmp	r3, #8
   1d308:	bhi	1d370 <_start@@Base+0x7fe0>
   1d30c:	sub	r3, r3, #1
   1d310:	cmp	r3, #7
   1d314:	addls	pc, pc, r3, lsl #2
   1d318:	b	1d700 <_start@@Base+0x8370>
   1d31c:	b	1d438 <_start@@Base+0x80a8>
   1d320:	b	1d42c <_start@@Base+0x809c>
   1d324:	b	1d420 <_start@@Base+0x8090>
   1d328:	b	1d450 <_start@@Base+0x80c0>
   1d32c:	b	1d444 <_start@@Base+0x80b4>
   1d330:	b	1d45c <_start@@Base+0x80cc>
   1d334:	b	1d414 <_start@@Base+0x8084>
   1d338:	b	1d370 <_start@@Base+0x7fe0>
   1d33c:	nop	{0}
   1d340:	cmnvs	lr, pc, asr r9
   1d344:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1d348:	cmnvs	lr, r0, lsl #18
   1d34c:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1d350:	andeq	r0, r0, r0
   1d354:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   1d358:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   1d35c:	rsbsvc	r6, r2, r6, ror #10
   1d360:	andeq	r6, r0, r8, ror #24
   1d364:			; <UNDEFINED> instruction: 0x00037eb4
   1d368:			; <UNDEFINED> instruction: 0xffff8394
   1d36c:	muleq	r0, ip, sl
   1d370:	ldrb	r2, [r0, #7]
   1d374:	mov	r3, #0
   1d378:	mov	r1, r3
   1d37c:	ldrb	r4, [r0, #6]
   1d380:	orr	r2, r2, r4, lsl #8
   1d384:	ldrb	sl, [r0, #5]
   1d388:	orr	r2, r2, sl, lsl #16
   1d38c:	ldrb	sl, [r0, #4]
   1d390:	orr	r2, r2, sl, lsl #24
   1d394:	ldrb	r8, [r0, #3]
   1d398:	orr	r1, r1, r8
   1d39c:	ldrb	sl, [r0, #2]
   1d3a0:	orr	r1, r1, sl, lsl #8
   1d3a4:	ldrb	sl, [r0, #1]
   1d3a8:	orr	r1, r1, sl, lsl #16
   1d3ac:	str	r2, [sp, #56]	; 0x38
   1d3b0:	ldrb	r2, [r0]
   1d3b4:	add	r5, pc, #972	; 0x3cc
   1d3b8:	ldrd	r4, [r5]
   1d3bc:	orr	r3, r1, r2, lsl #24
   1d3c0:	str	r3, [sp, #60]	; 0x3c
   1d3c4:	ldrd	r2, [sp, #56]	; 0x38
   1d3c8:	cmp	r3, r5
   1d3cc:	cmpeq	r2, r4
   1d3d0:	bne	1d700 <_start@@Base+0x8370>
   1d3d4:	add	r1, r0, #8
   1d3d8:	sub	r3, r6, r1
   1d3dc:	cmp	r3, #8
   1d3e0:	bhi	1d468 <_start@@Base+0x80d8>
   1d3e4:	sub	r3, r3, #1
   1d3e8:	cmp	r3, #7
   1d3ec:	addls	pc, pc, r3, lsl #2
   1d3f0:	b	1d704 <_start@@Base+0x8374>
   1d3f4:	b	1d51c <_start@@Base+0x818c>
   1d3f8:	b	1d510 <_start@@Base+0x8180>
   1d3fc:	b	1d558 <_start@@Base+0x81c8>
   1d400:	b	1d54c <_start@@Base+0x81bc>
   1d404:	b	1d540 <_start@@Base+0x81b0>
   1d408:	b	1d534 <_start@@Base+0x81a4>
   1d40c:	b	1d528 <_start@@Base+0x8198>
   1d410:	b	1d468 <_start@@Base+0x80d8>
   1d414:	mov	r2, #0
   1d418:	mov	r3, #0
   1d41c:	b	1d378 <_start@@Base+0x7fe8>
   1d420:	mov	r2, #0
   1d424:	mov	r1, r2
   1d428:	b	1d39c <_start@@Base+0x800c>
   1d42c:	mov	r2, #0
   1d430:	mov	r1, r2
   1d434:	b	1d3a4 <_start@@Base+0x8014>
   1d438:	mov	r2, #0
   1d43c:	mov	r1, r2
   1d440:	b	1d3ac <_start@@Base+0x801c>
   1d444:	mov	r2, #0
   1d448:	mov	r1, r2
   1d44c:	b	1d38c <_start@@Base+0x7ffc>
   1d450:	mov	r2, #0
   1d454:	mov	r1, r2
   1d458:	b	1d394 <_start@@Base+0x8004>
   1d45c:	mov	r2, #0
   1d460:	mov	r1, r2
   1d464:	b	1d384 <_start@@Base+0x7ff4>
   1d468:	ldrb	r2, [r0, #15]
   1d46c:	mov	r3, #0
   1d470:	mov	sl, r3
   1d474:	ldrb	r4, [r0, #14]
   1d478:	orr	r2, r2, r4, lsl #8
   1d47c:	ldrb	r4, [r0, #13]
   1d480:	orr	r2, r2, r4, lsl #16
   1d484:	ldrb	r4, [r0, #12]
   1d488:	mov	r8, sl
   1d48c:	orr	r2, r2, r4, lsl #24
   1d490:	ldrb	sl, [r0, #11]
   1d494:	orr	sl, r8, sl
   1d498:	ldrb	r8, [r0, #10]
   1d49c:	orr	sl, sl, r8, lsl #8
   1d4a0:	ldrb	r8, [r0, #9]
   1d4a4:	orr	r8, sl, r8, lsl #16
   1d4a8:	str	r2, [sp, #80]	; 0x50
   1d4ac:	ldrb	r2, [r0, #8]
   1d4b0:	add	r5, pc, #728	; 0x2d8
   1d4b4:	ldrd	r4, [r5]
   1d4b8:	orr	r3, r8, r2, lsl #24
   1d4bc:	str	r3, [sp, #84]	; 0x54
   1d4c0:	ldrd	r2, [sp, #80]	; 0x50
   1d4c4:	cmp	r3, r5
   1d4c8:	cmpeq	r2, r4
   1d4cc:	bne	1d704 <_start@@Base+0x8374>
   1d4d0:	add	r4, r0, #16
   1d4d4:	sub	r5, r6, r4
   1d4d8:	cmp	r5, #8
   1d4dc:	bhi	1d564 <_start@@Base+0x81d4>
   1d4e0:	sub	r3, r5, #1
   1d4e4:	cmp	r3, #7
   1d4e8:	addls	pc, pc, r3, lsl #2
   1d4ec:	b	1deec <_start@@Base+0x8b5c>
   1d4f0:	b	1d6dc <_start@@Base+0x834c>
   1d4f4:	b	1d6a0 <_start@@Base+0x8310>
   1d4f8:	b	1d6d0 <_start@@Base+0x8340>
   1d4fc:	b	1d6c4 <_start@@Base+0x8334>
   1d500:	b	1d6b8 <_start@@Base+0x8328>
   1d504:	b	1d6ac <_start@@Base+0x831c>
   1d508:	b	1d694 <_start@@Base+0x8304>
   1d50c:	b	1d564 <_start@@Base+0x81d4>
   1d510:	mov	r2, #0
   1d514:	mov	sl, r2
   1d518:	b	1d4a0 <_start@@Base+0x8110>
   1d51c:	mov	r2, #0
   1d520:	mov	r8, r2
   1d524:	b	1d4a8 <_start@@Base+0x8118>
   1d528:	mov	r2, #0
   1d52c:	mov	r3, #0
   1d530:	b	1d470 <_start@@Base+0x80e0>
   1d534:	mov	r2, #0
   1d538:	mov	sl, r2
   1d53c:	b	1d47c <_start@@Base+0x80ec>
   1d540:	mov	r2, #0
   1d544:	mov	sl, r2
   1d548:	b	1d484 <_start@@Base+0x80f4>
   1d54c:	mov	r2, #0
   1d550:	mov	r8, r2
   1d554:	b	1d490 <_start@@Base+0x8100>
   1d558:	mov	r2, #0
   1d55c:	mov	sl, r2
   1d560:	b	1d498 <_start@@Base+0x8108>
   1d564:	ldrb	r2, [r0, #23]
   1d568:	mov	r3, #0
   1d56c:	mov	lr, r3
   1d570:	ldrb	r8, [r0, #22]
   1d574:	orr	ip, r2, r8, lsl #8
   1d578:	ldrb	r8, [r0, #21]
   1d57c:	orr	ip, ip, r8, lsl #16
   1d580:	ldrb	r8, [r0, #20]
   1d584:	orr	ip, ip, r8, lsl #24
   1d588:	ldrb	sl, [r0, #19]
   1d58c:	orr	lr, lr, sl
   1d590:	ldrb	sl, [r0, #18]
   1d594:	orr	lr, lr, sl, lsl #8
   1d598:	lsr	r1, ip, #16
   1d59c:	ldrb	r2, [r0, #17]
   1d5a0:	ldrb	r0, [r0, #16]
   1d5a4:	str	r1, [sp, #96]	; 0x60
   1d5a8:	ldr	r8, [sp, #96]	; 0x60
   1d5ac:	orr	lr, lr, r2, lsl #16
   1d5b0:	add	r3, pc, #480	; 0x1e0
   1d5b4:	ldrd	r2, [r3]
   1d5b8:	orr	r0, lr, r0, lsl #24
   1d5bc:	lsl	r8, r8, #16
   1d5c0:	str	r8, [sp, #96]	; 0x60
   1d5c4:	str	r0, [sp, #100]	; 0x64
   1d5c8:	ldrd	r8, [sp, #96]	; 0x60
   1d5cc:	cmp	r9, r3
   1d5d0:	cmpeq	r8, r2
   1d5d4:	beq	1df04 <_start@@Base+0x8b74>
   1d5d8:	and	r1, ip, #-16777216	; 0xff000000
   1d5dc:	add	r3, pc, #444	; 0x1bc
   1d5e0:	ldrd	r2, [r3]
   1d5e4:	str	r1, [sp, #168]	; 0xa8
   1d5e8:	str	r0, [sp, #172]	; 0xac
   1d5ec:	ldrd	r0, [sp, #168]	; 0xa8
   1d5f0:	cmp	r1, r3
   1d5f4:	cmpeq	r0, r2
   1d5f8:	bne	1d878 <_start@@Base+0x84e8>
   1d5fc:	cmp	r5, #5
   1d600:	ble	1d878 <_start@@Base+0x84e8>
   1d604:	mov	r3, #5
   1d608:	mov	r2, r6
   1d60c:	mov	r1, r4
   1d610:	mov	r0, r7
   1d614:	bl	1924c <_start@@Base+0x3ebc>
   1d618:	cmp	r4, r0
   1d61c:	mov	r9, r0
   1d620:	beq	1d878 <_start@@Base+0x84e8>
   1d624:	mov	r1, #9
   1d628:	ldr	r0, [r7]
   1d62c:	bl	27878 <flatcc_builder_start_table@@Base>
   1d630:	cmp	r0, #0
   1d634:	beq	1e7ec <_start@@Base+0x945c>
   1d638:	mov	r1, r9
   1d63c:	mov	r3, #33	; 0x21
   1d640:	mov	r2, r6
   1d644:	mov	r0, r7
   1d648:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1d64c:	mov	r5, r0
   1d650:	mov	r1, r5
   1d654:	mov	r3, #33	; 0x21
   1d658:	mov	r2, r6
   1d65c:	mov	r0, r7
   1d660:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1d664:	ldr	r3, [sp, #220]	; 0xdc
   1d668:	mov	r5, r0
   1d66c:	cmp	r3, #0
   1d670:	beq	1e684 <_start@@Base+0x92f4>
   1d674:	mov	r1, #0
   1d678:	ldr	r0, [r7]
   1d67c:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   1d680:	cmp	r0, #0
   1d684:	beq	1e684 <_start@@Base+0x92f4>
   1d688:	ldr	r3, [sp, #220]	; 0xdc
   1d68c:	str	r3, [r0]
   1d690:	b	1d024 <_start@@Base+0x7c94>
   1d694:	mov	r2, #0
   1d698:	mov	r3, #0
   1d69c:	b	1d56c <_start@@Base+0x81dc>
   1d6a0:	mov	ip, #0
   1d6a4:	mov	lr, ip
   1d6a8:	b	1d598 <_start@@Base+0x8208>
   1d6ac:	mov	ip, #0
   1d6b0:	mov	lr, ip
   1d6b4:	b	1d578 <_start@@Base+0x81e8>
   1d6b8:	mov	ip, #0
   1d6bc:	mov	lr, ip
   1d6c0:	b	1d580 <_start@@Base+0x81f0>
   1d6c4:	mov	ip, #0
   1d6c8:	mov	lr, ip
   1d6cc:	b	1d588 <_start@@Base+0x81f8>
   1d6d0:	mov	ip, #0
   1d6d4:	mov	lr, ip
   1d6d8:	b	1d590 <_start@@Base+0x8200>
   1d6dc:	ldrb	r2, [r0, #16]
   1d6e0:	lsl	r3, r2, #24
   1d6e4:	str	r3, [sp, #100]	; 0x64
   1d6e8:	mov	r3, #0
   1d6ec:	str	r3, [sp, #96]	; 0x60
   1d6f0:	ldrd	r2, [sp, #96]	; 0x60
   1d6f4:	mov	ip, r2
   1d6f8:	mov	r0, r3
   1d6fc:	b	1d5d8 <_start@@Base+0x8248>
   1d700:	mov	r1, r0
   1d704:	mov	r2, r6
   1d708:	mov	r0, r7
   1d70c:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   1d710:	mov	r5, r0
   1d714:	sub	r3, r6, r5
   1d718:	cmp	r3, #1
   1d71c:	ble	1d730 <_start@@Base+0x83a0>
   1d720:	ldrb	r3, [r5]
   1d724:	cmp	r3, #32
   1d728:	bhi	1d744 <_start@@Base+0x83b4>
   1d72c:	beq	1d814 <_start@@Base+0x8484>
   1d730:	mov	r1, r5
   1d734:	mov	r2, r6
   1d738:	mov	r0, r7
   1d73c:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1d740:	mov	r5, r0
   1d744:	cmp	r6, r5
   1d748:	beq	1d7e8 <_start@@Base+0x8458>
   1d74c:	ldrb	r3, [r5]
   1d750:	cmp	r3, #44	; 0x2c
   1d754:	beq	1d828 <_start@@Base+0x8498>
   1d758:	mov	r3, #0
   1d75c:	str	r3, [sp, #228]	; 0xe4
   1d760:	ldrb	r3, [r5]
   1d764:	cmp	r3, #125	; 0x7d
   1d768:	beq	1d7b4 <_start@@Base+0x8424>
   1d76c:	mov	r3, #10
   1d770:	mov	r1, r5
   1d774:	mov	r2, r6
   1d778:	mov	r0, r7
   1d77c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1d780:	ldr	r3, [sp, #228]	; 0xe4
   1d784:	b	1d2c8 <_start@@Base+0x7f38>
   1d788:	bvs	1cf9548 <__bss_end__@@Base+0x1ca417c>
   1d78c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d790:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   1d794:	rsbsvc	r6, r2, r6, ror #10
   1d798:	ldrvs	r0, [r2, -r0]!
   1d79c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1d7a0:	strvs	r0, [r0, -r0]
   1d7a4:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1d7a8:	ldrvs	r0, [r3, -r0]!
   1d7ac:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1d7b0:	andeq	r7, r3, ip, lsl #15
   1d7b4:	add	r1, r5, #1
   1d7b8:	sub	r3, r6, r1
   1d7bc:	cmp	r3, #1
   1d7c0:	ble	1d7d4 <_start@@Base+0x8444>
   1d7c4:	ldrb	r3, [r5, #1]
   1d7c8:	cmp	r3, #32
   1d7cc:	bhi	1e5f0 <_start@@Base+0x9260>
   1d7d0:	beq	1e6b8 <_start@@Base+0x9328>
   1d7d4:	mov	r2, r6
   1d7d8:	mov	r0, r7
   1d7dc:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1d7e0:	ldr	r3, [sp, #228]	; 0xe4
   1d7e4:	b	1d2c8 <_start@@Base+0x7f38>
   1d7e8:	mov	r3, #0
   1d7ec:	str	r3, [sp, #228]	; 0xe4
   1d7f0:	ldr	r3, [r7, #24]
   1d7f4:	cmp	r3, #0
   1d7f8:	bne	1d650 <_start@@Base+0x82c0>
   1d7fc:	ldr	r0, [r7]
   1d800:	bl	2825c <flatcc_builder_end_table@@Base>
   1d804:	cmp	r0, #0
   1d808:	str	r0, [sp, #220]	; 0xdc
   1d80c:	bne	1d674 <_start@@Base+0x82e4>
   1d810:	b	1d650 <_start@@Base+0x82c0>
   1d814:	ldrb	r3, [r5, #1]
   1d818:	cmp	r3, #32
   1d81c:	addhi	r5, r5, #1
   1d820:	bls	1d730 <_start@@Base+0x83a0>
   1d824:	b	1d744 <_start@@Base+0x83b4>
   1d828:	add	r0, r5, #1
   1d82c:	sub	r3, r6, r0
   1d830:	cmp	r3, #1
   1d834:	ble	1d848 <_start@@Base+0x84b8>
   1d838:	ldrb	r3, [r5, #1]
   1d83c:	cmp	r3, #32
   1d840:	bhi	1d858 <_start@@Base+0x84c8>
   1d844:	beq	1efc0 <_start@@Base+0x9c30>
   1d848:	mov	r1, r0
   1d84c:	mov	r2, r6
   1d850:	mov	r0, r7
   1d854:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1d858:	cmp	r6, r0
   1d85c:	beq	1efd8 <_start@@Base+0x9c48>
   1d860:	ldrb	r3, [r0]
   1d864:	cmp	r3, #125	; 0x7d
   1d868:	beq	1f0e0 <_start@@Base+0x9d50>
   1d86c:	mov	r3, #1
   1d870:	str	r3, [sp, #228]	; 0xe4
   1d874:	b	1d2d0 <_start@@Base+0x7f40>
   1d878:	sub	r3, pc, #216	; 0xd8
   1d87c:	ldrd	r2, [r3]
   1d880:	ldrd	r0, [sp, #96]	; 0x60
   1d884:	cmp	r1, r3
   1d888:	cmpeq	r0, r2
   1d88c:	bne	1deec <_start@@Base+0x8b5c>
   1d890:	cmp	r5, #6
   1d894:	ble	1deec <_start@@Base+0x8b5c>
   1d898:	mov	r3, #6
   1d89c:	mov	r2, r6
   1d8a0:	mov	r1, r4
   1d8a4:	mov	r0, r7
   1d8a8:	bl	1924c <_start@@Base+0x3ebc>
   1d8ac:	cmp	r4, r0
   1d8b0:	mov	r5, r0
   1d8b4:	beq	1deec <_start@@Base+0x8b5c>
   1d8b8:	mov	r1, #2
   1d8bc:	ldr	r0, [r7]
   1d8c0:	bl	27878 <flatcc_builder_start_table@@Base>
   1d8c4:	cmp	r0, #0
   1d8c8:	mov	r1, r5
   1d8cc:	bne	1d63c <_start@@Base+0x82ac>
   1d8d0:	add	r3, sp, #232	; 0xe8
   1d8d4:	mov	r2, r6
   1d8d8:	mov	r0, r7
   1d8dc:	bl	19178 <_start@@Base+0x3de8>
   1d8e0:	ldr	r3, [sp, #232]	; 0xe8
   1d8e4:	cmp	r3, #0
   1d8e8:	beq	1f428 <_start@@Base+0xa098>
   1d8ec:	ldr	r5, [pc, #-324]	; 1d7b0 <_start@@Base+0x8420>
   1d8f0:	mov	r1, r0
   1d8f4:	add	r5, pc, r5
   1d8f8:	add	r5, r5, #264	; 0x108
   1d8fc:	cmp	r6, r1
   1d900:	beq	1d92c <_start@@Base+0x859c>
   1d904:	ldrb	r3, [r1]
   1d908:	cmp	r3, #34	; 0x22
   1d90c:	moveq	r3, #0
   1d910:	addeq	r1, r1, #1
   1d914:	streq	r3, [r7, #12]
   1d918:	beq	1d92c <_start@@Base+0x859c>
   1d91c:	cmp	r3, #46	; 0x2e
   1d920:	movne	r3, #1
   1d924:	strne	r3, [r7, #12]
   1d928:	beq	1e5d8 <_start@@Base+0x9248>
   1d92c:	sub	r3, r6, r1
   1d930:	cmp	r3, #8
   1d934:	bhi	1d968 <_start@@Base+0x85d8>
   1d938:	sub	r3, r3, #1
   1d93c:	cmp	r3, #7
   1d940:	addls	pc, pc, r3, lsl #2
   1d944:	b	1dc98 <_start@@Base+0x8908>
   1d948:	b	1da50 <_start@@Base+0x86c0>
   1d94c:	b	1da44 <_start@@Base+0x86b4>
   1d950:	b	1da38 <_start@@Base+0x86a8>
   1d954:	b	1da2c <_start@@Base+0x869c>
   1d958:	b	1da20 <_start@@Base+0x8690>
   1d95c:	b	1da14 <_start@@Base+0x8684>
   1d960:	b	1da08 <_start@@Base+0x8678>
   1d964:	b	1d968 <_start@@Base+0x85d8>
   1d968:	ldrb	sl, [r1, #7]
   1d96c:	mov	fp, #0
   1d970:	mov	r3, fp
   1d974:	ldrb	r8, [r1, #6]
   1d978:	orr	r2, sl, r8, lsl #8
   1d97c:	ldrb	r8, [r1, #5]
   1d980:	orr	r2, r2, r8, lsl #16
   1d984:	ldrb	r8, [r1, #4]
   1d988:	orr	r2, r2, r8, lsl #24
   1d98c:	ldrb	sl, [r1, #3]
   1d990:	orr	r3, r3, sl
   1d994:	ldrb	sl, [r1, #2]
   1d998:	orr	r3, r3, sl, lsl #8
   1d99c:	ldrb	sl, [r1, #1]
   1d9a0:	orr	sl, r3, sl, lsl #16
   1d9a4:	str	r2, [sp, #72]	; 0x48
   1d9a8:	ldrb	r2, [r1]
   1d9ac:	add	r9, pc, #916	; 0x394
   1d9b0:	ldrd	r8, [r9]
   1d9b4:	orr	r3, sl, r2, lsl #24
   1d9b8:	str	r3, [sp, #76]	; 0x4c
   1d9bc:	ldrd	r2, [sp, #72]	; 0x48
   1d9c0:	cmp	r3, r9
   1d9c4:	cmpeq	r2, r8
   1d9c8:	bne	1dc98 <_start@@Base+0x8908>
   1d9cc:	add	r4, r1, #8
   1d9d0:	sub	r0, r6, r4
   1d9d4:	cmp	r0, #8
   1d9d8:	bhi	1da5c <_start@@Base+0x86cc>
   1d9dc:	sub	r3, r0, #2
   1d9e0:	cmp	r3, #6
   1d9e4:	addls	pc, pc, r3, lsl #2
   1d9e8:	b	1dcac <_start@@Base+0x891c>
   1d9ec:	b	1dc78 <_start@@Base+0x88e8>
   1d9f0:	b	1dc6c <_start@@Base+0x88dc>
   1d9f4:	b	1dc60 <_start@@Base+0x88d0>
   1d9f8:	b	1dc54 <_start@@Base+0x88c4>
   1d9fc:	b	1dc48 <_start@@Base+0x88b8>
   1da00:	b	1dc3c <_start@@Base+0x88ac>
   1da04:	b	1da5c <_start@@Base+0x86cc>
   1da08:	mov	sl, #0
   1da0c:	mov	fp, #0
   1da10:	b	1d970 <_start@@Base+0x85e0>
   1da14:	mov	r2, #0
   1da18:	mov	r3, r2
   1da1c:	b	1d97c <_start@@Base+0x85ec>
   1da20:	mov	r2, #0
   1da24:	mov	r3, r2
   1da28:	b	1d984 <_start@@Base+0x85f4>
   1da2c:	mov	r2, #0
   1da30:	mov	r3, r2
   1da34:	b	1d98c <_start@@Base+0x85fc>
   1da38:	mov	r2, #0
   1da3c:	mov	r3, r2
   1da40:	b	1d994 <_start@@Base+0x8604>
   1da44:	mov	r2, #0
   1da48:	mov	r3, r2
   1da4c:	b	1d99c <_start@@Base+0x860c>
   1da50:	mov	r2, #0
   1da54:	mov	sl, r2
   1da58:	b	1d9a4 <_start@@Base+0x8614>
   1da5c:	ldrb	r2, [r1, #15]
   1da60:	mov	r3, #0
   1da64:	mov	ip, r3
   1da68:	ldrb	sl, [r1, #14]
   1da6c:	orr	r2, r2, sl, lsl #8
   1da70:	ldrb	sl, [r1, #13]
   1da74:	orr	r2, r2, sl, lsl #16
   1da78:	ldrb	sl, [r1, #12]
   1da7c:	orr	sl, r2, sl, lsl #24
   1da80:	ldrb	r8, [r1, #11]
   1da84:	orr	ip, ip, r8
   1da88:	ldrb	r2, [r1, #8]
   1da8c:	mov	r9, #0
   1da90:	str	sl, [sp, #48]	; 0x30
   1da94:	ldrb	r8, [r1, #10]
   1da98:	add	fp, pc, #688	; 0x2b0
   1da9c:	ldrd	sl, [fp]
   1daa0:	lsl	lr, r2, #24
   1daa4:	ldrb	r2, [r1, #9]
   1daa8:	orr	r8, ip, r8, lsl #8
   1daac:	orr	r2, lr, r2, lsl #16
   1dab0:	orr	r3, r2, r8
   1dab4:	str	r3, [sp, #52]	; 0x34
   1dab8:	ldrd	r2, [sp, #48]	; 0x30
   1dabc:	cmp	r3, fp
   1dac0:	cmpeq	r2, sl
   1dac4:	beq	1dd70 <_start@@Base+0x89e0>
   1dac8:	ldrd	r2, [sp, #48]	; 0x30
   1dacc:	add	r9, pc, #644	; 0x284
   1dad0:	ldrd	r8, [r9]
   1dad4:	bic	r1, r2, #255	; 0xff
   1dad8:	str	r1, [sp, #112]	; 0x70
   1dadc:	str	r3, [sp, #116]	; 0x74
   1dae0:	ldrd	r2, [sp, #112]	; 0x70
   1dae4:	cmp	r3, r9
   1dae8:	cmpeq	r2, r8
   1daec:	bne	1dcac <_start@@Base+0x891c>
   1daf0:	cmp	r0, #7
   1daf4:	ble	1dcac <_start@@Base+0x891c>
   1daf8:	mov	r3, #7
   1dafc:	mov	r2, r6
   1db00:	mov	r1, r4
   1db04:	mov	r0, r7
   1db08:	bl	1924c <_start@@Base+0x3ebc>
   1db0c:	cmp	r4, r0
   1db10:	mov	r8, r0
   1db14:	beq	1dcac <_start@@Base+0x891c>
   1db18:	mov	r2, #0
   1db1c:	mov	r3, #0
   1db20:	mov	r1, #0
   1db24:	cmp	r6, r0
   1db28:	str	r1, [sp, #236]	; 0xec
   1db2c:	strd	r2, [sp, #240]	; 0xf0
   1db30:	strd	r2, [sp, #248]	; 0xf8
   1db34:	beq	1e6cc <_start@@Base+0x933c>
   1db38:	mov	r1, r0
   1db3c:	add	r0, sp, #248	; 0xf8
   1db40:	add	r3, sp, #236	; 0xec
   1db44:	mov	r2, r6
   1db48:	str	r0, [sp]
   1db4c:	mov	r0, r7
   1db50:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   1db54:	cmp	r8, r0
   1db58:	mov	r4, r0
   1db5c:	bne	1e7c0 <_start@@Base+0x9430>
   1db60:	add	r0, sp, #240	; 0xf0
   1db64:	mov	r3, r5
   1db68:	mov	r2, r6
   1db6c:	mov	r1, r4
   1db70:	str	r0, [sp]
   1db74:	mov	r0, r7
   1db78:	bl	1a82c <_start@@Base+0x549c>
   1db7c:	cmp	r6, r0
   1db80:	cmpne	r0, r4
   1db84:	beq	1dd3c <_start@@Base+0x89ac>
   1db88:	ldrd	r2, [sp, #240]	; 0xf0
   1db8c:	mov	r4, r0
   1db90:	orrs	r3, r2, r3
   1db94:	bne	1dba4 <_start@@Base+0x8814>
   1db98:	ldr	r3, [r7, #8]
   1db9c:	tst	r3, #2
   1dba0:	beq	1dbc8 <_start@@Base+0x8838>
   1dba4:	mov	r3, #8
   1dba8:	mov	r1, #0
   1dbac:	ldr	r0, [r7]
   1dbb0:	mov	r2, r3
   1dbb4:	bl	293ac <flatcc_builder_table_add@@Base>
   1dbb8:	cmp	r0, #0
   1dbbc:	beq	1f3cc <_start@@Base+0xa03c>
   1dbc0:	ldrd	r2, [sp, #240]	; 0xf0
   1dbc4:	strd	r2, [r0]
   1dbc8:	sub	r3, r6, r4
   1dbcc:	cmp	r3, #1
   1dbd0:	ble	1dbe4 <_start@@Base+0x8854>
   1dbd4:	ldrb	r3, [r4]
   1dbd8:	cmp	r3, #32
   1dbdc:	bhi	1dbf8 <_start@@Base+0x8868>
   1dbe0:	beq	1de88 <_start@@Base+0x8af8>
   1dbe4:	mov	r1, r4
   1dbe8:	mov	r2, r6
   1dbec:	mov	r0, r7
   1dbf0:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1dbf4:	mov	r4, r0
   1dbf8:	cmp	r6, r4
   1dbfc:	beq	1dcf8 <_start@@Base+0x8968>
   1dc00:	ldrb	r3, [r4]
   1dc04:	cmp	r3, #44	; 0x2c
   1dc08:	beq	1de9c <_start@@Base+0x8b0c>
   1dc0c:	mov	r3, #0
   1dc10:	str	r3, [sp, #232]	; 0xe8
   1dc14:	ldrb	r3, [r4]
   1dc18:	cmp	r3, #125	; 0x7d
   1dc1c:	beq	1dcc4 <_start@@Base+0x8934>
   1dc20:	mov	r3, #10
   1dc24:	mov	r1, r4
   1dc28:	mov	r2, r6
   1dc2c:	mov	r0, r7
   1dc30:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1dc34:	ldr	r3, [sp, #232]	; 0xe8
   1dc38:	b	1d8e4 <_start@@Base+0x8554>
   1dc3c:	mov	r2, #0
   1dc40:	mov	r3, #0
   1dc44:	b	1da64 <_start@@Base+0x86d4>
   1dc48:	mov	r2, #0
   1dc4c:	mov	ip, r2
   1dc50:	b	1da70 <_start@@Base+0x86e0>
   1dc54:	mov	r2, #0
   1dc58:	mov	ip, r2
   1dc5c:	b	1da78 <_start@@Base+0x86e8>
   1dc60:	mov	sl, #0
   1dc64:	mov	ip, sl
   1dc68:	b	1da80 <_start@@Base+0x86f0>
   1dc6c:	mov	sl, #0
   1dc70:	mov	ip, sl
   1dc74:	b	1da88 <_start@@Base+0x86f8>
   1dc78:	ldrb	r2, [r1, #9]
   1dc7c:	mov	ip, #0
   1dc80:	ldrb	r8, [r1, #8]
   1dc84:	str	ip, [sp, #48]	; 0x30
   1dc88:	lsl	r2, r2, #16
   1dc8c:	orr	r3, r2, r8, lsl #24
   1dc90:	str	r3, [sp, #52]	; 0x34
   1dc94:	b	1dac8 <_start@@Base+0x8738>
   1dc98:	mov	r2, r6
   1dc9c:	mov	r0, r7
   1dca0:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   1dca4:	mov	r4, r0
   1dca8:	b	1dbc8 <_start@@Base+0x8838>
   1dcac:	mov	r1, r4
   1dcb0:	mov	r2, r6
   1dcb4:	mov	r0, r7
   1dcb8:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   1dcbc:	mov	r4, r0
   1dcc0:	b	1dbc8 <_start@@Base+0x8838>
   1dcc4:	add	r1, r4, #1
   1dcc8:	sub	r3, r6, r1
   1dccc:	cmp	r3, #1
   1dcd0:	ble	1dce4 <_start@@Base+0x8954>
   1dcd4:	ldrb	r3, [r4, #1]
   1dcd8:	cmp	r3, #32
   1dcdc:	bhi	1e5f8 <_start@@Base+0x9268>
   1dce0:	beq	1e6d4 <_start@@Base+0x9344>
   1dce4:	mov	r2, r6
   1dce8:	mov	r0, r7
   1dcec:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1dcf0:	ldr	r3, [sp, #232]	; 0xe8
   1dcf4:	b	1d8e4 <_start@@Base+0x8554>
   1dcf8:	mov	r3, #0
   1dcfc:	mov	r5, r4
   1dd00:	str	r3, [sp, #232]	; 0xe8
   1dd04:	ldr	r3, [r7, #24]
   1dd08:	cmp	r3, #0
   1dd0c:	bne	1dd40 <_start@@Base+0x89b0>
   1dd10:	ldr	r0, [r7]
   1dd14:	bl	2825c <flatcc_builder_end_table@@Base>
   1dd18:	subs	r4, r0, #0
   1dd1c:	beq	1dd40 <_start@@Base+0x89b0>
   1dd20:	mov	r1, #2
   1dd24:	ldr	r0, [r7]
   1dd28:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   1dd2c:	cmp	r0, #0
   1dd30:	beq	1d650 <_start@@Base+0x82c0>
   1dd34:	str	r4, [r0]
   1dd38:	b	1d714 <_start@@Base+0x8384>
   1dd3c:	mov	r5, r0
   1dd40:	mov	r1, r5
   1dd44:	b	1d63c <_start@@Base+0x82ac>
   1dd48:	svcpl	0x00626262
   1dd4c:	cmnvs	r1, r1, ror #2
   1dd50:	cmnvs	r2, pc, asr r4
   1dd54:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1dd58:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1dd5c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1dd60:	movwvc	r0, #0
   1dd64:	cmnvc	r4, #112, 10	; 0x1c000000
   1dd68:	andeq	r7, r3, r8, lsl r1
   1dd6c:	andeq	r7, r3, r4, asr r2
   1dd70:	add	r4, r1, #16
   1dd74:	mov	r1, r6
   1dd78:	mov	r0, r4
   1dd7c:	bl	15480 <_start@@Base+0xf0>
   1dd80:	and	r3, r0, #-16777216	; 0xff000000
   1dd84:	str	r3, [sp, #160]	; 0xa0
   1dd88:	str	r1, [sp, #164]	; 0xa4
   1dd8c:	sub	r1, pc, #52	; 0x34
   1dd90:	ldrd	r0, [r1]
   1dd94:	ldrd	r2, [sp, #160]	; 0xa0
   1dd98:	cmp	r3, r1
   1dd9c:	cmpeq	r2, r0
   1dda0:	bne	1dcac <_start@@Base+0x891c>
   1dda4:	sub	r3, r6, r4
   1dda8:	cmp	r3, #5
   1ddac:	ble	1dcac <_start@@Base+0x891c>
   1ddb0:	mov	r3, #5
   1ddb4:	mov	r2, r6
   1ddb8:	mov	r1, r4
   1ddbc:	mov	r0, r7
   1ddc0:	bl	1924c <_start@@Base+0x3ebc>
   1ddc4:	cmp	r4, r0
   1ddc8:	mov	r8, r0
   1ddcc:	beq	1dcac <_start@@Base+0x891c>
   1ddd0:	mov	r2, #0
   1ddd4:	mov	r3, #0
   1ddd8:	str	r9, [sp, #236]	; 0xec
   1dddc:	cmp	r6, r0
   1dde0:	str	r9, [sp, #240]	; 0xf0
   1dde4:	strd	r2, [sp, #248]	; 0xf8
   1dde8:	beq	1f080 <_start@@Base+0x9cf0>
   1ddec:	mov	r1, r0
   1ddf0:	add	r0, sp, #248	; 0xf8
   1ddf4:	add	r3, sp, #240	; 0xf0
   1ddf8:	mov	r2, r6
   1ddfc:	str	r0, [sp]
   1de00:	mov	r0, r7
   1de04:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   1de08:	cmp	r8, r0
   1de0c:	mov	r9, r0
   1de10:	bne	1f158 <_start@@Base+0x9dc8>
   1de14:	ldr	r3, [pc, #-176]	; 1dd6c <_start@@Base+0x89dc>
   1de18:	add	ip, sp, #236	; 0xec
   1de1c:	mov	r2, r6
   1de20:	mov	r1, r9
   1de24:	mov	r0, r7
   1de28:	str	ip, [sp]
   1de2c:	add	r3, pc, r3
   1de30:	add	r3, r3, #252	; 0xfc
   1de34:	bl	1a620 <_start@@Base+0x5290>
   1de38:	cmp	r6, r0
   1de3c:	cmpne	r0, r9
   1de40:	mov	r4, r0
   1de44:	beq	1f3cc <_start@@Base+0xa03c>
   1de48:	ldr	r2, [sp, #236]	; 0xec
   1de4c:	cmp	r2, #0
   1de50:	bne	1de60 <_start@@Base+0x8ad0>
   1de54:	ldr	r3, [r7, #8]
   1de58:	tst	r3, #2
   1de5c:	beq	1dbc8 <_start@@Base+0x8838>
   1de60:	mov	r3, #4
   1de64:	mov	r1, #1
   1de68:	ldr	r0, [r7]
   1de6c:	mov	r2, r3
   1de70:	bl	293ac <flatcc_builder_table_add@@Base>
   1de74:	cmp	r0, #0
   1de78:	beq	1f3cc <_start@@Base+0xa03c>
   1de7c:	ldr	r3, [sp, #236]	; 0xec
   1de80:	str	r3, [r0]
   1de84:	b	1dbc8 <_start@@Base+0x8838>
   1de88:	ldrb	r3, [r4, #1]
   1de8c:	cmp	r3, #32
   1de90:	addhi	r4, r4, #1
   1de94:	bls	1dbe4 <_start@@Base+0x8854>
   1de98:	b	1dbf8 <_start@@Base+0x8868>
   1de9c:	add	r1, r4, #1
   1dea0:	sub	r3, r6, r1
   1dea4:	cmp	r3, #1
   1dea8:	ble	1debc <_start@@Base+0x8b2c>
   1deac:	ldrb	r3, [r4, #1]
   1deb0:	cmp	r3, #32
   1deb4:	bhi	1decc <_start@@Base+0x8b3c>
   1deb8:	beq	1f008 <_start@@Base+0x9c78>
   1debc:	mov	r2, r6
   1dec0:	mov	r0, r7
   1dec4:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1dec8:	mov	r1, r0
   1decc:	cmp	r6, r1
   1ded0:	beq	1f020 <_start@@Base+0x9c90>
   1ded4:	ldrb	r3, [r1]
   1ded8:	cmp	r3, #125	; 0x7d
   1dedc:	beq	1f11c <_start@@Base+0x9d8c>
   1dee0:	mov	r3, #1
   1dee4:	str	r3, [sp, #232]	; 0xe8
   1dee8:	b	1d8fc <_start@@Base+0x856c>
   1deec:	mov	r1, r4
   1def0:	mov	r2, r6
   1def4:	mov	r0, r7
   1def8:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   1defc:	mov	r5, r0
   1df00:	b	1d714 <_start@@Base+0x8384>
   1df04:	cmp	r5, #6
   1df08:	ble	1deec <_start@@Base+0x8b5c>
   1df0c:	mov	r3, #6
   1df10:	mov	r2, r6
   1df14:	mov	r1, r4
   1df18:	mov	r0, r7
   1df1c:	bl	1924c <_start@@Base+0x3ebc>
   1df20:	cmp	r4, r0
   1df24:	mov	r5, r0
   1df28:	beq	1deec <_start@@Base+0x8b5c>
   1df2c:	mov	r1, #2
   1df30:	ldr	r0, [r7]
   1df34:	bl	27878 <flatcc_builder_start_table@@Base>
   1df38:	cmp	r0, #0
   1df3c:	mov	r1, r5
   1df40:	bne	1d63c <_start@@Base+0x82ac>
   1df44:	add	r3, sp, #232	; 0xe8
   1df48:	mov	r2, r6
   1df4c:	mov	r0, r7
   1df50:	bl	19178 <_start@@Base+0x3de8>
   1df54:	ldr	r3, [sp, #232]	; 0xe8
   1df58:	cmp	r3, #0
   1df5c:	beq	1f420 <_start@@Base+0xa090>
   1df60:	ldr	r9, [pc, #-512]	; 1dd68 <_start@@Base+0x89d8>
   1df64:	mov	r1, r0
   1df68:	add	r9, pc, r9
   1df6c:	add	r9, r9, #168	; 0xa8
   1df70:	cmp	r6, r1
   1df74:	beq	1dfa0 <_start@@Base+0x8c10>
   1df78:	ldrb	r3, [r1]
   1df7c:	cmp	r3, #34	; 0x22
   1df80:	moveq	r3, #0
   1df84:	addeq	r1, r1, #1
   1df88:	streq	r3, [r7, #12]
   1df8c:	beq	1dfa0 <_start@@Base+0x8c10>
   1df90:	cmp	r3, #46	; 0x2e
   1df94:	movne	r3, #1
   1df98:	strne	r3, [r7, #12]
   1df9c:	beq	1e5a0 <_start@@Base+0x9210>
   1dfa0:	sub	r3, r6, r1
   1dfa4:	cmp	r3, #8
   1dfa8:	bhi	1dfdc <_start@@Base+0x8c4c>
   1dfac:	sub	r3, r3, #1
   1dfb0:	cmp	r3, #7
   1dfb4:	addls	pc, pc, r3, lsl #2
   1dfb8:	b	1e2e4 <_start@@Base+0x8f54>
   1dfbc:	b	1e0b4 <_start@@Base+0x8d24>
   1dfc0:	b	1e0a8 <_start@@Base+0x8d18>
   1dfc4:	b	1e09c <_start@@Base+0x8d0c>
   1dfc8:	b	1e090 <_start@@Base+0x8d00>
   1dfcc:	b	1e084 <_start@@Base+0x8cf4>
   1dfd0:	b	1e0c0 <_start@@Base+0x8d30>
   1dfd4:	b	1e078 <_start@@Base+0x8ce8>
   1dfd8:	b	1dfdc <_start@@Base+0x8c4c>
   1dfdc:	ldrb	sl, [r1, #7]
   1dfe0:	mov	fp, #0
   1dfe4:	mov	r3, fp
   1dfe8:	ldrb	r4, [r1, #6]
   1dfec:	orr	r2, sl, r4, lsl #8
   1dff0:	ldrb	r4, [r1, #5]
   1dff4:	orr	r2, r2, r4, lsl #16
   1dff8:	ldrb	r4, [r1, #4]
   1dffc:	orr	r2, r2, r4, lsl #24
   1e000:	ldrb	sl, [r1, #3]
   1e004:	orr	r3, r3, sl
   1e008:	ldrb	sl, [r1, #2]
   1e00c:	orr	sl, r3, sl, lsl #8
   1e010:	ldrb	r4, [r1, #1]
   1e014:	orr	sl, sl, r4, lsl #16
   1e018:	str	r2, [sp, #64]	; 0x40
   1e01c:	ldrb	r2, [r1]
   1e020:	add	r5, pc, #856	; 0x358
   1e024:	ldrd	r4, [r5]
   1e028:	orr	r3, sl, r2, lsl #24
   1e02c:	str	r3, [sp, #68]	; 0x44
   1e030:	ldrd	r2, [sp, #64]	; 0x40
   1e034:	cmp	r3, r5
   1e038:	cmpeq	r2, r4
   1e03c:	bne	1e2e4 <_start@@Base+0x8f54>
   1e040:	add	r8, r1, #8
   1e044:	sub	r0, r6, r8
   1e048:	cmp	r0, #8
   1e04c:	bhi	1e0cc <_start@@Base+0x8d3c>
   1e050:	sub	r3, r0, #3
   1e054:	cmp	r3, #5
   1e058:	addls	pc, pc, r3, lsl #2
   1e05c:	b	1e2f8 <_start@@Base+0x8f68>
   1e060:	b	1e2cc <_start@@Base+0x8f3c>
   1e064:	b	1e2c0 <_start@@Base+0x8f30>
   1e068:	b	1e2b4 <_start@@Base+0x8f24>
   1e06c:	b	1e2a8 <_start@@Base+0x8f18>
   1e070:	b	1e2d8 <_start@@Base+0x8f48>
   1e074:	b	1e0cc <_start@@Base+0x8d3c>
   1e078:	mov	sl, #0
   1e07c:	mov	fp, #0
   1e080:	b	1dfe4 <_start@@Base+0x8c54>
   1e084:	mov	r2, #0
   1e088:	mov	r3, r2
   1e08c:	b	1dff8 <_start@@Base+0x8c68>
   1e090:	mov	r2, #0
   1e094:	mov	r3, r2
   1e098:	b	1e000 <_start@@Base+0x8c70>
   1e09c:	mov	r2, #0
   1e0a0:	mov	r3, r2
   1e0a4:	b	1e008 <_start@@Base+0x8c78>
   1e0a8:	mov	r2, #0
   1e0ac:	mov	sl, r2
   1e0b0:	b	1e010 <_start@@Base+0x8c80>
   1e0b4:	mov	r2, #0
   1e0b8:	mov	sl, r2
   1e0bc:	b	1e018 <_start@@Base+0x8c88>
   1e0c0:	mov	r2, #0
   1e0c4:	mov	r3, r2
   1e0c8:	b	1dff0 <_start@@Base+0x8c60>
   1e0cc:	ldrb	r2, [r1, #15]
   1e0d0:	mov	r3, #0
   1e0d4:	mov	ip, r3
   1e0d8:	ldrb	r4, [r1, #14]
   1e0dc:	orr	r2, r2, r4, lsl #8
   1e0e0:	ldrb	r4, [r1, #13]
   1e0e4:	orr	r2, r2, r4, lsl #16
   1e0e8:	ldrb	r4, [r1, #12]
   1e0ec:	orr	r2, r2, r4, lsl #24
   1e0f0:	ldrb	sl, [r1, #11]
   1e0f4:	orr	ip, ip, sl
   1e0f8:	ldrb	r4, [r1, #8]
   1e0fc:	mov	r5, #0
   1e100:	str	r2, [sp, #32]
   1e104:	ldrb	sl, [r1, #10]
   1e108:	ldrb	r2, [r1, #9]
   1e10c:	lsl	r4, r4, #24
   1e110:	orr	sl, ip, sl, lsl #8
   1e114:	orr	r4, r4, r2, lsl #16
   1e118:	orr	r3, r4, sl
   1e11c:	add	fp, pc, #612	; 0x264
   1e120:	ldrd	sl, [fp]
   1e124:	str	r3, [sp, #36]	; 0x24
   1e128:	ldrd	r2, [sp, #32]
   1e12c:	bic	r1, r2, #255	; 0xff
   1e130:	str	r1, [sp, #88]	; 0x58
   1e134:	str	r3, [sp, #92]	; 0x5c
   1e138:	ldrd	r2, [sp, #88]	; 0x58
   1e13c:	cmp	r3, fp
   1e140:	cmpeq	r2, sl
   1e144:	beq	1e39c <_start@@Base+0x900c>
   1e148:	add	fp, pc, #576	; 0x240
   1e14c:	ldrd	sl, [fp]
   1e150:	ldrd	r2, [sp, #32]
   1e154:	cmp	r3, fp
   1e158:	cmpeq	r2, sl
   1e15c:	bne	1e2f8 <_start@@Base+0x8f68>
   1e160:	cmp	r0, #8
   1e164:	ble	1e2f8 <_start@@Base+0x8f68>
   1e168:	mov	r3, #8
   1e16c:	mov	r2, r6
   1e170:	mov	r1, r8
   1e174:	mov	r0, r7
   1e178:	bl	1924c <_start@@Base+0x3ebc>
   1e17c:	cmp	r8, r0
   1e180:	mov	r4, r0
   1e184:	beq	1e2f8 <_start@@Base+0x8f68>
   1e188:	mov	r2, #0
   1e18c:	mov	r3, #0
   1e190:	str	r5, [sp, #236]	; 0xec
   1e194:	cmp	r6, r0
   1e198:	str	r5, [sp, #240]	; 0xf0
   1e19c:	strd	r2, [sp, #248]	; 0xf8
   1e1a0:	beq	1e69c <_start@@Base+0x930c>
   1e1a4:	mov	r1, r0
   1e1a8:	add	r0, sp, #248	; 0xf8
   1e1ac:	add	r3, sp, #240	; 0xf0
   1e1b0:	mov	r2, r6
   1e1b4:	str	r0, [sp]
   1e1b8:	mov	r0, r7
   1e1bc:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   1e1c0:	cmp	r4, r0
   1e1c4:	mov	r8, r0
   1e1c8:	bne	1e714 <_start@@Base+0x9384>
   1e1cc:	add	r0, sp, #236	; 0xec
   1e1d0:	mov	r3, r9
   1e1d4:	mov	r2, r6
   1e1d8:	mov	r1, r8
   1e1dc:	str	r0, [sp]
   1e1e0:	mov	r0, r7
   1e1e4:	bl	1a620 <_start@@Base+0x5290>
   1e1e8:	cmp	r6, r0
   1e1ec:	cmpne	r0, r8
   1e1f0:	mov	r5, r0
   1e1f4:	beq	1dd40 <_start@@Base+0x89b0>
   1e1f8:	ldr	r2, [sp, #236]	; 0xec
   1e1fc:	cmp	r2, #0
   1e200:	bne	1e210 <_start@@Base+0x8e80>
   1e204:	ldr	r3, [r7, #8]
   1e208:	tst	r3, #2
   1e20c:	beq	1e234 <_start@@Base+0x8ea4>
   1e210:	mov	r3, #4
   1e214:	mov	r1, #1
   1e218:	ldr	r0, [r7]
   1e21c:	mov	r2, r3
   1e220:	bl	293ac <flatcc_builder_table_add@@Base>
   1e224:	cmp	r0, #0
   1e228:	beq	1dd40 <_start@@Base+0x89b0>
   1e22c:	ldr	r3, [sp, #236]	; 0xec
   1e230:	str	r3, [r0]
   1e234:	sub	r3, r6, r5
   1e238:	cmp	r3, #1
   1e23c:	ble	1e250 <_start@@Base+0x8ec0>
   1e240:	ldrb	r3, [r5]
   1e244:	cmp	r3, #32
   1e248:	bhi	1e264 <_start@@Base+0x8ed4>
   1e24c:	beq	1e47c <_start@@Base+0x90ec>
   1e250:	mov	r1, r5
   1e254:	mov	r2, r6
   1e258:	mov	r0, r7
   1e25c:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1e260:	mov	r5, r0
   1e264:	cmp	r6, r5
   1e268:	beq	1e344 <_start@@Base+0x8fb4>
   1e26c:	ldrb	r3, [r5]
   1e270:	cmp	r3, #44	; 0x2c
   1e274:	beq	1e490 <_start@@Base+0x9100>
   1e278:	mov	r3, #0
   1e27c:	str	r3, [sp, #232]	; 0xe8
   1e280:	ldrb	r3, [r5]
   1e284:	cmp	r3, #125	; 0x7d
   1e288:	beq	1e310 <_start@@Base+0x8f80>
   1e28c:	mov	r3, #10
   1e290:	mov	r1, r5
   1e294:	mov	r2, r6
   1e298:	mov	r0, r7
   1e29c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1e2a0:	ldr	r3, [sp, #232]	; 0xe8
   1e2a4:	b	1df58 <_start@@Base+0x8bc8>
   1e2a8:	mov	r2, #0
   1e2ac:	mov	ip, r2
   1e2b0:	b	1e0e0 <_start@@Base+0x8d50>
   1e2b4:	mov	r2, #0
   1e2b8:	mov	ip, r2
   1e2bc:	b	1e0e8 <_start@@Base+0x8d58>
   1e2c0:	mov	r2, #0
   1e2c4:	mov	ip, r2
   1e2c8:	b	1e0f0 <_start@@Base+0x8d60>
   1e2cc:	mov	r2, #0
   1e2d0:	mov	ip, r2
   1e2d4:	b	1e0f8 <_start@@Base+0x8d68>
   1e2d8:	mov	r2, #0
   1e2dc:	mov	r3, #0
   1e2e0:	b	1e0d4 <_start@@Base+0x8d44>
   1e2e4:	mov	r2, r6
   1e2e8:	mov	r0, r7
   1e2ec:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   1e2f0:	mov	r5, r0
   1e2f4:	b	1e234 <_start@@Base+0x8ea4>
   1e2f8:	mov	r1, r8
   1e2fc:	mov	r2, r6
   1e300:	mov	r0, r7
   1e304:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   1e308:	mov	r5, r0
   1e30c:	b	1e234 <_start@@Base+0x8ea4>
   1e310:	add	r1, r5, #1
   1e314:	sub	r3, r6, r1
   1e318:	cmp	r3, #1
   1e31c:	ble	1e330 <_start@@Base+0x8fa0>
   1e320:	ldrb	r3, [r5, #1]
   1e324:	cmp	r3, #32
   1e328:	bhi	1e5d0 <_start@@Base+0x9240>
   1e32c:	beq	1e6a4 <_start@@Base+0x9314>
   1e330:	mov	r2, r6
   1e334:	mov	r0, r7
   1e338:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1e33c:	ldr	r3, [sp, #232]	; 0xe8
   1e340:	b	1df58 <_start@@Base+0x8bc8>
   1e344:	mov	r3, #0
   1e348:	str	r3, [sp, #232]	; 0xe8
   1e34c:	ldr	r3, [r7, #24]
   1e350:	cmp	r3, #0
   1e354:	bne	1dd40 <_start@@Base+0x89b0>
   1e358:	ldr	r0, [r7]
   1e35c:	bl	2825c <flatcc_builder_end_table@@Base>
   1e360:	subs	r4, r0, #0
   1e364:	beq	1dd40 <_start@@Base+0x89b0>
   1e368:	mov	r1, #1
   1e36c:	ldr	r0, [r7]
   1e370:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   1e374:	cmp	r0, #0
   1e378:	bne	1dd34 <_start@@Base+0x89a4>
   1e37c:	b	1d650 <_start@@Base+0x82c0>
   1e380:	svcpl	0x00626262
   1e384:	cmnvs	r1, r1, ror #2
   1e388:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1e38c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1e390:	cmnvs	r2, pc, asr r4
   1e394:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1e398:	andeq	r6, r3, r0, ror #24
   1e39c:	cmp	r0, #7
   1e3a0:	ble	1e2f8 <_start@@Base+0x8f68>
   1e3a4:	mov	r3, #7
   1e3a8:	mov	r2, r6
   1e3ac:	mov	r1, r8
   1e3b0:	mov	r0, r7
   1e3b4:	bl	1924c <_start@@Base+0x3ebc>
   1e3b8:	cmp	r8, r0
   1e3bc:	mov	r4, r0
   1e3c0:	beq	1e2f8 <_start@@Base+0x8f68>
   1e3c4:	mov	r2, #0
   1e3c8:	mov	r3, #0
   1e3cc:	str	r5, [sp, #236]	; 0xec
   1e3d0:	cmp	r6, r0
   1e3d4:	strd	r2, [sp, #240]	; 0xf0
   1e3d8:	strd	r2, [sp, #248]	; 0xf8
   1e3dc:	beq	1e694 <_start@@Base+0x9304>
   1e3e0:	mov	r1, r0
   1e3e4:	add	r0, sp, #248	; 0xf8
   1e3e8:	add	r3, sp, #236	; 0xec
   1e3ec:	mov	r2, r6
   1e3f0:	str	r0, [sp]
   1e3f4:	mov	r0, r7
   1e3f8:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   1e3fc:	cmp	r4, r0
   1e400:	mov	r5, r0
   1e404:	bne	1e6e8 <_start@@Base+0x9358>
   1e408:	ldr	r3, [pc, #-120]	; 1e398 <_start@@Base+0x9008>
   1e40c:	add	ip, sp, #240	; 0xf0
   1e410:	mov	r2, r6
   1e414:	mov	r1, r5
   1e418:	mov	r0, r7
   1e41c:	str	ip, [sp]
   1e420:	add	r3, pc, r3
   1e424:	add	r3, r3, #156	; 0x9c
   1e428:	bl	1a82c <_start@@Base+0x549c>
   1e42c:	cmp	r6, r0
   1e430:	cmpne	r0, r5
   1e434:	beq	1dd3c <_start@@Base+0x89ac>
   1e438:	ldrd	r2, [sp, #240]	; 0xf0
   1e43c:	mov	r5, r0
   1e440:	orrs	r3, r2, r3
   1e444:	bne	1e454 <_start@@Base+0x90c4>
   1e448:	ldr	r3, [r7, #8]
   1e44c:	tst	r3, #2
   1e450:	beq	1e234 <_start@@Base+0x8ea4>
   1e454:	mov	r3, #8
   1e458:	mov	r1, #0
   1e45c:	ldr	r0, [r7]
   1e460:	mov	r2, r3
   1e464:	bl	293ac <flatcc_builder_table_add@@Base>
   1e468:	cmp	r0, #0
   1e46c:	beq	1dd40 <_start@@Base+0x89b0>
   1e470:	ldrd	r2, [sp, #240]	; 0xf0
   1e474:	strd	r2, [r0]
   1e478:	b	1e234 <_start@@Base+0x8ea4>
   1e47c:	ldrb	r3, [r5, #1]
   1e480:	cmp	r3, #32
   1e484:	addhi	r5, r5, #1
   1e488:	bls	1e250 <_start@@Base+0x8ec0>
   1e48c:	b	1e264 <_start@@Base+0x8ed4>
   1e490:	add	r1, r5, #1
   1e494:	sub	r3, r6, r1
   1e498:	cmp	r3, #1
   1e49c:	ble	1e4b0 <_start@@Base+0x9120>
   1e4a0:	ldrb	r3, [r5, #1]
   1e4a4:	cmp	r3, #32
   1e4a8:	bhi	1e4c0 <_start@@Base+0x9130>
   1e4ac:	beq	1e768 <_start@@Base+0x93d8>
   1e4b0:	mov	r2, r6
   1e4b4:	mov	r0, r7
   1e4b8:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1e4bc:	mov	r1, r0
   1e4c0:	cmp	r6, r1
   1e4c4:	beq	1e780 <_start@@Base+0x93f0>
   1e4c8:	ldrb	r3, [r1]
   1e4cc:	cmp	r3, #125	; 0x7d
   1e4d0:	beq	1f044 <_start@@Base+0x9cb4>
   1e4d4:	mov	r3, #1
   1e4d8:	str	r3, [sp, #232]	; 0xe8
   1e4dc:	b	1df70 <_start@@Base+0x8be0>
   1e4e0:	mov	r3, r6
   1e4e4:	mov	r6, r5
   1e4e8:	mov	r5, r3
   1e4ec:	mov	r3, #0
   1e4f0:	str	r3, [sp, #216]	; 0xd8
   1e4f4:	ldr	r3, [r7, #24]
   1e4f8:	cmp	r3, #0
   1e4fc:	bne	1ce7c <_start@@Base+0x7aec>
   1e500:	mov	r1, r6
   1e504:	mov	r2, r5
   1e508:	ldr	r3, [sp, #224]	; 0xe0
   1e50c:	mov	r0, r7
   1e510:	bl	2f568 <flatcc_json_parser_finalize_unions@@Base>
   1e514:	mov	sl, r0
   1e518:	ldr	r0, [r7]
   1e51c:	bl	2825c <flatcc_builder_end_table@@Base>
   1e520:	ldr	r3, [sp, #212]	; 0xd4
   1e524:	cmp	r0, #0
   1e528:	moveq	r6, sl
   1e52c:	str	r0, [r3]
   1e530:	bne	1ce94 <_start@@Base+0x7b04>
   1e534:	b	1ce7c <_start@@Base+0x7aec>
   1e538:	ldrb	r3, [r5, #1]
   1e53c:	cmp	r3, #32
   1e540:	addhi	r5, r5, #1
   1e544:	bls	1d040 <_start@@Base+0x7cb0>
   1e548:	b	1d054 <_start@@Base+0x7cc4>
   1e54c:	add	r4, r5, #1
   1e550:	sub	r3, r6, r4
   1e554:	cmp	r3, #1
   1e558:	ble	1e56c <_start@@Base+0x91dc>
   1e55c:	ldrb	r3, [r5, #1]
   1e560:	cmp	r3, #32
   1e564:	bhi	1e580 <_start@@Base+0x91f0>
   1e568:	beq	1f1d8 <_start@@Base+0x9e48>
   1e56c:	mov	r1, r4
   1e570:	mov	r2, r6
   1e574:	mov	r0, r7
   1e578:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1e57c:	mov	r4, r0
   1e580:	cmp	r6, r4
   1e584:	beq	1f2bc <_start@@Base+0x9f2c>
   1e588:	ldrb	r3, [r4]
   1e58c:	cmp	r3, #125	; 0x7d
   1e590:	beq	1f260 <_start@@Base+0x9ed0>
   1e594:	mov	r3, #1
   1e598:	str	r3, [sp, #216]	; 0xd8
   1e59c:	b	1cf00 <_start@@Base+0x7b70>
   1e5a0:	mov	r3, #5
   1e5a4:	mov	r2, r6
   1e5a8:	mov	r0, r7
   1e5ac:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1e5b0:	mov	r1, r0
   1e5b4:	b	1dfa0 <_start@@Base+0x8c10>
   1e5b8:	mov	r1, r0
   1e5bc:	mov	r3, #5
   1e5c0:	mov	r2, r6
   1e5c4:	mov	r0, r7
   1e5c8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1e5cc:	b	1d300 <_start@@Base+0x7f70>
   1e5d0:	mov	r5, r1
   1e5d4:	b	1e34c <_start@@Base+0x8fbc>
   1e5d8:	mov	r3, #5
   1e5dc:	mov	r2, r6
   1e5e0:	mov	r0, r7
   1e5e4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1e5e8:	mov	r1, r0
   1e5ec:	b	1d92c <_start@@Base+0x859c>
   1e5f0:	mov	r5, r1
   1e5f4:	b	1d7f0 <_start@@Base+0x8460>
   1e5f8:	mov	r5, r1
   1e5fc:	b	1dd04 <_start@@Base+0x8974>
   1e600:	ldrd	r0, [sp, #40]	; 0x28
   1e604:	add	r3, pc, #996	; 0x3e4
   1e608:	ldrd	r2, [r3]
   1e60c:	and	lr, r0, #-16777216	; 0xff000000
   1e610:	str	lr, [sp, #192]	; 0xc0
   1e614:	str	r1, [sp, #196]	; 0xc4
   1e618:	ldrd	r0, [sp, #192]	; 0xc0
   1e61c:	cmp	r1, r3
   1e620:	cmpeq	r0, r2
   1e624:	bne	1d0b0 <_start@@Base+0x7d20>
   1e628:	cmp	ip, #5
   1e62c:	ble	1d0b0 <_start@@Base+0x7d20>
   1e630:	mov	r1, r4
   1e634:	mov	r3, #5
   1e638:	mov	r2, r6
   1e63c:	mov	r0, r7
   1e640:	bl	1924c <_start@@Base+0x3ebc>
   1e644:	cmp	r0, r4
   1e648:	mov	r1, r0
   1e64c:	beq	1d0b0 <_start@@Base+0x7d20>
   1e650:	add	r3, sp, #220	; 0xdc
   1e654:	mov	r2, r6
   1e658:	mov	r0, r7
   1e65c:	bl	1b340 <_start@@Base+0x5fb0>
   1e660:	ldr	r3, [sp, #220]	; 0xdc
   1e664:	mov	r5, r0
   1e668:	cmp	r3, #0
   1e66c:	beq	1e684 <_start@@Base+0x92f4>
   1e670:	mov	r1, #1
   1e674:	ldr	r0, [r7]
   1e678:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   1e67c:	cmp	r0, #0
   1e680:	bne	1d688 <_start@@Base+0x82f8>
   1e684:	mov	r3, r6
   1e688:	mov	r6, r5
   1e68c:	mov	r5, r3
   1e690:	b	1ce7c <_start@@Base+0x7aec>
   1e694:	mov	r5, r6
   1e698:	b	1e408 <_start@@Base+0x9078>
   1e69c:	mov	r8, r6
   1e6a0:	b	1e1cc <_start@@Base+0x8e3c>
   1e6a4:	ldrb	r3, [r5, #2]
   1e6a8:	cmp	r3, #32
   1e6ac:	bls	1e330 <_start@@Base+0x8fa0>
   1e6b0:	add	r5, r5, #2
   1e6b4:	b	1e34c <_start@@Base+0x8fbc>
   1e6b8:	ldrb	r3, [r5, #2]
   1e6bc:	cmp	r3, #32
   1e6c0:	bls	1d7d4 <_start@@Base+0x8444>
   1e6c4:	add	r5, r5, #2
   1e6c8:	b	1d7f0 <_start@@Base+0x8460>
   1e6cc:	mov	r4, r6
   1e6d0:	b	1db60 <_start@@Base+0x87d0>
   1e6d4:	ldrb	r3, [r4, #2]
   1e6d8:	cmp	r3, #32
   1e6dc:	bls	1dce4 <_start@@Base+0x8954>
   1e6e0:	add	r5, r4, #2
   1e6e4:	b	1dd04 <_start@@Base+0x8974>
   1e6e8:	ldr	r1, [sp, #236]	; 0xec
   1e6ec:	ldrd	r2, [sp, #248]	; 0xf8
   1e6f0:	cmp	r1, #0
   1e6f4:	beq	1f0a8 <_start@@Base+0x9d18>
   1e6f8:	cmp	r3, #-2147483648	; 0x80000000
   1e6fc:	cmpeq	r2, #0
   1e700:	bhi	1f36c <_start@@Base+0x9fdc>
   1e704:	rsbs	r2, r2, #0
   1e708:	rsc	r3, r3, #0
   1e70c:	strd	r2, [sp, #240]	; 0xf0
   1e710:	b	1e440 <_start@@Base+0x90b0>
   1e714:	ldr	r3, [sp, #240]	; 0xf0
   1e718:	cmp	r3, #0
   1e71c:	bne	1f31c <_start@@Base+0x9f8c>
   1e720:	ldrd	r2, [sp, #248]	; 0xf8
   1e724:	mov	r1, #0
   1e728:	mvn	r0, #0
   1e72c:	cmp	r3, r1
   1e730:	cmpeq	r2, r0
   1e734:	movls	r5, r8
   1e738:	strls	r2, [sp, #236]	; 0xec
   1e73c:	bls	1e1fc <_start@@Base+0x8e6c>
   1e740:	mov	r1, r8
   1e744:	mov	r3, #7
   1e748:	mov	r2, r6
   1e74c:	mov	r0, r7
   1e750:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1e754:	mov	r5, r0
   1e758:	cmp	r4, r5
   1e75c:	bne	1e1f8 <_start@@Base+0x8e68>
   1e760:	mov	r8, r4
   1e764:	b	1e1cc <_start@@Base+0x8e3c>
   1e768:	ldrb	r3, [r5, #2]
   1e76c:	cmp	r3, #32
   1e770:	addhi	r1, r5, #2
   1e774:	bls	1e4b0 <_start@@Base+0x9120>
   1e778:	cmp	r6, r1
   1e77c:	bne	1e4c8 <_start@@Base+0x9138>
   1e780:	mov	ip, #0
   1e784:	mov	r3, #10
   1e788:	mov	r2, r6
   1e78c:	mov	r1, r6
   1e790:	mov	r0, r7
   1e794:	str	ip, [sp, #232]	; 0xe8
   1e798:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1e79c:	ldr	r3, [sp, #232]	; 0xe8
   1e7a0:	b	1df58 <_start@@Base+0x8bc8>
   1e7a4:	mov	r1, r4
   1e7a8:	mov	r3, #5
   1e7ac:	mov	r2, r6
   1e7b0:	mov	r0, r7
   1e7b4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1e7b8:	mov	r4, r0
   1e7bc:	b	1cf30 <_start@@Base+0x7ba0>
   1e7c0:	ldr	r1, [sp, #236]	; 0xec
   1e7c4:	ldrd	r2, [sp, #248]	; 0xf8
   1e7c8:	cmp	r1, #0
   1e7cc:	beq	1f1ac <_start@@Base+0x9e1c>
   1e7d0:	cmp	r3, #-2147483648	; 0x80000000
   1e7d4:	cmpeq	r2, #0
   1e7d8:	bhi	1f3a4 <_start@@Base+0xa014>
   1e7dc:	rsbs	r2, r2, #0
   1e7e0:	rsc	r3, r3, #0
   1e7e4:	strd	r2, [sp, #240]	; 0xf0
   1e7e8:	b	1db90 <_start@@Base+0x8800>
   1e7ec:	add	r3, sp, #236	; 0xec
   1e7f0:	mov	r1, r9
   1e7f4:	mov	r2, r6
   1e7f8:	mov	r0, r7
   1e7fc:	str	r3, [sp, #140]	; 0x8c
   1e800:	bl	19178 <_start@@Base+0x3de8>
   1e804:	ldr	r3, [sp, #236]	; 0xec
   1e808:	mov	r5, r0
   1e80c:	cmp	r3, #0
   1e810:	beq	1e9b4 <_start@@Base+0x9624>
   1e814:	add	fp, pc, #476	; 0x1dc
   1e818:	ldrd	sl, [fp]
   1e81c:	cmp	r6, r5
   1e820:	beq	1e84c <_start@@Base+0x94bc>
   1e824:	ldrb	r3, [r5]
   1e828:	cmp	r3, #34	; 0x22
   1e82c:	moveq	r3, #0
   1e830:	addeq	r5, r5, #1
   1e834:	streq	r3, [r7, #12]
   1e838:	beq	1e84c <_start@@Base+0x94bc>
   1e83c:	cmp	r3, #46	; 0x2e
   1e840:	movne	r3, #1
   1e844:	strne	r3, [r7, #12]
   1e848:	beq	1eefc <_start@@Base+0x9b6c>
   1e84c:	sub	ip, r6, r5
   1e850:	cmp	ip, #8
   1e854:	bhi	1e888 <_start@@Base+0x94f8>
   1e858:	sub	r3, ip, #1
   1e85c:	cmp	r3, #7
   1e860:	addls	pc, pc, r3, lsl #2
   1e864:	b	1ea38 <_start@@Base+0x96a8>
   1e868:	b	1ea38 <_start@@Base+0x96a8>
   1e86c:	b	1ea8c <_start@@Base+0x96fc>
   1e870:	b	1ea50 <_start@@Base+0x96c0>
   1e874:	b	1ea74 <_start@@Base+0x96e4>
   1e878:	b	1ea68 <_start@@Base+0x96d8>
   1e87c:	b	1ea5c <_start@@Base+0x96cc>
   1e880:	b	1ea80 <_start@@Base+0x96f0>
   1e884:	b	1e888 <_start@@Base+0x94f8>
   1e888:	ldrb	r2, [r5, #7]
   1e88c:	mov	r3, #0
   1e890:	mov	lr, r3
   1e894:	ldrb	r8, [r5, #6]
   1e898:	orr	r2, r2, r8, lsl #8
   1e89c:	ldrb	r8, [r5, #5]
   1e8a0:	orr	r2, r2, r8, lsl #16
   1e8a4:	ldrb	r8, [r5, #4]
   1e8a8:	orr	r8, r2, r8, lsl #24
   1e8ac:	ldrb	r0, [r5, #3]
   1e8b0:	orr	lr, lr, r0
   1e8b4:	ldrb	r2, [r5]
   1e8b8:	mov	r4, #0
   1e8bc:	str	r8, [sp, #24]
   1e8c0:	ldrb	r0, [r5, #2]
   1e8c4:	lsl	r8, r2, #24
   1e8c8:	ldrb	r2, [r5, #1]
   1e8cc:	orr	r0, lr, r0, lsl #8
   1e8d0:	orr	r2, r8, r2, lsl #16
   1e8d4:	orr	r3, r2, r0
   1e8d8:	str	r3, [sp, #28]
   1e8dc:	ldrd	r2, [sp, #24]
   1e8e0:	cmp	r3, fp
   1e8e4:	cmpeq	r2, sl
   1e8e8:	bhi	1eab8 <_start@@Base+0x9728>
   1e8ec:	add	r1, pc, #268	; 0x10c
   1e8f0:	ldrd	r0, [r1]
   1e8f4:	cmp	r3, r1
   1e8f8:	cmpeq	r2, r0
   1e8fc:	beq	1eb58 <_start@@Base+0x97c8>
   1e900:	ldr	r1, [sp, #28]
   1e904:	mov	r4, #0
   1e908:	movw	r3, #24929	; 0x6161
   1e90c:	movt	r3, #24929	; 0x6161
   1e910:	mov	r2, #0
   1e914:	str	r4, [sp, #120]	; 0x78
   1e918:	str	r1, [sp, #124]	; 0x7c
   1e91c:	ldrd	r0, [sp, #120]	; 0x78
   1e920:	cmp	r1, r3
   1e924:	cmpeq	r0, r2
   1e928:	bne	1ed44 <_start@@Base+0x99b4>
   1e92c:	cmp	ip, #4
   1e930:	ble	1ea38 <_start@@Base+0x96a8>
   1e934:	mov	r1, r5
   1e938:	mov	r3, #4
   1e93c:	mov	r2, r6
   1e940:	mov	r0, r7
   1e944:	bl	1924c <_start@@Base+0x3ebc>
   1e948:	cmp	r0, r5
   1e94c:	mov	r1, r0
   1e950:	beq	1ea38 <_start@@Base+0x96a8>
   1e954:	add	r3, sp, #240	; 0xf0
   1e958:	mov	r2, r6
   1e95c:	mov	r0, r7
   1e960:	bl	2f308 <flatcc_json_parser_build_string@@Base>
   1e964:	ldr	r3, [sp, #240]	; 0xf0
   1e968:	mov	r5, r0
   1e96c:	cmp	r3, #0
   1e970:	beq	1dd40 <_start@@Base+0x89b0>
   1e974:	mov	r1, r4
   1e978:	ldr	r0, [r7]
   1e97c:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   1e980:	cmp	r0, #0
   1e984:	beq	1dd40 <_start@@Base+0x89b0>
   1e988:	ldr	r3, [sp, #240]	; 0xf0
   1e98c:	str	r3, [r0]
   1e990:	mov	r1, r5
   1e994:	mov	r2, r6
   1e998:	ldr	r3, [sp, #140]	; 0x8c
   1e99c:	mov	r0, r7
   1e9a0:	bl	1b17c <_start@@Base+0x5dec>
   1e9a4:	ldr	r3, [sp, #236]	; 0xec
   1e9a8:	mov	r5, r0
   1e9ac:	cmp	r3, #0
   1e9b0:	bne	1e81c <_start@@Base+0x948c>
   1e9b4:	ldr	r1, [r7, #24]
   1e9b8:	cmp	r1, #0
   1e9bc:	bne	1dd40 <_start@@Base+0x89b0>
   1e9c0:	ldr	r0, [r7]
   1e9c4:	str	r1, [sp, #140]	; 0x8c
   1e9c8:	bl	2825c <flatcc_builder_end_table@@Base>
   1e9cc:	subs	r4, r0, #0
   1e9d0:	ldr	r1, [sp, #140]	; 0x8c
   1e9d4:	beq	1dd40 <_start@@Base+0x89b0>
   1e9d8:	ldr	r0, [r7]
   1e9dc:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   1e9e0:	cmp	r0, #0
   1e9e4:	bne	1dd34 <_start@@Base+0x89a4>
   1e9e8:	b	1d650 <_start@@Base+0x82c0>
   1e9ec:	nop	{0}
   1e9f0:	strvs	r0, [r0, #-0]
   1e9f4:	stclvs	6, cr7, [pc, #-420]!	; 1e858 <_start@@Base+0x94c8>
   1e9f8:			; <UNDEFINED> instruction: 0xffffffff
   1e9fc:	cmnvs	r3, #-2013265919	; 0x88000001
   1ea00:	teqcc	r2, r4, lsr r3
   1ea04:	cmnvs	r1, r1, ror #2
   1ea08:	teqcc	r2, r4, lsr r3
   1ea0c:	cmnvs	r3, #-1946157055	; 0x8c000001
   1ea10:	teqcc	r2, r4, lsr r3
   1ea14:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   1ea18:	teqcc	r2, r4, lsr r3
   1ea1c:	rsbvs	r6, r2, #536870918	; 0x20000006
   1ea20:	muleq	r3, r8, ip
   1ea24:	andeq	r5, r3, r4, lsr sp
   1ea28:	andeq	r5, r3, ip, lsl #27
   1ea2c:	andeq	r5, r3, ip, ror #27
   1ea30:	andeq	r5, r3, r0, asr #28
   1ea34:	andeq	r5, r3, r4, lsl #29
   1ea38:	mov	r1, r5
   1ea3c:	mov	r2, r6
   1ea40:	mov	r0, r7
   1ea44:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   1ea48:	mov	r5, r0
   1ea4c:	b	1e990 <_start@@Base+0x9600>
   1ea50:	mov	r8, #0
   1ea54:	mov	lr, r8
   1ea58:	b	1e8b4 <_start@@Base+0x9524>
   1ea5c:	mov	r2, #0
   1ea60:	mov	lr, r2
   1ea64:	b	1e89c <_start@@Base+0x950c>
   1ea68:	mov	r2, #0
   1ea6c:	mov	lr, r2
   1ea70:	b	1e8a4 <_start@@Base+0x9514>
   1ea74:	mov	r8, #0
   1ea78:	mov	lr, r8
   1ea7c:	b	1e8ac <_start@@Base+0x951c>
   1ea80:	mov	r2, #0
   1ea84:	mov	r3, #0
   1ea88:	b	1e890 <_start@@Base+0x9500>
   1ea8c:	ldrb	r2, [r5, #1]
   1ea90:	mov	r1, #0
   1ea94:	ldrb	r0, [r5]
   1ea98:	str	r1, [sp, #24]
   1ea9c:	lsl	r2, r2, #16
   1eaa0:	orr	r3, r2, r0, lsl #24
   1eaa4:	str	r3, [sp, #28]
   1eaa8:	ldrd	r2, [sp, #24]
   1eaac:	cmp	r3, fp
   1eab0:	cmpeq	r2, sl
   1eab4:	bls	1e900 <_start@@Base+0x9570>
   1eab8:	sub	r1, pc, #184	; 0xb8
   1eabc:	ldrd	r0, [r1]
   1eac0:	ldrd	r2, [sp, #24]
   1eac4:	cmp	r3, r1
   1eac8:	cmpeq	r2, r0
   1eacc:	beq	1ec18 <_start@@Base+0x9888>
   1ead0:	mov	r1, #0
   1ead4:	mov	r0, #0
   1ead8:	str	r1, [sp, #128]	; 0x80
   1eadc:	movw	r1, #25443	; 0x6363
   1eae0:	movt	r1, #25443	; 0x6363
   1eae4:	str	r3, [sp, #132]	; 0x84
   1eae8:	ldrd	r2, [sp, #128]	; 0x80
   1eaec:	cmp	r3, r1
   1eaf0:	cmpeq	r2, r0
   1eaf4:	bne	1ecb0 <_start@@Base+0x9920>
   1eaf8:	cmp	ip, #4
   1eafc:	ble	1ea38 <_start@@Base+0x96a8>
   1eb00:	mov	r1, r5
   1eb04:	mov	r3, #4
   1eb08:	mov	r2, r6
   1eb0c:	mov	r0, r7
   1eb10:	bl	1924c <_start@@Base+0x3ebc>
   1eb14:	cmp	r0, r5
   1eb18:	mov	r1, r0
   1eb1c:	beq	1ea38 <_start@@Base+0x96a8>
   1eb20:	add	r3, sp, #240	; 0xf0
   1eb24:	mov	r2, r6
   1eb28:	mov	r0, r7
   1eb2c:	bl	2f308 <flatcc_json_parser_build_string@@Base>
   1eb30:	ldr	r3, [sp, #240]	; 0xf0
   1eb34:	mov	r5, r0
   1eb38:	cmp	r3, #0
   1eb3c:	beq	1dd40 <_start@@Base+0x89b0>
   1eb40:	mov	r1, #4
   1eb44:	ldr	r0, [r7]
   1eb48:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   1eb4c:	cmp	r0, #0
   1eb50:	bne	1e988 <_start@@Base+0x95f8>
   1eb54:	b	1dd40 <_start@@Base+0x89b0>
   1eb58:	add	r5, r5, #8
   1eb5c:	mov	r1, r6
   1eb60:	str	r4, [sp, #176]	; 0xb0
   1eb64:	mov	r0, r5
   1eb68:	bl	15480 <_start@@Base+0xf0>
   1eb6c:	and	r3, r1, #-16777216	; 0xff000000
   1eb70:	str	r3, [sp, #180]	; 0xb4
   1eb74:	ldrd	r2, [sp, #176]	; 0xb0
   1eb78:	cmp	r3, #889192448	; 0x35000000
   1eb7c:	cmpeq	r2, #0
   1eb80:	bne	1ea38 <_start@@Base+0x96a8>
   1eb84:	sub	r3, r6, r5
   1eb88:	cmp	r3, #1
   1eb8c:	ble	1ea38 <_start@@Base+0x96a8>
   1eb90:	mov	r3, #1
   1eb94:	mov	r2, r6
   1eb98:	mov	r1, r5
   1eb9c:	mov	r0, r7
   1eba0:	bl	1924c <_start@@Base+0x3ebc>
   1eba4:	cmp	r5, r0
   1eba8:	mov	r8, r0
   1ebac:	beq	1ea38 <_start@@Base+0x96a8>
   1ebb0:	add	r9, sp, #248	; 0xf8
   1ebb4:	mov	r1, r0
   1ebb8:	str	r4, [sp, #248]	; 0xf8
   1ebbc:	mov	r2, r6
   1ebc0:	mov	r3, r9
   1ebc4:	mov	r0, r7
   1ebc8:	bl	181f8 <_start@@Base+0x2e68>
   1ebcc:	cmp	r8, r0
   1ebd0:	mov	r5, r0
   1ebd4:	beq	1f22c <_start@@Base+0x9e9c>
   1ebd8:	ldr	r3, [sp, #248]	; 0xf8
   1ebdc:	cmp	r3, #0
   1ebe0:	bne	1ebf0 <_start@@Base+0x9860>
   1ebe4:	ldr	r3, [r7, #8]
   1ebe8:	tst	r3, #2
   1ebec:	beq	1e990 <_start@@Base+0x9600>
   1ebf0:	mov	r3, #4
   1ebf4:	mov	r1, #1
   1ebf8:	mov	r2, r3
   1ebfc:	ldr	r0, [r7]
   1ec00:	bl	293ac <flatcc_builder_table_add@@Base>
   1ec04:	cmp	r0, #0
   1ec08:	beq	1dd40 <_start@@Base+0x89b0>
   1ec0c:	ldr	r3, [sp, #248]	; 0xf8
   1ec10:	str	r3, [r0]
   1ec14:	b	1e990 <_start@@Base+0x9600>
   1ec18:	cmp	ip, #8
   1ec1c:	ble	1edd8 <_start@@Base+0x9a48>
   1ec20:	mov	r3, #8
   1ec24:	mov	r2, r6
   1ec28:	mov	r1, r5
   1ec2c:	mov	r0, r7
   1ec30:	bl	1924c <_start@@Base+0x3ebc>
   1ec34:	cmp	r0, r5
   1ec38:	mov	r4, r0
   1ec3c:	beq	1edd8 <_start@@Base+0x9a48>
   1ec40:	add	r3, sp, #248	; 0xf8
   1ec44:	mov	r8, #0
   1ec48:	mov	r9, #0
   1ec4c:	mov	r1, r0
   1ec50:	mov	r2, r6
   1ec54:	mov	r0, r7
   1ec58:	str	r3, [sp, #208]	; 0xd0
   1ec5c:	strd	r8, [sp, #248]	; 0xf8
   1ec60:	bl	17f20 <_start@@Base+0x2b90>
   1ec64:	cmp	r4, r0
   1ec68:	mov	r5, r0
   1ec6c:	beq	1f1ec <_start@@Base+0x9e5c>
   1ec70:	ldrd	r2, [sp, #248]	; 0xf8
   1ec74:	orrs	r3, r2, r3
   1ec78:	bne	1ec88 <_start@@Base+0x98f8>
   1ec7c:	ldr	r3, [r7, #8]
   1ec80:	tst	r3, #2
   1ec84:	beq	1e990 <_start@@Base+0x9600>
   1ec88:	mov	r3, #8
   1ec8c:	mov	r1, #5
   1ec90:	mov	r2, r3
   1ec94:	ldr	r0, [r7]
   1ec98:	bl	293ac <flatcc_builder_table_add@@Base>
   1ec9c:	cmp	r0, #0
   1eca0:	beq	1dd40 <_start@@Base+0x89b0>
   1eca4:	ldrd	r2, [sp, #248]	; 0xf8
   1eca8:	strd	r2, [r0]
   1ecac:	b	1e990 <_start@@Base+0x9600>
   1ecb0:	sub	r1, pc, #680	; 0x2a8
   1ecb4:	ldrd	r0, [r1]
   1ecb8:	ldrd	r2, [sp, #24]
   1ecbc:	cmp	r3, r1
   1ecc0:	cmpeq	r2, r0
   1ecc4:	bne	1ea38 <_start@@Base+0x96a8>
   1ecc8:	cmp	ip, #8
   1eccc:	ble	1ef18 <_start@@Base+0x9b88>
   1ecd0:	mov	r3, #8
   1ecd4:	mov	r2, r6
   1ecd8:	mov	r1, r5
   1ecdc:	mov	r0, r7
   1ece0:	bl	1924c <_start@@Base+0x3ebc>
   1ece4:	cmp	r0, r5
   1ece8:	mov	r4, r0
   1ecec:	beq	1ef18 <_start@@Base+0x9b88>
   1ecf0:	add	r3, sp, #248	; 0xf8
   1ecf4:	mov	r8, #0
   1ecf8:	mov	r9, #0
   1ecfc:	mov	r1, r0
   1ed00:	mov	r2, r6
   1ed04:	mov	r0, r7
   1ed08:	str	r3, [sp, #208]	; 0xd0
   1ed0c:	strd	r8, [sp, #248]	; 0xf8
   1ed10:	bl	17f20 <_start@@Base+0x2b90>
   1ed14:	cmp	r4, r0
   1ed18:	mov	r5, r0
   1ed1c:	beq	1f284 <_start@@Base+0x9ef4>
   1ed20:	ldrd	r2, [sp, #248]	; 0xf8
   1ed24:	orrs	r3, r2, r3
   1ed28:	bne	1ed38 <_start@@Base+0x99a8>
   1ed2c:	ldr	r3, [r7, #8]
   1ed30:	tst	r3, #2
   1ed34:	beq	1e990 <_start@@Base+0x9600>
   1ed38:	mov	r3, #8
   1ed3c:	mov	r1, #7
   1ed40:	b	1ec90 <_start@@Base+0x9900>
   1ed44:	sub	r1, pc, #820	; 0x334
   1ed48:	ldrd	r0, [r1]
   1ed4c:	ldrd	r2, [sp, #24]
   1ed50:	cmp	r3, r1
   1ed54:	cmpeq	r2, r0
   1ed58:	beq	1ee80 <_start@@Base+0x9af0>
   1ed5c:	ldrd	r0, [sp, #120]	; 0x78
   1ed60:	movw	r3, #25186	; 0x6262
   1ed64:	movt	r3, #25186	; 0x6262
   1ed68:	mov	r2, #0
   1ed6c:	cmp	r1, r3
   1ed70:	cmpeq	r0, r2
   1ed74:	bne	1ea38 <_start@@Base+0x96a8>
   1ed78:	cmp	ip, #4
   1ed7c:	ble	1ea38 <_start@@Base+0x96a8>
   1ed80:	mov	r1, r5
   1ed84:	mov	r3, #4
   1ed88:	mov	r2, r6
   1ed8c:	mov	r0, r7
   1ed90:	bl	1924c <_start@@Base+0x3ebc>
   1ed94:	cmp	r0, r5
   1ed98:	mov	r1, r0
   1ed9c:	beq	1ea38 <_start@@Base+0x96a8>
   1eda0:	add	r3, sp, #240	; 0xf0
   1eda4:	mov	r2, r6
   1eda8:	mov	r0, r7
   1edac:	bl	2f308 <flatcc_json_parser_build_string@@Base>
   1edb0:	ldr	r3, [sp, #240]	; 0xf0
   1edb4:	mov	r5, r0
   1edb8:	cmp	r3, #0
   1edbc:	beq	1dd40 <_start@@Base+0x89b0>
   1edc0:	mov	r1, #2
   1edc4:	ldr	r0, [r7]
   1edc8:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   1edcc:	cmp	r0, #0
   1edd0:	bne	1e988 <_start@@Base+0x95f8>
   1edd4:	b	1dd40 <_start@@Base+0x89b0>
   1edd8:	add	r5, r5, #8
   1eddc:	mov	r1, r6
   1ede0:	mov	r0, r5
   1ede4:	mov	r9, #0
   1ede8:	bl	15480 <_start@@Base+0xf0>
   1edec:	and	r3, r1, #-16777216	; 0xff000000
   1edf0:	str	r9, [sp, #184]	; 0xb8
   1edf4:	str	r3, [sp, #188]	; 0xbc
   1edf8:	ldrd	r2, [sp, #184]	; 0xb8
   1edfc:	cmp	r3, #889192448	; 0x35000000
   1ee00:	cmpeq	r2, #0
   1ee04:	bne	1ea38 <_start@@Base+0x96a8>
   1ee08:	sub	r3, r6, r5
   1ee0c:	cmp	r3, #1
   1ee10:	ble	1ea38 <_start@@Base+0x96a8>
   1ee14:	mov	r3, #1
   1ee18:	mov	r2, r6
   1ee1c:	mov	r1, r5
   1ee20:	mov	r0, r7
   1ee24:	bl	1924c <_start@@Base+0x3ebc>
   1ee28:	cmp	r5, r0
   1ee2c:	mov	r4, r0
   1ee30:	beq	1ea38 <_start@@Base+0x96a8>
   1ee34:	add	r8, sp, #248	; 0xf8
   1ee38:	mov	r1, r0
   1ee3c:	str	r9, [sp, #248]	; 0xf8
   1ee40:	mov	r2, r6
   1ee44:	mov	r3, r8
   1ee48:	mov	r0, r7
   1ee4c:	bl	181f8 <_start@@Base+0x2e68>
   1ee50:	cmp	r4, r0
   1ee54:	mov	r5, r0
   1ee58:	beq	1f338 <_start@@Base+0x9fa8>
   1ee5c:	ldr	r3, [sp, #248]	; 0xf8
   1ee60:	cmp	r3, #0
   1ee64:	bne	1ee74 <_start@@Base+0x9ae4>
   1ee68:	ldr	r3, [r7, #8]
   1ee6c:	tst	r3, #2
   1ee70:	beq	1e990 <_start@@Base+0x9600>
   1ee74:	mov	r3, #4
   1ee78:	mov	r1, #6
   1ee7c:	b	1ebf8 <_start@@Base+0x9868>
   1ee80:	cmp	ip, #8
   1ee84:	ble	1ea38 <_start@@Base+0x96a8>
   1ee88:	mov	r3, #8
   1ee8c:	mov	r2, r6
   1ee90:	mov	r1, r5
   1ee94:	mov	r0, r7
   1ee98:	bl	1924c <_start@@Base+0x3ebc>
   1ee9c:	cmp	r0, r5
   1eea0:	mov	r4, r0
   1eea4:	beq	1ea38 <_start@@Base+0x96a8>
   1eea8:	add	r3, sp, #248	; 0xf8
   1eeac:	mov	r8, #0
   1eeb0:	mov	r9, #0
   1eeb4:	mov	r1, r0
   1eeb8:	mov	r2, r6
   1eebc:	mov	r0, r7
   1eec0:	str	r3, [sp, #208]	; 0xd0
   1eec4:	strd	r8, [sp, #248]	; 0xf8
   1eec8:	bl	17f20 <_start@@Base+0x2b90>
   1eecc:	cmp	r4, r0
   1eed0:	mov	r5, r0
   1eed4:	beq	1f2e4 <_start@@Base+0x9f54>
   1eed8:	ldrd	r2, [sp, #248]	; 0xf8
   1eedc:	orrs	r3, r2, r3
   1eee0:	bne	1eef0 <_start@@Base+0x9b60>
   1eee4:	ldr	r3, [r7, #8]
   1eee8:	tst	r3, #2
   1eeec:	beq	1e990 <_start@@Base+0x9600>
   1eef0:	mov	r3, #8
   1eef4:	mov	r1, #3
   1eef8:	b	1ec90 <_start@@Base+0x9900>
   1eefc:	mov	r1, r5
   1ef00:	mov	r3, #5
   1ef04:	mov	r2, r6
   1ef08:	mov	r0, r7
   1ef0c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1ef10:	mov	r5, r0
   1ef14:	b	1e84c <_start@@Base+0x94bc>
   1ef18:	add	r5, r5, #8
   1ef1c:	mov	r1, r6
   1ef20:	mov	r0, r5
   1ef24:	mov	r9, #0
   1ef28:	bl	15480 <_start@@Base+0xf0>
   1ef2c:	and	r3, r1, #-16777216	; 0xff000000
   1ef30:	str	r9, [sp, #200]	; 0xc8
   1ef34:	str	r3, [sp, #204]	; 0xcc
   1ef38:	ldrd	r2, [sp, #200]	; 0xc8
   1ef3c:	cmp	r3, #889192448	; 0x35000000
   1ef40:	cmpeq	r2, #0
   1ef44:	bne	1ea38 <_start@@Base+0x96a8>
   1ef48:	sub	r3, r6, r5
   1ef4c:	cmp	r3, #1
   1ef50:	ble	1ea38 <_start@@Base+0x96a8>
   1ef54:	mov	r3, #1
   1ef58:	mov	r2, r6
   1ef5c:	mov	r1, r5
   1ef60:	mov	r0, r7
   1ef64:	bl	1924c <_start@@Base+0x3ebc>
   1ef68:	cmp	r5, r0
   1ef6c:	mov	r4, r0
   1ef70:	beq	1ea38 <_start@@Base+0x96a8>
   1ef74:	add	r8, sp, #248	; 0xf8
   1ef78:	mov	r1, r0
   1ef7c:	str	r9, [sp, #248]	; 0xf8
   1ef80:	mov	r2, r6
   1ef84:	mov	r3, r8
   1ef88:	mov	r0, r7
   1ef8c:	bl	181f8 <_start@@Base+0x2e68>
   1ef90:	cmp	r4, r0
   1ef94:	mov	r5, r0
   1ef98:	beq	1f3d4 <_start@@Base+0xa044>
   1ef9c:	ldr	r3, [sp, #248]	; 0xf8
   1efa0:	cmp	r3, #0
   1efa4:	bne	1efb4 <_start@@Base+0x9c24>
   1efa8:	ldr	r3, [r7, #8]
   1efac:	tst	r3, #2
   1efb0:	beq	1e990 <_start@@Base+0x9600>
   1efb4:	mov	r3, #4
   1efb8:	mov	r1, #8
   1efbc:	b	1ebf8 <_start@@Base+0x9868>
   1efc0:	ldrb	r3, [r5, #2]
   1efc4:	cmp	r3, #32
   1efc8:	addhi	r0, r5, #2
   1efcc:	bls	1d848 <_start@@Base+0x84b8>
   1efd0:	cmp	r6, r0
   1efd4:	bne	1d860 <_start@@Base+0x84d0>
   1efd8:	mov	ip, #0
   1efdc:	mov	r3, #10
   1efe0:	mov	r2, r6
   1efe4:	mov	r1, r6
   1efe8:	mov	r0, r7
   1efec:	str	ip, [sp, #228]	; 0xe4
   1eff0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1eff4:	ldr	r3, [sp, #228]	; 0xe4
   1eff8:	b	1d2c8 <_start@@Base+0x7f38>
   1effc:	mov	r5, r6
   1f000:	mov	r6, r1
   1f004:	b	1e4f4 <_start@@Base+0x9164>
   1f008:	ldrb	r3, [r4, #2]
   1f00c:	cmp	r3, #32
   1f010:	addhi	r1, r4, #2
   1f014:	bls	1debc <_start@@Base+0x8b2c>
   1f018:	cmp	r6, r1
   1f01c:	bne	1ded4 <_start@@Base+0x8b44>
   1f020:	mov	ip, #0
   1f024:	mov	r3, #10
   1f028:	mov	r2, r6
   1f02c:	mov	r1, r6
   1f030:	mov	r0, r7
   1f034:	str	ip, [sp, #232]	; 0xe8
   1f038:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1f03c:	ldr	r3, [sp, #232]	; 0xe8
   1f040:	b	1d8e4 <_start@@Base+0x8554>
   1f044:	add	r5, r1, #1
   1f048:	mov	r3, #0
   1f04c:	sub	r2, r6, r5
   1f050:	cmp	r2, #1
   1f054:	str	r3, [sp, #232]	; 0xe8
   1f058:	ble	1f078 <_start@@Base+0x9ce8>
   1f05c:	ldrb	r3, [r1, #1]
   1f060:	cmp	r3, #32
   1f064:	bhi	1e34c <_start@@Base+0x8fbc>
   1f068:	bne	1f078 <_start@@Base+0x9ce8>
   1f06c:	ldrb	r3, [r1, #2]
   1f070:	cmp	r3, #32
   1f074:	bhi	1f408 <_start@@Base+0xa078>
   1f078:	mov	r1, r5
   1f07c:	b	1e330 <_start@@Base+0x8fa0>
   1f080:	mov	r9, r6
   1f084:	b	1de14 <_start@@Base+0x8a84>
   1f088:	ldrb	r3, [r5, #2]
   1f08c:	cmp	r3, #32
   1f090:	bls	1d220 <_start@@Base+0x7e90>
   1f094:	mov	r3, r6
   1f098:	mov	r6, r5
   1f09c:	add	r6, r6, #2
   1f0a0:	mov	r5, r3
   1f0a4:	b	1e4f4 <_start@@Base+0x9164>
   1f0a8:	cmp	r2, #0
   1f0ac:	sbcs	r1, r3, #0
   1f0b0:	strdge	r2, [sp, #240]	; 0xf0
   1f0b4:	bge	1e440 <_start@@Base+0x90b0>
   1f0b8:	mov	r1, r0
   1f0bc:	mov	r3, #7
   1f0c0:	mov	r2, r6
   1f0c4:	mov	r0, r7
   1f0c8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1f0cc:	mov	r5, r0
   1f0d0:	cmp	r4, r5
   1f0d4:	beq	1e408 <_start@@Base+0x9078>
   1f0d8:	ldrd	r2, [sp, #240]	; 0xf0
   1f0dc:	b	1e440 <_start@@Base+0x90b0>
   1f0e0:	add	r5, r0, #1
   1f0e4:	mov	r3, #0
   1f0e8:	sub	r2, r6, r5
   1f0ec:	cmp	r2, #1
   1f0f0:	str	r3, [sp, #228]	; 0xe4
   1f0f4:	ble	1f114 <_start@@Base+0x9d84>
   1f0f8:	ldrb	r3, [r0, #1]
   1f0fc:	cmp	r3, #32
   1f100:	bhi	1d7f0 <_start@@Base+0x8460>
   1f104:	bne	1f114 <_start@@Base+0x9d84>
   1f108:	ldrb	r3, [r0, #2]
   1f10c:	cmp	r3, #32
   1f110:	bhi	1f410 <_start@@Base+0xa080>
   1f114:	mov	r1, r5
   1f118:	b	1d7d4 <_start@@Base+0x8444>
   1f11c:	add	r4, r1, #1
   1f120:	mov	r3, #0
   1f124:	sub	r2, r6, r4
   1f128:	cmp	r2, #1
   1f12c:	str	r3, [sp, #232]	; 0xe8
   1f130:	ble	1f150 <_start@@Base+0x9dc0>
   1f134:	ldrb	r3, [r1, #1]
   1f138:	cmp	r3, #32
   1f13c:	bhi	1f224 <_start@@Base+0x9e94>
   1f140:	bne	1f150 <_start@@Base+0x9dc0>
   1f144:	ldrb	r3, [r1, #2]
   1f148:	cmp	r3, #32
   1f14c:	bhi	1f418 <_start@@Base+0xa088>
   1f150:	mov	r1, r4
   1f154:	b	1dce4 <_start@@Base+0x8954>
   1f158:	ldr	r3, [sp, #240]	; 0xf0
   1f15c:	cmp	r3, #0
   1f160:	bne	1f388 <_start@@Base+0x9ff8>
   1f164:	ldrd	r2, [sp, #248]	; 0xf8
   1f168:	mov	r1, #0
   1f16c:	mvn	r0, #0
   1f170:	cmp	r3, r1
   1f174:	cmpeq	r2, r0
   1f178:	movls	r4, r9
   1f17c:	strls	r2, [sp, #236]	; 0xec
   1f180:	bls	1de4c <_start@@Base+0x8abc>
   1f184:	mov	r1, r9
   1f188:	mov	r3, #7
   1f18c:	mov	r2, r6
   1f190:	mov	r0, r7
   1f194:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1f198:	mov	r4, r0
   1f19c:	cmp	r8, r4
   1f1a0:	bne	1de48 <_start@@Base+0x8ab8>
   1f1a4:	mov	r9, r8
   1f1a8:	b	1de14 <_start@@Base+0x8a84>
   1f1ac:	cmp	r2, #0
   1f1b0:	sbcs	r1, r3, #0
   1f1b4:	strdge	r2, [sp, #240]	; 0xf0
   1f1b8:	bge	1db90 <_start@@Base+0x8800>
   1f1bc:	mov	r1, r0
   1f1c0:	mov	r3, #7
   1f1c4:	mov	r2, r6
   1f1c8:	mov	r0, r7
   1f1cc:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1f1d0:	mov	r4, r0
   1f1d4:	b	1f3bc <_start@@Base+0xa02c>
   1f1d8:	ldrb	r3, [r5, #2]
   1f1dc:	cmp	r3, #32
   1f1e0:	addhi	r4, r5, #2
   1f1e4:	bls	1e56c <_start@@Base+0x91dc>
   1f1e8:	b	1e580 <_start@@Base+0x91f0>
   1f1ec:	ldr	r3, [pc, #-1984]	; 1ea34 <_start@@Base+0x96a4>
   1f1f0:	mov	r1, r0
   1f1f4:	mov	r2, r6
   1f1f8:	ldr	r0, [sp, #208]	; 0xd0
   1f1fc:	add	r3, pc, r3
   1f200:	add	r3, r3, #204	; 0xcc
   1f204:	str	r0, [sp]
   1f208:	mov	r0, r7
   1f20c:	bl	1a82c <_start@@Base+0x549c>
   1f210:	cmp	r6, r0
   1f214:	cmpne	r5, r0
   1f218:	mov	r5, r0
   1f21c:	bne	1ec70 <_start@@Base+0x98e0>
   1f220:	b	1dd40 <_start@@Base+0x89b0>
   1f224:	mov	r5, r4
   1f228:	b	1dd04 <_start@@Base+0x8974>
   1f22c:	ldr	r3, [pc, #-2052]	; 1ea30 <_start@@Base+0x96a0>
   1f230:	mov	r1, r0
   1f234:	mov	r2, r6
   1f238:	mov	r0, r7
   1f23c:	str	r9, [sp]
   1f240:	add	r3, pc, r3
   1f244:	add	r3, r3, #180	; 0xb4
   1f248:	bl	1a620 <_start@@Base+0x5290>
   1f24c:	cmp	r6, r0
   1f250:	cmpne	r5, r0
   1f254:	mov	r5, r0
   1f258:	bne	1ebd8 <_start@@Base+0x9848>
   1f25c:	b	1dd40 <_start@@Base+0x89b0>
   1f260:	mov	r3, #0
   1f264:	add	r1, r4, #1
   1f268:	mov	r2, r6
   1f26c:	mov	r0, r7
   1f270:	str	r3, [sp, #216]	; 0xd8
   1f274:	bl	17470 <_start@@Base+0x20e0>
   1f278:	mov	r4, r0
   1f27c:	ldr	r3, [sp, #216]	; 0xd8
   1f280:	b	1cef8 <_start@@Base+0x7b68>
   1f284:	ldr	r3, [pc, #-2144]	; 1ea2c <_start@@Base+0x969c>
   1f288:	mov	r1, r0
   1f28c:	mov	r2, r6
   1f290:	ldr	r0, [sp, #208]	; 0xd0
   1f294:	add	r3, pc, r3
   1f298:	add	r3, r3, #228	; 0xe4
   1f29c:	str	r0, [sp]
   1f2a0:	mov	r0, r7
   1f2a4:	bl	1a82c <_start@@Base+0x549c>
   1f2a8:	cmp	r6, r0
   1f2ac:	cmpne	r5, r0
   1f2b0:	mov	r5, r0
   1f2b4:	bne	1ed20 <_start@@Base+0x9990>
   1f2b8:	b	1dd40 <_start@@Base+0x89b0>
   1f2bc:	mov	ip, #0
   1f2c0:	mov	r3, #10
   1f2c4:	mov	r2, r6
   1f2c8:	mov	r1, r6
   1f2cc:	mov	r0, r7
   1f2d0:	str	ip, [sp, #216]	; 0xd8
   1f2d4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1f2d8:	mov	r4, r0
   1f2dc:	ldr	r3, [sp, #216]	; 0xd8
   1f2e0:	b	1cef8 <_start@@Base+0x7b68>
   1f2e4:	ldr	r3, [pc, #-2244]	; 1ea28 <_start@@Base+0x9698>
   1f2e8:	mov	r1, r0
   1f2ec:	mov	r2, r6
   1f2f0:	ldr	r0, [sp, #208]	; 0xd0
   1f2f4:	add	r3, pc, r3
   1f2f8:	add	r3, r3, #192	; 0xc0
   1f2fc:	str	r0, [sp]
   1f300:	mov	r0, r7
   1f304:	bl	1a82c <_start@@Base+0x549c>
   1f308:	cmp	r6, r0
   1f30c:	cmpne	r5, r0
   1f310:	mov	r5, r0
   1f314:	bne	1eed8 <_start@@Base+0x9b48>
   1f318:	b	1dd40 <_start@@Base+0x89b0>
   1f31c:	mov	r1, r0
   1f320:	mov	r3, #8
   1f324:	mov	r2, r6
   1f328:	mov	r0, r7
   1f32c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1f330:	mov	r5, r0
   1f334:	b	1e758 <_start@@Base+0x93c8>
   1f338:	ldr	r3, [pc, #-2332]	; 1ea24 <_start@@Base+0x9694>
   1f33c:	mov	r1, r0
   1f340:	mov	r2, r6
   1f344:	mov	r0, r7
   1f348:	str	r8, [sp]
   1f34c:	add	r3, pc, r3
   1f350:	add	r3, r3, #216	; 0xd8
   1f354:	bl	1a620 <_start@@Base+0x5290>
   1f358:	cmp	r6, r0
   1f35c:	cmpne	r5, r0
   1f360:	mov	r5, r0
   1f364:	bne	1ee5c <_start@@Base+0x9acc>
   1f368:	b	1dd40 <_start@@Base+0x89b0>
   1f36c:	mov	r1, r0
   1f370:	mov	r3, #8
   1f374:	mov	r2, r6
   1f378:	mov	r0, r7
   1f37c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1f380:	mov	r5, r0
   1f384:	b	1f0d0 <_start@@Base+0x9d40>
   1f388:	mov	r1, r0
   1f38c:	mov	r3, #8
   1f390:	mov	r2, r6
   1f394:	mov	r0, r7
   1f398:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1f39c:	mov	r4, r0
   1f3a0:	b	1f19c <_start@@Base+0x9e0c>
   1f3a4:	mov	r1, r0
   1f3a8:	mov	r3, #8
   1f3ac:	mov	r2, r6
   1f3b0:	mov	r0, r7
   1f3b4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1f3b8:	mov	r4, r0
   1f3bc:	cmp	r8, r4
   1f3c0:	beq	1db60 <_start@@Base+0x87d0>
   1f3c4:	ldrd	r2, [sp, #240]	; 0xf0
   1f3c8:	b	1db90 <_start@@Base+0x8800>
   1f3cc:	mov	r5, r4
   1f3d0:	b	1dd40 <_start@@Base+0x89b0>
   1f3d4:	ldr	r3, [pc, #-2492]	; 1ea20 <_start@@Base+0x9690>
   1f3d8:	mov	r1, r0
   1f3dc:	mov	r2, r6
   1f3e0:	mov	r0, r7
   1f3e4:	str	r8, [sp]
   1f3e8:	add	r3, pc, r3
   1f3ec:	add	r3, r3, #240	; 0xf0
   1f3f0:	bl	1a620 <_start@@Base+0x5290>
   1f3f4:	cmp	r6, r0
   1f3f8:	cmpne	r5, r0
   1f3fc:	mov	r5, r0
   1f400:	bne	1ef9c <_start@@Base+0x9c0c>
   1f404:	b	1dd40 <_start@@Base+0x89b0>
   1f408:	add	r5, r1, #2
   1f40c:	b	1e34c <_start@@Base+0x8fbc>
   1f410:	add	r5, r0, #2
   1f414:	b	1d7f0 <_start@@Base+0x8460>
   1f418:	add	r5, r1, #2
   1f41c:	b	1dd04 <_start@@Base+0x8974>
   1f420:	mov	r5, r0
   1f424:	b	1e34c <_start@@Base+0x8fbc>
   1f428:	mov	r5, r0
   1f42c:	b	1dd04 <_start@@Base+0x8974>
   1f430:	mov	r5, r0
   1f434:	b	1d7f0 <_start@@Base+0x8460>
   1f438:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1f43c:	mov	r4, r1
   1f440:	mov	r5, r2
   1f444:	strd	r6, [sp, #8]
   1f448:	mov	r6, r0
   1f44c:	strd	r8, [sp, #16]
   1f450:	mov	r9, r3
   1f454:	mov	r3, #0
   1f458:	mov	r1, r3
   1f45c:	str	sl, [sp, #24]
   1f460:	str	lr, [sp, #28]
   1f464:	sub	sp, sp, #8
   1f468:	ldr	r0, [r0]
   1f46c:	str	r3, [r9]
   1f470:	bl	27878 <flatcc_builder_start_table@@Base>
   1f474:	cmp	r0, #0
   1f478:	beq	1f4ac <_start@@Base+0xa11c>
   1f47c:	mov	r2, r5
   1f480:	mov	r1, r4
   1f484:	mov	r0, r6
   1f488:	mov	r3, #33	; 0x21
   1f48c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1f490:	add	sp, sp, #8
   1f494:	ldrd	r4, [sp]
   1f498:	ldrd	r6, [sp, #8]
   1f49c:	ldrd	r8, [sp, #16]
   1f4a0:	ldr	sl, [sp, #24]
   1f4a4:	add	sp, sp, #28
   1f4a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f4ac:	cmp	r4, r5
   1f4b0:	beq	1f4c0 <_start@@Base+0xa130>
   1f4b4:	ldrb	r3, [r4]
   1f4b8:	cmp	r3, #123	; 0x7b
   1f4bc:	beq	1f598 <_start@@Base+0xa208>
   1f4c0:	mov	ip, #0
   1f4c4:	mov	r1, r4
   1f4c8:	mov	r3, #21
   1f4cc:	mov	r2, r5
   1f4d0:	mov	r0, r6
   1f4d4:	str	ip, [sp, #4]
   1f4d8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1f4dc:	mov	r4, r0
   1f4e0:	ldr	r3, [sp, #4]
   1f4e4:	cmp	r3, #0
   1f4e8:	beq	1f554 <_start@@Base+0xa1c4>
   1f4ec:	add	r7, sp, #4
   1f4f0:	mov	r8, #1
   1f4f4:	mov	sl, #0
   1f4f8:	cmp	r5, r4
   1f4fc:	beq	1f520 <_start@@Base+0xa190>
   1f500:	ldrb	r3, [r4]
   1f504:	cmp	r3, #34	; 0x22
   1f508:	addeq	r4, r4, #1
   1f50c:	streq	sl, [r6, #12]
   1f510:	beq	1f520 <_start@@Base+0xa190>
   1f514:	cmp	r3, #46	; 0x2e
   1f518:	strne	r8, [r6, #12]
   1f51c:	beq	1f57c <_start@@Base+0xa1ec>
   1f520:	mov	r1, r4
   1f524:	mov	r2, r5
   1f528:	mov	r0, r6
   1f52c:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   1f530:	mov	r1, r0
   1f534:	mov	r3, r7
   1f538:	mov	r2, r5
   1f53c:	mov	r0, r6
   1f540:	bl	1b17c <_start@@Base+0x5dec>
   1f544:	ldr	r3, [sp, #4]
   1f548:	mov	r4, r0
   1f54c:	cmp	r3, #0
   1f550:	bne	1f4f8 <_start@@Base+0xa168>
   1f554:	ldr	r3, [r6, #24]
   1f558:	cmp	r3, #0
   1f55c:	bne	1f47c <_start@@Base+0xa0ec>
   1f560:	ldr	r0, [r6]
   1f564:	bl	2825c <flatcc_builder_end_table@@Base>
   1f568:	cmp	r0, #0
   1f56c:	str	r0, [r9]
   1f570:	movne	r0, r4
   1f574:	bne	1f490 <_start@@Base+0xa100>
   1f578:	b	1f47c <_start@@Base+0xa0ec>
   1f57c:	mov	r1, r4
   1f580:	mov	r3, #5
   1f584:	mov	r2, r5
   1f588:	mov	r0, r6
   1f58c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1f590:	mov	r4, r0
   1f594:	b	1f520 <_start@@Base+0xa190>
   1f598:	add	r1, r4, #1
   1f59c:	sub	r3, r5, r1
   1f5a0:	cmp	r3, #1
   1f5a4:	ble	1f5bc <_start@@Base+0xa22c>
   1f5a8:	ldrb	r3, [r4, #1]
   1f5ac:	cmp	r3, #32
   1f5b0:	movhi	r4, r1
   1f5b4:	bhi	1f5cc <_start@@Base+0xa23c>
   1f5b8:	beq	1f5ec <_start@@Base+0xa25c>
   1f5bc:	mov	r2, r5
   1f5c0:	mov	r0, r6
   1f5c4:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   1f5c8:	mov	r4, r0
   1f5cc:	cmp	r5, r4
   1f5d0:	beq	1f5e0 <_start@@Base+0xa250>
   1f5d4:	ldrb	r3, [r4]
   1f5d8:	cmp	r3, #125	; 0x7d
   1f5dc:	beq	1f600 <_start@@Base+0xa270>
   1f5e0:	mov	r3, #1
   1f5e4:	str	r3, [sp, #4]
   1f5e8:	b	1f4ec <_start@@Base+0xa15c>
   1f5ec:	ldrb	r3, [r4, #2]
   1f5f0:	cmp	r3, #32
   1f5f4:	addhi	r4, r4, #2
   1f5f8:	bls	1f5bc <_start@@Base+0xa22c>
   1f5fc:	b	1f5cc <_start@@Base+0xa23c>
   1f600:	mov	r3, #0
   1f604:	add	r1, r4, #1
   1f608:	mov	r2, r5
   1f60c:	mov	r0, r6
   1f610:	str	r3, [sp, #4]
   1f614:	bl	17470 <_start@@Base+0x20e0>
   1f618:	mov	r4, r0
   1f61c:	b	1f4e0 <_start@@Base+0xa150>
   1f620:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f624:	mov	ip, r3
   1f628:	strd	r6, [sp, #8]
   1f62c:	strd	r8, [sp, #16]
   1f630:	mov	r9, r2
   1f634:	strd	sl, [sp, #24]
   1f638:	mov	fp, r0
   1f63c:	mov	sl, r1
   1f640:	str	lr, [sp, #32]
   1f644:	mov	r1, #36	; 0x24
   1f648:	vpush	{d8-d9}
   1f64c:	sub	sp, sp, #372	; 0x174
   1f650:	ldr	r0, [r0]
   1f654:	str	r3, [sp, #240]	; 0xf0
   1f658:	mov	r3, #0
   1f65c:	str	r3, [ip]
   1f660:	bl	27878 <flatcc_builder_start_table@@Base>
   1f664:	cmp	r0, #0
   1f668:	beq	1f6a8 <_start@@Base+0xa318>
   1f66c:	mov	r2, r9
   1f670:	mov	r1, sl
   1f674:	mov	r0, fp
   1f678:	mov	r3, #33	; 0x21
   1f67c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   1f680:	mov	r4, r0
   1f684:	mov	r0, r4
   1f688:	add	sp, sp, #372	; 0x174
   1f68c:	vpop	{d8-d9}
   1f690:	ldrd	r4, [sp]
   1f694:	ldrd	r6, [sp, #8]
   1f698:	ldrd	r8, [sp, #16]
   1f69c:	ldrd	sl, [sp, #24]
   1f6a0:	add	sp, sp, #32
   1f6a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f6a8:	add	r0, sp, #344	; 0x158
   1f6ac:	mov	r3, #1
   1f6b0:	mov	r2, r9
   1f6b4:	mov	r1, sl
   1f6b8:	str	r0, [sp]
   1f6bc:	mov	r0, fp
   1f6c0:	bl	2f4d4 <flatcc_json_parser_prepare_unions@@Base>
   1f6c4:	cmp	r9, r0
   1f6c8:	beq	1f66c <_start@@Base+0xa2dc>
   1f6cc:	add	r8, sp, #336	; 0x150
   1f6d0:	mov	r1, sl
   1f6d4:	mov	r3, r8
   1f6d8:	mov	r2, r9
   1f6dc:	mov	r0, fp
   1f6e0:	bl	19178 <_start@@Base+0x3de8>
   1f6e4:	ldr	r3, [sp, #336]	; 0x150
   1f6e8:	mov	sl, r0
   1f6ec:	cmp	r3, #0
   1f6f0:	beq	1ff78 <_start@@Base+0xabe8>
   1f6f4:	str	r8, [sp, #28]
   1f6f8:	mov	r8, r9
   1f6fc:	mov	r9, fp
   1f700:	cmp	sl, r8
   1f704:	beq	1f730 <_start@@Base+0xa3a0>
   1f708:	ldrb	r3, [sl]
   1f70c:	cmp	r3, #34	; 0x22
   1f710:	moveq	r3, #0
   1f714:	addeq	sl, sl, #1
   1f718:	streq	r3, [r9, #12]
   1f71c:	beq	1f730 <_start@@Base+0xa3a0>
   1f720:	cmp	r3, #46	; 0x2e
   1f724:	movne	r3, #1
   1f728:	strne	r3, [r9, #12]
   1f72c:	beq	20638 <_start@@Base+0xb2a8>
   1f730:	mov	r1, r8
   1f734:	mov	r0, sl
   1f738:	bl	15480 <_start@@Base+0xf0>
   1f73c:	add	r3, pc, #828	; 0x33c
   1f740:	ldrd	r2, [r3]
   1f744:	mov	r4, r0
   1f748:	mov	r5, r1
   1f74c:	strd	r4, [sp, #16]
   1f750:	cmp	r1, r3
   1f754:	cmpeq	r0, r2
   1f758:	bhi	1f8b4 <_start@@Base+0xa524>
   1f75c:	add	r3, pc, #804	; 0x324
   1f760:	ldrd	r2, [r3]
   1f764:	cmp	r1, r3
   1f768:	cmpeq	r0, r2
   1f76c:	bhi	1f9c0 <_start@@Base+0xa630>
   1f770:	add	r3, pc, #792	; 0x318
   1f774:	ldrd	r2, [r3]
   1f778:	cmp	r1, r3
   1f77c:	cmpeq	r0, r2
   1f780:	bhi	1fd28 <_start@@Base+0xa998>
   1f784:	and	r1, r0, #-16777216	; 0xff000000
   1f788:	add	r3, pc, #776	; 0x308
   1f78c:	ldrd	r2, [r3]
   1f790:	str	r1, [sp, #48]	; 0x30
   1f794:	str	r5, [sp, #52]	; 0x34
   1f798:	ldrd	r0, [sp, #48]	; 0x30
   1f79c:	cmp	r1, r3
   1f7a0:	cmpeq	r0, r2
   1f7a4:	beq	209c4 <_start@@Base+0xb634>
   1f7a8:	add	r3, pc, #752	; 0x2f0
   1f7ac:	ldrd	r2, [r3]
   1f7b0:	ldrd	r0, [sp, #48]	; 0x30
   1f7b4:	cmp	r1, r3
   1f7b8:	cmpeq	r0, r2
   1f7bc:	bne	21a74 <_start@@Base+0xc6e4>
   1f7c0:	sub	r3, r8, sl
   1f7c4:	cmp	r3, #5
   1f7c8:	ble	215f8 <_start@@Base+0xc268>
   1f7cc:	mov	r3, #5
   1f7d0:	mov	r2, r8
   1f7d4:	mov	r1, sl
   1f7d8:	mov	r0, r9
   1f7dc:	bl	1924c <_start@@Base+0x3ebc>
   1f7e0:	cmp	r0, sl
   1f7e4:	mov	r4, r0
   1f7e8:	beq	215f8 <_start@@Base+0xc268>
   1f7ec:	mov	r3, #0
   1f7f0:	mov	r0, #0
   1f7f4:	mov	r1, #0
   1f7f8:	cmp	r8, r4
   1f7fc:	strb	r3, [sp, #352]	; 0x160
   1f800:	str	r3, [sp, #356]	; 0x164
   1f804:	add	r3, sp, #360	; 0x168
   1f808:	strd	r0, [r3]
   1f80c:	beq	22c34 <_start@@Base+0xd8a4>
   1f810:	add	r0, sp, #360	; 0x168
   1f814:	add	r3, sp, #356	; 0x164
   1f818:	mov	r2, r8
   1f81c:	mov	r1, r4
   1f820:	str	r0, [sp]
   1f824:	mov	r0, r9
   1f828:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   1f82c:	cmp	r4, r0
   1f830:	mov	sl, r0
   1f834:	bne	22c74 <_start@@Base+0xd8e4>
   1f838:	ldr	r3, [pc, #680]	; 1fae8 <_start@@Base+0xa758>
   1f83c:	add	ip, sp, #352	; 0x160
   1f840:	mov	r2, r8
   1f844:	mov	r1, sl
   1f848:	mov	r0, r9
   1f84c:	str	ip, [sp]
   1f850:	add	r3, pc, r3
   1f854:	add	r3, r3, #276	; 0x114
   1f858:	bl	1a3f4 <_start@@Base+0x5064>
   1f85c:	cmp	r8, r0
   1f860:	cmpne	r0, sl
   1f864:	beq	20bf8 <_start@@Base+0xb868>
   1f868:	add	r3, sp, #352	; 0x160
   1f86c:	mov	sl, r0
   1f870:	ldrsb	r2, [r3]
   1f874:	cmp	r2, #8
   1f878:	bne	1f888 <_start@@Base+0xa4f8>
   1f87c:	ldr	r3, [r9, #8]
   1f880:	tst	r3, #2
   1f884:	beq	1ff4c <_start@@Base+0xabbc>
   1f888:	mov	r3, #1
   1f88c:	mov	r1, #6
   1f890:	ldr	r0, [r9]
   1f894:	mov	r2, r3
   1f898:	bl	293ac <flatcc_builder_table_add@@Base>
   1f89c:	cmp	r0, #0
   1f8a0:	beq	2091c <_start@@Base+0xb58c>
   1f8a4:	add	r3, sp, #352	; 0x160
   1f8a8:	ldrsb	r3, [r3]
   1f8ac:	strb	r3, [r0]
   1f8b0:	b	1ff4c <_start@@Base+0xabbc>
   1f8b4:	add	r3, pc, #492	; 0x1ec
   1f8b8:	ldrd	r2, [r3]
   1f8bc:	ldrd	r0, [sp, #16]
   1f8c0:	cmp	r1, r3
   1f8c4:	cmpeq	r0, r2
   1f8c8:	bhi	1faf0 <_start@@Base+0xa760>
   1f8cc:	add	r3, pc, #476	; 0x1dc
   1f8d0:	ldrd	r2, [r3]
   1f8d4:	cmp	r1, r3
   1f8d8:	cmpeq	r0, r2
   1f8dc:	beq	1ffd0 <_start@@Base+0xac40>
   1f8e0:	add	r3, pc, #464	; 0x1d0
   1f8e4:	ldrd	r2, [r3]
   1f8e8:	ldrd	r0, [sp, #16]
   1f8ec:	cmp	r1, r3
   1f8f0:	cmpeq	r0, r2
   1f8f4:	bhi	2018c <_start@@Base+0xadfc>
   1f8f8:	add	r3, pc, #448	; 0x1c0
   1f8fc:	ldrd	r2, [r3]
   1f900:	cmp	r1, r3
   1f904:	cmpeq	r0, r2
   1f908:	beq	21c00 <_start@@Base+0xc870>
   1f90c:	add	r3, pc, #436	; 0x1b4
   1f910:	ldrd	r2, [r3]
   1f914:	ldrd	r0, [sp, #16]
   1f918:	cmp	r1, r3
   1f91c:	cmpeq	r0, r2
   1f920:	bne	20de8 <_start@@Base+0xba58>
   1f924:	sub	r3, r8, sl
   1f928:	cmp	r3, #8
   1f92c:	ble	22c04 <_start@@Base+0xd874>
   1f930:	mov	r3, #8
   1f934:	mov	r2, r8
   1f938:	mov	r1, sl
   1f93c:	mov	r0, r9
   1f940:	bl	1924c <_start@@Base+0x3ebc>
   1f944:	cmp	r0, sl
   1f948:	mov	r4, r0
   1f94c:	beq	22c04 <_start@@Base+0xd874>
   1f950:	mov	r2, #0
   1f954:	sub	r3, r8, r0
   1f958:	cmp	r3, #3
   1f95c:	strb	r2, [sp, #352]	; 0x160
   1f960:	ble	216ac <_start@@Base+0xc31c>
   1f964:	ldrb	r2, [r0]
   1f968:	cmp	r2, #116	; 0x74
   1f96c:	beq	23144 <_start@@Base+0xddb4>
   1f970:	cmp	r3, #4
   1f974:	beq	216ac <_start@@Base+0xc31c>
   1f978:	ldr	r1, [pc, #364]	; 1faec <_start@@Base+0xa75c>
   1f97c:	mov	r2, #5
   1f980:	mov	r0, r4
   1f984:	add	r1, pc, r1
   1f988:	bl	14528 <memcmp@plt>
   1f98c:	cmp	r0, #0
   1f990:	addeq	sl, r4, #5
   1f994:	bne	216ac <_start@@Base+0xc31c>
   1f998:	mov	r3, #1
   1f99c:	mov	r1, #15
   1f9a0:	ldr	r0, [r9]
   1f9a4:	mov	r2, r3
   1f9a8:	bl	293ac <flatcc_builder_table_add@@Base>
   1f9ac:	cmp	r0, #0
   1f9b0:	beq	2091c <_start@@Base+0xb58c>
   1f9b4:	ldrb	r3, [sp, #352]	; 0x160
   1f9b8:	strb	r3, [r0]
   1f9bc:	b	1ff4c <_start@@Base+0xabbc>
   1f9c0:	add	r3, pc, #264	; 0x108
   1f9c4:	ldrd	r2, [r3]
   1f9c8:	ldrd	r4, [sp, #16]
   1f9cc:	cmp	r5, r3
   1f9d0:	cmpeq	r4, r2
   1f9d4:	bhi	1fecc <_start@@Base+0xab3c>
   1f9d8:	add	r3, pc, #248	; 0xf8
   1f9dc:	ldrd	r2, [r3]
   1f9e0:	cmp	r5, r3
   1f9e4:	cmpeq	r4, r2
   1f9e8:	bhi	20508 <_start@@Base+0xb178>
   1f9ec:	mov	r1, #0
   1f9f0:	add	r3, pc, #232	; 0xe8
   1f9f4:	ldrd	r2, [r3]
   1f9f8:	str	r1, [sp, #128]	; 0x80
   1f9fc:	str	r5, [sp, #132]	; 0x84
   1fa00:	ldrd	r0, [sp, #128]	; 0x80
   1fa04:	cmp	r1, r3
   1fa08:	cmpeq	r0, r2
   1fa0c:	bne	20db8 <_start@@Base+0xba28>
   1fa10:	sub	r3, r8, sl
   1fa14:	cmp	r3, #4
   1fa18:	ble	22238 <_start@@Base+0xcea8>
   1fa1c:	mov	r1, sl
   1fa20:	mov	r3, #4
   1fa24:	mov	r2, r8
   1fa28:	mov	r0, r9
   1fa2c:	bl	1924c <_start@@Base+0x3ebc>
   1fa30:	cmp	r0, sl
   1fa34:	mov	r1, r0
   1fa38:	beq	22238 <_start@@Base+0xcea8>
   1fa3c:	add	r3, sp, #340	; 0x154
   1fa40:	mov	r2, r8
   1fa44:	mov	r0, r9
   1fa48:	bl	2f308 <flatcc_json_parser_build_string@@Base>
   1fa4c:	ldr	r3, [sp, #340]	; 0x154
   1fa50:	mov	sl, r0
   1fa54:	cmp	r3, #0
   1fa58:	beq	2091c <_start@@Base+0xb58c>
   1fa5c:	mov	r1, #3
   1fa60:	ldr	r0, [r9]
   1fa64:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   1fa68:	cmp	r0, #0
   1fa6c:	beq	2091c <_start@@Base+0xb58c>
   1fa70:	ldr	r3, [sp, #340]	; 0x154
   1fa74:	str	r3, [r0]
   1fa78:	b	1ff4c <_start@@Base+0xabbc>
   1fa7c:	nop	{0}
   1fa80:	cmnvs	r2, r0, ror #4
   1fa84:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fa88:			; <UNDEFINED> instruction: 0xffffffff
   1fa8c:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   1fa90:			; <UNDEFINED> instruction: 0xffffffff
   1fa94:			; <UNDEFINED> instruction: 0x666c6577
   1fa98:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   1fa9c:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   1faa0:	andvc	r0, r0, #0
   1faa4:	cmnvs	pc, #28416	; 0x6f00
   1faa8:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1faac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fab0:	cmnvs	r2, r1, ror #4
   1fab4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fab8:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1fabc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fac0:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1fac4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fac8:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1facc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fad0:			; <UNDEFINED> instruction: 0xffffffff
   1fad4:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   1fad8:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   1fadc:	rsbvc	r7, r1, r5, ror #4
   1fae0:	andeq	r0, r0, r0
   1fae4:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   1fae8:	andeq	r5, r3, r0, lsr r8
   1faec:	andeq	pc, r1, r4, ror #9
   1faf0:	add	r3, pc, #912	; 0x390
   1faf4:	ldrd	r2, [r3]
   1faf8:	ldrd	r4, [sp, #16]
   1fafc:	cmp	r5, r3
   1fb00:	cmpeq	r4, r2
   1fb04:	bhi	1fbd4 <_start@@Base+0xa844>
   1fb08:	lsr	r3, r4, #16
   1fb0c:	str	r3, [sp, #32]
   1fb10:	ldr	r1, [sp, #32]
   1fb14:	str	r5, [sp, #36]	; 0x24
   1fb18:	add	r3, pc, #880	; 0x370
   1fb1c:	ldrd	r2, [r3]
   1fb20:	lsl	r1, r1, #16
   1fb24:	str	r1, [sp, #32]
   1fb28:	ldrd	r0, [sp, #32]
   1fb2c:	cmp	r1, r3
   1fb30:	cmpeq	r0, r2
   1fb34:	bne	2077c <_start@@Base+0xb3ec>
   1fb38:	sub	r3, r8, sl
   1fb3c:	cmp	r3, #6
   1fb40:	ble	21f8c <_start@@Base+0xcbfc>
   1fb44:	mov	r3, #6
   1fb48:	mov	r2, r8
   1fb4c:	mov	r1, sl
   1fb50:	mov	r0, r9
   1fb54:	bl	1924c <_start@@Base+0x3ebc>
   1fb58:	cmp	r0, sl
   1fb5c:	mov	r4, r0
   1fb60:	beq	21f8c <_start@@Base+0xcbfc>
   1fb64:	mov	ip, #0
   1fb68:	add	r5, sp, #360	; 0x168
   1fb6c:	mov	r1, r0
   1fb70:	mov	r2, r8
   1fb74:	mov	r3, r5
   1fb78:	mov	r0, r9
   1fb7c:	str	ip, [sp, #360]	; 0x168
   1fb80:	bl	2e020 <flatcc_json_parser_float@@Base>
   1fb84:	cmp	r0, r4
   1fb88:	mov	sl, r0
   1fb8c:	beq	2251c <_start@@Base+0xd18c>
   1fb90:	vldr	s15, [sp, #360]	; 0x168
   1fb94:	vcmp.f32	s15, #0.0
   1fb98:	vmrs	APSR_nzcv, fpscr
   1fb9c:	bne	1fbac <_start@@Base+0xa81c>
   1fba0:	ldr	r3, [r9, #8]
   1fba4:	tst	r3, #2
   1fba8:	beq	1ff4c <_start@@Base+0xabbc>
   1fbac:	mov	r3, #4
   1fbb0:	mov	r1, #27
   1fbb4:	ldr	r0, [r9]
   1fbb8:	mov	r2, r3
   1fbbc:	bl	293ac <flatcc_builder_table_add@@Base>
   1fbc0:	cmp	r0, #0
   1fbc4:	beq	2091c <_start@@Base+0xb58c>
   1fbc8:	ldr	r3, [sp, #360]	; 0x168
   1fbcc:	str	r3, [r0]
   1fbd0:	b	1ff4c <_start@@Base+0xabbc>
   1fbd4:	add	r3, pc, #700	; 0x2bc
   1fbd8:	ldrd	r2, [r3]
   1fbdc:	ldrd	r0, [sp, #16]
   1fbe0:	cmp	r1, r3
   1fbe4:	cmpeq	r0, r2
   1fbe8:	beq	20794 <_start@@Base+0xb404>
   1fbec:	add	r3, pc, #684	; 0x2ac
   1fbf0:	ldrd	r2, [r3]
   1fbf4:	ldrd	r0, [sp, #16]
   1fbf8:	cmp	r1, r3
   1fbfc:	cmpeq	r0, r2
   1fc00:	bhi	20a74 <_start@@Base+0xb6e4>
   1fc04:	add	r3, pc, #668	; 0x29c
   1fc08:	ldrd	r2, [r3]
   1fc0c:	cmp	r1, r3
   1fc10:	cmpeq	r0, r2
   1fc14:	bne	2144c <_start@@Base+0xc0bc>
   1fc18:	add	r4, sl, #8
   1fc1c:	mov	r1, r8
   1fc20:	mov	r0, r4
   1fc24:	bl	15480 <_start@@Base+0xf0>
   1fc28:	add	r3, pc, #640	; 0x280
   1fc2c:	ldrd	r2, [r3]
   1fc30:	cmp	r1, r3
   1fc34:	cmpeq	r0, r2
   1fc38:	bne	224bc <_start@@Base+0xd12c>
   1fc3c:	mov	r3, #0
   1fc40:	add	r4, sl, #16
   1fc44:	mov	r1, r8
   1fc48:	mov	r0, r4
   1fc4c:	str	r3, [sp, #264]	; 0x108
   1fc50:	bl	15480 <_start@@Base+0xf0>
   1fc54:	str	r1, [sp, #268]	; 0x10c
   1fc58:	add	r1, sp, #264	; 0x108
   1fc5c:	add	r3, pc, #596	; 0x254
   1fc60:	ldrd	r2, [r3]
   1fc64:	ldrd	r0, [r1]
   1fc68:	cmp	r1, r3
   1fc6c:	cmpeq	r0, r2
   1fc70:	bne	22598 <_start@@Base+0xd208>
   1fc74:	sub	r3, r8, r4
   1fc78:	cmp	r3, #4
   1fc7c:	ble	23828 <_start@@Base+0xe498>
   1fc80:	mov	r3, #4
   1fc84:	mov	r2, r8
   1fc88:	mov	r1, r4
   1fc8c:	mov	r0, r9
   1fc90:	bl	1924c <_start@@Base+0x3ebc>
   1fc94:	cmp	r4, r0
   1fc98:	mov	sl, r0
   1fc9c:	beq	23824 <_start@@Base+0xe494>
   1fca0:	cmp	r8, r0
   1fca4:	ldr	r0, [r9]
   1fca8:	beq	1fcb8 <_start@@Base+0xa928>
   1fcac:	ldrb	r3, [sl]
   1fcb0:	cmp	r3, #91	; 0x5b
   1fcb4:	beq	23a24 <_start@@Base+0xe694>
   1fcb8:	mov	r3, #0
   1fcbc:	mov	r2, r3
   1fcc0:	mov	r1, r3
   1fcc4:	bl	268a0 <flatcc_builder_start_buffer@@Base>
   1fcc8:	cmp	r0, #0
   1fccc:	bne	2091c <_start@@Base+0xb58c>
   1fcd0:	mov	r1, sl
   1fcd4:	add	r3, sp, #340	; 0x154
   1fcd8:	mov	r2, r8
   1fcdc:	mov	r0, r9
   1fce0:	bl	1f620 <_start@@Base+0xa290>
   1fce4:	ldr	r1, [sp, #340]	; 0x154
   1fce8:	mov	sl, r0
   1fcec:	cmp	r1, #0
   1fcf0:	beq	2091c <_start@@Base+0xb58c>
   1fcf4:	ldr	r0, [r9]
   1fcf8:	bl	2697c <flatcc_builder_end_buffer@@Base>
   1fcfc:	str	r0, [sp, #340]	; 0x154
   1fd00:	cmp	r0, #0
   1fd04:	beq	2091c <_start@@Base+0xb58c>
   1fd08:	mov	r1, #13
   1fd0c:	ldr	r0, [r9]
   1fd10:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   1fd14:	cmp	r0, #0
   1fd18:	beq	2091c <_start@@Base+0xb58c>
   1fd1c:	ldr	r3, [sp, #340]	; 0x154
   1fd20:	str	r3, [r0]
   1fd24:	b	1ff4c <_start@@Base+0xabbc>
   1fd28:	ldrd	r4, [sp, #16]
   1fd2c:	movw	r3, #65535	; 0xffff
   1fd30:	movt	r3, #26735	; 0x686f
   1fd34:	mvn	r2, #0
   1fd38:	cmp	r5, r3
   1fd3c:	cmpeq	r4, r2
   1fd40:	bhi	20690 <_start@@Base+0xb300>
   1fd44:	mov	r1, #0
   1fd48:	add	r3, pc, #368	; 0x170
   1fd4c:	ldrd	r2, [r3]
   1fd50:	str	r1, [sp, #120]	; 0x78
   1fd54:	str	r5, [sp, #124]	; 0x7c
   1fd58:	ldrd	r0, [sp, #120]	; 0x78
   1fd5c:	cmp	r1, r3
   1fd60:	cmpeq	r0, r2
   1fd64:	bne	20dd0 <_start@@Base+0xba40>
   1fd68:	sub	r3, r8, sl
   1fd6c:	cmp	r3, #4
   1fd70:	ble	22118 <_start@@Base+0xcd88>
   1fd74:	mov	r3, #4
   1fd78:	mov	r2, r8
   1fd7c:	mov	r1, sl
   1fd80:	mov	r0, r9
   1fd84:	bl	1924c <_start@@Base+0x3ebc>
   1fd88:	cmp	r0, sl
   1fd8c:	mov	r4, r0
   1fd90:	beq	22118 <_start@@Base+0xcd88>
   1fd94:	mov	r2, #1
   1fd98:	mvn	r3, #0
   1fd9c:	ldr	r0, [r9]
   1fda0:	mov	r1, r2
   1fda4:	bl	275c8 <flatcc_builder_start_vector@@Base>
   1fda8:	subs	r5, r0, #0
   1fdac:	bne	23840 <_start@@Base+0xe4b0>
   1fdb0:	mov	r1, r4
   1fdb4:	ldr	r4, [sp, #28]
   1fdb8:	mov	r2, r8
   1fdbc:	mov	r0, r9
   1fdc0:	mov	r3, r4
   1fdc4:	bl	1934c <_start@@Base+0x3fbc>
   1fdc8:	ldr	r3, [sp, #336]	; 0x150
   1fdcc:	mov	sl, r0
   1fdd0:	cmp	r3, #0
   1fdd4:	beq	22eec <_start@@Base+0xdb5c>
   1fdd8:	ldr	r3, [pc, #232]	; 1fec8 <_start@@Base+0xab38>
   1fddc:	mov	fp, r5
   1fde0:	strd	r6, [sp, #64]	; 0x40
   1fde4:	mov	r7, r4
   1fde8:	add	r3, pc, r3
   1fdec:	add	r3, r3, #292	; 0x124
   1fdf0:	str	r3, [sp, #16]
   1fdf4:	b	1fe24 <_start@@Base+0xaa94>
   1fdf8:	ldrb	ip, [sp, #360]	; 0x168
   1fdfc:	mov	r1, r0
   1fe00:	mov	r3, r7
   1fe04:	mov	r2, r8
   1fe08:	mov	r0, r9
   1fe0c:	strb	ip, [r5]
   1fe10:	bl	1c2f8 <_start@@Base+0x6f68>
   1fe14:	ldr	r3, [sp, #336]	; 0x150
   1fe18:	mov	sl, r0
   1fe1c:	cmp	r3, #0
   1fe20:	beq	22ee8 <_start@@Base+0xdb58>
   1fe24:	mov	r1, #1
   1fe28:	ldr	r0, [r9]
   1fe2c:	add	r4, sp, #360	; 0x168
   1fe30:	strb	fp, [sp, #360]	; 0x168
   1fe34:	bl	26c80 <flatcc_builder_extend_vector@@Base>
   1fe38:	subs	r5, r0, #0
   1fe3c:	mov	r1, sl
   1fe40:	mov	r3, r4
   1fe44:	mov	r2, r8
   1fe48:	mov	r0, r9
   1fe4c:	beq	2091c <_start@@Base+0xb58c>
   1fe50:	bl	182c8 <_start@@Base+0x2f38>
   1fe54:	cmp	r0, sl
   1fe58:	bne	1fdf8 <_start@@Base+0xaa68>
   1fe5c:	mov	r2, r8
   1fe60:	mov	r1, sl
   1fe64:	str	r4, [sp]
   1fe68:	mov	r0, r9
   1fe6c:	ldr	r3, [sp, #16]
   1fe70:	bl	19b88 <_start@@Base+0x47f8>
   1fe74:	cmp	r8, r0
   1fe78:	cmpne	r0, sl
   1fe7c:	bne	1fdf8 <_start@@Base+0xaa68>
   1fe80:	b	20bf8 <_start@@Base+0xb868>
   1fe84:	nop	{0}
   1fe88:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   1fe8c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fe90:	ldrtvs	r0, [r3], -r0
   1fe94:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fe98:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   1fe9c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fea0:	svcvs	0x00725f6e
   1fea4:			; <UNDEFINED> instruction: 0x76656374
   1fea8:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1feac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1feb0:	cmnvs	r4, r5, ror r2
   1feb4:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   1feb8:	andeq	r0, r0, r0
   1febc:			; <UNDEFINED> instruction: 0x66666572
   1fec0:	andeq	r0, r0, r0
   1fec4:			; <UNDEFINED> instruction: 0x666c6578
   1fec8:	muleq	r3, r8, r2
   1fecc:	ldrd	r4, [sp, #16]
   1fed0:	sub	fp, r8, sl
   1fed4:	add	r3, pc, #916	; 0x394
   1fed8:	ldrd	r2, [r3]
   1fedc:	and	r1, r4, #-16777216	; 0xff000000
   1fee0:	str	r1, [sp, #56]	; 0x38
   1fee4:	str	r5, [sp, #60]	; 0x3c
   1fee8:	ldrd	r0, [sp, #56]	; 0x38
   1feec:	cmp	r1, r3
   1fef0:	cmpeq	r0, r2
   1fef4:	beq	20864 <_start@@Base+0xb4d4>
   1fef8:	cmp	fp, #4
   1fefc:	ble	21a8c <_start@@Base+0xc6fc>
   1ff00:	mov	r3, #4
   1ff04:	mov	r2, r8
   1ff08:	mov	r1, sl
   1ff0c:	mov	r0, r9
   1ff10:	bl	1924c <_start@@Base+0x3ebc>
   1ff14:	cmp	r0, sl
   1ff18:	beq	21a8c <_start@@Base+0xc6fc>
   1ff1c:	ldr	ip, [pc, #884]	; 20298 <_start@@Base+0xaf08>
   1ff20:	mov	r4, #8
   1ff24:	mov	r1, r0
   1ff28:	mov	r3, #0
   1ff2c:	mov	r2, r8
   1ff30:	ldr	lr, [sp, #344]	; 0x158
   1ff34:	mov	r0, r9
   1ff38:	add	ip, pc, ip
   1ff3c:	stm	sp, {r4, lr}
   1ff40:	str	ip, [sp, #8]
   1ff44:	bl	2f5e0 <flatcc_json_parser_union@@Base>
   1ff48:	mov	sl, r0
   1ff4c:	mov	r1, sl
   1ff50:	mov	r2, r8
   1ff54:	ldr	r3, [sp, #28]
   1ff58:	mov	r0, r9
   1ff5c:	bl	1b17c <_start@@Base+0x5dec>
   1ff60:	ldr	r3, [sp, #336]	; 0x150
   1ff64:	mov	sl, r0
   1ff68:	cmp	r3, #0
   1ff6c:	bne	1f700 <_start@@Base+0xa370>
   1ff70:	mov	fp, r9
   1ff74:	mov	r9, r8
   1ff78:	ldr	r3, [fp, #24]
   1ff7c:	cmp	r3, #0
   1ff80:	bne	1f66c <_start@@Base+0xa2dc>
   1ff84:	mov	r1, #3
   1ff88:	ldr	r0, [fp]
   1ff8c:	bl	28094 <flatcc_builder_check_required_field@@Base>
   1ff90:	cmp	r0, #0
   1ff94:	mov	r1, sl
   1ff98:	beq	2312c <_start@@Base+0xdd9c>
   1ff9c:	mov	r2, r9
   1ffa0:	mov	r0, fp
   1ffa4:	ldr	r3, [sp, #344]	; 0x158
   1ffa8:	bl	2f568 <flatcc_json_parser_finalize_unions@@Base>
   1ffac:	mov	r4, r0
   1ffb0:	ldr	r0, [fp]
   1ffb4:	bl	2825c <flatcc_builder_end_table@@Base>
   1ffb8:	ldr	r3, [sp, #240]	; 0xf0
   1ffbc:	cmp	r0, #0
   1ffc0:	str	r0, [r3]
   1ffc4:	bne	1f684 <_start@@Base+0xa2f4>
   1ffc8:	mov	sl, r4
   1ffcc:	b	1f66c <_start@@Base+0xa2dc>
   1ffd0:	add	r4, sl, #8
   1ffd4:	mov	r1, r8
   1ffd8:	mov	r0, r4
   1ffdc:	bl	15480 <_start@@Base+0xf0>
   1ffe0:	add	r3, pc, #656	; 0x290
   1ffe4:	ldrd	r2, [r3]
   1ffe8:	cmp	r1, r3
   1ffec:	cmpeq	r0, r2
   1fff0:	bhi	20928 <_start@@Base+0xb598>
   1fff4:	add	r3, pc, #644	; 0x284
   1fff8:	ldrd	r2, [r3]
   1fffc:	cmp	r1, r3
   20000:	cmpeq	r0, r2
   20004:	bne	20e00 <_start@@Base+0xba70>
   20008:	sub	r3, r8, r4
   2000c:	cmp	r3, #8
   20010:	ble	22134 <_start@@Base+0xcda4>
   20014:	mov	r3, #8
   20018:	mov	r2, r8
   2001c:	mov	r1, r4
   20020:	mov	r0, r9
   20024:	bl	1924c <_start@@Base+0x3ebc>
   20028:	cmp	r4, r0
   2002c:	mov	sl, r0
   20030:	beq	22130 <_start@@Base+0xcda0>
   20034:	mov	r2, #1
   20038:	mvn	r3, #0
   2003c:	ldr	r0, [r9]
   20040:	mov	r1, r2
   20044:	bl	275c8 <flatcc_builder_start_vector@@Base>
   20048:	cmp	r0, #0
   2004c:	bne	2091c <_start@@Base+0xb58c>
   20050:	ldr	r4, [sp, #28]
   20054:	mov	r1, sl
   20058:	mov	r2, r8
   2005c:	mov	r0, r9
   20060:	mov	r3, r4
   20064:	bl	1934c <_start@@Base+0x3fbc>
   20068:	ldr	r3, [sp, #336]	; 0x150
   2006c:	mov	sl, r0
   20070:	cmp	r3, #0
   20074:	beq	22fb0 <_start@@Base+0xdc20>
   20078:	ldr	r3, [pc, #540]	; 2029c <_start@@Base+0xaf0c>
   2007c:	strd	r6, [sp, #16]
   20080:	ldr	r2, [pc, #536]	; 202a0 <_start@@Base+0xaf10>
   20084:	add	r3, pc, r3
   20088:	add	fp, r3, #420	; 0x1a4
   2008c:	add	r2, pc, r2
   20090:	mov	r6, fp
   20094:	mov	r7, r2
   20098:	mov	fp, r4
   2009c:	b	200cc <_start@@Base+0xad3c>
   200a0:	ldrb	ip, [sp, #356]	; 0x164
   200a4:	mov	r3, fp
   200a8:	mov	r1, r4
   200ac:	mov	r2, r8
   200b0:	mov	r0, r9
   200b4:	strb	ip, [r5]
   200b8:	bl	1c2f8 <_start@@Base+0x6f68>
   200bc:	ldr	r3, [sp, #336]	; 0x150
   200c0:	mov	sl, r0
   200c4:	cmp	r3, #0
   200c8:	beq	22fac <_start@@Base+0xdc1c>
   200cc:	mov	r3, #0
   200d0:	mov	r1, #1
   200d4:	ldr	r0, [r9]
   200d8:	strb	r3, [sp, #356]	; 0x164
   200dc:	bl	26c80 <flatcc_builder_extend_vector@@Base>
   200e0:	subs	r5, r0, #0
   200e4:	beq	2091c <_start@@Base+0xb58c>
   200e8:	sub	r3, r8, sl
   200ec:	cmp	r3, #3
   200f0:	ble	20128 <_start@@Base+0xad98>
   200f4:	ldrb	r2, [sl]
   200f8:	cmp	r2, #116	; 0x74
   200fc:	beq	22b4c <_start@@Base+0xd7bc>
   20100:	cmp	r3, #4
   20104:	beq	20128 <_start@@Base+0xad98>
   20108:	mov	r2, #5
   2010c:	mov	r1, r7
   20110:	mov	r0, sl
   20114:	bl	14528 <memcmp@plt>
   20118:	cmp	r0, #0
   2011c:	addeq	r4, sl, #5
   20120:	strbeq	r0, [sp, #356]	; 0x164
   20124:	beq	20150 <_start@@Base+0xadc0>
   20128:	add	r3, sp, #360	; 0x168
   2012c:	mov	r2, r8
   20130:	mov	r1, sl
   20134:	mov	r0, r9
   20138:	bl	182c8 <_start@@Base+0x2f38>
   2013c:	ldrb	r3, [sp, #360]	; 0x168
   20140:	mov	r4, r0
   20144:	adds	r3, r3, #0
   20148:	movne	r3, #1
   2014c:	strb	r3, [sp, #356]	; 0x164
   20150:	cmp	sl, r4
   20154:	bne	200a0 <_start@@Base+0xad10>
   20158:	add	r0, sp, #356	; 0x164
   2015c:	mov	r3, r6
   20160:	mov	r2, r8
   20164:	mov	r1, r4
   20168:	str	r0, [sp]
   2016c:	mov	r0, r9
   20170:	bl	19794 <_start@@Base+0x4404>
   20174:	cmp	r8, r0
   20178:	cmpne	r0, r4
   2017c:	mov	sl, r0
   20180:	beq	2091c <_start@@Base+0xb58c>
   20184:	mov	r4, r0
   20188:	b	200a0 <_start@@Base+0xad10>
   2018c:	add	r3, pc, #244	; 0xf4
   20190:	ldrd	r2, [r3]
   20194:	ldrd	r0, [sp, #16]
   20198:	cmp	r1, r3
   2019c:	cmpeq	r0, r2
   201a0:	bhi	20c08 <_start@@Base+0xb878>
   201a4:	add	r3, pc, #228	; 0xe4
   201a8:	ldrd	r2, [r3]
   201ac:	cmp	r1, r3
   201b0:	cmpeq	r0, r2
   201b4:	bne	2147c <_start@@Base+0xc0ec>
   201b8:	add	r4, sl, #8
   201bc:	mov	r1, r8
   201c0:	mov	r0, r4
   201c4:	mov	r5, #0
   201c8:	bl	15480 <_start@@Base+0xf0>
   201cc:	and	r3, r1, #-16777216	; 0xff000000
   201d0:	str	r5, [sp, #208]	; 0xd0
   201d4:	str	r3, [sp, #212]	; 0xd4
   201d8:	ldrd	r2, [sp, #208]	; 0xd0
   201dc:	cmp	r3, #2030043136	; 0x79000000
   201e0:	cmpeq	r2, #0
   201e4:	bne	224a4 <_start@@Base+0xd114>
   201e8:	sub	r3, r8, r4
   201ec:	cmp	r3, #1
   201f0:	ble	227f4 <_start@@Base+0xd464>
   201f4:	mov	r3, #1
   201f8:	mov	r2, r8
   201fc:	mov	r1, r4
   20200:	mov	r0, r9
   20204:	bl	1924c <_start@@Base+0x3ebc>
   20208:	cmp	r4, r0
   2020c:	mov	sl, r0
   20210:	beq	227f0 <_start@@Base+0xd460>
   20214:	mov	r1, #3
   20218:	ldr	r0, [r9]
   2021c:	str	r5, [sp, #340]	; 0x154
   20220:	bl	27878 <flatcc_builder_start_table@@Base>
   20224:	cmp	r0, r5
   20228:	bne	22ea4 <_start@@Base+0xdb14>
   2022c:	add	r5, sp, #348	; 0x15c
   20230:	mov	r1, sl
   20234:	mov	r3, r5
   20238:	mov	r2, r8
   2023c:	mov	r0, r9
   20240:	bl	19178 <_start@@Base+0x3de8>
   20244:	ldr	r3, [sp, #348]	; 0x15c
   20248:	mov	sl, r0
   2024c:	cmp	r3, #0
   20250:	beq	23380 <_start@@Base+0xdff0>
   20254:	ldr	r3, [pc, #72]	; 202a4 <_start@@Base+0xaf14>
   20258:	strd	r6, [sp, #16]
   2025c:	add	r3, pc, r3
   20260:	add	r3, r3, #480	; 0x1e0
   20264:	str	r3, [sp, #64]	; 0x40
   20268:	b	203f4 <_start@@Base+0xb064>
   2026c:	nop	{0}
   20270:	strcc	r0, [r0], #-0
   20274:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   20278:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   2027c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   20280:	svcvs	0x006f6c73
   20284:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   20288:	ldrbvs	pc, [pc, #4095]!	; 2128f <_start@@Base+0xbeff>	; <UNPREDICTABLE>
   2028c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   20290:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   20294:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   20298:	andeq	r3, r0, r0, asr #26
   2029c:	strdeq	r4, [r3], -ip
   202a0:	ldrdeq	lr, [r1], -ip
   202a4:	andeq	r4, r3, r4, lsr #28
   202a8:	and	r3, r0, #-16777216	; 0xff000000
   202ac:	str	r3, [sp, #136]	; 0x88
   202b0:	str	r1, [sp, #140]	; 0x8c
   202b4:	add	r1, pc, #924	; 0x39c
   202b8:	ldrd	r0, [r1]
   202bc:	ldrd	r2, [sp, #136]	; 0x88
   202c0:	cmp	r3, r1
   202c4:	cmpeq	r2, r0
   202c8:	bne	22920 <_start@@Base+0xd590>
   202cc:	sub	r3, r8, sl
   202d0:	cmp	r3, #5
   202d4:	ble	22920 <_start@@Base+0xd590>
   202d8:	mov	r3, #5
   202dc:	mov	r2, r8
   202e0:	mov	r1, sl
   202e4:	mov	r0, r9
   202e8:	bl	1924c <_start@@Base+0x3ebc>
   202ec:	cmp	r0, sl
   202f0:	mov	r4, r0
   202f4:	beq	22920 <_start@@Base+0xd590>
   202f8:	add	r2, sp, #332	; 0x14c
   202fc:	mov	r3, #0
   20300:	add	r2, r2, #2
   20304:	mov	r0, #0
   20308:	mov	r1, #0
   2030c:	strh	r3, [r2]
   20310:	cmp	r8, r4
   20314:	str	r3, [sp, #356]	; 0x164
   20318:	add	r3, sp, #360	; 0x168
   2031c:	strd	r0, [r3]
   20320:	beq	22e90 <_start@@Base+0xdb00>
   20324:	add	r0, sp, #360	; 0x168
   20328:	add	r3, sp, #356	; 0x164
   2032c:	mov	r2, r8
   20330:	mov	r1, r4
   20334:	str	r0, [sp]
   20338:	mov	r0, r9
   2033c:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   20340:	cmp	r4, r0
   20344:	mov	fp, r0
   20348:	bne	22f20 <_start@@Base+0xdb90>
   2034c:	ldr	r3, [pc, #824]	; 2068c <_start@@Base+0xb2fc>
   20350:	add	ip, sp, #332	; 0x14c
   20354:	mov	r2, r8
   20358:	add	ip, ip, #2
   2035c:	mov	r1, fp
   20360:	mov	r0, r9
   20364:	str	ip, [sp]
   20368:	add	r3, pc, r3
   2036c:	add	r3, r3, #468	; 0x1d4
   20370:	bl	1a1e4 <_start@@Base+0x4e54>
   20374:	cmp	r8, r0
   20378:	cmpne	r0, fp
   2037c:	mov	sl, r0
   20380:	beq	23800 <_start@@Base+0xe470>
   20384:	add	r3, sp, #332	; 0x14c
   20388:	add	r3, r3, #2
   2038c:	ldrh	r2, [r3]
   20390:	cmp	r2, #0
   20394:	bne	203a4 <_start@@Base+0xb014>
   20398:	ldr	r3, [r9, #8]
   2039c:	tst	r3, #2
   203a0:	beq	203d0 <_start@@Base+0xb040>
   203a4:	mov	r3, #2
   203a8:	ldr	r0, [r9]
   203ac:	mov	r2, r3
   203b0:	mov	r1, r3
   203b4:	bl	293ac <flatcc_builder_table_add@@Base>
   203b8:	cmp	r0, #0
   203bc:	beq	23800 <_start@@Base+0xe470>
   203c0:	add	r3, sp, #332	; 0x14c
   203c4:	add	r3, r3, #2
   203c8:	ldrh	r3, [r3]
   203cc:	strh	r3, [r0]
   203d0:	mov	r1, sl
   203d4:	mov	r3, r5
   203d8:	mov	r2, r8
   203dc:	mov	r0, r9
   203e0:	bl	1b17c <_start@@Base+0x5dec>
   203e4:	ldr	r3, [sp, #348]	; 0x15c
   203e8:	mov	sl, r0
   203ec:	cmp	r3, #0
   203f0:	beq	2337c <_start@@Base+0xdfec>
   203f4:	cmp	r8, sl
   203f8:	beq	20424 <_start@@Base+0xb094>
   203fc:	ldrb	r3, [sl]
   20400:	cmp	r3, #34	; 0x22
   20404:	moveq	r3, #0
   20408:	addeq	sl, sl, #1
   2040c:	streq	r3, [r9, #12]
   20410:	beq	20424 <_start@@Base+0xb094>
   20414:	cmp	r3, #46	; 0x2e
   20418:	movne	r3, #1
   2041c:	strne	r3, [r9, #12]
   20420:	beq	22c58 <_start@@Base+0xd8c8>
   20424:	mov	r1, r8
   20428:	mov	r0, sl
   2042c:	bl	15480 <_start@@Base+0xf0>
   20430:	movw	r3, #65535	; 0xffff
   20434:	movt	r3, #26979	; 0x6963
   20438:	mvn	r2, #0
   2043c:	cmp	r1, r3
   20440:	cmpeq	r0, r2
   20444:	bls	202a8 <_start@@Base+0xaf18>
   20448:	bic	r3, r1, #255	; 0xff
   2044c:	mov	r4, #0
   20450:	add	r7, pc, #520	; 0x208
   20454:	ldrd	r6, [r7]
   20458:	str	r4, [sp, #144]	; 0x90
   2045c:	str	r3, [sp, #148]	; 0x94
   20460:	ldrd	r2, [sp, #144]	; 0x90
   20464:	cmp	r3, r7
   20468:	cmpeq	r2, r6
   2046c:	beq	22aa8 <_start@@Base+0xd718>
   20470:	lsr	r3, r1, #16
   20474:	str	r4, [sp, #112]	; 0x70
   20478:	mov	r1, #0
   2047c:	movt	r1, #26980	; 0x6964
   20480:	mov	r0, #0
   20484:	lsl	r3, r3, #16
   20488:	str	r3, [sp, #116]	; 0x74
   2048c:	ldrd	r2, [sp, #112]	; 0x70
   20490:	cmp	r3, r1
   20494:	cmpeq	r2, r0
   20498:	bne	22920 <_start@@Base+0xd590>
   2049c:	sub	r3, r8, sl
   204a0:	cmp	r3, #2
   204a4:	ble	22920 <_start@@Base+0xd590>
   204a8:	mov	r1, sl
   204ac:	mov	r3, #2
   204b0:	mov	r2, r8
   204b4:	mov	r0, r9
   204b8:	bl	1924c <_start@@Base+0x3ebc>
   204bc:	cmp	r0, sl
   204c0:	mov	r1, r0
   204c4:	beq	22920 <_start@@Base+0xd590>
   204c8:	add	r3, sp, #352	; 0x160
   204cc:	mov	r2, r8
   204d0:	mov	r0, r9
   204d4:	bl	2f308 <flatcc_json_parser_build_string@@Base>
   204d8:	ldr	r3, [sp, #352]	; 0x160
   204dc:	mov	sl, r0
   204e0:	cmp	r3, #0
   204e4:	beq	23800 <_start@@Base+0xe470>
   204e8:	mov	r1, r4
   204ec:	ldr	r0, [r9]
   204f0:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   204f4:	cmp	r0, #0
   204f8:	beq	23800 <_start@@Base+0xe470>
   204fc:	ldr	r3, [sp, #352]	; 0x160
   20500:	str	r3, [r0]
   20504:	b	203d0 <_start@@Base+0xb040>
   20508:	add	r3, pc, #344	; 0x158
   2050c:	ldrd	r2, [r3]
   20510:	ldrd	r0, [sp, #16]
   20514:	cmp	r1, r3
   20518:	cmpeq	r0, r2
   2051c:	beq	21fa4 <_start@@Base+0xcc14>
   20520:	ldr	r1, [sp, #20]
   20524:	mov	r4, #0
   20528:	str	r4, [sp, #176]	; 0xb0
   2052c:	add	r3, pc, #316	; 0x13c
   20530:	ldrd	r2, [r3]
   20534:	bic	r1, r1, #255	; 0xff
   20538:	str	r1, [sp, #180]	; 0xb4
   2053c:	ldrd	r0, [sp, #176]	; 0xb0
   20540:	cmp	r1, r3
   20544:	cmpeq	r0, r2
   20548:	bne	21434 <_start@@Base+0xc0a4>
   2054c:	sub	r3, r8, sl
   20550:	cmp	r3, #3
   20554:	ble	22e44 <_start@@Base+0xdab4>
   20558:	mov	r3, #3
   2055c:	mov	r2, r8
   20560:	mov	r1, sl
   20564:	mov	r0, r9
   20568:	bl	1924c <_start@@Base+0x3ebc>
   2056c:	cmp	r0, sl
   20570:	mov	r5, r0
   20574:	beq	22e44 <_start@@Base+0xdab4>
   20578:	mov	r3, #16
   2057c:	mov	r1, r4
   20580:	ldr	r0, [r9]
   20584:	mov	r2, #32
   20588:	bl	293ac <flatcc_builder_table_add@@Base>
   2058c:	subs	r3, r0, #0
   20590:	str	r3, [sp, #16]
   20594:	beq	23b14 <_start@@Base+0xe784>
   20598:	add	r3, sp, #352	; 0x160
   2059c:	mov	r1, r5
   205a0:	vldr	s16, [pc, #224]	; 20688 <_start@@Base+0xb2f8>
   205a4:	mov	r2, r8
   205a8:	mov	r0, r9
   205ac:	vldr	d9, [pc, #196]	; 20678 <_start@@Base+0xb2e8>
   205b0:	bl	19178 <_start@@Base+0x3de8>
   205b4:	ldr	r3, [sp, #352]	; 0x160
   205b8:	mov	fp, r0
   205bc:	cmp	r3, #0
   205c0:	beq	23c78 <_start@@Base+0xe8e8>
   205c4:	add	r5, pc, #180	; 0xb4
   205c8:	ldrd	r4, [r5]
   205cc:	cmp	r8, fp
   205d0:	beq	205fc <_start@@Base+0xb26c>
   205d4:	ldrb	r3, [fp]
   205d8:	cmp	r3, #34	; 0x22
   205dc:	moveq	r3, #0
   205e0:	addeq	fp, fp, #1
   205e4:	streq	r3, [r9, #12]
   205e8:	beq	205fc <_start@@Base+0xb26c>
   205ec:	cmp	r3, #46	; 0x2e
   205f0:	movne	r3, #1
   205f4:	strne	r3, [r9, #12]
   205f8:	beq	21a58 <_start@@Base+0xc6c8>
   205fc:	sub	ip, r8, fp
   20600:	cmp	ip, #8
   20604:	bhi	21170 <_start@@Base+0xbde0>
   20608:	sub	r3, ip, #1
   2060c:	cmp	r3, #7
   20610:	addls	pc, pc, r3, lsl #2
   20614:	b	2174c <_start@@Base+0xc3bc>
   20618:	b	21338 <_start@@Base+0xbfa8>
   2061c:	b	212e0 <_start@@Base+0xbf50>
   20620:	b	212d4 <_start@@Base+0xbf44>
   20624:	b	212f8 <_start@@Base+0xbf68>
   20628:	b	212ec <_start@@Base+0xbf5c>
   2062c:	b	212c8 <_start@@Base+0xbf38>
   20630:	b	212bc <_start@@Base+0xbf2c>
   20634:	b	21170 <_start@@Base+0xbde0>
   20638:	mov	r1, sl
   2063c:	mov	r3, #5
   20640:	mov	r2, r8
   20644:	mov	r0, r9
   20648:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2064c:	mov	sl, r0
   20650:	b	1f730 <_start@@Base+0xa3a0>
   20654:	nop	{0}
   20658:	strvc	r0, [r0], #-0
   2065c:	cmnvs	pc, #461373440	; 0x1b800000
   20660:	andeq	r0, r0, r0
   20664:	strbtvc	r6, [r1], -r0, lsl #24
   20668:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   2066c:	rsbvc	r7, r1, r5, ror #4
   20670:	andeq	r0, r0, r0
   20674:	rsbvc	r7, pc, r0, lsl #6
	...
   20680:	rscscc	pc, pc, #1020	; 0x3fc
   20684:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   20688:	andeq	r0, r0, r0
   2068c:	andeq	r4, r3, r8, lsl sp
   20690:	add	r3, pc, #920	; 0x398
   20694:	ldrd	r2, [r3]
   20698:	ldrd	r0, [sp, #16]
   2069c:	cmp	r1, r3
   206a0:	cmpeq	r0, r2
   206a4:	bhi	20cdc <_start@@Base+0xb94c>
   206a8:	lsr	r3, r1, #16
   206ac:	mov	r4, #0
   206b0:	mov	r2, #0
   206b4:	str	r4, [sp, #152]	; 0x98
   206b8:	str	r3, [sp, #156]	; 0x9c
   206bc:	mov	r3, #0
   206c0:	movt	r3, #26736	; 0x6870
   206c4:	ldr	r1, [sp, #156]	; 0x9c
   206c8:	lsl	r1, r1, #16
   206cc:	str	r1, [sp, #156]	; 0x9c
   206d0:	ldrd	r0, [sp, #152]	; 0x98
   206d4:	cmp	r1, r3
   206d8:	cmpeq	r0, r2
   206dc:	bne	2214c <_start@@Base+0xcdbc>
   206e0:	sub	r3, r8, sl
   206e4:	cmp	r3, #2
   206e8:	ble	22f60 <_start@@Base+0xdbd0>
   206ec:	mov	r3, #2
   206f0:	mov	r2, r8
   206f4:	mov	r1, sl
   206f8:	mov	r0, r9
   206fc:	bl	1924c <_start@@Base+0x3ebc>
   20700:	cmp	r0, sl
   20704:	mov	r5, r0
   20708:	beq	22f60 <_start@@Base+0xdbd0>
   2070c:	add	fp, sp, #360	; 0x168
   20710:	mov	r1, r0
   20714:	mov	r2, r8
   20718:	mov	r3, fp
   2071c:	mov	r0, r9
   20720:	strh	r4, [fp]
   20724:	bl	18474 <_start@@Base+0x30e4>
   20728:	cmp	r0, r5
   2072c:	mov	sl, r0
   20730:	beq	228bc <_start@@Base+0xd52c>
   20734:	add	r3, sp, #360	; 0x168
   20738:	ldrsh	r3, [r3]
   2073c:	cmp	r3, #100	; 0x64
   20740:	bne	20750 <_start@@Base+0xb3c0>
   20744:	ldr	r3, [r9, #8]
   20748:	tst	r3, #2
   2074c:	beq	1ff4c <_start@@Base+0xabbc>
   20750:	mov	r3, #2
   20754:	ldr	r0, [r9]
   20758:	mov	r2, r3
   2075c:	mov	r1, r3
   20760:	bl	293ac <flatcc_builder_table_add@@Base>
   20764:	cmp	r0, #0
   20768:	beq	2091c <_start@@Base+0xb58c>
   2076c:	add	r3, sp, #360	; 0x168
   20770:	ldrsh	r3, [r3]
   20774:	strh	r3, [r0]
   20778:	b	1ff4c <_start@@Base+0xabbc>
   2077c:	mov	r1, sl
   20780:	mov	r2, r8
   20784:	mov	r0, r9
   20788:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   2078c:	mov	sl, r0
   20790:	b	1ff4c <_start@@Base+0xabbc>
   20794:	add	sl, sl, #8
   20798:	mov	r1, r8
   2079c:	mov	r0, sl
   207a0:	bl	15480 <_start@@Base+0xf0>
   207a4:	add	r3, pc, #652	; 0x28c
   207a8:	ldrd	r2, [r3]
   207ac:	cmp	r1, r3
   207b0:	cmpeq	r0, r2
   207b4:	bhi	210a4 <_start@@Base+0xbd14>
   207b8:	add	r3, pc, #640	; 0x280
   207bc:	ldrd	r2, [r3]
   207c0:	cmp	r1, r3
   207c4:	cmpeq	r0, r2
   207c8:	bne	2248c <_start@@Base+0xd0fc>
   207cc:	sub	r3, r8, sl
   207d0:	cmp	r3, #8
   207d4:	ble	22728 <_start@@Base+0xd398>
   207d8:	mov	r3, #8
   207dc:	mov	r2, r8
   207e0:	mov	r1, sl
   207e4:	mov	r0, r9
   207e8:	bl	1924c <_start@@Base+0x3ebc>
   207ec:	cmp	sl, r0
   207f0:	mov	r4, r0
   207f4:	beq	22728 <_start@@Base+0xd398>
   207f8:	mov	ip, #0
   207fc:	add	r5, sp, #360	; 0x168
   20800:	mov	r1, r0
   20804:	mov	r3, r5
   20808:	mov	r2, r8
   2080c:	mov	r0, r9
   20810:	str	ip, [sp, #360]	; 0x168
   20814:	bl	18390 <_start@@Base+0x3000>
   20818:	cmp	r0, r4
   2081c:	mov	sl, r0
   20820:	beq	237b0 <_start@@Base+0xe420>
   20824:	ldr	r3, [sp, #360]	; 0x168
   20828:	cmp	r3, #0
   2082c:	bne	2083c <_start@@Base+0xb4ac>
   20830:	ldr	r3, [r9, #8]
   20834:	tst	r3, #2
   20838:	beq	1ff4c <_start@@Base+0xabbc>
   2083c:	mov	r3, #4
   20840:	mov	r1, #16
   20844:	ldr	r0, [r9]
   20848:	mov	r2, r3
   2084c:	bl	293ac <flatcc_builder_table_add@@Base>
   20850:	cmp	r0, #0
   20854:	beq	23b24 <_start@@Base+0xe794>
   20858:	ldr	r3, [sp, #360]	; 0x168
   2085c:	str	r3, [r0]
   20860:	b	1ff4c <_start@@Base+0xabbc>
   20864:	cmp	fp, #5
   20868:	ble	21494 <_start@@Base+0xc104>
   2086c:	mov	r3, #5
   20870:	mov	r2, r8
   20874:	mov	r1, sl
   20878:	mov	r0, r9
   2087c:	bl	1924c <_start@@Base+0x3ebc>
   20880:	cmp	r0, sl
   20884:	mov	r4, r0
   20888:	beq	21494 <_start@@Base+0xc104>
   2088c:	mvn	r3, #-1073741824	; 0xc0000000
   20890:	mov	r2, #2
   20894:	ldr	r0, [r9]
   20898:	mov	r1, #4
   2089c:	bl	275c8 <flatcc_builder_start_vector@@Base>
   208a0:	cmp	r0, #0
   208a4:	bne	23840 <_start@@Base+0xe4b0>
   208a8:	mov	r1, r4
   208ac:	ldr	r4, [sp, #28]
   208b0:	mov	r2, r8
   208b4:	mov	r0, r9
   208b8:	mov	r3, r4
   208bc:	bl	1934c <_start@@Base+0x3fbc>
   208c0:	ldr	r3, [sp, #336]	; 0x150
   208c4:	mov	sl, r0
   208c8:	cmp	r3, #0
   208cc:	bne	208fc <_start@@Base+0xb56c>
   208d0:	b	22bd0 <_start@@Base+0xd840>
   208d4:	bl	1c680 <_start@@Base+0x72f0>
   208d8:	mov	r1, r0
   208dc:	mov	r3, r4
   208e0:	mov	r2, r8
   208e4:	mov	r0, r9
   208e8:	bl	1c2f8 <_start@@Base+0x6f68>
   208ec:	ldr	r3, [sp, #336]	; 0x150
   208f0:	mov	sl, r0
   208f4:	cmp	r3, #0
   208f8:	beq	22bd0 <_start@@Base+0xd840>
   208fc:	mov	r1, #1
   20900:	ldr	r0, [r9]
   20904:	bl	26c80 <flatcc_builder_extend_vector@@Base>
   20908:	subs	r3, r0, #0
   2090c:	mov	r1, sl
   20910:	mov	r2, r8
   20914:	mov	r0, r9
   20918:	bne	208d4 <_start@@Base+0xb544>
   2091c:	mov	fp, r9
   20920:	mov	r9, r8
   20924:	b	1f66c <_start@@Base+0xa2dc>
   20928:	add	r3, pc, #280	; 0x118
   2092c:	ldrd	r2, [r3]
   20930:	cmp	r1, r3
   20934:	cmpeq	r0, r2
   20938:	beq	214c4 <_start@@Base+0xc134>
   2093c:	add	r3, pc, #268	; 0x10c
   20940:	ldrd	r2, [r3]
   20944:	cmp	r1, r3
   20948:	cmpeq	r0, r2
   2094c:	bne	221b0 <_start@@Base+0xce20>
   20950:	mov	r3, #0
   20954:	add	r4, sl, #16
   20958:	mov	r1, r8
   2095c:	mov	r0, r4
   20960:	str	r3, [sp, #224]	; 0xe0
   20964:	bl	15480 <_start@@Base+0xf0>
   20968:	and	r3, r1, #-16777216	; 0xff000000
   2096c:	str	r3, [sp, #228]	; 0xe4
   20970:	ldrd	r2, [sp, #224]	; 0xe0
   20974:	cmp	r3, #1929379840	; 0x73000000
   20978:	cmpeq	r2, #0
   2097c:	bne	22550 <_start@@Base+0xd1c0>
   20980:	sub	r3, r8, r4
   20984:	cmp	r3, #1
   20988:	ble	233a4 <_start@@Base+0xe014>
   2098c:	mov	r3, #1
   20990:	mov	r2, r8
   20994:	mov	r1, r4
   20998:	mov	r0, r9
   2099c:	bl	1924c <_start@@Base+0x3ebc>
   209a0:	cmp	r4, r0
   209a4:	mov	sl, r0
   209a8:	bne	233c4 <_start@@Base+0xe034>
   209ac:	mov	r1, sl
   209b0:	mov	r2, r8
   209b4:	mov	r0, r9
   209b8:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   209bc:	mov	sl, r0
   209c0:	b	1ff4c <_start@@Base+0xabbc>
   209c4:	sub	r3, r8, sl
   209c8:	cmp	r3, #5
   209cc:	ble	214ac <_start@@Base+0xc11c>
   209d0:	mov	r1, sl
   209d4:	mov	r3, #5
   209d8:	mov	r2, r8
   209dc:	mov	r0, r9
   209e0:	bl	1924c <_start@@Base+0x3ebc>
   209e4:	cmp	r0, sl
   209e8:	mov	r1, r0
   209ec:	beq	214ac <_start@@Base+0xc11c>
   209f0:	add	r3, sp, #340	; 0x154
   209f4:	mov	r2, r8
   209f8:	mov	r0, r9
   209fc:	bl	1f620 <_start@@Base+0xa290>
   20a00:	ldr	r3, [sp, #340]	; 0x154
   20a04:	mov	sl, r0
   20a08:	cmp	r3, #0
   20a0c:	beq	2091c <_start@@Base+0xb58c>
   20a10:	mov	r1, #12
   20a14:	ldr	r0, [r9]
   20a18:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   20a1c:	cmp	r0, #0
   20a20:	beq	2091c <_start@@Base+0xb58c>
   20a24:	ldr	r3, [sp, #340]	; 0x154
   20a28:	str	r3, [r0]
   20a2c:	b	1ff4c <_start@@Base+0xabbc>
   20a30:	mrcvs	15, 3, r6, cr4, cr1, {3}
   20a34:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   20a38:			; <UNDEFINED> instruction: 0x666e7630
   20a3c:	teqvc	r6, #1593835520	; 0x5f000000
   20a40:			; <UNDEFINED> instruction: 0x666e7631
   20a44:	teqvc	r3, #-268435451	; 0xf0000005
   20a48:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   20a4c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   20a50:	cmnvs	r2, r5, ror #24
   20a54:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   20a58:	svcvs	0x00725f6f
   20a5c:			; <UNDEFINED> instruction: 0x76656374
   20a60:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   20a64:	ldrbvs	r6, [pc], -pc, ror #8
   20a68:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   20a6c:	ldrbvs	r6, [pc], -pc, ror #24
   20a70:	andeq	r4, r3, ip, lsr #10
   20a74:	sub	r3, pc, #36	; 0x24
   20a78:	ldrd	r2, [r3]
   20a7c:	ldrd	r0, [sp, #16]
   20a80:	cmp	r1, r3
   20a84:	cmpeq	r0, r2
   20a88:	bne	21464 <_start@@Base+0xc0d4>
   20a8c:	add	r4, sl, #8
   20a90:	mov	r1, r8
   20a94:	mov	r0, r4
   20a98:	bl	15480 <_start@@Base+0xf0>
   20a9c:	sub	r3, pc, #68	; 0x44
   20aa0:	ldrd	r2, [r3]
   20aa4:	cmp	r1, r3
   20aa8:	cmpeq	r0, r2
   20aac:	beq	22cf4 <_start@@Base+0xd964>
   20ab0:	bic	ip, r0, #255	; 0xff
   20ab4:	sub	r3, pc, #84	; 0x54
   20ab8:	ldrd	r2, [r3]
   20abc:	str	ip, [sp, #232]	; 0xe8
   20ac0:	str	r1, [sp, #236]	; 0xec
   20ac4:	ldrd	r0, [sp, #232]	; 0xe8
   20ac8:	cmp	r1, r3
   20acc:	cmpeq	r0, r2
   20ad0:	bne	22568 <_start@@Base+0xd1d8>
   20ad4:	sub	r3, r8, r4
   20ad8:	cmp	r3, #7
   20adc:	ble	23048 <_start@@Base+0xdcb8>
   20ae0:	mov	r3, #7
   20ae4:	mov	r2, r8
   20ae8:	mov	r1, r4
   20aec:	mov	r0, r9
   20af0:	bl	1924c <_start@@Base+0x3ebc>
   20af4:	cmp	r4, r0
   20af8:	mov	sl, r0
   20afc:	beq	23044 <_start@@Base+0xdcb4>
   20b00:	mov	r2, #8
   20b04:	mvn	r3, #-536870912	; 0xe0000000
   20b08:	ldr	r0, [r9]
   20b0c:	mov	r1, r2
   20b10:	bl	275c8 <flatcc_builder_start_vector@@Base>
   20b14:	cmp	r0, #0
   20b18:	bne	2091c <_start@@Base+0xb58c>
   20b1c:	ldr	r5, [sp, #28]
   20b20:	mov	r1, sl
   20b24:	mov	r2, r8
   20b28:	mov	r0, r9
   20b2c:	mov	r3, r5
   20b30:	bl	1934c <_start@@Base+0x3fbc>
   20b34:	ldr	r3, [sp, #336]	; 0x150
   20b38:	mov	sl, r0
   20b3c:	cmp	r3, #0
   20b40:	beq	236d0 <_start@@Base+0xe340>
   20b44:	ldr	fp, [pc, #-220]	; 20a70 <_start@@Base+0xb6e0>
   20b48:	mov	r4, r0
   20b4c:	mov	sl, r5
   20b50:	strd	r6, [sp, #16]
   20b54:	add	fp, pc, fp
   20b58:	add	fp, fp, #648	; 0x288
   20b5c:	mov	r7, fp
   20b60:	b	20b94 <_start@@Base+0xb804>
   20b64:	add	r3, sp, #360	; 0x168
   20b68:	mov	r1, r0
   20b6c:	ldrd	r4, [r3]
   20b70:	mov	r2, r8
   20b74:	mov	r3, sl
   20b78:	mov	r0, r9
   20b7c:	strd	r4, [fp]
   20b80:	bl	1c2f8 <_start@@Base+0x6f68>
   20b84:	ldr	r3, [sp, #336]	; 0x150
   20b88:	mov	r4, r0
   20b8c:	cmp	r3, #0
   20b90:	beq	236c8 <_start@@Base+0xe338>
   20b94:	mov	r2, #0
   20b98:	mov	r3, #0
   20b9c:	ldr	r0, [r9]
   20ba0:	add	r5, sp, #360	; 0x168
   20ba4:	mov	r1, #1
   20ba8:	strd	r2, [r5]
   20bac:	bl	26c80 <flatcc_builder_extend_vector@@Base>
   20bb0:	subs	fp, r0, #0
   20bb4:	mov	r1, r4
   20bb8:	mov	r3, r5
   20bbc:	mov	r2, r8
   20bc0:	mov	r0, r9
   20bc4:	beq	236b8 <_start@@Base+0xe328>
   20bc8:	bl	17f20 <_start@@Base+0x2b90>
   20bcc:	cmp	r0, r4
   20bd0:	bne	20b64 <_start@@Base+0xb7d4>
   20bd4:	mov	r3, r7
   20bd8:	mov	r2, r8
   20bdc:	str	r5, [sp]
   20be0:	mov	r1, r4
   20be4:	mov	r0, r9
   20be8:	bl	1a82c <_start@@Base+0x549c>
   20bec:	cmp	r8, r0
   20bf0:	cmpne	r0, r4
   20bf4:	bne	20b64 <_start@@Base+0xb7d4>
   20bf8:	mov	fp, r9
   20bfc:	mov	sl, r0
   20c00:	mov	r9, r8
   20c04:	b	1f66c <_start@@Base+0xa2dc>
   20c08:	ldrd	r4, [sp, #16]
   20c0c:	lsr	r3, r4, #16
   20c10:	str	r3, [sp, #88]	; 0x58
   20c14:	ldr	r1, [sp, #88]	; 0x58
   20c18:	str	r5, [sp, #92]	; 0x5c
   20c1c:	add	r3, pc, #764	; 0x2fc
   20c20:	ldrd	r2, [r3]
   20c24:	lsl	r1, r1, #16
   20c28:	str	r1, [sp, #88]	; 0x58
   20c2c:	sub	r1, r8, sl
   20c30:	ldrd	r4, [sp, #88]	; 0x58
   20c34:	cmp	r5, r3
   20c38:	cmpeq	r4, r2
   20c3c:	beq	21610 <_start@@Base+0xc280>
   20c40:	cmp	r1, #5
   20c44:	ble	22c1c <_start@@Base+0xd88c>
   20c48:	mov	r3, #5
   20c4c:	mov	r2, r8
   20c50:	mov	r1, sl
   20c54:	mov	r0, r9
   20c58:	bl	1924c <_start@@Base+0x3ebc>
   20c5c:	cmp	r0, sl
   20c60:	mov	r4, r0
   20c64:	beq	22c1c <_start@@Base+0xd88c>
   20c68:	mov	ip, #0
   20c6c:	add	r5, sp, #360	; 0x168
   20c70:	mov	r1, r0
   20c74:	mov	r2, r8
   20c78:	mov	r3, r5
   20c7c:	mov	r0, r9
   20c80:	str	ip, [sp, #360]	; 0x168
   20c84:	bl	2e020 <flatcc_json_parser_float@@Base>
   20c88:	cmp	r0, r4
   20c8c:	mov	sl, r0
   20c90:	beq	230c4 <_start@@Base+0xdd34>
   20c94:	vldr	s15, [pc, #684]	; 20f48 <_start@@Base+0xbbb8>
   20c98:	vldr	s14, [sp, #360]	; 0x168
   20c9c:	vcmp.f32	s14, s15
   20ca0:	vmrs	APSR_nzcv, fpscr
   20ca4:	bne	20cb4 <_start@@Base+0xb924>
   20ca8:	ldr	r3, [r9, #8]
   20cac:	tst	r3, #2
   20cb0:	beq	1ff4c <_start@@Base+0xabbc>
   20cb4:	mov	r3, #4
   20cb8:	mov	r1, #25
   20cbc:	ldr	r0, [r9]
   20cc0:	mov	r2, r3
   20cc4:	bl	293ac <flatcc_builder_table_add@@Base>
   20cc8:	cmp	r0, #0
   20ccc:	beq	2091c <_start@@Base+0xb58c>
   20cd0:	ldr	r3, [sp, #360]	; 0x168
   20cd4:	str	r3, [r0]
   20cd8:	b	1ff4c <_start@@Base+0xabbc>
   20cdc:	add	r3, pc, #580	; 0x244
   20ce0:	ldrd	r2, [r3]
   20ce4:	ldrd	r0, [sp, #16]
   20ce8:	cmp	r1, r3
   20cec:	cmpeq	r0, r2
   20cf0:	beq	2231c <_start@@Base+0xcf8c>
   20cf4:	ldr	r1, [sp, #20]
   20cf8:	mov	fp, #0
   20cfc:	str	fp, [sp, #200]	; 0xc8
   20d00:	add	r3, pc, #552	; 0x228
   20d04:	ldrd	r2, [r3]
   20d08:	str	r1, [sp, #204]	; 0xcc
   20d0c:	ldrd	r0, [sp, #200]	; 0xc8
   20d10:	cmp	r1, r3
   20d14:	cmpeq	r0, r2
   20d18:	bne	22b84 <_start@@Base+0xd7f4>
   20d1c:	sub	r3, r8, sl
   20d20:	cmp	r3, #4
   20d24:	ble	2280c <_start@@Base+0xd47c>
   20d28:	mov	r3, #4
   20d2c:	mov	r2, r8
   20d30:	mov	r1, sl
   20d34:	mov	r0, r9
   20d38:	bl	1924c <_start@@Base+0x3ebc>
   20d3c:	cmp	r0, sl
   20d40:	mov	r4, r0
   20d44:	beq	2280c <_start@@Base+0xd47c>
   20d48:	add	r5, sp, #360	; 0x168
   20d4c:	mov	r1, r0
   20d50:	mov	r2, r8
   20d54:	mov	r3, r5
   20d58:	mov	r0, r9
   20d5c:	strh	fp, [r5]
   20d60:	bl	18474 <_start@@Base+0x30e4>
   20d64:	cmp	r4, r0
   20d68:	mov	sl, r0
   20d6c:	beq	23704 <_start@@Base+0xe374>
   20d70:	add	r3, sp, #360	; 0x168
   20d74:	ldrsh	r3, [r3]
   20d78:	cmp	r3, #150	; 0x96
   20d7c:	bne	20d8c <_start@@Base+0xb9fc>
   20d80:	ldr	r3, [r9, #8]
   20d84:	tst	r3, #2
   20d88:	beq	1ff4c <_start@@Base+0xabbc>
   20d8c:	mov	r3, #2
   20d90:	mov	r1, #1
   20d94:	ldr	r0, [r9]
   20d98:	mov	r2, r3
   20d9c:	bl	293ac <flatcc_builder_table_add@@Base>
   20da0:	cmp	r0, #0
   20da4:	beq	2091c <_start@@Base+0xb58c>
   20da8:	add	r3, sp, #360	; 0x168
   20dac:	ldrsh	r3, [r3]
   20db0:	strh	r3, [r0]
   20db4:	b	1ff4c <_start@@Base+0xabbc>
   20db8:	mov	r1, sl
   20dbc:	mov	r2, r8
   20dc0:	mov	r0, r9
   20dc4:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   20dc8:	mov	sl, r0
   20dcc:	b	1ff4c <_start@@Base+0xabbc>
   20dd0:	mov	r1, sl
   20dd4:	mov	r2, r8
   20dd8:	mov	r0, r9
   20ddc:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   20de0:	mov	sl, r0
   20de4:	b	1ff4c <_start@@Base+0xabbc>
   20de8:	mov	r1, sl
   20dec:	mov	r2, r8
   20df0:	mov	r0, r9
   20df4:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   20df8:	mov	sl, r0
   20dfc:	b	1ff4c <_start@@Base+0xabbc>
   20e00:	add	r3, pc, #304	; 0x130
   20e04:	ldrd	r2, [r3]
   20e08:	cmp	r1, r3
   20e0c:	cmpeq	r0, r2
   20e10:	bne	22134 <_start@@Base+0xcda4>
   20e14:	add	r4, sl, #16
   20e18:	mov	r1, r8
   20e1c:	mov	r0, r4
   20e20:	bl	15480 <_start@@Base+0xf0>
   20e24:	bic	r0, r0, #255	; 0xff
   20e28:	add	r3, pc, #272	; 0x110
   20e2c:	ldrd	r2, [r3]
   20e30:	strd	r0, [sp, #216]	; 0xd8
   20e34:	ldrd	r0, [sp, #216]	; 0xd8
   20e38:	cmp	r1, r3
   20e3c:	cmpeq	r0, r2
   20e40:	bne	22504 <_start@@Base+0xd174>
   20e44:	sub	r3, r8, r4
   20e48:	cmp	r3, #7
   20e4c:	ble	22f94 <_start@@Base+0xdc04>
   20e50:	mov	r3, #7
   20e54:	mov	r2, r8
   20e58:	mov	r1, r4
   20e5c:	mov	r0, r9
   20e60:	bl	1924c <_start@@Base+0x3ebc>
   20e64:	cmp	r4, r0
   20e68:	mov	sl, r0
   20e6c:	beq	22f90 <_start@@Base+0xdc00>
   20e70:	mvn	r3, #-536870912	; 0xe0000000
   20e74:	mov	r2, #4
   20e78:	ldr	r0, [r9]
   20e7c:	mov	r1, #8
   20e80:	bl	275c8 <flatcc_builder_start_vector@@Base>
   20e84:	cmp	r0, #0
   20e88:	bne	2091c <_start@@Base+0xb58c>
   20e8c:	mov	r1, sl
   20e90:	mov	r2, r8
   20e94:	ldr	r3, [sp, #28]
   20e98:	mov	r0, r9
   20e9c:	bl	1934c <_start@@Base+0x3fbc>
   20ea0:	ldr	r3, [sp, #336]	; 0x150
   20ea4:	mov	sl, r0
   20ea8:	cmp	r3, #0
   20eac:	beq	22a04 <_start@@Base+0xd674>
   20eb0:	ldr	r3, [pc, #148]	; 20f4c <_start@@Base+0xbbbc>
   20eb4:	add	r3, pc, r3
   20eb8:	add	r3, r3, #444	; 0x1bc
   20ebc:	str	r3, [sp, #244]	; 0xf4
   20ec0:	add	r3, sp, #304	; 0x130
   20ec4:	strd	r6, [r3]
   20ec8:	mov	r1, #1
   20ecc:	ldr	r0, [r9]
   20ed0:	bl	26c80 <flatcc_builder_extend_vector@@Base>
   20ed4:	subs	r3, r0, #0
   20ed8:	str	r3, [sp, #64]	; 0x40
   20edc:	beq	2091c <_start@@Base+0xb58c>
   20ee0:	add	r7, sp, #356	; 0x164
   20ee4:	mov	r1, sl
   20ee8:	mov	r3, r7
   20eec:	mov	r2, r8
   20ef0:	mov	r0, r9
   20ef4:	bl	19178 <_start@@Base+0x3de8>
   20ef8:	ldr	r3, [sp, #356]	; 0x164
   20efc:	mov	r4, r0
   20f00:	cmp	r3, #0
   20f04:	beq	229d8 <_start@@Base+0xd648>
   20f08:	mov	sl, #0
   20f0c:	movt	sl, #65535	; 0xffff
   20f10:	str	r7, [sp, #16]
   20f14:	mov	r5, #0
   20f18:	mov	r7, sl
   20f1c:	b	20fe8 <_start@@Base+0xbc58>
   20f20:	ldrtvs	r0, [r2], -r0
   20f24:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   20f28:	mrcvs	15, 3, r6, cr4, cr2, {3}
   20f2c:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   20f30:	andeq	r0, r0, r0
   20f34:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   20f38:	svcvs	0x00727465
   20f3c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   20f40:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   20f44:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   20f48:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   20f4c:	andeq	r4, r3, ip, asr #3
   20f50:	add	r3, pc, #944	; 0x3b0
   20f54:	ldrd	r2, [r3]
   20f58:	cmp	r1, r3
   20f5c:	cmpeq	r0, r2
   20f60:	bne	228f0 <_start@@Base+0xd560>
   20f64:	sub	r3, r8, r4
   20f68:	cmp	r3, #8
   20f6c:	ble	228f0 <_start@@Base+0xd560>
   20f70:	mov	r3, #8
   20f74:	mov	r2, r8
   20f78:	mov	r1, r4
   20f7c:	mov	r0, r9
   20f80:	bl	1924c <_start@@Base+0x3ebc>
   20f84:	cmp	r0, r4
   20f88:	mov	r6, r0
   20f8c:	beq	228f0 <_start@@Base+0xd560>
   20f90:	add	r3, sp, #360	; 0x168
   20f94:	mov	r1, r0
   20f98:	mov	r2, r8
   20f9c:	mov	r0, r9
   20fa0:	str	r3, [sp, #80]	; 0x50
   20fa4:	str	r5, [sp, #360]	; 0x168
   20fa8:	bl	181f8 <_start@@Base+0x2e68>
   20fac:	cmp	r6, r0
   20fb0:	mov	r4, r0
   20fb4:	beq	2298c <_start@@Base+0xd5fc>
   20fb8:	ldr	r2, [sp, #64]	; 0x40
   20fbc:	ldr	r3, [sp, #360]	; 0x168
   20fc0:	str	r3, [r2, #4]
   20fc4:	mov	r1, r4
   20fc8:	mov	r2, r8
   20fcc:	ldr	r3, [sp, #16]
   20fd0:	mov	r0, r9
   20fd4:	bl	1b17c <_start@@Base+0x5dec>
   20fd8:	ldr	r3, [sp, #356]	; 0x164
   20fdc:	mov	r4, r0
   20fe0:	cmp	r3, #0
   20fe4:	beq	22a38 <_start@@Base+0xd6a8>
   20fe8:	cmp	r8, r4
   20fec:	beq	21014 <_start@@Base+0xbc84>
   20ff0:	ldrb	r3, [r4]
   20ff4:	cmp	r3, #34	; 0x22
   20ff8:	addeq	r4, r4, #1
   20ffc:	streq	r5, [r9, #12]
   21000:	beq	21014 <_start@@Base+0xbc84>
   21004:	cmp	r3, #46	; 0x2e
   21008:	movne	r3, #1
   2100c:	strne	r3, [r9, #12]
   21010:	beq	22938 <_start@@Base+0xd5a8>
   21014:	mov	r1, r8
   21018:	mov	r0, r4
   2101c:	bl	15480 <_start@@Base+0xf0>
   21020:	and	fp, r1, r7
   21024:	mov	r3, #0
   21028:	movt	r3, #26980	; 0x6964
   2102c:	mov	r2, #0
   21030:	cmp	fp, r3
   21034:	mov	sl, r5
   21038:	cmpeq	r5, r2
   2103c:	bne	20f50 <_start@@Base+0xbbc0>
   21040:	sub	r3, r8, r4
   21044:	cmp	r3, #2
   21048:	ble	228f0 <_start@@Base+0xd560>
   2104c:	mov	r3, #2
   21050:	mov	r2, r8
   21054:	mov	r1, r4
   21058:	mov	r0, r9
   2105c:	bl	1924c <_start@@Base+0x3ebc>
   21060:	cmp	r0, r4
   21064:	mov	r6, r0
   21068:	beq	228f0 <_start@@Base+0xd560>
   2106c:	add	r3, sp, #360	; 0x168
   21070:	mov	r1, r0
   21074:	mov	r2, r8
   21078:	mov	r0, r9
   2107c:	str	r3, [sp, #80]	; 0x50
   21080:	str	r5, [sp, #360]	; 0x168
   21084:	bl	181f8 <_start@@Base+0x2e68>
   21088:	cmp	r6, r0
   2108c:	mov	r4, r0
   21090:	beq	22954 <_start@@Base+0xd5c4>
   21094:	ldr	r2, [sp, #64]	; 0x40
   21098:	ldr	r3, [sp, #360]	; 0x168
   2109c:	str	r3, [r2]
   210a0:	b	20fc4 <_start@@Base+0xbc34>
   210a4:	add	r3, pc, #612	; 0x264
   210a8:	ldrd	r2, [r3]
   210ac:	cmp	r1, r3
   210b0:	cmpeq	r0, r2
   210b4:	bhi	22250 <_start@@Base+0xcec0>
   210b8:	add	r3, pc, #600	; 0x258
   210bc:	ldrd	r2, [r3]
   210c0:	cmp	r1, r3
   210c4:	cmpeq	r0, r2
   210c8:	bne	225c8 <_start@@Base+0xd238>
   210cc:	sub	r3, r8, sl
   210d0:	cmp	r3, #8
   210d4:	ble	23278 <_start@@Base+0xdee8>
   210d8:	mov	r3, #8
   210dc:	mov	r2, r8
   210e0:	mov	r1, sl
   210e4:	mov	r0, r9
   210e8:	bl	1924c <_start@@Base+0x3ebc>
   210ec:	cmp	sl, r0
   210f0:	mov	r4, r0
   210f4:	beq	23278 <_start@@Base+0xdee8>
   210f8:	mov	sl, #0
   210fc:	add	r5, sp, #360	; 0x168
   21100:	mov	fp, #0
   21104:	mov	r1, r0
   21108:	mov	r3, r5
   2110c:	mov	r2, r8
   21110:	mov	r0, r9
   21114:	strd	sl, [r5]
   21118:	bl	17f20 <_start@@Base+0x2b90>
   2111c:	cmp	r0, r4
   21120:	mov	sl, r0
   21124:	beq	23960 <_start@@Base+0xe5d0>
   21128:	add	r3, sp, #360	; 0x168
   2112c:	ldrd	r2, [r3]
   21130:	orrs	r3, r2, r3
   21134:	bne	21144 <_start@@Base+0xbdb4>
   21138:	ldr	r3, [r9, #8]
   2113c:	tst	r3, #2
   21140:	beq	1ff4c <_start@@Base+0xabbc>
   21144:	mov	r3, #8
   21148:	mov	r1, #18
   2114c:	ldr	r0, [r9]
   21150:	mov	r2, r3
   21154:	bl	293ac <flatcc_builder_table_add@@Base>
   21158:	cmp	r0, #0
   2115c:	beq	23b24 <_start@@Base+0xe794>
   21160:	add	r3, sp, #360	; 0x168
   21164:	ldrd	r2, [r3]
   21168:	strd	r2, [r0]
   2116c:	b	1ff4c <_start@@Base+0xabbc>
   21170:	ldrb	r2, [fp, #7]
   21174:	mov	r3, #0
   21178:	mov	lr, r3
   2117c:	ldrb	r0, [fp, #6]
   21180:	orr	r1, r2, r0, lsl #8
   21184:	ldrb	r2, [fp, #5]
   21188:	mov	r0, lr
   2118c:	orr	r1, r1, r2, lsl #16
   21190:	ldrb	r2, [fp, #4]
   21194:	mov	lr, r0
   21198:	orr	r2, r1, r2, lsl #24
   2119c:	ldrb	r0, [fp, #3]
   211a0:	orr	r3, lr, r0
   211a4:	ldrb	r0, [fp, #2]
   211a8:	orr	r3, r3, r0, lsl #8
   211ac:	ldrb	r0, [fp, #1]
   211b0:	mov	r6, r2
   211b4:	ldrb	r2, [fp]
   211b8:	orr	r0, r3, r0, lsl #16
   211bc:	orr	r7, r0, r2, lsl #24
   211c0:	cmp	r7, r5
   211c4:	cmpeq	r6, r4
   211c8:	bls	21764 <_start@@Base+0xc3d4>
   211cc:	mvn	r3, #-2013265920	; 0x88000000
   211d0:	mvn	r2, #0
   211d4:	cmp	r7, r3
   211d8:	cmpeq	r6, r2
   211dc:	bhi	218ac <_start@@Base+0xc51c>
   211e0:	and	r3, r6, #-16777216	; 0xff000000
   211e4:	add	r1, pc, #308	; 0x134
   211e8:	ldrd	r0, [r1]
   211ec:	str	r3, [sp, #40]	; 0x28
   211f0:	str	r7, [sp, #44]	; 0x2c
   211f4:	ldrd	r2, [sp, #40]	; 0x28
   211f8:	cmp	r3, r1
   211fc:	cmpeq	r2, r0
   21200:	bne	2174c <_start@@Base+0xc3bc>
   21204:	cmp	ip, #5
   21208:	ble	2174c <_start@@Base+0xc3bc>
   2120c:	mov	r1, fp
   21210:	mov	r3, #5
   21214:	mov	r2, r8
   21218:	mov	r0, r9
   2121c:	bl	1924c <_start@@Base+0x3ebc>
   21220:	cmp	r0, fp
   21224:	mov	r1, r0
   21228:	beq	2174c <_start@@Base+0xc3bc>
   2122c:	ldr	r3, [sp, #16]
   21230:	mov	r2, r8
   21234:	mov	r0, r9
   21238:	add	r3, r3, #26
   2123c:	bl	1c680 <_start@@Base+0x72f0>
   21240:	mov	sl, r0
   21244:	sub	r3, r8, sl
   21248:	cmp	r3, #1
   2124c:	ble	21260 <_start@@Base+0xbed0>
   21250:	ldrb	r3, [sl]
   21254:	cmp	r3, #32
   21258:	bhi	21274 <_start@@Base+0xbee4>
   2125c:	beq	2195c <_start@@Base+0xc5cc>
   21260:	mov	r1, sl
   21264:	mov	r2, r8
   21268:	mov	r0, r9
   2126c:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   21270:	mov	sl, r0
   21274:	cmp	r8, sl
   21278:	beq	1ff4c <_start@@Base+0xabbc>
   2127c:	ldrb	r3, [sl]
   21280:	cmp	r3, #44	; 0x2c
   21284:	beq	21970 <_start@@Base+0xc5e0>
   21288:	mov	r3, #0
   2128c:	str	r3, [sp, #352]	; 0x160
   21290:	ldrb	r3, [sl]
   21294:	cmp	r3, #125	; 0x7d
   21298:	beq	21924 <_start@@Base+0xc594>
   2129c:	mov	r3, #10
   212a0:	mov	r1, sl
   212a4:	mov	r2, r8
   212a8:	mov	r0, r9
   212ac:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   212b0:	mov	fp, r0
   212b4:	ldr	r3, [sp, #352]	; 0x160
   212b8:	b	205bc <_start@@Base+0xb22c>
   212bc:	mov	r2, #0
   212c0:	mov	r3, #0
   212c4:	b	21178 <_start@@Base+0xbde8>
   212c8:	mov	r1, #0
   212cc:	mov	lr, r1
   212d0:	b	21184 <_start@@Base+0xbdf4>
   212d4:	mov	r2, #0
   212d8:	mov	r3, r2
   212dc:	b	211a4 <_start@@Base+0xbe14>
   212e0:	mov	r2, #0
   212e4:	mov	r3, r2
   212e8:	b	211ac <_start@@Base+0xbe1c>
   212ec:	mov	r1, #0
   212f0:	mov	r0, r1
   212f4:	b	21190 <_start@@Base+0xbe00>
   212f8:	mov	r2, #0
   212fc:	mov	lr, r2
   21300:	b	2119c <_start@@Base+0xbe0c>
   21304:	nop	{0}
   21308:	cmnvs	lr, r5, ror #6
   2130c:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   21310:			; <UNDEFINED> instruction: 0x666e7630
   21314:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   21318:			; <UNDEFINED> instruction: 0x666e7631
   2131c:	teqvc	r6, #1593835520	; 0x5f000000
   21320:	movwcc	r0, #0
   21324:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21328:	mrscc	r0, (UNDEF: 0)
   2132c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21330:	andeq	r3, r3, ip, ror #18
   21334:	submi	r0, r0, r0
   21338:	ldrb	r2, [fp]
   2133c:	mov	r6, #0
   21340:	lsl	r7, r2, #24
   21344:	cmp	r7, r5
   21348:	cmpeq	r6, r4
   2134c:	bhi	211cc <_start@@Base+0xbe3c>
   21350:	sub	r3, pc, #48	; 0x30
   21354:	ldrd	r2, [r3]
   21358:	cmp	r7, r3
   2135c:	cmpeq	r6, r2
   21360:	bne	2174c <_start@@Base+0xc3bc>
   21364:	cmp	ip, #5
   21368:	ble	2174c <_start@@Base+0xc3bc>
   2136c:	ldr	r2, [r9, #12]
   21370:	ldrb	r3, [fp, #5]
   21374:	cmp	r2, #0
   21378:	beq	21b8c <_start@@Base+0xc7fc>
   2137c:	cmp	r3, #58	; 0x3a
   21380:	cmpne	r3, #32
   21384:	movhi	r3, #1
   21388:	movls	r3, #0
   2138c:	bhi	2174c <_start@@Base+0xc3bc>
   21390:	add	r1, fp, #5
   21394:	str	r3, [r9, #12]
   21398:	sub	r3, r8, r1
   2139c:	cmp	r3, #1
   213a0:	ble	213b4 <_start@@Base+0xc024>
   213a4:	ldrb	r3, [r1]
   213a8:	cmp	r3, #32
   213ac:	bhi	213c4 <_start@@Base+0xc034>
   213b0:	beq	22ce0 <_start@@Base+0xd950>
   213b4:	mov	r2, r8
   213b8:	mov	r0, r9
   213bc:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   213c0:	mov	r1, r0
   213c4:	cmp	r8, r1
   213c8:	beq	213d8 <_start@@Base+0xc048>
   213cc:	ldrb	r3, [r1]
   213d0:	cmp	r3, #58	; 0x3a
   213d4:	beq	22fe4 <_start@@Base+0xdc54>
   213d8:	mov	r3, #4
   213dc:	mov	r2, r8
   213e0:	mov	r0, r9
   213e4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   213e8:	str	r0, [sp, #64]	; 0x40
   213ec:	ldr	r1, [sp, #64]	; 0x40
   213f0:	cmp	r1, fp
   213f4:	beq	2174c <_start@@Base+0xc3bc>
   213f8:	add	fp, sp, #360	; 0x168
   213fc:	mov	r2, r8
   21400:	vstr	d9, [sp, #360]	; 0x168
   21404:	mov	r3, fp
   21408:	mov	r0, r9
   2140c:	bl	2df28 <flatcc_json_parser_double@@Base>
   21410:	ldr	r1, [sp, #64]	; 0x40
   21414:	mov	sl, r0
   21418:	cmp	r1, r0
   2141c:	beq	22164 <_start@@Base+0xcdd4>
   21420:	ldr	r1, [sp, #16]
   21424:	add	r3, sp, #360	; 0x168
   21428:	ldrd	r2, [r3]
   2142c:	strd	r2, [r1, #16]
   21430:	b	21244 <_start@@Base+0xbeb4>
   21434:	mov	r1, sl
   21438:	mov	r2, r8
   2143c:	mov	r0, r9
   21440:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   21444:	mov	sl, r0
   21448:	b	1ff4c <_start@@Base+0xabbc>
   2144c:	mov	r1, sl
   21450:	mov	r2, r8
   21454:	mov	r0, r9
   21458:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   2145c:	mov	sl, r0
   21460:	b	1ff4c <_start@@Base+0xabbc>
   21464:	mov	r1, sl
   21468:	mov	r2, r8
   2146c:	mov	r0, r9
   21470:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   21474:	mov	sl, r0
   21478:	b	1ff4c <_start@@Base+0xabbc>
   2147c:	mov	r1, sl
   21480:	mov	r2, r8
   21484:	mov	r0, r9
   21488:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   2148c:	mov	sl, r0
   21490:	b	1ff4c <_start@@Base+0xabbc>
   21494:	mov	r1, sl
   21498:	mov	r2, r8
   2149c:	mov	r0, r9
   214a0:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   214a4:	mov	sl, r0
   214a8:	b	1ff4c <_start@@Base+0xabbc>
   214ac:	mov	r1, sl
   214b0:	mov	r2, r8
   214b4:	mov	r0, r9
   214b8:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   214bc:	mov	sl, r0
   214c0:	b	1ff4c <_start@@Base+0xabbc>
   214c4:	add	r4, sl, #16
   214c8:	mov	r1, r8
   214cc:	mov	r0, r4
   214d0:	bl	15480 <_start@@Base+0xf0>
   214d4:	lsr	ip, r1, #16
   214d8:	mov	r0, #0
   214dc:	mov	r3, #0
   214e0:	movt	r3, #26418	; 0x6732
   214e4:	mov	r2, #0
   214e8:	lsl	ip, ip, #16
   214ec:	str	r0, [sp, #184]	; 0xb8
   214f0:	str	ip, [sp, #188]	; 0xbc
   214f4:	ldrd	sl, [sp, #184]	; 0xb8
   214f8:	cmp	fp, r3
   214fc:	cmpeq	sl, r2
   21500:	beq	22608 <_start@@Base+0xd278>
   21504:	and	r3, r1, #-16777216	; 0xff000000
   21508:	str	r0, [sp, #272]	; 0x110
   2150c:	str	r3, [sp, #276]	; 0x114
   21510:	add	r3, sp, #272	; 0x110
   21514:	ldrd	r2, [r3]
   21518:	cmp	r3, #1728053248	; 0x67000000
   2151c:	cmpeq	r2, #0
   21520:	bne	22f78 <_start@@Base+0xdbe8>
   21524:	sub	r3, r8, r4
   21528:	cmp	r3, #1
   2152c:	ble	23244 <_start@@Base+0xdeb4>
   21530:	mov	r3, #1
   21534:	mov	r2, r8
   21538:	mov	r1, r4
   2153c:	mov	r0, r9
   21540:	bl	1924c <_start@@Base+0x3ebc>
   21544:	cmp	r4, r0
   21548:	mov	sl, r0
   2154c:	beq	23240 <_start@@Base+0xdeb0>
   21550:	ldr	r0, [r9]
   21554:	bl	27658 <flatcc_builder_start_offset_vector@@Base>
   21558:	cmp	r0, #0
   2155c:	bne	2091c <_start@@Base+0xb58c>
   21560:	ldr	r5, [sp, #28]
   21564:	mov	r1, sl
   21568:	mov	r2, r8
   2156c:	mov	r0, r9
   21570:	mov	r3, r5
   21574:	bl	1934c <_start@@Base+0x3fbc>
   21578:	ldr	r3, [sp, #336]	; 0x150
   2157c:	mov	sl, r0
   21580:	cmp	r3, #0
   21584:	beq	23900 <_start@@Base+0xe570>
   21588:	add	r4, sp, #340	; 0x154
   2158c:	b	215cc <_start@@Base+0xc23c>
   21590:	ldr	r0, [r9]
   21594:	bl	26f1c <flatcc_builder_extend_offset_vector@@Base>
   21598:	subs	ip, r0, #0
   2159c:	mov	r3, r5
   215a0:	mov	r2, r8
   215a4:	mov	r1, sl
   215a8:	mov	r0, r9
   215ac:	beq	2091c <_start@@Base+0xb58c>
   215b0:	ldr	lr, [sp, #340]	; 0x154
   215b4:	str	lr, [ip]
   215b8:	bl	1c2f8 <_start@@Base+0x6f68>
   215bc:	ldr	r3, [sp, #336]	; 0x150
   215c0:	mov	sl, r0
   215c4:	cmp	r3, #0
   215c8:	beq	23900 <_start@@Base+0xe570>
   215cc:	mov	r1, sl
   215d0:	mov	r3, r4
   215d4:	mov	r2, r8
   215d8:	mov	r0, r9
   215dc:	bl	2f308 <flatcc_json_parser_build_string@@Base>
   215e0:	ldr	r3, [sp, #340]	; 0x154
   215e4:	mov	sl, r0
   215e8:	mov	r1, #1
   215ec:	cmp	r3, #0
   215f0:	bne	21590 <_start@@Base+0xc200>
   215f4:	b	2091c <_start@@Base+0xb58c>
   215f8:	mov	r1, sl
   215fc:	mov	r2, r8
   21600:	mov	r0, r9
   21604:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   21608:	mov	sl, r0
   2160c:	b	1ff4c <_start@@Base+0xabbc>
   21610:	cmp	r1, #6
   21614:	ble	226f8 <_start@@Base+0xd368>
   21618:	mov	r3, #6
   2161c:	mov	r2, r8
   21620:	mov	r1, sl
   21624:	mov	r0, r9
   21628:	bl	1924c <_start@@Base+0x3ebc>
   2162c:	cmp	r0, sl
   21630:	mov	r4, r0
   21634:	beq	226f8 <_start@@Base+0xd368>
   21638:	mov	ip, #0
   2163c:	add	r5, sp, #360	; 0x168
   21640:	mov	r1, r0
   21644:	mov	r2, r8
   21648:	mov	r3, r5
   2164c:	mov	r0, r9
   21650:	str	ip, [sp, #360]	; 0x168
   21654:	bl	2e020 <flatcc_json_parser_float@@Base>
   21658:	cmp	r0, r4
   2165c:	mov	sl, r0
   21660:	beq	234c8 <_start@@Base+0xe138>
   21664:	vldr	s15, [pc, #-824]	; 21334 <_start@@Base+0xbfa4>
   21668:	vldr	s14, [sp, #360]	; 0x168
   2166c:	vcmp.f32	s14, s15
   21670:	vmrs	APSR_nzcv, fpscr
   21674:	bne	21684 <_start@@Base+0xc2f4>
   21678:	ldr	r3, [r9, #8]
   2167c:	tst	r3, #2
   21680:	beq	1ff4c <_start@@Base+0xabbc>
   21684:	mov	r3, #4
   21688:	mov	r1, #26
   2168c:	ldr	r0, [r9]
   21690:	mov	r2, r3
   21694:	bl	293ac <flatcc_builder_table_add@@Base>
   21698:	cmp	r0, #0
   2169c:	beq	23b24 <_start@@Base+0xe794>
   216a0:	ldr	r3, [sp, #360]	; 0x168
   216a4:	str	r3, [r0]
   216a8:	b	1ff4c <_start@@Base+0xabbc>
   216ac:	mov	r2, #0
   216b0:	mov	r3, #0
   216b4:	mov	fp, #0
   216b8:	add	r1, sp, #360	; 0x168
   216bc:	cmp	r8, r4
   216c0:	moveq	r5, r8
   216c4:	strd	r2, [r1]
   216c8:	str	fp, [sp, #356]	; 0x164
   216cc:	beq	216fc <_start@@Base+0xc36c>
   216d0:	add	r0, sp, #360	; 0x168
   216d4:	add	r3, sp, #356	; 0x164
   216d8:	mov	r2, r8
   216dc:	mov	r1, r4
   216e0:	str	r0, [sp]
   216e4:	mov	r0, r9
   216e8:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   216ec:	cmp	r4, r0
   216f0:	mov	r5, r0
   216f4:	strbeq	fp, [sp, #352]	; 0x160
   216f8:	bne	231c0 <_start@@Base+0xde30>
   216fc:	ldr	r3, [pc, #-980]	; 21330 <_start@@Base+0xbfa0>
   21700:	add	ip, sp, #352	; 0x160
   21704:	mov	r2, r8
   21708:	mov	r1, r5
   2170c:	mov	r0, r9
   21710:	str	ip, [sp]
   21714:	add	r3, pc, r3
   21718:	add	r3, r3, #456	; 0x1c8
   2171c:	bl	19794 <_start@@Base+0x4404>
   21720:	cmp	r8, r0
   21724:	cmpne	r0, r5
   21728:	mov	sl, r0
   2172c:	beq	2091c <_start@@Base+0xb58c>
   21730:	ldrb	r3, [sp, #352]	; 0x160
   21734:	cmp	r3, #1
   21738:	bne	1f998 <_start@@Base+0xa608>
   2173c:	ldr	r3, [r9, #8]
   21740:	tst	r3, #2
   21744:	beq	1ff4c <_start@@Base+0xabbc>
   21748:	b	1f998 <_start@@Base+0xa608>
   2174c:	mov	r1, fp
   21750:	mov	r2, r8
   21754:	mov	r0, r9
   21758:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   2175c:	mov	sl, r0
   21760:	b	21244 <_start@@Base+0xbeb4>
   21764:	and	r2, r6, #-16777216	; 0xff000000
   21768:	mov	r6, r2
   2176c:	add	r3, pc, #1004	; 0x3ec
   21770:	ldrd	r2, [r3]
   21774:	cmp	r7, r3
   21778:	cmpeq	r6, r2
   2177c:	bne	21350 <_start@@Base+0xbfc0>
   21780:	cmp	ip, #5
   21784:	ble	2174c <_start@@Base+0xc3bc>
   21788:	ldr	r2, [r9, #12]
   2178c:	ldrb	r3, [fp, #5]
   21790:	cmp	r2, #0
   21794:	beq	21b7c <_start@@Base+0xc7ec>
   21798:	cmp	r3, #58	; 0x3a
   2179c:	cmpne	r3, #32
   217a0:	movhi	r3, #1
   217a4:	movls	r3, #0
   217a8:	bhi	2174c <_start@@Base+0xc3bc>
   217ac:	add	r1, fp, #5
   217b0:	str	r3, [r9, #12]
   217b4:	sub	r3, r8, r1
   217b8:	cmp	r3, #1
   217bc:	ble	217d0 <_start@@Base+0xc440>
   217c0:	ldrb	r3, [r1]
   217c4:	cmp	r3, #32
   217c8:	bhi	217e0 <_start@@Base+0xc450>
   217cc:	beq	22ccc <_start@@Base+0xd93c>
   217d0:	mov	r2, r8
   217d4:	mov	r0, r9
   217d8:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   217dc:	mov	r1, r0
   217e0:	cmp	r8, r1
   217e4:	beq	217f4 <_start@@Base+0xc464>
   217e8:	ldrb	r3, [r1]
   217ec:	cmp	r3, #58	; 0x3a
   217f0:	beq	22ffc <_start@@Base+0xdc6c>
   217f4:	mov	r3, #4
   217f8:	mov	r2, r8
   217fc:	mov	r0, r9
   21800:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   21804:	str	r0, [sp, #64]	; 0x40
   21808:	ldr	r2, [sp, #64]	; 0x40
   2180c:	cmp	r2, fp
   21810:	beq	2174c <_start@@Base+0xc3bc>
   21814:	mov	r3, #0
   21818:	mov	r0, #0
   2181c:	mov	r1, #0
   21820:	cmp	r8, r2
   21824:	strb	r3, [sp, #348]	; 0x15c
   21828:	mov	fp, r2
   2182c:	str	r3, [sp, #356]	; 0x164
   21830:	add	r3, sp, #360	; 0x168
   21834:	strd	r0, [r3]
   21838:	beq	21ed4 <_start@@Base+0xcb44>
   2183c:	add	r0, sp, #360	; 0x168
   21840:	add	r3, sp, #356	; 0x164
   21844:	mov	r2, r8
   21848:	mov	r1, fp
   2184c:	str	r0, [sp]
   21850:	mov	r0, r9
   21854:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   21858:	cmp	fp, r0
   2185c:	mov	sl, r0
   21860:	bne	2206c <_start@@Base+0xccdc>
   21864:	ldr	r3, [pc, #772]	; 21b70 <_start@@Base+0xc7e0>
   21868:	add	ip, sp, #348	; 0x15c
   2186c:	mov	r2, r8
   21870:	mov	r1, sl
   21874:	mov	r0, r9
   21878:	str	ip, [sp]
   2187c:	add	r3, pc, r3
   21880:	add	r3, r3, #340	; 0x154
   21884:	bl	1a3f4 <_start@@Base+0x5064>
   21888:	cmp	r8, r0
   2188c:	cmpne	r0, sl
   21890:	beq	23808 <_start@@Base+0xe478>
   21894:	add	r3, sp, #348	; 0x15c
   21898:	mov	sl, r0
   2189c:	ldrsb	r2, [r3]
   218a0:	ldr	r3, [sp, #16]
   218a4:	strb	r2, [r3, #24]
   218a8:	b	21244 <_start@@Base+0xbeb4>
   218ac:	mvn	r3, #-2030043136	; 0x87000000
   218b0:	mvn	r2, #0
   218b4:	cmp	r7, r3
   218b8:	cmpeq	r6, r2
   218bc:	bhi	219c4 <_start@@Base+0xc634>
   218c0:	cmp	ip, #1
   218c4:	ble	2174c <_start@@Base+0xc3bc>
   218c8:	mov	r1, fp
   218cc:	mov	r3, #1
   218d0:	mov	r2, r8
   218d4:	mov	r0, r9
   218d8:	bl	1924c <_start@@Base+0x3ebc>
   218dc:	cmp	r0, fp
   218e0:	mov	r1, r0
   218e4:	beq	2174c <_start@@Base+0xc3bc>
   218e8:	add	fp, sp, #360	; 0x168
   218ec:	mov	r2, r8
   218f0:	str	r1, [sp, #64]	; 0x40
   218f4:	mov	r3, fp
   218f8:	mov	r0, r9
   218fc:	vstr	s16, [sp, #360]	; 0x168
   21900:	bl	2e020 <flatcc_json_parser_float@@Base>
   21904:	ldr	r1, [sp, #64]	; 0x40
   21908:	mov	sl, r0
   2190c:	cmp	r1, r0
   21910:	beq	22b9c <_start@@Base+0xd80c>
   21914:	ldr	r2, [sp, #16]
   21918:	ldr	r3, [sp, #360]	; 0x168
   2191c:	str	r3, [r2]
   21920:	b	21244 <_start@@Base+0xbeb4>
   21924:	add	r1, sl, #1
   21928:	sub	r3, r8, r1
   2192c:	cmp	r3, #1
   21930:	ble	21944 <_start@@Base+0xc5b4>
   21934:	ldrb	r3, [sl, #1]
   21938:	cmp	r3, #32
   2193c:	bhi	21b74 <_start@@Base+0xc7e4>
   21940:	beq	21ec0 <_start@@Base+0xcb30>
   21944:	mov	r2, r8
   21948:	mov	r0, r9
   2194c:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   21950:	mov	fp, r0
   21954:	ldr	r3, [sp, #352]	; 0x160
   21958:	b	205bc <_start@@Base+0xb22c>
   2195c:	ldrb	r3, [sl, #1]
   21960:	cmp	r3, #32
   21964:	addhi	sl, sl, #1
   21968:	bls	21260 <_start@@Base+0xbed0>
   2196c:	b	21274 <_start@@Base+0xbee4>
   21970:	add	fp, sl, #1
   21974:	sub	r3, r8, fp
   21978:	cmp	r3, #1
   2197c:	ble	21990 <_start@@Base+0xc600>
   21980:	ldrb	r3, [sl, #1]
   21984:	cmp	r3, #32
   21988:	bhi	219a4 <_start@@Base+0xc614>
   2198c:	beq	22104 <_start@@Base+0xcd74>
   21990:	mov	r1, fp
   21994:	mov	r2, r8
   21998:	mov	r0, r9
   2199c:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   219a0:	mov	fp, r0
   219a4:	cmp	r8, fp
   219a8:	beq	22210 <_start@@Base+0xce80>
   219ac:	ldrb	r3, [fp]
   219b0:	cmp	r3, #125	; 0x7d
   219b4:	beq	221e0 <_start@@Base+0xce50>
   219b8:	mov	r3, #1
   219bc:	str	r3, [sp, #352]	; 0x160
   219c0:	b	205cc <_start@@Base+0xb23c>
   219c4:	mov	r3, #0
   219c8:	str	r3, [sp, #72]	; 0x48
   219cc:	and	r3, r7, #-16777216	; 0xff000000
   219d0:	str	r3, [sp, #76]	; 0x4c
   219d4:	ldrd	r2, [sp, #72]	; 0x48
   219d8:	cmp	r3, #2046820352	; 0x7a000000
   219dc:	cmpeq	r2, #0
   219e0:	beq	21b9c <_start@@Base+0xc80c>
   219e4:	ldrd	r2, [sp, #72]	; 0x48
   219e8:	cmp	r3, #2030043136	; 0x79000000
   219ec:	cmpeq	r2, #0
   219f0:	bne	2174c <_start@@Base+0xc3bc>
   219f4:	cmp	ip, #1
   219f8:	ble	2174c <_start@@Base+0xc3bc>
   219fc:	mov	r1, fp
   21a00:	mov	r3, #1
   21a04:	mov	r2, r8
   21a08:	mov	r0, r9
   21a0c:	bl	1924c <_start@@Base+0x3ebc>
   21a10:	cmp	r0, fp
   21a14:	mov	r1, r0
   21a18:	beq	2174c <_start@@Base+0xc3bc>
   21a1c:	add	fp, sp, #360	; 0x168
   21a20:	mov	r2, r8
   21a24:	str	r1, [sp, #64]	; 0x40
   21a28:	mov	r3, fp
   21a2c:	mov	r0, r9
   21a30:	vstr	s16, [sp, #360]	; 0x168
   21a34:	bl	2e020 <flatcc_json_parser_float@@Base>
   21a38:	ldr	r1, [sp, #64]	; 0x40
   21a3c:	mov	sl, r0
   21a40:	cmp	r1, r0
   21a44:	beq	230f8 <_start@@Base+0xdd68>
   21a48:	ldr	r2, [sp, #16]
   21a4c:	ldr	r3, [sp, #360]	; 0x168
   21a50:	str	r3, [r2, #4]
   21a54:	b	21244 <_start@@Base+0xbeb4>
   21a58:	mov	r1, fp
   21a5c:	mov	r3, #5
   21a60:	mov	r2, r8
   21a64:	mov	r0, r9
   21a68:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   21a6c:	mov	fp, r0
   21a70:	b	205fc <_start@@Base+0xb26c>
   21a74:	mov	r1, sl
   21a78:	mov	r2, r8
   21a7c:	mov	r0, r9
   21a80:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   21a84:	mov	sl, r0
   21a88:	b	1ff4c <_start@@Base+0xabbc>
   21a8c:	add	r3, pc, #212	; 0xd4
   21a90:	ldrd	r2, [r3]
   21a94:	ldrd	r0, [sp, #56]	; 0x38
   21a98:	cmp	r1, r3
   21a9c:	cmpeq	r0, r2
   21aa0:	bne	21edc <_start@@Base+0xcb4c>
   21aa4:	cmp	fp, #5
   21aa8:	ble	21494 <_start@@Base+0xc104>
   21aac:	mov	r3, #5
   21ab0:	mov	r2, r8
   21ab4:	mov	r1, sl
   21ab8:	mov	r0, r9
   21abc:	bl	1924c <_start@@Base+0x3ebc>
   21ac0:	cmp	r0, sl
   21ac4:	mov	r4, r0
   21ac8:	beq	21494 <_start@@Base+0xc104>
   21acc:	mvn	r3, #-1073741824	; 0xc0000000
   21ad0:	mov	r2, #2
   21ad4:	ldr	r0, [r9]
   21ad8:	mov	r1, #4
   21adc:	bl	275c8 <flatcc_builder_start_vector@@Base>
   21ae0:	cmp	r0, #0
   21ae4:	bne	23840 <_start@@Base+0xe4b0>
   21ae8:	mov	r1, r4
   21aec:	ldr	r4, [sp, #28]
   21af0:	mov	r2, r8
   21af4:	mov	r0, r9
   21af8:	mov	r3, r4
   21afc:	bl	1934c <_start@@Base+0x3fbc>
   21b00:	ldr	r3, [sp, #336]	; 0x150
   21b04:	mov	sl, r0
   21b08:	cmp	r3, #0
   21b0c:	bne	21b3c <_start@@Base+0xc7ac>
   21b10:	b	22e5c <_start@@Base+0xdacc>
   21b14:	bl	1c680 <_start@@Base+0x72f0>
   21b18:	mov	r1, r0
   21b1c:	mov	r3, r4
   21b20:	mov	r2, r8
   21b24:	mov	r0, r9
   21b28:	bl	1c2f8 <_start@@Base+0x6f68>
   21b2c:	ldr	r3, [sp, #336]	; 0x150
   21b30:	mov	sl, r0
   21b34:	cmp	r3, #0
   21b38:	beq	22e5c <_start@@Base+0xdacc>
   21b3c:	mov	r1, #1
   21b40:	ldr	r0, [r9]
   21b44:	bl	26c80 <flatcc_builder_extend_vector@@Base>
   21b48:	subs	r3, r0, #0
   21b4c:	mov	r1, sl
   21b50:	mov	r2, r8
   21b54:	mov	r0, r9
   21b58:	bne	21b14 <_start@@Base+0xc784>
   21b5c:	b	2091c <_start@@Base+0xb58c>
   21b60:	andcc	r0, r0, #0
   21b64:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21b68:	strcc	r0, [r0, #-0]
   21b6c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21b70:	andeq	r3, r3, r4, lsl #16
   21b74:	mov	sl, r1
   21b78:	b	1ff4c <_start@@Base+0xabbc>
   21b7c:	cmp	r3, #34	; 0x22
   21b80:	bne	2174c <_start@@Base+0xc3bc>
   21b84:	add	r1, fp, #6
   21b88:	b	217b4 <_start@@Base+0xc424>
   21b8c:	cmp	r3, #34	; 0x22
   21b90:	bne	2174c <_start@@Base+0xc3bc>
   21b94:	add	r1, fp, #6
   21b98:	b	21398 <_start@@Base+0xc008>
   21b9c:	cmp	ip, #1
   21ba0:	ble	2174c <_start@@Base+0xc3bc>
   21ba4:	mov	r1, fp
   21ba8:	mov	r3, #1
   21bac:	mov	r2, r8
   21bb0:	mov	r0, r9
   21bb4:	bl	1924c <_start@@Base+0x3ebc>
   21bb8:	cmp	r0, fp
   21bbc:	mov	r1, r0
   21bc0:	beq	2174c <_start@@Base+0xc3bc>
   21bc4:	add	fp, sp, #360	; 0x168
   21bc8:	mov	r2, r8
   21bcc:	str	r1, [sp, #64]	; 0x40
   21bd0:	mov	r3, fp
   21bd4:	mov	r0, r9
   21bd8:	vstr	s16, [sp, #360]	; 0x168
   21bdc:	bl	2e020 <flatcc_json_parser_float@@Base>
   21be0:	ldr	r1, [sp, #64]	; 0x40
   21be4:	mov	sl, r0
   21be8:	cmp	r1, r0
   21bec:	beq	23078 <_start@@Base+0xdce8>
   21bf0:	ldr	r2, [sp, #16]
   21bf4:	ldr	r3, [sp, #360]	; 0x168
   21bf8:	str	r3, [r2, #8]
   21bfc:	b	21244 <_start@@Base+0xbeb4>
   21c00:	add	r4, sl, #8
   21c04:	mov	r1, r8
   21c08:	mov	r0, r4
   21c0c:	mov	r5, #0
   21c10:	bl	15480 <_start@@Base+0xf0>
   21c14:	lsr	r1, r1, #16
   21c18:	str	r5, [sp, #160]	; 0xa0
   21c1c:	mov	r3, #0
   21c20:	movt	r3, #13876	; 0x3634
   21c24:	mov	r2, #0
   21c28:	lsl	r1, r1, #16
   21c2c:	str	r1, [sp, #164]	; 0xa4
   21c30:	ldrd	r0, [sp, #160]	; 0xa0
   21c34:	cmp	r1, r3
   21c38:	cmpeq	r0, r2
   21c3c:	bne	22198 <_start@@Base+0xce08>
   21c40:	sub	r3, r8, r4
   21c44:	cmp	r3, #2
   21c48:	ble	226e0 <_start@@Base+0xd350>
   21c4c:	mov	r3, #2
   21c50:	mov	r2, r8
   21c54:	mov	r1, r4
   21c58:	mov	r0, r9
   21c5c:	bl	1924c <_start@@Base+0x3ebc>
   21c60:	cmp	r4, r0
   21c64:	mov	sl, r0
   21c68:	beq	226dc <_start@@Base+0xd34c>
   21c6c:	mov	r1, #3
   21c70:	ldr	r0, [r9]
   21c74:	str	r5, [sp, #340]	; 0x154
   21c78:	bl	27878 <flatcc_builder_start_table@@Base>
   21c7c:	cmp	r0, r5
   21c80:	bne	21e7c <_start@@Base+0xcaec>
   21c84:	add	r5, sp, #356	; 0x164
   21c88:	mov	r1, sl
   21c8c:	mov	r3, r5
   21c90:	mov	r2, r8
   21c94:	mov	r0, r9
   21c98:	bl	19178 <_start@@Base+0x3de8>
   21c9c:	ldr	r3, [sp, #356]	; 0x164
   21ca0:	mov	sl, r0
   21ca4:	cmp	r3, #0
   21ca8:	beq	2321c <_start@@Base+0xde8c>
   21cac:	mov	r3, #0
   21cb0:	movt	r3, #65535	; 0xffff
   21cb4:	mov	fp, #1
   21cb8:	str	r3, [sp, #16]
   21cbc:	strd	r6, [sp, #64]	; 0x40
   21cc0:	b	21d78 <_start@@Base+0xc9e8>
   21cc4:	mov	r4, #0
   21cc8:	str	r4, [sp, #96]	; 0x60
   21ccc:	str	r1, [sp, #100]	; 0x64
   21cd0:	add	r1, pc, #1000	; 0x3e8
   21cd4:	ldrd	r0, [r1]
   21cd8:	ldrd	r2, [sp, #96]	; 0x60
   21cdc:	cmp	r3, r1
   21ce0:	cmpeq	r2, r0
   21ce4:	bne	22908 <_start@@Base+0xd578>
   21ce8:	sub	r3, r8, sl
   21cec:	cmp	r3, #4
   21cf0:	ble	22908 <_start@@Base+0xd578>
   21cf4:	mov	r1, sl
   21cf8:	mov	r3, #4
   21cfc:	mov	r2, r8
   21d00:	mov	r0, r9
   21d04:	bl	1924c <_start@@Base+0x3ebc>
   21d08:	cmp	r0, sl
   21d0c:	mov	r1, r0
   21d10:	beq	22908 <_start@@Base+0xd578>
   21d14:	add	r3, sp, #360	; 0x168
   21d18:	mov	r2, r8
   21d1c:	str	r4, [sp]
   21d20:	mov	r0, r9
   21d24:	bl	2eee4 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   21d28:	ldr	r3, [sp, #360]	; 0x168
   21d2c:	mov	sl, r0
   21d30:	cmp	r3, r4
   21d34:	beq	21e78 <_start@@Base+0xcae8>
   21d38:	mov	r1, r4
   21d3c:	ldr	r0, [r9]
   21d40:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   21d44:	cmp	r0, #0
   21d48:	beq	21e78 <_start@@Base+0xcae8>
   21d4c:	ldr	r3, [sp, #360]	; 0x168
   21d50:	str	r3, [r0]
   21d54:	mov	r1, sl
   21d58:	mov	r3, r5
   21d5c:	mov	r2, r8
   21d60:	mov	r0, r9
   21d64:	bl	1b17c <_start@@Base+0x5dec>
   21d68:	ldr	r3, [sp, #356]	; 0x164
   21d6c:	mov	sl, r0
   21d70:	cmp	r3, #0
   21d74:	beq	23218 <_start@@Base+0xde88>
   21d78:	cmp	r8, sl
   21d7c:	beq	21da4 <_start@@Base+0xca14>
   21d80:	ldrb	r3, [sl]
   21d84:	cmp	r3, #34	; 0x22
   21d88:	moveq	r3, #0
   21d8c:	addeq	sl, sl, #1
   21d90:	streq	r3, [r9, #12]
   21d94:	beq	21da4 <_start@@Base+0xca14>
   21d98:	cmp	r3, #46	; 0x2e
   21d9c:	strne	fp, [r9, #12]
   21da0:	beq	22c3c <_start@@Base+0xd8ac>
   21da4:	mov	r1, r8
   21da8:	mov	r0, sl
   21dac:	bl	15480 <_start@@Base+0xf0>
   21db0:	add	r3, pc, #784	; 0x310
   21db4:	ldrd	r2, [r3]
   21db8:	cmp	r1, r3
   21dbc:	cmpeq	r0, r2
   21dc0:	bls	21cc4 <_start@@Base+0xc934>
   21dc4:	bic	r3, r0, #255	; 0xff
   21dc8:	add	r7, pc, #768	; 0x300
   21dcc:	ldrd	r6, [r7]
   21dd0:	str	r3, [sp, #104]	; 0x68
   21dd4:	str	r1, [sp, #108]	; 0x6c
   21dd8:	ldrd	r2, [sp, #104]	; 0x68
   21ddc:	cmp	r3, r7
   21de0:	cmpeq	r2, r6
   21de4:	beq	22a40 <_start@@Base+0xd6b0>
   21de8:	ldr	r3, [sp, #16]
   21dec:	str	r1, [sp, #172]	; 0xac
   21df0:	and	r3, r0, r3
   21df4:	add	r1, pc, #732	; 0x2dc
   21df8:	ldrd	r0, [r1]
   21dfc:	str	r3, [sp, #168]	; 0xa8
   21e00:	ldrd	r2, [sp, #168]	; 0xa8
   21e04:	cmp	r3, r1
   21e08:	cmpeq	r2, r0
   21e0c:	bne	22908 <_start@@Base+0xd578>
   21e10:	sub	r3, r8, sl
   21e14:	cmp	r3, #6
   21e18:	ble	22908 <_start@@Base+0xd578>
   21e1c:	mov	r1, sl
   21e20:	mov	r3, #6
   21e24:	mov	r2, r8
   21e28:	mov	r0, r9
   21e2c:	bl	1924c <_start@@Base+0x3ebc>
   21e30:	cmp	r0, sl
   21e34:	mov	r1, r0
   21e38:	beq	22908 <_start@@Base+0xd578>
   21e3c:	mov	r0, #0
   21e40:	add	r3, sp, #360	; 0x168
   21e44:	mov	r2, r8
   21e48:	str	r0, [sp]
   21e4c:	mov	r0, r9
   21e50:	bl	2eee4 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   21e54:	ldr	r3, [sp, #360]	; 0x168
   21e58:	mov	sl, r0
   21e5c:	cmp	r3, #0
   21e60:	beq	21e78 <_start@@Base+0xcae8>
   21e64:	mov	r1, #2
   21e68:	ldr	r0, [r9]
   21e6c:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   21e70:	cmp	r0, #0
   21e74:	bne	21d4c <_start@@Base+0xc9bc>
   21e78:	ldrd	r6, [sp, #64]	; 0x40
   21e7c:	mov	r1, sl
   21e80:	mov	r3, #33	; 0x21
   21e84:	mov	r2, r8
   21e88:	mov	r0, r9
   21e8c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   21e90:	ldr	r3, [sp, #340]	; 0x154
   21e94:	mov	sl, r0
   21e98:	cmp	r3, #0
   21e9c:	beq	2091c <_start@@Base+0xb58c>
   21ea0:	mov	r1, #35	; 0x23
   21ea4:	ldr	r0, [r9]
   21ea8:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   21eac:	cmp	r0, #0
   21eb0:	beq	2091c <_start@@Base+0xb58c>
   21eb4:	ldr	r3, [sp, #340]	; 0x154
   21eb8:	str	r3, [r0]
   21ebc:	b	1ff4c <_start@@Base+0xabbc>
   21ec0:	ldrb	r3, [sl, #2]
   21ec4:	cmp	r3, #32
   21ec8:	bls	21944 <_start@@Base+0xc5b4>
   21ecc:	add	sl, sl, #2
   21ed0:	b	1ff4c <_start@@Base+0xabbc>
   21ed4:	mov	sl, r8
   21ed8:	b	21864 <_start@@Base+0xc4d4>
   21edc:	add	r3, pc, #508	; 0x1fc
   21ee0:	ldrd	r2, [r3]
   21ee4:	ldrd	r0, [sp, #16]
   21ee8:	cmp	r1, r3
   21eec:	cmpeq	r0, r2
   21ef0:	bne	21494 <_start@@Base+0xc104>
   21ef4:	add	sl, sl, #8
   21ef8:	mov	r1, r8
   21efc:	mov	r0, sl
   21f00:	mov	r4, #0
   21f04:	bl	15480 <_start@@Base+0xf0>
   21f08:	and	r3, r1, #-16777216	; 0xff000000
   21f0c:	str	r4, [sp, #192]	; 0xc0
   21f10:	str	r3, [sp, #196]	; 0xc4
   21f14:	ldrd	r2, [sp, #192]	; 0xc0
   21f18:	cmp	r3, #1694498816	; 0x65000000
   21f1c:	cmpeq	r2, #0
   21f20:	bne	221c8 <_start@@Base+0xce38>
   21f24:	sub	r3, r8, sl
   21f28:	cmp	r3, #1
   21f2c:	ble	22710 <_start@@Base+0xd380>
   21f30:	mov	r1, sl
   21f34:	mov	r3, #1
   21f38:	mov	r2, r8
   21f3c:	mov	r0, r9
   21f40:	bl	1924c <_start@@Base+0x3ebc>
   21f44:	cmp	sl, r0
   21f48:	mov	r1, r0
   21f4c:	beq	22710 <_start@@Base+0xd380>
   21f50:	ldr	ip, [pc, #416]	; 220f8 <_start@@Base+0xcd68>
   21f54:	mov	r3, r4
   21f58:	mov	r5, #8
   21f5c:	mov	r2, r8
   21f60:	mov	r0, r9
   21f64:	ldr	lr, [pc, #400]	; 220fc <_start@@Base+0xcd6c>
   21f68:	str	r5, [sp]
   21f6c:	ldr	r4, [sp, #344]	; 0x158
   21f70:	add	ip, pc, ip
   21f74:	add	ip, ip, #404	; 0x194
   21f78:	add	lr, pc, lr
   21f7c:	stmib	sp, {r4, ip, lr}
   21f80:	bl	2f73c <flatcc_json_parser_union_type@@Base>
   21f84:	mov	sl, r0
   21f88:	b	1ff4c <_start@@Base+0xabbc>
   21f8c:	mov	r1, sl
   21f90:	mov	r2, r8
   21f94:	mov	r0, r9
   21f98:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   21f9c:	mov	sl, r0
   21fa0:	b	1ff4c <_start@@Base+0xabbc>
   21fa4:	add	r4, sl, #8
   21fa8:	mov	r1, r8
   21fac:	mov	r0, r4
   21fb0:	bl	15480 <_start@@Base+0xf0>
   21fb4:	add	r3, pc, #300	; 0x12c
   21fb8:	ldrd	r2, [r3]
   21fbc:	cmp	r1, r3
   21fc0:	cmpeq	r0, r2
   21fc4:	bne	22474 <_start@@Base+0xd0e4>
   21fc8:	add	sl, sl, #16
   21fcc:	mov	r1, r8
   21fd0:	mov	r0, sl
   21fd4:	bl	15480 <_start@@Base+0xf0>
   21fd8:	and	r0, r0, #-16777216	; 0xff000000
   21fdc:	add	r3, pc, #268	; 0x10c
   21fe0:	ldrd	r2, [r3]
   21fe4:	str	r1, [sp, #260]	; 0x104
   21fe8:	add	r1, sp, #256	; 0x100
   21fec:	str	r0, [sp, #256]	; 0x100
   21ff0:	ldrd	r0, [r1]
   21ff4:	cmp	r1, r3
   21ff8:	cmpeq	r0, r2
   21ffc:	bne	22580 <_start@@Base+0xd1f0>
   22000:	sub	r3, r8, sl
   22004:	cmp	r3, #5
   22008:	ble	236a0 <_start@@Base+0xe310>
   2200c:	mov	r1, sl
   22010:	mov	r3, #5
   22014:	mov	r2, r8
   22018:	mov	r0, r9
   2201c:	bl	1924c <_start@@Base+0x3ebc>
   22020:	cmp	sl, r0
   22024:	mov	r1, r0
   22028:	beq	236a0 <_start@@Base+0xe310>
   2202c:	add	r3, sp, #340	; 0x154
   22030:	mov	r2, r8
   22034:	mov	r0, r9
   22038:	bl	1f438 <_start@@Base+0xa0a8>
   2203c:	ldr	r3, [sp, #340]	; 0x154
   22040:	mov	sl, r0
   22044:	cmp	r3, #0
   22048:	beq	2091c <_start@@Base+0xb58c>
   2204c:	mov	r1, #34	; 0x22
   22050:	ldr	r0, [r9]
   22054:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   22058:	cmp	r0, #0
   2205c:	beq	2091c <_start@@Base+0xb58c>
   22060:	ldr	r3, [sp, #340]	; 0x154
   22064:	str	r3, [r0]
   22068:	b	1ff4c <_start@@Base+0xabbc>
   2206c:	ldr	r1, [sp, #356]	; 0x164
   22070:	add	r3, sp, #360	; 0x168
   22074:	ldrd	r2, [r3]
   22078:	cmp	r1, #0
   2207c:	bne	224d4 <_start@@Base+0xd144>
   22080:	cmp	r3, #0
   22084:	cmpeq	r2, #127	; 0x7f
   22088:	sxtbls	r2, r2
   2208c:	bls	218a0 <_start@@Base+0xc510>
   22090:	mov	r1, r0
   22094:	mov	r3, #7
   22098:	mov	r2, r8
   2209c:	mov	r0, r9
   220a0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   220a4:	mov	sl, r0
   220a8:	ldr	r3, [sp, #64]	; 0x40
   220ac:	cmp	r3, sl
   220b0:	beq	21864 <_start@@Base+0xc4d4>
   220b4:	add	r3, sp, #348	; 0x15c
   220b8:	ldrsb	r2, [r3]
   220bc:	b	218a0 <_start@@Base+0xc510>
   220c0:	andeq	r0, r0, r0
   220c4:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   220c8:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   220cc:	mcrvs	3, 3, r7, cr5, cr4, {3}
   220d0:	cmnvs	r4, r0, lsl #2
   220d4:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   220d8:	strbvs	r0, [r4, #-0]!
   220dc:	mcrvs	3, 3, r7, cr5, cr4, {3}
   220e0:	svcpl	0x00747970
   220e4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   220e8:	rsbvc	r6, r1, r5, ror #6
   220ec:	smcvs	54867	; 0xd653
   220f0:	strvc	r0, [r0], #-0
   220f4:	svcpl	0x00746573
   220f8:	andeq	r3, r3, r0, lsl r1
   220fc:	andeq	r1, r0, r0, lsl #26
   22100:	andeq	r2, r3, r8, lsl #30
   22104:	ldrb	r3, [sl, #2]
   22108:	cmp	r3, #32
   2210c:	addhi	fp, sl, #2
   22110:	bls	21990 <_start@@Base+0xc600>
   22114:	b	219a4 <_start@@Base+0xc614>
   22118:	mov	r1, sl
   2211c:	mov	r2, r8
   22120:	mov	r0, r9
   22124:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22128:	mov	sl, r0
   2212c:	b	1ff4c <_start@@Base+0xabbc>
   22130:	mov	r4, r0
   22134:	mov	r1, r4
   22138:	mov	r2, r8
   2213c:	mov	r0, r9
   22140:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22144:	mov	sl, r0
   22148:	b	1ff4c <_start@@Base+0xabbc>
   2214c:	mov	r1, sl
   22150:	mov	r2, r8
   22154:	mov	r0, r9
   22158:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   2215c:	mov	sl, r0
   22160:	b	1ff4c <_start@@Base+0xabbc>
   22164:	ldr	r3, [pc, #-108]	; 22100 <_start@@Base+0xcd70>
   22168:	mov	r1, r0
   2216c:	mov	r2, r8
   22170:	mov	r0, r9
   22174:	str	fp, [sp]
   22178:	add	r3, pc, r3
   2217c:	add	r3, r3, #356	; 0x164
   22180:	bl	195d8 <_start@@Base+0x4248>
   22184:	cmp	r8, r0
   22188:	cmpne	sl, r0
   2218c:	beq	23808 <_start@@Base+0xe478>
   22190:	mov	sl, r0
   22194:	b	21420 <_start@@Base+0xc090>
   22198:	mov	r1, r4
   2219c:	mov	r2, r8
   221a0:	mov	r0, r9
   221a4:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   221a8:	mov	sl, r0
   221ac:	b	1ff4c <_start@@Base+0xabbc>
   221b0:	mov	r1, r4
   221b4:	mov	r2, r8
   221b8:	mov	r0, r9
   221bc:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   221c0:	mov	sl, r0
   221c4:	b	1ff4c <_start@@Base+0xabbc>
   221c8:	mov	r1, sl
   221cc:	mov	r2, r8
   221d0:	mov	r0, r9
   221d4:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   221d8:	mov	sl, r0
   221dc:	b	1ff4c <_start@@Base+0xabbc>
   221e0:	add	sl, fp, #1
   221e4:	mov	r3, #0
   221e8:	sub	r2, r8, sl
   221ec:	cmp	r2, #1
   221f0:	str	r3, [sp, #352]	; 0x160
   221f4:	ble	22208 <_start@@Base+0xce78>
   221f8:	ldrb	r3, [fp, #1]
   221fc:	cmp	r3, #32
   22200:	bhi	1ff4c <_start@@Base+0xabbc>
   22204:	beq	234b4 <_start@@Base+0xe124>
   22208:	mov	r1, sl
   2220c:	b	21944 <_start@@Base+0xc5b4>
   22210:	mov	ip, #0
   22214:	mov	r3, #10
   22218:	mov	r2, r8
   2221c:	mov	r1, r8
   22220:	mov	r0, r9
   22224:	str	ip, [sp, #352]	; 0x160
   22228:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2222c:	mov	fp, r0
   22230:	ldr	r3, [sp, #352]	; 0x160
   22234:	b	205bc <_start@@Base+0xb22c>
   22238:	mov	r1, sl
   2223c:	mov	r2, r8
   22240:	mov	r0, r9
   22244:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22248:	mov	sl, r0
   2224c:	b	1ff4c <_start@@Base+0xabbc>
   22250:	add	r3, pc, #904	; 0x388
   22254:	ldrd	r2, [r3]
   22258:	cmp	r1, r3
   2225c:	cmpeq	r0, r2
   22260:	beq	22824 <_start@@Base+0xd494>
   22264:	add	r3, pc, #892	; 0x37c
   22268:	ldrd	r2, [r3]
   2226c:	cmp	r1, r3
   22270:	cmpeq	r0, r2
   22274:	bne	230ac <_start@@Base+0xdd1c>
   22278:	sub	r3, r8, sl
   2227c:	cmp	r3, #8
   22280:	ble	235c8 <_start@@Base+0xe238>
   22284:	mov	r3, #8
   22288:	mov	r2, r8
   2228c:	mov	r1, sl
   22290:	mov	r0, r9
   22294:	bl	1924c <_start@@Base+0x3ebc>
   22298:	cmp	sl, r0
   2229c:	mov	r4, r0
   222a0:	beq	235c4 <_start@@Base+0xe234>
   222a4:	mov	sl, #0
   222a8:	add	r5, sp, #360	; 0x168
   222ac:	mov	fp, #0
   222b0:	mov	r1, r0
   222b4:	mov	r3, r5
   222b8:	mov	r2, r8
   222bc:	mov	r0, r9
   222c0:	strd	sl, [r5]
   222c4:	bl	18150 <_start@@Base+0x2dc0>
   222c8:	cmp	r0, r4
   222cc:	mov	sl, r0
   222d0:	beq	239f0 <_start@@Base+0xe660>
   222d4:	add	r3, sp, #360	; 0x168
   222d8:	ldrd	r2, [r3]
   222dc:	orrs	r3, r2, r3
   222e0:	bne	222f0 <_start@@Base+0xcf60>
   222e4:	ldr	r3, [r9, #8]
   222e8:	tst	r3, #2
   222ec:	beq	1ff4c <_start@@Base+0xabbc>
   222f0:	mov	r3, #8
   222f4:	mov	r1, #19
   222f8:	ldr	r0, [r9]
   222fc:	mov	r2, r3
   22300:	bl	293ac <flatcc_builder_table_add@@Base>
   22304:	cmp	r0, #0
   22308:	beq	2091c <_start@@Base+0xb58c>
   2230c:	add	r3, sp, #360	; 0x168
   22310:	ldrd	r2, [r3]
   22314:	strd	r2, [r0]
   22318:	b	1ff4c <_start@@Base+0xabbc>
   2231c:	mov	r3, #0
   22320:	add	r4, sl, #8
   22324:	mov	r1, r8
   22328:	mov	r0, r4
   2232c:	str	r3, [sp, #248]	; 0xf8
   22330:	bl	15480 <_start@@Base+0xf0>
   22334:	and	r3, r1, #-16777216	; 0xff000000
   22338:	str	r3, [sp, #252]	; 0xfc
   2233c:	ldrd	r2, [sp, #248]	; 0xf8
   22340:	cmp	r3, #2030043136	; 0x79000000
   22344:	cmpeq	r2, #0
   22348:	bne	225b0 <_start@@Base+0xd220>
   2234c:	sub	r3, r8, r4
   22350:	cmp	r3, #1
   22354:	ble	23200 <_start@@Base+0xde70>
   22358:	mov	r3, #1
   2235c:	mov	r2, r8
   22360:	mov	r1, r4
   22364:	mov	r0, r9
   22368:	bl	1924c <_start@@Base+0x3ebc>
   2236c:	cmp	r4, r0
   22370:	mov	sl, r0
   22374:	beq	231fc <_start@@Base+0xde6c>
   22378:	mov	r2, #1
   2237c:	mvn	r3, #0
   22380:	ldr	r0, [r9]
   22384:	mov	r1, r2
   22388:	bl	275c8 <flatcc_builder_start_vector@@Base>
   2238c:	cmp	r0, #0
   22390:	bne	2091c <_start@@Base+0xb58c>
   22394:	ldr	r4, [sp, #28]
   22398:	mov	r1, sl
   2239c:	mov	r2, r8
   223a0:	mov	r0, r9
   223a4:	mov	r3, r4
   223a8:	bl	1934c <_start@@Base+0x3fbc>
   223ac:	ldr	r3, [sp, #336]	; 0x150
   223b0:	mov	sl, r0
   223b4:	cmp	r3, #0
   223b8:	beq	2377c <_start@@Base+0xe3ec>
   223bc:	ldr	r3, [pc, #556]	; 225f0 <_start@@Base+0xd260>
   223c0:	strd	r6, [sp, #64]	; 0x40
   223c4:	mov	r7, r4
   223c8:	add	r3, pc, r3
   223cc:	add	r3, r3, #316	; 0x13c
   223d0:	str	r3, [sp, #16]
   223d4:	b	22404 <_start@@Base+0xd074>
   223d8:	ldrb	ip, [sp, #360]	; 0x168
   223dc:	mov	r3, r7
   223e0:	mov	r1, r4
   223e4:	mov	r2, r8
   223e8:	mov	r0, r9
   223ec:	strb	ip, [fp]
   223f0:	bl	1c2f8 <_start@@Base+0x6f68>
   223f4:	ldr	r3, [sp, #336]	; 0x150
   223f8:	mov	sl, r0
   223fc:	cmp	r3, #0
   22400:	beq	23778 <_start@@Base+0xe3e8>
   22404:	mov	r3, #0
   22408:	mov	r1, #1
   2240c:	ldr	r0, [r9]
   22410:	add	r5, sp, #360	; 0x168
   22414:	strb	r3, [sp, #360]	; 0x168
   22418:	bl	26c80 <flatcc_builder_extend_vector@@Base>
   2241c:	subs	fp, r0, #0
   22420:	mov	r1, sl
   22424:	mov	r3, r5
   22428:	mov	r2, r8
   2242c:	mov	r0, r9
   22430:	beq	2091c <_start@@Base+0xb58c>
   22434:	bl	182c8 <_start@@Base+0x2f38>
   22438:	cmp	sl, r0
   2243c:	mov	r4, r0
   22440:	bne	223d8 <_start@@Base+0xd048>
   22444:	mov	r1, r0
   22448:	mov	r2, r8
   2244c:	str	r5, [sp]
   22450:	mov	r0, r9
   22454:	ldr	r3, [sp, #16]
   22458:	bl	19b88 <_start@@Base+0x47f8>
   2245c:	cmp	r8, r0
   22460:	cmpne	r4, r0
   22464:	mov	sl, r0
   22468:	mov	r4, r0
   2246c:	bne	223d8 <_start@@Base+0xd048>
   22470:	b	2091c <_start@@Base+0xb58c>
   22474:	mov	r1, r4
   22478:	mov	r2, r8
   2247c:	mov	r0, r9
   22480:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22484:	mov	sl, r0
   22488:	b	1ff4c <_start@@Base+0xabbc>
   2248c:	mov	r1, sl
   22490:	mov	r2, r8
   22494:	mov	r0, r9
   22498:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   2249c:	mov	sl, r0
   224a0:	b	1ff4c <_start@@Base+0xabbc>
   224a4:	mov	r1, r4
   224a8:	mov	r2, r8
   224ac:	mov	r0, r9
   224b0:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   224b4:	mov	sl, r0
   224b8:	b	1ff4c <_start@@Base+0xabbc>
   224bc:	mov	r1, r4
   224c0:	mov	r2, r8
   224c4:	mov	r0, r9
   224c8:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   224cc:	mov	sl, r0
   224d0:	b	1ff4c <_start@@Base+0xabbc>
   224d4:	cmp	r3, #0
   224d8:	cmpeq	r2, #128	; 0x80
   224dc:	rsbls	r2, r2, #0
   224e0:	sxtbls	r2, r2
   224e4:	bls	218a0 <_start@@Base+0xc510>
   224e8:	mov	r1, r0
   224ec:	mov	r3, #8
   224f0:	mov	r2, r8
   224f4:	mov	r0, r9
   224f8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   224fc:	mov	sl, r0
   22500:	b	220a8 <_start@@Base+0xcd18>
   22504:	mov	r1, r4
   22508:	mov	r2, r8
   2250c:	mov	r0, r9
   22510:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22514:	mov	sl, r0
   22518:	b	1ff4c <_start@@Base+0xabbc>
   2251c:	ldr	r3, [pc, #208]	; 225f4 <_start@@Base+0xd264>
   22520:	mov	r1, r0
   22524:	mov	r2, r8
   22528:	mov	r0, r9
   2252c:	str	r5, [sp]
   22530:	add	r3, pc, r3
   22534:	add	r3, r3, #516	; 0x204
   22538:	bl	19420 <_start@@Base+0x4090>
   2253c:	cmp	r8, r0
   22540:	cmpne	sl, r0
   22544:	beq	20bf8 <_start@@Base+0xb868>
   22548:	mov	sl, r0
   2254c:	b	1fb90 <_start@@Base+0xa800>
   22550:	mov	r1, r4
   22554:	mov	r2, r8
   22558:	mov	r0, r9
   2255c:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22560:	mov	sl, r0
   22564:	b	1ff4c <_start@@Base+0xabbc>
   22568:	mov	r1, r4
   2256c:	mov	r2, r8
   22570:	mov	r0, r9
   22574:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22578:	mov	sl, r0
   2257c:	b	1ff4c <_start@@Base+0xabbc>
   22580:	mov	r1, sl
   22584:	mov	r2, r8
   22588:	mov	r0, r9
   2258c:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22590:	mov	sl, r0
   22594:	b	1ff4c <_start@@Base+0xabbc>
   22598:	mov	r1, r4
   2259c:	mov	r2, r8
   225a0:	mov	r0, r9
   225a4:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   225a8:	mov	sl, r0
   225ac:	b	1ff4c <_start@@Base+0xabbc>
   225b0:	mov	r1, r4
   225b4:	mov	r2, r8
   225b8:	mov	r0, r9
   225bc:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   225c0:	mov	sl, r0
   225c4:	b	1ff4c <_start@@Base+0xabbc>
   225c8:	mov	r1, sl
   225cc:	mov	r2, r8
   225d0:	mov	r0, r9
   225d4:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   225d8:	mov	sl, r0
   225dc:	b	1ff4c <_start@@Base+0xabbc>
   225e0:			; <UNDEFINED> instruction: 0x666e7631
   225e4:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   225e8:			; <UNDEFINED> instruction: 0x666e7631
   225ec:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   225f0:			; <UNDEFINED> instruction: 0x00032cb8
   225f4:	andeq	r2, r3, r0, asr fp
   225f8:			; <UNDEFINED> instruction: 0x000327b0
   225fc:	andeq	r2, r3, ip, lsl r7
   22600:	ldrdeq	r2, [r3], -r0
   22604:	ldrdeq	r2, [r3], -ip
   22608:	sub	r3, r8, r4
   2260c:	cmp	r3, #2
   22610:	ble	23260 <_start@@Base+0xded0>
   22614:	mov	r3, #2
   22618:	mov	r2, r8
   2261c:	mov	r1, r4
   22620:	mov	r0, r9
   22624:	bl	1924c <_start@@Base+0x3ebc>
   22628:	cmp	r4, r0
   2262c:	mov	sl, r0
   22630:	beq	2325c <_start@@Base+0xdecc>
   22634:	ldr	r0, [r9]
   22638:	bl	27658 <flatcc_builder_start_offset_vector@@Base>
   2263c:	cmp	r0, #0
   22640:	bne	2091c <_start@@Base+0xb58c>
   22644:	ldr	r5, [sp, #28]
   22648:	mov	r1, sl
   2264c:	mov	r2, r8
   22650:	mov	r0, r9
   22654:	mov	r3, r5
   22658:	bl	1934c <_start@@Base+0x3fbc>
   2265c:	ldr	r3, [sp, #336]	; 0x150
   22660:	mov	sl, r0
   22664:	cmp	r3, #0
   22668:	beq	23894 <_start@@Base+0xe504>
   2266c:	add	r4, sp, #340	; 0x154
   22670:	b	226b0 <_start@@Base+0xd320>
   22674:	ldr	r0, [r9]
   22678:	bl	26f1c <flatcc_builder_extend_offset_vector@@Base>
   2267c:	subs	ip, r0, #0
   22680:	mov	r3, r5
   22684:	mov	r2, r8
   22688:	mov	r1, sl
   2268c:	mov	r0, r9
   22690:	beq	2091c <_start@@Base+0xb58c>
   22694:	ldr	lr, [sp, #340]	; 0x154
   22698:	str	lr, [ip]
   2269c:	bl	1c2f8 <_start@@Base+0x6f68>
   226a0:	ldr	r3, [sp, #336]	; 0x150
   226a4:	mov	sl, r0
   226a8:	cmp	r3, #0
   226ac:	beq	23894 <_start@@Base+0xe504>
   226b0:	mov	r1, sl
   226b4:	mov	r3, r4
   226b8:	mov	r2, r8
   226bc:	mov	r0, r9
   226c0:	bl	2f308 <flatcc_json_parser_build_string@@Base>
   226c4:	ldr	r3, [sp, #340]	; 0x154
   226c8:	mov	sl, r0
   226cc:	mov	r1, #1
   226d0:	cmp	r3, #0
   226d4:	bne	22674 <_start@@Base+0xd2e4>
   226d8:	b	2091c <_start@@Base+0xb58c>
   226dc:	mov	r4, r0
   226e0:	mov	r1, r4
   226e4:	mov	r2, r8
   226e8:	mov	r0, r9
   226ec:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   226f0:	mov	sl, r0
   226f4:	b	1ff4c <_start@@Base+0xabbc>
   226f8:	mov	r1, sl
   226fc:	mov	r2, r8
   22700:	mov	r0, r9
   22704:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22708:	mov	sl, r0
   2270c:	b	1ff4c <_start@@Base+0xabbc>
   22710:	mov	r1, sl
   22714:	mov	r2, r8
   22718:	mov	r0, r9
   2271c:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22720:	mov	sl, r0
   22724:	b	1ff4c <_start@@Base+0xabbc>
   22728:	add	sl, sl, #8
   2272c:	mov	r1, r8
   22730:	mov	r0, sl
   22734:	mov	r4, #0
   22738:	bl	15480 <_start@@Base+0xf0>
   2273c:	and	r3, r1, #-16777216	; 0xff000000
   22740:	str	r4, [sp, #288]	; 0x120
   22744:	str	r3, [sp, #292]	; 0x124
   22748:	add	r3, sp, #288	; 0x120
   2274c:	ldrd	r2, [r3]
   22750:	cmp	r3, #1627389952	; 0x61000000
   22754:	cmpeq	r2, #0
   22758:	bne	233ac <_start@@Base+0xe01c>
   2275c:	sub	r3, r8, sl
   22760:	cmp	r3, #1
   22764:	ble	2384c <_start@@Base+0xe4bc>
   22768:	mov	r3, #1
   2276c:	mov	r2, r8
   22770:	mov	r1, sl
   22774:	mov	r0, r9
   22778:	bl	1924c <_start@@Base+0x3ebc>
   2277c:	cmp	sl, r0
   22780:	mov	r5, r0
   22784:	beq	2384c <_start@@Base+0xe4bc>
   22788:	add	fp, sp, #360	; 0x168
   2278c:	mov	r1, r0
   22790:	str	r4, [sp, #360]	; 0x168
   22794:	mov	r2, r8
   22798:	mov	r3, fp
   2279c:	mov	r0, r9
   227a0:	bl	18390 <_start@@Base+0x3000>
   227a4:	cmp	r0, r5
   227a8:	mov	sl, r0
   227ac:	beq	23b80 <_start@@Base+0xe7f0>
   227b0:	ldr	r3, [sp, #360]	; 0x168
   227b4:	cmp	r3, #0
   227b8:	bne	227c8 <_start@@Base+0xd438>
   227bc:	ldr	r3, [r9, #8]
   227c0:	tst	r3, #2
   227c4:	beq	1ff4c <_start@@Base+0xabbc>
   227c8:	mov	r3, #4
   227cc:	mov	r1, #20
   227d0:	ldr	r0, [r9]
   227d4:	mov	r2, r3
   227d8:	bl	293ac <flatcc_builder_table_add@@Base>
   227dc:	cmp	r0, #0
   227e0:	beq	23b24 <_start@@Base+0xe794>
   227e4:	ldr	r3, [sp, #360]	; 0x168
   227e8:	str	r3, [r0]
   227ec:	b	1ff4c <_start@@Base+0xabbc>
   227f0:	mov	r4, r0
   227f4:	mov	r1, r4
   227f8:	mov	r2, r8
   227fc:	mov	r0, r9
   22800:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22804:	mov	sl, r0
   22808:	b	1ff4c <_start@@Base+0xabbc>
   2280c:	mov	r1, sl
   22810:	mov	r2, r8
   22814:	mov	r0, r9
   22818:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   2281c:	mov	sl, r0
   22820:	b	1ff4c <_start@@Base+0xabbc>
   22824:	sub	r3, r8, sl
   22828:	cmp	r3, #8
   2282c:	ble	234fc <_start@@Base+0xe16c>
   22830:	mov	r3, #8
   22834:	mov	r2, r8
   22838:	mov	r1, sl
   2283c:	mov	r0, r9
   22840:	bl	1924c <_start@@Base+0x3ebc>
   22844:	cmp	sl, r0
   22848:	mov	r4, r0
   2284c:	beq	234fc <_start@@Base+0xe16c>
   22850:	mov	ip, #0
   22854:	add	r5, sp, #360	; 0x168
   22858:	mov	r1, r0
   2285c:	mov	r3, r5
   22860:	mov	r2, r8
   22864:	mov	r0, r9
   22868:	str	ip, [sp, #360]	; 0x168
   2286c:	bl	181f8 <_start@@Base+0x2e68>
   22870:	cmp	r0, r4
   22874:	mov	sl, r0
   22878:	beq	23b34 <_start@@Base+0xe7a4>
   2287c:	ldr	r3, [sp, #360]	; 0x168
   22880:	cmp	r3, #0
   22884:	bne	22894 <_start@@Base+0xd504>
   22888:	ldr	r3, [r9, #8]
   2288c:	tst	r3, #2
   22890:	beq	1ff4c <_start@@Base+0xabbc>
   22894:	mov	r3, #4
   22898:	mov	r1, #17
   2289c:	ldr	r0, [r9]
   228a0:	mov	r2, r3
   228a4:	bl	293ac <flatcc_builder_table_add@@Base>
   228a8:	cmp	r0, #0
   228ac:	beq	23b24 <_start@@Base+0xe794>
   228b0:	ldr	r3, [sp, #360]	; 0x168
   228b4:	str	r3, [r0]
   228b8:	b	1ff4c <_start@@Base+0xabbc>
   228bc:	ldr	r3, [pc, #-716]	; 225f8 <_start@@Base+0xd268>
   228c0:	mov	r1, r0
   228c4:	mov	r2, r8
   228c8:	mov	r0, r9
   228cc:	str	fp, [sp]
   228d0:	add	r3, pc, r3
   228d4:	add	r3, r3, #304	; 0x130
   228d8:	bl	19d90 <_start@@Base+0x4a00>
   228dc:	cmp	r8, r0
   228e0:	cmpne	sl, r0
   228e4:	beq	20bf8 <_start@@Base+0xb868>
   228e8:	mov	sl, r0
   228ec:	b	20734 <_start@@Base+0xb3a4>
   228f0:	mov	r1, r4
   228f4:	mov	r2, r8
   228f8:	mov	r0, r9
   228fc:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22900:	mov	r4, r0
   22904:	b	20fc4 <_start@@Base+0xbc34>
   22908:	mov	r1, sl
   2290c:	mov	r2, r8
   22910:	mov	r0, r9
   22914:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22918:	mov	sl, r0
   2291c:	b	21d54 <_start@@Base+0xc9c4>
   22920:	mov	r1, sl
   22924:	mov	r2, r8
   22928:	mov	r0, r9
   2292c:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22930:	mov	sl, r0
   22934:	b	203d0 <_start@@Base+0xb040>
   22938:	mov	r1, r4
   2293c:	mov	r3, #5
   22940:	mov	r2, r8
   22944:	mov	r0, r9
   22948:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2294c:	mov	r4, r0
   22950:	b	21014 <_start@@Base+0xbc84>
   22954:	ldr	r3, [pc, #-864]	; 225fc <_start@@Base+0xd26c>
   22958:	mov	r1, r0
   2295c:	mov	r2, r8
   22960:	ldr	r0, [sp, #80]	; 0x50
   22964:	add	r3, pc, r3
   22968:	add	r3, r3, #432	; 0x1b0
   2296c:	str	r0, [sp]
   22970:	mov	r0, r9
   22974:	bl	1a620 <_start@@Base+0x5290>
   22978:	cmp	r8, r0
   2297c:	cmpne	r4, r0
   22980:	beq	229bc <_start@@Base+0xd62c>
   22984:	mov	r4, r0
   22988:	b	21094 <_start@@Base+0xbd04>
   2298c:	ldr	r1, [sp, #80]	; 0x50
   22990:	mov	r2, r8
   22994:	mov	r0, r9
   22998:	ldr	r3, [sp, #244]	; 0xf4
   2299c:	str	r1, [sp]
   229a0:	mov	r1, r4
   229a4:	bl	1a620 <_start@@Base+0x5290>
   229a8:	cmp	r8, r0
   229ac:	cmpne	r4, r0
   229b0:	beq	229bc <_start@@Base+0xd62c>
   229b4:	mov	r4, r0
   229b8:	b	20fb8 <_start@@Base+0xbc28>
   229bc:	mov	r1, r0
   229c0:	mov	r3, #33	; 0x21
   229c4:	strd	sl, [sp, #80]	; 0x50
   229c8:	mov	r2, r8
   229cc:	mov	r0, r9
   229d0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   229d4:	mov	r4, r0
   229d8:	mov	r1, r4
   229dc:	mov	r2, r8
   229e0:	ldr	r3, [sp, #28]
   229e4:	mov	r0, r9
   229e8:	bl	1c2f8 <_start@@Base+0x6f68>
   229ec:	ldr	r3, [sp, #336]	; 0x150
   229f0:	mov	sl, r0
   229f4:	cmp	r3, #0
   229f8:	bne	20ec8 <_start@@Base+0xbb38>
   229fc:	add	r3, sp, #304	; 0x130
   22a00:	ldrd	r6, [r3]
   22a04:	ldr	r0, [r9]
   22a08:	bl	285b4 <flatcc_builder_end_vector@@Base>
   22a0c:	cmp	r0, #0
   22a10:	str	r0, [sp, #340]	; 0x154
   22a14:	beq	2091c <_start@@Base+0xb58c>
   22a18:	mov	r1, #29
   22a1c:	ldr	r0, [r9]
   22a20:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   22a24:	cmp	r0, #0
   22a28:	beq	2091c <_start@@Base+0xb58c>
   22a2c:	ldr	r3, [sp, #340]	; 0x154
   22a30:	str	r3, [r0]
   22a34:	b	1ff4c <_start@@Base+0xabbc>
   22a38:	strd	sl, [sp, #80]	; 0x50
   22a3c:	b	229d8 <_start@@Base+0xd648>
   22a40:	sub	r3, r8, sl
   22a44:	cmp	r3, #7
   22a48:	ble	22908 <_start@@Base+0xd578>
   22a4c:	mov	r1, sl
   22a50:	mov	r3, #7
   22a54:	mov	r2, r8
   22a58:	mov	r0, r9
   22a5c:	bl	1924c <_start@@Base+0x3ebc>
   22a60:	cmp	r0, sl
   22a64:	mov	r1, r0
   22a68:	beq	22908 <_start@@Base+0xd578>
   22a6c:	add	r3, sp, #360	; 0x168
   22a70:	mov	r2, r8
   22a74:	str	fp, [sp]
   22a78:	mov	r0, r9
   22a7c:	bl	2eee4 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   22a80:	ldr	r3, [sp, #360]	; 0x168
   22a84:	mov	sl, r0
   22a88:	cmp	r3, #0
   22a8c:	beq	21e78 <_start@@Base+0xcae8>
   22a90:	mov	r1, #1
   22a94:	ldr	r0, [r9]
   22a98:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   22a9c:	cmp	r0, #0
   22aa0:	bne	21d4c <_start@@Base+0xc9bc>
   22aa4:	b	21e78 <_start@@Base+0xcae8>
   22aa8:	sub	r3, r8, sl
   22aac:	cmp	r3, #3
   22ab0:	ble	22920 <_start@@Base+0xd590>
   22ab4:	mov	r3, #3
   22ab8:	mov	r2, r8
   22abc:	mov	r1, sl
   22ac0:	mov	r0, r9
   22ac4:	bl	1924c <_start@@Base+0x3ebc>
   22ac8:	cmp	r0, sl
   22acc:	mov	r4, r0
   22ad0:	beq	22920 <_start@@Base+0xd590>
   22ad4:	add	fp, sp, #360	; 0x168
   22ad8:	mov	r6, #0
   22adc:	mov	r7, #0
   22ae0:	mov	r1, r0
   22ae4:	mov	r3, fp
   22ae8:	mov	r2, r8
   22aec:	mov	r0, r9
   22af0:	strd	r6, [fp]
   22af4:	bl	17f20 <_start@@Base+0x2b90>
   22af8:	cmp	r4, r0
   22afc:	mov	sl, r0
   22b00:	beq	23350 <_start@@Base+0xdfc0>
   22b04:	add	r3, sp, #360	; 0x168
   22b08:	ldrd	r2, [r3]
   22b0c:	orrs	r3, r2, r3
   22b10:	bne	22b20 <_start@@Base+0xd790>
   22b14:	ldr	r3, [r9, #8]
   22b18:	tst	r3, #2
   22b1c:	beq	203d0 <_start@@Base+0xb040>
   22b20:	mov	r3, #8
   22b24:	mov	r1, #1
   22b28:	ldr	r0, [r9]
   22b2c:	mov	r2, r3
   22b30:	bl	293ac <flatcc_builder_table_add@@Base>
   22b34:	cmp	r0, #0
   22b38:	beq	22e98 <_start@@Base+0xdb08>
   22b3c:	add	r3, sp, #360	; 0x168
   22b40:	ldrd	r2, [r3]
   22b44:	strd	r2, [r0]
   22b48:	b	203d0 <_start@@Base+0xb040>
   22b4c:	ldrb	r2, [sl, #1]
   22b50:	add	r1, sl, #1
   22b54:	cmp	r2, #114	; 0x72
   22b58:	bne	20100 <_start@@Base+0xad70>
   22b5c:	ldrb	r2, [r1, #1]!
   22b60:	cmp	r2, #117	; 0x75
   22b64:	bne	20100 <_start@@Base+0xad70>
   22b68:	ldrb	r2, [r1, #1]
   22b6c:	cmp	r2, #101	; 0x65
   22b70:	moveq	r3, #1
   22b74:	addeq	r4, sl, #4
   22b78:	strbeq	r3, [sp, #356]	; 0x164
   22b7c:	bne	20100 <_start@@Base+0xad70>
   22b80:	b	20150 <_start@@Base+0xadc0>
   22b84:	mov	r1, sl
   22b88:	mov	r2, r8
   22b8c:	mov	r0, r9
   22b90:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22b94:	mov	sl, r0
   22b98:	b	1ff4c <_start@@Base+0xabbc>
   22b9c:	ldr	r3, [pc, #-1444]	; 22600 <_start@@Base+0xd270>
   22ba0:	mov	r1, r0
   22ba4:	mov	r2, r8
   22ba8:	mov	r0, r9
   22bac:	str	fp, [sp]
   22bb0:	add	r3, pc, r3
   22bb4:	add	r3, r3, #368	; 0x170
   22bb8:	bl	19420 <_start@@Base+0x4090>
   22bbc:	cmp	r8, r0
   22bc0:	cmpne	sl, r0
   22bc4:	beq	23808 <_start@@Base+0xe478>
   22bc8:	mov	sl, r0
   22bcc:	b	21914 <_start@@Base+0xc584>
   22bd0:	ldr	r0, [r9]
   22bd4:	bl	285b4 <flatcc_builder_end_vector@@Base>
   22bd8:	cmp	r0, #0
   22bdc:	str	r0, [sp, #340]	; 0x154
   22be0:	beq	2091c <_start@@Base+0xb58c>
   22be4:	mov	r1, #9
   22be8:	ldr	r0, [r9]
   22bec:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   22bf0:	cmp	r0, #0
   22bf4:	beq	2091c <_start@@Base+0xb58c>
   22bf8:	ldr	r3, [sp, #340]	; 0x154
   22bfc:	str	r3, [r0]
   22c00:	b	1ff4c <_start@@Base+0xabbc>
   22c04:	mov	r1, sl
   22c08:	mov	r2, r8
   22c0c:	mov	r0, r9
   22c10:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22c14:	mov	sl, r0
   22c18:	b	1ff4c <_start@@Base+0xabbc>
   22c1c:	mov	r1, sl
   22c20:	mov	r2, r8
   22c24:	mov	r0, r9
   22c28:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22c2c:	mov	sl, r0
   22c30:	b	1ff4c <_start@@Base+0xabbc>
   22c34:	mov	sl, r8
   22c38:	b	1f838 <_start@@Base+0xa4a8>
   22c3c:	mov	r1, sl
   22c40:	mov	r3, #5
   22c44:	mov	r2, r8
   22c48:	mov	r0, r9
   22c4c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   22c50:	mov	sl, r0
   22c54:	b	21da4 <_start@@Base+0xca14>
   22c58:	mov	r1, sl
   22c5c:	mov	r3, #5
   22c60:	mov	r2, r8
   22c64:	mov	r0, r9
   22c68:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   22c6c:	mov	sl, r0
   22c70:	b	20424 <_start@@Base+0xb094>
   22c74:	ldr	r1, [sp, #356]	; 0x164
   22c78:	add	r3, sp, #360	; 0x168
   22c7c:	ldrd	r2, [r3]
   22c80:	cmp	r1, #0
   22c84:	beq	23014 <_start@@Base+0xdc84>
   22c88:	cmp	r3, #0
   22c8c:	cmpeq	r2, #128	; 0x80
   22c90:	rsbls	r2, r2, #0
   22c94:	sxtbls	r2, r2
   22c98:	strbls	r2, [sp, #352]	; 0x160
   22c9c:	bls	1f874 <_start@@Base+0xa4e4>
   22ca0:	mov	r1, r0
   22ca4:	mov	r3, #8
   22ca8:	mov	r2, r8
   22cac:	mov	r0, r9
   22cb0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   22cb4:	mov	sl, r0
   22cb8:	cmp	r4, sl
   22cbc:	beq	1f838 <_start@@Base+0xa4a8>
   22cc0:	add	r3, sp, #352	; 0x160
   22cc4:	ldrsb	r2, [r3]
   22cc8:	b	1f874 <_start@@Base+0xa4e4>
   22ccc:	ldrb	r3, [r1, #1]
   22cd0:	cmp	r3, #32
   22cd4:	addhi	r1, r1, #1
   22cd8:	bls	217d0 <_start@@Base+0xc440>
   22cdc:	b	217e0 <_start@@Base+0xc450>
   22ce0:	ldrb	r3, [r1, #1]
   22ce4:	cmp	r3, #32
   22ce8:	addhi	r1, r1, #1
   22cec:	bls	213b4 <_start@@Base+0xc024>
   22cf0:	b	213c4 <_start@@Base+0xc034>
   22cf4:	mov	r3, #0
   22cf8:	add	r4, sl, #16
   22cfc:	mov	r1, r8
   22d00:	mov	r0, r4
   22d04:	str	r3, [sp, #280]	; 0x118
   22d08:	bl	15480 <_start@@Base+0xf0>
   22d0c:	and	r3, r1, #-16777216	; 0xff000000
   22d10:	str	r3, [sp, #284]	; 0x11c
   22d14:	add	r3, sp, #280	; 0x118
   22d18:	ldrd	r2, [r3]
   22d1c:	cmp	r3, #1929379840	; 0x73000000
   22d20:	cmpeq	r2, #0
   22d24:	bne	23060 <_start@@Base+0xdcd0>
   22d28:	sub	r3, r8, r4
   22d2c:	cmp	r3, #1
   22d30:	ble	2349c <_start@@Base+0xe10c>
   22d34:	mov	r3, #1
   22d38:	mov	r2, r8
   22d3c:	mov	r1, r4
   22d40:	mov	r0, r9
   22d44:	bl	1924c <_start@@Base+0x3ebc>
   22d48:	cmp	r4, r0
   22d4c:	mov	sl, r0
   22d50:	beq	23498 <_start@@Base+0xe108>
   22d54:	mov	r2, #8
   22d58:	mvn	r3, #-536870912	; 0xe0000000
   22d5c:	ldr	r0, [r9]
   22d60:	mov	r1, r2
   22d64:	bl	275c8 <flatcc_builder_start_vector@@Base>
   22d68:	cmp	r0, #0
   22d6c:	bne	2091c <_start@@Base+0xb58c>
   22d70:	ldr	r4, [sp, #28]
   22d74:	mov	r1, sl
   22d78:	mov	r2, r8
   22d7c:	mov	r0, r9
   22d80:	mov	r3, r4
   22d84:	bl	1934c <_start@@Base+0x3fbc>
   22d88:	ldr	r3, [sp, #336]	; 0x150
   22d8c:	mov	sl, r0
   22d90:	cmp	r3, #0
   22d94:	beq	238cc <_start@@Base+0xe53c>
   22d98:	ldr	r3, [pc, #-1948]	; 22604 <_start@@Base+0xd274>
   22d9c:	strd	r6, [sp, #16]
   22da0:	vldr	d8, [pc, #984]	; 23180 <_start@@Base+0xddf0>
   22da4:	add	r3, pc, r3
   22da8:	add	fp, r3, #636	; 0x27c
   22dac:	mov	r7, fp
   22db0:	mov	fp, r4
   22db4:	b	22de4 <_start@@Base+0xda54>
   22db8:	vldr	d7, [sp, #360]	; 0x168
   22dbc:	mov	r1, r0
   22dc0:	mov	r3, fp
   22dc4:	mov	r2, r8
   22dc8:	mov	r0, r9
   22dcc:	vstr	d7, [r5]
   22dd0:	bl	1c2f8 <_start@@Base+0x6f68>
   22dd4:	ldr	r3, [sp, #336]	; 0x150
   22dd8:	mov	sl, r0
   22ddc:	cmp	r3, #0
   22de0:	beq	238c8 <_start@@Base+0xe538>
   22de4:	mov	r1, #1
   22de8:	ldr	r0, [r9]
   22dec:	add	r4, sp, #360	; 0x168
   22df0:	vstr	d8, [sp, #360]	; 0x168
   22df4:	bl	26c80 <flatcc_builder_extend_vector@@Base>
   22df8:	subs	r5, r0, #0
   22dfc:	mov	r1, sl
   22e00:	mov	r3, r4
   22e04:	mov	r2, r8
   22e08:	mov	r0, r9
   22e0c:	beq	2091c <_start@@Base+0xb58c>
   22e10:	bl	2df28 <flatcc_json_parser_double@@Base>
   22e14:	cmp	r0, sl
   22e18:	bne	22db8 <_start@@Base+0xda28>
   22e1c:	mov	r3, r7
   22e20:	mov	r2, r8
   22e24:	str	r4, [sp]
   22e28:	mov	r1, sl
   22e2c:	mov	r0, r9
   22e30:	bl	195d8 <_start@@Base+0x4248>
   22e34:	cmp	r8, r0
   22e38:	cmpne	r0, sl
   22e3c:	bne	22db8 <_start@@Base+0xda28>
   22e40:	b	20bf8 <_start@@Base+0xb868>
   22e44:	mov	r1, sl
   22e48:	mov	r2, r8
   22e4c:	mov	r0, r9
   22e50:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22e54:	mov	sl, r0
   22e58:	b	1ff4c <_start@@Base+0xabbc>
   22e5c:	ldr	r0, [r9]
   22e60:	bl	285b4 <flatcc_builder_end_vector@@Base>
   22e64:	cmp	r0, #0
   22e68:	str	r0, [sp, #340]	; 0x154
   22e6c:	beq	2091c <_start@@Base+0xb58c>
   22e70:	mov	r1, #31
   22e74:	ldr	r0, [r9]
   22e78:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   22e7c:	cmp	r0, #0
   22e80:	beq	2091c <_start@@Base+0xb58c>
   22e84:	ldr	r3, [sp, #340]	; 0x154
   22e88:	str	r3, [r0]
   22e8c:	b	1ff4c <_start@@Base+0xabbc>
   22e90:	mov	fp, r8
   22e94:	b	2034c <_start@@Base+0xafbc>
   22e98:	ldrd	r6, [sp, #16]
   22e9c:	mov	r0, sl
   22ea0:	mov	sl, r0
   22ea4:	mov	r1, sl
   22ea8:	mov	r3, #33	; 0x21
   22eac:	mov	r2, r8
   22eb0:	mov	r0, r9
   22eb4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   22eb8:	ldr	r3, [sp, #340]	; 0x154
   22ebc:	mov	sl, r0
   22ec0:	cmp	r3, #0
   22ec4:	beq	2091c <_start@@Base+0xb58c>
   22ec8:	mov	r1, #14
   22ecc:	ldr	r0, [r9]
   22ed0:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   22ed4:	cmp	r0, #0
   22ed8:	beq	2091c <_start@@Base+0xb58c>
   22edc:	ldr	r3, [sp, #340]	; 0x154
   22ee0:	str	r3, [r0]
   22ee4:	b	1ff4c <_start@@Base+0xabbc>
   22ee8:	ldrd	r6, [sp, #64]	; 0x40
   22eec:	ldr	r0, [r9]
   22ef0:	bl	285b4 <flatcc_builder_end_vector@@Base>
   22ef4:	cmp	r0, #0
   22ef8:	str	r0, [sp, #340]	; 0x154
   22efc:	beq	2091c <_start@@Base+0xb58c>
   22f00:	mov	r1, #30
   22f04:	ldr	r0, [r9]
   22f08:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   22f0c:	cmp	r0, #0
   22f10:	beq	2091c <_start@@Base+0xb58c>
   22f14:	ldr	r3, [sp, #340]	; 0x154
   22f18:	str	r3, [r0]
   22f1c:	b	1ff4c <_start@@Base+0xabbc>
   22f20:	ldr	r3, [sp, #356]	; 0x164
   22f24:	cmp	r3, #0
   22f28:	bne	23750 <_start@@Base+0xe3c0>
   22f2c:	add	r3, sp, #360	; 0x168
   22f30:	mov	r1, #0
   22f34:	ldrd	r2, [r3]
   22f38:	movw	r0, #65535	; 0xffff
   22f3c:	cmp	r3, r1
   22f40:	cmpeq	r2, r0
   22f44:	bhi	237e4 <_start@@Base+0xe454>
   22f48:	add	r3, sp, #332	; 0x14c
   22f4c:	uxth	r2, r2
   22f50:	add	r3, r3, #2
   22f54:	mov	sl, fp
   22f58:	strh	r2, [r3]
   22f5c:	b	20390 <_start@@Base+0xb000>
   22f60:	mov	r1, sl
   22f64:	mov	r2, r8
   22f68:	mov	r0, r9
   22f6c:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22f70:	mov	sl, r0
   22f74:	b	1ff4c <_start@@Base+0xabbc>
   22f78:	mov	r1, r4
   22f7c:	mov	r2, r8
   22f80:	mov	r0, r9
   22f84:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22f88:	mov	sl, r0
   22f8c:	b	1ff4c <_start@@Base+0xabbc>
   22f90:	mov	r4, r0
   22f94:	mov	r1, r4
   22f98:	mov	r2, r8
   22f9c:	mov	r0, r9
   22fa0:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   22fa4:	mov	sl, r0
   22fa8:	b	1ff4c <_start@@Base+0xabbc>
   22fac:	ldrd	r6, [sp, #16]
   22fb0:	ldr	r0, [r9]
   22fb4:	bl	285b4 <flatcc_builder_end_vector@@Base>
   22fb8:	cmp	r0, #0
   22fbc:	str	r0, [sp, #340]	; 0x154
   22fc0:	beq	2091c <_start@@Base+0xb58c>
   22fc4:	mov	r1, #24
   22fc8:	ldr	r0, [r9]
   22fcc:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   22fd0:	cmp	r0, #0
   22fd4:	beq	2091c <_start@@Base+0xb58c>
   22fd8:	ldr	r3, [sp, #340]	; 0x154
   22fdc:	str	r3, [r0]
   22fe0:	b	1ff4c <_start@@Base+0xabbc>
   22fe4:	add	r1, r1, #1
   22fe8:	mov	r2, r8
   22fec:	mov	r0, r9
   22ff0:	bl	17470 <_start@@Base+0x20e0>
   22ff4:	str	r0, [sp, #64]	; 0x40
   22ff8:	b	213ec <_start@@Base+0xc05c>
   22ffc:	add	r1, r1, #1
   23000:	mov	r2, r8
   23004:	mov	r0, r9
   23008:	bl	17470 <_start@@Base+0x20e0>
   2300c:	str	r0, [sp, #64]	; 0x40
   23010:	b	21808 <_start@@Base+0xc478>
   23014:	cmp	r3, #0
   23018:	cmpeq	r2, #127	; 0x7f
   2301c:	sxtbls	r2, r2
   23020:	strbls	r2, [sp, #352]	; 0x160
   23024:	bls	1f874 <_start@@Base+0xa4e4>
   23028:	mov	r1, r0
   2302c:	mov	r3, #7
   23030:	mov	r2, r8
   23034:	mov	r0, r9
   23038:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2303c:	mov	sl, r0
   23040:	b	22cb8 <_start@@Base+0xd928>
   23044:	mov	r4, r0
   23048:	mov	r1, r4
   2304c:	mov	r2, r8
   23050:	mov	r0, r9
   23054:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   23058:	mov	sl, r0
   2305c:	b	1ff4c <_start@@Base+0xabbc>
   23060:	mov	r1, r4
   23064:	mov	r2, r8
   23068:	mov	r0, r9
   2306c:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   23070:	mov	sl, r0
   23074:	b	1ff4c <_start@@Base+0xabbc>
   23078:	ldr	r3, [pc, #264]	; 23188 <_start@@Base+0xddf8>
   2307c:	mov	r1, r0
   23080:	mov	r2, r8
   23084:	mov	r0, r9
   23088:	str	fp, [sp]
   2308c:	add	r3, pc, r3
   23090:	add	r3, r3, #380	; 0x17c
   23094:	bl	19420 <_start@@Base+0x4090>
   23098:	cmp	r8, r0
   2309c:	cmpne	sl, r0
   230a0:	beq	23808 <_start@@Base+0xe478>
   230a4:	mov	sl, r0
   230a8:	b	21bf0 <_start@@Base+0xc860>
   230ac:	mov	r1, sl
   230b0:	mov	r2, r8
   230b4:	mov	r0, r9
   230b8:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   230bc:	mov	sl, r0
   230c0:	b	1ff4c <_start@@Base+0xabbc>
   230c4:	ldr	r3, [pc, #192]	; 2318c <_start@@Base+0xddfc>
   230c8:	mov	r1, r0
   230cc:	mov	r2, r8
   230d0:	mov	r0, r9
   230d4:	str	r5, [sp]
   230d8:	add	r3, pc, r3
   230dc:	add	r3, r3, #504	; 0x1f8
   230e0:	bl	19420 <_start@@Base+0x4090>
   230e4:	cmp	r8, r0
   230e8:	cmpne	sl, r0
   230ec:	beq	20bf8 <_start@@Base+0xb868>
   230f0:	mov	sl, r0
   230f4:	b	20c94 <_start@@Base+0xb904>
   230f8:	ldr	r3, [pc, #144]	; 23190 <_start@@Base+0xde00>
   230fc:	mov	r1, r0
   23100:	mov	r2, r8
   23104:	mov	r0, r9
   23108:	str	fp, [sp]
   2310c:	add	r3, pc, r3
   23110:	add	r3, r3, #392	; 0x188
   23114:	bl	19420 <_start@@Base+0x4090>
   23118:	cmp	r8, r0
   2311c:	cmpne	sl, r0
   23120:	beq	23808 <_start@@Base+0xe478>
   23124:	mov	sl, r0
   23128:	b	21a48 <_start@@Base+0xc6b8>
   2312c:	mov	r3, #29
   23130:	mov	r2, r9
   23134:	mov	r0, fp
   23138:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2313c:	mov	sl, r0
   23140:	b	1f66c <_start@@Base+0xa2dc>
   23144:	ldrb	r1, [r0, #1]
   23148:	add	r2, r0, #1
   2314c:	cmp	r1, #114	; 0x72
   23150:	bne	1f970 <_start@@Base+0xa5e0>
   23154:	ldrb	r1, [r2, #1]!
   23158:	cmp	r1, #117	; 0x75
   2315c:	bne	1f970 <_start@@Base+0xa5e0>
   23160:	ldrb	r2, [r2, #1]
   23164:	cmp	r2, #101	; 0x65
   23168:	moveq	r3, #1
   2316c:	addeq	sl, r0, #4
   23170:	strbeq	r3, [sp, #352]	; 0x160
   23174:	bne	1f970 <_start@@Base+0xa5e0>
   23178:	b	2173c <_start@@Base+0xc3ac>
   2317c:	nop	{0}
	...
   23188:	strdeq	r1, [r3], -r4
   2318c:	andeq	r1, r3, r8, lsr #31
   23190:	andeq	r1, r3, r4, ror pc
   23194:	andeq	r1, r3, r4, lsr #23
   23198:	andeq	r1, r3, r8, ror #18
   2319c:			; <UNDEFINED> instruction: 0x000318bc
   231a0:	andeq	r1, r3, ip, lsl #14
   231a4:	andeq	r1, r3, ip, ror r6
   231a8:	andeq	r1, r3, r0, lsl r6
   231ac:	andeq	r1, r3, r8, lsr r5
   231b0:	andeq	r1, r3, ip, ror #9
   231b4:			; <UNDEFINED> instruction: 0x000314b8
   231b8:	andeq	r1, r3, r4, ror #8
   231bc:	andeq	r1, r3, r0, lsr r4
   231c0:	ldr	r3, [sp, #356]	; 0x164
   231c4:	cmp	r3, #0
   231c8:	str	r3, [sp, #16]
   231cc:	bne	23934 <_start@@Base+0xe5a4>
   231d0:	add	r3, sp, #360	; 0x168
   231d4:	ldrd	r2, [r3]
   231d8:	cmp	r3, #0
   231dc:	cmpeq	r2, #255	; 0xff
   231e0:	bhi	23994 <_start@@Base+0xe604>
   231e4:	uxtb	r3, r2
   231e8:	mov	sl, r0
   231ec:	adds	r3, r3, #0
   231f0:	movne	r3, #1
   231f4:	strb	r3, [sp, #352]	; 0x160
   231f8:	b	21734 <_start@@Base+0xc3a4>
   231fc:	mov	r4, r0
   23200:	mov	r1, r4
   23204:	mov	r2, r8
   23208:	mov	r0, r9
   2320c:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   23210:	mov	sl, r0
   23214:	b	1ff4c <_start@@Base+0xabbc>
   23218:	ldrd	r6, [sp, #64]	; 0x40
   2321c:	ldr	r3, [r9, #24]
   23220:	cmp	r3, #0
   23224:	bne	21e7c <_start@@Base+0xcaec>
   23228:	ldr	r0, [r9]
   2322c:	bl	2825c <flatcc_builder_end_table@@Base>
   23230:	cmp	r0, #0
   23234:	str	r0, [sp, #340]	; 0x154
   23238:	bne	21ea0 <_start@@Base+0xcb10>
   2323c:	b	21e7c <_start@@Base+0xcaec>
   23240:	mov	r4, r0
   23244:	mov	r1, r4
   23248:	mov	r2, r8
   2324c:	mov	r0, r9
   23250:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   23254:	mov	sl, r0
   23258:	b	1ff4c <_start@@Base+0xabbc>
   2325c:	mov	r4, r0
   23260:	mov	r1, r4
   23264:	mov	r2, r8
   23268:	mov	r0, r9
   2326c:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   23270:	mov	sl, r0
   23274:	b	1ff4c <_start@@Base+0xabbc>
   23278:	mov	r3, #0
   2327c:	add	sl, sl, #8
   23280:	mov	r1, r8
   23284:	mov	r0, sl
   23288:	str	r3, [sp, #296]	; 0x128
   2328c:	bl	15480 <_start@@Base+0xf0>
   23290:	and	r3, r1, #-16777216	; 0xff000000
   23294:	str	r3, [sp, #300]	; 0x12c
   23298:	add	r3, sp, #296	; 0x128
   2329c:	ldrd	r2, [r3]
   232a0:	cmp	r3, #1627389952	; 0x61000000
   232a4:	cmpeq	r2, #0
   232a8:	bne	23738 <_start@@Base+0xe3a8>
   232ac:	sub	r3, r8, sl
   232b0:	cmp	r3, #1
   232b4:	ble	239c0 <_start@@Base+0xe630>
   232b8:	mov	r3, #1
   232bc:	mov	r2, r8
   232c0:	mov	r1, sl
   232c4:	mov	r0, r9
   232c8:	bl	1924c <_start@@Base+0x3ebc>
   232cc:	cmp	sl, r0
   232d0:	mov	r4, r0
   232d4:	beq	239c0 <_start@@Base+0xe630>
   232d8:	mov	sl, #0
   232dc:	add	r5, sp, #360	; 0x168
   232e0:	mov	fp, #0
   232e4:	mov	r1, r0
   232e8:	mov	r3, r5
   232ec:	mov	r2, r8
   232f0:	mov	r0, r9
   232f4:	strd	sl, [r5]
   232f8:	bl	17f20 <_start@@Base+0x2b90>
   232fc:	cmp	r0, r4
   23300:	mov	sl, r0
   23304:	beq	23bb4 <_start@@Base+0xe824>
   23308:	add	r3, sp, #360	; 0x168
   2330c:	ldrd	r2, [r3]
   23310:	orrs	r3, r2, r3
   23314:	bne	23324 <_start@@Base+0xdf94>
   23318:	ldr	r3, [r9, #8]
   2331c:	tst	r3, #2
   23320:	beq	1ff4c <_start@@Base+0xabbc>
   23324:	mov	r3, #8
   23328:	mov	r1, #22
   2332c:	ldr	r0, [r9]
   23330:	mov	r2, r3
   23334:	bl	293ac <flatcc_builder_table_add@@Base>
   23338:	cmp	r0, #0
   2333c:	beq	23b24 <_start@@Base+0xe794>
   23340:	add	r3, sp, #360	; 0x168
   23344:	ldrd	r2, [r3]
   23348:	strd	r2, [r0]
   2334c:	b	1ff4c <_start@@Base+0xabbc>
   23350:	mov	r1, r0
   23354:	mov	r2, r8
   23358:	str	fp, [sp]
   2335c:	mov	r0, r9
   23360:	ldr	r3, [sp, #64]	; 0x40
   23364:	bl	1a82c <_start@@Base+0x549c>
   23368:	cmp	r8, r0
   2336c:	cmpne	sl, r0
   23370:	beq	23c70 <_start@@Base+0xe8e0>
   23374:	mov	sl, r0
   23378:	b	22b04 <_start@@Base+0xd774>
   2337c:	ldrd	r6, [sp, #16]
   23380:	ldr	r3, [r9, #24]
   23384:	cmp	r3, #0
   23388:	bne	22ea4 <_start@@Base+0xdb14>
   2338c:	ldr	r0, [r9]
   23390:	bl	2825c <flatcc_builder_end_table@@Base>
   23394:	cmp	r0, #0
   23398:	str	r0, [sp, #340]	; 0x154
   2339c:	bne	22ec8 <_start@@Base+0xdb38>
   233a0:	b	22ea4 <_start@@Base+0xdb14>
   233a4:	mov	sl, r4
   233a8:	b	209ac <_start@@Base+0xb61c>
   233ac:	mov	r1, sl
   233b0:	mov	r2, r8
   233b4:	mov	r0, r9
   233b8:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   233bc:	mov	sl, r0
   233c0:	b	1ff4c <_start@@Base+0xabbc>
   233c4:	ldr	r0, [r9]
   233c8:	bl	27658 <flatcc_builder_start_offset_vector@@Base>
   233cc:	cmp	r0, #0
   233d0:	bne	2091c <_start@@Base+0xb58c>
   233d4:	ldr	r5, [sp, #28]
   233d8:	mov	r1, sl
   233dc:	mov	r2, r8
   233e0:	mov	r0, r9
   233e4:	mov	r3, r5
   233e8:	bl	1934c <_start@@Base+0x3fbc>
   233ec:	ldr	r3, [sp, #336]	; 0x150
   233f0:	mov	sl, r0
   233f4:	cmp	r3, #0
   233f8:	beq	23464 <_start@@Base+0xe0d4>
   233fc:	add	r4, sp, #340	; 0x154
   23400:	mov	r1, sl
   23404:	mov	r3, r4
   23408:	mov	r2, r8
   2340c:	mov	r0, r9
   23410:	bl	1f620 <_start@@Base+0xa290>
   23414:	ldr	r3, [sp, #340]	; 0x154
   23418:	mov	sl, r0
   2341c:	mov	r1, #1
   23420:	cmp	r3, #0
   23424:	beq	2091c <_start@@Base+0xb58c>
   23428:	ldr	r0, [r9]
   2342c:	bl	26f1c <flatcc_builder_extend_offset_vector@@Base>
   23430:	subs	ip, r0, #0
   23434:	mov	r3, r5
   23438:	mov	r2, r8
   2343c:	mov	r1, sl
   23440:	mov	r0, r9
   23444:	beq	2091c <_start@@Base+0xb58c>
   23448:	ldr	lr, [sp, #340]	; 0x154
   2344c:	str	lr, [ip]
   23450:	bl	1c2f8 <_start@@Base+0x6f68>
   23454:	ldr	r3, [sp, #336]	; 0x150
   23458:	mov	sl, r0
   2345c:	cmp	r3, #0
   23460:	bne	23400 <_start@@Base+0xe070>
   23464:	ldr	r0, [r9]
   23468:	bl	286e0 <flatcc_builder_end_offset_vector@@Base>
   2346c:	cmp	r0, #0
   23470:	str	r0, [sp, #340]	; 0x154
   23474:	beq	2091c <_start@@Base+0xb58c>
   23478:	mov	r1, #11
   2347c:	ldr	r0, [r9]
   23480:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   23484:	cmp	r0, #0
   23488:	beq	2091c <_start@@Base+0xb58c>
   2348c:	ldr	r3, [sp, #340]	; 0x154
   23490:	str	r3, [r0]
   23494:	b	1ff4c <_start@@Base+0xabbc>
   23498:	mov	r4, r0
   2349c:	mov	r1, r4
   234a0:	mov	r2, r8
   234a4:	mov	r0, r9
   234a8:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   234ac:	mov	sl, r0
   234b0:	b	1ff4c <_start@@Base+0xabbc>
   234b4:	ldrb	r3, [fp, #2]
   234b8:	cmp	r3, #32
   234bc:	bls	22208 <_start@@Base+0xce78>
   234c0:	add	sl, fp, #2
   234c4:	b	1ff4c <_start@@Base+0xabbc>
   234c8:	ldr	r3, [pc, #-828]	; 23194 <_start@@Base+0xde04>
   234cc:	mov	r1, r0
   234d0:	mov	r2, r8
   234d4:	mov	r0, r9
   234d8:	str	r5, [sp]
   234dc:	add	r3, pc, r3
   234e0:	add	r3, r3, #492	; 0x1ec
   234e4:	bl	19420 <_start@@Base+0x4090>
   234e8:	cmp	r8, r0
   234ec:	cmpne	sl, r0
   234f0:	beq	23bfc <_start@@Base+0xe86c>
   234f4:	mov	sl, r0
   234f8:	b	21664 <_start@@Base+0xc2d4>
   234fc:	add	sl, sl, #8
   23500:	mov	r1, r8
   23504:	mov	r0, sl
   23508:	mov	fp, #0
   2350c:	bl	15480 <_start@@Base+0xf0>
   23510:	and	r3, r1, #-16777216	; 0xff000000
   23514:	str	fp, [sp, #312]	; 0x138
   23518:	str	r3, [sp, #316]	; 0x13c
   2351c:	add	r3, sp, #312	; 0x138
   23520:	ldrd	r2, [r3]
   23524:	cmp	r3, #1627389952	; 0x61000000
   23528:	cmpeq	r2, #0
   2352c:	bne	2387c <_start@@Base+0xe4ec>
   23530:	sub	r3, r8, sl
   23534:	cmp	r3, #1
   23538:	ble	23b68 <_start@@Base+0xe7d8>
   2353c:	mov	r3, #1
   23540:	mov	r2, r8
   23544:	mov	r1, sl
   23548:	mov	r0, r9
   2354c:	bl	1924c <_start@@Base+0x3ebc>
   23550:	cmp	sl, r0
   23554:	mov	r4, r0
   23558:	beq	23b68 <_start@@Base+0xe7d8>
   2355c:	add	r5, sp, #360	; 0x168
   23560:	mov	r1, r0
   23564:	str	fp, [sp, #360]	; 0x168
   23568:	mov	r2, r8
   2356c:	mov	r3, r5
   23570:	mov	r0, r9
   23574:	bl	181f8 <_start@@Base+0x2e68>
   23578:	cmp	r0, r4
   2357c:	mov	sl, r0
   23580:	beq	23c08 <_start@@Base+0xe878>
   23584:	ldr	r3, [sp, #360]	; 0x168
   23588:	cmp	r3, #0
   2358c:	bne	2359c <_start@@Base+0xe20c>
   23590:	ldr	r3, [r9, #8]
   23594:	tst	r3, #2
   23598:	beq	1ff4c <_start@@Base+0xabbc>
   2359c:	mov	r3, #4
   235a0:	mov	r1, #21
   235a4:	ldr	r0, [r9]
   235a8:	mov	r2, r3
   235ac:	bl	293ac <flatcc_builder_table_add@@Base>
   235b0:	cmp	r0, #0
   235b4:	beq	23b24 <_start@@Base+0xe794>
   235b8:	ldr	r3, [sp, #360]	; 0x168
   235bc:	str	r3, [r0]
   235c0:	b	1ff4c <_start@@Base+0xabbc>
   235c4:	mov	sl, r0
   235c8:	mov	r3, #0
   235cc:	add	sl, sl, #8
   235d0:	mov	r1, r8
   235d4:	mov	r0, sl
   235d8:	str	r3, [sp, #320]	; 0x140
   235dc:	bl	15480 <_start@@Base+0xf0>
   235e0:	and	r3, r1, #-16777216	; 0xff000000
   235e4:	str	r3, [sp, #324]	; 0x144
   235e8:	add	r3, sp, #320	; 0x140
   235ec:	ldrd	r2, [r3]
   235f0:	cmp	r3, #1627389952	; 0x61000000
   235f4:	cmpeq	r2, #0
   235f8:	bne	23864 <_start@@Base+0xe4d4>
   235fc:	sub	r3, r8, sl
   23600:	cmp	r3, #1
   23604:	ble	239d8 <_start@@Base+0xe648>
   23608:	mov	r3, #1
   2360c:	mov	r2, r8
   23610:	mov	r1, sl
   23614:	mov	r0, r9
   23618:	bl	1924c <_start@@Base+0x3ebc>
   2361c:	cmp	sl, r0
   23620:	mov	r4, r0
   23624:	beq	239d8 <_start@@Base+0xe648>
   23628:	mov	sl, #0
   2362c:	add	r5, sp, #360	; 0x168
   23630:	mov	fp, #0
   23634:	mov	r1, r0
   23638:	mov	r3, r5
   2363c:	mov	r2, r8
   23640:	mov	r0, r9
   23644:	strd	sl, [r5]
   23648:	bl	18150 <_start@@Base+0x2dc0>
   2364c:	cmp	r0, r4
   23650:	mov	sl, r0
   23654:	beq	23c3c <_start@@Base+0xe8ac>
   23658:	add	r3, sp, #360	; 0x168
   2365c:	ldrd	r2, [r3]
   23660:	orrs	r3, r2, r3
   23664:	bne	23674 <_start@@Base+0xe2e4>
   23668:	ldr	r3, [r9, #8]
   2366c:	tst	r3, #2
   23670:	beq	1ff4c <_start@@Base+0xabbc>
   23674:	mov	r3, #8
   23678:	mov	r1, #23
   2367c:	ldr	r0, [r9]
   23680:	mov	r2, r3
   23684:	bl	293ac <flatcc_builder_table_add@@Base>
   23688:	cmp	r0, #0
   2368c:	beq	23b24 <_start@@Base+0xe794>
   23690:	add	r3, sp, #360	; 0x168
   23694:	ldrd	r2, [r3]
   23698:	strd	r2, [r0]
   2369c:	b	1ff4c <_start@@Base+0xabbc>
   236a0:	mov	r1, sl
   236a4:	mov	r2, r8
   236a8:	mov	r0, r9
   236ac:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   236b0:	mov	sl, r0
   236b4:	b	1ff4c <_start@@Base+0xabbc>
   236b8:	mov	fp, r9
   236bc:	mov	sl, r4
   236c0:	mov	r9, r8
   236c4:	b	1f66c <_start@@Base+0xa2dc>
   236c8:	ldrd	r6, [sp, #16]
   236cc:	mov	sl, r0
   236d0:	ldr	r0, [r9]
   236d4:	bl	285b4 <flatcc_builder_end_vector@@Base>
   236d8:	cmp	r0, #0
   236dc:	str	r0, [sp, #340]	; 0x154
   236e0:	beq	2091c <_start@@Base+0xb58c>
   236e4:	mov	r1, #32
   236e8:	ldr	r0, [r9]
   236ec:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   236f0:	cmp	r0, #0
   236f4:	beq	2091c <_start@@Base+0xb58c>
   236f8:	ldr	r3, [sp, #340]	; 0x154
   236fc:	str	r3, [r0]
   23700:	b	1ff4c <_start@@Base+0xabbc>
   23704:	ldr	r3, [pc, #-1396]	; 23198 <_start@@Base+0xde08>
   23708:	mov	r1, r0
   2370c:	mov	r2, r8
   23710:	mov	r0, r9
   23714:	str	r5, [sp]
   23718:	add	r3, pc, r3
   2371c:	add	r3, r3, #328	; 0x148
   23720:	bl	19d90 <_start@@Base+0x4a00>
   23724:	cmp	r8, r0
   23728:	cmpne	sl, r0
   2372c:	beq	20bf8 <_start@@Base+0xb868>
   23730:	mov	sl, r0
   23734:	b	20d70 <_start@@Base+0xb9e0>
   23738:	mov	r1, sl
   2373c:	mov	r2, r8
   23740:	mov	r0, r9
   23744:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   23748:	mov	sl, r0
   2374c:	b	1ff4c <_start@@Base+0xabbc>
   23750:	mov	r1, r0
   23754:	mov	r3, #8
   23758:	mov	r2, r8
   2375c:	mov	r0, r9
   23760:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   23764:	mov	sl, r0
   23768:	cmp	r4, sl
   2376c:	bne	20384 <_start@@Base+0xaff4>
   23770:	mov	fp, r4
   23774:	b	2034c <_start@@Base+0xafbc>
   23778:	ldrd	r6, [sp, #64]	; 0x40
   2377c:	ldr	r0, [r9]
   23780:	bl	285b4 <flatcc_builder_end_vector@@Base>
   23784:	cmp	r0, #0
   23788:	str	r0, [sp, #340]	; 0x154
   2378c:	beq	2091c <_start@@Base+0xb58c>
   23790:	mov	r1, #5
   23794:	ldr	r0, [r9]
   23798:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   2379c:	cmp	r0, #0
   237a0:	beq	2091c <_start@@Base+0xb58c>
   237a4:	ldr	r3, [sp, #340]	; 0x154
   237a8:	str	r3, [r0]
   237ac:	b	1ff4c <_start@@Base+0xabbc>
   237b0:	ldr	r3, [pc, #-1564]	; 2319c <_start@@Base+0xde0c>
   237b4:	mov	r1, r0
   237b8:	mov	r2, r8
   237bc:	mov	r0, r9
   237c0:	str	r5, [sp]
   237c4:	add	r3, pc, r3
   237c8:	add	r3, r3, #528	; 0x210
   237cc:	bl	19fc4 <_start@@Base+0x4c34>
   237d0:	cmp	r8, r0
   237d4:	cmpne	sl, r0
   237d8:	beq	23bfc <_start@@Base+0xe86c>
   237dc:	mov	sl, r0
   237e0:	b	20824 <_start@@Base+0xb494>
   237e4:	mov	r1, fp
   237e8:	mov	r3, #7
   237ec:	mov	r2, r8
   237f0:	mov	r0, r9
   237f4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   237f8:	mov	sl, r0
   237fc:	b	23768 <_start@@Base+0xe3d8>
   23800:	ldrd	r6, [sp, #16]
   23804:	b	22ea4 <_start@@Base+0xdb14>
   23808:	mov	r1, r0
   2380c:	mov	r3, #33	; 0x21
   23810:	mov	r2, r8
   23814:	mov	r0, r9
   23818:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2381c:	mov	sl, r0
   23820:	b	1ff4c <_start@@Base+0xabbc>
   23824:	mov	r4, r0
   23828:	mov	r1, r4
   2382c:	mov	r2, r8
   23830:	mov	r0, r9
   23834:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   23838:	mov	sl, r0
   2383c:	b	1ff4c <_start@@Base+0xabbc>
   23840:	mov	fp, r9
   23844:	mov	r9, r8
   23848:	b	1ffc8 <_start@@Base+0xac38>
   2384c:	mov	r1, sl
   23850:	mov	r2, r8
   23854:	mov	r0, r9
   23858:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   2385c:	mov	sl, r0
   23860:	b	1ff4c <_start@@Base+0xabbc>
   23864:	mov	r1, sl
   23868:	mov	r2, r8
   2386c:	mov	r0, r9
   23870:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   23874:	mov	sl, r0
   23878:	b	1ff4c <_start@@Base+0xabbc>
   2387c:	mov	r1, sl
   23880:	mov	r2, r8
   23884:	mov	r0, r9
   23888:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   2388c:	mov	sl, r0
   23890:	b	1ff4c <_start@@Base+0xabbc>
   23894:	ldr	r0, [r9]
   23898:	bl	286e0 <flatcc_builder_end_offset_vector@@Base>
   2389c:	cmp	r0, #0
   238a0:	str	r0, [sp, #340]	; 0x154
   238a4:	beq	2091c <_start@@Base+0xb58c>
   238a8:	mov	r1, #28
   238ac:	ldr	r0, [r9]
   238b0:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   238b4:	cmp	r0, #0
   238b8:	beq	2091c <_start@@Base+0xb58c>
   238bc:	ldr	r3, [sp, #340]	; 0x154
   238c0:	str	r3, [r0]
   238c4:	b	1ff4c <_start@@Base+0xabbc>
   238c8:	ldrd	r6, [sp, #16]
   238cc:	ldr	r0, [r9]
   238d0:	bl	285b4 <flatcc_builder_end_vector@@Base>
   238d4:	cmp	r0, #0
   238d8:	str	r0, [sp, #340]	; 0x154
   238dc:	beq	2091c <_start@@Base+0xb58c>
   238e0:	mov	r1, #33	; 0x21
   238e4:	ldr	r0, [r9]
   238e8:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   238ec:	cmp	r0, #0
   238f0:	beq	2091c <_start@@Base+0xb58c>
   238f4:	ldr	r3, [sp, #340]	; 0x154
   238f8:	str	r3, [r0]
   238fc:	b	1ff4c <_start@@Base+0xabbc>
   23900:	ldr	r0, [r9]
   23904:	bl	286e0 <flatcc_builder_end_offset_vector@@Base>
   23908:	cmp	r0, #0
   2390c:	str	r0, [sp, #340]	; 0x154
   23910:	beq	2091c <_start@@Base+0xb58c>
   23914:	mov	r1, #10
   23918:	ldr	r0, [r9]
   2391c:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   23920:	cmp	r0, #0
   23924:	beq	2091c <_start@@Base+0xb58c>
   23928:	ldr	r3, [sp, #340]	; 0x154
   2392c:	str	r3, [r0]
   23930:	b	1ff4c <_start@@Base+0xabbc>
   23934:	mov	r1, r0
   23938:	mov	r3, #8
   2393c:	mov	r2, r8
   23940:	mov	r0, r9
   23944:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   23948:	cmp	r4, r0
   2394c:	mov	sl, r0
   23950:	strb	fp, [sp, #352]	; 0x160
   23954:	bne	1f998 <_start@@Base+0xa608>
   23958:	mov	r5, r4
   2395c:	b	216fc <_start@@Base+0xc36c>
   23960:	ldr	r3, [pc, #-1992]	; 231a0 <_start@@Base+0xde10>
   23964:	mov	r1, r0
   23968:	mov	r2, r8
   2396c:	mov	r0, r9
   23970:	str	r5, [sp]
   23974:	add	r3, pc, r3
   23978:	add	r3, r3, #552	; 0x228
   2397c:	bl	1a82c <_start@@Base+0x549c>
   23980:	cmp	r8, r0
   23984:	cmpne	sl, r0
   23988:	beq	23bfc <_start@@Base+0xe86c>
   2398c:	mov	sl, r0
   23990:	b	21128 <_start@@Base+0xbd98>
   23994:	mov	r1, r0
   23998:	mov	r3, #7
   2399c:	mov	r2, r8
   239a0:	mov	r0, r9
   239a4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   239a8:	ldr	r3, [sp, #16]
   239ac:	cmp	r4, r0
   239b0:	mov	sl, r0
   239b4:	strb	r3, [sp, #352]	; 0x160
   239b8:	bne	1f998 <_start@@Base+0xa608>
   239bc:	b	23958 <_start@@Base+0xe5c8>
   239c0:	mov	r1, sl
   239c4:	mov	r2, r8
   239c8:	mov	r0, r9
   239cc:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   239d0:	mov	sl, r0
   239d4:	b	1ff4c <_start@@Base+0xabbc>
   239d8:	mov	r1, sl
   239dc:	mov	r2, r8
   239e0:	mov	r0, r9
   239e4:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   239e8:	mov	sl, r0
   239ec:	b	1ff4c <_start@@Base+0xabbc>
   239f0:	ldr	r3, [pc, #-2132]	; 231a4 <_start@@Base+0xde14>
   239f4:	mov	r2, r8
   239f8:	mov	r1, r4
   239fc:	mov	r0, r9
   23a00:	str	r5, [sp]
   23a04:	add	r3, pc, r3
   23a08:	add	r3, r3, #600	; 0x258
   23a0c:	bl	19980 <_start@@Base+0x45f0>
   23a10:	cmp	r8, r0
   23a14:	cmpne	r4, r0
   23a18:	mov	sl, r0
   23a1c:	bne	222d4 <_start@@Base+0xcf44>
   23a20:	b	2091c <_start@@Base+0xb58c>
   23a24:	mov	r2, #1
   23a28:	mvn	r3, #0
   23a2c:	mov	r1, r2
   23a30:	bl	275c8 <flatcc_builder_start_vector@@Base>
   23a34:	subs	r4, r0, #0
   23a38:	bne	2091c <_start@@Base+0xb58c>
   23a3c:	ldr	r5, [sp, #28]
   23a40:	mov	r1, sl
   23a44:	mov	r2, r8
   23a48:	mov	r0, r9
   23a4c:	mov	r3, r5
   23a50:	bl	1934c <_start@@Base+0x3fbc>
   23a54:	ldr	r3, [sp, #336]	; 0x150
   23a58:	mov	sl, r0
   23a5c:	cmp	r3, #0
   23a60:	beq	23bec <_start@@Base+0xe85c>
   23a64:	ldr	r3, [pc, #-2244]	; 231a8 <_start@@Base+0xde18>
   23a68:	str	r4, [sp, #16]
   23a6c:	strd	r6, [sp, #64]	; 0x40
   23a70:	add	r3, pc, r3
   23a74:	add	fp, r3, #624	; 0x270
   23a78:	mov	r7, fp
   23a7c:	mov	fp, r5
   23a80:	b	23ab0 <_start@@Base+0xe720>
   23a84:	ldrb	ip, [sp, #360]	; 0x168
   23a88:	mov	r1, r0
   23a8c:	mov	r3, fp
   23a90:	mov	r2, r8
   23a94:	mov	r0, r9
   23a98:	strb	ip, [r5]
   23a9c:	bl	1c2f8 <_start@@Base+0x6f68>
   23aa0:	ldr	r3, [sp, #336]	; 0x150
   23aa4:	mov	sl, r0
   23aa8:	cmp	r3, #0
   23aac:	beq	23be8 <_start@@Base+0xe858>
   23ab0:	ldr	r3, [sp, #16]
   23ab4:	mov	r1, #1
   23ab8:	add	r4, sp, #360	; 0x168
   23abc:	ldr	r0, [r9]
   23ac0:	strb	r3, [sp, #360]	; 0x168
   23ac4:	bl	26c80 <flatcc_builder_extend_vector@@Base>
   23ac8:	subs	r5, r0, #0
   23acc:	mov	r1, sl
   23ad0:	mov	r3, r4
   23ad4:	mov	r2, r8
   23ad8:	mov	r0, r9
   23adc:	beq	2091c <_start@@Base+0xb58c>
   23ae0:	bl	182c8 <_start@@Base+0x2f38>
   23ae4:	cmp	r0, sl
   23ae8:	bne	23a84 <_start@@Base+0xe6f4>
   23aec:	mov	r3, r7
   23af0:	mov	r2, r8
   23af4:	str	r4, [sp]
   23af8:	mov	r1, sl
   23afc:	mov	r0, r9
   23b00:	bl	19b88 <_start@@Base+0x47f8>
   23b04:	cmp	r8, r0
   23b08:	cmpne	r0, sl
   23b0c:	bne	23a84 <_start@@Base+0xe6f4>
   23b10:	b	20bf8 <_start@@Base+0xb868>
   23b14:	mov	fp, r9
   23b18:	mov	sl, r5
   23b1c:	mov	r9, r8
   23b20:	b	1f66c <_start@@Base+0xa2dc>
   23b24:	mov	fp, r9
   23b28:	mov	r0, sl
   23b2c:	mov	r9, r8
   23b30:	b	2313c <_start@@Base+0xddac>
   23b34:	ldr	r3, [pc, #-2448]	; 231ac <_start@@Base+0xde1c>
   23b38:	mov	r1, r0
   23b3c:	mov	r2, r8
   23b40:	mov	r0, r9
   23b44:	str	r5, [sp]
   23b48:	add	r3, pc, r3
   23b4c:	add	r3, r3, #576	; 0x240
   23b50:	bl	1a620 <_start@@Base+0x5290>
   23b54:	cmp	r8, r0
   23b58:	cmpne	sl, r0
   23b5c:	beq	23bfc <_start@@Base+0xe86c>
   23b60:	mov	sl, r0
   23b64:	b	2287c <_start@@Base+0xd4ec>
   23b68:	mov	r1, sl
   23b6c:	mov	r2, r8
   23b70:	mov	r0, r9
   23b74:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   23b78:	mov	sl, r0
   23b7c:	b	1ff4c <_start@@Base+0xabbc>
   23b80:	ldr	r3, [pc, #-2520]	; 231b0 <_start@@Base+0xde20>
   23b84:	mov	r1, r0
   23b88:	mov	r2, r8
   23b8c:	mov	r0, r9
   23b90:	str	fp, [sp]
   23b94:	add	r3, pc, r3
   23b98:	add	r3, r3, #540	; 0x21c
   23b9c:	bl	19fc4 <_start@@Base+0x4c34>
   23ba0:	cmp	r8, r0
   23ba4:	cmpne	sl, r0
   23ba8:	beq	23bfc <_start@@Base+0xe86c>
   23bac:	mov	sl, r0
   23bb0:	b	227b0 <_start@@Base+0xd420>
   23bb4:	ldr	r3, [pc, #-2568]	; 231b4 <_start@@Base+0xde24>
   23bb8:	mov	r1, r0
   23bbc:	mov	r2, r8
   23bc0:	mov	r0, r9
   23bc4:	str	r5, [sp]
   23bc8:	add	r3, pc, r3
   23bcc:	add	r3, r3, #564	; 0x234
   23bd0:	bl	1a82c <_start@@Base+0x549c>
   23bd4:	cmp	r8, r0
   23bd8:	cmpne	sl, r0
   23bdc:	beq	23bfc <_start@@Base+0xe86c>
   23be0:	mov	sl, r0
   23be4:	b	23308 <_start@@Base+0xdf78>
   23be8:	ldrd	r6, [sp, #64]	; 0x40
   23bec:	ldr	r0, [r9]
   23bf0:	bl	285b4 <flatcc_builder_end_vector@@Base>
   23bf4:	str	r0, [sp, #340]	; 0x154
   23bf8:	b	1fd00 <_start@@Base+0xa970>
   23bfc:	mov	fp, r9
   23c00:	mov	r9, r8
   23c04:	b	2313c <_start@@Base+0xddac>
   23c08:	ldr	r3, [pc, #-2648]	; 231b8 <_start@@Base+0xde28>
   23c0c:	mov	r1, r0
   23c10:	mov	r2, r8
   23c14:	mov	r0, r9
   23c18:	str	r5, [sp]
   23c1c:	add	r3, pc, r3
   23c20:	add	r3, r3, #588	; 0x24c
   23c24:	bl	1a620 <_start@@Base+0x5290>
   23c28:	cmp	r8, r0
   23c2c:	cmpne	sl, r0
   23c30:	beq	23bfc <_start@@Base+0xe86c>
   23c34:	mov	sl, r0
   23c38:	b	23584 <_start@@Base+0xe1f4>
   23c3c:	ldr	r3, [pc, #-2696]	; 231bc <_start@@Base+0xde2c>
   23c40:	mov	r1, r0
   23c44:	mov	r2, r8
   23c48:	mov	r0, r9
   23c4c:	str	r5, [sp]
   23c50:	add	r3, pc, r3
   23c54:	add	r3, r3, #612	; 0x264
   23c58:	bl	19980 <_start@@Base+0x45f0>
   23c5c:	cmp	r8, r0
   23c60:	cmpne	sl, r0
   23c64:	beq	23bfc <_start@@Base+0xe86c>
   23c68:	mov	sl, r0
   23c6c:	b	23658 <_start@@Base+0xe2c8>
   23c70:	ldrd	r6, [sp, #16]
   23c74:	b	22ea0 <_start@@Base+0xdb10>
   23c78:	mov	sl, fp
   23c7c:	b	1ff4c <_start@@Base+0xabbc>
   23c80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23c84:	mov	ip, #0
   23c88:	mov	r5, r0
   23c8c:	strd	r6, [sp, #8]
   23c90:	mov	r6, r2
   23c94:	mov	r4, r1
   23c98:	strd	r8, [sp, #16]
   23c9c:	strd	sl, [sp, #24]
   23ca0:	str	lr, [sp, #32]
   23ca4:	sub	sp, sp, #68	; 0x44
   23ca8:	ldr	r2, [sp, #104]	; 0x68
   23cac:	str	ip, [r2]
   23cb0:	cmp	r3, #4
   23cb4:	addls	pc, pc, r3, lsl #2
   23cb8:	b	245b4 <_start@@Base+0xf224>
   23cbc:	b	23d14 <_start@@Base+0xe984>
   23cc0:	b	23d44 <_start@@Base+0xe9b4>
   23cc4:	b	23d54 <_start@@Base+0xe9c4>
   23cc8:	b	23e10 <_start@@Base+0xea80>
   23ccc:	b	23cd0 <_start@@Base+0xe940>
   23cd0:	mov	r2, r6
   23cd4:	ldr	r3, [sp, #104]	; 0x68
   23cd8:	bl	1ce34 <_start@@Base+0x7aa4>
   23cdc:	ldr	r3, [r5, #24]
   23ce0:	cmp	r3, #0
   23ce4:	bne	23cf8 <_start@@Base+0xe968>
   23ce8:	ldr	r3, [sp, #104]	; 0x68
   23cec:	ldr	r3, [r3]
   23cf0:	cmp	r3, #0
   23cf4:	beq	24414 <_start@@Base+0xf084>
   23cf8:	add	sp, sp, #68	; 0x44
   23cfc:	ldrd	r4, [sp]
   23d00:	ldrd	r6, [sp, #8]
   23d04:	ldrd	r8, [sp, #16]
   23d08:	ldrd	sl, [sp, #24]
   23d0c:	add	sp, sp, #32
   23d10:	pop	{pc}		; (ldr pc, [sp], #4)
   23d14:	sub	r3, r6, r1
   23d18:	cmp	r3, #3
   23d1c:	ble	23d2c <_start@@Base+0xe99c>
   23d20:	ldrb	r3, [r1]
   23d24:	cmp	r3, #110	; 0x6e
   23d28:	beq	24544 <_start@@Base+0xf1b4>
   23d2c:	mov	r2, r6
   23d30:	mov	r1, r4
   23d34:	mov	r0, r5
   23d38:	mov	r3, #26
   23d3c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   23d40:	b	23cf8 <_start@@Base+0xe968>
   23d44:	mov	r2, r6
   23d48:	ldr	r3, [sp, #104]	; 0x68
   23d4c:	bl	1f620 <_start@@Base+0xa290>
   23d50:	b	23cdc <_start@@Base+0xe94c>
   23d54:	mov	r1, #4
   23d58:	ldr	r0, [r0]
   23d5c:	bl	27878 <flatcc_builder_start_table@@Base>
   23d60:	cmp	r0, #0
   23d64:	bne	23fd8 <_start@@Base+0xec48>
   23d68:	add	sl, sp, #48	; 0x30
   23d6c:	mov	r1, r4
   23d70:	mov	r3, sl
   23d74:	mov	r2, r6
   23d78:	mov	r0, r5
   23d7c:	bl	19178 <_start@@Base+0x3de8>
   23d80:	ldr	r3, [sp, #48]	; 0x30
   23d84:	mov	r4, r0
   23d88:	cmp	r3, #0
   23d8c:	beq	23fb0 <_start@@Base+0xec20>
   23d90:	ldr	r3, [pc, #1216]	; 24258 <_start@@Base+0xeec8>
   23d94:	str	sl, [sp, #32]
   23d98:	add	r3, pc, r3
   23d9c:	add	r3, r3, #704	; 0x2c0
   23da0:	str	r3, [sp, #36]	; 0x24
   23da4:	cmp	r6, r4
   23da8:	beq	23dd4 <_start@@Base+0xea44>
   23dac:	ldrb	r3, [r4]
   23db0:	cmp	r3, #34	; 0x22
   23db4:	moveq	r3, #0
   23db8:	addeq	r4, r4, #1
   23dbc:	streq	r3, [r5, #12]
   23dc0:	beq	23dd4 <_start@@Base+0xea44>
   23dc4:	cmp	r3, #46	; 0x2e
   23dc8:	movne	r3, #1
   23dcc:	strne	r3, [r5, #12]
   23dd0:	beq	24360 <_start@@Base+0xefd0>
   23dd4:	sub	ip, r6, r4
   23dd8:	cmp	ip, #8
   23ddc:	bhi	23e20 <_start@@Base+0xea90>
   23de0:	sub	r3, ip, #1
   23de4:	cmp	r3, #7
   23de8:	addls	pc, pc, r3, lsl #2
   23dec:	b	24120 <_start@@Base+0xed90>
   23df0:	b	24038 <_start@@Base+0xeca8>
   23df4:	b	23ffc <_start@@Base+0xec6c>
   23df8:	b	2402c <_start@@Base+0xec9c>
   23dfc:	b	24020 <_start@@Base+0xec90>
   23e00:	b	24014 <_start@@Base+0xec84>
   23e04:	b	24008 <_start@@Base+0xec78>
   23e08:	b	23ff0 <_start@@Base+0xec60>
   23e0c:	b	23e20 <_start@@Base+0xea90>
   23e10:	mov	r2, r6
   23e14:	ldr	r3, [sp, #104]	; 0x68
   23e18:	bl	1f438 <_start@@Base+0xa0a8>
   23e1c:	b	23cdc <_start@@Base+0xe94c>
   23e20:	ldrb	r2, [r4, #7]
   23e24:	mov	r3, #0
   23e28:	mov	lr, r3
   23e2c:	ldrb	r0, [r4, #6]
   23e30:	orr	r2, r2, r0, lsl #8
   23e34:	ldrb	r0, [r4, #5]
   23e38:	orr	r3, r2, r0, lsl #16
   23e3c:	ldrb	r0, [r4, #4]
   23e40:	orr	r0, r3, r0, lsl #24
   23e44:	ldrb	r2, [r4, #3]
   23e48:	orr	r1, lr, r2
   23e4c:	ldrb	r2, [r4, #2]
   23e50:	orr	r1, r1, r2, lsl #8
   23e54:	ldrb	r2, [r4, #1]
   23e58:	lsr	r8, r0, #16
   23e5c:	mov	lr, r0
   23e60:	mov	fp, #0
   23e64:	lsl	r8, r8, #16
   23e68:	orr	r1, r1, r2, lsl #16
   23e6c:	ldrb	r2, [r4]
   23e70:	orr	r2, r1, r2, lsl #24
   23e74:	add	r1, pc, #964	; 0x3c4
   23e78:	ldrd	r0, [r1]
   23e7c:	cmp	r2, r1
   23e80:	cmpeq	r8, r0
   23e84:	beq	24048 <_start@@Base+0xecb8>
   23e88:	and	r3, lr, #-16777216	; 0xff000000
   23e8c:	add	fp, pc, #948	; 0x3b4
   23e90:	ldrd	sl, [fp]
   23e94:	str	r3, [sp, #8]
   23e98:	str	r2, [sp, #12]
   23e9c:	ldrd	r0, [sp, #8]
   23ea0:	cmp	r1, fp
   23ea4:	cmpeq	r0, sl
   23ea8:	bne	24138 <_start@@Base+0xeda8>
   23eac:	cmp	ip, #5
   23eb0:	ble	24120 <_start@@Base+0xed90>
   23eb4:	mov	r3, #5
   23eb8:	mov	r2, r6
   23ebc:	mov	r1, r4
   23ec0:	mov	r0, r5
   23ec4:	bl	1924c <_start@@Base+0x3ebc>
   23ec8:	cmp	r0, r4
   23ecc:	mov	r7, r0
   23ed0:	beq	24120 <_start@@Base+0xed90>
   23ed4:	mov	r3, #0
   23ed8:	mov	r0, #0
   23edc:	mov	r1, #0
   23ee0:	cmp	r6, r7
   23ee4:	strb	r3, [sp, #47]	; 0x2f
   23ee8:	str	r3, [sp, #52]	; 0x34
   23eec:	strd	r0, [sp, #56]	; 0x38
   23ef0:	beq	24358 <_start@@Base+0xefc8>
   23ef4:	add	r0, sp, #56	; 0x38
   23ef8:	add	r3, sp, #52	; 0x34
   23efc:	mov	r2, r6
   23f00:	mov	r1, r7
   23f04:	str	r0, [sp]
   23f08:	mov	r0, r5
   23f0c:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   23f10:	cmp	r7, r0
   23f14:	mov	r4, r0
   23f18:	bne	243c0 <_start@@Base+0xf030>
   23f1c:	ldr	r3, [pc, #824]	; 2425c <_start@@Base+0xeecc>
   23f20:	add	ip, sp, #47	; 0x2f
   23f24:	mov	r2, r6
   23f28:	mov	r1, r4
   23f2c:	mov	r0, r5
   23f30:	str	ip, [sp]
   23f34:	add	r3, pc, r3
   23f38:	add	r3, r3, #676	; 0x2a4
   23f3c:	bl	1a3f4 <_start@@Base+0x5064>
   23f40:	cmp	r6, r0
   23f44:	cmpne	r0, r4
   23f48:	beq	245ac <_start@@Base+0xf21c>
   23f4c:	ldrsb	r2, [sp, #47]	; 0x2f
   23f50:	mov	r4, r0
   23f54:	cmp	r2, #2
   23f58:	bne	23f68 <_start@@Base+0xebd8>
   23f5c:	ldr	r3, [r5, #8]
   23f60:	tst	r3, #2
   23f64:	beq	23f8c <_start@@Base+0xebfc>
   23f68:	mov	r3, #1
   23f6c:	mov	r1, #0
   23f70:	ldr	r0, [r5]
   23f74:	mov	r2, r3
   23f78:	bl	293ac <flatcc_builder_table_add@@Base>
   23f7c:	cmp	r0, #0
   23f80:	beq	23fd8 <_start@@Base+0xec48>
   23f84:	ldrsb	r3, [sp, #47]	; 0x2f
   23f88:	strb	r3, [r0]
   23f8c:	mov	r1, r4
   23f90:	mov	r2, r6
   23f94:	ldr	r3, [sp, #32]
   23f98:	mov	r0, r5
   23f9c:	bl	1b17c <_start@@Base+0x5dec>
   23fa0:	ldr	r3, [sp, #48]	; 0x30
   23fa4:	mov	r4, r0
   23fa8:	cmp	r3, #0
   23fac:	bne	23da4 <_start@@Base+0xea14>
   23fb0:	ldr	r3, [r5, #24]
   23fb4:	cmp	r3, #0
   23fb8:	bne	23fd8 <_start@@Base+0xec48>
   23fbc:	ldr	r0, [r5]
   23fc0:	bl	2825c <flatcc_builder_end_table@@Base>
   23fc4:	ldr	r3, [sp, #104]	; 0x68
   23fc8:	cmp	r0, #0
   23fcc:	str	r0, [r3]
   23fd0:	movne	r0, r4
   23fd4:	bne	23cdc <_start@@Base+0xe94c>
   23fd8:	mov	r1, r4
   23fdc:	mov	r3, #33	; 0x21
   23fe0:	mov	r2, r6
   23fe4:	mov	r0, r5
   23fe8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   23fec:	b	23cdc <_start@@Base+0xe94c>
   23ff0:	mov	r2, #0
   23ff4:	mov	r3, #0
   23ff8:	b	23e28 <_start@@Base+0xea98>
   23ffc:	mov	r0, #0
   24000:	mov	r1, r0
   24004:	b	23e54 <_start@@Base+0xeac4>
   24008:	mov	r2, #0
   2400c:	mov	lr, r2
   24010:	b	23e34 <_start@@Base+0xeaa4>
   24014:	mov	r3, #0
   24018:	mov	lr, r3
   2401c:	b	23e3c <_start@@Base+0xeaac>
   24020:	mov	r0, #0
   24024:	mov	lr, r0
   24028:	b	23e44 <_start@@Base+0xeab4>
   2402c:	mov	r0, #0
   24030:	mov	r1, r0
   24034:	b	23e4c <_start@@Base+0xeabc>
   24038:	ldrb	r2, [r4]
   2403c:	mov	lr, #0
   24040:	lsl	r2, r2, #24
   24044:	b	23e88 <_start@@Base+0xeaf8>
   24048:	cmp	ip, #6
   2404c:	ble	24120 <_start@@Base+0xed90>
   24050:	mov	r3, #6
   24054:	mov	r2, r6
   24058:	mov	r1, r4
   2405c:	mov	r0, r5
   24060:	bl	1924c <_start@@Base+0x3ebc>
   24064:	cmp	r0, r4
   24068:	mov	r7, r0
   2406c:	beq	24120 <_start@@Base+0xed90>
   24070:	mov	r2, #0
   24074:	mov	r3, #0
   24078:	strb	fp, [sp, #47]	; 0x2f
   2407c:	cmp	r6, r0
   24080:	str	fp, [sp, #52]	; 0x34
   24084:	strd	r2, [sp, #56]	; 0x38
   24088:	beq	24350 <_start@@Base+0xefc0>
   2408c:	mov	r1, r0
   24090:	add	r0, sp, #56	; 0x38
   24094:	add	r3, sp, #52	; 0x34
   24098:	mov	r2, r6
   2409c:	str	r0, [sp]
   240a0:	mov	r0, r5
   240a4:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   240a8:	cmp	r7, r0
   240ac:	mov	r4, r0
   240b0:	bne	2437c <_start@@Base+0xefec>
   240b4:	ldr	r3, [pc, #420]	; 24260 <_start@@Base+0xeed0>
   240b8:	add	ip, sp, #47	; 0x2f
   240bc:	mov	r2, r6
   240c0:	mov	r1, r4
   240c4:	mov	r0, r5
   240c8:	str	ip, [sp]
   240cc:	add	r3, pc, r3
   240d0:	add	r3, r3, #660	; 0x294
   240d4:	bl	1a3f4 <_start@@Base+0x5064>
   240d8:	cmp	r6, r0
   240dc:	cmpne	r0, r4
   240e0:	beq	245ac <_start@@Base+0xf21c>
   240e4:	ldrsb	r2, [sp, #47]	; 0x2f
   240e8:	mov	r4, r0
   240ec:	cmp	r2, #2
   240f0:	bne	24100 <_start@@Base+0xed70>
   240f4:	ldr	r3, [r5, #8]
   240f8:	tst	r3, #2
   240fc:	beq	23f8c <_start@@Base+0xebfc>
   24100:	mov	r3, #1
   24104:	ldr	r0, [r5]
   24108:	mov	r2, r3
   2410c:	mov	r1, r3
   24110:	bl	293ac <flatcc_builder_table_add@@Base>
   24114:	cmp	r0, #0
   24118:	bne	23f84 <_start@@Base+0xebf4>
   2411c:	b	23fd8 <_start@@Base+0xec48>
   24120:	mov	r1, r4
   24124:	mov	r2, r6
   24128:	mov	r0, r5
   2412c:	bl	2eb64 <flatcc_json_parser_unmatched_symbol@@Base>
   24130:	mov	r4, r0
   24134:	b	23f8c <_start@@Base+0xebfc>
   24138:	mov	r7, #0
   2413c:	bic	r3, r2, #255	; 0xff
   24140:	add	fp, pc, #264	; 0x108
   24144:	ldrd	sl, [fp]
   24148:	str	r7, [sp, #24]
   2414c:	str	r3, [sp, #28]
   24150:	ldrd	r0, [sp, #24]
   24154:	cmp	r1, fp
   24158:	cmpeq	r0, sl
   2415c:	bne	24268 <_start@@Base+0xeed8>
   24160:	cmp	ip, #3
   24164:	ble	24120 <_start@@Base+0xed90>
   24168:	mov	r3, #3
   2416c:	mov	r2, r6
   24170:	mov	r1, r4
   24174:	mov	r0, r5
   24178:	bl	1924c <_start@@Base+0x3ebc>
   2417c:	cmp	r0, r4
   24180:	mov	fp, r0
   24184:	beq	24120 <_start@@Base+0xed90>
   24188:	mov	r2, #0
   2418c:	mov	r3, #0
   24190:	strb	r7, [sp, #47]	; 0x2f
   24194:	cmp	r6, r0
   24198:	str	r7, [sp, #52]	; 0x34
   2419c:	strd	r2, [sp, #56]	; 0x38
   241a0:	beq	24404 <_start@@Base+0xf074>
   241a4:	mov	r1, r0
   241a8:	add	r0, sp, #56	; 0x38
   241ac:	add	r3, sp, #52	; 0x34
   241b0:	mov	r2, r6
   241b4:	str	r0, [sp]
   241b8:	mov	r0, r5
   241bc:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   241c0:	cmp	fp, r0
   241c4:	mov	r7, r0
   241c8:	bne	2442c <_start@@Base+0xf09c>
   241cc:	ldr	r3, [pc, #144]	; 24264 <_start@@Base+0xeed4>
   241d0:	add	ip, sp, #47	; 0x2f
   241d4:	mov	r2, r6
   241d8:	mov	r1, r7
   241dc:	mov	r0, r5
   241e0:	str	ip, [sp]
   241e4:	add	r3, pc, r3
   241e8:	add	r3, r3, #692	; 0x2b4
   241ec:	bl	19b88 <_start@@Base+0x47f8>
   241f0:	cmp	r6, r0
   241f4:	cmpne	r0, r7
   241f8:	mov	r4, r0
   241fc:	beq	23fd8 <_start@@Base+0xec48>
   24200:	ldrb	r2, [sp, #47]	; 0x2f
   24204:	cmp	r2, #2
   24208:	bne	24218 <_start@@Base+0xee88>
   2420c:	ldr	r3, [r5, #8]
   24210:	tst	r3, #2
   24214:	beq	23f8c <_start@@Base+0xebfc>
   24218:	mov	r3, #1
   2421c:	mov	r1, #3
   24220:	mov	r2, r3
   24224:	ldr	r0, [r5]
   24228:	bl	293ac <flatcc_builder_table_add@@Base>
   2422c:	cmp	r0, #0
   24230:	beq	23fd8 <_start@@Base+0xec48>
   24234:	ldrb	r3, [sp, #47]	; 0x2f
   24238:	strb	r3, [r0]
   2423c:	b	23f8c <_start@@Base+0xebfc>
   24240:	eorsvc	r0, r2, #0
   24244:	cmnvs	pc, #28416	; 0x6f00
   24248:	andvc	r0, r0, #0
   2424c:	cmnvs	pc, #28416	; 0x6f00
   24250:	andeq	r0, r0, r0
   24254:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   24258:	andeq	r1, r3, r8, ror #5
   2425c:	andeq	r1, r3, ip, asr #2
   24260:			; <UNDEFINED> instruction: 0x00030fb4
   24264:	muleq	r3, ip, lr
   24268:	lsr	r3, r2, #16
   2426c:	str	r7, [sp, #16]
   24270:	mov	r1, #0
   24274:	movt	r1, #30051	; 0x7563
   24278:	mov	r0, #0
   2427c:	lsl	r3, r3, #16
   24280:	str	r3, [sp, #20]
   24284:	ldrd	r2, [sp, #16]
   24288:	cmp	r3, r1
   2428c:	cmpeq	r2, r0
   24290:	bne	24120 <_start@@Base+0xed90>
   24294:	cmp	ip, #2
   24298:	ble	24120 <_start@@Base+0xed90>
   2429c:	mov	r3, #2
   242a0:	mov	r2, r6
   242a4:	mov	r1, r4
   242a8:	mov	r0, r5
   242ac:	bl	1924c <_start@@Base+0x3ebc>
   242b0:	cmp	r0, r4
   242b4:	mov	fp, r0
   242b8:	beq	24120 <_start@@Base+0xed90>
   242bc:	mov	r2, #0
   242c0:	mov	r3, #0
   242c4:	strb	r7, [sp, #47]	; 0x2f
   242c8:	cmp	r6, r0
   242cc:	str	r7, [sp, #52]	; 0x34
   242d0:	strd	r2, [sp, #56]	; 0x38
   242d4:	beq	2440c <_start@@Base+0xf07c>
   242d8:	mov	r1, r0
   242dc:	add	r0, sp, #56	; 0x38
   242e0:	add	r3, sp, #52	; 0x34
   242e4:	mov	r2, r6
   242e8:	str	r0, [sp]
   242ec:	mov	r0, r5
   242f0:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   242f4:	cmp	fp, r0
   242f8:	mov	r7, r0
   242fc:	bne	2447c <_start@@Base+0xf0ec>
   24300:	add	r0, sp, #47	; 0x2f
   24304:	mov	r2, r6
   24308:	ldr	r3, [sp, #36]	; 0x24
   2430c:	mov	r1, r7
   24310:	str	r0, [sp]
   24314:	mov	r0, r5
   24318:	bl	19b88 <_start@@Base+0x47f8>
   2431c:	cmp	r6, r0
   24320:	cmpne	r0, r7
   24324:	mov	r4, r0
   24328:	beq	23fd8 <_start@@Base+0xec48>
   2432c:	ldrb	r2, [sp, #47]	; 0x2f
   24330:	cmp	r2, #2
   24334:	bne	24344 <_start@@Base+0xefb4>
   24338:	ldr	r3, [r5, #8]
   2433c:	tst	r3, #2
   24340:	beq	23f8c <_start@@Base+0xebfc>
   24344:	mov	r3, #1
   24348:	mov	r1, #2
   2434c:	b	24220 <_start@@Base+0xee90>
   24350:	mov	r4, r6
   24354:	b	240b4 <_start@@Base+0xed24>
   24358:	mov	r4, r6
   2435c:	b	23f1c <_start@@Base+0xeb8c>
   24360:	mov	r1, r4
   24364:	mov	r3, #5
   24368:	mov	r2, r6
   2436c:	mov	r0, r5
   24370:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   24374:	mov	r4, r0
   24378:	b	23dd4 <_start@@Base+0xea44>
   2437c:	ldr	r1, [sp, #52]	; 0x34
   24380:	ldrd	r2, [sp, #56]	; 0x38
   24384:	cmp	r1, #0
   24388:	beq	244cc <_start@@Base+0xf13c>
   2438c:	cmp	r3, #0
   24390:	cmpeq	r2, #128	; 0x80
   24394:	rsbls	r2, r2, #0
   24398:	sxtbls	r2, r2
   2439c:	strbls	r2, [sp, #47]	; 0x2f
   243a0:	bls	240ec <_start@@Base+0xed5c>
   243a4:	mov	r1, r0
   243a8:	mov	r3, #8
   243ac:	mov	r2, r6
   243b0:	mov	r0, r5
   243b4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   243b8:	mov	r4, r0
   243bc:	b	244f8 <_start@@Base+0xf168>
   243c0:	ldr	r1, [sp, #52]	; 0x34
   243c4:	ldrd	r2, [sp, #56]	; 0x38
   243c8:	cmp	r1, #0
   243cc:	beq	24508 <_start@@Base+0xf178>
   243d0:	cmp	r3, #0
   243d4:	cmpeq	r2, #128	; 0x80
   243d8:	rsbls	r2, r2, #0
   243dc:	sxtbls	r2, r2
   243e0:	strbls	r2, [sp, #47]	; 0x2f
   243e4:	bls	23f54 <_start@@Base+0xebc4>
   243e8:	mov	r1, r0
   243ec:	mov	r3, #8
   243f0:	mov	r2, r6
   243f4:	mov	r0, r5
   243f8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   243fc:	mov	r4, r0
   24400:	b	24534 <_start@@Base+0xf1a4>
   24404:	mov	r7, r6
   24408:	b	241cc <_start@@Base+0xee3c>
   2440c:	mov	r7, r6
   24410:	b	24300 <_start@@Base+0xef70>
   24414:	mov	r1, r0
   24418:	mov	r2, r6
   2441c:	mov	r0, r5
   24420:	mov	r3, #33	; 0x21
   24424:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   24428:	b	23cf8 <_start@@Base+0xe968>
   2442c:	ldr	r3, [sp, #52]	; 0x34
   24430:	cmp	r3, #0
   24434:	bne	24574 <_start@@Base+0xf1e4>
   24438:	ldrd	r2, [sp, #56]	; 0x38
   2443c:	cmp	r3, #0
   24440:	cmpeq	r2, #255	; 0xff
   24444:	uxtbls	r2, r2
   24448:	movls	r4, r0
   2444c:	strbls	r2, [sp, #47]	; 0x2f
   24450:	bls	24204 <_start@@Base+0xee74>
   24454:	mov	r1, r0
   24458:	mov	r3, #7
   2445c:	mov	r2, r6
   24460:	mov	r0, r5
   24464:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   24468:	mov	r4, r0
   2446c:	cmp	fp, r4
   24470:	bne	24200 <_start@@Base+0xee70>
   24474:	mov	r7, fp
   24478:	b	241cc <_start@@Base+0xee3c>
   2447c:	ldr	r3, [sp, #52]	; 0x34
   24480:	cmp	r3, #0
   24484:	bne	24590 <_start@@Base+0xf200>
   24488:	ldrd	r2, [sp, #56]	; 0x38
   2448c:	cmp	r3, #0
   24490:	cmpeq	r2, #255	; 0xff
   24494:	uxtbls	r2, r2
   24498:	movls	r4, r0
   2449c:	strbls	r2, [sp, #47]	; 0x2f
   244a0:	bls	24330 <_start@@Base+0xefa0>
   244a4:	mov	r1, r0
   244a8:	mov	r3, #7
   244ac:	mov	r2, r6
   244b0:	mov	r0, r5
   244b4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   244b8:	mov	r4, r0
   244bc:	cmp	fp, r4
   244c0:	bne	2432c <_start@@Base+0xef9c>
   244c4:	mov	r7, fp
   244c8:	b	24300 <_start@@Base+0xef70>
   244cc:	cmp	r3, #0
   244d0:	cmpeq	r2, #127	; 0x7f
   244d4:	sxtbls	r2, r2
   244d8:	strbls	r2, [sp, #47]	; 0x2f
   244dc:	bls	240ec <_start@@Base+0xed5c>
   244e0:	mov	r1, r0
   244e4:	mov	r3, #7
   244e8:	mov	r2, r6
   244ec:	mov	r0, r5
   244f0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   244f4:	mov	r4, r0
   244f8:	cmp	r7, r4
   244fc:	beq	240b4 <_start@@Base+0xed24>
   24500:	ldrsb	r2, [sp, #47]	; 0x2f
   24504:	b	240ec <_start@@Base+0xed5c>
   24508:	cmp	r3, #0
   2450c:	cmpeq	r2, #127	; 0x7f
   24510:	sxtbls	r2, r2
   24514:	strbls	r2, [sp, #47]	; 0x2f
   24518:	bls	23f54 <_start@@Base+0xebc4>
   2451c:	mov	r1, r0
   24520:	mov	r3, #7
   24524:	mov	r2, r6
   24528:	mov	r0, r5
   2452c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   24530:	mov	r4, r0
   24534:	cmp	r7, r4
   24538:	beq	23f1c <_start@@Base+0xeb8c>
   2453c:	ldrsb	r2, [sp, #47]	; 0x2f
   24540:	b	23f54 <_start@@Base+0xebc4>
   24544:	ldrb	r3, [r1, #1]
   24548:	add	r2, r1, #1
   2454c:	cmp	r3, #117	; 0x75
   24550:	bne	23d2c <_start@@Base+0xe99c>
   24554:	ldrb	r3, [r2, #1]!
   24558:	cmp	r3, #108	; 0x6c
   2455c:	bne	23d2c <_start@@Base+0xe99c>
   24560:	ldrb	r3, [r2, #1]
   24564:	cmp	r3, #108	; 0x6c
   24568:	addeq	r0, r1, #4
   2456c:	bne	23d2c <_start@@Base+0xe99c>
   24570:	b	23cf8 <_start@@Base+0xe968>
   24574:	mov	r1, r0
   24578:	mov	r3, #8
   2457c:	mov	r2, r6
   24580:	mov	r0, r5
   24584:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   24588:	mov	r4, r0
   2458c:	b	2446c <_start@@Base+0xf0dc>
   24590:	mov	r1, r0
   24594:	mov	r3, #8
   24598:	mov	r2, r6
   2459c:	mov	r0, r5
   245a0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   245a4:	mov	r4, r0
   245a8:	b	244bc <_start@@Base+0xf12c>
   245ac:	mov	r4, r0
   245b0:	b	23fd8 <_start@@Base+0xec48>
   245b4:	ldr	r3, [r0, #8]
   245b8:	mov	r2, r6
   245bc:	tst	r3, #1
   245c0:	bne	245d0 <_start@@Base+0xf240>
   245c4:	mov	r3, #15
   245c8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   245cc:	b	23cf8 <_start@@Base+0xe968>
   245d0:	bl	2e138 <flatcc_json_parser_generic_json@@Base>
   245d4:	b	23cf8 <_start@@Base+0xe968>

000245d8 <test_json@@Base>:
   245d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   245dc:	strd	r6, [sp, #8]
   245e0:	mov	r7, r0
   245e4:	strd	r8, [sp, #16]
   245e8:	mov	r8, r1
   245ec:	strd	sl, [sp, #24]
   245f0:	mov	sl, r2
   245f4:	mov	fp, r3
   245f8:	str	lr, [sp, #32]
   245fc:	sub	sp, sp, #388	; 0x184
   24600:	ldr	r6, [sp, #428]	; 0x1ac
   24604:	add	r4, sp, #152	; 0x98
   24608:	add	r5, sp, #104	; 0x68
   2460c:	mov	r0, r4
   24610:	bl	25f04 <flatcc_builder_init@@Base>
   24614:	mov	r1, #0
   24618:	mov	r0, r5
   2461c:	ldr	r9, [pc, #1112]	; 24a7c <test_json@@Base+0x4a4>
   24620:	bl	3dffc <flatcc_json_printer_init_dynamic_buffer@@Base>
   24624:	and	r3, r6, #1
   24628:	tst	r6, #16
   2462c:	ubfx	r1, r6, #1, #1
   24630:	ubfx	r2, r6, #2, #1
   24634:	strb	r3, [sp, #130]	; 0x82
   24638:	ubfx	r3, r6, #3, #1
   2463c:	add	r9, pc, r9
   24640:	strb	r1, [sp, #131]	; 0x83
   24644:	strb	r2, [sp, #132]	; 0x84
   24648:	strb	r3, [sp, #133]	; 0x85
   2464c:	movne	r3, #2
   24650:	strbne	r3, [sp, #129]	; 0x81
   24654:	tst	r6, #32
   24658:	beq	2466c <test_json@@Base+0x94>
   2465c:	mov	r2, #2
   24660:	mov	r3, #1
   24664:	strh	r3, [r5, #26]
   24668:	strb	r2, [sp, #129]	; 0x81
   2466c:	mov	r0, r8
   24670:	bl	14570 <strlen@plt>
   24674:	ldr	r1, [sp, #424]	; 0x1a8
   24678:	mov	r3, r0
   2467c:	mov	r2, r8
   24680:	mov	r0, r4
   24684:	ldr	lr, [r7]
   24688:	str	r1, [sp]
   2468c:	add	r1, sp, #60	; 0x3c
   24690:	ldr	ip, [r7, #4]
   24694:	str	lr, [sp, #4]
   24698:	str	ip, [sp, #8]
   2469c:	bl	3001c <flatcc_json_parser_table_as_root@@Base>
   246a0:	cmp	r0, fp
   246a4:	bne	248b8 <test_json@@Base+0x2e0>
   246a8:	cmp	fp, #0
   246ac:	movne	r6, #0
   246b0:	movne	r7, r6
   246b4:	beq	246f0 <test_json@@Base+0x118>
   246b8:	mov	r0, r6
   246bc:	bl	29e04 <flatcc_builder_aligned_free@@Base>
   246c0:	mov	r0, r4
   246c4:	bl	260b4 <flatcc_builder_clear@@Base>
   246c8:	mov	r0, r5
   246cc:	bl	3e124 <flatcc_json_printer_clear@@Base>
   246d0:	mov	r0, r7
   246d4:	add	sp, sp, #388	; 0x184
   246d8:	ldrd	r4, [sp]
   246dc:	ldrd	r6, [sp, #8]
   246e0:	ldrd	r8, [sp, #16]
   246e4:	ldrd	sl, [sp, #24]
   246e8:	add	sp, sp, #32
   246ec:	pop	{pc}		; (ldr pc, [sp], #4)
   246f0:	add	r1, sp, #32
   246f4:	mov	r0, r4
   246f8:	bl	29cd8 <flatcc_builder_finalize_aligned_buffer@@Base>
   246fc:	ldr	r2, [r7]
   24700:	mov	r6, r0
   24704:	ldr	r3, [r7, #12]
   24708:	ldr	r1, [sp, #32]
   2470c:	bl	2b3d4 <flatcc_verify_table_as_root@@Base>
   24710:	cmp	r0, #0
   24714:	bne	24a48 <test_json@@Base+0x470>
   24718:	mov	r1, r6
   2471c:	mov	r0, r5
   24720:	ldr	r3, [r7]
   24724:	ldr	ip, [r7, #8]
   24728:	ldr	r2, [sp, #32]
   2472c:	str	ip, [sp]
   24730:	bl	3d8c4 <flatcc_json_printer_table_as_root@@Base>
   24734:	add	r1, sp, #36	; 0x24
   24738:	mov	r0, r5
   2473c:	bl	3e0a4 <flatcc_json_printer_get_buffer@@Base>
   24740:	subs	r8, r0, #0
   24744:	beq	2475c <test_json@@Base+0x184>
   24748:	mov	r1, r8
   2474c:	mov	r0, sl
   24750:	bl	144f8 <strcmp@plt>
   24754:	subs	r7, r0, #0
   24758:	beq	246b8 <test_json@@Base+0xe0>
   2475c:	ldr	r3, [pc, #796]	; 24a80 <test_json@@Base+0x4a8>
   24760:	ldr	fp, [pc, #796]	; 24a84 <test_json@@Base+0x4ac>
   24764:	ldr	r1, [pc, #796]	; 24a88 <test_json@@Base+0x4b0>
   24768:	ldr	r7, [r9, r3]
   2476c:	add	fp, pc, fp
   24770:	ldr	r2, [sp, #432]	; 0x1b0
   24774:	add	r1, pc, r1
   24778:	ldr	r0, [r7]
   2477c:	bl	1457c <fprintf@plt>
   24780:	mov	r2, r8
   24784:	mov	r1, fp
   24788:	ldr	r0, [r7]
   2478c:	bl	1457c <fprintf@plt>
   24790:	ldr	r0, [pc, #756]	; 24a8c <test_json@@Base+0x4b4>
   24794:	mov	r2, #10
   24798:	mov	r1, #1
   2479c:	ldr	r3, [r7]
   247a0:	add	r0, pc, r0
   247a4:	bl	14540 <fwrite@plt>
   247a8:	mov	r2, sl
   247ac:	mov	r1, fp
   247b0:	ldr	r0, [r7]
   247b4:	bl	1457c <fprintf@plt>
   247b8:	cmp	r6, #0
   247bc:	beq	24994 <test_json@@Base+0x3bc>
   247c0:	ldr	r2, [pc, #712]	; 24a90 <test_json@@Base+0x4b8>
   247c4:	ldr	r1, [pc, #712]	; 24a94 <test_json@@Base+0x4bc>
   247c8:	ldr	r9, [r7]
   247cc:	add	r2, pc, r2
   247d0:	ldr	r8, [sp, #32]
   247d4:	add	r1, pc, r1
   247d8:	mov	r0, r9
   247dc:	bl	1457c <fprintf@plt>
   247e0:	cmp	r8, #0
   247e4:	beq	24978 <test_json@@Base+0x3a0>
   247e8:	add	r2, sp, #40	; 0x28
   247ec:	ldr	r3, [pc, #676]	; 24a98 <test_json@@Base+0x4c0>
   247f0:	mov	fp, #0
   247f4:	sub	sl, r6, #1
   247f8:	ldr	r1, [pc, #668]	; 24a9c <test_json@@Base+0x4c4>
   247fc:	str	r2, [sp, #16]
   24800:	ldr	r2, [pc, #664]	; 24aa0 <test_json@@Base+0x4c8>
   24804:	add	r3, pc, r3
   24808:	str	r6, [sp, #20]
   2480c:	mov	r6, r3
   24810:	str	r5, [sp, #24]
   24814:	add	r1, pc, r1
   24818:	str	r4, [sp, #28]
   2481c:	mov	r4, fp
   24820:	mov	fp, r1
   24824:	add	r2, pc, r2
   24828:	mov	r5, r2
   2482c:	b	24898 <test_json@@Base+0x2c0>
   24830:	cmp	r4, #0
   24834:	mov	r1, r5
   24838:	ldr	r2, [sp, #16]
   2483c:	mov	r0, r9
   24840:	beq	24848 <test_json@@Base+0x270>
   24844:	bl	1457c <fprintf@plt>
   24848:	mov	r2, r4
   2484c:	mov	r1, r6
   24850:	mov	r0, r9
   24854:	bl	1457c <fprintf@plt>
   24858:	ldrb	r2, [sl, #1]!
   2485c:	mov	r1, fp
   24860:	mov	r0, r9
   24864:	bl	1457c <fprintf@plt>
   24868:	add	r3, sp, #384	; 0x180
   2486c:	mov	r1, #0
   24870:	add	r7, r3, r7
   24874:	add	r4, r4, #1
   24878:	ldrb	r2, [sl]
   2487c:	strb	r1, [r7, #-343]	; 0xfffffea9
   24880:	sub	r1, r2, #32
   24884:	cmp	r1, #94	; 0x5e
   24888:	movhi	r2, #46	; 0x2e
   2488c:	cmp	r8, r4
   24890:	strb	r2, [r7, #-344]	; 0xfffffea8
   24894:	beq	24a08 <test_json@@Base+0x430>
   24898:	ands	r7, r4, #15
   2489c:	beq	24830 <test_json@@Base+0x258>
   248a0:	tst	r4, #7
   248a4:	bne	24858 <test_json@@Base+0x280>
   248a8:	mov	r1, r9
   248ac:	mov	r0, #32
   248b0:	bl	145c4 <fputc@plt>
   248b4:	b	24858 <test_json@@Base+0x280>
   248b8:	ldr	r2, [pc, #448]	; 24a80 <test_json@@Base+0x4a8>
   248bc:	cmp	fp, #0
   248c0:	ldr	r7, [r9, r2]
   248c4:	ldr	r6, [r7]
   248c8:	beq	249d4 <test_json@@Base+0x3fc>
   248cc:	cmp	r0, #0
   248d0:	beq	2499c <test_json@@Base+0x3c4>
   248d4:	bl	2cd18 <flatcc_json_parser_error_string@@Base>
   248d8:	ldr	r1, [pc, #452]	; 24aa4 <test_json@@Base+0x4cc>
   248dc:	mov	r3, r0
   248e0:	mov	r0, r6
   248e4:	ldr	r2, [sp, #432]	; 0x1b0
   248e8:	add	r1, pc, r1
   248ec:	bl	1457c <fprintf@plt>
   248f0:	mov	r0, fp
   248f4:	ldr	r6, [r7]
   248f8:	bl	2cd18 <flatcc_json_parser_error_string@@Base>
   248fc:	ldr	r1, [pc, #420]	; 24aa8 <test_json@@Base+0x4d0>
   24900:	mov	r2, r0
   24904:	mov	r0, r6
   24908:	add	r1, pc, r1
   2490c:	bl	1457c <fprintf@plt>
   24910:	ldr	r1, [pc, #404]	; 24aac <test_json@@Base+0x4d4>
   24914:	mov	r2, r8
   24918:	ldr	r0, [r7]
   2491c:	add	r1, pc, r1
   24920:	bl	1457c <fprintf@plt>
   24924:	ldr	r3, [sp, #80]	; 0x50
   24928:	cmp	r3, #1
   2492c:	movgt	r6, #0
   24930:	ble	24954 <test_json@@Base+0x37c>
   24934:	mov	r0, #32
   24938:	ldr	r1, [r7]
   2493c:	add	r6, r6, #1
   24940:	bl	145c4 <fputc@plt>
   24944:	ldr	r3, [sp, #80]	; 0x50
   24948:	sub	r3, r3, #1
   2494c:	cmp	r3, r6
   24950:	bgt	24934 <test_json@@Base+0x35c>
   24954:	ldr	r0, [pc, #340]	; 24ab0 <test_json@@Base+0x4d8>
   24958:	mov	r2, #2
   2495c:	mov	r1, #1
   24960:	mov	r6, #0
   24964:	ldr	r3, [r7]
   24968:	mvn	r7, #0
   2496c:	add	r0, pc, r0
   24970:	bl	14540 <fwrite@plt>
   24974:	b	246b8 <test_json@@Base+0xe0>
   24978:	add	r3, sp, #40	; 0x28
   2497c:	str	r3, [sp, #16]
   24980:	ldr	r1, [pc, #300]	; 24ab4 <test_json@@Base+0x4dc>
   24984:	mov	r0, r9
   24988:	ldr	r2, [sp, #16]
   2498c:	add	r1, pc, r1
   24990:	bl	1457c <fprintf@plt>
   24994:	mvn	r7, #0
   24998:	b	246b8 <test_json@@Base+0xe0>
   2499c:	mov	r0, fp
   249a0:	bl	2cd18 <flatcc_json_parser_error_string@@Base>
   249a4:	ldr	r1, [pc, #268]	; 24ab8 <test_json@@Base+0x4e0>
   249a8:	mov	r3, r0
   249ac:	mov	r0, r6
   249b0:	ldr	r2, [sp, #432]	; 0x1b0
   249b4:	add	r1, pc, r1
   249b8:	bl	1457c <fprintf@plt>
   249bc:	ldr	r1, [pc, #248]	; 24abc <test_json@@Base+0x4e4>
   249c0:	mov	r2, r8
   249c4:	ldr	r0, [r7]
   249c8:	add	r1, pc, r1
   249cc:	bl	1457c <fprintf@plt>
   249d0:	b	24924 <test_json@@Base+0x34c>
   249d4:	bl	2cd18 <flatcc_json_parser_error_string@@Base>
   249d8:	ldr	r1, [pc, #224]	; 24ac0 <test_json@@Base+0x4e8>
   249dc:	mov	r3, r0
   249e0:	mov	r0, r6
   249e4:	ldr	r2, [sp, #432]	; 0x1b0
   249e8:	add	r1, pc, r1
   249ec:	bl	1457c <fprintf@plt>
   249f0:	ldr	r1, [pc, #204]	; 24ac4 <test_json@@Base+0x4ec>
   249f4:	mov	r2, r8
   249f8:	ldr	r0, [r7]
   249fc:	add	r1, pc, r1
   24a00:	bl	1457c <fprintf@plt>
   24a04:	b	24924 <test_json@@Base+0x34c>
   24a08:	tst	r8, #15
   24a0c:	ldr	r6, [sp, #20]
   24a10:	ldr	r5, [sp, #24]
   24a14:	ldr	r4, [sp, #28]
   24a18:	beq	24980 <test_json@@Base+0x3a8>
   24a1c:	ldr	r7, [pc, #164]	; 24ac8 <test_json@@Base+0x4f0>
   24a20:	add	r7, pc, r7
   24a24:	add	r8, r8, #1
   24a28:	mov	r3, r9
   24a2c:	mov	r2, #3
   24a30:	mov	r1, #1
   24a34:	mov	r0, r7
   24a38:	bl	14540 <fwrite@plt>
   24a3c:	tst	r8, #15
   24a40:	bne	24a24 <test_json@@Base+0x44c>
   24a44:	b	24980 <test_json@@Base+0x3a8>
   24a48:	ldr	r3, [pc, #48]	; 24a80 <test_json@@Base+0x4a8>
   24a4c:	ldr	r7, [r9, r3]
   24a50:	ldr	r8, [r7]
   24a54:	bl	2a400 <flatcc_verify_error_string@@Base>
   24a58:	ldr	r2, [pc, #108]	; 24acc <test_json@@Base+0x4f4>
   24a5c:	str	r0, [sp]
   24a60:	ldr	r1, [pc, #104]	; 24ad0 <test_json@@Base+0x4f8>
   24a64:	mov	r0, r8
   24a68:	ldr	r3, [sp, #432]	; 0x1b0
   24a6c:	add	r2, pc, r2
   24a70:	add	r1, pc, r1
   24a74:	bl	1457c <fprintf@plt>
   24a78:	b	247b8 <test_json@@Base+0x1e0>
   24a7c:			; <UNDEFINED> instruction: 0x000309bc
   24a80:	andeq	r0, r0, r8, rrx
   24a84:	andeq	sl, r1, r8, lsl #15
   24a88:	andeq	sl, r1, r8, lsr r8
   24a8c:	andeq	sl, r1, r4, asr #16
   24a90:	andeq	sl, r1, r4, lsr #16
   24a94:	andeq	sl, r1, ip, lsr #16
   24a98:	andeq	sl, r1, ip, lsl #16
   24a9c:	andeq	sl, r1, r4, lsl #16
   24aa0:	andeq	sl, r1, r4, ror #15
   24aa4:	andeq	sl, r1, r8, lsl #11
   24aa8:	muleq	r1, r0, r5
   24aac:	ldrdeq	sl, [r1], -r8
   24ab0:			; <UNDEFINED> instruction: 0x0001a5b0
   24ab4:	andeq	sl, r1, ip, ror r6
   24ab8:	andeq	sl, r1, r4, lsl #10
   24abc:	andeq	sl, r1, ip, lsr #10
   24ac0:	andeq	sl, r1, r0, lsl r5
   24ac4:	strdeq	sl, [r1], -r8
   24ac8:	andeq	sl, r1, r0, lsl #12
   24acc:			; <UNDEFINED> instruction: 0x0001a4b4
   24ad0:	andeq	sl, r1, r4, lsl r5

00024ad4 <edge_case_tests@@Base>:
   24ad4:	mov	r1, #155	; 0x9b
   24ad8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24adc:	mov	r5, #0
   24ae0:	strd	r6, [sp, #8]
   24ae4:	mov	r3, r5
   24ae8:	mov	r7, #1
   24aec:	strd	r8, [sp, #16]
   24af0:	mov	r8, #2
   24af4:	strd	sl, [sp, #24]
   24af8:	str	lr, [sp, #32]
   24afc:	sub	sp, sp, #36	; 0x24
   24b00:	ldr	r6, [pc, #780]	; 24e14 <edge_case_tests@@Base+0x340>
   24b04:	str	r5, [sp]
   24b08:	ldr	r2, [pc, #776]	; 24e18 <edge_case_tests@@Base+0x344>
   24b0c:	str	r1, [sp, #8]
   24b10:	ldr	r1, [pc, #772]	; 24e1c <edge_case_tests@@Base+0x348>
   24b14:	add	r6, pc, r6
   24b18:	str	r5, [sp, #4]
   24b1c:	ldr	sl, [pc, #764]	; 24e20 <edge_case_tests@@Base+0x34c>
   24b20:	mov	r0, r6
   24b24:	add	r2, pc, r2
   24b28:	ldr	r9, [pc, #756]	; 24e24 <edge_case_tests@@Base+0x350>
   24b2c:	add	r1, pc, r1
   24b30:	bl	245d8 <test_json@@Base>
   24b34:	mov	ip, #168	; 0xa8
   24b38:	add	sl, pc, sl
   24b3c:	ldr	fp, [pc, #740]	; 24e28 <edge_case_tests@@Base+0x354>
   24b40:	mov	r3, r5
   24b44:	mov	r2, sl
   24b48:	str	r8, [sp]
   24b4c:	add	r9, pc, r9
   24b50:	mov	r4, r0
   24b54:	stmib	sp, {r5, ip}
   24b58:	mov	r1, r9
   24b5c:	mov	r0, r6
   24b60:	str	sl, [sp, #20]
   24b64:	bl	245d8 <test_json@@Base>
   24b68:	ldr	r1, [pc, #700]	; 24e2c <edge_case_tests@@Base+0x358>
   24b6c:	mov	ip, #172	; 0xac
   24b70:	add	fp, pc, fp
   24b74:	mov	r3, r5
   24b78:	mov	r2, fp
   24b7c:	ldr	sl, [pc, #684]	; 24e30 <edge_case_tests@@Base+0x35c>
   24b80:	orr	r4, r4, r0
   24b84:	mov	r0, r6
   24b88:	stm	sp, {r5, r8, ip}
   24b8c:	add	r1, pc, r1
   24b90:	str	fp, [sp, #24]
   24b94:	bl	245d8 <test_json@@Base>
   24b98:	add	sl, pc, sl
   24b9c:	mov	ip, #176	; 0xb0
   24ba0:	str	r8, [sp]
   24ba4:	orr	r4, r4, r0
   24ba8:	mov	r0, #4
   24bac:	ldr	fp, [pc, #640]	; 24e34 <edge_case_tests@@Base+0x360>
   24bb0:	mov	lr, sl
   24bb4:	mov	r1, r9
   24bb8:	mov	r3, r5
   24bbc:	mov	r2, sl
   24bc0:	stmib	sp, {r0, ip}
   24bc4:	mov	r0, r6
   24bc8:	str	lr, [sp, #28]
   24bcc:	bl	245d8 <test_json@@Base>
   24bd0:	ldr	r2, [pc, #608]	; 24e38 <edge_case_tests@@Base+0x364>
   24bd4:	mov	lr, #8
   24bd8:	mov	ip, #180	; 0xb4
   24bdc:	mov	r3, r5
   24be0:	orr	r4, r4, r0
   24be4:	ldr	r1, [pc, #592]	; 24e3c <edge_case_tests@@Base+0x368>
   24be8:	mov	r0, r6
   24bec:	add	fp, pc, fp
   24bf0:	stm	sp, {r5, lr}
   24bf4:	str	ip, [sp, #8]
   24bf8:	add	r2, pc, r2
   24bfc:	ldr	r9, [pc, #572]	; 24e40 <edge_case_tests@@Base+0x36c>
   24c00:	add	r1, pc, r1
   24c04:	ldr	sl, [pc, #568]	; 24e44 <edge_case_tests@@Base+0x370>
   24c08:	bl	245d8 <test_json@@Base>
   24c0c:	ldr	r1, [pc, #564]	; 24e48 <edge_case_tests@@Base+0x374>
   24c10:	mov	ip, #195	; 0xc3
   24c14:	mov	r3, r5
   24c18:	orr	r4, r4, r0
   24c1c:	mov	r0, r6
   24c20:	str	r8, [sp]
   24c24:	stmib	sp, {r5, ip}
   24c28:	add	r9, pc, r9
   24c2c:	ldr	r2, [sp, #20]
   24c30:	add	sl, pc, sl
   24c34:	add	r1, pc, r1
   24c38:	bl	245d8 <test_json@@Base>
   24c3c:	mov	ip, #199	; 0xc7
   24c40:	mov	r3, r5
   24c44:	str	r7, [sp]
   24c48:	mov	r2, r9
   24c4c:	mov	r1, sl
   24c50:	orr	r4, r4, r0
   24c54:	mov	r0, r6
   24c58:	stmib	sp, {r5, ip}
   24c5c:	bl	245d8 <test_json@@Base>
   24c60:	mov	ip, #203	; 0xcb
   24c64:	mov	r1, sl
   24c68:	str	r7, [sp]
   24c6c:	mov	r3, r5
   24c70:	mov	r2, fp
   24c74:	ldr	sl, [pc, #464]	; 24e4c <edge_case_tests@@Base+0x378>
   24c78:	orr	r4, r4, r0
   24c7c:	mov	r0, r6
   24c80:	stmib	sp, {r7, ip}
   24c84:	bl	245d8 <test_json@@Base>
   24c88:	ldr	r1, [pc, #448]	; 24e50 <edge_case_tests@@Base+0x37c>
   24c8c:	mov	ip, #209	; 0xd1
   24c90:	mov	r3, r5
   24c94:	mov	r2, r9
   24c98:	orr	r4, r4, r0
   24c9c:	str	r7, [sp]
   24ca0:	mov	r0, r6
   24ca4:	stmib	sp, {r5, ip}
   24ca8:	add	sl, pc, sl
   24cac:	add	r1, pc, r1
   24cb0:	bl	245d8 <test_json@@Base>
   24cb4:	mov	ip, #217	; 0xd9
   24cb8:	mov	r3, r5
   24cbc:	str	r8, [sp]
   24cc0:	mov	r1, sl
   24cc4:	orr	r4, r4, r0
   24cc8:	ldr	r2, [sp, #20]
   24ccc:	mov	r0, r6
   24cd0:	stmib	sp, {r5, ip}
   24cd4:	bl	245d8 <test_json@@Base>
   24cd8:	ldr	r1, [pc, #372]	; 24e54 <edge_case_tests@@Base+0x380>
   24cdc:	mov	ip, #221	; 0xdd
   24ce0:	mov	r3, r5
   24ce4:	orr	r4, r4, r0
   24ce8:	mov	r0, r6
   24cec:	stm	sp, {r5, r8, ip}
   24cf0:	add	r1, pc, r1
   24cf4:	ldr	r2, [sp, #24]
   24cf8:	bl	245d8 <test_json@@Base>
   24cfc:	orr	r4, r4, r0
   24d00:	mov	ip, #225	; 0xe1
   24d04:	str	r8, [sp]
   24d08:	mov	r0, #4
   24d0c:	mov	r1, sl
   24d10:	ldr	r2, [sp, #28]
   24d14:	mov	r3, r5
   24d18:	stmib	sp, {r0, ip}
   24d1c:	mov	r0, r6
   24d20:	bl	245d8 <test_json@@Base>
   24d24:	ldr	r2, [pc, #300]	; 24e58 <edge_case_tests@@Base+0x384>
   24d28:	mov	lr, #8
   24d2c:	mov	ip, #229	; 0xe5
   24d30:	mov	r3, r5
   24d34:	orr	r4, r4, r0
   24d38:	ldr	r1, [pc, #284]	; 24e5c <edge_case_tests@@Base+0x388>
   24d3c:	mov	r0, r6
   24d40:	stm	sp, {r5, lr}
   24d44:	str	ip, [sp, #8]
   24d48:	add	r2, pc, r2
   24d4c:	ldr	sl, [pc, #268]	; 24e60 <edge_case_tests@@Base+0x38c>
   24d50:	add	r1, pc, r1
   24d54:	bl	245d8 <test_json@@Base>
   24d58:	ldr	r1, [pc, #260]	; 24e64 <edge_case_tests@@Base+0x390>
   24d5c:	mov	ip, #233	; 0xe9
   24d60:	mov	r3, r5
   24d64:	orr	r4, r4, r0
   24d68:	mov	r0, r6
   24d6c:	str	r8, [sp]
   24d70:	stmib	sp, {r5, ip}
   24d74:	add	sl, pc, sl
   24d78:	ldr	r2, [sp, #20]
   24d7c:	add	r1, pc, r1
   24d80:	bl	245d8 <test_json@@Base>
   24d84:	mov	ip, #237	; 0xed
   24d88:	mov	r3, r5
   24d8c:	str	r7, [sp]
   24d90:	mov	r2, r9
   24d94:	mov	r1, sl
   24d98:	orr	r4, r4, r0
   24d9c:	mov	r0, r6
   24da0:	stmib	sp, {r5, ip}
   24da4:	bl	245d8 <test_json@@Base>
   24da8:	mov	ip, #241	; 0xf1
   24dac:	mov	r2, fp
   24db0:	str	r7, [sp]
   24db4:	mov	r1, sl
   24db8:	mov	r3, r5
   24dbc:	orr	r4, r4, r0
   24dc0:	mov	r0, r6
   24dc4:	stmib	sp, {r7, ip}
   24dc8:	bl	245d8 <test_json@@Base>
   24dcc:	ldr	r1, [pc, #148]	; 24e68 <edge_case_tests@@Base+0x394>
   24dd0:	mov	ip, #247	; 0xf7
   24dd4:	orr	r4, r4, r0
   24dd8:	mov	r3, r5
   24ddc:	mov	r2, r9
   24de0:	str	r7, [sp]
   24de4:	mov	r0, r6
   24de8:	stmib	sp, {r5, ip}
   24dec:	add	r1, pc, r1
   24df0:	bl	245d8 <test_json@@Base>
   24df4:	orr	r0, r4, r0
   24df8:	add	sp, sp, #36	; 0x24
   24dfc:	ldrd	r4, [sp]
   24e00:	ldrd	r6, [sp, #8]
   24e04:	ldrd	r8, [sp, #16]
   24e08:	ldrd	sl, [sp, #24]
   24e0c:	add	sp, sp, #32
   24e10:	pop	{pc}		; (ldr pc, [sp], #4)
   24e14:	andeq	r0, r3, ip, asr #7
   24e18:	andeq	sl, r1, r0, lsl #10
   24e1c:	andeq	sl, r1, r8, lsl r5
   24e20:	andeq	sl, r1, r0, asr #10
   24e24:	andeq	sl, r1, r0, asr r5
   24e28:	andeq	sl, r1, r0, asr r5
   24e2c:	andeq	sl, r1, r4, asr r5
   24e30:	andeq	sl, r1, r0, ror r5
   24e34:	andeq	sl, r1, r0, ror #13
   24e38:	andeq	sl, r1, r4, lsr #10
   24e3c:	andeq	sl, r1, r0, lsr r6
   24e40:	andeq	sl, r1, r4, asr r6
   24e44:	andeq	sl, r1, r8, ror #12
   24e48:	andeq	sl, r1, r0, lsr #12
   24e4c:			; <UNDEFINED> instruction: 0x0001a6b0
   24e50:	andeq	sl, r1, r8, lsr r6
   24e54:	andeq	sl, r1, r8, lsl #13
   24e58:	andeq	sl, r1, r4, asr r6
   24e5c:	andeq	sl, r1, r4, ror #14
   24e60:	andeq	sl, r1, r4, ror r7
   24e64:	andeq	sl, r1, ip, asr #14
   24e68:	andeq	sl, r1, r8, lsr #14

00024e6c <error_case_tests@@Base>:
   24e6c:	strd	r4, [sp, #-16]!
   24e70:	movw	ip, #285	; 0x11d
   24e74:	mov	r4, #0
   24e78:	str	r6, [sp, #8]
   24e7c:	mov	r2, r4
   24e80:	mov	r3, #13
   24e84:	ldr	r6, [pc, #736]	; 2516c <error_case_tests@@Base+0x300>
   24e88:	str	lr, [sp, #12]
   24e8c:	sub	sp, sp, #16
   24e90:	ldr	r1, [pc, #728]	; 25170 <error_case_tests@@Base+0x304>
   24e94:	str	r4, [sp]
   24e98:	stmib	sp, {r4, ip}
   24e9c:	add	r6, pc, r6
   24ea0:	mov	r0, r6
   24ea4:	add	r1, pc, r1
   24ea8:	bl	245d8 <test_json@@Base>
   24eac:	ldr	r1, [pc, #704]	; 25174 <error_case_tests@@Base+0x308>
   24eb0:	movw	ip, #287	; 0x11f
   24eb4:	mov	r2, r4
   24eb8:	mov	r5, r0
   24ebc:	mov	r3, #13
   24ec0:	str	r4, [sp]
   24ec4:	mov	r0, r6
   24ec8:	stmib	sp, {r4, ip}
   24ecc:	add	r1, pc, r1
   24ed0:	bl	245d8 <test_json@@Base>
   24ed4:	ldr	r1, [pc, #668]	; 25178 <error_case_tests@@Base+0x30c>
   24ed8:	movw	ip, #289	; 0x121
   24edc:	mov	r2, r4
   24ee0:	orr	r5, r5, r0
   24ee4:	mov	r3, #13
   24ee8:	str	r4, [sp]
   24eec:	mov	r0, r6
   24ef0:	stmib	sp, {r4, ip}
   24ef4:	add	r1, pc, r1
   24ef8:	bl	245d8 <test_json@@Base>
   24efc:	ldr	r1, [pc, #632]	; 2517c <error_case_tests@@Base+0x310>
   24f00:	movw	ip, #291	; 0x123
   24f04:	mov	r2, r4
   24f08:	orr	r5, r5, r0
   24f0c:	mov	r3, #13
   24f10:	str	r4, [sp]
   24f14:	mov	r0, r6
   24f18:	stmib	sp, {r4, ip}
   24f1c:	add	r1, pc, r1
   24f20:	bl	245d8 <test_json@@Base>
   24f24:	ldr	r1, [pc, #596]	; 25180 <error_case_tests@@Base+0x314>
   24f28:	movw	ip, #293	; 0x125
   24f2c:	mov	r2, r4
   24f30:	orr	r5, r5, r0
   24f34:	mov	r3, #13
   24f38:	str	r4, [sp]
   24f3c:	mov	r0, r6
   24f40:	stmib	sp, {r4, ip}
   24f44:	add	r1, pc, r1
   24f48:	bl	245d8 <test_json@@Base>
   24f4c:	ldr	r1, [pc, #560]	; 25184 <error_case_tests@@Base+0x318>
   24f50:	mov	ip, #296	; 0x128
   24f54:	mov	r2, r4
   24f58:	orr	r5, r5, r0
   24f5c:	mov	r3, #13
   24f60:	str	r4, [sp]
   24f64:	mov	r0, r6
   24f68:	stmib	sp, {r4, ip}
   24f6c:	add	r1, pc, r1
   24f70:	bl	245d8 <test_json@@Base>
   24f74:	ldr	r1, [pc, #524]	; 25188 <error_case_tests@@Base+0x31c>
   24f78:	movw	ip, #299	; 0x12b
   24f7c:	mov	r2, r4
   24f80:	orr	r5, r5, r0
   24f84:	mov	r3, #13
   24f88:	str	r4, [sp]
   24f8c:	mov	r0, r6
   24f90:	stmib	sp, {r4, ip}
   24f94:	add	r1, pc, r1
   24f98:	bl	245d8 <test_json@@Base>
   24f9c:	ldr	r1, [pc, #488]	; 2518c <error_case_tests@@Base+0x320>
   24fa0:	movw	ip, #303	; 0x12f
   24fa4:	mov	r2, r4
   24fa8:	orr	r5, r5, r0
   24fac:	mov	r3, #13
   24fb0:	str	r4, [sp]
   24fb4:	mov	r0, r6
   24fb8:	stmib	sp, {r4, ip}
   24fbc:	add	r1, pc, r1
   24fc0:	bl	245d8 <test_json@@Base>
   24fc4:	ldr	r1, [pc, #452]	; 25190 <error_case_tests@@Base+0x324>
   24fc8:	movw	ip, #307	; 0x133
   24fcc:	mov	r2, r4
   24fd0:	orr	r5, r5, r0
   24fd4:	mov	r3, #13
   24fd8:	str	r4, [sp]
   24fdc:	mov	r0, r6
   24fe0:	stmib	sp, {r4, ip}
   24fe4:	add	r1, pc, r1
   24fe8:	bl	245d8 <test_json@@Base>
   24fec:	ldr	r1, [pc, #416]	; 25194 <error_case_tests@@Base+0x328>
   24ff0:	movw	ip, #322	; 0x142
   24ff4:	mov	r2, r4
   24ff8:	orr	r5, r5, r0
   24ffc:	mov	r3, #13
   25000:	str	r4, [sp]
   25004:	mov	r0, r6
   25008:	stmib	sp, {r4, ip}
   2500c:	add	r1, pc, r1
   25010:	bl	245d8 <test_json@@Base>
   25014:	ldr	r1, [pc, #380]	; 25198 <error_case_tests@@Base+0x32c>
   25018:	mov	ip, #324	; 0x144
   2501c:	mov	r2, r4
   25020:	orr	r5, r5, r0
   25024:	mov	r3, #13
   25028:	str	r4, [sp]
   2502c:	mov	r0, r6
   25030:	stmib	sp, {r4, ip}
   25034:	add	r1, pc, r1
   25038:	bl	245d8 <test_json@@Base>
   2503c:	ldr	r1, [pc, #344]	; 2519c <error_case_tests@@Base+0x330>
   25040:	movw	ip, #326	; 0x146
   25044:	mov	r2, r4
   25048:	orr	r5, r5, r0
   2504c:	mov	r3, #13
   25050:	str	r4, [sp]
   25054:	mov	r0, r6
   25058:	stmib	sp, {r4, ip}
   2505c:	add	r1, pc, r1
   25060:	bl	245d8 <test_json@@Base>
   25064:	ldr	r1, [pc, #308]	; 251a0 <error_case_tests@@Base+0x334>
   25068:	mov	ip, #328	; 0x148
   2506c:	mov	r2, r4
   25070:	orr	r5, r5, r0
   25074:	mov	r3, #13
   25078:	str	r4, [sp]
   2507c:	mov	r0, r6
   25080:	stmib	sp, {r4, ip}
   25084:	add	r1, pc, r1
   25088:	bl	245d8 <test_json@@Base>
   2508c:	ldr	r1, [pc, #272]	; 251a4 <error_case_tests@@Base+0x338>
   25090:	movw	ip, #330	; 0x14a
   25094:	mov	r2, r4
   25098:	orr	r5, r5, r0
   2509c:	mov	r3, #13
   250a0:	str	r4, [sp]
   250a4:	mov	r0, r6
   250a8:	stmib	sp, {r4, ip}
   250ac:	add	r1, pc, r1
   250b0:	bl	245d8 <test_json@@Base>
   250b4:	ldr	r1, [pc, #236]	; 251a8 <error_case_tests@@Base+0x33c>
   250b8:	movw	ip, #333	; 0x14d
   250bc:	mov	r2, r4
   250c0:	orr	r5, r5, r0
   250c4:	mov	r3, #13
   250c8:	str	r4, [sp]
   250cc:	mov	r0, r6
   250d0:	stmib	sp, {r4, ip}
   250d4:	add	r1, pc, r1
   250d8:	bl	245d8 <test_json@@Base>
   250dc:	ldr	r1, [pc, #200]	; 251ac <error_case_tests@@Base+0x340>
   250e0:	mov	ip, #336	; 0x150
   250e4:	mov	r2, r4
   250e8:	orr	r5, r5, r0
   250ec:	mov	r3, #13
   250f0:	str	r4, [sp]
   250f4:	mov	r0, r6
   250f8:	stmib	sp, {r4, ip}
   250fc:	add	r1, pc, r1
   25100:	bl	245d8 <test_json@@Base>
   25104:	ldr	r1, [pc, #164]	; 251b0 <error_case_tests@@Base+0x344>
   25108:	mov	ip, #340	; 0x154
   2510c:	mov	r2, r4
   25110:	orr	r5, r5, r0
   25114:	mov	r3, #13
   25118:	str	r4, [sp]
   2511c:	mov	r0, r6
   25120:	stmib	sp, {r4, ip}
   25124:	add	r1, pc, r1
   25128:	bl	245d8 <test_json@@Base>
   2512c:	ldr	r1, [pc, #128]	; 251b4 <error_case_tests@@Base+0x348>
   25130:	mov	ip, #344	; 0x158
   25134:	orr	r5, r5, r0
   25138:	mov	r2, r4
   2513c:	mov	r0, r6
   25140:	str	r4, [sp]
   25144:	mov	r3, #13
   25148:	stmib	sp, {r4, ip}
   2514c:	add	r1, pc, r1
   25150:	bl	245d8 <test_json@@Base>
   25154:	orr	r0, r5, r0
   25158:	add	sp, sp, #16
   2515c:	ldrd	r4, [sp]
   25160:	ldr	r6, [sp, #8]
   25164:	add	sp, sp, #12
   25168:	pop	{pc}		; (ldr pc, [sp], #4)
   2516c:	andeq	r0, r3, r4, asr #32
   25170:	ldrdeq	sl, [r1], -r0
   25174:	andeq	sl, r1, r4, asr #13
   25178:	andeq	sl, r1, r0, lsl #14
   2517c:	andeq	sl, r1, r8, lsr r7
   25180:	andeq	sl, r1, r8, ror #14
   25184:	muleq	r1, r8, r7
   25188:	andeq	sl, r1, r0, lsl r8
   2518c:	andeq	sl, r1, r4, lsl #17
   25190:	andeq	sl, r1, r4, lsr #18
   25194:	andeq	sl, r1, r4, asr #19
   25198:			; <UNDEFINED> instruction: 0x0001a9b4
   2519c:	andeq	sl, r1, r4, ror #19
   251a0:	andeq	sl, r1, r0, lsl sl
   251a4:	andeq	sl, r1, r8, lsr sl
   251a8:	andeq	sl, r1, r0, ror #20
   251ac:	andeq	sl, r1, r4, asr #21
   251b0:	andeq	sl, r1, r8, lsr #22
   251b4:			; <UNDEFINED> instruction: 0x0001abb0

000251b8 <base64_tests@@Base>:
   251b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   251bc:	movw	ip, #369	; 0x171
   251c0:	mov	r4, #0
   251c4:	strd	r6, [sp, #8]
   251c8:	mov	r3, r4
   251cc:	ldr	r6, [pc, #468]	; 253a8 <base64_tests@@Base+0x1f0>
   251d0:	str	r8, [sp, #16]
   251d4:	ldr	r2, [pc, #464]	; 253ac <base64_tests@@Base+0x1f4>
   251d8:	str	lr, [sp, #20]
   251dc:	sub	sp, sp, #16
   251e0:	ldr	r1, [pc, #456]	; 253b0 <base64_tests@@Base+0x1f8>
   251e4:	add	r6, pc, r6
   251e8:	str	r4, [sp]
   251ec:	mov	r0, r6
   251f0:	stmib	sp, {r4, ip}
   251f4:	add	r2, pc, r2
   251f8:	ldr	r8, [pc, #436]	; 253b4 <base64_tests@@Base+0x1fc>
   251fc:	add	r1, pc, r1
   25200:	ldr	r7, [pc, #432]	; 253b8 <base64_tests@@Base+0x200>
   25204:	bl	245d8 <test_json@@Base>
   25208:	ldr	r2, [pc, #428]	; 253bc <base64_tests@@Base+0x204>
   2520c:	mov	ip, #372	; 0x174
   25210:	mov	r3, r4
   25214:	mov	r5, r0
   25218:	mov	r0, r6
   2521c:	str	r4, [sp]
   25220:	ldr	r1, [pc, #408]	; 253c0 <base64_tests@@Base+0x208>
   25224:	add	r8, pc, r8
   25228:	stmib	sp, {r4, ip}
   2522c:	add	r7, pc, r7
   25230:	add	r2, pc, r2
   25234:	add	r1, pc, r1
   25238:	bl	245d8 <test_json@@Base>
   2523c:	mov	r1, #376	; 0x178
   25240:	mov	r3, r4
   25244:	str	r4, [sp]
   25248:	mov	r2, r8
   2524c:	orr	r5, r5, r0
   25250:	str	r4, [sp, #4]
   25254:	str	r1, [sp, #8]
   25258:	mov	r0, r6
   2525c:	ldr	r1, [pc, #352]	; 253c4 <base64_tests@@Base+0x20c>
   25260:	add	r1, pc, r1
   25264:	bl	245d8 <test_json@@Base>
   25268:	movw	r1, #379	; 0x17b
   2526c:	mov	r3, r4
   25270:	str	r4, [sp]
   25274:	mov	r2, r7
   25278:	orr	r5, r5, r0
   2527c:	str	r4, [sp, #4]
   25280:	str	r1, [sp, #8]
   25284:	mov	r0, r6
   25288:	ldr	r1, [pc, #312]	; 253c8 <base64_tests@@Base+0x210>
   2528c:	add	r1, pc, r1
   25290:	bl	245d8 <test_json@@Base>
   25294:	ldr	r1, [pc, #304]	; 253cc <base64_tests@@Base+0x214>
   25298:	movw	ip, #382	; 0x17e
   2529c:	mov	r2, r8
   252a0:	mov	r3, r4
   252a4:	orr	r5, r5, r0
   252a8:	str	r4, [sp]
   252ac:	mov	r0, r6
   252b0:	stmib	sp, {r4, ip}
   252b4:	add	r1, pc, r1
   252b8:	bl	245d8 <test_json@@Base>
   252bc:	ldr	r1, [pc, #268]	; 253d0 <base64_tests@@Base+0x218>
   252c0:	movw	ip, #385	; 0x181
   252c4:	mov	r2, r7
   252c8:	mov	r3, r4
   252cc:	orr	r5, r5, r0
   252d0:	str	r4, [sp]
   252d4:	mov	r0, r6
   252d8:	stmib	sp, {r4, ip}
   252dc:	ldr	r7, [pc, #240]	; 253d4 <base64_tests@@Base+0x21c>
   252e0:	add	r1, pc, r1
   252e4:	bl	245d8 <test_json@@Base>
   252e8:	ldr	r1, [pc, #232]	; 253d8 <base64_tests@@Base+0x220>
   252ec:	mov	ip, #388	; 0x184
   252f0:	mov	r2, r4
   252f4:	orr	r5, r5, r0
   252f8:	mov	r3, #31
   252fc:	str	r4, [sp]
   25300:	mov	r0, r6
   25304:	stmib	sp, {r4, ip}
   25308:	add	r7, pc, r7
   2530c:	add	r1, pc, r1
   25310:	bl	245d8 <test_json@@Base>
   25314:	ldr	r1, [pc, #192]	; 253dc <base64_tests@@Base+0x224>
   25318:	movw	ip, #391	; 0x187
   2531c:	mov	r2, r4
   25320:	orr	r5, r5, r0
   25324:	mov	r3, #32
   25328:	str	r4, [sp]
   2532c:	mov	r0, r6
   25330:	stmib	sp, {r4, ip}
   25334:	add	r1, pc, r1
   25338:	bl	245d8 <test_json@@Base>
   2533c:	ldr	r1, [pc, #156]	; 253e0 <base64_tests@@Base+0x228>
   25340:	movw	ip, #406	; 0x196
   25344:	mov	r3, r4
   25348:	mov	r2, r7
   2534c:	orr	r5, r5, r0
   25350:	str	r4, [sp]
   25354:	mov	r0, r6
   25358:	stmib	sp, {r4, ip}
   2535c:	add	r1, pc, r1
   25360:	bl	245d8 <test_json@@Base>
   25364:	ldr	r1, [pc, #120]	; 253e4 <base64_tests@@Base+0x22c>
   25368:	movw	ip, #419	; 0x1a3
   2536c:	orr	r5, r5, r0
   25370:	mov	r3, r4
   25374:	mov	r2, r7
   25378:	str	r4, [sp]
   2537c:	mov	r0, r6
   25380:	stmib	sp, {r4, ip}
   25384:	add	r1, pc, r1
   25388:	bl	245d8 <test_json@@Base>
   2538c:	orr	r0, r5, r0
   25390:	add	sp, sp, #16
   25394:	ldrd	r4, [sp]
   25398:	ldrd	r6, [sp, #8]
   2539c:	ldr	r8, [sp, #16]
   253a0:	add	sp, sp, #20
   253a4:	pop	{pc}		; (ldr pc, [sp], #4)
   253a8:	strdeq	pc, [r2], -ip
   253ac:	andeq	r9, r1, r4, lsl pc
   253b0:			; <UNDEFINED> instruction: 0x0001abb0
   253b4:	andeq	sl, r1, ip, ror #23
   253b8:	andeq	sl, r1, r4, asr sp
   253bc:	muleq	r1, r4, fp
   253c0:			; <UNDEFINED> instruction: 0x0001abb4
   253c4:	andeq	sl, r1, r4, ror #24
   253c8:	andeq	sl, r1, ip, lsr #27
   253cc:	andeq	sl, r1, r0, asr #28
   253d0:	andeq	sl, r1, ip, asr #29
   253d4:	ldrdeq	fp, [r1], -r8
   253d8:	andeq	sl, r1, ip, asr pc
   253dc:	strdeq	sl, [r1], -r0
   253e0:	andeq	fp, r1, ip, asr r1
   253e4:	andeq	fp, r1, r4, lsl #4

000253e8 <mixed_type_union_tests@@Base>:
   253e8:	strd	r4, [sp, #-20]!	; 0xffffffec
   253ec:	mov	ip, #432	; 0x1b0
   253f0:	mov	r4, #0
   253f4:	strd	r6, [sp, #8]
   253f8:	mov	r3, r4
   253fc:	ldr	r6, [pc, #348]	; 25560 <mixed_type_union_tests@@Base+0x178>
   25400:	str	lr, [sp, #16]
   25404:	sub	sp, sp, #20
   25408:	ldr	r2, [pc, #340]	; 25564 <mixed_type_union_tests@@Base+0x17c>
   2540c:	str	r4, [sp]
   25410:	ldr	r1, [pc, #336]	; 25568 <mixed_type_union_tests@@Base+0x180>
   25414:	add	r6, pc, r6
   25418:	stmib	sp, {r4, ip}
   2541c:	add	r6, r6, #16
   25420:	ldr	r7, [pc, #324]	; 2556c <mixed_type_union_tests@@Base+0x184>
   25424:	add	r2, pc, r2
   25428:	mov	r0, r6
   2542c:	add	r1, pc, r1
   25430:	bl	245d8 <test_json@@Base>
   25434:	movw	r1, #437	; 0x1b5
   25438:	add	r7, pc, r7
   2543c:	str	r4, [sp]
   25440:	mov	r3, r4
   25444:	mov	r2, r7
   25448:	str	r4, [sp, #4]
   2544c:	str	r1, [sp, #8]
   25450:	mov	r5, r0
   25454:	mov	r0, r6
   25458:	ldr	r1, [pc, #272]	; 25570 <mixed_type_union_tests@@Base+0x188>
   2545c:	add	r1, pc, r1
   25460:	bl	245d8 <test_json@@Base>
   25464:	movw	r1, #442	; 0x1ba
   25468:	mov	r3, r4
   2546c:	str	r4, [sp]
   25470:	mov	r2, r7
   25474:	orr	r5, r5, r0
   25478:	str	r4, [sp, #4]
   2547c:	str	r1, [sp, #8]
   25480:	mov	r0, r6
   25484:	ldr	r1, [pc, #232]	; 25574 <mixed_type_union_tests@@Base+0x18c>
   25488:	add	r1, pc, r1
   2548c:	bl	245d8 <test_json@@Base>
   25490:	movw	r1, #449	; 0x1c1
   25494:	ldr	r2, [pc, #220]	; 25578 <mixed_type_union_tests@@Base+0x190>
   25498:	mov	r3, r4
   2549c:	orr	r5, r5, r0
   254a0:	mov	r0, r6
   254a4:	str	r4, [sp]
   254a8:	str	r4, [sp, #4]
   254ac:	str	r1, [sp, #8]
   254b0:	ldr	r1, [pc, #196]	; 2557c <mixed_type_union_tests@@Base+0x194>
   254b4:	add	r2, pc, r2
   254b8:	add	r1, pc, r1
   254bc:	bl	245d8 <test_json@@Base>
   254c0:	movw	r1, #458	; 0x1ca
   254c4:	ldr	r2, [pc, #180]	; 25580 <mixed_type_union_tests@@Base+0x198>
   254c8:	mov	r3, r4
   254cc:	orr	r5, r5, r0
   254d0:	mov	r0, r6
   254d4:	str	r4, [sp]
   254d8:	str	r4, [sp, #4]
   254dc:	str	r1, [sp, #8]
   254e0:	ldr	r1, [pc, #156]	; 25584 <mixed_type_union_tests@@Base+0x19c>
   254e4:	add	r2, pc, r2
   254e8:	add	r1, pc, r1
   254ec:	bl	245d8 <test_json@@Base>
   254f0:	movw	r1, #469	; 0x1d5
   254f4:	ldr	r2, [pc, #140]	; 25588 <mixed_type_union_tests@@Base+0x1a0>
   254f8:	mov	r3, r4
   254fc:	orr	r5, r5, r0
   25500:	mov	r0, r6
   25504:	str	r4, [sp]
   25508:	str	r4, [sp, #4]
   2550c:	str	r1, [sp, #8]
   25510:	ldr	r1, [pc, #116]	; 2558c <mixed_type_union_tests@@Base+0x1a4>
   25514:	add	r2, pc, r2
   25518:	add	r1, pc, r1
   2551c:	bl	245d8 <test_json@@Base>
   25520:	ldr	r1, [pc, #104]	; 25590 <mixed_type_union_tests@@Base+0x1a8>
   25524:	movw	ip, #474	; 0x1da
   25528:	orr	r5, r5, r0
   2552c:	mov	r3, r4
   25530:	mov	r0, r6
   25534:	str	r4, [sp]
   25538:	mov	r2, r7
   2553c:	stmib	sp, {r4, ip}
   25540:	add	r1, pc, r1
   25544:	bl	245d8 <test_json@@Base>
   25548:	orr	r0, r5, r0
   2554c:	add	sp, sp, #20
   25550:	ldrd	r4, [sp]
   25554:	ldrd	r6, [sp, #8]
   25558:	add	sp, sp, #16
   2555c:	pop	{pc}		; (ldr pc, [sp], #4)
   25560:	andeq	pc, r2, ip, asr #21
   25564:	andeq	fp, r1, r0, lsr r2
   25568:	andeq	fp, r1, r0, ror r2
   2556c:			; <UNDEFINED> instruction: 0x0001b2b4
   25570:	andeq	fp, r1, r8, lsl #6
   25574:	andeq	fp, r1, r0, ror #6
   25578:	andeq	fp, r1, ip, asr #7
   2557c:	andeq	fp, r1, r4, lsl #9
   25580:	andeq	fp, r1, r8, lsr r5
   25584:	andeq	fp, r1, r4, lsl r6
   25588:	strdeq	fp, [r1], -r0
   2558c:	andeq	fp, r1, r4, lsr r8
   25590:	muleq	r1, r0, r9

00025594 <union_vector_tests@@Base>:
   25594:	strd	r4, [sp, #-20]!	; 0xffffffec
   25598:	movw	r2, #485	; 0x1e5
   2559c:	mov	r4, #0
   255a0:	ldr	r5, [pc, #312]	; 256e0 <union_vector_tests@@Base+0x14c>
   255a4:	mov	r3, r4
   255a8:	strd	r6, [sp, #8]
   255ac:	ldr	r7, [pc, #304]	; 256e4 <union_vector_tests@@Base+0x150>
   255b0:	str	lr, [sp, #16]
   255b4:	sub	sp, sp, #20
   255b8:	ldr	r1, [pc, #296]	; 256e8 <union_vector_tests@@Base+0x154>
   255bc:	add	r5, pc, r5
   255c0:	str	r4, [sp]
   255c4:	add	r5, r5, #32
   255c8:	str	r4, [sp, #4]
   255cc:	add	r7, pc, r7
   255d0:	mov	r0, r5
   255d4:	str	r2, [sp, #8]
   255d8:	mov	r2, r7
   255dc:	add	r1, pc, r1
   255e0:	bl	245d8 <test_json@@Base>
   255e4:	mov	r1, #488	; 0x1e8
   255e8:	ldr	r2, [pc, #252]	; 256ec <union_vector_tests@@Base+0x158>
   255ec:	mov	r3, r4
   255f0:	mov	r6, r0
   255f4:	mov	r0, r5
   255f8:	str	r4, [sp]
   255fc:	str	r4, [sp, #4]
   25600:	str	r1, [sp, #8]
   25604:	ldr	r1, [pc, #228]	; 256f0 <union_vector_tests@@Base+0x15c>
   25608:	add	r2, pc, r2
   2560c:	add	r1, pc, r1
   25610:	bl	245d8 <test_json@@Base>
   25614:	movw	r1, #491	; 0x1eb
   25618:	ldr	r2, [pc, #212]	; 256f4 <union_vector_tests@@Base+0x160>
   2561c:	mov	r3, r4
   25620:	orr	r6, r6, r0
   25624:	mov	r0, r5
   25628:	str	r4, [sp]
   2562c:	str	r4, [sp, #4]
   25630:	str	r1, [sp, #8]
   25634:	ldr	r1, [pc, #188]	; 256f8 <union_vector_tests@@Base+0x164>
   25638:	add	r2, pc, r2
   2563c:	add	r1, pc, r1
   25640:	bl	245d8 <test_json@@Base>
   25644:	movw	r1, #494	; 0x1ee
   25648:	ldr	r2, [pc, #172]	; 256fc <union_vector_tests@@Base+0x168>
   2564c:	mov	r3, r4
   25650:	orr	r6, r6, r0
   25654:	mov	r0, r5
   25658:	str	r4, [sp]
   2565c:	str	r4, [sp, #4]
   25660:	str	r1, [sp, #8]
   25664:	ldr	r1, [pc, #148]	; 25700 <union_vector_tests@@Base+0x16c>
   25668:	add	r2, pc, r2
   2566c:	add	r1, pc, r1
   25670:	bl	245d8 <test_json@@Base>
   25674:	ldr	r1, [pc, #136]	; 25704 <union_vector_tests@@Base+0x170>
   25678:	movw	ip, #497	; 0x1f1
   2567c:	mov	r2, r7
   25680:	mov	r3, r4
   25684:	orr	r6, r6, r0
   25688:	str	r4, [sp]
   2568c:	mov	r0, r5
   25690:	stmib	sp, {r4, ip}
   25694:	add	r1, pc, r1
   25698:	bl	245d8 <test_json@@Base>
   2569c:	ldr	r2, [pc, #100]	; 25708 <union_vector_tests@@Base+0x174>
   256a0:	mov	ip, #500	; 0x1f4
   256a4:	orr	r6, r6, r0
   256a8:	mov	r3, r4
   256ac:	mov	r0, r5
   256b0:	str	r4, [sp]
   256b4:	ldr	r1, [pc, #80]	; 2570c <union_vector_tests@@Base+0x178>
   256b8:	stmib	sp, {r4, ip}
   256bc:	add	r2, pc, r2
   256c0:	add	r1, pc, r1
   256c4:	bl	245d8 <test_json@@Base>
   256c8:	orr	r0, r6, r0
   256cc:	add	sp, sp, #20
   256d0:	ldrd	r4, [sp]
   256d4:	ldrd	r6, [sp, #8]
   256d8:	add	sp, sp, #16
   256dc:	pop	{pc}		; (ldr pc, [sp], #4)
   256e0:	andeq	pc, r2, r4, lsr #18
   256e4:	muleq	r1, r4, r9
   256e8:			; <UNDEFINED> instruction: 0x0001b9bc
   256ec:	ldrdeq	fp, [r1], -r0
   256f0:	strdeq	fp, [r1], -r8
   256f4:	andeq	fp, r1, r0, lsl #20
   256f8:	andeq	fp, r1, r0, asr #20
   256fc:	andeq	fp, r1, r4, ror #20
   25700:	andeq	fp, r1, ip, asr #21
   25704:	andeq	fp, r1, r4, lsr #22
   25708:	andeq	fp, r1, ip, lsr fp
   2570c:	muleq	r1, r4, fp
   25710:	strd	r4, [sp, #-16]!
   25714:	mov	r4, r0
   25718:	mov	r0, #1
   2571c:	ldr	ip, [r4, #28]
   25720:	mov	r3, r0
   25724:	mov	r5, r2
   25728:	str	r6, [sp, #8]
   2572c:	str	lr, [sp, #12]
   25730:	sub	sp, sp, #8
   25734:	str	r0, [sp]
   25738:	add	r2, r1, ip
   2573c:	add	r1, r4, #60	; 0x3c
   25740:	ldr	r0, [r4, #40]	; 0x28
   25744:	ldr	r6, [r4, #48]	; 0x30
   25748:	blx	r6
   2574c:	cmp	r0, #0
   25750:	bne	25790 <union_vector_tests@@Base+0x1fc>
   25754:	ldr	r1, [r4, #28]
   25758:	ldr	ip, [r4, #32]
   2575c:	ldrd	r2, [r4, #60]	; 0x3c
   25760:	sub	r3, r3, r1
   25764:	add	r2, r2, r1
   25768:	cmp	r3, r5
   2576c:	movcs	r3, r5
   25770:	str	r2, [r4, #16]
   25774:	str	r3, [r4, #24]
   25778:	str	r5, [ip, #4]
   2577c:	add	sp, sp, #8
   25780:	ldrd	r4, [sp]
   25784:	ldr	r6, [sp, #8]
   25788:	add	sp, sp, #12
   2578c:	pop	{pc}		; (ldr pc, [sp], #4)
   25790:	mvn	r0, #0
   25794:	b	2577c <union_vector_tests@@Base+0x1e8>

00025798 <flatcc_builder_default_alloc@@Base>:
   25798:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2579c:	subs	r5, r2, #0
   257a0:	strd	r6, [sp, #8]
   257a4:	mov	r6, r1
   257a8:	str	r8, [sp, #16]
   257ac:	str	lr, [sp, #20]
   257b0:	beq	257e8 <flatcc_builder_default_alloc@@Base+0x50>
   257b4:	mov	r7, r3
   257b8:	ldr	r3, [sp, #24]
   257bc:	sub	r2, r3, #1
   257c0:	cmp	r2, #6
   257c4:	addls	pc, pc, r2, lsl #2
   257c8:	b	25898 <flatcc_builder_default_alloc@@Base+0x100>
   257cc:	b	25818 <flatcc_builder_default_alloc@@Base+0x80>
   257d0:	b	25898 <flatcc_builder_default_alloc@@Base+0x100>
   257d4:	b	25898 <flatcc_builder_default_alloc@@Base+0x100>
   257d8:	b	25890 <flatcc_builder_default_alloc@@Base+0xf8>
   257dc:	b	25880 <flatcc_builder_default_alloc@@Base+0xe8>
   257e0:	b	25898 <flatcc_builder_default_alloc@@Base+0x100>
   257e4:	b	25888 <flatcc_builder_default_alloc@@Base+0xf0>
   257e8:	ldr	r0, [r1]
   257ec:	cmp	r0, #0
   257f0:	beq	25804 <flatcc_builder_default_alloc@@Base+0x6c>
   257f4:	bl	14510 <free@plt>
   257f8:	mov	r0, r5
   257fc:	str	r5, [r6]
   25800:	str	r5, [r6, #4]
   25804:	ldrd	r4, [sp]
   25808:	ldrd	r6, [sp, #8]
   2580c:	ldr	r8, [sp, #16]
   25810:	add	sp, sp, #20
   25814:	pop	{pc}		; (ldr pc, [sp], #4)
   25818:	mov	r4, #256	; 0x100
   2581c:	cmp	r4, r5
   25820:	bcs	25830 <flatcc_builder_default_alloc@@Base+0x98>
   25824:	lsl	r4, r4, #1
   25828:	cmp	r5, r4
   2582c:	bhi	25824 <flatcc_builder_default_alloc@@Base+0x8c>
   25830:	ldr	r2, [r6, #4]
   25834:	cmp	r5, r2
   25838:	bhi	25848 <flatcc_builder_default_alloc@@Base+0xb0>
   2583c:	cmp	r4, r2, lsr #1
   25840:	movls	r0, #0
   25844:	bls	25804 <flatcc_builder_default_alloc@@Base+0x6c>
   25848:	mov	r1, r4
   2584c:	ldr	r0, [r6]
   25850:	bl	14534 <realloc@plt>
   25854:	subs	r5, r0, #0
   25858:	beq	258b4 <flatcc_builder_default_alloc@@Base+0x11c>
   2585c:	cmp	r7, #0
   25860:	beq	25870 <flatcc_builder_default_alloc@@Base+0xd8>
   25864:	ldr	r0, [r6, #4]
   25868:	cmp	r0, r4
   2586c:	bcc	258a0 <flatcc_builder_default_alloc@@Base+0x108>
   25870:	mov	r0, #0
   25874:	str	r5, [r6]
   25878:	str	r4, [r6, #4]
   2587c:	b	25804 <flatcc_builder_default_alloc@@Base+0x6c>
   25880:	mov	r4, r5
   25884:	b	25830 <flatcc_builder_default_alloc@@Base+0x98>
   25888:	mov	r4, #64	; 0x40
   2588c:	b	2581c <flatcc_builder_default_alloc@@Base+0x84>
   25890:	mov	r4, #288	; 0x120
   25894:	b	2581c <flatcc_builder_default_alloc@@Base+0x84>
   25898:	mov	r4, #32
   2589c:	b	2581c <flatcc_builder_default_alloc@@Base+0x84>
   258a0:	sub	r2, r4, r0
   258a4:	mov	r1, #0
   258a8:	add	r0, r5, r0
   258ac:	bl	14594 <memset@plt>
   258b0:	b	25870 <flatcc_builder_default_alloc@@Base+0xd8>
   258b4:	mvn	r0, #0
   258b8:	b	25804 <flatcc_builder_default_alloc@@Base+0x6c>
   258bc:	ldr	r3, [pc, #32]	; 258e4 <flatcc_builder_default_alloc@@Base+0x14c>
   258c0:	mov	r2, #308	; 0x134
   258c4:	str	r4, [sp, #-8]!
   258c8:	ldr	r1, [pc, #24]	; 258e8 <flatcc_builder_default_alloc@@Base+0x150>
   258cc:	str	lr, [sp, #4]
   258d0:	ldr	r0, [pc, #20]	; 258ec <flatcc_builder_default_alloc@@Base+0x154>
   258d4:	add	r3, pc, r3
   258d8:	add	r1, pc, r1
   258dc:	add	r0, pc, r0
   258e0:	bl	145e8 <__assert_fail@plt>
   258e4:	andeq	ip, r1, r0, lsl pc
   258e8:	andeq	sp, r1, ip, asr r6
   258ec:	andeq	sp, r1, r0, ror #13
   258f0:	ldr	r3, [pc, #36]	; 2591c <flatcc_builder_default_alloc@@Base+0x184>
   258f4:	movw	r2, #677	; 0x2a5
   258f8:	str	r4, [sp, #-8]!
   258fc:	ldr	r1, [pc, #28]	; 25920 <flatcc_builder_default_alloc@@Base+0x188>
   25900:	str	lr, [sp, #4]
   25904:	ldr	r0, [pc, #24]	; 25924 <flatcc_builder_default_alloc@@Base+0x18c>
   25908:	add	r3, pc, r3
   2590c:	add	r3, r3, #16
   25910:	add	r1, pc, r1
   25914:	add	r0, pc, r0
   25918:	bl	145e8 <__assert_fail@plt>
   2591c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   25920:	andeq	sp, r1, r4, lsr #12
   25924:	andeq	sp, r1, r8, lsr #13
   25928:	strd	r4, [sp, #-12]!
   2592c:	cmp	r2, #0
   25930:	mov	ip, r0
   25934:	str	lr, [sp, #8]
   25938:	sub	sp, sp, #84	; 0x54
   2593c:	ldr	lr, [pc, #248]	; 25a3c <flatcc_builder_default_alloc@@Base+0x2a4>
   25940:	add	lr, pc, lr
   25944:	bne	25954 <flatcc_builder_default_alloc@@Base+0x1bc>
   25948:	ldrh	r2, [r0, #132]	; 0x84
   2594c:	cmp	r2, #0
   25950:	moveq	r2, #1
   25954:	ldrh	r0, [r1]
   25958:	cmp	r0, #3
   2595c:	bhi	2596c <flatcc_builder_default_alloc@@Base+0x1d4>
   25960:	mov	r4, #4
   25964:	mov	r0, r4
   25968:	strh	r4, [r1]
   2596c:	cmp	r2, r0
   25970:	strhhi	r2, [r1]
   25974:	cmp	r3, #0
   25978:	bne	2598c <flatcc_builder_default_alloc@@Base+0x1f4>
   2597c:	ldr	r4, [ip, #140]	; 0x8c
   25980:	sub	r2, r2, #1
   25984:	ands	r1, r2, r4
   25988:	bne	259a0 <flatcc_builder_default_alloc@@Base+0x208>
   2598c:	mov	r0, #0
   25990:	add	sp, sp, #84	; 0x54
   25994:	ldrd	r4, [sp]
   25998:	add	sp, sp, #8
   2599c:	pop	{pc}		; (ldr pc, [sp], #4)
   259a0:	ldr	r3, [pc, #152]	; 25a40 <flatcc_builder_default_alloc@@Base+0x2a8>
   259a4:	add	r0, r4, r1
   259a8:	mov	r2, #1
   259ac:	str	r1, [sp, #8]
   259b0:	cmp	r4, r0
   259b4:	ldr	r3, [lr, r3]
   259b8:	str	r0, [ip, #140]	; 0x8c
   259bc:	strd	r2, [sp, #12]
   259c0:	str	r1, [sp, #20]
   259c4:	bgt	25a18 <flatcc_builder_default_alloc@@Base+0x280>
   259c8:	mov	r3, r4
   259cc:	str	r1, [sp]
   259d0:	add	r1, sp, #16
   259d4:	ldr	r0, [ip, #36]	; 0x24
   259d8:	ldr	r5, [ip, #44]	; 0x2c
   259dc:	blx	r5
   259e0:	cmp	r0, #0
   259e4:	bne	25a14 <flatcc_builder_default_alloc@@Base+0x27c>
   259e8:	cmn	r4, #1
   259ec:	bne	2598c <flatcc_builder_default_alloc@@Base+0x1f4>
   259f0:	ldr	r3, [pc, #76]	; 25a44 <flatcc_builder_default_alloc@@Base+0x2ac>
   259f4:	movw	r2, #702	; 0x2be
   259f8:	ldr	r1, [pc, #72]	; 25a48 <flatcc_builder_default_alloc@@Base+0x2b0>
   259fc:	ldr	r0, [pc, #72]	; 25a4c <flatcc_builder_default_alloc@@Base+0x2b4>
   25a00:	add	r3, pc, r3
   25a04:	add	r3, r3, #28
   25a08:	add	r1, pc, r1
   25a0c:	add	r0, pc, r0
   25a10:	bl	145e8 <__assert_fail@plt>
   25a14:	bl	258f0 <flatcc_builder_default_alloc@@Base+0x158>
   25a18:	ldr	r3, [pc, #48]	; 25a50 <flatcc_builder_default_alloc@@Base+0x2b8>
   25a1c:	movw	r2, #673	; 0x2a1
   25a20:	ldr	r1, [pc, #44]	; 25a54 <flatcc_builder_default_alloc@@Base+0x2bc>
   25a24:	ldr	r0, [pc, #44]	; 25a58 <flatcc_builder_default_alloc@@Base+0x2c0>
   25a28:	add	r3, pc, r3
   25a2c:	add	r3, r3, #16
   25a30:	add	r1, pc, r1
   25a34:	add	r0, pc, r0
   25a38:	bl	145e8 <__assert_fail@plt>
   25a3c:			; <UNDEFINED> instruction: 0x0002f6b8
   25a40:	andeq	r0, r0, r4, rrx
   25a44:	andeq	ip, r1, r4, ror #27
   25a48:	andeq	sp, r1, ip, lsr #10
   25a4c:			; <UNDEFINED> instruction: 0x0001d5b0
   25a50:			; <UNDEFINED> instruction: 0x0001cdbc
   25a54:	andeq	sp, r1, r4, lsl #10
   25a58:	andeq	sp, r1, r8, lsl #11
   25a5c:	ldr	r3, [pc, #36]	; 25a88 <flatcc_builder_default_alloc@@Base+0x2f0>
   25a60:	movw	r2, #651	; 0x28b
   25a64:	str	r4, [sp, #-8]!
   25a68:	ldr	r1, [pc, #28]	; 25a8c <flatcc_builder_default_alloc@@Base+0x2f4>
   25a6c:	str	lr, [sp, #4]
   25a70:	ldr	r0, [pc, #24]	; 25a90 <flatcc_builder_default_alloc@@Base+0x2f8>
   25a74:	add	r3, pc, r3
   25a78:	add	r3, r3, #44	; 0x2c
   25a7c:	add	r1, pc, r1
   25a80:	add	r0, pc, r0
   25a84:	bl	145e8 <__assert_fail@plt>
   25a88:	andeq	ip, r1, r0, ror sp
   25a8c:			; <UNDEFINED> instruction: 0x0001d4b8
   25a90:	andeq	sp, r1, ip, lsr r5
   25a94:	ldr	r3, [pc, #36]	; 25ac0 <flatcc_builder_default_alloc@@Base+0x328>
   25a98:	mov	r2, #892	; 0x37c
   25a9c:	str	r4, [sp, #-8]!
   25aa0:	ldr	r1, [pc, #28]	; 25ac4 <flatcc_builder_default_alloc@@Base+0x32c>
   25aa4:	str	lr, [sp, #4]
   25aa8:	ldr	r0, [pc, #24]	; 25ac8 <flatcc_builder_default_alloc@@Base+0x330>
   25aac:	add	r3, pc, r3
   25ab0:	add	r3, r3, #56	; 0x38
   25ab4:	add	r1, pc, r1
   25ab8:	add	r0, pc, r0
   25abc:	bl	145e8 <__assert_fail@plt>
   25ac0:	andeq	ip, r1, r8, lsr sp
   25ac4:	andeq	sp, r1, r0, lsl #9
   25ac8:	ldrdeq	sp, [r1], -ip
   25acc:	ldrd	r2, [r0, #156]	; 0x9c
   25ad0:	strd	r4, [sp, #-20]!	; 0xffffffec
   25ad4:	mov	r5, r1
   25ad8:	mov	r4, r0
   25adc:	strd	r6, [sp, #8]
   25ae0:	str	lr, [sp, #16]
   25ae4:	sub	sp, sp, #12
   25ae8:	add	r1, r2, #1
   25aec:	cmp	r1, r3
   25af0:	str	r1, [r0, #156]	; 0x9c
   25af4:	ble	25bd4 <flatcc_builder_default_alloc@@Base+0x43c>
   25af8:	ldr	r3, [r0, #176]	; 0xb0
   25afc:	cmp	r1, r3
   25b00:	cmpgt	r3, #0
   25b04:	movgt	r3, #1
   25b08:	movle	r3, #0
   25b0c:	bgt	25be4 <flatcc_builder_default_alloc@@Base+0x44c>
   25b10:	add	r2, r2, r2, lsl #3
   25b14:	ldr	r1, [r0, #88]	; 0x58
   25b18:	lsl	r6, r2, #2
   25b1c:	add	r2, r6, #36	; 0x24
   25b20:	cmp	r2, r1
   25b24:	bls	25b48 <flatcc_builder_default_alloc@@Base+0x3b0>
   25b28:	mov	ip, #4
   25b2c:	add	r1, r0, #84	; 0x54
   25b30:	ldr	r0, [r0, #40]	; 0x28
   25b34:	str	ip, [sp]
   25b38:	ldr	r7, [r4, #48]	; 0x30
   25b3c:	blx	r7
   25b40:	cmp	r0, #0
   25b44:	bne	25bec <flatcc_builder_default_alloc@@Base+0x454>
   25b48:	ldr	r2, [r4, #84]	; 0x54
   25b4c:	add	r2, r2, r6
   25b50:	cmp	r2, #0
   25b54:	str	r2, [r4, #32]
   25b58:	beq	25be4 <flatcc_builder_default_alloc@@Base+0x44c>
   25b5c:	ldr	r3, [r4, #88]	; 0x58
   25b60:	movw	r0, #36409	; 0x8e39
   25b64:	movt	r0, #14563	; 0x38e3
   25b68:	ldr	r1, [r4, #176]	; 0xb0
   25b6c:	umull	r0, r3, r0, r3
   25b70:	lsr	r3, r3, #3
   25b74:	cmp	r3, r1
   25b78:	cmpgt	r1, #0
   25b7c:	movgt	r3, r1
   25b80:	str	r3, [r4, #160]	; 0xa0
   25b84:	ldr	r3, [r4, #20]
   25b88:	mov	r1, #0
   25b8c:	mvn	lr, #3
   25b90:	mov	r0, r1
   25b94:	ldr	ip, [r4, #28]
   25b98:	ldrh	r6, [r4, #130]	; 0x82
   25b9c:	str	r3, [r2, #8]
   25ba0:	add	r3, r3, ip
   25ba4:	add	r3, r3, #7
   25ba8:	bic	r3, r3, #7
   25bac:	strh	r6, [r2, #12]
   25bb0:	strh	r5, [r4, #130]	; 0x82
   25bb4:	stm	r2, {ip, lr}
   25bb8:	str	r1, [r4, #20]
   25bbc:	str	r3, [r4, #28]
   25bc0:	add	sp, sp, #12
   25bc4:	ldrd	r4, [sp]
   25bc8:	ldrd	r6, [sp, #8]
   25bcc:	add	sp, sp, #16
   25bd0:	pop	{pc}		; (ldr pc, [sp], #4)
   25bd4:	ldr	r2, [r0, #32]
   25bd8:	add	r2, r2, #36	; 0x24
   25bdc:	str	r2, [r0, #32]
   25be0:	b	25b84 <flatcc_builder_default_alloc@@Base+0x3ec>
   25be4:	mvn	r0, #0
   25be8:	b	25bc0 <flatcc_builder_default_alloc@@Base+0x428>
   25bec:	bl	258bc <flatcc_builder_default_alloc@@Base+0x124>
   25bf0:	strd	r4, [sp, #-20]!	; 0xffffffec
   25bf4:	mov	r4, r0
   25bf8:	mov	r5, #4
   25bfc:	ldrh	r0, [r0, #128]	; 0x80
   25c00:	strd	r6, [sp, #8]
   25c04:	str	lr, [sp, #16]
   25c08:	sub	sp, sp, #92	; 0x5c
   25c0c:	ldr	lr, [pc, #464]	; 25de4 <flatcc_builder_default_alloc@@Base+0x64c>
   25c10:	str	r2, [sp, #12]
   25c14:	cmp	r0, #3
   25c18:	ldr	r6, [r4, #136]	; 0x88
   25c1c:	movls	r0, #4
   25c20:	str	r5, [sp, #16]
   25c24:	str	r5, [sp, #28]
   25c28:	strhls	r0, [r4, #128]	; 0x80
   25c2c:	mov	r0, #1
   25c30:	lsls	ip, r2, #2
   25c34:	add	lr, pc, lr
   25c38:	str	r0, [sp, #20]
   25c3c:	add	r0, sp, #12
   25c40:	str	r0, [sp, #24]
   25c44:	and	r0, r6, #3
   25c48:	beq	25c64 <flatcc_builder_default_alloc@@Base+0x4cc>
   25c4c:	add	r5, ip, r5
   25c50:	mov	r7, #2
   25c54:	str	r5, [sp, #16]
   25c58:	str	r7, [sp, #20]
   25c5c:	str	r1, [sp, #32]
   25c60:	str	ip, [sp, #36]	; 0x24
   25c64:	cmp	r0, #0
   25c68:	beq	25c98 <flatcc_builder_default_alloc@@Base+0x500>
   25c6c:	ldr	r7, [pc, #372]	; 25de8 <flatcc_builder_default_alloc@@Base+0x650>
   25c70:	add	r5, r5, r0
   25c74:	ldr	ip, [sp, #20]
   25c78:	str	r5, [sp, #16]
   25c7c:	ldr	r7, [lr, r7]
   25c80:	add	lr, sp, #88	; 0x58
   25c84:	add	ip, ip, #1
   25c88:	add	lr, lr, ip, lsl #3
   25c8c:	str	ip, [sp, #20]
   25c90:	str	r7, [lr, #-72]	; 0xffffffb8
   25c94:	str	r0, [lr, #-68]	; 0xffffffbc
   25c98:	cmp	r2, #0
   25c9c:	beq	25d28 <flatcc_builder_default_alloc@@Base+0x590>
   25ca0:	sub	r6, r1, r6
   25ca4:	add	lr, r2, r3
   25ca8:	add	r6, r6, r5
   25cac:	mov	r2, r3
   25cb0:	b	25ce0 <flatcc_builder_default_alloc@@Base+0x548>
   25cb4:	sub	r0, r6, r1
   25cb8:	cmp	r3, #0
   25cbc:	add	r0, r0, ip
   25cc0:	str	r0, [r1, #-4]
   25cc4:	beq	25cd4 <flatcc_builder_default_alloc@@Base+0x53c>
   25cc8:	ldrb	r0, [r2]
   25ccc:	cmp	r0, #0
   25cd0:	beq	25d98 <flatcc_builder_default_alloc@@Base+0x600>
   25cd4:	add	r2, r2, #1
   25cd8:	cmp	lr, r2
   25cdc:	beq	25d24 <flatcc_builder_default_alloc@@Base+0x58c>
   25ce0:	ldr	ip, [r1], #4
   25ce4:	cmp	ip, #0
   25ce8:	bne	25cb4 <flatcc_builder_default_alloc@@Base+0x51c>
   25cec:	cmp	r3, #0
   25cf0:	beq	25d74 <flatcc_builder_default_alloc@@Base+0x5dc>
   25cf4:	ldrb	r0, [r2]
   25cf8:	cmp	r0, #0
   25cfc:	beq	25cd4 <flatcc_builder_default_alloc@@Base+0x53c>
   25d00:	ldr	r3, [pc, #228]	; 25dec <flatcc_builder_default_alloc@@Base+0x654>
   25d04:	movw	r2, #1461	; 0x5b5
   25d08:	ldr	r1, [pc, #224]	; 25df0 <flatcc_builder_default_alloc@@Base+0x658>
   25d0c:	ldr	r0, [pc, #224]	; 25df4 <flatcc_builder_default_alloc@@Base+0x65c>
   25d10:	add	r3, pc, r3
   25d14:	add	r3, r3, #76	; 0x4c
   25d18:	add	r1, pc, r1
   25d1c:	add	r0, pc, r0
   25d20:	bl	145e8 <__assert_fail@plt>
   25d24:	ldr	r6, [r4, #136]	; 0x88
   25d28:	sub	r7, r6, r5
   25d2c:	cmp	r7, r6
   25d30:	bge	25dc0 <flatcc_builder_default_alloc@@Base+0x628>
   25d34:	mov	r3, r7
   25d38:	add	r1, sp, #24
   25d3c:	str	r5, [sp]
   25d40:	ldr	r2, [sp, #20]
   25d44:	ldr	r0, [r4, #36]	; 0x24
   25d48:	ldr	r5, [r4, #44]	; 0x2c
   25d4c:	blx	r5
   25d50:	cmp	r0, #0
   25d54:	bne	25dbc <flatcc_builder_default_alloc@@Base+0x624>
   25d58:	mov	r0, r7
   25d5c:	str	r7, [r4, #136]	; 0x88
   25d60:	add	sp, sp, #92	; 0x5c
   25d64:	ldrd	r4, [sp]
   25d68:	ldrd	r6, [sp, #8]
   25d6c:	add	sp, sp, #16
   25d70:	pop	{pc}		; (ldr pc, [sp], #4)
   25d74:	ldr	r3, [pc, #124]	; 25df8 <flatcc_builder_default_alloc@@Base+0x660>
   25d78:	movw	r2, #1463	; 0x5b7
   25d7c:	ldr	r1, [pc, #120]	; 25dfc <flatcc_builder_default_alloc@@Base+0x664>
   25d80:	ldr	r0, [pc, #120]	; 25e00 <flatcc_builder_default_alloc@@Base+0x668>
   25d84:	add	r3, pc, r3
   25d88:	add	r3, r3, #76	; 0x4c
   25d8c:	add	r1, pc, r1
   25d90:	add	r0, pc, r0
   25d94:	bl	145e8 <__assert_fail@plt>
   25d98:	ldr	r3, [pc, #100]	; 25e04 <flatcc_builder_default_alloc@@Base+0x66c>
   25d9c:	movw	r2, #1457	; 0x5b1
   25da0:	ldr	r1, [pc, #96]	; 25e08 <flatcc_builder_default_alloc@@Base+0x670>
   25da4:	ldr	r0, [pc, #96]	; 25e0c <flatcc_builder_default_alloc@@Base+0x674>
   25da8:	add	r3, pc, r3
   25dac:	add	r3, r3, #76	; 0x4c
   25db0:	add	r1, pc, r1
   25db4:	add	r0, pc, r0
   25db8:	bl	145e8 <__assert_fail@plt>
   25dbc:	bl	25a5c <flatcc_builder_default_alloc@@Base+0x2c4>
   25dc0:	ldr	r3, [pc, #72]	; 25e10 <flatcc_builder_default_alloc@@Base+0x678>
   25dc4:	movw	r2, #647	; 0x287
   25dc8:	ldr	r1, [pc, #68]	; 25e14 <flatcc_builder_default_alloc@@Base+0x67c>
   25dcc:	ldr	r0, [pc, #68]	; 25e18 <flatcc_builder_default_alloc@@Base+0x680>
   25dd0:	add	r3, pc, r3
   25dd4:	add	r3, r3, #44	; 0x2c
   25dd8:	add	r1, pc, r1
   25ddc:	add	r0, pc, r0
   25de0:	bl	145e8 <__assert_fail@plt>
   25de4:	andeq	pc, r2, r4, asr #7
   25de8:	andeq	r0, r0, r4, rrx
   25dec:	ldrdeq	ip, [r1], -r4
   25df0:	andeq	sp, r1, ip, lsl r2
   25df4:	andeq	sp, r1, r4, lsr #5
   25df8:	andeq	ip, r1, r0, ror #20
   25dfc:	andeq	sp, r1, r8, lsr #3
   25e00:	andeq	sp, r1, ip, lsr #4
   25e04:	andeq	ip, r1, ip, lsr sl
   25e08:	andeq	sp, r1, r4, lsl #3
   25e0c:	strdeq	sp, [r1], -ip
   25e10:	andeq	ip, r1, r4, lsl sl
   25e14:	andeq	sp, r1, ip, asr r1
   25e18:	andeq	sp, r1, r0, ror #3

00025e1c <flatcc_builder_flush_vtable_cache@@Base>:
   25e1c:	ldr	r3, [r0, #116]	; 0x74
   25e20:	cmp	r3, #0
   25e24:	bxeq	lr
   25e28:	str	r4, [sp, #-8]!
   25e2c:	mov	r4, r0
   25e30:	mov	r1, #0
   25e34:	ldr	r0, [r0, #92]	; 0x5c
   25e38:	ldr	r2, [r4, #96]	; 0x60
   25e3c:	str	lr, [sp, #4]
   25e40:	bl	14594 <memset@plt>
   25e44:	mov	r3, #16
   25e48:	mov	r2, #0
   25e4c:	strd	r2, [r4, #120]	; 0x78
   25e50:	ldr	r4, [sp]
   25e54:	add	sp, sp, #4
   25e58:	pop	{pc}		; (ldr pc, [sp], #4)

00025e5c <flatcc_builder_custom_init@@Base>:
   25e5c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   25e60:	mov	r5, r3
   25e64:	mov	r4, r0
   25e68:	strd	r6, [sp, #8]
   25e6c:	mov	r6, r1
   25e70:	mov	r1, #0
   25e74:	ldr	r7, [pc, #124]	; 25ef8 <flatcc_builder_custom_init@@Base+0x9c>
   25e78:	strd	r8, [sp, #16]
   25e7c:	mov	r8, r2
   25e80:	mov	r2, #232	; 0xe8
   25e84:	str	sl, [sp, #24]
   25e88:	str	lr, [sp, #28]
   25e8c:	ldr	r9, [sp, #32]
   25e90:	bl	14594 <memset@plt>
   25e94:	cmp	r6, #0
   25e98:	add	r7, pc, r7
   25e9c:	beq	25ed0 <flatcc_builder_custom_init@@Base+0x74>
   25ea0:	cmp	r5, #0
   25ea4:	beq	25eec <flatcc_builder_custom_init@@Base+0x90>
   25ea8:	ldr	sl, [sp, #24]
   25eac:	mov	r0, #0
   25eb0:	strd	r8, [r4, #36]	; 0x24
   25eb4:	str	r6, [r4, #44]	; 0x2c
   25eb8:	str	r5, [r4, #48]	; 0x30
   25ebc:	ldrd	r4, [sp]
   25ec0:	ldrd	r6, [sp, #8]
   25ec4:	ldrd	r8, [sp, #16]
   25ec8:	add	sp, sp, #28
   25ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   25ed0:	ldr	r3, [pc, #36]	; 25efc <flatcc_builder_custom_init@@Base+0xa0>
   25ed4:	mov	r2, #1
   25ed8:	cmp	r5, #0
   25edc:	add	r8, r4, #188	; 0xbc
   25ee0:	str	r2, [r4, #184]	; 0xb8
   25ee4:	ldr	r6, [r7, r3]
   25ee8:	bne	25ea8 <flatcc_builder_custom_init@@Base+0x4c>
   25eec:	ldr	r3, [pc, #12]	; 25f00 <flatcc_builder_custom_init@@Base+0xa4>
   25ef0:	ldr	r5, [r7, r3]
   25ef4:	b	25ea8 <flatcc_builder_custom_init@@Base+0x4c>
   25ef8:	andeq	pc, r2, r0, ror #2
   25efc:	andeq	r0, r0, r8, ror r0
   25f00:	andeq	r0, r0, r0, ror r0

00025f04 <flatcc_builder_init@@Base>:
   25f04:	mov	ip, #0
   25f08:	push	{lr}		; (str lr, [sp, #-4]!)
   25f0c:	sub	sp, sp, #12
   25f10:	mov	r3, ip
   25f14:	mov	r2, ip
   25f18:	mov	r1, ip
   25f1c:	str	ip, [sp]
   25f20:	bl	25e5c <flatcc_builder_custom_init@@Base>
   25f24:	add	sp, sp, #12
   25f28:	pop	{pc}		; (ldr pc, [sp], #4)

00025f2c <flatcc_builder_custom_reset@@Base>:
   25f2c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   25f30:	mov	r5, #0
   25f34:	mov	r4, r0
   25f38:	strd	r6, [sp, #8]
   25f3c:	mov	r6, r0
   25f40:	strd	r8, [sp, #16]
   25f44:	mov	r8, r1
   25f48:	mov	r9, r2
   25f4c:	str	lr, [sp, #24]
   25f50:	sub	sp, sp, #12
   25f54:	b	25fa4 <flatcc_builder_custom_reset@@Base+0x78>
   25f58:	cmp	r5, #5
   25f5c:	cmpne	r9, #0
   25f60:	beq	25f88 <flatcc_builder_custom_reset@@Base+0x5c>
   25f64:	mov	r3, #1
   25f68:	str	r5, [sp]
   25f6c:	mov	r2, r3
   25f70:	ldr	r0, [r6, #40]	; 0x28
   25f74:	ldr	r7, [r6, #48]	; 0x30
   25f78:	blx	r7
   25f7c:	cmp	r0, #0
   25f80:	bne	26094 <flatcc_builder_custom_reset@@Base+0x168>
   25f84:	ldr	r0, [r4, #52]	; 0x34
   25f88:	mov	r1, #0
   25f8c:	ldr	r2, [r4, #56]	; 0x38
   25f90:	bl	14594 <memset@plt>
   25f94:	add	r5, r5, #1
   25f98:	add	r4, r4, #8
   25f9c:	cmp	r5, #8
   25fa0:	beq	25fe4 <flatcc_builder_custom_reset@@Base+0xb8>
   25fa4:	ldr	r0, [r4, #52]	; 0x34
   25fa8:	add	r1, r4, #52	; 0x34
   25fac:	cmp	r0, #0
   25fb0:	bne	25f58 <flatcc_builder_custom_reset@@Base+0x2c>
   25fb4:	ldr	r3, [r4, #56]	; 0x38
   25fb8:	cmp	r3, #0
   25fbc:	beq	25f94 <flatcc_builder_custom_reset@@Base+0x68>
   25fc0:	ldr	r3, [pc, #212]	; 2609c <flatcc_builder_custom_reset@@Base+0x170>
   25fc4:	movw	r2, #434	; 0x1b2
   25fc8:	ldr	r1, [pc, #208]	; 260a0 <flatcc_builder_custom_reset@@Base+0x174>
   25fcc:	ldr	r0, [pc, #208]	; 260a4 <flatcc_builder_custom_reset@@Base+0x178>
   25fd0:	add	r3, pc, r3
   25fd4:	add	r3, r3, #108	; 0x6c
   25fd8:	add	r1, pc, r1
   25fdc:	add	r0, pc, r0
   25fe0:	bl	145e8 <__assert_fail@plt>
   25fe4:	mov	r2, #0
   25fe8:	ldr	r0, [r6, #52]	; 0x34
   25fec:	ldr	r3, [r6, #124]	; 0x7c
   25ff0:	ldr	r1, [r6, #60]	; 0x3c
   25ff4:	str	r0, [r6, #4]
   25ff8:	str	r2, [r6, #120]	; 0x78
   25ffc:	cmp	r3, r2
   26000:	ldr	r2, [r6, #76]	; 0x4c
   26004:	movne	r3, #16
   26008:	strne	r3, [r6, #124]	; 0x7c
   2600c:	mov	r3, #0
   26010:	cmp	r8, r3
   26014:	str	r2, [r6]
   26018:	str	r1, [r6, #16]
   2601c:	str	r3, [r6, #20]
   26020:	str	r3, [r6, #24]
   26024:	str	r3, [r6, #32]
   26028:	strh	r3, [r6, #128]	; 0x80
   2602c:	str	r3, [r6, #136]	; 0x88
   26030:	str	r3, [r6, #140]	; 0x8c
   26034:	str	r3, [r6, #148]	; 0x94
   26038:	str	r3, [r6, #152]	; 0x98
   2603c:	str	r3, [r6, #156]	; 0x9c
   26040:	str	r3, [r6, #160]	; 0xa0
   26044:	bne	2606c <flatcc_builder_custom_reset@@Base+0x140>
   26048:	ldr	r0, [r6, #184]	; 0xb8
   2604c:	cmp	r0, #0
   26050:	bne	26084 <flatcc_builder_custom_reset@@Base+0x158>
   26054:	add	sp, sp, #12
   26058:	ldrd	r4, [sp]
   2605c:	ldrd	r6, [sp, #8]
   26060:	ldrd	r8, [sp, #16]
   26064:	add	sp, sp, #24
   26068:	pop	{pc}		; (ldr pc, [sp], #4)
   2606c:	ldr	r0, [r6, #184]	; 0xb8
   26070:	str	r3, [r6, #172]	; 0xac
   26074:	str	r3, [r6, #176]	; 0xb0
   26078:	str	r3, [r6, #180]	; 0xb4
   2607c:	cmp	r0, #0
   26080:	beq	26054 <flatcc_builder_custom_reset@@Base+0x128>
   26084:	add	r0, r6, #188	; 0xbc
   26088:	bl	29e64 <flatcc_emitter_reset@@Base>
   2608c:	mov	r0, #0
   26090:	b	26054 <flatcc_builder_custom_reset@@Base+0x128>
   26094:	mvn	r0, #0
   26098:	b	26054 <flatcc_builder_custom_reset@@Base+0x128>
   2609c:	andeq	ip, r1, r4, lsl r8
   260a0:	andeq	ip, r1, ip, asr pc
   260a4:	strdeq	ip, [r1], -r4

000260a8 <flatcc_builder_reset@@Base>:
   260a8:	mov	r2, #0
   260ac:	mov	r1, r2
   260b0:	b	25f2c <flatcc_builder_custom_reset@@Base>

000260b4 <flatcc_builder_clear@@Base>:
   260b4:	strd	r4, [sp, #-20]!	; 0xffffffec
   260b8:	mov	r4, #0
   260bc:	add	r5, r0, #52	; 0x34
   260c0:	strd	r6, [sp, #8]
   260c4:	mov	r6, r0
   260c8:	str	lr, [sp, #16]
   260cc:	sub	sp, sp, #12
   260d0:	mov	r3, #0
   260d4:	mov	r1, r5
   260d8:	str	r4, [sp]
   260dc:	mov	r2, r3
   260e0:	add	r4, r4, #1
   260e4:	ldr	r0, [r6, #40]	; 0x28
   260e8:	add	r5, r5, #8
   260ec:	ldr	r7, [r6, #48]	; 0x30
   260f0:	blx	r7
   260f4:	cmp	r4, #8
   260f8:	bne	260d0 <flatcc_builder_clear@@Base+0x1c>
   260fc:	ldr	r3, [r6, #184]	; 0xb8
   26100:	cmp	r3, #0
   26104:	bne	2612c <flatcc_builder_clear@@Base+0x78>
   26108:	mov	r0, r6
   2610c:	mov	r2, #232	; 0xe8
   26110:	mov	r1, #0
   26114:	add	sp, sp, #12
   26118:	ldrd	r4, [sp]
   2611c:	ldrd	r6, [sp, #8]
   26120:	ldr	lr, [sp, #16]
   26124:	add	sp, sp, #20
   26128:	b	14594 <memset@plt>
   2612c:	add	r0, r6, #188	; 0xbc
   26130:	bl	29f38 <flatcc_emitter_clear@@Base>
   26134:	b	26108 <flatcc_builder_clear@@Base+0x54>

00026138 <flatcc_builder_enter_user_frame_ptr@@Base>:
   26138:	strd	r4, [sp, #-20]!	; 0xffffffec
   2613c:	add	r4, r1, #3
   26140:	mov	r5, r0
   26144:	ldr	r3, [r0, #112]	; 0x70
   26148:	bic	r4, r4, #3
   2614c:	strd	r6, [sp, #8]
   26150:	add	r4, r4, #4
   26154:	ldr	r6, [r0, #228]	; 0xe4
   26158:	str	lr, [sp, #16]
   2615c:	sub	sp, sp, #12
   26160:	add	r2, r6, r4
   26164:	cmp	r2, r3
   26168:	bls	26190 <flatcc_builder_enter_user_frame_ptr@@Base+0x58>
   2616c:	mov	ip, #7
   26170:	add	r1, r0, #108	; 0x6c
   26174:	ldr	r0, [r0, #40]	; 0x28
   26178:	mov	r3, #0
   2617c:	str	ip, [sp]
   26180:	ldr	r7, [r5, #48]	; 0x30
   26184:	blx	r7
   26188:	cmp	r0, #0
   2618c:	bne	261e4 <flatcc_builder_enter_user_frame_ptr@@Base+0xac>
   26190:	ldr	r7, [r5, #108]	; 0x6c
   26194:	adds	r3, r7, r6
   26198:	moveq	r0, r3
   2619c:	beq	261d0 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   261a0:	mov	r2, r4
   261a4:	mov	r0, r3
   261a8:	mov	r1, #0
   261ac:	bl	14594 <memset@plt>
   261b0:	ldr	r2, [r5, #224]	; 0xe0
   261b4:	add	r0, r0, #4
   261b8:	str	r2, [r7, r6]
   261bc:	ldr	r3, [r5, #228]	; 0xe4
   261c0:	add	r4, r3, r4
   261c4:	add	r3, r3, #4
   261c8:	str	r3, [r5, #224]	; 0xe0
   261cc:	str	r4, [r5, #228]	; 0xe4
   261d0:	add	sp, sp, #12
   261d4:	ldrd	r4, [sp]
   261d8:	ldrd	r6, [sp, #8]
   261dc:	add	sp, sp, #16
   261e0:	pop	{pc}		; (ldr pc, [sp], #4)
   261e4:	bl	258bc <flatcc_builder_default_alloc@@Base+0x124>

000261e8 <flatcc_builder_enter_user_frame@@Base>:
   261e8:	strd	r4, [sp, #-20]!	; 0xffffffec
   261ec:	add	r4, r1, #3
   261f0:	mov	r5, r0
   261f4:	ldr	r3, [r0, #112]	; 0x70
   261f8:	bic	r4, r4, #3
   261fc:	strd	r6, [sp, #8]
   26200:	add	r4, r4, #4
   26204:	ldr	r6, [r0, #228]	; 0xe4
   26208:	str	lr, [sp, #16]
   2620c:	sub	sp, sp, #12
   26210:	add	r2, r6, r4
   26214:	cmp	r2, r3
   26218:	bls	26240 <flatcc_builder_enter_user_frame@@Base+0x58>
   2621c:	mov	ip, #7
   26220:	add	r1, r0, #108	; 0x6c
   26224:	ldr	r0, [r0, #40]	; 0x28
   26228:	mov	r3, #0
   2622c:	str	ip, [sp]
   26230:	ldr	r7, [r5, #48]	; 0x30
   26234:	blx	r7
   26238:	cmp	r0, #0
   2623c:	bne	26288 <flatcc_builder_enter_user_frame@@Base+0xa0>
   26240:	ldr	r7, [r5, #108]	; 0x6c
   26244:	adds	r0, r7, r6
   26248:	beq	26274 <flatcc_builder_enter_user_frame@@Base+0x8c>
   2624c:	mov	r2, r4
   26250:	mov	r1, #0
   26254:	bl	14594 <memset@plt>
   26258:	ldr	r3, [r5, #224]	; 0xe0
   2625c:	str	r3, [r7, r6]
   26260:	ldr	r0, [r5, #228]	; 0xe4
   26264:	add	r4, r0, r4
   26268:	add	r0, r0, #4
   2626c:	str	r0, [r5, #224]	; 0xe0
   26270:	str	r4, [r5, #228]	; 0xe4
   26274:	add	sp, sp, #12
   26278:	ldrd	r4, [sp]
   2627c:	ldrd	r6, [sp, #8]
   26280:	add	sp, sp, #16
   26284:	pop	{pc}		; (ldr pc, [sp], #4)
   26288:	bl	258bc <flatcc_builder_default_alloc@@Base+0x124>

0002628c <flatcc_builder_exit_user_frame@@Base>:
   2628c:	ldr	r2, [r0, #224]	; 0xe0
   26290:	cmp	r2, #0
   26294:	beq	262bc <flatcc_builder_exit_user_frame@@Base+0x30>
   26298:	mov	r3, r0
   2629c:	sub	r0, r2, #4
   262a0:	ldr	r1, [r3, #108]	; 0x6c
   262a4:	str	r0, [r3, #228]	; 0xe4
   262a8:	add	r2, r1, r2
   262ac:	ldr	r2, [r2, #-4]
   262b0:	mov	r0, r2
   262b4:	str	r2, [r3, #224]	; 0xe0
   262b8:	bx	lr
   262bc:	ldr	r3, [pc, #36]	; 262e8 <flatcc_builder_exit_user_frame@@Base+0x5c>
   262c0:	movw	r2, #542	; 0x21e
   262c4:	str	r4, [sp, #-8]!
   262c8:	ldr	r1, [pc, #28]	; 262ec <flatcc_builder_exit_user_frame@@Base+0x60>
   262cc:	str	lr, [sp, #4]
   262d0:	ldr	r0, [pc, #24]	; 262f0 <flatcc_builder_exit_user_frame@@Base+0x64>
   262d4:	add	r3, pc, r3
   262d8:	add	r3, r3, #136	; 0x88
   262dc:	add	r1, pc, r1
   262e0:	add	r0, pc, r0
   262e4:	bl	145e8 <__assert_fail@plt>
   262e8:	andeq	ip, r1, r0, lsl r5
   262ec:	andeq	ip, r1, r8, asr ip
   262f0:	andeq	ip, r1, r4, lsl #26

000262f4 <flatcc_builder_exit_user_frame_at@@Base>:
   262f4:	ldr	r2, [r0, #224]	; 0xe0
   262f8:	cmp	r2, r1
   262fc:	bcc	26308 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   26300:	str	r1, [r0, #224]	; 0xe0
   26304:	b	2628c <flatcc_builder_exit_user_frame@@Base>
   26308:	ldr	r3, [pc, #36]	; 26334 <flatcc_builder_exit_user_frame_at@@Base+0x40>
   2630c:	movw	r2, #551	; 0x227
   26310:	str	r4, [sp, #-8]!
   26314:	ldr	r1, [pc, #28]	; 26338 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   26318:	str	lr, [sp, #4]
   2631c:	ldr	r0, [pc, #24]	; 2633c <flatcc_builder_exit_user_frame_at@@Base+0x48>
   26320:	add	r3, pc, r3
   26324:	add	r3, r3, #168	; 0xa8
   26328:	add	r1, pc, r1
   2632c:	add	r0, pc, r0
   26330:	bl	145e8 <__assert_fail@plt>
   26334:	andeq	ip, r1, r4, asr #9
   26338:	andeq	ip, r1, ip, lsl #24
   2633c:	ldrdeq	ip, [r1], -r4

00026340 <flatcc_builder_get_current_user_frame@@Base>:
   26340:	ldr	r0, [r0, #224]	; 0xe0
   26344:	bx	lr

00026348 <flatcc_builder_get_user_frame_ptr@@Base>:
   26348:	ldr	r0, [r0, #108]	; 0x6c
   2634c:	add	r0, r0, r1
   26350:	bx	lr

00026354 <flatcc_builder_embed_buffer@@Base>:
   26354:	strd	r4, [sp, #-20]!	; 0xffffffec
   26358:	mov	r5, r3
   2635c:	mov	r4, r0
   26360:	ldr	r3, [r0, #152]	; 0x98
   26364:	strd	r6, [sp, #8]
   26368:	mov	r7, r2
   2636c:	mov	r2, r1
   26370:	ldr	r6, [pc, #356]	; 264dc <flatcc_builder_embed_buffer@@Base+0x188>
   26374:	str	lr, [sp, #16]
   26378:	sub	sp, sp, #92	; 0x5c
   2637c:	add	r1, sp, #112	; 0x70
   26380:	adds	r3, r3, #0
   26384:	movne	r3, #1
   26388:	bl	25928 <flatcc_builder_default_alloc@@Base+0x190>
   2638c:	cmp	r0, #0
   26390:	add	r6, pc, r6
   26394:	bne	264ac <flatcc_builder_embed_buffer@@Base+0x158>
   26398:	ldr	r3, [sp, #116]	; 0x74
   2639c:	str	r0, [sp, #16]
   263a0:	ldr	r1, [r4, #136]	; 0x88
   263a4:	str	r0, [sp, #20]
   263a8:	ldrh	r2, [sp, #112]	; 0x70
   263ac:	tst	r3, #2
   263b0:	ldr	r0, [r4, #152]	; 0x98
   263b4:	movne	ip, #4
   263b8:	moveq	ip, #0
   263bc:	sub	r3, r1, r5
   263c0:	sub	r3, r3, ip
   263c4:	sub	r2, r2, #1
   263c8:	and	r3, r3, r2
   263cc:	add	r2, r5, r3
   263d0:	cmp	r0, #0
   263d4:	str	r2, [sp, #12]
   263d8:	beq	263fc <flatcc_builder_embed_buffer@@Base+0xa8>
   263dc:	mov	ip, #1
   263e0:	mov	r2, #4
   263e4:	mov	r0, r2
   263e8:	str	r2, [sp, #16]
   263ec:	str	ip, [sp, #20]
   263f0:	add	ip, sp, #12
   263f4:	str	ip, [sp, #24]
   263f8:	str	r2, [sp, #28]
   263fc:	cmp	r5, #0
   26400:	beq	26428 <flatcc_builder_embed_buffer@@Base+0xd4>
   26404:	ldr	r2, [sp, #20]
   26408:	add	ip, sp, #88	; 0x58
   2640c:	add	r0, r0, r5
   26410:	str	r0, [sp, #16]
   26414:	add	r2, r2, #1
   26418:	add	ip, ip, r2, lsl #3
   2641c:	str	r2, [sp, #20]
   26420:	str	r7, [ip, #-72]	; 0xffffffb8
   26424:	str	r5, [ip, #-68]	; 0xffffffbc
   26428:	cmp	r3, #0
   2642c:	bne	2647c <flatcc_builder_embed_buffer@@Base+0x128>
   26430:	sub	r5, r1, r0
   26434:	cmp	r1, r5
   26438:	ble	264b8 <flatcc_builder_embed_buffer@@Base+0x164>
   2643c:	mov	r3, r5
   26440:	add	r1, sp, #24
   26444:	str	r0, [sp]
   26448:	ldr	r2, [sp, #20]
   2644c:	ldr	r0, [r4, #36]	; 0x24
   26450:	ldr	r6, [r4, #44]	; 0x2c
   26454:	blx	r6
   26458:	cmp	r0, #0
   2645c:	streq	r5, [r4, #136]	; 0x88
   26460:	bne	264b4 <flatcc_builder_embed_buffer@@Base+0x160>
   26464:	mov	r0, r5
   26468:	add	sp, sp, #92	; 0x5c
   2646c:	ldrd	r4, [sp]
   26470:	ldrd	r6, [sp, #8]
   26474:	add	sp, sp, #16
   26478:	pop	{pc}		; (ldr pc, [sp], #4)
   2647c:	ldr	ip, [pc, #92]	; 264e0 <flatcc_builder_embed_buffer@@Base+0x18c>
   26480:	add	r0, r0, r3
   26484:	ldr	r2, [sp, #20]
   26488:	str	r0, [sp, #16]
   2648c:	ldr	lr, [r6, ip]
   26490:	add	ip, sp, #88	; 0x58
   26494:	add	r2, r2, #1
   26498:	add	ip, ip, r2, lsl #3
   2649c:	str	r2, [sp, #20]
   264a0:	str	lr, [ip, #-72]	; 0xffffffb8
   264a4:	str	r3, [ip, #-68]	; 0xffffffbc
   264a8:	b	26430 <flatcc_builder_embed_buffer@@Base+0xdc>
   264ac:	mov	r5, #0
   264b0:	b	26464 <flatcc_builder_embed_buffer@@Base+0x110>
   264b4:	bl	25a5c <flatcc_builder_default_alloc@@Base+0x2c4>
   264b8:	ldr	r3, [pc, #36]	; 264e4 <flatcc_builder_embed_buffer@@Base+0x190>
   264bc:	movw	r2, #647	; 0x287
   264c0:	ldr	r1, [pc, #32]	; 264e8 <flatcc_builder_embed_buffer@@Base+0x194>
   264c4:	ldr	r0, [pc, #32]	; 264ec <flatcc_builder_embed_buffer@@Base+0x198>
   264c8:	add	r3, pc, r3
   264cc:	add	r3, r3, #44	; 0x2c
   264d0:	add	r1, pc, r1
   264d4:	add	r0, pc, r0
   264d8:	bl	145e8 <__assert_fail@plt>
   264dc:	andeq	lr, r2, r8, ror #24
   264e0:	andeq	r0, r0, r4, rrx
   264e4:	andeq	ip, r1, ip, lsl r3
   264e8:	andeq	ip, r1, r4, ror #20
   264ec:	andeq	ip, r1, r8, ror #21

000264f0 <flatcc_builder_create_buffer@@Base>:
   264f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   264f4:	mov	r4, r0
   264f8:	strd	r6, [sp, #8]
   264fc:	mov	r6, r3
   26500:	strd	r8, [sp, #16]
   26504:	mov	r8, #0
   26508:	strd	sl, [sp, #24]
   2650c:	mov	sl, r1
   26510:	str	lr, [sp, #32]
   26514:	sub	sp, sp, #100	; 0x64
   26518:	ldr	r9, [sp, #140]	; 0x8c
   2651c:	add	r1, sp, #136	; 0x88
   26520:	str	r8, [sp, #20]
   26524:	ldr	r5, [pc, #496]	; 2671c <flatcc_builder_create_buffer@@Base+0x22c>
   26528:	and	r7, r9, #1
   2652c:	mov	r3, r7
   26530:	bl	25928 <flatcc_builder_default_alloc@@Base+0x190>
   26534:	cmp	r0, r8
   26538:	add	r5, pc, r5
   2653c:	bne	26690 <flatcc_builder_create_buffer@@Base+0x1a0>
   26540:	ldrh	r2, [r4, #128]	; 0x80
   26544:	ldrh	r3, [sp, #136]	; 0x88
   26548:	ldr	ip, [r4, #136]	; 0x88
   2654c:	cmp	r2, r3
   26550:	strhcc	r3, [r4, #128]	; 0x80
   26554:	cmp	sl, #0
   26558:	ldrne	r2, [sl]
   2655c:	ldreq	lr, [sp, #20]
   26560:	movne	lr, r2
   26564:	strne	r2, [sp, #20]
   26568:	sub	r2, r3, #1
   2656c:	sub	r3, ip, #4
   26570:	cmp	lr, #0
   26574:	movne	lr, #4
   26578:	tst	r9, #2
   2657c:	movne	r0, #4
   26580:	moveq	r0, #0
   26584:	sub	r3, r3, lr
   26588:	ands	r1, r9, #3
   2658c:	sub	r3, r3, r0
   26590:	and	r3, r3, r2
   26594:	bne	266b0 <flatcc_builder_create_buffer@@Base+0x1c0>
   26598:	mov	r9, r1
   2659c:	mov	r8, #1
   265a0:	mov	r0, #4
   265a4:	add	sl, sp, #96	; 0x60
   265a8:	add	r2, r9, #1
   265ac:	str	r0, [sp, #24]
   265b0:	add	r2, sl, r2, lsl #3
   265b4:	mov	fp, #4
   265b8:	add	sl, sp, #12
   265bc:	cmp	lr, #0
   265c0:	str	r8, [sp, #28]
   265c4:	strd	sl, [r2, #-72]	; 0xffffffb8
   265c8:	beq	265f4 <flatcc_builder_create_buffer@@Base+0x104>
   265cc:	add	r2, sp, #96	; 0x60
   265d0:	add	r8, r8, #1
   265d4:	add	r8, r2, r8, lsl #3
   265d8:	add	r0, r0, lr
   265dc:	add	r9, r9, #2
   265e0:	add	r2, sp, #20
   265e4:	str	r0, [sp, #24]
   265e8:	str	r2, [r8, #-72]	; 0xffffffb8
   265ec:	str	lr, [r8, #-68]	; 0xffffffbc
   265f0:	str	r9, [sp, #28]
   265f4:	cmp	r3, #0
   265f8:	beq	26628 <flatcc_builder_create_buffer@@Base+0x138>
   265fc:	ldr	lr, [pc, #284]	; 26720 <flatcc_builder_create_buffer@@Base+0x230>
   26600:	add	r0, r0, r3
   26604:	ldr	r2, [sp, #28]
   26608:	str	r0, [sp, #24]
   2660c:	ldr	r5, [r5, lr]
   26610:	add	lr, sp, #96	; 0x60
   26614:	add	r2, r2, #1
   26618:	add	lr, lr, r2, lsl #3
   2661c:	str	r2, [sp, #28]
   26620:	str	r5, [lr, #-72]	; 0xffffffb8
   26624:	str	r3, [lr, #-68]	; 0xffffffbc
   26628:	sub	r5, ip, r0
   2662c:	cmp	r1, #0
   26630:	mov	r2, r5
   26634:	addne	r2, r5, #4
   26638:	cmp	r7, #0
   2663c:	sub	r6, r6, r2
   26640:	ldrne	r3, [r4, #144]	; 0x90
   26644:	mov	r8, r5
   26648:	str	r6, [sp, #12]
   2664c:	ldreq	r3, [r4, #140]	; 0x8c
   26650:	cmp	ip, r5
   26654:	sub	r3, r3, r2
   26658:	str	r3, [sp, #16]
   2665c:	ble	266f4 <flatcc_builder_create_buffer@@Base+0x204>
   26660:	mov	r3, r5
   26664:	add	r1, sp, #32
   26668:	str	r0, [sp]
   2666c:	ldr	r2, [sp, #28]
   26670:	ldr	r0, [r4, #36]	; 0x24
   26674:	ldr	r6, [r4, #44]	; 0x2c
   26678:	blx	r6
   2667c:	cmp	r0, #0
   26680:	bne	26718 <flatcc_builder_create_buffer@@Base+0x228>
   26684:	cmp	r5, #0
   26688:	str	r5, [r4, #136]	; 0x88
   2668c:	beq	266d0 <flatcc_builder_create_buffer@@Base+0x1e0>
   26690:	mov	r0, r8
   26694:	add	sp, sp, #100	; 0x64
   26698:	ldrd	r4, [sp]
   2669c:	ldrd	r6, [sp, #8]
   266a0:	ldrd	r8, [sp, #16]
   266a4:	ldrd	sl, [sp, #24]
   266a8:	add	sp, sp, #32
   266ac:	pop	{pc}		; (ldr pc, [sp], #4)
   266b0:	mov	sl, #4
   266b4:	add	r2, sp, #16
   266b8:	mov	r8, #2
   266bc:	mov	r9, #1
   266c0:	mov	r0, #8
   266c4:	str	r2, [sp, #32]
   266c8:	str	sl, [sp, #36]	; 0x24
   266cc:	b	265a4 <flatcc_builder_create_buffer@@Base+0xb4>
   266d0:	ldr	r3, [pc, #76]	; 26724 <flatcc_builder_create_buffer@@Base+0x234>
   266d4:	mov	r2, #772	; 0x304
   266d8:	ldr	r1, [pc, #72]	; 26728 <flatcc_builder_create_buffer@@Base+0x238>
   266dc:	ldr	r0, [pc, #72]	; 2672c <flatcc_builder_create_buffer@@Base+0x23c>
   266e0:	add	r3, pc, r3
   266e4:	add	r3, r3, #204	; 0xcc
   266e8:	add	r1, pc, r1
   266ec:	add	r0, pc, r0
   266f0:	bl	145e8 <__assert_fail@plt>
   266f4:	ldr	r3, [pc, #52]	; 26730 <flatcc_builder_create_buffer@@Base+0x240>
   266f8:	movw	r2, #647	; 0x287
   266fc:	ldr	r1, [pc, #48]	; 26734 <flatcc_builder_create_buffer@@Base+0x244>
   26700:	ldr	r0, [pc, #48]	; 26738 <flatcc_builder_create_buffer@@Base+0x248>
   26704:	add	r3, pc, r3
   26708:	add	r3, r3, #44	; 0x2c
   2670c:	add	r1, pc, r1
   26710:	add	r0, pc, r0
   26714:	bl	145e8 <__assert_fail@plt>
   26718:	bl	25a5c <flatcc_builder_default_alloc@@Base+0x2c4>
   2671c:	andeq	lr, r2, r0, asr #21
   26720:	andeq	r0, r0, r4, rrx
   26724:	andeq	ip, r1, r4, lsl #2
   26728:	andeq	ip, r1, ip, asr #16
   2672c:	ldrdeq	ip, [r1], -r0
   26730:	andeq	ip, r1, r0, ror #1
   26734:	andeq	ip, r1, r8, lsr #16
   26738:	andeq	ip, r1, ip, lsr #17

0002673c <flatcc_builder_create_struct@@Base>:
   2673c:	ldr	ip, [pc, #316]	; 26880 <flatcc_builder_create_struct@@Base+0x144>
   26740:	cmp	r3, #0
   26744:	strd	r4, [sp, #-20]!	; 0xffffffec
   26748:	strd	r6, [sp, #8]
   2674c:	str	lr, [sp, #16]
   26750:	sub	sp, sp, #84	; 0x54
   26754:	add	ip, pc, ip
   26758:	beq	2685c <flatcc_builder_create_struct@@Base+0x120>
   2675c:	mov	r4, r0
   26760:	ldrh	r0, [r0, #128]	; 0x80
   26764:	ldr	lr, [r4, #136]	; 0x88
   26768:	cmp	r0, r3
   2676c:	mov	r0, #0
   26770:	strhcc	r3, [r4, #128]	; 0x80
   26774:	sub	r5, lr, r2
   26778:	sub	r3, r3, #1
   2677c:	cmp	r2, r0
   26780:	and	r3, r3, r5
   26784:	str	r0, [sp, #8]
   26788:	str	r0, [sp, #12]
   2678c:	bne	26810 <flatcc_builder_create_struct@@Base+0xd4>
   26790:	cmp	r3, #0
   26794:	movne	r2, r3
   26798:	movne	r6, #1
   2679c:	beq	26834 <flatcc_builder_create_struct@@Base+0xf8>
   267a0:	ldr	r1, [pc, #220]	; 26884 <flatcc_builder_create_struct@@Base+0x148>
   267a4:	add	r0, r0, #1
   267a8:	add	r7, sp, #80	; 0x50
   267ac:	str	r2, [sp, #8]
   267b0:	add	r0, r7, r0, lsl #3
   267b4:	sub	r5, lr, r2
   267b8:	ldr	r1, [ip, r1]
   267bc:	str	r6, [sp, #12]
   267c0:	str	r1, [r0, #-72]	; 0xffffffb8
   267c4:	str	r3, [r0, #-68]	; 0xffffffbc
   267c8:	cmp	lr, r5
   267cc:	ble	26834 <flatcc_builder_create_struct@@Base+0xf8>
   267d0:	mov	r3, r5
   267d4:	add	r1, sp, #16
   267d8:	str	r2, [sp]
   267dc:	ldr	r2, [sp, #12]
   267e0:	ldr	r0, [r4, #36]	; 0x24
   267e4:	ldr	r6, [r4, #44]	; 0x2c
   267e8:	blx	r6
   267ec:	cmp	r0, #0
   267f0:	bne	26858 <flatcc_builder_create_struct@@Base+0x11c>
   267f4:	mov	r0, r5
   267f8:	str	r5, [r4, #136]	; 0x88
   267fc:	add	sp, sp, #84	; 0x54
   26800:	ldrd	r4, [sp]
   26804:	ldrd	r6, [sp, #8]
   26808:	add	sp, sp, #16
   2680c:	pop	{pc}		; (ldr pc, [sp], #4)
   26810:	mov	r0, #1
   26814:	cmp	r3, #0
   26818:	str	r2, [sp, #8]
   2681c:	movne	r6, #2
   26820:	strd	r0, [sp, #12]
   26824:	str	r2, [sp, #20]
   26828:	addne	r2, r2, r3
   2682c:	beq	267c8 <flatcc_builder_create_struct@@Base+0x8c>
   26830:	b	267a0 <flatcc_builder_create_struct@@Base+0x64>
   26834:	ldr	r3, [pc, #76]	; 26888 <flatcc_builder_create_struct@@Base+0x14c>
   26838:	movw	r2, #647	; 0x287
   2683c:	ldr	r1, [pc, #72]	; 2688c <flatcc_builder_create_struct@@Base+0x150>
   26840:	ldr	r0, [pc, #72]	; 26890 <flatcc_builder_create_struct@@Base+0x154>
   26844:	add	r3, pc, r3
   26848:	add	r3, r3, #44	; 0x2c
   2684c:	add	r1, pc, r1
   26850:	add	r0, pc, r0
   26854:	bl	145e8 <__assert_fail@plt>
   26858:	bl	25a5c <flatcc_builder_default_alloc@@Base+0x2c4>
   2685c:	ldr	r3, [pc, #48]	; 26894 <flatcc_builder_create_struct@@Base+0x158>
   26860:	movw	r2, #783	; 0x30f
   26864:	ldr	r1, [pc, #44]	; 26898 <flatcc_builder_create_struct@@Base+0x15c>
   26868:	ldr	r0, [pc, #44]	; 2689c <flatcc_builder_create_struct@@Base+0x160>
   2686c:	add	r3, pc, r3
   26870:	add	r3, r3, #236	; 0xec
   26874:	add	r1, pc, r1
   26878:	add	r0, pc, r0
   2687c:	bl	145e8 <__assert_fail@plt>
   26880:	andeq	lr, r2, r4, lsr #17
   26884:	andeq	r0, r0, r4, rrx
   26888:	andeq	fp, r1, r0, lsr #31
   2688c:	andeq	ip, r1, r8, ror #13
   26890:	andeq	ip, r1, ip, ror #14
   26894:	andeq	fp, r1, r8, ror pc
   26898:	andeq	ip, r1, r0, asr #13
   2689c:	andeq	ip, r1, r8, lsr #15

000268a0 <flatcc_builder_start_buffer@@Base>:
   268a0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   268a4:	mov	r5, r1
   268a8:	mov	r4, r0
   268ac:	ldrh	r1, [r0, #128]	; 0x80
   268b0:	strd	r6, [sp, #8]
   268b4:	mov	r7, r3
   268b8:	ldr	r6, [pc, #180]	; 26974 <flatcc_builder_start_buffer@@Base+0xd4>
   268bc:	strd	r8, [sp, #16]
   268c0:	mov	r8, r2
   268c4:	str	sl, [sp, #24]
   268c8:	str	lr, [sp, #28]
   268cc:	bl	25acc <flatcc_builder_default_alloc@@Base+0x334>
   268d0:	cmp	r0, #0
   268d4:	add	r6, pc, r6
   268d8:	bne	2696c <flatcc_builder_start_buffer@@Base+0xcc>
   268dc:	mov	r3, #1
   268e0:	ldrh	r9, [r4, #132]	; 0x84
   268e4:	cmp	r5, #0
   268e8:	ldr	ip, [r4, #148]	; 0x94
   268ec:	strh	r3, [r4, #128]	; 0x80
   268f0:	ldr	r1, [r4, #32]
   268f4:	ldr	lr, [r4, #136]	; 0x88
   268f8:	add	r2, ip, r3
   268fc:	ldrh	r3, [r4, #164]	; 0xa4
   26900:	strh	r9, [r1, #34]	; 0x22
   26904:	strh	r8, [r4, #132]	; 0x84
   26908:	ldr	r9, [r4, #144]	; 0x90
   2690c:	ldr	r8, [r4, #152]	; 0x98
   26910:	strh	r3, [r1, #32]
   26914:	ldr	r3, [r4, #168]	; 0xa8
   26918:	strh	r7, [r4, #164]	; 0xa4
   2691c:	str	r9, [r1, #20]
   26920:	str	r8, [r1, #28]
   26924:	str	lr, [r4, #144]	; 0x90
   26928:	str	r2, [r4, #148]	; 0x94
   2692c:	str	ip, [r4, #152]	; 0x98
   26930:	str	r3, [r1, #16]
   26934:	beq	26960 <flatcc_builder_start_buffer@@Base+0xc0>
   26938:	ldr	r2, [r5]
   2693c:	mov	r3, #1
   26940:	str	r2, [r4, #168]	; 0xa8
   26944:	strh	r3, [r1, #14]
   26948:	ldrd	r4, [sp]
   2694c:	ldrd	r6, [sp, #8]
   26950:	ldrd	r8, [sp, #16]
   26954:	ldr	sl, [sp, #24]
   26958:	add	sp, sp, #28
   2695c:	pop	{pc}		; (ldr pc, [sp], #4)
   26960:	ldr	r3, [pc, #16]	; 26978 <flatcc_builder_start_buffer@@Base+0xd8>
   26964:	ldr	r5, [r6, r3]
   26968:	b	26938 <flatcc_builder_start_buffer@@Base+0x98>
   2696c:	mvn	r0, #0
   26970:	b	26948 <flatcc_builder_start_buffer@@Base+0xa8>
   26974:	andeq	lr, r2, r4, lsr #14
   26978:	andeq	r0, r0, r4, rrx

0002697c <flatcc_builder_end_buffer@@Base>:
   2697c:	ldr	ip, [r0, #32]
   26980:	strd	r4, [sp, #-16]!
   26984:	mov	r4, r0
   26988:	ldrh	r2, [r0, #164]	; 0xa4
   2698c:	ldr	r0, [r0, #152]	; 0x98
   26990:	ldrh	ip, [ip, #14]
   26994:	and	r2, r2, #2
   26998:	str	r6, [sp, #8]
   2699c:	str	lr, [sp, #12]
   269a0:	sub	sp, sp, #8
   269a4:	cmp	r0, #0
   269a8:	moveq	r0, r2
   269ac:	orrne	r0, r2, #1
   269b0:	cmp	ip, #1
   269b4:	bne	26a9c <flatcc_builder_end_buffer@@Base+0x120>
   269b8:	ldrh	r2, [r4, #132]	; 0x84
   269bc:	mov	r3, r1
   269c0:	add	r1, r4, #168	; 0xa8
   269c4:	ldrh	ip, [r4, #128]	; 0x80
   269c8:	cmp	r2, ip
   269cc:	movhi	ip, r2
   269d0:	strhhi	r2, [r4, #128]	; 0x80
   269d4:	str	ip, [sp]
   269d8:	str	r0, [sp, #4]
   269dc:	mov	r0, r4
   269e0:	bl	264f0 <flatcc_builder_create_buffer@@Base>
   269e4:	subs	r5, r0, #0
   269e8:	beq	26a84 <flatcc_builder_end_buffer@@Base+0x108>
   269ec:	mov	r1, #0
   269f0:	ldr	r0, [r4, #16]
   269f4:	ldr	r3, [r4, #32]
   269f8:	ldr	r2, [r4, #20]
   269fc:	ldrh	lr, [r3, #32]
   26a00:	ldr	ip, [r3, #16]
   26a04:	ldr	r6, [r3, #20]
   26a08:	ldr	r3, [r3, #28]
   26a0c:	str	r6, [r4, #144]	; 0x90
   26a10:	strh	lr, [r4, #164]	; 0xa4
   26a14:	str	r3, [r4, #152]	; 0x98
   26a18:	str	ip, [r4, #168]	; 0xa8
   26a1c:	bl	14594 <memset@plt>
   26a20:	ldr	r3, [r4, #32]
   26a24:	ldr	r0, [r4, #60]	; 0x3c
   26a28:	ldr	r2, [r4, #64]	; 0x40
   26a2c:	ldr	ip, [r3]
   26a30:	ldmib	r3, {r1, lr}
   26a34:	add	r0, r0, ip
   26a38:	sub	r2, r2, ip
   26a3c:	str	r0, [r4, #16]
   26a40:	cmp	r2, r1
   26a44:	ldrh	r0, [r4, #128]	; 0x80
   26a48:	movcs	r2, r1
   26a4c:	str	lr, [r4, #20]
   26a50:	str	ip, [r4, #28]
   26a54:	ldrh	ip, [r4, #130]	; 0x82
   26a58:	str	r2, [r4, #24]
   26a5c:	ldr	r2, [r4, #156]	; 0x9c
   26a60:	str	r1, [r3, #4]
   26a64:	cmp	r0, ip
   26a68:	sub	r0, r3, #36	; 0x24
   26a6c:	strhcc	ip, [r4, #128]	; 0x80
   26a70:	ldrh	r1, [r3, #12]
   26a74:	sub	r3, r2, #1
   26a78:	str	r0, [r4, #32]
   26a7c:	strh	r1, [r4, #130]	; 0x82
   26a80:	str	r3, [r4, #156]	; 0x9c
   26a84:	mov	r0, r5
   26a88:	add	sp, sp, #8
   26a8c:	ldrd	r4, [sp]
   26a90:	ldr	r6, [sp, #8]
   26a94:	add	sp, sp, #12
   26a98:	pop	{pc}		; (ldr pc, [sp], #4)
   26a9c:	ldr	r3, [pc, #28]	; 26ac0 <flatcc_builder_end_buffer@@Base+0x144>
   26aa0:	movw	r2, #838	; 0x346
   26aa4:	ldr	r1, [pc, #24]	; 26ac4 <flatcc_builder_end_buffer@@Base+0x148>
   26aa8:	ldr	r0, [pc, #24]	; 26ac8 <flatcc_builder_end_buffer@@Base+0x14c>
   26aac:	add	r3, pc, r3
   26ab0:	add	r3, r3, #268	; 0x10c
   26ab4:	add	r1, pc, r1
   26ab8:	add	r0, pc, r0
   26abc:	bl	145e8 <__assert_fail@plt>
   26ac0:	andeq	fp, r1, r8, lsr sp
   26ac4:	andeq	ip, r1, r0, lsl #9
   26ac8:	andeq	ip, r1, r4, ror r5

00026acc <flatcc_builder_start_struct@@Base>:
   26acc:	strd	r4, [sp, #-16]!
   26ad0:	mov	r5, r1
   26ad4:	mov	r1, r2
   26ad8:	mov	r4, r0
   26adc:	str	r6, [sp, #8]
   26ae0:	str	lr, [sp, #12]
   26ae4:	bl	25acc <flatcc_builder_default_alloc@@Base+0x334>
   26ae8:	cmp	r0, #0
   26aec:	bne	26b74 <flatcc_builder_start_struct@@Base+0xa8>
   26af0:	ldr	r6, [r4, #20]
   26af4:	mov	ip, #2
   26af8:	ldr	r2, [r4, #28]
   26afc:	ldr	r3, [r4, #64]	; 0x40
   26b00:	add	r5, r5, r6
   26b04:	ldr	r0, [r4, #60]	; 0x3c
   26b08:	ldr	r1, [r4, #32]
   26b0c:	sub	r3, r3, r2
   26b10:	cmn	r3, #4
   26b14:	add	r0, r0, r2
   26b18:	mvnhi	r2, #3
   26b1c:	movhi	r3, r2
   26b20:	strh	ip, [r1, #14]
   26b24:	strhi	r2, [r4, #24]
   26b28:	mvn	r2, #3
   26b2c:	strls	r3, [r4, #24]
   26b30:	cmp	r5, r3
   26b34:	str	r0, [r4, #16]
   26b38:	str	r2, [r1, #4]
   26b3c:	str	r5, [r4, #20]
   26b40:	bcs	26b58 <flatcc_builder_start_struct@@Base+0x8c>
   26b44:	add	r0, r0, r6
   26b48:	ldrd	r4, [sp]
   26b4c:	ldr	r6, [sp, #8]
   26b50:	add	sp, sp, #12
   26b54:	pop	{pc}		; (ldr pc, [sp], #4)
   26b58:	add	r1, r5, #1
   26b5c:	mov	r0, r4
   26b60:	bl	25710 <union_vector_tests@@Base+0x17c>
   26b64:	cmp	r0, #0
   26b68:	bne	26b74 <flatcc_builder_start_struct@@Base+0xa8>
   26b6c:	ldr	r0, [r4, #16]
   26b70:	b	26b44 <flatcc_builder_start_struct@@Base+0x78>
   26b74:	ldrd	r4, [sp]
   26b78:	mov	r0, #0
   26b7c:	ldr	r6, [sp, #8]
   26b80:	add	sp, sp, #12
   26b84:	pop	{pc}		; (ldr pc, [sp], #4)

00026b88 <flatcc_builder_struct_edit@@Base>:
   26b88:	ldr	r0, [r0, #16]
   26b8c:	bx	lr

00026b90 <flatcc_builder_end_struct@@Base>:
   26b90:	ldr	r3, [r0, #32]
   26b94:	strd	r4, [sp, #-16]!
   26b98:	ldrh	r3, [r3, #14]
   26b9c:	str	r6, [sp, #8]
   26ba0:	str	lr, [sp, #12]
   26ba4:	cmp	r3, #2
   26ba8:	bne	26c50 <flatcc_builder_end_struct@@Base+0xc0>
   26bac:	ldrh	r3, [r0, #130]	; 0x82
   26bb0:	mov	r4, r0
   26bb4:	ldr	r1, [r0, #16]
   26bb8:	ldr	r2, [r0, #20]
   26bbc:	bl	2673c <flatcc_builder_create_struct@@Base>
   26bc0:	subs	r5, r0, #0
   26bc4:	beq	26c3c <flatcc_builder_end_struct@@Base+0xac>
   26bc8:	mov	r1, #0
   26bcc:	ldr	r0, [r4, #16]
   26bd0:	ldr	r2, [r4, #20]
   26bd4:	bl	14594 <memset@plt>
   26bd8:	ldr	r3, [r4, #32]
   26bdc:	ldr	r0, [r4, #60]	; 0x3c
   26be0:	ldr	r2, [r4, #64]	; 0x40
   26be4:	ldr	ip, [r3]
   26be8:	ldmib	r3, {r1, lr}
   26bec:	add	r0, r0, ip
   26bf0:	sub	r2, r2, ip
   26bf4:	str	r0, [r4, #16]
   26bf8:	cmp	r2, r1
   26bfc:	ldrh	r0, [r4, #128]	; 0x80
   26c00:	movcs	r2, r1
   26c04:	str	lr, [r4, #20]
   26c08:	str	ip, [r4, #28]
   26c0c:	ldrh	ip, [r4, #130]	; 0x82
   26c10:	str	r2, [r4, #24]
   26c14:	ldr	r2, [r4, #156]	; 0x9c
   26c18:	str	r1, [r3, #4]
   26c1c:	cmp	r0, ip
   26c20:	sub	r0, r3, #36	; 0x24
   26c24:	strhcc	ip, [r4, #128]	; 0x80
   26c28:	ldrh	r1, [r3, #12]
   26c2c:	sub	r3, r2, #1
   26c30:	str	r0, [r4, #32]
   26c34:	strh	r1, [r4, #130]	; 0x82
   26c38:	str	r3, [r4, #156]	; 0x9c
   26c3c:	mov	r0, r5
   26c40:	ldrd	r4, [sp]
   26c44:	ldr	r6, [sp, #8]
   26c48:	add	sp, sp, #12
   26c4c:	pop	{pc}		; (ldr pc, [sp], #4)
   26c50:	ldr	r3, [pc, #28]	; 26c74 <flatcc_builder_end_struct@@Base+0xe4>
   26c54:	mov	r2, #872	; 0x368
   26c58:	ldr	r1, [pc, #24]	; 26c78 <flatcc_builder_end_struct@@Base+0xe8>
   26c5c:	ldr	r0, [pc, #24]	; 26c7c <flatcc_builder_end_struct@@Base+0xec>
   26c60:	add	r3, pc, r3
   26c64:	add	r3, r3, #296	; 0x128
   26c68:	add	r1, pc, r1
   26c6c:	add	r0, pc, r0
   26c70:	bl	145e8 <__assert_fail@plt>
   26c74:	andeq	fp, r1, r4, lsl #23
   26c78:	andeq	ip, r1, ip, asr #5
   26c7c:	andeq	ip, r1, ip, ror #7

00026c80 <flatcc_builder_extend_vector@@Base>:
   26c80:	ldr	r2, [r0, #32]
   26c84:	strd	r4, [sp, #-16]!
   26c88:	ldr	r3, [r2, #20]
   26c8c:	ldr	ip, [r2, #24]
   26c90:	str	r6, [sp, #8]
   26c94:	str	lr, [sp, #12]
   26c98:	adds	r3, r1, r3
   26c9c:	movcs	r4, #1
   26ca0:	movcc	r4, #0
   26ca4:	cmp	ip, r3
   26ca8:	orrcc	r4, r4, #1
   26cac:	cmp	r4, #0
   26cb0:	bne	26d0c <flatcc_builder_extend_vector@@Base+0x8c>
   26cb4:	ldr	ip, [r2, #16]
   26cb8:	mov	r5, r0
   26cbc:	ldr	r6, [r0, #20]
   26cc0:	str	r3, [r2, #20]
   26cc4:	ldr	r3, [r0, #24]
   26cc8:	mla	r1, ip, r1, r6
   26ccc:	cmp	r1, r3
   26cd0:	str	r1, [r0, #20]
   26cd4:	bcs	26cf0 <flatcc_builder_extend_vector@@Base+0x70>
   26cd8:	ldr	r0, [r5, #16]
   26cdc:	add	r0, r0, r6
   26ce0:	ldrd	r4, [sp]
   26ce4:	ldr	r6, [sp, #8]
   26ce8:	add	sp, sp, #12
   26cec:	pop	{pc}		; (ldr pc, [sp], #4)
   26cf0:	add	r1, r1, #1
   26cf4:	mvn	r2, #3
   26cf8:	bl	25710 <union_vector_tests@@Base+0x17c>
   26cfc:	cmp	r0, #0
   26d00:	beq	26cd8 <flatcc_builder_extend_vector@@Base+0x58>
   26d04:	mov	r0, r4
   26d08:	b	26ce0 <flatcc_builder_extend_vector@@Base+0x60>
   26d0c:	bl	25a94 <flatcc_builder_default_alloc@@Base+0x2fc>

00026d10 <flatcc_builder_vector_push@@Base>:
   26d10:	ldr	r3, [r0, #32]
   26d14:	strd	r4, [sp, #-24]!	; 0xffffffe8
   26d18:	ldrh	r2, [r3, #14]
   26d1c:	strd	r6, [sp, #8]
   26d20:	str	r8, [sp, #16]
   26d24:	str	lr, [sp, #20]
   26d28:	cmp	r2, #4
   26d2c:	bne	26dc0 <flatcc_builder_vector_push@@Base+0xb0>
   26d30:	mov	r7, r1
   26d34:	ldr	r2, [r3, #20]
   26d38:	ldr	r1, [r3, #24]
   26d3c:	cmp	r2, r1
   26d40:	bhi	26de4 <flatcc_builder_vector_push@@Base+0xd4>
   26d44:	add	r2, r2, #1
   26d48:	ldr	r6, [r3, #16]
   26d4c:	mov	r4, r0
   26d50:	ldr	r5, [r0, #20]
   26d54:	str	r2, [r3, #20]
   26d58:	ldr	r3, [r0, #24]
   26d5c:	add	r1, r6, r5
   26d60:	cmp	r1, r3
   26d64:	str	r1, [r0, #20]
   26d68:	bcs	26da4 <flatcc_builder_vector_push@@Base+0x94>
   26d6c:	ldr	r3, [r4, #16]
   26d70:	adds	r3, r3, r5
   26d74:	beq	26d8c <flatcc_builder_vector_push@@Base+0x7c>
   26d78:	mov	r0, r3
   26d7c:	mov	r2, r6
   26d80:	mov	r1, r7
   26d84:	bl	1451c <memcpy@plt>
   26d88:	mov	r3, r0
   26d8c:	ldrd	r4, [sp]
   26d90:	mov	r0, r3
   26d94:	ldrd	r6, [sp, #8]
   26d98:	ldr	r8, [sp, #16]
   26d9c:	add	sp, sp, #20
   26da0:	pop	{pc}		; (ldr pc, [sp], #4)
   26da4:	add	r1, r1, #1
   26da8:	mvn	r2, #3
   26dac:	bl	25710 <union_vector_tests@@Base+0x17c>
   26db0:	cmp	r0, #0
   26db4:	beq	26d6c <flatcc_builder_vector_push@@Base+0x5c>
   26db8:	mov	r3, #0
   26dbc:	b	26d8c <flatcc_builder_vector_push@@Base+0x7c>
   26dc0:	ldr	r3, [pc, #64]	; 26e08 <flatcc_builder_vector_push@@Base+0xf8>
   26dc4:	movw	r2, #907	; 0x38b
   26dc8:	ldr	r1, [pc, #60]	; 26e0c <flatcc_builder_vector_push@@Base+0xfc>
   26dcc:	ldr	r0, [pc, #60]	; 26e10 <flatcc_builder_vector_push@@Base+0x100>
   26dd0:	add	r3, pc, r3
   26dd4:	add	r3, r3, #324	; 0x144
   26dd8:	add	r1, pc, r1
   26ddc:	add	r0, pc, r0
   26de0:	bl	145e8 <__assert_fail@plt>
   26de4:	ldr	r3, [pc, #40]	; 26e14 <flatcc_builder_vector_push@@Base+0x104>
   26de8:	mov	r2, #908	; 0x38c
   26dec:	ldr	r1, [pc, #36]	; 26e18 <flatcc_builder_vector_push@@Base+0x108>
   26df0:	ldr	r0, [pc, #36]	; 26e1c <flatcc_builder_vector_push@@Base+0x10c>
   26df4:	add	r3, pc, r3
   26df8:	add	r3, r3, #324	; 0x144
   26dfc:	add	r1, pc, r1
   26e00:	add	r0, pc, r0
   26e04:	bl	145e8 <__assert_fail@plt>
   26e08:	andeq	fp, r1, r4, lsl sl
   26e0c:	andeq	ip, r1, ip, asr r1
   26e10:	andeq	ip, r1, r8, lsr #5
   26e14:	strdeq	fp, [r1], -r0
   26e18:	andeq	ip, r1, r8, lsr r1
   26e1c:			; <UNDEFINED> instruction: 0x0001c2b0

00026e20 <flatcc_builder_append_vector@@Base>:
   26e20:	ldr	ip, [r0, #32]
   26e24:	strd	r4, [sp, #-24]!	; 0xffffffe8
   26e28:	ldrh	r3, [ip, #14]
   26e2c:	strd	r6, [sp, #8]
   26e30:	str	r8, [sp, #16]
   26e34:	str	lr, [sp, #20]
   26e38:	cmp	r3, #4
   26e3c:	bne	26ee8 <flatcc_builder_append_vector@@Base+0xc8>
   26e40:	mov	r6, r1
   26e44:	ldr	r1, [ip, #20]
   26e48:	ldr	r4, [ip, #24]
   26e4c:	adds	r1, r2, r1
   26e50:	movcs	r3, #1
   26e54:	movcc	r3, #0
   26e58:	cmp	r4, r1
   26e5c:	movcs	r4, r3
   26e60:	orrcc	r4, r3, #1
   26e64:	cmp	r4, #0
   26e68:	bne	26f0c <flatcc_builder_append_vector@@Base+0xec>
   26e6c:	ldr	r7, [ip, #16]
   26e70:	mov	r5, r0
   26e74:	ldr	r8, [r0, #20]
   26e78:	ldr	r3, [r0, #24]
   26e7c:	mul	r7, r7, r2
   26e80:	str	r1, [ip, #20]
   26e84:	add	r1, r7, r8
   26e88:	cmp	r1, r3
   26e8c:	str	r1, [r0, #20]
   26e90:	bcs	26ecc <flatcc_builder_append_vector@@Base+0xac>
   26e94:	ldr	r3, [r5, #16]
   26e98:	adds	r3, r3, r8
   26e9c:	beq	26eb4 <flatcc_builder_append_vector@@Base+0x94>
   26ea0:	mov	r0, r3
   26ea4:	mov	r2, r7
   26ea8:	mov	r1, r6
   26eac:	bl	1451c <memcpy@plt>
   26eb0:	mov	r3, r0
   26eb4:	ldrd	r4, [sp]
   26eb8:	mov	r0, r3
   26ebc:	ldrd	r6, [sp, #8]
   26ec0:	ldr	r8, [sp, #16]
   26ec4:	add	sp, sp, #20
   26ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   26ecc:	add	r1, r1, #1
   26ed0:	mvn	r2, #3
   26ed4:	bl	25710 <union_vector_tests@@Base+0x17c>
   26ed8:	cmp	r0, #0
   26edc:	beq	26e94 <flatcc_builder_append_vector@@Base+0x74>
   26ee0:	mov	r3, r4
   26ee4:	b	26eb4 <flatcc_builder_append_vector@@Base+0x94>
   26ee8:	ldr	r3, [pc, #32]	; 26f10 <flatcc_builder_append_vector@@Base+0xf0>
   26eec:	movw	r2, #915	; 0x393
   26ef0:	ldr	r1, [pc, #28]	; 26f14 <flatcc_builder_append_vector@@Base+0xf4>
   26ef4:	ldr	r0, [pc, #28]	; 26f18 <flatcc_builder_append_vector@@Base+0xf8>
   26ef8:	add	r3, pc, r3
   26efc:	add	r3, r3, #352	; 0x160
   26f00:	add	r1, pc, r1
   26f04:	add	r0, pc, r0
   26f08:	bl	145e8 <__assert_fail@plt>
   26f0c:	bl	25a94 <flatcc_builder_default_alloc@@Base+0x2fc>
   26f10:	andeq	fp, r1, ip, ror #17
   26f14:	andeq	ip, r1, r4, lsr r0
   26f18:	andeq	ip, r1, r0, lsl #3

00026f1c <flatcc_builder_extend_offset_vector@@Base>:
   26f1c:	ldr	ip, [r0, #32]
   26f20:	strd	r4, [sp, #-16]!
   26f24:	ldr	r3, [ip, #20]
   26f28:	str	r6, [sp, #8]
   26f2c:	str	lr, [sp, #12]
   26f30:	adds	r2, r1, r3
   26f34:	movcs	r3, #1
   26f38:	movcc	r3, #0
   26f3c:	cmn	r2, #-1073741823	; 0xc0000001
   26f40:	movls	r4, #0
   26f44:	movhi	r4, #1
   26f48:	orrs	r4, r3, r4
   26f4c:	bne	26fa4 <flatcc_builder_extend_offset_vector@@Base+0x88>
   26f50:	ldr	r6, [r0, #20]
   26f54:	mov	r5, r0
   26f58:	ldr	r3, [r0, #24]
   26f5c:	str	r2, [ip, #20]
   26f60:	add	r1, r6, r1, lsl #2
   26f64:	cmp	r1, r3
   26f68:	str	r1, [r0, #20]
   26f6c:	bcs	26f88 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   26f70:	ldr	r0, [r5, #16]
   26f74:	add	r0, r0, r6
   26f78:	ldrd	r4, [sp]
   26f7c:	ldr	r6, [sp, #8]
   26f80:	add	sp, sp, #12
   26f84:	pop	{pc}		; (ldr pc, [sp], #4)
   26f88:	add	r1, r1, #1
   26f8c:	mvn	r2, #3
   26f90:	bl	25710 <union_vector_tests@@Base+0x17c>
   26f94:	cmp	r0, #0
   26f98:	beq	26f70 <flatcc_builder_extend_offset_vector@@Base+0x54>
   26f9c:	mov	r0, r4
   26fa0:	b	26f78 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   26fa4:	bl	25a94 <flatcc_builder_default_alloc@@Base+0x2fc>

00026fa8 <flatcc_builder_offset_vector_push@@Base>:
   26fa8:	ldr	r2, [r0, #32]
   26fac:	strd	r4, [sp, #-16]!
   26fb0:	ldrh	r3, [r2, #14]
   26fb4:	str	r6, [sp, #8]
   26fb8:	str	lr, [sp, #12]
   26fbc:	cmp	r3, #5
   26fc0:	bne	2703c <flatcc_builder_offset_vector_push@@Base+0x94>
   26fc4:	ldr	r3, [r2, #20]
   26fc8:	cmn	r3, #-1073741823	; 0xc0000001
   26fcc:	beq	27028 <flatcc_builder_offset_vector_push@@Base+0x80>
   26fd0:	ldr	r5, [r0, #20]
   26fd4:	mov	r6, r1
   26fd8:	add	r3, r3, #1
   26fdc:	mov	r4, r0
   26fe0:	ldr	r1, [r0, #24]
   26fe4:	str	r3, [r2, #20]
   26fe8:	add	r3, r5, #4
   26fec:	cmp	r3, r1
   26ff0:	str	r3, [r0, #20]
   26ff4:	bcs	27014 <flatcc_builder_offset_vector_push@@Base+0x6c>
   26ff8:	ldr	r3, [r4, #16]
   26ffc:	adds	r0, r3, r5
   27000:	strne	r6, [r3, r5]
   27004:	ldrd	r4, [sp]
   27008:	ldr	r6, [sp, #8]
   2700c:	add	sp, sp, #12
   27010:	pop	{pc}		; (ldr pc, [sp], #4)
   27014:	mvn	r2, #3
   27018:	add	r1, r5, #5
   2701c:	bl	25710 <union_vector_tests@@Base+0x17c>
   27020:	cmp	r0, #0
   27024:	beq	26ff8 <flatcc_builder_offset_vector_push@@Base+0x50>
   27028:	ldrd	r4, [sp]
   2702c:	mov	r0, #0
   27030:	ldr	r6, [sp, #8]
   27034:	add	sp, sp, #12
   27038:	pop	{pc}		; (ldr pc, [sp], #4)
   2703c:	ldr	r3, [pc, #28]	; 27060 <flatcc_builder_offset_vector_push@@Base+0xb8>
   27040:	movw	r2, #934	; 0x3a6
   27044:	ldr	r1, [pc, #24]	; 27064 <flatcc_builder_offset_vector_push@@Base+0xbc>
   27048:	ldr	r0, [pc, #24]	; 27068 <flatcc_builder_offset_vector_push@@Base+0xc0>
   2704c:	add	r3, pc, r3
   27050:	add	r3, r3, #384	; 0x180
   27054:	add	r1, pc, r1
   27058:	add	r0, pc, r0
   2705c:	bl	145e8 <__assert_fail@plt>
   27060:	muleq	r1, r8, r7
   27064:	andeq	fp, r1, r0, ror #29
   27068:	muleq	r1, r8, r0

0002706c <flatcc_builder_append_offset_vector@@Base>:
   2706c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27070:	mov	r4, r1
   27074:	ldr	r1, [r0, #32]
   27078:	ldrh	r3, [r1, #14]
   2707c:	strd	r6, [sp, #8]
   27080:	str	r8, [sp, #16]
   27084:	str	lr, [sp, #20]
   27088:	cmp	r3, #5
   2708c:	bne	2712c <flatcc_builder_append_offset_vector@@Base+0xc0>
   27090:	ldr	r3, [r1, #20]
   27094:	adds	r3, r2, r3
   27098:	movcs	lr, #1
   2709c:	movcc	lr, #0
   270a0:	cmn	r3, #-1073741823	; 0xc0000001
   270a4:	movls	ip, #0
   270a8:	movhi	ip, #1
   270ac:	orrs	r8, lr, ip
   270b0:	bne	27150 <flatcc_builder_append_offset_vector@@Base+0xe4>
   270b4:	ldr	r7, [r0, #20]
   270b8:	lsl	r6, r2, #2
   270bc:	mov	r5, r0
   270c0:	str	r3, [r1, #20]
   270c4:	ldr	r3, [r0, #24]
   270c8:	add	r1, r6, r7
   270cc:	cmp	r1, r3
   270d0:	str	r1, [r0, #20]
   270d4:	bcs	27110 <flatcc_builder_append_offset_vector@@Base+0xa4>
   270d8:	ldr	r3, [r5, #16]
   270dc:	adds	r3, r3, r7
   270e0:	beq	270f8 <flatcc_builder_append_offset_vector@@Base+0x8c>
   270e4:	mov	r0, r3
   270e8:	mov	r2, r6
   270ec:	mov	r1, r4
   270f0:	bl	1451c <memcpy@plt>
   270f4:	mov	r3, r0
   270f8:	ldrd	r4, [sp]
   270fc:	mov	r0, r3
   27100:	ldrd	r6, [sp, #8]
   27104:	ldr	r8, [sp, #16]
   27108:	add	sp, sp, #20
   2710c:	pop	{pc}		; (ldr pc, [sp], #4)
   27110:	add	r1, r1, #1
   27114:	mvn	r2, #3
   27118:	bl	25710 <union_vector_tests@@Base+0x17c>
   2711c:	cmp	r0, #0
   27120:	beq	270d8 <flatcc_builder_append_offset_vector@@Base+0x6c>
   27124:	mov	r3, r8
   27128:	b	270f8 <flatcc_builder_append_offset_vector@@Base+0x8c>
   2712c:	ldr	r3, [pc, #32]	; 27154 <flatcc_builder_append_offset_vector@@Base+0xe8>
   27130:	mov	r2, #948	; 0x3b4
   27134:	ldr	r1, [pc, #28]	; 27158 <flatcc_builder_append_offset_vector@@Base+0xec>
   27138:	ldr	r0, [pc, #28]	; 2715c <flatcc_builder_append_offset_vector@@Base+0xf0>
   2713c:	add	r3, pc, r3
   27140:	add	r3, r3, #420	; 0x1a4
   27144:	add	r1, pc, r1
   27148:	add	r0, pc, r0
   2714c:	bl	145e8 <__assert_fail@plt>
   27150:	bl	25a94 <flatcc_builder_default_alloc@@Base+0x2fc>
   27154:	andeq	fp, r1, r8, lsr #13
   27158:	strdeq	fp, [r1], -r0
   2715c:	andeq	fp, r1, r8, lsr #31

00027160 <flatcc_builder_extend_string@@Base>:
   27160:	ldr	r2, [r0, #32]
   27164:	strd	r4, [sp, #-16]!
   27168:	ldrh	r3, [r2, #14]
   2716c:	str	r6, [sp, #8]
   27170:	str	lr, [sp, #12]
   27174:	cmp	r3, #6
   27178:	bne	271e0 <flatcc_builder_extend_string@@Base+0x80>
   2717c:	ldr	r3, [r2, #20]
   27180:	adds	r3, r1, r3
   27184:	bcs	271dc <flatcc_builder_extend_string@@Base+0x7c>
   27188:	ldr	r5, [r0, #20]
   2718c:	mov	r4, r0
   27190:	str	r3, [r2, #20]
   27194:	ldr	r3, [r0, #24]
   27198:	add	r1, r1, r5
   2719c:	cmp	r1, r3
   271a0:	str	r1, [r0, #20]
   271a4:	bcs	271c0 <flatcc_builder_extend_string@@Base+0x60>
   271a8:	ldr	r0, [r4, #16]
   271ac:	add	r0, r0, r5
   271b0:	ldrd	r4, [sp]
   271b4:	ldr	r6, [sp, #8]
   271b8:	add	sp, sp, #12
   271bc:	pop	{pc}		; (ldr pc, [sp], #4)
   271c0:	add	r1, r1, #1
   271c4:	mvn	r2, #3
   271c8:	bl	25710 <union_vector_tests@@Base+0x17c>
   271cc:	cmp	r0, #0
   271d0:	beq	271a8 <flatcc_builder_extend_string@@Base+0x48>
   271d4:	mov	r0, #0
   271d8:	b	271b0 <flatcc_builder_extend_string@@Base+0x50>
   271dc:	bl	25a94 <flatcc_builder_default_alloc@@Base+0x2fc>
   271e0:	ldr	r3, [pc, #28]	; 27204 <flatcc_builder_extend_string@@Base+0xa4>
   271e4:	movw	r2, #957	; 0x3bd
   271e8:	ldr	r1, [pc, #24]	; 27208 <flatcc_builder_extend_string@@Base+0xa8>
   271ec:	ldr	r0, [pc, #24]	; 2720c <flatcc_builder_extend_string@@Base+0xac>
   271f0:	add	r3, pc, r3
   271f4:	add	r3, r3, #456	; 0x1c8
   271f8:	add	r1, pc, r1
   271fc:	add	r0, pc, r0
   27200:	bl	145e8 <__assert_fail@plt>
   27204:	strdeq	fp, [r1], -r4
   27208:	andeq	fp, r1, ip, lsr sp
   2720c:	andeq	fp, r1, r8, lsr #30

00027210 <flatcc_builder_append_string@@Base>:
   27210:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27214:	strd	r6, [sp, #8]
   27218:	mov	r7, r1
   2721c:	ldr	r1, [r0, #32]
   27220:	str	r8, [sp, #16]
   27224:	str	lr, [sp, #20]
   27228:	ldrh	r3, [r1, #14]
   2722c:	cmp	r3, #6
   27230:	bne	272bc <flatcc_builder_append_string@@Base+0xac>
   27234:	ldr	r3, [r1, #20]
   27238:	mov	r5, r2
   2723c:	adds	r3, r2, r3
   27240:	bcs	272b8 <flatcc_builder_append_string@@Base+0xa8>
   27244:	ldr	r6, [r0, #20]
   27248:	mov	r4, r0
   2724c:	str	r3, [r1, #20]
   27250:	ldr	r3, [r0, #24]
   27254:	add	r1, r2, r6
   27258:	cmp	r1, r3
   2725c:	str	r1, [r0, #20]
   27260:	bcs	2729c <flatcc_builder_append_string@@Base+0x8c>
   27264:	ldr	r3, [r4, #16]
   27268:	adds	r3, r3, r6
   2726c:	beq	27284 <flatcc_builder_append_string@@Base+0x74>
   27270:	mov	r0, r3
   27274:	mov	r2, r5
   27278:	mov	r1, r7
   2727c:	bl	1451c <memcpy@plt>
   27280:	mov	r3, r0
   27284:	ldrd	r4, [sp]
   27288:	mov	r0, r3
   2728c:	ldrd	r6, [sp, #8]
   27290:	ldr	r8, [sp, #16]
   27294:	add	sp, sp, #20
   27298:	pop	{pc}		; (ldr pc, [sp], #4)
   2729c:	add	r1, r1, #1
   272a0:	mvn	r2, #3
   272a4:	bl	25710 <union_vector_tests@@Base+0x17c>
   272a8:	cmp	r0, #0
   272ac:	beq	27264 <flatcc_builder_append_string@@Base+0x54>
   272b0:	mov	r3, #0
   272b4:	b	27284 <flatcc_builder_append_string@@Base+0x74>
   272b8:	bl	25a94 <flatcc_builder_default_alloc@@Base+0x2fc>
   272bc:	ldr	r3, [pc, #28]	; 272e0 <flatcc_builder_append_string@@Base+0xd0>
   272c0:	movw	r2, #966	; 0x3c6
   272c4:	ldr	r1, [pc, #24]	; 272e4 <flatcc_builder_append_string@@Base+0xd4>
   272c8:	ldr	r0, [pc, #24]	; 272e8 <flatcc_builder_append_string@@Base+0xd8>
   272cc:	add	r3, pc, r3
   272d0:	add	r3, r3, #488	; 0x1e8
   272d4:	add	r1, pc, r1
   272d8:	add	r0, pc, r0
   272dc:	bl	145e8 <__assert_fail@plt>
   272e0:	andeq	fp, r1, r8, lsl r5
   272e4:	andeq	fp, r1, r0, ror #24
   272e8:	andeq	fp, r1, ip, asr #28

000272ec <flatcc_builder_append_string_str@@Base>:
   272ec:	strd	r4, [sp, #-16]!
   272f0:	mov	r5, r0
   272f4:	mov	r0, r1
   272f8:	mov	r4, r1
   272fc:	str	r6, [sp, #8]
   27300:	str	lr, [sp, #12]
   27304:	bl	14570 <strlen@plt>
   27308:	mov	r2, r0
   2730c:	mov	r1, r4
   27310:	ldr	r6, [sp, #8]
   27314:	mov	r0, r5
   27318:	ldrd	r4, [sp]
   2731c:	ldr	lr, [sp, #12]
   27320:	add	sp, sp, #16
   27324:	b	27210 <flatcc_builder_append_string@@Base>

00027328 <flatcc_builder_append_string_strn@@Base>:
   27328:	strd	r4, [sp, #-16]!
   2732c:	mov	r4, r1
   27330:	mov	r1, #0
   27334:	str	r6, [sp, #8]
   27338:	mov	r6, r0
   2733c:	mov	r0, r4
   27340:	mov	r5, r2
   27344:	str	lr, [sp, #12]
   27348:	bl	145b8 <memchr@plt>
   2734c:	cmp	r0, #0
   27350:	mov	r1, r4
   27354:	ldr	lr, [sp, #12]
   27358:	subne	r5, r0, r4
   2735c:	mov	r0, r6
   27360:	mov	r2, r5
   27364:	ldrd	r4, [sp]
   27368:	ldr	r6, [sp, #8]
   2736c:	add	sp, sp, #16
   27370:	b	27210 <flatcc_builder_append_string@@Base>

00027374 <flatcc_builder_truncate_vector@@Base>:
   27374:	mov	r3, r0
   27378:	ldr	r0, [r0, #32]
   2737c:	str	r4, [sp, #-8]!
   27380:	ldrh	r2, [r0, #14]
   27384:	str	lr, [sp, #4]
   27388:	cmp	r2, #4
   2738c:	bne	273dc <flatcc_builder_truncate_vector@@Base+0x68>
   27390:	mov	lr, r1
   27394:	ldr	r1, [r0, #20]
   27398:	cmp	r1, lr
   2739c:	bcc	27400 <flatcc_builder_truncate_vector@@Base+0x8c>
   273a0:	ldr	r2, [r0, #16]
   273a4:	sub	ip, r1, lr
   273a8:	mov	r1, #0
   273ac:	str	ip, [r0, #20]
   273b0:	ldr	r0, [r3, #16]
   273b4:	ldr	ip, [r3, #20]
   273b8:	mul	r2, r2, lr
   273bc:	sub	ip, ip, r2
   273c0:	add	r0, r0, ip
   273c4:	str	ip, [r3, #20]
   273c8:	bl	14594 <memset@plt>
   273cc:	ldr	r4, [sp]
   273d0:	add	sp, sp, #4
   273d4:	mov	r0, #0
   273d8:	pop	{pc}		; (ldr pc, [sp], #4)
   273dc:	ldr	r3, [pc, #64]	; 27424 <flatcc_builder_truncate_vector@@Base+0xb0>
   273e0:	movw	r2, #985	; 0x3d9
   273e4:	ldr	r1, [pc, #60]	; 27428 <flatcc_builder_truncate_vector@@Base+0xb4>
   273e8:	ldr	r0, [pc, #60]	; 2742c <flatcc_builder_truncate_vector@@Base+0xb8>
   273ec:	add	r3, pc, r3
   273f0:	add	r3, r3, #520	; 0x208
   273f4:	add	r1, pc, r1
   273f8:	add	r0, pc, r0
   273fc:	bl	145e8 <__assert_fail@plt>
   27400:	ldr	r3, [pc, #40]	; 27430 <flatcc_builder_truncate_vector@@Base+0xbc>
   27404:	movw	r2, #986	; 0x3da
   27408:	ldr	r1, [pc, #36]	; 27434 <flatcc_builder_truncate_vector@@Base+0xc0>
   2740c:	ldr	r0, [pc, #36]	; 27438 <flatcc_builder_truncate_vector@@Base+0xc4>
   27410:	add	r3, pc, r3
   27414:	add	r3, r3, #520	; 0x208
   27418:	add	r1, pc, r1
   2741c:	add	r0, pc, r0
   27420:	bl	145e8 <__assert_fail@plt>
   27424:	strdeq	fp, [r1], -r8
   27428:	andeq	fp, r1, r0, asr #22
   2742c:	andeq	fp, r1, ip, lsl #25
   27430:	ldrdeq	fp, [r1], -r4
   27434:	andeq	fp, r1, ip, lsl fp
   27438:	andeq	fp, r1, r4, lsr sp

0002743c <flatcc_builder_truncate_offset_vector@@Base>:
   2743c:	mov	r3, r0
   27440:	ldr	r0, [r0, #32]
   27444:	str	r4, [sp, #-8]!
   27448:	ldrh	r2, [r0, #14]
   2744c:	str	lr, [sp, #4]
   27450:	cmp	r2, #5
   27454:	bne	274a4 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   27458:	mov	lr, r1
   2745c:	ldr	r1, [r0, #20]
   27460:	cmp	r1, lr
   27464:	bcc	274c8 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   27468:	ldr	r2, [r0, #16]
   2746c:	sub	ip, r1, lr
   27470:	mov	r1, #0
   27474:	str	ip, [r0, #20]
   27478:	ldr	r0, [r3, #16]
   2747c:	ldr	ip, [r3, #20]
   27480:	mul	r2, r2, lr
   27484:	sub	ip, ip, r2
   27488:	add	r0, r0, ip
   2748c:	str	ip, [r3, #20]
   27490:	bl	14594 <memset@plt>
   27494:	ldr	r4, [sp]
   27498:	add	sp, sp, #4
   2749c:	mov	r0, #0
   274a0:	pop	{pc}		; (ldr pc, [sp], #4)
   274a4:	ldr	r3, [pc, #64]	; 274ec <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   274a8:	movw	r2, #994	; 0x3e2
   274ac:	ldr	r1, [pc, #60]	; 274f0 <flatcc_builder_truncate_offset_vector@@Base+0xb4>
   274b0:	ldr	r0, [pc, #60]	; 274f4 <flatcc_builder_truncate_offset_vector@@Base+0xb8>
   274b4:	add	r3, pc, r3
   274b8:	add	r3, r3, #552	; 0x228
   274bc:	add	r1, pc, r1
   274c0:	add	r0, pc, r0
   274c4:	bl	145e8 <__assert_fail@plt>
   274c8:	ldr	r3, [pc, #40]	; 274f8 <flatcc_builder_truncate_offset_vector@@Base+0xbc>
   274cc:	movw	r2, #995	; 0x3e3
   274d0:	ldr	r1, [pc, #36]	; 274fc <flatcc_builder_truncate_offset_vector@@Base+0xc0>
   274d4:	ldr	r0, [pc, #36]	; 27500 <flatcc_builder_truncate_offset_vector@@Base+0xc4>
   274d8:	add	r3, pc, r3
   274dc:	add	r3, r3, #552	; 0x228
   274e0:	add	r1, pc, r1
   274e4:	add	r0, pc, r0
   274e8:	bl	145e8 <__assert_fail@plt>
   274ec:	andeq	fp, r1, r0, lsr r3
   274f0:	andeq	fp, r1, r8, ror sl
   274f4:	andeq	fp, r1, r0, lsr ip
   274f8:	andeq	fp, r1, ip, lsl #6
   274fc:	andeq	fp, r1, r4, asr sl
   27500:	muleq	r1, r0, ip

00027504 <flatcc_builder_truncate_string@@Base>:
   27504:	str	r4, [sp, #-8]!
   27508:	str	lr, [sp, #4]
   2750c:	ldr	lr, [r0, #32]
   27510:	ldrh	r2, [lr, #14]
   27514:	cmp	r2, #6
   27518:	bne	27568 <flatcc_builder_truncate_string@@Base+0x64>
   2751c:	ldr	r2, [lr, #20]
   27520:	mov	ip, r1
   27524:	cmp	r2, r1
   27528:	bcc	2758c <flatcc_builder_truncate_string@@Base+0x88>
   2752c:	sub	r1, r2, r1
   27530:	mov	r3, r0
   27534:	ldr	r0, [r0, #16]
   27538:	mov	r2, ip
   2753c:	str	r1, [lr, #20]
   27540:	mov	r1, #0
   27544:	ldr	lr, [r3, #20]
   27548:	sub	ip, lr, ip
   2754c:	add	r0, r0, ip
   27550:	str	ip, [r3, #20]
   27554:	bl	14594 <memset@plt>
   27558:	ldr	r4, [sp]
   2755c:	add	sp, sp, #4
   27560:	mov	r0, #0
   27564:	pop	{pc}		; (ldr pc, [sp], #4)
   27568:	ldr	r3, [pc, #64]	; 275b0 <flatcc_builder_truncate_string@@Base+0xac>
   2756c:	movw	r2, #1003	; 0x3eb
   27570:	ldr	r1, [pc, #60]	; 275b4 <flatcc_builder_truncate_string@@Base+0xb0>
   27574:	ldr	r0, [pc, #60]	; 275b8 <flatcc_builder_truncate_string@@Base+0xb4>
   27578:	add	r3, pc, r3
   2757c:	add	r3, r3, #592	; 0x250
   27580:	add	r1, pc, r1
   27584:	add	r0, pc, r0
   27588:	bl	145e8 <__assert_fail@plt>
   2758c:	ldr	r3, [pc, #40]	; 275bc <flatcc_builder_truncate_string@@Base+0xb8>
   27590:	mov	r2, #1004	; 0x3ec
   27594:	ldr	r1, [pc, #36]	; 275c0 <flatcc_builder_truncate_string@@Base+0xbc>
   27598:	ldr	r0, [pc, #36]	; 275c4 <flatcc_builder_truncate_string@@Base+0xc0>
   2759c:	add	r3, pc, r3
   275a0:	add	r3, r3, #592	; 0x250
   275a4:	add	r1, pc, r1
   275a8:	add	r0, pc, r0
   275ac:	bl	145e8 <__assert_fail@plt>
   275b0:	andeq	fp, r1, ip, ror #4
   275b4:			; <UNDEFINED> instruction: 0x0001b9b4
   275b8:	andeq	fp, r1, r0, lsr #23
   275bc:	andeq	fp, r1, r8, asr #4
   275c0:	muleq	r1, r0, r9
   275c4:	andeq	fp, r1, r8, lsl #24

000275c8 <flatcc_builder_start_vector@@Base>:
   275c8:	cmp	r2, #4
   275cc:	strd	r4, [sp, #-16]!
   275d0:	mov	r5, r1
   275d4:	movcs	r1, r2
   275d8:	movcc	r1, #4
   275dc:	str	r6, [sp, #8]
   275e0:	mov	r4, r0
   275e4:	mov	r6, r3
   275e8:	str	lr, [sp, #12]
   275ec:	bl	25acc <flatcc_builder_default_alloc@@Base+0x334>
   275f0:	cmp	r0, #0
   275f4:	bne	27650 <flatcc_builder_start_vector@@Base+0x88>
   275f8:	ldr	r3, [r4, #28]
   275fc:	mov	lr, #4
   27600:	ldr	r2, [r4, #32]
   27604:	ldr	r1, [r4, #64]	; 0x40
   27608:	ldr	ip, [r4, #60]	; 0x3c
   2760c:	strh	lr, [r2, #14]
   27610:	str	r5, [r2, #16]
   27614:	sub	r1, r1, r3
   27618:	str	r0, [r2, #20]
   2761c:	cmn	r1, #4
   27620:	str	r6, [r2, #24]
   27624:	add	ip, ip, r3
   27628:	mvnhi	r3, #3
   2762c:	strls	r1, [r4, #24]
   27630:	strhi	r3, [r4, #24]
   27634:	mvn	r3, #3
   27638:	str	ip, [r4, #16]
   2763c:	str	r3, [r2, #4]
   27640:	ldrd	r4, [sp]
   27644:	ldr	r6, [sp, #8]
   27648:	add	sp, sp, #12
   2764c:	pop	{pc}		; (ldr pc, [sp], #4)
   27650:	mvn	r0, #0
   27654:	b	27640 <flatcc_builder_start_vector@@Base+0x78>

00027658 <flatcc_builder_start_offset_vector@@Base>:
   27658:	mov	r1, #4
   2765c:	strd	r4, [sp, #-16]!
   27660:	mov	r4, r0
   27664:	str	r6, [sp, #8]
   27668:	str	lr, [sp, #12]
   2766c:	bl	25acc <flatcc_builder_default_alloc@@Base+0x334>
   27670:	cmp	r0, #0
   27674:	bne	276cc <flatcc_builder_start_offset_vector@@Base+0x74>
   27678:	ldr	ip, [r4, #28]
   2767c:	mov	lr, #4
   27680:	mov	r5, #5
   27684:	ldr	r3, [r4, #32]
   27688:	ldr	r2, [r4, #64]	; 0x40
   2768c:	ldr	r1, [r4, #60]	; 0x3c
   27690:	strh	r5, [r3, #14]
   27694:	str	lr, [r3, #16]
   27698:	sub	r2, r2, ip
   2769c:	str	r0, [r3, #20]
   276a0:	cmn	r2, #4
   276a4:	mvnhi	r2, #3
   276a8:	add	r1, r1, ip
   276ac:	str	r1, [r4, #16]
   276b0:	str	r2, [r4, #24]
   276b4:	mvn	r2, #3
   276b8:	str	r2, [r3, #4]
   276bc:	ldrd	r4, [sp]
   276c0:	ldr	r6, [sp, #8]
   276c4:	add	sp, sp, #12
   276c8:	pop	{pc}		; (ldr pc, [sp], #4)
   276cc:	mvn	r0, #0
   276d0:	b	276bc <flatcc_builder_start_offset_vector@@Base+0x64>

000276d4 <flatcc_builder_start_string@@Base>:
   276d4:	mov	r1, #1
   276d8:	strd	r4, [sp, #-16]!
   276dc:	mov	r4, r0
   276e0:	str	r6, [sp, #8]
   276e4:	str	lr, [sp, #12]
   276e8:	bl	25acc <flatcc_builder_default_alloc@@Base+0x334>
   276ec:	cmp	r0, #0
   276f0:	bne	27748 <flatcc_builder_start_string@@Base+0x74>
   276f4:	ldr	ip, [r4, #28]
   276f8:	mov	lr, #1
   276fc:	mov	r5, #6
   27700:	ldr	r3, [r4, #32]
   27704:	ldr	r2, [r4, #64]	; 0x40
   27708:	ldr	r1, [r4, #60]	; 0x3c
   2770c:	strh	r5, [r3, #14]
   27710:	str	lr, [r3, #16]
   27714:	sub	r2, r2, ip
   27718:	str	r0, [r3, #20]
   2771c:	cmn	r2, #4
   27720:	mvnhi	r2, #3
   27724:	add	r1, r1, ip
   27728:	str	r1, [r4, #16]
   2772c:	str	r2, [r4, #24]
   27730:	mvn	r2, #3
   27734:	str	r2, [r3, #4]
   27738:	ldrd	r4, [sp]
   2773c:	ldr	r6, [sp, #8]
   27740:	add	sp, sp, #12
   27744:	pop	{pc}		; (ldr pc, [sp], #4)
   27748:	mvn	r0, #0
   2774c:	b	27738 <flatcc_builder_start_string@@Base+0x64>

00027750 <flatcc_builder_reserve_table@@Base>:
   27750:	cmp	r1, #0
   27754:	strd	r4, [sp, #-20]!	; 0xffffffec
   27758:	strd	r6, [sp, #8]
   2775c:	str	lr, [sp, #16]
   27760:	sub	sp, sp, #12
   27764:	blt	27848 <flatcc_builder_reserve_table@@Base+0xf8>
   27768:	ldr	r2, [r0, #32]
   2776c:	add	r1, r1, #2
   27770:	mov	r4, r0
   27774:	lsl	r5, r1, #1
   27778:	ldr	r1, [r0, #56]	; 0x38
   2777c:	ldrh	r6, [r2, #28]
   27780:	ldr	r3, [r2, #16]
   27784:	add	r6, r3, r6, lsl #1
   27788:	add	r2, r6, r5
   2778c:	cmp	r2, r1
   27790:	bhi	277f8 <flatcc_builder_reserve_table@@Base+0xa8>
   27794:	ldr	r3, [r4, #52]	; 0x34
   27798:	adds	r3, r3, r6
   2779c:	mvneq	r0, #0
   277a0:	streq	r3, [r4, #4]
   277a4:	beq	277e4 <flatcc_builder_reserve_table@@Base+0x94>
   277a8:	ldr	r2, [r4, #32]
   277ac:	add	r3, r3, #4
   277b0:	ldr	r1, [r4, #80]	; 0x50
   277b4:	ldr	r6, [r2, #20]
   277b8:	str	r3, [r4, #4]
   277bc:	add	r2, r5, r6
   277c0:	sub	r2, r2, #3
   277c4:	cmp	r2, r1
   277c8:	bhi	27820 <flatcc_builder_reserve_table@@Base+0xd0>
   277cc:	ldr	r3, [r4, #76]	; 0x4c
   277d0:	add	r3, r3, r6
   277d4:	clz	r0, r3
   277d8:	lsr	r0, r0, #5
   277dc:	str	r3, [r4]
   277e0:	rsb	r0, r0, #0
   277e4:	add	sp, sp, #12
   277e8:	ldrd	r4, [sp]
   277ec:	ldrd	r6, [sp, #8]
   277f0:	add	sp, sp, #16
   277f4:	pop	{pc}		; (ldr pc, [sp], #4)
   277f8:	mov	ip, #0
   277fc:	add	r1, r0, #52	; 0x34
   27800:	ldr	r0, [r0, #40]	; 0x28
   27804:	mov	r3, #1
   27808:	str	ip, [sp]
   2780c:	ldr	r7, [r4, #48]	; 0x30
   27810:	blx	r7
   27814:	cmp	r0, #0
   27818:	beq	27794 <flatcc_builder_reserve_table@@Base+0x44>
   2781c:	bl	258bc <flatcc_builder_default_alloc@@Base+0x124>
   27820:	mov	ip, #3
   27824:	mov	r3, #0
   27828:	ldr	r0, [r4, #40]	; 0x28
   2782c:	add	r1, r4, #76	; 0x4c
   27830:	str	ip, [sp]
   27834:	ldr	r5, [r4, #48]	; 0x30
   27838:	blx	r5
   2783c:	cmp	r0, #0
   27840:	beq	277cc <flatcc_builder_reserve_table@@Base+0x7c>
   27844:	b	2781c <flatcc_builder_reserve_table@@Base+0xcc>
   27848:	ldr	r3, [pc, #28]	; 2786c <flatcc_builder_reserve_table@@Base+0x11c>
   2784c:	movw	r2, #1065	; 0x429
   27850:	ldr	r1, [pc, #24]	; 27870 <flatcc_builder_reserve_table@@Base+0x120>
   27854:	ldr	r0, [pc, #24]	; 27874 <flatcc_builder_reserve_table@@Base+0x124>
   27858:	add	r3, pc, r3
   2785c:	add	r3, r3, #624	; 0x270
   27860:	add	r1, pc, r1
   27864:	add	r0, pc, r0
   27868:	bl	145e8 <__assert_fail@plt>
   2786c:	andeq	sl, r1, ip, lsl #31
   27870:	ldrdeq	fp, [r1], -r4
   27874:	andeq	fp, r1, r0, ror r9

00027878 <flatcc_builder_start_table@@Base>:
   27878:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2787c:	mov	r5, r1
   27880:	mov	r1, #4
   27884:	strd	r6, [sp, #8]
   27888:	mov	r4, r0
   2788c:	strd	r8, [sp, #16]
   27890:	str	sl, [sp, #24]
   27894:	str	lr, [sp, #28]
   27898:	sub	sp, sp, #8
   2789c:	bl	25acc <flatcc_builder_default_alloc@@Base+0x334>
   278a0:	subs	r7, r0, #0
   278a4:	bne	279ec <flatcc_builder_start_table@@Base+0x174>
   278a8:	ldm	r4, {r0, r2}
   278ac:	add	r5, r5, #2
   278b0:	movw	ip, #15186	; 0x3b52
   278b4:	movt	ip, #12137	; 0x2f69
   278b8:	lsl	r5, r5, #1
   278bc:	mov	r8, #3
   278c0:	ldrh	lr, [r4, #8]
   278c4:	ldr	r1, [r4, #52]	; 0x34
   278c8:	ldr	sl, [r4, #76]	; 0x4c
   278cc:	ldr	r3, [r4, #32]
   278d0:	sub	r2, r2, r1
   278d4:	ldr	r9, [r4, #56]	; 0x38
   278d8:	add	r6, r2, lr, lsl #1
   278dc:	sub	r0, r0, sl
   278e0:	ldr	sl, [r4, #12]
   278e4:	str	r2, [r3, #16]
   278e8:	add	r2, r6, r5
   278ec:	str	r0, [r3, #20]
   278f0:	cmp	r2, r9
   278f4:	str	sl, [r3, #24]
   278f8:	strh	lr, [r3, #28]
   278fc:	strh	r7, [r4, #8]
   27900:	str	ip, [r4, #12]
   27904:	strh	r8, [r3, #14]
   27908:	bls	27930 <flatcc_builder_start_table@@Base+0xb8>
   2790c:	mov	r3, #1
   27910:	add	r1, r4, #52	; 0x34
   27914:	str	r7, [sp]
   27918:	ldr	r0, [r4, #40]	; 0x28
   2791c:	ldr	r8, [r4, #48]	; 0x30
   27920:	blx	r8
   27924:	cmp	r0, #0
   27928:	bne	279e8 <flatcc_builder_start_table@@Base+0x170>
   2792c:	ldr	r1, [r4, #52]	; 0x34
   27930:	adds	r6, r6, r1
   27934:	streq	r6, [r4, #4]
   27938:	beq	279ec <flatcc_builder_start_table@@Base+0x174>
   2793c:	ldr	r1, [r4, #32]
   27940:	sub	r2, r5, #3
   27944:	add	r6, r6, #4
   27948:	ldr	r3, [r4, #80]	; 0x50
   2794c:	ldr	r5, [r1, #20]
   27950:	str	r6, [r4, #4]
   27954:	add	r2, r2, r5
   27958:	cmp	r2, r3
   2795c:	bhi	279c4 <flatcc_builder_start_table@@Base+0x14c>
   27960:	ldr	r3, [r4, #76]	; 0x4c
   27964:	add	r3, r3, r5
   27968:	cmp	r3, #0
   2796c:	str	r3, [r4]
   27970:	beq	279ec <flatcc_builder_start_table@@Base+0x174>
   27974:	ldr	r0, [r4, #28]
   27978:	movw	r2, #65532	; 0xfffc
   2797c:	ldr	ip, [r4, #32]
   27980:	ldr	r3, [r4, #64]	; 0x40
   27984:	ldr	r1, [r4, #60]	; 0x3c
   27988:	sub	r3, r3, r0
   2798c:	cmp	r3, r2
   27990:	add	r1, r1, r0
   27994:	movcs	r3, r2
   27998:	str	r1, [r4, #16]
   2799c:	str	r3, [r4, #24]
   279a0:	str	r2, [ip, #4]
   279a4:	mov	r0, r7
   279a8:	add	sp, sp, #8
   279ac:	ldrd	r4, [sp]
   279b0:	ldrd	r6, [sp, #8]
   279b4:	ldrd	r8, [sp, #16]
   279b8:	ldr	sl, [sp, #24]
   279bc:	add	sp, sp, #28
   279c0:	pop	{pc}		; (ldr pc, [sp], #4)
   279c4:	mov	ip, #3
   279c8:	mov	r3, #0
   279cc:	ldr	r0, [r4, #40]	; 0x28
   279d0:	add	r1, r4, #76	; 0x4c
   279d4:	str	ip, [sp]
   279d8:	ldr	r6, [r4, #48]	; 0x30
   279dc:	blx	r6
   279e0:	cmp	r0, #0
   279e4:	beq	27960 <flatcc_builder_start_table@@Base+0xe8>
   279e8:	bl	258bc <flatcc_builder_default_alloc@@Base+0x124>
   279ec:	mvn	r7, #0
   279f0:	b	279a4 <flatcc_builder_start_table@@Base+0x12c>

000279f4 <flatcc_builder_create_vtable@@Base>:
   279f4:	mov	r3, #0
   279f8:	strd	r4, [sp, #-16]!
   279fc:	mov	r5, r0
   27a00:	ldr	r0, [r0, #152]	; 0x98
   27a04:	cmp	r2, #0
   27a08:	str	r6, [sp, #8]
   27a0c:	str	lr, [sp, #12]
   27a10:	sub	sp, sp, #80	; 0x50
   27a14:	str	r3, [sp, #8]
   27a18:	str	r3, [sp, #12]
   27a1c:	beq	27a94 <flatcc_builder_create_vtable@@Base+0xa0>
   27a20:	mov	r3, #1
   27a24:	cmp	r0, #0
   27a28:	strd	r2, [sp, #8]
   27a2c:	str	r1, [sp, #16]
   27a30:	str	r2, [sp, #20]
   27a34:	beq	27acc <flatcc_builder_create_vtable@@Base+0xd8>
   27a38:	ldr	r3, [r5, #136]	; 0x88
   27a3c:	sub	r4, r3, r2
   27a40:	cmp	r3, r4
   27a44:	ble	27aa8 <flatcc_builder_create_vtable@@Base+0xb4>
   27a48:	mov	r3, r4
   27a4c:	add	r1, sp, #16
   27a50:	str	r2, [sp]
   27a54:	ldr	r2, [sp, #12]
   27a58:	ldr	r0, [r5, #36]	; 0x24
   27a5c:	ldr	r6, [r5, #44]	; 0x2c
   27a60:	blx	r6
   27a64:	cmp	r0, #0
   27a68:	bne	27b18 <flatcc_builder_create_vtable@@Base+0x124>
   27a6c:	cmp	r4, #0
   27a70:	str	r4, [r5, #136]	; 0x88
   27a74:	beq	27a7c <flatcc_builder_create_vtable@@Base+0x88>
   27a78:	add	r4, r4, #1
   27a7c:	mov	r0, r4
   27a80:	add	sp, sp, #80	; 0x50
   27a84:	ldrd	r4, [sp]
   27a88:	ldr	r6, [sp, #8]
   27a8c:	add	sp, sp, #12
   27a90:	pop	{pc}		; (ldr pc, [sp], #4)
   27a94:	cmp	r0, #0
   27a98:	bne	27aa8 <flatcc_builder_create_vtable@@Base+0xb4>
   27a9c:	ldr	r3, [r5, #180]	; 0xb4
   27aa0:	cmp	r3, #0
   27aa4:	beq	27b10 <flatcc_builder_create_vtable@@Base+0x11c>
   27aa8:	ldr	r3, [pc, #108]	; 27b1c <flatcc_builder_create_vtable@@Base+0x128>
   27aac:	movw	r2, #647	; 0x287
   27ab0:	ldr	r1, [pc, #104]	; 27b20 <flatcc_builder_create_vtable@@Base+0x12c>
   27ab4:	ldr	r0, [pc, #104]	; 27b24 <flatcc_builder_create_vtable@@Base+0x130>
   27ab8:	add	r3, pc, r3
   27abc:	add	r3, r3, #44	; 0x2c
   27ac0:	add	r1, pc, r1
   27ac4:	add	r0, pc, r0
   27ac8:	bl	145e8 <__assert_fail@plt>
   27acc:	ldr	r3, [r5, #180]	; 0xb4
   27ad0:	cmp	r3, #0
   27ad4:	bne	27a38 <flatcc_builder_create_vtable@@Base+0x44>
   27ad8:	ldr	r4, [r5, #140]	; 0x8c
   27adc:	mov	r0, r2
   27ae0:	add	r2, r4, r2
   27ae4:	str	r2, [r5, #140]	; 0x8c
   27ae8:	mov	r3, r4
   27aec:	add	r1, sp, #16
   27af0:	str	r0, [sp]
   27af4:	ldr	r2, [sp, #12]
   27af8:	ldr	r0, [r5, #36]	; 0x24
   27afc:	ldr	r5, [r5, #44]	; 0x2c
   27b00:	blx	r5
   27b04:	cmp	r0, #0
   27b08:	beq	27a78 <flatcc_builder_create_vtable@@Base+0x84>
   27b0c:	bl	258f0 <flatcc_builder_default_alloc@@Base+0x158>
   27b10:	ldr	r4, [r5, #140]	; 0x8c
   27b14:	b	27ae8 <flatcc_builder_create_vtable@@Base+0xf4>
   27b18:	bl	25a5c <flatcc_builder_default_alloc@@Base+0x2c4>
   27b1c:	andeq	sl, r1, ip, lsr #26
   27b20:	andeq	fp, r1, r4, ror r4
   27b24:	strdeq	fp, [r1], -r8

00027b28 <flatcc_builder_create_cached_vtable@@Base>:
   27b28:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27b2c:	strd	r6, [sp, #8]
   27b30:	mov	r6, r0
   27b34:	strd	r8, [sp, #16]
   27b38:	mov	r9, r2
   27b3c:	mov	r8, r3
   27b40:	strd	sl, [sp, #24]
   27b44:	str	lr, [sp, #32]
   27b48:	sub	sp, sp, #28
   27b4c:	str	r1, [sp, #8]
   27b50:	ldr	r1, [r0, #116]	; 0x74
   27b54:	cmp	r1, #0
   27b58:	rsbne	r1, r1, #32
   27b5c:	beq	27ce4 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   27b60:	ldr	sl, [r6, #92]	; 0x5c
   27b64:	lsr	r8, r8, r1
   27b68:	adds	fp, sl, r8, lsl #2
   27b6c:	str	fp, [sp, #12]
   27b70:	beq	27d80 <flatcc_builder_create_cached_vtable@@Base+0x258>
   27b74:	ldr	r5, [sl, r8, lsl #2]
   27b78:	cmp	r5, #0
   27b7c:	beq	27db4 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   27b80:	mov	r3, #0
   27b84:	str	r8, [sp, #16]
   27b88:	mov	r8, fp
   27b8c:	mov	fp, r6
   27b90:	ldr	r7, [r6, #68]	; 0x44
   27b94:	str	r3, [sp, #20]
   27b98:	ldr	r3, [r6, #100]	; 0x64
   27b9c:	mov	r6, r3
   27ba0:	add	r4, r6, r5
   27ba4:	ldr	r1, [r4, #8]
   27ba8:	ldrh	r2, [r7, r1]
   27bac:	add	r1, r7, r1
   27bb0:	cmp	r2, r9
   27bb4:	bne	27c90 <flatcc_builder_create_cached_vtable@@Base+0x168>
   27bb8:	mov	r2, r9
   27bbc:	ldr	r0, [sp, #8]
   27bc0:	bl	14528 <memcmp@plt>
   27bc4:	cmp	r0, #0
   27bc8:	bne	27c90 <flatcc_builder_create_cached_vtable@@Base+0x168>
   27bcc:	ldr	r1, [r4, #4]
   27bd0:	ldr	r2, [fp, #152]	; 0x98
   27bd4:	cmp	r1, r2
   27bd8:	beq	27c9c <flatcc_builder_create_cached_vtable@@Base+0x174>
   27bdc:	ldr	r5, [r4, #12]
   27be0:	add	r8, r4, #12
   27be4:	str	r4, [sp, #20]
   27be8:	cmp	r5, #0
   27bec:	bne	27ba0 <flatcc_builder_create_cached_vtable@@Base+0x78>
   27bf0:	ldr	r8, [sp, #16]
   27bf4:	mov	r6, fp
   27bf8:	ldr	r3, [r6, #104]	; 0x68
   27bfc:	ldr	r4, [r6, #124]	; 0x7c
   27c00:	add	r2, r4, #16
   27c04:	cmp	r2, r3
   27c08:	bls	27c30 <flatcc_builder_create_cached_vtable@@Base+0x108>
   27c0c:	mov	ip, #6
   27c10:	mov	r3, #0
   27c14:	ldr	r0, [r6, #40]	; 0x28
   27c18:	add	r1, r6, #100	; 0x64
   27c1c:	str	ip, [sp]
   27c20:	ldr	r5, [r6, #48]	; 0x30
   27c24:	blx	r5
   27c28:	cmp	r0, #0
   27c2c:	bne	27db0 <flatcc_builder_create_cached_vtable@@Base+0x288>
   27c30:	ldr	r5, [r6, #100]	; 0x64
   27c34:	adds	r7, r5, r4
   27c38:	beq	27d80 <flatcc_builder_create_cached_vtable@@Base+0x258>
   27c3c:	ldr	r3, [r6, #124]	; 0x7c
   27c40:	mov	r2, r9
   27c44:	ldr	r0, [r6, #152]	; 0x98
   27c48:	ldr	r1, [sp, #8]
   27c4c:	add	ip, r3, #16
   27c50:	str	ip, [r6, #124]	; 0x7c
   27c54:	str	r0, [r7, #4]
   27c58:	mov	r0, r6
   27c5c:	ldr	ip, [sl, r8, lsl #2]
   27c60:	str	ip, [r7, #12]
   27c64:	str	r3, [sl, r8, lsl #2]
   27c68:	bl	279f4 <flatcc_builder_create_vtable@@Base>
   27c6c:	cmp	r0, #0
   27c70:	str	r0, [r5, r4]
   27c74:	beq	27d80 <flatcc_builder_create_cached_vtable@@Base+0x258>
   27c78:	ldr	r3, [sp, #20]
   27c7c:	cmp	r3, #0
   27c80:	beq	27dc4 <flatcc_builder_create_cached_vtable@@Base+0x29c>
   27c84:	ldr	r3, [r3, #8]
   27c88:	str	r3, [r7, #8]
   27c8c:	b	27cc8 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   27c90:	add	r8, r4, #12
   27c94:	ldr	r5, [r4, #12]
   27c98:	b	27be8 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   27c9c:	ldr	r3, [sp, #12]
   27ca0:	mov	fp, r8
   27ca4:	ldr	r8, [sp, #16]
   27ca8:	cmp	r3, fp
   27cac:	beq	27cc4 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   27cb0:	ldr	r3, [r4, #12]
   27cb4:	str	r3, [fp]
   27cb8:	ldr	r3, [sl, r8, lsl #2]
   27cbc:	str	r3, [r4, #12]
   27cc0:	str	r5, [sl, r8, lsl #2]
   27cc4:	ldr	r0, [r4]
   27cc8:	add	sp, sp, #28
   27ccc:	ldrd	r4, [sp]
   27cd0:	ldrd	r6, [sp, #8]
   27cd4:	ldrd	r8, [sp, #16]
   27cd8:	ldrd	sl, [sp, #24]
   27cdc:	add	sp, sp, #32
   27ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   27ce4:	ldr	r4, [r0, #124]	; 0x7c
   27ce8:	add	r5, r0, #92	; 0x5c
   27cec:	cmp	r4, #0
   27cf0:	bne	27e58 <flatcc_builder_create_cached_vtable@@Base+0x330>
   27cf4:	ldr	r3, [r0, #104]	; 0x68
   27cf8:	cmp	r3, #15
   27cfc:	bls	27d88 <flatcc_builder_create_cached_vtable@@Base+0x260>
   27d00:	ldr	r3, [r6, #100]	; 0x64
   27d04:	cmp	r3, #0
   27d08:	beq	27d80 <flatcc_builder_create_cached_vtable@@Base+0x258>
   27d0c:	mov	ip, #16
   27d10:	mov	r2, #5
   27d14:	ldr	r0, [r6, #40]	; 0x28
   27d18:	mov	r1, r5
   27d1c:	mov	r3, #1
   27d20:	str	r2, [sp]
   27d24:	mov	r2, #256	; 0x100
   27d28:	str	ip, [r6, #124]	; 0x7c
   27d2c:	ldr	r5, [r6, #48]	; 0x30
   27d30:	blx	r5
   27d34:	cmp	r0, #0
   27d38:	bne	27d80 <flatcc_builder_create_cached_vtable@@Base+0x258>
   27d3c:	mov	r3, #256	; 0x100
   27d40:	ldr	r1, [r6, #96]	; 0x60
   27d44:	b	27d4c <flatcc_builder_create_cached_vtable@@Base+0x224>
   27d48:	mov	r3, r2
   27d4c:	lsl	r2, r3, #1
   27d50:	cmp	r2, r1
   27d54:	bls	27d48 <flatcc_builder_create_cached_vtable@@Base+0x220>
   27d58:	lsr	r3, r3, #2
   27d5c:	cmp	r3, #1
   27d60:	bls	27dbc <flatcc_builder_create_cached_vtable@@Base+0x294>
   27d64:	mov	r2, #1
   27d68:	add	r4, r4, #1
   27d6c:	cmp	r3, r2, lsl r4
   27d70:	bhi	27d68 <flatcc_builder_create_cached_vtable@@Base+0x240>
   27d74:	rsb	r1, r4, #32
   27d78:	str	r4, [r6, #116]	; 0x74
   27d7c:	b	27b60 <flatcc_builder_create_cached_vtable@@Base+0x38>
   27d80:	mov	r0, #0
   27d84:	b	27cc8 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   27d88:	mov	ip, #6
   27d8c:	add	r1, r0, #100	; 0x64
   27d90:	ldr	r0, [r0, #40]	; 0x28
   27d94:	mov	r3, r4
   27d98:	mov	r2, #16
   27d9c:	str	ip, [sp]
   27da0:	ldr	r7, [r6, #48]	; 0x30
   27da4:	blx	r7
   27da8:	cmp	r0, #0
   27dac:	beq	27d00 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   27db0:	bl	258bc <flatcc_builder_default_alloc@@Base+0x124>
   27db4:	str	r5, [sp, #20]
   27db8:	b	27bf8 <flatcc_builder_create_cached_vtable@@Base+0xd0>
   27dbc:	mov	r1, #32
   27dc0:	b	27d78 <flatcc_builder_create_cached_vtable@@Base+0x250>
   27dc4:	ldr	r8, [r6, #120]	; 0x78
   27dc8:	ldr	r3, [r6, #172]	; 0xac
   27dcc:	add	r2, r9, r8
   27dd0:	cmp	r3, #0
   27dd4:	beq	27de0 <flatcc_builder_create_cached_vtable@@Base+0x2b8>
   27dd8:	cmp	r3, r2
   27ddc:	bcc	27e40 <flatcc_builder_create_cached_vtable@@Base+0x318>
   27de0:	ldr	r3, [r6, #72]	; 0x48
   27de4:	cmp	r3, r2
   27de8:	bcs	27e10 <flatcc_builder_create_cached_vtable@@Base+0x2e8>
   27dec:	mov	ip, #2
   27df0:	mov	r3, #0
   27df4:	ldr	r0, [r6, #40]	; 0x28
   27df8:	add	r1, r6, #68	; 0x44
   27dfc:	str	ip, [sp]
   27e00:	ldr	sl, [r6, #48]	; 0x30
   27e04:	blx	sl
   27e08:	cmp	r0, #0
   27e0c:	bne	27db0 <flatcc_builder_create_cached_vtable@@Base+0x288>
   27e10:	ldr	r3, [r6, #68]	; 0x44
   27e14:	adds	r0, r3, r8
   27e18:	beq	27e50 <flatcc_builder_create_cached_vtable@@Base+0x328>
   27e1c:	ldr	r3, [r6, #120]	; 0x78
   27e20:	mov	r2, r9
   27e24:	ldr	r1, [sp, #8]
   27e28:	add	r9, r3, r9
   27e2c:	str	r3, [r7, #8]
   27e30:	str	r9, [r6, #120]	; 0x78
   27e34:	bl	1451c <memcpy@plt>
   27e38:	ldr	r0, [r5, r4]
   27e3c:	b	27cc8 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   27e40:	mov	r0, r6
   27e44:	bl	25e1c <flatcc_builder_flush_vtable_cache@@Base>
   27e48:	ldr	r0, [r5, r4]
   27e4c:	b	27cc8 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   27e50:	mvn	r0, #0
   27e54:	b	27cc8 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   27e58:	ldr	r3, [pc, #28]	; 27e7c <flatcc_builder_create_cached_vtable@@Base+0x354>
   27e5c:	movw	r2, #342	; 0x156
   27e60:	ldr	r1, [pc, #24]	; 27e80 <flatcc_builder_create_cached_vtable@@Base+0x358>
   27e64:	ldr	r0, [pc, #24]	; 27e84 <flatcc_builder_create_cached_vtable@@Base+0x35c>
   27e68:	add	r3, pc, r3
   27e6c:	add	r3, r3, #656	; 0x290
   27e70:	add	r1, pc, r1
   27e74:	add	r0, pc, r0
   27e78:	bl	145e8 <__assert_fail@plt>
   27e7c:	andeq	sl, r1, ip, ror r9
   27e80:	andeq	fp, r1, r4, asr #1
   27e84:	andeq	fp, r1, ip, ror #6

00027e88 <flatcc_builder_create_table@@Base>:
   27e88:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27e8c:	mov	r5, r0
   27e90:	strd	r6, [sp, #8]
   27e94:	str	r8, [sp, #16]
   27e98:	str	lr, [sp, #20]
   27e9c:	sub	sp, sp, #88	; 0x58
   27ea0:	ldr	r6, [sp, #116]	; 0x74
   27ea4:	ldr	r7, [pc, #444]	; 28068 <flatcc_builder_create_table@@Base+0x1e0>
   27ea8:	ldr	r0, [sp, #120]	; 0x78
   27eac:	cmp	r6, #0
   27eb0:	add	r7, pc, r7
   27eb4:	blt	2801c <flatcc_builder_create_table@@Base+0x194>
   27eb8:	tst	r0, #1
   27ebc:	beq	27ff8 <flatcc_builder_create_table@@Base+0x170>
   27ec0:	ldrh	ip, [r5, #128]	; 0x80
   27ec4:	cmp	r3, #4
   27ec8:	sub	r0, r0, #1
   27ecc:	movcc	r3, #4
   27ed0:	cmp	ip, r3
   27ed4:	ldr	ip, [r5, #136]	; 0x88
   27ed8:	strhcc	r3, [r5, #128]	; 0x80
   27edc:	sub	r3, r3, #1
   27ee0:	cmp	r6, #0
   27ee4:	sub	r4, ip, r2
   27ee8:	mov	r8, r4
   27eec:	sub	r4, r4, #4
   27ef0:	and	r8, r8, r3
   27ef4:	sub	r0, r4, r0
   27ef8:	sub	r0, r0, r8
   27efc:	str	r0, [sp, #12]
   27f00:	beq	27f34 <flatcc_builder_create_table@@Base+0xac>
   27f04:	ldr	ip, [sp, #112]	; 0x70
   27f08:	sub	r4, r8, r4
   27f0c:	sub	r4, r4, #4
   27f10:	add	r6, ip, r6, lsl #1
   27f14:	ldrh	r3, [ip], #2
   27f18:	ldr	r0, [r1, r3]
   27f1c:	sub	lr, r4, r3
   27f20:	cmp	r6, ip
   27f24:	add	r0, r0, lr
   27f28:	str	r0, [r1, r3]
   27f2c:	bne	27f14 <flatcc_builder_create_table@@Base+0x8c>
   27f30:	ldr	ip, [r5, #136]	; 0x88
   27f34:	mov	r3, #1
   27f38:	mov	r0, #4
   27f3c:	cmp	r2, #0
   27f40:	str	r0, [sp, #16]
   27f44:	str	r3, [sp, #20]
   27f48:	add	r3, sp, #12
   27f4c:	str	r3, [sp, #24]
   27f50:	str	r0, [sp, #28]
   27f54:	beq	27f70 <flatcc_builder_create_table@@Base+0xe8>
   27f58:	add	r0, r2, r0
   27f5c:	mov	r3, #2
   27f60:	str	r0, [sp, #16]
   27f64:	str	r3, [sp, #20]
   27f68:	str	r1, [sp, #32]
   27f6c:	str	r2, [sp, #36]	; 0x24
   27f70:	cmp	r8, #0
   27f74:	bne	27fc8 <flatcc_builder_create_table@@Base+0x140>
   27f78:	sub	r4, ip, r0
   27f7c:	cmp	r4, ip
   27f80:	bge	28044 <flatcc_builder_create_table@@Base+0x1bc>
   27f84:	mov	r3, r4
   27f88:	add	r1, sp, #24
   27f8c:	str	r0, [sp]
   27f90:	ldr	r2, [sp, #20]
   27f94:	ldr	r0, [r5, #36]	; 0x24
   27f98:	ldr	r6, [r5, #44]	; 0x2c
   27f9c:	blx	r6
   27fa0:	cmp	r0, #0
   27fa4:	bne	28040 <flatcc_builder_create_table@@Base+0x1b8>
   27fa8:	mov	r0, r4
   27fac:	str	r4, [r5, #136]	; 0x88
   27fb0:	add	sp, sp, #88	; 0x58
   27fb4:	ldrd	r4, [sp]
   27fb8:	ldrd	r6, [sp, #8]
   27fbc:	ldr	r8, [sp, #16]
   27fc0:	add	sp, sp, #20
   27fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   27fc8:	ldr	r2, [pc, #156]	; 2806c <flatcc_builder_create_table@@Base+0x1e4>
   27fcc:	add	r0, r0, r8
   27fd0:	ldr	r3, [sp, #20]
   27fd4:	str	r0, [sp, #16]
   27fd8:	ldr	r1, [r7, r2]
   27fdc:	add	r2, sp, #88	; 0x58
   27fe0:	add	r3, r3, #1
   27fe4:	add	r2, r2, r3, lsl #3
   27fe8:	str	r3, [sp, #20]
   27fec:	str	r1, [r2, #-72]	; 0xffffffb8
   27ff0:	str	r8, [r2, #-68]	; 0xffffffbc
   27ff4:	b	27f78 <flatcc_builder_create_table@@Base+0xf0>
   27ff8:	ldr	r3, [pc, #112]	; 28070 <flatcc_builder_create_table@@Base+0x1e8>
   27ffc:	movw	r2, #1243	; 0x4db
   28000:	ldr	r1, [pc, #108]	; 28074 <flatcc_builder_create_table@@Base+0x1ec>
   28004:	ldr	r0, [pc, #108]	; 28078 <flatcc_builder_create_table@@Base+0x1f0>
   28008:	add	r3, pc, r3
   2800c:	add	r3, r3, #668	; 0x29c
   28010:	add	r1, pc, r1
   28014:	add	r0, pc, r0
   28018:	bl	145e8 <__assert_fail@plt>
   2801c:	ldr	r3, [pc, #88]	; 2807c <flatcc_builder_create_table@@Base+0x1f4>
   28020:	movw	r2, #1237	; 0x4d5
   28024:	ldr	r1, [pc, #84]	; 28080 <flatcc_builder_create_table@@Base+0x1f8>
   28028:	ldr	r0, [pc, #84]	; 28084 <flatcc_builder_create_table@@Base+0x1fc>
   2802c:	add	r3, pc, r3
   28030:	add	r3, r3, #668	; 0x29c
   28034:	add	r1, pc, r1
   28038:	add	r0, pc, r0
   2803c:	bl	145e8 <__assert_fail@plt>
   28040:	bl	25a5c <flatcc_builder_default_alloc@@Base+0x2c4>
   28044:	ldr	r3, [pc, #60]	; 28088 <flatcc_builder_create_table@@Base+0x200>
   28048:	movw	r2, #647	; 0x287
   2804c:	ldr	r1, [pc, #56]	; 2808c <flatcc_builder_create_table@@Base+0x204>
   28050:	ldr	r0, [pc, #56]	; 28090 <flatcc_builder_create_table@@Base+0x208>
   28054:	add	r3, pc, r3
   28058:	add	r3, r3, #44	; 0x2c
   2805c:	add	r1, pc, r1
   28060:	add	r0, pc, r0
   28064:	bl	145e8 <__assert_fail@plt>
   28068:	andeq	sp, r2, r8, asr #2
   2806c:	andeq	r0, r0, r4, rrx
   28070:	ldrdeq	sl, [r1], -ip
   28074:	andeq	sl, r1, r4, lsr #30
   28078:	strdeq	fp, [r1], -r0
   2807c:			; <UNDEFINED> instruction: 0x0001a7b8
   28080:	andeq	sl, r1, r0, lsl #30
   28084:			; <UNDEFINED> instruction: 0x0001b1b8
   28088:	muleq	r1, r0, r7
   2808c:	ldrdeq	sl, [r1], -r8
   28090:	andeq	sl, r1, ip, asr pc

00028094 <flatcc_builder_check_required_field@@Base>:
   28094:	ldr	r3, [r0, #32]
   28098:	ldrh	r3, [r3, #14]
   2809c:	cmp	r3, #3
   280a0:	bne	280d0 <flatcc_builder_check_required_field@@Base+0x3c>
   280a4:	ldrh	r3, [r0, #8]
   280a8:	cmp	r3, r1
   280ac:	bls	280c8 <flatcc_builder_check_required_field@@Base+0x34>
   280b0:	ldr	r3, [r0, #4]
   280b4:	lsl	r1, r1, #1
   280b8:	ldrh	r0, [r3, r1]
   280bc:	adds	r0, r0, #0
   280c0:	movne	r0, #1
   280c4:	bx	lr
   280c8:	mov	r0, #0
   280cc:	bx	lr
   280d0:	ldr	r3, [pc, #36]	; 280fc <flatcc_builder_check_required_field@@Base+0x68>
   280d4:	movw	r2, #1272	; 0x4f8
   280d8:	str	r4, [sp, #-8]!
   280dc:	ldr	r1, [pc, #28]	; 28100 <flatcc_builder_check_required_field@@Base+0x6c>
   280e0:	str	lr, [sp, #4]
   280e4:	ldr	r0, [pc, #24]	; 28104 <flatcc_builder_check_required_field@@Base+0x70>
   280e8:	add	r3, pc, r3
   280ec:	add	r3, r3, #696	; 0x2b8
   280f0:	add	r1, pc, r1
   280f4:	add	r0, pc, r0
   280f8:	bl	145e8 <__assert_fail@plt>
   280fc:	strdeq	sl, [r1], -ip
   28100:	andeq	sl, r1, r4, asr #28
   28104:	andeq	fp, r1, ip, lsl r1

00028108 <flatcc_builder_check_union_field@@Base>:
   28108:	ldr	r3, [r0, #32]
   2810c:	ldrh	r3, [r3, #14]
   28110:	cmp	r3, #3
   28114:	bne	28178 <flatcc_builder_check_union_field@@Base+0x70>
   28118:	cmp	r1, #0
   2811c:	beq	28164 <flatcc_builder_check_union_field@@Base+0x5c>
   28120:	ldrh	r3, [r0, #8]
   28124:	cmp	r3, r1
   28128:	bls	28164 <flatcc_builder_check_union_field@@Base+0x5c>
   2812c:	ldr	r3, [r0, #4]
   28130:	sub	r1, r1, #-2147483647	; 0x80000001
   28134:	lsl	r1, r1, #1
   28138:	ldrh	r2, [r3, r1]!
   2813c:	cmp	r2, #0
   28140:	ldrh	r1, [r3, #2]
   28144:	beq	28158 <flatcc_builder_check_union_field@@Base+0x50>
   28148:	ldr	r3, [r0, #16]
   2814c:	ldrb	r3, [r3, r2]
   28150:	cmp	r3, #0
   28154:	bne	2816c <flatcc_builder_check_union_field@@Base+0x64>
   28158:	clz	r0, r1
   2815c:	lsr	r0, r0, #5
   28160:	bx	lr
   28164:	mov	r0, #0
   28168:	bx	lr
   2816c:	adds	r0, r1, #0
   28170:	movne	r0, #1
   28174:	bx	lr
   28178:	ldr	r3, [pc, #36]	; 281a4 <flatcc_builder_check_union_field@@Base+0x9c>
   2817c:	movw	r2, #1279	; 0x4ff
   28180:	str	r4, [sp, #-8]!
   28184:	ldr	r1, [pc, #28]	; 281a8 <flatcc_builder_check_union_field@@Base+0xa0>
   28188:	str	lr, [sp, #4]
   2818c:	ldr	r0, [pc, #24]	; 281ac <flatcc_builder_check_union_field@@Base+0xa4>
   28190:	add	r3, pc, r3
   28194:	add	r3, r3, #732	; 0x2dc
   28198:	add	r1, pc, r1
   2819c:	add	r0, pc, r0
   281a0:	bl	145e8 <__assert_fail@plt>
   281a4:	andeq	sl, r1, r4, asr r6
   281a8:	muleq	r1, ip, sp
   281ac:	andeq	fp, r1, r4, ror r0

000281b0 <flatcc_builder_check_required@@Base>:
   281b0:	ldr	r3, [r0, #32]
   281b4:	ldrh	r3, [r3, #14]
   281b8:	cmp	r3, #3
   281bc:	bne	28224 <flatcc_builder_check_required@@Base+0x74>
   281c0:	ldrh	r3, [r0, #8]
   281c4:	cmp	r3, r2
   281c8:	blt	2821c <flatcc_builder_check_required@@Base+0x6c>
   281cc:	cmp	r2, #0
   281d0:	ble	28214 <flatcc_builder_check_required@@Base+0x64>
   281d4:	ldrh	r3, [r1]
   281d8:	ldr	ip, [r0, #4]
   281dc:	lsl	r3, r3, #1
   281e0:	ldrh	r0, [ip, r3]
   281e4:	cmp	r0, #0
   281e8:	bxeq	lr
   281ec:	add	r2, r1, r2, lsl #1
   281f0:	add	r1, r1, #2
   281f4:	b	2820c <flatcc_builder_check_required@@Base+0x5c>
   281f8:	ldrh	r3, [r1], #2
   281fc:	lsl	r3, r3, #1
   28200:	ldrh	r0, [ip, r3]
   28204:	cmp	r0, #0
   28208:	bxeq	lr
   2820c:	cmp	r1, r2
   28210:	bne	281f8 <flatcc_builder_check_required@@Base+0x48>
   28214:	mov	r0, #1
   28218:	bx	lr
   2821c:	mov	r0, #0
   28220:	bx	lr
   28224:	ldr	r3, [pc, #36]	; 28250 <flatcc_builder_check_required@@Base+0xa0>
   28228:	movw	r2, #1297	; 0x511
   2822c:	str	r4, [sp, #-8]!
   28230:	ldr	r1, [pc, #28]	; 28254 <flatcc_builder_check_required@@Base+0xa4>
   28234:	str	lr, [sp, #4]
   28238:	ldr	r0, [pc, #24]	; 28258 <flatcc_builder_check_required@@Base+0xa8>
   2823c:	add	r3, pc, r3
   28240:	add	r3, r3, #768	; 0x300
   28244:	add	r1, pc, r1
   28248:	add	r0, pc, r0
   2824c:	bl	145e8 <__assert_fail@plt>
   28250:	andeq	sl, r1, r8, lsr #11
   28254:	strdeq	sl, [r1], -r0
   28258:	andeq	sl, r1, r8, asr #31

0002825c <flatcc_builder_end_table@@Base>:
   2825c:	ldr	r3, [r0, #32]
   28260:	strd	r4, [sp, #-20]!	; 0xffffffec
   28264:	ldrh	r3, [r3, #14]
   28268:	strd	r6, [sp, #8]
   2826c:	str	lr, [sp, #16]
   28270:	sub	sp, sp, #20
   28274:	cmp	r3, #3
   28278:	bne	283fc <flatcc_builder_end_table@@Base+0x1a0>
   2827c:	ldrh	r5, [r0, #8]
   28280:	movw	ip, #31153	; 0x79b1
   28284:	movt	ip, #40503	; 0x9e37
   28288:	mov	r4, r0
   2828c:	ldr	r1, [r0, #4]
   28290:	ldr	r3, [r0, #12]
   28294:	add	r5, r5, #2
   28298:	lsl	r5, r5, #1
   2829c:	ldr	lr, [r0, #20]
   282a0:	sub	r6, r1, #4
   282a4:	uxth	r5, r5
   282a8:	eor	r3, r3, r5
   282ac:	mov	r2, r5
   282b0:	strh	r5, [r1, #-4]
   282b4:	mul	r3, ip, r3
   282b8:	add	lr, lr, #4
   282bc:	uxth	lr, lr
   282c0:	eor	r3, r3, lr
   282c4:	strh	lr, [r1, #-2]
   282c8:	mov	r1, r6
   282cc:	mul	r3, ip, r3
   282d0:	str	r3, [r0, #12]
   282d4:	bl	27b28 <flatcc_builder_create_cached_vtable@@Base>
   282d8:	subs	r7, r0, #0
   282dc:	bne	282fc <flatcc_builder_end_table@@Base+0xa0>
   282e0:	mov	r5, #0
   282e4:	mov	r0, r5
   282e8:	add	sp, sp, #20
   282ec:	ldrd	r4, [sp]
   282f0:	ldrd	r6, [sp, #8]
   282f4:	add	sp, sp, #16
   282f8:	pop	{pc}		; (ldr pc, [sp], #4)
   282fc:	mov	r2, r5
   28300:	mov	r1, #0
   28304:	mov	r0, r6
   28308:	bl	14594 <memset@plt>
   2830c:	ldr	ip, [r4]
   28310:	mov	r0, r4
   28314:	ldr	r3, [r4, #32]
   28318:	ldr	r2, [r4, #76]	; 0x4c
   2831c:	ldr	r1, [r3, #20]
   28320:	str	r7, [sp, #8]
   28324:	ldrh	r3, [r4, #130]	; 0x82
   28328:	add	r2, r2, r1
   2832c:	ldr	r1, [r4, #16]
   28330:	sub	ip, ip, r2
   28334:	asr	ip, ip, #1
   28338:	str	r2, [sp]
   2833c:	ldr	r2, [r4, #20]
   28340:	str	ip, [sp, #4]
   28344:	bl	27e88 <flatcc_builder_create_table@@Base>
   28348:	subs	r5, r0, #0
   2834c:	beq	282e0 <flatcc_builder_end_table@@Base+0x84>
   28350:	ldr	r3, [r4, #32]
   28354:	mov	r1, #0
   28358:	ldr	r0, [r4, #52]	; 0x34
   2835c:	ldr	r2, [r4, #76]	; 0x4c
   28360:	ldr	ip, [r3, #16]
   28364:	ldr	r6, [r3, #20]
   28368:	ldrh	lr, [r3, #28]
   2836c:	add	r0, r0, ip
   28370:	ldr	ip, [r3, #24]
   28374:	add	r3, r2, r6
   28378:	ldr	r2, [r4, #20]
   2837c:	str	r3, [r4]
   28380:	str	r0, [r4, #4]
   28384:	strh	lr, [r4, #8]
   28388:	str	ip, [r4, #12]
   2838c:	ldr	r0, [r4, #16]
   28390:	bl	14594 <memset@plt>
   28394:	ldr	r3, [r4, #32]
   28398:	ldr	r0, [r4, #60]	; 0x3c
   2839c:	ldr	r2, [r4, #64]	; 0x40
   283a0:	ldr	ip, [r3]
   283a4:	ldmib	r3, {r1, lr}
   283a8:	add	r0, r0, ip
   283ac:	sub	r2, r2, ip
   283b0:	str	r0, [r4, #16]
   283b4:	cmp	r2, r1
   283b8:	ldrh	r0, [r4, #128]	; 0x80
   283bc:	movcs	r2, r1
   283c0:	str	lr, [r4, #20]
   283c4:	str	ip, [r4, #28]
   283c8:	ldrh	ip, [r4, #130]	; 0x82
   283cc:	str	r2, [r4, #24]
   283d0:	ldr	r2, [r4, #156]	; 0x9c
   283d4:	str	r1, [r3, #4]
   283d8:	cmp	r0, ip
   283dc:	sub	r0, r3, #36	; 0x24
   283e0:	strhcc	ip, [r4, #128]	; 0x80
   283e4:	ldrh	r1, [r3, #12]
   283e8:	sub	r3, r2, #1
   283ec:	str	r0, [r4, #32]
   283f0:	strh	r1, [r4, #130]	; 0x82
   283f4:	str	r3, [r4, #156]	; 0x9c
   283f8:	b	282e4 <flatcc_builder_end_table@@Base+0x88>
   283fc:	ldr	r3, [pc, #28]	; 28420 <flatcc_builder_end_table@@Base+0x1c4>
   28400:	movw	r2, #1317	; 0x525
   28404:	ldr	r1, [pc, #24]	; 28424 <flatcc_builder_end_table@@Base+0x1c8>
   28408:	ldr	r0, [pc, #24]	; 28428 <flatcc_builder_end_table@@Base+0x1cc>
   2840c:	add	r3, pc, r3
   28410:	add	r3, r3, #800	; 0x320
   28414:	add	r1, pc, r1
   28418:	add	r0, pc, r0
   2841c:	bl	145e8 <__assert_fail@plt>
   28420:	ldrdeq	sl, [r1], -r8
   28424:	andeq	sl, r1, r0, lsr #22
   28428:	strdeq	sl, [r1], -r8

0002842c <flatcc_builder_create_vector@@Base>:
   2842c:	strd	r4, [sp, #-16]!
   28430:	mov	r4, r0
   28434:	str	r6, [sp, #8]
   28438:	str	lr, [sp, #12]
   2843c:	sub	sp, sp, #88	; 0x58
   28440:	ldr	ip, [sp, #108]	; 0x6c
   28444:	ldr	r5, [pc, #328]	; 28594 <flatcc_builder_create_vector@@Base+0x168>
   28448:	ldrh	r0, [sp, #104]	; 0x68
   2844c:	cmp	r2, ip
   28450:	add	r5, pc, r5
   28454:	bhi	28548 <flatcc_builder_create_vector@@Base+0x11c>
   28458:	ldrh	ip, [r4, #128]	; 0x80
   2845c:	cmp	r0, #4
   28460:	mul	r3, r3, r2
   28464:	movcc	r0, #4
   28468:	str	r2, [sp, #12]
   2846c:	mov	r2, #1
   28470:	ldr	r6, [r4, #136]	; 0x88
   28474:	mov	lr, #4
   28478:	str	r2, [sp, #20]
   2847c:	cmp	ip, r0
   28480:	add	ip, sp, #12
   28484:	str	lr, [sp, #16]
   28488:	strhcc	r0, [r4, #128]	; 0x80
   2848c:	sub	r2, r6, r3
   28490:	sub	r0, r0, #1
   28494:	cmp	r3, #0
   28498:	and	r0, r0, r2
   2849c:	str	ip, [sp, #24]
   284a0:	moveq	r2, lr
   284a4:	str	lr, [sp, #28]
   284a8:	beq	284c4 <flatcc_builder_create_vector@@Base+0x98>
   284ac:	add	r2, r3, lr
   284b0:	str	r1, [sp, #32]
   284b4:	mov	r1, #2
   284b8:	str	r2, [sp, #16]
   284bc:	str	r1, [sp, #20]
   284c0:	str	r3, [sp, #36]	; 0x24
   284c4:	cmp	r0, #0
   284c8:	bne	28518 <flatcc_builder_create_vector@@Base+0xec>
   284cc:	sub	r5, r6, r2
   284d0:	cmp	r6, r5
   284d4:	ble	28570 <flatcc_builder_create_vector@@Base+0x144>
   284d8:	mov	r3, r5
   284dc:	add	r1, sp, #24
   284e0:	str	r2, [sp]
   284e4:	ldr	r2, [sp, #20]
   284e8:	ldr	r0, [r4, #36]	; 0x24
   284ec:	ldr	r6, [r4, #44]	; 0x2c
   284f0:	blx	r6
   284f4:	cmp	r0, #0
   284f8:	bne	2856c <flatcc_builder_create_vector@@Base+0x140>
   284fc:	mov	r0, r5
   28500:	str	r5, [r4, #136]	; 0x88
   28504:	add	sp, sp, #88	; 0x58
   28508:	ldrd	r4, [sp]
   2850c:	ldr	r6, [sp, #8]
   28510:	add	sp, sp, #12
   28514:	pop	{pc}		; (ldr pc, [sp], #4)
   28518:	ldr	r1, [pc, #120]	; 28598 <flatcc_builder_create_vector@@Base+0x16c>
   2851c:	add	r2, r2, r0
   28520:	ldr	r3, [sp, #20]
   28524:	str	r2, [sp, #16]
   28528:	ldr	ip, [r5, r1]
   2852c:	add	r1, sp, #88	; 0x58
   28530:	add	r3, r3, #1
   28534:	add	r1, r1, r3, lsl #3
   28538:	str	r3, [sp, #20]
   2853c:	str	ip, [r1, #-72]	; 0xffffffb8
   28540:	str	r0, [r1, #-68]	; 0xffffffbc
   28544:	b	284cc <flatcc_builder_create_vector@@Base+0xa0>
   28548:	ldr	r3, [pc, #76]	; 2859c <flatcc_builder_create_vector@@Base+0x170>
   2854c:	movw	r2, #1365	; 0x555
   28550:	ldr	r1, [pc, #72]	; 285a0 <flatcc_builder_create_vector@@Base+0x174>
   28554:	ldr	r0, [pc, #72]	; 285a4 <flatcc_builder_create_vector@@Base+0x178>
   28558:	add	r3, pc, r3
   2855c:	add	r3, r3, #828	; 0x33c
   28560:	add	r1, pc, r1
   28564:	add	r0, pc, r0
   28568:	bl	145e8 <__assert_fail@plt>
   2856c:	bl	25a5c <flatcc_builder_default_alloc@@Base+0x2c4>
   28570:	ldr	r3, [pc, #48]	; 285a8 <flatcc_builder_create_vector@@Base+0x17c>
   28574:	movw	r2, #647	; 0x287
   28578:	ldr	r1, [pc, #44]	; 285ac <flatcc_builder_create_vector@@Base+0x180>
   2857c:	ldr	r0, [pc, #44]	; 285b0 <flatcc_builder_create_vector@@Base+0x184>
   28580:	add	r3, pc, r3
   28584:	add	r3, r3, #44	; 0x2c
   28588:	add	r1, pc, r1
   2858c:	add	r0, pc, r0
   28590:	bl	145e8 <__assert_fail@plt>
   28594:	andeq	ip, r2, r8, lsr #23
   28598:	andeq	r0, r0, r4, rrx
   2859c:	andeq	sl, r1, ip, lsl #5
   285a0:	ldrdeq	sl, [r1], -r4
   285a4:	ldrdeq	sl, [r1], -r8
   285a8:	andeq	sl, r1, r4, ror #4
   285ac:	andeq	sl, r1, ip, lsr #19
   285b0:	andeq	sl, r1, r0, lsr sl

000285b4 <flatcc_builder_end_vector@@Base>:
   285b4:	ldr	r1, [r0, #32]
   285b8:	strd	r4, [sp, #-12]!
   285bc:	ldrh	r3, [r1, #14]
   285c0:	str	lr, [sp, #8]
   285c4:	sub	sp, sp, #12
   285c8:	cmp	r3, #4
   285cc:	bne	28684 <flatcc_builder_end_vector@@Base+0xd0>
   285d0:	ldrh	ip, [r0, #130]	; 0x82
   285d4:	mov	r4, r0
   285d8:	ldr	r3, [r1, #16]
   285dc:	ldr	r2, [r1, #20]
   285e0:	ldr	r1, [r1, #24]
   285e4:	str	r1, [sp, #4]
   285e8:	ldr	r1, [r0, #16]
   285ec:	str	ip, [sp]
   285f0:	bl	2842c <flatcc_builder_create_vector@@Base>
   285f4:	subs	r5, r0, #0
   285f8:	beq	28670 <flatcc_builder_end_vector@@Base+0xbc>
   285fc:	mov	r1, #0
   28600:	ldr	r0, [r4, #16]
   28604:	ldr	r2, [r4, #20]
   28608:	bl	14594 <memset@plt>
   2860c:	ldr	r3, [r4, #32]
   28610:	ldr	r0, [r4, #60]	; 0x3c
   28614:	ldr	r2, [r4, #64]	; 0x40
   28618:	ldr	ip, [r3]
   2861c:	ldmib	r3, {r1, lr}
   28620:	add	r0, r0, ip
   28624:	sub	r2, r2, ip
   28628:	str	r0, [r4, #16]
   2862c:	cmp	r2, r1
   28630:	ldrh	r0, [r4, #128]	; 0x80
   28634:	movcs	r2, r1
   28638:	str	lr, [r4, #20]
   2863c:	str	ip, [r4, #28]
   28640:	ldrh	ip, [r4, #130]	; 0x82
   28644:	str	r2, [r4, #24]
   28648:	ldr	r2, [r4, #156]	; 0x9c
   2864c:	str	r1, [r3, #4]
   28650:	cmp	r0, ip
   28654:	sub	r0, r3, #36	; 0x24
   28658:	strhcc	ip, [r4, #128]	; 0x80
   2865c:	ldrh	r1, [r3, #12]
   28660:	sub	r3, r2, #1
   28664:	str	r0, [r4, #32]
   28668:	strh	r1, [r4, #130]	; 0x82
   2866c:	str	r3, [r4, #156]	; 0x9c
   28670:	mov	r0, r5
   28674:	add	sp, sp, #12
   28678:	ldrd	r4, [sp]
   2867c:	add	sp, sp, #8
   28680:	pop	{pc}		; (ldr pc, [sp], #4)
   28684:	ldr	r3, [pc, #28]	; 286a8 <flatcc_builder_end_vector@@Base+0xf4>
   28688:	movw	r2, #1400	; 0x578
   2868c:	ldr	r1, [pc, #24]	; 286ac <flatcc_builder_end_vector@@Base+0xf8>
   28690:	ldr	r0, [pc, #24]	; 286b0 <flatcc_builder_end_vector@@Base+0xfc>
   28694:	add	r3, pc, r3
   28698:	add	r3, r3, #860	; 0x35c
   2869c:	add	r1, pc, r1
   286a0:	add	r0, pc, r0
   286a4:	bl	145e8 <__assert_fail@plt>
   286a8:	andeq	sl, r1, r0, asr r1
   286ac:	muleq	r1, r8, r8
   286b0:	andeq	sl, r1, r4, ror #19

000286b4 <flatcc_builder_vector_count@@Base>:
   286b4:	ldr	r3, [r0, #32]
   286b8:	ldr	r0, [r3, #20]
   286bc:	bx	lr

000286c0 <flatcc_builder_vector_edit@@Base>:
   286c0:	ldr	r0, [r0, #16]
   286c4:	bx	lr

000286c8 <flatcc_builder_create_offset_vector_direct@@Base>:
   286c8:	cmn	r2, #-1073741823	; 0xc0000001
   286cc:	bhi	286d8 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   286d0:	mov	r3, #0
   286d4:	b	25bf0 <flatcc_builder_default_alloc@@Base+0x458>
   286d8:	mov	r0, #0
   286dc:	bx	lr

000286e0 <flatcc_builder_end_offset_vector@@Base>:
   286e0:	ldr	r3, [r0, #32]
   286e4:	strd	r4, [sp, #-16]!
   286e8:	ldrh	r2, [r3, #14]
   286ec:	str	r6, [sp, #8]
   286f0:	str	lr, [sp, #12]
   286f4:	cmp	r2, #5
   286f8:	bne	2879c <flatcc_builder_end_offset_vector@@Base+0xbc>
   286fc:	ldr	r1, [r0, #16]
   28700:	mov	r4, r0
   28704:	ldr	r2, [r3, #20]
   28708:	bl	286c8 <flatcc_builder_create_offset_vector_direct@@Base>
   2870c:	subs	r5, r0, #0
   28710:	beq	28788 <flatcc_builder_end_offset_vector@@Base+0xa8>
   28714:	mov	r1, #0
   28718:	ldr	r0, [r4, #16]
   2871c:	ldr	r2, [r4, #20]
   28720:	bl	14594 <memset@plt>
   28724:	ldr	r3, [r4, #32]
   28728:	ldr	r0, [r4, #60]	; 0x3c
   2872c:	ldr	r2, [r4, #64]	; 0x40
   28730:	ldr	ip, [r3]
   28734:	ldmib	r3, {r1, lr}
   28738:	add	r0, r0, ip
   2873c:	sub	r2, r2, ip
   28740:	str	r0, [r4, #16]
   28744:	cmp	r2, r1
   28748:	ldrh	r0, [r4, #128]	; 0x80
   2874c:	movcs	r2, r1
   28750:	str	lr, [r4, #20]
   28754:	str	ip, [r4, #28]
   28758:	ldrh	ip, [r4, #130]	; 0x82
   2875c:	str	r2, [r4, #24]
   28760:	ldr	r2, [r4, #156]	; 0x9c
   28764:	str	r1, [r3, #4]
   28768:	cmp	r0, ip
   2876c:	sub	r0, r3, #36	; 0x24
   28770:	strhcc	ip, [r4, #128]	; 0x80
   28774:	ldrh	r1, [r3, #12]
   28778:	sub	r3, r2, #1
   2877c:	str	r0, [r4, #32]
   28780:	strh	r1, [r4, #130]	; 0x82
   28784:	str	r3, [r4, #156]	; 0x9c
   28788:	mov	r0, r5
   2878c:	ldrd	r4, [sp]
   28790:	ldr	r6, [sp, #8]
   28794:	add	sp, sp, #12
   28798:	pop	{pc}		; (ldr pc, [sp], #4)
   2879c:	ldr	r3, [pc, #28]	; 287c0 <flatcc_builder_end_offset_vector@@Base+0xe0>
   287a0:	movw	r2, #1480	; 0x5c8
   287a4:	ldr	r1, [pc, #24]	; 287c4 <flatcc_builder_end_offset_vector@@Base+0xe4>
   287a8:	ldr	r0, [pc, #24]	; 287c8 <flatcc_builder_end_offset_vector@@Base+0xe8>
   287ac:	add	r3, pc, r3
   287b0:	add	r3, r3, #888	; 0x378
   287b4:	add	r1, pc, r1
   287b8:	add	r0, pc, r0
   287bc:	bl	145e8 <__assert_fail@plt>
   287c0:	andeq	sl, r1, r8, lsr r0
   287c4:	andeq	sl, r1, r0, lsl #15
   287c8:	andeq	sl, r1, r8, lsr r9

000287cc <flatcc_builder_create_offset_vector@@Base>:
   287cc:	strd	r4, [sp, #-16]!
   287d0:	mov	r5, r2
   287d4:	mov	r4, r0
   287d8:	str	r6, [sp, #8]
   287dc:	mov	r6, r1
   287e0:	str	lr, [sp, #12]
   287e4:	bl	27658 <flatcc_builder_start_offset_vector@@Base>
   287e8:	cmp	r0, #0
   287ec:	beq	28804 <flatcc_builder_create_offset_vector@@Base+0x38>
   287f0:	ldrd	r4, [sp]
   287f4:	mov	r0, #0
   287f8:	ldr	r6, [sp, #8]
   287fc:	add	sp, sp, #12
   28800:	pop	{pc}		; (ldr pc, [sp], #4)
   28804:	mov	r1, r5
   28808:	mov	r0, r4
   2880c:	bl	26f1c <flatcc_builder_extend_offset_vector@@Base>
   28810:	cmp	r0, #0
   28814:	beq	287f0 <flatcc_builder_create_offset_vector@@Base+0x24>
   28818:	lsl	r2, r5, #2
   2881c:	mov	r1, r6
   28820:	bl	1451c <memcpy@plt>
   28824:	mov	r0, r4
   28828:	ldrd	r4, [sp]
   2882c:	ldr	r6, [sp, #8]
   28830:	ldr	lr, [sp, #12]
   28834:	add	sp, sp, #16
   28838:	b	286e0 <flatcc_builder_end_offset_vector@@Base>

0002883c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   2883c:	ldr	r2, [r0, #32]
   28840:	strd	r4, [sp, #-16]!
   28844:	ldrh	ip, [r2, #14]
   28848:	str	r6, [sp, #8]
   2884c:	str	lr, [sp, #12]
   28850:	cmp	ip, #5
   28854:	bne	2890c <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   28858:	ldr	r2, [r2, #20]
   2885c:	cmn	r2, #-1073741823	; 0xc0000001
   28860:	bhi	2887c <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
   28864:	mov	r3, r1
   28868:	ldr	r1, [r0, #16]
   2886c:	mov	r4, r0
   28870:	bl	25bf0 <flatcc_builder_default_alloc@@Base+0x458>
   28874:	subs	r5, r0, #0
   28878:	bne	28894 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   2887c:	mov	r5, #0
   28880:	mov	r0, r5
   28884:	ldrd	r4, [sp]
   28888:	ldr	r6, [sp, #8]
   2888c:	add	sp, sp, #12
   28890:	pop	{pc}		; (ldr pc, [sp], #4)
   28894:	mov	r1, #0
   28898:	ldr	r0, [r4, #16]
   2889c:	ldr	r2, [r4, #20]
   288a0:	bl	14594 <memset@plt>
   288a4:	ldr	r3, [r4, #32]
   288a8:	ldr	r0, [r4, #60]	; 0x3c
   288ac:	ldr	r2, [r4, #64]	; 0x40
   288b0:	ldr	ip, [r3]
   288b4:	ldmib	r3, {r1, lr}
   288b8:	add	r0, r0, ip
   288bc:	sub	r2, r2, ip
   288c0:	str	r0, [r4, #16]
   288c4:	cmp	r2, r1
   288c8:	ldrh	r0, [r4, #128]	; 0x80
   288cc:	movcs	r2, r1
   288d0:	str	lr, [r4, #20]
   288d4:	str	ip, [r4, #28]
   288d8:	ldrh	ip, [r4, #130]	; 0x82
   288dc:	str	r2, [r4, #24]
   288e0:	ldr	r2, [r4, #156]	; 0x9c
   288e4:	str	r1, [r3, #4]
   288e8:	cmp	r0, ip
   288ec:	sub	r0, r3, #36	; 0x24
   288f0:	strhcc	ip, [r4, #128]	; 0x80
   288f4:	ldrh	r1, [r3, #12]
   288f8:	sub	r3, r2, #1
   288fc:	str	r0, [r4, #32]
   28900:	strh	r1, [r4, #130]	; 0x82
   28904:	str	r3, [r4, #156]	; 0x9c
   28908:	b	28880 <flatcc_builder_end_offset_vector_for_unions@@Base+0x44>
   2890c:	ldr	r3, [pc, #28]	; 28930 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf4>
   28910:	movw	r2, #1493	; 0x5d5
   28914:	ldr	r1, [pc, #24]	; 28934 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf8>
   28918:	ldr	r0, [pc, #24]	; 28938 <flatcc_builder_end_offset_vector_for_unions@@Base+0xfc>
   2891c:	add	r3, pc, r3
   28920:	add	r3, r3, #924	; 0x39c
   28924:	add	r1, pc, r1
   28928:	add	r0, pc, r0
   2892c:	bl	145e8 <__assert_fail@plt>
   28930:	andeq	r9, r1, r8, asr #29
   28934:	andeq	sl, r1, r0, lsl r6
   28938:	andeq	sl, r1, r8, asr #15

0002893c <flatcc_builder_offset_vector_edit@@Base>:
   2893c:	ldr	r0, [r0, #16]
   28940:	bx	lr

00028944 <flatcc_builder_offset_vector_count@@Base>:
   28944:	ldr	r3, [r0, #32]
   28948:	ldr	r0, [r3, #20]
   2894c:	bx	lr

00028950 <flatcc_builder_create_union_vector_direct@@Base>:
   28950:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28954:	mov	r4, r0
   28958:	strd	r6, [sp, #8]
   2895c:	str	r8, [sp, #16]
   28960:	str	lr, [sp, #20]
   28964:	sub	sp, sp, #8
   28968:	ldr	r5, [sp, #32]
   2896c:	cmn	r5, #-1073741823	; 0xc0000001
   28970:	bhi	289d4 <flatcc_builder_create_union_vector_direct@@Base+0x84>
   28974:	mov	r6, r1
   28978:	mov	r7, r2
   2897c:	mov	r1, r3
   28980:	mov	r0, r6
   28984:	mov	r3, r2
   28988:	mov	r2, r5
   2898c:	bl	25bf0 <flatcc_builder_default_alloc@@Base+0x458>
   28990:	subs	r8, r0, #0
   28994:	beq	289d4 <flatcc_builder_create_union_vector_direct@@Base+0x84>
   28998:	mvn	ip, #0
   2899c:	mov	r3, #1
   289a0:	mov	r2, r5
   289a4:	mov	r1, r7
   289a8:	mov	r0, r6
   289ac:	stm	sp, {r3, ip}
   289b0:	bl	2842c <flatcc_builder_create_vector@@Base>
   289b4:	stm	r4, {r0, r8}
   289b8:	mov	r0, r4
   289bc:	add	sp, sp, #8
   289c0:	ldrd	r4, [sp]
   289c4:	ldrd	r6, [sp, #8]
   289c8:	ldr	r8, [sp, #16]
   289cc:	add	sp, sp, #20
   289d0:	pop	{pc}		; (ldr pc, [sp], #4)
   289d4:	mov	r3, #0
   289d8:	str	r3, [r4]
   289dc:	str	r3, [r4, #4]
   289e0:	b	289b8 <flatcc_builder_create_union_vector_direct@@Base+0x68>

000289e4 <flatcc_builder_create_union_vector@@Base>:
   289e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   289e8:	mov	r5, r1
   289ec:	mov	r4, r2
   289f0:	strd	r6, [sp, #8]
   289f4:	mov	r6, r0
   289f8:	mov	r0, r1
   289fc:	str	r8, [sp, #16]
   28a00:	mov	r7, r3
   28a04:	str	lr, [sp, #20]
   28a08:	sub	sp, sp, #16
   28a0c:	bl	27658 <flatcc_builder_start_offset_vector@@Base>
   28a10:	cmp	r0, #0
   28a14:	beq	28a40 <flatcc_builder_create_union_vector@@Base+0x5c>
   28a18:	mov	r3, #0
   28a1c:	str	r3, [r6]
   28a20:	str	r3, [r6, #4]
   28a24:	mov	r0, r6
   28a28:	add	sp, sp, #16
   28a2c:	ldrd	r4, [sp]
   28a30:	ldrd	r6, [sp, #8]
   28a34:	ldr	r8, [sp, #16]
   28a38:	add	sp, sp, #20
   28a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   28a40:	mov	r1, r7
   28a44:	mov	r0, r5
   28a48:	bl	26f1c <flatcc_builder_extend_offset_vector@@Base>
   28a4c:	cmp	r0, #0
   28a50:	beq	28a18 <flatcc_builder_create_union_vector@@Base+0x34>
   28a54:	ldr	r8, [r5, #20]
   28a58:	ldr	r3, [r5, #24]
   28a5c:	add	r1, r7, r8
   28a60:	cmp	r1, r3
   28a64:	str	r1, [r5, #20]
   28a68:	bcs	28b54 <flatcc_builder_create_union_vector@@Base+0x170>
   28a6c:	ldr	r2, [r5, #16]
   28a70:	adds	r8, r2, r8
   28a74:	beq	28a18 <flatcc_builder_create_union_vector@@Base+0x34>
   28a78:	mov	r0, r5
   28a7c:	bl	2893c <flatcc_builder_offset_vector_edit@@Base>
   28a80:	cmp	r7, #0
   28a84:	mov	r3, r0
   28a88:	beq	28ab8 <flatcc_builder_create_union_vector@@Base+0xd4>
   28a8c:	add	r2, r4, r7, lsl #3
   28a90:	mov	r1, r4
   28a94:	sub	lr, r8, #1
   28a98:	sub	ip, r0, #4
   28a9c:	ldrb	r4, [r1]
   28aa0:	add	r1, r1, #8
   28aa4:	strb	r4, [lr, #1]!
   28aa8:	ldr	r4, [r1, #-4]
   28aac:	cmp	r1, r2
   28ab0:	str	r4, [ip, #4]!
   28ab4:	bne	28a9c <flatcc_builder_create_union_vector@@Base+0xb8>
   28ab8:	mov	r2, r8
   28abc:	mov	r1, r5
   28ac0:	str	r7, [sp]
   28ac4:	add	r0, sp, #8
   28ac8:	bl	28950 <flatcc_builder_create_union_vector_direct@@Base>
   28acc:	mov	r1, #0
   28ad0:	ldr	r0, [r5, #16]
   28ad4:	ldr	r2, [r5, #20]
   28ad8:	ldr	r7, [sp, #8]
   28adc:	ldr	r4, [sp, #12]
   28ae0:	bl	14594 <memset@plt>
   28ae4:	ldr	r3, [r5, #32]
   28ae8:	str	r7, [r6]
   28aec:	ldr	r0, [r5, #60]	; 0x3c
   28af0:	str	r4, [r6, #4]
   28af4:	ldr	r2, [r5, #64]	; 0x40
   28af8:	ldr	ip, [r3]
   28afc:	ldmib	r3, {r1, lr}
   28b00:	add	r0, r0, ip
   28b04:	sub	r2, r2, ip
   28b08:	str	r0, [r5, #16]
   28b0c:	cmp	r2, r1
   28b10:	ldrh	r0, [r5, #128]	; 0x80
   28b14:	movcs	r2, r1
   28b18:	str	lr, [r5, #20]
   28b1c:	str	ip, [r5, #28]
   28b20:	ldrh	ip, [r5, #130]	; 0x82
   28b24:	str	r2, [r5, #24]
   28b28:	ldr	r2, [r5, #156]	; 0x9c
   28b2c:	str	r1, [r3, #4]
   28b30:	cmp	r0, ip
   28b34:	sub	r0, r3, #36	; 0x24
   28b38:	strhcc	ip, [r5, #128]	; 0x80
   28b3c:	ldrh	r1, [r3, #12]
   28b40:	sub	r3, r2, #1
   28b44:	str	r0, [r5, #32]
   28b48:	strh	r1, [r5, #130]	; 0x82
   28b4c:	str	r3, [r5, #156]	; 0x9c
   28b50:	b	28a24 <flatcc_builder_create_union_vector@@Base+0x40>
   28b54:	add	r1, r1, #1
   28b58:	mvn	r2, #3
   28b5c:	mov	r0, r5
   28b60:	bl	25710 <union_vector_tests@@Base+0x17c>
   28b64:	cmp	r0, #0
   28b68:	beq	28a6c <flatcc_builder_create_union_vector@@Base+0x88>
   28b6c:	b	28a18 <flatcc_builder_create_union_vector@@Base+0x34>

00028b70 <flatcc_builder_start_union_vector@@Base>:
   28b70:	mov	r1, #4
   28b74:	strd	r4, [sp, #-16]!
   28b78:	mov	r4, r0
   28b7c:	str	r6, [sp, #8]
   28b80:	str	lr, [sp, #12]
   28b84:	bl	25acc <flatcc_builder_default_alloc@@Base+0x334>
   28b88:	cmp	r0, #0
   28b8c:	bne	28be4 <flatcc_builder_start_union_vector@@Base+0x74>
   28b90:	ldr	ip, [r4, #28]
   28b94:	mov	lr, #8
   28b98:	mov	r5, #7
   28b9c:	ldr	r3, [r4, #32]
   28ba0:	ldr	r2, [r4, #64]	; 0x40
   28ba4:	ldr	r1, [r4, #60]	; 0x3c
   28ba8:	strh	r5, [r3, #14]
   28bac:	str	lr, [r3, #16]
   28bb0:	sub	r2, r2, ip
   28bb4:	str	r0, [r3, #20]
   28bb8:	cmn	r2, #4
   28bbc:	mvnhi	r2, #3
   28bc0:	add	r1, r1, ip
   28bc4:	str	r1, [r4, #16]
   28bc8:	str	r2, [r4, #24]
   28bcc:	mvn	r2, #3
   28bd0:	str	r2, [r3, #4]
   28bd4:	ldrd	r4, [sp]
   28bd8:	ldr	r6, [sp, #8]
   28bdc:	add	sp, sp, #12
   28be0:	pop	{pc}		; (ldr pc, [sp], #4)
   28be4:	mvn	r0, #0
   28be8:	b	28bd4 <flatcc_builder_start_union_vector@@Base+0x64>

00028bec <flatcc_builder_union_vector_edit@@Base>:
   28bec:	ldr	r0, [r0, #16]
   28bf0:	bx	lr

00028bf4 <flatcc_builder_union_vector_count@@Base>:
   28bf4:	ldr	r3, [r0, #32]
   28bf8:	ldr	r0, [r3, #20]
   28bfc:	bx	lr

00028c00 <flatcc_builder_end_union_vector@@Base>:
   28c00:	ldr	r3, [r1, #32]
   28c04:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28c08:	ldrh	r3, [r3, #14]
   28c0c:	strd	r6, [sp, #8]
   28c10:	str	r8, [sp, #16]
   28c14:	str	lr, [sp, #20]
   28c18:	sub	sp, sp, #16
   28c1c:	cmp	r3, #7
   28c20:	bne	28d80 <flatcc_builder_end_union_vector@@Base+0x180>
   28c24:	mov	r4, r1
   28c28:	mov	r6, r0
   28c2c:	mov	r0, r1
   28c30:	bl	28bf4 <flatcc_builder_union_vector_count@@Base>
   28c34:	ldr	r8, [r4, #20]
   28c38:	lsl	r7, r0, #2
   28c3c:	mov	r5, r0
   28c40:	ldr	r3, [r4, #24]
   28c44:	add	r1, r7, r0
   28c48:	add	r1, r1, r8
   28c4c:	cmp	r1, r3
   28c50:	str	r1, [r4, #20]
   28c54:	bcs	28d58 <flatcc_builder_end_union_vector@@Base+0x158>
   28c58:	ldr	r3, [r4, #16]
   28c5c:	adds	r8, r3, r8
   28c60:	beq	28d70 <flatcc_builder_end_union_vector@@Base+0x170>
   28c64:	mov	r0, r4
   28c68:	add	r7, r8, r7
   28c6c:	bl	28bec <flatcc_builder_union_vector_edit@@Base>
   28c70:	cmp	r5, #0
   28c74:	beq	28ca0 <flatcc_builder_end_union_vector@@Base+0xa0>
   28c78:	add	r3, r0, r5, lsl #3
   28c7c:	sub	ip, r7, #1
   28c80:	sub	r1, r8, #4
   28c84:	ldrb	lr, [r0]
   28c88:	add	r0, r0, #8
   28c8c:	strb	lr, [ip, #1]!
   28c90:	ldr	lr, [r0, #-4]
   28c94:	cmp	r0, r3
   28c98:	str	lr, [r1, #4]!
   28c9c:	bne	28c84 <flatcc_builder_end_union_vector@@Base+0x84>
   28ca0:	mov	r3, r8
   28ca4:	mov	r2, r7
   28ca8:	str	r5, [sp]
   28cac:	mov	r1, r4
   28cb0:	add	r0, sp, #8
   28cb4:	bl	28950 <flatcc_builder_create_union_vector_direct@@Base>
   28cb8:	mov	r1, #0
   28cbc:	ldr	r0, [r4, #16]
   28cc0:	ldr	r2, [r4, #20]
   28cc4:	ldr	r7, [sp, #8]
   28cc8:	ldr	r5, [sp, #12]
   28ccc:	bl	14594 <memset@plt>
   28cd0:	ldr	r3, [r4, #32]
   28cd4:	str	r7, [r6]
   28cd8:	ldr	r0, [r4, #60]	; 0x3c
   28cdc:	str	r5, [r6, #4]
   28ce0:	ldr	r2, [r4, #64]	; 0x40
   28ce4:	ldr	ip, [r3]
   28ce8:	ldmib	r3, {r1, lr}
   28cec:	add	r0, r0, ip
   28cf0:	sub	r2, r2, ip
   28cf4:	str	r0, [r4, #16]
   28cf8:	cmp	r2, r1
   28cfc:	ldrh	r0, [r4, #128]	; 0x80
   28d00:	movcs	r2, r1
   28d04:	str	lr, [r4, #20]
   28d08:	str	ip, [r4, #28]
   28d0c:	ldrh	ip, [r4, #130]	; 0x82
   28d10:	str	r2, [r4, #24]
   28d14:	ldr	r2, [r4, #156]	; 0x9c
   28d18:	str	r1, [r3, #4]
   28d1c:	cmp	r0, ip
   28d20:	sub	r0, r3, #36	; 0x24
   28d24:	strhcc	ip, [r4, #128]	; 0x80
   28d28:	ldrh	r1, [r3, #12]
   28d2c:	sub	r3, r2, #1
   28d30:	str	r0, [r4, #32]
   28d34:	strh	r1, [r4, #130]	; 0x82
   28d38:	str	r3, [r4, #156]	; 0x9c
   28d3c:	mov	r0, r6
   28d40:	add	sp, sp, #16
   28d44:	ldrd	r4, [sp]
   28d48:	ldrd	r6, [sp, #8]
   28d4c:	ldr	r8, [sp, #16]
   28d50:	add	sp, sp, #20
   28d54:	pop	{pc}		; (ldr pc, [sp], #4)
   28d58:	add	r1, r1, #1
   28d5c:	mvn	r2, #3
   28d60:	mov	r0, r4
   28d64:	bl	25710 <union_vector_tests@@Base+0x17c>
   28d68:	cmp	r0, #0
   28d6c:	beq	28c58 <flatcc_builder_end_union_vector@@Base+0x58>
   28d70:	mov	r3, #0
   28d74:	str	r3, [r6]
   28d78:	str	r3, [r6, #4]
   28d7c:	b	28d3c <flatcc_builder_end_union_vector@@Base+0x13c>
   28d80:	ldr	r3, [pc, #28]	; 28da4 <flatcc_builder_end_union_vector@@Base+0x1a4>
   28d84:	movw	r2, #1617	; 0x651
   28d88:	ldr	r1, [pc, #24]	; 28da8 <flatcc_builder_end_union_vector@@Base+0x1a8>
   28d8c:	ldr	r0, [pc, #24]	; 28dac <flatcc_builder_end_union_vector@@Base+0x1ac>
   28d90:	add	r3, pc, r3
   28d94:	add	r3, r3, #968	; 0x3c8
   28d98:	add	r1, pc, r1
   28d9c:	add	r0, pc, r0
   28da0:	bl	145e8 <__assert_fail@plt>
   28da4:	andeq	r9, r1, r4, asr sl
   28da8:	muleq	r1, ip, r1
   28dac:			; <UNDEFINED> instruction: 0x0001a4b4

00028db0 <flatcc_builder_extend_union_vector@@Base>:
   28db0:	ldr	ip, [r0, #32]
   28db4:	strd	r4, [sp, #-16]!
   28db8:	ldr	r3, [ip, #20]
   28dbc:	str	r6, [sp, #8]
   28dc0:	str	lr, [sp, #12]
   28dc4:	adds	r2, r1, r3
   28dc8:	movcs	r3, #1
   28dcc:	movcc	r3, #0
   28dd0:	cmn	r2, #-536870911	; 0xe0000001
   28dd4:	movls	r4, #0
   28dd8:	movhi	r4, #1
   28ddc:	orrs	r4, r3, r4
   28de0:	bne	28e38 <flatcc_builder_extend_union_vector@@Base+0x88>
   28de4:	ldr	r6, [r0, #20]
   28de8:	mov	r5, r0
   28dec:	ldr	r3, [r0, #24]
   28df0:	str	r2, [ip, #20]
   28df4:	add	r1, r6, r1, lsl #3
   28df8:	cmp	r1, r3
   28dfc:	str	r1, [r0, #20]
   28e00:	bcs	28e1c <flatcc_builder_extend_union_vector@@Base+0x6c>
   28e04:	ldr	r0, [r5, #16]
   28e08:	add	r0, r0, r6
   28e0c:	ldrd	r4, [sp]
   28e10:	ldr	r6, [sp, #8]
   28e14:	add	sp, sp, #12
   28e18:	pop	{pc}		; (ldr pc, [sp], #4)
   28e1c:	add	r1, r1, #1
   28e20:	mvn	r2, #3
   28e24:	bl	25710 <union_vector_tests@@Base+0x17c>
   28e28:	cmp	r0, #0
   28e2c:	beq	28e04 <flatcc_builder_extend_union_vector@@Base+0x54>
   28e30:	mov	r0, r4
   28e34:	b	28e0c <flatcc_builder_extend_union_vector@@Base+0x5c>
   28e38:	bl	25a94 <flatcc_builder_default_alloc@@Base+0x2fc>

00028e3c <flatcc_builder_truncate_union_vector@@Base>:
   28e3c:	mov	r3, r0
   28e40:	ldr	r0, [r0, #32]
   28e44:	str	r4, [sp, #-8]!
   28e48:	ldrh	r2, [r0, #14]
   28e4c:	str	lr, [sp, #4]
   28e50:	cmp	r2, #7
   28e54:	bne	28ea4 <flatcc_builder_truncate_union_vector@@Base+0x68>
   28e58:	mov	lr, r1
   28e5c:	ldr	r1, [r0, #20]
   28e60:	cmp	r1, lr
   28e64:	bcc	28ec8 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   28e68:	ldr	r2, [r0, #16]
   28e6c:	sub	ip, r1, lr
   28e70:	mov	r1, #0
   28e74:	str	ip, [r0, #20]
   28e78:	ldr	r0, [r3, #16]
   28e7c:	ldr	ip, [r3, #20]
   28e80:	mul	r2, r2, lr
   28e84:	sub	ip, ip, r2
   28e88:	add	r0, r0, ip
   28e8c:	str	ip, [r3, #20]
   28e90:	bl	14594 <memset@plt>
   28e94:	ldr	r4, [sp]
   28e98:	add	sp, sp, #4
   28e9c:	mov	r0, #0
   28ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   28ea4:	ldr	r3, [pc, #64]	; 28eec <flatcc_builder_truncate_union_vector@@Base+0xb0>
   28ea8:	movw	r2, #1665	; 0x681
   28eac:	ldr	r1, [pc, #60]	; 28ef0 <flatcc_builder_truncate_union_vector@@Base+0xb4>
   28eb0:	ldr	r0, [pc, #60]	; 28ef4 <flatcc_builder_truncate_union_vector@@Base+0xb8>
   28eb4:	add	r3, pc, r3
   28eb8:	add	r3, r3, #1000	; 0x3e8
   28ebc:	add	r1, pc, r1
   28ec0:	add	r0, pc, r0
   28ec4:	bl	145e8 <__assert_fail@plt>
   28ec8:	ldr	r3, [pc, #40]	; 28ef8 <flatcc_builder_truncate_union_vector@@Base+0xbc>
   28ecc:	movw	r2, #1666	; 0x682
   28ed0:	ldr	r1, [pc, #36]	; 28efc <flatcc_builder_truncate_union_vector@@Base+0xc0>
   28ed4:	ldr	r0, [pc, #36]	; 28f00 <flatcc_builder_truncate_union_vector@@Base+0xc4>
   28ed8:	add	r3, pc, r3
   28edc:	add	r3, r3, #1000	; 0x3e8
   28ee0:	add	r1, pc, r1
   28ee4:	add	r0, pc, r0
   28ee8:	bl	145e8 <__assert_fail@plt>
   28eec:	andeq	r9, r1, r0, lsr r9
   28ef0:	andeq	sl, r1, r8, ror r0
   28ef4:	muleq	r1, r0, r3
   28ef8:	andeq	r9, r1, ip, lsl #18
   28efc:	andeq	sl, r1, r4, asr r0
   28f00:	muleq	r1, r0, r2

00028f04 <flatcc_builder_union_vector_push@@Base>:
   28f04:	strd	r4, [sp, #-20]!	; 0xffffffec
   28f08:	strd	r6, [sp, #8]
   28f0c:	str	lr, [sp, #16]
   28f10:	sub	sp, sp, #12
   28f14:	add	r3, sp, #8
   28f18:	stmdb	r3, {r1, r2}
   28f1c:	ldr	r2, [r0, #32]
   28f20:	ldrh	r3, [r2, #14]
   28f24:	cmp	r3, #7
   28f28:	bne	28fa0 <flatcc_builder_union_vector_push@@Base+0x9c>
   28f2c:	ldr	r3, [r2, #20]
   28f30:	cmn	r3, #-536870911	; 0xe0000001
   28f34:	beq	28f98 <flatcc_builder_union_vector_push@@Base+0x94>
   28f38:	ldr	r5, [r0, #20]
   28f3c:	add	r3, r3, #1
   28f40:	mov	r4, r0
   28f44:	ldr	r1, [r0, #24]
   28f48:	str	r3, [r2, #20]
   28f4c:	add	r3, r5, #8
   28f50:	cmp	r3, r1
   28f54:	str	r3, [r0, #20]
   28f58:	bcs	28f84 <flatcc_builder_union_vector_push@@Base+0x80>
   28f5c:	ldr	r3, [r4, #16]
   28f60:	adds	r0, r3, r5
   28f64:	beq	28f70 <flatcc_builder_union_vector_push@@Base+0x6c>
   28f68:	ldrd	r6, [sp]
   28f6c:	strd	r6, [r3, r5]
   28f70:	add	sp, sp, #12
   28f74:	ldrd	r4, [sp]
   28f78:	ldrd	r6, [sp, #8]
   28f7c:	add	sp, sp, #16
   28f80:	pop	{pc}		; (ldr pc, [sp], #4)
   28f84:	mvn	r2, #3
   28f88:	add	r1, r5, #9
   28f8c:	bl	25710 <union_vector_tests@@Base+0x17c>
   28f90:	cmp	r0, #0
   28f94:	beq	28f5c <flatcc_builder_union_vector_push@@Base+0x58>
   28f98:	mov	r0, #0
   28f9c:	b	28f70 <flatcc_builder_union_vector_push@@Base+0x6c>
   28fa0:	ldr	r3, [pc, #28]	; 28fc4 <flatcc_builder_union_vector_push@@Base+0xc0>
   28fa4:	movw	r2, #1677	; 0x68d
   28fa8:	ldr	r1, [pc, #24]	; 28fc8 <flatcc_builder_union_vector_push@@Base+0xc4>
   28fac:	ldr	r0, [pc, #24]	; 28fcc <flatcc_builder_union_vector_push@@Base+0xc8>
   28fb0:	add	r3, pc, r3
   28fb4:	add	r3, r3, #1040	; 0x410
   28fb8:	add	r1, pc, r1
   28fbc:	add	r0, pc, r0
   28fc0:	bl	145e8 <__assert_fail@plt>
   28fc4:	andeq	r9, r1, r4, lsr r8
   28fc8:	andeq	r9, r1, ip, ror pc
   28fcc:	muleq	r1, r4, r2

00028fd0 <flatcc_builder_append_union_vector@@Base>:
   28fd0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28fd4:	mov	r4, r1
   28fd8:	ldr	r1, [r0, #32]
   28fdc:	ldrh	r3, [r1, #14]
   28fe0:	strd	r6, [sp, #8]
   28fe4:	str	r8, [sp, #16]
   28fe8:	str	lr, [sp, #20]
   28fec:	cmp	r3, #7
   28ff0:	bne	29090 <flatcc_builder_append_union_vector@@Base+0xc0>
   28ff4:	ldr	r3, [r1, #20]
   28ff8:	adds	r3, r2, r3
   28ffc:	movcs	lr, #1
   29000:	movcc	lr, #0
   29004:	cmn	r3, #-536870911	; 0xe0000001
   29008:	movls	ip, #0
   2900c:	movhi	ip, #1
   29010:	orrs	r8, lr, ip
   29014:	bne	290b8 <flatcc_builder_append_union_vector@@Base+0xe8>
   29018:	ldr	r7, [r0, #20]
   2901c:	lsl	r6, r2, #3
   29020:	mov	r5, r0
   29024:	str	r3, [r1, #20]
   29028:	ldr	r3, [r0, #24]
   2902c:	add	r1, r6, r7
   29030:	cmp	r1, r3
   29034:	str	r1, [r0, #20]
   29038:	bcs	29074 <flatcc_builder_append_union_vector@@Base+0xa4>
   2903c:	ldr	r3, [r5, #16]
   29040:	adds	r3, r3, r7
   29044:	beq	2905c <flatcc_builder_append_union_vector@@Base+0x8c>
   29048:	mov	r0, r3
   2904c:	mov	r2, r6
   29050:	mov	r1, r4
   29054:	bl	1451c <memcpy@plt>
   29058:	mov	r3, r0
   2905c:	ldrd	r4, [sp]
   29060:	mov	r0, r3
   29064:	ldrd	r6, [sp, #8]
   29068:	ldr	r8, [sp, #16]
   2906c:	add	sp, sp, #20
   29070:	pop	{pc}		; (ldr pc, [sp], #4)
   29074:	add	r1, r1, #1
   29078:	mvn	r2, #3
   2907c:	bl	25710 <union_vector_tests@@Base+0x17c>
   29080:	cmp	r0, #0
   29084:	beq	2903c <flatcc_builder_append_union_vector@@Base+0x6c>
   29088:	mov	r3, r8
   2908c:	b	2905c <flatcc_builder_append_union_vector@@Base+0x8c>
   29090:	ldr	r3, [pc, #36]	; 290bc <flatcc_builder_append_union_vector@@Base+0xec>
   29094:	movw	r2, #1692	; 0x69c
   29098:	ldr	r1, [pc, #32]	; 290c0 <flatcc_builder_append_union_vector@@Base+0xf0>
   2909c:	ldr	r0, [pc, #32]	; 290c4 <flatcc_builder_append_union_vector@@Base+0xf4>
   290a0:	add	r3, pc, r3
   290a4:	add	r3, r3, #1072	; 0x430
   290a8:	add	r1, pc, r1
   290ac:	add	r3, r3, #4
   290b0:	add	r0, pc, r0
   290b4:	bl	145e8 <__assert_fail@plt>
   290b8:	bl	25a94 <flatcc_builder_default_alloc@@Base+0x2fc>
   290bc:	andeq	r9, r1, r4, asr #14
   290c0:	andeq	r9, r1, ip, lsl #29
   290c4:	andeq	sl, r1, r0, lsr #3

000290c8 <flatcc_builder_create_string@@Base>:
   290c8:	ldr	ip, [r0, #136]	; 0x88
   290cc:	cmp	r2, #0
   290d0:	strd	r4, [sp, #-20]!	; 0xffffffec
   290d4:	mov	r5, #4
   290d8:	mov	r4, r0
   290dc:	strd	r6, [sp, #8]
   290e0:	mov	r0, #1
   290e4:	moveq	r7, #2
   290e8:	str	lr, [sp, #16]
   290ec:	sub	sp, sp, #92	; 0x5c
   290f0:	moveq	r1, r0
   290f4:	add	r3, sp, #12
   290f8:	ldr	lr, [pc, #204]	; 291cc <flatcc_builder_create_string@@Base+0x104>
   290fc:	str	r2, [sp, #12]
   29100:	str	r3, [sp, #24]
   29104:	sub	r3, ip, r2
   29108:	sub	r3, r3, #1
   2910c:	str	r5, [sp, #28]
   29110:	and	r3, r3, #3
   29114:	add	lr, pc, lr
   29118:	add	r3, r3, r0
   2911c:	beq	29134 <flatcc_builder_create_string@@Base+0x6c>
   29120:	add	r5, r2, r5
   29124:	mov	r7, #3
   29128:	str	r1, [sp, #32]
   2912c:	mov	r1, #2
   29130:	str	r2, [sp, #36]	; 0x24
   29134:	ldr	r6, [pc, #148]	; 291d0 <flatcc_builder_create_string@@Base+0x108>
   29138:	add	r0, r3, r5
   2913c:	add	r2, sp, #88	; 0x58
   29140:	add	r1, r1, #1
   29144:	sub	r5, ip, r0
   29148:	add	r1, r2, r1, lsl #3
   2914c:	str	r0, [sp, #16]
   29150:	cmp	ip, r5
   29154:	ldr	r2, [lr, r6]
   29158:	str	r7, [sp, #20]
   2915c:	strd	r2, [r1, #-72]	; 0xffffffb8
   29160:	ble	291a4 <flatcc_builder_create_string@@Base+0xdc>
   29164:	mov	r2, r7
   29168:	mov	r3, r5
   2916c:	str	r0, [sp]
   29170:	add	r1, sp, #24
   29174:	ldr	r0, [r4, #36]	; 0x24
   29178:	ldr	r6, [r4, #44]	; 0x2c
   2917c:	blx	r6
   29180:	cmp	r0, #0
   29184:	bne	291c8 <flatcc_builder_create_string@@Base+0x100>
   29188:	mov	r0, r5
   2918c:	str	r5, [r4, #136]	; 0x88
   29190:	add	sp, sp, #92	; 0x5c
   29194:	ldrd	r4, [sp]
   29198:	ldrd	r6, [sp, #8]
   2919c:	add	sp, sp, #16
   291a0:	pop	{pc}		; (ldr pc, [sp], #4)
   291a4:	ldr	r3, [pc, #40]	; 291d4 <flatcc_builder_create_string@@Base+0x10c>
   291a8:	movw	r2, #647	; 0x287
   291ac:	ldr	r1, [pc, #36]	; 291d8 <flatcc_builder_create_string@@Base+0x110>
   291b0:	ldr	r0, [pc, #36]	; 291dc <flatcc_builder_create_string@@Base+0x114>
   291b4:	add	r3, pc, r3
   291b8:	add	r3, r3, #44	; 0x2c
   291bc:	add	r1, pc, r1
   291c0:	add	r0, pc, r0
   291c4:	bl	145e8 <__assert_fail@plt>
   291c8:	bl	25a5c <flatcc_builder_default_alloc@@Base+0x2c4>
   291cc:	andeq	fp, r2, r4, ror #29
   291d0:	andeq	r0, r0, r4, rrx
   291d4:	andeq	r9, r1, r0, lsr r6
   291d8:	andeq	r9, r1, r8, ror sp
   291dc:	strdeq	r9, [r1], -ip

000291e0 <flatcc_builder_create_string_str@@Base>:
   291e0:	strd	r4, [sp, #-16]!
   291e4:	mov	r5, r0
   291e8:	mov	r0, r1
   291ec:	mov	r4, r1
   291f0:	str	r6, [sp, #8]
   291f4:	str	lr, [sp, #12]
   291f8:	bl	14570 <strlen@plt>
   291fc:	mov	r2, r0
   29200:	mov	r1, r4
   29204:	ldr	r6, [sp, #8]
   29208:	mov	r0, r5
   2920c:	ldrd	r4, [sp]
   29210:	ldr	lr, [sp, #12]
   29214:	add	sp, sp, #16
   29218:	b	290c8 <flatcc_builder_create_string@@Base>

0002921c <flatcc_builder_create_string_strn@@Base>:
   2921c:	strd	r4, [sp, #-16]!
   29220:	mov	r4, r1
   29224:	mov	r1, #0
   29228:	str	r6, [sp, #8]
   2922c:	mov	r6, r0
   29230:	mov	r0, r4
   29234:	mov	r5, r2
   29238:	str	lr, [sp, #12]
   2923c:	bl	145b8 <memchr@plt>
   29240:	cmp	r0, #0
   29244:	mov	r1, r4
   29248:	ldr	lr, [sp, #12]
   2924c:	subne	r5, r0, r4
   29250:	mov	r0, r6
   29254:	mov	r2, r5
   29258:	ldrd	r4, [sp]
   2925c:	ldr	r6, [sp, #8]
   29260:	add	sp, sp, #16
   29264:	b	290c8 <flatcc_builder_create_string@@Base>

00029268 <flatcc_builder_end_string@@Base>:
   29268:	ldr	r3, [r0, #32]
   2926c:	strd	r4, [sp, #-16]!
   29270:	ldrh	r2, [r3, #14]
   29274:	str	r6, [sp, #8]
   29278:	str	lr, [sp, #12]
   2927c:	cmp	r2, #6
   29280:	bne	29358 <flatcc_builder_end_string@@Base+0xf0>
   29284:	ldr	r2, [r3, #20]
   29288:	mov	r4, r0
   2928c:	ldr	r3, [r0, #20]
   29290:	cmp	r2, r3
   29294:	bne	29330 <flatcc_builder_end_string@@Base+0xc8>
   29298:	ldr	r1, [r0, #16]
   2929c:	bl	290c8 <flatcc_builder_create_string@@Base>
   292a0:	subs	r5, r0, #0
   292a4:	beq	2931c <flatcc_builder_end_string@@Base+0xb4>
   292a8:	mov	r1, #0
   292ac:	ldr	r0, [r4, #16]
   292b0:	ldr	r2, [r4, #20]
   292b4:	bl	14594 <memset@plt>
   292b8:	ldr	r3, [r4, #32]
   292bc:	ldr	r0, [r4, #60]	; 0x3c
   292c0:	ldr	r2, [r4, #64]	; 0x40
   292c4:	ldr	ip, [r3]
   292c8:	ldmib	r3, {r1, lr}
   292cc:	add	r0, r0, ip
   292d0:	sub	r2, r2, ip
   292d4:	str	r0, [r4, #16]
   292d8:	cmp	r2, r1
   292dc:	ldrh	r0, [r4, #128]	; 0x80
   292e0:	movcs	r2, r1
   292e4:	str	lr, [r4, #20]
   292e8:	str	ip, [r4, #28]
   292ec:	ldrh	ip, [r4, #130]	; 0x82
   292f0:	str	r2, [r4, #24]
   292f4:	ldr	r2, [r4, #156]	; 0x9c
   292f8:	str	r1, [r3, #4]
   292fc:	cmp	r0, ip
   29300:	sub	r0, r3, #36	; 0x24
   29304:	strhcc	ip, [r4, #128]	; 0x80
   29308:	ldrh	r1, [r3, #12]
   2930c:	sub	r3, r2, #1
   29310:	str	r0, [r4, #32]
   29314:	strh	r1, [r4, #130]	; 0x82
   29318:	str	r3, [r4, #156]	; 0x9c
   2931c:	mov	r0, r5
   29320:	ldrd	r4, [sp]
   29324:	ldr	r6, [sp, #8]
   29328:	add	sp, sp, #12
   2932c:	pop	{pc}		; (ldr pc, [sp], #4)
   29330:	ldr	r3, [pc, #72]	; 29380 <flatcc_builder_end_string@@Base+0x118>
   29334:	movw	r2, #1733	; 0x6c5
   29338:	ldr	r1, [pc, #68]	; 29384 <flatcc_builder_end_string@@Base+0x11c>
   2933c:	ldr	r0, [pc, #68]	; 29388 <flatcc_builder_end_string@@Base+0x120>
   29340:	add	r3, pc, r3
   29344:	add	r3, r3, #1104	; 0x450
   29348:	add	r1, pc, r1
   2934c:	add	r3, r3, #8
   29350:	add	r0, pc, r0
   29354:	bl	145e8 <__assert_fail@plt>
   29358:	ldr	r3, [pc, #44]	; 2938c <flatcc_builder_end_string@@Base+0x124>
   2935c:	movw	r2, #1732	; 0x6c4
   29360:	ldr	r1, [pc, #40]	; 29390 <flatcc_builder_end_string@@Base+0x128>
   29364:	ldr	r0, [pc, #40]	; 29394 <flatcc_builder_end_string@@Base+0x12c>
   29368:	add	r3, pc, r3
   2936c:	add	r3, r3, #1104	; 0x450
   29370:	add	r1, pc, r1
   29374:	add	r3, r3, #8
   29378:	add	r0, pc, r0
   2937c:	bl	145e8 <__assert_fail@plt>
   29380:	andeq	r9, r1, r4, lsr #9
   29384:	andeq	r9, r1, ip, ror #23
   29388:	andeq	r9, r1, r4, lsr pc
   2938c:	andeq	r9, r1, ip, ror r4
   29390:	andeq	r9, r1, r4, asr #23
   29394:	andeq	r9, r1, ip, lsr #27

00029398 <flatcc_builder_string_edit@@Base>:
   29398:	ldr	r0, [r0, #16]
   2939c:	bx	lr

000293a0 <flatcc_builder_string_len@@Base>:
   293a0:	ldr	r3, [r0, #32]
   293a4:	ldr	r0, [r3, #20]
   293a8:	bx	lr

000293ac <flatcc_builder_table_add@@Base>:
   293ac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   293b0:	mov	r4, r0
   293b4:	ldr	r0, [r0, #32]
   293b8:	ldrh	r0, [r0, #14]
   293bc:	strd	r6, [sp, #8]
   293c0:	strd	r8, [sp, #16]
   293c4:	str	sl, [sp, #24]
   293c8:	str	lr, [sp, #28]
   293cc:	cmp	r0, #3
   293d0:	bne	29500 <flatcc_builder_table_add@@Base+0x154>
   293d4:	movw	r0, #32764	; 0x7ffc
   293d8:	cmp	r1, r0
   293dc:	bhi	294d8 <flatcc_builder_table_add@@Base+0x12c>
   293e0:	ldrh	r0, [r4, #130]	; 0x82
   293e4:	lsl	r8, r1, #1
   293e8:	ldr	lr, [r4, #4]
   293ec:	cmp	r0, r3
   293f0:	strhcc	r3, [r4, #130]	; 0x82
   293f4:	ldrh	r6, [lr, r8]
   293f8:	add	lr, lr, r8
   293fc:	cmp	r6, #0
   29400:	bne	294b0 <flatcc_builder_table_add@@Base+0x104>
   29404:	ldr	ip, [r4, #12]
   29408:	movw	r9, #31153	; 0x79b1
   2940c:	movt	r9, #40503	; 0x9e37
   29410:	uxth	r7, r1
   29414:	sub	r5, r3, #1
   29418:	ldr	r0, [r4, #20]
   2941c:	rsb	r3, r3, #0
   29420:	eor	ip, ip, r1
   29424:	ldr	r1, [r4, #24]
   29428:	mul	ip, r9, ip
   2942c:	add	r5, r5, r0
   29430:	and	r5, r5, r3
   29434:	eor	ip, ip, r2
   29438:	add	r2, r2, r5
   2943c:	cmp	r2, r1
   29440:	mul	ip, r9, ip
   29444:	str	ip, [r4, #12]
   29448:	str	r2, [r4, #20]
   2944c:	bcs	29488 <flatcc_builder_table_add@@Base+0xdc>
   29450:	add	r3, r5, #4
   29454:	ldr	r0, [r4, #16]
   29458:	strh	r3, [lr]
   2945c:	ldrh	r3, [r4, #8]
   29460:	add	r0, r0, r5
   29464:	cmp	r3, r7
   29468:	addls	r7, r7, #1
   2946c:	strhls	r7, [r4, #8]
   29470:	ldrd	r4, [sp]
   29474:	ldrd	r6, [sp, #8]
   29478:	ldrd	r8, [sp, #16]
   2947c:	ldr	sl, [sp, #24]
   29480:	add	sp, sp, #28
   29484:	pop	{pc}		; (ldr pc, [sp], #4)
   29488:	add	r1, r2, #1
   2948c:	mov	r0, r4
   29490:	movw	r2, #65532	; 0xfffc
   29494:	bl	25710 <union_vector_tests@@Base+0x17c>
   29498:	cmp	r0, #0
   2949c:	movne	r0, r6
   294a0:	bne	29470 <flatcc_builder_table_add@@Base+0xc4>
   294a4:	ldr	lr, [r4, #4]
   294a8:	add	lr, lr, r8
   294ac:	b	29450 <flatcc_builder_table_add@@Base+0xa4>
   294b0:	ldr	r3, [pc, #112]	; 29528 <flatcc_builder_table_add@@Base+0x17c>
   294b4:	movw	r2, #1784	; 0x6f8
   294b8:	ldr	r1, [pc, #108]	; 2952c <flatcc_builder_table_add@@Base+0x180>
   294bc:	ldr	r0, [pc, #108]	; 29530 <flatcc_builder_table_add@@Base+0x184>
   294c0:	add	r3, pc, r3
   294c4:	add	r3, r3, #1136	; 0x470
   294c8:	add	r1, pc, r1
   294cc:	add	r3, r3, #4
   294d0:	add	r0, pc, r0
   294d4:	bl	145e8 <__assert_fail@plt>
   294d8:	ldr	r3, [pc, #84]	; 29534 <flatcc_builder_table_add@@Base+0x188>
   294dc:	movw	r2, #1774	; 0x6ee
   294e0:	ldr	r1, [pc, #80]	; 29538 <flatcc_builder_table_add@@Base+0x18c>
   294e4:	ldr	r0, [pc, #80]	; 2953c <flatcc_builder_table_add@@Base+0x190>
   294e8:	add	r3, pc, r3
   294ec:	add	r3, r3, #1136	; 0x470
   294f0:	add	r1, pc, r1
   294f4:	add	r3, r3, #4
   294f8:	add	r0, pc, r0
   294fc:	bl	145e8 <__assert_fail@plt>
   29500:	ldr	r3, [pc, #56]	; 29540 <flatcc_builder_table_add@@Base+0x194>
   29504:	movw	r2, #1773	; 0x6ed
   29508:	ldr	r1, [pc, #52]	; 29544 <flatcc_builder_table_add@@Base+0x198>
   2950c:	ldr	r0, [pc, #52]	; 29548 <flatcc_builder_table_add@@Base+0x19c>
   29510:	add	r3, pc, r3
   29514:	add	r3, r3, #1136	; 0x470
   29518:	add	r1, pc, r1
   2951c:	add	r3, r3, #4
   29520:	add	r0, pc, r0
   29524:	bl	145e8 <__assert_fail@plt>
   29528:	andeq	r9, r1, r4, lsr #6
   2952c:	andeq	r9, r1, ip, ror #20
   29530:	andeq	r9, r1, ip, ror #21
   29534:	strdeq	r9, [r1], -ip
   29538:	andeq	r9, r1, r4, asr #20
   2953c:			; <UNDEFINED> instruction: 0x00019db0
   29540:	ldrdeq	r9, [r1], -r4
   29544:	andeq	r9, r1, ip, lsl sl
   29548:	strdeq	r9, [r1], -r0

0002954c <flatcc_builder_table_edit@@Base>:
   2954c:	ldr	r2, [r0, #32]
   29550:	ldrh	r2, [r2, #14]
   29554:	cmp	r2, #3
   29558:	bne	29570 <flatcc_builder_table_edit@@Base+0x24>
   2955c:	ldr	r3, [r0, #20]
   29560:	ldr	r0, [r0, #16]
   29564:	sub	r3, r3, r1
   29568:	add	r0, r0, r3
   2956c:	bx	lr
   29570:	ldr	r3, [pc, #36]	; 2959c <flatcc_builder_table_edit@@Base+0x50>
   29574:	movw	r2, #1794	; 0x702
   29578:	str	r4, [sp, #-8]!
   2957c:	ldr	r1, [pc, #28]	; 295a0 <flatcc_builder_table_edit@@Base+0x54>
   29580:	str	lr, [sp, #4]
   29584:	ldr	r0, [pc, #24]	; 295a4 <flatcc_builder_table_edit@@Base+0x58>
   29588:	add	r3, pc, r3
   2958c:	add	r3, r3, #1168	; 0x490
   29590:	add	r1, pc, r1
   29594:	add	r0, pc, r0
   29598:	bl	145e8 <__assert_fail@plt>
   2959c:	andeq	r9, r1, ip, asr r2
   295a0:	andeq	r9, r1, r4, lsr #19
   295a4:	andeq	r9, r1, ip, ror ip

000295a8 <flatcc_builder_table_add_copy@@Base>:
   295a8:	strd	r4, [sp, #-16]!
   295ac:	mov	r4, r3
   295b0:	ldrh	r3, [sp, #16]
   295b4:	str	r6, [sp, #8]
   295b8:	mov	r6, r2
   295bc:	mov	r2, r4
   295c0:	str	lr, [sp, #12]
   295c4:	bl	293ac <flatcc_builder_table_add@@Base>
   295c8:	subs	r5, r0, #0
   295cc:	beq	295dc <flatcc_builder_table_add_copy@@Base+0x34>
   295d0:	mov	r2, r4
   295d4:	mov	r1, r6
   295d8:	bl	1451c <memcpy@plt>
   295dc:	mov	r0, r5
   295e0:	ldrd	r4, [sp]
   295e4:	ldr	r6, [sp, #8]
   295e8:	add	sp, sp, #12
   295ec:	pop	{pc}		; (ldr pc, [sp], #4)

000295f0 <flatcc_builder_table_add_offset@@Base>:
   295f0:	ldr	r3, [r0, #32]
   295f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   295f8:	ldrh	r3, [r3, #14]
   295fc:	strd	r6, [sp, #8]
   29600:	str	r8, [sp, #16]
   29604:	str	lr, [sp, #20]
   29608:	cmp	r3, #3
   2960c:	bne	29734 <flatcc_builder_table_add_offset@@Base+0x144>
   29610:	movw	r3, #32764	; 0x7ffc
   29614:	cmp	r1, r3
   29618:	bhi	2970c <flatcc_builder_table_add_offset@@Base+0x11c>
   2961c:	ldr	ip, [r0, #4]
   29620:	lsl	r8, r1, #1
   29624:	mov	r4, r0
   29628:	ldrh	r6, [ip, r8]
   2962c:	add	ip, ip, r8
   29630:	cmp	r6, #0
   29634:	bne	296e4 <flatcc_builder_table_add_offset@@Base+0xf4>
   29638:	ldr	r3, [r0, #12]
   2963c:	movw	r2, #31153	; 0x79b1
   29640:	movt	r2, #40503	; 0x9e37
   29644:	uxth	r7, r1
   29648:	ldr	r5, [r0, #20]
   2964c:	ldr	lr, [r0, #24]
   29650:	eor	r3, r3, r1
   29654:	mul	r3, r2, r3
   29658:	add	r5, r5, #3
   2965c:	bic	r5, r5, #3
   29660:	add	r1, r5, #4
   29664:	eor	r3, r3, #4
   29668:	cmp	r1, lr
   2966c:	str	r1, [r0, #20]
   29670:	mul	r3, r2, r3
   29674:	str	r3, [r0, #12]
   29678:	bhi	296c4 <flatcc_builder_table_add_offset@@Base+0xd4>
   2967c:	uxth	r2, r5
   29680:	ldr	r0, [r4, #16]
   29684:	add	r3, r2, #4
   29688:	strh	r3, [ip]
   2968c:	ldrh	r3, [r4, #8]
   29690:	add	r0, r0, r5
   29694:	cmp	r3, r7
   29698:	ldr	r3, [r4]
   2969c:	addls	r7, r7, #1
   296a0:	strhls	r7, [r4, #8]
   296a4:	add	r1, r3, #2
   296a8:	str	r1, [r4]
   296ac:	strh	r2, [r3]
   296b0:	ldrd	r4, [sp]
   296b4:	ldrd	r6, [sp, #8]
   296b8:	ldr	r8, [sp, #16]
   296bc:	add	sp, sp, #20
   296c0:	pop	{pc}		; (ldr pc, [sp], #4)
   296c4:	movw	r2, #65532	; 0xfffc
   296c8:	bl	25710 <union_vector_tests@@Base+0x17c>
   296cc:	cmp	r0, #0
   296d0:	movne	r0, r6
   296d4:	bne	296b0 <flatcc_builder_table_add_offset@@Base+0xc0>
   296d8:	ldr	ip, [r4, #4]
   296dc:	add	ip, ip, r8
   296e0:	b	2967c <flatcc_builder_table_add_offset@@Base+0x8c>
   296e4:	ldr	r3, [pc, #112]	; 2975c <flatcc_builder_table_add_offset@@Base+0x16c>
   296e8:	movw	r2, #1819	; 0x71b
   296ec:	ldr	r1, [pc, #108]	; 29760 <flatcc_builder_table_add_offset@@Base+0x170>
   296f0:	ldr	r0, [pc, #108]	; 29764 <flatcc_builder_table_add_offset@@Base+0x174>
   296f4:	add	r3, pc, r3
   296f8:	add	r3, r3, #1184	; 0x4a0
   296fc:	add	r1, pc, r1
   29700:	add	r3, r3, #12
   29704:	add	r0, pc, r0
   29708:	bl	145e8 <__assert_fail@plt>
   2970c:	ldr	r3, [pc, #84]	; 29768 <flatcc_builder_table_add_offset@@Base+0x178>
   29710:	movw	r2, #1812	; 0x714
   29714:	ldr	r1, [pc, #80]	; 2976c <flatcc_builder_table_add_offset@@Base+0x17c>
   29718:	ldr	r0, [pc, #80]	; 29770 <flatcc_builder_table_add_offset@@Base+0x180>
   2971c:	add	r3, pc, r3
   29720:	add	r3, r3, #1184	; 0x4a0
   29724:	add	r1, pc, r1
   29728:	add	r3, r3, #12
   2972c:	add	r0, pc, r0
   29730:	bl	145e8 <__assert_fail@plt>
   29734:	ldr	r3, [pc, #56]	; 29774 <flatcc_builder_table_add_offset@@Base+0x184>
   29738:	movw	r2, #1811	; 0x713
   2973c:	ldr	r1, [pc, #52]	; 29778 <flatcc_builder_table_add_offset@@Base+0x188>
   29740:	ldr	r0, [pc, #52]	; 2977c <flatcc_builder_table_add_offset@@Base+0x18c>
   29744:	add	r3, pc, r3
   29748:	add	r3, r3, #1184	; 0x4a0
   2974c:	add	r1, pc, r1
   29750:	add	r3, r3, #12
   29754:	add	r0, pc, r0
   29758:	bl	145e8 <__assert_fail@plt>
   2975c:	strdeq	r9, [r1], -r0
   29760:	andeq	r9, r1, r8, lsr r8
   29764:			; <UNDEFINED> instruction: 0x000198b8
   29768:	andeq	r9, r1, r8, asr #1
   2976c:	andeq	r9, r1, r0, lsl r8
   29770:	andeq	r9, r1, ip, ror fp
   29774:	andeq	r9, r1, r0, lsr #1
   29778:	andeq	r9, r1, r8, ror #15
   2977c:			; <UNDEFINED> instruction: 0x00019abc

00029780 <flatcc_builder_table_add_union@@Base>:
   29780:	strd	r4, [sp, #-20]!	; 0xffffffec
   29784:	strd	r6, [sp, #8]
   29788:	str	lr, [sp, #16]
   2978c:	sub	sp, sp, #12
   29790:	add	ip, sp, #8
   29794:	stmdb	ip, {r2, r3}
   29798:	ldr	r3, [r0, #32]
   2979c:	ldrb	r5, [sp]
   297a0:	ldr	r6, [sp, #4]
   297a4:	ldrh	r3, [r3, #14]
   297a8:	cmp	r3, #3
   297ac:	bne	29840 <flatcc_builder_table_add_union@@Base+0xc0>
   297b0:	cmp	r5, #0
   297b4:	mov	r4, r0
   297b8:	mov	r7, r1
   297bc:	beq	29810 <flatcc_builder_table_add_union@@Base+0x90>
   297c0:	cmp	r6, #0
   297c4:	beq	297d8 <flatcc_builder_table_add_union@@Base+0x58>
   297c8:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   297cc:	cmp	r0, #0
   297d0:	strne	r6, [r0]
   297d4:	beq	29890 <flatcc_builder_table_add_union@@Base+0x110>
   297d8:	mov	r3, #1
   297dc:	sub	r1, r7, #1
   297e0:	mov	r2, r3
   297e4:	mov	r0, r4
   297e8:	bl	293ac <flatcc_builder_table_add@@Base>
   297ec:	subs	r3, r0, #0
   297f0:	beq	29868 <flatcc_builder_table_add_union@@Base+0xe8>
   297f4:	mov	r0, #0
   297f8:	strb	r5, [r3]
   297fc:	add	sp, sp, #12
   29800:	ldrd	r4, [sp]
   29804:	ldrd	r6, [sp, #8]
   29808:	add	sp, sp, #16
   2980c:	pop	{pc}		; (ldr pc, [sp], #4)
   29810:	cmp	r6, #0
   29814:	beq	297d8 <flatcc_builder_table_add_union@@Base+0x58>
   29818:	ldr	r3, [pc, #152]	; 298b8 <flatcc_builder_table_add_union@@Base+0x138>
   2981c:	movw	r2, #1519	; 0x5ef
   29820:	ldr	r1, [pc, #148]	; 298bc <flatcc_builder_table_add_union@@Base+0x13c>
   29824:	ldr	r0, [pc, #148]	; 298c0 <flatcc_builder_table_add_union@@Base+0x140>
   29828:	add	r3, pc, r3
   2982c:	add	r3, r3, #1216	; 0x4c0
   29830:	add	r1, pc, r1
   29834:	add	r3, r3, #12
   29838:	add	r0, pc, r0
   2983c:	bl	145e8 <__assert_fail@plt>
   29840:	ldr	r3, [pc, #124]	; 298c4 <flatcc_builder_table_add_union@@Base+0x144>
   29844:	movw	r2, #1518	; 0x5ee
   29848:	ldr	r1, [pc, #120]	; 298c8 <flatcc_builder_table_add_union@@Base+0x148>
   2984c:	ldr	r0, [pc, #120]	; 298cc <flatcc_builder_table_add_union@@Base+0x14c>
   29850:	add	r3, pc, r3
   29854:	add	r3, r3, #1216	; 0x4c0
   29858:	add	r1, pc, r1
   2985c:	add	r3, r3, #12
   29860:	add	r0, pc, r0
   29864:	bl	145e8 <__assert_fail@plt>
   29868:	ldr	r3, [pc, #96]	; 298d0 <flatcc_builder_table_add_union@@Base+0x150>
   2986c:	movw	r2, #1526	; 0x5f6
   29870:	ldr	r1, [pc, #92]	; 298d4 <flatcc_builder_table_add_union@@Base+0x154>
   29874:	ldr	r0, [pc, #92]	; 298d8 <flatcc_builder_table_add_union@@Base+0x158>
   29878:	add	r3, pc, r3
   2987c:	add	r3, r3, #1216	; 0x4c0
   29880:	add	r1, pc, r1
   29884:	add	r3, r3, #12
   29888:	add	r0, pc, r0
   2988c:	bl	145e8 <__assert_fail@plt>
   29890:	ldr	r3, [pc, #68]	; 298dc <flatcc_builder_table_add_union@@Base+0x15c>
   29894:	movw	r2, #1522	; 0x5f2
   29898:	ldr	r1, [pc, #64]	; 298e0 <flatcc_builder_table_add_union@@Base+0x160>
   2989c:	ldr	r0, [pc, #64]	; 298e4 <flatcc_builder_table_add_union@@Base+0x164>
   298a0:	add	r3, pc, r3
   298a4:	add	r3, r3, #1216	; 0x4c0
   298a8:	add	r1, pc, r1
   298ac:	add	r3, r3, #12
   298b0:	add	r0, pc, r0
   298b4:	bl	145e8 <__assert_fail@plt>
   298b8:			; <UNDEFINED> instruction: 0x00018fbc
   298bc:	andeq	r9, r1, r4, lsl #14
   298c0:			; <UNDEFINED> instruction: 0x00019ab4
   298c4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   298c8:	ldrdeq	r9, [r1], -ip
   298cc:			; <UNDEFINED> instruction: 0x000199b0
   298d0:	andeq	r8, r1, ip, ror #30
   298d4:			; <UNDEFINED> instruction: 0x000196b4
   298d8:	muleq	r1, r4, sl
   298dc:	andeq	r8, r1, r4, asr #30
   298e0:	andeq	r9, r1, ip, lsl #13
   298e4:	andeq	r9, r1, r0, ror #20

000298e8 <flatcc_builder_table_add_union_vector@@Base>:
   298e8:	strd	r4, [sp, #-20]!	; 0xffffffec
   298ec:	strd	r6, [sp, #8]
   298f0:	mov	r7, r1
   298f4:	str	lr, [sp, #16]
   298f8:	sub	sp, sp, #12
   298fc:	add	r1, sp, #8
   29900:	stmdb	r1, {r2, r3}
   29904:	ldr	r3, [r0, #32]
   29908:	ldm	sp, {r4, r6}
   2990c:	ldrh	r3, [r3, #14]
   29910:	cmp	r3, #3
   29914:	bne	299c0 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   29918:	clz	r3, r6
   2991c:	clz	r2, r4
   29920:	lsr	r3, r3, #5
   29924:	lsr	r2, r2, #5
   29928:	cmp	r2, r3
   2992c:	beq	2995c <flatcc_builder_table_add_union_vector@@Base+0x74>
   29930:	adds	r4, r4, #0
   29934:	movne	r4, #1
   29938:	cmp	r4, r3
   2993c:	mvnne	r4, #0
   29940:	beq	299e8 <flatcc_builder_table_add_union_vector@@Base+0x100>
   29944:	mov	r0, r4
   29948:	add	sp, sp, #12
   2994c:	ldrd	r4, [sp]
   29950:	ldrd	r6, [sp, #8]
   29954:	add	sp, sp, #16
   29958:	pop	{pc}		; (ldr pc, [sp], #4)
   2995c:	cmp	r4, #0
   29960:	beq	29944 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   29964:	sub	r1, r7, #1
   29968:	mov	r5, r0
   2996c:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   29970:	subs	r3, r0, #0
   29974:	beq	29a10 <flatcc_builder_table_add_union_vector@@Base+0x128>
   29978:	mov	r1, r7
   2997c:	mov	r0, r5
   29980:	str	r4, [r3]
   29984:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   29988:	cmp	r0, #0
   2998c:	movne	r4, #0
   29990:	strne	r6, [r0]
   29994:	bne	29944 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   29998:	ldr	r3, [pc, #152]	; 29a38 <flatcc_builder_table_add_union_vector@@Base+0x150>
   2999c:	movw	r2, #1544	; 0x608
   299a0:	ldr	r1, [pc, #148]	; 29a3c <flatcc_builder_table_add_union_vector@@Base+0x154>
   299a4:	ldr	r0, [pc, #148]	; 29a40 <flatcc_builder_table_add_union_vector@@Base+0x158>
   299a8:	add	r3, pc, r3
   299ac:	add	r3, r3, #1248	; 0x4e0
   299b0:	add	r1, pc, r1
   299b4:	add	r3, r3, #12
   299b8:	add	r0, pc, r0
   299bc:	bl	145e8 <__assert_fail@plt>
   299c0:	ldr	r3, [pc, #124]	; 29a44 <flatcc_builder_table_add_union_vector@@Base+0x15c>
   299c4:	mov	r2, #1536	; 0x600
   299c8:	ldr	r1, [pc, #120]	; 29a48 <flatcc_builder_table_add_union_vector@@Base+0x160>
   299cc:	ldr	r0, [pc, #120]	; 29a4c <flatcc_builder_table_add_union_vector@@Base+0x164>
   299d0:	add	r3, pc, r3
   299d4:	add	r3, r3, #1248	; 0x4e0
   299d8:	add	r1, pc, r1
   299dc:	add	r3, r3, #12
   299e0:	add	r0, pc, r0
   299e4:	bl	145e8 <__assert_fail@plt>
   299e8:	ldr	r3, [pc, #96]	; 29a50 <flatcc_builder_table_add_union_vector@@Base+0x168>
   299ec:	movw	r2, #1537	; 0x601
   299f0:	ldr	r1, [pc, #92]	; 29a54 <flatcc_builder_table_add_union_vector@@Base+0x16c>
   299f4:	ldr	r0, [pc, #92]	; 29a58 <flatcc_builder_table_add_union_vector@@Base+0x170>
   299f8:	add	r3, pc, r3
   299fc:	add	r3, r3, #1248	; 0x4e0
   29a00:	add	r1, pc, r1
   29a04:	add	r3, r3, #12
   29a08:	add	r0, pc, r0
   29a0c:	bl	145e8 <__assert_fail@plt>
   29a10:	ldr	r3, [pc, #68]	; 29a5c <flatcc_builder_table_add_union_vector@@Base+0x174>
   29a14:	movw	r2, #1540	; 0x604
   29a18:	ldr	r1, [pc, #64]	; 29a60 <flatcc_builder_table_add_union_vector@@Base+0x178>
   29a1c:	ldr	r0, [pc, #64]	; 29a64 <flatcc_builder_table_add_union_vector@@Base+0x17c>
   29a20:	add	r3, pc, r3
   29a24:	add	r3, r3, #1248	; 0x4e0
   29a28:	add	r1, pc, r1
   29a2c:	add	r3, r3, #12
   29a30:	add	r0, pc, r0
   29a34:	bl	145e8 <__assert_fail@plt>
   29a38:	andeq	r8, r1, ip, lsr lr
   29a3c:	andeq	r9, r1, r4, lsl #11
   29a40:	andeq	r9, r1, r8, asr r9
   29a44:	andeq	r8, r1, r4, lsl lr
   29a48:	andeq	r9, r1, ip, asr r5
   29a4c:	andeq	r9, r1, r0, lsr r8
   29a50:	andeq	r8, r1, ip, ror #27
   29a54:	andeq	r9, r1, r4, lsr r5
   29a58:	andeq	r9, r1, r0, lsr #18
   29a5c:	andeq	r8, r1, r4, asr #27
   29a60:	andeq	r9, r1, ip, lsl #10
   29a64:	andeq	r9, r1, r0, ror #17

00029a68 <flatcc_builder_push_buffer_alignment@@Base>:
   29a68:	mov	r3, r0
   29a6c:	mov	r2, #4
   29a70:	ldrh	r0, [r0, #128]	; 0x80
   29a74:	strh	r2, [r3, #128]	; 0x80
   29a78:	bx	lr

00029a7c <flatcc_builder_pop_buffer_alignment@@Base>:
   29a7c:	ldrh	r3, [r0, #128]	; 0x80
   29a80:	cmp	r3, r1
   29a84:	strhcc	r1, [r0, #128]	; 0x80
   29a88:	bx	lr

00029a8c <flatcc_builder_get_buffer_alignment@@Base>:
   29a8c:	ldrh	r0, [r0, #128]	; 0x80
   29a90:	bx	lr

00029a94 <flatcc_builder_set_vtable_clustering@@Base>:
   29a94:	clz	r1, r1
   29a98:	lsr	r1, r1, #5
   29a9c:	str	r1, [r0, #180]	; 0xb4
   29aa0:	bx	lr

00029aa4 <flatcc_builder_set_block_align@@Base>:
   29aa4:	strh	r1, [r0, #132]	; 0x84
   29aa8:	bx	lr

00029aac <flatcc_builder_get_level@@Base>:
   29aac:	ldr	r0, [r0, #156]	; 0x9c
   29ab0:	bx	lr

00029ab4 <flatcc_builder_set_max_level@@Base>:
   29ab4:	ldr	r3, [r0, #160]	; 0xa0
   29ab8:	str	r1, [r0, #176]	; 0xb0
   29abc:	cmp	r3, r1
   29ac0:	strlt	r1, [r0, #160]	; 0xa0
   29ac4:	bx	lr

00029ac8 <flatcc_builder_get_buffer_size@@Base>:
   29ac8:	ldr	r3, [r0, #136]	; 0x88
   29acc:	ldr	r0, [r0, #140]	; 0x8c
   29ad0:	sub	r0, r0, r3
   29ad4:	bx	lr

00029ad8 <flatcc_builder_get_buffer_start@@Base>:
   29ad8:	ldr	r0, [r0, #136]	; 0x88
   29adc:	bx	lr

00029ae0 <flatcc_builder_get_buffer_end@@Base>:
   29ae0:	ldr	r0, [r0, #140]	; 0x8c
   29ae4:	bx	lr

00029ae8 <flatcc_builder_set_vtable_cache_limit@@Base>:
   29ae8:	str	r1, [r0, #172]	; 0xac
   29aec:	bx	lr

00029af0 <flatcc_builder_set_identifier@@Base>:
   29af0:	ldr	r3, [pc, #40]	; 29b20 <flatcc_builder_set_identifier@@Base+0x30>
   29af4:	cmp	r1, #0
   29af8:	add	r3, pc, r3
   29afc:	beq	29b0c <flatcc_builder_set_identifier@@Base+0x1c>
   29b00:	ldr	r3, [r1]
   29b04:	str	r3, [r0, #168]	; 0xa8
   29b08:	bx	lr
   29b0c:	ldr	r2, [pc, #16]	; 29b24 <flatcc_builder_set_identifier@@Base+0x34>
   29b10:	ldr	r1, [r3, r2]
   29b14:	ldr	r3, [r1]
   29b18:	str	r3, [r0, #168]	; 0xa8
   29b1c:	bx	lr
   29b20:	andeq	fp, r2, r0, lsl #10
   29b24:	andeq	r0, r0, r4, rrx

00029b28 <flatcc_builder_get_type@@Base>:
   29b28:	ldr	r0, [r0, #32]
   29b2c:	cmp	r0, #0
   29b30:	ldrhne	r0, [r0, #14]
   29b34:	bx	lr

00029b38 <flatcc_builder_get_type_at@@Base>:
   29b38:	cmp	r1, #0
   29b3c:	ble	29b64 <flatcc_builder_get_type_at@@Base+0x2c>
   29b40:	ldr	r3, [r0, #156]	; 0x9c
   29b44:	cmp	r3, r1
   29b48:	blt	29b64 <flatcc_builder_get_type_at@@Base+0x2c>
   29b4c:	ldr	r2, [r0, #32]
   29b50:	sub	r1, r1, r3
   29b54:	add	r1, r1, r1, lsl #3
   29b58:	add	r1, r2, r1, lsl #2
   29b5c:	ldrh	r0, [r1, #14]
   29b60:	bx	lr
   29b64:	mov	r0, #0
   29b68:	bx	lr

00029b6c <flatcc_builder_get_direct_buffer@@Base>:
   29b6c:	ldr	r3, [r0, #184]	; 0xb8
   29b70:	cmp	r3, #0
   29b74:	bne	29b90 <flatcc_builder_get_direct_buffer@@Base+0x24>
   29b78:	cmp	r1, #0
   29b7c:	movne	r3, #0
   29b80:	movne	r0, r3
   29b84:	moveq	r0, r1
   29b88:	strne	r3, [r1]
   29b8c:	bx	lr
   29b90:	ldrd	r2, [r0, #188]	; 0xbc
   29b94:	cmp	r2, r3
   29b98:	bne	29b78 <flatcc_builder_get_direct_buffer@@Base+0xc>
   29b9c:	cmp	r1, #0
   29ba0:	ldrne	r3, [r0, #212]	; 0xd4
   29ba4:	ldr	r0, [r0, #196]	; 0xc4
   29ba8:	strne	r3, [r1]
   29bac:	bx	lr

00029bb0 <flatcc_builder_copy_buffer@@Base>:
   29bb0:	ldr	r3, [r0, #184]	; 0xb8
   29bb4:	cmp	r3, #0
   29bb8:	beq	29be0 <flatcc_builder_copy_buffer@@Base+0x30>
   29bbc:	add	r0, r0, #188	; 0xbc
   29bc0:	str	r4, [sp, #-8]!
   29bc4:	str	lr, [sp, #4]
   29bc8:	bl	2a344 <flatcc_emitter_copy_buffer@@Base>
   29bcc:	cmp	r0, #0
   29bd0:	beq	29be8 <flatcc_builder_copy_buffer@@Base+0x38>
   29bd4:	ldr	r4, [sp]
   29bd8:	add	sp, sp, #4
   29bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   29be0:	mov	r0, r3
   29be4:	bx	lr
   29be8:	ldr	r3, [pc, #32]	; 29c10 <flatcc_builder_copy_buffer@@Base+0x60>
   29bec:	movw	r2, #1926	; 0x786
   29bf0:	ldr	r1, [pc, #28]	; 29c14 <flatcc_builder_copy_buffer@@Base+0x64>
   29bf4:	ldr	r0, [pc, #28]	; 29c18 <flatcc_builder_copy_buffer@@Base+0x68>
   29bf8:	add	r3, pc, r3
   29bfc:	add	r3, r3, #1296	; 0x510
   29c00:	add	r1, pc, r1
   29c04:	add	r3, r3, #4
   29c08:	add	r0, pc, r0
   29c0c:	bl	145e8 <__assert_fail@plt>
   29c10:	andeq	r8, r1, ip, ror #23
   29c14:	andeq	r9, r1, r4, lsr r3
   29c18:	andeq	r9, r1, r8, asr #14

00029c1c <flatcc_builder_finalize_buffer@@Base>:
   29c1c:	strd	r4, [sp, #-16]!
   29c20:	mov	r5, r1
   29c24:	str	r6, [sp, #8]
   29c28:	mov	r6, r0
   29c2c:	str	lr, [sp, #12]
   29c30:	bl	29ac8 <flatcc_builder_get_buffer_size@@Base>
   29c34:	cmp	r5, #0
   29c38:	mov	r4, r0
   29c3c:	strne	r0, [r5]
   29c40:	bl	1454c <malloc@plt>
   29c44:	subs	r5, r0, #0
   29c48:	beq	29c78 <flatcc_builder_finalize_buffer@@Base+0x5c>
   29c4c:	mov	r2, r4
   29c50:	mov	r0, r6
   29c54:	mov	r1, r5
   29c58:	bl	29bb0 <flatcc_builder_copy_buffer@@Base>
   29c5c:	cmp	r0, #0
   29c60:	beq	29c9c <flatcc_builder_finalize_buffer@@Base+0x80>
   29c64:	mov	r0, r5
   29c68:	ldrd	r4, [sp]
   29c6c:	ldr	r6, [sp, #8]
   29c70:	add	sp, sp, #12
   29c74:	pop	{pc}		; (ldr pc, [sp], #4)
   29c78:	ldr	r3, [pc, #64]	; 29cc0 <flatcc_builder_finalize_buffer@@Base+0xa4>
   29c7c:	movw	r2, #1944	; 0x798
   29c80:	ldr	r1, [pc, #60]	; 29cc4 <flatcc_builder_finalize_buffer@@Base+0xa8>
   29c84:	ldr	r0, [pc, #60]	; 29cc8 <flatcc_builder_finalize_buffer@@Base+0xac>
   29c88:	add	r3, pc, r3
   29c8c:	add	r3, r3, #1328	; 0x530
   29c90:	add	r1, pc, r1
   29c94:	add	r0, pc, r0
   29c98:	bl	145e8 <__assert_fail@plt>
   29c9c:	ldr	r3, [pc, #40]	; 29ccc <flatcc_builder_finalize_buffer@@Base+0xb0>
   29ca0:	movw	r2, #1948	; 0x79c
   29ca4:	ldr	r1, [pc, #36]	; 29cd0 <flatcc_builder_finalize_buffer@@Base+0xb4>
   29ca8:	ldr	r0, [pc, #36]	; 29cd4 <flatcc_builder_finalize_buffer@@Base+0xb8>
   29cac:	add	r3, pc, r3
   29cb0:	add	r3, r3, #1328	; 0x530
   29cb4:	add	r1, pc, r1
   29cb8:	add	r0, pc, r0
   29cbc:	bl	145e8 <__assert_fail@plt>
   29cc0:	andeq	r8, r1, ip, asr fp
   29cc4:	andeq	r9, r1, r4, lsr #5
   29cc8:	andeq	r9, r1, r8, lsr #6
   29ccc:	andeq	r8, r1, r8, lsr fp
   29cd0:	andeq	r9, r1, r0, lsl #5
   29cd4:	andeq	r9, r1, r4, lsl #6

00029cd8 <flatcc_builder_finalize_aligned_buffer@@Base>:
   29cd8:	strd	r4, [sp, #-20]!	; 0xffffffec
   29cdc:	mov	r5, r1
   29ce0:	strd	r6, [sp, #8]
   29ce4:	mov	r6, r0
   29ce8:	str	lr, [sp, #16]
   29cec:	sub	sp, sp, #12
   29cf0:	bl	29ac8 <flatcc_builder_get_buffer_size@@Base>
   29cf4:	cmp	r5, #0
   29cf8:	mov	r4, r0
   29cfc:	sub	r4, r4, #1
   29d00:	strne	r0, [r5]
   29d04:	mov	r0, r6
   29d08:	bl	29a8c <flatcc_builder_get_buffer_alignment@@Base>
   29d0c:	rsb	r3, r0, #0
   29d10:	add	r4, r4, r0
   29d14:	cmp	r0, #4
   29d18:	and	r4, r4, r3
   29d1c:	mov	r3, #0
   29d20:	movcs	r1, r0
   29d24:	movcc	r1, #4
   29d28:	mov	r2, r4
   29d2c:	add	r0, sp, #4
   29d30:	str	r3, [sp, #4]
   29d34:	bl	14588 <posix_memalign@plt>
   29d38:	cmp	r0, #0
   29d3c:	beq	29d68 <flatcc_builder_finalize_aligned_buffer@@Base+0x90>
   29d40:	ldr	r0, [sp, #4]
   29d44:	cmp	r0, #0
   29d48:	beq	29d50 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   29d4c:	bl	14510 <free@plt>
   29d50:	cmp	r5, #0
   29d54:	movne	r3, #0
   29d58:	moveq	r7, r5
   29d5c:	movne	r7, r3
   29d60:	strne	r3, [r5]
   29d64:	b	29d8c <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
   29d68:	ldr	r7, [sp, #4]
   29d6c:	cmp	r7, #0
   29d70:	beq	29d50 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   29d74:	mov	r2, r4
   29d78:	mov	r0, r6
   29d7c:	mov	r1, r7
   29d80:	bl	29bb0 <flatcc_builder_copy_buffer@@Base>
   29d84:	cmp	r0, #0
   29d88:	beq	29da4 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   29d8c:	mov	r0, r7
   29d90:	add	sp, sp, #12
   29d94:	ldrd	r4, [sp]
   29d98:	ldrd	r6, [sp, #8]
   29d9c:	add	sp, sp, #16
   29da0:	pop	{pc}		; (ldr pc, [sp], #4)
   29da4:	mov	r0, r7
   29da8:	b	29d4c <flatcc_builder_finalize_aligned_buffer@@Base+0x74>

00029dac <flatcc_builder_aligned_alloc@@Base>:
   29dac:	cmp	r0, #4
   29db0:	str	r4, [sp, #-8]!
   29db4:	mov	r4, #0
   29db8:	str	lr, [sp, #4]
   29dbc:	sub	sp, sp, #8
   29dc0:	mov	r2, r1
   29dc4:	movcs	r1, r0
   29dc8:	movcc	r1, #4
   29dcc:	add	r0, sp, #4
   29dd0:	str	r4, [sp, #4]
   29dd4:	bl	14588 <posix_memalign@plt>
   29dd8:	cmp	r0, r4
   29ddc:	ldr	r0, [sp, #4]
   29de0:	beq	29df4 <flatcc_builder_aligned_alloc@@Base+0x48>
   29de4:	cmp	r0, #0
   29de8:	beq	29df4 <flatcc_builder_aligned_alloc@@Base+0x48>
   29dec:	bl	14510 <free@plt>
   29df0:	mov	r0, r4
   29df4:	add	sp, sp, #8
   29df8:	ldr	r4, [sp]
   29dfc:	add	sp, sp, #4
   29e00:	pop	{pc}		; (ldr pc, [sp], #4)

00029e04 <flatcc_builder_aligned_free@@Base>:
   29e04:	b	14510 <free@plt>

00029e08 <flatcc_builder_get_emit_context@@Base>:
   29e08:	ldr	r0, [r0, #36]	; 0x24
   29e0c:	bx	lr

00029e10 <flatcc_emitter_recycle_page@@Base>:
   29e10:	ldr	r3, [r0]
   29e14:	cmp	r3, r1
   29e18:	beq	29e5c <flatcc_emitter_recycle_page@@Base+0x4c>
   29e1c:	ldr	r2, [r0, #4]
   29e20:	cmp	r2, r1
   29e24:	beq	29e5c <flatcc_emitter_recycle_page@@Base+0x4c>
   29e28:	push	{lr}		; (str lr, [sp, #-4]!)
   29e2c:	mov	r0, #0
   29e30:	ldr	lr, [r1, #2944]	; 0xb80
   29e34:	ldr	ip, [r1, #2948]	; 0xb84
   29e38:	str	ip, [lr, #2948]	; 0xb84
   29e3c:	ldr	r2, [r3, #2948]	; 0xb84
   29e40:	str	lr, [ip, #2944]	; 0xb80
   29e44:	str	r3, [r1, #2944]	; 0xb80
   29e48:	str	r2, [r1, #2948]	; 0xb84
   29e4c:	str	r1, [r2, #2944]	; 0xb80
   29e50:	ldr	r3, [r1, #2944]	; 0xb80
   29e54:	str	r1, [r3, #2948]	; 0xb84
   29e58:	pop	{pc}		; (ldr pc, [sp], #4)
   29e5c:	mvn	r0, #0
   29e60:	bx	lr

00029e64 <flatcc_emitter_reset@@Base>:
   29e64:	ldr	r2, [r0]
   29e68:	cmp	r2, #0
   29e6c:	bxeq	lr
   29e70:	strd	r4, [sp, #-16]!
   29e74:	movw	ip, #64064	; 0xfa40
   29e78:	movt	ip, #65535	; 0xffff
   29e7c:	ldr	r1, [r0, #24]
   29e80:	add	r4, r2, #1472	; 0x5c0
   29e84:	ldr	r3, [r0, #32]
   29e88:	ldr	r5, [r0, #28]
   29e8c:	str	r6, [sp, #8]
   29e90:	str	lr, [sp, #12]
   29e94:	mov	lr, #1472	; 0x5c0
   29e98:	cmp	r3, #0
   29e9c:	stmib	r0, {r2, r4}
   29ea0:	moveq	r3, r1
   29ea4:	lsr	r1, r1, #2
   29ea8:	str	lr, [r0, #12]
   29eac:	add	r3, r3, r3, lsl #1
   29eb0:	str	r4, [r0, #16]
   29eb4:	str	lr, [r0, #20]
   29eb8:	add	r3, r1, r3, lsr #2
   29ebc:	str	ip, [r2, #2952]	; 0xb88
   29ec0:	mov	ip, #0
   29ec4:	cmp	r5, r3, lsl #1
   29ec8:	str	ip, [r0, #24]
   29ecc:	str	r3, [r0, #32]
   29ed0:	bls	29f28 <flatcc_emitter_reset@@Base+0xc4>
   29ed4:	ldr	r3, [r2, #2944]	; 0xb80
   29ed8:	mov	r4, r0
   29edc:	cmp	r2, r3
   29ee0:	bne	29ef8 <flatcc_emitter_reset@@Base+0x94>
   29ee4:	b	29f28 <flatcc_emitter_reset@@Base+0xc4>
   29ee8:	ldm	r4, {r1, r2}
   29eec:	ldr	r3, [r2, #2944]	; 0xb80
   29ef0:	cmp	r3, r1
   29ef4:	beq	29f28 <flatcc_emitter_reset@@Base+0xc4>
   29ef8:	ldr	r1, [r3, #2944]	; 0xb80
   29efc:	mov	r0, r3
   29f00:	str	r1, [r2, #2944]	; 0xb80
   29f04:	ldr	r3, [r3, #2944]	; 0xb80
   29f08:	str	r2, [r3, #2948]	; 0xb84
   29f0c:	bl	14510 <free@plt>
   29f10:	ldr	r3, [r4, #28]
   29f14:	ldr	r2, [r4, #32]
   29f18:	sub	r3, r3, #2944	; 0xb80
   29f1c:	cmp	r3, r2, lsl #1
   29f20:	str	r3, [r4, #28]
   29f24:	bhi	29ee8 <flatcc_emitter_reset@@Base+0x84>
   29f28:	ldrd	r4, [sp]
   29f2c:	ldr	r6, [sp, #8]
   29f30:	add	sp, sp, #12
   29f34:	pop	{pc}		; (ldr pc, [sp], #4)

00029f38 <flatcc_emitter_clear@@Base>:
   29f38:	ldr	r3, [r0]
   29f3c:	cmp	r3, #0
   29f40:	bxeq	lr
   29f44:	mov	r1, #0
   29f48:	strd	r4, [sp, #-16]!
   29f4c:	mov	r5, r0
   29f50:	ldr	r2, [r3, #2948]	; 0xb84
   29f54:	str	r6, [sp, #8]
   29f58:	str	lr, [sp, #12]
   29f5c:	str	r1, [r2, #2944]	; 0xb80
   29f60:	ldr	r4, [r3, #2944]	; 0xb80
   29f64:	cmp	r4, r1
   29f68:	bne	29f74 <flatcc_emitter_clear@@Base+0x3c>
   29f6c:	b	29fb0 <flatcc_emitter_clear@@Base+0x78>
   29f70:	mov	r4, r3
   29f74:	ldr	r0, [r4, #2948]	; 0xb84
   29f78:	bl	14510 <free@plt>
   29f7c:	ldr	r3, [r4, #2944]	; 0xb80
   29f80:	cmp	r3, #0
   29f84:	bne	29f70 <flatcc_emitter_clear@@Base+0x38>
   29f88:	mov	r0, r4
   29f8c:	bl	14510 <free@plt>
   29f90:	mov	r0, r5
   29f94:	mov	r2, #36	; 0x24
   29f98:	ldrd	r4, [sp]
   29f9c:	mov	r1, #0
   29fa0:	ldr	r6, [sp, #8]
   29fa4:	ldr	lr, [sp, #12]
   29fa8:	add	sp, sp, #16
   29fac:	b	14594 <memset@plt>
   29fb0:	mov	r4, r3
   29fb4:	b	29f88 <flatcc_emitter_clear@@Base+0x50>

00029fb8 <flatcc_emitter@@Base>:
   29fb8:	cmp	r3, #0
   29fbc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29fc0:	mov	r4, r0
   29fc4:	ldr	r3, [r0, #24]
   29fc8:	strd	r6, [sp, #8]
   29fcc:	strd	r8, [sp, #16]
   29fd0:	sub	r8, r2, #1
   29fd4:	strd	sl, [sp, #24]
   29fd8:	str	lr, [sp, #32]
   29fdc:	sub	sp, sp, #12
   29fe0:	ldr	r0, [sp, #48]	; 0x30
   29fe4:	add	r3, r3, r0
   29fe8:	str	r3, [r4, #24]
   29fec:	blt	2a1bc <flatcc_emitter@@Base+0x204>
   29ff0:	ldr	r3, [r4, #20]
   29ff4:	cmp	r3, r0
   29ff8:	bcs	2a098 <flatcc_emitter@@Base+0xe0>
   29ffc:	cmp	r2, #0
   2a000:	beq	2a078 <flatcc_emitter@@Base+0xc0>
   2a004:	mov	r8, r2
   2a008:	add	r5, r1, #8
   2a00c:	movw	r2, #64064	; 0xfa40
   2a010:	movt	r2, #65535	; 0xffff
   2a014:	str	r2, [sp, #4]
   2a018:	ldmdb	r5, {r7, fp}
   2a01c:	cmp	fp, #0
   2a020:	beq	2a06c <flatcc_emitter@@Base+0xb4>
   2a024:	mov	r9, #1472	; 0x5c0
   2a028:	cmp	fp, r3
   2a02c:	mov	r6, r3
   2a030:	bls	2a128 <flatcc_emitter@@Base+0x170>
   2a034:	cmp	r3, #0
   2a038:	subne	fp, fp, r3
   2a03c:	beq	2a0e0 <flatcc_emitter@@Base+0x128>
   2a040:	mov	r2, r6
   2a044:	mov	r1, r7
   2a048:	ldr	r0, [r4, #16]
   2a04c:	bl	1451c <memcpy@plt>
   2a050:	ldrd	r2, [r4, #16]
   2a054:	cmp	fp, #0
   2a058:	add	r7, r7, r6
   2a05c:	add	r2, r2, r6
   2a060:	sub	r3, r3, r6
   2a064:	strd	r2, [r4, #16]
   2a068:	bne	2a028 <flatcc_emitter@@Base+0x70>
   2a06c:	subs	r8, r8, #1
   2a070:	add	r5, r5, #8
   2a074:	bne	2a018 <flatcc_emitter@@Base+0x60>
   2a078:	mov	r0, #0
   2a07c:	add	sp, sp, #12
   2a080:	ldrd	r4, [sp]
   2a084:	ldrd	r6, [sp, #8]
   2a088:	ldrd	r8, [sp, #16]
   2a08c:	ldrd	sl, [sp, #24]
   2a090:	add	sp, sp, #32
   2a094:	pop	{pc}		; (ldr pc, [sp], #4)
   2a098:	ldr	r7, [r4, #16]
   2a09c:	sub	r3, r3, r0
   2a0a0:	str	r3, [r4, #20]
   2a0a4:	add	r0, r7, r0
   2a0a8:	str	r0, [r4, #16]
   2a0ac:	cmp	r2, #0
   2a0b0:	addne	r4, r1, #8
   2a0b4:	beq	2a078 <flatcc_emitter@@Base+0xc0>
   2a0b8:	mov	r0, r7
   2a0bc:	ldmdb	r4, {r1, r2}
   2a0c0:	sub	r8, r8, #1
   2a0c4:	bl	1451c <memcpy@plt>
   2a0c8:	ldr	r3, [r4, #-4]
   2a0cc:	cmn	r8, #1
   2a0d0:	add	r4, r4, #8
   2a0d4:	add	r7, r7, r3
   2a0d8:	bne	2a0b8 <flatcc_emitter@@Base+0x100>
   2a0dc:	b	2a078 <flatcc_emitter@@Base+0xc0>
   2a0e0:	ldr	r6, [r4, #4]
   2a0e4:	cmp	r6, #0
   2a0e8:	beq	2a168 <flatcc_emitter@@Base+0x1b0>
   2a0ec:	ldr	sl, [r4]
   2a0f0:	ldr	r0, [r6, #2944]	; 0xb80
   2a0f4:	cmp	r0, sl
   2a0f8:	beq	2a134 <flatcc_emitter@@Base+0x17c>
   2a0fc:	str	r0, [r4, #4]
   2a100:	ldr	r2, [r0, #2948]	; 0xb84
   2a104:	mov	r3, #2944	; 0xb80
   2a108:	cmp	fp, r3
   2a10c:	mov	r6, r3
   2a110:	ldr	r2, [r2, #2952]	; 0xb88
   2a114:	str	r0, [r4, #16]
   2a118:	str	r3, [r4, #20]
   2a11c:	add	r2, r2, r3
   2a120:	str	r2, [r0, #2952]	; 0xb88
   2a124:	bhi	2a034 <flatcc_emitter@@Base+0x7c>
   2a128:	mov	r6, fp
   2a12c:	mov	fp, #0
   2a130:	b	2a040 <flatcc_emitter@@Base+0x88>
   2a134:	movw	r0, #2956	; 0xb8c
   2a138:	bl	1454c <malloc@plt>
   2a13c:	cmp	r0, #0
   2a140:	beq	2a1b4 <flatcc_emitter@@Base+0x1fc>
   2a144:	ldr	r2, [r4, #28]
   2a148:	str	sl, [r0, #2944]	; 0xb80
   2a14c:	str	r6, [r0, #2948]	; 0xb84
   2a150:	add	r2, r2, #2944	; 0xb80
   2a154:	str	r2, [r4, #28]
   2a158:	str	r0, [sl, #2948]	; 0xb84
   2a15c:	str	r0, [r6, #2944]	; 0xb80
   2a160:	str	r0, [r4, #4]
   2a164:	b	2a100 <flatcc_emitter@@Base+0x148>
   2a168:	movw	r0, #2956	; 0xb8c
   2a16c:	bl	1454c <malloc@plt>
   2a170:	cmp	r0, #0
   2a174:	beq	2a1b4 <flatcc_emitter@@Base+0x1fc>
   2a178:	ldr	r2, [r4, #28]
   2a17c:	add	r1, r0, #1472	; 0x5c0
   2a180:	mov	r3, #1472	; 0x5c0
   2a184:	str	r0, [r4]
   2a188:	strd	r0, [r4, #4]
   2a18c:	str	r9, [r4, #12]
   2a190:	str	r1, [r4, #16]
   2a194:	add	r2, r2, #2944	; 0xb80
   2a198:	str	r9, [r4, #20]
   2a19c:	str	r0, [r0, #2944]	; 0xb80
   2a1a0:	str	r2, [r4, #28]
   2a1a4:	ldr	r2, [sp, #4]
   2a1a8:	str	r0, [r0, #2948]	; 0xb84
   2a1ac:	str	r2, [r0, #2952]	; 0xb88
   2a1b0:	b	2a028 <flatcc_emitter@@Base+0x70>
   2a1b4:	mvn	r0, #0
   2a1b8:	b	2a07c <flatcc_emitter@@Base+0xc4>
   2a1bc:	ldr	r3, [r4, #12]
   2a1c0:	cmp	r3, r0
   2a1c4:	bcs	2a32c <flatcc_emitter@@Base+0x374>
   2a1c8:	add	r5, r1, r2, lsl #3
   2a1cc:	movw	r3, #64064	; 0xfa40
   2a1d0:	movt	r3, #65535	; 0xffff
   2a1d4:	str	r3, [sp, #4]
   2a1d8:	cmn	r8, #1
   2a1dc:	beq	2a078 <flatcc_emitter@@Base+0xc0>
   2a1e0:	ldr	r7, [r5, #-8]
   2a1e4:	ldr	r6, [r5, #-4]
   2a1e8:	cmp	r6, #0
   2a1ec:	add	r7, r7, r6
   2a1f0:	beq	2a240 <flatcc_emitter@@Base+0x288>
   2a1f4:	mov	r9, #1472	; 0x5c0
   2a1f8:	ldr	r2, [r4, #12]
   2a1fc:	cmp	r2, r6
   2a200:	bcs	2a2a4 <flatcc_emitter@@Base+0x2ec>
   2a204:	cmp	r2, #0
   2a208:	beq	2a24c <flatcc_emitter@@Base+0x294>
   2a20c:	sub	r6, r6, r2
   2a210:	mov	r1, #0
   2a214:	ldr	r3, [r4, #8]
   2a218:	rsb	r0, r2, #0
   2a21c:	add	r7, r7, r0
   2a220:	str	r1, [r4, #12]
   2a224:	mov	r1, r7
   2a228:	add	r3, r3, r0
   2a22c:	mov	r0, r3
   2a230:	str	r3, [r4, #8]
   2a234:	bl	1451c <memcpy@plt>
   2a238:	cmp	r6, #0
   2a23c:	bne	2a1f8 <flatcc_emitter@@Base+0x240>
   2a240:	sub	r5, r5, #8
   2a244:	sub	r8, r8, #1
   2a248:	b	2a1d8 <flatcc_emitter@@Base+0x220>
   2a24c:	ldr	fp, [r4]
   2a250:	cmp	fp, #0
   2a254:	beq	2a2e8 <flatcc_emitter@@Base+0x330>
   2a258:	ldr	sl, [r4, #4]
   2a25c:	ldr	r0, [fp, #2948]	; 0xb84
   2a260:	cmp	r0, sl
   2a264:	beq	2a2b4 <flatcc_emitter@@Base+0x2fc>
   2a268:	ldr	r3, [fp, #2952]	; 0xb88
   2a26c:	sub	r3, r3, #2944	; 0xb80
   2a270:	str	r3, [r0, #2952]	; 0xb88
   2a274:	str	r0, [r4]
   2a278:	ldr	r3, [r0, #2944]	; 0xb80
   2a27c:	mov	r2, #2944	; 0xb80
   2a280:	add	r1, r0, #2944	; 0xb80
   2a284:	ldr	r3, [r3, #2952]	; 0xb88
   2a288:	str	r1, [r4, #8]
   2a28c:	str	r2, [r4, #12]
   2a290:	sub	r3, r3, #2944	; 0xb80
   2a294:	str	r3, [r0, #2952]	; 0xb88
   2a298:	ldr	r2, [r4, #12]
   2a29c:	cmp	r2, r6
   2a2a0:	bcc	2a204 <flatcc_emitter@@Base+0x24c>
   2a2a4:	sub	r1, r2, r6
   2a2a8:	mov	r2, r6
   2a2ac:	mov	r6, #0
   2a2b0:	b	2a214 <flatcc_emitter@@Base+0x25c>
   2a2b4:	movw	r0, #2956	; 0xb8c
   2a2b8:	bl	1454c <malloc@plt>
   2a2bc:	cmp	r0, #0
   2a2c0:	beq	2a1b4 <flatcc_emitter@@Base+0x1fc>
   2a2c4:	ldr	r2, [r4, #28]
   2a2c8:	str	fp, [r0, #2944]	; 0xb80
   2a2cc:	str	sl, [r0, #2948]	; 0xb84
   2a2d0:	add	r2, r2, #2944	; 0xb80
   2a2d4:	str	r2, [r4, #28]
   2a2d8:	str	r0, [fp, #2948]	; 0xb84
   2a2dc:	str	r0, [sl, #2944]	; 0xb80
   2a2e0:	str	r0, [r4]
   2a2e4:	b	2a278 <flatcc_emitter@@Base+0x2c0>
   2a2e8:	movw	r0, #2956	; 0xb8c
   2a2ec:	bl	1454c <malloc@plt>
   2a2f0:	cmp	r0, #0
   2a2f4:	beq	2a1b4 <flatcc_emitter@@Base+0x1fc>
   2a2f8:	ldr	r3, [r4, #28]
   2a2fc:	add	r2, r0, #1472	; 0x5c0
   2a300:	str	r0, [r4]
   2a304:	stmib	r4, {r0, r2, r9}
   2a308:	add	r3, r3, #2944	; 0xb80
   2a30c:	str	r2, [r4, #16]
   2a310:	str	r9, [r4, #20]
   2a314:	str	r3, [r4, #28]
   2a318:	ldr	r3, [sp, #4]
   2a31c:	str	r0, [r0, #2944]	; 0xb80
   2a320:	str	r0, [r0, #2948]	; 0xb84
   2a324:	str	r3, [r0, #2952]	; 0xb88
   2a328:	b	2a1f8 <flatcc_emitter@@Base+0x240>
   2a32c:	ldr	r7, [r4, #8]
   2a330:	sub	r3, r3, r0
   2a334:	str	r3, [r4, #12]
   2a338:	sub	r7, r7, r0
   2a33c:	str	r7, [r4, #8]
   2a340:	b	2a0ac <flatcc_emitter@@Base+0xf4>

0002a344 <flatcc_emitter_copy_buffer@@Base>:
   2a344:	ldr	r3, [r0, #24]
   2a348:	strd	r4, [sp, #-16]!
   2a34c:	str	r6, [sp, #8]
   2a350:	str	lr, [sp, #12]
   2a354:	cmp	r3, r2
   2a358:	movhi	r5, #0
   2a35c:	bhi	2a3dc <flatcc_emitter_copy_buffer@@Base+0x98>
   2a360:	ldr	r5, [r0]
   2a364:	mov	r6, r0
   2a368:	cmp	r5, #0
   2a36c:	beq	2a3dc <flatcc_emitter_copy_buffer@@Base+0x98>
   2a370:	ldr	r2, [r6, #4]
   2a374:	mov	r0, r1
   2a378:	ldr	r1, [r6, #8]
   2a37c:	cmp	r5, r2
   2a380:	beq	2a3f0 <flatcc_emitter_copy_buffer@@Base+0xac>
   2a384:	ldr	r2, [r6, #12]
   2a388:	rsb	r2, r2, #2944	; 0xb80
   2a38c:	add	r5, r0, r2
   2a390:	bl	1451c <memcpy@plt>
   2a394:	ldrd	r2, [r6]
   2a398:	ldr	r4, [r2, #2944]	; 0xb80
   2a39c:	cmp	r4, r3
   2a3a0:	beq	2a3c8 <flatcc_emitter_copy_buffer@@Base+0x84>
   2a3a4:	mov	r2, #2944	; 0xb80
   2a3a8:	mov	r1, r4
   2a3ac:	mov	r0, r5
   2a3b0:	add	r5, r5, r2
   2a3b4:	bl	1451c <memcpy@plt>
   2a3b8:	ldr	r3, [r6, #4]
   2a3bc:	ldr	r4, [r4, #2944]	; 0xb80
   2a3c0:	cmp	r3, r4
   2a3c4:	bne	2a3a4 <flatcc_emitter_copy_buffer@@Base+0x60>
   2a3c8:	ldr	r2, [r6, #20]
   2a3cc:	mov	r1, r4
   2a3d0:	mov	r0, r5
   2a3d4:	rsb	r2, r2, #2944	; 0xb80
   2a3d8:	bl	1451c <memcpy@plt>
   2a3dc:	mov	r0, r5
   2a3e0:	ldrd	r4, [sp]
   2a3e4:	ldr	r6, [sp, #8]
   2a3e8:	add	sp, sp, #12
   2a3ec:	pop	{pc}		; (ldr pc, [sp], #4)
   2a3f0:	mov	r2, r3
   2a3f4:	mov	r5, r0
   2a3f8:	bl	1451c <memcpy@plt>
   2a3fc:	b	2a3dc <flatcc_emitter_copy_buffer@@Base+0x98>

0002a400 <flatcc_verify_error_string@@Base>:
   2a400:	cmp	r0, #36	; 0x24
   2a404:	addls	pc, pc, r0, lsl #2
   2a408:	b	2a65c <flatcc_verify_error_string@@Base+0x25c>
   2a40c:	b	2a4a0 <flatcc_verify_error_string@@Base+0xa0>
   2a410:	b	2a650 <flatcc_verify_error_string@@Base+0x250>
   2a414:	b	2a644 <flatcc_verify_error_string@@Base+0x244>
   2a418:	b	2a638 <flatcc_verify_error_string@@Base+0x238>
   2a41c:	b	2a62c <flatcc_verify_error_string@@Base+0x22c>
   2a420:	b	2a620 <flatcc_verify_error_string@@Base+0x220>
   2a424:	b	2a614 <flatcc_verify_error_string@@Base+0x214>
   2a428:	b	2a608 <flatcc_verify_error_string@@Base+0x208>
   2a42c:	b	2a5fc <flatcc_verify_error_string@@Base+0x1fc>
   2a430:	b	2a5f0 <flatcc_verify_error_string@@Base+0x1f0>
   2a434:	b	2a5e4 <flatcc_verify_error_string@@Base+0x1e4>
   2a438:	b	2a5d8 <flatcc_verify_error_string@@Base+0x1d8>
   2a43c:	b	2a5cc <flatcc_verify_error_string@@Base+0x1cc>
   2a440:	b	2a5c0 <flatcc_verify_error_string@@Base+0x1c0>
   2a444:	b	2a5b4 <flatcc_verify_error_string@@Base+0x1b4>
   2a448:	b	2a5a8 <flatcc_verify_error_string@@Base+0x1a8>
   2a44c:	b	2a59c <flatcc_verify_error_string@@Base+0x19c>
   2a450:	b	2a590 <flatcc_verify_error_string@@Base+0x190>
   2a454:	b	2a584 <flatcc_verify_error_string@@Base+0x184>
   2a458:	b	2a578 <flatcc_verify_error_string@@Base+0x178>
   2a45c:	b	2a56c <flatcc_verify_error_string@@Base+0x16c>
   2a460:	b	2a560 <flatcc_verify_error_string@@Base+0x160>
   2a464:	b	2a554 <flatcc_verify_error_string@@Base+0x154>
   2a468:	b	2a548 <flatcc_verify_error_string@@Base+0x148>
   2a46c:	b	2a53c <flatcc_verify_error_string@@Base+0x13c>
   2a470:	b	2a530 <flatcc_verify_error_string@@Base+0x130>
   2a474:	b	2a524 <flatcc_verify_error_string@@Base+0x124>
   2a478:	b	2a518 <flatcc_verify_error_string@@Base+0x118>
   2a47c:	b	2a50c <flatcc_verify_error_string@@Base+0x10c>
   2a480:	b	2a500 <flatcc_verify_error_string@@Base+0x100>
   2a484:	b	2a4f4 <flatcc_verify_error_string@@Base+0xf4>
   2a488:	b	2a4e8 <flatcc_verify_error_string@@Base+0xe8>
   2a48c:	b	2a4dc <flatcc_verify_error_string@@Base+0xdc>
   2a490:	b	2a4d0 <flatcc_verify_error_string@@Base+0xd0>
   2a494:	b	2a4c4 <flatcc_verify_error_string@@Base+0xc4>
   2a498:	b	2a4b8 <flatcc_verify_error_string@@Base+0xb8>
   2a49c:	b	2a4ac <flatcc_verify_error_string@@Base+0xac>
   2a4a0:	ldr	r0, [pc, #448]	; 2a668 <flatcc_verify_error_string@@Base+0x268>
   2a4a4:	add	r0, pc, r0
   2a4a8:	bx	lr
   2a4ac:	ldr	r0, [pc, #440]	; 2a66c <flatcc_verify_error_string@@Base+0x26c>
   2a4b0:	add	r0, pc, r0
   2a4b4:	bx	lr
   2a4b8:	ldr	r0, [pc, #432]	; 2a670 <flatcc_verify_error_string@@Base+0x270>
   2a4bc:	add	r0, pc, r0
   2a4c0:	bx	lr
   2a4c4:	ldr	r0, [pc, #424]	; 2a674 <flatcc_verify_error_string@@Base+0x274>
   2a4c8:	add	r0, pc, r0
   2a4cc:	bx	lr
   2a4d0:	ldr	r0, [pc, #416]	; 2a678 <flatcc_verify_error_string@@Base+0x278>
   2a4d4:	add	r0, pc, r0
   2a4d8:	bx	lr
   2a4dc:	ldr	r0, [pc, #408]	; 2a67c <flatcc_verify_error_string@@Base+0x27c>
   2a4e0:	add	r0, pc, r0
   2a4e4:	bx	lr
   2a4e8:	ldr	r0, [pc, #400]	; 2a680 <flatcc_verify_error_string@@Base+0x280>
   2a4ec:	add	r0, pc, r0
   2a4f0:	bx	lr
   2a4f4:	ldr	r0, [pc, #392]	; 2a684 <flatcc_verify_error_string@@Base+0x284>
   2a4f8:	add	r0, pc, r0
   2a4fc:	bx	lr
   2a500:	ldr	r0, [pc, #384]	; 2a688 <flatcc_verify_error_string@@Base+0x288>
   2a504:	add	r0, pc, r0
   2a508:	bx	lr
   2a50c:	ldr	r0, [pc, #376]	; 2a68c <flatcc_verify_error_string@@Base+0x28c>
   2a510:	add	r0, pc, r0
   2a514:	bx	lr
   2a518:	ldr	r0, [pc, #368]	; 2a690 <flatcc_verify_error_string@@Base+0x290>
   2a51c:	add	r0, pc, r0
   2a520:	bx	lr
   2a524:	ldr	r0, [pc, #360]	; 2a694 <flatcc_verify_error_string@@Base+0x294>
   2a528:	add	r0, pc, r0
   2a52c:	bx	lr
   2a530:	ldr	r0, [pc, #352]	; 2a698 <flatcc_verify_error_string@@Base+0x298>
   2a534:	add	r0, pc, r0
   2a538:	bx	lr
   2a53c:	ldr	r0, [pc, #344]	; 2a69c <flatcc_verify_error_string@@Base+0x29c>
   2a540:	add	r0, pc, r0
   2a544:	bx	lr
   2a548:	ldr	r0, [pc, #336]	; 2a6a0 <flatcc_verify_error_string@@Base+0x2a0>
   2a54c:	add	r0, pc, r0
   2a550:	bx	lr
   2a554:	ldr	r0, [pc, #328]	; 2a6a4 <flatcc_verify_error_string@@Base+0x2a4>
   2a558:	add	r0, pc, r0
   2a55c:	bx	lr
   2a560:	ldr	r0, [pc, #320]	; 2a6a8 <flatcc_verify_error_string@@Base+0x2a8>
   2a564:	add	r0, pc, r0
   2a568:	bx	lr
   2a56c:	ldr	r0, [pc, #312]	; 2a6ac <flatcc_verify_error_string@@Base+0x2ac>
   2a570:	add	r0, pc, r0
   2a574:	bx	lr
   2a578:	ldr	r0, [pc, #304]	; 2a6b0 <flatcc_verify_error_string@@Base+0x2b0>
   2a57c:	add	r0, pc, r0
   2a580:	bx	lr
   2a584:	ldr	r0, [pc, #296]	; 2a6b4 <flatcc_verify_error_string@@Base+0x2b4>
   2a588:	add	r0, pc, r0
   2a58c:	bx	lr
   2a590:	ldr	r0, [pc, #288]	; 2a6b8 <flatcc_verify_error_string@@Base+0x2b8>
   2a594:	add	r0, pc, r0
   2a598:	bx	lr
   2a59c:	ldr	r0, [pc, #280]	; 2a6bc <flatcc_verify_error_string@@Base+0x2bc>
   2a5a0:	add	r0, pc, r0
   2a5a4:	bx	lr
   2a5a8:	ldr	r0, [pc, #272]	; 2a6c0 <flatcc_verify_error_string@@Base+0x2c0>
   2a5ac:	add	r0, pc, r0
   2a5b0:	bx	lr
   2a5b4:	ldr	r0, [pc, #264]	; 2a6c4 <flatcc_verify_error_string@@Base+0x2c4>
   2a5b8:	add	r0, pc, r0
   2a5bc:	bx	lr
   2a5c0:	ldr	r0, [pc, #256]	; 2a6c8 <flatcc_verify_error_string@@Base+0x2c8>
   2a5c4:	add	r0, pc, r0
   2a5c8:	bx	lr
   2a5cc:	ldr	r0, [pc, #248]	; 2a6cc <flatcc_verify_error_string@@Base+0x2cc>
   2a5d0:	add	r0, pc, r0
   2a5d4:	bx	lr
   2a5d8:	ldr	r0, [pc, #240]	; 2a6d0 <flatcc_verify_error_string@@Base+0x2d0>
   2a5dc:	add	r0, pc, r0
   2a5e0:	bx	lr
   2a5e4:	ldr	r0, [pc, #232]	; 2a6d4 <flatcc_verify_error_string@@Base+0x2d4>
   2a5e8:	add	r0, pc, r0
   2a5ec:	bx	lr
   2a5f0:	ldr	r0, [pc, #224]	; 2a6d8 <flatcc_verify_error_string@@Base+0x2d8>
   2a5f4:	add	r0, pc, r0
   2a5f8:	bx	lr
   2a5fc:	ldr	r0, [pc, #216]	; 2a6dc <flatcc_verify_error_string@@Base+0x2dc>
   2a600:	add	r0, pc, r0
   2a604:	bx	lr
   2a608:	ldr	r0, [pc, #208]	; 2a6e0 <flatcc_verify_error_string@@Base+0x2e0>
   2a60c:	add	r0, pc, r0
   2a610:	bx	lr
   2a614:	ldr	r0, [pc, #200]	; 2a6e4 <flatcc_verify_error_string@@Base+0x2e4>
   2a618:	add	r0, pc, r0
   2a61c:	bx	lr
   2a620:	ldr	r0, [pc, #192]	; 2a6e8 <flatcc_verify_error_string@@Base+0x2e8>
   2a624:	add	r0, pc, r0
   2a628:	bx	lr
   2a62c:	ldr	r0, [pc, #184]	; 2a6ec <flatcc_verify_error_string@@Base+0x2ec>
   2a630:	add	r0, pc, r0
   2a634:	bx	lr
   2a638:	ldr	r0, [pc, #176]	; 2a6f0 <flatcc_verify_error_string@@Base+0x2f0>
   2a63c:	add	r0, pc, r0
   2a640:	bx	lr
   2a644:	ldr	r0, [pc, #168]	; 2a6f4 <flatcc_verify_error_string@@Base+0x2f4>
   2a648:	add	r0, pc, r0
   2a64c:	bx	lr
   2a650:	ldr	r0, [pc, #160]	; 2a6f8 <flatcc_verify_error_string@@Base+0x2f8>
   2a654:	add	r0, pc, r0
   2a658:	bx	lr
   2a65c:	ldr	r0, [pc, #152]	; 2a6fc <flatcc_verify_error_string@@Base+0x2fc>
   2a660:	add	r0, pc, r0
   2a664:	bx	lr
   2a668:			; <UNDEFINED> instruction: 0x00018ebc
   2a66c:	andeq	r9, r1, r0, lsl r3
   2a670:	ldrdeq	r9, [r1], -ip
   2a674:	muleq	r1, ip, r2
   2a678:	andeq	r9, r1, r8, ror #4
   2a67c:	andeq	r9, r1, r4, lsr r2
   2a680:	andeq	r9, r1, r0, lsl r2
   2a684:	ldrdeq	r9, [r1], -ip
   2a688:	andeq	r9, r1, r8, lsr #3
   2a68c:	andeq	r9, r1, r4, lsl #3
   2a690:	andeq	r9, r1, ip, asr r1
   2a694:	andeq	r9, r1, ip, lsr r1
   2a698:	andeq	r9, r1, r0, lsl #2
   2a69c:	andeq	r9, r1, r8, asr #1
   2a6a0:	muleq	r1, r0, r0
   2a6a4:	andeq	r9, r1, r0, asr r0
   2a6a8:	andeq	r9, r1, r8, lsl r0
   2a6ac:	strdeq	r8, [r1], -r4
   2a6b0:	andeq	r8, r1, r0, asr #31
   2a6b4:	andeq	r8, r1, r0, lsr #31
   2a6b8:	andeq	r8, r1, ip, ror #30
   2a6bc:	andeq	r8, r1, r8, lsr pc
   2a6c0:	andeq	r8, r1, r4, lsl #30
   2a6c4:	ldrdeq	r8, [r1], -ip
   2a6c8:			; <UNDEFINED> instruction: 0x00018eb4
   2a6cc:	muleq	r1, r0, lr
   2a6d0:	andeq	r8, r1, r0, ror lr
   2a6d4:	andeq	r8, r1, ip, asr #28
   2a6d8:	andeq	r8, r1, ip, lsr #28
   2a6dc:	andeq	r8, r1, ip, lsl #28
   2a6e0:	andeq	r8, r1, r4, ror #27
   2a6e4:			; <UNDEFINED> instruction: 0x00018db8
   2a6e8:	andeq	r8, r1, r8, lsl #27
   2a6ec:	andeq	r8, r1, r4, ror #26
   2a6f0:	andeq	r8, r1, ip, lsr sp
   2a6f4:	andeq	r8, r1, ip, lsl sp
   2a6f8:	andeq	r9, r1, ip, ror r1
   2a6fc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>

0002a700 <flatcc_verify_field@@Base>:
   2a700:	ldrh	ip, [r0, #22]
   2a704:	add	r1, r1, #2
   2a708:	lsl	r1, r1, #1
   2a70c:	uxth	r1, r1
   2a710:	cmp	ip, r1
   2a714:	bls	2a75c <flatcc_verify_field@@Base+0x5c>
   2a718:	ldr	ip, [r0, #12]
   2a71c:	ldrh	r1, [ip, r1]
   2a720:	cmp	r1, #0
   2a724:	beq	2a75c <flatcc_verify_field@@Base+0x5c>
   2a728:	ldrh	ip, [r0, #20]
   2a72c:	add	r2, r2, r1
   2a730:	cmp	r2, ip
   2a734:	bhi	2a764 <flatcc_verify_field@@Base+0x64>
   2a738:	ldr	r2, [r0]
   2a73c:	sub	r3, r3, #1
   2a740:	ldr	r0, [r0, #16]
   2a744:	add	r2, r2, r0
   2a748:	add	r1, r2, r1
   2a74c:	tst	r1, r3
   2a750:	moveq	r0, #0
   2a754:	movne	r0, #12
   2a758:	bx	lr
   2a75c:	mov	r0, #0
   2a760:	bx	lr
   2a764:	mov	r0, #13
   2a768:	bx	lr

0002a76c <flatcc_verify_string_field@@Base>:
   2a76c:	ldrh	r3, [r0, #22]
   2a770:	add	r1, r1, #2
   2a774:	lsl	r1, r1, #1
   2a778:	uxth	r1, r1
   2a77c:	cmp	r3, r1
   2a780:	bls	2a81c <flatcc_verify_string_field@@Base+0xb0>
   2a784:	ldr	r3, [r0, #12]
   2a788:	ldrh	r3, [r3, r1]
   2a78c:	cmp	r3, #0
   2a790:	beq	2a81c <flatcc_verify_string_field@@Base+0xb0>
   2a794:	ldrh	r2, [r0, #20]
   2a798:	add	r1, r3, #4
   2a79c:	cmp	r1, r2
   2a7a0:	bhi	2a82c <flatcc_verify_string_field@@Base+0xc0>
   2a7a4:	ldr	r2, [r0, #16]
   2a7a8:	add	r3, r3, r2
   2a7ac:	tst	r3, #3
   2a7b0:	bne	2a834 <flatcc_verify_string_field@@Base+0xc8>
   2a7b4:	cmp	r3, #0
   2a7b8:	beq	2a844 <flatcc_verify_string_field@@Base+0xd8>
   2a7bc:	ldr	r1, [r0]
   2a7c0:	ldr	r2, [r1, r3]
   2a7c4:	add	r2, r3, r2
   2a7c8:	cmp	r3, r2
   2a7cc:	bcs	2a814 <flatcc_verify_string_field@@Base+0xa8>
   2a7d0:	ldr	r3, [r0, #4]
   2a7d4:	add	r0, r2, #4
   2a7d8:	cmp	r3, r0
   2a7dc:	bcc	2a814 <flatcc_verify_string_field@@Base+0xa8>
   2a7e0:	tst	r2, #3
   2a7e4:	bne	2a814 <flatcc_verify_string_field@@Base+0xa8>
   2a7e8:	ldr	r2, [r1, r2]
   2a7ec:	sub	r3, r3, r0
   2a7f0:	add	ip, r2, #1
   2a7f4:	cmp	r3, ip
   2a7f8:	bcc	2a83c <flatcc_verify_string_field@@Base+0xd0>
   2a7fc:	add	r1, r1, r0
   2a800:	ldrb	r3, [r1, r2]
   2a804:	cmp	r3, #0
   2a808:	moveq	r0, #0
   2a80c:	movne	r0, #7
   2a810:	bx	lr
   2a814:	mov	r0, #17
   2a818:	bx	lr
   2a81c:	cmp	r2, #0
   2a820:	moveq	r0, #0
   2a824:	movne	r0, #4
   2a828:	bx	lr
   2a82c:	mov	r0, #13
   2a830:	bx	lr
   2a834:	mov	r0, #12
   2a838:	bx	lr
   2a83c:	mov	r0, #8
   2a840:	bx	lr
   2a844:	mov	r0, r3
   2a848:	bx	lr

0002a84c <flatcc_verify_vector_field@@Base>:
   2a84c:	ldrh	ip, [r0, #22]
   2a850:	add	r1, r1, #2
   2a854:	lsl	r1, r1, #1
   2a858:	str	r4, [sp, #-8]!
   2a85c:	str	lr, [sp, #4]
   2a860:	uxth	r1, r1
   2a864:	ldrh	lr, [sp, #8]
   2a868:	cmp	ip, r1
   2a86c:	bls	2a930 <flatcc_verify_vector_field@@Base+0xe4>
   2a870:	ldr	ip, [r0, #12]
   2a874:	ldrh	r1, [ip, r1]
   2a878:	cmp	r1, #0
   2a87c:	beq	2a930 <flatcc_verify_vector_field@@Base+0xe4>
   2a880:	ldrh	r2, [r0, #20]
   2a884:	add	ip, r1, #4
   2a888:	cmp	ip, r2
   2a88c:	movhi	r0, #13
   2a890:	bhi	2a914 <flatcc_verify_vector_field@@Base+0xc8>
   2a894:	ldr	r2, [r0, #16]
   2a898:	add	r2, r1, r2
   2a89c:	tst	r2, #3
   2a8a0:	movne	r0, #12
   2a8a4:	bne	2a914 <flatcc_verify_vector_field@@Base+0xc8>
   2a8a8:	cmp	r2, #0
   2a8ac:	beq	2a948 <flatcc_verify_vector_field@@Base+0xfc>
   2a8b0:	ldr	r4, [r0]
   2a8b4:	ldr	ip, [r4, r2]
   2a8b8:	add	ip, r2, ip
   2a8bc:	cmp	r2, ip
   2a8c0:	bcs	2a920 <flatcc_verify_vector_field@@Base+0xd4>
   2a8c4:	ldr	r1, [r0, #4]
   2a8c8:	add	r0, ip, #4
   2a8cc:	cmp	r1, r0
   2a8d0:	bcc	2a920 <flatcc_verify_vector_field@@Base+0xd4>
   2a8d4:	cmp	lr, #4
   2a8d8:	movcc	lr, #4
   2a8dc:	sub	lr, lr, #1
   2a8e0:	orr	lr, lr, #3
   2a8e4:	tst	lr, r0
   2a8e8:	bne	2a920 <flatcc_verify_vector_field@@Base+0xd4>
   2a8ec:	ldr	r2, [r4, ip]
   2a8f0:	ldr	ip, [sp, #12]
   2a8f4:	cmp	ip, r2
   2a8f8:	movcc	r0, #25
   2a8fc:	bcc	2a914 <flatcc_verify_vector_field@@Base+0xc8>
   2a900:	mul	r2, r2, r3
   2a904:	sub	r0, r1, r0
   2a908:	cmp	r0, r2
   2a90c:	movcc	r0, #26
   2a910:	movcs	r0, #0
   2a914:	ldr	r4, [sp]
   2a918:	add	sp, sp, #4
   2a91c:	pop	{pc}		; (ldr pc, [sp], #4)
   2a920:	ldr	r4, [sp]
   2a924:	add	sp, sp, #4
   2a928:	mov	r0, #16
   2a92c:	pop	{pc}		; (ldr pc, [sp], #4)
   2a930:	cmp	r2, #0
   2a934:	ldr	r4, [sp]
   2a938:	add	sp, sp, #4
   2a93c:	moveq	r0, #0
   2a940:	movne	r0, #4
   2a944:	pop	{pc}		; (ldr pc, [sp], #4)
   2a948:	mov	r0, r2
   2a94c:	b	2a914 <flatcc_verify_vector_field@@Base+0xc8>

0002a950 <flatcc_verify_string_vector_field@@Base>:
   2a950:	ldrh	r3, [r0, #22]
   2a954:	add	r1, r1, #2
   2a958:	lsl	r1, r1, #1
   2a95c:	uxth	r1, r1
   2a960:	cmp	r3, r1
   2a964:	bls	2aac0 <flatcc_verify_string_vector_field@@Base+0x170>
   2a968:	ldr	r3, [r0, #12]
   2a96c:	ldrh	r3, [r3, r1]
   2a970:	cmp	r3, #0
   2a974:	beq	2aac0 <flatcc_verify_string_vector_field@@Base+0x170>
   2a978:	ldrh	r2, [r0, #20]
   2a97c:	add	r1, r3, #4
   2a980:	cmp	r1, r2
   2a984:	bhi	2aad0 <flatcc_verify_string_vector_field@@Base+0x180>
   2a988:	ldr	r2, [r0, #16]
   2a98c:	add	r3, r3, r2
   2a990:	tst	r3, #3
   2a994:	bne	2aad8 <flatcc_verify_string_vector_field@@Base+0x188>
   2a998:	cmp	r3, #0
   2a99c:	beq	2ab10 <flatcc_verify_string_vector_field@@Base+0x1c0>
   2a9a0:	ldr	r1, [r0]
   2a9a4:	ldr	r2, [r1, r3]
   2a9a8:	add	r2, r3, r2
   2a9ac:	cmp	r3, r2
   2a9b0:	bcs	2aab8 <flatcc_verify_string_vector_field@@Base+0x168>
   2a9b4:	ldr	ip, [r0, #4]
   2a9b8:	add	r0, r2, #4
   2a9bc:	cmp	ip, r0
   2a9c0:	bcc	2aab8 <flatcc_verify_string_vector_field@@Base+0x168>
   2a9c4:	tst	r0, #3
   2a9c8:	bne	2aab8 <flatcc_verify_string_vector_field@@Base+0x168>
   2a9cc:	ldr	r3, [r1, r2]
   2a9d0:	strd	r4, [sp, #-16]!
   2a9d4:	str	r6, [sp, #8]
   2a9d8:	str	lr, [sp, #12]
   2a9dc:	cmn	r3, #-1073741823	; 0xc0000001
   2a9e0:	bhi	2aae0 <flatcc_verify_string_vector_field@@Base+0x190>
   2a9e4:	lsl	lr, r3, #2
   2a9e8:	sub	r4, ip, r0
   2a9ec:	cmp	r4, lr
   2a9f0:	bcc	2aae0 <flatcc_verify_string_vector_field@@Base+0x190>
   2a9f4:	cmp	r3, #0
   2a9f8:	beq	2ab2c <flatcc_verify_string_vector_field@@Base+0x1dc>
   2a9fc:	ldr	r2, [r1, r0]
   2aa00:	add	r2, r0, r2
   2aa04:	cmp	r0, r2
   2aa08:	bcs	2ab24 <flatcc_verify_string_vector_field@@Base+0x1d4>
   2aa0c:	add	r4, r2, #4
   2aa10:	cmp	ip, r4
   2aa14:	bcc	2ab24 <flatcc_verify_string_vector_field@@Base+0x1d4>
   2aa18:	tst	r2, #3
   2aa1c:	bne	2ab24 <flatcc_verify_string_vector_field@@Base+0x1d4>
   2aa20:	ldr	r3, [r1, r2]
   2aa24:	sub	r5, ip, r4
   2aa28:	add	r6, r3, #1
   2aa2c:	cmp	r6, r5
   2aa30:	addls	lr, r0, lr
   2aa34:	bhi	2aa8c <flatcc_verify_string_vector_field@@Base+0x13c>
   2aa38:	add	r3, r1, r3
   2aa3c:	add	r0, r0, #4
   2aa40:	ldrb	r3, [r3, r4]
   2aa44:	cmp	r3, #0
   2aa48:	bne	2ab18 <flatcc_verify_string_vector_field@@Base+0x1c8>
   2aa4c:	cmp	r0, lr
   2aa50:	beq	2ab2c <flatcc_verify_string_vector_field@@Base+0x1dc>
   2aa54:	ldr	r2, [r1, r0]
   2aa58:	add	r2, r0, r2
   2aa5c:	cmp	r2, r0
   2aa60:	add	r4, r2, #4
   2aa64:	bls	2ab24 <flatcc_verify_string_vector_field@@Base+0x1d4>
   2aa68:	cmp	ip, r4
   2aa6c:	bcc	2ab24 <flatcc_verify_string_vector_field@@Base+0x1d4>
   2aa70:	tst	r2, #3
   2aa74:	sub	r5, ip, r4
   2aa78:	bne	2ab24 <flatcc_verify_string_vector_field@@Base+0x1d4>
   2aa7c:	ldr	r3, [r1, r2]
   2aa80:	add	r6, r3, #1
   2aa84:	cmp	r5, r6
   2aa88:	bcs	2aa38 <flatcc_verify_string_vector_field@@Base+0xe8>
   2aa8c:	ldr	r3, [r1, r2]
   2aa90:	add	r2, r3, #1
   2aa94:	cmp	r5, r2
   2aa98:	movcc	r0, #8
   2aa9c:	bcc	2ab00 <flatcc_verify_string_vector_field@@Base+0x1b0>
   2aaa0:	add	r3, r1, r3
   2aaa4:	ldrb	r3, [r3, r4]
   2aaa8:	cmp	r3, #0
   2aaac:	moveq	r0, #0
   2aab0:	movne	r0, #7
   2aab4:	b	2ab00 <flatcc_verify_string_vector_field@@Base+0x1b0>
   2aab8:	mov	r0, #16
   2aabc:	bx	lr
   2aac0:	cmp	r2, #0
   2aac4:	movne	r0, #4
   2aac8:	moveq	r0, #0
   2aacc:	bx	lr
   2aad0:	mov	r0, #13
   2aad4:	bx	lr
   2aad8:	mov	r0, #12
   2aadc:	bx	lr
   2aae0:	ldr	r3, [r1, r2]
   2aae4:	cmn	r3, #-1073741823	; 0xc0000001
   2aae8:	movhi	r0, #25
   2aaec:	bhi	2ab00 <flatcc_verify_string_vector_field@@Base+0x1b0>
   2aaf0:	sub	r0, ip, r0
   2aaf4:	cmp	r0, r3, lsl #2
   2aaf8:	movcs	r0, #0
   2aafc:	movcc	r0, #26
   2ab00:	ldrd	r4, [sp]
   2ab04:	ldr	r6, [sp, #8]
   2ab08:	add	sp, sp, #12
   2ab0c:	pop	{pc}		; (ldr pc, [sp], #4)
   2ab10:	mov	r0, r3
   2ab14:	bx	lr
   2ab18:	cmp	ip, r4
   2ab1c:	subcs	r5, ip, r4
   2ab20:	bcs	2aa8c <flatcc_verify_string_vector_field@@Base+0x13c>
   2ab24:	mov	r0, #17
   2ab28:	b	2ab00 <flatcc_verify_string_vector_field@@Base+0x1b0>
   2ab2c:	mov	r0, r3
   2ab30:	b	2ab00 <flatcc_verify_string_vector_field@@Base+0x1b0>

0002ab34 <flatcc_verify_table_field@@Base>:
   2ab34:	ldrh	ip, [r0, #22]
   2ab38:	add	r1, r1, #2
   2ab3c:	lsl	r1, r1, #1
   2ab40:	uxth	r1, r1
   2ab44:	cmp	ip, r1
   2ab48:	bls	2ac68 <flatcc_verify_table_field@@Base+0x134>
   2ab4c:	ldr	ip, [r0, #12]
   2ab50:	ldrh	r1, [ip, r1]
   2ab54:	cmp	r1, #0
   2ab58:	beq	2ac68 <flatcc_verify_table_field@@Base+0x134>
   2ab5c:	ldrh	r2, [r0, #20]
   2ab60:	add	ip, r1, #4
   2ab64:	cmp	ip, r2
   2ab68:	bhi	2ac78 <flatcc_verify_table_field@@Base+0x144>
   2ab6c:	ldr	r2, [r0, #16]
   2ab70:	add	r1, r1, r2
   2ab74:	tst	r1, #3
   2ab78:	bne	2ac80 <flatcc_verify_table_field@@Base+0x14c>
   2ab7c:	cmp	r1, #0
   2ab80:	beq	2ac88 <flatcc_verify_table_field@@Base+0x154>
   2ab84:	ldr	ip, [r0]
   2ab88:	strd	r4, [sp, #-12]!
   2ab8c:	ldr	r2, [r0, #8]
   2ab90:	str	lr, [sp, #8]
   2ab94:	sub	sp, sp, #28
   2ab98:	ldr	lr, [r0, #4]
   2ab9c:	ldr	r0, [ip, r1]
   2aba0:	sub	r2, r2, #1
   2aba4:	cmp	r2, #0
   2aba8:	moveq	r0, #3
   2abac:	str	r2, [sp, #8]
   2abb0:	beq	2ac58 <flatcc_verify_table_field@@Base+0x124>
   2abb4:	add	r2, r1, r0
   2abb8:	cmp	r1, r2
   2abbc:	bcs	2ac54 <flatcc_verify_table_field@@Base+0x120>
   2abc0:	add	r1, r2, #4
   2abc4:	cmp	lr, r1
   2abc8:	bcc	2ac54 <flatcc_verify_table_field@@Base+0x120>
   2abcc:	tst	r2, #3
   2abd0:	bne	2ac54 <flatcc_verify_table_field@@Base+0x120>
   2abd4:	str	r2, [sp, #16]
   2abd8:	ldr	r1, [ip, r2]
   2abdc:	subs	r1, r2, r1
   2abe0:	bmi	2ac90 <flatcc_verify_table_field@@Base+0x15c>
   2abe4:	tst	r1, #1
   2abe8:	bne	2ac90 <flatcc_verify_table_field@@Base+0x15c>
   2abec:	add	r4, r1, #2
   2abf0:	cmp	lr, r4
   2abf4:	movcc	r0, #27
   2abf8:	bcc	2ac58 <flatcc_verify_table_field@@Base+0x124>
   2abfc:	ldrh	r0, [ip, r1]
   2ac00:	add	r5, ip, r1
   2ac04:	add	r1, r0, r1
   2ac08:	strh	r0, [sp, #22]
   2ac0c:	cmp	lr, r1
   2ac10:	bcc	2ac98 <flatcc_verify_table_field@@Base+0x164>
   2ac14:	tst	r0, #1
   2ac18:	bne	2ac98 <flatcc_verify_table_field@@Base+0x164>
   2ac1c:	cmp	r0, #3
   2ac20:	movls	r0, #28
   2ac24:	bls	2ac58 <flatcc_verify_table_field@@Base+0x124>
   2ac28:	ldrh	r1, [ip, r4]
   2ac2c:	sub	r2, lr, r2
   2ac30:	cmp	r2, r1
   2ac34:	strh	r1, [sp, #20]
   2ac38:	movcc	r0, #20
   2ac3c:	bcc	2ac58 <flatcc_verify_table_field@@Base+0x124>
   2ac40:	mov	r0, sp
   2ac44:	stm	sp, {ip, lr}
   2ac48:	str	r5, [sp, #12]
   2ac4c:	blx	r3
   2ac50:	b	2ac58 <flatcc_verify_table_field@@Base+0x124>
   2ac54:	mov	r0, #15
   2ac58:	add	sp, sp, #28
   2ac5c:	ldrd	r4, [sp]
   2ac60:	add	sp, sp, #8
   2ac64:	pop	{pc}		; (ldr pc, [sp], #4)
   2ac68:	cmp	r2, #0
   2ac6c:	moveq	r0, #0
   2ac70:	movne	r0, #4
   2ac74:	bx	lr
   2ac78:	mov	r0, #13
   2ac7c:	bx	lr
   2ac80:	mov	r0, #12
   2ac84:	bx	lr
   2ac88:	mov	r0, r1
   2ac8c:	bx	lr
   2ac90:	mov	r0, #29
   2ac94:	b	2ac58 <flatcc_verify_table_field@@Base+0x124>
   2ac98:	mov	r0, #30
   2ac9c:	b	2ac58 <flatcc_verify_table_field@@Base+0x124>

0002aca0 <flatcc_verify_table_vector_field@@Base>:
   2aca0:	ldrh	ip, [r0, #22]
   2aca4:	add	r1, r1, #2
   2aca8:	lsl	r1, r1, #1
   2acac:	uxth	r1, r1
   2acb0:	cmp	ip, r1
   2acb4:	bls	2af3c <flatcc_verify_table_vector_field@@Base+0x29c>
   2acb8:	ldr	ip, [r0, #12]
   2acbc:	ldrh	r1, [ip, r1]
   2acc0:	cmp	r1, #0
   2acc4:	beq	2af3c <flatcc_verify_table_vector_field@@Base+0x29c>
   2acc8:	ldrh	r2, [r0, #20]
   2accc:	add	ip, r1, #4
   2acd0:	cmp	ip, r2
   2acd4:	bhi	2af4c <flatcc_verify_table_vector_field@@Base+0x2ac>
   2acd8:	ldr	r2, [r0, #16]
   2acdc:	add	r1, r1, r2
   2ace0:	tst	r1, #3
   2ace4:	bne	2af64 <flatcc_verify_table_vector_field@@Base+0x2c4>
   2ace8:	cmp	r1, #0
   2acec:	beq	2af44 <flatcc_verify_table_vector_field@@Base+0x2a4>
   2acf0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2acf4:	strd	r6, [sp, #8]
   2acf8:	ldr	r7, [r0, #8]
   2acfc:	strd	r8, [sp, #16]
   2ad00:	ldr	r8, [r0]
   2ad04:	strd	sl, [sp, #24]
   2ad08:	str	lr, [sp, #32]
   2ad0c:	sub	sp, sp, #36	; 0x24
   2ad10:	cmp	r7, #0
   2ad14:	ldr	ip, [r8, r1]
   2ad18:	ble	2af5c <flatcc_verify_table_vector_field@@Base+0x2bc>
   2ad1c:	add	ip, r1, ip
   2ad20:	cmp	r1, ip
   2ad24:	bcs	2af1c <flatcc_verify_table_vector_field@@Base+0x27c>
   2ad28:	ldr	r9, [r0, #4]
   2ad2c:	add	r5, ip, #4
   2ad30:	cmp	r9, r5
   2ad34:	bcc	2af1c <flatcc_verify_table_vector_field@@Base+0x27c>
   2ad38:	tst	r5, #3
   2ad3c:	bne	2af1c <flatcc_verify_table_vector_field@@Base+0x27c>
   2ad40:	ldr	r1, [r8, ip]
   2ad44:	cmn	r1, #-1073741823	; 0xc0000001
   2ad48:	bhi	2af6c <flatcc_verify_table_vector_field@@Base+0x2cc>
   2ad4c:	lsl	r2, r1, #2
   2ad50:	sub	r0, r9, r5
   2ad54:	cmp	r0, r2
   2ad58:	bcc	2af6c <flatcc_verify_table_vector_field@@Base+0x2cc>
   2ad5c:	cmp	r1, #0
   2ad60:	beq	2af8c <flatcc_verify_table_vector_field@@Base+0x2ec>
   2ad64:	sub	r7, r7, #2
   2ad68:	add	sl, r8, r5
   2ad6c:	ldr	r1, [r8, r5]
   2ad70:	cmp	r7, #0
   2ad74:	str	r7, [sp, #16]
   2ad78:	beq	2af5c <flatcc_verify_table_vector_field@@Base+0x2bc>
   2ad7c:	mov	r6, r3
   2ad80:	add	r3, r5, r1
   2ad84:	cmp	r5, r3
   2ad88:	bcs	2ae74 <flatcc_verify_table_vector_field@@Base+0x1d4>
   2ad8c:	add	r1, r3, #4
   2ad90:	cmp	r9, r1
   2ad94:	bcc	2ae74 <flatcc_verify_table_vector_field@@Base+0x1d4>
   2ad98:	tst	r3, #3
   2ad9c:	bne	2ae74 <flatcc_verify_table_vector_field@@Base+0x1d4>
   2ada0:	movw	fp, #65532	; 0xfffc
   2ada4:	movt	fp, #65535	; 0xffff
   2ada8:	sub	fp, fp, ip
   2adac:	add	r1, sp, #8
   2adb0:	add	fp, sl, fp
   2adb4:	add	ip, ip, #8
   2adb8:	add	r2, r5, r2
   2adbc:	add	r4, r8, ip
   2adc0:	str	r1, [sp, #4]
   2adc4:	mov	r1, fp
   2adc8:	mov	fp, r2
   2adcc:	add	sl, r1, r5
   2add0:	str	r1, [sp]
   2add4:	str	r3, [sp, #24]
   2add8:	ldr	r2, [r8, r3]
   2addc:	subs	r2, r3, r2
   2ade0:	bmi	2ae74 <flatcc_verify_table_vector_field@@Base+0x1d4>
   2ade4:	tst	r2, #1
   2ade8:	bne	2ae74 <flatcc_verify_table_vector_field@@Base+0x1d4>
   2adec:	add	lr, r2, #2
   2adf0:	cmp	r9, lr
   2adf4:	bcc	2ae74 <flatcc_verify_table_vector_field@@Base+0x1d4>
   2adf8:	ldrh	r0, [r8, r2]
   2adfc:	add	ip, r8, r2
   2ae00:	add	r2, r0, r2
   2ae04:	strh	r0, [sp, #30]
   2ae08:	cmp	r9, r2
   2ae0c:	bcc	2ae74 <flatcc_verify_table_vector_field@@Base+0x1d4>
   2ae10:	tst	r0, #1
   2ae14:	bne	2ae74 <flatcc_verify_table_vector_field@@Base+0x1d4>
   2ae18:	cmp	r0, #3
   2ae1c:	bls	2ae74 <flatcc_verify_table_vector_field@@Base+0x1d4>
   2ae20:	ldrh	r2, [r8, lr]
   2ae24:	sub	r3, r9, r3
   2ae28:	cmp	r3, r2
   2ae2c:	strh	r2, [sp, #28]
   2ae30:	bcc	2ae74 <flatcc_verify_table_vector_field@@Base+0x1d4>
   2ae34:	ldr	r0, [sp, #4]
   2ae38:	strd	r8, [sp, #8]
   2ae3c:	str	ip, [sp, #20]
   2ae40:	blx	r6
   2ae44:	cmp	r0, #0
   2ae48:	ldr	r1, [sp]
   2ae4c:	bne	2ae74 <flatcc_verify_table_vector_field@@Base+0x1d4>
   2ae50:	add	r5, r5, #4
   2ae54:	cmp	r5, fp
   2ae58:	beq	2af8c <flatcc_verify_table_vector_field@@Base+0x2ec>
   2ae5c:	mov	sl, r4
   2ae60:	ldr	r3, [r4], #4
   2ae64:	str	r7, [sp, #16]
   2ae68:	add	r3, r3, r5
   2ae6c:	cmp	r5, r3
   2ae70:	bcc	2af94 <flatcc_verify_table_vector_field@@Base+0x2f4>
   2ae74:	ldr	r3, [sl]
   2ae78:	str	r7, [sp, #16]
   2ae7c:	add	r3, r5, r3
   2ae80:	cmp	r3, r5
   2ae84:	bls	2afac <flatcc_verify_table_vector_field@@Base+0x30c>
   2ae88:	add	r2, r3, #4
   2ae8c:	cmp	r9, r2
   2ae90:	bcc	2afac <flatcc_verify_table_vector_field@@Base+0x30c>
   2ae94:	tst	r3, #3
   2ae98:	bne	2afac <flatcc_verify_table_vector_field@@Base+0x30c>
   2ae9c:	str	r3, [sp, #24]
   2aea0:	ldr	r2, [r8, r3]
   2aea4:	subs	r2, r3, r2
   2aea8:	bmi	2afb4 <flatcc_verify_table_vector_field@@Base+0x314>
   2aeac:	tst	r2, #1
   2aeb0:	bne	2afb4 <flatcc_verify_table_vector_field@@Base+0x314>
   2aeb4:	add	r0, r2, #2
   2aeb8:	cmp	r9, r0
   2aebc:	movcc	r0, #27
   2aec0:	bcc	2af20 <flatcc_verify_table_vector_field@@Base+0x280>
   2aec4:	ldrh	r1, [r8, r2]
   2aec8:	add	ip, r8, r2
   2aecc:	add	r2, r1, r2
   2aed0:	strh	r1, [sp, #30]
   2aed4:	cmp	r9, r2
   2aed8:	bcc	2afbc <flatcc_verify_table_vector_field@@Base+0x31c>
   2aedc:	tst	r1, #1
   2aee0:	bne	2afbc <flatcc_verify_table_vector_field@@Base+0x31c>
   2aee4:	cmp	r1, #3
   2aee8:	movls	r0, #28
   2aeec:	bls	2af20 <flatcc_verify_table_vector_field@@Base+0x280>
   2aef0:	ldrh	r2, [r8, r0]
   2aef4:	sub	r3, r9, r3
   2aef8:	cmp	r3, r2
   2aefc:	strh	r2, [sp, #28]
   2af00:	movcc	r0, #20
   2af04:	bcc	2af20 <flatcc_verify_table_vector_field@@Base+0x280>
   2af08:	add	r0, sp, #8
   2af0c:	strd	r8, [sp, #8]
   2af10:	str	ip, [sp, #20]
   2af14:	blx	r6
   2af18:	b	2af20 <flatcc_verify_table_vector_field@@Base+0x280>
   2af1c:	mov	r0, #16
   2af20:	add	sp, sp, #36	; 0x24
   2af24:	ldrd	r4, [sp]
   2af28:	ldrd	r6, [sp, #8]
   2af2c:	ldrd	r8, [sp, #16]
   2af30:	ldrd	sl, [sp, #24]
   2af34:	add	sp, sp, #32
   2af38:	pop	{pc}		; (ldr pc, [sp], #4)
   2af3c:	cmp	r2, #0
   2af40:	bne	2af54 <flatcc_verify_table_vector_field@@Base+0x2b4>
   2af44:	mov	r0, #0
   2af48:	bx	lr
   2af4c:	mov	r0, #13
   2af50:	bx	lr
   2af54:	mov	r0, #4
   2af58:	bx	lr
   2af5c:	mov	r0, #3
   2af60:	b	2af20 <flatcc_verify_table_vector_field@@Base+0x280>
   2af64:	mov	r0, #12
   2af68:	bx	lr
   2af6c:	ldr	r3, [r8, ip]
   2af70:	cmn	r3, #-1073741823	; 0xc0000001
   2af74:	movhi	r0, #25
   2af78:	bhi	2af20 <flatcc_verify_table_vector_field@@Base+0x280>
   2af7c:	sub	r5, r9, r5
   2af80:	cmp	r5, r3, lsl #2
   2af84:	movcc	r0, #26
   2af88:	bcc	2af20 <flatcc_verify_table_vector_field@@Base+0x280>
   2af8c:	mov	r0, #0
   2af90:	b	2af20 <flatcc_verify_table_vector_field@@Base+0x280>
   2af94:	add	r2, r3, #4
   2af98:	cmp	r9, r2
   2af9c:	bcc	2ae74 <flatcc_verify_table_vector_field@@Base+0x1d4>
   2afa0:	tst	r3, #3
   2afa4:	beq	2adcc <flatcc_verify_table_vector_field@@Base+0x12c>
   2afa8:	b	2ae74 <flatcc_verify_table_vector_field@@Base+0x1d4>
   2afac:	mov	r0, #15
   2afb0:	b	2af20 <flatcc_verify_table_vector_field@@Base+0x280>
   2afb4:	mov	r0, #29
   2afb8:	b	2af20 <flatcc_verify_table_vector_field@@Base+0x280>
   2afbc:	mov	r0, #30
   2afc0:	b	2af20 <flatcc_verify_table_vector_field@@Base+0x280>

0002afc4 <flatcc_verify_union_table@@Base>:
   2afc4:	strd	r4, [sp, #-12]!
   2afc8:	ldr	r3, [r0, #8]
   2afcc:	ldr	ip, [r0, #4]
   2afd0:	ldr	r2, [r0, #16]
   2afd4:	sub	r3, r3, #1
   2afd8:	str	lr, [sp, #8]
   2afdc:	sub	sp, sp, #28
   2afe0:	cmp	r3, #0
   2afe4:	ldr	lr, [r0]
   2afe8:	str	r3, [sp, #8]
   2afec:	ldr	r3, [r0, #20]
   2aff0:	moveq	r0, #3
   2aff4:	beq	2b008 <flatcc_verify_union_table@@Base+0x44>
   2aff8:	add	r3, r2, r3
   2affc:	cmp	r2, r3
   2b000:	bcc	2b018 <flatcc_verify_union_table@@Base+0x54>
   2b004:	mov	r0, #15
   2b008:	add	sp, sp, #28
   2b00c:	ldrd	r4, [sp]
   2b010:	add	sp, sp, #8
   2b014:	pop	{pc}		; (ldr pc, [sp], #4)
   2b018:	add	r2, r3, #4
   2b01c:	cmp	ip, r2
   2b020:	bcc	2b004 <flatcc_verify_union_table@@Base+0x40>
   2b024:	tst	r3, #3
   2b028:	bne	2b004 <flatcc_verify_union_table@@Base+0x40>
   2b02c:	str	r3, [sp, #16]
   2b030:	ldr	r2, [lr, r3]
   2b034:	subs	r2, r3, r2
   2b038:	bmi	2b0b8 <flatcc_verify_union_table@@Base+0xf4>
   2b03c:	tst	r2, #1
   2b040:	bne	2b0b8 <flatcc_verify_union_table@@Base+0xf4>
   2b044:	add	r4, r2, #2
   2b048:	cmp	ip, r4
   2b04c:	movcc	r0, #27
   2b050:	bcc	2b008 <flatcc_verify_union_table@@Base+0x44>
   2b054:	ldrh	r0, [lr, r2]
   2b058:	add	r5, lr, r2
   2b05c:	add	r2, r0, r2
   2b060:	strh	r0, [sp, #22]
   2b064:	cmp	ip, r2
   2b068:	bcc	2b0b0 <flatcc_verify_union_table@@Base+0xec>
   2b06c:	tst	r0, #1
   2b070:	bne	2b0b0 <flatcc_verify_union_table@@Base+0xec>
   2b074:	cmp	r0, #3
   2b078:	movls	r0, #28
   2b07c:	bls	2b008 <flatcc_verify_union_table@@Base+0x44>
   2b080:	ldrh	r2, [lr, r4]
   2b084:	sub	r3, ip, r3
   2b088:	cmp	r3, r2
   2b08c:	strh	r2, [sp, #20]
   2b090:	movcc	r0, #20
   2b094:	bcc	2b008 <flatcc_verify_union_table@@Base+0x44>
   2b098:	mov	r0, sp
   2b09c:	str	lr, [sp]
   2b0a0:	str	ip, [sp, #4]
   2b0a4:	str	r5, [sp, #12]
   2b0a8:	blx	r1
   2b0ac:	b	2b008 <flatcc_verify_union_table@@Base+0x44>
   2b0b0:	mov	r0, #30
   2b0b4:	b	2b008 <flatcc_verify_union_table@@Base+0x44>
   2b0b8:	mov	r0, #29
   2b0bc:	b	2b008 <flatcc_verify_union_table@@Base+0x44>

0002b0c0 <flatcc_verify_union_struct@@Base>:
   2b0c0:	push	{lr}		; (str lr, [sp, #-4]!)
   2b0c4:	ldr	ip, [r0, #20]
   2b0c8:	ldr	lr, [r0, #4]
   2b0cc:	ldr	r3, [r0, #16]
   2b0d0:	cmp	ip, #0
   2b0d4:	beq	2b108 <flatcc_verify_union_struct@@Base+0x48>
   2b0d8:	add	r3, r3, ip
   2b0dc:	cmp	lr, r3
   2b0e0:	bcc	2b108 <flatcc_verify_union_struct@@Base+0x48>
   2b0e4:	adds	r1, r1, r3
   2b0e8:	bcs	2b118 <flatcc_verify_union_struct@@Base+0x58>
   2b0ec:	cmp	lr, r1
   2b0f0:	bcc	2b110 <flatcc_verify_union_struct@@Base+0x50>
   2b0f4:	sub	r2, r2, #1
   2b0f8:	tst	r2, r3
   2b0fc:	moveq	r0, #0
   2b100:	movne	r0, #11
   2b104:	pop	{pc}		; (ldr pc, [sp], #4)
   2b108:	mov	r0, #18
   2b10c:	pop	{pc}		; (ldr pc, [sp], #4)
   2b110:	mov	r0, #9
   2b114:	pop	{pc}		; (ldr pc, [sp], #4)
   2b118:	mov	r0, #10
   2b11c:	b	2b104 <flatcc_verify_union_struct@@Base+0x44>

0002b120 <flatcc_verify_union_string@@Base>:
   2b120:	ldrd	r2, [r0, #16]
   2b124:	add	r3, r2, r3
   2b128:	cmp	r2, r3
   2b12c:	bcs	2b178 <flatcc_verify_union_string@@Base+0x58>
   2b130:	ldr	r2, [r0, #4]
   2b134:	add	r1, r3, #4
   2b138:	cmp	r2, r1
   2b13c:	bcc	2b178 <flatcc_verify_union_string@@Base+0x58>
   2b140:	tst	r3, #3
   2b144:	bne	2b178 <flatcc_verify_union_string@@Base+0x58>
   2b148:	ldr	r0, [r0]
   2b14c:	sub	r2, r2, r1
   2b150:	ldr	r3, [r0, r3]
   2b154:	add	ip, r3, #1
   2b158:	cmp	r2, ip
   2b15c:	bcc	2b180 <flatcc_verify_union_string@@Base+0x60>
   2b160:	add	r1, r0, r1
   2b164:	ldrb	r3, [r1, r3]
   2b168:	cmp	r3, #0
   2b16c:	moveq	r0, #0
   2b170:	movne	r0, #7
   2b174:	bx	lr
   2b178:	mov	r0, #17
   2b17c:	bx	lr
   2b180:	mov	r0, #8
   2b184:	bx	lr

0002b188 <flatcc_verify_buffer_header@@Base>:
   2b188:	tst	r0, #3
   2b18c:	bne	2b1f8 <flatcc_verify_buffer_header@@Base+0x70>
   2b190:	cmn	r1, #9
   2b194:	bhi	2b200 <flatcc_verify_buffer_header@@Base+0x78>
   2b198:	cmp	r1, #7
   2b19c:	bls	2b1f0 <flatcc_verify_buffer_header@@Base+0x68>
   2b1a0:	cmp	r2, #0
   2b1a4:	beq	2b208 <flatcc_verify_buffer_header@@Base+0x80>
   2b1a8:	mov	r1, r2
   2b1ac:	mov	r2, #4
   2b1b0:	str	r4, [sp, #-8]!
   2b1b4:	str	lr, [sp, #4]
   2b1b8:	sub	sp, sp, #8
   2b1bc:	mov	r4, r0
   2b1c0:	add	r0, sp, r2
   2b1c4:	bl	145a0 <strncpy@plt>
   2b1c8:	ldr	r2, [r4, #4]
   2b1cc:	ldr	r3, [sp, #4]
   2b1d0:	cmp	r3, #0
   2b1d4:	cmpne	r2, r3
   2b1d8:	movne	r0, #2
   2b1dc:	moveq	r0, #0
   2b1e0:	add	sp, sp, #8
   2b1e4:	ldr	r4, [sp]
   2b1e8:	add	sp, sp, #4
   2b1ec:	pop	{pc}		; (ldr pc, [sp], #4)
   2b1f0:	mov	r0, #1
   2b1f4:	bx	lr
   2b1f8:	mov	r0, #5
   2b1fc:	bx	lr
   2b200:	mov	r0, #6
   2b204:	bx	lr
   2b208:	mov	r0, #0
   2b20c:	bx	lr

0002b210 <flatcc_verify_typed_buffer_header@@Base>:
   2b210:	tst	r0, #3
   2b214:	bne	2b24c <flatcc_verify_typed_buffer_header@@Base+0x3c>
   2b218:	cmn	r1, #9
   2b21c:	bhi	2b25c <flatcc_verify_typed_buffer_header@@Base+0x4c>
   2b220:	cmp	r1, #7
   2b224:	bls	2b244 <flatcc_verify_typed_buffer_header@@Base+0x34>
   2b228:	cmp	r2, #0
   2b22c:	beq	2b254 <flatcc_verify_typed_buffer_header@@Base+0x44>
   2b230:	ldr	r0, [r0, #4]
   2b234:	cmp	r2, r0
   2b238:	movne	r0, #2
   2b23c:	moveq	r0, #0
   2b240:	bx	lr
   2b244:	mov	r0, #1
   2b248:	bx	lr
   2b24c:	mov	r0, #5
   2b250:	bx	lr
   2b254:	mov	r0, r2
   2b258:	bx	lr
   2b25c:	mov	r0, #6
   2b260:	bx	lr

0002b264 <flatcc_verify_struct_as_root@@Base>:
   2b264:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2b268:	mov	r4, r3
   2b26c:	mov	r5, r1
   2b270:	strd	r6, [sp, #8]
   2b274:	mov	r7, r0
   2b278:	ldrh	r6, [sp, #24]
   2b27c:	str	r8, [sp, #16]
   2b280:	mov	r8, r2
   2b284:	str	lr, [sp, #20]
   2b288:	bl	2b188 <flatcc_verify_buffer_header@@Base>
   2b28c:	cmp	r0, #0
   2b290:	bne	2b2e8 <flatcc_verify_struct_as_root@@Base+0x84>
   2b294:	ldr	r2, [r7]
   2b298:	cmp	r5, r2
   2b29c:	movcs	r3, #0
   2b2a0:	movcc	r3, #1
   2b2a4:	cmp	r2, #0
   2b2a8:	moveq	r3, #1
   2b2ac:	cmp	r3, #0
   2b2b0:	movne	r0, #18
   2b2b4:	bne	2b2d4 <flatcc_verify_struct_as_root@@Base+0x70>
   2b2b8:	adds	r4, r4, r2
   2b2bc:	bcs	2b314 <flatcc_verify_struct_as_root@@Base+0xb0>
   2b2c0:	cmp	r5, r4
   2b2c4:	bcc	2b30c <flatcc_verify_struct_as_root@@Base+0xa8>
   2b2c8:	sub	r6, r6, #1
   2b2cc:	tst	r6, r2
   2b2d0:	movne	r0, #11
   2b2d4:	ldrd	r4, [sp]
   2b2d8:	ldrd	r6, [sp, #8]
   2b2dc:	ldr	r8, [sp, #16]
   2b2e0:	add	sp, sp, #20
   2b2e4:	pop	{pc}		; (ldr pc, [sp], #4)
   2b2e8:	mov	r2, r8
   2b2ec:	mov	r1, r5
   2b2f0:	ldrd	r4, [sp]
   2b2f4:	mov	r0, r7
   2b2f8:	ldrd	r6, [sp, #8]
   2b2fc:	ldr	r8, [sp, #16]
   2b300:	ldr	lr, [sp, #20]
   2b304:	add	sp, sp, #24
   2b308:	b	2b188 <flatcc_verify_buffer_header@@Base>
   2b30c:	mov	r0, #9
   2b310:	b	2b2d4 <flatcc_verify_struct_as_root@@Base+0x70>
   2b314:	mov	r0, #10
   2b318:	b	2b2d4 <flatcc_verify_struct_as_root@@Base+0x70>

0002b31c <flatcc_verify_struct_as_typed_root@@Base>:
   2b31c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2b320:	mov	r4, r3
   2b324:	mov	r5, r1
   2b328:	strd	r6, [sp, #8]
   2b32c:	mov	r7, r0
   2b330:	ldrh	r6, [sp, #24]
   2b334:	str	r8, [sp, #16]
   2b338:	mov	r8, r2
   2b33c:	str	lr, [sp, #20]
   2b340:	bl	2b210 <flatcc_verify_typed_buffer_header@@Base>
   2b344:	cmp	r0, #0
   2b348:	bne	2b3a0 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   2b34c:	ldr	r2, [r7]
   2b350:	cmp	r5, r2
   2b354:	movcs	r3, #0
   2b358:	movcc	r3, #1
   2b35c:	cmp	r2, #0
   2b360:	moveq	r3, #1
   2b364:	cmp	r3, #0
   2b368:	movne	r0, #18
   2b36c:	bne	2b38c <flatcc_verify_struct_as_typed_root@@Base+0x70>
   2b370:	adds	r4, r4, r2
   2b374:	bcs	2b3cc <flatcc_verify_struct_as_typed_root@@Base+0xb0>
   2b378:	cmp	r5, r4
   2b37c:	bcc	2b3c4 <flatcc_verify_struct_as_typed_root@@Base+0xa8>
   2b380:	sub	r6, r6, #1
   2b384:	tst	r6, r2
   2b388:	movne	r0, #11
   2b38c:	ldrd	r4, [sp]
   2b390:	ldrd	r6, [sp, #8]
   2b394:	ldr	r8, [sp, #16]
   2b398:	add	sp, sp, #20
   2b39c:	pop	{pc}		; (ldr pc, [sp], #4)
   2b3a0:	mov	r2, r8
   2b3a4:	mov	r1, r5
   2b3a8:	ldrd	r4, [sp]
   2b3ac:	mov	r0, r7
   2b3b0:	ldrd	r6, [sp, #8]
   2b3b4:	ldr	r8, [sp, #16]
   2b3b8:	ldr	lr, [sp, #20]
   2b3bc:	add	sp, sp, #24
   2b3c0:	b	2b210 <flatcc_verify_typed_buffer_header@@Base>
   2b3c4:	mov	r0, #9
   2b3c8:	b	2b38c <flatcc_verify_struct_as_typed_root@@Base+0x70>
   2b3cc:	mov	r0, #10
   2b3d0:	b	2b38c <flatcc_verify_struct_as_typed_root@@Base+0x70>

0002b3d4 <flatcc_verify_table_as_root@@Base>:
   2b3d4:	strd	r4, [sp, #-20]!	; 0xffffffec
   2b3d8:	mov	r4, r0
   2b3dc:	mov	r5, r1
   2b3e0:	strd	r6, [sp, #8]
   2b3e4:	mov	r7, r3
   2b3e8:	mov	r6, r2
   2b3ec:	str	lr, [sp, #16]
   2b3f0:	sub	sp, sp, #28
   2b3f4:	bl	2b188 <flatcc_verify_buffer_header@@Base>
   2b3f8:	cmp	r0, #0
   2b3fc:	bne	2b4c0 <flatcc_verify_table_as_root@@Base+0xec>
   2b400:	ldr	r3, [r4]
   2b404:	mov	r2, #99	; 0x63
   2b408:	str	r2, [sp, #8]
   2b40c:	cmp	r3, #0
   2b410:	bne	2b42c <flatcc_verify_table_as_root@@Base+0x58>
   2b414:	mov	r0, #15
   2b418:	add	sp, sp, #28
   2b41c:	ldrd	r4, [sp]
   2b420:	ldrd	r6, [sp, #8]
   2b424:	add	sp, sp, #16
   2b428:	pop	{pc}		; (ldr pc, [sp], #4)
   2b42c:	add	r2, r3, #4
   2b430:	cmp	r5, r2
   2b434:	bcc	2b414 <flatcc_verify_table_as_root@@Base+0x40>
   2b438:	tst	r3, #3
   2b43c:	bne	2b414 <flatcc_verify_table_as_root@@Base+0x40>
   2b440:	ldr	r2, [r4, r3]
   2b444:	str	r3, [sp, #16]
   2b448:	subs	r2, r3, r2
   2b44c:	bmi	2b4d4 <flatcc_verify_table_as_root@@Base+0x100>
   2b450:	tst	r2, #1
   2b454:	bne	2b4d4 <flatcc_verify_table_as_root@@Base+0x100>
   2b458:	add	r0, r2, #2
   2b45c:	cmp	r5, r0
   2b460:	movcc	r0, #27
   2b464:	bcc	2b418 <flatcc_verify_table_as_root@@Base+0x44>
   2b468:	ldrh	r1, [r4, r2]
   2b46c:	add	ip, r4, r2
   2b470:	add	r2, r1, r2
   2b474:	strh	r1, [sp, #22]
   2b478:	cmp	r5, r2
   2b47c:	bcc	2b4dc <flatcc_verify_table_as_root@@Base+0x108>
   2b480:	tst	r1, #1
   2b484:	bne	2b4dc <flatcc_verify_table_as_root@@Base+0x108>
   2b488:	cmp	r1, #3
   2b48c:	movls	r0, #28
   2b490:	bls	2b418 <flatcc_verify_table_as_root@@Base+0x44>
   2b494:	ldrh	r2, [r4, r0]
   2b498:	sub	r3, r5, r3
   2b49c:	cmp	r3, r2
   2b4a0:	strh	r2, [sp, #20]
   2b4a4:	movcc	r0, #20
   2b4a8:	bcc	2b418 <flatcc_verify_table_as_root@@Base+0x44>
   2b4ac:	mov	r0, sp
   2b4b0:	strd	r4, [sp]
   2b4b4:	str	ip, [sp, #12]
   2b4b8:	blx	r7
   2b4bc:	b	2b418 <flatcc_verify_table_as_root@@Base+0x44>
   2b4c0:	mov	r2, r6
   2b4c4:	mov	r1, r5
   2b4c8:	mov	r0, r4
   2b4cc:	bl	2b188 <flatcc_verify_buffer_header@@Base>
   2b4d0:	b	2b418 <flatcc_verify_table_as_root@@Base+0x44>
   2b4d4:	mov	r0, #29
   2b4d8:	b	2b418 <flatcc_verify_table_as_root@@Base+0x44>
   2b4dc:	mov	r0, #30
   2b4e0:	b	2b418 <flatcc_verify_table_as_root@@Base+0x44>

0002b4e4 <flatcc_verify_table_as_typed_root@@Base>:
   2b4e4:	strd	r4, [sp, #-20]!	; 0xffffffec
   2b4e8:	mov	r4, r0
   2b4ec:	mov	r5, r1
   2b4f0:	strd	r6, [sp, #8]
   2b4f4:	mov	r7, r3
   2b4f8:	mov	r6, r2
   2b4fc:	str	lr, [sp, #16]
   2b500:	sub	sp, sp, #28
   2b504:	bl	2b210 <flatcc_verify_typed_buffer_header@@Base>
   2b508:	cmp	r0, #0
   2b50c:	bne	2b5d0 <flatcc_verify_table_as_typed_root@@Base+0xec>
   2b510:	ldr	r3, [r4]
   2b514:	mov	r2, #99	; 0x63
   2b518:	str	r2, [sp, #8]
   2b51c:	cmp	r3, #0
   2b520:	bne	2b53c <flatcc_verify_table_as_typed_root@@Base+0x58>
   2b524:	mov	r0, #15
   2b528:	add	sp, sp, #28
   2b52c:	ldrd	r4, [sp]
   2b530:	ldrd	r6, [sp, #8]
   2b534:	add	sp, sp, #16
   2b538:	pop	{pc}		; (ldr pc, [sp], #4)
   2b53c:	add	r2, r3, #4
   2b540:	cmp	r5, r2
   2b544:	bcc	2b524 <flatcc_verify_table_as_typed_root@@Base+0x40>
   2b548:	tst	r3, #3
   2b54c:	bne	2b524 <flatcc_verify_table_as_typed_root@@Base+0x40>
   2b550:	ldr	r2, [r4, r3]
   2b554:	str	r3, [sp, #16]
   2b558:	subs	r2, r3, r2
   2b55c:	bmi	2b5e4 <flatcc_verify_table_as_typed_root@@Base+0x100>
   2b560:	tst	r2, #1
   2b564:	bne	2b5e4 <flatcc_verify_table_as_typed_root@@Base+0x100>
   2b568:	add	r0, r2, #2
   2b56c:	cmp	r5, r0
   2b570:	movcc	r0, #27
   2b574:	bcc	2b528 <flatcc_verify_table_as_typed_root@@Base+0x44>
   2b578:	ldrh	r1, [r4, r2]
   2b57c:	add	ip, r4, r2
   2b580:	add	r2, r1, r2
   2b584:	strh	r1, [sp, #22]
   2b588:	cmp	r5, r2
   2b58c:	bcc	2b5ec <flatcc_verify_table_as_typed_root@@Base+0x108>
   2b590:	tst	r1, #1
   2b594:	bne	2b5ec <flatcc_verify_table_as_typed_root@@Base+0x108>
   2b598:	cmp	r1, #3
   2b59c:	movls	r0, #28
   2b5a0:	bls	2b528 <flatcc_verify_table_as_typed_root@@Base+0x44>
   2b5a4:	ldrh	r2, [r4, r0]
   2b5a8:	sub	r3, r5, r3
   2b5ac:	cmp	r3, r2
   2b5b0:	strh	r2, [sp, #20]
   2b5b4:	movcc	r0, #20
   2b5b8:	bcc	2b528 <flatcc_verify_table_as_typed_root@@Base+0x44>
   2b5bc:	mov	r0, sp
   2b5c0:	strd	r4, [sp]
   2b5c4:	str	ip, [sp, #12]
   2b5c8:	blx	r7
   2b5cc:	b	2b528 <flatcc_verify_table_as_typed_root@@Base+0x44>
   2b5d0:	mov	r2, r6
   2b5d4:	mov	r1, r5
   2b5d8:	mov	r0, r4
   2b5dc:	bl	2b210 <flatcc_verify_typed_buffer_header@@Base>
   2b5e0:	b	2b528 <flatcc_verify_table_as_typed_root@@Base+0x44>
   2b5e4:	mov	r0, #29
   2b5e8:	b	2b528 <flatcc_verify_table_as_typed_root@@Base+0x44>
   2b5ec:	mov	r0, #30
   2b5f0:	b	2b528 <flatcc_verify_table_as_typed_root@@Base+0x44>

0002b5f4 <flatcc_verify_struct_as_nested_root@@Base>:
   2b5f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2b5f8:	mov	r4, r1
   2b5fc:	strd	r6, [sp, #8]
   2b600:	mov	r6, r3
   2b604:	strd	r8, [sp, #16]
   2b608:	mvn	r9, #0
   2b60c:	mov	r8, r0
   2b610:	strd	sl, [sp, #24]
   2b614:	mov	sl, #1
   2b618:	mov	fp, r2
   2b61c:	str	lr, [sp, #32]
   2b620:	sub	sp, sp, #12
   2b624:	ldrh	r5, [sp, #52]	; 0x34
   2b628:	str	sl, [sp]
   2b62c:	str	r9, [sp, #4]
   2b630:	ldr	r7, [sp, #48]	; 0x30
   2b634:	mov	r3, r5
   2b638:	bl	2a84c <flatcc_verify_vector_field@@Base>
   2b63c:	cmp	r0, #0
   2b640:	bne	2b6dc <flatcc_verify_struct_as_nested_root@@Base+0xe8>
   2b644:	ldrh	r3, [r8, #22]
   2b648:	add	r1, r4, #2
   2b64c:	lsl	r1, r1, #1
   2b650:	uxth	r1, r1
   2b654:	cmp	r3, r1
   2b658:	bls	2b6bc <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   2b65c:	ldr	r3, [r8, #12]
   2b660:	ldrh	r3, [r3, r1]
   2b664:	cmp	r3, #0
   2b668:	beq	2b6bc <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   2b66c:	ldr	r2, [r8]
   2b670:	ldr	r1, [r8, #16]
   2b674:	add	r3, r3, r1
   2b678:	adds	r0, r2, r3
   2b67c:	beq	2b6bc <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   2b680:	ldr	ip, [r2, r3]
   2b684:	mov	r3, r7
   2b688:	mov	r2, r6
   2b68c:	ldr	r1, [r0, ip]
   2b690:	add	r0, r0, ip
   2b694:	add	r0, r0, #4
   2b698:	str	r5, [sp, #48]	; 0x30
   2b69c:	add	sp, sp, #12
   2b6a0:	ldrd	r4, [sp]
   2b6a4:	ldrd	r6, [sp, #8]
   2b6a8:	ldrd	r8, [sp, #16]
   2b6ac:	ldrd	sl, [sp, #24]
   2b6b0:	ldr	lr, [sp, #32]
   2b6b4:	add	sp, sp, #36	; 0x24
   2b6b8:	b	2b264 <flatcc_verify_struct_as_root@@Base>
   2b6bc:	mov	r0, #0
   2b6c0:	add	sp, sp, #12
   2b6c4:	ldrd	r4, [sp]
   2b6c8:	ldrd	r6, [sp, #8]
   2b6cc:	ldrd	r8, [sp, #16]
   2b6d0:	ldrd	sl, [sp, #24]
   2b6d4:	add	sp, sp, #32
   2b6d8:	pop	{pc}		; (ldr pc, [sp], #4)
   2b6dc:	mov	r3, r5
   2b6e0:	mov	r2, fp
   2b6e4:	str	sl, [sp, #48]	; 0x30
   2b6e8:	mov	r1, r4
   2b6ec:	mov	r0, r8
   2b6f0:	str	r9, [sp, #52]	; 0x34
   2b6f4:	add	sp, sp, #12
   2b6f8:	ldrd	r4, [sp]
   2b6fc:	ldrd	r6, [sp, #8]
   2b700:	ldrd	r8, [sp, #16]
   2b704:	ldrd	sl, [sp, #24]
   2b708:	ldr	lr, [sp, #32]
   2b70c:	add	sp, sp, #36	; 0x24
   2b710:	b	2a84c <flatcc_verify_vector_field@@Base>

0002b714 <flatcc_verify_table_as_nested_root@@Base>:
   2b714:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2b718:	mov	r5, r0
   2b71c:	mov	r4, r1
   2b720:	strd	r6, [sp, #8]
   2b724:	mvn	r7, #0
   2b728:	mov	r6, r3
   2b72c:	strd	r8, [sp, #16]
   2b730:	mov	r8, #1
   2b734:	str	sl, [sp, #24]
   2b738:	mov	sl, r2
   2b73c:	str	lr, [sp, #28]
   2b740:	sub	sp, sp, #32
   2b744:	ldrh	r9, [sp, #64]	; 0x40
   2b748:	str	r8, [sp]
   2b74c:	str	r7, [sp, #4]
   2b750:	mov	r3, r9
   2b754:	bl	2a84c <flatcc_verify_vector_field@@Base>
   2b758:	cmp	r0, #0
   2b75c:	bne	2b89c <flatcc_verify_table_as_nested_root@@Base+0x188>
   2b760:	ldrh	r3, [r5, #22]
   2b764:	add	r1, r4, #2
   2b768:	lsl	r1, r1, #1
   2b76c:	uxth	r1, r1
   2b770:	cmp	r3, r1
   2b774:	bls	2b880 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2b778:	ldr	r3, [r5, #12]
   2b77c:	ldrh	r3, [r3, r1]
   2b780:	cmp	r3, #0
   2b784:	beq	2b880 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2b788:	ldr	r2, [r5]
   2b78c:	ldr	r1, [r5, #16]
   2b790:	add	r3, r3, r1
   2b794:	adds	r1, r2, r3
   2b798:	beq	2b880 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2b79c:	ldr	r4, [r2, r3]
   2b7a0:	mov	r2, r6
   2b7a4:	ldr	r7, [r1, r4]
   2b7a8:	add	r4, r1, r4
   2b7ac:	add	r8, r4, #4
   2b7b0:	mov	r0, r8
   2b7b4:	mov	r1, r7
   2b7b8:	bl	2b188 <flatcc_verify_buffer_header@@Base>
   2b7bc:	cmp	r0, #0
   2b7c0:	bne	2b8c4 <flatcc_verify_table_as_nested_root@@Base+0x1b0>
   2b7c4:	ldr	r3, [r5, #8]
   2b7c8:	ldr	r2, [r4, #4]
   2b7cc:	sub	r3, r3, #1
   2b7d0:	cmp	r3, #0
   2b7d4:	moveq	r0, #3
   2b7d8:	str	r3, [sp, #16]
   2b7dc:	beq	2b880 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2b7e0:	cmp	r2, #0
   2b7e4:	beq	2b8bc <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   2b7e8:	add	r3, r2, #4
   2b7ec:	cmp	r7, r3
   2b7f0:	bcc	2b8bc <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   2b7f4:	tst	r2, #3
   2b7f8:	bne	2b8bc <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   2b7fc:	str	r2, [sp, #24]
   2b800:	ldr	r3, [r8, r2]
   2b804:	subs	r3, r2, r3
   2b808:	bmi	2b8d8 <flatcc_verify_table_as_nested_root@@Base+0x1c4>
   2b80c:	tst	r3, #1
   2b810:	bne	2b8d8 <flatcc_verify_table_as_nested_root@@Base+0x1c4>
   2b814:	add	r0, r3, #2
   2b818:	cmp	r7, r0
   2b81c:	movcc	r0, #27
   2b820:	bcc	2b880 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2b824:	ldrh	r1, [r8, r3]
   2b828:	add	ip, r8, r3
   2b82c:	add	r3, r1, r3
   2b830:	strh	r1, [sp, #30]
   2b834:	cmp	r7, r3
   2b838:	bcc	2b8e0 <flatcc_verify_table_as_nested_root@@Base+0x1cc>
   2b83c:	tst	r1, #1
   2b840:	bne	2b8e0 <flatcc_verify_table_as_nested_root@@Base+0x1cc>
   2b844:	cmp	r1, #3
   2b848:	movls	r0, #28
   2b84c:	bls	2b880 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2b850:	ldrh	r3, [r8, r0]
   2b854:	sub	r2, r7, r2
   2b858:	cmp	r2, r3
   2b85c:	strh	r3, [sp, #28]
   2b860:	movcc	r0, #20
   2b864:	bcc	2b880 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2b868:	add	r0, sp, #8
   2b86c:	ldr	r3, [sp, #68]	; 0x44
   2b870:	str	r8, [sp, #8]
   2b874:	str	r7, [sp, #12]
   2b878:	str	ip, [sp, #20]
   2b87c:	blx	r3
   2b880:	add	sp, sp, #32
   2b884:	ldrd	r4, [sp]
   2b888:	ldrd	r6, [sp, #8]
   2b88c:	ldrd	r8, [sp, #16]
   2b890:	ldr	sl, [sp, #24]
   2b894:	add	sp, sp, #28
   2b898:	pop	{pc}		; (ldr pc, [sp], #4)
   2b89c:	mov	r3, r9
   2b8a0:	mov	r2, sl
   2b8a4:	str	r8, [sp]
   2b8a8:	mov	r1, r4
   2b8ac:	mov	r0, r5
   2b8b0:	str	r7, [sp, #4]
   2b8b4:	bl	2a84c <flatcc_verify_vector_field@@Base>
   2b8b8:	b	2b880 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2b8bc:	mov	r0, #15
   2b8c0:	b	2b880 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2b8c4:	mov	r2, r6
   2b8c8:	mov	r1, r7
   2b8cc:	mov	r0, r8
   2b8d0:	bl	2b188 <flatcc_verify_buffer_header@@Base>
   2b8d4:	b	2b880 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2b8d8:	mov	r0, #29
   2b8dc:	b	2b880 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2b8e0:	mov	r0, #30
   2b8e4:	b	2b880 <flatcc_verify_table_as_nested_root@@Base+0x16c>

0002b8e8 <flatcc_verify_union_field@@Base>:
   2b8e8:	strd	r4, [sp, #-20]!	; 0xffffffec
   2b8ec:	add	r1, r1, #1
   2b8f0:	ldr	r4, [r0, #12]
   2b8f4:	lsl	r1, r1, #1
   2b8f8:	strd	r6, [sp, #8]
   2b8fc:	str	lr, [sp, #16]
   2b900:	uxth	r1, r1
   2b904:	sub	sp, sp, #28
   2b908:	ldrh	lr, [r0, #22]
   2b90c:	cmp	r1, lr
   2b910:	bcs	2b9bc <flatcc_verify_union_field@@Base+0xd4>
   2b914:	ldrh	ip, [r4, r1]
   2b918:	cmp	ip, #0
   2b91c:	beq	2b9bc <flatcc_verify_union_field@@Base+0xd4>
   2b920:	ldrh	r5, [r0, #20]
   2b924:	add	r6, ip, #1
   2b928:	cmp	r6, r5
   2b92c:	bhi	2ba0c <flatcc_verify_union_field@@Base+0x124>
   2b930:	ldr	r6, [r0]
   2b934:	add	r1, r1, #2
   2b938:	uxth	r1, r1
   2b93c:	ldr	r7, [r0, #16]
   2b940:	cmp	lr, r1
   2b944:	add	lr, ip, r7
   2b948:	ldrb	ip, [r6, lr]
   2b94c:	bls	2ba14 <flatcc_verify_union_field@@Base+0x12c>
   2b950:	cmp	ip, #0
   2b954:	ldrh	r1, [r4, r1]
   2b958:	beq	2b9fc <flatcc_verify_union_field@@Base+0x114>
   2b95c:	cmp	r1, #0
   2b960:	beq	2ba24 <flatcc_verify_union_field@@Base+0x13c>
   2b964:	add	r2, r1, #4
   2b968:	cmp	r5, r2
   2b96c:	bcc	2ba0c <flatcc_verify_union_field@@Base+0x124>
   2b970:	add	r1, r1, r7
   2b974:	tst	r1, #3
   2b978:	movne	r0, #12
   2b97c:	bne	2b9e8 <flatcc_verify_union_field@@Base+0x100>
   2b980:	cmp	r1, #0
   2b984:	beq	2ba34 <flatcc_verify_union_field@@Base+0x14c>
   2b988:	mov	r2, r0
   2b98c:	str	r1, [sp, #16]
   2b990:	mov	r0, sp
   2b994:	ldr	ip, [r2, #4]
   2b998:	ldr	r2, [r2, #8]
   2b99c:	stm	sp, {r6, ip}
   2b9a0:	str	r2, [sp, #8]
   2b9a4:	ldr	r2, [r6, r1]
   2b9a8:	str	r2, [sp, #20]
   2b9ac:	ldrb	r2, [r6, lr]
   2b9b0:	strb	r2, [sp, #12]
   2b9b4:	blx	r3
   2b9b8:	b	2b9e8 <flatcc_verify_union_field@@Base+0x100>
   2b9bc:	add	r1, r1, #2
   2b9c0:	uxth	r1, r1
   2b9c4:	cmp	lr, r1
   2b9c8:	bls	2b9dc <flatcc_verify_union_field@@Base+0xf4>
   2b9cc:	ldrh	r3, [r4, r1]
   2b9d0:	cmp	r3, #0
   2b9d4:	movne	r0, #23
   2b9d8:	bne	2b9e8 <flatcc_verify_union_field@@Base+0x100>
   2b9dc:	cmp	r2, #0
   2b9e0:	moveq	r0, #0
   2b9e4:	movne	r0, #21
   2b9e8:	add	sp, sp, #28
   2b9ec:	ldrd	r4, [sp]
   2b9f0:	ldrd	r6, [sp, #8]
   2b9f4:	add	sp, sp, #16
   2b9f8:	pop	{pc}		; (ldr pc, [sp], #4)
   2b9fc:	cmp	r1, #0
   2ba00:	movne	r0, #24
   2ba04:	moveq	r0, #0
   2ba08:	b	2b9e8 <flatcc_verify_union_field@@Base+0x100>
   2ba0c:	mov	r0, #13
   2ba10:	b	2b9e8 <flatcc_verify_union_field@@Base+0x100>
   2ba14:	cmp	ip, #0
   2ba18:	bne	2ba24 <flatcc_verify_union_field@@Base+0x13c>
   2ba1c:	mov	r0, ip
   2ba20:	b	2b9e8 <flatcc_verify_union_field@@Base+0x100>
   2ba24:	cmp	r2, #0
   2ba28:	moveq	r0, #0
   2ba2c:	movne	r0, #4
   2ba30:	b	2b9e8 <flatcc_verify_union_field@@Base+0x100>
   2ba34:	mov	r0, r1
   2ba38:	b	2b9e8 <flatcc_verify_union_field@@Base+0x100>

0002ba3c <flatcc_verify_union_vector_field@@Base>:
   2ba3c:	ldrh	ip, [r0, #22]
   2ba40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2ba44:	add	r4, r1, #1
   2ba48:	sub	r1, r1, #1
   2ba4c:	lsl	r4, r4, #1
   2ba50:	strd	r6, [sp, #8]
   2ba54:	uxth	r6, r1
   2ba58:	strd	r8, [sp, #16]
   2ba5c:	uxth	r4, r4
   2ba60:	strd	sl, [sp, #24]
   2ba64:	cmp	r4, ip
   2ba68:	str	lr, [sp, #32]
   2ba6c:	sub	sp, sp, #36	; 0x24
   2ba70:	ldr	lr, [r0, #12]
   2ba74:	bcs	2bc34 <flatcc_verify_union_vector_field@@Base+0x1f8>
   2ba78:	ldrh	r1, [lr, r4]
   2ba7c:	cmp	r1, #0
   2ba80:	beq	2bc34 <flatcc_verify_union_vector_field@@Base+0x1f8>
   2ba84:	mov	r9, #1
   2ba88:	mvn	fp, #0
   2ba8c:	mov	r8, r3
   2ba90:	mov	r1, r6
   2ba94:	mov	r3, r9
   2ba98:	stm	sp, {r9, fp}
   2ba9c:	mov	r7, r2
   2baa0:	mov	r5, r0
   2baa4:	bl	2a84c <flatcc_verify_vector_field@@Base>
   2baa8:	subs	sl, r0, #0
   2baac:	bne	2bc78 <flatcc_verify_union_vector_field@@Base+0x23c>
   2bab0:	ldrh	r1, [r5, #22]
   2bab4:	cmp	r4, r1
   2bab8:	bcs	2bc14 <flatcc_verify_union_vector_field@@Base+0x1d8>
   2babc:	ldr	ip, [r5, #12]
   2bac0:	ldrh	r3, [ip, r4]
   2bac4:	cmp	r3, #0
   2bac8:	beq	2bc14 <flatcc_verify_union_vector_field@@Base+0x1d8>
   2bacc:	ldr	r0, [r5]
   2bad0:	ldr	r2, [r5, #16]
   2bad4:	add	r3, r3, r2
   2bad8:	adds	lr, r0, r3
   2badc:	beq	2bc14 <flatcc_verify_union_vector_field@@Base+0x1d8>
   2bae0:	add	r4, r4, #2
   2bae4:	uxth	r4, r4
   2bae8:	cmp	r1, r4
   2baec:	bls	2bc60 <flatcc_verify_union_vector_field@@Base+0x224>
   2baf0:	ldrh	r1, [ip, r4]
   2baf4:	cmp	r1, #0
   2baf8:	beq	2bc60 <flatcc_verify_union_vector_field@@Base+0x224>
   2bafc:	ldrh	ip, [r5, #20]
   2bb00:	add	r4, r1, #4
   2bb04:	cmp	r4, ip
   2bb08:	movhi	sl, #13
   2bb0c:	bhi	2bc14 <flatcc_verify_union_vector_field@@Base+0x1d8>
   2bb10:	add	r2, r2, r1
   2bb14:	tst	r2, #3
   2bb18:	movne	sl, #12
   2bb1c:	bne	2bc14 <flatcc_verify_union_vector_field@@Base+0x1d8>
   2bb20:	cmp	r2, #0
   2bb24:	beq	2bc14 <flatcc_verify_union_vector_field@@Base+0x1d8>
   2bb28:	ldr	ip, [r5, #8]
   2bb2c:	ldr	r1, [r0, r2]
   2bb30:	cmp	ip, #0
   2bb34:	movle	sl, #3
   2bb38:	ble	2bc14 <flatcc_verify_union_vector_field@@Base+0x1d8>
   2bb3c:	add	r1, r2, r1
   2bb40:	cmp	r2, r1
   2bb44:	bcs	2bc70 <flatcc_verify_union_vector_field@@Base+0x234>
   2bb48:	ldr	r4, [r5, #4]
   2bb4c:	add	r2, r1, #4
   2bb50:	cmp	r4, r2
   2bb54:	bcc	2bc70 <flatcc_verify_union_vector_field@@Base+0x234>
   2bb58:	tst	r2, #3
   2bb5c:	bne	2bc70 <flatcc_verify_union_vector_field@@Base+0x234>
   2bb60:	ldr	r5, [r0, r1]
   2bb64:	add	r6, r0, r1
   2bb68:	cmn	r5, #-1073741823	; 0xc0000001
   2bb6c:	bhi	2bc98 <flatcc_verify_union_vector_field@@Base+0x25c>
   2bb70:	sub	r7, r4, r2
   2bb74:	cmp	r7, r5, lsl #2
   2bb78:	bcc	2bc98 <flatcc_verify_union_vector_field@@Base+0x25c>
   2bb7c:	ldr	r3, [r0, r3]
   2bb80:	ldr	r7, [lr, r3]
   2bb84:	add	lr, lr, r3
   2bb88:	cmp	r7, r5
   2bb8c:	bne	2bcb8 <flatcc_verify_union_vector_field@@Base+0x27c>
   2bb90:	sub	ip, ip, #1
   2bb94:	cmp	r7, #0
   2bb98:	str	r0, [sp, #8]
   2bb9c:	str	r4, [sp, #12]
   2bba0:	str	ip, [sp, #16]
   2bba4:	beq	2bc14 <flatcc_verify_union_vector_field@@Base+0x1d8>
   2bba8:	add	r5, lr, #4
   2bbac:	rsb	r4, r0, #4
   2bbb0:	add	r7, r7, r5
   2bbb4:	add	r9, sp, #8
   2bbb8:	b	2bbcc <flatcc_verify_union_vector_field@@Base+0x190>
   2bbbc:	cmp	r2, #0
   2bbc0:	bne	2bcc0 <flatcc_verify_union_vector_field@@Base+0x284>
   2bbc4:	cmp	r5, r7
   2bbc8:	beq	2bc14 <flatcc_verify_union_vector_field@@Base+0x1d8>
   2bbcc:	add	r1, r4, r6
   2bbd0:	ldr	r3, [r6, #4]!
   2bbd4:	mov	r0, r9
   2bbd8:	add	r5, r5, #1
   2bbdc:	ldrb	r2, [r5, #-1]
   2bbe0:	cmp	r3, #0
   2bbe4:	beq	2bbbc <flatcc_verify_union_vector_field@@Base+0x180>
   2bbe8:	cmp	r2, #0
   2bbec:	beq	2bcc8 <flatcc_verify_union_vector_field@@Base+0x28c>
   2bbf0:	strb	r2, [sp, #20]
   2bbf4:	str	r1, [sp, #24]
   2bbf8:	str	r3, [sp, #28]
   2bbfc:	blx	r8
   2bc00:	cmp	r0, #0
   2bc04:	beq	2bbc4 <flatcc_verify_union_vector_field@@Base+0x188>
   2bc08:	mov	r0, r9
   2bc0c:	blx	r8
   2bc10:	mov	sl, r0
   2bc14:	mov	r0, sl
   2bc18:	add	sp, sp, #36	; 0x24
   2bc1c:	ldrd	r4, [sp]
   2bc20:	ldrd	r6, [sp, #8]
   2bc24:	ldrd	r8, [sp, #16]
   2bc28:	ldrd	sl, [sp, #24]
   2bc2c:	add	sp, sp, #32
   2bc30:	pop	{pc}		; (ldr pc, [sp], #4)
   2bc34:	add	r1, r4, #2
   2bc38:	uxth	r1, r1
   2bc3c:	cmp	ip, r1
   2bc40:	bls	2bc50 <flatcc_verify_union_vector_field@@Base+0x214>
   2bc44:	ldrh	r1, [lr, r1]
   2bc48:	cmp	r1, #0
   2bc4c:	bne	2ba84 <flatcc_verify_union_vector_field@@Base+0x48>
   2bc50:	cmp	r2, #0
   2bc54:	movne	sl, #22
   2bc58:	beq	2ba84 <flatcc_verify_union_vector_field@@Base+0x48>
   2bc5c:	b	2bc14 <flatcc_verify_union_vector_field@@Base+0x1d8>
   2bc60:	cmp	r7, #0
   2bc64:	moveq	sl, #0
   2bc68:	movne	sl, #4
   2bc6c:	b	2bc14 <flatcc_verify_union_vector_field@@Base+0x1d8>
   2bc70:	mov	sl, #16
   2bc74:	b	2bc14 <flatcc_verify_union_vector_field@@Base+0x1d8>
   2bc78:	mov	r2, r7
   2bc7c:	mov	r1, r6
   2bc80:	stm	sp, {r9, fp}
   2bc84:	mov	r3, r9
   2bc88:	mov	r0, r5
   2bc8c:	bl	2a84c <flatcc_verify_vector_field@@Base>
   2bc90:	mov	sl, r0
   2bc94:	b	2bc14 <flatcc_verify_union_vector_field@@Base+0x1d8>
   2bc98:	ldr	r3, [r0, r1]
   2bc9c:	cmn	r3, #-1073741823	; 0xc0000001
   2bca0:	movhi	sl, #25
   2bca4:	bhi	2bc14 <flatcc_verify_union_vector_field@@Base+0x1d8>
   2bca8:	sub	r2, r4, r2
   2bcac:	cmp	r2, r3, lsl #2
   2bcb0:	movcc	sl, #26
   2bcb4:	b	2bc14 <flatcc_verify_union_vector_field@@Base+0x1d8>
   2bcb8:	mov	sl, #34	; 0x22
   2bcbc:	b	2bc14 <flatcc_verify_union_vector_field@@Base+0x1d8>
   2bcc0:	mov	sl, #32
   2bcc4:	b	2bc14 <flatcc_verify_union_vector_field@@Base+0x1d8>
   2bcc8:	mov	sl, #33	; 0x21
   2bccc:	b	2bc14 <flatcc_verify_union_vector_field@@Base+0x1d8>
   2bcd0:	ldr	r3, [pc, #32]	; 2bcf8 <flatcc_verify_union_vector_field@@Base+0x2bc>
   2bcd4:	mov	r2, #260	; 0x104
   2bcd8:	str	r4, [sp, #-8]!
   2bcdc:	ldr	r1, [pc, #24]	; 2bcfc <flatcc_verify_union_vector_field@@Base+0x2c0>
   2bce0:	str	lr, [sp, #4]
   2bce4:	ldr	r0, [pc, #20]	; 2bd00 <flatcc_verify_union_vector_field@@Base+0x2c4>
   2bce8:	add	r3, pc, r3
   2bcec:	add	r1, pc, r1
   2bcf0:	add	r0, pc, r0
   2bcf4:	bl	145e8 <__assert_fail@plt>
   2bcf8:	andeq	r7, r1, r0, lsl #22
   2bcfc:	andeq	r8, r1, r8, lsl #6
   2bd00:	andeq	r8, r1, r4, ror r3

0002bd04 <grisu3_diy_fp_encode_double@@Base>:
   2bd04:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2bd08:	sub	r2, r2, r3
   2bd0c:	strd	r6, [sp, #8]
   2bd10:	strd	r8, [sp, #16]
   2bd14:	strd	sl, [sp, #24]
   2bd18:	str	lr, [sp, #32]
   2bd1c:	sub	sp, sp, #52	; 0x34
   2bd20:	ldr	lr, [sp, #88]	; 0x58
   2bd24:	strd	r0, [sp]
   2bd28:	cmp	lr, #0
   2bd2c:	movne	lr, #4
   2bd30:	orrs	r1, r0, r1
   2bd34:	beq	2c1dc <grisu3_diy_fp_encode_double@@Base+0x4d8>
   2bd38:	ldr	r1, [sp, #4]
   2bd3c:	mov	ip, #0
   2bd40:	mov	r6, ip
   2bd44:	mov	r4, ip
   2bd48:	movt	r6, #65472	; 0xffc0
   2bd4c:	and	r5, r1, r6
   2bd50:	orrs	r1, r4, r5
   2bd54:	bne	2bd9c <grisu3_diy_fp_encode_double@@Base+0x98>
   2bd58:	ldrd	r0, [sp]
   2bd5c:	mov	r5, ip
   2bd60:	mvn	r7, #9
   2bd64:	str	r6, [sp, #8]
   2bd68:	lsl	r4, r1, #10
   2bd6c:	mov	sl, r5
   2bd70:	mov	ip, r7
   2bd74:	lsl	r6, r0, #10
   2bd78:	sub	r7, r7, #10
   2bd7c:	orr	r4, r4, r0, lsr #22
   2bd80:	mov	r0, r6
   2bd84:	mov	r1, r4
   2bd88:	ldr	r4, [sp, #8]
   2bd8c:	and	fp, r1, r4
   2bd90:	orrs	r4, sl, fp
   2bd94:	beq	2bd68 <grisu3_diy_fp_encode_double@@Base+0x64>
   2bd98:	strd	r0, [sp]
   2bd9c:	ldrd	r6, [sp]
   2bda0:	cmp	r6, #0
   2bda4:	sbcs	r1, r7, #0
   2bda8:	blt	2bdd8 <grisu3_diy_fp_encode_double@@Base+0xd4>
   2bdac:	sub	r4, ip, #1
   2bdb0:	mov	r0, r6
   2bdb4:	mov	r1, r7
   2bdb8:	adds	r0, r0, r0
   2bdbc:	mov	ip, r4
   2bdc0:	adc	r1, r1, r1
   2bdc4:	cmp	r0, #0
   2bdc8:	sbcs	r5, r1, #0
   2bdcc:	sub	r4, r4, #1
   2bdd0:	bge	2bdb8 <grisu3_diy_fp_encode_double@@Base+0xb4>
   2bdd4:	strd	r0, [sp]
   2bdd8:	rsb	r4, ip, #0
   2bddc:	cmn	r2, #348	; 0x15c
   2bde0:	lsl	fp, lr, r4
   2bde4:	blt	2c23c <grisu3_diy_fp_encode_double@@Base+0x538>
   2bde8:	cmp	r2, #348	; 0x15c
   2bdec:	bge	2c1fc <grisu3_diy_fp_encode_double@@Base+0x4f8>
   2bdf0:	ldr	r4, [pc, #1228]	; 2c2c4 <grisu3_diy_fp_encode_double@@Base+0x5c0>
   2bdf4:	add	lr, r2, #348	; 0x15c
   2bdf8:	asr	lr, lr, #3
   2bdfc:	add	r4, pc, r4
   2be00:	add	lr, r4, lr, lsl #4
   2be04:	ldrsh	r1, [lr, #64]	; 0x40
   2be08:	ldrsh	r5, [lr, #66]	; 0x42
   2be0c:	str	r1, [sp, #32]
   2be10:	ldr	r1, [lr, #56]	; 0x38
   2be14:	cmp	r2, r5
   2be18:	str	r1, [sp, #8]
   2be1c:	ldr	r1, [lr, #60]	; 0x3c
   2be20:	str	r1, [sp, #36]	; 0x24
   2be24:	blt	2c220 <grisu3_diy_fp_encode_double@@Base+0x51c>
   2be28:	add	lr, r5, #7
   2be2c:	cmp	r2, lr
   2be30:	bgt	2c1e0 <grisu3_diy_fp_encode_double@@Base+0x4dc>
   2be34:	cmp	r2, r5
   2be38:	beq	2bed8 <grisu3_diy_fp_encode_double@@Base+0x1d4>
   2be3c:	sub	r2, r2, r5
   2be40:	sub	r2, r2, #1
   2be44:	cmp	r2, #6
   2be48:	bhi	2c260 <grisu3_diy_fp_encode_double@@Base+0x55c>
   2be4c:	ldr	r4, [pc, #1140]	; 2c2c8 <grisu3_diy_fp_encode_double@@Base+0x5c4>
   2be50:	add	r3, r3, #1
   2be54:	mov	lr, #0
   2be58:	add	r0, r3, r2
   2be5c:	add	r4, pc, r4
   2be60:	add	r3, r4, r2, lsl #4
   2be64:	ldr	r2, [r4, r2, lsl #4]
   2be68:	ldrd	r4, [sp]
   2be6c:	ldmib	r3, {r1, sl}
   2be70:	umull	r6, r7, r5, r2
   2be74:	umull	r2, r3, r4, r2
   2be78:	ldr	r2, [sp]
   2be7c:	add	ip, ip, sl
   2be80:	mov	r5, r7
   2be84:	add	ip, ip, #64	; 0x40
   2be88:	adds	r4, r3, r6
   2be8c:	adc	sl, lr, lr
   2be90:	adds	r4, r4, #-2147483648	; 0x80000000
   2be94:	umull	r6, r7, r2, r1
   2be98:	adc	sl, sl, lr
   2be9c:	adds	r4, r4, r6
   2bea0:	mov	r6, lr
   2bea4:	adc	sl, sl, lr
   2bea8:	adds	r3, r5, r7
   2beac:	str	r3, [sp, #16]
   2beb0:	adc	r3, lr, lr
   2beb4:	ldr	lr, [sp, #4]
   2beb8:	str	r3, [sp, #20]
   2bebc:	ldrd	r2, [sp, #16]
   2bec0:	umlal	r2, r3, r1, lr
   2bec4:	adds	r1, sl, r2
   2bec8:	adc	r3, r6, r3
   2becc:	cmp	r0, #19
   2bed0:	addgt	fp, fp, #4
   2bed4:	stm	sp, {r1, r3}
   2bed8:	ldrd	r0, [sp]
   2bedc:	mov	lr, #0
   2bee0:	ldr	r2, [sp, #8]
   2bee4:	umull	r2, r3, r1, r2
   2bee8:	mov	r1, r0
   2beec:	strd	r2, [sp, #16]
   2bef0:	mov	r2, r0
   2bef4:	ldr	r0, [sp, #8]
   2bef8:	ldr	r3, [sp, #32]
   2befc:	umull	r0, r1, r1, r0
   2bf00:	add	ip, ip, r3
   2bf04:	mov	r3, r2
   2bf08:	ldr	r2, [sp, #16]
   2bf0c:	strd	r0, [sp, #8]
   2bf10:	add	r5, ip, #64	; 0x40
   2bf14:	ldr	r0, [sp, #12]
   2bf18:	ldr	r1, [sp, #36]	; 0x24
   2bf1c:	adds	r2, r0, r2
   2bf20:	adc	r4, lr, lr
   2bf24:	adds	r2, r2, #-2147483648	; 0x80000000
   2bf28:	umull	r6, r7, r3, r1
   2bf2c:	ldr	r3, [sp, #20]
   2bf30:	adc	r4, r4, lr
   2bf34:	adds	r2, r2, r6
   2bf38:	ldr	r2, [sp, #4]
   2bf3c:	adc	r4, r4, lr
   2bf40:	adds	r3, r3, r7
   2bf44:	str	r3, [sp, #24]
   2bf48:	adc	r3, lr, lr
   2bf4c:	str	r3, [sp, #28]
   2bf50:	ldrd	r6, [sp, #24]
   2bf54:	umlal	r6, r7, r1, r2
   2bf58:	adds	r8, r4, r6
   2bf5c:	adc	r9, lr, r7
   2bf60:	cmp	fp, lr
   2bf64:	movne	r2, #9
   2bf68:	moveq	r2, #8
   2bf6c:	orrs	r3, r8, r9
   2bf70:	add	r2, fp, r2
   2bf74:	beq	2c1dc <grisu3_diy_fp_encode_double@@Base+0x4d8>
   2bf78:	mov	r3, lr
   2bf7c:	mov	r6, lr
   2bf80:	movt	r3, #65472	; 0xffc0
   2bf84:	and	r7, r9, r3
   2bf88:	orrs	r1, r6, r7
   2bf8c:	bne	2c1c4 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   2bf90:	add	ip, ip, #54	; 0x36
   2bf94:	mov	r1, r3
   2bf98:	mov	r7, r5
   2bf9c:	lsl	r0, r9, #10
   2bfa0:	mov	r4, lr
   2bfa4:	mov	r3, ip
   2bfa8:	lsl	r6, r8, #10
   2bfac:	sub	ip, ip, #10
   2bfb0:	orr	r0, r0, r8, lsr #22
   2bfb4:	mov	r8, r6
   2bfb8:	and	r5, r0, r1
   2bfbc:	mov	r9, r0
   2bfc0:	orrs	r0, r4, r5
   2bfc4:	beq	2bf9c <grisu3_diy_fp_encode_double@@Base+0x298>
   2bfc8:	mov	r5, r7
   2bfcc:	cmp	r8, #0
   2bfd0:	sbcs	r1, r9, #0
   2bfd4:	blt	2bff8 <grisu3_diy_fp_encode_double@@Base+0x2f4>
   2bfd8:	sub	r1, r3, #1
   2bfdc:	adds	r8, r8, r8
   2bfe0:	mov	r3, r1
   2bfe4:	adc	r9, r9, r9
   2bfe8:	cmp	r8, #0
   2bfec:	sbcs	r0, r9, #0
   2bff0:	sub	r1, r1, #1
   2bff4:	bge	2bfdc <grisu3_diy_fp_encode_double@@Base+0x2d8>
   2bff8:	movw	r1, #64526	; 0xfc0e
   2bffc:	movt	r1, #65535	; 0xffff
   2c000:	add	r0, r3, #64	; 0x40
   2c004:	sub	r5, r5, r3
   2c008:	cmp	r0, r1
   2c00c:	lsl	r2, r2, r5
   2c010:	blt	2c150 <grisu3_diy_fp_encode_double@@Base+0x44c>
   2c014:	add	ip, r2, #4
   2c018:	mov	r1, #4
   2c01c:	cmp	ip, #0
   2c020:	mov	r0, #0
   2c024:	bgt	2c070 <grisu3_diy_fp_encode_double@@Base+0x36c>
   2c028:	adds	r8, r8, #1
   2c02c:	mov	r4, #0
   2c030:	adc	r9, r9, #0
   2c034:	and	r5, r9, #2097152	; 0x200000
   2c038:	orrs	lr, r4, r5
   2c03c:	beq	2c058 <grisu3_diy_fp_encode_double@@Base+0x354>
   2c040:	lsr	lr, r8, #1
   2c044:	add	r3, r3, #1
   2c048:	lsr	r4, r9, #1
   2c04c:	orr	lr, lr, r9, lsl #31
   2c050:	mov	r9, r4
   2c054:	mov	r8, lr
   2c058:	movw	r5, #65535	; 0xffff
   2c05c:	movt	r5, #31
   2c060:	mvn	r4, #0
   2c064:	cmp	r9, r5
   2c068:	cmpeq	r8, r4
   2c06c:	bls	2c0a8 <grisu3_diy_fp_encode_double@@Base+0x3a4>
   2c070:	movw	r5, #65535	; 0xffff
   2c074:	movt	r5, #31
   2c078:	add	r6, r3, #1
   2c07c:	mvn	r4, #0
   2c080:	lsr	lr, r8, #1
   2c084:	mov	r3, r6
   2c088:	add	r6, r6, #1
   2c08c:	lsr	r7, r9, #1
   2c090:	orr	lr, lr, r9, lsl #31
   2c094:	cmp	r7, r5
   2c098:	mov	r9, r7
   2c09c:	cmpeq	lr, r4
   2c0a0:	mov	r8, lr
   2c0a4:	bhi	2c080 <grisu3_diy_fp_encode_double@@Base+0x37c>
   2c0a8:	movw	lr, #64462	; 0xfbce
   2c0ac:	movt	lr, #65535	; 0xffff
   2c0b0:	cmp	r3, lr
   2c0b4:	mov	r6, #0
   2c0b8:	movlt	r7, #0
   2c0bc:	blt	2c118 <grisu3_diy_fp_encode_double@@Base+0x414>
   2c0c0:	mov	r4, r6
   2c0c4:	and	r5, r9, #1048576	; 0x100000
   2c0c8:	beq	2c100 <grisu3_diy_fp_encode_double@@Base+0x3fc>
   2c0cc:	orrs	r7, r4, r5
   2c0d0:	beq	2c0e4 <grisu3_diy_fp_encode_double@@Base+0x3e0>
   2c0d4:	b	2c1cc <grisu3_diy_fp_encode_double@@Base+0x4c8>
   2c0d8:	orrs	sl, r4, r5
   2c0dc:	bne	2c1ac <grisu3_diy_fp_encode_double@@Base+0x4a8>
   2c0e0:	mov	r3, r7
   2c0e4:	adds	r8, r8, r8
   2c0e8:	sub	r7, r3, #1
   2c0ec:	adc	r9, r9, r9
   2c0f0:	cmp	r7, lr
   2c0f4:	mov	r4, r6
   2c0f8:	and	r5, r9, #1048576	; 0x100000
   2c0fc:	bne	2c0d8 <grisu3_diy_fp_encode_double@@Base+0x3d4>
   2c100:	orrs	r3, r4, r5
   2c104:	movne	r4, #0
   2c108:	movne	r5, #1048576	; 0x100000
   2c10c:	ubfx	r3, r9, #0, #20
   2c110:	orr	r6, r8, r4
   2c114:	orr	r7, r3, r5
   2c118:	ldr	r3, [sp, #92]	; 0x5c
   2c11c:	sub	r2, r1, r2
   2c120:	cmp	r0, ip
   2c124:	cmplt	r2, r0
   2c128:	movge	r0, #1
   2c12c:	movlt	r0, #0
   2c130:	strd	r6, [r3]
   2c134:	add	sp, sp, #52	; 0x34
   2c138:	ldrd	r4, [sp]
   2c13c:	ldrd	r6, [sp, #8]
   2c140:	ldrd	r8, [sp, #16]
   2c144:	ldrd	sl, [sp, #24]
   2c148:	add	sp, sp, #32
   2c14c:	pop	{pc}		; (ldr pc, [sp], #4)
   2c150:	mvn	r1, #1072	; 0x430
   2c154:	cmp	r0, r1
   2c158:	blt	2c1bc <grisu3_diy_fp_encode_double@@Base+0x4b8>
   2c15c:	add	r0, r3, #1136	; 0x470
   2c160:	add	r0, r0, #2
   2c164:	rsb	lr, r0, #64	; 0x40
   2c168:	cmp	lr, #60	; 0x3c
   2c16c:	rsbgt	r0, r0, #2
   2c170:	ble	2c280 <grisu3_diy_fp_encode_double@@Base+0x57c>
   2c174:	asr	r2, r2, r0
   2c178:	add	r3, r3, r0
   2c17c:	mov	lr, #62	; 0x3e
   2c180:	lsr	r1, r9, r0
   2c184:	mov	r9, #0
   2c188:	add	r3, r3, #62	; 0x3e
   2c18c:	add	r2, r2, #9
   2c190:	mov	r0, r9
   2c194:	lsr	r8, r1, #30
   2c198:	mov	ip, r2
   2c19c:	mov	r1, r9
   2c1a0:	cmp	lr, ip
   2c1a4:	blt	2c058 <grisu3_diy_fp_encode_double@@Base+0x354>
   2c1a8:	b	2c028 <grisu3_diy_fp_encode_double@@Base+0x324>
   2c1ac:	add	r3, r3, #1072	; 0x430
   2c1b0:	add	r3, r3, #2
   2c1b4:	lsl	r5, r3, #20
   2c1b8:	b	2c10c <grisu3_diy_fp_encode_double@@Base+0x408>
   2c1bc:	mov	r0, #2
   2c1c0:	b	2c174 <grisu3_diy_fp_encode_double@@Base+0x470>
   2c1c4:	mov	r3, r5
   2c1c8:	b	2bfcc <grisu3_diy_fp_encode_double@@Base+0x2c8>
   2c1cc:	add	r3, r3, #1072	; 0x430
   2c1d0:	add	r3, r3, #3
   2c1d4:	lsl	r5, r3, #20
   2c1d8:	b	2c10c <grisu3_diy_fp_encode_double@@Base+0x408>
   2c1dc:	bl	2bcd0 <flatcc_verify_union_vector_field@@Base+0x294>
   2c1e0:	ldr	r1, [pc, #228]	; 2c2cc <grisu3_diy_fp_encode_double@@Base+0x5c8>
   2c1e4:	add	r3, r4, #24
   2c1e8:	mov	r2, #89	; 0x59
   2c1ec:	ldr	r0, [pc, #220]	; 2c2d0 <grisu3_diy_fp_encode_double@@Base+0x5cc>
   2c1f0:	add	r1, pc, r1
   2c1f4:	add	r0, pc, r0
   2c1f8:	bl	145e8 <__assert_fail@plt>
   2c1fc:	ldr	r3, [pc, #208]	; 2c2d4 <grisu3_diy_fp_encode_double@@Base+0x5d0>
   2c200:	mov	r2, #81	; 0x51
   2c204:	ldr	r1, [pc, #204]	; 2c2d8 <grisu3_diy_fp_encode_double@@Base+0x5d4>
   2c208:	ldr	r0, [pc, #204]	; 2c2dc <grisu3_diy_fp_encode_double@@Base+0x5d8>
   2c20c:	add	r3, pc, r3
   2c210:	add	r3, r3, #24
   2c214:	add	r1, pc, r1
   2c218:	add	r0, pc, r0
   2c21c:	bl	145e8 <__assert_fail@plt>
   2c220:	ldr	r1, [pc, #184]	; 2c2e0 <grisu3_diy_fp_encode_double@@Base+0x5dc>
   2c224:	add	r3, r4, #24
   2c228:	mov	r2, #88	; 0x58
   2c22c:	ldr	r0, [pc, #176]	; 2c2e4 <grisu3_diy_fp_encode_double@@Base+0x5e0>
   2c230:	add	r1, pc, r1
   2c234:	add	r0, pc, r0
   2c238:	bl	145e8 <__assert_fail@plt>
   2c23c:	ldr	r3, [pc, #164]	; 2c2e8 <grisu3_diy_fp_encode_double@@Base+0x5e4>
   2c240:	mov	r2, #80	; 0x50
   2c244:	ldr	r1, [pc, #160]	; 2c2ec <grisu3_diy_fp_encode_double@@Base+0x5e8>
   2c248:	ldr	r0, [pc, #160]	; 2c2f0 <grisu3_diy_fp_encode_double@@Base+0x5ec>
   2c24c:	add	r3, pc, r3
   2c250:	add	r3, r3, #24
   2c254:	add	r1, pc, r1
   2c258:	add	r0, pc, r0
   2c25c:	bl	145e8 <__assert_fail@plt>
   2c260:	ldr	r1, [pc, #140]	; 2c2f4 <grisu3_diy_fp_encode_double@@Base+0x5f0>
   2c264:	add	r3, r4, #1440	; 0x5a0
   2c268:	mov	r2, #185	; 0xb9
   2c26c:	add	r3, r3, #8
   2c270:	ldr	r0, [pc, #128]	; 2c2f8 <grisu3_diy_fp_encode_double@@Base+0x5f4>
   2c274:	add	r1, pc, r1
   2c278:	add	r0, pc, r0
   2c27c:	bl	145e8 <__assert_fail@plt>
   2c280:	lsr	ip, r8, lr
   2c284:	rsb	r1, lr, #32
   2c288:	rsb	r0, r0, #63	; 0x3f
   2c28c:	sub	r5, lr, #32
   2c290:	mov	r4, #1
   2c294:	orr	ip, ip, r9, lsl r1
   2c298:	mov	r1, #8
   2c29c:	add	r3, r3, lr
   2c2a0:	and	r4, r8, r4, lsl r0
   2c2a4:	orr	ip, ip, r9, lsr r5
   2c2a8:	lsl	r1, r1, r0
   2c2ac:	lsr	r5, r9, lr
   2c2b0:	mov	r8, ip
   2c2b4:	lsl	r0, r4, #3
   2c2b8:	add	ip, r2, r1
   2c2bc:	mov	r9, r5
   2c2c0:	b	2c1a0 <grisu3_diy_fp_encode_double@@Base+0x49c>
   2c2c4:	andeq	r7, r1, ip, ror #19
   2c2c8:	strdeq	r9, [r2], -r4
   2c2cc:	andeq	r7, r1, r0, lsl #29
   2c2d0:	andeq	r7, r1, r8, asr #30
   2c2d4:	ldrdeq	r7, [r1], -ip
   2c2d8:	andeq	r7, r1, ip, asr lr
   2c2dc:	andeq	r7, r1, r8, ror #29
   2c2e0:	andeq	r7, r1, r0, asr #28
   2c2e4:	strdeq	r7, [r1], -r8
   2c2e8:	muleq	r1, ip, r5
   2c2ec:	andeq	r7, r1, ip, lsl lr
   2c2f0:	andeq	r7, r1, r8, lsl #29
   2c2f4:	strdeq	r7, [r1], -ip
   2c2f8:	andeq	r7, r1, r0, ror #29
   2c2fc:	cmp	r1, #1000	; 0x3e8
   2c300:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c304:	mov	r4, #0
   2c308:	addgt	ip, r0, #1000	; 0x3e8
   2c30c:	addle	r1, r1, #1
   2c310:	strd	r6, [sp, #8]
   2c314:	addle	ip, r0, r1
   2c318:	addgt	ip, ip, #1
   2c31c:	strd	r8, [sp, #16]
   2c320:	mov	r5, #0
   2c324:	strd	sl, [sp, #24]
   2c328:	cmp	ip, r0
   2c32c:	str	lr, [sp, #32]
   2c330:	sub	sp, sp, #52	; 0x34
   2c334:	moveq	r6, ip
   2c338:	strd	r4, [r2]
   2c33c:	str	r2, [sp, #16]
   2c340:	beq	2c4d8 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   2c344:	ldrb	r4, [r0]
   2c348:	cmp	r4, #45	; 0x2d
   2c34c:	beq	2c5d0 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   2c350:	cmp	r4, #48	; 0x30
   2c354:	beq	2c4f8 <grisu3_diy_fp_encode_double@@Base+0x7f4>
   2c358:	sub	r3, r4, #49	; 0x31
   2c35c:	cmp	r3, #8
   2c360:	bhi	2c680 <grisu3_diy_fp_encode_double@@Base+0x97c>
   2c364:	mov	r2, #0
   2c368:	mov	r3, r0
   2c36c:	str	r2, [sp, #20]
   2c370:	add	r7, r3, #1
   2c374:	sub	r4, r4, #48	; 0x30
   2c378:	cmp	ip, r7
   2c37c:	asr	r5, r4, #31
   2c380:	beq	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c384:	ldrb	r1, [r3, #1]
   2c388:	sub	r3, r1, #48	; 0x30
   2c38c:	cmp	r3, #9
   2c390:	movhi	sl, #0
   2c394:	movhi	lr, sl
   2c398:	bhi	2ccd0 <grisu3_diy_fp_encode_double@@Base+0xfcc>
   2c39c:	add	fp, pc, #996	; 0x3e4
   2c3a0:	ldrd	sl, [fp]
   2c3a4:	add	lr, r7, #1
   2c3a8:	b	2c3b8 <grisu3_diy_fp_encode_double@@Base+0x6b4>
   2c3ac:	cmp	r5, fp
   2c3b0:	cmpeq	r4, sl
   2c3b4:	bhi	2c550 <grisu3_diy_fp_encode_double@@Base+0x84c>
   2c3b8:	lsl	r2, r5, #2
   2c3bc:	mov	r6, lr
   2c3c0:	lsl	r3, r4, #2
   2c3c4:	orr	r2, r2, r4, lsr #30
   2c3c8:	adds	r3, r3, r4
   2c3cc:	adc	r2, r2, r5
   2c3d0:	adds	r8, r3, r3
   2c3d4:	adc	r9, r2, r2
   2c3d8:	adds	r2, r8, r1
   2c3dc:	adc	r3, r9, #0
   2c3e0:	subs	r4, r2, #48	; 0x30
   2c3e4:	sbc	r5, r3, #0
   2c3e8:	cmp	ip, lr
   2c3ec:	beq	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c3f0:	ldrb	r1, [lr]
   2c3f4:	add	lr, lr, #1
   2c3f8:	sub	r3, r1, #48	; 0x30
   2c3fc:	cmp	r3, #9
   2c400:	bls	2c3ac <grisu3_diy_fp_encode_double@@Base+0x6a8>
   2c404:	mov	lr, #0
   2c408:	sub	sl, r6, r7
   2c40c:	mov	r7, lr
   2c410:	sub	r3, r1, #49	; 0x31
   2c414:	cmp	r3, #8
   2c418:	bls	2c610 <grisu3_diy_fp_encode_double@@Base+0x90c>
   2c41c:	cmp	r1, #46	; 0x2e
   2c420:	beq	2c688 <grisu3_diy_fp_encode_double@@Base+0x984>
   2c424:	orr	r1, r1, #32
   2c428:	add	r7, r7, sl
   2c42c:	cmp	r1, #101	; 0x65
   2c430:	beq	2c840 <grisu3_diy_fp_encode_double@@Base+0xb3c>
   2c434:	orrs	r3, r4, r5
   2c438:	mov	r9, r0
   2c43c:	ldr	r8, [sp, #16]
   2c440:	moveq	r2, #1
   2c444:	movne	r2, #0
   2c448:	cmn	r7, #324	; 0x144
   2c44c:	movge	r3, #0
   2c450:	movlt	r3, #1
   2c454:	orrs	r3, r2, r3
   2c458:	bne	2c5b4 <grisu3_diy_fp_encode_double@@Base+0x8b0>
   2c45c:	movw	r3, #310	; 0x136
   2c460:	cmp	r7, r3
   2c464:	bgt	2c660 <grisu3_diy_fp_encode_double@@Base+0x95c>
   2c468:	movw	r3, #65535	; 0xffff
   2c46c:	movt	r3, #31
   2c470:	cmp	r5, r3
   2c474:	mvn	r2, #0
   2c478:	cmpeq	r4, r2
   2c47c:	movls	r3, #1
   2c480:	movhi	r3, #0
   2c484:	cmp	r7, #22
   2c488:	movhi	r3, #0
   2c48c:	andls	r3, r3, #1
   2c490:	cmp	r3, #0
   2c494:	bne	2c95c <grisu3_diy_fp_encode_double@@Base+0xc58>
   2c498:	mov	r3, sl
   2c49c:	mov	r2, r7
   2c4a0:	str	lr, [sp]
   2c4a4:	mov	r0, r4
   2c4a8:	mov	r1, r5
   2c4ac:	str	r8, [sp, #4]
   2c4b0:	bl	2bd04 <grisu3_diy_fp_encode_double@@Base>
   2c4b4:	cmp	r0, #0
   2c4b8:	bne	2c5b4 <grisu3_diy_fp_encode_double@@Base+0x8b0>
   2c4bc:	mov	r0, r9
   2c4c0:	add	r1, sp, #44	; 0x2c
   2c4c4:	bl	145ac <strtod@plt>
   2c4c8:	ldr	r3, [sp, #44]	; 0x2c
   2c4cc:	vstr	d0, [r8]
   2c4d0:	cmp	r6, r3
   2c4d4:	movcs	r6, r3
   2c4d8:	mov	r0, r6
   2c4dc:	add	sp, sp, #52	; 0x34
   2c4e0:	ldrd	r4, [sp]
   2c4e4:	ldrd	r6, [sp, #8]
   2c4e8:	ldrd	r8, [sp, #16]
   2c4ec:	ldrd	sl, [sp, #24]
   2c4f0:	add	sp, sp, #32
   2c4f4:	pop	{pc}		; (ldr pc, [sp], #4)
   2c4f8:	mov	r2, #0
   2c4fc:	mov	r3, r0
   2c500:	str	r2, [sp, #20]
   2c504:	add	r7, r3, #1
   2c508:	cmp	ip, r7
   2c50c:	beq	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c510:	ldrb	r1, [r3, #1]
   2c514:	orr	r2, r1, #32
   2c518:	cmp	r2, #120	; 0x78
   2c51c:	beq	2c680 <grisu3_diy_fp_encode_double@@Base+0x97c>
   2c520:	cmp	r1, #48	; 0x30
   2c524:	addeq	r3, r3, #2
   2c528:	beq	2c53c <grisu3_diy_fp_encode_double@@Base+0x838>
   2c52c:	b	2c8e4 <grisu3_diy_fp_encode_double@@Base+0xbe0>
   2c530:	ldrb	r1, [r3], #1
   2c534:	cmp	r1, #48	; 0x30
   2c538:	bne	2c8e4 <grisu3_diy_fp_encode_double@@Base+0xbe0>
   2c53c:	cmp	r3, ip
   2c540:	mov	r7, r3
   2c544:	bne	2c530 <grisu3_diy_fp_encode_double@@Base+0x82c>
   2c548:	mov	r6, #0
   2c54c:	b	2c4d8 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   2c550:	cmp	r1, #52	; 0x34
   2c554:	sub	sl, r6, r7
   2c558:	movls	r3, #0
   2c55c:	movhi	r3, #1
   2c560:	adds	r4, r4, r3
   2c564:	adc	r5, r5, #0
   2c568:	cmp	r1, #48	; 0x30
   2c56c:	movne	r7, r6
   2c570:	movne	lr, #1
   2c574:	bne	2ccd0 <grisu3_diy_fp_encode_double@@Base+0xfcc>
   2c578:	add	r3, r6, #1
   2c57c:	mov	r7, #0
   2c580:	b	2c594 <grisu3_diy_fp_encode_double@@Base+0x890>
   2c584:	ldrb	r1, [r3]
   2c588:	add	r3, r3, #1
   2c58c:	cmp	r1, #48	; 0x30
   2c590:	bne	2c600 <grisu3_diy_fp_encode_double@@Base+0x8fc>
   2c594:	cmp	ip, r3
   2c598:	mov	r6, r3
   2c59c:	add	r7, r7, #1
   2c5a0:	bne	2c584 <grisu3_diy_fp_encode_double@@Base+0x880>
   2c5a4:	b	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c5a8:	vldr	d6, [pc, #480]	; 2c790 <grisu3_diy_fp_encode_double@@Base+0xa8c>
   2c5ac:	vmul.f64	d7, d7, d6
   2c5b0:	vstr	d7, [r8]
   2c5b4:	ldr	r3, [sp, #20]
   2c5b8:	cmp	r3, #0
   2c5bc:	beq	2c4d8 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   2c5c0:	vldr	d7, [r8]
   2c5c4:	vneg.f64	d7, d7
   2c5c8:	vstr	d7, [r8]
   2c5cc:	b	2c4d8 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   2c5d0:	add	r3, r0, #1
   2c5d4:	cmp	ip, r3
   2c5d8:	beq	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c5dc:	ldrb	r4, [r0, #1]
   2c5e0:	cmp	r4, #48	; 0x30
   2c5e4:	beq	2c674 <grisu3_diy_fp_encode_double@@Base+0x970>
   2c5e8:	sub	r2, r4, #49	; 0x31
   2c5ec:	cmp	r2, #8
   2c5f0:	bhi	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c5f4:	mov	r2, #1
   2c5f8:	str	r2, [sp, #20]
   2c5fc:	b	2c370 <grisu3_diy_fp_encode_double@@Base+0x66c>
   2c600:	sub	r3, r1, #49	; 0x31
   2c604:	mov	lr, #1
   2c608:	cmp	r3, #8
   2c60c:	bhi	2c41c <grisu3_diy_fp_encode_double@@Base+0x718>
   2c610:	add	r3, r6, #1
   2c614:	add	lr, r7, #1
   2c618:	cmp	ip, r3
   2c61c:	beq	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c620:	ldrb	r1, [r6, #1]
   2c624:	sub	r2, r1, #48	; 0x30
   2c628:	cmp	r2, #9
   2c62c:	bhi	2ccb4 <grisu3_diy_fp_encode_double@@Base+0xfb0>
   2c630:	sub	r8, r7, r6
   2c634:	add	r3, r6, #2
   2c638:	cmp	ip, r3
   2c63c:	add	r7, r8, r3
   2c640:	mov	r6, r3
   2c644:	beq	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c648:	ldrb	r1, [r3], #1
   2c64c:	sub	r2, r1, #48	; 0x30
   2c650:	cmp	r2, #9
   2c654:	bls	2c638 <grisu3_diy_fp_encode_double@@Base+0x934>
   2c658:	mov	lr, #1
   2c65c:	b	2c41c <grisu3_diy_fp_encode_double@@Base+0x718>
   2c660:	mov	r2, #0
   2c664:	mov	r3, #0
   2c668:	movt	r3, #32752	; 0x7ff0
   2c66c:	strd	r2, [r8]
   2c670:	b	2c5b4 <grisu3_diy_fp_encode_double@@Base+0x8b0>
   2c674:	mov	r2, #1
   2c678:	str	r2, [sp, #20]
   2c67c:	b	2c504 <grisu3_diy_fp_encode_double@@Base+0x800>
   2c680:	mov	r6, r0
   2c684:	b	2c4d8 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   2c688:	ldrb	r9, [r6, #1]
   2c68c:	add	fp, r6, #1
   2c690:	sub	r3, r9, #48	; 0x30
   2c694:	cmp	r3, #9
   2c698:	bhi	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c69c:	cmp	ip, fp
   2c6a0:	beq	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c6a4:	add	r3, pc, #220	; 0xdc
   2c6a8:	ldrd	r2, [r3]
   2c6ac:	cmp	r5, r3
   2c6b0:	cmpeq	r4, r2
   2c6b4:	bhi	2ccc0 <grisu3_diy_fp_encode_double@@Base+0xfbc>
   2c6b8:	add	r7, r6, r7
   2c6bc:	add	r6, r6, #2
   2c6c0:	strd	r2, [sp, #8]
   2c6c4:	add	r1, r7, #1
   2c6c8:	str	fp, [sp, #24]
   2c6cc:	mov	fp, r6
   2c6d0:	str	r0, [sp, #28]
   2c6d4:	b	2c6e8 <grisu3_diy_fp_encode_double@@Base+0x9e4>
   2c6d8:	ldrd	r2, [sp, #8]
   2c6dc:	cmp	r5, r3
   2c6e0:	cmpeq	r4, r2
   2c6e4:	bhi	2cc74 <grisu3_diy_fp_encode_double@@Base+0xf70>
   2c6e8:	lsl	r2, r5, #2
   2c6ec:	mov	r8, fp
   2c6f0:	sub	r0, r1, fp
   2c6f4:	lsl	r3, r4, #2
   2c6f8:	orr	r2, r2, r4, lsr #30
   2c6fc:	adds	r3, r3, r4
   2c700:	adc	r2, r2, r5
   2c704:	adds	r6, r3, r3
   2c708:	adc	r7, r2, r2
   2c70c:	adds	r2, r6, r9
   2c710:	adc	r3, r7, #0
   2c714:	subs	r4, r2, #48	; 0x30
   2c718:	sbc	r5, r3, #0
   2c71c:	cmp	ip, fp
   2c720:	beq	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c724:	ldrb	r9, [fp]
   2c728:	add	fp, fp, #1
   2c72c:	sub	r3, r9, #48	; 0x30
   2c730:	cmp	r3, #9
   2c734:	bls	2c6d8 <grisu3_diy_fp_encode_double@@Base+0x9d4>
   2c738:	ldr	fp, [sp, #24]
   2c73c:	mov	r7, r0
   2c740:	ldr	r0, [sp, #28]
   2c744:	sub	fp, r8, fp
   2c748:	add	sl, sl, fp
   2c74c:	ldrb	r1, [r8]
   2c750:	cmp	r1, #48	; 0x30
   2c754:	bne	2c8f0 <grisu3_diy_fp_encode_double@@Base+0xbec>
   2c758:	sub	r3, r7, r8
   2c75c:	add	r8, r8, #1
   2c760:	b	2c770 <grisu3_diy_fp_encode_double@@Base+0xa6c>
   2c764:	ldrb	r1, [r8], #1
   2c768:	cmp	r1, #48	; 0x30
   2c76c:	bne	2c8f4 <grisu3_diy_fp_encode_double@@Base+0xbf0>
   2c770:	cmp	ip, r8
   2c774:	add	r7, r3, r8
   2c778:	mov	r6, r8
   2c77c:	bne	2c764 <grisu3_diy_fp_encode_double@@Base+0xa60>
   2c780:	b	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c784:	nop	{0}
   2c788:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2c78c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   2c790:	usatle	lr, #2, r0, asr #30
   2c794:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   2c798:	ldmvc	r5!, {r6, sl, fp, pc}
   2c79c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   2c7a0:	addsvs	r3, r1, r0, lsl #26
   2c7a4:	mvnmi	r5, #228, 16	; 0xe40000
   2c7a8:	strbvs	ip, [lr, -r0, lsl #16]
   2c7ac:			; <UNDEFINED> instruction: 0x43abc16d
   2c7b0:	ldrbhi	sl, [r8]
   2c7b4:	cmnmi	r6, #1459617792	; 0x57000000
   2c7b8:	strbcc	r8, [r0, r0]!
   2c7bc:	movtmi	ip, #4985	; 0x1379
   2c7c0:	andeq	r0, r0, r0
   2c7c4:	sbcmi	r8, r3, r0, lsl #16
   2c7c8:	andeq	r0, r0, r0
   2c7cc:	addmi	r4, pc, r0
   2c7d0:	andeq	r0, r0, r0
   2c7d4:	smlawbmi	lr, r0, r4, r8
   2c7d8:	andeq	r0, r0, r0
   2c7dc:	orrsmi	sp, r7, r4, lsl #15
   2c7e0:	andcs	r0, r0, r0
   2c7e4:	andmi	sl, r2, #95	; 0x5f
   2c7e8:	andge	r0, r0, #0
   2c7ec:	rsbmi	r1, sp, #148, 20	; 0x94000
   2c7f0:	cdpne	0, 9, cr0, cr0, cr0, {0}
   2c7f4:	sbcsmi	fp, r6, #196, 24	; 0xc400
   2c7f8:	ldrtcs	r0, [r4], -r0
   2c7fc:	movwmi	r6, #52213	; 0xcbf5
   2c800:	strb	r0, [r0, #-0]
   2c804:	adcmi	r3, r2, #156	; 0x9c
   2c808:	stmda	r0, {}	; <UNPREDICTABLE>
   2c80c:	eorsmi	r4, r7, #7733248	; 0x760000
   2c810:	andeq	r0, r0, r0
   2c814:	bicmi	ip, sp, r5, ror #26
   2c818:	andeq	r0, r0, r0
   2c81c:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   2c820:	andeq	r0, r0, r0
   2c824:	rscsmi	r6, r8, r0, lsl #20
   2c828:	andeq	r0, r0, r0
   2c82c:	subsmi	r0, r9, r0
   2c830:			; <UNDEFINED> instruction: 0x064dd592
   2c834:	strmi	pc, [r0], #207	; 0xcf
   2c838:	andeq	r0, r0, r0
   2c83c:	eormi	r0, r4, r0
   2c840:	sub	r3, ip, r6
   2c844:	cmp	r3, #1
   2c848:	ble	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c84c:	ldrb	r8, [r6, #1]
   2c850:	cmp	r8, #43	; 0x2b
   2c854:	beq	2cc38 <grisu3_diy_fp_encode_double@@Base+0xf34>
   2c858:	cmp	r8, #45	; 0x2d
   2c85c:	beq	2cc5c <grisu3_diy_fp_encode_double@@Base+0xf58>
   2c860:	add	r2, r6, #1
   2c864:	mov	fp, #0
   2c868:	sub	r8, r8, #48	; 0x30
   2c86c:	uxtb	r3, r8
   2c870:	cmp	r3, #9
   2c874:	bhi	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c878:	add	r6, r2, #1
   2c87c:	mov	r3, r8
   2c880:	cmp	ip, r6
   2c884:	beq	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c888:	ldrb	r1, [r2, #1]
   2c88c:	sub	r9, r1, #48	; 0x30
   2c890:	cmp	r9, #9
   2c894:	bhi	2c948 <grisu3_diy_fp_encode_double@@Base+0xc44>
   2c898:	add	r2, r2, #2
   2c89c:	add	r8, r3, r3, lsl #2
   2c8a0:	cmp	r3, #32768	; 0x8000
   2c8a4:	mov	r6, r2
   2c8a8:	addlt	r3, r1, r8, lsl #1
   2c8ac:	sublt	r3, r3, #48	; 0x30
   2c8b0:	cmp	ip, r2
   2c8b4:	beq	2cc50 <grisu3_diy_fp_encode_double@@Base+0xf4c>
   2c8b8:	ldrb	r1, [r2]
   2c8bc:	add	r2, r2, #1
   2c8c0:	sub	r8, r1, #48	; 0x30
   2c8c4:	cmp	r8, #9
   2c8c8:	bls	2c89c <grisu3_diy_fp_encode_double@@Base+0xb98>
   2c8cc:	cmp	fp, #0
   2c8d0:	beq	2c954 <grisu3_diy_fp_encode_double@@Base+0xc50>
   2c8d4:	cmp	ip, r6
   2c8d8:	sub	r7, r7, r3
   2c8dc:	bne	2c434 <grisu3_diy_fp_encode_double@@Base+0x730>
   2c8e0:	b	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c8e4:	mov	r4, #0
   2c8e8:	mov	r5, #0
   2c8ec:	b	2c388 <grisu3_diy_fp_encode_double@@Base+0x684>
   2c8f0:	mov	r6, r8
   2c8f4:	sub	r3, r1, #49	; 0x31
   2c8f8:	cmp	r3, #8
   2c8fc:	bhi	2c424 <grisu3_diy_fp_encode_double@@Base+0x720>
   2c900:	add	r3, r6, #1
   2c904:	cmp	ip, r3
   2c908:	beq	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c90c:	ldrb	r1, [r6, #1]
   2c910:	sub	r2, r1, #48	; 0x30
   2c914:	cmp	r2, #9
   2c918:	bhi	2ccc8 <grisu3_diy_fp_encode_double@@Base+0xfc4>
   2c91c:	add	r3, r6, #2
   2c920:	cmp	r3, ip
   2c924:	mov	r6, r3
   2c928:	beq	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c92c:	ldrb	r1, [r3]
   2c930:	add	r3, r3, #1
   2c934:	sub	r2, r1, #48	; 0x30
   2c938:	cmp	r2, #9
   2c93c:	bls	2c920 <grisu3_diy_fp_encode_double@@Base+0xc1c>
   2c940:	mov	lr, #1
   2c944:	b	2c424 <grisu3_diy_fp_encode_double@@Base+0x720>
   2c948:	cmp	fp, #0
   2c94c:	subne	r7, r7, r8
   2c950:	bne	2c434 <grisu3_diy_fp_encode_double@@Base+0x730>
   2c954:	add	r7, r7, r3
   2c958:	b	2c434 <grisu3_diy_fp_encode_double@@Base+0x730>
   2c95c:	mov	r0, r4
   2c960:	mov	r1, r5
   2c964:	bl	3e4b4 <flatcc_json_printer_clear@@Base+0x390>
   2c968:	sub	r3, r7, sl
   2c96c:	vmov	d7, r0, r1
   2c970:	add	r3, r3, #22
   2c974:	cmp	r3, #44	; 0x2c
   2c978:	addls	pc, pc, r3, lsl #2
   2c97c:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c980:	b	2cc14 <grisu3_diy_fp_encode_double@@Base+0xf10>
   2c984:	b	2cc2c <grisu3_diy_fp_encode_double@@Base+0xf28>
   2c988:	b	2cc20 <grisu3_diy_fp_encode_double@@Base+0xf1c>
   2c98c:	b	2cc08 <grisu3_diy_fp_encode_double@@Base+0xf04>
   2c990:	b	2cbfc <grisu3_diy_fp_encode_double@@Base+0xef8>
   2c994:	b	2cbf0 <grisu3_diy_fp_encode_double@@Base+0xeec>
   2c998:	b	2cbe4 <grisu3_diy_fp_encode_double@@Base+0xee0>
   2c99c:	b	2cbd8 <grisu3_diy_fp_encode_double@@Base+0xed4>
   2c9a0:	b	2cbcc <grisu3_diy_fp_encode_double@@Base+0xec8>
   2c9a4:	b	2cbc0 <grisu3_diy_fp_encode_double@@Base+0xebc>
   2c9a8:	b	2cbb4 <grisu3_diy_fp_encode_double@@Base+0xeb0>
   2c9ac:	b	2cba8 <grisu3_diy_fp_encode_double@@Base+0xea4>
   2c9b0:	b	2cb9c <grisu3_diy_fp_encode_double@@Base+0xe98>
   2c9b4:	b	2cb90 <grisu3_diy_fp_encode_double@@Base+0xe8c>
   2c9b8:	b	2cb84 <grisu3_diy_fp_encode_double@@Base+0xe80>
   2c9bc:	b	2cb78 <grisu3_diy_fp_encode_double@@Base+0xe74>
   2c9c0:	b	2cb6c <grisu3_diy_fp_encode_double@@Base+0xe68>
   2c9c4:	b	2cb60 <grisu3_diy_fp_encode_double@@Base+0xe5c>
   2c9c8:	b	2cb54 <grisu3_diy_fp_encode_double@@Base+0xe50>
   2c9cc:	b	2cb48 <grisu3_diy_fp_encode_double@@Base+0xe44>
   2c9d0:	b	2cb3c <grisu3_diy_fp_encode_double@@Base+0xe38>
   2c9d4:	b	2cb30 <grisu3_diy_fp_encode_double@@Base+0xe2c>
   2c9d8:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c9dc:	b	2cb18 <grisu3_diy_fp_encode_double@@Base+0xe14>
   2c9e0:	b	2cb0c <grisu3_diy_fp_encode_double@@Base+0xe08>
   2c9e4:	b	2cb00 <grisu3_diy_fp_encode_double@@Base+0xdfc>
   2c9e8:	b	2caf4 <grisu3_diy_fp_encode_double@@Base+0xdf0>
   2c9ec:	b	2cae8 <grisu3_diy_fp_encode_double@@Base+0xde4>
   2c9f0:	b	2cadc <grisu3_diy_fp_encode_double@@Base+0xdd8>
   2c9f4:	b	2cad0 <grisu3_diy_fp_encode_double@@Base+0xdcc>
   2c9f8:	b	2cac4 <grisu3_diy_fp_encode_double@@Base+0xdc0>
   2c9fc:	b	2cab8 <grisu3_diy_fp_encode_double@@Base+0xdb4>
   2ca00:	b	2caac <grisu3_diy_fp_encode_double@@Base+0xda8>
   2ca04:	b	2caa0 <grisu3_diy_fp_encode_double@@Base+0xd9c>
   2ca08:	b	2ca94 <grisu3_diy_fp_encode_double@@Base+0xd90>
   2ca0c:	b	2ca88 <grisu3_diy_fp_encode_double@@Base+0xd84>
   2ca10:	b	2ca7c <grisu3_diy_fp_encode_double@@Base+0xd78>
   2ca14:	b	2ca70 <grisu3_diy_fp_encode_double@@Base+0xd6c>
   2ca18:	b	2ca64 <grisu3_diy_fp_encode_double@@Base+0xd60>
   2ca1c:	b	2ca58 <grisu3_diy_fp_encode_double@@Base+0xd54>
   2ca20:	b	2ca4c <grisu3_diy_fp_encode_double@@Base+0xd48>
   2ca24:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xd3c>
   2ca28:	b	2ca34 <grisu3_diy_fp_encode_double@@Base+0xd30>
   2ca2c:	b	2c5a8 <grisu3_diy_fp_encode_double@@Base+0x8a4>
   2ca30:	b	2cb24 <grisu3_diy_fp_encode_double@@Base+0xe20>
   2ca34:	vldr	d6, [pc, #-676]	; 2c798 <grisu3_diy_fp_encode_double@@Base+0xa94>
   2ca38:	vmul.f64	d7, d7, d6
   2ca3c:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2ca40:	vldr	d6, [pc, #-680]	; 2c7a0 <grisu3_diy_fp_encode_double@@Base+0xa9c>
   2ca44:	vmul.f64	d7, d7, d6
   2ca48:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2ca4c:	vldr	d6, [pc, #-684]	; 2c7a8 <grisu3_diy_fp_encode_double@@Base+0xaa4>
   2ca50:	vmul.f64	d7, d7, d6
   2ca54:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2ca58:	vldr	d6, [pc, #-688]	; 2c7b0 <grisu3_diy_fp_encode_double@@Base+0xaac>
   2ca5c:	vmul.f64	d7, d7, d6
   2ca60:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2ca64:	vldr	d6, [pc, #-692]	; 2c7b8 <grisu3_diy_fp_encode_double@@Base+0xab4>
   2ca68:	vmul.f64	d7, d7, d6
   2ca6c:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2ca70:	vldr	d6, [pc, #-640]	; 2c7f8 <grisu3_diy_fp_encode_double@@Base+0xaf4>
   2ca74:	vmul.f64	d7, d7, d6
   2ca78:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2ca7c:	vldr	d6, [pc, #-660]	; 2c7f0 <grisu3_diy_fp_encode_double@@Base+0xaec>
   2ca80:	vmul.f64	d7, d7, d6
   2ca84:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2ca88:	vldr	d6, [pc, #-656]	; 2c800 <grisu3_diy_fp_encode_double@@Base+0xafc>
   2ca8c:	vmul.f64	d7, d7, d6
   2ca90:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2ca94:	vldr	d6, [pc, #-692]	; 2c7e8 <grisu3_diy_fp_encode_double@@Base+0xae4>
   2ca98:	vmul.f64	d7, d7, d6
   2ca9c:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2caa0:	vldr	d6, [pc, #-672]	; 2c808 <grisu3_diy_fp_encode_double@@Base+0xb04>
   2caa4:	vmul.f64	d7, d7, d6
   2caa8:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2caac:	vldr	d6, [pc, #-724]	; 2c7e0 <grisu3_diy_fp_encode_double@@Base+0xadc>
   2cab0:	vmul.f64	d7, d7, d6
   2cab4:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cab8:	vldr	d6, [pc, #-688]	; 2c810 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   2cabc:	vmul.f64	d7, d7, d6
   2cac0:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cac4:	vldr	d6, [pc, #-756]	; 2c7d8 <grisu3_diy_fp_encode_double@@Base+0xad4>
   2cac8:	vmul.f64	d7, d7, d6
   2cacc:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cad0:	vldr	d6, [pc, #-704]	; 2c818 <grisu3_diy_fp_encode_double@@Base+0xb14>
   2cad4:	vmul.f64	d7, d7, d6
   2cad8:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cadc:	vldr	d6, [pc, #-788]	; 2c7d0 <grisu3_diy_fp_encode_double@@Base+0xacc>
   2cae0:	vmul.f64	d7, d7, d6
   2cae4:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cae8:	vldr	d6, [pc, #-720]	; 2c820 <grisu3_diy_fp_encode_double@@Base+0xb1c>
   2caec:	vmul.f64	d7, d7, d6
   2caf0:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2caf4:	vldr	d6, [pc, #-828]	; 2c7c0 <grisu3_diy_fp_encode_double@@Base+0xabc>
   2caf8:	vmul.f64	d7, d7, d6
   2cafc:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cb00:	vldr	d6, [pc, #-832]	; 2c7c8 <grisu3_diy_fp_encode_double@@Base+0xac4>
   2cb04:	vmul.f64	d7, d7, d6
   2cb08:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cb0c:	vldr	d6, [pc, #-748]	; 2c828 <grisu3_diy_fp_encode_double@@Base+0xb24>
   2cb10:	vmul.f64	d7, d7, d6
   2cb14:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cb18:	vldr	d6, [pc, #-744]	; 2c838 <grisu3_diy_fp_encode_double@@Base+0xb34>
   2cb1c:	vmul.f64	d7, d7, d6
   2cb20:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cb24:	vldr	d6, [pc, #-764]	; 2c830 <grisu3_diy_fp_encode_double@@Base+0xb2c>
   2cb28:	vmul.f64	d7, d7, d6
   2cb2c:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cb30:	vldr	d6, [pc, #-768]	; 2c838 <grisu3_diy_fp_encode_double@@Base+0xb34>
   2cb34:	vdiv.f64	d7, d7, d6
   2cb38:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cb3c:	vldr	d6, [pc, #-796]	; 2c828 <grisu3_diy_fp_encode_double@@Base+0xb24>
   2cb40:	vdiv.f64	d7, d7, d6
   2cb44:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cb48:	vldr	d6, [pc, #-904]	; 2c7c8 <grisu3_diy_fp_encode_double@@Base+0xac4>
   2cb4c:	vdiv.f64	d7, d7, d6
   2cb50:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cb54:	vldr	d6, [pc, #-924]	; 2c7c0 <grisu3_diy_fp_encode_double@@Base+0xabc>
   2cb58:	vdiv.f64	d7, d7, d6
   2cb5c:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cb60:	vldr	d6, [pc, #-840]	; 2c820 <grisu3_diy_fp_encode_double@@Base+0xb1c>
   2cb64:	vdiv.f64	d7, d7, d6
   2cb68:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cb6c:	vldr	d6, [pc, #-932]	; 2c7d0 <grisu3_diy_fp_encode_double@@Base+0xacc>
   2cb70:	vdiv.f64	d7, d7, d6
   2cb74:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cb78:	vldr	d6, [pc, #-872]	; 2c818 <grisu3_diy_fp_encode_double@@Base+0xb14>
   2cb7c:	vdiv.f64	d7, d7, d6
   2cb80:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cb84:	vldr	d6, [pc, #-948]	; 2c7d8 <grisu3_diy_fp_encode_double@@Base+0xad4>
   2cb88:	vdiv.f64	d7, d7, d6
   2cb8c:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cb90:	vldr	d6, [pc, #-904]	; 2c810 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   2cb94:	vdiv.f64	d7, d7, d6
   2cb98:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cb9c:	vldr	d6, [pc, #-964]	; 2c7e0 <grisu3_diy_fp_encode_double@@Base+0xadc>
   2cba0:	vdiv.f64	d7, d7, d6
   2cba4:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cba8:	vldr	d6, [pc, #-936]	; 2c808 <grisu3_diy_fp_encode_double@@Base+0xb04>
   2cbac:	vdiv.f64	d7, d7, d6
   2cbb0:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cbb4:	vldr	d6, [pc, #-980]	; 2c7e8 <grisu3_diy_fp_encode_double@@Base+0xae4>
   2cbb8:	vdiv.f64	d7, d7, d6
   2cbbc:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cbc0:	vldr	d6, [pc, #-968]	; 2c800 <grisu3_diy_fp_encode_double@@Base+0xafc>
   2cbc4:	vdiv.f64	d7, d7, d6
   2cbc8:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cbcc:	vldr	d6, [pc, #-996]	; 2c7f0 <grisu3_diy_fp_encode_double@@Base+0xaec>
   2cbd0:	vdiv.f64	d7, d7, d6
   2cbd4:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cbd8:	vldr	d6, [pc, #-1000]	; 2c7f8 <grisu3_diy_fp_encode_double@@Base+0xaf4>
   2cbdc:	vdiv.f64	d7, d7, d6
   2cbe0:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cbe4:	vldr	d6, [pc, #244]	; 2cce0 <grisu3_diy_fp_encode_double@@Base+0xfdc>
   2cbe8:	vdiv.f64	d7, d7, d6
   2cbec:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cbf0:	vldr	d6, [pc, #240]	; 2cce8 <grisu3_diy_fp_encode_double@@Base+0xfe4>
   2cbf4:	vdiv.f64	d7, d7, d6
   2cbf8:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cbfc:	vldr	d6, [pc, #236]	; 2ccf0 <grisu3_diy_fp_encode_double@@Base+0xfec>
   2cc00:	vdiv.f64	d7, d7, d6
   2cc04:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cc08:	vldr	d6, [pc, #232]	; 2ccf8 <grisu3_diy_fp_encode_double@@Base+0xff4>
   2cc0c:	vdiv.f64	d7, d7, d6
   2cc10:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cc14:	vldr	d6, [pc, #228]	; 2cd00 <grisu3_diy_fp_encode_double@@Base+0xffc>
   2cc18:	vdiv.f64	d7, d7, d6
   2cc1c:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cc20:	vldr	d6, [pc, #224]	; 2cd08 <grisu3_diy_fp_encode_double@@Base+0x1004>
   2cc24:	vdiv.f64	d7, d7, d6
   2cc28:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cc2c:	vldr	d6, [pc, #220]	; 2cd10 <grisu3_diy_fp_encode_double@@Base+0x100c>
   2cc30:	vdiv.f64	d7, d7, d6
   2cc34:	b	2c5b0 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2cc38:	add	r2, r6, #2
   2cc3c:	cmp	ip, r2
   2cc40:	beq	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2cc44:	ldrb	r8, [r6, #2]
   2cc48:	mov	fp, #0
   2cc4c:	b	2c868 <grisu3_diy_fp_encode_double@@Base+0xb64>
   2cc50:	cmp	fp, #0
   2cc54:	bne	2c8d4 <grisu3_diy_fp_encode_double@@Base+0xbd0>
   2cc58:	b	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2cc5c:	add	r2, r6, #2
   2cc60:	cmp	ip, r2
   2cc64:	beq	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2cc68:	ldrb	r8, [r6, #2]
   2cc6c:	mov	fp, #1
   2cc70:	b	2c868 <grisu3_diy_fp_encode_double@@Base+0xb64>
   2cc74:	ldr	fp, [sp, #24]
   2cc78:	mov	r7, r0
   2cc7c:	ldr	r0, [sp, #28]
   2cc80:	sub	fp, r8, fp
   2cc84:	add	sl, sl, fp
   2cc88:	cmp	lr, #0
   2cc8c:	bne	2c74c <grisu3_diy_fp_encode_double@@Base+0xa48>
   2cc90:	cmp	r9, #52	; 0x34
   2cc94:	movls	r9, #0
   2cc98:	movhi	r9, #1
   2cc9c:	adds	r4, r4, r9
   2cca0:	adc	r5, r5, #0
   2cca4:	cmp	ip, r8
   2cca8:	movne	lr, #1
   2ccac:	bne	2c74c <grisu3_diy_fp_encode_double@@Base+0xa48>
   2ccb0:	b	2c548 <grisu3_diy_fp_encode_double@@Base+0x844>
   2ccb4:	mov	r7, lr
   2ccb8:	mov	r6, r3
   2ccbc:	b	2c658 <grisu3_diy_fp_encode_double@@Base+0x954>
   2ccc0:	mov	r8, fp
   2ccc4:	b	2cc88 <grisu3_diy_fp_encode_double@@Base+0xf84>
   2ccc8:	mov	r6, r3
   2cccc:	b	2c940 <grisu3_diy_fp_encode_double@@Base+0xc3c>
   2ccd0:	mov	r6, r7
   2ccd4:	mov	r7, #0
   2ccd8:	b	2c410 <grisu3_diy_fp_encode_double@@Base+0x70c>
   2ccdc:	nop	{0}
   2cce0:	strbcc	r8, [r0, r0]!
   2cce4:	movtmi	ip, #4985	; 0x1379
   2cce8:	ldrbhi	sl, [r8]
   2ccec:	cmnmi	r6, #1459617792	; 0x57000000
   2ccf0:	strbvs	ip, [lr, -r0, lsl #16]
   2ccf4:			; <UNDEFINED> instruction: 0x43abc16d
   2ccf8:	addsvs	r3, r1, r0, lsl #26
   2ccfc:	mvnmi	r5, #228, 16	; 0xe40000
   2cd00:			; <UNDEFINED> instruction: 0x064dd592
   2cd04:	strmi	pc, [r0], #207	; 0xcf
   2cd08:	ldmvc	r5!, {r6, sl, fp, pc}
   2cd0c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   2cd10:	usatle	lr, #2, r0, asr #30
   2cd14:	strbmi	r1, [fp], #-2788	; 0xfffff51c

0002cd18 <flatcc_json_parser_error_string@@Base>:
   2cd18:	cmp	r0, #34	; 0x22
   2cd1c:	addls	pc, pc, r0, lsl #2
   2cd20:	b	2cf54 <flatcc_json_parser_error_string@@Base+0x23c>
   2cd24:	b	2cdb0 <flatcc_json_parser_error_string@@Base+0x98>
   2cd28:	b	2cf48 <flatcc_json_parser_error_string@@Base+0x230>
   2cd2c:	b	2cf3c <flatcc_json_parser_error_string@@Base+0x224>
   2cd30:	b	2cf30 <flatcc_json_parser_error_string@@Base+0x218>
   2cd34:	b	2cf24 <flatcc_json_parser_error_string@@Base+0x20c>
   2cd38:	b	2cf18 <flatcc_json_parser_error_string@@Base+0x200>
   2cd3c:	b	2cf0c <flatcc_json_parser_error_string@@Base+0x1f4>
   2cd40:	b	2cf00 <flatcc_json_parser_error_string@@Base+0x1e8>
   2cd44:	b	2cef4 <flatcc_json_parser_error_string@@Base+0x1dc>
   2cd48:	b	2cee8 <flatcc_json_parser_error_string@@Base+0x1d0>
   2cd4c:	b	2cedc <flatcc_json_parser_error_string@@Base+0x1c4>
   2cd50:	b	2ced0 <flatcc_json_parser_error_string@@Base+0x1b8>
   2cd54:	b	2cec4 <flatcc_json_parser_error_string@@Base+0x1ac>
   2cd58:	b	2ceb8 <flatcc_json_parser_error_string@@Base+0x1a0>
   2cd5c:	b	2ceac <flatcc_json_parser_error_string@@Base+0x194>
   2cd60:	b	2cea0 <flatcc_json_parser_error_string@@Base+0x188>
   2cd64:	b	2ce94 <flatcc_json_parser_error_string@@Base+0x17c>
   2cd68:	b	2ce88 <flatcc_json_parser_error_string@@Base+0x170>
   2cd6c:	b	2ce7c <flatcc_json_parser_error_string@@Base+0x164>
   2cd70:	b	2ce70 <flatcc_json_parser_error_string@@Base+0x158>
   2cd74:	b	2ce64 <flatcc_json_parser_error_string@@Base+0x14c>
   2cd78:	b	2ce58 <flatcc_json_parser_error_string@@Base+0x140>
   2cd7c:	b	2ce4c <flatcc_json_parser_error_string@@Base+0x134>
   2cd80:	b	2ce40 <flatcc_json_parser_error_string@@Base+0x128>
   2cd84:	b	2ce34 <flatcc_json_parser_error_string@@Base+0x11c>
   2cd88:	b	2ce28 <flatcc_json_parser_error_string@@Base+0x110>
   2cd8c:	b	2ce1c <flatcc_json_parser_error_string@@Base+0x104>
   2cd90:	b	2ce10 <flatcc_json_parser_error_string@@Base+0xf8>
   2cd94:	b	2ce04 <flatcc_json_parser_error_string@@Base+0xec>
   2cd98:	b	2cdf8 <flatcc_json_parser_error_string@@Base+0xe0>
   2cd9c:	b	2cdec <flatcc_json_parser_error_string@@Base+0xd4>
   2cda0:	b	2cde0 <flatcc_json_parser_error_string@@Base+0xc8>
   2cda4:	b	2cdd4 <flatcc_json_parser_error_string@@Base+0xbc>
   2cda8:	b	2cdc8 <flatcc_json_parser_error_string@@Base+0xb0>
   2cdac:	b	2cdbc <flatcc_json_parser_error_string@@Base+0xa4>
   2cdb0:	ldr	r0, [pc, #424]	; 2cf60 <flatcc_json_parser_error_string@@Base+0x248>
   2cdb4:	add	r0, pc, r0
   2cdb8:	bx	lr
   2cdbc:	ldr	r0, [pc, #416]	; 2cf64 <flatcc_json_parser_error_string@@Base+0x24c>
   2cdc0:	add	r0, pc, r0
   2cdc4:	bx	lr
   2cdc8:	ldr	r0, [pc, #408]	; 2cf68 <flatcc_json_parser_error_string@@Base+0x250>
   2cdcc:	add	r0, pc, r0
   2cdd0:	bx	lr
   2cdd4:	ldr	r0, [pc, #400]	; 2cf6c <flatcc_json_parser_error_string@@Base+0x254>
   2cdd8:	add	r0, pc, r0
   2cddc:	bx	lr
   2cde0:	ldr	r0, [pc, #392]	; 2cf70 <flatcc_json_parser_error_string@@Base+0x258>
   2cde4:	add	r0, pc, r0
   2cde8:	bx	lr
   2cdec:	ldr	r0, [pc, #384]	; 2cf74 <flatcc_json_parser_error_string@@Base+0x25c>
   2cdf0:	add	r0, pc, r0
   2cdf4:	bx	lr
   2cdf8:	ldr	r0, [pc, #376]	; 2cf78 <flatcc_json_parser_error_string@@Base+0x260>
   2cdfc:	add	r0, pc, r0
   2ce00:	bx	lr
   2ce04:	ldr	r0, [pc, #368]	; 2cf7c <flatcc_json_parser_error_string@@Base+0x264>
   2ce08:	add	r0, pc, r0
   2ce0c:	bx	lr
   2ce10:	ldr	r0, [pc, #360]	; 2cf80 <flatcc_json_parser_error_string@@Base+0x268>
   2ce14:	add	r0, pc, r0
   2ce18:	bx	lr
   2ce1c:	ldr	r0, [pc, #352]	; 2cf84 <flatcc_json_parser_error_string@@Base+0x26c>
   2ce20:	add	r0, pc, r0
   2ce24:	bx	lr
   2ce28:	ldr	r0, [pc, #344]	; 2cf88 <flatcc_json_parser_error_string@@Base+0x270>
   2ce2c:	add	r0, pc, r0
   2ce30:	bx	lr
   2ce34:	ldr	r0, [pc, #336]	; 2cf8c <flatcc_json_parser_error_string@@Base+0x274>
   2ce38:	add	r0, pc, r0
   2ce3c:	bx	lr
   2ce40:	ldr	r0, [pc, #328]	; 2cf90 <flatcc_json_parser_error_string@@Base+0x278>
   2ce44:	add	r0, pc, r0
   2ce48:	bx	lr
   2ce4c:	ldr	r0, [pc, #320]	; 2cf94 <flatcc_json_parser_error_string@@Base+0x27c>
   2ce50:	add	r0, pc, r0
   2ce54:	bx	lr
   2ce58:	ldr	r0, [pc, #312]	; 2cf98 <flatcc_json_parser_error_string@@Base+0x280>
   2ce5c:	add	r0, pc, r0
   2ce60:	bx	lr
   2ce64:	ldr	r0, [pc, #304]	; 2cf9c <flatcc_json_parser_error_string@@Base+0x284>
   2ce68:	add	r0, pc, r0
   2ce6c:	bx	lr
   2ce70:	ldr	r0, [pc, #296]	; 2cfa0 <flatcc_json_parser_error_string@@Base+0x288>
   2ce74:	add	r0, pc, r0
   2ce78:	bx	lr
   2ce7c:	ldr	r0, [pc, #288]	; 2cfa4 <flatcc_json_parser_error_string@@Base+0x28c>
   2ce80:	add	r0, pc, r0
   2ce84:	bx	lr
   2ce88:	ldr	r0, [pc, #280]	; 2cfa8 <flatcc_json_parser_error_string@@Base+0x290>
   2ce8c:	add	r0, pc, r0
   2ce90:	bx	lr
   2ce94:	ldr	r0, [pc, #272]	; 2cfac <flatcc_json_parser_error_string@@Base+0x294>
   2ce98:	add	r0, pc, r0
   2ce9c:	bx	lr
   2cea0:	ldr	r0, [pc, #264]	; 2cfb0 <flatcc_json_parser_error_string@@Base+0x298>
   2cea4:	add	r0, pc, r0
   2cea8:	bx	lr
   2ceac:	ldr	r0, [pc, #256]	; 2cfb4 <flatcc_json_parser_error_string@@Base+0x29c>
   2ceb0:	add	r0, pc, r0
   2ceb4:	bx	lr
   2ceb8:	ldr	r0, [pc, #248]	; 2cfb8 <flatcc_json_parser_error_string@@Base+0x2a0>
   2cebc:	add	r0, pc, r0
   2cec0:	bx	lr
   2cec4:	ldr	r0, [pc, #240]	; 2cfbc <flatcc_json_parser_error_string@@Base+0x2a4>
   2cec8:	add	r0, pc, r0
   2cecc:	bx	lr
   2ced0:	ldr	r0, [pc, #232]	; 2cfc0 <flatcc_json_parser_error_string@@Base+0x2a8>
   2ced4:	add	r0, pc, r0
   2ced8:	bx	lr
   2cedc:	ldr	r0, [pc, #224]	; 2cfc4 <flatcc_json_parser_error_string@@Base+0x2ac>
   2cee0:	add	r0, pc, r0
   2cee4:	bx	lr
   2cee8:	ldr	r0, [pc, #216]	; 2cfc8 <flatcc_json_parser_error_string@@Base+0x2b0>
   2ceec:	add	r0, pc, r0
   2cef0:	bx	lr
   2cef4:	ldr	r0, [pc, #208]	; 2cfcc <flatcc_json_parser_error_string@@Base+0x2b4>
   2cef8:	add	r0, pc, r0
   2cefc:	bx	lr
   2cf00:	ldr	r0, [pc, #200]	; 2cfd0 <flatcc_json_parser_error_string@@Base+0x2b8>
   2cf04:	add	r0, pc, r0
   2cf08:	bx	lr
   2cf0c:	ldr	r0, [pc, #192]	; 2cfd4 <flatcc_json_parser_error_string@@Base+0x2bc>
   2cf10:	add	r0, pc, r0
   2cf14:	bx	lr
   2cf18:	ldr	r0, [pc, #184]	; 2cfd8 <flatcc_json_parser_error_string@@Base+0x2c0>
   2cf1c:	add	r0, pc, r0
   2cf20:	bx	lr
   2cf24:	ldr	r0, [pc, #176]	; 2cfdc <flatcc_json_parser_error_string@@Base+0x2c4>
   2cf28:	add	r0, pc, r0
   2cf2c:	bx	lr
   2cf30:	ldr	r0, [pc, #168]	; 2cfe0 <flatcc_json_parser_error_string@@Base+0x2c8>
   2cf34:	add	r0, pc, r0
   2cf38:	bx	lr
   2cf3c:	ldr	r0, [pc, #160]	; 2cfe4 <flatcc_json_parser_error_string@@Base+0x2cc>
   2cf40:	add	r0, pc, r0
   2cf44:	bx	lr
   2cf48:	ldr	r0, [pc, #152]	; 2cfe8 <flatcc_json_parser_error_string@@Base+0x2d0>
   2cf4c:	add	r0, pc, r0
   2cf50:	bx	lr
   2cf54:	ldr	r0, [pc, #144]	; 2cfec <flatcc_json_parser_error_string@@Base+0x2d4>
   2cf58:	add	r0, pc, r0
   2cf5c:	bx	lr
   2cf60:	andeq	r6, r1, ip, lsr #11
   2cf64:	andeq	r6, r1, r0, lsl #20
   2cf68:	andeq	r7, r1, r4, lsl r6
   2cf6c:	andeq	r7, r1, ip, ror #11
   2cf70:	andeq	r7, r1, r8, asr #11
   2cf74:	muleq	r1, ip, r5
   2cf78:	muleq	r1, r8, r5
   2cf7c:	andeq	r7, r1, r8, ror #10
   2cf80:	andeq	r7, r1, r0, asr #10
   2cf84:	andeq	r7, r1, r4, lsl r5
   2cf88:	andeq	r7, r1, r8, ror #9
   2cf8c:	andeq	r7, r1, r8, asr #9
   2cf90:	muleq	r1, r8, r4
   2cf94:	andeq	r7, r1, ip, ror r4
   2cf98:	andeq	r7, r1, r0, ror #8
   2cf9c:	andeq	r7, r1, r0, asr #8
   2cfa0:	andeq	r7, r1, r4, lsr #8
   2cfa4:	andeq	r7, r1, r8, lsl #8
   2cfa8:	andeq	r7, r1, r8, ror #7
   2cfac:	andeq	r7, r1, ip, asr #7
   2cfb0:	andeq	r7, r1, ip, lsr #7
   2cfb4:	andeq	r7, r1, r4, lsl #7
   2cfb8:	andeq	r7, r1, r8, ror #6
   2cfbc:	andeq	r7, r1, r8, asr #6
   2cfc0:	andeq	r7, r1, ip, lsr #6
   2cfc4:	andeq	r7, r1, ip, lsl #6
   2cfc8:	andeq	r7, r1, ip, ror #5
   2cfcc:	ldrdeq	r7, [r1], -r4
   2cfd0:	andeq	r6, r1, r4, lsl #16
   2cfd4:	andeq	r7, r1, ip, lsr #5
   2cfd8:	andeq	r7, r1, r8, lsl #5
   2cfdc:	andeq	r7, r1, ip, ror #4
   2cfe0:	andeq	r7, r1, r0, asr r2
   2cfe4:	andeq	r7, r1, r4, lsr r2
   2cfe8:	andeq	r7, r1, r4, lsr #9
   2cfec:	andeq	r6, r1, r0, lsl #8

0002cff0 <flatcc_json_parser_set_error@@Base>:
   2cff0:	ldr	ip, [r0, #24]
   2cff4:	cmp	ip, #0
   2cff8:	bne	2d014 <flatcc_json_parser_set_error@@Base+0x24>
   2cffc:	ldr	ip, [r0, #4]
   2d000:	str	r3, [r0, #24]
   2d004:	str	r1, [r0, #36]	; 0x24
   2d008:	sub	r1, r1, ip
   2d00c:	add	r1, r1, #1
   2d010:	str	r1, [r0, #20]
   2d014:	mov	r0, r2
   2d018:	bx	lr

0002d01c <flatcc_json_parser_string_part@@Base>:
   2d01c:	cmp	r1, r2
   2d020:	beq	2d0c0 <flatcc_json_parser_string_part@@Base+0xa4>
   2d024:	ldrb	ip, [r1]
   2d028:	cmp	ip, #34	; 0x22
   2d02c:	cmpne	ip, #31
   2d030:	movhi	r3, #1
   2d034:	movls	r3, #0
   2d038:	cmp	ip, #92	; 0x5c
   2d03c:	moveq	r3, #0
   2d040:	andne	r3, r3, #1
   2d044:	cmp	r3, #0
   2d048:	beq	2d0cc <flatcc_json_parser_string_part@@Base+0xb0>
   2d04c:	add	r3, r1, #1
   2d050:	cmp	r3, r2
   2d054:	mov	r1, r3
   2d058:	beq	2d0c4 <flatcc_json_parser_string_part@@Base+0xa8>
   2d05c:	push	{lr}		; (str lr, [sp, #-4]!)
   2d060:	b	2d070 <flatcc_json_parser_string_part@@Base+0x54>
   2d064:	cmp	r3, r2
   2d068:	mov	r1, r3
   2d06c:	beq	2d0b4 <flatcc_json_parser_string_part@@Base+0x98>
   2d070:	ldrb	ip, [r3], #1
   2d074:	cmp	ip, #34	; 0x22
   2d078:	cmpne	ip, #31
   2d07c:	movhi	lr, #1
   2d080:	movls	lr, #0
   2d084:	cmp	ip, #92	; 0x5c
   2d088:	moveq	lr, #0
   2d08c:	andne	lr, lr, #1
   2d090:	cmp	lr, #0
   2d094:	bne	2d064 <flatcc_json_parser_string_part@@Base+0x48>
   2d098:	cmp	ip, #31
   2d09c:	bls	2d0a8 <flatcc_json_parser_string_part@@Base+0x8c>
   2d0a0:	mov	r0, r1
   2d0a4:	pop	{pc}		; (ldr pc, [sp], #4)
   2d0a8:	mov	r3, #17
   2d0ac:	pop	{lr}		; (ldr lr, [sp], #4)
   2d0b0:	b	2cff0 <flatcc_json_parser_set_error@@Base>
   2d0b4:	mov	r3, #20
   2d0b8:	pop	{lr}		; (ldr lr, [sp], #4)
   2d0bc:	b	2cff0 <flatcc_json_parser_set_error@@Base>
   2d0c0:	mov	r1, r2
   2d0c4:	mov	r3, #20
   2d0c8:	b	2cff0 <flatcc_json_parser_set_error@@Base>
   2d0cc:	cmp	ip, #31
   2d0d0:	bls	2d0dc <flatcc_json_parser_string_part@@Base+0xc0>
   2d0d4:	mov	r0, r1
   2d0d8:	bx	lr
   2d0dc:	mov	r3, #17
   2d0e0:	b	2cff0 <flatcc_json_parser_set_error@@Base>

0002d0e4 <flatcc_json_parser_space_ext@@Base>:
   2d0e4:	cmp	r1, r2
   2d0e8:	beq	2d118 <flatcc_json_parser_space_ext@@Base+0x34>
   2d0ec:	ldrb	ip, [r1]
   2d0f0:	cmp	ip, #32
   2d0f4:	bne	2d120 <flatcc_json_parser_space_ext@@Base+0x3c>
   2d0f8:	add	r3, r1, #1
   2d0fc:	b	2d10c <flatcc_json_parser_space_ext@@Base+0x28>
   2d100:	ldrb	ip, [r3], #1
   2d104:	cmp	ip, #32
   2d108:	bne	2d120 <flatcc_json_parser_space_ext@@Base+0x3c>
   2d10c:	cmp	r2, r3
   2d110:	mov	r1, r3
   2d114:	bne	2d100 <flatcc_json_parser_space_ext@@Base+0x1c>
   2d118:	mov	r0, r1
   2d11c:	bx	lr
   2d120:	cmp	ip, #32
   2d124:	bhi	2d118 <flatcc_json_parser_space_ext@@Base+0x34>
   2d128:	sub	ip, ip, #9
   2d12c:	cmp	ip, #23
   2d130:	addls	pc, pc, ip, lsl #2
   2d134:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d138:	b	2d1e8 <flatcc_json_parser_space_ext@@Base+0x104>
   2d13c:	b	2d1e0 <flatcc_json_parser_space_ext@@Base+0xfc>
   2d140:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d144:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d148:	b	2d198 <flatcc_json_parser_space_ext@@Base+0xb4>
   2d14c:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d150:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d154:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d158:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d15c:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d160:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d164:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d168:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d16c:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d170:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d174:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d178:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d17c:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d180:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d184:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d188:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d18c:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d190:	b	2d1f0 <flatcc_json_parser_space_ext@@Base+0x10c>
   2d194:	b	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2d198:	sub	r3, r2, r1
   2d19c:	add	ip, r1, #1
   2d1a0:	cmp	r3, #1
   2d1a4:	ble	2d1b4 <flatcc_json_parser_space_ext@@Base+0xd0>
   2d1a8:	ldrb	r3, [r1, #1]
   2d1ac:	cmp	r3, #10
   2d1b0:	addeq	ip, r1, #2
   2d1b4:	mov	r1, ip
   2d1b8:	ldr	r3, [r0, #16]
   2d1bc:	str	r1, [r0, #4]
   2d1c0:	add	r3, r3, #1
   2d1c4:	str	r3, [r0, #16]
   2d1c8:	cmp	r2, r1
   2d1cc:	beq	2d118 <flatcc_json_parser_space_ext@@Base+0x34>
   2d1d0:	ldrb	ip, [r1]
   2d1d4:	cmp	ip, #32
   2d1d8:	bls	2d128 <flatcc_json_parser_space_ext@@Base+0x44>
   2d1dc:	b	2d118 <flatcc_json_parser_space_ext@@Base+0x34>
   2d1e0:	add	r1, r1, #1
   2d1e4:	b	2d1b8 <flatcc_json_parser_space_ext@@Base+0xd4>
   2d1e8:	add	r1, r1, #1
   2d1ec:	b	2d1c8 <flatcc_json_parser_space_ext@@Base+0xe4>
   2d1f0:	mov	r3, #5
   2d1f4:	b	2cff0 <flatcc_json_parser_set_error@@Base>
   2d1f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2d1fc:	mov	ip, #0
   2d200:	cmp	r1, r2
   2d204:	strd	r6, [sp, #8]
   2d208:	mov	r4, r1
   2d20c:	mov	r6, r2
   2d210:	strd	r8, [sp, #16]
   2d214:	mov	r9, r0
   2d218:	strd	sl, [sp, #24]
   2d21c:	str	lr, [sp, #32]
   2d220:	sub	sp, sp, #44	; 0x2c
   2d224:	str	r3, [sp, #12]
   2d228:	ldr	r3, [sp, #80]	; 0x50
   2d22c:	strb	ip, [r3]
   2d230:	beq	2d370 <flatcc_json_parser_space_ext@@Base+0x28c>
   2d234:	ldrb	r3, [r1]
   2d238:	cmp	r3, #34	; 0x22
   2d23c:	addeq	r4, r1, #1
   2d240:	streq	ip, [r0, #12]
   2d244:	beq	2d380 <flatcc_json_parser_space_ext@@Base+0x29c>
   2d248:	cmp	r3, #46	; 0x2e
   2d24c:	movne	r3, #1
   2d250:	strne	r3, [r0, #12]
   2d254:	beq	2d34c <flatcc_json_parser_space_ext@@Base+0x268>
   2d258:	mov	r3, #0
   2d25c:	add	fp, sp, #24
   2d260:	add	sl, sp, #28
   2d264:	str	r3, [sp, #16]
   2d268:	add	r3, sp, #32
   2d26c:	str	r3, [sp, #20]
   2d270:	ldr	r8, [sp, #12]
   2d274:	mov	r7, r4
   2d278:	mov	r1, r4
   2d27c:	ldr	r4, [sp, #20]
   2d280:	ldr	r5, [r8]
   2d284:	b	2d2a0 <flatcc_json_parser_space_ext@@Base+0x1bc>
   2d288:	cmp	r7, r0
   2d28c:	mov	r7, r0
   2d290:	bne	2d2e4 <flatcc_json_parser_space_ext@@Base+0x200>
   2d294:	ldr	r5, [r8, #4]!
   2d298:	cmp	r5, #0
   2d29c:	beq	2d334 <flatcc_json_parser_space_ext@@Base+0x250>
   2d2a0:	mov	r3, fp
   2d2a4:	mov	r2, r6
   2d2a8:	stm	sp, {r4, sl}
   2d2ac:	mov	r0, r9
   2d2b0:	blx	r5
   2d2b4:	cmp	r6, r0
   2d2b8:	mov	r1, r0
   2d2bc:	bne	2d288 <flatcc_json_parser_space_ext@@Base+0x1a4>
   2d2c0:	mov	r4, r0
   2d2c4:	mov	r0, r4
   2d2c8:	add	sp, sp, #44	; 0x2c
   2d2cc:	ldrd	r4, [sp]
   2d2d0:	ldrd	r6, [sp, #8]
   2d2d4:	ldrd	r8, [sp, #16]
   2d2d8:	ldrd	sl, [sp, #24]
   2d2dc:	add	sp, sp, #32
   2d2e0:	pop	{pc}		; (ldr pc, [sp], #4)
   2d2e4:	ldr	r3, [sp, #24]
   2d2e8:	mov	r4, r0
   2d2ec:	cmp	r3, #0
   2d2f0:	bne	2d3c4 <flatcc_json_parser_space_ext@@Base+0x2e0>
   2d2f4:	ldrd	r2, [sp, #32]
   2d2f8:	cmp	r3, #0
   2d2fc:	cmpeq	r2, #255	; 0xff
   2d300:	uxtbls	r3, r2
   2d304:	strls	r3, [sp, #16]
   2d308:	bhi	2d3e8 <flatcc_json_parser_space_ext@@Base+0x304>
   2d30c:	ldr	r1, [sp, #16]
   2d310:	ldr	r3, [sp, #80]	; 0x50
   2d314:	ldr	r2, [sp, #28]
   2d318:	ldrb	r3, [r3]
   2d31c:	cmp	r2, #0
   2d320:	ldr	r2, [sp, #80]	; 0x50
   2d324:	add	r3, r1, r3
   2d328:	strb	r3, [r2]
   2d32c:	bne	2d270 <flatcc_json_parser_space_ext@@Base+0x18c>
   2d330:	b	2d2c4 <flatcc_json_parser_space_ext@@Base+0x1e0>
   2d334:	mov	r2, r6
   2d338:	mov	r0, r9
   2d33c:	mov	r3, #23
   2d340:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2d344:	mov	r4, r0
   2d348:	b	2d2c4 <flatcc_json_parser_space_ext@@Base+0x1e0>
   2d34c:	mov	r3, #5
   2d350:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2d354:	ldr	r3, [r9, #12]
   2d358:	mov	r4, r0
   2d35c:	cmp	r3, #0
   2d360:	beq	2d380 <flatcc_json_parser_space_ext@@Base+0x29c>
   2d364:	cmp	r6, r4
   2d368:	bne	2d258 <flatcc_json_parser_space_ext@@Base+0x174>
   2d36c:	b	2d2c4 <flatcc_json_parser_space_ext@@Base+0x1e0>
   2d370:	ldr	r3, [r0, #12]
   2d374:	cmp	r3, #0
   2d378:	bne	2d2c4 <flatcc_json_parser_space_ext@@Base+0x1e0>
   2d37c:	mov	r4, r6
   2d380:	sub	r3, r6, r4
   2d384:	cmp	r3, #1
   2d388:	ble	2d3ac <flatcc_json_parser_space_ext@@Base+0x2c8>
   2d38c:	ldrb	r3, [r4]
   2d390:	cmp	r3, #32
   2d394:	bhi	2d364 <flatcc_json_parser_space_ext@@Base+0x280>
   2d398:	bne	2d3ac <flatcc_json_parser_space_ext@@Base+0x2c8>
   2d39c:	ldrb	r3, [r4, #1]
   2d3a0:	cmp	r3, #32
   2d3a4:	addhi	r4, r4, #1
   2d3a8:	bhi	2d364 <flatcc_json_parser_space_ext@@Base+0x280>
   2d3ac:	mov	r1, r4
   2d3b0:	mov	r2, r6
   2d3b4:	mov	r0, r9
   2d3b8:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2d3bc:	mov	r4, r0
   2d3c0:	b	2d364 <flatcc_json_parser_space_ext@@Base+0x280>
   2d3c4:	mov	r3, #8
   2d3c8:	mov	r2, r6
   2d3cc:	mov	r1, r4
   2d3d0:	mov	r0, r9
   2d3d4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2d3d8:	cmp	r6, r0
   2d3dc:	bne	2d30c <flatcc_json_parser_space_ext@@Base+0x228>
   2d3e0:	mov	r4, r6
   2d3e4:	b	2d2c4 <flatcc_json_parser_space_ext@@Base+0x1e0>
   2d3e8:	mov	r3, #7
   2d3ec:	mov	r2, r6
   2d3f0:	mov	r1, r4
   2d3f4:	mov	r0, r9
   2d3f8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2d3fc:	b	2d3d8 <flatcc_json_parser_space_ext@@Base+0x2f4>
   2d400:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2d404:	mov	ip, #0
   2d408:	mov	r4, r1
   2d40c:	strd	r6, [sp, #8]
   2d410:	mov	r6, r0
   2d414:	mov	r5, r2
   2d418:	strd	r8, [sp, #16]
   2d41c:	mov	r9, r3
   2d420:	strd	sl, [sp, #24]
   2d424:	str	lr, [sp, #32]
   2d428:	sub	sp, sp, #28
   2d42c:	ldrh	r0, [sp, #68]	; 0x44
   2d430:	ldr	r8, [sp, #64]	; 0x40
   2d434:	str	r0, [sp, #12]
   2d438:	ldr	r0, [r6]
   2d43c:	str	ip, [sp, #20]
   2d440:	bl	27658 <flatcc_builder_start_offset_vector@@Base>
   2d444:	cmp	r0, #0
   2d448:	beq	2d484 <flatcc_json_parser_space_ext@@Base+0x3a0>
   2d44c:	mov	r1, r4
   2d450:	mov	r2, r5
   2d454:	mov	r0, r6
   2d458:	mov	r3, #33	; 0x21
   2d45c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2d460:	mov	r4, r0
   2d464:	mov	r0, r4
   2d468:	add	sp, sp, #28
   2d46c:	ldrd	r4, [sp]
   2d470:	ldrd	r6, [sp, #8]
   2d474:	ldrd	r8, [sp, #16]
   2d478:	ldrd	sl, [sp, #24]
   2d47c:	add	sp, sp, #32
   2d480:	pop	{pc}		; (ldr pc, [sp], #4)
   2d484:	cmp	r4, r5
   2d488:	beq	2d498 <flatcc_json_parser_space_ext@@Base+0x3b4>
   2d48c:	ldrb	r3, [r4]
   2d490:	cmp	r3, #91	; 0x5b
   2d494:	beq	2d51c <flatcc_json_parser_space_ext@@Base+0x438>
   2d498:	mov	r1, r4
   2d49c:	mov	r3, #22
   2d4a0:	mov	r2, r5
   2d4a4:	mov	r0, r6
   2d4a8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2d4ac:	mov	r4, r0
   2d4b0:	mov	r7, #0
   2d4b4:	cmp	r8, r7
   2d4b8:	beq	2d4d8 <flatcc_json_parser_space_ext@@Base+0x3f4>
   2d4bc:	mov	r1, r4
   2d4c0:	mov	r2, r5
   2d4c4:	mov	r0, r6
   2d4c8:	mov	r3, #30
   2d4cc:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2d4d0:	mov	r4, r0
   2d4d4:	b	2d464 <flatcc_json_parser_space_ext@@Base+0x380>
   2d4d8:	mov	r1, r9
   2d4dc:	ldr	r0, [r6]
   2d4e0:	bl	26348 <flatcc_builder_get_user_frame_ptr@@Base>
   2d4e4:	mov	r1, r0
   2d4e8:	ldr	r0, [r6]
   2d4ec:	bl	2883c <flatcc_builder_end_offset_vector_for_unions@@Base>
   2d4f0:	cmp	r0, #0
   2d4f4:	str	r0, [sp, #20]
   2d4f8:	beq	2d44c <flatcc_json_parser_space_ext@@Base+0x368>
   2d4fc:	ldr	r0, [r6]
   2d500:	ldr	r1, [sp, #12]
   2d504:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   2d508:	cmp	r0, #0
   2d50c:	beq	2d44c <flatcc_json_parser_space_ext@@Base+0x368>
   2d510:	ldr	r3, [sp, #20]
   2d514:	str	r3, [r0]
   2d518:	b	2d464 <flatcc_json_parser_space_ext@@Base+0x380>
   2d51c:	add	sl, r4, #1
   2d520:	sub	r3, r5, sl
   2d524:	cmp	r3, #1
   2d528:	ble	2d53c <flatcc_json_parser_space_ext@@Base+0x458>
   2d52c:	ldrb	r3, [r4, #1]
   2d530:	cmp	r3, #32
   2d534:	bhi	2d550 <flatcc_json_parser_space_ext@@Base+0x46c>
   2d538:	beq	2d760 <flatcc_json_parser_space_ext@@Base+0x67c>
   2d53c:	mov	r1, sl
   2d540:	mov	r2, r5
   2d544:	mov	r0, r6
   2d548:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2d54c:	mov	sl, r0
   2d550:	cmp	r5, sl
   2d554:	beq	2d564 <flatcc_json_parser_space_ext@@Base+0x480>
   2d558:	ldrb	r3, [sl]
   2d55c:	cmp	r3, #93	; 0x5d
   2d560:	beq	2d788 <flatcc_json_parser_space_ext@@Base+0x6a4>
   2d564:	cmp	r8, #0
   2d568:	beq	2d6d8 <flatcc_json_parser_space_ext@@Base+0x5f4>
   2d56c:	mov	r7, #0
   2d570:	add	fp, sp, #20
   2d574:	mov	r1, r9
   2d578:	ldr	r0, [r6]
   2d57c:	bl	26348 <flatcc_builder_get_user_frame_ptr@@Base>
   2d580:	ldrb	r3, [r0, r7]
   2d584:	mov	r1, sl
   2d588:	mov	r2, r5
   2d58c:	mov	r0, r6
   2d590:	str	fp, [sp]
   2d594:	ldr	ip, [sp, #72]	; 0x48
   2d598:	blx	ip
   2d59c:	cmp	r5, r0
   2d5a0:	mov	r4, r0
   2d5a4:	beq	2d464 <flatcc_json_parser_space_ext@@Base+0x380>
   2d5a8:	mov	r1, #1
   2d5ac:	ldr	r0, [r6]
   2d5b0:	bl	26f1c <flatcc_builder_extend_offset_vector@@Base>
   2d5b4:	cmp	r0, #0
   2d5b8:	beq	2d44c <flatcc_json_parser_space_ext@@Base+0x368>
   2d5bc:	ldr	r3, [sp, #20]
   2d5c0:	sub	r2, r5, r4
   2d5c4:	cmp	r2, #1
   2d5c8:	str	r3, [r0]
   2d5cc:	ble	2d5e0 <flatcc_json_parser_space_ext@@Base+0x4fc>
   2d5d0:	ldrb	r3, [r4]
   2d5d4:	cmp	r3, #32
   2d5d8:	bhi	2d600 <flatcc_json_parser_space_ext@@Base+0x51c>
   2d5dc:	beq	2d670 <flatcc_json_parser_space_ext@@Base+0x58c>
   2d5e0:	mov	r1, r4
   2d5e4:	mov	r2, r5
   2d5e8:	mov	r0, r6
   2d5ec:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2d5f0:	mov	r4, r0
   2d5f4:	cmp	r5, r4
   2d5f8:	beq	2d668 <flatcc_json_parser_space_ext@@Base+0x584>
   2d5fc:	ldrb	r3, [r4]
   2d600:	cmp	r3, #44	; 0x2c
   2d604:	beq	2d684 <flatcc_json_parser_space_ext@@Base+0x5a0>
   2d608:	cmp	r3, #93	; 0x5d
   2d60c:	add	r7, r7, #1
   2d610:	beq	2d630 <flatcc_json_parser_space_ext@@Base+0x54c>
   2d614:	mov	r1, r4
   2d618:	mov	r3, #9
   2d61c:	mov	r2, r5
   2d620:	mov	r0, r6
   2d624:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2d628:	mov	r4, r0
   2d62c:	b	2d4b4 <flatcc_json_parser_space_ext@@Base+0x3d0>
   2d630:	add	r1, r4, #1
   2d634:	sub	r3, r5, r1
   2d638:	cmp	r3, #1
   2d63c:	ble	2d654 <flatcc_json_parser_space_ext@@Base+0x570>
   2d640:	ldrb	r3, [r4, #1]
   2d644:	cmp	r3, #32
   2d648:	movhi	r4, r1
   2d64c:	bhi	2d4b4 <flatcc_json_parser_space_ext@@Base+0x3d0>
   2d650:	beq	2d6f4 <flatcc_json_parser_space_ext@@Base+0x610>
   2d654:	mov	r2, r5
   2d658:	mov	r0, r6
   2d65c:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2d660:	mov	r4, r0
   2d664:	b	2d4b4 <flatcc_json_parser_space_ext@@Base+0x3d0>
   2d668:	add	r7, r7, #1
   2d66c:	b	2d4b4 <flatcc_json_parser_space_ext@@Base+0x3d0>
   2d670:	ldrb	r3, [r4, #1]
   2d674:	cmp	r3, #32
   2d678:	addhi	r4, r4, #1
   2d67c:	bls	2d5e0 <flatcc_json_parser_space_ext@@Base+0x4fc>
   2d680:	b	2d5f4 <flatcc_json_parser_space_ext@@Base+0x510>
   2d684:	add	sl, r4, #1
   2d688:	sub	r3, r5, sl
   2d68c:	cmp	r3, #1
   2d690:	ble	2d6a4 <flatcc_json_parser_space_ext@@Base+0x5c0>
   2d694:	ldrb	r3, [r4, #1]
   2d698:	cmp	r3, #32
   2d69c:	bhi	2d6b8 <flatcc_json_parser_space_ext@@Base+0x5d4>
   2d6a0:	beq	2d708 <flatcc_json_parser_space_ext@@Base+0x624>
   2d6a4:	mov	r1, sl
   2d6a8:	mov	r2, r5
   2d6ac:	mov	r0, r6
   2d6b0:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2d6b4:	mov	sl, r0
   2d6b8:	cmp	r5, sl
   2d6bc:	add	r7, r7, #1
   2d6c0:	beq	2d744 <flatcc_json_parser_space_ext@@Base+0x660>
   2d6c4:	ldrb	r3, [sl]
   2d6c8:	cmp	r3, #93	; 0x5d
   2d6cc:	beq	2d71c <flatcc_json_parser_space_ext@@Base+0x638>
   2d6d0:	cmp	r8, r7
   2d6d4:	bne	2d574 <flatcc_json_parser_space_ext@@Base+0x490>
   2d6d8:	mov	r2, r5
   2d6dc:	mov	r1, sl
   2d6e0:	mov	r0, r6
   2d6e4:	mov	r3, #30
   2d6e8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2d6ec:	mov	r4, r0
   2d6f0:	b	2d464 <flatcc_json_parser_space_ext@@Base+0x380>
   2d6f4:	ldrb	r3, [r4, #2]
   2d6f8:	cmp	r3, #32
   2d6fc:	addhi	r4, r4, #2
   2d700:	bls	2d654 <flatcc_json_parser_space_ext@@Base+0x570>
   2d704:	b	2d4b4 <flatcc_json_parser_space_ext@@Base+0x3d0>
   2d708:	ldrb	r3, [r4, #2]
   2d70c:	cmp	r3, #32
   2d710:	addhi	sl, r4, #2
   2d714:	bls	2d6a4 <flatcc_json_parser_space_ext@@Base+0x5c0>
   2d718:	b	2d6b8 <flatcc_json_parser_space_ext@@Base+0x5d4>
   2d71c:	add	r4, sl, #1
   2d720:	sub	r3, r5, r4
   2d724:	cmp	r3, #1
   2d728:	ble	2d73c <flatcc_json_parser_space_ext@@Base+0x658>
   2d72c:	ldrb	r3, [sl, #1]
   2d730:	cmp	r3, #32
   2d734:	bhi	2d4b4 <flatcc_json_parser_space_ext@@Base+0x3d0>
   2d738:	beq	2d774 <flatcc_json_parser_space_ext@@Base+0x690>
   2d73c:	mov	r1, r4
   2d740:	b	2d654 <flatcc_json_parser_space_ext@@Base+0x570>
   2d744:	mov	r3, #9
   2d748:	mov	r2, r5
   2d74c:	mov	r1, r5
   2d750:	mov	r0, r6
   2d754:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2d758:	mov	r4, r0
   2d75c:	b	2d4b4 <flatcc_json_parser_space_ext@@Base+0x3d0>
   2d760:	ldrb	r3, [r4, #2]
   2d764:	cmp	r3, #32
   2d768:	addhi	sl, r4, #2
   2d76c:	bls	2d53c <flatcc_json_parser_space_ext@@Base+0x458>
   2d770:	b	2d550 <flatcc_json_parser_space_ext@@Base+0x46c>
   2d774:	ldrb	r3, [sl, #2]
   2d778:	cmp	r3, #32
   2d77c:	addhi	r4, sl, #2
   2d780:	bls	2d73c <flatcc_json_parser_space_ext@@Base+0x658>
   2d784:	b	2d4b4 <flatcc_json_parser_space_ext@@Base+0x3d0>
   2d788:	add	r4, sl, #1
   2d78c:	sub	r3, r5, r4
   2d790:	cmp	r3, #1
   2d794:	ble	2d7ac <flatcc_json_parser_space_ext@@Base+0x6c8>
   2d798:	ldrb	r3, [sl, #1]
   2d79c:	cmp	r3, #32
   2d7a0:	movhi	r7, #0
   2d7a4:	bhi	2d4b4 <flatcc_json_parser_space_ext@@Base+0x3d0>
   2d7a8:	beq	2d7c8 <flatcc_json_parser_space_ext@@Base+0x6e4>
   2d7ac:	mov	r1, r4
   2d7b0:	mov	r2, r5
   2d7b4:	mov	r0, r6
   2d7b8:	mov	r7, #0
   2d7bc:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2d7c0:	mov	r4, r0
   2d7c4:	b	2d4b4 <flatcc_json_parser_space_ext@@Base+0x3d0>
   2d7c8:	ldrb	r3, [sl, #2]
   2d7cc:	cmp	r3, #32
   2d7d0:	addhi	r4, sl, #2
   2d7d4:	movhi	r7, #0
   2d7d8:	bls	2d7ac <flatcc_json_parser_space_ext@@Base+0x6c8>
   2d7dc:	b	2d4b4 <flatcc_json_parser_space_ext@@Base+0x3d0>

0002d7e0 <flatcc_json_parser_string_escape@@Base>:
   2d7e0:	strd	r4, [sp, #-12]!
   2d7e4:	str	lr, [sp, #8]
   2d7e8:	sub	lr, r2, r1
   2d7ec:	cmp	lr, #1
   2d7f0:	ble	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d7f4:	ldrb	ip, [r1]
   2d7f8:	cmp	ip, #92	; 0x5c
   2d7fc:	beq	2d81c <flatcc_json_parser_string_escape@@Base+0x3c>
   2d800:	mov	ip, #0
   2d804:	strb	ip, [r3]
   2d808:	mov	r3, #18
   2d80c:	ldrd	r4, [sp]
   2d810:	ldr	lr, [sp, #8]
   2d814:	add	sp, sp, #12
   2d818:	b	2cff0 <flatcc_json_parser_set_error@@Base>
   2d81c:	ldrb	ip, [r1, #1]
   2d820:	sub	ip, ip, #34	; 0x22
   2d824:	cmp	ip, #86	; 0x56
   2d828:	addls	pc, pc, ip, lsl #2
   2d82c:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d830:	b	2da1c <flatcc_json_parser_string_escape@@Base+0x23c>
   2d834:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d838:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d83c:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d840:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d844:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d848:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d84c:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d850:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d854:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d858:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d85c:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d860:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d864:	b	2da34 <flatcc_json_parser_string_escape@@Base+0x254>
   2d868:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d86c:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d870:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d874:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d878:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d87c:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d880:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d884:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d888:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d88c:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d890:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d894:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d898:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d89c:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8a0:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8a4:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8a8:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8ac:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8b0:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8b4:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8b8:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8bc:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8c0:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8c4:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8c8:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8cc:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8d0:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8d4:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8d8:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8dc:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8e0:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8e4:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8e8:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8ec:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8f0:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8f4:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8f8:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d8fc:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d900:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d904:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d908:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d90c:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d910:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d914:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d918:	b	2da4c <flatcc_json_parser_string_escape@@Base+0x26c>
   2d91c:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d920:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d924:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d928:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d92c:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d930:	b	2da64 <flatcc_json_parser_string_escape@@Base+0x284>
   2d934:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d938:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d93c:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d940:	b	2da7c <flatcc_json_parser_string_escape@@Base+0x29c>
   2d944:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d948:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d94c:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d950:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d954:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d958:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d95c:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d960:	b	2da94 <flatcc_json_parser_string_escape@@Base+0x2b4>
   2d964:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d968:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d96c:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d970:	b	2daac <flatcc_json_parser_string_escape@@Base+0x2cc>
   2d974:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d978:	b	2dac4 <flatcc_json_parser_string_escape@@Base+0x2e4>
   2d97c:	b	2dadc <flatcc_json_parser_string_escape@@Base+0x2fc>
   2d980:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d984:	b	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d988:	b	2d98c <flatcc_json_parser_string_escape@@Base+0x1ac>
   2d98c:	mov	ip, #1
   2d990:	cmp	lr, #3
   2d994:	strb	ip, [r3]
   2d998:	ble	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d99c:	ldrb	ip, [r1, #2]
   2d9a0:	sub	lr, ip, #48	; 0x30
   2d9a4:	uxtb	r4, lr
   2d9a8:	cmp	r4, #9
   2d9ac:	lslls	ip, lr, #4
   2d9b0:	uxtbls	ip, ip
   2d9b4:	bls	2d9d4 <flatcc_json_parser_string_escape@@Base+0x1f4>
   2d9b8:	orr	ip, ip, #32
   2d9bc:	sub	lr, ip, #97	; 0x61
   2d9c0:	cmp	lr, #5
   2d9c4:	bhi	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d9c8:	sub	ip, ip, #87	; 0x57
   2d9cc:	lsl	ip, ip, #4
   2d9d0:	uxtb	ip, ip
   2d9d4:	ldrb	lr, [r1, #3]
   2d9d8:	sub	r4, lr, #48	; 0x30
   2d9dc:	uxtb	r4, r4
   2d9e0:	cmp	r4, #9
   2d9e4:	orrls	ip, r4, ip
   2d9e8:	bls	2da08 <flatcc_json_parser_string_escape@@Base+0x228>
   2d9ec:	orr	lr, lr, #32
   2d9f0:	sub	r4, lr, #97	; 0x61
   2d9f4:	cmp	r4, #5
   2d9f8:	bhi	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2d9fc:	sub	lr, lr, #87	; 0x57
   2da00:	orr	ip, lr, ip
   2da04:	uxtb	ip, ip
   2da08:	add	r0, r1, #4
   2da0c:	strb	ip, [r3, #1]
   2da10:	ldrd	r4, [sp]
   2da14:	add	sp, sp, #8
   2da18:	pop	{pc}		; (ldr pc, [sp], #4)
   2da1c:	mov	ip, #1
   2da20:	mov	r2, #34	; 0x22
   2da24:	add	r0, r1, #2
   2da28:	strb	ip, [r3]
   2da2c:	strb	r2, [r3, #1]
   2da30:	b	2da10 <flatcc_json_parser_string_escape@@Base+0x230>
   2da34:	mov	ip, #1
   2da38:	mov	r2, #47	; 0x2f
   2da3c:	add	r0, r1, #2
   2da40:	strb	ip, [r3]
   2da44:	strb	r2, [r3, #1]
   2da48:	b	2da10 <flatcc_json_parser_string_escape@@Base+0x230>
   2da4c:	mov	ip, #1
   2da50:	mov	r2, #92	; 0x5c
   2da54:	add	r0, r1, #2
   2da58:	strb	ip, [r3]
   2da5c:	strb	r2, [r3, #1]
   2da60:	b	2da10 <flatcc_json_parser_string_escape@@Base+0x230>
   2da64:	mov	ip, #1
   2da68:	mov	r2, #8
   2da6c:	add	r0, r1, #2
   2da70:	strb	ip, [r3]
   2da74:	strb	r2, [r3, #1]
   2da78:	b	2da10 <flatcc_json_parser_string_escape@@Base+0x230>
   2da7c:	mov	ip, #1
   2da80:	mov	r2, #12
   2da84:	add	r0, r1, #2
   2da88:	strb	ip, [r3]
   2da8c:	strb	r2, [r3, #1]
   2da90:	b	2da10 <flatcc_json_parser_string_escape@@Base+0x230>
   2da94:	mov	ip, #1
   2da98:	mov	r2, #10
   2da9c:	add	r0, r1, #2
   2daa0:	strb	ip, [r3]
   2daa4:	strb	r2, [r3, #1]
   2daa8:	b	2da10 <flatcc_json_parser_string_escape@@Base+0x230>
   2daac:	mov	ip, #1
   2dab0:	mov	r2, #13
   2dab4:	add	r0, r1, #2
   2dab8:	strb	ip, [r3]
   2dabc:	strb	r2, [r3, #1]
   2dac0:	b	2da10 <flatcc_json_parser_string_escape@@Base+0x230>
   2dac4:	mov	ip, #1
   2dac8:	mov	r2, #9
   2dacc:	add	r0, r1, #2
   2dad0:	strb	ip, [r3]
   2dad4:	strb	r2, [r3, #1]
   2dad8:	b	2da10 <flatcc_json_parser_string_escape@@Base+0x230>
   2dadc:	cmp	lr, #5
   2dae0:	ble	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2dae4:	ldrb	ip, [r1, #2]
   2dae8:	sub	lr, ip, #48	; 0x30
   2daec:	uxtb	r4, lr
   2daf0:	cmp	r4, #9
   2daf4:	lslls	ip, lr, #12
   2daf8:	uxthls	ip, ip
   2dafc:	bls	2db1c <flatcc_json_parser_string_escape@@Base+0x33c>
   2db00:	orr	ip, ip, #32
   2db04:	sub	lr, ip, #97	; 0x61
   2db08:	cmp	lr, #5
   2db0c:	bhi	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2db10:	sub	ip, ip, #87	; 0x57
   2db14:	lsl	ip, ip, #12
   2db18:	and	ip, ip, #61440	; 0xf000
   2db1c:	ldrb	lr, [r1, #3]
   2db20:	sub	r4, lr, #48	; 0x30
   2db24:	uxtb	r5, r4
   2db28:	cmp	r5, #9
   2db2c:	bhi	2dbb0 <flatcc_json_parser_string_escape@@Base+0x3d0>
   2db30:	uxth	r4, r4
   2db34:	orr	ip, ip, r4, lsl #8
   2db38:	and	ip, ip, #65280	; 0xff00
   2db3c:	ldrb	lr, [r1, #4]
   2db40:	sub	r4, lr, #48	; 0x30
   2db44:	uxtb	r5, r4
   2db48:	cmp	r5, #9
   2db4c:	bhi	2dbd4 <flatcc_json_parser_string_escape@@Base+0x3f4>
   2db50:	uxth	r4, r4
   2db54:	orr	ip, ip, r4, lsl #4
   2db58:	uxth	ip, ip
   2db5c:	ldrb	lr, [r1, #5]
   2db60:	sub	r4, lr, #48	; 0x30
   2db64:	uxtb	r5, r4
   2db68:	cmp	r5, #9
   2db6c:	orrls	r2, ip, r4
   2db70:	uxthls	r2, r2
   2db74:	bls	2db94 <flatcc_json_parser_string_escape@@Base+0x3b4>
   2db78:	orr	lr, lr, #32
   2db7c:	sub	r4, lr, #97	; 0x61
   2db80:	cmp	r4, #5
   2db84:	bhi	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2db88:	sub	r2, lr, #87	; 0x57
   2db8c:	orr	r2, ip, r2
   2db90:	uxth	r2, r2
   2db94:	cmp	r2, #127	; 0x7f
   2db98:	bhi	2dbf8 <flatcc_json_parser_string_escape@@Base+0x418>
   2db9c:	mov	r0, #1
   2dba0:	strb	r0, [r3]
   2dba4:	strb	r2, [r3, #1]
   2dba8:	add	r0, r1, #6
   2dbac:	b	2da10 <flatcc_json_parser_string_escape@@Base+0x230>
   2dbb0:	orr	lr, lr, #32
   2dbb4:	sub	r4, lr, #97	; 0x61
   2dbb8:	cmp	r4, #5
   2dbbc:	bhi	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2dbc0:	sub	lr, lr, #87	; 0x57
   2dbc4:	uxth	lr, lr
   2dbc8:	orr	ip, ip, lr, lsl #8
   2dbcc:	and	ip, ip, #65280	; 0xff00
   2dbd0:	b	2db3c <flatcc_json_parser_string_escape@@Base+0x35c>
   2dbd4:	orr	lr, lr, #32
   2dbd8:	sub	r4, lr, #97	; 0x61
   2dbdc:	cmp	r4, #5
   2dbe0:	bhi	2d800 <flatcc_json_parser_string_escape@@Base+0x20>
   2dbe4:	sub	lr, lr, #87	; 0x57
   2dbe8:	uxth	lr, lr
   2dbec:	orr	ip, ip, lr, lsl #4
   2dbf0:	uxth	ip, ip
   2dbf4:	b	2db5c <flatcc_json_parser_string_escape@@Base+0x37c>
   2dbf8:	and	r0, r2, #63	; 0x3f
   2dbfc:	cmp	r2, #2048	; 0x800
   2dc00:	lsr	ip, r2, #6
   2dc04:	orr	r0, r0, #128	; 0x80
   2dc08:	mvn	lr, #127	; 0x7f
   2dc0c:	bcs	2dc2c <flatcc_json_parser_string_escape@@Base+0x44c>
   2dc10:	mvn	ip, ip, lsl #26
   2dc14:	mov	r2, #2
   2dc18:	mvn	ip, ip, lsr #26
   2dc1c:	strb	r2, [r3]
   2dc20:	strb	r0, [r3, #2]
   2dc24:	strb	ip, [r3, #1]
   2dc28:	b	2dba8 <flatcc_json_parser_string_escape@@Base+0x3c8>
   2dc2c:	mvn	r4, #31
   2dc30:	and	ip, ip, #63	; 0x3f
   2dc34:	strb	r0, [r3, #3]
   2dc38:	orr	r2, r4, r2, lsr #12
   2dc3c:	orr	ip, lr, ip
   2dc40:	mov	r0, #3
   2dc44:	strb	r0, [r3]
   2dc48:	strb	r2, [r3, #1]
   2dc4c:	strb	ip, [r3, #2]
   2dc50:	b	2dba8 <flatcc_json_parser_string_escape@@Base+0x3c8>

0002dc54 <flatcc_json_parser_skip_constant@@Base>:
   2dc54:	cmp	r1, r2
   2dc58:	strd	r4, [sp, #-16]!
   2dc5c:	mov	r4, r1
   2dc60:	str	r6, [sp, #8]
   2dc64:	str	lr, [sp, #12]
   2dc68:	beq	2dcf8 <flatcc_json_parser_skip_constant@@Base+0xa4>
   2dc6c:	mov	r5, r2
   2dc70:	mov	r6, r0
   2dc74:	b	2dcd4 <flatcc_json_parser_skip_constant@@Base+0x80>
   2dc78:	sub	r2, r3, #48	; 0x30
   2dc7c:	cmp	r3, #46	; 0x2e
   2dc80:	cmpne	r2, #9
   2dc84:	bls	2dcec <flatcc_json_parser_skip_constant@@Base+0x98>
   2dc88:	orr	r2, r3, #32
   2dc8c:	sub	r2, r2, #97	; 0x61
   2dc90:	cmp	r2, #25
   2dc94:	bls	2dcec <flatcc_json_parser_skip_constant@@Base+0x98>
   2dc98:	sub	r2, r5, r4
   2dc9c:	cmp	r2, #1
   2dca0:	ble	2dcb0 <flatcc_json_parser_skip_constant@@Base+0x5c>
   2dca4:	cmp	r3, #32
   2dca8:	bhi	2dcf8 <flatcc_json_parser_skip_constant@@Base+0xa4>
   2dcac:	beq	2dd0c <flatcc_json_parser_skip_constant@@Base+0xb8>
   2dcb0:	mov	r2, r5
   2dcb4:	mov	r1, r4
   2dcb8:	mov	r0, r6
   2dcbc:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2dcc0:	cmp	r0, r4
   2dcc4:	beq	2dcf8 <flatcc_json_parser_skip_constant@@Base+0xa4>
   2dcc8:	mov	r4, r0
   2dccc:	cmp	r5, r4
   2dcd0:	beq	2dcf8 <flatcc_json_parser_skip_constant@@Base+0xa4>
   2dcd4:	ldrb	r3, [r4]
   2dcd8:	sub	r2, r3, #95	; 0x5f
   2dcdc:	clz	r2, r2
   2dce0:	lsr	r2, r2, #5
   2dce4:	orrs	r2, r2, r3, lsr #7
   2dce8:	beq	2dc78 <flatcc_json_parser_skip_constant@@Base+0x24>
   2dcec:	add	r4, r4, #1
   2dcf0:	cmp	r5, r4
   2dcf4:	bne	2dcd4 <flatcc_json_parser_skip_constant@@Base+0x80>
   2dcf8:	mov	r0, r4
   2dcfc:	ldrd	r4, [sp]
   2dd00:	ldr	r6, [sp, #8]
   2dd04:	add	sp, sp, #12
   2dd08:	pop	{pc}		; (ldr pc, [sp], #4)
   2dd0c:	ldrb	r3, [r4, #1]
   2dd10:	cmp	r3, #32
   2dd14:	addhi	r0, r4, #1
   2dd18:	bls	2dcb0 <flatcc_json_parser_skip_constant@@Base+0x5c>
   2dd1c:	b	2dcc0 <flatcc_json_parser_skip_constant@@Base+0x6c>

0002dd20 <flatcc_json_parser_match_constant@@Base>:
   2dd20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2dd24:	ldr	r5, [sp, #24]
   2dd28:	strd	r6, [sp, #8]
   2dd2c:	str	lr, [sp, #20]
   2dd30:	sub	lr, r2, r1
   2dd34:	cmp	lr, r3
   2dd38:	str	r8, [sp, #16]
   2dd3c:	movle	r3, #0
   2dd40:	movle	r0, r1
   2dd44:	strle	r3, [r5]
   2dd48:	ble	2dd8c <flatcc_json_parser_match_constant@@Base+0x6c>
   2dd4c:	ldr	ip, [r0, #12]
   2dd50:	mov	r6, r2
   2dd54:	mov	lr, r0
   2dd58:	mov	r7, r1
   2dd5c:	add	r4, r1, r3
   2dd60:	cmp	ip, #0
   2dd64:	bne	2dda0 <flatcc_json_parser_match_constant@@Base+0x80>
   2dd68:	ldrb	r3, [r1, r3]
   2dd6c:	cmp	r3, #32
   2dd70:	beq	2de5c <flatcc_json_parser_match_constant@@Base+0x13c>
   2dd74:	cmp	r3, #34	; 0x22
   2dd78:	beq	2deb4 <flatcc_json_parser_match_constant@@Base+0x194>
   2dd7c:	cmp	r3, #92	; 0x5c
   2dd80:	beq	2de24 <flatcc_json_parser_match_constant@@Base+0x104>
   2dd84:	mov	r0, r1
   2dd88:	str	ip, [r5]
   2dd8c:	ldrd	r4, [sp]
   2dd90:	ldrd	r6, [sp, #8]
   2dd94:	ldr	r8, [sp, #16]
   2dd98:	add	sp, sp, #20
   2dd9c:	pop	{pc}		; (ldr pc, [sp], #4)
   2dda0:	sub	r2, r2, r4
   2dda4:	cmp	r2, #1
   2dda8:	ble	2ddbc <flatcc_json_parser_match_constant@@Base+0x9c>
   2ddac:	ldrb	r3, [r1, r3]
   2ddb0:	cmp	r3, #32
   2ddb4:	bhi	2def0 <flatcc_json_parser_match_constant@@Base+0x1d0>
   2ddb8:	beq	2df14 <flatcc_json_parser_match_constant@@Base+0x1f4>
   2ddbc:	mov	r0, lr
   2ddc0:	mov	r2, r6
   2ddc4:	mov	r1, r4
   2ddc8:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2ddcc:	cmp	r6, r0
   2ddd0:	beq	2de50 <flatcc_json_parser_match_constant@@Base+0x130>
   2ddd4:	cmp	r4, r0
   2ddd8:	beq	2de04 <flatcc_json_parser_match_constant@@Base+0xe4>
   2dddc:	ldrb	r3, [r0]
   2dde0:	sub	r2, r3, #95	; 0x5f
   2dde4:	clz	r2, r2
   2dde8:	lsr	r2, r2, #5
   2ddec:	orrs	r2, r2, r3, lsr #7
   2ddf0:	bne	2dee4 <flatcc_json_parser_match_constant@@Base+0x1c4>
   2ddf4:	orr	r3, r3, #32
   2ddf8:	sub	r3, r3, #97	; 0x61
   2ddfc:	cmp	r3, #25
   2de00:	bls	2dee4 <flatcc_json_parser_match_constant@@Base+0x1c4>
   2de04:	mov	r3, #0
   2de08:	str	r3, [r5]
   2de0c:	ldrb	r3, [r0]
   2de10:	and	r2, r3, #223	; 0xdf
   2de14:	cmp	r3, #44	; 0x2c
   2de18:	cmpne	r2, #93	; 0x5d
   2de1c:	movne	r0, r7
   2de20:	b	2dd8c <flatcc_json_parser_match_constant@@Base+0x6c>
   2de24:	mov	r1, r4
   2de28:	mov	r3, #18
   2de2c:	ldrd	r6, [sp, #8]
   2de30:	ldr	r8, [sp, #16]
   2de34:	ldr	lr, [sp, #20]
   2de38:	str	ip, [r5]
   2de3c:	ldrd	r4, [sp]
   2de40:	add	sp, sp, #24
   2de44:	b	2cff0 <flatcc_json_parser_set_error@@Base>
   2de48:	mov	r4, r2
   2de4c:	mov	r0, r4
   2de50:	mov	r3, #0
   2de54:	str	r3, [r5]
   2de58:	b	2dd8c <flatcc_json_parser_match_constant@@Base+0x6c>
   2de5c:	add	r3, r4, #1
   2de60:	cmp	r2, r3
   2de64:	beq	2de48 <flatcc_json_parser_match_constant@@Base+0x128>
   2de68:	ldrb	r1, [r4, #1]
   2de6c:	cmp	r1, #32
   2de70:	bne	2de98 <flatcc_json_parser_match_constant@@Base+0x178>
   2de74:	add	r3, r4, #2
   2de78:	b	2de88 <flatcc_json_parser_match_constant@@Base+0x168>
   2de7c:	ldrb	r1, [r3], #1
   2de80:	cmp	r1, #32
   2de84:	bne	2de9c <flatcc_json_parser_match_constant@@Base+0x17c>
   2de88:	cmp	r3, r6
   2de8c:	mov	r4, r3
   2de90:	bne	2de7c <flatcc_json_parser_match_constant@@Base+0x15c>
   2de94:	b	2de4c <flatcc_json_parser_match_constant@@Base+0x12c>
   2de98:	mov	r4, r3
   2de9c:	cmp	r1, #34	; 0x22
   2dea0:	beq	2deb4 <flatcc_json_parser_match_constant@@Base+0x194>
   2dea4:	mov	r3, #1
   2dea8:	mov	r0, r4
   2deac:	str	r3, [r5]
   2deb0:	b	2dd8c <flatcc_json_parser_match_constant@@Base+0x6c>
   2deb4:	add	r0, r4, #1
   2deb8:	cmn	r0, #1
   2debc:	bge	2ded0 <flatcc_json_parser_match_constant@@Base+0x1b0>
   2dec0:	ldrb	r3, [r4, #1]
   2dec4:	cmp	r3, #32
   2dec8:	bhi	2de50 <flatcc_json_parser_match_constant@@Base+0x130>
   2decc:	beq	2df00 <flatcc_json_parser_match_constant@@Base+0x1e0>
   2ded0:	mov	r1, r0
   2ded4:	mov	r2, #0
   2ded8:	mov	r0, lr
   2dedc:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2dee0:	b	2de50 <flatcc_json_parser_match_constant@@Base+0x130>
   2dee4:	mov	r3, #1
   2dee8:	str	r3, [r5]
   2deec:	b	2dd8c <flatcc_json_parser_match_constant@@Base+0x6c>
   2def0:	cmp	r4, r6
   2def4:	mov	r0, r4
   2def8:	bne	2de04 <flatcc_json_parser_match_constant@@Base+0xe4>
   2defc:	b	2de50 <flatcc_json_parser_match_constant@@Base+0x130>
   2df00:	ldrb	r3, [r4, #2]
   2df04:	cmp	r3, #32
   2df08:	addhi	r0, r4, #2
   2df0c:	bls	2ded0 <flatcc_json_parser_match_constant@@Base+0x1b0>
   2df10:	b	2de50 <flatcc_json_parser_match_constant@@Base+0x130>
   2df14:	ldrb	r3, [r4, #1]
   2df18:	cmp	r3, #32
   2df1c:	addhi	r0, r4, #1
   2df20:	bls	2ddbc <flatcc_json_parser_match_constant@@Base+0x9c>
   2df24:	b	2ddcc <flatcc_json_parser_match_constant@@Base+0xac>

0002df28 <flatcc_json_parser_double@@Base>:
   2df28:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2df2c:	mov	r4, #0
   2df30:	mov	r5, #0
   2df34:	cmp	r1, r2
   2df38:	strd	r6, [sp, #8]
   2df3c:	str	r8, [sp, #16]
   2df40:	str	lr, [sp, #20]
   2df44:	strd	r4, [r3]
   2df48:	beq	2dff0 <flatcc_json_parser_double@@Base+0xc8>
   2df4c:	ldrb	ip, [r1]
   2df50:	cmp	ip, #45	; 0x2d
   2df54:	addeq	ip, r1, #1
   2df58:	movne	ip, r1
   2df5c:	sub	lr, r2, ip
   2df60:	cmp	lr, #1
   2df64:	ble	2df7c <flatcc_json_parser_double@@Base+0x54>
   2df68:	ldrb	lr, [ip]
   2df6c:	cmp	lr, #46	; 0x2e
   2df70:	beq	2dfd4 <flatcc_json_parser_double@@Base+0xac>
   2df74:	cmp	lr, #48	; 0x30
   2df78:	beq	2e008 <flatcc_json_parser_double@@Base+0xe0>
   2df7c:	mov	r6, r1
   2df80:	mov	r4, r2
   2df84:	sub	r1, r4, r1
   2df88:	mov	r7, r0
   2df8c:	mov	r2, r3
   2df90:	mov	r0, r6
   2df94:	mov	r5, r3
   2df98:	bl	2c2fc <grisu3_diy_fp_encode_double@@Base+0x5f8>
   2df9c:	cmp	r6, r0
   2dfa0:	cmpne	r0, #0
   2dfa4:	mov	r1, r0
   2dfa8:	bne	2dff0 <flatcc_json_parser_double@@Base+0xc8>
   2dfac:	vldr	d7, [r5]
   2dfb0:	mov	r2, r4
   2dfb4:	mov	r1, r6
   2dfb8:	mov	r0, r7
   2dfbc:	vldr	d6, [pc, #84]	; 2e018 <flatcc_json_parser_double@@Base+0xf0>
   2dfc0:	vabs.f64	d7, d7
   2dfc4:	vcmp.f64	d7, d6
   2dfc8:	vmrs	APSR_nzcv, fpscr
   2dfcc:	movgt	r3, #7
   2dfd0:	bgt	2dfd8 <flatcc_json_parser_double@@Base+0xb0>
   2dfd4:	mov	r3, #6
   2dfd8:	ldrd	r4, [sp]
   2dfdc:	ldrd	r6, [sp, #8]
   2dfe0:	ldr	r8, [sp, #16]
   2dfe4:	ldr	lr, [sp, #20]
   2dfe8:	add	sp, sp, #24
   2dfec:	b	2cff0 <flatcc_json_parser_set_error@@Base>
   2dff0:	ldrd	r4, [sp]
   2dff4:	mov	r0, r1
   2dff8:	ldrd	r6, [sp, #8]
   2dffc:	ldr	r8, [sp, #16]
   2e000:	add	sp, sp, #20
   2e004:	pop	{pc}		; (ldr pc, [sp], #4)
   2e008:	ldrb	ip, [ip, #1]
   2e00c:	cmp	ip, #48	; 0x30
   2e010:	bne	2df7c <flatcc_json_parser_double@@Base+0x54>
   2e014:	b	2dfd4 <flatcc_json_parser_double@@Base+0xac>
   2e018:			; <UNDEFINED> instruction: 0xffffffff
   2e01c:	svcvc	0x00efffff

0002e020 <flatcc_json_parser_float@@Base>:
   2e020:	mov	ip, #0
   2e024:	cmp	r1, r2
   2e028:	str	ip, [r3]
   2e02c:	beq	2e124 <flatcc_json_parser_float@@Base+0x104>
   2e030:	strd	r4, [sp, #-20]!	; 0xffffffec
   2e034:	mov	r5, r2
   2e038:	mov	r4, r1
   2e03c:	strd	r6, [sp, #8]
   2e040:	mov	r6, r3
   2e044:	mov	r7, r0
   2e048:	str	lr, [sp, #16]
   2e04c:	sub	sp, sp, #12
   2e050:	ldrb	ip, [r1]
   2e054:	cmp	ip, #45	; 0x2d
   2e058:	addeq	ip, r1, #1
   2e05c:	movne	ip, r1
   2e060:	sub	r3, r2, ip
   2e064:	cmp	r3, #1
   2e068:	ble	2e080 <flatcc_json_parser_float@@Base+0x60>
   2e06c:	ldrb	r3, [ip]
   2e070:	cmp	r3, #46	; 0x2e
   2e074:	beq	2e10c <flatcc_json_parser_float@@Base+0xec>
   2e078:	cmp	r3, #48	; 0x30
   2e07c:	beq	2e100 <flatcc_json_parser_float@@Base+0xe0>
   2e080:	mov	r2, sp
   2e084:	sub	r1, r5, r4
   2e088:	mov	r0, r4
   2e08c:	bl	2c2fc <grisu3_diy_fp_encode_double@@Base+0x5f8>
   2e090:	vldr	d6, [sp]
   2e094:	vldr	s14, [pc, #144]	; 2e12c <flatcc_json_parser_float@@Base+0x10c>
   2e098:	vcvt.f32.f64	s15, d6
   2e09c:	vabs.f32	s11, s15
   2e0a0:	vstr	s15, [r6]
   2e0a4:	vcmp.f32	s11, s14
   2e0a8:	vmrs	APSR_nzcv, fpscr
   2e0ac:	bgt	2e0d0 <flatcc_json_parser_float@@Base+0xb0>
   2e0b0:	cmp	r4, r0
   2e0b4:	cmpne	r0, #0
   2e0b8:	beq	2e10c <flatcc_json_parser_float@@Base+0xec>
   2e0bc:	add	sp, sp, #12
   2e0c0:	ldrd	r4, [sp]
   2e0c4:	ldrd	r6, [sp, #8]
   2e0c8:	add	sp, sp, #16
   2e0cc:	pop	{pc}		; (ldr pc, [sp], #4)
   2e0d0:	vcmpe.f64	d6, #0.0
   2e0d4:	vldr	s14, [pc, #84]	; 2e130 <flatcc_json_parser_float@@Base+0x110>
   2e0d8:	mov	r2, r5
   2e0dc:	mov	r1, r4
   2e0e0:	mov	r0, r7
   2e0e4:	vldr	s15, [pc, #72]	; 2e134 <flatcc_json_parser_float@@Base+0x114>
   2e0e8:	mov	r3, #7
   2e0ec:	vmrs	APSR_nzcv, fpscr
   2e0f0:	vmovpl.f32	s15, s14
   2e0f4:	vstr	s15, [r6]
   2e0f8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2e0fc:	b	2e0bc <flatcc_json_parser_float@@Base+0x9c>
   2e100:	ldrb	r3, [ip, #1]
   2e104:	cmp	r3, #48	; 0x30
   2e108:	bne	2e080 <flatcc_json_parser_float@@Base+0x60>
   2e10c:	mov	r2, r5
   2e110:	mov	r1, r4
   2e114:	mov	r0, r7
   2e118:	mov	r3, #6
   2e11c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2e120:	b	2e0bc <flatcc_json_parser_float@@Base+0x9c>
   2e124:	mov	r0, r1
   2e128:	bx	lr
   2e12c:	svcvc	0x007fffff
   2e130:	svcvc	0x00800000
   2e134:			; <UNDEFINED> instruction: 0xff800000

0002e138 <flatcc_json_parser_generic_json@@Base>:
   2e138:	cmp	r1, r2
   2e13c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2e140:	strd	r6, [sp, #8]
   2e144:	strd	r8, [sp, #16]
   2e148:	strd	sl, [sp, #24]
   2e14c:	mov	fp, r1
   2e150:	str	lr, [sp, #32]
   2e154:	sub	sp, sp, #524	; 0x20c
   2e158:	beq	2ea20 <flatcc_json_parser_generic_json@@Base+0x8e8>
   2e15c:	ldrb	r3, [r1]
   2e160:	add	r7, sp, #8
   2e164:	mov	r4, r2
   2e168:	mov	r6, r0
   2e16c:	mov	r9, #125	; 0x7d
   2e170:	mov	r5, r7
   2e174:	add	r8, sp, #4
   2e178:	cmp	r5, r7
   2e17c:	beq	2e234 <flatcc_json_parser_generic_json@@Base+0xfc>
   2e180:	ldrb	r2, [r5, #-1]
   2e184:	cmp	r2, #125	; 0x7d
   2e188:	beq	2e698 <flatcc_json_parser_generic_json@@Base+0x560>
   2e18c:	cmp	r3, #57	; 0x39
   2e190:	bls	2e23c <flatcc_json_parser_generic_json@@Base+0x104>
   2e194:	cmp	r3, #91	; 0x5b
   2e198:	beq	2e674 <flatcc_json_parser_generic_json@@Base+0x53c>
   2e19c:	cmp	r3, #123	; 0x7b
   2e1a0:	bne	2e3a4 <flatcc_json_parser_generic_json@@Base+0x26c>
   2e1a4:	add	r3, sp, #520	; 0x208
   2e1a8:	cmp	r5, r3
   2e1ac:	beq	2e680 <flatcc_json_parser_generic_json@@Base+0x548>
   2e1b0:	add	r1, fp, #1
   2e1b4:	strb	r9, [r5], #1
   2e1b8:	sub	r3, r4, r1
   2e1bc:	cmp	r3, #1
   2e1c0:	ble	2e1e8 <flatcc_json_parser_generic_json@@Base+0xb0>
   2e1c4:	ldrb	r3, [fp, #1]
   2e1c8:	cmp	r3, #32
   2e1cc:	movhi	fp, r1
   2e1d0:	bhi	2e1f8 <flatcc_json_parser_generic_json@@Base+0xc0>
   2e1d4:	bne	2e1e8 <flatcc_json_parser_generic_json@@Base+0xb0>
   2e1d8:	ldrb	r3, [fp, #2]
   2e1dc:	cmp	r3, #32
   2e1e0:	addhi	fp, fp, #2
   2e1e4:	bhi	2e1f8 <flatcc_json_parser_generic_json@@Base+0xc0>
   2e1e8:	mov	r2, r4
   2e1ec:	mov	r0, r6
   2e1f0:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2e1f4:	mov	fp, r0
   2e1f8:	cmp	r4, fp
   2e1fc:	beq	2ea20 <flatcc_json_parser_generic_json@@Base+0x8e8>
   2e200:	ldrb	r3, [fp]
   2e204:	cmp	r3, #125	; 0x7d
   2e208:	bne	2e178 <flatcc_json_parser_generic_json@@Base+0x40>
   2e20c:	cmp	r5, r7
   2e210:	mov	r0, fp
   2e214:	bne	2e32c <flatcc_json_parser_generic_json@@Base+0x1f4>
   2e218:	add	sp, sp, #524	; 0x20c
   2e21c:	ldrd	r4, [sp]
   2e220:	ldrd	r6, [sp, #8]
   2e224:	ldrd	r8, [sp, #16]
   2e228:	ldrd	sl, [sp, #24]
   2e22c:	add	sp, sp, #32
   2e230:	pop	{pc}		; (ldr pc, [sp], #4)
   2e234:	cmp	r3, #57	; 0x39
   2e238:	bhi	2e51c <flatcc_json_parser_generic_json@@Base+0x3e4>
   2e23c:	cmp	r3, #48	; 0x30
   2e240:	bcs	2e5b0 <flatcc_json_parser_generic_json@@Base+0x478>
   2e244:	cmp	r3, #34	; 0x22
   2e248:	bne	2e39c <flatcc_json_parser_generic_json@@Base+0x264>
   2e24c:	add	fp, fp, #1
   2e250:	cmp	r4, fp
   2e254:	bne	2e2a4 <flatcc_json_parser_generic_json@@Base+0x16c>
   2e258:	b	2e7c8 <flatcc_json_parser_generic_json@@Base+0x690>
   2e25c:	mov	r1, fp
   2e260:	mov	r2, r4
   2e264:	mov	r0, r6
   2e268:	bl	2d01c <flatcc_json_parser_string_part@@Base>
   2e26c:	mov	fp, r0
   2e270:	mov	r1, r0
   2e274:	cmp	r4, fp
   2e278:	mov	r3, r8
   2e27c:	mov	r2, r4
   2e280:	mov	r0, r6
   2e284:	beq	2e294 <flatcc_json_parser_generic_json@@Base+0x15c>
   2e288:	ldrb	lr, [fp]
   2e28c:	cmp	lr, #34	; 0x22
   2e290:	beq	2e2b0 <flatcc_json_parser_generic_json@@Base+0x178>
   2e294:	bl	2d7e0 <flatcc_json_parser_string_escape@@Base>
   2e298:	cmp	r4, r0
   2e29c:	mov	fp, r0
   2e2a0:	beq	2e7c8 <flatcc_json_parser_generic_json@@Base+0x690>
   2e2a4:	ldrb	r3, [fp]
   2e2a8:	cmp	r3, #34	; 0x22
   2e2ac:	bne	2e25c <flatcc_json_parser_generic_json@@Base+0x124>
   2e2b0:	add	r0, fp, #1
   2e2b4:	cmp	r4, r0
   2e2b8:	bne	2e324 <flatcc_json_parser_generic_json@@Base+0x1ec>
   2e2bc:	b	2eb5c <flatcc_json_parser_generic_json@@Base+0xa24>
   2e2c0:	cmp	r2, #1
   2e2c4:	ble	2e2d8 <flatcc_json_parser_generic_json@@Base+0x1a0>
   2e2c8:	ldrb	r3, [r0]
   2e2cc:	cmp	r3, #32
   2e2d0:	bhi	2e2e8 <flatcc_json_parser_generic_json@@Base+0x1b0>
   2e2d4:	beq	2e408 <flatcc_json_parser_generic_json@@Base+0x2d0>
   2e2d8:	mov	r1, r0
   2e2dc:	mov	r2, r4
   2e2e0:	mov	r0, r6
   2e2e4:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2e2e8:	cmp	r4, r0
   2e2ec:	beq	2e420 <flatcc_json_parser_generic_json@@Base+0x2e8>
   2e2f0:	ldrb	r3, [r0]
   2e2f4:	cmp	r3, #44	; 0x2c
   2e2f8:	beq	2e44c <flatcc_json_parser_generic_json@@Base+0x314>
   2e2fc:	cmp	r3, #125	; 0x7d
   2e300:	beq	2e3d4 <flatcc_json_parser_generic_json@@Base+0x29c>
   2e304:	mov	r1, r0
   2e308:	mov	r3, #10
   2e30c:	mov	r2, r4
   2e310:	mov	r0, r6
   2e314:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2e318:	cmp	r4, r0
   2e31c:	beq	2e420 <flatcc_json_parser_generic_json@@Base+0x2e8>
   2e320:	mov	r5, sl
   2e324:	cmp	r5, r7
   2e328:	beq	2e218 <flatcc_json_parser_generic_json@@Base+0xe0>
   2e32c:	ldrb	r3, [r5, #-1]
   2e330:	sub	sl, r5, #1
   2e334:	sub	r2, r4, r0
   2e338:	cmp	r3, #93	; 0x5d
   2e33c:	bne	2e2c0 <flatcc_json_parser_generic_json@@Base+0x188>
   2e340:	cmp	r2, #1
   2e344:	ble	2e358 <flatcc_json_parser_generic_json@@Base+0x220>
   2e348:	ldrb	r3, [r0]
   2e34c:	cmp	r3, #32
   2e350:	bhi	2e368 <flatcc_json_parser_generic_json@@Base+0x230>
   2e354:	beq	2e4bc <flatcc_json_parser_generic_json@@Base+0x384>
   2e358:	mov	r1, r0
   2e35c:	mov	r2, r4
   2e360:	mov	r0, r6
   2e364:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2e368:	cmp	r4, r0
   2e36c:	beq	2e420 <flatcc_json_parser_generic_json@@Base+0x2e8>
   2e370:	ldrb	r3, [r0]
   2e374:	cmp	r3, #44	; 0x2c
   2e378:	beq	2e4d0 <flatcc_json_parser_generic_json@@Base+0x398>
   2e37c:	cmp	r3, #93	; 0x5d
   2e380:	beq	2e3d4 <flatcc_json_parser_generic_json@@Base+0x29c>
   2e384:	mov	r1, r0
   2e388:	mov	r3, #9
   2e38c:	mov	r2, r4
   2e390:	mov	r0, r6
   2e394:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2e398:	b	2e318 <flatcc_json_parser_generic_json@@Base+0x1e0>
   2e39c:	cmp	r3, #45	; 0x2d
   2e3a0:	beq	2e5b0 <flatcc_json_parser_generic_json@@Base+0x478>
   2e3a4:	mov	r2, r4
   2e3a8:	mov	r1, fp
   2e3ac:	mov	r0, r6
   2e3b0:	bl	2dc54 <flatcc_json_parser_skip_constant@@Base>
   2e3b4:	cmp	r0, fp
   2e3b8:	bne	2e2b4 <flatcc_json_parser_generic_json@@Base+0x17c>
   2e3bc:	mov	r2, r4
   2e3c0:	mov	r1, fp
   2e3c4:	mov	r0, r6
   2e3c8:	mov	r3, #5
   2e3cc:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2e3d0:	b	2e218 <flatcc_json_parser_generic_json@@Base+0xe0>
   2e3d4:	add	r1, r0, #1
   2e3d8:	sub	r3, r4, r1
   2e3dc:	cmp	r3, #1
   2e3e0:	ble	2e3f8 <flatcc_json_parser_generic_json@@Base+0x2c0>
   2e3e4:	ldrb	r3, [r0, #1]
   2e3e8:	cmp	r3, #32
   2e3ec:	movhi	r0, r1
   2e3f0:	bhi	2e318 <flatcc_json_parser_generic_json@@Base+0x1e0>
   2e3f4:	beq	2e59c <flatcc_json_parser_generic_json@@Base+0x464>
   2e3f8:	mov	r2, r4
   2e3fc:	mov	r0, r6
   2e400:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2e404:	b	2e318 <flatcc_json_parser_generic_json@@Base+0x1e0>
   2e408:	ldrb	r3, [r0, #1]
   2e40c:	cmp	r3, #32
   2e410:	addhi	r0, r0, #1
   2e414:	bls	2e2d8 <flatcc_json_parser_generic_json@@Base+0x1a0>
   2e418:	cmp	r4, r0
   2e41c:	bne	2e2f0 <flatcc_json_parser_generic_json@@Base+0x1b8>
   2e420:	cmp	sl, r7
   2e424:	beq	2e218 <flatcc_json_parser_generic_json@@Base+0xe0>
   2e428:	ldrb	r3, [sl, #-1]
   2e42c:	mov	r1, r0
   2e430:	mov	r2, r4
   2e434:	mov	r0, r6
   2e438:	cmp	r3, #93	; 0x5d
   2e43c:	moveq	r3, #9
   2e440:	movne	r3, #10
   2e444:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2e448:	b	2e218 <flatcc_json_parser_generic_json@@Base+0xe0>
   2e44c:	add	fp, r0, #1
   2e450:	sub	r3, r4, fp
   2e454:	cmp	r3, #1
   2e458:	ble	2e46c <flatcc_json_parser_generic_json@@Base+0x334>
   2e45c:	ldrb	r3, [r0, #1]
   2e460:	cmp	r3, #32
   2e464:	bhi	2e480 <flatcc_json_parser_generic_json@@Base+0x348>
   2e468:	beq	2e588 <flatcc_json_parser_generic_json@@Base+0x450>
   2e46c:	mov	r1, fp
   2e470:	mov	r2, r4
   2e474:	mov	r0, r6
   2e478:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2e47c:	mov	fp, r0
   2e480:	cmp	r4, fp
   2e484:	beq	2e948 <flatcc_json_parser_generic_json@@Base+0x810>
   2e488:	ldrb	r3, [fp]
   2e48c:	cmp	r3, #125	; 0x7d
   2e490:	bne	2e178 <flatcc_json_parser_generic_json@@Base+0x40>
   2e494:	add	r0, fp, #1
   2e498:	sub	r3, r4, r0
   2e49c:	cmp	r3, #1
   2e4a0:	ble	2e4b4 <flatcc_json_parser_generic_json@@Base+0x37c>
   2e4a4:	ldrb	r3, [fp, #1]
   2e4a8:	cmp	r3, #32
   2e4ac:	bhi	2e318 <flatcc_json_parser_generic_json@@Base+0x1e0>
   2e4b0:	beq	2ea78 <flatcc_json_parser_generic_json@@Base+0x940>
   2e4b4:	mov	r1, r0
   2e4b8:	b	2e3f8 <flatcc_json_parser_generic_json@@Base+0x2c0>
   2e4bc:	ldrb	r3, [r0, #1]
   2e4c0:	cmp	r3, #32
   2e4c4:	addhi	r0, r0, #1
   2e4c8:	bls	2e358 <flatcc_json_parser_generic_json@@Base+0x220>
   2e4cc:	b	2e368 <flatcc_json_parser_generic_json@@Base+0x230>
   2e4d0:	add	fp, r0, #1
   2e4d4:	sub	r3, r4, fp
   2e4d8:	cmp	r3, #1
   2e4dc:	ble	2e4f0 <flatcc_json_parser_generic_json@@Base+0x3b8>
   2e4e0:	ldrb	r3, [r0, #1]
   2e4e4:	cmp	r3, #32
   2e4e8:	bhi	2e504 <flatcc_json_parser_generic_json@@Base+0x3cc>
   2e4ec:	beq	2e960 <flatcc_json_parser_generic_json@@Base+0x828>
   2e4f0:	mov	r1, fp
   2e4f4:	mov	r2, r4
   2e4f8:	mov	r0, r6
   2e4fc:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2e500:	mov	fp, r0
   2e504:	cmp	r4, fp
   2e508:	beq	2e9b8 <flatcc_json_parser_generic_json@@Base+0x880>
   2e50c:	ldrb	r3, [fp]
   2e510:	cmp	r3, #93	; 0x5d
   2e514:	bne	2e178 <flatcc_json_parser_generic_json@@Base+0x40>
   2e518:	b	2e494 <flatcc_json_parser_generic_json@@Base+0x35c>
   2e51c:	cmp	r3, #91	; 0x5b
   2e520:	bne	2e19c <flatcc_json_parser_generic_json@@Base+0x64>
   2e524:	add	r1, fp, #1
   2e528:	mov	r3, #93	; 0x5d
   2e52c:	sub	r2, r4, r1
   2e530:	cmp	r2, #1
   2e534:	strb	r3, [r5], #1
   2e538:	ble	2e560 <flatcc_json_parser_generic_json@@Base+0x428>
   2e53c:	ldrb	r3, [fp, #1]
   2e540:	cmp	r3, #32
   2e544:	movhi	fp, r1
   2e548:	bhi	2e570 <flatcc_json_parser_generic_json@@Base+0x438>
   2e54c:	bne	2e560 <flatcc_json_parser_generic_json@@Base+0x428>
   2e550:	ldrb	r3, [fp, #2]
   2e554:	cmp	r3, #32
   2e558:	addhi	fp, fp, #2
   2e55c:	bhi	2e570 <flatcc_json_parser_generic_json@@Base+0x438>
   2e560:	mov	r2, r4
   2e564:	mov	r0, r6
   2e568:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2e56c:	mov	fp, r0
   2e570:	cmp	r4, fp
   2e574:	beq	2ea20 <flatcc_json_parser_generic_json@@Base+0x8e8>
   2e578:	ldrb	r3, [fp]
   2e57c:	cmp	r3, #93	; 0x5d
   2e580:	bne	2e178 <flatcc_json_parser_generic_json@@Base+0x40>
   2e584:	b	2e20c <flatcc_json_parser_generic_json@@Base+0xd4>
   2e588:	ldrb	r3, [r0, #2]
   2e58c:	cmp	r3, #32
   2e590:	addhi	fp, r0, #2
   2e594:	bls	2e46c <flatcc_json_parser_generic_json@@Base+0x334>
   2e598:	b	2e480 <flatcc_json_parser_generic_json@@Base+0x348>
   2e59c:	ldrb	r3, [r0, #2]
   2e5a0:	cmp	r3, #32
   2e5a4:	addhi	r0, r0, #2
   2e5a8:	bls	2e3f8 <flatcc_json_parser_generic_json@@Base+0x2c0>
   2e5ac:	b	2e318 <flatcc_json_parser_generic_json@@Base+0x1e0>
   2e5b0:	cmp	r4, fp
   2e5b4:	beq	2e9ac <flatcc_json_parser_generic_json@@Base+0x874>
   2e5b8:	cmp	r3, #45	; 0x2d
   2e5bc:	beq	2e974 <flatcc_json_parser_generic_json@@Base+0x83c>
   2e5c0:	ldrb	r3, [fp]
   2e5c4:	cmp	r3, #48	; 0x30
   2e5c8:	beq	2e998 <flatcc_json_parser_generic_json@@Base+0x860>
   2e5cc:	sub	r3, r3, #49	; 0x31
   2e5d0:	cmp	r3, #8
   2e5d4:	bhi	2ea30 <flatcc_json_parser_generic_json@@Base+0x8f8>
   2e5d8:	add	r0, fp, #1
   2e5dc:	cmp	r4, r0
   2e5e0:	beq	2e908 <flatcc_json_parser_generic_json@@Base+0x7d0>
   2e5e4:	ldrb	r3, [fp, #1]
   2e5e8:	sub	r2, r3, #48	; 0x30
   2e5ec:	cmp	r2, #9
   2e5f0:	bhi	2e614 <flatcc_json_parser_generic_json@@Base+0x4dc>
   2e5f4:	add	ip, fp, #2
   2e5f8:	cmp	ip, r4
   2e5fc:	mov	r0, ip
   2e600:	beq	2e908 <flatcc_json_parser_generic_json@@Base+0x7d0>
   2e604:	ldrb	r3, [ip], #1
   2e608:	sub	r2, r3, #48	; 0x30
   2e60c:	cmp	r2, #9
   2e610:	bls	2e5f8 <flatcc_json_parser_generic_json@@Base+0x4c0>
   2e614:	cmp	r3, #46	; 0x2e
   2e618:	beq	2e9d0 <flatcc_json_parser_generic_json@@Base+0x898>
   2e61c:	and	r2, r3, #223	; 0xdf
   2e620:	cmp	r2, #69	; 0x45
   2e624:	bne	2e8e0 <flatcc_json_parser_generic_json@@Base+0x7a8>
   2e628:	add	r1, r0, #1
   2e62c:	cmp	r4, r1
   2e630:	beq	2e980 <flatcc_json_parser_generic_json@@Base+0x848>
   2e634:	ldrb	r3, [r0, #1]
   2e638:	sub	r2, r3, #43	; 0x2b
   2e63c:	tst	r2, #253	; 0xfd
   2e640:	bne	2e654 <flatcc_json_parser_generic_json@@Base+0x51c>
   2e644:	add	r1, r0, #2
   2e648:	cmp	r4, r1
   2e64c:	beq	2e660 <flatcc_json_parser_generic_json@@Base+0x528>
   2e650:	ldrb	r3, [r0, #2]
   2e654:	sub	r3, r3, #48	; 0x30
   2e658:	cmp	r3, #9
   2e65c:	bls	2e8a4 <flatcc_json_parser_generic_json@@Base+0x76c>
   2e660:	mov	r3, #6
   2e664:	mov	r2, r4
   2e668:	mov	r0, r6
   2e66c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2e670:	b	2e2b4 <flatcc_json_parser_generic_json@@Base+0x17c>
   2e674:	add	r3, sp, #520	; 0x208
   2e678:	cmp	r5, r3
   2e67c:	bne	2e524 <flatcc_json_parser_generic_json@@Base+0x3ec>
   2e680:	mov	r2, r4
   2e684:	mov	r1, fp
   2e688:	mov	r0, r6
   2e68c:	mov	r3, #2
   2e690:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2e694:	b	2e218 <flatcc_json_parser_generic_json@@Base+0xe0>
   2e698:	cmp	r3, #34	; 0x22
   2e69c:	moveq	r3, #0
   2e6a0:	addeq	fp, fp, #1
   2e6a4:	streq	r3, [r6, #12]
   2e6a8:	beq	2e804 <flatcc_json_parser_generic_json@@Base+0x6cc>
   2e6ac:	cmp	r3, #46	; 0x2e
   2e6b0:	movne	r3, #1
   2e6b4:	strne	r3, [r6, #12]
   2e6b8:	beq	2e7e0 <flatcc_json_parser_generic_json@@Base+0x6a8>
   2e6bc:	cmp	r4, fp
   2e6c0:	beq	2eac8 <flatcc_json_parser_generic_json@@Base+0x990>
   2e6c4:	ldrb	r3, [fp]
   2e6c8:	cmp	r3, #32
   2e6cc:	bls	2eac0 <flatcc_json_parser_generic_json@@Base+0x988>
   2e6d0:	mov	ip, fp
   2e6d4:	sub	r2, r3, #48	; 0x30
   2e6d8:	cmp	r3, #46	; 0x2e
   2e6dc:	cmpne	r3, #95	; 0x5f
   2e6e0:	uxtb	lr, r2
   2e6e4:	add	r1, ip, #1
   2e6e8:	mov	r0, ip
   2e6ec:	beq	2e880 <flatcc_json_parser_generic_json@@Base+0x748>
   2e6f0:	orr	r2, r3, #32
   2e6f4:	tst	r3, #128	; 0x80
   2e6f8:	sub	r2, r2, #97	; 0x61
   2e6fc:	bne	2e880 <flatcc_json_parser_generic_json@@Base+0x748>
   2e700:	cmp	lr, #9
   2e704:	uxtb	r2, r2
   2e708:	bls	2e880 <flatcc_json_parser_generic_json@@Base+0x748>
   2e70c:	cmp	r2, #25
   2e710:	bls	2e87c <flatcc_json_parser_generic_json@@Base+0x744>
   2e714:	sub	r3, r4, r0
   2e718:	cmp	r3, #1
   2e71c:	ble	2e730 <flatcc_json_parser_generic_json@@Base+0x5f8>
   2e720:	ldrb	r3, [r0]
   2e724:	cmp	r3, #32
   2e728:	bhi	2e740 <flatcc_json_parser_generic_json@@Base+0x608>
   2e72c:	beq	2ea50 <flatcc_json_parser_generic_json@@Base+0x918>
   2e730:	mov	r1, r0
   2e734:	mov	r2, r4
   2e738:	mov	r0, r6
   2e73c:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2e740:	cmp	r4, r0
   2e744:	beq	2eae8 <flatcc_json_parser_generic_json@@Base+0x9b0>
   2e748:	ldrb	r3, [r0]
   2e74c:	cmp	r3, #58	; 0x3a
   2e750:	bne	2ead0 <flatcc_json_parser_generic_json@@Base+0x998>
   2e754:	add	fp, r0, #1
   2e758:	sub	r3, r4, fp
   2e75c:	cmp	r3, #1
   2e760:	ble	2e774 <flatcc_json_parser_generic_json@@Base+0x63c>
   2e764:	ldrb	r3, [r0, #1]
   2e768:	cmp	r3, #32
   2e76c:	bhi	2e78c <flatcc_json_parser_generic_json@@Base+0x654>
   2e770:	beq	2ea64 <flatcc_json_parser_generic_json@@Base+0x92c>
   2e774:	mov	r1, fp
   2e778:	mov	r2, r4
   2e77c:	mov	r0, r6
   2e780:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2e784:	ldrb	r3, [r0]
   2e788:	mov	fp, r0
   2e78c:	cmp	r3, #57	; 0x39
   2e790:	bhi	2e194 <flatcc_json_parser_generic_json@@Base+0x5c>
   2e794:	cmp	r3, #48	; 0x30
   2e798:	bcs	2e5b0 <flatcc_json_parser_generic_json@@Base+0x478>
   2e79c:	cmp	r3, #34	; 0x22
   2e7a0:	bne	2e39c <flatcc_json_parser_generic_json@@Base+0x264>
   2e7a4:	cmp	fp, r4
   2e7a8:	bne	2e24c <flatcc_json_parser_generic_json@@Base+0x114>
   2e7ac:	mov	r3, #16
   2e7b0:	mov	r2, r4
   2e7b4:	mov	r1, r4
   2e7b8:	mov	r0, r6
   2e7bc:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2e7c0:	mov	fp, r0
   2e7c4:	b	2e250 <flatcc_json_parser_generic_json@@Base+0x118>
   2e7c8:	mov	r1, fp
   2e7cc:	mov	r3, #20
   2e7d0:	mov	r2, r4
   2e7d4:	mov	r0, r6
   2e7d8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2e7dc:	b	2e2b4 <flatcc_json_parser_generic_json@@Base+0x17c>
   2e7e0:	mov	r1, fp
   2e7e4:	mov	r3, #5
   2e7e8:	mov	r2, r4
   2e7ec:	mov	r0, r6
   2e7f0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2e7f4:	ldr	r3, [r6, #12]
   2e7f8:	mov	fp, r0
   2e7fc:	cmp	r3, #0
   2e800:	bne	2e6bc <flatcc_json_parser_generic_json@@Base+0x584>
   2e804:	cmp	r4, fp
   2e808:	beq	2e864 <flatcc_json_parser_generic_json@@Base+0x72c>
   2e80c:	ldrb	r2, [fp]
   2e810:	cmp	r2, #34	; 0x22
   2e814:	bne	2e834 <flatcc_json_parser_generic_json@@Base+0x6fc>
   2e818:	b	2ea28 <flatcc_json_parser_generic_json@@Base+0x8f0>
   2e81c:	add	fp, r3, #1
   2e820:	cmp	r4, fp
   2e824:	beq	2e864 <flatcc_json_parser_generic_json@@Base+0x72c>
   2e828:	ldrb	r2, [r3, #1]
   2e82c:	cmp	r2, #34	; 0x22
   2e830:	beq	2ea28 <flatcc_json_parser_generic_json@@Base+0x8f0>
   2e834:	cmp	r2, #92	; 0x5c
   2e838:	mov	r3, fp
   2e83c:	bne	2e81c <flatcc_json_parser_generic_json@@Base+0x6e4>
   2e840:	sub	r2, r4, fp
   2e844:	add	r3, fp, #1
   2e848:	cmp	r2, #1
   2e84c:	bgt	2e81c <flatcc_json_parser_generic_json@@Base+0x6e4>
   2e850:	cmp	r4, fp
   2e854:	beq	2e864 <flatcc_json_parser_generic_json@@Base+0x72c>
   2e858:	ldrb	r3, [fp]
   2e85c:	cmp	r3, #34	; 0x22
   2e860:	beq	2ea28 <flatcc_json_parser_generic_json@@Base+0x8f0>
   2e864:	mov	r1, fp
   2e868:	mov	r3, #20
   2e86c:	mov	r2, r4
   2e870:	mov	r0, r6
   2e874:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2e878:	b	2e714 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2e87c:	add	r1, ip, #1
   2e880:	cmp	r4, r1
   2e884:	mov	r0, r1
   2e888:	mov	ip, r1
   2e88c:	beq	2ea8c <flatcc_json_parser_generic_json@@Base+0x954>
   2e890:	ldrb	r2, [r1]
   2e894:	cmp	r2, #32
   2e898:	bls	2ea8c <flatcc_json_parser_generic_json@@Base+0x954>
   2e89c:	mov	r3, r2
   2e8a0:	b	2e6d4 <flatcc_json_parser_generic_json@@Base+0x59c>
   2e8a4:	add	r0, r1, #1
   2e8a8:	cmp	r4, r0
   2e8ac:	beq	2e908 <flatcc_json_parser_generic_json@@Base+0x7d0>
   2e8b0:	ldrb	r3, [r1, #1]
   2e8b4:	sub	r2, r3, #48	; 0x30
   2e8b8:	cmp	r2, #9
   2e8bc:	bhi	2eb00 <flatcc_json_parser_generic_json@@Base+0x9c8>
   2e8c0:	add	r2, r1, #2
   2e8c4:	cmp	r4, r2
   2e8c8:	mov	r0, r2
   2e8cc:	beq	2e908 <flatcc_json_parser_generic_json@@Base+0x7d0>
   2e8d0:	ldrb	r3, [r2], #1
   2e8d4:	sub	r1, r3, #48	; 0x30
   2e8d8:	cmp	r1, #9
   2e8dc:	bls	2e8c4 <flatcc_json_parser_generic_json@@Base+0x78c>
   2e8e0:	cmp	r3, #32
   2e8e4:	beq	2e2b4 <flatcc_json_parser_generic_json@@Base+0x17c>
   2e8e8:	bls	2e92c <flatcc_json_parser_generic_json@@Base+0x7f4>
   2e8ec:	cmp	r3, #58	; 0x3a
   2e8f0:	beq	2e2b4 <flatcc_json_parser_generic_json@@Base+0x17c>
   2e8f4:	bls	2e920 <flatcc_json_parser_generic_json@@Base+0x7e8>
   2e8f8:	cmp	r3, #93	; 0x5d
   2e8fc:	beq	2e2b4 <flatcc_json_parser_generic_json@@Base+0x17c>
   2e900:	cmp	r3, #125	; 0x7d
   2e904:	beq	2e2b4 <flatcc_json_parser_generic_json@@Base+0x17c>
   2e908:	mov	r1, r0
   2e90c:	mov	r3, #6
   2e910:	mov	r2, r4
   2e914:	mov	r0, r6
   2e918:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2e91c:	b	2e2b4 <flatcc_json_parser_generic_json@@Base+0x17c>
   2e920:	cmp	r3, #44	; 0x2c
   2e924:	bne	2e908 <flatcc_json_parser_generic_json@@Base+0x7d0>
   2e928:	b	2e2b4 <flatcc_json_parser_generic_json@@Base+0x17c>
   2e92c:	cmp	r3, #9
   2e930:	bcc	2e908 <flatcc_json_parser_generic_json@@Base+0x7d0>
   2e934:	cmp	r3, #11
   2e938:	bls	2e2b4 <flatcc_json_parser_generic_json@@Base+0x17c>
   2e93c:	cmp	r3, #13
   2e940:	bne	2e908 <flatcc_json_parser_generic_json@@Base+0x7d0>
   2e944:	b	2e2b4 <flatcc_json_parser_generic_json@@Base+0x17c>
   2e948:	mov	r3, #10
   2e94c:	mov	r2, r4
   2e950:	mov	r1, r4
   2e954:	mov	r0, r6
   2e958:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2e95c:	b	2e318 <flatcc_json_parser_generic_json@@Base+0x1e0>
   2e960:	ldrb	r3, [r0, #2]
   2e964:	cmp	r3, #32
   2e968:	addhi	fp, r0, #2
   2e96c:	bls	2e4f0 <flatcc_json_parser_generic_json@@Base+0x3b8>
   2e970:	b	2e504 <flatcc_json_parser_generic_json@@Base+0x3cc>
   2e974:	add	fp, fp, #1
   2e978:	cmp	r4, fp
   2e97c:	bne	2e5c0 <flatcc_json_parser_generic_json@@Base+0x488>
   2e980:	mov	r3, #6
   2e984:	mov	r2, r4
   2e988:	mov	r1, r4
   2e98c:	mov	r0, r6
   2e990:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2e994:	b	2e2b4 <flatcc_json_parser_generic_json@@Base+0x17c>
   2e998:	add	r0, fp, #1
   2e99c:	cmp	r4, r0
   2e9a0:	beq	2e908 <flatcc_json_parser_generic_json@@Base+0x7d0>
   2e9a4:	ldrb	r3, [fp, #1]
   2e9a8:	b	2e614 <flatcc_json_parser_generic_json@@Base+0x4dc>
   2e9ac:	mov	sl, r5
   2e9b0:	mov	r0, r4
   2e9b4:	b	2e420 <flatcc_json_parser_generic_json@@Base+0x2e8>
   2e9b8:	mov	r3, #9
   2e9bc:	mov	r2, r4
   2e9c0:	mov	r1, r4
   2e9c4:	mov	r0, r6
   2e9c8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2e9cc:	b	2e318 <flatcc_json_parser_generic_json@@Base+0x1e0>
   2e9d0:	ldrb	r3, [r0, #1]
   2e9d4:	sub	r3, r3, #48	; 0x30
   2e9d8:	cmp	r3, #9
   2e9dc:	bhi	2eaa8 <flatcc_json_parser_generic_json@@Base+0x970>
   2e9e0:	add	r2, r0, #2
   2e9e4:	cmp	r4, r2
   2e9e8:	beq	2eb54 <flatcc_json_parser_generic_json@@Base+0xa1c>
   2e9ec:	ldrb	r3, [r0, #2]
   2e9f0:	sub	r1, r3, #48	; 0x30
   2e9f4:	cmp	r1, #9
   2e9f8:	bhi	2ea48 <flatcc_json_parser_generic_json@@Base+0x910>
   2e9fc:	add	r2, r0, #3
   2ea00:	cmp	r2, r4
   2ea04:	mov	r0, r2
   2ea08:	beq	2e908 <flatcc_json_parser_generic_json@@Base+0x7d0>
   2ea0c:	ldrb	r3, [r2], #1
   2ea10:	sub	r1, r3, #48	; 0x30
   2ea14:	cmp	r1, #9
   2ea18:	bls	2ea00 <flatcc_json_parser_generic_json@@Base+0x8c8>
   2ea1c:	b	2e61c <flatcc_json_parser_generic_json@@Base+0x4e4>
   2ea20:	mov	r0, fp
   2ea24:	b	2e218 <flatcc_json_parser_generic_json@@Base+0xe0>
   2ea28:	add	r0, fp, #1
   2ea2c:	b	2e714 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2ea30:	mov	r1, fp
   2ea34:	mov	r3, #6
   2ea38:	mov	r2, r4
   2ea3c:	mov	r0, r6
   2ea40:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2ea44:	b	2e2b4 <flatcc_json_parser_generic_json@@Base+0x17c>
   2ea48:	mov	r0, r2
   2ea4c:	b	2e61c <flatcc_json_parser_generic_json@@Base+0x4e4>
   2ea50:	ldrb	r3, [r0, #1]
   2ea54:	cmp	r3, #32
   2ea58:	addhi	r0, r0, #1
   2ea5c:	bls	2e730 <flatcc_json_parser_generic_json@@Base+0x5f8>
   2ea60:	b	2e740 <flatcc_json_parser_generic_json@@Base+0x608>
   2ea64:	ldrb	r3, [r0, #2]
   2ea68:	cmp	r3, #32
   2ea6c:	addhi	fp, r0, #2
   2ea70:	bls	2e774 <flatcc_json_parser_generic_json@@Base+0x63c>
   2ea74:	b	2e78c <flatcc_json_parser_generic_json@@Base+0x654>
   2ea78:	ldrb	r3, [fp, #2]
   2ea7c:	cmp	r3, #32
   2ea80:	addhi	r0, fp, #2
   2ea84:	bls	2e4b4 <flatcc_json_parser_generic_json@@Base+0x37c>
   2ea88:	b	2e318 <flatcc_json_parser_generic_json@@Base+0x1e0>
   2ea8c:	cmp	r3, #46	; 0x2e
   2ea90:	bne	2e714 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2ea94:	mov	r3, #5
   2ea98:	mov	r2, r4
   2ea9c:	mov	r0, r6
   2eaa0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2eaa4:	b	2e714 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2eaa8:	add	r1, r0, #1
   2eaac:	mov	r3, #6
   2eab0:	mov	r2, r4
   2eab4:	mov	r0, r6
   2eab8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2eabc:	b	2e2b4 <flatcc_json_parser_generic_json@@Base+0x17c>
   2eac0:	mov	r0, fp
   2eac4:	b	2e714 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2eac8:	mov	r0, r4
   2eacc:	b	2e714 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2ead0:	mov	r1, r0
   2ead4:	mov	r2, r4
   2ead8:	mov	r0, r6
   2eadc:	mov	r3, #4
   2eae0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2eae4:	b	2e218 <flatcc_json_parser_generic_json@@Base+0xe0>
   2eae8:	mov	r0, r6
   2eaec:	mov	r3, #10
   2eaf0:	mov	r2, r4
   2eaf4:	mov	r1, r4
   2eaf8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2eafc:	b	2e218 <flatcc_json_parser_generic_json@@Base+0xe0>
   2eb00:	cmp	r3, #32
   2eb04:	beq	2e324 <flatcc_json_parser_generic_json@@Base+0x1ec>
   2eb08:	bls	2eb2c <flatcc_json_parser_generic_json@@Base+0x9f4>
   2eb0c:	cmp	r3, #58	; 0x3a
   2eb10:	beq	2e324 <flatcc_json_parser_generic_json@@Base+0x1ec>
   2eb14:	bls	2eb48 <flatcc_json_parser_generic_json@@Base+0xa10>
   2eb18:	cmp	r3, #93	; 0x5d
   2eb1c:	beq	2e324 <flatcc_json_parser_generic_json@@Base+0x1ec>
   2eb20:	cmp	r3, #125	; 0x7d
   2eb24:	bne	2e908 <flatcc_json_parser_generic_json@@Base+0x7d0>
   2eb28:	b	2e324 <flatcc_json_parser_generic_json@@Base+0x1ec>
   2eb2c:	cmp	r3, #9
   2eb30:	bcc	2e908 <flatcc_json_parser_generic_json@@Base+0x7d0>
   2eb34:	cmp	r3, #11
   2eb38:	bls	2e324 <flatcc_json_parser_generic_json@@Base+0x1ec>
   2eb3c:	cmp	r3, #13
   2eb40:	bne	2e908 <flatcc_json_parser_generic_json@@Base+0x7d0>
   2eb44:	b	2e324 <flatcc_json_parser_generic_json@@Base+0x1ec>
   2eb48:	cmp	r3, #44	; 0x2c
   2eb4c:	bne	2e908 <flatcc_json_parser_generic_json@@Base+0x7d0>
   2eb50:	b	2e324 <flatcc_json_parser_generic_json@@Base+0x1ec>
   2eb54:	mov	r0, r4
   2eb58:	b	2e908 <flatcc_json_parser_generic_json@@Base+0x7d0>
   2eb5c:	mov	sl, r5
   2eb60:	b	2e420 <flatcc_json_parser_generic_json@@Base+0x2e8>

0002eb64 <flatcc_json_parser_unmatched_symbol@@Base>:
   2eb64:	ldr	ip, [r0, #8]
   2eb68:	tst	ip, #1
   2eb6c:	beq	2ecf0 <flatcc_json_parser_unmatched_symbol@@Base+0x18c>
   2eb70:	strd	r4, [sp, #-16]!
   2eb74:	mov	r4, r2
   2eb78:	mov	r5, r0
   2eb7c:	ldr	r2, [r0, #12]
   2eb80:	mov	r3, r1
   2eb84:	str	r6, [sp, #8]
   2eb88:	str	lr, [sp, #12]
   2eb8c:	cmp	r2, #0
   2eb90:	beq	2ec54 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   2eb94:	cmp	r1, r4
   2eb98:	beq	2ec08 <flatcc_json_parser_unmatched_symbol@@Base+0xa4>
   2eb9c:	ldrb	r2, [r1]
   2eba0:	cmp	r2, #32
   2eba4:	bls	2ebec <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   2eba8:	mov	ip, r1
   2ebac:	sub	r3, r2, #48	; 0x30
   2ebb0:	cmp	r2, #46	; 0x2e
   2ebb4:	cmpne	r2, #95	; 0x5f
   2ebb8:	uxtb	r0, r3
   2ebbc:	add	r1, ip, #1
   2ebc0:	mov	r3, ip
   2ebc4:	beq	2eccc <flatcc_json_parser_unmatched_symbol@@Base+0x168>
   2ebc8:	orr	ip, r2, #32
   2ebcc:	tst	r2, #128	; 0x80
   2ebd0:	sub	ip, ip, #97	; 0x61
   2ebd4:	bne	2eccc <flatcc_json_parser_unmatched_symbol@@Base+0x168>
   2ebd8:	cmp	r0, #9
   2ebdc:	uxtb	ip, ip
   2ebe0:	bls	2eccc <flatcc_json_parser_unmatched_symbol@@Base+0x168>
   2ebe4:	cmp	ip, #25
   2ebe8:	bls	2ecc8 <flatcc_json_parser_unmatched_symbol@@Base+0x164>
   2ebec:	sub	r2, r4, r3
   2ebf0:	cmp	r2, #1
   2ebf4:	ble	2ec08 <flatcc_json_parser_unmatched_symbol@@Base+0xa4>
   2ebf8:	ldrb	r2, [r3]
   2ebfc:	cmp	r2, #32
   2ec00:	bhi	2ec1c <flatcc_json_parser_unmatched_symbol@@Base+0xb8>
   2ec04:	beq	2ed4c <flatcc_json_parser_unmatched_symbol@@Base+0x1e8>
   2ec08:	mov	r1, r3
   2ec0c:	mov	r2, r4
   2ec10:	mov	r0, r5
   2ec14:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2ec18:	mov	r3, r0
   2ec1c:	cmp	r4, r3
   2ec20:	beq	2ec30 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   2ec24:	ldrb	r2, [r3]
   2ec28:	cmp	r2, #58	; 0x3a
   2ec2c:	beq	2ed00 <flatcc_json_parser_unmatched_symbol@@Base+0x19c>
   2ec30:	mov	r2, r4
   2ec34:	mov	r1, r3
   2ec38:	ldr	r6, [sp, #8]
   2ec3c:	mov	r0, r5
   2ec40:	mov	r3, #4
   2ec44:	ldrd	r4, [sp]
   2ec48:	ldr	lr, [sp, #12]
   2ec4c:	add	sp, sp, #16
   2ec50:	b	2cff0 <flatcc_json_parser_set_error@@Base>
   2ec54:	cmp	r1, r4
   2ec58:	beq	2ecac <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   2ec5c:	ldrb	r1, [r1]
   2ec60:	cmp	r1, #34	; 0x22
   2ec64:	bne	2ec84 <flatcc_json_parser_unmatched_symbol@@Base+0x120>
   2ec68:	b	2ecf8 <flatcc_json_parser_unmatched_symbol@@Base+0x194>
   2ec6c:	add	r3, r2, #1
   2ec70:	cmp	r4, r3
   2ec74:	beq	2ecac <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   2ec78:	ldrb	r1, [r2, #1]
   2ec7c:	cmp	r1, #34	; 0x22
   2ec80:	beq	2ecf8 <flatcc_json_parser_unmatched_symbol@@Base+0x194>
   2ec84:	cmp	r1, #92	; 0x5c
   2ec88:	mov	r2, r3
   2ec8c:	bne	2ec6c <flatcc_json_parser_unmatched_symbol@@Base+0x108>
   2ec90:	sub	r1, r4, r3
   2ec94:	add	r2, r3, #1
   2ec98:	cmp	r1, #1
   2ec9c:	bgt	2ec6c <flatcc_json_parser_unmatched_symbol@@Base+0x108>
   2eca0:	ldrb	r2, [r3]
   2eca4:	cmp	r2, #34	; 0x22
   2eca8:	beq	2ecf8 <flatcc_json_parser_unmatched_symbol@@Base+0x194>
   2ecac:	mov	r1, r3
   2ecb0:	mov	r2, r4
   2ecb4:	mov	r3, #20
   2ecb8:	mov	r0, r5
   2ecbc:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2ecc0:	mov	r3, r0
   2ecc4:	b	2ebec <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   2ecc8:	add	r1, r3, #1
   2eccc:	cmp	r4, r1
   2ecd0:	mov	r3, r1
   2ecd4:	mov	ip, r1
   2ecd8:	beq	2ed60 <flatcc_json_parser_unmatched_symbol@@Base+0x1fc>
   2ecdc:	ldrb	r0, [r1]
   2ece0:	cmp	r0, #32
   2ece4:	bls	2ed60 <flatcc_json_parser_unmatched_symbol@@Base+0x1fc>
   2ece8:	mov	r2, r0
   2ecec:	b	2ebac <flatcc_json_parser_unmatched_symbol@@Base+0x48>
   2ecf0:	mov	r3, #13
   2ecf4:	b	2cff0 <flatcc_json_parser_set_error@@Base>
   2ecf8:	add	r3, r3, #1
   2ecfc:	b	2ebec <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   2ed00:	add	r1, r3, #1
   2ed04:	sub	r2, r4, r1
   2ed08:	cmp	r2, #1
   2ed0c:	ble	2ed20 <flatcc_json_parser_unmatched_symbol@@Base+0x1bc>
   2ed10:	ldrb	r2, [r3, #1]
   2ed14:	cmp	r2, #32
   2ed18:	bhi	2ed30 <flatcc_json_parser_unmatched_symbol@@Base+0x1cc>
   2ed1c:	beq	2ed80 <flatcc_json_parser_unmatched_symbol@@Base+0x21c>
   2ed20:	mov	r2, r4
   2ed24:	mov	r0, r5
   2ed28:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2ed2c:	mov	r1, r0
   2ed30:	mov	r2, r4
   2ed34:	mov	r0, r5
   2ed38:	ldrd	r4, [sp]
   2ed3c:	ldr	r6, [sp, #8]
   2ed40:	ldr	lr, [sp, #12]
   2ed44:	add	sp, sp, #16
   2ed48:	b	2e138 <flatcc_json_parser_generic_json@@Base>
   2ed4c:	ldrb	r2, [r3, #1]
   2ed50:	cmp	r2, #32
   2ed54:	addhi	r3, r3, #1
   2ed58:	bls	2ec08 <flatcc_json_parser_unmatched_symbol@@Base+0xa4>
   2ed5c:	b	2ec1c <flatcc_json_parser_unmatched_symbol@@Base+0xb8>
   2ed60:	cmp	r2, #46	; 0x2e
   2ed64:	bne	2ebec <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   2ed68:	mov	r3, #5
   2ed6c:	mov	r2, r4
   2ed70:	mov	r0, r5
   2ed74:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2ed78:	mov	r3, r0
   2ed7c:	b	2ebec <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   2ed80:	ldrb	r2, [r3, #2]
   2ed84:	cmp	r2, #32
   2ed88:	addhi	r1, r3, #2
   2ed8c:	bls	2ed20 <flatcc_json_parser_unmatched_symbol@@Base+0x1bc>
   2ed90:	b	2ed30 <flatcc_json_parser_unmatched_symbol@@Base+0x1cc>

0002ed94 <flatcc_json_parser_integer@@Base>:
   2ed94:	cmp	r1, r2
   2ed98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2ed9c:	strd	r6, [sp, #8]
   2eda0:	strd	r8, [sp, #16]
   2eda4:	strd	sl, [sp, #24]
   2eda8:	str	lr, [sp, #32]
   2edac:	ldr	ip, [sp, #36]	; 0x24
   2edb0:	beq	2eeb8 <flatcc_json_parser_integer@@Base+0x124>
   2edb4:	ldrb	r8, [r1]
   2edb8:	sub	r8, r8, #45	; 0x2d
   2edbc:	clz	r8, r8
   2edc0:	lsr	r8, r8, #5
   2edc4:	add	lr, r1, r8
   2edc8:	cmp	r2, lr
   2edcc:	str	r8, [r3]
   2edd0:	beq	2eed8 <flatcc_json_parser_integer@@Base+0x144>
   2edd4:	ldrb	r8, [r1, r8]
   2edd8:	sub	r3, r8, #48	; 0x30
   2eddc:	cmp	r3, #9
   2ede0:	bhi	2eecc <flatcc_json_parser_integer@@Base+0x138>
   2ede4:	uxtb	r8, r8
   2ede8:	mov	r9, #0
   2edec:	subs	r4, r8, #48	; 0x30
   2edf0:	add	r3, lr, #1
   2edf4:	sbc	r5, r9, #0
   2edf8:	b	2ee30 <flatcc_json_parser_integer@@Base+0x9c>
   2edfc:	adds	r8, r8, r4
   2ee00:	adc	r9, r9, r5
   2ee04:	adds	r8, r8, r8
   2ee08:	adc	r9, r9, r9
   2ee0c:	subs	r6, r8, #48	; 0x30
   2ee10:	sbc	r7, r9, #0
   2ee14:	adds	r8, r6, sl
   2ee18:	adc	r9, r7, #0
   2ee1c:	cmp	r9, r5
   2ee20:	mov	r5, r9
   2ee24:	cmpeq	r8, r4
   2ee28:	mov	r4, r8
   2ee2c:	bcc	2ee94 <flatcc_json_parser_integer@@Base+0x100>
   2ee30:	cmp	r3, r2
   2ee34:	lsl	r9, r5, #2
   2ee38:	mov	lr, r3
   2ee3c:	lsl	r8, r4, #2
   2ee40:	beq	2ee74 <flatcc_json_parser_integer@@Base+0xe0>
   2ee44:	ldrb	sl, [r3], #1
   2ee48:	orr	r9, r9, r4, lsr #30
   2ee4c:	sub	fp, sl, #48	; 0x30
   2ee50:	cmp	fp, #9
   2ee54:	bls	2edfc <flatcc_json_parser_integer@@Base+0x68>
   2ee58:	cmp	r1, lr
   2ee5c:	beq	2ee78 <flatcc_json_parser_integer@@Base+0xe4>
   2ee60:	ldrb	r3, [lr]
   2ee64:	and	r1, r3, #223	; 0xdf
   2ee68:	cmp	r3, #46	; 0x2e
   2ee6c:	cmpne	r1, #69	; 0x45
   2ee70:	beq	2eec0 <flatcc_json_parser_integer@@Base+0x12c>
   2ee74:	strd	r4, [ip]
   2ee78:	ldrd	r4, [sp]
   2ee7c:	mov	r0, lr
   2ee80:	ldrd	r6, [sp, #8]
   2ee84:	ldrd	r8, [sp, #16]
   2ee88:	ldrd	sl, [sp, #24]
   2ee8c:	add	sp, sp, #32
   2ee90:	pop	{pc}		; (ldr pc, [sp], #4)
   2ee94:	mov	r1, lr
   2ee98:	mov	r3, #8
   2ee9c:	ldrd	r4, [sp]
   2eea0:	ldrd	r6, [sp, #8]
   2eea4:	ldrd	r8, [sp, #16]
   2eea8:	ldrd	sl, [sp, #24]
   2eeac:	ldr	lr, [sp, #32]
   2eeb0:	add	sp, sp, #36	; 0x24
   2eeb4:	b	2cff0 <flatcc_json_parser_set_error@@Base>
   2eeb8:	mov	lr, r1
   2eebc:	b	2ee78 <flatcc_json_parser_integer@@Base+0xe4>
   2eec0:	mov	r1, lr
   2eec4:	mov	r3, #12
   2eec8:	b	2ee9c <flatcc_json_parser_integer@@Base+0x108>
   2eecc:	mov	r4, #0
   2eed0:	mov	r5, #0
   2eed4:	b	2ee58 <flatcc_json_parser_integer@@Base+0xc4>
   2eed8:	mov	r4, #0
   2eedc:	mov	r5, #0
   2eee0:	b	2ee74 <flatcc_json_parser_integer@@Base+0xe0>

0002eee4 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   2eee4:	cmp	r1, r2
   2eee8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2eeec:	mov	r5, r2
   2eef0:	strd	r6, [sp, #8]
   2eef4:	mov	r7, r0
   2eef8:	strd	r8, [sp, #16]
   2eefc:	mov	r9, r3
   2ef00:	strd	sl, [sp, #24]
   2ef04:	str	lr, [sp, #32]
   2ef08:	sub	sp, sp, #36	; 0x24
   2ef0c:	ldr	sl, [sp, #72]	; 0x48
   2ef10:	beq	2f09c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2ef14:	ldrb	r3, [r1]
   2ef18:	cmp	r3, #34	; 0x22
   2ef1c:	addeq	r4, r1, #1
   2ef20:	bne	2f09c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2ef24:	mov	r2, r5
   2ef28:	mov	r1, r4
   2ef2c:	mov	r0, r7
   2ef30:	bl	2d01c <flatcc_json_parser_string_part@@Base>
   2ef34:	cmp	r5, r0
   2ef38:	mov	r6, r0
   2ef3c:	beq	2f05c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x178>
   2ef40:	ldrb	r3, [r0]
   2ef44:	cmp	r3, #34	; 0x22
   2ef48:	bne	2f05c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x178>
   2ef4c:	sub	fp, r0, r4
   2ef50:	lsr	r8, fp, #2
   2ef54:	and	r3, fp, #3
   2ef58:	cmp	r3, #2
   2ef5c:	add	r8, r8, r8, lsl #1
   2ef60:	addeq	r8, r8, #1
   2ef64:	beq	2ef70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x8c>
   2ef68:	cmp	r3, #3
   2ef6c:	addeq	r8, r8, #2
   2ef70:	mov	r2, #1
   2ef74:	mvn	r3, #0
   2ef78:	ldr	r0, [r7]
   2ef7c:	mov	r1, r2
   2ef80:	bl	275c8 <flatcc_builder_start_vector@@Base>
   2ef84:	cmp	r0, #0
   2ef88:	bne	2f0b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   2ef8c:	mov	r1, r8
   2ef90:	ldr	r0, [r7]
   2ef94:	bl	26c80 <flatcc_builder_extend_vector@@Base>
   2ef98:	subs	r3, r0, #0
   2ef9c:	str	r3, [sp]
   2efa0:	beq	2f0b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   2efa4:	cmp	sl, #0
   2efa8:	bne	2f0d0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ec>
   2efac:	ldr	r3, [pc, #844]	; 2f300 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x41c>
   2efb0:	add	r3, pc, r3
   2efb4:	add	lr, r3, #1728	; 0x6c0
   2efb8:	add	lr, lr, #4
   2efbc:	ldr	r2, [sp]
   2efc0:	cmp	r8, #0
   2efc4:	mov	ip, r4
   2efc8:	movne	r3, r8
   2efcc:	mvneq	r3, #0
   2efd0:	str	fp, [sp, #4]
   2efd4:	add	r3, r2, r3
   2efd8:	strd	r2, [sp, #8]
   2efdc:	ldr	r3, [sp, #4]
   2efe0:	ldr	r2, [sp, #8]
   2efe4:	cmp	r3, #0
   2efe8:	ldr	r3, [sp, #12]
   2efec:	sub	r3, r3, r2
   2eff0:	str	r3, [sp, #16]
   2eff4:	beq	2f244 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
   2eff8:	ldr	r1, [sp, #4]
   2effc:	mov	r2, #0
   2f000:	ldrb	r3, [ip, r2]
   2f004:	ldrb	r0, [lr, r3]
   2f008:	add	r3, sp, #32
   2f00c:	add	r3, r3, r2
   2f010:	cmp	r0, #63	; 0x3f
   2f014:	strb	r0, [r3, #-4]
   2f018:	bls	2f0e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
   2f01c:	cmp	r0, #65	; 0x41
   2f020:	beq	2f100 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21c>
   2f024:	cmp	r0, #66	; 0x42
   2f028:	movne	r3, r2
   2f02c:	beq	2f10c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x228>
   2f030:	sub	r3, r1, r3
   2f034:	cmp	r2, #2
   2f038:	beq	2f210 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x32c>
   2f03c:	cmp	r2, #3
   2f040:	beq	2f160 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x27c>
   2f044:	cmp	r2, #0
   2f048:	subeq	r3, fp, r3
   2f04c:	beq	2f248 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x364>
   2f050:	ldr	r3, [sp, #4]
   2f054:	sub	r6, fp, r3
   2f058:	add	r6, r4, r6
   2f05c:	mov	ip, #0
   2f060:	mov	r2, r5
   2f064:	cmp	sl, ip
   2f068:	mov	r1, r6
   2f06c:	mov	r0, r7
   2f070:	movne	r3, #32
   2f074:	str	ip, [r9]
   2f078:	moveq	r3, #31
   2f07c:	add	sp, sp, #36	; 0x24
   2f080:	ldrd	r4, [sp]
   2f084:	ldrd	r6, [sp, #8]
   2f088:	ldrd	r8, [sp, #16]
   2f08c:	ldrd	sl, [sp, #24]
   2f090:	ldr	lr, [sp, #32]
   2f094:	add	sp, sp, #36	; 0x24
   2f098:	b	2cff0 <flatcc_json_parser_set_error@@Base>
   2f09c:	mov	r3, #16
   2f0a0:	mov	r2, r5
   2f0a4:	mov	r0, r7
   2f0a8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2f0ac:	mov	r4, r0
   2f0b0:	b	2ef24 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   2f0b4:	mov	r3, #0
   2f0b8:	mov	r2, r5
   2f0bc:	mov	r1, r6
   2f0c0:	mov	r0, r7
   2f0c4:	str	r3, [r9]
   2f0c8:	mov	r3, #33	; 0x21
   2f0cc:	b	2f07c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   2f0d0:	ldr	r3, [pc, #556]	; 2f304 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x420>
   2f0d4:	add	r3, pc, r3
   2f0d8:	add	lr, r3, #1472	; 0x5c0
   2f0dc:	add	lr, lr, #4
   2f0e0:	b	2efbc <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd8>
   2f0e4:	add	r2, r2, #1
   2f0e8:	cmp	r2, #3
   2f0ec:	bhi	2f278 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x394>
   2f0f0:	cmp	r1, r2
   2f0f4:	bne	2f000 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   2f0f8:	mov	r3, #0
   2f0fc:	b	2f034 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x150>
   2f100:	add	ip, ip, #1
   2f104:	sub	r1, r1, #1
   2f108:	b	2f0e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x204>
   2f10c:	add	r3, r2, #1
   2f110:	cmp	r3, #7
   2f114:	cmpls	r3, r1
   2f118:	bcs	2f030 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   2f11c:	ldrb	r0, [ip, r3]
   2f120:	add	ip, ip, r3
   2f124:	ldrb	r0, [lr, r0]
   2f128:	sub	r0, r0, #65	; 0x41
   2f12c:	cmp	r0, #1
   2f130:	bls	2f14c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x268>
   2f134:	b	2f030 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   2f138:	ldrb	r0, [ip, #1]!
   2f13c:	ldrb	r0, [lr, r0]
   2f140:	sub	r0, r0, #65	; 0x41
   2f144:	cmp	r0, #1
   2f148:	bhi	2f030 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   2f14c:	add	r3, r3, #1
   2f150:	cmp	r3, #7
   2f154:	cmpls	r3, r1
   2f158:	bcc	2f138 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x254>
   2f15c:	b	2f030 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   2f160:	ldrb	r2, [sp, #30]
   2f164:	lsl	r1, r2, #6
   2f168:	tst	r1, #192	; 0xc0
   2f16c:	bne	2f050 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   2f170:	ldr	r1, [sp, #16]
   2f174:	cmp	r1, #1
   2f178:	beq	2f050 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   2f17c:	ldrb	r0, [sp, #29]
   2f180:	lsr	r2, r2, #2
   2f184:	sub	r3, fp, r3
   2f188:	ldr	r1, [sp, #8]
   2f18c:	ldr	ip, [sp]
   2f190:	orr	r2, r2, r0, lsl #4
   2f194:	ldrb	lr, [sp, #28]
   2f198:	add	r1, r1, #2
   2f19c:	sub	r1, r1, ip
   2f1a0:	lsr	ip, r0, #4
   2f1a4:	ldr	r0, [sp, #8]
   2f1a8:	orr	ip, ip, lr, lsl #2
   2f1ac:	strb	ip, [r0]
   2f1b0:	strb	r2, [r0, #1]
   2f1b4:	cmp	fp, r3
   2f1b8:	addne	r6, r4, r3
   2f1bc:	bne	2f05c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x178>
   2f1c0:	cmp	r8, r1
   2f1c4:	ldr	r0, [r7]
   2f1c8:	bls	2f1e0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   2f1cc:	sub	r1, r8, r1
   2f1d0:	bl	27374 <flatcc_builder_truncate_vector@@Base>
   2f1d4:	cmp	r0, #0
   2f1d8:	bne	2f0b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   2f1dc:	ldr	r0, [r7]
   2f1e0:	bl	285b4 <flatcc_builder_end_vector@@Base>
   2f1e4:	cmp	r0, #0
   2f1e8:	str	r0, [r9]
   2f1ec:	beq	2f0b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   2f1f0:	ldrb	r3, [r6]
   2f1f4:	cmp	r3, #34	; 0x22
   2f1f8:	beq	2f258 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x374>
   2f1fc:	mov	r2, r5
   2f200:	mov	r1, r6
   2f204:	mov	r0, r7
   2f208:	mov	r3, #20
   2f20c:	b	2f07c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   2f210:	ldrb	r2, [sp, #29]
   2f214:	lsl	r1, r2, #4
   2f218:	tst	r1, #240	; 0xf0
   2f21c:	bne	2f050 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   2f220:	ldrb	r0, [sp, #28]
   2f224:	lsr	r2, r2, #4
   2f228:	sub	r3, fp, r3
   2f22c:	ldr	r1, [sp, #8]
   2f230:	orr	r2, r2, r0, lsl #2
   2f234:	strb	r2, [r1], #1
   2f238:	ldr	r2, [sp]
   2f23c:	sub	r1, r1, r2
   2f240:	b	2f1b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d0>
   2f244:	mov	r3, fp
   2f248:	ldr	r1, [sp]
   2f24c:	ldr	r2, [sp, #8]
   2f250:	sub	r1, r2, r1
   2f254:	b	2f1b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d0>
   2f258:	add	r0, r6, #1
   2f25c:	add	sp, sp, #36	; 0x24
   2f260:	ldrd	r4, [sp]
   2f264:	ldrd	r6, [sp, #8]
   2f268:	ldrd	r8, [sp, #16]
   2f26c:	ldrd	sl, [sp, #24]
   2f270:	add	sp, sp, #32
   2f274:	pop	{pc}		; (ldr pc, [sp], #4)
   2f278:	ldr	r3, [sp, #16]
   2f27c:	cmp	r3, #2
   2f280:	bls	2f050 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   2f284:	ldrb	r2, [sp, #29]
   2f288:	sub	r3, r1, #4
   2f28c:	add	ip, ip, #4
   2f290:	ldrb	r0, [sp, #28]
   2f294:	str	r3, [sp, #4]
   2f298:	ldrb	r3, [sp, #30]
   2f29c:	lsr	r1, r2, #4
   2f2a0:	str	r2, [sp, #16]
   2f2a4:	ldrb	r2, [sp, #31]
   2f2a8:	orr	r1, r1, r0, lsl #2
   2f2ac:	ldr	r0, [sp, #16]
   2f2b0:	str	r2, [sp, #20]
   2f2b4:	lsr	r2, r3, #2
   2f2b8:	orr	r2, r2, r0, lsl #4
   2f2bc:	ldr	r0, [sp, #20]
   2f2c0:	orr	r3, r0, r3, lsl #6
   2f2c4:	ldr	r0, [sp, #8]
   2f2c8:	strb	r1, [r0]
   2f2cc:	strb	r2, [r0, #1]
   2f2d0:	ldr	r2, [sp, #12]
   2f2d4:	strb	r3, [r0, #2]
   2f2d8:	add	r3, r0, #3
   2f2dc:	str	r3, [sp, #8]
   2f2e0:	cmp	r3, r2
   2f2e4:	bne	2efdc <flatcc_json_parser_build_uint8_vector_base64@@Base+0xf8>
   2f2e8:	ldr	r2, [sp]
   2f2ec:	ldr	r3, [sp, #8]
   2f2f0:	sub	r1, r3, r2
   2f2f4:	ldr	r3, [sp, #4]
   2f2f8:	sub	r3, fp, r3
   2f2fc:	b	2f1b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d0>
   2f300:	andeq	r4, r1, r8, lsr r8
   2f304:	andeq	r4, r1, r4, lsl r7

0002f308 <flatcc_json_parser_build_string@@Base>:
   2f308:	cmp	r1, r2
   2f30c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2f310:	mov	r5, r0
   2f314:	strd	r6, [sp, #8]
   2f318:	mov	r6, r2
   2f31c:	strd	r8, [sp, #16]
   2f320:	mov	r8, r3
   2f324:	str	sl, [sp, #24]
   2f328:	str	lr, [sp, #28]
   2f32c:	sub	sp, sp, #8
   2f330:	beq	2f3a4 <flatcc_json_parser_build_string@@Base+0x9c>
   2f334:	ldrb	r3, [r1]
   2f338:	cmp	r3, #34	; 0x22
   2f33c:	addeq	r7, r1, #1
   2f340:	bne	2f3a4 <flatcc_json_parser_build_string@@Base+0x9c>
   2f344:	mov	r2, r6
   2f348:	mov	r1, r7
   2f34c:	mov	r0, r5
   2f350:	bl	2d01c <flatcc_json_parser_string_part@@Base>
   2f354:	cmp	r6, r0
   2f358:	mov	r4, r0
   2f35c:	beq	2f490 <flatcc_json_parser_build_string@@Base+0x188>
   2f360:	ldrb	r3, [r0]
   2f364:	ldr	r0, [r5]
   2f368:	cmp	r3, #34	; 0x22
   2f36c:	beq	2f498 <flatcc_json_parser_build_string@@Base+0x190>
   2f370:	bl	276d4 <flatcc_builder_start_string@@Base>
   2f374:	cmp	r0, #0
   2f378:	beq	2f3bc <flatcc_json_parser_build_string@@Base+0xb4>
   2f37c:	mov	r3, #0
   2f380:	str	r3, [r8]
   2f384:	mov	r0, r4
   2f388:	add	sp, sp, #8
   2f38c:	ldrd	r4, [sp]
   2f390:	ldrd	r6, [sp, #8]
   2f394:	ldrd	r8, [sp, #16]
   2f398:	ldr	sl, [sp, #24]
   2f39c:	add	sp, sp, #28
   2f3a0:	pop	{pc}		; (ldr pc, [sp], #4)
   2f3a4:	mov	r3, #16
   2f3a8:	mov	r2, r6
   2f3ac:	mov	r0, r5
   2f3b0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2f3b4:	mov	r7, r0
   2f3b8:	b	2f344 <flatcc_json_parser_build_string@@Base+0x3c>
   2f3bc:	sub	r2, r4, r7
   2f3c0:	mov	r1, r7
   2f3c4:	ldr	r0, [r5]
   2f3c8:	bl	27210 <flatcc_builder_append_string@@Base>
   2f3cc:	cmp	r0, #0
   2f3d0:	beq	2f37c <flatcc_json_parser_build_string@@Base+0x74>
   2f3d4:	cmp	r6, r4
   2f3d8:	beq	2f464 <flatcc_json_parser_build_string@@Base+0x15c>
   2f3dc:	ldrb	r3, [r4]
   2f3e0:	cmp	r3, #34	; 0x22
   2f3e4:	beq	2f4bc <flatcc_json_parser_build_string@@Base+0x1b4>
   2f3e8:	add	sl, sp, #4
   2f3ec:	add	r9, sp, #5
   2f3f0:	b	2f410 <flatcc_json_parser_build_string@@Base+0x108>
   2f3f4:	ldr	r0, [r5]
   2f3f8:	bl	27210 <flatcc_builder_append_string@@Base>
   2f3fc:	cmp	r0, #0
   2f400:	beq	2f37c <flatcc_json_parser_build_string@@Base+0x74>
   2f404:	ldrb	r3, [r4]
   2f408:	cmp	r3, #34	; 0x22
   2f40c:	beq	2f4bc <flatcc_json_parser_build_string@@Base+0x1b4>
   2f410:	mov	r1, r4
   2f414:	mov	r3, sl
   2f418:	mov	r2, r6
   2f41c:	mov	r0, r5
   2f420:	bl	2d7e0 <flatcc_json_parser_string_escape@@Base>
   2f424:	mov	r7, r0
   2f428:	ldrb	r2, [sp, #4]
   2f42c:	mov	r1, r9
   2f430:	ldr	r0, [r5]
   2f434:	bl	27210 <flatcc_builder_append_string@@Base>
   2f438:	cmp	r0, #0
   2f43c:	mov	r2, r6
   2f440:	mov	r1, r7
   2f444:	mov	r0, r5
   2f448:	beq	2f4cc <flatcc_json_parser_build_string@@Base+0x1c4>
   2f44c:	bl	2d01c <flatcc_json_parser_string_part@@Base>
   2f450:	cmp	r6, r0
   2f454:	mov	r4, r0
   2f458:	mov	r1, r7
   2f45c:	sub	r2, r0, r7
   2f460:	bne	2f3f4 <flatcc_json_parser_build_string@@Base+0xec>
   2f464:	mov	r4, r6
   2f468:	ldr	r0, [r5]
   2f46c:	bl	29268 <flatcc_builder_end_string@@Base>
   2f470:	str	r0, [r8]
   2f474:	mov	r1, r4
   2f478:	mov	r2, r6
   2f47c:	mov	r0, r5
   2f480:	mov	r3, #20
   2f484:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2f488:	mov	r4, r0
   2f48c:	b	2f384 <flatcc_json_parser_build_string@@Base+0x7c>
   2f490:	ldr	r0, [r5]
   2f494:	b	2f370 <flatcc_json_parser_build_string@@Base+0x68>
   2f498:	sub	r2, r4, r7
   2f49c:	mov	r1, r7
   2f4a0:	bl	290c8 <flatcc_builder_create_string@@Base>
   2f4a4:	str	r0, [r8]
   2f4a8:	ldrb	r3, [r4]
   2f4ac:	cmp	r3, #34	; 0x22
   2f4b0:	addeq	r4, r4, #1
   2f4b4:	beq	2f384 <flatcc_json_parser_build_string@@Base+0x7c>
   2f4b8:	b	2f474 <flatcc_json_parser_build_string@@Base+0x16c>
   2f4bc:	ldr	r0, [r5]
   2f4c0:	bl	29268 <flatcc_builder_end_string@@Base>
   2f4c4:	str	r0, [r8]
   2f4c8:	b	2f4a8 <flatcc_json_parser_build_string@@Base+0x1a0>
   2f4cc:	mov	r4, r7
   2f4d0:	b	2f37c <flatcc_json_parser_build_string@@Base+0x74>

0002f4d4 <flatcc_json_parser_prepare_unions@@Base>:
   2f4d4:	add	ip, r3, r3, lsl #1
   2f4d8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2f4dc:	mov	r5, r0
   2f4e0:	ldr	r0, [r0]
   2f4e4:	mov	r4, r3
   2f4e8:	strd	r6, [sp, #8]
   2f4ec:	mov	r6, r1
   2f4f0:	lsl	r1, ip, #3
   2f4f4:	ldr	r7, [sp, #24]
   2f4f8:	add	r1, r1, #8
   2f4fc:	str	r8, [sp, #16]
   2f500:	mov	r8, r2
   2f504:	str	lr, [sp, #20]
   2f508:	bl	261e8 <flatcc_builder_enter_user_frame@@Base>
   2f50c:	cmp	r0, #0
   2f510:	str	r0, [r7]
   2f514:	beq	2f540 <flatcc_json_parser_prepare_unions@@Base+0x6c>
   2f518:	mov	r1, r0
   2f51c:	ldr	r0, [r5]
   2f520:	bl	26348 <flatcc_builder_get_user_frame_ptr@@Base>
   2f524:	ldr	r8, [sp, #16]
   2f528:	str	r4, [r0]
   2f52c:	mov	r0, r6
   2f530:	ldrd	r4, [sp]
   2f534:	ldrd	r6, [sp, #8]
   2f538:	add	sp, sp, #20
   2f53c:	pop	{pc}		; (ldr pc, [sp], #4)
   2f540:	mov	r2, r8
   2f544:	mov	r1, r6
   2f548:	ldrd	r6, [sp, #8]
   2f54c:	mov	r0, r5
   2f550:	mov	r3, #33	; 0x21
   2f554:	ldrd	r4, [sp]
   2f558:	ldr	r8, [sp, #16]
   2f55c:	ldr	lr, [sp, #20]
   2f560:	add	sp, sp, #24
   2f564:	b	2cff0 <flatcc_json_parser_set_error@@Base>

0002f568 <flatcc_json_parser_finalize_unions@@Base>:
   2f568:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2f56c:	mov	r4, r0
   2f570:	mov	r5, r3
   2f574:	ldr	r0, [r0]
   2f578:	strd	r6, [sp, #8]
   2f57c:	mov	r6, r1
   2f580:	mov	r1, r3
   2f584:	mov	r7, r2
   2f588:	str	r8, [sp, #16]
   2f58c:	str	lr, [sp, #20]
   2f590:	bl	26348 <flatcc_builder_get_user_frame_ptr@@Base>
   2f594:	ldr	r3, [r0, #4]
   2f598:	cmp	r3, #0
   2f59c:	bne	2f5c4 <flatcc_json_parser_finalize_unions@@Base+0x5c>
   2f5a0:	mov	r1, r5
   2f5a4:	ldr	r0, [r4]
   2f5a8:	bl	262f4 <flatcc_builder_exit_user_frame_at@@Base>
   2f5ac:	mov	r0, r6
   2f5b0:	ldrd	r4, [sp]
   2f5b4:	ldrd	r6, [sp, #8]
   2f5b8:	ldr	r8, [sp, #16]
   2f5bc:	add	sp, sp, #20
   2f5c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2f5c4:	mov	r1, r6
   2f5c8:	mov	r2, r7
   2f5cc:	mov	r3, #27
   2f5d0:	mov	r0, r4
   2f5d4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2f5d8:	mov	r6, r0
   2f5dc:	b	2f5a0 <flatcc_json_parser_finalize_unions@@Base+0x38>

0002f5e0 <flatcc_json_parser_union@@Base>:
   2f5e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2f5e4:	mov	r5, r0
   2f5e8:	mov	r4, r3
   2f5ec:	ldr	r0, [r0]
   2f5f0:	strd	r6, [sp, #8]
   2f5f4:	mov	r6, r2
   2f5f8:	str	r8, [sp, #16]
   2f5fc:	mov	r8, r1
   2f600:	str	lr, [sp, #20]
   2f604:	sub	sp, sp, #16
   2f608:	ldr	r1, [sp, #44]	; 0x2c
   2f60c:	ldrh	r7, [sp, #40]	; 0x28
   2f610:	bl	26348 <flatcc_builder_get_user_frame_ptr@@Base>
   2f614:	add	r3, r4, r4, lsl #1
   2f618:	add	r3, r0, r3, lsl #3
   2f61c:	ldr	r2, [r3, #8]
   2f620:	cmp	r2, #0
   2f624:	bne	2f704 <flatcc_json_parser_union@@Base+0x124>
   2f628:	ldrb	r2, [r3, #20]
   2f62c:	mov	ip, r0
   2f630:	cmp	r2, #0
   2f634:	beq	2f6b4 <flatcc_json_parser_union@@Base+0xd4>
   2f638:	ldrb	r3, [r3, #21]
   2f63c:	cmp	r3, #0
   2f640:	strb	r3, [sp, #8]
   2f644:	beq	2f720 <flatcc_json_parser_union@@Base+0x140>
   2f648:	ldr	lr, [ip, #4]
   2f64c:	mov	r1, r8
   2f650:	mov	r2, r6
   2f654:	mov	r0, r5
   2f658:	add	r8, sp, #8
   2f65c:	sub	lr, lr, #1
   2f660:	str	lr, [ip, #4]
   2f664:	add	ip, sp, #12
   2f668:	str	ip, [sp]
   2f66c:	ldr	ip, [sp, #48]	; 0x30
   2f670:	blx	ip
   2f674:	cmp	r6, r0
   2f678:	mov	r4, r0
   2f67c:	beq	2f6e8 <flatcc_json_parser_union@@Base+0x108>
   2f680:	mov	r1, r7
   2f684:	ldm	r8, {r2, r3}
   2f688:	ldr	r0, [r5]
   2f68c:	bl	29780 <flatcc_builder_table_add_union@@Base>
   2f690:	cmp	r0, #0
   2f694:	beq	2f6e8 <flatcc_json_parser_union@@Base+0x108>
   2f698:	mov	r1, r4
   2f69c:	mov	r2, r6
   2f6a0:	mov	r0, r5
   2f6a4:	mov	r3, #28
   2f6a8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2f6ac:	mov	r4, r0
   2f6b0:	b	2f6e8 <flatcc_json_parser_union@@Base+0x108>
   2f6b4:	ldr	lr, [ip, #4]
   2f6b8:	mov	r2, r6
   2f6bc:	mov	r1, r8
   2f6c0:	mov	r0, r5
   2f6c4:	ldr	r6, [r5, #4]
   2f6c8:	ldr	r4, [r5, #16]
   2f6cc:	add	lr, lr, #1
   2f6d0:	str	lr, [ip, #4]
   2f6d4:	str	r8, [r3, #8]
   2f6d8:	str	r6, [r3, #12]
   2f6dc:	str	r4, [r3, #16]
   2f6e0:	bl	2e138 <flatcc_json_parser_generic_json@@Base>
   2f6e4:	mov	r4, r0
   2f6e8:	mov	r0, r4
   2f6ec:	add	sp, sp, #16
   2f6f0:	ldrd	r4, [sp]
   2f6f4:	ldrd	r6, [sp, #8]
   2f6f8:	ldr	r8, [sp, #16]
   2f6fc:	add	sp, sp, #20
   2f700:	pop	{pc}		; (ldr pc, [sp], #4)
   2f704:	mov	r2, r6
   2f708:	mov	r1, r8
   2f70c:	mov	r0, r5
   2f710:	mov	r3, #28
   2f714:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2f718:	mov	r4, r0
   2f71c:	b	2f6e8 <flatcc_json_parser_union@@Base+0x108>
   2f720:	mov	r2, r6
   2f724:	mov	r1, r8
   2f728:	mov	r0, r5
   2f72c:	mov	r3, #25
   2f730:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2f734:	mov	r4, r0
   2f738:	b	2f6e8 <flatcc_json_parser_union@@Base+0x108>

0002f73c <flatcc_json_parser_union_type@@Base>:
   2f73c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2f740:	mov	r5, r0
   2f744:	add	r4, r3, r3, lsl #1
   2f748:	ldr	r0, [r0]
   2f74c:	strd	r6, [sp, #8]
   2f750:	lsl	r4, r4, #3
   2f754:	mov	r7, r2
   2f758:	strd	r8, [sp, #16]
   2f75c:	mov	r9, r1
   2f760:	strd	sl, [sp, #24]
   2f764:	str	lr, [sp, #32]
   2f768:	sub	sp, sp, #36	; 0x24
   2f76c:	ldrh	r3, [sp, #72]	; 0x48
   2f770:	ldr	r1, [sp, #76]	; 0x4c
   2f774:	str	r3, [sp, #12]
   2f778:	bl	26348 <flatcc_builder_get_user_frame_ptr@@Base>
   2f77c:	add	fp, r0, #8
   2f780:	add	r6, fp, r4
   2f784:	ldrb	r3, [r6, #12]
   2f788:	cmp	r3, #0
   2f78c:	bne	2f8a8 <flatcc_json_parser_union_type@@Base+0x16c>
   2f790:	mov	sl, r0
   2f794:	mov	r1, #0
   2f798:	str	r3, [sp, #20]
   2f79c:	mov	r0, #0
   2f7a0:	mov	r3, #1
   2f7a4:	cmp	r9, r7
   2f7a8:	strd	r0, [sp, #24]
   2f7ac:	strh	r3, [r6, #12]
   2f7b0:	beq	2f8a0 <flatcc_json_parser_union_type@@Base+0x164>
   2f7b4:	add	r0, sp, #24
   2f7b8:	add	r3, sp, #20
   2f7bc:	mov	r2, r7
   2f7c0:	mov	r1, r9
   2f7c4:	str	r0, [sp]
   2f7c8:	mov	r0, r5
   2f7cc:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   2f7d0:	cmp	r9, r0
   2f7d4:	mov	r8, r0
   2f7d8:	bne	2f8c4 <flatcc_json_parser_union_type@@Base+0x188>
   2f7dc:	add	r0, r6, #13
   2f7e0:	mov	r1, r8
   2f7e4:	ldr	r3, [sp, #80]	; 0x50
   2f7e8:	mov	r2, r7
   2f7ec:	str	r0, [sp]
   2f7f0:	mov	r0, r5
   2f7f4:	bl	2d1f8 <flatcc_json_parser_space_ext@@Base+0x114>
   2f7f8:	mov	r8, r0
   2f7fc:	ldr	r1, [fp, r4]
   2f800:	ldr	r3, [sl, #4]
   2f804:	cmp	r1, #0
   2f808:	beq	2f914 <flatcc_json_parser_union_type@@Base+0x1d8>
   2f80c:	cmp	r3, #0
   2f810:	beq	2f960 <flatcc_json_parser_union_type@@Base+0x224>
   2f814:	ldmib	r6, {ip, lr}
   2f818:	sub	r3, r3, #1
   2f81c:	mov	r2, r7
   2f820:	mov	r0, r5
   2f824:	add	r4, sp, #24
   2f828:	ldr	r9, [r5, #16]
   2f82c:	str	r3, [sl, #4]
   2f830:	ldr	sl, [r5, #4]
   2f834:	str	ip, [r5, #4]
   2f838:	add	ip, sp, #28
   2f83c:	str	lr, [r5, #16]
   2f840:	ldrb	r3, [r6, #13]
   2f844:	str	ip, [sp]
   2f848:	ldr	ip, [sp, #84]	; 0x54
   2f84c:	strb	r3, [sp, #24]
   2f850:	blx	ip
   2f854:	cmp	r7, r0
   2f858:	moveq	r8, r7
   2f85c:	beq	2f880 <flatcc_json_parser_union_type@@Base+0x144>
   2f860:	ldm	r4, {r2, r3}
   2f864:	ldr	r0, [r5]
   2f868:	ldr	r1, [sp, #12]
   2f86c:	bl	29780 <flatcc_builder_table_add_union@@Base>
   2f870:	cmp	r0, #0
   2f874:	streq	sl, [r5, #4]
   2f878:	streq	r9, [r5, #16]
   2f87c:	bne	2f928 <flatcc_json_parser_union_type@@Base+0x1ec>
   2f880:	mov	r0, r8
   2f884:	add	sp, sp, #36	; 0x24
   2f888:	ldrd	r4, [sp]
   2f88c:	ldrd	r6, [sp, #8]
   2f890:	ldrd	r8, [sp, #16]
   2f894:	ldrd	sl, [sp, #24]
   2f898:	add	sp, sp, #32
   2f89c:	pop	{pc}		; (ldr pc, [sp], #4)
   2f8a0:	mov	r8, r7
   2f8a4:	b	2f7dc <flatcc_json_parser_union_type@@Base+0xa0>
   2f8a8:	mov	r2, r7
   2f8ac:	mov	r1, r9
   2f8b0:	mov	r0, r5
   2f8b4:	mov	r3, #28
   2f8b8:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2f8bc:	mov	r8, r0
   2f8c0:	b	2f880 <flatcc_json_parser_union_type@@Base+0x144>
   2f8c4:	ldr	r3, [sp, #20]
   2f8c8:	cmp	r3, #0
   2f8cc:	bne	2f944 <flatcc_json_parser_union_type@@Base+0x208>
   2f8d0:	ldrd	r2, [sp, #24]
   2f8d4:	cmp	r3, #0
   2f8d8:	cmpeq	r2, #255	; 0xff
   2f8dc:	strbls	r2, [r6, #13]
   2f8e0:	bls	2f7fc <flatcc_json_parser_union_type@@Base+0xc0>
   2f8e4:	mov	r1, r0
   2f8e8:	mov	r3, #7
   2f8ec:	mov	r2, r7
   2f8f0:	mov	r0, r5
   2f8f4:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2f8f8:	mov	r8, r0
   2f8fc:	cmp	r9, r8
   2f900:	beq	2f7dc <flatcc_json_parser_union_type@@Base+0xa0>
   2f904:	ldr	r1, [fp, r4]
   2f908:	ldr	r3, [sl, #4]
   2f90c:	cmp	r1, #0
   2f910:	bne	2f80c <flatcc_json_parser_union_type@@Base+0xd0>
   2f914:	ldrb	r2, [r6, #13]
   2f918:	cmp	r2, #0
   2f91c:	addne	r3, r3, #1
   2f920:	str	r3, [sl, #4]
   2f924:	b	2f880 <flatcc_json_parser_union_type@@Base+0x144>
   2f928:	mov	r1, r8
   2f92c:	mov	r2, r7
   2f930:	mov	r0, r5
   2f934:	mov	r3, #28
   2f938:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2f93c:	mov	r8, r0
   2f940:	b	2f880 <flatcc_json_parser_union_type@@Base+0x144>
   2f944:	mov	r1, r0
   2f948:	mov	r3, #8
   2f94c:	mov	r2, r7
   2f950:	mov	r0, r5
   2f954:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2f958:	mov	r8, r0
   2f95c:	b	2f8fc <flatcc_json_parser_union_type@@Base+0x1c0>
   2f960:	ldr	r3, [pc, #32]	; 2f988 <flatcc_json_parser_union_type@@Base+0x24c>
   2f964:	movw	r2, #965	; 0x3c5
   2f968:	ldr	r1, [pc, #28]	; 2f98c <flatcc_json_parser_union_type@@Base+0x250>
   2f96c:	ldr	r0, [pc, #28]	; 2f990 <flatcc_json_parser_union_type@@Base+0x254>
   2f970:	add	r3, pc, r3
   2f974:	add	r3, r3, #1984	; 0x7c0
   2f978:	add	r1, pc, r1
   2f97c:	add	r3, r3, #4
   2f980:	add	r0, pc, r0
   2f984:	bl	145e8 <__assert_fail@plt>
   2f988:	andeq	r3, r1, r8, ror lr
   2f98c:	andeq	r4, r1, ip, ror sl
   2f990:	ldrdeq	r4, [r1], -r8

0002f994 <flatcc_json_parser_union_vector@@Base>:
   2f994:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2f998:	mov	r4, r3
   2f99c:	mov	r5, r0
   2f9a0:	ldr	r0, [r0]
   2f9a4:	strd	r6, [sp, #8]
   2f9a8:	mov	r6, r1
   2f9ac:	ldr	r1, [sp, #36]	; 0x24
   2f9b0:	strd	r8, [sp, #16]
   2f9b4:	mov	r9, r2
   2f9b8:	ldrh	r8, [sp, #32]
   2f9bc:	str	sl, [sp, #24]
   2f9c0:	str	lr, [sp, #28]
   2f9c4:	ldr	r7, [sp, #40]	; 0x28
   2f9c8:	bl	26348 <flatcc_builder_get_user_frame_ptr@@Base>
   2f9cc:	add	r3, r4, r4, lsl #1
   2f9d0:	add	ip, r0, #8
   2f9d4:	lsl	r3, r3, #3
   2f9d8:	ldr	r2, [ip, r3]
   2f9dc:	add	r4, ip, r3
   2f9e0:	cmp	r2, #0
   2f9e4:	bne	2fa84 <flatcc_json_parser_union_vector@@Base+0xf0>
   2f9e8:	ldrb	r1, [r4, #12]
   2f9ec:	mov	lr, r0
   2f9f0:	ldr	r2, [r0, #4]
   2f9f4:	cmp	r1, #0
   2f9f8:	bne	2fa40 <flatcc_json_parser_union_vector@@Base+0xac>
   2f9fc:	ldr	r8, [r5, #4]
   2fa00:	add	r1, r2, #1
   2fa04:	mov	r0, r5
   2fa08:	mov	r2, r9
   2fa0c:	ldr	r7, [r5, #16]
   2fa10:	ldr	sl, [sp, #24]
   2fa14:	str	r1, [lr, #4]
   2fa18:	mov	r1, r6
   2fa1c:	str	r8, [r4, #4]
   2fa20:	str	r7, [r4, #8]
   2fa24:	str	r6, [ip, r3]
   2fa28:	ldrd	r4, [sp]
   2fa2c:	ldrd	r6, [sp, #8]
   2fa30:	ldrd	r8, [sp, #16]
   2fa34:	ldr	lr, [sp, #28]
   2fa38:	add	sp, sp, #32
   2fa3c:	b	2e138 <flatcc_json_parser_generic_json@@Base>
   2fa40:	sub	ip, r2, #1
   2fa44:	ldr	r3, [r4, #20]
   2fa48:	mov	r2, r9
   2fa4c:	mov	r1, r6
   2fa50:	mov	r0, r5
   2fa54:	ldr	sl, [sp, #24]
   2fa58:	str	ip, [lr, #4]
   2fa5c:	str	r8, [sp, #36]	; 0x24
   2fa60:	str	r7, [sp, #40]	; 0x28
   2fa64:	ldr	ip, [r4, #16]
   2fa68:	ldrd	r4, [sp]
   2fa6c:	ldrd	r6, [sp, #8]
   2fa70:	str	ip, [sp, #32]
   2fa74:	ldrd	r8, [sp, #16]
   2fa78:	ldr	lr, [sp, #28]
   2fa7c:	add	sp, sp, #32
   2fa80:	b	2d400 <flatcc_json_parser_space_ext@@Base+0x31c>
   2fa84:	mov	r2, r9
   2fa88:	mov	r1, r6
   2fa8c:	ldrd	r6, [sp, #8]
   2fa90:	mov	r0, r5
   2fa94:	mov	r3, #28
   2fa98:	ldrd	r4, [sp]
   2fa9c:	ldrd	r8, [sp, #16]
   2faa0:	ldr	sl, [sp, #24]
   2faa4:	ldr	lr, [sp, #28]
   2faa8:	add	sp, sp, #32
   2faac:	b	2cff0 <flatcc_json_parser_set_error@@Base>

0002fab0 <flatcc_json_parser_union_type_vector@@Base>:
   2fab0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2fab4:	add	r4, r3, r3, lsl #1
   2fab8:	mov	r5, r2
   2fabc:	strd	r6, [sp, #8]
   2fac0:	mov	r6, r0
   2fac4:	mov	r7, r1
   2fac8:	strd	r8, [sp, #16]
   2facc:	strd	sl, [sp, #24]
   2fad0:	str	lr, [sp, #32]
   2fad4:	sub	sp, sp, #52	; 0x34
   2fad8:	ldrh	r3, [sp, #88]	; 0x58
   2fadc:	ldr	r0, [r0]
   2fae0:	ldr	r1, [sp, #92]	; 0x5c
   2fae4:	str	r3, [sp, #24]
   2fae8:	ldr	fp, [sp, #104]	; 0x68
   2faec:	bl	26348 <flatcc_builder_get_user_frame_ptr@@Base>
   2faf0:	lsl	r3, r4, #3
   2faf4:	add	r0, r0, #8
   2faf8:	str	r3, [sp, #28]
   2fafc:	add	r3, r0, r3
   2fb00:	str	r3, [sp, #20]
   2fb04:	ldrb	r3, [r3, #12]
   2fb08:	cmp	r3, #0
   2fb0c:	bne	2fc00 <flatcc_json_parser_union_type_vector@@Base+0x150>
   2fb10:	ldr	ip, [sp, #20]
   2fb14:	mov	r0, #1
   2fb18:	mvn	r3, #0
   2fb1c:	mov	r2, r0
   2fb20:	mov	r1, r0
   2fb24:	strb	r0, [ip, #12]
   2fb28:	ldr	r0, [r6]
   2fb2c:	bl	275c8 <flatcc_builder_start_vector@@Base>
   2fb30:	cmp	r0, #0
   2fb34:	beq	2fb70 <flatcc_json_parser_union_type_vector@@Base+0xc0>
   2fb38:	mov	r2, r5
   2fb3c:	mov	r1, r7
   2fb40:	mov	r0, r6
   2fb44:	mov	r3, #33	; 0x21
   2fb48:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2fb4c:	mov	r4, r0
   2fb50:	mov	r0, r4
   2fb54:	add	sp, sp, #52	; 0x34
   2fb58:	ldrd	r4, [sp]
   2fb5c:	ldrd	r6, [sp, #8]
   2fb60:	ldrd	r8, [sp, #16]
   2fb64:	ldrd	sl, [sp, #24]
   2fb68:	add	sp, sp, #32
   2fb6c:	pop	{pc}		; (ldr pc, [sp], #4)
   2fb70:	cmp	r7, r5
   2fb74:	beq	2fb84 <flatcc_json_parser_union_type_vector@@Base+0xd4>
   2fb78:	ldrb	r3, [r7]
   2fb7c:	cmp	r3, #91	; 0x5b
   2fb80:	beq	2fc1c <flatcc_json_parser_union_type_vector@@Base+0x16c>
   2fb84:	mov	r1, r7
   2fb88:	mov	r3, #22
   2fb8c:	mov	r2, r5
   2fb90:	mov	r0, r6
   2fb94:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2fb98:	mov	r4, r0
   2fb9c:	ldr	r0, [r6]
   2fba0:	bl	286b4 <flatcc_builder_vector_count@@Base>
   2fba4:	ldr	r3, [sp, #20]
   2fba8:	mov	r7, r0
   2fbac:	mov	r1, r0
   2fbb0:	ldr	r0, [r6]
   2fbb4:	str	r7, [r3, #16]
   2fbb8:	bl	261e8 <flatcc_builder_enter_user_frame@@Base>
   2fbbc:	mov	r1, r0
   2fbc0:	mov	r8, r0
   2fbc4:	ldr	r0, [r6]
   2fbc8:	bl	26348 <flatcc_builder_get_user_frame_ptr@@Base>
   2fbcc:	mov	r9, r0
   2fbd0:	ldr	r0, [r6]
   2fbd4:	bl	286c0 <flatcc_builder_vector_edit@@Base>
   2fbd8:	mov	r1, r0
   2fbdc:	mov	r2, r7
   2fbe0:	mov	r0, r9
   2fbe4:	bl	1451c <memcpy@plt>
   2fbe8:	ldr	r0, [r6]
   2fbec:	bl	285b4 <flatcc_builder_end_vector@@Base>
   2fbf0:	subs	r9, r0, #0
   2fbf4:	bne	2fd8c <flatcc_json_parser_union_type_vector@@Base+0x2dc>
   2fbf8:	mov	r7, r4
   2fbfc:	b	2fb38 <flatcc_json_parser_union_type_vector@@Base+0x88>
   2fc00:	mov	r2, r5
   2fc04:	mov	r1, r7
   2fc08:	mov	r0, r6
   2fc0c:	mov	r3, #28
   2fc10:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2fc14:	mov	r4, r0
   2fc18:	b	2fb50 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2fc1c:	add	r1, r7, #1
   2fc20:	sub	r3, r5, r1
   2fc24:	cmp	r3, #1
   2fc28:	ble	2fc50 <flatcc_json_parser_union_type_vector@@Base+0x1a0>
   2fc2c:	ldrb	r3, [r7, #1]
   2fc30:	cmp	r3, #32
   2fc34:	movhi	r7, r1
   2fc38:	bhi	2fc60 <flatcc_json_parser_union_type_vector@@Base+0x1b0>
   2fc3c:	bne	2fc50 <flatcc_json_parser_union_type_vector@@Base+0x1a0>
   2fc40:	ldrb	r3, [r7, #2]
   2fc44:	cmp	r3, #32
   2fc48:	addhi	r7, r7, #2
   2fc4c:	bhi	2fc60 <flatcc_json_parser_union_type_vector@@Base+0x1b0>
   2fc50:	mov	r2, r5
   2fc54:	mov	r0, r6
   2fc58:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2fc5c:	mov	r7, r0
   2fc60:	cmp	r5, r7
   2fc64:	beq	2fc74 <flatcc_json_parser_union_type_vector@@Base+0x1c4>
   2fc68:	ldrb	r3, [r7]
   2fc6c:	cmp	r3, #93	; 0x5d
   2fc70:	beq	2ff34 <flatcc_json_parser_union_type_vector@@Base+0x484>
   2fc74:	mov	r9, #0
   2fc78:	mov	r1, #1
   2fc7c:	ldr	r0, [r6]
   2fc80:	bl	26c80 <flatcc_builder_extend_vector@@Base>
   2fc84:	subs	r8, r0, #0
   2fc88:	beq	2fb38 <flatcc_json_parser_union_type_vector@@Base+0x88>
   2fc8c:	mov	r2, #0
   2fc90:	mov	r3, #0
   2fc94:	strb	r9, [sp, #35]	; 0x23
   2fc98:	cmp	r5, r7
   2fc9c:	str	r9, [sp, #36]	; 0x24
   2fca0:	strd	r2, [sp, #40]	; 0x28
   2fca4:	beq	2fe48 <flatcc_json_parser_union_type_vector@@Base+0x398>
   2fca8:	add	r0, sp, #40	; 0x28
   2fcac:	add	r3, sp, #36	; 0x24
   2fcb0:	mov	r2, r5
   2fcb4:	mov	r1, r7
   2fcb8:	str	r0, [sp]
   2fcbc:	mov	r0, r6
   2fcc0:	bl	2ed94 <flatcc_json_parser_integer@@Base>
   2fcc4:	cmp	r7, r0
   2fcc8:	mov	sl, r0
   2fccc:	bne	2fe50 <flatcc_json_parser_union_type_vector@@Base+0x3a0>
   2fcd0:	add	r0, sp, #35	; 0x23
   2fcd4:	mov	r2, r5
   2fcd8:	ldr	r3, [sp, #96]	; 0x60
   2fcdc:	mov	r1, sl
   2fce0:	str	r0, [sp]
   2fce4:	mov	r0, r6
   2fce8:	bl	2d1f8 <flatcc_json_parser_space_ext@@Base+0x114>
   2fcec:	cmp	r5, r0
   2fcf0:	cmpne	r0, sl
   2fcf4:	mov	r4, r0
   2fcf8:	beq	2fbf8 <flatcc_json_parser_union_type_vector@@Base+0x148>
   2fcfc:	ldrb	r0, [sp, #35]	; 0x23
   2fd00:	blx	fp
   2fd04:	cmp	r0, #0
   2fd08:	bne	2fe40 <flatcc_json_parser_union_type_vector@@Base+0x390>
   2fd0c:	ldr	r3, [r6, #8]
   2fd10:	tst	r3, #1
   2fd14:	beq	2ffb0 <flatcc_json_parser_union_type_vector@@Base+0x500>
   2fd18:	mov	r2, r0
   2fd1c:	strb	r0, [sp, #35]	; 0x23
   2fd20:	sub	r3, r5, r4
   2fd24:	strb	r2, [r8]
   2fd28:	cmp	r3, #1
   2fd2c:	ble	2fd40 <flatcc_json_parser_union_type_vector@@Base+0x290>
   2fd30:	ldrb	r3, [r4]
   2fd34:	cmp	r3, #32
   2fd38:	bhi	2fd54 <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   2fd3c:	beq	2fed8 <flatcc_json_parser_union_type_vector@@Base+0x428>
   2fd40:	mov	r1, r4
   2fd44:	mov	r2, r5
   2fd48:	mov	r0, r6
   2fd4c:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2fd50:	mov	r4, r0
   2fd54:	cmp	r5, r4
   2fd58:	beq	2fb9c <flatcc_json_parser_union_type_vector@@Base+0xec>
   2fd5c:	ldrb	r3, [r4]
   2fd60:	cmp	r3, #44	; 0x2c
   2fd64:	beq	2feec <flatcc_json_parser_union_type_vector@@Base+0x43c>
   2fd68:	cmp	r3, #93	; 0x5d
   2fd6c:	beq	2fea0 <flatcc_json_parser_union_type_vector@@Base+0x3f0>
   2fd70:	mov	r1, r4
   2fd74:	mov	r3, #9
   2fd78:	mov	r2, r5
   2fd7c:	mov	r0, r6
   2fd80:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2fd84:	mov	r4, r0
   2fd88:	b	2fb9c <flatcc_json_parser_union_type_vector@@Base+0xec>
   2fd8c:	ldr	r3, [sp, #24]
   2fd90:	ldr	r0, [r6]
   2fd94:	sub	r1, r3, #1
   2fd98:	bl	295f0 <flatcc_builder_table_add_offset@@Base>
   2fd9c:	cmp	r0, #0
   2fda0:	beq	2fbf8 <flatcc_json_parser_union_type_vector@@Base+0x148>
   2fda4:	str	r9, [r0]
   2fda8:	ldr	r0, [r6]
   2fdac:	ldr	r1, [sp, #92]	; 0x5c
   2fdb0:	bl	26348 <flatcc_builder_get_user_frame_ptr@@Base>
   2fdb4:	ldr	r3, [sp, #28]
   2fdb8:	add	r2, r0, #8
   2fdbc:	ldr	r1, [r2, r3]
   2fdc0:	add	r2, r2, r3
   2fdc4:	ldr	r3, [r0, #4]
   2fdc8:	str	r8, [r2, #20]
   2fdcc:	cmp	r1, #0
   2fdd0:	addeq	r3, r3, #1
   2fdd4:	streq	r3, [r0, #4]
   2fdd8:	beq	2fb50 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2fddc:	cmp	r3, #0
   2fde0:	beq	2ffe8 <flatcc_json_parser_union_type_vector@@Base+0x538>
   2fde4:	sub	lr, r3, #1
   2fde8:	mov	r3, r8
   2fdec:	ldr	ip, [r2, #4]
   2fdf0:	ldr	r8, [r2, #8]
   2fdf4:	mov	r2, r5
   2fdf8:	str	lr, [r0, #4]
   2fdfc:	mov	r0, r6
   2fe00:	ldr	lr, [sp, #24]
   2fe04:	str	r7, [sp]
   2fe08:	str	lr, [sp, #4]
   2fe0c:	ldr	lr, [sp, #100]	; 0x64
   2fe10:	str	lr, [sp, #8]
   2fe14:	ldr	r7, [r6, #16]
   2fe18:	str	r8, [r6, #16]
   2fe1c:	ldr	r8, [r6, #4]
   2fe20:	str	ip, [r6, #4]
   2fe24:	bl	2d400 <flatcc_json_parser_space_ext@@Base+0x31c>
   2fe28:	cmp	r5, r0
   2fe2c:	moveq	r4, r5
   2fe30:	beq	2fb50 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2fe34:	str	r8, [r6, #4]
   2fe38:	str	r7, [r6, #16]
   2fe3c:	b	2fb50 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2fe40:	ldrb	r2, [sp, #35]	; 0x23
   2fe44:	b	2fd20 <flatcc_json_parser_union_type_vector@@Base+0x270>
   2fe48:	mov	sl, r5
   2fe4c:	b	2fcd0 <flatcc_json_parser_union_type_vector@@Base+0x220>
   2fe50:	ldr	r3, [sp, #36]	; 0x24
   2fe54:	cmp	r3, #0
   2fe58:	bne	2ff6c <flatcc_json_parser_union_type_vector@@Base+0x4bc>
   2fe5c:	ldrd	r0, [sp, #40]	; 0x28
   2fe60:	cmp	r1, #0
   2fe64:	cmpeq	r0, #255	; 0xff
   2fe68:	uxtbls	r0, r0
   2fe6c:	movls	r4, sl
   2fe70:	strbls	r0, [sp, #35]	; 0x23
   2fe74:	bls	2fd00 <flatcc_json_parser_union_type_vector@@Base+0x250>
   2fe78:	mov	r1, sl
   2fe7c:	mov	r3, #7
   2fe80:	mov	r2, r5
   2fe84:	mov	r0, r6
   2fe88:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2fe8c:	mov	r4, r0
   2fe90:	cmp	r7, r4
   2fe94:	bne	2fcfc <flatcc_json_parser_union_type_vector@@Base+0x24c>
   2fe98:	mov	sl, r7
   2fe9c:	b	2fcd0 <flatcc_json_parser_union_type_vector@@Base+0x220>
   2fea0:	add	r1, r4, #1
   2fea4:	sub	r3, r5, r1
   2fea8:	cmp	r3, #1
   2feac:	ble	2fec4 <flatcc_json_parser_union_type_vector@@Base+0x414>
   2feb0:	ldrb	r3, [r4, #1]
   2feb4:	cmp	r3, #32
   2feb8:	movhi	r4, r1
   2febc:	bhi	2fb9c <flatcc_json_parser_union_type_vector@@Base+0xec>
   2fec0:	beq	2ff88 <flatcc_json_parser_union_type_vector@@Base+0x4d8>
   2fec4:	mov	r2, r5
   2fec8:	mov	r0, r6
   2fecc:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2fed0:	mov	r4, r0
   2fed4:	b	2fb9c <flatcc_json_parser_union_type_vector@@Base+0xec>
   2fed8:	ldrb	r3, [r4, #1]
   2fedc:	cmp	r3, #32
   2fee0:	addhi	r4, r4, #1
   2fee4:	bls	2fd40 <flatcc_json_parser_union_type_vector@@Base+0x290>
   2fee8:	b	2fd54 <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   2feec:	add	r7, r4, #1
   2fef0:	sub	r3, r5, r7
   2fef4:	cmp	r3, #1
   2fef8:	ble	2ff0c <flatcc_json_parser_union_type_vector@@Base+0x45c>
   2fefc:	ldrb	r3, [r4, #1]
   2ff00:	cmp	r3, #32
   2ff04:	bhi	2ff20 <flatcc_json_parser_union_type_vector@@Base+0x470>
   2ff08:	beq	2ff9c <flatcc_json_parser_union_type_vector@@Base+0x4ec>
   2ff0c:	mov	r1, r7
   2ff10:	mov	r2, r5
   2ff14:	mov	r0, r6
   2ff18:	bl	2d0e4 <flatcc_json_parser_space_ext@@Base>
   2ff1c:	mov	r7, r0
   2ff20:	cmp	r5, r7
   2ff24:	beq	2ffcc <flatcc_json_parser_union_type_vector@@Base+0x51c>
   2ff28:	ldrb	r3, [r7]
   2ff2c:	cmp	r3, #93	; 0x5d
   2ff30:	bne	2fc78 <flatcc_json_parser_union_type_vector@@Base+0x1c8>
   2ff34:	add	r4, r7, #1
   2ff38:	sub	r3, r5, r4
   2ff3c:	cmp	r3, #1
   2ff40:	ble	2ff64 <flatcc_json_parser_union_type_vector@@Base+0x4b4>
   2ff44:	ldrb	r3, [r7, #1]
   2ff48:	cmp	r3, #32
   2ff4c:	bhi	2fb9c <flatcc_json_parser_union_type_vector@@Base+0xec>
   2ff50:	bne	2ff64 <flatcc_json_parser_union_type_vector@@Base+0x4b4>
   2ff54:	ldrb	r3, [r7, #2]
   2ff58:	cmp	r3, #32
   2ff5c:	addhi	r4, r7, #2
   2ff60:	bhi	2fb9c <flatcc_json_parser_union_type_vector@@Base+0xec>
   2ff64:	mov	r1, r4
   2ff68:	b	2fec4 <flatcc_json_parser_union_type_vector@@Base+0x414>
   2ff6c:	mov	r1, r0
   2ff70:	mov	r3, #8
   2ff74:	mov	r2, r5
   2ff78:	mov	r0, r6
   2ff7c:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2ff80:	mov	r4, r0
   2ff84:	b	2fe90 <flatcc_json_parser_union_type_vector@@Base+0x3e0>
   2ff88:	ldrb	r3, [r4, #2]
   2ff8c:	cmp	r3, #32
   2ff90:	addhi	r4, r4, #2
   2ff94:	bls	2fec4 <flatcc_json_parser_union_type_vector@@Base+0x414>
   2ff98:	b	2fb9c <flatcc_json_parser_union_type_vector@@Base+0xec>
   2ff9c:	ldrb	r3, [r4, #2]
   2ffa0:	cmp	r3, #32
   2ffa4:	addhi	r7, r4, #2
   2ffa8:	bls	2ff0c <flatcc_json_parser_union_type_vector@@Base+0x45c>
   2ffac:	b	2ff20 <flatcc_json_parser_union_type_vector@@Base+0x470>
   2ffb0:	mov	r1, r4
   2ffb4:	mov	r2, r5
   2ffb8:	mov	r0, r6
   2ffbc:	mov	r3, #15
   2ffc0:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2ffc4:	mov	r4, r0
   2ffc8:	b	2fb50 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2ffcc:	mov	r3, #9
   2ffd0:	mov	r2, r5
   2ffd4:	mov	r1, r5
   2ffd8:	mov	r0, r6
   2ffdc:	bl	2cff0 <flatcc_json_parser_set_error@@Base>
   2ffe0:	mov	r4, r0
   2ffe4:	b	2fb9c <flatcc_json_parser_union_type_vector@@Base+0xec>
   2ffe8:	ldr	r3, [pc, #32]	; 30010 <flatcc_json_parser_union_type_vector@@Base+0x560>
   2ffec:	movw	r2, #1122	; 0x462
   2fff0:	ldr	r1, [pc, #28]	; 30014 <flatcc_json_parser_union_type_vector@@Base+0x564>
   2fff4:	ldr	r0, [pc, #28]	; 30018 <flatcc_json_parser_union_type_vector@@Base+0x568>
   2fff8:	add	r3, pc, r3
   2fffc:	add	r3, r3, #2016	; 0x7e0
   30000:	add	r1, pc, r1
   30004:	add	r3, r3, #4
   30008:	add	r0, pc, r0
   3000c:	bl	145e8 <__assert_fail@plt>
   30010:	strdeq	r3, [r1], -r0
   30014:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   30018:	andeq	r4, r1, r0, asr r4

0003001c <flatcc_json_parser_table_as_root@@Base>:
   3001c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   30020:	subs	r4, r1, #0
   30024:	mov	r5, r2
   30028:	strd	r6, [sp, #8]
   3002c:	mov	r2, #32
   30030:	mov	r1, #0
   30034:	strd	r8, [sp, #16]
   30038:	mov	r8, r0
   3003c:	add	r6, r5, r3
   30040:	str	lr, [sp, #24]
   30044:	sub	sp, sp, #52	; 0x34
   30048:	ldr	r9, [sp, #80]	; 0x50
   3004c:	addeq	r4, sp, #4
   30050:	add	r0, r4, #12
   30054:	bl	14594 <memset@plt>
   30058:	mov	ip, #1
   3005c:	mov	r2, #0
   30060:	str	r8, [r4]
   30064:	mov	r0, r8
   30068:	ldr	r1, [sp, #84]	; 0x54
   3006c:	asr	r7, r9, #1
   30070:	stmib	r4, {r5, r9}
   30074:	str	ip, [r4, #16]
   30078:	and	r7, r7, #2
   3007c:	str	r5, [r4, #28]
   30080:	mov	r3, r7
   30084:	str	r6, [r4, #32]
   30088:	str	r5, [r4, #36]	; 0x24
   3008c:	bl	268a0 <flatcc_builder_start_buffer@@Base>
   30090:	cmp	r0, #0
   30094:	bne	300f4 <flatcc_json_parser_table_as_root@@Base+0xd8>
   30098:	mov	r2, r6
   3009c:	mov	r3, sp
   300a0:	ldr	ip, [sp, #88]	; 0x58
   300a4:	mov	r1, r5
   300a8:	mov	r0, r4
   300ac:	blx	ip
   300b0:	ldr	r6, [r4, #24]
   300b4:	cmp	r6, #0
   300b8:	beq	300d8 <flatcc_json_parser_table_as_root@@Base+0xbc>
   300bc:	mov	r0, r6
   300c0:	add	sp, sp, #52	; 0x34
   300c4:	ldrd	r4, [sp]
   300c8:	ldrd	r6, [sp, #8]
   300cc:	ldrd	r8, [sp, #16]
   300d0:	add	sp, sp, #24
   300d4:	pop	{pc}		; (ldr pc, [sp], #4)
   300d8:	mov	r0, r8
   300dc:	ldr	r1, [sp]
   300e0:	bl	2697c <flatcc_builder_end_buffer@@Base>
   300e4:	cmp	r0, #0
   300e8:	beq	300f4 <flatcc_json_parser_table_as_root@@Base+0xd8>
   300ec:	str	r5, [r4, #40]	; 0x28
   300f0:	b	300bc <flatcc_json_parser_table_as_root@@Base+0xa0>
   300f4:	mvn	r6, #0
   300f8:	b	300bc <flatcc_json_parser_table_as_root@@Base+0xa0>

000300fc <flatcc_json_parser_struct_as_root@@Base>:
   300fc:	b	3001c <flatcc_json_parser_table_as_root@@Base>
   30100:	cmp	r0, #1000	; 0x3e8
   30104:	strd	r4, [sp, #-12]!
   30108:	str	lr, [sp, #8]
   3010c:	bcc	3020c <flatcc_json_parser_struct_as_root@@Base+0x110>
   30110:	movw	r3, #34079	; 0x851f
   30114:	movt	r3, #20971	; 0x51eb
   30118:	ldr	r4, [pc, #316]	; 3025c <flatcc_json_parser_struct_as_root@@Base+0x160>
   3011c:	mov	r2, #100	; 0x64
   30120:	movw	ip, #9999	; 0x270f
   30124:	umull	lr, r3, r3, r0
   30128:	cmp	r0, ip
   3012c:	lsr	r3, r3, #5
   30130:	add	r4, pc, r4
   30134:	uxth	ip, r3
   30138:	mls	r3, r2, r3, r0
   3013c:	mov	r2, #0
   30140:	uxth	r3, r3
   30144:	add	r5, r4, r3, lsl #1
   30148:	bls	301c4 <flatcc_json_parser_struct_as_root@@Base+0xc8>
   3014c:	strb	r2, [r1, #5]
   30150:	add	lr, r1, #3
   30154:	mov	r2, #5
   30158:	ldrb	r3, [r4, r3, lsl #1]
   3015c:	strb	r3, [r1, #3]
   30160:	ldrb	r3, [r5, #1]
   30164:	strb	r3, [r1, #4]
   30168:	movw	r3, #34079	; 0x851f
   3016c:	movt	r3, #20971	; 0x51eb
   30170:	ldr	r1, [pc, #232]	; 30260 <flatcc_json_parser_struct_as_root@@Base+0x164>
   30174:	mov	r0, #100	; 0x64
   30178:	sub	r4, lr, #2
   3017c:	umull	r5, r3, r3, ip
   30180:	lsr	r3, r3, #5
   30184:	add	r1, pc, r1
   30188:	mls	ip, r0, r3, ip
   3018c:	uxth	r0, r3
   30190:	mov	r3, r1
   30194:	uxth	ip, ip
   30198:	ldrb	r1, [r1, ip, lsl #1]
   3019c:	add	r3, r3, ip, lsl #1
   301a0:	strb	r1, [lr, #-2]
   301a4:	ldrb	r3, [r3, #1]
   301a8:	strb	r3, [lr, #-1]
   301ac:	add	r3, r0, #48	; 0x30
   301b0:	mov	r0, r2
   301b4:	strb	r3, [r4, #-1]
   301b8:	ldrd	r4, [sp]
   301bc:	add	sp, sp, #8
   301c0:	pop	{pc}		; (ldr pc, [sp], #4)
   301c4:	strb	r2, [r1, #4]
   301c8:	add	r0, r1, #2
   301cc:	mov	r2, #4
   301d0:	ldrb	r3, [r4, r3, lsl #1]
   301d4:	strb	r3, [r1, #2]
   301d8:	ldrb	r3, [r5, #1]
   301dc:	strb	r3, [r1, #3]
   301e0:	ldr	r3, [pc, #124]	; 30264 <flatcc_json_parser_struct_as_root@@Base+0x168>
   301e4:	add	r3, pc, r3
   301e8:	ldrb	r1, [r3, ip, lsl #1]
   301ec:	add	ip, r3, ip, lsl #1
   301f0:	strb	r1, [r0, #-2]
   301f4:	ldrb	r3, [ip, #1]
   301f8:	strb	r3, [r0, #-1]
   301fc:	mov	r0, r2
   30200:	ldrd	r4, [sp]
   30204:	add	sp, sp, #8
   30208:	pop	{pc}		; (ldr pc, [sp], #4)
   3020c:	cmp	r0, #99	; 0x63
   30210:	bhi	30230 <flatcc_json_parser_struct_as_root@@Base+0x134>
   30214:	cmp	r0, #9
   30218:	mov	r3, #0
   3021c:	bhi	30248 <flatcc_json_parser_struct_as_root@@Base+0x14c>
   30220:	add	r4, r1, #1
   30224:	mov	r2, #1
   30228:	strb	r3, [r1, #1]
   3022c:	b	301ac <flatcc_json_parser_struct_as_root@@Base+0xb0>
   30230:	mov	r3, #0
   30234:	mov	ip, r0
   30238:	add	lr, r1, #3
   3023c:	mov	r2, #3
   30240:	strb	r3, [r1, #3]
   30244:	b	30168 <flatcc_json_parser_struct_as_root@@Base+0x6c>
   30248:	mov	ip, r0
   3024c:	mov	r2, #2
   30250:	strb	r3, [r1, #2]
   30254:	add	r0, r1, #2
   30258:	b	301e0 <flatcc_json_parser_struct_as_root@@Base+0xe4>
   3025c:	andeq	r4, r1, r8, lsr r3
   30260:	andeq	r4, r1, r4, ror #5
   30264:	andeq	r4, r1, r4, lsl #5
   30268:	movw	r2, #9999	; 0x270f
   3026c:	mov	r3, r0
   30270:	strd	r4, [sp, #-32]!	; 0xffffffe0
   30274:	cmp	r0, r2
   30278:	strd	r6, [sp, #8]
   3027c:	strd	r8, [sp, #16]
   30280:	str	sl, [sp, #24]
   30284:	str	lr, [sp, #28]
   30288:	bls	303c8 <flatcc_json_parser_struct_as_root@@Base+0x2cc>
   3028c:	movw	r2, #34079	; 0x851f
   30290:	movt	r2, #20971	; 0x51eb
   30294:	ldr	r4, [pc, #744]	; 30584 <flatcc_json_parser_struct_as_root@@Base+0x488>
   30298:	mov	r5, #100	; 0x64
   3029c:	movw	lr, #5977	; 0x1759
   302a0:	movt	lr, #53687	; 0xd1b7
   302a4:	umull	ip, r0, r2, r0
   302a8:	movw	ip, #38527	; 0x967f
   302ac:	movt	ip, #152	; 0x98
   302b0:	cmp	r3, ip
   302b4:	umull	r6, lr, lr, r3
   302b8:	lsr	ip, r0, #5
   302bc:	add	r4, pc, r4
   302c0:	lsr	lr, lr, #13
   302c4:	umull	r6, r0, r2, ip
   302c8:	mls	r7, r5, ip, r3
   302cc:	lsr	r0, r0, #5
   302d0:	add	r6, r4, r7, lsl #1
   302d4:	mls	r0, r5, r0, ip
   302d8:	add	ip, r4, r0, lsl #1
   302dc:	bls	30430 <flatcc_json_parser_struct_as_root@@Base+0x334>
   302e0:	umull	r0, r8, r2, lr
   302e4:	movw	r0, #56963	; 0xde83
   302e8:	movt	r0, #17179	; 0x431b
   302ec:	movw	r9, #51711	; 0xc9ff
   302f0:	movt	r9, #15258	; 0x3b9a
   302f4:	umull	sl, r0, r0, r3
   302f8:	cmp	r3, r9
   302fc:	lsr	r8, r8, #5
   30300:	mls	r8, r5, r8, lr
   30304:	lsr	lr, r0, #18
   30308:	add	r8, r4, r8, lsl #1
   3030c:	bhi	304c8 <flatcc_json_parser_struct_as_root@@Base+0x3cc>
   30310:	movw	r2, #57599	; 0xe0ff
   30314:	movt	r2, #1525	; 0x5f5
   30318:	cmp	r3, r2
   3031c:	mov	r3, #0
   30320:	bls	30548 <flatcc_json_parser_struct_as_root@@Base+0x44c>
   30324:	strb	r3, [r1, #9]
   30328:	add	r5, r1, #7
   3032c:	mov	r0, #9
   30330:	ldrb	r3, [r4, r7, lsl #1]
   30334:	strb	r3, [r1, #7]
   30338:	ldrb	r3, [r6, #1]
   3033c:	mov	r6, ip
   30340:	mov	ip, r8
   30344:	strb	r3, [r1, #8]
   30348:	movw	r3, #34079	; 0x851f
   3034c:	movt	r3, #20971	; 0x51eb
   30350:	ldrb	r7, [r6]
   30354:	mov	r4, #100	; 0x64
   30358:	sub	r1, r5, #2
   3035c:	umull	r2, r3, r3, lr
   30360:	ldr	r2, [pc, #544]	; 30588 <flatcc_json_parser_struct_as_root@@Base+0x48c>
   30364:	lsr	r3, r3, #5
   30368:	strb	r7, [r5, #-2]
   3036c:	ldrb	r6, [r6, #1]
   30370:	add	r2, pc, r2
   30374:	mls	lr, r4, r3, lr
   30378:	add	r2, r2, lr, lsl #1
   3037c:	strb	r6, [r5, #-1]
   30380:	ldrb	r4, [ip]
   30384:	sub	lr, r1, #2
   30388:	strb	r4, [r1, #-2]
   3038c:	ldrb	ip, [ip, #1]
   30390:	strb	ip, [r1, #-1]
   30394:	ldrb	r1, [r2]
   30398:	sub	ip, lr, #2
   3039c:	strb	r1, [lr, #-2]
   303a0:	ldrb	r2, [r2, #1]
   303a4:	strb	r2, [lr, #-1]
   303a8:	add	r3, r3, #48	; 0x30
   303ac:	strb	r3, [ip, #-1]
   303b0:	ldrd	r4, [sp]
   303b4:	ldrd	r6, [sp, #8]
   303b8:	ldrd	r8, [sp, #16]
   303bc:	ldr	sl, [sp, #24]
   303c0:	add	sp, sp, #28
   303c4:	pop	{pc}		; (ldr pc, [sp], #4)
   303c8:	cmp	r0, #99	; 0x63
   303cc:	bls	30414 <flatcc_json_parser_struct_as_root@@Base+0x318>
   303d0:	movw	ip, #34079	; 0x851f
   303d4:	movt	ip, #20971	; 0x51eb
   303d8:	ldr	r2, [pc, #428]	; 3058c <flatcc_json_parser_struct_as_root@@Base+0x490>
   303dc:	mov	r0, #100	; 0x64
   303e0:	cmp	r3, #1000	; 0x3e8
   303e4:	umull	lr, ip, ip, r3
   303e8:	lsr	ip, ip, #5
   303ec:	add	r2, pc, r2
   303f0:	mov	lr, ip
   303f4:	mls	r3, r0, ip, r3
   303f8:	add	r2, r2, r3, lsl #1
   303fc:	bcc	304b0 <flatcc_json_parser_struct_as_root@@Base+0x3b4>
   30400:	mov	ip, #0
   30404:	add	r3, r1, #4
   30408:	mov	r0, #4
   3040c:	strb	ip, [r1, #4]
   30410:	b	3047c <flatcc_json_parser_struct_as_root@@Base+0x380>
   30414:	cmp	r0, #9
   30418:	mov	r2, #0
   3041c:	bhi	30534 <flatcc_json_parser_struct_as_root@@Base+0x438>
   30420:	add	ip, r1, #1
   30424:	mov	r0, #1
   30428:	strb	r2, [r1, #1]
   3042c:	b	303a8 <flatcc_json_parser_struct_as_root@@Base+0x2ac>
   30430:	movw	r2, #16959	; 0x423f
   30434:	movt	r2, #15
   30438:	cmp	r3, r2
   3043c:	bhi	30520 <flatcc_json_parser_struct_as_root@@Base+0x424>
   30440:	movw	r2, #34463	; 0x869f
   30444:	movt	r2, #1
   30448:	cmp	r3, r2
   3044c:	bls	30564 <flatcc_json_parser_struct_as_root@@Base+0x468>
   30450:	mov	r3, #0
   30454:	mov	r2, ip
   30458:	mov	r8, r6
   3045c:	add	r4, r1, #6
   30460:	mov	r0, #6
   30464:	strb	r3, [r1, #6]
   30468:	ldrb	r1, [r8]
   3046c:	sub	r3, r4, #2
   30470:	strb	r1, [r4, #-2]
   30474:	ldrb	r1, [r8, #1]
   30478:	strb	r1, [r4, #-1]
   3047c:	ldrb	r1, [r2]
   30480:	sub	ip, r3, #2
   30484:	strb	r1, [r3, #-2]
   30488:	ldrb	r2, [r2, #1]
   3048c:	strb	r2, [r3, #-1]
   30490:	ldr	r2, [pc, #248]	; 30590 <flatcc_json_parser_struct_as_root@@Base+0x494>
   30494:	add	r2, pc, r2
   30498:	ldrb	r3, [r2, lr, lsl #1]
   3049c:	add	r2, r2, lr, lsl #1
   304a0:	strb	r3, [ip, #-2]
   304a4:	ldrb	r3, [r2, #1]
   304a8:	strb	r3, [ip, #-1]
   304ac:	b	303b0 <flatcc_json_parser_struct_as_root@@Base+0x2b4>
   304b0:	mov	r4, #0
   304b4:	mov	r3, ip
   304b8:	add	lr, r1, #3
   304bc:	mov	r0, #3
   304c0:	strb	r4, [r1, #3]
   304c4:	b	30394 <flatcc_json_parser_struct_as_root@@Base+0x298>
   304c8:	umull	r0, r2, r2, lr
   304cc:	mov	r9, #0
   304d0:	movw	r0, #15241	; 0x3b89
   304d4:	movt	r0, #21990	; 0x55e6
   304d8:	strb	r9, [r1, #10]
   304dc:	ldrb	r9, [r4, r7, lsl #1]
   304e0:	lsr	r2, r2, #5
   304e4:	add	r7, r1, #8
   304e8:	umull	r0, r3, r0, r3
   304ec:	mov	r0, #10
   304f0:	mls	r2, r5, r2, lr
   304f4:	lsr	lr, r3, #25
   304f8:	strb	r9, [r1, #8]
   304fc:	ldrb	r3, [r6, #1]
   30500:	add	r2, r4, r2, lsl #1
   30504:	strb	r3, [r1, #9]
   30508:	ldrb	r3, [ip]
   3050c:	sub	r4, r7, #2
   30510:	strb	r3, [r7, #-2]
   30514:	ldrb	r3, [ip, #1]
   30518:	strb	r3, [r7, #-1]
   3051c:	b	30468 <flatcc_json_parser_struct_as_root@@Base+0x36c>
   30520:	mov	r3, #0
   30524:	add	r5, r1, #7
   30528:	mov	r0, #7
   3052c:	strb	r3, [r1, #7]
   30530:	b	30348 <flatcc_json_parser_struct_as_root@@Base+0x24c>
   30534:	mov	lr, r0
   30538:	add	ip, r1, #2
   3053c:	strb	r2, [r1, #2]
   30540:	mov	r0, #2
   30544:	b	30490 <flatcc_json_parser_struct_as_root@@Base+0x394>
   30548:	mov	r2, r8
   3054c:	add	r7, r1, #8
   30550:	strb	r3, [r1, #8]
   30554:	mov	r8, ip
   30558:	mov	r0, #8
   3055c:	mov	ip, r6
   30560:	b	30508 <flatcc_json_parser_struct_as_root@@Base+0x40c>
   30564:	mov	r0, #0
   30568:	mov	r2, ip
   3056c:	mov	r3, lr
   30570:	mov	ip, r6
   30574:	add	r1, r1, #5
   30578:	strb	r0, [r1]
   3057c:	mov	r0, #5
   30580:	b	30380 <flatcc_json_parser_struct_as_root@@Base+0x284>
   30584:	andeq	r4, r1, ip, lsr #3
   30588:	strdeq	r4, [r1], -r8
   3058c:	andeq	r4, r1, ip, ror r0
   30590:	ldrdeq	r3, [r1], -r4
   30594:	strd	r4, [sp, #-36]!	; 0xffffffdc
   30598:	strd	r6, [sp, #8]
   3059c:	add	r7, pc, #932	; 0x3a4
   305a0:	ldrd	r6, [r7]
   305a4:	strd	r8, [sp, #16]
   305a8:	mov	r8, r0
   305ac:	strd	sl, [sp, #24]
   305b0:	str	lr, [sp, #32]
   305b4:	sub	sp, sp, #28
   305b8:	cmp	r1, r7
   305bc:	cmpeq	r0, r6
   305c0:	bls	30920 <flatcc_json_parser_struct_as_root@@Base+0x824>
   305c4:	mov	fp, r2
   305c8:	mov	r3, #0
   305cc:	ldr	r6, [pc, #932]	; 30978 <flatcc_json_parser_struct_as_root@@Base+0x87c>
   305d0:	mov	r2, #100	; 0x64
   305d4:	mov	r9, r1
   305d8:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   305dc:	mov	r4, r2
   305e0:	mov	r3, #0
   305e4:	mov	r2, #100	; 0x64
   305e8:	mov	r0, r8
   305ec:	mov	r1, r9
   305f0:	add	r6, pc, r6
   305f4:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   305f8:	add	r3, pc, #848	; 0x350
   305fc:	ldrd	r2, [r3]
   30600:	mov	sl, r0
   30604:	add	r7, r6, r4, lsl #1
   30608:	str	r1, [sp]
   3060c:	str	r4, [sp, #16]
   30610:	cmp	r9, r3
   30614:	cmpeq	r8, r2
   30618:	bls	30850 <flatcc_json_parser_struct_as_root@@Base+0x754>
   3061c:	mov	r2, #100	; 0x64
   30620:	mov	r3, #0
   30624:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   30628:	add	r3, r6, r2, lsl #1
   3062c:	mov	r0, r8
   30630:	movw	r2, #10000	; 0x2710
   30634:	mov	r1, r9
   30638:	str	r3, [sp, #12]
   3063c:	mov	r3, #0
   30640:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   30644:	mov	r2, #100	; 0x64
   30648:	mov	r3, #0
   3064c:	str	r1, [sp]
   30650:	mov	sl, r0
   30654:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   30658:	add	r1, r6, r2, lsl #1
   3065c:	mov	r3, #0
   30660:	mov	r0, r8
   30664:	movw	r2, #16960	; 0x4240
   30668:	movt	r2, #15
   3066c:	str	r1, [sp, #8]
   30670:	mov	r1, r9
   30674:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   30678:	add	r3, pc, #728	; 0x2d8
   3067c:	ldrd	r2, [r3]
   30680:	mov	r5, r0
   30684:	mov	r4, r1
   30688:	cmp	r9, r3
   3068c:	cmpeq	r8, r2
   30690:	bhi	30984 <flatcc_json_parser_struct_as_root@@Base+0x888>
   30694:	add	r3, pc, #708	; 0x2c4
   30698:	ldrd	r2, [r3]
   3069c:	cmp	r9, r3
   306a0:	cmpeq	r8, r2
   306a4:	bls	30ae8 <flatcc_json_parser_struct_as_root@@Base+0x9ec>
   306a8:	ldr	r2, [sp, #8]
   306ac:	mov	r3, #0
   306b0:	add	ip, fp, #16
   306b4:	mov	r9, #16
   306b8:	str	r7, [sp, #8]
   306bc:	strb	r3, [fp, #16]
   306c0:	mov	r7, r2
   306c4:	ldr	r8, [sp, #8]
   306c8:	mov	r0, r5
   306cc:	mov	r1, r4
   306d0:	mov	r2, #100	; 0x64
   306d4:	mov	r3, #0
   306d8:	sub	r6, ip, #2
   306dc:	ldrb	lr, [r8]
   306e0:	strb	lr, [ip, #-2]
   306e4:	ldrb	lr, [r8, #1]
   306e8:	ldr	r8, [pc, #652]	; 3097c <flatcc_json_parser_struct_as_root@@Base+0x880>
   306ec:	strb	lr, [ip, #-1]
   306f0:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   306f4:	add	r8, pc, r8
   306f8:	mov	r0, r5
   306fc:	add	r3, r8, r2, lsl #1
   30700:	mov	r1, r4
   30704:	mov	r2, #100	; 0x64
   30708:	str	r3, [sp, #4]
   3070c:	mov	r3, #0
   30710:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   30714:	mov	r5, r0
   30718:	mov	r4, r1
   3071c:	ldr	r1, [sp, #12]
   30720:	sub	r3, r6, #2
   30724:	ldrb	r2, [r1]
   30728:	strb	r2, [r6, #-2]
   3072c:	ldrb	r2, [r1, #1]
   30730:	strb	r2, [r6, #-1]
   30734:	ldrb	r1, [r7]
   30738:	sub	r2, r3, #2
   3073c:	strb	r1, [r3, #-2]
   30740:	ldrb	r1, [r7, #1]
   30744:	strb	r1, [r3, #-1]
   30748:	ldr	r1, [sp, #4]
   3074c:	sub	r7, r2, #2
   30750:	ldrb	r3, [r1]
   30754:	strb	r3, [r2, #-2]
   30758:	ldrb	r3, [r1, #1]
   3075c:	strb	r3, [r2, #-1]
   30760:	ldr	r6, [pc, #536]	; 30980 <flatcc_json_parser_struct_as_root@@Base+0x884>
   30764:	mov	r0, r5
   30768:	mov	r1, r4
   3076c:	mov	r2, #100	; 0x64
   30770:	mov	r3, #0
   30774:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   30778:	mov	r0, r5
   3077c:	mov	r1, r4
   30780:	mov	r3, #0
   30784:	add	r6, pc, r6
   30788:	ldrb	lr, [r6, r2, lsl #1]
   3078c:	add	ip, r6, r2, lsl #1
   30790:	mov	r2, #100	; 0x64
   30794:	strb	lr, [r7, #-2]
   30798:	ldrb	ip, [ip, #1]
   3079c:	strb	ip, [r7, #-1]
   307a0:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   307a4:	mov	r2, #100	; 0x64
   307a8:	mov	r3, #0
   307ac:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   307b0:	ldrb	lr, [r6, r2, lsl #1]
   307b4:	add	ip, r6, r2, lsl #1
   307b8:	mov	r0, r5
   307bc:	mov	r1, r4
   307c0:	movw	r2, #10000	; 0x2710
   307c4:	mov	r3, #0
   307c8:	strb	lr, [r7, #-4]
   307cc:	ldrb	ip, [ip, #1]
   307d0:	strb	ip, [r7, #-3]
   307d4:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   307d8:	mov	r2, #100	; 0x64
   307dc:	mov	r3, #0
   307e0:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   307e4:	ldrb	lr, [r6, r2, lsl #1]
   307e8:	add	ip, r6, r2, lsl #1
   307ec:	mov	r0, r5
   307f0:	mov	r1, r4
   307f4:	mov	r3, #0
   307f8:	movw	r2, #16960	; 0x4240
   307fc:	movt	r2, #15
   30800:	strb	lr, [r7, #-6]
   30804:	ldrb	ip, [ip, #1]
   30808:	strb	ip, [r7, #-5]
   3080c:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   30810:	mov	r2, #100	; 0x64
   30814:	mov	r3, #0
   30818:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   3081c:	ldrb	r3, [r6, r2, lsl #1]
   30820:	add	r6, r6, r2, lsl #1
   30824:	mov	r0, r9
   30828:	strb	r3, [r7, #-8]
   3082c:	ldrb	r3, [r6, #1]
   30830:	strb	r3, [r7, #-7]
   30834:	add	sp, sp, #28
   30838:	ldrd	r4, [sp]
   3083c:	ldrd	r6, [sp, #8]
   30840:	ldrd	r8, [sp, #16]
   30844:	ldrd	sl, [sp, #24]
   30848:	add	sp, sp, #32
   3084c:	pop	{pc}		; (ldr pc, [sp], #4)
   30850:	add	r3, pc, #272	; 0x110
   30854:	ldrd	r2, [r3]
   30858:	cmp	r9, r3
   3085c:	cmpeq	r8, r2
   30860:	bls	30a68 <flatcc_json_parser_struct_as_root@@Base+0x96c>
   30864:	mov	r2, #100	; 0x64
   30868:	mov	r3, #0
   3086c:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   30870:	add	r3, r6, r2, lsl #1
   30874:	mov	r0, r8
   30878:	movw	r2, #10000	; 0x2710
   3087c:	mov	r1, r9
   30880:	str	r3, [sp, #4]
   30884:	mov	r3, #0
   30888:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   3088c:	add	r3, pc, #220	; 0xdc
   30890:	ldrd	r2, [r3]
   30894:	mov	r5, r0
   30898:	mov	r4, r1
   3089c:	cmp	r9, r3
   308a0:	cmpeq	r8, r2
   308a4:	mov	r2, #0
   308a8:	bls	30b78 <flatcc_json_parser_struct_as_root@@Base+0xa7c>
   308ac:	add	r3, fp, #13
   308b0:	mov	r9, #13
   308b4:	strb	r2, [fp, #13]
   308b8:	ldrb	r2, [r7]
   308bc:	sub	r6, r3, #2
   308c0:	strb	r2, [r3, #-2]
   308c4:	ldrb	r2, [r7, #1]
   308c8:	strb	r2, [r3, #-1]
   308cc:	ldr	lr, [sp, #4]
   308d0:	mov	r0, r5
   308d4:	mov	r1, r4
   308d8:	mov	r2, #10
   308dc:	mov	r3, #0
   308e0:	sub	r7, r6, #3
   308e4:	ldrb	ip, [lr]
   308e8:	strb	ip, [r6, #-2]
   308ec:	ldrb	ip, [lr, #1]
   308f0:	strb	ip, [r6, #-1]
   308f4:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   308f8:	add	r2, r2, #48	; 0x30
   308fc:	mov	r0, sl
   30900:	ldr	r1, [sp]
   30904:	mov	r3, #0
   30908:	strb	r2, [r6, #-3]
   3090c:	mov	r2, #1000	; 0x3e8
   30910:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   30914:	mov	r5, r0
   30918:	mov	r4, r1
   3091c:	b	30760 <flatcc_json_parser_struct_as_root@@Base+0x664>
   30920:	mov	r1, r2
   30924:	add	sp, sp, #28
   30928:	ldrd	r4, [sp]
   3092c:	ldrd	r6, [sp, #8]
   30930:	ldrd	r8, [sp, #16]
   30934:	ldrd	sl, [sp, #24]
   30938:	ldr	lr, [sp, #32]
   3093c:	add	sp, sp, #36	; 0x24
   30940:	b	30268 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   30944:	nop	{0}
   30948:	blcc	fe6e314c <__bss_end__@@Base+0xfe68dd80>
   3094c:	andeq	r0, r0, r0
   30950:	mrcmi	15, 3, r9, cr2, cr15, {7}
   30954:	andeq	r0, r0, r8, lsl r9
   30958:	svcvs	0x00c0ffff
   3095c:	strdeq	r8, [r3], -r2	; <UNPREDICTABLE>
   30960:	strbge	r7, [r6], #4095	; 0xfff
   30964:	andeq	r8, r3, lr, ror sp
   30968:	ldmdami	r6!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}^
   3096c:	andeq	r0, r0, r7, lsl r0
   30970:	strtle	r0, [r5], #4095	; 0xfff
   30974:	andeq	r0, r0, r8, ror #1
   30978:	andeq	r3, r1, r8, ror lr
   3097c:	andeq	r3, r1, r4, ror sp
   30980:	andeq	r3, r1, r4, ror #25
   30984:	mov	r2, #100	; 0x64
   30988:	mov	r3, #0
   3098c:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   30990:	add	r1, r6, r2, lsl #1
   30994:	mov	r0, r8
   30998:	add	r3, pc, #584	; 0x248
   3099c:	ldrd	r2, [r3]
   309a0:	str	r1, [sp, #20]
   309a4:	mov	r1, r9
   309a8:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   309ac:	add	r3, pc, #572	; 0x23c
   309b0:	ldrd	r2, [r3]
   309b4:	mov	sl, r0
   309b8:	str	r1, [sp]
   309bc:	cmp	r9, r3
   309c0:	cmpeq	r8, r2
   309c4:	bls	30b1c <flatcc_json_parser_struct_as_root@@Base+0xa20>
   309c8:	mov	r2, #100	; 0x64
   309cc:	mov	r3, #0
   309d0:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   309d4:	add	r0, r6, r2, lsl #1
   309d8:	mov	r1, r9
   309dc:	add	r3, pc, #532	; 0x214
   309e0:	ldrd	r2, [r3]
   309e4:	str	r0, [sp, #4]
   309e8:	mov	r0, r8
   309ec:	bl	3e84c <flatcc_json_printer_clear@@Base+0x728>
   309f0:	add	r3, pc, #520	; 0x208
   309f4:	ldrd	r2, [r3]
   309f8:	mov	r5, r0
   309fc:	mov	r4, r1
   30a00:	cmp	r9, r3
   30a04:	cmpeq	r8, r2
   30a08:	bhi	30a9c <flatcc_json_parser_struct_as_root@@Base+0x9a0>
   30a0c:	mov	r2, #0
   30a10:	add	r3, fp, #17
   30a14:	mov	r9, #19
   30a18:	strb	r2, [fp, #19]
   30a1c:	ldr	r2, [sp, #16]
   30a20:	ldrb	r2, [r6, r2, lsl #1]
   30a24:	strb	r2, [fp, #17]
   30a28:	ldrb	r2, [r7, #1]
   30a2c:	ldr	r7, [sp, #20]
   30a30:	strb	r2, [fp, #18]
   30a34:	ldr	r0, [sp, #12]
   30a38:	sub	r2, r3, #2
   30a3c:	ldrb	r1, [r0]
   30a40:	strb	r1, [r3, #-2]
   30a44:	ldrb	r1, [r0, #1]
   30a48:	strb	r1, [r3, #-1]
   30a4c:	ldr	r0, [sp, #8]
   30a50:	sub	r3, r2, #2
   30a54:	ldrb	r1, [r0]
   30a58:	strb	r1, [r2, #-2]
   30a5c:	ldrb	r1, [r0, #1]
   30a60:	strb	r1, [r2, #-1]
   30a64:	b	308b8 <flatcc_json_parser_struct_as_root@@Base+0x7bc>
   30a68:	add	r3, pc, #408	; 0x198
   30a6c:	ldrd	r2, [r3]
   30a70:	mov	r5, r0
   30a74:	str	r7, [sp, #4]
   30a78:	ldr	r4, [sp]
   30a7c:	cmp	r9, r3
   30a80:	mov	r3, #0
   30a84:	cmpeq	r8, r2
   30a88:	bhi	30b60 <flatcc_json_parser_struct_as_root@@Base+0xa64>
   30a8c:	add	r2, fp, #10
   30a90:	mov	r9, #10
   30a94:	strb	r3, [fp, #10]
   30a98:	b	30748 <flatcc_json_parser_struct_as_root@@Base+0x64c>
   30a9c:	mov	r1, #0
   30aa0:	mov	r9, #20
   30aa4:	ldr	r2, [sp, #12]
   30aa8:	ldr	ip, [sp, #16]
   30aac:	strb	r1, [fp, #20]
   30ab0:	ldr	r3, [sp, #20]
   30ab4:	ldrb	r1, [r6, ip, lsl #1]
   30ab8:	str	r3, [sp, #12]
   30abc:	add	r3, fp, #18
   30ac0:	strb	r1, [fp, #18]
   30ac4:	ldrb	r1, [r7, #1]
   30ac8:	ldr	r7, [sp, #4]
   30acc:	strb	r1, [fp, #19]
   30ad0:	ldrb	r1, [r2]
   30ad4:	sub	ip, r3, #2
   30ad8:	strb	r1, [r3, #-2]
   30adc:	ldrb	r2, [r2, #1]
   30ae0:	strb	r2, [r3, #-1]
   30ae4:	b	306c4 <flatcc_json_parser_struct_as_root@@Base+0x5c8>
   30ae8:	add	r3, pc, #288	; 0x120
   30aec:	ldrd	r2, [r3]
   30af0:	cmp	r9, r3
   30af4:	mov	r3, #0
   30af8:	cmpeq	r8, r2
   30afc:	bls	30bc4 <flatcc_json_parser_struct_as_root@@Base+0xac8>
   30b00:	ldr	r2, [sp, #8]
   30b04:	mov	r9, #15
   30b08:	strb	r3, [fp, #15]
   30b0c:	stmib	sp, {r2, r7}
   30b10:	add	r2, fp, #15
   30b14:	ldr	r7, [sp, #12]
   30b18:	b	30a4c <flatcc_json_parser_struct_as_root@@Base+0x950>
   30b1c:	add	r3, pc, #244	; 0xf4
   30b20:	ldrd	r2, [r3]
   30b24:	cmp	r9, r3
   30b28:	cmpeq	r8, r2
   30b2c:	bls	30b88 <flatcc_json_parser_struct_as_root@@Base+0xa8c>
   30b30:	mov	r5, r0
   30b34:	mov	r3, #0
   30b38:	ldr	r4, [sp]
   30b3c:	mov	r2, r7
   30b40:	mov	r9, #18
   30b44:	ldr	r1, [sp, #8]
   30b48:	strb	r3, [fp, #18]
   30b4c:	add	r3, fp, #18
   30b50:	ldr	r0, [sp, #12]
   30b54:	ldr	r7, [sp, #20]
   30b58:	strd	r0, [sp, #8]
   30b5c:	b	30ad0 <flatcc_json_parser_struct_as_root@@Base+0x9d4>
   30b60:	add	r6, fp, #11
   30b64:	mov	sl, r8
   30b68:	str	r9, [sp]
   30b6c:	mov	r9, #11
   30b70:	strb	r3, [fp, #11]
   30b74:	b	308cc <flatcc_json_parser_struct_as_root@@Base+0x7d0>
   30b78:	add	r3, fp, #12
   30b7c:	mov	r9, #12
   30b80:	strb	r2, [fp, #12]
   30b84:	b	30734 <flatcc_json_parser_struct_as_root@@Base+0x638>
   30b88:	ldr	r3, [sp, #12]
   30b8c:	mov	r2, #0
   30b90:	mov	sl, r5
   30b94:	mov	r9, #17
   30b98:	mov	r5, r0
   30b9c:	str	r4, [sp]
   30ba0:	str	r7, [sp, #12]
   30ba4:	mov	r4, r1
   30ba8:	ldr	r7, [sp, #8]
   30bac:	strb	r2, [fp, #17]
   30bb0:	str	r3, [sp, #8]
   30bb4:	ldr	r3, [sp, #20]
   30bb8:	str	r3, [sp, #4]
   30bbc:	add	r3, fp, #17
   30bc0:	b	30a34 <flatcc_json_parser_struct_as_root@@Base+0x938>
   30bc4:	ldr	r1, [sp, #8]
   30bc8:	add	r6, fp, #14
   30bcc:	mov	r9, #14
   30bd0:	strb	r3, [fp, #14]
   30bd4:	ldr	r2, [sp, #12]
   30bd8:	str	r1, [sp, #4]
   30bdc:	str	r7, [sp, #12]
   30be0:	mov	r7, r2
   30be4:	b	3071c <flatcc_json_parser_struct_as_root@@Base+0x620>
   30be8:	ldrbeq	lr, [r5, #256]!	; 0x100
   30bec:	andeq	r0, r0, r0
   30bf0:			; <UNDEFINED> instruction: 0xa763ffff
   30bf4:	stcleq	6, cr11, [r0, #716]!	; 0x2cc
   30bf8:	strpl	lr, [fp], #-1024	; 0xfffffc00
   30bfc:	andeq	r0, r0, r2
   30c00:	stmibhi	r7!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   30c04:	bhi	ff1f981c <__bss_end__@@Base+0xff1a4450>
   30c08:	strpl	lr, [fp], #-1023	; 0xfffffc01
   30c0c:	andeq	r0, r0, r2
   30c10:	ldrshtne	r3, [sl], #-255	; 0xffffff01
   30c14:	strdeq	r5, [r0], -r3
   30c18:	stcpl	15, cr15, [r9, #1020]	; 0x3fc
   30c1c:	smceq	13400	; 0x3458
   30c20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   30c24:	strd	r6, [sp, #8]
   30c28:	strd	r8, [sp, #16]
   30c2c:	strd	sl, [sp, #24]
   30c30:	str	lr, [sp, #32]
   30c34:	sub	sp, sp, #116	; 0x74
   30c38:	ldr	ip, [sp, #152]	; 0x98
   30c3c:	strd	r2, [sp, #24]
   30c40:	ldr	lr, [sp, #176]	; 0xb0
   30c44:	strd	r0, [sp, #48]	; 0x30
   30c48:	ldr	sl, [sp, #180]	; 0xb4
   30c4c:	str	ip, [sp, #64]	; 0x40
   30c50:	ldr	fp, [sp, #156]	; 0x9c
   30c54:	subs	r2, r2, lr
   30c58:	ldrd	r0, [sp, #160]	; 0xa0
   30c5c:	sbc	r3, r3, sl
   30c60:	strd	r2, [sp, #16]
   30c64:	ldrd	r2, [sp, #16]
   30c68:	str	fp, [sp, #68]	; 0x44
   30c6c:	cmp	r3, r1
   30c70:	cmpeq	r2, r0
   30c74:	ldrd	r2, [sp, #168]	; 0xa8
   30c78:	bls	30e94 <flatcc_json_parser_struct_as_root@@Base+0xd98>
   30c7c:	subs	r6, ip, r0
   30c80:	sbc	r7, fp, r1
   30c84:	cmp	r3, r7
   30c88:	cmpeq	r2, r6
   30c8c:	bhi	30ea0 <flatcc_json_parser_struct_as_root@@Base+0xda4>
   30c90:	subs	ip, ip, r2
   30c94:	ldr	r6, [sp, #52]	; 0x34
   30c98:	sbc	r7, fp, r3
   30c9c:	subs	r4, ip, r0
   30ca0:	str	lr, [sp, #32]
   30ca4:	ldr	ip, [sp, #48]	; 0x30
   30ca8:	sbc	r5, r7, r1
   30cac:	str	sl, [sp, #36]	; 0x24
   30cb0:	sub	r6, r6, #1
   30cb4:	add	r6, ip, r6
   30cb8:	mov	fp, r6
   30cbc:	ldrd	r6, [sp, #16]
   30cc0:	adds	r8, r2, r0
   30cc4:	adc	r9, r3, r1
   30cc8:	cmp	r9, r7
   30ccc:	cmpeq	r8, r6
   30cd0:	bcc	30e1c <flatcc_json_parser_struct_as_root@@Base+0xd20>
   30cd4:	subs	ip, r6, r0
   30cd8:	ldr	r4, [sp, #28]
   30cdc:	str	ip, [sp]
   30ce0:	sbc	ip, r7, r1
   30ce4:	ldr	lr, [sp, #32]
   30ce8:	str	ip, [sp, #4]
   30cec:	ldr	ip, [sp, #24]
   30cf0:	ldr	sl, [sp, #36]	; 0x24
   30cf4:	subs	ip, lr, ip
   30cf8:	sbc	r4, sl, r4
   30cfc:	adds	ip, ip, r8
   30d00:	str	ip, [sp, #8]
   30d04:	adc	ip, r4, r9
   30d08:	ldrd	r4, [sp]
   30d0c:	str	ip, [sp, #12]
   30d10:	ldrd	r6, [sp, #8]
   30d14:	cmp	r5, r7
   30d18:	cmpeq	r4, r6
   30d1c:	bcc	30e94 <flatcc_json_parser_struct_as_root@@Base+0xd98>
   30d20:	ldr	ip, [sp, #48]	; 0x30
   30d24:	ldr	r1, [sp, #52]	; 0x34
   30d28:	sub	r1, r1, #1
   30d2c:	ldrb	r0, [ip, r1]
   30d30:	sub	r0, r0, #1
   30d34:	strb	r0, [ip, r1]
   30d38:	ldr	r1, [sp, #24]
   30d3c:	adds	r1, r1, lr
   30d40:	str	r1, [sp, #56]	; 0x38
   30d44:	ldr	r1, [sp, #28]
   30d48:	adc	r1, r1, sl
   30d4c:	str	r1, [sp, #60]	; 0x3c
   30d50:	ldrd	r0, [sp, #56]	; 0x38
   30d54:	cmp	r1, r9
   30d58:	cmpeq	r0, r8
   30d5c:	bls	30ddc <flatcc_json_parser_struct_as_root@@Base+0xce0>
   30d60:	ldr	ip, [sp, #64]	; 0x40
   30d64:	subs	ip, ip, r8
   30d68:	str	ip, [sp, #80]	; 0x50
   30d6c:	ldr	ip, [sp, #68]	; 0x44
   30d70:	sbc	ip, ip, r9
   30d74:	str	ip, [sp, #84]	; 0x54
   30d78:	ldrd	r4, [sp, #80]	; 0x50
   30d7c:	cmp	r5, r3
   30d80:	cmpeq	r4, r2
   30d84:	bcc	30ddc <flatcc_json_parser_struct_as_root@@Base+0xce0>
   30d88:	adds	ip, r2, r8
   30d8c:	adc	r3, r3, r9
   30d90:	str	ip, [sp, #88]	; 0x58
   30d94:	str	r3, [sp, #92]	; 0x5c
   30d98:	ldrd	r2, [sp, #88]	; 0x58
   30d9c:	cmp	r3, r1
   30da0:	cmpeq	r2, r0
   30da4:	bcc	30dfc <flatcc_json_parser_struct_as_root@@Base+0xd00>
   30da8:	subs	ip, r0, r8
   30dac:	str	ip, [sp, #96]	; 0x60
   30db0:	sbc	ip, r1, r9
   30db4:	str	ip, [sp, #100]	; 0x64
   30db8:	subs	ip, r2, r0
   30dbc:	sbc	r3, r3, r1
   30dc0:	str	ip, [sp, #104]	; 0x68
   30dc4:	str	r3, [sp, #108]	; 0x6c
   30dc8:	ldrd	r2, [sp, #96]	; 0x60
   30dcc:	ldrd	r0, [sp, #104]	; 0x68
   30dd0:	cmp	r3, r1
   30dd4:	cmpeq	r2, r0
   30dd8:	bhi	30dfc <flatcc_json_parser_struct_as_root@@Base+0xd00>
   30ddc:	adds	r3, lr, lr
   30de0:	str	r3, [sp, #40]	; 0x28
   30de4:	adc	r3, sl, sl
   30de8:	str	r3, [sp, #44]	; 0x2c
   30dec:	ldrd	r2, [sp, #40]	; 0x28
   30df0:	cmp	r3, r9
   30df4:	cmpeq	r2, r8
   30df8:	bls	30e58 <flatcc_json_parser_struct_as_root@@Base+0xd5c>
   30dfc:	mov	r0, #0
   30e00:	add	sp, sp, #116	; 0x74
   30e04:	ldrd	r4, [sp]
   30e08:	ldrd	r6, [sp, #8]
   30e0c:	ldrd	r8, [sp, #16]
   30e10:	ldrd	sl, [sp, #24]
   30e14:	add	sp, sp, #32
   30e18:	pop	{pc}		; (ldr pc, [sp], #4)
   30e1c:	ldrb	ip, [fp]
   30e20:	subs	sl, r4, r2
   30e24:	mov	r0, r8
   30e28:	sbc	lr, r5, r3
   30e2c:	cmp	r5, r3
   30e30:	cmpeq	r4, r2
   30e34:	mov	r1, r9
   30e38:	mov	r4, sl
   30e3c:	mov	r5, lr
   30e40:	sub	ip, ip, #1
   30e44:	strb	ip, [fp]
   30e48:	bcs	30cbc <flatcc_json_parser_struct_as_root@@Base+0xbc0>
   30e4c:	ldr	lr, [sp, #32]
   30e50:	ldr	sl, [sp, #36]	; 0x24
   30e54:	b	30ddc <flatcc_json_parser_struct_as_root@@Base+0xce0>
   30e58:	ldr	r2, [sp, #64]	; 0x40
   30e5c:	lsl	r3, lr, #2
   30e60:	lsl	sl, sl, #2
   30e64:	orr	sl, sl, lr, lsr #30
   30e68:	subs	r3, r2, r3
   30e6c:	str	r3, [sp, #72]	; 0x48
   30e70:	ldr	r3, [sp, #68]	; 0x44
   30e74:	sbc	r3, r3, sl
   30e78:	str	r3, [sp, #76]	; 0x4c
   30e7c:	ldrd	r2, [sp, #72]	; 0x48
   30e80:	cmp	r3, r9
   30e84:	cmpeq	r2, r8
   30e88:	movcs	r0, #1
   30e8c:	bcs	30e00 <flatcc_json_parser_struct_as_root@@Base+0xd04>
   30e90:	b	30dfc <flatcc_json_parser_struct_as_root@@Base+0xd00>
   30e94:	mov	r8, r0
   30e98:	mov	r9, r1
   30e9c:	b	30d38 <flatcc_json_parser_struct_as_root@@Base+0xc3c>
   30ea0:	mov	r8, r0
   30ea4:	mov	r9, r1
   30ea8:	b	30ddc <flatcc_json_parser_struct_as_root@@Base+0xce0>
   30eac:	cmp	r0, #0
   30eb0:	strd	r4, [sp, #-16]!
   30eb4:	str	r6, [sp, #8]
   30eb8:	mov	r6, r1
   30ebc:	str	lr, [sp, #12]
   30ec0:	bge	30ed0 <flatcc_json_parser_struct_as_root@@Base+0xdd4>
   30ec4:	mov	r3, #45	; 0x2d
   30ec8:	rsb	r0, r0, #0
   30ecc:	strb	r3, [r6], #1
   30ed0:	movw	ip, #52429	; 0xcccd
   30ed4:	movt	ip, #52428	; 0xcccc
   30ed8:	mov	lr, r6
   30edc:	mvn	r4, #9
   30ee0:	umull	r2, r3, ip, r0
   30ee4:	lsr	r3, r3, #3
   30ee8:	mla	r2, r4, r3, r0
   30eec:	subs	r0, r3, #0
   30ef0:	add	r3, r2, #48	; 0x30
   30ef4:	strb	r3, [lr], #1
   30ef8:	bne	30ee0 <flatcc_json_parser_struct_as_root@@Base+0xde4>
   30efc:	sub	r3, lr, r6
   30f00:	strb	r0, [lr]
   30f04:	add	r0, r3, r3, lsr #31
   30f08:	cmp	r3, #1
   30f0c:	asr	r0, r0, #1
   30f10:	ble	30f40 <flatcc_json_parser_struct_as_root@@Base+0xe44>
   30f14:	sub	r3, r6, #1
   30f18:	mov	ip, lr
   30f1c:	ldrb	r4, [r3, #1]
   30f20:	add	r2, r3, #2
   30f24:	add	r3, r3, #1
   30f28:	sub	r2, r2, r6
   30f2c:	ldrb	r5, [ip, #-1]!
   30f30:	cmp	r0, r2
   30f34:	strb	r5, [r3]
   30f38:	strb	r4, [ip]
   30f3c:	bgt	30f1c <flatcc_json_parser_struct_as_root@@Base+0xe20>
   30f40:	ldrd	r4, [sp]
   30f44:	sub	r0, lr, r1
   30f48:	ldr	r6, [sp, #8]
   30f4c:	add	sp, sp, #12
   30f50:	pop	{pc}		; (ldr pc, [sp], #4)
   30f54:	ldrd	r2, [r0, #16]
   30f58:	cmp	r3, r2
   30f5c:	bcc	30f8c <flatcc_json_parser_struct_as_root@@Base+0xe90>
   30f60:	ldr	r1, [r0]
   30f64:	ldr	r2, [r0, #36]	; 0x24
   30f68:	sub	ip, r3, r1
   30f6c:	mov	r3, r1
   30f70:	str	r1, [r0, #20]
   30f74:	cmp	r2, #0
   30f78:	moveq	r2, #3
   30f7c:	streq	r2, [r0, #36]	; 0x24
   30f80:	ldr	r2, [r0, #12]
   30f84:	add	r2, r2, ip
   30f88:	str	r2, [r0, #12]
   30f8c:	mov	r2, #0
   30f90:	strb	r2, [r3]
   30f94:	bx	lr
   30f98:	strd	r4, [sp, #-24]!	; 0xffffffe8
   30f9c:	mov	r5, r0
   30fa0:	ldr	r4, [r0, #16]
   30fa4:	ldr	r3, [r0, #20]
   30fa8:	strd	r6, [sp, #8]
   30fac:	mov	r6, r1
   30fb0:	mov	r7, r2
   30fb4:	str	r8, [sp, #16]
   30fb8:	str	lr, [sp, #20]
   30fbc:	cmp	r3, r4
   30fc0:	bcc	30fd8 <flatcc_json_parser_struct_as_root@@Base+0xedc>
   30fc4:	mov	r1, #0
   30fc8:	ldr	r3, [r0, #44]	; 0x2c
   30fcc:	blx	r3
   30fd0:	ldr	r4, [r5, #16]
   30fd4:	ldr	r3, [r5, #20]
   30fd8:	sub	r4, r4, r3
   30fdc:	cmp	r4, r7
   30fe0:	bcs	3102c <flatcc_json_parser_struct_as_root@@Base+0xf30>
   30fe4:	mov	r2, r4
   30fe8:	mov	r1, r6
   30fec:	mov	r0, r3
   30ff0:	sub	r7, r7, r4
   30ff4:	bl	1451c <memcpy@plt>
   30ff8:	ldr	r3, [r5, #20]
   30ffc:	add	r6, r6, r4
   31000:	mov	r1, #0
   31004:	mov	r0, r5
   31008:	ldr	r2, [r5, #44]	; 0x2c
   3100c:	add	r4, r3, r4
   31010:	str	r4, [r5, #20]
   31014:	blx	r2
   31018:	ldr	r4, [r5, #16]
   3101c:	ldr	r3, [r5, #20]
   31020:	sub	r4, r4, r3
   31024:	cmp	r7, r4
   31028:	bhi	30fe4 <flatcc_json_parser_struct_as_root@@Base+0xee8>
   3102c:	mov	r1, r6
   31030:	mov	r0, r3
   31034:	mov	r2, r7
   31038:	bl	1451c <memcpy@plt>
   3103c:	ldr	r3, [r5, #20]
   31040:	ldr	r8, [sp, #16]
   31044:	add	r7, r3, r7
   31048:	str	r7, [r5, #20]
   3104c:	ldrd	r4, [sp]
   31050:	ldrd	r6, [sp, #8]
   31054:	add	sp, sp, #20
   31058:	pop	{pc}		; (ldr pc, [sp], #4)
   3105c:	strd	r4, [sp, #-16]!
   31060:	mov	r4, r0
   31064:	ldr	r5, [r0, #16]
   31068:	ldr	r3, [r0, #20]
   3106c:	str	r6, [sp, #8]
   31070:	mov	r6, r1
   31074:	str	lr, [sp, #12]
   31078:	cmp	r3, r5
   3107c:	bcc	31094 <flatcc_json_parser_struct_as_root@@Base+0xf98>
   31080:	mov	r1, #0
   31084:	ldr	r3, [r0, #44]	; 0x2c
   31088:	blx	r3
   3108c:	ldr	r5, [r4, #16]
   31090:	ldr	r3, [r4, #20]
   31094:	sub	r5, r5, r3
   31098:	cmp	r5, r6
   3109c:	bcs	310e4 <flatcc_json_parser_struct_as_root@@Base+0xfe8>
   310a0:	mov	r2, r5
   310a4:	mov	r0, r3
   310a8:	mov	r1, #32
   310ac:	sub	r6, r6, r5
   310b0:	bl	14594 <memset@plt>
   310b4:	ldr	r3, [r4, #20]
   310b8:	mov	r1, #0
   310bc:	mov	r0, r4
   310c0:	ldr	r2, [r4, #44]	; 0x2c
   310c4:	add	r5, r3, r5
   310c8:	str	r5, [r4, #20]
   310cc:	blx	r2
   310d0:	ldr	r5, [r4, #16]
   310d4:	ldr	r3, [r4, #20]
   310d8:	sub	r5, r5, r3
   310dc:	cmp	r6, r5
   310e0:	bhi	310a0 <flatcc_json_parser_struct_as_root@@Base+0xfa4>
   310e4:	mov	r0, r3
   310e8:	mov	r2, r6
   310ec:	mov	r1, #32
   310f0:	bl	14594 <memset@plt>
   310f4:	ldr	r3, [r4, #20]
   310f8:	add	r6, r3, r6
   310fc:	str	r6, [r4, #20]
   31100:	ldrd	r4, [sp]
   31104:	ldr	r6, [sp, #8]
   31108:	add	sp, sp, #12
   3110c:	pop	{pc}		; (ldr pc, [sp], #4)
   31110:	strd	r4, [sp, #-16]!
   31114:	ldr	ip, [r0, #16]
   31118:	ldr	r2, [r0, #20]
   3111c:	ldr	r5, [r0, #32]
   31120:	str	r6, [sp, #8]
   31124:	str	lr, [sp, #12]
   31128:	ldrb	r1, [r0, #25]
   3112c:	mul	r5, r5, r1
   31130:	add	r1, r2, r5
   31134:	cmp	ip, r1
   31138:	bcs	31154 <flatcc_json_parser_struct_as_root@@Base+0x1058>
   3113c:	mov	r1, r5
   31140:	ldrd	r4, [sp]
   31144:	ldr	r6, [sp, #8]
   31148:	ldr	lr, [sp, #12]
   3114c:	add	sp, sp, #16
   31150:	b	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   31154:	mov	r4, r0
   31158:	mov	r1, #32
   3115c:	mov	r0, r2
   31160:	mov	r2, r5
   31164:	bl	14594 <memset@plt>
   31168:	ldr	r3, [r4, #20]
   3116c:	ldr	r6, [sp, #8]
   31170:	add	r5, r3, r5
   31174:	str	r5, [r4, #20]
   31178:	ldrd	r4, [sp]
   3117c:	add	sp, sp, #12
   31180:	pop	{pc}		; (ldr pc, [sp], #4)
   31184:	cmp	r1, #0
   31188:	strd	r4, [sp, #-16]!
   3118c:	mov	r4, r0
   31190:	ldr	r0, [r0]
   31194:	ldr	ip, [r4, #20]
   31198:	ldr	r3, [r4, #40]	; 0x28
   3119c:	str	r6, [sp, #8]
   311a0:	str	lr, [sp, #12]
   311a4:	bne	311b4 <flatcc_json_parser_struct_as_root@@Base+0x10b8>
   311a8:	ldr	r5, [r4, #16]
   311ac:	cmp	r5, ip
   311b0:	bls	311f0 <flatcc_json_parser_struct_as_root@@Base+0x10f4>
   311b4:	sub	r5, ip, r0
   311b8:	mov	r2, #1
   311bc:	mov	r1, r5
   311c0:	bl	14540 <fwrite@plt>
   311c4:	ldr	r3, [r4]
   311c8:	ldr	ip, [r4, #12]
   311cc:	str	r3, [r4, #20]
   311d0:	add	ip, ip, r5
   311d4:	str	ip, [r4, #12]
   311d8:	mov	r2, #0
   311dc:	strb	r2, [r3]
   311e0:	ldrd	r4, [sp]
   311e4:	ldr	r6, [sp, #8]
   311e8:	add	sp, sp, #12
   311ec:	pop	{pc}		; (ldr pc, [sp], #4)
   311f0:	mov	r2, #1
   311f4:	ldr	r1, [r4, #8]
   311f8:	sub	r5, ip, r5
   311fc:	bl	14540 <fwrite@plt>
   31200:	ldr	r3, [r4]
   31204:	mov	r2, r5
   31208:	ldr	r1, [r4, #8]
   3120c:	mov	r0, r3
   31210:	add	r1, r3, r1
   31214:	bl	1451c <memcpy@plt>
   31218:	ldr	r3, [r4]
   3121c:	ldr	r1, [r4, #8]
   31220:	ldr	r2, [r4, #12]
   31224:	add	r3, r3, r5
   31228:	str	r3, [r4, #20]
   3122c:	add	r2, r2, r1
   31230:	str	r2, [r4, #12]
   31234:	b	311d8 <flatcc_json_parser_struct_as_root@@Base+0x10dc>
   31238:	ldr	r3, [r0, #20]
   3123c:	mov	r2, #0
   31240:	strd	r4, [sp, #-16]!
   31244:	ldr	r5, [r0]
   31248:	str	r6, [sp, #8]
   3124c:	str	lr, [sp, #12]
   31250:	strb	r2, [r3]
   31254:	ldr	r2, [r0, #16]
   31258:	ldr	r1, [r0, #20]
   3125c:	cmp	r1, r2
   31260:	bcs	31274 <flatcc_json_parser_struct_as_root@@Base+0x1178>
   31264:	ldrd	r4, [sp]
   31268:	ldr	r6, [sp, #8]
   3126c:	add	sp, sp, #12
   31270:	pop	{pc}		; (ldr pc, [sp], #4)
   31274:	mov	r4, r0
   31278:	ldrd	r0, [r0]
   3127c:	sub	r5, r3, r5
   31280:	lsl	r1, r1, #1
   31284:	bl	14534 <realloc@plt>
   31288:	cmp	r0, #0
   3128c:	beq	312cc <flatcc_json_parser_struct_as_root@@Base+0x11d0>
   31290:	ldr	r3, [r4, #4]
   31294:	add	r2, r0, r5
   31298:	str	r2, [r4, #20]
   3129c:	lsl	r3, r3, #1
   312a0:	sub	r1, r3, #64	; 0x40
   312a4:	stm	r4, {r0, r3}
   312a8:	add	r0, r0, r1
   312ac:	str	r1, [r4, #8]
   312b0:	str	r0, [r4, #16]
   312b4:	mov	r3, #0
   312b8:	strb	r3, [r2]
   312bc:	ldrd	r4, [sp]
   312c0:	ldr	r6, [sp, #8]
   312c4:	add	sp, sp, #12
   312c8:	pop	{pc}		; (ldr pc, [sp], #4)
   312cc:	ldr	r2, [r4]
   312d0:	ldr	r3, [r4, #36]	; 0x24
   312d4:	str	r2, [r4, #20]
   312d8:	cmp	r3, #0
   312dc:	moveq	r3, #3
   312e0:	streq	r3, [r4, #36]	; 0x24
   312e4:	ldr	r3, [r4, #12]
   312e8:	add	r3, r3, r5
   312ec:	str	r3, [r4, #12]
   312f0:	b	312b4 <flatcc_json_parser_struct_as_root@@Base+0x11b8>
   312f4:	cmp	r0, #99	; 0x63
   312f8:	mov	r3, r0
   312fc:	bhi	31320 <flatcc_json_parser_struct_as_root@@Base+0x1224>
   31300:	cmp	r0, #9
   31304:	bhi	31380 <flatcc_json_parser_struct_as_root@@Base+0x1284>
   31308:	add	r3, r0, #48	; 0x30
   3130c:	mov	r2, #0
   31310:	mov	r0, #1
   31314:	strb	r3, [r1]
   31318:	strb	r2, [r1, #1]
   3131c:	bx	lr
   31320:	movw	r2, #34079	; 0x851f
   31324:	movt	r2, #20971	; 0x51eb
   31328:	str	r4, [sp, #-8]!
   3132c:	ldr	ip, [pc, #124]	; 313b0 <flatcc_json_parser_struct_as_root@@Base+0x12b4>
   31330:	mov	r0, #0
   31334:	umull	r4, r2, r2, r3
   31338:	str	lr, [sp, #4]
   3133c:	mov	lr, #100	; 0x64
   31340:	strb	r0, [r1, #3]
   31344:	mov	r0, #3
   31348:	ldr	r4, [sp]
   3134c:	add	sp, sp, #4
   31350:	lsr	r2, r2, #5
   31354:	add	ip, pc, ip
   31358:	mls	r3, lr, r2, r3
   3135c:	add	r2, r2, #48	; 0x30
   31360:	uxtb	r3, r3
   31364:	ldrb	lr, [ip, r3, lsl #1]
   31368:	add	ip, ip, r3, lsl #1
   3136c:	strb	lr, [r1, #1]
   31370:	ldrb	r3, [ip, #1]
   31374:	strb	r2, [r1]
   31378:	strb	r3, [r1, #2]
   3137c:	pop	{pc}		; (ldr pc, [sp], #4)
   31380:	ldr	r2, [pc, #44]	; 313b4 <flatcc_json_parser_struct_as_root@@Base+0x12b8>
   31384:	mov	ip, #0
   31388:	sxth	r3, r0
   3138c:	mov	r0, #2
   31390:	strb	ip, [r1, #2]
   31394:	add	r2, pc, r2
   31398:	ldrb	ip, [r2, r3, lsl #1]
   3139c:	add	r3, r2, r3, lsl #1
   313a0:	strb	ip, [r1]
   313a4:	ldrb	r3, [r3, #1]
   313a8:	strb	r3, [r1, #1]
   313ac:	bx	lr
   313b0:	andeq	r3, r1, r4, lsl r1
   313b4:	ldrdeq	r3, [r1], -r4
   313b8:	ldr	r3, [pc, #36]	; 313e4 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   313bc:	mov	r2, #260	; 0x104
   313c0:	str	r4, [sp, #-8]!
   313c4:	ldr	r1, [pc, #28]	; 313e8 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   313c8:	str	lr, [sp, #4]
   313cc:	ldr	r0, [pc, #24]	; 313ec <flatcc_json_parser_struct_as_root@@Base+0x12f0>
   313d0:	add	r3, pc, r3
   313d4:	add	r3, r3, #204	; 0xcc
   313d8:	add	r1, pc, r1
   313dc:	add	r0, pc, r0
   313e0:	bl	145e8 <__assert_fail@plt>
   313e4:	muleq	r1, r8, r0
   313e8:	andeq	r2, r1, ip, lsl ip
   313ec:	andeq	r2, r1, r8, lsl #25
   313f0:	ldr	r3, [pc, #36]	; 3141c <flatcc_json_parser_struct_as_root@@Base+0x1320>
   313f4:	mov	r2, #239	; 0xef
   313f8:	str	r4, [sp, #-8]!
   313fc:	ldr	r1, [pc, #28]	; 31420 <flatcc_json_parser_struct_as_root@@Base+0x1324>
   31400:	str	lr, [sp, #4]
   31404:	ldr	r0, [pc, #24]	; 31424 <flatcc_json_parser_struct_as_root@@Base+0x1328>
   31408:	add	r3, pc, r3
   3140c:	add	r3, r3, #228	; 0xe4
   31410:	add	r1, pc, r1
   31414:	add	r0, pc, r0
   31418:	bl	145e8 <__assert_fail@plt>
   3141c:	andeq	r3, r1, r0, rrx
   31420:	andeq	r2, r1, r4, ror #23
   31424:	muleq	r1, r4, r7
   31428:	cmp	r0, #0
   3142c:	beq	31450 <flatcc_json_parser_struct_as_root@@Base+0x1354>
   31430:	ldr	r3, [pc, #60]	; 31474 <flatcc_json_parser_struct_as_root@@Base+0x1378>
   31434:	mov	r0, #4
   31438:	add	r3, pc, r3
   3143c:	ldrb	r2, [r3, #252]	; 0xfc
   31440:	ldr	r3, [r3, #248]	; 0xf8
   31444:	str	r3, [r1]
   31448:	strb	r2, [r1, #4]
   3144c:	bx	lr
   31450:	ldr	r3, [pc, #32]	; 31478 <flatcc_json_parser_struct_as_root@@Base+0x137c>
   31454:	mov	r0, #5
   31458:	add	r3, pc, r3
   3145c:	add	ip, r3, #256	; 0x100
   31460:	ldr	r2, [r3, #256]	; 0x100
   31464:	ldrh	r3, [ip, #4]
   31468:	str	r2, [r1]
   3146c:	strh	r3, [r1, #4]
   31470:	bx	lr
   31474:	andeq	r3, r1, r0, lsr r0
   31478:	andeq	r3, r1, r0, lsl r0
   3147c:	mov	ip, #0
   31480:	strd	r4, [sp, #-12]!
   31484:	mov	r5, r0
   31488:	str	lr, [sp, #8]
   3148c:	sub	sp, sp, #12
   31490:	cmp	r1, ip
   31494:	cmpne	r2, #7
   31498:	str	ip, [sp, #4]
   3149c:	bls	314e4 <flatcc_json_parser_struct_as_root@@Base+0x13e8>
   314a0:	cmp	r3, #0
   314a4:	beq	314d0 <flatcc_json_parser_struct_as_root@@Base+0x13d4>
   314a8:	mov	r2, #4
   314ac:	mov	r4, r1
   314b0:	add	r0, sp, r2
   314b4:	mov	r1, r3
   314b8:	bl	145a0 <strncpy@plt>
   314bc:	ldr	r2, [r4, #4]
   314c0:	ldr	r3, [sp, #4]
   314c4:	cmp	r2, r3
   314c8:	cmpne	r3, #0
   314cc:	bne	31518 <flatcc_json_parser_struct_as_root@@Base+0x141c>
   314d0:	mov	r0, #1
   314d4:	add	sp, sp, #12
   314d8:	ldrd	r4, [sp]
   314dc:	add	sp, sp, #8
   314e0:	pop	{pc}		; (ldr pc, [sp], #4)
   314e4:	ldr	r3, [r0, #36]	; 0x24
   314e8:	movw	r2, #1019	; 0x3fb
   314ec:	ldr	r1, [pc, #88]	; 3154c <flatcc_json_parser_struct_as_root@@Base+0x1450>
   314f0:	cmp	r3, ip
   314f4:	moveq	r3, #1
   314f8:	add	r1, pc, r1
   314fc:	streq	r3, [r0, #36]	; 0x24
   31500:	ldr	r3, [pc, #72]	; 31550 <flatcc_json_parser_struct_as_root@@Base+0x1454>
   31504:	ldr	r0, [pc, #72]	; 31554 <flatcc_json_parser_struct_as_root@@Base+0x1458>
   31508:	add	r3, pc, r3
   3150c:	add	r3, r3, #264	; 0x108
   31510:	add	r0, pc, r0
   31514:	bl	145e8 <__assert_fail@plt>
   31518:	ldr	r3, [r5, #36]	; 0x24
   3151c:	movw	r2, #1028	; 0x404
   31520:	ldr	r1, [pc, #48]	; 31558 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   31524:	ldr	r0, [pc, #48]	; 3155c <flatcc_json_parser_struct_as_root@@Base+0x1460>
   31528:	cmp	r3, #0
   3152c:	moveq	r3, #1
   31530:	add	r1, pc, r1
   31534:	streq	r3, [r5, #36]	; 0x24
   31538:	ldr	r3, [pc, #32]	; 31560 <flatcc_json_parser_struct_as_root@@Base+0x1464>
   3153c:	add	r0, pc, r0
   31540:	add	r3, pc, r3
   31544:	add	r3, r3, #264	; 0x108
   31548:	bl	145e8 <__assert_fail@plt>
   3154c:	andeq	r3, r1, ip, asr #13
   31550:	andeq	r2, r1, r0, ror #30
   31554:	andeq	r3, r1, r8, lsl r7
   31558:	muleq	r1, r4, r6
   3155c:	andeq	r3, r1, ip, lsl #14
   31560:	andeq	r2, r1, r8, lsr #30
   31564:	bics	ip, r3, #224	; 0xe0
   31568:	strd	r4, [sp, #-20]!	; 0xffffffec
   3156c:	strd	r6, [sp, #8]
   31570:	mov	r7, r0
   31574:	str	lr, [sp, #16]
   31578:	ldr	r6, [r2]
   3157c:	beq	31690 <flatcc_json_parser_struct_as_root@@Base+0x1594>
   31580:	cmp	ip, #1
   31584:	movne	r3, #0
   31588:	movne	r0, #3
   3158c:	bne	3167c <flatcc_json_parser_struct_as_root@@Base+0x1580>
   31590:	ldr	r5, [pc, #328]	; 316e0 <flatcc_json_parser_struct_as_root@@Base+0x15e4>
   31594:	add	r5, pc, r5
   31598:	cmp	r6, #2
   3159c:	bls	31618 <flatcc_json_parser_struct_as_root@@Base+0x151c>
   315a0:	add	r4, r7, #4
   315a4:	add	ip, r1, #3
   315a8:	ldrb	r0, [ip, #-3]
   315ac:	sub	r6, r6, #3
   315b0:	mov	r1, ip
   315b4:	cmp	r6, #2
   315b8:	mov	r7, r4
   315bc:	add	ip, ip, #3
   315c0:	add	r4, r4, #4
   315c4:	ldrb	r0, [r5, r0, lsr #2]
   315c8:	strb	r0, [r4, #-8]
   315cc:	ldrb	lr, [ip, #-6]
   315d0:	ldrb	r0, [ip, #-5]
   315d4:	lsl	lr, lr, #4
   315d8:	and	lr, lr, #48	; 0x30
   315dc:	orr	lr, lr, r0, lsr #4
   315e0:	ldrb	r0, [r5, lr]
   315e4:	strb	r0, [r4, #-7]
   315e8:	ldrb	lr, [ip, #-5]
   315ec:	ldrb	r0, [ip, #-4]
   315f0:	lsl	lr, lr, #2
   315f4:	and	lr, lr, #60	; 0x3c
   315f8:	orr	lr, lr, r0, lsr #6
   315fc:	ldrb	r0, [r5, lr]
   31600:	strb	r0, [r4, #-6]
   31604:	ldrb	r0, [ip, #-4]
   31608:	and	r0, r0, #63	; 0x3f
   3160c:	ldrb	r0, [r5, r0]
   31610:	strb	r0, [r4, #-5]
   31614:	bhi	315a8 <flatcc_json_parser_struct_as_root@@Base+0x14ac>
   31618:	cmp	r6, #1
   3161c:	and	r0, r3, #128	; 0x80
   31620:	beq	316a8 <flatcc_json_parser_struct_as_root@@Base+0x15ac>
   31624:	cmp	r6, #2
   31628:	bne	3169c <flatcc_json_parser_struct_as_root@@Base+0x15a0>
   3162c:	ldrb	r3, [r1]
   31630:	cmp	r0, #0
   31634:	movne	r0, #0
   31638:	ldrb	r3, [r5, r3, lsr #2]
   3163c:	strb	r3, [r7]
   31640:	ldrb	r3, [r1]
   31644:	ldrb	ip, [r1, #1]
   31648:	lsl	r3, r3, #4
   3164c:	and	r3, r3, #48	; 0x30
   31650:	orr	r3, r3, ip, lsr #4
   31654:	ldrb	r3, [r5, r3]
   31658:	strb	r3, [r7, #1]
   3165c:	ldrb	r3, [r1, #1]
   31660:	lsl	r3, r3, #2
   31664:	and	r3, r3, #60	; 0x3c
   31668:	ldrb	r3, [r5, r3]
   3166c:	strb	r3, [r7, #2]
   31670:	movne	r3, #61	; 0x3d
   31674:	strbne	r3, [r7, #3]
   31678:	ldr	r3, [r2]
   3167c:	str	r3, [r2]
   31680:	ldrd	r4, [sp]
   31684:	ldrd	r6, [sp, #8]
   31688:	add	sp, sp, #16
   3168c:	pop	{pc}		; (ldr pc, [sp], #4)
   31690:	ldr	r5, [pc, #76]	; 316e4 <flatcc_json_parser_struct_as_root@@Base+0x15e8>
   31694:	add	r5, pc, r5
   31698:	b	31598 <flatcc_json_parser_struct_as_root@@Base+0x149c>
   3169c:	mov	r0, #0
   316a0:	ldr	r3, [r2]
   316a4:	b	3167c <flatcc_json_parser_struct_as_root@@Base+0x1580>
   316a8:	ldrb	r3, [r1]
   316ac:	cmp	r0, #0
   316b0:	movne	r0, #0
   316b4:	ldrb	r3, [r5, r3, lsr #2]
   316b8:	strb	r3, [r7]
   316bc:	ldrb	r3, [r1]
   316c0:	lsl	r3, r3, #4
   316c4:	and	r3, r3, #48	; 0x30
   316c8:	ldrb	r3, [r5, r3]
   316cc:	strb	r3, [r7, #1]
   316d0:	movne	r3, #61	; 0x3d
   316d4:	strbne	r3, [r7, #2]
   316d8:	strbne	r3, [r7, #3]
   316dc:	b	31678 <flatcc_json_parser_struct_as_root@@Base+0x157c>
   316e0:	ldrdeq	r3, [r1], -r0
   316e4:	andeq	r3, r1, r4, lsl r6
   316e8:	subs	r1, r0, #0
   316ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   316f0:	strd	r6, [sp, #8]
   316f4:	strd	r8, [sp, #16]
   316f8:	strd	sl, [sp, #24]
   316fc:	str	lr, [sp, #32]
   31700:	sub	sp, sp, #164	; 0xa4
   31704:	vstr	d0, [sp, #48]	; 0x30
   31708:	str	r1, [sp, #60]	; 0x3c
   3170c:	beq	32204 <flatcc_json_parser_struct_as_root@@Base+0x2108>
   31710:	vmov	r4, r5, d0
   31714:	mov	r7, #0
   31718:	movt	r7, #65504	; 0xffe0
   3171c:	mov	r6, #0
   31720:	adds	r2, r4, r4
   31724:	adc	r3, r5, r5
   31728:	cmp	r3, r7
   3172c:	cmpeq	r2, r6
   31730:	bhi	31f90 <flatcc_json_parser_struct_as_root@@Base+0x1e94>
   31734:	cmp	r4, #0
   31738:	sbcs	r3, r5, #0
   3173c:	blt	31f28 <flatcc_json_parser_struct_as_root@@Base+0x1e2c>
   31740:	ldr	r3, [sp, #60]	; 0x3c
   31744:	str	r3, [sp, #56]	; 0x38
   31748:	orrs	r3, r4, r5
   3174c:	beq	31f54 <flatcc_json_parser_struct_as_root@@Base+0x1e58>
   31750:	mov	r3, #0
   31754:	movt	r3, #32752	; 0x7ff0
   31758:	mov	r2, #0
   3175c:	cmp	r5, r3
   31760:	cmpeq	r4, r2
   31764:	beq	31fd8 <flatcc_json_parser_struct_as_root@@Base+0x1edc>
   31768:	ldrd	r2, [sp, #48]	; 0x30
   3176c:	mov	r8, #0
   31770:	bic	r9, r3, #-2147483648	; 0x80000000
   31774:	mov	r0, r3
   31778:	str	r2, [sp, #72]	; 0x48
   3177c:	lsr	r9, r9, #20
   31780:	ubfx	r3, r0, #0, #20
   31784:	lsl	r9, r9, #20
   31788:	str	r3, [sp, #76]	; 0x4c
   3178c:	orrs	r3, r8, r9
   31790:	beq	31fac <flatcc_json_parser_struct_as_root@@Base+0x1eb0>
   31794:	ldrd	r2, [sp, #72]	; 0x48
   31798:	ubfx	r0, r0, #20, #11
   3179c:	sub	r0, r0, #1072	; 0x430
   317a0:	adds	r4, r2, #0
   317a4:	adc	r7, r3, #1048576	; 0x100000
   317a8:	sub	r3, r0, #3
   317ac:	sub	r0, r0, #4
   317b0:	str	r3, [sp, #120]	; 0x78
   317b4:	ldr	ip, [sp, #120]	; 0x78
   317b8:	mov	lr, #0
   317bc:	movt	lr, #65472	; 0xffc0
   317c0:	str	r4, [sp, #32]
   317c4:	mov	r5, #0
   317c8:	str	r7, [sp, #36]	; 0x24
   317cc:	strd	sl, [sp, #112]	; 0x70
   317d0:	mov	fp, r7
   317d4:	ldrd	r2, [sp, #32]
   317d8:	strd	r8, [sp, #32]
   317dc:	mov	r9, r4
   317e0:	mov	r4, r0
   317e4:	mov	r0, lr
   317e8:	lsl	r1, r3, #10
   317ec:	mov	r6, r5
   317f0:	sub	ip, ip, #10
   317f4:	lsl	lr, r2, #10
   317f8:	orr	r1, r1, r2, lsr #22
   317fc:	mov	r2, lr
   31800:	and	r7, r1, r0
   31804:	mov	r3, r1
   31808:	orrs	r1, r6, r7
   3180c:	beq	317e8 <flatcc_json_parser_struct_as_root@@Base+0x16ec>
   31810:	cmp	lr, #0
   31814:	mov	r0, r4
   31818:	str	ip, [sp, #88]	; 0x58
   3181c:	mov	r4, r9
   31820:	ldrd	r8, [sp, #32]
   31824:	mov	r7, fp
   31828:	strd	r2, [sp, #32]
   3182c:	sbcs	r3, r3, #0
   31830:	blt	3185c <flatcc_json_parser_struct_as_root@@Base+0x1760>
   31834:	ldrd	r2, [sp, #32]
   31838:	mov	r1, ip
   3183c:	adds	r2, r2, r2
   31840:	sub	r1, r1, #1
   31844:	adc	r3, r3, r3
   31848:	cmp	r2, #0
   3184c:	sbcs	ip, r3, #0
   31850:	bge	3183c <flatcc_json_parser_struct_as_root@@Base+0x1740>
   31854:	strd	r2, [sp, #32]
   31858:	str	r1, [sp, #88]	; 0x58
   3185c:	adds	lr, r4, r4
   31860:	mov	r6, #0
   31864:	movt	r6, #65472	; 0xffc0
   31868:	adc	r3, r7, r7
   3186c:	strd	r8, [sp, #136]	; 0x88
   31870:	adds	sl, lr, #1
   31874:	sub	r5, r0, #10
   31878:	str	lr, [sp, #144]	; 0x90
   3187c:	adc	fp, r3, #0
   31880:	mov	ip, #0
   31884:	str	r3, [sp, #148]	; 0x94
   31888:	mov	r9, r7
   3188c:	mov	r3, r4
   31890:	mov	lr, r6
   31894:	mov	r4, r0
   31898:	lsl	r1, fp, #10
   3189c:	mov	r0, r5
   318a0:	mov	r6, ip
   318a4:	lsl	r5, sl, #10
   318a8:	orr	r1, r1, sl, lsr #22
   318ac:	mov	sl, r5
   318b0:	sub	r5, r0, #10
   318b4:	and	r7, r1, lr
   318b8:	mov	fp, r1
   318bc:	orrs	r2, r6, r7
   318c0:	beq	31898 <flatcc_json_parser_struct_as_root@@Base+0x179c>
   318c4:	mov	r1, r0
   318c8:	cmp	sl, #0
   318cc:	ldr	lr, [sp, #144]	; 0x90
   318d0:	mov	r0, r4
   318d4:	mov	r4, r3
   318d8:	sbcs	r3, fp, #0
   318dc:	mov	r7, r9
   318e0:	str	r1, [sp, #112]	; 0x70
   318e4:	ldrd	r8, [sp, #136]	; 0x88
   318e8:	blt	31910 <flatcc_json_parser_struct_as_root@@Base+0x1814>
   318ec:	ldrd	r2, [sp, #32]
   318f0:	adds	sl, sl, sl
   318f4:	sub	r1, r1, #1
   318f8:	adc	fp, fp, fp
   318fc:	cmp	sl, #0
   31900:	sbcs	ip, fp, #0
   31904:	bge	318f0 <flatcc_json_parser_struct_as_root@@Base+0x17f4>
   31908:	strd	r2, [sp, #32]
   3190c:	str	r1, [sp, #112]	; 0x70
   31910:	vldr	d7, [sp, #48]	; 0x30
   31914:	vcmpe.f64	d7, #0.0
   31918:	vmrs	APSR_nzcv, fpscr
   3191c:	ble	32228 <flatcc_json_parser_struct_as_root@@Base+0x212c>
   31920:	vldr	d7, [pc, #888]	; 31ca0 <flatcc_json_parser_struct_as_root@@Base+0x1ba4>
   31924:	vldr	d6, [sp, #48]	; 0x30
   31928:	vcmpe.f64	d6, d7
   3192c:	vmrs	APSR_nzcv, fpscr
   31930:	bhi	32228 <flatcc_json_parser_struct_as_root@@Base+0x212c>
   31934:	orrs	r3, r8, r9
   31938:	ldrd	r2, [sp, #72]	; 0x48
   3193c:	movne	r1, #1
   31940:	moveq	r1, #0
   31944:	mov	ip, r2
   31948:	orrs	r3, ip, r3
   3194c:	movne	r1, #0
   31950:	cmp	r1, #0
   31954:	bne	32110 <flatcc_json_parser_struct_as_root@@Base+0x2014>
   31958:	ldr	r3, [sp, #148]	; 0x94
   3195c:	subs	lr, lr, #1
   31960:	sbc	ip, r3, #0
   31964:	ldr	r3, [sp, #112]	; 0x70
   31968:	mvn	r1, #60	; 0x3c
   3196c:	vldr	d6, [pc, #820]	; 31ca8 <flatcc_json_parser_struct_as_root@@Base+0x1bac>
   31970:	sub	r0, r0, r3
   31974:	ldr	r3, [sp, #88]	; 0x58
   31978:	lsl	ip, ip, r0
   3197c:	sub	r4, r0, #32
   31980:	lsl	r7, lr, r0
   31984:	orr	ip, ip, lr, lsl r4
   31988:	sub	r3, r1, r3
   3198c:	rsb	r1, r0, #32
   31990:	orr	ip, ip, lr, lsr r1
   31994:	vmov	s14, r3
   31998:	vcvt.f64.s32	d7, s14
   3199c:	vmul.f64	d7, d7, d6
   319a0:	vcmpe.f64	d7, #0.0
   319a4:	vcvt.s32.f64	s13, d7
   319a8:	vmrs	APSR_nzcv, fpscr
   319ac:	bmi	319d0 <flatcc_json_parser_struct_as_root@@Base+0x18d4>
   319b0:	vcvt.f64.s32	d5, s13
   319b4:	vsub.f64	d7, d7, d5
   319b8:	vcmp.f64	d7, #0.0
   319bc:	vmrs	APSR_nzcv, fpscr
   319c0:	beq	319d0 <flatcc_json_parser_struct_as_root@@Base+0x18d4>
   319c4:	vmov	r3, s13
   319c8:	add	r3, r3, #1
   319cc:	vmov	s13, r3
   319d0:	vmov	r3, s13
   319d4:	mov	r1, #0
   319d8:	add	r9, r3, #344	; 0x158
   319dc:	ldr	r3, [pc, #716]	; 31cb0 <flatcc_json_parser_struct_as_root@@Base+0x1bb4>
   319e0:	add	lr, r9, #10
   319e4:	add	r9, r9, #3
   319e8:	cmp	r9, r1
   319ec:	movlt	r9, lr
   319f0:	asr	r9, r9, #3
   319f4:	add	r3, pc, r3
   319f8:	add	r9, r9, #1
   319fc:	add	r0, r3, #320	; 0x140
   31a00:	lsl	lr, r9, #4
   31a04:	add	r4, r3, #312	; 0x138
   31a08:	str	r3, [sp, #144]	; 0x90
   31a0c:	ldrd	r2, [sp, #32]
   31a10:	add	r0, r0, lr
   31a14:	add	r9, r4, lr
   31a18:	ldr	lr, [r0, #-8]
   31a1c:	ldr	r8, [r0, #-4]
   31a20:	umull	r4, r5, r3, lr
   31a24:	mov	r3, r2
   31a28:	umull	r2, r3, r3, lr
   31a2c:	str	r5, [sp, #72]	; 0x48
   31a30:	adds	r2, r3, r4
   31a34:	ldr	r3, [sp, #32]
   31a38:	adc	r6, r1, r1
   31a3c:	adds	r2, r2, #-2147483648	; 0x80000000
   31a40:	adc	r6, r6, r1
   31a44:	umull	r4, r5, r3, r8
   31a48:	ldr	r3, [sp, #72]	; 0x48
   31a4c:	mov	r0, r4
   31a50:	adds	r2, r2, r0
   31a54:	ldrsh	r0, [r9, #8]
   31a58:	adc	r6, r6, r1
   31a5c:	adds	r3, r3, r5
   31a60:	umull	r4, r5, lr, r7
   31a64:	mov	r4, #0
   31a68:	str	r3, [sp, #104]	; 0x68
   31a6c:	adc	r3, r1, r1
   31a70:	ldr	r1, [sp, #88]	; 0x58
   31a74:	str	r3, [sp, #108]	; 0x6c
   31a78:	umull	r2, r3, lr, ip
   31a7c:	strd	r2, [sp, #120]	; 0x78
   31a80:	ldrsh	r3, [r9, #10]
   31a84:	ldr	r9, [sp, #36]	; 0x24
   31a88:	str	r3, [sp, #136]	; 0x88
   31a8c:	ldrd	r2, [sp, #104]	; 0x68
   31a90:	umlal	r2, r3, r8, r9
   31a94:	add	r9, r0, r1
   31a98:	umull	r0, r1, r8, r7
   31a9c:	strd	r0, [sp, #72]	; 0x48
   31aa0:	adds	r1, r6, r2
   31aa4:	adc	r3, r4, r3
   31aa8:	str	r1, [sp, #128]	; 0x80
   31aac:	umull	r0, r1, r8, ip
   31ab0:	str	r3, [sp, #132]	; 0x84
   31ab4:	ldrd	r2, [sp, #120]	; 0x78
   31ab8:	strd	r0, [sp, #32]
   31abc:	umull	r0, r1, lr, fp
   31ac0:	adds	r5, r5, r2
   31ac4:	mov	r6, r3
   31ac8:	ldrd	r2, [sp, #72]	; 0x48
   31acc:	adc	ip, r4, r4
   31ad0:	adds	r5, r5, #-2147483648	; 0x80000000
   31ad4:	strd	r0, [sp, #72]	; 0x48
   31ad8:	adc	ip, ip, r4
   31adc:	umull	r0, r1, lr, sl
   31ae0:	mov	r7, r3
   31ae4:	ldr	r3, [sp, #32]
   31ae8:	adds	r5, r5, r2
   31aec:	adc	ip, ip, r4
   31af0:	subs	r2, r3, #1
   31af4:	ldr	r3, [sp, #36]	; 0x24
   31af8:	sbc	r3, r3, #0
   31afc:	adds	r6, r2, r6
   31b00:	adc	r3, r3, r4
   31b04:	adds	lr, r6, r7
   31b08:	umull	r6, r7, r8, sl
   31b0c:	adc	r3, r3, r4
   31b10:	mov	r2, r1
   31b14:	umull	sl, fp, r8, fp
   31b18:	adds	r1, ip, lr
   31b1c:	adc	r3, r4, r3
   31b20:	str	r1, [sp, #96]	; 0x60
   31b24:	ldrd	r0, [sp, #72]	; 0x48
   31b28:	str	r3, [sp, #100]	; 0x64
   31b2c:	adds	r2, r2, r0
   31b30:	adc	r3, r4, r4
   31b34:	adds	r2, r2, #-2147483648	; 0x80000000
   31b38:	adc	r3, r3, r4
   31b3c:	adds	r2, r2, r6
   31b40:	adc	r3, r3, r4
   31b44:	mov	r2, r1
   31b48:	adds	r0, sl, #1
   31b4c:	adc	r1, fp, r4
   31b50:	adds	r2, r0, r2
   31b54:	adc	r1, r1, r4
   31b58:	adds	r2, r2, r7
   31b5c:	mov	r0, r4
   31b60:	adc	r4, r1, r4
   31b64:	adds	r3, r3, r2
   31b68:	str	r3, [sp, #80]	; 0x50
   31b6c:	adc	r3, r0, r4
   31b70:	str	r3, [sp, #84]	; 0x54
   31b74:	ldrd	r0, [sp, #80]	; 0x50
   31b78:	ldrd	r2, [sp, #96]	; 0x60
   31b7c:	subs	ip, r0, r2
   31b80:	str	ip, [sp, #64]	; 0x40
   31b84:	sbc	ip, r1, r3
   31b88:	cmp	r3, r1
   31b8c:	cmpeq	r2, r0
   31b90:	str	ip, [sp, #68]	; 0x44
   31b94:	bhi	32200 <flatcc_json_parser_struct_as_root@@Base+0x2104>
   31b98:	add	r3, r9, #129	; 0x81
   31b9c:	movw	r4, #1233	; 0x4d1
   31ba0:	ldr	r6, [sp, #144]	; 0x90
   31ba4:	mvn	r0, #63	; 0x3f
   31ba8:	mov	r2, #1
   31bac:	mul	r4, r4, r3
   31bb0:	sub	r0, r0, r9
   31bb4:	ldrd	r8, [sp, #80]	; 0x50
   31bb8:	sub	r7, r0, #32
   31bbc:	lsl	ip, r2, r0
   31bc0:	rsb	sl, r0, #32
   31bc4:	lsl	r5, r2, r7
   31bc8:	asr	r4, r4, #12
   31bcc:	str	r7, [sp, #72]	; 0x48
   31bd0:	str	ip, [sp, #148]	; 0x94
   31bd4:	add	lr, r4, r2
   31bd8:	lsr	r3, r8, r0
   31bdc:	add	r1, r6, lr, lsl #2
   31be0:	orr	r2, r5, r2, lsr sl
   31be4:	subs	r5, ip, #1
   31be8:	ldr	ip, [r1, #1704]	; 0x6a8
   31bec:	orr	r3, r3, r9, lsl sl
   31bf0:	mov	r1, r8
   31bf4:	and	r1, r1, r5
   31bf8:	orr	r3, r3, r9, lsr r7
   31bfc:	str	r2, [sp, #144]	; 0x90
   31c00:	sbc	r2, r2, #0
   31c04:	str	r1, [sp, #32]
   31c08:	cmp	r3, ip
   31c0c:	str	r5, [sp, #96]	; 0x60
   31c10:	str	r2, [sp, #104]	; 0x68
   31c14:	and	r2, r9, r2
   31c18:	str	r2, [sp, #36]	; 0x24
   31c1c:	bcs	31c30 <flatcc_json_parser_struct_as_root@@Base+0x1b34>
   31c20:	add	r2, r6, r4, lsl #2
   31c24:	mov	lr, r4
   31c28:	sub	r4, r4, #1
   31c2c:	ldr	ip, [r2, #1704]	; 0x6a8
   31c30:	cmp	lr, #0
   31c34:	ble	32188 <flatcc_json_parser_struct_as_root@@Base+0x208c>
   31c38:	udiv	r2, r3, ip
   31c3c:	ldrd	r6, [sp, #32]
   31c40:	mls	r8, ip, r2, r3
   31c44:	ldr	r3, [sp, #56]	; 0x38
   31c48:	add	r2, r2, #48	; 0x30
   31c4c:	lsl	r1, r8, r0
   31c50:	strb	r2, [r3]
   31c54:	ldr	r3, [sp, #72]	; 0x48
   31c58:	lsl	r2, r8, r3
   31c5c:	adds	r3, r1, r6
   31c60:	orr	r2, r2, r8, lsr sl
   31c64:	str	r3, [sp, #40]	; 0x28
   31c68:	adc	r3, r2, r7
   31c6c:	ldrd	r6, [sp, #64]	; 0x40
   31c70:	str	r3, [sp, #44]	; 0x2c
   31c74:	ldrd	r2, [sp, #40]	; 0x28
   31c78:	cmp	r7, r3
   31c7c:	cmpeq	r6, r2
   31c80:	bhi	3200c <flatcc_json_parser_struct_as_root@@Base+0x1f10>
   31c84:	movw	fp, #52429	; 0xcccd
   31c88:	movt	fp, #52428	; 0xcccc
   31c8c:	ldr	lr, [sp, #56]	; 0x38
   31c90:	mov	r5, #1
   31c94:	mov	r3, r8
   31c98:	b	31d20 <flatcc_json_parser_struct_as_root@@Base+0x1c24>
   31c9c:	nop	{0}
   31ca0:			; <UNDEFINED> instruction: 0xffffffff
   31ca4:	svcvc	0x00efffff
   31ca8:			; <UNDEFINED> instruction: 0x509f79fe
   31cac:	svccc	0x00d34413
   31cb0:	andeq	r2, r1, r4, ror sl
   31cb4:	andeq	r2, r1, r4, asr #27
   31cb8:	andeq	r2, r1, ip, asr ip
   31cbc:	andeq	r2, r1, r4, asr r2
   31cc0:	ldrdeq	r2, [r1], -r0
   31cc4:	andeq	r2, r1, ip, lsr fp
   31cc8:	andeq	r2, r1, r0, lsr r2
   31ccc:	andeq	r2, r1, ip, lsr #21
   31cd0:	andeq	r2, r1, ip, lsr #22
   31cd4:	udiv	r2, r3, ip
   31cd8:	ldrd	r8, [sp, #32]
   31cdc:	mov	r5, r1
   31ce0:	mls	r3, ip, r2, r3
   31ce4:	add	r2, r2, #48	; 0x30
   31ce8:	strb	r2, [lr, #1]!
   31cec:	ldr	r2, [sp, #72]	; 0x48
   31cf0:	lsl	r6, r3, r0
   31cf4:	adds	r6, r6, r8
   31cf8:	str	r6, [sp, #40]	; 0x28
   31cfc:	lsl	r2, r3, r2
   31d00:	ldrd	r6, [sp, #64]	; 0x40
   31d04:	orr	r2, r2, r3, lsr sl
   31d08:	adc	r2, r2, r9
   31d0c:	str	r2, [sp, #44]	; 0x2c
   31d10:	ldrd	r8, [sp, #40]	; 0x28
   31d14:	cmp	r7, r9
   31d18:	cmpeq	r6, r8
   31d1c:	bhi	32010 <flatcc_json_parser_struct_as_root@@Base+0x1f14>
   31d20:	umull	r2, ip, fp, ip
   31d24:	sub	r4, r4, #1
   31d28:	add	r6, r5, #1
   31d2c:	cmn	r4, #1
   31d30:	mov	r1, r6
   31d34:	lsr	ip, ip, #3
   31d38:	bne	31cd4 <flatcc_json_parser_struct_as_root@@Base+0x1bd8>
   31d3c:	mov	lr, #0
   31d40:	add	r2, lr, r5
   31d44:	sub	r3, r5, #1
   31d48:	ldrd	r8, [sp, #32]
   31d4c:	mov	ip, #1
   31d50:	mov	lr, #0
   31d54:	str	r2, [sp, #40]	; 0x28
   31d58:	ldr	r2, [sp, #56]	; 0x38
   31d5c:	str	r0, [sp, #120]	; 0x78
   31d60:	ldrd	r0, [sp, #64]	; 0x40
   31d64:	str	sl, [sp, #64]	; 0x40
   31d68:	ldr	sl, [sp, #72]	; 0x48
   31d6c:	add	r5, r2, r3
   31d70:	str	r5, [sp, #32]
   31d74:	b	31d7c <flatcc_json_parser_struct_as_root@@Base+0x1c80>
   31d78:	add	r6, r6, #1
   31d7c:	lsl	r2, r9, #2
   31d80:	ldr	r5, [sp, #96]	; 0x60
   31d84:	lsl	r3, r8, #2
   31d88:	orr	r2, r2, r8, lsr #30
   31d8c:	adds	r3, r3, r8
   31d90:	lsl	r4, lr, #2
   31d94:	adc	r2, r2, r9
   31d98:	adds	r3, r3, r3
   31d9c:	lsl	fp, ip, #2
   31da0:	and	r8, r5, r3
   31da4:	ldr	r5, [sp, #120]	; 0x78
   31da8:	orr	r4, r4, ip, lsr #30
   31dac:	adc	r2, r2, r2
   31db0:	adds	ip, fp, ip
   31db4:	lsl	fp, r1, #2
   31db8:	adc	lr, r4, lr
   31dbc:	ldr	r4, [sp, #64]	; 0x40
   31dc0:	adds	ip, ip, ip
   31dc4:	orr	fp, fp, r0, lsr #30
   31dc8:	adc	lr, lr, lr
   31dcc:	lsr	r3, r3, r5
   31dd0:	ldr	r5, [sp, #104]	; 0x68
   31dd4:	orr	r3, r3, r2, lsl r4
   31dd8:	orr	r3, r3, r2, lsr sl
   31ddc:	and	r9, r5, r2
   31de0:	lsl	r2, r0, #2
   31de4:	add	r3, r3, #48	; 0x30
   31de8:	adds	r2, r2, r0
   31dec:	adc	fp, fp, r1
   31df0:	adds	r0, r2, r2
   31df4:	ldr	r2, [sp, #32]
   31df8:	adc	r1, fp, fp
   31dfc:	cmp	r1, r9
   31e00:	cmpeq	r0, r8
   31e04:	strb	r3, [r2, #1]!
   31e08:	ldr	r3, [sp, #40]	; 0x28
   31e0c:	str	r2, [sp, #32]
   31e10:	sub	r4, r3, r6
   31e14:	bls	31d78 <flatcc_json_parser_struct_as_root@@Base+0x1c7c>
   31e18:	ldrd	sl, [sp, #80]	; 0x50
   31e1c:	mov	r5, r6
   31e20:	strd	r8, [sp, #32]
   31e24:	ldr	r8, [sp, #112]	; 0x70
   31e28:	ldrd	r2, [sp, #128]	; 0x80
   31e2c:	subs	r6, sl, r2
   31e30:	sbc	r7, fp, r3
   31e34:	cmp	r3, fp
   31e38:	cmpeq	r2, sl
   31e3c:	ldr	r2, [sp, #88]	; 0x58
   31e40:	movhi	r3, #1
   31e44:	movls	r3, #0
   31e48:	cmp	r2, r8
   31e4c:	orrne	r3, r3, #1
   31e50:	cmp	r3, #0
   31e54:	bne	32200 <flatcc_json_parser_struct_as_root@@Base+0x2104>
   31e58:	ldrd	r8, [sp, #32]
   31e5c:	mul	r7, ip, r7
   31e60:	umull	r2, r3, ip, r6
   31e64:	strd	r0, [sp]
   31e68:	mov	r1, r5
   31e6c:	ldr	r0, [sp, #56]	; 0x38
   31e70:	mla	r6, r6, lr, r7
   31e74:	ldr	r7, [sp, #144]	; 0x90
   31e78:	strd	r8, [sp, #8]
   31e7c:	ldr	r8, [sp, #148]	; 0x94
   31e80:	add	r3, r6, r3
   31e84:	str	ip, [sp, #24]
   31e88:	str	lr, [sp, #28]
   31e8c:	str	r8, [sp, #16]
   31e90:	str	r7, [sp, #20]
   31e94:	bl	30c20 <flatcc_json_parser_struct_as_root@@Base+0xb24>
   31e98:	ldr	r3, [sp, #136]	; 0x88
   31e9c:	cmp	r0, #0
   31ea0:	sub	r6, r4, r3
   31ea4:	beq	32130 <flatcc_json_parser_struct_as_root@@Base+0x2034>
   31ea8:	ldr	r3, [sp, #136]	; 0x88
   31eac:	cmp	r5, #2
   31eb0:	movge	r0, r5
   31eb4:	movlt	r0, #2
   31eb8:	sub	r4, r3, r4
   31ebc:	cmp	r0, r4
   31ec0:	suble	r0, r0, #1
   31ec4:	movgt	r0, r4
   31ec8:	cmp	r6, #0
   31ecc:	blt	32090 <flatcc_json_parser_struct_as_root@@Base+0x1f94>
   31ed0:	ldr	r3, [sp, #56]	; 0x38
   31ed4:	cmp	r6, #2
   31ed8:	add	r3, r3, r5
   31edc:	bgt	32160 <flatcc_json_parser_struct_as_root@@Base+0x2064>
   31ee0:	cmp	r6, #0
   31ee4:	sub	r1, r6, #1
   31ee8:	movgt	r0, r3
   31eec:	movgt	r2, #48	; 0x30
   31ef0:	addgt	r6, r0, r6
   31ef4:	ble	31f14 <flatcc_json_parser_struct_as_root@@Base+0x1e18>
   31ef8:	strb	r2, [r0], #1
   31efc:	cmp	r6, r0
   31f00:	bne	31ef8 <flatcc_json_parser_struct_as_root@@Base+0x1dfc>
   31f04:	ldr	r3, [sp, #56]	; 0x38
   31f08:	add	r0, r5, #1
   31f0c:	add	r0, r0, r1
   31f10:	add	r3, r3, r0
   31f14:	ldr	r1, [sp, #60]	; 0x3c
   31f18:	mov	r2, #0
   31f1c:	strb	r2, [r3]
   31f20:	sub	r0, r3, r1
   31f24:	b	31f74 <flatcc_json_parser_struct_as_root@@Base+0x1e78>
   31f28:	vldr	d7, [sp, #48]	; 0x30
   31f2c:	add	r3, r5, #-2147483648	; 0x80000000
   31f30:	mov	r2, #45	; 0x2d
   31f34:	mov	r5, r3
   31f38:	ldr	r0, [sp, #60]	; 0x3c
   31f3c:	orrs	r3, r4, r5
   31f40:	vneg.f64	d7, d7
   31f44:	strb	r2, [r0], #1
   31f48:	vstr	d7, [sp, #48]	; 0x30
   31f4c:	str	r0, [sp, #56]	; 0x38
   31f50:	bne	31750 <flatcc_json_parser_struct_as_root@@Base+0x1654>
   31f54:	ldr	r1, [sp, #56]	; 0x38
   31f58:	mov	r3, #0
   31f5c:	mov	r2, #48	; 0x30
   31f60:	mov	r0, r1
   31f64:	strb	r2, [r1]
   31f68:	strb	r3, [r0, #1]!
   31f6c:	ldr	r3, [sp, #60]	; 0x3c
   31f70:	sub	r0, r0, r3
   31f74:	add	sp, sp, #164	; 0xa4
   31f78:	ldrd	r4, [sp]
   31f7c:	ldrd	r6, [sp, #8]
   31f80:	ldrd	r8, [sp, #16]
   31f84:	ldrd	sl, [sp, #24]
   31f88:	add	sp, sp, #32
   31f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   31f90:	ldr	r1, [pc, #-740]	; 31cb4 <flatcc_json_parser_struct_as_root@@Base+0x1bb8>
   31f94:	mov	r2, r5
   31f98:	vmov	r3, s0
   31f9c:	add	r1, pc, r1
   31fa0:	bl	145d0 <sprintf@plt>
   31fa4:	mov	r0, #21
   31fa8:	b	31f74 <flatcc_json_parser_struct_as_root@@Base+0x1e78>
   31fac:	ldrd	r2, [sp, #72]	; 0x48
   31fb0:	orrs	r1, r2, r3
   31fb4:	beq	3224c <flatcc_json_parser_struct_as_root@@Base+0x2150>
   31fb8:	movw	r1, #64462	; 0xfbce
   31fbc:	movt	r1, #65535	; 0xffff
   31fc0:	movw	r0, #64461	; 0xfbcd
   31fc4:	movt	r0, #65535	; 0xffff
   31fc8:	mov	r4, r2
   31fcc:	mov	r7, r3
   31fd0:	str	r1, [sp, #120]	; 0x78
   31fd4:	b	317b4 <flatcc_json_parser_struct_as_root@@Base+0x16b8>
   31fd8:	ldr	ip, [sp, #56]	; 0x38
   31fdc:	mov	r3, #105	; 0x69
   31fe0:	mov	r1, #110	; 0x6e
   31fe4:	mov	r2, #102	; 0x66
   31fe8:	mov	r0, ip
   31fec:	strb	r3, [ip]
   31ff0:	mov	r3, #0
   31ff4:	strb	r1, [ip, #1]
   31ff8:	strb	r2, [ip, #2]
   31ffc:	strb	r3, [r0, #3]!
   32000:	ldr	r3, [sp, #60]	; 0x3c
   32004:	sub	r0, r0, r3
   32008:	b	31f74 <flatcc_json_parser_struct_as_root@@Base+0x1e78>
   3200c:	mov	r1, #1
   32010:	ldrd	r6, [sp, #80]	; 0x50
   32014:	ldr	r5, [sp, #88]	; 0x58
   32018:	ldrd	r8, [sp, #128]	; 0x80
   3201c:	subs	r2, r6, r8
   32020:	mov	lr, r9
   32024:	sbc	r3, r7, r9
   32028:	cmp	r9, r7
   3202c:	cmpeq	r8, r6
   32030:	ldr	r6, [sp, #112]	; 0x70
   32034:	movhi	lr, #1
   32038:	movls	lr, #0
   3203c:	cmp	r5, r6
   32040:	orrne	lr, lr, #1
   32044:	cmp	lr, #0
   32048:	bne	32200 <flatcc_json_parser_struct_as_root@@Base+0x2104>
   3204c:	ldrd	r6, [sp, #64]	; 0x40
   32050:	lsl	r9, ip, r0
   32054:	mov	r5, r1
   32058:	ldr	lr, [sp, #72]	; 0x48
   3205c:	ldr	r0, [sp, #56]	; 0x38
   32060:	strd	r6, [sp]
   32064:	mov	r6, #1
   32068:	mov	r7, #0
   3206c:	str	r9, [sp, #16]
   32070:	lsl	lr, ip, lr
   32074:	strd	r6, [sp, #24]
   32078:	orr	lr, lr, ip, lsr sl
   3207c:	ldrd	sl, [sp, #40]	; 0x28
   32080:	strd	sl, [sp, #8]
   32084:	str	lr, [sp, #20]
   32088:	bl	30c20 <flatcc_json_parser_struct_as_root@@Base+0xb24>
   3208c:	b	31e98 <flatcc_json_parser_struct_as_root@@Base+0x1d9c>
   32090:	add	r3, r6, r5
   32094:	cmp	r4, r5
   32098:	cmnge	r3, #2
   3209c:	bge	32194 <flatcc_json_parser_struct_as_root@@Base+0x2098>
   320a0:	cmp	r5, #1
   320a4:	beq	32158 <flatcc_json_parser_struct_as_root@@Base+0x205c>
   320a8:	cmp	r0, #0
   320ac:	ble	320cc <flatcc_json_parser_struct_as_root@@Base+0x1fd0>
   320b0:	ldr	r3, [sp, #56]	; 0x38
   320b4:	add	r3, r3, r5
   320b8:	sub	r1, r3, r0
   320bc:	ldrb	r2, [r3, #-1]
   320c0:	strb	r2, [r3], #-1
   320c4:	cmp	r1, r3
   320c8:	bne	320bc <flatcc_json_parser_struct_as_root@@Base+0x1fc0>
   320cc:	ldr	ip, [sp, #56]	; 0x38
   320d0:	sub	r3, r5, r0
   320d4:	mov	r1, #46	; 0x2e
   320d8:	add	r2, r5, #1
   320dc:	adds	r0, r0, r6
   320e0:	strb	r1, [ip, r3]
   320e4:	add	r3, ip, r2
   320e8:	beq	31f14 <flatcc_json_parser_struct_as_root@@Base+0x1e18>
   320ec:	ldr	r4, [sp, #56]	; 0x38
   320f0:	mov	r3, #101	; 0x65
   320f4:	add	r5, r5, #2
   320f8:	add	r1, r4, r5
   320fc:	strb	r3, [r4, r2]
   32100:	bl	30eac <flatcc_json_parser_struct_as_root@@Base+0xdb0>
   32104:	add	r0, r5, r0
   32108:	add	r3, r4, r0
   3210c:	b	31f14 <flatcc_json_parser_struct_as_root@@Base+0x1e18>
   32110:	ldr	r3, [sp, #120]	; 0x78
   32114:	lsl	ip, r7, #2
   32118:	lsl	lr, r4, #2
   3211c:	orr	ip, ip, r4, lsr #30
   32120:	subs	lr, lr, #1
   32124:	sbc	ip, ip, #0
   32128:	sub	r0, r3, #2
   3212c:	b	31964 <flatcc_json_parser_struct_as_root@@Base+0x1868>
   32130:	ldr	r1, [pc, #-1152]	; 31cb8 <flatcc_json_parser_struct_as_root@@Base+0x1bbc>
   32134:	ldrd	r2, [sp, #48]	; 0x30
   32138:	ldr	r4, [sp, #56]	; 0x38
   3213c:	add	r1, pc, r1
   32140:	mov	r0, r4
   32144:	bl	145d0 <sprintf@plt>
   32148:	ldr	r2, [sp, #60]	; 0x3c
   3214c:	sub	r3, r4, r2
   32150:	add	r0, r3, r0
   32154:	b	31f74 <flatcc_json_parser_struct_as_root@@Base+0x1e78>
   32158:	ldr	r3, [sp, #56]	; 0x38
   3215c:	add	r3, r3, #1
   32160:	ldr	r4, [sp, #56]	; 0x38
   32164:	mov	r2, #101	; 0x65
   32168:	add	r5, r5, #1
   3216c:	mov	r0, r6
   32170:	strb	r2, [r3]
   32174:	add	r1, r4, r5
   32178:	bl	30eac <flatcc_json_parser_struct_as_root@@Base+0xdb0>
   3217c:	add	r0, r5, r0
   32180:	add	r3, r4, r0
   32184:	b	31f14 <flatcc_json_parser_struct_as_root@@Base+0x1e18>
   32188:	mov	r5, #0
   3218c:	mov	r6, #1
   32190:	b	31d40 <flatcc_json_parser_struct_as_root@@Base+0x1c44>
   32194:	ldr	r4, [sp, #56]	; 0x38
   32198:	rsb	r0, r5, #2
   3219c:	mov	r2, r5
   321a0:	sub	r0, r0, r6
   321a4:	mov	r1, r4
   321a8:	add	r0, r4, r0
   321ac:	bl	14504 <memmove@plt>
   321b0:	rsb	r3, r6, #2
   321b4:	mov	r0, #48	; 0x30
   321b8:	sub	r3, r3, r5
   321bc:	mov	r2, #46	; 0x2e
   321c0:	cmp	r3, #2
   321c4:	strb	r0, [r4]
   321c8:	strb	r2, [r4, #1]
   321cc:	ble	321f8 <flatcc_json_parser_struct_as_root@@Base+0x20fc>
   321d0:	sub	r1, r4, #1
   321d4:	add	r2, r4, #1
   321d8:	add	r1, r1, r3
   321dc:	strb	r0, [r2, #1]!
   321e0:	cmp	r1, r2
   321e4:	bne	321dc <flatcc_json_parser_struct_as_root@@Base+0x20e0>
   321e8:	ldr	r2, [sp, #56]	; 0x38
   321ec:	add	r3, r3, r5
   321f0:	add	r3, r2, r3
   321f4:	b	31f14 <flatcc_json_parser_struct_as_root@@Base+0x1e18>
   321f8:	mov	r3, #2
   321fc:	b	321e8 <flatcc_json_parser_struct_as_root@@Base+0x20ec>
   32200:	bl	313f0 <flatcc_json_parser_struct_as_root@@Base+0x12f4>
   32204:	ldr	r3, [pc, #-1360]	; 31cbc <flatcc_json_parser_struct_as_root@@Base+0x1bc0>
   32208:	mov	r2, #189	; 0xbd
   3220c:	ldr	r1, [pc, #-1364]	; 31cc0 <flatcc_json_parser_struct_as_root@@Base+0x1bc4>
   32210:	ldr	r0, [pc, #-1364]	; 31cc4 <flatcc_json_parser_struct_as_root@@Base+0x1bc8>
   32214:	add	r3, pc, r3
   32218:	add	r3, r3, #280	; 0x118
   3221c:	add	r1, pc, r1
   32220:	add	r0, pc, r0
   32224:	bl	145e8 <__assert_fail@plt>
   32228:	ldr	r3, [pc, #-1384]	; 31cc8 <flatcc_json_parser_struct_as_root@@Base+0x1bcc>
   3222c:	mov	r2, #138	; 0x8a
   32230:	ldr	r1, [pc, #-1388]	; 31ccc <flatcc_json_parser_struct_as_root@@Base+0x1bd0>
   32234:	ldr	r0, [pc, #-1388]	; 31cd0 <flatcc_json_parser_struct_as_root@@Base+0x1bd4>
   32238:	add	r3, pc, r3
   3223c:	add	r3, r3, #300	; 0x12c
   32240:	add	r1, pc, r1
   32244:	add	r0, pc, r0
   32248:	bl	145e8 <__assert_fail@plt>
   3224c:	bl	313b8 <flatcc_json_parser_struct_as_root@@Base+0x12bc>
   32250:	ldr	r3, [r0, #20]
   32254:	strd	r4, [sp, #-32]!	; 0xffffffe0
   32258:	strd	r6, [sp, #8]
   3225c:	mov	r6, r0
   32260:	strd	r8, [sp, #16]
   32264:	mov	r8, r2
   32268:	mov	r9, #92	; 0x5c
   3226c:	mov	r2, #34	; 0x22
   32270:	str	sl, [sp, #24]
   32274:	mov	sl, #102	; 0x66
   32278:	add	r0, r3, #1
   3227c:	str	lr, [sp, #28]
   32280:	str	r0, [r6, #20]
   32284:	strb	r2, [r3]
   32288:	ldrb	r4, [r1]
   3228c:	mov	r5, r1
   32290:	cmp	r4, #34	; 0x22
   32294:	cmpne	r4, #31
   32298:	movhi	r7, #1
   3229c:	movls	r7, #0
   322a0:	bls	322d0 <flatcc_json_parser_struct_as_root@@Base+0x21d4>
   322a4:	cmp	r4, #92	; 0x5c
   322a8:	bne	322b8 <flatcc_json_parser_struct_as_root@@Base+0x21bc>
   322ac:	b	32498 <flatcc_json_parser_struct_as_root@@Base+0x239c>
   322b0:	cmp	r4, #92	; 0x5c
   322b4:	beq	322c8 <flatcc_json_parser_struct_as_root@@Base+0x21cc>
   322b8:	ldrb	r4, [r5, #1]!
   322bc:	cmp	r4, #34	; 0x22
   322c0:	cmpne	r4, #31
   322c4:	bhi	322b0 <flatcc_json_parser_struct_as_root@@Base+0x21b4>
   322c8:	sub	r7, r5, r1
   322cc:	sub	r8, r8, r7
   322d0:	ldr	r2, [r6, #16]
   322d4:	ldr	r0, [r6, #20]
   322d8:	add	r3, r0, r7
   322dc:	cmp	r2, r3
   322e0:	mov	r2, r7
   322e4:	bhi	323e8 <flatcc_json_parser_struct_as_root@@Base+0x22ec>
   322e8:	mov	r0, r6
   322ec:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   322f0:	ldr	r7, [r6, #20]
   322f4:	cmp	r8, #0
   322f8:	add	r3, r7, #1
   322fc:	beq	32404 <flatcc_json_parser_struct_as_root@@Base+0x2308>
   32300:	cmp	r4, #12
   32304:	str	r3, [r6, #20]
   32308:	strb	r9, [r7]
   3230c:	beq	32454 <flatcc_json_parser_struct_as_root@@Base+0x2358>
   32310:	bhi	323b8 <flatcc_json_parser_struct_as_root@@Base+0x22bc>
   32314:	cmp	r4, #9
   32318:	beq	32480 <flatcc_json_parser_struct_as_root@@Base+0x2384>
   3231c:	cmp	r4, #10
   32320:	beq	32468 <flatcc_json_parser_struct_as_root@@Base+0x236c>
   32324:	cmp	r4, #8
   32328:	beq	3243c <flatcc_json_parser_struct_as_root@@Base+0x2340>
   3232c:	ldr	r2, [r6, #20]
   32330:	mov	r1, #117	; 0x75
   32334:	mov	r0, #48	; 0x30
   32338:	lsr	r3, r4, #4
   3233c:	and	r4, r4, #15
   32340:	cmp	r3, #10
   32344:	add	ip, r2, #1
   32348:	str	ip, [r6, #20]
   3234c:	strb	r1, [r2]
   32350:	movcc	r2, r0
   32354:	movcs	r2, #87	; 0x57
   32358:	ldr	r1, [r6, #20]
   3235c:	cmp	r4, #10
   32360:	add	r2, r2, r3
   32364:	movcc	r3, r0
   32368:	movcs	r3, #87	; 0x57
   3236c:	add	r3, r3, r4
   32370:	add	ip, r1, #1
   32374:	str	ip, [r6, #20]
   32378:	strb	r0, [r1]
   3237c:	ldr	r1, [r6, #20]
   32380:	add	ip, r1, #1
   32384:	str	ip, [r6, #20]
   32388:	strb	r0, [r1]
   3238c:	ldr	r1, [r6, #20]
   32390:	add	r0, r1, #1
   32394:	str	r0, [r6, #20]
   32398:	strb	r2, [r1]
   3239c:	ldr	r2, [r6, #20]
   323a0:	add	r1, r2, #1
   323a4:	str	r1, [r6, #20]
   323a8:	strb	r3, [r2]
   323ac:	sub	r8, r8, #1
   323b0:	add	r1, r5, #1
   323b4:	b	32288 <flatcc_json_parser_struct_as_root@@Base+0x218c>
   323b8:	cmp	r4, #34	; 0x22
   323bc:	beq	32428 <flatcc_json_parser_struct_as_root@@Base+0x232c>
   323c0:	cmp	r4, #92	; 0x5c
   323c4:	beq	32428 <flatcc_json_parser_struct_as_root@@Base+0x232c>
   323c8:	cmp	r4, #13
   323cc:	bne	3232c <flatcc_json_parser_struct_as_root@@Base+0x2230>
   323d0:	ldr	r3, [r6, #20]
   323d4:	mov	r2, #114	; 0x72
   323d8:	add	r1, r3, #1
   323dc:	str	r1, [r6, #20]
   323e0:	strb	r2, [r3]
   323e4:	b	323ac <flatcc_json_parser_struct_as_root@@Base+0x22b0>
   323e8:	bl	1451c <memcpy@plt>
   323ec:	ldr	r3, [r6, #20]
   323f0:	cmp	r8, #0
   323f4:	add	r7, r3, r7
   323f8:	add	r3, r7, #1
   323fc:	str	r7, [r6, #20]
   32400:	bne	32300 <flatcc_json_parser_struct_as_root@@Base+0x2204>
   32404:	mov	r2, #34	; 0x22
   32408:	str	r3, [r6, #20]
   3240c:	strb	r2, [r7]
   32410:	ldrd	r4, [sp]
   32414:	ldrd	r6, [sp, #8]
   32418:	ldrd	r8, [sp, #16]
   3241c:	ldr	sl, [sp, #24]
   32420:	add	sp, sp, #28
   32424:	pop	{pc}		; (ldr pc, [sp], #4)
   32428:	ldr	r3, [r6, #20]
   3242c:	add	r2, r3, #1
   32430:	str	r2, [r6, #20]
   32434:	strb	r4, [r3]
   32438:	b	323ac <flatcc_json_parser_struct_as_root@@Base+0x22b0>
   3243c:	ldr	r3, [r6, #20]
   32440:	mov	r2, #98	; 0x62
   32444:	add	r1, r3, #1
   32448:	str	r1, [r6, #20]
   3244c:	strb	r2, [r3]
   32450:	b	323ac <flatcc_json_parser_struct_as_root@@Base+0x22b0>
   32454:	ldr	r3, [r6, #20]
   32458:	add	r2, r3, #1
   3245c:	str	r2, [r6, #20]
   32460:	strb	sl, [r3]
   32464:	b	323ac <flatcc_json_parser_struct_as_root@@Base+0x22b0>
   32468:	ldr	r3, [r6, #20]
   3246c:	mov	r2, #110	; 0x6e
   32470:	add	r1, r3, #1
   32474:	str	r1, [r6, #20]
   32478:	strb	r2, [r3]
   3247c:	b	323ac <flatcc_json_parser_struct_as_root@@Base+0x22b0>
   32480:	ldr	r3, [r6, #20]
   32484:	mov	r2, #116	; 0x74
   32488:	add	r1, r3, #1
   3248c:	str	r1, [r6, #20]
   32490:	strb	r2, [r3]
   32494:	b	323ac <flatcc_json_parser_struct_as_root@@Base+0x22b0>
   32498:	mov	r7, #0
   3249c:	b	322d0 <flatcc_json_parser_struct_as_root@@Base+0x21d4>
   324a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   324a4:	mov	r5, r2
   324a8:	mov	r4, r0
   324ac:	ldr	r2, [r0, #20]
   324b0:	strd	r6, [sp, #8]
   324b4:	mov	r6, r1
   324b8:	str	r8, [sp, #16]
   324bc:	str	lr, [sp, #20]
   324c0:	ldrb	r1, [r0, #25]
   324c4:	cmp	r1, #0
   324c8:	bne	325a4 <flatcc_json_parser_struct_as_root@@Base+0x24a8>
   324cc:	ldr	r3, [r0, #16]
   324d0:	cmp	r3, r2
   324d4:	bls	3257c <flatcc_json_parser_struct_as_root@@Base+0x2480>
   324d8:	mov	r3, #34	; 0x22
   324dc:	strb	r3, [r2]
   324e0:	ldrb	r3, [r4, #26]
   324e4:	ldr	r2, [r4, #16]
   324e8:	ldr	r0, [r4, #20]
   324ec:	cmp	r3, #0
   324f0:	addeq	r0, r0, #1
   324f4:	add	r3, r0, r5
   324f8:	cmp	r2, r3
   324fc:	str	r0, [r4, #20]
   32500:	bls	3258c <flatcc_json_parser_struct_as_root@@Base+0x2490>
   32504:	mov	r2, r5
   32508:	mov	r1, r6
   3250c:	bl	1451c <memcpy@plt>
   32510:	ldr	r2, [r4, #20]
   32514:	add	r2, r2, r5
   32518:	str	r2, [r4, #20]
   3251c:	mov	r3, #34	; 0x22
   32520:	mov	ip, #58	; 0x3a
   32524:	mov	r0, #32
   32528:	strb	r3, [r2]
   3252c:	ldrb	r3, [r4, #26]
   32530:	ldr	r1, [r4, #20]
   32534:	clz	r3, r3
   32538:	lsr	r3, r3, #5
   3253c:	add	r2, r1, r3
   32540:	add	r2, r2, #1
   32544:	str	r2, [r4, #20]
   32548:	strb	ip, [r1, r3]
   3254c:	ldr	r3, [r4, #20]
   32550:	strb	r0, [r3]
   32554:	ldrb	r2, [r4, #25]
   32558:	ldr	r3, [r4, #20]
   3255c:	ldrd	r6, [sp, #8]
   32560:	ldr	r8, [sp, #16]
   32564:	cmp	r2, #0
   32568:	addne	r3, r3, #1
   3256c:	str	r3, [r4, #20]
   32570:	ldrd	r4, [sp]
   32574:	add	sp, sp, #20
   32578:	pop	{pc}		; (ldr pc, [sp], #4)
   3257c:	ldr	r3, [r0, #44]	; 0x2c
   32580:	blx	r3
   32584:	ldr	r2, [r4, #20]
   32588:	b	324d8 <flatcc_json_parser_struct_as_root@@Base+0x23dc>
   3258c:	mov	r2, r5
   32590:	mov	r1, r6
   32594:	mov	r0, r4
   32598:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3259c:	ldr	r2, [r4, #20]
   325a0:	b	3251c <flatcc_json_parser_struct_as_root@@Base+0x2420>
   325a4:	add	r1, r2, #1
   325a8:	mov	r3, #10
   325ac:	str	r1, [r0, #20]
   325b0:	strb	r3, [r2]
   325b4:	ldrb	r7, [r0, #25]
   325b8:	ldr	r1, [r0, #16]
   325bc:	ldr	r2, [r0, #32]
   325c0:	ldr	r3, [r0, #20]
   325c4:	mul	r7, r2, r7
   325c8:	add	r2, r3, r7
   325cc:	cmp	r1, r2
   325d0:	bcs	325e4 <flatcc_json_parser_struct_as_root@@Base+0x24e8>
   325d4:	mov	r1, r7
   325d8:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   325dc:	ldr	r2, [r4, #20]
   325e0:	b	324d8 <flatcc_json_parser_struct_as_root@@Base+0x23dc>
   325e4:	mov	r2, r7
   325e8:	mov	r0, r3
   325ec:	mov	r1, #32
   325f0:	bl	14594 <memset@plt>
   325f4:	ldr	r2, [r4, #20]
   325f8:	add	r2, r2, r7
   325fc:	str	r2, [r4, #20]
   32600:	b	324d8 <flatcc_json_parser_struct_as_root@@Base+0x23dc>

00032604 <flatcc_json_printer_error_string@@Base>:
   32604:	cmp	r0, #3
   32608:	addls	pc, pc, r0, lsl #2
   3260c:	b	32650 <flatcc_json_printer_error_string@@Base+0x4c>
   32610:	b	32620 <flatcc_json_printer_error_string@@Base+0x1c>
   32614:	b	32644 <flatcc_json_printer_error_string@@Base+0x40>
   32618:	b	32638 <flatcc_json_printer_error_string@@Base+0x34>
   3261c:	b	3262c <flatcc_json_printer_error_string@@Base+0x28>
   32620:	ldr	r0, [pc, #52]	; 3265c <flatcc_json_printer_error_string@@Base+0x58>
   32624:	add	r0, pc, r0
   32628:	bx	lr
   3262c:	ldr	r0, [pc, #44]	; 32660 <flatcc_json_printer_error_string@@Base+0x5c>
   32630:	add	r0, pc, r0
   32634:	bx	lr
   32638:	ldr	r0, [pc, #36]	; 32664 <flatcc_json_printer_error_string@@Base+0x60>
   3263c:	add	r0, pc, r0
   32640:	bx	lr
   32644:	ldr	r0, [pc, #28]	; 32668 <flatcc_json_printer_error_string@@Base+0x64>
   32648:	add	r0, pc, r0
   3264c:	bx	lr
   32650:	ldr	r0, [pc, #20]	; 3266c <flatcc_json_printer_error_string@@Base+0x68>
   32654:	add	r0, pc, r0
   32658:	bx	lr
   3265c:	andeq	r0, r1, ip, lsr sp
   32660:	ldrdeq	r1, [r1], -r8
   32664:	andeq	r2, r1, r4, ror #14
   32668:	andeq	r2, r1, r8, ror #14
   3266c:	andeq	r0, r1, r4, lsl #26

00032670 <flatcc_json_printer_fmt_float@@Base>:
   32670:	vcvt.f64.f32	d0, s0
   32674:	b	316e8 <flatcc_json_parser_struct_as_root@@Base+0x15ec>

00032678 <flatcc_json_printer_fmt_double@@Base>:
   32678:	b	316e8 <flatcc_json_parser_struct_as_root@@Base+0x15ec>

0003267c <flatcc_json_printer_fmt_bool@@Base>:
   3267c:	cmp	r1, #0
   32680:	mov	r2, r0
   32684:	bne	326a8 <flatcc_json_printer_fmt_bool@@Base+0x2c>
   32688:	ldr	r3, [pc, #48]	; 326c0 <flatcc_json_printer_fmt_bool@@Base+0x44>
   3268c:	mov	r0, #5
   32690:	add	r3, pc, r3
   32694:	ldrb	r1, [r3, #4]
   32698:	ldr	r3, [r3]
   3269c:	str	r3, [r2]
   326a0:	strb	r1, [r2, #4]
   326a4:	bx	lr
   326a8:	ldr	r3, [pc, #20]	; 326c4 <flatcc_json_printer_fmt_bool@@Base+0x48>
   326ac:	mov	r0, #4
   326b0:	add	r3, pc, r3
   326b4:	ldr	r3, [r3]
   326b8:	str	r3, [r2]
   326bc:	bx	lr
   326c0:	ldrdeq	ip, [r0], -r8
   326c4:			; <UNDEFINED> instruction: 0x0000c7b0

000326c8 <flatcc_json_printer_string@@Base>:
   326c8:	b	32250 <flatcc_json_parser_struct_as_root@@Base+0x2154>

000326cc <flatcc_json_printer_write@@Base>:
   326cc:	strd	r4, [sp, #-16]!
   326d0:	ldr	ip, [r0, #16]
   326d4:	str	r6, [sp, #8]
   326d8:	str	lr, [sp, #12]
   326dc:	ldr	lr, [r0, #20]
   326e0:	add	r4, lr, r2
   326e4:	cmp	ip, r4
   326e8:	bhi	32700 <flatcc_json_printer_write@@Base+0x34>
   326ec:	ldrd	r4, [sp]
   326f0:	ldr	r6, [sp, #8]
   326f4:	ldr	lr, [sp, #12]
   326f8:	add	sp, sp, #16
   326fc:	b	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   32700:	mov	r4, r0
   32704:	mov	r0, lr
   32708:	mov	r5, r2
   3270c:	bl	1451c <memcpy@plt>
   32710:	ldr	ip, [r4, #20]
   32714:	ldr	r6, [sp, #8]
   32718:	add	ip, ip, r5
   3271c:	str	ip, [r4, #20]
   32720:	ldrd	r4, [sp]
   32724:	add	sp, sp, #12
   32728:	pop	{pc}		; (ldr pc, [sp], #4)

0003272c <flatcc_json_printer_nl@@Base>:
   3272c:	ldr	r2, [r0, #20]
   32730:	mov	r1, #10
   32734:	add	ip, r2, #1
   32738:	str	ip, [r0, #20]
   3273c:	strb	r1, [r2]
   32740:	ldr	r2, [r0, #16]
   32744:	ldr	r1, [r0, #20]
   32748:	cmp	r1, r2
   3274c:	bcc	3275c <flatcc_json_printer_nl@@Base+0x30>
   32750:	mov	r1, #0
   32754:	ldr	r3, [r0, #44]	; 0x2c
   32758:	bx	r3
   3275c:	bx	lr

00032760 <flatcc_json_printer_char@@Base>:
   32760:	ldr	r3, [r0, #20]
   32764:	add	r2, r3, #1
   32768:	str	r2, [r0, #20]
   3276c:	strb	r1, [r3]
   32770:	bx	lr

00032774 <flatcc_json_printer_indent@@Base>:
   32774:	strd	r4, [sp, #-16]!
   32778:	ldr	ip, [r0, #16]
   3277c:	ldr	r2, [r0, #20]
   32780:	ldr	r5, [r0, #32]
   32784:	str	r6, [sp, #8]
   32788:	str	lr, [sp, #12]
   3278c:	ldrb	r1, [r0, #25]
   32790:	mul	r5, r5, r1
   32794:	add	r1, r2, r5
   32798:	cmp	ip, r1
   3279c:	bcs	327b8 <flatcc_json_printer_indent@@Base+0x44>
   327a0:	mov	r1, r5
   327a4:	ldrd	r4, [sp]
   327a8:	ldr	r6, [sp, #8]
   327ac:	ldr	lr, [sp, #12]
   327b0:	add	sp, sp, #16
   327b4:	b	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   327b8:	mov	r4, r0
   327bc:	mov	r1, #32
   327c0:	mov	r0, r2
   327c4:	mov	r2, r5
   327c8:	bl	14594 <memset@plt>
   327cc:	ldr	r3, [r4, #20]
   327d0:	ldr	r6, [sp, #8]
   327d4:	add	r5, r3, r5
   327d8:	str	r5, [r4, #20]
   327dc:	ldrd	r4, [sp]
   327e0:	add	sp, sp, #12
   327e4:	pop	{pc}		; (ldr pc, [sp], #4)

000327e8 <flatcc_json_printer_add_level@@Base>:
   327e8:	ldr	r3, [r0, #32]
   327ec:	add	r1, r3, r1
   327f0:	str	r1, [r0, #32]
   327f4:	bx	lr

000327f8 <flatcc_json_printer_get_level@@Base>:
   327f8:	ldr	r0, [r0, #32]
   327fc:	bx	lr

00032800 <flatcc_json_printer_uint8@@Base>:
   32800:	str	r4, [sp, #-8]!
   32804:	mov	r4, r0
   32808:	mov	r0, r1
   3280c:	ldr	r1, [r4, #20]
   32810:	str	lr, [sp, #4]
   32814:	bl	312f4 <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   32818:	ldr	r3, [r4, #20]
   3281c:	add	r0, r3, r0
   32820:	str	r0, [r4, #20]
   32824:	ldr	r4, [sp]
   32828:	add	sp, sp, #4
   3282c:	pop	{pc}		; (ldr pc, [sp], #4)

00032830 <flatcc_json_printer_uint16@@Base>:
   32830:	str	r4, [sp, #-8]!
   32834:	mov	r4, r0
   32838:	mov	r0, r1
   3283c:	ldr	r1, [r4, #20]
   32840:	str	lr, [sp, #4]
   32844:	bl	30100 <flatcc_json_parser_struct_as_root@@Base+0x4>
   32848:	ldr	r3, [r4, #20]
   3284c:	add	r0, r3, r0
   32850:	str	r0, [r4, #20]
   32854:	ldr	r4, [sp]
   32858:	add	sp, sp, #4
   3285c:	pop	{pc}		; (ldr pc, [sp], #4)

00032860 <flatcc_json_printer_uint32@@Base>:
   32860:	str	r4, [sp, #-8]!
   32864:	mov	r4, r0
   32868:	mov	r0, r1
   3286c:	ldr	r1, [r4, #20]
   32870:	str	lr, [sp, #4]
   32874:	bl	30268 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   32878:	ldr	r3, [r4, #20]
   3287c:	add	r0, r3, r0
   32880:	str	r0, [r4, #20]
   32884:	ldr	r4, [sp]
   32888:	add	sp, sp, #4
   3288c:	pop	{pc}		; (ldr pc, [sp], #4)

00032890 <flatcc_json_printer_uint64@@Base>:
   32890:	str	r4, [sp, #-8]!
   32894:	mov	r4, r0
   32898:	mov	r1, r3
   3289c:	mov	r0, r2
   328a0:	ldr	r2, [r4, #20]
   328a4:	str	lr, [sp, #4]
   328a8:	bl	30594 <flatcc_json_parser_struct_as_root@@Base+0x498>
   328ac:	ldr	r3, [r4, #20]
   328b0:	add	r0, r3, r0
   328b4:	str	r0, [r4, #20]
   328b8:	ldr	r4, [sp]
   328bc:	add	sp, sp, #4
   328c0:	pop	{pc}		; (ldr pc, [sp], #4)

000328c4 <flatcc_json_printer_int8@@Base>:
   328c4:	cmp	r1, #0
   328c8:	strd	r4, [sp, #-16]!
   328cc:	mov	r4, r0
   328d0:	lsr	r5, r1, #31
   328d4:	uxtb	r0, r1
   328d8:	ldr	r1, [r4, #20]
   328dc:	str	r6, [sp, #8]
   328e0:	str	lr, [sp, #12]
   328e4:	bge	328f8 <flatcc_json_printer_int8@@Base+0x34>
   328e8:	rsb	r0, r0, #0
   328ec:	mov	r3, #45	; 0x2d
   328f0:	uxtb	r0, r0
   328f4:	strb	r3, [r1], #1
   328f8:	bl	312f4 <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   328fc:	ldr	r3, [r4, #20]
   32900:	add	r0, r5, r0
   32904:	ldr	r6, [sp, #8]
   32908:	add	r3, r3, r0
   3290c:	str	r3, [r4, #20]
   32910:	ldrd	r4, [sp]
   32914:	add	sp, sp, #12
   32918:	pop	{pc}		; (ldr pc, [sp], #4)

0003291c <flatcc_json_printer_int16@@Base>:
   3291c:	cmp	r1, #0
   32920:	strd	r4, [sp, #-16]!
   32924:	mov	r4, r0
   32928:	lsr	r5, r1, #31
   3292c:	uxth	r0, r1
   32930:	ldr	r1, [r4, #20]
   32934:	str	r6, [sp, #8]
   32938:	str	lr, [sp, #12]
   3293c:	bge	32950 <flatcc_json_printer_int16@@Base+0x34>
   32940:	rsb	r0, r0, #0
   32944:	mov	r3, #45	; 0x2d
   32948:	uxth	r0, r0
   3294c:	strb	r3, [r1], #1
   32950:	bl	30100 <flatcc_json_parser_struct_as_root@@Base+0x4>
   32954:	ldr	r3, [r4, #20]
   32958:	add	r0, r5, r0
   3295c:	ldr	r6, [sp, #8]
   32960:	add	r3, r3, r0
   32964:	str	r3, [r4, #20]
   32968:	ldrd	r4, [sp]
   3296c:	add	sp, sp, #12
   32970:	pop	{pc}		; (ldr pc, [sp], #4)

00032974 <flatcc_json_printer_int32@@Base>:
   32974:	cmp	r1, #0
   32978:	mov	r3, r1
   3297c:	strd	r4, [sp, #-16]!
   32980:	lsr	r5, r1, #31
   32984:	mov	r4, r0
   32988:	ldr	r1, [r0, #20]
   3298c:	str	r6, [sp, #8]
   32990:	str	lr, [sp, #12]
   32994:	bge	329a4 <flatcc_json_printer_int32@@Base+0x30>
   32998:	mov	r2, #45	; 0x2d
   3299c:	rsb	r3, r3, #0
   329a0:	strb	r2, [r1], #1
   329a4:	mov	r0, r3
   329a8:	bl	30268 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   329ac:	ldr	r3, [r4, #20]
   329b0:	add	r0, r5, r0
   329b4:	ldr	r6, [sp, #8]
   329b8:	add	r3, r3, r0
   329bc:	str	r3, [r4, #20]
   329c0:	ldrd	r4, [sp]
   329c4:	add	sp, sp, #12
   329c8:	pop	{pc}		; (ldr pc, [sp], #4)

000329cc <flatcc_json_printer_int64@@Base>:
   329cc:	cmp	r2, #0
   329d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   329d4:	mov	r5, r3
   329d8:	sbcs	r3, r3, #0
   329dc:	mov	r4, r2
   329e0:	ldr	r2, [r0, #20]
   329e4:	strd	r6, [sp, #8]
   329e8:	mov	r6, r0
   329ec:	lsr	r7, r5, #31
   329f0:	str	r8, [sp, #16]
   329f4:	str	lr, [sp, #20]
   329f8:	bge	32a0c <flatcc_json_printer_int64@@Base+0x40>
   329fc:	rsbs	r4, r4, #0
   32a00:	mov	r3, #45	; 0x2d
   32a04:	rsc	r5, r5, #0
   32a08:	strb	r3, [r2], #1
   32a0c:	mov	r0, r4
   32a10:	mov	r1, r5
   32a14:	bl	30594 <flatcc_json_parser_struct_as_root@@Base+0x498>
   32a18:	ldr	r3, [r6, #20]
   32a1c:	add	r0, r7, r0
   32a20:	ldrd	r4, [sp]
   32a24:	ldr	r8, [sp, #16]
   32a28:	add	r3, r3, r0
   32a2c:	str	r3, [r6, #20]
   32a30:	ldrd	r6, [sp, #8]
   32a34:	add	sp, sp, #20
   32a38:	pop	{pc}		; (ldr pc, [sp], #4)

00032a3c <flatcc_json_printer_float@@Base>:
   32a3c:	vcvt.f64.f32	d0, s0
   32a40:	str	r4, [sp, #-8]!
   32a44:	mov	r4, r0
   32a48:	ldr	r0, [r0, #20]
   32a4c:	str	lr, [sp, #4]
   32a50:	bl	316e8 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   32a54:	ldr	r3, [r4, #20]
   32a58:	add	r0, r3, r0
   32a5c:	str	r0, [r4, #20]
   32a60:	ldr	r4, [sp]
   32a64:	add	sp, sp, #4
   32a68:	pop	{pc}		; (ldr pc, [sp], #4)

00032a6c <flatcc_json_printer_double@@Base>:
   32a6c:	str	r4, [sp, #-8]!
   32a70:	mov	r4, r0
   32a74:	ldr	r0, [r0, #20]
   32a78:	str	lr, [sp, #4]
   32a7c:	bl	316e8 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   32a80:	ldr	r3, [r4, #20]
   32a84:	add	r0, r3, r0
   32a88:	str	r0, [r4, #20]
   32a8c:	ldr	r4, [sp]
   32a90:	add	sp, sp, #4
   32a94:	pop	{pc}		; (ldr pc, [sp], #4)

00032a98 <flatcc_json_printer_enum@@Base>:
   32a98:	ldr	r3, [r0, #20]
   32a9c:	mov	ip, #34	; 0x22
   32aa0:	strd	r4, [sp, #-16]!
   32aa4:	mov	r4, r0
   32aa8:	str	r6, [sp, #8]
   32aac:	str	lr, [sp, #12]
   32ab0:	strb	ip, [r3]
   32ab4:	ldrb	ip, [r0, #26]
   32ab8:	ldr	lr, [r0, #16]
   32abc:	ldr	r3, [r0, #20]
   32ac0:	cmp	ip, #0
   32ac4:	addeq	r3, r3, #1
   32ac8:	add	ip, r3, r2
   32acc:	cmp	lr, ip
   32ad0:	str	r3, [r0, #20]
   32ad4:	bls	32b1c <flatcc_json_printer_enum@@Base+0x84>
   32ad8:	mov	r0, r3
   32adc:	mov	r5, r2
   32ae0:	bl	1451c <memcpy@plt>
   32ae4:	ldr	r2, [r4, #20]
   32ae8:	add	r2, r2, r5
   32aec:	str	r2, [r4, #20]
   32af0:	mov	r3, #34	; 0x22
   32af4:	strb	r3, [r2]
   32af8:	ldrb	r2, [r4, #26]
   32afc:	ldr	r3, [r4, #20]
   32b00:	ldr	r6, [sp, #8]
   32b04:	cmp	r2, #0
   32b08:	addeq	r3, r3, #1
   32b0c:	str	r3, [r4, #20]
   32b10:	ldrd	r4, [sp]
   32b14:	add	sp, sp, #12
   32b18:	pop	{pc}		; (ldr pc, [sp], #4)
   32b1c:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   32b20:	ldr	r2, [r4, #20]
   32b24:	b	32af0 <flatcc_json_printer_enum@@Base+0x58>

00032b28 <flatcc_json_printer_delimit_enum_flags@@Base>:
   32b28:	ldr	r3, [r0, #20]
   32b2c:	mov	ip, #34	; 0x22
   32b30:	adds	r1, r1, #0
   32b34:	movne	r1, #1
   32b38:	ldrb	r2, [r0, #26]
   32b3c:	strb	ip, [r3]
   32b40:	ldr	r3, [r0, #20]
   32b44:	cmp	r2, #0
   32b48:	moveq	r1, #1
   32b4c:	add	r3, r3, r1
   32b50:	str	r3, [r0, #20]
   32b54:	bx	lr

00032b58 <flatcc_json_printer_enum_flag@@Base>:
   32b58:	strd	r4, [sp, #-16]!
   32b5c:	mov	r5, #32
   32b60:	mov	r4, r2
   32b64:	str	r6, [sp, #8]
   32b68:	str	lr, [sp, #12]
   32b6c:	ldr	lr, [r0, #20]
   32b70:	strb	r5, [lr]
   32b74:	ldr	r5, [r0, #16]
   32b78:	ldr	lr, [r0, #20]
   32b7c:	cmp	r1, #0
   32b80:	addgt	lr, lr, #1
   32b84:	add	r2, lr, r3
   32b88:	cmp	r5, r2
   32b8c:	str	lr, [r0, #20]
   32b90:	bhi	32bb0 <flatcc_json_printer_enum_flag@@Base+0x58>
   32b94:	mov	r1, r4
   32b98:	mov	r2, r3
   32b9c:	ldrd	r4, [sp]
   32ba0:	ldr	r6, [sp, #8]
   32ba4:	ldr	lr, [sp, #12]
   32ba8:	add	sp, sp, #16
   32bac:	b	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   32bb0:	mov	r1, r4
   32bb4:	mov	r2, r3
   32bb8:	mov	r4, r0
   32bbc:	mov	r0, lr
   32bc0:	mov	r5, r3
   32bc4:	bl	1451c <memcpy@plt>
   32bc8:	ldr	r3, [r4, #20]
   32bcc:	ldr	r6, [sp, #8]
   32bd0:	add	r3, r3, r5
   32bd4:	str	r3, [r4, #20]
   32bd8:	ldrd	r4, [sp]
   32bdc:	add	sp, sp, #12
   32be0:	pop	{pc}		; (ldr pc, [sp], #4)

00032be4 <flatcc_json_printer_string_field@@Base>:
   32be4:	ldr	ip, [r1, #8]
   32be8:	add	r2, r2, #2
   32bec:	lsl	r2, r2, #1
   32bf0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   32bf4:	strd	r6, [sp, #8]
   32bf8:	strd	r8, [sp, #16]
   32bfc:	str	sl, [sp, #24]
   32c00:	cmp	r2, ip
   32c04:	str	lr, [sp, #28]
   32c08:	ldr	r7, [sp, #32]
   32c0c:	bge	32d38 <flatcc_json_printer_string_field@@Base+0x154>
   32c10:	ldr	ip, [r1, #4]
   32c14:	ldrh	r5, [ip, r2]
   32c18:	cmp	r5, #0
   32c1c:	beq	32d38 <flatcc_json_printer_string_field@@Base+0x154>
   32c20:	ldr	r6, [r1]
   32c24:	adds	r8, r6, r5
   32c28:	beq	32d38 <flatcc_json_printer_string_field@@Base+0x154>
   32c2c:	ldr	ip, [r1, #16]
   32c30:	ldr	r2, [r0, #20]
   32c34:	cmp	ip, #0
   32c38:	add	ip, ip, #1
   32c3c:	str	ip, [r1, #16]
   32c40:	beq	32c58 <flatcc_json_printer_string_field@@Base+0x74>
   32c44:	add	ip, r2, #1
   32c48:	mov	r1, #44	; 0x2c
   32c4c:	str	ip, [r0, #20]
   32c50:	strb	r1, [r2]
   32c54:	ldr	r2, [r0, #20]
   32c58:	mov	r9, r3
   32c5c:	mov	r4, r0
   32c60:	ldrb	r1, [r0, #25]
   32c64:	cmp	r1, #0
   32c68:	bne	32d78 <flatcc_json_printer_string_field@@Base+0x194>
   32c6c:	ldr	r3, [r0, #16]
   32c70:	cmp	r3, r2
   32c74:	bls	32d68 <flatcc_json_printer_string_field@@Base+0x184>
   32c78:	mov	r3, #34	; 0x22
   32c7c:	strb	r3, [r2]
   32c80:	ldrb	r3, [r4, #26]
   32c84:	ldr	r2, [r4, #16]
   32c88:	ldr	r0, [r4, #20]
   32c8c:	cmp	r3, #0
   32c90:	addeq	r0, r0, #1
   32c94:	add	r3, r0, r7
   32c98:	cmp	r2, r3
   32c9c:	str	r0, [r4, #20]
   32ca0:	bls	32d50 <flatcc_json_printer_string_field@@Base+0x16c>
   32ca4:	mov	r2, r7
   32ca8:	mov	r1, r9
   32cac:	bl	1451c <memcpy@plt>
   32cb0:	ldr	r3, [r4, #20]
   32cb4:	add	r7, r3, r7
   32cb8:	str	r7, [r4, #20]
   32cbc:	mov	r3, #34	; 0x22
   32cc0:	mov	lr, #58	; 0x3a
   32cc4:	mov	ip, #32
   32cc8:	mov	r0, r4
   32ccc:	strb	r3, [r7]
   32cd0:	ldrb	r3, [r4, #26]
   32cd4:	ldr	r1, [r4, #20]
   32cd8:	clz	r3, r3
   32cdc:	lsr	r3, r3, #5
   32ce0:	add	r2, r1, r3
   32ce4:	add	r2, r2, #1
   32ce8:	str	r2, [r4, #20]
   32cec:	strb	lr, [r1, r3]
   32cf0:	ldr	r3, [r4, #20]
   32cf4:	strb	ip, [r3]
   32cf8:	ldrb	r1, [r4, #25]
   32cfc:	ldr	r3, [r4, #20]
   32d00:	ldr	r2, [r6, r5]
   32d04:	ldrd	r6, [sp, #8]
   32d08:	cmp	r1, #0
   32d0c:	addne	r3, r3, #1
   32d10:	ldr	sl, [sp, #24]
   32d14:	add	r1, r8, r2
   32d18:	add	r1, r1, #4
   32d1c:	ldr	r2, [r8, r2]
   32d20:	ldrd	r8, [sp, #16]
   32d24:	ldr	lr, [sp, #28]
   32d28:	str	r3, [r4, #20]
   32d2c:	ldrd	r4, [sp]
   32d30:	add	sp, sp, #32
   32d34:	b	32250 <flatcc_json_parser_struct_as_root@@Base+0x2154>
   32d38:	ldrd	r4, [sp]
   32d3c:	ldrd	r6, [sp, #8]
   32d40:	ldrd	r8, [sp, #16]
   32d44:	ldr	sl, [sp, #24]
   32d48:	add	sp, sp, #28
   32d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   32d50:	mov	r2, r7
   32d54:	mov	r1, r9
   32d58:	mov	r0, r4
   32d5c:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   32d60:	ldr	r7, [r4, #20]
   32d64:	b	32cbc <flatcc_json_printer_string_field@@Base+0xd8>
   32d68:	ldr	r3, [r0, #44]	; 0x2c
   32d6c:	blx	r3
   32d70:	ldr	r2, [r4, #20]
   32d74:	b	32c78 <flatcc_json_printer_string_field@@Base+0x94>
   32d78:	add	r1, r2, #1
   32d7c:	mov	r3, #10
   32d80:	str	r1, [r0, #20]
   32d84:	strb	r3, [r2]
   32d88:	ldrb	r3, [r0, #25]
   32d8c:	ldr	r2, [r4, #32]
   32d90:	ldr	r1, [r0, #16]
   32d94:	ldr	r0, [r0, #20]
   32d98:	mul	sl, r2, r3
   32d9c:	add	r3, r0, sl
   32da0:	cmp	r1, r3
   32da4:	bcs	32dbc <flatcc_json_printer_string_field@@Base+0x1d8>
   32da8:	mov	r1, sl
   32dac:	mov	r0, r4
   32db0:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   32db4:	ldr	r2, [r4, #20]
   32db8:	b	32c78 <flatcc_json_printer_string_field@@Base+0x94>
   32dbc:	mov	r2, sl
   32dc0:	mov	r1, #32
   32dc4:	bl	14594 <memset@plt>
   32dc8:	ldr	r2, [r4, #20]
   32dcc:	add	r2, r2, sl
   32dd0:	str	r2, [r4, #20]
   32dd4:	b	32c78 <flatcc_json_printer_string_field@@Base+0x94>

00032dd8 <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   32dd8:	ldr	ip, [r1, #8]
   32ddc:	add	r2, r2, #2
   32de0:	lsl	r2, r2, #1
   32de4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   32de8:	strd	r6, [sp, #8]
   32dec:	strd	r8, [sp, #16]
   32df0:	strd	sl, [sp, #24]
   32df4:	cmp	r2, ip
   32df8:	str	lr, [sp, #32]
   32dfc:	sub	sp, sp, #20
   32e00:	ldr	r5, [sp, #56]	; 0x38
   32e04:	bge	33068 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x290>
   32e08:	ldr	ip, [r1, #4]
   32e0c:	ldrh	r8, [ip, r2]
   32e10:	cmp	r8, #0
   32e14:	beq	33068 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x290>
   32e18:	ldr	r2, [sp, #60]	; 0x3c
   32e1c:	ldr	r9, [r1]
   32e20:	adds	r7, r2, #0
   32e24:	movne	r7, #1
   32e28:	adds	r6, r9, r8
   32e2c:	orr	sl, r7, #128	; 0x80
   32e30:	beq	33068 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x290>
   32e34:	ldr	ip, [r1, #16]
   32e38:	ldr	r2, [r0, #20]
   32e3c:	cmp	ip, #0
   32e40:	add	ip, ip, #1
   32e44:	str	ip, [r1, #16]
   32e48:	beq	32e60 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x88>
   32e4c:	add	ip, r2, #1
   32e50:	mov	r1, #44	; 0x2c
   32e54:	str	ip, [r0, #20]
   32e58:	strb	r1, [r2]
   32e5c:	ldr	r2, [r0, #20]
   32e60:	mov	fp, r3
   32e64:	mov	r4, r0
   32e68:	ldrb	r1, [r0, #25]
   32e6c:	cmp	r1, #0
   32e70:	bne	33084 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2ac>
   32e74:	ldr	r3, [r0, #16]
   32e78:	cmp	r3, r2
   32e7c:	bhi	32e8c <flatcc_json_printer_uint8_vector_base64_field@@Base+0xb4>
   32e80:	ldr	r3, [r0, #44]	; 0x2c
   32e84:	blx	r3
   32e88:	ldr	r2, [r4, #20]
   32e8c:	mov	r3, #34	; 0x22
   32e90:	strb	r3, [r2]
   32e94:	ldrb	r3, [r4, #26]
   32e98:	ldr	r2, [r4, #16]
   32e9c:	ldr	r0, [r4, #20]
   32ea0:	cmp	r3, #0
   32ea4:	addeq	r0, r0, #1
   32ea8:	add	r3, r0, r5
   32eac:	cmp	r2, r3
   32eb0:	str	r0, [r4, #20]
   32eb4:	bls	330c8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2f0>
   32eb8:	mov	r2, r5
   32ebc:	mov	r1, fp
   32ec0:	bl	1451c <memcpy@plt>
   32ec4:	ldr	r3, [r4, #20]
   32ec8:	add	r5, r3, r5
   32ecc:	str	r5, [r4, #20]
   32ed0:	mov	r1, #34	; 0x22
   32ed4:	mov	fp, #58	; 0x3a
   32ed8:	mov	lr, #32
   32edc:	movw	r2, #43691	; 0xaaab
   32ee0:	movt	r2, #43690	; 0xaaaa
   32ee4:	strb	r1, [r5]
   32ee8:	ldrb	r3, [r4, #26]
   32eec:	ldr	ip, [r4, #20]
   32ef0:	clz	r3, r3
   32ef4:	lsr	r3, r3, #5
   32ef8:	add	r0, ip, r3
   32efc:	add	r0, r0, #1
   32f00:	str	r0, [r4, #20]
   32f04:	strb	fp, [ip, r3]
   32f08:	ldr	r3, [r4, #20]
   32f0c:	strb	lr, [r3]
   32f10:	ldrb	r3, [r4, #25]
   32f14:	ldr	r0, [r9, r8]
   32f18:	ldr	ip, [r4, #20]
   32f1c:	adds	r3, r3, #0
   32f20:	movne	r3, #1
   32f24:	ldr	lr, [r6, r0]
   32f28:	add	r6, r6, r0
   32f2c:	add	r6, r6, #4
   32f30:	add	r0, ip, r3
   32f34:	add	r0, r0, #1
   32f38:	str	lr, [sp, #8]
   32f3c:	str	r0, [r4, #20]
   32f40:	strb	r1, [ip, r3]
   32f44:	ldr	r5, [sp, #8]
   32f48:	ldr	r3, [r4, #16]
   32f4c:	ldr	r0, [r4, #20]
   32f50:	lsl	r5, r5, #2
   32f54:	umull	r2, r5, r2, r5
   32f58:	lsr	r5, r5, #1
   32f5c:	add	r5, r5, #3
   32f60:	bic	r5, r5, #3
   32f64:	add	r2, r0, r5
   32f68:	cmp	r2, r3
   32f6c:	bcc	32f8c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1b4>
   32f70:	mov	r0, r4
   32f74:	mov	r1, #0
   32f78:	ldr	r3, [r4, #44]	; 0x2c
   32f7c:	blx	r3
   32f80:	ldr	r3, [r4, #16]
   32f84:	ldr	r0, [r4, #20]
   32f88:	add	r2, r0, r5
   32f8c:	cmp	r3, r2
   32f90:	bcs	33040 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x268>
   32f94:	sub	r5, r3, r0
   32f98:	bic	r5, r5, #3
   32f9c:	add	fp, r5, r5, lsl #1
   32fa0:	cmp	fp, #3
   32fa4:	lsr	fp, fp, #2
   32fa8:	bls	33104 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x32c>
   32fac:	movw	r8, #43691	; 0xaaab
   32fb0:	movt	r8, #43690	; 0xaaaa
   32fb4:	add	r9, sp, #12
   32fb8:	b	32fd4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1fc>
   32fbc:	sub	r5, r3, r0
   32fc0:	bic	r5, r5, #3
   32fc4:	add	fp, r5, r5, lsl #1
   32fc8:	cmp	fp, #3
   32fcc:	lsr	fp, fp, #2
   32fd0:	bls	33104 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x32c>
   32fd4:	mov	r1, r6
   32fd8:	mov	r3, r7
   32fdc:	str	fp, [sp, #12]
   32fe0:	mov	r2, r9
   32fe4:	add	r6, r6, fp
   32fe8:	bl	31564 <flatcc_json_parser_struct_as_root@@Base+0x1468>
   32fec:	ldr	ip, [sp, #8]
   32ff0:	mov	r0, r4
   32ff4:	mov	r1, #0
   32ff8:	ldr	r2, [r4, #20]
   32ffc:	ldr	r3, [r4, #44]	; 0x2c
   33000:	sub	fp, ip, fp
   33004:	add	r5, r2, r5
   33008:	str	fp, [sp, #8]
   3300c:	str	r5, [r4, #20]
   33010:	blx	r3
   33014:	ldr	r5, [sp, #8]
   33018:	ldr	r3, [r4, #16]
   3301c:	ldr	r0, [r4, #20]
   33020:	lsl	r5, r5, #2
   33024:	umull	r2, r5, r8, r5
   33028:	lsr	r5, r5, #1
   3302c:	add	r5, r5, #3
   33030:	bic	r5, r5, #3
   33034:	add	r2, r0, r5
   33038:	cmp	r3, r2
   3303c:	bcc	32fbc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1e4>
   33040:	mov	r3, sl
   33044:	mov	r1, r6
   33048:	add	r2, sp, #8
   3304c:	bl	31564 <flatcc_json_parser_struct_as_root@@Base+0x1468>
   33050:	ldr	r2, [r4, #20]
   33054:	mov	r1, #34	; 0x22
   33058:	add	r3, r2, r5
   3305c:	add	r3, r3, #1
   33060:	str	r3, [r4, #20]
   33064:	strb	r1, [r2, r5]
   33068:	add	sp, sp, #20
   3306c:	ldrd	r4, [sp]
   33070:	ldrd	r6, [sp, #8]
   33074:	ldrd	r8, [sp, #16]
   33078:	ldrd	sl, [sp, #24]
   3307c:	add	sp, sp, #32
   33080:	pop	{pc}		; (ldr pc, [sp], #4)
   33084:	add	r1, r2, #1
   33088:	mov	r3, #10
   3308c:	str	r1, [r0, #20]
   33090:	strb	r3, [r2]
   33094:	ldrb	r3, [r0, #25]
   33098:	ldr	r2, [r4, #32]
   3309c:	ldr	r1, [r0, #16]
   330a0:	ldr	r0, [r0, #20]
   330a4:	mul	r3, r2, r3
   330a8:	add	r2, r0, r3
   330ac:	cmp	r1, r2
   330b0:	bcs	330e0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x308>
   330b4:	mov	r1, r3
   330b8:	mov	r0, r4
   330bc:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   330c0:	ldr	r2, [r4, #20]
   330c4:	b	32e8c <flatcc_json_printer_uint8_vector_base64_field@@Base+0xb4>
   330c8:	mov	r2, r5
   330cc:	mov	r1, fp
   330d0:	mov	r0, r4
   330d4:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   330d8:	ldr	r5, [r4, #20]
   330dc:	b	32ed0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xf8>
   330e0:	mov	r2, r3
   330e4:	mov	r1, #32
   330e8:	str	r3, [sp, #4]
   330ec:	bl	14594 <memset@plt>
   330f0:	ldr	r3, [sp, #4]
   330f4:	ldr	r2, [r4, #20]
   330f8:	add	r2, r2, r3
   330fc:	str	r2, [r4, #20]
   33100:	b	32e8c <flatcc_json_printer_uint8_vector_base64_field@@Base+0xb4>
   33104:	ldr	r3, [pc, #32]	; 3312c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x354>
   33108:	movw	r2, #277	; 0x115
   3310c:	ldr	r1, [pc, #28]	; 33130 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x358>
   33110:	ldr	r0, [pc, #28]	; 33134 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x35c>
   33114:	add	r3, pc, r3
   33118:	add	r3, r3, #1744	; 0x6d0
   3311c:	add	r1, pc, r1
   33120:	add	r3, r3, #4
   33124:	add	r0, pc, r0
   33128:	bl	145e8 <__assert_fail@plt>
   3312c:	andeq	r1, r1, r4, asr r3
   33130:	andeq	r1, r1, r8, lsr #21
   33134:	muleq	r1, r8, ip

00033138 <flatcc_json_printer_uint8_field@@Base>:
   33138:	ldr	ip, [r1, #8]
   3313c:	add	r2, r2, #2
   33140:	lsl	r2, r2, #1
   33144:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33148:	strd	r6, [sp, #8]
   3314c:	str	r8, [sp, #16]
   33150:	str	lr, [sp, #20]
   33154:	cmp	r2, ip
   33158:	ldrb	lr, [sp, #28]
   3315c:	ldr	r5, [sp, #24]
   33160:	bge	332a0 <flatcc_json_printer_uint8_field@@Base+0x168>
   33164:	ldr	ip, [r1, #4]
   33168:	ldrh	r2, [ip, r2]
   3316c:	cmp	r2, #0
   33170:	beq	332a0 <flatcc_json_printer_uint8_field@@Base+0x168>
   33174:	ldr	ip, [r1]
   33178:	cmn	ip, r2
   3317c:	beq	332a0 <flatcc_json_printer_uint8_field@@Base+0x168>
   33180:	ldrb	r6, [ip, r2]
   33184:	cmp	lr, r6
   33188:	beq	3332c <flatcc_json_printer_uint8_field@@Base+0x1f4>
   3318c:	ldr	ip, [r1, #16]
   33190:	ldr	r2, [r0, #20]
   33194:	cmp	ip, #0
   33198:	add	ip, ip, #1
   3319c:	str	ip, [r1, #16]
   331a0:	beq	331b8 <flatcc_json_printer_uint8_field@@Base+0x80>
   331a4:	add	ip, r2, #1
   331a8:	mov	r1, #44	; 0x2c
   331ac:	str	ip, [r0, #20]
   331b0:	strb	r1, [r2]
   331b4:	ldr	r2, [r0, #20]
   331b8:	mov	r7, r3
   331bc:	mov	r4, r0
   331c0:	ldrb	r1, [r0, #25]
   331c4:	cmp	r1, #0
   331c8:	bne	332cc <flatcc_json_printer_uint8_field@@Base+0x194>
   331cc:	ldr	r3, [r0, #16]
   331d0:	cmp	r3, r2
   331d4:	bhi	331e4 <flatcc_json_printer_uint8_field@@Base+0xac>
   331d8:	ldr	r3, [r0, #44]	; 0x2c
   331dc:	blx	r3
   331e0:	ldr	r2, [r4, #20]
   331e4:	mov	r3, #34	; 0x22
   331e8:	strb	r3, [r2]
   331ec:	ldrb	r3, [r4, #26]
   331f0:	ldr	r2, [r4, #16]
   331f4:	ldr	r0, [r4, #20]
   331f8:	cmp	r3, #0
   331fc:	addeq	r0, r0, #1
   33200:	add	r3, r0, r5
   33204:	cmp	r2, r3
   33208:	str	r0, [r4, #20]
   3320c:	bls	332b4 <flatcc_json_printer_uint8_field@@Base+0x17c>
   33210:	mov	r2, r5
   33214:	mov	r1, r7
   33218:	bl	1451c <memcpy@plt>
   3321c:	ldr	r3, [r4, #20]
   33220:	add	r5, r3, r5
   33224:	str	r5, [r4, #20]
   33228:	mov	r3, #34	; 0x22
   3322c:	mov	lr, #58	; 0x3a
   33230:	mov	ip, #32
   33234:	mov	r0, r6
   33238:	strb	r3, [r5]
   3323c:	ldrb	r3, [r4, #26]
   33240:	ldr	r1, [r4, #20]
   33244:	clz	r3, r3
   33248:	lsr	r3, r3, #5
   3324c:	add	r2, r1, r3
   33250:	add	r2, r2, #1
   33254:	str	r2, [r4, #20]
   33258:	strb	lr, [r1, r3]
   3325c:	ldr	r3, [r4, #20]
   33260:	strb	ip, [r3]
   33264:	ldrb	r2, [r4, #25]
   33268:	ldr	r3, [r4, #20]
   3326c:	cmp	r2, #0
   33270:	addne	r3, r3, #1
   33274:	mov	r1, r3
   33278:	str	r3, [r4, #20]
   3327c:	bl	312f4 <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   33280:	ldr	r3, [r4, #20]
   33284:	add	r0, r3, r0
   33288:	str	r0, [r4, #20]
   3328c:	ldrd	r4, [sp]
   33290:	ldrd	r6, [sp, #8]
   33294:	ldr	r8, [sp, #16]
   33298:	add	sp, sp, #20
   3329c:	pop	{pc}		; (ldr pc, [sp], #4)
   332a0:	ldrb	r2, [r0, #29]
   332a4:	cmp	r2, #0
   332a8:	beq	3328c <flatcc_json_printer_uint8_field@@Base+0x154>
   332ac:	mov	r6, lr
   332b0:	b	3318c <flatcc_json_printer_uint8_field@@Base+0x54>
   332b4:	mov	r2, r5
   332b8:	mov	r1, r7
   332bc:	mov	r0, r4
   332c0:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   332c4:	ldr	r5, [r4, #20]
   332c8:	b	33228 <flatcc_json_printer_uint8_field@@Base+0xf0>
   332cc:	add	r1, r2, #1
   332d0:	mov	r3, #10
   332d4:	str	r1, [r0, #20]
   332d8:	strb	r3, [r2]
   332dc:	ldrb	r8, [r0, #25]
   332e0:	ldr	r2, [r4, #32]
   332e4:	ldr	r1, [r0, #16]
   332e8:	ldr	r0, [r0, #20]
   332ec:	mul	r8, r2, r8
   332f0:	add	r3, r0, r8
   332f4:	cmp	r1, r3
   332f8:	bcs	33310 <flatcc_json_printer_uint8_field@@Base+0x1d8>
   332fc:	mov	r1, r8
   33300:	mov	r0, r4
   33304:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   33308:	ldr	r2, [r4, #20]
   3330c:	b	331e4 <flatcc_json_printer_uint8_field@@Base+0xac>
   33310:	mov	r2, r8
   33314:	mov	r1, #32
   33318:	bl	14594 <memset@plt>
   3331c:	ldr	r2, [r4, #20]
   33320:	add	r2, r2, r8
   33324:	str	r2, [r4, #20]
   33328:	b	331e4 <flatcc_json_printer_uint8_field@@Base+0xac>
   3332c:	ldrb	r2, [r0, #28]
   33330:	cmp	r2, #0
   33334:	beq	3318c <flatcc_json_printer_uint8_field@@Base+0x54>
   33338:	b	3328c <flatcc_json_printer_uint8_field@@Base+0x154>

0003333c <flatcc_json_printer_uint16_field@@Base>:
   3333c:	ldr	ip, [r1, #8]
   33340:	add	r2, r2, #2
   33344:	lsl	r2, r2, #1
   33348:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3334c:	strd	r6, [sp, #8]
   33350:	str	r8, [sp, #16]
   33354:	str	lr, [sp, #20]
   33358:	cmp	r2, ip
   3335c:	ldrh	lr, [sp, #28]
   33360:	ldr	r5, [sp, #24]
   33364:	bge	334a4 <flatcc_json_printer_uint16_field@@Base+0x168>
   33368:	ldr	ip, [r1, #4]
   3336c:	ldrh	r2, [ip, r2]
   33370:	cmp	r2, #0
   33374:	beq	334a4 <flatcc_json_printer_uint16_field@@Base+0x168>
   33378:	ldr	ip, [r1]
   3337c:	cmn	ip, r2
   33380:	beq	334a4 <flatcc_json_printer_uint16_field@@Base+0x168>
   33384:	ldrh	r6, [ip, r2]
   33388:	cmp	lr, r6
   3338c:	beq	33530 <flatcc_json_printer_uint16_field@@Base+0x1f4>
   33390:	ldr	ip, [r1, #16]
   33394:	ldr	r2, [r0, #20]
   33398:	cmp	ip, #0
   3339c:	add	ip, ip, #1
   333a0:	str	ip, [r1, #16]
   333a4:	beq	333bc <flatcc_json_printer_uint16_field@@Base+0x80>
   333a8:	add	ip, r2, #1
   333ac:	mov	r1, #44	; 0x2c
   333b0:	str	ip, [r0, #20]
   333b4:	strb	r1, [r2]
   333b8:	ldr	r2, [r0, #20]
   333bc:	mov	r7, r3
   333c0:	mov	r4, r0
   333c4:	ldrb	r1, [r0, #25]
   333c8:	cmp	r1, #0
   333cc:	bne	334d0 <flatcc_json_printer_uint16_field@@Base+0x194>
   333d0:	ldr	r3, [r0, #16]
   333d4:	cmp	r3, r2
   333d8:	bhi	333e8 <flatcc_json_printer_uint16_field@@Base+0xac>
   333dc:	ldr	r3, [r0, #44]	; 0x2c
   333e0:	blx	r3
   333e4:	ldr	r2, [r4, #20]
   333e8:	mov	r3, #34	; 0x22
   333ec:	strb	r3, [r2]
   333f0:	ldrb	r3, [r4, #26]
   333f4:	ldr	r2, [r4, #16]
   333f8:	ldr	r0, [r4, #20]
   333fc:	cmp	r3, #0
   33400:	addeq	r0, r0, #1
   33404:	add	r3, r0, r5
   33408:	cmp	r2, r3
   3340c:	str	r0, [r4, #20]
   33410:	bls	334b8 <flatcc_json_printer_uint16_field@@Base+0x17c>
   33414:	mov	r2, r5
   33418:	mov	r1, r7
   3341c:	bl	1451c <memcpy@plt>
   33420:	ldr	r3, [r4, #20]
   33424:	add	r5, r3, r5
   33428:	str	r5, [r4, #20]
   3342c:	mov	r3, #34	; 0x22
   33430:	mov	lr, #58	; 0x3a
   33434:	mov	ip, #32
   33438:	mov	r0, r6
   3343c:	strb	r3, [r5]
   33440:	ldrb	r3, [r4, #26]
   33444:	ldr	r1, [r4, #20]
   33448:	clz	r3, r3
   3344c:	lsr	r3, r3, #5
   33450:	add	r2, r1, r3
   33454:	add	r2, r2, #1
   33458:	str	r2, [r4, #20]
   3345c:	strb	lr, [r1, r3]
   33460:	ldr	r3, [r4, #20]
   33464:	strb	ip, [r3]
   33468:	ldrb	r2, [r4, #25]
   3346c:	ldr	r3, [r4, #20]
   33470:	cmp	r2, #0
   33474:	addne	r3, r3, #1
   33478:	mov	r1, r3
   3347c:	str	r3, [r4, #20]
   33480:	bl	30100 <flatcc_json_parser_struct_as_root@@Base+0x4>
   33484:	ldr	r3, [r4, #20]
   33488:	add	r0, r3, r0
   3348c:	str	r0, [r4, #20]
   33490:	ldrd	r4, [sp]
   33494:	ldrd	r6, [sp, #8]
   33498:	ldr	r8, [sp, #16]
   3349c:	add	sp, sp, #20
   334a0:	pop	{pc}		; (ldr pc, [sp], #4)
   334a4:	ldrb	r2, [r0, #29]
   334a8:	cmp	r2, #0
   334ac:	beq	33490 <flatcc_json_printer_uint16_field@@Base+0x154>
   334b0:	mov	r6, lr
   334b4:	b	33390 <flatcc_json_printer_uint16_field@@Base+0x54>
   334b8:	mov	r2, r5
   334bc:	mov	r1, r7
   334c0:	mov	r0, r4
   334c4:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   334c8:	ldr	r5, [r4, #20]
   334cc:	b	3342c <flatcc_json_printer_uint16_field@@Base+0xf0>
   334d0:	add	r1, r2, #1
   334d4:	mov	r3, #10
   334d8:	str	r1, [r0, #20]
   334dc:	strb	r3, [r2]
   334e0:	ldrb	r8, [r0, #25]
   334e4:	ldr	r2, [r4, #32]
   334e8:	ldr	r1, [r0, #16]
   334ec:	ldr	r0, [r0, #20]
   334f0:	mul	r8, r2, r8
   334f4:	add	r3, r0, r8
   334f8:	cmp	r1, r3
   334fc:	bcs	33514 <flatcc_json_printer_uint16_field@@Base+0x1d8>
   33500:	mov	r1, r8
   33504:	mov	r0, r4
   33508:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3350c:	ldr	r2, [r4, #20]
   33510:	b	333e8 <flatcc_json_printer_uint16_field@@Base+0xac>
   33514:	mov	r2, r8
   33518:	mov	r1, #32
   3351c:	bl	14594 <memset@plt>
   33520:	ldr	r2, [r4, #20]
   33524:	add	r2, r2, r8
   33528:	str	r2, [r4, #20]
   3352c:	b	333e8 <flatcc_json_printer_uint16_field@@Base+0xac>
   33530:	ldrb	r2, [r0, #28]
   33534:	cmp	r2, #0
   33538:	beq	33390 <flatcc_json_printer_uint16_field@@Base+0x54>
   3353c:	b	33490 <flatcc_json_printer_uint16_field@@Base+0x154>

00033540 <flatcc_json_printer_uint32_field@@Base>:
   33540:	ldr	ip, [r1, #8]
   33544:	add	r2, r2, #2
   33548:	lsl	r2, r2, #1
   3354c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33550:	strd	r6, [sp, #8]
   33554:	str	r8, [sp, #16]
   33558:	str	lr, [sp, #20]
   3355c:	cmp	r2, ip
   33560:	ldr	r5, [sp, #24]
   33564:	bge	336a8 <flatcc_json_printer_uint32_field@@Base+0x168>
   33568:	ldr	ip, [r1, #4]
   3356c:	ldrh	r2, [ip, r2]
   33570:	cmp	r2, #0
   33574:	beq	336a8 <flatcc_json_printer_uint32_field@@Base+0x168>
   33578:	ldr	ip, [r1]
   3357c:	cmn	ip, r2
   33580:	beq	336a8 <flatcc_json_printer_uint32_field@@Base+0x168>
   33584:	ldr	r6, [ip, r2]
   33588:	ldr	r2, [sp, #28]
   3358c:	cmp	r2, r6
   33590:	beq	33734 <flatcc_json_printer_uint32_field@@Base+0x1f4>
   33594:	ldr	ip, [r1, #16]
   33598:	ldr	r2, [r0, #20]
   3359c:	cmp	ip, #0
   335a0:	add	ip, ip, #1
   335a4:	str	ip, [r1, #16]
   335a8:	beq	335c0 <flatcc_json_printer_uint32_field@@Base+0x80>
   335ac:	add	ip, r2, #1
   335b0:	mov	r1, #44	; 0x2c
   335b4:	str	ip, [r0, #20]
   335b8:	strb	r1, [r2]
   335bc:	ldr	r2, [r0, #20]
   335c0:	mov	r7, r3
   335c4:	mov	r4, r0
   335c8:	ldrb	r1, [r0, #25]
   335cc:	cmp	r1, #0
   335d0:	bne	336d4 <flatcc_json_printer_uint32_field@@Base+0x194>
   335d4:	ldr	r3, [r0, #16]
   335d8:	cmp	r3, r2
   335dc:	bhi	335ec <flatcc_json_printer_uint32_field@@Base+0xac>
   335e0:	ldr	r3, [r0, #44]	; 0x2c
   335e4:	blx	r3
   335e8:	ldr	r2, [r4, #20]
   335ec:	mov	r3, #34	; 0x22
   335f0:	strb	r3, [r2]
   335f4:	ldrb	r3, [r4, #26]
   335f8:	ldr	r2, [r4, #16]
   335fc:	ldr	r0, [r4, #20]
   33600:	cmp	r3, #0
   33604:	addeq	r0, r0, #1
   33608:	add	r3, r0, r5
   3360c:	cmp	r2, r3
   33610:	str	r0, [r4, #20]
   33614:	bls	336bc <flatcc_json_printer_uint32_field@@Base+0x17c>
   33618:	mov	r2, r5
   3361c:	mov	r1, r7
   33620:	bl	1451c <memcpy@plt>
   33624:	ldr	r3, [r4, #20]
   33628:	add	r5, r3, r5
   3362c:	str	r5, [r4, #20]
   33630:	mov	r3, #34	; 0x22
   33634:	mov	lr, #58	; 0x3a
   33638:	mov	ip, #32
   3363c:	mov	r0, r6
   33640:	strb	r3, [r5]
   33644:	ldrb	r3, [r4, #26]
   33648:	ldr	r1, [r4, #20]
   3364c:	clz	r3, r3
   33650:	lsr	r3, r3, #5
   33654:	add	r2, r1, r3
   33658:	add	r2, r2, #1
   3365c:	str	r2, [r4, #20]
   33660:	strb	lr, [r1, r3]
   33664:	ldr	r3, [r4, #20]
   33668:	strb	ip, [r3]
   3366c:	ldrb	r2, [r4, #25]
   33670:	ldr	r3, [r4, #20]
   33674:	cmp	r2, #0
   33678:	addne	r3, r3, #1
   3367c:	mov	r1, r3
   33680:	str	r3, [r4, #20]
   33684:	bl	30268 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   33688:	ldr	r3, [r4, #20]
   3368c:	add	r0, r3, r0
   33690:	str	r0, [r4, #20]
   33694:	ldrd	r4, [sp]
   33698:	ldrd	r6, [sp, #8]
   3369c:	ldr	r8, [sp, #16]
   336a0:	add	sp, sp, #20
   336a4:	pop	{pc}		; (ldr pc, [sp], #4)
   336a8:	ldrb	r2, [r0, #29]
   336ac:	cmp	r2, #0
   336b0:	beq	33694 <flatcc_json_printer_uint32_field@@Base+0x154>
   336b4:	ldr	r6, [sp, #28]
   336b8:	b	33594 <flatcc_json_printer_uint32_field@@Base+0x54>
   336bc:	mov	r2, r5
   336c0:	mov	r1, r7
   336c4:	mov	r0, r4
   336c8:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   336cc:	ldr	r5, [r4, #20]
   336d0:	b	33630 <flatcc_json_printer_uint32_field@@Base+0xf0>
   336d4:	add	r1, r2, #1
   336d8:	mov	r3, #10
   336dc:	str	r1, [r0, #20]
   336e0:	strb	r3, [r2]
   336e4:	ldrb	r8, [r0, #25]
   336e8:	ldr	r2, [r4, #32]
   336ec:	ldr	r1, [r0, #16]
   336f0:	ldr	r0, [r0, #20]
   336f4:	mul	r8, r2, r8
   336f8:	add	r3, r0, r8
   336fc:	cmp	r1, r3
   33700:	bcs	33718 <flatcc_json_printer_uint32_field@@Base+0x1d8>
   33704:	mov	r1, r8
   33708:	mov	r0, r4
   3370c:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   33710:	ldr	r2, [r4, #20]
   33714:	b	335ec <flatcc_json_printer_uint32_field@@Base+0xac>
   33718:	mov	r2, r8
   3371c:	mov	r1, #32
   33720:	bl	14594 <memset@plt>
   33724:	ldr	r2, [r4, #20]
   33728:	add	r2, r2, r8
   3372c:	str	r2, [r4, #20]
   33730:	b	335ec <flatcc_json_printer_uint32_field@@Base+0xac>
   33734:	ldrb	r2, [r0, #28]
   33738:	cmp	r2, #0
   3373c:	beq	33594 <flatcc_json_printer_uint32_field@@Base+0x54>
   33740:	b	33694 <flatcc_json_printer_uint32_field@@Base+0x154>

00033744 <flatcc_json_printer_uint64_field@@Base>:
   33744:	ldr	ip, [r1, #8]
   33748:	add	r2, r2, #2
   3374c:	lsl	r2, r2, #1
   33750:	strd	r4, [sp, #-32]!	; 0xffffffe0
   33754:	strd	r6, [sp, #8]
   33758:	strd	r8, [sp, #16]
   3375c:	str	sl, [sp, #24]
   33760:	cmp	r2, ip
   33764:	str	lr, [sp, #28]
   33768:	ldr	r5, [sp, #32]
   3376c:	bge	338bc <flatcc_json_printer_uint64_field@@Base+0x178>
   33770:	ldr	ip, [r1, #4]
   33774:	ldrh	r2, [ip, r2]
   33778:	cmp	r2, #0
   3377c:	beq	338bc <flatcc_json_printer_uint64_field@@Base+0x178>
   33780:	ldr	ip, [r1]
   33784:	cmn	ip, r2
   33788:	beq	338bc <flatcc_json_printer_uint64_field@@Base+0x178>
   3378c:	ldrd	r6, [ip, r2]
   33790:	ldrd	r8, [sp, #40]	; 0x28
   33794:	cmp	r9, r7
   33798:	cmpeq	r8, r6
   3379c:	beq	33948 <flatcc_json_printer_uint64_field@@Base+0x204>
   337a0:	ldr	ip, [r1, #16]
   337a4:	ldr	r2, [r0, #20]
   337a8:	cmp	ip, #0
   337ac:	add	ip, ip, #1
   337b0:	str	ip, [r1, #16]
   337b4:	beq	337cc <flatcc_json_printer_uint64_field@@Base+0x88>
   337b8:	add	ip, r2, #1
   337bc:	mov	r1, #44	; 0x2c
   337c0:	str	ip, [r0, #20]
   337c4:	strb	r1, [r2]
   337c8:	ldr	r2, [r0, #20]
   337cc:	mov	r8, r3
   337d0:	mov	r4, r0
   337d4:	ldrb	r1, [r0, #25]
   337d8:	cmp	r1, #0
   337dc:	bne	338e8 <flatcc_json_printer_uint64_field@@Base+0x1a4>
   337e0:	ldr	r3, [r0, #16]
   337e4:	cmp	r3, r2
   337e8:	bhi	337f8 <flatcc_json_printer_uint64_field@@Base+0xb4>
   337ec:	ldr	r3, [r0, #44]	; 0x2c
   337f0:	blx	r3
   337f4:	ldr	r2, [r4, #20]
   337f8:	mov	r3, #34	; 0x22
   337fc:	strb	r3, [r2]
   33800:	ldrb	r3, [r4, #26]
   33804:	ldr	r2, [r4, #16]
   33808:	ldr	r0, [r4, #20]
   3380c:	cmp	r3, #0
   33810:	addeq	r0, r0, #1
   33814:	add	r3, r0, r5
   33818:	cmp	r2, r3
   3381c:	str	r0, [r4, #20]
   33820:	bls	338d0 <flatcc_json_printer_uint64_field@@Base+0x18c>
   33824:	mov	r2, r5
   33828:	mov	r1, r8
   3382c:	bl	1451c <memcpy@plt>
   33830:	ldr	r3, [r4, #20]
   33834:	add	r5, r3, r5
   33838:	str	r5, [r4, #20]
   3383c:	mov	r3, #34	; 0x22
   33840:	mov	r0, r6
   33844:	mov	r6, #58	; 0x3a
   33848:	mov	lr, #32
   3384c:	strb	r3, [r5]
   33850:	mov	r1, r7
   33854:	ldrb	r3, [r4, #26]
   33858:	ldr	ip, [r4, #20]
   3385c:	clz	r3, r3
   33860:	lsr	r3, r3, #5
   33864:	add	r2, ip, r3
   33868:	add	r2, r2, #1
   3386c:	str	r2, [r4, #20]
   33870:	strb	r6, [ip, r3]
   33874:	ldr	r3, [r4, #20]
   33878:	strb	lr, [r3]
   3387c:	ldrb	r2, [r4, #25]
   33880:	ldr	r3, [r4, #20]
   33884:	cmp	r2, #0
   33888:	addne	r3, r3, #1
   3388c:	mov	r2, r3
   33890:	str	r3, [r4, #20]
   33894:	bl	30594 <flatcc_json_parser_struct_as_root@@Base+0x498>
   33898:	ldr	r3, [r4, #20]
   3389c:	add	r0, r3, r0
   338a0:	str	r0, [r4, #20]
   338a4:	ldrd	r4, [sp]
   338a8:	ldrd	r6, [sp, #8]
   338ac:	ldrd	r8, [sp, #16]
   338b0:	ldr	sl, [sp, #24]
   338b4:	add	sp, sp, #28
   338b8:	pop	{pc}		; (ldr pc, [sp], #4)
   338bc:	ldrb	r2, [r0, #29]
   338c0:	cmp	r2, #0
   338c4:	beq	338a4 <flatcc_json_printer_uint64_field@@Base+0x160>
   338c8:	ldrd	r6, [sp, #40]	; 0x28
   338cc:	b	337a0 <flatcc_json_printer_uint64_field@@Base+0x5c>
   338d0:	mov	r2, r5
   338d4:	mov	r1, r8
   338d8:	mov	r0, r4
   338dc:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   338e0:	ldr	r5, [r4, #20]
   338e4:	b	3383c <flatcc_json_printer_uint64_field@@Base+0xf8>
   338e8:	add	r1, r2, #1
   338ec:	mov	r3, #10
   338f0:	str	r1, [r0, #20]
   338f4:	strb	r3, [r2]
   338f8:	ldrb	r3, [r0, #25]
   338fc:	ldr	r2, [r4, #32]
   33900:	ldr	r1, [r0, #16]
   33904:	ldr	r0, [r0, #20]
   33908:	mul	r9, r2, r3
   3390c:	add	r3, r0, r9
   33910:	cmp	r1, r3
   33914:	bcs	3392c <flatcc_json_printer_uint64_field@@Base+0x1e8>
   33918:	mov	r1, r9
   3391c:	mov	r0, r4
   33920:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   33924:	ldr	r2, [r4, #20]
   33928:	b	337f8 <flatcc_json_printer_uint64_field@@Base+0xb4>
   3392c:	mov	r2, r9
   33930:	mov	r1, #32
   33934:	bl	14594 <memset@plt>
   33938:	ldr	r2, [r4, #20]
   3393c:	add	r2, r2, r9
   33940:	str	r2, [r4, #20]
   33944:	b	337f8 <flatcc_json_printer_uint64_field@@Base+0xb4>
   33948:	ldrb	r2, [r0, #28]
   3394c:	cmp	r2, #0
   33950:	beq	337a0 <flatcc_json_printer_uint64_field@@Base+0x5c>
   33954:	b	338a4 <flatcc_json_printer_uint64_field@@Base+0x160>

00033958 <flatcc_json_printer_int8_field@@Base>:
   33958:	ldr	ip, [r1, #8]
   3395c:	add	r2, r2, #2
   33960:	lsl	r2, r2, #1
   33964:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33968:	strd	r6, [sp, #8]
   3396c:	str	r8, [sp, #16]
   33970:	str	lr, [sp, #20]
   33974:	cmp	r2, ip
   33978:	ldrsb	lr, [sp, #28]
   3397c:	ldr	r6, [sp, #24]
   33980:	bge	33ae4 <flatcc_json_printer_int8_field@@Base+0x18c>
   33984:	ldr	ip, [r1, #4]
   33988:	ldrh	r2, [ip, r2]
   3398c:	cmp	r2, #0
   33990:	beq	33ae4 <flatcc_json_printer_int8_field@@Base+0x18c>
   33994:	ldr	ip, [r1]
   33998:	cmn	ip, r2
   3399c:	beq	33ae4 <flatcc_json_printer_int8_field@@Base+0x18c>
   339a0:	ldrsb	r5, [ip, r2]
   339a4:	cmp	lr, r5
   339a8:	beq	33b70 <flatcc_json_printer_int8_field@@Base+0x218>
   339ac:	ldr	ip, [r1, #16]
   339b0:	ldr	r2, [r0, #20]
   339b4:	cmp	ip, #0
   339b8:	add	ip, ip, #1
   339bc:	str	ip, [r1, #16]
   339c0:	beq	339d8 <flatcc_json_printer_int8_field@@Base+0x80>
   339c4:	add	ip, r2, #1
   339c8:	mov	r1, #44	; 0x2c
   339cc:	str	ip, [r0, #20]
   339d0:	strb	r1, [r2]
   339d4:	ldr	r2, [r0, #20]
   339d8:	mov	r7, r3
   339dc:	mov	r4, r0
   339e0:	ldrb	r1, [r0, #25]
   339e4:	cmp	r1, #0
   339e8:	bne	33b10 <flatcc_json_printer_int8_field@@Base+0x1b8>
   339ec:	ldr	r3, [r0, #16]
   339f0:	cmp	r3, r2
   339f4:	bhi	33a04 <flatcc_json_printer_int8_field@@Base+0xac>
   339f8:	ldr	r3, [r0, #44]	; 0x2c
   339fc:	blx	r3
   33a00:	ldr	r2, [r4, #20]
   33a04:	mov	r3, #34	; 0x22
   33a08:	strb	r3, [r2]
   33a0c:	ldrb	r3, [r4, #26]
   33a10:	ldr	r2, [r4, #16]
   33a14:	ldr	r0, [r4, #20]
   33a18:	cmp	r3, #0
   33a1c:	addeq	r0, r0, #1
   33a20:	add	r3, r0, r6
   33a24:	cmp	r2, r3
   33a28:	str	r0, [r4, #20]
   33a2c:	bls	33af8 <flatcc_json_printer_int8_field@@Base+0x1a0>
   33a30:	mov	r2, r6
   33a34:	mov	r1, r7
   33a38:	bl	1451c <memcpy@plt>
   33a3c:	ldr	r3, [r4, #20]
   33a40:	add	r6, r3, r6
   33a44:	str	r6, [r4, #20]
   33a48:	mov	r3, #34	; 0x22
   33a4c:	mov	lr, #58	; 0x3a
   33a50:	lsr	r7, r5, #31
   33a54:	mov	ip, #32
   33a58:	uxtb	r0, r5
   33a5c:	strb	r3, [r6]
   33a60:	ldrb	r3, [r4, #26]
   33a64:	ldr	r1, [r4, #20]
   33a68:	clz	r3, r3
   33a6c:	lsr	r3, r3, #5
   33a70:	add	r2, r1, r3
   33a74:	add	r2, r2, #1
   33a78:	str	r2, [r4, #20]
   33a7c:	strb	lr, [r1, r3]
   33a80:	ldr	r3, [r4, #20]
   33a84:	strb	ip, [r3]
   33a88:	ldrb	r3, [r4, #25]
   33a8c:	ldr	r2, [r4, #20]
   33a90:	adds	r3, r3, #0
   33a94:	movne	r3, #1
   33a98:	cmp	r5, #0
   33a9c:	add	r1, r2, r3
   33aa0:	str	r1, [r4, #20]
   33aa4:	bge	33abc <flatcc_json_printer_int8_field@@Base+0x164>
   33aa8:	rsb	r0, r0, #0
   33aac:	mov	ip, #45	; 0x2d
   33ab0:	add	r1, r1, #1
   33ab4:	uxtb	r0, r0
   33ab8:	strb	ip, [r2, r3]
   33abc:	bl	312f4 <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   33ac0:	ldr	r3, [r4, #20]
   33ac4:	add	r0, r7, r0
   33ac8:	add	r3, r3, r0
   33acc:	str	r3, [r4, #20]
   33ad0:	ldrd	r4, [sp]
   33ad4:	ldrd	r6, [sp, #8]
   33ad8:	ldr	r8, [sp, #16]
   33adc:	add	sp, sp, #20
   33ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   33ae4:	ldrb	r2, [r0, #29]
   33ae8:	cmp	r2, #0
   33aec:	beq	33ad0 <flatcc_json_printer_int8_field@@Base+0x178>
   33af0:	mov	r5, lr
   33af4:	b	339ac <flatcc_json_printer_int8_field@@Base+0x54>
   33af8:	mov	r2, r6
   33afc:	mov	r1, r7
   33b00:	mov	r0, r4
   33b04:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   33b08:	ldr	r6, [r4, #20]
   33b0c:	b	33a48 <flatcc_json_printer_int8_field@@Base+0xf0>
   33b10:	add	r1, r2, #1
   33b14:	mov	r3, #10
   33b18:	str	r1, [r0, #20]
   33b1c:	strb	r3, [r2]
   33b20:	ldrb	r8, [r0, #25]
   33b24:	ldr	r2, [r4, #32]
   33b28:	ldr	r1, [r0, #16]
   33b2c:	ldr	r0, [r0, #20]
   33b30:	mul	r8, r2, r8
   33b34:	add	r3, r0, r8
   33b38:	cmp	r1, r3
   33b3c:	bcs	33b54 <flatcc_json_printer_int8_field@@Base+0x1fc>
   33b40:	mov	r1, r8
   33b44:	mov	r0, r4
   33b48:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   33b4c:	ldr	r2, [r4, #20]
   33b50:	b	33a04 <flatcc_json_printer_int8_field@@Base+0xac>
   33b54:	mov	r2, r8
   33b58:	mov	r1, #32
   33b5c:	bl	14594 <memset@plt>
   33b60:	ldr	r2, [r4, #20]
   33b64:	add	r2, r2, r8
   33b68:	str	r2, [r4, #20]
   33b6c:	b	33a04 <flatcc_json_printer_int8_field@@Base+0xac>
   33b70:	ldrb	r2, [r0, #28]
   33b74:	cmp	r2, #0
   33b78:	beq	339ac <flatcc_json_printer_int8_field@@Base+0x54>
   33b7c:	b	33ad0 <flatcc_json_printer_int8_field@@Base+0x178>

00033b80 <flatcc_json_printer_int16_field@@Base>:
   33b80:	ldr	ip, [r1, #8]
   33b84:	add	r2, r2, #2
   33b88:	lsl	r2, r2, #1
   33b8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33b90:	strd	r6, [sp, #8]
   33b94:	str	r8, [sp, #16]
   33b98:	str	lr, [sp, #20]
   33b9c:	cmp	r2, ip
   33ba0:	ldrsh	lr, [sp, #28]
   33ba4:	ldr	r6, [sp, #24]
   33ba8:	bge	33d0c <flatcc_json_printer_int16_field@@Base+0x18c>
   33bac:	ldr	ip, [r1, #4]
   33bb0:	ldrh	r2, [ip, r2]
   33bb4:	cmp	r2, #0
   33bb8:	beq	33d0c <flatcc_json_printer_int16_field@@Base+0x18c>
   33bbc:	ldr	ip, [r1]
   33bc0:	cmn	ip, r2
   33bc4:	beq	33d0c <flatcc_json_printer_int16_field@@Base+0x18c>
   33bc8:	ldrsh	r5, [ip, r2]
   33bcc:	cmp	lr, r5
   33bd0:	beq	33d98 <flatcc_json_printer_int16_field@@Base+0x218>
   33bd4:	ldr	ip, [r1, #16]
   33bd8:	ldr	r2, [r0, #20]
   33bdc:	cmp	ip, #0
   33be0:	add	ip, ip, #1
   33be4:	str	ip, [r1, #16]
   33be8:	beq	33c00 <flatcc_json_printer_int16_field@@Base+0x80>
   33bec:	add	ip, r2, #1
   33bf0:	mov	r1, #44	; 0x2c
   33bf4:	str	ip, [r0, #20]
   33bf8:	strb	r1, [r2]
   33bfc:	ldr	r2, [r0, #20]
   33c00:	mov	r7, r3
   33c04:	mov	r4, r0
   33c08:	ldrb	r1, [r0, #25]
   33c0c:	cmp	r1, #0
   33c10:	bne	33d38 <flatcc_json_printer_int16_field@@Base+0x1b8>
   33c14:	ldr	r3, [r0, #16]
   33c18:	cmp	r3, r2
   33c1c:	bhi	33c2c <flatcc_json_printer_int16_field@@Base+0xac>
   33c20:	ldr	r3, [r0, #44]	; 0x2c
   33c24:	blx	r3
   33c28:	ldr	r2, [r4, #20]
   33c2c:	mov	r3, #34	; 0x22
   33c30:	strb	r3, [r2]
   33c34:	ldrb	r3, [r4, #26]
   33c38:	ldr	r2, [r4, #16]
   33c3c:	ldr	r0, [r4, #20]
   33c40:	cmp	r3, #0
   33c44:	addeq	r0, r0, #1
   33c48:	add	r3, r0, r6
   33c4c:	cmp	r2, r3
   33c50:	str	r0, [r4, #20]
   33c54:	bls	33d20 <flatcc_json_printer_int16_field@@Base+0x1a0>
   33c58:	mov	r2, r6
   33c5c:	mov	r1, r7
   33c60:	bl	1451c <memcpy@plt>
   33c64:	ldr	r3, [r4, #20]
   33c68:	add	r6, r3, r6
   33c6c:	str	r6, [r4, #20]
   33c70:	mov	r3, #34	; 0x22
   33c74:	mov	lr, #58	; 0x3a
   33c78:	lsr	r7, r5, #31
   33c7c:	mov	ip, #32
   33c80:	uxth	r0, r5
   33c84:	strb	r3, [r6]
   33c88:	ldrb	r3, [r4, #26]
   33c8c:	ldr	r1, [r4, #20]
   33c90:	clz	r3, r3
   33c94:	lsr	r3, r3, #5
   33c98:	add	r2, r1, r3
   33c9c:	add	r2, r2, #1
   33ca0:	str	r2, [r4, #20]
   33ca4:	strb	lr, [r1, r3]
   33ca8:	ldr	r3, [r4, #20]
   33cac:	strb	ip, [r3]
   33cb0:	ldrb	r3, [r4, #25]
   33cb4:	ldr	r2, [r4, #20]
   33cb8:	adds	r3, r3, #0
   33cbc:	movne	r3, #1
   33cc0:	cmp	r5, #0
   33cc4:	add	r1, r2, r3
   33cc8:	str	r1, [r4, #20]
   33ccc:	bge	33ce4 <flatcc_json_printer_int16_field@@Base+0x164>
   33cd0:	rsb	r0, r0, #0
   33cd4:	mov	ip, #45	; 0x2d
   33cd8:	add	r1, r1, #1
   33cdc:	uxth	r0, r0
   33ce0:	strb	ip, [r2, r3]
   33ce4:	bl	30100 <flatcc_json_parser_struct_as_root@@Base+0x4>
   33ce8:	ldr	r3, [r4, #20]
   33cec:	add	r0, r7, r0
   33cf0:	add	r3, r3, r0
   33cf4:	str	r3, [r4, #20]
   33cf8:	ldrd	r4, [sp]
   33cfc:	ldrd	r6, [sp, #8]
   33d00:	ldr	r8, [sp, #16]
   33d04:	add	sp, sp, #20
   33d08:	pop	{pc}		; (ldr pc, [sp], #4)
   33d0c:	ldrb	r2, [r0, #29]
   33d10:	cmp	r2, #0
   33d14:	beq	33cf8 <flatcc_json_printer_int16_field@@Base+0x178>
   33d18:	mov	r5, lr
   33d1c:	b	33bd4 <flatcc_json_printer_int16_field@@Base+0x54>
   33d20:	mov	r2, r6
   33d24:	mov	r1, r7
   33d28:	mov	r0, r4
   33d2c:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   33d30:	ldr	r6, [r4, #20]
   33d34:	b	33c70 <flatcc_json_printer_int16_field@@Base+0xf0>
   33d38:	add	r1, r2, #1
   33d3c:	mov	r3, #10
   33d40:	str	r1, [r0, #20]
   33d44:	strb	r3, [r2]
   33d48:	ldrb	r8, [r0, #25]
   33d4c:	ldr	r2, [r4, #32]
   33d50:	ldr	r1, [r0, #16]
   33d54:	ldr	r0, [r0, #20]
   33d58:	mul	r8, r2, r8
   33d5c:	add	r3, r0, r8
   33d60:	cmp	r1, r3
   33d64:	bcs	33d7c <flatcc_json_printer_int16_field@@Base+0x1fc>
   33d68:	mov	r1, r8
   33d6c:	mov	r0, r4
   33d70:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   33d74:	ldr	r2, [r4, #20]
   33d78:	b	33c2c <flatcc_json_printer_int16_field@@Base+0xac>
   33d7c:	mov	r2, r8
   33d80:	mov	r1, #32
   33d84:	bl	14594 <memset@plt>
   33d88:	ldr	r2, [r4, #20]
   33d8c:	add	r2, r2, r8
   33d90:	str	r2, [r4, #20]
   33d94:	b	33c2c <flatcc_json_printer_int16_field@@Base+0xac>
   33d98:	ldrb	r2, [r0, #28]
   33d9c:	cmp	r2, #0
   33da0:	beq	33bd4 <flatcc_json_printer_int16_field@@Base+0x54>
   33da4:	b	33cf8 <flatcc_json_printer_int16_field@@Base+0x178>

00033da8 <flatcc_json_printer_int32_field@@Base>:
   33da8:	ldr	ip, [r1, #8]
   33dac:	add	r2, r2, #2
   33db0:	lsl	r2, r2, #1
   33db4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33db8:	strd	r6, [sp, #8]
   33dbc:	str	r8, [sp, #16]
   33dc0:	str	lr, [sp, #20]
   33dc4:	cmp	r2, ip
   33dc8:	ldr	r6, [sp, #24]
   33dcc:	bge	33f30 <flatcc_json_printer_int32_field@@Base+0x188>
   33dd0:	ldr	ip, [r1, #4]
   33dd4:	ldrh	r2, [ip, r2]
   33dd8:	cmp	r2, #0
   33ddc:	beq	33f30 <flatcc_json_printer_int32_field@@Base+0x188>
   33de0:	ldr	ip, [r1]
   33de4:	cmn	ip, r2
   33de8:	beq	33f30 <flatcc_json_printer_int32_field@@Base+0x188>
   33dec:	ldr	r5, [ip, r2]
   33df0:	ldr	r2, [sp, #28]
   33df4:	cmp	r2, r5
   33df8:	beq	33fbc <flatcc_json_printer_int32_field@@Base+0x214>
   33dfc:	ldr	ip, [r1, #16]
   33e00:	ldr	r2, [r0, #20]
   33e04:	cmp	ip, #0
   33e08:	add	ip, ip, #1
   33e0c:	str	ip, [r1, #16]
   33e10:	beq	33e28 <flatcc_json_printer_int32_field@@Base+0x80>
   33e14:	add	ip, r2, #1
   33e18:	mov	r1, #44	; 0x2c
   33e1c:	str	ip, [r0, #20]
   33e20:	strb	r1, [r2]
   33e24:	ldr	r2, [r0, #20]
   33e28:	mov	r7, r3
   33e2c:	mov	r4, r0
   33e30:	ldrb	r1, [r0, #25]
   33e34:	cmp	r1, #0
   33e38:	bne	33f5c <flatcc_json_printer_int32_field@@Base+0x1b4>
   33e3c:	ldr	r3, [r0, #16]
   33e40:	cmp	r3, r2
   33e44:	bhi	33e54 <flatcc_json_printer_int32_field@@Base+0xac>
   33e48:	ldr	r3, [r0, #44]	; 0x2c
   33e4c:	blx	r3
   33e50:	ldr	r2, [r4, #20]
   33e54:	mov	r3, #34	; 0x22
   33e58:	strb	r3, [r2]
   33e5c:	ldrb	r3, [r4, #26]
   33e60:	ldr	r2, [r4, #16]
   33e64:	ldr	r0, [r4, #20]
   33e68:	cmp	r3, #0
   33e6c:	addeq	r0, r0, #1
   33e70:	add	r3, r0, r6
   33e74:	cmp	r2, r3
   33e78:	str	r0, [r4, #20]
   33e7c:	bls	33f44 <flatcc_json_printer_int32_field@@Base+0x19c>
   33e80:	mov	r2, r6
   33e84:	mov	r1, r7
   33e88:	bl	1451c <memcpy@plt>
   33e8c:	ldr	r3, [r4, #20]
   33e90:	add	r6, r3, r6
   33e94:	str	r6, [r4, #20]
   33e98:	mov	r3, #34	; 0x22
   33e9c:	mov	ip, #58	; 0x3a
   33ea0:	lsr	r7, r5, #31
   33ea4:	mov	r0, #32
   33ea8:	strb	r3, [r6]
   33eac:	ldrb	r3, [r4, #26]
   33eb0:	ldr	r1, [r4, #20]
   33eb4:	clz	r3, r3
   33eb8:	lsr	r3, r3, #5
   33ebc:	add	r2, r1, r3
   33ec0:	add	r2, r2, #1
   33ec4:	str	r2, [r4, #20]
   33ec8:	strb	ip, [r1, r3]
   33ecc:	ldr	r3, [r4, #20]
   33ed0:	strb	r0, [r3]
   33ed4:	ldrb	r3, [r4, #25]
   33ed8:	ldr	r2, [r4, #20]
   33edc:	adds	r3, r3, #0
   33ee0:	movne	r3, #1
   33ee4:	cmp	r5, #0
   33ee8:	add	r1, r2, r3
   33eec:	str	r1, [r4, #20]
   33ef0:	bge	33f04 <flatcc_json_printer_int32_field@@Base+0x15c>
   33ef4:	mov	r0, #45	; 0x2d
   33ef8:	rsb	r5, r5, #0
   33efc:	add	r1, r1, #1
   33f00:	strb	r0, [r2, r3]
   33f04:	mov	r0, r5
   33f08:	bl	30268 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   33f0c:	ldr	r3, [r4, #20]
   33f10:	add	r0, r7, r0
   33f14:	add	r3, r3, r0
   33f18:	str	r3, [r4, #20]
   33f1c:	ldrd	r4, [sp]
   33f20:	ldrd	r6, [sp, #8]
   33f24:	ldr	r8, [sp, #16]
   33f28:	add	sp, sp, #20
   33f2c:	pop	{pc}		; (ldr pc, [sp], #4)
   33f30:	ldrb	r2, [r0, #29]
   33f34:	cmp	r2, #0
   33f38:	beq	33f1c <flatcc_json_printer_int32_field@@Base+0x174>
   33f3c:	ldr	r5, [sp, #28]
   33f40:	b	33dfc <flatcc_json_printer_int32_field@@Base+0x54>
   33f44:	mov	r2, r6
   33f48:	mov	r1, r7
   33f4c:	mov	r0, r4
   33f50:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   33f54:	ldr	r6, [r4, #20]
   33f58:	b	33e98 <flatcc_json_printer_int32_field@@Base+0xf0>
   33f5c:	add	r1, r2, #1
   33f60:	mov	r3, #10
   33f64:	str	r1, [r0, #20]
   33f68:	strb	r3, [r2]
   33f6c:	ldrb	r8, [r0, #25]
   33f70:	ldr	r2, [r4, #32]
   33f74:	ldr	r1, [r0, #16]
   33f78:	ldr	r0, [r0, #20]
   33f7c:	mul	r8, r2, r8
   33f80:	add	r3, r0, r8
   33f84:	cmp	r1, r3
   33f88:	bcs	33fa0 <flatcc_json_printer_int32_field@@Base+0x1f8>
   33f8c:	mov	r1, r8
   33f90:	mov	r0, r4
   33f94:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   33f98:	ldr	r2, [r4, #20]
   33f9c:	b	33e54 <flatcc_json_printer_int32_field@@Base+0xac>
   33fa0:	mov	r2, r8
   33fa4:	mov	r1, #32
   33fa8:	bl	14594 <memset@plt>
   33fac:	ldr	r2, [r4, #20]
   33fb0:	add	r2, r2, r8
   33fb4:	str	r2, [r4, #20]
   33fb8:	b	33e54 <flatcc_json_printer_int32_field@@Base+0xac>
   33fbc:	ldrb	r2, [r0, #28]
   33fc0:	cmp	r2, #0
   33fc4:	beq	33dfc <flatcc_json_printer_int32_field@@Base+0x54>
   33fc8:	b	33f1c <flatcc_json_printer_int32_field@@Base+0x174>

00033fcc <flatcc_json_printer_int64_field@@Base>:
   33fcc:	ldr	ip, [r1, #8]
   33fd0:	add	r2, r2, #2
   33fd4:	lsl	r2, r2, #1
   33fd8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   33fdc:	strd	r6, [sp, #8]
   33fe0:	strd	r8, [sp, #16]
   33fe4:	str	sl, [sp, #24]
   33fe8:	cmp	r2, ip
   33fec:	str	lr, [sp, #28]
   33ff0:	ldr	r5, [sp, #32]
   33ff4:	bge	3416c <flatcc_json_printer_int64_field@@Base+0x1a0>
   33ff8:	ldr	ip, [r1, #4]
   33ffc:	ldrh	r2, [ip, r2]
   34000:	cmp	r2, #0
   34004:	beq	3416c <flatcc_json_printer_int64_field@@Base+0x1a0>
   34008:	ldr	ip, [r1]
   3400c:	cmn	ip, r2
   34010:	beq	3416c <flatcc_json_printer_int64_field@@Base+0x1a0>
   34014:	ldrd	r6, [ip, r2]
   34018:	ldrd	r8, [sp, #40]	; 0x28
   3401c:	cmp	r9, r7
   34020:	cmpeq	r8, r6
   34024:	beq	341f8 <flatcc_json_printer_int64_field@@Base+0x22c>
   34028:	ldr	ip, [r1, #16]
   3402c:	ldr	r2, [r0, #20]
   34030:	cmp	ip, #0
   34034:	add	ip, ip, #1
   34038:	str	ip, [r1, #16]
   3403c:	beq	34054 <flatcc_json_printer_int64_field@@Base+0x88>
   34040:	add	ip, r2, #1
   34044:	mov	r1, #44	; 0x2c
   34048:	str	ip, [r0, #20]
   3404c:	strb	r1, [r2]
   34050:	ldr	r2, [r0, #20]
   34054:	mov	r8, r3
   34058:	mov	r4, r0
   3405c:	ldrb	r1, [r0, #25]
   34060:	cmp	r1, #0
   34064:	bne	34198 <flatcc_json_printer_int64_field@@Base+0x1cc>
   34068:	ldr	r3, [r0, #16]
   3406c:	cmp	r3, r2
   34070:	bhi	34080 <flatcc_json_printer_int64_field@@Base+0xb4>
   34074:	ldr	r3, [r0, #44]	; 0x2c
   34078:	blx	r3
   3407c:	ldr	r2, [r4, #20]
   34080:	mov	r3, #34	; 0x22
   34084:	strb	r3, [r2]
   34088:	ldrb	r3, [r4, #26]
   3408c:	ldr	r2, [r4, #16]
   34090:	ldr	r0, [r4, #20]
   34094:	cmp	r3, #0
   34098:	addeq	r0, r0, #1
   3409c:	add	r3, r0, r5
   340a0:	cmp	r2, r3
   340a4:	str	r0, [r4, #20]
   340a8:	bls	34180 <flatcc_json_printer_int64_field@@Base+0x1b4>
   340ac:	mov	r2, r5
   340b0:	mov	r1, r8
   340b4:	bl	1451c <memcpy@plt>
   340b8:	ldr	r3, [r4, #20]
   340bc:	add	r5, r3, r5
   340c0:	str	r5, [r4, #20]
   340c4:	mov	r3, #34	; 0x22
   340c8:	mov	ip, #58	; 0x3a
   340cc:	lsr	r8, r7, #31
   340d0:	mov	r0, #32
   340d4:	strb	r3, [r5]
   340d8:	ldrb	r3, [r4, #26]
   340dc:	ldr	r1, [r4, #20]
   340e0:	clz	r3, r3
   340e4:	lsr	r3, r3, #5
   340e8:	add	r2, r1, r3
   340ec:	add	r2, r2, #1
   340f0:	str	r2, [r4, #20]
   340f4:	strb	ip, [r1, r3]
   340f8:	ldr	r3, [r4, #20]
   340fc:	strb	r0, [r3]
   34100:	ldrb	r3, [r4, #25]
   34104:	ldr	r1, [r4, #20]
   34108:	adds	r3, r3, #0
   3410c:	movne	r3, #1
   34110:	cmp	r6, #0
   34114:	sbcs	r2, r7, #0
   34118:	add	r2, r1, r3
   3411c:	str	r2, [r4, #20]
   34120:	bge	34138 <flatcc_json_printer_int64_field@@Base+0x16c>
   34124:	rsbs	r6, r6, #0
   34128:	mov	r0, #45	; 0x2d
   3412c:	rsc	r7, r7, #0
   34130:	add	r2, r2, #1
   34134:	strb	r0, [r1, r3]
   34138:	mov	r0, r6
   3413c:	mov	r1, r7
   34140:	bl	30594 <flatcc_json_parser_struct_as_root@@Base+0x498>
   34144:	ldr	r3, [r4, #20]
   34148:	add	r0, r8, r0
   3414c:	add	r3, r3, r0
   34150:	str	r3, [r4, #20]
   34154:	ldrd	r4, [sp]
   34158:	ldrd	r6, [sp, #8]
   3415c:	ldrd	r8, [sp, #16]
   34160:	ldr	sl, [sp, #24]
   34164:	add	sp, sp, #28
   34168:	pop	{pc}		; (ldr pc, [sp], #4)
   3416c:	ldrb	r2, [r0, #29]
   34170:	cmp	r2, #0
   34174:	beq	34154 <flatcc_json_printer_int64_field@@Base+0x188>
   34178:	ldrd	r6, [sp, #40]	; 0x28
   3417c:	b	34028 <flatcc_json_printer_int64_field@@Base+0x5c>
   34180:	mov	r2, r5
   34184:	mov	r1, r8
   34188:	mov	r0, r4
   3418c:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   34190:	ldr	r5, [r4, #20]
   34194:	b	340c4 <flatcc_json_printer_int64_field@@Base+0xf8>
   34198:	add	r1, r2, #1
   3419c:	mov	r3, #10
   341a0:	str	r1, [r0, #20]
   341a4:	strb	r3, [r2]
   341a8:	ldrb	r3, [r0, #25]
   341ac:	ldr	r2, [r4, #32]
   341b0:	ldr	r1, [r0, #16]
   341b4:	ldr	r0, [r0, #20]
   341b8:	mul	r9, r2, r3
   341bc:	add	r3, r0, r9
   341c0:	cmp	r1, r3
   341c4:	bcs	341dc <flatcc_json_printer_int64_field@@Base+0x210>
   341c8:	mov	r1, r9
   341cc:	mov	r0, r4
   341d0:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   341d4:	ldr	r2, [r4, #20]
   341d8:	b	34080 <flatcc_json_printer_int64_field@@Base+0xb4>
   341dc:	mov	r2, r9
   341e0:	mov	r1, #32
   341e4:	bl	14594 <memset@plt>
   341e8:	ldr	r2, [r4, #20]
   341ec:	add	r2, r2, r9
   341f0:	str	r2, [r4, #20]
   341f4:	b	34080 <flatcc_json_printer_int64_field@@Base+0xb4>
   341f8:	ldrb	r2, [r0, #28]
   341fc:	cmp	r2, #0
   34200:	beq	34028 <flatcc_json_printer_int64_field@@Base+0x5c>
   34204:	b	34154 <flatcc_json_printer_int64_field@@Base+0x188>

00034208 <flatcc_json_printer_bool_field@@Base>:
   34208:	ldr	ip, [r1, #8]
   3420c:	add	r2, r2, #2
   34210:	lsl	r2, r2, #1
   34214:	strd	r4, [sp, #-24]!	; 0xffffffe8
   34218:	strd	r6, [sp, #8]
   3421c:	str	r8, [sp, #16]
   34220:	str	lr, [sp, #20]
   34224:	cmp	r2, ip
   34228:	ldrb	lr, [sp, #28]
   3422c:	ldr	r5, [sp, #24]
   34230:	bge	34370 <flatcc_json_printer_bool_field@@Base+0x168>
   34234:	ldr	ip, [r1, #4]
   34238:	ldrh	r2, [ip, r2]
   3423c:	cmp	r2, #0
   34240:	beq	34370 <flatcc_json_printer_bool_field@@Base+0x168>
   34244:	ldr	ip, [r1]
   34248:	cmn	ip, r2
   3424c:	beq	34370 <flatcc_json_printer_bool_field@@Base+0x168>
   34250:	ldrb	r6, [ip, r2]
   34254:	cmp	lr, r6
   34258:	beq	343fc <flatcc_json_printer_bool_field@@Base+0x1f4>
   3425c:	ldr	ip, [r1, #16]
   34260:	ldr	r2, [r0, #20]
   34264:	cmp	ip, #0
   34268:	add	ip, ip, #1
   3426c:	str	ip, [r1, #16]
   34270:	beq	34288 <flatcc_json_printer_bool_field@@Base+0x80>
   34274:	add	ip, r2, #1
   34278:	mov	r1, #44	; 0x2c
   3427c:	str	ip, [r0, #20]
   34280:	strb	r1, [r2]
   34284:	ldr	r2, [r0, #20]
   34288:	mov	r7, r3
   3428c:	mov	r4, r0
   34290:	ldrb	r1, [r0, #25]
   34294:	cmp	r1, #0
   34298:	bne	3439c <flatcc_json_printer_bool_field@@Base+0x194>
   3429c:	ldr	r3, [r0, #16]
   342a0:	cmp	r3, r2
   342a4:	bhi	342b4 <flatcc_json_printer_bool_field@@Base+0xac>
   342a8:	ldr	r3, [r0, #44]	; 0x2c
   342ac:	blx	r3
   342b0:	ldr	r2, [r4, #20]
   342b4:	mov	r3, #34	; 0x22
   342b8:	strb	r3, [r2]
   342bc:	ldrb	r3, [r4, #26]
   342c0:	ldr	r2, [r4, #16]
   342c4:	ldr	r0, [r4, #20]
   342c8:	cmp	r3, #0
   342cc:	addeq	r0, r0, #1
   342d0:	add	r3, r0, r5
   342d4:	cmp	r2, r3
   342d8:	str	r0, [r4, #20]
   342dc:	bls	34384 <flatcc_json_printer_bool_field@@Base+0x17c>
   342e0:	mov	r2, r5
   342e4:	mov	r1, r7
   342e8:	bl	1451c <memcpy@plt>
   342ec:	ldr	r3, [r4, #20]
   342f0:	add	r5, r3, r5
   342f4:	str	r5, [r4, #20]
   342f8:	mov	r3, #34	; 0x22
   342fc:	mov	lr, #58	; 0x3a
   34300:	mov	ip, #32
   34304:	mov	r0, r6
   34308:	strb	r3, [r5]
   3430c:	ldrb	r3, [r4, #26]
   34310:	ldr	r1, [r4, #20]
   34314:	clz	r3, r3
   34318:	lsr	r3, r3, #5
   3431c:	add	r2, r1, r3
   34320:	add	r2, r2, #1
   34324:	str	r2, [r4, #20]
   34328:	strb	lr, [r1, r3]
   3432c:	ldr	r3, [r4, #20]
   34330:	strb	ip, [r3]
   34334:	ldrb	r2, [r4, #25]
   34338:	ldr	r3, [r4, #20]
   3433c:	cmp	r2, #0
   34340:	addne	r3, r3, #1
   34344:	mov	r1, r3
   34348:	str	r3, [r4, #20]
   3434c:	bl	31428 <flatcc_json_parser_struct_as_root@@Base+0x132c>
   34350:	ldr	r3, [r4, #20]
   34354:	add	r0, r3, r0
   34358:	str	r0, [r4, #20]
   3435c:	ldrd	r4, [sp]
   34360:	ldrd	r6, [sp, #8]
   34364:	ldr	r8, [sp, #16]
   34368:	add	sp, sp, #20
   3436c:	pop	{pc}		; (ldr pc, [sp], #4)
   34370:	ldrb	r2, [r0, #29]
   34374:	cmp	r2, #0
   34378:	beq	3435c <flatcc_json_printer_bool_field@@Base+0x154>
   3437c:	mov	r6, lr
   34380:	b	3425c <flatcc_json_printer_bool_field@@Base+0x54>
   34384:	mov	r2, r5
   34388:	mov	r1, r7
   3438c:	mov	r0, r4
   34390:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   34394:	ldr	r5, [r4, #20]
   34398:	b	342f8 <flatcc_json_printer_bool_field@@Base+0xf0>
   3439c:	add	r1, r2, #1
   343a0:	mov	r3, #10
   343a4:	str	r1, [r0, #20]
   343a8:	strb	r3, [r2]
   343ac:	ldrb	r8, [r0, #25]
   343b0:	ldr	r2, [r4, #32]
   343b4:	ldr	r1, [r0, #16]
   343b8:	ldr	r0, [r0, #20]
   343bc:	mul	r8, r2, r8
   343c0:	add	r3, r0, r8
   343c4:	cmp	r1, r3
   343c8:	bcs	343e0 <flatcc_json_printer_bool_field@@Base+0x1d8>
   343cc:	mov	r1, r8
   343d0:	mov	r0, r4
   343d4:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   343d8:	ldr	r2, [r4, #20]
   343dc:	b	342b4 <flatcc_json_printer_bool_field@@Base+0xac>
   343e0:	mov	r2, r8
   343e4:	mov	r1, #32
   343e8:	bl	14594 <memset@plt>
   343ec:	ldr	r2, [r4, #20]
   343f0:	add	r2, r2, r8
   343f4:	str	r2, [r4, #20]
   343f8:	b	342b4 <flatcc_json_printer_bool_field@@Base+0xac>
   343fc:	ldrb	r2, [r0, #28]
   34400:	cmp	r2, #0
   34404:	beq	3425c <flatcc_json_printer_bool_field@@Base+0x54>
   34408:	b	3435c <flatcc_json_printer_bool_field@@Base+0x154>

0003440c <flatcc_json_printer_float_field@@Base>:
   3440c:	ldr	ip, [r1, #8]
   34410:	add	r2, r2, #2
   34414:	lsl	r2, r2, #1
   34418:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3441c:	strd	r6, [sp, #8]
   34420:	str	r8, [sp, #16]
   34424:	str	lr, [sp, #20]
   34428:	cmp	r2, ip
   3442c:	vpush	{d8}
   34430:	ldr	r5, [sp, #32]
   34434:	bge	34488 <flatcc_json_printer_float_field@@Base+0x7c>
   34438:	ldr	ip, [r1, #4]
   3443c:	ldrh	ip, [ip, r2]
   34440:	cmp	ip, #0
   34444:	beq	34488 <flatcc_json_printer_float_field@@Base+0x7c>
   34448:	ldr	r2, [r1]
   3444c:	adds	r2, r2, ip
   34450:	beq	34488 <flatcc_json_printer_float_field@@Base+0x7c>
   34454:	vldr	s16, [r2]
   34458:	vcmp.f32	s0, s16
   3445c:	vmrs	APSR_nzcv, fpscr
   34460:	bne	34498 <flatcc_json_printer_float_field@@Base+0x8c>
   34464:	ldrb	r2, [r0, #28]
   34468:	cmp	r2, #0
   3446c:	beq	34498 <flatcc_json_printer_float_field@@Base+0x8c>
   34470:	vpop	{d8}
   34474:	ldrd	r4, [sp]
   34478:	ldrd	r6, [sp, #8]
   3447c:	ldr	r8, [sp, #16]
   34480:	add	sp, sp, #20
   34484:	pop	{pc}		; (ldr pc, [sp], #4)
   34488:	ldrb	r2, [r0, #29]
   3448c:	cmp	r2, #0
   34490:	beq	34470 <flatcc_json_printer_float_field@@Base+0x64>
   34494:	vmov.f32	s16, s0
   34498:	ldr	ip, [r1, #16]
   3449c:	ldr	r2, [r0, #20]
   344a0:	cmp	ip, #0
   344a4:	add	ip, ip, #1
   344a8:	str	ip, [r1, #16]
   344ac:	beq	344c4 <flatcc_json_printer_float_field@@Base+0xb8>
   344b0:	add	ip, r2, #1
   344b4:	mov	r1, #44	; 0x2c
   344b8:	str	ip, [r0, #20]
   344bc:	strb	r1, [r2]
   344c0:	ldr	r2, [r0, #20]
   344c4:	mov	r6, r3
   344c8:	mov	r4, r0
   344cc:	ldrb	r1, [r0, #25]
   344d0:	cmp	r1, #0
   344d4:	bne	345b4 <flatcc_json_printer_float_field@@Base+0x1a8>
   344d8:	ldr	r3, [r0, #16]
   344dc:	cmp	r3, r2
   344e0:	bhi	344f0 <flatcc_json_printer_float_field@@Base+0xe4>
   344e4:	ldr	r3, [r0, #44]	; 0x2c
   344e8:	blx	r3
   344ec:	ldr	r2, [r4, #20]
   344f0:	mov	r3, #34	; 0x22
   344f4:	strb	r3, [r2]
   344f8:	ldrb	r3, [r4, #26]
   344fc:	ldr	r2, [r4, #16]
   34500:	ldr	r0, [r4, #20]
   34504:	cmp	r3, #0
   34508:	addeq	r0, r0, #1
   3450c:	add	r3, r0, r5
   34510:	cmp	r2, r3
   34514:	str	r0, [r4, #20]
   34518:	bls	3459c <flatcc_json_printer_float_field@@Base+0x190>
   3451c:	mov	r2, r5
   34520:	mov	r1, r6
   34524:	bl	1451c <memcpy@plt>
   34528:	ldr	r3, [r4, #20]
   3452c:	add	r5, r3, r5
   34530:	str	r5, [r4, #20]
   34534:	mov	r3, #34	; 0x22
   34538:	mov	ip, #58	; 0x3a
   3453c:	vcvt.f64.f32	d0, s16
   34540:	mov	r0, #32
   34544:	strb	r3, [r5]
   34548:	ldrb	r3, [r4, #26]
   3454c:	ldr	r1, [r4, #20]
   34550:	clz	r3, r3
   34554:	lsr	r3, r3, #5
   34558:	add	r2, r1, r3
   3455c:	add	r2, r2, #1
   34560:	str	r2, [r4, #20]
   34564:	strb	ip, [r1, r3]
   34568:	ldr	r3, [r4, #20]
   3456c:	strb	r0, [r3]
   34570:	ldrb	r2, [r4, #25]
   34574:	ldr	r3, [r4, #20]
   34578:	cmp	r2, #0
   3457c:	addne	r3, r3, #1
   34580:	mov	r0, r3
   34584:	str	r3, [r4, #20]
   34588:	bl	316e8 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   3458c:	ldr	r3, [r4, #20]
   34590:	add	r0, r3, r0
   34594:	str	r0, [r4, #20]
   34598:	b	34470 <flatcc_json_printer_float_field@@Base+0x64>
   3459c:	mov	r2, r5
   345a0:	mov	r1, r6
   345a4:	mov	r0, r4
   345a8:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   345ac:	ldr	r5, [r4, #20]
   345b0:	b	34534 <flatcc_json_printer_float_field@@Base+0x128>
   345b4:	add	r1, r2, #1
   345b8:	mov	r3, #10
   345bc:	str	r1, [r0, #20]
   345c0:	strb	r3, [r2]
   345c4:	ldrb	r7, [r0, #25]
   345c8:	ldr	r2, [r4, #32]
   345cc:	ldr	r1, [r0, #16]
   345d0:	ldr	r0, [r0, #20]
   345d4:	mul	r7, r2, r7
   345d8:	add	r3, r0, r7
   345dc:	cmp	r1, r3
   345e0:	bcs	345f8 <flatcc_json_printer_float_field@@Base+0x1ec>
   345e4:	mov	r1, r7
   345e8:	mov	r0, r4
   345ec:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   345f0:	ldr	r2, [r4, #20]
   345f4:	b	344f0 <flatcc_json_printer_float_field@@Base+0xe4>
   345f8:	mov	r2, r7
   345fc:	mov	r1, #32
   34600:	bl	14594 <memset@plt>
   34604:	ldr	r2, [r4, #20]
   34608:	add	r2, r2, r7
   3460c:	str	r2, [r4, #20]
   34610:	b	344f0 <flatcc_json_printer_float_field@@Base+0xe4>

00034614 <flatcc_json_printer_double_field@@Base>:
   34614:	ldr	ip, [r1, #8]
   34618:	add	r2, r2, #2
   3461c:	lsl	r2, r2, #1
   34620:	strd	r4, [sp, #-24]!	; 0xffffffe8
   34624:	strd	r6, [sp, #8]
   34628:	str	r8, [sp, #16]
   3462c:	str	lr, [sp, #20]
   34630:	cmp	r2, ip
   34634:	vpush	{d8}
   34638:	ldr	r5, [sp, #32]
   3463c:	bge	34690 <flatcc_json_printer_double_field@@Base+0x7c>
   34640:	ldr	ip, [r1, #4]
   34644:	ldrh	ip, [ip, r2]
   34648:	cmp	ip, #0
   3464c:	beq	34690 <flatcc_json_printer_double_field@@Base+0x7c>
   34650:	ldr	r2, [r1]
   34654:	adds	r2, r2, ip
   34658:	beq	34690 <flatcc_json_printer_double_field@@Base+0x7c>
   3465c:	vldr	d8, [r2]
   34660:	vcmp.f64	d0, d8
   34664:	vmrs	APSR_nzcv, fpscr
   34668:	bne	346a0 <flatcc_json_printer_double_field@@Base+0x8c>
   3466c:	ldrb	r2, [r0, #28]
   34670:	cmp	r2, #0
   34674:	beq	346a0 <flatcc_json_printer_double_field@@Base+0x8c>
   34678:	vpop	{d8}
   3467c:	ldrd	r4, [sp]
   34680:	ldrd	r6, [sp, #8]
   34684:	ldr	r8, [sp, #16]
   34688:	add	sp, sp, #20
   3468c:	pop	{pc}		; (ldr pc, [sp], #4)
   34690:	ldrb	r2, [r0, #29]
   34694:	cmp	r2, #0
   34698:	beq	34678 <flatcc_json_printer_double_field@@Base+0x64>
   3469c:	vmov.f64	d8, d0
   346a0:	ldr	ip, [r1, #16]
   346a4:	ldr	r2, [r0, #20]
   346a8:	cmp	ip, #0
   346ac:	add	ip, ip, #1
   346b0:	str	ip, [r1, #16]
   346b4:	beq	346cc <flatcc_json_printer_double_field@@Base+0xb8>
   346b8:	add	ip, r2, #1
   346bc:	mov	r1, #44	; 0x2c
   346c0:	str	ip, [r0, #20]
   346c4:	strb	r1, [r2]
   346c8:	ldr	r2, [r0, #20]
   346cc:	mov	r6, r3
   346d0:	mov	r4, r0
   346d4:	ldrb	r1, [r0, #25]
   346d8:	cmp	r1, #0
   346dc:	bne	347bc <flatcc_json_printer_double_field@@Base+0x1a8>
   346e0:	ldr	r3, [r0, #16]
   346e4:	cmp	r3, r2
   346e8:	bhi	346f8 <flatcc_json_printer_double_field@@Base+0xe4>
   346ec:	ldr	r3, [r0, #44]	; 0x2c
   346f0:	blx	r3
   346f4:	ldr	r2, [r4, #20]
   346f8:	mov	r3, #34	; 0x22
   346fc:	strb	r3, [r2]
   34700:	ldrb	r3, [r4, #26]
   34704:	ldr	r2, [r4, #16]
   34708:	ldr	r0, [r4, #20]
   3470c:	cmp	r3, #0
   34710:	addeq	r0, r0, #1
   34714:	add	r3, r0, r5
   34718:	cmp	r2, r3
   3471c:	str	r0, [r4, #20]
   34720:	bls	347a4 <flatcc_json_printer_double_field@@Base+0x190>
   34724:	mov	r2, r5
   34728:	mov	r1, r6
   3472c:	bl	1451c <memcpy@plt>
   34730:	ldr	r3, [r4, #20]
   34734:	add	r5, r3, r5
   34738:	str	r5, [r4, #20]
   3473c:	mov	r3, #34	; 0x22
   34740:	mov	ip, #58	; 0x3a
   34744:	vmov.f64	d0, d8
   34748:	mov	r0, #32
   3474c:	strb	r3, [r5]
   34750:	ldrb	r3, [r4, #26]
   34754:	ldr	r1, [r4, #20]
   34758:	clz	r3, r3
   3475c:	lsr	r3, r3, #5
   34760:	add	r2, r1, r3
   34764:	add	r2, r2, #1
   34768:	str	r2, [r4, #20]
   3476c:	strb	ip, [r1, r3]
   34770:	ldr	r3, [r4, #20]
   34774:	strb	r0, [r3]
   34778:	ldrb	r2, [r4, #25]
   3477c:	ldr	r3, [r4, #20]
   34780:	cmp	r2, #0
   34784:	addne	r3, r3, #1
   34788:	mov	r0, r3
   3478c:	str	r3, [r4, #20]
   34790:	bl	316e8 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   34794:	ldr	r3, [r4, #20]
   34798:	add	r0, r3, r0
   3479c:	str	r0, [r4, #20]
   347a0:	b	34678 <flatcc_json_printer_double_field@@Base+0x64>
   347a4:	mov	r2, r5
   347a8:	mov	r1, r6
   347ac:	mov	r0, r4
   347b0:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   347b4:	ldr	r5, [r4, #20]
   347b8:	b	3473c <flatcc_json_printer_double_field@@Base+0x128>
   347bc:	add	r1, r2, #1
   347c0:	mov	r3, #10
   347c4:	str	r1, [r0, #20]
   347c8:	strb	r3, [r2]
   347cc:	ldrb	r7, [r0, #25]
   347d0:	ldr	r2, [r4, #32]
   347d4:	ldr	r1, [r0, #16]
   347d8:	ldr	r0, [r0, #20]
   347dc:	mul	r7, r2, r7
   347e0:	add	r3, r0, r7
   347e4:	cmp	r1, r3
   347e8:	bcs	34800 <flatcc_json_printer_double_field@@Base+0x1ec>
   347ec:	mov	r1, r7
   347f0:	mov	r0, r4
   347f4:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   347f8:	ldr	r2, [r4, #20]
   347fc:	b	346f8 <flatcc_json_printer_double_field@@Base+0xe4>
   34800:	mov	r2, r7
   34804:	mov	r1, #32
   34808:	bl	14594 <memset@plt>
   3480c:	ldr	r2, [r4, #20]
   34810:	add	r2, r2, r7
   34814:	str	r2, [r4, #20]
   34818:	b	346f8 <flatcc_json_printer_double_field@@Base+0xe4>

0003481c <flatcc_json_printer_uint8_enum_field@@Base>:
   3481c:	ldr	ip, [r1, #8]
   34820:	add	r2, r2, #2
   34824:	lsl	r2, r2, #1
   34828:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3482c:	strd	r6, [sp, #8]
   34830:	strd	r8, [sp, #16]
   34834:	str	sl, [sp, #24]
   34838:	cmp	r2, ip
   3483c:	str	lr, [sp, #28]
   34840:	ldrb	lr, [sp, #36]	; 0x24
   34844:	ldr	r7, [sp, #32]
   34848:	ldr	r5, [sp, #40]	; 0x28
   3484c:	bge	34994 <flatcc_json_printer_uint8_enum_field@@Base+0x178>
   34850:	ldr	ip, [r1, #4]
   34854:	ldrh	r2, [ip, r2]
   34858:	cmp	r2, #0
   3485c:	beq	34994 <flatcc_json_printer_uint8_enum_field@@Base+0x178>
   34860:	ldr	ip, [r1]
   34864:	cmn	ip, r2
   34868:	beq	34994 <flatcc_json_printer_uint8_enum_field@@Base+0x178>
   3486c:	ldrb	r6, [ip, r2]
   34870:	cmp	lr, r6
   34874:	beq	34a4c <flatcc_json_printer_uint8_enum_field@@Base+0x230>
   34878:	ldr	ip, [r1, #16]
   3487c:	ldr	r2, [r0, #20]
   34880:	cmp	ip, #0
   34884:	add	ip, ip, #1
   34888:	str	ip, [r1, #16]
   3488c:	beq	348a4 <flatcc_json_printer_uint8_enum_field@@Base+0x88>
   34890:	add	ip, r2, #1
   34894:	mov	r1, #44	; 0x2c
   34898:	str	ip, [r0, #20]
   3489c:	strb	r1, [r2]
   348a0:	ldr	r2, [r0, #20]
   348a4:	mov	r8, r3
   348a8:	mov	r4, r0
   348ac:	ldrb	r1, [r0, #25]
   348b0:	cmp	r1, #0
   348b4:	bne	349ec <flatcc_json_printer_uint8_enum_field@@Base+0x1d0>
   348b8:	ldr	r3, [r0, #16]
   348bc:	cmp	r3, r2
   348c0:	bhi	348d0 <flatcc_json_printer_uint8_enum_field@@Base+0xb4>
   348c4:	ldr	r3, [r0, #44]	; 0x2c
   348c8:	blx	r3
   348cc:	ldr	r2, [r4, #20]
   348d0:	mov	r3, #34	; 0x22
   348d4:	strb	r3, [r2]
   348d8:	ldrb	r3, [r4, #26]
   348dc:	ldr	r2, [r4, #16]
   348e0:	ldr	r0, [r4, #20]
   348e4:	cmp	r3, #0
   348e8:	addeq	r0, r0, #1
   348ec:	add	r3, r0, r7
   348f0:	cmp	r2, r3
   348f4:	str	r0, [r4, #20]
   348f8:	bls	349d4 <flatcc_json_printer_uint8_enum_field@@Base+0x1b8>
   348fc:	mov	r2, r7
   34900:	mov	r1, r8
   34904:	bl	1451c <memcpy@plt>
   34908:	ldr	r3, [r4, #20]
   3490c:	add	r7, r3, r7
   34910:	str	r7, [r4, #20]
   34914:	mov	r3, #34	; 0x22
   34918:	mov	ip, #58	; 0x3a
   3491c:	mov	r0, #32
   34920:	strb	r3, [r7]
   34924:	ldrb	r3, [r4, #26]
   34928:	ldr	r1, [r4, #20]
   3492c:	clz	r3, r3
   34930:	lsr	r3, r3, #5
   34934:	add	r2, r1, r3
   34938:	add	r2, r2, #1
   3493c:	str	r2, [r4, #20]
   34940:	strb	ip, [r1, r3]
   34944:	ldr	r3, [r4, #20]
   34948:	strb	r0, [r3]
   3494c:	ldrb	r2, [r4, #25]
   34950:	ldr	r1, [r4, #20]
   34954:	ldrb	r3, [r4, #27]
   34958:	cmp	r2, #0
   3495c:	addne	r1, r1, #1
   34960:	cmp	r3, #0
   34964:	str	r1, [r4, #20]
   34968:	bne	349a8 <flatcc_json_printer_uint8_enum_field@@Base+0x18c>
   3496c:	mov	r1, r6
   34970:	mov	r0, r4
   34974:	ldrd	r6, [sp, #8]
   34978:	mov	r3, r5
   3497c:	ldrd	r4, [sp]
   34980:	ldrd	r8, [sp, #16]
   34984:	ldr	sl, [sp, #24]
   34988:	ldr	lr, [sp, #28]
   3498c:	add	sp, sp, #32
   34990:	bx	r3
   34994:	ldrb	r2, [r0, #29]
   34998:	cmp	r2, #0
   3499c:	beq	349bc <flatcc_json_printer_uint8_enum_field@@Base+0x1a0>
   349a0:	mov	r6, lr
   349a4:	b	34878 <flatcc_json_printer_uint8_enum_field@@Base+0x5c>
   349a8:	mov	r0, r6
   349ac:	bl	312f4 <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   349b0:	ldr	r3, [r4, #20]
   349b4:	add	r0, r3, r0
   349b8:	str	r0, [r4, #20]
   349bc:	ldrd	r4, [sp]
   349c0:	ldrd	r6, [sp, #8]
   349c4:	ldrd	r8, [sp, #16]
   349c8:	ldr	sl, [sp, #24]
   349cc:	add	sp, sp, #28
   349d0:	pop	{pc}		; (ldr pc, [sp], #4)
   349d4:	mov	r2, r7
   349d8:	mov	r1, r8
   349dc:	mov	r0, r4
   349e0:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   349e4:	ldr	r7, [r4, #20]
   349e8:	b	34914 <flatcc_json_printer_uint8_enum_field@@Base+0xf8>
   349ec:	add	r1, r2, #1
   349f0:	mov	r3, #10
   349f4:	str	r1, [r0, #20]
   349f8:	strb	r3, [r2]
   349fc:	ldrb	r3, [r0, #25]
   34a00:	ldr	r2, [r4, #32]
   34a04:	ldr	r1, [r0, #16]
   34a08:	ldr	r0, [r0, #20]
   34a0c:	mul	r9, r2, r3
   34a10:	add	r3, r0, r9
   34a14:	cmp	r1, r3
   34a18:	bcs	34a30 <flatcc_json_printer_uint8_enum_field@@Base+0x214>
   34a1c:	mov	r1, r9
   34a20:	mov	r0, r4
   34a24:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   34a28:	ldr	r2, [r4, #20]
   34a2c:	b	348d0 <flatcc_json_printer_uint8_enum_field@@Base+0xb4>
   34a30:	mov	r2, r9
   34a34:	mov	r1, #32
   34a38:	bl	14594 <memset@plt>
   34a3c:	ldr	r2, [r4, #20]
   34a40:	add	r2, r2, r9
   34a44:	str	r2, [r4, #20]
   34a48:	b	348d0 <flatcc_json_printer_uint8_enum_field@@Base+0xb4>
   34a4c:	ldrb	r2, [r0, #28]
   34a50:	cmp	r2, #0
   34a54:	beq	34878 <flatcc_json_printer_uint8_enum_field@@Base+0x5c>
   34a58:	b	349bc <flatcc_json_printer_uint8_enum_field@@Base+0x1a0>

00034a5c <flatcc_json_printer_uint16_enum_field@@Base>:
   34a5c:	ldr	ip, [r1, #8]
   34a60:	add	r2, r2, #2
   34a64:	lsl	r2, r2, #1
   34a68:	strd	r4, [sp, #-32]!	; 0xffffffe0
   34a6c:	strd	r6, [sp, #8]
   34a70:	strd	r8, [sp, #16]
   34a74:	str	sl, [sp, #24]
   34a78:	cmp	r2, ip
   34a7c:	str	lr, [sp, #28]
   34a80:	ldrh	lr, [sp, #36]	; 0x24
   34a84:	ldr	r7, [sp, #32]
   34a88:	ldr	r5, [sp, #40]	; 0x28
   34a8c:	bge	34bd4 <flatcc_json_printer_uint16_enum_field@@Base+0x178>
   34a90:	ldr	ip, [r1, #4]
   34a94:	ldrh	r2, [ip, r2]
   34a98:	cmp	r2, #0
   34a9c:	beq	34bd4 <flatcc_json_printer_uint16_enum_field@@Base+0x178>
   34aa0:	ldr	ip, [r1]
   34aa4:	cmn	ip, r2
   34aa8:	beq	34bd4 <flatcc_json_printer_uint16_enum_field@@Base+0x178>
   34aac:	ldrh	r6, [ip, r2]
   34ab0:	cmp	lr, r6
   34ab4:	beq	34c8c <flatcc_json_printer_uint16_enum_field@@Base+0x230>
   34ab8:	ldr	ip, [r1, #16]
   34abc:	ldr	r2, [r0, #20]
   34ac0:	cmp	ip, #0
   34ac4:	add	ip, ip, #1
   34ac8:	str	ip, [r1, #16]
   34acc:	beq	34ae4 <flatcc_json_printer_uint16_enum_field@@Base+0x88>
   34ad0:	add	ip, r2, #1
   34ad4:	mov	r1, #44	; 0x2c
   34ad8:	str	ip, [r0, #20]
   34adc:	strb	r1, [r2]
   34ae0:	ldr	r2, [r0, #20]
   34ae4:	mov	r8, r3
   34ae8:	mov	r4, r0
   34aec:	ldrb	r1, [r0, #25]
   34af0:	cmp	r1, #0
   34af4:	bne	34c2c <flatcc_json_printer_uint16_enum_field@@Base+0x1d0>
   34af8:	ldr	r3, [r0, #16]
   34afc:	cmp	r3, r2
   34b00:	bhi	34b10 <flatcc_json_printer_uint16_enum_field@@Base+0xb4>
   34b04:	ldr	r3, [r0, #44]	; 0x2c
   34b08:	blx	r3
   34b0c:	ldr	r2, [r4, #20]
   34b10:	mov	r3, #34	; 0x22
   34b14:	strb	r3, [r2]
   34b18:	ldrb	r3, [r4, #26]
   34b1c:	ldr	r2, [r4, #16]
   34b20:	ldr	r0, [r4, #20]
   34b24:	cmp	r3, #0
   34b28:	addeq	r0, r0, #1
   34b2c:	add	r3, r0, r7
   34b30:	cmp	r2, r3
   34b34:	str	r0, [r4, #20]
   34b38:	bls	34c14 <flatcc_json_printer_uint16_enum_field@@Base+0x1b8>
   34b3c:	mov	r2, r7
   34b40:	mov	r1, r8
   34b44:	bl	1451c <memcpy@plt>
   34b48:	ldr	r3, [r4, #20]
   34b4c:	add	r7, r3, r7
   34b50:	str	r7, [r4, #20]
   34b54:	mov	r3, #34	; 0x22
   34b58:	mov	ip, #58	; 0x3a
   34b5c:	mov	r0, #32
   34b60:	strb	r3, [r7]
   34b64:	ldrb	r3, [r4, #26]
   34b68:	ldr	r1, [r4, #20]
   34b6c:	clz	r3, r3
   34b70:	lsr	r3, r3, #5
   34b74:	add	r2, r1, r3
   34b78:	add	r2, r2, #1
   34b7c:	str	r2, [r4, #20]
   34b80:	strb	ip, [r1, r3]
   34b84:	ldr	r3, [r4, #20]
   34b88:	strb	r0, [r3]
   34b8c:	ldrb	r2, [r4, #25]
   34b90:	ldr	r1, [r4, #20]
   34b94:	ldrb	r3, [r4, #27]
   34b98:	cmp	r2, #0
   34b9c:	addne	r1, r1, #1
   34ba0:	cmp	r3, #0
   34ba4:	str	r1, [r4, #20]
   34ba8:	bne	34be8 <flatcc_json_printer_uint16_enum_field@@Base+0x18c>
   34bac:	mov	r1, r6
   34bb0:	mov	r0, r4
   34bb4:	ldrd	r6, [sp, #8]
   34bb8:	mov	r3, r5
   34bbc:	ldrd	r4, [sp]
   34bc0:	ldrd	r8, [sp, #16]
   34bc4:	ldr	sl, [sp, #24]
   34bc8:	ldr	lr, [sp, #28]
   34bcc:	add	sp, sp, #32
   34bd0:	bx	r3
   34bd4:	ldrb	r2, [r0, #29]
   34bd8:	cmp	r2, #0
   34bdc:	beq	34bfc <flatcc_json_printer_uint16_enum_field@@Base+0x1a0>
   34be0:	mov	r6, lr
   34be4:	b	34ab8 <flatcc_json_printer_uint16_enum_field@@Base+0x5c>
   34be8:	mov	r0, r6
   34bec:	bl	30100 <flatcc_json_parser_struct_as_root@@Base+0x4>
   34bf0:	ldr	r3, [r4, #20]
   34bf4:	add	r0, r3, r0
   34bf8:	str	r0, [r4, #20]
   34bfc:	ldrd	r4, [sp]
   34c00:	ldrd	r6, [sp, #8]
   34c04:	ldrd	r8, [sp, #16]
   34c08:	ldr	sl, [sp, #24]
   34c0c:	add	sp, sp, #28
   34c10:	pop	{pc}		; (ldr pc, [sp], #4)
   34c14:	mov	r2, r7
   34c18:	mov	r1, r8
   34c1c:	mov	r0, r4
   34c20:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   34c24:	ldr	r7, [r4, #20]
   34c28:	b	34b54 <flatcc_json_printer_uint16_enum_field@@Base+0xf8>
   34c2c:	add	r1, r2, #1
   34c30:	mov	r3, #10
   34c34:	str	r1, [r0, #20]
   34c38:	strb	r3, [r2]
   34c3c:	ldrb	r3, [r0, #25]
   34c40:	ldr	r2, [r4, #32]
   34c44:	ldr	r1, [r0, #16]
   34c48:	ldr	r0, [r0, #20]
   34c4c:	mul	r9, r2, r3
   34c50:	add	r3, r0, r9
   34c54:	cmp	r1, r3
   34c58:	bcs	34c70 <flatcc_json_printer_uint16_enum_field@@Base+0x214>
   34c5c:	mov	r1, r9
   34c60:	mov	r0, r4
   34c64:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   34c68:	ldr	r2, [r4, #20]
   34c6c:	b	34b10 <flatcc_json_printer_uint16_enum_field@@Base+0xb4>
   34c70:	mov	r2, r9
   34c74:	mov	r1, #32
   34c78:	bl	14594 <memset@plt>
   34c7c:	ldr	r2, [r4, #20]
   34c80:	add	r2, r2, r9
   34c84:	str	r2, [r4, #20]
   34c88:	b	34b10 <flatcc_json_printer_uint16_enum_field@@Base+0xb4>
   34c8c:	ldrb	r2, [r0, #28]
   34c90:	cmp	r2, #0
   34c94:	beq	34ab8 <flatcc_json_printer_uint16_enum_field@@Base+0x5c>
   34c98:	b	34bfc <flatcc_json_printer_uint16_enum_field@@Base+0x1a0>

00034c9c <flatcc_json_printer_uint32_enum_field@@Base>:
   34c9c:	ldr	ip, [r1, #8]
   34ca0:	add	r2, r2, #2
   34ca4:	lsl	r2, r2, #1
   34ca8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   34cac:	strd	r6, [sp, #8]
   34cb0:	strd	r8, [sp, #16]
   34cb4:	str	sl, [sp, #24]
   34cb8:	cmp	r2, ip
   34cbc:	str	lr, [sp, #28]
   34cc0:	ldr	r5, [sp, #32]
   34cc4:	ldr	lr, [sp, #36]	; 0x24
   34cc8:	ldr	r6, [sp, #40]	; 0x28
   34ccc:	bge	34e14 <flatcc_json_printer_uint32_enum_field@@Base+0x178>
   34cd0:	ldr	ip, [r1, #4]
   34cd4:	ldrh	r2, [ip, r2]
   34cd8:	cmp	r2, #0
   34cdc:	beq	34e14 <flatcc_json_printer_uint32_enum_field@@Base+0x178>
   34ce0:	ldr	ip, [r1]
   34ce4:	cmn	ip, r2
   34ce8:	beq	34e14 <flatcc_json_printer_uint32_enum_field@@Base+0x178>
   34cec:	ldr	r7, [ip, r2]
   34cf0:	cmp	lr, r7
   34cf4:	beq	34ecc <flatcc_json_printer_uint32_enum_field@@Base+0x230>
   34cf8:	ldr	ip, [r1, #16]
   34cfc:	ldr	r2, [r0, #20]
   34d00:	cmp	ip, #0
   34d04:	add	ip, ip, #1
   34d08:	str	ip, [r1, #16]
   34d0c:	beq	34d24 <flatcc_json_printer_uint32_enum_field@@Base+0x88>
   34d10:	add	ip, r2, #1
   34d14:	mov	r1, #44	; 0x2c
   34d18:	str	ip, [r0, #20]
   34d1c:	strb	r1, [r2]
   34d20:	ldr	r2, [r0, #20]
   34d24:	mov	r8, r3
   34d28:	mov	r4, r0
   34d2c:	ldrb	r1, [r0, #25]
   34d30:	cmp	r1, #0
   34d34:	bne	34e6c <flatcc_json_printer_uint32_enum_field@@Base+0x1d0>
   34d38:	ldr	r3, [r0, #16]
   34d3c:	cmp	r3, r2
   34d40:	bhi	34d50 <flatcc_json_printer_uint32_enum_field@@Base+0xb4>
   34d44:	ldr	r3, [r0, #44]	; 0x2c
   34d48:	blx	r3
   34d4c:	ldr	r2, [r4, #20]
   34d50:	mov	r3, #34	; 0x22
   34d54:	strb	r3, [r2]
   34d58:	ldrb	r3, [r4, #26]
   34d5c:	ldr	r2, [r4, #16]
   34d60:	ldr	r0, [r4, #20]
   34d64:	cmp	r3, #0
   34d68:	addeq	r0, r0, #1
   34d6c:	add	r3, r0, r5
   34d70:	cmp	r2, r3
   34d74:	str	r0, [r4, #20]
   34d78:	bls	34e54 <flatcc_json_printer_uint32_enum_field@@Base+0x1b8>
   34d7c:	mov	r2, r5
   34d80:	mov	r1, r8
   34d84:	bl	1451c <memcpy@plt>
   34d88:	ldr	r3, [r4, #20]
   34d8c:	add	r5, r3, r5
   34d90:	str	r5, [r4, #20]
   34d94:	mov	r3, #34	; 0x22
   34d98:	mov	ip, #58	; 0x3a
   34d9c:	mov	r0, #32
   34da0:	strb	r3, [r5]
   34da4:	ldrb	r3, [r4, #26]
   34da8:	ldr	r1, [r4, #20]
   34dac:	clz	r3, r3
   34db0:	lsr	r3, r3, #5
   34db4:	add	r2, r1, r3
   34db8:	add	r2, r2, #1
   34dbc:	str	r2, [r4, #20]
   34dc0:	strb	ip, [r1, r3]
   34dc4:	ldr	r3, [r4, #20]
   34dc8:	strb	r0, [r3]
   34dcc:	ldrb	r2, [r4, #25]
   34dd0:	ldr	r1, [r4, #20]
   34dd4:	ldrb	r3, [r4, #27]
   34dd8:	cmp	r2, #0
   34ddc:	addne	r1, r1, #1
   34de0:	cmp	r3, #0
   34de4:	str	r1, [r4, #20]
   34de8:	bne	34e28 <flatcc_json_printer_uint32_enum_field@@Base+0x18c>
   34dec:	mov	r1, r7
   34df0:	mov	r0, r4
   34df4:	ldrd	r4, [sp]
   34df8:	mov	r3, r6
   34dfc:	ldrd	r6, [sp, #8]
   34e00:	ldrd	r8, [sp, #16]
   34e04:	ldr	sl, [sp, #24]
   34e08:	ldr	lr, [sp, #28]
   34e0c:	add	sp, sp, #32
   34e10:	bx	r3
   34e14:	ldrb	r2, [r0, #29]
   34e18:	cmp	r2, #0
   34e1c:	beq	34e3c <flatcc_json_printer_uint32_enum_field@@Base+0x1a0>
   34e20:	mov	r7, lr
   34e24:	b	34cf8 <flatcc_json_printer_uint32_enum_field@@Base+0x5c>
   34e28:	mov	r0, r7
   34e2c:	bl	30268 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   34e30:	ldr	r3, [r4, #20]
   34e34:	add	r0, r3, r0
   34e38:	str	r0, [r4, #20]
   34e3c:	ldrd	r4, [sp]
   34e40:	ldrd	r6, [sp, #8]
   34e44:	ldrd	r8, [sp, #16]
   34e48:	ldr	sl, [sp, #24]
   34e4c:	add	sp, sp, #28
   34e50:	pop	{pc}		; (ldr pc, [sp], #4)
   34e54:	mov	r2, r5
   34e58:	mov	r1, r8
   34e5c:	mov	r0, r4
   34e60:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   34e64:	ldr	r5, [r4, #20]
   34e68:	b	34d94 <flatcc_json_printer_uint32_enum_field@@Base+0xf8>
   34e6c:	add	r1, r2, #1
   34e70:	mov	r3, #10
   34e74:	str	r1, [r0, #20]
   34e78:	strb	r3, [r2]
   34e7c:	ldrb	r3, [r0, #25]
   34e80:	ldr	r2, [r4, #32]
   34e84:	ldr	r1, [r0, #16]
   34e88:	ldr	r0, [r0, #20]
   34e8c:	mul	r9, r2, r3
   34e90:	add	r3, r0, r9
   34e94:	cmp	r1, r3
   34e98:	bcs	34eb0 <flatcc_json_printer_uint32_enum_field@@Base+0x214>
   34e9c:	mov	r1, r9
   34ea0:	mov	r0, r4
   34ea4:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   34ea8:	ldr	r2, [r4, #20]
   34eac:	b	34d50 <flatcc_json_printer_uint32_enum_field@@Base+0xb4>
   34eb0:	mov	r2, r9
   34eb4:	mov	r1, #32
   34eb8:	bl	14594 <memset@plt>
   34ebc:	ldr	r2, [r4, #20]
   34ec0:	add	r2, r2, r9
   34ec4:	str	r2, [r4, #20]
   34ec8:	b	34d50 <flatcc_json_printer_uint32_enum_field@@Base+0xb4>
   34ecc:	ldrb	r2, [r0, #28]
   34ed0:	cmp	r2, #0
   34ed4:	beq	34cf8 <flatcc_json_printer_uint32_enum_field@@Base+0x5c>
   34ed8:	b	34e3c <flatcc_json_printer_uint32_enum_field@@Base+0x1a0>

00034edc <flatcc_json_printer_uint64_enum_field@@Base>:
   34edc:	ldr	ip, [r1, #8]
   34ee0:	add	r2, r2, #2
   34ee4:	lsl	r2, r2, #1
   34ee8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   34eec:	strd	r6, [sp, #8]
   34ef0:	strd	r8, [sp, #16]
   34ef4:	strd	sl, [sp, #24]
   34ef8:	cmp	r2, ip
   34efc:	str	lr, [sp, #32]
   34f00:	sub	sp, sp, #4
   34f04:	ldr	r8, [sp, #40]	; 0x28
   34f08:	ldrd	sl, [sp, #48]	; 0x30
   34f0c:	ldr	r5, [sp, #56]	; 0x38
   34f10:	bge	35064 <flatcc_json_printer_uint64_enum_field@@Base+0x188>
   34f14:	ldr	ip, [r1, #4]
   34f18:	ldrh	r2, [ip, r2]
   34f1c:	cmp	r2, #0
   34f20:	beq	35064 <flatcc_json_printer_uint64_enum_field@@Base+0x188>
   34f24:	ldr	ip, [r1]
   34f28:	cmn	ip, r2
   34f2c:	beq	35064 <flatcc_json_printer_uint64_enum_field@@Base+0x188>
   34f30:	ldrd	r6, [ip, r2]
   34f34:	cmp	fp, r7
   34f38:	cmpeq	sl, r6
   34f3c:	beq	35128 <flatcc_json_printer_uint64_enum_field@@Base+0x24c>
   34f40:	ldr	ip, [r1, #16]
   34f44:	ldr	r2, [r0, #20]
   34f48:	cmp	ip, #0
   34f4c:	add	ip, ip, #1
   34f50:	str	ip, [r1, #16]
   34f54:	beq	34f6c <flatcc_json_printer_uint64_enum_field@@Base+0x90>
   34f58:	add	ip, r2, #1
   34f5c:	mov	r1, #44	; 0x2c
   34f60:	str	ip, [r0, #20]
   34f64:	strb	r1, [r2]
   34f68:	ldr	r2, [r0, #20]
   34f6c:	mov	r9, r3
   34f70:	mov	r4, r0
   34f74:	ldrb	r1, [r0, #25]
   34f78:	cmp	r1, #0
   34f7c:	bne	350c8 <flatcc_json_printer_uint64_enum_field@@Base+0x1ec>
   34f80:	ldr	r3, [r0, #16]
   34f84:	cmp	r3, r2
   34f88:	bhi	34f98 <flatcc_json_printer_uint64_enum_field@@Base+0xbc>
   34f8c:	ldr	r3, [r0, #44]	; 0x2c
   34f90:	blx	r3
   34f94:	ldr	r2, [r4, #20]
   34f98:	mov	r3, #34	; 0x22
   34f9c:	strb	r3, [r2]
   34fa0:	ldrb	r3, [r4, #26]
   34fa4:	ldr	r2, [r4, #16]
   34fa8:	ldr	r0, [r4, #20]
   34fac:	cmp	r3, #0
   34fb0:	addeq	r0, r0, #1
   34fb4:	add	r3, r0, r8
   34fb8:	cmp	r2, r3
   34fbc:	str	r0, [r4, #20]
   34fc0:	bls	350b0 <flatcc_json_printer_uint64_enum_field@@Base+0x1d4>
   34fc4:	mov	r2, r8
   34fc8:	mov	r1, r9
   34fcc:	bl	1451c <memcpy@plt>
   34fd0:	ldr	r3, [r4, #20]
   34fd4:	add	r8, r3, r8
   34fd8:	str	r8, [r4, #20]
   34fdc:	mov	r3, #34	; 0x22
   34fe0:	mov	ip, #58	; 0x3a
   34fe4:	mov	r0, #32
   34fe8:	strb	r3, [r8]
   34fec:	ldrb	r3, [r4, #26]
   34ff0:	ldr	r1, [r4, #20]
   34ff4:	clz	r3, r3
   34ff8:	lsr	r3, r3, #5
   34ffc:	add	r2, r1, r3
   35000:	add	r2, r2, #1
   35004:	str	r2, [r4, #20]
   35008:	strb	ip, [r1, r3]
   3500c:	ldr	r3, [r4, #20]
   35010:	strb	r0, [r3]
   35014:	ldrb	r1, [r4, #25]
   35018:	ldr	r2, [r4, #20]
   3501c:	ldrb	r3, [r4, #27]
   35020:	cmp	r1, #0
   35024:	addne	r2, r2, #1
   35028:	cmp	r3, #0
   3502c:	str	r2, [r4, #20]
   35030:	bne	3507c <flatcc_json_printer_uint64_enum_field@@Base+0x1a0>
   35034:	mov	r2, r6
   35038:	mov	r3, r7
   3503c:	mov	r0, r4
   35040:	mov	r1, r5
   35044:	add	sp, sp, #4
   35048:	ldrd	r4, [sp]
   3504c:	ldrd	r6, [sp, #8]
   35050:	ldrd	r8, [sp, #16]
   35054:	ldrd	sl, [sp, #24]
   35058:	ldr	lr, [sp, #32]
   3505c:	add	sp, sp, #36	; 0x24
   35060:	bx	r1
   35064:	ldrb	r2, [r0, #29]
   35068:	cmp	r2, #0
   3506c:	beq	35094 <flatcc_json_printer_uint64_enum_field@@Base+0x1b8>
   35070:	mov	r6, sl
   35074:	mov	r7, fp
   35078:	b	34f40 <flatcc_json_printer_uint64_enum_field@@Base+0x64>
   3507c:	mov	r0, r6
   35080:	mov	r1, r7
   35084:	bl	30594 <flatcc_json_parser_struct_as_root@@Base+0x498>
   35088:	ldr	r3, [r4, #20]
   3508c:	add	r0, r3, r0
   35090:	str	r0, [r4, #20]
   35094:	add	sp, sp, #4
   35098:	ldrd	r4, [sp]
   3509c:	ldrd	r6, [sp, #8]
   350a0:	ldrd	r8, [sp, #16]
   350a4:	ldrd	sl, [sp, #24]
   350a8:	add	sp, sp, #32
   350ac:	pop	{pc}		; (ldr pc, [sp], #4)
   350b0:	mov	r2, r8
   350b4:	mov	r1, r9
   350b8:	mov	r0, r4
   350bc:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   350c0:	ldr	r8, [r4, #20]
   350c4:	b	34fdc <flatcc_json_printer_uint64_enum_field@@Base+0x100>
   350c8:	add	r1, r2, #1
   350cc:	mov	r3, #10
   350d0:	str	r1, [r0, #20]
   350d4:	strb	r3, [r2]
   350d8:	ldrb	r3, [r0, #25]
   350dc:	ldr	r2, [r4, #32]
   350e0:	ldr	r1, [r0, #16]
   350e4:	ldr	r0, [r0, #20]
   350e8:	mul	sl, r2, r3
   350ec:	add	r3, r0, sl
   350f0:	cmp	r1, r3
   350f4:	bcs	3510c <flatcc_json_printer_uint64_enum_field@@Base+0x230>
   350f8:	mov	r1, sl
   350fc:	mov	r0, r4
   35100:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   35104:	ldr	r2, [r4, #20]
   35108:	b	34f98 <flatcc_json_printer_uint64_enum_field@@Base+0xbc>
   3510c:	mov	r2, sl
   35110:	mov	r1, #32
   35114:	bl	14594 <memset@plt>
   35118:	ldr	r2, [r4, #20]
   3511c:	add	r2, r2, sl
   35120:	str	r2, [r4, #20]
   35124:	b	34f98 <flatcc_json_printer_uint64_enum_field@@Base+0xbc>
   35128:	ldrb	r2, [r0, #28]
   3512c:	cmp	r2, #0
   35130:	beq	34f40 <flatcc_json_printer_uint64_enum_field@@Base+0x64>
   35134:	b	35094 <flatcc_json_printer_uint64_enum_field@@Base+0x1b8>

00035138 <flatcc_json_printer_int8_enum_field@@Base>:
   35138:	ldr	ip, [r1, #8]
   3513c:	add	r2, r2, #2
   35140:	lsl	r2, r2, #1
   35144:	strd	r4, [sp, #-32]!	; 0xffffffe0
   35148:	strd	r6, [sp, #8]
   3514c:	strd	r8, [sp, #16]
   35150:	str	sl, [sp, #24]
   35154:	cmp	r2, ip
   35158:	str	lr, [sp, #28]
   3515c:	ldrsb	lr, [sp, #36]	; 0x24
   35160:	ldr	r7, [sp, #32]
   35164:	ldr	r6, [sp, #40]	; 0x28
   35168:	bge	352dc <flatcc_json_printer_int8_enum_field@@Base+0x1a4>
   3516c:	ldr	ip, [r1, #4]
   35170:	ldrh	r2, [ip, r2]
   35174:	cmp	r2, #0
   35178:	beq	352dc <flatcc_json_printer_int8_enum_field@@Base+0x1a4>
   3517c:	ldr	ip, [r1]
   35180:	cmn	ip, r2
   35184:	beq	352dc <flatcc_json_printer_int8_enum_field@@Base+0x1a4>
   35188:	ldrsb	r5, [ip, r2]
   3518c:	cmp	lr, r5
   35190:	beq	35390 <flatcc_json_printer_int8_enum_field@@Base+0x258>
   35194:	ldr	ip, [r1, #16]
   35198:	ldr	r2, [r0, #20]
   3519c:	cmp	ip, #0
   351a0:	add	ip, ip, #1
   351a4:	str	ip, [r1, #16]
   351a8:	beq	351c0 <flatcc_json_printer_int8_enum_field@@Base+0x88>
   351ac:	add	ip, r2, #1
   351b0:	mov	r1, #44	; 0x2c
   351b4:	str	ip, [r0, #20]
   351b8:	strb	r1, [r2]
   351bc:	ldr	r2, [r0, #20]
   351c0:	mov	r8, r3
   351c4:	mov	r4, r0
   351c8:	ldrb	r1, [r0, #25]
   351cc:	cmp	r1, #0
   351d0:	bne	35330 <flatcc_json_printer_int8_enum_field@@Base+0x1f8>
   351d4:	ldr	r3, [r0, #16]
   351d8:	cmp	r3, r2
   351dc:	bhi	351ec <flatcc_json_printer_int8_enum_field@@Base+0xb4>
   351e0:	ldr	r3, [r0, #44]	; 0x2c
   351e4:	blx	r3
   351e8:	ldr	r2, [r4, #20]
   351ec:	mov	r3, #34	; 0x22
   351f0:	strb	r3, [r2]
   351f4:	ldrb	r3, [r4, #26]
   351f8:	ldr	r2, [r4, #16]
   351fc:	ldr	r0, [r4, #20]
   35200:	cmp	r3, #0
   35204:	addeq	r0, r0, #1
   35208:	add	r3, r0, r7
   3520c:	cmp	r2, r3
   35210:	str	r0, [r4, #20]
   35214:	bls	35318 <flatcc_json_printer_int8_enum_field@@Base+0x1e0>
   35218:	mov	r2, r7
   3521c:	mov	r1, r8
   35220:	bl	1451c <memcpy@plt>
   35224:	ldr	r3, [r4, #20]
   35228:	add	r7, r3, r7
   3522c:	str	r7, [r4, #20]
   35230:	mov	r3, #34	; 0x22
   35234:	mov	ip, #58	; 0x3a
   35238:	mov	r0, #32
   3523c:	strb	r3, [r7]
   35240:	ldrb	r3, [r4, #26]
   35244:	ldr	r1, [r4, #20]
   35248:	clz	r3, r3
   3524c:	lsr	r3, r3, #5
   35250:	add	r2, r1, r3
   35254:	add	r2, r2, #1
   35258:	str	r2, [r4, #20]
   3525c:	strb	ip, [r1, r3]
   35260:	ldr	r3, [r4, #20]
   35264:	strb	r0, [r3]
   35268:	ldrb	r3, [r4, #25]
   3526c:	ldr	r2, [r4, #20]
   35270:	ldrb	r0, [r4, #27]
   35274:	adds	r3, r3, #0
   35278:	movne	r3, #1
   3527c:	add	r1, r2, r3
   35280:	cmp	r0, #0
   35284:	str	r1, [r4, #20]
   35288:	beq	352f0 <flatcc_json_printer_int8_enum_field@@Base+0x1b8>
   3528c:	cmp	r5, #0
   35290:	lsr	r6, r5, #31
   35294:	uxtb	r0, r5
   35298:	bge	352b0 <flatcc_json_printer_int8_enum_field@@Base+0x178>
   3529c:	rsb	r0, r0, #0
   352a0:	mov	ip, #45	; 0x2d
   352a4:	add	r1, r1, #1
   352a8:	uxtb	r0, r0
   352ac:	strb	ip, [r2, r3]
   352b0:	bl	312f4 <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   352b4:	ldr	r3, [r4, #20]
   352b8:	add	r0, r6, r0
   352bc:	add	r3, r3, r0
   352c0:	str	r3, [r4, #20]
   352c4:	ldrd	r4, [sp]
   352c8:	ldrd	r6, [sp, #8]
   352cc:	ldrd	r8, [sp, #16]
   352d0:	ldr	sl, [sp, #24]
   352d4:	add	sp, sp, #28
   352d8:	pop	{pc}		; (ldr pc, [sp], #4)
   352dc:	ldrb	r2, [r0, #29]
   352e0:	cmp	r2, #0
   352e4:	beq	352c4 <flatcc_json_printer_int8_enum_field@@Base+0x18c>
   352e8:	mov	r5, lr
   352ec:	b	35194 <flatcc_json_printer_int8_enum_field@@Base+0x5c>
   352f0:	mov	r1, r5
   352f4:	mov	r0, r4
   352f8:	ldrd	r4, [sp]
   352fc:	mov	r3, r6
   35300:	ldrd	r6, [sp, #8]
   35304:	ldrd	r8, [sp, #16]
   35308:	ldr	sl, [sp, #24]
   3530c:	ldr	lr, [sp, #28]
   35310:	add	sp, sp, #32
   35314:	bx	r3
   35318:	mov	r2, r7
   3531c:	mov	r1, r8
   35320:	mov	r0, r4
   35324:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   35328:	ldr	r7, [r4, #20]
   3532c:	b	35230 <flatcc_json_printer_int8_enum_field@@Base+0xf8>
   35330:	add	r1, r2, #1
   35334:	mov	r3, #10
   35338:	str	r1, [r0, #20]
   3533c:	strb	r3, [r2]
   35340:	ldrb	r3, [r0, #25]
   35344:	ldr	r2, [r4, #32]
   35348:	ldr	r1, [r0, #16]
   3534c:	ldr	r0, [r0, #20]
   35350:	mul	r9, r2, r3
   35354:	add	r3, r0, r9
   35358:	cmp	r1, r3
   3535c:	bcs	35374 <flatcc_json_printer_int8_enum_field@@Base+0x23c>
   35360:	mov	r1, r9
   35364:	mov	r0, r4
   35368:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3536c:	ldr	r2, [r4, #20]
   35370:	b	351ec <flatcc_json_printer_int8_enum_field@@Base+0xb4>
   35374:	mov	r2, r9
   35378:	mov	r1, #32
   3537c:	bl	14594 <memset@plt>
   35380:	ldr	r2, [r4, #20]
   35384:	add	r2, r2, r9
   35388:	str	r2, [r4, #20]
   3538c:	b	351ec <flatcc_json_printer_int8_enum_field@@Base+0xb4>
   35390:	ldrb	r2, [r0, #28]
   35394:	cmp	r2, #0
   35398:	beq	35194 <flatcc_json_printer_int8_enum_field@@Base+0x5c>
   3539c:	b	352c4 <flatcc_json_printer_int8_enum_field@@Base+0x18c>

000353a0 <flatcc_json_printer_int16_enum_field@@Base>:
   353a0:	ldr	ip, [r1, #8]
   353a4:	add	r2, r2, #2
   353a8:	lsl	r2, r2, #1
   353ac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   353b0:	strd	r6, [sp, #8]
   353b4:	strd	r8, [sp, #16]
   353b8:	str	sl, [sp, #24]
   353bc:	cmp	r2, ip
   353c0:	str	lr, [sp, #28]
   353c4:	ldrsh	lr, [sp, #36]	; 0x24
   353c8:	ldr	r7, [sp, #32]
   353cc:	ldr	r6, [sp, #40]	; 0x28
   353d0:	bge	35544 <flatcc_json_printer_int16_enum_field@@Base+0x1a4>
   353d4:	ldr	ip, [r1, #4]
   353d8:	ldrh	r2, [ip, r2]
   353dc:	cmp	r2, #0
   353e0:	beq	35544 <flatcc_json_printer_int16_enum_field@@Base+0x1a4>
   353e4:	ldr	ip, [r1]
   353e8:	cmn	ip, r2
   353ec:	beq	35544 <flatcc_json_printer_int16_enum_field@@Base+0x1a4>
   353f0:	ldrsh	r5, [ip, r2]
   353f4:	cmp	lr, r5
   353f8:	beq	355f8 <flatcc_json_printer_int16_enum_field@@Base+0x258>
   353fc:	ldr	ip, [r1, #16]
   35400:	ldr	r2, [r0, #20]
   35404:	cmp	ip, #0
   35408:	add	ip, ip, #1
   3540c:	str	ip, [r1, #16]
   35410:	beq	35428 <flatcc_json_printer_int16_enum_field@@Base+0x88>
   35414:	add	ip, r2, #1
   35418:	mov	r1, #44	; 0x2c
   3541c:	str	ip, [r0, #20]
   35420:	strb	r1, [r2]
   35424:	ldr	r2, [r0, #20]
   35428:	mov	r8, r3
   3542c:	mov	r4, r0
   35430:	ldrb	r1, [r0, #25]
   35434:	cmp	r1, #0
   35438:	bne	35598 <flatcc_json_printer_int16_enum_field@@Base+0x1f8>
   3543c:	ldr	r3, [r0, #16]
   35440:	cmp	r3, r2
   35444:	bhi	35454 <flatcc_json_printer_int16_enum_field@@Base+0xb4>
   35448:	ldr	r3, [r0, #44]	; 0x2c
   3544c:	blx	r3
   35450:	ldr	r2, [r4, #20]
   35454:	mov	r3, #34	; 0x22
   35458:	strb	r3, [r2]
   3545c:	ldrb	r3, [r4, #26]
   35460:	ldr	r2, [r4, #16]
   35464:	ldr	r0, [r4, #20]
   35468:	cmp	r3, #0
   3546c:	addeq	r0, r0, #1
   35470:	add	r3, r0, r7
   35474:	cmp	r2, r3
   35478:	str	r0, [r4, #20]
   3547c:	bls	35580 <flatcc_json_printer_int16_enum_field@@Base+0x1e0>
   35480:	mov	r2, r7
   35484:	mov	r1, r8
   35488:	bl	1451c <memcpy@plt>
   3548c:	ldr	r3, [r4, #20]
   35490:	add	r7, r3, r7
   35494:	str	r7, [r4, #20]
   35498:	mov	r3, #34	; 0x22
   3549c:	mov	ip, #58	; 0x3a
   354a0:	mov	r0, #32
   354a4:	strb	r3, [r7]
   354a8:	ldrb	r3, [r4, #26]
   354ac:	ldr	r1, [r4, #20]
   354b0:	clz	r3, r3
   354b4:	lsr	r3, r3, #5
   354b8:	add	r2, r1, r3
   354bc:	add	r2, r2, #1
   354c0:	str	r2, [r4, #20]
   354c4:	strb	ip, [r1, r3]
   354c8:	ldr	r3, [r4, #20]
   354cc:	strb	r0, [r3]
   354d0:	ldrb	r3, [r4, #25]
   354d4:	ldr	r2, [r4, #20]
   354d8:	ldrb	r0, [r4, #27]
   354dc:	adds	r3, r3, #0
   354e0:	movne	r3, #1
   354e4:	add	r1, r2, r3
   354e8:	cmp	r0, #0
   354ec:	str	r1, [r4, #20]
   354f0:	beq	35558 <flatcc_json_printer_int16_enum_field@@Base+0x1b8>
   354f4:	cmp	r5, #0
   354f8:	lsr	r6, r5, #31
   354fc:	uxth	r0, r5
   35500:	bge	35518 <flatcc_json_printer_int16_enum_field@@Base+0x178>
   35504:	rsb	r0, r0, #0
   35508:	mov	ip, #45	; 0x2d
   3550c:	add	r1, r1, #1
   35510:	uxth	r0, r0
   35514:	strb	ip, [r2, r3]
   35518:	bl	30100 <flatcc_json_parser_struct_as_root@@Base+0x4>
   3551c:	ldr	r3, [r4, #20]
   35520:	add	r0, r6, r0
   35524:	add	r3, r3, r0
   35528:	str	r3, [r4, #20]
   3552c:	ldrd	r4, [sp]
   35530:	ldrd	r6, [sp, #8]
   35534:	ldrd	r8, [sp, #16]
   35538:	ldr	sl, [sp, #24]
   3553c:	add	sp, sp, #28
   35540:	pop	{pc}		; (ldr pc, [sp], #4)
   35544:	ldrb	r2, [r0, #29]
   35548:	cmp	r2, #0
   3554c:	beq	3552c <flatcc_json_printer_int16_enum_field@@Base+0x18c>
   35550:	mov	r5, lr
   35554:	b	353fc <flatcc_json_printer_int16_enum_field@@Base+0x5c>
   35558:	mov	r1, r5
   3555c:	mov	r0, r4
   35560:	ldrd	r4, [sp]
   35564:	mov	r3, r6
   35568:	ldrd	r6, [sp, #8]
   3556c:	ldrd	r8, [sp, #16]
   35570:	ldr	sl, [sp, #24]
   35574:	ldr	lr, [sp, #28]
   35578:	add	sp, sp, #32
   3557c:	bx	r3
   35580:	mov	r2, r7
   35584:	mov	r1, r8
   35588:	mov	r0, r4
   3558c:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   35590:	ldr	r7, [r4, #20]
   35594:	b	35498 <flatcc_json_printer_int16_enum_field@@Base+0xf8>
   35598:	add	r1, r2, #1
   3559c:	mov	r3, #10
   355a0:	str	r1, [r0, #20]
   355a4:	strb	r3, [r2]
   355a8:	ldrb	r3, [r0, #25]
   355ac:	ldr	r2, [r4, #32]
   355b0:	ldr	r1, [r0, #16]
   355b4:	ldr	r0, [r0, #20]
   355b8:	mul	r9, r2, r3
   355bc:	add	r3, r0, r9
   355c0:	cmp	r1, r3
   355c4:	bcs	355dc <flatcc_json_printer_int16_enum_field@@Base+0x23c>
   355c8:	mov	r1, r9
   355cc:	mov	r0, r4
   355d0:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   355d4:	ldr	r2, [r4, #20]
   355d8:	b	35454 <flatcc_json_printer_int16_enum_field@@Base+0xb4>
   355dc:	mov	r2, r9
   355e0:	mov	r1, #32
   355e4:	bl	14594 <memset@plt>
   355e8:	ldr	r2, [r4, #20]
   355ec:	add	r2, r2, r9
   355f0:	str	r2, [r4, #20]
   355f4:	b	35454 <flatcc_json_printer_int16_enum_field@@Base+0xb4>
   355f8:	ldrb	r2, [r0, #28]
   355fc:	cmp	r2, #0
   35600:	beq	353fc <flatcc_json_printer_int16_enum_field@@Base+0x5c>
   35604:	b	3552c <flatcc_json_printer_int16_enum_field@@Base+0x18c>

00035608 <flatcc_json_printer_int32_enum_field@@Base>:
   35608:	ldr	ip, [r1, #8]
   3560c:	add	r2, r2, #2
   35610:	lsl	r2, r2, #1
   35614:	strd	r4, [sp, #-32]!	; 0xffffffe0
   35618:	strd	r6, [sp, #8]
   3561c:	strd	r8, [sp, #16]
   35620:	str	sl, [sp, #24]
   35624:	cmp	r2, ip
   35628:	str	lr, [sp, #28]
   3562c:	ldr	r6, [sp, #32]
   35630:	ldr	lr, [sp, #36]	; 0x24
   35634:	ldr	r5, [sp, #40]	; 0x28
   35638:	bge	357a8 <flatcc_json_printer_int32_enum_field@@Base+0x1a0>
   3563c:	ldr	ip, [r1, #4]
   35640:	ldrh	r2, [ip, r2]
   35644:	cmp	r2, #0
   35648:	beq	357a8 <flatcc_json_printer_int32_enum_field@@Base+0x1a0>
   3564c:	ldr	ip, [r1]
   35650:	cmn	ip, r2
   35654:	beq	357a8 <flatcc_json_printer_int32_enum_field@@Base+0x1a0>
   35658:	ldr	r7, [ip, r2]
   3565c:	cmp	lr, r7
   35660:	beq	3585c <flatcc_json_printer_int32_enum_field@@Base+0x254>
   35664:	ldr	ip, [r1, #16]
   35668:	ldr	r2, [r0, #20]
   3566c:	cmp	ip, #0
   35670:	add	ip, ip, #1
   35674:	str	ip, [r1, #16]
   35678:	beq	35690 <flatcc_json_printer_int32_enum_field@@Base+0x88>
   3567c:	add	ip, r2, #1
   35680:	mov	r1, #44	; 0x2c
   35684:	str	ip, [r0, #20]
   35688:	strb	r1, [r2]
   3568c:	ldr	r2, [r0, #20]
   35690:	mov	r8, r3
   35694:	mov	r4, r0
   35698:	ldrb	r1, [r0, #25]
   3569c:	cmp	r1, #0
   356a0:	bne	357fc <flatcc_json_printer_int32_enum_field@@Base+0x1f4>
   356a4:	ldr	r3, [r0, #16]
   356a8:	cmp	r3, r2
   356ac:	bhi	356bc <flatcc_json_printer_int32_enum_field@@Base+0xb4>
   356b0:	ldr	r3, [r0, #44]	; 0x2c
   356b4:	blx	r3
   356b8:	ldr	r2, [r4, #20]
   356bc:	mov	r3, #34	; 0x22
   356c0:	strb	r3, [r2]
   356c4:	ldrb	r3, [r4, #26]
   356c8:	ldr	r2, [r4, #16]
   356cc:	ldr	r0, [r4, #20]
   356d0:	cmp	r3, #0
   356d4:	addeq	r0, r0, #1
   356d8:	add	r3, r0, r6
   356dc:	cmp	r2, r3
   356e0:	str	r0, [r4, #20]
   356e4:	bls	357e4 <flatcc_json_printer_int32_enum_field@@Base+0x1dc>
   356e8:	mov	r2, r6
   356ec:	mov	r1, r8
   356f0:	bl	1451c <memcpy@plt>
   356f4:	ldr	r3, [r4, #20]
   356f8:	add	r6, r3, r6
   356fc:	str	r6, [r4, #20]
   35700:	mov	r3, #34	; 0x22
   35704:	mov	ip, #58	; 0x3a
   35708:	mov	r0, #32
   3570c:	strb	r3, [r6]
   35710:	ldrb	r3, [r4, #26]
   35714:	ldr	r1, [r4, #20]
   35718:	clz	r3, r3
   3571c:	lsr	r3, r3, #5
   35720:	add	r2, r1, r3
   35724:	add	r2, r2, #1
   35728:	str	r2, [r4, #20]
   3572c:	strb	ip, [r1, r3]
   35730:	ldr	r3, [r4, #20]
   35734:	strb	r0, [r3]
   35738:	ldrb	r3, [r4, #25]
   3573c:	ldr	r2, [r4, #20]
   35740:	ldrb	r0, [r4, #27]
   35744:	adds	r3, r3, #0
   35748:	movne	r3, #1
   3574c:	add	r1, r2, r3
   35750:	cmp	r0, #0
   35754:	str	r1, [r4, #20]
   35758:	beq	357bc <flatcc_json_printer_int32_enum_field@@Base+0x1b4>
   3575c:	cmp	r7, #0
   35760:	lsr	r5, r7, #31
   35764:	bge	35778 <flatcc_json_printer_int32_enum_field@@Base+0x170>
   35768:	mov	r0, #45	; 0x2d
   3576c:	rsb	r7, r7, #0
   35770:	add	r1, r1, #1
   35774:	strb	r0, [r2, r3]
   35778:	mov	r0, r7
   3577c:	bl	30268 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   35780:	ldr	r3, [r4, #20]
   35784:	add	r0, r5, r0
   35788:	add	r3, r3, r0
   3578c:	str	r3, [r4, #20]
   35790:	ldrd	r4, [sp]
   35794:	ldrd	r6, [sp, #8]
   35798:	ldrd	r8, [sp, #16]
   3579c:	ldr	sl, [sp, #24]
   357a0:	add	sp, sp, #28
   357a4:	pop	{pc}		; (ldr pc, [sp], #4)
   357a8:	ldrb	r2, [r0, #29]
   357ac:	cmp	r2, #0
   357b0:	beq	35790 <flatcc_json_printer_int32_enum_field@@Base+0x188>
   357b4:	mov	r7, lr
   357b8:	b	35664 <flatcc_json_printer_int32_enum_field@@Base+0x5c>
   357bc:	mov	r1, r7
   357c0:	mov	r0, r4
   357c4:	ldrd	r6, [sp, #8]
   357c8:	mov	r3, r5
   357cc:	ldrd	r4, [sp]
   357d0:	ldrd	r8, [sp, #16]
   357d4:	ldr	sl, [sp, #24]
   357d8:	ldr	lr, [sp, #28]
   357dc:	add	sp, sp, #32
   357e0:	bx	r3
   357e4:	mov	r2, r6
   357e8:	mov	r1, r8
   357ec:	mov	r0, r4
   357f0:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   357f4:	ldr	r6, [r4, #20]
   357f8:	b	35700 <flatcc_json_printer_int32_enum_field@@Base+0xf8>
   357fc:	add	r1, r2, #1
   35800:	mov	r3, #10
   35804:	str	r1, [r0, #20]
   35808:	strb	r3, [r2]
   3580c:	ldrb	r3, [r0, #25]
   35810:	ldr	r2, [r4, #32]
   35814:	ldr	r1, [r0, #16]
   35818:	ldr	r0, [r0, #20]
   3581c:	mul	r9, r2, r3
   35820:	add	r3, r0, r9
   35824:	cmp	r1, r3
   35828:	bcs	35840 <flatcc_json_printer_int32_enum_field@@Base+0x238>
   3582c:	mov	r1, r9
   35830:	mov	r0, r4
   35834:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   35838:	ldr	r2, [r4, #20]
   3583c:	b	356bc <flatcc_json_printer_int32_enum_field@@Base+0xb4>
   35840:	mov	r2, r9
   35844:	mov	r1, #32
   35848:	bl	14594 <memset@plt>
   3584c:	ldr	r2, [r4, #20]
   35850:	add	r2, r2, r9
   35854:	str	r2, [r4, #20]
   35858:	b	356bc <flatcc_json_printer_int32_enum_field@@Base+0xb4>
   3585c:	ldrb	r2, [r0, #28]
   35860:	cmp	r2, #0
   35864:	beq	35664 <flatcc_json_printer_int32_enum_field@@Base+0x5c>
   35868:	b	35790 <flatcc_json_printer_int32_enum_field@@Base+0x188>

0003586c <flatcc_json_printer_int64_enum_field@@Base>:
   3586c:	ldr	ip, [r1, #8]
   35870:	add	r2, r2, #2
   35874:	lsl	r2, r2, #1
   35878:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3587c:	strd	r6, [sp, #8]
   35880:	strd	r8, [sp, #16]
   35884:	strd	sl, [sp, #24]
   35888:	cmp	r2, ip
   3588c:	str	lr, [sp, #32]
   35890:	sub	sp, sp, #4
   35894:	ldr	r8, [sp, #40]	; 0x28
   35898:	ldrd	sl, [sp, #48]	; 0x30
   3589c:	ldr	r5, [sp, #56]	; 0x38
   358a0:	bge	35a24 <flatcc_json_printer_int64_enum_field@@Base+0x1b8>
   358a4:	ldr	ip, [r1, #4]
   358a8:	ldrh	r2, [ip, r2]
   358ac:	cmp	r2, #0
   358b0:	beq	35a24 <flatcc_json_printer_int64_enum_field@@Base+0x1b8>
   358b4:	ldr	ip, [r1]
   358b8:	cmn	ip, r2
   358bc:	beq	35a24 <flatcc_json_printer_int64_enum_field@@Base+0x1b8>
   358c0:	ldrd	r6, [ip, r2]
   358c4:	cmp	fp, r7
   358c8:	cmpeq	sl, r6
   358cc:	beq	35ae4 <flatcc_json_printer_int64_enum_field@@Base+0x278>
   358d0:	ldr	ip, [r1, #16]
   358d4:	ldr	r2, [r0, #20]
   358d8:	cmp	ip, #0
   358dc:	add	ip, ip, #1
   358e0:	str	ip, [r1, #16]
   358e4:	beq	358fc <flatcc_json_printer_int64_enum_field@@Base+0x90>
   358e8:	add	ip, r2, #1
   358ec:	mov	r1, #44	; 0x2c
   358f0:	str	ip, [r0, #20]
   358f4:	strb	r1, [r2]
   358f8:	ldr	r2, [r0, #20]
   358fc:	mov	r9, r3
   35900:	mov	r4, r0
   35904:	ldrb	r1, [r0, #25]
   35908:	cmp	r1, #0
   3590c:	bne	35a84 <flatcc_json_printer_int64_enum_field@@Base+0x218>
   35910:	ldr	r3, [r0, #16]
   35914:	cmp	r3, r2
   35918:	bhi	35928 <flatcc_json_printer_int64_enum_field@@Base+0xbc>
   3591c:	ldr	r3, [r0, #44]	; 0x2c
   35920:	blx	r3
   35924:	ldr	r2, [r4, #20]
   35928:	mov	r3, #34	; 0x22
   3592c:	strb	r3, [r2]
   35930:	ldrb	r3, [r4, #26]
   35934:	ldr	r2, [r4, #16]
   35938:	ldr	r0, [r4, #20]
   3593c:	cmp	r3, #0
   35940:	addeq	r0, r0, #1
   35944:	add	r3, r0, r8
   35948:	cmp	r2, r3
   3594c:	str	r0, [r4, #20]
   35950:	bls	35a6c <flatcc_json_printer_int64_enum_field@@Base+0x200>
   35954:	mov	r2, r8
   35958:	mov	r1, r9
   3595c:	bl	1451c <memcpy@plt>
   35960:	ldr	r3, [r4, #20]
   35964:	add	r8, r3, r8
   35968:	str	r8, [r4, #20]
   3596c:	mov	r3, #34	; 0x22
   35970:	mov	ip, #58	; 0x3a
   35974:	mov	r0, #32
   35978:	strb	r3, [r8]
   3597c:	ldrb	r3, [r4, #26]
   35980:	ldr	r1, [r4, #20]
   35984:	clz	r3, r3
   35988:	lsr	r3, r3, #5
   3598c:	add	r2, r1, r3
   35990:	add	r2, r2, #1
   35994:	str	r2, [r4, #20]
   35998:	strb	ip, [r1, r3]
   3599c:	ldr	r3, [r4, #20]
   359a0:	strb	r0, [r3]
   359a4:	ldrb	r3, [r4, #25]
   359a8:	ldr	r1, [r4, #20]
   359ac:	ldrb	r0, [r4, #27]
   359b0:	adds	r3, r3, #0
   359b4:	movne	r3, #1
   359b8:	add	r2, r1, r3
   359bc:	cmp	r0, #0
   359c0:	str	r2, [r4, #20]
   359c4:	beq	35a3c <flatcc_json_printer_int64_enum_field@@Base+0x1d0>
   359c8:	cmp	r6, #0
   359cc:	lsr	r5, r7, #31
   359d0:	sbcs	r0, r7, #0
   359d4:	bge	359ec <flatcc_json_printer_int64_enum_field@@Base+0x180>
   359d8:	rsbs	r6, r6, #0
   359dc:	mov	r0, #45	; 0x2d
   359e0:	rsc	r7, r7, #0
   359e4:	add	r2, r2, #1
   359e8:	strb	r0, [r1, r3]
   359ec:	mov	r0, r6
   359f0:	mov	r1, r7
   359f4:	bl	30594 <flatcc_json_parser_struct_as_root@@Base+0x498>
   359f8:	ldr	r3, [r4, #20]
   359fc:	add	r0, r5, r0
   35a00:	add	r3, r3, r0
   35a04:	str	r3, [r4, #20]
   35a08:	add	sp, sp, #4
   35a0c:	ldrd	r4, [sp]
   35a10:	ldrd	r6, [sp, #8]
   35a14:	ldrd	r8, [sp, #16]
   35a18:	ldrd	sl, [sp, #24]
   35a1c:	add	sp, sp, #32
   35a20:	pop	{pc}		; (ldr pc, [sp], #4)
   35a24:	ldrb	r2, [r0, #29]
   35a28:	cmp	r2, #0
   35a2c:	beq	35a08 <flatcc_json_printer_int64_enum_field@@Base+0x19c>
   35a30:	mov	r6, sl
   35a34:	mov	r7, fp
   35a38:	b	358d0 <flatcc_json_printer_int64_enum_field@@Base+0x64>
   35a3c:	mov	r2, r6
   35a40:	mov	r3, r7
   35a44:	mov	r0, r4
   35a48:	mov	r1, r5
   35a4c:	add	sp, sp, #4
   35a50:	ldrd	r4, [sp]
   35a54:	ldrd	r6, [sp, #8]
   35a58:	ldrd	r8, [sp, #16]
   35a5c:	ldrd	sl, [sp, #24]
   35a60:	ldr	lr, [sp, #32]
   35a64:	add	sp, sp, #36	; 0x24
   35a68:	bx	r1
   35a6c:	mov	r2, r8
   35a70:	mov	r1, r9
   35a74:	mov	r0, r4
   35a78:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   35a7c:	ldr	r8, [r4, #20]
   35a80:	b	3596c <flatcc_json_printer_int64_enum_field@@Base+0x100>
   35a84:	add	r1, r2, #1
   35a88:	mov	r3, #10
   35a8c:	str	r1, [r0, #20]
   35a90:	strb	r3, [r2]
   35a94:	ldrb	r3, [r0, #25]
   35a98:	ldr	r2, [r4, #32]
   35a9c:	ldr	r1, [r0, #16]
   35aa0:	ldr	r0, [r0, #20]
   35aa4:	mul	sl, r2, r3
   35aa8:	add	r3, r0, sl
   35aac:	cmp	r1, r3
   35ab0:	bcs	35ac8 <flatcc_json_printer_int64_enum_field@@Base+0x25c>
   35ab4:	mov	r1, sl
   35ab8:	mov	r0, r4
   35abc:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   35ac0:	ldr	r2, [r4, #20]
   35ac4:	b	35928 <flatcc_json_printer_int64_enum_field@@Base+0xbc>
   35ac8:	mov	r2, sl
   35acc:	mov	r1, #32
   35ad0:	bl	14594 <memset@plt>
   35ad4:	ldr	r2, [r4, #20]
   35ad8:	add	r2, r2, sl
   35adc:	str	r2, [r4, #20]
   35ae0:	b	35928 <flatcc_json_printer_int64_enum_field@@Base+0xbc>
   35ae4:	ldrb	r2, [r0, #28]
   35ae8:	cmp	r2, #0
   35aec:	beq	358d0 <flatcc_json_printer_int64_enum_field@@Base+0x64>
   35af0:	b	35a08 <flatcc_json_printer_int64_enum_field@@Base+0x19c>

00035af4 <flatcc_json_printer_bool_enum_field@@Base>:
   35af4:	ldr	ip, [r1, #8]
   35af8:	add	r2, r2, #2
   35afc:	lsl	r2, r2, #1
   35b00:	strd	r4, [sp, #-32]!	; 0xffffffe0
   35b04:	strd	r6, [sp, #8]
   35b08:	strd	r8, [sp, #16]
   35b0c:	str	sl, [sp, #24]
   35b10:	cmp	r2, ip
   35b14:	str	lr, [sp, #28]
   35b18:	ldrb	lr, [sp, #36]	; 0x24
   35b1c:	ldr	r7, [sp, #32]
   35b20:	ldr	r5, [sp, #40]	; 0x28
   35b24:	bge	35c6c <flatcc_json_printer_bool_enum_field@@Base+0x178>
   35b28:	ldr	ip, [r1, #4]
   35b2c:	ldrh	r2, [ip, r2]
   35b30:	cmp	r2, #0
   35b34:	beq	35c6c <flatcc_json_printer_bool_enum_field@@Base+0x178>
   35b38:	ldr	ip, [r1]
   35b3c:	cmn	ip, r2
   35b40:	beq	35c6c <flatcc_json_printer_bool_enum_field@@Base+0x178>
   35b44:	ldrb	r6, [ip, r2]
   35b48:	cmp	lr, r6
   35b4c:	beq	35d24 <flatcc_json_printer_bool_enum_field@@Base+0x230>
   35b50:	ldr	ip, [r1, #16]
   35b54:	ldr	r2, [r0, #20]
   35b58:	cmp	ip, #0
   35b5c:	add	ip, ip, #1
   35b60:	str	ip, [r1, #16]
   35b64:	beq	35b7c <flatcc_json_printer_bool_enum_field@@Base+0x88>
   35b68:	add	ip, r2, #1
   35b6c:	mov	r1, #44	; 0x2c
   35b70:	str	ip, [r0, #20]
   35b74:	strb	r1, [r2]
   35b78:	ldr	r2, [r0, #20]
   35b7c:	mov	r8, r3
   35b80:	mov	r4, r0
   35b84:	ldrb	r1, [r0, #25]
   35b88:	cmp	r1, #0
   35b8c:	bne	35cc4 <flatcc_json_printer_bool_enum_field@@Base+0x1d0>
   35b90:	ldr	r3, [r0, #16]
   35b94:	cmp	r3, r2
   35b98:	bhi	35ba8 <flatcc_json_printer_bool_enum_field@@Base+0xb4>
   35b9c:	ldr	r3, [r0, #44]	; 0x2c
   35ba0:	blx	r3
   35ba4:	ldr	r2, [r4, #20]
   35ba8:	mov	r3, #34	; 0x22
   35bac:	strb	r3, [r2]
   35bb0:	ldrb	r3, [r4, #26]
   35bb4:	ldr	r2, [r4, #16]
   35bb8:	ldr	r0, [r4, #20]
   35bbc:	cmp	r3, #0
   35bc0:	addeq	r0, r0, #1
   35bc4:	add	r3, r0, r7
   35bc8:	cmp	r2, r3
   35bcc:	str	r0, [r4, #20]
   35bd0:	bls	35cac <flatcc_json_printer_bool_enum_field@@Base+0x1b8>
   35bd4:	mov	r2, r7
   35bd8:	mov	r1, r8
   35bdc:	bl	1451c <memcpy@plt>
   35be0:	ldr	r3, [r4, #20]
   35be4:	add	r7, r3, r7
   35be8:	str	r7, [r4, #20]
   35bec:	mov	r3, #34	; 0x22
   35bf0:	mov	ip, #58	; 0x3a
   35bf4:	mov	r0, #32
   35bf8:	strb	r3, [r7]
   35bfc:	ldrb	r3, [r4, #26]
   35c00:	ldr	r1, [r4, #20]
   35c04:	clz	r3, r3
   35c08:	lsr	r3, r3, #5
   35c0c:	add	r2, r1, r3
   35c10:	add	r2, r2, #1
   35c14:	str	r2, [r4, #20]
   35c18:	strb	ip, [r1, r3]
   35c1c:	ldr	r3, [r4, #20]
   35c20:	strb	r0, [r3]
   35c24:	ldrb	r2, [r4, #25]
   35c28:	ldr	r1, [r4, #20]
   35c2c:	ldrb	r3, [r4, #27]
   35c30:	cmp	r2, #0
   35c34:	addne	r1, r1, #1
   35c38:	cmp	r3, #0
   35c3c:	str	r1, [r4, #20]
   35c40:	bne	35c80 <flatcc_json_printer_bool_enum_field@@Base+0x18c>
   35c44:	mov	r1, r6
   35c48:	mov	r0, r4
   35c4c:	ldrd	r6, [sp, #8]
   35c50:	mov	r3, r5
   35c54:	ldrd	r4, [sp]
   35c58:	ldrd	r8, [sp, #16]
   35c5c:	ldr	sl, [sp, #24]
   35c60:	ldr	lr, [sp, #28]
   35c64:	add	sp, sp, #32
   35c68:	bx	r3
   35c6c:	ldrb	r2, [r0, #29]
   35c70:	cmp	r2, #0
   35c74:	beq	35c94 <flatcc_json_printer_bool_enum_field@@Base+0x1a0>
   35c78:	mov	r6, lr
   35c7c:	b	35b50 <flatcc_json_printer_bool_enum_field@@Base+0x5c>
   35c80:	mov	r0, r6
   35c84:	bl	31428 <flatcc_json_parser_struct_as_root@@Base+0x132c>
   35c88:	ldr	r3, [r4, #20]
   35c8c:	add	r0, r3, r0
   35c90:	str	r0, [r4, #20]
   35c94:	ldrd	r4, [sp]
   35c98:	ldrd	r6, [sp, #8]
   35c9c:	ldrd	r8, [sp, #16]
   35ca0:	ldr	sl, [sp, #24]
   35ca4:	add	sp, sp, #28
   35ca8:	pop	{pc}		; (ldr pc, [sp], #4)
   35cac:	mov	r2, r7
   35cb0:	mov	r1, r8
   35cb4:	mov	r0, r4
   35cb8:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   35cbc:	ldr	r7, [r4, #20]
   35cc0:	b	35bec <flatcc_json_printer_bool_enum_field@@Base+0xf8>
   35cc4:	add	r1, r2, #1
   35cc8:	mov	r3, #10
   35ccc:	str	r1, [r0, #20]
   35cd0:	strb	r3, [r2]
   35cd4:	ldrb	r3, [r0, #25]
   35cd8:	ldr	r2, [r4, #32]
   35cdc:	ldr	r1, [r0, #16]
   35ce0:	ldr	r0, [r0, #20]
   35ce4:	mul	r9, r2, r3
   35ce8:	add	r3, r0, r9
   35cec:	cmp	r1, r3
   35cf0:	bcs	35d08 <flatcc_json_printer_bool_enum_field@@Base+0x214>
   35cf4:	mov	r1, r9
   35cf8:	mov	r0, r4
   35cfc:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   35d00:	ldr	r2, [r4, #20]
   35d04:	b	35ba8 <flatcc_json_printer_bool_enum_field@@Base+0xb4>
   35d08:	mov	r2, r9
   35d0c:	mov	r1, #32
   35d10:	bl	14594 <memset@plt>
   35d14:	ldr	r2, [r4, #20]
   35d18:	add	r2, r2, r9
   35d1c:	str	r2, [r4, #20]
   35d20:	b	35ba8 <flatcc_json_printer_bool_enum_field@@Base+0xb4>
   35d24:	ldrb	r2, [r0, #28]
   35d28:	cmp	r2, #0
   35d2c:	beq	35b50 <flatcc_json_printer_bool_enum_field@@Base+0x5c>
   35d30:	b	35c94 <flatcc_json_printer_bool_enum_field@@Base+0x1a0>

00035d34 <flatcc_json_printer_uint8_struct_field@@Base>:
   35d34:	cmp	r1, #0
   35d38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35d3c:	mov	r4, r0
   35d40:	strd	r6, [sp, #8]
   35d44:	str	r8, [sp, #16]
   35d48:	str	lr, [sp, #20]
   35d4c:	ldrb	r5, [r2, r3]
   35d50:	ldr	r2, [r0, #20]
   35d54:	ldr	r6, [sp, #28]
   35d58:	beq	35d70 <flatcc_json_printer_uint8_struct_field@@Base+0x3c>
   35d5c:	add	r1, r2, #1
   35d60:	mov	r3, #44	; 0x2c
   35d64:	str	r1, [r0, #20]
   35d68:	strb	r3, [r2]
   35d6c:	ldr	r2, [r0, #20]
   35d70:	ldrb	r1, [r4, #25]
   35d74:	cmp	r1, #0
   35d78:	bne	35e64 <flatcc_json_printer_uint8_struct_field@@Base+0x130>
   35d7c:	ldr	r3, [r4, #16]
   35d80:	cmp	r3, r2
   35d84:	bhi	35d98 <flatcc_json_printer_uint8_struct_field@@Base+0x64>
   35d88:	mov	r0, r4
   35d8c:	ldr	r3, [r4, #44]	; 0x2c
   35d90:	blx	r3
   35d94:	ldr	r2, [r4, #20]
   35d98:	mov	r3, #34	; 0x22
   35d9c:	ldr	r1, [sp, #24]
   35da0:	strb	r3, [r2]
   35da4:	ldrb	r3, [r4, #26]
   35da8:	ldr	r2, [r4, #16]
   35dac:	ldr	r0, [r4, #20]
   35db0:	cmp	r3, #0
   35db4:	addeq	r0, r0, #1
   35db8:	add	r3, r0, r6
   35dbc:	cmp	r2, r3
   35dc0:	mov	r2, r6
   35dc4:	str	r0, [r4, #20]
   35dc8:	bhi	35e50 <flatcc_json_printer_uint8_struct_field@@Base+0x11c>
   35dcc:	mov	r0, r4
   35dd0:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   35dd4:	ldr	r2, [r4, #20]
   35dd8:	mov	r3, #34	; 0x22
   35ddc:	mov	lr, #58	; 0x3a
   35de0:	mov	ip, #32
   35de4:	mov	r0, r5
   35de8:	strb	r3, [r2]
   35dec:	ldrb	r3, [r4, #26]
   35df0:	ldr	r1, [r4, #20]
   35df4:	clz	r3, r3
   35df8:	lsr	r3, r3, #5
   35dfc:	add	r2, r1, r3
   35e00:	add	r2, r2, #1
   35e04:	str	r2, [r4, #20]
   35e08:	strb	lr, [r1, r3]
   35e0c:	ldr	r3, [r4, #20]
   35e10:	strb	ip, [r3]
   35e14:	ldrb	r2, [r4, #25]
   35e18:	ldr	r3, [r4, #20]
   35e1c:	cmp	r2, #0
   35e20:	addne	r3, r3, #1
   35e24:	mov	r1, r3
   35e28:	str	r3, [r4, #20]
   35e2c:	bl	312f4 <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   35e30:	ldr	r3, [r4, #20]
   35e34:	ldrd	r6, [sp, #8]
   35e38:	ldr	r8, [sp, #16]
   35e3c:	add	r0, r3, r0
   35e40:	str	r0, [r4, #20]
   35e44:	ldrd	r4, [sp]
   35e48:	add	sp, sp, #20
   35e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   35e50:	bl	1451c <memcpy@plt>
   35e54:	ldr	r2, [r4, #20]
   35e58:	add	r2, r2, r6
   35e5c:	str	r2, [r4, #20]
   35e60:	b	35dd8 <flatcc_json_printer_uint8_struct_field@@Base+0xa4>
   35e64:	add	r1, r2, #1
   35e68:	mov	r3, #10
   35e6c:	str	r1, [r4, #20]
   35e70:	strb	r3, [r2]
   35e74:	ldrb	r7, [r4, #25]
   35e78:	ldr	r1, [r4, #16]
   35e7c:	ldr	r2, [r4, #32]
   35e80:	ldr	r0, [r4, #20]
   35e84:	mul	r7, r2, r7
   35e88:	add	r3, r0, r7
   35e8c:	cmp	r1, r3
   35e90:	bcs	35ea8 <flatcc_json_printer_uint8_struct_field@@Base+0x174>
   35e94:	mov	r1, r7
   35e98:	mov	r0, r4
   35e9c:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   35ea0:	ldr	r2, [r4, #20]
   35ea4:	b	35d98 <flatcc_json_printer_uint8_struct_field@@Base+0x64>
   35ea8:	mov	r2, r7
   35eac:	mov	r1, #32
   35eb0:	bl	14594 <memset@plt>
   35eb4:	ldr	r2, [r4, #20]
   35eb8:	add	r2, r2, r7
   35ebc:	str	r2, [r4, #20]
   35ec0:	b	35d98 <flatcc_json_printer_uint8_struct_field@@Base+0x64>

00035ec4 <flatcc_json_printer_uint16_struct_field@@Base>:
   35ec4:	cmp	r1, #0
   35ec8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35ecc:	mov	r4, r0
   35ed0:	ldrh	r5, [r2, r3]
   35ed4:	ldr	r2, [r0, #20]
   35ed8:	strd	r6, [sp, #8]
   35edc:	str	r8, [sp, #16]
   35ee0:	str	lr, [sp, #20]
   35ee4:	ldr	r6, [sp, #28]
   35ee8:	beq	35f00 <flatcc_json_printer_uint16_struct_field@@Base+0x3c>
   35eec:	add	r1, r2, #1
   35ef0:	mov	r3, #44	; 0x2c
   35ef4:	str	r1, [r0, #20]
   35ef8:	strb	r3, [r2]
   35efc:	ldr	r2, [r0, #20]
   35f00:	ldrb	r1, [r4, #25]
   35f04:	cmp	r1, #0
   35f08:	bne	35ff4 <flatcc_json_printer_uint16_struct_field@@Base+0x130>
   35f0c:	ldr	r3, [r4, #16]
   35f10:	cmp	r3, r2
   35f14:	bhi	35f28 <flatcc_json_printer_uint16_struct_field@@Base+0x64>
   35f18:	mov	r0, r4
   35f1c:	ldr	r3, [r4, #44]	; 0x2c
   35f20:	blx	r3
   35f24:	ldr	r2, [r4, #20]
   35f28:	mov	r3, #34	; 0x22
   35f2c:	ldr	r1, [sp, #24]
   35f30:	strb	r3, [r2]
   35f34:	ldrb	r3, [r4, #26]
   35f38:	ldr	r2, [r4, #16]
   35f3c:	ldr	r0, [r4, #20]
   35f40:	cmp	r3, #0
   35f44:	addeq	r0, r0, #1
   35f48:	add	r3, r0, r6
   35f4c:	cmp	r2, r3
   35f50:	mov	r2, r6
   35f54:	str	r0, [r4, #20]
   35f58:	bhi	35fe0 <flatcc_json_printer_uint16_struct_field@@Base+0x11c>
   35f5c:	mov	r0, r4
   35f60:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   35f64:	ldr	r2, [r4, #20]
   35f68:	mov	r3, #34	; 0x22
   35f6c:	mov	lr, #58	; 0x3a
   35f70:	mov	ip, #32
   35f74:	mov	r0, r5
   35f78:	strb	r3, [r2]
   35f7c:	ldrb	r3, [r4, #26]
   35f80:	ldr	r1, [r4, #20]
   35f84:	clz	r3, r3
   35f88:	lsr	r3, r3, #5
   35f8c:	add	r2, r1, r3
   35f90:	add	r2, r2, #1
   35f94:	str	r2, [r4, #20]
   35f98:	strb	lr, [r1, r3]
   35f9c:	ldr	r3, [r4, #20]
   35fa0:	strb	ip, [r3]
   35fa4:	ldrb	r2, [r4, #25]
   35fa8:	ldr	r3, [r4, #20]
   35fac:	cmp	r2, #0
   35fb0:	addne	r3, r3, #1
   35fb4:	mov	r1, r3
   35fb8:	str	r3, [r4, #20]
   35fbc:	bl	30100 <flatcc_json_parser_struct_as_root@@Base+0x4>
   35fc0:	ldr	r3, [r4, #20]
   35fc4:	ldrd	r6, [sp, #8]
   35fc8:	ldr	r8, [sp, #16]
   35fcc:	add	r0, r3, r0
   35fd0:	str	r0, [r4, #20]
   35fd4:	ldrd	r4, [sp]
   35fd8:	add	sp, sp, #20
   35fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   35fe0:	bl	1451c <memcpy@plt>
   35fe4:	ldr	r2, [r4, #20]
   35fe8:	add	r2, r2, r6
   35fec:	str	r2, [r4, #20]
   35ff0:	b	35f68 <flatcc_json_printer_uint16_struct_field@@Base+0xa4>
   35ff4:	add	r1, r2, #1
   35ff8:	mov	r3, #10
   35ffc:	str	r1, [r4, #20]
   36000:	strb	r3, [r2]
   36004:	ldrb	r7, [r4, #25]
   36008:	ldr	r1, [r4, #16]
   3600c:	ldr	r2, [r4, #32]
   36010:	ldr	r0, [r4, #20]
   36014:	mul	r7, r2, r7
   36018:	add	r3, r0, r7
   3601c:	cmp	r1, r3
   36020:	bcs	36038 <flatcc_json_printer_uint16_struct_field@@Base+0x174>
   36024:	mov	r1, r7
   36028:	mov	r0, r4
   3602c:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   36030:	ldr	r2, [r4, #20]
   36034:	b	35f28 <flatcc_json_printer_uint16_struct_field@@Base+0x64>
   36038:	mov	r2, r7
   3603c:	mov	r1, #32
   36040:	bl	14594 <memset@plt>
   36044:	ldr	r2, [r4, #20]
   36048:	add	r2, r2, r7
   3604c:	str	r2, [r4, #20]
   36050:	b	35f28 <flatcc_json_printer_uint16_struct_field@@Base+0x64>

00036054 <flatcc_json_printer_uint32_struct_field@@Base>:
   36054:	cmp	r1, #0
   36058:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3605c:	mov	r4, r0
   36060:	ldr	r5, [r2, r3]
   36064:	ldr	r2, [r0, #20]
   36068:	strd	r6, [sp, #8]
   3606c:	str	r8, [sp, #16]
   36070:	str	lr, [sp, #20]
   36074:	ldr	r6, [sp, #28]
   36078:	beq	36090 <flatcc_json_printer_uint32_struct_field@@Base+0x3c>
   3607c:	add	r1, r2, #1
   36080:	mov	r3, #44	; 0x2c
   36084:	str	r1, [r0, #20]
   36088:	strb	r3, [r2]
   3608c:	ldr	r2, [r0, #20]
   36090:	ldrb	r1, [r4, #25]
   36094:	cmp	r1, #0
   36098:	bne	36184 <flatcc_json_printer_uint32_struct_field@@Base+0x130>
   3609c:	ldr	r3, [r4, #16]
   360a0:	cmp	r3, r2
   360a4:	bhi	360b8 <flatcc_json_printer_uint32_struct_field@@Base+0x64>
   360a8:	mov	r0, r4
   360ac:	ldr	r3, [r4, #44]	; 0x2c
   360b0:	blx	r3
   360b4:	ldr	r2, [r4, #20]
   360b8:	mov	r3, #34	; 0x22
   360bc:	ldr	r1, [sp, #24]
   360c0:	strb	r3, [r2]
   360c4:	ldrb	r3, [r4, #26]
   360c8:	ldr	r2, [r4, #16]
   360cc:	ldr	r0, [r4, #20]
   360d0:	cmp	r3, #0
   360d4:	addeq	r0, r0, #1
   360d8:	add	r3, r0, r6
   360dc:	cmp	r2, r3
   360e0:	mov	r2, r6
   360e4:	str	r0, [r4, #20]
   360e8:	bhi	36170 <flatcc_json_printer_uint32_struct_field@@Base+0x11c>
   360ec:	mov	r0, r4
   360f0:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   360f4:	ldr	r2, [r4, #20]
   360f8:	mov	r3, #34	; 0x22
   360fc:	mov	lr, #58	; 0x3a
   36100:	mov	ip, #32
   36104:	mov	r0, r5
   36108:	strb	r3, [r2]
   3610c:	ldrb	r3, [r4, #26]
   36110:	ldr	r1, [r4, #20]
   36114:	clz	r3, r3
   36118:	lsr	r3, r3, #5
   3611c:	add	r2, r1, r3
   36120:	add	r2, r2, #1
   36124:	str	r2, [r4, #20]
   36128:	strb	lr, [r1, r3]
   3612c:	ldr	r3, [r4, #20]
   36130:	strb	ip, [r3]
   36134:	ldrb	r2, [r4, #25]
   36138:	ldr	r3, [r4, #20]
   3613c:	cmp	r2, #0
   36140:	addne	r3, r3, #1
   36144:	mov	r1, r3
   36148:	str	r3, [r4, #20]
   3614c:	bl	30268 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   36150:	ldr	r3, [r4, #20]
   36154:	ldrd	r6, [sp, #8]
   36158:	ldr	r8, [sp, #16]
   3615c:	add	r0, r3, r0
   36160:	str	r0, [r4, #20]
   36164:	ldrd	r4, [sp]
   36168:	add	sp, sp, #20
   3616c:	pop	{pc}		; (ldr pc, [sp], #4)
   36170:	bl	1451c <memcpy@plt>
   36174:	ldr	r2, [r4, #20]
   36178:	add	r2, r2, r6
   3617c:	str	r2, [r4, #20]
   36180:	b	360f8 <flatcc_json_printer_uint32_struct_field@@Base+0xa4>
   36184:	add	r1, r2, #1
   36188:	mov	r3, #10
   3618c:	str	r1, [r4, #20]
   36190:	strb	r3, [r2]
   36194:	ldrb	r7, [r4, #25]
   36198:	ldr	r1, [r4, #16]
   3619c:	ldr	r2, [r4, #32]
   361a0:	ldr	r0, [r4, #20]
   361a4:	mul	r7, r2, r7
   361a8:	add	r3, r0, r7
   361ac:	cmp	r1, r3
   361b0:	bcs	361c8 <flatcc_json_printer_uint32_struct_field@@Base+0x174>
   361b4:	mov	r1, r7
   361b8:	mov	r0, r4
   361bc:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   361c0:	ldr	r2, [r4, #20]
   361c4:	b	360b8 <flatcc_json_printer_uint32_struct_field@@Base+0x64>
   361c8:	mov	r2, r7
   361cc:	mov	r1, #32
   361d0:	bl	14594 <memset@plt>
   361d4:	ldr	r2, [r4, #20]
   361d8:	add	r2, r2, r7
   361dc:	str	r2, [r4, #20]
   361e0:	b	360b8 <flatcc_json_printer_uint32_struct_field@@Base+0x64>

000361e4 <flatcc_json_printer_uint64_struct_field@@Base>:
   361e4:	cmp	r1, #0
   361e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   361ec:	mov	r4, r0
   361f0:	strd	r6, [sp, #8]
   361f4:	str	r8, [sp, #16]
   361f8:	str	lr, [sp, #20]
   361fc:	ldrd	r6, [r2, r3]
   36200:	ldr	r2, [r0, #20]
   36204:	ldr	r5, [sp, #28]
   36208:	beq	36220 <flatcc_json_printer_uint64_struct_field@@Base+0x3c>
   3620c:	add	r1, r2, #1
   36210:	mov	r3, #44	; 0x2c
   36214:	str	r1, [r0, #20]
   36218:	strb	r3, [r2]
   3621c:	ldr	r2, [r0, #20]
   36220:	ldrb	r1, [r4, #25]
   36224:	cmp	r1, #0
   36228:	bne	36318 <flatcc_json_printer_uint64_struct_field@@Base+0x134>
   3622c:	ldr	r3, [r4, #16]
   36230:	cmp	r3, r2
   36234:	bhi	36248 <flatcc_json_printer_uint64_struct_field@@Base+0x64>
   36238:	mov	r0, r4
   3623c:	ldr	r3, [r4, #44]	; 0x2c
   36240:	blx	r3
   36244:	ldr	r2, [r4, #20]
   36248:	mov	r3, #34	; 0x22
   3624c:	ldr	r1, [sp, #24]
   36250:	strb	r3, [r2]
   36254:	ldrb	r3, [r4, #26]
   36258:	ldr	r2, [r4, #16]
   3625c:	ldr	r0, [r4, #20]
   36260:	cmp	r3, #0
   36264:	addeq	r0, r0, #1
   36268:	add	r3, r0, r5
   3626c:	cmp	r2, r3
   36270:	mov	r2, r5
   36274:	str	r0, [r4, #20]
   36278:	bhi	36304 <flatcc_json_printer_uint64_struct_field@@Base+0x120>
   3627c:	mov	r0, r4
   36280:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   36284:	ldr	r2, [r4, #20]
   36288:	mov	r3, #34	; 0x22
   3628c:	mov	r5, #58	; 0x3a
   36290:	mov	lr, #32
   36294:	mov	r0, r6
   36298:	strb	r3, [r2]
   3629c:	mov	r1, r7
   362a0:	ldrb	r3, [r4, #26]
   362a4:	ldr	ip, [r4, #20]
   362a8:	clz	r3, r3
   362ac:	lsr	r3, r3, #5
   362b0:	add	r2, ip, r3
   362b4:	add	r2, r2, #1
   362b8:	str	r2, [r4, #20]
   362bc:	strb	r5, [ip, r3]
   362c0:	ldr	r3, [r4, #20]
   362c4:	strb	lr, [r3]
   362c8:	ldrb	r2, [r4, #25]
   362cc:	ldr	r3, [r4, #20]
   362d0:	cmp	r2, #0
   362d4:	addne	r3, r3, #1
   362d8:	mov	r2, r3
   362dc:	str	r3, [r4, #20]
   362e0:	bl	30594 <flatcc_json_parser_struct_as_root@@Base+0x498>
   362e4:	ldr	r3, [r4, #20]
   362e8:	ldrd	r6, [sp, #8]
   362ec:	ldr	r8, [sp, #16]
   362f0:	add	r0, r3, r0
   362f4:	str	r0, [r4, #20]
   362f8:	ldrd	r4, [sp]
   362fc:	add	sp, sp, #20
   36300:	pop	{pc}		; (ldr pc, [sp], #4)
   36304:	bl	1451c <memcpy@plt>
   36308:	ldr	r2, [r4, #20]
   3630c:	add	r2, r2, r5
   36310:	str	r2, [r4, #20]
   36314:	b	36288 <flatcc_json_printer_uint64_struct_field@@Base+0xa4>
   36318:	add	r1, r2, #1
   3631c:	mov	r3, #10
   36320:	str	r1, [r4, #20]
   36324:	strb	r3, [r2]
   36328:	ldrb	r8, [r4, #25]
   3632c:	ldr	r1, [r4, #16]
   36330:	ldr	r2, [r4, #32]
   36334:	ldr	r0, [r4, #20]
   36338:	mul	r8, r2, r8
   3633c:	add	r3, r0, r8
   36340:	cmp	r1, r3
   36344:	bcs	3635c <flatcc_json_printer_uint64_struct_field@@Base+0x178>
   36348:	mov	r1, r8
   3634c:	mov	r0, r4
   36350:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   36354:	ldr	r2, [r4, #20]
   36358:	b	36248 <flatcc_json_printer_uint64_struct_field@@Base+0x64>
   3635c:	mov	r2, r8
   36360:	mov	r1, #32
   36364:	bl	14594 <memset@plt>
   36368:	ldr	r2, [r4, #20]
   3636c:	add	r2, r2, r8
   36370:	str	r2, [r4, #20]
   36374:	b	36248 <flatcc_json_printer_uint64_struct_field@@Base+0x64>

00036378 <flatcc_json_printer_int8_struct_field@@Base>:
   36378:	cmp	r1, #0
   3637c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36380:	mov	r4, r0
   36384:	strd	r6, [sp, #8]
   36388:	str	r8, [sp, #16]
   3638c:	str	lr, [sp, #20]
   36390:	ldrsb	r5, [r2, r3]
   36394:	ldr	r2, [r0, #20]
   36398:	ldr	r6, [sp, #28]
   3639c:	beq	363b4 <flatcc_json_printer_int8_struct_field@@Base+0x3c>
   363a0:	add	r1, r2, #1
   363a4:	mov	r3, #44	; 0x2c
   363a8:	str	r1, [r0, #20]
   363ac:	strb	r3, [r2]
   363b0:	ldr	r2, [r0, #20]
   363b4:	ldrb	r1, [r4, #25]
   363b8:	cmp	r1, #0
   363bc:	bne	364cc <flatcc_json_printer_int8_struct_field@@Base+0x154>
   363c0:	ldr	r3, [r4, #16]
   363c4:	cmp	r3, r2
   363c8:	bhi	363dc <flatcc_json_printer_int8_struct_field@@Base+0x64>
   363cc:	mov	r0, r4
   363d0:	ldr	r3, [r4, #44]	; 0x2c
   363d4:	blx	r3
   363d8:	ldr	r2, [r4, #20]
   363dc:	mov	r3, #34	; 0x22
   363e0:	ldr	r1, [sp, #24]
   363e4:	strb	r3, [r2]
   363e8:	ldrb	r3, [r4, #26]
   363ec:	ldr	r2, [r4, #16]
   363f0:	ldr	r0, [r4, #20]
   363f4:	cmp	r3, #0
   363f8:	addeq	r0, r0, #1
   363fc:	add	r3, r0, r6
   36400:	cmp	r2, r3
   36404:	mov	r2, r6
   36408:	str	r0, [r4, #20]
   3640c:	bhi	364b8 <flatcc_json_printer_int8_struct_field@@Base+0x140>
   36410:	mov	r0, r4
   36414:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   36418:	ldr	r2, [r4, #20]
   3641c:	mov	r3, #34	; 0x22
   36420:	mov	lr, #58	; 0x3a
   36424:	lsr	r6, r5, #31
   36428:	mov	ip, #32
   3642c:	uxtb	r0, r5
   36430:	strb	r3, [r2]
   36434:	ldrb	r3, [r4, #26]
   36438:	ldr	r1, [r4, #20]
   3643c:	clz	r3, r3
   36440:	lsr	r3, r3, #5
   36444:	add	r2, r1, r3
   36448:	add	r2, r2, #1
   3644c:	str	r2, [r4, #20]
   36450:	strb	lr, [r1, r3]
   36454:	ldr	r3, [r4, #20]
   36458:	strb	ip, [r3]
   3645c:	ldrb	r3, [r4, #25]
   36460:	ldr	r2, [r4, #20]
   36464:	adds	r3, r3, #0
   36468:	movne	r3, #1
   3646c:	cmp	r5, #0
   36470:	add	r1, r2, r3
   36474:	str	r1, [r4, #20]
   36478:	bge	36490 <flatcc_json_printer_int8_struct_field@@Base+0x118>
   3647c:	rsb	r0, r0, #0
   36480:	mov	ip, #45	; 0x2d
   36484:	add	r1, r1, #1
   36488:	uxtb	r0, r0
   3648c:	strb	ip, [r2, r3]
   36490:	bl	312f4 <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   36494:	ldr	r3, [r4, #20]
   36498:	add	r0, r6, r0
   3649c:	ldrd	r6, [sp, #8]
   364a0:	ldr	r8, [sp, #16]
   364a4:	add	r3, r3, r0
   364a8:	str	r3, [r4, #20]
   364ac:	ldrd	r4, [sp]
   364b0:	add	sp, sp, #20
   364b4:	pop	{pc}		; (ldr pc, [sp], #4)
   364b8:	bl	1451c <memcpy@plt>
   364bc:	ldr	r2, [r4, #20]
   364c0:	add	r2, r2, r6
   364c4:	str	r2, [r4, #20]
   364c8:	b	3641c <flatcc_json_printer_int8_struct_field@@Base+0xa4>
   364cc:	add	r1, r2, #1
   364d0:	mov	r3, #10
   364d4:	str	r1, [r4, #20]
   364d8:	strb	r3, [r2]
   364dc:	ldrb	r7, [r4, #25]
   364e0:	ldr	r1, [r4, #16]
   364e4:	ldr	r2, [r4, #32]
   364e8:	ldr	r0, [r4, #20]
   364ec:	mul	r7, r2, r7
   364f0:	add	r3, r0, r7
   364f4:	cmp	r1, r3
   364f8:	bcs	36510 <flatcc_json_printer_int8_struct_field@@Base+0x198>
   364fc:	mov	r1, r7
   36500:	mov	r0, r4
   36504:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   36508:	ldr	r2, [r4, #20]
   3650c:	b	363dc <flatcc_json_printer_int8_struct_field@@Base+0x64>
   36510:	mov	r2, r7
   36514:	mov	r1, #32
   36518:	bl	14594 <memset@plt>
   3651c:	ldr	r2, [r4, #20]
   36520:	add	r2, r2, r7
   36524:	str	r2, [r4, #20]
   36528:	b	363dc <flatcc_json_printer_int8_struct_field@@Base+0x64>

0003652c <flatcc_json_printer_int16_struct_field@@Base>:
   3652c:	cmp	r1, #0
   36530:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36534:	mov	r4, r0
   36538:	ldrsh	r5, [r2, r3]
   3653c:	ldr	r2, [r0, #20]
   36540:	strd	r6, [sp, #8]
   36544:	str	r8, [sp, #16]
   36548:	str	lr, [sp, #20]
   3654c:	ldr	r6, [sp, #28]
   36550:	beq	36568 <flatcc_json_printer_int16_struct_field@@Base+0x3c>
   36554:	add	r1, r2, #1
   36558:	mov	r3, #44	; 0x2c
   3655c:	str	r1, [r0, #20]
   36560:	strb	r3, [r2]
   36564:	ldr	r2, [r0, #20]
   36568:	ldrb	r1, [r4, #25]
   3656c:	cmp	r1, #0
   36570:	bne	36680 <flatcc_json_printer_int16_struct_field@@Base+0x154>
   36574:	ldr	r3, [r4, #16]
   36578:	cmp	r3, r2
   3657c:	bhi	36590 <flatcc_json_printer_int16_struct_field@@Base+0x64>
   36580:	mov	r0, r4
   36584:	ldr	r3, [r4, #44]	; 0x2c
   36588:	blx	r3
   3658c:	ldr	r2, [r4, #20]
   36590:	mov	r3, #34	; 0x22
   36594:	ldr	r1, [sp, #24]
   36598:	strb	r3, [r2]
   3659c:	ldrb	r3, [r4, #26]
   365a0:	ldr	r2, [r4, #16]
   365a4:	ldr	r0, [r4, #20]
   365a8:	cmp	r3, #0
   365ac:	addeq	r0, r0, #1
   365b0:	add	r3, r0, r6
   365b4:	cmp	r2, r3
   365b8:	mov	r2, r6
   365bc:	str	r0, [r4, #20]
   365c0:	bhi	3666c <flatcc_json_printer_int16_struct_field@@Base+0x140>
   365c4:	mov	r0, r4
   365c8:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   365cc:	ldr	r2, [r4, #20]
   365d0:	mov	r3, #34	; 0x22
   365d4:	mov	lr, #58	; 0x3a
   365d8:	lsr	r6, r5, #31
   365dc:	mov	ip, #32
   365e0:	uxth	r0, r5
   365e4:	strb	r3, [r2]
   365e8:	ldrb	r3, [r4, #26]
   365ec:	ldr	r1, [r4, #20]
   365f0:	clz	r3, r3
   365f4:	lsr	r3, r3, #5
   365f8:	add	r2, r1, r3
   365fc:	add	r2, r2, #1
   36600:	str	r2, [r4, #20]
   36604:	strb	lr, [r1, r3]
   36608:	ldr	r3, [r4, #20]
   3660c:	strb	ip, [r3]
   36610:	ldrb	r3, [r4, #25]
   36614:	ldr	r2, [r4, #20]
   36618:	adds	r3, r3, #0
   3661c:	movne	r3, #1
   36620:	cmp	r5, #0
   36624:	add	r1, r2, r3
   36628:	str	r1, [r4, #20]
   3662c:	bge	36644 <flatcc_json_printer_int16_struct_field@@Base+0x118>
   36630:	rsb	r0, r0, #0
   36634:	mov	ip, #45	; 0x2d
   36638:	add	r1, r1, #1
   3663c:	uxth	r0, r0
   36640:	strb	ip, [r2, r3]
   36644:	bl	30100 <flatcc_json_parser_struct_as_root@@Base+0x4>
   36648:	ldr	r3, [r4, #20]
   3664c:	add	r0, r6, r0
   36650:	ldrd	r6, [sp, #8]
   36654:	ldr	r8, [sp, #16]
   36658:	add	r3, r3, r0
   3665c:	str	r3, [r4, #20]
   36660:	ldrd	r4, [sp]
   36664:	add	sp, sp, #20
   36668:	pop	{pc}		; (ldr pc, [sp], #4)
   3666c:	bl	1451c <memcpy@plt>
   36670:	ldr	r2, [r4, #20]
   36674:	add	r2, r2, r6
   36678:	str	r2, [r4, #20]
   3667c:	b	365d0 <flatcc_json_printer_int16_struct_field@@Base+0xa4>
   36680:	add	r1, r2, #1
   36684:	mov	r3, #10
   36688:	str	r1, [r4, #20]
   3668c:	strb	r3, [r2]
   36690:	ldrb	r7, [r4, #25]
   36694:	ldr	r1, [r4, #16]
   36698:	ldr	r2, [r4, #32]
   3669c:	ldr	r0, [r4, #20]
   366a0:	mul	r7, r2, r7
   366a4:	add	r3, r0, r7
   366a8:	cmp	r1, r3
   366ac:	bcs	366c4 <flatcc_json_printer_int16_struct_field@@Base+0x198>
   366b0:	mov	r1, r7
   366b4:	mov	r0, r4
   366b8:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   366bc:	ldr	r2, [r4, #20]
   366c0:	b	36590 <flatcc_json_printer_int16_struct_field@@Base+0x64>
   366c4:	mov	r2, r7
   366c8:	mov	r1, #32
   366cc:	bl	14594 <memset@plt>
   366d0:	ldr	r2, [r4, #20]
   366d4:	add	r2, r2, r7
   366d8:	str	r2, [r4, #20]
   366dc:	b	36590 <flatcc_json_printer_int16_struct_field@@Base+0x64>

000366e0 <flatcc_json_printer_int32_struct_field@@Base>:
   366e0:	cmp	r1, #0
   366e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   366e8:	mov	r4, r0
   366ec:	ldr	r5, [r2, r3]
   366f0:	ldr	r2, [r0, #20]
   366f4:	strd	r6, [sp, #8]
   366f8:	str	r8, [sp, #16]
   366fc:	str	lr, [sp, #20]
   36700:	ldr	r6, [sp, #28]
   36704:	beq	3671c <flatcc_json_printer_int32_struct_field@@Base+0x3c>
   36708:	add	r1, r2, #1
   3670c:	mov	r3, #44	; 0x2c
   36710:	str	r1, [r0, #20]
   36714:	strb	r3, [r2]
   36718:	ldr	r2, [r0, #20]
   3671c:	ldrb	r1, [r4, #25]
   36720:	cmp	r1, #0
   36724:	bne	36830 <flatcc_json_printer_int32_struct_field@@Base+0x150>
   36728:	ldr	r3, [r4, #16]
   3672c:	cmp	r3, r2
   36730:	bhi	36744 <flatcc_json_printer_int32_struct_field@@Base+0x64>
   36734:	mov	r0, r4
   36738:	ldr	r3, [r4, #44]	; 0x2c
   3673c:	blx	r3
   36740:	ldr	r2, [r4, #20]
   36744:	mov	r3, #34	; 0x22
   36748:	ldr	r1, [sp, #24]
   3674c:	strb	r3, [r2]
   36750:	ldrb	r3, [r4, #26]
   36754:	ldr	r2, [r4, #16]
   36758:	ldr	r0, [r4, #20]
   3675c:	cmp	r3, #0
   36760:	addeq	r0, r0, #1
   36764:	add	r3, r0, r6
   36768:	cmp	r2, r3
   3676c:	mov	r2, r6
   36770:	str	r0, [r4, #20]
   36774:	bhi	3681c <flatcc_json_printer_int32_struct_field@@Base+0x13c>
   36778:	mov	r0, r4
   3677c:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   36780:	ldr	r2, [r4, #20]
   36784:	mov	r3, #34	; 0x22
   36788:	mov	ip, #58	; 0x3a
   3678c:	lsr	r6, r5, #31
   36790:	mov	r0, #32
   36794:	strb	r3, [r2]
   36798:	ldrb	r3, [r4, #26]
   3679c:	ldr	r1, [r4, #20]
   367a0:	clz	r3, r3
   367a4:	lsr	r3, r3, #5
   367a8:	add	r2, r1, r3
   367ac:	add	r2, r2, #1
   367b0:	str	r2, [r4, #20]
   367b4:	strb	ip, [r1, r3]
   367b8:	ldr	r3, [r4, #20]
   367bc:	strb	r0, [r3]
   367c0:	ldrb	r3, [r4, #25]
   367c4:	ldr	r2, [r4, #20]
   367c8:	adds	r3, r3, #0
   367cc:	movne	r3, #1
   367d0:	cmp	r5, #0
   367d4:	add	r1, r2, r3
   367d8:	str	r1, [r4, #20]
   367dc:	bge	367f0 <flatcc_json_printer_int32_struct_field@@Base+0x110>
   367e0:	mov	r0, #45	; 0x2d
   367e4:	rsb	r5, r5, #0
   367e8:	add	r1, r1, #1
   367ec:	strb	r0, [r2, r3]
   367f0:	mov	r0, r5
   367f4:	bl	30268 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   367f8:	ldr	r3, [r4, #20]
   367fc:	add	r0, r6, r0
   36800:	ldrd	r6, [sp, #8]
   36804:	ldr	r8, [sp, #16]
   36808:	add	r3, r3, r0
   3680c:	str	r3, [r4, #20]
   36810:	ldrd	r4, [sp]
   36814:	add	sp, sp, #20
   36818:	pop	{pc}		; (ldr pc, [sp], #4)
   3681c:	bl	1451c <memcpy@plt>
   36820:	ldr	r2, [r4, #20]
   36824:	add	r2, r2, r6
   36828:	str	r2, [r4, #20]
   3682c:	b	36784 <flatcc_json_printer_int32_struct_field@@Base+0xa4>
   36830:	add	r1, r2, #1
   36834:	mov	r3, #10
   36838:	str	r1, [r4, #20]
   3683c:	strb	r3, [r2]
   36840:	ldrb	r7, [r4, #25]
   36844:	ldr	r1, [r4, #16]
   36848:	ldr	r2, [r4, #32]
   3684c:	ldr	r0, [r4, #20]
   36850:	mul	r7, r2, r7
   36854:	add	r3, r0, r7
   36858:	cmp	r1, r3
   3685c:	bcs	36874 <flatcc_json_printer_int32_struct_field@@Base+0x194>
   36860:	mov	r1, r7
   36864:	mov	r0, r4
   36868:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3686c:	ldr	r2, [r4, #20]
   36870:	b	36744 <flatcc_json_printer_int32_struct_field@@Base+0x64>
   36874:	mov	r2, r7
   36878:	mov	r1, #32
   3687c:	bl	14594 <memset@plt>
   36880:	ldr	r2, [r4, #20]
   36884:	add	r2, r2, r7
   36888:	str	r2, [r4, #20]
   3688c:	b	36744 <flatcc_json_printer_int32_struct_field@@Base+0x64>

00036890 <flatcc_json_printer_int64_struct_field@@Base>:
   36890:	cmp	r1, #0
   36894:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36898:	mov	r4, r0
   3689c:	strd	r6, [sp, #8]
   368a0:	str	r8, [sp, #16]
   368a4:	str	lr, [sp, #20]
   368a8:	ldrd	r6, [r2, r3]
   368ac:	ldr	r2, [r0, #20]
   368b0:	ldr	r5, [sp, #28]
   368b4:	beq	368cc <flatcc_json_printer_int64_struct_field@@Base+0x3c>
   368b8:	add	r1, r2, #1
   368bc:	mov	r3, #44	; 0x2c
   368c0:	str	r1, [r0, #20]
   368c4:	strb	r3, [r2]
   368c8:	ldr	r2, [r0, #20]
   368cc:	ldrb	r1, [r4, #25]
   368d0:	cmp	r1, #0
   368d4:	bne	369ec <flatcc_json_printer_int64_struct_field@@Base+0x15c>
   368d8:	ldr	r3, [r4, #16]
   368dc:	cmp	r3, r2
   368e0:	bhi	368f4 <flatcc_json_printer_int64_struct_field@@Base+0x64>
   368e4:	mov	r0, r4
   368e8:	ldr	r3, [r4, #44]	; 0x2c
   368ec:	blx	r3
   368f0:	ldr	r2, [r4, #20]
   368f4:	mov	r3, #34	; 0x22
   368f8:	ldr	r1, [sp, #24]
   368fc:	strb	r3, [r2]
   36900:	ldrb	r3, [r4, #26]
   36904:	ldr	r2, [r4, #16]
   36908:	ldr	r0, [r4, #20]
   3690c:	cmp	r3, #0
   36910:	addeq	r0, r0, #1
   36914:	add	r3, r0, r5
   36918:	cmp	r2, r3
   3691c:	mov	r2, r5
   36920:	str	r0, [r4, #20]
   36924:	bhi	369d8 <flatcc_json_printer_int64_struct_field@@Base+0x148>
   36928:	mov	r0, r4
   3692c:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   36930:	ldr	r2, [r4, #20]
   36934:	mov	r3, #34	; 0x22
   36938:	mov	ip, #58	; 0x3a
   3693c:	lsr	r5, r7, #31
   36940:	mov	r0, #32
   36944:	strb	r3, [r2]
   36948:	ldrb	r3, [r4, #26]
   3694c:	ldr	r1, [r4, #20]
   36950:	clz	r3, r3
   36954:	lsr	r3, r3, #5
   36958:	add	r2, r1, r3
   3695c:	add	r2, r2, #1
   36960:	str	r2, [r4, #20]
   36964:	strb	ip, [r1, r3]
   36968:	ldr	r3, [r4, #20]
   3696c:	strb	r0, [r3]
   36970:	ldrb	r3, [r4, #25]
   36974:	ldr	r1, [r4, #20]
   36978:	adds	r3, r3, #0
   3697c:	movne	r3, #1
   36980:	cmp	r6, #0
   36984:	sbcs	r2, r7, #0
   36988:	add	r2, r1, r3
   3698c:	str	r2, [r4, #20]
   36990:	bge	369a8 <flatcc_json_printer_int64_struct_field@@Base+0x118>
   36994:	rsbs	r6, r6, #0
   36998:	mov	r0, #45	; 0x2d
   3699c:	rsc	r7, r7, #0
   369a0:	add	r2, r2, #1
   369a4:	strb	r0, [r1, r3]
   369a8:	mov	r0, r6
   369ac:	mov	r1, r7
   369b0:	bl	30594 <flatcc_json_parser_struct_as_root@@Base+0x498>
   369b4:	ldr	r3, [r4, #20]
   369b8:	add	r0, r5, r0
   369bc:	ldrd	r6, [sp, #8]
   369c0:	ldr	r8, [sp, #16]
   369c4:	add	r3, r3, r0
   369c8:	str	r3, [r4, #20]
   369cc:	ldrd	r4, [sp]
   369d0:	add	sp, sp, #20
   369d4:	pop	{pc}		; (ldr pc, [sp], #4)
   369d8:	bl	1451c <memcpy@plt>
   369dc:	ldr	r2, [r4, #20]
   369e0:	add	r2, r2, r5
   369e4:	str	r2, [r4, #20]
   369e8:	b	36934 <flatcc_json_printer_int64_struct_field@@Base+0xa4>
   369ec:	add	r1, r2, #1
   369f0:	mov	r3, #10
   369f4:	str	r1, [r4, #20]
   369f8:	strb	r3, [r2]
   369fc:	ldrb	r8, [r4, #25]
   36a00:	ldr	r1, [r4, #16]
   36a04:	ldr	r2, [r4, #32]
   36a08:	ldr	r0, [r4, #20]
   36a0c:	mul	r8, r2, r8
   36a10:	add	r3, r0, r8
   36a14:	cmp	r1, r3
   36a18:	bcs	36a30 <flatcc_json_printer_int64_struct_field@@Base+0x1a0>
   36a1c:	mov	r1, r8
   36a20:	mov	r0, r4
   36a24:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   36a28:	ldr	r2, [r4, #20]
   36a2c:	b	368f4 <flatcc_json_printer_int64_struct_field@@Base+0x64>
   36a30:	mov	r2, r8
   36a34:	mov	r1, #32
   36a38:	bl	14594 <memset@plt>
   36a3c:	ldr	r2, [r4, #20]
   36a40:	add	r2, r2, r8
   36a44:	str	r2, [r4, #20]
   36a48:	b	368f4 <flatcc_json_printer_int64_struct_field@@Base+0x64>

00036a4c <flatcc_json_printer_bool_struct_field@@Base>:
   36a4c:	cmp	r1, #0
   36a50:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36a54:	mov	r4, r0
   36a58:	strd	r6, [sp, #8]
   36a5c:	str	r8, [sp, #16]
   36a60:	str	lr, [sp, #20]
   36a64:	ldrb	r5, [r2, r3]
   36a68:	ldr	r2, [r0, #20]
   36a6c:	ldr	r6, [sp, #28]
   36a70:	beq	36a88 <flatcc_json_printer_bool_struct_field@@Base+0x3c>
   36a74:	add	r1, r2, #1
   36a78:	mov	r3, #44	; 0x2c
   36a7c:	str	r1, [r0, #20]
   36a80:	strb	r3, [r2]
   36a84:	ldr	r2, [r0, #20]
   36a88:	ldrb	r1, [r4, #25]
   36a8c:	cmp	r1, #0
   36a90:	bne	36b7c <flatcc_json_printer_bool_struct_field@@Base+0x130>
   36a94:	ldr	r3, [r4, #16]
   36a98:	cmp	r3, r2
   36a9c:	bhi	36ab0 <flatcc_json_printer_bool_struct_field@@Base+0x64>
   36aa0:	mov	r0, r4
   36aa4:	ldr	r3, [r4, #44]	; 0x2c
   36aa8:	blx	r3
   36aac:	ldr	r2, [r4, #20]
   36ab0:	mov	r3, #34	; 0x22
   36ab4:	ldr	r1, [sp, #24]
   36ab8:	strb	r3, [r2]
   36abc:	ldrb	r3, [r4, #26]
   36ac0:	ldr	r2, [r4, #16]
   36ac4:	ldr	r0, [r4, #20]
   36ac8:	cmp	r3, #0
   36acc:	addeq	r0, r0, #1
   36ad0:	add	r3, r0, r6
   36ad4:	cmp	r2, r3
   36ad8:	mov	r2, r6
   36adc:	str	r0, [r4, #20]
   36ae0:	bhi	36b68 <flatcc_json_printer_bool_struct_field@@Base+0x11c>
   36ae4:	mov	r0, r4
   36ae8:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   36aec:	ldr	r2, [r4, #20]
   36af0:	mov	r3, #34	; 0x22
   36af4:	mov	lr, #58	; 0x3a
   36af8:	mov	ip, #32
   36afc:	mov	r0, r5
   36b00:	strb	r3, [r2]
   36b04:	ldrb	r3, [r4, #26]
   36b08:	ldr	r1, [r4, #20]
   36b0c:	clz	r3, r3
   36b10:	lsr	r3, r3, #5
   36b14:	add	r2, r1, r3
   36b18:	add	r2, r2, #1
   36b1c:	str	r2, [r4, #20]
   36b20:	strb	lr, [r1, r3]
   36b24:	ldr	r3, [r4, #20]
   36b28:	strb	ip, [r3]
   36b2c:	ldrb	r2, [r4, #25]
   36b30:	ldr	r3, [r4, #20]
   36b34:	cmp	r2, #0
   36b38:	addne	r3, r3, #1
   36b3c:	mov	r1, r3
   36b40:	str	r3, [r4, #20]
   36b44:	bl	31428 <flatcc_json_parser_struct_as_root@@Base+0x132c>
   36b48:	ldr	r3, [r4, #20]
   36b4c:	ldrd	r6, [sp, #8]
   36b50:	ldr	r8, [sp, #16]
   36b54:	add	r0, r3, r0
   36b58:	str	r0, [r4, #20]
   36b5c:	ldrd	r4, [sp]
   36b60:	add	sp, sp, #20
   36b64:	pop	{pc}		; (ldr pc, [sp], #4)
   36b68:	bl	1451c <memcpy@plt>
   36b6c:	ldr	r2, [r4, #20]
   36b70:	add	r2, r2, r6
   36b74:	str	r2, [r4, #20]
   36b78:	b	36af0 <flatcc_json_printer_bool_struct_field@@Base+0xa4>
   36b7c:	add	r1, r2, #1
   36b80:	mov	r3, #10
   36b84:	str	r1, [r4, #20]
   36b88:	strb	r3, [r2]
   36b8c:	ldrb	r7, [r4, #25]
   36b90:	ldr	r1, [r4, #16]
   36b94:	ldr	r2, [r4, #32]
   36b98:	ldr	r0, [r4, #20]
   36b9c:	mul	r7, r2, r7
   36ba0:	add	r3, r0, r7
   36ba4:	cmp	r1, r3
   36ba8:	bcs	36bc0 <flatcc_json_printer_bool_struct_field@@Base+0x174>
   36bac:	mov	r1, r7
   36bb0:	mov	r0, r4
   36bb4:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   36bb8:	ldr	r2, [r4, #20]
   36bbc:	b	36ab0 <flatcc_json_printer_bool_struct_field@@Base+0x64>
   36bc0:	mov	r2, r7
   36bc4:	mov	r1, #32
   36bc8:	bl	14594 <memset@plt>
   36bcc:	ldr	r2, [r4, #20]
   36bd0:	add	r2, r2, r7
   36bd4:	str	r2, [r4, #20]
   36bd8:	b	36ab0 <flatcc_json_printer_bool_struct_field@@Base+0x64>

00036bdc <flatcc_json_printer_float_struct_field@@Base>:
   36bdc:	add	r3, r2, r3
   36be0:	cmp	r1, #0
   36be4:	strd	r4, [sp, #-16]!
   36be8:	ldr	r2, [r0, #20]
   36bec:	mov	r4, r0
   36bf0:	str	r6, [sp, #8]
   36bf4:	str	lr, [sp, #12]
   36bf8:	vpush	{d8}
   36bfc:	vldr	s16, [r3]
   36c00:	ldr	r5, [sp, #28]
   36c04:	beq	36c1c <flatcc_json_printer_float_struct_field@@Base+0x40>
   36c08:	add	r1, r2, #1
   36c0c:	mov	r3, #44	; 0x2c
   36c10:	str	r1, [r0, #20]
   36c14:	strb	r3, [r2]
   36c18:	ldr	r2, [r0, #20]
   36c1c:	ldrb	r1, [r4, #25]
   36c20:	cmp	r1, #0
   36c24:	bne	36d10 <flatcc_json_printer_float_struct_field@@Base+0x134>
   36c28:	ldr	r3, [r4, #16]
   36c2c:	cmp	r3, r2
   36c30:	bhi	36c44 <flatcc_json_printer_float_struct_field@@Base+0x68>
   36c34:	mov	r0, r4
   36c38:	ldr	r3, [r4, #44]	; 0x2c
   36c3c:	blx	r3
   36c40:	ldr	r2, [r4, #20]
   36c44:	mov	r3, #34	; 0x22
   36c48:	ldr	r1, [sp, #24]
   36c4c:	strb	r3, [r2]
   36c50:	ldrb	r3, [r4, #26]
   36c54:	ldr	r2, [r4, #16]
   36c58:	ldr	r0, [r4, #20]
   36c5c:	cmp	r3, #0
   36c60:	addeq	r0, r0, #1
   36c64:	add	r3, r0, r5
   36c68:	cmp	r2, r3
   36c6c:	mov	r2, r5
   36c70:	str	r0, [r4, #20]
   36c74:	bhi	36cfc <flatcc_json_printer_float_struct_field@@Base+0x120>
   36c78:	mov	r0, r4
   36c7c:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   36c80:	ldr	r2, [r4, #20]
   36c84:	mov	r3, #34	; 0x22
   36c88:	mov	ip, #58	; 0x3a
   36c8c:	vcvt.f64.f32	d0, s16
   36c90:	mov	r0, #32
   36c94:	strb	r3, [r2]
   36c98:	ldrb	r3, [r4, #26]
   36c9c:	ldr	r1, [r4, #20]
   36ca0:	clz	r3, r3
   36ca4:	lsr	r3, r3, #5
   36ca8:	add	r2, r1, r3
   36cac:	add	r2, r2, #1
   36cb0:	str	r2, [r4, #20]
   36cb4:	strb	ip, [r1, r3]
   36cb8:	ldr	r3, [r4, #20]
   36cbc:	strb	r0, [r3]
   36cc0:	ldrb	r2, [r4, #25]
   36cc4:	ldr	r3, [r4, #20]
   36cc8:	cmp	r2, #0
   36ccc:	addne	r3, r3, #1
   36cd0:	mov	r0, r3
   36cd4:	str	r3, [r4, #20]
   36cd8:	bl	316e8 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   36cdc:	ldr	r3, [r4, #20]
   36ce0:	vpop	{d8}
   36ce4:	add	r0, r3, r0
   36ce8:	ldr	r6, [sp, #8]
   36cec:	str	r0, [r4, #20]
   36cf0:	ldrd	r4, [sp]
   36cf4:	add	sp, sp, #12
   36cf8:	pop	{pc}		; (ldr pc, [sp], #4)
   36cfc:	bl	1451c <memcpy@plt>
   36d00:	ldr	r2, [r4, #20]
   36d04:	add	r2, r2, r5
   36d08:	str	r2, [r4, #20]
   36d0c:	b	36c84 <flatcc_json_printer_float_struct_field@@Base+0xa8>
   36d10:	add	r1, r2, #1
   36d14:	mov	r3, #10
   36d18:	str	r1, [r4, #20]
   36d1c:	strb	r3, [r2]
   36d20:	ldrb	r6, [r4, #25]
   36d24:	ldr	r1, [r4, #16]
   36d28:	ldr	r2, [r4, #32]
   36d2c:	ldr	r0, [r4, #20]
   36d30:	mul	r6, r2, r6
   36d34:	add	r3, r0, r6
   36d38:	cmp	r1, r3
   36d3c:	bcs	36d54 <flatcc_json_printer_float_struct_field@@Base+0x178>
   36d40:	mov	r1, r6
   36d44:	mov	r0, r4
   36d48:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   36d4c:	ldr	r2, [r4, #20]
   36d50:	b	36c44 <flatcc_json_printer_float_struct_field@@Base+0x68>
   36d54:	mov	r2, r6
   36d58:	mov	r1, #32
   36d5c:	bl	14594 <memset@plt>
   36d60:	ldr	r2, [r4, #20]
   36d64:	add	r2, r2, r6
   36d68:	str	r2, [r4, #20]
   36d6c:	b	36c44 <flatcc_json_printer_float_struct_field@@Base+0x68>

00036d70 <flatcc_json_printer_double_struct_field@@Base>:
   36d70:	add	r3, r2, r3
   36d74:	cmp	r1, #0
   36d78:	strd	r4, [sp, #-16]!
   36d7c:	ldr	r2, [r0, #20]
   36d80:	mov	r4, r0
   36d84:	str	r6, [sp, #8]
   36d88:	str	lr, [sp, #12]
   36d8c:	vpush	{d8}
   36d90:	vldr	d8, [r3]
   36d94:	ldr	r5, [sp, #28]
   36d98:	beq	36db0 <flatcc_json_printer_double_struct_field@@Base+0x40>
   36d9c:	add	r1, r2, #1
   36da0:	mov	r3, #44	; 0x2c
   36da4:	str	r1, [r0, #20]
   36da8:	strb	r3, [r2]
   36dac:	ldr	r2, [r0, #20]
   36db0:	ldrb	r1, [r4, #25]
   36db4:	cmp	r1, #0
   36db8:	bne	36ea4 <flatcc_json_printer_double_struct_field@@Base+0x134>
   36dbc:	ldr	r3, [r4, #16]
   36dc0:	cmp	r3, r2
   36dc4:	bhi	36dd8 <flatcc_json_printer_double_struct_field@@Base+0x68>
   36dc8:	mov	r0, r4
   36dcc:	ldr	r3, [r4, #44]	; 0x2c
   36dd0:	blx	r3
   36dd4:	ldr	r2, [r4, #20]
   36dd8:	mov	r3, #34	; 0x22
   36ddc:	ldr	r1, [sp, #24]
   36de0:	strb	r3, [r2]
   36de4:	ldrb	r3, [r4, #26]
   36de8:	ldr	r2, [r4, #16]
   36dec:	ldr	r0, [r4, #20]
   36df0:	cmp	r3, #0
   36df4:	addeq	r0, r0, #1
   36df8:	add	r3, r0, r5
   36dfc:	cmp	r2, r3
   36e00:	mov	r2, r5
   36e04:	str	r0, [r4, #20]
   36e08:	bhi	36e90 <flatcc_json_printer_double_struct_field@@Base+0x120>
   36e0c:	mov	r0, r4
   36e10:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   36e14:	ldr	r2, [r4, #20]
   36e18:	mov	r3, #34	; 0x22
   36e1c:	mov	ip, #58	; 0x3a
   36e20:	vmov.f64	d0, d8
   36e24:	mov	r0, #32
   36e28:	strb	r3, [r2]
   36e2c:	ldrb	r3, [r4, #26]
   36e30:	ldr	r1, [r4, #20]
   36e34:	clz	r3, r3
   36e38:	lsr	r3, r3, #5
   36e3c:	add	r2, r1, r3
   36e40:	add	r2, r2, #1
   36e44:	str	r2, [r4, #20]
   36e48:	strb	ip, [r1, r3]
   36e4c:	ldr	r3, [r4, #20]
   36e50:	strb	r0, [r3]
   36e54:	ldrb	r2, [r4, #25]
   36e58:	ldr	r3, [r4, #20]
   36e5c:	cmp	r2, #0
   36e60:	addne	r3, r3, #1
   36e64:	mov	r0, r3
   36e68:	str	r3, [r4, #20]
   36e6c:	bl	316e8 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   36e70:	ldr	r3, [r4, #20]
   36e74:	vpop	{d8}
   36e78:	add	r0, r3, r0
   36e7c:	ldr	r6, [sp, #8]
   36e80:	str	r0, [r4, #20]
   36e84:	ldrd	r4, [sp]
   36e88:	add	sp, sp, #12
   36e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   36e90:	bl	1451c <memcpy@plt>
   36e94:	ldr	r2, [r4, #20]
   36e98:	add	r2, r2, r5
   36e9c:	str	r2, [r4, #20]
   36ea0:	b	36e18 <flatcc_json_printer_double_struct_field@@Base+0xa8>
   36ea4:	add	r1, r2, #1
   36ea8:	mov	r3, #10
   36eac:	str	r1, [r4, #20]
   36eb0:	strb	r3, [r2]
   36eb4:	ldrb	r6, [r4, #25]
   36eb8:	ldr	r1, [r4, #16]
   36ebc:	ldr	r2, [r4, #32]
   36ec0:	ldr	r0, [r4, #20]
   36ec4:	mul	r6, r2, r6
   36ec8:	add	r3, r0, r6
   36ecc:	cmp	r1, r3
   36ed0:	bcs	36ee8 <flatcc_json_printer_double_struct_field@@Base+0x178>
   36ed4:	mov	r1, r6
   36ed8:	mov	r0, r4
   36edc:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   36ee0:	ldr	r2, [r4, #20]
   36ee4:	b	36dd8 <flatcc_json_printer_double_struct_field@@Base+0x68>
   36ee8:	mov	r2, r6
   36eec:	mov	r1, #32
   36ef0:	bl	14594 <memset@plt>
   36ef4:	ldr	r2, [r4, #20]
   36ef8:	add	r2, r2, r6
   36efc:	str	r2, [r4, #20]
   36f00:	b	36dd8 <flatcc_json_printer_double_struct_field@@Base+0x68>

00036f04 <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   36f04:	cmp	r1, #0
   36f08:	strd	r4, [sp, #-32]!	; 0xffffffe0
   36f0c:	mov	r4, r0
   36f10:	strd	r6, [sp, #8]
   36f14:	strd	r8, [sp, #16]
   36f18:	str	sl, [sp, #24]
   36f1c:	str	lr, [sp, #28]
   36f20:	ldrb	r5, [r2, r3]
   36f24:	ldr	r2, [r0, #20]
   36f28:	ldr	r8, [sp, #32]
   36f2c:	ldr	r7, [sp, #36]	; 0x24
   36f30:	ldr	r6, [sp, #40]	; 0x28
   36f34:	beq	36f4c <flatcc_json_printer_uint8_enum_struct_field@@Base+0x48>
   36f38:	add	r1, r2, #1
   36f3c:	mov	r3, #44	; 0x2c
   36f40:	str	r1, [r0, #20]
   36f44:	strb	r3, [r2]
   36f48:	ldr	r2, [r0, #20]
   36f4c:	ldrb	r1, [r4, #25]
   36f50:	cmp	r1, #0
   36f54:	bne	3707c <flatcc_json_printer_uint8_enum_struct_field@@Base+0x178>
   36f58:	ldr	r3, [r4, #16]
   36f5c:	cmp	r3, r2
   36f60:	bhi	36f74 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x70>
   36f64:	mov	r0, r4
   36f68:	ldr	r3, [r4, #44]	; 0x2c
   36f6c:	blx	r3
   36f70:	ldr	r2, [r4, #20]
   36f74:	mov	r3, #34	; 0x22
   36f78:	strb	r3, [r2]
   36f7c:	ldrb	r3, [r4, #26]
   36f80:	ldr	r2, [r4, #16]
   36f84:	ldr	r0, [r4, #20]
   36f88:	cmp	r3, #0
   36f8c:	addeq	r0, r0, #1
   36f90:	add	r3, r0, r7
   36f94:	cmp	r2, r3
   36f98:	str	r0, [r4, #20]
   36f9c:	bhi	37034 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x130>
   36fa0:	mov	r2, r7
   36fa4:	mov	r1, r8
   36fa8:	mov	r0, r4
   36fac:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   36fb0:	ldr	r2, [r4, #20]
   36fb4:	mov	r3, #34	; 0x22
   36fb8:	mov	ip, #58	; 0x3a
   36fbc:	mov	r0, #32
   36fc0:	strb	r3, [r2]
   36fc4:	ldrb	r3, [r4, #26]
   36fc8:	ldr	r1, [r4, #20]
   36fcc:	clz	r3, r3
   36fd0:	lsr	r3, r3, #5
   36fd4:	add	r2, r1, r3
   36fd8:	add	r2, r2, #1
   36fdc:	str	r2, [r4, #20]
   36fe0:	strb	ip, [r1, r3]
   36fe4:	ldr	r3, [r4, #20]
   36fe8:	strb	r0, [r3]
   36fec:	ldrb	r2, [r4, #25]
   36ff0:	ldr	r1, [r4, #20]
   36ff4:	ldrb	r3, [r4, #27]
   36ff8:	cmp	r2, #0
   36ffc:	addne	r1, r1, #1
   37000:	cmp	r3, #0
   37004:	str	r1, [r4, #20]
   37008:	bne	37050 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x14c>
   3700c:	mov	r1, r5
   37010:	mov	r0, r4
   37014:	ldrd	r4, [sp]
   37018:	mov	r3, r6
   3701c:	ldrd	r6, [sp, #8]
   37020:	ldrd	r8, [sp, #16]
   37024:	ldr	sl, [sp, #24]
   37028:	ldr	lr, [sp, #28]
   3702c:	add	sp, sp, #32
   37030:	bx	r3
   37034:	mov	r2, r7
   37038:	mov	r1, r8
   3703c:	bl	1451c <memcpy@plt>
   37040:	ldr	r2, [r4, #20]
   37044:	add	r2, r2, r7
   37048:	str	r2, [r4, #20]
   3704c:	b	36fb4 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xb0>
   37050:	mov	r0, r5
   37054:	bl	312f4 <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   37058:	ldr	r3, [r4, #20]
   3705c:	ldrd	r6, [sp, #8]
   37060:	ldrd	r8, [sp, #16]
   37064:	add	r0, r3, r0
   37068:	ldr	sl, [sp, #24]
   3706c:	str	r0, [r4, #20]
   37070:	ldrd	r4, [sp]
   37074:	add	sp, sp, #28
   37078:	pop	{pc}		; (ldr pc, [sp], #4)
   3707c:	add	r1, r2, #1
   37080:	mov	r3, #10
   37084:	str	r1, [r4, #20]
   37088:	strb	r3, [r2]
   3708c:	ldrb	r3, [r4, #25]
   37090:	ldr	r1, [r4, #16]
   37094:	ldr	r2, [r4, #32]
   37098:	ldr	r0, [r4, #20]
   3709c:	mul	r9, r2, r3
   370a0:	add	r3, r0, r9
   370a4:	cmp	r1, r3
   370a8:	bcs	370c0 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x1bc>
   370ac:	mov	r1, r9
   370b0:	mov	r0, r4
   370b4:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   370b8:	ldr	r2, [r4, #20]
   370bc:	b	36f74 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x70>
   370c0:	mov	r2, r9
   370c4:	mov	r1, #32
   370c8:	bl	14594 <memset@plt>
   370cc:	ldr	r2, [r4, #20]
   370d0:	add	r2, r2, r9
   370d4:	str	r2, [r4, #20]
   370d8:	b	36f74 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x70>

000370dc <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   370dc:	cmp	r1, #0
   370e0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   370e4:	mov	r4, r0
   370e8:	ldrh	r5, [r2, r3]
   370ec:	ldr	r2, [r0, #20]
   370f0:	strd	r6, [sp, #8]
   370f4:	strd	r8, [sp, #16]
   370f8:	str	sl, [sp, #24]
   370fc:	str	lr, [sp, #28]
   37100:	ldr	r8, [sp, #32]
   37104:	ldr	r7, [sp, #36]	; 0x24
   37108:	ldr	r6, [sp, #40]	; 0x28
   3710c:	beq	37124 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x48>
   37110:	add	r1, r2, #1
   37114:	mov	r3, #44	; 0x2c
   37118:	str	r1, [r0, #20]
   3711c:	strb	r3, [r2]
   37120:	ldr	r2, [r0, #20]
   37124:	ldrb	r1, [r4, #25]
   37128:	cmp	r1, #0
   3712c:	bne	37254 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x178>
   37130:	ldr	r3, [r4, #16]
   37134:	cmp	r3, r2
   37138:	bhi	3714c <flatcc_json_printer_uint16_enum_struct_field@@Base+0x70>
   3713c:	mov	r0, r4
   37140:	ldr	r3, [r4, #44]	; 0x2c
   37144:	blx	r3
   37148:	ldr	r2, [r4, #20]
   3714c:	mov	r3, #34	; 0x22
   37150:	strb	r3, [r2]
   37154:	ldrb	r3, [r4, #26]
   37158:	ldr	r2, [r4, #16]
   3715c:	ldr	r0, [r4, #20]
   37160:	cmp	r3, #0
   37164:	addeq	r0, r0, #1
   37168:	add	r3, r0, r7
   3716c:	cmp	r2, r3
   37170:	str	r0, [r4, #20]
   37174:	bhi	3720c <flatcc_json_printer_uint16_enum_struct_field@@Base+0x130>
   37178:	mov	r2, r7
   3717c:	mov	r1, r8
   37180:	mov	r0, r4
   37184:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   37188:	ldr	r2, [r4, #20]
   3718c:	mov	r3, #34	; 0x22
   37190:	mov	ip, #58	; 0x3a
   37194:	mov	r0, #32
   37198:	strb	r3, [r2]
   3719c:	ldrb	r3, [r4, #26]
   371a0:	ldr	r1, [r4, #20]
   371a4:	clz	r3, r3
   371a8:	lsr	r3, r3, #5
   371ac:	add	r2, r1, r3
   371b0:	add	r2, r2, #1
   371b4:	str	r2, [r4, #20]
   371b8:	strb	ip, [r1, r3]
   371bc:	ldr	r3, [r4, #20]
   371c0:	strb	r0, [r3]
   371c4:	ldrb	r2, [r4, #25]
   371c8:	ldr	r1, [r4, #20]
   371cc:	ldrb	r3, [r4, #27]
   371d0:	cmp	r2, #0
   371d4:	addne	r1, r1, #1
   371d8:	cmp	r3, #0
   371dc:	str	r1, [r4, #20]
   371e0:	bne	37228 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x14c>
   371e4:	mov	r1, r5
   371e8:	mov	r0, r4
   371ec:	ldrd	r4, [sp]
   371f0:	mov	r3, r6
   371f4:	ldrd	r6, [sp, #8]
   371f8:	ldrd	r8, [sp, #16]
   371fc:	ldr	sl, [sp, #24]
   37200:	ldr	lr, [sp, #28]
   37204:	add	sp, sp, #32
   37208:	bx	r3
   3720c:	mov	r2, r7
   37210:	mov	r1, r8
   37214:	bl	1451c <memcpy@plt>
   37218:	ldr	r2, [r4, #20]
   3721c:	add	r2, r2, r7
   37220:	str	r2, [r4, #20]
   37224:	b	3718c <flatcc_json_printer_uint16_enum_struct_field@@Base+0xb0>
   37228:	mov	r0, r5
   3722c:	bl	30100 <flatcc_json_parser_struct_as_root@@Base+0x4>
   37230:	ldr	r3, [r4, #20]
   37234:	ldrd	r6, [sp, #8]
   37238:	ldrd	r8, [sp, #16]
   3723c:	add	r0, r3, r0
   37240:	ldr	sl, [sp, #24]
   37244:	str	r0, [r4, #20]
   37248:	ldrd	r4, [sp]
   3724c:	add	sp, sp, #28
   37250:	pop	{pc}		; (ldr pc, [sp], #4)
   37254:	add	r1, r2, #1
   37258:	mov	r3, #10
   3725c:	str	r1, [r4, #20]
   37260:	strb	r3, [r2]
   37264:	ldrb	r3, [r4, #25]
   37268:	ldr	r1, [r4, #16]
   3726c:	ldr	r2, [r4, #32]
   37270:	ldr	r0, [r4, #20]
   37274:	mul	r9, r2, r3
   37278:	add	r3, r0, r9
   3727c:	cmp	r1, r3
   37280:	bcs	37298 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x1bc>
   37284:	mov	r1, r9
   37288:	mov	r0, r4
   3728c:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   37290:	ldr	r2, [r4, #20]
   37294:	b	3714c <flatcc_json_printer_uint16_enum_struct_field@@Base+0x70>
   37298:	mov	r2, r9
   3729c:	mov	r1, #32
   372a0:	bl	14594 <memset@plt>
   372a4:	ldr	r2, [r4, #20]
   372a8:	add	r2, r2, r9
   372ac:	str	r2, [r4, #20]
   372b0:	b	3714c <flatcc_json_printer_uint16_enum_struct_field@@Base+0x70>

000372b4 <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   372b4:	cmp	r1, #0
   372b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   372bc:	mov	r4, r0
   372c0:	ldr	r5, [r2, r3]
   372c4:	ldr	r2, [r0, #20]
   372c8:	strd	r6, [sp, #8]
   372cc:	strd	r8, [sp, #16]
   372d0:	str	sl, [sp, #24]
   372d4:	str	lr, [sp, #28]
   372d8:	ldr	r8, [sp, #32]
   372dc:	ldr	r7, [sp, #36]	; 0x24
   372e0:	ldr	r6, [sp, #40]	; 0x28
   372e4:	beq	372fc <flatcc_json_printer_uint32_enum_struct_field@@Base+0x48>
   372e8:	add	r1, r2, #1
   372ec:	mov	r3, #44	; 0x2c
   372f0:	str	r1, [r0, #20]
   372f4:	strb	r3, [r2]
   372f8:	ldr	r2, [r0, #20]
   372fc:	ldrb	r1, [r4, #25]
   37300:	cmp	r1, #0
   37304:	bne	3742c <flatcc_json_printer_uint32_enum_struct_field@@Base+0x178>
   37308:	ldr	r3, [r4, #16]
   3730c:	cmp	r3, r2
   37310:	bhi	37324 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x70>
   37314:	mov	r0, r4
   37318:	ldr	r3, [r4, #44]	; 0x2c
   3731c:	blx	r3
   37320:	ldr	r2, [r4, #20]
   37324:	mov	r3, #34	; 0x22
   37328:	strb	r3, [r2]
   3732c:	ldrb	r3, [r4, #26]
   37330:	ldr	r2, [r4, #16]
   37334:	ldr	r0, [r4, #20]
   37338:	cmp	r3, #0
   3733c:	addeq	r0, r0, #1
   37340:	add	r3, r0, r7
   37344:	cmp	r2, r3
   37348:	str	r0, [r4, #20]
   3734c:	bhi	373e4 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x130>
   37350:	mov	r2, r7
   37354:	mov	r1, r8
   37358:	mov	r0, r4
   3735c:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   37360:	ldr	r2, [r4, #20]
   37364:	mov	r3, #34	; 0x22
   37368:	mov	ip, #58	; 0x3a
   3736c:	mov	r0, #32
   37370:	strb	r3, [r2]
   37374:	ldrb	r3, [r4, #26]
   37378:	ldr	r1, [r4, #20]
   3737c:	clz	r3, r3
   37380:	lsr	r3, r3, #5
   37384:	add	r2, r1, r3
   37388:	add	r2, r2, #1
   3738c:	str	r2, [r4, #20]
   37390:	strb	ip, [r1, r3]
   37394:	ldr	r3, [r4, #20]
   37398:	strb	r0, [r3]
   3739c:	ldrb	r2, [r4, #25]
   373a0:	ldr	r1, [r4, #20]
   373a4:	ldrb	r3, [r4, #27]
   373a8:	cmp	r2, #0
   373ac:	addne	r1, r1, #1
   373b0:	cmp	r3, #0
   373b4:	str	r1, [r4, #20]
   373b8:	bne	37400 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x14c>
   373bc:	mov	r1, r5
   373c0:	mov	r0, r4
   373c4:	ldrd	r4, [sp]
   373c8:	mov	r3, r6
   373cc:	ldrd	r6, [sp, #8]
   373d0:	ldrd	r8, [sp, #16]
   373d4:	ldr	sl, [sp, #24]
   373d8:	ldr	lr, [sp, #28]
   373dc:	add	sp, sp, #32
   373e0:	bx	r3
   373e4:	mov	r2, r7
   373e8:	mov	r1, r8
   373ec:	bl	1451c <memcpy@plt>
   373f0:	ldr	r2, [r4, #20]
   373f4:	add	r2, r2, r7
   373f8:	str	r2, [r4, #20]
   373fc:	b	37364 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xb0>
   37400:	mov	r0, r5
   37404:	bl	30268 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   37408:	ldr	r3, [r4, #20]
   3740c:	ldrd	r6, [sp, #8]
   37410:	ldrd	r8, [sp, #16]
   37414:	add	r0, r3, r0
   37418:	ldr	sl, [sp, #24]
   3741c:	str	r0, [r4, #20]
   37420:	ldrd	r4, [sp]
   37424:	add	sp, sp, #28
   37428:	pop	{pc}		; (ldr pc, [sp], #4)
   3742c:	add	r1, r2, #1
   37430:	mov	r3, #10
   37434:	str	r1, [r4, #20]
   37438:	strb	r3, [r2]
   3743c:	ldrb	r3, [r4, #25]
   37440:	ldr	r1, [r4, #16]
   37444:	ldr	r2, [r4, #32]
   37448:	ldr	r0, [r4, #20]
   3744c:	mul	r9, r2, r3
   37450:	add	r3, r0, r9
   37454:	cmp	r1, r3
   37458:	bcs	37470 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x1bc>
   3745c:	mov	r1, r9
   37460:	mov	r0, r4
   37464:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   37468:	ldr	r2, [r4, #20]
   3746c:	b	37324 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x70>
   37470:	mov	r2, r9
   37474:	mov	r1, #32
   37478:	bl	14594 <memset@plt>
   3747c:	ldr	r2, [r4, #20]
   37480:	add	r2, r2, r9
   37484:	str	r2, [r4, #20]
   37488:	b	37324 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x70>

0003748c <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   3748c:	cmp	r1, #0
   37490:	strd	r4, [sp, #-32]!	; 0xffffffe0
   37494:	mov	r4, r0
   37498:	strd	r6, [sp, #8]
   3749c:	strd	r8, [sp, #16]
   374a0:	str	sl, [sp, #24]
   374a4:	str	lr, [sp, #28]
   374a8:	ldrd	r6, [r2, r3]
   374ac:	ldr	r2, [r0, #20]
   374b0:	ldr	r9, [sp, #32]
   374b4:	ldr	r8, [sp, #36]	; 0x24
   374b8:	ldr	r5, [sp, #40]	; 0x28
   374bc:	beq	374d4 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x48>
   374c0:	add	r1, r2, #1
   374c4:	mov	r3, #44	; 0x2c
   374c8:	str	r1, [r0, #20]
   374cc:	strb	r3, [r2]
   374d0:	ldr	r2, [r0, #20]
   374d4:	ldrb	r1, [r4, #25]
   374d8:	cmp	r1, #0
   374dc:	bne	3760c <flatcc_json_printer_uint64_enum_struct_field@@Base+0x180>
   374e0:	ldr	r3, [r4, #16]
   374e4:	cmp	r3, r2
   374e8:	bhi	374fc <flatcc_json_printer_uint64_enum_struct_field@@Base+0x70>
   374ec:	mov	r0, r4
   374f0:	ldr	r3, [r4, #44]	; 0x2c
   374f4:	blx	r3
   374f8:	ldr	r2, [r4, #20]
   374fc:	mov	r3, #34	; 0x22
   37500:	strb	r3, [r2]
   37504:	ldrb	r3, [r4, #26]
   37508:	ldr	r2, [r4, #16]
   3750c:	ldr	r0, [r4, #20]
   37510:	cmp	r3, #0
   37514:	addeq	r0, r0, #1
   37518:	add	r3, r0, r8
   3751c:	cmp	r2, r3
   37520:	str	r0, [r4, #20]
   37524:	bhi	375c0 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x134>
   37528:	mov	r2, r8
   3752c:	mov	r1, r9
   37530:	mov	r0, r4
   37534:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   37538:	ldr	r8, [r4, #20]
   3753c:	mov	r3, #34	; 0x22
   37540:	mov	ip, #58	; 0x3a
   37544:	mov	r0, #32
   37548:	strb	r3, [r8]
   3754c:	ldrb	r3, [r4, #26]
   37550:	ldr	r1, [r4, #20]
   37554:	clz	r3, r3
   37558:	lsr	r3, r3, #5
   3755c:	add	r2, r1, r3
   37560:	add	r2, r2, #1
   37564:	str	r2, [r4, #20]
   37568:	strb	ip, [r1, r3]
   3756c:	ldr	r3, [r4, #20]
   37570:	strb	r0, [r3]
   37574:	ldrb	r1, [r4, #25]
   37578:	ldr	r2, [r4, #20]
   3757c:	ldrb	r3, [r4, #27]
   37580:	cmp	r1, #0
   37584:	addne	r2, r2, #1
   37588:	cmp	r3, #0
   3758c:	str	r2, [r4, #20]
   37590:	bne	375dc <flatcc_json_printer_uint64_enum_struct_field@@Base+0x150>
   37594:	mov	r2, r6
   37598:	mov	r3, r7
   3759c:	ldrd	r6, [sp, #8]
   375a0:	mov	r0, r4
   375a4:	mov	r1, r5
   375a8:	ldrd	r4, [sp]
   375ac:	ldrd	r8, [sp, #16]
   375b0:	ldr	sl, [sp, #24]
   375b4:	ldr	lr, [sp, #28]
   375b8:	add	sp, sp, #32
   375bc:	bx	r1
   375c0:	mov	r2, r8
   375c4:	mov	r1, r9
   375c8:	bl	1451c <memcpy@plt>
   375cc:	ldr	r3, [r4, #20]
   375d0:	add	r8, r3, r8
   375d4:	str	r8, [r4, #20]
   375d8:	b	3753c <flatcc_json_printer_uint64_enum_struct_field@@Base+0xb0>
   375dc:	mov	r0, r6
   375e0:	mov	r1, r7
   375e4:	bl	30594 <flatcc_json_parser_struct_as_root@@Base+0x498>
   375e8:	ldr	r3, [r4, #20]
   375ec:	ldrd	r6, [sp, #8]
   375f0:	ldrd	r8, [sp, #16]
   375f4:	add	r0, r3, r0
   375f8:	ldr	sl, [sp, #24]
   375fc:	str	r0, [r4, #20]
   37600:	ldrd	r4, [sp]
   37604:	add	sp, sp, #28
   37608:	pop	{pc}		; (ldr pc, [sp], #4)
   3760c:	add	r1, r2, #1
   37610:	mov	r3, #10
   37614:	str	r1, [r4, #20]
   37618:	strb	r3, [r2]
   3761c:	ldrb	r3, [r4, #25]
   37620:	ldr	r1, [r4, #16]
   37624:	ldr	r2, [r4, #32]
   37628:	ldr	r0, [r4, #20]
   3762c:	mul	sl, r2, r3
   37630:	add	r3, r0, sl
   37634:	cmp	r1, r3
   37638:	bcs	37650 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x1c4>
   3763c:	mov	r1, sl
   37640:	mov	r0, r4
   37644:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   37648:	ldr	r2, [r4, #20]
   3764c:	b	374fc <flatcc_json_printer_uint64_enum_struct_field@@Base+0x70>
   37650:	mov	r2, sl
   37654:	mov	r1, #32
   37658:	bl	14594 <memset@plt>
   3765c:	ldr	r2, [r4, #20]
   37660:	add	r2, r2, sl
   37664:	str	r2, [r4, #20]
   37668:	b	374fc <flatcc_json_printer_uint64_enum_struct_field@@Base+0x70>

0003766c <flatcc_json_printer_int8_enum_struct_field@@Base>:
   3766c:	cmp	r1, #0
   37670:	strd	r4, [sp, #-32]!	; 0xffffffe0
   37674:	mov	r4, r0
   37678:	strd	r6, [sp, #8]
   3767c:	strd	r8, [sp, #16]
   37680:	str	sl, [sp, #24]
   37684:	str	lr, [sp, #28]
   37688:	ldrsb	r5, [r2, r3]
   3768c:	ldr	r2, [r0, #20]
   37690:	ldr	r8, [sp, #32]
   37694:	ldr	r7, [sp, #36]	; 0x24
   37698:	ldr	r6, [sp, #40]	; 0x28
   3769c:	beq	376b4 <flatcc_json_printer_int8_enum_struct_field@@Base+0x48>
   376a0:	add	r1, r2, #1
   376a4:	mov	r3, #44	; 0x2c
   376a8:	str	r1, [r0, #20]
   376ac:	strb	r3, [r2]
   376b0:	ldr	r2, [r0, #20]
   376b4:	ldrb	r1, [r4, #25]
   376b8:	cmp	r1, #0
   376bc:	bne	3780c <flatcc_json_printer_int8_enum_struct_field@@Base+0x1a0>
   376c0:	ldr	r3, [r4, #16]
   376c4:	cmp	r3, r2
   376c8:	bhi	376dc <flatcc_json_printer_int8_enum_struct_field@@Base+0x70>
   376cc:	mov	r0, r4
   376d0:	ldr	r3, [r4, #44]	; 0x2c
   376d4:	blx	r3
   376d8:	ldr	r2, [r4, #20]
   376dc:	mov	r3, #34	; 0x22
   376e0:	strb	r3, [r2]
   376e4:	ldrb	r3, [r4, #26]
   376e8:	ldr	r2, [r4, #16]
   376ec:	ldr	r0, [r4, #20]
   376f0:	cmp	r3, #0
   376f4:	addeq	r0, r0, #1
   376f8:	add	r3, r0, r7
   376fc:	cmp	r2, r3
   37700:	str	r0, [r4, #20]
   37704:	bhi	377c8 <flatcc_json_printer_int8_enum_struct_field@@Base+0x15c>
   37708:	mov	r2, r7
   3770c:	mov	r1, r8
   37710:	mov	r0, r4
   37714:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   37718:	ldr	r2, [r4, #20]
   3771c:	mov	r3, #34	; 0x22
   37720:	mov	ip, #58	; 0x3a
   37724:	mov	r0, #32
   37728:	strb	r3, [r2]
   3772c:	ldrb	r3, [r4, #26]
   37730:	ldr	r1, [r4, #20]
   37734:	clz	r3, r3
   37738:	lsr	r3, r3, #5
   3773c:	add	r2, r1, r3
   37740:	add	r2, r2, #1
   37744:	str	r2, [r4, #20]
   37748:	strb	ip, [r1, r3]
   3774c:	ldr	r3, [r4, #20]
   37750:	strb	r0, [r3]
   37754:	ldrb	r3, [r4, #25]
   37758:	ldr	r2, [r4, #20]
   3775c:	ldrb	r0, [r4, #27]
   37760:	adds	r3, r3, #0
   37764:	movne	r3, #1
   37768:	add	r1, r2, r3
   3776c:	cmp	r0, #0
   37770:	str	r1, [r4, #20]
   37774:	beq	377e4 <flatcc_json_printer_int8_enum_struct_field@@Base+0x178>
   37778:	cmp	r5, #0
   3777c:	lsr	r6, r5, #31
   37780:	uxtb	r0, r5
   37784:	bge	3779c <flatcc_json_printer_int8_enum_struct_field@@Base+0x130>
   37788:	rsb	r0, r0, #0
   3778c:	mov	ip, #45	; 0x2d
   37790:	add	r1, r1, #1
   37794:	uxtb	r0, r0
   37798:	strb	ip, [r2, r3]
   3779c:	bl	312f4 <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   377a0:	ldr	r3, [r4, #20]
   377a4:	add	r0, r6, r0
   377a8:	ldrd	r6, [sp, #8]
   377ac:	ldrd	r8, [sp, #16]
   377b0:	add	r3, r3, r0
   377b4:	ldr	sl, [sp, #24]
   377b8:	str	r3, [r4, #20]
   377bc:	ldrd	r4, [sp]
   377c0:	add	sp, sp, #28
   377c4:	pop	{pc}		; (ldr pc, [sp], #4)
   377c8:	mov	r2, r7
   377cc:	mov	r1, r8
   377d0:	bl	1451c <memcpy@plt>
   377d4:	ldr	r2, [r4, #20]
   377d8:	add	r2, r2, r7
   377dc:	str	r2, [r4, #20]
   377e0:	b	3771c <flatcc_json_printer_int8_enum_struct_field@@Base+0xb0>
   377e4:	mov	r1, r5
   377e8:	mov	r0, r4
   377ec:	ldrd	r4, [sp]
   377f0:	mov	r3, r6
   377f4:	ldrd	r6, [sp, #8]
   377f8:	ldrd	r8, [sp, #16]
   377fc:	ldr	sl, [sp, #24]
   37800:	ldr	lr, [sp, #28]
   37804:	add	sp, sp, #32
   37808:	bx	r3
   3780c:	add	r1, r2, #1
   37810:	mov	r3, #10
   37814:	str	r1, [r4, #20]
   37818:	strb	r3, [r2]
   3781c:	ldrb	r3, [r4, #25]
   37820:	ldr	r1, [r4, #16]
   37824:	ldr	r2, [r4, #32]
   37828:	ldr	r0, [r4, #20]
   3782c:	mul	r9, r2, r3
   37830:	add	r3, r0, r9
   37834:	cmp	r1, r3
   37838:	bcs	37850 <flatcc_json_printer_int8_enum_struct_field@@Base+0x1e4>
   3783c:	mov	r1, r9
   37840:	mov	r0, r4
   37844:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   37848:	ldr	r2, [r4, #20]
   3784c:	b	376dc <flatcc_json_printer_int8_enum_struct_field@@Base+0x70>
   37850:	mov	r2, r9
   37854:	mov	r1, #32
   37858:	bl	14594 <memset@plt>
   3785c:	ldr	r2, [r4, #20]
   37860:	add	r2, r2, r9
   37864:	str	r2, [r4, #20]
   37868:	b	376dc <flatcc_json_printer_int8_enum_struct_field@@Base+0x70>

0003786c <flatcc_json_printer_int16_enum_struct_field@@Base>:
   3786c:	cmp	r1, #0
   37870:	strd	r4, [sp, #-32]!	; 0xffffffe0
   37874:	mov	r4, r0
   37878:	ldrsh	r5, [r2, r3]
   3787c:	ldr	r2, [r0, #20]
   37880:	strd	r6, [sp, #8]
   37884:	strd	r8, [sp, #16]
   37888:	str	sl, [sp, #24]
   3788c:	str	lr, [sp, #28]
   37890:	ldr	r8, [sp, #32]
   37894:	ldr	r7, [sp, #36]	; 0x24
   37898:	ldr	r6, [sp, #40]	; 0x28
   3789c:	beq	378b4 <flatcc_json_printer_int16_enum_struct_field@@Base+0x48>
   378a0:	add	r1, r2, #1
   378a4:	mov	r3, #44	; 0x2c
   378a8:	str	r1, [r0, #20]
   378ac:	strb	r3, [r2]
   378b0:	ldr	r2, [r0, #20]
   378b4:	ldrb	r1, [r4, #25]
   378b8:	cmp	r1, #0
   378bc:	bne	37a0c <flatcc_json_printer_int16_enum_struct_field@@Base+0x1a0>
   378c0:	ldr	r3, [r4, #16]
   378c4:	cmp	r3, r2
   378c8:	bhi	378dc <flatcc_json_printer_int16_enum_struct_field@@Base+0x70>
   378cc:	mov	r0, r4
   378d0:	ldr	r3, [r4, #44]	; 0x2c
   378d4:	blx	r3
   378d8:	ldr	r2, [r4, #20]
   378dc:	mov	r3, #34	; 0x22
   378e0:	strb	r3, [r2]
   378e4:	ldrb	r3, [r4, #26]
   378e8:	ldr	r2, [r4, #16]
   378ec:	ldr	r0, [r4, #20]
   378f0:	cmp	r3, #0
   378f4:	addeq	r0, r0, #1
   378f8:	add	r3, r0, r7
   378fc:	cmp	r2, r3
   37900:	str	r0, [r4, #20]
   37904:	bhi	379c8 <flatcc_json_printer_int16_enum_struct_field@@Base+0x15c>
   37908:	mov	r2, r7
   3790c:	mov	r1, r8
   37910:	mov	r0, r4
   37914:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   37918:	ldr	r2, [r4, #20]
   3791c:	mov	r3, #34	; 0x22
   37920:	mov	ip, #58	; 0x3a
   37924:	mov	r0, #32
   37928:	strb	r3, [r2]
   3792c:	ldrb	r3, [r4, #26]
   37930:	ldr	r1, [r4, #20]
   37934:	clz	r3, r3
   37938:	lsr	r3, r3, #5
   3793c:	add	r2, r1, r3
   37940:	add	r2, r2, #1
   37944:	str	r2, [r4, #20]
   37948:	strb	ip, [r1, r3]
   3794c:	ldr	r3, [r4, #20]
   37950:	strb	r0, [r3]
   37954:	ldrb	r3, [r4, #25]
   37958:	ldr	r2, [r4, #20]
   3795c:	ldrb	r0, [r4, #27]
   37960:	adds	r3, r3, #0
   37964:	movne	r3, #1
   37968:	add	r1, r2, r3
   3796c:	cmp	r0, #0
   37970:	str	r1, [r4, #20]
   37974:	beq	379e4 <flatcc_json_printer_int16_enum_struct_field@@Base+0x178>
   37978:	cmp	r5, #0
   3797c:	lsr	r6, r5, #31
   37980:	uxth	r0, r5
   37984:	bge	3799c <flatcc_json_printer_int16_enum_struct_field@@Base+0x130>
   37988:	rsb	r0, r0, #0
   3798c:	mov	ip, #45	; 0x2d
   37990:	add	r1, r1, #1
   37994:	uxth	r0, r0
   37998:	strb	ip, [r2, r3]
   3799c:	bl	30100 <flatcc_json_parser_struct_as_root@@Base+0x4>
   379a0:	ldr	r3, [r4, #20]
   379a4:	add	r0, r6, r0
   379a8:	ldrd	r6, [sp, #8]
   379ac:	ldrd	r8, [sp, #16]
   379b0:	add	r3, r3, r0
   379b4:	ldr	sl, [sp, #24]
   379b8:	str	r3, [r4, #20]
   379bc:	ldrd	r4, [sp]
   379c0:	add	sp, sp, #28
   379c4:	pop	{pc}		; (ldr pc, [sp], #4)
   379c8:	mov	r2, r7
   379cc:	mov	r1, r8
   379d0:	bl	1451c <memcpy@plt>
   379d4:	ldr	r2, [r4, #20]
   379d8:	add	r2, r2, r7
   379dc:	str	r2, [r4, #20]
   379e0:	b	3791c <flatcc_json_printer_int16_enum_struct_field@@Base+0xb0>
   379e4:	mov	r1, r5
   379e8:	mov	r0, r4
   379ec:	ldrd	r4, [sp]
   379f0:	mov	r3, r6
   379f4:	ldrd	r6, [sp, #8]
   379f8:	ldrd	r8, [sp, #16]
   379fc:	ldr	sl, [sp, #24]
   37a00:	ldr	lr, [sp, #28]
   37a04:	add	sp, sp, #32
   37a08:	bx	r3
   37a0c:	add	r1, r2, #1
   37a10:	mov	r3, #10
   37a14:	str	r1, [r4, #20]
   37a18:	strb	r3, [r2]
   37a1c:	ldrb	r3, [r4, #25]
   37a20:	ldr	r1, [r4, #16]
   37a24:	ldr	r2, [r4, #32]
   37a28:	ldr	r0, [r4, #20]
   37a2c:	mul	r9, r2, r3
   37a30:	add	r3, r0, r9
   37a34:	cmp	r1, r3
   37a38:	bcs	37a50 <flatcc_json_printer_int16_enum_struct_field@@Base+0x1e4>
   37a3c:	mov	r1, r9
   37a40:	mov	r0, r4
   37a44:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   37a48:	ldr	r2, [r4, #20]
   37a4c:	b	378dc <flatcc_json_printer_int16_enum_struct_field@@Base+0x70>
   37a50:	mov	r2, r9
   37a54:	mov	r1, #32
   37a58:	bl	14594 <memset@plt>
   37a5c:	ldr	r2, [r4, #20]
   37a60:	add	r2, r2, r9
   37a64:	str	r2, [r4, #20]
   37a68:	b	378dc <flatcc_json_printer_int16_enum_struct_field@@Base+0x70>

00037a6c <flatcc_json_printer_int32_enum_struct_field@@Base>:
   37a6c:	cmp	r1, #0
   37a70:	strd	r4, [sp, #-32]!	; 0xffffffe0
   37a74:	mov	r4, r0
   37a78:	strd	r6, [sp, #8]
   37a7c:	strd	r8, [sp, #16]
   37a80:	str	sl, [sp, #24]
   37a84:	str	lr, [sp, #28]
   37a88:	ldr	r6, [r2, r3]
   37a8c:	ldr	r2, [r0, #20]
   37a90:	ldr	r8, [sp, #32]
   37a94:	ldr	r7, [sp, #36]	; 0x24
   37a98:	ldr	r5, [sp, #40]	; 0x28
   37a9c:	beq	37ab4 <flatcc_json_printer_int32_enum_struct_field@@Base+0x48>
   37aa0:	add	r1, r2, #1
   37aa4:	mov	r3, #44	; 0x2c
   37aa8:	str	r1, [r0, #20]
   37aac:	strb	r3, [r2]
   37ab0:	ldr	r2, [r0, #20]
   37ab4:	ldrb	r1, [r4, #25]
   37ab8:	cmp	r1, #0
   37abc:	bne	37c08 <flatcc_json_printer_int32_enum_struct_field@@Base+0x19c>
   37ac0:	ldr	r3, [r4, #16]
   37ac4:	cmp	r3, r2
   37ac8:	bhi	37adc <flatcc_json_printer_int32_enum_struct_field@@Base+0x70>
   37acc:	mov	r0, r4
   37ad0:	ldr	r3, [r4, #44]	; 0x2c
   37ad4:	blx	r3
   37ad8:	ldr	r2, [r4, #20]
   37adc:	mov	r3, #34	; 0x22
   37ae0:	strb	r3, [r2]
   37ae4:	ldrb	r3, [r4, #26]
   37ae8:	ldr	r2, [r4, #16]
   37aec:	ldr	r0, [r4, #20]
   37af0:	cmp	r3, #0
   37af4:	addeq	r0, r0, #1
   37af8:	add	r3, r0, r7
   37afc:	cmp	r2, r3
   37b00:	str	r0, [r4, #20]
   37b04:	bhi	37bc4 <flatcc_json_printer_int32_enum_struct_field@@Base+0x158>
   37b08:	mov	r2, r7
   37b0c:	mov	r1, r8
   37b10:	mov	r0, r4
   37b14:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   37b18:	ldr	r2, [r4, #20]
   37b1c:	mov	r3, #34	; 0x22
   37b20:	mov	ip, #58	; 0x3a
   37b24:	mov	r0, #32
   37b28:	strb	r3, [r2]
   37b2c:	ldrb	r3, [r4, #26]
   37b30:	ldr	r1, [r4, #20]
   37b34:	clz	r3, r3
   37b38:	lsr	r3, r3, #5
   37b3c:	add	r2, r1, r3
   37b40:	add	r2, r2, #1
   37b44:	str	r2, [r4, #20]
   37b48:	strb	ip, [r1, r3]
   37b4c:	ldr	r3, [r4, #20]
   37b50:	strb	r0, [r3]
   37b54:	ldrb	r3, [r4, #25]
   37b58:	ldr	r2, [r4, #20]
   37b5c:	ldrb	r0, [r4, #27]
   37b60:	adds	r3, r3, #0
   37b64:	movne	r3, #1
   37b68:	add	r1, r2, r3
   37b6c:	cmp	r0, #0
   37b70:	str	r1, [r4, #20]
   37b74:	beq	37be0 <flatcc_json_printer_int32_enum_struct_field@@Base+0x174>
   37b78:	cmp	r6, #0
   37b7c:	lsr	r5, r6, #31
   37b80:	bge	37b94 <flatcc_json_printer_int32_enum_struct_field@@Base+0x128>
   37b84:	mov	r0, #45	; 0x2d
   37b88:	rsb	r6, r6, #0
   37b8c:	add	r1, r1, #1
   37b90:	strb	r0, [r2, r3]
   37b94:	mov	r0, r6
   37b98:	bl	30268 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   37b9c:	ldr	r3, [r4, #20]
   37ba0:	add	r0, r5, r0
   37ba4:	ldrd	r6, [sp, #8]
   37ba8:	ldrd	r8, [sp, #16]
   37bac:	add	r3, r3, r0
   37bb0:	ldr	sl, [sp, #24]
   37bb4:	str	r3, [r4, #20]
   37bb8:	ldrd	r4, [sp]
   37bbc:	add	sp, sp, #28
   37bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   37bc4:	mov	r2, r7
   37bc8:	mov	r1, r8
   37bcc:	bl	1451c <memcpy@plt>
   37bd0:	ldr	r2, [r4, #20]
   37bd4:	add	r2, r2, r7
   37bd8:	str	r2, [r4, #20]
   37bdc:	b	37b1c <flatcc_json_printer_int32_enum_struct_field@@Base+0xb0>
   37be0:	mov	r1, r6
   37be4:	mov	r0, r4
   37be8:	ldrd	r6, [sp, #8]
   37bec:	mov	r3, r5
   37bf0:	ldrd	r4, [sp]
   37bf4:	ldrd	r8, [sp, #16]
   37bf8:	ldr	sl, [sp, #24]
   37bfc:	ldr	lr, [sp, #28]
   37c00:	add	sp, sp, #32
   37c04:	bx	r3
   37c08:	add	r1, r2, #1
   37c0c:	mov	r3, #10
   37c10:	str	r1, [r4, #20]
   37c14:	strb	r3, [r2]
   37c18:	ldrb	r3, [r4, #25]
   37c1c:	ldr	r1, [r4, #16]
   37c20:	ldr	r2, [r4, #32]
   37c24:	ldr	r0, [r4, #20]
   37c28:	mul	r9, r2, r3
   37c2c:	add	r3, r0, r9
   37c30:	cmp	r1, r3
   37c34:	bcs	37c4c <flatcc_json_printer_int32_enum_struct_field@@Base+0x1e0>
   37c38:	mov	r1, r9
   37c3c:	mov	r0, r4
   37c40:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   37c44:	ldr	r2, [r4, #20]
   37c48:	b	37adc <flatcc_json_printer_int32_enum_struct_field@@Base+0x70>
   37c4c:	mov	r2, r9
   37c50:	mov	r1, #32
   37c54:	bl	14594 <memset@plt>
   37c58:	ldr	r2, [r4, #20]
   37c5c:	add	r2, r2, r9
   37c60:	str	r2, [r4, #20]
   37c64:	b	37adc <flatcc_json_printer_int32_enum_struct_field@@Base+0x70>

00037c68 <flatcc_json_printer_int64_enum_struct_field@@Base>:
   37c68:	cmp	r1, #0
   37c6c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   37c70:	mov	r4, r0
   37c74:	strd	r6, [sp, #8]
   37c78:	strd	r8, [sp, #16]
   37c7c:	str	sl, [sp, #24]
   37c80:	str	lr, [sp, #28]
   37c84:	ldrd	r6, [r2, r3]
   37c88:	ldr	r2, [r0, #20]
   37c8c:	ldr	r9, [sp, #32]
   37c90:	ldr	r8, [sp, #36]	; 0x24
   37c94:	ldr	r5, [sp, #40]	; 0x28
   37c98:	beq	37cb0 <flatcc_json_printer_int64_enum_struct_field@@Base+0x48>
   37c9c:	add	r1, r2, #1
   37ca0:	mov	r3, #44	; 0x2c
   37ca4:	str	r1, [r0, #20]
   37ca8:	strb	r3, [r2]
   37cac:	ldr	r2, [r0, #20]
   37cb0:	ldrb	r1, [r4, #25]
   37cb4:	cmp	r1, #0
   37cb8:	bne	37e14 <flatcc_json_printer_int64_enum_struct_field@@Base+0x1ac>
   37cbc:	ldr	r3, [r4, #16]
   37cc0:	cmp	r3, r2
   37cc4:	bhi	37cd8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x70>
   37cc8:	mov	r0, r4
   37ccc:	ldr	r3, [r4, #44]	; 0x2c
   37cd0:	blx	r3
   37cd4:	ldr	r2, [r4, #20]
   37cd8:	mov	r3, #34	; 0x22
   37cdc:	strb	r3, [r2]
   37ce0:	ldrb	r3, [r4, #26]
   37ce4:	ldr	r2, [r4, #16]
   37ce8:	ldr	r0, [r4, #20]
   37cec:	cmp	r3, #0
   37cf0:	addeq	r0, r0, #1
   37cf4:	add	r3, r0, r8
   37cf8:	cmp	r2, r3
   37cfc:	str	r0, [r4, #20]
   37d00:	bhi	37dcc <flatcc_json_printer_int64_enum_struct_field@@Base+0x164>
   37d04:	mov	r2, r8
   37d08:	mov	r1, r9
   37d0c:	mov	r0, r4
   37d10:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   37d14:	ldr	r8, [r4, #20]
   37d18:	mov	r3, #34	; 0x22
   37d1c:	mov	ip, #58	; 0x3a
   37d20:	mov	r0, #32
   37d24:	strb	r3, [r8]
   37d28:	ldrb	r3, [r4, #26]
   37d2c:	ldr	r1, [r4, #20]
   37d30:	clz	r3, r3
   37d34:	lsr	r3, r3, #5
   37d38:	add	r2, r1, r3
   37d3c:	add	r2, r2, #1
   37d40:	str	r2, [r4, #20]
   37d44:	strb	ip, [r1, r3]
   37d48:	ldr	r3, [r4, #20]
   37d4c:	strb	r0, [r3]
   37d50:	ldrb	r3, [r4, #25]
   37d54:	ldr	r1, [r4, #20]
   37d58:	ldrb	r0, [r4, #27]
   37d5c:	adds	r3, r3, #0
   37d60:	movne	r3, #1
   37d64:	add	r2, r1, r3
   37d68:	cmp	r0, #0
   37d6c:	str	r2, [r4, #20]
   37d70:	beq	37de8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x180>
   37d74:	cmp	r6, #0
   37d78:	lsr	r5, r7, #31
   37d7c:	sbcs	r0, r7, #0
   37d80:	bge	37d98 <flatcc_json_printer_int64_enum_struct_field@@Base+0x130>
   37d84:	rsbs	r6, r6, #0
   37d88:	mov	r0, #45	; 0x2d
   37d8c:	rsc	r7, r7, #0
   37d90:	add	r2, r2, #1
   37d94:	strb	r0, [r1, r3]
   37d98:	mov	r0, r6
   37d9c:	mov	r1, r7
   37da0:	bl	30594 <flatcc_json_parser_struct_as_root@@Base+0x498>
   37da4:	ldr	r3, [r4, #20]
   37da8:	add	r0, r5, r0
   37dac:	ldrd	r6, [sp, #8]
   37db0:	ldrd	r8, [sp, #16]
   37db4:	add	r3, r3, r0
   37db8:	ldr	sl, [sp, #24]
   37dbc:	str	r3, [r4, #20]
   37dc0:	ldrd	r4, [sp]
   37dc4:	add	sp, sp, #28
   37dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   37dcc:	mov	r2, r8
   37dd0:	mov	r1, r9
   37dd4:	bl	1451c <memcpy@plt>
   37dd8:	ldr	r3, [r4, #20]
   37ddc:	add	r8, r3, r8
   37de0:	str	r8, [r4, #20]
   37de4:	b	37d18 <flatcc_json_printer_int64_enum_struct_field@@Base+0xb0>
   37de8:	mov	r2, r6
   37dec:	mov	r3, r7
   37df0:	ldrd	r6, [sp, #8]
   37df4:	mov	r0, r4
   37df8:	mov	r1, r5
   37dfc:	ldrd	r4, [sp]
   37e00:	ldrd	r8, [sp, #16]
   37e04:	ldr	sl, [sp, #24]
   37e08:	ldr	lr, [sp, #28]
   37e0c:	add	sp, sp, #32
   37e10:	bx	r1
   37e14:	add	r1, r2, #1
   37e18:	mov	r3, #10
   37e1c:	str	r1, [r4, #20]
   37e20:	strb	r3, [r2]
   37e24:	ldrb	r3, [r4, #25]
   37e28:	ldr	r1, [r4, #16]
   37e2c:	ldr	r2, [r4, #32]
   37e30:	ldr	r0, [r4, #20]
   37e34:	mul	sl, r2, r3
   37e38:	add	r3, r0, sl
   37e3c:	cmp	r1, r3
   37e40:	bcs	37e58 <flatcc_json_printer_int64_enum_struct_field@@Base+0x1f0>
   37e44:	mov	r1, sl
   37e48:	mov	r0, r4
   37e4c:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   37e50:	ldr	r2, [r4, #20]
   37e54:	b	37cd8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x70>
   37e58:	mov	r2, sl
   37e5c:	mov	r1, #32
   37e60:	bl	14594 <memset@plt>
   37e64:	ldr	r2, [r4, #20]
   37e68:	add	r2, r2, sl
   37e6c:	str	r2, [r4, #20]
   37e70:	b	37cd8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x70>

00037e74 <flatcc_json_printer_bool_enum_struct_field@@Base>:
   37e74:	cmp	r1, #0
   37e78:	strd	r4, [sp, #-32]!	; 0xffffffe0
   37e7c:	mov	r4, r0
   37e80:	strd	r6, [sp, #8]
   37e84:	strd	r8, [sp, #16]
   37e88:	str	sl, [sp, #24]
   37e8c:	str	lr, [sp, #28]
   37e90:	ldrb	r5, [r2, r3]
   37e94:	ldr	r2, [r0, #20]
   37e98:	ldr	r8, [sp, #32]
   37e9c:	ldr	r7, [sp, #36]	; 0x24
   37ea0:	ldr	r6, [sp, #40]	; 0x28
   37ea4:	beq	37ebc <flatcc_json_printer_bool_enum_struct_field@@Base+0x48>
   37ea8:	add	r1, r2, #1
   37eac:	mov	r3, #44	; 0x2c
   37eb0:	str	r1, [r0, #20]
   37eb4:	strb	r3, [r2]
   37eb8:	ldr	r2, [r0, #20]
   37ebc:	ldrb	r1, [r4, #25]
   37ec0:	cmp	r1, #0
   37ec4:	bne	37fec <flatcc_json_printer_bool_enum_struct_field@@Base+0x178>
   37ec8:	ldr	r3, [r4, #16]
   37ecc:	cmp	r3, r2
   37ed0:	bhi	37ee4 <flatcc_json_printer_bool_enum_struct_field@@Base+0x70>
   37ed4:	mov	r0, r4
   37ed8:	ldr	r3, [r4, #44]	; 0x2c
   37edc:	blx	r3
   37ee0:	ldr	r2, [r4, #20]
   37ee4:	mov	r3, #34	; 0x22
   37ee8:	strb	r3, [r2]
   37eec:	ldrb	r3, [r4, #26]
   37ef0:	ldr	r2, [r4, #16]
   37ef4:	ldr	r0, [r4, #20]
   37ef8:	cmp	r3, #0
   37efc:	addeq	r0, r0, #1
   37f00:	add	r3, r0, r7
   37f04:	cmp	r2, r3
   37f08:	str	r0, [r4, #20]
   37f0c:	bhi	37fa4 <flatcc_json_printer_bool_enum_struct_field@@Base+0x130>
   37f10:	mov	r2, r7
   37f14:	mov	r1, r8
   37f18:	mov	r0, r4
   37f1c:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   37f20:	ldr	r2, [r4, #20]
   37f24:	mov	r3, #34	; 0x22
   37f28:	mov	ip, #58	; 0x3a
   37f2c:	mov	r0, #32
   37f30:	strb	r3, [r2]
   37f34:	ldrb	r3, [r4, #26]
   37f38:	ldr	r1, [r4, #20]
   37f3c:	clz	r3, r3
   37f40:	lsr	r3, r3, #5
   37f44:	add	r2, r1, r3
   37f48:	add	r2, r2, #1
   37f4c:	str	r2, [r4, #20]
   37f50:	strb	ip, [r1, r3]
   37f54:	ldr	r3, [r4, #20]
   37f58:	strb	r0, [r3]
   37f5c:	ldrb	r2, [r4, #25]
   37f60:	ldr	r1, [r4, #20]
   37f64:	ldrb	r3, [r4, #27]
   37f68:	cmp	r2, #0
   37f6c:	addne	r1, r1, #1
   37f70:	cmp	r3, #0
   37f74:	str	r1, [r4, #20]
   37f78:	bne	37fc0 <flatcc_json_printer_bool_enum_struct_field@@Base+0x14c>
   37f7c:	mov	r1, r5
   37f80:	mov	r0, r4
   37f84:	ldrd	r4, [sp]
   37f88:	mov	r3, r6
   37f8c:	ldrd	r6, [sp, #8]
   37f90:	ldrd	r8, [sp, #16]
   37f94:	ldr	sl, [sp, #24]
   37f98:	ldr	lr, [sp, #28]
   37f9c:	add	sp, sp, #32
   37fa0:	bx	r3
   37fa4:	mov	r2, r7
   37fa8:	mov	r1, r8
   37fac:	bl	1451c <memcpy@plt>
   37fb0:	ldr	r2, [r4, #20]
   37fb4:	add	r2, r2, r7
   37fb8:	str	r2, [r4, #20]
   37fbc:	b	37f24 <flatcc_json_printer_bool_enum_struct_field@@Base+0xb0>
   37fc0:	mov	r0, r5
   37fc4:	bl	31428 <flatcc_json_parser_struct_as_root@@Base+0x132c>
   37fc8:	ldr	r3, [r4, #20]
   37fcc:	ldrd	r6, [sp, #8]
   37fd0:	ldrd	r8, [sp, #16]
   37fd4:	add	r0, r3, r0
   37fd8:	ldr	sl, [sp, #24]
   37fdc:	str	r0, [r4, #20]
   37fe0:	ldrd	r4, [sp]
   37fe4:	add	sp, sp, #28
   37fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   37fec:	add	r1, r2, #1
   37ff0:	mov	r3, #10
   37ff4:	str	r1, [r4, #20]
   37ff8:	strb	r3, [r2]
   37ffc:	ldrb	r3, [r4, #25]
   38000:	ldr	r1, [r4, #16]
   38004:	ldr	r2, [r4, #32]
   38008:	ldr	r0, [r4, #20]
   3800c:	mul	r9, r2, r3
   38010:	add	r3, r0, r9
   38014:	cmp	r1, r3
   38018:	bcs	38030 <flatcc_json_printer_bool_enum_struct_field@@Base+0x1bc>
   3801c:	mov	r1, r9
   38020:	mov	r0, r4
   38024:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38028:	ldr	r2, [r4, #20]
   3802c:	b	37ee4 <flatcc_json_printer_bool_enum_struct_field@@Base+0x70>
   38030:	mov	r2, r9
   38034:	mov	r1, #32
   38038:	bl	14594 <memset@plt>
   3803c:	ldr	r2, [r4, #20]
   38040:	add	r2, r2, r9
   38044:	str	r2, [r4, #20]
   38048:	b	37ee4 <flatcc_json_printer_bool_enum_struct_field@@Base+0x70>

0003804c <flatcc_json_printer_uint8_vector_field@@Base>:
   3804c:	ldr	ip, [r1, #8]
   38050:	add	r2, r2, #2
   38054:	lsl	r2, r2, #1
   38058:	cmp	ip, r2
   3805c:	bxle	lr
   38060:	ldr	ip, [r1, #4]
   38064:	ldrh	r2, [ip, r2]
   38068:	cmp	r2, #0
   3806c:	bxeq	lr
   38070:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38074:	ldr	ip, [r1]
   38078:	strd	r6, [sp, #8]
   3807c:	str	lr, [sp, #28]
   38080:	strd	r8, [sp, #16]
   38084:	str	sl, [sp, #24]
   38088:	adds	lr, ip, r2
   3808c:	beq	38224 <flatcc_json_printer_uint8_vector_field@@Base+0x1d8>
   38090:	ldr	r4, [r1, #16]
   38094:	add	r5, r4, #1
   38098:	cmp	r4, #0
   3809c:	str	r5, [r1, #16]
   380a0:	beq	380b8 <flatcc_json_printer_uint8_vector_field@@Base+0x6c>
   380a4:	ldr	r1, [r0, #20]
   380a8:	mov	r4, #44	; 0x2c
   380ac:	add	r5, r1, #1
   380b0:	str	r5, [r0, #20]
   380b4:	strb	r4, [r1]
   380b8:	mov	r1, r3
   380bc:	ldr	r3, [ip, r2]
   380c0:	mov	r4, r0
   380c4:	ldr	r2, [sp, #32]
   380c8:	add	r6, lr, r3
   380cc:	ldr	r7, [lr, r3]
   380d0:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   380d4:	ldr	r2, [r4, #20]
   380d8:	mov	r1, #91	; 0x5b
   380dc:	ldr	r3, [r4, #32]
   380e0:	cmp	r7, #0
   380e4:	add	r0, r2, #1
   380e8:	add	r3, r3, #1
   380ec:	str	r0, [r4, #20]
   380f0:	str	r3, [r4, #32]
   380f4:	strb	r1, [r2]
   380f8:	beq	38204 <flatcc_json_printer_uint8_vector_field@@Base+0x1b8>
   380fc:	ldrb	r3, [r4, #25]
   38100:	ldr	r1, [r4, #20]
   38104:	cmp	r3, #0
   38108:	bne	3823c <flatcc_json_printer_uint8_vector_field@@Base+0x1f0>
   3810c:	ldr	r2, [r4, #16]
   38110:	cmp	r2, r1
   38114:	bhi	3812c <flatcc_json_printer_uint8_vector_field@@Base+0xe0>
   38118:	mov	r1, r3
   3811c:	mov	r0, r4
   38120:	ldr	r3, [r4, #44]	; 0x2c
   38124:	blx	r3
   38128:	ldr	r1, [r4, #20]
   3812c:	add	r5, r6, #5
   38130:	ldrb	r0, [r6, #4]
   38134:	bl	312f4 <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   38138:	ldr	r3, [r4, #20]
   3813c:	cmp	r7, #1
   38140:	add	r0, r3, r0
   38144:	str	r0, [r4, #20]
   38148:	beq	38208 <flatcc_json_printer_uint8_vector_field@@Base+0x1bc>
   3814c:	add	r3, r7, #4
   38150:	mov	r8, #10
   38154:	mov	r7, #44	; 0x2c
   38158:	add	r6, r6, r3
   3815c:	b	381a0 <flatcc_json_printer_uint8_vector_field@@Base+0x154>
   38160:	ldr	r3, [r4, #16]
   38164:	mov	r0, r4
   38168:	ldr	r2, [r4, #20]
   3816c:	cmp	r2, r3
   38170:	bcc	38180 <flatcc_json_printer_uint8_vector_field@@Base+0x134>
   38174:	ldr	r3, [r4, #44]	; 0x2c
   38178:	blx	r3
   3817c:	ldr	r2, [r4, #20]
   38180:	mov	r1, r2
   38184:	ldrb	r0, [r5], #1
   38188:	bl	312f4 <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   3818c:	ldr	r3, [r4, #20]
   38190:	cmp	r5, r6
   38194:	add	r0, r3, r0
   38198:	str	r0, [r4, #20]
   3819c:	beq	38208 <flatcc_json_printer_uint8_vector_field@@Base+0x1bc>
   381a0:	add	r3, r0, #1
   381a4:	str	r3, [r4, #20]
   381a8:	strb	r7, [r0]
   381ac:	ldrb	r1, [r4, #25]
   381b0:	cmp	r1, #0
   381b4:	beq	38160 <flatcc_json_printer_uint8_vector_field@@Base+0x114>
   381b8:	ldr	r3, [r4, #20]
   381bc:	mov	r1, #32
   381c0:	mov	r0, r4
   381c4:	add	r2, r3, #1
   381c8:	str	r2, [r4, #20]
   381cc:	strb	r8, [r3]
   381d0:	ldrb	r2, [r4, #25]
   381d4:	ldr	lr, [r4, #16]
   381d8:	ldr	r9, [r4, #32]
   381dc:	ldr	r3, [r4, #20]
   381e0:	mul	r9, r9, r2
   381e4:	add	ip, r3, r9
   381e8:	mov	r2, r9
   381ec:	cmp	lr, ip
   381f0:	bcs	38280 <flatcc_json_printer_uint8_vector_field@@Base+0x234>
   381f4:	mov	r1, r9
   381f8:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   381fc:	ldr	r2, [r4, #20]
   38200:	b	38180 <flatcc_json_printer_uint8_vector_field@@Base+0x134>
   38204:	ldr	r0, [r4, #20]
   38208:	add	r3, r0, #1
   3820c:	ldrb	r2, [r4, #25]
   38210:	cmp	r2, #0
   38214:	bne	38298 <flatcc_json_printer_uint8_vector_field@@Base+0x24c>
   38218:	mov	r2, #93	; 0x5d
   3821c:	str	r3, [r4, #20]
   38220:	strb	r2, [r0]
   38224:	ldrd	r4, [sp]
   38228:	ldrd	r6, [sp, #8]
   3822c:	ldrd	r8, [sp, #16]
   38230:	ldr	sl, [sp, #24]
   38234:	add	sp, sp, #28
   38238:	pop	{pc}		; (ldr pc, [sp], #4)
   3823c:	add	r2, r1, #1
   38240:	mov	r3, #10
   38244:	str	r2, [r4, #20]
   38248:	strb	r3, [r1]
   3824c:	ldrb	r5, [r4, #25]
   38250:	ldr	r2, [r4, #16]
   38254:	ldr	r1, [r4, #32]
   38258:	ldr	r0, [r4, #20]
   3825c:	mul	r5, r1, r5
   38260:	add	r3, r0, r5
   38264:	cmp	r2, r3
   38268:	bcs	38300 <flatcc_json_printer_uint8_vector_field@@Base+0x2b4>
   3826c:	mov	r1, r5
   38270:	mov	r0, r4
   38274:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38278:	ldr	r1, [r4, #20]
   3827c:	b	3812c <flatcc_json_printer_uint8_vector_field@@Base+0xe0>
   38280:	mov	r0, r3
   38284:	bl	14594 <memset@plt>
   38288:	ldr	r2, [r4, #20]
   3828c:	add	r2, r2, r9
   38290:	str	r2, [r4, #20]
   38294:	b	38180 <flatcc_json_printer_uint8_vector_field@@Base+0x134>
   38298:	mov	r2, #10
   3829c:	str	r3, [r4, #20]
   382a0:	strb	r2, [r0]
   382a4:	ldrb	r5, [r4, #25]
   382a8:	ldr	r3, [r4, #32]
   382ac:	ldr	r2, [r4, #16]
   382b0:	ldr	r0, [r4, #20]
   382b4:	sub	r3, r3, #1
   382b8:	mul	r5, r3, r5
   382bc:	str	r3, [r4, #32]
   382c0:	add	r3, r0, r5
   382c4:	cmp	r2, r3
   382c8:	bcs	382e4 <flatcc_json_printer_uint8_vector_field@@Base+0x298>
   382cc:	mov	r0, r4
   382d0:	mov	r1, r5
   382d4:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   382d8:	ldr	r0, [r4, #20]
   382dc:	add	r3, r0, #1
   382e0:	b	38218 <flatcc_json_printer_uint8_vector_field@@Base+0x1cc>
   382e4:	mov	r2, r5
   382e8:	mov	r1, #32
   382ec:	bl	14594 <memset@plt>
   382f0:	ldr	r0, [r4, #20]
   382f4:	add	r0, r0, r5
   382f8:	add	r3, r0, #1
   382fc:	b	38218 <flatcc_json_printer_uint8_vector_field@@Base+0x1cc>
   38300:	mov	r1, #32
   38304:	mov	r2, r5
   38308:	bl	14594 <memset@plt>
   3830c:	ldr	r1, [r4, #20]
   38310:	add	r1, r1, r5
   38314:	str	r1, [r4, #20]
   38318:	b	3812c <flatcc_json_printer_uint8_vector_field@@Base+0xe0>

0003831c <flatcc_json_printer_utype_vector_field@@Base>:
   3831c:	b	3804c <flatcc_json_printer_uint8_vector_field@@Base>

00038320 <flatcc_json_printer_uint16_vector_field@@Base>:
   38320:	ldr	ip, [r1, #8]
   38324:	add	r2, r2, #2
   38328:	lsl	r2, r2, #1
   3832c:	cmp	ip, r2
   38330:	bxle	lr
   38334:	ldr	ip, [r1, #4]
   38338:	ldrh	r2, [ip, r2]
   3833c:	cmp	r2, #0
   38340:	bxeq	lr
   38344:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38348:	strd	r6, [sp, #8]
   3834c:	str	lr, [sp, #28]
   38350:	ldr	lr, [r1]
   38354:	strd	r8, [sp, #16]
   38358:	str	sl, [sp, #24]
   3835c:	adds	r7, lr, r2
   38360:	beq	385a0 <flatcc_json_printer_uint16_vector_field@@Base+0x280>
   38364:	ldr	r4, [r1, #16]
   38368:	ldr	ip, [r0, #20]
   3836c:	cmp	r4, #0
   38370:	add	r4, r4, #1
   38374:	str	r4, [r1, #16]
   38378:	beq	38390 <flatcc_json_printer_uint16_vector_field@@Base+0x70>
   3837c:	add	r4, ip, #1
   38380:	mov	r1, #44	; 0x2c
   38384:	str	r4, [r0, #20]
   38388:	strb	r1, [ip]
   3838c:	ldr	ip, [r0, #20]
   38390:	mov	r6, r3
   38394:	mov	r4, r0
   38398:	ldrb	r1, [r0, #25]
   3839c:	ldr	r3, [lr, r2]
   383a0:	cmp	r1, #0
   383a4:	add	r5, r7, r3
   383a8:	ldr	r7, [r7, r3]
   383ac:	bne	38634 <flatcc_json_printer_uint16_vector_field@@Base+0x314>
   383b0:	ldr	r3, [r0, #16]
   383b4:	cmp	ip, r3
   383b8:	bcs	385c8 <flatcc_json_printer_uint16_vector_field@@Base+0x2a8>
   383bc:	mov	r3, #34	; 0x22
   383c0:	mov	r1, r6
   383c4:	strb	r3, [ip]
   383c8:	ldrb	r3, [r4, #26]
   383cc:	ldr	r2, [r4, #16]
   383d0:	ldr	r0, [r4, #20]
   383d4:	cmp	r3, #0
   383d8:	addeq	r0, r0, #1
   383dc:	ldr	r3, [sp, #32]
   383e0:	str	r0, [r4, #20]
   383e4:	add	r3, r0, r3
   383e8:	cmp	r2, r3
   383ec:	ldr	r2, [sp, #32]
   383f0:	bls	385b8 <flatcc_json_printer_uint16_vector_field@@Base+0x298>
   383f4:	bl	1451c <memcpy@plt>
   383f8:	ldr	r3, [r4, #20]
   383fc:	ldr	r2, [sp, #32]
   38400:	add	r3, r3, r2
   38404:	str	r3, [r4, #20]
   38408:	mov	r2, #34	; 0x22
   3840c:	mov	lr, #58	; 0x3a
   38410:	mov	ip, #32
   38414:	mov	r1, #91	; 0x5b
   38418:	strb	r2, [r3]
   3841c:	ldrb	r3, [r4, #26]
   38420:	ldr	r0, [r4, #20]
   38424:	clz	r3, r3
   38428:	lsr	r3, r3, #5
   3842c:	add	r2, r0, r3
   38430:	add	r2, r2, #1
   38434:	str	r2, [r4, #20]
   38438:	strb	lr, [r0, r3]
   3843c:	ldr	r3, [r4, #20]
   38440:	strb	ip, [r3]
   38444:	ldrb	r3, [r4, #25]
   38448:	ldr	lr, [r4, #20]
   3844c:	ldr	r2, [r4, #32]
   38450:	adds	r3, r3, #0
   38454:	movne	r3, #1
   38458:	cmp	r7, #0
   3845c:	add	r0, lr, r3
   38460:	add	r0, r0, #1
   38464:	add	r2, r2, #1
   38468:	str	r0, [r4, #20]
   3846c:	str	r2, [r4, #32]
   38470:	strb	r1, [lr, r3]
   38474:	beq	38580 <flatcc_json_printer_uint16_vector_field@@Base+0x260>
   38478:	ldrb	r3, [r4, #25]
   3847c:	ldr	r1, [r4, #20]
   38480:	cmp	r3, #0
   38484:	bne	385d8 <flatcc_json_printer_uint16_vector_field@@Base+0x2b8>
   38488:	ldr	r2, [r4, #16]
   3848c:	cmp	r2, r1
   38490:	bhi	384a8 <flatcc_json_printer_uint16_vector_field@@Base+0x188>
   38494:	mov	r1, r3
   38498:	mov	r0, r4
   3849c:	ldr	r3, [r4, #44]	; 0x2c
   384a0:	blx	r3
   384a4:	ldr	r1, [r4, #20]
   384a8:	add	r6, r5, #6
   384ac:	ldrh	r0, [r5, #4]
   384b0:	sub	r5, r7, #2
   384b4:	bl	30100 <flatcc_json_parser_struct_as_root@@Base+0x4>
   384b8:	ldr	r3, [r4, #20]
   384bc:	cmp	r7, #1
   384c0:	add	r0, r3, r0
   384c4:	str	r0, [r4, #20]
   384c8:	beq	38584 <flatcc_json_printer_uint16_vector_field@@Base+0x264>
   384cc:	mov	r7, #44	; 0x2c
   384d0:	mov	r8, #10
   384d4:	b	3851c <flatcc_json_printer_uint16_vector_field@@Base+0x1fc>
   384d8:	ldr	r3, [r4, #16]
   384dc:	mov	r0, r4
   384e0:	ldr	r2, [r4, #20]
   384e4:	cmp	r2, r3
   384e8:	bcc	384f8 <flatcc_json_printer_uint16_vector_field@@Base+0x1d8>
   384ec:	ldr	r3, [r4, #44]	; 0x2c
   384f0:	blx	r3
   384f4:	ldr	r2, [r4, #20]
   384f8:	mov	r1, r2
   384fc:	sub	r5, r5, #1
   38500:	ldrh	r0, [r6], #2
   38504:	bl	30100 <flatcc_json_parser_struct_as_root@@Base+0x4>
   38508:	ldr	r3, [r4, #20]
   3850c:	cmn	r5, #1
   38510:	add	r0, r3, r0
   38514:	str	r0, [r4, #20]
   38518:	beq	38584 <flatcc_json_printer_uint16_vector_field@@Base+0x264>
   3851c:	add	r3, r0, #1
   38520:	str	r3, [r4, #20]
   38524:	strb	r7, [r0]
   38528:	ldrb	r1, [r4, #25]
   3852c:	cmp	r1, #0
   38530:	beq	384d8 <flatcc_json_printer_uint16_vector_field@@Base+0x1b8>
   38534:	ldr	r3, [r4, #20]
   38538:	mov	r1, #32
   3853c:	mov	r0, r4
   38540:	add	r2, r3, #1
   38544:	str	r2, [r4, #20]
   38548:	strb	r8, [r3]
   3854c:	ldrb	r2, [r4, #25]
   38550:	ldr	lr, [r4, #16]
   38554:	ldr	r9, [r4, #32]
   38558:	ldr	r3, [r4, #20]
   3855c:	mul	r9, r9, r2
   38560:	add	ip, r3, r9
   38564:	mov	r2, r9
   38568:	cmp	lr, ip
   3856c:	bcs	3861c <flatcc_json_printer_uint16_vector_field@@Base+0x2fc>
   38570:	mov	r1, r9
   38574:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38578:	ldr	r2, [r4, #20]
   3857c:	b	384f8 <flatcc_json_printer_uint16_vector_field@@Base+0x1d8>
   38580:	ldr	r0, [r4, #20]
   38584:	add	r3, r0, #1
   38588:	ldrb	r2, [r4, #25]
   3858c:	cmp	r2, #0
   38590:	bne	38678 <flatcc_json_printer_uint16_vector_field@@Base+0x358>
   38594:	mov	r2, #93	; 0x5d
   38598:	str	r3, [r4, #20]
   3859c:	strb	r2, [r0]
   385a0:	ldrd	r4, [sp]
   385a4:	ldrd	r6, [sp, #8]
   385a8:	ldrd	r8, [sp, #16]
   385ac:	ldr	sl, [sp, #24]
   385b0:	add	sp, sp, #28
   385b4:	pop	{pc}		; (ldr pc, [sp], #4)
   385b8:	mov	r0, r4
   385bc:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   385c0:	ldr	r3, [r4, #20]
   385c4:	b	38408 <flatcc_json_printer_uint16_vector_field@@Base+0xe8>
   385c8:	ldr	r3, [r0, #44]	; 0x2c
   385cc:	blx	r3
   385d0:	ldr	ip, [r4, #20]
   385d4:	b	383bc <flatcc_json_printer_uint16_vector_field@@Base+0x9c>
   385d8:	add	r2, r1, #1
   385dc:	mov	r3, #10
   385e0:	str	r2, [r4, #20]
   385e4:	strb	r3, [r1]
   385e8:	ldrb	r6, [r4, #25]
   385ec:	ldr	r2, [r4, #16]
   385f0:	ldr	r1, [r4, #32]
   385f4:	ldr	r0, [r4, #20]
   385f8:	mul	r6, r1, r6
   385fc:	add	r3, r0, r6
   38600:	cmp	r2, r3
   38604:	bcs	386fc <flatcc_json_printer_uint16_vector_field@@Base+0x3dc>
   38608:	mov	r1, r6
   3860c:	mov	r0, r4
   38610:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38614:	ldr	r1, [r4, #20]
   38618:	b	384a8 <flatcc_json_printer_uint16_vector_field@@Base+0x188>
   3861c:	mov	r0, r3
   38620:	bl	14594 <memset@plt>
   38624:	ldr	r2, [r4, #20]
   38628:	add	r2, r2, r9
   3862c:	str	r2, [r4, #20]
   38630:	b	384f8 <flatcc_json_printer_uint16_vector_field@@Base+0x1d8>
   38634:	add	r2, ip, #1
   38638:	mov	r3, #10
   3863c:	str	r2, [r0, #20]
   38640:	strb	r3, [ip]
   38644:	ldrb	r8, [r0, #25]
   38648:	ldr	ip, [r4, #32]
   3864c:	ldr	r2, [r0, #16]
   38650:	ldr	r0, [r0, #20]
   38654:	mul	r8, ip, r8
   38658:	add	r3, r0, r8
   3865c:	cmp	r2, r3
   38660:	bcs	386c4 <flatcc_json_printer_uint16_vector_field@@Base+0x3a4>
   38664:	mov	r1, r8
   38668:	mov	r0, r4
   3866c:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38670:	ldr	ip, [r4, #20]
   38674:	b	383bc <flatcc_json_printer_uint16_vector_field@@Base+0x9c>
   38678:	mov	r2, #10
   3867c:	str	r3, [r4, #20]
   38680:	strb	r2, [r0]
   38684:	ldrb	r5, [r4, #25]
   38688:	ldr	r3, [r4, #32]
   3868c:	ldr	r2, [r4, #16]
   38690:	ldr	r0, [r4, #20]
   38694:	sub	r3, r3, #1
   38698:	mul	r5, r3, r5
   3869c:	str	r3, [r4, #32]
   386a0:	add	r3, r0, r5
   386a4:	cmp	r2, r3
   386a8:	bcs	386e0 <flatcc_json_printer_uint16_vector_field@@Base+0x3c0>
   386ac:	mov	r0, r4
   386b0:	mov	r1, r5
   386b4:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   386b8:	ldr	r0, [r4, #20]
   386bc:	add	r3, r0, #1
   386c0:	b	38594 <flatcc_json_printer_uint16_vector_field@@Base+0x274>
   386c4:	mov	r2, r8
   386c8:	mov	r1, #32
   386cc:	bl	14594 <memset@plt>
   386d0:	ldr	ip, [r4, #20]
   386d4:	add	ip, ip, r8
   386d8:	str	ip, [r4, #20]
   386dc:	b	383bc <flatcc_json_printer_uint16_vector_field@@Base+0x9c>
   386e0:	mov	r2, r5
   386e4:	mov	r1, #32
   386e8:	bl	14594 <memset@plt>
   386ec:	ldr	r0, [r4, #20]
   386f0:	add	r0, r0, r5
   386f4:	add	r3, r0, #1
   386f8:	b	38594 <flatcc_json_printer_uint16_vector_field@@Base+0x274>
   386fc:	mov	r1, ip
   38700:	mov	r2, r6
   38704:	bl	14594 <memset@plt>
   38708:	ldr	r1, [r4, #20]
   3870c:	add	r1, r1, r6
   38710:	str	r1, [r4, #20]
   38714:	b	384a8 <flatcc_json_printer_uint16_vector_field@@Base+0x188>

00038718 <flatcc_json_printer_uint32_vector_field@@Base>:
   38718:	ldr	ip, [r1, #8]
   3871c:	add	r2, r2, #2
   38720:	lsl	r2, r2, #1
   38724:	cmp	ip, r2
   38728:	bxle	lr
   3872c:	ldr	ip, [r1, #4]
   38730:	ldrh	r2, [ip, r2]
   38734:	cmp	r2, #0
   38738:	bxeq	lr
   3873c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38740:	ldr	ip, [r1]
   38744:	strd	r6, [sp, #8]
   38748:	str	lr, [sp, #28]
   3874c:	strd	r8, [sp, #16]
   38750:	str	sl, [sp, #24]
   38754:	adds	lr, ip, r2
   38758:	beq	388f0 <flatcc_json_printer_uint32_vector_field@@Base+0x1d8>
   3875c:	ldr	r4, [r1, #16]
   38760:	add	r5, r4, #1
   38764:	cmp	r4, #0
   38768:	str	r5, [r1, #16]
   3876c:	beq	38784 <flatcc_json_printer_uint32_vector_field@@Base+0x6c>
   38770:	ldr	r1, [r0, #20]
   38774:	mov	r4, #44	; 0x2c
   38778:	add	r5, r1, #1
   3877c:	str	r5, [r0, #20]
   38780:	strb	r4, [r1]
   38784:	mov	r1, r3
   38788:	ldr	r3, [ip, r2]
   3878c:	mov	r4, r0
   38790:	ldr	r2, [sp, #32]
   38794:	add	r5, lr, r3
   38798:	ldr	r7, [lr, r3]
   3879c:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   387a0:	ldr	r2, [r4, #20]
   387a4:	mov	r1, #91	; 0x5b
   387a8:	ldr	r3, [r4, #32]
   387ac:	cmp	r7, #0
   387b0:	add	r0, r2, #1
   387b4:	add	r3, r3, #1
   387b8:	str	r0, [r4, #20]
   387bc:	str	r3, [r4, #32]
   387c0:	strb	r1, [r2]
   387c4:	beq	388d0 <flatcc_json_printer_uint32_vector_field@@Base+0x1b8>
   387c8:	ldrb	r3, [r4, #25]
   387cc:	ldr	r1, [r4, #20]
   387d0:	cmp	r3, #0
   387d4:	bne	38908 <flatcc_json_printer_uint32_vector_field@@Base+0x1f0>
   387d8:	ldr	r2, [r4, #16]
   387dc:	cmp	r2, r1
   387e0:	bhi	387f8 <flatcc_json_printer_uint32_vector_field@@Base+0xe0>
   387e4:	mov	r1, r3
   387e8:	mov	r0, r4
   387ec:	ldr	r3, [r4, #44]	; 0x2c
   387f0:	blx	r3
   387f4:	ldr	r1, [r4, #20]
   387f8:	add	r6, r5, #8
   387fc:	ldr	r0, [r5, #4]
   38800:	sub	r5, r7, #2
   38804:	bl	30268 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   38808:	ldr	r3, [r4, #20]
   3880c:	cmp	r7, #1
   38810:	add	r0, r3, r0
   38814:	str	r0, [r4, #20]
   38818:	beq	388d4 <flatcc_json_printer_uint32_vector_field@@Base+0x1bc>
   3881c:	mov	r7, #44	; 0x2c
   38820:	mov	r8, #10
   38824:	b	3886c <flatcc_json_printer_uint32_vector_field@@Base+0x154>
   38828:	ldr	r3, [r4, #16]
   3882c:	mov	r0, r4
   38830:	ldr	r2, [r4, #20]
   38834:	cmp	r2, r3
   38838:	bcc	38848 <flatcc_json_printer_uint32_vector_field@@Base+0x130>
   3883c:	ldr	r3, [r4, #44]	; 0x2c
   38840:	blx	r3
   38844:	ldr	r2, [r4, #20]
   38848:	mov	r1, r2
   3884c:	sub	r5, r5, #1
   38850:	ldr	r0, [r6], #4
   38854:	bl	30268 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   38858:	ldr	r3, [r4, #20]
   3885c:	cmn	r5, #1
   38860:	add	r0, r3, r0
   38864:	str	r0, [r4, #20]
   38868:	beq	388d4 <flatcc_json_printer_uint32_vector_field@@Base+0x1bc>
   3886c:	add	r3, r0, #1
   38870:	str	r3, [r4, #20]
   38874:	strb	r7, [r0]
   38878:	ldrb	r1, [r4, #25]
   3887c:	cmp	r1, #0
   38880:	beq	38828 <flatcc_json_printer_uint32_vector_field@@Base+0x110>
   38884:	ldr	r3, [r4, #20]
   38888:	mov	r1, #32
   3888c:	mov	r0, r4
   38890:	add	r2, r3, #1
   38894:	str	r2, [r4, #20]
   38898:	strb	r8, [r3]
   3889c:	ldrb	r2, [r4, #25]
   388a0:	ldr	lr, [r4, #16]
   388a4:	ldr	r9, [r4, #32]
   388a8:	ldr	r3, [r4, #20]
   388ac:	mul	r9, r9, r2
   388b0:	add	ip, r3, r9
   388b4:	mov	r2, r9
   388b8:	cmp	lr, ip
   388bc:	bcs	3894c <flatcc_json_printer_uint32_vector_field@@Base+0x234>
   388c0:	mov	r1, r9
   388c4:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   388c8:	ldr	r2, [r4, #20]
   388cc:	b	38848 <flatcc_json_printer_uint32_vector_field@@Base+0x130>
   388d0:	ldr	r0, [r4, #20]
   388d4:	add	r3, r0, #1
   388d8:	ldrb	r2, [r4, #25]
   388dc:	cmp	r2, #0
   388e0:	bne	38964 <flatcc_json_printer_uint32_vector_field@@Base+0x24c>
   388e4:	mov	r2, #93	; 0x5d
   388e8:	str	r3, [r4, #20]
   388ec:	strb	r2, [r0]
   388f0:	ldrd	r4, [sp]
   388f4:	ldrd	r6, [sp, #8]
   388f8:	ldrd	r8, [sp, #16]
   388fc:	ldr	sl, [sp, #24]
   38900:	add	sp, sp, #28
   38904:	pop	{pc}		; (ldr pc, [sp], #4)
   38908:	add	r2, r1, #1
   3890c:	mov	r3, #10
   38910:	str	r2, [r4, #20]
   38914:	strb	r3, [r1]
   38918:	ldrb	r6, [r4, #25]
   3891c:	ldr	r2, [r4, #16]
   38920:	ldr	r1, [r4, #32]
   38924:	ldr	r0, [r4, #20]
   38928:	mul	r6, r1, r6
   3892c:	add	r3, r0, r6
   38930:	cmp	r2, r3
   38934:	bcs	389cc <flatcc_json_printer_uint32_vector_field@@Base+0x2b4>
   38938:	mov	r1, r6
   3893c:	mov	r0, r4
   38940:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38944:	ldr	r1, [r4, #20]
   38948:	b	387f8 <flatcc_json_printer_uint32_vector_field@@Base+0xe0>
   3894c:	mov	r0, r3
   38950:	bl	14594 <memset@plt>
   38954:	ldr	r2, [r4, #20]
   38958:	add	r2, r2, r9
   3895c:	str	r2, [r4, #20]
   38960:	b	38848 <flatcc_json_printer_uint32_vector_field@@Base+0x130>
   38964:	mov	r2, #10
   38968:	str	r3, [r4, #20]
   3896c:	strb	r2, [r0]
   38970:	ldrb	r5, [r4, #25]
   38974:	ldr	r3, [r4, #32]
   38978:	ldr	r2, [r4, #16]
   3897c:	ldr	r0, [r4, #20]
   38980:	sub	r3, r3, #1
   38984:	mul	r5, r3, r5
   38988:	str	r3, [r4, #32]
   3898c:	add	r3, r0, r5
   38990:	cmp	r2, r3
   38994:	bcs	389b0 <flatcc_json_printer_uint32_vector_field@@Base+0x298>
   38998:	mov	r0, r4
   3899c:	mov	r1, r5
   389a0:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   389a4:	ldr	r0, [r4, #20]
   389a8:	add	r3, r0, #1
   389ac:	b	388e4 <flatcc_json_printer_uint32_vector_field@@Base+0x1cc>
   389b0:	mov	r2, r5
   389b4:	mov	r1, #32
   389b8:	bl	14594 <memset@plt>
   389bc:	ldr	r0, [r4, #20]
   389c0:	add	r0, r0, r5
   389c4:	add	r3, r0, #1
   389c8:	b	388e4 <flatcc_json_printer_uint32_vector_field@@Base+0x1cc>
   389cc:	mov	r1, #32
   389d0:	mov	r2, r6
   389d4:	bl	14594 <memset@plt>
   389d8:	ldr	r1, [r4, #20]
   389dc:	add	r1, r1, r6
   389e0:	str	r1, [r4, #20]
   389e4:	b	387f8 <flatcc_json_printer_uint32_vector_field@@Base+0xe0>

000389e8 <flatcc_json_printer_uint64_vector_field@@Base>:
   389e8:	ldr	ip, [r1, #8]
   389ec:	add	r2, r2, #2
   389f0:	lsl	r2, r2, #1
   389f4:	cmp	ip, r2
   389f8:	bxle	lr
   389fc:	ldr	ip, [r1, #4]
   38a00:	ldrh	r2, [ip, r2]
   38a04:	cmp	r2, #0
   38a08:	bxeq	lr
   38a0c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38a10:	ldr	ip, [r1]
   38a14:	strd	r6, [sp, #8]
   38a18:	str	lr, [sp, #28]
   38a1c:	strd	r8, [sp, #16]
   38a20:	str	sl, [sp, #24]
   38a24:	adds	lr, ip, r2
   38a28:	beq	38bb8 <flatcc_json_printer_uint64_vector_field@@Base+0x1d0>
   38a2c:	ldr	r4, [r1, #16]
   38a30:	add	r5, r4, #1
   38a34:	cmp	r4, #0
   38a38:	str	r5, [r1, #16]
   38a3c:	beq	38a54 <flatcc_json_printer_uint64_vector_field@@Base+0x6c>
   38a40:	ldr	r1, [r0, #20]
   38a44:	mov	r4, #44	; 0x2c
   38a48:	add	r5, r1, #1
   38a4c:	str	r5, [r0, #20]
   38a50:	strb	r4, [r1]
   38a54:	mov	r1, r3
   38a58:	ldr	r3, [ip, r2]
   38a5c:	mov	r4, r0
   38a60:	ldr	r2, [sp, #32]
   38a64:	add	r5, lr, r3
   38a68:	ldr	r7, [lr, r3]
   38a6c:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   38a70:	ldr	r2, [r4, #20]
   38a74:	mov	r1, #91	; 0x5b
   38a78:	ldr	r3, [r4, #32]
   38a7c:	cmp	r7, #0
   38a80:	add	r0, r2, #1
   38a84:	add	r3, r3, #1
   38a88:	str	r0, [r4, #20]
   38a8c:	str	r3, [r4, #32]
   38a90:	strb	r1, [r2]
   38a94:	beq	38b98 <flatcc_json_printer_uint64_vector_field@@Base+0x1b0>
   38a98:	ldrb	r1, [r4, #25]
   38a9c:	ldr	r2, [r4, #20]
   38aa0:	cmp	r1, #0
   38aa4:	bne	38bd0 <flatcc_json_printer_uint64_vector_field@@Base+0x1e8>
   38aa8:	ldr	r3, [r4, #16]
   38aac:	cmp	r3, r2
   38ab0:	bhi	38ac4 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   38ab4:	mov	r0, r4
   38ab8:	ldr	r3, [r4, #44]	; 0x2c
   38abc:	blx	r3
   38ac0:	ldr	r2, [r4, #20]
   38ac4:	add	r6, r5, #12
   38ac8:	ldrd	r0, [r5, #4]
   38acc:	sub	r5, r7, #2
   38ad0:	bl	30594 <flatcc_json_parser_struct_as_root@@Base+0x498>
   38ad4:	ldr	r3, [r4, #20]
   38ad8:	cmp	r7, #1
   38adc:	add	r0, r3, r0
   38ae0:	str	r0, [r4, #20]
   38ae4:	beq	38b9c <flatcc_json_printer_uint64_vector_field@@Base+0x1b4>
   38ae8:	mov	r7, #44	; 0x2c
   38aec:	mov	r8, #10
   38af0:	b	38b34 <flatcc_json_printer_uint64_vector_field@@Base+0x14c>
   38af4:	ldr	r3, [r4, #16]
   38af8:	mov	r0, r4
   38afc:	ldr	r2, [r4, #20]
   38b00:	cmp	r2, r3
   38b04:	bcc	38b14 <flatcc_json_printer_uint64_vector_field@@Base+0x12c>
   38b08:	ldr	r3, [r4, #44]	; 0x2c
   38b0c:	blx	r3
   38b10:	ldr	r2, [r4, #20]
   38b14:	sub	r5, r5, #1
   38b18:	ldrd	r0, [r6], #8
   38b1c:	bl	30594 <flatcc_json_parser_struct_as_root@@Base+0x498>
   38b20:	ldr	r3, [r4, #20]
   38b24:	cmn	r5, #1
   38b28:	add	r0, r3, r0
   38b2c:	str	r0, [r4, #20]
   38b30:	beq	38b9c <flatcc_json_printer_uint64_vector_field@@Base+0x1b4>
   38b34:	add	r3, r0, #1
   38b38:	str	r3, [r4, #20]
   38b3c:	strb	r7, [r0]
   38b40:	ldrb	r1, [r4, #25]
   38b44:	cmp	r1, #0
   38b48:	beq	38af4 <flatcc_json_printer_uint64_vector_field@@Base+0x10c>
   38b4c:	ldr	r3, [r4, #20]
   38b50:	mov	r1, #32
   38b54:	mov	r0, r4
   38b58:	add	r2, r3, #1
   38b5c:	str	r2, [r4, #20]
   38b60:	strb	r8, [r3]
   38b64:	ldrb	r2, [r4, #25]
   38b68:	ldr	lr, [r4, #16]
   38b6c:	ldr	r9, [r4, #32]
   38b70:	ldr	r3, [r4, #20]
   38b74:	mul	r9, r9, r2
   38b78:	add	ip, r3, r9
   38b7c:	mov	r2, r9
   38b80:	cmp	lr, ip
   38b84:	bcs	38c14 <flatcc_json_printer_uint64_vector_field@@Base+0x22c>
   38b88:	mov	r1, r9
   38b8c:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38b90:	ldr	r2, [r4, #20]
   38b94:	b	38b14 <flatcc_json_printer_uint64_vector_field@@Base+0x12c>
   38b98:	ldr	r0, [r4, #20]
   38b9c:	add	r3, r0, #1
   38ba0:	ldrb	r2, [r4, #25]
   38ba4:	cmp	r2, #0
   38ba8:	bne	38c2c <flatcc_json_printer_uint64_vector_field@@Base+0x244>
   38bac:	mov	r2, #93	; 0x5d
   38bb0:	str	r3, [r4, #20]
   38bb4:	strb	r2, [r0]
   38bb8:	ldrd	r4, [sp]
   38bbc:	ldrd	r6, [sp, #8]
   38bc0:	ldrd	r8, [sp, #16]
   38bc4:	ldr	sl, [sp, #24]
   38bc8:	add	sp, sp, #28
   38bcc:	pop	{pc}		; (ldr pc, [sp], #4)
   38bd0:	add	r1, r2, #1
   38bd4:	mov	r3, #10
   38bd8:	str	r1, [r4, #20]
   38bdc:	strb	r3, [r2]
   38be0:	ldrb	r6, [r4, #25]
   38be4:	ldr	r1, [r4, #16]
   38be8:	ldr	r2, [r4, #32]
   38bec:	ldr	r0, [r4, #20]
   38bf0:	mul	r6, r2, r6
   38bf4:	add	r3, r0, r6
   38bf8:	cmp	r1, r3
   38bfc:	bcs	38c94 <flatcc_json_printer_uint64_vector_field@@Base+0x2ac>
   38c00:	mov	r1, r6
   38c04:	mov	r0, r4
   38c08:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38c0c:	ldr	r2, [r4, #20]
   38c10:	b	38ac4 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   38c14:	mov	r0, r3
   38c18:	bl	14594 <memset@plt>
   38c1c:	ldr	r2, [r4, #20]
   38c20:	add	r2, r2, r9
   38c24:	str	r2, [r4, #20]
   38c28:	b	38b14 <flatcc_json_printer_uint64_vector_field@@Base+0x12c>
   38c2c:	mov	r2, #10
   38c30:	str	r3, [r4, #20]
   38c34:	strb	r2, [r0]
   38c38:	ldrb	r5, [r4, #25]
   38c3c:	ldr	r3, [r4, #32]
   38c40:	ldr	r2, [r4, #16]
   38c44:	ldr	r0, [r4, #20]
   38c48:	sub	r3, r3, #1
   38c4c:	mul	r5, r3, r5
   38c50:	str	r3, [r4, #32]
   38c54:	add	r3, r0, r5
   38c58:	cmp	r2, r3
   38c5c:	bcs	38c78 <flatcc_json_printer_uint64_vector_field@@Base+0x290>
   38c60:	mov	r0, r4
   38c64:	mov	r1, r5
   38c68:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38c6c:	ldr	r0, [r4, #20]
   38c70:	add	r3, r0, #1
   38c74:	b	38bac <flatcc_json_printer_uint64_vector_field@@Base+0x1c4>
   38c78:	mov	r2, r5
   38c7c:	mov	r1, #32
   38c80:	bl	14594 <memset@plt>
   38c84:	ldr	r0, [r4, #20]
   38c88:	add	r0, r0, r5
   38c8c:	add	r3, r0, #1
   38c90:	b	38bac <flatcc_json_printer_uint64_vector_field@@Base+0x1c4>
   38c94:	mov	r2, r6
   38c98:	mov	r1, #32
   38c9c:	bl	14594 <memset@plt>
   38ca0:	ldr	r2, [r4, #20]
   38ca4:	add	r2, r2, r6
   38ca8:	str	r2, [r4, #20]
   38cac:	b	38ac4 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>

00038cb0 <flatcc_json_printer_int8_vector_field@@Base>:
   38cb0:	ldr	ip, [r1, #8]
   38cb4:	add	r2, r2, #2
   38cb8:	lsl	r2, r2, #1
   38cbc:	cmp	ip, r2
   38cc0:	bxle	lr
   38cc4:	ldr	ip, [r1, #4]
   38cc8:	ldrh	r2, [ip, r2]
   38ccc:	cmp	r2, #0
   38cd0:	bxeq	lr
   38cd4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38cd8:	ldr	ip, [r1]
   38cdc:	strd	r6, [sp, #8]
   38ce0:	str	lr, [sp, #28]
   38ce4:	strd	r8, [sp, #16]
   38ce8:	str	sl, [sp, #24]
   38cec:	adds	lr, ip, r2
   38cf0:	beq	38edc <flatcc_json_printer_int8_vector_field@@Base+0x22c>
   38cf4:	ldr	r4, [r1, #16]
   38cf8:	add	r5, r4, #1
   38cfc:	cmp	r4, #0
   38d00:	str	r5, [r1, #16]
   38d04:	beq	38d1c <flatcc_json_printer_int8_vector_field@@Base+0x6c>
   38d08:	ldr	r1, [r0, #20]
   38d0c:	mov	r4, #44	; 0x2c
   38d10:	add	r5, r1, #1
   38d14:	str	r5, [r0, #20]
   38d18:	strb	r4, [r1]
   38d1c:	mov	r1, r3
   38d20:	ldr	r3, [ip, r2]
   38d24:	mov	r4, r0
   38d28:	ldr	r2, [sp, #32]
   38d2c:	add	r5, lr, r3
   38d30:	ldr	r6, [lr, r3]
   38d34:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   38d38:	ldr	r2, [r4, #20]
   38d3c:	mov	r1, #91	; 0x5b
   38d40:	ldr	r3, [r4, #32]
   38d44:	cmp	r6, #0
   38d48:	add	r0, r2, #1
   38d4c:	add	r3, r3, #1
   38d50:	str	r0, [r4, #20]
   38d54:	str	r3, [r4, #32]
   38d58:	strb	r1, [r2]
   38d5c:	beq	38ebc <flatcc_json_printer_int8_vector_field@@Base+0x20c>
   38d60:	ldrb	r3, [r4, #25]
   38d64:	ldr	r1, [r4, #20]
   38d68:	cmp	r3, #0
   38d6c:	bne	38ef4 <flatcc_json_printer_int8_vector_field@@Base+0x244>
   38d70:	ldr	r2, [r4, #16]
   38d74:	cmp	r2, r1
   38d78:	bhi	38d90 <flatcc_json_printer_int8_vector_field@@Base+0xe0>
   38d7c:	mov	r1, r3
   38d80:	mov	r0, r4
   38d84:	ldr	r3, [r4, #44]	; 0x2c
   38d88:	blx	r3
   38d8c:	ldr	r1, [r4, #20]
   38d90:	ldrsb	r0, [r5, #4]
   38d94:	cmp	r0, #0
   38d98:	lsr	r7, r0, #31
   38d9c:	uxtb	r0, r0
   38da0:	bge	38db4 <flatcc_json_printer_int8_vector_field@@Base+0x104>
   38da4:	rsb	r0, r0, #0
   38da8:	mov	r3, #45	; 0x2d
   38dac:	uxtb	r0, r0
   38db0:	strb	r3, [r1], #1
   38db4:	bl	312f4 <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   38db8:	ldr	r3, [r4, #20]
   38dbc:	add	r0, r7, r0
   38dc0:	cmp	r6, #1
   38dc4:	add	r8, r5, #5
   38dc8:	add	r0, r3, r0
   38dcc:	str	r0, [r4, #20]
   38dd0:	beq	38ec0 <flatcc_json_printer_int8_vector_field@@Base+0x210>
   38dd4:	add	r3, r6, #4
   38dd8:	mov	r7, #10
   38ddc:	mov	r6, #44	; 0x2c
   38de0:	add	r5, r5, r3
   38de4:	b	38e58 <flatcc_json_printer_int8_vector_field@@Base+0x1a8>
   38de8:	ldr	r3, [r4, #16]
   38dec:	mov	r0, r4
   38df0:	ldr	r2, [r4, #20]
   38df4:	cmp	r2, r3
   38df8:	bcc	38e08 <flatcc_json_printer_int8_vector_field@@Base+0x158>
   38dfc:	ldr	r3, [r4, #44]	; 0x2c
   38e00:	blx	r3
   38e04:	ldr	r2, [r4, #20]
   38e08:	mov	r1, #45	; 0x2d
   38e0c:	add	r8, r8, #1
   38e10:	ldrsb	r0, [r8, #-1]
   38e14:	mov	r3, r2
   38e18:	cmp	r0, #0
   38e1c:	lsr	r9, r0, #31
   38e20:	uxtb	r0, r0
   38e24:	rsb	ip, r0, #0
   38e28:	bge	38e38 <flatcc_json_printer_int8_vector_field@@Base+0x188>
   38e2c:	uxtb	r0, ip
   38e30:	strb	r1, [r3], #1
   38e34:	mov	r2, r3
   38e38:	mov	r1, r2
   38e3c:	bl	312f4 <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   38e40:	ldr	r3, [r4, #20]
   38e44:	add	r0, r9, r0
   38e48:	cmp	r5, r8
   38e4c:	add	r0, r3, r0
   38e50:	str	r0, [r4, #20]
   38e54:	beq	38ec0 <flatcc_json_printer_int8_vector_field@@Base+0x210>
   38e58:	add	r3, r0, #1
   38e5c:	str	r3, [r4, #20]
   38e60:	strb	r6, [r0]
   38e64:	ldrb	r1, [r4, #25]
   38e68:	cmp	r1, #0
   38e6c:	beq	38de8 <flatcc_json_printer_int8_vector_field@@Base+0x138>
   38e70:	ldr	r3, [r4, #20]
   38e74:	mov	r1, #32
   38e78:	mov	r0, r4
   38e7c:	add	r2, r3, #1
   38e80:	str	r2, [r4, #20]
   38e84:	strb	r7, [r3]
   38e88:	ldrb	r2, [r4, #25]
   38e8c:	ldr	lr, [r4, #16]
   38e90:	ldr	r9, [r4, #32]
   38e94:	ldr	r3, [r4, #20]
   38e98:	mul	r9, r9, r2
   38e9c:	add	ip, r3, r9
   38ea0:	mov	r2, r9
   38ea4:	cmp	lr, ip
   38ea8:	bcs	38f14 <flatcc_json_printer_int8_vector_field@@Base+0x264>
   38eac:	mov	r1, r9
   38eb0:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38eb4:	ldr	r2, [r4, #20]
   38eb8:	b	38e08 <flatcc_json_printer_int8_vector_field@@Base+0x158>
   38ebc:	ldr	r0, [r4, #20]
   38ec0:	add	r3, r0, #1
   38ec4:	ldrb	r2, [r4, #25]
   38ec8:	cmp	r2, #0
   38ecc:	bne	38f2c <flatcc_json_printer_int8_vector_field@@Base+0x27c>
   38ed0:	mov	r2, #93	; 0x5d
   38ed4:	str	r3, [r4, #20]
   38ed8:	strb	r2, [r0]
   38edc:	ldrd	r4, [sp]
   38ee0:	ldrd	r6, [sp, #8]
   38ee4:	ldrd	r8, [sp, #16]
   38ee8:	ldr	sl, [sp, #24]
   38eec:	add	sp, sp, #28
   38ef0:	pop	{pc}		; (ldr pc, [sp], #4)
   38ef4:	add	r2, r1, #1
   38ef8:	mov	r3, #10
   38efc:	mov	r0, r4
   38f00:	str	r2, [r4, #20]
   38f04:	strb	r3, [r1]
   38f08:	bl	31110 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   38f0c:	ldr	r1, [r4, #20]
   38f10:	b	38d90 <flatcc_json_printer_int8_vector_field@@Base+0xe0>
   38f14:	mov	r0, r3
   38f18:	bl	14594 <memset@plt>
   38f1c:	ldr	r2, [r4, #20]
   38f20:	add	r2, r2, r9
   38f24:	str	r2, [r4, #20]
   38f28:	b	38e08 <flatcc_json_printer_int8_vector_field@@Base+0x158>
   38f2c:	mov	r2, #10
   38f30:	str	r3, [r4, #20]
   38f34:	strb	r2, [r0]
   38f38:	ldrb	r5, [r4, #25]
   38f3c:	ldr	r3, [r4, #32]
   38f40:	ldr	r2, [r4, #16]
   38f44:	ldr	r0, [r4, #20]
   38f48:	sub	r3, r3, #1
   38f4c:	mul	r5, r3, r5
   38f50:	str	r3, [r4, #32]
   38f54:	add	r3, r0, r5
   38f58:	cmp	r2, r3
   38f5c:	bcs	38f78 <flatcc_json_printer_int8_vector_field@@Base+0x2c8>
   38f60:	mov	r0, r4
   38f64:	mov	r1, r5
   38f68:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38f6c:	ldr	r0, [r4, #20]
   38f70:	add	r3, r0, #1
   38f74:	b	38ed0 <flatcc_json_printer_int8_vector_field@@Base+0x220>
   38f78:	mov	r2, r5
   38f7c:	mov	r1, #32
   38f80:	bl	14594 <memset@plt>
   38f84:	ldr	r0, [r4, #20]
   38f88:	add	r0, r0, r5
   38f8c:	add	r3, r0, #1
   38f90:	b	38ed0 <flatcc_json_printer_int8_vector_field@@Base+0x220>

00038f94 <flatcc_json_printer_int16_vector_field@@Base>:
   38f94:	ldr	ip, [r1, #8]
   38f98:	add	r2, r2, #2
   38f9c:	lsl	r2, r2, #1
   38fa0:	cmp	ip, r2
   38fa4:	bxle	lr
   38fa8:	ldr	ip, [r1, #4]
   38fac:	ldrh	r2, [ip, r2]
   38fb0:	cmp	r2, #0
   38fb4:	bxeq	lr
   38fb8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38fbc:	ldr	ip, [r1]
   38fc0:	strd	r6, [sp, #8]
   38fc4:	str	lr, [sp, #28]
   38fc8:	strd	r8, [sp, #16]
   38fcc:	str	sl, [sp, #24]
   38fd0:	adds	lr, ip, r2
   38fd4:	beq	391c0 <flatcc_json_printer_int16_vector_field@@Base+0x22c>
   38fd8:	ldr	r4, [r1, #16]
   38fdc:	add	r5, r4, #1
   38fe0:	cmp	r4, #0
   38fe4:	str	r5, [r1, #16]
   38fe8:	beq	39000 <flatcc_json_printer_int16_vector_field@@Base+0x6c>
   38fec:	ldr	r1, [r0, #20]
   38ff0:	mov	r4, #44	; 0x2c
   38ff4:	add	r5, r1, #1
   38ff8:	str	r5, [r0, #20]
   38ffc:	strb	r4, [r1]
   39000:	mov	r1, r3
   39004:	ldr	r3, [ip, r2]
   39008:	mov	r4, r0
   3900c:	ldr	r2, [sp, #32]
   39010:	add	r6, lr, r3
   39014:	ldr	r5, [lr, r3]
   39018:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3901c:	ldr	r2, [r4, #20]
   39020:	mov	r1, #91	; 0x5b
   39024:	ldr	r3, [r4, #32]
   39028:	cmp	r5, #0
   3902c:	add	r0, r2, #1
   39030:	add	r3, r3, #1
   39034:	str	r0, [r4, #20]
   39038:	str	r3, [r4, #32]
   3903c:	strb	r1, [r2]
   39040:	beq	391a0 <flatcc_json_printer_int16_vector_field@@Base+0x20c>
   39044:	ldrb	r3, [r4, #25]
   39048:	ldr	r1, [r4, #20]
   3904c:	cmp	r3, #0
   39050:	bne	391d8 <flatcc_json_printer_int16_vector_field@@Base+0x244>
   39054:	ldr	r2, [r4, #16]
   39058:	cmp	r2, r1
   3905c:	bhi	39074 <flatcc_json_printer_int16_vector_field@@Base+0xe0>
   39060:	mov	r1, r3
   39064:	mov	r0, r4
   39068:	ldr	r3, [r4, #44]	; 0x2c
   3906c:	blx	r3
   39070:	ldr	r1, [r4, #20]
   39074:	ldrsh	r0, [r6, #4]
   39078:	cmp	r0, #0
   3907c:	lsr	r7, r0, #31
   39080:	uxth	r0, r0
   39084:	bge	39098 <flatcc_json_printer_int16_vector_field@@Base+0x104>
   39088:	rsb	r0, r0, #0
   3908c:	mov	r3, #45	; 0x2d
   39090:	uxth	r0, r0
   39094:	strb	r3, [r1], #1
   39098:	bl	30100 <flatcc_json_parser_struct_as_root@@Base+0x4>
   3909c:	ldr	r3, [r4, #20]
   390a0:	add	r0, r7, r0
   390a4:	cmp	r5, #1
   390a8:	add	r6, r6, #6
   390ac:	sub	r5, r5, #2
   390b0:	add	r0, r3, r0
   390b4:	str	r0, [r4, #20]
   390b8:	beq	391a4 <flatcc_json_printer_int16_vector_field@@Base+0x210>
   390bc:	mov	r7, #44	; 0x2c
   390c0:	mov	r8, #10
   390c4:	b	3913c <flatcc_json_printer_int16_vector_field@@Base+0x1a8>
   390c8:	ldr	r3, [r4, #16]
   390cc:	mov	r0, r4
   390d0:	ldr	r2, [r4, #20]
   390d4:	cmp	r2, r3
   390d8:	bcc	390e8 <flatcc_json_printer_int16_vector_field@@Base+0x154>
   390dc:	ldr	r3, [r4, #44]	; 0x2c
   390e0:	blx	r3
   390e4:	ldr	r2, [r4, #20]
   390e8:	mov	r1, #45	; 0x2d
   390ec:	sub	r5, r5, #1
   390f0:	ldrsh	r0, [r6]
   390f4:	mov	r3, r2
   390f8:	add	r6, r6, #2
   390fc:	cmp	r0, #0
   39100:	lsr	r9, r0, #31
   39104:	uxth	r0, r0
   39108:	rsb	ip, r0, #0
   3910c:	bge	3911c <flatcc_json_printer_int16_vector_field@@Base+0x188>
   39110:	uxth	r0, ip
   39114:	strb	r1, [r3], #1
   39118:	mov	r2, r3
   3911c:	mov	r1, r2
   39120:	bl	30100 <flatcc_json_parser_struct_as_root@@Base+0x4>
   39124:	ldr	r3, [r4, #20]
   39128:	add	r0, r9, r0
   3912c:	cmn	r5, #1
   39130:	add	r0, r3, r0
   39134:	str	r0, [r4, #20]
   39138:	beq	391a4 <flatcc_json_printer_int16_vector_field@@Base+0x210>
   3913c:	add	r3, r0, #1
   39140:	str	r3, [r4, #20]
   39144:	strb	r7, [r0]
   39148:	ldrb	r1, [r4, #25]
   3914c:	cmp	r1, #0
   39150:	beq	390c8 <flatcc_json_printer_int16_vector_field@@Base+0x134>
   39154:	ldr	r3, [r4, #20]
   39158:	mov	r1, #32
   3915c:	mov	r0, r4
   39160:	add	r2, r3, #1
   39164:	str	r2, [r4, #20]
   39168:	strb	r8, [r3]
   3916c:	ldrb	r2, [r4, #25]
   39170:	ldr	lr, [r4, #16]
   39174:	ldr	r9, [r4, #32]
   39178:	ldr	r3, [r4, #20]
   3917c:	mul	r9, r9, r2
   39180:	add	ip, r3, r9
   39184:	mov	r2, r9
   39188:	cmp	lr, ip
   3918c:	bcs	391f8 <flatcc_json_printer_int16_vector_field@@Base+0x264>
   39190:	mov	r1, r9
   39194:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39198:	ldr	r2, [r4, #20]
   3919c:	b	390e8 <flatcc_json_printer_int16_vector_field@@Base+0x154>
   391a0:	ldr	r0, [r4, #20]
   391a4:	add	r3, r0, #1
   391a8:	ldrb	r2, [r4, #25]
   391ac:	cmp	r2, #0
   391b0:	bne	39210 <flatcc_json_printer_int16_vector_field@@Base+0x27c>
   391b4:	mov	r2, #93	; 0x5d
   391b8:	str	r3, [r4, #20]
   391bc:	strb	r2, [r0]
   391c0:	ldrd	r4, [sp]
   391c4:	ldrd	r6, [sp, #8]
   391c8:	ldrd	r8, [sp, #16]
   391cc:	ldr	sl, [sp, #24]
   391d0:	add	sp, sp, #28
   391d4:	pop	{pc}		; (ldr pc, [sp], #4)
   391d8:	add	r2, r1, #1
   391dc:	mov	r3, #10
   391e0:	mov	r0, r4
   391e4:	str	r2, [r4, #20]
   391e8:	strb	r3, [r1]
   391ec:	bl	31110 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   391f0:	ldr	r1, [r4, #20]
   391f4:	b	39074 <flatcc_json_printer_int16_vector_field@@Base+0xe0>
   391f8:	mov	r0, r3
   391fc:	bl	14594 <memset@plt>
   39200:	ldr	r2, [r4, #20]
   39204:	add	r2, r2, r9
   39208:	str	r2, [r4, #20]
   3920c:	b	390e8 <flatcc_json_printer_int16_vector_field@@Base+0x154>
   39210:	mov	r2, #10
   39214:	str	r3, [r4, #20]
   39218:	strb	r2, [r0]
   3921c:	ldrb	r5, [r4, #25]
   39220:	ldr	r3, [r4, #32]
   39224:	ldr	r2, [r4, #16]
   39228:	ldr	r0, [r4, #20]
   3922c:	sub	r3, r3, #1
   39230:	mul	r5, r3, r5
   39234:	str	r3, [r4, #32]
   39238:	add	r3, r0, r5
   3923c:	cmp	r2, r3
   39240:	bcs	3925c <flatcc_json_printer_int16_vector_field@@Base+0x2c8>
   39244:	mov	r0, r4
   39248:	mov	r1, r5
   3924c:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39250:	ldr	r0, [r4, #20]
   39254:	add	r3, r0, #1
   39258:	b	391b4 <flatcc_json_printer_int16_vector_field@@Base+0x220>
   3925c:	mov	r2, r5
   39260:	mov	r1, #32
   39264:	bl	14594 <memset@plt>
   39268:	ldr	r0, [r4, #20]
   3926c:	add	r0, r0, r5
   39270:	add	r3, r0, #1
   39274:	b	391b4 <flatcc_json_printer_int16_vector_field@@Base+0x220>

00039278 <flatcc_json_printer_int32_vector_field@@Base>:
   39278:	ldr	ip, [r1, #8]
   3927c:	add	r2, r2, #2
   39280:	lsl	r2, r2, #1
   39284:	cmp	ip, r2
   39288:	bxle	lr
   3928c:	ldr	ip, [r1, #4]
   39290:	ldrh	r2, [ip, r2]
   39294:	cmp	r2, #0
   39298:	bxeq	lr
   3929c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   392a0:	ldr	ip, [r1]
   392a4:	strd	r6, [sp, #8]
   392a8:	str	lr, [sp, #28]
   392ac:	strd	r8, [sp, #16]
   392b0:	str	sl, [sp, #24]
   392b4:	adds	lr, ip, r2
   392b8:	beq	39494 <flatcc_json_printer_int32_vector_field@@Base+0x21c>
   392bc:	ldr	r4, [r1, #16]
   392c0:	add	r5, r4, #1
   392c4:	cmp	r4, #0
   392c8:	str	r5, [r1, #16]
   392cc:	beq	392e4 <flatcc_json_printer_int32_vector_field@@Base+0x6c>
   392d0:	ldr	r1, [r0, #20]
   392d4:	mov	r4, #44	; 0x2c
   392d8:	add	r5, r1, #1
   392dc:	str	r5, [r0, #20]
   392e0:	strb	r4, [r1]
   392e4:	mov	r1, r3
   392e8:	ldr	r3, [ip, r2]
   392ec:	mov	r4, r0
   392f0:	ldr	r2, [sp, #32]
   392f4:	add	r6, lr, r3
   392f8:	ldr	r5, [lr, r3]
   392fc:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   39300:	ldr	r2, [r4, #20]
   39304:	mov	r1, #91	; 0x5b
   39308:	ldr	r3, [r4, #32]
   3930c:	cmp	r5, #0
   39310:	add	r0, r2, #1
   39314:	add	r3, r3, #1
   39318:	str	r0, [r4, #20]
   3931c:	str	r3, [r4, #32]
   39320:	strb	r1, [r2]
   39324:	beq	39474 <flatcc_json_printer_int32_vector_field@@Base+0x1fc>
   39328:	ldrb	r3, [r4, #25]
   3932c:	ldr	r1, [r4, #20]
   39330:	cmp	r3, #0
   39334:	bne	394ac <flatcc_json_printer_int32_vector_field@@Base+0x234>
   39338:	ldr	r2, [r4, #16]
   3933c:	cmp	r2, r1
   39340:	bhi	39358 <flatcc_json_printer_int32_vector_field@@Base+0xe0>
   39344:	mov	r1, r3
   39348:	mov	r0, r4
   3934c:	ldr	r3, [r4, #44]	; 0x2c
   39350:	blx	r3
   39354:	ldr	r1, [r4, #20]
   39358:	ldr	r0, [r6, #4]
   3935c:	cmp	r0, #0
   39360:	lsr	r7, r0, #31
   39364:	bge	39374 <flatcc_json_printer_int32_vector_field@@Base+0xfc>
   39368:	mov	r3, #45	; 0x2d
   3936c:	rsb	r0, r0, #0
   39370:	strb	r3, [r1], #1
   39374:	bl	30268 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   39378:	ldr	r3, [r4, #20]
   3937c:	add	r0, r7, r0
   39380:	cmp	r5, #1
   39384:	add	r6, r6, #8
   39388:	sub	r5, r5, #2
   3938c:	add	r0, r3, r0
   39390:	str	r0, [r4, #20]
   39394:	beq	39478 <flatcc_json_printer_int32_vector_field@@Base+0x200>
   39398:	mov	r7, #44	; 0x2c
   3939c:	mov	r8, #10
   393a0:	b	39410 <flatcc_json_printer_int32_vector_field@@Base+0x198>
   393a4:	ldr	r3, [r4, #16]
   393a8:	mov	r0, r4
   393ac:	ldr	r2, [r4, #20]
   393b0:	cmp	r2, r3
   393b4:	bcc	393c4 <flatcc_json_printer_int32_vector_field@@Base+0x14c>
   393b8:	ldr	r3, [r4, #44]	; 0x2c
   393bc:	blx	r3
   393c0:	ldr	r2, [r4, #20]
   393c4:	mov	r1, #45	; 0x2d
   393c8:	sub	r5, r5, #1
   393cc:	ldr	r0, [r6]
   393d0:	mov	r3, r2
   393d4:	add	r6, r6, #4
   393d8:	cmp	r0, #0
   393dc:	lsr	r9, r0, #31
   393e0:	bge	393f0 <flatcc_json_printer_int32_vector_field@@Base+0x178>
   393e4:	rsb	r0, r0, #0
   393e8:	strb	r1, [r3], #1
   393ec:	mov	r2, r3
   393f0:	mov	r1, r2
   393f4:	bl	30268 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   393f8:	ldr	r3, [r4, #20]
   393fc:	add	r0, r9, r0
   39400:	cmn	r5, #1
   39404:	add	r0, r3, r0
   39408:	str	r0, [r4, #20]
   3940c:	beq	39478 <flatcc_json_printer_int32_vector_field@@Base+0x200>
   39410:	add	r3, r0, #1
   39414:	str	r3, [r4, #20]
   39418:	strb	r7, [r0]
   3941c:	ldrb	r1, [r4, #25]
   39420:	cmp	r1, #0
   39424:	beq	393a4 <flatcc_json_printer_int32_vector_field@@Base+0x12c>
   39428:	ldr	r3, [r4, #20]
   3942c:	mov	r1, #32
   39430:	mov	r0, r4
   39434:	add	r2, r3, #1
   39438:	str	r2, [r4, #20]
   3943c:	strb	r8, [r3]
   39440:	ldrb	r2, [r4, #25]
   39444:	ldr	lr, [r4, #16]
   39448:	ldr	r9, [r4, #32]
   3944c:	ldr	r3, [r4, #20]
   39450:	mul	r9, r9, r2
   39454:	add	ip, r3, r9
   39458:	mov	r2, r9
   3945c:	cmp	lr, ip
   39460:	bcs	394f0 <flatcc_json_printer_int32_vector_field@@Base+0x278>
   39464:	mov	r1, r9
   39468:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3946c:	ldr	r2, [r4, #20]
   39470:	b	393c4 <flatcc_json_printer_int32_vector_field@@Base+0x14c>
   39474:	ldr	r0, [r4, #20]
   39478:	add	r3, r0, #1
   3947c:	ldrb	r2, [r4, #25]
   39480:	cmp	r2, #0
   39484:	bne	39508 <flatcc_json_printer_int32_vector_field@@Base+0x290>
   39488:	mov	r2, #93	; 0x5d
   3948c:	str	r3, [r4, #20]
   39490:	strb	r2, [r0]
   39494:	ldrd	r4, [sp]
   39498:	ldrd	r6, [sp, #8]
   3949c:	ldrd	r8, [sp, #16]
   394a0:	ldr	sl, [sp, #24]
   394a4:	add	sp, sp, #28
   394a8:	pop	{pc}		; (ldr pc, [sp], #4)
   394ac:	add	r2, r1, #1
   394b0:	mov	r3, #10
   394b4:	str	r2, [r4, #20]
   394b8:	strb	r3, [r1]
   394bc:	ldrb	r7, [r4, #25]
   394c0:	ldr	r2, [r4, #16]
   394c4:	ldr	r1, [r4, #32]
   394c8:	ldr	r0, [r4, #20]
   394cc:	mul	r7, r1, r7
   394d0:	add	r3, r0, r7
   394d4:	cmp	r2, r3
   394d8:	bcs	39570 <flatcc_json_printer_int32_vector_field@@Base+0x2f8>
   394dc:	mov	r1, r7
   394e0:	mov	r0, r4
   394e4:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   394e8:	ldr	r1, [r4, #20]
   394ec:	b	39358 <flatcc_json_printer_int32_vector_field@@Base+0xe0>
   394f0:	mov	r0, r3
   394f4:	bl	14594 <memset@plt>
   394f8:	ldr	r2, [r4, #20]
   394fc:	add	r2, r2, r9
   39500:	str	r2, [r4, #20]
   39504:	b	393c4 <flatcc_json_printer_int32_vector_field@@Base+0x14c>
   39508:	mov	r2, #10
   3950c:	str	r3, [r4, #20]
   39510:	strb	r2, [r0]
   39514:	ldrb	r5, [r4, #25]
   39518:	ldr	r3, [r4, #32]
   3951c:	ldr	r2, [r4, #16]
   39520:	ldr	r0, [r4, #20]
   39524:	sub	r3, r3, #1
   39528:	mul	r5, r3, r5
   3952c:	str	r3, [r4, #32]
   39530:	add	r3, r0, r5
   39534:	cmp	r2, r3
   39538:	bcs	39554 <flatcc_json_printer_int32_vector_field@@Base+0x2dc>
   3953c:	mov	r0, r4
   39540:	mov	r1, r5
   39544:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39548:	ldr	r0, [r4, #20]
   3954c:	add	r3, r0, #1
   39550:	b	39488 <flatcc_json_printer_int32_vector_field@@Base+0x210>
   39554:	mov	r2, r5
   39558:	mov	r1, #32
   3955c:	bl	14594 <memset@plt>
   39560:	ldr	r0, [r4, #20]
   39564:	add	r0, r0, r5
   39568:	add	r3, r0, #1
   3956c:	b	39488 <flatcc_json_printer_int32_vector_field@@Base+0x210>
   39570:	mov	r1, #32
   39574:	mov	r2, r7
   39578:	bl	14594 <memset@plt>
   3957c:	ldr	r1, [r4, #20]
   39580:	add	r1, r1, r7
   39584:	str	r1, [r4, #20]
   39588:	b	39358 <flatcc_json_printer_int32_vector_field@@Base+0xe0>

0003958c <flatcc_json_printer_int64_vector_field@@Base>:
   3958c:	ldr	ip, [r1, #8]
   39590:	add	r2, r2, #2
   39594:	lsl	r2, r2, #1
   39598:	cmp	ip, r2
   3959c:	bxle	lr
   395a0:	ldr	ip, [r1, #4]
   395a4:	ldrh	r2, [ip, r2]
   395a8:	cmp	r2, #0
   395ac:	bxeq	lr
   395b0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   395b4:	ldr	ip, [r1]
   395b8:	strd	r6, [sp, #8]
   395bc:	str	lr, [sp, #28]
   395c0:	strd	r8, [sp, #16]
   395c4:	str	sl, [sp, #24]
   395c8:	adds	lr, ip, r2
   395cc:	beq	397b0 <flatcc_json_printer_int64_vector_field@@Base+0x224>
   395d0:	ldr	r4, [r1, #16]
   395d4:	add	r5, r4, #1
   395d8:	cmp	r4, #0
   395dc:	str	r5, [r1, #16]
   395e0:	beq	395f8 <flatcc_json_printer_int64_vector_field@@Base+0x6c>
   395e4:	ldr	r1, [r0, #20]
   395e8:	mov	r4, #44	; 0x2c
   395ec:	add	r5, r1, #1
   395f0:	str	r5, [r0, #20]
   395f4:	strb	r4, [r1]
   395f8:	mov	r1, r3
   395fc:	ldr	r3, [ip, r2]
   39600:	mov	r4, r0
   39604:	ldr	r2, [sp, #32]
   39608:	add	r6, lr, r3
   3960c:	ldr	r5, [lr, r3]
   39610:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   39614:	ldr	r2, [r4, #20]
   39618:	mov	r1, #91	; 0x5b
   3961c:	ldr	r3, [r4, #32]
   39620:	cmp	r5, #0
   39624:	add	r0, r2, #1
   39628:	add	r3, r3, #1
   3962c:	str	r0, [r4, #20]
   39630:	str	r3, [r4, #32]
   39634:	strb	r1, [r2]
   39638:	beq	39790 <flatcc_json_printer_int64_vector_field@@Base+0x204>
   3963c:	ldrb	r1, [r4, #25]
   39640:	ldr	r2, [r4, #20]
   39644:	cmp	r1, #0
   39648:	bne	397c8 <flatcc_json_printer_int64_vector_field@@Base+0x23c>
   3964c:	ldr	r3, [r4, #16]
   39650:	cmp	r3, r2
   39654:	bhi	39668 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   39658:	mov	r0, r4
   3965c:	ldr	r3, [r4, #44]	; 0x2c
   39660:	blx	r3
   39664:	ldr	r2, [r4, #20]
   39668:	ldrd	r0, [r6, #4]
   3966c:	cmp	r0, #0
   39670:	lsr	r7, r1, #31
   39674:	sbcs	r3, r1, #0
   39678:	bge	3968c <flatcc_json_printer_int64_vector_field@@Base+0x100>
   3967c:	rsbs	r0, r0, #0
   39680:	mov	r3, #45	; 0x2d
   39684:	rsc	r1, r1, #0
   39688:	strb	r3, [r2], #1
   3968c:	bl	30594 <flatcc_json_parser_struct_as_root@@Base+0x498>
   39690:	ldr	r3, [r4, #20]
   39694:	add	r0, r7, r0
   39698:	cmp	r5, #1
   3969c:	add	r6, r6, #12
   396a0:	sub	r5, r5, #2
   396a4:	add	r0, r3, r0
   396a8:	str	r0, [r4, #20]
   396ac:	beq	39794 <flatcc_json_printer_int64_vector_field@@Base+0x208>
   396b0:	mov	r7, #44	; 0x2c
   396b4:	mov	r8, #10
   396b8:	b	3972c <flatcc_json_printer_int64_vector_field@@Base+0x1a0>
   396bc:	ldr	r3, [r4, #16]
   396c0:	mov	r0, r4
   396c4:	ldr	r2, [r4, #20]
   396c8:	cmp	r2, r3
   396cc:	bcc	396dc <flatcc_json_printer_int64_vector_field@@Base+0x150>
   396d0:	ldr	r3, [r4, #44]	; 0x2c
   396d4:	blx	r3
   396d8:	ldr	r2, [r4, #20]
   396dc:	mov	ip, #45	; 0x2d
   396e0:	sub	r5, r5, #1
   396e4:	ldrd	r0, [r6]
   396e8:	mov	r3, r2
   396ec:	add	r6, r6, #8
   396f0:	cmp	r0, #0
   396f4:	lsr	r9, r1, #31
   396f8:	sbcs	lr, r1, #0
   396fc:	bge	39710 <flatcc_json_printer_int64_vector_field@@Base+0x184>
   39700:	rsbs	r0, r0, #0
   39704:	strb	ip, [r3], #1
   39708:	mov	r2, r3
   3970c:	rsc	r1, r1, #0
   39710:	bl	30594 <flatcc_json_parser_struct_as_root@@Base+0x498>
   39714:	ldr	r3, [r4, #20]
   39718:	add	r0, r9, r0
   3971c:	cmn	r5, #1
   39720:	add	r0, r3, r0
   39724:	str	r0, [r4, #20]
   39728:	beq	39794 <flatcc_json_printer_int64_vector_field@@Base+0x208>
   3972c:	add	r3, r0, #1
   39730:	str	r3, [r4, #20]
   39734:	strb	r7, [r0]
   39738:	ldrb	r1, [r4, #25]
   3973c:	cmp	r1, #0
   39740:	beq	396bc <flatcc_json_printer_int64_vector_field@@Base+0x130>
   39744:	ldr	r3, [r4, #20]
   39748:	mov	r1, #32
   3974c:	mov	r0, r4
   39750:	add	r2, r3, #1
   39754:	str	r2, [r4, #20]
   39758:	strb	r8, [r3]
   3975c:	ldrb	r2, [r4, #25]
   39760:	ldr	lr, [r4, #16]
   39764:	ldr	r9, [r4, #32]
   39768:	ldr	r3, [r4, #20]
   3976c:	mul	r9, r9, r2
   39770:	add	ip, r3, r9
   39774:	mov	r2, r9
   39778:	cmp	lr, ip
   3977c:	bcs	397e8 <flatcc_json_printer_int64_vector_field@@Base+0x25c>
   39780:	mov	r1, r9
   39784:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39788:	ldr	r2, [r4, #20]
   3978c:	b	396dc <flatcc_json_printer_int64_vector_field@@Base+0x150>
   39790:	ldr	r0, [r4, #20]
   39794:	add	r3, r0, #1
   39798:	ldrb	r2, [r4, #25]
   3979c:	cmp	r2, #0
   397a0:	bne	39800 <flatcc_json_printer_int64_vector_field@@Base+0x274>
   397a4:	mov	r2, #93	; 0x5d
   397a8:	str	r3, [r4, #20]
   397ac:	strb	r2, [r0]
   397b0:	ldrd	r4, [sp]
   397b4:	ldrd	r6, [sp, #8]
   397b8:	ldrd	r8, [sp, #16]
   397bc:	ldr	sl, [sp, #24]
   397c0:	add	sp, sp, #28
   397c4:	pop	{pc}		; (ldr pc, [sp], #4)
   397c8:	add	r1, r2, #1
   397cc:	mov	r3, #10
   397d0:	mov	r0, r4
   397d4:	str	r1, [r4, #20]
   397d8:	strb	r3, [r2]
   397dc:	bl	31110 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   397e0:	ldr	r2, [r4, #20]
   397e4:	b	39668 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   397e8:	mov	r0, r3
   397ec:	bl	14594 <memset@plt>
   397f0:	ldr	r2, [r4, #20]
   397f4:	add	r2, r2, r9
   397f8:	str	r2, [r4, #20]
   397fc:	b	396dc <flatcc_json_printer_int64_vector_field@@Base+0x150>
   39800:	mov	r2, #10
   39804:	str	r3, [r4, #20]
   39808:	strb	r2, [r0]
   3980c:	ldrb	r5, [r4, #25]
   39810:	ldr	r3, [r4, #32]
   39814:	ldr	r2, [r4, #16]
   39818:	ldr	r0, [r4, #20]
   3981c:	sub	r3, r3, #1
   39820:	mul	r5, r3, r5
   39824:	str	r3, [r4, #32]
   39828:	add	r3, r0, r5
   3982c:	cmp	r2, r3
   39830:	bcs	3984c <flatcc_json_printer_int64_vector_field@@Base+0x2c0>
   39834:	mov	r0, r4
   39838:	mov	r1, r5
   3983c:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39840:	ldr	r0, [r4, #20]
   39844:	add	r3, r0, #1
   39848:	b	397a4 <flatcc_json_printer_int64_vector_field@@Base+0x218>
   3984c:	mov	r2, r5
   39850:	mov	r1, #32
   39854:	bl	14594 <memset@plt>
   39858:	ldr	r0, [r4, #20]
   3985c:	add	r0, r0, r5
   39860:	add	r3, r0, #1
   39864:	b	397a4 <flatcc_json_printer_int64_vector_field@@Base+0x218>

00039868 <flatcc_json_printer_bool_vector_field@@Base>:
   39868:	ldr	ip, [r1, #8]
   3986c:	add	r2, r2, #2
   39870:	lsl	r2, r2, #1
   39874:	cmp	ip, r2
   39878:	bxle	lr
   3987c:	ldr	ip, [r1, #4]
   39880:	ldrh	r2, [ip, r2]
   39884:	cmp	r2, #0
   39888:	bxeq	lr
   3988c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   39890:	ldr	ip, [r1]
   39894:	strd	r6, [sp, #8]
   39898:	str	lr, [sp, #28]
   3989c:	strd	r8, [sp, #16]
   398a0:	str	sl, [sp, #24]
   398a4:	adds	lr, ip, r2
   398a8:	beq	39a40 <flatcc_json_printer_bool_vector_field@@Base+0x1d8>
   398ac:	ldr	r4, [r1, #16]
   398b0:	add	r5, r4, #1
   398b4:	cmp	r4, #0
   398b8:	str	r5, [r1, #16]
   398bc:	beq	398d4 <flatcc_json_printer_bool_vector_field@@Base+0x6c>
   398c0:	ldr	r1, [r0, #20]
   398c4:	mov	r4, #44	; 0x2c
   398c8:	add	r5, r1, #1
   398cc:	str	r5, [r0, #20]
   398d0:	strb	r4, [r1]
   398d4:	mov	r1, r3
   398d8:	ldr	r3, [ip, r2]
   398dc:	mov	r4, r0
   398e0:	ldr	r2, [sp, #32]
   398e4:	add	r6, lr, r3
   398e8:	ldr	r7, [lr, r3]
   398ec:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   398f0:	ldr	r2, [r4, #20]
   398f4:	mov	r1, #91	; 0x5b
   398f8:	ldr	r3, [r4, #32]
   398fc:	cmp	r7, #0
   39900:	add	r0, r2, #1
   39904:	add	r3, r3, #1
   39908:	str	r0, [r4, #20]
   3990c:	str	r3, [r4, #32]
   39910:	strb	r1, [r2]
   39914:	beq	39a20 <flatcc_json_printer_bool_vector_field@@Base+0x1b8>
   39918:	ldrb	r3, [r4, #25]
   3991c:	ldr	r1, [r4, #20]
   39920:	cmp	r3, #0
   39924:	bne	39a58 <flatcc_json_printer_bool_vector_field@@Base+0x1f0>
   39928:	ldr	r2, [r4, #16]
   3992c:	cmp	r2, r1
   39930:	bhi	39948 <flatcc_json_printer_bool_vector_field@@Base+0xe0>
   39934:	mov	r1, r3
   39938:	mov	r0, r4
   3993c:	ldr	r3, [r4, #44]	; 0x2c
   39940:	blx	r3
   39944:	ldr	r1, [r4, #20]
   39948:	add	r5, r6, #5
   3994c:	ldrb	r0, [r6, #4]
   39950:	bl	31428 <flatcc_json_parser_struct_as_root@@Base+0x132c>
   39954:	ldr	r3, [r4, #20]
   39958:	cmp	r7, #1
   3995c:	add	r0, r3, r0
   39960:	str	r0, [r4, #20]
   39964:	beq	39a24 <flatcc_json_printer_bool_vector_field@@Base+0x1bc>
   39968:	add	r3, r7, #4
   3996c:	mov	r8, #10
   39970:	mov	r7, #44	; 0x2c
   39974:	add	r6, r6, r3
   39978:	b	399bc <flatcc_json_printer_bool_vector_field@@Base+0x154>
   3997c:	ldr	r3, [r4, #16]
   39980:	mov	r0, r4
   39984:	ldr	r2, [r4, #20]
   39988:	cmp	r2, r3
   3998c:	bcc	3999c <flatcc_json_printer_bool_vector_field@@Base+0x134>
   39990:	ldr	r3, [r4, #44]	; 0x2c
   39994:	blx	r3
   39998:	ldr	r2, [r4, #20]
   3999c:	mov	r1, r2
   399a0:	ldrb	r0, [r5], #1
   399a4:	bl	31428 <flatcc_json_parser_struct_as_root@@Base+0x132c>
   399a8:	ldr	r3, [r4, #20]
   399ac:	cmp	r5, r6
   399b0:	add	r0, r3, r0
   399b4:	str	r0, [r4, #20]
   399b8:	beq	39a24 <flatcc_json_printer_bool_vector_field@@Base+0x1bc>
   399bc:	add	r3, r0, #1
   399c0:	str	r3, [r4, #20]
   399c4:	strb	r7, [r0]
   399c8:	ldrb	r1, [r4, #25]
   399cc:	cmp	r1, #0
   399d0:	beq	3997c <flatcc_json_printer_bool_vector_field@@Base+0x114>
   399d4:	ldr	r3, [r4, #20]
   399d8:	mov	r1, #32
   399dc:	mov	r0, r4
   399e0:	add	r2, r3, #1
   399e4:	str	r2, [r4, #20]
   399e8:	strb	r8, [r3]
   399ec:	ldrb	r2, [r4, #25]
   399f0:	ldr	lr, [r4, #16]
   399f4:	ldr	r9, [r4, #32]
   399f8:	ldr	r3, [r4, #20]
   399fc:	mul	r9, r9, r2
   39a00:	add	ip, r3, r9
   39a04:	mov	r2, r9
   39a08:	cmp	lr, ip
   39a0c:	bcs	39a9c <flatcc_json_printer_bool_vector_field@@Base+0x234>
   39a10:	mov	r1, r9
   39a14:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39a18:	ldr	r2, [r4, #20]
   39a1c:	b	3999c <flatcc_json_printer_bool_vector_field@@Base+0x134>
   39a20:	ldr	r0, [r4, #20]
   39a24:	add	r3, r0, #1
   39a28:	ldrb	r2, [r4, #25]
   39a2c:	cmp	r2, #0
   39a30:	bne	39ab4 <flatcc_json_printer_bool_vector_field@@Base+0x24c>
   39a34:	mov	r2, #93	; 0x5d
   39a38:	str	r3, [r4, #20]
   39a3c:	strb	r2, [r0]
   39a40:	ldrd	r4, [sp]
   39a44:	ldrd	r6, [sp, #8]
   39a48:	ldrd	r8, [sp, #16]
   39a4c:	ldr	sl, [sp, #24]
   39a50:	add	sp, sp, #28
   39a54:	pop	{pc}		; (ldr pc, [sp], #4)
   39a58:	add	r2, r1, #1
   39a5c:	mov	r3, #10
   39a60:	str	r2, [r4, #20]
   39a64:	strb	r3, [r1]
   39a68:	ldrb	r5, [r4, #25]
   39a6c:	ldr	r2, [r4, #16]
   39a70:	ldr	r1, [r4, #32]
   39a74:	ldr	r0, [r4, #20]
   39a78:	mul	r5, r1, r5
   39a7c:	add	r3, r0, r5
   39a80:	cmp	r2, r3
   39a84:	bcs	39b1c <flatcc_json_printer_bool_vector_field@@Base+0x2b4>
   39a88:	mov	r1, r5
   39a8c:	mov	r0, r4
   39a90:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39a94:	ldr	r1, [r4, #20]
   39a98:	b	39948 <flatcc_json_printer_bool_vector_field@@Base+0xe0>
   39a9c:	mov	r0, r3
   39aa0:	bl	14594 <memset@plt>
   39aa4:	ldr	r2, [r4, #20]
   39aa8:	add	r2, r2, r9
   39aac:	str	r2, [r4, #20]
   39ab0:	b	3999c <flatcc_json_printer_bool_vector_field@@Base+0x134>
   39ab4:	mov	r2, #10
   39ab8:	str	r3, [r4, #20]
   39abc:	strb	r2, [r0]
   39ac0:	ldrb	r5, [r4, #25]
   39ac4:	ldr	r3, [r4, #32]
   39ac8:	ldr	r2, [r4, #16]
   39acc:	ldr	r0, [r4, #20]
   39ad0:	sub	r3, r3, #1
   39ad4:	mul	r5, r3, r5
   39ad8:	str	r3, [r4, #32]
   39adc:	add	r3, r0, r5
   39ae0:	cmp	r2, r3
   39ae4:	bcs	39b00 <flatcc_json_printer_bool_vector_field@@Base+0x298>
   39ae8:	mov	r0, r4
   39aec:	mov	r1, r5
   39af0:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39af4:	ldr	r0, [r4, #20]
   39af8:	add	r3, r0, #1
   39afc:	b	39a34 <flatcc_json_printer_bool_vector_field@@Base+0x1cc>
   39b00:	mov	r2, r5
   39b04:	mov	r1, #32
   39b08:	bl	14594 <memset@plt>
   39b0c:	ldr	r0, [r4, #20]
   39b10:	add	r0, r0, r5
   39b14:	add	r3, r0, #1
   39b18:	b	39a34 <flatcc_json_printer_bool_vector_field@@Base+0x1cc>
   39b1c:	mov	r1, #32
   39b20:	mov	r2, r5
   39b24:	bl	14594 <memset@plt>
   39b28:	ldr	r1, [r4, #20]
   39b2c:	add	r1, r1, r5
   39b30:	str	r1, [r4, #20]
   39b34:	b	39948 <flatcc_json_printer_bool_vector_field@@Base+0xe0>

00039b38 <flatcc_json_printer_float_vector_field@@Base>:
   39b38:	ldr	ip, [r1, #8]
   39b3c:	add	r2, r2, #2
   39b40:	lsl	r2, r2, #1
   39b44:	cmp	ip, r2
   39b48:	bxle	lr
   39b4c:	ldr	ip, [r1, #4]
   39b50:	ldrh	r2, [ip, r2]
   39b54:	cmp	r2, #0
   39b58:	bxeq	lr
   39b5c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   39b60:	ldr	ip, [r1]
   39b64:	strd	r6, [sp, #8]
   39b68:	str	lr, [sp, #28]
   39b6c:	strd	r8, [sp, #16]
   39b70:	str	sl, [sp, #24]
   39b74:	adds	lr, ip, r2
   39b78:	beq	39d14 <flatcc_json_printer_float_vector_field@@Base+0x1dc>
   39b7c:	ldr	r4, [r1, #16]
   39b80:	add	r5, r4, #1
   39b84:	cmp	r4, #0
   39b88:	str	r5, [r1, #16]
   39b8c:	beq	39ba4 <flatcc_json_printer_float_vector_field@@Base+0x6c>
   39b90:	ldr	r1, [r0, #20]
   39b94:	mov	r4, #44	; 0x2c
   39b98:	add	r5, r1, #1
   39b9c:	str	r5, [r0, #20]
   39ba0:	strb	r4, [r1]
   39ba4:	mov	r1, r3
   39ba8:	ldr	r3, [ip, r2]
   39bac:	mov	r4, r0
   39bb0:	ldr	r2, [sp, #32]
   39bb4:	add	r5, lr, r3
   39bb8:	ldr	r7, [lr, r3]
   39bbc:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   39bc0:	ldr	r2, [r4, #20]
   39bc4:	mov	r1, #91	; 0x5b
   39bc8:	ldr	r3, [r4, #32]
   39bcc:	cmp	r7, #0
   39bd0:	add	r0, r2, #1
   39bd4:	add	r3, r3, #1
   39bd8:	str	r0, [r4, #20]
   39bdc:	str	r3, [r4, #32]
   39be0:	strb	r1, [r2]
   39be4:	beq	39cf4 <flatcc_json_printer_float_vector_field@@Base+0x1bc>
   39be8:	ldrb	r1, [r4, #25]
   39bec:	ldr	r0, [r4, #20]
   39bf0:	cmp	r1, #0
   39bf4:	bne	39d2c <flatcc_json_printer_float_vector_field@@Base+0x1f4>
   39bf8:	ldr	r3, [r4, #16]
   39bfc:	cmp	r3, r0
   39c00:	bhi	39c14 <flatcc_json_printer_float_vector_field@@Base+0xdc>
   39c04:	mov	r0, r4
   39c08:	ldr	r3, [r4, #44]	; 0x2c
   39c0c:	blx	r3
   39c10:	ldr	r0, [r4, #20]
   39c14:	add	r6, r5, #8
   39c18:	vldr	s0, [r5, #4]
   39c1c:	sub	r5, r7, #2
   39c20:	vcvt.f64.f32	d0, s0
   39c24:	bl	316e8 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   39c28:	ldr	r3, [r4, #20]
   39c2c:	cmp	r7, #1
   39c30:	add	r0, r3, r0
   39c34:	str	r0, [r4, #20]
   39c38:	beq	39cf8 <flatcc_json_printer_float_vector_field@@Base+0x1c0>
   39c3c:	mov	r7, #44	; 0x2c
   39c40:	mov	r8, #10
   39c44:	b	39c90 <flatcc_json_printer_float_vector_field@@Base+0x158>
   39c48:	ldr	r3, [r4, #16]
   39c4c:	mov	r0, r4
   39c50:	ldr	r2, [r4, #20]
   39c54:	cmp	r2, r3
   39c58:	bcc	39c68 <flatcc_json_printer_float_vector_field@@Base+0x130>
   39c5c:	ldr	r3, [r4, #44]	; 0x2c
   39c60:	blx	r3
   39c64:	ldr	r2, [r4, #20]
   39c68:	mov	r0, r2
   39c6c:	sub	r5, r5, #1
   39c70:	vldmia	r6!, {s0}
   39c74:	vcvt.f64.f32	d0, s0
   39c78:	bl	316e8 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   39c7c:	ldr	r3, [r4, #20]
   39c80:	cmn	r5, #1
   39c84:	add	r0, r3, r0
   39c88:	str	r0, [r4, #20]
   39c8c:	beq	39cf8 <flatcc_json_printer_float_vector_field@@Base+0x1c0>
   39c90:	add	r3, r0, #1
   39c94:	str	r3, [r4, #20]
   39c98:	strb	r7, [r0]
   39c9c:	ldrb	r1, [r4, #25]
   39ca0:	cmp	r1, #0
   39ca4:	beq	39c48 <flatcc_json_printer_float_vector_field@@Base+0x110>
   39ca8:	ldr	r3, [r4, #20]
   39cac:	mov	r1, #32
   39cb0:	mov	r0, r4
   39cb4:	add	r2, r3, #1
   39cb8:	str	r2, [r4, #20]
   39cbc:	strb	r8, [r3]
   39cc0:	ldrb	r2, [r4, #25]
   39cc4:	ldr	lr, [r4, #16]
   39cc8:	ldr	r9, [r4, #32]
   39ccc:	ldr	r3, [r4, #20]
   39cd0:	mul	r9, r9, r2
   39cd4:	add	ip, r3, r9
   39cd8:	mov	r2, r9
   39cdc:	cmp	lr, ip
   39ce0:	bcs	39d70 <flatcc_json_printer_float_vector_field@@Base+0x238>
   39ce4:	mov	r1, r9
   39ce8:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39cec:	ldr	r2, [r4, #20]
   39cf0:	b	39c68 <flatcc_json_printer_float_vector_field@@Base+0x130>
   39cf4:	ldr	r0, [r4, #20]
   39cf8:	add	r3, r0, #1
   39cfc:	ldrb	r2, [r4, #25]
   39d00:	cmp	r2, #0
   39d04:	bne	39d88 <flatcc_json_printer_float_vector_field@@Base+0x250>
   39d08:	mov	r2, #93	; 0x5d
   39d0c:	str	r3, [r4, #20]
   39d10:	strb	r2, [r0]
   39d14:	ldrd	r4, [sp]
   39d18:	ldrd	r6, [sp, #8]
   39d1c:	ldrd	r8, [sp, #16]
   39d20:	ldr	sl, [sp, #24]
   39d24:	add	sp, sp, #28
   39d28:	pop	{pc}		; (ldr pc, [sp], #4)
   39d2c:	add	r2, r0, #1
   39d30:	mov	r3, #10
   39d34:	str	r2, [r4, #20]
   39d38:	strb	r3, [r0]
   39d3c:	ldrb	r3, [r4, #25]
   39d40:	ldr	r2, [r4, #16]
   39d44:	ldr	r6, [r4, #32]
   39d48:	ldr	r0, [r4, #20]
   39d4c:	mul	r6, r6, r3
   39d50:	add	r3, r0, r6
   39d54:	cmp	r2, r3
   39d58:	bcs	39df0 <flatcc_json_printer_float_vector_field@@Base+0x2b8>
   39d5c:	mov	r0, r4
   39d60:	mov	r1, r6
   39d64:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39d68:	ldr	r0, [r4, #20]
   39d6c:	b	39c14 <flatcc_json_printer_float_vector_field@@Base+0xdc>
   39d70:	mov	r0, r3
   39d74:	bl	14594 <memset@plt>
   39d78:	ldr	r2, [r4, #20]
   39d7c:	add	r2, r2, r9
   39d80:	str	r2, [r4, #20]
   39d84:	b	39c68 <flatcc_json_printer_float_vector_field@@Base+0x130>
   39d88:	mov	r2, #10
   39d8c:	str	r3, [r4, #20]
   39d90:	strb	r2, [r0]
   39d94:	ldrb	r5, [r4, #25]
   39d98:	ldr	r3, [r4, #32]
   39d9c:	ldr	r2, [r4, #16]
   39da0:	ldr	r0, [r4, #20]
   39da4:	sub	r3, r3, #1
   39da8:	mul	r5, r3, r5
   39dac:	str	r3, [r4, #32]
   39db0:	add	r3, r0, r5
   39db4:	cmp	r2, r3
   39db8:	bcs	39dd4 <flatcc_json_printer_float_vector_field@@Base+0x29c>
   39dbc:	mov	r0, r4
   39dc0:	mov	r1, r5
   39dc4:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39dc8:	ldr	r0, [r4, #20]
   39dcc:	add	r3, r0, #1
   39dd0:	b	39d08 <flatcc_json_printer_float_vector_field@@Base+0x1d0>
   39dd4:	mov	r2, r5
   39dd8:	mov	r1, #32
   39ddc:	bl	14594 <memset@plt>
   39de0:	ldr	r0, [r4, #20]
   39de4:	add	r0, r0, r5
   39de8:	add	r3, r0, #1
   39dec:	b	39d08 <flatcc_json_printer_float_vector_field@@Base+0x1d0>
   39df0:	mov	r2, r6
   39df4:	mov	r1, #32
   39df8:	bl	14594 <memset@plt>
   39dfc:	ldr	r0, [r4, #20]
   39e00:	add	r0, r0, r6
   39e04:	str	r0, [r4, #20]
   39e08:	b	39c14 <flatcc_json_printer_float_vector_field@@Base+0xdc>

00039e0c <flatcc_json_printer_double_vector_field@@Base>:
   39e0c:	ldr	ip, [r1, #8]
   39e10:	add	r2, r2, #2
   39e14:	lsl	r2, r2, #1
   39e18:	cmp	ip, r2
   39e1c:	bxle	lr
   39e20:	ldr	ip, [r1, #4]
   39e24:	ldrh	r2, [ip, r2]
   39e28:	cmp	r2, #0
   39e2c:	bxeq	lr
   39e30:	strd	r4, [sp, #-32]!	; 0xffffffe0
   39e34:	ldr	ip, [r1]
   39e38:	strd	r6, [sp, #8]
   39e3c:	str	lr, [sp, #28]
   39e40:	strd	r8, [sp, #16]
   39e44:	str	sl, [sp, #24]
   39e48:	adds	lr, ip, r2
   39e4c:	beq	39fe0 <flatcc_json_printer_double_vector_field@@Base+0x1d4>
   39e50:	ldr	r4, [r1, #16]
   39e54:	add	r5, r4, #1
   39e58:	cmp	r4, #0
   39e5c:	str	r5, [r1, #16]
   39e60:	beq	39e78 <flatcc_json_printer_double_vector_field@@Base+0x6c>
   39e64:	ldr	r1, [r0, #20]
   39e68:	mov	r4, #44	; 0x2c
   39e6c:	add	r5, r1, #1
   39e70:	str	r5, [r0, #20]
   39e74:	strb	r4, [r1]
   39e78:	mov	r1, r3
   39e7c:	ldr	r3, [ip, r2]
   39e80:	mov	r4, r0
   39e84:	ldr	r2, [sp, #32]
   39e88:	add	r5, lr, r3
   39e8c:	ldr	r7, [lr, r3]
   39e90:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   39e94:	ldr	r2, [r4, #20]
   39e98:	mov	r1, #91	; 0x5b
   39e9c:	ldr	r3, [r4, #32]
   39ea0:	cmp	r7, #0
   39ea4:	add	r0, r2, #1
   39ea8:	add	r3, r3, #1
   39eac:	str	r0, [r4, #20]
   39eb0:	str	r3, [r4, #32]
   39eb4:	strb	r1, [r2]
   39eb8:	beq	39fc0 <flatcc_json_printer_double_vector_field@@Base+0x1b4>
   39ebc:	ldrb	r1, [r4, #25]
   39ec0:	ldr	r0, [r4, #20]
   39ec4:	cmp	r1, #0
   39ec8:	bne	39ff8 <flatcc_json_printer_double_vector_field@@Base+0x1ec>
   39ecc:	ldr	r3, [r4, #16]
   39ed0:	cmp	r3, r0
   39ed4:	bhi	39ee8 <flatcc_json_printer_double_vector_field@@Base+0xdc>
   39ed8:	mov	r0, r4
   39edc:	ldr	r3, [r4, #44]	; 0x2c
   39ee0:	blx	r3
   39ee4:	ldr	r0, [r4, #20]
   39ee8:	add	r6, r5, #12
   39eec:	vldr	d0, [r5, #4]
   39ef0:	sub	r5, r7, #2
   39ef4:	bl	316e8 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   39ef8:	ldr	r3, [r4, #20]
   39efc:	cmp	r7, #1
   39f00:	add	r0, r3, r0
   39f04:	str	r0, [r4, #20]
   39f08:	beq	39fc4 <flatcc_json_printer_double_vector_field@@Base+0x1b8>
   39f0c:	mov	r7, #44	; 0x2c
   39f10:	mov	r8, #10
   39f14:	b	39f5c <flatcc_json_printer_double_vector_field@@Base+0x150>
   39f18:	ldr	r3, [r4, #16]
   39f1c:	mov	r0, r4
   39f20:	ldr	r2, [r4, #20]
   39f24:	cmp	r2, r3
   39f28:	bcc	39f38 <flatcc_json_printer_double_vector_field@@Base+0x12c>
   39f2c:	ldr	r3, [r4, #44]	; 0x2c
   39f30:	blx	r3
   39f34:	ldr	r2, [r4, #20]
   39f38:	mov	r0, r2
   39f3c:	sub	r5, r5, #1
   39f40:	vldmia	r6!, {d0}
   39f44:	bl	316e8 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   39f48:	ldr	r3, [r4, #20]
   39f4c:	cmn	r5, #1
   39f50:	add	r0, r3, r0
   39f54:	str	r0, [r4, #20]
   39f58:	beq	39fc4 <flatcc_json_printer_double_vector_field@@Base+0x1b8>
   39f5c:	add	r3, r0, #1
   39f60:	str	r3, [r4, #20]
   39f64:	strb	r7, [r0]
   39f68:	ldrb	r1, [r4, #25]
   39f6c:	cmp	r1, #0
   39f70:	beq	39f18 <flatcc_json_printer_double_vector_field@@Base+0x10c>
   39f74:	ldr	r3, [r4, #20]
   39f78:	mov	r1, #32
   39f7c:	mov	r0, r4
   39f80:	add	r2, r3, #1
   39f84:	str	r2, [r4, #20]
   39f88:	strb	r8, [r3]
   39f8c:	ldrb	r2, [r4, #25]
   39f90:	ldr	lr, [r4, #16]
   39f94:	ldr	r9, [r4, #32]
   39f98:	ldr	r3, [r4, #20]
   39f9c:	mul	r9, r9, r2
   39fa0:	add	ip, r3, r9
   39fa4:	mov	r2, r9
   39fa8:	cmp	lr, ip
   39fac:	bcs	3a03c <flatcc_json_printer_double_vector_field@@Base+0x230>
   39fb0:	mov	r1, r9
   39fb4:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39fb8:	ldr	r2, [r4, #20]
   39fbc:	b	39f38 <flatcc_json_printer_double_vector_field@@Base+0x12c>
   39fc0:	ldr	r0, [r4, #20]
   39fc4:	add	r3, r0, #1
   39fc8:	ldrb	r2, [r4, #25]
   39fcc:	cmp	r2, #0
   39fd0:	bne	3a054 <flatcc_json_printer_double_vector_field@@Base+0x248>
   39fd4:	mov	r2, #93	; 0x5d
   39fd8:	str	r3, [r4, #20]
   39fdc:	strb	r2, [r0]
   39fe0:	ldrd	r4, [sp]
   39fe4:	ldrd	r6, [sp, #8]
   39fe8:	ldrd	r8, [sp, #16]
   39fec:	ldr	sl, [sp, #24]
   39ff0:	add	sp, sp, #28
   39ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   39ff8:	add	r2, r0, #1
   39ffc:	mov	r3, #10
   3a000:	str	r2, [r4, #20]
   3a004:	strb	r3, [r0]
   3a008:	ldrb	r3, [r4, #25]
   3a00c:	ldr	r2, [r4, #16]
   3a010:	ldr	r6, [r4, #32]
   3a014:	ldr	r0, [r4, #20]
   3a018:	mul	r6, r6, r3
   3a01c:	add	r3, r0, r6
   3a020:	cmp	r2, r3
   3a024:	bcs	3a0bc <flatcc_json_printer_double_vector_field@@Base+0x2b0>
   3a028:	mov	r0, r4
   3a02c:	mov	r1, r6
   3a030:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3a034:	ldr	r0, [r4, #20]
   3a038:	b	39ee8 <flatcc_json_printer_double_vector_field@@Base+0xdc>
   3a03c:	mov	r0, r3
   3a040:	bl	14594 <memset@plt>
   3a044:	ldr	r2, [r4, #20]
   3a048:	add	r2, r2, r9
   3a04c:	str	r2, [r4, #20]
   3a050:	b	39f38 <flatcc_json_printer_double_vector_field@@Base+0x12c>
   3a054:	mov	r2, #10
   3a058:	str	r3, [r4, #20]
   3a05c:	strb	r2, [r0]
   3a060:	ldrb	r5, [r4, #25]
   3a064:	ldr	r3, [r4, #32]
   3a068:	ldr	r2, [r4, #16]
   3a06c:	ldr	r0, [r4, #20]
   3a070:	sub	r3, r3, #1
   3a074:	mul	r5, r3, r5
   3a078:	str	r3, [r4, #32]
   3a07c:	add	r3, r0, r5
   3a080:	cmp	r2, r3
   3a084:	bcs	3a0a0 <flatcc_json_printer_double_vector_field@@Base+0x294>
   3a088:	mov	r0, r4
   3a08c:	mov	r1, r5
   3a090:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3a094:	ldr	r0, [r4, #20]
   3a098:	add	r3, r0, #1
   3a09c:	b	39fd4 <flatcc_json_printer_double_vector_field@@Base+0x1c8>
   3a0a0:	mov	r2, r5
   3a0a4:	mov	r1, #32
   3a0a8:	bl	14594 <memset@plt>
   3a0ac:	ldr	r0, [r4, #20]
   3a0b0:	add	r0, r0, r5
   3a0b4:	add	r3, r0, #1
   3a0b8:	b	39fd4 <flatcc_json_printer_double_vector_field@@Base+0x1c8>
   3a0bc:	mov	r2, r6
   3a0c0:	mov	r1, #32
   3a0c4:	bl	14594 <memset@plt>
   3a0c8:	ldr	r0, [r4, #20]
   3a0cc:	add	r0, r0, r6
   3a0d0:	str	r0, [r4, #20]
   3a0d4:	b	39ee8 <flatcc_json_printer_double_vector_field@@Base+0xdc>

0003a0d8 <flatcc_json_printer_utype_enum_vector_field@@Base>:
   3a0d8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3a0dc:	strd	r6, [sp, #8]
   3a0e0:	strd	r8, [sp, #16]
   3a0e4:	str	sl, [sp, #24]
   3a0e8:	str	lr, [sp, #28]
   3a0ec:	ldrb	r8, [r0, #27]
   3a0f0:	ldr	r7, [sp, #32]
   3a0f4:	ldr	r6, [sp, #36]	; 0x24
   3a0f8:	cmp	r8, #0
   3a0fc:	bne	3a2c8 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1f0>
   3a100:	mov	r5, r3
   3a104:	ldr	r3, [r1, #8]
   3a108:	add	r2, r2, #2
   3a10c:	lsl	r2, r2, #1
   3a110:	mov	lr, r1
   3a114:	cmp	r3, r2
   3a118:	ble	3a2b0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1d8>
   3a11c:	ldr	r3, [r1, #4]
   3a120:	ldrh	r2, [r3, r2]
   3a124:	cmp	r2, #0
   3a128:	beq	3a2b0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1d8>
   3a12c:	ldr	r3, [r1]
   3a130:	adds	ip, r3, r2
   3a134:	beq	3a2b0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1d8>
   3a138:	ldr	r1, [r1, #16]
   3a13c:	mov	r4, r0
   3a140:	add	r0, r1, #1
   3a144:	cmp	r1, #0
   3a148:	str	r0, [lr, #16]
   3a14c:	beq	3a164 <flatcc_json_printer_utype_enum_vector_field@@Base+0x8c>
   3a150:	ldr	r1, [r4, #20]
   3a154:	mov	r0, #44	; 0x2c
   3a158:	add	lr, r1, #1
   3a15c:	str	lr, [r4, #20]
   3a160:	strb	r0, [r1]
   3a164:	ldr	r3, [r3, r2]
   3a168:	mov	r1, r5
   3a16c:	mov	r2, r7
   3a170:	mov	r0, r4
   3a174:	add	r7, ip, r3
   3a178:	ldr	r8, [ip, r3]
   3a17c:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3a180:	ldr	r2, [r4, #20]
   3a184:	mov	r1, #91	; 0x5b
   3a188:	ldr	r3, [r4, #32]
   3a18c:	cmp	r8, #0
   3a190:	add	r0, r2, #1
   3a194:	add	r3, r3, #1
   3a198:	str	r0, [r4, #20]
   3a19c:	str	r3, [r4, #32]
   3a1a0:	strb	r1, [r2]
   3a1a4:	beq	3a290 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1b8>
   3a1a8:	ldrb	r1, [r4, #25]
   3a1ac:	ldr	r3, [r4, #20]
   3a1b0:	cmp	r1, #0
   3a1b4:	bne	3a348 <flatcc_json_printer_utype_enum_vector_field@@Base+0x270>
   3a1b8:	ldr	r2, [r4, #16]
   3a1bc:	cmp	r2, r3
   3a1c0:	bhi	3a1d0 <flatcc_json_printer_utype_enum_vector_field@@Base+0xf8>
   3a1c4:	mov	r0, r4
   3a1c8:	ldr	r3, [r4, #44]	; 0x2c
   3a1cc:	blx	r3
   3a1d0:	ldrb	r1, [r7, #4]
   3a1d4:	mov	r0, r4
   3a1d8:	add	r5, r7, #5
   3a1dc:	blx	r6
   3a1e0:	cmp	r8, #1
   3a1e4:	beq	3a290 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1b8>
   3a1e8:	add	r3, r8, #4
   3a1ec:	mov	r9, #10
   3a1f0:	mov	r8, #44	; 0x2c
   3a1f4:	add	r7, r7, r3
   3a1f8:	b	3a22c <flatcc_json_printer_utype_enum_vector_field@@Base+0x154>
   3a1fc:	ldr	r3, [r4, #16]
   3a200:	mov	r0, r4
   3a204:	ldr	r2, [r4, #20]
   3a208:	cmp	r2, r3
   3a20c:	bcc	3a218 <flatcc_json_printer_utype_enum_vector_field@@Base+0x140>
   3a210:	ldr	r3, [r4, #44]	; 0x2c
   3a214:	blx	r3
   3a218:	ldrb	r1, [r5], #1
   3a21c:	mov	r0, r4
   3a220:	blx	r6
   3a224:	cmp	r5, r7
   3a228:	beq	3a290 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1b8>
   3a22c:	ldr	r3, [r4, #20]
   3a230:	add	r2, r3, #1
   3a234:	str	r2, [r4, #20]
   3a238:	strb	r8, [r3]
   3a23c:	ldrb	r1, [r4, #25]
   3a240:	cmp	r1, #0
   3a244:	beq	3a1fc <flatcc_json_printer_utype_enum_vector_field@@Base+0x124>
   3a248:	ldr	r3, [r4, #20]
   3a24c:	mov	r1, #32
   3a250:	mov	r0, r4
   3a254:	add	r2, r3, #1
   3a258:	str	r2, [r4, #20]
   3a25c:	strb	r9, [r3]
   3a260:	ldrb	r2, [r4, #25]
   3a264:	ldr	lr, [r4, #16]
   3a268:	ldr	sl, [r4, #32]
   3a26c:	ldr	r3, [r4, #20]
   3a270:	mul	sl, sl, r2
   3a274:	add	ip, r3, sl
   3a278:	mov	r2, sl
   3a27c:	cmp	lr, ip
   3a280:	bcs	3a2e4 <flatcc_json_printer_utype_enum_vector_field@@Base+0x20c>
   3a284:	mov	r1, sl
   3a288:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3a28c:	b	3a218 <flatcc_json_printer_utype_enum_vector_field@@Base+0x140>
   3a290:	ldrb	r2, [r4, #25]
   3a294:	ldr	r3, [r4, #20]
   3a298:	cmp	r2, #0
   3a29c:	add	r2, r3, #1
   3a2a0:	bne	3a2fc <flatcc_json_printer_utype_enum_vector_field@@Base+0x224>
   3a2a4:	mov	r1, #93	; 0x5d
   3a2a8:	str	r2, [r4, #20]
   3a2ac:	strb	r1, [r3]
   3a2b0:	ldrd	r4, [sp]
   3a2b4:	ldrd	r6, [sp, #8]
   3a2b8:	ldrd	r8, [sp, #16]
   3a2bc:	ldr	sl, [sp, #24]
   3a2c0:	add	sp, sp, #28
   3a2c4:	pop	{pc}		; (ldr pc, [sp], #4)
   3a2c8:	ldrd	r4, [sp]
   3a2cc:	ldrd	r6, [sp, #8]
   3a2d0:	ldrd	r8, [sp, #16]
   3a2d4:	ldr	sl, [sp, #24]
   3a2d8:	ldr	lr, [sp, #28]
   3a2dc:	add	sp, sp, #32
   3a2e0:	b	3831c <flatcc_json_printer_utype_vector_field@@Base>
   3a2e4:	mov	r0, r3
   3a2e8:	bl	14594 <memset@plt>
   3a2ec:	ldr	r3, [r4, #20]
   3a2f0:	add	sl, r3, sl
   3a2f4:	str	sl, [r4, #20]
   3a2f8:	b	3a218 <flatcc_json_printer_utype_enum_vector_field@@Base+0x140>
   3a2fc:	mov	r1, #10
   3a300:	str	r2, [r4, #20]
   3a304:	strb	r1, [r3]
   3a308:	ldrb	r3, [r4, #25]
   3a30c:	ldr	r2, [r4, #32]
   3a310:	ldr	r1, [r4, #16]
   3a314:	ldr	r0, [r4, #20]
   3a318:	sub	r2, r2, #1
   3a31c:	mul	r5, r2, r3
   3a320:	str	r2, [r4, #32]
   3a324:	add	r3, r0, r5
   3a328:	cmp	r1, r3
   3a32c:	bcs	3a364 <flatcc_json_printer_utype_enum_vector_field@@Base+0x28c>
   3a330:	mov	r1, r5
   3a334:	mov	r0, r4
   3a338:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3a33c:	ldr	r3, [r4, #20]
   3a340:	add	r2, r3, #1
   3a344:	b	3a2a4 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1cc>
   3a348:	add	r1, r3, #1
   3a34c:	mov	r2, #10
   3a350:	mov	r0, r4
   3a354:	str	r1, [r4, #20]
   3a358:	strb	r2, [r3]
   3a35c:	bl	31110 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3a360:	b	3a1d0 <flatcc_json_printer_utype_enum_vector_field@@Base+0xf8>
   3a364:	mov	r2, r5
   3a368:	mov	r1, #32
   3a36c:	bl	14594 <memset@plt>
   3a370:	ldr	r3, [r4, #20]
   3a374:	add	r3, r3, r5
   3a378:	add	r2, r3, #1
   3a37c:	b	3a2a4 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1cc>

0003a380 <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   3a380:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3a384:	strd	r6, [sp, #8]
   3a388:	strd	r8, [sp, #16]
   3a38c:	str	sl, [sp, #24]
   3a390:	str	lr, [sp, #28]
   3a394:	ldrb	r8, [r0, #27]
   3a398:	ldr	r7, [sp, #32]
   3a39c:	ldr	r6, [sp, #36]	; 0x24
   3a3a0:	cmp	r8, #0
   3a3a4:	bne	3a570 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1f0>
   3a3a8:	mov	r5, r3
   3a3ac:	ldr	r3, [r1, #8]
   3a3b0:	add	r2, r2, #2
   3a3b4:	lsl	r2, r2, #1
   3a3b8:	mov	lr, r1
   3a3bc:	cmp	r3, r2
   3a3c0:	ble	3a558 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d8>
   3a3c4:	ldr	r3, [r1, #4]
   3a3c8:	ldrh	r2, [r3, r2]
   3a3cc:	cmp	r2, #0
   3a3d0:	beq	3a558 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d8>
   3a3d4:	ldr	r3, [r1]
   3a3d8:	adds	ip, r3, r2
   3a3dc:	beq	3a558 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d8>
   3a3e0:	ldr	r1, [r1, #16]
   3a3e4:	mov	r4, r0
   3a3e8:	add	r0, r1, #1
   3a3ec:	cmp	r1, #0
   3a3f0:	str	r0, [lr, #16]
   3a3f4:	beq	3a40c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x8c>
   3a3f8:	ldr	r1, [r4, #20]
   3a3fc:	mov	r0, #44	; 0x2c
   3a400:	add	lr, r1, #1
   3a404:	str	lr, [r4, #20]
   3a408:	strb	r0, [r1]
   3a40c:	ldr	r3, [r3, r2]
   3a410:	mov	r1, r5
   3a414:	mov	r2, r7
   3a418:	mov	r0, r4
   3a41c:	add	r7, ip, r3
   3a420:	ldr	r8, [ip, r3]
   3a424:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3a428:	ldr	r2, [r4, #20]
   3a42c:	mov	r1, #91	; 0x5b
   3a430:	ldr	r3, [r4, #32]
   3a434:	cmp	r8, #0
   3a438:	add	r0, r2, #1
   3a43c:	add	r3, r3, #1
   3a440:	str	r0, [r4, #20]
   3a444:	str	r3, [r4, #32]
   3a448:	strb	r1, [r2]
   3a44c:	beq	3a538 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1b8>
   3a450:	ldrb	r1, [r4, #25]
   3a454:	ldr	r3, [r4, #20]
   3a458:	cmp	r1, #0
   3a45c:	bne	3a5f0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x270>
   3a460:	ldr	r2, [r4, #16]
   3a464:	cmp	r2, r3
   3a468:	bhi	3a478 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf8>
   3a46c:	mov	r0, r4
   3a470:	ldr	r3, [r4, #44]	; 0x2c
   3a474:	blx	r3
   3a478:	ldrb	r1, [r7, #4]
   3a47c:	mov	r0, r4
   3a480:	add	r5, r7, #5
   3a484:	blx	r6
   3a488:	cmp	r8, #1
   3a48c:	beq	3a538 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1b8>
   3a490:	add	r3, r8, #4
   3a494:	mov	r9, #10
   3a498:	mov	r8, #44	; 0x2c
   3a49c:	add	r7, r7, r3
   3a4a0:	b	3a4d4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x154>
   3a4a4:	ldr	r3, [r4, #16]
   3a4a8:	mov	r0, r4
   3a4ac:	ldr	r2, [r4, #20]
   3a4b0:	cmp	r2, r3
   3a4b4:	bcc	3a4c0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
   3a4b8:	ldr	r3, [r4, #44]	; 0x2c
   3a4bc:	blx	r3
   3a4c0:	ldrb	r1, [r5], #1
   3a4c4:	mov	r0, r4
   3a4c8:	blx	r6
   3a4cc:	cmp	r5, r7
   3a4d0:	beq	3a538 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1b8>
   3a4d4:	ldr	r3, [r4, #20]
   3a4d8:	add	r2, r3, #1
   3a4dc:	str	r2, [r4, #20]
   3a4e0:	strb	r8, [r3]
   3a4e4:	ldrb	r1, [r4, #25]
   3a4e8:	cmp	r1, #0
   3a4ec:	beq	3a4a4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x124>
   3a4f0:	ldr	r3, [r4, #20]
   3a4f4:	mov	r1, #32
   3a4f8:	mov	r0, r4
   3a4fc:	add	r2, r3, #1
   3a500:	str	r2, [r4, #20]
   3a504:	strb	r9, [r3]
   3a508:	ldrb	r2, [r4, #25]
   3a50c:	ldr	lr, [r4, #16]
   3a510:	ldr	sl, [r4, #32]
   3a514:	ldr	r3, [r4, #20]
   3a518:	mul	sl, sl, r2
   3a51c:	add	ip, r3, sl
   3a520:	mov	r2, sl
   3a524:	cmp	lr, ip
   3a528:	bcs	3a58c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x20c>
   3a52c:	mov	r1, sl
   3a530:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3a534:	b	3a4c0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
   3a538:	ldrb	r2, [r4, #25]
   3a53c:	ldr	r3, [r4, #20]
   3a540:	cmp	r2, #0
   3a544:	add	r2, r3, #1
   3a548:	bne	3a5a4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x224>
   3a54c:	mov	r1, #93	; 0x5d
   3a550:	str	r2, [r4, #20]
   3a554:	strb	r1, [r3]
   3a558:	ldrd	r4, [sp]
   3a55c:	ldrd	r6, [sp, #8]
   3a560:	ldrd	r8, [sp, #16]
   3a564:	ldr	sl, [sp, #24]
   3a568:	add	sp, sp, #28
   3a56c:	pop	{pc}		; (ldr pc, [sp], #4)
   3a570:	ldrd	r4, [sp]
   3a574:	ldrd	r6, [sp, #8]
   3a578:	ldrd	r8, [sp, #16]
   3a57c:	ldr	sl, [sp, #24]
   3a580:	ldr	lr, [sp, #28]
   3a584:	add	sp, sp, #32
   3a588:	b	3804c <flatcc_json_printer_uint8_vector_field@@Base>
   3a58c:	mov	r0, r3
   3a590:	bl	14594 <memset@plt>
   3a594:	ldr	r3, [r4, #20]
   3a598:	add	sl, r3, sl
   3a59c:	str	sl, [r4, #20]
   3a5a0:	b	3a4c0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
   3a5a4:	mov	r1, #10
   3a5a8:	str	r2, [r4, #20]
   3a5ac:	strb	r1, [r3]
   3a5b0:	ldrb	r3, [r4, #25]
   3a5b4:	ldr	r2, [r4, #32]
   3a5b8:	ldr	r1, [r4, #16]
   3a5bc:	ldr	r0, [r4, #20]
   3a5c0:	sub	r2, r2, #1
   3a5c4:	mul	r5, r2, r3
   3a5c8:	str	r2, [r4, #32]
   3a5cc:	add	r3, r0, r5
   3a5d0:	cmp	r1, r3
   3a5d4:	bcs	3a60c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x28c>
   3a5d8:	mov	r1, r5
   3a5dc:	mov	r0, r4
   3a5e0:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3a5e4:	ldr	r3, [r4, #20]
   3a5e8:	add	r2, r3, #1
   3a5ec:	b	3a54c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1cc>
   3a5f0:	add	r1, r3, #1
   3a5f4:	mov	r2, #10
   3a5f8:	mov	r0, r4
   3a5fc:	str	r1, [r4, #20]
   3a600:	strb	r2, [r3]
   3a604:	bl	31110 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3a608:	b	3a478 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf8>
   3a60c:	mov	r2, r5
   3a610:	mov	r1, #32
   3a614:	bl	14594 <memset@plt>
   3a618:	ldr	r3, [r4, #20]
   3a61c:	add	r3, r3, r5
   3a620:	add	r2, r3, #1
   3a624:	b	3a54c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1cc>

0003a628 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   3a628:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3a62c:	strd	r6, [sp, #8]
   3a630:	strd	r8, [sp, #16]
   3a634:	str	sl, [sp, #24]
   3a638:	str	lr, [sp, #28]
   3a63c:	ldrb	r8, [r0, #27]
   3a640:	ldrd	r6, [sp, #32]
   3a644:	cmp	r8, #0
   3a648:	bne	3a814 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1ec>
   3a64c:	mov	r5, r3
   3a650:	ldr	r3, [r1, #8]
   3a654:	add	r2, r2, #2
   3a658:	lsl	r2, r2, #1
   3a65c:	mov	lr, r1
   3a660:	cmp	r3, r2
   3a664:	ble	3a7fc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d4>
   3a668:	ldr	r3, [r1, #4]
   3a66c:	ldrh	r2, [r3, r2]
   3a670:	cmp	r2, #0
   3a674:	beq	3a7fc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d4>
   3a678:	ldr	r3, [r1]
   3a67c:	adds	ip, r3, r2
   3a680:	beq	3a7fc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d4>
   3a684:	ldr	r1, [r1, #16]
   3a688:	mov	r4, r0
   3a68c:	add	r0, r1, #1
   3a690:	cmp	r1, #0
   3a694:	str	r0, [lr, #16]
   3a698:	beq	3a6b0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x88>
   3a69c:	ldr	r1, [r4, #20]
   3a6a0:	mov	r0, #44	; 0x2c
   3a6a4:	add	lr, r1, #1
   3a6a8:	str	lr, [r4, #20]
   3a6ac:	strb	r0, [r1]
   3a6b0:	ldr	r3, [r3, r2]
   3a6b4:	mov	r1, r5
   3a6b8:	mov	r2, r6
   3a6bc:	mov	r0, r4
   3a6c0:	add	r6, ip, r3
   3a6c4:	ldr	r5, [ip, r3]
   3a6c8:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3a6cc:	ldr	r2, [r4, #20]
   3a6d0:	mov	r1, #91	; 0x5b
   3a6d4:	ldr	r3, [r4, #32]
   3a6d8:	cmp	r5, #0
   3a6dc:	add	r0, r2, #1
   3a6e0:	add	r3, r3, #1
   3a6e4:	str	r0, [r4, #20]
   3a6e8:	str	r3, [r4, #32]
   3a6ec:	strb	r1, [r2]
   3a6f0:	beq	3a7dc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1b4>
   3a6f4:	ldrb	r1, [r4, #25]
   3a6f8:	ldr	r3, [r4, #20]
   3a6fc:	cmp	r1, #0
   3a700:	bne	3a894 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x26c>
   3a704:	ldr	r2, [r4, #16]
   3a708:	cmp	r2, r3
   3a70c:	bhi	3a71c <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   3a710:	mov	r0, r4
   3a714:	ldr	r3, [r4, #44]	; 0x2c
   3a718:	blx	r3
   3a71c:	ldrh	r1, [r6, #4]
   3a720:	mov	r0, r4
   3a724:	add	r6, r6, #6
   3a728:	blx	r7
   3a72c:	cmp	r5, #1
   3a730:	sub	r5, r5, #2
   3a734:	beq	3a7dc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1b4>
   3a738:	mov	r8, #44	; 0x2c
   3a73c:	mov	r9, #10
   3a740:	b	3a778 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x150>
   3a744:	ldr	r3, [r4, #16]
   3a748:	mov	r0, r4
   3a74c:	ldr	r2, [r4, #20]
   3a750:	cmp	r2, r3
   3a754:	bcc	3a760 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x138>
   3a758:	ldr	r3, [r4, #44]	; 0x2c
   3a75c:	blx	r3
   3a760:	sub	r5, r5, #1
   3a764:	ldrh	r1, [r6], #2
   3a768:	mov	r0, r4
   3a76c:	blx	r7
   3a770:	cmn	r5, #1
   3a774:	beq	3a7dc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1b4>
   3a778:	ldr	r3, [r4, #20]
   3a77c:	add	r2, r3, #1
   3a780:	str	r2, [r4, #20]
   3a784:	strb	r8, [r3]
   3a788:	ldrb	r1, [r4, #25]
   3a78c:	cmp	r1, #0
   3a790:	beq	3a744 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x11c>
   3a794:	ldr	r3, [r4, #20]
   3a798:	mov	r1, #32
   3a79c:	mov	r0, r4
   3a7a0:	add	r2, r3, #1
   3a7a4:	str	r2, [r4, #20]
   3a7a8:	strb	r9, [r3]
   3a7ac:	ldrb	r2, [r4, #25]
   3a7b0:	ldr	lr, [r4, #16]
   3a7b4:	ldr	sl, [r4, #32]
   3a7b8:	ldr	r3, [r4, #20]
   3a7bc:	mul	sl, sl, r2
   3a7c0:	add	ip, r3, sl
   3a7c4:	mov	r2, sl
   3a7c8:	cmp	lr, ip
   3a7cc:	bcs	3a830 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x208>
   3a7d0:	mov	r1, sl
   3a7d4:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3a7d8:	b	3a760 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x138>
   3a7dc:	ldrb	r2, [r4, #25]
   3a7e0:	ldr	r3, [r4, #20]
   3a7e4:	cmp	r2, #0
   3a7e8:	add	r2, r3, #1
   3a7ec:	bne	3a848 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x220>
   3a7f0:	mov	r1, #93	; 0x5d
   3a7f4:	str	r2, [r4, #20]
   3a7f8:	strb	r1, [r3]
   3a7fc:	ldrd	r4, [sp]
   3a800:	ldrd	r6, [sp, #8]
   3a804:	ldrd	r8, [sp, #16]
   3a808:	ldr	sl, [sp, #24]
   3a80c:	add	sp, sp, #28
   3a810:	pop	{pc}		; (ldr pc, [sp], #4)
   3a814:	ldrd	r4, [sp]
   3a818:	ldrd	r6, [sp, #8]
   3a81c:	ldrd	r8, [sp, #16]
   3a820:	ldr	sl, [sp, #24]
   3a824:	ldr	lr, [sp, #28]
   3a828:	add	sp, sp, #32
   3a82c:	b	38320 <flatcc_json_printer_uint16_vector_field@@Base>
   3a830:	mov	r0, r3
   3a834:	bl	14594 <memset@plt>
   3a838:	ldr	r3, [r4, #20]
   3a83c:	add	sl, r3, sl
   3a840:	str	sl, [r4, #20]
   3a844:	b	3a760 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x138>
   3a848:	mov	r1, #10
   3a84c:	str	r2, [r4, #20]
   3a850:	strb	r1, [r3]
   3a854:	ldrb	r3, [r4, #25]
   3a858:	ldr	r2, [r4, #32]
   3a85c:	ldr	r1, [r4, #16]
   3a860:	ldr	r0, [r4, #20]
   3a864:	sub	r2, r2, #1
   3a868:	mul	r5, r2, r3
   3a86c:	str	r2, [r4, #32]
   3a870:	add	r3, r0, r5
   3a874:	cmp	r1, r3
   3a878:	bcs	3a8b0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x288>
   3a87c:	mov	r1, r5
   3a880:	mov	r0, r4
   3a884:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3a888:	ldr	r3, [r4, #20]
   3a88c:	add	r2, r3, #1
   3a890:	b	3a7f0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1c8>
   3a894:	add	r1, r3, #1
   3a898:	mov	r2, #10
   3a89c:	mov	r0, r4
   3a8a0:	str	r1, [r4, #20]
   3a8a4:	strb	r2, [r3]
   3a8a8:	bl	31110 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3a8ac:	b	3a71c <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   3a8b0:	mov	r2, r5
   3a8b4:	mov	r1, #32
   3a8b8:	bl	14594 <memset@plt>
   3a8bc:	ldr	r3, [r4, #20]
   3a8c0:	add	r3, r3, r5
   3a8c4:	add	r2, r3, #1
   3a8c8:	b	3a7f0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1c8>

0003a8cc <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   3a8cc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3a8d0:	strd	r6, [sp, #8]
   3a8d4:	strd	r8, [sp, #16]
   3a8d8:	str	sl, [sp, #24]
   3a8dc:	str	lr, [sp, #28]
   3a8e0:	ldrb	r8, [r0, #27]
   3a8e4:	ldrd	r6, [sp, #32]
   3a8e8:	cmp	r8, #0
   3a8ec:	bne	3aab8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1ec>
   3a8f0:	mov	r5, r3
   3a8f4:	ldr	r3, [r1, #8]
   3a8f8:	add	r2, r2, #2
   3a8fc:	lsl	r2, r2, #1
   3a900:	mov	lr, r1
   3a904:	cmp	r3, r2
   3a908:	ble	3aaa0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d4>
   3a90c:	ldr	r3, [r1, #4]
   3a910:	ldrh	r2, [r3, r2]
   3a914:	cmp	r2, #0
   3a918:	beq	3aaa0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d4>
   3a91c:	ldr	r3, [r1]
   3a920:	adds	ip, r3, r2
   3a924:	beq	3aaa0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d4>
   3a928:	ldr	r1, [r1, #16]
   3a92c:	mov	r4, r0
   3a930:	add	r0, r1, #1
   3a934:	cmp	r1, #0
   3a938:	str	r0, [lr, #16]
   3a93c:	beq	3a954 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x88>
   3a940:	ldr	r1, [r4, #20]
   3a944:	mov	r0, #44	; 0x2c
   3a948:	add	lr, r1, #1
   3a94c:	str	lr, [r4, #20]
   3a950:	strb	r0, [r1]
   3a954:	ldr	r3, [r3, r2]
   3a958:	mov	r1, r5
   3a95c:	mov	r2, r6
   3a960:	mov	r0, r4
   3a964:	add	r6, ip, r3
   3a968:	ldr	r5, [ip, r3]
   3a96c:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3a970:	ldr	r2, [r4, #20]
   3a974:	mov	r1, #91	; 0x5b
   3a978:	ldr	r3, [r4, #32]
   3a97c:	cmp	r5, #0
   3a980:	add	r0, r2, #1
   3a984:	add	r3, r3, #1
   3a988:	str	r0, [r4, #20]
   3a98c:	str	r3, [r4, #32]
   3a990:	strb	r1, [r2]
   3a994:	beq	3aa80 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1b4>
   3a998:	ldrb	r1, [r4, #25]
   3a99c:	ldr	r3, [r4, #20]
   3a9a0:	cmp	r1, #0
   3a9a4:	bne	3ab38 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x26c>
   3a9a8:	ldr	r2, [r4, #16]
   3a9ac:	cmp	r2, r3
   3a9b0:	bhi	3a9c0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   3a9b4:	mov	r0, r4
   3a9b8:	ldr	r3, [r4, #44]	; 0x2c
   3a9bc:	blx	r3
   3a9c0:	mov	r0, r4
   3a9c4:	ldr	r1, [r6, #4]
   3a9c8:	add	r6, r6, #8
   3a9cc:	blx	r7
   3a9d0:	cmp	r5, #1
   3a9d4:	sub	r5, r5, #2
   3a9d8:	beq	3aa80 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1b4>
   3a9dc:	mov	r8, #44	; 0x2c
   3a9e0:	mov	r9, #10
   3a9e4:	b	3aa1c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x150>
   3a9e8:	ldr	r3, [r4, #16]
   3a9ec:	mov	r0, r4
   3a9f0:	ldr	r2, [r4, #20]
   3a9f4:	cmp	r2, r3
   3a9f8:	bcc	3aa04 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x138>
   3a9fc:	ldr	r3, [r4, #44]	; 0x2c
   3aa00:	blx	r3
   3aa04:	sub	r5, r5, #1
   3aa08:	mov	r0, r4
   3aa0c:	ldr	r1, [r6], #4
   3aa10:	blx	r7
   3aa14:	cmn	r5, #1
   3aa18:	beq	3aa80 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1b4>
   3aa1c:	ldr	r3, [r4, #20]
   3aa20:	add	r2, r3, #1
   3aa24:	str	r2, [r4, #20]
   3aa28:	strb	r8, [r3]
   3aa2c:	ldrb	r1, [r4, #25]
   3aa30:	cmp	r1, #0
   3aa34:	beq	3a9e8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x11c>
   3aa38:	ldr	r3, [r4, #20]
   3aa3c:	mov	r1, #32
   3aa40:	mov	r0, r4
   3aa44:	add	r2, r3, #1
   3aa48:	str	r2, [r4, #20]
   3aa4c:	strb	r9, [r3]
   3aa50:	ldrb	r2, [r4, #25]
   3aa54:	ldr	lr, [r4, #16]
   3aa58:	ldr	sl, [r4, #32]
   3aa5c:	ldr	r3, [r4, #20]
   3aa60:	mul	sl, sl, r2
   3aa64:	add	ip, r3, sl
   3aa68:	mov	r2, sl
   3aa6c:	cmp	lr, ip
   3aa70:	bcs	3aad4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x208>
   3aa74:	mov	r1, sl
   3aa78:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3aa7c:	b	3aa04 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x138>
   3aa80:	ldrb	r2, [r4, #25]
   3aa84:	ldr	r3, [r4, #20]
   3aa88:	cmp	r2, #0
   3aa8c:	add	r2, r3, #1
   3aa90:	bne	3aaec <flatcc_json_printer_uint32_enum_vector_field@@Base+0x220>
   3aa94:	mov	r1, #93	; 0x5d
   3aa98:	str	r2, [r4, #20]
   3aa9c:	strb	r1, [r3]
   3aaa0:	ldrd	r4, [sp]
   3aaa4:	ldrd	r6, [sp, #8]
   3aaa8:	ldrd	r8, [sp, #16]
   3aaac:	ldr	sl, [sp, #24]
   3aab0:	add	sp, sp, #28
   3aab4:	pop	{pc}		; (ldr pc, [sp], #4)
   3aab8:	ldrd	r4, [sp]
   3aabc:	ldrd	r6, [sp, #8]
   3aac0:	ldrd	r8, [sp, #16]
   3aac4:	ldr	sl, [sp, #24]
   3aac8:	ldr	lr, [sp, #28]
   3aacc:	add	sp, sp, #32
   3aad0:	b	38718 <flatcc_json_printer_uint32_vector_field@@Base>
   3aad4:	mov	r0, r3
   3aad8:	bl	14594 <memset@plt>
   3aadc:	ldr	r3, [r4, #20]
   3aae0:	add	sl, r3, sl
   3aae4:	str	sl, [r4, #20]
   3aae8:	b	3aa04 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x138>
   3aaec:	mov	r1, #10
   3aaf0:	str	r2, [r4, #20]
   3aaf4:	strb	r1, [r3]
   3aaf8:	ldrb	r3, [r4, #25]
   3aafc:	ldr	r2, [r4, #32]
   3ab00:	ldr	r1, [r4, #16]
   3ab04:	ldr	r0, [r4, #20]
   3ab08:	sub	r2, r2, #1
   3ab0c:	mul	r5, r2, r3
   3ab10:	str	r2, [r4, #32]
   3ab14:	add	r3, r0, r5
   3ab18:	cmp	r1, r3
   3ab1c:	bcs	3ab54 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x288>
   3ab20:	mov	r1, r5
   3ab24:	mov	r0, r4
   3ab28:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3ab2c:	ldr	r3, [r4, #20]
   3ab30:	add	r2, r3, #1
   3ab34:	b	3aa94 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1c8>
   3ab38:	add	r1, r3, #1
   3ab3c:	mov	r2, #10
   3ab40:	mov	r0, r4
   3ab44:	str	r1, [r4, #20]
   3ab48:	strb	r2, [r3]
   3ab4c:	bl	31110 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3ab50:	b	3a9c0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   3ab54:	mov	r2, r5
   3ab58:	mov	r1, #32
   3ab5c:	bl	14594 <memset@plt>
   3ab60:	ldr	r3, [r4, #20]
   3ab64:	add	r3, r3, r5
   3ab68:	add	r2, r3, #1
   3ab6c:	b	3aa94 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1c8>

0003ab70 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   3ab70:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3ab74:	strd	r6, [sp, #8]
   3ab78:	strd	r8, [sp, #16]
   3ab7c:	str	sl, [sp, #24]
   3ab80:	str	lr, [sp, #28]
   3ab84:	ldrb	r8, [r0, #27]
   3ab88:	ldrd	r6, [sp, #32]
   3ab8c:	cmp	r8, #0
   3ab90:	bne	3ad5c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1ec>
   3ab94:	mov	r5, r3
   3ab98:	ldr	r3, [r1, #8]
   3ab9c:	add	r2, r2, #2
   3aba0:	lsl	r2, r2, #1
   3aba4:	mov	lr, r1
   3aba8:	cmp	r3, r2
   3abac:	ble	3ad44 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d4>
   3abb0:	ldr	r3, [r1, #4]
   3abb4:	ldrh	r2, [r3, r2]
   3abb8:	cmp	r2, #0
   3abbc:	beq	3ad44 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d4>
   3abc0:	ldr	r3, [r1]
   3abc4:	adds	ip, r3, r2
   3abc8:	beq	3ad44 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d4>
   3abcc:	ldr	r1, [r1, #16]
   3abd0:	mov	r4, r0
   3abd4:	add	r0, r1, #1
   3abd8:	cmp	r1, #0
   3abdc:	str	r0, [lr, #16]
   3abe0:	beq	3abf8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x88>
   3abe4:	ldr	r1, [r4, #20]
   3abe8:	mov	r0, #44	; 0x2c
   3abec:	add	lr, r1, #1
   3abf0:	str	lr, [r4, #20]
   3abf4:	strb	r0, [r1]
   3abf8:	ldr	r3, [r3, r2]
   3abfc:	mov	r1, r5
   3ac00:	mov	r2, r6
   3ac04:	mov	r0, r4
   3ac08:	add	r6, ip, r3
   3ac0c:	ldr	r5, [ip, r3]
   3ac10:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3ac14:	ldr	r2, [r4, #20]
   3ac18:	mov	r1, #91	; 0x5b
   3ac1c:	ldr	r3, [r4, #32]
   3ac20:	cmp	r5, #0
   3ac24:	add	r0, r2, #1
   3ac28:	add	r3, r3, #1
   3ac2c:	str	r0, [r4, #20]
   3ac30:	str	r3, [r4, #32]
   3ac34:	strb	r1, [r2]
   3ac38:	beq	3ad24 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1b4>
   3ac3c:	ldrb	r1, [r4, #25]
   3ac40:	ldr	r3, [r4, #20]
   3ac44:	cmp	r1, #0
   3ac48:	bne	3addc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x26c>
   3ac4c:	ldr	r2, [r4, #16]
   3ac50:	cmp	r2, r3
   3ac54:	bhi	3ac64 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   3ac58:	mov	r0, r4
   3ac5c:	ldr	r3, [r4, #44]	; 0x2c
   3ac60:	blx	r3
   3ac64:	mov	r0, r4
   3ac68:	ldrd	r2, [r6, #4]
   3ac6c:	add	r6, r6, #12
   3ac70:	blx	r7
   3ac74:	cmp	r5, #1
   3ac78:	sub	r5, r5, #2
   3ac7c:	beq	3ad24 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1b4>
   3ac80:	mov	r8, #44	; 0x2c
   3ac84:	mov	r9, #10
   3ac88:	b	3acc0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x150>
   3ac8c:	ldr	r3, [r4, #16]
   3ac90:	mov	r0, r4
   3ac94:	ldr	r2, [r4, #20]
   3ac98:	cmp	r2, r3
   3ac9c:	bcc	3aca8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x138>
   3aca0:	ldr	r3, [r4, #44]	; 0x2c
   3aca4:	blx	r3
   3aca8:	sub	r5, r5, #1
   3acac:	mov	r0, r4
   3acb0:	ldrd	r2, [r6], #8
   3acb4:	blx	r7
   3acb8:	cmn	r5, #1
   3acbc:	beq	3ad24 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1b4>
   3acc0:	ldr	r3, [r4, #20]
   3acc4:	add	r2, r3, #1
   3acc8:	str	r2, [r4, #20]
   3accc:	strb	r8, [r3]
   3acd0:	ldrb	r1, [r4, #25]
   3acd4:	cmp	r1, #0
   3acd8:	beq	3ac8c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x11c>
   3acdc:	ldr	r3, [r4, #20]
   3ace0:	mov	r1, #32
   3ace4:	mov	r0, r4
   3ace8:	add	r2, r3, #1
   3acec:	str	r2, [r4, #20]
   3acf0:	strb	r9, [r3]
   3acf4:	ldrb	r2, [r4, #25]
   3acf8:	ldr	lr, [r4, #16]
   3acfc:	ldr	sl, [r4, #32]
   3ad00:	ldr	r3, [r4, #20]
   3ad04:	mul	sl, sl, r2
   3ad08:	add	ip, r3, sl
   3ad0c:	mov	r2, sl
   3ad10:	cmp	lr, ip
   3ad14:	bcs	3ad78 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x208>
   3ad18:	mov	r1, sl
   3ad1c:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3ad20:	b	3aca8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x138>
   3ad24:	ldrb	r2, [r4, #25]
   3ad28:	ldr	r3, [r4, #20]
   3ad2c:	cmp	r2, #0
   3ad30:	add	r2, r3, #1
   3ad34:	bne	3ad90 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x220>
   3ad38:	mov	r1, #93	; 0x5d
   3ad3c:	str	r2, [r4, #20]
   3ad40:	strb	r1, [r3]
   3ad44:	ldrd	r4, [sp]
   3ad48:	ldrd	r6, [sp, #8]
   3ad4c:	ldrd	r8, [sp, #16]
   3ad50:	ldr	sl, [sp, #24]
   3ad54:	add	sp, sp, #28
   3ad58:	pop	{pc}		; (ldr pc, [sp], #4)
   3ad5c:	ldrd	r4, [sp]
   3ad60:	ldrd	r6, [sp, #8]
   3ad64:	ldrd	r8, [sp, #16]
   3ad68:	ldr	sl, [sp, #24]
   3ad6c:	ldr	lr, [sp, #28]
   3ad70:	add	sp, sp, #32
   3ad74:	b	389e8 <flatcc_json_printer_uint64_vector_field@@Base>
   3ad78:	mov	r0, r3
   3ad7c:	bl	14594 <memset@plt>
   3ad80:	ldr	r3, [r4, #20]
   3ad84:	add	sl, r3, sl
   3ad88:	str	sl, [r4, #20]
   3ad8c:	b	3aca8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x138>
   3ad90:	mov	r1, #10
   3ad94:	str	r2, [r4, #20]
   3ad98:	strb	r1, [r3]
   3ad9c:	ldrb	r3, [r4, #25]
   3ada0:	ldr	r2, [r4, #32]
   3ada4:	ldr	r1, [r4, #16]
   3ada8:	ldr	r0, [r4, #20]
   3adac:	sub	r2, r2, #1
   3adb0:	mul	r5, r2, r3
   3adb4:	str	r2, [r4, #32]
   3adb8:	add	r3, r0, r5
   3adbc:	cmp	r1, r3
   3adc0:	bcs	3adf8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x288>
   3adc4:	mov	r1, r5
   3adc8:	mov	r0, r4
   3adcc:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3add0:	ldr	r3, [r4, #20]
   3add4:	add	r2, r3, #1
   3add8:	b	3ad38 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1c8>
   3addc:	add	r1, r3, #1
   3ade0:	mov	r2, #10
   3ade4:	mov	r0, r4
   3ade8:	str	r1, [r4, #20]
   3adec:	strb	r2, [r3]
   3adf0:	bl	31110 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3adf4:	b	3ac64 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   3adf8:	mov	r2, r5
   3adfc:	mov	r1, #32
   3ae00:	bl	14594 <memset@plt>
   3ae04:	ldr	r3, [r4, #20]
   3ae08:	add	r3, r3, r5
   3ae0c:	add	r2, r3, #1
   3ae10:	b	3ad38 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1c8>

0003ae14 <flatcc_json_printer_int8_enum_vector_field@@Base>:
   3ae14:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3ae18:	strd	r6, [sp, #8]
   3ae1c:	strd	r8, [sp, #16]
   3ae20:	str	sl, [sp, #24]
   3ae24:	str	lr, [sp, #28]
   3ae28:	ldrb	r8, [r0, #27]
   3ae2c:	ldr	r7, [sp, #32]
   3ae30:	ldr	r6, [sp, #36]	; 0x24
   3ae34:	cmp	r8, #0
   3ae38:	bne	3b004 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1f0>
   3ae3c:	mov	r5, r3
   3ae40:	ldr	r3, [r1, #8]
   3ae44:	add	r2, r2, #2
   3ae48:	lsl	r2, r2, #1
   3ae4c:	mov	lr, r1
   3ae50:	cmp	r3, r2
   3ae54:	ble	3afec <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d8>
   3ae58:	ldr	r3, [r1, #4]
   3ae5c:	ldrh	r2, [r3, r2]
   3ae60:	cmp	r2, #0
   3ae64:	beq	3afec <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d8>
   3ae68:	ldr	r3, [r1]
   3ae6c:	adds	ip, r3, r2
   3ae70:	beq	3afec <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d8>
   3ae74:	ldr	r1, [r1, #16]
   3ae78:	mov	r4, r0
   3ae7c:	add	r0, r1, #1
   3ae80:	cmp	r1, #0
   3ae84:	str	r0, [lr, #16]
   3ae88:	beq	3aea0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x8c>
   3ae8c:	ldr	r1, [r4, #20]
   3ae90:	mov	r0, #44	; 0x2c
   3ae94:	add	lr, r1, #1
   3ae98:	str	lr, [r4, #20]
   3ae9c:	strb	r0, [r1]
   3aea0:	ldr	r3, [r3, r2]
   3aea4:	mov	r1, r5
   3aea8:	mov	r2, r7
   3aeac:	mov	r0, r4
   3aeb0:	add	r7, ip, r3
   3aeb4:	ldr	r8, [ip, r3]
   3aeb8:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3aebc:	ldr	r2, [r4, #20]
   3aec0:	mov	r1, #91	; 0x5b
   3aec4:	ldr	r3, [r4, #32]
   3aec8:	cmp	r8, #0
   3aecc:	add	r0, r2, #1
   3aed0:	add	r3, r3, #1
   3aed4:	str	r0, [r4, #20]
   3aed8:	str	r3, [r4, #32]
   3aedc:	strb	r1, [r2]
   3aee0:	beq	3afcc <flatcc_json_printer_int8_enum_vector_field@@Base+0x1b8>
   3aee4:	ldrb	r1, [r4, #25]
   3aee8:	ldr	r3, [r4, #20]
   3aeec:	cmp	r1, #0
   3aef0:	bne	3b084 <flatcc_json_printer_int8_enum_vector_field@@Base+0x270>
   3aef4:	ldr	r2, [r4, #16]
   3aef8:	cmp	r2, r3
   3aefc:	bhi	3af0c <flatcc_json_printer_int8_enum_vector_field@@Base+0xf8>
   3af00:	mov	r0, r4
   3af04:	ldr	r3, [r4, #44]	; 0x2c
   3af08:	blx	r3
   3af0c:	ldrsb	r1, [r7, #4]
   3af10:	mov	r0, r4
   3af14:	add	r5, r7, #5
   3af18:	blx	r6
   3af1c:	cmp	r8, #1
   3af20:	beq	3afcc <flatcc_json_printer_int8_enum_vector_field@@Base+0x1b8>
   3af24:	add	r3, r8, #4
   3af28:	mov	r9, #10
   3af2c:	mov	r8, #44	; 0x2c
   3af30:	add	r7, r7, r3
   3af34:	b	3af68 <flatcc_json_printer_int8_enum_vector_field@@Base+0x154>
   3af38:	ldr	r3, [r4, #16]
   3af3c:	mov	r0, r4
   3af40:	ldr	r2, [r4, #20]
   3af44:	cmp	r2, r3
   3af48:	bcc	3af54 <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
   3af4c:	ldr	r3, [r4, #44]	; 0x2c
   3af50:	blx	r3
   3af54:	ldrsb	r1, [r5], #1
   3af58:	mov	r0, r4
   3af5c:	blx	r6
   3af60:	cmp	r5, r7
   3af64:	beq	3afcc <flatcc_json_printer_int8_enum_vector_field@@Base+0x1b8>
   3af68:	ldr	r3, [r4, #20]
   3af6c:	add	r2, r3, #1
   3af70:	str	r2, [r4, #20]
   3af74:	strb	r8, [r3]
   3af78:	ldrb	r1, [r4, #25]
   3af7c:	cmp	r1, #0
   3af80:	beq	3af38 <flatcc_json_printer_int8_enum_vector_field@@Base+0x124>
   3af84:	ldr	r3, [r4, #20]
   3af88:	mov	r1, #32
   3af8c:	mov	r0, r4
   3af90:	add	r2, r3, #1
   3af94:	str	r2, [r4, #20]
   3af98:	strb	r9, [r3]
   3af9c:	ldrb	r2, [r4, #25]
   3afa0:	ldr	lr, [r4, #16]
   3afa4:	ldr	sl, [r4, #32]
   3afa8:	ldr	r3, [r4, #20]
   3afac:	mul	sl, sl, r2
   3afb0:	add	ip, r3, sl
   3afb4:	mov	r2, sl
   3afb8:	cmp	lr, ip
   3afbc:	bcs	3b020 <flatcc_json_printer_int8_enum_vector_field@@Base+0x20c>
   3afc0:	mov	r1, sl
   3afc4:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3afc8:	b	3af54 <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
   3afcc:	ldrb	r2, [r4, #25]
   3afd0:	ldr	r3, [r4, #20]
   3afd4:	cmp	r2, #0
   3afd8:	add	r2, r3, #1
   3afdc:	bne	3b038 <flatcc_json_printer_int8_enum_vector_field@@Base+0x224>
   3afe0:	mov	r1, #93	; 0x5d
   3afe4:	str	r2, [r4, #20]
   3afe8:	strb	r1, [r3]
   3afec:	ldrd	r4, [sp]
   3aff0:	ldrd	r6, [sp, #8]
   3aff4:	ldrd	r8, [sp, #16]
   3aff8:	ldr	sl, [sp, #24]
   3affc:	add	sp, sp, #28
   3b000:	pop	{pc}		; (ldr pc, [sp], #4)
   3b004:	ldrd	r4, [sp]
   3b008:	ldrd	r6, [sp, #8]
   3b00c:	ldrd	r8, [sp, #16]
   3b010:	ldr	sl, [sp, #24]
   3b014:	ldr	lr, [sp, #28]
   3b018:	add	sp, sp, #32
   3b01c:	b	38cb0 <flatcc_json_printer_int8_vector_field@@Base>
   3b020:	mov	r0, r3
   3b024:	bl	14594 <memset@plt>
   3b028:	ldr	r3, [r4, #20]
   3b02c:	add	sl, r3, sl
   3b030:	str	sl, [r4, #20]
   3b034:	b	3af54 <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
   3b038:	mov	r1, #10
   3b03c:	str	r2, [r4, #20]
   3b040:	strb	r1, [r3]
   3b044:	ldrb	r3, [r4, #25]
   3b048:	ldr	r2, [r4, #32]
   3b04c:	ldr	r1, [r4, #16]
   3b050:	ldr	r0, [r4, #20]
   3b054:	sub	r2, r2, #1
   3b058:	mul	r5, r2, r3
   3b05c:	str	r2, [r4, #32]
   3b060:	add	r3, r0, r5
   3b064:	cmp	r1, r3
   3b068:	bcs	3b0a0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x28c>
   3b06c:	mov	r1, r5
   3b070:	mov	r0, r4
   3b074:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3b078:	ldr	r3, [r4, #20]
   3b07c:	add	r2, r3, #1
   3b080:	b	3afe0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1cc>
   3b084:	add	r1, r3, #1
   3b088:	mov	r2, #10
   3b08c:	mov	r0, r4
   3b090:	str	r1, [r4, #20]
   3b094:	strb	r2, [r3]
   3b098:	bl	31110 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3b09c:	b	3af0c <flatcc_json_printer_int8_enum_vector_field@@Base+0xf8>
   3b0a0:	mov	r2, r5
   3b0a4:	mov	r1, #32
   3b0a8:	bl	14594 <memset@plt>
   3b0ac:	ldr	r3, [r4, #20]
   3b0b0:	add	r3, r3, r5
   3b0b4:	add	r2, r3, #1
   3b0b8:	b	3afe0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1cc>

0003b0bc <flatcc_json_printer_int16_enum_vector_field@@Base>:
   3b0bc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3b0c0:	strd	r6, [sp, #8]
   3b0c4:	strd	r8, [sp, #16]
   3b0c8:	str	sl, [sp, #24]
   3b0cc:	str	lr, [sp, #28]
   3b0d0:	ldrb	r8, [r0, #27]
   3b0d4:	ldrd	r6, [sp, #32]
   3b0d8:	cmp	r8, #0
   3b0dc:	bne	3b2a8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1ec>
   3b0e0:	mov	r5, r3
   3b0e4:	ldr	r3, [r1, #8]
   3b0e8:	add	r2, r2, #2
   3b0ec:	lsl	r2, r2, #1
   3b0f0:	mov	lr, r1
   3b0f4:	cmp	r3, r2
   3b0f8:	ble	3b290 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d4>
   3b0fc:	ldr	r3, [r1, #4]
   3b100:	ldrh	r2, [r3, r2]
   3b104:	cmp	r2, #0
   3b108:	beq	3b290 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d4>
   3b10c:	ldr	r3, [r1]
   3b110:	adds	ip, r3, r2
   3b114:	beq	3b290 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d4>
   3b118:	ldr	r1, [r1, #16]
   3b11c:	mov	r4, r0
   3b120:	add	r0, r1, #1
   3b124:	cmp	r1, #0
   3b128:	str	r0, [lr, #16]
   3b12c:	beq	3b144 <flatcc_json_printer_int16_enum_vector_field@@Base+0x88>
   3b130:	ldr	r1, [r4, #20]
   3b134:	mov	r0, #44	; 0x2c
   3b138:	add	lr, r1, #1
   3b13c:	str	lr, [r4, #20]
   3b140:	strb	r0, [r1]
   3b144:	ldr	r3, [r3, r2]
   3b148:	mov	r1, r5
   3b14c:	mov	r2, r6
   3b150:	mov	r0, r4
   3b154:	add	r6, ip, r3
   3b158:	ldr	r5, [ip, r3]
   3b15c:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3b160:	ldr	r2, [r4, #20]
   3b164:	mov	r1, #91	; 0x5b
   3b168:	ldr	r3, [r4, #32]
   3b16c:	cmp	r5, #0
   3b170:	add	r0, r2, #1
   3b174:	add	r3, r3, #1
   3b178:	str	r0, [r4, #20]
   3b17c:	str	r3, [r4, #32]
   3b180:	strb	r1, [r2]
   3b184:	beq	3b270 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1b4>
   3b188:	ldrb	r1, [r4, #25]
   3b18c:	ldr	r3, [r4, #20]
   3b190:	cmp	r1, #0
   3b194:	bne	3b328 <flatcc_json_printer_int16_enum_vector_field@@Base+0x26c>
   3b198:	ldr	r2, [r4, #16]
   3b19c:	cmp	r2, r3
   3b1a0:	bhi	3b1b0 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   3b1a4:	mov	r0, r4
   3b1a8:	ldr	r3, [r4, #44]	; 0x2c
   3b1ac:	blx	r3
   3b1b0:	ldrsh	r1, [r6, #4]
   3b1b4:	mov	r0, r4
   3b1b8:	add	r6, r6, #6
   3b1bc:	blx	r7
   3b1c0:	cmp	r5, #1
   3b1c4:	sub	r5, r5, #2
   3b1c8:	beq	3b270 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1b4>
   3b1cc:	mov	r8, #44	; 0x2c
   3b1d0:	mov	r9, #10
   3b1d4:	b	3b20c <flatcc_json_printer_int16_enum_vector_field@@Base+0x150>
   3b1d8:	ldr	r3, [r4, #16]
   3b1dc:	mov	r0, r4
   3b1e0:	ldr	r2, [r4, #20]
   3b1e4:	cmp	r2, r3
   3b1e8:	bcc	3b1f4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x138>
   3b1ec:	ldr	r3, [r4, #44]	; 0x2c
   3b1f0:	blx	r3
   3b1f4:	sub	r5, r5, #1
   3b1f8:	ldrsh	r1, [r6], #2
   3b1fc:	mov	r0, r4
   3b200:	blx	r7
   3b204:	cmn	r5, #1
   3b208:	beq	3b270 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1b4>
   3b20c:	ldr	r3, [r4, #20]
   3b210:	add	r2, r3, #1
   3b214:	str	r2, [r4, #20]
   3b218:	strb	r8, [r3]
   3b21c:	ldrb	r1, [r4, #25]
   3b220:	cmp	r1, #0
   3b224:	beq	3b1d8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x11c>
   3b228:	ldr	r3, [r4, #20]
   3b22c:	mov	r1, #32
   3b230:	mov	r0, r4
   3b234:	add	r2, r3, #1
   3b238:	str	r2, [r4, #20]
   3b23c:	strb	r9, [r3]
   3b240:	ldrb	r2, [r4, #25]
   3b244:	ldr	lr, [r4, #16]
   3b248:	ldr	sl, [r4, #32]
   3b24c:	ldr	r3, [r4, #20]
   3b250:	mul	sl, sl, r2
   3b254:	add	ip, r3, sl
   3b258:	mov	r2, sl
   3b25c:	cmp	lr, ip
   3b260:	bcs	3b2c4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x208>
   3b264:	mov	r1, sl
   3b268:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3b26c:	b	3b1f4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x138>
   3b270:	ldrb	r2, [r4, #25]
   3b274:	ldr	r3, [r4, #20]
   3b278:	cmp	r2, #0
   3b27c:	add	r2, r3, #1
   3b280:	bne	3b2dc <flatcc_json_printer_int16_enum_vector_field@@Base+0x220>
   3b284:	mov	r1, #93	; 0x5d
   3b288:	str	r2, [r4, #20]
   3b28c:	strb	r1, [r3]
   3b290:	ldrd	r4, [sp]
   3b294:	ldrd	r6, [sp, #8]
   3b298:	ldrd	r8, [sp, #16]
   3b29c:	ldr	sl, [sp, #24]
   3b2a0:	add	sp, sp, #28
   3b2a4:	pop	{pc}		; (ldr pc, [sp], #4)
   3b2a8:	ldrd	r4, [sp]
   3b2ac:	ldrd	r6, [sp, #8]
   3b2b0:	ldrd	r8, [sp, #16]
   3b2b4:	ldr	sl, [sp, #24]
   3b2b8:	ldr	lr, [sp, #28]
   3b2bc:	add	sp, sp, #32
   3b2c0:	b	38f94 <flatcc_json_printer_int16_vector_field@@Base>
   3b2c4:	mov	r0, r3
   3b2c8:	bl	14594 <memset@plt>
   3b2cc:	ldr	r3, [r4, #20]
   3b2d0:	add	sl, r3, sl
   3b2d4:	str	sl, [r4, #20]
   3b2d8:	b	3b1f4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x138>
   3b2dc:	mov	r1, #10
   3b2e0:	str	r2, [r4, #20]
   3b2e4:	strb	r1, [r3]
   3b2e8:	ldrb	r3, [r4, #25]
   3b2ec:	ldr	r2, [r4, #32]
   3b2f0:	ldr	r1, [r4, #16]
   3b2f4:	ldr	r0, [r4, #20]
   3b2f8:	sub	r2, r2, #1
   3b2fc:	mul	r5, r2, r3
   3b300:	str	r2, [r4, #32]
   3b304:	add	r3, r0, r5
   3b308:	cmp	r1, r3
   3b30c:	bcs	3b344 <flatcc_json_printer_int16_enum_vector_field@@Base+0x288>
   3b310:	mov	r1, r5
   3b314:	mov	r0, r4
   3b318:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3b31c:	ldr	r3, [r4, #20]
   3b320:	add	r2, r3, #1
   3b324:	b	3b284 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1c8>
   3b328:	add	r1, r3, #1
   3b32c:	mov	r2, #10
   3b330:	mov	r0, r4
   3b334:	str	r1, [r4, #20]
   3b338:	strb	r2, [r3]
   3b33c:	bl	31110 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3b340:	b	3b1b0 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   3b344:	mov	r2, r5
   3b348:	mov	r1, #32
   3b34c:	bl	14594 <memset@plt>
   3b350:	ldr	r3, [r4, #20]
   3b354:	add	r3, r3, r5
   3b358:	add	r2, r3, #1
   3b35c:	b	3b284 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1c8>

0003b360 <flatcc_json_printer_int32_enum_vector_field@@Base>:
   3b360:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3b364:	strd	r6, [sp, #8]
   3b368:	strd	r8, [sp, #16]
   3b36c:	str	sl, [sp, #24]
   3b370:	str	lr, [sp, #28]
   3b374:	ldrb	r8, [r0, #27]
   3b378:	ldrd	r6, [sp, #32]
   3b37c:	cmp	r8, #0
   3b380:	bne	3b54c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1ec>
   3b384:	mov	r5, r3
   3b388:	ldr	r3, [r1, #8]
   3b38c:	add	r2, r2, #2
   3b390:	lsl	r2, r2, #1
   3b394:	mov	lr, r1
   3b398:	cmp	r3, r2
   3b39c:	ble	3b534 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d4>
   3b3a0:	ldr	r3, [r1, #4]
   3b3a4:	ldrh	r2, [r3, r2]
   3b3a8:	cmp	r2, #0
   3b3ac:	beq	3b534 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d4>
   3b3b0:	ldr	r3, [r1]
   3b3b4:	adds	ip, r3, r2
   3b3b8:	beq	3b534 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d4>
   3b3bc:	ldr	r1, [r1, #16]
   3b3c0:	mov	r4, r0
   3b3c4:	add	r0, r1, #1
   3b3c8:	cmp	r1, #0
   3b3cc:	str	r0, [lr, #16]
   3b3d0:	beq	3b3e8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x88>
   3b3d4:	ldr	r1, [r4, #20]
   3b3d8:	mov	r0, #44	; 0x2c
   3b3dc:	add	lr, r1, #1
   3b3e0:	str	lr, [r4, #20]
   3b3e4:	strb	r0, [r1]
   3b3e8:	ldr	r3, [r3, r2]
   3b3ec:	mov	r1, r5
   3b3f0:	mov	r2, r6
   3b3f4:	mov	r0, r4
   3b3f8:	add	r6, ip, r3
   3b3fc:	ldr	r5, [ip, r3]
   3b400:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3b404:	ldr	r2, [r4, #20]
   3b408:	mov	r1, #91	; 0x5b
   3b40c:	ldr	r3, [r4, #32]
   3b410:	cmp	r5, #0
   3b414:	add	r0, r2, #1
   3b418:	add	r3, r3, #1
   3b41c:	str	r0, [r4, #20]
   3b420:	str	r3, [r4, #32]
   3b424:	strb	r1, [r2]
   3b428:	beq	3b514 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1b4>
   3b42c:	ldrb	r1, [r4, #25]
   3b430:	ldr	r3, [r4, #20]
   3b434:	cmp	r1, #0
   3b438:	bne	3b5cc <flatcc_json_printer_int32_enum_vector_field@@Base+0x26c>
   3b43c:	ldr	r2, [r4, #16]
   3b440:	cmp	r2, r3
   3b444:	bhi	3b454 <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   3b448:	mov	r0, r4
   3b44c:	ldr	r3, [r4, #44]	; 0x2c
   3b450:	blx	r3
   3b454:	mov	r0, r4
   3b458:	ldr	r1, [r6, #4]
   3b45c:	add	r6, r6, #8
   3b460:	blx	r7
   3b464:	cmp	r5, #1
   3b468:	sub	r5, r5, #2
   3b46c:	beq	3b514 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1b4>
   3b470:	mov	r8, #44	; 0x2c
   3b474:	mov	r9, #10
   3b478:	b	3b4b0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x150>
   3b47c:	ldr	r3, [r4, #16]
   3b480:	mov	r0, r4
   3b484:	ldr	r2, [r4, #20]
   3b488:	cmp	r2, r3
   3b48c:	bcc	3b498 <flatcc_json_printer_int32_enum_vector_field@@Base+0x138>
   3b490:	ldr	r3, [r4, #44]	; 0x2c
   3b494:	blx	r3
   3b498:	sub	r5, r5, #1
   3b49c:	mov	r0, r4
   3b4a0:	ldr	r1, [r6], #4
   3b4a4:	blx	r7
   3b4a8:	cmn	r5, #1
   3b4ac:	beq	3b514 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1b4>
   3b4b0:	ldr	r3, [r4, #20]
   3b4b4:	add	r2, r3, #1
   3b4b8:	str	r2, [r4, #20]
   3b4bc:	strb	r8, [r3]
   3b4c0:	ldrb	r1, [r4, #25]
   3b4c4:	cmp	r1, #0
   3b4c8:	beq	3b47c <flatcc_json_printer_int32_enum_vector_field@@Base+0x11c>
   3b4cc:	ldr	r3, [r4, #20]
   3b4d0:	mov	r1, #32
   3b4d4:	mov	r0, r4
   3b4d8:	add	r2, r3, #1
   3b4dc:	str	r2, [r4, #20]
   3b4e0:	strb	r9, [r3]
   3b4e4:	ldrb	r2, [r4, #25]
   3b4e8:	ldr	lr, [r4, #16]
   3b4ec:	ldr	sl, [r4, #32]
   3b4f0:	ldr	r3, [r4, #20]
   3b4f4:	mul	sl, sl, r2
   3b4f8:	add	ip, r3, sl
   3b4fc:	mov	r2, sl
   3b500:	cmp	lr, ip
   3b504:	bcs	3b568 <flatcc_json_printer_int32_enum_vector_field@@Base+0x208>
   3b508:	mov	r1, sl
   3b50c:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3b510:	b	3b498 <flatcc_json_printer_int32_enum_vector_field@@Base+0x138>
   3b514:	ldrb	r2, [r4, #25]
   3b518:	ldr	r3, [r4, #20]
   3b51c:	cmp	r2, #0
   3b520:	add	r2, r3, #1
   3b524:	bne	3b580 <flatcc_json_printer_int32_enum_vector_field@@Base+0x220>
   3b528:	mov	r1, #93	; 0x5d
   3b52c:	str	r2, [r4, #20]
   3b530:	strb	r1, [r3]
   3b534:	ldrd	r4, [sp]
   3b538:	ldrd	r6, [sp, #8]
   3b53c:	ldrd	r8, [sp, #16]
   3b540:	ldr	sl, [sp, #24]
   3b544:	add	sp, sp, #28
   3b548:	pop	{pc}		; (ldr pc, [sp], #4)
   3b54c:	ldrd	r4, [sp]
   3b550:	ldrd	r6, [sp, #8]
   3b554:	ldrd	r8, [sp, #16]
   3b558:	ldr	sl, [sp, #24]
   3b55c:	ldr	lr, [sp, #28]
   3b560:	add	sp, sp, #32
   3b564:	b	39278 <flatcc_json_printer_int32_vector_field@@Base>
   3b568:	mov	r0, r3
   3b56c:	bl	14594 <memset@plt>
   3b570:	ldr	r3, [r4, #20]
   3b574:	add	sl, r3, sl
   3b578:	str	sl, [r4, #20]
   3b57c:	b	3b498 <flatcc_json_printer_int32_enum_vector_field@@Base+0x138>
   3b580:	mov	r1, #10
   3b584:	str	r2, [r4, #20]
   3b588:	strb	r1, [r3]
   3b58c:	ldrb	r3, [r4, #25]
   3b590:	ldr	r2, [r4, #32]
   3b594:	ldr	r1, [r4, #16]
   3b598:	ldr	r0, [r4, #20]
   3b59c:	sub	r2, r2, #1
   3b5a0:	mul	r5, r2, r3
   3b5a4:	str	r2, [r4, #32]
   3b5a8:	add	r3, r0, r5
   3b5ac:	cmp	r1, r3
   3b5b0:	bcs	3b5e8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x288>
   3b5b4:	mov	r1, r5
   3b5b8:	mov	r0, r4
   3b5bc:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3b5c0:	ldr	r3, [r4, #20]
   3b5c4:	add	r2, r3, #1
   3b5c8:	b	3b528 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1c8>
   3b5cc:	add	r1, r3, #1
   3b5d0:	mov	r2, #10
   3b5d4:	mov	r0, r4
   3b5d8:	str	r1, [r4, #20]
   3b5dc:	strb	r2, [r3]
   3b5e0:	bl	31110 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3b5e4:	b	3b454 <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   3b5e8:	mov	r2, r5
   3b5ec:	mov	r1, #32
   3b5f0:	bl	14594 <memset@plt>
   3b5f4:	ldr	r3, [r4, #20]
   3b5f8:	add	r3, r3, r5
   3b5fc:	add	r2, r3, #1
   3b600:	b	3b528 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1c8>

0003b604 <flatcc_json_printer_int64_enum_vector_field@@Base>:
   3b604:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3b608:	strd	r6, [sp, #8]
   3b60c:	strd	r8, [sp, #16]
   3b610:	str	sl, [sp, #24]
   3b614:	str	lr, [sp, #28]
   3b618:	ldrb	r8, [r0, #27]
   3b61c:	ldrd	r6, [sp, #32]
   3b620:	cmp	r8, #0
   3b624:	bne	3b7f0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1ec>
   3b628:	mov	r5, r3
   3b62c:	ldr	r3, [r1, #8]
   3b630:	add	r2, r2, #2
   3b634:	lsl	r2, r2, #1
   3b638:	mov	lr, r1
   3b63c:	cmp	r3, r2
   3b640:	ble	3b7d8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d4>
   3b644:	ldr	r3, [r1, #4]
   3b648:	ldrh	r2, [r3, r2]
   3b64c:	cmp	r2, #0
   3b650:	beq	3b7d8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d4>
   3b654:	ldr	r3, [r1]
   3b658:	adds	ip, r3, r2
   3b65c:	beq	3b7d8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d4>
   3b660:	ldr	r1, [r1, #16]
   3b664:	mov	r4, r0
   3b668:	add	r0, r1, #1
   3b66c:	cmp	r1, #0
   3b670:	str	r0, [lr, #16]
   3b674:	beq	3b68c <flatcc_json_printer_int64_enum_vector_field@@Base+0x88>
   3b678:	ldr	r1, [r4, #20]
   3b67c:	mov	r0, #44	; 0x2c
   3b680:	add	lr, r1, #1
   3b684:	str	lr, [r4, #20]
   3b688:	strb	r0, [r1]
   3b68c:	ldr	r3, [r3, r2]
   3b690:	mov	r1, r5
   3b694:	mov	r2, r6
   3b698:	mov	r0, r4
   3b69c:	add	r6, ip, r3
   3b6a0:	ldr	r5, [ip, r3]
   3b6a4:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3b6a8:	ldr	r2, [r4, #20]
   3b6ac:	mov	r1, #91	; 0x5b
   3b6b0:	ldr	r3, [r4, #32]
   3b6b4:	cmp	r5, #0
   3b6b8:	add	r0, r2, #1
   3b6bc:	add	r3, r3, #1
   3b6c0:	str	r0, [r4, #20]
   3b6c4:	str	r3, [r4, #32]
   3b6c8:	strb	r1, [r2]
   3b6cc:	beq	3b7b8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1b4>
   3b6d0:	ldrb	r1, [r4, #25]
   3b6d4:	ldr	r3, [r4, #20]
   3b6d8:	cmp	r1, #0
   3b6dc:	bne	3b870 <flatcc_json_printer_int64_enum_vector_field@@Base+0x26c>
   3b6e0:	ldr	r2, [r4, #16]
   3b6e4:	cmp	r2, r3
   3b6e8:	bhi	3b6f8 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   3b6ec:	mov	r0, r4
   3b6f0:	ldr	r3, [r4, #44]	; 0x2c
   3b6f4:	blx	r3
   3b6f8:	mov	r0, r4
   3b6fc:	ldrd	r2, [r6, #4]
   3b700:	add	r6, r6, #12
   3b704:	blx	r7
   3b708:	cmp	r5, #1
   3b70c:	sub	r5, r5, #2
   3b710:	beq	3b7b8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1b4>
   3b714:	mov	r8, #44	; 0x2c
   3b718:	mov	r9, #10
   3b71c:	b	3b754 <flatcc_json_printer_int64_enum_vector_field@@Base+0x150>
   3b720:	ldr	r3, [r4, #16]
   3b724:	mov	r0, r4
   3b728:	ldr	r2, [r4, #20]
   3b72c:	cmp	r2, r3
   3b730:	bcc	3b73c <flatcc_json_printer_int64_enum_vector_field@@Base+0x138>
   3b734:	ldr	r3, [r4, #44]	; 0x2c
   3b738:	blx	r3
   3b73c:	sub	r5, r5, #1
   3b740:	mov	r0, r4
   3b744:	ldrd	r2, [r6], #8
   3b748:	blx	r7
   3b74c:	cmn	r5, #1
   3b750:	beq	3b7b8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1b4>
   3b754:	ldr	r3, [r4, #20]
   3b758:	add	r2, r3, #1
   3b75c:	str	r2, [r4, #20]
   3b760:	strb	r8, [r3]
   3b764:	ldrb	r1, [r4, #25]
   3b768:	cmp	r1, #0
   3b76c:	beq	3b720 <flatcc_json_printer_int64_enum_vector_field@@Base+0x11c>
   3b770:	ldr	r3, [r4, #20]
   3b774:	mov	r1, #32
   3b778:	mov	r0, r4
   3b77c:	add	r2, r3, #1
   3b780:	str	r2, [r4, #20]
   3b784:	strb	r9, [r3]
   3b788:	ldrb	r2, [r4, #25]
   3b78c:	ldr	lr, [r4, #16]
   3b790:	ldr	sl, [r4, #32]
   3b794:	ldr	r3, [r4, #20]
   3b798:	mul	sl, sl, r2
   3b79c:	add	ip, r3, sl
   3b7a0:	mov	r2, sl
   3b7a4:	cmp	lr, ip
   3b7a8:	bcs	3b80c <flatcc_json_printer_int64_enum_vector_field@@Base+0x208>
   3b7ac:	mov	r1, sl
   3b7b0:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3b7b4:	b	3b73c <flatcc_json_printer_int64_enum_vector_field@@Base+0x138>
   3b7b8:	ldrb	r2, [r4, #25]
   3b7bc:	ldr	r3, [r4, #20]
   3b7c0:	cmp	r2, #0
   3b7c4:	add	r2, r3, #1
   3b7c8:	bne	3b824 <flatcc_json_printer_int64_enum_vector_field@@Base+0x220>
   3b7cc:	mov	r1, #93	; 0x5d
   3b7d0:	str	r2, [r4, #20]
   3b7d4:	strb	r1, [r3]
   3b7d8:	ldrd	r4, [sp]
   3b7dc:	ldrd	r6, [sp, #8]
   3b7e0:	ldrd	r8, [sp, #16]
   3b7e4:	ldr	sl, [sp, #24]
   3b7e8:	add	sp, sp, #28
   3b7ec:	pop	{pc}		; (ldr pc, [sp], #4)
   3b7f0:	ldrd	r4, [sp]
   3b7f4:	ldrd	r6, [sp, #8]
   3b7f8:	ldrd	r8, [sp, #16]
   3b7fc:	ldr	sl, [sp, #24]
   3b800:	ldr	lr, [sp, #28]
   3b804:	add	sp, sp, #32
   3b808:	b	3958c <flatcc_json_printer_int64_vector_field@@Base>
   3b80c:	mov	r0, r3
   3b810:	bl	14594 <memset@plt>
   3b814:	ldr	r3, [r4, #20]
   3b818:	add	sl, r3, sl
   3b81c:	str	sl, [r4, #20]
   3b820:	b	3b73c <flatcc_json_printer_int64_enum_vector_field@@Base+0x138>
   3b824:	mov	r1, #10
   3b828:	str	r2, [r4, #20]
   3b82c:	strb	r1, [r3]
   3b830:	ldrb	r3, [r4, #25]
   3b834:	ldr	r2, [r4, #32]
   3b838:	ldr	r1, [r4, #16]
   3b83c:	ldr	r0, [r4, #20]
   3b840:	sub	r2, r2, #1
   3b844:	mul	r5, r2, r3
   3b848:	str	r2, [r4, #32]
   3b84c:	add	r3, r0, r5
   3b850:	cmp	r1, r3
   3b854:	bcs	3b88c <flatcc_json_printer_int64_enum_vector_field@@Base+0x288>
   3b858:	mov	r1, r5
   3b85c:	mov	r0, r4
   3b860:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3b864:	ldr	r3, [r4, #20]
   3b868:	add	r2, r3, #1
   3b86c:	b	3b7cc <flatcc_json_printer_int64_enum_vector_field@@Base+0x1c8>
   3b870:	add	r1, r3, #1
   3b874:	mov	r2, #10
   3b878:	mov	r0, r4
   3b87c:	str	r1, [r4, #20]
   3b880:	strb	r2, [r3]
   3b884:	bl	31110 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3b888:	b	3b6f8 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   3b88c:	mov	r2, r5
   3b890:	mov	r1, #32
   3b894:	bl	14594 <memset@plt>
   3b898:	ldr	r3, [r4, #20]
   3b89c:	add	r3, r3, r5
   3b8a0:	add	r2, r3, #1
   3b8a4:	b	3b7cc <flatcc_json_printer_int64_enum_vector_field@@Base+0x1c8>

0003b8a8 <flatcc_json_printer_bool_enum_vector_field@@Base>:
   3b8a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3b8ac:	strd	r6, [sp, #8]
   3b8b0:	strd	r8, [sp, #16]
   3b8b4:	str	sl, [sp, #24]
   3b8b8:	str	lr, [sp, #28]
   3b8bc:	ldrb	r8, [r0, #27]
   3b8c0:	ldr	r7, [sp, #32]
   3b8c4:	ldr	r6, [sp, #36]	; 0x24
   3b8c8:	cmp	r8, #0
   3b8cc:	bne	3ba98 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1f0>
   3b8d0:	mov	r5, r3
   3b8d4:	ldr	r3, [r1, #8]
   3b8d8:	add	r2, r2, #2
   3b8dc:	lsl	r2, r2, #1
   3b8e0:	mov	lr, r1
   3b8e4:	cmp	r3, r2
   3b8e8:	ble	3ba80 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d8>
   3b8ec:	ldr	r3, [r1, #4]
   3b8f0:	ldrh	r2, [r3, r2]
   3b8f4:	cmp	r2, #0
   3b8f8:	beq	3ba80 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d8>
   3b8fc:	ldr	r3, [r1]
   3b900:	adds	ip, r3, r2
   3b904:	beq	3ba80 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d8>
   3b908:	ldr	r1, [r1, #16]
   3b90c:	mov	r4, r0
   3b910:	add	r0, r1, #1
   3b914:	cmp	r1, #0
   3b918:	str	r0, [lr, #16]
   3b91c:	beq	3b934 <flatcc_json_printer_bool_enum_vector_field@@Base+0x8c>
   3b920:	ldr	r1, [r4, #20]
   3b924:	mov	r0, #44	; 0x2c
   3b928:	add	lr, r1, #1
   3b92c:	str	lr, [r4, #20]
   3b930:	strb	r0, [r1]
   3b934:	ldr	r3, [r3, r2]
   3b938:	mov	r1, r5
   3b93c:	mov	r2, r7
   3b940:	mov	r0, r4
   3b944:	add	r7, ip, r3
   3b948:	ldr	r8, [ip, r3]
   3b94c:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3b950:	ldr	r2, [r4, #20]
   3b954:	mov	r1, #91	; 0x5b
   3b958:	ldr	r3, [r4, #32]
   3b95c:	cmp	r8, #0
   3b960:	add	r0, r2, #1
   3b964:	add	r3, r3, #1
   3b968:	str	r0, [r4, #20]
   3b96c:	str	r3, [r4, #32]
   3b970:	strb	r1, [r2]
   3b974:	beq	3ba60 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1b8>
   3b978:	ldrb	r1, [r4, #25]
   3b97c:	ldr	r3, [r4, #20]
   3b980:	cmp	r1, #0
   3b984:	bne	3bb18 <flatcc_json_printer_bool_enum_vector_field@@Base+0x270>
   3b988:	ldr	r2, [r4, #16]
   3b98c:	cmp	r2, r3
   3b990:	bhi	3b9a0 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf8>
   3b994:	mov	r0, r4
   3b998:	ldr	r3, [r4, #44]	; 0x2c
   3b99c:	blx	r3
   3b9a0:	ldrb	r1, [r7, #4]
   3b9a4:	mov	r0, r4
   3b9a8:	add	r5, r7, #5
   3b9ac:	blx	r6
   3b9b0:	cmp	r8, #1
   3b9b4:	beq	3ba60 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1b8>
   3b9b8:	add	r3, r8, #4
   3b9bc:	mov	r9, #10
   3b9c0:	mov	r8, #44	; 0x2c
   3b9c4:	add	r7, r7, r3
   3b9c8:	b	3b9fc <flatcc_json_printer_bool_enum_vector_field@@Base+0x154>
   3b9cc:	ldr	r3, [r4, #16]
   3b9d0:	mov	r0, r4
   3b9d4:	ldr	r2, [r4, #20]
   3b9d8:	cmp	r2, r3
   3b9dc:	bcc	3b9e8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
   3b9e0:	ldr	r3, [r4, #44]	; 0x2c
   3b9e4:	blx	r3
   3b9e8:	ldrb	r1, [r5], #1
   3b9ec:	mov	r0, r4
   3b9f0:	blx	r6
   3b9f4:	cmp	r5, r7
   3b9f8:	beq	3ba60 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1b8>
   3b9fc:	ldr	r3, [r4, #20]
   3ba00:	add	r2, r3, #1
   3ba04:	str	r2, [r4, #20]
   3ba08:	strb	r8, [r3]
   3ba0c:	ldrb	r1, [r4, #25]
   3ba10:	cmp	r1, #0
   3ba14:	beq	3b9cc <flatcc_json_printer_bool_enum_vector_field@@Base+0x124>
   3ba18:	ldr	r3, [r4, #20]
   3ba1c:	mov	r1, #32
   3ba20:	mov	r0, r4
   3ba24:	add	r2, r3, #1
   3ba28:	str	r2, [r4, #20]
   3ba2c:	strb	r9, [r3]
   3ba30:	ldrb	r2, [r4, #25]
   3ba34:	ldr	lr, [r4, #16]
   3ba38:	ldr	sl, [r4, #32]
   3ba3c:	ldr	r3, [r4, #20]
   3ba40:	mul	sl, sl, r2
   3ba44:	add	ip, r3, sl
   3ba48:	mov	r2, sl
   3ba4c:	cmp	lr, ip
   3ba50:	bcs	3bab4 <flatcc_json_printer_bool_enum_vector_field@@Base+0x20c>
   3ba54:	mov	r1, sl
   3ba58:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3ba5c:	b	3b9e8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
   3ba60:	ldrb	r2, [r4, #25]
   3ba64:	ldr	r3, [r4, #20]
   3ba68:	cmp	r2, #0
   3ba6c:	add	r2, r3, #1
   3ba70:	bne	3bacc <flatcc_json_printer_bool_enum_vector_field@@Base+0x224>
   3ba74:	mov	r1, #93	; 0x5d
   3ba78:	str	r2, [r4, #20]
   3ba7c:	strb	r1, [r3]
   3ba80:	ldrd	r4, [sp]
   3ba84:	ldrd	r6, [sp, #8]
   3ba88:	ldrd	r8, [sp, #16]
   3ba8c:	ldr	sl, [sp, #24]
   3ba90:	add	sp, sp, #28
   3ba94:	pop	{pc}		; (ldr pc, [sp], #4)
   3ba98:	ldrd	r4, [sp]
   3ba9c:	ldrd	r6, [sp, #8]
   3baa0:	ldrd	r8, [sp, #16]
   3baa4:	ldr	sl, [sp, #24]
   3baa8:	ldr	lr, [sp, #28]
   3baac:	add	sp, sp, #32
   3bab0:	b	39868 <flatcc_json_printer_bool_vector_field@@Base>
   3bab4:	mov	r0, r3
   3bab8:	bl	14594 <memset@plt>
   3babc:	ldr	r3, [r4, #20]
   3bac0:	add	sl, r3, sl
   3bac4:	str	sl, [r4, #20]
   3bac8:	b	3b9e8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
   3bacc:	mov	r1, #10
   3bad0:	str	r2, [r4, #20]
   3bad4:	strb	r1, [r3]
   3bad8:	ldrb	r3, [r4, #25]
   3badc:	ldr	r2, [r4, #32]
   3bae0:	ldr	r1, [r4, #16]
   3bae4:	ldr	r0, [r4, #20]
   3bae8:	sub	r2, r2, #1
   3baec:	mul	r5, r2, r3
   3baf0:	str	r2, [r4, #32]
   3baf4:	add	r3, r0, r5
   3baf8:	cmp	r1, r3
   3bafc:	bcs	3bb34 <flatcc_json_printer_bool_enum_vector_field@@Base+0x28c>
   3bb00:	mov	r1, r5
   3bb04:	mov	r0, r4
   3bb08:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3bb0c:	ldr	r3, [r4, #20]
   3bb10:	add	r2, r3, #1
   3bb14:	b	3ba74 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1cc>
   3bb18:	add	r1, r3, #1
   3bb1c:	mov	r2, #10
   3bb20:	mov	r0, r4
   3bb24:	str	r1, [r4, #20]
   3bb28:	strb	r2, [r3]
   3bb2c:	bl	31110 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3bb30:	b	3b9a0 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf8>
   3bb34:	mov	r2, r5
   3bb38:	mov	r1, #32
   3bb3c:	bl	14594 <memset@plt>
   3bb40:	ldr	r3, [r4, #20]
   3bb44:	add	r3, r3, r5
   3bb48:	add	r2, r3, #1
   3bb4c:	b	3ba74 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1cc>

0003bb50 <flatcc_json_printer_struct_vector_field@@Base>:
   3bb50:	ldr	ip, [r1, #8]
   3bb54:	add	r2, r2, #2
   3bb58:	lsl	r2, r2, #1
   3bb5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3bb60:	strd	r6, [sp, #8]
   3bb64:	strd	r8, [sp, #16]
   3bb68:	strd	sl, [sp, #24]
   3bb6c:	cmp	r2, ip
   3bb70:	str	lr, [sp, #32]
   3bb74:	sub	sp, sp, #4
   3bb78:	ldr	r8, [sp, #44]	; 0x2c
   3bb7c:	ldr	r7, [sp, #48]	; 0x30
   3bb80:	bge	3bd94 <flatcc_json_printer_struct_vector_field@@Base+0x244>
   3bb84:	ldr	ip, [r1, #4]
   3bb88:	ldrh	r2, [ip, r2]
   3bb8c:	cmp	r2, #0
   3bb90:	beq	3bd94 <flatcc_json_printer_struct_vector_field@@Base+0x244>
   3bb94:	ldr	ip, [r1]
   3bb98:	adds	lr, ip, r2
   3bb9c:	beq	3bd94 <flatcc_json_printer_struct_vector_field@@Base+0x244>
   3bba0:	ldr	r4, [r1, #16]
   3bba4:	add	r5, r4, #1
   3bba8:	cmp	r4, #0
   3bbac:	str	r5, [r1, #16]
   3bbb0:	beq	3bbc8 <flatcc_json_printer_struct_vector_field@@Base+0x78>
   3bbb4:	ldr	r1, [r0, #20]
   3bbb8:	mov	r4, #44	; 0x2c
   3bbbc:	add	r5, r1, #1
   3bbc0:	str	r5, [r0, #20]
   3bbc4:	strb	r4, [r1]
   3bbc8:	mov	r1, r3
   3bbcc:	ldr	r3, [ip, r2]
   3bbd0:	mov	r4, r0
   3bbd4:	ldr	r2, [sp, #40]	; 0x28
   3bbd8:	add	r6, lr, r3
   3bbdc:	ldr	r5, [lr, r3]
   3bbe0:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3bbe4:	ldr	r2, [r4, #20]
   3bbe8:	mov	r1, #91	; 0x5b
   3bbec:	ldr	r3, [r4, #32]
   3bbf0:	cmp	r5, #0
   3bbf4:	add	r0, r2, #1
   3bbf8:	add	r3, r3, #1
   3bbfc:	str	r0, [r4, #20]
   3bc00:	str	r3, [r4, #32]
   3bc04:	strb	r1, [r2]
   3bc08:	beq	3bd74 <flatcc_json_printer_struct_vector_field@@Base+0x224>
   3bc0c:	ldrb	r1, [r4, #25]
   3bc10:	ldr	r3, [r4, #20]
   3bc14:	cmp	r1, #0
   3bc18:	bne	3bdb0 <flatcc_json_printer_struct_vector_field@@Base+0x260>
   3bc1c:	ldr	r2, [r4, #16]
   3bc20:	cmp	r2, r3
   3bc24:	bhi	3bc38 <flatcc_json_printer_struct_vector_field@@Base+0xe8>
   3bc28:	mov	r0, r4
   3bc2c:	ldr	r3, [r4, #44]	; 0x2c
   3bc30:	blx	r3
   3bc34:	ldr	r3, [r4, #20]
   3bc38:	add	r1, r3, #1
   3bc3c:	mov	ip, #123	; 0x7b
   3bc40:	ldr	r2, [r4, #32]
   3bc44:	add	r6, r6, #4
   3bc48:	mov	r0, r4
   3bc4c:	str	r1, [r4, #20]
   3bc50:	mov	r1, r6
   3bc54:	add	r2, r2, #1
   3bc58:	str	r2, [r4, #32]
   3bc5c:	strb	ip, [r3]
   3bc60:	blx	r7
   3bc64:	ldrb	r3, [r4, #25]
   3bc68:	cmp	r3, #0
   3bc6c:	bne	3be94 <flatcc_json_printer_struct_vector_field@@Base+0x344>
   3bc70:	ldr	r3, [r4, #20]
   3bc74:	mov	r2, #125	; 0x7d
   3bc78:	cmp	r5, #1
   3bc7c:	sub	r5, r5, #2
   3bc80:	add	r1, r3, #1
   3bc84:	str	r1, [r4, #20]
   3bc88:	strb	r2, [r3]
   3bc8c:	beq	3bd74 <flatcc_json_printer_struct_vector_field@@Base+0x224>
   3bc90:	mov	r9, #44	; 0x2c
   3bc94:	mov	sl, #10
   3bc98:	b	3bd10 <flatcc_json_printer_struct_vector_field@@Base+0x1c0>
   3bc9c:	ldr	r3, [r4, #16]
   3bca0:	ldr	r2, [r4, #20]
   3bca4:	cmp	r2, r3
   3bca8:	bcc	3bcbc <flatcc_json_printer_struct_vector_field@@Base+0x16c>
   3bcac:	mov	r0, r4
   3bcb0:	ldr	r3, [r4, #44]	; 0x2c
   3bcb4:	blx	r3
   3bcb8:	ldr	r2, [r4, #20]
   3bcbc:	add	r0, r2, #1
   3bcc0:	mov	ip, #123	; 0x7b
   3bcc4:	ldr	r3, [r4, #32]
   3bcc8:	mov	r1, r6
   3bccc:	str	r0, [r4, #20]
   3bcd0:	mov	r0, r4
   3bcd4:	add	r3, r3, #1
   3bcd8:	str	r3, [r4, #32]
   3bcdc:	strb	ip, [r2]
   3bce0:	blx	r7
   3bce4:	ldrb	r3, [r4, #25]
   3bce8:	cmp	r3, #0
   3bcec:	bne	3bdd0 <flatcc_json_printer_struct_vector_field@@Base+0x280>
   3bcf0:	ldr	r1, [r4, #20]
   3bcf4:	sub	r5, r5, #1
   3bcf8:	add	r2, r1, #1
   3bcfc:	mov	r3, #125	; 0x7d
   3bd00:	cmn	r5, #1
   3bd04:	str	r2, [r4, #20]
   3bd08:	strb	r3, [r1]
   3bd0c:	beq	3bd74 <flatcc_json_printer_struct_vector_field@@Base+0x224>
   3bd10:	ldr	r3, [r4, #20]
   3bd14:	add	r6, r6, r8
   3bd18:	add	r2, r3, #1
   3bd1c:	str	r2, [r4, #20]
   3bd20:	strb	r9, [r3]
   3bd24:	ldrb	r1, [r4, #25]
   3bd28:	cmp	r1, #0
   3bd2c:	beq	3bc9c <flatcc_json_printer_struct_vector_field@@Base+0x14c>
   3bd30:	ldr	r3, [r4, #20]
   3bd34:	add	r2, r3, #1
   3bd38:	str	r2, [r4, #20]
   3bd3c:	strb	sl, [r3]
   3bd40:	ldrb	r3, [r4, #25]
   3bd44:	ldr	r1, [r4, #16]
   3bd48:	ldr	r2, [r4, #32]
   3bd4c:	ldr	r0, [r4, #20]
   3bd50:	mul	fp, r2, r3
   3bd54:	add	r3, r0, fp
   3bd58:	cmp	r1, r3
   3bd5c:	bcs	3be18 <flatcc_json_printer_struct_vector_field@@Base+0x2c8>
   3bd60:	mov	r1, fp
   3bd64:	mov	r0, r4
   3bd68:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3bd6c:	ldr	r2, [r4, #20]
   3bd70:	b	3bcbc <flatcc_json_printer_struct_vector_field@@Base+0x16c>
   3bd74:	ldrb	r2, [r4, #25]
   3bd78:	ldr	r3, [r4, #20]
   3bd7c:	cmp	r2, #0
   3bd80:	add	r2, r3, #1
   3bd84:	bne	3be48 <flatcc_json_printer_struct_vector_field@@Base+0x2f8>
   3bd88:	mov	r1, #93	; 0x5d
   3bd8c:	str	r2, [r4, #20]
   3bd90:	strb	r1, [r3]
   3bd94:	add	sp, sp, #4
   3bd98:	ldrd	r4, [sp]
   3bd9c:	ldrd	r6, [sp, #8]
   3bda0:	ldrd	r8, [sp, #16]
   3bda4:	ldrd	sl, [sp, #24]
   3bda8:	add	sp, sp, #32
   3bdac:	pop	{pc}		; (ldr pc, [sp], #4)
   3bdb0:	add	r1, r3, #1
   3bdb4:	mov	r2, #10
   3bdb8:	mov	r0, r4
   3bdbc:	str	r1, [r4, #20]
   3bdc0:	strb	r2, [r3]
   3bdc4:	bl	31110 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3bdc8:	ldr	r3, [r4, #20]
   3bdcc:	b	3bc38 <flatcc_json_printer_struct_vector_field@@Base+0xe8>
   3bdd0:	ldr	r3, [r4, #20]
   3bdd4:	add	r2, r3, #1
   3bdd8:	str	r2, [r4, #20]
   3bddc:	strb	sl, [r3]
   3bde0:	ldrb	r1, [r4, #25]
   3bde4:	ldr	r3, [r4, #32]
   3bde8:	ldr	r2, [r4, #16]
   3bdec:	ldr	r0, [r4, #20]
   3bdf0:	sub	r3, r3, #1
   3bdf4:	mul	fp, r3, r1
   3bdf8:	str	r3, [r4, #32]
   3bdfc:	add	r3, r0, fp
   3be00:	cmp	r2, r3
   3be04:	bcs	3be30 <flatcc_json_printer_struct_vector_field@@Base+0x2e0>
   3be08:	mov	r1, fp
   3be0c:	mov	r0, r4
   3be10:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3be14:	b	3bcf0 <flatcc_json_printer_struct_vector_field@@Base+0x1a0>
   3be18:	mov	r2, fp
   3be1c:	mov	r1, #32
   3be20:	bl	14594 <memset@plt>
   3be24:	ldr	r2, [r4, #20]
   3be28:	add	r2, r2, fp
   3be2c:	b	3bcbc <flatcc_json_printer_struct_vector_field@@Base+0x16c>
   3be30:	mov	r1, #32
   3be34:	mov	r2, fp
   3be38:	bl	14594 <memset@plt>
   3be3c:	ldr	r1, [r4, #20]
   3be40:	add	r1, r1, fp
   3be44:	b	3bcf4 <flatcc_json_printer_struct_vector_field@@Base+0x1a4>
   3be48:	mov	r1, #10
   3be4c:	str	r2, [r4, #20]
   3be50:	strb	r1, [r3]
   3be54:	ldrb	r3, [r4, #25]
   3be58:	ldr	r2, [r4, #32]
   3be5c:	ldr	r1, [r4, #16]
   3be60:	ldr	r0, [r4, #20]
   3be64:	sub	r2, r2, #1
   3be68:	mul	r5, r2, r3
   3be6c:	str	r2, [r4, #32]
   3be70:	add	r3, r0, r5
   3be74:	cmp	r1, r3
   3be78:	bcs	3bec0 <flatcc_json_printer_struct_vector_field@@Base+0x370>
   3be7c:	mov	r1, r5
   3be80:	mov	r0, r4
   3be84:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3be88:	ldr	r3, [r4, #20]
   3be8c:	add	r2, r3, #1
   3be90:	b	3bd88 <flatcc_json_printer_struct_vector_field@@Base+0x238>
   3be94:	ldr	r3, [r4, #20]
   3be98:	mov	r2, #10
   3be9c:	mov	r0, r4
   3bea0:	add	r1, r3, #1
   3bea4:	str	r1, [r4, #20]
   3bea8:	strb	r2, [r3]
   3beac:	ldr	r3, [r4, #32]
   3beb0:	sub	r3, r3, #1
   3beb4:	str	r3, [r4, #32]
   3beb8:	bl	31110 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3bebc:	b	3bc70 <flatcc_json_printer_struct_vector_field@@Base+0x120>
   3bec0:	mov	r2, r5
   3bec4:	mov	r1, #32
   3bec8:	bl	14594 <memset@plt>
   3becc:	ldr	r3, [r4, #20]
   3bed0:	add	r3, r3, r5
   3bed4:	add	r2, r3, #1
   3bed8:	b	3bd88 <flatcc_json_printer_struct_vector_field@@Base+0x238>

0003bedc <flatcc_json_printer_string_vector_field@@Base>:
   3bedc:	ldr	ip, [r1, #8]
   3bee0:	add	r2, r2, #2
   3bee4:	lsl	r2, r2, #1
   3bee8:	cmp	ip, r2
   3beec:	bxle	lr
   3bef0:	ldr	ip, [r1, #4]
   3bef4:	ldrh	r2, [ip, r2]
   3bef8:	cmp	r2, #0
   3befc:	bxeq	lr
   3bf00:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3bf04:	strd	r6, [sp, #8]
   3bf08:	str	lr, [sp, #28]
   3bf0c:	ldr	lr, [r1]
   3bf10:	strd	r8, [sp, #16]
   3bf14:	str	sl, [sp, #24]
   3bf18:	adds	r5, lr, r2
   3bf1c:	beq	3c160 <flatcc_json_printer_string_vector_field@@Base+0x284>
   3bf20:	ldr	r4, [r1, #16]
   3bf24:	ldr	ip, [r0, #20]
   3bf28:	cmp	r4, #0
   3bf2c:	add	r4, r4, #1
   3bf30:	str	r4, [r1, #16]
   3bf34:	beq	3bf4c <flatcc_json_printer_string_vector_field@@Base+0x70>
   3bf38:	add	r4, ip, #1
   3bf3c:	mov	r1, #44	; 0x2c
   3bf40:	str	r4, [r0, #20]
   3bf44:	strb	r1, [ip]
   3bf48:	ldr	ip, [r0, #20]
   3bf4c:	mov	r7, r3
   3bf50:	mov	r4, r0
   3bf54:	ldrb	r1, [r0, #25]
   3bf58:	ldr	r3, [lr, r2]
   3bf5c:	cmp	r1, #0
   3bf60:	add	r6, r5, r3
   3bf64:	ldr	r5, [r5, r3]
   3bf68:	bne	3c1f0 <flatcc_json_printer_string_vector_field@@Base+0x314>
   3bf6c:	ldr	r3, [r0, #16]
   3bf70:	cmp	r3, ip
   3bf74:	bls	3c188 <flatcc_json_printer_string_vector_field@@Base+0x2ac>
   3bf78:	mov	r3, #34	; 0x22
   3bf7c:	mov	r1, r7
   3bf80:	strb	r3, [ip]
   3bf84:	ldrb	r3, [r4, #26]
   3bf88:	ldr	r2, [r4, #16]
   3bf8c:	ldr	r0, [r4, #20]
   3bf90:	cmp	r3, #0
   3bf94:	addeq	r0, r0, #1
   3bf98:	ldr	r3, [sp, #32]
   3bf9c:	str	r0, [r4, #20]
   3bfa0:	add	r3, r0, r3
   3bfa4:	cmp	r2, r3
   3bfa8:	ldr	r2, [sp, #32]
   3bfac:	bls	3c178 <flatcc_json_printer_string_vector_field@@Base+0x29c>
   3bfb0:	bl	1451c <memcpy@plt>
   3bfb4:	ldr	r3, [r4, #20]
   3bfb8:	ldr	r2, [sp, #32]
   3bfbc:	add	r3, r3, r2
   3bfc0:	str	r3, [r4, #20]
   3bfc4:	mov	r2, #34	; 0x22
   3bfc8:	mov	lr, #58	; 0x3a
   3bfcc:	mov	ip, #32
   3bfd0:	mov	r1, #91	; 0x5b
   3bfd4:	strb	r2, [r3]
   3bfd8:	ldrb	r3, [r4, #26]
   3bfdc:	ldr	r0, [r4, #20]
   3bfe0:	clz	r3, r3
   3bfe4:	lsr	r3, r3, #5
   3bfe8:	add	r2, r0, r3
   3bfec:	add	r2, r2, #1
   3bff0:	str	r2, [r4, #20]
   3bff4:	strb	lr, [r0, r3]
   3bff8:	ldr	r3, [r4, #20]
   3bffc:	strb	ip, [r3]
   3c000:	ldrb	r3, [r4, #25]
   3c004:	ldr	lr, [r4, #20]
   3c008:	ldr	r2, [r4, #32]
   3c00c:	adds	r3, r3, #0
   3c010:	movne	r3, #1
   3c014:	cmp	r5, #0
   3c018:	add	r0, lr, r3
   3c01c:	add	r0, r0, #1
   3c020:	add	r2, r2, #1
   3c024:	str	r0, [r4, #20]
   3c028:	str	r2, [r4, #32]
   3c02c:	strb	r1, [lr, r3]
   3c030:	beq	3c140 <flatcc_json_printer_string_vector_field@@Base+0x264>
   3c034:	ldrb	r1, [r4, #25]
   3c038:	ldr	r3, [r4, #20]
   3c03c:	cmp	r1, #0
   3c040:	bne	3c198 <flatcc_json_printer_string_vector_field@@Base+0x2bc>
   3c044:	ldr	r2, [r4, #16]
   3c048:	cmp	r2, r3
   3c04c:	bhi	3c05c <flatcc_json_printer_string_vector_field@@Base+0x180>
   3c050:	mov	r0, r4
   3c054:	ldr	r3, [r4, #44]	; 0x2c
   3c058:	blx	r3
   3c05c:	ldr	r3, [r6, #4]
   3c060:	mov	r0, r4
   3c064:	sub	r7, r5, #2
   3c068:	add	r3, r3, #4
   3c06c:	add	r1, r6, r3
   3c070:	ldr	r2, [r6, r3]
   3c074:	add	r1, r1, #4
   3c078:	bl	32250 <flatcc_json_parser_struct_as_root@@Base+0x2154>
   3c07c:	cmp	r5, #1
   3c080:	beq	3c140 <flatcc_json_printer_string_vector_field@@Base+0x264>
   3c084:	add	r6, r6, #8
   3c088:	mov	r8, #44	; 0x2c
   3c08c:	mov	r9, #10
   3c090:	b	3c0d8 <flatcc_json_printer_string_vector_field@@Base+0x1fc>
   3c094:	ldr	r3, [r4, #16]
   3c098:	mov	r0, r4
   3c09c:	ldr	r2, [r4, #20]
   3c0a0:	cmp	r2, r3
   3c0a4:	bcc	3c0b0 <flatcc_json_printer_string_vector_field@@Base+0x1d4>
   3c0a8:	ldr	r3, [r4, #44]	; 0x2c
   3c0ac:	blx	r3
   3c0b0:	ldr	r3, [r5]
   3c0b4:	sub	r7, r7, #1
   3c0b8:	mov	r0, r4
   3c0bc:	add	r6, r6, #4
   3c0c0:	add	r1, r5, r3
   3c0c4:	ldr	r2, [r5, r3]
   3c0c8:	add	r1, r1, #4
   3c0cc:	bl	32250 <flatcc_json_parser_struct_as_root@@Base+0x2154>
   3c0d0:	cmn	r7, #1
   3c0d4:	beq	3c140 <flatcc_json_printer_string_vector_field@@Base+0x264>
   3c0d8:	ldr	r3, [r4, #20]
   3c0dc:	mov	r5, r6
   3c0e0:	add	r2, r3, #1
   3c0e4:	str	r2, [r4, #20]
   3c0e8:	strb	r8, [r3]
   3c0ec:	ldrb	r1, [r4, #25]
   3c0f0:	cmp	r1, #0
   3c0f4:	beq	3c094 <flatcc_json_printer_string_vector_field@@Base+0x1b8>
   3c0f8:	ldr	r3, [r4, #20]
   3c0fc:	mov	r1, #32
   3c100:	mov	r0, r4
   3c104:	add	r2, r3, #1
   3c108:	str	r2, [r4, #20]
   3c10c:	strb	r9, [r3]
   3c110:	ldrb	r2, [r4, #25]
   3c114:	ldr	lr, [r4, #16]
   3c118:	ldr	sl, [r4, #32]
   3c11c:	ldr	r3, [r4, #20]
   3c120:	mul	sl, sl, r2
   3c124:	add	ip, r3, sl
   3c128:	mov	r2, sl
   3c12c:	cmp	lr, ip
   3c130:	bcs	3c1d8 <flatcc_json_printer_string_vector_field@@Base+0x2fc>
   3c134:	mov	r1, sl
   3c138:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3c13c:	b	3c0b0 <flatcc_json_printer_string_vector_field@@Base+0x1d4>
   3c140:	ldrb	r2, [r4, #25]
   3c144:	ldr	r3, [r4, #20]
   3c148:	cmp	r2, #0
   3c14c:	add	r2, r3, #1
   3c150:	bne	3c234 <flatcc_json_printer_string_vector_field@@Base+0x358>
   3c154:	mov	r1, #93	; 0x5d
   3c158:	str	r2, [r4, #20]
   3c15c:	strb	r1, [r3]
   3c160:	ldrd	r4, [sp]
   3c164:	ldrd	r6, [sp, #8]
   3c168:	ldrd	r8, [sp, #16]
   3c16c:	ldr	sl, [sp, #24]
   3c170:	add	sp, sp, #28
   3c174:	pop	{pc}		; (ldr pc, [sp], #4)
   3c178:	mov	r0, r4
   3c17c:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3c180:	ldr	r3, [r4, #20]
   3c184:	b	3bfc4 <flatcc_json_printer_string_vector_field@@Base+0xe8>
   3c188:	ldr	r3, [r0, #44]	; 0x2c
   3c18c:	blx	r3
   3c190:	ldr	ip, [r4, #20]
   3c194:	b	3bf78 <flatcc_json_printer_string_vector_field@@Base+0x9c>
   3c198:	add	r1, r3, #1
   3c19c:	mov	r2, #10
   3c1a0:	str	r1, [r4, #20]
   3c1a4:	strb	r2, [r3]
   3c1a8:	ldrb	r3, [r4, #25]
   3c1ac:	ldr	r2, [r4, #16]
   3c1b0:	ldr	r7, [r4, #32]
   3c1b4:	ldr	r0, [r4, #20]
   3c1b8:	mul	r7, r7, r3
   3c1bc:	add	r3, r0, r7
   3c1c0:	cmp	r2, r3
   3c1c4:	bcs	3c2b8 <flatcc_json_printer_string_vector_field@@Base+0x3dc>
   3c1c8:	mov	r1, r7
   3c1cc:	mov	r0, r4
   3c1d0:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3c1d4:	b	3c05c <flatcc_json_printer_string_vector_field@@Base+0x180>
   3c1d8:	mov	r0, r3
   3c1dc:	bl	14594 <memset@plt>
   3c1e0:	ldr	r3, [r4, #20]
   3c1e4:	add	sl, r3, sl
   3c1e8:	str	sl, [r4, #20]
   3c1ec:	b	3c0b0 <flatcc_json_printer_string_vector_field@@Base+0x1d4>
   3c1f0:	add	r2, ip, #1
   3c1f4:	mov	r3, #10
   3c1f8:	str	r2, [r0, #20]
   3c1fc:	strb	r3, [ip]
   3c200:	ldrb	r8, [r0, #25]
   3c204:	ldr	ip, [r4, #32]
   3c208:	ldr	r2, [r0, #16]
   3c20c:	ldr	r0, [r0, #20]
   3c210:	mul	r8, ip, r8
   3c214:	add	r3, r0, r8
   3c218:	cmp	r2, r3
   3c21c:	bcs	3c280 <flatcc_json_printer_string_vector_field@@Base+0x3a4>
   3c220:	mov	r1, r8
   3c224:	mov	r0, r4
   3c228:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3c22c:	ldr	ip, [r4, #20]
   3c230:	b	3bf78 <flatcc_json_printer_string_vector_field@@Base+0x9c>
   3c234:	mov	r1, #10
   3c238:	str	r2, [r4, #20]
   3c23c:	strb	r1, [r3]
   3c240:	ldrb	r3, [r4, #25]
   3c244:	ldr	r2, [r4, #32]
   3c248:	ldr	r1, [r4, #16]
   3c24c:	ldr	r0, [r4, #20]
   3c250:	sub	r2, r2, #1
   3c254:	mul	r5, r2, r3
   3c258:	str	r2, [r4, #32]
   3c25c:	add	r3, r0, r5
   3c260:	cmp	r1, r3
   3c264:	bcs	3c29c <flatcc_json_printer_string_vector_field@@Base+0x3c0>
   3c268:	mov	r1, r5
   3c26c:	mov	r0, r4
   3c270:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3c274:	ldr	r3, [r4, #20]
   3c278:	add	r2, r3, #1
   3c27c:	b	3c154 <flatcc_json_printer_string_vector_field@@Base+0x278>
   3c280:	mov	r2, r8
   3c284:	mov	r1, #32
   3c288:	bl	14594 <memset@plt>
   3c28c:	ldr	ip, [r4, #20]
   3c290:	add	ip, ip, r8
   3c294:	str	ip, [r4, #20]
   3c298:	b	3bf78 <flatcc_json_printer_string_vector_field@@Base+0x9c>
   3c29c:	mov	r2, r5
   3c2a0:	mov	r1, #32
   3c2a4:	bl	14594 <memset@plt>
   3c2a8:	ldr	r3, [r4, #20]
   3c2ac:	add	r3, r3, r5
   3c2b0:	add	r2, r3, #1
   3c2b4:	b	3c154 <flatcc_json_printer_string_vector_field@@Base+0x278>
   3c2b8:	mov	r2, r7
   3c2bc:	mov	r1, ip
   3c2c0:	bl	14594 <memset@plt>
   3c2c4:	ldr	r3, [r4, #20]
   3c2c8:	add	r7, r3, r7
   3c2cc:	str	r7, [r4, #20]
   3c2d0:	b	3c05c <flatcc_json_printer_string_vector_field@@Base+0x180>

0003c2d4 <flatcc_json_printer_table_vector_field@@Base>:
   3c2d4:	ldr	ip, [r1, #8]
   3c2d8:	add	r2, r2, #2
   3c2dc:	lsl	r2, r2, #1
   3c2e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3c2e4:	strd	r6, [sp, #8]
   3c2e8:	strd	r8, [sp, #16]
   3c2ec:	strd	sl, [sp, #24]
   3c2f0:	cmp	ip, r2
   3c2f4:	str	lr, [sp, #32]
   3c2f8:	sub	sp, sp, #36	; 0x24
   3c2fc:	ldr	r8, [sp, #76]	; 0x4c
   3c300:	ble	3c458 <flatcc_json_printer_table_vector_field@@Base+0x184>
   3c304:	ldr	ip, [r1, #4]
   3c308:	ldrh	r2, [ip, r2]
   3c30c:	cmp	r2, #0
   3c310:	beq	3c458 <flatcc_json_printer_table_vector_field@@Base+0x184>
   3c314:	ldr	lr, [r1]
   3c318:	adds	r9, lr, r2
   3c31c:	beq	3c458 <flatcc_json_printer_table_vector_field@@Base+0x184>
   3c320:	ldr	r4, [r1, #16]
   3c324:	ldr	ip, [r0, #20]
   3c328:	cmp	r4, #0
   3c32c:	add	r4, r4, #1
   3c330:	str	r4, [r1, #16]
   3c334:	beq	3c34c <flatcc_json_printer_table_vector_field@@Base+0x78>
   3c338:	add	r5, ip, #1
   3c33c:	mov	r4, #44	; 0x2c
   3c340:	str	r5, [r0, #20]
   3c344:	strb	r4, [ip]
   3c348:	ldr	ip, [r0, #20]
   3c34c:	mov	r6, r1
   3c350:	mov	r5, r3
   3c354:	ldrb	r1, [r0, #25]
   3c358:	mov	r4, r0
   3c35c:	ldr	r3, [lr, r2]
   3c360:	cmp	r1, #0
   3c364:	add	r7, r9, r3
   3c368:	ldr	fp, [r9, r3]
   3c36c:	bne	3c494 <flatcc_json_printer_table_vector_field@@Base+0x1c0>
   3c370:	ldr	r3, [r0, #16]
   3c374:	cmp	r3, ip
   3c378:	bls	3c484 <flatcc_json_printer_table_vector_field@@Base+0x1b0>
   3c37c:	mov	r3, #34	; 0x22
   3c380:	mov	r1, r5
   3c384:	strb	r3, [ip]
   3c388:	ldrb	r3, [r4, #26]
   3c38c:	ldr	r2, [r4, #16]
   3c390:	ldr	r0, [r4, #20]
   3c394:	cmp	r3, #0
   3c398:	addeq	r0, r0, #1
   3c39c:	ldr	r3, [sp, #72]	; 0x48
   3c3a0:	str	r0, [r4, #20]
   3c3a4:	add	r3, r0, r3
   3c3a8:	cmp	r2, r3
   3c3ac:	ldr	r2, [sp, #72]	; 0x48
   3c3b0:	bls	3c474 <flatcc_json_printer_table_vector_field@@Base+0x1a0>
   3c3b4:	bl	1451c <memcpy@plt>
   3c3b8:	ldr	r3, [r4, #20]
   3c3bc:	ldr	r2, [sp, #72]	; 0x48
   3c3c0:	add	r3, r3, r2
   3c3c4:	str	r3, [r4, #20]
   3c3c8:	mov	r2, #34	; 0x22
   3c3cc:	mov	ip, #58	; 0x3a
   3c3d0:	mov	r9, #32
   3c3d4:	mov	r0, #91	; 0x5b
   3c3d8:	strb	r2, [r3]
   3c3dc:	ldrb	r3, [r4, #26]
   3c3e0:	ldr	r1, [r4, #20]
   3c3e4:	clz	r3, r3
   3c3e8:	lsr	r3, r3, #5
   3c3ec:	add	r2, r1, r3
   3c3f0:	add	r2, r2, #1
   3c3f4:	str	r2, [r4, #20]
   3c3f8:	strb	ip, [r1, r3]
   3c3fc:	ldr	r3, [r4, #20]
   3c400:	strb	r9, [r3]
   3c404:	ldrb	r3, [r4, #25]
   3c408:	ldr	ip, [r4, #20]
   3c40c:	ldr	r2, [r4, #32]
   3c410:	adds	r3, r3, #0
   3c414:	movne	r3, #1
   3c418:	cmp	fp, #0
   3c41c:	add	r1, ip, r3
   3c420:	add	r1, r1, #1
   3c424:	add	r2, r2, #1
   3c428:	str	r1, [r4, #20]
   3c42c:	str	r2, [r4, #32]
   3c430:	strb	r0, [ip, r3]
   3c434:	bne	3c524 <flatcc_json_printer_table_vector_field@@Base+0x250>
   3c438:	ldr	r3, [r4, #20]
   3c43c:	add	r2, r3, #1
   3c440:	ldrb	r1, [r4, #25]
   3c444:	cmp	r1, #0
   3c448:	bne	3c4d8 <flatcc_json_printer_table_vector_field@@Base+0x204>
   3c44c:	mov	r1, #93	; 0x5d
   3c450:	str	r2, [r4, #20]
   3c454:	strb	r1, [r3]
   3c458:	add	sp, sp, #36	; 0x24
   3c45c:	ldrd	r4, [sp]
   3c460:	ldrd	r6, [sp, #8]
   3c464:	ldrd	r8, [sp, #16]
   3c468:	ldrd	sl, [sp, #24]
   3c46c:	add	sp, sp, #32
   3c470:	pop	{pc}		; (ldr pc, [sp], #4)
   3c474:	mov	r0, r4
   3c478:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3c47c:	ldr	r3, [r4, #20]
   3c480:	b	3c3c8 <flatcc_json_printer_table_vector_field@@Base+0xf4>
   3c484:	ldr	r3, [r0, #44]	; 0x2c
   3c488:	blx	r3
   3c48c:	ldr	ip, [r4, #20]
   3c490:	b	3c37c <flatcc_json_printer_table_vector_field@@Base+0xa8>
   3c494:	add	r2, ip, #1
   3c498:	mov	r3, #10
   3c49c:	str	r2, [r0, #20]
   3c4a0:	strb	r3, [ip]
   3c4a4:	ldrb	r3, [r0, #25]
   3c4a8:	ldr	ip, [r4, #32]
   3c4ac:	ldr	r2, [r0, #16]
   3c4b0:	ldr	r0, [r0, #20]
   3c4b4:	mul	r9, ip, r3
   3c4b8:	add	r3, r0, r9
   3c4bc:	cmp	r2, r3
   3c4c0:	bcs	3c6e0 <flatcc_json_printer_table_vector_field@@Base+0x40c>
   3c4c4:	mov	r1, r9
   3c4c8:	mov	r0, r4
   3c4cc:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3c4d0:	ldr	ip, [r4, #20]
   3c4d4:	b	3c37c <flatcc_json_printer_table_vector_field@@Base+0xa8>
   3c4d8:	mov	r1, #10
   3c4dc:	str	r2, [r4, #20]
   3c4e0:	strb	r1, [r3]
   3c4e4:	ldrb	r3, [r4, #25]
   3c4e8:	ldr	r2, [r4, #32]
   3c4ec:	ldr	r1, [r4, #16]
   3c4f0:	ldr	r0, [r4, #20]
   3c4f4:	sub	r2, r2, #1
   3c4f8:	mul	r5, r2, r3
   3c4fc:	str	r2, [r4, #32]
   3c500:	add	r3, r0, r5
   3c504:	cmp	r1, r3
   3c508:	bcs	3c6fc <flatcc_json_printer_table_vector_field@@Base+0x428>
   3c50c:	mov	r1, r5
   3c510:	mov	r0, r4
   3c514:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3c518:	ldr	r3, [r4, #20]
   3c51c:	add	r2, r3, #1
   3c520:	b	3c44c <flatcc_json_printer_table_vector_field@@Base+0x178>
   3c524:	ldr	r2, [r6, #12]
   3c528:	add	r5, r7, #4
   3c52c:	ldr	r3, [r4, #20]
   3c530:	subs	r2, r2, #1
   3c534:	beq	3c718 <flatcc_json_printer_table_vector_field@@Base+0x444>
   3c538:	ldr	r1, [r4, #32]
   3c53c:	add	sl, r3, #1
   3c540:	mov	r0, #123	; 0x7b
   3c544:	mov	lr, #0
   3c548:	ldr	ip, [r7, #4]
   3c54c:	str	sl, [r4, #20]
   3c550:	add	r1, r1, #1
   3c554:	str	r1, [r4, #32]
   3c558:	add	r1, sp, #12
   3c55c:	strb	r0, [r3]
   3c560:	add	r3, r5, ip
   3c564:	mov	r0, r4
   3c568:	str	r2, [sp, #24]
   3c56c:	str	lr, [sp, #28]
   3c570:	ldr	r2, [r5, ip]
   3c574:	str	r3, [sp, #12]
   3c578:	sub	r3, r3, r2
   3c57c:	ldrh	r2, [r3]
   3c580:	str	r3, [sp, #16]
   3c584:	str	r2, [sp, #20]
   3c588:	blx	r8
   3c58c:	ldrb	r3, [r4, #25]
   3c590:	cmp	r3, #0
   3c594:	ldr	r3, [r4, #20]
   3c598:	bne	3c72c <flatcc_json_printer_table_vector_field@@Base+0x458>
   3c59c:	add	r1, r3, #1
   3c5a0:	mov	r2, #125	; 0x7d
   3c5a4:	str	r1, [r4, #20]
   3c5a8:	strb	r2, [r3]
   3c5ac:	ldr	r3, [r4, #20]
   3c5b0:	sub	fp, fp, #1
   3c5b4:	mov	r7, #44	; 0x2c
   3c5b8:	mov	sl, #123	; 0x7b
   3c5bc:	mov	r9, #0
   3c5c0:	b	3c638 <flatcc_json_printer_table_vector_field@@Base+0x364>
   3c5c4:	ldr	lr, [r4, #20]
   3c5c8:	add	r1, sp, #12
   3c5cc:	ldr	r3, [r4, #32]
   3c5d0:	ldr	ip, [r5]
   3c5d4:	add	r0, lr, #1
   3c5d8:	add	r3, r3, #1
   3c5dc:	str	r0, [r4, #20]
   3c5e0:	mov	r0, r4
   3c5e4:	str	r3, [r4, #32]
   3c5e8:	add	r3, r5, ip
   3c5ec:	strb	sl, [lr]
   3c5f0:	str	r2, [sp, #24]
   3c5f4:	str	r9, [sp, #28]
   3c5f8:	ldr	r2, [r5, ip]
   3c5fc:	str	r3, [sp, #12]
   3c600:	sub	r3, r3, r2
   3c604:	ldrh	r2, [r3]
   3c608:	str	r3, [sp, #16]
   3c60c:	str	r2, [sp, #20]
   3c610:	blx	r8
   3c614:	ldrb	r3, [r4, #25]
   3c618:	cmp	r3, #0
   3c61c:	bne	3c674 <flatcc_json_printer_table_vector_field@@Base+0x3a0>
   3c620:	ldr	r1, [r4, #20]
   3c624:	add	r2, r1, #1
   3c628:	mov	r3, #125	; 0x7d
   3c62c:	str	r2, [r4, #20]
   3c630:	strb	r3, [r1]
   3c634:	ldr	r3, [r4, #20]
   3c638:	sub	fp, fp, #1
   3c63c:	add	r2, r3, #1
   3c640:	cmn	fp, #1
   3c644:	beq	3c440 <flatcc_json_printer_table_vector_field@@Base+0x16c>
   3c648:	str	r2, [r4, #20]
   3c64c:	add	r5, r5, #4
   3c650:	strb	r7, [r3]
   3c654:	ldr	r3, [r6, #12]
   3c658:	subs	r2, r3, #1
   3c65c:	bne	3c5c4 <flatcc_json_printer_table_vector_field@@Base+0x2f0>
   3c660:	ldr	r3, [r4, #36]	; 0x24
   3c664:	cmp	r3, #0
   3c668:	moveq	r3, #2
   3c66c:	streq	r3, [r4, #36]	; 0x24
   3c670:	b	3c634 <flatcc_json_printer_table_vector_field@@Base+0x360>
   3c674:	ldr	r3, [r4, #20]
   3c678:	mov	r2, #10
   3c67c:	add	r1, r3, #1
   3c680:	str	r1, [r4, #20]
   3c684:	strb	r2, [r3]
   3c688:	ldrb	r1, [r4, #25]
   3c68c:	ldr	r2, [r4, #32]
   3c690:	ldr	ip, [r4, #16]
   3c694:	ldr	r0, [r4, #20]
   3c698:	sub	r2, r2, #1
   3c69c:	mul	r3, r2, r1
   3c6a0:	str	r2, [r4, #32]
   3c6a4:	add	r2, r0, r3
   3c6a8:	cmp	ip, r2
   3c6ac:	bcs	3c6c0 <flatcc_json_printer_table_vector_field@@Base+0x3ec>
   3c6b0:	mov	r1, r3
   3c6b4:	mov	r0, r4
   3c6b8:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3c6bc:	b	3c620 <flatcc_json_printer_table_vector_field@@Base+0x34c>
   3c6c0:	mov	r2, r3
   3c6c4:	mov	r1, #32
   3c6c8:	str	r3, [sp, #4]
   3c6cc:	bl	14594 <memset@plt>
   3c6d0:	ldr	r3, [sp, #4]
   3c6d4:	ldr	r1, [r4, #20]
   3c6d8:	add	r1, r1, r3
   3c6dc:	b	3c624 <flatcc_json_printer_table_vector_field@@Base+0x350>
   3c6e0:	mov	r2, r9
   3c6e4:	mov	r1, #32
   3c6e8:	bl	14594 <memset@plt>
   3c6ec:	ldr	ip, [r4, #20]
   3c6f0:	add	ip, ip, r9
   3c6f4:	str	ip, [r4, #20]
   3c6f8:	b	3c37c <flatcc_json_printer_table_vector_field@@Base+0xa8>
   3c6fc:	mov	r2, r5
   3c700:	mov	r1, #32
   3c704:	bl	14594 <memset@plt>
   3c708:	ldr	r3, [r4, #20]
   3c70c:	add	r3, r3, r5
   3c710:	add	r2, r3, #1
   3c714:	b	3c44c <flatcc_json_printer_table_vector_field@@Base+0x178>
   3c718:	ldr	r2, [r4, #36]	; 0x24
   3c71c:	cmp	r2, #0
   3c720:	moveq	r2, #2
   3c724:	streq	r2, [r4, #36]	; 0x24
   3c728:	b	3c5b0 <flatcc_json_printer_table_vector_field@@Base+0x2dc>
   3c72c:	add	r1, r3, #1
   3c730:	mov	r2, #10
   3c734:	str	r1, [r4, #20]
   3c738:	strb	r2, [r3]
   3c73c:	ldrb	r3, [r4, #25]
   3c740:	ldr	r2, [r4, #32]
   3c744:	ldr	r1, [r4, #16]
   3c748:	ldr	r0, [r4, #20]
   3c74c:	sub	r2, r2, #1
   3c750:	mul	r7, r2, r3
   3c754:	str	r2, [r4, #32]
   3c758:	add	r3, r0, r7
   3c75c:	cmp	r1, r3
   3c760:	bcs	3c778 <flatcc_json_printer_table_vector_field@@Base+0x4a4>
   3c764:	mov	r1, r7
   3c768:	mov	r0, r4
   3c76c:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3c770:	ldr	r3, [r4, #20]
   3c774:	b	3c59c <flatcc_json_printer_table_vector_field@@Base+0x2c8>
   3c778:	mov	r1, r9
   3c77c:	mov	r2, r7
   3c780:	bl	14594 <memset@plt>
   3c784:	ldr	r3, [r4, #20]
   3c788:	add	r3, r3, r7
   3c78c:	b	3c59c <flatcc_json_printer_table_vector_field@@Base+0x2c8>

0003c790 <flatcc_json_printer_union_vector_field@@Base>:
   3c790:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3c794:	mov	r5, r1
   3c798:	mov	r4, r0
   3c79c:	ldr	r1, [r1, #8]
   3c7a0:	strd	r6, [sp, #8]
   3c7a4:	strd	r8, [sp, #16]
   3c7a8:	mov	r9, r2
   3c7ac:	add	r2, r2, #1
   3c7b0:	lsl	r2, r2, #1
   3c7b4:	strd	sl, [sp, #24]
   3c7b8:	mov	fp, r3
   3c7bc:	str	lr, [sp, #32]
   3c7c0:	sub	sp, sp, #140	; 0x8c
   3c7c4:	cmp	r2, r1
   3c7c8:	ldr	r6, [sp, #176]	; 0xb0
   3c7cc:	movge	r7, #0
   3c7d0:	bge	3c7e8 <flatcc_json_printer_union_vector_field@@Base+0x58>
   3c7d4:	ldr	r3, [r5, #4]
   3c7d8:	ldrh	r7, [r3, r2]
   3c7dc:	cmp	r7, #0
   3c7e0:	ldrne	r3, [r5]
   3c7e4:	addne	r7, r3, r7
   3c7e8:	add	r2, r2, #2
   3c7ec:	ldr	r3, [r5, #12]
   3c7f0:	cmp	r2, r1
   3c7f4:	bge	3c9a4 <flatcc_json_printer_union_vector_field@@Base+0x214>
   3c7f8:	ldr	r1, [r5, #4]
   3c7fc:	ldrh	r8, [r1, r2]
   3c800:	cmp	r8, #0
   3c804:	beq	3c9a4 <flatcc_json_printer_union_vector_field@@Base+0x214>
   3c808:	ldr	r2, [r5]
   3c80c:	cmp	r6, #100	; 0x64
   3c810:	add	sl, r2, r8
   3c814:	str	r2, [sp, #12]
   3c818:	str	r3, [sp, #20]
   3c81c:	bgt	3c9b0 <flatcc_json_printer_union_vector_field@@Base+0x220>
   3c820:	add	r3, sp, #28
   3c824:	mov	r2, r6
   3c828:	mov	r0, r3
   3c82c:	mov	r1, fp
   3c830:	bl	1451c <memcpy@plt>
   3c834:	ldr	r2, [pc, #720]	; 3cb0c <flatcc_json_printer_union_vector_field@@Base+0x37c>
   3c838:	mov	r3, r0
   3c83c:	add	r1, r0, r6
   3c840:	cmp	sl, #0
   3c844:	cmpne	r7, #0
   3c848:	add	r2, pc, r2
   3c84c:	ldr	r0, [r2]
   3c850:	ldrb	r2, [r2, #4]
   3c854:	str	r0, [r3, r6]
   3c858:	strb	r2, [r1, #4]
   3c85c:	bne	3c87c <flatcc_json_printer_union_vector_field@@Base+0xec>
   3c860:	add	sp, sp, #140	; 0x8c
   3c864:	ldrd	r4, [sp]
   3c868:	ldrd	r6, [sp, #8]
   3c86c:	ldrd	r8, [sp, #16]
   3c870:	ldrd	sl, [sp, #24]
   3c874:	add	sp, sp, #32
   3c878:	pop	{pc}		; (ldr pc, [sp], #4)
   3c87c:	ldr	r2, [sp, #180]	; 0xb4
   3c880:	add	r0, r6, #5
   3c884:	mov	r1, r5
   3c888:	stm	sp, {r0, r2}
   3c88c:	sub	r2, r9, #1
   3c890:	mov	r0, r4
   3c894:	bl	3a0d8 <flatcc_json_printer_utype_enum_vector_field@@Base>
   3c898:	ldr	r3, [r5, #16]
   3c89c:	add	r2, r3, #1
   3c8a0:	cmp	r3, #0
   3c8a4:	str	r2, [r5, #16]
   3c8a8:	beq	3c8c0 <flatcc_json_printer_union_vector_field@@Base+0x130>
   3c8ac:	ldr	r3, [r4, #20]
   3c8b0:	mov	r2, #44	; 0x2c
   3c8b4:	add	r1, r3, #1
   3c8b8:	str	r1, [r4, #20]
   3c8bc:	strb	r2, [r3]
   3c8c0:	ldr	r3, [sp, #12]
   3c8c4:	mov	r2, r6
   3c8c8:	mov	r1, fp
   3c8cc:	mov	r0, r4
   3c8d0:	ldr	r5, [r7]
   3c8d4:	ldr	r3, [r3, r8]
   3c8d8:	add	r6, sl, r3
   3c8dc:	ldr	r8, [sl, r3]
   3c8e0:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3c8e4:	ldr	r2, [r4, #20]
   3c8e8:	mov	r1, #91	; 0x5b
   3c8ec:	ldr	r3, [r4, #32]
   3c8f0:	cmp	r8, #0
   3c8f4:	add	r0, r2, #1
   3c8f8:	add	r3, r3, #1
   3c8fc:	str	r0, [r4, #20]
   3c900:	str	r3, [r4, #32]
   3c904:	strb	r1, [r2]
   3c908:	beq	3c9e8 <flatcc_json_printer_union_vector_field@@Base+0x258>
   3c90c:	add	r7, r7, r5
   3c910:	add	r6, r6, #4
   3c914:	ldrb	r3, [r7, #4]
   3c918:	cmp	r3, #0
   3c91c:	beq	3caa0 <flatcc_json_printer_union_vector_field@@Base+0x310>
   3c920:	add	r1, sp, #16
   3c924:	mov	r0, r4
   3c928:	str	r6, [sp, #16]
   3c92c:	strb	r3, [sp, #24]
   3c930:	ldr	r3, [sp, #184]	; 0xb8
   3c934:	blx	r3
   3c938:	add	r8, r8, #3
   3c93c:	add	r5, r7, #4
   3c940:	mov	sl, #44	; 0x2c
   3c944:	add	r7, r7, r8
   3c948:	mov	r9, #110	; 0x6e
   3c94c:	mov	r8, #117	; 0x75
   3c950:	ldr	r3, [r4, #20]
   3c954:	cmp	r5, r7
   3c958:	add	r1, r3, #1
   3c95c:	beq	3c9f0 <flatcc_json_printer_union_vector_field@@Base+0x260>
   3c960:	ldrb	r2, [r5, #1]!
   3c964:	add	r6, r6, #4
   3c968:	str	r1, [r4, #20]
   3c96c:	strb	sl, [r3]
   3c970:	cmp	r2, #0
   3c974:	beq	3ca0c <flatcc_json_printer_union_vector_field@@Base+0x27c>
   3c978:	add	r1, sp, #16
   3c97c:	mov	r0, r4
   3c980:	ldr	r3, [sp, #184]	; 0xb8
   3c984:	str	r6, [sp, #16]
   3c988:	strb	r2, [sp, #24]
   3c98c:	blx	r3
   3c990:	ldr	r3, [r4, #20]
   3c994:	cmp	r5, r7
   3c998:	add	r1, r3, #1
   3c99c:	bne	3c960 <flatcc_json_printer_union_vector_field@@Base+0x1d0>
   3c9a0:	b	3c9f0 <flatcc_json_printer_union_vector_field@@Base+0x260>
   3c9a4:	cmp	r6, #100	; 0x64
   3c9a8:	str	r3, [sp, #20]
   3c9ac:	ble	3c860 <flatcc_json_printer_union_vector_field@@Base+0xd0>
   3c9b0:	ldr	r3, [r4, #36]	; 0x24
   3c9b4:	movw	r2, #843	; 0x34b
   3c9b8:	ldr	r1, [pc, #336]	; 3cb10 <flatcc_json_printer_union_vector_field@@Base+0x380>
   3c9bc:	ldr	r0, [pc, #336]	; 3cb14 <flatcc_json_printer_union_vector_field@@Base+0x384>
   3c9c0:	cmp	r3, #0
   3c9c4:	moveq	r3, #1
   3c9c8:	add	r1, pc, r1
   3c9cc:	streq	r3, [r4, #36]	; 0x24
   3c9d0:	ldr	r3, [pc, #320]	; 3cb18 <flatcc_json_printer_union_vector_field@@Base+0x388>
   3c9d4:	add	r0, pc, r0
   3c9d8:	add	r3, pc, r3
   3c9dc:	add	r3, r3, #1776	; 0x6f0
   3c9e0:	add	r3, r3, #8
   3c9e4:	bl	145e8 <__assert_fail@plt>
   3c9e8:	ldr	r3, [r4, #20]
   3c9ec:	add	r1, r3, #1
   3c9f0:	ldrb	r2, [r4, #25]
   3c9f4:	cmp	r2, #0
   3c9f8:	bne	3ca54 <flatcc_json_printer_union_vector_field@@Base+0x2c4>
   3c9fc:	mov	r2, #93	; 0x5d
   3ca00:	str	r1, [r4, #20]
   3ca04:	strb	r2, [r3]
   3ca08:	b	3c860 <flatcc_json_printer_union_vector_field@@Base+0xd0>
   3ca0c:	ldr	r3, [r4, #20]
   3ca10:	mov	r2, #108	; 0x6c
   3ca14:	add	r1, r3, #1
   3ca18:	str	r1, [r4, #20]
   3ca1c:	strb	r9, [r3]
   3ca20:	ldr	r3, [r4, #20]
   3ca24:	add	r1, r3, #1
   3ca28:	str	r1, [r4, #20]
   3ca2c:	strb	r8, [r3]
   3ca30:	ldr	r3, [r4, #20]
   3ca34:	add	r1, r3, #1
   3ca38:	str	r1, [r4, #20]
   3ca3c:	strb	r2, [r3]
   3ca40:	ldr	r3, [r4, #20]
   3ca44:	add	r1, r3, #1
   3ca48:	str	r1, [r4, #20]
   3ca4c:	strb	r2, [r3]
   3ca50:	b	3c950 <flatcc_json_printer_union_vector_field@@Base+0x1c0>
   3ca54:	mov	r2, #10
   3ca58:	str	r1, [r4, #20]
   3ca5c:	strb	r2, [r3]
   3ca60:	ldrb	r3, [r4, #25]
   3ca64:	ldr	r2, [r4, #32]
   3ca68:	ldr	r1, [r4, #16]
   3ca6c:	ldr	r0, [r4, #20]
   3ca70:	sub	r2, r2, #1
   3ca74:	mul	r5, r2, r3
   3ca78:	str	r2, [r4, #32]
   3ca7c:	add	r3, r0, r5
   3ca80:	cmp	r1, r3
   3ca84:	bcs	3caf0 <flatcc_json_printer_union_vector_field@@Base+0x360>
   3ca88:	mov	r1, r5
   3ca8c:	mov	r0, r4
   3ca90:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3ca94:	ldr	r3, [r4, #20]
   3ca98:	add	r1, r3, #1
   3ca9c:	b	3c9fc <flatcc_json_printer_union_vector_field@@Base+0x26c>
   3caa0:	ldr	r3, [r4, #20]
   3caa4:	mov	r0, #110	; 0x6e
   3caa8:	mov	r1, #117	; 0x75
   3caac:	mov	r2, #108	; 0x6c
   3cab0:	add	ip, r3, #1
   3cab4:	str	ip, [r4, #20]
   3cab8:	strb	r0, [r3]
   3cabc:	ldr	r3, [r4, #20]
   3cac0:	add	r0, r3, #1
   3cac4:	str	r0, [r4, #20]
   3cac8:	strb	r1, [r3]
   3cacc:	ldr	r3, [r4, #20]
   3cad0:	add	r1, r3, #1
   3cad4:	str	r1, [r4, #20]
   3cad8:	strb	r2, [r3]
   3cadc:	ldr	r3, [r4, #20]
   3cae0:	add	r1, r3, #1
   3cae4:	str	r1, [r4, #20]
   3cae8:	strb	r2, [r3]
   3caec:	b	3c938 <flatcc_json_printer_union_vector_field@@Base+0x1a8>
   3caf0:	mov	r1, #32
   3caf4:	mov	r2, r5
   3caf8:	bl	14594 <memset@plt>
   3cafc:	ldr	r3, [r4, #20]
   3cb00:	add	r3, r3, r5
   3cb04:	add	r1, r3, #1
   3cb08:	b	3c9fc <flatcc_json_printer_union_vector_field@@Base+0x26c>
   3cb0c:	muleq	r0, r8, r5
   3cb10:	strdeq	r8, [r0], -ip
   3cb14:	strdeq	r8, [r0], -r0
   3cb18:	muleq	r0, r0, sl

0003cb1c <flatcc_json_printer_table_field@@Base>:
   3cb1c:	ldr	ip, [r1, #8]
   3cb20:	add	r2, r2, #2
   3cb24:	lsl	r2, r2, #1
   3cb28:	cmp	r2, ip
   3cb2c:	bxge	lr
   3cb30:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3cb34:	ldr	ip, [r1, #4]
   3cb38:	strd	r6, [sp, #8]
   3cb3c:	strd	r8, [sp, #16]
   3cb40:	str	sl, [sp, #24]
   3cb44:	str	lr, [sp, #28]
   3cb48:	sub	sp, sp, #24
   3cb4c:	ldrh	r6, [ip, r2]
   3cb50:	cmp	r6, #0
   3cb54:	beq	3ccd4 <flatcc_json_printer_table_field@@Base+0x1b8>
   3cb58:	ldr	r8, [r1]
   3cb5c:	adds	r7, r8, r6
   3cb60:	beq	3ccd4 <flatcc_json_printer_table_field@@Base+0x1b8>
   3cb64:	ldr	ip, [r1, #16]
   3cb68:	ldr	r2, [r0, #20]
   3cb6c:	cmp	ip, #0
   3cb70:	add	ip, ip, #1
   3cb74:	str	ip, [r1, #16]
   3cb78:	beq	3cb90 <flatcc_json_printer_table_field@@Base+0x74>
   3cb7c:	add	lr, r2, #1
   3cb80:	mov	ip, #44	; 0x2c
   3cb84:	str	lr, [r0, #20]
   3cb88:	strb	ip, [r2]
   3cb8c:	ldr	r2, [r0, #20]
   3cb90:	mov	r5, r1
   3cb94:	mov	r9, r3
   3cb98:	ldrb	r1, [r0, #25]
   3cb9c:	mov	r4, r0
   3cba0:	cmp	r1, #0
   3cba4:	bne	3cd24 <flatcc_json_printer_table_field@@Base+0x208>
   3cba8:	ldr	r3, [r0, #16]
   3cbac:	cmp	r3, r2
   3cbb0:	bls	3cd00 <flatcc_json_printer_table_field@@Base+0x1e4>
   3cbb4:	mov	r3, #34	; 0x22
   3cbb8:	mov	r1, r9
   3cbbc:	strb	r3, [r2]
   3cbc0:	ldrb	r3, [r4, #26]
   3cbc4:	ldr	r2, [r4, #16]
   3cbc8:	ldr	r0, [r4, #20]
   3cbcc:	cmp	r3, #0
   3cbd0:	addeq	r0, r0, #1
   3cbd4:	ldr	r3, [sp, #56]	; 0x38
   3cbd8:	str	r0, [r4, #20]
   3cbdc:	add	r3, r0, r3
   3cbe0:	cmp	r2, r3
   3cbe4:	ldr	r2, [sp, #56]	; 0x38
   3cbe8:	bls	3ccf0 <flatcc_json_printer_table_field@@Base+0x1d4>
   3cbec:	bl	1451c <memcpy@plt>
   3cbf0:	ldr	r3, [r4, #20]
   3cbf4:	ldr	r2, [sp, #56]	; 0x38
   3cbf8:	add	r3, r3, r2
   3cbfc:	str	r3, [r4, #20]
   3cc00:	mov	r2, #34	; 0x22
   3cc04:	mov	r0, #58	; 0x3a
   3cc08:	mov	r9, #32
   3cc0c:	strb	r2, [r3]
   3cc10:	ldrb	r3, [r4, #26]
   3cc14:	ldr	r1, [r4, #20]
   3cc18:	clz	r3, r3
   3cc1c:	lsr	r3, r3, #5
   3cc20:	add	r2, r1, r3
   3cc24:	add	r2, r2, #1
   3cc28:	str	r2, [r4, #20]
   3cc2c:	strb	r0, [r1, r3]
   3cc30:	ldr	r3, [r4, #20]
   3cc34:	strb	r9, [r3]
   3cc38:	ldrb	r3, [r4, #25]
   3cc3c:	ldr	r0, [r4, #20]
   3cc40:	ldr	r1, [r5, #12]
   3cc44:	adds	r3, r3, #0
   3cc48:	movne	r3, #1
   3cc4c:	add	r2, r0, r3
   3cc50:	subs	ip, r1, #1
   3cc54:	str	r2, [r4, #20]
   3cc58:	beq	3cd10 <flatcc_json_printer_table_field@@Base+0x1f4>
   3cc5c:	ldr	lr, [r4, #32]
   3cc60:	add	r2, r2, #1
   3cc64:	add	r1, sp, #4
   3cc68:	ldr	r5, [r8, r6]
   3cc6c:	mov	r6, #0
   3cc70:	mov	r8, #123	; 0x7b
   3cc74:	str	r2, [r4, #20]
   3cc78:	add	r2, lr, #1
   3cc7c:	str	r2, [r4, #32]
   3cc80:	strb	r8, [r0, r3]
   3cc84:	add	r3, r7, r5
   3cc88:	mov	r0, r4
   3cc8c:	str	ip, [sp, #16]
   3cc90:	str	r6, [sp, #20]
   3cc94:	ldr	r2, [r7, r5]
   3cc98:	str	r3, [sp, #4]
   3cc9c:	sub	r3, r3, r2
   3cca0:	ldrh	r2, [r3]
   3cca4:	str	r3, [sp, #8]
   3cca8:	ldr	r3, [sp, #60]	; 0x3c
   3ccac:	str	r2, [sp, #12]
   3ccb0:	blx	r3
   3ccb4:	ldrb	r3, [r4, #25]
   3ccb8:	cmp	r3, r6
   3ccbc:	ldr	r3, [r4, #20]
   3ccc0:	bne	3cd68 <flatcc_json_printer_table_field@@Base+0x24c>
   3ccc4:	add	r1, r3, #1
   3ccc8:	mov	r2, #125	; 0x7d
   3cccc:	str	r1, [r4, #20]
   3ccd0:	strb	r2, [r3]
   3ccd4:	add	sp, sp, #24
   3ccd8:	ldrd	r4, [sp]
   3ccdc:	ldrd	r6, [sp, #8]
   3cce0:	ldrd	r8, [sp, #16]
   3cce4:	ldr	sl, [sp, #24]
   3cce8:	add	sp, sp, #28
   3ccec:	pop	{pc}		; (ldr pc, [sp], #4)
   3ccf0:	mov	r0, r4
   3ccf4:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3ccf8:	ldr	r3, [r4, #20]
   3ccfc:	b	3cc00 <flatcc_json_printer_table_field@@Base+0xe4>
   3cd00:	ldr	r3, [r0, #44]	; 0x2c
   3cd04:	blx	r3
   3cd08:	ldr	r2, [r4, #20]
   3cd0c:	b	3cbb4 <flatcc_json_printer_table_field@@Base+0x98>
   3cd10:	ldr	r3, [r4, #36]	; 0x24
   3cd14:	cmp	r3, #0
   3cd18:	moveq	r3, #2
   3cd1c:	streq	r3, [r4, #36]	; 0x24
   3cd20:	b	3ccd4 <flatcc_json_printer_table_field@@Base+0x1b8>
   3cd24:	add	r1, r2, #1
   3cd28:	mov	r3, #10
   3cd2c:	str	r1, [r0, #20]
   3cd30:	strb	r3, [r2]
   3cd34:	ldrb	r3, [r0, #25]
   3cd38:	ldr	r2, [r4, #32]
   3cd3c:	ldr	r1, [r0, #16]
   3cd40:	ldr	r0, [r0, #20]
   3cd44:	mul	sl, r2, r3
   3cd48:	add	r3, r0, sl
   3cd4c:	cmp	r1, r3
   3cd50:	bcs	3cdb4 <flatcc_json_printer_table_field@@Base+0x298>
   3cd54:	mov	r1, sl
   3cd58:	mov	r0, r4
   3cd5c:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3cd60:	ldr	r2, [r4, #20]
   3cd64:	b	3cbb4 <flatcc_json_printer_table_field@@Base+0x98>
   3cd68:	add	r1, r3, #1
   3cd6c:	mov	r2, #10
   3cd70:	str	r1, [r4, #20]
   3cd74:	strb	r2, [r3]
   3cd78:	ldrb	r3, [r4, #25]
   3cd7c:	ldr	r2, [r4, #32]
   3cd80:	ldr	r1, [r4, #16]
   3cd84:	ldr	r0, [r4, #20]
   3cd88:	sub	r2, r2, #1
   3cd8c:	mul	r5, r2, r3
   3cd90:	str	r2, [r4, #32]
   3cd94:	add	r3, r0, r5
   3cd98:	cmp	r1, r3
   3cd9c:	bcs	3cdd0 <flatcc_json_printer_table_field@@Base+0x2b4>
   3cda0:	mov	r1, r5
   3cda4:	mov	r0, r4
   3cda8:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3cdac:	ldr	r3, [r4, #20]
   3cdb0:	b	3ccc4 <flatcc_json_printer_table_field@@Base+0x1a8>
   3cdb4:	mov	r2, sl
   3cdb8:	mov	r1, #32
   3cdbc:	bl	14594 <memset@plt>
   3cdc0:	ldr	r2, [r4, #20]
   3cdc4:	add	r2, r2, sl
   3cdc8:	str	r2, [r4, #20]
   3cdcc:	b	3cbb4 <flatcc_json_printer_table_field@@Base+0x98>
   3cdd0:	mov	r1, r9
   3cdd4:	mov	r2, r5
   3cdd8:	bl	14594 <memset@plt>
   3cddc:	ldr	r3, [r4, #20]
   3cde0:	add	r3, r3, r5
   3cde4:	b	3ccc4 <flatcc_json_printer_table_field@@Base+0x1a8>

0003cde8 <flatcc_json_printer_union_field@@Base>:
   3cde8:	ldr	ip, [r1, #8]
   3cdec:	add	r2, r2, #1
   3cdf0:	lsl	r2, r2, #1
   3cdf4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3cdf8:	strd	r6, [sp, #8]
   3cdfc:	strd	r8, [sp, #16]
   3ce00:	str	sl, [sp, #24]
   3ce04:	cmp	r2, ip
   3ce08:	str	lr, [sp, #28]
   3ce0c:	sub	sp, sp, #16
   3ce10:	movge	lr, #0
   3ce14:	ldr	r6, [sp, #48]	; 0x30
   3ce18:	bge	3ce30 <flatcc_json_printer_union_field@@Base+0x48>
   3ce1c:	ldr	lr, [r1, #4]
   3ce20:	ldrh	lr, [lr, r2]
   3ce24:	cmp	lr, #0
   3ce28:	ldrne	r4, [r1]
   3ce2c:	addne	lr, r4, lr
   3ce30:	add	r2, r2, #2
   3ce34:	cmp	r2, ip
   3ce38:	bge	3cfec <flatcc_json_printer_union_field@@Base+0x204>
   3ce3c:	ldr	ip, [r1, #4]
   3ce40:	ldrh	r2, [ip, r2]
   3ce44:	cmp	r2, #0
   3ce48:	beq	3cfec <flatcc_json_printer_union_field@@Base+0x204>
   3ce4c:	ldr	r8, [r1]
   3ce50:	adds	r8, r8, r2
   3ce54:	moveq	r2, #1
   3ce58:	movne	r2, #0
   3ce5c:	cmp	lr, #0
   3ce60:	moveq	r2, #1
   3ce64:	cmp	r2, #0
   3ce68:	bne	3cfec <flatcc_json_printer_union_field@@Base+0x204>
   3ce6c:	ldr	ip, [r1, #16]
   3ce70:	ldrb	r9, [lr]
   3ce74:	ldr	r2, [r0, #20]
   3ce78:	cmp	ip, #0
   3ce7c:	add	ip, ip, #1
   3ce80:	str	ip, [r1, #16]
   3ce84:	beq	3ce9c <flatcc_json_printer_union_field@@Base+0xb4>
   3ce88:	add	lr, r2, #1
   3ce8c:	mov	ip, #44	; 0x2c
   3ce90:	str	lr, [r0, #20]
   3ce94:	strb	ip, [r2]
   3ce98:	ldr	r2, [r0, #20]
   3ce9c:	mov	r5, r1
   3cea0:	mov	r7, r3
   3cea4:	ldrb	r1, [r0, #25]
   3cea8:	mov	r4, r0
   3ceac:	cmp	r1, #0
   3ceb0:	bne	3d008 <flatcc_json_printer_union_field@@Base+0x220>
   3ceb4:	ldr	r3, [r0, #16]
   3ceb8:	cmp	r3, r2
   3cebc:	bhi	3cecc <flatcc_json_printer_union_field@@Base+0xe4>
   3cec0:	ldr	r3, [r0, #44]	; 0x2c
   3cec4:	blx	r3
   3cec8:	ldr	r2, [r4, #20]
   3cecc:	mov	r3, #34	; 0x22
   3ced0:	mov	r1, r7
   3ced4:	strb	r3, [r2]
   3ced8:	ldrb	r3, [r4, #26]
   3cedc:	ldr	r2, [r4, #16]
   3cee0:	ldr	r0, [r4, #20]
   3cee4:	cmp	r3, #0
   3cee8:	addeq	r0, r0, #1
   3ceec:	add	r3, r0, r6
   3cef0:	cmp	r2, r3
   3cef4:	mov	r2, r6
   3cef8:	str	r0, [r4, #20]
   3cefc:	bls	3d074 <flatcc_json_printer_union_field@@Base+0x28c>
   3cf00:	bl	1451c <memcpy@plt>
   3cf04:	ldr	r3, [r4, #20]
   3cf08:	add	r3, r3, r6
   3cf0c:	str	r3, [r4, #20]
   3cf10:	ldr	r1, [r4, #16]
   3cf14:	add	r2, r3, #5
   3cf18:	cmp	r1, r2
   3cf1c:	bhi	3d04c <flatcc_json_printer_union_field@@Base+0x264>
   3cf20:	ldr	r1, [pc, #400]	; 3d0b8 <flatcc_json_printer_union_field@@Base+0x2d0>
   3cf24:	mov	r2, #5
   3cf28:	mov	r0, r4
   3cf2c:	add	r1, pc, r1
   3cf30:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3cf34:	ldr	r3, [r4, #20]
   3cf38:	mov	r2, #34	; 0x22
   3cf3c:	mov	ip, #58	; 0x3a
   3cf40:	mov	r0, #32
   3cf44:	strb	r2, [r3]
   3cf48:	ldrb	r2, [r4, #26]
   3cf4c:	ldr	r1, [r4, #20]
   3cf50:	clz	r2, r2
   3cf54:	lsr	r2, r2, #5
   3cf58:	add	r3, r1, r2
   3cf5c:	add	r3, r3, #1
   3cf60:	str	r3, [r4, #20]
   3cf64:	strb	ip, [r1, r2]
   3cf68:	ldr	r3, [r4, #20]
   3cf6c:	strb	r0, [r3]
   3cf70:	ldrb	r2, [r4, #25]
   3cf74:	ldr	r1, [r4, #20]
   3cf78:	ldrb	r3, [r4, #27]
   3cf7c:	cmp	r2, #0
   3cf80:	addne	r1, r1, #1
   3cf84:	cmp	r3, #0
   3cf88:	str	r1, [r4, #20]
   3cf8c:	bne	3d084 <flatcc_json_printer_union_field@@Base+0x29c>
   3cf90:	mov	r1, r9
   3cf94:	mov	r0, r4
   3cf98:	ldr	r3, [sp, #52]	; 0x34
   3cf9c:	blx	r3
   3cfa0:	cmp	r9, #0
   3cfa4:	beq	3cfec <flatcc_json_printer_union_field@@Base+0x204>
   3cfa8:	ldr	r3, [r4, #20]
   3cfac:	mov	ip, #44	; 0x2c
   3cfb0:	mov	r1, r7
   3cfb4:	mov	r0, r4
   3cfb8:	mov	r2, r6
   3cfbc:	add	lr, r3, #1
   3cfc0:	str	lr, [r4, #20]
   3cfc4:	strb	ip, [r3]
   3cfc8:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3cfcc:	ldr	r3, [r5, #12]
   3cfd0:	mov	r0, r4
   3cfd4:	add	r1, sp, #4
   3cfd8:	str	r8, [sp, #4]
   3cfdc:	str	r3, [sp, #8]
   3cfe0:	ldr	r3, [sp, #56]	; 0x38
   3cfe4:	strb	r9, [sp, #12]
   3cfe8:	blx	r3
   3cfec:	add	sp, sp, #16
   3cff0:	ldrd	r4, [sp]
   3cff4:	ldrd	r6, [sp, #8]
   3cff8:	ldrd	r8, [sp, #16]
   3cffc:	ldr	sl, [sp, #24]
   3d000:	add	sp, sp, #28
   3d004:	pop	{pc}		; (ldr pc, [sp], #4)
   3d008:	add	r1, r2, #1
   3d00c:	mov	r3, #10
   3d010:	str	r1, [r0, #20]
   3d014:	strb	r3, [r2]
   3d018:	ldrb	r3, [r0, #25]
   3d01c:	ldr	r2, [r4, #32]
   3d020:	ldr	r1, [r0, #16]
   3d024:	ldr	r0, [r0, #20]
   3d028:	mul	sl, r2, r3
   3d02c:	add	r3, r0, sl
   3d030:	cmp	r1, r3
   3d034:	bcs	3d09c <flatcc_json_printer_union_field@@Base+0x2b4>
   3d038:	mov	r1, sl
   3d03c:	mov	r0, r4
   3d040:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3d044:	ldr	r2, [r4, #20]
   3d048:	b	3cecc <flatcc_json_printer_union_field@@Base+0xe4>
   3d04c:	ldr	r2, [pc, #104]	; 3d0bc <flatcc_json_printer_union_field@@Base+0x2d4>
   3d050:	add	r2, pc, r2
   3d054:	ldr	r1, [r2]
   3d058:	ldrb	r2, [r2, #4]
   3d05c:	str	r1, [r3]
   3d060:	strb	r2, [r3, #4]
   3d064:	ldr	r3, [r4, #20]
   3d068:	add	r3, r3, #5
   3d06c:	str	r3, [r4, #20]
   3d070:	b	3cf38 <flatcc_json_printer_union_field@@Base+0x150>
   3d074:	mov	r0, r4
   3d078:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3d07c:	ldr	r3, [r4, #20]
   3d080:	b	3cf10 <flatcc_json_printer_union_field@@Base+0x128>
   3d084:	mov	r0, r9
   3d088:	bl	312f4 <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   3d08c:	ldr	r3, [r4, #20]
   3d090:	add	r0, r3, r0
   3d094:	str	r0, [r4, #20]
   3d098:	b	3cfa0 <flatcc_json_printer_union_field@@Base+0x1b8>
   3d09c:	mov	r2, sl
   3d0a0:	mov	r1, #32
   3d0a4:	bl	14594 <memset@plt>
   3d0a8:	ldr	r2, [r4, #20]
   3d0ac:	add	r2, r2, sl
   3d0b0:	str	r2, [r4, #20]
   3d0b4:	b	3cecc <flatcc_json_printer_union_field@@Base+0xe4>
   3d0b8:			; <UNDEFINED> instruction: 0x00007eb4
   3d0bc:	muleq	r0, r0, sp

0003d0c0 <flatcc_json_printer_union_table@@Base>:
   3d0c0:	ldr	r3, [r1, #4]
   3d0c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3d0c8:	mov	r4, r0
   3d0cc:	strd	r6, [sp, #8]
   3d0d0:	str	r8, [sp, #16]
   3d0d4:	str	lr, [sp, #20]
   3d0d8:	sub	sp, sp, #24
   3d0dc:	subs	ip, r3, #1
   3d0e0:	beq	3d1c0 <flatcc_json_printer_union_table@@Base+0x100>
   3d0e4:	ldr	lr, [r1]
   3d0e8:	mov	r6, #0
   3d0ec:	mov	r7, #123	; 0x7b
   3d0f0:	ldr	r1, [r0, #20]
   3d0f4:	ldr	r3, [r0, #32]
   3d0f8:	ldr	r5, [lr]
   3d0fc:	add	r8, r1, #1
   3d100:	add	r3, r3, #1
   3d104:	str	r8, [r0, #20]
   3d108:	str	r3, [r0, #32]
   3d10c:	add	r3, lr, r5
   3d110:	strb	r7, [r1]
   3d114:	add	r1, sp, #4
   3d118:	str	ip, [sp, #16]
   3d11c:	str	r6, [sp, #20]
   3d120:	ldr	ip, [lr, r5]
   3d124:	str	r3, [sp, #4]
   3d128:	sub	r3, r3, ip
   3d12c:	ldrh	ip, [r3]
   3d130:	str	r3, [sp, #8]
   3d134:	str	ip, [sp, #12]
   3d138:	blx	r2
   3d13c:	ldrb	r3, [r4, #25]
   3d140:	cmp	r3, r6
   3d144:	bne	3d174 <flatcc_json_printer_union_table@@Base+0xb4>
   3d148:	ldr	r1, [r4, #20]
   3d14c:	add	r2, r1, #1
   3d150:	mov	r3, #125	; 0x7d
   3d154:	str	r2, [r4, #20]
   3d158:	strb	r3, [r1]
   3d15c:	add	sp, sp, #24
   3d160:	ldrd	r4, [sp]
   3d164:	ldrd	r6, [sp, #8]
   3d168:	ldr	r8, [sp, #16]
   3d16c:	add	sp, sp, #20
   3d170:	pop	{pc}		; (ldr pc, [sp], #4)
   3d174:	ldr	r3, [r4, #20]
   3d178:	mov	r2, #10
   3d17c:	add	r1, r3, #1
   3d180:	str	r1, [r4, #20]
   3d184:	strb	r2, [r3]
   3d188:	ldrb	r1, [r4, #25]
   3d18c:	ldr	r3, [r4, #32]
   3d190:	ldr	r2, [r4, #16]
   3d194:	ldr	r0, [r4, #20]
   3d198:	sub	r3, r3, #1
   3d19c:	mul	r5, r3, r1
   3d1a0:	str	r3, [r4, #32]
   3d1a4:	add	r3, r0, r5
   3d1a8:	cmp	r2, r3
   3d1ac:	bcs	3d1d4 <flatcc_json_printer_union_table@@Base+0x114>
   3d1b0:	mov	r1, r5
   3d1b4:	mov	r0, r4
   3d1b8:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3d1bc:	b	3d148 <flatcc_json_printer_union_table@@Base+0x88>
   3d1c0:	ldr	r3, [r0, #36]	; 0x24
   3d1c4:	cmp	r3, #0
   3d1c8:	moveq	r3, #2
   3d1cc:	streq	r3, [r0, #36]	; 0x24
   3d1d0:	b	3d15c <flatcc_json_printer_union_table@@Base+0x9c>
   3d1d4:	mov	r1, #32
   3d1d8:	mov	r2, r5
   3d1dc:	bl	14594 <memset@plt>
   3d1e0:	ldr	r1, [r4, #20]
   3d1e4:	add	r1, r1, r5
   3d1e8:	b	3d14c <flatcc_json_printer_union_table@@Base+0x8c>

0003d1ec <flatcc_json_printer_union_struct@@Base>:
   3d1ec:	ldr	ip, [r0, #20]
   3d1f0:	strd	r4, [sp, #-16]!
   3d1f4:	mov	r4, r0
   3d1f8:	ldr	r3, [r0, #32]
   3d1fc:	str	r6, [sp, #8]
   3d200:	str	lr, [sp, #12]
   3d204:	mov	lr, #123	; 0x7b
   3d208:	add	r5, ip, #1
   3d20c:	add	r3, r3, #1
   3d210:	str	r5, [r0, #20]
   3d214:	str	r3, [r0, #32]
   3d218:	strb	lr, [ip]
   3d21c:	ldr	r3, [r1]
   3d220:	ldr	r1, [r3]
   3d224:	add	r1, r3, r1
   3d228:	blx	r2
   3d22c:	ldrb	r3, [r4, #25]
   3d230:	cmp	r3, #0
   3d234:	bne	3d25c <flatcc_json_printer_union_struct@@Base+0x70>
   3d238:	ldr	r1, [r4, #20]
   3d23c:	add	r2, r1, #1
   3d240:	mov	r3, #125	; 0x7d
   3d244:	str	r2, [r4, #20]
   3d248:	strb	r3, [r1]
   3d24c:	ldrd	r4, [sp]
   3d250:	ldr	r6, [sp, #8]
   3d254:	add	sp, sp, #12
   3d258:	pop	{pc}		; (ldr pc, [sp], #4)
   3d25c:	ldr	r3, [r4, #20]
   3d260:	mov	r2, #10
   3d264:	add	r1, r3, #1
   3d268:	str	r1, [r4, #20]
   3d26c:	strb	r2, [r3]
   3d270:	ldrb	r1, [r4, #25]
   3d274:	ldr	r3, [r4, #32]
   3d278:	ldr	r2, [r4, #16]
   3d27c:	ldr	r0, [r4, #20]
   3d280:	sub	r3, r3, #1
   3d284:	mul	r5, r3, r1
   3d288:	str	r3, [r4, #32]
   3d28c:	add	r3, r0, r5
   3d290:	cmp	r2, r3
   3d294:	bcs	3d2a8 <flatcc_json_printer_union_struct@@Base+0xbc>
   3d298:	mov	r1, r5
   3d29c:	mov	r0, r4
   3d2a0:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3d2a4:	b	3d238 <flatcc_json_printer_union_struct@@Base+0x4c>
   3d2a8:	mov	r1, #32
   3d2ac:	mov	r2, r5
   3d2b0:	bl	14594 <memset@plt>
   3d2b4:	ldr	r1, [r4, #20]
   3d2b8:	add	r1, r1, r5
   3d2bc:	b	3d23c <flatcc_json_printer_union_struct@@Base+0x50>

0003d2c0 <flatcc_json_printer_union_string@@Base>:
   3d2c0:	ldr	r3, [r1]
   3d2c4:	ldr	r2, [r3]
   3d2c8:	add	r1, r3, r2
   3d2cc:	ldr	r2, [r3, r2]
   3d2d0:	add	r1, r1, #4
   3d2d4:	b	32250 <flatcc_json_parser_struct_as_root@@Base+0x2154>

0003d2d8 <flatcc_json_printer_embedded_struct_field@@Base>:
   3d2d8:	cmp	r1, #0
   3d2dc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3d2e0:	mov	r4, r0
   3d2e4:	strd	r6, [sp, #8]
   3d2e8:	mov	r7, r3
   3d2ec:	strd	r8, [sp, #16]
   3d2f0:	mov	r8, r2
   3d2f4:	str	sl, [sp, #24]
   3d2f8:	str	lr, [sp, #28]
   3d2fc:	ldr	r2, [r0, #20]
   3d300:	ldr	r5, [sp, #36]	; 0x24
   3d304:	ldr	r6, [sp, #40]	; 0x28
   3d308:	beq	3d320 <flatcc_json_printer_embedded_struct_field@@Base+0x48>
   3d30c:	add	r1, r2, #1
   3d310:	mov	r3, #44	; 0x2c
   3d314:	str	r1, [r0, #20]
   3d318:	strb	r3, [r2]
   3d31c:	ldr	r2, [r0, #20]
   3d320:	ldrb	r1, [r4, #25]
   3d324:	cmp	r1, #0
   3d328:	bne	3d494 <flatcc_json_printer_embedded_struct_field@@Base+0x1bc>
   3d32c:	ldr	r3, [r4, #16]
   3d330:	cmp	r3, r2
   3d334:	bhi	3d348 <flatcc_json_printer_embedded_struct_field@@Base+0x70>
   3d338:	mov	r0, r4
   3d33c:	ldr	r3, [r4, #44]	; 0x2c
   3d340:	blx	r3
   3d344:	ldr	r2, [r4, #20]
   3d348:	mov	r3, #34	; 0x22
   3d34c:	ldr	r1, [sp, #32]
   3d350:	strb	r3, [r2]
   3d354:	ldrb	r3, [r4, #26]
   3d358:	ldr	r2, [r4, #16]
   3d35c:	ldr	r0, [r4, #20]
   3d360:	cmp	r3, #0
   3d364:	addeq	r0, r0, #1
   3d368:	add	r3, r0, r5
   3d36c:	cmp	r2, r3
   3d370:	mov	r2, r5
   3d374:	str	r0, [r4, #20]
   3d378:	bhi	3d434 <flatcc_json_printer_embedded_struct_field@@Base+0x15c>
   3d37c:	mov	r0, r4
   3d380:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3d384:	ldr	r5, [r4, #20]
   3d388:	mov	r3, #34	; 0x22
   3d38c:	mov	ip, #58	; 0x3a
   3d390:	add	r1, r8, r7
   3d394:	mov	r7, #32
   3d398:	strb	r3, [r5]
   3d39c:	mov	lr, #123	; 0x7b
   3d3a0:	mov	r0, r4
   3d3a4:	ldrb	r3, [r4, #26]
   3d3a8:	ldr	r5, [r4, #20]
   3d3ac:	clz	r3, r3
   3d3b0:	lsr	r3, r3, #5
   3d3b4:	add	r2, r5, r3
   3d3b8:	add	r2, r2, #1
   3d3bc:	str	r2, [r4, #20]
   3d3c0:	strb	ip, [r5, r3]
   3d3c4:	ldr	r3, [r4, #20]
   3d3c8:	strb	r7, [r3]
   3d3cc:	ldrb	r3, [r4, #25]
   3d3d0:	ldr	r5, [r4, #20]
   3d3d4:	ldr	r2, [r4, #32]
   3d3d8:	adds	r3, r3, #0
   3d3dc:	movne	r3, #1
   3d3e0:	add	ip, r5, r3
   3d3e4:	add	ip, ip, #1
   3d3e8:	add	r2, r2, #1
   3d3ec:	str	ip, [r4, #20]
   3d3f0:	str	r2, [r4, #32]
   3d3f4:	strb	lr, [r5, r3]
   3d3f8:	blx	r6
   3d3fc:	ldrb	r3, [r4, #25]
   3d400:	cmp	r3, #0
   3d404:	bne	3d448 <flatcc_json_printer_embedded_struct_field@@Base+0x170>
   3d408:	ldr	r1, [r4, #20]
   3d40c:	add	r2, r1, #1
   3d410:	mov	r3, #125	; 0x7d
   3d414:	str	r2, [r4, #20]
   3d418:	strb	r3, [r1]
   3d41c:	ldrd	r4, [sp]
   3d420:	ldrd	r6, [sp, #8]
   3d424:	ldrd	r8, [sp, #16]
   3d428:	ldr	sl, [sp, #24]
   3d42c:	add	sp, sp, #28
   3d430:	pop	{pc}		; (ldr pc, [sp], #4)
   3d434:	bl	1451c <memcpy@plt>
   3d438:	ldr	r3, [r4, #20]
   3d43c:	add	r5, r3, r5
   3d440:	str	r5, [r4, #20]
   3d444:	b	3d388 <flatcc_json_printer_embedded_struct_field@@Base+0xb0>
   3d448:	ldr	r3, [r4, #20]
   3d44c:	mov	r2, #10
   3d450:	add	r1, r3, #1
   3d454:	str	r1, [r4, #20]
   3d458:	strb	r2, [r3]
   3d45c:	ldrb	r1, [r4, #25]
   3d460:	ldr	r3, [r4, #32]
   3d464:	ldr	r2, [r4, #16]
   3d468:	ldr	r0, [r4, #20]
   3d46c:	sub	r3, r3, #1
   3d470:	mul	r5, r3, r1
   3d474:	str	r3, [r4, #32]
   3d478:	add	r3, r0, r5
   3d47c:	cmp	r2, r3
   3d480:	bcs	3d4f4 <flatcc_json_printer_embedded_struct_field@@Base+0x21c>
   3d484:	mov	r1, r5
   3d488:	mov	r0, r4
   3d48c:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3d490:	b	3d408 <flatcc_json_printer_embedded_struct_field@@Base+0x130>
   3d494:	add	r1, r2, #1
   3d498:	mov	r3, #10
   3d49c:	str	r1, [r4, #20]
   3d4a0:	strb	r3, [r2]
   3d4a4:	ldrb	r3, [r4, #25]
   3d4a8:	ldr	r1, [r4, #16]
   3d4ac:	ldr	r2, [r4, #32]
   3d4b0:	ldr	r0, [r4, #20]
   3d4b4:	mul	r9, r2, r3
   3d4b8:	add	r3, r0, r9
   3d4bc:	cmp	r1, r3
   3d4c0:	bcs	3d4d8 <flatcc_json_printer_embedded_struct_field@@Base+0x200>
   3d4c4:	mov	r1, r9
   3d4c8:	mov	r0, r4
   3d4cc:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3d4d0:	ldr	r2, [r4, #20]
   3d4d4:	b	3d348 <flatcc_json_printer_embedded_struct_field@@Base+0x70>
   3d4d8:	mov	r2, r9
   3d4dc:	mov	r1, #32
   3d4e0:	bl	14594 <memset@plt>
   3d4e4:	ldr	r2, [r4, #20]
   3d4e8:	add	r2, r2, r9
   3d4ec:	str	r2, [r4, #20]
   3d4f0:	b	3d348 <flatcc_json_printer_embedded_struct_field@@Base+0x70>
   3d4f4:	mov	r1, r7
   3d4f8:	mov	r2, r5
   3d4fc:	bl	14594 <memset@plt>
   3d500:	ldr	r1, [r4, #20]
   3d504:	add	r1, r1, r5
   3d508:	b	3d40c <flatcc_json_printer_embedded_struct_field@@Base+0x134>

0003d50c <flatcc_json_printer_struct_field@@Base>:
   3d50c:	ldr	ip, [r1, #8]
   3d510:	add	r2, r2, #2
   3d514:	lsl	r2, r2, #1
   3d518:	cmp	r2, ip
   3d51c:	bxge	lr
   3d520:	ldr	ip, [r1, #4]
   3d524:	ldrh	r2, [ip, r2]
   3d528:	cmp	r2, #0
   3d52c:	bxeq	lr
   3d530:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3d534:	ldr	r5, [r1]
   3d538:	strd	r6, [sp, #8]
   3d53c:	str	r8, [sp, #16]
   3d540:	str	lr, [sp, #20]
   3d544:	adds	r5, r5, r2
   3d548:	beq	3d67c <flatcc_json_printer_struct_field@@Base+0x170>
   3d54c:	ldr	ip, [r1, #16]
   3d550:	ldr	r2, [r0, #20]
   3d554:	cmp	ip, #0
   3d558:	add	ip, ip, #1
   3d55c:	str	ip, [r1, #16]
   3d560:	beq	3d578 <flatcc_json_printer_struct_field@@Base+0x6c>
   3d564:	add	ip, r2, #1
   3d568:	mov	r1, #44	; 0x2c
   3d56c:	str	ip, [r0, #20]
   3d570:	strb	r1, [r2]
   3d574:	ldr	r2, [r0, #20]
   3d578:	mov	r6, r3
   3d57c:	mov	r4, r0
   3d580:	ldrb	r1, [r0, #25]
   3d584:	cmp	r1, #0
   3d588:	bne	3d6b0 <flatcc_json_printer_struct_field@@Base+0x1a4>
   3d58c:	ldr	r3, [r0, #16]
   3d590:	cmp	r3, r2
   3d594:	bls	3d6a0 <flatcc_json_printer_struct_field@@Base+0x194>
   3d598:	mov	r3, #34	; 0x22
   3d59c:	mov	r1, r6
   3d5a0:	strb	r3, [r2]
   3d5a4:	ldrb	r3, [r4, #26]
   3d5a8:	ldr	r2, [r4, #16]
   3d5ac:	ldr	r0, [r4, #20]
   3d5b0:	cmp	r3, #0
   3d5b4:	addeq	r0, r0, #1
   3d5b8:	ldr	r3, [sp, #24]
   3d5bc:	str	r0, [r4, #20]
   3d5c0:	add	r3, r0, r3
   3d5c4:	cmp	r2, r3
   3d5c8:	ldr	r2, [sp, #24]
   3d5cc:	bls	3d690 <flatcc_json_printer_struct_field@@Base+0x184>
   3d5d0:	bl	1451c <memcpy@plt>
   3d5d4:	ldr	r3, [r4, #20]
   3d5d8:	ldr	r2, [sp, #24]
   3d5dc:	add	r3, r3, r2
   3d5e0:	str	r3, [r4, #20]
   3d5e4:	mov	r2, #34	; 0x22
   3d5e8:	mov	r6, #58	; 0x3a
   3d5ec:	mov	r1, r5
   3d5f0:	mov	r5, #32
   3d5f4:	strb	r2, [r3]
   3d5f8:	mov	lr, #123	; 0x7b
   3d5fc:	mov	r0, r4
   3d600:	ldrb	r3, [r4, #26]
   3d604:	ldr	ip, [r4, #20]
   3d608:	clz	r3, r3
   3d60c:	lsr	r3, r3, #5
   3d610:	add	r2, ip, r3
   3d614:	add	r2, r2, #1
   3d618:	str	r2, [r4, #20]
   3d61c:	strb	r6, [ip, r3]
   3d620:	ldr	r3, [r4, #20]
   3d624:	strb	r5, [r3]
   3d628:	ldrb	r3, [r4, #25]
   3d62c:	ldr	r6, [r4, #20]
   3d630:	ldr	r2, [r4, #32]
   3d634:	adds	r3, r3, #0
   3d638:	movne	r3, #1
   3d63c:	add	ip, r6, r3
   3d640:	add	ip, ip, #1
   3d644:	add	r2, r2, #1
   3d648:	str	ip, [r4, #20]
   3d64c:	str	r2, [r4, #32]
   3d650:	strb	lr, [r6, r3]
   3d654:	ldr	r3, [sp, #28]
   3d658:	blx	r3
   3d65c:	ldrb	r3, [r4, #25]
   3d660:	cmp	r3, #0
   3d664:	bne	3d6f4 <flatcc_json_printer_struct_field@@Base+0x1e8>
   3d668:	ldr	r1, [r4, #20]
   3d66c:	add	r2, r1, #1
   3d670:	mov	r3, #125	; 0x7d
   3d674:	str	r2, [r4, #20]
   3d678:	strb	r3, [r1]
   3d67c:	ldrd	r4, [sp]
   3d680:	ldrd	r6, [sp, #8]
   3d684:	ldr	r8, [sp, #16]
   3d688:	add	sp, sp, #20
   3d68c:	pop	{pc}		; (ldr pc, [sp], #4)
   3d690:	mov	r0, r4
   3d694:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3d698:	ldr	r3, [r4, #20]
   3d69c:	b	3d5e4 <flatcc_json_printer_struct_field@@Base+0xd8>
   3d6a0:	ldr	r3, [r0, #44]	; 0x2c
   3d6a4:	blx	r3
   3d6a8:	ldr	r2, [r4, #20]
   3d6ac:	b	3d598 <flatcc_json_printer_struct_field@@Base+0x8c>
   3d6b0:	add	r1, r2, #1
   3d6b4:	mov	r3, #10
   3d6b8:	str	r1, [r0, #20]
   3d6bc:	strb	r3, [r2]
   3d6c0:	ldrb	r7, [r0, #25]
   3d6c4:	ldr	r2, [r4, #32]
   3d6c8:	ldr	r1, [r0, #16]
   3d6cc:	ldr	r0, [r0, #20]
   3d6d0:	mul	r7, r2, r7
   3d6d4:	add	r3, r0, r7
   3d6d8:	cmp	r1, r3
   3d6dc:	bcs	3d740 <flatcc_json_printer_struct_field@@Base+0x234>
   3d6e0:	mov	r1, r7
   3d6e4:	mov	r0, r4
   3d6e8:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3d6ec:	ldr	r2, [r4, #20]
   3d6f0:	b	3d598 <flatcc_json_printer_struct_field@@Base+0x8c>
   3d6f4:	ldr	r3, [r4, #20]
   3d6f8:	mov	r2, #10
   3d6fc:	add	r1, r3, #1
   3d700:	str	r1, [r4, #20]
   3d704:	strb	r2, [r3]
   3d708:	ldrb	r1, [r4, #25]
   3d70c:	ldr	r3, [r4, #32]
   3d710:	ldr	r2, [r4, #16]
   3d714:	ldr	r0, [r4, #20]
   3d718:	sub	r3, r3, #1
   3d71c:	mul	r6, r3, r1
   3d720:	str	r3, [r4, #32]
   3d724:	add	r3, r0, r6
   3d728:	cmp	r2, r3
   3d72c:	bcs	3d75c <flatcc_json_printer_struct_field@@Base+0x250>
   3d730:	mov	r1, r6
   3d734:	mov	r0, r4
   3d738:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3d73c:	b	3d668 <flatcc_json_printer_struct_field@@Base+0x15c>
   3d740:	mov	r2, r7
   3d744:	mov	r1, #32
   3d748:	bl	14594 <memset@plt>
   3d74c:	ldr	r2, [r4, #20]
   3d750:	add	r2, r2, r7
   3d754:	str	r2, [r4, #20]
   3d758:	b	3d598 <flatcc_json_printer_struct_field@@Base+0x8c>
   3d75c:	mov	r1, r5
   3d760:	mov	r2, r6
   3d764:	bl	14594 <memset@plt>
   3d768:	ldr	r1, [r4, #20]
   3d76c:	add	r1, r1, r6
   3d770:	b	3d66c <flatcc_json_printer_struct_field@@Base+0x160>

0003d774 <flatcc_json_printer_struct_as_root@@Base>:
   3d774:	strd	r4, [sp, #-16]!
   3d778:	mov	r4, r0
   3d77c:	mov	r5, r1
   3d780:	str	r6, [sp, #8]
   3d784:	str	lr, [sp, #12]
   3d788:	bl	3147c <flatcc_json_parser_struct_as_root@@Base+0x1380>
   3d78c:	cmp	r0, #0
   3d790:	beq	3d8bc <flatcc_json_printer_struct_as_root@@Base+0x148>
   3d794:	ldr	r2, [r4, #20]
   3d798:	mov	r1, #123	; 0x7b
   3d79c:	mov	r0, r4
   3d7a0:	ldr	r3, [r4, #32]
   3d7a4:	add	ip, r2, #1
   3d7a8:	add	r3, r3, #1
   3d7ac:	str	ip, [r4, #20]
   3d7b0:	str	r3, [r4, #32]
   3d7b4:	strb	r1, [r2]
   3d7b8:	ldr	r1, [r5]
   3d7bc:	ldr	r3, [sp, #16]
   3d7c0:	add	r1, r5, r1
   3d7c4:	blx	r3
   3d7c8:	ldrb	r3, [r4, #25]
   3d7cc:	cmp	r3, #0
   3d7d0:	bne	3d858 <flatcc_json_printer_struct_as_root@@Base+0xe4>
   3d7d4:	ldr	r1, [r4, #20]
   3d7d8:	mov	r3, #125	; 0x7d
   3d7dc:	add	r2, r1, #1
   3d7e0:	str	r2, [r4, #20]
   3d7e4:	strb	r3, [r1]
   3d7e8:	ldrb	r3, [r4, #25]
   3d7ec:	cmp	r3, #0
   3d7f0:	bne	3d834 <flatcc_json_printer_struct_as_root@@Base+0xc0>
   3d7f4:	mov	r1, #1
   3d7f8:	mov	r0, r4
   3d7fc:	ldr	r3, [r4, #44]	; 0x2c
   3d800:	blx	r3
   3d804:	ldr	r3, [r4, #36]	; 0x24
   3d808:	cmp	r3, #0
   3d80c:	bne	3d8bc <flatcc_json_printer_struct_as_root@@Base+0x148>
   3d810:	ldr	r2, [r4]
   3d814:	ldr	r3, [r4, #12]
   3d818:	ldr	r0, [r4, #20]
   3d81c:	sub	r0, r0, r2
   3d820:	add	r0, r0, r3
   3d824:	ldrd	r4, [sp]
   3d828:	ldr	r6, [sp, #8]
   3d82c:	add	sp, sp, #12
   3d830:	pop	{pc}		; (ldr pc, [sp], #4)
   3d834:	ldr	r3, [r4, #32]
   3d838:	cmp	r3, #0
   3d83c:	bne	3d7f4 <flatcc_json_printer_struct_as_root@@Base+0x80>
   3d840:	ldr	r3, [r4, #20]
   3d844:	mov	r2, #10
   3d848:	add	r1, r3, #1
   3d84c:	str	r1, [r4, #20]
   3d850:	strb	r2, [r3]
   3d854:	b	3d7f4 <flatcc_json_printer_struct_as_root@@Base+0x80>
   3d858:	ldr	r3, [r4, #20]
   3d85c:	mov	r2, #10
   3d860:	add	r1, r3, #1
   3d864:	str	r1, [r4, #20]
   3d868:	strb	r2, [r3]
   3d86c:	ldrb	r1, [r4, #25]
   3d870:	ldr	r3, [r4, #32]
   3d874:	ldr	r2, [r4, #16]
   3d878:	ldr	r0, [r4, #20]
   3d87c:	sub	r3, r3, #1
   3d880:	mul	r5, r3, r1
   3d884:	str	r3, [r4, #32]
   3d888:	add	r3, r0, r5
   3d88c:	cmp	r2, r3
   3d890:	bcs	3d8a4 <flatcc_json_printer_struct_as_root@@Base+0x130>
   3d894:	mov	r1, r5
   3d898:	mov	r0, r4
   3d89c:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3d8a0:	b	3d7d4 <flatcc_json_printer_struct_as_root@@Base+0x60>
   3d8a4:	mov	r1, #32
   3d8a8:	mov	r2, r5
   3d8ac:	bl	14594 <memset@plt>
   3d8b0:	ldr	r1, [r4, #20]
   3d8b4:	add	r1, r1, r5
   3d8b8:	b	3d7d8 <flatcc_json_printer_struct_as_root@@Base+0x64>
   3d8bc:	mvn	r0, #0
   3d8c0:	b	3d824 <flatcc_json_printer_struct_as_root@@Base+0xb0>

0003d8c4 <flatcc_json_printer_table_as_root@@Base>:
   3d8c4:	strd	r4, [sp, #-12]!
   3d8c8:	mov	r4, r0
   3d8cc:	mov	r5, r1
   3d8d0:	str	lr, [sp, #8]
   3d8d4:	sub	sp, sp, #28
   3d8d8:	bl	3147c <flatcc_json_parser_struct_as_root@@Base+0x1380>
   3d8dc:	cmp	r0, #0
   3d8e0:	beq	3da38 <flatcc_json_printer_table_as_root@@Base+0x174>
   3d8e4:	ldr	r1, [r4, #20]
   3d8e8:	mov	r0, #123	; 0x7b
   3d8ec:	ldr	r3, [r4, #32]
   3d8f0:	ldr	r2, [r5]
   3d8f4:	add	ip, r1, #1
   3d8f8:	add	r3, r3, #1
   3d8fc:	str	ip, [r4, #20]
   3d900:	mov	ip, #0
   3d904:	str	r3, [r4, #32]
   3d908:	add	r3, r5, r2
   3d90c:	strb	r0, [r1]
   3d910:	mov	r0, #99	; 0x63
   3d914:	add	r1, sp, #4
   3d918:	ldr	r2, [r5, r2]
   3d91c:	str	r3, [sp, #4]
   3d920:	str	r0, [sp, #16]
   3d924:	mov	r0, r4
   3d928:	str	ip, [sp, #20]
   3d92c:	sub	r3, r3, r2
   3d930:	ldrh	r2, [r3]
   3d934:	str	r3, [sp, #8]
   3d938:	ldr	r3, [sp, #40]	; 0x28
   3d93c:	str	r2, [sp, #12]
   3d940:	blx	r3
   3d944:	ldrb	r3, [r4, #25]
   3d948:	cmp	r3, #0
   3d94c:	bne	3d9d4 <flatcc_json_printer_table_as_root@@Base+0x110>
   3d950:	ldr	r1, [r4, #20]
   3d954:	mov	r3, #125	; 0x7d
   3d958:	add	r2, r1, #1
   3d95c:	str	r2, [r4, #20]
   3d960:	strb	r3, [r1]
   3d964:	ldrb	r3, [r4, #25]
   3d968:	cmp	r3, #0
   3d96c:	bne	3d9b0 <flatcc_json_printer_table_as_root@@Base+0xec>
   3d970:	mov	r1, #1
   3d974:	mov	r0, r4
   3d978:	ldr	r3, [r4, #44]	; 0x2c
   3d97c:	blx	r3
   3d980:	ldr	r3, [r4, #36]	; 0x24
   3d984:	cmp	r3, #0
   3d988:	bne	3da38 <flatcc_json_printer_table_as_root@@Base+0x174>
   3d98c:	ldr	r2, [r4]
   3d990:	ldr	r3, [r4, #12]
   3d994:	ldr	r0, [r4, #20]
   3d998:	sub	r0, r0, r2
   3d99c:	add	r0, r0, r3
   3d9a0:	add	sp, sp, #28
   3d9a4:	ldrd	r4, [sp]
   3d9a8:	add	sp, sp, #8
   3d9ac:	pop	{pc}		; (ldr pc, [sp], #4)
   3d9b0:	ldr	r3, [r4, #32]
   3d9b4:	cmp	r3, #0
   3d9b8:	bne	3d970 <flatcc_json_printer_table_as_root@@Base+0xac>
   3d9bc:	ldr	r3, [r4, #20]
   3d9c0:	mov	r2, #10
   3d9c4:	add	r1, r3, #1
   3d9c8:	str	r1, [r4, #20]
   3d9cc:	strb	r2, [r3]
   3d9d0:	b	3d970 <flatcc_json_printer_table_as_root@@Base+0xac>
   3d9d4:	ldr	r3, [r4, #20]
   3d9d8:	mov	r2, #10
   3d9dc:	add	r1, r3, #1
   3d9e0:	str	r1, [r4, #20]
   3d9e4:	strb	r2, [r3]
   3d9e8:	ldrb	r1, [r4, #25]
   3d9ec:	ldr	r3, [r4, #32]
   3d9f0:	ldr	r2, [r4, #16]
   3d9f4:	ldr	r0, [r4, #20]
   3d9f8:	sub	r3, r3, #1
   3d9fc:	mul	r5, r3, r1
   3da00:	str	r3, [r4, #32]
   3da04:	add	r3, r0, r5
   3da08:	cmp	r2, r3
   3da0c:	bcs	3da20 <flatcc_json_printer_table_as_root@@Base+0x15c>
   3da10:	mov	r1, r5
   3da14:	mov	r0, r4
   3da18:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3da1c:	b	3d950 <flatcc_json_printer_table_as_root@@Base+0x8c>
   3da20:	mov	r1, #32
   3da24:	mov	r2, r5
   3da28:	bl	14594 <memset@plt>
   3da2c:	ldr	r1, [r4, #20]
   3da30:	add	r1, r1, r5
   3da34:	b	3d954 <flatcc_json_printer_table_as_root@@Base+0x90>
   3da38:	mvn	r0, #0
   3da3c:	b	3d9a0 <flatcc_json_printer_table_as_root@@Base+0xdc>

0003da40 <flatcc_json_printer_struct_as_nested_root@@Base>:
   3da40:	ldr	ip, [r1, #8]
   3da44:	add	r2, r2, #2
   3da48:	lsl	r2, r2, #1
   3da4c:	cmp	r2, ip
   3da50:	bxge	lr
   3da54:	ldr	ip, [r1, #4]
   3da58:	ldrh	r2, [ip, r2]
   3da5c:	cmp	r2, #0
   3da60:	bxeq	lr
   3da64:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3da68:	ldr	ip, [r1]
   3da6c:	strd	r6, [sp, #8]
   3da70:	strd	r8, [sp, #16]
   3da74:	str	sl, [sp, #24]
   3da78:	str	lr, [sp, #28]
   3da7c:	adds	r7, ip, r2
   3da80:	beq	3db28 <flatcc_json_printer_struct_as_nested_root@@Base+0xe8>
   3da84:	ldr	r5, [ip, r2]
   3da88:	mov	r6, r3
   3da8c:	mov	r9, r1
   3da90:	mov	r4, r0
   3da94:	ldr	r3, [sp, #36]	; 0x24
   3da98:	add	r8, r7, r5
   3da9c:	ldr	r2, [r7, r5]
   3daa0:	mov	r1, r8
   3daa4:	bl	3147c <flatcc_json_parser_struct_as_root@@Base+0x1380>
   3daa8:	cmp	r0, #0
   3daac:	beq	3db28 <flatcc_json_printer_struct_as_nested_root@@Base+0xe8>
   3dab0:	ldr	r3, [r9, #16]
   3dab4:	add	r2, r3, #1
   3dab8:	cmp	r3, #0
   3dabc:	str	r2, [r9, #16]
   3dac0:	bne	3db40 <flatcc_json_printer_struct_as_nested_root@@Base+0x100>
   3dac4:	mov	r1, r6
   3dac8:	mov	r0, r4
   3dacc:	ldr	r2, [sp, #32]
   3dad0:	bl	324a0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3dad4:	ldr	r2, [r4, #20]
   3dad8:	mov	r1, #123	; 0x7b
   3dadc:	mov	r0, r4
   3dae0:	ldr	r3, [r4, #32]
   3dae4:	add	ip, r2, #1
   3dae8:	add	r3, r3, #1
   3daec:	str	ip, [r4, #20]
   3daf0:	str	r3, [r4, #32]
   3daf4:	strb	r1, [r2]
   3daf8:	ldr	r1, [r7, r5]
   3dafc:	ldr	r3, [sp, #40]	; 0x28
   3db00:	add	r1, r8, r1
   3db04:	blx	r3
   3db08:	ldrb	r3, [r4, #25]
   3db0c:	cmp	r3, #0
   3db10:	ldr	r3, [r4, #20]
   3db14:	bne	3db58 <flatcc_json_printer_struct_as_nested_root@@Base+0x118>
   3db18:	add	r1, r3, #1
   3db1c:	mov	r2, #125	; 0x7d
   3db20:	str	r1, [r4, #20]
   3db24:	strb	r2, [r3]
   3db28:	ldrd	r4, [sp]
   3db2c:	ldrd	r6, [sp, #8]
   3db30:	ldrd	r8, [sp, #16]
   3db34:	ldr	sl, [sp, #24]
   3db38:	add	sp, sp, #28
   3db3c:	pop	{pc}		; (ldr pc, [sp], #4)
   3db40:	ldr	r3, [r4, #20]
   3db44:	mov	r2, #44	; 0x2c
   3db48:	add	r1, r3, #1
   3db4c:	str	r1, [r4, #20]
   3db50:	strb	r2, [r3]
   3db54:	b	3dac4 <flatcc_json_printer_struct_as_nested_root@@Base+0x84>
   3db58:	add	r1, r3, #1
   3db5c:	mov	r2, #10
   3db60:	str	r1, [r4, #20]
   3db64:	strb	r2, [r3]
   3db68:	ldrb	r3, [r4, #25]
   3db6c:	ldr	r2, [r4, #32]
   3db70:	ldr	r1, [r4, #16]
   3db74:	ldr	r0, [r4, #20]
   3db78:	sub	r2, r2, #1
   3db7c:	mul	r5, r2, r3
   3db80:	str	r2, [r4, #32]
   3db84:	add	r3, r0, r5
   3db88:	cmp	r1, r3
   3db8c:	bcs	3dba4 <flatcc_json_printer_struct_as_nested_root@@Base+0x164>
   3db90:	mov	r1, r5
   3db94:	mov	r0, r4
   3db98:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3db9c:	ldr	r3, [r4, #20]
   3dba0:	b	3db18 <flatcc_json_printer_struct_as_nested_root@@Base+0xd8>
   3dba4:	mov	r2, r5
   3dba8:	mov	r1, #32
   3dbac:	bl	14594 <memset@plt>
   3dbb0:	ldr	r3, [r4, #20]
   3dbb4:	add	r3, r3, r5
   3dbb8:	b	3db18 <flatcc_json_printer_struct_as_nested_root@@Base+0xd8>

0003dbbc <flatcc_json_printer_table_as_nested_root@@Base>:
   3dbbc:	ldr	ip, [r1, #8]
   3dbc0:	add	r2, r2, #2
   3dbc4:	lsl	r2, r2, #1
   3dbc8:	cmp	r2, ip
   3dbcc:	bxge	lr
   3dbd0:	ldr	ip, [r1, #4]
   3dbd4:	ldrh	r2, [ip, r2]
   3dbd8:	cmp	r2, #0
   3dbdc:	bxeq	lr
   3dbe0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   3dbe4:	ldr	ip, [r1]
   3dbe8:	strd	r6, [sp, #8]
   3dbec:	str	lr, [sp, #24]
   3dbf0:	strd	r8, [sp, #16]
   3dbf4:	sub	sp, sp, #28
   3dbf8:	adds	lr, ip, r2
   3dbfc:	beq	3dd88 <flatcc_json_printer_table_as_nested_root@@Base+0x1cc>
   3dc00:	ldr	r2, [ip, r2]
   3dc04:	mov	r6, r3
   3dc08:	mov	r5, r1
   3dc0c:	mov	r4, r0
   3dc10:	ldr	r3, [sp, #60]	; 0x3c
   3dc14:	add	r8, lr, r2
   3dc18:	ldr	r2, [lr, r2]
   3dc1c:	add	r7, r8, #4
   3dc20:	mov	r1, r7
   3dc24:	bl	3147c <flatcc_json_parser_struct_as_root@@Base+0x1380>
   3dc28:	cmp	r0, #0
   3dc2c:	beq	3dd88 <flatcc_json_printer_table_as_nested_root@@Base+0x1cc>
   3dc30:	ldr	r2, [r5, #16]
   3dc34:	ldr	r3, [r4, #20]
   3dc38:	cmp	r2, #0
   3dc3c:	add	r2, r2, #1
   3dc40:	str	r2, [r5, #16]
   3dc44:	bne	3ddb8 <flatcc_json_printer_table_as_nested_root@@Base+0x1fc>
   3dc48:	ldrb	r1, [r4, #25]
   3dc4c:	cmp	r1, #0
   3dc50:	bne	3ddd8 <flatcc_json_printer_table_as_nested_root@@Base+0x21c>
   3dc54:	ldr	r2, [r4, #16]
   3dc58:	cmp	r2, r3
   3dc5c:	bhi	3dc70 <flatcc_json_printer_table_as_nested_root@@Base+0xb4>
   3dc60:	mov	r0, r4
   3dc64:	ldr	r3, [r4, #44]	; 0x2c
   3dc68:	blx	r3
   3dc6c:	ldr	r3, [r4, #20]
   3dc70:	mov	r2, #34	; 0x22
   3dc74:	mov	r1, r6
   3dc78:	strb	r2, [r3]
   3dc7c:	ldrb	r3, [r4, #26]
   3dc80:	ldr	r2, [r4, #16]
   3dc84:	ldr	r0, [r4, #20]
   3dc88:	cmp	r3, #0
   3dc8c:	addeq	r0, r0, #1
   3dc90:	ldr	r3, [sp, #56]	; 0x38
   3dc94:	str	r0, [r4, #20]
   3dc98:	add	r3, r0, r3
   3dc9c:	cmp	r2, r3
   3dca0:	ldr	r2, [sp, #56]	; 0x38
   3dca4:	bhi	3dda0 <flatcc_json_printer_table_as_nested_root@@Base+0x1e4>
   3dca8:	mov	r0, r4
   3dcac:	bl	30f98 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3dcb0:	ldr	r3, [r4, #20]
   3dcb4:	mov	r2, #34	; 0x22
   3dcb8:	mov	r0, #58	; 0x3a
   3dcbc:	mov	r6, #32
   3dcc0:	strb	r2, [r3]
   3dcc4:	ldrb	r3, [r4, #26]
   3dcc8:	ldr	r1, [r4, #20]
   3dccc:	clz	r3, r3
   3dcd0:	lsr	r3, r3, #5
   3dcd4:	add	r2, r1, r3
   3dcd8:	add	r2, r2, #1
   3dcdc:	str	r2, [r4, #20]
   3dce0:	strb	r0, [r1, r3]
   3dce4:	ldr	r3, [r4, #20]
   3dce8:	strb	r6, [r3]
   3dcec:	ldrb	r3, [r4, #25]
   3dcf0:	ldr	ip, [r4, #20]
   3dcf4:	ldr	r1, [r5, #12]
   3dcf8:	adds	r3, r3, #0
   3dcfc:	movne	r3, #1
   3dd00:	add	r2, ip, r3
   3dd04:	subs	r0, r1, #1
   3dd08:	str	r2, [r4, #20]
   3dd0c:	beq	3de1c <flatcc_json_printer_table_as_nested_root@@Base+0x260>
   3dd10:	ldr	r1, [r4, #32]
   3dd14:	add	r2, r2, #1
   3dd18:	mov	r5, #0
   3dd1c:	ldr	lr, [r8, #4]
   3dd20:	mov	r8, #123	; 0x7b
   3dd24:	str	r2, [r4, #20]
   3dd28:	add	r2, r1, #1
   3dd2c:	add	r1, sp, #4
   3dd30:	str	r2, [r4, #32]
   3dd34:	strb	r8, [ip, r3]
   3dd38:	add	r3, r7, lr
   3dd3c:	str	r0, [sp, #16]
   3dd40:	mov	r0, r4
   3dd44:	str	r5, [sp, #20]
   3dd48:	ldr	r2, [r7, lr]
   3dd4c:	str	r3, [sp, #4]
   3dd50:	sub	r3, r3, r2
   3dd54:	ldrh	r2, [r3]
   3dd58:	str	r3, [sp, #8]
   3dd5c:	ldr	r3, [sp, #64]	; 0x40
   3dd60:	str	r2, [sp, #12]
   3dd64:	blx	r3
   3dd68:	ldrb	r3, [r4, #25]
   3dd6c:	cmp	r3, r5
   3dd70:	ldr	r3, [r4, #20]
   3dd74:	bne	3de30 <flatcc_json_printer_table_as_nested_root@@Base+0x274>
   3dd78:	add	r1, r3, #1
   3dd7c:	mov	r2, #125	; 0x7d
   3dd80:	str	r1, [r4, #20]
   3dd84:	strb	r2, [r3]
   3dd88:	add	sp, sp, #28
   3dd8c:	ldrd	r4, [sp]
   3dd90:	ldrd	r6, [sp, #8]
   3dd94:	ldrd	r8, [sp, #16]
   3dd98:	add	sp, sp, #24
   3dd9c:	pop	{pc}		; (ldr pc, [sp], #4)
   3dda0:	bl	1451c <memcpy@plt>
   3dda4:	ldr	r3, [r4, #20]
   3dda8:	ldr	r2, [sp, #56]	; 0x38
   3ddac:	add	r3, r3, r2
   3ddb0:	str	r3, [r4, #20]
   3ddb4:	b	3dcb4 <flatcc_json_printer_table_as_nested_root@@Base+0xf8>
   3ddb8:	add	r1, r3, #1
   3ddbc:	mov	r2, #44	; 0x2c
   3ddc0:	str	r1, [r4, #20]
   3ddc4:	strb	r2, [r3]
   3ddc8:	ldrb	r1, [r4, #25]
   3ddcc:	ldr	r3, [r4, #20]
   3ddd0:	cmp	r1, #0
   3ddd4:	beq	3dc54 <flatcc_json_printer_table_as_nested_root@@Base+0x98>
   3ddd8:	add	r1, r3, #1
   3dddc:	mov	r2, #10
   3dde0:	str	r1, [r4, #20]
   3dde4:	strb	r2, [r3]
   3dde8:	ldrb	r3, [r4, #25]
   3ddec:	ldr	r2, [r4, #16]
   3ddf0:	ldr	r9, [r4, #32]
   3ddf4:	ldr	r0, [r4, #20]
   3ddf8:	mul	r9, r9, r3
   3ddfc:	add	r3, r0, r9
   3de00:	cmp	r2, r3
   3de04:	bcs	3de7c <flatcc_json_printer_table_as_nested_root@@Base+0x2c0>
   3de08:	mov	r1, r9
   3de0c:	mov	r0, r4
   3de10:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3de14:	ldr	r3, [r4, #20]
   3de18:	b	3dc70 <flatcc_json_printer_table_as_nested_root@@Base+0xb4>
   3de1c:	ldr	r3, [r4, #36]	; 0x24
   3de20:	cmp	r3, #0
   3de24:	moveq	r3, #2
   3de28:	streq	r3, [r4, #36]	; 0x24
   3de2c:	b	3dd88 <flatcc_json_printer_table_as_nested_root@@Base+0x1cc>
   3de30:	add	r1, r3, #1
   3de34:	mov	r2, #10
   3de38:	str	r1, [r4, #20]
   3de3c:	strb	r2, [r3]
   3de40:	ldrb	r3, [r4, #25]
   3de44:	ldr	r2, [r4, #32]
   3de48:	ldr	r1, [r4, #16]
   3de4c:	ldr	r0, [r4, #20]
   3de50:	sub	r2, r2, #1
   3de54:	mul	r5, r2, r3
   3de58:	str	r2, [r4, #32]
   3de5c:	add	r3, r0, r5
   3de60:	cmp	r1, r3
   3de64:	bcs	3de98 <flatcc_json_printer_table_as_nested_root@@Base+0x2dc>
   3de68:	mov	r1, r5
   3de6c:	mov	r0, r4
   3de70:	bl	3105c <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3de74:	ldr	r3, [r4, #20]
   3de78:	b	3dd78 <flatcc_json_printer_table_as_nested_root@@Base+0x1bc>
   3de7c:	mov	r2, r9
   3de80:	mov	r1, #32
   3de84:	bl	14594 <memset@plt>
   3de88:	ldr	r3, [r4, #20]
   3de8c:	add	r3, r3, r9
   3de90:	str	r3, [r4, #20]
   3de94:	b	3dc70 <flatcc_json_printer_table_as_nested_root@@Base+0xb4>
   3de98:	mov	r1, r6
   3de9c:	mov	r2, r5
   3dea0:	bl	14594 <memset@plt>
   3dea4:	ldr	r3, [r4, #20]
   3dea8:	add	r3, r3, r5
   3deac:	b	3dd78 <flatcc_json_printer_table_as_nested_root@@Base+0x1bc>

0003deb0 <flatcc_json_printer_init@@Base>:
   3deb0:	strd	r4, [sp, #-16]!
   3deb4:	mov	r2, #48	; 0x30
   3deb8:	mov	r5, r1
   3debc:	str	r6, [sp, #8]
   3dec0:	mov	r1, #0
   3dec4:	mov	r4, r0
   3dec8:	ldr	r6, [pc, #128]	; 3df50 <flatcc_json_printer_init@@Base+0xa0>
   3decc:	str	lr, [sp, #12]
   3ded0:	bl	14594 <memset@plt>
   3ded4:	cmp	r5, #0
   3ded8:	add	r6, pc, r6
   3dedc:	beq	3df38 <flatcc_json_printer_init@@Base+0x88>
   3dee0:	ldr	r3, [pc, #108]	; 3df54 <flatcc_json_printer_init@@Base+0xa4>
   3dee4:	movw	r0, #16448	; 0x4040
   3dee8:	str	r5, [r4, #40]	; 0x28
   3deec:	add	r3, pc, r3
   3def0:	str	r3, [r4, #44]	; 0x2c
   3def4:	bl	1454c <malloc@plt>
   3def8:	cmp	r0, #0
   3defc:	str	r0, [r4]
   3df00:	beq	3df48 <flatcc_json_printer_init@@Base+0x98>
   3df04:	add	ip, r0, #16384	; 0x4000
   3df08:	mov	r3, #1
   3df0c:	movw	r1, #16448	; 0x4040
   3df10:	mov	r2, #16384	; 0x4000
   3df14:	str	r0, [r4, #20]
   3df18:	mov	r0, #0
   3df1c:	stmib	r4, {r1, r2}
   3df20:	str	ip, [r4, #16]
   3df24:	strb	r3, [r4, #24]
   3df28:	ldrd	r4, [sp]
   3df2c:	ldr	r6, [sp, #8]
   3df30:	add	sp, sp, #12
   3df34:	pop	{pc}		; (ldr pc, [sp], #4)
   3df38:	ldr	r3, [pc, #24]	; 3df58 <flatcc_json_printer_init@@Base+0xa8>
   3df3c:	ldr	r3, [r6, r3]
   3df40:	ldr	r5, [r3]
   3df44:	b	3dee0 <flatcc_json_printer_init@@Base+0x30>
   3df48:	mvn	r0, #0
   3df4c:	b	3df28 <flatcc_json_printer_init@@Base+0x78>
   3df50:	andeq	r7, r1, r0, lsr #2
   3df54:			; <UNDEFINED> instruction: 0xffff3290
   3df58:	andeq	r0, r0, r4, ror r0

0003df5c <flatcc_json_printer_init_buffer@@Base>:
   3df5c:	cmp	r2, #63	; 0x3f
   3df60:	strd	r4, [sp, #-16]!
   3df64:	str	r6, [sp, #8]
   3df68:	str	lr, [sp, #12]
   3df6c:	bls	3dfc8 <flatcc_json_printer_init_buffer@@Base+0x6c>
   3df70:	mov	r4, r0
   3df74:	mov	r6, r1
   3df78:	mov	r5, r2
   3df7c:	mov	r1, #0
   3df80:	mov	r2, #32
   3df84:	add	r0, r0, #12
   3df88:	bl	14594 <memset@plt>
   3df8c:	ldr	r3, [pc, #88]	; 3dfec <flatcc_json_printer_init_buffer@@Base+0x90>
   3df90:	sub	r2, r5, #64	; 0x40
   3df94:	mov	r0, #0
   3df98:	add	r1, r6, r2
   3df9c:	str	r6, [r4]
   3dfa0:	str	r5, [r4, #4]
   3dfa4:	str	r2, [r4, #8]
   3dfa8:	str	r1, [r4, #16]
   3dfac:	add	r3, pc, r3
   3dfb0:	str	r6, [r4, #20]
   3dfb4:	ldr	r6, [sp, #8]
   3dfb8:	str	r3, [r4, #44]	; 0x2c
   3dfbc:	ldrd	r4, [sp]
   3dfc0:	add	sp, sp, #12
   3dfc4:	pop	{pc}		; (ldr pc, [sp], #4)
   3dfc8:	ldr	r3, [pc, #32]	; 3dff0 <flatcc_json_printer_init_buffer@@Base+0x94>
   3dfcc:	movw	r2, #1165	; 0x48d
   3dfd0:	ldr	r1, [pc, #28]	; 3dff4 <flatcc_json_printer_init_buffer@@Base+0x98>
   3dfd4:	ldr	r0, [pc, #28]	; 3dff8 <flatcc_json_printer_init_buffer@@Base+0x9c>
   3dfd8:	add	r3, pc, r3
   3dfdc:	add	r3, r3, #1824	; 0x720
   3dfe0:	add	r1, pc, r1
   3dfe4:	add	r0, pc, r0
   3dfe8:	bl	145e8 <__assert_fail@plt>
   3dfec:			; <UNDEFINED> instruction: 0xffff2fa0
   3dff0:	muleq	r0, r0, r4
   3dff4:	andeq	r6, r0, r4, ror #23
   3dff8:	andeq	r6, r0, r4, lsl #28

0003dffc <flatcc_json_printer_init_dynamic_buffer@@Base>:
   3dffc:	cmp	r1, #0
   3e000:	strd	r4, [sp, #-16]!
   3e004:	mov	r4, r0
   3e008:	moveq	r5, #4096	; 0x1000
   3e00c:	str	r6, [sp, #8]
   3e010:	moveq	r6, #4032	; 0xfc0
   3e014:	str	lr, [sp, #12]
   3e018:	beq	3e02c <flatcc_json_printer_init_dynamic_buffer@@Base+0x30>
   3e01c:	cmp	r1, #64	; 0x40
   3e020:	movcs	r5, r1
   3e024:	movcc	r5, #64	; 0x40
   3e028:	sub	r6, r5, #64	; 0x40
   3e02c:	mov	r2, #32
   3e030:	mov	r1, #0
   3e034:	add	r0, r4, #12
   3e038:	bl	14594 <memset@plt>
   3e03c:	mov	r0, r5
   3e040:	bl	1454c <malloc@plt>
   3e044:	ldr	r3, [pc, #84]	; 3e0a0 <flatcc_json_printer_init_dynamic_buffer@@Base+0xa4>
   3e048:	add	r1, r0, r6
   3e04c:	mov	r2, #1
   3e050:	cmp	r0, #0
   3e054:	stm	r4, {r0, r5, r6}
   3e058:	str	r1, [r4, #16]
   3e05c:	add	r3, pc, r3
   3e060:	str	r0, [r4, #20]
   3e064:	movne	r0, #0
   3e068:	strb	r2, [r4, #24]
   3e06c:	str	r3, [r4, #44]	; 0x2c
   3e070:	beq	3e084 <flatcc_json_printer_init_dynamic_buffer@@Base+0x88>
   3e074:	ldrd	r4, [sp]
   3e078:	ldr	r6, [sp, #8]
   3e07c:	add	sp, sp, #12
   3e080:	pop	{pc}		; (ldr pc, [sp], #4)
   3e084:	ldr	r3, [r4, #36]	; 0x24
   3e088:	cmp	r3, #0
   3e08c:	moveq	r3, #3
   3e090:	mvneq	r0, #0
   3e094:	mvnne	r0, #0
   3e098:	streq	r3, [r4, #36]	; 0x24
   3e09c:	b	3e074 <flatcc_json_printer_init_dynamic_buffer@@Base+0x78>
   3e0a0:			; <UNDEFINED> instruction: 0xffff31d4

0003e0a4 <flatcc_json_printer_get_buffer@@Base>:
   3e0a4:	strd	r4, [sp, #-16]!
   3e0a8:	mov	r5, r1
   3e0ac:	mov	r1, #0
   3e0b0:	ldr	r3, [r0, #44]	; 0x2c
   3e0b4:	mov	r4, r0
   3e0b8:	str	r6, [sp, #8]
   3e0bc:	str	lr, [sp, #12]
   3e0c0:	blx	r3
   3e0c4:	cmp	r5, #0
   3e0c8:	ldr	r0, [r4]
   3e0cc:	ldrne	r3, [r4, #20]
   3e0d0:	ldr	r6, [sp, #8]
   3e0d4:	subne	r3, r3, r0
   3e0d8:	strne	r3, [r5]
   3e0dc:	ldrd	r4, [sp]
   3e0e0:	add	sp, sp, #12
   3e0e4:	pop	{pc}		; (ldr pc, [sp], #4)

0003e0e8 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   3e0e8:	strd	r4, [sp, #-16]!
   3e0ec:	mov	r5, r0
   3e0f0:	str	r6, [sp, #8]
   3e0f4:	str	lr, [sp, #12]
   3e0f8:	bl	3e0a4 <flatcc_json_printer_get_buffer@@Base>
   3e0fc:	mov	r4, r0
   3e100:	mov	r2, #48	; 0x30
   3e104:	mov	r0, r5
   3e108:	mov	r1, #0
   3e10c:	bl	14594 <memset@plt>
   3e110:	mov	r0, r4
   3e114:	ldrd	r4, [sp]
   3e118:	ldr	r6, [sp, #8]
   3e11c:	add	sp, sp, #12
   3e120:	pop	{pc}		; (ldr pc, [sp], #4)

0003e124 <flatcc_json_printer_clear@@Base>:
   3e124:	str	r4, [sp, #-8]!
   3e128:	mov	r4, r0
   3e12c:	str	lr, [sp, #4]
   3e130:	ldrb	r3, [r0, #24]
   3e134:	cmp	r3, #0
   3e138:	beq	3e14c <flatcc_json_printer_clear@@Base+0x28>
   3e13c:	ldr	r0, [r0]
   3e140:	cmp	r0, #0
   3e144:	beq	3e14c <flatcc_json_printer_clear@@Base+0x28>
   3e148:	bl	14510 <free@plt>
   3e14c:	mov	r0, r4
   3e150:	mov	r2, #48	; 0x30
   3e154:	ldr	r4, [sp]
   3e158:	mov	r1, #0
   3e15c:	ldr	lr, [sp, #4]
   3e160:	add	sp, sp, #8
   3e164:	b	14594 <memset@plt>
   3e168:	eor	r1, r1, #-2147483648	; 0x80000000
   3e16c:	b	3e174 <flatcc_json_printer_clear@@Base+0x50>
   3e170:	eor	r3, r3, #-2147483648	; 0x80000000
   3e174:	push	{r4, r5, lr}
   3e178:	lsl	r4, r1, #1
   3e17c:	lsl	r5, r3, #1
   3e180:	teq	r4, r5
   3e184:	teqeq	r0, r2
   3e188:	orrsne	ip, r4, r0
   3e18c:	orrsne	ip, r5, r2
   3e190:	mvnsne	ip, r4, asr #21
   3e194:	mvnsne	ip, r5, asr #21
   3e198:	beq	3e384 <flatcc_json_printer_clear@@Base+0x260>
   3e19c:	lsr	r4, r4, #21
   3e1a0:	rsbs	r5, r4, r5, lsr #21
   3e1a4:	rsblt	r5, r5, #0
   3e1a8:	ble	3e1c8 <flatcc_json_printer_clear@@Base+0xa4>
   3e1ac:	add	r4, r4, r5
   3e1b0:	eor	r2, r0, r2
   3e1b4:	eor	r3, r1, r3
   3e1b8:	eor	r0, r2, r0
   3e1bc:	eor	r1, r3, r1
   3e1c0:	eor	r2, r0, r2
   3e1c4:	eor	r3, r1, r3
   3e1c8:	cmp	r5, #54	; 0x36
   3e1cc:	pophi	{r4, r5, pc}
   3e1d0:	tst	r1, #-2147483648	; 0x80000000
   3e1d4:	lsl	r1, r1, #12
   3e1d8:	mov	ip, #1048576	; 0x100000
   3e1dc:	orr	r1, ip, r1, lsr #12
   3e1e0:	beq	3e1ec <flatcc_json_printer_clear@@Base+0xc8>
   3e1e4:	rsbs	r0, r0, #0
   3e1e8:	rsc	r1, r1, #0
   3e1ec:	tst	r3, #-2147483648	; 0x80000000
   3e1f0:	lsl	r3, r3, #12
   3e1f4:	orr	r3, ip, r3, lsr #12
   3e1f8:	beq	3e204 <flatcc_json_printer_clear@@Base+0xe0>
   3e1fc:	rsbs	r2, r2, #0
   3e200:	rsc	r3, r3, #0
   3e204:	teq	r4, r5
   3e208:	beq	3e36c <flatcc_json_printer_clear@@Base+0x248>
   3e20c:	sub	r4, r4, #1
   3e210:	rsbs	lr, r5, #32
   3e214:	blt	3e230 <flatcc_json_printer_clear@@Base+0x10c>
   3e218:	lsl	ip, r2, lr
   3e21c:	adds	r0, r0, r2, lsr r5
   3e220:	adc	r1, r1, #0
   3e224:	adds	r0, r0, r3, lsl lr
   3e228:	adcs	r1, r1, r3, asr r5
   3e22c:	b	3e24c <flatcc_json_printer_clear@@Base+0x128>
   3e230:	sub	r5, r5, #32
   3e234:	add	lr, lr, #32
   3e238:	cmp	r2, #1
   3e23c:	lsl	ip, r3, lr
   3e240:	orrcs	ip, ip, #2
   3e244:	adds	r0, r0, r3, asr r5
   3e248:	adcs	r1, r1, r3, asr #31
   3e24c:	and	r5, r1, #-2147483648	; 0x80000000
   3e250:	bpl	3e260 <flatcc_json_printer_clear@@Base+0x13c>
   3e254:	rsbs	ip, ip, #0
   3e258:	rscs	r0, r0, #0
   3e25c:	rsc	r1, r1, #0
   3e260:	cmp	r1, #1048576	; 0x100000
   3e264:	bcc	3e2a4 <flatcc_json_printer_clear@@Base+0x180>
   3e268:	cmp	r1, #2097152	; 0x200000
   3e26c:	bcc	3e28c <flatcc_json_printer_clear@@Base+0x168>
   3e270:	lsrs	r1, r1, #1
   3e274:	rrxs	r0, r0
   3e278:	rrx	ip, ip
   3e27c:	add	r4, r4, #1
   3e280:	lsl	r2, r4, #21
   3e284:	cmn	r2, #4194304	; 0x400000
   3e288:	bcs	3e3e4 <flatcc_json_printer_clear@@Base+0x2c0>
   3e28c:	cmp	ip, #-2147483648	; 0x80000000
   3e290:	lsrseq	ip, r0, #1
   3e294:	adcs	r0, r0, #0
   3e298:	adc	r1, r1, r4, lsl #20
   3e29c:	orr	r1, r1, r5
   3e2a0:	pop	{r4, r5, pc}
   3e2a4:	lsls	ip, ip, #1
   3e2a8:	adcs	r0, r0, r0
   3e2ac:	adc	r1, r1, r1
   3e2b0:	tst	r1, #1048576	; 0x100000
   3e2b4:	sub	r4, r4, #1
   3e2b8:	bne	3e28c <flatcc_json_printer_clear@@Base+0x168>
   3e2bc:	teq	r1, #0
   3e2c0:	moveq	r1, r0
   3e2c4:	moveq	r0, #0
   3e2c8:	clz	r3, r1
   3e2cc:	addeq	r3, r3, #32
   3e2d0:	sub	r3, r3, #11
   3e2d4:	subs	r2, r3, #32
   3e2d8:	bge	3e2fc <flatcc_json_printer_clear@@Base+0x1d8>
   3e2dc:	adds	r2, r2, #12
   3e2e0:	ble	3e2f8 <flatcc_json_printer_clear@@Base+0x1d4>
   3e2e4:	add	ip, r2, #20
   3e2e8:	rsb	r2, r2, #12
   3e2ec:	lsl	r0, r1, ip
   3e2f0:	lsr	r1, r1, r2
   3e2f4:	b	3e30c <flatcc_json_printer_clear@@Base+0x1e8>
   3e2f8:	add	r2, r2, #20
   3e2fc:	rsble	ip, r2, #32
   3e300:	lsl	r1, r1, r2
   3e304:	orrle	r1, r1, r0, lsr ip
   3e308:	lslle	r0, r0, r2
   3e30c:	subs	r4, r4, r3
   3e310:	addge	r1, r1, r4, lsl #20
   3e314:	orrge	r1, r1, r5
   3e318:	popge	{r4, r5, pc}
   3e31c:	mvn	r4, r4
   3e320:	subs	r4, r4, #31
   3e324:	bge	3e360 <flatcc_json_printer_clear@@Base+0x23c>
   3e328:	adds	r4, r4, #12
   3e32c:	bgt	3e348 <flatcc_json_printer_clear@@Base+0x224>
   3e330:	add	r4, r4, #20
   3e334:	rsb	r2, r4, #32
   3e338:	lsr	r0, r0, r4
   3e33c:	orr	r0, r0, r1, lsl r2
   3e340:	orr	r1, r5, r1, lsr r4
   3e344:	pop	{r4, r5, pc}
   3e348:	rsb	r4, r4, #12
   3e34c:	rsb	r2, r4, #32
   3e350:	lsr	r0, r0, r2
   3e354:	orr	r0, r0, r1, lsl r4
   3e358:	mov	r1, r5
   3e35c:	pop	{r4, r5, pc}
   3e360:	lsr	r0, r1, r4
   3e364:	mov	r1, r5
   3e368:	pop	{r4, r5, pc}
   3e36c:	teq	r4, #0
   3e370:	eor	r3, r3, #1048576	; 0x100000
   3e374:	eoreq	r1, r1, #1048576	; 0x100000
   3e378:	addeq	r4, r4, #1
   3e37c:	subne	r5, r5, #1
   3e380:	b	3e20c <flatcc_json_printer_clear@@Base+0xe8>
   3e384:	mvns	ip, r4, asr #21
   3e388:	mvnsne	ip, r5, asr #21
   3e38c:	beq	3e3f4 <flatcc_json_printer_clear@@Base+0x2d0>
   3e390:	teq	r4, r5
   3e394:	teqeq	r0, r2
   3e398:	beq	3e3ac <flatcc_json_printer_clear@@Base+0x288>
   3e39c:	orrs	ip, r4, r0
   3e3a0:	moveq	r1, r3
   3e3a4:	moveq	r0, r2
   3e3a8:	pop	{r4, r5, pc}
   3e3ac:	teq	r1, r3
   3e3b0:	movne	r1, #0
   3e3b4:	movne	r0, #0
   3e3b8:	popne	{r4, r5, pc}
   3e3bc:	lsrs	ip, r4, #21
   3e3c0:	bne	3e3d4 <flatcc_json_printer_clear@@Base+0x2b0>
   3e3c4:	lsls	r0, r0, #1
   3e3c8:	adcs	r1, r1, r1
   3e3cc:	orrcs	r1, r1, #-2147483648	; 0x80000000
   3e3d0:	pop	{r4, r5, pc}
   3e3d4:	adds	r4, r4, #4194304	; 0x400000
   3e3d8:	addcc	r1, r1, #1048576	; 0x100000
   3e3dc:	popcc	{r4, r5, pc}
   3e3e0:	and	r5, r1, #-2147483648	; 0x80000000
   3e3e4:	orr	r1, r5, #2130706432	; 0x7f000000
   3e3e8:	orr	r1, r1, #15728640	; 0xf00000
   3e3ec:	mov	r0, #0
   3e3f0:	pop	{r4, r5, pc}
   3e3f4:	mvns	ip, r4, asr #21
   3e3f8:	movne	r1, r3
   3e3fc:	movne	r0, r2
   3e400:	mvnseq	ip, r5, asr #21
   3e404:	movne	r3, r1
   3e408:	movne	r2, r0
   3e40c:	orrs	r4, r0, r1, lsl #12
   3e410:	orrseq	r5, r2, r3, lsl #12
   3e414:	teqeq	r1, r3
   3e418:	orrne	r1, r1, #524288	; 0x80000
   3e41c:	pop	{r4, r5, pc}
   3e420:	teq	r0, #0
   3e424:	moveq	r1, #0
   3e428:	bxeq	lr
   3e42c:	push	{r4, r5, lr}
   3e430:	mov	r4, #1024	; 0x400
   3e434:	add	r4, r4, #50	; 0x32
   3e438:	mov	r5, #0
   3e43c:	mov	r1, #0
   3e440:	b	3e2bc <flatcc_json_printer_clear@@Base+0x198>
   3e444:	teq	r0, #0
   3e448:	moveq	r1, #0
   3e44c:	bxeq	lr
   3e450:	push	{r4, r5, lr}
   3e454:	mov	r4, #1024	; 0x400
   3e458:	add	r4, r4, #50	; 0x32
   3e45c:	ands	r5, r0, #-2147483648	; 0x80000000
   3e460:	rsbmi	r0, r0, #0
   3e464:	mov	r1, #0
   3e468:	b	3e2bc <flatcc_json_printer_clear@@Base+0x198>
   3e46c:	lsls	r2, r0, #1
   3e470:	asr	r1, r2, #3
   3e474:	rrx	r1, r1
   3e478:	lsl	r0, r2, #28
   3e47c:	andsne	r3, r2, #-16777216	; 0xff000000
   3e480:	teqne	r3, #-16777216	; 0xff000000
   3e484:	eorne	r1, r1, #939524096	; 0x38000000
   3e488:	bxne	lr
   3e48c:	bics	r2, r2, #-16777216	; 0xff000000
   3e490:	bxeq	lr
   3e494:	teq	r3, #-16777216	; 0xff000000
   3e498:	orreq	r1, r1, #524288	; 0x80000
   3e49c:	bxeq	lr
   3e4a0:	push	{r4, r5, lr}
   3e4a4:	mov	r4, #896	; 0x380
   3e4a8:	and	r5, r1, #-2147483648	; 0x80000000
   3e4ac:	bic	r1, r1, #-2147483648	; 0x80000000
   3e4b0:	b	3e2bc <flatcc_json_printer_clear@@Base+0x198>
   3e4b4:	orrs	r2, r0, r1
   3e4b8:	bxeq	lr
   3e4bc:	push	{r4, r5, lr}
   3e4c0:	mov	r5, #0
   3e4c4:	b	3e4e4 <flatcc_json_printer_clear@@Base+0x3c0>
   3e4c8:	orrs	r2, r0, r1
   3e4cc:	bxeq	lr
   3e4d0:	push	{r4, r5, lr}
   3e4d4:	ands	r5, r1, #-2147483648	; 0x80000000
   3e4d8:	bpl	3e4e4 <flatcc_json_printer_clear@@Base+0x3c0>
   3e4dc:	rsbs	r0, r0, #0
   3e4e0:	rsc	r1, r1, #0
   3e4e4:	mov	r4, #1024	; 0x400
   3e4e8:	add	r4, r4, #50	; 0x32
   3e4ec:	lsrs	ip, r1, #22
   3e4f0:	beq	3e260 <flatcc_json_printer_clear@@Base+0x13c>
   3e4f4:	mov	r2, #3
   3e4f8:	lsrs	ip, ip, #3
   3e4fc:	addne	r2, r2, #3
   3e500:	lsrs	ip, ip, #3
   3e504:	addne	r2, r2, #3
   3e508:	add	r2, r2, ip, lsr #3
   3e50c:	rsb	r3, r2, #32
   3e510:	lsl	ip, r0, r3
   3e514:	lsr	r0, r0, r2
   3e518:	orr	r0, r0, r1, lsl r3
   3e51c:	lsr	r1, r1, r2
   3e520:	add	r4, r4, r2
   3e524:	b	3e260 <flatcc_json_printer_clear@@Base+0x13c>
   3e528:	eor	r0, r0, #-2147483648	; 0x80000000
   3e52c:	b	3e534 <flatcc_json_printer_clear@@Base+0x410>
   3e530:	eor	r1, r1, #-2147483648	; 0x80000000
   3e534:	lsls	r2, r0, #1
   3e538:	lslsne	r3, r1, #1
   3e53c:	teqne	r2, r3
   3e540:	mvnsne	ip, r2, asr #24
   3e544:	mvnsne	ip, r3, asr #24
   3e548:	beq	3e640 <flatcc_json_printer_clear@@Base+0x51c>
   3e54c:	lsr	r2, r2, #24
   3e550:	rsbs	r3, r2, r3, lsr #24
   3e554:	addgt	r2, r2, r3
   3e558:	eorgt	r1, r0, r1
   3e55c:	eorgt	r0, r1, r0
   3e560:	eorgt	r1, r0, r1
   3e564:	rsblt	r3, r3, #0
   3e568:	cmp	r3, #25
   3e56c:	bxhi	lr
   3e570:	tst	r0, #-2147483648	; 0x80000000
   3e574:	orr	r0, r0, #8388608	; 0x800000
   3e578:	bic	r0, r0, #-16777216	; 0xff000000
   3e57c:	rsbne	r0, r0, #0
   3e580:	tst	r1, #-2147483648	; 0x80000000
   3e584:	orr	r1, r1, #8388608	; 0x800000
   3e588:	bic	r1, r1, #-16777216	; 0xff000000
   3e58c:	rsbne	r1, r1, #0
   3e590:	teq	r2, r3
   3e594:	beq	3e628 <flatcc_json_printer_clear@@Base+0x504>
   3e598:	sub	r2, r2, #1
   3e59c:	adds	r0, r0, r1, asr r3
   3e5a0:	rsb	r3, r3, #32
   3e5a4:	lsl	r1, r1, r3
   3e5a8:	and	r3, r0, #-2147483648	; 0x80000000
   3e5ac:	bpl	3e5b8 <flatcc_json_printer_clear@@Base+0x494>
   3e5b0:	rsbs	r1, r1, #0
   3e5b4:	rsc	r0, r0, #0
   3e5b8:	cmp	r0, #8388608	; 0x800000
   3e5bc:	bcc	3e5f0 <flatcc_json_printer_clear@@Base+0x4cc>
   3e5c0:	cmp	r0, #16777216	; 0x1000000
   3e5c4:	bcc	3e5dc <flatcc_json_printer_clear@@Base+0x4b8>
   3e5c8:	lsrs	r0, r0, #1
   3e5cc:	rrx	r1, r1
   3e5d0:	add	r2, r2, #1
   3e5d4:	cmp	r2, #254	; 0xfe
   3e5d8:	bcs	3e694 <flatcc_json_printer_clear@@Base+0x570>
   3e5dc:	cmp	r1, #-2147483648	; 0x80000000
   3e5e0:	adc	r0, r0, r2, lsl #23
   3e5e4:	biceq	r0, r0, #1
   3e5e8:	orr	r0, r0, r3
   3e5ec:	bx	lr
   3e5f0:	lsls	r1, r1, #1
   3e5f4:	adc	r0, r0, r0
   3e5f8:	tst	r0, #8388608	; 0x800000
   3e5fc:	sub	r2, r2, #1
   3e600:	bne	3e5dc <flatcc_json_printer_clear@@Base+0x4b8>
   3e604:	clz	ip, r0
   3e608:	sub	ip, ip, #8
   3e60c:	subs	r2, r2, ip
   3e610:	lsl	r0, r0, ip
   3e614:	addge	r0, r0, r2, lsl #23
   3e618:	rsblt	r2, r2, #0
   3e61c:	orrge	r0, r0, r3
   3e620:	orrlt	r0, r3, r0, lsr r2
   3e624:	bx	lr
   3e628:	teq	r2, #0
   3e62c:	eor	r1, r1, #8388608	; 0x800000
   3e630:	eoreq	r0, r0, #8388608	; 0x800000
   3e634:	addeq	r2, r2, #1
   3e638:	subne	r3, r3, #1
   3e63c:	b	3e598 <flatcc_json_printer_clear@@Base+0x474>
   3e640:	lsl	r3, r1, #1
   3e644:	mvns	ip, r2, asr #24
   3e648:	mvnsne	ip, r3, asr #24
   3e64c:	beq	3e6a0 <flatcc_json_printer_clear@@Base+0x57c>
   3e650:	teq	r2, r3
   3e654:	beq	3e664 <flatcc_json_printer_clear@@Base+0x540>
   3e658:	teq	r2, #0
   3e65c:	moveq	r0, r1
   3e660:	bx	lr
   3e664:	teq	r0, r1
   3e668:	movne	r0, #0
   3e66c:	bxne	lr
   3e670:	tst	r2, #-16777216	; 0xff000000
   3e674:	bne	3e684 <flatcc_json_printer_clear@@Base+0x560>
   3e678:	lsls	r0, r0, #1
   3e67c:	orrcs	r0, r0, #-2147483648	; 0x80000000
   3e680:	bx	lr
   3e684:	adds	r2, r2, #33554432	; 0x2000000
   3e688:	addcc	r0, r0, #8388608	; 0x800000
   3e68c:	bxcc	lr
   3e690:	and	r3, r0, #-2147483648	; 0x80000000
   3e694:	orr	r0, r3, #2130706432	; 0x7f000000
   3e698:	orr	r0, r0, #8388608	; 0x800000
   3e69c:	bx	lr
   3e6a0:	mvns	r2, r2, asr #24
   3e6a4:	movne	r0, r1
   3e6a8:	mvnseq	r3, r3, asr #24
   3e6ac:	movne	r1, r0
   3e6b0:	lsls	r2, r0, #9
   3e6b4:	lslseq	r3, r1, #9
   3e6b8:	teqeq	r0, r1
   3e6bc:	orrne	r0, r0, #4194304	; 0x400000
   3e6c0:	bx	lr
   3e6c4:	mov	r3, #0
   3e6c8:	b	3e6d4 <flatcc_json_printer_clear@@Base+0x5b0>
   3e6cc:	ands	r3, r0, #-2147483648	; 0x80000000
   3e6d0:	rsbmi	r0, r0, #0
   3e6d4:	movs	ip, r0
   3e6d8:	bxeq	lr
   3e6dc:	orr	r3, r3, #1258291200	; 0x4b000000
   3e6e0:	mov	r1, r0
   3e6e4:	mov	r0, #0
   3e6e8:	b	3e72c <flatcc_json_printer_clear@@Base+0x608>
   3e6ec:	orrs	r2, r0, r1
   3e6f0:	bxeq	lr
   3e6f4:	mov	r3, #0
   3e6f8:	b	3e714 <flatcc_json_printer_clear@@Base+0x5f0>
   3e6fc:	orrs	r2, r0, r1
   3e700:	bxeq	lr
   3e704:	ands	r3, r1, #-2147483648	; 0x80000000
   3e708:	bpl	3e714 <flatcc_json_printer_clear@@Base+0x5f0>
   3e70c:	rsbs	r0, r0, #0
   3e710:	rsc	r1, r1, #0
   3e714:	movs	ip, r1
   3e718:	moveq	ip, r0
   3e71c:	moveq	r1, r0
   3e720:	moveq	r0, #0
   3e724:	orr	r3, r3, #1526726656	; 0x5b000000
   3e728:	subeq	r3, r3, #268435456	; 0x10000000
   3e72c:	sub	r3, r3, #8388608	; 0x800000
   3e730:	clz	r2, ip
   3e734:	subs	r2, r2, #8
   3e738:	sub	r3, r3, r2, lsl #23
   3e73c:	blt	3e75c <flatcc_json_printer_clear@@Base+0x638>
   3e740:	add	r3, r3, r1, lsl r2
   3e744:	lsl	ip, r0, r2
   3e748:	rsb	r2, r2, #32
   3e74c:	cmp	ip, #-2147483648	; 0x80000000
   3e750:	adc	r0, r3, r0, lsr r2
   3e754:	biceq	r0, r0, #1
   3e758:	bx	lr
   3e75c:	add	r2, r2, #32
   3e760:	lsl	ip, r1, r2
   3e764:	rsb	r2, r2, #32
   3e768:	orrs	r0, r0, ip, lsl #1
   3e76c:	adc	r0, r3, r1, lsr r2
   3e770:	biceq	r0, r0, ip, lsr #31
   3e774:	bx	lr
   3e778:	cmp	r3, #0
   3e77c:	cmpeq	r2, #0
   3e780:	bne	3e7a4 <flatcc_json_printer_clear@@Base+0x680>
   3e784:	cmp	r1, #0
   3e788:	movlt	r1, #-2147483648	; 0x80000000
   3e78c:	movlt	r0, #0
   3e790:	blt	3e7a0 <flatcc_json_printer_clear@@Base+0x67c>
   3e794:	cmpeq	r0, #0
   3e798:	mvnne	r1, #-2147483648	; 0x80000000
   3e79c:	mvnne	r0, #0
   3e7a0:	b	3e888 <flatcc_json_printer_clear@@Base+0x764>
   3e7a4:	sub	sp, sp, #8
   3e7a8:	push	{sp, lr}
   3e7ac:	cmp	r1, #0
   3e7b0:	blt	3e7d0 <flatcc_json_printer_clear@@Base+0x6ac>
   3e7b4:	cmp	r3, #0
   3e7b8:	blt	3e804 <flatcc_json_printer_clear@@Base+0x6e0>
   3e7bc:	bl	3e898 <flatcc_json_printer_clear@@Base+0x774>
   3e7c0:	ldr	lr, [sp, #4]
   3e7c4:	add	sp, sp, #8
   3e7c8:	pop	{r2, r3}
   3e7cc:	bx	lr
   3e7d0:	rsbs	r0, r0, #0
   3e7d4:	sbc	r1, r1, r1, lsl #1
   3e7d8:	cmp	r3, #0
   3e7dc:	blt	3e828 <flatcc_json_printer_clear@@Base+0x704>
   3e7e0:	bl	3e898 <flatcc_json_printer_clear@@Base+0x774>
   3e7e4:	ldr	lr, [sp, #4]
   3e7e8:	add	sp, sp, #8
   3e7ec:	pop	{r2, r3}
   3e7f0:	rsbs	r0, r0, #0
   3e7f4:	sbc	r1, r1, r1, lsl #1
   3e7f8:	rsbs	r2, r2, #0
   3e7fc:	sbc	r3, r3, r3, lsl #1
   3e800:	bx	lr
   3e804:	rsbs	r2, r2, #0
   3e808:	sbc	r3, r3, r3, lsl #1
   3e80c:	bl	3e898 <flatcc_json_printer_clear@@Base+0x774>
   3e810:	ldr	lr, [sp, #4]
   3e814:	add	sp, sp, #8
   3e818:	pop	{r2, r3}
   3e81c:	rsbs	r0, r0, #0
   3e820:	sbc	r1, r1, r1, lsl #1
   3e824:	bx	lr
   3e828:	rsbs	r2, r2, #0
   3e82c:	sbc	r3, r3, r3, lsl #1
   3e830:	bl	3e898 <flatcc_json_printer_clear@@Base+0x774>
   3e834:	ldr	lr, [sp, #4]
   3e838:	add	sp, sp, #8
   3e83c:	pop	{r2, r3}
   3e840:	rsbs	r2, r2, #0
   3e844:	sbc	r3, r3, r3, lsl #1
   3e848:	bx	lr
   3e84c:	cmp	r3, #0
   3e850:	cmpeq	r2, #0
   3e854:	bne	3e86c <flatcc_json_printer_clear@@Base+0x748>
   3e858:	cmp	r1, #0
   3e85c:	cmpeq	r0, #0
   3e860:	mvnne	r1, #0
   3e864:	mvnne	r0, #0
   3e868:	b	3e888 <flatcc_json_printer_clear@@Base+0x764>
   3e86c:	sub	sp, sp, #8
   3e870:	push	{sp, lr}
   3e874:	bl	3e898 <flatcc_json_printer_clear@@Base+0x774>
   3e878:	ldr	lr, [sp, #4]
   3e87c:	add	sp, sp, #8
   3e880:	pop	{r2, r3}
   3e884:	bx	lr
   3e888:	push	{r1, lr}
   3e88c:	mov	r0, #8
   3e890:	bl	144ec <raise@plt>
   3e894:	pop	{r1, pc}
   3e898:	cmp	r1, r3
   3e89c:	cmpeq	r0, r2
   3e8a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e8a4:	mov	r4, r0
   3e8a8:	movcc	r0, #0
   3e8ac:	mov	r5, r1
   3e8b0:	ldr	lr, [sp, #36]	; 0x24
   3e8b4:	movcc	r1, r0
   3e8b8:	bcc	3e9b4 <flatcc_json_printer_clear@@Base+0x890>
   3e8bc:	cmp	r3, #0
   3e8c0:	clzeq	ip, r2
   3e8c4:	clzne	ip, r3
   3e8c8:	addeq	ip, ip, #32
   3e8cc:	cmp	r5, #0
   3e8d0:	clzeq	r1, r4
   3e8d4:	addeq	r1, r1, #32
   3e8d8:	clzne	r1, r5
   3e8dc:	sub	ip, ip, r1
   3e8e0:	sub	sl, ip, #32
   3e8e4:	lsl	r9, r3, ip
   3e8e8:	rsb	fp, ip, #32
   3e8ec:	orr	r9, r9, r2, lsl sl
   3e8f0:	orr	r9, r9, r2, lsr fp
   3e8f4:	lsl	r8, r2, ip
   3e8f8:	cmp	r5, r9
   3e8fc:	cmpeq	r4, r8
   3e900:	movcc	r0, #0
   3e904:	movcc	r1, r0
   3e908:	bcc	3e924 <flatcc_json_printer_clear@@Base+0x800>
   3e90c:	mov	r0, #1
   3e910:	subs	r4, r4, r8
   3e914:	lsl	r1, r0, sl
   3e918:	orr	r1, r1, r0, lsr fp
   3e91c:	lsl	r0, r0, ip
   3e920:	sbc	r5, r5, r9
   3e924:	cmp	ip, #0
   3e928:	beq	3e9b4 <flatcc_json_printer_clear@@Base+0x890>
   3e92c:	lsr	r6, r8, #1
   3e930:	orr	r6, r6, r9, lsl #31
   3e934:	lsr	r7, r9, #1
   3e938:	mov	r2, ip
   3e93c:	b	3e960 <flatcc_json_printer_clear@@Base+0x83c>
   3e940:	subs	r3, r4, r6
   3e944:	sbc	r8, r5, r7
   3e948:	adds	r3, r3, r3
   3e94c:	adc	r8, r8, r8
   3e950:	adds	r4, r3, #1
   3e954:	adc	r5, r8, #0
   3e958:	subs	r2, r2, #1
   3e95c:	beq	3e97c <flatcc_json_printer_clear@@Base+0x858>
   3e960:	cmp	r5, r7
   3e964:	cmpeq	r4, r6
   3e968:	bcs	3e940 <flatcc_json_printer_clear@@Base+0x81c>
   3e96c:	adds	r4, r4, r4
   3e970:	adc	r5, r5, r5
   3e974:	subs	r2, r2, #1
   3e978:	bne	3e960 <flatcc_json_printer_clear@@Base+0x83c>
   3e97c:	lsr	r3, r4, ip
   3e980:	orr	r3, r3, r5, lsl fp
   3e984:	lsr	r2, r5, ip
   3e988:	orr	r3, r3, r5, lsr sl
   3e98c:	adds	r0, r0, r4
   3e990:	mov	r4, r3
   3e994:	lsl	r3, r2, ip
   3e998:	orr	r3, r3, r4, lsl sl
   3e99c:	lsl	ip, r4, ip
   3e9a0:	orr	r3, r3, r4, lsr fp
   3e9a4:	adc	r1, r1, r5
   3e9a8:	subs	r0, r0, ip
   3e9ac:	mov	r5, r2
   3e9b0:	sbc	r1, r1, r3
   3e9b4:	cmp	lr, #0
   3e9b8:	strdne	r4, [lr]
   3e9bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003e9c0 <__libc_csu_init@@Base>:
   3e9c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3e9c4:	mov	r7, r0
   3e9c8:	ldr	r6, [pc, #72]	; 3ea18 <__libc_csu_init@@Base+0x58>
   3e9cc:	ldr	r5, [pc, #72]	; 3ea1c <__libc_csu_init@@Base+0x5c>
   3e9d0:	add	r6, pc, r6
   3e9d4:	add	r5, pc, r5
   3e9d8:	sub	r6, r6, r5
   3e9dc:	mov	r8, r1
   3e9e0:	mov	r9, r2
   3e9e4:	bl	144cc <raise@plt-0x20>
   3e9e8:	asrs	r6, r6, #2
   3e9ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3e9f0:	mov	r4, #0
   3e9f4:	add	r4, r4, #1
   3e9f8:	ldr	r3, [r5], #4
   3e9fc:	mov	r2, r9
   3ea00:	mov	r1, r8
   3ea04:	mov	r0, r7
   3ea08:	blx	r3
   3ea0c:	cmp	r6, r4
   3ea10:	bne	3e9f4 <__libc_csu_init@@Base+0x34>
   3ea14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ea18:	andeq	r6, r1, ip, lsl #10
   3ea1c:	andeq	r6, r1, r4, lsl #10

0003ea20 <__libc_csu_fini@@Base>:
   3ea20:	bx	lr

Disassembly of section .fini:

0003ea24 <.fini>:
   3ea24:	push	{r3, lr}
   3ea28:	pop	{r3, pc}
