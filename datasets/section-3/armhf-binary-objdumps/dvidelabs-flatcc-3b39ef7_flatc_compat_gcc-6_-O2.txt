
../repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/flatc_compat:     file format elf32-littlearm


Disassembly of section .init:

00010cbc <.init>:
   10cbc:	push	{r3, lr}
   10cc0:	bl	11270 <_start@@Base+0x3c>
   10cc4:	pop	{r3, pc}

Disassembly of section .plt:

00010cc8 <strcmp@plt-0x14>:
   10cc8:	push	{lr}		; (str lr, [sp, #-4]!)
   10ccc:	ldr	lr, [pc, #4]	; 10cd8 <strcmp@plt-0x4>
   10cd0:	add	lr, pc, lr
   10cd4:	ldr	pc, [lr, #8]!
   10cd8:	andeq	r4, r1, r8, lsr #6

00010cdc <strcmp@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #20, 20	; 0x14000
   10ce4:	ldr	pc, [ip, #808]!	; 0x328

00010ce8 <printf@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #20, 20	; 0x14000
   10cf0:	ldr	pc, [ip, #800]!	; 0x320

00010cf4 <fopen@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #20, 20	; 0x14000
   10cfc:	ldr	pc, [ip, #792]!	; 0x318

00010d00 <free@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #20, 20	; 0x14000
   10d08:	ldr	pc, [ip, #784]!	; 0x310

00010d0c <memcpy@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #20, 20	; 0x14000
   10d14:	ldr	pc, [ip, #776]!	; 0x308

00010d18 <ftell@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #20, 20	; 0x14000
   10d20:	ldr	pc, [ip, #768]!	; 0x300

00010d24 <rewind@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #20, 20	; 0x14000
   10d2c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d30 <fwrite@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #20, 20	; 0x14000
   10d38:	ldr	pc, [ip, #752]!	; 0x2f0

00010d3c <fread@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #20, 20	; 0x14000
   10d44:	ldr	pc, [ip, #744]!	; 0x2e8

00010d48 <puts@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #20, 20	; 0x14000
   10d50:	ldr	pc, [ip, #736]!	; 0x2e0

00010d54 <malloc@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #20, 20	; 0x14000
   10d5c:	ldr	pc, [ip, #728]!	; 0x2d8

00010d60 <__libc_start_main@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #20, 20	; 0x14000
   10d68:	ldr	pc, [ip, #720]!	; 0x2d0

00010d6c <__gmon_start__@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #20, 20	; 0x14000
   10d74:	ldr	pc, [ip, #712]!	; 0x2c8

00010d78 <exit@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #20, 20	; 0x14000
   10d80:	ldr	pc, [ip, #704]!	; 0x2c0

00010d84 <fprintf@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #20, 20	; 0x14000
   10d8c:	ldr	pc, [ip, #696]!	; 0x2b8

00010d90 <posix_memalign@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #20, 20	; 0x14000
   10d98:	ldr	pc, [ip, #688]!	; 0x2b0

00010d9c <strncpy@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #20, 20	; 0x14000
   10da4:	ldr	pc, [ip, #680]!	; 0x2a8

00010da8 <fclose@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #20, 20	; 0x14000
   10db0:	ldr	pc, [ip, #672]!	; 0x2a0

00010db4 <fputc@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #20, 20	; 0x14000
   10dbc:	ldr	pc, [ip, #664]!	; 0x298

00010dc0 <fseek@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #20, 20	; 0x14000
   10dc8:	ldr	pc, [ip, #656]!	; 0x290

00010dcc <abort@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #20, 20	; 0x14000
   10dd4:	ldr	pc, [ip, #648]!	; 0x288

00010dd8 <__assert_fail@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #20, 20	; 0x14000
   10de0:	ldr	pc, [ip, #640]!	; 0x280

Disassembly of section .text:

00010de8 <main@@Base-0x9c>:
   10de8:	ldr	r3, [pc, #28]	; 10e0c <__assert_fail@plt+0x34>
   10dec:	ldr	r1, [pc, #28]	; 10e10 <__assert_fail@plt+0x38>
   10df0:	ldr	r0, [pc, #28]	; 10e14 <__assert_fail@plt+0x3c>
   10df4:	push	{r4, lr}
   10df8:	add	r3, pc, r3
   10dfc:	mov	r2, #108	; 0x6c
   10e00:	add	r1, pc, r1
   10e04:	add	r0, pc, r0
   10e08:	bl	10dd8 <__assert_fail@plt>
   10e0c:	andeq	r2, r0, r0, lsl #28
   10e10:	andeq	r2, r0, ip, asr lr
   10e14:	ldrdeq	r2, [r0], -r8
   10e18:	ldr	r3, [pc, #32]	; 10e40 <__assert_fail@plt+0x68>
   10e1c:	ldr	r1, [pc, #32]	; 10e44 <__assert_fail@plt+0x6c>
   10e20:	ldr	r0, [pc, #32]	; 10e48 <__assert_fail@plt+0x70>
   10e24:	add	r3, pc, r3
   10e28:	push	{r4, lr}
   10e2c:	add	r3, r3, #28
   10e30:	ldr	r2, [pc, #20]	; 10e4c <__assert_fail@plt+0x74>
   10e34:	add	r1, pc, r1
   10e38:	add	r0, pc, r0
   10e3c:	bl	10dd8 <__assert_fail@plt>
   10e40:	ldrdeq	r2, [r0], -r4
   10e44:	andeq	r2, r0, r0, ror #29
   10e48:	andeq	r2, r0, r8, asr pc
   10e4c:			; <UNDEFINED> instruction: 0x000002bb
   10e50:	ldr	r3, [pc, #32]	; 10e78 <__assert_fail@plt+0xa0>
   10e54:	ldr	r1, [pc, #32]	; 10e7c <__assert_fail@plt+0xa4>
   10e58:	ldr	r0, [pc, #32]	; 10e80 <__assert_fail@plt+0xa8>
   10e5c:	add	r3, pc, r3
   10e60:	push	{r4, lr}
   10e64:	mov	r2, #380	; 0x17c
   10e68:	add	r3, r3, #56	; 0x38
   10e6c:	add	r1, pc, r1
   10e70:	add	r0, pc, r0
   10e74:	bl	10dd8 <__assert_fail@plt>
   10e78:	muleq	r0, ip, sp
   10e7c:	andeq	r2, r0, r8, lsr #29
   10e80:	andeq	r2, r0, ip, ror #28

00010e84 <main@@Base>:
   10e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e88:	sub	r3, r0, #1
   10e8c:	ldr	r9, [pc, #864]	; 111f4 <main@@Base+0x370>
   10e90:	cmp	r3, #1
   10e94:	sub	sp, sp, #44	; 0x2c
   10e98:	add	r9, pc, r9
   10e9c:	bhi	111cc <main@@Base+0x348>
   10ea0:	ldr	r3, [pc, #848]	; 111f8 <main@@Base+0x374>
   10ea4:	cmp	r0, #2
   10ea8:	ldreq	r3, [r9, r3]
   10eac:	ldrne	r3, [r9, r3]
   10eb0:	ldreq	r2, [r1, #4]
   10eb4:	ldr	r1, [pc, #832]	; 111fc <main@@Base+0x378>
   10eb8:	streq	r2, [r3]
   10ebc:	add	r1, pc, r1
   10ec0:	ldr	r0, [r3]
   10ec4:	bl	10cf4 <fopen@plt>
   10ec8:	subs	r8, r0, #0
   10ecc:	beq	111c0 <main@@Base+0x33c>
   10ed0:	mov	r2, #2
   10ed4:	mov	r1, #0
   10ed8:	bl	10dc0 <fseek@plt>
   10edc:	mov	r0, r8
   10ee0:	bl	10d18 <ftell@plt>
   10ee4:	cmp	r0, #1024	; 0x400
   10ee8:	mov	r7, r0
   10eec:	bhi	111b0 <main@@Base+0x32c>
   10ef0:	mov	r0, r8
   10ef4:	bl	10d24 <rewind@plt>
   10ef8:	cmp	r7, #0
   10efc:	movne	r0, r7
   10f00:	moveq	r0, #1
   10f04:	bl	10d54 <malloc@plt>
   10f08:	subs	r6, r0, #0
   10f0c:	beq	111b0 <main@@Base+0x32c>
   10f10:	mov	r4, #0
   10f14:	mov	sl, #1
   10f18:	b	10f20 <main@@Base+0x9c>
   10f1c:	add	r4, r4, r0
   10f20:	mov	r3, r8
   10f24:	sub	r2, r7, r4
   10f28:	mov	r1, sl
   10f2c:	add	r0, r6, r4
   10f30:	bl	10d3c <fread@plt>
   10f34:	cmp	r0, #0
   10f38:	bne	10f1c <main@@Base+0x98>
   10f3c:	cmp	r7, r4
   10f40:	mov	r5, r0
   10f44:	mov	r0, r8
   10f48:	bne	1109c <main@@Base+0x218>
   10f4c:	bl	10da8 <fclose@plt>
   10f50:	add	sl, sp, #40	; 0x28
   10f54:	mov	r4, #0
   10f58:	add	r2, r7, #255	; 0xff
   10f5c:	str	r4, [sl, #-20]!	; 0xffffffec
   10f60:	bic	r2, r2, #255	; 0xff
   10f64:	mov	r0, sl
   10f68:	mov	r1, #256	; 0x100
   10f6c:	bl	10d90 <posix_memalign@plt>
   10f70:	ldr	r3, [sp, #20]
   10f74:	str	r3, [sp]
   10f78:	cmp	r0, r4
   10f7c:	beq	10f98 <main@@Base+0x114>
   10f80:	cmp	r3, #0
   10f84:	beq	10f98 <main@@Base+0x114>
   10f88:	mov	r0, r3
   10f8c:	str	r4, [sp]
   10f90:	bl	10d00 <free@plt>
   10f94:	str	r4, [sp, #20]
   10f98:	mov	r2, r7
   10f9c:	mov	r1, r6
   10fa0:	ldr	r0, [sp]
   10fa4:	bl	10d0c <memcpy@plt>
   10fa8:	mov	r0, r6
   10fac:	bl	10d00 <free@plt>
   10fb0:	ldr	r3, [pc, #584]	; 11200 <main@@Base+0x37c>
   10fb4:	ldr	r2, [pc, #584]	; 11204 <main@@Base+0x380>
   10fb8:	ldr	r1, [pc, #584]	; 11208 <main@@Base+0x384>
   10fbc:	ldr	r3, [r9, r3]
   10fc0:	add	r2, pc, r2
   10fc4:	add	r1, pc, r1
   10fc8:	ldr	r5, [r3]
   10fcc:	str	r3, [sp, #12]
   10fd0:	mov	r0, r5
   10fd4:	bl	10d84 <fprintf@plt>
   10fd8:	cmp	r7, #0
   10fdc:	beq	110ec <main@@Base+0x268>
   10fe0:	ldr	r3, [pc, #548]	; 1120c <main@@Base+0x388>
   10fe4:	ldr	r9, [pc, #548]	; 11210 <main@@Base+0x38c>
   10fe8:	add	r3, pc, r3
   10fec:	str	r3, [sp, #4]
   10ff0:	ldr	r3, [pc, #540]	; 11214 <main@@Base+0x390>
   10ff4:	mov	fp, #0
   10ff8:	add	r3, pc, r3
   10ffc:	str	r3, [sp, #8]
   11000:	ldr	r3, [sp]
   11004:	add	r9, pc, r9
   11008:	mov	r8, fp
   1100c:	sub	r6, r3, #1
   11010:	b	1107c <main@@Base+0x1f8>
   11014:	cmp	fp, #0
   11018:	beq	1102c <main@@Base+0x1a8>
   1101c:	mov	r2, sl
   11020:	ldr	r1, [sp, #8]
   11024:	mov	r0, r5
   11028:	bl	10d84 <fprintf@plt>
   1102c:	mov	r2, fp
   11030:	ldr	r1, [sp, #4]
   11034:	mov	r0, r5
   11038:	bl	10d84 <fprintf@plt>
   1103c:	ldrb	r2, [r6, #1]
   11040:	mov	r1, r9
   11044:	mov	r0, r5
   11048:	bl	10d84 <fprintf@plt>
   1104c:	ldrb	r2, [r6, #1]!
   11050:	add	r3, sp, #40	; 0x28
   11054:	add	r4, r3, r4
   11058:	sub	r1, r2, #32
   1105c:	cmp	r1, #94	; 0x5e
   11060:	movhi	r3, #46	; 0x2e
   11064:	add	fp, fp, #1
   11068:	strbhi	r3, [r4, #-20]	; 0xffffffec
   1106c:	strbls	r2, [r4, #-20]	; 0xffffffec
   11070:	cmp	fp, r7
   11074:	strb	r8, [r4, #-19]	; 0xffffffed
   11078:	beq	110b0 <main@@Base+0x22c>
   1107c:	ands	r4, fp, #15
   11080:	beq	11014 <main@@Base+0x190>
   11084:	tst	fp, #7
   11088:	bne	1103c <main@@Base+0x1b8>
   1108c:	mov	r1, r5
   11090:	mov	r0, #32
   11094:	bl	10db4 <fputc@plt>
   11098:	b	1103c <main@@Base+0x1b8>
   1109c:	bl	10da8 <fclose@plt>
   110a0:	mov	r0, r6
   110a4:	bl	10d00 <free@plt>
   110a8:	mov	r6, r5
   110ac:	b	10f50 <main@@Base+0xcc>
   110b0:	tst	r7, #15
   110b4:	beq	110ec <main@@Base+0x268>
   110b8:	ldr	r9, [pc, #344]	; 11218 <main@@Base+0x394>
   110bc:	mov	r4, r7
   110c0:	add	r9, pc, r9
   110c4:	mov	r8, #3
   110c8:	mov	r6, #1
   110cc:	add	r4, r4, #1
   110d0:	mov	r3, r5
   110d4:	mov	r2, r8
   110d8:	mov	r1, r6
   110dc:	mov	r0, r9
   110e0:	bl	10d30 <fwrite@plt>
   110e4:	tst	r4, #15
   110e8:	bne	110cc <main@@Base+0x248>
   110ec:	ldr	r6, [pc, #296]	; 1121c <main@@Base+0x398>
   110f0:	ldr	r4, [pc, #296]	; 11220 <main@@Base+0x39c>
   110f4:	ldr	r1, [pc, #296]	; 11224 <main@@Base+0x3a0>
   110f8:	mov	r2, sl
   110fc:	add	r1, pc, r1
   11100:	add	r6, pc, r6
   11104:	add	r4, pc, r4
   11108:	mov	r0, r5
   1110c:	bl	10d84 <fprintf@plt>
   11110:	mov	r3, r6
   11114:	mov	r2, r4
   11118:	mov	r1, r7
   1111c:	ldr	r0, [sp]
   11120:	bl	13324 <flatcc_verify_table_as_root@@Base>
   11124:	cmp	r0, #0
   11128:	beq	11160 <main@@Base+0x2dc>
   1112c:	ldr	r3, [sp, #12]
   11130:	ldr	r0, [pc, #240]	; 11228 <main@@Base+0x3a4>
   11134:	mov	r2, #38	; 0x26
   11138:	ldr	r3, [r3]
   1113c:	mov	r1, #1
   11140:	add	r0, pc, r0
   11144:	bl	10d30 <fwrite@plt>
   11148:	mvn	r4, #0
   1114c:	ldr	r0, [sp]
   11150:	bl	10d00 <free@plt>
   11154:	mov	r0, r4
   11158:	add	sp, sp, #44	; 0x2c
   1115c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11160:	mov	r3, r6
   11164:	mov	r2, r4
   11168:	mov	r1, r7
   1116c:	ldr	r0, [sp]
   11170:	bl	13324 <flatcc_verify_table_as_root@@Base>
   11174:	cmp	r0, #0
   11178:	beq	111a0 <main@@Base+0x31c>
   1117c:	ldr	r3, [sp, #12]
   11180:	ldr	r0, [pc, #164]	; 1122c <main@@Base+0x3a8>
   11184:	mov	r2, #62	; 0x3e
   11188:	ldr	r3, [r3]
   1118c:	mov	r1, #1
   11190:	add	r0, pc, r0
   11194:	bl	10d30 <fwrite@plt>
   11198:	mvn	r4, #0
   1119c:	b	1114c <main@@Base+0x2c8>
   111a0:	ldr	r0, [sp]
   111a4:	bl	11cb4 <verify_monster@@Base>
   111a8:	mov	r4, r0
   111ac:	b	1114c <main@@Base+0x2c8>
   111b0:	mov	r0, r8
   111b4:	bl	10da8 <fclose@plt>
   111b8:	mov	r6, #0
   111bc:	b	10f50 <main@@Base+0xcc>
   111c0:	mov	r7, r8
   111c4:	mov	r6, r8
   111c8:	b	10f50 <main@@Base+0xcc>
   111cc:	ldr	r3, [pc, #44]	; 11200 <main@@Base+0x37c>
   111d0:	ldr	r0, [pc, #88]	; 11230 <main@@Base+0x3ac>
   111d4:	mov	r2, #63	; 0x3f
   111d8:	ldr	r3, [r9, r3]
   111dc:	mov	r1, #1
   111e0:	add	r0, pc, r0
   111e4:	ldr	r3, [r3]
   111e8:	bl	10d30 <fwrite@plt>
   111ec:	mov	r0, #1
   111f0:	bl	10d78 <exit@plt>
   111f4:	andeq	r4, r1, r0, ror #2
   111f8:	andeq	r0, r0, ip, rrx
   111fc:			; <UNDEFINED> instruction: 0x000034b4
   11200:	andeq	r0, r0, r4, rrx
   11204:			; <UNDEFINED> instruction: 0x000033b4
   11208:	andeq	r3, r0, r8, asr #7
   1120c:			; <UNDEFINED> instruction: 0x000033bc
   11210:	andeq	r3, r0, r8, lsr #7
   11214:	muleq	r0, ip, r3
   11218:	strdeq	r3, [r0], -r4
   1121c:	andeq	r0, r0, r4, asr #9
   11220:	muleq	r0, r8, r2
   11224:	muleq	r0, r8, r2
   11228:	andeq	r3, r0, r8, ror r2
   1122c:	andeq	r3, r0, r0, asr r2
   11230:	andeq	r3, r0, r0, asr r1

00011234 <_start@@Base>:
   11234:	mov	fp, #0
   11238:	mov	lr, #0
   1123c:	pop	{r1}		; (ldr r1, [sp], #4)
   11240:	mov	r2, sp
   11244:	push	{r2}		; (str r2, [sp, #-4]!)
   11248:	push	{r0}		; (str r0, [sp, #-4]!)
   1124c:	ldr	ip, [pc, #16]	; 11264 <_start@@Base+0x30>
   11250:	push	{ip}		; (str ip, [sp, #-4]!)
   11254:	ldr	r0, [pc, #12]	; 11268 <_start@@Base+0x34>
   11258:	ldr	r3, [pc, #12]	; 1126c <_start@@Base+0x38>
   1125c:	bl	10d60 <__libc_start_main@plt>
   11260:	bl	10dcc <abort@plt>
   11264:	strdeq	r3, [r1], -r0
   11268:	andeq	r0, r1, r4, lsl #29
   1126c:	muleq	r1, r0, fp
   11270:	ldr	r3, [pc, #20]	; 1128c <_start@@Base+0x58>
   11274:	ldr	r2, [pc, #20]	; 11290 <_start@@Base+0x5c>
   11278:	add	r3, pc, r3
   1127c:	ldr	r2, [r3, r2]
   11280:	cmp	r2, #0
   11284:	bxeq	lr
   11288:	b	10d6c <__gmon_start__@plt>
   1128c:	andeq	r3, r1, r0, lsl #27
   11290:	andeq	r0, r0, r8, rrx
   11294:	ldr	r3, [pc, #28]	; 112b8 <_start@@Base+0x84>
   11298:	ldr	r0, [pc, #28]	; 112bc <_start@@Base+0x88>
   1129c:	sub	r3, r3, r0
   112a0:	cmp	r3, #6
   112a4:	bxls	lr
   112a8:	ldr	r3, [pc, #16]	; 112c0 <_start@@Base+0x8c>
   112ac:	cmp	r3, #0
   112b0:	bxeq	lr
   112b4:	bx	r3
   112b8:	andeq	r5, r2, pc, ror r0
   112bc:	andeq	r5, r2, ip, ror r0
   112c0:	andeq	r0, r0, r0
   112c4:	ldr	r1, [pc, #36]	; 112f0 <_start@@Base+0xbc>
   112c8:	ldr	r0, [pc, #36]	; 112f4 <_start@@Base+0xc0>
   112cc:	sub	r1, r1, r0
   112d0:	asr	r1, r1, #2
   112d4:	add	r1, r1, r1, lsr #31
   112d8:	asrs	r1, r1, #1
   112dc:	bxeq	lr
   112e0:	ldr	r3, [pc, #16]	; 112f8 <_start@@Base+0xc4>
   112e4:	cmp	r3, #0
   112e8:	bxeq	lr
   112ec:	bx	r3
   112f0:	andeq	r5, r2, ip, ror r0
   112f4:	andeq	r5, r2, ip, ror r0
   112f8:	andeq	r0, r0, r0
   112fc:	push	{r4, lr}
   11300:	ldr	r4, [pc, #24]	; 11320 <_start@@Base+0xec>
   11304:	ldrb	r3, [r4]
   11308:	cmp	r3, #0
   1130c:	popne	{r4, pc}
   11310:	bl	11294 <_start@@Base+0x60>
   11314:	mov	r3, #1
   11318:	strb	r3, [r4]
   1131c:	pop	{r4, pc}
   11320:	andeq	r5, r2, ip, ror r0
   11324:	ldr	r0, [pc, #40]	; 11354 <_start@@Base+0x120>
   11328:	ldr	r3, [r0]
   1132c:	cmp	r3, #0
   11330:	bne	11338 <_start@@Base+0x104>
   11334:	b	112c4 <_start@@Base+0x90>
   11338:	ldr	r3, [pc, #24]	; 11358 <_start@@Base+0x124>
   1133c:	cmp	r3, #0
   11340:	beq	11334 <_start@@Base+0x100>
   11344:	push	{r4, lr}
   11348:	blx	r3
   1134c:	pop	{r4, lr}
   11350:	b	112c4 <_start@@Base+0x90>
   11354:	andeq	r4, r2, r4, lsl pc
	...
   11360:	mov	r0, #0
   11364:	bx	lr
   11368:	mov	r3, #4
   1136c:	mov	r2, r3
   11370:	mov	r1, #0
   11374:	b	12898 <flatcc_verify_field@@Base>
   11378:	mov	r3, #8
   1137c:	push	{r4, lr}
   11380:	mov	r2, r3
   11384:	mov	r1, #0
   11388:	mov	r4, r0
   1138c:	bl	12898 <flatcc_verify_field@@Base>
   11390:	cmp	r0, #0
   11394:	popne	{r4, pc}
   11398:	mov	r3, #4
   1139c:	mov	r0, r4
   113a0:	mov	r2, r3
   113a4:	mov	r1, #1
   113a8:	pop	{r4, lr}
   113ac:	b	12898 <flatcc_verify_field@@Base>
   113b0:	mov	r3, #1
   113b4:	push	{r4, lr}
   113b8:	mov	r2, r3
   113bc:	mov	r1, #0
   113c0:	mov	r4, r0
   113c4:	bl	12898 <flatcc_verify_field@@Base>
   113c8:	cmp	r0, #0
   113cc:	popne	{r4, pc}
   113d0:	mov	r3, #1
   113d4:	mov	r2, r3
   113d8:	mov	r1, r3
   113dc:	mov	r0, r4
   113e0:	bl	12898 <flatcc_verify_field@@Base>
   113e4:	cmp	r0, #0
   113e8:	popne	{r4, pc}
   113ec:	mov	r3, #1
   113f0:	mov	r2, r3
   113f4:	mov	r1, #2
   113f8:	mov	r0, r4
   113fc:	bl	12898 <flatcc_verify_field@@Base>
   11400:	cmp	r0, #0
   11404:	popne	{r4, pc}
   11408:	mov	r3, #1
   1140c:	mov	r0, r4
   11410:	mov	r2, r3
   11414:	mov	r1, #3
   11418:	pop	{r4, lr}
   1141c:	b	12898 <flatcc_verify_field@@Base>
   11420:	mov	r2, #0
   11424:	push	{r4, lr}
   11428:	mov	r1, r2
   1142c:	mov	r4, r0
   11430:	bl	12908 <flatcc_verify_string_field@@Base>
   11434:	cmp	r0, #0
   11438:	popne	{r4, pc}
   1143c:	mov	r3, #8
   11440:	mov	r2, r3
   11444:	mov	r1, #1
   11448:	mov	r0, r4
   1144c:	bl	12898 <flatcc_verify_field@@Base>
   11450:	cmp	r0, #0
   11454:	popne	{r4, pc}
   11458:	mov	r3, #2
   1145c:	mov	r0, r4
   11460:	mov	r2, r3
   11464:	mov	r1, r3
   11468:	pop	{r4, lr}
   1146c:	b	12898 <flatcc_verify_field@@Base>
   11470:	mov	r2, #0
   11474:	push	{r4, lr}
   11478:	mov	r1, r2
   1147c:	mov	r4, r0
   11480:	bl	12908 <flatcc_verify_string_field@@Base>
   11484:	cmp	r0, #0
   11488:	popne	{r4, pc}
   1148c:	mov	r3, #4
   11490:	mov	r2, r3
   11494:	mov	r1, #1
   11498:	mov	r0, r4
   1149c:	bl	12898 <flatcc_verify_field@@Base>
   114a0:	cmp	r0, #0
   114a4:	popne	{r4, pc}
   114a8:	mov	r2, r0
   114ac:	mov	r1, #2
   114b0:	mov	r0, r4
   114b4:	bl	12908 <flatcc_verify_string_field@@Base>
   114b8:	cmp	r0, #0
   114bc:	popne	{r4, pc}
   114c0:	mov	r3, #8
   114c4:	mov	r2, r3
   114c8:	mov	r1, #3
   114cc:	mov	r0, r4
   114d0:	bl	12898 <flatcc_verify_field@@Base>
   114d4:	cmp	r0, #0
   114d8:	popne	{r4, pc}
   114dc:	mov	r2, r0
   114e0:	mov	r1, #4
   114e4:	mov	r0, r4
   114e8:	bl	12908 <flatcc_verify_string_field@@Base>
   114ec:	cmp	r0, #0
   114f0:	popne	{r4, pc}
   114f4:	mov	r3, #8
   114f8:	mov	r2, r3
   114fc:	mov	r1, #5
   11500:	mov	r0, r4
   11504:	bl	12898 <flatcc_verify_field@@Base>
   11508:	cmp	r0, #0
   1150c:	popne	{r4, pc}
   11510:	mov	r3, #4
   11514:	mov	r2, r3
   11518:	mov	r1, #6
   1151c:	mov	r0, r4
   11520:	bl	12898 <flatcc_verify_field@@Base>
   11524:	cmp	r0, #0
   11528:	popne	{r4, pc}
   1152c:	mov	r3, #8
   11530:	mov	r2, r3
   11534:	mov	r1, #7
   11538:	mov	r0, r4
   1153c:	bl	12898 <flatcc_verify_field@@Base>
   11540:	cmp	r0, #0
   11544:	popne	{r4, pc}
   11548:	mov	r3, #4
   1154c:	mov	r0, r4
   11550:	mov	r2, r3
   11554:	mov	r1, #8
   11558:	pop	{r4, lr}
   1155c:	b	12898 <flatcc_verify_field@@Base>
   11560:	ldr	r3, [pc, #88]	; 115c0 <_start@@Base+0x38c>
   11564:	mov	r2, #0
   11568:	push	{r4, lr}
   1156c:	mov	r1, r2
   11570:	add	r3, pc, r3
   11574:	mov	r4, r0
   11578:	bl	12ba4 <flatcc_verify_table_field@@Base>
   1157c:	cmp	r0, #0
   11580:	popne	{r4, pc}
   11584:	ldr	r3, [pc, #56]	; 115c4 <_start@@Base+0x390>
   11588:	mov	r2, r0
   1158c:	add	r3, pc, r3
   11590:	mov	r1, #1
   11594:	mov	r0, r4
   11598:	bl	12ba4 <flatcc_verify_table_field@@Base>
   1159c:	cmp	r0, #0
   115a0:	popne	{r4, pc}
   115a4:	ldr	r3, [pc, #28]	; 115c8 <_start@@Base+0x394>
   115a8:	mov	r2, r0
   115ac:	add	r3, pc, r3
   115b0:	mov	r0, r4
   115b4:	mov	r1, #2
   115b8:	pop	{r4, lr}
   115bc:	b	12ba4 <flatcc_verify_table_field@@Base>
   115c0:			; <UNDEFINED> instruction: 0xfffffef8
   115c4:	andeq	r0, r0, r8, ror #13
   115c8:			; <UNDEFINED> instruction: 0xfffffdc4
   115cc:	push	{r4, r5, r6, r7, r8, lr}
   115d0:	mov	r3, #16
   115d4:	sub	sp, sp, #8
   115d8:	mov	r2, #32
   115dc:	mov	r1, #0
   115e0:	mov	r4, r0
   115e4:	bl	12898 <flatcc_verify_field@@Base>
   115e8:	cmp	r0, #0
   115ec:	beq	115f8 <_start@@Base+0x3c4>
   115f0:	add	sp, sp, #8
   115f4:	pop	{r4, r5, r6, r7, r8, pc}
   115f8:	mov	r3, #2
   115fc:	mov	r2, r3
   11600:	mov	r1, r3
   11604:	mov	r0, r4
   11608:	bl	12898 <flatcc_verify_field@@Base>
   1160c:	cmp	r0, #0
   11610:	bne	115f0 <_start@@Base+0x3bc>
   11614:	mov	r3, #2
   11618:	mov	r2, r3
   1161c:	mov	r1, #1
   11620:	mov	r0, r4
   11624:	bl	12898 <flatcc_verify_field@@Base>
   11628:	cmp	r0, #0
   1162c:	bne	115f0 <_start@@Base+0x3bc>
   11630:	mov	r2, #1
   11634:	mov	r1, #3
   11638:	mov	r0, r4
   1163c:	bl	12908 <flatcc_verify_string_field@@Base>
   11640:	cmp	r0, #0
   11644:	bne	115f0 <_start@@Base+0x3bc>
   11648:	mov	r3, #1
   1164c:	mov	r2, r3
   11650:	mov	r1, #6
   11654:	mov	r0, r4
   11658:	bl	12898 <flatcc_verify_field@@Base>
   1165c:	cmp	r0, #0
   11660:	bne	115f0 <_start@@Base+0x3bc>
   11664:	mov	r5, #1
   11668:	mvn	r6, #0
   1166c:	mov	r2, r0
   11670:	stm	sp, {r5, r6}
   11674:	mov	r3, r5
   11678:	mov	r1, #5
   1167c:	mov	r0, r4
   11680:	bl	1299c <flatcc_verify_vector_field@@Base>
   11684:	cmp	r0, #0
   11688:	bne	115f0 <_start@@Base+0x3bc>
   1168c:	ldr	r3, [pc, #868]	; 119f8 <_start@@Base+0x7c4>
   11690:	mov	r2, r0
   11694:	add	r3, pc, r3
   11698:	mov	r1, #11
   1169c:	mov	r0, r4
   116a0:	bl	12cb8 <flatcc_verify_table_vector_field@@Base>
   116a4:	cmp	r0, #0
   116a8:	bne	115f0 <_start@@Base+0x3bc>
   116ac:	mov	r2, r0
   116b0:	mov	r1, #10
   116b4:	mov	r0, r4
   116b8:	bl	12a44 <flatcc_verify_string_vector_field@@Base>
   116bc:	cmp	r0, #0
   116c0:	bne	115f0 <_start@@Base+0x3bc>
   116c4:	mov	r2, r0
   116c8:	mov	r1, #28
   116cc:	mov	r0, r4
   116d0:	bl	12a44 <flatcc_verify_string_vector_field@@Base>
   116d4:	cmp	r0, #0
   116d8:	bne	115f0 <_start@@Base+0x3bc>
   116dc:	mov	r2, r0
   116e0:	stm	sp, {r5, r6}
   116e4:	mov	r3, r5
   116e8:	mov	r1, #24
   116ec:	mov	r0, r4
   116f0:	bl	1299c <flatcc_verify_vector_field@@Base>
   116f4:	cmp	r0, #0
   116f8:	bne	115f0 <_start@@Base+0x3bc>
   116fc:	mvn	r3, #-536870912	; 0xe0000000
   11700:	mov	r5, #4
   11704:	str	r3, [sp, #4]
   11708:	str	r5, [sp]
   1170c:	mov	r3, #8
   11710:	mov	r2, #0
   11714:	mov	r1, #29
   11718:	mov	r0, r4
   1171c:	bl	1299c <flatcc_verify_vector_field@@Base>
   11720:	cmp	r0, #0
   11724:	bne	115f0 <_start@@Base+0x3bc>
   11728:	ldr	r7, [pc, #716]	; 119fc <_start@@Base+0x7c8>
   1172c:	mov	r2, r0
   11730:	add	r7, pc, r7
   11734:	mov	r3, r7
   11738:	mov	r1, #12
   1173c:	mov	r0, r4
   11740:	bl	12ba4 <flatcc_verify_table_field@@Base>
   11744:	cmp	r0, #0
   11748:	bne	115f0 <_start@@Base+0x3bc>
   1174c:	ldr	r3, [pc, #684]	; 11a00 <_start@@Base+0x7cc>
   11750:	mov	r2, r0
   11754:	add	r3, pc, r3
   11758:	mov	r1, #8
   1175c:	mov	r0, r4
   11760:	bl	137b0 <flatcc_verify_union_field@@Base>
   11764:	cmp	r0, #0
   11768:	bne	115f0 <_start@@Base+0x3bc>
   1176c:	mvn	r8, #-1073741824	; 0xc0000000
   11770:	mov	r6, #2
   11774:	mov	r2, r0
   11778:	stm	sp, {r6, r8}
   1177c:	mov	r3, r5
   11780:	mov	r1, #9
   11784:	mov	r0, r4
   11788:	bl	1299c <flatcc_verify_vector_field@@Base>
   1178c:	cmp	r0, #0
   11790:	bne	115f0 <_start@@Base+0x3bc>
   11794:	mov	r2, r0
   11798:	stm	sp, {r6, r8}
   1179c:	mov	r3, r5
   117a0:	mov	r1, #31
   117a4:	mov	r0, r4
   117a8:	bl	1299c <flatcc_verify_vector_field@@Base>
   117ac:	cmp	r0, #0
   117b0:	bne	115f0 <_start@@Base+0x3bc>
   117b4:	mov	r6, #1
   117b8:	mov	r3, r0
   117bc:	mov	r2, r0
   117c0:	stm	sp, {r6, r7}
   117c4:	mov	r1, #13
   117c8:	mov	r0, r4
   117cc:	bl	135f4 <flatcc_verify_table_as_nested_root@@Base>
   117d0:	cmp	r0, #0
   117d4:	bne	115f0 <_start@@Base+0x3bc>
   117d8:	ldr	r3, [pc, #548]	; 11a04 <_start@@Base+0x7d0>
   117dc:	mov	r2, r0
   117e0:	add	r3, pc, r3
   117e4:	mov	r1, #14
   117e8:	mov	r0, r4
   117ec:	bl	12ba4 <flatcc_verify_table_field@@Base>
   117f0:	cmp	r0, #0
   117f4:	bne	115f0 <_start@@Base+0x3bc>
   117f8:	mov	r3, r6
   117fc:	mov	r2, r6
   11800:	mov	r1, #15
   11804:	mov	r0, r4
   11808:	bl	12898 <flatcc_verify_field@@Base>
   1180c:	cmp	r0, #0
   11810:	bne	115f0 <_start@@Base+0x3bc>
   11814:	mov	r3, r5
   11818:	mov	r2, r5
   1181c:	mov	r1, #16
   11820:	mov	r0, r4
   11824:	bl	12898 <flatcc_verify_field@@Base>
   11828:	cmp	r0, #0
   1182c:	bne	115f0 <_start@@Base+0x3bc>
   11830:	mov	r3, r5
   11834:	mov	r2, r5
   11838:	mov	r1, #17
   1183c:	mov	r0, r4
   11840:	bl	12898 <flatcc_verify_field@@Base>
   11844:	cmp	r0, #0
   11848:	bne	115f0 <_start@@Base+0x3bc>
   1184c:	mov	r3, #8
   11850:	mov	r2, r3
   11854:	mov	r1, #18
   11858:	mov	r0, r4
   1185c:	bl	12898 <flatcc_verify_field@@Base>
   11860:	cmp	r0, #0
   11864:	bne	115f0 <_start@@Base+0x3bc>
   11868:	mov	r3, #8
   1186c:	mov	r2, r3
   11870:	mov	r1, #19
   11874:	mov	r0, r4
   11878:	bl	12898 <flatcc_verify_field@@Base>
   1187c:	cmp	r0, #0
   11880:	bne	115f0 <_start@@Base+0x3bc>
   11884:	mov	r3, r5
   11888:	mov	r2, r5
   1188c:	mov	r1, #20
   11890:	mov	r0, r4
   11894:	bl	12898 <flatcc_verify_field@@Base>
   11898:	cmp	r0, #0
   1189c:	bne	115f0 <_start@@Base+0x3bc>
   118a0:	mov	r3, r5
   118a4:	mov	r2, r5
   118a8:	mov	r1, #21
   118ac:	mov	r0, r4
   118b0:	bl	12898 <flatcc_verify_field@@Base>
   118b4:	cmp	r0, #0
   118b8:	bne	115f0 <_start@@Base+0x3bc>
   118bc:	mov	r3, #8
   118c0:	mov	r2, r3
   118c4:	mov	r1, #22
   118c8:	mov	r0, r4
   118cc:	bl	12898 <flatcc_verify_field@@Base>
   118d0:	cmp	r0, #0
   118d4:	bne	115f0 <_start@@Base+0x3bc>
   118d8:	mov	r3, #8
   118dc:	mov	r2, r3
   118e0:	mov	r1, #23
   118e4:	mov	r0, r4
   118e8:	bl	12898 <flatcc_verify_field@@Base>
   118ec:	cmp	r0, #0
   118f0:	bne	115f0 <_start@@Base+0x3bc>
   118f4:	mov	r3, r5
   118f8:	mov	r2, r5
   118fc:	mov	r1, #25
   11900:	mov	r0, r4
   11904:	bl	12898 <flatcc_verify_field@@Base>
   11908:	cmp	r0, #0
   1190c:	bne	115f0 <_start@@Base+0x3bc>
   11910:	mov	r3, r5
   11914:	mov	r2, r5
   11918:	mov	r1, #26
   1191c:	mov	r0, r4
   11920:	bl	12898 <flatcc_verify_field@@Base>
   11924:	cmp	r0, #0
   11928:	bne	115f0 <_start@@Base+0x3bc>
   1192c:	mov	r3, r5
   11930:	mov	r2, r5
   11934:	mov	r1, #27
   11938:	mov	r0, r4
   1193c:	bl	12898 <flatcc_verify_field@@Base>
   11940:	cmp	r0, #0
   11944:	bne	115f0 <_start@@Base+0x3bc>
   11948:	mvn	r1, #0
   1194c:	mov	r2, r0
   11950:	str	r1, [sp, #4]
   11954:	mov	r3, r6
   11958:	str	r6, [sp]
   1195c:	mov	r1, #30
   11960:	mov	r0, r4
   11964:	bl	1299c <flatcc_verify_vector_field@@Base>
   11968:	cmp	r0, #0
   1196c:	bne	115f0 <_start@@Base+0x3bc>
   11970:	mov	r5, #8
   11974:	mvn	r6, #-536870912	; 0xe0000000
   11978:	mov	r3, r5
   1197c:	stm	sp, {r5, r6}
   11980:	mov	r2, #0
   11984:	mov	r1, #32
   11988:	mov	r0, r4
   1198c:	bl	1299c <flatcc_verify_vector_field@@Base>
   11990:	cmp	r0, #0
   11994:	bne	115f0 <_start@@Base+0x3bc>
   11998:	mov	r2, r0
   1199c:	stm	sp, {r5, r6}
   119a0:	mov	r3, r5
   119a4:	mov	r1, #33	; 0x21
   119a8:	mov	r0, r4
   119ac:	bl	1299c <flatcc_verify_vector_field@@Base>
   119b0:	cmp	r0, #0
   119b4:	bne	115f0 <_start@@Base+0x3bc>
   119b8:	ldr	r3, [pc, #72]	; 11a08 <_start@@Base+0x7d4>
   119bc:	mov	r2, r0
   119c0:	add	r3, pc, r3
   119c4:	mov	r1, #34	; 0x22
   119c8:	mov	r0, r4
   119cc:	bl	12ba4 <flatcc_verify_table_field@@Base>
   119d0:	cmp	r0, #0
   119d4:	bne	115f0 <_start@@Base+0x3bc>
   119d8:	ldr	r3, [pc, #44]	; 11a0c <_start@@Base+0x7d8>
   119dc:	mov	r2, r0
   119e0:	add	r3, pc, r3
   119e4:	mov	r0, r4
   119e8:	mov	r1, #35	; 0x23
   119ec:	add	sp, sp, #8
   119f0:	pop	{r4, r5, r6, r7, r8, lr}
   119f4:	b	12ba4 <flatcc_verify_table_field@@Base>
   119f8:			; <UNDEFINED> instruction: 0xffffff30
   119fc:			; <UNDEFINED> instruction: 0xfffffe94
   11a00:	andeq	r0, r0, r0, asr #6
   11a04:			; <UNDEFINED> instruction: 0xfffffc38
   11a08:	andeq	r0, r0, ip, lsr #5
   11a0c:	andeq	r0, r0, r8, lsr #32
   11a10:	push	{r4, r5, r6, lr}
   11a14:	mov	r4, #1
   11a18:	sub	sp, sp, #8
   11a1c:	mvn	r5, #0
   11a20:	mov	r2, #0
   11a24:	mov	r1, r2
   11a28:	stm	sp, {r4, r5}
   11a2c:	mov	r3, r4
   11a30:	mov	r6, r0
   11a34:	bl	1299c <flatcc_verify_vector_field@@Base>
   11a38:	subs	r2, r0, #0
   11a3c:	beq	11a4c <_start@@Base+0x818>
   11a40:	mov	r0, r2
   11a44:	add	sp, sp, #8
   11a48:	pop	{r4, r5, r6, pc}
   11a4c:	stm	sp, {r4, r5}
   11a50:	mov	r3, r4
   11a54:	mov	r1, r4
   11a58:	mov	r0, r6
   11a5c:	bl	1299c <flatcc_verify_vector_field@@Base>
   11a60:	subs	r2, r0, #0
   11a64:	bne	11a40 <_start@@Base+0x80c>
   11a68:	ldr	r3, [pc, #40]	; 11a98 <_start@@Base+0x864>
   11a6c:	str	r4, [sp]
   11a70:	add	r3, pc, r3
   11a74:	str	r3, [sp, #4]
   11a78:	mov	r0, r6
   11a7c:	mov	r3, r2
   11a80:	mov	r1, #2
   11a84:	bl	135f4 <flatcc_verify_table_as_nested_root@@Base>
   11a88:	mov	r2, r0
   11a8c:	mov	r0, r2
   11a90:	add	sp, sp, #8
   11a94:	pop	{r4, r5, r6, pc}
   11a98:			; <UNDEFINED> instruction: 0xfffffb54
   11a9c:	ldrb	r3, [r0, #12]
   11aa0:	sub	r3, r3, #1
   11aa4:	cmp	r3, #3
   11aa8:	addls	pc, pc, r3, lsl #2
   11aac:	b	11af0 <_start@@Base+0x8bc>
   11ab0:	b	11ae4 <_start@@Base+0x8b0>
   11ab4:	b	11ad8 <_start@@Base+0x8a4>
   11ab8:	b	11acc <_start@@Base+0x898>
   11abc:	b	11ac0 <_start@@Base+0x88c>
   11ac0:	ldr	r1, [pc, #48]	; 11af8 <_start@@Base+0x8c4>
   11ac4:	add	r1, pc, r1
   11ac8:	b	12f70 <flatcc_verify_union_table@@Base>
   11acc:	ldr	r1, [pc, #40]	; 11afc <_start@@Base+0x8c8>
   11ad0:	add	r1, pc, r1
   11ad4:	b	12f70 <flatcc_verify_union_table@@Base>
   11ad8:	ldr	r1, [pc, #32]	; 11b00 <_start@@Base+0x8cc>
   11adc:	add	r1, pc, r1
   11ae0:	b	12f70 <flatcc_verify_union_table@@Base>
   11ae4:	ldr	r1, [pc, #24]	; 11b04 <_start@@Base+0x8d0>
   11ae8:	add	r1, pc, r1
   11aec:	b	12f70 <flatcc_verify_union_table@@Base>
   11af0:	mov	r0, #0
   11af4:	bx	lr
   11af8:	andeq	r0, r0, ip, lsr r0
   11afc:			; <UNDEFINED> instruction: 0xfffff888
   11b00:			; <UNDEFINED> instruction: 0xfffff8cc
   11b04:			; <UNDEFINED> instruction: 0xfffffadc
   11b08:	ldr	r3, [pc, #88]	; 11b68 <_start@@Base+0x934>
   11b0c:	mov	r2, #0
   11b10:	push	{r4, lr}
   11b14:	mov	r1, r2
   11b18:	add	r3, pc, r3
   11b1c:	mov	r4, r0
   11b20:	bl	12ba4 <flatcc_verify_table_field@@Base>
   11b24:	cmp	r0, #0
   11b28:	popne	{r4, pc}
   11b2c:	ldr	r3, [pc, #56]	; 11b6c <_start@@Base+0x938>
   11b30:	mov	r2, r0
   11b34:	add	r3, pc, r3
   11b38:	mov	r1, #1
   11b3c:	mov	r0, r4
   11b40:	bl	12ba4 <flatcc_verify_table_field@@Base>
   11b44:	cmp	r0, #0
   11b48:	popne	{r4, pc}
   11b4c:	ldr	r3, [pc, #28]	; 11b70 <_start@@Base+0x93c>
   11b50:	mov	r2, r0
   11b54:	add	r3, pc, r3
   11b58:	mov	r0, r4
   11b5c:	mov	r1, #3
   11b60:	pop	{r4, lr}
   11b64:	b	13908 <flatcc_verify_union_vector_field@@Base>
   11b68:			; <UNDEFINED> instruction: 0xfffffa40
   11b6c:	andeq	r0, r0, r8, lsr r0
   11b70:			; <UNDEFINED> instruction: 0xffffff40
   11b74:	push	{r4, r5, r6, lr}
   11b78:	mov	r2, #0
   11b7c:	ldr	r4, [pc, #132]	; 11c08 <_start@@Base+0x9d4>
   11b80:	mov	r1, #1
   11b84:	add	r4, pc, r4
   11b88:	mov	r3, r4
   11b8c:	mov	r5, r0
   11b90:	bl	137b0 <flatcc_verify_union_field@@Base>
   11b94:	cmp	r0, #0
   11b98:	popne	{r4, r5, r6, pc}
   11b9c:	mov	r2, r0
   11ba0:	mov	r3, r4
   11ba4:	mov	r1, #3
   11ba8:	mov	r0, r5
   11bac:	bl	137b0 <flatcc_verify_union_field@@Base>
   11bb0:	cmp	r0, #0
   11bb4:	popne	{r4, r5, r6, pc}
   11bb8:	mov	r2, r0
   11bbc:	mov	r3, r4
   11bc0:	mov	r1, #5
   11bc4:	mov	r0, r5
   11bc8:	bl	137b0 <flatcc_verify_union_field@@Base>
   11bcc:	cmp	r0, #0
   11bd0:	popne	{r4, r5, r6, pc}
   11bd4:	mov	r2, r0
   11bd8:	mov	r3, r4
   11bdc:	mov	r1, #7
   11be0:	mov	r0, r5
   11be4:	bl	137b0 <flatcc_verify_union_field@@Base>
   11be8:	cmp	r0, #0
   11bec:	popne	{r4, r5, r6, pc}
   11bf0:	mov	r3, r4
   11bf4:	mov	r2, r0
   11bf8:	mov	r1, #9
   11bfc:	mov	r0, r5
   11c00:	pop	{r4, r5, r6, lr}
   11c04:	b	13908 <flatcc_verify_union_vector_field@@Base>
   11c08:	andeq	r0, r0, r0, lsl #1
   11c0c:	ldrb	r3, [r0, #12]
   11c10:	cmp	r3, #9
   11c14:	beq	11c50 <_start@@Base+0xa1c>
   11c18:	bls	11c34 <_start@@Base+0xa00>
   11c1c:	cmp	r3, #11
   11c20:	beq	11c30 <_start@@Base+0x9fc>
   11c24:	bcc	11c50 <_start@@Base+0xa1c>
   11c28:	cmp	r3, #255	; 0xff
   11c2c:	bne	11c5c <_start@@Base+0xa28>
   11c30:	b	130c4 <flatcc_verify_union_string@@Base>
   11c34:	cmp	r3, #2
   11c38:	beq	11c64 <_start@@Base+0xa30>
   11c3c:	cmp	r3, #8
   11c40:	bne	11c5c <_start@@Base+0xa28>
   11c44:	mov	r2, #2
   11c48:	mov	r1, r2
   11c4c:	b	13068 <flatcc_verify_union_struct@@Base>
   11c50:	mov	r2, #4
   11c54:	mov	r1, r2
   11c58:	b	13068 <flatcc_verify_union_struct@@Base>
   11c5c:	mov	r0, #0
   11c60:	bx	lr
   11c64:	ldr	r1, [pc, #4]	; 11c70 <_start@@Base+0xa3c>
   11c68:	add	r1, pc, r1
   11c6c:	b	12f70 <flatcc_verify_union_table@@Base>
   11c70:			; <UNDEFINED> instruction: 0xfffff6f8
   11c74:	mov	r0, #0
   11c78:	bx	lr
   11c7c:	mov	r3, #8
   11c80:	push	{r4, lr}
   11c84:	mov	r2, r3
   11c88:	mov	r1, #0
   11c8c:	mov	r4, r0
   11c90:	bl	12898 <flatcc_verify_field@@Base>
   11c94:	cmp	r0, #0
   11c98:	popne	{r4, pc}
   11c9c:	mov	r3, #4
   11ca0:	mov	r0, r4
   11ca4:	mov	r2, r3
   11ca8:	mov	r1, #1
   11cac:	pop	{r4, lr}
   11cb0:	b	12898 <flatcc_verify_field@@Base>

00011cb4 <verify_monster@@Base>:
   11cb4:	cmp	r0, #0
   11cb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11cbc:	beq	11cd0 <verify_monster@@Base+0x1c>
   11cc0:	ldr	r3, [pc, #1132]	; 12134 <verify_monster@@Base+0x480>
   11cc4:	ldr	r2, [r0, #4]
   11cc8:	cmp	r2, r3
   11ccc:	beq	11ce4 <verify_monster@@Base+0x30>
   11cd0:	ldr	r0, [pc, #1120]	; 12138 <verify_monster@@Base+0x484>
   11cd4:	add	r0, pc, r0
   11cd8:	bl	10d48 <puts@plt>
   11cdc:	mvn	r0, #0
   11ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11ce4:	ldr	r3, [r0]
   11ce8:	adds	r4, r0, r3
   11cec:	beq	11cd0 <verify_monster@@Base+0x1c>
   11cf0:	ldr	r5, [r0, r3]
   11cf4:	sub	r5, r4, r5
   11cf8:	ldrh	r6, [r5]
   11cfc:	cmp	r6, #9
   11d00:	bhi	11d18 <verify_monster@@Base+0x64>
   11d04:	ldr	r0, [pc, #1072]	; 1213c <verify_monster@@Base+0x488>
   11d08:	add	r0, pc, r0
   11d0c:	bl	10d48 <puts@plt>
   11d10:	mvn	r0, #0
   11d14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d18:	ldrh	r3, [r5, #8]
   11d1c:	cmp	r3, #0
   11d20:	beq	11d04 <verify_monster@@Base+0x50>
   11d24:	ldrsh	r3, [r4, r3]
   11d28:	cmp	r3, #80	; 0x50
   11d2c:	bne	11d04 <verify_monster@@Base+0x50>
   11d30:	ldrh	r3, [r5, #4]
   11d34:	cmp	r3, #0
   11d38:	beq	1248c <verify_monster@@Base+0x7d8>
   11d3c:	adds	r3, r4, r3
   11d40:	beq	1248c <verify_monster@@Base+0x7d8>
   11d44:	sub	r0, r3, r0
   11d48:	tst	r0, #15
   11d4c:	bne	123b0 <verify_monster@@Base+0x6fc>
   11d50:	vldr	s15, [pc, #976]	; 12128 <verify_monster@@Base+0x474>
   11d54:	vldr	s14, [r3]
   11d58:	vcmp.f32	s14, s15
   11d5c:	vmrs	APSR_nzcv, fpscr
   11d60:	bne	123c4 <verify_monster@@Base+0x710>
   11d64:	vldr	s15, [pc, #960]	; 1212c <verify_monster@@Base+0x478>
   11d68:	vldr	s14, [r3, #4]
   11d6c:	vcmp.f32	s14, s15
   11d70:	vmrs	APSR_nzcv, fpscr
   11d74:	bne	123d8 <verify_monster@@Base+0x724>
   11d78:	vldr	s15, [pc, #944]	; 12130 <verify_monster@@Base+0x47c>
   11d7c:	vldr	s14, [r3, #8]
   11d80:	vcmp.f32	s14, s15
   11d84:	vmrs	APSR_nzcv, fpscr
   11d88:	bne	123ec <verify_monster@@Base+0x738>
   11d8c:	vldr	d7, [pc, #900]	; 12118 <verify_monster@@Base+0x464>
   11d90:	vldr	d6, [r3, #16]
   11d94:	vcmp.f64	d6, d7
   11d98:	vmrs	APSR_nzcv, fpscr
   11d9c:	bne	12400 <verify_monster@@Base+0x74c>
   11da0:	ldrsb	r2, [r3, #24]
   11da4:	cmp	r2, #2
   11da8:	bne	1234c <verify_monster@@Base+0x698>
   11dac:	ldrsh	r2, [r3, #26]
   11db0:	cmp	r2, #5
   11db4:	bne	12024 <verify_monster@@Base+0x370>
   11db8:	ldrsb	r3, [r3, #28]
   11dbc:	cmp	r3, #6
   11dc0:	bne	12024 <verify_monster@@Base+0x370>
   11dc4:	cmp	r6, #11
   11dc8:	bhi	11df0 <verify_monster@@Base+0x13c>
   11dcc:	ldr	r3, [pc, #876]	; 12140 <verify_monster@@Base+0x48c>
   11dd0:	ldr	r1, [pc, #876]	; 12144 <verify_monster@@Base+0x490>
   11dd4:	ldr	r0, [pc, #876]	; 12148 <verify_monster@@Base+0x494>
   11dd8:	add	r3, pc, r3
   11ddc:	ldr	r2, [pc, #872]	; 1214c <verify_monster@@Base+0x498>
   11de0:	add	r3, r3, #28
   11de4:	add	r1, pc, r1
   11de8:	add	r0, pc, r0
   11dec:	bl	10dd8 <__assert_fail@plt>
   11df0:	ldrh	r0, [r5, #10]
   11df4:	cmp	r0, #0
   11df8:	beq	11dcc <verify_monster@@Base+0x118>
   11dfc:	ldr	r3, [r4, r0]
   11e00:	add	r0, r4, r0
   11e04:	add	r3, r3, #4
   11e08:	adds	r0, r0, r3
   11e0c:	beq	12374 <verify_monster@@Base+0x6c0>
   11e10:	ldr	r3, [r0, #-4]
   11e14:	cmp	r3, #9
   11e18:	bne	12374 <verify_monster@@Base+0x6c0>
   11e1c:	ldr	r1, [pc, #812]	; 12150 <verify_monster@@Base+0x49c>
   11e20:	add	r1, pc, r1
   11e24:	bl	10cdc <strcmp@plt>
   11e28:	subs	r1, r0, #0
   11e2c:	bne	12324 <verify_monster@@Base+0x670>
   11e30:	cmp	r6, #15
   11e34:	bhi	11e4c <verify_monster@@Base+0x198>
   11e38:	ldr	r0, [pc, #788]	; 12154 <verify_monster@@Base+0x4a0>
   11e3c:	add	r0, pc, r0
   11e40:	bl	10d48 <puts@plt>
   11e44:	mvn	r0, #0
   11e48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e4c:	ldrh	r3, [r5, #14]
   11e50:	cmp	r3, #0
   11e54:	beq	11e38 <verify_monster@@Base+0x184>
   11e58:	ldr	r2, [r4, r3]
   11e5c:	add	r3, r4, r3
   11e60:	add	r2, r2, #4
   11e64:	adds	r3, r3, r2
   11e68:	beq	11e38 <verify_monster@@Base+0x184>
   11e6c:	ldr	r2, [r3, #-4]
   11e70:	cmp	r2, #5
   11e74:	subeq	r3, r3, #1
   11e78:	bne	11e38 <verify_monster@@Base+0x184>
   11e7c:	ldrb	r2, [r3, #1]!
   11e80:	cmp	r2, r1
   11e84:	bne	12310 <verify_monster@@Base+0x65c>
   11e88:	add	r1, r1, #1
   11e8c:	cmp	r1, #5
   11e90:	bne	11e7c <verify_monster@@Base+0x1c8>
   11e94:	cmp	r6, #25
   11e98:	bhi	11eb0 <verify_monster@@Base+0x1fc>
   11e9c:	ldr	r0, [pc, #692]	; 12158 <verify_monster@@Base+0x4a4>
   11ea0:	add	r0, pc, r0
   11ea4:	bl	10d48 <puts@plt>
   11ea8:	mvn	r0, #0
   11eac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11eb0:	ldrh	r3, [r5, #24]
   11eb4:	cmp	r3, #0
   11eb8:	beq	11e9c <verify_monster@@Base+0x1e8>
   11ebc:	ldr	r2, [r4, r3]
   11ec0:	add	r3, r4, r3
   11ec4:	add	r2, r2, #4
   11ec8:	adds	r7, r3, r2
   11ecc:	beq	11e9c <verify_monster@@Base+0x1e8>
   11ed0:	ldr	r1, [r7, #-4]
   11ed4:	cmp	r1, #2
   11ed8:	bne	12388 <verify_monster@@Base+0x6d4>
   11edc:	ldr	r0, [r3, r2]
   11ee0:	ldr	r1, [pc, #628]	; 1215c <verify_monster@@Base+0x4a8>
   11ee4:	add	r0, r0, #4
   11ee8:	add	r1, pc, r1
   11eec:	add	r0, r7, r0
   11ef0:	bl	10cdc <strcmp@plt>
   11ef4:	cmp	r0, #0
   11ef8:	bne	12478 <verify_monster@@Base+0x7c4>
   11efc:	ldr	r0, [r7, #4]
   11f00:	ldr	r1, [pc, #600]	; 12160 <verify_monster@@Base+0x4ac>
   11f04:	add	r0, r0, #8
   11f08:	add	r1, pc, r1
   11f0c:	add	r0, r7, r0
   11f10:	bl	10cdc <strcmp@plt>
   11f14:	cmp	r0, #0
   11f18:	bne	1239c <verify_monster@@Base+0x6e8>
   11f1c:	ldrh	r3, [r5, #18]
   11f20:	cmp	r3, #0
   11f24:	beq	12338 <verify_monster@@Base+0x684>
   11f28:	ldrb	r3, [r4, r3]
   11f2c:	cmp	r3, #1
   11f30:	bne	12338 <verify_monster@@Base+0x684>
   11f34:	ldrh	r3, [r5, #20]
   11f38:	cmp	r3, #0
   11f3c:	beq	124a0 <verify_monster@@Base+0x7ec>
   11f40:	ldr	r2, [r4, r3]
   11f44:	add	r3, r4, r3
   11f48:	adds	r0, r3, r2
   11f4c:	beq	124a0 <verify_monster@@Base+0x7ec>
   11f50:	ldr	r3, [r3, r2]
   11f54:	sub	r3, r0, r3
   11f58:	ldrh	r2, [r3]
   11f5c:	cmp	r2, #11
   11f60:	bls	11dcc <verify_monster@@Base+0x118>
   11f64:	ldrh	r2, [r3, #10]
   11f68:	cmp	r2, #0
   11f6c:	beq	11dcc <verify_monster@@Base+0x118>
   11f70:	ldr	r3, [r0, r2]
   11f74:	ldr	r1, [pc, #488]	; 12164 <verify_monster@@Base+0x4b0>
   11f78:	add	r0, r0, r2
   11f7c:	add	r3, r3, #4
   11f80:	add	r0, r0, r3
   11f84:	add	r1, pc, r1
   11f88:	bl	10cdc <strcmp@plt>
   11f8c:	cmp	r0, #0
   11f90:	bne	12428 <verify_monster@@Base+0x774>
   11f94:	ldrh	r3, [r5, #22]
   11f98:	cmp	r3, #0
   11f9c:	beq	12414 <verify_monster@@Base+0x760>
   11fa0:	ldr	r2, [r4, r3]
   11fa4:	add	r3, r4, r3
   11fa8:	add	r2, r2, #4
   11fac:	adds	r1, r3, r2
   11fb0:	beq	12414 <verify_monster@@Base+0x760>
   11fb4:	ldr	ip, [r1, #-4]
   11fb8:	cmp	ip, #2
   11fbc:	bne	12414 <verify_monster@@Base+0x760>
   11fc0:	ldrsh	r3, [r3, r2]
   11fc4:	cmp	r3, #10
   11fc8:	bne	1243c <verify_monster@@Base+0x788>
   11fcc:	ldrsb	r3, [r1, #2]
   11fd0:	cmp	r3, #20
   11fd4:	bne	12450 <verify_monster@@Base+0x79c>
   11fd8:	cmn	r1, #4
   11fdc:	beq	12464 <verify_monster@@Base+0x7b0>
   11fe0:	ldrsh	r3, [r1, #4]
   11fe4:	cmp	r3, #30
   11fe8:	bne	12464 <verify_monster@@Base+0x7b0>
   11fec:	ldrsb	r3, [r1, #6]
   11ff0:	cmp	r3, #40	; 0x28
   11ff4:	bne	12360 <verify_monster@@Base+0x6ac>
   11ff8:	cmp	r6, #37	; 0x25
   11ffc:	bhi	12038 <verify_monster@@Base+0x384>
   12000:	ldr	r3, [pc, #352]	; 12168 <verify_monster@@Base+0x4b4>
   12004:	ldr	r1, [pc, #352]	; 1216c <verify_monster@@Base+0x4b8>
   12008:	ldr	r0, [pc, #352]	; 12170 <verify_monster@@Base+0x4bc>
   1200c:	add	r3, pc, r3
   12010:	mov	r2, #148	; 0x94
   12014:	add	r3, r3, #84	; 0x54
   12018:	add	r1, pc, r1
   1201c:	add	r0, pc, r0
   12020:	bl	10dd8 <__assert_fail@plt>
   12024:	ldr	r0, [pc, #328]	; 12174 <verify_monster@@Base+0x4c0>
   12028:	add	r0, pc, r0
   1202c:	bl	10d48 <puts@plt>
   12030:	mvn	r0, #0
   12034:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12038:	ldrh	r3, [r5, #36]	; 0x24
   1203c:	cmp	r3, #0
   12040:	beq	12000 <verify_monster@@Base+0x34c>
   12044:	ldr	r3, [r4, r3]
   12048:	ldr	r2, [pc, #296]	; 12178 <verify_monster@@Base+0x4c4>
   1204c:	cmp	r3, r2
   12050:	bne	12000 <verify_monster@@Base+0x34c>
   12054:	cmp	r6, #39	; 0x27
   12058:	bhi	12080 <verify_monster@@Base+0x3cc>
   1205c:	ldr	r3, [pc, #280]	; 1217c <verify_monster@@Base+0x4c8>
   12060:	ldr	r1, [pc, #280]	; 12180 <verify_monster@@Base+0x4cc>
   12064:	ldr	r0, [pc, #280]	; 12184 <verify_monster@@Base+0x4d0>
   12068:	add	r3, pc, r3
   1206c:	mov	r2, #149	; 0x95
   12070:	add	r3, r3, #84	; 0x54
   12074:	add	r1, pc, r1
   12078:	add	r0, pc, r0
   1207c:	bl	10dd8 <__assert_fail@plt>
   12080:	ldrh	r2, [r5, #38]	; 0x26
   12084:	cmp	r2, #0
   12088:	beq	1205c <verify_monster@@Base+0x3a8>
   1208c:	ldr	r2, [r4, r2]
   12090:	cmp	r2, r3
   12094:	bne	1205c <verify_monster@@Base+0x3a8>
   12098:	cmp	r6, #41	; 0x29
   1209c:	bhi	120c4 <verify_monster@@Base+0x410>
   120a0:	ldr	r3, [pc, #224]	; 12188 <verify_monster@@Base+0x4d4>
   120a4:	ldr	r1, [pc, #224]	; 1218c <verify_monster@@Base+0x4d8>
   120a8:	ldr	r0, [pc, #224]	; 12190 <verify_monster@@Base+0x4dc>
   120ac:	add	r3, pc, r3
   120b0:	mov	r2, #150	; 0x96
   120b4:	add	r3, r3, #84	; 0x54
   120b8:	add	r1, pc, r1
   120bc:	add	r0, pc, r0
   120c0:	bl	10dd8 <__assert_fail@plt>
   120c4:	ldrh	r3, [r5, #40]	; 0x28
   120c8:	cmp	r3, #0
   120cc:	beq	120a0 <verify_monster@@Base+0x3ec>
   120d0:	add	r9, pc, #72	; 0x48
   120d4:	ldrd	r8, [r9]
   120d8:	ldrd	r2, [r3, r4]
   120dc:	cmp	r3, r9
   120e0:	cmpeq	r2, r8
   120e4:	bne	120a0 <verify_monster@@Base+0x3ec>
   120e8:	cmp	r6, #43	; 0x2b
   120ec:	bhi	121c8 <verify_monster@@Base+0x514>
   120f0:	ldr	r3, [pc, #156]	; 12194 <verify_monster@@Base+0x4e0>
   120f4:	ldr	r1, [pc, #156]	; 12198 <verify_monster@@Base+0x4e4>
   120f8:	ldr	r0, [pc, #156]	; 1219c <verify_monster@@Base+0x4e8>
   120fc:	add	r3, pc, r3
   12100:	mov	r2, #151	; 0x97
   12104:	add	r3, r3, #84	; 0x54
   12108:	add	r1, pc, r1
   1210c:	add	r0, pc, r0
   12110:	bl	10dd8 <__assert_fail@plt>
   12114:	nop			; (mov r0, r0)
   12118:	andeq	r0, r0, r0
   1211c:	andmi	r0, r8, r0
   12120:	vrhadd.s<illegal width 64>	d25, d27, d1
   12124:	cdpvs	0, 0, cr8, cr15, cr13, {6}
   12128:	svccc	0x00800000
   1212c:	andmi	r0, r0, r0
   12130:	submi	r0, r0, r0
   12134:	movtpl	r4, #61261	; 0xef4d
   12138:	andeq	r2, r0, r4, ror #1
   1213c:	andeq	r2, r0, r8, asr #1
   12140:	andeq	r1, r0, r0, lsr #28
   12144:	andeq	r1, r0, r0, lsr pc
   12148:	strdeq	r2, [r0], -r8
   1214c:			; <UNDEFINED> instruction: 0x000002bb
   12150:	andeq	r2, r0, r0, lsl #2
   12154:	andeq	r2, r0, r4, lsl #2
   12158:	ldrdeq	r2, [r0], -ip
   1215c:	ldrdeq	r2, [r0], -r8
   12160:	andeq	r2, r0, r4, ror #1
   12164:	andeq	r2, r0, r0, asr #1
   12168:	andeq	r1, r0, ip, ror #23
   1216c:	ldrdeq	r2, [r0], -r0
   12170:	andeq	r2, r0, r4, lsr r1
   12174:	andeq	r1, r0, r0, lsr #29
   12178:			; <UNDEFINED> instruction: 0xdd79c941
   1217c:	muleq	r0, r0, fp
   12180:	andeq	r2, r0, r4, ror r0
   12184:	andeq	r2, r0, r0, lsl r1
   12188:	andeq	r1, r0, ip, asr #22
   1218c:	andeq	r2, r0, r0, lsr r0
   12190:	andeq	r2, r0, r4, lsl #2
   12194:	strdeq	r1, [r0], -ip
   12198:	andeq	r1, r0, r0, ror #31
   1219c:	strdeq	r2, [r0], -r4
   121a0:	andeq	r1, r0, r0, lsl #20
   121a4:	andeq	r1, r0, r4, ror #29
   121a8:	andeq	r2, r0, r8, lsr r0
   121ac:			; <UNDEFINED> instruction: 0x000019b8
   121b0:	muleq	r0, ip, lr
   121b4:	andeq	r2, r0, r8, lsr #32
   121b8:	mcrhi	4, 4, sl, cr1, cr1, {3}
   121bc:	andeq	r1, r0, r0, ror r9
   121c0:	andeq	r1, r0, r4, asr lr
   121c4:	andeq	r2, r0, r8, lsl r0
   121c8:	ldrh	r1, [r5, #42]	; 0x2a
   121cc:	cmp	r1, #0
   121d0:	beq	120f0 <verify_monster@@Base+0x43c>
   121d4:	ldrd	r8, [r4, r1]
   121d8:	cmp	r9, r3
   121dc:	cmpeq	r8, r2
   121e0:	bne	120f0 <verify_monster@@Base+0x43c>
   121e4:	cmp	r6, #45	; 0x2d
   121e8:	bhi	12210 <verify_monster@@Base+0x55c>
   121ec:	ldr	r3, [pc, #-84]	; 121a0 <verify_monster@@Base+0x4ec>
   121f0:	ldr	r1, [pc, #-84]	; 121a4 <verify_monster@@Base+0x4f0>
   121f4:	ldr	r0, [pc, #-84]	; 121a8 <verify_monster@@Base+0x4f4>
   121f8:	add	r3, pc, r3
   121fc:	mov	r2, #152	; 0x98
   12200:	add	r3, r3, #84	; 0x54
   12204:	add	r1, pc, r1
   12208:	add	r0, pc, r0
   1220c:	bl	10dd8 <__assert_fail@plt>
   12210:	ldrh	r3, [r5, #44]	; 0x2c
   12214:	cmp	r3, #0
   12218:	beq	121ec <verify_monster@@Base+0x538>
   1221c:	ldr	r2, [r4, r3]
   12220:	ldr	r3, [pc, #-112]	; 121b8 <verify_monster@@Base+0x504>
   12224:	cmp	r2, r3
   12228:	bne	121ec <verify_monster@@Base+0x538>
   1222c:	cmp	r6, #47	; 0x2f
   12230:	bhi	12258 <verify_monster@@Base+0x5a4>
   12234:	ldr	r3, [pc, #-144]	; 121ac <verify_monster@@Base+0x4f8>
   12238:	ldr	r1, [pc, #-144]	; 121b0 <verify_monster@@Base+0x4fc>
   1223c:	ldr	r0, [pc, #-144]	; 121b4 <verify_monster@@Base+0x500>
   12240:	add	r3, pc, r3
   12244:	mov	r2, #153	; 0x99
   12248:	add	r3, r3, #84	; 0x54
   1224c:	add	r1, pc, r1
   12250:	add	r0, pc, r0
   12254:	bl	10dd8 <__assert_fail@plt>
   12258:	ldrh	r3, [r5, #46]	; 0x2e
   1225c:	cmp	r3, #0
   12260:	beq	12234 <verify_monster@@Base+0x580>
   12264:	ldr	r2, [r4, r3]
   12268:	ldr	r3, [pc, #-184]	; 121b8 <verify_monster@@Base+0x504>
   1226c:	cmp	r2, r3
   12270:	bne	12234 <verify_monster@@Base+0x580>
   12274:	cmp	r6, #49	; 0x31
   12278:	bhi	122a0 <verify_monster@@Base+0x5ec>
   1227c:	ldr	r3, [pc, #-200]	; 121bc <verify_monster@@Base+0x508>
   12280:	ldr	r1, [pc, #-200]	; 121c0 <verify_monster@@Base+0x50c>
   12284:	ldr	r0, [pc, #-200]	; 121c4 <verify_monster@@Base+0x510>
   12288:	add	r3, pc, r3
   1228c:	mov	r2, #154	; 0x9a
   12290:	add	r3, r3, #84	; 0x54
   12294:	add	r1, pc, r1
   12298:	add	r0, pc, r0
   1229c:	bl	10dd8 <__assert_fail@plt>
   122a0:	ldrh	r3, [r5, #48]	; 0x30
   122a4:	cmp	r3, #0
   122a8:	beq	1227c <verify_monster@@Base+0x5c8>
   122ac:	add	r9, pc, #516	; 0x204
   122b0:	ldrd	r8, [r9]
   122b4:	ldrd	r2, [r3, r4]
   122b8:	cmp	r3, r9
   122bc:	cmpeq	r2, r8
   122c0:	bne	1227c <verify_monster@@Base+0x5c8>
   122c4:	cmp	r6, #51	; 0x33
   122c8:	bhi	122f0 <verify_monster@@Base+0x63c>
   122cc:	ldr	r3, [pc, #492]	; 124c0 <verify_monster@@Base+0x80c>
   122d0:	ldr	r1, [pc, #492]	; 124c4 <verify_monster@@Base+0x810>
   122d4:	ldr	r0, [pc, #492]	; 124c8 <verify_monster@@Base+0x814>
   122d8:	add	r3, pc, r3
   122dc:	mov	r2, #155	; 0x9b
   122e0:	add	r3, r3, #84	; 0x54
   122e4:	add	r1, pc, r1
   122e8:	add	r0, pc, r0
   122ec:	bl	10dd8 <__assert_fail@plt>
   122f0:	ldrh	r1, [r5, #50]	; 0x32
   122f4:	cmp	r1, #0
   122f8:	beq	122cc <verify_monster@@Base+0x618>
   122fc:	ldrd	r4, [r4, r1]
   12300:	cmp	r5, r3
   12304:	cmpeq	r4, r2
   12308:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1230c:	b	122cc <verify_monster@@Base+0x618>
   12310:	ldr	r0, [pc, #436]	; 124cc <verify_monster@@Base+0x818>
   12314:	add	r0, pc, r0
   12318:	bl	10ce8 <printf@plt>
   1231c:	mvn	r0, #0
   12320:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12324:	ldr	r0, [pc, #420]	; 124d0 <verify_monster@@Base+0x81c>
   12328:	add	r0, pc, r0
   1232c:	bl	10d48 <puts@plt>
   12330:	mvn	r0, #0
   12334:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12338:	ldr	r0, [pc, #404]	; 124d4 <verify_monster@@Base+0x820>
   1233c:	add	r0, pc, r0
   12340:	bl	10d48 <puts@plt>
   12344:	mvn	r0, #0
   12348:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1234c:	ldr	r0, [pc, #388]	; 124d8 <verify_monster@@Base+0x824>
   12350:	add	r0, pc, r0
   12354:	bl	10d48 <puts@plt>
   12358:	mvn	r0, #0
   1235c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12360:	ldr	r0, [pc, #372]	; 124dc <verify_monster@@Base+0x828>
   12364:	add	r0, pc, r0
   12368:	bl	10d48 <puts@plt>
   1236c:	mvn	r0, #0
   12370:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12374:	ldr	r0, [pc, #356]	; 124e0 <verify_monster@@Base+0x82c>
   12378:	add	r0, pc, r0
   1237c:	bl	10d48 <puts@plt>
   12380:	mvn	r0, #0
   12384:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12388:	ldr	r0, [pc, #340]	; 124e4 <verify_monster@@Base+0x830>
   1238c:	add	r0, pc, r0
   12390:	bl	10d48 <puts@plt>
   12394:	mvn	r0, #0
   12398:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1239c:	ldr	r0, [pc, #324]	; 124e8 <verify_monster@@Base+0x834>
   123a0:	add	r0, pc, r0
   123a4:	bl	10d48 <puts@plt>
   123a8:	mvn	r0, #0
   123ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   123b0:	ldr	r0, [pc, #308]	; 124ec <verify_monster@@Base+0x838>
   123b4:	add	r0, pc, r0
   123b8:	bl	10d48 <puts@plt>
   123bc:	mvn	r0, #0
   123c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   123c4:	ldr	r0, [pc, #292]	; 124f0 <verify_monster@@Base+0x83c>
   123c8:	add	r0, pc, r0
   123cc:	bl	10d48 <puts@plt>
   123d0:	mvn	r0, #0
   123d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   123d8:	ldr	r0, [pc, #276]	; 124f4 <verify_monster@@Base+0x840>
   123dc:	add	r0, pc, r0
   123e0:	bl	10d48 <puts@plt>
   123e4:	mvn	r0, #0
   123e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   123ec:	ldr	r0, [pc, #260]	; 124f8 <verify_monster@@Base+0x844>
   123f0:	add	r0, pc, r0
   123f4:	bl	10d48 <puts@plt>
   123f8:	mvn	r0, #0
   123fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12400:	ldr	r0, [pc, #244]	; 124fc <verify_monster@@Base+0x848>
   12404:	add	r0, pc, r0
   12408:	bl	10d48 <puts@plt>
   1240c:	mvn	r0, #0
   12410:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12414:	ldr	r0, [pc, #228]	; 12500 <verify_monster@@Base+0x84c>
   12418:	add	r0, pc, r0
   1241c:	bl	10d48 <puts@plt>
   12420:	mvn	r0, #0
   12424:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12428:	ldr	r0, [pc, #212]	; 12504 <verify_monster@@Base+0x850>
   1242c:	add	r0, pc, r0
   12430:	bl	10d48 <puts@plt>
   12434:	mvn	r0, #0
   12438:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1243c:	ldr	r0, [pc, #196]	; 12508 <verify_monster@@Base+0x854>
   12440:	add	r0, pc, r0
   12444:	bl	10d48 <puts@plt>
   12448:	mvn	r0, #0
   1244c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12450:	ldr	r0, [pc, #180]	; 1250c <verify_monster@@Base+0x858>
   12454:	add	r0, pc, r0
   12458:	bl	10d48 <puts@plt>
   1245c:	mvn	r0, #0
   12460:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12464:	ldr	r0, [pc, #164]	; 12510 <verify_monster@@Base+0x85c>
   12468:	add	r0, pc, r0
   1246c:	bl	10d48 <puts@plt>
   12470:	mvn	r0, #0
   12474:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12478:	ldr	r0, [pc, #148]	; 12514 <verify_monster@@Base+0x860>
   1247c:	add	r0, pc, r0
   12480:	bl	10d48 <puts@plt>
   12484:	mvn	r0, #0
   12488:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1248c:	ldr	r0, [pc, #132]	; 12518 <verify_monster@@Base+0x864>
   12490:	add	r0, pc, r0
   12494:	bl	10d48 <puts@plt>
   12498:	mvn	r0, #0
   1249c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   124a0:	ldr	r0, [pc, #116]	; 1251c <verify_monster@@Base+0x868>
   124a4:	add	r0, pc, r0
   124a8:	bl	10d48 <puts@plt>
   124ac:	mvn	r0, #0
   124b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   124b4:	nop			; (mov r0, r0)
   124b8:			; <UNDEFINED> instruction: 0xc767ddf1
   124bc:	mvnsmi	r4, #220, 16	; 0xdc0000
   124c0:	andeq	r1, r0, r0, lsr #18
   124c4:	andeq	r1, r0, r4, lsl #28
   124c8:	andeq	r2, r0, r8
   124cc:	andeq	r1, r0, r8, asr #24
   124d0:	andeq	r1, r0, r4, lsl #24
   124d4:	andeq	r1, r0, r0, ror #25
   124d8:	andeq	r1, r0, r0, ror #22
   124dc:	andeq	r1, r0, ip, ror #26
   124e0:	andeq	r1, r0, ip, lsl #23
   124e4:	andeq	r1, r0, ip, lsl #24
   124e8:	andeq	r1, r0, r4, asr ip
   124ec:	andeq	r1, r0, r4, asr sl
   124f0:	andeq	r1, r0, r8, ror #20
   124f4:	andeq	r1, r0, r8, ror sl
   124f8:	andeq	r1, r0, r8, lsl #21
   124fc:	muleq	r0, r8, sl
   12500:	andeq	r1, r0, ip, asr #24
   12504:	andeq	r1, r0, r0, lsr #24
   12508:	andeq	r1, r0, r8, asr #24
   1250c:	andeq	r1, r0, ip, asr #24
   12510:	andeq	r1, r0, r0, asr ip
   12514:	andeq	r1, r0, ip, asr #22
   12518:	andeq	r1, r0, r4, ror #18
   1251c:	andeq	r1, r0, r8, lsl #23
   12520:	add	r1, r1, #2
   12524:	ldrh	ip, [r0, #22]
   12528:	lsl	r1, r1, #1
   1252c:	uxth	r1, r1
   12530:	cmp	ip, r1
   12534:	bls	12560 <verify_monster@@Base+0x8ac>
   12538:	ldr	ip, [r0, #12]
   1253c:	ldrh	r1, [ip, r1]
   12540:	cmp	r1, #0
   12544:	beq	12560 <verify_monster@@Base+0x8ac>
   12548:	ldrh	r2, [r0, #20]
   1254c:	add	ip, r1, #4
   12550:	cmp	ip, r2
   12554:	bls	12578 <verify_monster@@Base+0x8c4>
   12558:	mov	r0, #13
   1255c:	bx	lr
   12560:	mov	r1, #0
   12564:	cmp	r2, r1
   12568:	movne	r0, #4
   1256c:	moveq	r0, r1
   12570:	str	r1, [r3]
   12574:	bx	lr
   12578:	ldr	r2, [r0, #16]
   1257c:	add	r1, r1, r2
   12580:	ands	r0, r1, #3
   12584:	beq	12590 <verify_monster@@Base+0x8dc>
   12588:	mov	r0, #12
   1258c:	bx	lr
   12590:	str	r1, [r3]
   12594:	bx	lr

00012598 <flatcc_verify_error_string@@Base>:
   12598:	cmp	r0, #36	; 0x24
   1259c:	addls	pc, pc, r0, lsl #2
   125a0:	b	127f4 <flatcc_verify_error_string@@Base+0x25c>
   125a4:	b	12638 <flatcc_verify_error_string@@Base+0xa0>
   125a8:	b	127e8 <flatcc_verify_error_string@@Base+0x250>
   125ac:	b	127dc <flatcc_verify_error_string@@Base+0x244>
   125b0:	b	127d0 <flatcc_verify_error_string@@Base+0x238>
   125b4:	b	127c4 <flatcc_verify_error_string@@Base+0x22c>
   125b8:	b	127b8 <flatcc_verify_error_string@@Base+0x220>
   125bc:	b	127ac <flatcc_verify_error_string@@Base+0x214>
   125c0:	b	127a0 <flatcc_verify_error_string@@Base+0x208>
   125c4:	b	12794 <flatcc_verify_error_string@@Base+0x1fc>
   125c8:	b	12788 <flatcc_verify_error_string@@Base+0x1f0>
   125cc:	b	1277c <flatcc_verify_error_string@@Base+0x1e4>
   125d0:	b	12770 <flatcc_verify_error_string@@Base+0x1d8>
   125d4:	b	12764 <flatcc_verify_error_string@@Base+0x1cc>
   125d8:	b	12758 <flatcc_verify_error_string@@Base+0x1c0>
   125dc:	b	1274c <flatcc_verify_error_string@@Base+0x1b4>
   125e0:	b	12740 <flatcc_verify_error_string@@Base+0x1a8>
   125e4:	b	12734 <flatcc_verify_error_string@@Base+0x19c>
   125e8:	b	12728 <flatcc_verify_error_string@@Base+0x190>
   125ec:	b	1271c <flatcc_verify_error_string@@Base+0x184>
   125f0:	b	12710 <flatcc_verify_error_string@@Base+0x178>
   125f4:	b	12704 <flatcc_verify_error_string@@Base+0x16c>
   125f8:	b	126f8 <flatcc_verify_error_string@@Base+0x160>
   125fc:	b	126ec <flatcc_verify_error_string@@Base+0x154>
   12600:	b	126e0 <flatcc_verify_error_string@@Base+0x148>
   12604:	b	126d4 <flatcc_verify_error_string@@Base+0x13c>
   12608:	b	126c8 <flatcc_verify_error_string@@Base+0x130>
   1260c:	b	126bc <flatcc_verify_error_string@@Base+0x124>
   12610:	b	126b0 <flatcc_verify_error_string@@Base+0x118>
   12614:	b	126a4 <flatcc_verify_error_string@@Base+0x10c>
   12618:	b	12698 <flatcc_verify_error_string@@Base+0x100>
   1261c:	b	1268c <flatcc_verify_error_string@@Base+0xf4>
   12620:	b	12680 <flatcc_verify_error_string@@Base+0xe8>
   12624:	b	12674 <flatcc_verify_error_string@@Base+0xdc>
   12628:	b	12668 <flatcc_verify_error_string@@Base+0xd0>
   1262c:	b	1265c <flatcc_verify_error_string@@Base+0xc4>
   12630:	b	12650 <flatcc_verify_error_string@@Base+0xb8>
   12634:	b	12644 <flatcc_verify_error_string@@Base+0xac>
   12638:	ldr	r0, [pc, #448]	; 12800 <flatcc_verify_error_string@@Base+0x268>
   1263c:	add	r0, pc, r0
   12640:	bx	lr
   12644:	ldr	r0, [pc, #440]	; 12804 <flatcc_verify_error_string@@Base+0x26c>
   12648:	add	r0, pc, r0
   1264c:	bx	lr
   12650:	ldr	r0, [pc, #432]	; 12808 <flatcc_verify_error_string@@Base+0x270>
   12654:	add	r0, pc, r0
   12658:	bx	lr
   1265c:	ldr	r0, [pc, #424]	; 1280c <flatcc_verify_error_string@@Base+0x274>
   12660:	add	r0, pc, r0
   12664:	bx	lr
   12668:	ldr	r0, [pc, #416]	; 12810 <flatcc_verify_error_string@@Base+0x278>
   1266c:	add	r0, pc, r0
   12670:	bx	lr
   12674:	ldr	r0, [pc, #408]	; 12814 <flatcc_verify_error_string@@Base+0x27c>
   12678:	add	r0, pc, r0
   1267c:	bx	lr
   12680:	ldr	r0, [pc, #400]	; 12818 <flatcc_verify_error_string@@Base+0x280>
   12684:	add	r0, pc, r0
   12688:	bx	lr
   1268c:	ldr	r0, [pc, #392]	; 1281c <flatcc_verify_error_string@@Base+0x284>
   12690:	add	r0, pc, r0
   12694:	bx	lr
   12698:	ldr	r0, [pc, #384]	; 12820 <flatcc_verify_error_string@@Base+0x288>
   1269c:	add	r0, pc, r0
   126a0:	bx	lr
   126a4:	ldr	r0, [pc, #376]	; 12824 <flatcc_verify_error_string@@Base+0x28c>
   126a8:	add	r0, pc, r0
   126ac:	bx	lr
   126b0:	ldr	r0, [pc, #368]	; 12828 <flatcc_verify_error_string@@Base+0x290>
   126b4:	add	r0, pc, r0
   126b8:	bx	lr
   126bc:	ldr	r0, [pc, #360]	; 1282c <flatcc_verify_error_string@@Base+0x294>
   126c0:	add	r0, pc, r0
   126c4:	bx	lr
   126c8:	ldr	r0, [pc, #352]	; 12830 <flatcc_verify_error_string@@Base+0x298>
   126cc:	add	r0, pc, r0
   126d0:	bx	lr
   126d4:	ldr	r0, [pc, #344]	; 12834 <flatcc_verify_error_string@@Base+0x29c>
   126d8:	add	r0, pc, r0
   126dc:	bx	lr
   126e0:	ldr	r0, [pc, #336]	; 12838 <flatcc_verify_error_string@@Base+0x2a0>
   126e4:	add	r0, pc, r0
   126e8:	bx	lr
   126ec:	ldr	r0, [pc, #328]	; 1283c <flatcc_verify_error_string@@Base+0x2a4>
   126f0:	add	r0, pc, r0
   126f4:	bx	lr
   126f8:	ldr	r0, [pc, #320]	; 12840 <flatcc_verify_error_string@@Base+0x2a8>
   126fc:	add	r0, pc, r0
   12700:	bx	lr
   12704:	ldr	r0, [pc, #312]	; 12844 <flatcc_verify_error_string@@Base+0x2ac>
   12708:	add	r0, pc, r0
   1270c:	bx	lr
   12710:	ldr	r0, [pc, #304]	; 12848 <flatcc_verify_error_string@@Base+0x2b0>
   12714:	add	r0, pc, r0
   12718:	bx	lr
   1271c:	ldr	r0, [pc, #296]	; 1284c <flatcc_verify_error_string@@Base+0x2b4>
   12720:	add	r0, pc, r0
   12724:	bx	lr
   12728:	ldr	r0, [pc, #288]	; 12850 <flatcc_verify_error_string@@Base+0x2b8>
   1272c:	add	r0, pc, r0
   12730:	bx	lr
   12734:	ldr	r0, [pc, #280]	; 12854 <flatcc_verify_error_string@@Base+0x2bc>
   12738:	add	r0, pc, r0
   1273c:	bx	lr
   12740:	ldr	r0, [pc, #272]	; 12858 <flatcc_verify_error_string@@Base+0x2c0>
   12744:	add	r0, pc, r0
   12748:	bx	lr
   1274c:	ldr	r0, [pc, #264]	; 1285c <flatcc_verify_error_string@@Base+0x2c4>
   12750:	add	r0, pc, r0
   12754:	bx	lr
   12758:	ldr	r0, [pc, #256]	; 12860 <flatcc_verify_error_string@@Base+0x2c8>
   1275c:	add	r0, pc, r0
   12760:	bx	lr
   12764:	ldr	r0, [pc, #248]	; 12864 <flatcc_verify_error_string@@Base+0x2cc>
   12768:	add	r0, pc, r0
   1276c:	bx	lr
   12770:	ldr	r0, [pc, #240]	; 12868 <flatcc_verify_error_string@@Base+0x2d0>
   12774:	add	r0, pc, r0
   12778:	bx	lr
   1277c:	ldr	r0, [pc, #232]	; 1286c <flatcc_verify_error_string@@Base+0x2d4>
   12780:	add	r0, pc, r0
   12784:	bx	lr
   12788:	ldr	r0, [pc, #224]	; 12870 <flatcc_verify_error_string@@Base+0x2d8>
   1278c:	add	r0, pc, r0
   12790:	bx	lr
   12794:	ldr	r0, [pc, #216]	; 12874 <flatcc_verify_error_string@@Base+0x2dc>
   12798:	add	r0, pc, r0
   1279c:	bx	lr
   127a0:	ldr	r0, [pc, #208]	; 12878 <flatcc_verify_error_string@@Base+0x2e0>
   127a4:	add	r0, pc, r0
   127a8:	bx	lr
   127ac:	ldr	r0, [pc, #200]	; 1287c <flatcc_verify_error_string@@Base+0x2e4>
   127b0:	add	r0, pc, r0
   127b4:	bx	lr
   127b8:	ldr	r0, [pc, #192]	; 12880 <flatcc_verify_error_string@@Base+0x2e8>
   127bc:	add	r0, pc, r0
   127c0:	bx	lr
   127c4:	ldr	r0, [pc, #184]	; 12884 <flatcc_verify_error_string@@Base+0x2ec>
   127c8:	add	r0, pc, r0
   127cc:	bx	lr
   127d0:	ldr	r0, [pc, #176]	; 12888 <flatcc_verify_error_string@@Base+0x2f0>
   127d4:	add	r0, pc, r0
   127d8:	bx	lr
   127dc:	ldr	r0, [pc, #168]	; 1288c <flatcc_verify_error_string@@Base+0x2f4>
   127e0:	add	r0, pc, r0
   127e4:	bx	lr
   127e8:	ldr	r0, [pc, #160]	; 12890 <flatcc_verify_error_string@@Base+0x2f8>
   127ec:	add	r0, pc, r0
   127f0:	bx	lr
   127f4:	ldr	r0, [pc, #152]	; 12894 <flatcc_verify_error_string@@Base+0x2fc>
   127f8:	add	r0, pc, r0
   127fc:	bx	lr
   12800:	andeq	r1, r0, r4, ror #27
   12804:	andeq	r2, r0, r0, asr r2
   12808:	andeq	r2, r0, ip, lsl r2
   1280c:	ldrdeq	r2, [r0], -ip
   12810:	andeq	r2, r0, r8, lsr #3
   12814:	andeq	r2, r0, r4, ror r1
   12818:	andeq	r2, r0, r0, asr r1
   1281c:	andeq	r2, r0, ip, lsl r1
   12820:	andeq	r2, r0, r8, ror #1
   12824:	andeq	r2, r0, r4, asr #1
   12828:	muleq	r0, ip, r0
   1282c:	andeq	r2, r0, ip, ror r0
   12830:	andeq	r2, r0, r0, asr #32
   12834:	andeq	r2, r0, r8
   12838:	ldrdeq	r1, [r0], -r0
   1283c:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   12840:	andeq	r1, r0, r8, asr pc
   12844:	andeq	r1, r0, r4, lsr pc
   12848:	andeq	r1, r0, r0, lsl #30
   1284c:	andeq	r1, r0, r0, ror #29
   12850:	andeq	r1, r0, ip, lsr #29
   12854:	andeq	r1, r0, r8, ror lr
   12858:	andeq	r1, r0, r4, asr #28
   1285c:	andeq	r1, r0, ip, lsl lr
   12860:	strdeq	r1, [r0], -r4
   12864:	ldrdeq	r1, [r0], -r0
   12868:			; <UNDEFINED> instruction: 0x00001db0
   1286c:	andeq	r1, r0, ip, lsl #27
   12870:	andeq	r1, r0, ip, ror #26
   12874:	andeq	r1, r0, ip, asr #26
   12878:	andeq	r1, r0, r4, lsr #26
   1287c:	strdeq	r1, [r0], -r8
   12880:	andeq	r1, r0, r8, asr #25
   12884:	andeq	r1, r0, r4, lsr #25
   12888:	andeq	r1, r0, ip, ror ip
   1288c:	andeq	r1, r0, ip, asr ip
   12890:	andeq	r1, r0, r8, lsr ip
   12894:	strheq	r2, [r0], -r0

00012898 <flatcc_verify_field@@Base>:
   12898:	add	r1, r1, #2
   1289c:	ldrh	ip, [r0, #22]
   128a0:	lsl	r1, r1, #1
   128a4:	uxth	r1, r1
   128a8:	cmp	ip, r1
   128ac:	bls	128e0 <flatcc_verify_field@@Base+0x48>
   128b0:	ldr	ip, [r0, #12]
   128b4:	ldrh	r1, [ip, r1]
   128b8:	cmp	r1, #0
   128bc:	beq	128e0 <flatcc_verify_field@@Base+0x48>
   128c0:	push	{lr}		; (str lr, [sp, #-4]!)
   128c4:	add	r2, r2, r1
   128c8:	ldrh	lr, [r0, #20]
   128cc:	ldr	ip, [r0]
   128d0:	cmp	r2, lr
   128d4:	bls	128e8 <flatcc_verify_field@@Base+0x50>
   128d8:	mov	r0, #13
   128dc:	pop	{pc}		; (ldr pc, [sp], #4)
   128e0:	mov	r0, #0
   128e4:	bx	lr
   128e8:	ldr	r0, [r0, #16]
   128ec:	sub	r3, r3, #1
   128f0:	add	r0, ip, r0
   128f4:	add	r0, r0, r1
   128f8:	tst	r0, r3
   128fc:	moveq	r0, #0
   12900:	movne	r0, #12
   12904:	pop	{pc}		; (ldr pc, [sp], #4)

00012908 <flatcc_verify_string_field@@Base>:
   12908:	push	{r4, lr}
   1290c:	sub	sp, sp, #8
   12910:	add	r3, sp, #4
   12914:	mov	r4, r0
   12918:	bl	12520 <verify_monster@@Base+0x86c>
   1291c:	cmp	r0, #0
   12920:	bne	12974 <flatcc_verify_string_field@@Base+0x6c>
   12924:	ldr	r3, [sp, #4]
   12928:	cmp	r3, #0
   1292c:	beq	12974 <flatcc_verify_string_field@@Base+0x6c>
   12930:	ldr	r1, [r4]
   12934:	ldr	r2, [r1, r3]
   12938:	add	r2, r3, r2
   1293c:	cmp	r3, r2
   12940:	bcs	1297c <flatcc_verify_string_field@@Base+0x74>
   12944:	ldr	r3, [r4, #4]
   12948:	add	ip, r2, #4
   1294c:	cmp	r3, ip
   12950:	bcc	1297c <flatcc_verify_string_field@@Base+0x74>
   12954:	tst	r2, #3
   12958:	bne	1297c <flatcc_verify_string_field@@Base+0x74>
   1295c:	ldr	r2, [r1, r2]
   12960:	sub	r3, r3, ip
   12964:	add	lr, r2, #1
   12968:	cmp	r3, lr
   1296c:	movcc	r0, #8
   12970:	bcs	12988 <flatcc_verify_string_field@@Base+0x80>
   12974:	add	sp, sp, #8
   12978:	pop	{r4, pc}
   1297c:	mov	r0, #17
   12980:	add	sp, sp, #8
   12984:	pop	{r4, pc}
   12988:	add	r1, r1, ip
   1298c:	ldrb	r3, [r1, r2]
   12990:	cmp	r3, #0
   12994:	movne	r0, #7
   12998:	b	12974 <flatcc_verify_string_field@@Base+0x6c>

0001299c <flatcc_verify_vector_field@@Base>:
   1299c:	push	{r4, r5, r6, lr}
   129a0:	sub	sp, sp, #8
   129a4:	mov	r5, r3
   129a8:	add	r3, sp, #4
   129ac:	mov	r6, r0
   129b0:	ldrh	r4, [sp, #24]
   129b4:	bl	12520 <verify_monster@@Base+0x86c>
   129b8:	cmp	r0, #0
   129bc:	bne	12a1c <flatcc_verify_vector_field@@Base+0x80>
   129c0:	ldr	r3, [sp, #4]
   129c4:	cmp	r3, #0
   129c8:	beq	12a1c <flatcc_verify_vector_field@@Base+0x80>
   129cc:	ldr	r1, [r6]
   129d0:	ldr	r2, [r1, r3]
   129d4:	add	r2, r3, r2
   129d8:	cmp	r3, r2
   129dc:	bcs	12a24 <flatcc_verify_vector_field@@Base+0x88>
   129e0:	ldr	ip, [r6, #4]
   129e4:	add	r3, r2, #4
   129e8:	cmp	ip, r3
   129ec:	bcc	12a24 <flatcc_verify_vector_field@@Base+0x88>
   129f0:	cmp	r4, #4
   129f4:	movcc	r4, #4
   129f8:	sub	r4, r4, #1
   129fc:	orr	r4, r4, #3
   12a00:	tst	r4, r3
   12a04:	bne	12a24 <flatcc_verify_vector_field@@Base+0x88>
   12a08:	ldr	r2, [r1, r2]
   12a0c:	ldr	r1, [sp, #28]
   12a10:	cmp	r1, r2
   12a14:	movcc	r0, #25
   12a18:	bcs	12a30 <flatcc_verify_vector_field@@Base+0x94>
   12a1c:	add	sp, sp, #8
   12a20:	pop	{r4, r5, r6, pc}
   12a24:	mov	r0, #16
   12a28:	add	sp, sp, #8
   12a2c:	pop	{r4, r5, r6, pc}
   12a30:	mul	r5, r2, r5
   12a34:	sub	r3, ip, r3
   12a38:	cmp	r3, r5
   12a3c:	movcc	r0, #26
   12a40:	b	12a1c <flatcc_verify_vector_field@@Base+0x80>

00012a44 <flatcc_verify_string_vector_field@@Base>:
   12a44:	push	{r4, r5, r6, r7, lr}
   12a48:	sub	sp, sp, #12
   12a4c:	add	r3, sp, #4
   12a50:	mov	r4, r0
   12a54:	bl	12520 <verify_monster@@Base+0x86c>
   12a58:	cmp	r0, #0
   12a5c:	bne	12ab4 <flatcc_verify_string_vector_field@@Base+0x70>
   12a60:	ldr	r3, [sp, #4]
   12a64:	cmp	r3, #0
   12a68:	beq	12ab4 <flatcc_verify_string_vector_field@@Base+0x70>
   12a6c:	ldr	lr, [r4]
   12a70:	ldr	r2, [lr, r3]
   12a74:	add	r2, r3, r2
   12a78:	cmp	r3, r2
   12a7c:	bcs	12abc <flatcc_verify_string_vector_field@@Base+0x78>
   12a80:	ldr	r5, [r4, #4]
   12a84:	add	r3, r2, #4
   12a88:	cmp	r5, r3
   12a8c:	bcc	12abc <flatcc_verify_string_vector_field@@Base+0x78>
   12a90:	tst	r3, #3
   12a94:	bne	12abc <flatcc_verify_string_vector_field@@Base+0x78>
   12a98:	ldr	r1, [lr, r2]
   12a9c:	cmn	r1, #-1073741823	; 0xc0000001
   12aa0:	bls	12ac8 <flatcc_verify_string_vector_field@@Base+0x84>
   12aa4:	ldr	r2, [lr, r2]
   12aa8:	cmn	r2, #-1073741823	; 0xc0000001
   12aac:	movhi	r0, #25
   12ab0:	bls	12b34 <flatcc_verify_string_vector_field@@Base+0xf0>
   12ab4:	add	sp, sp, #12
   12ab8:	pop	{r4, r5, r6, r7, pc}
   12abc:	mov	r0, #16
   12ac0:	add	sp, sp, #12
   12ac4:	pop	{r4, r5, r6, r7, pc}
   12ac8:	lsl	r4, r1, #2
   12acc:	sub	ip, r5, r3
   12ad0:	cmp	ip, r4
   12ad4:	bcc	12aa4 <flatcc_verify_string_vector_field@@Base+0x60>
   12ad8:	cmp	r1, #0
   12adc:	beq	12ab4 <flatcc_verify_string_vector_field@@Base+0x70>
   12ae0:	ldr	r2, [lr, r3]
   12ae4:	add	r1, lr, r3
   12ae8:	add	r2, r3, r2
   12aec:	cmp	r3, r2
   12af0:	bcs	12b28 <flatcc_verify_string_vector_field@@Base+0xe4>
   12af4:	add	ip, r2, #4
   12af8:	cmp	r5, ip
   12afc:	bcc	12b28 <flatcc_verify_string_vector_field@@Base+0xe4>
   12b00:	tst	r2, #3
   12b04:	bne	12b28 <flatcc_verify_string_vector_field@@Base+0xe4>
   12b08:	ldr	r2, [lr, r2]
   12b0c:	sub	r6, r5, ip
   12b10:	add	r7, r2, #1
   12b14:	cmp	r7, r6
   12b18:	bls	12b44 <flatcc_verify_string_vector_field@@Base+0x100>
   12b1c:	mov	r0, #8
   12b20:	add	sp, sp, #12
   12b24:	pop	{r4, r5, r6, r7, pc}
   12b28:	mov	r0, #17
   12b2c:	add	sp, sp, #12
   12b30:	pop	{r4, r5, r6, r7, pc}
   12b34:	sub	r3, r5, r3
   12b38:	cmp	r3, r2, lsl #2
   12b3c:	movcc	r0, #26
   12b40:	b	12ab4 <flatcc_verify_string_vector_field@@Base+0x70>
   12b44:	add	r4, r3, r4
   12b48:	add	r2, lr, r2
   12b4c:	ldrb	r2, [r2, ip]
   12b50:	cmp	r2, #0
   12b54:	movne	r0, #7
   12b58:	bne	12ab4 <flatcc_verify_string_vector_field@@Base+0x70>
   12b5c:	add	r3, r3, #4
   12b60:	cmp	r3, r4
   12b64:	beq	12ab4 <flatcc_verify_string_vector_field@@Base+0x70>
   12b68:	ldr	r2, [r1, #4]!
   12b6c:	add	r2, r3, r2
   12b70:	cmp	r3, r2
   12b74:	add	ip, r2, #4
   12b78:	bcs	12b28 <flatcc_verify_string_vector_field@@Base+0xe4>
   12b7c:	cmp	r5, ip
   12b80:	bcc	12b28 <flatcc_verify_string_vector_field@@Base+0xe4>
   12b84:	tst	r2, #3
   12b88:	sub	r7, r5, ip
   12b8c:	bne	12b28 <flatcc_verify_string_vector_field@@Base+0xe4>
   12b90:	ldr	r2, [lr, r2]
   12b94:	add	r6, r2, #1
   12b98:	cmp	r7, r6
   12b9c:	bcc	12b1c <flatcc_verify_string_vector_field@@Base+0xd8>
   12ba0:	b	12b48 <flatcc_verify_string_vector_field@@Base+0x104>

00012ba4 <flatcc_verify_table_field@@Base>:
   12ba4:	push	{r4, r5, lr}
   12ba8:	sub	sp, sp, #36	; 0x24
   12bac:	mov	r5, r3
   12bb0:	add	r3, sp, #4
   12bb4:	mov	r4, r0
   12bb8:	bl	12520 <verify_monster@@Base+0x86c>
   12bbc:	cmp	r0, #0
   12bc0:	bne	12bd0 <flatcc_verify_table_field@@Base+0x2c>
   12bc4:	ldr	r3, [sp, #4]
   12bc8:	cmp	r3, #0
   12bcc:	bne	12bd8 <flatcc_verify_table_field@@Base+0x34>
   12bd0:	add	sp, sp, #36	; 0x24
   12bd4:	pop	{r4, r5, pc}
   12bd8:	ldr	r2, [r4, #8]
   12bdc:	ldr	ip, [r4]
   12be0:	sub	r2, r2, #1
   12be4:	cmp	r2, #0
   12be8:	ldr	r1, [ip, r3]
   12bec:	ldr	lr, [r4, #4]
   12bf0:	str	r2, [sp, #16]
   12bf4:	moveq	r0, #3
   12bf8:	beq	12bd0 <flatcc_verify_table_field@@Base+0x2c>
   12bfc:	add	r2, r3, r1
   12c00:	cmp	r3, r2
   12c04:	bcs	12ca0 <flatcc_verify_table_field@@Base+0xfc>
   12c08:	add	r3, r2, #4
   12c0c:	cmp	lr, r3
   12c10:	bcc	12ca0 <flatcc_verify_table_field@@Base+0xfc>
   12c14:	tst	r2, #3
   12c18:	bne	12ca0 <flatcc_verify_table_field@@Base+0xfc>
   12c1c:	str	r2, [sp, #24]
   12c20:	ldr	r3, [ip, r2]
   12c24:	subs	r3, r2, r3
   12c28:	bmi	12ca8 <flatcc_verify_table_field@@Base+0x104>
   12c2c:	tst	r3, #1
   12c30:	bne	12ca8 <flatcc_verify_table_field@@Base+0x104>
   12c34:	add	r1, r3, #2
   12c38:	cmp	lr, r1
   12c3c:	movcc	r0, #27
   12c40:	bcc	12bd0 <flatcc_verify_table_field@@Base+0x2c>
   12c44:	ldrh	r0, [ip, r3]
   12c48:	add	r4, ip, r3
   12c4c:	add	r3, r0, r3
   12c50:	cmp	lr, r3
   12c54:	strh	r0, [sp, #30]
   12c58:	bcc	12cb0 <flatcc_verify_table_field@@Base+0x10c>
   12c5c:	tst	r0, #1
   12c60:	bne	12cb0 <flatcc_verify_table_field@@Base+0x10c>
   12c64:	cmp	r0, #3
   12c68:	movls	r0, #28
   12c6c:	bls	12bd0 <flatcc_verify_table_field@@Base+0x2c>
   12c70:	ldrh	r3, [ip, r1]
   12c74:	sub	r2, lr, r2
   12c78:	cmp	r2, r3
   12c7c:	strh	r3, [sp, #28]
   12c80:	movcc	r0, #20
   12c84:	bcc	12bd0 <flatcc_verify_table_field@@Base+0x2c>
   12c88:	add	r0, sp, #8
   12c8c:	str	r4, [sp, #20]
   12c90:	str	ip, [sp, #8]
   12c94:	str	lr, [sp, #12]
   12c98:	blx	r5
   12c9c:	b	12bd0 <flatcc_verify_table_field@@Base+0x2c>
   12ca0:	mov	r0, #15
   12ca4:	b	12bd0 <flatcc_verify_table_field@@Base+0x2c>
   12ca8:	mov	r0, #29
   12cac:	b	12bd0 <flatcc_verify_table_field@@Base+0x2c>
   12cb0:	mov	r0, #30
   12cb4:	b	12bd0 <flatcc_verify_table_field@@Base+0x2c>

00012cb8 <flatcc_verify_table_vector_field@@Base>:
   12cb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cbc:	sub	sp, sp, #44	; 0x2c
   12cc0:	mov	r8, r3
   12cc4:	add	r3, sp, #12
   12cc8:	mov	r4, r0
   12ccc:	bl	12520 <verify_monster@@Base+0x86c>
   12cd0:	subs	r5, r0, #0
   12cd4:	bne	12ce4 <flatcc_verify_table_vector_field@@Base+0x2c>
   12cd8:	ldr	r3, [sp, #12]
   12cdc:	cmp	r3, #0
   12ce0:	bne	12cf0 <flatcc_verify_table_vector_field@@Base+0x38>
   12ce4:	mov	r0, r5
   12ce8:	add	sp, sp, #44	; 0x2c
   12cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cf0:	ldr	r7, [r4, #8]
   12cf4:	cmp	r7, #0
   12cf8:	ble	12d54 <flatcc_verify_table_vector_field@@Base+0x9c>
   12cfc:	ldr	sl, [r4]
   12d00:	ldr	r1, [sl, r3]
   12d04:	add	r1, r3, r1
   12d08:	cmp	r3, r1
   12d0c:	bcs	12d64 <flatcc_verify_table_vector_field@@Base+0xac>
   12d10:	ldr	fp, [r4, #4]
   12d14:	add	r4, r1, #4
   12d18:	cmp	fp, r4
   12d1c:	bcc	12d64 <flatcc_verify_table_vector_field@@Base+0xac>
   12d20:	tst	r4, #3
   12d24:	bne	12d64 <flatcc_verify_table_vector_field@@Base+0xac>
   12d28:	ldr	r3, [sl, r1]
   12d2c:	cmn	r3, #-1073741823	; 0xc0000001
   12d30:	bls	12d74 <flatcc_verify_table_vector_field@@Base+0xbc>
   12d34:	ldr	r3, [sl, r1]
   12d38:	cmn	r3, #-1073741823	; 0xc0000001
   12d3c:	movhi	r5, #25
   12d40:	bhi	12ce4 <flatcc_verify_table_vector_field@@Base+0x2c>
   12d44:	sub	r4, fp, r4
   12d48:	cmp	r4, r3, lsl #2
   12d4c:	movcc	r5, #26
   12d50:	b	12ce4 <flatcc_verify_table_vector_field@@Base+0x2c>
   12d54:	mov	r5, #3
   12d58:	mov	r0, r5
   12d5c:	add	sp, sp, #44	; 0x2c
   12d60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d64:	mov	r5, #16
   12d68:	mov	r0, r5
   12d6c:	add	sp, sp, #44	; 0x2c
   12d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d74:	lsl	r9, r3, #2
   12d78:	sub	r2, fp, r4
   12d7c:	cmp	r2, r9
   12d80:	bcc	12d34 <flatcc_verify_table_vector_field@@Base+0x7c>
   12d84:	cmp	r3, #0
   12d88:	beq	12ce4 <flatcc_verify_table_vector_field@@Base+0x2c>
   12d8c:	sub	r7, r7, #2
   12d90:	cmp	r7, #0
   12d94:	ldr	r3, [sl, r4]
   12d98:	add	r2, sl, r4
   12d9c:	str	r7, [sp, #24]
   12da0:	beq	12d54 <flatcc_verify_table_vector_field@@Base+0x9c>
   12da4:	add	r3, r4, r3
   12da8:	cmp	r4, r3
   12dac:	bcs	12f4c <flatcc_verify_table_vector_field@@Base+0x294>
   12db0:	add	r0, r3, #4
   12db4:	cmp	fp, r0
   12db8:	bcc	12f4c <flatcc_verify_table_vector_field@@Base+0x294>
   12dbc:	tst	r3, #3
   12dc0:	bne	12f4c <flatcc_verify_table_vector_field@@Base+0x294>
   12dc4:	add	r1, r1, #8
   12dc8:	add	r9, r4, r9
   12dcc:	add	r6, sl, r1
   12dd0:	mov	r1, r2
   12dd4:	add	r2, sp, #16
   12dd8:	str	r2, [sp]
   12ddc:	str	r3, [sp, #32]
   12de0:	ldr	r2, [sl, r3]
   12de4:	subs	r2, r3, r2
   12de8:	bmi	12df4 <flatcc_verify_table_vector_field@@Base+0x13c>
   12dec:	tst	r2, #1
   12df0:	beq	12ea4 <flatcc_verify_table_vector_field@@Base+0x1ec>
   12df4:	ldr	r3, [r1]
   12df8:	str	r7, [sp, #24]
   12dfc:	add	r3, r4, r3
   12e00:	cmp	r3, r4
   12e04:	bls	12f58 <flatcc_verify_table_vector_field@@Base+0x2a0>
   12e08:	add	r2, r3, #4
   12e0c:	cmp	fp, r2
   12e10:	bcc	12f58 <flatcc_verify_table_vector_field@@Base+0x2a0>
   12e14:	tst	r3, #3
   12e18:	bne	12f58 <flatcc_verify_table_vector_field@@Base+0x2a0>
   12e1c:	str	r3, [sp, #32]
   12e20:	ldr	r2, [sl, r3]
   12e24:	subs	r2, r3, r2
   12e28:	bmi	12f60 <flatcc_verify_table_vector_field@@Base+0x2a8>
   12e2c:	tst	r2, #1
   12e30:	bne	12f60 <flatcc_verify_table_vector_field@@Base+0x2a8>
   12e34:	add	r0, r2, #2
   12e38:	cmp	fp, r0
   12e3c:	movcc	r5, #27
   12e40:	bcc	12ce4 <flatcc_verify_table_vector_field@@Base+0x2c>
   12e44:	ldrh	r1, [sl, r2]
   12e48:	add	ip, sl, r2
   12e4c:	add	r2, r1, r2
   12e50:	cmp	fp, r2
   12e54:	strh	r1, [sp, #38]	; 0x26
   12e58:	bcc	12f68 <flatcc_verify_table_vector_field@@Base+0x2b0>
   12e5c:	tst	r1, #1
   12e60:	bne	12f68 <flatcc_verify_table_vector_field@@Base+0x2b0>
   12e64:	cmp	r1, #3
   12e68:	movls	r5, #28
   12e6c:	bls	12ce4 <flatcc_verify_table_vector_field@@Base+0x2c>
   12e70:	ldrh	r2, [sl, r0]
   12e74:	sub	r3, fp, r3
   12e78:	cmp	r3, r2
   12e7c:	strh	r2, [sp, #36]	; 0x24
   12e80:	movcc	r5, #20
   12e84:	bcc	12ce4 <flatcc_verify_table_vector_field@@Base+0x2c>
   12e88:	add	r0, sp, #16
   12e8c:	str	ip, [sp, #28]
   12e90:	str	sl, [sp, #16]
   12e94:	str	fp, [sp, #20]
   12e98:	blx	r8
   12e9c:	mov	r5, r0
   12ea0:	b	12ce4 <flatcc_verify_table_vector_field@@Base+0x2c>
   12ea4:	add	r0, r2, #2
   12ea8:	cmp	fp, r0
   12eac:	bcc	12df4 <flatcc_verify_table_vector_field@@Base+0x13c>
   12eb0:	ldrh	lr, [sl, r2]
   12eb4:	add	ip, sl, r2
   12eb8:	add	r2, lr, r2
   12ebc:	cmp	fp, r2
   12ec0:	strh	lr, [sp, #38]	; 0x26
   12ec4:	bcc	12df4 <flatcc_verify_table_vector_field@@Base+0x13c>
   12ec8:	tst	lr, #1
   12ecc:	bne	12df4 <flatcc_verify_table_vector_field@@Base+0x13c>
   12ed0:	cmp	lr, #3
   12ed4:	bls	12df4 <flatcc_verify_table_vector_field@@Base+0x13c>
   12ed8:	ldrh	r2, [sl, r0]
   12edc:	sub	r3, fp, r3
   12ee0:	cmp	r3, r2
   12ee4:	strh	r2, [sp, #36]	; 0x24
   12ee8:	bcc	12df4 <flatcc_verify_table_vector_field@@Base+0x13c>
   12eec:	ldr	r0, [sp]
   12ef0:	str	r1, [sp, #4]
   12ef4:	str	ip, [sp, #28]
   12ef8:	str	sl, [sp, #16]
   12efc:	str	fp, [sp, #20]
   12f00:	blx	r8
   12f04:	ldr	r1, [sp, #4]
   12f08:	cmp	r0, #0
   12f0c:	bne	12df4 <flatcc_verify_table_vector_field@@Base+0x13c>
   12f10:	add	r4, r4, #4
   12f14:	cmp	r4, r9
   12f18:	beq	12ce4 <flatcc_verify_table_vector_field@@Base+0x2c>
   12f1c:	mov	r2, r6
   12f20:	ldr	r3, [r6], #4
   12f24:	str	r7, [sp, #24]
   12f28:	add	r3, r3, r4
   12f2c:	cmp	r4, r3
   12f30:	bcs	12f4c <flatcc_verify_table_vector_field@@Base+0x294>
   12f34:	add	r0, r3, #4
   12f38:	cmp	fp, r0
   12f3c:	bcc	12f4c <flatcc_verify_table_vector_field@@Base+0x294>
   12f40:	tst	r3, #3
   12f44:	add	r1, r1, #4
   12f48:	beq	12ddc <flatcc_verify_table_vector_field@@Base+0x124>
   12f4c:	ldr	r3, [r2]
   12f50:	str	r7, [sp, #24]
   12f54:	b	12dfc <flatcc_verify_table_vector_field@@Base+0x144>
   12f58:	mov	r5, #15
   12f5c:	b	12ce4 <flatcc_verify_table_vector_field@@Base+0x2c>
   12f60:	mov	r5, #29
   12f64:	b	12ce4 <flatcc_verify_table_vector_field@@Base+0x2c>
   12f68:	mov	r5, #30
   12f6c:	b	12ce4 <flatcc_verify_table_vector_field@@Base+0x2c>

00012f70 <flatcc_verify_union_table@@Base>:
   12f70:	ldr	r3, [r0, #8]
   12f74:	push	{r4, r5, lr}
   12f78:	sub	r3, r3, #1
   12f7c:	sub	sp, sp, #28
   12f80:	cmp	r3, #0
   12f84:	ldr	lr, [r0]
   12f88:	str	r3, [sp, #8]
   12f8c:	ldr	ip, [r0, #4]
   12f90:	ldr	r2, [r0, #16]
   12f94:	ldr	r3, [r0, #20]
   12f98:	moveq	r0, #3
   12f9c:	bne	12fa8 <flatcc_verify_union_table@@Base+0x38>
   12fa0:	add	sp, sp, #28
   12fa4:	pop	{r4, r5, pc}
   12fa8:	add	r3, r2, r3
   12fac:	cmp	r2, r3
   12fb0:	bcs	1304c <flatcc_verify_union_table@@Base+0xdc>
   12fb4:	add	r2, r3, #4
   12fb8:	cmp	ip, r2
   12fbc:	bcc	1304c <flatcc_verify_union_table@@Base+0xdc>
   12fc0:	tst	r3, #3
   12fc4:	bne	1304c <flatcc_verify_union_table@@Base+0xdc>
   12fc8:	str	r3, [sp, #16]
   12fcc:	ldr	r2, [lr, r3]
   12fd0:	subs	r2, r3, r2
   12fd4:	bmi	13058 <flatcc_verify_union_table@@Base+0xe8>
   12fd8:	tst	r2, #1
   12fdc:	bne	13058 <flatcc_verify_union_table@@Base+0xe8>
   12fe0:	add	r0, r2, #2
   12fe4:	cmp	ip, r0
   12fe8:	movcc	r0, #27
   12fec:	bcc	12fa0 <flatcc_verify_union_table@@Base+0x30>
   12ff0:	ldrh	r4, [lr, r2]
   12ff4:	add	r5, lr, r2
   12ff8:	add	r2, r4, r2
   12ffc:	cmp	ip, r2
   13000:	strh	r4, [sp, #22]
   13004:	bcc	13060 <flatcc_verify_union_table@@Base+0xf0>
   13008:	tst	r4, #1
   1300c:	bne	13060 <flatcc_verify_union_table@@Base+0xf0>
   13010:	cmp	r4, #3
   13014:	movls	r0, #28
   13018:	bls	12fa0 <flatcc_verify_union_table@@Base+0x30>
   1301c:	ldrh	r2, [lr, r0]
   13020:	sub	r3, ip, r3
   13024:	cmp	r3, r2
   13028:	strh	r2, [sp, #20]
   1302c:	movcc	r0, #20
   13030:	bcc	12fa0 <flatcc_verify_union_table@@Base+0x30>
   13034:	mov	r0, sp
   13038:	str	r5, [sp, #12]
   1303c:	str	lr, [sp]
   13040:	str	ip, [sp, #4]
   13044:	blx	r1
   13048:	b	12fa0 <flatcc_verify_union_table@@Base+0x30>
   1304c:	mov	r0, #15
   13050:	add	sp, sp, #28
   13054:	pop	{r4, r5, pc}
   13058:	mov	r0, #29
   1305c:	b	12fa0 <flatcc_verify_union_table@@Base+0x30>
   13060:	mov	r0, #30
   13064:	b	12fa0 <flatcc_verify_union_table@@Base+0x30>

00013068 <flatcc_verify_union_struct@@Base>:
   13068:	ldr	r3, [r0, #20]
   1306c:	ldr	ip, [r0, #4]
   13070:	cmp	r3, #0
   13074:	ldr	r0, [r0, #16]
   13078:	bne	13084 <flatcc_verify_union_struct@@Base+0x1c>
   1307c:	mov	r0, #18
   13080:	bx	lr
   13084:	add	r3, r0, r3
   13088:	cmp	ip, r3
   1308c:	bcc	1307c <flatcc_verify_union_struct@@Base+0x14>
   13090:	adds	r1, r1, r3
   13094:	bcc	130a0 <flatcc_verify_union_struct@@Base+0x38>
   13098:	mov	r0, #10
   1309c:	bx	lr
   130a0:	cmp	ip, r1
   130a4:	bcs	130b0 <flatcc_verify_union_struct@@Base+0x48>
   130a8:	mov	r0, #9
   130ac:	bx	lr
   130b0:	sub	r2, r2, #1
   130b4:	tst	r2, r3
   130b8:	movne	r0, #11
   130bc:	moveq	r0, #0
   130c0:	bx	lr

000130c4 <flatcc_verify_union_string@@Base>:
   130c4:	ldr	r2, [r0, #16]
   130c8:	ldr	r3, [r0, #20]
   130cc:	add	r3, r2, r3
   130d0:	cmp	r2, r3
   130d4:	bcs	13110 <flatcc_verify_union_string@@Base+0x4c>
   130d8:	ldr	r2, [r0, #4]
   130dc:	add	r1, r3, #4
   130e0:	cmp	r2, r1
   130e4:	bcc	13110 <flatcc_verify_union_string@@Base+0x4c>
   130e8:	tst	r3, #3
   130ec:	bne	13110 <flatcc_verify_union_string@@Base+0x4c>
   130f0:	ldr	r0, [r0]
   130f4:	sub	r2, r2, r1
   130f8:	ldr	r3, [r0, r3]
   130fc:	add	ip, r3, #1
   13100:	cmp	r2, ip
   13104:	bcs	13118 <flatcc_verify_union_string@@Base+0x54>
   13108:	mov	r0, #8
   1310c:	bx	lr
   13110:	mov	r0, #17
   13114:	bx	lr
   13118:	add	r1, r0, r1
   1311c:	ldrb	r0, [r1, r3]
   13120:	cmp	r0, #0
   13124:	movne	r0, #7
   13128:	moveq	r0, #0
   1312c:	bx	lr

00013130 <flatcc_verify_buffer_header@@Base>:
   13130:	ands	r3, r0, #3
   13134:	beq	13140 <flatcc_verify_buffer_header@@Base+0x10>
   13138:	mov	r0, #5
   1313c:	bx	lr
   13140:	cmn	r1, #9
   13144:	bls	13150 <flatcc_verify_buffer_header@@Base+0x20>
   13148:	mov	r0, #6
   1314c:	bx	lr
   13150:	cmp	r1, #7
   13154:	bls	131a0 <flatcc_verify_buffer_header@@Base+0x70>
   13158:	cmp	r2, #0
   1315c:	beq	131a8 <flatcc_verify_buffer_header@@Base+0x78>
   13160:	push	{r4, lr}
   13164:	sub	sp, sp, #8
   13168:	mov	r4, r0
   1316c:	add	r0, sp, #8
   13170:	mov	r1, r2
   13174:	str	r3, [r0, #-4]!
   13178:	mov	r2, #4
   1317c:	bl	10d9c <strncpy@plt>
   13180:	ldr	r2, [r4, #4]
   13184:	ldr	r3, [sp, #4]
   13188:	cmp	r3, #0
   1318c:	cmpne	r2, r3
   13190:	moveq	r0, #0
   13194:	movne	r0, #2
   13198:	add	sp, sp, #8
   1319c:	pop	{r4, pc}
   131a0:	mov	r0, #1
   131a4:	bx	lr
   131a8:	mov	r0, #0
   131ac:	bx	lr

000131b0 <flatcc_verify_typed_buffer_header@@Base>:
   131b0:	tst	r0, #3
   131b4:	beq	131c0 <flatcc_verify_typed_buffer_header@@Base+0x10>
   131b8:	mov	r0, #5
   131bc:	bx	lr
   131c0:	cmn	r1, #9
   131c4:	bls	131d0 <flatcc_verify_typed_buffer_header@@Base+0x20>
   131c8:	mov	r0, #6
   131cc:	bx	lr
   131d0:	cmp	r1, #7
   131d4:	bls	131fc <flatcc_verify_typed_buffer_header@@Base+0x4c>
   131d8:	cmp	r2, #0
   131dc:	beq	131f4 <flatcc_verify_typed_buffer_header@@Base+0x44>
   131e0:	ldr	r0, [r0, #4]
   131e4:	cmp	r2, r0
   131e8:	movne	r0, #2
   131ec:	moveq	r0, #0
   131f0:	bx	lr
   131f4:	mov	r0, r2
   131f8:	bx	lr
   131fc:	mov	r0, #1
   13200:	bx	lr

00013204 <flatcc_verify_struct_as_root@@Base>:
   13204:	push	{r4, r5, r6, r7, r8, lr}
   13208:	mov	r6, r3
   1320c:	mov	r5, r0
   13210:	mov	r4, r1
   13214:	mov	r8, r2
   13218:	ldrh	r7, [sp, #24]
   1321c:	bl	13130 <flatcc_verify_buffer_header@@Base>
   13220:	cmp	r0, #0
   13224:	bne	13250 <flatcc_verify_struct_as_root@@Base+0x4c>
   13228:	ldr	r2, [r5]
   1322c:	cmp	r4, r2
   13230:	movcs	r3, #0
   13234:	movcc	r3, #1
   13238:	cmp	r2, #0
   1323c:	orreq	r3, r3, #1
   13240:	cmp	r3, #0
   13244:	beq	13264 <flatcc_verify_struct_as_root@@Base+0x60>
   13248:	mov	r0, #18
   1324c:	pop	{r4, r5, r6, r7, r8, pc}
   13250:	mov	r2, r8
   13254:	mov	r1, r4
   13258:	mov	r0, r5
   1325c:	pop	{r4, r5, r6, r7, r8, lr}
   13260:	b	13130 <flatcc_verify_buffer_header@@Base>
   13264:	adds	r6, r6, r2
   13268:	bcc	13274 <flatcc_verify_struct_as_root@@Base+0x70>
   1326c:	mov	r0, #10
   13270:	pop	{r4, r5, r6, r7, r8, pc}
   13274:	cmp	r4, r6
   13278:	bcs	13284 <flatcc_verify_struct_as_root@@Base+0x80>
   1327c:	mov	r0, #9
   13280:	pop	{r4, r5, r6, r7, r8, pc}
   13284:	sub	r7, r7, #1
   13288:	tst	r7, r2
   1328c:	movne	r0, #11
   13290:	pop	{r4, r5, r6, r7, r8, pc}

00013294 <flatcc_verify_struct_as_typed_root@@Base>:
   13294:	push	{r4, r5, r6, r7, r8, lr}
   13298:	mov	r6, r3
   1329c:	mov	r5, r0
   132a0:	mov	r4, r1
   132a4:	mov	r8, r2
   132a8:	ldrh	r7, [sp, #24]
   132ac:	bl	131b0 <flatcc_verify_typed_buffer_header@@Base>
   132b0:	cmp	r0, #0
   132b4:	bne	132e0 <flatcc_verify_struct_as_typed_root@@Base+0x4c>
   132b8:	ldr	r2, [r5]
   132bc:	cmp	r4, r2
   132c0:	movcs	r3, #0
   132c4:	movcc	r3, #1
   132c8:	cmp	r2, #0
   132cc:	orreq	r3, r3, #1
   132d0:	cmp	r3, #0
   132d4:	beq	132f4 <flatcc_verify_struct_as_typed_root@@Base+0x60>
   132d8:	mov	r0, #18
   132dc:	pop	{r4, r5, r6, r7, r8, pc}
   132e0:	mov	r2, r8
   132e4:	mov	r1, r4
   132e8:	mov	r0, r5
   132ec:	pop	{r4, r5, r6, r7, r8, lr}
   132f0:	b	131b0 <flatcc_verify_typed_buffer_header@@Base>
   132f4:	adds	r6, r6, r2
   132f8:	bcc	13304 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   132fc:	mov	r0, #10
   13300:	pop	{r4, r5, r6, r7, r8, pc}
   13304:	cmp	r4, r6
   13308:	bcs	13314 <flatcc_verify_struct_as_typed_root@@Base+0x80>
   1330c:	mov	r0, #9
   13310:	pop	{r4, r5, r6, r7, r8, pc}
   13314:	sub	r7, r7, #1
   13318:	tst	r7, r2
   1331c:	movne	r0, #11
   13320:	pop	{r4, r5, r6, r7, r8, pc}

00013324 <flatcc_verify_table_as_root@@Base>:
   13324:	push	{r4, r5, r6, r7, lr}
   13328:	sub	sp, sp, #28
   1332c:	mov	r7, r3
   13330:	mov	r4, r0
   13334:	mov	r5, r1
   13338:	mov	r6, r2
   1333c:	bl	13130 <flatcc_verify_buffer_header@@Base>
   13340:	cmp	r0, #0
   13344:	bne	1337c <flatcc_verify_table_as_root@@Base+0x58>
   13348:	ldr	r3, [r4]
   1334c:	mov	r2, #99	; 0x63
   13350:	cmp	r3, #0
   13354:	str	r2, [sp, #8]
   13358:	beq	13370 <flatcc_verify_table_as_root@@Base+0x4c>
   1335c:	add	r2, r3, #4
   13360:	cmp	r5, r2
   13364:	bcc	13370 <flatcc_verify_table_as_root@@Base+0x4c>
   13368:	tst	r3, #3
   1336c:	beq	13394 <flatcc_verify_table_as_root@@Base+0x70>
   13370:	mov	r0, #15
   13374:	add	sp, sp, #28
   13378:	pop	{r4, r5, r6, r7, pc}
   1337c:	mov	r2, r6
   13380:	mov	r1, r5
   13384:	mov	r0, r4
   13388:	bl	13130 <flatcc_verify_buffer_header@@Base>
   1338c:	add	sp, sp, #28
   13390:	pop	{r4, r5, r6, r7, pc}
   13394:	ldr	r2, [r4, r3]
   13398:	str	r3, [sp, #16]
   1339c:	subs	r2, r3, r2
   133a0:	bmi	13414 <flatcc_verify_table_as_root@@Base+0xf0>
   133a4:	tst	r2, #1
   133a8:	bne	13414 <flatcc_verify_table_as_root@@Base+0xf0>
   133ac:	add	r1, r2, #2
   133b0:	cmp	r5, r1
   133b4:	movcc	r0, #27
   133b8:	bcc	13374 <flatcc_verify_table_as_root@@Base+0x50>
   133bc:	ldrh	r0, [r4, r2]
   133c0:	add	ip, r4, r2
   133c4:	add	r2, r0, r2
   133c8:	cmp	r5, r2
   133cc:	strh	r0, [sp, #22]
   133d0:	bcc	1341c <flatcc_verify_table_as_root@@Base+0xf8>
   133d4:	tst	r0, #1
   133d8:	bne	1341c <flatcc_verify_table_as_root@@Base+0xf8>
   133dc:	cmp	r0, #3
   133e0:	movls	r0, #28
   133e4:	bls	13374 <flatcc_verify_table_as_root@@Base+0x50>
   133e8:	ldrh	r2, [r4, r1]
   133ec:	sub	r3, r5, r3
   133f0:	cmp	r3, r2
   133f4:	strh	r2, [sp, #20]
   133f8:	movcc	r0, #20
   133fc:	bcc	13374 <flatcc_verify_table_as_root@@Base+0x50>
   13400:	mov	r0, sp
   13404:	str	ip, [sp, #12]
   13408:	stm	sp, {r4, r5}
   1340c:	blx	r7
   13410:	b	13374 <flatcc_verify_table_as_root@@Base+0x50>
   13414:	mov	r0, #29
   13418:	b	13374 <flatcc_verify_table_as_root@@Base+0x50>
   1341c:	mov	r0, #30
   13420:	b	13374 <flatcc_verify_table_as_root@@Base+0x50>

00013424 <flatcc_verify_table_as_typed_root@@Base>:
   13424:	push	{r4, r5, r6, r7, lr}
   13428:	sub	sp, sp, #28
   1342c:	mov	r7, r3
   13430:	mov	r4, r0
   13434:	mov	r5, r1
   13438:	mov	r6, r2
   1343c:	bl	131b0 <flatcc_verify_typed_buffer_header@@Base>
   13440:	cmp	r0, #0
   13444:	bne	1347c <flatcc_verify_table_as_typed_root@@Base+0x58>
   13448:	ldr	r3, [r4]
   1344c:	mov	r2, #99	; 0x63
   13450:	cmp	r3, #0
   13454:	str	r2, [sp, #8]
   13458:	beq	13470 <flatcc_verify_table_as_typed_root@@Base+0x4c>
   1345c:	add	r2, r3, #4
   13460:	cmp	r5, r2
   13464:	bcc	13470 <flatcc_verify_table_as_typed_root@@Base+0x4c>
   13468:	tst	r3, #3
   1346c:	beq	13494 <flatcc_verify_table_as_typed_root@@Base+0x70>
   13470:	mov	r0, #15
   13474:	add	sp, sp, #28
   13478:	pop	{r4, r5, r6, r7, pc}
   1347c:	mov	r2, r6
   13480:	mov	r1, r5
   13484:	mov	r0, r4
   13488:	bl	131b0 <flatcc_verify_typed_buffer_header@@Base>
   1348c:	add	sp, sp, #28
   13490:	pop	{r4, r5, r6, r7, pc}
   13494:	ldr	r2, [r4, r3]
   13498:	str	r3, [sp, #16]
   1349c:	subs	r2, r3, r2
   134a0:	bmi	13514 <flatcc_verify_table_as_typed_root@@Base+0xf0>
   134a4:	tst	r2, #1
   134a8:	bne	13514 <flatcc_verify_table_as_typed_root@@Base+0xf0>
   134ac:	add	r1, r2, #2
   134b0:	cmp	r5, r1
   134b4:	movcc	r0, #27
   134b8:	bcc	13474 <flatcc_verify_table_as_typed_root@@Base+0x50>
   134bc:	ldrh	r0, [r4, r2]
   134c0:	add	ip, r4, r2
   134c4:	add	r2, r0, r2
   134c8:	cmp	r5, r2
   134cc:	strh	r0, [sp, #22]
   134d0:	bcc	1351c <flatcc_verify_table_as_typed_root@@Base+0xf8>
   134d4:	tst	r0, #1
   134d8:	bne	1351c <flatcc_verify_table_as_typed_root@@Base+0xf8>
   134dc:	cmp	r0, #3
   134e0:	movls	r0, #28
   134e4:	bls	13474 <flatcc_verify_table_as_typed_root@@Base+0x50>
   134e8:	ldrh	r2, [r4, r1]
   134ec:	sub	r3, r5, r3
   134f0:	cmp	r3, r2
   134f4:	strh	r2, [sp, #20]
   134f8:	movcc	r0, #20
   134fc:	bcc	13474 <flatcc_verify_table_as_typed_root@@Base+0x50>
   13500:	mov	r0, sp
   13504:	str	ip, [sp, #12]
   13508:	stm	sp, {r4, r5}
   1350c:	blx	r7
   13510:	b	13474 <flatcc_verify_table_as_typed_root@@Base+0x50>
   13514:	mov	r0, #29
   13518:	b	13474 <flatcc_verify_table_as_typed_root@@Base+0x50>
   1351c:	mov	r0, #30
   13520:	b	13474 <flatcc_verify_table_as_typed_root@@Base+0x50>

00013524 <flatcc_verify_struct_as_nested_root@@Base>:
   13524:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13528:	sub	sp, sp, #12
   1352c:	mvn	sl, #0
   13530:	ldrh	r6, [sp, #52]	; 0x34
   13534:	mov	r9, #1
   13538:	mov	r7, r3
   1353c:	str	sl, [sp, #4]
   13540:	mov	r3, r6
   13544:	str	r9, [sp]
   13548:	mov	r5, r0
   1354c:	mov	r4, r1
   13550:	mov	fp, r2
   13554:	ldr	r8, [sp, #48]	; 0x30
   13558:	bl	1299c <flatcc_verify_vector_field@@Base>
   1355c:	cmp	r0, #0
   13560:	bne	135c8 <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   13564:	add	r4, r4, #2
   13568:	ldrh	r3, [r5, #22]
   1356c:	lsl	r4, r4, #1
   13570:	uxth	r4, r4
   13574:	cmp	r3, r4
   13578:	bls	135ec <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   1357c:	ldr	r3, [r5, #12]
   13580:	ldrh	r3, [r3, r4]
   13584:	cmp	r3, #0
   13588:	beq	135ec <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   1358c:	ldr	r1, [r5, #16]
   13590:	ldr	r2, [r5]
   13594:	add	r3, r3, r1
   13598:	adds	r1, r2, r3
   1359c:	beq	135ec <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   135a0:	ldr	r2, [r2, r3]
   135a4:	mov	r3, r8
   135a8:	add	r0, r1, r2
   135ac:	add	r0, r0, #4
   135b0:	ldr	r1, [r1, r2]
   135b4:	mov	r2, r7
   135b8:	str	r6, [sp, #48]	; 0x30
   135bc:	add	sp, sp, #12
   135c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135c4:	b	13204 <flatcc_verify_struct_as_root@@Base>
   135c8:	str	sl, [sp, #52]	; 0x34
   135cc:	str	r9, [sp, #48]	; 0x30
   135d0:	mov	r3, r6
   135d4:	mov	r2, fp
   135d8:	mov	r1, r4
   135dc:	mov	r0, r5
   135e0:	add	sp, sp, #12
   135e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135e8:	b	1299c <flatcc_verify_vector_field@@Base>
   135ec:	add	sp, sp, #12
   135f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000135f4 <flatcc_verify_table_as_nested_root@@Base>:
   135f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   135f8:	sub	sp, sp, #32
   135fc:	mvn	r9, #0
   13600:	ldrh	r7, [sp, #64]	; 0x40
   13604:	mov	r8, #1
   13608:	mov	r6, r3
   1360c:	str	r9, [sp, #4]
   13610:	mov	r3, r7
   13614:	str	r8, [sp]
   13618:	mov	r5, r0
   1361c:	mov	r4, r1
   13620:	mov	sl, r2
   13624:	bl	1299c <flatcc_verify_vector_field@@Base>
   13628:	cmp	r0, #0
   1362c:	bne	136d0 <flatcc_verify_table_as_nested_root@@Base+0xdc>
   13630:	add	r4, r4, #2
   13634:	ldrh	r3, [r5, #22]
   13638:	lsl	r4, r4, #1
   1363c:	uxth	r4, r4
   13640:	cmp	r3, r4
   13644:	bls	136b0 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   13648:	ldr	r3, [r5, #12]
   1364c:	ldrh	r3, [r3, r4]
   13650:	cmp	r3, #0
   13654:	beq	136b0 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   13658:	ldr	r1, [r5, #16]
   1365c:	ldr	r2, [r5]
   13660:	add	r3, r3, r1
   13664:	adds	r1, r2, r3
   13668:	beq	136b0 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   1366c:	ldr	r3, [r2, r3]
   13670:	mov	r2, r6
   13674:	add	r4, r1, r3
   13678:	ldr	r7, [r1, r3]
   1367c:	add	r8, r4, #4
   13680:	mov	r0, r8
   13684:	mov	r1, r7
   13688:	bl	13130 <flatcc_verify_buffer_header@@Base>
   1368c:	cmp	r0, #0
   13690:	bne	136b8 <flatcc_verify_table_as_nested_root@@Base+0xc4>
   13694:	ldr	r3, [r5, #8]
   13698:	ldr	r2, [r4, #4]
   1369c:	sub	r3, r3, #1
   136a0:	cmp	r3, #0
   136a4:	str	r3, [sp, #16]
   136a8:	moveq	r0, #3
   136ac:	bne	136f0 <flatcc_verify_table_as_nested_root@@Base+0xfc>
   136b0:	add	sp, sp, #32
   136b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   136b8:	mov	r2, r6
   136bc:	mov	r1, r7
   136c0:	mov	r0, r8
   136c4:	bl	13130 <flatcc_verify_buffer_header@@Base>
   136c8:	add	sp, sp, #32
   136cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   136d0:	stm	sp, {r8, r9}
   136d4:	mov	r3, r7
   136d8:	mov	r2, sl
   136dc:	mov	r1, r4
   136e0:	mov	r0, r5
   136e4:	bl	1299c <flatcc_verify_vector_field@@Base>
   136e8:	add	sp, sp, #32
   136ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   136f0:	cmp	r2, #0
   136f4:	beq	13794 <flatcc_verify_table_as_nested_root@@Base+0x1a0>
   136f8:	add	r3, r2, #4
   136fc:	cmp	r7, r3
   13700:	bcc	13794 <flatcc_verify_table_as_nested_root@@Base+0x1a0>
   13704:	tst	r2, #3
   13708:	bne	13794 <flatcc_verify_table_as_nested_root@@Base+0x1a0>
   1370c:	str	r2, [sp, #24]
   13710:	ldr	r3, [r8, r2]
   13714:	subs	r3, r2, r3
   13718:	bmi	137a0 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   1371c:	tst	r3, #1
   13720:	bne	137a0 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   13724:	add	r1, r3, #2
   13728:	cmp	r7, r1
   1372c:	movcc	r0, #27
   13730:	bcc	136b0 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   13734:	ldrh	r0, [r8, r3]
   13738:	add	ip, r8, r3
   1373c:	add	r3, r0, r3
   13740:	cmp	r7, r3
   13744:	strh	r0, [sp, #30]
   13748:	bcc	137a8 <flatcc_verify_table_as_nested_root@@Base+0x1b4>
   1374c:	tst	r0, #1
   13750:	bne	137a8 <flatcc_verify_table_as_nested_root@@Base+0x1b4>
   13754:	cmp	r0, #3
   13758:	movls	r0, #28
   1375c:	bls	136b0 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   13760:	ldrh	r3, [r8, r1]
   13764:	sub	r2, r7, r2
   13768:	cmp	r2, r3
   1376c:	strh	r3, [sp, #28]
   13770:	movcc	r0, #20
   13774:	bcc	136b0 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   13778:	add	r0, sp, #8
   1377c:	ldr	r3, [sp, #68]	; 0x44
   13780:	str	ip, [sp, #20]
   13784:	str	r8, [sp, #8]
   13788:	str	r7, [sp, #12]
   1378c:	blx	r3
   13790:	b	136b0 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   13794:	mov	r0, #15
   13798:	add	sp, sp, #32
   1379c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   137a0:	mov	r0, #29
   137a4:	b	136b0 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   137a8:	mov	r0, #30
   137ac:	b	136b0 <flatcc_verify_table_as_nested_root@@Base+0xbc>

000137b0 <flatcc_verify_union_field@@Base>:
   137b0:	sub	ip, r1, #1
   137b4:	push	{r4, r5, r6, lr}
   137b8:	uxth	ip, ip
   137bc:	add	ip, ip, #2
   137c0:	ldrh	lr, [r0, #22]
   137c4:	lsl	ip, ip, #1
   137c8:	sub	sp, sp, #32
   137cc:	uxth	ip, ip
   137d0:	cmp	ip, lr
   137d4:	ldr	r5, [r0, #12]
   137d8:	bcs	13804 <flatcc_verify_union_field@@Base+0x54>
   137dc:	ldrh	ip, [r5, ip]
   137e0:	cmp	ip, #0
   137e4:	beq	13804 <flatcc_verify_union_field@@Base+0x54>
   137e8:	ldrh	r4, [r0, #20]
   137ec:	add	r6, ip, #1
   137f0:	cmp	r6, r4
   137f4:	movhi	r0, #13
   137f8:	bls	13848 <flatcc_verify_union_field@@Base+0x98>
   137fc:	add	sp, sp, #32
   13800:	pop	{r4, r5, r6, pc}
   13804:	add	r1, r1, #2
   13808:	lsl	r1, r1, #1
   1380c:	uxth	r1, r1
   13810:	cmp	lr, r1
   13814:	bhi	13830 <flatcc_verify_union_field@@Base+0x80>
   13818:	cmp	r2, #0
   1381c:	movne	r0, #21
   13820:	bne	137fc <flatcc_verify_union_field@@Base+0x4c>
   13824:	mov	r0, #0
   13828:	add	sp, sp, #32
   1382c:	pop	{r4, r5, r6, pc}
   13830:	ldrh	r3, [r5, r1]
   13834:	cmp	r3, #0
   13838:	movne	r0, #23
   1383c:	beq	13818 <flatcc_verify_union_field@@Base+0x68>
   13840:	add	sp, sp, #32
   13844:	pop	{r4, r5, r6, pc}
   13848:	add	r4, r1, #2
   1384c:	ldr	r6, [r0]
   13850:	lsl	r4, r4, #1
   13854:	uxth	r4, r4
   13858:	cmp	lr, r4
   1385c:	bhi	138d0 <flatcc_verify_union_field@@Base+0x120>
   13860:	ldr	lr, [r0, #16]
   13864:	add	ip, ip, lr
   13868:	add	r4, r6, ip
   1386c:	ldrb	ip, [r6, ip]
   13870:	cmp	ip, #0
   13874:	beq	13824 <flatcc_verify_union_field@@Base+0x74>
   13878:	mov	r6, r3
   1387c:	add	r3, sp, #4
   13880:	mov	r5, r0
   13884:	bl	12520 <verify_monster@@Base+0x86c>
   13888:	cmp	r0, #0
   1388c:	bne	137fc <flatcc_verify_union_field@@Base+0x4c>
   13890:	ldr	r3, [sp, #4]
   13894:	cmp	r3, #0
   13898:	beq	13824 <flatcc_verify_union_field@@Base+0x74>
   1389c:	ldmib	r5, {r0, r1}
   138a0:	ldr	r2, [r5]
   138a4:	str	r3, [sp, #24]
   138a8:	str	r0, [sp, #12]
   138ac:	str	r1, [sp, #16]
   138b0:	ldr	r3, [r2, r3]
   138b4:	str	r2, [sp, #8]
   138b8:	str	r3, [sp, #28]
   138bc:	ldrb	r3, [r4]
   138c0:	add	r0, sp, #8
   138c4:	strb	r3, [sp, #20]
   138c8:	blx	r6
   138cc:	b	137fc <flatcc_verify_union_field@@Base+0x4c>
   138d0:	ldr	lr, [r0, #16]
   138d4:	ldrh	r5, [r5, r4]
   138d8:	add	ip, ip, lr
   138dc:	add	r4, r6, ip
   138e0:	ldrb	ip, [r6, ip]
   138e4:	adds	lr, ip, #0
   138e8:	movne	lr, #1
   138ec:	cmp	r5, #0
   138f0:	orreq	lr, lr, #1
   138f4:	cmp	lr, #0
   138f8:	bne	13870 <flatcc_verify_union_field@@Base+0xc0>
   138fc:	mov	r0, #24
   13900:	add	sp, sp, #32
   13904:	pop	{r4, r5, r6, pc}

00013908 <flatcc_verify_union_vector_field@@Base>:
   13908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1390c:	sub	r6, r1, #1
   13910:	ldrh	lr, [r0, #22]
   13914:	uxth	r6, r6
   13918:	add	r5, r6, #2
   1391c:	sub	sp, sp, #52	; 0x34
   13920:	lsl	r5, r5, #1
   13924:	ldr	r4, [r0, #12]
   13928:	uxth	r5, r5
   1392c:	cmp	r5, lr
   13930:	bcs	139e0 <flatcc_verify_union_vector_field@@Base+0xd8>
   13934:	ldrh	ip, [r4, r5]
   13938:	cmp	ip, #0
   1393c:	beq	139e0 <flatcc_verify_union_vector_field@@Base+0xd8>
   13940:	mov	r9, #1
   13944:	mvn	fp, #0
   13948:	str	r3, [sp, #12]
   1394c:	mov	r7, r1
   13950:	stm	sp, {r9, fp}
   13954:	mov	r3, r9
   13958:	mov	r1, r6
   1395c:	mov	r8, r2
   13960:	mov	r4, r0
   13964:	bl	1299c <flatcc_verify_vector_field@@Base>
   13968:	subs	sl, r0, #0
   1396c:	bne	13a98 <flatcc_verify_union_vector_field@@Base+0x190>
   13970:	ldrh	r3, [r4, #22]
   13974:	cmp	r3, r5
   13978:	bls	139d4 <flatcc_verify_union_vector_field@@Base+0xcc>
   1397c:	ldr	r3, [r4, #12]
   13980:	ldrh	r3, [r3, r5]
   13984:	cmp	r3, #0
   13988:	beq	139d4 <flatcc_verify_union_vector_field@@Base+0xcc>
   1398c:	ldr	r1, [r4, #16]
   13990:	ldr	r2, [r4]
   13994:	add	r3, r3, r1
   13998:	adds	lr, r2, r3
   1399c:	beq	139d4 <flatcc_verify_union_vector_field@@Base+0xcc>
   139a0:	ldr	ip, [r2, r3]
   139a4:	mov	r1, r7
   139a8:	mov	r2, r8
   139ac:	add	r3, sp, #20
   139b0:	mov	r0, r4
   139b4:	add	r5, lr, ip
   139b8:	ldr	r7, [lr, ip]
   139bc:	bl	12520 <verify_monster@@Base+0x86c>
   139c0:	subs	r6, r0, #0
   139c4:	bne	13a80 <flatcc_verify_union_vector_field@@Base+0x178>
   139c8:	ldr	r3, [sp, #20]
   139cc:	cmp	r3, #0
   139d0:	bne	13a1c <flatcc_verify_union_vector_field@@Base+0x114>
   139d4:	mov	r0, sl
   139d8:	add	sp, sp, #52	; 0x34
   139dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139e0:	add	ip, r1, #2
   139e4:	lsl	ip, ip, #1
   139e8:	uxth	ip, ip
   139ec:	cmp	lr, ip
   139f0:	bhi	13a0c <flatcc_verify_union_vector_field@@Base+0x104>
   139f4:	cmp	r2, #0
   139f8:	movne	sl, #22
   139fc:	beq	13940 <flatcc_verify_union_vector_field@@Base+0x38>
   13a00:	mov	r0, sl
   13a04:	add	sp, sp, #52	; 0x34
   13a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a0c:	ldrh	ip, [r4, ip]
   13a10:	cmp	ip, #0
   13a14:	bne	13940 <flatcc_verify_union_vector_field@@Base+0x38>
   13a18:	b	139f4 <flatcc_verify_union_vector_field@@Base+0xec>
   13a1c:	ldr	r1, [r4, #8]
   13a20:	cmp	r1, #0
   13a24:	movle	sl, #3
   13a28:	ble	139d4 <flatcc_verify_union_vector_field@@Base+0xcc>
   13a2c:	ldr	r0, [r4]
   13a30:	ldr	r2, [r0, r3]
   13a34:	add	r2, r3, r2
   13a38:	cmp	r3, r2
   13a3c:	bcs	13a90 <flatcc_verify_union_vector_field@@Base+0x188>
   13a40:	ldr	ip, [r4, #4]
   13a44:	add	r8, r2, #4
   13a48:	cmp	ip, r8
   13a4c:	bcc	13a90 <flatcc_verify_union_vector_field@@Base+0x188>
   13a50:	ands	r3, r8, #3
   13a54:	beq	13ac0 <flatcc_verify_union_vector_field@@Base+0x1b8>
   13a58:	cmp	r3, #0
   13a5c:	bne	13a90 <flatcc_verify_union_vector_field@@Base+0x188>
   13a60:	ldr	r3, [r0, r2]
   13a64:	cmn	r3, #-1073741823	; 0xc0000001
   13a68:	movhi	sl, #25
   13a6c:	bhi	139d4 <flatcc_verify_union_vector_field@@Base+0xcc>
   13a70:	sub	ip, ip, r8
   13a74:	cmp	ip, r3, lsl #2
   13a78:	movcc	sl, #26
   13a7c:	bcc	139d4 <flatcc_verify_union_vector_field@@Base+0xcc>
   13a80:	mov	sl, r6
   13a84:	mov	r0, sl
   13a88:	add	sp, sp, #52	; 0x34
   13a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a90:	mov	sl, #16
   13a94:	b	139d4 <flatcc_verify_union_vector_field@@Base+0xcc>
   13a98:	stm	sp, {r9, fp}
   13a9c:	mov	r3, r9
   13aa0:	mov	r2, r8
   13aa4:	mov	r1, r6
   13aa8:	mov	r0, r4
   13aac:	bl	1299c <flatcc_verify_vector_field@@Base>
   13ab0:	mov	sl, r0
   13ab4:	mov	r0, sl
   13ab8:	add	sp, sp, #52	; 0x34
   13abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ac0:	ldr	r3, [r0, r2]
   13ac4:	add	r4, r0, r2
   13ac8:	cmn	r3, #-1073741823	; 0xc0000001
   13acc:	bhi	13a60 <flatcc_verify_union_vector_field@@Base+0x158>
   13ad0:	lsl	lr, r3, #2
   13ad4:	sub	r9, ip, r8
   13ad8:	cmp	r9, lr
   13adc:	bcc	13a60 <flatcc_verify_union_vector_field@@Base+0x158>
   13ae0:	cmp	r7, r3
   13ae4:	movne	sl, #34	; 0x22
   13ae8:	bne	139d4 <flatcc_verify_union_vector_field@@Base+0xcc>
   13aec:	sub	r1, r1, #1
   13af0:	cmp	r7, #0
   13af4:	str	r1, [sp, #32]
   13af8:	str	r0, [sp, #24]
   13afc:	str	ip, [sp, #28]
   13b00:	beq	13a80 <flatcc_verify_union_vector_field@@Base+0x178>
   13b04:	add	r2, r2, lr
   13b08:	add	r7, r0, r2
   13b0c:	add	r5, r5, #4
   13b10:	add	r9, sp, #24
   13b14:	b	13b34 <flatcc_verify_union_vector_field@@Base+0x22c>
   13b18:	ldrb	r3, [r5]
   13b1c:	cmp	r3, #0
   13b20:	bne	13b80 <flatcc_verify_union_vector_field@@Base+0x278>
   13b24:	cmp	r4, r7
   13b28:	add	r8, r8, #4
   13b2c:	add	r5, r5, #1
   13b30:	beq	13a80 <flatcc_verify_union_vector_field@@Base+0x178>
   13b34:	ldr	r3, [r4, #4]!
   13b38:	mov	r0, r9
   13b3c:	cmp	r3, #0
   13b40:	beq	13b18 <flatcc_verify_union_vector_field@@Base+0x210>
   13b44:	ldrb	r2, [r5]
   13b48:	cmp	r2, #0
   13b4c:	beq	13b88 <flatcc_verify_union_vector_field@@Base+0x280>
   13b50:	str	r3, [sp, #44]	; 0x2c
   13b54:	ldr	r3, [sp, #12]
   13b58:	strb	r2, [sp, #36]	; 0x24
   13b5c:	str	r8, [sp, #40]	; 0x28
   13b60:	blx	r3
   13b64:	cmp	r0, #0
   13b68:	beq	13b24 <flatcc_verify_union_vector_field@@Base+0x21c>
   13b6c:	mov	r0, r9
   13b70:	ldr	r3, [sp, #12]
   13b74:	blx	r3
   13b78:	mov	sl, r0
   13b7c:	b	139d4 <flatcc_verify_union_vector_field@@Base+0xcc>
   13b80:	mov	sl, #32
   13b84:	b	139d4 <flatcc_verify_union_vector_field@@Base+0xcc>
   13b88:	mov	sl, #33	; 0x21
   13b8c:	b	139d4 <flatcc_verify_union_vector_field@@Base+0xcc>

00013b90 <__libc_csu_init@@Base>:
   13b90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13b94:	mov	r7, r0
   13b98:	ldr	r6, [pc, #72]	; 13be8 <__libc_csu_init@@Base+0x58>
   13b9c:	ldr	r5, [pc, #72]	; 13bec <__libc_csu_init@@Base+0x5c>
   13ba0:	add	r6, pc, r6
   13ba4:	add	r5, pc, r5
   13ba8:	sub	r6, r6, r5
   13bac:	mov	r8, r1
   13bb0:	mov	r9, r2
   13bb4:	bl	10cbc <strcmp@plt-0x20>
   13bb8:	asrs	r6, r6, #2
   13bbc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13bc0:	mov	r4, #0
   13bc4:	add	r4, r4, #1
   13bc8:	ldr	r3, [r5], #4
   13bcc:	mov	r2, r9
   13bd0:	mov	r1, r8
   13bd4:	mov	r0, r7
   13bd8:	blx	r3
   13bdc:	cmp	r6, r4
   13be0:	bne	13bc4 <__libc_csu_init@@Base+0x34>
   13be4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13be8:	andeq	r1, r1, r8, ror #6
   13bec:	andeq	r1, r1, r0, ror #6

00013bf0 <__libc_csu_fini@@Base>:
   13bf0:	bx	lr

Disassembly of section .fini:

00013bf4 <.fini>:
   13bf4:	push	{r3, lr}
   13bf8:	pop	{r3, pc}
