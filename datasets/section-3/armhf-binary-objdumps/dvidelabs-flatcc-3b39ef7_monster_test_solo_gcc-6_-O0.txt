
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_solo/monster_test_solo:     file format elf32-littlearm


Disassembly of section .init:

00012290 <.init>:
   12290:	push	{r3, lr}
   12294:	bl	12394 <_start@@Base+0x3c>
   12298:	pop	{r3, pc}

Disassembly of section .plt:

0001229c <free@plt-0x14>:
   1229c:	push	{lr}		; (str lr, [sp, #-4]!)
   122a0:	ldr	lr, [pc, #4]	; 122ac <free@plt-0x4>
   122a4:	add	lr, pc, lr
   122a8:	ldr	pc, [lr, #8]!
   122ac:	andeq	ip, r1, r4, asr sp

000122b0 <free@plt>:
   122b0:	add	ip, pc, #0, 12
   122b4:	add	ip, ip, #28, 20	; 0x1c000
   122b8:	ldr	pc, [ip, #3412]!	; 0xd54

000122bc <memcpy@plt>:
   122bc:	add	ip, pc, #0, 12
   122c0:	add	ip, ip, #28, 20	; 0x1c000
   122c4:	ldr	pc, [ip, #3404]!	; 0xd4c

000122c8 <memcmp@plt>:
   122c8:	add	ip, pc, #0, 12
   122cc:	add	ip, ip, #28, 20	; 0x1c000
   122d0:	ldr	pc, [ip, #3396]!	; 0xd44

000122d4 <realloc@plt>:
   122d4:	add	ip, pc, #0, 12
   122d8:	add	ip, ip, #28, 20	; 0x1c000
   122dc:	ldr	pc, [ip, #3388]!	; 0xd3c

000122e0 <malloc@plt>:
   122e0:	add	ip, pc, #0, 12
   122e4:	add	ip, ip, #28, 20	; 0x1c000
   122e8:	ldr	pc, [ip, #3380]!	; 0xd34

000122ec <__libc_start_main@plt>:
   122ec:	add	ip, pc, #0, 12
   122f0:	add	ip, ip, #28, 20	; 0x1c000
   122f4:	ldr	pc, [ip, #3372]!	; 0xd2c

000122f8 <__gmon_start__@plt>:
   122f8:	add	ip, pc, #0, 12
   122fc:	add	ip, ip, #28, 20	; 0x1c000
   12300:	ldr	pc, [ip, #3364]!	; 0xd24

00012304 <strlen@plt>:
   12304:	add	ip, pc, #0, 12
   12308:	add	ip, ip, #28, 20	; 0x1c000
   1230c:	ldr	pc, [ip, #3356]!	; 0xd1c

00012310 <posix_memalign@plt>:
   12310:	add	ip, pc, #0, 12
   12314:	add	ip, ip, #28, 20	; 0x1c000
   12318:	ldr	pc, [ip, #3348]!	; 0xd14

0001231c <memset@plt>:
   1231c:	add	ip, pc, #0, 12
   12320:	add	ip, ip, #28, 20	; 0x1c000
   12324:	ldr	pc, [ip, #3340]!	; 0xd0c

00012328 <strncpy@plt>:
   12328:	add	ip, pc, #0, 12
   1232c:	add	ip, ip, #28, 20	; 0x1c000
   12330:	ldr	pc, [ip, #3332]!	; 0xd04

00012334 <memchr@plt>:
   12334:	add	ip, pc, #0, 12
   12338:	add	ip, ip, #28, 20	; 0x1c000
   1233c:	ldr	pc, [ip, #3324]!	; 0xcfc

00012340 <abort@plt>:
   12340:	add	ip, pc, #0, 12
   12344:	add	ip, ip, #28, 20	; 0x1c000
   12348:	ldr	pc, [ip, #3316]!	; 0xcf4

0001234c <__assert_fail@plt>:
   1234c:	add	ip, pc, #0, 12
   12350:	add	ip, ip, #28, 20	; 0x1c000
   12354:	ldr	pc, [ip, #3308]!	; 0xcec

Disassembly of section .text:

00012358 <_start@@Base>:
   12358:	mov	fp, #0
   1235c:	mov	lr, #0
   12360:	pop	{r1}		; (ldr r1, [sp], #4)
   12364:	mov	r2, sp
   12368:	push	{r2}		; (str r2, [sp, #-4]!)
   1236c:	push	{r0}		; (str r0, [sp, #-4]!)
   12370:	ldr	ip, [pc, #16]	; 12388 <_start@@Base+0x30>
   12374:	push	{ip}		; (str ip, [sp, #-4]!)
   12378:	ldr	r0, [pc, #12]	; 1238c <_start@@Base+0x34>
   1237c:	ldr	r3, [pc, #12]	; 12390 <_start@@Base+0x38>
   12380:	bl	122ec <__libc_start_main@plt>
   12384:	bl	12340 <abort@plt>
   12388:	andeq	ip, r1, r4, lsr pc
   1238c:			; <UNDEFINED> instruction: 0x00013bb8
   12390:	ldrdeq	ip, [r1], -r4
   12394:	ldr	r3, [pc, #20]	; 123b0 <_start@@Base+0x58>
   12398:	ldr	r2, [pc, #20]	; 123b4 <_start@@Base+0x5c>
   1239c:	add	r3, pc, r3
   123a0:	ldr	r2, [r3, r2]
   123a4:	cmp	r2, #0
   123a8:	bxeq	lr
   123ac:	b	122f8 <__gmon_start__@plt>
   123b0:	andeq	ip, r1, ip, asr ip
   123b4:	andeq	r0, r0, r8, asr #32
   123b8:	ldr	r3, [pc, #28]	; 123dc <_start@@Base+0x84>
   123bc:	ldr	r0, [pc, #28]	; 123e0 <_start@@Base+0x88>
   123c0:	sub	r3, r3, r0
   123c4:	cmp	r3, #6
   123c8:	bxls	lr
   123cc:	ldr	r3, [pc, #16]	; 123e4 <_start@@Base+0x8c>
   123d0:	cmp	r3, #0
   123d4:	bxeq	lr
   123d8:	bx	r3
   123dc:	andeq	pc, r2, r7, rrx
   123e0:	andeq	pc, r2, r4, rrx
   123e4:	andeq	r0, r0, r0
   123e8:	ldr	r1, [pc, #36]	; 12414 <_start@@Base+0xbc>
   123ec:	ldr	r0, [pc, #36]	; 12418 <_start@@Base+0xc0>
   123f0:	sub	r1, r1, r0
   123f4:	asr	r1, r1, #2
   123f8:	add	r1, r1, r1, lsr #31
   123fc:	asrs	r1, r1, #1
   12400:	bxeq	lr
   12404:	ldr	r3, [pc, #16]	; 1241c <_start@@Base+0xc4>
   12408:	cmp	r3, #0
   1240c:	bxeq	lr
   12410:	bx	r3
   12414:	andeq	pc, r2, r4, rrx
   12418:	andeq	pc, r2, r4, rrx
   1241c:	andeq	r0, r0, r0
   12420:	push	{r4, lr}
   12424:	ldr	r4, [pc, #24]	; 12444 <_start@@Base+0xec>
   12428:	ldrb	r3, [r4]
   1242c:	cmp	r3, #0
   12430:	popne	{r4, pc}
   12434:	bl	123b8 <_start@@Base+0x60>
   12438:	mov	r3, #1
   1243c:	strb	r3, [r4]
   12440:	pop	{r4, pc}
   12444:	andeq	pc, r2, r4, rrx
   12448:	ldr	r0, [pc, #40]	; 12478 <_start@@Base+0x120>
   1244c:	ldr	r3, [r0]
   12450:	cmp	r3, #0
   12454:	bne	1245c <_start@@Base+0x104>
   12458:	b	123e8 <_start@@Base+0x90>
   1245c:	ldr	r3, [pc, #24]	; 1247c <_start@@Base+0x124>
   12460:	cmp	r3, #0
   12464:	beq	12458 <_start@@Base+0x100>
   12468:	push	{r4, lr}
   1246c:	blx	r3
   12470:	pop	{r4, lr}
   12474:	b	123e8 <_start@@Base+0x90>
   12478:	andeq	lr, r2, r4, lsl pc
   1247c:	andeq	r0, r0, r0
   12480:	push	{fp, lr}
   12484:	add	fp, sp, #4
   12488:	sub	sp, sp, #8
   1248c:	str	r0, [fp, #-8]
   12490:	str	r1, [fp, #-12]
   12494:	mov	r3, #0
   12498:	mov	r2, #0
   1249c:	ldr	r1, [fp, #-12]
   124a0:	ldr	r0, [fp, #-8]
   124a4:	bl	15e84 <flatcc_builder_start_buffer@@Base>
   124a8:	mov	r3, r0
   124ac:	mov	r0, r3
   124b0:	sub	sp, fp, #4
   124b4:	pop	{fp, pc}
   124b8:	push	{fp, lr}
   124bc:	add	fp, sp, #4
   124c0:	sub	sp, sp, #8
   124c4:	str	r0, [fp, #-8]
   124c8:	str	r1, [fp, #-12]
   124cc:	ldr	r1, [fp, #-12]
   124d0:	ldr	r0, [fp, #-8]
   124d4:	bl	15fdc <flatcc_builder_end_buffer@@Base>
   124d8:	mov	r3, r0
   124dc:	mov	r0, r3
   124e0:	sub	sp, fp, #4
   124e4:	pop	{fp, pc}
   124e8:	push	{fp, lr}
   124ec:	add	fp, sp, #4
   124f0:	sub	sp, sp, #8
   124f4:	str	r0, [fp, #-8]
   124f8:	mov	r1, #36	; 0x24
   124fc:	ldr	r0, [fp, #-8]
   12500:	bl	16ec8 <flatcc_builder_start_table@@Base>
   12504:	mov	r3, r0
   12508:	mov	r0, r3
   1250c:	sub	sp, fp, #4
   12510:	pop	{fp, pc}
   12514:	push	{fp, lr}
   12518:	add	fp, sp, #4
   1251c:	sub	sp, sp, #8
   12520:	str	r0, [fp, #-8]
   12524:	mov	r2, #1
   12528:	ldr	r3, [pc, #80]	; 12580 <_start@@Base+0x228>
   1252c:	add	r3, pc, r3
   12530:	mov	r1, r3
   12534:	ldr	r0, [fp, #-8]
   12538:	bl	17940 <flatcc_builder_check_required@@Base>
   1253c:	mov	r3, r0
   12540:	cmp	r3, #0
   12544:	bne	12568 <_start@@Base+0x210>
   12548:	ldr	r3, [pc, #52]	; 12584 <_start@@Base+0x22c>
   1254c:	add	r3, pc, r3
   12550:	ldr	r2, [pc, #48]	; 12588 <_start@@Base+0x230>
   12554:	ldr	r1, [pc, #48]	; 1258c <_start@@Base+0x234>
   12558:	add	r1, pc, r1
   1255c:	ldr	r0, [pc, #44]	; 12590 <_start@@Base+0x238>
   12560:	add	r0, pc, r0
   12564:	bl	1234c <__assert_fail@plt>
   12568:	ldr	r0, [fp, #-8]
   1256c:	bl	17a2c <flatcc_builder_end_table@@Base>
   12570:	mov	r3, r0
   12574:	mov	r0, r3
   12578:	sub	sp, fp, #4
   1257c:	pop	{fp, pc}
   12580:	andeq	sl, r0, r8, asr #20
   12584:	andeq	sl, r0, r8, ror #22
   12588:	andeq	r0, r0, lr, asr r9
   1258c:	andeq	sl, r0, r0, lsr #20
   12590:	muleq	r0, r0, sl
   12594:	push	{fp, lr}
   12598:	add	fp, sp, #4
   1259c:	sub	sp, sp, #16
   125a0:	str	r0, [fp, #-16]
   125a4:	str	r1, [fp, #-20]	; 0xffffffec
   125a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   125ac:	cmp	r3, #0
   125b0:	beq	125e4 <_start@@Base+0x28c>
   125b4:	mov	r1, #3
   125b8:	ldr	r0, [fp, #-16]
   125bc:	bl	19618 <flatcc_builder_table_add_offset@@Base>
   125c0:	str	r0, [fp, #-8]
   125c4:	ldr	r3, [fp, #-8]
   125c8:	cmp	r3, #0
   125cc:	beq	125e4 <_start@@Base+0x28c>
   125d0:	ldr	r3, [fp, #-8]
   125d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   125d8:	str	r2, [r3]
   125dc:	mov	r3, #0
   125e0:	b	125e8 <_start@@Base+0x290>
   125e4:	mvn	r3, #0
   125e8:	mov	r0, r3
   125ec:	sub	sp, fp, #4
   125f0:	pop	{fp, pc}
   125f4:	push	{fp, lr}
   125f8:	add	fp, sp, #4
   125fc:	sub	sp, sp, #8
   12600:	str	r0, [fp, #-8]
   12604:	str	r1, [fp, #-12]
   12608:	ldr	r1, [fp, #-12]
   1260c:	ldr	r0, [fp, #-8]
   12610:	bl	191f4 <flatcc_builder_create_string_str@@Base>
   12614:	mov	r3, r0
   12618:	mov	r1, r3
   1261c:	ldr	r0, [fp, #-8]
   12620:	bl	12594 <_start@@Base+0x23c>
   12624:	mov	r3, r0
   12628:	mov	r0, r3
   1262c:	sub	sp, fp, #4
   12630:	pop	{fp, pc}
   12634:	push	{fp, lr}
   12638:	add	fp, sp, #4
   1263c:	sub	sp, sp, #8
   12640:	str	r0, [fp, #-8]
   12644:	ldr	r3, [pc, #56]	; 12684 <_start@@Base+0x32c>
   12648:	add	r3, pc, r3
   1264c:	mov	r1, r3
   12650:	ldr	r0, [fp, #-8]
   12654:	bl	12480 <_start@@Base+0x128>
   12658:	mov	r3, r0
   1265c:	cmp	r3, #0
   12660:	bne	12674 <_start@@Base+0x31c>
   12664:	ldr	r0, [fp, #-8]
   12668:	bl	124e8 <_start@@Base+0x190>
   1266c:	mov	r3, r0
   12670:	b	12678 <_start@@Base+0x320>
   12674:	mvn	r3, #0
   12678:	mov	r0, r3
   1267c:	sub	sp, fp, #4
   12680:	pop	{fp, pc}
   12684:	andeq	sl, r0, r8, asr sl
   12688:	push	{fp, lr}
   1268c:	add	fp, sp, #4
   12690:	sub	sp, sp, #8
   12694:	str	r0, [fp, #-8]
   12698:	ldr	r0, [fp, #-8]
   1269c:	bl	12514 <_start@@Base+0x1bc>
   126a0:	mov	r3, r0
   126a4:	mov	r1, r3
   126a8:	ldr	r0, [fp, #-8]
   126ac:	bl	124b8 <_start@@Base+0x160>
   126b0:	mov	r3, r0
   126b4:	mov	r0, r3
   126b8:	sub	sp, fp, #4
   126bc:	pop	{fp, pc}
   126c0:	push	{fp, lr}
   126c4:	add	fp, sp, #4
   126c8:	sub	sp, sp, #8
   126cc:	str	r0, [fp, #-8]
   126d0:	ldr	r3, [fp, #-8]
   126d4:	ldrb	r3, [r3, #12]
   126d8:	cmp	r3, #1
   126dc:	bne	126fc <_start@@Base+0x3a4>
   126e0:	ldr	r3, [pc, #36]	; 1270c <_start@@Base+0x3b4>
   126e4:	add	r3, pc, r3
   126e8:	mov	r1, r3
   126ec:	ldr	r0, [fp, #-8]
   126f0:	bl	1c28c <flatcc_verify_union_table@@Base>
   126f4:	mov	r3, r0
   126f8:	b	12700 <_start@@Base+0x3a8>
   126fc:	mov	r3, #0
   12700:	mov	r0, r3
   12704:	sub	sp, fp, #4
   12708:	pop	{fp, pc}
   1270c:	ldrdeq	r0, [r0], -ip
   12710:	push	{fp, lr}
   12714:	add	fp, sp, #4
   12718:	sub	sp, sp, #8
   1271c:	str	r0, [fp, #-8]
   12720:	ldr	r3, [fp, #-8]
   12724:	ldrb	r3, [r3, #12]
   12728:	sub	r3, r3, #1
   1272c:	cmp	r3, #3
   12730:	addls	pc, pc, r3, lsl #2
   12734:	b	127b8 <_start@@Base+0x460>
   12738:	b	12748 <_start@@Base+0x3f0>
   1273c:	b	12764 <_start@@Base+0x40c>
   12740:	b	12780 <_start@@Base+0x428>
   12744:	b	1279c <_start@@Base+0x444>
   12748:	ldr	r3, [pc, #120]	; 127c8 <_start@@Base+0x470>
   1274c:	add	r3, pc, r3
   12750:	mov	r1, r3
   12754:	ldr	r0, [fp, #-8]
   12758:	bl	1c28c <flatcc_verify_union_table@@Base>
   1275c:	mov	r3, r0
   12760:	b	127bc <_start@@Base+0x464>
   12764:	ldr	r3, [pc, #96]	; 127cc <_start@@Base+0x474>
   12768:	add	r3, pc, r3
   1276c:	mov	r1, r3
   12770:	ldr	r0, [fp, #-8]
   12774:	bl	1c28c <flatcc_verify_union_table@@Base>
   12778:	mov	r3, r0
   1277c:	b	127bc <_start@@Base+0x464>
   12780:	ldr	r3, [pc, #72]	; 127d0 <_start@@Base+0x478>
   12784:	add	r3, pc, r3
   12788:	mov	r1, r3
   1278c:	ldr	r0, [fp, #-8]
   12790:	bl	1c28c <flatcc_verify_union_table@@Base>
   12794:	mov	r3, r0
   12798:	b	127bc <_start@@Base+0x464>
   1279c:	ldr	r3, [pc, #48]	; 127d4 <_start@@Base+0x47c>
   127a0:	add	r3, pc, r3
   127a4:	mov	r1, r3
   127a8:	ldr	r0, [fp, #-8]
   127ac:	bl	1c28c <flatcc_verify_union_table@@Base>
   127b0:	mov	r3, r0
   127b4:	b	127bc <_start@@Base+0x464>
   127b8:	mov	r3, #0
   127bc:	mov	r0, r3
   127c0:	sub	sp, fp, #4
   127c4:	pop	{fp, pc}
   127c8:	andeq	r0, r0, r8, lsr #19
   127cc:	andeq	r0, r0, r0, lsl r2
   127d0:	andeq	r0, r0, r0, ror #2
   127d4:	andeq	r0, r0, r0, ror r4
   127d8:	push	{fp, lr}
   127dc:	add	fp, sp, #4
   127e0:	sub	sp, sp, #8
   127e4:	str	r0, [fp, #-8]
   127e8:	ldr	r3, [fp, #-8]
   127ec:	ldrb	r3, [r3, #12]
   127f0:	cmp	r3, #9
   127f4:	beq	12864 <_start@@Base+0x50c>
   127f8:	cmp	r3, #9
   127fc:	bgt	12814 <_start@@Base+0x4bc>
   12800:	cmp	r3, #2
   12804:	beq	12830 <_start@@Base+0x4d8>
   12808:	cmp	r3, #8
   1280c:	beq	1284c <_start@@Base+0x4f4>
   12810:	b	128b4 <_start@@Base+0x55c>
   12814:	cmp	r3, #11
   12818:	beq	12894 <_start@@Base+0x53c>
   1281c:	cmp	r3, #11
   12820:	blt	1287c <_start@@Base+0x524>
   12824:	cmp	r3, #255	; 0xff
   12828:	beq	128a4 <_start@@Base+0x54c>
   1282c:	b	128b4 <_start@@Base+0x55c>
   12830:	ldr	r3, [pc, #140]	; 128c4 <_start@@Base+0x56c>
   12834:	add	r3, pc, r3
   12838:	mov	r1, r3
   1283c:	ldr	r0, [fp, #-8]
   12840:	bl	1c28c <flatcc_verify_union_table@@Base>
   12844:	mov	r3, r0
   12848:	b	128b8 <_start@@Base+0x560>
   1284c:	mov	r2, #2
   12850:	mov	r1, #2
   12854:	ldr	r0, [fp, #-8]
   12858:	bl	1c2f0 <flatcc_verify_union_struct@@Base>
   1285c:	mov	r3, r0
   12860:	b	128b8 <_start@@Base+0x560>
   12864:	mov	r2, #4
   12868:	mov	r1, #4
   1286c:	ldr	r0, [fp, #-8]
   12870:	bl	1c2f0 <flatcc_verify_union_struct@@Base>
   12874:	mov	r3, r0
   12878:	b	128b8 <_start@@Base+0x560>
   1287c:	mov	r2, #4
   12880:	mov	r1, #4
   12884:	ldr	r0, [fp, #-8]
   12888:	bl	1c2f0 <flatcc_verify_union_struct@@Base>
   1288c:	mov	r3, r0
   12890:	b	128b8 <_start@@Base+0x560>
   12894:	ldr	r0, [fp, #-8]
   12898:	bl	1c344 <flatcc_verify_union_string@@Base>
   1289c:	mov	r3, r0
   128a0:	b	128b8 <_start@@Base+0x560>
   128a4:	ldr	r0, [fp, #-8]
   128a8:	bl	1c344 <flatcc_verify_union_string@@Base>
   128ac:	mov	r3, r0
   128b0:	b	128b8 <_start@@Base+0x560>
   128b4:	mov	r3, #0
   128b8:	mov	r0, r3
   128bc:	sub	sp, fp, #4
   128c0:	pop	{fp, pc}
   128c4:	andeq	r1, r0, ip, lsl #4
   128c8:	push	{fp}		; (str fp, [sp, #-4]!)
   128cc:	add	fp, sp, #0
   128d0:	sub	sp, sp, #12
   128d4:	str	r0, [fp, #-8]
   128d8:	mov	r3, #0
   128dc:	mov	r0, r3
   128e0:	add	sp, fp, #0
   128e4:	pop	{fp}		; (ldr fp, [sp], #4)
   128e8:	bx	lr
   128ec:	push	{fp}		; (str fp, [sp, #-4]!)
   128f0:	add	fp, sp, #0
   128f4:	sub	sp, sp, #12
   128f8:	str	r0, [fp, #-8]
   128fc:	mov	r3, #0
   12900:	mov	r0, r3
   12904:	add	sp, fp, #0
   12908:	pop	{fp}		; (ldr fp, [sp], #4)
   1290c:	bx	lr
   12910:	push	{fp}		; (str fp, [sp, #-4]!)
   12914:	add	fp, sp, #0
   12918:	sub	sp, sp, #12
   1291c:	str	r0, [fp, #-8]
   12920:	mov	r3, #0
   12924:	mov	r0, r3
   12928:	add	sp, fp, #0
   1292c:	pop	{fp}		; (ldr fp, [sp], #4)
   12930:	bx	lr
   12934:	push	{fp, lr}
   12938:	add	fp, sp, #4
   1293c:	sub	sp, sp, #16
   12940:	str	r0, [fp, #-16]
   12944:	mov	r3, #1
   12948:	mov	r2, #0
   1294c:	mov	r1, #0
   12950:	ldr	r0, [fp, #-16]
   12954:	bl	1be94 <flatcc_verify_field@@Base>
   12958:	str	r0, [fp, #-8]
   1295c:	ldr	r3, [fp, #-8]
   12960:	cmp	r3, #0
   12964:	beq	12970 <_start@@Base+0x618>
   12968:	ldr	r3, [fp, #-8]
   1296c:	b	12974 <_start@@Base+0x61c>
   12970:	mov	r3, #0
   12974:	mov	r0, r3
   12978:	sub	sp, fp, #4
   1297c:	pop	{fp, pc}
   12980:	push	{fp, lr}
   12984:	add	fp, sp, #4
   12988:	sub	sp, sp, #16
   1298c:	str	r0, [fp, #-16]
   12990:	mov	r3, #1
   12994:	mov	r2, #1
   12998:	mov	r1, #0
   1299c:	ldr	r0, [fp, #-16]
   129a0:	bl	1be94 <flatcc_verify_field@@Base>
   129a4:	str	r0, [fp, #-8]
   129a8:	ldr	r3, [fp, #-8]
   129ac:	cmp	r3, #0
   129b0:	beq	129bc <_start@@Base+0x664>
   129b4:	ldr	r3, [fp, #-8]
   129b8:	b	12a44 <_start@@Base+0x6ec>
   129bc:	mov	r3, #1
   129c0:	mov	r2, #1
   129c4:	mov	r1, #1
   129c8:	ldr	r0, [fp, #-16]
   129cc:	bl	1be94 <flatcc_verify_field@@Base>
   129d0:	str	r0, [fp, #-8]
   129d4:	ldr	r3, [fp, #-8]
   129d8:	cmp	r3, #0
   129dc:	beq	129e8 <_start@@Base+0x690>
   129e0:	ldr	r3, [fp, #-8]
   129e4:	b	12a44 <_start@@Base+0x6ec>
   129e8:	mov	r3, #1
   129ec:	mov	r2, #1
   129f0:	mov	r1, #2
   129f4:	ldr	r0, [fp, #-16]
   129f8:	bl	1be94 <flatcc_verify_field@@Base>
   129fc:	str	r0, [fp, #-8]
   12a00:	ldr	r3, [fp, #-8]
   12a04:	cmp	r3, #0
   12a08:	beq	12a14 <_start@@Base+0x6bc>
   12a0c:	ldr	r3, [fp, #-8]
   12a10:	b	12a44 <_start@@Base+0x6ec>
   12a14:	mov	r3, #1
   12a18:	mov	r2, #1
   12a1c:	mov	r1, #3
   12a20:	ldr	r0, [fp, #-16]
   12a24:	bl	1be94 <flatcc_verify_field@@Base>
   12a28:	str	r0, [fp, #-8]
   12a2c:	ldr	r3, [fp, #-8]
   12a30:	cmp	r3, #0
   12a34:	beq	12a40 <_start@@Base+0x6e8>
   12a38:	ldr	r3, [fp, #-8]
   12a3c:	b	12a44 <_start@@Base+0x6ec>
   12a40:	mov	r3, #0
   12a44:	mov	r0, r3
   12a48:	sub	sp, fp, #4
   12a4c:	pop	{fp, pc}
   12a50:	push	{fp, lr}
   12a54:	add	fp, sp, #4
   12a58:	sub	sp, sp, #16
   12a5c:	str	r0, [fp, #-16]
   12a60:	mov	r3, #1
   12a64:	mov	r2, #0
   12a68:	mov	r1, #0
   12a6c:	ldr	r0, [fp, #-16]
   12a70:	bl	1be94 <flatcc_verify_field@@Base>
   12a74:	str	r0, [fp, #-8]
   12a78:	ldr	r3, [fp, #-8]
   12a7c:	cmp	r3, #0
   12a80:	beq	12a8c <_start@@Base+0x734>
   12a84:	ldr	r3, [fp, #-8]
   12a88:	b	12b6c <_start@@Base+0x814>
   12a8c:	mov	r3, #8
   12a90:	mov	r2, #8
   12a94:	mov	r1, #1
   12a98:	ldr	r0, [fp, #-16]
   12a9c:	bl	1be94 <flatcc_verify_field@@Base>
   12aa0:	str	r0, [fp, #-8]
   12aa4:	ldr	r3, [fp, #-8]
   12aa8:	cmp	r3, #0
   12aac:	beq	12ab8 <_start@@Base+0x760>
   12ab0:	ldr	r3, [fp, #-8]
   12ab4:	b	12b6c <_start@@Base+0x814>
   12ab8:	mov	r3, #8
   12abc:	mov	r2, #8
   12ac0:	mov	r1, #2
   12ac4:	ldr	r0, [fp, #-16]
   12ac8:	bl	1be94 <flatcc_verify_field@@Base>
   12acc:	str	r0, [fp, #-8]
   12ad0:	ldr	r3, [fp, #-8]
   12ad4:	cmp	r3, #0
   12ad8:	beq	12ae4 <_start@@Base+0x78c>
   12adc:	ldr	r3, [fp, #-8]
   12ae0:	b	12b6c <_start@@Base+0x814>
   12ae4:	mov	r3, #4
   12ae8:	mov	r2, #4
   12aec:	mov	r1, #3
   12af0:	ldr	r0, [fp, #-16]
   12af4:	bl	1be94 <flatcc_verify_field@@Base>
   12af8:	str	r0, [fp, #-8]
   12afc:	ldr	r3, [fp, #-8]
   12b00:	cmp	r3, #0
   12b04:	beq	12b10 <_start@@Base+0x7b8>
   12b08:	ldr	r3, [fp, #-8]
   12b0c:	b	12b6c <_start@@Base+0x814>
   12b10:	mov	r3, #8
   12b14:	mov	r2, #8
   12b18:	mov	r1, #4
   12b1c:	ldr	r0, [fp, #-16]
   12b20:	bl	1be94 <flatcc_verify_field@@Base>
   12b24:	str	r0, [fp, #-8]
   12b28:	ldr	r3, [fp, #-8]
   12b2c:	cmp	r3, #0
   12b30:	beq	12b3c <_start@@Base+0x7e4>
   12b34:	ldr	r3, [fp, #-8]
   12b38:	b	12b6c <_start@@Base+0x814>
   12b3c:	mov	r3, #8
   12b40:	mov	r2, #8
   12b44:	mov	r1, #5
   12b48:	ldr	r0, [fp, #-16]
   12b4c:	bl	1be94 <flatcc_verify_field@@Base>
   12b50:	str	r0, [fp, #-8]
   12b54:	ldr	r3, [fp, #-8]
   12b58:	cmp	r3, #0
   12b5c:	beq	12b68 <_start@@Base+0x810>
   12b60:	ldr	r3, [fp, #-8]
   12b64:	b	12b6c <_start@@Base+0x814>
   12b68:	mov	r3, #0
   12b6c:	mov	r0, r3
   12b70:	sub	sp, fp, #4
   12b74:	pop	{fp, pc}
   12b78:	push	{fp, lr}
   12b7c:	add	fp, sp, #4
   12b80:	sub	sp, sp, #16
   12b84:	str	r0, [fp, #-16]
   12b88:	mov	r2, #0
   12b8c:	mov	r1, #0
   12b90:	ldr	r0, [fp, #-16]
   12b94:	bl	1bf0c <flatcc_verify_string_field@@Base>
   12b98:	str	r0, [fp, #-8]
   12b9c:	ldr	r3, [fp, #-8]
   12ba0:	cmp	r3, #0
   12ba4:	beq	12bb0 <_start@@Base+0x858>
   12ba8:	ldr	r3, [fp, #-8]
   12bac:	b	12c0c <_start@@Base+0x8b4>
   12bb0:	mov	r3, #8
   12bb4:	mov	r2, #8
   12bb8:	mov	r1, #1
   12bbc:	ldr	r0, [fp, #-16]
   12bc0:	bl	1be94 <flatcc_verify_field@@Base>
   12bc4:	str	r0, [fp, #-8]
   12bc8:	ldr	r3, [fp, #-8]
   12bcc:	cmp	r3, #0
   12bd0:	beq	12bdc <_start@@Base+0x884>
   12bd4:	ldr	r3, [fp, #-8]
   12bd8:	b	12c0c <_start@@Base+0x8b4>
   12bdc:	mov	r3, #2
   12be0:	mov	r2, #2
   12be4:	mov	r1, #2
   12be8:	ldr	r0, [fp, #-16]
   12bec:	bl	1be94 <flatcc_verify_field@@Base>
   12bf0:	str	r0, [fp, #-8]
   12bf4:	ldr	r3, [fp, #-8]
   12bf8:	cmp	r3, #0
   12bfc:	beq	12c08 <_start@@Base+0x8b0>
   12c00:	ldr	r3, [fp, #-8]
   12c04:	b	12c0c <_start@@Base+0x8b4>
   12c08:	mov	r3, #0
   12c0c:	mov	r0, r3
   12c10:	sub	sp, fp, #4
   12c14:	pop	{fp, pc}
   12c18:	push	{fp, lr}
   12c1c:	add	fp, sp, #4
   12c20:	sub	sp, sp, #16
   12c24:	str	r0, [fp, #-16]
   12c28:	ldr	r3, [pc, #152]	; 12cc8 <_start@@Base+0x970>
   12c2c:	add	r3, pc, r3
   12c30:	mov	r2, #0
   12c34:	mov	r1, #0
   12c38:	ldr	r0, [fp, #-16]
   12c3c:	bl	1c114 <flatcc_verify_table_field@@Base>
   12c40:	str	r0, [fp, #-8]
   12c44:	ldr	r3, [fp, #-8]
   12c48:	cmp	r3, #0
   12c4c:	beq	12c58 <_start@@Base+0x900>
   12c50:	ldr	r3, [fp, #-8]
   12c54:	b	12cbc <_start@@Base+0x964>
   12c58:	ldr	r3, [pc, #108]	; 12ccc <_start@@Base+0x974>
   12c5c:	add	r3, pc, r3
   12c60:	mov	r2, #0
   12c64:	mov	r1, #1
   12c68:	ldr	r0, [fp, #-16]
   12c6c:	bl	1c114 <flatcc_verify_table_field@@Base>
   12c70:	str	r0, [fp, #-8]
   12c74:	ldr	r3, [fp, #-8]
   12c78:	cmp	r3, #0
   12c7c:	beq	12c88 <_start@@Base+0x930>
   12c80:	ldr	r3, [fp, #-8]
   12c84:	b	12cbc <_start@@Base+0x964>
   12c88:	ldr	r3, [pc, #64]	; 12cd0 <_start@@Base+0x978>
   12c8c:	add	r3, pc, r3
   12c90:	mov	r2, #0
   12c94:	mov	r1, #3
   12c98:	ldr	r0, [fp, #-16]
   12c9c:	bl	1ccb0 <flatcc_verify_union_vector_field@@Base>
   12ca0:	str	r0, [fp, #-8]
   12ca4:	ldr	r3, [fp, #-8]
   12ca8:	cmp	r3, #0
   12cac:	beq	12cb8 <_start@@Base+0x960>
   12cb0:	ldr	r3, [fp, #-8]
   12cb4:	b	12cbc <_start@@Base+0x964>
   12cb8:	mov	r3, #0
   12cbc:	mov	r0, r3
   12cc0:	sub	sp, fp, #4
   12cc4:	pop	{fp, pc}
   12cc8:	andeq	r0, r0, r0, lsr #1
   12ccc:	andeq	r0, r0, r0, lsr lr
   12cd0:			; <UNDEFINED> instruction: 0xfffffa7c
   12cd4:	push	{fp, lr}
   12cd8:	add	fp, sp, #4
   12cdc:	sub	sp, sp, #16
   12ce0:	str	r0, [fp, #-16]
   12ce4:	ldr	r3, [pc, #152]	; 12d84 <_start@@Base+0xa2c>
   12ce8:	add	r3, pc, r3
   12cec:	mov	r2, #0
   12cf0:	mov	r1, #0
   12cf4:	ldr	r0, [fp, #-16]
   12cf8:	bl	1c114 <flatcc_verify_table_field@@Base>
   12cfc:	str	r0, [fp, #-8]
   12d00:	ldr	r3, [fp, #-8]
   12d04:	cmp	r3, #0
   12d08:	beq	12d14 <_start@@Base+0x9bc>
   12d0c:	ldr	r3, [fp, #-8]
   12d10:	b	12d78 <_start@@Base+0xa20>
   12d14:	ldr	r3, [pc, #108]	; 12d88 <_start@@Base+0xa30>
   12d18:	add	r3, pc, r3
   12d1c:	mov	r2, #0
   12d20:	mov	r1, #1
   12d24:	ldr	r0, [fp, #-16]
   12d28:	bl	1c114 <flatcc_verify_table_field@@Base>
   12d2c:	str	r0, [fp, #-8]
   12d30:	ldr	r3, [fp, #-8]
   12d34:	cmp	r3, #0
   12d38:	beq	12d44 <_start@@Base+0x9ec>
   12d3c:	ldr	r3, [fp, #-8]
   12d40:	b	12d78 <_start@@Base+0xa20>
   12d44:	ldr	r3, [pc, #64]	; 12d8c <_start@@Base+0xa34>
   12d48:	add	r3, pc, r3
   12d4c:	mov	r2, #0
   12d50:	mov	r1, #2
   12d54:	ldr	r0, [fp, #-16]
   12d58:	bl	1c114 <flatcc_verify_table_field@@Base>
   12d5c:	str	r0, [fp, #-8]
   12d60:	ldr	r3, [fp, #-8]
   12d64:	cmp	r3, #0
   12d68:	beq	12d74 <_start@@Base+0xa1c>
   12d6c:	ldr	r3, [fp, #-8]
   12d70:	b	12d78 <_start@@Base+0xa20>
   12d74:	mov	r3, #0
   12d78:	mov	r0, r3
   12d7c:	sub	sp, fp, #4
   12d80:	pop	{fp, pc}
   12d84:	andeq	r0, r0, r0, lsr #1
   12d88:	andeq	r0, r0, r0, lsl r2
   12d8c:	andeq	r0, r0, r8, asr r2
   12d90:	push	{fp, lr}
   12d94:	add	fp, sp, #4
   12d98:	sub	sp, sp, #16
   12d9c:	str	r0, [fp, #-16]
   12da0:	mov	r2, #0
   12da4:	mov	r1, #0
   12da8:	ldr	r0, [fp, #-16]
   12dac:	bl	1bf0c <flatcc_verify_string_field@@Base>
   12db0:	str	r0, [fp, #-8]
   12db4:	ldr	r3, [fp, #-8]
   12db8:	cmp	r3, #0
   12dbc:	beq	12dc8 <_start@@Base+0xa70>
   12dc0:	ldr	r3, [fp, #-8]
   12dc4:	b	12f24 <_start@@Base+0xbcc>
   12dc8:	mov	r3, #4
   12dcc:	mov	r2, #4
   12dd0:	mov	r1, #1
   12dd4:	ldr	r0, [fp, #-16]
   12dd8:	bl	1be94 <flatcc_verify_field@@Base>
   12ddc:	str	r0, [fp, #-8]
   12de0:	ldr	r3, [fp, #-8]
   12de4:	cmp	r3, #0
   12de8:	beq	12df4 <_start@@Base+0xa9c>
   12dec:	ldr	r3, [fp, #-8]
   12df0:	b	12f24 <_start@@Base+0xbcc>
   12df4:	mov	r2, #0
   12df8:	mov	r1, #2
   12dfc:	ldr	r0, [fp, #-16]
   12e00:	bl	1bf0c <flatcc_verify_string_field@@Base>
   12e04:	str	r0, [fp, #-8]
   12e08:	ldr	r3, [fp, #-8]
   12e0c:	cmp	r3, #0
   12e10:	beq	12e1c <_start@@Base+0xac4>
   12e14:	ldr	r3, [fp, #-8]
   12e18:	b	12f24 <_start@@Base+0xbcc>
   12e1c:	mov	r3, #8
   12e20:	mov	r2, #8
   12e24:	mov	r1, #3
   12e28:	ldr	r0, [fp, #-16]
   12e2c:	bl	1be94 <flatcc_verify_field@@Base>
   12e30:	str	r0, [fp, #-8]
   12e34:	ldr	r3, [fp, #-8]
   12e38:	cmp	r3, #0
   12e3c:	beq	12e48 <_start@@Base+0xaf0>
   12e40:	ldr	r3, [fp, #-8]
   12e44:	b	12f24 <_start@@Base+0xbcc>
   12e48:	mov	r2, #0
   12e4c:	mov	r1, #4
   12e50:	ldr	r0, [fp, #-16]
   12e54:	bl	1bf0c <flatcc_verify_string_field@@Base>
   12e58:	str	r0, [fp, #-8]
   12e5c:	ldr	r3, [fp, #-8]
   12e60:	cmp	r3, #0
   12e64:	beq	12e70 <_start@@Base+0xb18>
   12e68:	ldr	r3, [fp, #-8]
   12e6c:	b	12f24 <_start@@Base+0xbcc>
   12e70:	mov	r3, #8
   12e74:	mov	r2, #8
   12e78:	mov	r1, #5
   12e7c:	ldr	r0, [fp, #-16]
   12e80:	bl	1be94 <flatcc_verify_field@@Base>
   12e84:	str	r0, [fp, #-8]
   12e88:	ldr	r3, [fp, #-8]
   12e8c:	cmp	r3, #0
   12e90:	beq	12e9c <_start@@Base+0xb44>
   12e94:	ldr	r3, [fp, #-8]
   12e98:	b	12f24 <_start@@Base+0xbcc>
   12e9c:	mov	r3, #4
   12ea0:	mov	r2, #4
   12ea4:	mov	r1, #6
   12ea8:	ldr	r0, [fp, #-16]
   12eac:	bl	1be94 <flatcc_verify_field@@Base>
   12eb0:	str	r0, [fp, #-8]
   12eb4:	ldr	r3, [fp, #-8]
   12eb8:	cmp	r3, #0
   12ebc:	beq	12ec8 <_start@@Base+0xb70>
   12ec0:	ldr	r3, [fp, #-8]
   12ec4:	b	12f24 <_start@@Base+0xbcc>
   12ec8:	mov	r3, #8
   12ecc:	mov	r2, #8
   12ed0:	mov	r1, #7
   12ed4:	ldr	r0, [fp, #-16]
   12ed8:	bl	1be94 <flatcc_verify_field@@Base>
   12edc:	str	r0, [fp, #-8]
   12ee0:	ldr	r3, [fp, #-8]
   12ee4:	cmp	r3, #0
   12ee8:	beq	12ef4 <_start@@Base+0xb9c>
   12eec:	ldr	r3, [fp, #-8]
   12ef0:	b	12f24 <_start@@Base+0xbcc>
   12ef4:	mov	r3, #4
   12ef8:	mov	r2, #4
   12efc:	mov	r1, #8
   12f00:	ldr	r0, [fp, #-16]
   12f04:	bl	1be94 <flatcc_verify_field@@Base>
   12f08:	str	r0, [fp, #-8]
   12f0c:	ldr	r3, [fp, #-8]
   12f10:	cmp	r3, #0
   12f14:	beq	12f20 <_start@@Base+0xbc8>
   12f18:	ldr	r3, [fp, #-8]
   12f1c:	b	12f24 <_start@@Base+0xbcc>
   12f20:	mov	r3, #0
   12f24:	mov	r0, r3
   12f28:	sub	sp, fp, #4
   12f2c:	pop	{fp, pc}
   12f30:	push	{fp, lr}
   12f34:	add	fp, sp, #4
   12f38:	sub	sp, sp, #16
   12f3c:	str	r0, [fp, #-16]
   12f40:	mov	r3, #8
   12f44:	mov	r2, #8
   12f48:	mov	r1, #0
   12f4c:	ldr	r0, [fp, #-16]
   12f50:	bl	1be94 <flatcc_verify_field@@Base>
   12f54:	str	r0, [fp, #-8]
   12f58:	ldr	r3, [fp, #-8]
   12f5c:	cmp	r3, #0
   12f60:	beq	12f6c <_start@@Base+0xc14>
   12f64:	ldr	r3, [fp, #-8]
   12f68:	b	12f9c <_start@@Base+0xc44>
   12f6c:	mov	r3, #4
   12f70:	mov	r2, #4
   12f74:	mov	r1, #1
   12f78:	ldr	r0, [fp, #-16]
   12f7c:	bl	1be94 <flatcc_verify_field@@Base>
   12f80:	str	r0, [fp, #-8]
   12f84:	ldr	r3, [fp, #-8]
   12f88:	cmp	r3, #0
   12f8c:	beq	12f98 <_start@@Base+0xc40>
   12f90:	ldr	r3, [fp, #-8]
   12f94:	b	12f9c <_start@@Base+0xc44>
   12f98:	mov	r3, #0
   12f9c:	mov	r0, r3
   12fa0:	sub	sp, fp, #4
   12fa4:	pop	{fp, pc}
   12fa8:	push	{fp, lr}
   12fac:	add	fp, sp, #4
   12fb0:	sub	sp, sp, #16
   12fb4:	str	r0, [fp, #-16]
   12fb8:	mov	r3, #8
   12fbc:	mov	r2, #8
   12fc0:	mov	r1, #0
   12fc4:	ldr	r0, [fp, #-16]
   12fc8:	bl	1be94 <flatcc_verify_field@@Base>
   12fcc:	str	r0, [fp, #-8]
   12fd0:	ldr	r3, [fp, #-8]
   12fd4:	cmp	r3, #0
   12fd8:	beq	12fe4 <_start@@Base+0xc8c>
   12fdc:	ldr	r3, [fp, #-8]
   12fe0:	b	13014 <_start@@Base+0xcbc>
   12fe4:	mov	r3, #4
   12fe8:	mov	r2, #4
   12fec:	mov	r1, #1
   12ff0:	ldr	r0, [fp, #-16]
   12ff4:	bl	1be94 <flatcc_verify_field@@Base>
   12ff8:	str	r0, [fp, #-8]
   12ffc:	ldr	r3, [fp, #-8]
   13000:	cmp	r3, #0
   13004:	beq	13010 <_start@@Base+0xcb8>
   13008:	ldr	r3, [fp, #-8]
   1300c:	b	13014 <_start@@Base+0xcbc>
   13010:	mov	r3, #0
   13014:	mov	r0, r3
   13018:	sub	sp, fp, #4
   1301c:	pop	{fp, pc}
   13020:	push	{fp, lr}
   13024:	add	fp, sp, #4
   13028:	sub	sp, sp, #24
   1302c:	str	r0, [fp, #-16]
   13030:	mvn	r3, #0
   13034:	str	r3, [sp, #4]
   13038:	mov	r3, #1
   1303c:	str	r3, [sp]
   13040:	mov	r3, #1
   13044:	mov	r2, #0
   13048:	mov	r1, #0
   1304c:	ldr	r0, [fp, #-16]
   13050:	bl	1bfb0 <flatcc_verify_vector_field@@Base>
   13054:	str	r0, [fp, #-8]
   13058:	ldr	r3, [fp, #-8]
   1305c:	cmp	r3, #0
   13060:	beq	1306c <_start@@Base+0xd14>
   13064:	ldr	r3, [fp, #-8]
   13068:	b	130ec <_start@@Base+0xd94>
   1306c:	mvn	r3, #0
   13070:	str	r3, [sp, #4]
   13074:	mov	r3, #1
   13078:	str	r3, [sp]
   1307c:	mov	r3, #1
   13080:	mov	r2, #0
   13084:	mov	r1, #1
   13088:	ldr	r0, [fp, #-16]
   1308c:	bl	1bfb0 <flatcc_verify_vector_field@@Base>
   13090:	str	r0, [fp, #-8]
   13094:	ldr	r3, [fp, #-8]
   13098:	cmp	r3, #0
   1309c:	beq	130a8 <_start@@Base+0xd50>
   130a0:	ldr	r3, [fp, #-8]
   130a4:	b	130ec <_start@@Base+0xd94>
   130a8:	ldr	r3, [pc, #72]	; 130f8 <_start@@Base+0xda0>
   130ac:	add	r3, pc, r3
   130b0:	str	r3, [sp, #4]
   130b4:	mov	r3, #1
   130b8:	str	r3, [sp]
   130bc:	mov	r3, #0
   130c0:	mov	r2, #0
   130c4:	mov	r1, #2
   130c8:	ldr	r0, [fp, #-16]
   130cc:	bl	1c8f8 <flatcc_verify_table_as_nested_root@@Base>
   130d0:	str	r0, [fp, #-8]
   130d4:	ldr	r3, [fp, #-8]
   130d8:	cmp	r3, #0
   130dc:	beq	130e8 <_start@@Base+0xd90>
   130e0:	ldr	r3, [fp, #-8]
   130e4:	b	130ec <_start@@Base+0xd94>
   130e8:	mov	r3, #0
   130ec:	mov	r0, r3
   130f0:	sub	sp, fp, #4
   130f4:	pop	{fp, pc}
   130f8:	andeq	r0, r0, r8, asr #32
   130fc:	push	{fp, lr}
   13100:	add	fp, sp, #4
   13104:	sub	sp, sp, #24
   13108:	str	r0, [fp, #-16]
   1310c:	mov	r3, #16
   13110:	mov	r2, #32
   13114:	mov	r1, #0
   13118:	ldr	r0, [fp, #-16]
   1311c:	bl	1be94 <flatcc_verify_field@@Base>
   13120:	str	r0, [fp, #-8]
   13124:	ldr	r3, [fp, #-8]
   13128:	cmp	r3, #0
   1312c:	beq	13138 <_start@@Base+0xde0>
   13130:	ldr	r3, [fp, #-8]
   13134:	b	13788 <_start@@Base+0x1430>
   13138:	mov	r3, #2
   1313c:	mov	r2, #2
   13140:	mov	r1, #2
   13144:	ldr	r0, [fp, #-16]
   13148:	bl	1be94 <flatcc_verify_field@@Base>
   1314c:	str	r0, [fp, #-8]
   13150:	ldr	r3, [fp, #-8]
   13154:	cmp	r3, #0
   13158:	beq	13164 <_start@@Base+0xe0c>
   1315c:	ldr	r3, [fp, #-8]
   13160:	b	13788 <_start@@Base+0x1430>
   13164:	mov	r3, #2
   13168:	mov	r2, #2
   1316c:	mov	r1, #1
   13170:	ldr	r0, [fp, #-16]
   13174:	bl	1be94 <flatcc_verify_field@@Base>
   13178:	str	r0, [fp, #-8]
   1317c:	ldr	r3, [fp, #-8]
   13180:	cmp	r3, #0
   13184:	beq	13190 <_start@@Base+0xe38>
   13188:	ldr	r3, [fp, #-8]
   1318c:	b	13788 <_start@@Base+0x1430>
   13190:	mov	r2, #1
   13194:	mov	r1, #3
   13198:	ldr	r0, [fp, #-16]
   1319c:	bl	1bf0c <flatcc_verify_string_field@@Base>
   131a0:	str	r0, [fp, #-8]
   131a4:	ldr	r3, [fp, #-8]
   131a8:	cmp	r3, #0
   131ac:	beq	131b8 <_start@@Base+0xe60>
   131b0:	ldr	r3, [fp, #-8]
   131b4:	b	13788 <_start@@Base+0x1430>
   131b8:	mov	r3, #1
   131bc:	mov	r2, #1
   131c0:	mov	r1, #6
   131c4:	ldr	r0, [fp, #-16]
   131c8:	bl	1be94 <flatcc_verify_field@@Base>
   131cc:	str	r0, [fp, #-8]
   131d0:	ldr	r3, [fp, #-8]
   131d4:	cmp	r3, #0
   131d8:	beq	131e4 <_start@@Base+0xe8c>
   131dc:	ldr	r3, [fp, #-8]
   131e0:	b	13788 <_start@@Base+0x1430>
   131e4:	mvn	r3, #0
   131e8:	str	r3, [sp, #4]
   131ec:	mov	r3, #1
   131f0:	str	r3, [sp]
   131f4:	mov	r3, #1
   131f8:	mov	r2, #0
   131fc:	mov	r1, #5
   13200:	ldr	r0, [fp, #-16]
   13204:	bl	1bfb0 <flatcc_verify_vector_field@@Base>
   13208:	str	r0, [fp, #-8]
   1320c:	ldr	r3, [fp, #-8]
   13210:	cmp	r3, #0
   13214:	beq	13220 <_start@@Base+0xec8>
   13218:	ldr	r3, [fp, #-8]
   1321c:	b	13788 <_start@@Base+0x1430>
   13220:	ldr	r3, [pc, #1388]	; 13794 <_start@@Base+0x143c>
   13224:	add	r3, pc, r3
   13228:	mov	r2, #0
   1322c:	mov	r1, #11
   13230:	ldr	r0, [fp, #-16]
   13234:	bl	1c1d0 <flatcc_verify_table_vector_field@@Base>
   13238:	str	r0, [fp, #-8]
   1323c:	ldr	r3, [fp, #-8]
   13240:	cmp	r3, #0
   13244:	beq	13250 <_start@@Base+0xef8>
   13248:	ldr	r3, [fp, #-8]
   1324c:	b	13788 <_start@@Base+0x1430>
   13250:	mov	r2, #0
   13254:	mov	r1, #10
   13258:	ldr	r0, [fp, #-16]
   1325c:	bl	1c070 <flatcc_verify_string_vector_field@@Base>
   13260:	str	r0, [fp, #-8]
   13264:	ldr	r3, [fp, #-8]
   13268:	cmp	r3, #0
   1326c:	beq	13278 <_start@@Base+0xf20>
   13270:	ldr	r3, [fp, #-8]
   13274:	b	13788 <_start@@Base+0x1430>
   13278:	mov	r2, #0
   1327c:	mov	r1, #28
   13280:	ldr	r0, [fp, #-16]
   13284:	bl	1c070 <flatcc_verify_string_vector_field@@Base>
   13288:	str	r0, [fp, #-8]
   1328c:	ldr	r3, [fp, #-8]
   13290:	cmp	r3, #0
   13294:	beq	132a0 <_start@@Base+0xf48>
   13298:	ldr	r3, [fp, #-8]
   1329c:	b	13788 <_start@@Base+0x1430>
   132a0:	mvn	r3, #0
   132a4:	str	r3, [sp, #4]
   132a8:	mov	r3, #1
   132ac:	str	r3, [sp]
   132b0:	mov	r3, #1
   132b4:	mov	r2, #0
   132b8:	mov	r1, #24
   132bc:	ldr	r0, [fp, #-16]
   132c0:	bl	1bfb0 <flatcc_verify_vector_field@@Base>
   132c4:	str	r0, [fp, #-8]
   132c8:	ldr	r3, [fp, #-8]
   132cc:	cmp	r3, #0
   132d0:	beq	132dc <_start@@Base+0xf84>
   132d4:	ldr	r3, [fp, #-8]
   132d8:	b	13788 <_start@@Base+0x1430>
   132dc:	mvn	r3, #-536870912	; 0xe0000000
   132e0:	str	r3, [sp, #4]
   132e4:	mov	r3, #4
   132e8:	str	r3, [sp]
   132ec:	mov	r3, #8
   132f0:	mov	r2, #0
   132f4:	mov	r1, #29
   132f8:	ldr	r0, [fp, #-16]
   132fc:	bl	1bfb0 <flatcc_verify_vector_field@@Base>
   13300:	str	r0, [fp, #-8]
   13304:	ldr	r3, [fp, #-8]
   13308:	cmp	r3, #0
   1330c:	beq	13318 <_start@@Base+0xfc0>
   13310:	ldr	r3, [fp, #-8]
   13314:	b	13788 <_start@@Base+0x1430>
   13318:	ldr	r3, [pc, #1144]	; 13798 <_start@@Base+0x1440>
   1331c:	add	r3, pc, r3
   13320:	mov	r2, #0
   13324:	mov	r1, #12
   13328:	ldr	r0, [fp, #-16]
   1332c:	bl	1c114 <flatcc_verify_table_field@@Base>
   13330:	str	r0, [fp, #-8]
   13334:	ldr	r3, [fp, #-8]
   13338:	cmp	r3, #0
   1333c:	beq	13348 <_start@@Base+0xff0>
   13340:	ldr	r3, [fp, #-8]
   13344:	b	13788 <_start@@Base+0x1430>
   13348:	ldr	r3, [pc, #1100]	; 1379c <_start@@Base+0x1444>
   1334c:	add	r3, pc, r3
   13350:	mov	r2, #0
   13354:	mov	r1, #8
   13358:	ldr	r0, [fp, #-16]
   1335c:	bl	1ca54 <flatcc_verify_union_field@@Base>
   13360:	str	r0, [fp, #-8]
   13364:	ldr	r3, [fp, #-8]
   13368:	cmp	r3, #0
   1336c:	beq	13378 <_start@@Base+0x1020>
   13370:	ldr	r3, [fp, #-8]
   13374:	b	13788 <_start@@Base+0x1430>
   13378:	mvn	r3, #-1073741824	; 0xc0000000
   1337c:	str	r3, [sp, #4]
   13380:	mov	r3, #2
   13384:	str	r3, [sp]
   13388:	mov	r3, #4
   1338c:	mov	r2, #0
   13390:	mov	r1, #9
   13394:	ldr	r0, [fp, #-16]
   13398:	bl	1bfb0 <flatcc_verify_vector_field@@Base>
   1339c:	str	r0, [fp, #-8]
   133a0:	ldr	r3, [fp, #-8]
   133a4:	cmp	r3, #0
   133a8:	beq	133b4 <_start@@Base+0x105c>
   133ac:	ldr	r3, [fp, #-8]
   133b0:	b	13788 <_start@@Base+0x1430>
   133b4:	mvn	r3, #-1073741824	; 0xc0000000
   133b8:	str	r3, [sp, #4]
   133bc:	mov	r3, #2
   133c0:	str	r3, [sp]
   133c4:	mov	r3, #4
   133c8:	mov	r2, #0
   133cc:	mov	r1, #31
   133d0:	ldr	r0, [fp, #-16]
   133d4:	bl	1bfb0 <flatcc_verify_vector_field@@Base>
   133d8:	str	r0, [fp, #-8]
   133dc:	ldr	r3, [fp, #-8]
   133e0:	cmp	r3, #0
   133e4:	beq	133f0 <_start@@Base+0x1098>
   133e8:	ldr	r3, [fp, #-8]
   133ec:	b	13788 <_start@@Base+0x1430>
   133f0:	ldr	r3, [pc, #936]	; 137a0 <_start@@Base+0x1448>
   133f4:	add	r3, pc, r3
   133f8:	str	r3, [sp, #4]
   133fc:	mov	r3, #1
   13400:	str	r3, [sp]
   13404:	mov	r3, #0
   13408:	mov	r2, #0
   1340c:	mov	r1, #13
   13410:	ldr	r0, [fp, #-16]
   13414:	bl	1c8f8 <flatcc_verify_table_as_nested_root@@Base>
   13418:	str	r0, [fp, #-8]
   1341c:	ldr	r3, [fp, #-8]
   13420:	cmp	r3, #0
   13424:	beq	13430 <_start@@Base+0x10d8>
   13428:	ldr	r3, [fp, #-8]
   1342c:	b	13788 <_start@@Base+0x1430>
   13430:	ldr	r3, [pc, #876]	; 137a4 <_start@@Base+0x144c>
   13434:	add	r3, pc, r3
   13438:	mov	r2, #0
   1343c:	mov	r1, #14
   13440:	ldr	r0, [fp, #-16]
   13444:	bl	1c114 <flatcc_verify_table_field@@Base>
   13448:	str	r0, [fp, #-8]
   1344c:	ldr	r3, [fp, #-8]
   13450:	cmp	r3, #0
   13454:	beq	13460 <_start@@Base+0x1108>
   13458:	ldr	r3, [fp, #-8]
   1345c:	b	13788 <_start@@Base+0x1430>
   13460:	mov	r3, #1
   13464:	mov	r2, #1
   13468:	mov	r1, #15
   1346c:	ldr	r0, [fp, #-16]
   13470:	bl	1be94 <flatcc_verify_field@@Base>
   13474:	str	r0, [fp, #-8]
   13478:	ldr	r3, [fp, #-8]
   1347c:	cmp	r3, #0
   13480:	beq	1348c <_start@@Base+0x1134>
   13484:	ldr	r3, [fp, #-8]
   13488:	b	13788 <_start@@Base+0x1430>
   1348c:	mov	r3, #4
   13490:	mov	r2, #4
   13494:	mov	r1, #16
   13498:	ldr	r0, [fp, #-16]
   1349c:	bl	1be94 <flatcc_verify_field@@Base>
   134a0:	str	r0, [fp, #-8]
   134a4:	ldr	r3, [fp, #-8]
   134a8:	cmp	r3, #0
   134ac:	beq	134b8 <_start@@Base+0x1160>
   134b0:	ldr	r3, [fp, #-8]
   134b4:	b	13788 <_start@@Base+0x1430>
   134b8:	mov	r3, #4
   134bc:	mov	r2, #4
   134c0:	mov	r1, #17
   134c4:	ldr	r0, [fp, #-16]
   134c8:	bl	1be94 <flatcc_verify_field@@Base>
   134cc:	str	r0, [fp, #-8]
   134d0:	ldr	r3, [fp, #-8]
   134d4:	cmp	r3, #0
   134d8:	beq	134e4 <_start@@Base+0x118c>
   134dc:	ldr	r3, [fp, #-8]
   134e0:	b	13788 <_start@@Base+0x1430>
   134e4:	mov	r3, #8
   134e8:	mov	r2, #8
   134ec:	mov	r1, #18
   134f0:	ldr	r0, [fp, #-16]
   134f4:	bl	1be94 <flatcc_verify_field@@Base>
   134f8:	str	r0, [fp, #-8]
   134fc:	ldr	r3, [fp, #-8]
   13500:	cmp	r3, #0
   13504:	beq	13510 <_start@@Base+0x11b8>
   13508:	ldr	r3, [fp, #-8]
   1350c:	b	13788 <_start@@Base+0x1430>
   13510:	mov	r3, #8
   13514:	mov	r2, #8
   13518:	mov	r1, #19
   1351c:	ldr	r0, [fp, #-16]
   13520:	bl	1be94 <flatcc_verify_field@@Base>
   13524:	str	r0, [fp, #-8]
   13528:	ldr	r3, [fp, #-8]
   1352c:	cmp	r3, #0
   13530:	beq	1353c <_start@@Base+0x11e4>
   13534:	ldr	r3, [fp, #-8]
   13538:	b	13788 <_start@@Base+0x1430>
   1353c:	mov	r3, #4
   13540:	mov	r2, #4
   13544:	mov	r1, #20
   13548:	ldr	r0, [fp, #-16]
   1354c:	bl	1be94 <flatcc_verify_field@@Base>
   13550:	str	r0, [fp, #-8]
   13554:	ldr	r3, [fp, #-8]
   13558:	cmp	r3, #0
   1355c:	beq	13568 <_start@@Base+0x1210>
   13560:	ldr	r3, [fp, #-8]
   13564:	b	13788 <_start@@Base+0x1430>
   13568:	mov	r3, #4
   1356c:	mov	r2, #4
   13570:	mov	r1, #21
   13574:	ldr	r0, [fp, #-16]
   13578:	bl	1be94 <flatcc_verify_field@@Base>
   1357c:	str	r0, [fp, #-8]
   13580:	ldr	r3, [fp, #-8]
   13584:	cmp	r3, #0
   13588:	beq	13594 <_start@@Base+0x123c>
   1358c:	ldr	r3, [fp, #-8]
   13590:	b	13788 <_start@@Base+0x1430>
   13594:	mov	r3, #8
   13598:	mov	r2, #8
   1359c:	mov	r1, #22
   135a0:	ldr	r0, [fp, #-16]
   135a4:	bl	1be94 <flatcc_verify_field@@Base>
   135a8:	str	r0, [fp, #-8]
   135ac:	ldr	r3, [fp, #-8]
   135b0:	cmp	r3, #0
   135b4:	beq	135c0 <_start@@Base+0x1268>
   135b8:	ldr	r3, [fp, #-8]
   135bc:	b	13788 <_start@@Base+0x1430>
   135c0:	mov	r3, #8
   135c4:	mov	r2, #8
   135c8:	mov	r1, #23
   135cc:	ldr	r0, [fp, #-16]
   135d0:	bl	1be94 <flatcc_verify_field@@Base>
   135d4:	str	r0, [fp, #-8]
   135d8:	ldr	r3, [fp, #-8]
   135dc:	cmp	r3, #0
   135e0:	beq	135ec <_start@@Base+0x1294>
   135e4:	ldr	r3, [fp, #-8]
   135e8:	b	13788 <_start@@Base+0x1430>
   135ec:	mov	r3, #4
   135f0:	mov	r2, #4
   135f4:	mov	r1, #25
   135f8:	ldr	r0, [fp, #-16]
   135fc:	bl	1be94 <flatcc_verify_field@@Base>
   13600:	str	r0, [fp, #-8]
   13604:	ldr	r3, [fp, #-8]
   13608:	cmp	r3, #0
   1360c:	beq	13618 <_start@@Base+0x12c0>
   13610:	ldr	r3, [fp, #-8]
   13614:	b	13788 <_start@@Base+0x1430>
   13618:	mov	r3, #4
   1361c:	mov	r2, #4
   13620:	mov	r1, #26
   13624:	ldr	r0, [fp, #-16]
   13628:	bl	1be94 <flatcc_verify_field@@Base>
   1362c:	str	r0, [fp, #-8]
   13630:	ldr	r3, [fp, #-8]
   13634:	cmp	r3, #0
   13638:	beq	13644 <_start@@Base+0x12ec>
   1363c:	ldr	r3, [fp, #-8]
   13640:	b	13788 <_start@@Base+0x1430>
   13644:	mov	r3, #4
   13648:	mov	r2, #4
   1364c:	mov	r1, #27
   13650:	ldr	r0, [fp, #-16]
   13654:	bl	1be94 <flatcc_verify_field@@Base>
   13658:	str	r0, [fp, #-8]
   1365c:	ldr	r3, [fp, #-8]
   13660:	cmp	r3, #0
   13664:	beq	13670 <_start@@Base+0x1318>
   13668:	ldr	r3, [fp, #-8]
   1366c:	b	13788 <_start@@Base+0x1430>
   13670:	mvn	r3, #0
   13674:	str	r3, [sp, #4]
   13678:	mov	r3, #1
   1367c:	str	r3, [sp]
   13680:	mov	r3, #1
   13684:	mov	r2, #0
   13688:	mov	r1, #30
   1368c:	ldr	r0, [fp, #-16]
   13690:	bl	1bfb0 <flatcc_verify_vector_field@@Base>
   13694:	str	r0, [fp, #-8]
   13698:	ldr	r3, [fp, #-8]
   1369c:	cmp	r3, #0
   136a0:	beq	136ac <_start@@Base+0x1354>
   136a4:	ldr	r3, [fp, #-8]
   136a8:	b	13788 <_start@@Base+0x1430>
   136ac:	mvn	r3, #-536870912	; 0xe0000000
   136b0:	str	r3, [sp, #4]
   136b4:	mov	r3, #8
   136b8:	str	r3, [sp]
   136bc:	mov	r3, #8
   136c0:	mov	r2, #0
   136c4:	mov	r1, #32
   136c8:	ldr	r0, [fp, #-16]
   136cc:	bl	1bfb0 <flatcc_verify_vector_field@@Base>
   136d0:	str	r0, [fp, #-8]
   136d4:	ldr	r3, [fp, #-8]
   136d8:	cmp	r3, #0
   136dc:	beq	136e8 <_start@@Base+0x1390>
   136e0:	ldr	r3, [fp, #-8]
   136e4:	b	13788 <_start@@Base+0x1430>
   136e8:	mvn	r3, #-536870912	; 0xe0000000
   136ec:	str	r3, [sp, #4]
   136f0:	mov	r3, #8
   136f4:	str	r3, [sp]
   136f8:	mov	r3, #8
   136fc:	mov	r2, #0
   13700:	mov	r1, #33	; 0x21
   13704:	ldr	r0, [fp, #-16]
   13708:	bl	1bfb0 <flatcc_verify_vector_field@@Base>
   1370c:	str	r0, [fp, #-8]
   13710:	ldr	r3, [fp, #-8]
   13714:	cmp	r3, #0
   13718:	beq	13724 <_start@@Base+0x13cc>
   1371c:	ldr	r3, [fp, #-8]
   13720:	b	13788 <_start@@Base+0x1430>
   13724:	ldr	r3, [pc, #124]	; 137a8 <_start@@Base+0x1450>
   13728:	add	r3, pc, r3
   1372c:	mov	r2, #0
   13730:	mov	r1, #34	; 0x22
   13734:	ldr	r0, [fp, #-16]
   13738:	bl	1c114 <flatcc_verify_table_field@@Base>
   1373c:	str	r0, [fp, #-8]
   13740:	ldr	r3, [fp, #-8]
   13744:	cmp	r3, #0
   13748:	beq	13754 <_start@@Base+0x13fc>
   1374c:	ldr	r3, [fp, #-8]
   13750:	b	13788 <_start@@Base+0x1430>
   13754:	ldr	r3, [pc, #80]	; 137ac <_start@@Base+0x1454>
   13758:	add	r3, pc, r3
   1375c:	mov	r2, #0
   13760:	mov	r1, #35	; 0x23
   13764:	ldr	r0, [fp, #-16]
   13768:	bl	1c114 <flatcc_verify_table_field@@Base>
   1376c:	str	r0, [fp, #-8]
   13770:	ldr	r3, [fp, #-8]
   13774:	cmp	r3, #0
   13778:	beq	13784 <_start@@Base+0x142c>
   1377c:	ldr	r3, [fp, #-8]
   13780:	b	13788 <_start@@Base+0x1430>
   13784:	mov	r3, #0
   13788:	mov	r0, r3
   1378c:	sub	sp, fp, #4
   13790:	pop	{fp, pc}
   13794:			; <UNDEFINED> instruction: 0xfffffed0
   13798:			; <UNDEFINED> instruction: 0xfffffdd8
   1379c:			; <UNDEFINED> instruction: 0xfffff3bc
   137a0:			; <UNDEFINED> instruction: 0xfffffd00
   137a4:			; <UNDEFINED> instruction: 0xfffff73c
   137a8:			; <UNDEFINED> instruction: 0xfffff198
   137ac:			; <UNDEFINED> instruction: 0xfffff8c0
   137b0:	push	{fp, lr}
   137b4:	add	fp, sp, #4
   137b8:	sub	sp, sp, #8
   137bc:	str	r0, [fp, #-8]
   137c0:	str	r1, [fp, #-12]
   137c4:	ldr	r3, [pc, #36]	; 137f0 <_start@@Base+0x1498>
   137c8:	add	r3, pc, r3
   137cc:	ldr	r2, [pc, #32]	; 137f4 <_start@@Base+0x149c>
   137d0:	add	r2, pc, r2
   137d4:	ldr	r1, [fp, #-12]
   137d8:	ldr	r0, [fp, #-8]
   137dc:	bl	1c6c4 <flatcc_verify_table_as_root@@Base>
   137e0:	mov	r3, r0
   137e4:	mov	r0, r3
   137e8:	sub	sp, fp, #4
   137ec:	pop	{fp, pc}
   137f0:			; <UNDEFINED> instruction: 0xfffff92c
   137f4:	ldrdeq	r9, [r0], -r0
   137f8:	push	{fp, lr}
   137fc:	add	fp, sp, #4
   13800:	sub	sp, sp, #24
   13804:	str	r0, [fp, #-16]
   13808:	mov	r3, #1
   1380c:	mov	r2, #1
   13810:	mov	r1, #0
   13814:	ldr	r0, [fp, #-16]
   13818:	bl	1be94 <flatcc_verify_field@@Base>
   1381c:	str	r0, [fp, #-8]
   13820:	ldr	r3, [fp, #-8]
   13824:	cmp	r3, #0
   13828:	beq	13834 <_start@@Base+0x14dc>
   1382c:	ldr	r3, [fp, #-8]
   13830:	b	13a3c <_start@@Base+0x16e4>
   13834:	mov	r3, #1
   13838:	mov	r2, #1
   1383c:	mov	r1, #1
   13840:	ldr	r0, [fp, #-16]
   13844:	bl	1be94 <flatcc_verify_field@@Base>
   13848:	str	r0, [fp, #-8]
   1384c:	ldr	r3, [fp, #-8]
   13850:	cmp	r3, #0
   13854:	beq	13860 <_start@@Base+0x1508>
   13858:	ldr	r3, [fp, #-8]
   1385c:	b	13a3c <_start@@Base+0x16e4>
   13860:	mov	r3, #2
   13864:	mov	r2, #2
   13868:	mov	r1, #2
   1386c:	ldr	r0, [fp, #-16]
   13870:	bl	1be94 <flatcc_verify_field@@Base>
   13874:	str	r0, [fp, #-8]
   13878:	ldr	r3, [fp, #-8]
   1387c:	cmp	r3, #0
   13880:	beq	1388c <_start@@Base+0x1534>
   13884:	ldr	r3, [fp, #-8]
   13888:	b	13a3c <_start@@Base+0x16e4>
   1388c:	mov	r3, #2
   13890:	mov	r2, #2
   13894:	mov	r1, #3
   13898:	ldr	r0, [fp, #-16]
   1389c:	bl	1be94 <flatcc_verify_field@@Base>
   138a0:	str	r0, [fp, #-8]
   138a4:	ldr	r3, [fp, #-8]
   138a8:	cmp	r3, #0
   138ac:	beq	138b8 <_start@@Base+0x1560>
   138b0:	ldr	r3, [fp, #-8]
   138b4:	b	13a3c <_start@@Base+0x16e4>
   138b8:	mov	r3, #4
   138bc:	mov	r2, #4
   138c0:	mov	r1, #4
   138c4:	ldr	r0, [fp, #-16]
   138c8:	bl	1be94 <flatcc_verify_field@@Base>
   138cc:	str	r0, [fp, #-8]
   138d0:	ldr	r3, [fp, #-8]
   138d4:	cmp	r3, #0
   138d8:	beq	138e4 <_start@@Base+0x158c>
   138dc:	ldr	r3, [fp, #-8]
   138e0:	b	13a3c <_start@@Base+0x16e4>
   138e4:	mov	r3, #4
   138e8:	mov	r2, #4
   138ec:	mov	r1, #5
   138f0:	ldr	r0, [fp, #-16]
   138f4:	bl	1be94 <flatcc_verify_field@@Base>
   138f8:	str	r0, [fp, #-8]
   138fc:	ldr	r3, [fp, #-8]
   13900:	cmp	r3, #0
   13904:	beq	13910 <_start@@Base+0x15b8>
   13908:	ldr	r3, [fp, #-8]
   1390c:	b	13a3c <_start@@Base+0x16e4>
   13910:	mov	r3, #8
   13914:	mov	r2, #8
   13918:	mov	r1, #6
   1391c:	ldr	r0, [fp, #-16]
   13920:	bl	1be94 <flatcc_verify_field@@Base>
   13924:	str	r0, [fp, #-8]
   13928:	ldr	r3, [fp, #-8]
   1392c:	cmp	r3, #0
   13930:	beq	1393c <_start@@Base+0x15e4>
   13934:	ldr	r3, [fp, #-8]
   13938:	b	13a3c <_start@@Base+0x16e4>
   1393c:	mov	r3, #8
   13940:	mov	r2, #8
   13944:	mov	r1, #7
   13948:	ldr	r0, [fp, #-16]
   1394c:	bl	1be94 <flatcc_verify_field@@Base>
   13950:	str	r0, [fp, #-8]
   13954:	ldr	r3, [fp, #-8]
   13958:	cmp	r3, #0
   1395c:	beq	13968 <_start@@Base+0x1610>
   13960:	ldr	r3, [fp, #-8]
   13964:	b	13a3c <_start@@Base+0x16e4>
   13968:	mov	r3, #4
   1396c:	mov	r2, #4
   13970:	mov	r1, #8
   13974:	ldr	r0, [fp, #-16]
   13978:	bl	1be94 <flatcc_verify_field@@Base>
   1397c:	str	r0, [fp, #-8]
   13980:	ldr	r3, [fp, #-8]
   13984:	cmp	r3, #0
   13988:	beq	13994 <_start@@Base+0x163c>
   1398c:	ldr	r3, [fp, #-8]
   13990:	b	13a3c <_start@@Base+0x16e4>
   13994:	mov	r3, #8
   13998:	mov	r2, #8
   1399c:	mov	r1, #9
   139a0:	ldr	r0, [fp, #-16]
   139a4:	bl	1be94 <flatcc_verify_field@@Base>
   139a8:	str	r0, [fp, #-8]
   139ac:	ldr	r3, [fp, #-8]
   139b0:	cmp	r3, #0
   139b4:	beq	139c0 <_start@@Base+0x1668>
   139b8:	ldr	r3, [fp, #-8]
   139bc:	b	13a3c <_start@@Base+0x16e4>
   139c0:	mvn	r3, #0
   139c4:	str	r3, [sp, #4]
   139c8:	mov	r3, #1
   139cc:	str	r3, [sp]
   139d0:	mov	r3, #1
   139d4:	mov	r2, #0
   139d8:	mov	r1, #10
   139dc:	ldr	r0, [fp, #-16]
   139e0:	bl	1bfb0 <flatcc_verify_vector_field@@Base>
   139e4:	str	r0, [fp, #-8]
   139e8:	ldr	r3, [fp, #-8]
   139ec:	cmp	r3, #0
   139f0:	beq	139fc <_start@@Base+0x16a4>
   139f4:	ldr	r3, [fp, #-8]
   139f8:	b	13a3c <_start@@Base+0x16e4>
   139fc:	mvn	r3, #-536870912	; 0xe0000000
   13a00:	str	r3, [sp, #4]
   13a04:	mov	r3, #8
   13a08:	str	r3, [sp]
   13a0c:	mov	r3, #8
   13a10:	mov	r2, #0
   13a14:	mov	r1, #11
   13a18:	ldr	r0, [fp, #-16]
   13a1c:	bl	1bfb0 <flatcc_verify_vector_field@@Base>
   13a20:	str	r0, [fp, #-8]
   13a24:	ldr	r3, [fp, #-8]
   13a28:	cmp	r3, #0
   13a2c:	beq	13a38 <_start@@Base+0x16e0>
   13a30:	ldr	r3, [fp, #-8]
   13a34:	b	13a3c <_start@@Base+0x16e4>
   13a38:	mov	r3, #0
   13a3c:	mov	r0, r3
   13a40:	sub	sp, fp, #4
   13a44:	pop	{fp, pc}
   13a48:	push	{fp, lr}
   13a4c:	add	fp, sp, #4
   13a50:	sub	sp, sp, #16
   13a54:	str	r0, [fp, #-16]
   13a58:	mov	r3, #4
   13a5c:	mov	r2, #4
   13a60:	mov	r1, #0
   13a64:	ldr	r0, [fp, #-16]
   13a68:	bl	1be94 <flatcc_verify_field@@Base>
   13a6c:	str	r0, [fp, #-8]
   13a70:	ldr	r3, [fp, #-8]
   13a74:	cmp	r3, #0
   13a78:	beq	13a84 <_start@@Base+0x172c>
   13a7c:	ldr	r3, [fp, #-8]
   13a80:	b	13a88 <_start@@Base+0x1730>
   13a84:	mov	r3, #0
   13a88:	mov	r0, r3
   13a8c:	sub	sp, fp, #4
   13a90:	pop	{fp, pc}
   13a94:	push	{fp, lr}
   13a98:	add	fp, sp, #4
   13a9c:	sub	sp, sp, #16
   13aa0:	str	r0, [fp, #-16]
   13aa4:	ldr	r3, [pc, #248]	; 13ba4 <_start@@Base+0x184c>
   13aa8:	add	r3, pc, r3
   13aac:	mov	r2, #0
   13ab0:	mov	r1, #1
   13ab4:	ldr	r0, [fp, #-16]
   13ab8:	bl	1ca54 <flatcc_verify_union_field@@Base>
   13abc:	str	r0, [fp, #-8]
   13ac0:	ldr	r3, [fp, #-8]
   13ac4:	cmp	r3, #0
   13ac8:	beq	13ad4 <_start@@Base+0x177c>
   13acc:	ldr	r3, [fp, #-8]
   13ad0:	b	13b98 <_start@@Base+0x1840>
   13ad4:	ldr	r3, [pc, #204]	; 13ba8 <_start@@Base+0x1850>
   13ad8:	add	r3, pc, r3
   13adc:	mov	r2, #0
   13ae0:	mov	r1, #3
   13ae4:	ldr	r0, [fp, #-16]
   13ae8:	bl	1ca54 <flatcc_verify_union_field@@Base>
   13aec:	str	r0, [fp, #-8]
   13af0:	ldr	r3, [fp, #-8]
   13af4:	cmp	r3, #0
   13af8:	beq	13b04 <_start@@Base+0x17ac>
   13afc:	ldr	r3, [fp, #-8]
   13b00:	b	13b98 <_start@@Base+0x1840>
   13b04:	ldr	r3, [pc, #160]	; 13bac <_start@@Base+0x1854>
   13b08:	add	r3, pc, r3
   13b0c:	mov	r2, #0
   13b10:	mov	r1, #5
   13b14:	ldr	r0, [fp, #-16]
   13b18:	bl	1ca54 <flatcc_verify_union_field@@Base>
   13b1c:	str	r0, [fp, #-8]
   13b20:	ldr	r3, [fp, #-8]
   13b24:	cmp	r3, #0
   13b28:	beq	13b34 <_start@@Base+0x17dc>
   13b2c:	ldr	r3, [fp, #-8]
   13b30:	b	13b98 <_start@@Base+0x1840>
   13b34:	ldr	r3, [pc, #116]	; 13bb0 <_start@@Base+0x1858>
   13b38:	add	r3, pc, r3
   13b3c:	mov	r2, #0
   13b40:	mov	r1, #7
   13b44:	ldr	r0, [fp, #-16]
   13b48:	bl	1ca54 <flatcc_verify_union_field@@Base>
   13b4c:	str	r0, [fp, #-8]
   13b50:	ldr	r3, [fp, #-8]
   13b54:	cmp	r3, #0
   13b58:	beq	13b64 <_start@@Base+0x180c>
   13b5c:	ldr	r3, [fp, #-8]
   13b60:	b	13b98 <_start@@Base+0x1840>
   13b64:	ldr	r3, [pc, #72]	; 13bb4 <_start@@Base+0x185c>
   13b68:	add	r3, pc, r3
   13b6c:	mov	r2, #0
   13b70:	mov	r1, #9
   13b74:	ldr	r0, [fp, #-16]
   13b78:	bl	1ccb0 <flatcc_verify_union_vector_field@@Base>
   13b7c:	str	r0, [fp, #-8]
   13b80:	ldr	r3, [fp, #-8]
   13b84:	cmp	r3, #0
   13b88:	beq	13b94 <_start@@Base+0x183c>
   13b8c:	ldr	r3, [fp, #-8]
   13b90:	b	13b98 <_start@@Base+0x1840>
   13b94:	mov	r3, #0
   13b98:	mov	r0, r3
   13b9c:	sub	sp, fp, #4
   13ba0:	pop	{fp, pc}
   13ba4:			; <UNDEFINED> instruction: 0xffffed28
   13ba8:			; <UNDEFINED> instruction: 0xffffecf8
   13bac:			; <UNDEFINED> instruction: 0xffffecc8
   13bb0:			; <UNDEFINED> instruction: 0xffffec98
   13bb4:			; <UNDEFINED> instruction: 0xffffec68

00013bb8 <main@@Base>:
   13bb8:	push	{fp, lr}
   13bbc:	add	fp, sp, #4
   13bc0:	sub	sp, sp, #256	; 0x100
   13bc4:	str	r0, [fp, #-256]	; 0xffffff00
   13bc8:	str	r1, [fp, #-260]	; 0xfffffefc
   13bcc:	sub	r3, fp, #252	; 0xfc
   13bd0:	str	r3, [fp, #-8]
   13bd4:	ldr	r0, [fp, #-8]
   13bd8:	bl	14964 <flatcc_builder_init@@Base>
   13bdc:	ldr	r0, [fp, #-8]
   13be0:	bl	12634 <_start@@Base+0x2dc>
   13be4:	ldr	r3, [pc, #84]	; 13c40 <main@@Base+0x88>
   13be8:	add	r3, pc, r3
   13bec:	mov	r1, r3
   13bf0:	ldr	r0, [fp, #-8]
   13bf4:	bl	125f4 <_start@@Base+0x29c>
   13bf8:	ldr	r0, [fp, #-8]
   13bfc:	bl	12688 <_start@@Base+0x330>
   13c00:	sub	r3, fp, #20
   13c04:	mov	r1, r3
   13c08:	ldr	r0, [fp, #-8]
   13c0c:	bl	19acc <flatcc_builder_get_direct_buffer@@Base>
   13c10:	str	r0, [fp, #-12]
   13c14:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c18:	mov	r1, r3
   13c1c:	ldr	r0, [fp, #-12]
   13c20:	bl	137b0 <_start@@Base+0x1458>
   13c24:	str	r0, [fp, #-16]
   13c28:	ldr	r0, [fp, #-8]
   13c2c:	bl	14c18 <flatcc_builder_clear@@Base>
   13c30:	ldr	r3, [fp, #-16]
   13c34:	mov	r0, r3
   13c38:	sub	sp, fp, #4
   13c3c:	pop	{fp, pc}
   13c40:	andeq	r9, r0, r0, asr #9
   13c44:	push	{fp, lr}
   13c48:	add	fp, sp, #4
   13c4c:	sub	sp, sp, #16
   13c50:	str	r0, [fp, #-16]
   13c54:	str	r1, [fp, #-20]	; 0xffffffec
   13c58:	mov	r3, #0
   13c5c:	str	r3, [fp, #-12]
   13c60:	ldr	r3, [fp, #-16]
   13c64:	cmp	r3, #3
   13c68:	bhi	13c74 <main@@Base+0xbc>
   13c6c:	mov	r3, #4
   13c70:	str	r3, [fp, #-16]
   13c74:	sub	r3, fp, #12
   13c78:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c7c:	ldr	r1, [fp, #-16]
   13c80:	mov	r0, r3
   13c84:	bl	12310 <posix_memalign@plt>
   13c88:	str	r0, [fp, #-8]
   13c8c:	ldr	r3, [fp, #-8]
   13c90:	cmp	r3, #0
   13c94:	beq	13cb8 <main@@Base+0x100>
   13c98:	ldr	r3, [fp, #-12]
   13c9c:	cmp	r3, #0
   13ca0:	beq	13cb8 <main@@Base+0x100>
   13ca4:	ldr	r3, [fp, #-12]
   13ca8:	mov	r0, r3
   13cac:	bl	122b0 <free@plt>
   13cb0:	mov	r3, #0
   13cb4:	str	r3, [fp, #-12]
   13cb8:	ldr	r3, [fp, #-12]
   13cbc:	mov	r0, r3
   13cc0:	sub	sp, fp, #4
   13cc4:	pop	{fp, pc}
   13cc8:	push	{fp}		; (str fp, [sp, #-4]!)
   13ccc:	add	fp, sp, #0
   13cd0:	sub	sp, sp, #12
   13cd4:	str	r0, [fp, #-8]
   13cd8:	ldr	r3, [fp, #-8]
   13cdc:	mov	r0, r3
   13ce0:	add	sp, fp, #0
   13ce4:	pop	{fp}		; (ldr fp, [sp], #4)
   13ce8:	bx	lr
   13cec:	push	{fp}		; (str fp, [sp, #-4]!)
   13cf0:	add	fp, sp, #0
   13cf4:	sub	sp, sp, #12
   13cf8:	mov	r3, r0
   13cfc:	strb	r3, [fp, #-5]
   13d00:	ldrb	r3, [fp, #-5]
   13d04:	mov	r0, r3
   13d08:	add	sp, fp, #0
   13d0c:	pop	{fp}		; (ldr fp, [sp], #4)
   13d10:	bx	lr
   13d14:	push	{fp}		; (str fp, [sp, #-4]!)
   13d18:	add	fp, sp, #0
   13d1c:	sub	sp, sp, #12
   13d20:	str	r0, [fp, #-8]
   13d24:	ldr	r3, [fp, #-8]
   13d28:	mov	r0, r3
   13d2c:	add	sp, fp, #0
   13d30:	pop	{fp}		; (ldr fp, [sp], #4)
   13d34:	bx	lr
   13d38:	push	{fp}		; (str fp, [sp, #-4]!)
   13d3c:	add	fp, sp, #0
   13d40:	sub	sp, sp, #12
   13d44:	str	r0, [fp, #-8]
   13d48:	str	r1, [fp, #-12]
   13d4c:	ldr	r3, [fp, #-8]
   13d50:	ldr	r2, [r3]
   13d54:	ldr	r3, [fp, #-8]
   13d58:	ldr	r3, [r3, #4]
   13d5c:	cmp	r2, r3
   13d60:	bne	13d8c <main@@Base+0x1d4>
   13d64:	ldr	r3, [fp, #-12]
   13d68:	cmp	r3, #0
   13d6c:	beq	13d80 <main@@Base+0x1c8>
   13d70:	ldr	r3, [fp, #-8]
   13d74:	ldr	r2, [r3, #24]
   13d78:	ldr	r3, [fp, #-12]
   13d7c:	str	r2, [r3]
   13d80:	ldr	r3, [fp, #-8]
   13d84:	ldr	r3, [r3, #8]
   13d88:	b	13da8 <main@@Base+0x1f0>
   13d8c:	ldr	r3, [fp, #-12]
   13d90:	cmp	r3, #0
   13d94:	beq	13da4 <main@@Base+0x1ec>
   13d98:	ldr	r3, [fp, #-12]
   13d9c:	mov	r2, #0
   13da0:	str	r2, [r3]
   13da4:	mov	r3, #0
   13da8:	mov	r0, r3
   13dac:	add	sp, fp, #0
   13db0:	pop	{fp}		; (ldr fp, [sp], #4)
   13db4:	bx	lr
   13db8:	push	{fp, lr}
   13dbc:	add	fp, sp, #4
   13dc0:	sub	sp, sp, #16
   13dc4:	str	r0, [fp, #-16]
   13dc8:	str	r1, [fp, #-20]	; 0xffffffec
   13dcc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13dd0:	mov	r1, #0
   13dd4:	ldr	r0, [fp, #-16]
   13dd8:	bl	12334 <memchr@plt>
   13ddc:	str	r0, [fp, #-8]
   13de0:	ldr	r3, [fp, #-8]
   13de4:	cmp	r3, #0
   13de8:	beq	13dfc <main@@Base+0x244>
   13dec:	ldr	r2, [fp, #-8]
   13df0:	ldr	r3, [fp, #-16]
   13df4:	sub	r3, r2, r3
   13df8:	b	13e00 <main@@Base+0x248>
   13dfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e00:	mov	r0, r3
   13e04:	sub	sp, fp, #4
   13e08:	pop	{fp, pc}

00013e0c <flatcc_builder_default_alloc@@Base>:
   13e0c:	push	{fp, lr}
   13e10:	add	fp, sp, #4
   13e14:	sub	sp, sp, #24
   13e18:	str	r0, [fp, #-16]
   13e1c:	str	r1, [fp, #-20]	; 0xffffffec
   13e20:	str	r2, [fp, #-24]	; 0xffffffe8
   13e24:	str	r3, [fp, #-28]	; 0xffffffe4
   13e28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e2c:	cmp	r3, #0
   13e30:	bne	13e74 <flatcc_builder_default_alloc@@Base+0x68>
   13e34:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e38:	ldr	r3, [r3]
   13e3c:	cmp	r3, #0
   13e40:	beq	13e6c <flatcc_builder_default_alloc@@Base+0x60>
   13e44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e48:	ldr	r3, [r3]
   13e4c:	mov	r0, r3
   13e50:	bl	122b0 <free@plt>
   13e54:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e58:	mov	r2, #0
   13e5c:	str	r2, [r3]
   13e60:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e64:	mov	r2, #0
   13e68:	str	r2, [r3, #4]
   13e6c:	mov	r3, #0
   13e70:	b	13fc8 <flatcc_builder_default_alloc@@Base+0x1bc>
   13e74:	ldr	r3, [fp, #4]
   13e78:	sub	r3, r3, #1
   13e7c:	cmp	r3, #6
   13e80:	addls	pc, pc, r3, lsl #2
   13e84:	b	13ed4 <flatcc_builder_default_alloc@@Base+0xc8>
   13e88:	b	13ea4 <flatcc_builder_default_alloc@@Base+0x98>
   13e8c:	b	13ed4 <flatcc_builder_default_alloc@@Base+0xc8>
   13e90:	b	13ed4 <flatcc_builder_default_alloc@@Base+0xc8>
   13e94:	b	13ebc <flatcc_builder_default_alloc@@Base+0xb0>
   13e98:	b	13eb0 <flatcc_builder_default_alloc@@Base+0xa4>
   13e9c:	b	13ed4 <flatcc_builder_default_alloc@@Base+0xc8>
   13ea0:	b	13ec8 <flatcc_builder_default_alloc@@Base+0xbc>
   13ea4:	mov	r3, #256	; 0x100
   13ea8:	str	r3, [fp, #-8]
   13eac:	b	13ee0 <flatcc_builder_default_alloc@@Base+0xd4>
   13eb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13eb4:	str	r3, [fp, #-8]
   13eb8:	b	13ee0 <flatcc_builder_default_alloc@@Base+0xd4>
   13ebc:	mov	r3, #288	; 0x120
   13ec0:	str	r3, [fp, #-8]
   13ec4:	b	13ee0 <flatcc_builder_default_alloc@@Base+0xd4>
   13ec8:	mov	r3, #64	; 0x40
   13ecc:	str	r3, [fp, #-8]
   13ed0:	b	13ee0 <flatcc_builder_default_alloc@@Base+0xd4>
   13ed4:	mov	r3, #32
   13ed8:	str	r3, [fp, #-8]
   13edc:	nop			; (mov r0, r0)
   13ee0:	b	13ef0 <flatcc_builder_default_alloc@@Base+0xe4>
   13ee4:	ldr	r3, [fp, #-8]
   13ee8:	lsl	r3, r3, #1
   13eec:	str	r3, [fp, #-8]
   13ef0:	ldr	r2, [fp, #-8]
   13ef4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ef8:	cmp	r2, r3
   13efc:	bcc	13ee4 <flatcc_builder_default_alloc@@Base+0xd8>
   13f00:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f04:	ldr	r2, [r3, #4]
   13f08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f0c:	cmp	r2, r3
   13f10:	bcc	13f34 <flatcc_builder_default_alloc@@Base+0x128>
   13f14:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f18:	ldr	r3, [r3, #4]
   13f1c:	lsr	r2, r3, #1
   13f20:	ldr	r3, [fp, #-8]
   13f24:	cmp	r2, r3
   13f28:	bcc	13f34 <flatcc_builder_default_alloc@@Base+0x128>
   13f2c:	mov	r3, #0
   13f30:	b	13fc8 <flatcc_builder_default_alloc@@Base+0x1bc>
   13f34:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f38:	ldr	r3, [r3]
   13f3c:	ldr	r1, [fp, #-8]
   13f40:	mov	r0, r3
   13f44:	bl	122d4 <realloc@plt>
   13f48:	str	r0, [fp, #-12]
   13f4c:	ldr	r3, [fp, #-12]
   13f50:	cmp	r3, #0
   13f54:	bne	13f60 <flatcc_builder_default_alloc@@Base+0x154>
   13f58:	mvn	r3, #0
   13f5c:	b	13fc8 <flatcc_builder_default_alloc@@Base+0x1bc>
   13f60:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13f64:	cmp	r3, #0
   13f68:	beq	13fac <flatcc_builder_default_alloc@@Base+0x1a0>
   13f6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f70:	ldr	r2, [r3, #4]
   13f74:	ldr	r3, [fp, #-8]
   13f78:	cmp	r2, r3
   13f7c:	bcs	13fac <flatcc_builder_default_alloc@@Base+0x1a0>
   13f80:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f84:	ldr	r3, [r3, #4]
   13f88:	ldr	r2, [fp, #-12]
   13f8c:	add	r0, r2, r3
   13f90:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f94:	ldr	r3, [r3, #4]
   13f98:	ldr	r2, [fp, #-8]
   13f9c:	sub	r3, r2, r3
   13fa0:	mov	r2, r3
   13fa4:	mov	r1, #0
   13fa8:	bl	1231c <memset@plt>
   13fac:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fb0:	ldr	r2, [fp, #-12]
   13fb4:	str	r2, [r3]
   13fb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fbc:	ldr	r2, [fp, #-8]
   13fc0:	str	r2, [r3, #4]
   13fc4:	mov	r3, #0
   13fc8:	mov	r0, r3
   13fcc:	sub	sp, fp, #4
   13fd0:	pop	{fp, pc}
   13fd4:	push	{fp}		; (str fp, [sp, #-4]!)
   13fd8:	add	fp, sp, #0
   13fdc:	sub	sp, sp, #20
   13fe0:	str	r0, [fp, #-16]
   13fe4:	str	r1, [fp, #-20]	; 0xffffffec
   13fe8:	ldr	r3, [fp, #-16]
   13fec:	add	r3, r3, #52	; 0x34
   13ff0:	add	r3, r3, #8
   13ff4:	str	r3, [fp, #-8]
   13ff8:	ldr	r3, [fp, #-16]
   13ffc:	ldr	r2, [r3, #60]	; 0x3c
   14000:	ldr	r3, [fp, #-16]
   14004:	ldr	r3, [r3, #28]
   14008:	add	r2, r2, r3
   1400c:	ldr	r3, [fp, #-16]
   14010:	str	r2, [r3, #16]
   14014:	ldr	r3, [fp, #-8]
   14018:	ldr	r2, [r3, #4]
   1401c:	ldr	r3, [fp, #-16]
   14020:	ldr	r3, [r3, #28]
   14024:	sub	r2, r2, r3
   14028:	ldr	r3, [fp, #-16]
   1402c:	str	r2, [r3, #24]
   14030:	ldr	r3, [fp, #-16]
   14034:	ldr	r2, [r3, #24]
   14038:	ldr	r3, [fp, #-20]	; 0xffffffec
   1403c:	cmp	r2, r3
   14040:	bls	14050 <flatcc_builder_default_alloc@@Base+0x244>
   14044:	ldr	r3, [fp, #-16]
   14048:	ldr	r2, [fp, #-20]	; 0xffffffec
   1404c:	str	r2, [r3, #24]
   14050:	ldr	r3, [fp, #-16]
   14054:	ldr	r3, [r3, #32]
   14058:	ldr	r2, [fp, #-20]	; 0xffffffec
   1405c:	str	r2, [r3, #4]
   14060:	nop			; (mov r0, r0)
   14064:	add	sp, fp, #0
   14068:	pop	{fp}		; (ldr fp, [sp], #4)
   1406c:	bx	lr
   14070:	push	{r4, fp, lr}
   14074:	add	fp, sp, #8
   14078:	sub	sp, sp, #36	; 0x24
   1407c:	str	r0, [fp, #-24]	; 0xffffffe8
   14080:	str	r1, [fp, #-28]	; 0xffffffe4
   14084:	str	r2, [fp, #-32]	; 0xffffffe0
   14088:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1408c:	add	r3, r3, #52	; 0x34
   14090:	add	r3, r3, #8
   14094:	str	r3, [fp, #-16]
   14098:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1409c:	ldr	r4, [r3, #48]	; 0x30
   140a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   140a4:	ldr	r0, [r3, #40]	; 0x28
   140a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   140ac:	ldr	r2, [r3, #28]
   140b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   140b4:	add	r2, r2, r3
   140b8:	mov	r3, #1
   140bc:	str	r3, [sp]
   140c0:	mov	r3, #1
   140c4:	ldr	r1, [fp, #-16]
   140c8:	blx	r4
   140cc:	mov	r3, r0
   140d0:	cmp	r3, #0
   140d4:	beq	140e0 <flatcc_builder_default_alloc@@Base+0x2d4>
   140d8:	mvn	r3, #0
   140dc:	b	140f0 <flatcc_builder_default_alloc@@Base+0x2e4>
   140e0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   140e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   140e8:	bl	13fd4 <flatcc_builder_default_alloc@@Base+0x1c8>
   140ec:	mov	r3, #0
   140f0:	mov	r0, r3
   140f4:	sub	sp, fp, #8
   140f8:	pop	{r4, fp, pc}
   140fc:	push	{fp, lr}
   14100:	add	fp, sp, #4
   14104:	sub	sp, sp, #16
   14108:	str	r0, [fp, #-16]
   1410c:	str	r1, [fp, #-20]	; 0xffffffec
   14110:	ldr	r3, [fp, #-16]
   14114:	ldr	r3, [r3, #20]
   14118:	str	r3, [fp, #-8]
   1411c:	ldr	r3, [fp, #-16]
   14120:	ldr	r2, [r3, #20]
   14124:	ldr	r3, [fp, #-20]	; 0xffffffec
   14128:	add	r2, r2, r3
   1412c:	ldr	r3, [fp, #-16]
   14130:	str	r2, [r3, #20]
   14134:	ldr	r3, [fp, #-16]
   14138:	ldr	r2, [r3, #20]
   1413c:	ldr	r3, [fp, #-16]
   14140:	ldr	r3, [r3, #24]
   14144:	cmp	r2, r3
   14148:	bcc	1417c <flatcc_builder_default_alloc@@Base+0x370>
   1414c:	ldr	r3, [fp, #-16]
   14150:	ldr	r3, [r3, #20]
   14154:	add	r3, r3, #1
   14158:	mvn	r2, #3
   1415c:	mov	r1, r3
   14160:	ldr	r0, [fp, #-16]
   14164:	bl	14070 <flatcc_builder_default_alloc@@Base+0x264>
   14168:	mov	r3, r0
   1416c:	cmp	r3, #0
   14170:	beq	1417c <flatcc_builder_default_alloc@@Base+0x370>
   14174:	mov	r3, #0
   14178:	b	1418c <flatcc_builder_default_alloc@@Base+0x380>
   1417c:	ldr	r3, [fp, #-16]
   14180:	ldr	r2, [r3, #16]
   14184:	ldr	r3, [fp, #-8]
   14188:	add	r3, r2, r3
   1418c:	mov	r0, r3
   14190:	sub	sp, fp, #4
   14194:	pop	{fp, pc}
   14198:	push	{fp, lr}
   1419c:	add	fp, sp, #4
   141a0:	sub	sp, sp, #8
   141a4:	str	r0, [fp, #-8]
   141a8:	str	r1, [fp, #-12]
   141ac:	ldr	r3, [fp, #-8]
   141b0:	ldr	r2, [r3, #20]
   141b4:	ldr	r3, [fp, #-12]
   141b8:	sub	r2, r2, r3
   141bc:	ldr	r3, [fp, #-8]
   141c0:	str	r2, [r3, #20]
   141c4:	ldr	r3, [fp, #-8]
   141c8:	ldr	r2, [r3, #16]
   141cc:	ldr	r3, [fp, #-8]
   141d0:	ldr	r3, [r3, #20]
   141d4:	add	r3, r2, r3
   141d8:	ldr	r2, [fp, #-12]
   141dc:	mov	r1, #0
   141e0:	mov	r0, r3
   141e4:	bl	1231c <memset@plt>
   141e8:	nop			; (mov r0, r0)
   141ec:	sub	sp, fp, #4
   141f0:	pop	{fp, pc}
   141f4:	push	{fp, lr}
   141f8:	add	fp, sp, #4
   141fc:	sub	sp, sp, #24
   14200:	str	r0, [fp, #-16]
   14204:	str	r1, [fp, #-20]	; 0xffffffec
   14208:	str	r2, [fp, #-24]	; 0xffffffe8
   1420c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14210:	ldr	r0, [fp, #-16]
   14214:	bl	140fc <flatcc_builder_default_alloc@@Base+0x2f0>
   14218:	str	r0, [fp, #-8]
   1421c:	ldr	r3, [fp, #-8]
   14220:	cmp	r3, #0
   14224:	bne	14230 <flatcc_builder_default_alloc@@Base+0x424>
   14228:	mov	r3, #0
   1422c:	b	14244 <flatcc_builder_default_alloc@@Base+0x438>
   14230:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14234:	ldr	r1, [fp, #-20]	; 0xffffffec
   14238:	ldr	r0, [fp, #-8]
   1423c:	bl	122bc <memcpy@plt>
   14240:	ldr	r3, [fp, #-8]
   14244:	mov	r0, r3
   14248:	sub	sp, fp, #4
   1424c:	pop	{fp, pc}
   14250:	push	{fp, lr}
   14254:	add	fp, sp, #4
   14258:	sub	sp, sp, #24
   1425c:	str	r0, [fp, #-16]
   14260:	str	r1, [fp, #-20]	; 0xffffffec
   14264:	strh	r2, [fp, #-22]	; 0xffffffea
   14268:	strh	r3, [fp, #-24]	; 0xffffffe8
   1426c:	ldr	r3, [fp, #-16]
   14270:	ldr	r2, [r3, #20]
   14274:	ldrh	r3, [fp, #-22]	; 0xffffffea
   14278:	add	r3, r2, r3
   1427c:	sub	r3, r3, #1
   14280:	ldrh	r2, [fp, #-22]	; 0xffffffea
   14284:	rsb	r2, r2, #0
   14288:	and	r3, r3, r2
   1428c:	str	r3, [fp, #-8]
   14290:	ldr	r2, [fp, #-8]
   14294:	ldr	r3, [fp, #-20]	; 0xffffffec
   14298:	add	r2, r2, r3
   1429c:	ldr	r3, [fp, #-16]
   142a0:	str	r2, [r3, #20]
   142a4:	ldr	r3, [fp, #-16]
   142a8:	ldr	r2, [r3, #20]
   142ac:	ldr	r3, [fp, #-16]
   142b0:	ldr	r3, [r3, #24]
   142b4:	cmp	r2, r3
   142b8:	bcc	142ec <flatcc_builder_default_alloc@@Base+0x4e0>
   142bc:	ldr	r3, [fp, #-16]
   142c0:	ldr	r3, [r3, #20]
   142c4:	add	r3, r3, #1
   142c8:	ldr	r2, [pc, #136]	; 14358 <flatcc_builder_default_alloc@@Base+0x54c>
   142cc:	mov	r1, r3
   142d0:	ldr	r0, [fp, #-16]
   142d4:	bl	14070 <flatcc_builder_default_alloc@@Base+0x264>
   142d8:	mov	r3, r0
   142dc:	cmp	r3, #0
   142e0:	beq	142ec <flatcc_builder_default_alloc@@Base+0x4e0>
   142e4:	mov	r3, #0
   142e8:	b	1434c <flatcc_builder_default_alloc@@Base+0x540>
   142ec:	ldr	r3, [fp, #-16]
   142f0:	ldr	r2, [r3, #4]
   142f4:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   142f8:	lsl	r3, r3, #1
   142fc:	add	r3, r2, r3
   14300:	ldr	r2, [fp, #-8]
   14304:	uxth	r2, r2
   14308:	add	r2, r2, #4
   1430c:	uxth	r2, r2
   14310:	strh	r2, [r3]
   14314:	ldr	r3, [fp, #-16]
   14318:	ldrh	r3, [r3, #8]
   1431c:	ldrh	r2, [fp, #-24]	; 0xffffffe8
   14320:	cmp	r2, r3
   14324:	bcc	1433c <flatcc_builder_default_alloc@@Base+0x530>
   14328:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   1432c:	add	r3, r3, #1
   14330:	uxth	r2, r3
   14334:	ldr	r3, [fp, #-16]
   14338:	strh	r2, [r3, #8]
   1433c:	ldr	r3, [fp, #-16]
   14340:	ldr	r2, [r3, #16]
   14344:	ldr	r3, [fp, #-8]
   14348:	add	r3, r2, r3
   1434c:	mov	r0, r3
   14350:	sub	sp, fp, #4
   14354:	pop	{fp, pc}
   14358:	strdeq	pc, [r0], -ip
   1435c:	push	{fp, lr}
   14360:	add	fp, sp, #4
   14364:	sub	sp, sp, #16
   14368:	str	r0, [fp, #-16]
   1436c:	mov	r3, r1
   14370:	strh	r3, [fp, #-18]	; 0xffffffee
   14374:	ldr	r3, [fp, #-16]
   14378:	ldr	r3, [r3, #20]
   1437c:	add	r3, r3, #3
   14380:	bic	r3, r3, #3
   14384:	str	r3, [fp, #-8]
   14388:	ldr	r3, [fp, #-8]
   1438c:	add	r2, r3, #4
   14390:	ldr	r3, [fp, #-16]
   14394:	str	r2, [r3, #20]
   14398:	ldr	r3, [fp, #-16]
   1439c:	ldr	r2, [r3, #20]
   143a0:	ldr	r3, [fp, #-16]
   143a4:	ldr	r3, [r3, #24]
   143a8:	cmp	r2, r3
   143ac:	bls	143dc <flatcc_builder_default_alloc@@Base+0x5d0>
   143b0:	ldr	r3, [fp, #-16]
   143b4:	ldr	r3, [r3, #20]
   143b8:	ldr	r2, [pc, #168]	; 14468 <flatcc_builder_default_alloc@@Base+0x65c>
   143bc:	mov	r1, r3
   143c0:	ldr	r0, [fp, #-16]
   143c4:	bl	14070 <flatcc_builder_default_alloc@@Base+0x264>
   143c8:	mov	r3, r0
   143cc:	cmp	r3, #0
   143d0:	beq	143dc <flatcc_builder_default_alloc@@Base+0x5d0>
   143d4:	mov	r3, #0
   143d8:	b	1445c <flatcc_builder_default_alloc@@Base+0x650>
   143dc:	ldr	r3, [fp, #-16]
   143e0:	ldr	r2, [r3, #4]
   143e4:	ldrh	r3, [fp, #-18]	; 0xffffffee
   143e8:	lsl	r3, r3, #1
   143ec:	add	r3, r2, r3
   143f0:	ldr	r2, [fp, #-8]
   143f4:	uxth	r2, r2
   143f8:	add	r2, r2, #4
   143fc:	uxth	r2, r2
   14400:	strh	r2, [r3]
   14404:	ldr	r3, [fp, #-16]
   14408:	ldrh	r3, [r3, #8]
   1440c:	ldrh	r2, [fp, #-18]	; 0xffffffee
   14410:	cmp	r2, r3
   14414:	bcc	1442c <flatcc_builder_default_alloc@@Base+0x620>
   14418:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1441c:	add	r3, r3, #1
   14420:	uxth	r2, r3
   14424:	ldr	r3, [fp, #-16]
   14428:	strh	r2, [r3, #8]
   1442c:	ldr	r3, [fp, #-16]
   14430:	ldr	r3, [r3]
   14434:	add	r1, r3, #2
   14438:	ldr	r2, [fp, #-16]
   1443c:	str	r1, [r2]
   14440:	ldr	r2, [fp, #-8]
   14444:	uxth	r2, r2
   14448:	strh	r2, [r3]
   1444c:	ldr	r3, [fp, #-16]
   14450:	ldr	r2, [r3, #16]
   14454:	ldr	r3, [fp, #-8]
   14458:	add	r3, r2, r3
   1445c:	mov	r0, r3
   14460:	sub	sp, fp, #4
   14464:	pop	{fp, pc}
   14468:	strdeq	pc, [r0], -ip
   1446c:	push	{r4, fp, lr}
   14470:	add	fp, sp, #8
   14474:	sub	sp, sp, #36	; 0x24
   14478:	str	r0, [fp, #-24]	; 0xffffffe8
   1447c:	str	r1, [fp, #-28]	; 0xffffffe4
   14480:	str	r2, [fp, #-32]	; 0xffffffe0
   14484:	str	r3, [fp, #-36]	; 0xffffffdc
   14488:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1448c:	add	r2, r3, #52	; 0x34
   14490:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14494:	lsl	r3, r3, #3
   14498:	add	r3, r2, r3
   1449c:	str	r3, [fp, #-16]
   144a0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   144a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   144a8:	add	r2, r2, r3
   144ac:	ldr	r3, [fp, #-16]
   144b0:	ldr	r3, [r3, #4]
   144b4:	cmp	r2, r3
   144b8:	bls	14518 <flatcc_builder_default_alloc@@Base+0x70c>
   144bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   144c0:	ldr	r4, [r3, #48]	; 0x30
   144c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   144c8:	ldr	r0, [r3, #40]	; 0x28
   144cc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   144d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   144d4:	add	r2, r2, r3
   144d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   144dc:	str	r3, [sp]
   144e0:	ldr	r3, [fp, #4]
   144e4:	ldr	r1, [fp, #-16]
   144e8:	blx	r4
   144ec:	mov	r3, r0
   144f0:	cmp	r3, #0
   144f4:	beq	14518 <flatcc_builder_default_alloc@@Base+0x70c>
   144f8:	ldr	r3, [pc, #56]	; 14538 <flatcc_builder_default_alloc@@Base+0x72c>
   144fc:	add	r3, pc, r3
   14500:	mov	r2, #308	; 0x134
   14504:	ldr	r1, [pc, #48]	; 1453c <flatcc_builder_default_alloc@@Base+0x730>
   14508:	add	r1, pc, r1
   1450c:	ldr	r0, [pc, #44]	; 14540 <flatcc_builder_default_alloc@@Base+0x734>
   14510:	add	r0, pc, r0
   14514:	bl	1234c <__assert_fail@plt>
   14518:	ldr	r3, [fp, #-16]
   1451c:	ldr	r3, [r3]
   14520:	mov	r2, r3
   14524:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14528:	add	r3, r2, r3
   1452c:	mov	r0, r3
   14530:	sub	sp, fp, #8
   14534:	pop	{r4, fp, pc}
   14538:	andeq	r9, r0, ip, lsl #4
   1453c:	andeq	r8, r0, ip, asr #27
   14540:	andeq	r8, r0, r4, lsr #28
   14544:	push	{fp, lr}
   14548:	add	fp, sp, #4
   1454c:	sub	sp, sp, #24
   14550:	str	r0, [fp, #-16]
   14554:	str	r1, [fp, #-20]	; 0xffffffec
   14558:	ldr	r3, [fp, #-16]
   1455c:	ldr	r3, [r3, #32]
   14560:	ldr	r2, [r3, #16]
   14564:	ldr	r3, [fp, #-16]
   14568:	ldr	r3, [r3, #32]
   1456c:	ldrh	r3, [r3, #28]
   14570:	lsl	r3, r3, #1
   14574:	add	r3, r2, r3
   14578:	str	r3, [fp, #-8]
   1457c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14580:	add	r3, r3, #2
   14584:	lsl	r3, r3, #1
   14588:	str	r3, [fp, #-12]
   1458c:	mov	r3, #1
   14590:	str	r3, [sp]
   14594:	ldr	r3, [fp, #-12]
   14598:	ldr	r2, [fp, #-8]
   1459c:	mov	r1, #0
   145a0:	ldr	r0, [fp, #-16]
   145a4:	bl	1446c <flatcc_builder_default_alloc@@Base+0x660>
   145a8:	mov	r2, r0
   145ac:	ldr	r3, [fp, #-16]
   145b0:	str	r2, [r3, #4]
   145b4:	ldr	r3, [fp, #-16]
   145b8:	ldr	r3, [r3, #4]
   145bc:	cmp	r3, #0
   145c0:	bne	145cc <flatcc_builder_default_alloc@@Base+0x7c0>
   145c4:	mvn	r3, #0
   145c8:	b	14644 <flatcc_builder_default_alloc@@Base+0x838>
   145cc:	ldr	r3, [fp, #-16]
   145d0:	ldr	r3, [r3, #4]
   145d4:	add	r2, r3, #4
   145d8:	ldr	r3, [fp, #-16]
   145dc:	str	r2, [r3, #4]
   145e0:	ldr	r3, [fp, #-16]
   145e4:	ldr	r3, [r3, #32]
   145e8:	ldr	r3, [r3, #20]
   145ec:	str	r3, [fp, #-8]
   145f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   145f4:	lsl	r3, r3, #1
   145f8:	add	r3, r3, #1
   145fc:	str	r3, [fp, #-12]
   14600:	mov	r3, #0
   14604:	str	r3, [sp]
   14608:	ldr	r3, [fp, #-12]
   1460c:	ldr	r2, [fp, #-8]
   14610:	mov	r1, #3
   14614:	ldr	r0, [fp, #-16]
   14618:	bl	1446c <flatcc_builder_default_alloc@@Base+0x660>
   1461c:	mov	r2, r0
   14620:	ldr	r3, [fp, #-16]
   14624:	str	r2, [r3]
   14628:	ldr	r3, [fp, #-16]
   1462c:	ldr	r3, [r3]
   14630:	cmp	r3, #0
   14634:	bne	14640 <flatcc_builder_default_alloc@@Base+0x834>
   14638:	mvn	r3, #0
   1463c:	b	14644 <flatcc_builder_default_alloc@@Base+0x838>
   14640:	mov	r3, #0
   14644:	mov	r0, r3
   14648:	sub	sp, fp, #4
   1464c:	pop	{fp, pc}
   14650:	push	{r4, fp, lr}
   14654:	add	fp, sp, #8
   14658:	sub	sp, sp, #36	; 0x24
   1465c:	str	r0, [fp, #-32]	; 0xffffffe0
   14660:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14664:	add	r3, r3, #52	; 0x34
   14668:	add	r3, r3, #40	; 0x28
   1466c:	str	r3, [fp, #-24]	; 0xffffffe8
   14670:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14674:	ldr	r3, [r3, #124]	; 0x7c
   14678:	cmp	r3, #0
   1467c:	beq	146a0 <flatcc_builder_default_alloc@@Base+0x894>
   14680:	ldr	r3, [pc, #280]	; 147a0 <flatcc_builder_default_alloc@@Base+0x994>
   14684:	add	r3, pc, r3
   14688:	ldr	r2, [pc, #276]	; 147a4 <flatcc_builder_default_alloc@@Base+0x998>
   1468c:	ldr	r1, [pc, #276]	; 147a8 <flatcc_builder_default_alloc@@Base+0x99c>
   14690:	add	r1, pc, r1
   14694:	ldr	r0, [pc, #272]	; 147ac <flatcc_builder_default_alloc@@Base+0x9a0>
   14698:	add	r0, pc, r0
   1469c:	bl	1234c <__assert_fail@plt>
   146a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   146a4:	ldr	r2, [r3, #124]	; 0x7c
   146a8:	mov	r3, #0
   146ac:	str	r3, [sp]
   146b0:	mov	r3, #16
   146b4:	mov	r1, #6
   146b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   146bc:	bl	1446c <flatcc_builder_default_alloc@@Base+0x660>
   146c0:	mov	r3, r0
   146c4:	cmp	r3, #0
   146c8:	bne	146d4 <flatcc_builder_default_alloc@@Base+0x8c8>
   146cc:	mvn	r3, #0
   146d0:	b	14794 <flatcc_builder_default_alloc@@Base+0x988>
   146d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   146d8:	mov	r2, #16
   146dc:	str	r2, [r3, #124]	; 0x7c
   146e0:	mov	r3, #256	; 0x100
   146e4:	str	r3, [fp, #-16]
   146e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   146ec:	ldr	r4, [r3, #48]	; 0x30
   146f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   146f4:	ldr	r0, [r3, #40]	; 0x28
   146f8:	mov	r3, #5
   146fc:	str	r3, [sp]
   14700:	mov	r3, #1
   14704:	ldr	r2, [fp, #-16]
   14708:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1470c:	blx	r4
   14710:	mov	r3, r0
   14714:	cmp	r3, #0
   14718:	beq	14730 <flatcc_builder_default_alloc@@Base+0x924>
   1471c:	mvn	r3, #0
   14720:	b	14794 <flatcc_builder_default_alloc@@Base+0x988>
   14724:	ldr	r3, [fp, #-16]
   14728:	lsl	r3, r3, #1
   1472c:	str	r3, [fp, #-16]
   14730:	ldr	r3, [fp, #-16]
   14734:	lsl	r2, r3, #1
   14738:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1473c:	ldr	r3, [r3, #4]
   14740:	cmp	r2, r3
   14744:	bls	14724 <flatcc_builder_default_alloc@@Base+0x918>
   14748:	ldr	r3, [fp, #-16]
   1474c:	lsr	r3, r3, #2
   14750:	str	r3, [fp, #-16]
   14754:	mov	r3, #0
   14758:	str	r3, [fp, #-20]	; 0xffffffec
   1475c:	b	1476c <flatcc_builder_default_alloc@@Base+0x960>
   14760:	ldr	r3, [fp, #-20]	; 0xffffffec
   14764:	add	r3, r3, #1
   14768:	str	r3, [fp, #-20]	; 0xffffffec
   1476c:	mov	r2, #1
   14770:	ldr	r3, [fp, #-20]	; 0xffffffec
   14774:	lsl	r2, r2, r3
   14778:	ldr	r3, [fp, #-16]
   1477c:	cmp	r2, r3
   14780:	bcc	14760 <flatcc_builder_default_alloc@@Base+0x954>
   14784:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14788:	ldr	r2, [fp, #-20]	; 0xffffffec
   1478c:	str	r2, [r3, #116]	; 0x74
   14790:	mov	r3, #0
   14794:	mov	r0, r3
   14798:	sub	sp, fp, #8
   1479c:	pop	{r4, fp, pc}
   147a0:	andeq	r9, r0, r8, ror r0
   147a4:	andeq	r0, r0, r6, asr r1
   147a8:	andeq	r8, r0, r4, asr #24
   147ac:	andeq	r8, r0, r0, lsr #25
   147b0:	push	{fp, lr}
   147b4:	add	fp, sp, #4
   147b8:	sub	sp, sp, #16
   147bc:	str	r0, [fp, #-16]
   147c0:	str	r1, [fp, #-20]	; 0xffffffec
   147c4:	ldr	r3, [fp, #-16]
   147c8:	ldr	r3, [r3, #116]	; 0x74
   147cc:	cmp	r3, #0
   147d0:	bne	147f0 <flatcc_builder_default_alloc@@Base+0x9e4>
   147d4:	ldr	r0, [fp, #-16]
   147d8:	bl	14650 <flatcc_builder_default_alloc@@Base+0x844>
   147dc:	mov	r3, r0
   147e0:	cmp	r3, #0
   147e4:	beq	147f0 <flatcc_builder_default_alloc@@Base+0x9e4>
   147e8:	mov	r3, #0
   147ec:	b	1481c <flatcc_builder_default_alloc@@Base+0xa10>
   147f0:	ldr	r3, [fp, #-16]
   147f4:	ldr	r3, [r3, #92]	; 0x5c
   147f8:	str	r3, [fp, #-8]
   147fc:	ldr	r3, [fp, #-16]
   14800:	ldr	r3, [r3, #116]	; 0x74
   14804:	rsb	r3, r3, #32
   14808:	ldr	r2, [fp, #-20]	; 0xffffffec
   1480c:	lsr	r3, r2, r3
   14810:	lsl	r3, r3, #2
   14814:	ldr	r2, [fp, #-8]
   14818:	add	r3, r2, r3
   1481c:	mov	r0, r3
   14820:	sub	sp, fp, #4
   14824:	pop	{fp, pc}

00014828 <flatcc_builder_flush_vtable_cache@@Base>:
   14828:	push	{fp, lr}
   1482c:	add	fp, sp, #4
   14830:	sub	sp, sp, #16
   14834:	str	r0, [fp, #-16]
   14838:	ldr	r3, [fp, #-16]
   1483c:	add	r3, r3, #52	; 0x34
   14840:	add	r3, r3, #40	; 0x28
   14844:	str	r3, [fp, #-8]
   14848:	ldr	r3, [fp, #-16]
   1484c:	ldr	r3, [r3, #116]	; 0x74
   14850:	cmp	r3, #0
   14854:	beq	14890 <flatcc_builder_flush_vtable_cache@@Base+0x68>
   14858:	ldr	r3, [fp, #-8]
   1485c:	ldr	r0, [r3]
   14860:	ldr	r3, [fp, #-8]
   14864:	ldr	r3, [r3, #4]
   14868:	mov	r2, r3
   1486c:	mov	r1, #0
   14870:	bl	1231c <memset@plt>
   14874:	ldr	r3, [fp, #-16]
   14878:	mov	r2, #16
   1487c:	str	r2, [r3, #124]	; 0x7c
   14880:	ldr	r3, [fp, #-16]
   14884:	mov	r2, #0
   14888:	str	r2, [r3, #120]	; 0x78
   1488c:	b	14894 <flatcc_builder_flush_vtable_cache@@Base+0x6c>
   14890:	nop			; (mov r0, r0)
   14894:	sub	sp, fp, #4
   14898:	pop	{fp, pc}

0001489c <flatcc_builder_custom_init@@Base>:
   1489c:	push	{r4, fp, lr}
   148a0:	add	fp, sp, #8
   148a4:	sub	sp, sp, #20
   148a8:	str	r0, [fp, #-16]
   148ac:	str	r1, [fp, #-20]	; 0xffffffec
   148b0:	str	r2, [fp, #-24]	; 0xffffffe8
   148b4:	str	r3, [fp, #-28]	; 0xffffffe4
   148b8:	ldr	r4, [pc, #152]	; 14958 <flatcc_builder_custom_init@@Base+0xbc>
   148bc:	add	r4, pc, r4
   148c0:	mov	r2, #232	; 0xe8
   148c4:	mov	r1, #0
   148c8:	ldr	r0, [fp, #-16]
   148cc:	bl	1231c <memset@plt>
   148d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   148d4:	cmp	r3, #0
   148d8:	bne	14900 <flatcc_builder_custom_init@@Base+0x64>
   148dc:	ldr	r3, [fp, #-16]
   148e0:	mov	r2, #1
   148e4:	str	r2, [r3, #184]	; 0xb8
   148e8:	ldr	r3, [pc, #108]	; 1495c <flatcc_builder_custom_init@@Base+0xc0>
   148ec:	ldr	r3, [r4, r3]
   148f0:	str	r3, [fp, #-20]	; 0xffffffec
   148f4:	ldr	r3, [fp, #-16]
   148f8:	add	r3, r3, #188	; 0xbc
   148fc:	str	r3, [fp, #-24]	; 0xffffffe8
   14900:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14904:	cmp	r3, #0
   14908:	bne	14918 <flatcc_builder_custom_init@@Base+0x7c>
   1490c:	ldr	r3, [pc, #76]	; 14960 <flatcc_builder_custom_init@@Base+0xc4>
   14910:	ldr	r3, [r4, r3]
   14914:	str	r3, [fp, #-28]	; 0xffffffe4
   14918:	ldr	r3, [fp, #-16]
   1491c:	ldr	r2, [fp, #4]
   14920:	str	r2, [r3, #40]	; 0x28
   14924:	ldr	r3, [fp, #-16]
   14928:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1492c:	str	r2, [r3, #48]	; 0x30
   14930:	ldr	r3, [fp, #-16]
   14934:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14938:	str	r2, [r3, #36]	; 0x24
   1493c:	ldr	r3, [fp, #-16]
   14940:	ldr	r2, [fp, #-20]	; 0xffffffec
   14944:	str	r2, [r3, #44]	; 0x2c
   14948:	mov	r3, #0
   1494c:	mov	r0, r3
   14950:	sub	sp, fp, #8
   14954:	pop	{r4, fp, pc}
   14958:	andeq	sl, r1, ip, lsr r7
   1495c:	andeq	r0, r0, r0, asr r0
   14960:	andeq	r0, r0, ip, asr #32

00014964 <flatcc_builder_init@@Base>:
   14964:	push	{fp, lr}
   14968:	add	fp, sp, #4
   1496c:	sub	sp, sp, #16
   14970:	str	r0, [fp, #-8]
   14974:	mov	r3, #0
   14978:	str	r3, [sp]
   1497c:	mov	r3, #0
   14980:	mov	r2, #0
   14984:	mov	r1, #0
   14988:	ldr	r0, [fp, #-8]
   1498c:	bl	1489c <flatcc_builder_custom_init@@Base>
   14990:	mov	r3, r0
   14994:	mov	r0, r3
   14998:	sub	sp, fp, #4
   1499c:	pop	{fp, pc}

000149a0 <flatcc_builder_custom_reset@@Base>:
   149a0:	push	{r4, fp, lr}
   149a4:	add	fp, sp, #8
   149a8:	sub	sp, sp, #36	; 0x24
   149ac:	str	r0, [fp, #-24]	; 0xffffffe8
   149b0:	str	r1, [fp, #-28]	; 0xffffffe4
   149b4:	str	r2, [fp, #-32]	; 0xffffffe0
   149b8:	mov	r3, #0
   149bc:	str	r3, [fp, #-16]
   149c0:	b	14a9c <flatcc_builder_custom_reset@@Base+0xfc>
   149c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   149c8:	add	r2, r3, #52	; 0x34
   149cc:	ldr	r3, [fp, #-16]
   149d0:	lsl	r3, r3, #3
   149d4:	add	r3, r2, r3
   149d8:	str	r3, [fp, #-20]	; 0xffffffec
   149dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   149e0:	ldr	r3, [r3]
   149e4:	cmp	r3, #0
   149e8:	beq	14a60 <flatcc_builder_custom_reset@@Base+0xc0>
   149ec:	ldr	r3, [fp, #-16]
   149f0:	cmp	r3, #5
   149f4:	beq	14a40 <flatcc_builder_custom_reset@@Base+0xa0>
   149f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   149fc:	cmp	r3, #0
   14a00:	beq	14a40 <flatcc_builder_custom_reset@@Base+0xa0>
   14a04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a08:	ldr	r4, [r3, #48]	; 0x30
   14a0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a10:	ldr	r0, [r3, #40]	; 0x28
   14a14:	ldr	r3, [fp, #-16]
   14a18:	str	r3, [sp]
   14a1c:	mov	r3, #1
   14a20:	mov	r2, #1
   14a24:	ldr	r1, [fp, #-20]	; 0xffffffec
   14a28:	blx	r4
   14a2c:	mov	r3, r0
   14a30:	cmp	r3, #0
   14a34:	beq	14a40 <flatcc_builder_custom_reset@@Base+0xa0>
   14a38:	mvn	r3, #0
   14a3c:	b	14bcc <flatcc_builder_custom_reset@@Base+0x22c>
   14a40:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a44:	ldr	r0, [r3]
   14a48:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a4c:	ldr	r3, [r3, #4]
   14a50:	mov	r2, r3
   14a54:	mov	r1, #0
   14a58:	bl	1231c <memset@plt>
   14a5c:	b	14a90 <flatcc_builder_custom_reset@@Base+0xf0>
   14a60:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a64:	ldr	r3, [r3, #4]
   14a68:	cmp	r3, #0
   14a6c:	beq	14a90 <flatcc_builder_custom_reset@@Base+0xf0>
   14a70:	ldr	r3, [pc, #352]	; 14bd8 <flatcc_builder_custom_reset@@Base+0x238>
   14a74:	add	r3, pc, r3
   14a78:	ldr	r2, [pc, #348]	; 14bdc <flatcc_builder_custom_reset@@Base+0x23c>
   14a7c:	ldr	r1, [pc, #348]	; 14be0 <flatcc_builder_custom_reset@@Base+0x240>
   14a80:	add	r1, pc, r1
   14a84:	ldr	r0, [pc, #344]	; 14be4 <flatcc_builder_custom_reset@@Base+0x244>
   14a88:	add	r0, pc, r0
   14a8c:	bl	1234c <__assert_fail@plt>
   14a90:	ldr	r3, [fp, #-16]
   14a94:	add	r3, r3, #1
   14a98:	str	r3, [fp, #-16]
   14a9c:	ldr	r3, [fp, #-16]
   14aa0:	cmp	r3, #7
   14aa4:	ble	149c4 <flatcc_builder_custom_reset@@Base+0x24>
   14aa8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14aac:	mov	r2, #0
   14ab0:	str	r2, [r3, #120]	; 0x78
   14ab4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ab8:	ldr	r3, [r3, #124]	; 0x7c
   14abc:	cmp	r3, #0
   14ac0:	beq	14ad0 <flatcc_builder_custom_reset@@Base+0x130>
   14ac4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ac8:	mov	r2, #16
   14acc:	str	r2, [r3, #124]	; 0x7c
   14ad0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ad4:	mov	r2, #0
   14ad8:	strh	r2, [r3, #128]	; 0x80
   14adc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ae0:	mov	r2, #0
   14ae4:	str	r2, [r3, #136]	; 0x88
   14ae8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14aec:	mov	r2, #0
   14af0:	str	r2, [r3, #140]	; 0x8c
   14af4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14af8:	mov	r2, #0
   14afc:	str	r2, [r3, #156]	; 0x9c
   14b00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b04:	mov	r2, #0
   14b08:	str	r2, [r3, #160]	; 0xa0
   14b0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b10:	mov	r2, #0
   14b14:	str	r2, [r3, #20]
   14b18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b1c:	mov	r2, #0
   14b20:	str	r2, [r3, #24]
   14b24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b28:	mov	r2, #0
   14b2c:	str	r2, [r3, #148]	; 0x94
   14b30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b34:	mov	r2, #0
   14b38:	str	r2, [r3, #152]	; 0x98
   14b3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b40:	ldr	r2, [r3, #60]	; 0x3c
   14b44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b48:	str	r2, [r3, #16]
   14b4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b50:	ldr	r2, [r3, #76]	; 0x4c
   14b54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b58:	str	r2, [r3]
   14b5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b60:	ldr	r2, [r3, #52]	; 0x34
   14b64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b68:	str	r2, [r3, #4]
   14b6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b70:	mov	r2, #0
   14b74:	str	r2, [r3, #32]
   14b78:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14b7c:	cmp	r3, #0
   14b80:	beq	14ba8 <flatcc_builder_custom_reset@@Base+0x208>
   14b84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b88:	mov	r2, #0
   14b8c:	str	r2, [r3, #172]	; 0xac
   14b90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b94:	mov	r2, #0
   14b98:	str	r2, [r3, #176]	; 0xb0
   14b9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ba0:	mov	r2, #0
   14ba4:	str	r2, [r3, #180]	; 0xb4
   14ba8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14bac:	ldr	r3, [r3, #184]	; 0xb8
   14bb0:	cmp	r3, #0
   14bb4:	beq	14bc8 <flatcc_builder_custom_reset@@Base+0x228>
   14bb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14bbc:	add	r3, r3, #188	; 0xbc
   14bc0:	mov	r0, r3
   14bc4:	bl	1a4c4 <flatcc_emitter_reset@@Base>
   14bc8:	mov	r3, #0
   14bcc:	mov	r0, r3
   14bd0:	sub	sp, fp, #8
   14bd4:	pop	{r4, fp, pc}
   14bd8:	andeq	r8, r0, r4, lsr #25
   14bdc:			; <UNDEFINED> instruction: 0x000001b2
   14be0:	andeq	r8, r0, r4, asr r8
   14be4:	andeq	r8, r0, r0, asr #17

00014be8 <flatcc_builder_reset@@Base>:
   14be8:	push	{fp, lr}
   14bec:	add	fp, sp, #4
   14bf0:	sub	sp, sp, #8
   14bf4:	str	r0, [fp, #-8]
   14bf8:	mov	r2, #0
   14bfc:	mov	r1, #0
   14c00:	ldr	r0, [fp, #-8]
   14c04:	bl	149a0 <flatcc_builder_custom_reset@@Base>
   14c08:	mov	r3, r0
   14c0c:	mov	r0, r3
   14c10:	sub	sp, fp, #4
   14c14:	pop	{fp, pc}

00014c18 <flatcc_builder_clear@@Base>:
   14c18:	push	{r4, fp, lr}
   14c1c:	add	fp, sp, #8
   14c20:	sub	sp, sp, #28
   14c24:	str	r0, [fp, #-24]	; 0xffffffe8
   14c28:	mov	r3, #0
   14c2c:	str	r3, [fp, #-16]
   14c30:	b	14c80 <flatcc_builder_clear@@Base+0x68>
   14c34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c38:	add	r2, r3, #52	; 0x34
   14c3c:	ldr	r3, [fp, #-16]
   14c40:	lsl	r3, r3, #3
   14c44:	add	r3, r2, r3
   14c48:	str	r3, [fp, #-20]	; 0xffffffec
   14c4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c50:	ldr	r4, [r3, #48]	; 0x30
   14c54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c58:	ldr	r0, [r3, #40]	; 0x28
   14c5c:	ldr	r3, [fp, #-16]
   14c60:	str	r3, [sp]
   14c64:	mov	r3, #0
   14c68:	mov	r2, #0
   14c6c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14c70:	blx	r4
   14c74:	ldr	r3, [fp, #-16]
   14c78:	add	r3, r3, #1
   14c7c:	str	r3, [fp, #-16]
   14c80:	ldr	r3, [fp, #-16]
   14c84:	cmp	r3, #7
   14c88:	ble	14c34 <flatcc_builder_clear@@Base+0x1c>
   14c8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c90:	ldr	r3, [r3, #184]	; 0xb8
   14c94:	cmp	r3, #0
   14c98:	beq	14cac <flatcc_builder_clear@@Base+0x94>
   14c9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ca0:	add	r3, r3, #188	; 0xbc
   14ca4:	mov	r0, r3
   14ca8:	bl	1a650 <flatcc_emitter_clear@@Base>
   14cac:	mov	r2, #232	; 0xe8
   14cb0:	mov	r1, #0
   14cb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14cb8:	bl	1231c <memset@plt>
   14cbc:	nop			; (mov r0, r0)
   14cc0:	sub	sp, fp, #8
   14cc4:	pop	{r4, fp, pc}
   14cc8:	push	{fp}		; (str fp, [sp, #-4]!)
   14ccc:	add	fp, sp, #0
   14cd0:	sub	sp, sp, #12
   14cd4:	str	r0, [fp, #-8]
   14cd8:	mov	r3, r1
   14cdc:	strh	r3, [fp, #-10]
   14ce0:	ldr	r3, [fp, #-8]
   14ce4:	ldrh	r3, [r3, #128]	; 0x80
   14ce8:	ldrh	r2, [fp, #-10]
   14cec:	cmp	r2, r3
   14cf0:	bls	14d00 <flatcc_builder_clear@@Base+0xe8>
   14cf4:	ldr	r3, [fp, #-8]
   14cf8:	ldrh	r2, [fp, #-10]
   14cfc:	strh	r2, [r3, #128]	; 0x80
   14d00:	nop			; (mov r0, r0)
   14d04:	add	sp, fp, #0
   14d08:	pop	{fp}		; (ldr fp, [sp], #4)
   14d0c:	bx	lr
   14d10:	push	{fp}		; (str fp, [sp, #-4]!)
   14d14:	add	fp, sp, #0
   14d18:	sub	sp, sp, #12
   14d1c:	str	r0, [fp, #-8]
   14d20:	mov	r3, r1
   14d24:	strh	r3, [fp, #-10]
   14d28:	ldr	r3, [fp, #-8]
   14d2c:	ldrh	r3, [r3]
   14d30:	ldrh	r2, [fp, #-10]
   14d34:	cmp	r2, r3
   14d38:	bls	14d48 <flatcc_builder_clear@@Base+0x130>
   14d3c:	ldr	r3, [fp, #-8]
   14d40:	ldrh	r2, [fp, #-10]
   14d44:	strh	r2, [r3]
   14d48:	nop			; (mov r0, r0)
   14d4c:	add	sp, fp, #0
   14d50:	pop	{fp}		; (ldr fp, [sp], #4)
   14d54:	bx	lr

00014d58 <flatcc_builder_enter_user_frame_ptr@@Base>:
   14d58:	push	{fp, lr}
   14d5c:	add	fp, sp, #4
   14d60:	sub	sp, sp, #24
   14d64:	str	r0, [fp, #-16]
   14d68:	str	r1, [fp, #-20]	; 0xffffffec
   14d6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d70:	add	r3, r3, #3
   14d74:	bic	r3, r3, #3
   14d78:	add	r3, r3, #4
   14d7c:	str	r3, [fp, #-20]	; 0xffffffec
   14d80:	ldr	r3, [fp, #-16]
   14d84:	ldr	r2, [r3, #228]	; 0xe4
   14d88:	mov	r3, #0
   14d8c:	str	r3, [sp]
   14d90:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d94:	mov	r1, #7
   14d98:	ldr	r0, [fp, #-16]
   14d9c:	bl	1446c <flatcc_builder_default_alloc@@Base+0x660>
   14da0:	str	r0, [fp, #-8]
   14da4:	ldr	r3, [fp, #-8]
   14da8:	cmp	r3, #0
   14dac:	bne	14db8 <flatcc_builder_enter_user_frame_ptr@@Base+0x60>
   14db0:	mov	r3, #0
   14db4:	b	14e10 <flatcc_builder_enter_user_frame_ptr@@Base+0xb8>
   14db8:	ldr	r2, [fp, #-20]	; 0xffffffec
   14dbc:	mov	r1, #0
   14dc0:	ldr	r0, [fp, #-8]
   14dc4:	bl	1231c <memset@plt>
   14dc8:	ldr	r3, [fp, #-8]
   14dcc:	add	r2, r3, #4
   14dd0:	str	r2, [fp, #-8]
   14dd4:	ldr	r2, [fp, #-16]
   14dd8:	ldr	r2, [r2, #224]	; 0xe0
   14ddc:	str	r2, [r3]
   14de0:	ldr	r3, [fp, #-16]
   14de4:	ldr	r3, [r3, #228]	; 0xe4
   14de8:	add	r2, r3, #4
   14dec:	ldr	r3, [fp, #-16]
   14df0:	str	r2, [r3, #224]	; 0xe0
   14df4:	ldr	r3, [fp, #-16]
   14df8:	ldr	r2, [r3, #228]	; 0xe4
   14dfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e00:	add	r2, r2, r3
   14e04:	ldr	r3, [fp, #-16]
   14e08:	str	r2, [r3, #228]	; 0xe4
   14e0c:	ldr	r3, [fp, #-8]
   14e10:	mov	r0, r3
   14e14:	sub	sp, fp, #4
   14e18:	pop	{fp, pc}

00014e1c <flatcc_builder_enter_user_frame@@Base>:
   14e1c:	push	{fp, lr}
   14e20:	add	fp, sp, #4
   14e24:	sub	sp, sp, #24
   14e28:	str	r0, [fp, #-16]
   14e2c:	str	r1, [fp, #-20]	; 0xffffffec
   14e30:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e34:	add	r3, r3, #3
   14e38:	bic	r3, r3, #3
   14e3c:	add	r3, r3, #4
   14e40:	str	r3, [fp, #-20]	; 0xffffffec
   14e44:	ldr	r3, [fp, #-16]
   14e48:	ldr	r2, [r3, #228]	; 0xe4
   14e4c:	mov	r3, #0
   14e50:	str	r3, [sp]
   14e54:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e58:	mov	r1, #7
   14e5c:	ldr	r0, [fp, #-16]
   14e60:	bl	1446c <flatcc_builder_default_alloc@@Base+0x660>
   14e64:	str	r0, [fp, #-8]
   14e68:	ldr	r3, [fp, #-8]
   14e6c:	cmp	r3, #0
   14e70:	bne	14e7c <flatcc_builder_enter_user_frame@@Base+0x60>
   14e74:	mov	r3, #0
   14e78:	b	14ed8 <flatcc_builder_enter_user_frame@@Base+0xbc>
   14e7c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14e80:	mov	r1, #0
   14e84:	ldr	r0, [fp, #-8]
   14e88:	bl	1231c <memset@plt>
   14e8c:	ldr	r3, [fp, #-8]
   14e90:	add	r2, r3, #4
   14e94:	str	r2, [fp, #-8]
   14e98:	ldr	r2, [fp, #-16]
   14e9c:	ldr	r2, [r2, #224]	; 0xe0
   14ea0:	str	r2, [r3]
   14ea4:	ldr	r3, [fp, #-16]
   14ea8:	ldr	r3, [r3, #228]	; 0xe4
   14eac:	add	r2, r3, #4
   14eb0:	ldr	r3, [fp, #-16]
   14eb4:	str	r2, [r3, #224]	; 0xe0
   14eb8:	ldr	r3, [fp, #-16]
   14ebc:	ldr	r2, [r3, #228]	; 0xe4
   14ec0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ec4:	add	r2, r2, r3
   14ec8:	ldr	r3, [fp, #-16]
   14ecc:	str	r2, [r3, #228]	; 0xe4
   14ed0:	ldr	r3, [fp, #-16]
   14ed4:	ldr	r3, [r3, #224]	; 0xe0
   14ed8:	mov	r0, r3
   14edc:	sub	sp, fp, #4
   14ee0:	pop	{fp, pc}

00014ee4 <flatcc_builder_exit_user_frame@@Base>:
   14ee4:	push	{fp, lr}
   14ee8:	add	fp, sp, #4
   14eec:	sub	sp, sp, #16
   14ef0:	str	r0, [fp, #-16]
   14ef4:	ldr	r3, [fp, #-16]
   14ef8:	ldr	r3, [r3, #224]	; 0xe0
   14efc:	cmp	r3, #0
   14f00:	bne	14f24 <flatcc_builder_exit_user_frame@@Base+0x40>
   14f04:	ldr	r3, [pc, #104]	; 14f74 <flatcc_builder_exit_user_frame@@Base+0x90>
   14f08:	add	r3, pc, r3
   14f0c:	ldr	r2, [pc, #100]	; 14f78 <flatcc_builder_exit_user_frame@@Base+0x94>
   14f10:	ldr	r1, [pc, #100]	; 14f7c <flatcc_builder_exit_user_frame@@Base+0x98>
   14f14:	add	r1, pc, r1
   14f18:	ldr	r0, [pc, #96]	; 14f80 <flatcc_builder_exit_user_frame@@Base+0x9c>
   14f1c:	add	r0, pc, r0
   14f20:	bl	1234c <__assert_fail@plt>
   14f24:	ldr	r3, [fp, #-16]
   14f28:	ldr	r2, [r3, #108]	; 0x6c
   14f2c:	ldr	r3, [fp, #-16]
   14f30:	ldr	r3, [r3, #224]	; 0xe0
   14f34:	add	r3, r2, r3
   14f38:	str	r3, [fp, #-8]
   14f3c:	ldr	r3, [fp, #-16]
   14f40:	ldr	r3, [r3, #224]	; 0xe0
   14f44:	sub	r2, r3, #4
   14f48:	ldr	r3, [fp, #-16]
   14f4c:	str	r2, [r3, #228]	; 0xe4
   14f50:	ldr	r3, [fp, #-8]
   14f54:	ldr	r2, [r3, #-4]
   14f58:	ldr	r3, [fp, #-16]
   14f5c:	str	r2, [r3, #224]	; 0xe0
   14f60:	ldr	r3, [fp, #-16]
   14f64:	ldr	r3, [r3, #224]	; 0xe0
   14f68:	mov	r0, r3
   14f6c:	sub	sp, fp, #4
   14f70:	pop	{fp, pc}
   14f74:	andeq	r8, r0, ip, lsr #16
   14f78:	andeq	r0, r0, lr, lsl r2
   14f7c:	andeq	r8, r0, r0, asr #7
   14f80:	andeq	r8, r0, r0, asr #8

00014f84 <flatcc_builder_exit_user_frame_at@@Base>:
   14f84:	push	{fp, lr}
   14f88:	add	fp, sp, #4
   14f8c:	sub	sp, sp, #8
   14f90:	str	r0, [fp, #-8]
   14f94:	str	r1, [fp, #-12]
   14f98:	ldr	r3, [fp, #-8]
   14f9c:	ldr	r2, [r3, #224]	; 0xe0
   14fa0:	ldr	r3, [fp, #-12]
   14fa4:	cmp	r2, r3
   14fa8:	bcs	14fcc <flatcc_builder_exit_user_frame_at@@Base+0x48>
   14fac:	ldr	r3, [pc, #60]	; 14ff0 <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   14fb0:	add	r3, pc, r3
   14fb4:	ldr	r2, [pc, #56]	; 14ff4 <flatcc_builder_exit_user_frame_at@@Base+0x70>
   14fb8:	ldr	r1, [pc, #56]	; 14ff8 <flatcc_builder_exit_user_frame_at@@Base+0x74>
   14fbc:	add	r1, pc, r1
   14fc0:	ldr	r0, [pc, #52]	; 14ffc <flatcc_builder_exit_user_frame_at@@Base+0x78>
   14fc4:	add	r0, pc, r0
   14fc8:	bl	1234c <__assert_fail@plt>
   14fcc:	ldr	r3, [fp, #-8]
   14fd0:	ldr	r2, [fp, #-12]
   14fd4:	str	r2, [r3, #224]	; 0xe0
   14fd8:	ldr	r0, [fp, #-8]
   14fdc:	bl	14ee4 <flatcc_builder_exit_user_frame@@Base>
   14fe0:	mov	r3, r0
   14fe4:	mov	r0, r3
   14fe8:	sub	sp, fp, #4
   14fec:	pop	{fp, pc}
   14ff0:	andeq	r8, r0, r4, lsr #15
   14ff4:	andeq	r0, r0, r7, lsr #4
   14ff8:	andeq	r8, r0, r8, lsl r3
   14ffc:			; <UNDEFINED> instruction: 0x000083b4

00015000 <flatcc_builder_get_current_user_frame@@Base>:
   15000:	push	{fp}		; (str fp, [sp, #-4]!)
   15004:	add	fp, sp, #0
   15008:	sub	sp, sp, #12
   1500c:	str	r0, [fp, #-8]
   15010:	ldr	r3, [fp, #-8]
   15014:	ldr	r3, [r3, #224]	; 0xe0
   15018:	mov	r0, r3
   1501c:	add	sp, fp, #0
   15020:	pop	{fp}		; (ldr fp, [sp], #4)
   15024:	bx	lr

00015028 <flatcc_builder_get_user_frame_ptr@@Base>:
   15028:	push	{fp}		; (str fp, [sp, #-4]!)
   1502c:	add	fp, sp, #0
   15030:	sub	sp, sp, #12
   15034:	str	r0, [fp, #-8]
   15038:	str	r1, [fp, #-12]
   1503c:	ldr	r3, [fp, #-8]
   15040:	ldr	r2, [r3, #108]	; 0x6c
   15044:	ldr	r3, [fp, #-12]
   15048:	add	r3, r2, r3
   1504c:	mov	r0, r3
   15050:	add	sp, fp, #0
   15054:	pop	{fp}		; (ldr fp, [sp], #4)
   15058:	bx	lr
   1505c:	push	{fp, lr}
   15060:	add	fp, sp, #4
   15064:	sub	sp, sp, #16
   15068:	str	r0, [fp, #-8]
   1506c:	mov	r3, r1
   15070:	strh	r3, [fp, #-10]
   15074:	ldr	r3, [fp, #-8]
   15078:	ldr	r3, [r3, #156]	; 0x9c
   1507c:	add	r2, r3, #1
   15080:	ldr	r3, [fp, #-8]
   15084:	str	r2, [r3, #156]	; 0x9c
   15088:	ldr	r3, [fp, #-8]
   1508c:	ldr	r2, [r3, #156]	; 0x9c
   15090:	ldr	r3, [fp, #-8]
   15094:	ldr	r3, [r3, #160]	; 0xa0
   15098:	cmp	r2, r3
   1509c:	ble	1518c <flatcc_builder_get_user_frame_ptr@@Base+0x164>
   150a0:	ldr	r3, [fp, #-8]
   150a4:	ldr	r3, [r3, #176]	; 0xb0
   150a8:	cmp	r3, #0
   150ac:	ble	150d0 <flatcc_builder_get_user_frame_ptr@@Base+0xa8>
   150b0:	ldr	r3, [fp, #-8]
   150b4:	ldr	r2, [r3, #156]	; 0x9c
   150b8:	ldr	r3, [fp, #-8]
   150bc:	ldr	r3, [r3, #176]	; 0xb0
   150c0:	cmp	r2, r3
   150c4:	ble	150d0 <flatcc_builder_get_user_frame_ptr@@Base+0xa8>
   150c8:	mvn	r3, #0
   150cc:	b	1522c <flatcc_builder_get_user_frame_ptr@@Base+0x204>
   150d0:	ldr	r3, [fp, #-8]
   150d4:	ldr	r3, [r3, #156]	; 0x9c
   150d8:	sub	r3, r3, #1
   150dc:	mov	r2, r3
   150e0:	mov	r3, r2
   150e4:	lsl	r3, r3, #3
   150e8:	add	r3, r3, r2
   150ec:	lsl	r3, r3, #2
   150f0:	mov	r2, r3
   150f4:	mov	r3, #0
   150f8:	str	r3, [sp]
   150fc:	mov	r3, #36	; 0x24
   15100:	mov	r1, #4
   15104:	ldr	r0, [fp, #-8]
   15108:	bl	1446c <flatcc_builder_default_alloc@@Base+0x660>
   1510c:	mov	r2, r0
   15110:	ldr	r3, [fp, #-8]
   15114:	str	r2, [r3, #32]
   15118:	ldr	r3, [fp, #-8]
   1511c:	ldr	r3, [r3, #32]
   15120:	cmp	r3, #0
   15124:	bne	15130 <flatcc_builder_get_user_frame_ptr@@Base+0x108>
   15128:	mvn	r3, #0
   1512c:	b	1522c <flatcc_builder_get_user_frame_ptr@@Base+0x204>
   15130:	ldr	r3, [fp, #-8]
   15134:	ldr	r3, [r3, #88]	; 0x58
   15138:	ldr	r2, [pc, #248]	; 15238 <flatcc_builder_get_user_frame_ptr@@Base+0x210>
   1513c:	umull	r2, r3, r2, r3
   15140:	lsr	r3, r3, #3
   15144:	mov	r2, r3
   15148:	ldr	r3, [fp, #-8]
   1514c:	str	r2, [r3, #160]	; 0xa0
   15150:	ldr	r3, [fp, #-8]
   15154:	ldr	r3, [r3, #176]	; 0xb0
   15158:	cmp	r3, #0
   1515c:	ble	151a0 <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   15160:	ldr	r3, [fp, #-8]
   15164:	ldr	r2, [r3, #176]	; 0xb0
   15168:	ldr	r3, [fp, #-8]
   1516c:	ldr	r3, [r3, #160]	; 0xa0
   15170:	cmp	r2, r3
   15174:	bge	151a0 <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   15178:	ldr	r3, [fp, #-8]
   1517c:	ldr	r2, [r3, #176]	; 0xb0
   15180:	ldr	r3, [fp, #-8]
   15184:	str	r2, [r3, #160]	; 0xa0
   15188:	b	151a0 <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   1518c:	ldr	r3, [fp, #-8]
   15190:	ldr	r3, [r3, #32]
   15194:	add	r2, r3, #36	; 0x24
   15198:	ldr	r3, [fp, #-8]
   1519c:	str	r2, [r3, #32]
   151a0:	ldr	r3, [fp, #-8]
   151a4:	ldr	r3, [r3, #32]
   151a8:	ldr	r2, [fp, #-8]
   151ac:	ldr	r2, [r2, #20]
   151b0:	str	r2, [r3, #8]
   151b4:	ldr	r3, [fp, #-8]
   151b8:	ldr	r3, [r3, #32]
   151bc:	ldr	r2, [fp, #-8]
   151c0:	ldrh	r2, [r2, #130]	; 0x82
   151c4:	strh	r2, [r3, #12]
   151c8:	ldr	r3, [fp, #-8]
   151cc:	ldrh	r2, [fp, #-10]
   151d0:	strh	r2, [r3, #130]	; 0x82
   151d4:	ldr	r3, [fp, #-8]
   151d8:	ldr	r3, [r3, #32]
   151dc:	ldr	r2, [fp, #-8]
   151e0:	ldr	r2, [r2, #28]
   151e4:	str	r2, [r3]
   151e8:	ldr	r3, [fp, #-8]
   151ec:	ldr	r3, [r3, #32]
   151f0:	mvn	r2, #3
   151f4:	str	r2, [r3, #4]
   151f8:	ldr	r3, [fp, #-8]
   151fc:	ldr	r2, [r3, #28]
   15200:	ldr	r3, [fp, #-8]
   15204:	ldr	r3, [r3, #20]
   15208:	add	r3, r2, r3
   1520c:	add	r3, r3, #7
   15210:	bic	r2, r3, #7
   15214:	ldr	r3, [fp, #-8]
   15218:	str	r2, [r3, #28]
   1521c:	ldr	r3, [fp, #-8]
   15220:	mov	r2, #0
   15224:	str	r2, [r3, #20]
   15228:	mov	r3, #0
   1522c:	mov	r0, r3
   15230:	sub	sp, fp, #4
   15234:	pop	{fp, pc}
   15238:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   1523c:	push	{fp, lr}
   15240:	add	fp, sp, #4
   15244:	sub	sp, sp, #8
   15248:	str	r0, [fp, #-8]
   1524c:	ldr	r3, [fp, #-8]
   15250:	ldr	r0, [r3, #16]
   15254:	ldr	r3, [fp, #-8]
   15258:	ldr	r3, [r3, #20]
   1525c:	mov	r2, r3
   15260:	mov	r1, #0
   15264:	bl	1231c <memset@plt>
   15268:	ldr	r3, [fp, #-8]
   1526c:	ldr	r3, [r3, #32]
   15270:	ldr	r2, [r3, #8]
   15274:	ldr	r3, [fp, #-8]
   15278:	str	r2, [r3, #20]
   1527c:	ldr	r3, [fp, #-8]
   15280:	ldr	r3, [r3, #32]
   15284:	ldr	r2, [r3]
   15288:	ldr	r3, [fp, #-8]
   1528c:	str	r2, [r3, #28]
   15290:	ldr	r3, [fp, #-8]
   15294:	ldr	r3, [r3, #32]
   15298:	ldr	r3, [r3, #4]
   1529c:	mov	r1, r3
   152a0:	ldr	r0, [fp, #-8]
   152a4:	bl	13fd4 <flatcc_builder_default_alloc@@Base+0x1c8>
   152a8:	ldr	r3, [fp, #-8]
   152ac:	ldrh	r3, [r3, #130]	; 0x82
   152b0:	mov	r1, r3
   152b4:	ldr	r0, [fp, #-8]
   152b8:	bl	14cc8 <flatcc_builder_clear@@Base+0xb0>
   152bc:	ldr	r3, [fp, #-8]
   152c0:	ldr	r3, [r3, #32]
   152c4:	ldrh	r2, [r3, #12]
   152c8:	ldr	r3, [fp, #-8]
   152cc:	strh	r2, [r3, #130]	; 0x82
   152d0:	ldr	r3, [fp, #-8]
   152d4:	ldr	r3, [r3, #32]
   152d8:	sub	r2, r3, #36	; 0x24
   152dc:	ldr	r3, [fp, #-8]
   152e0:	str	r2, [r3, #32]
   152e4:	ldr	r3, [fp, #-8]
   152e8:	ldr	r3, [r3, #156]	; 0x9c
   152ec:	sub	r2, r3, #1
   152f0:	ldr	r3, [fp, #-8]
   152f4:	str	r2, [r3, #156]	; 0x9c
   152f8:	nop			; (mov r0, r0)
   152fc:	sub	sp, fp, #4
   15300:	pop	{fp, pc}
   15304:	push	{fp}		; (str fp, [sp, #-4]!)
   15308:	add	fp, sp, #0
   1530c:	sub	sp, sp, #20
   15310:	str	r0, [fp, #-8]
   15314:	str	r1, [fp, #-12]
   15318:	mov	r3, r2
   1531c:	strh	r3, [fp, #-14]
   15320:	ldr	r3, [fp, #-8]
   15324:	ldr	r3, [r3, #136]	; 0x88
   15328:	mov	r2, r3
   1532c:	ldr	r3, [fp, #-12]
   15330:	sub	r3, r2, r3
   15334:	ldrh	r2, [fp, #-14]
   15338:	sub	r2, r2, #1
   1533c:	and	r3, r3, r2
   15340:	mov	r0, r3
   15344:	add	sp, fp, #0
   15348:	pop	{fp}		; (ldr fp, [sp], #4)
   1534c:	bx	lr
   15350:	push	{fp}		; (str fp, [sp, #-4]!)
   15354:	add	fp, sp, #0
   15358:	sub	sp, sp, #12
   1535c:	str	r0, [fp, #-8]
   15360:	mov	r3, r1
   15364:	strh	r3, [fp, #-10]
   15368:	ldr	r3, [fp, #-8]
   1536c:	ldr	r2, [r3, #140]	; 0x8c
   15370:	ldrh	r3, [fp, #-10]
   15374:	sub	r3, r3, #1
   15378:	and	r3, r3, r2
   1537c:	mov	r0, r3
   15380:	add	sp, fp, #0
   15384:	pop	{fp}		; (ldr fp, [sp], #4)
   15388:	bx	lr
   1538c:	push	{r4, fp, lr}
   15390:	add	fp, sp, #8
   15394:	sub	sp, sp, #28
   15398:	str	r0, [fp, #-24]	; 0xffffffe8
   1539c:	str	r1, [fp, #-28]	; 0xffffffe4
   153a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   153a4:	ldr	r3, [r3, #136]	; 0x88
   153a8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   153ac:	ldr	r2, [r2]
   153b0:	sub	r3, r3, r2
   153b4:	str	r3, [fp, #-16]
   153b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   153bc:	ldr	r2, [r3, #136]	; 0x88
   153c0:	ldr	r3, [fp, #-16]
   153c4:	cmp	r2, r3
   153c8:	bgt	153ec <flatcc_builder_get_user_frame_ptr@@Base+0x3c4>
   153cc:	ldr	r3, [pc, #152]	; 1546c <flatcc_builder_get_user_frame_ptr@@Base+0x444>
   153d0:	add	r3, pc, r3
   153d4:	ldr	r2, [pc, #148]	; 15470 <flatcc_builder_get_user_frame_ptr@@Base+0x448>
   153d8:	ldr	r1, [pc, #148]	; 15474 <flatcc_builder_get_user_frame_ptr@@Base+0x44c>
   153dc:	add	r1, pc, r1
   153e0:	ldr	r0, [pc, #144]	; 15478 <flatcc_builder_get_user_frame_ptr@@Base+0x450>
   153e4:	add	r0, pc, r0
   153e8:	bl	1234c <__assert_fail@plt>
   153ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   153f0:	ldr	r4, [r3, #44]	; 0x2c
   153f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   153f8:	ldr	r0, [r3, #36]	; 0x24
   153fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15400:	add	r1, r3, #8
   15404:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15408:	ldr	r2, [r3, #4]
   1540c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15410:	ldr	r3, [r3]
   15414:	str	r3, [sp]
   15418:	ldr	r3, [fp, #-16]
   1541c:	blx	r4
   15420:	mov	r3, r0
   15424:	cmp	r3, #0
   15428:	beq	1544c <flatcc_builder_get_user_frame_ptr@@Base+0x424>
   1542c:	ldr	r3, [pc, #72]	; 1547c <flatcc_builder_get_user_frame_ptr@@Base+0x454>
   15430:	add	r3, pc, r3
   15434:	ldr	r2, [pc, #68]	; 15480 <flatcc_builder_get_user_frame_ptr@@Base+0x458>
   15438:	ldr	r1, [pc, #68]	; 15484 <flatcc_builder_get_user_frame_ptr@@Base+0x45c>
   1543c:	add	r1, pc, r1
   15440:	ldr	r0, [pc, #64]	; 15488 <flatcc_builder_get_user_frame_ptr@@Base+0x460>
   15444:	add	r0, pc, r0
   15448:	bl	1234c <__assert_fail@plt>
   1544c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15450:	ldr	r2, [fp, #-16]
   15454:	str	r2, [r3, #136]	; 0x88
   15458:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1545c:	ldr	r3, [r3, #136]	; 0x88
   15460:	mov	r0, r3
   15464:	sub	sp, fp, #8
   15468:	pop	{r4, fp, pc}
   1546c:	andeq	r8, r0, r4, asr #7
   15470:	andeq	r0, r0, r7, lsl #5
   15474:	strdeq	r7, [r0], -r8
   15478:	andeq	r7, r0, r0, asr pc
   1547c:	andeq	r8, r0, r4, ror #6
   15480:	andeq	r0, r0, fp, lsl #5
   15484:	muleq	r0, r8, lr
   15488:	strdeq	r7, [r0], -r0
   1548c:	push	{r4, fp, lr}
   15490:	add	fp, sp, #8
   15494:	sub	sp, sp, #28
   15498:	str	r0, [fp, #-24]	; 0xffffffe8
   1549c:	str	r1, [fp, #-28]	; 0xffffffe4
   154a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   154a4:	ldr	r3, [r3, #140]	; 0x8c
   154a8:	str	r3, [fp, #-16]
   154ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   154b0:	ldr	r3, [r3]
   154b4:	mov	r2, r3
   154b8:	ldr	r3, [fp, #-16]
   154bc:	add	r2, r2, r3
   154c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   154c4:	str	r2, [r3, #140]	; 0x8c
   154c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   154cc:	ldr	r2, [r3, #140]	; 0x8c
   154d0:	ldr	r3, [fp, #-16]
   154d4:	cmp	r2, r3
   154d8:	bge	154fc <flatcc_builder_get_user_frame_ptr@@Base+0x4d4>
   154dc:	ldr	r3, [pc, #140]	; 15570 <flatcc_builder_get_user_frame_ptr@@Base+0x548>
   154e0:	add	r3, pc, r3
   154e4:	ldr	r2, [pc, #136]	; 15574 <flatcc_builder_get_user_frame_ptr@@Base+0x54c>
   154e8:	ldr	r1, [pc, #136]	; 15578 <flatcc_builder_get_user_frame_ptr@@Base+0x550>
   154ec:	add	r1, pc, r1
   154f0:	ldr	r0, [pc, #132]	; 1557c <flatcc_builder_get_user_frame_ptr@@Base+0x554>
   154f4:	add	r0, pc, r0
   154f8:	bl	1234c <__assert_fail@plt>
   154fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15500:	ldr	r4, [r3, #44]	; 0x2c
   15504:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15508:	ldr	r0, [r3, #36]	; 0x24
   1550c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15510:	add	r1, r3, #8
   15514:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15518:	ldr	r2, [r3, #4]
   1551c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15520:	ldr	r3, [r3]
   15524:	str	r3, [sp]
   15528:	ldr	r3, [fp, #-16]
   1552c:	blx	r4
   15530:	mov	r3, r0
   15534:	cmp	r3, #0
   15538:	beq	1555c <flatcc_builder_get_user_frame_ptr@@Base+0x534>
   1553c:	ldr	r3, [pc, #60]	; 15580 <flatcc_builder_get_user_frame_ptr@@Base+0x558>
   15540:	add	r3, pc, r3
   15544:	ldr	r2, [pc, #56]	; 15584 <flatcc_builder_get_user_frame_ptr@@Base+0x55c>
   15548:	ldr	r1, [pc, #56]	; 15588 <flatcc_builder_get_user_frame_ptr@@Base+0x560>
   1554c:	add	r1, pc, r1
   15550:	ldr	r0, [pc, #52]	; 1558c <flatcc_builder_get_user_frame_ptr@@Base+0x564>
   15554:	add	r0, pc, r0
   15558:	bl	1234c <__assert_fail@plt>
   1555c:	ldr	r3, [fp, #-16]
   15560:	add	r3, r3, #1
   15564:	mov	r0, r3
   15568:	sub	sp, fp, #8
   1556c:	pop	{r4, fp, pc}
   15570:	andeq	r8, r0, r8, lsr #5
   15574:	andeq	r0, r0, r1, lsr #5
   15578:	andeq	r7, r0, r8, ror #27
   1557c:	andeq	r7, r0, r0, asr #28
   15580:	andeq	r8, r0, r8, asr #4
   15584:	andeq	r0, r0, r5, lsr #5
   15588:	andeq	r7, r0, r8, lsl #27
   1558c:	andeq	r7, r0, r0, ror #27
   15590:	push	{r4, fp, lr}
   15594:	add	fp, sp, #8
   15598:	sub	sp, sp, #100	; 0x64
   1559c:	str	r0, [fp, #-96]	; 0xffffffa0
   155a0:	str	r1, [fp, #-100]	; 0xffffff9c
   155a4:	str	r3, [fp, #-108]	; 0xffffff94
   155a8:	strh	r2, [fp, #-102]	; 0xffffff9a
   155ac:	ldr	r4, [pc, #320]	; 156f4 <flatcc_builder_get_user_frame_ptr@@Base+0x6cc>
   155b0:	add	r4, pc, r4
   155b4:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   155b8:	cmp	r3, #0
   155bc:	bne	155e4 <flatcc_builder_get_user_frame_ptr@@Base+0x5bc>
   155c0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   155c4:	ldrh	r3, [r3, #132]	; 0x84
   155c8:	cmp	r3, #0
   155cc:	beq	155dc <flatcc_builder_get_user_frame_ptr@@Base+0x5b4>
   155d0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   155d4:	ldrh	r3, [r3, #132]	; 0x84
   155d8:	b	155e8 <flatcc_builder_get_user_frame_ptr@@Base+0x5c0>
   155dc:	mov	r3, #1
   155e0:	b	155e8 <flatcc_builder_get_user_frame_ptr@@Base+0x5c0>
   155e4:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   155e8:	strh	r3, [fp, #-102]	; 0xffffff9a
   155ec:	mov	r1, #4
   155f0:	ldr	r0, [fp, #-100]	; 0xffffff9c
   155f4:	bl	14d10 <flatcc_builder_clear@@Base+0xf8>
   155f8:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   155fc:	mov	r1, r3
   15600:	ldr	r0, [fp, #-100]	; 0xffffff9c
   15604:	bl	14d10 <flatcc_builder_clear@@Base+0xf8>
   15608:	ldr	r3, [fp, #-108]	; 0xffffff94
   1560c:	cmp	r3, #0
   15610:	bne	156e4 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   15614:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   15618:	mov	r1, r3
   1561c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15620:	bl	15350 <flatcc_builder_get_user_frame_ptr@@Base+0x328>
   15624:	str	r0, [fp, #-16]
   15628:	ldr	r3, [fp, #-16]
   1562c:	cmp	r3, #0
   15630:	beq	156e4 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   15634:	mov	r3, #0
   15638:	str	r3, [fp, #-88]	; 0xffffffa8
   1563c:	mov	r3, #0
   15640:	str	r3, [fp, #-84]	; 0xffffffac
   15644:	ldr	r3, [fp, #-16]
   15648:	cmp	r3, #0
   1564c:	beq	156a8 <flatcc_builder_get_user_frame_ptr@@Base+0x680>
   15650:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15654:	ldr	r3, [fp, #-16]
   15658:	add	r3, r2, r3
   1565c:	str	r3, [fp, #-88]	; 0xffffffa8
   15660:	ldr	r3, [fp, #-84]	; 0xffffffac
   15664:	add	r3, r3, #1
   15668:	lsl	r3, r3, #3
   1566c:	sub	r2, fp, #12
   15670:	add	r3, r2, r3
   15674:	ldr	r2, [pc, #124]	; 156f8 <flatcc_builder_get_user_frame_ptr@@Base+0x6d0>
   15678:	ldr	r2, [r4, r2]
   1567c:	str	r2, [r3, #-76]	; 0xffffffb4
   15680:	ldr	r3, [fp, #-84]	; 0xffffffac
   15684:	add	r3, r3, #1
   15688:	lsl	r3, r3, #3
   1568c:	sub	r2, fp, #12
   15690:	add	r3, r2, r3
   15694:	ldr	r2, [fp, #-16]
   15698:	str	r2, [r3, #-72]	; 0xffffffb8
   1569c:	ldr	r3, [fp, #-84]	; 0xffffffac
   156a0:	add	r3, r3, #1
   156a4:	str	r3, [fp, #-84]	; 0xffffffac
   156a8:	sub	r3, fp, #88	; 0x58
   156ac:	mov	r1, r3
   156b0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   156b4:	bl	1548c <flatcc_builder_get_user_frame_ptr@@Base+0x464>
   156b8:	mov	r3, r0
   156bc:	cmp	r3, #0
   156c0:	bne	156e4 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   156c4:	ldr	r3, [pc, #48]	; 156fc <flatcc_builder_get_user_frame_ptr@@Base+0x6d4>
   156c8:	add	r3, pc, r3
   156cc:	ldr	r2, [pc, #44]	; 15700 <flatcc_builder_get_user_frame_ptr@@Base+0x6d8>
   156d0:	ldr	r1, [pc, #44]	; 15704 <flatcc_builder_get_user_frame_ptr@@Base+0x6dc>
   156d4:	add	r1, pc, r1
   156d8:	ldr	r0, [pc, #40]	; 15708 <flatcc_builder_get_user_frame_ptr@@Base+0x6e0>
   156dc:	add	r0, pc, r0
   156e0:	bl	1234c <__assert_fail@plt>
   156e4:	mov	r3, #0
   156e8:	mov	r0, r3
   156ec:	sub	sp, fp, #8
   156f0:	pop	{r4, fp, pc}
   156f4:	andeq	r9, r1, r8, asr #20
   156f8:	andeq	r0, r0, r4, asr #32
   156fc:	strheq	r8, [r0], -r0
   15700:			; <UNDEFINED> instruction: 0x000002be
   15704:	andeq	r7, r0, r0, lsl #24
   15708:	andeq	r7, r0, r8, asr ip

0001570c <flatcc_builder_embed_buffer@@Base>:
   1570c:	push	{r4, fp, lr}
   15710:	add	fp, sp, #8
   15714:	sub	sp, sp, #108	; 0x6c
   15718:	str	r0, [fp, #-104]	; 0xffffff98
   1571c:	str	r2, [fp, #-112]	; 0xffffff90
   15720:	str	r3, [fp, #-116]	; 0xffffff8c
   15724:	strh	r1, [fp, #-106]	; 0xffffff96
   15728:	ldr	r4, [pc, #492]	; 1591c <flatcc_builder_embed_buffer@@Base+0x210>
   1572c:	add	r4, pc, r4
   15730:	ldr	r3, [fp, #8]
   15734:	and	r3, r3, #2
   15738:	str	r3, [fp, #-16]
   1573c:	ldr	r3, [fp, #-104]	; 0xffffff98
   15740:	ldr	r3, [r3, #152]	; 0x98
   15744:	cmp	r3, #0
   15748:	movne	r3, #1
   1574c:	moveq	r3, #0
   15750:	uxtb	r3, r3
   15754:	ldrh	r2, [fp, #-106]	; 0xffffff96
   15758:	add	r1, fp, #4
   1575c:	ldr	r0, [fp, #-104]	; 0xffffff98
   15760:	bl	15590 <flatcc_builder_get_user_frame_ptr@@Base+0x568>
   15764:	mov	r3, r0
   15768:	cmp	r3, #0
   1576c:	beq	15778 <flatcc_builder_embed_buffer@@Base+0x6c>
   15770:	mov	r3, #0
   15774:	b	15910 <flatcc_builder_embed_buffer@@Base+0x204>
   15778:	ldr	r3, [fp, #-16]
   1577c:	cmp	r3, #0
   15780:	beq	1578c <flatcc_builder_embed_buffer@@Base+0x80>
   15784:	mov	r2, #4
   15788:	b	15790 <flatcc_builder_embed_buffer@@Base+0x84>
   1578c:	mov	r2, #0
   15790:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15794:	add	r3, r2, r3
   15798:	ldrh	r2, [fp, #4]
   1579c:	mov	r1, r3
   157a0:	ldr	r0, [fp, #-104]	; 0xffffff98
   157a4:	bl	15304 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   157a8:	str	r0, [fp, #-20]	; 0xffffffec
   157ac:	ldr	r2, [fp, #-116]	; 0xffffff8c
   157b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   157b4:	add	r3, r2, r3
   157b8:	mov	r0, r3
   157bc:	bl	13cc8 <main@@Base+0x110>
   157c0:	mov	r3, r0
   157c4:	str	r3, [fp, #-24]	; 0xffffffe8
   157c8:	mov	r3, #0
   157cc:	str	r3, [fp, #-96]	; 0xffffffa0
   157d0:	mov	r3, #0
   157d4:	str	r3, [fp, #-92]	; 0xffffffa4
   157d8:	ldr	r3, [fp, #-104]	; 0xffffff98
   157dc:	ldr	r3, [r3, #152]	; 0x98
   157e0:	cmp	r3, #0
   157e4:	beq	15838 <flatcc_builder_embed_buffer@@Base+0x12c>
   157e8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   157ec:	add	r3, r3, #4
   157f0:	str	r3, [fp, #-96]	; 0xffffffa0
   157f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   157f8:	add	r3, r3, #1
   157fc:	lsl	r3, r3, #3
   15800:	sub	r2, fp, #12
   15804:	add	r3, r2, r3
   15808:	sub	r2, fp, #24
   1580c:	str	r2, [r3, #-84]	; 0xffffffac
   15810:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15814:	add	r3, r3, #1
   15818:	lsl	r3, r3, #3
   1581c:	sub	r2, fp, #12
   15820:	add	r3, r2, r3
   15824:	mov	r2, #4
   15828:	str	r2, [r3, #-80]	; 0xffffffb0
   1582c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15830:	add	r3, r3, #1
   15834:	str	r3, [fp, #-92]	; 0xffffffa4
   15838:	ldr	r3, [fp, #-116]	; 0xffffff8c
   1583c:	cmp	r3, #0
   15840:	beq	15898 <flatcc_builder_embed_buffer@@Base+0x18c>
   15844:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15848:	ldr	r3, [fp, #-116]	; 0xffffff8c
   1584c:	add	r3, r2, r3
   15850:	str	r3, [fp, #-96]	; 0xffffffa0
   15854:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15858:	add	r3, r3, #1
   1585c:	lsl	r3, r3, #3
   15860:	sub	r2, fp, #12
   15864:	add	r3, r2, r3
   15868:	ldr	r2, [fp, #-112]	; 0xffffff90
   1586c:	str	r2, [r3, #-84]	; 0xffffffac
   15870:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15874:	add	r3, r3, #1
   15878:	lsl	r3, r3, #3
   1587c:	sub	r2, fp, #12
   15880:	add	r3, r2, r3
   15884:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15888:	str	r2, [r3, #-80]	; 0xffffffb0
   1588c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15890:	add	r3, r3, #1
   15894:	str	r3, [fp, #-92]	; 0xffffffa4
   15898:	ldr	r3, [fp, #-20]	; 0xffffffec
   1589c:	cmp	r3, #0
   158a0:	beq	158fc <flatcc_builder_embed_buffer@@Base+0x1f0>
   158a4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   158a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   158ac:	add	r3, r2, r3
   158b0:	str	r3, [fp, #-96]	; 0xffffffa0
   158b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   158b8:	add	r3, r3, #1
   158bc:	lsl	r3, r3, #3
   158c0:	sub	r2, fp, #12
   158c4:	add	r3, r2, r3
   158c8:	ldr	r2, [pc, #80]	; 15920 <flatcc_builder_embed_buffer@@Base+0x214>
   158cc:	ldr	r2, [r4, r2]
   158d0:	str	r2, [r3, #-84]	; 0xffffffac
   158d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   158d8:	add	r3, r3, #1
   158dc:	lsl	r3, r3, #3
   158e0:	sub	r2, fp, #12
   158e4:	add	r3, r2, r3
   158e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   158ec:	str	r2, [r3, #-80]	; 0xffffffb0
   158f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   158f4:	add	r3, r3, #1
   158f8:	str	r3, [fp, #-92]	; 0xffffffa4
   158fc:	sub	r3, fp, #96	; 0x60
   15900:	mov	r1, r3
   15904:	ldr	r0, [fp, #-104]	; 0xffffff98
   15908:	bl	1538c <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   1590c:	mov	r3, r0
   15910:	mov	r0, r3
   15914:	sub	sp, fp, #8
   15918:	pop	{r4, fp, pc}
   1591c:	andeq	r9, r1, ip, asr #17
   15920:	andeq	r0, r0, r4, asr #32

00015924 <flatcc_builder_create_buffer@@Base>:
   15924:	push	{r4, fp, lr}
   15928:	add	fp, sp, #8
   1592c:	sub	sp, sp, #132	; 0x84
   15930:	str	r0, [fp, #-128]	; 0xffffff80
   15934:	str	r1, [fp, #-132]	; 0xffffff7c
   15938:	str	r3, [fp, #-140]	; 0xffffff74
   1593c:	strh	r2, [fp, #-134]	; 0xffffff7a
   15940:	ldr	r4, [pc, #932]	; 15cec <flatcc_builder_create_buffer@@Base+0x3c8>
   15944:	add	r4, pc, r4
   15948:	mov	r3, #0
   1594c:	str	r3, [fp, #-16]
   15950:	mov	r3, #0
   15954:	str	r3, [fp, #-120]	; 0xffffff88
   15958:	ldr	r3, [fp, #8]
   1595c:	and	r3, r3, #1
   15960:	cmp	r3, #0
   15964:	movne	r3, #1
   15968:	moveq	r3, #0
   1596c:	uxtb	r3, r3
   15970:	str	r3, [fp, #-20]	; 0xffffffec
   15974:	ldr	r3, [fp, #8]
   15978:	and	r3, r3, #2
   1597c:	cmp	r3, #0
   15980:	movne	r3, #1
   15984:	moveq	r3, #0
   15988:	uxtb	r3, r3
   1598c:	str	r3, [fp, #-24]	; 0xffffffe8
   15990:	ldrh	r2, [fp, #-134]	; 0xffffff7a
   15994:	ldr	r3, [fp, #-20]	; 0xffffffec
   15998:	add	r1, fp, #4
   1599c:	ldr	r0, [fp, #-128]	; 0xffffff80
   159a0:	bl	15590 <flatcc_builder_get_user_frame_ptr@@Base+0x568>
   159a4:	mov	r3, r0
   159a8:	cmp	r3, #0
   159ac:	beq	159b8 <flatcc_builder_create_buffer@@Base+0x94>
   159b0:	mov	r3, #0
   159b4:	b	15ce0 <flatcc_builder_create_buffer@@Base+0x3bc>
   159b8:	ldrh	r3, [fp, #4]
   159bc:	mov	r1, r3
   159c0:	ldr	r0, [fp, #-128]	; 0xffffff80
   159c4:	bl	14cc8 <flatcc_builder_clear@@Base+0xb0>
   159c8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   159cc:	cmp	r3, #0
   159d0:	beq	15a08 <flatcc_builder_create_buffer@@Base+0xe4>
   159d4:	ldr	r3, [fp, #-132]	; 0xffffff7c
   159d8:	ldr	r3, [r3]
   159dc:	str	r3, [fp, #-120]	; 0xffffff88
   159e0:	ldr	r3, [fp, #-120]	; 0xffffff88
   159e4:	mov	r0, r3
   159e8:	bl	13d14 <main@@Base+0x15c>
   159ec:	mov	r3, r0
   159f0:	str	r3, [fp, #-120]	; 0xffffff88
   159f4:	ldr	r3, [fp, #-120]	; 0xffffff88
   159f8:	mov	r0, r3
   159fc:	bl	13cc8 <main@@Base+0x110>
   15a00:	mov	r3, r0
   15a04:	str	r3, [fp, #-120]	; 0xffffff88
   15a08:	ldr	r3, [fp, #-120]	; 0xffffff88
   15a0c:	cmp	r3, #0
   15a10:	beq	15a1c <flatcc_builder_create_buffer@@Base+0xf8>
   15a14:	mov	r3, #4
   15a18:	b	15a20 <flatcc_builder_create_buffer@@Base+0xfc>
   15a1c:	mov	r3, #0
   15a20:	str	r3, [fp, #-16]
   15a24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15a28:	cmp	r3, #0
   15a2c:	beq	15a38 <flatcc_builder_create_buffer@@Base+0x114>
   15a30:	mov	r2, #4
   15a34:	b	15a3c <flatcc_builder_create_buffer@@Base+0x118>
   15a38:	mov	r2, #0
   15a3c:	ldr	r3, [fp, #-16]
   15a40:	add	r3, r2, r3
   15a44:	add	r3, r3, #4
   15a48:	ldrh	r2, [fp, #4]
   15a4c:	mov	r1, r3
   15a50:	ldr	r0, [fp, #-128]	; 0xffffff80
   15a54:	bl	15304 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   15a58:	str	r0, [fp, #-28]	; 0xffffffe4
   15a5c:	mov	r3, #0
   15a60:	str	r3, [fp, #-116]	; 0xffffff8c
   15a64:	mov	r3, #0
   15a68:	str	r3, [fp, #-112]	; 0xffffff90
   15a6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15a70:	cmp	r3, #0
   15a74:	bne	15a84 <flatcc_builder_create_buffer@@Base+0x160>
   15a78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15a7c:	cmp	r3, #0
   15a80:	beq	15ad4 <flatcc_builder_create_buffer@@Base+0x1b0>
   15a84:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15a88:	add	r3, r3, #4
   15a8c:	str	r3, [fp, #-116]	; 0xffffff8c
   15a90:	ldr	r3, [fp, #-112]	; 0xffffff90
   15a94:	add	r3, r3, #1
   15a98:	lsl	r3, r3, #3
   15a9c:	sub	r2, fp, #12
   15aa0:	add	r3, r2, r3
   15aa4:	sub	r2, fp, #44	; 0x2c
   15aa8:	str	r2, [r3, #-104]	; 0xffffff98
   15aac:	ldr	r3, [fp, #-112]	; 0xffffff90
   15ab0:	add	r3, r3, #1
   15ab4:	lsl	r3, r3, #3
   15ab8:	sub	r2, fp, #12
   15abc:	add	r3, r2, r3
   15ac0:	mov	r2, #4
   15ac4:	str	r2, [r3, #-100]	; 0xffffff9c
   15ac8:	ldr	r3, [fp, #-112]	; 0xffffff90
   15acc:	add	r3, r3, #1
   15ad0:	str	r3, [fp, #-112]	; 0xffffff90
   15ad4:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15ad8:	add	r3, r3, #4
   15adc:	str	r3, [fp, #-116]	; 0xffffff8c
   15ae0:	ldr	r3, [fp, #-112]	; 0xffffff90
   15ae4:	add	r3, r3, #1
   15ae8:	lsl	r3, r3, #3
   15aec:	sub	r2, fp, #12
   15af0:	add	r3, r2, r3
   15af4:	sub	r2, fp, #40	; 0x28
   15af8:	str	r2, [r3, #-104]	; 0xffffff98
   15afc:	ldr	r3, [fp, #-112]	; 0xffffff90
   15b00:	add	r3, r3, #1
   15b04:	lsl	r3, r3, #3
   15b08:	sub	r2, fp, #12
   15b0c:	add	r3, r2, r3
   15b10:	mov	r2, #4
   15b14:	str	r2, [r3, #-100]	; 0xffffff9c
   15b18:	ldr	r3, [fp, #-112]	; 0xffffff90
   15b1c:	add	r3, r3, #1
   15b20:	str	r3, [fp, #-112]	; 0xffffff90
   15b24:	ldr	r3, [fp, #-16]
   15b28:	cmp	r3, #0
   15b2c:	beq	15b84 <flatcc_builder_create_buffer@@Base+0x260>
   15b30:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15b34:	ldr	r3, [fp, #-16]
   15b38:	add	r3, r2, r3
   15b3c:	str	r3, [fp, #-116]	; 0xffffff8c
   15b40:	ldr	r3, [fp, #-112]	; 0xffffff90
   15b44:	add	r3, r3, #1
   15b48:	lsl	r3, r3, #3
   15b4c:	sub	r2, fp, #12
   15b50:	add	r3, r2, r3
   15b54:	sub	r2, fp, #120	; 0x78
   15b58:	str	r2, [r3, #-104]	; 0xffffff98
   15b5c:	ldr	r3, [fp, #-112]	; 0xffffff90
   15b60:	add	r3, r3, #1
   15b64:	lsl	r3, r3, #3
   15b68:	sub	r2, fp, #12
   15b6c:	add	r3, r2, r3
   15b70:	ldr	r2, [fp, #-16]
   15b74:	str	r2, [r3, #-100]	; 0xffffff9c
   15b78:	ldr	r3, [fp, #-112]	; 0xffffff90
   15b7c:	add	r3, r3, #1
   15b80:	str	r3, [fp, #-112]	; 0xffffff90
   15b84:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15b88:	cmp	r3, #0
   15b8c:	beq	15be8 <flatcc_builder_create_buffer@@Base+0x2c4>
   15b90:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15b94:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15b98:	add	r3, r2, r3
   15b9c:	str	r3, [fp, #-116]	; 0xffffff8c
   15ba0:	ldr	r3, [fp, #-112]	; 0xffffff90
   15ba4:	add	r3, r3, #1
   15ba8:	lsl	r3, r3, #3
   15bac:	sub	r2, fp, #12
   15bb0:	add	r3, r2, r3
   15bb4:	ldr	r2, [pc, #308]	; 15cf0 <flatcc_builder_create_buffer@@Base+0x3cc>
   15bb8:	ldr	r2, [r4, r2]
   15bbc:	str	r2, [r3, #-104]	; 0xffffff98
   15bc0:	ldr	r3, [fp, #-112]	; 0xffffff90
   15bc4:	add	r3, r3, #1
   15bc8:	lsl	r3, r3, #3
   15bcc:	sub	r2, fp, #12
   15bd0:	add	r3, r2, r3
   15bd4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15bd8:	str	r2, [r3, #-100]	; 0xffffff9c
   15bdc:	ldr	r3, [fp, #-112]	; 0xffffff90
   15be0:	add	r3, r3, #1
   15be4:	str	r3, [fp, #-112]	; 0xffffff90
   15be8:	ldr	r3, [fp, #-128]	; 0xffffff80
   15bec:	ldr	r3, [r3, #136]	; 0x88
   15bf0:	mov	r2, r3
   15bf4:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15bf8:	sub	r2, r2, r3
   15bfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c00:	cmp	r3, #0
   15c04:	bne	15c14 <flatcc_builder_create_buffer@@Base+0x2f0>
   15c08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15c0c:	cmp	r3, #0
   15c10:	beq	15c1c <flatcc_builder_create_buffer@@Base+0x2f8>
   15c14:	mov	r3, #4
   15c18:	b	15c20 <flatcc_builder_create_buffer@@Base+0x2fc>
   15c1c:	mov	r3, #0
   15c20:	add	r3, r2, r3
   15c24:	str	r3, [fp, #-32]	; 0xffffffe0
   15c28:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c2c:	cmp	r3, #0
   15c30:	beq	15c5c <flatcc_builder_create_buffer@@Base+0x338>
   15c34:	ldr	r3, [fp, #-128]	; 0xffffff80
   15c38:	ldr	r3, [r3, #144]	; 0x90
   15c3c:	mov	r2, r3
   15c40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c44:	sub	r3, r2, r3
   15c48:	mov	r0, r3
   15c4c:	bl	13cc8 <main@@Base+0x110>
   15c50:	mov	r3, r0
   15c54:	str	r3, [fp, #-44]	; 0xffffffd4
   15c58:	b	15c80 <flatcc_builder_create_buffer@@Base+0x35c>
   15c5c:	ldr	r3, [fp, #-128]	; 0xffffff80
   15c60:	ldr	r3, [r3, #140]	; 0x8c
   15c64:	mov	r2, r3
   15c68:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c6c:	sub	r3, r2, r3
   15c70:	mov	r0, r3
   15c74:	bl	13cc8 <main@@Base+0x110>
   15c78:	mov	r3, r0
   15c7c:	str	r3, [fp, #-44]	; 0xffffffd4
   15c80:	ldr	r2, [fp, #-140]	; 0xffffff74
   15c84:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c88:	sub	r3, r2, r3
   15c8c:	mov	r0, r3
   15c90:	bl	13cc8 <main@@Base+0x110>
   15c94:	mov	r3, r0
   15c98:	str	r3, [fp, #-40]	; 0xffffffd8
   15c9c:	sub	r3, fp, #116	; 0x74
   15ca0:	mov	r1, r3
   15ca4:	ldr	r0, [fp, #-128]	; 0xffffff80
   15ca8:	bl	1538c <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   15cac:	str	r0, [fp, #-36]	; 0xffffffdc
   15cb0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15cb4:	cmp	r3, #0
   15cb8:	bne	15cdc <flatcc_builder_create_buffer@@Base+0x3b8>
   15cbc:	ldr	r3, [pc, #48]	; 15cf4 <flatcc_builder_create_buffer@@Base+0x3d0>
   15cc0:	add	r3, pc, r3
   15cc4:	mov	r2, #772	; 0x304
   15cc8:	ldr	r1, [pc, #40]	; 15cf8 <flatcc_builder_create_buffer@@Base+0x3d4>
   15ccc:	add	r1, pc, r1
   15cd0:	ldr	r0, [pc, #36]	; 15cfc <flatcc_builder_create_buffer@@Base+0x3d8>
   15cd4:	add	r0, pc, r0
   15cd8:	bl	1234c <__assert_fail@plt>
   15cdc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15ce0:	mov	r0, r3
   15ce4:	sub	sp, fp, #8
   15ce8:	pop	{r4, fp, pc}
   15cec:			; <UNDEFINED> instruction: 0x000196b4
   15cf0:	andeq	r0, r0, r4, asr #32
   15cf4:	andeq	r7, r0, r0, ror #21
   15cf8:	andeq	r7, r0, r8, lsl #12
   15cfc:	andeq	r7, r0, r0, ror #12

00015d00 <flatcc_builder_create_struct@@Base>:
   15d00:	push	{r4, fp, lr}
   15d04:	add	fp, sp, #8
   15d08:	sub	sp, sp, #100	; 0x64
   15d0c:	str	r0, [fp, #-96]	; 0xffffffa0
   15d10:	str	r1, [fp, #-100]	; 0xffffff9c
   15d14:	str	r2, [fp, #-104]	; 0xffffff98
   15d18:	strh	r3, [fp, #-106]	; 0xffffff96
   15d1c:	ldr	r4, [pc, #328]	; 15e6c <flatcc_builder_create_struct@@Base+0x16c>
   15d20:	add	r4, pc, r4
   15d24:	ldrh	r3, [fp, #-106]	; 0xffffff96
   15d28:	cmp	r3, #0
   15d2c:	bne	15d50 <flatcc_builder_create_struct@@Base+0x50>
   15d30:	ldr	r3, [pc, #312]	; 15e70 <flatcc_builder_create_struct@@Base+0x170>
   15d34:	add	r3, pc, r3
   15d38:	ldr	r2, [pc, #308]	; 15e74 <flatcc_builder_create_struct@@Base+0x174>
   15d3c:	ldr	r1, [pc, #308]	; 15e78 <flatcc_builder_create_struct@@Base+0x178>
   15d40:	add	r1, pc, r1
   15d44:	ldr	r0, [pc, #304]	; 15e7c <flatcc_builder_create_struct@@Base+0x17c>
   15d48:	add	r0, pc, r0
   15d4c:	bl	1234c <__assert_fail@plt>
   15d50:	ldrh	r3, [fp, #-106]	; 0xffffff96
   15d54:	mov	r1, r3
   15d58:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15d5c:	bl	14cc8 <flatcc_builder_clear@@Base+0xb0>
   15d60:	ldrh	r3, [fp, #-106]	; 0xffffff96
   15d64:	mov	r2, r3
   15d68:	ldr	r1, [fp, #-104]	; 0xffffff98
   15d6c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15d70:	bl	15304 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   15d74:	str	r0, [fp, #-16]
   15d78:	mov	r3, #0
   15d7c:	str	r3, [fp, #-88]	; 0xffffffa8
   15d80:	mov	r3, #0
   15d84:	str	r3, [fp, #-84]	; 0xffffffac
   15d88:	ldr	r3, [fp, #-104]	; 0xffffff98
   15d8c:	cmp	r3, #0
   15d90:	beq	15de8 <flatcc_builder_create_struct@@Base+0xe8>
   15d94:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15d98:	ldr	r3, [fp, #-104]	; 0xffffff98
   15d9c:	add	r3, r2, r3
   15da0:	str	r3, [fp, #-88]	; 0xffffffa8
   15da4:	ldr	r3, [fp, #-84]	; 0xffffffac
   15da8:	add	r3, r3, #1
   15dac:	lsl	r3, r3, #3
   15db0:	sub	r2, fp, #12
   15db4:	add	r3, r2, r3
   15db8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   15dbc:	str	r2, [r3, #-76]	; 0xffffffb4
   15dc0:	ldr	r3, [fp, #-84]	; 0xffffffac
   15dc4:	add	r3, r3, #1
   15dc8:	lsl	r3, r3, #3
   15dcc:	sub	r2, fp, #12
   15dd0:	add	r3, r2, r3
   15dd4:	ldr	r2, [fp, #-104]	; 0xffffff98
   15dd8:	str	r2, [r3, #-72]	; 0xffffffb8
   15ddc:	ldr	r3, [fp, #-84]	; 0xffffffac
   15de0:	add	r3, r3, #1
   15de4:	str	r3, [fp, #-84]	; 0xffffffac
   15de8:	ldr	r3, [fp, #-16]
   15dec:	cmp	r3, #0
   15df0:	beq	15e4c <flatcc_builder_create_struct@@Base+0x14c>
   15df4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15df8:	ldr	r3, [fp, #-16]
   15dfc:	add	r3, r2, r3
   15e00:	str	r3, [fp, #-88]	; 0xffffffa8
   15e04:	ldr	r3, [fp, #-84]	; 0xffffffac
   15e08:	add	r3, r3, #1
   15e0c:	lsl	r3, r3, #3
   15e10:	sub	r2, fp, #12
   15e14:	add	r3, r2, r3
   15e18:	ldr	r2, [pc, #96]	; 15e80 <flatcc_builder_create_struct@@Base+0x180>
   15e1c:	ldr	r2, [r4, r2]
   15e20:	str	r2, [r3, #-76]	; 0xffffffb4
   15e24:	ldr	r3, [fp, #-84]	; 0xffffffac
   15e28:	add	r3, r3, #1
   15e2c:	lsl	r3, r3, #3
   15e30:	sub	r2, fp, #12
   15e34:	add	r3, r2, r3
   15e38:	ldr	r2, [fp, #-16]
   15e3c:	str	r2, [r3, #-72]	; 0xffffffb8
   15e40:	ldr	r3, [fp, #-84]	; 0xffffffac
   15e44:	add	r3, r3, #1
   15e48:	str	r3, [fp, #-84]	; 0xffffffac
   15e4c:	sub	r3, fp, #88	; 0x58
   15e50:	mov	r1, r3
   15e54:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15e58:	bl	1538c <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   15e5c:	mov	r3, r0
   15e60:	mov	r0, r3
   15e64:	sub	sp, fp, #8
   15e68:	pop	{r4, fp, pc}
   15e6c:	ldrdeq	r9, [r1], -r8
   15e70:	andeq	r7, r0, ip, lsl #21
   15e74:	andeq	r0, r0, pc, lsl #6
   15e78:	muleq	r0, r4, r5
   15e7c:	andeq	r7, r0, r0, asr r6
   15e80:	andeq	r0, r0, r4, asr #32

00015e84 <flatcc_builder_start_buffer@@Base>:
   15e84:	push	{r4, fp, lr}
   15e88:	add	fp, sp, #8
   15e8c:	sub	sp, sp, #20
   15e90:	str	r0, [fp, #-16]
   15e94:	str	r1, [fp, #-20]	; 0xffffffec
   15e98:	str	r3, [fp, #-28]	; 0xffffffe4
   15e9c:	strh	r2, [fp, #-22]	; 0xffffffea
   15ea0:	ldr	r4, [pc, #300]	; 15fd4 <flatcc_builder_start_buffer@@Base+0x150>
   15ea4:	add	r4, pc, r4
   15ea8:	ldr	r3, [fp, #-16]
   15eac:	ldrh	r3, [r3, #128]	; 0x80
   15eb0:	mov	r1, r3
   15eb4:	ldr	r0, [fp, #-16]
   15eb8:	bl	1505c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   15ebc:	mov	r3, r0
   15ec0:	cmp	r3, #0
   15ec4:	beq	15ed0 <flatcc_builder_start_buffer@@Base+0x4c>
   15ec8:	mvn	r3, #0
   15ecc:	b	15fc8 <flatcc_builder_start_buffer@@Base+0x144>
   15ed0:	ldr	r3, [fp, #-16]
   15ed4:	mov	r2, #1
   15ed8:	strh	r2, [r3, #128]	; 0x80
   15edc:	ldr	r3, [fp, #-16]
   15ee0:	ldr	r3, [r3, #32]
   15ee4:	ldr	r2, [fp, #-16]
   15ee8:	ldrh	r2, [r2, #132]	; 0x84
   15eec:	strh	r2, [r3, #34]	; 0x22
   15ef0:	ldr	r3, [fp, #-16]
   15ef4:	ldrh	r2, [fp, #-22]	; 0xffffffea
   15ef8:	strh	r2, [r3, #132]	; 0x84
   15efc:	ldr	r3, [fp, #-16]
   15f00:	ldr	r3, [r3, #32]
   15f04:	ldr	r2, [fp, #-16]
   15f08:	ldrh	r2, [r2, #164]	; 0xa4
   15f0c:	strh	r2, [r3, #32]
   15f10:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15f14:	uxth	r2, r3
   15f18:	ldr	r3, [fp, #-16]
   15f1c:	strh	r2, [r3, #164]	; 0xa4
   15f20:	ldr	r3, [fp, #-16]
   15f24:	ldr	r3, [r3, #32]
   15f28:	ldr	r2, [fp, #-16]
   15f2c:	ldr	r2, [r2, #144]	; 0x90
   15f30:	str	r2, [r3, #20]
   15f34:	ldr	r3, [fp, #-16]
   15f38:	ldr	r3, [r3, #32]
   15f3c:	ldr	r2, [fp, #-16]
   15f40:	ldr	r2, [r2, #152]	; 0x98
   15f44:	str	r2, [r3, #28]
   15f48:	ldr	r3, [fp, #-16]
   15f4c:	ldr	r2, [r3, #136]	; 0x88
   15f50:	ldr	r3, [fp, #-16]
   15f54:	str	r2, [r3, #144]	; 0x90
   15f58:	ldr	r3, [fp, #-16]
   15f5c:	ldr	r3, [r3, #148]	; 0x94
   15f60:	add	r1, r3, #1
   15f64:	ldr	r2, [fp, #-16]
   15f68:	str	r1, [r2, #148]	; 0x94
   15f6c:	ldr	r2, [fp, #-16]
   15f70:	str	r3, [r2, #152]	; 0x98
   15f74:	ldr	r3, [fp, #-16]
   15f78:	ldr	r3, [r3, #32]
   15f7c:	ldr	r2, [fp, #-16]
   15f80:	ldr	r2, [r2, #168]	; 0xa8
   15f84:	str	r2, [r3, #16]
   15f88:	ldr	r3, [fp, #-16]
   15f8c:	add	r2, r3, #168	; 0xa8
   15f90:	ldr	r3, [fp, #-20]	; 0xffffffec
   15f94:	cmp	r3, #0
   15f98:	beq	15fa4 <flatcc_builder_start_buffer@@Base+0x120>
   15f9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fa0:	b	15fac <flatcc_builder_start_buffer@@Base+0x128>
   15fa4:	ldr	r3, [pc, #44]	; 15fd8 <flatcc_builder_start_buffer@@Base+0x154>
   15fa8:	ldr	r3, [r4, r3]
   15fac:	ldr	r3, [r3]
   15fb0:	str	r3, [r2]
   15fb4:	ldr	r3, [fp, #-16]
   15fb8:	ldr	r3, [r3, #32]
   15fbc:	mov	r2, #1
   15fc0:	strh	r2, [r3, #14]
   15fc4:	mov	r3, #0
   15fc8:	mov	r0, r3
   15fcc:	sub	sp, fp, #8
   15fd0:	pop	{r4, fp, pc}
   15fd4:	andeq	r9, r1, r4, asr r1
   15fd8:	andeq	r0, r0, r4, asr #32

00015fdc <flatcc_builder_end_buffer@@Base>:
   15fdc:	push	{fp, lr}
   15fe0:	add	fp, sp, #4
   15fe4:	sub	sp, sp, #24
   15fe8:	str	r0, [fp, #-16]
   15fec:	str	r1, [fp, #-20]	; 0xffffffec
   15ff0:	ldr	r3, [fp, #-16]
   15ff4:	ldrh	r3, [r3, #164]	; 0xa4
   15ff8:	and	r3, r3, #2
   15ffc:	str	r3, [fp, #-8]
   16000:	ldr	r3, [fp, #-16]
   16004:	ldr	r3, [r3, #152]	; 0x98
   16008:	cmp	r3, #0
   1600c:	movne	r3, #1
   16010:	moveq	r3, #0
   16014:	uxtb	r3, r3
   16018:	mov	r2, r3
   1601c:	ldr	r3, [fp, #-8]
   16020:	orr	r3, r3, r2
   16024:	str	r3, [fp, #-8]
   16028:	ldr	r3, [fp, #-16]
   1602c:	ldr	r3, [r3, #32]
   16030:	ldrh	r3, [r3, #14]
   16034:	cmp	r3, #1
   16038:	beq	1605c <flatcc_builder_end_buffer@@Base+0x80>
   1603c:	ldr	r3, [pc, #224]	; 16124 <flatcc_builder_end_buffer@@Base+0x148>
   16040:	add	r3, pc, r3
   16044:	ldr	r2, [pc, #220]	; 16128 <flatcc_builder_end_buffer@@Base+0x14c>
   16048:	ldr	r1, [pc, #220]	; 1612c <flatcc_builder_end_buffer@@Base+0x150>
   1604c:	add	r1, pc, r1
   16050:	ldr	r0, [pc, #216]	; 16130 <flatcc_builder_end_buffer@@Base+0x154>
   16054:	add	r0, pc, r0
   16058:	bl	1234c <__assert_fail@plt>
   1605c:	ldr	r3, [fp, #-16]
   16060:	ldrh	r3, [r3, #132]	; 0x84
   16064:	mov	r1, r3
   16068:	ldr	r0, [fp, #-16]
   1606c:	bl	14cc8 <flatcc_builder_clear@@Base+0xb0>
   16070:	ldr	r3, [fp, #-16]
   16074:	add	r1, r3, #168	; 0xa8
   16078:	ldr	r3, [fp, #-16]
   1607c:	ldrh	r0, [r3, #132]	; 0x84
   16080:	ldr	r3, [fp, #-16]
   16084:	ldrh	r3, [r3, #128]	; 0x80
   16088:	ldr	r2, [fp, #-8]
   1608c:	str	r2, [sp, #4]
   16090:	str	r3, [sp]
   16094:	ldr	r3, [fp, #-20]	; 0xffffffec
   16098:	mov	r2, r0
   1609c:	ldr	r0, [fp, #-16]
   160a0:	bl	15924 <flatcc_builder_create_buffer@@Base>
   160a4:	str	r0, [fp, #-12]
   160a8:	ldr	r3, [fp, #-12]
   160ac:	cmp	r3, #0
   160b0:	bne	160bc <flatcc_builder_end_buffer@@Base+0xe0>
   160b4:	mov	r3, #0
   160b8:	b	16118 <flatcc_builder_end_buffer@@Base+0x13c>
   160bc:	ldr	r3, [fp, #-16]
   160c0:	ldr	r3, [r3, #32]
   160c4:	ldr	r2, [r3, #20]
   160c8:	ldr	r3, [fp, #-16]
   160cc:	str	r2, [r3, #144]	; 0x90
   160d0:	ldr	r3, [fp, #-16]
   160d4:	ldr	r3, [r3, #32]
   160d8:	ldr	r2, [r3, #28]
   160dc:	ldr	r3, [fp, #-16]
   160e0:	str	r2, [r3, #152]	; 0x98
   160e4:	ldr	r3, [fp, #-16]
   160e8:	ldr	r3, [r3, #32]
   160ec:	ldr	r2, [r3, #16]
   160f0:	ldr	r3, [fp, #-16]
   160f4:	str	r2, [r3, #168]	; 0xa8
   160f8:	ldr	r3, [fp, #-16]
   160fc:	ldr	r3, [r3, #32]
   16100:	ldrh	r2, [r3, #32]
   16104:	ldr	r3, [fp, #-16]
   16108:	strh	r2, [r3, #164]	; 0xa4
   1610c:	ldr	r0, [fp, #-16]
   16110:	bl	1523c <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   16114:	ldr	r3, [fp, #-12]
   16118:	mov	r0, r3
   1611c:	sub	sp, fp, #4
   16120:	pop	{fp, pc}
   16124:	andeq	r7, r0, r0, lsr #15
   16128:	andeq	r0, r0, r6, asr #6
   1612c:	andeq	r7, r0, r8, lsl #5
   16130:	andeq	r7, r0, r0, asr r3

00016134 <flatcc_builder_start_struct@@Base>:
   16134:	push	{fp, lr}
   16138:	add	fp, sp, #4
   1613c:	sub	sp, sp, #16
   16140:	str	r0, [fp, #-8]
   16144:	str	r1, [fp, #-12]
   16148:	mov	r3, r2
   1614c:	strh	r3, [fp, #-14]
   16150:	ldrh	r3, [fp, #-14]
   16154:	mov	r1, r3
   16158:	ldr	r0, [fp, #-8]
   1615c:	bl	1505c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16160:	mov	r3, r0
   16164:	cmp	r3, #0
   16168:	beq	16174 <flatcc_builder_start_struct@@Base+0x40>
   1616c:	mov	r3, #0
   16170:	b	161a0 <flatcc_builder_start_struct@@Base+0x6c>
   16174:	ldr	r3, [fp, #-8]
   16178:	ldr	r3, [r3, #32]
   1617c:	mov	r2, #2
   16180:	strh	r2, [r3, #14]
   16184:	mvn	r1, #3
   16188:	ldr	r0, [fp, #-8]
   1618c:	bl	13fd4 <flatcc_builder_default_alloc@@Base+0x1c8>
   16190:	ldr	r1, [fp, #-12]
   16194:	ldr	r0, [fp, #-8]
   16198:	bl	140fc <flatcc_builder_default_alloc@@Base+0x2f0>
   1619c:	mov	r3, r0
   161a0:	mov	r0, r3
   161a4:	sub	sp, fp, #4
   161a8:	pop	{fp, pc}

000161ac <flatcc_builder_struct_edit@@Base>:
   161ac:	push	{fp}		; (str fp, [sp, #-4]!)
   161b0:	add	fp, sp, #0
   161b4:	sub	sp, sp, #12
   161b8:	str	r0, [fp, #-8]
   161bc:	ldr	r3, [fp, #-8]
   161c0:	ldr	r3, [r3, #16]
   161c4:	mov	r0, r3
   161c8:	add	sp, fp, #0
   161cc:	pop	{fp}		; (ldr fp, [sp], #4)
   161d0:	bx	lr

000161d4 <flatcc_builder_end_struct@@Base>:
   161d4:	push	{fp, lr}
   161d8:	add	fp, sp, #4
   161dc:	sub	sp, sp, #16
   161e0:	str	r0, [fp, #-16]
   161e4:	ldr	r3, [fp, #-16]
   161e8:	ldr	r3, [r3, #32]
   161ec:	ldrh	r3, [r3, #14]
   161f0:	cmp	r3, #2
   161f4:	beq	16218 <flatcc_builder_end_struct@@Base+0x44>
   161f8:	ldr	r3, [pc, #104]	; 16268 <flatcc_builder_end_struct@@Base+0x94>
   161fc:	add	r3, pc, r3
   16200:	mov	r2, #872	; 0x368
   16204:	ldr	r1, [pc, #96]	; 1626c <flatcc_builder_end_struct@@Base+0x98>
   16208:	add	r1, pc, r1
   1620c:	ldr	r0, [pc, #92]	; 16270 <flatcc_builder_end_struct@@Base+0x9c>
   16210:	add	r0, pc, r0
   16214:	bl	1234c <__assert_fail@plt>
   16218:	ldr	r3, [fp, #-16]
   1621c:	ldr	r1, [r3, #16]
   16220:	ldr	r3, [fp, #-16]
   16224:	ldr	r2, [r3, #20]
   16228:	ldr	r3, [fp, #-16]
   1622c:	ldrh	r3, [r3, #130]	; 0x82
   16230:	ldr	r0, [fp, #-16]
   16234:	bl	15d00 <flatcc_builder_create_struct@@Base>
   16238:	str	r0, [fp, #-8]
   1623c:	ldr	r3, [fp, #-8]
   16240:	cmp	r3, #0
   16244:	bne	16250 <flatcc_builder_end_struct@@Base+0x7c>
   16248:	mov	r3, #0
   1624c:	b	1625c <flatcc_builder_end_struct@@Base+0x88>
   16250:	ldr	r0, [fp, #-16]
   16254:	bl	1523c <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   16258:	ldr	r3, [fp, #-8]
   1625c:	mov	r0, r3
   16260:	sub	sp, fp, #4
   16264:	pop	{fp, pc}
   16268:	andeq	r7, r0, r0, lsl #12
   1626c:	andeq	r7, r0, ip, asr #1
   16270:	andeq	r7, r0, r0, asr #3
   16274:	push	{fp, lr}
   16278:	add	fp, sp, #4
   1627c:	sub	sp, sp, #24
   16280:	str	r0, [fp, #-16]
   16284:	str	r1, [fp, #-20]	; 0xffffffec
   16288:	str	r2, [fp, #-24]	; 0xffffffe8
   1628c:	ldr	r3, [fp, #-16]
   16290:	ldr	r3, [r3, #32]
   16294:	ldr	r3, [r3, #20]
   16298:	str	r3, [fp, #-8]
   1629c:	ldr	r2, [fp, #-8]
   162a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   162a4:	add	r3, r2, r3
   162a8:	str	r3, [fp, #-12]
   162ac:	ldr	r2, [fp, #-8]
   162b0:	ldr	r3, [fp, #-12]
   162b4:	cmp	r2, r3
   162b8:	bhi	162cc <flatcc_builder_end_struct@@Base+0xf8>
   162bc:	ldr	r2, [fp, #-12]
   162c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   162c4:	cmp	r2, r3
   162c8:	bls	16314 <flatcc_builder_end_struct@@Base+0x140>
   162cc:	ldr	r2, [fp, #-8]
   162d0:	ldr	r3, [fp, #-12]
   162d4:	cmp	r2, r3
   162d8:	bhi	162ec <flatcc_builder_end_struct@@Base+0x118>
   162dc:	ldr	r2, [fp, #-12]
   162e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   162e4:	cmp	r2, r3
   162e8:	bls	1630c <flatcc_builder_end_struct@@Base+0x138>
   162ec:	ldr	r3, [pc, #64]	; 16334 <flatcc_builder_end_struct@@Base+0x160>
   162f0:	add	r3, pc, r3
   162f4:	mov	r2, #892	; 0x37c
   162f8:	ldr	r1, [pc, #56]	; 16338 <flatcc_builder_end_struct@@Base+0x164>
   162fc:	add	r1, pc, r1
   16300:	ldr	r0, [pc, #52]	; 1633c <flatcc_builder_end_struct@@Base+0x168>
   16304:	add	r0, pc, r0
   16308:	bl	1234c <__assert_fail@plt>
   1630c:	mvn	r3, #0
   16310:	b	16328 <flatcc_builder_end_struct@@Base+0x154>
   16314:	ldr	r3, [fp, #-16]
   16318:	ldr	r3, [r3, #32]
   1631c:	ldr	r2, [fp, #-12]
   16320:	str	r2, [r3, #20]
   16324:	mov	r3, #0
   16328:	mov	r0, r3
   1632c:	sub	sp, fp, #4
   16330:	pop	{fp, pc}
   16334:	andeq	r7, r0, r8, lsr #10
   16338:	ldrdeq	r6, [r0], -r8
   1633c:	strdeq	r7, [r0], -r8

00016340 <flatcc_builder_extend_vector@@Base>:
   16340:	push	{fp, lr}
   16344:	add	fp, sp, #4
   16348:	sub	sp, sp, #8
   1634c:	str	r0, [fp, #-8]
   16350:	str	r1, [fp, #-12]
   16354:	ldr	r3, [fp, #-8]
   16358:	ldr	r3, [r3, #32]
   1635c:	ldr	r3, [r3, #24]
   16360:	mov	r2, r3
   16364:	ldr	r1, [fp, #-12]
   16368:	ldr	r0, [fp, #-8]
   1636c:	bl	16274 <flatcc_builder_end_struct@@Base+0xa0>
   16370:	mov	r3, r0
   16374:	cmp	r3, #0
   16378:	beq	16384 <flatcc_builder_extend_vector@@Base+0x44>
   1637c:	mov	r3, #0
   16380:	b	163a8 <flatcc_builder_extend_vector@@Base+0x68>
   16384:	ldr	r3, [fp, #-8]
   16388:	ldr	r3, [r3, #32]
   1638c:	ldr	r3, [r3, #16]
   16390:	ldr	r2, [fp, #-12]
   16394:	mul	r3, r2, r3
   16398:	mov	r1, r3
   1639c:	ldr	r0, [fp, #-8]
   163a0:	bl	140fc <flatcc_builder_default_alloc@@Base+0x2f0>
   163a4:	mov	r3, r0
   163a8:	mov	r0, r3
   163ac:	sub	sp, fp, #4
   163b0:	pop	{fp, pc}

000163b4 <flatcc_builder_vector_push@@Base>:
   163b4:	push	{fp, lr}
   163b8:	add	fp, sp, #4
   163bc:	sub	sp, sp, #8
   163c0:	str	r0, [fp, #-8]
   163c4:	str	r1, [fp, #-12]
   163c8:	ldr	r3, [fp, #-8]
   163cc:	ldr	r3, [r3, #32]
   163d0:	ldrh	r3, [r3, #14]
   163d4:	cmp	r3, #4
   163d8:	beq	163fc <flatcc_builder_vector_push@@Base+0x48>
   163dc:	ldr	r3, [pc, #200]	; 164ac <flatcc_builder_vector_push@@Base+0xf8>
   163e0:	add	r3, pc, r3
   163e4:	ldr	r2, [pc, #196]	; 164b0 <flatcc_builder_vector_push@@Base+0xfc>
   163e8:	ldr	r1, [pc, #196]	; 164b4 <flatcc_builder_vector_push@@Base+0x100>
   163ec:	add	r1, pc, r1
   163f0:	ldr	r0, [pc, #192]	; 164b8 <flatcc_builder_vector_push@@Base+0x104>
   163f4:	add	r0, pc, r0
   163f8:	bl	1234c <__assert_fail@plt>
   163fc:	ldr	r3, [fp, #-8]
   16400:	ldr	r3, [r3, #32]
   16404:	ldr	r2, [r3, #20]
   16408:	ldr	r3, [fp, #-8]
   1640c:	ldr	r3, [r3, #32]
   16410:	ldr	r3, [r3, #24]
   16414:	cmp	r2, r3
   16418:	bls	16464 <flatcc_builder_vector_push@@Base+0xb0>
   1641c:	ldr	r3, [fp, #-8]
   16420:	ldr	r3, [r3, #32]
   16424:	ldr	r2, [r3, #20]
   16428:	ldr	r3, [fp, #-8]
   1642c:	ldr	r3, [r3, #32]
   16430:	ldr	r3, [r3, #24]
   16434:	cmp	r2, r3
   16438:	bls	1645c <flatcc_builder_vector_push@@Base+0xa8>
   1643c:	ldr	r3, [pc, #120]	; 164bc <flatcc_builder_vector_push@@Base+0x108>
   16440:	add	r3, pc, r3
   16444:	mov	r2, #908	; 0x38c
   16448:	ldr	r1, [pc, #112]	; 164c0 <flatcc_builder_vector_push@@Base+0x10c>
   1644c:	add	r1, pc, r1
   16450:	ldr	r0, [pc, #108]	; 164c4 <flatcc_builder_vector_push@@Base+0x110>
   16454:	add	r0, pc, r0
   16458:	bl	1234c <__assert_fail@plt>
   1645c:	mov	r3, #0
   16460:	b	164a0 <flatcc_builder_vector_push@@Base+0xec>
   16464:	ldr	r3, [fp, #-8]
   16468:	ldr	r3, [r3, #32]
   1646c:	ldr	r2, [fp, #-8]
   16470:	ldr	r2, [r2, #32]
   16474:	ldr	r2, [r2, #20]
   16478:	add	r2, r2, #1
   1647c:	str	r2, [r3, #20]
   16480:	ldr	r3, [fp, #-8]
   16484:	ldr	r3, [r3, #32]
   16488:	ldr	r3, [r3, #16]
   1648c:	mov	r2, r3
   16490:	ldr	r1, [fp, #-12]
   16494:	ldr	r0, [fp, #-8]
   16498:	bl	141f4 <flatcc_builder_default_alloc@@Base+0x3e8>
   1649c:	mov	r3, r0
   164a0:	mov	r0, r3
   164a4:	sub	sp, fp, #4
   164a8:	pop	{fp, pc}
   164ac:	andeq	r7, r0, ip, asr #8
   164b0:	andeq	r0, r0, fp, lsl #7
   164b4:	andeq	r6, r0, r8, ror #29
   164b8:	andeq	r7, r0, r4, lsr #32
   164bc:	andeq	r7, r0, ip, ror #7
   164c0:	andeq	r6, r0, r8, lsl #29
   164c4:	strdeq	r6, [r0], -r0

000164c8 <flatcc_builder_append_vector@@Base>:
   164c8:	push	{fp, lr}
   164cc:	add	fp, sp, #4
   164d0:	sub	sp, sp, #16
   164d4:	str	r0, [fp, #-8]
   164d8:	str	r1, [fp, #-12]
   164dc:	str	r2, [fp, #-16]
   164e0:	ldr	r3, [fp, #-8]
   164e4:	ldr	r3, [r3, #32]
   164e8:	ldrh	r3, [r3, #14]
   164ec:	cmp	r3, #4
   164f0:	beq	16514 <flatcc_builder_append_vector@@Base+0x4c>
   164f4:	ldr	r3, [pc, #124]	; 16578 <flatcc_builder_append_vector@@Base+0xb0>
   164f8:	add	r3, pc, r3
   164fc:	ldr	r2, [pc, #120]	; 1657c <flatcc_builder_append_vector@@Base+0xb4>
   16500:	ldr	r1, [pc, #120]	; 16580 <flatcc_builder_append_vector@@Base+0xb8>
   16504:	add	r1, pc, r1
   16508:	ldr	r0, [pc, #116]	; 16584 <flatcc_builder_append_vector@@Base+0xbc>
   1650c:	add	r0, pc, r0
   16510:	bl	1234c <__assert_fail@plt>
   16514:	ldr	r3, [fp, #-8]
   16518:	ldr	r3, [r3, #32]
   1651c:	ldr	r3, [r3, #24]
   16520:	mov	r2, r3
   16524:	ldr	r1, [fp, #-16]
   16528:	ldr	r0, [fp, #-8]
   1652c:	bl	16274 <flatcc_builder_end_struct@@Base+0xa0>
   16530:	mov	r3, r0
   16534:	cmp	r3, #0
   16538:	beq	16544 <flatcc_builder_append_vector@@Base+0x7c>
   1653c:	mov	r3, #0
   16540:	b	1656c <flatcc_builder_append_vector@@Base+0xa4>
   16544:	ldr	r3, [fp, #-8]
   16548:	ldr	r3, [r3, #32]
   1654c:	ldr	r3, [r3, #16]
   16550:	ldr	r2, [fp, #-16]
   16554:	mul	r3, r2, r3
   16558:	mov	r2, r3
   1655c:	ldr	r1, [fp, #-12]
   16560:	ldr	r0, [fp, #-8]
   16564:	bl	141f4 <flatcc_builder_default_alloc@@Base+0x3e8>
   16568:	mov	r3, r0
   1656c:	mov	r0, r3
   16570:	sub	sp, fp, #4
   16574:	pop	{fp, pc}
   16578:	andeq	r7, r0, r0, asr r3
   1657c:	muleq	r0, r3, r3
   16580:	ldrdeq	r6, [r0], -r0
   16584:	andeq	r6, r0, ip, lsl #30

00016588 <flatcc_builder_extend_offset_vector@@Base>:
   16588:	push	{fp, lr}
   1658c:	add	fp, sp, #4
   16590:	sub	sp, sp, #8
   16594:	str	r0, [fp, #-8]
   16598:	str	r1, [fp, #-12]
   1659c:	mvn	r2, #-1073741824	; 0xc0000000
   165a0:	ldr	r1, [fp, #-12]
   165a4:	ldr	r0, [fp, #-8]
   165a8:	bl	16274 <flatcc_builder_end_struct@@Base+0xa0>
   165ac:	mov	r3, r0
   165b0:	cmp	r3, #0
   165b4:	beq	165c0 <flatcc_builder_extend_offset_vector@@Base+0x38>
   165b8:	mov	r3, #0
   165bc:	b	165d8 <flatcc_builder_extend_offset_vector@@Base+0x50>
   165c0:	ldr	r3, [fp, #-12]
   165c4:	lsl	r3, r3, #2
   165c8:	mov	r1, r3
   165cc:	ldr	r0, [fp, #-8]
   165d0:	bl	140fc <flatcc_builder_default_alloc@@Base+0x2f0>
   165d4:	mov	r3, r0
   165d8:	mov	r0, r3
   165dc:	sub	sp, fp, #4
   165e0:	pop	{fp, pc}

000165e4 <flatcc_builder_offset_vector_push@@Base>:
   165e4:	push	{fp, lr}
   165e8:	add	fp, sp, #4
   165ec:	sub	sp, sp, #16
   165f0:	str	r0, [fp, #-16]
   165f4:	str	r1, [fp, #-20]	; 0xffffffec
   165f8:	ldr	r3, [fp, #-16]
   165fc:	ldr	r3, [r3, #32]
   16600:	ldrh	r3, [r3, #14]
   16604:	cmp	r3, #5
   16608:	beq	1662c <flatcc_builder_offset_vector_push@@Base+0x48>
   1660c:	ldr	r3, [pc, #144]	; 166a4 <flatcc_builder_offset_vector_push@@Base+0xc0>
   16610:	add	r3, pc, r3
   16614:	ldr	r2, [pc, #140]	; 166a8 <flatcc_builder_offset_vector_push@@Base+0xc4>
   16618:	ldr	r1, [pc, #140]	; 166ac <flatcc_builder_offset_vector_push@@Base+0xc8>
   1661c:	add	r1, pc, r1
   16620:	ldr	r0, [pc, #136]	; 166b0 <flatcc_builder_offset_vector_push@@Base+0xcc>
   16624:	add	r0, pc, r0
   16628:	bl	1234c <__assert_fail@plt>
   1662c:	ldr	r3, [fp, #-16]
   16630:	ldr	r3, [r3, #32]
   16634:	ldr	r3, [r3, #20]
   16638:	cmn	r3, #-1073741823	; 0xc0000001
   1663c:	bne	16648 <flatcc_builder_offset_vector_push@@Base+0x64>
   16640:	mov	r3, #0
   16644:	b	16698 <flatcc_builder_offset_vector_push@@Base+0xb4>
   16648:	ldr	r3, [fp, #-16]
   1664c:	ldr	r3, [r3, #32]
   16650:	ldr	r2, [fp, #-16]
   16654:	ldr	r2, [r2, #32]
   16658:	ldr	r2, [r2, #20]
   1665c:	add	r2, r2, #1
   16660:	str	r2, [r3, #20]
   16664:	mov	r1, #4
   16668:	ldr	r0, [fp, #-16]
   1666c:	bl	140fc <flatcc_builder_default_alloc@@Base+0x2f0>
   16670:	str	r0, [fp, #-8]
   16674:	ldr	r3, [fp, #-8]
   16678:	cmp	r3, #0
   1667c:	bne	16688 <flatcc_builder_offset_vector_push@@Base+0xa4>
   16680:	mov	r3, #0
   16684:	b	16698 <flatcc_builder_offset_vector_push@@Base+0xb4>
   16688:	ldr	r3, [fp, #-8]
   1668c:	ldr	r2, [fp, #-20]	; 0xffffffec
   16690:	str	r2, [r3]
   16694:	ldr	r3, [fp, #-8]
   16698:	mov	r0, r3
   1669c:	sub	sp, fp, #4
   166a0:	pop	{fp, pc}
   166a4:	andeq	r7, r0, r8, asr r2
   166a8:	andeq	r0, r0, r6, lsr #7
   166ac:			; <UNDEFINED> instruction: 0x00006cb8
   166b0:	andeq	r6, r0, r0, ror #28

000166b4 <flatcc_builder_append_offset_vector@@Base>:
   166b4:	push	{fp, lr}
   166b8:	add	fp, sp, #4
   166bc:	sub	sp, sp, #16
   166c0:	str	r0, [fp, #-8]
   166c4:	str	r1, [fp, #-12]
   166c8:	str	r2, [fp, #-16]
   166cc:	ldr	r3, [fp, #-8]
   166d0:	ldr	r3, [r3, #32]
   166d4:	ldrh	r3, [r3, #14]
   166d8:	cmp	r3, #5
   166dc:	beq	16700 <flatcc_builder_append_offset_vector@@Base+0x4c>
   166e0:	ldr	r3, [pc, #100]	; 1674c <flatcc_builder_append_offset_vector@@Base+0x98>
   166e4:	add	r3, pc, r3
   166e8:	mov	r2, #948	; 0x3b4
   166ec:	ldr	r1, [pc, #92]	; 16750 <flatcc_builder_append_offset_vector@@Base+0x9c>
   166f0:	add	r1, pc, r1
   166f4:	ldr	r0, [pc, #88]	; 16754 <flatcc_builder_append_offset_vector@@Base+0xa0>
   166f8:	add	r0, pc, r0
   166fc:	bl	1234c <__assert_fail@plt>
   16700:	mvn	r2, #-1073741824	; 0xc0000000
   16704:	ldr	r1, [fp, #-16]
   16708:	ldr	r0, [fp, #-8]
   1670c:	bl	16274 <flatcc_builder_end_struct@@Base+0xa0>
   16710:	mov	r3, r0
   16714:	cmp	r3, #0
   16718:	beq	16724 <flatcc_builder_append_offset_vector@@Base+0x70>
   1671c:	mov	r3, #0
   16720:	b	16740 <flatcc_builder_append_offset_vector@@Base+0x8c>
   16724:	ldr	r3, [fp, #-16]
   16728:	lsl	r3, r3, #2
   1672c:	mov	r2, r3
   16730:	ldr	r1, [fp, #-12]
   16734:	ldr	r0, [fp, #-8]
   16738:	bl	141f4 <flatcc_builder_default_alloc@@Base+0x3e8>
   1673c:	mov	r3, r0
   16740:	mov	r0, r3
   16744:	sub	sp, fp, #4
   16748:	pop	{fp, pc}
   1674c:	andeq	r7, r0, r8, lsr #3
   16750:	andeq	r6, r0, r4, ror #23
   16754:	andeq	r6, r0, ip, lsl #27

00016758 <flatcc_builder_extend_string@@Base>:
   16758:	push	{fp, lr}
   1675c:	add	fp, sp, #4
   16760:	sub	sp, sp, #8
   16764:	str	r0, [fp, #-8]
   16768:	str	r1, [fp, #-12]
   1676c:	ldr	r3, [fp, #-8]
   16770:	ldr	r3, [r3, #32]
   16774:	ldrh	r3, [r3, #14]
   16778:	cmp	r3, #6
   1677c:	beq	167a0 <flatcc_builder_extend_string@@Base+0x48>
   16780:	ldr	r3, [pc, #88]	; 167e0 <flatcc_builder_extend_string@@Base+0x88>
   16784:	add	r3, pc, r3
   16788:	ldr	r2, [pc, #84]	; 167e4 <flatcc_builder_extend_string@@Base+0x8c>
   1678c:	ldr	r1, [pc, #84]	; 167e8 <flatcc_builder_extend_string@@Base+0x90>
   16790:	add	r1, pc, r1
   16794:	ldr	r0, [pc, #80]	; 167ec <flatcc_builder_extend_string@@Base+0x94>
   16798:	add	r0, pc, r0
   1679c:	bl	1234c <__assert_fail@plt>
   167a0:	mvn	r2, #0
   167a4:	ldr	r1, [fp, #-12]
   167a8:	ldr	r0, [fp, #-8]
   167ac:	bl	16274 <flatcc_builder_end_struct@@Base+0xa0>
   167b0:	mov	r3, r0
   167b4:	cmp	r3, #0
   167b8:	beq	167c4 <flatcc_builder_extend_string@@Base+0x6c>
   167bc:	mov	r3, #0
   167c0:	b	167d4 <flatcc_builder_extend_string@@Base+0x7c>
   167c4:	ldr	r1, [fp, #-12]
   167c8:	ldr	r0, [fp, #-8]
   167cc:	bl	140fc <flatcc_builder_default_alloc@@Base+0x2f0>
   167d0:	mov	r3, r0
   167d4:	mov	r0, r3
   167d8:	sub	sp, fp, #4
   167dc:	pop	{fp, pc}
   167e0:	andeq	r7, r0, ip, lsr #2
   167e4:			; <UNDEFINED> instruction: 0x000003bd
   167e8:	andeq	r6, r0, r4, asr #22
   167ec:	andeq	r6, r0, r0, lsr #26

000167f0 <flatcc_builder_append_string@@Base>:
   167f0:	push	{fp, lr}
   167f4:	add	fp, sp, #4
   167f8:	sub	sp, sp, #16
   167fc:	str	r0, [fp, #-8]
   16800:	str	r1, [fp, #-12]
   16804:	str	r2, [fp, #-16]
   16808:	ldr	r3, [fp, #-8]
   1680c:	ldr	r3, [r3, #32]
   16810:	ldrh	r3, [r3, #14]
   16814:	cmp	r3, #6
   16818:	beq	1683c <flatcc_builder_append_string@@Base+0x4c>
   1681c:	ldr	r3, [pc, #92]	; 16880 <flatcc_builder_append_string@@Base+0x90>
   16820:	add	r3, pc, r3
   16824:	ldr	r2, [pc, #88]	; 16884 <flatcc_builder_append_string@@Base+0x94>
   16828:	ldr	r1, [pc, #88]	; 16888 <flatcc_builder_append_string@@Base+0x98>
   1682c:	add	r1, pc, r1
   16830:	ldr	r0, [pc, #84]	; 1688c <flatcc_builder_append_string@@Base+0x9c>
   16834:	add	r0, pc, r0
   16838:	bl	1234c <__assert_fail@plt>
   1683c:	mvn	r2, #0
   16840:	ldr	r1, [fp, #-16]
   16844:	ldr	r0, [fp, #-8]
   16848:	bl	16274 <flatcc_builder_end_struct@@Base+0xa0>
   1684c:	mov	r3, r0
   16850:	cmp	r3, #0
   16854:	beq	16860 <flatcc_builder_append_string@@Base+0x70>
   16858:	mov	r3, #0
   1685c:	b	16874 <flatcc_builder_append_string@@Base+0x84>
   16860:	ldr	r2, [fp, #-16]
   16864:	ldr	r1, [fp, #-12]
   16868:	ldr	r0, [fp, #-8]
   1686c:	bl	141f4 <flatcc_builder_default_alloc@@Base+0x3e8>
   16870:	mov	r3, r0
   16874:	mov	r0, r3
   16878:	sub	sp, fp, #4
   1687c:	pop	{fp, pc}
   16880:	strheq	r7, [r0], -r0
   16884:	andeq	r0, r0, r6, asr #7
   16888:	andeq	r6, r0, r8, lsr #21
   1688c:	andeq	r6, r0, r4, lsl #25

00016890 <flatcc_builder_append_string_str@@Base>:
   16890:	push	{fp, lr}
   16894:	add	fp, sp, #4
   16898:	sub	sp, sp, #8
   1689c:	str	r0, [fp, #-8]
   168a0:	str	r1, [fp, #-12]
   168a4:	ldr	r0, [fp, #-12]
   168a8:	bl	12304 <strlen@plt>
   168ac:	mov	r3, r0
   168b0:	mov	r2, r3
   168b4:	ldr	r1, [fp, #-12]
   168b8:	ldr	r0, [fp, #-8]
   168bc:	bl	167f0 <flatcc_builder_append_string@@Base>
   168c0:	mov	r3, r0
   168c4:	mov	r0, r3
   168c8:	sub	sp, fp, #4
   168cc:	pop	{fp, pc}

000168d0 <flatcc_builder_append_string_strn@@Base>:
   168d0:	push	{fp, lr}
   168d4:	add	fp, sp, #4
   168d8:	sub	sp, sp, #16
   168dc:	str	r0, [fp, #-8]
   168e0:	str	r1, [fp, #-12]
   168e4:	str	r2, [fp, #-16]
   168e8:	ldr	r1, [fp, #-16]
   168ec:	ldr	r0, [fp, #-12]
   168f0:	bl	13db8 <main@@Base+0x200>
   168f4:	mov	r3, r0
   168f8:	mov	r2, r3
   168fc:	ldr	r1, [fp, #-12]
   16900:	ldr	r0, [fp, #-8]
   16904:	bl	167f0 <flatcc_builder_append_string@@Base>
   16908:	mov	r3, r0
   1690c:	mov	r0, r3
   16910:	sub	sp, fp, #4
   16914:	pop	{fp, pc}

00016918 <flatcc_builder_truncate_vector@@Base>:
   16918:	push	{fp, lr}
   1691c:	add	fp, sp, #4
   16920:	sub	sp, sp, #8
   16924:	str	r0, [fp, #-8]
   16928:	str	r1, [fp, #-12]
   1692c:	ldr	r3, [fp, #-8]
   16930:	ldr	r3, [r3, #32]
   16934:	ldrh	r3, [r3, #14]
   16938:	cmp	r3, #4
   1693c:	beq	16960 <flatcc_builder_truncate_vector@@Base+0x48>
   16940:	ldr	r3, [pc, #192]	; 16a08 <flatcc_builder_truncate_vector@@Base+0xf0>
   16944:	add	r3, pc, r3
   16948:	ldr	r2, [pc, #188]	; 16a0c <flatcc_builder_truncate_vector@@Base+0xf4>
   1694c:	ldr	r1, [pc, #188]	; 16a10 <flatcc_builder_truncate_vector@@Base+0xf8>
   16950:	add	r1, pc, r1
   16954:	ldr	r0, [pc, #184]	; 16a14 <flatcc_builder_truncate_vector@@Base+0xfc>
   16958:	add	r0, pc, r0
   1695c:	bl	1234c <__assert_fail@plt>
   16960:	ldr	r3, [fp, #-8]
   16964:	ldr	r3, [r3, #32]
   16968:	ldr	r2, [r3, #20]
   1696c:	ldr	r3, [fp, #-12]
   16970:	cmp	r2, r3
   16974:	bcs	169b8 <flatcc_builder_truncate_vector@@Base+0xa0>
   16978:	ldr	r3, [fp, #-8]
   1697c:	ldr	r3, [r3, #32]
   16980:	ldr	r2, [r3, #20]
   16984:	ldr	r3, [fp, #-12]
   16988:	cmp	r2, r3
   1698c:	bcs	169b0 <flatcc_builder_truncate_vector@@Base+0x98>
   16990:	ldr	r3, [pc, #128]	; 16a18 <flatcc_builder_truncate_vector@@Base+0x100>
   16994:	add	r3, pc, r3
   16998:	ldr	r2, [pc, #124]	; 16a1c <flatcc_builder_truncate_vector@@Base+0x104>
   1699c:	ldr	r1, [pc, #124]	; 16a20 <flatcc_builder_truncate_vector@@Base+0x108>
   169a0:	add	r1, pc, r1
   169a4:	ldr	r0, [pc, #120]	; 16a24 <flatcc_builder_truncate_vector@@Base+0x10c>
   169a8:	add	r0, pc, r0
   169ac:	bl	1234c <__assert_fail@plt>
   169b0:	mvn	r3, #0
   169b4:	b	169fc <flatcc_builder_truncate_vector@@Base+0xe4>
   169b8:	ldr	r3, [fp, #-8]
   169bc:	ldr	r3, [r3, #32]
   169c0:	ldr	r2, [fp, #-8]
   169c4:	ldr	r2, [r2, #32]
   169c8:	ldr	r1, [r2, #20]
   169cc:	ldr	r2, [fp, #-12]
   169d0:	sub	r2, r1, r2
   169d4:	str	r2, [r3, #20]
   169d8:	ldr	r3, [fp, #-8]
   169dc:	ldr	r3, [r3, #32]
   169e0:	ldr	r3, [r3, #16]
   169e4:	ldr	r2, [fp, #-12]
   169e8:	mul	r3, r2, r3
   169ec:	mov	r1, r3
   169f0:	ldr	r0, [fp, #-8]
   169f4:	bl	14198 <flatcc_builder_default_alloc@@Base+0x38c>
   169f8:	mov	r3, #0
   169fc:	mov	r0, r3
   16a00:	sub	sp, fp, #4
   16a04:	pop	{fp, pc}
   16a08:	andeq	r6, r0, ip, lsr #31
   16a0c:	ldrdeq	r0, [r0], -r9
   16a10:	andeq	r6, r0, r4, lsl #19
   16a14:	andeq	r6, r0, r0, asr #21
   16a18:	andeq	r6, r0, ip, asr pc
   16a1c:	ldrdeq	r0, [r0], -sl
   16a20:	andeq	r6, r0, r4, lsr r9
   16a24:	andeq	r6, r0, ip, lsr fp

00016a28 <flatcc_builder_truncate_offset_vector@@Base>:
   16a28:	push	{fp, lr}
   16a2c:	add	fp, sp, #4
   16a30:	sub	sp, sp, #8
   16a34:	str	r0, [fp, #-8]
   16a38:	str	r1, [fp, #-12]
   16a3c:	ldr	r3, [fp, #-8]
   16a40:	ldr	r3, [r3, #32]
   16a44:	ldrh	r3, [r3, #14]
   16a48:	cmp	r3, #5
   16a4c:	beq	16a70 <flatcc_builder_truncate_offset_vector@@Base+0x48>
   16a50:	ldr	r3, [pc, #192]	; 16b18 <flatcc_builder_truncate_offset_vector@@Base+0xf0>
   16a54:	add	r3, pc, r3
   16a58:	ldr	r2, [pc, #188]	; 16b1c <flatcc_builder_truncate_offset_vector@@Base+0xf4>
   16a5c:	ldr	r1, [pc, #188]	; 16b20 <flatcc_builder_truncate_offset_vector@@Base+0xf8>
   16a60:	add	r1, pc, r1
   16a64:	ldr	r0, [pc, #184]	; 16b24 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   16a68:	add	r0, pc, r0
   16a6c:	bl	1234c <__assert_fail@plt>
   16a70:	ldr	r3, [fp, #-8]
   16a74:	ldr	r3, [r3, #32]
   16a78:	ldr	r2, [r3, #20]
   16a7c:	ldr	r3, [fp, #-12]
   16a80:	cmp	r2, r3
   16a84:	bcs	16ac8 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   16a88:	ldr	r3, [fp, #-8]
   16a8c:	ldr	r3, [r3, #32]
   16a90:	ldr	r2, [r3, #20]
   16a94:	ldr	r3, [fp, #-12]
   16a98:	cmp	r2, r3
   16a9c:	bcs	16ac0 <flatcc_builder_truncate_offset_vector@@Base+0x98>
   16aa0:	ldr	r3, [pc, #128]	; 16b28 <flatcc_builder_truncate_offset_vector@@Base+0x100>
   16aa4:	add	r3, pc, r3
   16aa8:	ldr	r2, [pc, #124]	; 16b2c <flatcc_builder_truncate_offset_vector@@Base+0x104>
   16aac:	ldr	r1, [pc, #124]	; 16b30 <flatcc_builder_truncate_offset_vector@@Base+0x108>
   16ab0:	add	r1, pc, r1
   16ab4:	ldr	r0, [pc, #120]	; 16b34 <flatcc_builder_truncate_offset_vector@@Base+0x10c>
   16ab8:	add	r0, pc, r0
   16abc:	bl	1234c <__assert_fail@plt>
   16ac0:	mvn	r3, #0
   16ac4:	b	16b0c <flatcc_builder_truncate_offset_vector@@Base+0xe4>
   16ac8:	ldr	r3, [fp, #-8]
   16acc:	ldr	r3, [r3, #32]
   16ad0:	ldr	r2, [fp, #-8]
   16ad4:	ldr	r2, [r2, #32]
   16ad8:	ldr	r1, [r2, #20]
   16adc:	ldr	r2, [fp, #-12]
   16ae0:	sub	r2, r1, r2
   16ae4:	str	r2, [r3, #20]
   16ae8:	ldr	r3, [fp, #-8]
   16aec:	ldr	r3, [r3, #32]
   16af0:	ldr	r3, [r3, #16]
   16af4:	ldr	r2, [fp, #-12]
   16af8:	mul	r3, r2, r3
   16afc:	mov	r1, r3
   16b00:	ldr	r0, [fp, #-8]
   16b04:	bl	14198 <flatcc_builder_default_alloc@@Base+0x38c>
   16b08:	mov	r3, #0
   16b0c:	mov	r0, r3
   16b10:	sub	sp, fp, #4
   16b14:	pop	{fp, pc}
   16b18:			; <UNDEFINED> instruction: 0x00006ebc
   16b1c:	andeq	r0, r0, r2, ror #7
   16b20:	andeq	r6, r0, r4, ror r8
   16b24:	andeq	r6, r0, ip, lsl sl
   16b28:	andeq	r6, r0, ip, ror #28
   16b2c:	andeq	r0, r0, r3, ror #7
   16b30:	andeq	r6, r0, r4, lsr #16
   16b34:	andeq	r6, r0, r0, asr sl

00016b38 <flatcc_builder_truncate_string@@Base>:
   16b38:	push	{fp, lr}
   16b3c:	add	fp, sp, #4
   16b40:	sub	sp, sp, #8
   16b44:	str	r0, [fp, #-8]
   16b48:	str	r1, [fp, #-12]
   16b4c:	ldr	r3, [fp, #-8]
   16b50:	ldr	r3, [r3, #32]
   16b54:	ldrh	r3, [r3, #14]
   16b58:	cmp	r3, #6
   16b5c:	beq	16b80 <flatcc_builder_truncate_string@@Base+0x48>
   16b60:	ldr	r3, [pc, #172]	; 16c14 <flatcc_builder_truncate_string@@Base+0xdc>
   16b64:	add	r3, pc, r3
   16b68:	ldr	r2, [pc, #168]	; 16c18 <flatcc_builder_truncate_string@@Base+0xe0>
   16b6c:	ldr	r1, [pc, #168]	; 16c1c <flatcc_builder_truncate_string@@Base+0xe4>
   16b70:	add	r1, pc, r1
   16b74:	ldr	r0, [pc, #164]	; 16c20 <flatcc_builder_truncate_string@@Base+0xe8>
   16b78:	add	r0, pc, r0
   16b7c:	bl	1234c <__assert_fail@plt>
   16b80:	ldr	r3, [fp, #-8]
   16b84:	ldr	r3, [r3, #32]
   16b88:	ldr	r2, [r3, #20]
   16b8c:	ldr	r3, [fp, #-12]
   16b90:	cmp	r2, r3
   16b94:	bcs	16bd8 <flatcc_builder_truncate_string@@Base+0xa0>
   16b98:	ldr	r3, [fp, #-8]
   16b9c:	ldr	r3, [r3, #32]
   16ba0:	ldr	r2, [r3, #20]
   16ba4:	ldr	r3, [fp, #-12]
   16ba8:	cmp	r2, r3
   16bac:	bcs	16bd0 <flatcc_builder_truncate_string@@Base+0x98>
   16bb0:	ldr	r3, [pc, #108]	; 16c24 <flatcc_builder_truncate_string@@Base+0xec>
   16bb4:	add	r3, pc, r3
   16bb8:	mov	r2, #1004	; 0x3ec
   16bbc:	ldr	r1, [pc, #100]	; 16c28 <flatcc_builder_truncate_string@@Base+0xf0>
   16bc0:	add	r1, pc, r1
   16bc4:	ldr	r0, [pc, #96]	; 16c2c <flatcc_builder_truncate_string@@Base+0xf4>
   16bc8:	add	r0, pc, r0
   16bcc:	bl	1234c <__assert_fail@plt>
   16bd0:	mvn	r3, #0
   16bd4:	b	16c08 <flatcc_builder_truncate_string@@Base+0xd0>
   16bd8:	ldr	r3, [fp, #-8]
   16bdc:	ldr	r3, [r3, #32]
   16be0:	ldr	r2, [fp, #-8]
   16be4:	ldr	r2, [r2, #32]
   16be8:	ldr	r1, [r2, #20]
   16bec:	ldr	r2, [fp, #-12]
   16bf0:	sub	r2, r1, r2
   16bf4:	str	r2, [r3, #20]
   16bf8:	ldr	r1, [fp, #-12]
   16bfc:	ldr	r0, [fp, #-8]
   16c00:	bl	14198 <flatcc_builder_default_alloc@@Base+0x38c>
   16c04:	mov	r3, #0
   16c08:	mov	r0, r3
   16c0c:	sub	sp, fp, #4
   16c10:	pop	{fp, pc}
   16c14:	ldrdeq	r6, [r0], -r4
   16c18:	andeq	r0, r0, fp, ror #7
   16c1c:	andeq	r6, r0, r4, ror #14
   16c20:	andeq	r6, r0, r0, asr #18
   16c24:	andeq	r6, r0, r4, lsl #27
   16c28:	andeq	r6, r0, r4, lsl r7
   16c2c:	andeq	r6, r0, ip, ror r9

00016c30 <flatcc_builder_start_vector@@Base>:
   16c30:	push	{fp, lr}
   16c34:	add	fp, sp, #4
   16c38:	sub	sp, sp, #16
   16c3c:	str	r0, [fp, #-8]
   16c40:	str	r1, [fp, #-12]
   16c44:	str	r3, [fp, #-20]	; 0xffffffec
   16c48:	strh	r2, [fp, #-14]
   16c4c:	sub	r3, fp, #14
   16c50:	mov	r1, #4
   16c54:	mov	r0, r3
   16c58:	bl	14d10 <flatcc_builder_clear@@Base+0xf8>
   16c5c:	ldrh	r3, [fp, #-14]
   16c60:	mov	r1, r3
   16c64:	ldr	r0, [fp, #-8]
   16c68:	bl	1505c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16c6c:	mov	r3, r0
   16c70:	cmp	r3, #0
   16c74:	beq	16c80 <flatcc_builder_start_vector@@Base+0x50>
   16c78:	mvn	r3, #0
   16c7c:	b	16cd0 <flatcc_builder_start_vector@@Base+0xa0>
   16c80:	ldr	r3, [fp, #-8]
   16c84:	ldr	r3, [r3, #32]
   16c88:	ldr	r2, [fp, #-12]
   16c8c:	str	r2, [r3, #16]
   16c90:	ldr	r3, [fp, #-8]
   16c94:	ldr	r3, [r3, #32]
   16c98:	mov	r2, #0
   16c9c:	str	r2, [r3, #20]
   16ca0:	ldr	r3, [fp, #-8]
   16ca4:	ldr	r3, [r3, #32]
   16ca8:	ldr	r2, [fp, #-20]	; 0xffffffec
   16cac:	str	r2, [r3, #24]
   16cb0:	ldr	r3, [fp, #-8]
   16cb4:	ldr	r3, [r3, #32]
   16cb8:	mov	r2, #4
   16cbc:	strh	r2, [r3, #14]
   16cc0:	mvn	r1, #3
   16cc4:	ldr	r0, [fp, #-8]
   16cc8:	bl	13fd4 <flatcc_builder_default_alloc@@Base+0x1c8>
   16ccc:	mov	r3, #0
   16cd0:	mov	r0, r3
   16cd4:	sub	sp, fp, #4
   16cd8:	pop	{fp, pc}

00016cdc <flatcc_builder_start_offset_vector@@Base>:
   16cdc:	push	{fp, lr}
   16ce0:	add	fp, sp, #4
   16ce4:	sub	sp, sp, #8
   16ce8:	str	r0, [fp, #-8]
   16cec:	mov	r1, #4
   16cf0:	ldr	r0, [fp, #-8]
   16cf4:	bl	1505c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16cf8:	mov	r3, r0
   16cfc:	cmp	r3, #0
   16d00:	beq	16d0c <flatcc_builder_start_offset_vector@@Base+0x30>
   16d04:	mvn	r3, #0
   16d08:	b	16d4c <flatcc_builder_start_offset_vector@@Base+0x70>
   16d0c:	ldr	r3, [fp, #-8]
   16d10:	ldr	r3, [r3, #32]
   16d14:	mov	r2, #4
   16d18:	str	r2, [r3, #16]
   16d1c:	ldr	r3, [fp, #-8]
   16d20:	ldr	r3, [r3, #32]
   16d24:	mov	r2, #0
   16d28:	str	r2, [r3, #20]
   16d2c:	ldr	r3, [fp, #-8]
   16d30:	ldr	r3, [r3, #32]
   16d34:	mov	r2, #5
   16d38:	strh	r2, [r3, #14]
   16d3c:	mvn	r1, #3
   16d40:	ldr	r0, [fp, #-8]
   16d44:	bl	13fd4 <flatcc_builder_default_alloc@@Base+0x1c8>
   16d48:	mov	r3, #0
   16d4c:	mov	r0, r3
   16d50:	sub	sp, fp, #4
   16d54:	pop	{fp, pc}

00016d58 <flatcc_builder_create_offset_vector@@Base>:
   16d58:	push	{fp, lr}
   16d5c:	add	fp, sp, #4
   16d60:	sub	sp, sp, #24
   16d64:	str	r0, [fp, #-16]
   16d68:	str	r1, [fp, #-20]	; 0xffffffec
   16d6c:	str	r2, [fp, #-24]	; 0xffffffe8
   16d70:	ldr	r0, [fp, #-16]
   16d74:	bl	16cdc <flatcc_builder_start_offset_vector@@Base>
   16d78:	mov	r3, r0
   16d7c:	cmp	r3, #0
   16d80:	beq	16d8c <flatcc_builder_create_offset_vector@@Base+0x34>
   16d84:	mov	r3, #0
   16d88:	b	16dd4 <flatcc_builder_create_offset_vector@@Base+0x7c>
   16d8c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16d90:	ldr	r0, [fp, #-16]
   16d94:	bl	16588 <flatcc_builder_extend_offset_vector@@Base>
   16d98:	str	r0, [fp, #-8]
   16d9c:	ldr	r3, [fp, #-8]
   16da0:	cmp	r3, #0
   16da4:	bne	16db0 <flatcc_builder_create_offset_vector@@Base+0x58>
   16da8:	mov	r3, #0
   16dac:	b	16dd4 <flatcc_builder_create_offset_vector@@Base+0x7c>
   16db0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16db4:	lsl	r3, r3, #2
   16db8:	mov	r2, r3
   16dbc:	ldr	r1, [fp, #-20]	; 0xffffffec
   16dc0:	ldr	r0, [fp, #-8]
   16dc4:	bl	122bc <memcpy@plt>
   16dc8:	ldr	r0, [fp, #-16]
   16dcc:	bl	18330 <flatcc_builder_end_offset_vector@@Base>
   16dd0:	mov	r3, r0
   16dd4:	mov	r0, r3
   16dd8:	sub	sp, fp, #4
   16ddc:	pop	{fp, pc}

00016de0 <flatcc_builder_start_string@@Base>:
   16de0:	push	{fp, lr}
   16de4:	add	fp, sp, #4
   16de8:	sub	sp, sp, #8
   16dec:	str	r0, [fp, #-8]
   16df0:	mov	r1, #1
   16df4:	ldr	r0, [fp, #-8]
   16df8:	bl	1505c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16dfc:	mov	r3, r0
   16e00:	cmp	r3, #0
   16e04:	beq	16e10 <flatcc_builder_start_string@@Base+0x30>
   16e08:	mvn	r3, #0
   16e0c:	b	16e50 <flatcc_builder_start_string@@Base+0x70>
   16e10:	ldr	r3, [fp, #-8]
   16e14:	ldr	r3, [r3, #32]
   16e18:	mov	r2, #1
   16e1c:	str	r2, [r3, #16]
   16e20:	ldr	r3, [fp, #-8]
   16e24:	ldr	r3, [r3, #32]
   16e28:	mov	r2, #0
   16e2c:	str	r2, [r3, #20]
   16e30:	ldr	r3, [fp, #-8]
   16e34:	ldr	r3, [r3, #32]
   16e38:	mov	r2, #6
   16e3c:	strh	r2, [r3, #14]
   16e40:	mvn	r1, #3
   16e44:	ldr	r0, [fp, #-8]
   16e48:	bl	13fd4 <flatcc_builder_default_alloc@@Base+0x1c8>
   16e4c:	mov	r3, #0
   16e50:	mov	r0, r3
   16e54:	sub	sp, fp, #4
   16e58:	pop	{fp, pc}

00016e5c <flatcc_builder_reserve_table@@Base>:
   16e5c:	push	{fp, lr}
   16e60:	add	fp, sp, #4
   16e64:	sub	sp, sp, #8
   16e68:	str	r0, [fp, #-8]
   16e6c:	str	r1, [fp, #-12]
   16e70:	ldr	r3, [fp, #-12]
   16e74:	cmp	r3, #0
   16e78:	bge	16e9c <flatcc_builder_reserve_table@@Base+0x40>
   16e7c:	ldr	r3, [pc, #52]	; 16eb8 <flatcc_builder_reserve_table@@Base+0x5c>
   16e80:	add	r3, pc, r3
   16e84:	ldr	r2, [pc, #48]	; 16ebc <flatcc_builder_reserve_table@@Base+0x60>
   16e88:	ldr	r1, [pc, #48]	; 16ec0 <flatcc_builder_reserve_table@@Base+0x64>
   16e8c:	add	r1, pc, r1
   16e90:	ldr	r0, [pc, #44]	; 16ec4 <flatcc_builder_reserve_table@@Base+0x68>
   16e94:	add	r0, pc, r0
   16e98:	bl	1234c <__assert_fail@plt>
   16e9c:	ldr	r1, [fp, #-12]
   16ea0:	ldr	r0, [fp, #-8]
   16ea4:	bl	14544 <flatcc_builder_default_alloc@@Base+0x738>
   16ea8:	mov	r3, r0
   16eac:	mov	r0, r3
   16eb0:	sub	sp, fp, #4
   16eb4:	pop	{fp, pc}
   16eb8:	ldrdeq	r6, [r0], -r8
   16ebc:	andeq	r0, r0, r9, lsr #8
   16ec0:	andeq	r6, r0, r8, asr #8
   16ec4:	ldrdeq	r6, [r0], -r4

00016ec8 <flatcc_builder_start_table@@Base>:
   16ec8:	push	{fp, lr}
   16ecc:	add	fp, sp, #4
   16ed0:	sub	sp, sp, #8
   16ed4:	str	r0, [fp, #-8]
   16ed8:	str	r1, [fp, #-12]
   16edc:	mov	r1, #4
   16ee0:	ldr	r0, [fp, #-8]
   16ee4:	bl	1505c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16ee8:	mov	r3, r0
   16eec:	cmp	r3, #0
   16ef0:	beq	16efc <flatcc_builder_start_table@@Base+0x34>
   16ef4:	mvn	r3, #0
   16ef8:	b	16fd0 <flatcc_builder_start_table@@Base+0x108>
   16efc:	ldr	r3, [fp, #-8]
   16f00:	ldr	r3, [r3, #32]
   16f04:	ldr	r2, [fp, #-8]
   16f08:	ldr	r2, [r2, #4]
   16f0c:	mov	r1, r2
   16f10:	ldr	r2, [fp, #-8]
   16f14:	ldr	r2, [r2, #52]	; 0x34
   16f18:	sub	r2, r1, r2
   16f1c:	str	r2, [r3, #16]
   16f20:	ldr	r3, [fp, #-8]
   16f24:	ldr	r3, [r3, #32]
   16f28:	ldr	r2, [fp, #-8]
   16f2c:	ldr	r2, [r2]
   16f30:	mov	r1, r2
   16f34:	ldr	r2, [fp, #-8]
   16f38:	ldr	r2, [r2, #76]	; 0x4c
   16f3c:	sub	r2, r1, r2
   16f40:	str	r2, [r3, #20]
   16f44:	ldr	r3, [fp, #-8]
   16f48:	ldr	r3, [r3, #32]
   16f4c:	ldr	r2, [fp, #-8]
   16f50:	ldr	r2, [r2, #12]
   16f54:	str	r2, [r3, #24]
   16f58:	ldr	r3, [fp, #-8]
   16f5c:	ldr	r3, [r3, #32]
   16f60:	ldr	r2, [fp, #-8]
   16f64:	ldrh	r2, [r2, #8]
   16f68:	strh	r2, [r3, #28]
   16f6c:	ldr	r3, [fp, #-8]
   16f70:	mov	r2, #0
   16f74:	str	r2, [r3, #12]
   16f78:	ldr	r3, [fp, #-8]
   16f7c:	ldr	r2, [pc, #88]	; 16fdc <flatcc_builder_start_table@@Base+0x114>
   16f80:	str	r2, [r3, #12]
   16f84:	ldr	r3, [fp, #-8]
   16f88:	mov	r2, #0
   16f8c:	strh	r2, [r3, #8]
   16f90:	ldr	r3, [fp, #-8]
   16f94:	ldr	r3, [r3, #32]
   16f98:	mov	r2, #3
   16f9c:	strh	r2, [r3, #14]
   16fa0:	ldr	r1, [fp, #-12]
   16fa4:	ldr	r0, [fp, #-8]
   16fa8:	bl	14544 <flatcc_builder_default_alloc@@Base+0x738>
   16fac:	mov	r3, r0
   16fb0:	cmp	r3, #0
   16fb4:	beq	16fc0 <flatcc_builder_start_table@@Base+0xf8>
   16fb8:	mvn	r3, #0
   16fbc:	b	16fd0 <flatcc_builder_start_table@@Base+0x108>
   16fc0:	ldr	r1, [pc, #24]	; 16fe0 <flatcc_builder_start_table@@Base+0x118>
   16fc4:	ldr	r0, [fp, #-8]
   16fc8:	bl	13fd4 <flatcc_builder_default_alloc@@Base+0x1c8>
   16fcc:	mov	r3, #0
   16fd0:	mov	r0, r3
   16fd4:	sub	sp, fp, #4
   16fd8:	pop	{fp, pc}
   16fdc:	svccs	0x00693b52
   16fe0:	strdeq	pc, [r0], -ip

00016fe4 <flatcc_builder_create_vtable@@Base>:
   16fe4:	push	{fp, lr}
   16fe8:	add	fp, sp, #4
   16fec:	sub	sp, sp, #96	; 0x60
   16ff0:	str	r0, [fp, #-88]	; 0xffffffa8
   16ff4:	str	r1, [fp, #-92]	; 0xffffffa4
   16ff8:	mov	r3, r2
   16ffc:	strh	r3, [fp, #-94]	; 0xffffffa2
   17000:	mov	r3, #0
   17004:	str	r3, [fp, #-80]	; 0xffffffb0
   17008:	mov	r3, #0
   1700c:	str	r3, [fp, #-76]	; 0xffffffb4
   17010:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   17014:	cmp	r3, #0
   17018:	beq	17070 <flatcc_builder_create_vtable@@Base+0x8c>
   1701c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   17020:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   17024:	add	r3, r2, r3
   17028:	str	r3, [fp, #-80]	; 0xffffffb0
   1702c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17030:	add	r3, r3, #1
   17034:	lsl	r3, r3, #3
   17038:	sub	r2, fp, #4
   1703c:	add	r3, r2, r3
   17040:	ldr	r2, [fp, #-92]	; 0xffffffa4
   17044:	str	r2, [r3, #-76]	; 0xffffffb4
   17048:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1704c:	ldrh	r2, [fp, #-94]	; 0xffffffa2
   17050:	add	r3, r3, #1
   17054:	lsl	r3, r3, #3
   17058:	sub	r1, fp, #4
   1705c:	add	r3, r1, r3
   17060:	str	r2, [r3, #-72]	; 0xffffffb8
   17064:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17068:	add	r3, r3, #1
   1706c:	str	r3, [fp, #-76]	; 0xffffffb4
   17070:	ldr	r3, [fp, #-88]	; 0xffffffa8
   17074:	ldr	r3, [r3, #152]	; 0x98
   17078:	cmp	r3, #0
   1707c:	bne	170b8 <flatcc_builder_create_vtable@@Base+0xd4>
   17080:	ldr	r3, [fp, #-88]	; 0xffffffa8
   17084:	ldr	r3, [r3, #180]	; 0xb4
   17088:	cmp	r3, #0
   1708c:	bne	170b8 <flatcc_builder_create_vtable@@Base+0xd4>
   17090:	sub	r3, fp, #80	; 0x50
   17094:	mov	r1, r3
   17098:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1709c:	bl	1548c <flatcc_builder_get_user_frame_ptr@@Base+0x464>
   170a0:	str	r0, [fp, #-8]
   170a4:	ldr	r3, [fp, #-8]
   170a8:	cmp	r3, #0
   170ac:	bne	170ec <flatcc_builder_create_vtable@@Base+0x108>
   170b0:	mov	r3, #0
   170b4:	b	170f0 <flatcc_builder_create_vtable@@Base+0x10c>
   170b8:	sub	r3, fp, #80	; 0x50
   170bc:	mov	r1, r3
   170c0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   170c4:	bl	1538c <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   170c8:	str	r0, [fp, #-8]
   170cc:	ldr	r3, [fp, #-8]
   170d0:	cmp	r3, #0
   170d4:	bne	170e0 <flatcc_builder_create_vtable@@Base+0xfc>
   170d8:	mov	r3, #0
   170dc:	b	170f0 <flatcc_builder_create_vtable@@Base+0x10c>
   170e0:	ldr	r3, [fp, #-8]
   170e4:	add	r3, r3, #1
   170e8:	str	r3, [fp, #-8]
   170ec:	ldr	r3, [fp, #-8]
   170f0:	mov	r0, r3
   170f4:	sub	sp, fp, #4
   170f8:	pop	{fp, pc}

000170fc <flatcc_builder_create_cached_vtable@@Base>:
   170fc:	push	{fp, lr}
   17100:	add	fp, sp, #4
   17104:	sub	sp, sp, #48	; 0x30
   17108:	str	r0, [fp, #-32]	; 0xffffffe0
   1710c:	str	r1, [fp, #-36]	; 0xffffffdc
   17110:	str	r3, [fp, #-44]	; 0xffffffd4
   17114:	strh	r2, [fp, #-38]	; 0xffffffda
   17118:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1711c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17120:	bl	147b0 <flatcc_builder_default_alloc@@Base+0x9a4>
   17124:	str	r0, [fp, #-20]	; 0xffffffec
   17128:	ldr	r3, [fp, #-20]	; 0xffffffec
   1712c:	cmp	r3, #0
   17130:	bne	1713c <flatcc_builder_create_cached_vtable@@Base+0x40>
   17134:	mov	r3, #0
   17138:	b	17400 <flatcc_builder_create_cached_vtable@@Base+0x304>
   1713c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17140:	str	r3, [fp, #-12]
   17144:	ldr	r3, [fp, #-12]
   17148:	ldr	r3, [r3]
   1714c:	str	r3, [fp, #-16]
   17150:	mov	r3, #0
   17154:	str	r3, [fp, #-8]
   17158:	b	1725c <flatcc_builder_create_cached_vtable@@Base+0x160>
   1715c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17160:	ldr	r2, [r3, #100]	; 0x64
   17164:	ldr	r3, [fp, #-16]
   17168:	add	r3, r2, r3
   1716c:	str	r3, [fp, #-24]	; 0xffffffe8
   17170:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17174:	ldr	r2, [r3, #68]	; 0x44
   17178:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1717c:	ldr	r3, [r3, #8]
   17180:	add	r3, r2, r3
   17184:	str	r3, [fp, #-28]	; 0xffffffe4
   17188:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1718c:	ldrh	r3, [r3]
   17190:	ldrh	r2, [fp, #-38]	; 0xffffffda
   17194:	cmp	r2, r3
   17198:	bne	171bc <flatcc_builder_create_cached_vtable@@Base+0xc0>
   1719c:	ldrh	r3, [fp, #-38]	; 0xffffffda
   171a0:	mov	r2, r3
   171a4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   171a8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   171ac:	bl	122c8 <memcmp@plt>
   171b0:	mov	r3, r0
   171b4:	cmp	r3, #0
   171b8:	beq	171d8 <flatcc_builder_create_cached_vtable@@Base+0xdc>
   171bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171c0:	add	r3, r3, #12
   171c4:	str	r3, [fp, #-12]
   171c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171cc:	ldr	r3, [r3, #12]
   171d0:	str	r3, [fp, #-16]
   171d4:	b	1725c <flatcc_builder_create_cached_vtable@@Base+0x160>
   171d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171dc:	ldr	r2, [r3, #4]
   171e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   171e4:	ldr	r3, [r3, #152]	; 0x98
   171e8:	cmp	r2, r3
   171ec:	beq	17214 <flatcc_builder_create_cached_vtable@@Base+0x118>
   171f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171f4:	str	r3, [fp, #-8]
   171f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171fc:	add	r3, r3, #12
   17200:	str	r3, [fp, #-12]
   17204:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17208:	ldr	r3, [r3, #12]
   1720c:	str	r3, [fp, #-16]
   17210:	b	1725c <flatcc_builder_create_cached_vtable@@Base+0x160>
   17214:	ldr	r2, [fp, #-12]
   17218:	ldr	r3, [fp, #-20]	; 0xffffffec
   1721c:	cmp	r2, r3
   17220:	beq	17250 <flatcc_builder_create_cached_vtable@@Base+0x154>
   17224:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17228:	ldr	r2, [r3, #12]
   1722c:	ldr	r3, [fp, #-12]
   17230:	str	r2, [r3]
   17234:	ldr	r3, [fp, #-20]	; 0xffffffec
   17238:	ldr	r2, [r3]
   1723c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17240:	str	r2, [r3, #12]
   17244:	ldr	r3, [fp, #-20]	; 0xffffffec
   17248:	ldr	r2, [fp, #-16]
   1724c:	str	r2, [r3]
   17250:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17254:	ldr	r3, [r3]
   17258:	b	17400 <flatcc_builder_create_cached_vtable@@Base+0x304>
   1725c:	ldr	r3, [fp, #-16]
   17260:	cmp	r3, #0
   17264:	bne	1715c <flatcc_builder_create_cached_vtable@@Base+0x60>
   17268:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1726c:	ldr	r2, [r3, #124]	; 0x7c
   17270:	mov	r3, #0
   17274:	str	r3, [sp]
   17278:	mov	r3, #16
   1727c:	mov	r1, #6
   17280:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17284:	bl	1446c <flatcc_builder_default_alloc@@Base+0x660>
   17288:	str	r0, [fp, #-24]	; 0xffffffe8
   1728c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17290:	cmp	r3, #0
   17294:	bne	172a0 <flatcc_builder_create_cached_vtable@@Base+0x1a4>
   17298:	mov	r3, #0
   1729c:	b	17400 <flatcc_builder_create_cached_vtable@@Base+0x304>
   172a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   172a4:	ldr	r3, [r3, #124]	; 0x7c
   172a8:	str	r3, [fp, #-16]
   172ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   172b0:	ldr	r3, [r3, #124]	; 0x7c
   172b4:	add	r2, r3, #16
   172b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   172bc:	str	r2, [r3, #124]	; 0x7c
   172c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   172c4:	ldr	r2, [r3, #152]	; 0x98
   172c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172cc:	str	r2, [r3, #4]
   172d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   172d4:	ldr	r2, [r3]
   172d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172dc:	str	r2, [r3, #12]
   172e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   172e4:	ldr	r2, [fp, #-16]
   172e8:	str	r2, [r3]
   172ec:	ldrh	r3, [fp, #-38]	; 0xffffffda
   172f0:	mov	r2, r3
   172f4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   172f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   172fc:	bl	16fe4 <flatcc_builder_create_vtable@@Base>
   17300:	mov	r2, r0
   17304:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17308:	str	r2, [r3]
   1730c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17310:	ldr	r3, [r3]
   17314:	cmp	r3, #0
   17318:	bne	17324 <flatcc_builder_create_cached_vtable@@Base+0x228>
   1731c:	mov	r3, #0
   17320:	b	17400 <flatcc_builder_create_cached_vtable@@Base+0x304>
   17324:	ldr	r3, [fp, #-8]
   17328:	cmp	r3, #0
   1732c:	beq	17344 <flatcc_builder_create_cached_vtable@@Base+0x248>
   17330:	ldr	r3, [fp, #-8]
   17334:	ldr	r2, [r3, #8]
   17338:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1733c:	str	r2, [r3, #8]
   17340:	b	173f8 <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   17344:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17348:	ldr	r3, [r3, #172]	; 0xac
   1734c:	cmp	r3, #0
   17350:	beq	17380 <flatcc_builder_create_cached_vtable@@Base+0x284>
   17354:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17358:	ldr	r2, [r3, #172]	; 0xac
   1735c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17360:	ldr	r1, [r3, #120]	; 0x78
   17364:	ldrh	r3, [fp, #-38]	; 0xffffffda
   17368:	add	r3, r1, r3
   1736c:	cmp	r2, r3
   17370:	bcs	17380 <flatcc_builder_create_cached_vtable@@Base+0x284>
   17374:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17378:	bl	14828 <flatcc_builder_flush_vtable_cache@@Base>
   1737c:	b	173f8 <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   17380:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17384:	ldr	r2, [r3, #120]	; 0x78
   17388:	ldrh	r1, [fp, #-38]	; 0xffffffda
   1738c:	mov	r3, #0
   17390:	str	r3, [sp]
   17394:	mov	r3, r1
   17398:	mov	r1, #2
   1739c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   173a0:	bl	1446c <flatcc_builder_default_alloc@@Base+0x660>
   173a4:	str	r0, [fp, #-28]	; 0xffffffe4
   173a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   173ac:	cmp	r3, #0
   173b0:	bne	173bc <flatcc_builder_create_cached_vtable@@Base+0x2c0>
   173b4:	mvn	r3, #0
   173b8:	b	17400 <flatcc_builder_create_cached_vtable@@Base+0x304>
   173bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   173c0:	ldr	r2, [r3, #120]	; 0x78
   173c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173c8:	str	r2, [r3, #8]
   173cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   173d0:	ldr	r2, [r3, #120]	; 0x78
   173d4:	ldrh	r3, [fp, #-38]	; 0xffffffda
   173d8:	add	r2, r2, r3
   173dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   173e0:	str	r2, [r3, #120]	; 0x78
   173e4:	ldrh	r3, [fp, #-38]	; 0xffffffda
   173e8:	mov	r2, r3
   173ec:	ldr	r1, [fp, #-36]	; 0xffffffdc
   173f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   173f4:	bl	122bc <memcpy@plt>
   173f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173fc:	ldr	r3, [r3]
   17400:	mov	r0, r3
   17404:	sub	sp, fp, #4
   17408:	pop	{fp, pc}

0001740c <flatcc_builder_create_table@@Base>:
   1740c:	push	{r4, fp, lr}
   17410:	add	fp, sp, #8
   17414:	sub	sp, sp, #124	; 0x7c
   17418:	str	r0, [fp, #-120]	; 0xffffff88
   1741c:	str	r1, [fp, #-124]	; 0xffffff84
   17420:	str	r2, [fp, #-128]	; 0xffffff80
   17424:	strh	r3, [fp, #-130]	; 0xffffff7e
   17428:	ldr	r4, [pc, #728]	; 17708 <flatcc_builder_create_table@@Base+0x2fc>
   1742c:	add	r4, pc, r4
   17430:	ldr	r3, [fp, #8]
   17434:	cmp	r3, #0
   17438:	bge	1745c <flatcc_builder_create_table@@Base+0x50>
   1743c:	ldr	r3, [pc, #712]	; 1770c <flatcc_builder_create_table@@Base+0x300>
   17440:	add	r3, pc, r3
   17444:	ldr	r2, [pc, #708]	; 17710 <flatcc_builder_create_table@@Base+0x304>
   17448:	ldr	r1, [pc, #708]	; 17714 <flatcc_builder_create_table@@Base+0x308>
   1744c:	add	r1, pc, r1
   17450:	ldr	r0, [pc, #704]	; 17718 <flatcc_builder_create_table@@Base+0x30c>
   17454:	add	r0, pc, r0
   17458:	bl	1234c <__assert_fail@plt>
   1745c:	ldr	r3, [fp, #12]
   17460:	and	r3, r3, #1
   17464:	cmp	r3, #0
   17468:	bne	1748c <flatcc_builder_create_table@@Base+0x80>
   1746c:	ldr	r3, [pc, #680]	; 1771c <flatcc_builder_create_table@@Base+0x310>
   17470:	add	r3, pc, r3
   17474:	ldr	r2, [pc, #676]	; 17720 <flatcc_builder_create_table@@Base+0x314>
   17478:	ldr	r1, [pc, #676]	; 17724 <flatcc_builder_create_table@@Base+0x318>
   1747c:	add	r1, pc, r1
   17480:	ldr	r0, [pc, #672]	; 17728 <flatcc_builder_create_table@@Base+0x31c>
   17484:	add	r0, pc, r0
   17488:	bl	1234c <__assert_fail@plt>
   1748c:	sub	r3, fp, #130	; 0x82
   17490:	mov	r1, #4
   17494:	mov	r0, r3
   17498:	bl	14d10 <flatcc_builder_clear@@Base+0xf8>
   1749c:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   174a0:	mov	r1, r3
   174a4:	ldr	r0, [fp, #-120]	; 0xffffff88
   174a8:	bl	14cc8 <flatcc_builder_clear@@Base+0xb0>
   174ac:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   174b0:	mov	r2, r3
   174b4:	ldr	r1, [fp, #-128]	; 0xffffff80
   174b8:	ldr	r0, [fp, #-120]	; 0xffffff88
   174bc:	bl	15304 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   174c0:	str	r0, [fp, #-20]	; 0xffffffec
   174c4:	ldr	r3, [fp, #-120]	; 0xffffff88
   174c8:	ldr	r3, [r3, #136]	; 0x88
   174cc:	mov	r1, r3
   174d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   174d4:	ldr	r3, [fp, #-128]	; 0xffffff80
   174d8:	add	r3, r2, r3
   174dc:	sub	r3, r1, r3
   174e0:	sub	r3, r3, #4
   174e4:	str	r3, [fp, #-24]	; 0xffffffe8
   174e8:	ldr	r3, [fp, #12]
   174ec:	sub	r3, r3, #1
   174f0:	str	r3, [fp, #-28]	; 0xffffffe4
   174f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   174f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   174fc:	sub	r3, r2, r3
   17500:	str	r3, [fp, #-32]	; 0xffffffe0
   17504:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17508:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1750c:	sub	r2, r2, r3
   17510:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17514:	cmp	r2, r3
   17518:	beq	17524 <flatcc_builder_create_table@@Base+0x118>
   1751c:	mvn	r3, #0
   17520:	b	176fc <flatcc_builder_create_table@@Base+0x2f0>
   17524:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17528:	bl	13cc8 <main@@Base+0x110>
   1752c:	mov	r3, r0
   17530:	str	r3, [fp, #-44]	; 0xffffffd4
   17534:	mov	r3, #0
   17538:	str	r3, [fp, #-16]
   1753c:	b	175b4 <flatcc_builder_create_table@@Base+0x1a8>
   17540:	ldr	r3, [fp, #-16]
   17544:	lsl	r3, r3, #1
   17548:	ldr	r2, [fp, #4]
   1754c:	add	r3, r2, r3
   17550:	ldrh	r3, [r3]
   17554:	mov	r2, r3
   17558:	ldr	r3, [fp, #-124]	; 0xffffff84
   1755c:	add	r3, r2, r3
   17560:	str	r3, [fp, #-36]	; 0xffffffdc
   17564:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17568:	ldr	r2, [r3]
   1756c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17570:	sub	r3, r2, r3
   17574:	ldr	r2, [fp, #-16]
   17578:	lsl	r2, r2, #1
   1757c:	ldr	r1, [fp, #4]
   17580:	add	r2, r1, r2
   17584:	ldrh	r2, [r2]
   17588:	sub	r3, r3, r2
   1758c:	sub	r3, r3, #4
   17590:	str	r3, [fp, #-40]	; 0xffffffd8
   17594:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17598:	bl	13cc8 <main@@Base+0x110>
   1759c:	mov	r2, r0
   175a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   175a4:	str	r2, [r3]
   175a8:	ldr	r3, [fp, #-16]
   175ac:	add	r3, r3, #1
   175b0:	str	r3, [fp, #-16]
   175b4:	ldr	r2, [fp, #-16]
   175b8:	ldr	r3, [fp, #8]
   175bc:	cmp	r2, r3
   175c0:	blt	17540 <flatcc_builder_create_table@@Base+0x134>
   175c4:	mov	r3, #0
   175c8:	str	r3, [fp, #-116]	; 0xffffff8c
   175cc:	mov	r3, #0
   175d0:	str	r3, [fp, #-112]	; 0xffffff90
   175d4:	ldr	r3, [fp, #-116]	; 0xffffff8c
   175d8:	add	r3, r3, #4
   175dc:	str	r3, [fp, #-116]	; 0xffffff8c
   175e0:	ldr	r3, [fp, #-112]	; 0xffffff90
   175e4:	add	r3, r3, #1
   175e8:	lsl	r3, r3, #3
   175ec:	sub	r2, fp, #12
   175f0:	add	r3, r2, r3
   175f4:	sub	r2, fp, #44	; 0x2c
   175f8:	str	r2, [r3, #-104]	; 0xffffff98
   175fc:	ldr	r3, [fp, #-112]	; 0xffffff90
   17600:	add	r3, r3, #1
   17604:	lsl	r3, r3, #3
   17608:	sub	r2, fp, #12
   1760c:	add	r3, r2, r3
   17610:	mov	r2, #4
   17614:	str	r2, [r3, #-100]	; 0xffffff9c
   17618:	ldr	r3, [fp, #-112]	; 0xffffff90
   1761c:	add	r3, r3, #1
   17620:	str	r3, [fp, #-112]	; 0xffffff90
   17624:	ldr	r3, [fp, #-128]	; 0xffffff80
   17628:	cmp	r3, #0
   1762c:	beq	17684 <flatcc_builder_create_table@@Base+0x278>
   17630:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17634:	ldr	r3, [fp, #-128]	; 0xffffff80
   17638:	add	r3, r2, r3
   1763c:	str	r3, [fp, #-116]	; 0xffffff8c
   17640:	ldr	r3, [fp, #-112]	; 0xffffff90
   17644:	add	r3, r3, #1
   17648:	lsl	r3, r3, #3
   1764c:	sub	r2, fp, #12
   17650:	add	r3, r2, r3
   17654:	ldr	r2, [fp, #-124]	; 0xffffff84
   17658:	str	r2, [r3, #-104]	; 0xffffff98
   1765c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17660:	add	r3, r3, #1
   17664:	lsl	r3, r3, #3
   17668:	sub	r2, fp, #12
   1766c:	add	r3, r2, r3
   17670:	ldr	r2, [fp, #-128]	; 0xffffff80
   17674:	str	r2, [r3, #-100]	; 0xffffff9c
   17678:	ldr	r3, [fp, #-112]	; 0xffffff90
   1767c:	add	r3, r3, #1
   17680:	str	r3, [fp, #-112]	; 0xffffff90
   17684:	ldr	r3, [fp, #-20]	; 0xffffffec
   17688:	cmp	r3, #0
   1768c:	beq	176e8 <flatcc_builder_create_table@@Base+0x2dc>
   17690:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17694:	ldr	r3, [fp, #-20]	; 0xffffffec
   17698:	add	r3, r2, r3
   1769c:	str	r3, [fp, #-116]	; 0xffffff8c
   176a0:	ldr	r3, [fp, #-112]	; 0xffffff90
   176a4:	add	r3, r3, #1
   176a8:	lsl	r3, r3, #3
   176ac:	sub	r2, fp, #12
   176b0:	add	r3, r2, r3
   176b4:	ldr	r2, [pc, #112]	; 1772c <flatcc_builder_create_table@@Base+0x320>
   176b8:	ldr	r2, [r4, r2]
   176bc:	str	r2, [r3, #-104]	; 0xffffff98
   176c0:	ldr	r3, [fp, #-112]	; 0xffffff90
   176c4:	add	r3, r3, #1
   176c8:	lsl	r3, r3, #3
   176cc:	sub	r2, fp, #12
   176d0:	add	r3, r2, r3
   176d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   176d8:	str	r2, [r3, #-100]	; 0xffffff9c
   176dc:	ldr	r3, [fp, #-112]	; 0xffffff90
   176e0:	add	r3, r3, #1
   176e4:	str	r3, [fp, #-112]	; 0xffffff90
   176e8:	sub	r3, fp, #116	; 0x74
   176ec:	mov	r1, r3
   176f0:	ldr	r0, [fp, #-120]	; 0xffffff88
   176f4:	bl	1538c <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   176f8:	mov	r3, r0
   176fc:	mov	r0, r3
   17700:	sub	sp, fp, #8
   17704:	pop	{r4, fp, pc}
   17708:	andeq	r7, r1, ip, asr #23
   1770c:	andeq	r6, r0, r8, lsr r5
   17710:	ldrdeq	r0, [r0], -r5
   17714:	andeq	r5, r0, r8, lsl #29
   17718:	andeq	r6, r0, r0, lsr #2
   1771c:	andeq	r6, r0, r8, lsl #10
   17720:	ldrdeq	r0, [r0], -fp
   17724:	andeq	r5, r0, r8, asr lr
   17728:	andeq	r6, r0, r4, lsl #2
   1772c:	andeq	r0, r0, r4, asr #32

00017730 <flatcc_builder_check_required_field@@Base>:
   17730:	push	{fp, lr}
   17734:	add	fp, sp, #4
   17738:	sub	sp, sp, #8
   1773c:	str	r0, [fp, #-8]
   17740:	mov	r3, r1
   17744:	strh	r3, [fp, #-10]
   17748:	ldr	r3, [fp, #-8]
   1774c:	ldr	r3, [r3, #32]
   17750:	ldrh	r3, [r3, #14]
   17754:	cmp	r3, #3
   17758:	beq	1777c <flatcc_builder_check_required_field@@Base+0x4c>
   1775c:	ldr	r3, [pc, #100]	; 177c8 <flatcc_builder_check_required_field@@Base+0x98>
   17760:	add	r3, pc, r3
   17764:	ldr	r2, [pc, #96]	; 177cc <flatcc_builder_check_required_field@@Base+0x9c>
   17768:	ldr	r1, [pc, #96]	; 177d0 <flatcc_builder_check_required_field@@Base+0xa0>
   1776c:	add	r1, pc, r1
   17770:	ldr	r0, [pc, #92]	; 177d4 <flatcc_builder_check_required_field@@Base+0xa4>
   17774:	add	r0, pc, r0
   17778:	bl	1234c <__assert_fail@plt>
   1777c:	ldr	r3, [fp, #-8]
   17780:	ldrh	r3, [r3, #8]
   17784:	ldrh	r2, [fp, #-10]
   17788:	cmp	r2, r3
   1778c:	bcs	177b8 <flatcc_builder_check_required_field@@Base+0x88>
   17790:	ldr	r3, [fp, #-8]
   17794:	ldr	r2, [r3, #4]
   17798:	ldrh	r3, [fp, #-10]
   1779c:	lsl	r3, r3, #1
   177a0:	add	r3, r2, r3
   177a4:	ldrh	r3, [r3]
   177a8:	cmp	r3, #0
   177ac:	beq	177b8 <flatcc_builder_check_required_field@@Base+0x88>
   177b0:	mov	r3, #1
   177b4:	b	177bc <flatcc_builder_check_required_field@@Base+0x8c>
   177b8:	mov	r3, #0
   177bc:	mov	r0, r3
   177c0:	sub	sp, fp, #4
   177c4:	pop	{fp, pc}
   177c8:	andeq	r6, r0, r4, lsr r2
   177cc:	strdeq	r0, [r0], -r8
   177d0:	andeq	r5, r0, r8, ror #22
   177d4:	andeq	r5, r0, r0, lsr #28

000177d8 <flatcc_builder_check_union_field@@Base>:
   177d8:	push	{fp, lr}
   177dc:	add	fp, sp, #4
   177e0:	sub	sp, sp, #8
   177e4:	str	r0, [fp, #-8]
   177e8:	mov	r3, r1
   177ec:	strh	r3, [fp, #-10]
   177f0:	ldr	r3, [fp, #-8]
   177f4:	ldr	r3, [r3, #32]
   177f8:	ldrh	r3, [r3, #14]
   177fc:	cmp	r3, #3
   17800:	beq	17824 <flatcc_builder_check_union_field@@Base+0x4c>
   17804:	ldr	r3, [pc, #292]	; 17930 <flatcc_builder_check_union_field@@Base+0x158>
   17808:	add	r3, pc, r3
   1780c:	ldr	r2, [pc, #288]	; 17934 <flatcc_builder_check_union_field@@Base+0x15c>
   17810:	ldr	r1, [pc, #288]	; 17938 <flatcc_builder_check_union_field@@Base+0x160>
   17814:	add	r1, pc, r1
   17818:	ldr	r0, [pc, #284]	; 1793c <flatcc_builder_check_union_field@@Base+0x164>
   1781c:	add	r0, pc, r0
   17820:	bl	1234c <__assert_fail@plt>
   17824:	ldrh	r3, [fp, #-10]
   17828:	cmp	r3, #0
   1782c:	beq	17844 <flatcc_builder_check_union_field@@Base+0x6c>
   17830:	ldr	r3, [fp, #-8]
   17834:	ldrh	r3, [r3, #8]
   17838:	ldrh	r2, [fp, #-10]
   1783c:	cmp	r2, r3
   17840:	bcc	1784c <flatcc_builder_check_union_field@@Base+0x74>
   17844:	mov	r3, #0
   17848:	b	17924 <flatcc_builder_check_union_field@@Base+0x14c>
   1784c:	ldr	r3, [fp, #-8]
   17850:	ldr	r2, [r3, #4]
   17854:	ldrh	r3, [fp, #-10]
   17858:	sub	r3, r3, #-2147483647	; 0x80000001
   1785c:	lsl	r3, r3, #1
   17860:	add	r3, r2, r3
   17864:	ldrh	r3, [r3]
   17868:	cmp	r3, #0
   1786c:	bne	1789c <flatcc_builder_check_union_field@@Base+0xc4>
   17870:	ldr	r3, [fp, #-8]
   17874:	ldr	r2, [r3, #4]
   17878:	ldrh	r3, [fp, #-10]
   1787c:	lsl	r3, r3, #1
   17880:	add	r3, r2, r3
   17884:	ldrh	r3, [r3]
   17888:	cmp	r3, #0
   1788c:	moveq	r3, #1
   17890:	movne	r3, #0
   17894:	uxtb	r3, r3
   17898:	b	17924 <flatcc_builder_check_union_field@@Base+0x14c>
   1789c:	ldr	r3, [fp, #-8]
   178a0:	ldr	r3, [r3, #16]
   178a4:	ldr	r2, [fp, #-8]
   178a8:	ldr	r1, [r2, #4]
   178ac:	ldrh	r2, [fp, #-10]
   178b0:	sub	r2, r2, #-2147483647	; 0x80000001
   178b4:	lsl	r2, r2, #1
   178b8:	add	r2, r1, r2
   178bc:	ldrh	r2, [r2]
   178c0:	add	r3, r3, r2
   178c4:	ldrb	r3, [r3]
   178c8:	cmp	r3, #0
   178cc:	beq	178fc <flatcc_builder_check_union_field@@Base+0x124>
   178d0:	ldr	r3, [fp, #-8]
   178d4:	ldr	r2, [r3, #4]
   178d8:	ldrh	r3, [fp, #-10]
   178dc:	lsl	r3, r3, #1
   178e0:	add	r3, r2, r3
   178e4:	ldrh	r3, [r3]
   178e8:	cmp	r3, #0
   178ec:	movne	r3, #1
   178f0:	moveq	r3, #0
   178f4:	uxtb	r3, r3
   178f8:	b	17924 <flatcc_builder_check_union_field@@Base+0x14c>
   178fc:	ldr	r3, [fp, #-8]
   17900:	ldr	r2, [r3, #4]
   17904:	ldrh	r3, [fp, #-10]
   17908:	lsl	r3, r3, #1
   1790c:	add	r3, r2, r3
   17910:	ldrh	r3, [r3]
   17914:	cmp	r3, #0
   17918:	moveq	r3, #1
   1791c:	movne	r3, #0
   17920:	uxtb	r3, r3
   17924:	mov	r0, r3
   17928:	sub	sp, fp, #4
   1792c:	pop	{fp, pc}
   17930:			; <UNDEFINED> instruction: 0x000061b0
   17934:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   17938:	andeq	r5, r0, r0, asr #21
   1793c:	andeq	r5, r0, r8, ror sp

00017940 <flatcc_builder_check_required@@Base>:
   17940:	push	{fp, lr}
   17944:	add	fp, sp, #4
   17948:	sub	sp, sp, #24
   1794c:	str	r0, [fp, #-16]
   17950:	str	r1, [fp, #-20]	; 0xffffffec
   17954:	str	r2, [fp, #-24]	; 0xffffffe8
   17958:	ldr	r3, [fp, #-16]
   1795c:	ldr	r3, [r3, #32]
   17960:	ldrh	r3, [r3, #14]
   17964:	cmp	r3, #3
   17968:	beq	1798c <flatcc_builder_check_required@@Base+0x4c>
   1796c:	ldr	r3, [pc, #168]	; 17a1c <flatcc_builder_check_required@@Base+0xdc>
   17970:	add	r3, pc, r3
   17974:	ldr	r2, [pc, #164]	; 17a20 <flatcc_builder_check_required@@Base+0xe0>
   17978:	ldr	r1, [pc, #164]	; 17a24 <flatcc_builder_check_required@@Base+0xe4>
   1797c:	add	r1, pc, r1
   17980:	ldr	r0, [pc, #160]	; 17a28 <flatcc_builder_check_required@@Base+0xe8>
   17984:	add	r0, pc, r0
   17988:	bl	1234c <__assert_fail@plt>
   1798c:	ldr	r3, [fp, #-16]
   17990:	ldrh	r3, [r3, #8]
   17994:	mov	r2, r3
   17998:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1799c:	cmp	r2, r3
   179a0:	bge	179ac <flatcc_builder_check_required@@Base+0x6c>
   179a4:	mov	r3, #0
   179a8:	b	17a10 <flatcc_builder_check_required@@Base+0xd0>
   179ac:	mov	r3, #0
   179b0:	str	r3, [fp, #-8]
   179b4:	b	179fc <flatcc_builder_check_required@@Base+0xbc>
   179b8:	ldr	r3, [fp, #-16]
   179bc:	ldr	r2, [r3, #4]
   179c0:	ldr	r3, [fp, #-8]
   179c4:	lsl	r3, r3, #1
   179c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   179cc:	add	r3, r1, r3
   179d0:	ldrh	r3, [r3]
   179d4:	lsl	r3, r3, #1
   179d8:	add	r3, r2, r3
   179dc:	ldrh	r3, [r3]
   179e0:	cmp	r3, #0
   179e4:	bne	179f0 <flatcc_builder_check_required@@Base+0xb0>
   179e8:	mov	r3, #0
   179ec:	b	17a10 <flatcc_builder_check_required@@Base+0xd0>
   179f0:	ldr	r3, [fp, #-8]
   179f4:	add	r3, r3, #1
   179f8:	str	r3, [fp, #-8]
   179fc:	ldr	r2, [fp, #-8]
   17a00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a04:	cmp	r2, r3
   17a08:	blt	179b8 <flatcc_builder_check_required@@Base+0x78>
   17a0c:	mov	r3, #1
   17a10:	mov	r0, r3
   17a14:	sub	sp, fp, #4
   17a18:	pop	{fp, pc}
   17a1c:	andeq	r6, r0, ip, rrx
   17a20:	andeq	r0, r0, r1, lsl r5
   17a24:	andeq	r5, r0, r8, asr r9
   17a28:	andeq	r5, r0, r0, lsl ip

00017a2c <flatcc_builder_end_table@@Base>:
   17a2c:	push	{fp, lr}
   17a30:	add	fp, sp, #4
   17a34:	sub	sp, sp, #48	; 0x30
   17a38:	str	r0, [fp, #-32]	; 0xffffffe0
   17a3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a40:	ldr	r3, [r3, #32]
   17a44:	ldrh	r3, [r3, #14]
   17a48:	cmp	r3, #3
   17a4c:	beq	17a70 <flatcc_builder_end_table@@Base+0x44>
   17a50:	ldr	r3, [pc, #508]	; 17c54 <flatcc_builder_end_table@@Base+0x228>
   17a54:	add	r3, pc, r3
   17a58:	ldr	r2, [pc, #504]	; 17c58 <flatcc_builder_end_table@@Base+0x22c>
   17a5c:	ldr	r1, [pc, #504]	; 17c5c <flatcc_builder_end_table@@Base+0x230>
   17a60:	add	r1, pc, r1
   17a64:	ldr	r0, [pc, #500]	; 17c60 <flatcc_builder_end_table@@Base+0x234>
   17a68:	add	r0, pc, r0
   17a6c:	bl	1234c <__assert_fail@plt>
   17a70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a74:	ldr	r3, [r3, #4]
   17a78:	sub	r3, r3, #4
   17a7c:	str	r3, [fp, #-8]
   17a80:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a84:	ldrh	r3, [r3, #8]
   17a88:	add	r3, r3, #2
   17a8c:	uxth	r3, r3
   17a90:	lsl	r3, r3, #1
   17a94:	strh	r3, [fp, #-10]
   17a98:	ldr	r3, [fp, #-8]
   17a9c:	ldrh	r2, [fp, #-10]
   17aa0:	strh	r2, [r3]
   17aa4:	ldr	r3, [fp, #-8]
   17aa8:	add	r3, r3, #2
   17aac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17ab0:	ldr	r2, [r2, #20]
   17ab4:	uxth	r2, r2
   17ab8:	add	r2, r2, #4
   17abc:	uxth	r2, r2
   17ac0:	strh	r2, [r3]
   17ac4:	ldr	r3, [fp, #-8]
   17ac8:	ldrh	r3, [r3]
   17acc:	mov	r2, r3
   17ad0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ad4:	ldr	r3, [r3, #12]
   17ad8:	eor	r3, r3, r2
   17adc:	ldr	r2, [pc, #384]	; 17c64 <flatcc_builder_end_table@@Base+0x238>
   17ae0:	mul	r3, r2, r3
   17ae4:	ldr	r2, [fp, #-8]
   17ae8:	add	r2, r2, #2
   17aec:	ldrh	r2, [r2]
   17af0:	eor	r3, r3, r2
   17af4:	ldr	r2, [pc, #360]	; 17c64 <flatcc_builder_end_table@@Base+0x238>
   17af8:	mul	r2, r2, r3
   17afc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b00:	str	r2, [r3, #12]
   17b04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b08:	ldr	r3, [r3, #12]
   17b0c:	ldrh	r2, [fp, #-10]
   17b10:	ldr	r1, [fp, #-8]
   17b14:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17b18:	bl	170fc <flatcc_builder_create_cached_vtable@@Base>
   17b1c:	str	r0, [fp, #-16]
   17b20:	ldr	r3, [fp, #-16]
   17b24:	cmp	r3, #0
   17b28:	bne	17b34 <flatcc_builder_end_table@@Base+0x108>
   17b2c:	mov	r3, #0
   17b30:	b	17c48 <flatcc_builder_end_table@@Base+0x21c>
   17b34:	ldrh	r3, [fp, #-10]
   17b38:	mov	r2, r3
   17b3c:	mov	r1, #0
   17b40:	ldr	r0, [fp, #-8]
   17b44:	bl	1231c <memset@plt>
   17b48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b4c:	ldr	r2, [r3, #76]	; 0x4c
   17b50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b54:	ldr	r3, [r3, #32]
   17b58:	ldr	r3, [r3, #20]
   17b5c:	add	r3, r2, r3
   17b60:	str	r3, [fp, #-20]	; 0xffffffec
   17b64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b68:	ldr	r3, [r3]
   17b6c:	mov	r2, r3
   17b70:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b74:	sub	r3, r2, r3
   17b78:	asr	r3, r3, #1
   17b7c:	str	r3, [fp, #-24]	; 0xffffffe8
   17b80:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b84:	ldr	r1, [r3, #16]
   17b88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b8c:	ldr	r2, [r3, #20]
   17b90:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b94:	ldrh	r0, [r3, #130]	; 0x82
   17b98:	ldr	r3, [fp, #-16]
   17b9c:	str	r3, [sp, #8]
   17ba0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17ba4:	str	r3, [sp, #4]
   17ba8:	ldr	r3, [fp, #-20]	; 0xffffffec
   17bac:	str	r3, [sp]
   17bb0:	mov	r3, r0
   17bb4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17bb8:	bl	1740c <flatcc_builder_create_table@@Base>
   17bbc:	str	r0, [fp, #-28]	; 0xffffffe4
   17bc0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17bc4:	cmp	r3, #0
   17bc8:	bne	17bd4 <flatcc_builder_end_table@@Base+0x1a8>
   17bcc:	mov	r3, #0
   17bd0:	b	17c48 <flatcc_builder_end_table@@Base+0x21c>
   17bd4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17bd8:	ldr	r3, [r3, #32]
   17bdc:	ldr	r2, [r3, #24]
   17be0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17be4:	str	r2, [r3, #12]
   17be8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17bec:	ldr	r3, [r3, #32]
   17bf0:	ldrh	r2, [r3, #28]
   17bf4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17bf8:	strh	r2, [r3, #8]
   17bfc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c00:	ldr	r2, [r3, #52]	; 0x34
   17c04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c08:	ldr	r3, [r3, #32]
   17c0c:	ldr	r3, [r3, #16]
   17c10:	add	r2, r2, r3
   17c14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c18:	str	r2, [r3, #4]
   17c1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c20:	ldr	r2, [r3, #76]	; 0x4c
   17c24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c28:	ldr	r3, [r3, #32]
   17c2c:	ldr	r3, [r3, #20]
   17c30:	add	r2, r2, r3
   17c34:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c38:	str	r2, [r3]
   17c3c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17c40:	bl	1523c <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   17c44:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17c48:	mov	r0, r3
   17c4c:	sub	sp, fp, #4
   17c50:	pop	{fp, pc}
   17c54:	andeq	r5, r0, r8, lsr #31
   17c58:	andeq	r0, r0, r5, lsr #10
   17c5c:	andeq	r5, r0, r4, ror r8
   17c60:	andeq	r5, r0, ip, lsr #22
   17c64:			; <UNDEFINED> instruction: 0x9e3779b1

00017c68 <flatcc_builder_create_vector@@Base>:
   17c68:	push	{r4, fp, lr}
   17c6c:	add	fp, sp, #8
   17c70:	sub	sp, sp, #108	; 0x6c
   17c74:	str	r0, [fp, #-104]	; 0xffffff98
   17c78:	str	r1, [fp, #-108]	; 0xffffff94
   17c7c:	str	r2, [fp, #-112]	; 0xffffff90
   17c80:	str	r3, [fp, #-116]	; 0xffffff8c
   17c84:	ldr	r4, [pc, #484]	; 17e70 <flatcc_builder_create_vector@@Base+0x208>
   17c88:	add	r4, pc, r4
   17c8c:	ldr	r2, [fp, #-112]	; 0xffffff90
   17c90:	ldr	r3, [fp, #8]
   17c94:	cmp	r2, r3
   17c98:	bls	17cd4 <flatcc_builder_create_vector@@Base+0x6c>
   17c9c:	ldr	r2, [fp, #-112]	; 0xffffff90
   17ca0:	ldr	r3, [fp, #8]
   17ca4:	cmp	r2, r3
   17ca8:	bls	17ccc <flatcc_builder_create_vector@@Base+0x64>
   17cac:	ldr	r3, [pc, #448]	; 17e74 <flatcc_builder_create_vector@@Base+0x20c>
   17cb0:	add	r3, pc, r3
   17cb4:	ldr	r2, [pc, #444]	; 17e78 <flatcc_builder_create_vector@@Base+0x210>
   17cb8:	ldr	r1, [pc, #444]	; 17e7c <flatcc_builder_create_vector@@Base+0x214>
   17cbc:	add	r1, pc, r1
   17cc0:	ldr	r0, [pc, #440]	; 17e80 <flatcc_builder_create_vector@@Base+0x218>
   17cc4:	add	r0, pc, r0
   17cc8:	bl	1234c <__assert_fail@plt>
   17ccc:	mov	r3, #0
   17cd0:	b	17e64 <flatcc_builder_create_vector@@Base+0x1fc>
   17cd4:	mov	r1, #4
   17cd8:	add	r3, fp, #4
   17cdc:	mov	r0, r3
   17ce0:	bl	14d10 <flatcc_builder_clear@@Base+0xf8>
   17ce4:	ldrh	r3, [fp, #4]
   17ce8:	mov	r1, r3
   17cec:	ldr	r0, [fp, #-104]	; 0xffffff98
   17cf0:	bl	14cc8 <flatcc_builder_clear@@Base+0xb0>
   17cf4:	ldr	r3, [fp, #-112]	; 0xffffff90
   17cf8:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17cfc:	mul	r3, r2, r3
   17d00:	str	r3, [fp, #-16]
   17d04:	ldr	r0, [fp, #-112]	; 0xffffff90
   17d08:	bl	13cc8 <main@@Base+0x110>
   17d0c:	mov	r3, r0
   17d10:	str	r3, [fp, #-24]	; 0xffffffe8
   17d14:	ldrh	r3, [fp, #4]
   17d18:	mov	r2, r3
   17d1c:	ldr	r1, [fp, #-16]
   17d20:	ldr	r0, [fp, #-104]	; 0xffffff98
   17d24:	bl	15304 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   17d28:	str	r0, [fp, #-20]	; 0xffffffec
   17d2c:	mov	r3, #0
   17d30:	str	r3, [fp, #-96]	; 0xffffffa0
   17d34:	mov	r3, #0
   17d38:	str	r3, [fp, #-92]	; 0xffffffa4
   17d3c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17d40:	add	r3, r3, #4
   17d44:	str	r3, [fp, #-96]	; 0xffffffa0
   17d48:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17d4c:	add	r3, r3, #1
   17d50:	lsl	r3, r3, #3
   17d54:	sub	r2, fp, #12
   17d58:	add	r3, r2, r3
   17d5c:	sub	r2, fp, #24
   17d60:	str	r2, [r3, #-84]	; 0xffffffac
   17d64:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17d68:	add	r3, r3, #1
   17d6c:	lsl	r3, r3, #3
   17d70:	sub	r2, fp, #12
   17d74:	add	r3, r2, r3
   17d78:	mov	r2, #4
   17d7c:	str	r2, [r3, #-80]	; 0xffffffb0
   17d80:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17d84:	add	r3, r3, #1
   17d88:	str	r3, [fp, #-92]	; 0xffffffa4
   17d8c:	ldr	r3, [fp, #-16]
   17d90:	cmp	r3, #0
   17d94:	beq	17dec <flatcc_builder_create_vector@@Base+0x184>
   17d98:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17d9c:	ldr	r3, [fp, #-16]
   17da0:	add	r3, r2, r3
   17da4:	str	r3, [fp, #-96]	; 0xffffffa0
   17da8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17dac:	add	r3, r3, #1
   17db0:	lsl	r3, r3, #3
   17db4:	sub	r2, fp, #12
   17db8:	add	r3, r2, r3
   17dbc:	ldr	r2, [fp, #-108]	; 0xffffff94
   17dc0:	str	r2, [r3, #-84]	; 0xffffffac
   17dc4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17dc8:	add	r3, r3, #1
   17dcc:	lsl	r3, r3, #3
   17dd0:	sub	r2, fp, #12
   17dd4:	add	r3, r2, r3
   17dd8:	ldr	r2, [fp, #-16]
   17ddc:	str	r2, [r3, #-80]	; 0xffffffb0
   17de0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17de4:	add	r3, r3, #1
   17de8:	str	r3, [fp, #-92]	; 0xffffffa4
   17dec:	ldr	r3, [fp, #-20]	; 0xffffffec
   17df0:	cmp	r3, #0
   17df4:	beq	17e50 <flatcc_builder_create_vector@@Base+0x1e8>
   17df8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17dfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e00:	add	r3, r2, r3
   17e04:	str	r3, [fp, #-96]	; 0xffffffa0
   17e08:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17e0c:	add	r3, r3, #1
   17e10:	lsl	r3, r3, #3
   17e14:	sub	r2, fp, #12
   17e18:	add	r3, r2, r3
   17e1c:	ldr	r2, [pc, #96]	; 17e84 <flatcc_builder_create_vector@@Base+0x21c>
   17e20:	ldr	r2, [r4, r2]
   17e24:	str	r2, [r3, #-84]	; 0xffffffac
   17e28:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17e2c:	add	r3, r3, #1
   17e30:	lsl	r3, r3, #3
   17e34:	sub	r2, fp, #12
   17e38:	add	r3, r2, r3
   17e3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17e40:	str	r2, [r3, #-80]	; 0xffffffb0
   17e44:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17e48:	add	r3, r3, #1
   17e4c:	str	r3, [fp, #-92]	; 0xffffffa4
   17e50:	sub	r3, fp, #96	; 0x60
   17e54:	mov	r1, r3
   17e58:	ldr	r0, [fp, #-104]	; 0xffffff98
   17e5c:	bl	1538c <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   17e60:	mov	r3, r0
   17e64:	mov	r0, r3
   17e68:	sub	sp, fp, #8
   17e6c:	pop	{r4, fp, pc}
   17e70:	andeq	r7, r1, r0, ror r3
   17e74:	andeq	r5, r0, r8, ror #26
   17e78:	andeq	r0, r0, r5, asr r5
   17e7c:	andeq	r5, r0, r8, lsl r6
   17e80:	strdeq	r5, [r0], -ip
   17e84:	andeq	r0, r0, r4, asr #32

00017e88 <flatcc_builder_end_vector@@Base>:
   17e88:	push	{fp, lr}
   17e8c:	add	fp, sp, #4
   17e90:	sub	sp, sp, #24
   17e94:	str	r0, [fp, #-16]
   17e98:	ldr	r3, [fp, #-16]
   17e9c:	ldr	r3, [r3, #32]
   17ea0:	ldrh	r3, [r3, #14]
   17ea4:	cmp	r3, #4
   17ea8:	beq	17ecc <flatcc_builder_end_vector@@Base+0x44>
   17eac:	ldr	r3, [pc, #148]	; 17f48 <flatcc_builder_end_vector@@Base+0xc0>
   17eb0:	add	r3, pc, r3
   17eb4:	ldr	r2, [pc, #144]	; 17f4c <flatcc_builder_end_vector@@Base+0xc4>
   17eb8:	ldr	r1, [pc, #144]	; 17f50 <flatcc_builder_end_vector@@Base+0xc8>
   17ebc:	add	r1, pc, r1
   17ec0:	ldr	r0, [pc, #140]	; 17f54 <flatcc_builder_end_vector@@Base+0xcc>
   17ec4:	add	r0, pc, r0
   17ec8:	bl	1234c <__assert_fail@plt>
   17ecc:	ldr	r3, [fp, #-16]
   17ed0:	ldr	r1, [r3, #16]
   17ed4:	ldr	r3, [fp, #-16]
   17ed8:	ldr	r3, [r3, #32]
   17edc:	ldr	r0, [r3, #20]
   17ee0:	ldr	r3, [fp, #-16]
   17ee4:	ldr	r3, [r3, #32]
   17ee8:	ldr	ip, [r3, #16]
   17eec:	ldr	r3, [fp, #-16]
   17ef0:	ldrh	r3, [r3, #130]	; 0x82
   17ef4:	ldr	r2, [fp, #-16]
   17ef8:	ldr	r2, [r2, #32]
   17efc:	ldr	r2, [r2, #24]
   17f00:	str	r2, [sp, #4]
   17f04:	str	r3, [sp]
   17f08:	mov	r3, ip
   17f0c:	mov	r2, r0
   17f10:	ldr	r0, [fp, #-16]
   17f14:	bl	17c68 <flatcc_builder_create_vector@@Base>
   17f18:	str	r0, [fp, #-8]
   17f1c:	ldr	r3, [fp, #-8]
   17f20:	cmp	r3, #0
   17f24:	bne	17f30 <flatcc_builder_end_vector@@Base+0xa8>
   17f28:	mov	r3, #0
   17f2c:	b	17f3c <flatcc_builder_end_vector@@Base+0xb4>
   17f30:	ldr	r0, [fp, #-16]
   17f34:	bl	1523c <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   17f38:	ldr	r3, [fp, #-8]
   17f3c:	mov	r0, r3
   17f40:	sub	sp, fp, #4
   17f44:	pop	{fp, pc}
   17f48:	andeq	r5, r0, r8, lsl #23
   17f4c:	andeq	r0, r0, r8, ror r5
   17f50:	andeq	r5, r0, r8, lsl r4
   17f54:	andeq	r5, r0, r4, asr r5

00017f58 <flatcc_builder_vector_count@@Base>:
   17f58:	push	{fp}		; (str fp, [sp, #-4]!)
   17f5c:	add	fp, sp, #0
   17f60:	sub	sp, sp, #12
   17f64:	str	r0, [fp, #-8]
   17f68:	ldr	r3, [fp, #-8]
   17f6c:	ldr	r3, [r3, #32]
   17f70:	ldr	r3, [r3, #20]
   17f74:	mov	r0, r3
   17f78:	add	sp, fp, #0
   17f7c:	pop	{fp}		; (ldr fp, [sp], #4)
   17f80:	bx	lr

00017f84 <flatcc_builder_vector_edit@@Base>:
   17f84:	push	{fp}		; (str fp, [sp, #-4]!)
   17f88:	add	fp, sp, #0
   17f8c:	sub	sp, sp, #12
   17f90:	str	r0, [fp, #-8]
   17f94:	ldr	r3, [fp, #-8]
   17f98:	ldr	r3, [r3, #16]
   17f9c:	mov	r0, r3
   17fa0:	add	sp, fp, #0
   17fa4:	pop	{fp}		; (ldr fp, [sp], #4)
   17fa8:	bx	lr
   17fac:	push	{r4, fp, lr}
   17fb0:	add	fp, sp, #8
   17fb4:	sub	sp, sp, #116	; 0x74
   17fb8:	str	r0, [fp, #-112]	; 0xffffff90
   17fbc:	str	r1, [fp, #-116]	; 0xffffff8c
   17fc0:	str	r2, [fp, #-120]	; 0xffffff88
   17fc4:	str	r3, [fp, #-124]	; 0xffffff84
   17fc8:	ldr	r4, [pc, #748]	; 182bc <flatcc_builder_vector_edit@@Base+0x338>
   17fcc:	add	r4, pc, r4
   17fd0:	ldr	r3, [fp, #-120]	; 0xffffff88
   17fd4:	cmn	r3, #-1073741823	; 0xc0000001
   17fd8:	bls	17fe4 <flatcc_builder_vector_edit@@Base+0x60>
   17fdc:	mov	r3, #0
   17fe0:	b	182b0 <flatcc_builder_vector_edit@@Base+0x32c>
   17fe4:	mov	r1, #4
   17fe8:	ldr	r0, [fp, #-112]	; 0xffffff90
   17fec:	bl	14cc8 <flatcc_builder_clear@@Base+0xb0>
   17ff0:	ldr	r3, [fp, #-120]	; 0xffffff88
   17ff4:	lsl	r3, r3, #2
   17ff8:	str	r3, [fp, #-20]	; 0xffffffec
   17ffc:	ldr	r0, [fp, #-120]	; 0xffffff88
   18000:	bl	13cc8 <main@@Base+0x110>
   18004:	mov	r3, r0
   18008:	str	r3, [fp, #-36]	; 0xffffffdc
   1800c:	mov	r2, #4
   18010:	ldr	r1, [fp, #-20]	; 0xffffffec
   18014:	ldr	r0, [fp, #-112]	; 0xffffff90
   18018:	bl	15304 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   1801c:	str	r0, [fp, #-24]	; 0xffffffe8
   18020:	mov	r3, #0
   18024:	str	r3, [fp, #-108]	; 0xffffff94
   18028:	mov	r3, #0
   1802c:	str	r3, [fp, #-104]	; 0xffffff98
   18030:	ldr	r3, [fp, #-108]	; 0xffffff94
   18034:	add	r3, r3, #4
   18038:	str	r3, [fp, #-108]	; 0xffffff94
   1803c:	ldr	r3, [fp, #-104]	; 0xffffff98
   18040:	add	r3, r3, #1
   18044:	lsl	r3, r3, #3
   18048:	sub	r2, fp, #12
   1804c:	add	r3, r2, r3
   18050:	sub	r2, fp, #36	; 0x24
   18054:	str	r2, [r3, #-96]	; 0xffffffa0
   18058:	ldr	r3, [fp, #-104]	; 0xffffff98
   1805c:	add	r3, r3, #1
   18060:	lsl	r3, r3, #3
   18064:	sub	r2, fp, #12
   18068:	add	r3, r2, r3
   1806c:	mov	r2, #4
   18070:	str	r2, [r3, #-92]	; 0xffffffa4
   18074:	ldr	r3, [fp, #-104]	; 0xffffff98
   18078:	add	r3, r3, #1
   1807c:	str	r3, [fp, #-104]	; 0xffffff98
   18080:	ldr	r3, [fp, #-20]	; 0xffffffec
   18084:	cmp	r3, #0
   18088:	beq	180e0 <flatcc_builder_vector_edit@@Base+0x15c>
   1808c:	ldr	r2, [fp, #-108]	; 0xffffff94
   18090:	ldr	r3, [fp, #-20]	; 0xffffffec
   18094:	add	r3, r2, r3
   18098:	str	r3, [fp, #-108]	; 0xffffff94
   1809c:	ldr	r3, [fp, #-104]	; 0xffffff98
   180a0:	add	r3, r3, #1
   180a4:	lsl	r3, r3, #3
   180a8:	sub	r2, fp, #12
   180ac:	add	r3, r2, r3
   180b0:	ldr	r2, [fp, #-116]	; 0xffffff8c
   180b4:	str	r2, [r3, #-96]	; 0xffffffa0
   180b8:	ldr	r3, [fp, #-104]	; 0xffffff98
   180bc:	add	r3, r3, #1
   180c0:	lsl	r3, r3, #3
   180c4:	sub	r2, fp, #12
   180c8:	add	r3, r2, r3
   180cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   180d0:	str	r2, [r3, #-92]	; 0xffffffa4
   180d4:	ldr	r3, [fp, #-104]	; 0xffffff98
   180d8:	add	r3, r3, #1
   180dc:	str	r3, [fp, #-104]	; 0xffffff98
   180e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   180e4:	cmp	r3, #0
   180e8:	beq	18144 <flatcc_builder_vector_edit@@Base+0x1c0>
   180ec:	ldr	r2, [fp, #-108]	; 0xffffff94
   180f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   180f4:	add	r3, r2, r3
   180f8:	str	r3, [fp, #-108]	; 0xffffff94
   180fc:	ldr	r3, [fp, #-104]	; 0xffffff98
   18100:	add	r3, r3, #1
   18104:	lsl	r3, r3, #3
   18108:	sub	r2, fp, #12
   1810c:	add	r3, r2, r3
   18110:	ldr	r2, [pc, #424]	; 182c0 <flatcc_builder_vector_edit@@Base+0x33c>
   18114:	ldr	r2, [r4, r2]
   18118:	str	r2, [r3, #-96]	; 0xffffffa0
   1811c:	ldr	r3, [fp, #-104]	; 0xffffff98
   18120:	add	r3, r3, #1
   18124:	lsl	r3, r3, #3
   18128:	sub	r2, fp, #12
   1812c:	add	r3, r2, r3
   18130:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18134:	str	r2, [r3, #-92]	; 0xffffffa4
   18138:	ldr	r3, [fp, #-104]	; 0xffffff98
   1813c:	add	r3, r3, #1
   18140:	str	r3, [fp, #-104]	; 0xffffff98
   18144:	ldr	r3, [fp, #-112]	; 0xffffff90
   18148:	ldr	r3, [r3, #136]	; 0x88
   1814c:	mov	r2, r3
   18150:	ldr	r3, [fp, #-108]	; 0xffffff94
   18154:	sub	r3, r2, r3
   18158:	str	r3, [fp, #-28]	; 0xffffffe4
   1815c:	mov	r3, #0
   18160:	str	r3, [fp, #-16]
   18164:	b	1828c <flatcc_builder_vector_edit@@Base+0x308>
   18168:	ldr	r3, [fp, #-16]
   1816c:	lsl	r3, r3, #2
   18170:	ldr	r2, [fp, #-116]	; 0xffffff8c
   18174:	add	r3, r2, r3
   18178:	ldr	r3, [r3]
   1817c:	cmp	r3, #0
   18180:	beq	1821c <flatcc_builder_vector_edit@@Base+0x298>
   18184:	ldr	r3, [fp, #-16]
   18188:	lsl	r3, r3, #2
   1818c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   18190:	add	r3, r2, r3
   18194:	ldr	r3, [r3]
   18198:	mov	r2, r3
   1819c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   181a0:	sub	r2, r2, r3
   181a4:	ldr	r3, [fp, #-16]
   181a8:	lsl	r3, r3, #2
   181ac:	sub	r3, r2, r3
   181b0:	sub	r3, r3, #4
   181b4:	str	r3, [fp, #-32]	; 0xffffffe0
   181b8:	ldr	r3, [fp, #-16]
   181bc:	lsl	r3, r3, #2
   181c0:	ldr	r2, [fp, #-116]	; 0xffffff8c
   181c4:	add	r4, r2, r3
   181c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   181cc:	bl	13cc8 <main@@Base+0x110>
   181d0:	mov	r3, r0
   181d4:	str	r3, [r4]
   181d8:	ldr	r3, [fp, #-124]	; 0xffffff84
   181dc:	cmp	r3, #0
   181e0:	beq	18280 <flatcc_builder_vector_edit@@Base+0x2fc>
   181e4:	ldr	r2, [fp, #-124]	; 0xffffff84
   181e8:	ldr	r3, [fp, #-16]
   181ec:	add	r3, r2, r3
   181f0:	ldrb	r3, [r3]
   181f4:	cmp	r3, #0
   181f8:	bne	18280 <flatcc_builder_vector_edit@@Base+0x2fc>
   181fc:	ldr	r3, [pc, #192]	; 182c4 <flatcc_builder_vector_edit@@Base+0x340>
   18200:	add	r3, pc, r3
   18204:	ldr	r2, [pc, #188]	; 182c8 <flatcc_builder_vector_edit@@Base+0x344>
   18208:	ldr	r1, [pc, #188]	; 182cc <flatcc_builder_vector_edit@@Base+0x348>
   1820c:	add	r1, pc, r1
   18210:	ldr	r0, [pc, #184]	; 182d0 <flatcc_builder_vector_edit@@Base+0x34c>
   18214:	add	r0, pc, r0
   18218:	bl	1234c <__assert_fail@plt>
   1821c:	ldr	r3, [fp, #-124]	; 0xffffff84
   18220:	cmp	r3, #0
   18224:	beq	18260 <flatcc_builder_vector_edit@@Base+0x2dc>
   18228:	ldr	r2, [fp, #-124]	; 0xffffff84
   1822c:	ldr	r3, [fp, #-16]
   18230:	add	r3, r2, r3
   18234:	ldrb	r3, [r3]
   18238:	cmp	r3, #0
   1823c:	beq	18280 <flatcc_builder_vector_edit@@Base+0x2fc>
   18240:	ldr	r3, [pc, #140]	; 182d4 <flatcc_builder_vector_edit@@Base+0x350>
   18244:	add	r3, pc, r3
   18248:	ldr	r2, [pc, #136]	; 182d8 <flatcc_builder_vector_edit@@Base+0x354>
   1824c:	ldr	r1, [pc, #136]	; 182dc <flatcc_builder_vector_edit@@Base+0x358>
   18250:	add	r1, pc, r1
   18254:	ldr	r0, [pc, #132]	; 182e0 <flatcc_builder_vector_edit@@Base+0x35c>
   18258:	add	r0, pc, r0
   1825c:	bl	1234c <__assert_fail@plt>
   18260:	ldr	r3, [pc, #124]	; 182e4 <flatcc_builder_vector_edit@@Base+0x360>
   18264:	add	r3, pc, r3
   18268:	ldr	r2, [pc, #120]	; 182e8 <flatcc_builder_vector_edit@@Base+0x364>
   1826c:	ldr	r1, [pc, #120]	; 182ec <flatcc_builder_vector_edit@@Base+0x368>
   18270:	add	r1, pc, r1
   18274:	ldr	r0, [pc, #116]	; 182f0 <flatcc_builder_vector_edit@@Base+0x36c>
   18278:	add	r0, pc, r0
   1827c:	bl	1234c <__assert_fail@plt>
   18280:	ldr	r3, [fp, #-16]
   18284:	add	r3, r3, #1
   18288:	str	r3, [fp, #-16]
   1828c:	ldr	r2, [fp, #-16]
   18290:	ldr	r3, [fp, #-120]	; 0xffffff88
   18294:	cmp	r2, r3
   18298:	bcc	18168 <flatcc_builder_vector_edit@@Base+0x1e4>
   1829c:	sub	r3, fp, #108	; 0x6c
   182a0:	mov	r1, r3
   182a4:	ldr	r0, [fp, #-112]	; 0xffffff90
   182a8:	bl	1538c <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   182ac:	mov	r3, r0
   182b0:	mov	r0, r3
   182b4:	sub	sp, fp, #8
   182b8:	pop	{r4, fp, pc}
   182bc:	andeq	r7, r1, ip, lsr #32
   182c0:	andeq	r0, r0, r4, asr #32
   182c4:	andeq	r5, r0, r4, asr r8
   182c8:			; <UNDEFINED> instruction: 0x000005b1
   182cc:	andeq	r5, r0, r8, asr #1
   182d0:	andeq	r5, r0, r0, asr #7
   182d4:	andeq	r5, r0, r0, lsl r8
   182d8:			; <UNDEFINED> instruction: 0x000005b5
   182dc:	andeq	r5, r0, r4, lsl #1
   182e0:	andeq	r5, r0, ip, lsl #7
   182e4:	strdeq	r5, [r0], -r0
   182e8:			; <UNDEFINED> instruction: 0x000005b7
   182ec:	andeq	r5, r0, r4, rrx
   182f0:	strheq	r5, [r0], -ip

000182f4 <flatcc_builder_create_offset_vector_direct@@Base>:
   182f4:	push	{fp, lr}
   182f8:	add	fp, sp, #4
   182fc:	sub	sp, sp, #16
   18300:	str	r0, [fp, #-8]
   18304:	str	r1, [fp, #-12]
   18308:	str	r2, [fp, #-16]
   1830c:	mov	r3, #0
   18310:	ldr	r2, [fp, #-16]
   18314:	ldr	r1, [fp, #-12]
   18318:	ldr	r0, [fp, #-8]
   1831c:	bl	17fac <flatcc_builder_vector_edit@@Base+0x28>
   18320:	mov	r3, r0
   18324:	mov	r0, r3
   18328:	sub	sp, fp, #4
   1832c:	pop	{fp, pc}

00018330 <flatcc_builder_end_offset_vector@@Base>:
   18330:	push	{fp, lr}
   18334:	add	fp, sp, #4
   18338:	sub	sp, sp, #16
   1833c:	str	r0, [fp, #-16]
   18340:	ldr	r3, [fp, #-16]
   18344:	ldr	r3, [r3, #32]
   18348:	ldrh	r3, [r3, #14]
   1834c:	cmp	r3, #5
   18350:	beq	18374 <flatcc_builder_end_offset_vector@@Base+0x44>
   18354:	ldr	r3, [pc, #104]	; 183c4 <flatcc_builder_end_offset_vector@@Base+0x94>
   18358:	add	r3, pc, r3
   1835c:	ldr	r2, [pc, #100]	; 183c8 <flatcc_builder_end_offset_vector@@Base+0x98>
   18360:	ldr	r1, [pc, #100]	; 183cc <flatcc_builder_end_offset_vector@@Base+0x9c>
   18364:	add	r1, pc, r1
   18368:	ldr	r0, [pc, #96]	; 183d0 <flatcc_builder_end_offset_vector@@Base+0xa0>
   1836c:	add	r0, pc, r0
   18370:	bl	1234c <__assert_fail@plt>
   18374:	ldr	r3, [fp, #-16]
   18378:	ldr	r1, [r3, #16]
   1837c:	ldr	r3, [fp, #-16]
   18380:	ldr	r3, [r3, #32]
   18384:	ldr	r3, [r3, #20]
   18388:	mov	r2, r3
   1838c:	ldr	r0, [fp, #-16]
   18390:	bl	182f4 <flatcc_builder_create_offset_vector_direct@@Base>
   18394:	str	r0, [fp, #-8]
   18398:	ldr	r3, [fp, #-8]
   1839c:	cmp	r3, #0
   183a0:	bne	183ac <flatcc_builder_end_offset_vector@@Base+0x7c>
   183a4:	mov	r3, #0
   183a8:	b	183b8 <flatcc_builder_end_offset_vector@@Base+0x88>
   183ac:	ldr	r0, [fp, #-16]
   183b0:	bl	1523c <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   183b4:	ldr	r3, [fp, #-8]
   183b8:	mov	r0, r3
   183bc:	sub	sp, fp, #4
   183c0:	pop	{fp, pc}
   183c4:	andeq	r5, r0, ip, lsl r7
   183c8:	andeq	r0, r0, r8, asr #11
   183cc:	andeq	r4, r0, r0, ror pc
   183d0:	andeq	r5, r0, r8, lsl r1

000183d4 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   183d4:	push	{fp, lr}
   183d8:	add	fp, sp, #4
   183dc:	sub	sp, sp, #16
   183e0:	str	r0, [fp, #-16]
   183e4:	str	r1, [fp, #-20]	; 0xffffffec
   183e8:	ldr	r3, [fp, #-16]
   183ec:	ldr	r3, [r3, #32]
   183f0:	ldrh	r3, [r3, #14]
   183f4:	cmp	r3, #5
   183f8:	beq	1841c <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   183fc:	ldr	r3, [pc, #104]	; 1846c <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
   18400:	add	r3, pc, r3
   18404:	ldr	r2, [pc, #100]	; 18470 <flatcc_builder_end_offset_vector_for_unions@@Base+0x9c>
   18408:	ldr	r1, [pc, #100]	; 18474 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa0>
   1840c:	add	r1, pc, r1
   18410:	ldr	r0, [pc, #96]	; 18478 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   18414:	add	r0, pc, r0
   18418:	bl	1234c <__assert_fail@plt>
   1841c:	ldr	r3, [fp, #-16]
   18420:	ldr	r1, [r3, #16]
   18424:	ldr	r3, [fp, #-16]
   18428:	ldr	r3, [r3, #32]
   1842c:	ldr	r2, [r3, #20]
   18430:	ldr	r3, [fp, #-20]	; 0xffffffec
   18434:	ldr	r0, [fp, #-16]
   18438:	bl	17fac <flatcc_builder_vector_edit@@Base+0x28>
   1843c:	str	r0, [fp, #-8]
   18440:	ldr	r3, [fp, #-8]
   18444:	cmp	r3, #0
   18448:	bne	18454 <flatcc_builder_end_offset_vector_for_unions@@Base+0x80>
   1844c:	mov	r3, #0
   18450:	b	18460 <flatcc_builder_end_offset_vector_for_unions@@Base+0x8c>
   18454:	ldr	r0, [fp, #-16]
   18458:	bl	1523c <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   1845c:	ldr	r3, [fp, #-8]
   18460:	mov	r0, r3
   18464:	sub	sp, fp, #4
   18468:	pop	{fp, pc}
   1846c:	muleq	r0, r8, r6
   18470:	ldrdeq	r0, [r0], -r5
   18474:	andeq	r4, r0, r8, asr #29
   18478:	andeq	r5, r0, r0, ror r0

0001847c <flatcc_builder_offset_vector_edit@@Base>:
   1847c:	push	{fp}		; (str fp, [sp, #-4]!)
   18480:	add	fp, sp, #0
   18484:	sub	sp, sp, #12
   18488:	str	r0, [fp, #-8]
   1848c:	ldr	r3, [fp, #-8]
   18490:	ldr	r3, [r3, #16]
   18494:	mov	r0, r3
   18498:	add	sp, fp, #0
   1849c:	pop	{fp}		; (ldr fp, [sp], #4)
   184a0:	bx	lr

000184a4 <flatcc_builder_offset_vector_count@@Base>:
   184a4:	push	{fp}		; (str fp, [sp, #-4]!)
   184a8:	add	fp, sp, #0
   184ac:	sub	sp, sp, #12
   184b0:	str	r0, [fp, #-8]
   184b4:	ldr	r3, [fp, #-8]
   184b8:	ldr	r3, [r3, #32]
   184bc:	ldr	r3, [r3, #20]
   184c0:	mov	r0, r3
   184c4:	add	sp, fp, #0
   184c8:	pop	{fp}		; (ldr fp, [sp], #4)
   184cc:	bx	lr

000184d0 <flatcc_builder_table_add_union@@Base>:
   184d0:	push	{fp, lr}
   184d4:	add	fp, sp, #4
   184d8:	sub	sp, sp, #24
   184dc:	str	r0, [fp, #-16]
   184e0:	str	r1, [fp, #-20]	; 0xffffffec
   184e4:	sub	r1, fp, #28
   184e8:	stm	r1, {r2, r3}
   184ec:	ldr	r3, [fp, #-16]
   184f0:	ldr	r3, [r3, #32]
   184f4:	ldrh	r3, [r3, #14]
   184f8:	cmp	r3, #3
   184fc:	beq	18520 <flatcc_builder_table_add_union@@Base+0x50>
   18500:	ldr	r3, [pc, #352]	; 18668 <flatcc_builder_table_add_union@@Base+0x198>
   18504:	add	r3, pc, r3
   18508:	ldr	r2, [pc, #348]	; 1866c <flatcc_builder_table_add_union@@Base+0x19c>
   1850c:	ldr	r1, [pc, #348]	; 18670 <flatcc_builder_table_add_union@@Base+0x1a0>
   18510:	add	r1, pc, r1
   18514:	ldr	r0, [pc, #344]	; 18674 <flatcc_builder_table_add_union@@Base+0x1a4>
   18518:	add	r0, pc, r0
   1851c:	bl	1234c <__assert_fail@plt>
   18520:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   18524:	cmp	r3, #0
   18528:	bne	18578 <flatcc_builder_table_add_union@@Base+0xa8>
   1852c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18530:	cmp	r3, #0
   18534:	beq	18578 <flatcc_builder_table_add_union@@Base+0xa8>
   18538:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   1853c:	cmp	r3, #0
   18540:	bne	18570 <flatcc_builder_table_add_union@@Base+0xa0>
   18544:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18548:	cmp	r3, #0
   1854c:	beq	18570 <flatcc_builder_table_add_union@@Base+0xa0>
   18550:	ldr	r3, [pc, #288]	; 18678 <flatcc_builder_table_add_union@@Base+0x1a8>
   18554:	add	r3, pc, r3
   18558:	ldr	r2, [pc, #284]	; 1867c <flatcc_builder_table_add_union@@Base+0x1ac>
   1855c:	ldr	r1, [pc, #284]	; 18680 <flatcc_builder_table_add_union@@Base+0x1b0>
   18560:	add	r1, pc, r1
   18564:	ldr	r0, [pc, #280]	; 18684 <flatcc_builder_table_add_union@@Base+0x1b4>
   18568:	add	r0, pc, r0
   1856c:	bl	1234c <__assert_fail@plt>
   18570:	mvn	r3, #0
   18574:	b	1865c <flatcc_builder_table_add_union@@Base+0x18c>
   18578:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1857c:	cmp	r3, #0
   18580:	beq	185e0 <flatcc_builder_table_add_union@@Base+0x110>
   18584:	ldr	r1, [fp, #-20]	; 0xffffffec
   18588:	ldr	r0, [fp, #-16]
   1858c:	bl	19618 <flatcc_builder_table_add_offset@@Base>
   18590:	str	r0, [fp, #-8]
   18594:	ldr	r3, [fp, #-8]
   18598:	cmp	r3, #0
   1859c:	bne	185d4 <flatcc_builder_table_add_union@@Base+0x104>
   185a0:	ldr	r3, [fp, #-8]
   185a4:	cmp	r3, #0
   185a8:	bne	185cc <flatcc_builder_table_add_union@@Base+0xfc>
   185ac:	ldr	r3, [pc, #212]	; 18688 <flatcc_builder_table_add_union@@Base+0x1b8>
   185b0:	add	r3, pc, r3
   185b4:	ldr	r2, [pc, #208]	; 1868c <flatcc_builder_table_add_union@@Base+0x1bc>
   185b8:	ldr	r1, [pc, #208]	; 18690 <flatcc_builder_table_add_union@@Base+0x1c0>
   185bc:	add	r1, pc, r1
   185c0:	ldr	r0, [pc, #204]	; 18694 <flatcc_builder_table_add_union@@Base+0x1c4>
   185c4:	add	r0, pc, r0
   185c8:	bl	1234c <__assert_fail@plt>
   185cc:	mvn	r3, #0
   185d0:	b	1865c <flatcc_builder_table_add_union@@Base+0x18c>
   185d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   185d8:	ldr	r3, [fp, #-8]
   185dc:	str	r2, [r3]
   185e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   185e4:	sub	r1, r3, #1
   185e8:	mov	r3, #1
   185ec:	mov	r2, #1
   185f0:	ldr	r0, [fp, #-16]
   185f4:	bl	193bc <flatcc_builder_table_add@@Base>
   185f8:	str	r0, [fp, #-12]
   185fc:	ldr	r3, [fp, #-12]
   18600:	cmp	r3, #0
   18604:	bne	1863c <flatcc_builder_table_add_union@@Base+0x16c>
   18608:	ldr	r3, [fp, #-12]
   1860c:	cmp	r3, #0
   18610:	bne	18634 <flatcc_builder_table_add_union@@Base+0x164>
   18614:	ldr	r3, [pc, #124]	; 18698 <flatcc_builder_table_add_union@@Base+0x1c8>
   18618:	add	r3, pc, r3
   1861c:	ldr	r2, [pc, #120]	; 1869c <flatcc_builder_table_add_union@@Base+0x1cc>
   18620:	ldr	r1, [pc, #120]	; 186a0 <flatcc_builder_table_add_union@@Base+0x1d0>
   18624:	add	r1, pc, r1
   18628:	ldr	r0, [pc, #116]	; 186a4 <flatcc_builder_table_add_union@@Base+0x1d4>
   1862c:	add	r0, pc, r0
   18630:	bl	1234c <__assert_fail@plt>
   18634:	mvn	r3, #0
   18638:	b	1865c <flatcc_builder_table_add_union@@Base+0x18c>
   1863c:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   18640:	mov	r0, r3
   18644:	bl	13cec <main@@Base+0x134>
   18648:	mov	r3, r0
   1864c:	mov	r2, r3
   18650:	ldr	r3, [fp, #-12]
   18654:	strb	r2, [r3]
   18658:	mov	r3, #0
   1865c:	mov	r0, r3
   18660:	sub	sp, fp, #4
   18664:	pop	{fp, pc}
   18668:	andeq	r5, r0, r0, asr #11
   1866c:	andeq	r0, r0, lr, ror #11
   18670:	andeq	r4, r0, r4, asr #27
   18674:	andeq	r5, r0, ip, ror r0
   18678:	andeq	r5, r0, r0, ror r5
   1867c:	andeq	r0, r0, pc, ror #11
   18680:	andeq	r4, r0, r4, ror sp
   18684:	andeq	r5, r0, ip, lsl #1
   18688:	andeq	r5, r0, r4, lsl r5
   1868c:	strdeq	r0, [r0], -r2
   18690:	andeq	r4, r0, r8, lsl sp
   18694:	andeq	r5, r0, r4, asr r0
   18698:	andeq	r5, r0, ip, lsr #9
   1869c:	strdeq	r0, [r0], -r6
   186a0:			; <UNDEFINED> instruction: 0x00004cb0
   186a4:	strdeq	r4, [r0], -r8

000186a8 <flatcc_builder_table_add_union_vector@@Base>:
   186a8:	push	{fp, lr}
   186ac:	add	fp, sp, #4
   186b0:	sub	sp, sp, #24
   186b4:	str	r0, [fp, #-16]
   186b8:	str	r1, [fp, #-20]	; 0xffffffec
   186bc:	sub	r1, fp, #28
   186c0:	stm	r1, {r2, r3}
   186c4:	ldr	r3, [fp, #-16]
   186c8:	ldr	r3, [r3, #32]
   186cc:	ldrh	r3, [r3, #14]
   186d0:	cmp	r3, #3
   186d4:	beq	186f8 <flatcc_builder_table_add_union_vector@@Base+0x50>
   186d8:	ldr	r3, [pc, #396]	; 1886c <flatcc_builder_table_add_union_vector@@Base+0x1c4>
   186dc:	add	r3, pc, r3
   186e0:	mov	r2, #1536	; 0x600
   186e4:	ldr	r1, [pc, #388]	; 18870 <flatcc_builder_table_add_union_vector@@Base+0x1c8>
   186e8:	add	r1, pc, r1
   186ec:	ldr	r0, [pc, #384]	; 18874 <flatcc_builder_table_add_union_vector@@Base+0x1cc>
   186f0:	add	r0, pc, r0
   186f4:	bl	1234c <__assert_fail@plt>
   186f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   186fc:	cmp	r3, #0
   18700:	moveq	r3, #1
   18704:	movne	r3, #0
   18708:	uxtb	r2, r3
   1870c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18710:	cmp	r3, #0
   18714:	moveq	r3, #1
   18718:	movne	r3, #0
   1871c:	uxtb	r3, r3
   18720:	eor	r3, r3, r2
   18724:	uxtb	r3, r3
   18728:	cmp	r3, #0
   1872c:	beq	18790 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   18730:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18734:	cmp	r3, #0
   18738:	movne	r3, #1
   1873c:	moveq	r3, #0
   18740:	uxtb	r2, r3
   18744:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18748:	cmp	r3, #0
   1874c:	moveq	r3, #1
   18750:	movne	r3, #0
   18754:	uxtb	r3, r3
   18758:	eor	r3, r3, r2
   1875c:	uxtb	r3, r3
   18760:	cmp	r3, #0
   18764:	bne	18788 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   18768:	ldr	r3, [pc, #264]	; 18878 <flatcc_builder_table_add_union_vector@@Base+0x1d0>
   1876c:	add	r3, pc, r3
   18770:	ldr	r2, [pc, #260]	; 1887c <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   18774:	ldr	r1, [pc, #260]	; 18880 <flatcc_builder_table_add_union_vector@@Base+0x1d8>
   18778:	add	r1, pc, r1
   1877c:	ldr	r0, [pc, #256]	; 18884 <flatcc_builder_table_add_union_vector@@Base+0x1dc>
   18780:	add	r0, pc, r0
   18784:	bl	1234c <__assert_fail@plt>
   18788:	mvn	r3, #0
   1878c:	b	18860 <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   18790:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18794:	cmp	r3, #0
   18798:	beq	1885c <flatcc_builder_table_add_union_vector@@Base+0x1b4>
   1879c:	ldr	r3, [fp, #-20]	; 0xffffffec
   187a0:	sub	r3, r3, #1
   187a4:	mov	r1, r3
   187a8:	ldr	r0, [fp, #-16]
   187ac:	bl	19618 <flatcc_builder_table_add_offset@@Base>
   187b0:	str	r0, [fp, #-8]
   187b4:	ldr	r3, [fp, #-8]
   187b8:	cmp	r3, #0
   187bc:	bne	187f4 <flatcc_builder_table_add_union_vector@@Base+0x14c>
   187c0:	ldr	r3, [fp, #-8]
   187c4:	cmp	r3, #0
   187c8:	bne	187ec <flatcc_builder_table_add_union_vector@@Base+0x144>
   187cc:	ldr	r3, [pc, #180]	; 18888 <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   187d0:	add	r3, pc, r3
   187d4:	ldr	r2, [pc, #176]	; 1888c <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   187d8:	ldr	r1, [pc, #176]	; 18890 <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   187dc:	add	r1, pc, r1
   187e0:	ldr	r0, [pc, #172]	; 18894 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   187e4:	add	r0, pc, r0
   187e8:	bl	1234c <__assert_fail@plt>
   187ec:	mvn	r3, #0
   187f0:	b	18860 <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   187f4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   187f8:	ldr	r3, [fp, #-8]
   187fc:	str	r2, [r3]
   18800:	ldr	r1, [fp, #-20]	; 0xffffffec
   18804:	ldr	r0, [fp, #-16]
   18808:	bl	19618 <flatcc_builder_table_add_offset@@Base>
   1880c:	str	r0, [fp, #-8]
   18810:	ldr	r3, [fp, #-8]
   18814:	cmp	r3, #0
   18818:	bne	18850 <flatcc_builder_table_add_union_vector@@Base+0x1a8>
   1881c:	ldr	r3, [fp, #-8]
   18820:	cmp	r3, #0
   18824:	bne	18848 <flatcc_builder_table_add_union_vector@@Base+0x1a0>
   18828:	ldr	r3, [pc, #104]	; 18898 <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   1882c:	add	r3, pc, r3
   18830:	ldr	r2, [pc, #100]	; 1889c <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   18834:	ldr	r1, [pc, #100]	; 188a0 <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   18838:	add	r1, pc, r1
   1883c:	ldr	r0, [pc, #96]	; 188a4 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   18840:	add	r0, pc, r0
   18844:	bl	1234c <__assert_fail@plt>
   18848:	mvn	r3, #0
   1884c:	b	18860 <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   18850:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18854:	ldr	r3, [fp, #-8]
   18858:	str	r2, [r3]
   1885c:	mov	r3, #0
   18860:	mov	r0, r3
   18864:	sub	sp, fp, #4
   18868:	pop	{fp, pc}
   1886c:	andeq	r5, r0, r8, lsl #8
   18870:	andeq	r4, r0, ip, ror #23
   18874:	andeq	r4, r0, r4, lsr #29
   18878:	andeq	r5, r0, r8, ror r3
   1887c:	andeq	r0, r0, r1, lsl #12
   18880:	andeq	r4, r0, ip, asr fp
   18884:			; <UNDEFINED> instruction: 0x00004eb0
   18888:	andeq	r5, r0, r4, lsl r3
   1888c:	andeq	r0, r0, r4, lsl #12
   18890:	strdeq	r4, [r0], -r8
   18894:	andeq	r4, r0, r4, lsr lr
   18898:			; <UNDEFINED> instruction: 0x000052b8
   1889c:	andeq	r0, r0, r8, lsl #12
   188a0:	muleq	r0, ip, sl
   188a4:	ldrdeq	r4, [r0], -r8

000188a8 <flatcc_builder_create_union_vector@@Base>:
   188a8:	push	{fp, lr}
   188ac:	add	fp, sp, #4
   188b0:	sub	sp, sp, #48	; 0x30
   188b4:	str	r0, [fp, #-32]	; 0xffffffe0
   188b8:	str	r1, [fp, #-36]	; 0xffffffdc
   188bc:	str	r2, [fp, #-40]	; 0xffffffd8
   188c0:	str	r3, [fp, #-44]	; 0xffffffd4
   188c4:	mov	r3, #0
   188c8:	str	r3, [fp, #-24]	; 0xffffffe8
   188cc:	mov	r3, #0
   188d0:	str	r3, [fp, #-20]	; 0xffffffec
   188d4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   188d8:	bl	16cdc <flatcc_builder_start_offset_vector@@Base>
   188dc:	mov	r3, r0
   188e0:	cmp	r3, #0
   188e4:	beq	18900 <flatcc_builder_create_union_vector@@Base+0x58>
   188e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   188ec:	mov	r2, r3
   188f0:	sub	r3, fp, #24
   188f4:	ldm	r3, {r0, r1}
   188f8:	stm	r2, {r0, r1}
   188fc:	b	18a1c <flatcc_builder_create_union_vector@@Base+0x174>
   18900:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18904:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18908:	bl	16588 <flatcc_builder_extend_offset_vector@@Base>
   1890c:	mov	r3, r0
   18910:	cmp	r3, #0
   18914:	bne	18930 <flatcc_builder_create_union_vector@@Base+0x88>
   18918:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1891c:	mov	r2, r3
   18920:	sub	r3, fp, #24
   18924:	ldm	r3, {r0, r1}
   18928:	stm	r2, {r0, r1}
   1892c:	b	18a1c <flatcc_builder_create_union_vector@@Base+0x174>
   18930:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18934:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18938:	bl	140fc <flatcc_builder_default_alloc@@Base+0x2f0>
   1893c:	str	r0, [fp, #-12]
   18940:	ldr	r3, [fp, #-12]
   18944:	cmp	r3, #0
   18948:	bne	18964 <flatcc_builder_create_union_vector@@Base+0xbc>
   1894c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18950:	mov	r2, r3
   18954:	sub	r3, fp, #24
   18958:	ldm	r3, {r0, r1}
   1895c:	stm	r2, {r0, r1}
   18960:	b	18a1c <flatcc_builder_create_union_vector@@Base+0x174>
   18964:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18968:	bl	1847c <flatcc_builder_offset_vector_edit@@Base>
   1896c:	str	r0, [fp, #-16]
   18970:	mov	r3, #0
   18974:	str	r3, [fp, #-8]
   18978:	b	189d4 <flatcc_builder_create_union_vector@@Base+0x12c>
   1897c:	ldr	r2, [fp, #-12]
   18980:	ldr	r3, [fp, #-8]
   18984:	add	r3, r2, r3
   18988:	ldr	r2, [fp, #-8]
   1898c:	lsl	r2, r2, #3
   18990:	ldr	r1, [fp, #-40]	; 0xffffffd8
   18994:	add	r2, r1, r2
   18998:	ldrb	r2, [r2]
   1899c:	strb	r2, [r3]
   189a0:	ldr	r3, [fp, #-8]
   189a4:	lsl	r3, r3, #2
   189a8:	ldr	r2, [fp, #-16]
   189ac:	add	r3, r2, r3
   189b0:	ldr	r2, [fp, #-8]
   189b4:	lsl	r2, r2, #3
   189b8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   189bc:	add	r2, r1, r2
   189c0:	ldr	r2, [r2, #4]
   189c4:	str	r2, [r3]
   189c8:	ldr	r3, [fp, #-8]
   189cc:	add	r3, r3, #1
   189d0:	str	r3, [fp, #-8]
   189d4:	ldr	r2, [fp, #-8]
   189d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   189dc:	cmp	r2, r3
   189e0:	bcc	1897c <flatcc_builder_create_union_vector@@Base+0xd4>
   189e4:	sub	r0, fp, #24
   189e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   189ec:	str	r3, [sp]
   189f0:	ldr	r3, [fp, #-16]
   189f4:	ldr	r2, [fp, #-12]
   189f8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   189fc:	bl	18a28 <flatcc_builder_create_union_vector_direct@@Base>
   18a00:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18a04:	bl	1523c <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   18a08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18a0c:	mov	r2, r3
   18a10:	sub	r3, fp, #24
   18a14:	ldm	r3, {r0, r1}
   18a18:	stm	r2, {r0, r1}
   18a1c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18a20:	sub	sp, fp, #4
   18a24:	pop	{fp, pc}

00018a28 <flatcc_builder_create_union_vector_direct@@Base>:
   18a28:	push	{fp, lr}
   18a2c:	add	fp, sp, #4
   18a30:	sub	sp, sp, #32
   18a34:	str	r0, [fp, #-16]
   18a38:	str	r1, [fp, #-20]	; 0xffffffec
   18a3c:	str	r2, [fp, #-24]	; 0xffffffe8
   18a40:	str	r3, [fp, #-28]	; 0xffffffe4
   18a44:	mov	r3, #0
   18a48:	str	r3, [fp, #-12]
   18a4c:	mov	r3, #0
   18a50:	str	r3, [fp, #-8]
   18a54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18a58:	ldr	r2, [fp, #4]
   18a5c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18a60:	ldr	r0, [fp, #-20]	; 0xffffffec
   18a64:	bl	17fac <flatcc_builder_vector_edit@@Base+0x28>
   18a68:	mov	r3, r0
   18a6c:	str	r3, [fp, #-8]
   18a70:	ldr	r3, [fp, #-8]
   18a74:	cmp	r3, #0
   18a78:	bne	18a94 <flatcc_builder_create_union_vector_direct@@Base+0x6c>
   18a7c:	ldr	r3, [fp, #-16]
   18a80:	mov	r2, r3
   18a84:	sub	r3, fp, #12
   18a88:	ldm	r3, {r0, r1}
   18a8c:	stm	r2, {r0, r1}
   18a90:	b	18af8 <flatcc_builder_create_union_vector_direct@@Base+0xd0>
   18a94:	mvn	r3, #0
   18a98:	str	r3, [sp, #4]
   18a9c:	mov	r3, #1
   18aa0:	str	r3, [sp]
   18aa4:	mov	r3, #1
   18aa8:	ldr	r2, [fp, #4]
   18aac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18ab0:	ldr	r0, [fp, #-20]	; 0xffffffec
   18ab4:	bl	17c68 <flatcc_builder_create_vector@@Base>
   18ab8:	mov	r3, r0
   18abc:	str	r3, [fp, #-12]
   18ac0:	ldr	r3, [fp, #-12]
   18ac4:	cmp	r3, #0
   18ac8:	bne	18ae4 <flatcc_builder_create_union_vector_direct@@Base+0xbc>
   18acc:	ldr	r3, [fp, #-16]
   18ad0:	mov	r2, r3
   18ad4:	sub	r3, fp, #12
   18ad8:	ldm	r3, {r0, r1}
   18adc:	stm	r2, {r0, r1}
   18ae0:	b	18af8 <flatcc_builder_create_union_vector_direct@@Base+0xd0>
   18ae4:	ldr	r3, [fp, #-16]
   18ae8:	mov	r2, r3
   18aec:	sub	r3, fp, #12
   18af0:	ldm	r3, {r0, r1}
   18af4:	stm	r2, {r0, r1}
   18af8:	ldr	r0, [fp, #-16]
   18afc:	sub	sp, fp, #4
   18b00:	pop	{fp, pc}

00018b04 <flatcc_builder_start_union_vector@@Base>:
   18b04:	push	{fp, lr}
   18b08:	add	fp, sp, #4
   18b0c:	sub	sp, sp, #8
   18b10:	str	r0, [fp, #-8]
   18b14:	mov	r1, #4
   18b18:	ldr	r0, [fp, #-8]
   18b1c:	bl	1505c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   18b20:	mov	r3, r0
   18b24:	cmp	r3, #0
   18b28:	beq	18b34 <flatcc_builder_start_union_vector@@Base+0x30>
   18b2c:	mvn	r3, #0
   18b30:	b	18b74 <flatcc_builder_start_union_vector@@Base+0x70>
   18b34:	ldr	r3, [fp, #-8]
   18b38:	ldr	r3, [r3, #32]
   18b3c:	mov	r2, #8
   18b40:	str	r2, [r3, #16]
   18b44:	ldr	r3, [fp, #-8]
   18b48:	ldr	r3, [r3, #32]
   18b4c:	mov	r2, #0
   18b50:	str	r2, [r3, #20]
   18b54:	ldr	r3, [fp, #-8]
   18b58:	ldr	r3, [r3, #32]
   18b5c:	mov	r2, #7
   18b60:	strh	r2, [r3, #14]
   18b64:	mvn	r1, #3
   18b68:	ldr	r0, [fp, #-8]
   18b6c:	bl	13fd4 <flatcc_builder_default_alloc@@Base+0x1c8>
   18b70:	mov	r3, #0
   18b74:	mov	r0, r3
   18b78:	sub	sp, fp, #4
   18b7c:	pop	{fp, pc}

00018b80 <flatcc_builder_end_union_vector@@Base>:
   18b80:	push	{fp, lr}
   18b84:	add	fp, sp, #4
   18b88:	sub	sp, sp, #48	; 0x30
   18b8c:	str	r0, [fp, #-40]	; 0xffffffd8
   18b90:	str	r1, [fp, #-44]	; 0xffffffd4
   18b94:	mov	r3, #0
   18b98:	str	r3, [fp, #-32]	; 0xffffffe0
   18b9c:	mov	r3, #0
   18ba0:	str	r3, [fp, #-28]	; 0xffffffe4
   18ba4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18ba8:	ldr	r3, [r3, #32]
   18bac:	ldrh	r3, [r3, #14]
   18bb0:	cmp	r3, #7
   18bb4:	beq	18bd8 <flatcc_builder_end_union_vector@@Base+0x58>
   18bb8:	ldr	r3, [pc, #320]	; 18d00 <flatcc_builder_end_union_vector@@Base+0x180>
   18bbc:	add	r3, pc, r3
   18bc0:	ldr	r2, [pc, #316]	; 18d04 <flatcc_builder_end_union_vector@@Base+0x184>
   18bc4:	ldr	r1, [pc, #316]	; 18d08 <flatcc_builder_end_union_vector@@Base+0x188>
   18bc8:	add	r1, pc, r1
   18bcc:	ldr	r0, [pc, #312]	; 18d0c <flatcc_builder_end_union_vector@@Base+0x18c>
   18bd0:	add	r0, pc, r0
   18bd4:	bl	1234c <__assert_fail@plt>
   18bd8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18bdc:	bl	18d38 <flatcc_builder_union_vector_count@@Base>
   18be0:	str	r0, [fp, #-12]
   18be4:	ldr	r2, [fp, #-12]
   18be8:	mov	r3, r2
   18bec:	lsl	r3, r3, #2
   18bf0:	add	r3, r3, r2
   18bf4:	mov	r1, r3
   18bf8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18bfc:	bl	140fc <flatcc_builder_default_alloc@@Base+0x2f0>
   18c00:	str	r0, [fp, #-16]
   18c04:	ldr	r3, [fp, #-16]
   18c08:	cmp	r3, #0
   18c0c:	bne	18c28 <flatcc_builder_end_union_vector@@Base+0xa8>
   18c10:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18c14:	mov	r2, r3
   18c18:	sub	r3, fp, #32
   18c1c:	ldm	r3, {r0, r1}
   18c20:	stm	r2, {r0, r1}
   18c24:	b	18cf4 <flatcc_builder_end_union_vector@@Base+0x174>
   18c28:	ldr	r3, [fp, #-12]
   18c2c:	lsl	r3, r3, #2
   18c30:	ldr	r2, [fp, #-16]
   18c34:	add	r3, r2, r3
   18c38:	str	r3, [fp, #-20]	; 0xffffffec
   18c3c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18c40:	bl	18d10 <flatcc_builder_union_vector_edit@@Base>
   18c44:	str	r0, [fp, #-24]	; 0xffffffe8
   18c48:	mov	r3, #0
   18c4c:	str	r3, [fp, #-8]
   18c50:	b	18cac <flatcc_builder_end_union_vector@@Base+0x12c>
   18c54:	ldr	r2, [fp, #-20]	; 0xffffffec
   18c58:	ldr	r3, [fp, #-8]
   18c5c:	add	r3, r2, r3
   18c60:	ldr	r2, [fp, #-8]
   18c64:	lsl	r2, r2, #3
   18c68:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18c6c:	add	r2, r1, r2
   18c70:	ldrb	r2, [r2]
   18c74:	strb	r2, [r3]
   18c78:	ldr	r3, [fp, #-8]
   18c7c:	lsl	r3, r3, #2
   18c80:	ldr	r2, [fp, #-16]
   18c84:	add	r3, r2, r3
   18c88:	ldr	r2, [fp, #-8]
   18c8c:	lsl	r2, r2, #3
   18c90:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18c94:	add	r2, r1, r2
   18c98:	ldr	r2, [r2, #4]
   18c9c:	str	r2, [r3]
   18ca0:	ldr	r3, [fp, #-8]
   18ca4:	add	r3, r3, #1
   18ca8:	str	r3, [fp, #-8]
   18cac:	ldr	r2, [fp, #-8]
   18cb0:	ldr	r3, [fp, #-12]
   18cb4:	cmp	r2, r3
   18cb8:	bcc	18c54 <flatcc_builder_end_union_vector@@Base+0xd4>
   18cbc:	sub	r0, fp, #32
   18cc0:	ldr	r3, [fp, #-12]
   18cc4:	str	r3, [sp]
   18cc8:	ldr	r3, [fp, #-16]
   18ccc:	ldr	r2, [fp, #-20]	; 0xffffffec
   18cd0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18cd4:	bl	18a28 <flatcc_builder_create_union_vector_direct@@Base>
   18cd8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18cdc:	bl	1523c <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   18ce0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18ce4:	mov	r2, r3
   18ce8:	sub	r3, fp, #32
   18cec:	ldm	r3, {r0, r1}
   18cf0:	stm	r2, {r0, r1}
   18cf4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18cf8:	sub	sp, fp, #4
   18cfc:	pop	{fp, pc}
   18d00:	andeq	r4, r0, r0, asr pc
   18d04:	andeq	r0, r0, r1, asr r6
   18d08:	andeq	r4, r0, ip, lsl #14
   18d0c:	andeq	r4, r0, r8, lsl #21

00018d10 <flatcc_builder_union_vector_edit@@Base>:
   18d10:	push	{fp}		; (str fp, [sp, #-4]!)
   18d14:	add	fp, sp, #0
   18d18:	sub	sp, sp, #12
   18d1c:	str	r0, [fp, #-8]
   18d20:	ldr	r3, [fp, #-8]
   18d24:	ldr	r3, [r3, #16]
   18d28:	mov	r0, r3
   18d2c:	add	sp, fp, #0
   18d30:	pop	{fp}		; (ldr fp, [sp], #4)
   18d34:	bx	lr

00018d38 <flatcc_builder_union_vector_count@@Base>:
   18d38:	push	{fp}		; (str fp, [sp, #-4]!)
   18d3c:	add	fp, sp, #0
   18d40:	sub	sp, sp, #12
   18d44:	str	r0, [fp, #-8]
   18d48:	ldr	r3, [fp, #-8]
   18d4c:	ldr	r3, [r3, #32]
   18d50:	ldr	r3, [r3, #20]
   18d54:	mov	r0, r3
   18d58:	add	sp, fp, #0
   18d5c:	pop	{fp}		; (ldr fp, [sp], #4)
   18d60:	bx	lr

00018d64 <flatcc_builder_extend_union_vector@@Base>:
   18d64:	push	{fp, lr}
   18d68:	add	fp, sp, #4
   18d6c:	sub	sp, sp, #8
   18d70:	str	r0, [fp, #-8]
   18d74:	str	r1, [fp, #-12]
   18d78:	mvn	r2, #-536870912	; 0xe0000000
   18d7c:	ldr	r1, [fp, #-12]
   18d80:	ldr	r0, [fp, #-8]
   18d84:	bl	16274 <flatcc_builder_end_struct@@Base+0xa0>
   18d88:	mov	r3, r0
   18d8c:	cmp	r3, #0
   18d90:	beq	18d9c <flatcc_builder_extend_union_vector@@Base+0x38>
   18d94:	mov	r3, #0
   18d98:	b	18db4 <flatcc_builder_extend_union_vector@@Base+0x50>
   18d9c:	ldr	r3, [fp, #-12]
   18da0:	lsl	r3, r3, #3
   18da4:	mov	r1, r3
   18da8:	ldr	r0, [fp, #-8]
   18dac:	bl	140fc <flatcc_builder_default_alloc@@Base+0x2f0>
   18db0:	mov	r3, r0
   18db4:	mov	r0, r3
   18db8:	sub	sp, fp, #4
   18dbc:	pop	{fp, pc}

00018dc0 <flatcc_builder_truncate_union_vector@@Base>:
   18dc0:	push	{fp, lr}
   18dc4:	add	fp, sp, #4
   18dc8:	sub	sp, sp, #8
   18dcc:	str	r0, [fp, #-8]
   18dd0:	str	r1, [fp, #-12]
   18dd4:	ldr	r3, [fp, #-8]
   18dd8:	ldr	r3, [r3, #32]
   18ddc:	ldrh	r3, [r3, #14]
   18de0:	cmp	r3, #7
   18de4:	beq	18e08 <flatcc_builder_truncate_union_vector@@Base+0x48>
   18de8:	ldr	r3, [pc, #192]	; 18eb0 <flatcc_builder_truncate_union_vector@@Base+0xf0>
   18dec:	add	r3, pc, r3
   18df0:	ldr	r2, [pc, #188]	; 18eb4 <flatcc_builder_truncate_union_vector@@Base+0xf4>
   18df4:	ldr	r1, [pc, #188]	; 18eb8 <flatcc_builder_truncate_union_vector@@Base+0xf8>
   18df8:	add	r1, pc, r1
   18dfc:	ldr	r0, [pc, #184]	; 18ebc <flatcc_builder_truncate_union_vector@@Base+0xfc>
   18e00:	add	r0, pc, r0
   18e04:	bl	1234c <__assert_fail@plt>
   18e08:	ldr	r3, [fp, #-8]
   18e0c:	ldr	r3, [r3, #32]
   18e10:	ldr	r2, [r3, #20]
   18e14:	ldr	r3, [fp, #-12]
   18e18:	cmp	r2, r3
   18e1c:	bcs	18e60 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   18e20:	ldr	r3, [fp, #-8]
   18e24:	ldr	r3, [r3, #32]
   18e28:	ldr	r2, [r3, #20]
   18e2c:	ldr	r3, [fp, #-12]
   18e30:	cmp	r2, r3
   18e34:	bcs	18e58 <flatcc_builder_truncate_union_vector@@Base+0x98>
   18e38:	ldr	r3, [pc, #128]	; 18ec0 <flatcc_builder_truncate_union_vector@@Base+0x100>
   18e3c:	add	r3, pc, r3
   18e40:	ldr	r2, [pc, #124]	; 18ec4 <flatcc_builder_truncate_union_vector@@Base+0x104>
   18e44:	ldr	r1, [pc, #124]	; 18ec8 <flatcc_builder_truncate_union_vector@@Base+0x108>
   18e48:	add	r1, pc, r1
   18e4c:	ldr	r0, [pc, #120]	; 18ecc <flatcc_builder_truncate_union_vector@@Base+0x10c>
   18e50:	add	r0, pc, r0
   18e54:	bl	1234c <__assert_fail@plt>
   18e58:	mvn	r3, #0
   18e5c:	b	18ea4 <flatcc_builder_truncate_union_vector@@Base+0xe4>
   18e60:	ldr	r3, [fp, #-8]
   18e64:	ldr	r3, [r3, #32]
   18e68:	ldr	r2, [fp, #-8]
   18e6c:	ldr	r2, [r2, #32]
   18e70:	ldr	r1, [r2, #20]
   18e74:	ldr	r2, [fp, #-12]
   18e78:	sub	r2, r1, r2
   18e7c:	str	r2, [r3, #20]
   18e80:	ldr	r3, [fp, #-8]
   18e84:	ldr	r3, [r3, #32]
   18e88:	ldr	r3, [r3, #16]
   18e8c:	ldr	r2, [fp, #-12]
   18e90:	mul	r3, r2, r3
   18e94:	mov	r1, r3
   18e98:	ldr	r0, [fp, #-8]
   18e9c:	bl	14198 <flatcc_builder_default_alloc@@Base+0x38c>
   18ea0:	mov	r3, #0
   18ea4:	mov	r0, r3
   18ea8:	sub	sp, fp, #4
   18eac:	pop	{fp, pc}
   18eb0:	andeq	r4, r0, r0, asr #26
   18eb4:	andeq	r0, r0, r1, lsl #13
   18eb8:	ldrdeq	r4, [r0], -ip
   18ebc:	andeq	r4, r0, r8, asr r8
   18ec0:	strdeq	r4, [r0], -r0
   18ec4:	andeq	r0, r0, r2, lsl #13
   18ec8:	andeq	r4, r0, ip, lsl #9
   18ecc:			; <UNDEFINED> instruction: 0x000046b8

00018ed0 <flatcc_builder_union_vector_push@@Base>:
   18ed0:	push	{fp, lr}
   18ed4:	add	fp, sp, #4
   18ed8:	sub	sp, sp, #24
   18edc:	str	r0, [fp, #-16]
   18ee0:	sub	r3, fp, #24
   18ee4:	stm	r3, {r1, r2}
   18ee8:	ldr	r3, [fp, #-16]
   18eec:	ldr	r3, [r3, #32]
   18ef0:	ldrh	r3, [r3, #14]
   18ef4:	cmp	r3, #7
   18ef8:	beq	18f1c <flatcc_builder_union_vector_push@@Base+0x4c>
   18efc:	ldr	r3, [pc, #152]	; 18f9c <flatcc_builder_union_vector_push@@Base+0xcc>
   18f00:	add	r3, pc, r3
   18f04:	ldr	r2, [pc, #148]	; 18fa0 <flatcc_builder_union_vector_push@@Base+0xd0>
   18f08:	ldr	r1, [pc, #148]	; 18fa4 <flatcc_builder_union_vector_push@@Base+0xd4>
   18f0c:	add	r1, pc, r1
   18f10:	ldr	r0, [pc, #144]	; 18fa8 <flatcc_builder_union_vector_push@@Base+0xd8>
   18f14:	add	r0, pc, r0
   18f18:	bl	1234c <__assert_fail@plt>
   18f1c:	ldr	r3, [fp, #-16]
   18f20:	ldr	r3, [r3, #32]
   18f24:	ldr	r3, [r3, #20]
   18f28:	cmn	r3, #-536870911	; 0xe0000001
   18f2c:	bne	18f38 <flatcc_builder_union_vector_push@@Base+0x68>
   18f30:	mov	r3, #0
   18f34:	b	18f90 <flatcc_builder_union_vector_push@@Base+0xc0>
   18f38:	ldr	r3, [fp, #-16]
   18f3c:	ldr	r3, [r3, #32]
   18f40:	ldr	r2, [fp, #-16]
   18f44:	ldr	r2, [r2, #32]
   18f48:	ldr	r2, [r2, #20]
   18f4c:	add	r2, r2, #1
   18f50:	str	r2, [r3, #20]
   18f54:	mov	r1, #8
   18f58:	ldr	r0, [fp, #-16]
   18f5c:	bl	140fc <flatcc_builder_default_alloc@@Base+0x2f0>
   18f60:	str	r0, [fp, #-8]
   18f64:	ldr	r3, [fp, #-8]
   18f68:	cmp	r3, #0
   18f6c:	bne	18f78 <flatcc_builder_union_vector_push@@Base+0xa8>
   18f70:	mov	r3, #0
   18f74:	b	18f90 <flatcc_builder_union_vector_push@@Base+0xc0>
   18f78:	ldr	r3, [fp, #-8]
   18f7c:	mov	r2, r3
   18f80:	sub	r3, fp, #24
   18f84:	ldm	r3, {r0, r1}
   18f88:	stm	r2, {r0, r1}
   18f8c:	ldr	r3, [fp, #-8]
   18f90:	mov	r0, r3
   18f94:	sub	sp, fp, #4
   18f98:	pop	{fp, pc}
   18f9c:	andeq	r4, r0, r4, asr ip
   18fa0:	andeq	r0, r0, sp, lsl #13
   18fa4:	andeq	r4, r0, r8, asr #7
   18fa8:	andeq	r4, r0, r4, asr #14

00018fac <flatcc_builder_append_union_vector@@Base>:
   18fac:	push	{fp, lr}
   18fb0:	add	fp, sp, #4
   18fb4:	sub	sp, sp, #16
   18fb8:	str	r0, [fp, #-8]
   18fbc:	str	r1, [fp, #-12]
   18fc0:	str	r2, [fp, #-16]
   18fc4:	ldr	r3, [fp, #-8]
   18fc8:	ldr	r3, [r3, #32]
   18fcc:	ldrh	r3, [r3, #14]
   18fd0:	cmp	r3, #7
   18fd4:	beq	18ff8 <flatcc_builder_append_union_vector@@Base+0x4c>
   18fd8:	ldr	r3, [pc, #100]	; 19044 <flatcc_builder_append_union_vector@@Base+0x98>
   18fdc:	add	r3, pc, r3
   18fe0:	ldr	r2, [pc, #96]	; 19048 <flatcc_builder_append_union_vector@@Base+0x9c>
   18fe4:	ldr	r1, [pc, #96]	; 1904c <flatcc_builder_append_union_vector@@Base+0xa0>
   18fe8:	add	r1, pc, r1
   18fec:	ldr	r0, [pc, #92]	; 19050 <flatcc_builder_append_union_vector@@Base+0xa4>
   18ff0:	add	r0, pc, r0
   18ff4:	bl	1234c <__assert_fail@plt>
   18ff8:	mvn	r2, #-536870912	; 0xe0000000
   18ffc:	ldr	r1, [fp, #-16]
   19000:	ldr	r0, [fp, #-8]
   19004:	bl	16274 <flatcc_builder_end_struct@@Base+0xa0>
   19008:	mov	r3, r0
   1900c:	cmp	r3, #0
   19010:	beq	1901c <flatcc_builder_append_union_vector@@Base+0x70>
   19014:	mov	r3, #0
   19018:	b	19038 <flatcc_builder_append_union_vector@@Base+0x8c>
   1901c:	ldr	r3, [fp, #-16]
   19020:	lsl	r3, r3, #3
   19024:	mov	r2, r3
   19028:	ldr	r1, [fp, #-12]
   1902c:	ldr	r0, [fp, #-8]
   19030:	bl	141f4 <flatcc_builder_default_alloc@@Base+0x3e8>
   19034:	mov	r3, r0
   19038:	mov	r0, r3
   1903c:	sub	sp, fp, #4
   19040:	pop	{fp, pc}
   19044:	muleq	r0, ip, fp
   19048:	muleq	r0, ip, r6
   1904c:	andeq	r4, r0, ip, ror #5
   19050:	andeq	r4, r0, r8, ror #12

00019054 <flatcc_builder_create_string@@Base>:
   19054:	push	{r4, fp, lr}
   19058:	add	fp, sp, #8
   1905c:	sub	sp, sp, #100	; 0x64
   19060:	str	r0, [fp, #-96]	; 0xffffffa0
   19064:	str	r1, [fp, #-100]	; 0xffffff9c
   19068:	str	r2, [fp, #-104]	; 0xffffff98
   1906c:	ldr	r4, [pc, #376]	; 191ec <flatcc_builder_create_string@@Base+0x198>
   19070:	add	r4, pc, r4
   19074:	ldr	r0, [fp, #-104]	; 0xffffff98
   19078:	bl	13cc8 <main@@Base+0x110>
   1907c:	mov	r3, r0
   19080:	str	r3, [fp, #-20]	; 0xffffffec
   19084:	ldr	r3, [fp, #-104]	; 0xffffff98
   19088:	add	r3, r3, #1
   1908c:	mov	r2, #4
   19090:	mov	r1, r3
   19094:	ldr	r0, [fp, #-96]	; 0xffffffa0
   19098:	bl	15304 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   1909c:	mov	r3, r0
   190a0:	add	r3, r3, #1
   190a4:	str	r3, [fp, #-16]
   190a8:	mov	r3, #0
   190ac:	str	r3, [fp, #-92]	; 0xffffffa4
   190b0:	mov	r3, #0
   190b4:	str	r3, [fp, #-88]	; 0xffffffa8
   190b8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   190bc:	add	r3, r3, #4
   190c0:	str	r3, [fp, #-92]	; 0xffffffa4
   190c4:	ldr	r3, [fp, #-88]	; 0xffffffa8
   190c8:	add	r3, r3, #1
   190cc:	lsl	r3, r3, #3
   190d0:	sub	r2, fp, #12
   190d4:	add	r3, r2, r3
   190d8:	sub	r2, fp, #20
   190dc:	str	r2, [r3, #-80]	; 0xffffffb0
   190e0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   190e4:	add	r3, r3, #1
   190e8:	lsl	r3, r3, #3
   190ec:	sub	r2, fp, #12
   190f0:	add	r3, r2, r3
   190f4:	mov	r2, #4
   190f8:	str	r2, [r3, #-76]	; 0xffffffb4
   190fc:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19100:	add	r3, r3, #1
   19104:	str	r3, [fp, #-88]	; 0xffffffa8
   19108:	ldr	r3, [fp, #-104]	; 0xffffff98
   1910c:	cmp	r3, #0
   19110:	beq	19168 <flatcc_builder_create_string@@Base+0x114>
   19114:	ldr	r2, [fp, #-92]	; 0xffffffa4
   19118:	ldr	r3, [fp, #-104]	; 0xffffff98
   1911c:	add	r3, r2, r3
   19120:	str	r3, [fp, #-92]	; 0xffffffa4
   19124:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19128:	add	r3, r3, #1
   1912c:	lsl	r3, r3, #3
   19130:	sub	r2, fp, #12
   19134:	add	r3, r2, r3
   19138:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1913c:	str	r2, [r3, #-80]	; 0xffffffb0
   19140:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19144:	add	r3, r3, #1
   19148:	lsl	r3, r3, #3
   1914c:	sub	r2, fp, #12
   19150:	add	r3, r2, r3
   19154:	ldr	r2, [fp, #-104]	; 0xffffff98
   19158:	str	r2, [r3, #-76]	; 0xffffffb4
   1915c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19160:	add	r3, r3, #1
   19164:	str	r3, [fp, #-88]	; 0xffffffa8
   19168:	ldr	r3, [fp, #-16]
   1916c:	cmp	r3, #0
   19170:	beq	191cc <flatcc_builder_create_string@@Base+0x178>
   19174:	ldr	r2, [fp, #-92]	; 0xffffffa4
   19178:	ldr	r3, [fp, #-16]
   1917c:	add	r3, r2, r3
   19180:	str	r3, [fp, #-92]	; 0xffffffa4
   19184:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19188:	add	r3, r3, #1
   1918c:	lsl	r3, r3, #3
   19190:	sub	r2, fp, #12
   19194:	add	r3, r2, r3
   19198:	ldr	r2, [pc, #80]	; 191f0 <flatcc_builder_create_string@@Base+0x19c>
   1919c:	ldr	r2, [r4, r2]
   191a0:	str	r2, [r3, #-80]	; 0xffffffb0
   191a4:	ldr	r3, [fp, #-88]	; 0xffffffa8
   191a8:	add	r3, r3, #1
   191ac:	lsl	r3, r3, #3
   191b0:	sub	r2, fp, #12
   191b4:	add	r3, r2, r3
   191b8:	ldr	r2, [fp, #-16]
   191bc:	str	r2, [r3, #-76]	; 0xffffffb4
   191c0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   191c4:	add	r3, r3, #1
   191c8:	str	r3, [fp, #-88]	; 0xffffffa8
   191cc:	sub	r3, fp, #92	; 0x5c
   191d0:	mov	r1, r3
   191d4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   191d8:	bl	1538c <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   191dc:	mov	r3, r0
   191e0:	mov	r0, r3
   191e4:	sub	sp, fp, #8
   191e8:	pop	{r4, fp, pc}
   191ec:	andeq	r5, r1, r8, lsl #31
   191f0:	andeq	r0, r0, r4, asr #32

000191f4 <flatcc_builder_create_string_str@@Base>:
   191f4:	push	{fp, lr}
   191f8:	add	fp, sp, #4
   191fc:	sub	sp, sp, #8
   19200:	str	r0, [fp, #-8]
   19204:	str	r1, [fp, #-12]
   19208:	ldr	r0, [fp, #-12]
   1920c:	bl	12304 <strlen@plt>
   19210:	mov	r3, r0
   19214:	mov	r2, r3
   19218:	ldr	r1, [fp, #-12]
   1921c:	ldr	r0, [fp, #-8]
   19220:	bl	19054 <flatcc_builder_create_string@@Base>
   19224:	mov	r3, r0
   19228:	mov	r0, r3
   1922c:	sub	sp, fp, #4
   19230:	pop	{fp, pc}

00019234 <flatcc_builder_create_string_strn@@Base>:
   19234:	push	{fp, lr}
   19238:	add	fp, sp, #4
   1923c:	sub	sp, sp, #16
   19240:	str	r0, [fp, #-8]
   19244:	str	r1, [fp, #-12]
   19248:	str	r2, [fp, #-16]
   1924c:	ldr	r1, [fp, #-16]
   19250:	ldr	r0, [fp, #-12]
   19254:	bl	13db8 <main@@Base+0x200>
   19258:	mov	r3, r0
   1925c:	mov	r2, r3
   19260:	ldr	r1, [fp, #-12]
   19264:	ldr	r0, [fp, #-8]
   19268:	bl	19054 <flatcc_builder_create_string@@Base>
   1926c:	mov	r3, r0
   19270:	mov	r0, r3
   19274:	sub	sp, fp, #4
   19278:	pop	{fp, pc}

0001927c <flatcc_builder_end_string@@Base>:
   1927c:	push	{fp, lr}
   19280:	add	fp, sp, #4
   19284:	sub	sp, sp, #16
   19288:	str	r0, [fp, #-16]
   1928c:	ldr	r3, [fp, #-16]
   19290:	ldr	r3, [r3, #32]
   19294:	ldrh	r3, [r3, #14]
   19298:	cmp	r3, #6
   1929c:	beq	192c0 <flatcc_builder_end_string@@Base+0x44>
   192a0:	ldr	r3, [pc, #160]	; 19348 <flatcc_builder_end_string@@Base+0xcc>
   192a4:	add	r3, pc, r3
   192a8:	ldr	r2, [pc, #156]	; 1934c <flatcc_builder_end_string@@Base+0xd0>
   192ac:	ldr	r1, [pc, #156]	; 19350 <flatcc_builder_end_string@@Base+0xd4>
   192b0:	add	r1, pc, r1
   192b4:	ldr	r0, [pc, #152]	; 19354 <flatcc_builder_end_string@@Base+0xd8>
   192b8:	add	r0, pc, r0
   192bc:	bl	1234c <__assert_fail@plt>
   192c0:	ldr	r3, [fp, #-16]
   192c4:	ldr	r3, [r3, #32]
   192c8:	ldr	r2, [r3, #20]
   192cc:	ldr	r3, [fp, #-16]
   192d0:	ldr	r3, [r3, #20]
   192d4:	cmp	r2, r3
   192d8:	beq	192fc <flatcc_builder_end_string@@Base+0x80>
   192dc:	ldr	r3, [pc, #116]	; 19358 <flatcc_builder_end_string@@Base+0xdc>
   192e0:	add	r3, pc, r3
   192e4:	ldr	r2, [pc, #112]	; 1935c <flatcc_builder_end_string@@Base+0xe0>
   192e8:	ldr	r1, [pc, #112]	; 19360 <flatcc_builder_end_string@@Base+0xe4>
   192ec:	add	r1, pc, r1
   192f0:	ldr	r0, [pc, #108]	; 19364 <flatcc_builder_end_string@@Base+0xe8>
   192f4:	add	r0, pc, r0
   192f8:	bl	1234c <__assert_fail@plt>
   192fc:	ldr	r3, [fp, #-16]
   19300:	ldr	r1, [r3, #16]
   19304:	ldr	r3, [fp, #-16]
   19308:	ldr	r3, [r3, #20]
   1930c:	mov	r2, r3
   19310:	ldr	r0, [fp, #-16]
   19314:	bl	19054 <flatcc_builder_create_string@@Base>
   19318:	str	r0, [fp, #-8]
   1931c:	ldr	r3, [fp, #-8]
   19320:	cmp	r3, #0
   19324:	bne	19330 <flatcc_builder_end_string@@Base+0xb4>
   19328:	mov	r3, #0
   1932c:	b	1933c <flatcc_builder_end_string@@Base+0xc0>
   19330:	ldr	r0, [fp, #-16]
   19334:	bl	1523c <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   19338:	ldr	r3, [fp, #-8]
   1933c:	mov	r0, r3
   19340:	sub	sp, fp, #4
   19344:	pop	{fp, pc}
   19348:	strdeq	r4, [r0], -r8
   1934c:	andeq	r0, r0, r4, asr #13
   19350:	andeq	r4, r0, r4, lsr #32
   19354:	andeq	r4, r0, r0, lsl #4
   19358:			; <UNDEFINED> instruction: 0x000048bc
   1935c:	andeq	r0, r0, r5, asr #13
   19360:	andeq	r3, r0, r8, ror #31
   19364:	muleq	r0, r8, r3

00019368 <flatcc_builder_string_edit@@Base>:
   19368:	push	{fp}		; (str fp, [sp, #-4]!)
   1936c:	add	fp, sp, #0
   19370:	sub	sp, sp, #12
   19374:	str	r0, [fp, #-8]
   19378:	ldr	r3, [fp, #-8]
   1937c:	ldr	r3, [r3, #16]
   19380:	mov	r0, r3
   19384:	add	sp, fp, #0
   19388:	pop	{fp}		; (ldr fp, [sp], #4)
   1938c:	bx	lr

00019390 <flatcc_builder_string_len@@Base>:
   19390:	push	{fp}		; (str fp, [sp, #-4]!)
   19394:	add	fp, sp, #0
   19398:	sub	sp, sp, #12
   1939c:	str	r0, [fp, #-8]
   193a0:	ldr	r3, [fp, #-8]
   193a4:	ldr	r3, [r3, #32]
   193a8:	ldr	r3, [r3, #20]
   193ac:	mov	r0, r3
   193b0:	add	sp, fp, #0
   193b4:	pop	{fp}		; (ldr fp, [sp], #4)
   193b8:	bx	lr

000193bc <flatcc_builder_table_add@@Base>:
   193bc:	push	{fp, lr}
   193c0:	add	fp, sp, #4
   193c4:	sub	sp, sp, #16
   193c8:	str	r0, [fp, #-8]
   193cc:	str	r1, [fp, #-12]
   193d0:	str	r2, [fp, #-16]
   193d4:	strh	r3, [fp, #-18]	; 0xffffffee
   193d8:	ldr	r3, [fp, #-8]
   193dc:	ldr	r3, [r3, #32]
   193e0:	ldrh	r3, [r3, #14]
   193e4:	cmp	r3, #3
   193e8:	beq	1940c <flatcc_builder_table_add@@Base+0x50>
   193ec:	ldr	r3, [pc, #268]	; 19500 <flatcc_builder_table_add@@Base+0x144>
   193f0:	add	r3, pc, r3
   193f4:	ldr	r2, [pc, #264]	; 19504 <flatcc_builder_table_add@@Base+0x148>
   193f8:	ldr	r1, [pc, #264]	; 19508 <flatcc_builder_table_add@@Base+0x14c>
   193fc:	add	r1, pc, r1
   19400:	ldr	r0, [pc, #260]	; 1950c <flatcc_builder_table_add@@Base+0x150>
   19404:	add	r0, pc, r0
   19408:	bl	1234c <__assert_fail@plt>
   1940c:	ldr	r3, [fp, #-12]
   19410:	cmp	r3, #0
   19414:	blt	19428 <flatcc_builder_table_add@@Base+0x6c>
   19418:	ldr	r3, [fp, #-12]
   1941c:	ldr	r2, [pc, #236]	; 19510 <flatcc_builder_table_add@@Base+0x154>
   19420:	cmp	r3, r2
   19424:	ble	19448 <flatcc_builder_table_add@@Base+0x8c>
   19428:	ldr	r3, [pc, #228]	; 19514 <flatcc_builder_table_add@@Base+0x158>
   1942c:	add	r3, pc, r3
   19430:	ldr	r2, [pc, #224]	; 19518 <flatcc_builder_table_add@@Base+0x15c>
   19434:	ldr	r1, [pc, #224]	; 1951c <flatcc_builder_table_add@@Base+0x160>
   19438:	add	r1, pc, r1
   1943c:	ldr	r0, [pc, #220]	; 19520 <flatcc_builder_table_add@@Base+0x164>
   19440:	add	r0, pc, r0
   19444:	bl	1234c <__assert_fail@plt>
   19448:	ldr	r3, [fp, #-8]
   1944c:	ldrh	r3, [r3, #130]	; 0x82
   19450:	ldrh	r2, [fp, #-18]	; 0xffffffee
   19454:	cmp	r2, r3
   19458:	bls	19468 <flatcc_builder_table_add@@Base+0xac>
   1945c:	ldr	r3, [fp, #-8]
   19460:	ldrh	r2, [fp, #-18]	; 0xffffffee
   19464:	strh	r2, [r3, #130]	; 0x82
   19468:	ldr	r3, [fp, #-8]
   1946c:	ldr	r2, [r3, #4]
   19470:	ldr	r3, [fp, #-12]
   19474:	lsl	r3, r3, #1
   19478:	add	r3, r2, r3
   1947c:	ldrh	r3, [r3]
   19480:	cmp	r3, #0
   19484:	beq	194a8 <flatcc_builder_table_add@@Base+0xec>
   19488:	ldr	r3, [pc, #148]	; 19524 <flatcc_builder_table_add@@Base+0x168>
   1948c:	add	r3, pc, r3
   19490:	ldr	r2, [pc, #144]	; 19528 <flatcc_builder_table_add@@Base+0x16c>
   19494:	ldr	r1, [pc, #144]	; 1952c <flatcc_builder_table_add@@Base+0x170>
   19498:	add	r1, pc, r1
   1949c:	ldr	r0, [pc, #140]	; 19530 <flatcc_builder_table_add@@Base+0x174>
   194a0:	add	r0, pc, r0
   194a4:	bl	1234c <__assert_fail@plt>
   194a8:	ldr	r3, [fp, #-8]
   194ac:	ldr	r2, [r3, #12]
   194b0:	ldr	r3, [fp, #-12]
   194b4:	eor	r3, r3, r2
   194b8:	ldr	r2, [pc, #116]	; 19534 <flatcc_builder_table_add@@Base+0x178>
   194bc:	mul	r2, r2, r3
   194c0:	ldr	r3, [fp, #-16]
   194c4:	eor	r3, r3, r2
   194c8:	ldr	r2, [pc, #100]	; 19534 <flatcc_builder_table_add@@Base+0x178>
   194cc:	mul	r2, r2, r3
   194d0:	ldr	r3, [fp, #-8]
   194d4:	str	r2, [r3, #12]
   194d8:	ldr	r3, [fp, #-12]
   194dc:	uxth	r3, r3
   194e0:	ldrh	r2, [fp, #-18]	; 0xffffffee
   194e4:	ldr	r1, [fp, #-16]
   194e8:	ldr	r0, [fp, #-8]
   194ec:	bl	14250 <flatcc_builder_default_alloc@@Base+0x444>
   194f0:	mov	r3, r0
   194f4:	mov	r0, r3
   194f8:	sub	sp, fp, #4
   194fc:	pop	{fp, pc}
   19500:	andeq	r4, r0, r8, asr #15
   19504:	andeq	r0, r0, sp, ror #13
   19508:	ldrdeq	r3, [r0], -r8
   1950c:	muleq	r0, r0, r1
   19510:	strdeq	r7, [r0], -ip
   19514:	andeq	r4, r0, ip, lsl #15
   19518:	andeq	r0, r0, lr, ror #13
   1951c:	muleq	r0, ip, lr
   19520:	andeq	r4, r0, r0, ror r2
   19524:	andeq	r4, r0, ip, lsr #14
   19528:	strdeq	r0, [r0], -r8
   1952c:	andeq	r3, r0, ip, lsr lr
   19530:	muleq	r0, r4, lr
   19534:			; <UNDEFINED> instruction: 0x9e3779b1

00019538 <flatcc_builder_table_edit@@Base>:
   19538:	push	{fp, lr}
   1953c:	add	fp, sp, #4
   19540:	sub	sp, sp, #8
   19544:	str	r0, [fp, #-8]
   19548:	str	r1, [fp, #-12]
   1954c:	ldr	r3, [fp, #-8]
   19550:	ldr	r3, [r3, #32]
   19554:	ldrh	r3, [r3, #14]
   19558:	cmp	r3, #3
   1955c:	beq	19580 <flatcc_builder_table_edit@@Base+0x48>
   19560:	ldr	r3, [pc, #64]	; 195a8 <flatcc_builder_table_edit@@Base+0x70>
   19564:	add	r3, pc, r3
   19568:	ldr	r2, [pc, #60]	; 195ac <flatcc_builder_table_edit@@Base+0x74>
   1956c:	ldr	r1, [pc, #60]	; 195b0 <flatcc_builder_table_edit@@Base+0x78>
   19570:	add	r1, pc, r1
   19574:	ldr	r0, [pc, #56]	; 195b4 <flatcc_builder_table_edit@@Base+0x7c>
   19578:	add	r0, pc, r0
   1957c:	bl	1234c <__assert_fail@plt>
   19580:	ldr	r3, [fp, #-8]
   19584:	ldr	r2, [r3, #16]
   19588:	ldr	r3, [fp, #-8]
   1958c:	ldr	r1, [r3, #20]
   19590:	ldr	r3, [fp, #-12]
   19594:	sub	r3, r1, r3
   19598:	add	r3, r2, r3
   1959c:	mov	r0, r3
   195a0:	sub	sp, fp, #4
   195a4:	pop	{fp, pc}
   195a8:	andeq	r4, r0, r0, ror r6
   195ac:	andeq	r0, r0, r2, lsl #14
   195b0:	andeq	r3, r0, r4, ror #26
   195b4:	andeq	r4, r0, ip, lsl r0

000195b8 <flatcc_builder_table_add_copy@@Base>:
   195b8:	push	{fp, lr}
   195bc:	add	fp, sp, #4
   195c0:	sub	sp, sp, #24
   195c4:	str	r0, [fp, #-16]
   195c8:	str	r1, [fp, #-20]	; 0xffffffec
   195cc:	str	r2, [fp, #-24]	; 0xffffffe8
   195d0:	str	r3, [fp, #-28]	; 0xffffffe4
   195d4:	ldrh	r3, [fp, #4]
   195d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   195dc:	ldr	r1, [fp, #-20]	; 0xffffffec
   195e0:	ldr	r0, [fp, #-16]
   195e4:	bl	193bc <flatcc_builder_table_add@@Base>
   195e8:	str	r0, [fp, #-8]
   195ec:	ldr	r3, [fp, #-8]
   195f0:	cmp	r3, #0
   195f4:	beq	19608 <flatcc_builder_table_add_copy@@Base+0x50>
   195f8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   195fc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19600:	ldr	r0, [fp, #-8]
   19604:	bl	122bc <memcpy@plt>
   19608:	ldr	r3, [fp, #-8]
   1960c:	mov	r0, r3
   19610:	sub	sp, fp, #4
   19614:	pop	{fp, pc}

00019618 <flatcc_builder_table_add_offset@@Base>:
   19618:	push	{fp, lr}
   1961c:	add	fp, sp, #4
   19620:	sub	sp, sp, #8
   19624:	str	r0, [fp, #-8]
   19628:	str	r1, [fp, #-12]
   1962c:	ldr	r3, [fp, #-8]
   19630:	ldr	r3, [r3, #32]
   19634:	ldrh	r3, [r3, #14]
   19638:	cmp	r3, #3
   1963c:	beq	19660 <flatcc_builder_table_add_offset@@Base+0x48>
   19640:	ldr	r3, [pc, #228]	; 1972c <flatcc_builder_table_add_offset@@Base+0x114>
   19644:	add	r3, pc, r3
   19648:	ldr	r2, [pc, #224]	; 19730 <flatcc_builder_table_add_offset@@Base+0x118>
   1964c:	ldr	r1, [pc, #224]	; 19734 <flatcc_builder_table_add_offset@@Base+0x11c>
   19650:	add	r1, pc, r1
   19654:	ldr	r0, [pc, #220]	; 19738 <flatcc_builder_table_add_offset@@Base+0x120>
   19658:	add	r0, pc, r0
   1965c:	bl	1234c <__assert_fail@plt>
   19660:	ldr	r3, [fp, #-12]
   19664:	cmp	r3, #0
   19668:	blt	1967c <flatcc_builder_table_add_offset@@Base+0x64>
   1966c:	ldr	r3, [fp, #-12]
   19670:	ldr	r2, [pc, #196]	; 1973c <flatcc_builder_table_add_offset@@Base+0x124>
   19674:	cmp	r3, r2
   19678:	ble	1969c <flatcc_builder_table_add_offset@@Base+0x84>
   1967c:	ldr	r3, [pc, #188]	; 19740 <flatcc_builder_table_add_offset@@Base+0x128>
   19680:	add	r3, pc, r3
   19684:	ldr	r2, [pc, #184]	; 19744 <flatcc_builder_table_add_offset@@Base+0x12c>
   19688:	ldr	r1, [pc, #184]	; 19748 <flatcc_builder_table_add_offset@@Base+0x130>
   1968c:	add	r1, pc, r1
   19690:	ldr	r0, [pc, #180]	; 1974c <flatcc_builder_table_add_offset@@Base+0x134>
   19694:	add	r0, pc, r0
   19698:	bl	1234c <__assert_fail@plt>
   1969c:	ldr	r3, [fp, #-8]
   196a0:	ldr	r2, [r3, #4]
   196a4:	ldr	r3, [fp, #-12]
   196a8:	lsl	r3, r3, #1
   196ac:	add	r3, r2, r3
   196b0:	ldrh	r3, [r3]
   196b4:	cmp	r3, #0
   196b8:	beq	196dc <flatcc_builder_table_add_offset@@Base+0xc4>
   196bc:	ldr	r3, [pc, #140]	; 19750 <flatcc_builder_table_add_offset@@Base+0x138>
   196c0:	add	r3, pc, r3
   196c4:	ldr	r2, [pc, #136]	; 19754 <flatcc_builder_table_add_offset@@Base+0x13c>
   196c8:	ldr	r1, [pc, #136]	; 19758 <flatcc_builder_table_add_offset@@Base+0x140>
   196cc:	add	r1, pc, r1
   196d0:	ldr	r0, [pc, #132]	; 1975c <flatcc_builder_table_add_offset@@Base+0x144>
   196d4:	add	r0, pc, r0
   196d8:	bl	1234c <__assert_fail@plt>
   196dc:	ldr	r3, [fp, #-8]
   196e0:	ldr	r2, [r3, #12]
   196e4:	ldr	r3, [fp, #-12]
   196e8:	eor	r3, r3, r2
   196ec:	ldr	r2, [pc, #108]	; 19760 <flatcc_builder_table_add_offset@@Base+0x148>
   196f0:	mul	r3, r2, r3
   196f4:	eor	r3, r3, #4
   196f8:	ldr	r2, [pc, #96]	; 19760 <flatcc_builder_table_add_offset@@Base+0x148>
   196fc:	mul	r2, r2, r3
   19700:	ldr	r3, [fp, #-8]
   19704:	str	r2, [r3, #12]
   19708:	ldr	r3, [fp, #-12]
   1970c:	uxth	r3, r3
   19710:	mov	r1, r3
   19714:	ldr	r0, [fp, #-8]
   19718:	bl	1435c <flatcc_builder_default_alloc@@Base+0x550>
   1971c:	mov	r3, r0
   19720:	mov	r0, r3
   19724:	sub	sp, fp, #4
   19728:	pop	{fp, pc}
   1972c:	andeq	r4, r0, ip, lsr #11
   19730:	andeq	r0, r0, r3, lsl r7
   19734:	andeq	r3, r0, r4, lsl #25
   19738:	andeq	r3, r0, ip, lsr pc
   1973c:	strdeq	r7, [r0], -ip
   19740:	andeq	r4, r0, r0, ror r5
   19744:	andeq	r0, r0, r4, lsl r7
   19748:	andeq	r3, r0, r8, asr #24
   1974c:	andeq	r4, r0, ip, lsl r0
   19750:	andeq	r4, r0, r0, lsr r5
   19754:	andeq	r0, r0, fp, lsl r7
   19758:	andeq	r3, r0, r8, lsl #24
   1975c:	andeq	r3, r0, r0, ror #24
   19760:			; <UNDEFINED> instruction: 0x9e3779b1

00019764 <flatcc_builder_push_buffer_alignment@@Base>:
   19764:	push	{fp}		; (str fp, [sp, #-4]!)
   19768:	add	fp, sp, #0
   1976c:	sub	sp, sp, #20
   19770:	str	r0, [fp, #-16]
   19774:	ldr	r3, [fp, #-16]
   19778:	ldrh	r3, [r3, #128]	; 0x80
   1977c:	strh	r3, [fp, #-6]
   19780:	ldr	r3, [fp, #-16]
   19784:	mov	r2, #4
   19788:	strh	r2, [r3, #128]	; 0x80
   1978c:	ldrh	r3, [fp, #-6]
   19790:	mov	r0, r3
   19794:	add	sp, fp, #0
   19798:	pop	{fp}		; (ldr fp, [sp], #4)
   1979c:	bx	lr

000197a0 <flatcc_builder_pop_buffer_alignment@@Base>:
   197a0:	push	{fp, lr}
   197a4:	add	fp, sp, #4
   197a8:	sub	sp, sp, #8
   197ac:	str	r0, [fp, #-8]
   197b0:	mov	r3, r1
   197b4:	strh	r3, [fp, #-10]
   197b8:	ldrh	r3, [fp, #-10]
   197bc:	mov	r1, r3
   197c0:	ldr	r0, [fp, #-8]
   197c4:	bl	14cc8 <flatcc_builder_clear@@Base+0xb0>
   197c8:	nop			; (mov r0, r0)
   197cc:	sub	sp, fp, #4
   197d0:	pop	{fp, pc}

000197d4 <flatcc_builder_get_buffer_alignment@@Base>:
   197d4:	push	{fp}		; (str fp, [sp, #-4]!)
   197d8:	add	fp, sp, #0
   197dc:	sub	sp, sp, #12
   197e0:	str	r0, [fp, #-8]
   197e4:	ldr	r3, [fp, #-8]
   197e8:	ldrh	r3, [r3, #128]	; 0x80
   197ec:	mov	r0, r3
   197f0:	add	sp, fp, #0
   197f4:	pop	{fp}		; (ldr fp, [sp], #4)
   197f8:	bx	lr

000197fc <flatcc_builder_set_vtable_clustering@@Base>:
   197fc:	push	{fp}		; (str fp, [sp, #-4]!)
   19800:	add	fp, sp, #0
   19804:	sub	sp, sp, #12
   19808:	str	r0, [fp, #-8]
   1980c:	str	r1, [fp, #-12]
   19810:	ldr	r3, [fp, #-12]
   19814:	cmp	r3, #0
   19818:	moveq	r3, #1
   1981c:	movne	r3, #0
   19820:	uxtb	r3, r3
   19824:	mov	r2, r3
   19828:	ldr	r3, [fp, #-8]
   1982c:	str	r2, [r3, #180]	; 0xb4
   19830:	nop			; (mov r0, r0)
   19834:	add	sp, fp, #0
   19838:	pop	{fp}		; (ldr fp, [sp], #4)
   1983c:	bx	lr

00019840 <flatcc_builder_set_block_align@@Base>:
   19840:	push	{fp}		; (str fp, [sp, #-4]!)
   19844:	add	fp, sp, #0
   19848:	sub	sp, sp, #12
   1984c:	str	r0, [fp, #-8]
   19850:	mov	r3, r1
   19854:	strh	r3, [fp, #-10]
   19858:	ldr	r3, [fp, #-8]
   1985c:	ldrh	r2, [fp, #-10]
   19860:	strh	r2, [r3, #132]	; 0x84
   19864:	nop			; (mov r0, r0)
   19868:	add	sp, fp, #0
   1986c:	pop	{fp}		; (ldr fp, [sp], #4)
   19870:	bx	lr

00019874 <flatcc_builder_get_level@@Base>:
   19874:	push	{fp}		; (str fp, [sp, #-4]!)
   19878:	add	fp, sp, #0
   1987c:	sub	sp, sp, #12
   19880:	str	r0, [fp, #-8]
   19884:	ldr	r3, [fp, #-8]
   19888:	ldr	r3, [r3, #156]	; 0x9c
   1988c:	mov	r0, r3
   19890:	add	sp, fp, #0
   19894:	pop	{fp}		; (ldr fp, [sp], #4)
   19898:	bx	lr

0001989c <flatcc_builder_set_max_level@@Base>:
   1989c:	push	{fp}		; (str fp, [sp, #-4]!)
   198a0:	add	fp, sp, #0
   198a4:	sub	sp, sp, #12
   198a8:	str	r0, [fp, #-8]
   198ac:	str	r1, [fp, #-12]
   198b0:	ldr	r3, [fp, #-8]
   198b4:	ldr	r2, [fp, #-12]
   198b8:	str	r2, [r3, #176]	; 0xb0
   198bc:	ldr	r3, [fp, #-8]
   198c0:	ldr	r2, [r3, #160]	; 0xa0
   198c4:	ldr	r3, [fp, #-8]
   198c8:	ldr	r3, [r3, #176]	; 0xb0
   198cc:	cmp	r2, r3
   198d0:	bge	198e4 <flatcc_builder_set_max_level@@Base+0x48>
   198d4:	ldr	r3, [fp, #-8]
   198d8:	ldr	r2, [r3, #176]	; 0xb0
   198dc:	ldr	r3, [fp, #-8]
   198e0:	str	r2, [r3, #160]	; 0xa0
   198e4:	nop			; (mov r0, r0)
   198e8:	add	sp, fp, #0
   198ec:	pop	{fp}		; (ldr fp, [sp], #4)
   198f0:	bx	lr

000198f4 <flatcc_builder_get_buffer_size@@Base>:
   198f4:	push	{fp}		; (str fp, [sp, #-4]!)
   198f8:	add	fp, sp, #0
   198fc:	sub	sp, sp, #12
   19900:	str	r0, [fp, #-8]
   19904:	ldr	r3, [fp, #-8]
   19908:	ldr	r2, [r3, #140]	; 0x8c
   1990c:	ldr	r3, [fp, #-8]
   19910:	ldr	r3, [r3, #136]	; 0x88
   19914:	sub	r3, r2, r3
   19918:	mov	r0, r3
   1991c:	add	sp, fp, #0
   19920:	pop	{fp}		; (ldr fp, [sp], #4)
   19924:	bx	lr

00019928 <flatcc_builder_get_buffer_start@@Base>:
   19928:	push	{fp}		; (str fp, [sp, #-4]!)
   1992c:	add	fp, sp, #0
   19930:	sub	sp, sp, #12
   19934:	str	r0, [fp, #-8]
   19938:	ldr	r3, [fp, #-8]
   1993c:	ldr	r3, [r3, #136]	; 0x88
   19940:	mov	r0, r3
   19944:	add	sp, fp, #0
   19948:	pop	{fp}		; (ldr fp, [sp], #4)
   1994c:	bx	lr

00019950 <flatcc_builder_get_buffer_end@@Base>:
   19950:	push	{fp}		; (str fp, [sp, #-4]!)
   19954:	add	fp, sp, #0
   19958:	sub	sp, sp, #12
   1995c:	str	r0, [fp, #-8]
   19960:	ldr	r3, [fp, #-8]
   19964:	ldr	r3, [r3, #140]	; 0x8c
   19968:	mov	r0, r3
   1996c:	add	sp, fp, #0
   19970:	pop	{fp}		; (ldr fp, [sp], #4)
   19974:	bx	lr

00019978 <flatcc_builder_set_vtable_cache_limit@@Base>:
   19978:	push	{fp}		; (str fp, [sp, #-4]!)
   1997c:	add	fp, sp, #0
   19980:	sub	sp, sp, #12
   19984:	str	r0, [fp, #-8]
   19988:	str	r1, [fp, #-12]
   1998c:	ldr	r3, [fp, #-8]
   19990:	ldr	r2, [fp, #-12]
   19994:	str	r2, [r3, #172]	; 0xac
   19998:	nop			; (mov r0, r0)
   1999c:	add	sp, fp, #0
   199a0:	pop	{fp}		; (ldr fp, [sp], #4)
   199a4:	bx	lr

000199a8 <flatcc_builder_set_identifier@@Base>:
   199a8:	push	{fp}		; (str fp, [sp, #-4]!)
   199ac:	add	fp, sp, #0
   199b0:	sub	sp, sp, #12
   199b4:	str	r0, [fp, #-8]
   199b8:	str	r1, [fp, #-12]
   199bc:	ldr	r1, [pc, #60]	; 19a00 <flatcc_builder_set_identifier@@Base+0x58>
   199c0:	add	r1, pc, r1
   199c4:	ldr	r3, [fp, #-8]
   199c8:	add	r2, r3, #168	; 0xa8
   199cc:	ldr	r3, [fp, #-12]
   199d0:	cmp	r3, #0
   199d4:	beq	199e0 <flatcc_builder_set_identifier@@Base+0x38>
   199d8:	ldr	r3, [fp, #-12]
   199dc:	b	199e8 <flatcc_builder_set_identifier@@Base+0x40>
   199e0:	ldr	r3, [pc, #28]	; 19a04 <flatcc_builder_set_identifier@@Base+0x5c>
   199e4:	ldr	r3, [r1, r3]
   199e8:	ldr	r3, [r3]
   199ec:	str	r3, [r2]
   199f0:	nop			; (mov r0, r0)
   199f4:	add	sp, fp, #0
   199f8:	pop	{fp}		; (ldr fp, [sp], #4)
   199fc:	bx	lr
   19a00:	andeq	r5, r1, r8, lsr r6
   19a04:	andeq	r0, r0, r4, asr #32

00019a08 <flatcc_builder_get_type@@Base>:
   19a08:	push	{fp}		; (str fp, [sp, #-4]!)
   19a0c:	add	fp, sp, #0
   19a10:	sub	sp, sp, #12
   19a14:	str	r0, [fp, #-8]
   19a18:	ldr	r3, [fp, #-8]
   19a1c:	ldr	r3, [r3, #32]
   19a20:	cmp	r3, #0
   19a24:	beq	19a38 <flatcc_builder_get_type@@Base+0x30>
   19a28:	ldr	r3, [fp, #-8]
   19a2c:	ldr	r3, [r3, #32]
   19a30:	ldrh	r3, [r3, #14]
   19a34:	b	19a3c <flatcc_builder_get_type@@Base+0x34>
   19a38:	mov	r3, #0
   19a3c:	mov	r0, r3
   19a40:	add	sp, fp, #0
   19a44:	pop	{fp}		; (ldr fp, [sp], #4)
   19a48:	bx	lr

00019a4c <flatcc_builder_get_type_at@@Base>:
   19a4c:	push	{fp}		; (str fp, [sp, #-4]!)
   19a50:	add	fp, sp, #0
   19a54:	sub	sp, sp, #12
   19a58:	str	r0, [fp, #-8]
   19a5c:	str	r1, [fp, #-12]
   19a60:	ldr	r3, [fp, #-12]
   19a64:	cmp	r3, #0
   19a68:	ble	19a80 <flatcc_builder_get_type_at@@Base+0x34>
   19a6c:	ldr	r3, [fp, #-8]
   19a70:	ldr	r2, [r3, #156]	; 0x9c
   19a74:	ldr	r3, [fp, #-12]
   19a78:	cmp	r2, r3
   19a7c:	bge	19a88 <flatcc_builder_get_type_at@@Base+0x3c>
   19a80:	mov	r3, #0
   19a84:	b	19abc <flatcc_builder_get_type_at@@Base+0x70>
   19a88:	ldr	r3, [fp, #-8]
   19a8c:	ldr	r2, [r3, #32]
   19a90:	ldr	r3, [fp, #-8]
   19a94:	ldr	r3, [r3, #156]	; 0x9c
   19a98:	ldr	r1, [fp, #-12]
   19a9c:	sub	r3, r1, r3
   19aa0:	mov	r1, r3
   19aa4:	mov	r3, r1
   19aa8:	lsl	r3, r3, #3
   19aac:	add	r3, r3, r1
   19ab0:	lsl	r3, r3, #2
   19ab4:	add	r3, r2, r3
   19ab8:	ldrh	r3, [r3, #14]
   19abc:	mov	r0, r3
   19ac0:	add	sp, fp, #0
   19ac4:	pop	{fp}		; (ldr fp, [sp], #4)
   19ac8:	bx	lr

00019acc <flatcc_builder_get_direct_buffer@@Base>:
   19acc:	push	{fp, lr}
   19ad0:	add	fp, sp, #4
   19ad4:	sub	sp, sp, #8
   19ad8:	str	r0, [fp, #-8]
   19adc:	str	r1, [fp, #-12]
   19ae0:	ldr	r3, [fp, #-8]
   19ae4:	ldr	r3, [r3, #184]	; 0xb8
   19ae8:	cmp	r3, #0
   19aec:	beq	19b0c <flatcc_builder_get_direct_buffer@@Base+0x40>
   19af0:	ldr	r3, [fp, #-8]
   19af4:	add	r3, r3, #188	; 0xbc
   19af8:	ldr	r1, [fp, #-12]
   19afc:	mov	r0, r3
   19b00:	bl	13d38 <main@@Base+0x180>
   19b04:	mov	r3, r0
   19b08:	b	19b28 <flatcc_builder_get_direct_buffer@@Base+0x5c>
   19b0c:	ldr	r3, [fp, #-12]
   19b10:	cmp	r3, #0
   19b14:	beq	19b24 <flatcc_builder_get_direct_buffer@@Base+0x58>
   19b18:	ldr	r3, [fp, #-12]
   19b1c:	mov	r2, #0
   19b20:	str	r2, [r3]
   19b24:	mov	r3, #0
   19b28:	mov	r0, r3
   19b2c:	sub	sp, fp, #4
   19b30:	pop	{fp, pc}

00019b34 <flatcc_builder_copy_buffer@@Base>:
   19b34:	push	{fp, lr}
   19b38:	add	fp, sp, #4
   19b3c:	sub	sp, sp, #16
   19b40:	str	r0, [fp, #-8]
   19b44:	str	r1, [fp, #-12]
   19b48:	str	r2, [fp, #-16]
   19b4c:	ldr	r3, [fp, #-8]
   19b50:	ldr	r3, [r3, #184]	; 0xb8
   19b54:	cmp	r3, #0
   19b58:	bne	19b64 <flatcc_builder_copy_buffer@@Base+0x30>
   19b5c:	mov	r3, #0
   19b60:	b	19bb0 <flatcc_builder_copy_buffer@@Base+0x7c>
   19b64:	ldr	r3, [fp, #-8]
   19b68:	add	r3, r3, #188	; 0xbc
   19b6c:	ldr	r2, [fp, #-16]
   19b70:	ldr	r1, [fp, #-12]
   19b74:	mov	r0, r3
   19b78:	bl	1a8fc <flatcc_emitter_copy_buffer@@Base>
   19b7c:	str	r0, [fp, #-12]
   19b80:	ldr	r3, [fp, #-12]
   19b84:	cmp	r3, #0
   19b88:	bne	19bac <flatcc_builder_copy_buffer@@Base+0x78>
   19b8c:	ldr	r3, [pc, #40]	; 19bbc <flatcc_builder_copy_buffer@@Base+0x88>
   19b90:	add	r3, pc, r3
   19b94:	ldr	r2, [pc, #36]	; 19bc0 <flatcc_builder_copy_buffer@@Base+0x8c>
   19b98:	ldr	r1, [pc, #36]	; 19bc4 <flatcc_builder_copy_buffer@@Base+0x90>
   19b9c:	add	r1, pc, r1
   19ba0:	ldr	r0, [pc, #32]	; 19bc8 <flatcc_builder_copy_buffer@@Base+0x94>
   19ba4:	add	r0, pc, r0
   19ba8:	bl	1234c <__assert_fail@plt>
   19bac:	ldr	r3, [fp, #-12]
   19bb0:	mov	r0, r3
   19bb4:	sub	sp, fp, #4
   19bb8:	pop	{fp, pc}
   19bbc:	andeq	r4, r0, r0, lsl #1
   19bc0:	andeq	r0, r0, r6, lsl #15
   19bc4:	andeq	r3, r0, r8, lsr r7
   19bc8:	andeq	r3, r0, r0, asr fp

00019bcc <flatcc_builder_finalize_buffer@@Base>:
   19bcc:	push	{fp, lr}
   19bd0:	add	fp, sp, #4
   19bd4:	sub	sp, sp, #16
   19bd8:	str	r0, [fp, #-16]
   19bdc:	str	r1, [fp, #-20]	; 0xffffffec
   19be0:	ldr	r0, [fp, #-16]
   19be4:	bl	198f4 <flatcc_builder_get_buffer_size@@Base>
   19be8:	str	r0, [fp, #-8]
   19bec:	ldr	r3, [fp, #-20]	; 0xffffffec
   19bf0:	cmp	r3, #0
   19bf4:	beq	19c04 <flatcc_builder_finalize_buffer@@Base+0x38>
   19bf8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19bfc:	ldr	r2, [fp, #-8]
   19c00:	str	r2, [r3]
   19c04:	ldr	r0, [fp, #-8]
   19c08:	bl	122e0 <malloc@plt>
   19c0c:	mov	r3, r0
   19c10:	str	r3, [fp, #-12]
   19c14:	ldr	r3, [fp, #-12]
   19c18:	cmp	r3, #0
   19c1c:	bne	19c40 <flatcc_builder_finalize_buffer@@Base+0x74>
   19c20:	ldr	r3, [pc, #136]	; 19cb0 <flatcc_builder_finalize_buffer@@Base+0xe4>
   19c24:	add	r3, pc, r3
   19c28:	ldr	r2, [pc, #132]	; 19cb4 <flatcc_builder_finalize_buffer@@Base+0xe8>
   19c2c:	ldr	r1, [pc, #132]	; 19cb8 <flatcc_builder_finalize_buffer@@Base+0xec>
   19c30:	add	r1, pc, r1
   19c34:	ldr	r0, [pc, #128]	; 19cbc <flatcc_builder_finalize_buffer@@Base+0xf0>
   19c38:	add	r0, pc, r0
   19c3c:	bl	1234c <__assert_fail@plt>
   19c40:	ldr	r2, [fp, #-8]
   19c44:	ldr	r1, [fp, #-12]
   19c48:	ldr	r0, [fp, #-16]
   19c4c:	bl	19b34 <flatcc_builder_copy_buffer@@Base>
   19c50:	mov	r3, r0
   19c54:	cmp	r3, #0
   19c58:	bne	19c7c <flatcc_builder_finalize_buffer@@Base+0xb0>
   19c5c:	ldr	r3, [pc, #92]	; 19cc0 <flatcc_builder_finalize_buffer@@Base+0xf4>
   19c60:	add	r3, pc, r3
   19c64:	ldr	r2, [pc, #88]	; 19cc4 <flatcc_builder_finalize_buffer@@Base+0xf8>
   19c68:	ldr	r1, [pc, #88]	; 19cc8 <flatcc_builder_finalize_buffer@@Base+0xfc>
   19c6c:	add	r1, pc, r1
   19c70:	ldr	r0, [pc, #84]	; 19ccc <flatcc_builder_finalize_buffer@@Base+0x100>
   19c74:	add	r0, pc, r0
   19c78:	bl	1234c <__assert_fail@plt>
   19c7c:	ldr	r3, [fp, #-12]
   19c80:	cmp	r3, #0
   19c84:	bne	19ca0 <flatcc_builder_finalize_buffer@@Base+0xd4>
   19c88:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c8c:	cmp	r3, #0
   19c90:	beq	19ca0 <flatcc_builder_finalize_buffer@@Base+0xd4>
   19c94:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c98:	mov	r2, #0
   19c9c:	str	r2, [r3]
   19ca0:	ldr	r3, [fp, #-12]
   19ca4:	mov	r0, r3
   19ca8:	sub	sp, fp, #4
   19cac:	pop	{fp, pc}
   19cb0:	andeq	r4, r0, r8
   19cb4:	muleq	r0, r8, r7
   19cb8:	andeq	r3, r0, r4, lsr #13
   19cbc:	strdeq	r3, [r0], -ip
   19cc0:	andeq	r3, r0, ip, asr #31
   19cc4:	muleq	r0, ip, r7
   19cc8:	andeq	r3, r0, r8, ror #12
   19ccc:	andeq	r3, r0, r0, asr #13

00019cd0 <flatcc_builder_finalize_aligned_buffer@@Base>:
   19cd0:	push	{fp, lr}
   19cd4:	add	fp, sp, #4
   19cd8:	sub	sp, sp, #24
   19cdc:	str	r0, [fp, #-24]	; 0xffffffe8
   19ce0:	str	r1, [fp, #-28]	; 0xffffffe4
   19ce4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19ce8:	bl	198f4 <flatcc_builder_get_buffer_size@@Base>
   19cec:	str	r0, [fp, #-12]
   19cf0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19cf4:	cmp	r3, #0
   19cf8:	beq	19d08 <flatcc_builder_finalize_aligned_buffer@@Base+0x38>
   19cfc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19d00:	ldr	r2, [fp, #-12]
   19d04:	str	r2, [r3]
   19d08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19d0c:	bl	197d4 <flatcc_builder_get_buffer_alignment@@Base>
   19d10:	mov	r3, r0
   19d14:	str	r3, [fp, #-16]
   19d18:	ldr	r2, [fp, #-12]
   19d1c:	ldr	r3, [fp, #-16]
   19d20:	add	r3, r2, r3
   19d24:	sub	r2, r3, #1
   19d28:	ldr	r3, [fp, #-16]
   19d2c:	rsb	r3, r3, #0
   19d30:	and	r3, r3, r2
   19d34:	str	r3, [fp, #-12]
   19d38:	ldr	r1, [fp, #-12]
   19d3c:	ldr	r0, [fp, #-16]
   19d40:	bl	13c44 <main@@Base+0x8c>
   19d44:	str	r0, [fp, #-8]
   19d48:	ldr	r3, [fp, #-8]
   19d4c:	cmp	r3, #0
   19d50:	beq	19d84 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
   19d54:	ldr	r2, [fp, #-12]
   19d58:	ldr	r1, [fp, #-8]
   19d5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19d60:	bl	19b34 <flatcc_builder_copy_buffer@@Base>
   19d64:	mov	r3, r0
   19d68:	cmp	r3, #0
   19d6c:	bne	19d88 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   19d70:	ldr	r0, [fp, #-8]
   19d74:	bl	122b0 <free@plt>
   19d78:	mov	r3, #0
   19d7c:	str	r3, [fp, #-8]
   19d80:	b	19d88 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   19d84:	nop			; (mov r0, r0)
   19d88:	ldr	r3, [fp, #-8]
   19d8c:	cmp	r3, #0
   19d90:	bne	19dac <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   19d94:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19d98:	cmp	r3, #0
   19d9c:	beq	19dac <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   19da0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19da4:	mov	r2, #0
   19da8:	str	r2, [r3]
   19dac:	ldr	r3, [fp, #-8]
   19db0:	mov	r0, r3
   19db4:	sub	sp, fp, #4
   19db8:	pop	{fp, pc}

00019dbc <flatcc_builder_aligned_alloc@@Base>:
   19dbc:	push	{fp, lr}
   19dc0:	add	fp, sp, #4
   19dc4:	sub	sp, sp, #8
   19dc8:	str	r0, [fp, #-8]
   19dcc:	str	r1, [fp, #-12]
   19dd0:	ldr	r1, [fp, #-12]
   19dd4:	ldr	r0, [fp, #-8]
   19dd8:	bl	13c44 <main@@Base+0x8c>
   19ddc:	mov	r3, r0
   19de0:	mov	r0, r3
   19de4:	sub	sp, fp, #4
   19de8:	pop	{fp, pc}

00019dec <flatcc_builder_aligned_free@@Base>:
   19dec:	push	{fp, lr}
   19df0:	add	fp, sp, #4
   19df4:	sub	sp, sp, #8
   19df8:	str	r0, [fp, #-8]
   19dfc:	ldr	r0, [fp, #-8]
   19e00:	bl	122b0 <free@plt>
   19e04:	nop			; (mov r0, r0)
   19e08:	sub	sp, fp, #4
   19e0c:	pop	{fp, pc}

00019e10 <flatcc_builder_get_emit_context@@Base>:
   19e10:	push	{fp}		; (str fp, [sp, #-4]!)
   19e14:	add	fp, sp, #0
   19e18:	sub	sp, sp, #12
   19e1c:	str	r0, [fp, #-8]
   19e20:	ldr	r3, [fp, #-8]
   19e24:	ldr	r3, [r3, #36]	; 0x24
   19e28:	mov	r0, r3
   19e2c:	add	sp, fp, #0
   19e30:	pop	{fp}		; (ldr fp, [sp], #4)
   19e34:	bx	lr
   19e38:	push	{fp, lr}
   19e3c:	add	fp, sp, #4
   19e40:	sub	sp, sp, #16
   19e44:	str	r0, [fp, #-16]
   19e48:	mov	r3, #0
   19e4c:	str	r3, [fp, #-8]
   19e50:	ldr	r3, [fp, #-16]
   19e54:	ldr	r3, [r3]
   19e58:	cmp	r3, #0
   19e5c:	beq	19eb4 <flatcc_builder_get_emit_context@@Base+0xa4>
   19e60:	ldr	r3, [fp, #-16]
   19e64:	ldr	r3, [r3]
   19e68:	ldr	r2, [r3, #2948]	; 0xb84
   19e6c:	ldr	r3, [fp, #-16]
   19e70:	ldr	r3, [r3, #4]
   19e74:	cmp	r2, r3
   19e78:	beq	19eb4 <flatcc_builder_get_emit_context@@Base+0xa4>
   19e7c:	ldr	r3, [fp, #-16]
   19e80:	ldr	r3, [r3]
   19e84:	ldr	r3, [r3, #2948]	; 0xb84
   19e88:	ldr	r2, [fp, #-16]
   19e8c:	ldr	r2, [r2]
   19e90:	ldr	r2, [r2, #2952]	; 0xb88
   19e94:	sub	r2, r2, #2944	; 0xb80
   19e98:	str	r2, [r3, #2952]	; 0xb88
   19e9c:	ldr	r3, [fp, #-16]
   19ea0:	ldr	r3, [r3]
   19ea4:	ldr	r2, [r3, #2948]	; 0xb84
   19ea8:	ldr	r3, [fp, #-16]
   19eac:	str	r2, [r3]
   19eb0:	b	19fdc <flatcc_builder_get_emit_context@@Base+0x1cc>
   19eb4:	ldr	r0, [pc, #368]	; 1a02c <flatcc_builder_get_emit_context@@Base+0x21c>
   19eb8:	bl	122e0 <malloc@plt>
   19ebc:	mov	r3, r0
   19ec0:	str	r3, [fp, #-8]
   19ec4:	ldr	r3, [fp, #-8]
   19ec8:	cmp	r3, #0
   19ecc:	bne	19ed8 <flatcc_builder_get_emit_context@@Base+0xc8>
   19ed0:	mvn	r3, #0
   19ed4:	b	1a020 <flatcc_builder_get_emit_context@@Base+0x210>
   19ed8:	ldr	r3, [fp, #-16]
   19edc:	ldr	r3, [r3, #28]
   19ee0:	add	r2, r3, #2944	; 0xb80
   19ee4:	ldr	r3, [fp, #-16]
   19ee8:	str	r2, [r3, #28]
   19eec:	ldr	r3, [fp, #-16]
   19ef0:	ldr	r3, [r3]
   19ef4:	cmp	r3, #0
   19ef8:	beq	19f4c <flatcc_builder_get_emit_context@@Base+0x13c>
   19efc:	ldr	r3, [fp, #-16]
   19f00:	ldr	r2, [r3, #4]
   19f04:	ldr	r3, [fp, #-8]
   19f08:	str	r2, [r3, #2948]	; 0xb84
   19f0c:	ldr	r3, [fp, #-16]
   19f10:	ldr	r2, [r3]
   19f14:	ldr	r3, [fp, #-8]
   19f18:	str	r2, [r3, #2944]	; 0xb80
   19f1c:	ldr	r3, [fp, #-16]
   19f20:	ldr	r3, [r3]
   19f24:	ldr	r2, [fp, #-8]
   19f28:	str	r2, [r3, #2948]	; 0xb84
   19f2c:	ldr	r3, [fp, #-16]
   19f30:	ldr	r3, [r3, #4]
   19f34:	ldr	r2, [fp, #-8]
   19f38:	str	r2, [r3, #2944]	; 0xb80
   19f3c:	ldr	r3, [fp, #-16]
   19f40:	ldr	r2, [fp, #-8]
   19f44:	str	r2, [r3]
   19f48:	b	19fdc <flatcc_builder_get_emit_context@@Base+0x1cc>
   19f4c:	ldr	r3, [fp, #-16]
   19f50:	ldr	r2, [fp, #-8]
   19f54:	str	r2, [r3]
   19f58:	ldr	r3, [fp, #-16]
   19f5c:	ldr	r2, [fp, #-8]
   19f60:	str	r2, [r3, #4]
   19f64:	ldr	r3, [fp, #-8]
   19f68:	ldr	r2, [fp, #-8]
   19f6c:	str	r2, [r3, #2944]	; 0xb80
   19f70:	ldr	r3, [fp, #-8]
   19f74:	ldr	r2, [fp, #-8]
   19f78:	str	r2, [r3, #2948]	; 0xb84
   19f7c:	ldr	r3, [fp, #-16]
   19f80:	ldr	r3, [r3]
   19f84:	add	r2, r3, #1472	; 0x5c0
   19f88:	ldr	r3, [fp, #-16]
   19f8c:	str	r2, [r3, #8]
   19f90:	ldr	r3, [fp, #-16]
   19f94:	ldr	r2, [r3, #8]
   19f98:	ldr	r3, [fp, #-16]
   19f9c:	str	r2, [r3, #16]
   19fa0:	ldr	r3, [fp, #-16]
   19fa4:	mov	r2, #1472	; 0x5c0
   19fa8:	str	r2, [r3, #12]
   19fac:	ldr	r3, [fp, #-16]
   19fb0:	ldr	r3, [r3, #12]
   19fb4:	rsb	r2, r3, #2944	; 0xb80
   19fb8:	ldr	r3, [fp, #-16]
   19fbc:	str	r2, [r3, #20]
   19fc0:	ldr	r3, [fp, #-16]
   19fc4:	ldr	r3, [r3, #12]
   19fc8:	rsb	r2, r3, #0
   19fcc:	ldr	r3, [fp, #-8]
   19fd0:	str	r2, [r3, #2952]	; 0xb88
   19fd4:	mov	r3, #0
   19fd8:	b	1a020 <flatcc_builder_get_emit_context@@Base+0x210>
   19fdc:	ldr	r3, [fp, #-16]
   19fe0:	ldr	r3, [r3]
   19fe4:	add	r2, r3, #2944	; 0xb80
   19fe8:	ldr	r3, [fp, #-16]
   19fec:	str	r2, [r3, #8]
   19ff0:	ldr	r3, [fp, #-16]
   19ff4:	mov	r2, #2944	; 0xb80
   19ff8:	str	r2, [r3, #12]
   19ffc:	ldr	r3, [fp, #-16]
   1a000:	ldr	r3, [r3]
   1a004:	ldr	r2, [fp, #-16]
   1a008:	ldr	r2, [r2]
   1a00c:	ldr	r2, [r2, #2944]	; 0xb80
   1a010:	ldr	r2, [r2, #2952]	; 0xb88
   1a014:	sub	r2, r2, #2944	; 0xb80
   1a018:	str	r2, [r3, #2952]	; 0xb88
   1a01c:	mov	r3, #0
   1a020:	mov	r0, r3
   1a024:	sub	sp, fp, #4
   1a028:	pop	{fp, pc}
   1a02c:	andeq	r0, r0, ip, lsl #23
   1a030:	push	{fp, lr}
   1a034:	add	fp, sp, #4
   1a038:	sub	sp, sp, #16
   1a03c:	str	r0, [fp, #-16]
   1a040:	mov	r3, #0
   1a044:	str	r3, [fp, #-8]
   1a048:	ldr	r3, [fp, #-16]
   1a04c:	ldr	r3, [r3, #4]
   1a050:	cmp	r3, #0
   1a054:	beq	1a08c <flatcc_builder_get_emit_context@@Base+0x27c>
   1a058:	ldr	r3, [fp, #-16]
   1a05c:	ldr	r3, [r3, #4]
   1a060:	ldr	r2, [r3, #2944]	; 0xb80
   1a064:	ldr	r3, [fp, #-16]
   1a068:	ldr	r3, [r3]
   1a06c:	cmp	r2, r3
   1a070:	beq	1a08c <flatcc_builder_get_emit_context@@Base+0x27c>
   1a074:	ldr	r3, [fp, #-16]
   1a078:	ldr	r3, [r3, #4]
   1a07c:	ldr	r2, [r3, #2944]	; 0xb80
   1a080:	ldr	r3, [fp, #-16]
   1a084:	str	r2, [r3, #4]
   1a088:	b	1a1b4 <flatcc_builder_get_emit_context@@Base+0x3a4>
   1a08c:	ldr	r0, [pc, #368]	; 1a204 <flatcc_builder_get_emit_context@@Base+0x3f4>
   1a090:	bl	122e0 <malloc@plt>
   1a094:	mov	r3, r0
   1a098:	str	r3, [fp, #-8]
   1a09c:	ldr	r3, [fp, #-8]
   1a0a0:	cmp	r3, #0
   1a0a4:	bne	1a0b0 <flatcc_builder_get_emit_context@@Base+0x2a0>
   1a0a8:	mvn	r3, #0
   1a0ac:	b	1a1f8 <flatcc_builder_get_emit_context@@Base+0x3e8>
   1a0b0:	ldr	r3, [fp, #-16]
   1a0b4:	ldr	r3, [r3, #28]
   1a0b8:	add	r2, r3, #2944	; 0xb80
   1a0bc:	ldr	r3, [fp, #-16]
   1a0c0:	str	r2, [r3, #28]
   1a0c4:	ldr	r3, [fp, #-16]
   1a0c8:	ldr	r3, [r3, #4]
   1a0cc:	cmp	r3, #0
   1a0d0:	beq	1a124 <flatcc_builder_get_emit_context@@Base+0x314>
   1a0d4:	ldr	r3, [fp, #-16]
   1a0d8:	ldr	r2, [r3, #4]
   1a0dc:	ldr	r3, [fp, #-8]
   1a0e0:	str	r2, [r3, #2948]	; 0xb84
   1a0e4:	ldr	r3, [fp, #-16]
   1a0e8:	ldr	r2, [r3]
   1a0ec:	ldr	r3, [fp, #-8]
   1a0f0:	str	r2, [r3, #2944]	; 0xb80
   1a0f4:	ldr	r3, [fp, #-16]
   1a0f8:	ldr	r3, [r3]
   1a0fc:	ldr	r2, [fp, #-8]
   1a100:	str	r2, [r3, #2948]	; 0xb84
   1a104:	ldr	r3, [fp, #-16]
   1a108:	ldr	r3, [r3, #4]
   1a10c:	ldr	r2, [fp, #-8]
   1a110:	str	r2, [r3, #2944]	; 0xb80
   1a114:	ldr	r3, [fp, #-16]
   1a118:	ldr	r2, [fp, #-8]
   1a11c:	str	r2, [r3, #4]
   1a120:	b	1a1b4 <flatcc_builder_get_emit_context@@Base+0x3a4>
   1a124:	ldr	r3, [fp, #-16]
   1a128:	ldr	r2, [fp, #-8]
   1a12c:	str	r2, [r3]
   1a130:	ldr	r3, [fp, #-16]
   1a134:	ldr	r2, [fp, #-8]
   1a138:	str	r2, [r3, #4]
   1a13c:	ldr	r3, [fp, #-8]
   1a140:	ldr	r2, [fp, #-8]
   1a144:	str	r2, [r3, #2944]	; 0xb80
   1a148:	ldr	r3, [fp, #-8]
   1a14c:	ldr	r2, [fp, #-8]
   1a150:	str	r2, [r3, #2948]	; 0xb84
   1a154:	ldr	r3, [fp, #-16]
   1a158:	ldr	r3, [r3]
   1a15c:	add	r2, r3, #1472	; 0x5c0
   1a160:	ldr	r3, [fp, #-16]
   1a164:	str	r2, [r3, #8]
   1a168:	ldr	r3, [fp, #-16]
   1a16c:	ldr	r2, [r3, #8]
   1a170:	ldr	r3, [fp, #-16]
   1a174:	str	r2, [r3, #16]
   1a178:	ldr	r3, [fp, #-16]
   1a17c:	mov	r2, #1472	; 0x5c0
   1a180:	str	r2, [r3, #12]
   1a184:	ldr	r3, [fp, #-16]
   1a188:	ldr	r3, [r3, #12]
   1a18c:	rsb	r2, r3, #2944	; 0xb80
   1a190:	ldr	r3, [fp, #-16]
   1a194:	str	r2, [r3, #20]
   1a198:	ldr	r3, [fp, #-16]
   1a19c:	ldr	r3, [r3, #12]
   1a1a0:	rsb	r2, r3, #0
   1a1a4:	ldr	r3, [fp, #-8]
   1a1a8:	str	r2, [r3, #2952]	; 0xb88
   1a1ac:	mov	r3, #0
   1a1b0:	b	1a1f8 <flatcc_builder_get_emit_context@@Base+0x3e8>
   1a1b4:	ldr	r3, [fp, #-16]
   1a1b8:	ldr	r3, [r3, #4]
   1a1bc:	mov	r2, r3
   1a1c0:	ldr	r3, [fp, #-16]
   1a1c4:	str	r2, [r3, #16]
   1a1c8:	ldr	r3, [fp, #-16]
   1a1cc:	mov	r2, #2944	; 0xb80
   1a1d0:	str	r2, [r3, #20]
   1a1d4:	ldr	r3, [fp, #-16]
   1a1d8:	ldr	r3, [r3, #4]
   1a1dc:	ldr	r2, [fp, #-16]
   1a1e0:	ldr	r2, [r2, #4]
   1a1e4:	ldr	r2, [r2, #2948]	; 0xb84
   1a1e8:	ldr	r2, [r2, #2952]	; 0xb88
   1a1ec:	add	r2, r2, #2944	; 0xb80
   1a1f0:	str	r2, [r3, #2952]	; 0xb88
   1a1f4:	mov	r3, #0
   1a1f8:	mov	r0, r3
   1a1fc:	sub	sp, fp, #4
   1a200:	pop	{fp, pc}
   1a204:	andeq	r0, r0, ip, lsl #23
   1a208:	push	{fp, lr}
   1a20c:	add	fp, sp, #4
   1a210:	sub	sp, sp, #24
   1a214:	str	r0, [fp, #-16]
   1a218:	str	r1, [fp, #-20]	; 0xffffffec
   1a21c:	str	r2, [fp, #-24]	; 0xffffffe8
   1a220:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a224:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a228:	add	r3, r2, r3
   1a22c:	str	r3, [fp, #-20]	; 0xffffffec
   1a230:	b	1a2f4 <flatcc_builder_get_emit_context@@Base+0x4e4>
   1a234:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a238:	str	r3, [fp, #-8]
   1a23c:	ldr	r3, [fp, #-16]
   1a240:	ldr	r2, [r3, #12]
   1a244:	ldr	r3, [fp, #-8]
   1a248:	cmp	r2, r3
   1a24c:	bcs	1a284 <flatcc_builder_get_emit_context@@Base+0x474>
   1a250:	ldr	r3, [fp, #-16]
   1a254:	ldr	r3, [r3, #12]
   1a258:	str	r3, [fp, #-8]
   1a25c:	ldr	r3, [fp, #-8]
   1a260:	cmp	r3, #0
   1a264:	bne	1a284 <flatcc_builder_get_emit_context@@Base+0x474>
   1a268:	ldr	r0, [fp, #-16]
   1a26c:	bl	19e38 <flatcc_builder_get_emit_context@@Base+0x28>
   1a270:	mov	r3, r0
   1a274:	cmp	r3, #0
   1a278:	beq	1a2f4 <flatcc_builder_get_emit_context@@Base+0x4e4>
   1a27c:	mvn	r3, #0
   1a280:	b	1a304 <flatcc_builder_get_emit_context@@Base+0x4f4>
   1a284:	ldr	r3, [fp, #-16]
   1a288:	ldr	r2, [r3, #8]
   1a28c:	ldr	r3, [fp, #-8]
   1a290:	rsb	r3, r3, #0
   1a294:	add	r2, r2, r3
   1a298:	ldr	r3, [fp, #-16]
   1a29c:	str	r2, [r3, #8]
   1a2a0:	ldr	r3, [fp, #-16]
   1a2a4:	ldr	r2, [r3, #12]
   1a2a8:	ldr	r3, [fp, #-8]
   1a2ac:	sub	r2, r2, r3
   1a2b0:	ldr	r3, [fp, #-16]
   1a2b4:	str	r2, [r3, #12]
   1a2b8:	ldr	r3, [fp, #-8]
   1a2bc:	rsb	r3, r3, #0
   1a2c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a2c4:	add	r3, r2, r3
   1a2c8:	str	r3, [fp, #-20]	; 0xffffffec
   1a2cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a2d0:	ldr	r3, [fp, #-8]
   1a2d4:	sub	r3, r2, r3
   1a2d8:	str	r3, [fp, #-24]	; 0xffffffe8
   1a2dc:	ldr	r3, [fp, #-16]
   1a2e0:	ldr	r3, [r3, #8]
   1a2e4:	ldr	r2, [fp, #-8]
   1a2e8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a2ec:	mov	r0, r3
   1a2f0:	bl	122bc <memcpy@plt>
   1a2f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a2f8:	cmp	r3, #0
   1a2fc:	bne	1a234 <flatcc_builder_get_emit_context@@Base+0x424>
   1a300:	mov	r3, #0
   1a304:	mov	r0, r3
   1a308:	sub	sp, fp, #4
   1a30c:	pop	{fp, pc}
   1a310:	push	{fp, lr}
   1a314:	add	fp, sp, #4
   1a318:	sub	sp, sp, #24
   1a31c:	str	r0, [fp, #-16]
   1a320:	str	r1, [fp, #-20]	; 0xffffffec
   1a324:	str	r2, [fp, #-24]	; 0xffffffe8
   1a328:	b	1a3e4 <flatcc_builder_get_emit_context@@Base+0x5d4>
   1a32c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a330:	str	r3, [fp, #-8]
   1a334:	ldr	r3, [fp, #-16]
   1a338:	ldr	r2, [r3, #20]
   1a33c:	ldr	r3, [fp, #-8]
   1a340:	cmp	r2, r3
   1a344:	bcs	1a37c <flatcc_builder_get_emit_context@@Base+0x56c>
   1a348:	ldr	r3, [fp, #-16]
   1a34c:	ldr	r3, [r3, #20]
   1a350:	str	r3, [fp, #-8]
   1a354:	ldr	r3, [fp, #-8]
   1a358:	cmp	r3, #0
   1a35c:	bne	1a37c <flatcc_builder_get_emit_context@@Base+0x56c>
   1a360:	ldr	r0, [fp, #-16]
   1a364:	bl	1a030 <flatcc_builder_get_emit_context@@Base+0x220>
   1a368:	mov	r3, r0
   1a36c:	cmp	r3, #0
   1a370:	beq	1a3e4 <flatcc_builder_get_emit_context@@Base+0x5d4>
   1a374:	mvn	r3, #0
   1a378:	b	1a3f4 <flatcc_builder_get_emit_context@@Base+0x5e4>
   1a37c:	ldr	r3, [fp, #-16]
   1a380:	ldr	r3, [r3, #16]
   1a384:	ldr	r2, [fp, #-8]
   1a388:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a38c:	mov	r0, r3
   1a390:	bl	122bc <memcpy@plt>
   1a394:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a398:	ldr	r3, [fp, #-8]
   1a39c:	sub	r3, r2, r3
   1a3a0:	str	r3, [fp, #-24]	; 0xffffffe8
   1a3a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a3a8:	ldr	r3, [fp, #-8]
   1a3ac:	add	r3, r2, r3
   1a3b0:	str	r3, [fp, #-20]	; 0xffffffec
   1a3b4:	ldr	r3, [fp, #-16]
   1a3b8:	ldr	r2, [r3, #16]
   1a3bc:	ldr	r3, [fp, #-8]
   1a3c0:	add	r2, r2, r3
   1a3c4:	ldr	r3, [fp, #-16]
   1a3c8:	str	r2, [r3, #16]
   1a3cc:	ldr	r3, [fp, #-16]
   1a3d0:	ldr	r2, [r3, #20]
   1a3d4:	ldr	r3, [fp, #-8]
   1a3d8:	sub	r2, r2, r3
   1a3dc:	ldr	r3, [fp, #-16]
   1a3e0:	str	r2, [r3, #20]
   1a3e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a3e8:	cmp	r3, #0
   1a3ec:	bne	1a32c <flatcc_builder_get_emit_context@@Base+0x51c>
   1a3f0:	mov	r3, #0
   1a3f4:	mov	r0, r3
   1a3f8:	sub	sp, fp, #4
   1a3fc:	pop	{fp, pc}

0001a400 <flatcc_emitter_recycle_page@@Base>:
   1a400:	push	{fp}		; (str fp, [sp, #-4]!)
   1a404:	add	fp, sp, #0
   1a408:	sub	sp, sp, #12
   1a40c:	str	r0, [fp, #-8]
   1a410:	str	r1, [fp, #-12]
   1a414:	ldr	r3, [fp, #-8]
   1a418:	ldr	r2, [r3]
   1a41c:	ldr	r3, [fp, #-12]
   1a420:	cmp	r2, r3
   1a424:	beq	1a43c <flatcc_emitter_recycle_page@@Base+0x3c>
   1a428:	ldr	r3, [fp, #-8]
   1a42c:	ldr	r2, [r3, #4]
   1a430:	ldr	r3, [fp, #-12]
   1a434:	cmp	r2, r3
   1a438:	bne	1a444 <flatcc_emitter_recycle_page@@Base+0x44>
   1a43c:	mvn	r3, #0
   1a440:	b	1a4b4 <flatcc_emitter_recycle_page@@Base+0xb4>
   1a444:	ldr	r3, [fp, #-12]
   1a448:	ldr	r3, [r3, #2944]	; 0xb80
   1a44c:	ldr	r2, [fp, #-12]
   1a450:	ldr	r2, [r2, #2948]	; 0xb84
   1a454:	str	r2, [r3, #2948]	; 0xb84
   1a458:	ldr	r3, [fp, #-12]
   1a45c:	ldr	r3, [r3, #2948]	; 0xb84
   1a460:	ldr	r2, [fp, #-12]
   1a464:	ldr	r2, [r2, #2944]	; 0xb80
   1a468:	str	r2, [r3, #2944]	; 0xb80
   1a46c:	ldr	r3, [fp, #-8]
   1a470:	ldr	r3, [r3]
   1a474:	ldr	r2, [r3, #2948]	; 0xb84
   1a478:	ldr	r3, [fp, #-12]
   1a47c:	str	r2, [r3, #2948]	; 0xb84
   1a480:	ldr	r3, [fp, #-8]
   1a484:	ldr	r2, [r3]
   1a488:	ldr	r3, [fp, #-12]
   1a48c:	str	r2, [r3, #2944]	; 0xb80
   1a490:	ldr	r3, [fp, #-12]
   1a494:	ldr	r3, [r3, #2948]	; 0xb84
   1a498:	ldr	r2, [fp, #-12]
   1a49c:	str	r2, [r3, #2944]	; 0xb80
   1a4a0:	ldr	r3, [fp, #-12]
   1a4a4:	ldr	r3, [r3, #2944]	; 0xb80
   1a4a8:	ldr	r2, [fp, #-12]
   1a4ac:	str	r2, [r3, #2948]	; 0xb84
   1a4b0:	mov	r3, #0
   1a4b4:	mov	r0, r3
   1a4b8:	add	sp, fp, #0
   1a4bc:	pop	{fp}		; (ldr fp, [sp], #4)
   1a4c0:	bx	lr

0001a4c4 <flatcc_emitter_reset@@Base>:
   1a4c4:	push	{fp, lr}
   1a4c8:	add	fp, sp, #4
   1a4cc:	sub	sp, sp, #16
   1a4d0:	str	r0, [fp, #-16]
   1a4d4:	ldr	r3, [fp, #-16]
   1a4d8:	ldr	r3, [r3]
   1a4dc:	str	r3, [fp, #-8]
   1a4e0:	ldr	r3, [fp, #-16]
   1a4e4:	ldr	r3, [r3]
   1a4e8:	cmp	r3, #0
   1a4ec:	beq	1a644 <flatcc_emitter_reset@@Base+0x180>
   1a4f0:	ldr	r3, [fp, #-16]
   1a4f4:	ldr	r2, [r3]
   1a4f8:	ldr	r3, [fp, #-16]
   1a4fc:	str	r2, [r3, #4]
   1a500:	ldr	r3, [fp, #-16]
   1a504:	ldr	r3, [r3]
   1a508:	add	r2, r3, #1472	; 0x5c0
   1a50c:	ldr	r3, [fp, #-16]
   1a510:	str	r2, [r3, #8]
   1a514:	ldr	r3, [fp, #-16]
   1a518:	ldr	r2, [r3, #8]
   1a51c:	ldr	r3, [fp, #-16]
   1a520:	str	r2, [r3, #16]
   1a524:	ldr	r3, [fp, #-16]
   1a528:	mov	r2, #1472	; 0x5c0
   1a52c:	str	r2, [r3, #12]
   1a530:	ldr	r3, [fp, #-16]
   1a534:	mov	r2, #1472	; 0x5c0
   1a538:	str	r2, [r3, #20]
   1a53c:	ldr	r3, [fp, #-16]
   1a540:	ldr	r3, [r3]
   1a544:	ldr	r2, [fp, #-16]
   1a548:	ldr	r2, [r2, #12]
   1a54c:	rsb	r2, r2, #0
   1a550:	str	r2, [r3, #2952]	; 0xb88
   1a554:	ldr	r3, [fp, #-16]
   1a558:	ldr	r3, [r3, #32]
   1a55c:	cmp	r3, #0
   1a560:	bne	1a574 <flatcc_emitter_reset@@Base+0xb0>
   1a564:	ldr	r3, [fp, #-16]
   1a568:	ldr	r2, [r3, #24]
   1a56c:	ldr	r3, [fp, #-16]
   1a570:	str	r2, [r3, #32]
   1a574:	ldr	r3, [fp, #-16]
   1a578:	ldr	r2, [r3, #32]
   1a57c:	mov	r3, r2
   1a580:	lsl	r3, r3, #1
   1a584:	add	r3, r3, r2
   1a588:	lsr	r2, r3, #2
   1a58c:	ldr	r3, [fp, #-16]
   1a590:	ldr	r3, [r3, #24]
   1a594:	lsr	r3, r3, #2
   1a598:	add	r2, r2, r3
   1a59c:	ldr	r3, [fp, #-16]
   1a5a0:	str	r2, [r3, #32]
   1a5a4:	ldr	r3, [fp, #-16]
   1a5a8:	mov	r2, #0
   1a5ac:	str	r2, [r3, #24]
   1a5b0:	b	1a608 <flatcc_emitter_reset@@Base+0x144>
   1a5b4:	ldr	r3, [fp, #-16]
   1a5b8:	ldr	r3, [r3, #4]
   1a5bc:	ldr	r3, [r3, #2944]	; 0xb80
   1a5c0:	str	r3, [fp, #-8]
   1a5c4:	ldr	r3, [fp, #-16]
   1a5c8:	ldr	r3, [r3, #4]
   1a5cc:	ldr	r2, [fp, #-8]
   1a5d0:	ldr	r2, [r2, #2944]	; 0xb80
   1a5d4:	str	r2, [r3, #2944]	; 0xb80
   1a5d8:	ldr	r3, [fp, #-8]
   1a5dc:	ldr	r3, [r3, #2944]	; 0xb80
   1a5e0:	ldr	r2, [fp, #-16]
   1a5e4:	ldr	r2, [r2, #4]
   1a5e8:	str	r2, [r3, #2948]	; 0xb84
   1a5ec:	ldr	r0, [fp, #-8]
   1a5f0:	bl	122b0 <free@plt>
   1a5f4:	ldr	r3, [fp, #-16]
   1a5f8:	ldr	r3, [r3, #28]
   1a5fc:	sub	r2, r3, #2944	; 0xb80
   1a600:	ldr	r3, [fp, #-16]
   1a604:	str	r2, [r3, #28]
   1a608:	ldr	r3, [fp, #-16]
   1a60c:	ldr	r3, [r3, #32]
   1a610:	lsl	r2, r3, #1
   1a614:	ldr	r3, [fp, #-16]
   1a618:	ldr	r3, [r3, #28]
   1a61c:	cmp	r2, r3
   1a620:	bcs	1a648 <flatcc_emitter_reset@@Base+0x184>
   1a624:	ldr	r3, [fp, #-16]
   1a628:	ldr	r3, [r3, #4]
   1a62c:	ldr	r2, [r3, #2944]	; 0xb80
   1a630:	ldr	r3, [fp, #-16]
   1a634:	ldr	r3, [r3]
   1a638:	cmp	r2, r3
   1a63c:	bne	1a5b4 <flatcc_emitter_reset@@Base+0xf0>
   1a640:	b	1a648 <flatcc_emitter_reset@@Base+0x184>
   1a644:	nop			; (mov r0, r0)
   1a648:	sub	sp, fp, #4
   1a64c:	pop	{fp, pc}

0001a650 <flatcc_emitter_clear@@Base>:
   1a650:	push	{fp, lr}
   1a654:	add	fp, sp, #4
   1a658:	sub	sp, sp, #16
   1a65c:	str	r0, [fp, #-16]
   1a660:	ldr	r3, [fp, #-16]
   1a664:	ldr	r3, [r3]
   1a668:	str	r3, [fp, #-8]
   1a66c:	ldr	r3, [fp, #-8]
   1a670:	cmp	r3, #0
   1a674:	beq	1a6d4 <flatcc_emitter_clear@@Base+0x84>
   1a678:	ldr	r3, [fp, #-8]
   1a67c:	ldr	r3, [r3, #2948]	; 0xb84
   1a680:	mov	r2, #0
   1a684:	str	r2, [r3, #2944]	; 0xb80
   1a688:	b	1a6a8 <flatcc_emitter_clear@@Base+0x58>
   1a68c:	ldr	r3, [fp, #-8]
   1a690:	ldr	r3, [r3, #2944]	; 0xb80
   1a694:	str	r3, [fp, #-8]
   1a698:	ldr	r3, [fp, #-8]
   1a69c:	ldr	r3, [r3, #2948]	; 0xb84
   1a6a0:	mov	r0, r3
   1a6a4:	bl	122b0 <free@plt>
   1a6a8:	ldr	r3, [fp, #-8]
   1a6ac:	ldr	r3, [r3, #2944]	; 0xb80
   1a6b0:	cmp	r3, #0
   1a6b4:	bne	1a68c <flatcc_emitter_clear@@Base+0x3c>
   1a6b8:	ldr	r0, [fp, #-8]
   1a6bc:	bl	122b0 <free@plt>
   1a6c0:	mov	r2, #36	; 0x24
   1a6c4:	mov	r1, #0
   1a6c8:	ldr	r0, [fp, #-16]
   1a6cc:	bl	1231c <memset@plt>
   1a6d0:	b	1a6d8 <flatcc_emitter_clear@@Base+0x88>
   1a6d4:	nop			; (mov r0, r0)
   1a6d8:	sub	sp, fp, #4
   1a6dc:	pop	{fp, pc}

0001a6e0 <flatcc_emitter@@Base>:
   1a6e0:	push	{fp, lr}
   1a6e4:	add	fp, sp, #4
   1a6e8:	sub	sp, sp, #24
   1a6ec:	str	r0, [fp, #-16]
   1a6f0:	str	r1, [fp, #-20]	; 0xffffffec
   1a6f4:	str	r2, [fp, #-24]	; 0xffffffe8
   1a6f8:	str	r3, [fp, #-28]	; 0xffffffe4
   1a6fc:	ldr	r3, [fp, #-16]
   1a700:	str	r3, [fp, #-12]
   1a704:	ldr	r3, [fp, #-12]
   1a708:	ldr	r2, [r3, #24]
   1a70c:	ldr	r3, [fp, #4]
   1a710:	add	r2, r2, r3
   1a714:	ldr	r3, [fp, #-12]
   1a718:	str	r2, [r3, #24]
   1a71c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a720:	cmp	r3, #0
   1a724:	bge	1a7ec <flatcc_emitter@@Base+0x10c>
   1a728:	ldr	r3, [fp, #-12]
   1a72c:	ldr	r2, [r3, #12]
   1a730:	ldr	r3, [fp, #4]
   1a734:	cmp	r2, r3
   1a738:	bcc	1a780 <flatcc_emitter@@Base+0xa0>
   1a73c:	ldr	r3, [fp, #-12]
   1a740:	ldr	r2, [r3, #8]
   1a744:	ldr	r3, [fp, #4]
   1a748:	rsb	r3, r3, #0
   1a74c:	add	r2, r2, r3
   1a750:	ldr	r3, [fp, #-12]
   1a754:	str	r2, [r3, #8]
   1a758:	ldr	r3, [fp, #-12]
   1a75c:	ldr	r2, [r3, #12]
   1a760:	ldr	r3, [fp, #4]
   1a764:	sub	r2, r2, r3
   1a768:	ldr	r3, [fp, #-12]
   1a76c:	str	r2, [r3, #12]
   1a770:	ldr	r3, [fp, #-12]
   1a774:	ldr	r3, [r3, #8]
   1a778:	str	r3, [fp, #-8]
   1a77c:	b	1a898 <flatcc_emitter@@Base+0x1b8>
   1a780:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a784:	lsl	r3, r3, #3
   1a788:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a78c:	add	r3, r2, r3
   1a790:	str	r3, [fp, #-20]	; 0xffffffec
   1a794:	b	1a7d4 <flatcc_emitter@@Base+0xf4>
   1a798:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a79c:	sub	r3, r3, #8
   1a7a0:	str	r3, [fp, #-20]	; 0xffffffec
   1a7a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a7a8:	ldr	r1, [r3]
   1a7ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a7b0:	ldr	r3, [r3, #4]
   1a7b4:	mov	r2, r3
   1a7b8:	ldr	r0, [fp, #-12]
   1a7bc:	bl	1a208 <flatcc_builder_get_emit_context@@Base+0x3f8>
   1a7c0:	mov	r3, r0
   1a7c4:	cmp	r3, #0
   1a7c8:	beq	1a7d4 <flatcc_emitter@@Base+0xf4>
   1a7cc:	mvn	r3, #0
   1a7d0:	b	1a8f0 <flatcc_emitter@@Base+0x210>
   1a7d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a7d8:	sub	r2, r3, #1
   1a7dc:	str	r2, [fp, #-24]	; 0xffffffe8
   1a7e0:	cmp	r3, #0
   1a7e4:	bne	1a798 <flatcc_emitter@@Base+0xb8>
   1a7e8:	b	1a890 <flatcc_emitter@@Base+0x1b0>
   1a7ec:	ldr	r3, [fp, #-12]
   1a7f0:	ldr	r2, [r3, #20]
   1a7f4:	ldr	r3, [fp, #4]
   1a7f8:	cmp	r2, r3
   1a7fc:	bcc	1a87c <flatcc_emitter@@Base+0x19c>
   1a800:	ldr	r3, [fp, #-12]
   1a804:	ldr	r3, [r3, #16]
   1a808:	str	r3, [fp, #-8]
   1a80c:	ldr	r3, [fp, #-12]
   1a810:	ldr	r2, [r3, #16]
   1a814:	ldr	r3, [fp, #4]
   1a818:	add	r2, r2, r3
   1a81c:	ldr	r3, [fp, #-12]
   1a820:	str	r2, [r3, #16]
   1a824:	ldr	r3, [fp, #-12]
   1a828:	ldr	r2, [r3, #20]
   1a82c:	ldr	r3, [fp, #4]
   1a830:	sub	r2, r2, r3
   1a834:	ldr	r3, [fp, #-12]
   1a838:	str	r2, [r3, #20]
   1a83c:	b	1a898 <flatcc_emitter@@Base+0x1b8>
   1a840:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a844:	ldr	r1, [r3]
   1a848:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a84c:	ldr	r3, [r3, #4]
   1a850:	mov	r2, r3
   1a854:	ldr	r0, [fp, #-12]
   1a858:	bl	1a310 <flatcc_builder_get_emit_context@@Base+0x500>
   1a85c:	mov	r3, r0
   1a860:	cmp	r3, #0
   1a864:	beq	1a870 <flatcc_emitter@@Base+0x190>
   1a868:	mvn	r3, #0
   1a86c:	b	1a8f0 <flatcc_emitter@@Base+0x210>
   1a870:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a874:	add	r3, r3, #8
   1a878:	str	r3, [fp, #-20]	; 0xffffffec
   1a87c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a880:	sub	r2, r3, #1
   1a884:	str	r2, [fp, #-24]	; 0xffffffe8
   1a888:	cmp	r3, #0
   1a88c:	bne	1a840 <flatcc_emitter@@Base+0x160>
   1a890:	mov	r3, #0
   1a894:	b	1a8f0 <flatcc_emitter@@Base+0x210>
   1a898:	b	1a8d8 <flatcc_emitter@@Base+0x1f8>
   1a89c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a8a0:	ldr	r1, [r3]
   1a8a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a8a8:	ldr	r3, [r3, #4]
   1a8ac:	mov	r2, r3
   1a8b0:	ldr	r0, [fp, #-8]
   1a8b4:	bl	122bc <memcpy@plt>
   1a8b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a8bc:	ldr	r3, [r3, #4]
   1a8c0:	ldr	r2, [fp, #-8]
   1a8c4:	add	r3, r2, r3
   1a8c8:	str	r3, [fp, #-8]
   1a8cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a8d0:	add	r3, r3, #8
   1a8d4:	str	r3, [fp, #-20]	; 0xffffffec
   1a8d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a8dc:	sub	r2, r3, #1
   1a8e0:	str	r2, [fp, #-24]	; 0xffffffe8
   1a8e4:	cmp	r3, #0
   1a8e8:	bne	1a89c <flatcc_emitter@@Base+0x1bc>
   1a8ec:	mov	r3, #0
   1a8f0:	mov	r0, r3
   1a8f4:	sub	sp, fp, #4
   1a8f8:	pop	{fp, pc}

0001a8fc <flatcc_emitter_copy_buffer@@Base>:
   1a8fc:	push	{fp, lr}
   1a900:	add	fp, sp, #4
   1a904:	sub	sp, sp, #24
   1a908:	str	r0, [fp, #-16]
   1a90c:	str	r1, [fp, #-20]	; 0xffffffec
   1a910:	str	r2, [fp, #-24]	; 0xffffffe8
   1a914:	ldr	r3, [fp, #-16]
   1a918:	ldr	r2, [r3, #24]
   1a91c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a920:	cmp	r2, r3
   1a924:	bls	1a930 <flatcc_emitter_copy_buffer@@Base+0x34>
   1a928:	mov	r3, #0
   1a92c:	b	1aa30 <flatcc_emitter_copy_buffer@@Base+0x134>
   1a930:	ldr	r3, [fp, #-16]
   1a934:	ldr	r3, [r3]
   1a938:	cmp	r3, #0
   1a93c:	bne	1a948 <flatcc_emitter_copy_buffer@@Base+0x4c>
   1a940:	mov	r3, #0
   1a944:	b	1aa30 <flatcc_emitter_copy_buffer@@Base+0x134>
   1a948:	ldr	r3, [fp, #-16]
   1a94c:	ldr	r2, [r3]
   1a950:	ldr	r3, [fp, #-16]
   1a954:	ldr	r3, [r3, #4]
   1a958:	cmp	r2, r3
   1a95c:	bne	1a984 <flatcc_emitter_copy_buffer@@Base+0x88>
   1a960:	ldr	r3, [fp, #-16]
   1a964:	ldr	r1, [r3, #8]
   1a968:	ldr	r3, [fp, #-16]
   1a96c:	ldr	r3, [r3, #24]
   1a970:	mov	r2, r3
   1a974:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a978:	bl	122bc <memcpy@plt>
   1a97c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a980:	b	1aa30 <flatcc_emitter_copy_buffer@@Base+0x134>
   1a984:	ldr	r3, [fp, #-16]
   1a988:	ldr	r3, [r3, #12]
   1a98c:	rsb	r3, r3, #2944	; 0xb80
   1a990:	str	r3, [fp, #-12]
   1a994:	ldr	r3, [fp, #-16]
   1a998:	ldr	r3, [r3, #8]
   1a99c:	ldr	r2, [fp, #-12]
   1a9a0:	mov	r1, r3
   1a9a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a9a8:	bl	122bc <memcpy@plt>
   1a9ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a9b0:	ldr	r3, [fp, #-12]
   1a9b4:	add	r3, r2, r3
   1a9b8:	str	r3, [fp, #-20]	; 0xffffffec
   1a9bc:	ldr	r3, [fp, #-16]
   1a9c0:	ldr	r3, [r3]
   1a9c4:	ldr	r3, [r3, #2944]	; 0xb80
   1a9c8:	str	r3, [fp, #-8]
   1a9cc:	b	1a9fc <flatcc_emitter_copy_buffer@@Base+0x100>
   1a9d0:	ldr	r3, [fp, #-8]
   1a9d4:	mov	r2, #2944	; 0xb80
   1a9d8:	mov	r1, r3
   1a9dc:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a9e0:	bl	122bc <memcpy@plt>
   1a9e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a9e8:	add	r3, r3, #2944	; 0xb80
   1a9ec:	str	r3, [fp, #-20]	; 0xffffffec
   1a9f0:	ldr	r3, [fp, #-8]
   1a9f4:	ldr	r3, [r3, #2944]	; 0xb80
   1a9f8:	str	r3, [fp, #-8]
   1a9fc:	ldr	r3, [fp, #-16]
   1aa00:	ldr	r2, [r3, #4]
   1aa04:	ldr	r3, [fp, #-8]
   1aa08:	cmp	r2, r3
   1aa0c:	bne	1a9d0 <flatcc_emitter_copy_buffer@@Base+0xd4>
   1aa10:	ldr	r1, [fp, #-8]
   1aa14:	ldr	r3, [fp, #-16]
   1aa18:	ldr	r3, [r3, #20]
   1aa1c:	rsb	r3, r3, #2944	; 0xb80
   1aa20:	mov	r2, r3
   1aa24:	ldr	r0, [fp, #-20]	; 0xffffffec
   1aa28:	bl	122bc <memcpy@plt>
   1aa2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aa30:	mov	r0, r3
   1aa34:	sub	sp, fp, #4
   1aa38:	pop	{fp, pc}
   1aa3c:	push	{fp}		; (str fp, [sp, #-4]!)
   1aa40:	add	fp, sp, #0
   1aa44:	sub	sp, sp, #12
   1aa48:	str	r0, [fp, #-8]
   1aa4c:	ldr	r3, [fp, #-8]
   1aa50:	mov	r0, r3
   1aa54:	add	sp, fp, #0
   1aa58:	pop	{fp}		; (ldr fp, [sp], #4)
   1aa5c:	bx	lr
   1aa60:	push	{fp, lr}
   1aa64:	add	fp, sp, #4
   1aa68:	sub	sp, sp, #8
   1aa6c:	str	r0, [fp, #-8]
   1aa70:	ldr	r3, [fp, #-8]
   1aa74:	ldr	r3, [r3]
   1aa78:	mov	r0, r3
   1aa7c:	bl	1aa3c <flatcc_emitter_copy_buffer@@Base+0x140>
   1aa80:	mov	r3, r0
   1aa84:	mov	r0, r3
   1aa88:	sub	sp, fp, #4
   1aa8c:	pop	{fp, pc}
   1aa90:	push	{fp}		; (str fp, [sp, #-4]!)
   1aa94:	add	fp, sp, #0
   1aa98:	sub	sp, sp, #12
   1aa9c:	mov	r3, r0
   1aaa0:	strh	r3, [fp, #-6]
   1aaa4:	ldrh	r3, [fp, #-6]
   1aaa8:	mov	r0, r3
   1aaac:	add	sp, fp, #0
   1aab0:	pop	{fp}		; (ldr fp, [sp], #4)
   1aab4:	bx	lr
   1aab8:	push	{fp, lr}
   1aabc:	add	fp, sp, #4
   1aac0:	sub	sp, sp, #8
   1aac4:	str	r0, [fp, #-8]
   1aac8:	ldr	r3, [fp, #-8]
   1aacc:	ldrh	r3, [r3]
   1aad0:	mov	r0, r3
   1aad4:	bl	1aa90 <flatcc_emitter_copy_buffer@@Base+0x194>
   1aad8:	mov	r3, r0
   1aadc:	mov	r0, r3
   1aae0:	sub	sp, fp, #4
   1aae4:	pop	{fp, pc}
   1aae8:	push	{fp}		; (str fp, [sp, #-4]!)
   1aaec:	add	fp, sp, #0
   1aaf0:	sub	sp, sp, #12
   1aaf4:	str	r0, [fp, #-8]
   1aaf8:	ldr	r3, [fp, #-8]
   1aafc:	mov	r0, r3
   1ab00:	add	sp, fp, #0
   1ab04:	pop	{fp}		; (ldr fp, [sp], #4)
   1ab08:	bx	lr
   1ab0c:	push	{fp}		; (str fp, [sp, #-4]!)
   1ab10:	add	fp, sp, #0
   1ab14:	sub	sp, sp, #12
   1ab18:	str	r0, [fp, #-8]
   1ab1c:	ldr	r3, [fp, #-8]
   1ab20:	mov	r0, r3
   1ab24:	add	sp, fp, #0
   1ab28:	pop	{fp}		; (ldr fp, [sp], #4)
   1ab2c:	bx	lr
   1ab30:	push	{fp, lr}
   1ab34:	add	fp, sp, #4
   1ab38:	sub	sp, sp, #8
   1ab3c:	str	r0, [fp, #-8]
   1ab40:	ldr	r3, [fp, #-8]
   1ab44:	ldr	r3, [r3]
   1ab48:	mov	r0, r3
   1ab4c:	bl	1aae8 <flatcc_emitter_copy_buffer@@Base+0x1ec>
   1ab50:	mov	r3, r0
   1ab54:	mov	r0, r3
   1ab58:	sub	sp, fp, #4
   1ab5c:	pop	{fp, pc}

0001ab60 <flatcc_verify_error_string@@Base>:
   1ab60:	push	{fp}		; (str fp, [sp, #-4]!)
   1ab64:	add	fp, sp, #0
   1ab68:	sub	sp, sp, #12
   1ab6c:	str	r0, [fp, #-8]
   1ab70:	ldr	r3, [fp, #-8]
   1ab74:	cmp	r3, #36	; 0x24
   1ab78:	addls	pc, pc, r3, lsl #2
   1ab7c:	b	1add0 <flatcc_verify_error_string@@Base+0x270>
   1ab80:	b	1ac14 <flatcc_verify_error_string@@Base+0xb4>
   1ab84:	b	1ac20 <flatcc_verify_error_string@@Base+0xc0>
   1ab88:	b	1ac2c <flatcc_verify_error_string@@Base+0xcc>
   1ab8c:	b	1ac38 <flatcc_verify_error_string@@Base+0xd8>
   1ab90:	b	1ac44 <flatcc_verify_error_string@@Base+0xe4>
   1ab94:	b	1ac50 <flatcc_verify_error_string@@Base+0xf0>
   1ab98:	b	1ac5c <flatcc_verify_error_string@@Base+0xfc>
   1ab9c:	b	1ac68 <flatcc_verify_error_string@@Base+0x108>
   1aba0:	b	1ac74 <flatcc_verify_error_string@@Base+0x114>
   1aba4:	b	1ac80 <flatcc_verify_error_string@@Base+0x120>
   1aba8:	b	1ac8c <flatcc_verify_error_string@@Base+0x12c>
   1abac:	b	1ac98 <flatcc_verify_error_string@@Base+0x138>
   1abb0:	b	1aca4 <flatcc_verify_error_string@@Base+0x144>
   1abb4:	b	1acb0 <flatcc_verify_error_string@@Base+0x150>
   1abb8:	b	1acbc <flatcc_verify_error_string@@Base+0x15c>
   1abbc:	b	1acc8 <flatcc_verify_error_string@@Base+0x168>
   1abc0:	b	1acd4 <flatcc_verify_error_string@@Base+0x174>
   1abc4:	b	1ace0 <flatcc_verify_error_string@@Base+0x180>
   1abc8:	b	1acec <flatcc_verify_error_string@@Base+0x18c>
   1abcc:	b	1acf8 <flatcc_verify_error_string@@Base+0x198>
   1abd0:	b	1ad04 <flatcc_verify_error_string@@Base+0x1a4>
   1abd4:	b	1ad10 <flatcc_verify_error_string@@Base+0x1b0>
   1abd8:	b	1ad1c <flatcc_verify_error_string@@Base+0x1bc>
   1abdc:	b	1ad28 <flatcc_verify_error_string@@Base+0x1c8>
   1abe0:	b	1ad34 <flatcc_verify_error_string@@Base+0x1d4>
   1abe4:	b	1ad40 <flatcc_verify_error_string@@Base+0x1e0>
   1abe8:	b	1ad4c <flatcc_verify_error_string@@Base+0x1ec>
   1abec:	b	1ad58 <flatcc_verify_error_string@@Base+0x1f8>
   1abf0:	b	1ad64 <flatcc_verify_error_string@@Base+0x204>
   1abf4:	b	1ad70 <flatcc_verify_error_string@@Base+0x210>
   1abf8:	b	1ad7c <flatcc_verify_error_string@@Base+0x21c>
   1abfc:	b	1ad88 <flatcc_verify_error_string@@Base+0x228>
   1ac00:	b	1ad94 <flatcc_verify_error_string@@Base+0x234>
   1ac04:	b	1ada0 <flatcc_verify_error_string@@Base+0x240>
   1ac08:	b	1adac <flatcc_verify_error_string@@Base+0x24c>
   1ac0c:	b	1adb8 <flatcc_verify_error_string@@Base+0x258>
   1ac10:	b	1adc4 <flatcc_verify_error_string@@Base+0x264>
   1ac14:	ldr	r3, [pc, #460]	; 1ade8 <flatcc_verify_error_string@@Base+0x288>
   1ac18:	add	r3, pc, r3
   1ac1c:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ac20:	ldr	r3, [pc, #452]	; 1adec <flatcc_verify_error_string@@Base+0x28c>
   1ac24:	add	r3, pc, r3
   1ac28:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ac2c:	ldr	r3, [pc, #444]	; 1adf0 <flatcc_verify_error_string@@Base+0x290>
   1ac30:	add	r3, pc, r3
   1ac34:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ac38:	ldr	r3, [pc, #436]	; 1adf4 <flatcc_verify_error_string@@Base+0x294>
   1ac3c:	add	r3, pc, r3
   1ac40:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ac44:	ldr	r3, [pc, #428]	; 1adf8 <flatcc_verify_error_string@@Base+0x298>
   1ac48:	add	r3, pc, r3
   1ac4c:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ac50:	ldr	r3, [pc, #420]	; 1adfc <flatcc_verify_error_string@@Base+0x29c>
   1ac54:	add	r3, pc, r3
   1ac58:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ac5c:	ldr	r3, [pc, #412]	; 1ae00 <flatcc_verify_error_string@@Base+0x2a0>
   1ac60:	add	r3, pc, r3
   1ac64:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ac68:	ldr	r3, [pc, #404]	; 1ae04 <flatcc_verify_error_string@@Base+0x2a4>
   1ac6c:	add	r3, pc, r3
   1ac70:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ac74:	ldr	r3, [pc, #396]	; 1ae08 <flatcc_verify_error_string@@Base+0x2a8>
   1ac78:	add	r3, pc, r3
   1ac7c:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ac80:	ldr	r3, [pc, #388]	; 1ae0c <flatcc_verify_error_string@@Base+0x2ac>
   1ac84:	add	r3, pc, r3
   1ac88:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ac8c:	ldr	r3, [pc, #380]	; 1ae10 <flatcc_verify_error_string@@Base+0x2b0>
   1ac90:	add	r3, pc, r3
   1ac94:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ac98:	ldr	r3, [pc, #372]	; 1ae14 <flatcc_verify_error_string@@Base+0x2b4>
   1ac9c:	add	r3, pc, r3
   1aca0:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1aca4:	ldr	r3, [pc, #364]	; 1ae18 <flatcc_verify_error_string@@Base+0x2b8>
   1aca8:	add	r3, pc, r3
   1acac:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1acb0:	ldr	r3, [pc, #356]	; 1ae1c <flatcc_verify_error_string@@Base+0x2bc>
   1acb4:	add	r3, pc, r3
   1acb8:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1acbc:	ldr	r3, [pc, #348]	; 1ae20 <flatcc_verify_error_string@@Base+0x2c0>
   1acc0:	add	r3, pc, r3
   1acc4:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1acc8:	ldr	r3, [pc, #340]	; 1ae24 <flatcc_verify_error_string@@Base+0x2c4>
   1accc:	add	r3, pc, r3
   1acd0:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1acd4:	ldr	r3, [pc, #332]	; 1ae28 <flatcc_verify_error_string@@Base+0x2c8>
   1acd8:	add	r3, pc, r3
   1acdc:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ace0:	ldr	r3, [pc, #324]	; 1ae2c <flatcc_verify_error_string@@Base+0x2cc>
   1ace4:	add	r3, pc, r3
   1ace8:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1acec:	ldr	r3, [pc, #316]	; 1ae30 <flatcc_verify_error_string@@Base+0x2d0>
   1acf0:	add	r3, pc, r3
   1acf4:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1acf8:	ldr	r3, [pc, #308]	; 1ae34 <flatcc_verify_error_string@@Base+0x2d4>
   1acfc:	add	r3, pc, r3
   1ad00:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ad04:	ldr	r3, [pc, #300]	; 1ae38 <flatcc_verify_error_string@@Base+0x2d8>
   1ad08:	add	r3, pc, r3
   1ad0c:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ad10:	ldr	r3, [pc, #292]	; 1ae3c <flatcc_verify_error_string@@Base+0x2dc>
   1ad14:	add	r3, pc, r3
   1ad18:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ad1c:	ldr	r3, [pc, #284]	; 1ae40 <flatcc_verify_error_string@@Base+0x2e0>
   1ad20:	add	r3, pc, r3
   1ad24:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ad28:	ldr	r3, [pc, #276]	; 1ae44 <flatcc_verify_error_string@@Base+0x2e4>
   1ad2c:	add	r3, pc, r3
   1ad30:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ad34:	ldr	r3, [pc, #268]	; 1ae48 <flatcc_verify_error_string@@Base+0x2e8>
   1ad38:	add	r3, pc, r3
   1ad3c:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ad40:	ldr	r3, [pc, #260]	; 1ae4c <flatcc_verify_error_string@@Base+0x2ec>
   1ad44:	add	r3, pc, r3
   1ad48:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ad4c:	ldr	r3, [pc, #252]	; 1ae50 <flatcc_verify_error_string@@Base+0x2f0>
   1ad50:	add	r3, pc, r3
   1ad54:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ad58:	ldr	r3, [pc, #244]	; 1ae54 <flatcc_verify_error_string@@Base+0x2f4>
   1ad5c:	add	r3, pc, r3
   1ad60:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ad64:	ldr	r3, [pc, #236]	; 1ae58 <flatcc_verify_error_string@@Base+0x2f8>
   1ad68:	add	r3, pc, r3
   1ad6c:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ad70:	ldr	r3, [pc, #228]	; 1ae5c <flatcc_verify_error_string@@Base+0x2fc>
   1ad74:	add	r3, pc, r3
   1ad78:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ad7c:	ldr	r3, [pc, #220]	; 1ae60 <flatcc_verify_error_string@@Base+0x300>
   1ad80:	add	r3, pc, r3
   1ad84:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ad88:	ldr	r3, [pc, #212]	; 1ae64 <flatcc_verify_error_string@@Base+0x304>
   1ad8c:	add	r3, pc, r3
   1ad90:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ad94:	ldr	r3, [pc, #204]	; 1ae68 <flatcc_verify_error_string@@Base+0x308>
   1ad98:	add	r3, pc, r3
   1ad9c:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1ada0:	ldr	r3, [pc, #196]	; 1ae6c <flatcc_verify_error_string@@Base+0x30c>
   1ada4:	add	r3, pc, r3
   1ada8:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1adac:	ldr	r3, [pc, #188]	; 1ae70 <flatcc_verify_error_string@@Base+0x310>
   1adb0:	add	r3, pc, r3
   1adb4:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1adb8:	ldr	r3, [pc, #180]	; 1ae74 <flatcc_verify_error_string@@Base+0x314>
   1adbc:	add	r3, pc, r3
   1adc0:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1adc4:	ldr	r3, [pc, #172]	; 1ae78 <flatcc_verify_error_string@@Base+0x318>
   1adc8:	add	r3, pc, r3
   1adcc:	b	1add8 <flatcc_verify_error_string@@Base+0x278>
   1add0:	ldr	r3, [pc, #164]	; 1ae7c <flatcc_verify_error_string@@Base+0x31c>
   1add4:	add	r3, pc, r3
   1add8:	mov	r0, r3
   1addc:	add	sp, fp, #0
   1ade0:	pop	{fp}		; (ldr fp, [sp], #4)
   1ade4:	bx	lr
   1ade8:	andeq	r3, r0, ip, lsr r0
   1adec:	andeq	r3, r0, r4, lsr r0
   1adf0:	andeq	r3, r0, r0, asr #32
   1adf4:	andeq	r3, r0, r8, asr #32
   1adf8:	andeq	r3, r0, r8, asr r0
   1adfc:	andeq	r3, r0, r4, rrx
   1ae00:	andeq	r3, r0, ip, ror r0
   1ae04:	muleq	r0, r0, r0
   1ae08:	andeq	r3, r0, r0, lsr #1
   1ae0c:	andeq	r3, r0, r8, lsr #1
   1ae10:	strheq	r3, [r0], -r0
   1ae14:	strheq	r3, [r0], -ip
   1ae18:	andeq	r3, r0, r4, asr #1
   1ae1c:	ldrdeq	r3, [r0], -r0
   1ae20:	andeq	r3, r0, r0, ror #1
   1ae24:	strdeq	r3, [r0], -r0
   1ae28:	andeq	r3, r0, ip, lsl #2
   1ae2c:	andeq	r3, r0, r8, lsr #2
   1ae30:	andeq	r3, r0, r4, asr #2
   1ae34:	andeq	r3, r0, ip, asr #2
   1ae38:	andeq	r3, r0, r8, ror #2
   1ae3c:	andeq	r3, r0, r4, ror r1
   1ae40:	muleq	r0, r4, r1
   1ae44:			; <UNDEFINED> instruction: 0x000031bc
   1ae48:	ldrdeq	r3, [r0], -ip
   1ae4c:	strdeq	r3, [r0], -ip
   1ae50:	andeq	r3, r0, r0, lsr #4
   1ae54:	andeq	r3, r0, r8, lsr #4
   1ae58:	andeq	r3, r0, r8, lsr r2
   1ae5c:	andeq	r3, r0, r4, asr #4
   1ae60:	andeq	r3, r0, r0, ror #4
   1ae64:	andeq	r3, r0, ip, ror r2
   1ae68:	andeq	r3, r0, r8, lsl #5
   1ae6c:	andeq	r3, r0, r4, lsr #5
   1ae70:	andeq	r3, r0, r0, asr #5
   1ae74:	andeq	r3, r0, r8, ror #5
   1ae78:	andeq	r3, r0, r4, lsl #6
   1ae7c:	andeq	r3, r0, r8, lsl #6
   1ae80:	push	{fp, lr}
   1ae84:	add	fp, sp, #4
   1ae88:	sub	sp, sp, #8
   1ae8c:	str	r0, [fp, #-8]
   1ae90:	str	r1, [fp, #-12]
   1ae94:	ldr	r2, [fp, #-8]
   1ae98:	ldr	r3, [fp, #-12]
   1ae9c:	add	r3, r2, r3
   1aea0:	mov	r0, r3
   1aea4:	bl	1aa60 <flatcc_emitter_copy_buffer@@Base+0x164>
   1aea8:	mov	r3, r0
   1aeac:	mov	r0, r3
   1aeb0:	sub	sp, fp, #4
   1aeb4:	pop	{fp, pc}
   1aeb8:	push	{fp, lr}
   1aebc:	add	fp, sp, #4
   1aec0:	sub	sp, sp, #16
   1aec4:	str	r0, [fp, #-16]
   1aec8:	mov	r3, #0
   1aecc:	str	r3, [fp, #-8]
   1aed0:	sub	r3, fp, #8
   1aed4:	mov	r2, #4
   1aed8:	ldr	r1, [fp, #-16]
   1aedc:	mov	r0, r3
   1aee0:	bl	12328 <strncpy@plt>
   1aee4:	ldr	r3, [fp, #-8]
   1aee8:	mov	r0, r3
   1aeec:	bl	1ab0c <flatcc_emitter_copy_buffer@@Base+0x210>
   1aef0:	mov	r3, r0
   1aef4:	mov	r0, r3
   1aef8:	sub	sp, fp, #4
   1aefc:	pop	{fp, pc}
   1af00:	push	{fp, lr}
   1af04:	add	fp, sp, #4
   1af08:	sub	sp, sp, #8
   1af0c:	str	r0, [fp, #-8]
   1af10:	str	r1, [fp, #-12]
   1af14:	ldr	r2, [fp, #-8]
   1af18:	ldr	r3, [fp, #-12]
   1af1c:	add	r3, r2, r3
   1af20:	mov	r0, r3
   1af24:	bl	1ab30 <flatcc_emitter_copy_buffer@@Base+0x234>
   1af28:	mov	r3, r0
   1af2c:	mov	r0, r3
   1af30:	sub	sp, fp, #4
   1af34:	pop	{fp, pc}
   1af38:	push	{fp, lr}
   1af3c:	add	fp, sp, #4
   1af40:	sub	sp, sp, #8
   1af44:	str	r0, [fp, #-8]
   1af48:	str	r1, [fp, #-12]
   1af4c:	ldr	r2, [fp, #-8]
   1af50:	ldr	r3, [fp, #-12]
   1af54:	add	r3, r2, r3
   1af58:	mov	r0, r3
   1af5c:	bl	1aab8 <flatcc_emitter_copy_buffer@@Base+0x1bc>
   1af60:	mov	r3, r0
   1af64:	mov	r0, r3
   1af68:	sub	sp, fp, #4
   1af6c:	pop	{fp, pc}
   1af70:	push	{fp}		; (str fp, [sp, #-4]!)
   1af74:	add	fp, sp, #0
   1af78:	sub	sp, sp, #28
   1af7c:	str	r0, [fp, #-16]
   1af80:	str	r1, [fp, #-20]	; 0xffffffec
   1af84:	str	r2, [fp, #-24]	; 0xffffffe8
   1af88:	ldr	r2, [fp, #-20]	; 0xffffffec
   1af8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1af90:	add	r3, r2, r3
   1af94:	str	r3, [fp, #-8]
   1af98:	ldr	r2, [fp, #-8]
   1af9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1afa0:	cmp	r2, r3
   1afa4:	bls	1afd4 <flatcc_verify_error_string@@Base+0x474>
   1afa8:	ldr	r3, [fp, #-8]
   1afac:	add	r2, r3, #4
   1afb0:	ldr	r3, [fp, #-16]
   1afb4:	cmp	r2, r3
   1afb8:	bhi	1afd4 <flatcc_verify_error_string@@Base+0x474>
   1afbc:	ldr	r3, [fp, #-8]
   1afc0:	and	r3, r3, #3
   1afc4:	cmp	r3, #0
   1afc8:	bne	1afd4 <flatcc_verify_error_string@@Base+0x474>
   1afcc:	mov	r3, #1
   1afd0:	b	1afd8 <flatcc_verify_error_string@@Base+0x478>
   1afd4:	mov	r3, #0
   1afd8:	mov	r0, r3
   1afdc:	add	sp, fp, #0
   1afe0:	pop	{fp}		; (ldr fp, [sp], #4)
   1afe4:	bx	lr
   1afe8:	push	{fp}		; (str fp, [sp, #-4]!)
   1afec:	add	fp, sp, #0
   1aff0:	sub	sp, sp, #28
   1aff4:	str	r0, [fp, #-16]
   1aff8:	str	r1, [fp, #-20]	; 0xffffffec
   1affc:	str	r2, [fp, #-24]	; 0xffffffe8
   1b000:	strh	r3, [fp, #-26]	; 0xffffffe6
   1b004:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b008:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b00c:	add	r3, r2, r3
   1b010:	str	r3, [fp, #-8]
   1b014:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   1b018:	cmp	r3, #4
   1b01c:	movcs	r3, r3
   1b020:	movcc	r3, #4
   1b024:	strh	r3, [fp, #-26]	; 0xffffffe6
   1b028:	ldr	r2, [fp, #-8]
   1b02c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b030:	cmp	r2, r3
   1b034:	bls	1b074 <flatcc_verify_error_string@@Base+0x514>
   1b038:	ldr	r3, [fp, #-8]
   1b03c:	add	r2, r3, #4
   1b040:	ldr	r3, [fp, #-16]
   1b044:	cmp	r2, r3
   1b048:	bhi	1b074 <flatcc_verify_error_string@@Base+0x514>
   1b04c:	ldr	r3, [fp, #-8]
   1b050:	add	r2, r3, #4
   1b054:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   1b058:	sub	r3, r3, #1
   1b05c:	orr	r3, r3, #3
   1b060:	and	r3, r3, r2
   1b064:	cmp	r3, #0
   1b068:	bne	1b074 <flatcc_verify_error_string@@Base+0x514>
   1b06c:	mov	r3, #1
   1b070:	b	1b078 <flatcc_verify_error_string@@Base+0x518>
   1b074:	mov	r3, #0
   1b078:	mov	r0, r3
   1b07c:	add	sp, fp, #0
   1b080:	pop	{fp}		; (ldr fp, [sp], #4)
   1b084:	bx	lr
   1b088:	push	{fp}		; (str fp, [sp, #-4]!)
   1b08c:	add	fp, sp, #0
   1b090:	sub	sp, sp, #36	; 0x24
   1b094:	str	r0, [fp, #-24]	; 0xffffffe8
   1b098:	str	r1, [fp, #-28]	; 0xffffffe4
   1b09c:	str	r2, [fp, #-32]	; 0xffffffe0
   1b0a0:	str	r3, [fp, #-36]	; 0xffffffdc
   1b0a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b0a8:	cmp	r3, #0
   1b0ac:	beq	1b0c8 <flatcc_verify_error_string@@Base+0x568>
   1b0b0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b0b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b0b8:	add	r2, r2, r3
   1b0bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b0c0:	cmp	r2, r3
   1b0c4:	bls	1b0d0 <flatcc_verify_error_string@@Base+0x570>
   1b0c8:	mov	r3, #18
   1b0cc:	b	1b190 <flatcc_verify_error_string@@Base+0x630>
   1b0d0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b0d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b0d8:	add	r3, r2, r3
   1b0dc:	str	r3, [fp, #-28]	; 0xffffffe4
   1b0e0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b0e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b0e8:	add	r2, r2, r3
   1b0ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b0f0:	cmp	r2, r3
   1b0f4:	movcs	r3, #1
   1b0f8:	movcc	r3, #0
   1b0fc:	uxtb	r3, r3
   1b100:	str	r3, [fp, #-8]
   1b104:	ldr	r3, [fp, #-8]
   1b108:	cmp	r3, #0
   1b10c:	bne	1b118 <flatcc_verify_error_string@@Base+0x5b8>
   1b110:	mov	r3, #10
   1b114:	b	1b190 <flatcc_verify_error_string@@Base+0x630>
   1b118:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b11c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b120:	add	r2, r2, r3
   1b124:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b128:	cmp	r2, r3
   1b12c:	movls	r3, #1
   1b130:	movhi	r3, #0
   1b134:	uxtb	r3, r3
   1b138:	str	r3, [fp, #-12]
   1b13c:	ldr	r3, [fp, #-12]
   1b140:	cmp	r3, #0
   1b144:	bne	1b150 <flatcc_verify_error_string@@Base+0x5f0>
   1b148:	mov	r3, #9
   1b14c:	b	1b190 <flatcc_verify_error_string@@Base+0x630>
   1b150:	ldrh	r3, [fp, #4]
   1b154:	sub	r3, r3, #1
   1b158:	mov	r2, r3
   1b15c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b160:	and	r3, r3, r2
   1b164:	cmp	r3, #0
   1b168:	moveq	r3, #1
   1b16c:	movne	r3, #0
   1b170:	uxtb	r3, r3
   1b174:	str	r3, [fp, #-16]
   1b178:	ldr	r3, [fp, #-16]
   1b17c:	cmp	r3, #0
   1b180:	bne	1b18c <flatcc_verify_error_string@@Base+0x62c>
   1b184:	mov	r3, #11
   1b188:	b	1b190 <flatcc_verify_error_string@@Base+0x630>
   1b18c:	mov	r3, #0
   1b190:	mov	r0, r3
   1b194:	add	sp, fp, #0
   1b198:	pop	{fp}		; (ldr fp, [sp], #4)
   1b19c:	bx	lr
   1b1a0:	push	{fp, lr}
   1b1a4:	add	fp, sp, #4
   1b1a8:	sub	sp, sp, #16
   1b1ac:	str	r0, [fp, #-16]
   1b1b0:	mov	r3, r1
   1b1b4:	strh	r3, [fp, #-18]	; 0xffffffee
   1b1b8:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1b1bc:	add	r3, r3, #2
   1b1c0:	uxth	r3, r3
   1b1c4:	lsl	r3, r3, #1
   1b1c8:	strh	r3, [fp, #-6]
   1b1cc:	ldr	r3, [fp, #-16]
   1b1d0:	ldrh	r3, [r3, #22]
   1b1d4:	ldrh	r2, [fp, #-6]
   1b1d8:	cmp	r2, r3
   1b1dc:	bcc	1b1e8 <flatcc_verify_error_string@@Base+0x688>
   1b1e0:	mov	r3, #0
   1b1e4:	b	1b204 <flatcc_verify_error_string@@Base+0x6a4>
   1b1e8:	ldr	r3, [fp, #-16]
   1b1ec:	ldr	r3, [r3, #12]
   1b1f0:	ldrh	r2, [fp, #-6]
   1b1f4:	mov	r1, r2
   1b1f8:	mov	r0, r3
   1b1fc:	bl	1af38 <flatcc_verify_error_string@@Base+0x3d8>
   1b200:	mov	r3, r0
   1b204:	mov	r0, r3
   1b208:	sub	sp, fp, #4
   1b20c:	pop	{fp, pc}
   1b210:	push	{fp, lr}
   1b214:	add	fp, sp, #4
   1b218:	sub	sp, sp, #16
   1b21c:	str	r0, [fp, #-16]
   1b220:	mov	r3, r1
   1b224:	strh	r3, [fp, #-18]	; 0xffffffee
   1b228:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1b22c:	mov	r1, r3
   1b230:	ldr	r0, [fp, #-16]
   1b234:	bl	1b1a0 <flatcc_verify_error_string@@Base+0x640>
   1b238:	mov	r3, r0
   1b23c:	strh	r3, [fp, #-6]
   1b240:	ldrh	r3, [fp, #-6]
   1b244:	cmp	r3, #0
   1b248:	beq	1b26c <flatcc_verify_error_string@@Base+0x70c>
   1b24c:	ldr	r3, [fp, #-16]
   1b250:	ldr	r2, [r3]
   1b254:	ldr	r3, [fp, #-16]
   1b258:	ldr	r1, [r3, #16]
   1b25c:	ldrh	r3, [fp, #-6]
   1b260:	add	r3, r1, r3
   1b264:	add	r3, r2, r3
   1b268:	b	1b270 <flatcc_verify_error_string@@Base+0x710>
   1b26c:	mov	r3, #0
   1b270:	mov	r0, r3
   1b274:	sub	sp, fp, #4
   1b278:	pop	{fp, pc}
   1b27c:	push	{fp, lr}
   1b280:	add	fp, sp, #4
   1b284:	sub	sp, sp, #48	; 0x30
   1b288:	str	r0, [fp, #-40]	; 0xffffffd8
   1b28c:	str	r2, [fp, #-48]	; 0xffffffd0
   1b290:	str	r3, [fp, #-52]	; 0xffffffcc
   1b294:	strh	r1, [fp, #-42]	; 0xffffffd6
   1b298:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1b29c:	ldr	r3, [r3]
   1b2a0:	str	r3, [fp, #-8]
   1b2a4:	ldrh	r3, [fp, #-42]	; 0xffffffd6
   1b2a8:	mov	r1, r3
   1b2ac:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1b2b0:	bl	1b1a0 <flatcc_verify_error_string@@Base+0x640>
   1b2b4:	mov	r3, r0
   1b2b8:	strh	r3, [fp, #-10]
   1b2bc:	ldrh	r3, [fp, #-10]
   1b2c0:	cmp	r3, #0
   1b2c4:	bne	1b2fc <flatcc_verify_error_string@@Base+0x79c>
   1b2c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b2cc:	cmp	r3, #0
   1b2d0:	moveq	r3, #1
   1b2d4:	movne	r3, #0
   1b2d8:	uxtb	r3, r3
   1b2dc:	str	r3, [fp, #-16]
   1b2e0:	ldr	r3, [fp, #-16]
   1b2e4:	cmp	r3, #0
   1b2e8:	bne	1b2f4 <flatcc_verify_error_string@@Base+0x794>
   1b2ec:	mov	r3, #4
   1b2f0:	b	1b3c4 <flatcc_verify_error_string@@Base+0x864>
   1b2f4:	mov	r3, #0
   1b2f8:	b	1b3c4 <flatcc_verify_error_string@@Base+0x864>
   1b2fc:	ldrh	r3, [fp, #-10]
   1b300:	str	r3, [fp, #-20]	; 0xffffffec
   1b304:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b308:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1b30c:	add	r3, r2, r3
   1b310:	str	r3, [fp, #-24]	; 0xffffffe8
   1b314:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1b318:	ldrh	r3, [r3, #20]
   1b31c:	mov	r2, r3
   1b320:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b324:	cmp	r2, r3
   1b328:	movcs	r3, #1
   1b32c:	movcc	r3, #0
   1b330:	uxtb	r3, r3
   1b334:	str	r3, [fp, #-28]	; 0xffffffe4
   1b338:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b33c:	cmp	r3, #0
   1b340:	bne	1b34c <flatcc_verify_error_string@@Base+0x7ec>
   1b344:	mov	r3, #13
   1b348:	b	1b3c4 <flatcc_verify_error_string@@Base+0x864>
   1b34c:	mov	r3, #1
   1b350:	str	r3, [fp, #-32]	; 0xffffffe0
   1b354:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b358:	cmp	r3, #0
   1b35c:	bne	1b368 <flatcc_verify_error_string@@Base+0x808>
   1b360:	mov	r3, #14
   1b364:	b	1b3c4 <flatcc_verify_error_string@@Base+0x864>
   1b368:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1b36c:	ldr	r2, [r3, #16]
   1b370:	ldr	r3, [fp, #-8]
   1b374:	add	r3, r2, r3
   1b378:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b37c:	add	r3, r2, r3
   1b380:	str	r3, [fp, #-20]	; 0xffffffec
   1b384:	ldrh	r3, [fp, #4]
   1b388:	sub	r3, r3, #1
   1b38c:	mov	r2, r3
   1b390:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b394:	and	r3, r3, r2
   1b398:	cmp	r3, #0
   1b39c:	moveq	r3, #1
   1b3a0:	movne	r3, #0
   1b3a4:	uxtb	r3, r3
   1b3a8:	str	r3, [fp, #-36]	; 0xffffffdc
   1b3ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b3b0:	cmp	r3, #0
   1b3b4:	bne	1b3c0 <flatcc_verify_error_string@@Base+0x860>
   1b3b8:	mov	r3, #12
   1b3bc:	b	1b3c4 <flatcc_verify_error_string@@Base+0x864>
   1b3c0:	mov	r3, #0
   1b3c4:	mov	r0, r3
   1b3c8:	sub	sp, fp, #4
   1b3cc:	pop	{fp, pc}
   1b3d0:	push	{fp, lr}
   1b3d4:	add	fp, sp, #4
   1b3d8:	sub	sp, sp, #40	; 0x28
   1b3dc:	str	r0, [fp, #-32]	; 0xffffffe0
   1b3e0:	str	r2, [fp, #-40]	; 0xffffffd8
   1b3e4:	str	r3, [fp, #-44]	; 0xffffffd4
   1b3e8:	strh	r1, [fp, #-34]	; 0xffffffde
   1b3ec:	ldrh	r3, [fp, #-34]	; 0xffffffde
   1b3f0:	mov	r1, r3
   1b3f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b3f8:	bl	1b1a0 <flatcc_verify_error_string@@Base+0x640>
   1b3fc:	mov	r3, r0
   1b400:	strh	r3, [fp, #-6]
   1b404:	ldrh	r3, [fp, #-6]
   1b408:	cmp	r3, #0
   1b40c:	bne	1b438 <flatcc_verify_error_string@@Base+0x8d8>
   1b410:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b414:	mov	r2, #0
   1b418:	str	r2, [r3]
   1b41c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1b420:	cmp	r3, #0
   1b424:	beq	1b430 <flatcc_verify_error_string@@Base+0x8d0>
   1b428:	mov	r3, #4
   1b42c:	b	1b4f4 <flatcc_verify_error_string@@Base+0x994>
   1b430:	mov	r3, #0
   1b434:	b	1b4f4 <flatcc_verify_error_string@@Base+0x994>
   1b438:	ldrh	r3, [fp, #-6]
   1b43c:	str	r3, [fp, #-12]
   1b440:	ldr	r3, [fp, #-12]
   1b444:	add	r3, r3, #4
   1b448:	str	r3, [fp, #-16]
   1b44c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b450:	ldrh	r3, [r3, #20]
   1b454:	mov	r2, r3
   1b458:	ldr	r3, [fp, #-16]
   1b45c:	cmp	r2, r3
   1b460:	movcs	r3, #1
   1b464:	movcc	r3, #0
   1b468:	uxtb	r3, r3
   1b46c:	str	r3, [fp, #-20]	; 0xffffffec
   1b470:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b474:	cmp	r3, #0
   1b478:	bne	1b484 <flatcc_verify_error_string@@Base+0x924>
   1b47c:	mov	r3, #13
   1b480:	b	1b4f4 <flatcc_verify_error_string@@Base+0x994>
   1b484:	mov	r3, #1
   1b488:	str	r3, [fp, #-24]	; 0xffffffe8
   1b48c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b490:	cmp	r3, #0
   1b494:	bne	1b4a0 <flatcc_verify_error_string@@Base+0x940>
   1b498:	mov	r3, #14
   1b49c:	b	1b4f4 <flatcc_verify_error_string@@Base+0x994>
   1b4a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b4a4:	ldr	r3, [r3, #16]
   1b4a8:	ldr	r2, [fp, #-12]
   1b4ac:	add	r3, r2, r3
   1b4b0:	str	r3, [fp, #-12]
   1b4b4:	ldr	r3, [fp, #-12]
   1b4b8:	and	r3, r3, #3
   1b4bc:	cmp	r3, #0
   1b4c0:	moveq	r3, #1
   1b4c4:	movne	r3, #0
   1b4c8:	uxtb	r3, r3
   1b4cc:	str	r3, [fp, #-28]	; 0xffffffe4
   1b4d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b4d4:	cmp	r3, #0
   1b4d8:	bne	1b4e4 <flatcc_verify_error_string@@Base+0x984>
   1b4dc:	mov	r3, #12
   1b4e0:	b	1b4f4 <flatcc_verify_error_string@@Base+0x994>
   1b4e4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b4e8:	ldr	r2, [fp, #-12]
   1b4ec:	str	r2, [r3]
   1b4f0:	mov	r3, #0
   1b4f4:	mov	r0, r3
   1b4f8:	sub	sp, fp, #4
   1b4fc:	pop	{fp, pc}
   1b500:	push	{fp, lr}
   1b504:	add	fp, sp, #4
   1b508:	sub	sp, sp, #32
   1b50c:	str	r0, [fp, #-24]	; 0xffffffe8
   1b510:	str	r1, [fp, #-28]	; 0xffffffe4
   1b514:	str	r2, [fp, #-32]	; 0xffffffe0
   1b518:	str	r3, [fp, #-36]	; 0xffffffdc
   1b51c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1b520:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b524:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b528:	bl	1af70 <flatcc_verify_error_string@@Base+0x410>
   1b52c:	str	r0, [fp, #-8]
   1b530:	ldr	r3, [fp, #-8]
   1b534:	cmp	r3, #0
   1b538:	bne	1b544 <flatcc_verify_error_string@@Base+0x9e4>
   1b53c:	mov	r3, #17
   1b540:	b	1b5f0 <flatcc_verify_error_string@@Base+0xa90>
   1b544:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b548:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b54c:	add	r3, r2, r3
   1b550:	str	r3, [fp, #-32]	; 0xffffffe0
   1b554:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b558:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b55c:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1b560:	str	r0, [fp, #-12]
   1b564:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b568:	add	r3, r3, #4
   1b56c:	str	r3, [fp, #-32]	; 0xffffffe0
   1b570:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b574:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b578:	sub	r2, r2, r3
   1b57c:	ldr	r3, [fp, #-12]
   1b580:	add	r3, r3, #1
   1b584:	cmp	r2, r3
   1b588:	movcs	r3, #1
   1b58c:	movcc	r3, #0
   1b590:	uxtb	r3, r3
   1b594:	str	r3, [fp, #-16]
   1b598:	ldr	r3, [fp, #-16]
   1b59c:	cmp	r3, #0
   1b5a0:	bne	1b5ac <flatcc_verify_error_string@@Base+0xa4c>
   1b5a4:	mov	r3, #8
   1b5a8:	b	1b5f0 <flatcc_verify_error_string@@Base+0xa90>
   1b5ac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b5b0:	ldr	r3, [fp, #-12]
   1b5b4:	add	r3, r2, r3
   1b5b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b5bc:	add	r3, r2, r3
   1b5c0:	ldrb	r3, [r3]
   1b5c4:	cmp	r3, #0
   1b5c8:	moveq	r3, #1
   1b5cc:	movne	r3, #0
   1b5d0:	uxtb	r3, r3
   1b5d4:	str	r3, [fp, #-20]	; 0xffffffec
   1b5d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b5dc:	cmp	r3, #0
   1b5e0:	bne	1b5ec <flatcc_verify_error_string@@Base+0xa8c>
   1b5e4:	mov	r3, #7
   1b5e8:	b	1b5f0 <flatcc_verify_error_string@@Base+0xa90>
   1b5ec:	mov	r3, #0
   1b5f0:	mov	r0, r3
   1b5f4:	sub	sp, fp, #4
   1b5f8:	pop	{fp, pc}
   1b5fc:	push	{fp, lr}
   1b600:	add	fp, sp, #4
   1b604:	sub	sp, sp, #32
   1b608:	str	r0, [fp, #-24]	; 0xffffffe8
   1b60c:	str	r1, [fp, #-28]	; 0xffffffe4
   1b610:	str	r2, [fp, #-32]	; 0xffffffe0
   1b614:	str	r3, [fp, #-36]	; 0xffffffdc
   1b618:	ldrh	r3, [fp, #8]
   1b61c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1b620:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b624:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b628:	bl	1afe8 <flatcc_verify_error_string@@Base+0x488>
   1b62c:	str	r0, [fp, #-8]
   1b630:	ldr	r3, [fp, #-8]
   1b634:	cmp	r3, #0
   1b638:	bne	1b644 <flatcc_verify_error_string@@Base+0xae4>
   1b63c:	mov	r3, #16
   1b640:	b	1b6e4 <flatcc_verify_error_string@@Base+0xb84>
   1b644:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b648:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b64c:	add	r3, r2, r3
   1b650:	str	r3, [fp, #-32]	; 0xffffffe0
   1b654:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b658:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b65c:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1b660:	str	r0, [fp, #-12]
   1b664:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b668:	add	r3, r3, #4
   1b66c:	str	r3, [fp, #-32]	; 0xffffffe0
   1b670:	ldr	r2, [fp, #-12]
   1b674:	ldr	r3, [fp, #12]
   1b678:	cmp	r2, r3
   1b67c:	movls	r3, #1
   1b680:	movhi	r3, #0
   1b684:	uxtb	r3, r3
   1b688:	str	r3, [fp, #-16]
   1b68c:	ldr	r3, [fp, #-16]
   1b690:	cmp	r3, #0
   1b694:	bne	1b6a0 <flatcc_verify_error_string@@Base+0xb40>
   1b698:	mov	r3, #25
   1b69c:	b	1b6e4 <flatcc_verify_error_string@@Base+0xb84>
   1b6a0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b6a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b6a8:	sub	r2, r2, r3
   1b6ac:	ldr	r3, [fp, #-12]
   1b6b0:	ldr	r1, [fp, #4]
   1b6b4:	mul	r3, r1, r3
   1b6b8:	cmp	r2, r3
   1b6bc:	movcs	r3, #1
   1b6c0:	movcc	r3, #0
   1b6c4:	uxtb	r3, r3
   1b6c8:	str	r3, [fp, #-20]	; 0xffffffec
   1b6cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b6d0:	cmp	r3, #0
   1b6d4:	bne	1b6e0 <flatcc_verify_error_string@@Base+0xb80>
   1b6d8:	mov	r3, #26
   1b6dc:	b	1b6e4 <flatcc_verify_error_string@@Base+0xb84>
   1b6e0:	mov	r3, #0
   1b6e4:	mov	r0, r3
   1b6e8:	sub	sp, fp, #4
   1b6ec:	pop	{fp, pc}
   1b6f0:	push	{fp, lr}
   1b6f4:	add	fp, sp, #4
   1b6f8:	sub	sp, sp, #40	; 0x28
   1b6fc:	str	r0, [fp, #-16]
   1b700:	str	r1, [fp, #-20]	; 0xffffffec
   1b704:	str	r2, [fp, #-24]	; 0xffffffe8
   1b708:	str	r3, [fp, #-28]	; 0xffffffe4
   1b70c:	mvn	r3, #-1073741824	; 0xc0000000
   1b710:	str	r3, [sp, #8]
   1b714:	mov	r3, #4
   1b718:	str	r3, [sp, #4]
   1b71c:	mov	r3, #4
   1b720:	str	r3, [sp]
   1b724:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b728:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b72c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b730:	ldr	r0, [fp, #-16]
   1b734:	bl	1b5fc <flatcc_verify_error_string@@Base+0xa9c>
   1b738:	mov	r3, r0
   1b73c:	cmp	r3, #0
   1b740:	beq	1b778 <flatcc_verify_error_string@@Base+0xc18>
   1b744:	mvn	r3, #-1073741824	; 0xc0000000
   1b748:	str	r3, [sp, #8]
   1b74c:	mov	r3, #4
   1b750:	str	r3, [sp, #4]
   1b754:	mov	r3, #4
   1b758:	str	r3, [sp]
   1b75c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b760:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b764:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b768:	ldr	r0, [fp, #-16]
   1b76c:	bl	1b5fc <flatcc_verify_error_string@@Base+0xa9c>
   1b770:	mov	r3, r0
   1b774:	b	1b830 <flatcc_verify_error_string@@Base+0xcd0>
   1b778:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b77c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b780:	add	r3, r2, r3
   1b784:	str	r3, [fp, #-24]	; 0xffffffe8
   1b788:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b78c:	ldr	r0, [fp, #-16]
   1b790:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1b794:	str	r0, [fp, #-12]
   1b798:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b79c:	add	r3, r3, #4
   1b7a0:	str	r3, [fp, #-24]	; 0xffffffe8
   1b7a4:	mov	r3, #0
   1b7a8:	str	r3, [fp, #-8]
   1b7ac:	b	1b81c <flatcc_verify_error_string@@Base+0xcbc>
   1b7b0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b7b4:	ldr	r0, [fp, #-16]
   1b7b8:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1b7bc:	mov	r3, r0
   1b7c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b7c4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b7c8:	ldr	r0, [fp, #-16]
   1b7cc:	bl	1b500 <flatcc_verify_error_string@@Base+0x9a0>
   1b7d0:	mov	r3, r0
   1b7d4:	cmp	r3, #0
   1b7d8:	beq	1b804 <flatcc_verify_error_string@@Base+0xca4>
   1b7dc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b7e0:	ldr	r0, [fp, #-16]
   1b7e4:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1b7e8:	mov	r3, r0
   1b7ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b7f0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b7f4:	ldr	r0, [fp, #-16]
   1b7f8:	bl	1b500 <flatcc_verify_error_string@@Base+0x9a0>
   1b7fc:	mov	r3, r0
   1b800:	b	1b830 <flatcc_verify_error_string@@Base+0xcd0>
   1b804:	ldr	r3, [fp, #-8]
   1b808:	add	r3, r3, #1
   1b80c:	str	r3, [fp, #-8]
   1b810:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b814:	add	r3, r3, #4
   1b818:	str	r3, [fp, #-24]	; 0xffffffe8
   1b81c:	ldr	r2, [fp, #-8]
   1b820:	ldr	r3, [fp, #-12]
   1b824:	cmp	r2, r3
   1b828:	bcc	1b7b0 <flatcc_verify_error_string@@Base+0xc50>
   1b82c:	mov	r3, #0
   1b830:	mov	r0, r3
   1b834:	sub	sp, fp, #4
   1b838:	pop	{fp, pc}
   1b83c:	push	{r4, fp, lr}
   1b840:	add	fp, sp, #8
   1b844:	sub	sp, sp, #84	; 0x54
   1b848:	str	r0, [fp, #-80]	; 0xffffffb0
   1b84c:	str	r1, [fp, #-84]	; 0xffffffac
   1b850:	str	r2, [fp, #-88]	; 0xffffffa8
   1b854:	str	r3, [fp, #-92]	; 0xffffffa4
   1b858:	ldr	r3, [fp, #4]
   1b85c:	sub	r3, r3, #1
   1b860:	str	r3, [fp, #-68]	; 0xffffffbc
   1b864:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1b868:	str	r3, [fp, #-16]
   1b86c:	ldr	r3, [fp, #-16]
   1b870:	cmp	r3, #0
   1b874:	bne	1b880 <flatcc_verify_error_string@@Base+0xd20>
   1b878:	mov	r3, #3
   1b87c:	b	1ba88 <flatcc_verify_error_string@@Base+0xf28>
   1b880:	ldr	r2, [fp, #-92]	; 0xffffffa4
   1b884:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1b888:	ldr	r0, [fp, #-84]	; 0xffffffac
   1b88c:	bl	1af70 <flatcc_verify_error_string@@Base+0x410>
   1b890:	str	r0, [fp, #-20]	; 0xffffffec
   1b894:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b898:	cmp	r3, #0
   1b89c:	bne	1b8a8 <flatcc_verify_error_string@@Base+0xd48>
   1b8a0:	mov	r3, #15
   1b8a4:	b	1ba88 <flatcc_verify_error_string@@Base+0xf28>
   1b8a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b8ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b8b0:	add	r3, r2, r3
   1b8b4:	str	r3, [fp, #-60]	; 0xffffffc4
   1b8b8:	ldr	r4, [fp, #-60]	; 0xffffffc4
   1b8bc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1b8c0:	mov	r1, r3
   1b8c4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1b8c8:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1b8cc:	mov	r3, r0
   1b8d0:	sub	r3, r4, r3
   1b8d4:	str	r3, [fp, #-24]	; 0xffffffe8
   1b8d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b8dc:	cmp	r3, #0
   1b8e0:	blt	1b8fc <flatcc_verify_error_string@@Base+0xd9c>
   1b8e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b8e8:	and	r3, r3, #1
   1b8ec:	cmp	r3, #0
   1b8f0:	bne	1b8fc <flatcc_verify_error_string@@Base+0xd9c>
   1b8f4:	mov	r3, #1
   1b8f8:	b	1b900 <flatcc_verify_error_string@@Base+0xda0>
   1b8fc:	mov	r3, #0
   1b900:	str	r3, [fp, #-28]	; 0xffffffe4
   1b904:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b908:	cmp	r3, #0
   1b90c:	bne	1b918 <flatcc_verify_error_string@@Base+0xdb8>
   1b910:	mov	r3, #29
   1b914:	b	1ba88 <flatcc_verify_error_string@@Base+0xf28>
   1b918:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b91c:	add	r2, r3, #2
   1b920:	ldr	r3, [fp, #-84]	; 0xffffffac
   1b924:	cmp	r2, r3
   1b928:	movls	r3, #1
   1b92c:	movhi	r3, #0
   1b930:	uxtb	r3, r3
   1b934:	str	r3, [fp, #-32]	; 0xffffffe0
   1b938:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b93c:	cmp	r3, #0
   1b940:	bne	1b94c <flatcc_verify_error_string@@Base+0xdec>
   1b944:	mov	r3, #27
   1b948:	b	1ba88 <flatcc_verify_error_string@@Base+0xf28>
   1b94c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b950:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1b954:	bl	1af38 <flatcc_verify_error_string@@Base+0x3d8>
   1b958:	mov	r3, r0
   1b95c:	strh	r3, [fp, #-54]	; 0xffffffca
   1b960:	ldrh	r3, [fp, #-54]	; 0xffffffca
   1b964:	mov	r2, r3
   1b968:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b96c:	add	r3, r2, r3
   1b970:	str	r3, [fp, #-36]	; 0xffffffdc
   1b974:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1b978:	ldr	r3, [fp, #-84]	; 0xffffffac
   1b97c:	cmp	r2, r3
   1b980:	bhi	1b99c <flatcc_verify_error_string@@Base+0xe3c>
   1b984:	ldrh	r3, [fp, #-54]	; 0xffffffca
   1b988:	and	r3, r3, #1
   1b98c:	cmp	r3, #0
   1b990:	bne	1b99c <flatcc_verify_error_string@@Base+0xe3c>
   1b994:	mov	r3, #1
   1b998:	b	1b9a0 <flatcc_verify_error_string@@Base+0xe40>
   1b99c:	mov	r3, #0
   1b9a0:	str	r3, [fp, #-40]	; 0xffffffd8
   1b9a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1b9a8:	cmp	r3, #0
   1b9ac:	bne	1b9b8 <flatcc_verify_error_string@@Base+0xe58>
   1b9b0:	mov	r3, #30
   1b9b4:	b	1ba88 <flatcc_verify_error_string@@Base+0xf28>
   1b9b8:	mov	r3, #1
   1b9bc:	str	r3, [fp, #-44]	; 0xffffffd4
   1b9c0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b9c4:	cmp	r3, #0
   1b9c8:	bne	1b9d4 <flatcc_verify_error_string@@Base+0xe74>
   1b9cc:	mov	r3, #31
   1b9d0:	b	1ba88 <flatcc_verify_error_string@@Base+0xf28>
   1b9d4:	ldrh	r3, [fp, #-54]	; 0xffffffca
   1b9d8:	cmp	r3, #3
   1b9dc:	movhi	r3, #1
   1b9e0:	movls	r3, #0
   1b9e4:	uxtb	r3, r3
   1b9e8:	str	r3, [fp, #-48]	; 0xffffffd0
   1b9ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b9f0:	cmp	r3, #0
   1b9f4:	bne	1ba00 <flatcc_verify_error_string@@Base+0xea0>
   1b9f8:	mov	r3, #28
   1b9fc:	b	1ba88 <flatcc_verify_error_string@@Base+0xf28>
   1ba00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ba04:	add	r3, r3, #2
   1ba08:	mov	r1, r3
   1ba0c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1ba10:	bl	1af38 <flatcc_verify_error_string@@Base+0x3d8>
   1ba14:	mov	r3, r0
   1ba18:	strh	r3, [fp, #-56]	; 0xffffffc8
   1ba1c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1ba20:	ldr	r2, [fp, #-84]	; 0xffffffac
   1ba24:	sub	r3, r2, r3
   1ba28:	ldrh	r2, [fp, #-56]	; 0xffffffc8
   1ba2c:	cmp	r3, r2
   1ba30:	movcs	r3, #1
   1ba34:	movcc	r3, #0
   1ba38:	uxtb	r3, r3
   1ba3c:	str	r3, [fp, #-52]	; 0xffffffcc
   1ba40:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ba44:	cmp	r3, #0
   1ba48:	bne	1ba54 <flatcc_verify_error_string@@Base+0xef4>
   1ba4c:	mov	r3, #20
   1ba50:	b	1ba88 <flatcc_verify_error_string@@Base+0xf28>
   1ba54:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1ba58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ba5c:	add	r3, r2, r3
   1ba60:	str	r3, [fp, #-64]	; 0xffffffc0
   1ba64:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1ba68:	str	r3, [fp, #-76]	; 0xffffffb4
   1ba6c:	ldr	r3, [fp, #-84]	; 0xffffffac
   1ba70:	str	r3, [fp, #-72]	; 0xffffffb8
   1ba74:	sub	r2, fp, #76	; 0x4c
   1ba78:	ldr	r3, [fp, #8]
   1ba7c:	mov	r0, r2
   1ba80:	blx	r3
   1ba84:	mov	r3, r0
   1ba88:	mov	r0, r3
   1ba8c:	sub	sp, fp, #8
   1ba90:	pop	{r4, fp, pc}
   1ba94:	push	{fp, lr}
   1ba98:	add	fp, sp, #4
   1ba9c:	sub	sp, sp, #48	; 0x30
   1baa0:	str	r0, [fp, #-24]	; 0xffffffe8
   1baa4:	str	r1, [fp, #-28]	; 0xffffffe4
   1baa8:	str	r2, [fp, #-32]	; 0xffffffe0
   1baac:	str	r3, [fp, #-36]	; 0xffffffdc
   1bab0:	ldr	r3, [fp, #4]
   1bab4:	sub	r2, r3, #1
   1bab8:	str	r2, [fp, #4]
   1babc:	cmp	r3, #0
   1bac0:	movgt	r3, #1
   1bac4:	movle	r3, #0
   1bac8:	uxtb	r3, r3
   1bacc:	str	r3, [fp, #-12]
   1bad0:	ldr	r3, [fp, #-12]
   1bad4:	cmp	r3, #0
   1bad8:	bne	1bae4 <flatcc_verify_error_string@@Base+0xf84>
   1badc:	mov	r3, #3
   1bae0:	b	1bc30 <flatcc_verify_error_string@@Base+0x10d0>
   1bae4:	mvn	r3, #-1073741824	; 0xc0000000
   1bae8:	str	r3, [sp, #8]
   1baec:	mov	r3, #4
   1baf0:	str	r3, [sp, #4]
   1baf4:	mov	r3, #4
   1baf8:	str	r3, [sp]
   1bafc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1bb00:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bb04:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1bb08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bb0c:	bl	1b5fc <flatcc_verify_error_string@@Base+0xa9c>
   1bb10:	mov	r3, r0
   1bb14:	cmp	r3, #0
   1bb18:	beq	1bb50 <flatcc_verify_error_string@@Base+0xff0>
   1bb1c:	mvn	r3, #-1073741824	; 0xc0000000
   1bb20:	str	r3, [sp, #8]
   1bb24:	mov	r3, #4
   1bb28:	str	r3, [sp, #4]
   1bb2c:	mov	r3, #4
   1bb30:	str	r3, [sp]
   1bb34:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1bb38:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bb3c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1bb40:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bb44:	bl	1b5fc <flatcc_verify_error_string@@Base+0xa9c>
   1bb48:	mov	r3, r0
   1bb4c:	b	1bc30 <flatcc_verify_error_string@@Base+0x10d0>
   1bb50:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bb54:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1bb58:	add	r3, r2, r3
   1bb5c:	str	r3, [fp, #-32]	; 0xffffffe0
   1bb60:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1bb64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bb68:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1bb6c:	str	r0, [fp, #-16]
   1bb70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bb74:	add	r3, r3, #4
   1bb78:	str	r3, [fp, #-32]	; 0xffffffe0
   1bb7c:	mov	r3, #0
   1bb80:	str	r3, [fp, #-8]
   1bb84:	b	1bc1c <flatcc_verify_error_string@@Base+0x10bc>
   1bb88:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1bb8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bb90:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1bb94:	mov	r2, r0
   1bb98:	ldr	r3, [fp, #8]
   1bb9c:	str	r3, [sp, #4]
   1bba0:	ldr	r3, [fp, #4]
   1bba4:	str	r3, [sp]
   1bba8:	mov	r3, r2
   1bbac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bbb0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1bbb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bbb8:	bl	1b83c <flatcc_verify_error_string@@Base+0xcdc>
   1bbbc:	mov	r3, r0
   1bbc0:	cmp	r3, #0
   1bbc4:	beq	1bc04 <flatcc_verify_error_string@@Base+0x10a4>
   1bbc8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1bbcc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bbd0:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1bbd4:	mov	r2, r0
   1bbd8:	ldr	r3, [fp, #8]
   1bbdc:	str	r3, [sp, #4]
   1bbe0:	ldr	r3, [fp, #4]
   1bbe4:	str	r3, [sp]
   1bbe8:	mov	r3, r2
   1bbec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bbf0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1bbf4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bbf8:	bl	1b83c <flatcc_verify_error_string@@Base+0xcdc>
   1bbfc:	mov	r3, r0
   1bc00:	b	1bc30 <flatcc_verify_error_string@@Base+0x10d0>
   1bc04:	ldr	r3, [fp, #-8]
   1bc08:	add	r3, r3, #1
   1bc0c:	str	r3, [fp, #-8]
   1bc10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bc14:	add	r3, r3, #4
   1bc18:	str	r3, [fp, #-32]	; 0xffffffe0
   1bc1c:	ldr	r2, [fp, #-8]
   1bc20:	ldr	r3, [fp, #-16]
   1bc24:	cmp	r2, r3
   1bc28:	bcc	1bb88 <flatcc_verify_error_string@@Base+0x1028>
   1bc2c:	mov	r3, #0
   1bc30:	mov	r0, r3
   1bc34:	sub	sp, fp, #4
   1bc38:	pop	{fp, pc}
   1bc3c:	push	{fp, lr}
   1bc40:	add	fp, sp, #4
   1bc44:	sub	sp, sp, #88	; 0x58
   1bc48:	str	r0, [fp, #-64]	; 0xffffffc0
   1bc4c:	str	r1, [fp, #-68]	; 0xffffffbc
   1bc50:	str	r2, [fp, #-72]	; 0xffffffb8
   1bc54:	str	r3, [fp, #-76]	; 0xffffffb4
   1bc58:	ldr	r3, [fp, #12]
   1bc5c:	sub	r2, r3, #1
   1bc60:	str	r2, [fp, #12]
   1bc64:	cmp	r3, #0
   1bc68:	movgt	r3, #1
   1bc6c:	movle	r3, #0
   1bc70:	uxtb	r3, r3
   1bc74:	str	r3, [fp, #-12]
   1bc78:	ldr	r3, [fp, #-12]
   1bc7c:	cmp	r3, #0
   1bc80:	bne	1bc8c <flatcc_verify_error_string@@Base+0x112c>
   1bc84:	mov	r3, #3
   1bc88:	b	1be88 <flatcc_verify_error_string@@Base+0x1328>
   1bc8c:	mvn	r3, #-1073741824	; 0xc0000000
   1bc90:	str	r3, [sp, #8]
   1bc94:	mov	r3, #4
   1bc98:	str	r3, [sp, #4]
   1bc9c:	mov	r3, #4
   1bca0:	str	r3, [sp]
   1bca4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1bca8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1bcac:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1bcb0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1bcb4:	bl	1b5fc <flatcc_verify_error_string@@Base+0xa9c>
   1bcb8:	mov	r3, r0
   1bcbc:	cmp	r3, #0
   1bcc0:	beq	1bcf8 <flatcc_verify_error_string@@Base+0x1198>
   1bcc4:	mvn	r3, #-1073741824	; 0xc0000000
   1bcc8:	str	r3, [sp, #8]
   1bccc:	mov	r3, #4
   1bcd0:	str	r3, [sp, #4]
   1bcd4:	mov	r3, #4
   1bcd8:	str	r3, [sp]
   1bcdc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1bce0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1bce4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1bce8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1bcec:	bl	1b5fc <flatcc_verify_error_string@@Base+0xa9c>
   1bcf0:	mov	r3, r0
   1bcf4:	b	1be88 <flatcc_verify_error_string@@Base+0x1328>
   1bcf8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1bcfc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1bd00:	add	r3, r2, r3
   1bd04:	str	r3, [fp, #-72]	; 0xffffffb8
   1bd08:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1bd0c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1bd10:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1bd14:	str	r0, [fp, #-16]
   1bd18:	ldr	r2, [fp, #-16]
   1bd1c:	ldr	r3, [fp, #4]
   1bd20:	cmp	r2, r3
   1bd24:	moveq	r3, #1
   1bd28:	movne	r3, #0
   1bd2c:	uxtb	r3, r3
   1bd30:	str	r3, [fp, #-20]	; 0xffffffec
   1bd34:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bd38:	cmp	r3, #0
   1bd3c:	bne	1bd48 <flatcc_verify_error_string@@Base+0x11e8>
   1bd40:	mov	r3, #34	; 0x22
   1bd44:	b	1be88 <flatcc_verify_error_string@@Base+0x1328>
   1bd48:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1bd4c:	add	r3, r3, #4
   1bd50:	str	r3, [fp, #-72]	; 0xffffffb8
   1bd54:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1bd58:	str	r3, [fp, #-56]	; 0xffffffc8
   1bd5c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1bd60:	str	r3, [fp, #-52]	; 0xffffffcc
   1bd64:	ldr	r3, [fp, #12]
   1bd68:	str	r3, [fp, #-48]	; 0xffffffd0
   1bd6c:	mov	r3, #0
   1bd70:	str	r3, [fp, #-8]
   1bd74:	b	1be74 <flatcc_verify_error_string@@Base+0x1314>
   1bd78:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1bd7c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1bd80:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1bd84:	str	r0, [fp, #-24]	; 0xffffffe8
   1bd88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bd8c:	cmp	r3, #0
   1bd90:	bne	1bdcc <flatcc_verify_error_string@@Base+0x126c>
   1bd94:	ldr	r2, [fp, #8]
   1bd98:	ldr	r3, [fp, #-8]
   1bd9c:	add	r3, r2, r3
   1bda0:	ldrb	r3, [r3]
   1bda4:	cmp	r3, #0
   1bda8:	moveq	r3, #1
   1bdac:	movne	r3, #0
   1bdb0:	uxtb	r3, r3
   1bdb4:	str	r3, [fp, #-32]	; 0xffffffe0
   1bdb8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bdbc:	cmp	r3, #0
   1bdc0:	bne	1be5c <flatcc_verify_error_string@@Base+0x12fc>
   1bdc4:	mov	r3, #32
   1bdc8:	b	1be88 <flatcc_verify_error_string@@Base+0x1328>
   1bdcc:	ldr	r2, [fp, #8]
   1bdd0:	ldr	r3, [fp, #-8]
   1bdd4:	add	r3, r2, r3
   1bdd8:	ldrb	r3, [r3]
   1bddc:	cmp	r3, #0
   1bde0:	movne	r3, #1
   1bde4:	moveq	r3, #0
   1bde8:	uxtb	r3, r3
   1bdec:	str	r3, [fp, #-28]	; 0xffffffe4
   1bdf0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bdf4:	cmp	r3, #0
   1bdf8:	bne	1be04 <flatcc_verify_error_string@@Base+0x12a4>
   1bdfc:	mov	r3, #33	; 0x21
   1be00:	b	1be88 <flatcc_verify_error_string@@Base+0x1328>
   1be04:	ldr	r2, [fp, #8]
   1be08:	ldr	r3, [fp, #-8]
   1be0c:	add	r3, r2, r3
   1be10:	ldrb	r3, [r3]
   1be14:	strb	r3, [fp, #-44]	; 0xffffffd4
   1be18:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1be1c:	str	r3, [fp, #-40]	; 0xffffffd8
   1be20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1be24:	str	r3, [fp, #-36]	; 0xffffffdc
   1be28:	sub	r2, fp, #56	; 0x38
   1be2c:	ldr	r3, [fp, #16]
   1be30:	mov	r0, r2
   1be34:	blx	r3
   1be38:	mov	r3, r0
   1be3c:	cmp	r3, #0
   1be40:	beq	1be5c <flatcc_verify_error_string@@Base+0x12fc>
   1be44:	sub	r2, fp, #56	; 0x38
   1be48:	ldr	r3, [fp, #16]
   1be4c:	mov	r0, r2
   1be50:	blx	r3
   1be54:	mov	r3, r0
   1be58:	b	1be88 <flatcc_verify_error_string@@Base+0x1328>
   1be5c:	ldr	r3, [fp, #-8]
   1be60:	add	r3, r3, #1
   1be64:	str	r3, [fp, #-8]
   1be68:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1be6c:	add	r3, r3, #4
   1be70:	str	r3, [fp, #-72]	; 0xffffffb8
   1be74:	ldr	r2, [fp, #-8]
   1be78:	ldr	r3, [fp, #-16]
   1be7c:	cmp	r2, r3
   1be80:	bcc	1bd78 <flatcc_verify_error_string@@Base+0x1218>
   1be84:	mov	r3, #0
   1be88:	mov	r0, r3
   1be8c:	sub	sp, fp, #4
   1be90:	pop	{fp, pc}

0001be94 <flatcc_verify_field@@Base>:
   1be94:	push	{fp, lr}
   1be98:	add	fp, sp, #4
   1be9c:	sub	sp, sp, #24
   1bea0:	str	r0, [fp, #-8]
   1bea4:	str	r2, [fp, #-16]
   1bea8:	strh	r1, [fp, #-10]
   1beac:	strh	r3, [fp, #-12]
   1beb0:	ldrh	r1, [fp, #-10]
   1beb4:	ldrh	r3, [fp, #-12]
   1beb8:	str	r3, [sp]
   1bebc:	ldr	r3, [fp, #-16]
   1bec0:	mov	r2, #0
   1bec4:	ldr	r0, [fp, #-8]
   1bec8:	bl	1b27c <flatcc_verify_error_string@@Base+0x71c>
   1becc:	mov	r3, r0
   1bed0:	cmp	r3, #0
   1bed4:	beq	1befc <flatcc_verify_field@@Base+0x68>
   1bed8:	ldrh	r1, [fp, #-10]
   1bedc:	ldrh	r3, [fp, #-12]
   1bee0:	str	r3, [sp]
   1bee4:	ldr	r3, [fp, #-16]
   1bee8:	mov	r2, #0
   1beec:	ldr	r0, [fp, #-8]
   1bef0:	bl	1b27c <flatcc_verify_error_string@@Base+0x71c>
   1bef4:	mov	r3, r0
   1bef8:	b	1bf00 <flatcc_verify_field@@Base+0x6c>
   1befc:	mov	r3, #0
   1bf00:	mov	r0, r3
   1bf04:	sub	sp, fp, #4
   1bf08:	pop	{fp, pc}

0001bf0c <flatcc_verify_string_field@@Base>:
   1bf0c:	push	{r4, r5, r6, fp, lr}
   1bf10:	add	fp, sp, #16
   1bf14:	sub	sp, sp, #28
   1bf18:	str	r0, [fp, #-32]	; 0xffffffe0
   1bf1c:	mov	r3, r1
   1bf20:	str	r2, [fp, #-40]	; 0xffffffd8
   1bf24:	strh	r3, [fp, #-34]	; 0xffffffde
   1bf28:	sub	r3, fp, #28
   1bf2c:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1bf30:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1bf34:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1bf38:	bl	1b3d0 <flatcc_verify_error_string@@Base+0x870>
   1bf3c:	str	r0, [fp, #-24]	; 0xffffffe8
   1bf40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bf44:	cmp	r3, #0
   1bf48:	bne	1bf58 <flatcc_verify_string_field@@Base+0x4c>
   1bf4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bf50:	cmp	r3, #0
   1bf54:	bne	1bf60 <flatcc_verify_string_field@@Base+0x54>
   1bf58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bf5c:	b	1bfa4 <flatcc_verify_string_field@@Base+0x98>
   1bf60:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bf64:	ldr	r4, [r3]
   1bf68:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bf6c:	ldr	r5, [r3, #4]
   1bf70:	ldr	r6, [fp, #-28]	; 0xffffffe4
   1bf74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bf78:	ldr	r3, [r3]
   1bf7c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1bf80:	mov	r1, r2
   1bf84:	mov	r0, r3
   1bf88:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1bf8c:	mov	r3, r0
   1bf90:	mov	r2, r6
   1bf94:	mov	r1, r5
   1bf98:	mov	r0, r4
   1bf9c:	bl	1b500 <flatcc_verify_error_string@@Base+0x9a0>
   1bfa0:	mov	r3, r0
   1bfa4:	mov	r0, r3
   1bfa8:	sub	sp, fp, #16
   1bfac:	pop	{r4, r5, r6, fp, pc}

0001bfb0 <flatcc_verify_vector_field@@Base>:
   1bfb0:	push	{r4, r5, r6, fp, lr}
   1bfb4:	add	fp, sp, #16
   1bfb8:	sub	sp, sp, #44	; 0x2c
   1bfbc:	str	r0, [fp, #-32]	; 0xffffffe0
   1bfc0:	str	r2, [fp, #-40]	; 0xffffffd8
   1bfc4:	str	r3, [fp, #-44]	; 0xffffffd4
   1bfc8:	strh	r1, [fp, #-34]	; 0xffffffde
   1bfcc:	sub	r3, fp, #28
   1bfd0:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1bfd4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1bfd8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1bfdc:	bl	1b3d0 <flatcc_verify_error_string@@Base+0x870>
   1bfe0:	str	r0, [fp, #-24]	; 0xffffffe8
   1bfe4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bfe8:	cmp	r3, #0
   1bfec:	bne	1bffc <flatcc_verify_vector_field@@Base+0x4c>
   1bff0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bff4:	cmp	r3, #0
   1bff8:	bne	1c004 <flatcc_verify_vector_field@@Base+0x54>
   1bffc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c000:	b	1c064 <flatcc_verify_vector_field@@Base+0xb4>
   1c004:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c008:	ldr	r4, [r3]
   1c00c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c010:	ldr	r5, [r3, #4]
   1c014:	ldr	r6, [fp, #-28]	; 0xffffffe4
   1c018:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c01c:	ldr	r3, [r3]
   1c020:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c024:	mov	r1, r2
   1c028:	mov	r0, r3
   1c02c:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1c030:	mov	r2, r0
   1c034:	ldr	r3, [fp, #8]
   1c038:	str	r3, [sp, #8]
   1c03c:	ldrh	r3, [fp, #4]
   1c040:	str	r3, [sp, #4]
   1c044:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1c048:	str	r3, [sp]
   1c04c:	mov	r3, r2
   1c050:	mov	r2, r6
   1c054:	mov	r1, r5
   1c058:	mov	r0, r4
   1c05c:	bl	1b5fc <flatcc_verify_error_string@@Base+0xa9c>
   1c060:	mov	r3, r0
   1c064:	mov	r0, r3
   1c068:	sub	sp, fp, #16
   1c06c:	pop	{r4, r5, r6, fp, pc}

0001c070 <flatcc_verify_string_vector_field@@Base>:
   1c070:	push	{r4, r5, r6, fp, lr}
   1c074:	add	fp, sp, #16
   1c078:	sub	sp, sp, #28
   1c07c:	str	r0, [fp, #-32]	; 0xffffffe0
   1c080:	mov	r3, r1
   1c084:	str	r2, [fp, #-40]	; 0xffffffd8
   1c088:	strh	r3, [fp, #-34]	; 0xffffffde
   1c08c:	sub	r3, fp, #28
   1c090:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1c094:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c098:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c09c:	bl	1b3d0 <flatcc_verify_error_string@@Base+0x870>
   1c0a0:	str	r0, [fp, #-24]	; 0xffffffe8
   1c0a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c0a8:	cmp	r3, #0
   1c0ac:	bne	1c0bc <flatcc_verify_string_vector_field@@Base+0x4c>
   1c0b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c0b4:	cmp	r3, #0
   1c0b8:	bne	1c0c4 <flatcc_verify_string_vector_field@@Base+0x54>
   1c0bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c0c0:	b	1c108 <flatcc_verify_string_vector_field@@Base+0x98>
   1c0c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c0c8:	ldr	r4, [r3]
   1c0cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c0d0:	ldr	r5, [r3, #4]
   1c0d4:	ldr	r6, [fp, #-28]	; 0xffffffe4
   1c0d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c0dc:	ldr	r3, [r3]
   1c0e0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c0e4:	mov	r1, r2
   1c0e8:	mov	r0, r3
   1c0ec:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1c0f0:	mov	r3, r0
   1c0f4:	mov	r2, r6
   1c0f8:	mov	r1, r5
   1c0fc:	mov	r0, r4
   1c100:	bl	1b6f0 <flatcc_verify_error_string@@Base+0xb90>
   1c104:	mov	r3, r0
   1c108:	mov	r0, r3
   1c10c:	sub	sp, fp, #16
   1c110:	pop	{r4, r5, r6, fp, pc}

0001c114 <flatcc_verify_table_field@@Base>:
   1c114:	push	{r4, r5, r6, fp, lr}
   1c118:	add	fp, sp, #16
   1c11c:	sub	sp, sp, #36	; 0x24
   1c120:	str	r0, [fp, #-32]	; 0xffffffe0
   1c124:	str	r2, [fp, #-40]	; 0xffffffd8
   1c128:	str	r3, [fp, #-44]	; 0xffffffd4
   1c12c:	strh	r1, [fp, #-34]	; 0xffffffde
   1c130:	sub	r3, fp, #28
   1c134:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1c138:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c13c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c140:	bl	1b3d0 <flatcc_verify_error_string@@Base+0x870>
   1c144:	str	r0, [fp, #-24]	; 0xffffffe8
   1c148:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c14c:	cmp	r3, #0
   1c150:	bne	1c160 <flatcc_verify_table_field@@Base+0x4c>
   1c154:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c158:	cmp	r3, #0
   1c15c:	bne	1c168 <flatcc_verify_table_field@@Base+0x54>
   1c160:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c164:	b	1c1c4 <flatcc_verify_table_field@@Base+0xb0>
   1c168:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c16c:	ldr	r4, [r3]
   1c170:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c174:	ldr	r5, [r3, #4]
   1c178:	ldr	r6, [fp, #-28]	; 0xffffffe4
   1c17c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c180:	ldr	r3, [r3]
   1c184:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c188:	mov	r1, r2
   1c18c:	mov	r0, r3
   1c190:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1c194:	mov	r1, r0
   1c198:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c19c:	ldr	r3, [r3, #8]
   1c1a0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1c1a4:	str	r2, [sp, #4]
   1c1a8:	str	r3, [sp]
   1c1ac:	mov	r3, r1
   1c1b0:	mov	r2, r6
   1c1b4:	mov	r1, r5
   1c1b8:	mov	r0, r4
   1c1bc:	bl	1b83c <flatcc_verify_error_string@@Base+0xcdc>
   1c1c0:	mov	r3, r0
   1c1c4:	mov	r0, r3
   1c1c8:	sub	sp, fp, #16
   1c1cc:	pop	{r4, r5, r6, fp, pc}

0001c1d0 <flatcc_verify_table_vector_field@@Base>:
   1c1d0:	push	{r4, r5, r6, fp, lr}
   1c1d4:	add	fp, sp, #16
   1c1d8:	sub	sp, sp, #36	; 0x24
   1c1dc:	str	r0, [fp, #-32]	; 0xffffffe0
   1c1e0:	str	r2, [fp, #-40]	; 0xffffffd8
   1c1e4:	str	r3, [fp, #-44]	; 0xffffffd4
   1c1e8:	strh	r1, [fp, #-34]	; 0xffffffde
   1c1ec:	sub	r3, fp, #28
   1c1f0:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1c1f4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c1f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c1fc:	bl	1b3d0 <flatcc_verify_error_string@@Base+0x870>
   1c200:	str	r0, [fp, #-24]	; 0xffffffe8
   1c204:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c208:	cmp	r3, #0
   1c20c:	bne	1c21c <flatcc_verify_table_vector_field@@Base+0x4c>
   1c210:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c214:	cmp	r3, #0
   1c218:	bne	1c224 <flatcc_verify_table_vector_field@@Base+0x54>
   1c21c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c220:	b	1c280 <flatcc_verify_table_vector_field@@Base+0xb0>
   1c224:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c228:	ldr	r4, [r3]
   1c22c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c230:	ldr	r5, [r3, #4]
   1c234:	ldr	r6, [fp, #-28]	; 0xffffffe4
   1c238:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c23c:	ldr	r3, [r3]
   1c240:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c244:	mov	r1, r2
   1c248:	mov	r0, r3
   1c24c:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1c250:	mov	r1, r0
   1c254:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c258:	ldr	r3, [r3, #8]
   1c25c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1c260:	str	r2, [sp, #4]
   1c264:	str	r3, [sp]
   1c268:	mov	r3, r1
   1c26c:	mov	r2, r6
   1c270:	mov	r1, r5
   1c274:	mov	r0, r4
   1c278:	bl	1ba94 <flatcc_verify_error_string@@Base+0xf34>
   1c27c:	mov	r3, r0
   1c280:	mov	r0, r3
   1c284:	sub	sp, fp, #16
   1c288:	pop	{r4, r5, r6, fp, pc}

0001c28c <flatcc_verify_union_table@@Base>:
   1c28c:	push	{fp, lr}
   1c290:	add	fp, sp, #4
   1c294:	sub	sp, sp, #16
   1c298:	str	r0, [fp, #-8]
   1c29c:	str	r1, [fp, #-12]
   1c2a0:	ldr	r3, [fp, #-8]
   1c2a4:	ldr	r0, [r3]
   1c2a8:	ldr	r3, [fp, #-8]
   1c2ac:	ldr	r1, [r3, #4]
   1c2b0:	ldr	r3, [fp, #-8]
   1c2b4:	ldr	ip, [r3, #16]
   1c2b8:	ldr	r3, [fp, #-8]
   1c2bc:	ldr	lr, [r3, #20]
   1c2c0:	ldr	r3, [fp, #-8]
   1c2c4:	ldr	r3, [r3, #8]
   1c2c8:	ldr	r2, [fp, #-12]
   1c2cc:	str	r2, [sp, #4]
   1c2d0:	str	r3, [sp]
   1c2d4:	mov	r3, lr
   1c2d8:	mov	r2, ip
   1c2dc:	bl	1b83c <flatcc_verify_error_string@@Base+0xcdc>
   1c2e0:	mov	r3, r0
   1c2e4:	mov	r0, r3
   1c2e8:	sub	sp, fp, #4
   1c2ec:	pop	{fp, pc}

0001c2f0 <flatcc_verify_union_struct@@Base>:
   1c2f0:	push	{fp, lr}
   1c2f4:	add	fp, sp, #4
   1c2f8:	sub	sp, sp, #24
   1c2fc:	str	r0, [fp, #-8]
   1c300:	str	r1, [fp, #-12]
   1c304:	mov	r3, r2
   1c308:	strh	r3, [fp, #-14]
   1c30c:	ldr	r3, [fp, #-8]
   1c310:	ldr	r0, [r3, #4]
   1c314:	ldr	r3, [fp, #-8]
   1c318:	ldr	r1, [r3, #16]
   1c31c:	ldr	r3, [fp, #-8]
   1c320:	ldr	r2, [r3, #20]
   1c324:	ldrh	r3, [fp, #-14]
   1c328:	str	r3, [sp]
   1c32c:	ldr	r3, [fp, #-12]
   1c330:	bl	1b088 <flatcc_verify_error_string@@Base+0x528>
   1c334:	mov	r3, r0
   1c338:	mov	r0, r3
   1c33c:	sub	sp, fp, #4
   1c340:	pop	{fp, pc}

0001c344 <flatcc_verify_union_string@@Base>:
   1c344:	push	{fp, lr}
   1c348:	add	fp, sp, #4
   1c34c:	sub	sp, sp, #8
   1c350:	str	r0, [fp, #-8]
   1c354:	ldr	r3, [fp, #-8]
   1c358:	ldr	r0, [r3]
   1c35c:	ldr	r3, [fp, #-8]
   1c360:	ldr	r1, [r3, #4]
   1c364:	ldr	r3, [fp, #-8]
   1c368:	ldr	r2, [r3, #16]
   1c36c:	ldr	r3, [fp, #-8]
   1c370:	ldr	r3, [r3, #20]
   1c374:	bl	1b500 <flatcc_verify_error_string@@Base+0x9a0>
   1c378:	mov	r3, r0
   1c37c:	mov	r0, r3
   1c380:	sub	sp, fp, #4
   1c384:	pop	{fp, pc}

0001c388 <flatcc_verify_buffer_header@@Base>:
   1c388:	push	{fp, lr}
   1c38c:	add	fp, sp, #4
   1c390:	sub	sp, sp, #40	; 0x28
   1c394:	str	r0, [fp, #-32]	; 0xffffffe0
   1c398:	str	r1, [fp, #-36]	; 0xffffffdc
   1c39c:	str	r2, [fp, #-40]	; 0xffffffd8
   1c3a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c3a4:	and	r3, r3, #3
   1c3a8:	cmp	r3, #0
   1c3ac:	moveq	r3, #1
   1c3b0:	movne	r3, #0
   1c3b4:	uxtb	r3, r3
   1c3b8:	str	r3, [fp, #-8]
   1c3bc:	ldr	r3, [fp, #-8]
   1c3c0:	cmp	r3, #0
   1c3c4:	bne	1c3d0 <flatcc_verify_buffer_header@@Base+0x48>
   1c3c8:	mov	r3, #5
   1c3cc:	b	1c494 <flatcc_verify_buffer_header@@Base+0x10c>
   1c3d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c3d4:	cmn	r3, #9
   1c3d8:	movls	r3, #1
   1c3dc:	movhi	r3, #0
   1c3e0:	uxtb	r3, r3
   1c3e4:	str	r3, [fp, #-12]
   1c3e8:	ldr	r3, [fp, #-12]
   1c3ec:	cmp	r3, #0
   1c3f0:	bne	1c3fc <flatcc_verify_buffer_header@@Base+0x74>
   1c3f4:	mov	r3, #6
   1c3f8:	b	1c494 <flatcc_verify_buffer_header@@Base+0x10c>
   1c3fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c400:	cmp	r3, #7
   1c404:	movhi	r3, #1
   1c408:	movls	r3, #0
   1c40c:	uxtb	r3, r3
   1c410:	str	r3, [fp, #-16]
   1c414:	ldr	r3, [fp, #-16]
   1c418:	cmp	r3, #0
   1c41c:	bne	1c428 <flatcc_verify_buffer_header@@Base+0xa0>
   1c420:	mov	r3, #1
   1c424:	b	1c494 <flatcc_verify_buffer_header@@Base+0x10c>
   1c428:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1c42c:	cmp	r3, #0
   1c430:	beq	1c490 <flatcc_verify_buffer_header@@Base+0x108>
   1c434:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1c438:	bl	1aeb8 <flatcc_verify_error_string@@Base+0x358>
   1c43c:	str	r0, [fp, #-20]	; 0xffffffec
   1c440:	mov	r1, #4
   1c444:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c448:	bl	1af00 <flatcc_verify_error_string@@Base+0x3a0>
   1c44c:	str	r0, [fp, #-24]	; 0xffffffe8
   1c450:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c454:	cmp	r3, #0
   1c458:	beq	1c46c <flatcc_verify_buffer_header@@Base+0xe4>
   1c45c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c460:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c464:	cmp	r2, r3
   1c468:	bne	1c474 <flatcc_verify_buffer_header@@Base+0xec>
   1c46c:	mov	r3, #1
   1c470:	b	1c478 <flatcc_verify_buffer_header@@Base+0xf0>
   1c474:	mov	r3, #0
   1c478:	str	r3, [fp, #-28]	; 0xffffffe4
   1c47c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c480:	cmp	r3, #0
   1c484:	bne	1c490 <flatcc_verify_buffer_header@@Base+0x108>
   1c488:	mov	r3, #2
   1c48c:	b	1c494 <flatcc_verify_buffer_header@@Base+0x10c>
   1c490:	mov	r3, #0
   1c494:	mov	r0, r3
   1c498:	sub	sp, fp, #4
   1c49c:	pop	{fp, pc}

0001c4a0 <flatcc_verify_typed_buffer_header@@Base>:
   1c4a0:	push	{fp, lr}
   1c4a4:	add	fp, sp, #4
   1c4a8:	sub	sp, sp, #40	; 0x28
   1c4ac:	str	r0, [fp, #-32]	; 0xffffffe0
   1c4b0:	str	r1, [fp, #-36]	; 0xffffffdc
   1c4b4:	str	r2, [fp, #-40]	; 0xffffffd8
   1c4b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c4bc:	and	r3, r3, #3
   1c4c0:	cmp	r3, #0
   1c4c4:	moveq	r3, #1
   1c4c8:	movne	r3, #0
   1c4cc:	uxtb	r3, r3
   1c4d0:	str	r3, [fp, #-8]
   1c4d4:	ldr	r3, [fp, #-8]
   1c4d8:	cmp	r3, #0
   1c4dc:	bne	1c4e8 <flatcc_verify_typed_buffer_header@@Base+0x48>
   1c4e0:	mov	r3, #5
   1c4e4:	b	1c5a8 <flatcc_verify_typed_buffer_header@@Base+0x108>
   1c4e8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c4ec:	cmn	r3, #9
   1c4f0:	movls	r3, #1
   1c4f4:	movhi	r3, #0
   1c4f8:	uxtb	r3, r3
   1c4fc:	str	r3, [fp, #-12]
   1c500:	ldr	r3, [fp, #-12]
   1c504:	cmp	r3, #0
   1c508:	bne	1c514 <flatcc_verify_typed_buffer_header@@Base+0x74>
   1c50c:	mov	r3, #6
   1c510:	b	1c5a8 <flatcc_verify_typed_buffer_header@@Base+0x108>
   1c514:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c518:	cmp	r3, #7
   1c51c:	movhi	r3, #1
   1c520:	movls	r3, #0
   1c524:	uxtb	r3, r3
   1c528:	str	r3, [fp, #-16]
   1c52c:	ldr	r3, [fp, #-16]
   1c530:	cmp	r3, #0
   1c534:	bne	1c540 <flatcc_verify_typed_buffer_header@@Base+0xa0>
   1c538:	mov	r3, #1
   1c53c:	b	1c5a8 <flatcc_verify_typed_buffer_header@@Base+0x108>
   1c540:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1c544:	cmp	r3, #0
   1c548:	beq	1c5a4 <flatcc_verify_typed_buffer_header@@Base+0x104>
   1c54c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1c550:	str	r3, [fp, #-20]	; 0xffffffec
   1c554:	mov	r1, #4
   1c558:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c55c:	bl	1af00 <flatcc_verify_error_string@@Base+0x3a0>
   1c560:	str	r0, [fp, #-24]	; 0xffffffe8
   1c564:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c568:	cmp	r3, #0
   1c56c:	beq	1c580 <flatcc_verify_typed_buffer_header@@Base+0xe0>
   1c570:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c574:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c578:	cmp	r2, r3
   1c57c:	bne	1c588 <flatcc_verify_typed_buffer_header@@Base+0xe8>
   1c580:	mov	r3, #1
   1c584:	b	1c58c <flatcc_verify_typed_buffer_header@@Base+0xec>
   1c588:	mov	r3, #0
   1c58c:	str	r3, [fp, #-28]	; 0xffffffe4
   1c590:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c594:	cmp	r3, #0
   1c598:	bne	1c5a4 <flatcc_verify_typed_buffer_header@@Base+0x104>
   1c59c:	mov	r3, #2
   1c5a0:	b	1c5a8 <flatcc_verify_typed_buffer_header@@Base+0x108>
   1c5a4:	mov	r3, #0
   1c5a8:	mov	r0, r3
   1c5ac:	sub	sp, fp, #4
   1c5b0:	pop	{fp, pc}

0001c5b4 <flatcc_verify_struct_as_root@@Base>:
   1c5b4:	push	{fp, lr}
   1c5b8:	add	fp, sp, #4
   1c5bc:	sub	sp, sp, #24
   1c5c0:	str	r0, [fp, #-8]
   1c5c4:	str	r1, [fp, #-12]
   1c5c8:	str	r2, [fp, #-16]
   1c5cc:	str	r3, [fp, #-20]	; 0xffffffec
   1c5d0:	ldr	r2, [fp, #-16]
   1c5d4:	ldr	r1, [fp, #-12]
   1c5d8:	ldr	r0, [fp, #-8]
   1c5dc:	bl	1c388 <flatcc_verify_buffer_header@@Base>
   1c5e0:	mov	r3, r0
   1c5e4:	cmp	r3, #0
   1c5e8:	beq	1c604 <flatcc_verify_struct_as_root@@Base+0x50>
   1c5ec:	ldr	r2, [fp, #-16]
   1c5f0:	ldr	r1, [fp, #-12]
   1c5f4:	ldr	r0, [fp, #-8]
   1c5f8:	bl	1c388 <flatcc_verify_buffer_header@@Base>
   1c5fc:	mov	r3, r0
   1c600:	b	1c630 <flatcc_verify_struct_as_root@@Base+0x7c>
   1c604:	mov	r1, #0
   1c608:	ldr	r0, [fp, #-8]
   1c60c:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1c610:	mov	r2, r0
   1c614:	ldrh	r3, [fp, #4]
   1c618:	str	r3, [sp]
   1c61c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c620:	mov	r1, #0
   1c624:	ldr	r0, [fp, #-12]
   1c628:	bl	1b088 <flatcc_verify_error_string@@Base+0x528>
   1c62c:	mov	r3, r0
   1c630:	mov	r0, r3
   1c634:	sub	sp, fp, #4
   1c638:	pop	{fp, pc}

0001c63c <flatcc_verify_struct_as_typed_root@@Base>:
   1c63c:	push	{fp, lr}
   1c640:	add	fp, sp, #4
   1c644:	sub	sp, sp, #24
   1c648:	str	r0, [fp, #-8]
   1c64c:	str	r1, [fp, #-12]
   1c650:	str	r2, [fp, #-16]
   1c654:	str	r3, [fp, #-20]	; 0xffffffec
   1c658:	ldr	r2, [fp, #-16]
   1c65c:	ldr	r1, [fp, #-12]
   1c660:	ldr	r0, [fp, #-8]
   1c664:	bl	1c4a0 <flatcc_verify_typed_buffer_header@@Base>
   1c668:	mov	r3, r0
   1c66c:	cmp	r3, #0
   1c670:	beq	1c68c <flatcc_verify_struct_as_typed_root@@Base+0x50>
   1c674:	ldr	r2, [fp, #-16]
   1c678:	ldr	r1, [fp, #-12]
   1c67c:	ldr	r0, [fp, #-8]
   1c680:	bl	1c4a0 <flatcc_verify_typed_buffer_header@@Base>
   1c684:	mov	r3, r0
   1c688:	b	1c6b8 <flatcc_verify_struct_as_typed_root@@Base+0x7c>
   1c68c:	mov	r1, #0
   1c690:	ldr	r0, [fp, #-8]
   1c694:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1c698:	mov	r2, r0
   1c69c:	ldrh	r3, [fp, #4]
   1c6a0:	str	r3, [sp]
   1c6a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c6a8:	mov	r1, #0
   1c6ac:	ldr	r0, [fp, #-12]
   1c6b0:	bl	1b088 <flatcc_verify_error_string@@Base+0x528>
   1c6b4:	mov	r3, r0
   1c6b8:	mov	r0, r3
   1c6bc:	sub	sp, fp, #4
   1c6c0:	pop	{fp, pc}

0001c6c4 <flatcc_verify_table_as_root@@Base>:
   1c6c4:	push	{fp, lr}
   1c6c8:	add	fp, sp, #4
   1c6cc:	sub	sp, sp, #24
   1c6d0:	str	r0, [fp, #-8]
   1c6d4:	str	r1, [fp, #-12]
   1c6d8:	str	r2, [fp, #-16]
   1c6dc:	str	r3, [fp, #-20]	; 0xffffffec
   1c6e0:	ldr	r2, [fp, #-16]
   1c6e4:	ldr	r1, [fp, #-12]
   1c6e8:	ldr	r0, [fp, #-8]
   1c6ec:	bl	1c388 <flatcc_verify_buffer_header@@Base>
   1c6f0:	mov	r3, r0
   1c6f4:	cmp	r3, #0
   1c6f8:	beq	1c714 <flatcc_verify_table_as_root@@Base+0x50>
   1c6fc:	ldr	r2, [fp, #-16]
   1c700:	ldr	r1, [fp, #-12]
   1c704:	ldr	r0, [fp, #-8]
   1c708:	bl	1c388 <flatcc_verify_buffer_header@@Base>
   1c70c:	mov	r3, r0
   1c710:	b	1c74c <flatcc_verify_table_as_root@@Base+0x88>
   1c714:	mov	r1, #0
   1c718:	ldr	r0, [fp, #-8]
   1c71c:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1c720:	mov	r2, r0
   1c724:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c728:	str	r3, [sp, #4]
   1c72c:	mov	r3, #100	; 0x64
   1c730:	str	r3, [sp]
   1c734:	mov	r3, r2
   1c738:	mov	r2, #0
   1c73c:	ldr	r1, [fp, #-12]
   1c740:	ldr	r0, [fp, #-8]
   1c744:	bl	1b83c <flatcc_verify_error_string@@Base+0xcdc>
   1c748:	mov	r3, r0
   1c74c:	mov	r0, r3
   1c750:	sub	sp, fp, #4
   1c754:	pop	{fp, pc}

0001c758 <flatcc_verify_table_as_typed_root@@Base>:
   1c758:	push	{fp, lr}
   1c75c:	add	fp, sp, #4
   1c760:	sub	sp, sp, #24
   1c764:	str	r0, [fp, #-8]
   1c768:	str	r1, [fp, #-12]
   1c76c:	str	r2, [fp, #-16]
   1c770:	str	r3, [fp, #-20]	; 0xffffffec
   1c774:	ldr	r2, [fp, #-16]
   1c778:	ldr	r1, [fp, #-12]
   1c77c:	ldr	r0, [fp, #-8]
   1c780:	bl	1c4a0 <flatcc_verify_typed_buffer_header@@Base>
   1c784:	mov	r3, r0
   1c788:	cmp	r3, #0
   1c78c:	beq	1c7a8 <flatcc_verify_table_as_typed_root@@Base+0x50>
   1c790:	ldr	r2, [fp, #-16]
   1c794:	ldr	r1, [fp, #-12]
   1c798:	ldr	r0, [fp, #-8]
   1c79c:	bl	1c4a0 <flatcc_verify_typed_buffer_header@@Base>
   1c7a0:	mov	r3, r0
   1c7a4:	b	1c7e0 <flatcc_verify_table_as_typed_root@@Base+0x88>
   1c7a8:	mov	r1, #0
   1c7ac:	ldr	r0, [fp, #-8]
   1c7b0:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1c7b4:	mov	r2, r0
   1c7b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c7bc:	str	r3, [sp, #4]
   1c7c0:	mov	r3, #100	; 0x64
   1c7c4:	str	r3, [sp]
   1c7c8:	mov	r3, r2
   1c7cc:	mov	r2, #0
   1c7d0:	ldr	r1, [fp, #-12]
   1c7d4:	ldr	r0, [fp, #-8]
   1c7d8:	bl	1b83c <flatcc_verify_error_string@@Base+0xcdc>
   1c7dc:	mov	r3, r0
   1c7e0:	mov	r0, r3
   1c7e4:	sub	sp, fp, #4
   1c7e8:	pop	{fp, pc}

0001c7ec <flatcc_verify_struct_as_nested_root@@Base>:
   1c7ec:	push	{fp, lr}
   1c7f0:	add	fp, sp, #4
   1c7f4:	sub	sp, sp, #32
   1c7f8:	str	r0, [fp, #-16]
   1c7fc:	str	r2, [fp, #-24]	; 0xffffffe8
   1c800:	str	r3, [fp, #-28]	; 0xffffffe4
   1c804:	strh	r1, [fp, #-18]	; 0xffffffee
   1c808:	ldrh	r2, [fp, #8]
   1c80c:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1c810:	mvn	r3, #0
   1c814:	str	r3, [sp, #4]
   1c818:	mov	r3, #1
   1c81c:	str	r3, [sp]
   1c820:	mov	r3, r2
   1c824:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c828:	ldr	r0, [fp, #-16]
   1c82c:	bl	1bfb0 <flatcc_verify_vector_field@@Base>
   1c830:	mov	r3, r0
   1c834:	cmp	r3, #0
   1c838:	beq	1c86c <flatcc_verify_struct_as_nested_root@@Base+0x80>
   1c83c:	ldrh	r2, [fp, #8]
   1c840:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1c844:	mvn	r3, #0
   1c848:	str	r3, [sp, #4]
   1c84c:	mov	r3, #1
   1c850:	str	r3, [sp]
   1c854:	mov	r3, r2
   1c858:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c85c:	ldr	r0, [fp, #-16]
   1c860:	bl	1bfb0 <flatcc_verify_vector_field@@Base>
   1c864:	mov	r3, r0
   1c868:	b	1c8ec <flatcc_verify_struct_as_nested_root@@Base+0x100>
   1c86c:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1c870:	mov	r1, r3
   1c874:	ldr	r0, [fp, #-16]
   1c878:	bl	1b210 <flatcc_verify_error_string@@Base+0x6b0>
   1c87c:	str	r0, [fp, #-8]
   1c880:	ldr	r3, [fp, #-8]
   1c884:	cmp	r3, #0
   1c888:	bne	1c894 <flatcc_verify_struct_as_nested_root@@Base+0xa8>
   1c88c:	mov	r3, #0
   1c890:	b	1c8ec <flatcc_verify_struct_as_nested_root@@Base+0x100>
   1c894:	mov	r1, #0
   1c898:	ldr	r0, [fp, #-8]
   1c89c:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1c8a0:	mov	r2, r0
   1c8a4:	ldr	r3, [fp, #-8]
   1c8a8:	add	r3, r2, r3
   1c8ac:	str	r3, [fp, #-8]
   1c8b0:	mov	r1, #0
   1c8b4:	ldr	r0, [fp, #-8]
   1c8b8:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1c8bc:	str	r0, [fp, #-12]
   1c8c0:	ldr	r3, [fp, #-8]
   1c8c4:	add	r3, r3, #4
   1c8c8:	str	r3, [fp, #-8]
   1c8cc:	ldrh	r3, [fp, #8]
   1c8d0:	str	r3, [sp]
   1c8d4:	ldr	r3, [fp, #4]
   1c8d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c8dc:	ldr	r1, [fp, #-12]
   1c8e0:	ldr	r0, [fp, #-8]
   1c8e4:	bl	1c5b4 <flatcc_verify_struct_as_root@@Base>
   1c8e8:	mov	r3, r0
   1c8ec:	mov	r0, r3
   1c8f0:	sub	sp, fp, #4
   1c8f4:	pop	{fp, pc}

0001c8f8 <flatcc_verify_table_as_nested_root@@Base>:
   1c8f8:	push	{fp, lr}
   1c8fc:	add	fp, sp, #4
   1c900:	sub	sp, sp, #32
   1c904:	str	r0, [fp, #-16]
   1c908:	str	r2, [fp, #-24]	; 0xffffffe8
   1c90c:	str	r3, [fp, #-28]	; 0xffffffe4
   1c910:	strh	r1, [fp, #-18]	; 0xffffffee
   1c914:	ldrh	r2, [fp, #4]
   1c918:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1c91c:	mvn	r3, #0
   1c920:	str	r3, [sp, #4]
   1c924:	mov	r3, #1
   1c928:	str	r3, [sp]
   1c92c:	mov	r3, r2
   1c930:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c934:	ldr	r0, [fp, #-16]
   1c938:	bl	1bfb0 <flatcc_verify_vector_field@@Base>
   1c93c:	mov	r3, r0
   1c940:	cmp	r3, #0
   1c944:	beq	1c978 <flatcc_verify_table_as_nested_root@@Base+0x80>
   1c948:	ldrh	r2, [fp, #4]
   1c94c:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1c950:	mvn	r3, #0
   1c954:	str	r3, [sp, #4]
   1c958:	mov	r3, #1
   1c95c:	str	r3, [sp]
   1c960:	mov	r3, r2
   1c964:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c968:	ldr	r0, [fp, #-16]
   1c96c:	bl	1bfb0 <flatcc_verify_vector_field@@Base>
   1c970:	mov	r3, r0
   1c974:	b	1ca48 <flatcc_verify_table_as_nested_root@@Base+0x150>
   1c978:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1c97c:	mov	r1, r3
   1c980:	ldr	r0, [fp, #-16]
   1c984:	bl	1b210 <flatcc_verify_error_string@@Base+0x6b0>
   1c988:	str	r0, [fp, #-8]
   1c98c:	ldr	r3, [fp, #-8]
   1c990:	cmp	r3, #0
   1c994:	bne	1c9a0 <flatcc_verify_table_as_nested_root@@Base+0xa8>
   1c998:	mov	r3, #0
   1c99c:	b	1ca48 <flatcc_verify_table_as_nested_root@@Base+0x150>
   1c9a0:	mov	r1, #0
   1c9a4:	ldr	r0, [fp, #-8]
   1c9a8:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1c9ac:	mov	r2, r0
   1c9b0:	ldr	r3, [fp, #-8]
   1c9b4:	add	r3, r2, r3
   1c9b8:	str	r3, [fp, #-8]
   1c9bc:	mov	r1, #0
   1c9c0:	ldr	r0, [fp, #-8]
   1c9c4:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1c9c8:	str	r0, [fp, #-12]
   1c9cc:	ldr	r3, [fp, #-8]
   1c9d0:	add	r3, r3, #4
   1c9d4:	str	r3, [fp, #-8]
   1c9d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c9dc:	ldr	r1, [fp, #-12]
   1c9e0:	ldr	r0, [fp, #-8]
   1c9e4:	bl	1c388 <flatcc_verify_buffer_header@@Base>
   1c9e8:	mov	r3, r0
   1c9ec:	cmp	r3, #0
   1c9f0:	beq	1ca0c <flatcc_verify_table_as_nested_root@@Base+0x114>
   1c9f4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c9f8:	ldr	r1, [fp, #-12]
   1c9fc:	ldr	r0, [fp, #-8]
   1ca00:	bl	1c388 <flatcc_verify_buffer_header@@Base>
   1ca04:	mov	r3, r0
   1ca08:	b	1ca48 <flatcc_verify_table_as_nested_root@@Base+0x150>
   1ca0c:	mov	r1, #0
   1ca10:	ldr	r0, [fp, #-8]
   1ca14:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1ca18:	mov	r1, r0
   1ca1c:	ldr	r3, [fp, #-16]
   1ca20:	ldr	r3, [r3, #8]
   1ca24:	ldr	r2, [fp, #8]
   1ca28:	str	r2, [sp, #4]
   1ca2c:	str	r3, [sp]
   1ca30:	mov	r3, r1
   1ca34:	mov	r2, #0
   1ca38:	ldr	r1, [fp, #-12]
   1ca3c:	ldr	r0, [fp, #-8]
   1ca40:	bl	1b83c <flatcc_verify_error_string@@Base+0xcdc>
   1ca44:	mov	r3, r0
   1ca48:	mov	r0, r3
   1ca4c:	sub	sp, fp, #4
   1ca50:	pop	{fp, pc}

0001ca54 <flatcc_verify_union_field@@Base>:
   1ca54:	push	{fp, lr}
   1ca58:	add	fp, sp, #4
   1ca5c:	sub	sp, sp, #80	; 0x50
   1ca60:	str	r0, [fp, #-64]	; 0xffffffc0
   1ca64:	str	r2, [fp, #-72]	; 0xffffffb8
   1ca68:	str	r3, [fp, #-76]	; 0xffffffb4
   1ca6c:	strh	r1, [fp, #-66]	; 0xffffffbe
   1ca70:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   1ca74:	sub	r3, r3, #1
   1ca78:	uxth	r3, r3
   1ca7c:	mov	r1, r3
   1ca80:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1ca84:	bl	1b1a0 <flatcc_verify_error_string@@Base+0x640>
   1ca88:	mov	r3, r0
   1ca8c:	strh	r3, [fp, #-6]
   1ca90:	ldrh	r3, [fp, #-6]
   1ca94:	cmp	r3, #0
   1ca98:	bne	1cb14 <flatcc_verify_union_field@@Base+0xc0>
   1ca9c:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   1caa0:	mov	r1, r3
   1caa4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1caa8:	bl	1b1a0 <flatcc_verify_error_string@@Base+0x640>
   1caac:	mov	r3, r0
   1cab0:	strh	r3, [fp, #-8]
   1cab4:	ldrh	r3, [fp, #-8]
   1cab8:	cmp	r3, #0
   1cabc:	moveq	r3, #1
   1cac0:	movne	r3, #0
   1cac4:	uxtb	r3, r3
   1cac8:	str	r3, [fp, #-12]
   1cacc:	ldr	r3, [fp, #-12]
   1cad0:	cmp	r3, #0
   1cad4:	bne	1cae0 <flatcc_verify_union_field@@Base+0x8c>
   1cad8:	mov	r3, #23
   1cadc:	b	1cca4 <flatcc_verify_union_field@@Base+0x250>
   1cae0:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1cae4:	cmp	r3, #0
   1cae8:	moveq	r3, #1
   1caec:	movne	r3, #0
   1caf0:	uxtb	r3, r3
   1caf4:	str	r3, [fp, #-16]
   1caf8:	ldr	r3, [fp, #-16]
   1cafc:	cmp	r3, #0
   1cb00:	bne	1cb0c <flatcc_verify_union_field@@Base+0xb8>
   1cb04:	mov	r3, #21
   1cb08:	b	1cca4 <flatcc_verify_union_field@@Base+0x250>
   1cb0c:	mov	r3, #0
   1cb10:	b	1cca4 <flatcc_verify_union_field@@Base+0x250>
   1cb14:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   1cb18:	sub	r3, r3, #1
   1cb1c:	uxth	r1, r3
   1cb20:	mov	r3, #1
   1cb24:	str	r3, [sp]
   1cb28:	mov	r3, #1
   1cb2c:	mov	r2, #0
   1cb30:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1cb34:	bl	1b27c <flatcc_verify_error_string@@Base+0x71c>
   1cb38:	mov	r3, r0
   1cb3c:	cmp	r3, #0
   1cb40:	beq	1cb70 <flatcc_verify_union_field@@Base+0x11c>
   1cb44:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   1cb48:	sub	r3, r3, #1
   1cb4c:	uxth	r1, r3
   1cb50:	mov	r3, #1
   1cb54:	str	r3, [sp]
   1cb58:	mov	r3, #1
   1cb5c:	mov	r2, #0
   1cb60:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1cb64:	bl	1b27c <flatcc_verify_error_string@@Base+0x71c>
   1cb68:	mov	r3, r0
   1cb6c:	b	1cca4 <flatcc_verify_union_field@@Base+0x250>
   1cb70:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   1cb74:	mov	r1, r3
   1cb78:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1cb7c:	bl	1b1a0 <flatcc_verify_error_string@@Base+0x640>
   1cb80:	mov	r3, r0
   1cb84:	strh	r3, [fp, #-8]
   1cb88:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1cb8c:	ldr	r2, [r3]
   1cb90:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1cb94:	ldr	r1, [r3, #16]
   1cb98:	ldrh	r3, [fp, #-6]
   1cb9c:	add	r3, r1, r3
   1cba0:	add	r3, r2, r3
   1cba4:	str	r3, [fp, #-20]	; 0xffffffec
   1cba8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cbac:	ldrb	r3, [r3]
   1cbb0:	cmp	r3, #0
   1cbb4:	bne	1cbc4 <flatcc_verify_union_field@@Base+0x170>
   1cbb8:	ldrh	r3, [fp, #-8]
   1cbbc:	cmp	r3, #0
   1cbc0:	bne	1cbcc <flatcc_verify_union_field@@Base+0x178>
   1cbc4:	mov	r3, #1
   1cbc8:	b	1cbd0 <flatcc_verify_union_field@@Base+0x17c>
   1cbcc:	mov	r3, #0
   1cbd0:	str	r3, [fp, #-24]	; 0xffffffe8
   1cbd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cbd8:	cmp	r3, #0
   1cbdc:	bne	1cbe8 <flatcc_verify_union_field@@Base+0x194>
   1cbe0:	mov	r3, #24
   1cbe4:	b	1cca4 <flatcc_verify_union_field@@Base+0x250>
   1cbe8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cbec:	ldrb	r3, [r3]
   1cbf0:	cmp	r3, #0
   1cbf4:	bne	1cc00 <flatcc_verify_union_field@@Base+0x1ac>
   1cbf8:	mov	r3, #0
   1cbfc:	b	1cca4 <flatcc_verify_union_field@@Base+0x250>
   1cc00:	sub	r3, fp, #32
   1cc04:	ldrh	r1, [fp, #-66]	; 0xffffffbe
   1cc08:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1cc0c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1cc10:	bl	1b3d0 <flatcc_verify_error_string@@Base+0x870>
   1cc14:	str	r0, [fp, #-28]	; 0xffffffe4
   1cc18:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cc1c:	cmp	r3, #0
   1cc20:	bne	1cc30 <flatcc_verify_union_field@@Base+0x1dc>
   1cc24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cc28:	cmp	r3, #0
   1cc2c:	bne	1cc38 <flatcc_verify_union_field@@Base+0x1e4>
   1cc30:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cc34:	b	1cca4 <flatcc_verify_union_field@@Base+0x250>
   1cc38:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1cc3c:	ldr	r3, [r3]
   1cc40:	str	r3, [fp, #-56]	; 0xffffffc8
   1cc44:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1cc48:	ldr	r3, [r3, #4]
   1cc4c:	str	r3, [fp, #-52]	; 0xffffffcc
   1cc50:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1cc54:	ldr	r3, [r3, #8]
   1cc58:	str	r3, [fp, #-48]	; 0xffffffd0
   1cc5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cc60:	str	r3, [fp, #-40]	; 0xffffffd8
   1cc64:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1cc68:	ldr	r3, [r3]
   1cc6c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1cc70:	mov	r1, r2
   1cc74:	mov	r0, r3
   1cc78:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1cc7c:	mov	r3, r0
   1cc80:	str	r3, [fp, #-36]	; 0xffffffdc
   1cc84:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cc88:	ldrb	r3, [r3]
   1cc8c:	strb	r3, [fp, #-44]	; 0xffffffd4
   1cc90:	sub	r2, fp, #56	; 0x38
   1cc94:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1cc98:	mov	r0, r2
   1cc9c:	blx	r3
   1cca0:	mov	r3, r0
   1cca4:	mov	r0, r3
   1cca8:	sub	sp, fp, #4
   1ccac:	pop	{fp, pc}

0001ccb0 <flatcc_verify_union_vector_field@@Base>:
   1ccb0:	push	{r4, r5, r6, fp, lr}
   1ccb4:	add	fp, sp, #16
   1ccb8:	sub	sp, sp, #68	; 0x44
   1ccbc:	str	r0, [fp, #-56]	; 0xffffffc8
   1ccc0:	str	r2, [fp, #-64]	; 0xffffffc0
   1ccc4:	str	r3, [fp, #-68]	; 0xffffffbc
   1ccc8:	strh	r1, [fp, #-58]	; 0xffffffc6
   1cccc:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   1ccd0:	sub	r3, r3, #1
   1ccd4:	uxth	r3, r3
   1ccd8:	mov	r1, r3
   1ccdc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1cce0:	bl	1b1a0 <flatcc_verify_error_string@@Base+0x640>
   1cce4:	mov	r3, r0
   1cce8:	strh	r3, [fp, #-22]	; 0xffffffea
   1ccec:	ldrh	r3, [fp, #-22]	; 0xffffffea
   1ccf0:	cmp	r3, #0
   1ccf4:	bne	1cd48 <flatcc_verify_union_vector_field@@Base+0x98>
   1ccf8:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   1ccfc:	mov	r1, r3
   1cd00:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1cd04:	bl	1b1a0 <flatcc_verify_error_string@@Base+0x640>
   1cd08:	mov	r3, r0
   1cd0c:	strh	r3, [fp, #-24]	; 0xffffffe8
   1cd10:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   1cd14:	cmp	r3, #0
   1cd18:	bne	1cd48 <flatcc_verify_union_vector_field@@Base+0x98>
   1cd1c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1cd20:	cmp	r3, #0
   1cd24:	moveq	r3, #1
   1cd28:	movne	r3, #0
   1cd2c:	uxtb	r3, r3
   1cd30:	str	r3, [fp, #-28]	; 0xffffffe4
   1cd34:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cd38:	cmp	r3, #0
   1cd3c:	bne	1cd48 <flatcc_verify_union_vector_field@@Base+0x98>
   1cd40:	mov	r3, #22
   1cd44:	b	1cec8 <flatcc_verify_union_vector_field@@Base+0x218>
   1cd48:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   1cd4c:	sub	r3, r3, #1
   1cd50:	uxth	r1, r3
   1cd54:	mvn	r3, #0
   1cd58:	str	r3, [sp, #4]
   1cd5c:	mov	r3, #1
   1cd60:	str	r3, [sp]
   1cd64:	mov	r3, #1
   1cd68:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1cd6c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1cd70:	bl	1bfb0 <flatcc_verify_vector_field@@Base>
   1cd74:	mov	r3, r0
   1cd78:	cmp	r3, #0
   1cd7c:	beq	1cdb4 <flatcc_verify_union_vector_field@@Base+0x104>
   1cd80:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   1cd84:	sub	r3, r3, #1
   1cd88:	uxth	r1, r3
   1cd8c:	mvn	r3, #0
   1cd90:	str	r3, [sp, #4]
   1cd94:	mov	r3, #1
   1cd98:	str	r3, [sp]
   1cd9c:	mov	r3, #1
   1cda0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1cda4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1cda8:	bl	1bfb0 <flatcc_verify_vector_field@@Base>
   1cdac:	mov	r3, r0
   1cdb0:	b	1cec8 <flatcc_verify_union_vector_field@@Base+0x218>
   1cdb4:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   1cdb8:	sub	r3, r3, #1
   1cdbc:	uxth	r3, r3
   1cdc0:	mov	r1, r3
   1cdc4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1cdc8:	bl	1b210 <flatcc_verify_error_string@@Base+0x6b0>
   1cdcc:	str	r0, [fp, #-32]	; 0xffffffe0
   1cdd0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cdd4:	cmp	r3, #0
   1cdd8:	bne	1cde4 <flatcc_verify_union_vector_field@@Base+0x134>
   1cddc:	mov	r3, #0
   1cde0:	b	1cec8 <flatcc_verify_union_vector_field@@Base+0x218>
   1cde4:	mov	r1, #0
   1cde8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1cdec:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1cdf0:	mov	r2, r0
   1cdf4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cdf8:	add	r3, r2, r3
   1cdfc:	str	r3, [fp, #-32]	; 0xffffffe0
   1ce00:	mov	r1, #0
   1ce04:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ce08:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1ce0c:	str	r0, [fp, #-36]	; 0xffffffdc
   1ce10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ce14:	add	r3, r3, #4
   1ce18:	str	r3, [fp, #-32]	; 0xffffffe0
   1ce1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ce20:	str	r3, [fp, #-40]	; 0xffffffd8
   1ce24:	sub	r3, fp, #48	; 0x30
   1ce28:	ldrh	r1, [fp, #-58]	; 0xffffffc6
   1ce2c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1ce30:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ce34:	bl	1b3d0 <flatcc_verify_error_string@@Base+0x870>
   1ce38:	str	r0, [fp, #-44]	; 0xffffffd4
   1ce3c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1ce40:	cmp	r3, #0
   1ce44:	bne	1ce54 <flatcc_verify_union_vector_field@@Base+0x1a4>
   1ce48:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1ce4c:	cmp	r3, #0
   1ce50:	bne	1ce5c <flatcc_verify_union_vector_field@@Base+0x1ac>
   1ce54:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1ce58:	b	1cec8 <flatcc_verify_union_vector_field@@Base+0x218>
   1ce5c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ce60:	ldr	r4, [r3]
   1ce64:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ce68:	ldr	r5, [r3, #4]
   1ce6c:	ldr	r6, [fp, #-48]	; 0xffffffd0
   1ce70:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ce74:	ldr	r3, [r3]
   1ce78:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1ce7c:	mov	r1, r2
   1ce80:	mov	r0, r3
   1ce84:	bl	1ae80 <flatcc_verify_error_string@@Base+0x320>
   1ce88:	mov	r1, r0
   1ce8c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ce90:	ldr	r3, [r3, #8]
   1ce94:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1ce98:	str	r2, [sp, #12]
   1ce9c:	str	r3, [sp, #8]
   1cea0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1cea4:	str	r3, [sp, #4]
   1cea8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1ceac:	str	r3, [sp]
   1ceb0:	mov	r3, r1
   1ceb4:	mov	r2, r6
   1ceb8:	mov	r1, r5
   1cebc:	mov	r0, r4
   1cec0:	bl	1bc3c <flatcc_verify_error_string@@Base+0x10dc>
   1cec4:	mov	r3, r0
   1cec8:	mov	r0, r3
   1cecc:	sub	sp, fp, #16
   1ced0:	pop	{r4, r5, r6, fp, pc}

0001ced4 <__libc_csu_init@@Base>:
   1ced4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ced8:	mov	r7, r0
   1cedc:	ldr	r6, [pc, #72]	; 1cf2c <__libc_csu_init@@Base+0x58>
   1cee0:	ldr	r5, [pc, #72]	; 1cf30 <__libc_csu_init@@Base+0x5c>
   1cee4:	add	r6, pc, r6
   1cee8:	add	r5, pc, r5
   1ceec:	sub	r6, r6, r5
   1cef0:	mov	r8, r1
   1cef4:	mov	r9, r2
   1cef8:	bl	12290 <free@plt-0x20>
   1cefc:	asrs	r6, r6, #2
   1cf00:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cf04:	mov	r4, #0
   1cf08:	add	r4, r4, #1
   1cf0c:	ldr	r3, [r5], #4
   1cf10:	mov	r2, r9
   1cf14:	mov	r1, r8
   1cf18:	mov	r0, r7
   1cf1c:	blx	r3
   1cf20:	cmp	r6, r4
   1cf24:	bne	1cf08 <__libc_csu_init@@Base+0x34>
   1cf28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cf2c:	andeq	r2, r1, r4, lsr #32
   1cf30:	andeq	r2, r1, ip, lsl r0

0001cf34 <__libc_csu_fini@@Base>:
   1cf34:	bx	lr

Disassembly of section .fini:

0001cf38 <.fini>:
   1cf38:	push	{r3, lr}
   1cf3c:	pop	{r3, pc}
