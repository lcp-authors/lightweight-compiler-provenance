
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_concat/monster_test_concat:     file format elf32-littlearm


Disassembly of section .init:

00012268 <.init>:
   12268:	push	{r3, lr}
   1226c:	bl	1248c <_start@@Base+0x3c>
   12270:	pop	{r3, pc}

Disassembly of section .plt:

00012274 <free@plt-0x14>:
   12274:	push	{lr}		; (str lr, [sp, #-4]!)
   12278:	ldr	lr, [pc, #4]	; 12284 <free@plt-0x4>
   1227c:	add	lr, pc, lr
   12280:	ldr	pc, [lr, #8]!
   12284:	andeq	r8, r1, ip, ror sp

00012288 <free@plt>:
   12288:	add	ip, pc, #0, 12
   1228c:	add	ip, ip, #24, 20	; 0x18000
   12290:	ldr	pc, [ip, #3452]!	; 0xd7c

00012294 <memcpy@plt>:
   12294:	add	ip, pc, #0, 12
   12298:	add	ip, ip, #24, 20	; 0x18000
   1229c:	ldr	pc, [ip, #3444]!	; 0xd74

000122a0 <memcmp@plt>:
   122a0:	add	ip, pc, #0, 12
   122a4:	add	ip, ip, #24, 20	; 0x18000
   122a8:	ldr	pc, [ip, #3436]!	; 0xd6c

000122ac <realloc@plt>:
   122ac:	add	ip, pc, #0, 12
   122b0:	add	ip, ip, #24, 20	; 0x18000
   122b4:	ldr	pc, [ip, #3428]!	; 0xd64

000122b8 <malloc@plt>:
   122b8:	add	ip, pc, #0, 12
   122bc:	add	ip, ip, #24, 20	; 0x18000
   122c0:	ldr	pc, [ip, #3420]!	; 0xd5c

000122c4 <__libc_start_main@plt>:
   122c4:	add	ip, pc, #0, 12
   122c8:	add	ip, ip, #24, 20	; 0x18000
   122cc:	ldr	pc, [ip, #3412]!	; 0xd54

000122d0 <__gmon_start__@plt>:
   122d0:	add	ip, pc, #0, 12
   122d4:	add	ip, ip, #24, 20	; 0x18000
   122d8:	ldr	pc, [ip, #3404]!	; 0xd4c

000122dc <strlen@plt>:
   122dc:	add	ip, pc, #0, 12
   122e0:	add	ip, ip, #24, 20	; 0x18000
   122e4:	ldr	pc, [ip, #3396]!	; 0xd44

000122e8 <posix_memalign@plt>:
   122e8:	add	ip, pc, #0, 12
   122ec:	add	ip, ip, #24, 20	; 0x18000
   122f0:	ldr	pc, [ip, #3388]!	; 0xd3c

000122f4 <memset@plt>:
   122f4:	add	ip, pc, #0, 12
   122f8:	add	ip, ip, #24, 20	; 0x18000
   122fc:	ldr	pc, [ip, #3380]!	; 0xd34

00012300 <strncpy@plt>:
   12300:	add	ip, pc, #0, 12
   12304:	add	ip, ip, #24, 20	; 0x18000
   12308:	ldr	pc, [ip, #3372]!	; 0xd2c

0001230c <memchr@plt>:
   1230c:	add	ip, pc, #0, 12
   12310:	add	ip, ip, #24, 20	; 0x18000
   12314:	ldr	pc, [ip, #3364]!	; 0xd24

00012318 <abort@plt>:
   12318:	add	ip, pc, #0, 12
   1231c:	add	ip, ip, #24, 20	; 0x18000
   12320:	ldr	pc, [ip, #3356]!	; 0xd1c

00012324 <__assert_fail@plt>:
   12324:	add	ip, pc, #0, 12
   12328:	add	ip, ip, #24, 20	; 0x18000
   1232c:	ldr	pc, [ip, #3348]!	; 0xd14

Disassembly of section .text:

00012330 <main@@Base>:
   12330:	strd	r4, [sp, #-12]!
   12334:	str	lr, [sp, #8]
   12338:	sub	sp, sp, #244	; 0xf4
   1233c:	add	r4, sp, #8
   12340:	mov	r0, r4
   12344:	bl	13794 <flatcc_builder_init@@Base>
   12348:	ldr	r1, [pc, #228]	; 12434 <main@@Base+0x104>
   1234c:	mov	r3, #0
   12350:	mov	r0, r4
   12354:	mov	r2, r3
   12358:	add	r1, pc, r1
   1235c:	bl	14130 <flatcc_builder_start_buffer@@Base>
   12360:	cmp	r0, #0
   12364:	bne	12374 <main@@Base+0x44>
   12368:	mov	r1, #36	; 0x24
   1236c:	mov	r0, r4
   12370:	bl	15108 <flatcc_builder_start_table@@Base>
   12374:	ldr	r1, [pc, #188]	; 12438 <main@@Base+0x108>
   12378:	mov	r0, r4
   1237c:	add	r1, pc, r1
   12380:	bl	16a70 <flatcc_builder_create_string_str@@Base>
   12384:	subs	r5, r0, #0
   12388:	beq	123a0 <main@@Base+0x70>
   1238c:	mov	r1, #3
   12390:	mov	r0, r4
   12394:	bl	16e80 <flatcc_builder_table_add_offset@@Base>
   12398:	cmp	r0, #0
   1239c:	strne	r5, [r0]
   123a0:	ldr	r5, [pc, #148]	; 1243c <main@@Base+0x10c>
   123a4:	mov	r2, #1
   123a8:	mov	r0, r4
   123ac:	add	r5, pc, r5
   123b0:	mov	r1, r5
   123b4:	bl	15a40 <flatcc_builder_check_required@@Base>
   123b8:	cmp	r0, #0
   123bc:	beq	12418 <main@@Base+0xe8>
   123c0:	mov	r0, r4
   123c4:	bl	15aec <flatcc_builder_end_table@@Base>
   123c8:	mov	r1, r0
   123cc:	mov	r0, r4
   123d0:	bl	1420c <flatcc_builder_end_buffer@@Base>
   123d4:	add	r1, sp, #4
   123d8:	mov	r0, r4
   123dc:	bl	173fc <flatcc_builder_get_direct_buffer@@Base>
   123e0:	ldr	r3, [pc, #88]	; 12440 <main@@Base+0x110>
   123e4:	ldr	r2, [pc, #88]	; 12444 <main@@Base+0x114>
   123e8:	ldr	r1, [sp, #4]
   123ec:	add	r3, pc, r3
   123f0:	add	r2, pc, r2
   123f4:	bl	18c64 <flatcc_verify_table_as_root@@Base>
   123f8:	mov	r5, r0
   123fc:	mov	r0, r4
   12400:	bl	13944 <flatcc_builder_clear@@Base>
   12404:	mov	r0, r5
   12408:	add	sp, sp, #244	; 0xf4
   1240c:	ldrd	r4, [sp]
   12410:	add	sp, sp, #8
   12414:	pop	{pc}		; (ldr pc, [sp], #4)
   12418:	ldr	r1, [pc, #40]	; 12448 <main@@Base+0x118>
   1241c:	add	r3, r5, #4
   12420:	movw	r2, #2398	; 0x95e
   12424:	ldr	r0, [pc, #32]	; 1244c <main@@Base+0x11c>
   12428:	add	r1, pc, r1
   1242c:	add	r0, pc, r0
   12430:	bl	12324 <__assert_fail@plt>
   12434:	muleq	r0, r0, r2
   12438:	andeq	r7, r0, r4, ror r2
   1243c:	andeq	r7, r0, ip, lsl r2
   12440:	andeq	r0, r0, r0, lsr r4
   12444:	strdeq	r7, [r0], -r8
   12448:	ldrdeq	r7, [r0], -r4
   1244c:	andeq	r7, r0, ip, asr #4

00012450 <_start@@Base>:
   12450:	mov	fp, #0
   12454:	mov	lr, #0
   12458:	pop	{r1}		; (ldr r1, [sp], #4)
   1245c:	mov	r2, sp
   12460:	push	{r2}		; (str r2, [sp, #-4]!)
   12464:	push	{r0}		; (str r0, [sp, #-4]!)
   12468:	ldr	ip, [pc, #16]	; 12480 <_start@@Base+0x30>
   1246c:	push	{ip}		; (str ip, [sp, #-4]!)
   12470:	ldr	r0, [pc, #12]	; 12484 <_start@@Base+0x34>
   12474:	ldr	r3, [pc, #12]	; 12488 <_start@@Base+0x38>
   12478:	bl	122c4 <__libc_start_main@plt>
   1247c:	bl	12318 <abort@plt>
   12480:	andeq	r9, r1, r0, asr #11
   12484:	andeq	r2, r1, r0, lsr r3
   12488:	andeq	r9, r1, r0, ror #10
   1248c:	ldr	r3, [pc, #20]	; 124a8 <_start@@Base+0x58>
   12490:	ldr	r2, [pc, #20]	; 124ac <_start@@Base+0x5c>
   12494:	add	r3, pc, r3
   12498:	ldr	r2, [r3, r2]
   1249c:	cmp	r2, #0
   124a0:	bxeq	lr
   124a4:	b	122d0 <__gmon_start__@plt>
   124a8:	andeq	r8, r1, r4, ror #22
   124ac:	andeq	r0, r0, r8, asr #32
   124b0:	ldr	r0, [pc, #24]	; 124d0 <_start@@Base+0x80>
   124b4:	ldr	r3, [pc, #24]	; 124d4 <_start@@Base+0x84>
   124b8:	cmp	r3, r0
   124bc:	bxeq	lr
   124c0:	ldr	r3, [pc, #16]	; 124d8 <_start@@Base+0x88>
   124c4:	cmp	r3, #0
   124c8:	bxeq	lr
   124cc:	bx	r3
   124d0:	andeq	fp, r2, ip, asr r0
   124d4:	andeq	fp, r2, ip, asr r0
   124d8:	andeq	r0, r0, r0
   124dc:	ldr	r0, [pc, #36]	; 12508 <_start@@Base+0xb8>
   124e0:	ldr	r1, [pc, #36]	; 1250c <_start@@Base+0xbc>
   124e4:	sub	r1, r1, r0
   124e8:	asr	r1, r1, #2
   124ec:	add	r1, r1, r1, lsr #31
   124f0:	asrs	r1, r1, #1
   124f4:	bxeq	lr
   124f8:	ldr	r3, [pc, #16]	; 12510 <_start@@Base+0xc0>
   124fc:	cmp	r3, #0
   12500:	bxeq	lr
   12504:	bx	r3
   12508:	andeq	fp, r2, ip, asr r0
   1250c:	andeq	fp, r2, ip, asr r0
   12510:	andeq	r0, r0, r0
   12514:	push	{r4, lr}
   12518:	ldr	r4, [pc, #24]	; 12538 <_start@@Base+0xe8>
   1251c:	ldrb	r3, [r4]
   12520:	cmp	r3, #0
   12524:	popne	{r4, pc}
   12528:	bl	124b0 <_start@@Base+0x60>
   1252c:	mov	r3, #1
   12530:	strb	r3, [r4]
   12534:	pop	{r4, pc}
   12538:	andeq	fp, r2, ip, asr r0
   1253c:	b	124dc <_start@@Base+0x8c>
   12540:	mov	r0, #0
   12544:	bx	lr
   12548:	mov	r3, #4
   1254c:	mov	r1, #0
   12550:	mov	r2, r3
   12554:	b	17f90 <flatcc_verify_field@@Base>
   12558:	mov	r3, #8
   1255c:	mov	r1, #0
   12560:	str	r4, [sp, #-8]!
   12564:	mov	r2, r3
   12568:	mov	r4, r0
   1256c:	str	lr, [sp, #4]
   12570:	bl	17f90 <flatcc_verify_field@@Base>
   12574:	cmp	r0, #0
   12578:	beq	12588 <_start@@Base+0x138>
   1257c:	ldr	r4, [sp]
   12580:	add	sp, sp, #4
   12584:	pop	{pc}		; (ldr pc, [sp], #4)
   12588:	mov	r3, #4
   1258c:	mov	r0, r4
   12590:	ldr	r4, [sp]
   12594:	mov	r2, r3
   12598:	mov	r1, #1
   1259c:	ldr	lr, [sp, #4]
   125a0:	add	sp, sp, #8
   125a4:	b	17f90 <flatcc_verify_field@@Base>
   125a8:	mov	r3, #1
   125ac:	mov	r1, #0
   125b0:	str	r4, [sp, #-8]!
   125b4:	mov	r2, r3
   125b8:	mov	r4, r0
   125bc:	str	lr, [sp, #4]
   125c0:	bl	17f90 <flatcc_verify_field@@Base>
   125c4:	cmp	r0, #0
   125c8:	beq	125d8 <_start@@Base+0x188>
   125cc:	ldr	r4, [sp]
   125d0:	add	sp, sp, #4
   125d4:	pop	{pc}		; (ldr pc, [sp], #4)
   125d8:	mov	r3, #1
   125dc:	mov	r0, r4
   125e0:	mov	r2, r3
   125e4:	mov	r1, r3
   125e8:	bl	17f90 <flatcc_verify_field@@Base>
   125ec:	cmp	r0, #0
   125f0:	bne	125cc <_start@@Base+0x17c>
   125f4:	mov	r3, #1
   125f8:	mov	r1, #2
   125fc:	mov	r2, r3
   12600:	mov	r0, r4
   12604:	bl	17f90 <flatcc_verify_field@@Base>
   12608:	cmp	r0, #0
   1260c:	bne	125cc <_start@@Base+0x17c>
   12610:	mov	r3, #1
   12614:	mov	r0, r4
   12618:	ldr	r4, [sp]
   1261c:	mov	r2, r3
   12620:	mov	r1, #3
   12624:	ldr	lr, [sp, #4]
   12628:	add	sp, sp, #8
   1262c:	b	17f90 <flatcc_verify_field@@Base>
   12630:	mov	r2, #0
   12634:	str	r4, [sp, #-8]!
   12638:	mov	r4, r0
   1263c:	mov	r1, r2
   12640:	str	lr, [sp, #4]
   12644:	bl	17ffc <flatcc_verify_string_field@@Base>
   12648:	cmp	r0, #0
   1264c:	beq	1265c <_start@@Base+0x20c>
   12650:	ldr	r4, [sp]
   12654:	add	sp, sp, #4
   12658:	pop	{pc}		; (ldr pc, [sp], #4)
   1265c:	mov	r3, #8
   12660:	mov	r1, #1
   12664:	mov	r2, r3
   12668:	mov	r0, r4
   1266c:	bl	17f90 <flatcc_verify_field@@Base>
   12670:	cmp	r0, #0
   12674:	bne	12650 <_start@@Base+0x200>
   12678:	mov	r3, #2
   1267c:	mov	r0, r4
   12680:	ldr	r4, [sp]
   12684:	mov	r2, r3
   12688:	mov	r1, r3
   1268c:	ldr	lr, [sp, #4]
   12690:	add	sp, sp, #8
   12694:	b	17f90 <flatcc_verify_field@@Base>
   12698:	mov	r2, #0
   1269c:	str	r4, [sp, #-8]!
   126a0:	mov	r4, r0
   126a4:	mov	r1, r2
   126a8:	str	lr, [sp, #4]
   126ac:	bl	17ffc <flatcc_verify_string_field@@Base>
   126b0:	cmp	r0, #0
   126b4:	beq	126c4 <_start@@Base+0x274>
   126b8:	ldr	r4, [sp]
   126bc:	add	sp, sp, #4
   126c0:	pop	{pc}		; (ldr pc, [sp], #4)
   126c4:	mov	r3, #4
   126c8:	mov	r1, #1
   126cc:	mov	r2, r3
   126d0:	mov	r0, r4
   126d4:	bl	17f90 <flatcc_verify_field@@Base>
   126d8:	cmp	r0, #0
   126dc:	bne	126b8 <_start@@Base+0x268>
   126e0:	mov	r2, r0
   126e4:	mov	r1, #2
   126e8:	mov	r0, r4
   126ec:	bl	17ffc <flatcc_verify_string_field@@Base>
   126f0:	cmp	r0, #0
   126f4:	bne	126b8 <_start@@Base+0x268>
   126f8:	mov	r3, #8
   126fc:	mov	r1, #3
   12700:	mov	r2, r3
   12704:	mov	r0, r4
   12708:	bl	17f90 <flatcc_verify_field@@Base>
   1270c:	cmp	r0, #0
   12710:	bne	126b8 <_start@@Base+0x268>
   12714:	mov	r2, r0
   12718:	mov	r1, #4
   1271c:	mov	r0, r4
   12720:	bl	17ffc <flatcc_verify_string_field@@Base>
   12724:	cmp	r0, #0
   12728:	bne	126b8 <_start@@Base+0x268>
   1272c:	mov	r3, #8
   12730:	mov	r1, #5
   12734:	mov	r2, r3
   12738:	mov	r0, r4
   1273c:	bl	17f90 <flatcc_verify_field@@Base>
   12740:	cmp	r0, #0
   12744:	bne	126b8 <_start@@Base+0x268>
   12748:	mov	r3, #4
   1274c:	mov	r1, #6
   12750:	mov	r2, r3
   12754:	mov	r0, r4
   12758:	bl	17f90 <flatcc_verify_field@@Base>
   1275c:	cmp	r0, #0
   12760:	bne	126b8 <_start@@Base+0x268>
   12764:	mov	r3, #8
   12768:	mov	r1, #7
   1276c:	mov	r2, r3
   12770:	mov	r0, r4
   12774:	bl	17f90 <flatcc_verify_field@@Base>
   12778:	cmp	r0, #0
   1277c:	bne	126b8 <_start@@Base+0x268>
   12780:	mov	r3, #4
   12784:	mov	r0, r4
   12788:	ldr	r4, [sp]
   1278c:	mov	r2, r3
   12790:	mov	r1, #8
   12794:	ldr	lr, [sp, #4]
   12798:	add	sp, sp, #8
   1279c:	b	17f90 <flatcc_verify_field@@Base>
   127a0:	ldr	r3, [pc, #112]	; 12818 <_start@@Base+0x3c8>
   127a4:	mov	r2, #0
   127a8:	mov	r1, r2
   127ac:	str	r4, [sp, #-8]!
   127b0:	mov	r4, r0
   127b4:	str	lr, [sp, #4]
   127b8:	add	r3, pc, r3
   127bc:	bl	183c4 <flatcc_verify_table_field@@Base>
   127c0:	cmp	r0, #0
   127c4:	beq	127d4 <_start@@Base+0x384>
   127c8:	ldr	r4, [sp]
   127cc:	add	sp, sp, #4
   127d0:	pop	{pc}		; (ldr pc, [sp], #4)
   127d4:	ldr	r3, [pc, #64]	; 1281c <_start@@Base+0x3cc>
   127d8:	mov	r2, r0
   127dc:	mov	r1, #1
   127e0:	mov	r0, r4
   127e4:	add	r3, pc, r3
   127e8:	bl	183c4 <flatcc_verify_table_field@@Base>
   127ec:	cmp	r0, #0
   127f0:	bne	127c8 <_start@@Base+0x378>
   127f4:	ldr	r3, [pc, #36]	; 12820 <_start@@Base+0x3d0>
   127f8:	mov	r2, r0
   127fc:	mov	r1, #2
   12800:	mov	r0, r4
   12804:	ldr	r4, [sp]
   12808:	ldr	lr, [sp, #4]
   1280c:	add	sp, sp, #8
   12810:	add	r3, pc, r3
   12814:	b	183c4 <flatcc_verify_table_field@@Base>
   12818:			; <UNDEFINED> instruction: 0xfffffed8
   1281c:	andeq	r0, r0, r4, ror #14
   12820:			; <UNDEFINED> instruction: 0xfffffd40
   12824:	mov	r3, #16
   12828:	mov	r2, #32
   1282c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12830:	mov	r1, #0
   12834:	strd	r6, [sp, #8]
   12838:	mov	r4, r0
   1283c:	str	r8, [sp, #16]
   12840:	str	lr, [sp, #20]
   12844:	sub	sp, sp, #8
   12848:	bl	17f90 <flatcc_verify_field@@Base>
   1284c:	cmp	r0, #0
   12850:	beq	1286c <_start@@Base+0x41c>
   12854:	add	sp, sp, #8
   12858:	ldrd	r4, [sp]
   1285c:	ldrd	r6, [sp, #8]
   12860:	ldr	r8, [sp, #16]
   12864:	add	sp, sp, #20
   12868:	pop	{pc}		; (ldr pc, [sp], #4)
   1286c:	mov	r3, #2
   12870:	mov	r0, r4
   12874:	mov	r2, r3
   12878:	mov	r1, r3
   1287c:	bl	17f90 <flatcc_verify_field@@Base>
   12880:	cmp	r0, #0
   12884:	bne	12854 <_start@@Base+0x404>
   12888:	mov	r3, #2
   1288c:	mov	r1, #1
   12890:	mov	r2, r3
   12894:	mov	r0, r4
   12898:	bl	17f90 <flatcc_verify_field@@Base>
   1289c:	cmp	r0, #0
   128a0:	bne	12854 <_start@@Base+0x404>
   128a4:	mov	r2, #1
   128a8:	mov	r1, #3
   128ac:	mov	r0, r4
   128b0:	bl	17ffc <flatcc_verify_string_field@@Base>
   128b4:	cmp	r0, #0
   128b8:	bne	12854 <_start@@Base+0x404>
   128bc:	mov	r3, #1
   128c0:	mov	r1, #6
   128c4:	mov	r2, r3
   128c8:	mov	r0, r4
   128cc:	bl	17f90 <flatcc_verify_field@@Base>
   128d0:	cmp	r0, #0
   128d4:	bne	12854 <_start@@Base+0x404>
   128d8:	mov	r5, #1
   128dc:	mvn	r6, #0
   128e0:	mov	r2, r0
   128e4:	mov	r3, r5
   128e8:	mov	r1, #5
   128ec:	mov	r0, r4
   128f0:	stm	sp, {r5, r6}
   128f4:	bl	180dc <flatcc_verify_vector_field@@Base>
   128f8:	cmp	r0, #0
   128fc:	bne	12854 <_start@@Base+0x404>
   12900:	ldr	r3, [pc, #888]	; 12c80 <_start@@Base+0x830>
   12904:	mov	r2, r0
   12908:	mov	r1, #11
   1290c:	mov	r0, r4
   12910:	add	r3, pc, r3
   12914:	bl	18530 <flatcc_verify_table_vector_field@@Base>
   12918:	cmp	r0, #0
   1291c:	bne	12854 <_start@@Base+0x404>
   12920:	mov	r2, r0
   12924:	mov	r1, #10
   12928:	mov	r0, r4
   1292c:	bl	181e0 <flatcc_verify_string_vector_field@@Base>
   12930:	cmp	r0, #0
   12934:	bne	12854 <_start@@Base+0x404>
   12938:	mov	r2, r0
   1293c:	mov	r1, #28
   12940:	mov	r0, r4
   12944:	bl	181e0 <flatcc_verify_string_vector_field@@Base>
   12948:	cmp	r0, #0
   1294c:	bne	12854 <_start@@Base+0x404>
   12950:	mov	r2, r0
   12954:	mov	r3, r5
   12958:	stm	sp, {r5, r6}
   1295c:	mov	r1, #24
   12960:	mov	r0, r4
   12964:	bl	180dc <flatcc_verify_vector_field@@Base>
   12968:	cmp	r0, #0
   1296c:	bne	12854 <_start@@Base+0x404>
   12970:	mvn	ip, #-536870912	; 0xe0000000
   12974:	mov	r5, #4
   12978:	mov	r3, #8
   1297c:	mov	r2, #0
   12980:	mov	r1, #29
   12984:	mov	r0, r4
   12988:	stm	sp, {r5, ip}
   1298c:	bl	180dc <flatcc_verify_vector_field@@Base>
   12990:	cmp	r0, #0
   12994:	bne	12854 <_start@@Base+0x404>
   12998:	ldr	r7, [pc, #740]	; 12c84 <_start@@Base+0x834>
   1299c:	mov	r2, r0
   129a0:	mov	r1, #12
   129a4:	mov	r0, r4
   129a8:	add	r7, pc, r7
   129ac:	mov	r3, r7
   129b0:	bl	183c4 <flatcc_verify_table_field@@Base>
   129b4:	cmp	r0, #0
   129b8:	bne	12854 <_start@@Base+0x404>
   129bc:	ldr	r3, [pc, #708]	; 12c88 <_start@@Base+0x838>
   129c0:	mov	r2, r0
   129c4:	mov	r1, #8
   129c8:	mov	r0, r4
   129cc:	add	r3, pc, r3
   129d0:	bl	19178 <flatcc_verify_union_field@@Base>
   129d4:	cmp	r0, #0
   129d8:	bne	12854 <_start@@Base+0x404>
   129dc:	mvn	r6, #-1073741824	; 0xc0000000
   129e0:	mov	r8, #2
   129e4:	mov	r2, r0
   129e8:	mov	r3, r5
   129ec:	mov	r1, #9
   129f0:	mov	r0, r4
   129f4:	str	r8, [sp]
   129f8:	str	r6, [sp, #4]
   129fc:	bl	180dc <flatcc_verify_vector_field@@Base>
   12a00:	cmp	r0, #0
   12a04:	bne	12854 <_start@@Base+0x404>
   12a08:	mov	r2, r0
   12a0c:	mov	r3, r5
   12a10:	str	r8, [sp]
   12a14:	mov	r1, #31
   12a18:	mov	r0, r4
   12a1c:	str	r6, [sp, #4]
   12a20:	bl	180dc <flatcc_verify_vector_field@@Base>
   12a24:	cmp	r0, #0
   12a28:	bne	12854 <_start@@Base+0x404>
   12a2c:	mov	r6, #1
   12a30:	mov	r3, r0
   12a34:	mov	r2, r0
   12a38:	mov	r1, #13
   12a3c:	mov	r0, r4
   12a40:	strd	r6, [sp]
   12a44:	bl	18fa4 <flatcc_verify_table_as_nested_root@@Base>
   12a48:	cmp	r0, #0
   12a4c:	bne	12854 <_start@@Base+0x404>
   12a50:	ldr	r3, [pc, #564]	; 12c8c <_start@@Base+0x83c>
   12a54:	mov	r2, r0
   12a58:	mov	r1, #14
   12a5c:	mov	r0, r4
   12a60:	add	r3, pc, r3
   12a64:	bl	183c4 <flatcc_verify_table_field@@Base>
   12a68:	cmp	r0, #0
   12a6c:	bne	12854 <_start@@Base+0x404>
   12a70:	mov	r3, r6
   12a74:	mov	r2, r6
   12a78:	mov	r1, #15
   12a7c:	mov	r0, r4
   12a80:	bl	17f90 <flatcc_verify_field@@Base>
   12a84:	cmp	r0, #0
   12a88:	bne	12854 <_start@@Base+0x404>
   12a8c:	mov	r3, r5
   12a90:	mov	r2, r5
   12a94:	mov	r1, #16
   12a98:	mov	r0, r4
   12a9c:	bl	17f90 <flatcc_verify_field@@Base>
   12aa0:	cmp	r0, #0
   12aa4:	bne	12854 <_start@@Base+0x404>
   12aa8:	mov	r3, r5
   12aac:	mov	r2, r5
   12ab0:	mov	r1, #17
   12ab4:	mov	r0, r4
   12ab8:	bl	17f90 <flatcc_verify_field@@Base>
   12abc:	cmp	r0, #0
   12ac0:	bne	12854 <_start@@Base+0x404>
   12ac4:	mov	r3, #8
   12ac8:	mov	r1, #18
   12acc:	mov	r2, r3
   12ad0:	mov	r0, r4
   12ad4:	bl	17f90 <flatcc_verify_field@@Base>
   12ad8:	cmp	r0, #0
   12adc:	bne	12854 <_start@@Base+0x404>
   12ae0:	mov	r3, #8
   12ae4:	mov	r1, #19
   12ae8:	mov	r2, r3
   12aec:	mov	r0, r4
   12af0:	bl	17f90 <flatcc_verify_field@@Base>
   12af4:	cmp	r0, #0
   12af8:	bne	12854 <_start@@Base+0x404>
   12afc:	mov	r3, r5
   12b00:	mov	r1, #20
   12b04:	mov	r2, r5
   12b08:	mov	r0, r4
   12b0c:	bl	17f90 <flatcc_verify_field@@Base>
   12b10:	cmp	r0, #0
   12b14:	bne	12854 <_start@@Base+0x404>
   12b18:	mov	r3, r5
   12b1c:	mov	r1, #21
   12b20:	mov	r2, r5
   12b24:	mov	r0, r4
   12b28:	bl	17f90 <flatcc_verify_field@@Base>
   12b2c:	cmp	r0, #0
   12b30:	bne	12854 <_start@@Base+0x404>
   12b34:	mov	r3, #8
   12b38:	mov	r1, #22
   12b3c:	mov	r2, r3
   12b40:	mov	r0, r4
   12b44:	bl	17f90 <flatcc_verify_field@@Base>
   12b48:	cmp	r0, #0
   12b4c:	bne	12854 <_start@@Base+0x404>
   12b50:	mov	r3, #8
   12b54:	mov	r1, #23
   12b58:	mov	r2, r3
   12b5c:	mov	r0, r4
   12b60:	bl	17f90 <flatcc_verify_field@@Base>
   12b64:	cmp	r0, #0
   12b68:	bne	12854 <_start@@Base+0x404>
   12b6c:	mov	r3, r5
   12b70:	mov	r1, #25
   12b74:	mov	r2, r5
   12b78:	mov	r0, r4
   12b7c:	bl	17f90 <flatcc_verify_field@@Base>
   12b80:	cmp	r0, #0
   12b84:	bne	12854 <_start@@Base+0x404>
   12b88:	mov	r3, r5
   12b8c:	mov	r1, #26
   12b90:	mov	r2, r5
   12b94:	mov	r0, r4
   12b98:	bl	17f90 <flatcc_verify_field@@Base>
   12b9c:	cmp	r0, #0
   12ba0:	bne	12854 <_start@@Base+0x404>
   12ba4:	mov	r3, r5
   12ba8:	mov	r1, #27
   12bac:	mov	r2, r5
   12bb0:	mov	r0, r4
   12bb4:	bl	17f90 <flatcc_verify_field@@Base>
   12bb8:	cmp	r0, #0
   12bbc:	bne	12854 <_start@@Base+0x404>
   12bc0:	mvn	ip, #0
   12bc4:	mov	r1, r6
   12bc8:	mov	r2, r0
   12bcc:	mov	r3, r6
   12bd0:	mov	r0, r4
   12bd4:	stm	sp, {r1, ip}
   12bd8:	mov	r1, #30
   12bdc:	bl	180dc <flatcc_verify_vector_field@@Base>
   12be0:	cmp	r0, #0
   12be4:	bne	12854 <_start@@Base+0x404>
   12be8:	mov	r5, #8
   12bec:	mvn	r6, #-536870912	; 0xe0000000
   12bf0:	mov	r3, r5
   12bf4:	mov	r2, #0
   12bf8:	mov	r1, #32
   12bfc:	mov	r0, r4
   12c00:	stm	sp, {r5, r6}
   12c04:	bl	180dc <flatcc_verify_vector_field@@Base>
   12c08:	cmp	r0, #0
   12c0c:	bne	12854 <_start@@Base+0x404>
   12c10:	mov	r2, r0
   12c14:	mov	r3, r5
   12c18:	stm	sp, {r5, r6}
   12c1c:	mov	r1, #33	; 0x21
   12c20:	mov	r0, r4
   12c24:	bl	180dc <flatcc_verify_vector_field@@Base>
   12c28:	cmp	r0, #0
   12c2c:	bne	12854 <_start@@Base+0x404>
   12c30:	ldr	r3, [pc, #88]	; 12c90 <_start@@Base+0x840>
   12c34:	mov	r2, r0
   12c38:	mov	r1, #34	; 0x22
   12c3c:	mov	r0, r4
   12c40:	add	r3, pc, r3
   12c44:	bl	183c4 <flatcc_verify_table_field@@Base>
   12c48:	cmp	r0, #0
   12c4c:	bne	12854 <_start@@Base+0x404>
   12c50:	ldr	r3, [pc, #60]	; 12c94 <_start@@Base+0x844>
   12c54:	mov	r2, r0
   12c58:	mov	r1, #35	; 0x23
   12c5c:	mov	r0, r4
   12c60:	add	r3, pc, r3
   12c64:	add	sp, sp, #8
   12c68:	ldrd	r4, [sp]
   12c6c:	ldrd	r6, [sp, #8]
   12c70:	ldr	r8, [sp, #16]
   12c74:	ldr	lr, [sp, #20]
   12c78:	add	sp, sp, #24
   12c7c:	b	183c4 <flatcc_verify_table_field@@Base>
   12c80:			; <UNDEFINED> instruction: 0xffffff0c
   12c84:			; <UNDEFINED> instruction: 0xfffffe74
   12c88:	andeq	r0, r0, r8, asr r3
   12c8c:			; <UNDEFINED> instruction: 0xfffffbc8
   12c90:			; <UNDEFINED> instruction: 0xfffff8f8
   12c94:	andeq	r0, r0, r0, lsr r0
   12c98:	strd	r4, [sp, #-16]!
   12c9c:	mov	r4, #1
   12ca0:	mvn	r5, #0
   12ca4:	str	r6, [sp, #8]
   12ca8:	mov	r2, #0
   12cac:	mov	r3, r4
   12cb0:	str	lr, [sp, #12]
   12cb4:	sub	sp, sp, #8
   12cb8:	mov	r1, r2
   12cbc:	mov	r6, r0
   12cc0:	strd	r4, [sp]
   12cc4:	bl	180dc <flatcc_verify_vector_field@@Base>
   12cc8:	subs	r2, r0, #0
   12ccc:	beq	12ce8 <_start@@Base+0x898>
   12cd0:	mov	r0, r2
   12cd4:	add	sp, sp, #8
   12cd8:	ldrd	r4, [sp]
   12cdc:	ldr	r6, [sp, #8]
   12ce0:	add	sp, sp, #12
   12ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ce8:	mov	r3, r4
   12cec:	mov	r1, r4
   12cf0:	strd	r4, [sp]
   12cf4:	mov	r0, r6
   12cf8:	bl	180dc <flatcc_verify_vector_field@@Base>
   12cfc:	subs	r2, r0, #0
   12d00:	bne	12cd0 <_start@@Base+0x880>
   12d04:	ldr	ip, [pc, #28]	; 12d28 <_start@@Base+0x8d8>
   12d08:	mov	r3, r2
   12d0c:	mov	r0, r6
   12d10:	mov	r1, #2
   12d14:	add	ip, pc, ip
   12d18:	stm	sp, {r4, ip}
   12d1c:	bl	18fa4 <flatcc_verify_table_as_nested_root@@Base>
   12d20:	mov	r2, r0
   12d24:	b	12cd0 <_start@@Base+0x880>
   12d28:			; <UNDEFINED> instruction: 0xfffffb08
   12d2c:	ldrb	r3, [r0, #12]
   12d30:	sub	r3, r3, #1
   12d34:	cmp	r3, #3
   12d38:	addls	pc, pc, r3, lsl #2
   12d3c:	b	12d80 <_start@@Base+0x930>
   12d40:	b	12d74 <_start@@Base+0x924>
   12d44:	b	12d68 <_start@@Base+0x918>
   12d48:	b	12d5c <_start@@Base+0x90c>
   12d4c:	b	12d50 <_start@@Base+0x900>
   12d50:	ldr	r1, [pc, #48]	; 12d88 <_start@@Base+0x938>
   12d54:	add	r1, pc, r1
   12d58:	b	18854 <flatcc_verify_union_table@@Base>
   12d5c:	ldr	r1, [pc, #40]	; 12d8c <_start@@Base+0x93c>
   12d60:	add	r1, pc, r1
   12d64:	b	18854 <flatcc_verify_union_table@@Base>
   12d68:	ldr	r1, [pc, #32]	; 12d90 <_start@@Base+0x940>
   12d6c:	add	r1, pc, r1
   12d70:	b	18854 <flatcc_verify_union_table@@Base>
   12d74:	ldr	r1, [pc, #24]	; 12d94 <_start@@Base+0x944>
   12d78:	add	r1, pc, r1
   12d7c:	b	18854 <flatcc_verify_union_table@@Base>
   12d80:	mov	r0, #0
   12d84:	bx	lr
   12d88:	andeq	r0, r0, ip, lsr r0
   12d8c:	andeq	r0, r0, r0, ror #3
   12d90:			; <UNDEFINED> instruction: 0xfffff834
   12d94:			; <UNDEFINED> instruction: 0xfffffaa4
   12d98:	ldr	r3, [pc, #112]	; 12e10 <_start@@Base+0x9c0>
   12d9c:	mov	r2, #0
   12da0:	mov	r1, r2
   12da4:	str	r4, [sp, #-8]!
   12da8:	mov	r4, r0
   12dac:	str	lr, [sp, #4]
   12db0:	add	r3, pc, r3
   12db4:	bl	183c4 <flatcc_verify_table_field@@Base>
   12db8:	cmp	r0, #0
   12dbc:	beq	12dcc <_start@@Base+0x97c>
   12dc0:	ldr	r4, [sp]
   12dc4:	add	sp, sp, #4
   12dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   12dcc:	ldr	r3, [pc, #64]	; 12e14 <_start@@Base+0x9c4>
   12dd0:	mov	r2, r0
   12dd4:	mov	r1, #1
   12dd8:	mov	r0, r4
   12ddc:	add	r3, pc, r3
   12de0:	bl	183c4 <flatcc_verify_table_field@@Base>
   12de4:	cmp	r0, #0
   12de8:	bne	12dc0 <_start@@Base+0x970>
   12dec:	ldr	r3, [pc, #36]	; 12e18 <_start@@Base+0x9c8>
   12df0:	mov	r2, r0
   12df4:	mov	r1, #3
   12df8:	mov	r0, r4
   12dfc:	ldr	r4, [sp]
   12e00:	ldr	lr, [sp, #4]
   12e04:	add	sp, sp, #8
   12e08:	add	r3, pc, r3
   12e0c:	b	192cc <flatcc_verify_union_vector_field@@Base>
   12e10:			; <UNDEFINED> instruction: 0xfffff9e8
   12e14:	andeq	r0, r0, r8, lsr r0
   12e18:			; <UNDEFINED> instruction: 0xffffff1c
   12e1c:	strd	r4, [sp, #-16]!
   12e20:	mov	r2, #0
   12e24:	mov	r1, #1
   12e28:	ldr	r4, [pc, #164]	; 12ed4 <_start@@Base+0xa84>
   12e2c:	mov	r5, r0
   12e30:	str	r6, [sp, #8]
   12e34:	str	lr, [sp, #12]
   12e38:	add	r4, pc, r4
   12e3c:	mov	r3, r4
   12e40:	bl	19178 <flatcc_verify_union_field@@Base>
   12e44:	cmp	r0, #0
   12e48:	beq	12e5c <_start@@Base+0xa0c>
   12e4c:	ldrd	r4, [sp]
   12e50:	ldr	r6, [sp, #8]
   12e54:	add	sp, sp, #12
   12e58:	pop	{pc}		; (ldr pc, [sp], #4)
   12e5c:	mov	r2, r0
   12e60:	mov	r3, r4
   12e64:	mov	r1, #3
   12e68:	mov	r0, r5
   12e6c:	bl	19178 <flatcc_verify_union_field@@Base>
   12e70:	cmp	r0, #0
   12e74:	bne	12e4c <_start@@Base+0x9fc>
   12e78:	mov	r2, r0
   12e7c:	mov	r3, r4
   12e80:	mov	r1, #5
   12e84:	mov	r0, r5
   12e88:	bl	19178 <flatcc_verify_union_field@@Base>
   12e8c:	cmp	r0, #0
   12e90:	bne	12e4c <_start@@Base+0x9fc>
   12e94:	mov	r2, r0
   12e98:	mov	r3, r4
   12e9c:	mov	r1, #7
   12ea0:	mov	r0, r5
   12ea4:	bl	19178 <flatcc_verify_union_field@@Base>
   12ea8:	cmp	r0, #0
   12eac:	bne	12e4c <_start@@Base+0x9fc>
   12eb0:	mov	r3, r4
   12eb4:	mov	r2, r0
   12eb8:	ldr	r6, [sp, #8]
   12ebc:	mov	r0, r5
   12ec0:	mov	r1, #9
   12ec4:	ldrd	r4, [sp]
   12ec8:	ldr	lr, [sp, #12]
   12ecc:	add	sp, sp, #16
   12ed0:	b	192cc <flatcc_verify_union_vector_field@@Base>
   12ed4:	muleq	r0, r8, r0
   12ed8:	ldrb	r3, [r0, #12]
   12edc:	mov	r2, r0
   12ee0:	cmp	r3, #10
   12ee4:	bhi	12f0c <_start@@Base+0xabc>
   12ee8:	cmp	r3, #9
   12eec:	bcs	12f24 <_start@@Base+0xad4>
   12ef0:	cmp	r3, #2
   12ef4:	beq	12f38 <_start@@Base+0xae8>
   12ef8:	cmp	r3, #8
   12efc:	bne	12f30 <_start@@Base+0xae0>
   12f00:	mov	r2, #2
   12f04:	mov	r1, r2
   12f08:	b	18950 <flatcc_verify_union_struct@@Base>
   12f0c:	cmp	r3, #11
   12f10:	beq	12f1c <_start@@Base+0xacc>
   12f14:	cmp	r3, #255	; 0xff
   12f18:	bne	12f30 <_start@@Base+0xae0>
   12f1c:	mov	r0, r2
   12f20:	b	189b0 <flatcc_verify_union_string@@Base>
   12f24:	mov	r2, #4
   12f28:	mov	r1, r2
   12f2c:	b	18950 <flatcc_verify_union_struct@@Base>
   12f30:	mov	r0, #0
   12f34:	bx	lr
   12f38:	ldr	r1, [pc, #4]	; 12f44 <_start@@Base+0xaf4>
   12f3c:	add	r1, pc, r1
   12f40:	b	18854 <flatcc_verify_union_table@@Base>
   12f44:			; <UNDEFINED> instruction: 0xfffff604
   12f48:	mov	r0, #0
   12f4c:	bx	lr
   12f50:	mov	r3, #8
   12f54:	mov	r1, #0
   12f58:	str	r4, [sp, #-8]!
   12f5c:	mov	r2, r3
   12f60:	mov	r4, r0
   12f64:	str	lr, [sp, #4]
   12f68:	bl	17f90 <flatcc_verify_field@@Base>
   12f6c:	cmp	r0, #0
   12f70:	beq	12f80 <_start@@Base+0xb30>
   12f74:	ldr	r4, [sp]
   12f78:	add	sp, sp, #4
   12f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f80:	mov	r3, #4
   12f84:	mov	r0, r4
   12f88:	ldr	r4, [sp]
   12f8c:	mov	r2, r3
   12f90:	mov	r1, #1
   12f94:	ldr	lr, [sp, #4]
   12f98:	add	sp, sp, #8
   12f9c:	b	17f90 <flatcc_verify_field@@Base>
   12fa0:	strd	r4, [sp, #-16]!
   12fa4:	mov	r4, r0
   12fa8:	mov	r0, #1
   12fac:	ldr	ip, [r4, #28]
   12fb0:	mov	r3, r0
   12fb4:	mov	r5, r2
   12fb8:	str	r6, [sp, #8]
   12fbc:	str	lr, [sp, #12]
   12fc0:	sub	sp, sp, #8
   12fc4:	str	r0, [sp]
   12fc8:	add	r2, r1, ip
   12fcc:	add	r1, r4, #60	; 0x3c
   12fd0:	ldr	r0, [r4, #40]	; 0x28
   12fd4:	ldr	r6, [r4, #48]	; 0x30
   12fd8:	blx	r6
   12fdc:	cmp	r0, #0
   12fe0:	bne	13020 <_start@@Base+0xbd0>
   12fe4:	ldr	r1, [r4, #28]
   12fe8:	ldr	ip, [r4, #32]
   12fec:	ldrd	r2, [r4, #60]	; 0x3c
   12ff0:	sub	r3, r3, r1
   12ff4:	add	r2, r2, r1
   12ff8:	cmp	r3, r5
   12ffc:	movcs	r3, r5
   13000:	str	r2, [r4, #16]
   13004:	str	r3, [r4, #24]
   13008:	str	r5, [ip, #4]
   1300c:	add	sp, sp, #8
   13010:	ldrd	r4, [sp]
   13014:	ldr	r6, [sp, #8]
   13018:	add	sp, sp, #12
   1301c:	pop	{pc}		; (ldr pc, [sp], #4)
   13020:	mvn	r0, #0
   13024:	b	1300c <_start@@Base+0xbbc>

00013028 <flatcc_builder_default_alloc@@Base>:
   13028:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1302c:	subs	r5, r2, #0
   13030:	strd	r6, [sp, #8]
   13034:	mov	r6, r1
   13038:	str	r8, [sp, #16]
   1303c:	str	lr, [sp, #20]
   13040:	beq	13078 <flatcc_builder_default_alloc@@Base+0x50>
   13044:	mov	r7, r3
   13048:	ldr	r3, [sp, #24]
   1304c:	sub	r2, r3, #1
   13050:	cmp	r2, #6
   13054:	addls	pc, pc, r2, lsl #2
   13058:	b	13128 <flatcc_builder_default_alloc@@Base+0x100>
   1305c:	b	130a8 <flatcc_builder_default_alloc@@Base+0x80>
   13060:	b	13128 <flatcc_builder_default_alloc@@Base+0x100>
   13064:	b	13128 <flatcc_builder_default_alloc@@Base+0x100>
   13068:	b	13120 <flatcc_builder_default_alloc@@Base+0xf8>
   1306c:	b	13110 <flatcc_builder_default_alloc@@Base+0xe8>
   13070:	b	13128 <flatcc_builder_default_alloc@@Base+0x100>
   13074:	b	13118 <flatcc_builder_default_alloc@@Base+0xf0>
   13078:	ldr	r0, [r1]
   1307c:	cmp	r0, #0
   13080:	beq	13094 <flatcc_builder_default_alloc@@Base+0x6c>
   13084:	bl	12288 <free@plt>
   13088:	mov	r0, r5
   1308c:	str	r5, [r6]
   13090:	str	r5, [r6, #4]
   13094:	ldrd	r4, [sp]
   13098:	ldrd	r6, [sp, #8]
   1309c:	ldr	r8, [sp, #16]
   130a0:	add	sp, sp, #20
   130a4:	pop	{pc}		; (ldr pc, [sp], #4)
   130a8:	mov	r4, #256	; 0x100
   130ac:	cmp	r4, r5
   130b0:	bcs	130c0 <flatcc_builder_default_alloc@@Base+0x98>
   130b4:	lsl	r4, r4, #1
   130b8:	cmp	r5, r4
   130bc:	bhi	130b4 <flatcc_builder_default_alloc@@Base+0x8c>
   130c0:	ldr	r2, [r6, #4]
   130c4:	cmp	r5, r2
   130c8:	bhi	130d8 <flatcc_builder_default_alloc@@Base+0xb0>
   130cc:	cmp	r4, r2, lsr #1
   130d0:	movls	r0, #0
   130d4:	bls	13094 <flatcc_builder_default_alloc@@Base+0x6c>
   130d8:	mov	r1, r4
   130dc:	ldr	r0, [r6]
   130e0:	bl	122ac <realloc@plt>
   130e4:	subs	r5, r0, #0
   130e8:	beq	13144 <flatcc_builder_default_alloc@@Base+0x11c>
   130ec:	cmp	r7, #0
   130f0:	beq	13100 <flatcc_builder_default_alloc@@Base+0xd8>
   130f4:	ldr	r0, [r6, #4]
   130f8:	cmp	r0, r4
   130fc:	bcc	13130 <flatcc_builder_default_alloc@@Base+0x108>
   13100:	mov	r0, #0
   13104:	str	r5, [r6]
   13108:	str	r4, [r6, #4]
   1310c:	b	13094 <flatcc_builder_default_alloc@@Base+0x6c>
   13110:	mov	r4, r5
   13114:	b	130c0 <flatcc_builder_default_alloc@@Base+0x98>
   13118:	mov	r4, #64	; 0x40
   1311c:	b	130ac <flatcc_builder_default_alloc@@Base+0x84>
   13120:	mov	r4, #288	; 0x120
   13124:	b	130ac <flatcc_builder_default_alloc@@Base+0x84>
   13128:	mov	r4, #32
   1312c:	b	130ac <flatcc_builder_default_alloc@@Base+0x84>
   13130:	sub	r2, r4, r0
   13134:	mov	r1, #0
   13138:	add	r0, r5, r0
   1313c:	bl	122f4 <memset@plt>
   13140:	b	13100 <flatcc_builder_default_alloc@@Base+0xd8>
   13144:	mvn	r0, #0
   13148:	b	13094 <flatcc_builder_default_alloc@@Base+0x6c>
   1314c:	ldr	r3, [pc, #32]	; 13174 <flatcc_builder_default_alloc@@Base+0x14c>
   13150:	mov	r2, #308	; 0x134
   13154:	str	r4, [sp, #-8]!
   13158:	ldr	r1, [pc, #24]	; 13178 <flatcc_builder_default_alloc@@Base+0x150>
   1315c:	str	lr, [sp, #4]
   13160:	ldr	r0, [pc, #20]	; 1317c <flatcc_builder_default_alloc@@Base+0x154>
   13164:	add	r3, pc, r3
   13168:	add	r1, pc, r1
   1316c:	add	r0, pc, r0
   13170:	bl	12324 <__assert_fail@plt>
   13174:			; <UNDEFINED> instruction: 0x000065b8
   13178:	andeq	r6, r0, r4, lsl #26
   1317c:	andeq	r6, r0, r8, lsl #27
   13180:	ldr	r3, [pc, #36]	; 131ac <flatcc_builder_default_alloc@@Base+0x184>
   13184:	movw	r2, #677	; 0x2a5
   13188:	str	r4, [sp, #-8]!
   1318c:	ldr	r1, [pc, #28]	; 131b0 <flatcc_builder_default_alloc@@Base+0x188>
   13190:	str	lr, [sp, #4]
   13194:	ldr	r0, [pc, #24]	; 131b4 <flatcc_builder_default_alloc@@Base+0x18c>
   13198:	add	r3, pc, r3
   1319c:	add	r3, r3, #16
   131a0:	add	r1, pc, r1
   131a4:	add	r0, pc, r0
   131a8:	bl	12324 <__assert_fail@plt>
   131ac:	andeq	r6, r0, r4, lsl #11
   131b0:	andeq	r6, r0, ip, asr #25
   131b4:	andeq	r6, r0, r0, asr sp
   131b8:	strd	r4, [sp, #-12]!
   131bc:	cmp	r2, #0
   131c0:	mov	ip, r0
   131c4:	str	lr, [sp, #8]
   131c8:	sub	sp, sp, #84	; 0x54
   131cc:	ldr	lr, [pc, #248]	; 132cc <flatcc_builder_default_alloc@@Base+0x2a4>
   131d0:	add	lr, pc, lr
   131d4:	bne	131e4 <flatcc_builder_default_alloc@@Base+0x1bc>
   131d8:	ldrh	r2, [r0, #132]	; 0x84
   131dc:	cmp	r2, #0
   131e0:	moveq	r2, #1
   131e4:	ldrh	r0, [r1]
   131e8:	cmp	r0, #3
   131ec:	bhi	131fc <flatcc_builder_default_alloc@@Base+0x1d4>
   131f0:	mov	r4, #4
   131f4:	mov	r0, r4
   131f8:	strh	r4, [r1]
   131fc:	cmp	r2, r0
   13200:	strhhi	r2, [r1]
   13204:	cmp	r3, #0
   13208:	bne	1321c <flatcc_builder_default_alloc@@Base+0x1f4>
   1320c:	ldr	r4, [ip, #140]	; 0x8c
   13210:	sub	r2, r2, #1
   13214:	ands	r1, r2, r4
   13218:	bne	13230 <flatcc_builder_default_alloc@@Base+0x208>
   1321c:	mov	r0, #0
   13220:	add	sp, sp, #84	; 0x54
   13224:	ldrd	r4, [sp]
   13228:	add	sp, sp, #8
   1322c:	pop	{pc}		; (ldr pc, [sp], #4)
   13230:	ldr	r3, [pc, #152]	; 132d0 <flatcc_builder_default_alloc@@Base+0x2a8>
   13234:	add	r0, r4, r1
   13238:	mov	r2, #1
   1323c:	str	r1, [sp, #8]
   13240:	cmp	r4, r0
   13244:	ldr	r3, [lr, r3]
   13248:	str	r0, [ip, #140]	; 0x8c
   1324c:	strd	r2, [sp, #12]
   13250:	str	r1, [sp, #20]
   13254:	bgt	132a8 <flatcc_builder_default_alloc@@Base+0x280>
   13258:	mov	r3, r4
   1325c:	str	r1, [sp]
   13260:	add	r1, sp, #16
   13264:	ldr	r0, [ip, #36]	; 0x24
   13268:	ldr	r5, [ip, #44]	; 0x2c
   1326c:	blx	r5
   13270:	cmp	r0, #0
   13274:	bne	132a4 <flatcc_builder_default_alloc@@Base+0x27c>
   13278:	cmn	r4, #1
   1327c:	bne	1321c <flatcc_builder_default_alloc@@Base+0x1f4>
   13280:	ldr	r3, [pc, #76]	; 132d4 <flatcc_builder_default_alloc@@Base+0x2ac>
   13284:	movw	r2, #702	; 0x2be
   13288:	ldr	r1, [pc, #72]	; 132d8 <flatcc_builder_default_alloc@@Base+0x2b0>
   1328c:	ldr	r0, [pc, #72]	; 132dc <flatcc_builder_default_alloc@@Base+0x2b4>
   13290:	add	r3, pc, r3
   13294:	add	r3, r3, #28
   13298:	add	r1, pc, r1
   1329c:	add	r0, pc, r0
   132a0:	bl	12324 <__assert_fail@plt>
   132a4:	bl	13180 <flatcc_builder_default_alloc@@Base+0x158>
   132a8:	ldr	r3, [pc, #48]	; 132e0 <flatcc_builder_default_alloc@@Base+0x2b8>
   132ac:	movw	r2, #673	; 0x2a1
   132b0:	ldr	r1, [pc, #44]	; 132e4 <flatcc_builder_default_alloc@@Base+0x2bc>
   132b4:	ldr	r0, [pc, #44]	; 132e8 <flatcc_builder_default_alloc@@Base+0x2c0>
   132b8:	add	r3, pc, r3
   132bc:	add	r3, r3, #16
   132c0:	add	r1, pc, r1
   132c4:	add	r0, pc, r0
   132c8:	bl	12324 <__assert_fail@plt>
   132cc:	andeq	r7, r1, r8, lsr #28
   132d0:	andeq	r0, r0, r4, asr #32
   132d4:	andeq	r6, r0, ip, lsl #9
   132d8:	ldrdeq	r6, [r0], -r4
   132dc:	andeq	r6, r0, r8, asr ip
   132e0:	andeq	r6, r0, r4, ror #8
   132e4:	andeq	r6, r0, ip, lsr #23
   132e8:	andeq	r6, r0, r0, lsr ip
   132ec:	ldr	r3, [pc, #36]	; 13318 <flatcc_builder_default_alloc@@Base+0x2f0>
   132f0:	movw	r2, #651	; 0x28b
   132f4:	str	r4, [sp, #-8]!
   132f8:	ldr	r1, [pc, #28]	; 1331c <flatcc_builder_default_alloc@@Base+0x2f4>
   132fc:	str	lr, [sp, #4]
   13300:	ldr	r0, [pc, #24]	; 13320 <flatcc_builder_default_alloc@@Base+0x2f8>
   13304:	add	r3, pc, r3
   13308:	add	r3, r3, #44	; 0x2c
   1330c:	add	r1, pc, r1
   13310:	add	r0, pc, r0
   13314:	bl	12324 <__assert_fail@plt>
   13318:	andeq	r6, r0, r8, lsl r4
   1331c:	andeq	r6, r0, r0, ror #22
   13320:	andeq	r6, r0, r4, ror #23
   13324:	ldr	r3, [pc, #36]	; 13350 <flatcc_builder_default_alloc@@Base+0x328>
   13328:	mov	r2, #892	; 0x37c
   1332c:	str	r4, [sp, #-8]!
   13330:	ldr	r1, [pc, #28]	; 13354 <flatcc_builder_default_alloc@@Base+0x32c>
   13334:	str	lr, [sp, #4]
   13338:	ldr	r0, [pc, #24]	; 13358 <flatcc_builder_default_alloc@@Base+0x330>
   1333c:	add	r3, pc, r3
   13340:	add	r3, r3, #56	; 0x38
   13344:	add	r1, pc, r1
   13348:	add	r0, pc, r0
   1334c:	bl	12324 <__assert_fail@plt>
   13350:	andeq	r6, r0, r0, ror #7
   13354:	andeq	r6, r0, r8, lsr #22
   13358:	andeq	r6, r0, r4, lsl #23
   1335c:	ldrd	r2, [r0, #156]	; 0x9c
   13360:	strd	r4, [sp, #-20]!	; 0xffffffec
   13364:	mov	r5, r1
   13368:	mov	r4, r0
   1336c:	strd	r6, [sp, #8]
   13370:	str	lr, [sp, #16]
   13374:	sub	sp, sp, #12
   13378:	add	r1, r2, #1
   1337c:	cmp	r1, r3
   13380:	str	r1, [r0, #156]	; 0x9c
   13384:	ble	13464 <flatcc_builder_default_alloc@@Base+0x43c>
   13388:	ldr	r3, [r0, #176]	; 0xb0
   1338c:	cmp	r1, r3
   13390:	cmpgt	r3, #0
   13394:	movgt	r3, #1
   13398:	movle	r3, #0
   1339c:	bgt	13474 <flatcc_builder_default_alloc@@Base+0x44c>
   133a0:	add	r2, r2, r2, lsl #3
   133a4:	ldr	r1, [r0, #88]	; 0x58
   133a8:	lsl	r6, r2, #2
   133ac:	add	r2, r6, #36	; 0x24
   133b0:	cmp	r2, r1
   133b4:	bls	133d8 <flatcc_builder_default_alloc@@Base+0x3b0>
   133b8:	mov	ip, #4
   133bc:	add	r1, r0, #84	; 0x54
   133c0:	ldr	r0, [r0, #40]	; 0x28
   133c4:	str	ip, [sp]
   133c8:	ldr	r7, [r4, #48]	; 0x30
   133cc:	blx	r7
   133d0:	cmp	r0, #0
   133d4:	bne	1347c <flatcc_builder_default_alloc@@Base+0x454>
   133d8:	ldr	r2, [r4, #84]	; 0x54
   133dc:	add	r2, r2, r6
   133e0:	cmp	r2, #0
   133e4:	str	r2, [r4, #32]
   133e8:	beq	13474 <flatcc_builder_default_alloc@@Base+0x44c>
   133ec:	ldr	r3, [r4, #88]	; 0x58
   133f0:	movw	r0, #36409	; 0x8e39
   133f4:	movt	r0, #14563	; 0x38e3
   133f8:	ldr	r1, [r4, #176]	; 0xb0
   133fc:	umull	r0, r3, r0, r3
   13400:	lsr	r3, r3, #3
   13404:	cmp	r3, r1
   13408:	cmpgt	r1, #0
   1340c:	movgt	r3, r1
   13410:	str	r3, [r4, #160]	; 0xa0
   13414:	ldr	r3, [r4, #20]
   13418:	mov	r1, #0
   1341c:	mvn	lr, #3
   13420:	mov	r0, r1
   13424:	ldr	ip, [r4, #28]
   13428:	ldrh	r6, [r4, #130]	; 0x82
   1342c:	str	r3, [r2, #8]
   13430:	add	r3, r3, ip
   13434:	add	r3, r3, #7
   13438:	bic	r3, r3, #7
   1343c:	strh	r6, [r2, #12]
   13440:	strh	r5, [r4, #130]	; 0x82
   13444:	stm	r2, {ip, lr}
   13448:	str	r1, [r4, #20]
   1344c:	str	r3, [r4, #28]
   13450:	add	sp, sp, #12
   13454:	ldrd	r4, [sp]
   13458:	ldrd	r6, [sp, #8]
   1345c:	add	sp, sp, #16
   13460:	pop	{pc}		; (ldr pc, [sp], #4)
   13464:	ldr	r2, [r0, #32]
   13468:	add	r2, r2, #36	; 0x24
   1346c:	str	r2, [r0, #32]
   13470:	b	13414 <flatcc_builder_default_alloc@@Base+0x3ec>
   13474:	mvn	r0, #0
   13478:	b	13450 <flatcc_builder_default_alloc@@Base+0x428>
   1347c:	bl	1314c <flatcc_builder_default_alloc@@Base+0x124>
   13480:	strd	r4, [sp, #-20]!	; 0xffffffec
   13484:	mov	r4, r0
   13488:	mov	r5, #4
   1348c:	ldrh	r0, [r0, #128]	; 0x80
   13490:	strd	r6, [sp, #8]
   13494:	str	lr, [sp, #16]
   13498:	sub	sp, sp, #92	; 0x5c
   1349c:	ldr	lr, [pc, #464]	; 13674 <flatcc_builder_default_alloc@@Base+0x64c>
   134a0:	str	r2, [sp, #12]
   134a4:	cmp	r0, #3
   134a8:	ldr	r6, [r4, #136]	; 0x88
   134ac:	movls	r0, #4
   134b0:	str	r5, [sp, #16]
   134b4:	str	r5, [sp, #28]
   134b8:	strhls	r0, [r4, #128]	; 0x80
   134bc:	mov	r0, #1
   134c0:	lsls	ip, r2, #2
   134c4:	add	lr, pc, lr
   134c8:	str	r0, [sp, #20]
   134cc:	add	r0, sp, #12
   134d0:	str	r0, [sp, #24]
   134d4:	and	r0, r6, #3
   134d8:	beq	134f4 <flatcc_builder_default_alloc@@Base+0x4cc>
   134dc:	add	r5, ip, r5
   134e0:	mov	r7, #2
   134e4:	str	r5, [sp, #16]
   134e8:	str	r7, [sp, #20]
   134ec:	str	r1, [sp, #32]
   134f0:	str	ip, [sp, #36]	; 0x24
   134f4:	cmp	r0, #0
   134f8:	beq	13528 <flatcc_builder_default_alloc@@Base+0x500>
   134fc:	ldr	r7, [pc, #372]	; 13678 <flatcc_builder_default_alloc@@Base+0x650>
   13500:	add	r5, r5, r0
   13504:	ldr	ip, [sp, #20]
   13508:	str	r5, [sp, #16]
   1350c:	ldr	r7, [lr, r7]
   13510:	add	lr, sp, #88	; 0x58
   13514:	add	ip, ip, #1
   13518:	add	lr, lr, ip, lsl #3
   1351c:	str	ip, [sp, #20]
   13520:	str	r7, [lr, #-72]	; 0xffffffb8
   13524:	str	r0, [lr, #-68]	; 0xffffffbc
   13528:	cmp	r2, #0
   1352c:	beq	135b8 <flatcc_builder_default_alloc@@Base+0x590>
   13530:	sub	r6, r1, r6
   13534:	add	lr, r2, r3
   13538:	add	r6, r6, r5
   1353c:	mov	r2, r3
   13540:	b	13570 <flatcc_builder_default_alloc@@Base+0x548>
   13544:	sub	r0, r6, r1
   13548:	cmp	r3, #0
   1354c:	add	r0, r0, ip
   13550:	str	r0, [r1, #-4]
   13554:	beq	13564 <flatcc_builder_default_alloc@@Base+0x53c>
   13558:	ldrb	r0, [r2]
   1355c:	cmp	r0, #0
   13560:	beq	13628 <flatcc_builder_default_alloc@@Base+0x600>
   13564:	add	r2, r2, #1
   13568:	cmp	lr, r2
   1356c:	beq	135b4 <flatcc_builder_default_alloc@@Base+0x58c>
   13570:	ldr	ip, [r1], #4
   13574:	cmp	ip, #0
   13578:	bne	13544 <flatcc_builder_default_alloc@@Base+0x51c>
   1357c:	cmp	r3, #0
   13580:	beq	13604 <flatcc_builder_default_alloc@@Base+0x5dc>
   13584:	ldrb	r0, [r2]
   13588:	cmp	r0, #0
   1358c:	beq	13564 <flatcc_builder_default_alloc@@Base+0x53c>
   13590:	ldr	r3, [pc, #228]	; 1367c <flatcc_builder_default_alloc@@Base+0x654>
   13594:	movw	r2, #1461	; 0x5b5
   13598:	ldr	r1, [pc, #224]	; 13680 <flatcc_builder_default_alloc@@Base+0x658>
   1359c:	ldr	r0, [pc, #224]	; 13684 <flatcc_builder_default_alloc@@Base+0x65c>
   135a0:	add	r3, pc, r3
   135a4:	add	r3, r3, #76	; 0x4c
   135a8:	add	r1, pc, r1
   135ac:	add	r0, pc, r0
   135b0:	bl	12324 <__assert_fail@plt>
   135b4:	ldr	r6, [r4, #136]	; 0x88
   135b8:	sub	r7, r6, r5
   135bc:	cmp	r7, r6
   135c0:	bge	13650 <flatcc_builder_default_alloc@@Base+0x628>
   135c4:	mov	r3, r7
   135c8:	add	r1, sp, #24
   135cc:	str	r5, [sp]
   135d0:	ldr	r2, [sp, #20]
   135d4:	ldr	r0, [r4, #36]	; 0x24
   135d8:	ldr	r5, [r4, #44]	; 0x2c
   135dc:	blx	r5
   135e0:	cmp	r0, #0
   135e4:	bne	1364c <flatcc_builder_default_alloc@@Base+0x624>
   135e8:	mov	r0, r7
   135ec:	str	r7, [r4, #136]	; 0x88
   135f0:	add	sp, sp, #92	; 0x5c
   135f4:	ldrd	r4, [sp]
   135f8:	ldrd	r6, [sp, #8]
   135fc:	add	sp, sp, #16
   13600:	pop	{pc}		; (ldr pc, [sp], #4)
   13604:	ldr	r3, [pc, #124]	; 13688 <flatcc_builder_default_alloc@@Base+0x660>
   13608:	movw	r2, #1463	; 0x5b7
   1360c:	ldr	r1, [pc, #120]	; 1368c <flatcc_builder_default_alloc@@Base+0x664>
   13610:	ldr	r0, [pc, #120]	; 13690 <flatcc_builder_default_alloc@@Base+0x668>
   13614:	add	r3, pc, r3
   13618:	add	r3, r3, #76	; 0x4c
   1361c:	add	r1, pc, r1
   13620:	add	r0, pc, r0
   13624:	bl	12324 <__assert_fail@plt>
   13628:	ldr	r3, [pc, #100]	; 13694 <flatcc_builder_default_alloc@@Base+0x66c>
   1362c:	movw	r2, #1457	; 0x5b1
   13630:	ldr	r1, [pc, #96]	; 13698 <flatcc_builder_default_alloc@@Base+0x670>
   13634:	ldr	r0, [pc, #96]	; 1369c <flatcc_builder_default_alloc@@Base+0x674>
   13638:	add	r3, pc, r3
   1363c:	add	r3, r3, #76	; 0x4c
   13640:	add	r1, pc, r1
   13644:	add	r0, pc, r0
   13648:	bl	12324 <__assert_fail@plt>
   1364c:	bl	132ec <flatcc_builder_default_alloc@@Base+0x2c4>
   13650:	ldr	r3, [pc, #72]	; 136a0 <flatcc_builder_default_alloc@@Base+0x678>
   13654:	movw	r2, #647	; 0x287
   13658:	ldr	r1, [pc, #68]	; 136a4 <flatcc_builder_default_alloc@@Base+0x67c>
   1365c:	ldr	r0, [pc, #68]	; 136a8 <flatcc_builder_default_alloc@@Base+0x680>
   13660:	add	r3, pc, r3
   13664:	add	r3, r3, #44	; 0x2c
   13668:	add	r1, pc, r1
   1366c:	add	r0, pc, r0
   13670:	bl	12324 <__assert_fail@plt>
   13674:	andeq	r7, r1, r4, lsr fp
   13678:	andeq	r0, r0, r4, asr #32
   1367c:	andeq	r6, r0, ip, ror r1
   13680:	andeq	r6, r0, r4, asr #17
   13684:	andeq	r6, r0, ip, asr #18
   13688:	andeq	r6, r0, r8, lsl #2
   1368c:	andeq	r6, r0, r0, asr r8
   13690:	ldrdeq	r6, [r0], -r4
   13694:	andeq	r6, r0, r4, ror #1
   13698:	andeq	r6, r0, ip, lsr #16
   1369c:	andeq	r6, r0, r4, lsr #17
   136a0:	strheq	r6, [r0], -ip
   136a4:	andeq	r6, r0, r4, lsl #16
   136a8:	andeq	r6, r0, r8, lsl #17

000136ac <flatcc_builder_flush_vtable_cache@@Base>:
   136ac:	ldr	r3, [r0, #116]	; 0x74
   136b0:	cmp	r3, #0
   136b4:	bxeq	lr
   136b8:	str	r4, [sp, #-8]!
   136bc:	mov	r4, r0
   136c0:	mov	r1, #0
   136c4:	ldr	r0, [r0, #92]	; 0x5c
   136c8:	ldr	r2, [r4, #96]	; 0x60
   136cc:	str	lr, [sp, #4]
   136d0:	bl	122f4 <memset@plt>
   136d4:	mov	r3, #16
   136d8:	mov	r2, #0
   136dc:	strd	r2, [r4, #120]	; 0x78
   136e0:	ldr	r4, [sp]
   136e4:	add	sp, sp, #4
   136e8:	pop	{pc}		; (ldr pc, [sp], #4)

000136ec <flatcc_builder_custom_init@@Base>:
   136ec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   136f0:	mov	r5, r3
   136f4:	mov	r4, r0
   136f8:	strd	r6, [sp, #8]
   136fc:	mov	r6, r1
   13700:	mov	r1, #0
   13704:	ldr	r7, [pc, #124]	; 13788 <flatcc_builder_custom_init@@Base+0x9c>
   13708:	strd	r8, [sp, #16]
   1370c:	mov	r8, r2
   13710:	mov	r2, #232	; 0xe8
   13714:	str	sl, [sp, #24]
   13718:	str	lr, [sp, #28]
   1371c:	ldr	r9, [sp, #32]
   13720:	bl	122f4 <memset@plt>
   13724:	cmp	r6, #0
   13728:	add	r7, pc, r7
   1372c:	beq	13760 <flatcc_builder_custom_init@@Base+0x74>
   13730:	cmp	r5, #0
   13734:	beq	1377c <flatcc_builder_custom_init@@Base+0x90>
   13738:	ldr	sl, [sp, #24]
   1373c:	mov	r0, #0
   13740:	strd	r8, [r4, #36]	; 0x24
   13744:	str	r6, [r4, #44]	; 0x2c
   13748:	str	r5, [r4, #48]	; 0x30
   1374c:	ldrd	r4, [sp]
   13750:	ldrd	r6, [sp, #8]
   13754:	ldrd	r8, [sp, #16]
   13758:	add	sp, sp, #28
   1375c:	pop	{pc}		; (ldr pc, [sp], #4)
   13760:	ldr	r3, [pc, #36]	; 1378c <flatcc_builder_custom_init@@Base+0xa0>
   13764:	mov	r2, #1
   13768:	cmp	r5, #0
   1376c:	add	r8, r4, #188	; 0xbc
   13770:	str	r2, [r4, #184]	; 0xb8
   13774:	ldr	r6, [r7, r3]
   13778:	bne	13738 <flatcc_builder_custom_init@@Base+0x4c>
   1377c:	ldr	r3, [pc, #12]	; 13790 <flatcc_builder_custom_init@@Base+0xa4>
   13780:	ldr	r5, [r7, r3]
   13784:	b	13738 <flatcc_builder_custom_init@@Base+0x4c>
   13788:	ldrdeq	r7, [r1], -r0
   1378c:	andeq	r0, r0, r0, asr r0
   13790:	andeq	r0, r0, ip, asr #32

00013794 <flatcc_builder_init@@Base>:
   13794:	mov	ip, #0
   13798:	push	{lr}		; (str lr, [sp, #-4]!)
   1379c:	sub	sp, sp, #12
   137a0:	mov	r3, ip
   137a4:	mov	r2, ip
   137a8:	mov	r1, ip
   137ac:	str	ip, [sp]
   137b0:	bl	136ec <flatcc_builder_custom_init@@Base>
   137b4:	add	sp, sp, #12
   137b8:	pop	{pc}		; (ldr pc, [sp], #4)

000137bc <flatcc_builder_custom_reset@@Base>:
   137bc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   137c0:	mov	r5, #0
   137c4:	mov	r4, r0
   137c8:	strd	r6, [sp, #8]
   137cc:	mov	r6, r0
   137d0:	strd	r8, [sp, #16]
   137d4:	mov	r8, r1
   137d8:	mov	r9, r2
   137dc:	str	lr, [sp, #24]
   137e0:	sub	sp, sp, #12
   137e4:	b	13834 <flatcc_builder_custom_reset@@Base+0x78>
   137e8:	cmp	r5, #5
   137ec:	cmpne	r9, #0
   137f0:	beq	13818 <flatcc_builder_custom_reset@@Base+0x5c>
   137f4:	mov	r3, #1
   137f8:	str	r5, [sp]
   137fc:	mov	r2, r3
   13800:	ldr	r0, [r6, #40]	; 0x28
   13804:	ldr	r7, [r6, #48]	; 0x30
   13808:	blx	r7
   1380c:	cmp	r0, #0
   13810:	bne	13924 <flatcc_builder_custom_reset@@Base+0x168>
   13814:	ldr	r0, [r4, #52]	; 0x34
   13818:	mov	r1, #0
   1381c:	ldr	r2, [r4, #56]	; 0x38
   13820:	bl	122f4 <memset@plt>
   13824:	add	r5, r5, #1
   13828:	add	r4, r4, #8
   1382c:	cmp	r5, #8
   13830:	beq	13874 <flatcc_builder_custom_reset@@Base+0xb8>
   13834:	ldr	r0, [r4, #52]	; 0x34
   13838:	add	r1, r4, #52	; 0x34
   1383c:	cmp	r0, #0
   13840:	bne	137e8 <flatcc_builder_custom_reset@@Base+0x2c>
   13844:	ldr	r3, [r4, #56]	; 0x38
   13848:	cmp	r3, #0
   1384c:	beq	13824 <flatcc_builder_custom_reset@@Base+0x68>
   13850:	ldr	r3, [pc, #212]	; 1392c <flatcc_builder_custom_reset@@Base+0x170>
   13854:	movw	r2, #434	; 0x1b2
   13858:	ldr	r1, [pc, #208]	; 13930 <flatcc_builder_custom_reset@@Base+0x174>
   1385c:	ldr	r0, [pc, #208]	; 13934 <flatcc_builder_custom_reset@@Base+0x178>
   13860:	add	r3, pc, r3
   13864:	add	r3, r3, #108	; 0x6c
   13868:	add	r1, pc, r1
   1386c:	add	r0, pc, r0
   13870:	bl	12324 <__assert_fail@plt>
   13874:	mov	r2, #0
   13878:	ldr	r0, [r6, #52]	; 0x34
   1387c:	ldr	r3, [r6, #124]	; 0x7c
   13880:	ldr	r1, [r6, #60]	; 0x3c
   13884:	str	r0, [r6, #4]
   13888:	str	r2, [r6, #120]	; 0x78
   1388c:	cmp	r3, r2
   13890:	ldr	r2, [r6, #76]	; 0x4c
   13894:	movne	r3, #16
   13898:	strne	r3, [r6, #124]	; 0x7c
   1389c:	mov	r3, #0
   138a0:	cmp	r8, r3
   138a4:	str	r2, [r6]
   138a8:	str	r1, [r6, #16]
   138ac:	str	r3, [r6, #20]
   138b0:	str	r3, [r6, #24]
   138b4:	str	r3, [r6, #32]
   138b8:	strh	r3, [r6, #128]	; 0x80
   138bc:	str	r3, [r6, #136]	; 0x88
   138c0:	str	r3, [r6, #140]	; 0x8c
   138c4:	str	r3, [r6, #148]	; 0x94
   138c8:	str	r3, [r6, #152]	; 0x98
   138cc:	str	r3, [r6, #156]	; 0x9c
   138d0:	str	r3, [r6, #160]	; 0xa0
   138d4:	bne	138fc <flatcc_builder_custom_reset@@Base+0x140>
   138d8:	ldr	r0, [r6, #184]	; 0xb8
   138dc:	cmp	r0, #0
   138e0:	bne	13914 <flatcc_builder_custom_reset@@Base+0x158>
   138e4:	add	sp, sp, #12
   138e8:	ldrd	r4, [sp]
   138ec:	ldrd	r6, [sp, #8]
   138f0:	ldrd	r8, [sp, #16]
   138f4:	add	sp, sp, #24
   138f8:	pop	{pc}		; (ldr pc, [sp], #4)
   138fc:	ldr	r0, [r6, #184]	; 0xb8
   13900:	str	r3, [r6, #172]	; 0xac
   13904:	str	r3, [r6, #176]	; 0xb0
   13908:	str	r3, [r6, #180]	; 0xb4
   1390c:	cmp	r0, #0
   13910:	beq	138e4 <flatcc_builder_custom_reset@@Base+0x128>
   13914:	add	r0, r6, #188	; 0xbc
   13918:	bl	176f4 <flatcc_emitter_reset@@Base>
   1391c:	mov	r0, #0
   13920:	b	138e4 <flatcc_builder_custom_reset@@Base+0x128>
   13924:	mvn	r0, #0
   13928:	b	138e4 <flatcc_builder_custom_reset@@Base+0x128>
   1392c:			; <UNDEFINED> instruction: 0x00005ebc
   13930:	andeq	r6, r0, r4, lsl #12
   13934:	muleq	r0, ip, r6

00013938 <flatcc_builder_reset@@Base>:
   13938:	mov	r2, #0
   1393c:	mov	r1, r2
   13940:	b	137bc <flatcc_builder_custom_reset@@Base>

00013944 <flatcc_builder_clear@@Base>:
   13944:	strd	r4, [sp, #-20]!	; 0xffffffec
   13948:	mov	r4, #0
   1394c:	add	r5, r0, #52	; 0x34
   13950:	strd	r6, [sp, #8]
   13954:	mov	r6, r0
   13958:	str	lr, [sp, #16]
   1395c:	sub	sp, sp, #12
   13960:	mov	r3, #0
   13964:	mov	r1, r5
   13968:	str	r4, [sp]
   1396c:	mov	r2, r3
   13970:	add	r4, r4, #1
   13974:	ldr	r0, [r6, #40]	; 0x28
   13978:	add	r5, r5, #8
   1397c:	ldr	r7, [r6, #48]	; 0x30
   13980:	blx	r7
   13984:	cmp	r4, #8
   13988:	bne	13960 <flatcc_builder_clear@@Base+0x1c>
   1398c:	ldr	r3, [r6, #184]	; 0xb8
   13990:	cmp	r3, #0
   13994:	bne	139bc <flatcc_builder_clear@@Base+0x78>
   13998:	mov	r0, r6
   1399c:	mov	r2, #232	; 0xe8
   139a0:	mov	r1, #0
   139a4:	add	sp, sp, #12
   139a8:	ldrd	r4, [sp]
   139ac:	ldrd	r6, [sp, #8]
   139b0:	ldr	lr, [sp, #16]
   139b4:	add	sp, sp, #20
   139b8:	b	122f4 <memset@plt>
   139bc:	add	r0, r6, #188	; 0xbc
   139c0:	bl	177c8 <flatcc_emitter_clear@@Base>
   139c4:	b	13998 <flatcc_builder_clear@@Base+0x54>

000139c8 <flatcc_builder_enter_user_frame_ptr@@Base>:
   139c8:	strd	r4, [sp, #-20]!	; 0xffffffec
   139cc:	add	r4, r1, #3
   139d0:	mov	r5, r0
   139d4:	ldr	r3, [r0, #112]	; 0x70
   139d8:	bic	r4, r4, #3
   139dc:	strd	r6, [sp, #8]
   139e0:	add	r4, r4, #4
   139e4:	ldr	r6, [r0, #228]	; 0xe4
   139e8:	str	lr, [sp, #16]
   139ec:	sub	sp, sp, #12
   139f0:	add	r2, r6, r4
   139f4:	cmp	r2, r3
   139f8:	bls	13a20 <flatcc_builder_enter_user_frame_ptr@@Base+0x58>
   139fc:	mov	ip, #7
   13a00:	add	r1, r0, #108	; 0x6c
   13a04:	ldr	r0, [r0, #40]	; 0x28
   13a08:	mov	r3, #0
   13a0c:	str	ip, [sp]
   13a10:	ldr	r7, [r5, #48]	; 0x30
   13a14:	blx	r7
   13a18:	cmp	r0, #0
   13a1c:	bne	13a74 <flatcc_builder_enter_user_frame_ptr@@Base+0xac>
   13a20:	ldr	r7, [r5, #108]	; 0x6c
   13a24:	adds	r3, r7, r6
   13a28:	moveq	r0, r3
   13a2c:	beq	13a60 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   13a30:	mov	r2, r4
   13a34:	mov	r0, r3
   13a38:	mov	r1, #0
   13a3c:	bl	122f4 <memset@plt>
   13a40:	ldr	r2, [r5, #224]	; 0xe0
   13a44:	add	r0, r0, #4
   13a48:	str	r2, [r7, r6]
   13a4c:	ldr	r3, [r5, #228]	; 0xe4
   13a50:	add	r4, r3, r4
   13a54:	add	r3, r3, #4
   13a58:	str	r3, [r5, #224]	; 0xe0
   13a5c:	str	r4, [r5, #228]	; 0xe4
   13a60:	add	sp, sp, #12
   13a64:	ldrd	r4, [sp]
   13a68:	ldrd	r6, [sp, #8]
   13a6c:	add	sp, sp, #16
   13a70:	pop	{pc}		; (ldr pc, [sp], #4)
   13a74:	bl	1314c <flatcc_builder_default_alloc@@Base+0x124>

00013a78 <flatcc_builder_enter_user_frame@@Base>:
   13a78:	strd	r4, [sp, #-20]!	; 0xffffffec
   13a7c:	add	r4, r1, #3
   13a80:	mov	r5, r0
   13a84:	ldr	r3, [r0, #112]	; 0x70
   13a88:	bic	r4, r4, #3
   13a8c:	strd	r6, [sp, #8]
   13a90:	add	r4, r4, #4
   13a94:	ldr	r6, [r0, #228]	; 0xe4
   13a98:	str	lr, [sp, #16]
   13a9c:	sub	sp, sp, #12
   13aa0:	add	r2, r6, r4
   13aa4:	cmp	r2, r3
   13aa8:	bls	13ad0 <flatcc_builder_enter_user_frame@@Base+0x58>
   13aac:	mov	ip, #7
   13ab0:	add	r1, r0, #108	; 0x6c
   13ab4:	ldr	r0, [r0, #40]	; 0x28
   13ab8:	mov	r3, #0
   13abc:	str	ip, [sp]
   13ac0:	ldr	r7, [r5, #48]	; 0x30
   13ac4:	blx	r7
   13ac8:	cmp	r0, #0
   13acc:	bne	13b18 <flatcc_builder_enter_user_frame@@Base+0xa0>
   13ad0:	ldr	r7, [r5, #108]	; 0x6c
   13ad4:	adds	r0, r7, r6
   13ad8:	beq	13b04 <flatcc_builder_enter_user_frame@@Base+0x8c>
   13adc:	mov	r2, r4
   13ae0:	mov	r1, #0
   13ae4:	bl	122f4 <memset@plt>
   13ae8:	ldr	r3, [r5, #224]	; 0xe0
   13aec:	str	r3, [r7, r6]
   13af0:	ldr	r0, [r5, #228]	; 0xe4
   13af4:	add	r4, r0, r4
   13af8:	add	r0, r0, #4
   13afc:	str	r0, [r5, #224]	; 0xe0
   13b00:	str	r4, [r5, #228]	; 0xe4
   13b04:	add	sp, sp, #12
   13b08:	ldrd	r4, [sp]
   13b0c:	ldrd	r6, [sp, #8]
   13b10:	add	sp, sp, #16
   13b14:	pop	{pc}		; (ldr pc, [sp], #4)
   13b18:	bl	1314c <flatcc_builder_default_alloc@@Base+0x124>

00013b1c <flatcc_builder_exit_user_frame@@Base>:
   13b1c:	ldr	r2, [r0, #224]	; 0xe0
   13b20:	cmp	r2, #0
   13b24:	beq	13b4c <flatcc_builder_exit_user_frame@@Base+0x30>
   13b28:	mov	r3, r0
   13b2c:	sub	r0, r2, #4
   13b30:	ldr	r1, [r3, #108]	; 0x6c
   13b34:	str	r0, [r3, #228]	; 0xe4
   13b38:	add	r2, r1, r2
   13b3c:	ldr	r2, [r2, #-4]
   13b40:	mov	r0, r2
   13b44:	str	r2, [r3, #224]	; 0xe0
   13b48:	bx	lr
   13b4c:	ldr	r3, [pc, #36]	; 13b78 <flatcc_builder_exit_user_frame@@Base+0x5c>
   13b50:	movw	r2, #542	; 0x21e
   13b54:	str	r4, [sp, #-8]!
   13b58:	ldr	r1, [pc, #28]	; 13b7c <flatcc_builder_exit_user_frame@@Base+0x60>
   13b5c:	str	lr, [sp, #4]
   13b60:	ldr	r0, [pc, #24]	; 13b80 <flatcc_builder_exit_user_frame@@Base+0x64>
   13b64:	add	r3, pc, r3
   13b68:	add	r3, r3, #136	; 0x88
   13b6c:	add	r1, pc, r1
   13b70:	add	r0, pc, r0
   13b74:	bl	12324 <__assert_fail@plt>
   13b78:			; <UNDEFINED> instruction: 0x00005bb8
   13b7c:	andeq	r6, r0, r0, lsl #6
   13b80:	andeq	r6, r0, ip, lsr #7

00013b84 <flatcc_builder_exit_user_frame_at@@Base>:
   13b84:	ldr	r2, [r0, #224]	; 0xe0
   13b88:	cmp	r2, r1
   13b8c:	bcc	13b98 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   13b90:	str	r1, [r0, #224]	; 0xe0
   13b94:	b	13b1c <flatcc_builder_exit_user_frame@@Base>
   13b98:	ldr	r3, [pc, #36]	; 13bc4 <flatcc_builder_exit_user_frame_at@@Base+0x40>
   13b9c:	movw	r2, #551	; 0x227
   13ba0:	str	r4, [sp, #-8]!
   13ba4:	ldr	r1, [pc, #28]	; 13bc8 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   13ba8:	str	lr, [sp, #4]
   13bac:	ldr	r0, [pc, #24]	; 13bcc <flatcc_builder_exit_user_frame_at@@Base+0x48>
   13bb0:	add	r3, pc, r3
   13bb4:	add	r3, r3, #168	; 0xa8
   13bb8:	add	r1, pc, r1
   13bbc:	add	r0, pc, r0
   13bc0:	bl	12324 <__assert_fail@plt>
   13bc4:	andeq	r5, r0, ip, ror #22
   13bc8:			; <UNDEFINED> instruction: 0x000062b4
   13bcc:	andeq	r6, r0, ip, ror r3

00013bd0 <flatcc_builder_get_current_user_frame@@Base>:
   13bd0:	ldr	r0, [r0, #224]	; 0xe0
   13bd4:	bx	lr

00013bd8 <flatcc_builder_get_user_frame_ptr@@Base>:
   13bd8:	ldr	r0, [r0, #108]	; 0x6c
   13bdc:	add	r0, r0, r1
   13be0:	bx	lr

00013be4 <flatcc_builder_embed_buffer@@Base>:
   13be4:	strd	r4, [sp, #-20]!	; 0xffffffec
   13be8:	mov	r5, r3
   13bec:	mov	r4, r0
   13bf0:	ldr	r3, [r0, #152]	; 0x98
   13bf4:	strd	r6, [sp, #8]
   13bf8:	mov	r7, r2
   13bfc:	mov	r2, r1
   13c00:	ldr	r6, [pc, #356]	; 13d6c <flatcc_builder_embed_buffer@@Base+0x188>
   13c04:	str	lr, [sp, #16]
   13c08:	sub	sp, sp, #92	; 0x5c
   13c0c:	add	r1, sp, #112	; 0x70
   13c10:	adds	r3, r3, #0
   13c14:	movne	r3, #1
   13c18:	bl	131b8 <flatcc_builder_default_alloc@@Base+0x190>
   13c1c:	cmp	r0, #0
   13c20:	add	r6, pc, r6
   13c24:	bne	13d3c <flatcc_builder_embed_buffer@@Base+0x158>
   13c28:	ldr	r3, [sp, #116]	; 0x74
   13c2c:	str	r0, [sp, #16]
   13c30:	ldr	r1, [r4, #136]	; 0x88
   13c34:	str	r0, [sp, #20]
   13c38:	ldrh	r2, [sp, #112]	; 0x70
   13c3c:	tst	r3, #2
   13c40:	ldr	r0, [r4, #152]	; 0x98
   13c44:	movne	ip, #4
   13c48:	moveq	ip, #0
   13c4c:	sub	r3, r1, r5
   13c50:	sub	r3, r3, ip
   13c54:	sub	r2, r2, #1
   13c58:	and	r3, r3, r2
   13c5c:	add	r2, r5, r3
   13c60:	cmp	r0, #0
   13c64:	str	r2, [sp, #12]
   13c68:	beq	13c8c <flatcc_builder_embed_buffer@@Base+0xa8>
   13c6c:	mov	ip, #1
   13c70:	mov	r2, #4
   13c74:	mov	r0, r2
   13c78:	str	r2, [sp, #16]
   13c7c:	str	ip, [sp, #20]
   13c80:	add	ip, sp, #12
   13c84:	str	ip, [sp, #24]
   13c88:	str	r2, [sp, #28]
   13c8c:	cmp	r5, #0
   13c90:	beq	13cb8 <flatcc_builder_embed_buffer@@Base+0xd4>
   13c94:	ldr	r2, [sp, #20]
   13c98:	add	ip, sp, #88	; 0x58
   13c9c:	add	r0, r0, r5
   13ca0:	str	r0, [sp, #16]
   13ca4:	add	r2, r2, #1
   13ca8:	add	ip, ip, r2, lsl #3
   13cac:	str	r2, [sp, #20]
   13cb0:	str	r7, [ip, #-72]	; 0xffffffb8
   13cb4:	str	r5, [ip, #-68]	; 0xffffffbc
   13cb8:	cmp	r3, #0
   13cbc:	bne	13d0c <flatcc_builder_embed_buffer@@Base+0x128>
   13cc0:	sub	r5, r1, r0
   13cc4:	cmp	r1, r5
   13cc8:	ble	13d48 <flatcc_builder_embed_buffer@@Base+0x164>
   13ccc:	mov	r3, r5
   13cd0:	add	r1, sp, #24
   13cd4:	str	r0, [sp]
   13cd8:	ldr	r2, [sp, #20]
   13cdc:	ldr	r0, [r4, #36]	; 0x24
   13ce0:	ldr	r6, [r4, #44]	; 0x2c
   13ce4:	blx	r6
   13ce8:	cmp	r0, #0
   13cec:	streq	r5, [r4, #136]	; 0x88
   13cf0:	bne	13d44 <flatcc_builder_embed_buffer@@Base+0x160>
   13cf4:	mov	r0, r5
   13cf8:	add	sp, sp, #92	; 0x5c
   13cfc:	ldrd	r4, [sp]
   13d00:	ldrd	r6, [sp, #8]
   13d04:	add	sp, sp, #16
   13d08:	pop	{pc}		; (ldr pc, [sp], #4)
   13d0c:	ldr	ip, [pc, #92]	; 13d70 <flatcc_builder_embed_buffer@@Base+0x18c>
   13d10:	add	r0, r0, r3
   13d14:	ldr	r2, [sp, #20]
   13d18:	str	r0, [sp, #16]
   13d1c:	ldr	lr, [r6, ip]
   13d20:	add	ip, sp, #88	; 0x58
   13d24:	add	r2, r2, #1
   13d28:	add	ip, ip, r2, lsl #3
   13d2c:	str	r2, [sp, #20]
   13d30:	str	lr, [ip, #-72]	; 0xffffffb8
   13d34:	str	r3, [ip, #-68]	; 0xffffffbc
   13d38:	b	13cc0 <flatcc_builder_embed_buffer@@Base+0xdc>
   13d3c:	mov	r5, #0
   13d40:	b	13cf4 <flatcc_builder_embed_buffer@@Base+0x110>
   13d44:	bl	132ec <flatcc_builder_default_alloc@@Base+0x2c4>
   13d48:	ldr	r3, [pc, #36]	; 13d74 <flatcc_builder_embed_buffer@@Base+0x190>
   13d4c:	movw	r2, #647	; 0x287
   13d50:	ldr	r1, [pc, #32]	; 13d78 <flatcc_builder_embed_buffer@@Base+0x194>
   13d54:	ldr	r0, [pc, #32]	; 13d7c <flatcc_builder_embed_buffer@@Base+0x198>
   13d58:	add	r3, pc, r3
   13d5c:	add	r3, r3, #44	; 0x2c
   13d60:	add	r1, pc, r1
   13d64:	add	r0, pc, r0
   13d68:	bl	12324 <__assert_fail@plt>
   13d6c:	ldrdeq	r7, [r1], -r8
   13d70:	andeq	r0, r0, r4, asr #32
   13d74:	andeq	r5, r0, r4, asr #19
   13d78:	andeq	r6, r0, ip, lsl #2
   13d7c:	muleq	r0, r0, r1

00013d80 <flatcc_builder_create_buffer@@Base>:
   13d80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13d84:	mov	r4, r0
   13d88:	strd	r6, [sp, #8]
   13d8c:	mov	r6, r3
   13d90:	strd	r8, [sp, #16]
   13d94:	mov	r8, #0
   13d98:	strd	sl, [sp, #24]
   13d9c:	mov	sl, r1
   13da0:	str	lr, [sp, #32]
   13da4:	sub	sp, sp, #100	; 0x64
   13da8:	ldr	r9, [sp, #140]	; 0x8c
   13dac:	add	r1, sp, #136	; 0x88
   13db0:	str	r8, [sp, #20]
   13db4:	ldr	r5, [pc, #496]	; 13fac <flatcc_builder_create_buffer@@Base+0x22c>
   13db8:	and	r7, r9, #1
   13dbc:	mov	r3, r7
   13dc0:	bl	131b8 <flatcc_builder_default_alloc@@Base+0x190>
   13dc4:	cmp	r0, r8
   13dc8:	add	r5, pc, r5
   13dcc:	bne	13f20 <flatcc_builder_create_buffer@@Base+0x1a0>
   13dd0:	ldrh	r2, [r4, #128]	; 0x80
   13dd4:	ldrh	r3, [sp, #136]	; 0x88
   13dd8:	ldr	ip, [r4, #136]	; 0x88
   13ddc:	cmp	r2, r3
   13de0:	strhcc	r3, [r4, #128]	; 0x80
   13de4:	cmp	sl, #0
   13de8:	ldrne	r2, [sl]
   13dec:	ldreq	lr, [sp, #20]
   13df0:	movne	lr, r2
   13df4:	strne	r2, [sp, #20]
   13df8:	sub	r2, r3, #1
   13dfc:	sub	r3, ip, #4
   13e00:	cmp	lr, #0
   13e04:	movne	lr, #4
   13e08:	tst	r9, #2
   13e0c:	movne	r0, #4
   13e10:	moveq	r0, #0
   13e14:	sub	r3, r3, lr
   13e18:	ands	r1, r9, #3
   13e1c:	sub	r3, r3, r0
   13e20:	and	r3, r3, r2
   13e24:	bne	13f40 <flatcc_builder_create_buffer@@Base+0x1c0>
   13e28:	mov	r9, r1
   13e2c:	mov	r8, #1
   13e30:	mov	r0, #4
   13e34:	add	sl, sp, #96	; 0x60
   13e38:	add	r2, r9, #1
   13e3c:	str	r0, [sp, #24]
   13e40:	add	r2, sl, r2, lsl #3
   13e44:	mov	fp, #4
   13e48:	add	sl, sp, #12
   13e4c:	cmp	lr, #0
   13e50:	str	r8, [sp, #28]
   13e54:	strd	sl, [r2, #-72]	; 0xffffffb8
   13e58:	beq	13e84 <flatcc_builder_create_buffer@@Base+0x104>
   13e5c:	add	r2, sp, #96	; 0x60
   13e60:	add	r8, r8, #1
   13e64:	add	r8, r2, r8, lsl #3
   13e68:	add	r0, r0, lr
   13e6c:	add	r9, r9, #2
   13e70:	add	r2, sp, #20
   13e74:	str	r0, [sp, #24]
   13e78:	str	r2, [r8, #-72]	; 0xffffffb8
   13e7c:	str	lr, [r8, #-68]	; 0xffffffbc
   13e80:	str	r9, [sp, #28]
   13e84:	cmp	r3, #0
   13e88:	beq	13eb8 <flatcc_builder_create_buffer@@Base+0x138>
   13e8c:	ldr	lr, [pc, #284]	; 13fb0 <flatcc_builder_create_buffer@@Base+0x230>
   13e90:	add	r0, r0, r3
   13e94:	ldr	r2, [sp, #28]
   13e98:	str	r0, [sp, #24]
   13e9c:	ldr	r5, [r5, lr]
   13ea0:	add	lr, sp, #96	; 0x60
   13ea4:	add	r2, r2, #1
   13ea8:	add	lr, lr, r2, lsl #3
   13eac:	str	r2, [sp, #28]
   13eb0:	str	r5, [lr, #-72]	; 0xffffffb8
   13eb4:	str	r3, [lr, #-68]	; 0xffffffbc
   13eb8:	sub	r5, ip, r0
   13ebc:	cmp	r1, #0
   13ec0:	mov	r2, r5
   13ec4:	addne	r2, r5, #4
   13ec8:	cmp	r7, #0
   13ecc:	sub	r6, r6, r2
   13ed0:	ldrne	r3, [r4, #144]	; 0x90
   13ed4:	mov	r8, r5
   13ed8:	str	r6, [sp, #12]
   13edc:	ldreq	r3, [r4, #140]	; 0x8c
   13ee0:	cmp	ip, r5
   13ee4:	sub	r3, r3, r2
   13ee8:	str	r3, [sp, #16]
   13eec:	ble	13f84 <flatcc_builder_create_buffer@@Base+0x204>
   13ef0:	mov	r3, r5
   13ef4:	add	r1, sp, #32
   13ef8:	str	r0, [sp]
   13efc:	ldr	r2, [sp, #28]
   13f00:	ldr	r0, [r4, #36]	; 0x24
   13f04:	ldr	r6, [r4, #44]	; 0x2c
   13f08:	blx	r6
   13f0c:	cmp	r0, #0
   13f10:	bne	13fa8 <flatcc_builder_create_buffer@@Base+0x228>
   13f14:	cmp	r5, #0
   13f18:	str	r5, [r4, #136]	; 0x88
   13f1c:	beq	13f60 <flatcc_builder_create_buffer@@Base+0x1e0>
   13f20:	mov	r0, r8
   13f24:	add	sp, sp, #100	; 0x64
   13f28:	ldrd	r4, [sp]
   13f2c:	ldrd	r6, [sp, #8]
   13f30:	ldrd	r8, [sp, #16]
   13f34:	ldrd	sl, [sp, #24]
   13f38:	add	sp, sp, #32
   13f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13f40:	mov	sl, #4
   13f44:	add	r2, sp, #16
   13f48:	mov	r8, #2
   13f4c:	mov	r9, #1
   13f50:	mov	r0, #8
   13f54:	str	r2, [sp, #32]
   13f58:	str	sl, [sp, #36]	; 0x24
   13f5c:	b	13e34 <flatcc_builder_create_buffer@@Base+0xb4>
   13f60:	ldr	r3, [pc, #76]	; 13fb4 <flatcc_builder_create_buffer@@Base+0x234>
   13f64:	mov	r2, #772	; 0x304
   13f68:	ldr	r1, [pc, #72]	; 13fb8 <flatcc_builder_create_buffer@@Base+0x238>
   13f6c:	ldr	r0, [pc, #72]	; 13fbc <flatcc_builder_create_buffer@@Base+0x23c>
   13f70:	add	r3, pc, r3
   13f74:	add	r3, r3, #204	; 0xcc
   13f78:	add	r1, pc, r1
   13f7c:	add	r0, pc, r0
   13f80:	bl	12324 <__assert_fail@plt>
   13f84:	ldr	r3, [pc, #52]	; 13fc0 <flatcc_builder_create_buffer@@Base+0x240>
   13f88:	movw	r2, #647	; 0x287
   13f8c:	ldr	r1, [pc, #48]	; 13fc4 <flatcc_builder_create_buffer@@Base+0x244>
   13f90:	ldr	r0, [pc, #48]	; 13fc8 <flatcc_builder_create_buffer@@Base+0x248>
   13f94:	add	r3, pc, r3
   13f98:	add	r3, r3, #44	; 0x2c
   13f9c:	add	r1, pc, r1
   13fa0:	add	r0, pc, r0
   13fa4:	bl	12324 <__assert_fail@plt>
   13fa8:	bl	132ec <flatcc_builder_default_alloc@@Base+0x2c4>
   13fac:	andeq	r7, r1, r0, lsr r2
   13fb0:	andeq	r0, r0, r4, asr #32
   13fb4:	andeq	r5, r0, ip, lsr #15
   13fb8:	strdeq	r5, [r0], -r4
   13fbc:	andeq	r5, r0, r8, ror pc
   13fc0:	andeq	r5, r0, r8, lsl #15
   13fc4:	ldrdeq	r5, [r0], -r0
   13fc8:	andeq	r5, r0, r4, asr pc

00013fcc <flatcc_builder_create_struct@@Base>:
   13fcc:	ldr	ip, [pc, #316]	; 14110 <flatcc_builder_create_struct@@Base+0x144>
   13fd0:	cmp	r3, #0
   13fd4:	strd	r4, [sp, #-20]!	; 0xffffffec
   13fd8:	strd	r6, [sp, #8]
   13fdc:	str	lr, [sp, #16]
   13fe0:	sub	sp, sp, #84	; 0x54
   13fe4:	add	ip, pc, ip
   13fe8:	beq	140ec <flatcc_builder_create_struct@@Base+0x120>
   13fec:	mov	r4, r0
   13ff0:	ldrh	r0, [r0, #128]	; 0x80
   13ff4:	ldr	lr, [r4, #136]	; 0x88
   13ff8:	cmp	r0, r3
   13ffc:	mov	r0, #0
   14000:	strhcc	r3, [r4, #128]	; 0x80
   14004:	sub	r5, lr, r2
   14008:	sub	r3, r3, #1
   1400c:	cmp	r2, r0
   14010:	and	r3, r3, r5
   14014:	str	r0, [sp, #8]
   14018:	str	r0, [sp, #12]
   1401c:	bne	140a0 <flatcc_builder_create_struct@@Base+0xd4>
   14020:	cmp	r3, #0
   14024:	movne	r2, r3
   14028:	movne	r6, #1
   1402c:	beq	140c4 <flatcc_builder_create_struct@@Base+0xf8>
   14030:	ldr	r1, [pc, #220]	; 14114 <flatcc_builder_create_struct@@Base+0x148>
   14034:	add	r0, r0, #1
   14038:	add	r7, sp, #80	; 0x50
   1403c:	str	r2, [sp, #8]
   14040:	add	r0, r7, r0, lsl #3
   14044:	sub	r5, lr, r2
   14048:	ldr	r1, [ip, r1]
   1404c:	str	r6, [sp, #12]
   14050:	str	r1, [r0, #-72]	; 0xffffffb8
   14054:	str	r3, [r0, #-68]	; 0xffffffbc
   14058:	cmp	lr, r5
   1405c:	ble	140c4 <flatcc_builder_create_struct@@Base+0xf8>
   14060:	mov	r3, r5
   14064:	add	r1, sp, #16
   14068:	str	r2, [sp]
   1406c:	ldr	r2, [sp, #12]
   14070:	ldr	r0, [r4, #36]	; 0x24
   14074:	ldr	r6, [r4, #44]	; 0x2c
   14078:	blx	r6
   1407c:	cmp	r0, #0
   14080:	bne	140e8 <flatcc_builder_create_struct@@Base+0x11c>
   14084:	mov	r0, r5
   14088:	str	r5, [r4, #136]	; 0x88
   1408c:	add	sp, sp, #84	; 0x54
   14090:	ldrd	r4, [sp]
   14094:	ldrd	r6, [sp, #8]
   14098:	add	sp, sp, #16
   1409c:	pop	{pc}		; (ldr pc, [sp], #4)
   140a0:	mov	r0, #1
   140a4:	cmp	r3, #0
   140a8:	str	r2, [sp, #8]
   140ac:	movne	r6, #2
   140b0:	strd	r0, [sp, #12]
   140b4:	str	r2, [sp, #20]
   140b8:	addne	r2, r2, r3
   140bc:	beq	14058 <flatcc_builder_create_struct@@Base+0x8c>
   140c0:	b	14030 <flatcc_builder_create_struct@@Base+0x64>
   140c4:	ldr	r3, [pc, #76]	; 14118 <flatcc_builder_create_struct@@Base+0x14c>
   140c8:	movw	r2, #647	; 0x287
   140cc:	ldr	r1, [pc, #72]	; 1411c <flatcc_builder_create_struct@@Base+0x150>
   140d0:	ldr	r0, [pc, #72]	; 14120 <flatcc_builder_create_struct@@Base+0x154>
   140d4:	add	r3, pc, r3
   140d8:	add	r3, r3, #44	; 0x2c
   140dc:	add	r1, pc, r1
   140e0:	add	r0, pc, r0
   140e4:	bl	12324 <__assert_fail@plt>
   140e8:	bl	132ec <flatcc_builder_default_alloc@@Base+0x2c4>
   140ec:	ldr	r3, [pc, #48]	; 14124 <flatcc_builder_create_struct@@Base+0x158>
   140f0:	movw	r2, #783	; 0x30f
   140f4:	ldr	r1, [pc, #44]	; 14128 <flatcc_builder_create_struct@@Base+0x15c>
   140f8:	ldr	r0, [pc, #44]	; 1412c <flatcc_builder_create_struct@@Base+0x160>
   140fc:	add	r3, pc, r3
   14100:	add	r3, r3, #236	; 0xec
   14104:	add	r1, pc, r1
   14108:	add	r0, pc, r0
   1410c:	bl	12324 <__assert_fail@plt>
   14110:	andeq	r7, r1, r4, lsl r0
   14114:	andeq	r0, r0, r4, asr #32
   14118:	andeq	r5, r0, r8, asr #12
   1411c:	muleq	r0, r0, sp
   14120:	andeq	r5, r0, r4, lsl lr
   14124:	andeq	r5, r0, r0, lsr #12
   14128:	andeq	r5, r0, r8, ror #26
   1412c:	andeq	r5, r0, r0, asr lr

00014130 <flatcc_builder_start_buffer@@Base>:
   14130:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14134:	mov	r5, r1
   14138:	mov	r4, r0
   1413c:	ldrh	r1, [r0, #128]	; 0x80
   14140:	strd	r6, [sp, #8]
   14144:	mov	r7, r3
   14148:	ldr	r6, [pc, #180]	; 14204 <flatcc_builder_start_buffer@@Base+0xd4>
   1414c:	strd	r8, [sp, #16]
   14150:	mov	r8, r2
   14154:	str	sl, [sp, #24]
   14158:	str	lr, [sp, #28]
   1415c:	bl	1335c <flatcc_builder_default_alloc@@Base+0x334>
   14160:	cmp	r0, #0
   14164:	add	r6, pc, r6
   14168:	bne	141fc <flatcc_builder_start_buffer@@Base+0xcc>
   1416c:	mov	r3, #1
   14170:	ldrh	r9, [r4, #132]	; 0x84
   14174:	cmp	r5, #0
   14178:	ldr	ip, [r4, #148]	; 0x94
   1417c:	strh	r3, [r4, #128]	; 0x80
   14180:	ldr	r1, [r4, #32]
   14184:	ldr	lr, [r4, #136]	; 0x88
   14188:	add	r2, ip, r3
   1418c:	ldrh	r3, [r4, #164]	; 0xa4
   14190:	strh	r9, [r1, #34]	; 0x22
   14194:	strh	r8, [r4, #132]	; 0x84
   14198:	ldr	r9, [r4, #144]	; 0x90
   1419c:	ldr	r8, [r4, #152]	; 0x98
   141a0:	strh	r3, [r1, #32]
   141a4:	ldr	r3, [r4, #168]	; 0xa8
   141a8:	strh	r7, [r4, #164]	; 0xa4
   141ac:	str	r9, [r1, #20]
   141b0:	str	r8, [r1, #28]
   141b4:	str	lr, [r4, #144]	; 0x90
   141b8:	str	r2, [r4, #148]	; 0x94
   141bc:	str	ip, [r4, #152]	; 0x98
   141c0:	str	r3, [r1, #16]
   141c4:	beq	141f0 <flatcc_builder_start_buffer@@Base+0xc0>
   141c8:	ldr	r2, [r5]
   141cc:	mov	r3, #1
   141d0:	str	r2, [r4, #168]	; 0xa8
   141d4:	strh	r3, [r1, #14]
   141d8:	ldrd	r4, [sp]
   141dc:	ldrd	r6, [sp, #8]
   141e0:	ldrd	r8, [sp, #16]
   141e4:	ldr	sl, [sp, #24]
   141e8:	add	sp, sp, #28
   141ec:	pop	{pc}		; (ldr pc, [sp], #4)
   141f0:	ldr	r3, [pc, #16]	; 14208 <flatcc_builder_start_buffer@@Base+0xd8>
   141f4:	ldr	r5, [r6, r3]
   141f8:	b	141c8 <flatcc_builder_start_buffer@@Base+0x98>
   141fc:	mvn	r0, #0
   14200:	b	141d8 <flatcc_builder_start_buffer@@Base+0xa8>
   14204:	muleq	r1, r4, lr
   14208:	andeq	r0, r0, r4, asr #32

0001420c <flatcc_builder_end_buffer@@Base>:
   1420c:	ldr	ip, [r0, #32]
   14210:	strd	r4, [sp, #-16]!
   14214:	mov	r4, r0
   14218:	ldrh	r2, [r0, #164]	; 0xa4
   1421c:	ldr	r0, [r0, #152]	; 0x98
   14220:	ldrh	ip, [ip, #14]
   14224:	and	r2, r2, #2
   14228:	str	r6, [sp, #8]
   1422c:	str	lr, [sp, #12]
   14230:	sub	sp, sp, #8
   14234:	cmp	r0, #0
   14238:	moveq	r0, r2
   1423c:	orrne	r0, r2, #1
   14240:	cmp	ip, #1
   14244:	bne	1432c <flatcc_builder_end_buffer@@Base+0x120>
   14248:	ldrh	r2, [r4, #132]	; 0x84
   1424c:	mov	r3, r1
   14250:	add	r1, r4, #168	; 0xa8
   14254:	ldrh	ip, [r4, #128]	; 0x80
   14258:	cmp	r2, ip
   1425c:	movhi	ip, r2
   14260:	strhhi	r2, [r4, #128]	; 0x80
   14264:	str	ip, [sp]
   14268:	str	r0, [sp, #4]
   1426c:	mov	r0, r4
   14270:	bl	13d80 <flatcc_builder_create_buffer@@Base>
   14274:	subs	r5, r0, #0
   14278:	beq	14314 <flatcc_builder_end_buffer@@Base+0x108>
   1427c:	mov	r1, #0
   14280:	ldr	r0, [r4, #16]
   14284:	ldr	r3, [r4, #32]
   14288:	ldr	r2, [r4, #20]
   1428c:	ldrh	lr, [r3, #32]
   14290:	ldr	ip, [r3, #16]
   14294:	ldr	r6, [r3, #20]
   14298:	ldr	r3, [r3, #28]
   1429c:	str	r6, [r4, #144]	; 0x90
   142a0:	strh	lr, [r4, #164]	; 0xa4
   142a4:	str	r3, [r4, #152]	; 0x98
   142a8:	str	ip, [r4, #168]	; 0xa8
   142ac:	bl	122f4 <memset@plt>
   142b0:	ldr	r3, [r4, #32]
   142b4:	ldr	r0, [r4, #60]	; 0x3c
   142b8:	ldr	r2, [r4, #64]	; 0x40
   142bc:	ldr	ip, [r3]
   142c0:	ldmib	r3, {r1, lr}
   142c4:	add	r0, r0, ip
   142c8:	sub	r2, r2, ip
   142cc:	str	r0, [r4, #16]
   142d0:	cmp	r2, r1
   142d4:	ldrh	r0, [r4, #128]	; 0x80
   142d8:	movcs	r2, r1
   142dc:	str	lr, [r4, #20]
   142e0:	str	ip, [r4, #28]
   142e4:	ldrh	ip, [r4, #130]	; 0x82
   142e8:	str	r2, [r4, #24]
   142ec:	ldr	r2, [r4, #156]	; 0x9c
   142f0:	str	r1, [r3, #4]
   142f4:	cmp	r0, ip
   142f8:	sub	r0, r3, #36	; 0x24
   142fc:	strhcc	ip, [r4, #128]	; 0x80
   14300:	ldrh	r1, [r3, #12]
   14304:	sub	r3, r2, #1
   14308:	str	r0, [r4, #32]
   1430c:	strh	r1, [r4, #130]	; 0x82
   14310:	str	r3, [r4, #156]	; 0x9c
   14314:	mov	r0, r5
   14318:	add	sp, sp, #8
   1431c:	ldrd	r4, [sp]
   14320:	ldr	r6, [sp, #8]
   14324:	add	sp, sp, #12
   14328:	pop	{pc}		; (ldr pc, [sp], #4)
   1432c:	ldr	r3, [pc, #28]	; 14350 <flatcc_builder_end_buffer@@Base+0x144>
   14330:	movw	r2, #838	; 0x346
   14334:	ldr	r1, [pc, #24]	; 14354 <flatcc_builder_end_buffer@@Base+0x148>
   14338:	ldr	r0, [pc, #24]	; 14358 <flatcc_builder_end_buffer@@Base+0x14c>
   1433c:	add	r3, pc, r3
   14340:	add	r3, r3, #268	; 0x10c
   14344:	add	r1, pc, r1
   14348:	add	r0, pc, r0
   1434c:	bl	12324 <__assert_fail@plt>
   14350:	andeq	r5, r0, r0, ror #7
   14354:	andeq	r5, r0, r8, lsr #22
   14358:	andeq	r5, r0, ip, lsl ip

0001435c <flatcc_builder_start_struct@@Base>:
   1435c:	strd	r4, [sp, #-16]!
   14360:	mov	r5, r1
   14364:	mov	r1, r2
   14368:	mov	r4, r0
   1436c:	str	r6, [sp, #8]
   14370:	str	lr, [sp, #12]
   14374:	bl	1335c <flatcc_builder_default_alloc@@Base+0x334>
   14378:	cmp	r0, #0
   1437c:	bne	14404 <flatcc_builder_start_struct@@Base+0xa8>
   14380:	ldr	r6, [r4, #20]
   14384:	mov	ip, #2
   14388:	ldr	r2, [r4, #28]
   1438c:	ldr	r3, [r4, #64]	; 0x40
   14390:	add	r5, r5, r6
   14394:	ldr	r0, [r4, #60]	; 0x3c
   14398:	ldr	r1, [r4, #32]
   1439c:	sub	r3, r3, r2
   143a0:	cmn	r3, #4
   143a4:	add	r0, r0, r2
   143a8:	mvnhi	r2, #3
   143ac:	movhi	r3, r2
   143b0:	strh	ip, [r1, #14]
   143b4:	strhi	r2, [r4, #24]
   143b8:	mvn	r2, #3
   143bc:	strls	r3, [r4, #24]
   143c0:	cmp	r5, r3
   143c4:	str	r0, [r4, #16]
   143c8:	str	r2, [r1, #4]
   143cc:	str	r5, [r4, #20]
   143d0:	bcs	143e8 <flatcc_builder_start_struct@@Base+0x8c>
   143d4:	add	r0, r0, r6
   143d8:	ldrd	r4, [sp]
   143dc:	ldr	r6, [sp, #8]
   143e0:	add	sp, sp, #12
   143e4:	pop	{pc}		; (ldr pc, [sp], #4)
   143e8:	add	r1, r5, #1
   143ec:	mov	r0, r4
   143f0:	bl	12fa0 <_start@@Base+0xb50>
   143f4:	cmp	r0, #0
   143f8:	bne	14404 <flatcc_builder_start_struct@@Base+0xa8>
   143fc:	ldr	r0, [r4, #16]
   14400:	b	143d4 <flatcc_builder_start_struct@@Base+0x78>
   14404:	ldrd	r4, [sp]
   14408:	mov	r0, #0
   1440c:	ldr	r6, [sp, #8]
   14410:	add	sp, sp, #12
   14414:	pop	{pc}		; (ldr pc, [sp], #4)

00014418 <flatcc_builder_struct_edit@@Base>:
   14418:	ldr	r0, [r0, #16]
   1441c:	bx	lr

00014420 <flatcc_builder_end_struct@@Base>:
   14420:	ldr	r3, [r0, #32]
   14424:	strd	r4, [sp, #-16]!
   14428:	ldrh	r3, [r3, #14]
   1442c:	str	r6, [sp, #8]
   14430:	str	lr, [sp, #12]
   14434:	cmp	r3, #2
   14438:	bne	144e0 <flatcc_builder_end_struct@@Base+0xc0>
   1443c:	ldrh	r3, [r0, #130]	; 0x82
   14440:	mov	r4, r0
   14444:	ldr	r1, [r0, #16]
   14448:	ldr	r2, [r0, #20]
   1444c:	bl	13fcc <flatcc_builder_create_struct@@Base>
   14450:	subs	r5, r0, #0
   14454:	beq	144cc <flatcc_builder_end_struct@@Base+0xac>
   14458:	mov	r1, #0
   1445c:	ldr	r0, [r4, #16]
   14460:	ldr	r2, [r4, #20]
   14464:	bl	122f4 <memset@plt>
   14468:	ldr	r3, [r4, #32]
   1446c:	ldr	r0, [r4, #60]	; 0x3c
   14470:	ldr	r2, [r4, #64]	; 0x40
   14474:	ldr	ip, [r3]
   14478:	ldmib	r3, {r1, lr}
   1447c:	add	r0, r0, ip
   14480:	sub	r2, r2, ip
   14484:	str	r0, [r4, #16]
   14488:	cmp	r2, r1
   1448c:	ldrh	r0, [r4, #128]	; 0x80
   14490:	movcs	r2, r1
   14494:	str	lr, [r4, #20]
   14498:	str	ip, [r4, #28]
   1449c:	ldrh	ip, [r4, #130]	; 0x82
   144a0:	str	r2, [r4, #24]
   144a4:	ldr	r2, [r4, #156]	; 0x9c
   144a8:	str	r1, [r3, #4]
   144ac:	cmp	r0, ip
   144b0:	sub	r0, r3, #36	; 0x24
   144b4:	strhcc	ip, [r4, #128]	; 0x80
   144b8:	ldrh	r1, [r3, #12]
   144bc:	sub	r3, r2, #1
   144c0:	str	r0, [r4, #32]
   144c4:	strh	r1, [r4, #130]	; 0x82
   144c8:	str	r3, [r4, #156]	; 0x9c
   144cc:	mov	r0, r5
   144d0:	ldrd	r4, [sp]
   144d4:	ldr	r6, [sp, #8]
   144d8:	add	sp, sp, #12
   144dc:	pop	{pc}		; (ldr pc, [sp], #4)
   144e0:	ldr	r3, [pc, #28]	; 14504 <flatcc_builder_end_struct@@Base+0xe4>
   144e4:	mov	r2, #872	; 0x368
   144e8:	ldr	r1, [pc, #24]	; 14508 <flatcc_builder_end_struct@@Base+0xe8>
   144ec:	ldr	r0, [pc, #24]	; 1450c <flatcc_builder_end_struct@@Base+0xec>
   144f0:	add	r3, pc, r3
   144f4:	add	r3, r3, #296	; 0x128
   144f8:	add	r1, pc, r1
   144fc:	add	r0, pc, r0
   14500:	bl	12324 <__assert_fail@plt>
   14504:	andeq	r5, r0, ip, lsr #4
   14508:	andeq	r5, r0, r4, ror r9
   1450c:	muleq	r0, r4, sl

00014510 <flatcc_builder_extend_vector@@Base>:
   14510:	ldr	r2, [r0, #32]
   14514:	strd	r4, [sp, #-16]!
   14518:	ldr	r3, [r2, #20]
   1451c:	ldr	ip, [r2, #24]
   14520:	str	r6, [sp, #8]
   14524:	str	lr, [sp, #12]
   14528:	adds	r3, r1, r3
   1452c:	movcs	r4, #1
   14530:	movcc	r4, #0
   14534:	cmp	ip, r3
   14538:	orrcc	r4, r4, #1
   1453c:	cmp	r4, #0
   14540:	bne	1459c <flatcc_builder_extend_vector@@Base+0x8c>
   14544:	ldr	ip, [r2, #16]
   14548:	mov	r5, r0
   1454c:	ldr	r6, [r0, #20]
   14550:	str	r3, [r2, #20]
   14554:	ldr	r3, [r0, #24]
   14558:	mla	r1, ip, r1, r6
   1455c:	cmp	r1, r3
   14560:	str	r1, [r0, #20]
   14564:	bcs	14580 <flatcc_builder_extend_vector@@Base+0x70>
   14568:	ldr	r0, [r5, #16]
   1456c:	add	r0, r0, r6
   14570:	ldrd	r4, [sp]
   14574:	ldr	r6, [sp, #8]
   14578:	add	sp, sp, #12
   1457c:	pop	{pc}		; (ldr pc, [sp], #4)
   14580:	add	r1, r1, #1
   14584:	mvn	r2, #3
   14588:	bl	12fa0 <_start@@Base+0xb50>
   1458c:	cmp	r0, #0
   14590:	beq	14568 <flatcc_builder_extend_vector@@Base+0x58>
   14594:	mov	r0, r4
   14598:	b	14570 <flatcc_builder_extend_vector@@Base+0x60>
   1459c:	bl	13324 <flatcc_builder_default_alloc@@Base+0x2fc>

000145a0 <flatcc_builder_vector_push@@Base>:
   145a0:	ldr	r3, [r0, #32]
   145a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   145a8:	ldrh	r2, [r3, #14]
   145ac:	strd	r6, [sp, #8]
   145b0:	str	r8, [sp, #16]
   145b4:	str	lr, [sp, #20]
   145b8:	cmp	r2, #4
   145bc:	bne	14650 <flatcc_builder_vector_push@@Base+0xb0>
   145c0:	mov	r7, r1
   145c4:	ldr	r2, [r3, #20]
   145c8:	ldr	r1, [r3, #24]
   145cc:	cmp	r2, r1
   145d0:	bhi	14674 <flatcc_builder_vector_push@@Base+0xd4>
   145d4:	add	r2, r2, #1
   145d8:	ldr	r6, [r3, #16]
   145dc:	mov	r4, r0
   145e0:	ldr	r5, [r0, #20]
   145e4:	str	r2, [r3, #20]
   145e8:	ldr	r3, [r0, #24]
   145ec:	add	r1, r6, r5
   145f0:	cmp	r1, r3
   145f4:	str	r1, [r0, #20]
   145f8:	bcs	14634 <flatcc_builder_vector_push@@Base+0x94>
   145fc:	ldr	r3, [r4, #16]
   14600:	adds	r3, r3, r5
   14604:	beq	1461c <flatcc_builder_vector_push@@Base+0x7c>
   14608:	mov	r0, r3
   1460c:	mov	r2, r6
   14610:	mov	r1, r7
   14614:	bl	12294 <memcpy@plt>
   14618:	mov	r3, r0
   1461c:	ldrd	r4, [sp]
   14620:	mov	r0, r3
   14624:	ldrd	r6, [sp, #8]
   14628:	ldr	r8, [sp, #16]
   1462c:	add	sp, sp, #20
   14630:	pop	{pc}		; (ldr pc, [sp], #4)
   14634:	add	r1, r1, #1
   14638:	mvn	r2, #3
   1463c:	bl	12fa0 <_start@@Base+0xb50>
   14640:	cmp	r0, #0
   14644:	beq	145fc <flatcc_builder_vector_push@@Base+0x5c>
   14648:	mov	r3, #0
   1464c:	b	1461c <flatcc_builder_vector_push@@Base+0x7c>
   14650:	ldr	r3, [pc, #64]	; 14698 <flatcc_builder_vector_push@@Base+0xf8>
   14654:	movw	r2, #907	; 0x38b
   14658:	ldr	r1, [pc, #60]	; 1469c <flatcc_builder_vector_push@@Base+0xfc>
   1465c:	ldr	r0, [pc, #60]	; 146a0 <flatcc_builder_vector_push@@Base+0x100>
   14660:	add	r3, pc, r3
   14664:	add	r3, r3, #324	; 0x144
   14668:	add	r1, pc, r1
   1466c:	add	r0, pc, r0
   14670:	bl	12324 <__assert_fail@plt>
   14674:	ldr	r3, [pc, #40]	; 146a4 <flatcc_builder_vector_push@@Base+0x104>
   14678:	mov	r2, #908	; 0x38c
   1467c:	ldr	r1, [pc, #36]	; 146a8 <flatcc_builder_vector_push@@Base+0x108>
   14680:	ldr	r0, [pc, #36]	; 146ac <flatcc_builder_vector_push@@Base+0x10c>
   14684:	add	r3, pc, r3
   14688:	add	r3, r3, #324	; 0x144
   1468c:	add	r1, pc, r1
   14690:	add	r0, pc, r0
   14694:	bl	12324 <__assert_fail@plt>
   14698:	strheq	r5, [r0], -ip
   1469c:	andeq	r5, r0, r4, lsl #16
   146a0:	andeq	r5, r0, r0, asr r9
   146a4:	muleq	r0, r8, r0
   146a8:	andeq	r5, r0, r0, ror #15
   146ac:	andeq	r5, r0, r8, asr r9

000146b0 <flatcc_builder_append_vector@@Base>:
   146b0:	ldr	ip, [r0, #32]
   146b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   146b8:	ldrh	r3, [ip, #14]
   146bc:	strd	r6, [sp, #8]
   146c0:	str	r8, [sp, #16]
   146c4:	str	lr, [sp, #20]
   146c8:	cmp	r3, #4
   146cc:	bne	14778 <flatcc_builder_append_vector@@Base+0xc8>
   146d0:	mov	r6, r1
   146d4:	ldr	r1, [ip, #20]
   146d8:	ldr	r4, [ip, #24]
   146dc:	adds	r1, r2, r1
   146e0:	movcs	r3, #1
   146e4:	movcc	r3, #0
   146e8:	cmp	r4, r1
   146ec:	movcs	r4, r3
   146f0:	orrcc	r4, r3, #1
   146f4:	cmp	r4, #0
   146f8:	bne	1479c <flatcc_builder_append_vector@@Base+0xec>
   146fc:	ldr	r7, [ip, #16]
   14700:	mov	r5, r0
   14704:	ldr	r8, [r0, #20]
   14708:	ldr	r3, [r0, #24]
   1470c:	mul	r7, r7, r2
   14710:	str	r1, [ip, #20]
   14714:	add	r1, r7, r8
   14718:	cmp	r1, r3
   1471c:	str	r1, [r0, #20]
   14720:	bcs	1475c <flatcc_builder_append_vector@@Base+0xac>
   14724:	ldr	r3, [r5, #16]
   14728:	adds	r3, r3, r8
   1472c:	beq	14744 <flatcc_builder_append_vector@@Base+0x94>
   14730:	mov	r0, r3
   14734:	mov	r2, r7
   14738:	mov	r1, r6
   1473c:	bl	12294 <memcpy@plt>
   14740:	mov	r3, r0
   14744:	ldrd	r4, [sp]
   14748:	mov	r0, r3
   1474c:	ldrd	r6, [sp, #8]
   14750:	ldr	r8, [sp, #16]
   14754:	add	sp, sp, #20
   14758:	pop	{pc}		; (ldr pc, [sp], #4)
   1475c:	add	r1, r1, #1
   14760:	mvn	r2, #3
   14764:	bl	12fa0 <_start@@Base+0xb50>
   14768:	cmp	r0, #0
   1476c:	beq	14724 <flatcc_builder_append_vector@@Base+0x74>
   14770:	mov	r3, r4
   14774:	b	14744 <flatcc_builder_append_vector@@Base+0x94>
   14778:	ldr	r3, [pc, #32]	; 147a0 <flatcc_builder_append_vector@@Base+0xf0>
   1477c:	movw	r2, #915	; 0x393
   14780:	ldr	r1, [pc, #28]	; 147a4 <flatcc_builder_append_vector@@Base+0xf4>
   14784:	ldr	r0, [pc, #28]	; 147a8 <flatcc_builder_append_vector@@Base+0xf8>
   14788:	add	r3, pc, r3
   1478c:	add	r3, r3, #352	; 0x160
   14790:	add	r1, pc, r1
   14794:	add	r0, pc, r0
   14798:	bl	12324 <__assert_fail@plt>
   1479c:	bl	13324 <flatcc_builder_default_alloc@@Base+0x2fc>
   147a0:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   147a4:	ldrdeq	r5, [r0], -ip
   147a8:	andeq	r5, r0, r8, lsr #16

000147ac <flatcc_builder_extend_offset_vector@@Base>:
   147ac:	ldr	ip, [r0, #32]
   147b0:	strd	r4, [sp, #-16]!
   147b4:	ldr	r3, [ip, #20]
   147b8:	str	r6, [sp, #8]
   147bc:	str	lr, [sp, #12]
   147c0:	adds	r2, r1, r3
   147c4:	movcs	r3, #1
   147c8:	movcc	r3, #0
   147cc:	cmn	r2, #-1073741823	; 0xc0000001
   147d0:	movls	r4, #0
   147d4:	movhi	r4, #1
   147d8:	orrs	r4, r3, r4
   147dc:	bne	14834 <flatcc_builder_extend_offset_vector@@Base+0x88>
   147e0:	ldr	r6, [r0, #20]
   147e4:	mov	r5, r0
   147e8:	ldr	r3, [r0, #24]
   147ec:	str	r2, [ip, #20]
   147f0:	add	r1, r6, r1, lsl #2
   147f4:	cmp	r1, r3
   147f8:	str	r1, [r0, #20]
   147fc:	bcs	14818 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   14800:	ldr	r0, [r5, #16]
   14804:	add	r0, r0, r6
   14808:	ldrd	r4, [sp]
   1480c:	ldr	r6, [sp, #8]
   14810:	add	sp, sp, #12
   14814:	pop	{pc}		; (ldr pc, [sp], #4)
   14818:	add	r1, r1, #1
   1481c:	mvn	r2, #3
   14820:	bl	12fa0 <_start@@Base+0xb50>
   14824:	cmp	r0, #0
   14828:	beq	14800 <flatcc_builder_extend_offset_vector@@Base+0x54>
   1482c:	mov	r0, r4
   14830:	b	14808 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   14834:	bl	13324 <flatcc_builder_default_alloc@@Base+0x2fc>

00014838 <flatcc_builder_offset_vector_push@@Base>:
   14838:	ldr	r2, [r0, #32]
   1483c:	strd	r4, [sp, #-16]!
   14840:	ldrh	r3, [r2, #14]
   14844:	str	r6, [sp, #8]
   14848:	str	lr, [sp, #12]
   1484c:	cmp	r3, #5
   14850:	bne	148cc <flatcc_builder_offset_vector_push@@Base+0x94>
   14854:	ldr	r3, [r2, #20]
   14858:	cmn	r3, #-1073741823	; 0xc0000001
   1485c:	beq	148b8 <flatcc_builder_offset_vector_push@@Base+0x80>
   14860:	ldr	r5, [r0, #20]
   14864:	mov	r6, r1
   14868:	add	r3, r3, #1
   1486c:	mov	r4, r0
   14870:	ldr	r1, [r0, #24]
   14874:	str	r3, [r2, #20]
   14878:	add	r3, r5, #4
   1487c:	cmp	r3, r1
   14880:	str	r3, [r0, #20]
   14884:	bcs	148a4 <flatcc_builder_offset_vector_push@@Base+0x6c>
   14888:	ldr	r3, [r4, #16]
   1488c:	adds	r0, r3, r5
   14890:	strne	r6, [r3, r5]
   14894:	ldrd	r4, [sp]
   14898:	ldr	r6, [sp, #8]
   1489c:	add	sp, sp, #12
   148a0:	pop	{pc}		; (ldr pc, [sp], #4)
   148a4:	mvn	r2, #3
   148a8:	add	r1, r5, #5
   148ac:	bl	12fa0 <_start@@Base+0xb50>
   148b0:	cmp	r0, #0
   148b4:	beq	14888 <flatcc_builder_offset_vector_push@@Base+0x50>
   148b8:	ldrd	r4, [sp]
   148bc:	mov	r0, #0
   148c0:	ldr	r6, [sp, #8]
   148c4:	add	sp, sp, #12
   148c8:	pop	{pc}		; (ldr pc, [sp], #4)
   148cc:	ldr	r3, [pc, #28]	; 148f0 <flatcc_builder_offset_vector_push@@Base+0xb8>
   148d0:	movw	r2, #934	; 0x3a6
   148d4:	ldr	r1, [pc, #24]	; 148f4 <flatcc_builder_offset_vector_push@@Base+0xbc>
   148d8:	ldr	r0, [pc, #24]	; 148f8 <flatcc_builder_offset_vector_push@@Base+0xc0>
   148dc:	add	r3, pc, r3
   148e0:	add	r3, r3, #384	; 0x180
   148e4:	add	r1, pc, r1
   148e8:	add	r0, pc, r0
   148ec:	bl	12324 <__assert_fail@plt>
   148f0:	andeq	r4, r0, r0, asr #28
   148f4:	andeq	r5, r0, r8, lsl #11
   148f8:	andeq	r5, r0, r0, asr #14

000148fc <flatcc_builder_append_offset_vector@@Base>:
   148fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14900:	mov	r4, r1
   14904:	ldr	r1, [r0, #32]
   14908:	ldrh	r3, [r1, #14]
   1490c:	strd	r6, [sp, #8]
   14910:	str	r8, [sp, #16]
   14914:	str	lr, [sp, #20]
   14918:	cmp	r3, #5
   1491c:	bne	149bc <flatcc_builder_append_offset_vector@@Base+0xc0>
   14920:	ldr	r3, [r1, #20]
   14924:	adds	r3, r2, r3
   14928:	movcs	lr, #1
   1492c:	movcc	lr, #0
   14930:	cmn	r3, #-1073741823	; 0xc0000001
   14934:	movls	ip, #0
   14938:	movhi	ip, #1
   1493c:	orrs	r8, lr, ip
   14940:	bne	149e0 <flatcc_builder_append_offset_vector@@Base+0xe4>
   14944:	ldr	r7, [r0, #20]
   14948:	lsl	r6, r2, #2
   1494c:	mov	r5, r0
   14950:	str	r3, [r1, #20]
   14954:	ldr	r3, [r0, #24]
   14958:	add	r1, r6, r7
   1495c:	cmp	r1, r3
   14960:	str	r1, [r0, #20]
   14964:	bcs	149a0 <flatcc_builder_append_offset_vector@@Base+0xa4>
   14968:	ldr	r3, [r5, #16]
   1496c:	adds	r3, r3, r7
   14970:	beq	14988 <flatcc_builder_append_offset_vector@@Base+0x8c>
   14974:	mov	r0, r3
   14978:	mov	r2, r6
   1497c:	mov	r1, r4
   14980:	bl	12294 <memcpy@plt>
   14984:	mov	r3, r0
   14988:	ldrd	r4, [sp]
   1498c:	mov	r0, r3
   14990:	ldrd	r6, [sp, #8]
   14994:	ldr	r8, [sp, #16]
   14998:	add	sp, sp, #20
   1499c:	pop	{pc}		; (ldr pc, [sp], #4)
   149a0:	add	r1, r1, #1
   149a4:	mvn	r2, #3
   149a8:	bl	12fa0 <_start@@Base+0xb50>
   149ac:	cmp	r0, #0
   149b0:	beq	14968 <flatcc_builder_append_offset_vector@@Base+0x6c>
   149b4:	mov	r3, r8
   149b8:	b	14988 <flatcc_builder_append_offset_vector@@Base+0x8c>
   149bc:	ldr	r3, [pc, #32]	; 149e4 <flatcc_builder_append_offset_vector@@Base+0xe8>
   149c0:	mov	r2, #948	; 0x3b4
   149c4:	ldr	r1, [pc, #28]	; 149e8 <flatcc_builder_append_offset_vector@@Base+0xec>
   149c8:	ldr	r0, [pc, #28]	; 149ec <flatcc_builder_append_offset_vector@@Base+0xf0>
   149cc:	add	r3, pc, r3
   149d0:	add	r3, r3, #420	; 0x1a4
   149d4:	add	r1, pc, r1
   149d8:	add	r0, pc, r0
   149dc:	bl	12324 <__assert_fail@plt>
   149e0:	bl	13324 <flatcc_builder_default_alloc@@Base+0x2fc>
   149e4:	andeq	r4, r0, r0, asr sp
   149e8:	muleq	r0, r8, r4
   149ec:	andeq	r5, r0, r0, asr r6

000149f0 <flatcc_builder_extend_string@@Base>:
   149f0:	ldr	r2, [r0, #32]
   149f4:	strd	r4, [sp, #-16]!
   149f8:	ldrh	r3, [r2, #14]
   149fc:	str	r6, [sp, #8]
   14a00:	str	lr, [sp, #12]
   14a04:	cmp	r3, #6
   14a08:	bne	14a70 <flatcc_builder_extend_string@@Base+0x80>
   14a0c:	ldr	r3, [r2, #20]
   14a10:	adds	r3, r1, r3
   14a14:	bcs	14a6c <flatcc_builder_extend_string@@Base+0x7c>
   14a18:	ldr	r5, [r0, #20]
   14a1c:	mov	r4, r0
   14a20:	str	r3, [r2, #20]
   14a24:	ldr	r3, [r0, #24]
   14a28:	add	r1, r1, r5
   14a2c:	cmp	r1, r3
   14a30:	str	r1, [r0, #20]
   14a34:	bcs	14a50 <flatcc_builder_extend_string@@Base+0x60>
   14a38:	ldr	r0, [r4, #16]
   14a3c:	add	r0, r0, r5
   14a40:	ldrd	r4, [sp]
   14a44:	ldr	r6, [sp, #8]
   14a48:	add	sp, sp, #12
   14a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a50:	add	r1, r1, #1
   14a54:	mvn	r2, #3
   14a58:	bl	12fa0 <_start@@Base+0xb50>
   14a5c:	cmp	r0, #0
   14a60:	beq	14a38 <flatcc_builder_extend_string@@Base+0x48>
   14a64:	mov	r0, #0
   14a68:	b	14a40 <flatcc_builder_extend_string@@Base+0x50>
   14a6c:	bl	13324 <flatcc_builder_default_alloc@@Base+0x2fc>
   14a70:	ldr	r3, [pc, #28]	; 14a94 <flatcc_builder_extend_string@@Base+0xa4>
   14a74:	movw	r2, #957	; 0x3bd
   14a78:	ldr	r1, [pc, #24]	; 14a98 <flatcc_builder_extend_string@@Base+0xa8>
   14a7c:	ldr	r0, [pc, #24]	; 14a9c <flatcc_builder_extend_string@@Base+0xac>
   14a80:	add	r3, pc, r3
   14a84:	add	r3, r3, #456	; 0x1c8
   14a88:	add	r1, pc, r1
   14a8c:	add	r0, pc, r0
   14a90:	bl	12324 <__assert_fail@plt>
   14a94:	muleq	r0, ip, ip
   14a98:	andeq	r5, r0, r4, ror #7
   14a9c:	ldrdeq	r5, [r0], -r0

00014aa0 <flatcc_builder_append_string@@Base>:
   14aa0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14aa4:	strd	r6, [sp, #8]
   14aa8:	mov	r7, r1
   14aac:	ldr	r1, [r0, #32]
   14ab0:	str	r8, [sp, #16]
   14ab4:	str	lr, [sp, #20]
   14ab8:	ldrh	r3, [r1, #14]
   14abc:	cmp	r3, #6
   14ac0:	bne	14b4c <flatcc_builder_append_string@@Base+0xac>
   14ac4:	ldr	r3, [r1, #20]
   14ac8:	mov	r5, r2
   14acc:	adds	r3, r2, r3
   14ad0:	bcs	14b48 <flatcc_builder_append_string@@Base+0xa8>
   14ad4:	ldr	r6, [r0, #20]
   14ad8:	mov	r4, r0
   14adc:	str	r3, [r1, #20]
   14ae0:	ldr	r3, [r0, #24]
   14ae4:	add	r1, r2, r6
   14ae8:	cmp	r1, r3
   14aec:	str	r1, [r0, #20]
   14af0:	bcs	14b2c <flatcc_builder_append_string@@Base+0x8c>
   14af4:	ldr	r3, [r4, #16]
   14af8:	adds	r3, r3, r6
   14afc:	beq	14b14 <flatcc_builder_append_string@@Base+0x74>
   14b00:	mov	r0, r3
   14b04:	mov	r2, r5
   14b08:	mov	r1, r7
   14b0c:	bl	12294 <memcpy@plt>
   14b10:	mov	r3, r0
   14b14:	ldrd	r4, [sp]
   14b18:	mov	r0, r3
   14b1c:	ldrd	r6, [sp, #8]
   14b20:	ldr	r8, [sp, #16]
   14b24:	add	sp, sp, #20
   14b28:	pop	{pc}		; (ldr pc, [sp], #4)
   14b2c:	add	r1, r1, #1
   14b30:	mvn	r2, #3
   14b34:	bl	12fa0 <_start@@Base+0xb50>
   14b38:	cmp	r0, #0
   14b3c:	beq	14af4 <flatcc_builder_append_string@@Base+0x54>
   14b40:	mov	r3, #0
   14b44:	b	14b14 <flatcc_builder_append_string@@Base+0x74>
   14b48:	bl	13324 <flatcc_builder_default_alloc@@Base+0x2fc>
   14b4c:	ldr	r3, [pc, #28]	; 14b70 <flatcc_builder_append_string@@Base+0xd0>
   14b50:	movw	r2, #966	; 0x3c6
   14b54:	ldr	r1, [pc, #24]	; 14b74 <flatcc_builder_append_string@@Base+0xd4>
   14b58:	ldr	r0, [pc, #24]	; 14b78 <flatcc_builder_append_string@@Base+0xd8>
   14b5c:	add	r3, pc, r3
   14b60:	add	r3, r3, #488	; 0x1e8
   14b64:	add	r1, pc, r1
   14b68:	add	r0, pc, r0
   14b6c:	bl	12324 <__assert_fail@plt>
   14b70:	andeq	r4, r0, r0, asr #23
   14b74:	andeq	r5, r0, r8, lsl #6
   14b78:	strdeq	r5, [r0], -r4

00014b7c <flatcc_builder_append_string_str@@Base>:
   14b7c:	strd	r4, [sp, #-16]!
   14b80:	mov	r5, r0
   14b84:	mov	r0, r1
   14b88:	mov	r4, r1
   14b8c:	str	r6, [sp, #8]
   14b90:	str	lr, [sp, #12]
   14b94:	bl	122dc <strlen@plt>
   14b98:	mov	r2, r0
   14b9c:	mov	r1, r4
   14ba0:	ldr	r6, [sp, #8]
   14ba4:	mov	r0, r5
   14ba8:	ldrd	r4, [sp]
   14bac:	ldr	lr, [sp, #12]
   14bb0:	add	sp, sp, #16
   14bb4:	b	14aa0 <flatcc_builder_append_string@@Base>

00014bb8 <flatcc_builder_append_string_strn@@Base>:
   14bb8:	strd	r4, [sp, #-16]!
   14bbc:	mov	r4, r1
   14bc0:	mov	r1, #0
   14bc4:	str	r6, [sp, #8]
   14bc8:	mov	r6, r0
   14bcc:	mov	r0, r4
   14bd0:	mov	r5, r2
   14bd4:	str	lr, [sp, #12]
   14bd8:	bl	1230c <memchr@plt>
   14bdc:	cmp	r0, #0
   14be0:	mov	r1, r4
   14be4:	ldr	lr, [sp, #12]
   14be8:	subne	r5, r0, r4
   14bec:	mov	r0, r6
   14bf0:	mov	r2, r5
   14bf4:	ldrd	r4, [sp]
   14bf8:	ldr	r6, [sp, #8]
   14bfc:	add	sp, sp, #16
   14c00:	b	14aa0 <flatcc_builder_append_string@@Base>

00014c04 <flatcc_builder_truncate_vector@@Base>:
   14c04:	mov	r3, r0
   14c08:	ldr	r0, [r0, #32]
   14c0c:	str	r4, [sp, #-8]!
   14c10:	ldrh	r2, [r0, #14]
   14c14:	str	lr, [sp, #4]
   14c18:	cmp	r2, #4
   14c1c:	bne	14c6c <flatcc_builder_truncate_vector@@Base+0x68>
   14c20:	mov	lr, r1
   14c24:	ldr	r1, [r0, #20]
   14c28:	cmp	r1, lr
   14c2c:	bcc	14c90 <flatcc_builder_truncate_vector@@Base+0x8c>
   14c30:	ldr	r2, [r0, #16]
   14c34:	sub	ip, r1, lr
   14c38:	mov	r1, #0
   14c3c:	str	ip, [r0, #20]
   14c40:	ldr	r0, [r3, #16]
   14c44:	ldr	ip, [r3, #20]
   14c48:	mul	r2, r2, lr
   14c4c:	sub	ip, ip, r2
   14c50:	add	r0, r0, ip
   14c54:	str	ip, [r3, #20]
   14c58:	bl	122f4 <memset@plt>
   14c5c:	ldr	r4, [sp]
   14c60:	add	sp, sp, #4
   14c64:	mov	r0, #0
   14c68:	pop	{pc}		; (ldr pc, [sp], #4)
   14c6c:	ldr	r3, [pc, #64]	; 14cb4 <flatcc_builder_truncate_vector@@Base+0xb0>
   14c70:	movw	r2, #985	; 0x3d9
   14c74:	ldr	r1, [pc, #60]	; 14cb8 <flatcc_builder_truncate_vector@@Base+0xb4>
   14c78:	ldr	r0, [pc, #60]	; 14cbc <flatcc_builder_truncate_vector@@Base+0xb8>
   14c7c:	add	r3, pc, r3
   14c80:	add	r3, r3, #520	; 0x208
   14c84:	add	r1, pc, r1
   14c88:	add	r0, pc, r0
   14c8c:	bl	12324 <__assert_fail@plt>
   14c90:	ldr	r3, [pc, #40]	; 14cc0 <flatcc_builder_truncate_vector@@Base+0xbc>
   14c94:	movw	r2, #986	; 0x3da
   14c98:	ldr	r1, [pc, #36]	; 14cc4 <flatcc_builder_truncate_vector@@Base+0xc0>
   14c9c:	ldr	r0, [pc, #36]	; 14cc8 <flatcc_builder_truncate_vector@@Base+0xc4>
   14ca0:	add	r3, pc, r3
   14ca4:	add	r3, r3, #520	; 0x208
   14ca8:	add	r1, pc, r1
   14cac:	add	r0, pc, r0
   14cb0:	bl	12324 <__assert_fail@plt>
   14cb4:	andeq	r4, r0, r0, lsr #21
   14cb8:	andeq	r5, r0, r8, ror #3
   14cbc:	andeq	r5, r0, r4, lsr r3
   14cc0:	andeq	r4, r0, ip, ror sl
   14cc4:	andeq	r5, r0, r4, asr #3
   14cc8:	ldrdeq	r5, [r0], -ip

00014ccc <flatcc_builder_truncate_offset_vector@@Base>:
   14ccc:	mov	r3, r0
   14cd0:	ldr	r0, [r0, #32]
   14cd4:	str	r4, [sp, #-8]!
   14cd8:	ldrh	r2, [r0, #14]
   14cdc:	str	lr, [sp, #4]
   14ce0:	cmp	r2, #5
   14ce4:	bne	14d34 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   14ce8:	mov	lr, r1
   14cec:	ldr	r1, [r0, #20]
   14cf0:	cmp	r1, lr
   14cf4:	bcc	14d58 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   14cf8:	ldr	r2, [r0, #16]
   14cfc:	sub	ip, r1, lr
   14d00:	mov	r1, #0
   14d04:	str	ip, [r0, #20]
   14d08:	ldr	r0, [r3, #16]
   14d0c:	ldr	ip, [r3, #20]
   14d10:	mul	r2, r2, lr
   14d14:	sub	ip, ip, r2
   14d18:	add	r0, r0, ip
   14d1c:	str	ip, [r3, #20]
   14d20:	bl	122f4 <memset@plt>
   14d24:	ldr	r4, [sp]
   14d28:	add	sp, sp, #4
   14d2c:	mov	r0, #0
   14d30:	pop	{pc}		; (ldr pc, [sp], #4)
   14d34:	ldr	r3, [pc, #64]	; 14d7c <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   14d38:	movw	r2, #994	; 0x3e2
   14d3c:	ldr	r1, [pc, #60]	; 14d80 <flatcc_builder_truncate_offset_vector@@Base+0xb4>
   14d40:	ldr	r0, [pc, #60]	; 14d84 <flatcc_builder_truncate_offset_vector@@Base+0xb8>
   14d44:	add	r3, pc, r3
   14d48:	add	r3, r3, #552	; 0x228
   14d4c:	add	r1, pc, r1
   14d50:	add	r0, pc, r0
   14d54:	bl	12324 <__assert_fail@plt>
   14d58:	ldr	r3, [pc, #40]	; 14d88 <flatcc_builder_truncate_offset_vector@@Base+0xbc>
   14d5c:	movw	r2, #995	; 0x3e3
   14d60:	ldr	r1, [pc, #36]	; 14d8c <flatcc_builder_truncate_offset_vector@@Base+0xc0>
   14d64:	ldr	r0, [pc, #36]	; 14d90 <flatcc_builder_truncate_offset_vector@@Base+0xc4>
   14d68:	add	r3, pc, r3
   14d6c:	add	r3, r3, #552	; 0x228
   14d70:	add	r1, pc, r1
   14d74:	add	r0, pc, r0
   14d78:	bl	12324 <__assert_fail@plt>
   14d7c:	ldrdeq	r4, [r0], -r8
   14d80:	andeq	r5, r0, r0, lsr #2
   14d84:	ldrdeq	r5, [r0], -r8
   14d88:			; <UNDEFINED> instruction: 0x000049b4
   14d8c:	strdeq	r5, [r0], -ip
   14d90:	andeq	r5, r0, r8, lsr r3

00014d94 <flatcc_builder_truncate_string@@Base>:
   14d94:	str	r4, [sp, #-8]!
   14d98:	str	lr, [sp, #4]
   14d9c:	ldr	lr, [r0, #32]
   14da0:	ldrh	r2, [lr, #14]
   14da4:	cmp	r2, #6
   14da8:	bne	14df8 <flatcc_builder_truncate_string@@Base+0x64>
   14dac:	ldr	r2, [lr, #20]
   14db0:	mov	ip, r1
   14db4:	cmp	r2, r1
   14db8:	bcc	14e1c <flatcc_builder_truncate_string@@Base+0x88>
   14dbc:	sub	r1, r2, r1
   14dc0:	mov	r3, r0
   14dc4:	ldr	r0, [r0, #16]
   14dc8:	mov	r2, ip
   14dcc:	str	r1, [lr, #20]
   14dd0:	mov	r1, #0
   14dd4:	ldr	lr, [r3, #20]
   14dd8:	sub	ip, lr, ip
   14ddc:	add	r0, r0, ip
   14de0:	str	ip, [r3, #20]
   14de4:	bl	122f4 <memset@plt>
   14de8:	ldr	r4, [sp]
   14dec:	add	sp, sp, #4
   14df0:	mov	r0, #0
   14df4:	pop	{pc}		; (ldr pc, [sp], #4)
   14df8:	ldr	r3, [pc, #64]	; 14e40 <flatcc_builder_truncate_string@@Base+0xac>
   14dfc:	movw	r2, #1003	; 0x3eb
   14e00:	ldr	r1, [pc, #60]	; 14e44 <flatcc_builder_truncate_string@@Base+0xb0>
   14e04:	ldr	r0, [pc, #60]	; 14e48 <flatcc_builder_truncate_string@@Base+0xb4>
   14e08:	add	r3, pc, r3
   14e0c:	add	r3, r3, #592	; 0x250
   14e10:	add	r1, pc, r1
   14e14:	add	r0, pc, r0
   14e18:	bl	12324 <__assert_fail@plt>
   14e1c:	ldr	r3, [pc, #40]	; 14e4c <flatcc_builder_truncate_string@@Base+0xb8>
   14e20:	mov	r2, #1004	; 0x3ec
   14e24:	ldr	r1, [pc, #36]	; 14e50 <flatcc_builder_truncate_string@@Base+0xbc>
   14e28:	ldr	r0, [pc, #36]	; 14e54 <flatcc_builder_truncate_string@@Base+0xc0>
   14e2c:	add	r3, pc, r3
   14e30:	add	r3, r3, #592	; 0x250
   14e34:	add	r1, pc, r1
   14e38:	add	r0, pc, r0
   14e3c:	bl	12324 <__assert_fail@plt>
   14e40:	andeq	r4, r0, r4, lsl r9
   14e44:	andeq	r5, r0, ip, asr r0
   14e48:	andeq	r5, r0, r8, asr #4
   14e4c:	strdeq	r4, [r0], -r0
   14e50:	andeq	r5, r0, r8, lsr r0
   14e54:			; <UNDEFINED> instruction: 0x000052b0

00014e58 <flatcc_builder_start_vector@@Base>:
   14e58:	cmp	r2, #4
   14e5c:	strd	r4, [sp, #-16]!
   14e60:	mov	r5, r1
   14e64:	movcs	r1, r2
   14e68:	movcc	r1, #4
   14e6c:	str	r6, [sp, #8]
   14e70:	mov	r4, r0
   14e74:	mov	r6, r3
   14e78:	str	lr, [sp, #12]
   14e7c:	bl	1335c <flatcc_builder_default_alloc@@Base+0x334>
   14e80:	cmp	r0, #0
   14e84:	bne	14ee0 <flatcc_builder_start_vector@@Base+0x88>
   14e88:	ldr	r3, [r4, #28]
   14e8c:	mov	lr, #4
   14e90:	ldr	r2, [r4, #32]
   14e94:	ldr	r1, [r4, #64]	; 0x40
   14e98:	ldr	ip, [r4, #60]	; 0x3c
   14e9c:	strh	lr, [r2, #14]
   14ea0:	str	r5, [r2, #16]
   14ea4:	sub	r1, r1, r3
   14ea8:	str	r0, [r2, #20]
   14eac:	cmn	r1, #4
   14eb0:	str	r6, [r2, #24]
   14eb4:	add	ip, ip, r3
   14eb8:	mvnhi	r3, #3
   14ebc:	strls	r1, [r4, #24]
   14ec0:	strhi	r3, [r4, #24]
   14ec4:	mvn	r3, #3
   14ec8:	str	ip, [r4, #16]
   14ecc:	str	r3, [r2, #4]
   14ed0:	ldrd	r4, [sp]
   14ed4:	ldr	r6, [sp, #8]
   14ed8:	add	sp, sp, #12
   14edc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ee0:	mvn	r0, #0
   14ee4:	b	14ed0 <flatcc_builder_start_vector@@Base+0x78>

00014ee8 <flatcc_builder_start_offset_vector@@Base>:
   14ee8:	mov	r1, #4
   14eec:	strd	r4, [sp, #-16]!
   14ef0:	mov	r4, r0
   14ef4:	str	r6, [sp, #8]
   14ef8:	str	lr, [sp, #12]
   14efc:	bl	1335c <flatcc_builder_default_alloc@@Base+0x334>
   14f00:	cmp	r0, #0
   14f04:	bne	14f5c <flatcc_builder_start_offset_vector@@Base+0x74>
   14f08:	ldr	ip, [r4, #28]
   14f0c:	mov	lr, #4
   14f10:	mov	r5, #5
   14f14:	ldr	r3, [r4, #32]
   14f18:	ldr	r2, [r4, #64]	; 0x40
   14f1c:	ldr	r1, [r4, #60]	; 0x3c
   14f20:	strh	r5, [r3, #14]
   14f24:	str	lr, [r3, #16]
   14f28:	sub	r2, r2, ip
   14f2c:	str	r0, [r3, #20]
   14f30:	cmn	r2, #4
   14f34:	mvnhi	r2, #3
   14f38:	add	r1, r1, ip
   14f3c:	str	r1, [r4, #16]
   14f40:	str	r2, [r4, #24]
   14f44:	mvn	r2, #3
   14f48:	str	r2, [r3, #4]
   14f4c:	ldrd	r4, [sp]
   14f50:	ldr	r6, [sp, #8]
   14f54:	add	sp, sp, #12
   14f58:	pop	{pc}		; (ldr pc, [sp], #4)
   14f5c:	mvn	r0, #0
   14f60:	b	14f4c <flatcc_builder_start_offset_vector@@Base+0x64>

00014f64 <flatcc_builder_start_string@@Base>:
   14f64:	mov	r1, #1
   14f68:	strd	r4, [sp, #-16]!
   14f6c:	mov	r4, r0
   14f70:	str	r6, [sp, #8]
   14f74:	str	lr, [sp, #12]
   14f78:	bl	1335c <flatcc_builder_default_alloc@@Base+0x334>
   14f7c:	cmp	r0, #0
   14f80:	bne	14fd8 <flatcc_builder_start_string@@Base+0x74>
   14f84:	ldr	ip, [r4, #28]
   14f88:	mov	lr, #1
   14f8c:	mov	r5, #6
   14f90:	ldr	r3, [r4, #32]
   14f94:	ldr	r2, [r4, #64]	; 0x40
   14f98:	ldr	r1, [r4, #60]	; 0x3c
   14f9c:	strh	r5, [r3, #14]
   14fa0:	str	lr, [r3, #16]
   14fa4:	sub	r2, r2, ip
   14fa8:	str	r0, [r3, #20]
   14fac:	cmn	r2, #4
   14fb0:	mvnhi	r2, #3
   14fb4:	add	r1, r1, ip
   14fb8:	str	r1, [r4, #16]
   14fbc:	str	r2, [r4, #24]
   14fc0:	mvn	r2, #3
   14fc4:	str	r2, [r3, #4]
   14fc8:	ldrd	r4, [sp]
   14fcc:	ldr	r6, [sp, #8]
   14fd0:	add	sp, sp, #12
   14fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14fd8:	mvn	r0, #0
   14fdc:	b	14fc8 <flatcc_builder_start_string@@Base+0x64>

00014fe0 <flatcc_builder_reserve_table@@Base>:
   14fe0:	cmp	r1, #0
   14fe4:	strd	r4, [sp, #-20]!	; 0xffffffec
   14fe8:	strd	r6, [sp, #8]
   14fec:	str	lr, [sp, #16]
   14ff0:	sub	sp, sp, #12
   14ff4:	blt	150d8 <flatcc_builder_reserve_table@@Base+0xf8>
   14ff8:	ldr	r2, [r0, #32]
   14ffc:	add	r1, r1, #2
   15000:	mov	r4, r0
   15004:	lsl	r5, r1, #1
   15008:	ldr	r1, [r0, #56]	; 0x38
   1500c:	ldrh	r6, [r2, #28]
   15010:	ldr	r3, [r2, #16]
   15014:	add	r6, r3, r6, lsl #1
   15018:	add	r2, r6, r5
   1501c:	cmp	r2, r1
   15020:	bhi	15088 <flatcc_builder_reserve_table@@Base+0xa8>
   15024:	ldr	r3, [r4, #52]	; 0x34
   15028:	adds	r3, r3, r6
   1502c:	mvneq	r0, #0
   15030:	streq	r3, [r4, #4]
   15034:	beq	15074 <flatcc_builder_reserve_table@@Base+0x94>
   15038:	ldr	r2, [r4, #32]
   1503c:	add	r3, r3, #4
   15040:	ldr	r1, [r4, #80]	; 0x50
   15044:	ldr	r6, [r2, #20]
   15048:	str	r3, [r4, #4]
   1504c:	add	r2, r5, r6
   15050:	sub	r2, r2, #3
   15054:	cmp	r2, r1
   15058:	bhi	150b0 <flatcc_builder_reserve_table@@Base+0xd0>
   1505c:	ldr	r3, [r4, #76]	; 0x4c
   15060:	add	r3, r3, r6
   15064:	clz	r0, r3
   15068:	lsr	r0, r0, #5
   1506c:	str	r3, [r4]
   15070:	rsb	r0, r0, #0
   15074:	add	sp, sp, #12
   15078:	ldrd	r4, [sp]
   1507c:	ldrd	r6, [sp, #8]
   15080:	add	sp, sp, #16
   15084:	pop	{pc}		; (ldr pc, [sp], #4)
   15088:	mov	ip, #0
   1508c:	add	r1, r0, #52	; 0x34
   15090:	ldr	r0, [r0, #40]	; 0x28
   15094:	mov	r3, #1
   15098:	str	ip, [sp]
   1509c:	ldr	r7, [r4, #48]	; 0x30
   150a0:	blx	r7
   150a4:	cmp	r0, #0
   150a8:	beq	15024 <flatcc_builder_reserve_table@@Base+0x44>
   150ac:	bl	1314c <flatcc_builder_default_alloc@@Base+0x124>
   150b0:	mov	ip, #3
   150b4:	mov	r3, #0
   150b8:	ldr	r0, [r4, #40]	; 0x28
   150bc:	add	r1, r4, #76	; 0x4c
   150c0:	str	ip, [sp]
   150c4:	ldr	r5, [r4, #48]	; 0x30
   150c8:	blx	r5
   150cc:	cmp	r0, #0
   150d0:	beq	1505c <flatcc_builder_reserve_table@@Base+0x7c>
   150d4:	b	150ac <flatcc_builder_reserve_table@@Base+0xcc>
   150d8:	ldr	r3, [pc, #28]	; 150fc <flatcc_builder_reserve_table@@Base+0x11c>
   150dc:	movw	r2, #1065	; 0x429
   150e0:	ldr	r1, [pc, #24]	; 15100 <flatcc_builder_reserve_table@@Base+0x120>
   150e4:	ldr	r0, [pc, #24]	; 15104 <flatcc_builder_reserve_table@@Base+0x124>
   150e8:	add	r3, pc, r3
   150ec:	add	r3, r3, #624	; 0x270
   150f0:	add	r1, pc, r1
   150f4:	add	r0, pc, r0
   150f8:	bl	12324 <__assert_fail@plt>
   150fc:	andeq	r4, r0, r4, lsr r6
   15100:	andeq	r4, r0, ip, ror sp
   15104:	andeq	r5, r0, r8, lsl r0

00015108 <flatcc_builder_start_table@@Base>:
   15108:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1510c:	mov	r5, r1
   15110:	mov	r1, #4
   15114:	strd	r6, [sp, #8]
   15118:	mov	r4, r0
   1511c:	strd	r8, [sp, #16]
   15120:	str	sl, [sp, #24]
   15124:	str	lr, [sp, #28]
   15128:	sub	sp, sp, #8
   1512c:	bl	1335c <flatcc_builder_default_alloc@@Base+0x334>
   15130:	subs	r7, r0, #0
   15134:	bne	1527c <flatcc_builder_start_table@@Base+0x174>
   15138:	ldm	r4, {r0, r2}
   1513c:	add	r5, r5, #2
   15140:	movw	ip, #15186	; 0x3b52
   15144:	movt	ip, #12137	; 0x2f69
   15148:	lsl	r5, r5, #1
   1514c:	mov	r8, #3
   15150:	ldrh	lr, [r4, #8]
   15154:	ldr	r1, [r4, #52]	; 0x34
   15158:	ldr	sl, [r4, #76]	; 0x4c
   1515c:	ldr	r3, [r4, #32]
   15160:	sub	r2, r2, r1
   15164:	ldr	r9, [r4, #56]	; 0x38
   15168:	add	r6, r2, lr, lsl #1
   1516c:	sub	r0, r0, sl
   15170:	ldr	sl, [r4, #12]
   15174:	str	r2, [r3, #16]
   15178:	add	r2, r6, r5
   1517c:	str	r0, [r3, #20]
   15180:	cmp	r2, r9
   15184:	str	sl, [r3, #24]
   15188:	strh	lr, [r3, #28]
   1518c:	strh	r7, [r4, #8]
   15190:	str	ip, [r4, #12]
   15194:	strh	r8, [r3, #14]
   15198:	bls	151c0 <flatcc_builder_start_table@@Base+0xb8>
   1519c:	mov	r3, #1
   151a0:	add	r1, r4, #52	; 0x34
   151a4:	str	r7, [sp]
   151a8:	ldr	r0, [r4, #40]	; 0x28
   151ac:	ldr	r8, [r4, #48]	; 0x30
   151b0:	blx	r8
   151b4:	cmp	r0, #0
   151b8:	bne	15278 <flatcc_builder_start_table@@Base+0x170>
   151bc:	ldr	r1, [r4, #52]	; 0x34
   151c0:	adds	r6, r6, r1
   151c4:	streq	r6, [r4, #4]
   151c8:	beq	1527c <flatcc_builder_start_table@@Base+0x174>
   151cc:	ldr	r1, [r4, #32]
   151d0:	sub	r2, r5, #3
   151d4:	add	r6, r6, #4
   151d8:	ldr	r3, [r4, #80]	; 0x50
   151dc:	ldr	r5, [r1, #20]
   151e0:	str	r6, [r4, #4]
   151e4:	add	r2, r2, r5
   151e8:	cmp	r2, r3
   151ec:	bhi	15254 <flatcc_builder_start_table@@Base+0x14c>
   151f0:	ldr	r3, [r4, #76]	; 0x4c
   151f4:	add	r3, r3, r5
   151f8:	cmp	r3, #0
   151fc:	str	r3, [r4]
   15200:	beq	1527c <flatcc_builder_start_table@@Base+0x174>
   15204:	ldr	r0, [r4, #28]
   15208:	movw	r2, #65532	; 0xfffc
   1520c:	ldr	ip, [r4, #32]
   15210:	ldr	r3, [r4, #64]	; 0x40
   15214:	ldr	r1, [r4, #60]	; 0x3c
   15218:	sub	r3, r3, r0
   1521c:	cmp	r3, r2
   15220:	add	r1, r1, r0
   15224:	movcs	r3, r2
   15228:	str	r1, [r4, #16]
   1522c:	str	r3, [r4, #24]
   15230:	str	r2, [ip, #4]
   15234:	mov	r0, r7
   15238:	add	sp, sp, #8
   1523c:	ldrd	r4, [sp]
   15240:	ldrd	r6, [sp, #8]
   15244:	ldrd	r8, [sp, #16]
   15248:	ldr	sl, [sp, #24]
   1524c:	add	sp, sp, #28
   15250:	pop	{pc}		; (ldr pc, [sp], #4)
   15254:	mov	ip, #3
   15258:	mov	r3, #0
   1525c:	ldr	r0, [r4, #40]	; 0x28
   15260:	add	r1, r4, #76	; 0x4c
   15264:	str	ip, [sp]
   15268:	ldr	r6, [r4, #48]	; 0x30
   1526c:	blx	r6
   15270:	cmp	r0, #0
   15274:	beq	151f0 <flatcc_builder_start_table@@Base+0xe8>
   15278:	bl	1314c <flatcc_builder_default_alloc@@Base+0x124>
   1527c:	mvn	r7, #0
   15280:	b	15234 <flatcc_builder_start_table@@Base+0x12c>

00015284 <flatcc_builder_create_vtable@@Base>:
   15284:	mov	r3, #0
   15288:	strd	r4, [sp, #-16]!
   1528c:	mov	r5, r0
   15290:	ldr	r0, [r0, #152]	; 0x98
   15294:	cmp	r2, #0
   15298:	str	r6, [sp, #8]
   1529c:	str	lr, [sp, #12]
   152a0:	sub	sp, sp, #80	; 0x50
   152a4:	str	r3, [sp, #8]
   152a8:	str	r3, [sp, #12]
   152ac:	beq	15324 <flatcc_builder_create_vtable@@Base+0xa0>
   152b0:	mov	r3, #1
   152b4:	cmp	r0, #0
   152b8:	strd	r2, [sp, #8]
   152bc:	str	r1, [sp, #16]
   152c0:	str	r2, [sp, #20]
   152c4:	beq	1535c <flatcc_builder_create_vtable@@Base+0xd8>
   152c8:	ldr	r3, [r5, #136]	; 0x88
   152cc:	sub	r4, r3, r2
   152d0:	cmp	r3, r4
   152d4:	ble	15338 <flatcc_builder_create_vtable@@Base+0xb4>
   152d8:	mov	r3, r4
   152dc:	add	r1, sp, #16
   152e0:	str	r2, [sp]
   152e4:	ldr	r2, [sp, #12]
   152e8:	ldr	r0, [r5, #36]	; 0x24
   152ec:	ldr	r6, [r5, #44]	; 0x2c
   152f0:	blx	r6
   152f4:	cmp	r0, #0
   152f8:	bne	153a8 <flatcc_builder_create_vtable@@Base+0x124>
   152fc:	cmp	r4, #0
   15300:	str	r4, [r5, #136]	; 0x88
   15304:	beq	1530c <flatcc_builder_create_vtable@@Base+0x88>
   15308:	add	r4, r4, #1
   1530c:	mov	r0, r4
   15310:	add	sp, sp, #80	; 0x50
   15314:	ldrd	r4, [sp]
   15318:	ldr	r6, [sp, #8]
   1531c:	add	sp, sp, #12
   15320:	pop	{pc}		; (ldr pc, [sp], #4)
   15324:	cmp	r0, #0
   15328:	bne	15338 <flatcc_builder_create_vtable@@Base+0xb4>
   1532c:	ldr	r3, [r5, #180]	; 0xb4
   15330:	cmp	r3, #0
   15334:	beq	153a0 <flatcc_builder_create_vtable@@Base+0x11c>
   15338:	ldr	r3, [pc, #108]	; 153ac <flatcc_builder_create_vtable@@Base+0x128>
   1533c:	movw	r2, #647	; 0x287
   15340:	ldr	r1, [pc, #104]	; 153b0 <flatcc_builder_create_vtable@@Base+0x12c>
   15344:	ldr	r0, [pc, #104]	; 153b4 <flatcc_builder_create_vtable@@Base+0x130>
   15348:	add	r3, pc, r3
   1534c:	add	r3, r3, #44	; 0x2c
   15350:	add	r1, pc, r1
   15354:	add	r0, pc, r0
   15358:	bl	12324 <__assert_fail@plt>
   1535c:	ldr	r3, [r5, #180]	; 0xb4
   15360:	cmp	r3, #0
   15364:	bne	152c8 <flatcc_builder_create_vtable@@Base+0x44>
   15368:	ldr	r4, [r5, #140]	; 0x8c
   1536c:	mov	r0, r2
   15370:	add	r2, r4, r2
   15374:	str	r2, [r5, #140]	; 0x8c
   15378:	mov	r3, r4
   1537c:	add	r1, sp, #16
   15380:	str	r0, [sp]
   15384:	ldr	r2, [sp, #12]
   15388:	ldr	r0, [r5, #36]	; 0x24
   1538c:	ldr	r5, [r5, #44]	; 0x2c
   15390:	blx	r5
   15394:	cmp	r0, #0
   15398:	beq	15308 <flatcc_builder_create_vtable@@Base+0x84>
   1539c:	bl	13180 <flatcc_builder_default_alloc@@Base+0x158>
   153a0:	ldr	r4, [r5, #140]	; 0x8c
   153a4:	b	15378 <flatcc_builder_create_vtable@@Base+0xf4>
   153a8:	bl	132ec <flatcc_builder_default_alloc@@Base+0x2c4>
   153ac:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   153b0:	andeq	r4, r0, ip, lsl fp
   153b4:	andeq	r4, r0, r0, lsr #23

000153b8 <flatcc_builder_create_cached_vtable@@Base>:
   153b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   153bc:	strd	r6, [sp, #8]
   153c0:	mov	r6, r0
   153c4:	strd	r8, [sp, #16]
   153c8:	mov	r9, r2
   153cc:	mov	r8, r3
   153d0:	strd	sl, [sp, #24]
   153d4:	str	lr, [sp, #32]
   153d8:	sub	sp, sp, #28
   153dc:	str	r1, [sp, #8]
   153e0:	ldr	r1, [r0, #116]	; 0x74
   153e4:	cmp	r1, #0
   153e8:	rsbne	r1, r1, #32
   153ec:	beq	15574 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   153f0:	ldr	sl, [r6, #92]	; 0x5c
   153f4:	lsr	r8, r8, r1
   153f8:	adds	fp, sl, r8, lsl #2
   153fc:	str	fp, [sp, #12]
   15400:	beq	15610 <flatcc_builder_create_cached_vtable@@Base+0x258>
   15404:	ldr	r5, [sl, r8, lsl #2]
   15408:	cmp	r5, #0
   1540c:	beq	15644 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   15410:	mov	r3, #0
   15414:	str	r8, [sp, #16]
   15418:	mov	r8, fp
   1541c:	mov	fp, r6
   15420:	ldr	r7, [r6, #68]	; 0x44
   15424:	str	r3, [sp, #20]
   15428:	ldr	r3, [r6, #100]	; 0x64
   1542c:	mov	r6, r3
   15430:	add	r4, r6, r5
   15434:	ldr	r1, [r4, #8]
   15438:	ldrh	r2, [r7, r1]
   1543c:	add	r1, r7, r1
   15440:	cmp	r2, r9
   15444:	bne	15520 <flatcc_builder_create_cached_vtable@@Base+0x168>
   15448:	mov	r2, r9
   1544c:	ldr	r0, [sp, #8]
   15450:	bl	122a0 <memcmp@plt>
   15454:	cmp	r0, #0
   15458:	bne	15520 <flatcc_builder_create_cached_vtable@@Base+0x168>
   1545c:	ldr	r1, [r4, #4]
   15460:	ldr	r2, [fp, #152]	; 0x98
   15464:	cmp	r1, r2
   15468:	beq	1552c <flatcc_builder_create_cached_vtable@@Base+0x174>
   1546c:	ldr	r5, [r4, #12]
   15470:	add	r8, r4, #12
   15474:	str	r4, [sp, #20]
   15478:	cmp	r5, #0
   1547c:	bne	15430 <flatcc_builder_create_cached_vtable@@Base+0x78>
   15480:	ldr	r8, [sp, #16]
   15484:	mov	r6, fp
   15488:	ldr	r3, [r6, #104]	; 0x68
   1548c:	ldr	r4, [r6, #124]	; 0x7c
   15490:	add	r2, r4, #16
   15494:	cmp	r2, r3
   15498:	bls	154c0 <flatcc_builder_create_cached_vtable@@Base+0x108>
   1549c:	mov	ip, #6
   154a0:	mov	r3, #0
   154a4:	ldr	r0, [r6, #40]	; 0x28
   154a8:	add	r1, r6, #100	; 0x64
   154ac:	str	ip, [sp]
   154b0:	ldr	r5, [r6, #48]	; 0x30
   154b4:	blx	r5
   154b8:	cmp	r0, #0
   154bc:	bne	15640 <flatcc_builder_create_cached_vtable@@Base+0x288>
   154c0:	ldr	r5, [r6, #100]	; 0x64
   154c4:	adds	r7, r5, r4
   154c8:	beq	15610 <flatcc_builder_create_cached_vtable@@Base+0x258>
   154cc:	ldr	r3, [r6, #124]	; 0x7c
   154d0:	mov	r2, r9
   154d4:	ldr	r0, [r6, #152]	; 0x98
   154d8:	ldr	r1, [sp, #8]
   154dc:	add	ip, r3, #16
   154e0:	str	ip, [r6, #124]	; 0x7c
   154e4:	str	r0, [r7, #4]
   154e8:	mov	r0, r6
   154ec:	ldr	ip, [sl, r8, lsl #2]
   154f0:	str	ip, [r7, #12]
   154f4:	str	r3, [sl, r8, lsl #2]
   154f8:	bl	15284 <flatcc_builder_create_vtable@@Base>
   154fc:	cmp	r0, #0
   15500:	str	r0, [r5, r4]
   15504:	beq	15610 <flatcc_builder_create_cached_vtable@@Base+0x258>
   15508:	ldr	r3, [sp, #20]
   1550c:	cmp	r3, #0
   15510:	beq	15654 <flatcc_builder_create_cached_vtable@@Base+0x29c>
   15514:	ldr	r3, [r3, #8]
   15518:	str	r3, [r7, #8]
   1551c:	b	15558 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15520:	add	r8, r4, #12
   15524:	ldr	r5, [r4, #12]
   15528:	b	15478 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   1552c:	ldr	r3, [sp, #12]
   15530:	mov	fp, r8
   15534:	ldr	r8, [sp, #16]
   15538:	cmp	r3, fp
   1553c:	beq	15554 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   15540:	ldr	r3, [r4, #12]
   15544:	str	r3, [fp]
   15548:	ldr	r3, [sl, r8, lsl #2]
   1554c:	str	r3, [r4, #12]
   15550:	str	r5, [sl, r8, lsl #2]
   15554:	ldr	r0, [r4]
   15558:	add	sp, sp, #28
   1555c:	ldrd	r4, [sp]
   15560:	ldrd	r6, [sp, #8]
   15564:	ldrd	r8, [sp, #16]
   15568:	ldrd	sl, [sp, #24]
   1556c:	add	sp, sp, #32
   15570:	pop	{pc}		; (ldr pc, [sp], #4)
   15574:	ldr	r4, [r0, #124]	; 0x7c
   15578:	add	r5, r0, #92	; 0x5c
   1557c:	cmp	r4, #0
   15580:	bne	156e8 <flatcc_builder_create_cached_vtable@@Base+0x330>
   15584:	ldr	r3, [r0, #104]	; 0x68
   15588:	cmp	r3, #15
   1558c:	bls	15618 <flatcc_builder_create_cached_vtable@@Base+0x260>
   15590:	ldr	r3, [r6, #100]	; 0x64
   15594:	cmp	r3, #0
   15598:	beq	15610 <flatcc_builder_create_cached_vtable@@Base+0x258>
   1559c:	mov	ip, #16
   155a0:	mov	r2, #5
   155a4:	ldr	r0, [r6, #40]	; 0x28
   155a8:	mov	r1, r5
   155ac:	mov	r3, #1
   155b0:	str	r2, [sp]
   155b4:	mov	r2, #256	; 0x100
   155b8:	str	ip, [r6, #124]	; 0x7c
   155bc:	ldr	r5, [r6, #48]	; 0x30
   155c0:	blx	r5
   155c4:	cmp	r0, #0
   155c8:	bne	15610 <flatcc_builder_create_cached_vtable@@Base+0x258>
   155cc:	mov	r3, #256	; 0x100
   155d0:	ldr	r1, [r6, #96]	; 0x60
   155d4:	b	155dc <flatcc_builder_create_cached_vtable@@Base+0x224>
   155d8:	mov	r3, r2
   155dc:	lsl	r2, r3, #1
   155e0:	cmp	r2, r1
   155e4:	bls	155d8 <flatcc_builder_create_cached_vtable@@Base+0x220>
   155e8:	lsr	r3, r3, #2
   155ec:	cmp	r3, #1
   155f0:	bls	1564c <flatcc_builder_create_cached_vtable@@Base+0x294>
   155f4:	mov	r2, #1
   155f8:	add	r4, r4, #1
   155fc:	cmp	r3, r2, lsl r4
   15600:	bhi	155f8 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15604:	rsb	r1, r4, #32
   15608:	str	r4, [r6, #116]	; 0x74
   1560c:	b	153f0 <flatcc_builder_create_cached_vtable@@Base+0x38>
   15610:	mov	r0, #0
   15614:	b	15558 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15618:	mov	ip, #6
   1561c:	add	r1, r0, #100	; 0x64
   15620:	ldr	r0, [r0, #40]	; 0x28
   15624:	mov	r3, r4
   15628:	mov	r2, #16
   1562c:	str	ip, [sp]
   15630:	ldr	r7, [r6, #48]	; 0x30
   15634:	blx	r7
   15638:	cmp	r0, #0
   1563c:	beq	15590 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   15640:	bl	1314c <flatcc_builder_default_alloc@@Base+0x124>
   15644:	str	r5, [sp, #20]
   15648:	b	15488 <flatcc_builder_create_cached_vtable@@Base+0xd0>
   1564c:	mov	r1, #32
   15650:	b	15608 <flatcc_builder_create_cached_vtable@@Base+0x250>
   15654:	ldr	r8, [r6, #120]	; 0x78
   15658:	ldr	r3, [r6, #172]	; 0xac
   1565c:	add	r2, r9, r8
   15660:	cmp	r3, #0
   15664:	beq	15670 <flatcc_builder_create_cached_vtable@@Base+0x2b8>
   15668:	cmp	r3, r2
   1566c:	bcc	156d0 <flatcc_builder_create_cached_vtable@@Base+0x318>
   15670:	ldr	r3, [r6, #72]	; 0x48
   15674:	cmp	r3, r2
   15678:	bcs	156a0 <flatcc_builder_create_cached_vtable@@Base+0x2e8>
   1567c:	mov	ip, #2
   15680:	mov	r3, #0
   15684:	ldr	r0, [r6, #40]	; 0x28
   15688:	add	r1, r6, #68	; 0x44
   1568c:	str	ip, [sp]
   15690:	ldr	sl, [r6, #48]	; 0x30
   15694:	blx	sl
   15698:	cmp	r0, #0
   1569c:	bne	15640 <flatcc_builder_create_cached_vtable@@Base+0x288>
   156a0:	ldr	r3, [r6, #68]	; 0x44
   156a4:	adds	r0, r3, r8
   156a8:	beq	156e0 <flatcc_builder_create_cached_vtable@@Base+0x328>
   156ac:	ldr	r3, [r6, #120]	; 0x78
   156b0:	mov	r2, r9
   156b4:	ldr	r1, [sp, #8]
   156b8:	add	r9, r3, r9
   156bc:	str	r3, [r7, #8]
   156c0:	str	r9, [r6, #120]	; 0x78
   156c4:	bl	12294 <memcpy@plt>
   156c8:	ldr	r0, [r5, r4]
   156cc:	b	15558 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   156d0:	mov	r0, r6
   156d4:	bl	136ac <flatcc_builder_flush_vtable_cache@@Base>
   156d8:	ldr	r0, [r5, r4]
   156dc:	b	15558 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   156e0:	mvn	r0, #0
   156e4:	b	15558 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   156e8:	ldr	r3, [pc, #28]	; 1570c <flatcc_builder_create_cached_vtable@@Base+0x354>
   156ec:	movw	r2, #342	; 0x156
   156f0:	ldr	r1, [pc, #24]	; 15710 <flatcc_builder_create_cached_vtable@@Base+0x358>
   156f4:	ldr	r0, [pc, #24]	; 15714 <flatcc_builder_create_cached_vtable@@Base+0x35c>
   156f8:	add	r3, pc, r3
   156fc:	add	r3, r3, #656	; 0x290
   15700:	add	r1, pc, r1
   15704:	add	r0, pc, r0
   15708:	bl	12324 <__assert_fail@plt>
   1570c:	andeq	r4, r0, r4, lsr #32
   15710:	andeq	r4, r0, ip, ror #14
   15714:	andeq	r4, r0, r4, lsl sl

00015718 <flatcc_builder_create_table@@Base>:
   15718:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1571c:	mov	r5, r0
   15720:	strd	r6, [sp, #8]
   15724:	str	r8, [sp, #16]
   15728:	str	lr, [sp, #20]
   1572c:	sub	sp, sp, #88	; 0x58
   15730:	ldr	r6, [sp, #116]	; 0x74
   15734:	ldr	r7, [pc, #444]	; 158f8 <flatcc_builder_create_table@@Base+0x1e0>
   15738:	ldr	r0, [sp, #120]	; 0x78
   1573c:	cmp	r6, #0
   15740:	add	r7, pc, r7
   15744:	blt	158ac <flatcc_builder_create_table@@Base+0x194>
   15748:	tst	r0, #1
   1574c:	beq	15888 <flatcc_builder_create_table@@Base+0x170>
   15750:	ldrh	ip, [r5, #128]	; 0x80
   15754:	cmp	r3, #4
   15758:	sub	r0, r0, #1
   1575c:	movcc	r3, #4
   15760:	cmp	ip, r3
   15764:	ldr	ip, [r5, #136]	; 0x88
   15768:	strhcc	r3, [r5, #128]	; 0x80
   1576c:	sub	r3, r3, #1
   15770:	cmp	r6, #0
   15774:	sub	r4, ip, r2
   15778:	mov	r8, r4
   1577c:	sub	r4, r4, #4
   15780:	and	r8, r8, r3
   15784:	sub	r0, r4, r0
   15788:	sub	r0, r0, r8
   1578c:	str	r0, [sp, #12]
   15790:	beq	157c4 <flatcc_builder_create_table@@Base+0xac>
   15794:	ldr	ip, [sp, #112]	; 0x70
   15798:	sub	r4, r8, r4
   1579c:	sub	r4, r4, #4
   157a0:	add	r6, ip, r6, lsl #1
   157a4:	ldrh	r3, [ip], #2
   157a8:	ldr	r0, [r1, r3]
   157ac:	sub	lr, r4, r3
   157b0:	cmp	r6, ip
   157b4:	add	r0, r0, lr
   157b8:	str	r0, [r1, r3]
   157bc:	bne	157a4 <flatcc_builder_create_table@@Base+0x8c>
   157c0:	ldr	ip, [r5, #136]	; 0x88
   157c4:	mov	r3, #1
   157c8:	mov	r0, #4
   157cc:	cmp	r2, #0
   157d0:	str	r0, [sp, #16]
   157d4:	str	r3, [sp, #20]
   157d8:	add	r3, sp, #12
   157dc:	str	r3, [sp, #24]
   157e0:	str	r0, [sp, #28]
   157e4:	beq	15800 <flatcc_builder_create_table@@Base+0xe8>
   157e8:	add	r0, r2, r0
   157ec:	mov	r3, #2
   157f0:	str	r0, [sp, #16]
   157f4:	str	r3, [sp, #20]
   157f8:	str	r1, [sp, #32]
   157fc:	str	r2, [sp, #36]	; 0x24
   15800:	cmp	r8, #0
   15804:	bne	15858 <flatcc_builder_create_table@@Base+0x140>
   15808:	sub	r4, ip, r0
   1580c:	cmp	r4, ip
   15810:	bge	158d4 <flatcc_builder_create_table@@Base+0x1bc>
   15814:	mov	r3, r4
   15818:	add	r1, sp, #24
   1581c:	str	r0, [sp]
   15820:	ldr	r2, [sp, #20]
   15824:	ldr	r0, [r5, #36]	; 0x24
   15828:	ldr	r6, [r5, #44]	; 0x2c
   1582c:	blx	r6
   15830:	cmp	r0, #0
   15834:	bne	158d0 <flatcc_builder_create_table@@Base+0x1b8>
   15838:	mov	r0, r4
   1583c:	str	r4, [r5, #136]	; 0x88
   15840:	add	sp, sp, #88	; 0x58
   15844:	ldrd	r4, [sp]
   15848:	ldrd	r6, [sp, #8]
   1584c:	ldr	r8, [sp, #16]
   15850:	add	sp, sp, #20
   15854:	pop	{pc}		; (ldr pc, [sp], #4)
   15858:	ldr	r2, [pc, #156]	; 158fc <flatcc_builder_create_table@@Base+0x1e4>
   1585c:	add	r0, r0, r8
   15860:	ldr	r3, [sp, #20]
   15864:	str	r0, [sp, #16]
   15868:	ldr	r1, [r7, r2]
   1586c:	add	r2, sp, #88	; 0x58
   15870:	add	r3, r3, #1
   15874:	add	r2, r2, r3, lsl #3
   15878:	str	r3, [sp, #20]
   1587c:	str	r1, [r2, #-72]	; 0xffffffb8
   15880:	str	r8, [r2, #-68]	; 0xffffffbc
   15884:	b	15808 <flatcc_builder_create_table@@Base+0xf0>
   15888:	ldr	r3, [pc, #112]	; 15900 <flatcc_builder_create_table@@Base+0x1e8>
   1588c:	movw	r2, #1243	; 0x4db
   15890:	ldr	r1, [pc, #108]	; 15904 <flatcc_builder_create_table@@Base+0x1ec>
   15894:	ldr	r0, [pc, #108]	; 15908 <flatcc_builder_create_table@@Base+0x1f0>
   15898:	add	r3, pc, r3
   1589c:	add	r3, r3, #668	; 0x29c
   158a0:	add	r1, pc, r1
   158a4:	add	r0, pc, r0
   158a8:	bl	12324 <__assert_fail@plt>
   158ac:	ldr	r3, [pc, #88]	; 1590c <flatcc_builder_create_table@@Base+0x1f4>
   158b0:	movw	r2, #1237	; 0x4d5
   158b4:	ldr	r1, [pc, #84]	; 15910 <flatcc_builder_create_table@@Base+0x1f8>
   158b8:	ldr	r0, [pc, #84]	; 15914 <flatcc_builder_create_table@@Base+0x1fc>
   158bc:	add	r3, pc, r3
   158c0:	add	r3, r3, #668	; 0x29c
   158c4:	add	r1, pc, r1
   158c8:	add	r0, pc, r0
   158cc:	bl	12324 <__assert_fail@plt>
   158d0:	bl	132ec <flatcc_builder_default_alloc@@Base+0x2c4>
   158d4:	ldr	r3, [pc, #60]	; 15918 <flatcc_builder_create_table@@Base+0x200>
   158d8:	movw	r2, #647	; 0x287
   158dc:	ldr	r1, [pc, #56]	; 1591c <flatcc_builder_create_table@@Base+0x204>
   158e0:	ldr	r0, [pc, #56]	; 15920 <flatcc_builder_create_table@@Base+0x208>
   158e4:	add	r3, pc, r3
   158e8:	add	r3, r3, #44	; 0x2c
   158ec:	add	r1, pc, r1
   158f0:	add	r0, pc, r0
   158f4:	bl	12324 <__assert_fail@plt>
   158f8:			; <UNDEFINED> instruction: 0x000158b8
   158fc:	andeq	r0, r0, r4, asr #32
   15900:	andeq	r3, r0, r4, lsl #29
   15904:	andeq	r4, r0, ip, asr #11
   15908:	muleq	r0, r8, r8
   1590c:	andeq	r3, r0, r0, ror #28
   15910:	andeq	r4, r0, r8, lsr #11
   15914:	andeq	r4, r0, r0, ror #16
   15918:	andeq	r3, r0, r8, lsr lr
   1591c:	andeq	r4, r0, r0, lsl #11
   15920:	andeq	r4, r0, r4, lsl #12

00015924 <flatcc_builder_check_required_field@@Base>:
   15924:	ldr	r3, [r0, #32]
   15928:	ldrh	r3, [r3, #14]
   1592c:	cmp	r3, #3
   15930:	bne	15960 <flatcc_builder_check_required_field@@Base+0x3c>
   15934:	ldrh	r3, [r0, #8]
   15938:	cmp	r3, r1
   1593c:	bls	15958 <flatcc_builder_check_required_field@@Base+0x34>
   15940:	ldr	r3, [r0, #4]
   15944:	lsl	r1, r1, #1
   15948:	ldrh	r0, [r3, r1]
   1594c:	adds	r0, r0, #0
   15950:	movne	r0, #1
   15954:	bx	lr
   15958:	mov	r0, #0
   1595c:	bx	lr
   15960:	ldr	r3, [pc, #36]	; 1598c <flatcc_builder_check_required_field@@Base+0x68>
   15964:	movw	r2, #1272	; 0x4f8
   15968:	str	r4, [sp, #-8]!
   1596c:	ldr	r1, [pc, #28]	; 15990 <flatcc_builder_check_required_field@@Base+0x6c>
   15970:	str	lr, [sp, #4]
   15974:	ldr	r0, [pc, #24]	; 15994 <flatcc_builder_check_required_field@@Base+0x70>
   15978:	add	r3, pc, r3
   1597c:	add	r3, r3, #696	; 0x2b8
   15980:	add	r1, pc, r1
   15984:	add	r0, pc, r0
   15988:	bl	12324 <__assert_fail@plt>
   1598c:	andeq	r3, r0, r4, lsr #27
   15990:	andeq	r4, r0, ip, ror #9
   15994:	andeq	r4, r0, r4, asr #15

00015998 <flatcc_builder_check_union_field@@Base>:
   15998:	ldr	r3, [r0, #32]
   1599c:	ldrh	r3, [r3, #14]
   159a0:	cmp	r3, #3
   159a4:	bne	15a08 <flatcc_builder_check_union_field@@Base+0x70>
   159a8:	cmp	r1, #0
   159ac:	beq	159f4 <flatcc_builder_check_union_field@@Base+0x5c>
   159b0:	ldrh	r3, [r0, #8]
   159b4:	cmp	r3, r1
   159b8:	bls	159f4 <flatcc_builder_check_union_field@@Base+0x5c>
   159bc:	ldr	r3, [r0, #4]
   159c0:	sub	r1, r1, #-2147483647	; 0x80000001
   159c4:	lsl	r1, r1, #1
   159c8:	ldrh	r2, [r3, r1]!
   159cc:	cmp	r2, #0
   159d0:	ldrh	r1, [r3, #2]
   159d4:	beq	159e8 <flatcc_builder_check_union_field@@Base+0x50>
   159d8:	ldr	r3, [r0, #16]
   159dc:	ldrb	r3, [r3, r2]
   159e0:	cmp	r3, #0
   159e4:	bne	159fc <flatcc_builder_check_union_field@@Base+0x64>
   159e8:	clz	r0, r1
   159ec:	lsr	r0, r0, #5
   159f0:	bx	lr
   159f4:	mov	r0, #0
   159f8:	bx	lr
   159fc:	adds	r0, r1, #0
   15a00:	movne	r0, #1
   15a04:	bx	lr
   15a08:	ldr	r3, [pc, #36]	; 15a34 <flatcc_builder_check_union_field@@Base+0x9c>
   15a0c:	movw	r2, #1279	; 0x4ff
   15a10:	str	r4, [sp, #-8]!
   15a14:	ldr	r1, [pc, #28]	; 15a38 <flatcc_builder_check_union_field@@Base+0xa0>
   15a18:	str	lr, [sp, #4]
   15a1c:	ldr	r0, [pc, #24]	; 15a3c <flatcc_builder_check_union_field@@Base+0xa4>
   15a20:	add	r3, pc, r3
   15a24:	add	r3, r3, #732	; 0x2dc
   15a28:	add	r1, pc, r1
   15a2c:	add	r0, pc, r0
   15a30:	bl	12324 <__assert_fail@plt>
   15a34:	strdeq	r3, [r0], -ip
   15a38:	andeq	r4, r0, r4, asr #8
   15a3c:	andeq	r4, r0, ip, lsl r7

00015a40 <flatcc_builder_check_required@@Base>:
   15a40:	ldr	r3, [r0, #32]
   15a44:	ldrh	r3, [r3, #14]
   15a48:	cmp	r3, #3
   15a4c:	bne	15ab4 <flatcc_builder_check_required@@Base+0x74>
   15a50:	ldrh	r3, [r0, #8]
   15a54:	cmp	r3, r2
   15a58:	blt	15aac <flatcc_builder_check_required@@Base+0x6c>
   15a5c:	cmp	r2, #0
   15a60:	ble	15aa4 <flatcc_builder_check_required@@Base+0x64>
   15a64:	ldrh	r3, [r1]
   15a68:	ldr	ip, [r0, #4]
   15a6c:	lsl	r3, r3, #1
   15a70:	ldrh	r0, [ip, r3]
   15a74:	cmp	r0, #0
   15a78:	bxeq	lr
   15a7c:	add	r2, r1, r2, lsl #1
   15a80:	add	r1, r1, #2
   15a84:	b	15a9c <flatcc_builder_check_required@@Base+0x5c>
   15a88:	ldrh	r3, [r1], #2
   15a8c:	lsl	r3, r3, #1
   15a90:	ldrh	r0, [ip, r3]
   15a94:	cmp	r0, #0
   15a98:	bxeq	lr
   15a9c:	cmp	r1, r2
   15aa0:	bne	15a88 <flatcc_builder_check_required@@Base+0x48>
   15aa4:	mov	r0, #1
   15aa8:	bx	lr
   15aac:	mov	r0, #0
   15ab0:	bx	lr
   15ab4:	ldr	r3, [pc, #36]	; 15ae0 <flatcc_builder_check_required@@Base+0xa0>
   15ab8:	movw	r2, #1297	; 0x511
   15abc:	str	r4, [sp, #-8]!
   15ac0:	ldr	r1, [pc, #28]	; 15ae4 <flatcc_builder_check_required@@Base+0xa4>
   15ac4:	str	lr, [sp, #4]
   15ac8:	ldr	r0, [pc, #24]	; 15ae8 <flatcc_builder_check_required@@Base+0xa8>
   15acc:	add	r3, pc, r3
   15ad0:	add	r3, r3, #768	; 0x300
   15ad4:	add	r1, pc, r1
   15ad8:	add	r0, pc, r0
   15adc:	bl	12324 <__assert_fail@plt>
   15ae0:	andeq	r3, r0, r0, asr ip
   15ae4:	muleq	r0, r8, r3
   15ae8:	andeq	r4, r0, r0, ror r6

00015aec <flatcc_builder_end_table@@Base>:
   15aec:	ldr	r3, [r0, #32]
   15af0:	strd	r4, [sp, #-20]!	; 0xffffffec
   15af4:	ldrh	r3, [r3, #14]
   15af8:	strd	r6, [sp, #8]
   15afc:	str	lr, [sp, #16]
   15b00:	sub	sp, sp, #20
   15b04:	cmp	r3, #3
   15b08:	bne	15c8c <flatcc_builder_end_table@@Base+0x1a0>
   15b0c:	ldrh	r5, [r0, #8]
   15b10:	movw	ip, #31153	; 0x79b1
   15b14:	movt	ip, #40503	; 0x9e37
   15b18:	mov	r4, r0
   15b1c:	ldr	r1, [r0, #4]
   15b20:	ldr	r3, [r0, #12]
   15b24:	add	r5, r5, #2
   15b28:	lsl	r5, r5, #1
   15b2c:	ldr	lr, [r0, #20]
   15b30:	sub	r6, r1, #4
   15b34:	uxth	r5, r5
   15b38:	eor	r3, r3, r5
   15b3c:	mov	r2, r5
   15b40:	strh	r5, [r1, #-4]
   15b44:	mul	r3, ip, r3
   15b48:	add	lr, lr, #4
   15b4c:	uxth	lr, lr
   15b50:	eor	r3, r3, lr
   15b54:	strh	lr, [r1, #-2]
   15b58:	mov	r1, r6
   15b5c:	mul	r3, ip, r3
   15b60:	str	r3, [r0, #12]
   15b64:	bl	153b8 <flatcc_builder_create_cached_vtable@@Base>
   15b68:	subs	r7, r0, #0
   15b6c:	bne	15b8c <flatcc_builder_end_table@@Base+0xa0>
   15b70:	mov	r5, #0
   15b74:	mov	r0, r5
   15b78:	add	sp, sp, #20
   15b7c:	ldrd	r4, [sp]
   15b80:	ldrd	r6, [sp, #8]
   15b84:	add	sp, sp, #16
   15b88:	pop	{pc}		; (ldr pc, [sp], #4)
   15b8c:	mov	r2, r5
   15b90:	mov	r1, #0
   15b94:	mov	r0, r6
   15b98:	bl	122f4 <memset@plt>
   15b9c:	ldr	ip, [r4]
   15ba0:	mov	r0, r4
   15ba4:	ldr	r3, [r4, #32]
   15ba8:	ldr	r2, [r4, #76]	; 0x4c
   15bac:	ldr	r1, [r3, #20]
   15bb0:	str	r7, [sp, #8]
   15bb4:	ldrh	r3, [r4, #130]	; 0x82
   15bb8:	add	r2, r2, r1
   15bbc:	ldr	r1, [r4, #16]
   15bc0:	sub	ip, ip, r2
   15bc4:	asr	ip, ip, #1
   15bc8:	str	r2, [sp]
   15bcc:	ldr	r2, [r4, #20]
   15bd0:	str	ip, [sp, #4]
   15bd4:	bl	15718 <flatcc_builder_create_table@@Base>
   15bd8:	subs	r5, r0, #0
   15bdc:	beq	15b70 <flatcc_builder_end_table@@Base+0x84>
   15be0:	ldr	r3, [r4, #32]
   15be4:	mov	r1, #0
   15be8:	ldr	r0, [r4, #52]	; 0x34
   15bec:	ldr	r2, [r4, #76]	; 0x4c
   15bf0:	ldr	ip, [r3, #16]
   15bf4:	ldr	r6, [r3, #20]
   15bf8:	ldrh	lr, [r3, #28]
   15bfc:	add	r0, r0, ip
   15c00:	ldr	ip, [r3, #24]
   15c04:	add	r3, r2, r6
   15c08:	ldr	r2, [r4, #20]
   15c0c:	str	r3, [r4]
   15c10:	str	r0, [r4, #4]
   15c14:	strh	lr, [r4, #8]
   15c18:	str	ip, [r4, #12]
   15c1c:	ldr	r0, [r4, #16]
   15c20:	bl	122f4 <memset@plt>
   15c24:	ldr	r3, [r4, #32]
   15c28:	ldr	r0, [r4, #60]	; 0x3c
   15c2c:	ldr	r2, [r4, #64]	; 0x40
   15c30:	ldr	ip, [r3]
   15c34:	ldmib	r3, {r1, lr}
   15c38:	add	r0, r0, ip
   15c3c:	sub	r2, r2, ip
   15c40:	str	r0, [r4, #16]
   15c44:	cmp	r2, r1
   15c48:	ldrh	r0, [r4, #128]	; 0x80
   15c4c:	movcs	r2, r1
   15c50:	str	lr, [r4, #20]
   15c54:	str	ip, [r4, #28]
   15c58:	ldrh	ip, [r4, #130]	; 0x82
   15c5c:	str	r2, [r4, #24]
   15c60:	ldr	r2, [r4, #156]	; 0x9c
   15c64:	str	r1, [r3, #4]
   15c68:	cmp	r0, ip
   15c6c:	sub	r0, r3, #36	; 0x24
   15c70:	strhcc	ip, [r4, #128]	; 0x80
   15c74:	ldrh	r1, [r3, #12]
   15c78:	sub	r3, r2, #1
   15c7c:	str	r0, [r4, #32]
   15c80:	strh	r1, [r4, #130]	; 0x82
   15c84:	str	r3, [r4, #156]	; 0x9c
   15c88:	b	15b74 <flatcc_builder_end_table@@Base+0x88>
   15c8c:	ldr	r3, [pc, #28]	; 15cb0 <flatcc_builder_end_table@@Base+0x1c4>
   15c90:	movw	r2, #1317	; 0x525
   15c94:	ldr	r1, [pc, #24]	; 15cb4 <flatcc_builder_end_table@@Base+0x1c8>
   15c98:	ldr	r0, [pc, #24]	; 15cb8 <flatcc_builder_end_table@@Base+0x1cc>
   15c9c:	add	r3, pc, r3
   15ca0:	add	r3, r3, #800	; 0x320
   15ca4:	add	r1, pc, r1
   15ca8:	add	r0, pc, r0
   15cac:	bl	12324 <__assert_fail@plt>
   15cb0:	andeq	r3, r0, r0, lsl #21
   15cb4:	andeq	r4, r0, r8, asr #3
   15cb8:	andeq	r4, r0, r0, lsr #9

00015cbc <flatcc_builder_create_vector@@Base>:
   15cbc:	strd	r4, [sp, #-16]!
   15cc0:	mov	r4, r0
   15cc4:	str	r6, [sp, #8]
   15cc8:	str	lr, [sp, #12]
   15ccc:	sub	sp, sp, #88	; 0x58
   15cd0:	ldr	ip, [sp, #108]	; 0x6c
   15cd4:	ldr	r5, [pc, #328]	; 15e24 <flatcc_builder_create_vector@@Base+0x168>
   15cd8:	ldrh	r0, [sp, #104]	; 0x68
   15cdc:	cmp	r2, ip
   15ce0:	add	r5, pc, r5
   15ce4:	bhi	15dd8 <flatcc_builder_create_vector@@Base+0x11c>
   15ce8:	ldrh	ip, [r4, #128]	; 0x80
   15cec:	cmp	r0, #4
   15cf0:	mul	r3, r3, r2
   15cf4:	movcc	r0, #4
   15cf8:	str	r2, [sp, #12]
   15cfc:	mov	r2, #1
   15d00:	ldr	r6, [r4, #136]	; 0x88
   15d04:	mov	lr, #4
   15d08:	str	r2, [sp, #20]
   15d0c:	cmp	ip, r0
   15d10:	add	ip, sp, #12
   15d14:	str	lr, [sp, #16]
   15d18:	strhcc	r0, [r4, #128]	; 0x80
   15d1c:	sub	r2, r6, r3
   15d20:	sub	r0, r0, #1
   15d24:	cmp	r3, #0
   15d28:	and	r0, r0, r2
   15d2c:	str	ip, [sp, #24]
   15d30:	moveq	r2, lr
   15d34:	str	lr, [sp, #28]
   15d38:	beq	15d54 <flatcc_builder_create_vector@@Base+0x98>
   15d3c:	add	r2, r3, lr
   15d40:	str	r1, [sp, #32]
   15d44:	mov	r1, #2
   15d48:	str	r2, [sp, #16]
   15d4c:	str	r1, [sp, #20]
   15d50:	str	r3, [sp, #36]	; 0x24
   15d54:	cmp	r0, #0
   15d58:	bne	15da8 <flatcc_builder_create_vector@@Base+0xec>
   15d5c:	sub	r5, r6, r2
   15d60:	cmp	r6, r5
   15d64:	ble	15e00 <flatcc_builder_create_vector@@Base+0x144>
   15d68:	mov	r3, r5
   15d6c:	add	r1, sp, #24
   15d70:	str	r2, [sp]
   15d74:	ldr	r2, [sp, #20]
   15d78:	ldr	r0, [r4, #36]	; 0x24
   15d7c:	ldr	r6, [r4, #44]	; 0x2c
   15d80:	blx	r6
   15d84:	cmp	r0, #0
   15d88:	bne	15dfc <flatcc_builder_create_vector@@Base+0x140>
   15d8c:	mov	r0, r5
   15d90:	str	r5, [r4, #136]	; 0x88
   15d94:	add	sp, sp, #88	; 0x58
   15d98:	ldrd	r4, [sp]
   15d9c:	ldr	r6, [sp, #8]
   15da0:	add	sp, sp, #12
   15da4:	pop	{pc}		; (ldr pc, [sp], #4)
   15da8:	ldr	r1, [pc, #120]	; 15e28 <flatcc_builder_create_vector@@Base+0x16c>
   15dac:	add	r2, r2, r0
   15db0:	ldr	r3, [sp, #20]
   15db4:	str	r2, [sp, #16]
   15db8:	ldr	ip, [r5, r1]
   15dbc:	add	r1, sp, #88	; 0x58
   15dc0:	add	r3, r3, #1
   15dc4:	add	r1, r1, r3, lsl #3
   15dc8:	str	r3, [sp, #20]
   15dcc:	str	ip, [r1, #-72]	; 0xffffffb8
   15dd0:	str	r0, [r1, #-68]	; 0xffffffbc
   15dd4:	b	15d5c <flatcc_builder_create_vector@@Base+0xa0>
   15dd8:	ldr	r3, [pc, #76]	; 15e2c <flatcc_builder_create_vector@@Base+0x170>
   15ddc:	movw	r2, #1365	; 0x555
   15de0:	ldr	r1, [pc, #72]	; 15e30 <flatcc_builder_create_vector@@Base+0x174>
   15de4:	ldr	r0, [pc, #72]	; 15e34 <flatcc_builder_create_vector@@Base+0x178>
   15de8:	add	r3, pc, r3
   15dec:	add	r3, r3, #828	; 0x33c
   15df0:	add	r1, pc, r1
   15df4:	add	r0, pc, r0
   15df8:	bl	12324 <__assert_fail@plt>
   15dfc:	bl	132ec <flatcc_builder_default_alloc@@Base+0x2c4>
   15e00:	ldr	r3, [pc, #48]	; 15e38 <flatcc_builder_create_vector@@Base+0x17c>
   15e04:	movw	r2, #647	; 0x287
   15e08:	ldr	r1, [pc, #44]	; 15e3c <flatcc_builder_create_vector@@Base+0x180>
   15e0c:	ldr	r0, [pc, #44]	; 15e40 <flatcc_builder_create_vector@@Base+0x184>
   15e10:	add	r3, pc, r3
   15e14:	add	r3, r3, #44	; 0x2c
   15e18:	add	r1, pc, r1
   15e1c:	add	r0, pc, r0
   15e20:	bl	12324 <__assert_fail@plt>
   15e24:	andeq	r5, r1, r8, lsl r3
   15e28:	andeq	r0, r0, r4, asr #32
   15e2c:	andeq	r3, r0, r4, lsr r9
   15e30:	andeq	r4, r0, ip, ror r0
   15e34:	andeq	r4, r0, r0, lsl #7
   15e38:	andeq	r3, r0, ip, lsl #18
   15e3c:	andeq	r4, r0, r4, asr r0
   15e40:	ldrdeq	r4, [r0], -r8

00015e44 <flatcc_builder_end_vector@@Base>:
   15e44:	ldr	r1, [r0, #32]
   15e48:	strd	r4, [sp, #-12]!
   15e4c:	ldrh	r3, [r1, #14]
   15e50:	str	lr, [sp, #8]
   15e54:	sub	sp, sp, #12
   15e58:	cmp	r3, #4
   15e5c:	bne	15f14 <flatcc_builder_end_vector@@Base+0xd0>
   15e60:	ldrh	ip, [r0, #130]	; 0x82
   15e64:	mov	r4, r0
   15e68:	ldr	r3, [r1, #16]
   15e6c:	ldr	r2, [r1, #20]
   15e70:	ldr	r1, [r1, #24]
   15e74:	str	r1, [sp, #4]
   15e78:	ldr	r1, [r0, #16]
   15e7c:	str	ip, [sp]
   15e80:	bl	15cbc <flatcc_builder_create_vector@@Base>
   15e84:	subs	r5, r0, #0
   15e88:	beq	15f00 <flatcc_builder_end_vector@@Base+0xbc>
   15e8c:	mov	r1, #0
   15e90:	ldr	r0, [r4, #16]
   15e94:	ldr	r2, [r4, #20]
   15e98:	bl	122f4 <memset@plt>
   15e9c:	ldr	r3, [r4, #32]
   15ea0:	ldr	r0, [r4, #60]	; 0x3c
   15ea4:	ldr	r2, [r4, #64]	; 0x40
   15ea8:	ldr	ip, [r3]
   15eac:	ldmib	r3, {r1, lr}
   15eb0:	add	r0, r0, ip
   15eb4:	sub	r2, r2, ip
   15eb8:	str	r0, [r4, #16]
   15ebc:	cmp	r2, r1
   15ec0:	ldrh	r0, [r4, #128]	; 0x80
   15ec4:	movcs	r2, r1
   15ec8:	str	lr, [r4, #20]
   15ecc:	str	ip, [r4, #28]
   15ed0:	ldrh	ip, [r4, #130]	; 0x82
   15ed4:	str	r2, [r4, #24]
   15ed8:	ldr	r2, [r4, #156]	; 0x9c
   15edc:	str	r1, [r3, #4]
   15ee0:	cmp	r0, ip
   15ee4:	sub	r0, r3, #36	; 0x24
   15ee8:	strhcc	ip, [r4, #128]	; 0x80
   15eec:	ldrh	r1, [r3, #12]
   15ef0:	sub	r3, r2, #1
   15ef4:	str	r0, [r4, #32]
   15ef8:	strh	r1, [r4, #130]	; 0x82
   15efc:	str	r3, [r4, #156]	; 0x9c
   15f00:	mov	r0, r5
   15f04:	add	sp, sp, #12
   15f08:	ldrd	r4, [sp]
   15f0c:	add	sp, sp, #8
   15f10:	pop	{pc}		; (ldr pc, [sp], #4)
   15f14:	ldr	r3, [pc, #28]	; 15f38 <flatcc_builder_end_vector@@Base+0xf4>
   15f18:	movw	r2, #1400	; 0x578
   15f1c:	ldr	r1, [pc, #24]	; 15f3c <flatcc_builder_end_vector@@Base+0xf8>
   15f20:	ldr	r0, [pc, #24]	; 15f40 <flatcc_builder_end_vector@@Base+0xfc>
   15f24:	add	r3, pc, r3
   15f28:	add	r3, r3, #860	; 0x35c
   15f2c:	add	r1, pc, r1
   15f30:	add	r0, pc, r0
   15f34:	bl	12324 <__assert_fail@plt>
   15f38:	strdeq	r3, [r0], -r8
   15f3c:	andeq	r3, r0, r0, asr #30
   15f40:	andeq	r4, r0, ip, lsl #1

00015f44 <flatcc_builder_vector_count@@Base>:
   15f44:	ldr	r3, [r0, #32]
   15f48:	ldr	r0, [r3, #20]
   15f4c:	bx	lr

00015f50 <flatcc_builder_vector_edit@@Base>:
   15f50:	ldr	r0, [r0, #16]
   15f54:	bx	lr

00015f58 <flatcc_builder_create_offset_vector_direct@@Base>:
   15f58:	cmn	r2, #-1073741823	; 0xc0000001
   15f5c:	bhi	15f68 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   15f60:	mov	r3, #0
   15f64:	b	13480 <flatcc_builder_default_alloc@@Base+0x458>
   15f68:	mov	r0, #0
   15f6c:	bx	lr

00015f70 <flatcc_builder_end_offset_vector@@Base>:
   15f70:	ldr	r3, [r0, #32]
   15f74:	strd	r4, [sp, #-16]!
   15f78:	ldrh	r2, [r3, #14]
   15f7c:	str	r6, [sp, #8]
   15f80:	str	lr, [sp, #12]
   15f84:	cmp	r2, #5
   15f88:	bne	1602c <flatcc_builder_end_offset_vector@@Base+0xbc>
   15f8c:	ldr	r1, [r0, #16]
   15f90:	mov	r4, r0
   15f94:	ldr	r2, [r3, #20]
   15f98:	bl	15f58 <flatcc_builder_create_offset_vector_direct@@Base>
   15f9c:	subs	r5, r0, #0
   15fa0:	beq	16018 <flatcc_builder_end_offset_vector@@Base+0xa8>
   15fa4:	mov	r1, #0
   15fa8:	ldr	r0, [r4, #16]
   15fac:	ldr	r2, [r4, #20]
   15fb0:	bl	122f4 <memset@plt>
   15fb4:	ldr	r3, [r4, #32]
   15fb8:	ldr	r0, [r4, #60]	; 0x3c
   15fbc:	ldr	r2, [r4, #64]	; 0x40
   15fc0:	ldr	ip, [r3]
   15fc4:	ldmib	r3, {r1, lr}
   15fc8:	add	r0, r0, ip
   15fcc:	sub	r2, r2, ip
   15fd0:	str	r0, [r4, #16]
   15fd4:	cmp	r2, r1
   15fd8:	ldrh	r0, [r4, #128]	; 0x80
   15fdc:	movcs	r2, r1
   15fe0:	str	lr, [r4, #20]
   15fe4:	str	ip, [r4, #28]
   15fe8:	ldrh	ip, [r4, #130]	; 0x82
   15fec:	str	r2, [r4, #24]
   15ff0:	ldr	r2, [r4, #156]	; 0x9c
   15ff4:	str	r1, [r3, #4]
   15ff8:	cmp	r0, ip
   15ffc:	sub	r0, r3, #36	; 0x24
   16000:	strhcc	ip, [r4, #128]	; 0x80
   16004:	ldrh	r1, [r3, #12]
   16008:	sub	r3, r2, #1
   1600c:	str	r0, [r4, #32]
   16010:	strh	r1, [r4, #130]	; 0x82
   16014:	str	r3, [r4, #156]	; 0x9c
   16018:	mov	r0, r5
   1601c:	ldrd	r4, [sp]
   16020:	ldr	r6, [sp, #8]
   16024:	add	sp, sp, #12
   16028:	pop	{pc}		; (ldr pc, [sp], #4)
   1602c:	ldr	r3, [pc, #28]	; 16050 <flatcc_builder_end_offset_vector@@Base+0xe0>
   16030:	movw	r2, #1480	; 0x5c8
   16034:	ldr	r1, [pc, #24]	; 16054 <flatcc_builder_end_offset_vector@@Base+0xe4>
   16038:	ldr	r0, [pc, #24]	; 16058 <flatcc_builder_end_offset_vector@@Base+0xe8>
   1603c:	add	r3, pc, r3
   16040:	add	r3, r3, #888	; 0x378
   16044:	add	r1, pc, r1
   16048:	add	r0, pc, r0
   1604c:	bl	12324 <__assert_fail@plt>
   16050:	andeq	r3, r0, r0, ror #13
   16054:	andeq	r3, r0, r8, lsr #28
   16058:	andeq	r3, r0, r0, ror #31

0001605c <flatcc_builder_create_offset_vector@@Base>:
   1605c:	strd	r4, [sp, #-16]!
   16060:	mov	r5, r2
   16064:	mov	r4, r0
   16068:	str	r6, [sp, #8]
   1606c:	mov	r6, r1
   16070:	str	lr, [sp, #12]
   16074:	bl	14ee8 <flatcc_builder_start_offset_vector@@Base>
   16078:	cmp	r0, #0
   1607c:	beq	16094 <flatcc_builder_create_offset_vector@@Base+0x38>
   16080:	ldrd	r4, [sp]
   16084:	mov	r0, #0
   16088:	ldr	r6, [sp, #8]
   1608c:	add	sp, sp, #12
   16090:	pop	{pc}		; (ldr pc, [sp], #4)
   16094:	mov	r1, r5
   16098:	mov	r0, r4
   1609c:	bl	147ac <flatcc_builder_extend_offset_vector@@Base>
   160a0:	cmp	r0, #0
   160a4:	beq	16080 <flatcc_builder_create_offset_vector@@Base+0x24>
   160a8:	lsl	r2, r5, #2
   160ac:	mov	r1, r6
   160b0:	bl	12294 <memcpy@plt>
   160b4:	mov	r0, r4
   160b8:	ldrd	r4, [sp]
   160bc:	ldr	r6, [sp, #8]
   160c0:	ldr	lr, [sp, #12]
   160c4:	add	sp, sp, #16
   160c8:	b	15f70 <flatcc_builder_end_offset_vector@@Base>

000160cc <flatcc_builder_end_offset_vector_for_unions@@Base>:
   160cc:	ldr	r2, [r0, #32]
   160d0:	strd	r4, [sp, #-16]!
   160d4:	ldrh	ip, [r2, #14]
   160d8:	str	r6, [sp, #8]
   160dc:	str	lr, [sp, #12]
   160e0:	cmp	ip, #5
   160e4:	bne	1619c <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   160e8:	ldr	r2, [r2, #20]
   160ec:	cmn	r2, #-1073741823	; 0xc0000001
   160f0:	bhi	1610c <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
   160f4:	mov	r3, r1
   160f8:	ldr	r1, [r0, #16]
   160fc:	mov	r4, r0
   16100:	bl	13480 <flatcc_builder_default_alloc@@Base+0x458>
   16104:	subs	r5, r0, #0
   16108:	bne	16124 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   1610c:	mov	r5, #0
   16110:	mov	r0, r5
   16114:	ldrd	r4, [sp]
   16118:	ldr	r6, [sp, #8]
   1611c:	add	sp, sp, #12
   16120:	pop	{pc}		; (ldr pc, [sp], #4)
   16124:	mov	r1, #0
   16128:	ldr	r0, [r4, #16]
   1612c:	ldr	r2, [r4, #20]
   16130:	bl	122f4 <memset@plt>
   16134:	ldr	r3, [r4, #32]
   16138:	ldr	r0, [r4, #60]	; 0x3c
   1613c:	ldr	r2, [r4, #64]	; 0x40
   16140:	ldr	ip, [r3]
   16144:	ldmib	r3, {r1, lr}
   16148:	add	r0, r0, ip
   1614c:	sub	r2, r2, ip
   16150:	str	r0, [r4, #16]
   16154:	cmp	r2, r1
   16158:	ldrh	r0, [r4, #128]	; 0x80
   1615c:	movcs	r2, r1
   16160:	str	lr, [r4, #20]
   16164:	str	ip, [r4, #28]
   16168:	ldrh	ip, [r4, #130]	; 0x82
   1616c:	str	r2, [r4, #24]
   16170:	ldr	r2, [r4, #156]	; 0x9c
   16174:	str	r1, [r3, #4]
   16178:	cmp	r0, ip
   1617c:	sub	r0, r3, #36	; 0x24
   16180:	strhcc	ip, [r4, #128]	; 0x80
   16184:	ldrh	r1, [r3, #12]
   16188:	sub	r3, r2, #1
   1618c:	str	r0, [r4, #32]
   16190:	strh	r1, [r4, #130]	; 0x82
   16194:	str	r3, [r4, #156]	; 0x9c
   16198:	b	16110 <flatcc_builder_end_offset_vector_for_unions@@Base+0x44>
   1619c:	ldr	r3, [pc, #28]	; 161c0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf4>
   161a0:	movw	r2, #1493	; 0x5d5
   161a4:	ldr	r1, [pc, #24]	; 161c4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf8>
   161a8:	ldr	r0, [pc, #24]	; 161c8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xfc>
   161ac:	add	r3, pc, r3
   161b0:	add	r3, r3, #924	; 0x39c
   161b4:	add	r1, pc, r1
   161b8:	add	r0, pc, r0
   161bc:	bl	12324 <__assert_fail@plt>
   161c0:	andeq	r3, r0, r0, ror r5
   161c4:			; <UNDEFINED> instruction: 0x00003cb8
   161c8:	andeq	r3, r0, r0, ror lr

000161cc <flatcc_builder_offset_vector_edit@@Base>:
   161cc:	ldr	r0, [r0, #16]
   161d0:	bx	lr

000161d4 <flatcc_builder_offset_vector_count@@Base>:
   161d4:	ldr	r3, [r0, #32]
   161d8:	ldr	r0, [r3, #20]
   161dc:	bx	lr

000161e0 <flatcc_builder_create_union_vector_direct@@Base>:
   161e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   161e4:	mov	r4, r0
   161e8:	strd	r6, [sp, #8]
   161ec:	str	r8, [sp, #16]
   161f0:	str	lr, [sp, #20]
   161f4:	sub	sp, sp, #8
   161f8:	ldr	r5, [sp, #32]
   161fc:	cmn	r5, #-1073741823	; 0xc0000001
   16200:	bhi	16264 <flatcc_builder_create_union_vector_direct@@Base+0x84>
   16204:	mov	r6, r1
   16208:	mov	r7, r2
   1620c:	mov	r1, r3
   16210:	mov	r0, r6
   16214:	mov	r3, r2
   16218:	mov	r2, r5
   1621c:	bl	13480 <flatcc_builder_default_alloc@@Base+0x458>
   16220:	subs	r8, r0, #0
   16224:	beq	16264 <flatcc_builder_create_union_vector_direct@@Base+0x84>
   16228:	mvn	ip, #0
   1622c:	mov	r3, #1
   16230:	mov	r2, r5
   16234:	mov	r1, r7
   16238:	mov	r0, r6
   1623c:	stm	sp, {r3, ip}
   16240:	bl	15cbc <flatcc_builder_create_vector@@Base>
   16244:	stm	r4, {r0, r8}
   16248:	mov	r0, r4
   1624c:	add	sp, sp, #8
   16250:	ldrd	r4, [sp]
   16254:	ldrd	r6, [sp, #8]
   16258:	ldr	r8, [sp, #16]
   1625c:	add	sp, sp, #20
   16260:	pop	{pc}		; (ldr pc, [sp], #4)
   16264:	mov	r3, #0
   16268:	str	r3, [r4]
   1626c:	str	r3, [r4, #4]
   16270:	b	16248 <flatcc_builder_create_union_vector_direct@@Base+0x68>

00016274 <flatcc_builder_create_union_vector@@Base>:
   16274:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16278:	mov	r5, r1
   1627c:	mov	r4, r2
   16280:	strd	r6, [sp, #8]
   16284:	mov	r6, r0
   16288:	mov	r0, r1
   1628c:	str	r8, [sp, #16]
   16290:	mov	r7, r3
   16294:	str	lr, [sp, #20]
   16298:	sub	sp, sp, #16
   1629c:	bl	14ee8 <flatcc_builder_start_offset_vector@@Base>
   162a0:	cmp	r0, #0
   162a4:	beq	162d0 <flatcc_builder_create_union_vector@@Base+0x5c>
   162a8:	mov	r3, #0
   162ac:	str	r3, [r6]
   162b0:	str	r3, [r6, #4]
   162b4:	mov	r0, r6
   162b8:	add	sp, sp, #16
   162bc:	ldrd	r4, [sp]
   162c0:	ldrd	r6, [sp, #8]
   162c4:	ldr	r8, [sp, #16]
   162c8:	add	sp, sp, #20
   162cc:	pop	{pc}		; (ldr pc, [sp], #4)
   162d0:	mov	r1, r7
   162d4:	mov	r0, r5
   162d8:	bl	147ac <flatcc_builder_extend_offset_vector@@Base>
   162dc:	cmp	r0, #0
   162e0:	beq	162a8 <flatcc_builder_create_union_vector@@Base+0x34>
   162e4:	ldr	r8, [r5, #20]
   162e8:	ldr	r3, [r5, #24]
   162ec:	add	r1, r7, r8
   162f0:	cmp	r1, r3
   162f4:	str	r1, [r5, #20]
   162f8:	bcs	163e4 <flatcc_builder_create_union_vector@@Base+0x170>
   162fc:	ldr	r2, [r5, #16]
   16300:	adds	r8, r2, r8
   16304:	beq	162a8 <flatcc_builder_create_union_vector@@Base+0x34>
   16308:	mov	r0, r5
   1630c:	bl	161cc <flatcc_builder_offset_vector_edit@@Base>
   16310:	cmp	r7, #0
   16314:	mov	r3, r0
   16318:	beq	16348 <flatcc_builder_create_union_vector@@Base+0xd4>
   1631c:	add	r2, r4, r7, lsl #3
   16320:	mov	r1, r4
   16324:	sub	lr, r8, #1
   16328:	sub	ip, r0, #4
   1632c:	ldrb	r4, [r1]
   16330:	add	r1, r1, #8
   16334:	strb	r4, [lr, #1]!
   16338:	ldr	r4, [r1, #-4]
   1633c:	cmp	r1, r2
   16340:	str	r4, [ip, #4]!
   16344:	bne	1632c <flatcc_builder_create_union_vector@@Base+0xb8>
   16348:	mov	r2, r8
   1634c:	mov	r1, r5
   16350:	str	r7, [sp]
   16354:	add	r0, sp, #8
   16358:	bl	161e0 <flatcc_builder_create_union_vector_direct@@Base>
   1635c:	mov	r1, #0
   16360:	ldr	r0, [r5, #16]
   16364:	ldr	r2, [r5, #20]
   16368:	ldr	r7, [sp, #8]
   1636c:	ldr	r4, [sp, #12]
   16370:	bl	122f4 <memset@plt>
   16374:	ldr	r3, [r5, #32]
   16378:	str	r7, [r6]
   1637c:	ldr	r0, [r5, #60]	; 0x3c
   16380:	str	r4, [r6, #4]
   16384:	ldr	r2, [r5, #64]	; 0x40
   16388:	ldr	ip, [r3]
   1638c:	ldmib	r3, {r1, lr}
   16390:	add	r0, r0, ip
   16394:	sub	r2, r2, ip
   16398:	str	r0, [r5, #16]
   1639c:	cmp	r2, r1
   163a0:	ldrh	r0, [r5, #128]	; 0x80
   163a4:	movcs	r2, r1
   163a8:	str	lr, [r5, #20]
   163ac:	str	ip, [r5, #28]
   163b0:	ldrh	ip, [r5, #130]	; 0x82
   163b4:	str	r2, [r5, #24]
   163b8:	ldr	r2, [r5, #156]	; 0x9c
   163bc:	str	r1, [r3, #4]
   163c0:	cmp	r0, ip
   163c4:	sub	r0, r3, #36	; 0x24
   163c8:	strhcc	ip, [r5, #128]	; 0x80
   163cc:	ldrh	r1, [r3, #12]
   163d0:	sub	r3, r2, #1
   163d4:	str	r0, [r5, #32]
   163d8:	strh	r1, [r5, #130]	; 0x82
   163dc:	str	r3, [r5, #156]	; 0x9c
   163e0:	b	162b4 <flatcc_builder_create_union_vector@@Base+0x40>
   163e4:	add	r1, r1, #1
   163e8:	mvn	r2, #3
   163ec:	mov	r0, r5
   163f0:	bl	12fa0 <_start@@Base+0xb50>
   163f4:	cmp	r0, #0
   163f8:	beq	162fc <flatcc_builder_create_union_vector@@Base+0x88>
   163fc:	b	162a8 <flatcc_builder_create_union_vector@@Base+0x34>

00016400 <flatcc_builder_start_union_vector@@Base>:
   16400:	mov	r1, #4
   16404:	strd	r4, [sp, #-16]!
   16408:	mov	r4, r0
   1640c:	str	r6, [sp, #8]
   16410:	str	lr, [sp, #12]
   16414:	bl	1335c <flatcc_builder_default_alloc@@Base+0x334>
   16418:	cmp	r0, #0
   1641c:	bne	16474 <flatcc_builder_start_union_vector@@Base+0x74>
   16420:	ldr	ip, [r4, #28]
   16424:	mov	lr, #8
   16428:	mov	r5, #7
   1642c:	ldr	r3, [r4, #32]
   16430:	ldr	r2, [r4, #64]	; 0x40
   16434:	ldr	r1, [r4, #60]	; 0x3c
   16438:	strh	r5, [r3, #14]
   1643c:	str	lr, [r3, #16]
   16440:	sub	r2, r2, ip
   16444:	str	r0, [r3, #20]
   16448:	cmn	r2, #4
   1644c:	mvnhi	r2, #3
   16450:	add	r1, r1, ip
   16454:	str	r1, [r4, #16]
   16458:	str	r2, [r4, #24]
   1645c:	mvn	r2, #3
   16460:	str	r2, [r3, #4]
   16464:	ldrd	r4, [sp]
   16468:	ldr	r6, [sp, #8]
   1646c:	add	sp, sp, #12
   16470:	pop	{pc}		; (ldr pc, [sp], #4)
   16474:	mvn	r0, #0
   16478:	b	16464 <flatcc_builder_start_union_vector@@Base+0x64>

0001647c <flatcc_builder_union_vector_edit@@Base>:
   1647c:	ldr	r0, [r0, #16]
   16480:	bx	lr

00016484 <flatcc_builder_union_vector_count@@Base>:
   16484:	ldr	r3, [r0, #32]
   16488:	ldr	r0, [r3, #20]
   1648c:	bx	lr

00016490 <flatcc_builder_end_union_vector@@Base>:
   16490:	ldr	r3, [r1, #32]
   16494:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16498:	ldrh	r3, [r3, #14]
   1649c:	strd	r6, [sp, #8]
   164a0:	str	r8, [sp, #16]
   164a4:	str	lr, [sp, #20]
   164a8:	sub	sp, sp, #16
   164ac:	cmp	r3, #7
   164b0:	bne	16610 <flatcc_builder_end_union_vector@@Base+0x180>
   164b4:	mov	r4, r1
   164b8:	mov	r6, r0
   164bc:	mov	r0, r1
   164c0:	bl	16484 <flatcc_builder_union_vector_count@@Base>
   164c4:	ldr	r8, [r4, #20]
   164c8:	lsl	r7, r0, #2
   164cc:	mov	r5, r0
   164d0:	ldr	r3, [r4, #24]
   164d4:	add	r1, r7, r0
   164d8:	add	r1, r1, r8
   164dc:	cmp	r1, r3
   164e0:	str	r1, [r4, #20]
   164e4:	bcs	165e8 <flatcc_builder_end_union_vector@@Base+0x158>
   164e8:	ldr	r3, [r4, #16]
   164ec:	adds	r8, r3, r8
   164f0:	beq	16600 <flatcc_builder_end_union_vector@@Base+0x170>
   164f4:	mov	r0, r4
   164f8:	add	r7, r8, r7
   164fc:	bl	1647c <flatcc_builder_union_vector_edit@@Base>
   16500:	cmp	r5, #0
   16504:	beq	16530 <flatcc_builder_end_union_vector@@Base+0xa0>
   16508:	add	r3, r0, r5, lsl #3
   1650c:	sub	ip, r7, #1
   16510:	sub	r1, r8, #4
   16514:	ldrb	lr, [r0]
   16518:	add	r0, r0, #8
   1651c:	strb	lr, [ip, #1]!
   16520:	ldr	lr, [r0, #-4]
   16524:	cmp	r0, r3
   16528:	str	lr, [r1, #4]!
   1652c:	bne	16514 <flatcc_builder_end_union_vector@@Base+0x84>
   16530:	mov	r3, r8
   16534:	mov	r2, r7
   16538:	str	r5, [sp]
   1653c:	mov	r1, r4
   16540:	add	r0, sp, #8
   16544:	bl	161e0 <flatcc_builder_create_union_vector_direct@@Base>
   16548:	mov	r1, #0
   1654c:	ldr	r0, [r4, #16]
   16550:	ldr	r2, [r4, #20]
   16554:	ldr	r7, [sp, #8]
   16558:	ldr	r5, [sp, #12]
   1655c:	bl	122f4 <memset@plt>
   16560:	ldr	r3, [r4, #32]
   16564:	str	r7, [r6]
   16568:	ldr	r0, [r4, #60]	; 0x3c
   1656c:	str	r5, [r6, #4]
   16570:	ldr	r2, [r4, #64]	; 0x40
   16574:	ldr	ip, [r3]
   16578:	ldmib	r3, {r1, lr}
   1657c:	add	r0, r0, ip
   16580:	sub	r2, r2, ip
   16584:	str	r0, [r4, #16]
   16588:	cmp	r2, r1
   1658c:	ldrh	r0, [r4, #128]	; 0x80
   16590:	movcs	r2, r1
   16594:	str	lr, [r4, #20]
   16598:	str	ip, [r4, #28]
   1659c:	ldrh	ip, [r4, #130]	; 0x82
   165a0:	str	r2, [r4, #24]
   165a4:	ldr	r2, [r4, #156]	; 0x9c
   165a8:	str	r1, [r3, #4]
   165ac:	cmp	r0, ip
   165b0:	sub	r0, r3, #36	; 0x24
   165b4:	strhcc	ip, [r4, #128]	; 0x80
   165b8:	ldrh	r1, [r3, #12]
   165bc:	sub	r3, r2, #1
   165c0:	str	r0, [r4, #32]
   165c4:	strh	r1, [r4, #130]	; 0x82
   165c8:	str	r3, [r4, #156]	; 0x9c
   165cc:	mov	r0, r6
   165d0:	add	sp, sp, #16
   165d4:	ldrd	r4, [sp]
   165d8:	ldrd	r6, [sp, #8]
   165dc:	ldr	r8, [sp, #16]
   165e0:	add	sp, sp, #20
   165e4:	pop	{pc}		; (ldr pc, [sp], #4)
   165e8:	add	r1, r1, #1
   165ec:	mvn	r2, #3
   165f0:	mov	r0, r4
   165f4:	bl	12fa0 <_start@@Base+0xb50>
   165f8:	cmp	r0, #0
   165fc:	beq	164e8 <flatcc_builder_end_union_vector@@Base+0x58>
   16600:	mov	r3, #0
   16604:	str	r3, [r6]
   16608:	str	r3, [r6, #4]
   1660c:	b	165cc <flatcc_builder_end_union_vector@@Base+0x13c>
   16610:	ldr	r3, [pc, #28]	; 16634 <flatcc_builder_end_union_vector@@Base+0x1a4>
   16614:	movw	r2, #1617	; 0x651
   16618:	ldr	r1, [pc, #24]	; 16638 <flatcc_builder_end_union_vector@@Base+0x1a8>
   1661c:	ldr	r0, [pc, #24]	; 1663c <flatcc_builder_end_union_vector@@Base+0x1ac>
   16620:	add	r3, pc, r3
   16624:	add	r3, r3, #968	; 0x3c8
   16628:	add	r1, pc, r1
   1662c:	add	r0, pc, r0
   16630:	bl	12324 <__assert_fail@plt>
   16634:	strdeq	r3, [r0], -ip
   16638:	andeq	r3, r0, r4, asr #16
   1663c:	andeq	r3, r0, ip, asr fp

00016640 <flatcc_builder_extend_union_vector@@Base>:
   16640:	ldr	ip, [r0, #32]
   16644:	strd	r4, [sp, #-16]!
   16648:	ldr	r3, [ip, #20]
   1664c:	str	r6, [sp, #8]
   16650:	str	lr, [sp, #12]
   16654:	adds	r2, r1, r3
   16658:	movcs	r3, #1
   1665c:	movcc	r3, #0
   16660:	cmn	r2, #-536870911	; 0xe0000001
   16664:	movls	r4, #0
   16668:	movhi	r4, #1
   1666c:	orrs	r4, r3, r4
   16670:	bne	166c8 <flatcc_builder_extend_union_vector@@Base+0x88>
   16674:	ldr	r6, [r0, #20]
   16678:	mov	r5, r0
   1667c:	ldr	r3, [r0, #24]
   16680:	str	r2, [ip, #20]
   16684:	add	r1, r6, r1, lsl #3
   16688:	cmp	r1, r3
   1668c:	str	r1, [r0, #20]
   16690:	bcs	166ac <flatcc_builder_extend_union_vector@@Base+0x6c>
   16694:	ldr	r0, [r5, #16]
   16698:	add	r0, r0, r6
   1669c:	ldrd	r4, [sp]
   166a0:	ldr	r6, [sp, #8]
   166a4:	add	sp, sp, #12
   166a8:	pop	{pc}		; (ldr pc, [sp], #4)
   166ac:	add	r1, r1, #1
   166b0:	mvn	r2, #3
   166b4:	bl	12fa0 <_start@@Base+0xb50>
   166b8:	cmp	r0, #0
   166bc:	beq	16694 <flatcc_builder_extend_union_vector@@Base+0x54>
   166c0:	mov	r0, r4
   166c4:	b	1669c <flatcc_builder_extend_union_vector@@Base+0x5c>
   166c8:	bl	13324 <flatcc_builder_default_alloc@@Base+0x2fc>

000166cc <flatcc_builder_truncate_union_vector@@Base>:
   166cc:	mov	r3, r0
   166d0:	ldr	r0, [r0, #32]
   166d4:	str	r4, [sp, #-8]!
   166d8:	ldrh	r2, [r0, #14]
   166dc:	str	lr, [sp, #4]
   166e0:	cmp	r2, #7
   166e4:	bne	16734 <flatcc_builder_truncate_union_vector@@Base+0x68>
   166e8:	mov	lr, r1
   166ec:	ldr	r1, [r0, #20]
   166f0:	cmp	r1, lr
   166f4:	bcc	16758 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   166f8:	ldr	r2, [r0, #16]
   166fc:	sub	ip, r1, lr
   16700:	mov	r1, #0
   16704:	str	ip, [r0, #20]
   16708:	ldr	r0, [r3, #16]
   1670c:	ldr	ip, [r3, #20]
   16710:	mul	r2, r2, lr
   16714:	sub	ip, ip, r2
   16718:	add	r0, r0, ip
   1671c:	str	ip, [r3, #20]
   16720:	bl	122f4 <memset@plt>
   16724:	ldr	r4, [sp]
   16728:	add	sp, sp, #4
   1672c:	mov	r0, #0
   16730:	pop	{pc}		; (ldr pc, [sp], #4)
   16734:	ldr	r3, [pc, #64]	; 1677c <flatcc_builder_truncate_union_vector@@Base+0xb0>
   16738:	movw	r2, #1665	; 0x681
   1673c:	ldr	r1, [pc, #60]	; 16780 <flatcc_builder_truncate_union_vector@@Base+0xb4>
   16740:	ldr	r0, [pc, #60]	; 16784 <flatcc_builder_truncate_union_vector@@Base+0xb8>
   16744:	add	r3, pc, r3
   16748:	add	r3, r3, #1000	; 0x3e8
   1674c:	add	r1, pc, r1
   16750:	add	r0, pc, r0
   16754:	bl	12324 <__assert_fail@plt>
   16758:	ldr	r3, [pc, #40]	; 16788 <flatcc_builder_truncate_union_vector@@Base+0xbc>
   1675c:	movw	r2, #1666	; 0x682
   16760:	ldr	r1, [pc, #36]	; 1678c <flatcc_builder_truncate_union_vector@@Base+0xc0>
   16764:	ldr	r0, [pc, #36]	; 16790 <flatcc_builder_truncate_union_vector@@Base+0xc4>
   16768:	add	r3, pc, r3
   1676c:	add	r3, r3, #1000	; 0x3e8
   16770:	add	r1, pc, r1
   16774:	add	r0, pc, r0
   16778:	bl	12324 <__assert_fail@plt>
   1677c:	ldrdeq	r2, [r0], -r8
   16780:	andeq	r3, r0, r0, lsr #14
   16784:	andeq	r3, r0, r8, lsr sl
   16788:			; <UNDEFINED> instruction: 0x00002fb4
   1678c:	strdeq	r3, [r0], -ip
   16790:	andeq	r3, r0, r8, lsr r9

00016794 <flatcc_builder_union_vector_push@@Base>:
   16794:	strd	r4, [sp, #-20]!	; 0xffffffec
   16798:	strd	r6, [sp, #8]
   1679c:	str	lr, [sp, #16]
   167a0:	sub	sp, sp, #12
   167a4:	add	r3, sp, #8
   167a8:	stmdb	r3, {r1, r2}
   167ac:	ldr	r2, [r0, #32]
   167b0:	ldrh	r3, [r2, #14]
   167b4:	cmp	r3, #7
   167b8:	bne	16830 <flatcc_builder_union_vector_push@@Base+0x9c>
   167bc:	ldr	r3, [r2, #20]
   167c0:	cmn	r3, #-536870911	; 0xe0000001
   167c4:	beq	16828 <flatcc_builder_union_vector_push@@Base+0x94>
   167c8:	ldr	r5, [r0, #20]
   167cc:	add	r3, r3, #1
   167d0:	mov	r4, r0
   167d4:	ldr	r1, [r0, #24]
   167d8:	str	r3, [r2, #20]
   167dc:	add	r3, r5, #8
   167e0:	cmp	r3, r1
   167e4:	str	r3, [r0, #20]
   167e8:	bcs	16814 <flatcc_builder_union_vector_push@@Base+0x80>
   167ec:	ldr	r3, [r4, #16]
   167f0:	adds	r0, r3, r5
   167f4:	beq	16800 <flatcc_builder_union_vector_push@@Base+0x6c>
   167f8:	ldrd	r6, [sp]
   167fc:	strd	r6, [r3, r5]
   16800:	add	sp, sp, #12
   16804:	ldrd	r4, [sp]
   16808:	ldrd	r6, [sp, #8]
   1680c:	add	sp, sp, #16
   16810:	pop	{pc}		; (ldr pc, [sp], #4)
   16814:	mvn	r2, #3
   16818:	add	r1, r5, #9
   1681c:	bl	12fa0 <_start@@Base+0xb50>
   16820:	cmp	r0, #0
   16824:	beq	167ec <flatcc_builder_union_vector_push@@Base+0x58>
   16828:	mov	r0, #0
   1682c:	b	16800 <flatcc_builder_union_vector_push@@Base+0x6c>
   16830:	ldr	r3, [pc, #28]	; 16854 <flatcc_builder_union_vector_push@@Base+0xc0>
   16834:	movw	r2, #1677	; 0x68d
   16838:	ldr	r1, [pc, #24]	; 16858 <flatcc_builder_union_vector_push@@Base+0xc4>
   1683c:	ldr	r0, [pc, #24]	; 1685c <flatcc_builder_union_vector_push@@Base+0xc8>
   16840:	add	r3, pc, r3
   16844:	add	r3, r3, #1040	; 0x410
   16848:	add	r1, pc, r1
   1684c:	add	r0, pc, r0
   16850:	bl	12324 <__assert_fail@plt>
   16854:	ldrdeq	r2, [r0], -ip
   16858:	andeq	r3, r0, r4, lsr #12
   1685c:	andeq	r3, r0, ip, lsr r9

00016860 <flatcc_builder_append_union_vector@@Base>:
   16860:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16864:	mov	r4, r1
   16868:	ldr	r1, [r0, #32]
   1686c:	ldrh	r3, [r1, #14]
   16870:	strd	r6, [sp, #8]
   16874:	str	r8, [sp, #16]
   16878:	str	lr, [sp, #20]
   1687c:	cmp	r3, #7
   16880:	bne	16920 <flatcc_builder_append_union_vector@@Base+0xc0>
   16884:	ldr	r3, [r1, #20]
   16888:	adds	r3, r2, r3
   1688c:	movcs	lr, #1
   16890:	movcc	lr, #0
   16894:	cmn	r3, #-536870911	; 0xe0000001
   16898:	movls	ip, #0
   1689c:	movhi	ip, #1
   168a0:	orrs	r8, lr, ip
   168a4:	bne	16948 <flatcc_builder_append_union_vector@@Base+0xe8>
   168a8:	ldr	r7, [r0, #20]
   168ac:	lsl	r6, r2, #3
   168b0:	mov	r5, r0
   168b4:	str	r3, [r1, #20]
   168b8:	ldr	r3, [r0, #24]
   168bc:	add	r1, r6, r7
   168c0:	cmp	r1, r3
   168c4:	str	r1, [r0, #20]
   168c8:	bcs	16904 <flatcc_builder_append_union_vector@@Base+0xa4>
   168cc:	ldr	r3, [r5, #16]
   168d0:	adds	r3, r3, r7
   168d4:	beq	168ec <flatcc_builder_append_union_vector@@Base+0x8c>
   168d8:	mov	r0, r3
   168dc:	mov	r2, r6
   168e0:	mov	r1, r4
   168e4:	bl	12294 <memcpy@plt>
   168e8:	mov	r3, r0
   168ec:	ldrd	r4, [sp]
   168f0:	mov	r0, r3
   168f4:	ldrd	r6, [sp, #8]
   168f8:	ldr	r8, [sp, #16]
   168fc:	add	sp, sp, #20
   16900:	pop	{pc}		; (ldr pc, [sp], #4)
   16904:	add	r1, r1, #1
   16908:	mvn	r2, #3
   1690c:	bl	12fa0 <_start@@Base+0xb50>
   16910:	cmp	r0, #0
   16914:	beq	168cc <flatcc_builder_append_union_vector@@Base+0x6c>
   16918:	mov	r3, r8
   1691c:	b	168ec <flatcc_builder_append_union_vector@@Base+0x8c>
   16920:	ldr	r3, [pc, #36]	; 1694c <flatcc_builder_append_union_vector@@Base+0xec>
   16924:	movw	r2, #1692	; 0x69c
   16928:	ldr	r1, [pc, #32]	; 16950 <flatcc_builder_append_union_vector@@Base+0xf0>
   1692c:	ldr	r0, [pc, #32]	; 16954 <flatcc_builder_append_union_vector@@Base+0xf4>
   16930:	add	r3, pc, r3
   16934:	add	r3, r3, #1072	; 0x430
   16938:	add	r1, pc, r1
   1693c:	add	r3, r3, #4
   16940:	add	r0, pc, r0
   16944:	bl	12324 <__assert_fail@plt>
   16948:	bl	13324 <flatcc_builder_default_alloc@@Base+0x2fc>
   1694c:	andeq	r2, r0, ip, ror #27
   16950:	andeq	r3, r0, r4, lsr r5
   16954:	andeq	r3, r0, r8, asr #16

00016958 <flatcc_builder_create_string@@Base>:
   16958:	ldr	ip, [r0, #136]	; 0x88
   1695c:	cmp	r2, #0
   16960:	strd	r4, [sp, #-20]!	; 0xffffffec
   16964:	mov	r5, #4
   16968:	mov	r4, r0
   1696c:	strd	r6, [sp, #8]
   16970:	mov	r0, #1
   16974:	moveq	r7, #2
   16978:	str	lr, [sp, #16]
   1697c:	sub	sp, sp, #92	; 0x5c
   16980:	moveq	r1, r0
   16984:	add	r3, sp, #12
   16988:	ldr	lr, [pc, #204]	; 16a5c <flatcc_builder_create_string@@Base+0x104>
   1698c:	str	r2, [sp, #12]
   16990:	str	r3, [sp, #24]
   16994:	sub	r3, ip, r2
   16998:	sub	r3, r3, #1
   1699c:	str	r5, [sp, #28]
   169a0:	and	r3, r3, #3
   169a4:	add	lr, pc, lr
   169a8:	add	r3, r3, r0
   169ac:	beq	169c4 <flatcc_builder_create_string@@Base+0x6c>
   169b0:	add	r5, r2, r5
   169b4:	mov	r7, #3
   169b8:	str	r1, [sp, #32]
   169bc:	mov	r1, #2
   169c0:	str	r2, [sp, #36]	; 0x24
   169c4:	ldr	r6, [pc, #148]	; 16a60 <flatcc_builder_create_string@@Base+0x108>
   169c8:	add	r0, r3, r5
   169cc:	add	r2, sp, #88	; 0x58
   169d0:	add	r1, r1, #1
   169d4:	sub	r5, ip, r0
   169d8:	add	r1, r2, r1, lsl #3
   169dc:	str	r0, [sp, #16]
   169e0:	cmp	ip, r5
   169e4:	ldr	r2, [lr, r6]
   169e8:	str	r7, [sp, #20]
   169ec:	strd	r2, [r1, #-72]	; 0xffffffb8
   169f0:	ble	16a34 <flatcc_builder_create_string@@Base+0xdc>
   169f4:	mov	r2, r7
   169f8:	mov	r3, r5
   169fc:	str	r0, [sp]
   16a00:	add	r1, sp, #24
   16a04:	ldr	r0, [r4, #36]	; 0x24
   16a08:	ldr	r6, [r4, #44]	; 0x2c
   16a0c:	blx	r6
   16a10:	cmp	r0, #0
   16a14:	bne	16a58 <flatcc_builder_create_string@@Base+0x100>
   16a18:	mov	r0, r5
   16a1c:	str	r5, [r4, #136]	; 0x88
   16a20:	add	sp, sp, #92	; 0x5c
   16a24:	ldrd	r4, [sp]
   16a28:	ldrd	r6, [sp, #8]
   16a2c:	add	sp, sp, #16
   16a30:	pop	{pc}		; (ldr pc, [sp], #4)
   16a34:	ldr	r3, [pc, #40]	; 16a64 <flatcc_builder_create_string@@Base+0x10c>
   16a38:	movw	r2, #647	; 0x287
   16a3c:	ldr	r1, [pc, #36]	; 16a68 <flatcc_builder_create_string@@Base+0x110>
   16a40:	ldr	r0, [pc, #36]	; 16a6c <flatcc_builder_create_string@@Base+0x114>
   16a44:	add	r3, pc, r3
   16a48:	add	r3, r3, #44	; 0x2c
   16a4c:	add	r1, pc, r1
   16a50:	add	r0, pc, r0
   16a54:	bl	12324 <__assert_fail@plt>
   16a58:	bl	132ec <flatcc_builder_default_alloc@@Base+0x2c4>
   16a5c:	andeq	r4, r1, r4, asr r6
   16a60:	andeq	r0, r0, r4, asr #32
   16a64:	ldrdeq	r2, [r0], -r8
   16a68:	andeq	r3, r0, r0, lsr #8
   16a6c:	andeq	r3, r0, r4, lsr #9

00016a70 <flatcc_builder_create_string_str@@Base>:
   16a70:	strd	r4, [sp, #-16]!
   16a74:	mov	r5, r0
   16a78:	mov	r0, r1
   16a7c:	mov	r4, r1
   16a80:	str	r6, [sp, #8]
   16a84:	str	lr, [sp, #12]
   16a88:	bl	122dc <strlen@plt>
   16a8c:	mov	r2, r0
   16a90:	mov	r1, r4
   16a94:	ldr	r6, [sp, #8]
   16a98:	mov	r0, r5
   16a9c:	ldrd	r4, [sp]
   16aa0:	ldr	lr, [sp, #12]
   16aa4:	add	sp, sp, #16
   16aa8:	b	16958 <flatcc_builder_create_string@@Base>

00016aac <flatcc_builder_create_string_strn@@Base>:
   16aac:	strd	r4, [sp, #-16]!
   16ab0:	mov	r4, r1
   16ab4:	mov	r1, #0
   16ab8:	str	r6, [sp, #8]
   16abc:	mov	r6, r0
   16ac0:	mov	r0, r4
   16ac4:	mov	r5, r2
   16ac8:	str	lr, [sp, #12]
   16acc:	bl	1230c <memchr@plt>
   16ad0:	cmp	r0, #0
   16ad4:	mov	r1, r4
   16ad8:	ldr	lr, [sp, #12]
   16adc:	subne	r5, r0, r4
   16ae0:	mov	r0, r6
   16ae4:	mov	r2, r5
   16ae8:	ldrd	r4, [sp]
   16aec:	ldr	r6, [sp, #8]
   16af0:	add	sp, sp, #16
   16af4:	b	16958 <flatcc_builder_create_string@@Base>

00016af8 <flatcc_builder_end_string@@Base>:
   16af8:	ldr	r3, [r0, #32]
   16afc:	strd	r4, [sp, #-16]!
   16b00:	ldrh	r2, [r3, #14]
   16b04:	str	r6, [sp, #8]
   16b08:	str	lr, [sp, #12]
   16b0c:	cmp	r2, #6
   16b10:	bne	16be8 <flatcc_builder_end_string@@Base+0xf0>
   16b14:	ldr	r2, [r3, #20]
   16b18:	mov	r4, r0
   16b1c:	ldr	r3, [r0, #20]
   16b20:	cmp	r2, r3
   16b24:	bne	16bc0 <flatcc_builder_end_string@@Base+0xc8>
   16b28:	ldr	r1, [r0, #16]
   16b2c:	bl	16958 <flatcc_builder_create_string@@Base>
   16b30:	subs	r5, r0, #0
   16b34:	beq	16bac <flatcc_builder_end_string@@Base+0xb4>
   16b38:	mov	r1, #0
   16b3c:	ldr	r0, [r4, #16]
   16b40:	ldr	r2, [r4, #20]
   16b44:	bl	122f4 <memset@plt>
   16b48:	ldr	r3, [r4, #32]
   16b4c:	ldr	r0, [r4, #60]	; 0x3c
   16b50:	ldr	r2, [r4, #64]	; 0x40
   16b54:	ldr	ip, [r3]
   16b58:	ldmib	r3, {r1, lr}
   16b5c:	add	r0, r0, ip
   16b60:	sub	r2, r2, ip
   16b64:	str	r0, [r4, #16]
   16b68:	cmp	r2, r1
   16b6c:	ldrh	r0, [r4, #128]	; 0x80
   16b70:	movcs	r2, r1
   16b74:	str	lr, [r4, #20]
   16b78:	str	ip, [r4, #28]
   16b7c:	ldrh	ip, [r4, #130]	; 0x82
   16b80:	str	r2, [r4, #24]
   16b84:	ldr	r2, [r4, #156]	; 0x9c
   16b88:	str	r1, [r3, #4]
   16b8c:	cmp	r0, ip
   16b90:	sub	r0, r3, #36	; 0x24
   16b94:	strhcc	ip, [r4, #128]	; 0x80
   16b98:	ldrh	r1, [r3, #12]
   16b9c:	sub	r3, r2, #1
   16ba0:	str	r0, [r4, #32]
   16ba4:	strh	r1, [r4, #130]	; 0x82
   16ba8:	str	r3, [r4, #156]	; 0x9c
   16bac:	mov	r0, r5
   16bb0:	ldrd	r4, [sp]
   16bb4:	ldr	r6, [sp, #8]
   16bb8:	add	sp, sp, #12
   16bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   16bc0:	ldr	r3, [pc, #72]	; 16c10 <flatcc_builder_end_string@@Base+0x118>
   16bc4:	movw	r2, #1733	; 0x6c5
   16bc8:	ldr	r1, [pc, #68]	; 16c14 <flatcc_builder_end_string@@Base+0x11c>
   16bcc:	ldr	r0, [pc, #68]	; 16c18 <flatcc_builder_end_string@@Base+0x120>
   16bd0:	add	r3, pc, r3
   16bd4:	add	r3, r3, #1104	; 0x450
   16bd8:	add	r1, pc, r1
   16bdc:	add	r3, r3, #8
   16be0:	add	r0, pc, r0
   16be4:	bl	12324 <__assert_fail@plt>
   16be8:	ldr	r3, [pc, #44]	; 16c1c <flatcc_builder_end_string@@Base+0x124>
   16bec:	movw	r2, #1732	; 0x6c4
   16bf0:	ldr	r1, [pc, #40]	; 16c20 <flatcc_builder_end_string@@Base+0x128>
   16bf4:	ldr	r0, [pc, #40]	; 16c24 <flatcc_builder_end_string@@Base+0x12c>
   16bf8:	add	r3, pc, r3
   16bfc:	add	r3, r3, #1104	; 0x450
   16c00:	add	r1, pc, r1
   16c04:	add	r3, r3, #8
   16c08:	add	r0, pc, r0
   16c0c:	bl	12324 <__assert_fail@plt>
   16c10:	andeq	r2, r0, ip, asr #22
   16c14:	muleq	r0, r4, r2
   16c18:	ldrdeq	r3, [r0], -ip
   16c1c:	andeq	r2, r0, r4, lsr #22
   16c20:	andeq	r3, r0, ip, ror #4
   16c24:	andeq	r3, r0, r4, asr r4

00016c28 <flatcc_builder_string_edit@@Base>:
   16c28:	ldr	r0, [r0, #16]
   16c2c:	bx	lr

00016c30 <flatcc_builder_string_len@@Base>:
   16c30:	ldr	r3, [r0, #32]
   16c34:	ldr	r0, [r3, #20]
   16c38:	bx	lr

00016c3c <flatcc_builder_table_add@@Base>:
   16c3c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16c40:	mov	r4, r0
   16c44:	ldr	r0, [r0, #32]
   16c48:	ldrh	r0, [r0, #14]
   16c4c:	strd	r6, [sp, #8]
   16c50:	strd	r8, [sp, #16]
   16c54:	str	sl, [sp, #24]
   16c58:	str	lr, [sp, #28]
   16c5c:	cmp	r0, #3
   16c60:	bne	16d90 <flatcc_builder_table_add@@Base+0x154>
   16c64:	movw	r0, #32764	; 0x7ffc
   16c68:	cmp	r1, r0
   16c6c:	bhi	16d68 <flatcc_builder_table_add@@Base+0x12c>
   16c70:	ldrh	r0, [r4, #130]	; 0x82
   16c74:	lsl	r8, r1, #1
   16c78:	ldr	lr, [r4, #4]
   16c7c:	cmp	r0, r3
   16c80:	strhcc	r3, [r4, #130]	; 0x82
   16c84:	ldrh	r6, [lr, r8]
   16c88:	add	lr, lr, r8
   16c8c:	cmp	r6, #0
   16c90:	bne	16d40 <flatcc_builder_table_add@@Base+0x104>
   16c94:	ldr	ip, [r4, #12]
   16c98:	movw	r9, #31153	; 0x79b1
   16c9c:	movt	r9, #40503	; 0x9e37
   16ca0:	uxth	r7, r1
   16ca4:	sub	r5, r3, #1
   16ca8:	ldr	r0, [r4, #20]
   16cac:	rsb	r3, r3, #0
   16cb0:	eor	ip, ip, r1
   16cb4:	ldr	r1, [r4, #24]
   16cb8:	mul	ip, r9, ip
   16cbc:	add	r5, r5, r0
   16cc0:	and	r5, r5, r3
   16cc4:	eor	ip, ip, r2
   16cc8:	add	r2, r2, r5
   16ccc:	cmp	r2, r1
   16cd0:	mul	ip, r9, ip
   16cd4:	str	ip, [r4, #12]
   16cd8:	str	r2, [r4, #20]
   16cdc:	bcs	16d18 <flatcc_builder_table_add@@Base+0xdc>
   16ce0:	add	r3, r5, #4
   16ce4:	ldr	r0, [r4, #16]
   16ce8:	strh	r3, [lr]
   16cec:	ldrh	r3, [r4, #8]
   16cf0:	add	r0, r0, r5
   16cf4:	cmp	r3, r7
   16cf8:	addls	r7, r7, #1
   16cfc:	strhls	r7, [r4, #8]
   16d00:	ldrd	r4, [sp]
   16d04:	ldrd	r6, [sp, #8]
   16d08:	ldrd	r8, [sp, #16]
   16d0c:	ldr	sl, [sp, #24]
   16d10:	add	sp, sp, #28
   16d14:	pop	{pc}		; (ldr pc, [sp], #4)
   16d18:	add	r1, r2, #1
   16d1c:	mov	r0, r4
   16d20:	movw	r2, #65532	; 0xfffc
   16d24:	bl	12fa0 <_start@@Base+0xb50>
   16d28:	cmp	r0, #0
   16d2c:	movne	r0, r6
   16d30:	bne	16d00 <flatcc_builder_table_add@@Base+0xc4>
   16d34:	ldr	lr, [r4, #4]
   16d38:	add	lr, lr, r8
   16d3c:	b	16ce0 <flatcc_builder_table_add@@Base+0xa4>
   16d40:	ldr	r3, [pc, #112]	; 16db8 <flatcc_builder_table_add@@Base+0x17c>
   16d44:	movw	r2, #1784	; 0x6f8
   16d48:	ldr	r1, [pc, #108]	; 16dbc <flatcc_builder_table_add@@Base+0x180>
   16d4c:	ldr	r0, [pc, #108]	; 16dc0 <flatcc_builder_table_add@@Base+0x184>
   16d50:	add	r3, pc, r3
   16d54:	add	r3, r3, #1136	; 0x470
   16d58:	add	r1, pc, r1
   16d5c:	add	r3, r3, #4
   16d60:	add	r0, pc, r0
   16d64:	bl	12324 <__assert_fail@plt>
   16d68:	ldr	r3, [pc, #84]	; 16dc4 <flatcc_builder_table_add@@Base+0x188>
   16d6c:	movw	r2, #1774	; 0x6ee
   16d70:	ldr	r1, [pc, #80]	; 16dc8 <flatcc_builder_table_add@@Base+0x18c>
   16d74:	ldr	r0, [pc, #80]	; 16dcc <flatcc_builder_table_add@@Base+0x190>
   16d78:	add	r3, pc, r3
   16d7c:	add	r3, r3, #1136	; 0x470
   16d80:	add	r1, pc, r1
   16d84:	add	r3, r3, #4
   16d88:	add	r0, pc, r0
   16d8c:	bl	12324 <__assert_fail@plt>
   16d90:	ldr	r3, [pc, #56]	; 16dd0 <flatcc_builder_table_add@@Base+0x194>
   16d94:	movw	r2, #1773	; 0x6ed
   16d98:	ldr	r1, [pc, #52]	; 16dd4 <flatcc_builder_table_add@@Base+0x198>
   16d9c:	ldr	r0, [pc, #52]	; 16dd8 <flatcc_builder_table_add@@Base+0x19c>
   16da0:	add	r3, pc, r3
   16da4:	add	r3, r3, #1136	; 0x470
   16da8:	add	r1, pc, r1
   16dac:	add	r3, r3, #4
   16db0:	add	r0, pc, r0
   16db4:	bl	12324 <__assert_fail@plt>
   16db8:	andeq	r2, r0, ip, asr #19
   16dbc:	andeq	r3, r0, r4, lsl r1
   16dc0:	muleq	r0, r4, r1
   16dc4:	andeq	r2, r0, r4, lsr #19
   16dc8:	andeq	r3, r0, ip, ror #1
   16dcc:	andeq	r3, r0, r8, asr r4
   16dd0:	andeq	r2, r0, ip, ror r9
   16dd4:	andeq	r3, r0, r4, asr #1
   16dd8:	muleq	r0, r8, r3

00016ddc <flatcc_builder_table_edit@@Base>:
   16ddc:	ldr	r2, [r0, #32]
   16de0:	ldrh	r2, [r2, #14]
   16de4:	cmp	r2, #3
   16de8:	bne	16e00 <flatcc_builder_table_edit@@Base+0x24>
   16dec:	ldr	r3, [r0, #20]
   16df0:	ldr	r0, [r0, #16]
   16df4:	sub	r3, r3, r1
   16df8:	add	r0, r0, r3
   16dfc:	bx	lr
   16e00:	ldr	r3, [pc, #36]	; 16e2c <flatcc_builder_table_edit@@Base+0x50>
   16e04:	movw	r2, #1794	; 0x702
   16e08:	str	r4, [sp, #-8]!
   16e0c:	ldr	r1, [pc, #28]	; 16e30 <flatcc_builder_table_edit@@Base+0x54>
   16e10:	str	lr, [sp, #4]
   16e14:	ldr	r0, [pc, #24]	; 16e34 <flatcc_builder_table_edit@@Base+0x58>
   16e18:	add	r3, pc, r3
   16e1c:	add	r3, r3, #1168	; 0x490
   16e20:	add	r1, pc, r1
   16e24:	add	r0, pc, r0
   16e28:	bl	12324 <__assert_fail@plt>
   16e2c:	andeq	r2, r0, r4, lsl #18
   16e30:	andeq	r3, r0, ip, asr #32
   16e34:	andeq	r3, r0, r4, lsr #6

00016e38 <flatcc_builder_table_add_copy@@Base>:
   16e38:	strd	r4, [sp, #-16]!
   16e3c:	mov	r4, r3
   16e40:	ldrh	r3, [sp, #16]
   16e44:	str	r6, [sp, #8]
   16e48:	mov	r6, r2
   16e4c:	mov	r2, r4
   16e50:	str	lr, [sp, #12]
   16e54:	bl	16c3c <flatcc_builder_table_add@@Base>
   16e58:	subs	r5, r0, #0
   16e5c:	beq	16e6c <flatcc_builder_table_add_copy@@Base+0x34>
   16e60:	mov	r2, r4
   16e64:	mov	r1, r6
   16e68:	bl	12294 <memcpy@plt>
   16e6c:	mov	r0, r5
   16e70:	ldrd	r4, [sp]
   16e74:	ldr	r6, [sp, #8]
   16e78:	add	sp, sp, #12
   16e7c:	pop	{pc}		; (ldr pc, [sp], #4)

00016e80 <flatcc_builder_table_add_offset@@Base>:
   16e80:	ldr	r3, [r0, #32]
   16e84:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16e88:	ldrh	r3, [r3, #14]
   16e8c:	strd	r6, [sp, #8]
   16e90:	str	r8, [sp, #16]
   16e94:	str	lr, [sp, #20]
   16e98:	cmp	r3, #3
   16e9c:	bne	16fc4 <flatcc_builder_table_add_offset@@Base+0x144>
   16ea0:	movw	r3, #32764	; 0x7ffc
   16ea4:	cmp	r1, r3
   16ea8:	bhi	16f9c <flatcc_builder_table_add_offset@@Base+0x11c>
   16eac:	ldr	ip, [r0, #4]
   16eb0:	lsl	r8, r1, #1
   16eb4:	mov	r4, r0
   16eb8:	ldrh	r6, [ip, r8]
   16ebc:	add	ip, ip, r8
   16ec0:	cmp	r6, #0
   16ec4:	bne	16f74 <flatcc_builder_table_add_offset@@Base+0xf4>
   16ec8:	ldr	r3, [r0, #12]
   16ecc:	movw	r2, #31153	; 0x79b1
   16ed0:	movt	r2, #40503	; 0x9e37
   16ed4:	uxth	r7, r1
   16ed8:	ldr	r5, [r0, #20]
   16edc:	ldr	lr, [r0, #24]
   16ee0:	eor	r3, r3, r1
   16ee4:	mul	r3, r2, r3
   16ee8:	add	r5, r5, #3
   16eec:	bic	r5, r5, #3
   16ef0:	add	r1, r5, #4
   16ef4:	eor	r3, r3, #4
   16ef8:	cmp	r1, lr
   16efc:	str	r1, [r0, #20]
   16f00:	mul	r3, r2, r3
   16f04:	str	r3, [r0, #12]
   16f08:	bhi	16f54 <flatcc_builder_table_add_offset@@Base+0xd4>
   16f0c:	uxth	r2, r5
   16f10:	ldr	r0, [r4, #16]
   16f14:	add	r3, r2, #4
   16f18:	strh	r3, [ip]
   16f1c:	ldrh	r3, [r4, #8]
   16f20:	add	r0, r0, r5
   16f24:	cmp	r3, r7
   16f28:	ldr	r3, [r4]
   16f2c:	addls	r7, r7, #1
   16f30:	strhls	r7, [r4, #8]
   16f34:	add	r1, r3, #2
   16f38:	str	r1, [r4]
   16f3c:	strh	r2, [r3]
   16f40:	ldrd	r4, [sp]
   16f44:	ldrd	r6, [sp, #8]
   16f48:	ldr	r8, [sp, #16]
   16f4c:	add	sp, sp, #20
   16f50:	pop	{pc}		; (ldr pc, [sp], #4)
   16f54:	movw	r2, #65532	; 0xfffc
   16f58:	bl	12fa0 <_start@@Base+0xb50>
   16f5c:	cmp	r0, #0
   16f60:	movne	r0, r6
   16f64:	bne	16f40 <flatcc_builder_table_add_offset@@Base+0xc0>
   16f68:	ldr	ip, [r4, #4]
   16f6c:	add	ip, ip, r8
   16f70:	b	16f0c <flatcc_builder_table_add_offset@@Base+0x8c>
   16f74:	ldr	r3, [pc, #112]	; 16fec <flatcc_builder_table_add_offset@@Base+0x16c>
   16f78:	movw	r2, #1819	; 0x71b
   16f7c:	ldr	r1, [pc, #108]	; 16ff0 <flatcc_builder_table_add_offset@@Base+0x170>
   16f80:	ldr	r0, [pc, #108]	; 16ff4 <flatcc_builder_table_add_offset@@Base+0x174>
   16f84:	add	r3, pc, r3
   16f88:	add	r3, r3, #1184	; 0x4a0
   16f8c:	add	r1, pc, r1
   16f90:	add	r3, r3, #12
   16f94:	add	r0, pc, r0
   16f98:	bl	12324 <__assert_fail@plt>
   16f9c:	ldr	r3, [pc, #84]	; 16ff8 <flatcc_builder_table_add_offset@@Base+0x178>
   16fa0:	movw	r2, #1812	; 0x714
   16fa4:	ldr	r1, [pc, #80]	; 16ffc <flatcc_builder_table_add_offset@@Base+0x17c>
   16fa8:	ldr	r0, [pc, #80]	; 17000 <flatcc_builder_table_add_offset@@Base+0x180>
   16fac:	add	r3, pc, r3
   16fb0:	add	r3, r3, #1184	; 0x4a0
   16fb4:	add	r1, pc, r1
   16fb8:	add	r3, r3, #12
   16fbc:	add	r0, pc, r0
   16fc0:	bl	12324 <__assert_fail@plt>
   16fc4:	ldr	r3, [pc, #56]	; 17004 <flatcc_builder_table_add_offset@@Base+0x184>
   16fc8:	movw	r2, #1811	; 0x713
   16fcc:	ldr	r1, [pc, #52]	; 17008 <flatcc_builder_table_add_offset@@Base+0x188>
   16fd0:	ldr	r0, [pc, #52]	; 1700c <flatcc_builder_table_add_offset@@Base+0x18c>
   16fd4:	add	r3, pc, r3
   16fd8:	add	r3, r3, #1184	; 0x4a0
   16fdc:	add	r1, pc, r1
   16fe0:	add	r3, r3, #12
   16fe4:	add	r0, pc, r0
   16fe8:	bl	12324 <__assert_fail@plt>
   16fec:	muleq	r0, r8, r7
   16ff0:	andeq	r2, r0, r0, ror #29
   16ff4:	andeq	r2, r0, r0, ror #30
   16ff8:	andeq	r2, r0, r0, ror r7
   16ffc:			; <UNDEFINED> instruction: 0x00002eb8
   17000:	andeq	r3, r0, r4, lsr #4
   17004:	andeq	r2, r0, r8, asr #14
   17008:	muleq	r0, r0, lr
   1700c:	andeq	r3, r0, r4, ror #2

00017010 <flatcc_builder_table_add_union@@Base>:
   17010:	strd	r4, [sp, #-20]!	; 0xffffffec
   17014:	strd	r6, [sp, #8]
   17018:	str	lr, [sp, #16]
   1701c:	sub	sp, sp, #12
   17020:	add	ip, sp, #8
   17024:	stmdb	ip, {r2, r3}
   17028:	ldr	r3, [r0, #32]
   1702c:	ldrb	r5, [sp]
   17030:	ldr	r6, [sp, #4]
   17034:	ldrh	r3, [r3, #14]
   17038:	cmp	r3, #3
   1703c:	bne	170d0 <flatcc_builder_table_add_union@@Base+0xc0>
   17040:	cmp	r5, #0
   17044:	mov	r4, r0
   17048:	mov	r7, r1
   1704c:	beq	170a0 <flatcc_builder_table_add_union@@Base+0x90>
   17050:	cmp	r6, #0
   17054:	beq	17068 <flatcc_builder_table_add_union@@Base+0x58>
   17058:	bl	16e80 <flatcc_builder_table_add_offset@@Base>
   1705c:	cmp	r0, #0
   17060:	strne	r6, [r0]
   17064:	beq	17120 <flatcc_builder_table_add_union@@Base+0x110>
   17068:	mov	r3, #1
   1706c:	sub	r1, r7, #1
   17070:	mov	r2, r3
   17074:	mov	r0, r4
   17078:	bl	16c3c <flatcc_builder_table_add@@Base>
   1707c:	subs	r3, r0, #0
   17080:	beq	170f8 <flatcc_builder_table_add_union@@Base+0xe8>
   17084:	mov	r0, #0
   17088:	strb	r5, [r3]
   1708c:	add	sp, sp, #12
   17090:	ldrd	r4, [sp]
   17094:	ldrd	r6, [sp, #8]
   17098:	add	sp, sp, #16
   1709c:	pop	{pc}		; (ldr pc, [sp], #4)
   170a0:	cmp	r6, #0
   170a4:	beq	17068 <flatcc_builder_table_add_union@@Base+0x58>
   170a8:	ldr	r3, [pc, #152]	; 17148 <flatcc_builder_table_add_union@@Base+0x138>
   170ac:	movw	r2, #1519	; 0x5ef
   170b0:	ldr	r1, [pc, #148]	; 1714c <flatcc_builder_table_add_union@@Base+0x13c>
   170b4:	ldr	r0, [pc, #148]	; 17150 <flatcc_builder_table_add_union@@Base+0x140>
   170b8:	add	r3, pc, r3
   170bc:	add	r3, r3, #1216	; 0x4c0
   170c0:	add	r1, pc, r1
   170c4:	add	r3, r3, #12
   170c8:	add	r0, pc, r0
   170cc:	bl	12324 <__assert_fail@plt>
   170d0:	ldr	r3, [pc, #124]	; 17154 <flatcc_builder_table_add_union@@Base+0x144>
   170d4:	movw	r2, #1518	; 0x5ee
   170d8:	ldr	r1, [pc, #120]	; 17158 <flatcc_builder_table_add_union@@Base+0x148>
   170dc:	ldr	r0, [pc, #120]	; 1715c <flatcc_builder_table_add_union@@Base+0x14c>
   170e0:	add	r3, pc, r3
   170e4:	add	r3, r3, #1216	; 0x4c0
   170e8:	add	r1, pc, r1
   170ec:	add	r3, r3, #12
   170f0:	add	r0, pc, r0
   170f4:	bl	12324 <__assert_fail@plt>
   170f8:	ldr	r3, [pc, #96]	; 17160 <flatcc_builder_table_add_union@@Base+0x150>
   170fc:	movw	r2, #1526	; 0x5f6
   17100:	ldr	r1, [pc, #92]	; 17164 <flatcc_builder_table_add_union@@Base+0x154>
   17104:	ldr	r0, [pc, #92]	; 17168 <flatcc_builder_table_add_union@@Base+0x158>
   17108:	add	r3, pc, r3
   1710c:	add	r3, r3, #1216	; 0x4c0
   17110:	add	r1, pc, r1
   17114:	add	r3, r3, #12
   17118:	add	r0, pc, r0
   1711c:	bl	12324 <__assert_fail@plt>
   17120:	ldr	r3, [pc, #68]	; 1716c <flatcc_builder_table_add_union@@Base+0x15c>
   17124:	movw	r2, #1522	; 0x5f2
   17128:	ldr	r1, [pc, #64]	; 17170 <flatcc_builder_table_add_union@@Base+0x160>
   1712c:	ldr	r0, [pc, #64]	; 17174 <flatcc_builder_table_add_union@@Base+0x164>
   17130:	add	r3, pc, r3
   17134:	add	r3, r3, #1216	; 0x4c0
   17138:	add	r1, pc, r1
   1713c:	add	r3, r3, #12
   17140:	add	r0, pc, r0
   17144:	bl	12324 <__assert_fail@plt>
   17148:	andeq	r2, r0, r4, ror #12
   1714c:	andeq	r2, r0, ip, lsr #27
   17150:	andeq	r3, r0, ip, asr r1
   17154:	andeq	r2, r0, ip, lsr r6
   17158:	andeq	r2, r0, r4, lsl #27
   1715c:	andeq	r3, r0, r8, asr r0
   17160:	andeq	r2, r0, r4, lsl r6
   17164:	andeq	r2, r0, ip, asr sp
   17168:	andeq	r3, r0, ip, lsr r1
   1716c:	andeq	r2, r0, ip, ror #11
   17170:	andeq	r2, r0, r4, lsr sp
   17174:	andeq	r3, r0, r8, lsl #2

00017178 <flatcc_builder_table_add_union_vector@@Base>:
   17178:	strd	r4, [sp, #-20]!	; 0xffffffec
   1717c:	strd	r6, [sp, #8]
   17180:	mov	r7, r1
   17184:	str	lr, [sp, #16]
   17188:	sub	sp, sp, #12
   1718c:	add	r1, sp, #8
   17190:	stmdb	r1, {r2, r3}
   17194:	ldr	r3, [r0, #32]
   17198:	ldm	sp, {r4, r6}
   1719c:	ldrh	r3, [r3, #14]
   171a0:	cmp	r3, #3
   171a4:	bne	17250 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   171a8:	clz	r3, r6
   171ac:	clz	r2, r4
   171b0:	lsr	r3, r3, #5
   171b4:	lsr	r2, r2, #5
   171b8:	cmp	r2, r3
   171bc:	beq	171ec <flatcc_builder_table_add_union_vector@@Base+0x74>
   171c0:	adds	r4, r4, #0
   171c4:	movne	r4, #1
   171c8:	cmp	r4, r3
   171cc:	mvnne	r4, #0
   171d0:	beq	17278 <flatcc_builder_table_add_union_vector@@Base+0x100>
   171d4:	mov	r0, r4
   171d8:	add	sp, sp, #12
   171dc:	ldrd	r4, [sp]
   171e0:	ldrd	r6, [sp, #8]
   171e4:	add	sp, sp, #16
   171e8:	pop	{pc}		; (ldr pc, [sp], #4)
   171ec:	cmp	r4, #0
   171f0:	beq	171d4 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   171f4:	sub	r1, r7, #1
   171f8:	mov	r5, r0
   171fc:	bl	16e80 <flatcc_builder_table_add_offset@@Base>
   17200:	subs	r3, r0, #0
   17204:	beq	172a0 <flatcc_builder_table_add_union_vector@@Base+0x128>
   17208:	mov	r1, r7
   1720c:	mov	r0, r5
   17210:	str	r4, [r3]
   17214:	bl	16e80 <flatcc_builder_table_add_offset@@Base>
   17218:	cmp	r0, #0
   1721c:	movne	r4, #0
   17220:	strne	r6, [r0]
   17224:	bne	171d4 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   17228:	ldr	r3, [pc, #152]	; 172c8 <flatcc_builder_table_add_union_vector@@Base+0x150>
   1722c:	movw	r2, #1544	; 0x608
   17230:	ldr	r1, [pc, #148]	; 172cc <flatcc_builder_table_add_union_vector@@Base+0x154>
   17234:	ldr	r0, [pc, #148]	; 172d0 <flatcc_builder_table_add_union_vector@@Base+0x158>
   17238:	add	r3, pc, r3
   1723c:	add	r3, r3, #1248	; 0x4e0
   17240:	add	r1, pc, r1
   17244:	add	r3, r3, #12
   17248:	add	r0, pc, r0
   1724c:	bl	12324 <__assert_fail@plt>
   17250:	ldr	r3, [pc, #124]	; 172d4 <flatcc_builder_table_add_union_vector@@Base+0x15c>
   17254:	mov	r2, #1536	; 0x600
   17258:	ldr	r1, [pc, #120]	; 172d8 <flatcc_builder_table_add_union_vector@@Base+0x160>
   1725c:	ldr	r0, [pc, #120]	; 172dc <flatcc_builder_table_add_union_vector@@Base+0x164>
   17260:	add	r3, pc, r3
   17264:	add	r3, r3, #1248	; 0x4e0
   17268:	add	r1, pc, r1
   1726c:	add	r3, r3, #12
   17270:	add	r0, pc, r0
   17274:	bl	12324 <__assert_fail@plt>
   17278:	ldr	r3, [pc, #96]	; 172e0 <flatcc_builder_table_add_union_vector@@Base+0x168>
   1727c:	movw	r2, #1537	; 0x601
   17280:	ldr	r1, [pc, #92]	; 172e4 <flatcc_builder_table_add_union_vector@@Base+0x16c>
   17284:	ldr	r0, [pc, #92]	; 172e8 <flatcc_builder_table_add_union_vector@@Base+0x170>
   17288:	add	r3, pc, r3
   1728c:	add	r3, r3, #1248	; 0x4e0
   17290:	add	r1, pc, r1
   17294:	add	r3, r3, #12
   17298:	add	r0, pc, r0
   1729c:	bl	12324 <__assert_fail@plt>
   172a0:	ldr	r3, [pc, #68]	; 172ec <flatcc_builder_table_add_union_vector@@Base+0x174>
   172a4:	movw	r2, #1540	; 0x604
   172a8:	ldr	r1, [pc, #64]	; 172f0 <flatcc_builder_table_add_union_vector@@Base+0x178>
   172ac:	ldr	r0, [pc, #64]	; 172f4 <flatcc_builder_table_add_union_vector@@Base+0x17c>
   172b0:	add	r3, pc, r3
   172b4:	add	r3, r3, #1248	; 0x4e0
   172b8:	add	r1, pc, r1
   172bc:	add	r3, r3, #12
   172c0:	add	r0, pc, r0
   172c4:	bl	12324 <__assert_fail@plt>
   172c8:	andeq	r2, r0, r4, ror #9
   172cc:	andeq	r2, r0, ip, lsr #24
   172d0:	andeq	r3, r0, r0
   172d4:			; <UNDEFINED> instruction: 0x000024bc
   172d8:	andeq	r2, r0, r4, lsl #24
   172dc:	ldrdeq	r2, [r0], -r8
   172e0:	muleq	r0, r4, r4
   172e4:	ldrdeq	r2, [r0], -ip
   172e8:	andeq	r2, r0, r8, asr #31
   172ec:	andeq	r2, r0, ip, ror #8
   172f0:			; <UNDEFINED> instruction: 0x00002bb4
   172f4:	andeq	r2, r0, r8, lsl #31

000172f8 <flatcc_builder_push_buffer_alignment@@Base>:
   172f8:	mov	r3, r0
   172fc:	mov	r2, #4
   17300:	ldrh	r0, [r0, #128]	; 0x80
   17304:	strh	r2, [r3, #128]	; 0x80
   17308:	bx	lr

0001730c <flatcc_builder_pop_buffer_alignment@@Base>:
   1730c:	ldrh	r3, [r0, #128]	; 0x80
   17310:	cmp	r3, r1
   17314:	strhcc	r1, [r0, #128]	; 0x80
   17318:	bx	lr

0001731c <flatcc_builder_get_buffer_alignment@@Base>:
   1731c:	ldrh	r0, [r0, #128]	; 0x80
   17320:	bx	lr

00017324 <flatcc_builder_set_vtable_clustering@@Base>:
   17324:	clz	r1, r1
   17328:	lsr	r1, r1, #5
   1732c:	str	r1, [r0, #180]	; 0xb4
   17330:	bx	lr

00017334 <flatcc_builder_set_block_align@@Base>:
   17334:	strh	r1, [r0, #132]	; 0x84
   17338:	bx	lr

0001733c <flatcc_builder_get_level@@Base>:
   1733c:	ldr	r0, [r0, #156]	; 0x9c
   17340:	bx	lr

00017344 <flatcc_builder_set_max_level@@Base>:
   17344:	ldr	r3, [r0, #160]	; 0xa0
   17348:	str	r1, [r0, #176]	; 0xb0
   1734c:	cmp	r3, r1
   17350:	strlt	r1, [r0, #160]	; 0xa0
   17354:	bx	lr

00017358 <flatcc_builder_get_buffer_size@@Base>:
   17358:	ldr	r3, [r0, #136]	; 0x88
   1735c:	ldr	r0, [r0, #140]	; 0x8c
   17360:	sub	r0, r0, r3
   17364:	bx	lr

00017368 <flatcc_builder_get_buffer_start@@Base>:
   17368:	ldr	r0, [r0, #136]	; 0x88
   1736c:	bx	lr

00017370 <flatcc_builder_get_buffer_end@@Base>:
   17370:	ldr	r0, [r0, #140]	; 0x8c
   17374:	bx	lr

00017378 <flatcc_builder_set_vtable_cache_limit@@Base>:
   17378:	str	r1, [r0, #172]	; 0xac
   1737c:	bx	lr

00017380 <flatcc_builder_set_identifier@@Base>:
   17380:	ldr	r3, [pc, #40]	; 173b0 <flatcc_builder_set_identifier@@Base+0x30>
   17384:	cmp	r1, #0
   17388:	add	r3, pc, r3
   1738c:	beq	1739c <flatcc_builder_set_identifier@@Base+0x1c>
   17390:	ldr	r3, [r1]
   17394:	str	r3, [r0, #168]	; 0xa8
   17398:	bx	lr
   1739c:	ldr	r2, [pc, #16]	; 173b4 <flatcc_builder_set_identifier@@Base+0x34>
   173a0:	ldr	r1, [r3, r2]
   173a4:	ldr	r3, [r1]
   173a8:	str	r3, [r0, #168]	; 0xa8
   173ac:	bx	lr
   173b0:	andeq	r3, r1, r0, ror ip
   173b4:	andeq	r0, r0, r4, asr #32

000173b8 <flatcc_builder_get_type@@Base>:
   173b8:	ldr	r0, [r0, #32]
   173bc:	cmp	r0, #0
   173c0:	ldrhne	r0, [r0, #14]
   173c4:	bx	lr

000173c8 <flatcc_builder_get_type_at@@Base>:
   173c8:	cmp	r1, #0
   173cc:	ble	173f4 <flatcc_builder_get_type_at@@Base+0x2c>
   173d0:	ldr	r3, [r0, #156]	; 0x9c
   173d4:	cmp	r3, r1
   173d8:	blt	173f4 <flatcc_builder_get_type_at@@Base+0x2c>
   173dc:	ldr	r2, [r0, #32]
   173e0:	sub	r1, r1, r3
   173e4:	add	r1, r1, r1, lsl #3
   173e8:	add	r1, r2, r1, lsl #2
   173ec:	ldrh	r0, [r1, #14]
   173f0:	bx	lr
   173f4:	mov	r0, #0
   173f8:	bx	lr

000173fc <flatcc_builder_get_direct_buffer@@Base>:
   173fc:	ldr	r3, [r0, #184]	; 0xb8
   17400:	cmp	r3, #0
   17404:	bne	17420 <flatcc_builder_get_direct_buffer@@Base+0x24>
   17408:	cmp	r1, #0
   1740c:	movne	r3, #0
   17410:	movne	r0, r3
   17414:	moveq	r0, r1
   17418:	strne	r3, [r1]
   1741c:	bx	lr
   17420:	ldrd	r2, [r0, #188]	; 0xbc
   17424:	cmp	r2, r3
   17428:	bne	17408 <flatcc_builder_get_direct_buffer@@Base+0xc>
   1742c:	cmp	r1, #0
   17430:	ldrne	r3, [r0, #212]	; 0xd4
   17434:	ldr	r0, [r0, #196]	; 0xc4
   17438:	strne	r3, [r1]
   1743c:	bx	lr

00017440 <flatcc_builder_copy_buffer@@Base>:
   17440:	ldr	r3, [r0, #184]	; 0xb8
   17444:	cmp	r3, #0
   17448:	beq	17470 <flatcc_builder_copy_buffer@@Base+0x30>
   1744c:	add	r0, r0, #188	; 0xbc
   17450:	str	r4, [sp, #-8]!
   17454:	str	lr, [sp, #4]
   17458:	bl	17bd4 <flatcc_emitter_copy_buffer@@Base>
   1745c:	cmp	r0, #0
   17460:	beq	17478 <flatcc_builder_copy_buffer@@Base+0x38>
   17464:	ldr	r4, [sp]
   17468:	add	sp, sp, #4
   1746c:	pop	{pc}		; (ldr pc, [sp], #4)
   17470:	mov	r0, r3
   17474:	bx	lr
   17478:	ldr	r3, [pc, #32]	; 174a0 <flatcc_builder_copy_buffer@@Base+0x60>
   1747c:	movw	r2, #1926	; 0x786
   17480:	ldr	r1, [pc, #28]	; 174a4 <flatcc_builder_copy_buffer@@Base+0x64>
   17484:	ldr	r0, [pc, #28]	; 174a8 <flatcc_builder_copy_buffer@@Base+0x68>
   17488:	add	r3, pc, r3
   1748c:	add	r3, r3, #1296	; 0x510
   17490:	add	r1, pc, r1
   17494:	add	r3, r3, #4
   17498:	add	r0, pc, r0
   1749c:	bl	12324 <__assert_fail@plt>
   174a0:	muleq	r0, r4, r2
   174a4:	ldrdeq	r2, [r0], -ip
   174a8:	strdeq	r2, [r0], -r0

000174ac <flatcc_builder_finalize_buffer@@Base>:
   174ac:	strd	r4, [sp, #-16]!
   174b0:	mov	r5, r1
   174b4:	str	r6, [sp, #8]
   174b8:	mov	r6, r0
   174bc:	str	lr, [sp, #12]
   174c0:	bl	17358 <flatcc_builder_get_buffer_size@@Base>
   174c4:	cmp	r5, #0
   174c8:	mov	r4, r0
   174cc:	strne	r0, [r5]
   174d0:	bl	122b8 <malloc@plt>
   174d4:	subs	r5, r0, #0
   174d8:	beq	17508 <flatcc_builder_finalize_buffer@@Base+0x5c>
   174dc:	mov	r2, r4
   174e0:	mov	r0, r6
   174e4:	mov	r1, r5
   174e8:	bl	17440 <flatcc_builder_copy_buffer@@Base>
   174ec:	cmp	r0, #0
   174f0:	beq	1752c <flatcc_builder_finalize_buffer@@Base+0x80>
   174f4:	mov	r0, r5
   174f8:	ldrd	r4, [sp]
   174fc:	ldr	r6, [sp, #8]
   17500:	add	sp, sp, #12
   17504:	pop	{pc}		; (ldr pc, [sp], #4)
   17508:	ldr	r3, [pc, #64]	; 17550 <flatcc_builder_finalize_buffer@@Base+0xa4>
   1750c:	movw	r2, #1944	; 0x798
   17510:	ldr	r1, [pc, #60]	; 17554 <flatcc_builder_finalize_buffer@@Base+0xa8>
   17514:	ldr	r0, [pc, #60]	; 17558 <flatcc_builder_finalize_buffer@@Base+0xac>
   17518:	add	r3, pc, r3
   1751c:	add	r3, r3, #1328	; 0x530
   17520:	add	r1, pc, r1
   17524:	add	r0, pc, r0
   17528:	bl	12324 <__assert_fail@plt>
   1752c:	ldr	r3, [pc, #40]	; 1755c <flatcc_builder_finalize_buffer@@Base+0xb0>
   17530:	movw	r2, #1948	; 0x79c
   17534:	ldr	r1, [pc, #36]	; 17560 <flatcc_builder_finalize_buffer@@Base+0xb4>
   17538:	ldr	r0, [pc, #36]	; 17564 <flatcc_builder_finalize_buffer@@Base+0xb8>
   1753c:	add	r3, pc, r3
   17540:	add	r3, r3, #1328	; 0x530
   17544:	add	r1, pc, r1
   17548:	add	r0, pc, r0
   1754c:	bl	12324 <__assert_fail@plt>
   17550:	andeq	r2, r0, r4, lsl #4
   17554:	andeq	r2, r0, ip, asr #18
   17558:	ldrdeq	r2, [r0], -r0
   1755c:	andeq	r2, r0, r0, ror #3
   17560:	andeq	r2, r0, r8, lsr #18
   17564:	andeq	r2, r0, ip, lsr #19

00017568 <flatcc_builder_finalize_aligned_buffer@@Base>:
   17568:	strd	r4, [sp, #-20]!	; 0xffffffec
   1756c:	mov	r5, r1
   17570:	strd	r6, [sp, #8]
   17574:	mov	r6, r0
   17578:	str	lr, [sp, #16]
   1757c:	sub	sp, sp, #12
   17580:	bl	17358 <flatcc_builder_get_buffer_size@@Base>
   17584:	cmp	r5, #0
   17588:	mov	r4, r0
   1758c:	sub	r4, r4, #1
   17590:	strne	r0, [r5]
   17594:	mov	r0, r6
   17598:	bl	1731c <flatcc_builder_get_buffer_alignment@@Base>
   1759c:	rsb	r3, r0, #0
   175a0:	add	r4, r4, r0
   175a4:	cmp	r0, #4
   175a8:	and	r4, r4, r3
   175ac:	mov	r3, #0
   175b0:	movcs	r1, r0
   175b4:	movcc	r1, #4
   175b8:	mov	r2, r4
   175bc:	add	r0, sp, #4
   175c0:	str	r3, [sp, #4]
   175c4:	bl	122e8 <posix_memalign@plt>
   175c8:	cmp	r0, #0
   175cc:	beq	175f8 <flatcc_builder_finalize_aligned_buffer@@Base+0x90>
   175d0:	ldr	r0, [sp, #4]
   175d4:	cmp	r0, #0
   175d8:	beq	175e0 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   175dc:	bl	12288 <free@plt>
   175e0:	cmp	r5, #0
   175e4:	movne	r3, #0
   175e8:	moveq	r7, r5
   175ec:	movne	r7, r3
   175f0:	strne	r3, [r5]
   175f4:	b	1761c <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
   175f8:	ldr	r7, [sp, #4]
   175fc:	cmp	r7, #0
   17600:	beq	175e0 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   17604:	mov	r2, r4
   17608:	mov	r0, r6
   1760c:	mov	r1, r7
   17610:	bl	17440 <flatcc_builder_copy_buffer@@Base>
   17614:	cmp	r0, #0
   17618:	beq	17634 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   1761c:	mov	r0, r7
   17620:	add	sp, sp, #12
   17624:	ldrd	r4, [sp]
   17628:	ldrd	r6, [sp, #8]
   1762c:	add	sp, sp, #16
   17630:	pop	{pc}		; (ldr pc, [sp], #4)
   17634:	mov	r0, r7
   17638:	b	175dc <flatcc_builder_finalize_aligned_buffer@@Base+0x74>

0001763c <flatcc_builder_aligned_alloc@@Base>:
   1763c:	cmp	r0, #4
   17640:	str	r4, [sp, #-8]!
   17644:	mov	r4, #0
   17648:	str	lr, [sp, #4]
   1764c:	sub	sp, sp, #8
   17650:	mov	r2, r1
   17654:	movcs	r1, r0
   17658:	movcc	r1, #4
   1765c:	add	r0, sp, #4
   17660:	str	r4, [sp, #4]
   17664:	bl	122e8 <posix_memalign@plt>
   17668:	cmp	r0, r4
   1766c:	ldr	r0, [sp, #4]
   17670:	beq	17684 <flatcc_builder_aligned_alloc@@Base+0x48>
   17674:	cmp	r0, #0
   17678:	beq	17684 <flatcc_builder_aligned_alloc@@Base+0x48>
   1767c:	bl	12288 <free@plt>
   17680:	mov	r0, r4
   17684:	add	sp, sp, #8
   17688:	ldr	r4, [sp]
   1768c:	add	sp, sp, #4
   17690:	pop	{pc}		; (ldr pc, [sp], #4)

00017694 <flatcc_builder_aligned_free@@Base>:
   17694:	b	12288 <free@plt>

00017698 <flatcc_builder_get_emit_context@@Base>:
   17698:	ldr	r0, [r0, #36]	; 0x24
   1769c:	bx	lr

000176a0 <flatcc_emitter_recycle_page@@Base>:
   176a0:	ldr	r3, [r0]
   176a4:	cmp	r3, r1
   176a8:	beq	176ec <flatcc_emitter_recycle_page@@Base+0x4c>
   176ac:	ldr	r2, [r0, #4]
   176b0:	cmp	r2, r1
   176b4:	beq	176ec <flatcc_emitter_recycle_page@@Base+0x4c>
   176b8:	push	{lr}		; (str lr, [sp, #-4]!)
   176bc:	mov	r0, #0
   176c0:	ldr	lr, [r1, #2944]	; 0xb80
   176c4:	ldr	ip, [r1, #2948]	; 0xb84
   176c8:	str	ip, [lr, #2948]	; 0xb84
   176cc:	ldr	r2, [r3, #2948]	; 0xb84
   176d0:	str	lr, [ip, #2944]	; 0xb80
   176d4:	str	r3, [r1, #2944]	; 0xb80
   176d8:	str	r2, [r1, #2948]	; 0xb84
   176dc:	str	r1, [r2, #2944]	; 0xb80
   176e0:	ldr	r3, [r1, #2944]	; 0xb80
   176e4:	str	r1, [r3, #2948]	; 0xb84
   176e8:	pop	{pc}		; (ldr pc, [sp], #4)
   176ec:	mvn	r0, #0
   176f0:	bx	lr

000176f4 <flatcc_emitter_reset@@Base>:
   176f4:	ldr	r2, [r0]
   176f8:	cmp	r2, #0
   176fc:	bxeq	lr
   17700:	strd	r4, [sp, #-16]!
   17704:	movw	ip, #64064	; 0xfa40
   17708:	movt	ip, #65535	; 0xffff
   1770c:	ldr	r1, [r0, #24]
   17710:	add	r4, r2, #1472	; 0x5c0
   17714:	ldr	r3, [r0, #32]
   17718:	ldr	r5, [r0, #28]
   1771c:	str	r6, [sp, #8]
   17720:	str	lr, [sp, #12]
   17724:	mov	lr, #1472	; 0x5c0
   17728:	cmp	r3, #0
   1772c:	stmib	r0, {r2, r4}
   17730:	moveq	r3, r1
   17734:	lsr	r1, r1, #2
   17738:	str	lr, [r0, #12]
   1773c:	add	r3, r3, r3, lsl #1
   17740:	str	r4, [r0, #16]
   17744:	str	lr, [r0, #20]
   17748:	add	r3, r1, r3, lsr #2
   1774c:	str	ip, [r2, #2952]	; 0xb88
   17750:	mov	ip, #0
   17754:	cmp	r5, r3, lsl #1
   17758:	str	ip, [r0, #24]
   1775c:	str	r3, [r0, #32]
   17760:	bls	177b8 <flatcc_emitter_reset@@Base+0xc4>
   17764:	ldr	r3, [r2, #2944]	; 0xb80
   17768:	mov	r4, r0
   1776c:	cmp	r2, r3
   17770:	bne	17788 <flatcc_emitter_reset@@Base+0x94>
   17774:	b	177b8 <flatcc_emitter_reset@@Base+0xc4>
   17778:	ldm	r4, {r1, r2}
   1777c:	ldr	r3, [r2, #2944]	; 0xb80
   17780:	cmp	r3, r1
   17784:	beq	177b8 <flatcc_emitter_reset@@Base+0xc4>
   17788:	ldr	r1, [r3, #2944]	; 0xb80
   1778c:	mov	r0, r3
   17790:	str	r1, [r2, #2944]	; 0xb80
   17794:	ldr	r3, [r3, #2944]	; 0xb80
   17798:	str	r2, [r3, #2948]	; 0xb84
   1779c:	bl	12288 <free@plt>
   177a0:	ldr	r3, [r4, #28]
   177a4:	ldr	r2, [r4, #32]
   177a8:	sub	r3, r3, #2944	; 0xb80
   177ac:	cmp	r3, r2, lsl #1
   177b0:	str	r3, [r4, #28]
   177b4:	bhi	17778 <flatcc_emitter_reset@@Base+0x84>
   177b8:	ldrd	r4, [sp]
   177bc:	ldr	r6, [sp, #8]
   177c0:	add	sp, sp, #12
   177c4:	pop	{pc}		; (ldr pc, [sp], #4)

000177c8 <flatcc_emitter_clear@@Base>:
   177c8:	ldr	r3, [r0]
   177cc:	cmp	r3, #0
   177d0:	bxeq	lr
   177d4:	mov	r1, #0
   177d8:	strd	r4, [sp, #-16]!
   177dc:	mov	r5, r0
   177e0:	ldr	r2, [r3, #2948]	; 0xb84
   177e4:	str	r6, [sp, #8]
   177e8:	str	lr, [sp, #12]
   177ec:	str	r1, [r2, #2944]	; 0xb80
   177f0:	ldr	r4, [r3, #2944]	; 0xb80
   177f4:	cmp	r4, r1
   177f8:	bne	17804 <flatcc_emitter_clear@@Base+0x3c>
   177fc:	b	17840 <flatcc_emitter_clear@@Base+0x78>
   17800:	mov	r4, r3
   17804:	ldr	r0, [r4, #2948]	; 0xb84
   17808:	bl	12288 <free@plt>
   1780c:	ldr	r3, [r4, #2944]	; 0xb80
   17810:	cmp	r3, #0
   17814:	bne	17800 <flatcc_emitter_clear@@Base+0x38>
   17818:	mov	r0, r4
   1781c:	bl	12288 <free@plt>
   17820:	mov	r0, r5
   17824:	mov	r2, #36	; 0x24
   17828:	ldrd	r4, [sp]
   1782c:	mov	r1, #0
   17830:	ldr	r6, [sp, #8]
   17834:	ldr	lr, [sp, #12]
   17838:	add	sp, sp, #16
   1783c:	b	122f4 <memset@plt>
   17840:	mov	r4, r3
   17844:	b	17818 <flatcc_emitter_clear@@Base+0x50>

00017848 <flatcc_emitter@@Base>:
   17848:	cmp	r3, #0
   1784c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17850:	mov	r4, r0
   17854:	ldr	r3, [r0, #24]
   17858:	strd	r6, [sp, #8]
   1785c:	strd	r8, [sp, #16]
   17860:	sub	r8, r2, #1
   17864:	strd	sl, [sp, #24]
   17868:	str	lr, [sp, #32]
   1786c:	sub	sp, sp, #12
   17870:	ldr	r0, [sp, #48]	; 0x30
   17874:	add	r3, r3, r0
   17878:	str	r3, [r4, #24]
   1787c:	blt	17a4c <flatcc_emitter@@Base+0x204>
   17880:	ldr	r3, [r4, #20]
   17884:	cmp	r3, r0
   17888:	bcs	17928 <flatcc_emitter@@Base+0xe0>
   1788c:	cmp	r2, #0
   17890:	beq	17908 <flatcc_emitter@@Base+0xc0>
   17894:	mov	r8, r2
   17898:	add	r5, r1, #8
   1789c:	movw	r2, #64064	; 0xfa40
   178a0:	movt	r2, #65535	; 0xffff
   178a4:	str	r2, [sp, #4]
   178a8:	ldmdb	r5, {r7, fp}
   178ac:	cmp	fp, #0
   178b0:	beq	178fc <flatcc_emitter@@Base+0xb4>
   178b4:	mov	r9, #1472	; 0x5c0
   178b8:	cmp	fp, r3
   178bc:	mov	r6, r3
   178c0:	bls	179b8 <flatcc_emitter@@Base+0x170>
   178c4:	cmp	r3, #0
   178c8:	subne	fp, fp, r3
   178cc:	beq	17970 <flatcc_emitter@@Base+0x128>
   178d0:	mov	r2, r6
   178d4:	mov	r1, r7
   178d8:	ldr	r0, [r4, #16]
   178dc:	bl	12294 <memcpy@plt>
   178e0:	ldrd	r2, [r4, #16]
   178e4:	cmp	fp, #0
   178e8:	add	r7, r7, r6
   178ec:	add	r2, r2, r6
   178f0:	sub	r3, r3, r6
   178f4:	strd	r2, [r4, #16]
   178f8:	bne	178b8 <flatcc_emitter@@Base+0x70>
   178fc:	subs	r8, r8, #1
   17900:	add	r5, r5, #8
   17904:	bne	178a8 <flatcc_emitter@@Base+0x60>
   17908:	mov	r0, #0
   1790c:	add	sp, sp, #12
   17910:	ldrd	r4, [sp]
   17914:	ldrd	r6, [sp, #8]
   17918:	ldrd	r8, [sp, #16]
   1791c:	ldrd	sl, [sp, #24]
   17920:	add	sp, sp, #32
   17924:	pop	{pc}		; (ldr pc, [sp], #4)
   17928:	ldr	r7, [r4, #16]
   1792c:	sub	r3, r3, r0
   17930:	str	r3, [r4, #20]
   17934:	add	r0, r7, r0
   17938:	str	r0, [r4, #16]
   1793c:	cmp	r2, #0
   17940:	addne	r4, r1, #8
   17944:	beq	17908 <flatcc_emitter@@Base+0xc0>
   17948:	mov	r0, r7
   1794c:	ldmdb	r4, {r1, r2}
   17950:	sub	r8, r8, #1
   17954:	bl	12294 <memcpy@plt>
   17958:	ldr	r3, [r4, #-4]
   1795c:	cmn	r8, #1
   17960:	add	r4, r4, #8
   17964:	add	r7, r7, r3
   17968:	bne	17948 <flatcc_emitter@@Base+0x100>
   1796c:	b	17908 <flatcc_emitter@@Base+0xc0>
   17970:	ldr	r6, [r4, #4]
   17974:	cmp	r6, #0
   17978:	beq	179f8 <flatcc_emitter@@Base+0x1b0>
   1797c:	ldr	sl, [r4]
   17980:	ldr	r0, [r6, #2944]	; 0xb80
   17984:	cmp	r0, sl
   17988:	beq	179c4 <flatcc_emitter@@Base+0x17c>
   1798c:	str	r0, [r4, #4]
   17990:	ldr	r2, [r0, #2948]	; 0xb84
   17994:	mov	r3, #2944	; 0xb80
   17998:	cmp	fp, r3
   1799c:	mov	r6, r3
   179a0:	ldr	r2, [r2, #2952]	; 0xb88
   179a4:	str	r0, [r4, #16]
   179a8:	str	r3, [r4, #20]
   179ac:	add	r2, r2, r3
   179b0:	str	r2, [r0, #2952]	; 0xb88
   179b4:	bhi	178c4 <flatcc_emitter@@Base+0x7c>
   179b8:	mov	r6, fp
   179bc:	mov	fp, #0
   179c0:	b	178d0 <flatcc_emitter@@Base+0x88>
   179c4:	movw	r0, #2956	; 0xb8c
   179c8:	bl	122b8 <malloc@plt>
   179cc:	cmp	r0, #0
   179d0:	beq	17a44 <flatcc_emitter@@Base+0x1fc>
   179d4:	ldr	r2, [r4, #28]
   179d8:	str	sl, [r0, #2944]	; 0xb80
   179dc:	str	r6, [r0, #2948]	; 0xb84
   179e0:	add	r2, r2, #2944	; 0xb80
   179e4:	str	r2, [r4, #28]
   179e8:	str	r0, [sl, #2948]	; 0xb84
   179ec:	str	r0, [r6, #2944]	; 0xb80
   179f0:	str	r0, [r4, #4]
   179f4:	b	17990 <flatcc_emitter@@Base+0x148>
   179f8:	movw	r0, #2956	; 0xb8c
   179fc:	bl	122b8 <malloc@plt>
   17a00:	cmp	r0, #0
   17a04:	beq	17a44 <flatcc_emitter@@Base+0x1fc>
   17a08:	ldr	r2, [r4, #28]
   17a0c:	add	r1, r0, #1472	; 0x5c0
   17a10:	mov	r3, #1472	; 0x5c0
   17a14:	str	r0, [r4]
   17a18:	strd	r0, [r4, #4]
   17a1c:	str	r9, [r4, #12]
   17a20:	str	r1, [r4, #16]
   17a24:	add	r2, r2, #2944	; 0xb80
   17a28:	str	r9, [r4, #20]
   17a2c:	str	r0, [r0, #2944]	; 0xb80
   17a30:	str	r2, [r4, #28]
   17a34:	ldr	r2, [sp, #4]
   17a38:	str	r0, [r0, #2948]	; 0xb84
   17a3c:	str	r2, [r0, #2952]	; 0xb88
   17a40:	b	178b8 <flatcc_emitter@@Base+0x70>
   17a44:	mvn	r0, #0
   17a48:	b	1790c <flatcc_emitter@@Base+0xc4>
   17a4c:	ldr	r3, [r4, #12]
   17a50:	cmp	r3, r0
   17a54:	bcs	17bbc <flatcc_emitter@@Base+0x374>
   17a58:	add	r5, r1, r2, lsl #3
   17a5c:	movw	r3, #64064	; 0xfa40
   17a60:	movt	r3, #65535	; 0xffff
   17a64:	str	r3, [sp, #4]
   17a68:	cmn	r8, #1
   17a6c:	beq	17908 <flatcc_emitter@@Base+0xc0>
   17a70:	ldr	r7, [r5, #-8]
   17a74:	ldr	r6, [r5, #-4]
   17a78:	cmp	r6, #0
   17a7c:	add	r7, r7, r6
   17a80:	beq	17ad0 <flatcc_emitter@@Base+0x288>
   17a84:	mov	r9, #1472	; 0x5c0
   17a88:	ldr	r2, [r4, #12]
   17a8c:	cmp	r2, r6
   17a90:	bcs	17b34 <flatcc_emitter@@Base+0x2ec>
   17a94:	cmp	r2, #0
   17a98:	beq	17adc <flatcc_emitter@@Base+0x294>
   17a9c:	sub	r6, r6, r2
   17aa0:	mov	r1, #0
   17aa4:	ldr	r3, [r4, #8]
   17aa8:	rsb	r0, r2, #0
   17aac:	add	r7, r7, r0
   17ab0:	str	r1, [r4, #12]
   17ab4:	mov	r1, r7
   17ab8:	add	r3, r3, r0
   17abc:	mov	r0, r3
   17ac0:	str	r3, [r4, #8]
   17ac4:	bl	12294 <memcpy@plt>
   17ac8:	cmp	r6, #0
   17acc:	bne	17a88 <flatcc_emitter@@Base+0x240>
   17ad0:	sub	r5, r5, #8
   17ad4:	sub	r8, r8, #1
   17ad8:	b	17a68 <flatcc_emitter@@Base+0x220>
   17adc:	ldr	fp, [r4]
   17ae0:	cmp	fp, #0
   17ae4:	beq	17b78 <flatcc_emitter@@Base+0x330>
   17ae8:	ldr	sl, [r4, #4]
   17aec:	ldr	r0, [fp, #2948]	; 0xb84
   17af0:	cmp	r0, sl
   17af4:	beq	17b44 <flatcc_emitter@@Base+0x2fc>
   17af8:	ldr	r3, [fp, #2952]	; 0xb88
   17afc:	sub	r3, r3, #2944	; 0xb80
   17b00:	str	r3, [r0, #2952]	; 0xb88
   17b04:	str	r0, [r4]
   17b08:	ldr	r3, [r0, #2944]	; 0xb80
   17b0c:	mov	r2, #2944	; 0xb80
   17b10:	add	r1, r0, #2944	; 0xb80
   17b14:	ldr	r3, [r3, #2952]	; 0xb88
   17b18:	str	r1, [r4, #8]
   17b1c:	str	r2, [r4, #12]
   17b20:	sub	r3, r3, #2944	; 0xb80
   17b24:	str	r3, [r0, #2952]	; 0xb88
   17b28:	ldr	r2, [r4, #12]
   17b2c:	cmp	r2, r6
   17b30:	bcc	17a94 <flatcc_emitter@@Base+0x24c>
   17b34:	sub	r1, r2, r6
   17b38:	mov	r2, r6
   17b3c:	mov	r6, #0
   17b40:	b	17aa4 <flatcc_emitter@@Base+0x25c>
   17b44:	movw	r0, #2956	; 0xb8c
   17b48:	bl	122b8 <malloc@plt>
   17b4c:	cmp	r0, #0
   17b50:	beq	17a44 <flatcc_emitter@@Base+0x1fc>
   17b54:	ldr	r2, [r4, #28]
   17b58:	str	fp, [r0, #2944]	; 0xb80
   17b5c:	str	sl, [r0, #2948]	; 0xb84
   17b60:	add	r2, r2, #2944	; 0xb80
   17b64:	str	r2, [r4, #28]
   17b68:	str	r0, [fp, #2948]	; 0xb84
   17b6c:	str	r0, [sl, #2944]	; 0xb80
   17b70:	str	r0, [r4]
   17b74:	b	17b08 <flatcc_emitter@@Base+0x2c0>
   17b78:	movw	r0, #2956	; 0xb8c
   17b7c:	bl	122b8 <malloc@plt>
   17b80:	cmp	r0, #0
   17b84:	beq	17a44 <flatcc_emitter@@Base+0x1fc>
   17b88:	ldr	r3, [r4, #28]
   17b8c:	add	r2, r0, #1472	; 0x5c0
   17b90:	str	r0, [r4]
   17b94:	stmib	r4, {r0, r2, r9}
   17b98:	add	r3, r3, #2944	; 0xb80
   17b9c:	str	r2, [r4, #16]
   17ba0:	str	r9, [r4, #20]
   17ba4:	str	r3, [r4, #28]
   17ba8:	ldr	r3, [sp, #4]
   17bac:	str	r0, [r0, #2944]	; 0xb80
   17bb0:	str	r0, [r0, #2948]	; 0xb84
   17bb4:	str	r3, [r0, #2952]	; 0xb88
   17bb8:	b	17a88 <flatcc_emitter@@Base+0x240>
   17bbc:	ldr	r7, [r4, #8]
   17bc0:	sub	r3, r3, r0
   17bc4:	str	r3, [r4, #12]
   17bc8:	sub	r7, r7, r0
   17bcc:	str	r7, [r4, #8]
   17bd0:	b	1793c <flatcc_emitter@@Base+0xf4>

00017bd4 <flatcc_emitter_copy_buffer@@Base>:
   17bd4:	ldr	r3, [r0, #24]
   17bd8:	strd	r4, [sp, #-16]!
   17bdc:	str	r6, [sp, #8]
   17be0:	str	lr, [sp, #12]
   17be4:	cmp	r3, r2
   17be8:	movhi	r5, #0
   17bec:	bhi	17c6c <flatcc_emitter_copy_buffer@@Base+0x98>
   17bf0:	ldr	r5, [r0]
   17bf4:	mov	r6, r0
   17bf8:	cmp	r5, #0
   17bfc:	beq	17c6c <flatcc_emitter_copy_buffer@@Base+0x98>
   17c00:	ldr	r2, [r6, #4]
   17c04:	mov	r0, r1
   17c08:	ldr	r1, [r6, #8]
   17c0c:	cmp	r5, r2
   17c10:	beq	17c80 <flatcc_emitter_copy_buffer@@Base+0xac>
   17c14:	ldr	r2, [r6, #12]
   17c18:	rsb	r2, r2, #2944	; 0xb80
   17c1c:	add	r5, r0, r2
   17c20:	bl	12294 <memcpy@plt>
   17c24:	ldrd	r2, [r6]
   17c28:	ldr	r4, [r2, #2944]	; 0xb80
   17c2c:	cmp	r4, r3
   17c30:	beq	17c58 <flatcc_emitter_copy_buffer@@Base+0x84>
   17c34:	mov	r2, #2944	; 0xb80
   17c38:	mov	r1, r4
   17c3c:	mov	r0, r5
   17c40:	add	r5, r5, r2
   17c44:	bl	12294 <memcpy@plt>
   17c48:	ldr	r3, [r6, #4]
   17c4c:	ldr	r4, [r4, #2944]	; 0xb80
   17c50:	cmp	r3, r4
   17c54:	bne	17c34 <flatcc_emitter_copy_buffer@@Base+0x60>
   17c58:	ldr	r2, [r6, #20]
   17c5c:	mov	r1, r4
   17c60:	mov	r0, r5
   17c64:	rsb	r2, r2, #2944	; 0xb80
   17c68:	bl	12294 <memcpy@plt>
   17c6c:	mov	r0, r5
   17c70:	ldrd	r4, [sp]
   17c74:	ldr	r6, [sp, #8]
   17c78:	add	sp, sp, #12
   17c7c:	pop	{pc}		; (ldr pc, [sp], #4)
   17c80:	mov	r2, r3
   17c84:	mov	r5, r0
   17c88:	bl	12294 <memcpy@plt>
   17c8c:	b	17c6c <flatcc_emitter_copy_buffer@@Base+0x98>

00017c90 <flatcc_verify_error_string@@Base>:
   17c90:	cmp	r0, #36	; 0x24
   17c94:	addls	pc, pc, r0, lsl #2
   17c98:	b	17eec <flatcc_verify_error_string@@Base+0x25c>
   17c9c:	b	17d30 <flatcc_verify_error_string@@Base+0xa0>
   17ca0:	b	17ee0 <flatcc_verify_error_string@@Base+0x250>
   17ca4:	b	17ed4 <flatcc_verify_error_string@@Base+0x244>
   17ca8:	b	17ec8 <flatcc_verify_error_string@@Base+0x238>
   17cac:	b	17ebc <flatcc_verify_error_string@@Base+0x22c>
   17cb0:	b	17eb0 <flatcc_verify_error_string@@Base+0x220>
   17cb4:	b	17ea4 <flatcc_verify_error_string@@Base+0x214>
   17cb8:	b	17e98 <flatcc_verify_error_string@@Base+0x208>
   17cbc:	b	17e8c <flatcc_verify_error_string@@Base+0x1fc>
   17cc0:	b	17e80 <flatcc_verify_error_string@@Base+0x1f0>
   17cc4:	b	17e74 <flatcc_verify_error_string@@Base+0x1e4>
   17cc8:	b	17e68 <flatcc_verify_error_string@@Base+0x1d8>
   17ccc:	b	17e5c <flatcc_verify_error_string@@Base+0x1cc>
   17cd0:	b	17e50 <flatcc_verify_error_string@@Base+0x1c0>
   17cd4:	b	17e44 <flatcc_verify_error_string@@Base+0x1b4>
   17cd8:	b	17e38 <flatcc_verify_error_string@@Base+0x1a8>
   17cdc:	b	17e2c <flatcc_verify_error_string@@Base+0x19c>
   17ce0:	b	17e20 <flatcc_verify_error_string@@Base+0x190>
   17ce4:	b	17e14 <flatcc_verify_error_string@@Base+0x184>
   17ce8:	b	17e08 <flatcc_verify_error_string@@Base+0x178>
   17cec:	b	17dfc <flatcc_verify_error_string@@Base+0x16c>
   17cf0:	b	17df0 <flatcc_verify_error_string@@Base+0x160>
   17cf4:	b	17de4 <flatcc_verify_error_string@@Base+0x154>
   17cf8:	b	17dd8 <flatcc_verify_error_string@@Base+0x148>
   17cfc:	b	17dcc <flatcc_verify_error_string@@Base+0x13c>
   17d00:	b	17dc0 <flatcc_verify_error_string@@Base+0x130>
   17d04:	b	17db4 <flatcc_verify_error_string@@Base+0x124>
   17d08:	b	17da8 <flatcc_verify_error_string@@Base+0x118>
   17d0c:	b	17d9c <flatcc_verify_error_string@@Base+0x10c>
   17d10:	b	17d90 <flatcc_verify_error_string@@Base+0x100>
   17d14:	b	17d84 <flatcc_verify_error_string@@Base+0xf4>
   17d18:	b	17d78 <flatcc_verify_error_string@@Base+0xe8>
   17d1c:	b	17d6c <flatcc_verify_error_string@@Base+0xdc>
   17d20:	b	17d60 <flatcc_verify_error_string@@Base+0xd0>
   17d24:	b	17d54 <flatcc_verify_error_string@@Base+0xc4>
   17d28:	b	17d48 <flatcc_verify_error_string@@Base+0xb8>
   17d2c:	b	17d3c <flatcc_verify_error_string@@Base+0xac>
   17d30:	ldr	r0, [pc, #448]	; 17ef8 <flatcc_verify_error_string@@Base+0x268>
   17d34:	add	r0, pc, r0
   17d38:	bx	lr
   17d3c:	ldr	r0, [pc, #440]	; 17efc <flatcc_verify_error_string@@Base+0x26c>
   17d40:	add	r0, pc, r0
   17d44:	bx	lr
   17d48:	ldr	r0, [pc, #432]	; 17f00 <flatcc_verify_error_string@@Base+0x270>
   17d4c:	add	r0, pc, r0
   17d50:	bx	lr
   17d54:	ldr	r0, [pc, #424]	; 17f04 <flatcc_verify_error_string@@Base+0x274>
   17d58:	add	r0, pc, r0
   17d5c:	bx	lr
   17d60:	ldr	r0, [pc, #416]	; 17f08 <flatcc_verify_error_string@@Base+0x278>
   17d64:	add	r0, pc, r0
   17d68:	bx	lr
   17d6c:	ldr	r0, [pc, #408]	; 17f0c <flatcc_verify_error_string@@Base+0x27c>
   17d70:	add	r0, pc, r0
   17d74:	bx	lr
   17d78:	ldr	r0, [pc, #400]	; 17f10 <flatcc_verify_error_string@@Base+0x280>
   17d7c:	add	r0, pc, r0
   17d80:	bx	lr
   17d84:	ldr	r0, [pc, #392]	; 17f14 <flatcc_verify_error_string@@Base+0x284>
   17d88:	add	r0, pc, r0
   17d8c:	bx	lr
   17d90:	ldr	r0, [pc, #384]	; 17f18 <flatcc_verify_error_string@@Base+0x288>
   17d94:	add	r0, pc, r0
   17d98:	bx	lr
   17d9c:	ldr	r0, [pc, #376]	; 17f1c <flatcc_verify_error_string@@Base+0x28c>
   17da0:	add	r0, pc, r0
   17da4:	bx	lr
   17da8:	ldr	r0, [pc, #368]	; 17f20 <flatcc_verify_error_string@@Base+0x290>
   17dac:	add	r0, pc, r0
   17db0:	bx	lr
   17db4:	ldr	r0, [pc, #360]	; 17f24 <flatcc_verify_error_string@@Base+0x294>
   17db8:	add	r0, pc, r0
   17dbc:	bx	lr
   17dc0:	ldr	r0, [pc, #352]	; 17f28 <flatcc_verify_error_string@@Base+0x298>
   17dc4:	add	r0, pc, r0
   17dc8:	bx	lr
   17dcc:	ldr	r0, [pc, #344]	; 17f2c <flatcc_verify_error_string@@Base+0x29c>
   17dd0:	add	r0, pc, r0
   17dd4:	bx	lr
   17dd8:	ldr	r0, [pc, #336]	; 17f30 <flatcc_verify_error_string@@Base+0x2a0>
   17ddc:	add	r0, pc, r0
   17de0:	bx	lr
   17de4:	ldr	r0, [pc, #328]	; 17f34 <flatcc_verify_error_string@@Base+0x2a4>
   17de8:	add	r0, pc, r0
   17dec:	bx	lr
   17df0:	ldr	r0, [pc, #320]	; 17f38 <flatcc_verify_error_string@@Base+0x2a8>
   17df4:	add	r0, pc, r0
   17df8:	bx	lr
   17dfc:	ldr	r0, [pc, #312]	; 17f3c <flatcc_verify_error_string@@Base+0x2ac>
   17e00:	add	r0, pc, r0
   17e04:	bx	lr
   17e08:	ldr	r0, [pc, #304]	; 17f40 <flatcc_verify_error_string@@Base+0x2b0>
   17e0c:	add	r0, pc, r0
   17e10:	bx	lr
   17e14:	ldr	r0, [pc, #296]	; 17f44 <flatcc_verify_error_string@@Base+0x2b4>
   17e18:	add	r0, pc, r0
   17e1c:	bx	lr
   17e20:	ldr	r0, [pc, #288]	; 17f48 <flatcc_verify_error_string@@Base+0x2b8>
   17e24:	add	r0, pc, r0
   17e28:	bx	lr
   17e2c:	ldr	r0, [pc, #280]	; 17f4c <flatcc_verify_error_string@@Base+0x2bc>
   17e30:	add	r0, pc, r0
   17e34:	bx	lr
   17e38:	ldr	r0, [pc, #272]	; 17f50 <flatcc_verify_error_string@@Base+0x2c0>
   17e3c:	add	r0, pc, r0
   17e40:	bx	lr
   17e44:	ldr	r0, [pc, #264]	; 17f54 <flatcc_verify_error_string@@Base+0x2c4>
   17e48:	add	r0, pc, r0
   17e4c:	bx	lr
   17e50:	ldr	r0, [pc, #256]	; 17f58 <flatcc_verify_error_string@@Base+0x2c8>
   17e54:	add	r0, pc, r0
   17e58:	bx	lr
   17e5c:	ldr	r0, [pc, #248]	; 17f5c <flatcc_verify_error_string@@Base+0x2cc>
   17e60:	add	r0, pc, r0
   17e64:	bx	lr
   17e68:	ldr	r0, [pc, #240]	; 17f60 <flatcc_verify_error_string@@Base+0x2d0>
   17e6c:	add	r0, pc, r0
   17e70:	bx	lr
   17e74:	ldr	r0, [pc, #232]	; 17f64 <flatcc_verify_error_string@@Base+0x2d4>
   17e78:	add	r0, pc, r0
   17e7c:	bx	lr
   17e80:	ldr	r0, [pc, #224]	; 17f68 <flatcc_verify_error_string@@Base+0x2d8>
   17e84:	add	r0, pc, r0
   17e88:	bx	lr
   17e8c:	ldr	r0, [pc, #216]	; 17f6c <flatcc_verify_error_string@@Base+0x2dc>
   17e90:	add	r0, pc, r0
   17e94:	bx	lr
   17e98:	ldr	r0, [pc, #208]	; 17f70 <flatcc_verify_error_string@@Base+0x2e0>
   17e9c:	add	r0, pc, r0
   17ea0:	bx	lr
   17ea4:	ldr	r0, [pc, #200]	; 17f74 <flatcc_verify_error_string@@Base+0x2e4>
   17ea8:	add	r0, pc, r0
   17eac:	bx	lr
   17eb0:	ldr	r0, [pc, #192]	; 17f78 <flatcc_verify_error_string@@Base+0x2e8>
   17eb4:	add	r0, pc, r0
   17eb8:	bx	lr
   17ebc:	ldr	r0, [pc, #184]	; 17f7c <flatcc_verify_error_string@@Base+0x2ec>
   17ec0:	add	r0, pc, r0
   17ec4:	bx	lr
   17ec8:	ldr	r0, [pc, #176]	; 17f80 <flatcc_verify_error_string@@Base+0x2f0>
   17ecc:	add	r0, pc, r0
   17ed0:	bx	lr
   17ed4:	ldr	r0, [pc, #168]	; 17f84 <flatcc_verify_error_string@@Base+0x2f4>
   17ed8:	add	r0, pc, r0
   17edc:	bx	lr
   17ee0:	ldr	r0, [pc, #160]	; 17f88 <flatcc_verify_error_string@@Base+0x2f8>
   17ee4:	add	r0, pc, r0
   17ee8:	bx	lr
   17eec:	ldr	r0, [pc, #152]	; 17f8c <flatcc_verify_error_string@@Base+0x2fc>
   17ef0:	add	r0, pc, r0
   17ef4:	bx	lr
   17ef8:	andeq	r2, r0, r4, ror #10
   17efc:			; <UNDEFINED> instruction: 0x000029b8
   17f00:	andeq	r2, r0, r4, lsl #19
   17f04:	andeq	r2, r0, r4, asr #18
   17f08:	andeq	r2, r0, r0, lsl r9
   17f0c:	ldrdeq	r2, [r0], -ip
   17f10:			; <UNDEFINED> instruction: 0x000028b8
   17f14:	andeq	r2, r0, r4, lsl #17
   17f18:	andeq	r2, r0, r0, asr r8
   17f1c:	andeq	r2, r0, ip, lsr #16
   17f20:	andeq	r2, r0, r4, lsl #16
   17f24:	andeq	r2, r0, r4, ror #15
   17f28:	andeq	r2, r0, r8, lsr #15
   17f2c:	andeq	r2, r0, r0, ror r7
   17f30:	andeq	r2, r0, r8, lsr r7
   17f34:	strdeq	r2, [r0], -r8
   17f38:	andeq	r2, r0, r0, asr #13
   17f3c:	muleq	r0, ip, r6
   17f40:	andeq	r2, r0, r8, ror #12
   17f44:	andeq	r2, r0, r8, asr #12
   17f48:	andeq	r2, r0, r4, lsl r6
   17f4c:	andeq	r2, r0, r0, ror #11
   17f50:	andeq	r2, r0, ip, lsr #11
   17f54:	andeq	r2, r0, r4, lsl #11
   17f58:	andeq	r2, r0, ip, asr r5
   17f5c:	andeq	r2, r0, r8, lsr r5
   17f60:	andeq	r2, r0, r8, lsl r5
   17f64:	strdeq	r2, [r0], -r4
   17f68:	ldrdeq	r2, [r0], -r4
   17f6c:			; <UNDEFINED> instruction: 0x000024b4
   17f70:	andeq	r2, r0, ip, lsl #9
   17f74:	andeq	r2, r0, r0, ror #8
   17f78:	andeq	r2, r0, r0, lsr r4
   17f7c:	andeq	r2, r0, ip, lsl #8
   17f80:	andeq	r2, r0, r4, ror #7
   17f84:	andeq	r2, r0, r4, asr #7
   17f88:	andeq	r2, r0, r4, lsr #16
   17f8c:	andeq	r2, r0, r0, lsr #7

00017f90 <flatcc_verify_field@@Base>:
   17f90:	ldrh	ip, [r0, #22]
   17f94:	add	r1, r1, #2
   17f98:	lsl	r1, r1, #1
   17f9c:	uxth	r1, r1
   17fa0:	cmp	ip, r1
   17fa4:	bls	17fec <flatcc_verify_field@@Base+0x5c>
   17fa8:	ldr	ip, [r0, #12]
   17fac:	ldrh	r1, [ip, r1]
   17fb0:	cmp	r1, #0
   17fb4:	beq	17fec <flatcc_verify_field@@Base+0x5c>
   17fb8:	ldrh	ip, [r0, #20]
   17fbc:	add	r2, r2, r1
   17fc0:	cmp	r2, ip
   17fc4:	bhi	17ff4 <flatcc_verify_field@@Base+0x64>
   17fc8:	ldr	r2, [r0]
   17fcc:	sub	r3, r3, #1
   17fd0:	ldr	r0, [r0, #16]
   17fd4:	add	r2, r2, r0
   17fd8:	add	r1, r2, r1
   17fdc:	tst	r1, r3
   17fe0:	moveq	r0, #0
   17fe4:	movne	r0, #12
   17fe8:	bx	lr
   17fec:	mov	r0, #0
   17ff0:	bx	lr
   17ff4:	mov	r0, #13
   17ff8:	bx	lr

00017ffc <flatcc_verify_string_field@@Base>:
   17ffc:	ldrh	r3, [r0, #22]
   18000:	add	r1, r1, #2
   18004:	lsl	r1, r1, #1
   18008:	uxth	r1, r1
   1800c:	cmp	r3, r1
   18010:	bls	180ac <flatcc_verify_string_field@@Base+0xb0>
   18014:	ldr	r3, [r0, #12]
   18018:	ldrh	r3, [r3, r1]
   1801c:	cmp	r3, #0
   18020:	beq	180ac <flatcc_verify_string_field@@Base+0xb0>
   18024:	ldrh	r2, [r0, #20]
   18028:	add	r1, r3, #4
   1802c:	cmp	r1, r2
   18030:	bhi	180bc <flatcc_verify_string_field@@Base+0xc0>
   18034:	ldr	r2, [r0, #16]
   18038:	add	r3, r3, r2
   1803c:	tst	r3, #3
   18040:	bne	180c4 <flatcc_verify_string_field@@Base+0xc8>
   18044:	cmp	r3, #0
   18048:	beq	180d4 <flatcc_verify_string_field@@Base+0xd8>
   1804c:	ldr	r1, [r0]
   18050:	ldr	r2, [r1, r3]
   18054:	add	r2, r3, r2
   18058:	cmp	r3, r2
   1805c:	bcs	180a4 <flatcc_verify_string_field@@Base+0xa8>
   18060:	ldr	r3, [r0, #4]
   18064:	add	r0, r2, #4
   18068:	cmp	r3, r0
   1806c:	bcc	180a4 <flatcc_verify_string_field@@Base+0xa8>
   18070:	tst	r2, #3
   18074:	bne	180a4 <flatcc_verify_string_field@@Base+0xa8>
   18078:	ldr	r2, [r1, r2]
   1807c:	sub	r3, r3, r0
   18080:	add	ip, r2, #1
   18084:	cmp	r3, ip
   18088:	bcc	180cc <flatcc_verify_string_field@@Base+0xd0>
   1808c:	add	r1, r1, r0
   18090:	ldrb	r3, [r1, r2]
   18094:	cmp	r3, #0
   18098:	moveq	r0, #0
   1809c:	movne	r0, #7
   180a0:	bx	lr
   180a4:	mov	r0, #17
   180a8:	bx	lr
   180ac:	cmp	r2, #0
   180b0:	moveq	r0, #0
   180b4:	movne	r0, #4
   180b8:	bx	lr
   180bc:	mov	r0, #13
   180c0:	bx	lr
   180c4:	mov	r0, #12
   180c8:	bx	lr
   180cc:	mov	r0, #8
   180d0:	bx	lr
   180d4:	mov	r0, r3
   180d8:	bx	lr

000180dc <flatcc_verify_vector_field@@Base>:
   180dc:	ldrh	ip, [r0, #22]
   180e0:	add	r1, r1, #2
   180e4:	lsl	r1, r1, #1
   180e8:	str	r4, [sp, #-8]!
   180ec:	str	lr, [sp, #4]
   180f0:	uxth	r1, r1
   180f4:	ldrh	lr, [sp, #8]
   180f8:	cmp	ip, r1
   180fc:	bls	181c0 <flatcc_verify_vector_field@@Base+0xe4>
   18100:	ldr	ip, [r0, #12]
   18104:	ldrh	r1, [ip, r1]
   18108:	cmp	r1, #0
   1810c:	beq	181c0 <flatcc_verify_vector_field@@Base+0xe4>
   18110:	ldrh	r2, [r0, #20]
   18114:	add	ip, r1, #4
   18118:	cmp	ip, r2
   1811c:	movhi	r0, #13
   18120:	bhi	181a4 <flatcc_verify_vector_field@@Base+0xc8>
   18124:	ldr	r2, [r0, #16]
   18128:	add	r2, r1, r2
   1812c:	tst	r2, #3
   18130:	movne	r0, #12
   18134:	bne	181a4 <flatcc_verify_vector_field@@Base+0xc8>
   18138:	cmp	r2, #0
   1813c:	beq	181d8 <flatcc_verify_vector_field@@Base+0xfc>
   18140:	ldr	r4, [r0]
   18144:	ldr	ip, [r4, r2]
   18148:	add	ip, r2, ip
   1814c:	cmp	r2, ip
   18150:	bcs	181b0 <flatcc_verify_vector_field@@Base+0xd4>
   18154:	ldr	r1, [r0, #4]
   18158:	add	r0, ip, #4
   1815c:	cmp	r1, r0
   18160:	bcc	181b0 <flatcc_verify_vector_field@@Base+0xd4>
   18164:	cmp	lr, #4
   18168:	movcc	lr, #4
   1816c:	sub	lr, lr, #1
   18170:	orr	lr, lr, #3
   18174:	tst	lr, r0
   18178:	bne	181b0 <flatcc_verify_vector_field@@Base+0xd4>
   1817c:	ldr	r2, [r4, ip]
   18180:	ldr	ip, [sp, #12]
   18184:	cmp	ip, r2
   18188:	movcc	r0, #25
   1818c:	bcc	181a4 <flatcc_verify_vector_field@@Base+0xc8>
   18190:	mul	r2, r2, r3
   18194:	sub	r0, r1, r0
   18198:	cmp	r0, r2
   1819c:	movcc	r0, #26
   181a0:	movcs	r0, #0
   181a4:	ldr	r4, [sp]
   181a8:	add	sp, sp, #4
   181ac:	pop	{pc}		; (ldr pc, [sp], #4)
   181b0:	ldr	r4, [sp]
   181b4:	add	sp, sp, #4
   181b8:	mov	r0, #16
   181bc:	pop	{pc}		; (ldr pc, [sp], #4)
   181c0:	cmp	r2, #0
   181c4:	ldr	r4, [sp]
   181c8:	add	sp, sp, #4
   181cc:	moveq	r0, #0
   181d0:	movne	r0, #4
   181d4:	pop	{pc}		; (ldr pc, [sp], #4)
   181d8:	mov	r0, r2
   181dc:	b	181a4 <flatcc_verify_vector_field@@Base+0xc8>

000181e0 <flatcc_verify_string_vector_field@@Base>:
   181e0:	ldrh	r3, [r0, #22]
   181e4:	add	r1, r1, #2
   181e8:	lsl	r1, r1, #1
   181ec:	uxth	r1, r1
   181f0:	cmp	r3, r1
   181f4:	bls	18350 <flatcc_verify_string_vector_field@@Base+0x170>
   181f8:	ldr	r3, [r0, #12]
   181fc:	ldrh	r3, [r3, r1]
   18200:	cmp	r3, #0
   18204:	beq	18350 <flatcc_verify_string_vector_field@@Base+0x170>
   18208:	ldrh	r2, [r0, #20]
   1820c:	add	r1, r3, #4
   18210:	cmp	r1, r2
   18214:	bhi	18360 <flatcc_verify_string_vector_field@@Base+0x180>
   18218:	ldr	r2, [r0, #16]
   1821c:	add	r3, r3, r2
   18220:	tst	r3, #3
   18224:	bne	18368 <flatcc_verify_string_vector_field@@Base+0x188>
   18228:	cmp	r3, #0
   1822c:	beq	183a0 <flatcc_verify_string_vector_field@@Base+0x1c0>
   18230:	ldr	r1, [r0]
   18234:	ldr	r2, [r1, r3]
   18238:	add	r2, r3, r2
   1823c:	cmp	r3, r2
   18240:	bcs	18348 <flatcc_verify_string_vector_field@@Base+0x168>
   18244:	ldr	ip, [r0, #4]
   18248:	add	r0, r2, #4
   1824c:	cmp	ip, r0
   18250:	bcc	18348 <flatcc_verify_string_vector_field@@Base+0x168>
   18254:	tst	r0, #3
   18258:	bne	18348 <flatcc_verify_string_vector_field@@Base+0x168>
   1825c:	ldr	r3, [r1, r2]
   18260:	strd	r4, [sp, #-16]!
   18264:	str	r6, [sp, #8]
   18268:	str	lr, [sp, #12]
   1826c:	cmn	r3, #-1073741823	; 0xc0000001
   18270:	bhi	18370 <flatcc_verify_string_vector_field@@Base+0x190>
   18274:	lsl	lr, r3, #2
   18278:	sub	r4, ip, r0
   1827c:	cmp	r4, lr
   18280:	bcc	18370 <flatcc_verify_string_vector_field@@Base+0x190>
   18284:	cmp	r3, #0
   18288:	beq	183bc <flatcc_verify_string_vector_field@@Base+0x1dc>
   1828c:	ldr	r2, [r1, r0]
   18290:	add	r2, r0, r2
   18294:	cmp	r0, r2
   18298:	bcs	183b4 <flatcc_verify_string_vector_field@@Base+0x1d4>
   1829c:	add	r4, r2, #4
   182a0:	cmp	ip, r4
   182a4:	bcc	183b4 <flatcc_verify_string_vector_field@@Base+0x1d4>
   182a8:	tst	r2, #3
   182ac:	bne	183b4 <flatcc_verify_string_vector_field@@Base+0x1d4>
   182b0:	ldr	r3, [r1, r2]
   182b4:	sub	r5, ip, r4
   182b8:	add	r6, r3, #1
   182bc:	cmp	r6, r5
   182c0:	addls	lr, r0, lr
   182c4:	bhi	1831c <flatcc_verify_string_vector_field@@Base+0x13c>
   182c8:	add	r3, r1, r3
   182cc:	add	r0, r0, #4
   182d0:	ldrb	r3, [r3, r4]
   182d4:	cmp	r3, #0
   182d8:	bne	183a8 <flatcc_verify_string_vector_field@@Base+0x1c8>
   182dc:	cmp	r0, lr
   182e0:	beq	183bc <flatcc_verify_string_vector_field@@Base+0x1dc>
   182e4:	ldr	r2, [r1, r0]
   182e8:	add	r2, r0, r2
   182ec:	cmp	r2, r0
   182f0:	add	r4, r2, #4
   182f4:	bls	183b4 <flatcc_verify_string_vector_field@@Base+0x1d4>
   182f8:	cmp	ip, r4
   182fc:	bcc	183b4 <flatcc_verify_string_vector_field@@Base+0x1d4>
   18300:	tst	r2, #3
   18304:	sub	r5, ip, r4
   18308:	bne	183b4 <flatcc_verify_string_vector_field@@Base+0x1d4>
   1830c:	ldr	r3, [r1, r2]
   18310:	add	r6, r3, #1
   18314:	cmp	r5, r6
   18318:	bcs	182c8 <flatcc_verify_string_vector_field@@Base+0xe8>
   1831c:	ldr	r3, [r1, r2]
   18320:	add	r2, r3, #1
   18324:	cmp	r5, r2
   18328:	movcc	r0, #8
   1832c:	bcc	18390 <flatcc_verify_string_vector_field@@Base+0x1b0>
   18330:	add	r3, r1, r3
   18334:	ldrb	r3, [r3, r4]
   18338:	cmp	r3, #0
   1833c:	moveq	r0, #0
   18340:	movne	r0, #7
   18344:	b	18390 <flatcc_verify_string_vector_field@@Base+0x1b0>
   18348:	mov	r0, #16
   1834c:	bx	lr
   18350:	cmp	r2, #0
   18354:	movne	r0, #4
   18358:	moveq	r0, #0
   1835c:	bx	lr
   18360:	mov	r0, #13
   18364:	bx	lr
   18368:	mov	r0, #12
   1836c:	bx	lr
   18370:	ldr	r3, [r1, r2]
   18374:	cmn	r3, #-1073741823	; 0xc0000001
   18378:	movhi	r0, #25
   1837c:	bhi	18390 <flatcc_verify_string_vector_field@@Base+0x1b0>
   18380:	sub	r0, ip, r0
   18384:	cmp	r0, r3, lsl #2
   18388:	movcs	r0, #0
   1838c:	movcc	r0, #26
   18390:	ldrd	r4, [sp]
   18394:	ldr	r6, [sp, #8]
   18398:	add	sp, sp, #12
   1839c:	pop	{pc}		; (ldr pc, [sp], #4)
   183a0:	mov	r0, r3
   183a4:	bx	lr
   183a8:	cmp	ip, r4
   183ac:	subcs	r5, ip, r4
   183b0:	bcs	1831c <flatcc_verify_string_vector_field@@Base+0x13c>
   183b4:	mov	r0, #17
   183b8:	b	18390 <flatcc_verify_string_vector_field@@Base+0x1b0>
   183bc:	mov	r0, r3
   183c0:	b	18390 <flatcc_verify_string_vector_field@@Base+0x1b0>

000183c4 <flatcc_verify_table_field@@Base>:
   183c4:	ldrh	ip, [r0, #22]
   183c8:	add	r1, r1, #2
   183cc:	lsl	r1, r1, #1
   183d0:	uxth	r1, r1
   183d4:	cmp	ip, r1
   183d8:	bls	184f8 <flatcc_verify_table_field@@Base+0x134>
   183dc:	ldr	ip, [r0, #12]
   183e0:	ldrh	r1, [ip, r1]
   183e4:	cmp	r1, #0
   183e8:	beq	184f8 <flatcc_verify_table_field@@Base+0x134>
   183ec:	ldrh	r2, [r0, #20]
   183f0:	add	ip, r1, #4
   183f4:	cmp	ip, r2
   183f8:	bhi	18508 <flatcc_verify_table_field@@Base+0x144>
   183fc:	ldr	r2, [r0, #16]
   18400:	add	r1, r1, r2
   18404:	tst	r1, #3
   18408:	bne	18510 <flatcc_verify_table_field@@Base+0x14c>
   1840c:	cmp	r1, #0
   18410:	beq	18518 <flatcc_verify_table_field@@Base+0x154>
   18414:	ldr	ip, [r0]
   18418:	strd	r4, [sp, #-12]!
   1841c:	ldr	r2, [r0, #8]
   18420:	str	lr, [sp, #8]
   18424:	sub	sp, sp, #28
   18428:	ldr	lr, [r0, #4]
   1842c:	ldr	r0, [ip, r1]
   18430:	sub	r2, r2, #1
   18434:	cmp	r2, #0
   18438:	moveq	r0, #3
   1843c:	str	r2, [sp, #8]
   18440:	beq	184e8 <flatcc_verify_table_field@@Base+0x124>
   18444:	add	r2, r1, r0
   18448:	cmp	r1, r2
   1844c:	bcs	184e4 <flatcc_verify_table_field@@Base+0x120>
   18450:	add	r1, r2, #4
   18454:	cmp	lr, r1
   18458:	bcc	184e4 <flatcc_verify_table_field@@Base+0x120>
   1845c:	tst	r2, #3
   18460:	bne	184e4 <flatcc_verify_table_field@@Base+0x120>
   18464:	str	r2, [sp, #16]
   18468:	ldr	r1, [ip, r2]
   1846c:	subs	r1, r2, r1
   18470:	bmi	18520 <flatcc_verify_table_field@@Base+0x15c>
   18474:	tst	r1, #1
   18478:	bne	18520 <flatcc_verify_table_field@@Base+0x15c>
   1847c:	add	r4, r1, #2
   18480:	cmp	lr, r4
   18484:	movcc	r0, #27
   18488:	bcc	184e8 <flatcc_verify_table_field@@Base+0x124>
   1848c:	ldrh	r0, [ip, r1]
   18490:	add	r5, ip, r1
   18494:	add	r1, r0, r1
   18498:	strh	r0, [sp, #22]
   1849c:	cmp	lr, r1
   184a0:	bcc	18528 <flatcc_verify_table_field@@Base+0x164>
   184a4:	tst	r0, #1
   184a8:	bne	18528 <flatcc_verify_table_field@@Base+0x164>
   184ac:	cmp	r0, #3
   184b0:	movls	r0, #28
   184b4:	bls	184e8 <flatcc_verify_table_field@@Base+0x124>
   184b8:	ldrh	r1, [ip, r4]
   184bc:	sub	r2, lr, r2
   184c0:	cmp	r2, r1
   184c4:	strh	r1, [sp, #20]
   184c8:	movcc	r0, #20
   184cc:	bcc	184e8 <flatcc_verify_table_field@@Base+0x124>
   184d0:	mov	r0, sp
   184d4:	stm	sp, {ip, lr}
   184d8:	str	r5, [sp, #12]
   184dc:	blx	r3
   184e0:	b	184e8 <flatcc_verify_table_field@@Base+0x124>
   184e4:	mov	r0, #15
   184e8:	add	sp, sp, #28
   184ec:	ldrd	r4, [sp]
   184f0:	add	sp, sp, #8
   184f4:	pop	{pc}		; (ldr pc, [sp], #4)
   184f8:	cmp	r2, #0
   184fc:	moveq	r0, #0
   18500:	movne	r0, #4
   18504:	bx	lr
   18508:	mov	r0, #13
   1850c:	bx	lr
   18510:	mov	r0, #12
   18514:	bx	lr
   18518:	mov	r0, r1
   1851c:	bx	lr
   18520:	mov	r0, #29
   18524:	b	184e8 <flatcc_verify_table_field@@Base+0x124>
   18528:	mov	r0, #30
   1852c:	b	184e8 <flatcc_verify_table_field@@Base+0x124>

00018530 <flatcc_verify_table_vector_field@@Base>:
   18530:	ldrh	ip, [r0, #22]
   18534:	add	r1, r1, #2
   18538:	lsl	r1, r1, #1
   1853c:	uxth	r1, r1
   18540:	cmp	ip, r1
   18544:	bls	187cc <flatcc_verify_table_vector_field@@Base+0x29c>
   18548:	ldr	ip, [r0, #12]
   1854c:	ldrh	r1, [ip, r1]
   18550:	cmp	r1, #0
   18554:	beq	187cc <flatcc_verify_table_vector_field@@Base+0x29c>
   18558:	ldrh	r2, [r0, #20]
   1855c:	add	ip, r1, #4
   18560:	cmp	ip, r2
   18564:	bhi	187dc <flatcc_verify_table_vector_field@@Base+0x2ac>
   18568:	ldr	r2, [r0, #16]
   1856c:	add	r1, r1, r2
   18570:	tst	r1, #3
   18574:	bne	187f4 <flatcc_verify_table_vector_field@@Base+0x2c4>
   18578:	cmp	r1, #0
   1857c:	beq	187d4 <flatcc_verify_table_vector_field@@Base+0x2a4>
   18580:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18584:	strd	r6, [sp, #8]
   18588:	ldr	r7, [r0, #8]
   1858c:	strd	r8, [sp, #16]
   18590:	ldr	r8, [r0]
   18594:	strd	sl, [sp, #24]
   18598:	str	lr, [sp, #32]
   1859c:	sub	sp, sp, #36	; 0x24
   185a0:	cmp	r7, #0
   185a4:	ldr	ip, [r8, r1]
   185a8:	ble	187ec <flatcc_verify_table_vector_field@@Base+0x2bc>
   185ac:	add	ip, r1, ip
   185b0:	cmp	r1, ip
   185b4:	bcs	187ac <flatcc_verify_table_vector_field@@Base+0x27c>
   185b8:	ldr	r9, [r0, #4]
   185bc:	add	r5, ip, #4
   185c0:	cmp	r9, r5
   185c4:	bcc	187ac <flatcc_verify_table_vector_field@@Base+0x27c>
   185c8:	tst	r5, #3
   185cc:	bne	187ac <flatcc_verify_table_vector_field@@Base+0x27c>
   185d0:	ldr	r1, [r8, ip]
   185d4:	cmn	r1, #-1073741823	; 0xc0000001
   185d8:	bhi	187fc <flatcc_verify_table_vector_field@@Base+0x2cc>
   185dc:	lsl	r2, r1, #2
   185e0:	sub	r0, r9, r5
   185e4:	cmp	r0, r2
   185e8:	bcc	187fc <flatcc_verify_table_vector_field@@Base+0x2cc>
   185ec:	cmp	r1, #0
   185f0:	beq	1881c <flatcc_verify_table_vector_field@@Base+0x2ec>
   185f4:	sub	r7, r7, #2
   185f8:	add	sl, r8, r5
   185fc:	ldr	r1, [r8, r5]
   18600:	cmp	r7, #0
   18604:	str	r7, [sp, #16]
   18608:	beq	187ec <flatcc_verify_table_vector_field@@Base+0x2bc>
   1860c:	mov	r6, r3
   18610:	add	r3, r5, r1
   18614:	cmp	r5, r3
   18618:	bcs	18704 <flatcc_verify_table_vector_field@@Base+0x1d4>
   1861c:	add	r1, r3, #4
   18620:	cmp	r9, r1
   18624:	bcc	18704 <flatcc_verify_table_vector_field@@Base+0x1d4>
   18628:	tst	r3, #3
   1862c:	bne	18704 <flatcc_verify_table_vector_field@@Base+0x1d4>
   18630:	movw	fp, #65532	; 0xfffc
   18634:	movt	fp, #65535	; 0xffff
   18638:	sub	fp, fp, ip
   1863c:	add	r1, sp, #8
   18640:	add	fp, sl, fp
   18644:	add	ip, ip, #8
   18648:	add	r2, r5, r2
   1864c:	add	r4, r8, ip
   18650:	str	r1, [sp, #4]
   18654:	mov	r1, fp
   18658:	mov	fp, r2
   1865c:	add	sl, r1, r5
   18660:	str	r1, [sp]
   18664:	str	r3, [sp, #24]
   18668:	ldr	r2, [r8, r3]
   1866c:	subs	r2, r3, r2
   18670:	bmi	18704 <flatcc_verify_table_vector_field@@Base+0x1d4>
   18674:	tst	r2, #1
   18678:	bne	18704 <flatcc_verify_table_vector_field@@Base+0x1d4>
   1867c:	add	lr, r2, #2
   18680:	cmp	r9, lr
   18684:	bcc	18704 <flatcc_verify_table_vector_field@@Base+0x1d4>
   18688:	ldrh	r0, [r8, r2]
   1868c:	add	ip, r8, r2
   18690:	add	r2, r0, r2
   18694:	strh	r0, [sp, #30]
   18698:	cmp	r9, r2
   1869c:	bcc	18704 <flatcc_verify_table_vector_field@@Base+0x1d4>
   186a0:	tst	r0, #1
   186a4:	bne	18704 <flatcc_verify_table_vector_field@@Base+0x1d4>
   186a8:	cmp	r0, #3
   186ac:	bls	18704 <flatcc_verify_table_vector_field@@Base+0x1d4>
   186b0:	ldrh	r2, [r8, lr]
   186b4:	sub	r3, r9, r3
   186b8:	cmp	r3, r2
   186bc:	strh	r2, [sp, #28]
   186c0:	bcc	18704 <flatcc_verify_table_vector_field@@Base+0x1d4>
   186c4:	ldr	r0, [sp, #4]
   186c8:	strd	r8, [sp, #8]
   186cc:	str	ip, [sp, #20]
   186d0:	blx	r6
   186d4:	cmp	r0, #0
   186d8:	ldr	r1, [sp]
   186dc:	bne	18704 <flatcc_verify_table_vector_field@@Base+0x1d4>
   186e0:	add	r5, r5, #4
   186e4:	cmp	r5, fp
   186e8:	beq	1881c <flatcc_verify_table_vector_field@@Base+0x2ec>
   186ec:	mov	sl, r4
   186f0:	ldr	r3, [r4], #4
   186f4:	str	r7, [sp, #16]
   186f8:	add	r3, r3, r5
   186fc:	cmp	r5, r3
   18700:	bcc	18824 <flatcc_verify_table_vector_field@@Base+0x2f4>
   18704:	ldr	r3, [sl]
   18708:	str	r7, [sp, #16]
   1870c:	add	r3, r5, r3
   18710:	cmp	r3, r5
   18714:	bls	1883c <flatcc_verify_table_vector_field@@Base+0x30c>
   18718:	add	r2, r3, #4
   1871c:	cmp	r9, r2
   18720:	bcc	1883c <flatcc_verify_table_vector_field@@Base+0x30c>
   18724:	tst	r3, #3
   18728:	bne	1883c <flatcc_verify_table_vector_field@@Base+0x30c>
   1872c:	str	r3, [sp, #24]
   18730:	ldr	r2, [r8, r3]
   18734:	subs	r2, r3, r2
   18738:	bmi	18844 <flatcc_verify_table_vector_field@@Base+0x314>
   1873c:	tst	r2, #1
   18740:	bne	18844 <flatcc_verify_table_vector_field@@Base+0x314>
   18744:	add	r0, r2, #2
   18748:	cmp	r9, r0
   1874c:	movcc	r0, #27
   18750:	bcc	187b0 <flatcc_verify_table_vector_field@@Base+0x280>
   18754:	ldrh	r1, [r8, r2]
   18758:	add	ip, r8, r2
   1875c:	add	r2, r1, r2
   18760:	strh	r1, [sp, #30]
   18764:	cmp	r9, r2
   18768:	bcc	1884c <flatcc_verify_table_vector_field@@Base+0x31c>
   1876c:	tst	r1, #1
   18770:	bne	1884c <flatcc_verify_table_vector_field@@Base+0x31c>
   18774:	cmp	r1, #3
   18778:	movls	r0, #28
   1877c:	bls	187b0 <flatcc_verify_table_vector_field@@Base+0x280>
   18780:	ldrh	r2, [r8, r0]
   18784:	sub	r3, r9, r3
   18788:	cmp	r3, r2
   1878c:	strh	r2, [sp, #28]
   18790:	movcc	r0, #20
   18794:	bcc	187b0 <flatcc_verify_table_vector_field@@Base+0x280>
   18798:	add	r0, sp, #8
   1879c:	strd	r8, [sp, #8]
   187a0:	str	ip, [sp, #20]
   187a4:	blx	r6
   187a8:	b	187b0 <flatcc_verify_table_vector_field@@Base+0x280>
   187ac:	mov	r0, #16
   187b0:	add	sp, sp, #36	; 0x24
   187b4:	ldrd	r4, [sp]
   187b8:	ldrd	r6, [sp, #8]
   187bc:	ldrd	r8, [sp, #16]
   187c0:	ldrd	sl, [sp, #24]
   187c4:	add	sp, sp, #32
   187c8:	pop	{pc}		; (ldr pc, [sp], #4)
   187cc:	cmp	r2, #0
   187d0:	bne	187e4 <flatcc_verify_table_vector_field@@Base+0x2b4>
   187d4:	mov	r0, #0
   187d8:	bx	lr
   187dc:	mov	r0, #13
   187e0:	bx	lr
   187e4:	mov	r0, #4
   187e8:	bx	lr
   187ec:	mov	r0, #3
   187f0:	b	187b0 <flatcc_verify_table_vector_field@@Base+0x280>
   187f4:	mov	r0, #12
   187f8:	bx	lr
   187fc:	ldr	r3, [r8, ip]
   18800:	cmn	r3, #-1073741823	; 0xc0000001
   18804:	movhi	r0, #25
   18808:	bhi	187b0 <flatcc_verify_table_vector_field@@Base+0x280>
   1880c:	sub	r5, r9, r5
   18810:	cmp	r5, r3, lsl #2
   18814:	movcc	r0, #26
   18818:	bcc	187b0 <flatcc_verify_table_vector_field@@Base+0x280>
   1881c:	mov	r0, #0
   18820:	b	187b0 <flatcc_verify_table_vector_field@@Base+0x280>
   18824:	add	r2, r3, #4
   18828:	cmp	r9, r2
   1882c:	bcc	18704 <flatcc_verify_table_vector_field@@Base+0x1d4>
   18830:	tst	r3, #3
   18834:	beq	1865c <flatcc_verify_table_vector_field@@Base+0x12c>
   18838:	b	18704 <flatcc_verify_table_vector_field@@Base+0x1d4>
   1883c:	mov	r0, #15
   18840:	b	187b0 <flatcc_verify_table_vector_field@@Base+0x280>
   18844:	mov	r0, #29
   18848:	b	187b0 <flatcc_verify_table_vector_field@@Base+0x280>
   1884c:	mov	r0, #30
   18850:	b	187b0 <flatcc_verify_table_vector_field@@Base+0x280>

00018854 <flatcc_verify_union_table@@Base>:
   18854:	strd	r4, [sp, #-12]!
   18858:	ldr	r3, [r0, #8]
   1885c:	ldr	ip, [r0, #4]
   18860:	ldr	r2, [r0, #16]
   18864:	sub	r3, r3, #1
   18868:	str	lr, [sp, #8]
   1886c:	sub	sp, sp, #28
   18870:	cmp	r3, #0
   18874:	ldr	lr, [r0]
   18878:	str	r3, [sp, #8]
   1887c:	ldr	r3, [r0, #20]
   18880:	moveq	r0, #3
   18884:	beq	18898 <flatcc_verify_union_table@@Base+0x44>
   18888:	add	r3, r2, r3
   1888c:	cmp	r2, r3
   18890:	bcc	188a8 <flatcc_verify_union_table@@Base+0x54>
   18894:	mov	r0, #15
   18898:	add	sp, sp, #28
   1889c:	ldrd	r4, [sp]
   188a0:	add	sp, sp, #8
   188a4:	pop	{pc}		; (ldr pc, [sp], #4)
   188a8:	add	r2, r3, #4
   188ac:	cmp	ip, r2
   188b0:	bcc	18894 <flatcc_verify_union_table@@Base+0x40>
   188b4:	tst	r3, #3
   188b8:	bne	18894 <flatcc_verify_union_table@@Base+0x40>
   188bc:	str	r3, [sp, #16]
   188c0:	ldr	r2, [lr, r3]
   188c4:	subs	r2, r3, r2
   188c8:	bmi	18948 <flatcc_verify_union_table@@Base+0xf4>
   188cc:	tst	r2, #1
   188d0:	bne	18948 <flatcc_verify_union_table@@Base+0xf4>
   188d4:	add	r4, r2, #2
   188d8:	cmp	ip, r4
   188dc:	movcc	r0, #27
   188e0:	bcc	18898 <flatcc_verify_union_table@@Base+0x44>
   188e4:	ldrh	r0, [lr, r2]
   188e8:	add	r5, lr, r2
   188ec:	add	r2, r0, r2
   188f0:	strh	r0, [sp, #22]
   188f4:	cmp	ip, r2
   188f8:	bcc	18940 <flatcc_verify_union_table@@Base+0xec>
   188fc:	tst	r0, #1
   18900:	bne	18940 <flatcc_verify_union_table@@Base+0xec>
   18904:	cmp	r0, #3
   18908:	movls	r0, #28
   1890c:	bls	18898 <flatcc_verify_union_table@@Base+0x44>
   18910:	ldrh	r2, [lr, r4]
   18914:	sub	r3, ip, r3
   18918:	cmp	r3, r2
   1891c:	strh	r2, [sp, #20]
   18920:	movcc	r0, #20
   18924:	bcc	18898 <flatcc_verify_union_table@@Base+0x44>
   18928:	mov	r0, sp
   1892c:	str	lr, [sp]
   18930:	str	ip, [sp, #4]
   18934:	str	r5, [sp, #12]
   18938:	blx	r1
   1893c:	b	18898 <flatcc_verify_union_table@@Base+0x44>
   18940:	mov	r0, #30
   18944:	b	18898 <flatcc_verify_union_table@@Base+0x44>
   18948:	mov	r0, #29
   1894c:	b	18898 <flatcc_verify_union_table@@Base+0x44>

00018950 <flatcc_verify_union_struct@@Base>:
   18950:	push	{lr}		; (str lr, [sp, #-4]!)
   18954:	ldr	ip, [r0, #20]
   18958:	ldr	lr, [r0, #4]
   1895c:	ldr	r3, [r0, #16]
   18960:	cmp	ip, #0
   18964:	beq	18998 <flatcc_verify_union_struct@@Base+0x48>
   18968:	add	r3, r3, ip
   1896c:	cmp	lr, r3
   18970:	bcc	18998 <flatcc_verify_union_struct@@Base+0x48>
   18974:	adds	r1, r1, r3
   18978:	bcs	189a8 <flatcc_verify_union_struct@@Base+0x58>
   1897c:	cmp	lr, r1
   18980:	bcc	189a0 <flatcc_verify_union_struct@@Base+0x50>
   18984:	sub	r2, r2, #1
   18988:	tst	r2, r3
   1898c:	moveq	r0, #0
   18990:	movne	r0, #11
   18994:	pop	{pc}		; (ldr pc, [sp], #4)
   18998:	mov	r0, #18
   1899c:	pop	{pc}		; (ldr pc, [sp], #4)
   189a0:	mov	r0, #9
   189a4:	pop	{pc}		; (ldr pc, [sp], #4)
   189a8:	mov	r0, #10
   189ac:	b	18994 <flatcc_verify_union_struct@@Base+0x44>

000189b0 <flatcc_verify_union_string@@Base>:
   189b0:	ldrd	r2, [r0, #16]
   189b4:	add	r3, r2, r3
   189b8:	cmp	r2, r3
   189bc:	bcs	18a08 <flatcc_verify_union_string@@Base+0x58>
   189c0:	ldr	r2, [r0, #4]
   189c4:	add	r1, r3, #4
   189c8:	cmp	r2, r1
   189cc:	bcc	18a08 <flatcc_verify_union_string@@Base+0x58>
   189d0:	tst	r3, #3
   189d4:	bne	18a08 <flatcc_verify_union_string@@Base+0x58>
   189d8:	ldr	r0, [r0]
   189dc:	sub	r2, r2, r1
   189e0:	ldr	r3, [r0, r3]
   189e4:	add	ip, r3, #1
   189e8:	cmp	r2, ip
   189ec:	bcc	18a10 <flatcc_verify_union_string@@Base+0x60>
   189f0:	add	r1, r0, r1
   189f4:	ldrb	r3, [r1, r3]
   189f8:	cmp	r3, #0
   189fc:	moveq	r0, #0
   18a00:	movne	r0, #7
   18a04:	bx	lr
   18a08:	mov	r0, #17
   18a0c:	bx	lr
   18a10:	mov	r0, #8
   18a14:	bx	lr

00018a18 <flatcc_verify_buffer_header@@Base>:
   18a18:	tst	r0, #3
   18a1c:	bne	18a88 <flatcc_verify_buffer_header@@Base+0x70>
   18a20:	cmn	r1, #9
   18a24:	bhi	18a90 <flatcc_verify_buffer_header@@Base+0x78>
   18a28:	cmp	r1, #7
   18a2c:	bls	18a80 <flatcc_verify_buffer_header@@Base+0x68>
   18a30:	cmp	r2, #0
   18a34:	beq	18a98 <flatcc_verify_buffer_header@@Base+0x80>
   18a38:	mov	r1, r2
   18a3c:	mov	r2, #4
   18a40:	str	r4, [sp, #-8]!
   18a44:	str	lr, [sp, #4]
   18a48:	sub	sp, sp, #8
   18a4c:	mov	r4, r0
   18a50:	add	r0, sp, r2
   18a54:	bl	12300 <strncpy@plt>
   18a58:	ldr	r2, [r4, #4]
   18a5c:	ldr	r3, [sp, #4]
   18a60:	cmp	r3, #0
   18a64:	cmpne	r2, r3
   18a68:	movne	r0, #2
   18a6c:	moveq	r0, #0
   18a70:	add	sp, sp, #8
   18a74:	ldr	r4, [sp]
   18a78:	add	sp, sp, #4
   18a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   18a80:	mov	r0, #1
   18a84:	bx	lr
   18a88:	mov	r0, #5
   18a8c:	bx	lr
   18a90:	mov	r0, #6
   18a94:	bx	lr
   18a98:	mov	r0, #0
   18a9c:	bx	lr

00018aa0 <flatcc_verify_typed_buffer_header@@Base>:
   18aa0:	tst	r0, #3
   18aa4:	bne	18adc <flatcc_verify_typed_buffer_header@@Base+0x3c>
   18aa8:	cmn	r1, #9
   18aac:	bhi	18aec <flatcc_verify_typed_buffer_header@@Base+0x4c>
   18ab0:	cmp	r1, #7
   18ab4:	bls	18ad4 <flatcc_verify_typed_buffer_header@@Base+0x34>
   18ab8:	cmp	r2, #0
   18abc:	beq	18ae4 <flatcc_verify_typed_buffer_header@@Base+0x44>
   18ac0:	ldr	r0, [r0, #4]
   18ac4:	cmp	r2, r0
   18ac8:	movne	r0, #2
   18acc:	moveq	r0, #0
   18ad0:	bx	lr
   18ad4:	mov	r0, #1
   18ad8:	bx	lr
   18adc:	mov	r0, #5
   18ae0:	bx	lr
   18ae4:	mov	r0, r2
   18ae8:	bx	lr
   18aec:	mov	r0, #6
   18af0:	bx	lr

00018af4 <flatcc_verify_struct_as_root@@Base>:
   18af4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18af8:	mov	r4, r3
   18afc:	mov	r5, r1
   18b00:	strd	r6, [sp, #8]
   18b04:	mov	r7, r0
   18b08:	ldrh	r6, [sp, #24]
   18b0c:	str	r8, [sp, #16]
   18b10:	mov	r8, r2
   18b14:	str	lr, [sp, #20]
   18b18:	bl	18a18 <flatcc_verify_buffer_header@@Base>
   18b1c:	cmp	r0, #0
   18b20:	bne	18b78 <flatcc_verify_struct_as_root@@Base+0x84>
   18b24:	ldr	r2, [r7]
   18b28:	cmp	r5, r2
   18b2c:	movcs	r3, #0
   18b30:	movcc	r3, #1
   18b34:	cmp	r2, #0
   18b38:	moveq	r3, #1
   18b3c:	cmp	r3, #0
   18b40:	movne	r0, #18
   18b44:	bne	18b64 <flatcc_verify_struct_as_root@@Base+0x70>
   18b48:	adds	r4, r4, r2
   18b4c:	bcs	18ba4 <flatcc_verify_struct_as_root@@Base+0xb0>
   18b50:	cmp	r5, r4
   18b54:	bcc	18b9c <flatcc_verify_struct_as_root@@Base+0xa8>
   18b58:	sub	r6, r6, #1
   18b5c:	tst	r6, r2
   18b60:	movne	r0, #11
   18b64:	ldrd	r4, [sp]
   18b68:	ldrd	r6, [sp, #8]
   18b6c:	ldr	r8, [sp, #16]
   18b70:	add	sp, sp, #20
   18b74:	pop	{pc}		; (ldr pc, [sp], #4)
   18b78:	mov	r2, r8
   18b7c:	mov	r1, r5
   18b80:	ldrd	r4, [sp]
   18b84:	mov	r0, r7
   18b88:	ldrd	r6, [sp, #8]
   18b8c:	ldr	r8, [sp, #16]
   18b90:	ldr	lr, [sp, #20]
   18b94:	add	sp, sp, #24
   18b98:	b	18a18 <flatcc_verify_buffer_header@@Base>
   18b9c:	mov	r0, #9
   18ba0:	b	18b64 <flatcc_verify_struct_as_root@@Base+0x70>
   18ba4:	mov	r0, #10
   18ba8:	b	18b64 <flatcc_verify_struct_as_root@@Base+0x70>

00018bac <flatcc_verify_struct_as_typed_root@@Base>:
   18bac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18bb0:	mov	r4, r3
   18bb4:	mov	r5, r1
   18bb8:	strd	r6, [sp, #8]
   18bbc:	mov	r7, r0
   18bc0:	ldrh	r6, [sp, #24]
   18bc4:	str	r8, [sp, #16]
   18bc8:	mov	r8, r2
   18bcc:	str	lr, [sp, #20]
   18bd0:	bl	18aa0 <flatcc_verify_typed_buffer_header@@Base>
   18bd4:	cmp	r0, #0
   18bd8:	bne	18c30 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   18bdc:	ldr	r2, [r7]
   18be0:	cmp	r5, r2
   18be4:	movcs	r3, #0
   18be8:	movcc	r3, #1
   18bec:	cmp	r2, #0
   18bf0:	moveq	r3, #1
   18bf4:	cmp	r3, #0
   18bf8:	movne	r0, #18
   18bfc:	bne	18c1c <flatcc_verify_struct_as_typed_root@@Base+0x70>
   18c00:	adds	r4, r4, r2
   18c04:	bcs	18c5c <flatcc_verify_struct_as_typed_root@@Base+0xb0>
   18c08:	cmp	r5, r4
   18c0c:	bcc	18c54 <flatcc_verify_struct_as_typed_root@@Base+0xa8>
   18c10:	sub	r6, r6, #1
   18c14:	tst	r6, r2
   18c18:	movne	r0, #11
   18c1c:	ldrd	r4, [sp]
   18c20:	ldrd	r6, [sp, #8]
   18c24:	ldr	r8, [sp, #16]
   18c28:	add	sp, sp, #20
   18c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   18c30:	mov	r2, r8
   18c34:	mov	r1, r5
   18c38:	ldrd	r4, [sp]
   18c3c:	mov	r0, r7
   18c40:	ldrd	r6, [sp, #8]
   18c44:	ldr	r8, [sp, #16]
   18c48:	ldr	lr, [sp, #20]
   18c4c:	add	sp, sp, #24
   18c50:	b	18aa0 <flatcc_verify_typed_buffer_header@@Base>
   18c54:	mov	r0, #9
   18c58:	b	18c1c <flatcc_verify_struct_as_typed_root@@Base+0x70>
   18c5c:	mov	r0, #10
   18c60:	b	18c1c <flatcc_verify_struct_as_typed_root@@Base+0x70>

00018c64 <flatcc_verify_table_as_root@@Base>:
   18c64:	strd	r4, [sp, #-20]!	; 0xffffffec
   18c68:	mov	r4, r0
   18c6c:	mov	r5, r1
   18c70:	strd	r6, [sp, #8]
   18c74:	mov	r7, r3
   18c78:	mov	r6, r2
   18c7c:	str	lr, [sp, #16]
   18c80:	sub	sp, sp, #28
   18c84:	bl	18a18 <flatcc_verify_buffer_header@@Base>
   18c88:	cmp	r0, #0
   18c8c:	bne	18d50 <flatcc_verify_table_as_root@@Base+0xec>
   18c90:	ldr	r3, [r4]
   18c94:	mov	r2, #99	; 0x63
   18c98:	str	r2, [sp, #8]
   18c9c:	cmp	r3, #0
   18ca0:	bne	18cbc <flatcc_verify_table_as_root@@Base+0x58>
   18ca4:	mov	r0, #15
   18ca8:	add	sp, sp, #28
   18cac:	ldrd	r4, [sp]
   18cb0:	ldrd	r6, [sp, #8]
   18cb4:	add	sp, sp, #16
   18cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   18cbc:	add	r2, r3, #4
   18cc0:	cmp	r5, r2
   18cc4:	bcc	18ca4 <flatcc_verify_table_as_root@@Base+0x40>
   18cc8:	tst	r3, #3
   18ccc:	bne	18ca4 <flatcc_verify_table_as_root@@Base+0x40>
   18cd0:	ldr	r2, [r4, r3]
   18cd4:	str	r3, [sp, #16]
   18cd8:	subs	r2, r3, r2
   18cdc:	bmi	18d64 <flatcc_verify_table_as_root@@Base+0x100>
   18ce0:	tst	r2, #1
   18ce4:	bne	18d64 <flatcc_verify_table_as_root@@Base+0x100>
   18ce8:	add	r0, r2, #2
   18cec:	cmp	r5, r0
   18cf0:	movcc	r0, #27
   18cf4:	bcc	18ca8 <flatcc_verify_table_as_root@@Base+0x44>
   18cf8:	ldrh	r1, [r4, r2]
   18cfc:	add	ip, r4, r2
   18d00:	add	r2, r1, r2
   18d04:	strh	r1, [sp, #22]
   18d08:	cmp	r5, r2
   18d0c:	bcc	18d6c <flatcc_verify_table_as_root@@Base+0x108>
   18d10:	tst	r1, #1
   18d14:	bne	18d6c <flatcc_verify_table_as_root@@Base+0x108>
   18d18:	cmp	r1, #3
   18d1c:	movls	r0, #28
   18d20:	bls	18ca8 <flatcc_verify_table_as_root@@Base+0x44>
   18d24:	ldrh	r2, [r4, r0]
   18d28:	sub	r3, r5, r3
   18d2c:	cmp	r3, r2
   18d30:	strh	r2, [sp, #20]
   18d34:	movcc	r0, #20
   18d38:	bcc	18ca8 <flatcc_verify_table_as_root@@Base+0x44>
   18d3c:	mov	r0, sp
   18d40:	strd	r4, [sp]
   18d44:	str	ip, [sp, #12]
   18d48:	blx	r7
   18d4c:	b	18ca8 <flatcc_verify_table_as_root@@Base+0x44>
   18d50:	mov	r2, r6
   18d54:	mov	r1, r5
   18d58:	mov	r0, r4
   18d5c:	bl	18a18 <flatcc_verify_buffer_header@@Base>
   18d60:	b	18ca8 <flatcc_verify_table_as_root@@Base+0x44>
   18d64:	mov	r0, #29
   18d68:	b	18ca8 <flatcc_verify_table_as_root@@Base+0x44>
   18d6c:	mov	r0, #30
   18d70:	b	18ca8 <flatcc_verify_table_as_root@@Base+0x44>

00018d74 <flatcc_verify_table_as_typed_root@@Base>:
   18d74:	strd	r4, [sp, #-20]!	; 0xffffffec
   18d78:	mov	r4, r0
   18d7c:	mov	r5, r1
   18d80:	strd	r6, [sp, #8]
   18d84:	mov	r7, r3
   18d88:	mov	r6, r2
   18d8c:	str	lr, [sp, #16]
   18d90:	sub	sp, sp, #28
   18d94:	bl	18aa0 <flatcc_verify_typed_buffer_header@@Base>
   18d98:	cmp	r0, #0
   18d9c:	bne	18e60 <flatcc_verify_table_as_typed_root@@Base+0xec>
   18da0:	ldr	r3, [r4]
   18da4:	mov	r2, #99	; 0x63
   18da8:	str	r2, [sp, #8]
   18dac:	cmp	r3, #0
   18db0:	bne	18dcc <flatcc_verify_table_as_typed_root@@Base+0x58>
   18db4:	mov	r0, #15
   18db8:	add	sp, sp, #28
   18dbc:	ldrd	r4, [sp]
   18dc0:	ldrd	r6, [sp, #8]
   18dc4:	add	sp, sp, #16
   18dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   18dcc:	add	r2, r3, #4
   18dd0:	cmp	r5, r2
   18dd4:	bcc	18db4 <flatcc_verify_table_as_typed_root@@Base+0x40>
   18dd8:	tst	r3, #3
   18ddc:	bne	18db4 <flatcc_verify_table_as_typed_root@@Base+0x40>
   18de0:	ldr	r2, [r4, r3]
   18de4:	str	r3, [sp, #16]
   18de8:	subs	r2, r3, r2
   18dec:	bmi	18e74 <flatcc_verify_table_as_typed_root@@Base+0x100>
   18df0:	tst	r2, #1
   18df4:	bne	18e74 <flatcc_verify_table_as_typed_root@@Base+0x100>
   18df8:	add	r0, r2, #2
   18dfc:	cmp	r5, r0
   18e00:	movcc	r0, #27
   18e04:	bcc	18db8 <flatcc_verify_table_as_typed_root@@Base+0x44>
   18e08:	ldrh	r1, [r4, r2]
   18e0c:	add	ip, r4, r2
   18e10:	add	r2, r1, r2
   18e14:	strh	r1, [sp, #22]
   18e18:	cmp	r5, r2
   18e1c:	bcc	18e7c <flatcc_verify_table_as_typed_root@@Base+0x108>
   18e20:	tst	r1, #1
   18e24:	bne	18e7c <flatcc_verify_table_as_typed_root@@Base+0x108>
   18e28:	cmp	r1, #3
   18e2c:	movls	r0, #28
   18e30:	bls	18db8 <flatcc_verify_table_as_typed_root@@Base+0x44>
   18e34:	ldrh	r2, [r4, r0]
   18e38:	sub	r3, r5, r3
   18e3c:	cmp	r3, r2
   18e40:	strh	r2, [sp, #20]
   18e44:	movcc	r0, #20
   18e48:	bcc	18db8 <flatcc_verify_table_as_typed_root@@Base+0x44>
   18e4c:	mov	r0, sp
   18e50:	strd	r4, [sp]
   18e54:	str	ip, [sp, #12]
   18e58:	blx	r7
   18e5c:	b	18db8 <flatcc_verify_table_as_typed_root@@Base+0x44>
   18e60:	mov	r2, r6
   18e64:	mov	r1, r5
   18e68:	mov	r0, r4
   18e6c:	bl	18aa0 <flatcc_verify_typed_buffer_header@@Base>
   18e70:	b	18db8 <flatcc_verify_table_as_typed_root@@Base+0x44>
   18e74:	mov	r0, #29
   18e78:	b	18db8 <flatcc_verify_table_as_typed_root@@Base+0x44>
   18e7c:	mov	r0, #30
   18e80:	b	18db8 <flatcc_verify_table_as_typed_root@@Base+0x44>

00018e84 <flatcc_verify_struct_as_nested_root@@Base>:
   18e84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18e88:	mov	r4, r1
   18e8c:	strd	r6, [sp, #8]
   18e90:	mov	r6, r3
   18e94:	strd	r8, [sp, #16]
   18e98:	mvn	r9, #0
   18e9c:	mov	r8, r0
   18ea0:	strd	sl, [sp, #24]
   18ea4:	mov	sl, #1
   18ea8:	mov	fp, r2
   18eac:	str	lr, [sp, #32]
   18eb0:	sub	sp, sp, #12
   18eb4:	ldrh	r5, [sp, #52]	; 0x34
   18eb8:	str	sl, [sp]
   18ebc:	str	r9, [sp, #4]
   18ec0:	ldr	r7, [sp, #48]	; 0x30
   18ec4:	mov	r3, r5
   18ec8:	bl	180dc <flatcc_verify_vector_field@@Base>
   18ecc:	cmp	r0, #0
   18ed0:	bne	18f6c <flatcc_verify_struct_as_nested_root@@Base+0xe8>
   18ed4:	ldrh	r3, [r8, #22]
   18ed8:	add	r1, r4, #2
   18edc:	lsl	r1, r1, #1
   18ee0:	uxth	r1, r1
   18ee4:	cmp	r3, r1
   18ee8:	bls	18f4c <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   18eec:	ldr	r3, [r8, #12]
   18ef0:	ldrh	r3, [r3, r1]
   18ef4:	cmp	r3, #0
   18ef8:	beq	18f4c <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   18efc:	ldr	r2, [r8]
   18f00:	ldr	r1, [r8, #16]
   18f04:	add	r3, r3, r1
   18f08:	adds	r0, r2, r3
   18f0c:	beq	18f4c <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   18f10:	ldr	ip, [r2, r3]
   18f14:	mov	r3, r7
   18f18:	mov	r2, r6
   18f1c:	ldr	r1, [r0, ip]
   18f20:	add	r0, r0, ip
   18f24:	add	r0, r0, #4
   18f28:	str	r5, [sp, #48]	; 0x30
   18f2c:	add	sp, sp, #12
   18f30:	ldrd	r4, [sp]
   18f34:	ldrd	r6, [sp, #8]
   18f38:	ldrd	r8, [sp, #16]
   18f3c:	ldrd	sl, [sp, #24]
   18f40:	ldr	lr, [sp, #32]
   18f44:	add	sp, sp, #36	; 0x24
   18f48:	b	18af4 <flatcc_verify_struct_as_root@@Base>
   18f4c:	mov	r0, #0
   18f50:	add	sp, sp, #12
   18f54:	ldrd	r4, [sp]
   18f58:	ldrd	r6, [sp, #8]
   18f5c:	ldrd	r8, [sp, #16]
   18f60:	ldrd	sl, [sp, #24]
   18f64:	add	sp, sp, #32
   18f68:	pop	{pc}		; (ldr pc, [sp], #4)
   18f6c:	mov	r3, r5
   18f70:	mov	r2, fp
   18f74:	str	sl, [sp, #48]	; 0x30
   18f78:	mov	r1, r4
   18f7c:	mov	r0, r8
   18f80:	str	r9, [sp, #52]	; 0x34
   18f84:	add	sp, sp, #12
   18f88:	ldrd	r4, [sp]
   18f8c:	ldrd	r6, [sp, #8]
   18f90:	ldrd	r8, [sp, #16]
   18f94:	ldrd	sl, [sp, #24]
   18f98:	ldr	lr, [sp, #32]
   18f9c:	add	sp, sp, #36	; 0x24
   18fa0:	b	180dc <flatcc_verify_vector_field@@Base>

00018fa4 <flatcc_verify_table_as_nested_root@@Base>:
   18fa4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18fa8:	mov	r5, r0
   18fac:	mov	r4, r1
   18fb0:	strd	r6, [sp, #8]
   18fb4:	mvn	r7, #0
   18fb8:	mov	r6, r3
   18fbc:	strd	r8, [sp, #16]
   18fc0:	mov	r8, #1
   18fc4:	str	sl, [sp, #24]
   18fc8:	mov	sl, r2
   18fcc:	str	lr, [sp, #28]
   18fd0:	sub	sp, sp, #32
   18fd4:	ldrh	r9, [sp, #64]	; 0x40
   18fd8:	str	r8, [sp]
   18fdc:	str	r7, [sp, #4]
   18fe0:	mov	r3, r9
   18fe4:	bl	180dc <flatcc_verify_vector_field@@Base>
   18fe8:	cmp	r0, #0
   18fec:	bne	1912c <flatcc_verify_table_as_nested_root@@Base+0x188>
   18ff0:	ldrh	r3, [r5, #22]
   18ff4:	add	r1, r4, #2
   18ff8:	lsl	r1, r1, #1
   18ffc:	uxth	r1, r1
   19000:	cmp	r3, r1
   19004:	bls	19110 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   19008:	ldr	r3, [r5, #12]
   1900c:	ldrh	r3, [r3, r1]
   19010:	cmp	r3, #0
   19014:	beq	19110 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   19018:	ldr	r2, [r5]
   1901c:	ldr	r1, [r5, #16]
   19020:	add	r3, r3, r1
   19024:	adds	r1, r2, r3
   19028:	beq	19110 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   1902c:	ldr	r4, [r2, r3]
   19030:	mov	r2, r6
   19034:	ldr	r7, [r1, r4]
   19038:	add	r4, r1, r4
   1903c:	add	r8, r4, #4
   19040:	mov	r0, r8
   19044:	mov	r1, r7
   19048:	bl	18a18 <flatcc_verify_buffer_header@@Base>
   1904c:	cmp	r0, #0
   19050:	bne	19154 <flatcc_verify_table_as_nested_root@@Base+0x1b0>
   19054:	ldr	r3, [r5, #8]
   19058:	ldr	r2, [r4, #4]
   1905c:	sub	r3, r3, #1
   19060:	cmp	r3, #0
   19064:	moveq	r0, #3
   19068:	str	r3, [sp, #16]
   1906c:	beq	19110 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   19070:	cmp	r2, #0
   19074:	beq	1914c <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   19078:	add	r3, r2, #4
   1907c:	cmp	r7, r3
   19080:	bcc	1914c <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   19084:	tst	r2, #3
   19088:	bne	1914c <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   1908c:	str	r2, [sp, #24]
   19090:	ldr	r3, [r8, r2]
   19094:	subs	r3, r2, r3
   19098:	bmi	19168 <flatcc_verify_table_as_nested_root@@Base+0x1c4>
   1909c:	tst	r3, #1
   190a0:	bne	19168 <flatcc_verify_table_as_nested_root@@Base+0x1c4>
   190a4:	add	r0, r3, #2
   190a8:	cmp	r7, r0
   190ac:	movcc	r0, #27
   190b0:	bcc	19110 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   190b4:	ldrh	r1, [r8, r3]
   190b8:	add	ip, r8, r3
   190bc:	add	r3, r1, r3
   190c0:	strh	r1, [sp, #30]
   190c4:	cmp	r7, r3
   190c8:	bcc	19170 <flatcc_verify_table_as_nested_root@@Base+0x1cc>
   190cc:	tst	r1, #1
   190d0:	bne	19170 <flatcc_verify_table_as_nested_root@@Base+0x1cc>
   190d4:	cmp	r1, #3
   190d8:	movls	r0, #28
   190dc:	bls	19110 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   190e0:	ldrh	r3, [r8, r0]
   190e4:	sub	r2, r7, r2
   190e8:	cmp	r2, r3
   190ec:	strh	r3, [sp, #28]
   190f0:	movcc	r0, #20
   190f4:	bcc	19110 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   190f8:	add	r0, sp, #8
   190fc:	ldr	r3, [sp, #68]	; 0x44
   19100:	str	r8, [sp, #8]
   19104:	str	r7, [sp, #12]
   19108:	str	ip, [sp, #20]
   1910c:	blx	r3
   19110:	add	sp, sp, #32
   19114:	ldrd	r4, [sp]
   19118:	ldrd	r6, [sp, #8]
   1911c:	ldrd	r8, [sp, #16]
   19120:	ldr	sl, [sp, #24]
   19124:	add	sp, sp, #28
   19128:	pop	{pc}		; (ldr pc, [sp], #4)
   1912c:	mov	r3, r9
   19130:	mov	r2, sl
   19134:	str	r8, [sp]
   19138:	mov	r1, r4
   1913c:	mov	r0, r5
   19140:	str	r7, [sp, #4]
   19144:	bl	180dc <flatcc_verify_vector_field@@Base>
   19148:	b	19110 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   1914c:	mov	r0, #15
   19150:	b	19110 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   19154:	mov	r2, r6
   19158:	mov	r1, r7
   1915c:	mov	r0, r8
   19160:	bl	18a18 <flatcc_verify_buffer_header@@Base>
   19164:	b	19110 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   19168:	mov	r0, #29
   1916c:	b	19110 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   19170:	mov	r0, #30
   19174:	b	19110 <flatcc_verify_table_as_nested_root@@Base+0x16c>

00019178 <flatcc_verify_union_field@@Base>:
   19178:	strd	r4, [sp, #-20]!	; 0xffffffec
   1917c:	add	r1, r1, #1
   19180:	ldr	r4, [r0, #12]
   19184:	lsl	r1, r1, #1
   19188:	strd	r6, [sp, #8]
   1918c:	str	lr, [sp, #16]
   19190:	uxth	r1, r1
   19194:	sub	sp, sp, #28
   19198:	ldrh	lr, [r0, #22]
   1919c:	cmp	r1, lr
   191a0:	bcs	1924c <flatcc_verify_union_field@@Base+0xd4>
   191a4:	ldrh	ip, [r4, r1]
   191a8:	cmp	ip, #0
   191ac:	beq	1924c <flatcc_verify_union_field@@Base+0xd4>
   191b0:	ldrh	r5, [r0, #20]
   191b4:	add	r6, ip, #1
   191b8:	cmp	r6, r5
   191bc:	bhi	1929c <flatcc_verify_union_field@@Base+0x124>
   191c0:	ldr	r6, [r0]
   191c4:	add	r1, r1, #2
   191c8:	uxth	r1, r1
   191cc:	ldr	r7, [r0, #16]
   191d0:	cmp	lr, r1
   191d4:	add	lr, ip, r7
   191d8:	ldrb	ip, [r6, lr]
   191dc:	bls	192a4 <flatcc_verify_union_field@@Base+0x12c>
   191e0:	cmp	ip, #0
   191e4:	ldrh	r1, [r4, r1]
   191e8:	beq	1928c <flatcc_verify_union_field@@Base+0x114>
   191ec:	cmp	r1, #0
   191f0:	beq	192b4 <flatcc_verify_union_field@@Base+0x13c>
   191f4:	add	r2, r1, #4
   191f8:	cmp	r5, r2
   191fc:	bcc	1929c <flatcc_verify_union_field@@Base+0x124>
   19200:	add	r1, r1, r7
   19204:	tst	r1, #3
   19208:	movne	r0, #12
   1920c:	bne	19278 <flatcc_verify_union_field@@Base+0x100>
   19210:	cmp	r1, #0
   19214:	beq	192c4 <flatcc_verify_union_field@@Base+0x14c>
   19218:	mov	r2, r0
   1921c:	str	r1, [sp, #16]
   19220:	mov	r0, sp
   19224:	ldr	ip, [r2, #4]
   19228:	ldr	r2, [r2, #8]
   1922c:	stm	sp, {r6, ip}
   19230:	str	r2, [sp, #8]
   19234:	ldr	r2, [r6, r1]
   19238:	str	r2, [sp, #20]
   1923c:	ldrb	r2, [r6, lr]
   19240:	strb	r2, [sp, #12]
   19244:	blx	r3
   19248:	b	19278 <flatcc_verify_union_field@@Base+0x100>
   1924c:	add	r1, r1, #2
   19250:	uxth	r1, r1
   19254:	cmp	lr, r1
   19258:	bls	1926c <flatcc_verify_union_field@@Base+0xf4>
   1925c:	ldrh	r3, [r4, r1]
   19260:	cmp	r3, #0
   19264:	movne	r0, #23
   19268:	bne	19278 <flatcc_verify_union_field@@Base+0x100>
   1926c:	cmp	r2, #0
   19270:	moveq	r0, #0
   19274:	movne	r0, #21
   19278:	add	sp, sp, #28
   1927c:	ldrd	r4, [sp]
   19280:	ldrd	r6, [sp, #8]
   19284:	add	sp, sp, #16
   19288:	pop	{pc}		; (ldr pc, [sp], #4)
   1928c:	cmp	r1, #0
   19290:	movne	r0, #24
   19294:	moveq	r0, #0
   19298:	b	19278 <flatcc_verify_union_field@@Base+0x100>
   1929c:	mov	r0, #13
   192a0:	b	19278 <flatcc_verify_union_field@@Base+0x100>
   192a4:	cmp	ip, #0
   192a8:	bne	192b4 <flatcc_verify_union_field@@Base+0x13c>
   192ac:	mov	r0, ip
   192b0:	b	19278 <flatcc_verify_union_field@@Base+0x100>
   192b4:	cmp	r2, #0
   192b8:	moveq	r0, #0
   192bc:	movne	r0, #4
   192c0:	b	19278 <flatcc_verify_union_field@@Base+0x100>
   192c4:	mov	r0, r1
   192c8:	b	19278 <flatcc_verify_union_field@@Base+0x100>

000192cc <flatcc_verify_union_vector_field@@Base>:
   192cc:	ldrh	ip, [r0, #22]
   192d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   192d4:	add	r4, r1, #1
   192d8:	sub	r1, r1, #1
   192dc:	lsl	r4, r4, #1
   192e0:	strd	r6, [sp, #8]
   192e4:	uxth	r6, r1
   192e8:	strd	r8, [sp, #16]
   192ec:	uxth	r4, r4
   192f0:	strd	sl, [sp, #24]
   192f4:	cmp	r4, ip
   192f8:	str	lr, [sp, #32]
   192fc:	sub	sp, sp, #36	; 0x24
   19300:	ldr	lr, [r0, #12]
   19304:	bcs	194c4 <flatcc_verify_union_vector_field@@Base+0x1f8>
   19308:	ldrh	r1, [lr, r4]
   1930c:	cmp	r1, #0
   19310:	beq	194c4 <flatcc_verify_union_vector_field@@Base+0x1f8>
   19314:	mov	r9, #1
   19318:	mvn	fp, #0
   1931c:	mov	r8, r3
   19320:	mov	r1, r6
   19324:	mov	r3, r9
   19328:	stm	sp, {r9, fp}
   1932c:	mov	r7, r2
   19330:	mov	r5, r0
   19334:	bl	180dc <flatcc_verify_vector_field@@Base>
   19338:	subs	sl, r0, #0
   1933c:	bne	19508 <flatcc_verify_union_vector_field@@Base+0x23c>
   19340:	ldrh	r1, [r5, #22]
   19344:	cmp	r4, r1
   19348:	bcs	194a4 <flatcc_verify_union_vector_field@@Base+0x1d8>
   1934c:	ldr	ip, [r5, #12]
   19350:	ldrh	r3, [ip, r4]
   19354:	cmp	r3, #0
   19358:	beq	194a4 <flatcc_verify_union_vector_field@@Base+0x1d8>
   1935c:	ldr	r0, [r5]
   19360:	ldr	r2, [r5, #16]
   19364:	add	r3, r3, r2
   19368:	adds	lr, r0, r3
   1936c:	beq	194a4 <flatcc_verify_union_vector_field@@Base+0x1d8>
   19370:	add	r4, r4, #2
   19374:	uxth	r4, r4
   19378:	cmp	r1, r4
   1937c:	bls	194f0 <flatcc_verify_union_vector_field@@Base+0x224>
   19380:	ldrh	r1, [ip, r4]
   19384:	cmp	r1, #0
   19388:	beq	194f0 <flatcc_verify_union_vector_field@@Base+0x224>
   1938c:	ldrh	ip, [r5, #20]
   19390:	add	r4, r1, #4
   19394:	cmp	r4, ip
   19398:	movhi	sl, #13
   1939c:	bhi	194a4 <flatcc_verify_union_vector_field@@Base+0x1d8>
   193a0:	add	r2, r2, r1
   193a4:	tst	r2, #3
   193a8:	movne	sl, #12
   193ac:	bne	194a4 <flatcc_verify_union_vector_field@@Base+0x1d8>
   193b0:	cmp	r2, #0
   193b4:	beq	194a4 <flatcc_verify_union_vector_field@@Base+0x1d8>
   193b8:	ldr	ip, [r5, #8]
   193bc:	ldr	r1, [r0, r2]
   193c0:	cmp	ip, #0
   193c4:	movle	sl, #3
   193c8:	ble	194a4 <flatcc_verify_union_vector_field@@Base+0x1d8>
   193cc:	add	r1, r2, r1
   193d0:	cmp	r2, r1
   193d4:	bcs	19500 <flatcc_verify_union_vector_field@@Base+0x234>
   193d8:	ldr	r4, [r5, #4]
   193dc:	add	r2, r1, #4
   193e0:	cmp	r4, r2
   193e4:	bcc	19500 <flatcc_verify_union_vector_field@@Base+0x234>
   193e8:	tst	r2, #3
   193ec:	bne	19500 <flatcc_verify_union_vector_field@@Base+0x234>
   193f0:	ldr	r5, [r0, r1]
   193f4:	add	r6, r0, r1
   193f8:	cmn	r5, #-1073741823	; 0xc0000001
   193fc:	bhi	19528 <flatcc_verify_union_vector_field@@Base+0x25c>
   19400:	sub	r7, r4, r2
   19404:	cmp	r7, r5, lsl #2
   19408:	bcc	19528 <flatcc_verify_union_vector_field@@Base+0x25c>
   1940c:	ldr	r3, [r0, r3]
   19410:	ldr	r7, [lr, r3]
   19414:	add	lr, lr, r3
   19418:	cmp	r7, r5
   1941c:	bne	19548 <flatcc_verify_union_vector_field@@Base+0x27c>
   19420:	sub	ip, ip, #1
   19424:	cmp	r7, #0
   19428:	str	r0, [sp, #8]
   1942c:	str	r4, [sp, #12]
   19430:	str	ip, [sp, #16]
   19434:	beq	194a4 <flatcc_verify_union_vector_field@@Base+0x1d8>
   19438:	add	r5, lr, #4
   1943c:	rsb	r4, r0, #4
   19440:	add	r7, r7, r5
   19444:	add	r9, sp, #8
   19448:	b	1945c <flatcc_verify_union_vector_field@@Base+0x190>
   1944c:	cmp	r2, #0
   19450:	bne	19550 <flatcc_verify_union_vector_field@@Base+0x284>
   19454:	cmp	r5, r7
   19458:	beq	194a4 <flatcc_verify_union_vector_field@@Base+0x1d8>
   1945c:	add	r1, r4, r6
   19460:	ldr	r3, [r6, #4]!
   19464:	mov	r0, r9
   19468:	add	r5, r5, #1
   1946c:	ldrb	r2, [r5, #-1]
   19470:	cmp	r3, #0
   19474:	beq	1944c <flatcc_verify_union_vector_field@@Base+0x180>
   19478:	cmp	r2, #0
   1947c:	beq	19558 <flatcc_verify_union_vector_field@@Base+0x28c>
   19480:	strb	r2, [sp, #20]
   19484:	str	r1, [sp, #24]
   19488:	str	r3, [sp, #28]
   1948c:	blx	r8
   19490:	cmp	r0, #0
   19494:	beq	19454 <flatcc_verify_union_vector_field@@Base+0x188>
   19498:	mov	r0, r9
   1949c:	blx	r8
   194a0:	mov	sl, r0
   194a4:	mov	r0, sl
   194a8:	add	sp, sp, #36	; 0x24
   194ac:	ldrd	r4, [sp]
   194b0:	ldrd	r6, [sp, #8]
   194b4:	ldrd	r8, [sp, #16]
   194b8:	ldrd	sl, [sp, #24]
   194bc:	add	sp, sp, #32
   194c0:	pop	{pc}		; (ldr pc, [sp], #4)
   194c4:	add	r1, r4, #2
   194c8:	uxth	r1, r1
   194cc:	cmp	ip, r1
   194d0:	bls	194e0 <flatcc_verify_union_vector_field@@Base+0x214>
   194d4:	ldrh	r1, [lr, r1]
   194d8:	cmp	r1, #0
   194dc:	bne	19314 <flatcc_verify_union_vector_field@@Base+0x48>
   194e0:	cmp	r2, #0
   194e4:	movne	sl, #22
   194e8:	beq	19314 <flatcc_verify_union_vector_field@@Base+0x48>
   194ec:	b	194a4 <flatcc_verify_union_vector_field@@Base+0x1d8>
   194f0:	cmp	r7, #0
   194f4:	moveq	sl, #0
   194f8:	movne	sl, #4
   194fc:	b	194a4 <flatcc_verify_union_vector_field@@Base+0x1d8>
   19500:	mov	sl, #16
   19504:	b	194a4 <flatcc_verify_union_vector_field@@Base+0x1d8>
   19508:	mov	r2, r7
   1950c:	mov	r1, r6
   19510:	stm	sp, {r9, fp}
   19514:	mov	r3, r9
   19518:	mov	r0, r5
   1951c:	bl	180dc <flatcc_verify_vector_field@@Base>
   19520:	mov	sl, r0
   19524:	b	194a4 <flatcc_verify_union_vector_field@@Base+0x1d8>
   19528:	ldr	r3, [r0, r1]
   1952c:	cmn	r3, #-1073741823	; 0xc0000001
   19530:	movhi	sl, #25
   19534:	bhi	194a4 <flatcc_verify_union_vector_field@@Base+0x1d8>
   19538:	sub	r2, r4, r2
   1953c:	cmp	r2, r3, lsl #2
   19540:	movcc	sl, #26
   19544:	b	194a4 <flatcc_verify_union_vector_field@@Base+0x1d8>
   19548:	mov	sl, #34	; 0x22
   1954c:	b	194a4 <flatcc_verify_union_vector_field@@Base+0x1d8>
   19550:	mov	sl, #32
   19554:	b	194a4 <flatcc_verify_union_vector_field@@Base+0x1d8>
   19558:	mov	sl, #33	; 0x21
   1955c:	b	194a4 <flatcc_verify_union_vector_field@@Base+0x1d8>

00019560 <__libc_csu_init@@Base>:
   19560:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19564:	mov	r7, r0
   19568:	ldr	r6, [pc, #72]	; 195b8 <__libc_csu_init@@Base+0x58>
   1956c:	ldr	r5, [pc, #72]	; 195bc <__libc_csu_init@@Base+0x5c>
   19570:	add	r6, pc, r6
   19574:	add	r5, pc, r5
   19578:	sub	r6, r6, r5
   1957c:	mov	r8, r1
   19580:	mov	r9, r2
   19584:	bl	12268 <free@plt-0x20>
   19588:	asrs	r6, r6, #2
   1958c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19590:	mov	r4, #0
   19594:	add	r4, r4, #1
   19598:	ldr	r3, [r5], #4
   1959c:	mov	r2, r9
   195a0:	mov	r1, r8
   195a4:	mov	r0, r7
   195a8:	blx	r3
   195ac:	cmp	r6, r4
   195b0:	bne	19594 <__libc_csu_init@@Base+0x34>
   195b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   195b8:	muleq	r1, ip, r9
   195bc:	muleq	r1, r4, r9

000195c0 <__libc_csu_fini@@Base>:
   195c0:	bx	lr

Disassembly of section .fini:

000195c4 <.fini>:
   195c4:	push	{r3, lr}
   195c8:	pop	{r3, pc}
