
../repos/stcorp-coda-3a25f25/codafind:     file format elf32-littlearm


Disassembly of section .init:

000109c8 <.init>:
   109c8:	push	{r3, lr}
   109cc:	bl	10b14 <_start@@Base+0x3c>
   109d0:	pop	{r3, pc}

Disassembly of section .plt:

000109d4 <coda_match_filefilter@plt-0x14>:
   109d4:	push	{lr}		; (str lr, [sp, #-4]!)
   109d8:	ldr	lr, [pc, #4]	; 109e4 <coda_match_filefilter@plt-0x4>
   109dc:	add	lr, pc, lr
   109e0:	ldr	pc, [lr, #8]!
   109e4:	andeq	r1, r1, ip, lsl r6

000109e8 <coda_match_filefilter@plt>:
   109e8:	add	ip, pc, #0, 12
   109ec:	add	ip, ip, #69632	; 0x11000
   109f0:	ldr	pc, [ip, #1564]!	; 0x61c

000109f4 <strcmp@plt>:
   109f4:	add	ip, pc, #0, 12
   109f8:	add	ip, ip, #69632	; 0x11000
   109fc:	ldr	pc, [ip, #1556]!	; 0x614

00010a00 <printf@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #69632	; 0x11000
   10a08:	ldr	pc, [ip, #1548]!	; 0x60c

00010a0c <coda_set_definition_path_conditional@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #69632	; 0x11000
   10a14:	ldr	pc, [ip, #1540]!	; 0x604

00010a18 <coda_set_definition_path@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #69632	; 0x11000
   10a20:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a24 <fwrite@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #69632	; 0x11000
   10a2c:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a30 <coda_done@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #69632	; 0x11000
   10a38:	ldr	pc, [ip, #1516]!	; 0x5ec

00010a3c <puts@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #69632	; 0x11000
   10a44:	ldr	pc, [ip, #1508]!	; 0x5e4

00010a48 <__libc_start_main@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #69632	; 0x11000
   10a50:	ldr	pc, [ip, #1500]!	; 0x5dc

00010a54 <__gmon_start__@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #69632	; 0x11000
   10a5c:	ldr	pc, [ip, #1492]!	; 0x5d4

00010a60 <exit@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #69632	; 0x11000
   10a68:	ldr	pc, [ip, #1484]!	; 0x5cc

00010a6c <fprintf@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #69632	; 0x11000
   10a74:	ldr	pc, [ip, #1476]!	; 0x5c4

00010a78 <coda_init@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #69632	; 0x11000
   10a80:	ldr	pc, [ip, #1468]!	; 0x5bc

00010a84 <coda_set_option_perform_conversions@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #69632	; 0x11000
   10a8c:	ldr	pc, [ip, #1460]!	; 0x5b4

00010a90 <putchar@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #69632	; 0x11000
   10a98:	ldr	pc, [ip, #1452]!	; 0x5ac

00010a9c <coda_errno_to_string@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #69632	; 0x11000
   10aa4:	ldr	pc, [ip, #1444]!	; 0x5a4

00010aa8 <coda_get_libcoda_version@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #69632	; 0x11000
   10ab0:	ldr	pc, [ip, #1436]!	; 0x59c

00010ab4 <coda_get_errno@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #69632	; 0x11000
   10abc:	ldr	pc, [ip, #1428]!	; 0x594

00010ac0 <abort@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #69632	; 0x11000
   10ac8:	ldr	pc, [ip, #1420]!	; 0x58c

00010acc <__assert_fail@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #69632	; 0x11000
   10ad4:	ldr	pc, [ip, #1412]!	; 0x584

Disassembly of section .text:

00010ad8 <_start@@Base>:
   10ad8:	mov	fp, #0
   10adc:	mov	lr, #0
   10ae0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ae4:	mov	r2, sp
   10ae8:	push	{r2}		; (str r2, [sp, #-4]!)
   10aec:	push	{r0}		; (str r0, [sp, #-4]!)
   10af0:	ldr	ip, [pc, #16]	; 10b08 <_start@@Base+0x30>
   10af4:	push	{ip}		; (str ip, [sp, #-4]!)
   10af8:	ldr	r0, [pc, #12]	; 10b0c <_start@@Base+0x34>
   10afc:	ldr	r3, [pc, #12]	; 10b10 <_start@@Base+0x38>
   10b00:	bl	10a48 <__libc_start_main@plt>
   10b04:	bl	10ac0 <abort@plt>
   10b08:	andeq	r1, r1, ip, lsl #5
   10b0c:	andeq	r0, r1, r0, lsr sp
   10b10:	andeq	r1, r1, ip, lsr #4
   10b14:	ldr	r3, [pc, #20]	; 10b30 <_start@@Base+0x58>
   10b18:	ldr	r2, [pc, #20]	; 10b34 <_start@@Base+0x5c>
   10b1c:	add	r3, pc, r3
   10b20:	ldr	r2, [r3, r2]
   10b24:	cmp	r2, #0
   10b28:	bxeq	lr
   10b2c:	b	10a54 <__gmon_start__@plt>
   10b30:	ldrdeq	r1, [r1], -ip
   10b34:	andeq	r0, r0, r0, rrx
   10b38:	ldr	r0, [pc, #24]	; 10b58 <_start@@Base+0x80>
   10b3c:	ldr	r3, [pc, #24]	; 10b5c <_start@@Base+0x84>
   10b40:	cmp	r3, r0
   10b44:	bxeq	lr
   10b48:	ldr	r3, [pc, #16]	; 10b60 <_start@@Base+0x88>
   10b4c:	cmp	r3, #0
   10b50:	bxeq	lr
   10b54:	bx	r3
   10b58:	andeq	r2, r2, r0, ror r0
   10b5c:	andeq	r2, r2, r0, ror r0
   10b60:	andeq	r0, r0, r0
   10b64:	ldr	r0, [pc, #36]	; 10b90 <_start@@Base+0xb8>
   10b68:	ldr	r1, [pc, #36]	; 10b94 <_start@@Base+0xbc>
   10b6c:	sub	r1, r1, r0
   10b70:	asr	r1, r1, #2
   10b74:	add	r1, r1, r1, lsr #31
   10b78:	asrs	r1, r1, #1
   10b7c:	bxeq	lr
   10b80:	ldr	r3, [pc, #16]	; 10b98 <_start@@Base+0xc0>
   10b84:	cmp	r3, #0
   10b88:	bxeq	lr
   10b8c:	bx	r3
   10b90:	andeq	r2, r2, r0, ror r0
   10b94:	andeq	r2, r2, r0, ror r0
   10b98:	andeq	r0, r0, r0
   10b9c:	push	{r4, lr}
   10ba0:	ldr	r4, [pc, #24]	; 10bc0 <_start@@Base+0xe8>
   10ba4:	ldrb	r3, [r4]
   10ba8:	cmp	r3, #0
   10bac:	popne	{r4, pc}
   10bb0:	bl	10b38 <_start@@Base+0x60>
   10bb4:	mov	r3, #1
   10bb8:	strb	r3, [r4]
   10bbc:	pop	{r4, pc}
   10bc0:	andeq	r2, r2, r0, ror r0
   10bc4:	b	10b64 <_start@@Base+0x8c>

00010bc8 <callback@@Base>:
   10bc8:	push	{r4, sl, fp, lr}
   10bcc:	add	fp, sp, #8
   10bd0:	mov	r3, r2
   10bd4:	mov	r2, r0
   10bd8:	cmp	r1, #2
   10bdc:	beq	10c80 <callback@@Base+0xb8>
   10be0:	mov	r4, r1
   10be4:	cmp	r1, #1
   10be8:	beq	10cb8 <callback@@Base+0xf0>
   10bec:	cmp	r4, #0
   10bf0:	beq	10ca0 <callback@@Base+0xd8>
   10bf4:	ldr	r0, [pc, #276]	; 10d10 <callback@@Base+0x148>
   10bf8:	add	r0, pc, r0
   10bfc:	ldrb	r0, [r0]
   10c00:	cmp	r0, #1
   10c04:	bne	10c50 <callback@@Base+0x88>
   10c08:	ldr	r0, [pc, #260]	; 10d14 <callback@@Base+0x14c>
   10c0c:	mov	r1, r2
   10c10:	add	r0, pc, r0
   10c14:	bl	10a00 <printf@plt>
   10c18:	cmp	r4, #5
   10c1c:	bhi	10c78 <callback@@Base+0xb0>
   10c20:	add	r0, pc, #4
   10c24:	ldr	r1, [r0, r4, lsl #2]
   10c28:	add	pc, r0, r1
   10c2c:	andeq	r0, r0, ip, lsr #1
   10c30:	andeq	r0, r0, ip, asr #32
   10c34:	andeq	r0, r0, ip, asr #32
   10c38:	andeq	r0, r0, r8, lsl r0
   10c3c:	andeq	r0, r0, r0, asr #32
   10c40:	andeq	r0, r0, r4, lsr r0
   10c44:	ldr	r0, [pc, #216]	; 10d24 <callback@@Base+0x15c>
   10c48:	add	r0, pc, r0
   10c4c:	b	10c74 <callback@@Base+0xac>
   10c50:	cmp	r4, #4
   10c54:	bne	10c78 <callback@@Base+0xb0>
   10c58:	mov	r0, r2
   10c5c:	b	10c74 <callback@@Base+0xac>
   10c60:	ldr	r0, [pc, #192]	; 10d28 <callback@@Base+0x160>
   10c64:	add	r0, pc, r0
   10c68:	b	10c74 <callback@@Base+0xac>
   10c6c:	ldr	r0, [pc, #184]	; 10d2c <callback@@Base+0x164>
   10c70:	add	r0, pc, r0
   10c74:	bl	10a3c <puts@plt>
   10c78:	mov	r0, #0
   10c7c:	pop	{r4, sl, fp, pc}
   10c80:	ldr	r0, [pc, #120]	; 10d00 <callback@@Base+0x138>
   10c84:	ldr	r0, [pc, r0]
   10c88:	ldr	r0, [r0]
   10c8c:	ldr	r1, [pc, #112]	; 10d04 <callback@@Base+0x13c>
   10c90:	add	r1, pc, r1
   10c94:	bl	10a6c <fprintf@plt>
   10c98:	mov	r0, #0
   10c9c:	pop	{r4, sl, fp, pc}
   10ca0:	ldr	r0, [pc, #80]	; 10cf8 <callback@@Base+0x130>
   10ca4:	ldr	r0, [pc, r0]
   10ca8:	ldr	r0, [r0]
   10cac:	ldr	r1, [pc, #72]	; 10cfc <callback@@Base+0x134>
   10cb0:	add	r1, pc, r1
   10cb4:	b	10ccc <callback@@Base+0x104>
   10cb8:	ldr	r0, [pc, #72]	; 10d08 <callback@@Base+0x140>
   10cbc:	ldr	r0, [pc, r0]
   10cc0:	ldr	r0, [r0]
   10cc4:	ldr	r1, [pc, #64]	; 10d0c <callback@@Base+0x144>
   10cc8:	add	r1, pc, r1
   10ccc:	bl	10a6c <fprintf@plt>
   10cd0:	mov	r0, #0
   10cd4:	pop	{r4, sl, fp, pc}
   10cd8:	ldr	r0, [pc, #56]	; 10d18 <callback@@Base+0x150>
   10cdc:	ldr	r1, [pc, #56]	; 10d1c <callback@@Base+0x154>
   10ce0:	ldr	r3, [pc, #56]	; 10d20 <callback@@Base+0x158>
   10ce4:	mov	r2, #110	; 0x6e
   10ce8:	add	r0, pc, r0
   10cec:	add	r1, pc, r1
   10cf0:	add	r3, pc, r3
   10cf4:	bl	10acc <__assert_fail@plt>
   10cf8:			; <UNDEFINED> instruction: 0x000113b0
   10cfc:	andeq	r0, r0, r4, ror #11
   10d00:	ldrdeq	r1, [r1], -r0
   10d04:	andeq	r0, r0, ip, lsl #12
   10d08:	muleq	r1, r8, r3
   10d0c:	strdeq	r0, [r0], -r4
   10d10:	andeq	r1, r1, r4, ror r4
   10d14:	andeq	r0, r0, sl, asr #13
   10d18:	strdeq	r0, [r0], -r9
   10d1c:	strdeq	r0, [r0], -r7
   10d20:	andeq	r0, r0, pc, asr #12
   10d24:			; <UNDEFINED> instruction: 0x000007bc
   10d28:	muleq	r0, r7, r7
   10d2c:	andeq	r0, r0, lr, lsl #15

00010d30 <main@@Base>:
   10d30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d34:	add	fp, sp, #28
   10d38:	sub	sp, sp, #12
   10d3c:	mov	r4, r1
   10d40:	ldr	r1, [pc, #680]	; 10ff0 <main@@Base+0x2c0>
   10d44:	mov	r5, r0
   10d48:	mov	r0, #0
   10d4c:	cmp	r5, #1
   10d50:	add	r1, pc, r1
   10d54:	strb	r0, [r1]
   10d58:	beq	10fa4 <main@@Base+0x274>
   10d5c:	ldr	r6, [r4, #4]
   10d60:	ldr	r1, [pc, #652]	; 10ff4 <main@@Base+0x2c4>
   10d64:	add	r1, pc, r1
   10d68:	mov	r0, r6
   10d6c:	bl	109f4 <strcmp@plt>
   10d70:	cmp	r0, #0
   10d74:	beq	10fa4 <main@@Base+0x274>
   10d78:	ldr	r1, [pc, #632]	; 10ff8 <main@@Base+0x2c8>
   10d7c:	mov	r0, r6
   10d80:	add	r1, pc, r1
   10d84:	bl	109f4 <strcmp@plt>
   10d88:	cmp	r0, #0
   10d8c:	beq	10fa4 <main@@Base+0x274>
   10d90:	ldr	r1, [pc, #612]	; 10ffc <main@@Base+0x2cc>
   10d94:	mov	r0, r6
   10d98:	add	r1, pc, r1
   10d9c:	bl	109f4 <strcmp@plt>
   10da0:	cmp	r0, #0
   10da4:	beq	10fe4 <main@@Base+0x2b4>
   10da8:	ldr	r1, [pc, #592]	; 11000 <main@@Base+0x2d0>
   10dac:	mov	r0, r6
   10db0:	add	r1, pc, r1
   10db4:	bl	109f4 <strcmp@plt>
   10db8:	cmp	r0, #0
   10dbc:	beq	10fe4 <main@@Base+0x2b4>
   10dc0:	cmp	r5, #3
   10dc4:	blt	10de0 <main@@Base+0xb0>
   10dc8:	ldr	r1, [pc, #564]	; 11004 <main@@Base+0x2d4>
   10dcc:	mov	r0, r6
   10dd0:	add	r1, pc, r1
   10dd4:	bl	109f4 <strcmp@plt>
   10dd8:	cmp	r0, #0
   10ddc:	beq	10f5c <main@@Base+0x22c>
   10de0:	ldr	r0, [r4]
   10de4:	ldr	r2, [pc, #540]	; 11008 <main@@Base+0x2d8>
   10de8:	mov	r1, #0
   10dec:	add	r2, pc, r2
   10df0:	bl	10a0c <coda_set_definition_path_conditional@plt>
   10df4:	mov	sl, #1
   10df8:	cmp	r0, #0
   10dfc:	bne	10fb0 <main@@Base+0x280>
   10e00:	mov	r0, #0
   10e04:	cmp	sl, r5
   10e08:	bge	10f00 <main@@Base+0x1d0>
   10e0c:	str	r0, [sp, #8]
   10e10:	mov	r7, #1
   10e14:	ldr	r6, [pc, #496]	; 1100c <main@@Base+0x2dc>
   10e18:	ldr	r9, [pc, #496]	; 11010 <main@@Base+0x2e0>
   10e1c:	add	r6, pc, r6
   10e20:	add	r9, pc, r9
   10e24:	b	10e38 <main@@Base+0x108>
   10e28:	mov	r7, #0
   10e2c:	add	sl, sl, #1
   10e30:	cmp	sl, r5
   10e34:	bge	10f08 <main@@Base+0x1d8>
   10e38:	ldr	r8, [r4, sl, lsl #2]
   10e3c:	mov	r1, r6
   10e40:	mov	r0, r8
   10e44:	bl	109f4 <strcmp@plt>
   10e48:	cmp	r0, #0
   10e4c:	beq	10e28 <main@@Base+0xf8>
   10e50:	mov	r0, r8
   10e54:	mov	r1, r9
   10e58:	bl	109f4 <strcmp@plt>
   10e5c:	cmp	r0, #0
   10e60:	beq	10e28 <main@@Base+0xf8>
   10e64:	ldr	r1, [pc, #424]	; 11014 <main@@Base+0x2e4>
   10e68:	mov	r0, r8
   10e6c:	add	r1, pc, r1
   10e70:	bl	109f4 <strcmp@plt>
   10e74:	cmp	r0, #0
   10e78:	beq	10e94 <main@@Base+0x164>
   10e7c:	ldr	r1, [pc, #404]	; 11018 <main@@Base+0x2e8>
   10e80:	mov	r0, r8
   10e84:	add	r1, pc, r1
   10e88:	bl	109f4 <strcmp@plt>
   10e8c:	cmp	r0, #0
   10e90:	bne	10eb0 <main@@Base+0x180>
   10e94:	add	r0, sl, #1
   10e98:	cmp	r0, r5
   10e9c:	bge	10eb0 <main@@Base+0x180>
   10ea0:	ldr	r1, [r4, r0, lsl #2]
   10ea4:	ldrb	r2, [r1]
   10ea8:	cmp	r2, #45	; 0x2d
   10eac:	bne	10ef4 <main@@Base+0x1c4>
   10eb0:	ldr	r1, [pc, #356]	; 1101c <main@@Base+0x2ec>
   10eb4:	mov	r0, r8
   10eb8:	add	r1, pc, r1
   10ebc:	bl	109f4 <strcmp@plt>
   10ec0:	cmp	r0, #0
   10ec4:	beq	10ee0 <main@@Base+0x1b0>
   10ec8:	ldr	r1, [pc, #336]	; 11020 <main@@Base+0x2f0>
   10ecc:	mov	r0, r8
   10ed0:	add	r1, pc, r1
   10ed4:	bl	109f4 <strcmp@plt>
   10ed8:	cmp	r0, #0
   10edc:	bne	10f6c <main@@Base+0x23c>
   10ee0:	ldr	r0, [pc, #316]	; 11024 <main@@Base+0x2f4>
   10ee4:	mov	r1, #1
   10ee8:	add	r0, pc, r0
   10eec:	strb	r1, [r0]
   10ef0:	b	10e2c <main@@Base+0xfc>
   10ef4:	mov	sl, r0
   10ef8:	str	r1, [sp, #8]
   10efc:	b	10e2c <main@@Base+0xfc>
   10f00:	str	r0, [sp, #8]
   10f04:	mov	r7, #1
   10f08:	cmp	sl, r5
   10f0c:	beq	10f78 <main@@Base+0x248>
   10f10:	bl	10a78 <coda_init@plt>
   10f14:	cmp	r0, #0
   10f18:	bne	10fb0 <main@@Base+0x280>
   10f1c:	mov	r0, r7
   10f20:	bl	10a84 <coda_set_option_perform_conversions@plt>
   10f24:	mov	r0, #0
   10f28:	add	r2, r4, sl, lsl #2
   10f2c:	sub	r1, r5, sl
   10f30:	str	r0, [sp]
   10f34:	ldr	r3, [pc, #236]	; 11028 <main@@Base+0x2f8>
   10f38:	ldr	r3, [pc, r3]
   10f3c:	ldr	r0, [sp, #8]
   10f40:	bl	109e8 <coda_match_filefilter@plt>
   10f44:	cmp	r0, #0
   10f48:	bne	10fb0 <main@@Base+0x280>
   10f4c:	bl	10a30 <coda_done@plt>
   10f50:	mov	r0, #0
   10f54:	sub	sp, fp, #28
   10f58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f5c:	ldr	r0, [r4, #8]
   10f60:	bl	10a18 <coda_set_definition_path@plt>
   10f64:	mov	sl, #3
   10f68:	b	10e00 <main@@Base+0xd0>
   10f6c:	ldrb	r0, [r8]
   10f70:	cmp	r0, #45	; 0x2d
   10f74:	bne	10f08 <main@@Base+0x1d8>
   10f78:	ldr	r0, [pc, #180]	; 11034 <main@@Base+0x304>
   10f7c:	mov	r1, #25
   10f80:	mov	r2, #1
   10f84:	ldr	r0, [pc, r0]
   10f88:	ldr	r3, [r0]
   10f8c:	ldr	r0, [pc, #164]	; 11038 <main@@Base+0x308>
   10f90:	add	r0, pc, r0
   10f94:	bl	10a24 <fwrite@plt>
   10f98:	bl	1103c <main@@Base+0x30c>
   10f9c:	mov	r0, #1
   10fa0:	bl	10a60 <exit@plt>
   10fa4:	bl	1103c <main@@Base+0x30c>
   10fa8:	mov	r0, #0
   10fac:	bl	10a60 <exit@plt>
   10fb0:	ldr	r0, [pc, #116]	; 1102c <main@@Base+0x2fc>
   10fb4:	ldr	r0, [pc, r0]
   10fb8:	ldr	r4, [r0]
   10fbc:	bl	10ab4 <coda_get_errno@plt>
   10fc0:	ldr	r0, [r0]
   10fc4:	bl	10a9c <coda_errno_to_string@plt>
   10fc8:	ldr	r1, [pc, #96]	; 11030 <main@@Base+0x300>
   10fcc:	mov	r2, r0
   10fd0:	mov	r0, r4
   10fd4:	add	r1, pc, r1
   10fd8:	bl	10a6c <fprintf@plt>
   10fdc:	mov	r0, #1
   10fe0:	bl	10a60 <exit@plt>
   10fe4:	bl	111f0 <main@@Base+0x4c0>
   10fe8:	mov	r0, #0
   10fec:	bl	10a60 <exit@plt>
   10ff0:	andeq	r1, r1, ip, lsl r3
   10ff4:	andeq	r0, r0, r4, lsr #12
   10ff8:	andeq	r0, r0, ip, lsl #18
   10ffc:	strdeq	r0, [r0], -r3
   11000:	andeq	r0, r0, r2, lsl r9
   11004:			; <UNDEFINED> instruction: 0x000005be
   11008:	andeq	r0, r0, r5, lsr #11
   1100c:	muleq	r0, sl, r5
   11010:	andeq	r0, r0, r7, asr #13
   11014:	andeq	r0, r0, sp, asr #10
   11018:	andeq	r0, r0, r8, lsr r5
   1101c:	andeq	r0, r0, sp, lsl #10
   11020:	strdeq	r0, [r0], -r8
   11024:	andeq	r1, r1, r4, lsl #3
   11028:	andeq	r1, r1, r4, lsr #2
   1102c:	andeq	r1, r1, r0, lsr #1
   11030:	ldrdeq	r0, [r0], -r7
   11034:	ldrdeq	r1, [r1], -r0
   11038:	andeq	r0, r0, r4, asr #8
   1103c:	push	{fp, lr}
   11040:	mov	fp, sp
   11044:	ldr	r0, [pc, #324]	; 11190 <main@@Base+0x460>
   11048:	add	r0, pc, r0
   1104c:	bl	10a3c <puts@plt>
   11050:	ldr	r0, [pc, #316]	; 11194 <main@@Base+0x464>
   11054:	add	r0, pc, r0
   11058:	bl	10a3c <puts@plt>
   1105c:	ldr	r0, [pc, #308]	; 11198 <main@@Base+0x468>
   11060:	add	r0, pc, r0
   11064:	bl	10a3c <puts@plt>
   11068:	ldr	r0, [pc, #300]	; 1119c <main@@Base+0x46c>
   1106c:	add	r0, pc, r0
   11070:	bl	10a3c <puts@plt>
   11074:	mov	r0, #10
   11078:	bl	10a90 <putchar@plt>
   1107c:	ldr	r0, [pc, #284]	; 111a0 <main@@Base+0x470>
   11080:	add	r0, pc, r0
   11084:	bl	10a3c <puts@plt>
   11088:	ldr	r0, [pc, #276]	; 111a4 <main@@Base+0x474>
   1108c:	add	r0, pc, r0
   11090:	bl	10a3c <puts@plt>
   11094:	ldr	r0, [pc, #268]	; 111a8 <main@@Base+0x478>
   11098:	add	r0, pc, r0
   1109c:	bl	10a3c <puts@plt>
   110a0:	ldr	r0, [pc, #260]	; 111ac <main@@Base+0x47c>
   110a4:	add	r0, pc, r0
   110a8:	bl	10a3c <puts@plt>
   110ac:	ldr	r0, [pc, #252]	; 111b0 <main@@Base+0x480>
   110b0:	add	r0, pc, r0
   110b4:	bl	10a3c <puts@plt>
   110b8:	ldr	r0, [pc, #244]	; 111b4 <main@@Base+0x484>
   110bc:	add	r0, pc, r0
   110c0:	bl	10a3c <puts@plt>
   110c4:	ldr	r0, [pc, #236]	; 111b8 <main@@Base+0x488>
   110c8:	add	r0, pc, r0
   110cc:	bl	10a3c <puts@plt>
   110d0:	ldr	r0, [pc, #228]	; 111bc <main@@Base+0x48c>
   110d4:	add	r0, pc, r0
   110d8:	bl	10a3c <puts@plt>
   110dc:	ldr	r0, [pc, #220]	; 111c0 <main@@Base+0x490>
   110e0:	add	r0, pc, r0
   110e4:	bl	10a3c <puts@plt>
   110e8:	mov	r0, #10
   110ec:	bl	10a90 <putchar@plt>
   110f0:	ldr	r0, [pc, #204]	; 111c4 <main@@Base+0x494>
   110f4:	add	r0, pc, r0
   110f8:	bl	10a3c <puts@plt>
   110fc:	ldr	r0, [pc, #196]	; 111c8 <main@@Base+0x498>
   11100:	add	r0, pc, r0
   11104:	bl	10a3c <puts@plt>
   11108:	mov	r0, #10
   1110c:	bl	10a90 <putchar@plt>
   11110:	ldr	r0, [pc, #180]	; 111cc <main@@Base+0x49c>
   11114:	add	r0, pc, r0
   11118:	bl	10a3c <puts@plt>
   1111c:	ldr	r0, [pc, #172]	; 111d0 <main@@Base+0x4a0>
   11120:	add	r0, pc, r0
   11124:	bl	10a3c <puts@plt>
   11128:	mov	r0, #10
   1112c:	bl	10a90 <putchar@plt>
   11130:	ldr	r0, [pc, #156]	; 111d4 <main@@Base+0x4a4>
   11134:	add	r0, pc, r0
   11138:	bl	10a3c <puts@plt>
   1113c:	ldr	r0, [pc, #148]	; 111d8 <main@@Base+0x4a8>
   11140:	add	r0, pc, r0
   11144:	bl	10a3c <puts@plt>
   11148:	ldr	r0, [pc, #140]	; 111dc <main@@Base+0x4ac>
   1114c:	add	r0, pc, r0
   11150:	bl	10a3c <puts@plt>
   11154:	ldr	r0, [pc, #132]	; 111e0 <main@@Base+0x4b0>
   11158:	add	r0, pc, r0
   1115c:	bl	10a3c <puts@plt>
   11160:	ldr	r0, [pc, #124]	; 111e4 <main@@Base+0x4b4>
   11164:	add	r0, pc, r0
   11168:	bl	10a3c <puts@plt>
   1116c:	ldr	r0, [pc, #116]	; 111e8 <main@@Base+0x4b8>
   11170:	add	r0, pc, r0
   11174:	bl	10a3c <puts@plt>
   11178:	ldr	r0, [pc, #108]	; 111ec <main@@Base+0x4bc>
   1117c:	add	r0, pc, r0
   11180:	bl	10a3c <puts@plt>
   11184:	mov	r0, #10
   11188:	pop	{fp, lr}
   1118c:	b	10a90 <putchar@plt>
   11190:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11194:	andeq	r0, r0, fp, asr #7
   11198:	andeq	r0, r0, r0, lsl #8
   1119c:	andeq	r0, r0, r3, asr #8
   111a0:	andeq	r0, r0, r6, asr #8
   111a4:	andeq	r0, r0, fp, asr #8
   111a8:	andeq	r0, r0, r5, ror #8
   111ac:	muleq	r0, r3, r4
   111b0:			; <UNDEFINED> instruction: 0x000004b6
   111b4:	strdeq	r0, [r0], -r2
   111b8:	andeq	r0, r0, r5, lsr r5
   111bc:	andeq	r0, r0, r5, asr r5
   111c0:	andeq	r0, r0, r3, ror #10
   111c4:	andeq	r0, r0, r7, lsl #11
   111c8:	muleq	r0, r3, r5
   111cc:	muleq	r0, sp, r5
   111d0:	andeq	r0, r0, ip, lsr #11
   111d4:	andeq	r0, r0, sl, asr #11
   111d8:	andeq	r0, r0, ip, lsl #12
   111dc:	andeq	r0, r0, r9, asr #12
   111e0:	andeq	r0, r0, r8, ror #12
   111e4:	andeq	r0, r0, r8, lsr #13
   111e8:	andeq	r0, r0, r2, ror #13
   111ec:	andeq	r0, r0, r5, lsl r7
   111f0:	push	{fp, lr}
   111f4:	mov	fp, sp
   111f8:	bl	10aa8 <coda_get_libcoda_version@plt>
   111fc:	mov	r1, r0
   11200:	ldr	r0, [pc, #28]	; 11224 <main@@Base+0x4f4>
   11204:	add	r0, pc, r0
   11208:	bl	10a00 <printf@plt>
   1120c:	ldr	r0, [pc, #20]	; 11228 <main@@Base+0x4f8>
   11210:	add	r0, pc, r0
   11214:	bl	10a3c <puts@plt>
   11218:	mov	r0, #10
   1121c:	pop	{fp, lr}
   11220:	b	10a90 <putchar@plt>
   11224:	andeq	r0, r0, sl, ror #3
   11228:	andeq	r0, r0, r1, asr #13

0001122c <__libc_csu_init@@Base>:
   1122c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11230:	mov	r7, r0
   11234:	ldr	r6, [pc, #72]	; 11284 <__libc_csu_init@@Base+0x58>
   11238:	ldr	r5, [pc, #72]	; 11288 <__libc_csu_init@@Base+0x5c>
   1123c:	add	r6, pc, r6
   11240:	add	r5, pc, r5
   11244:	sub	r6, r6, r5
   11248:	mov	r8, r1
   1124c:	mov	r9, r2
   11250:	bl	109c8 <coda_match_filefilter@plt-0x20>
   11254:	asrs	r6, r6, #2
   11258:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1125c:	mov	r4, #0
   11260:	add	r4, r4, #1
   11264:	ldr	r3, [r5], #4
   11268:	mov	r2, r9
   1126c:	mov	r1, r8
   11270:	mov	r0, r7
   11274:	blx	r3
   11278:	cmp	r6, r4
   1127c:	bne	11260 <__libc_csu_init@@Base+0x34>
   11280:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11284:			; <UNDEFINED> instruction: 0x00010cb0
   11288:	andeq	r0, r1, r8, lsr #25

0001128c <__libc_csu_fini@@Base>:
   1128c:	bx	lr

Disassembly of section .fini:

00011290 <.fini>:
   11290:	push	{r3, lr}
   11294:	pop	{r3, pc}
