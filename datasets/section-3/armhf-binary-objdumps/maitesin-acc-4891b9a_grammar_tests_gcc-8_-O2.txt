
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

000117f0 <.init>:
   117f0:	push	{r3, lr}
   117f4:	bl	122a4 <_start@@Base+0x3c>
   117f8:	pop	{r3, pc}

Disassembly of section .plt:

000117fc <fdopen@plt-0x14>:
   117fc:	push	{lr}		; (str lr, [sp, #-4]!)
   11800:	ldr	lr, [pc, #4]	; 1180c <fdopen@plt-0x4>
   11804:	add	lr, pc, lr
   11808:	ldr	pc, [lr, #8]!
   1180c:	strdeq	r9, [r1], -r4

00011810 <fdopen@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #102400	; 0x19000
   11818:	ldr	pc, [ip, #2036]!	; 0x7f4

0001181c <raise@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #102400	; 0x19000
   11824:	ldr	pc, [ip, #2028]!	; 0x7ec

00011828 <setbuf@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #102400	; 0x19000
   11830:	ldr	pc, [ip, #2020]!	; 0x7e4

00011834 <printf@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #102400	; 0x19000
   1183c:	ldr	pc, [ip, #2012]!	; 0x7dc

00011840 <fflush@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #102400	; 0x19000
   11848:	ldr	pc, [ip, #2004]!	; 0x7d4

0001184c <free@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #102400	; 0x19000
   11854:	ldr	pc, [ip, #1996]!	; 0x7cc

00011858 <memcpy@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #102400	; 0x19000
   11860:	ldr	pc, [ip, #1988]!	; 0x7c4

00011864 <ftell@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #102400	; 0x19000
   1186c:	ldr	pc, [ip, #1980]!	; 0x7bc

00011870 <fwrite@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #102400	; 0x19000
   11878:	ldr	pc, [ip, #1972]!	; 0x7b4

0001187c <strcpy@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #102400	; 0x19000
   11884:	ldr	pc, [ip, #1964]!	; 0x7ac

00011888 <fread@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #102400	; 0x19000
   11890:	ldr	pc, [ip, #1956]!	; 0x7a4

00011894 <open64@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #102400	; 0x19000
   1189c:	ldr	pc, [ip, #1948]!	; 0x79c

000118a0 <getenv@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #102400	; 0x19000
   118a8:	ldr	pc, [ip, #1940]!	; 0x794

000118ac <puts@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #102400	; 0x19000
   118b4:	ldr	pc, [ip, #1932]!	; 0x78c

000118b8 <malloc@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #102400	; 0x19000
   118c0:	ldr	pc, [ip, #1924]!	; 0x784

000118c4 <__libc_start_main@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #102400	; 0x19000
   118cc:	ldr	pc, [ip, #1916]!	; 0x77c

000118d0 <__gmon_start__@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #102400	; 0x19000
   118d8:	ldr	pc, [ip, #1908]!	; 0x774

000118dc <getpid@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #102400	; 0x19000
   118e4:	ldr	pc, [ip, #1900]!	; 0x76c

000118e8 <exit@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #102400	; 0x19000
   118f0:	ldr	pc, [ip, #1892]!	; 0x764

000118f4 <strlen@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #102400	; 0x19000
   118fc:	ldr	pc, [ip, #1884]!	; 0x75c

00011900 <fprintf@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #102400	; 0x19000
   11908:	ldr	pc, [ip, #1876]!	; 0x754

0001190c <__errno_location@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #102400	; 0x19000
   11914:	ldr	pc, [ip, #1868]!	; 0x74c

00011918 <mkdir@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #102400	; 0x19000
   11920:	ldr	pc, [ip, #1860]!	; 0x744

00011924 <memset@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #102400	; 0x19000
   1192c:	ldr	pc, [ip, #1852]!	; 0x73c

00011930 <access@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #102400	; 0x19000
   11938:	ldr	pc, [ip, #1844]!	; 0x734

0001193c <fclose@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #102400	; 0x19000
   11944:	ldr	pc, [ip, #1836]!	; 0x72c

00011948 <strnlen@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #102400	; 0x19000
   11950:	ldr	pc, [ip, #1828]!	; 0x724

00011954 <fcntl64@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #102400	; 0x19000
   1195c:	ldr	pc, [ip, #1820]!	; 0x71c

00011960 <vfprintf@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #102400	; 0x19000
   11968:	ldr	pc, [ip, #1812]!	; 0x714

0001196c <atoi@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #102400	; 0x19000
   11974:	ldr	pc, [ip, #1804]!	; 0x70c

00011978 <fopen64@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #102400	; 0x19000
   11980:	ldr	pc, [ip, #1796]!	; 0x704

00011984 <fseek@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #102400	; 0x19000
   1198c:	ldr	pc, [ip, #1788]!	; 0x6fc

00011990 <strncmp@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #102400	; 0x19000
   11998:	ldr	pc, [ip, #1780]!	; 0x6f4

0001199c <abort@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #102400	; 0x19000
   119a4:	ldr	pc, [ip, #1772]!	; 0x6ec

000119a8 <close@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #102400	; 0x19000
   119b0:	ldr	pc, [ip, #1764]!	; 0x6e4

000119b4 <__assert_fail@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #102400	; 0x19000
   119bc:	ldr	pc, [ip, #1756]!	; 0x6dc

Disassembly of section .text:

000119c0 <main@@Base-0x10>:
   119c0:	b	193b4 <__gcov_sort_n_vals@@Base+0x430>
   119c4:	b	193b4 <__gcov_sort_n_vals@@Base+0x430>
   119c8:	b	193b4 <__gcov_sort_n_vals@@Base+0x430>
   119cc:	b	193b4 <__gcov_sort_n_vals@@Base+0x430>

000119d0 <main@@Base>:
   119d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   119d4:	mov	r1, #0
   119d8:	ldr	r5, [pc, #2028]	; 121cc <main@@Base+0x7fc>
   119dc:	ldr	ip, [pc, #2028]	; 121d0 <main@@Base+0x800>
   119e0:	ldr	r2, [pc, #2028]	; 121d4 <main@@Base+0x804>
   119e4:	add	r5, pc, r5
   119e8:	add	r4, r5, #1520	; 0x5f0
   119ec:	ldr	r3, [r4, #-8]
   119f0:	add	ip, pc, ip
   119f4:	ldr	r0, [r4, #-4]
   119f8:	strd	r6, [sp, #8]
   119fc:	strd	r8, [sp, #16]
   11a00:	add	r9, r5, #1840	; 0x730
   11a04:	adds	r3, r3, #1
   11a08:	strd	sl, [sp, #24]
   11a0c:	str	lr, [sp, #32]
   11a10:	sub	sp, sp, #12
   11a14:	adc	r0, r0, r1
   11a18:	str	r3, [r4, #-8]
   11a1c:	ldr	r7, [pc, #1972]	; 121d8 <main@@Base+0x808>
   11a20:	str	r0, [r4, #-4]
   11a24:	ldr	r6, [ip, r2]
   11a28:	ldr	r8, [pc, #1964]	; 121dc <main@@Base+0x80c>
   11a2c:	add	r7, pc, r7
   11a30:	ldr	r0, [r6]
   11a34:	bl	11828 <setbuf@plt>
   11a38:	ldm	r4, {r3, ip}
   11a3c:	mov	r1, #1
   11a40:	mov	r0, r7
   11a44:	mov	r2, #14
   11a48:	str	r7, [sp]
   11a4c:	add	r8, pc, r8
   11a50:	ldr	r7, [pc, #1928]	; 121e0 <main@@Base+0x810>
   11a54:	adds	r3, r3, r1
   11a58:	adc	ip, ip, #0
   11a5c:	add	r7, pc, r7
   11a60:	stm	r4, {r3, ip}
   11a64:	ldr	r3, [r6]
   11a68:	bl	11870 <fwrite@plt>
   11a6c:	ldr	r3, [r4, #8]
   11a70:	mov	r1, #1
   11a74:	mov	r2, #14
   11a78:	ldr	ip, [r4, #12]
   11a7c:	ldr	r0, [pc, #1888]	; 121e4 <main@@Base+0x814>
   11a80:	adds	r3, r3, r1
   11a84:	adc	ip, ip, #0
   11a88:	str	r3, [r4, #8]
   11a8c:	ldr	r3, [r6]
   11a90:	add	r0, pc, r0
   11a94:	str	ip, [r4, #12]
   11a98:	bl	11870 <fwrite@plt>
   11a9c:	ldr	r0, [r4, #16]
   11aa0:	mov	r1, #1
   11aa4:	mov	r2, #15
   11aa8:	ldr	ip, [r4, #20]
   11aac:	ldr	r3, [r6]
   11ab0:	adds	r0, r0, r1
   11ab4:	ldr	r6, [pc, #1836]	; 121e8 <main@@Base+0x818>
   11ab8:	str	r0, [r4, #16]
   11abc:	adc	ip, ip, #0
   11ac0:	ldr	r0, [pc, #1828]	; 121ec <main@@Base+0x81c>
   11ac4:	str	ip, [r4, #20]
   11ac8:	add	r6, pc, r6
   11acc:	add	r0, pc, r0
   11ad0:	bl	11870 <fwrite@plt>
   11ad4:	ldr	r3, [r4, #24]
   11ad8:	mov	r0, #0
   11adc:	ldr	r2, [r4, #28]
   11ae0:	adds	r3, r3, #1
   11ae4:	adc	r2, r2, r0
   11ae8:	str	r3, [r4, #24]
   11aec:	str	r2, [r4, #28]
   11af0:	bl	11840 <fflush@plt>
   11af4:	ldr	r3, [r4, #32]
   11af8:	mov	r1, r8
   11afc:	mov	r0, r7
   11b00:	ldr	r2, [r4, #36]	; 0x24
   11b04:	adds	r3, r3, #1
   11b08:	adc	r2, r2, #0
   11b0c:	str	r3, [r4, #32]
   11b10:	str	r2, [r4, #36]	; 0x24
   11b14:	ldr	r2, [pc, #1748]	; 121f0 <main@@Base+0x820>
   11b18:	add	r2, pc, r2
   11b1c:	bl	11834 <printf@plt>
   11b20:	ldr	r3, [r4, #40]	; 0x28
   11b24:	ldr	r2, [r4, #44]	; 0x2c
   11b28:	adds	r3, r3, #1
   11b2c:	adc	r2, r2, #0
   11b30:	str	r3, [r4, #40]	; 0x28
   11b34:	str	r2, [r4, #44]	; 0x2c
   11b38:	bl	127ac <setup@@Base>
   11b3c:	ldr	r3, [r4, #48]	; 0x30
   11b40:	ldr	r2, [r4, #52]	; 0x34
   11b44:	adds	r3, r3, #1
   11b48:	adc	r2, r2, #0
   11b4c:	str	r3, [r4, #48]	; 0x30
   11b50:	str	r2, [r4, #52]	; 0x34
   11b54:	bl	1281c <no_int_as_first_stuff@@Base>
   11b58:	ldr	r3, [r4, #56]	; 0x38
   11b5c:	mov	r0, r6
   11b60:	ldr	r2, [r4, #60]	; 0x3c
   11b64:	adds	r3, r3, #1
   11b68:	adc	r2, r2, #0
   11b6c:	str	r3, [r4, #56]	; 0x38
   11b70:	str	r2, [r4, #60]	; 0x3c
   11b74:	bl	118ac <puts@plt>
   11b78:	ldr	r3, [r4, #64]	; 0x40
   11b7c:	mov	r1, r8
   11b80:	mov	r0, r7
   11b84:	ldr	r2, [r4, #68]	; 0x44
   11b88:	adds	r3, r3, #1
   11b8c:	adc	r2, r2, #0
   11b90:	str	r3, [r4, #64]	; 0x40
   11b94:	str	r2, [r4, #68]	; 0x44
   11b98:	ldr	r2, [pc, #1620]	; 121f4 <main@@Base+0x824>
   11b9c:	add	r2, pc, r2
   11ba0:	bl	11834 <printf@plt>
   11ba4:	ldr	r3, [r4, #72]	; 0x48
   11ba8:	ldr	r2, [r4, #76]	; 0x4c
   11bac:	adds	r3, r3, #1
   11bb0:	adc	r2, r2, #0
   11bb4:	str	r3, [r4, #72]	; 0x48
   11bb8:	str	r2, [r4, #76]	; 0x4c
   11bbc:	bl	127ac <setup@@Base>
   11bc0:	ldr	r3, [r4, #80]	; 0x50
   11bc4:	ldr	r2, [r4, #84]	; 0x54
   11bc8:	adds	r3, r3, #1
   11bcc:	adc	r2, r2, #0
   11bd0:	str	r3, [r4, #80]	; 0x50
   11bd4:	str	r2, [r4, #84]	; 0x54
   11bd8:	bl	1298c <int_but_not_followed_by_function@@Base>
   11bdc:	ldr	r3, [r4, #88]	; 0x58
   11be0:	mov	r0, r6
   11be4:	ldr	r2, [r4, #92]	; 0x5c
   11be8:	adds	r3, r3, #1
   11bec:	adc	r2, r2, #0
   11bf0:	str	r3, [r4, #88]	; 0x58
   11bf4:	str	r2, [r4, #92]	; 0x5c
   11bf8:	bl	118ac <puts@plt>
   11bfc:	ldr	r3, [r4, #96]	; 0x60
   11c00:	mov	r1, r8
   11c04:	mov	r0, r7
   11c08:	ldr	r2, [r4, #100]	; 0x64
   11c0c:	adds	r3, r3, #1
   11c10:	adc	r2, r2, #0
   11c14:	str	r3, [r4, #96]	; 0x60
   11c18:	str	r2, [r4, #100]	; 0x64
   11c1c:	ldr	r2, [pc, #1492]	; 121f8 <main@@Base+0x828>
   11c20:	add	r2, pc, r2
   11c24:	bl	11834 <printf@plt>
   11c28:	ldr	r3, [r4, #104]	; 0x68
   11c2c:	ldr	r2, [r4, #108]	; 0x6c
   11c30:	adds	r3, r3, #1
   11c34:	adc	r2, r2, #0
   11c38:	str	r3, [r4, #104]	; 0x68
   11c3c:	str	r2, [r4, #108]	; 0x6c
   11c40:	bl	127ac <setup@@Base>
   11c44:	ldr	r3, [r4, #112]	; 0x70
   11c48:	ldr	r2, [r4, #116]	; 0x74
   11c4c:	adds	r3, r3, #1
   11c50:	adc	r2, r2, #0
   11c54:	str	r3, [r4, #112]	; 0x70
   11c58:	str	r2, [r4, #116]	; 0x74
   11c5c:	bl	13494 <boolean_unary_operator_is_read_properly@@Base>
   11c60:	ldr	r3, [r4, #120]	; 0x78
   11c64:	mov	r0, r6
   11c68:	ldr	r2, [r4, #124]	; 0x7c
   11c6c:	adds	r3, r3, #1
   11c70:	adc	r2, r2, #0
   11c74:	str	r3, [r4, #120]	; 0x78
   11c78:	str	r2, [r4, #124]	; 0x7c
   11c7c:	bl	118ac <puts@plt>
   11c80:	ldr	r3, [r4, #128]	; 0x80
   11c84:	mov	r1, r8
   11c88:	mov	r0, r7
   11c8c:	ldr	r2, [r4, #132]	; 0x84
   11c90:	adds	r3, r3, #1
   11c94:	adc	r2, r2, #0
   11c98:	str	r3, [r4, #128]	; 0x80
   11c9c:	str	r2, [r4, #132]	; 0x84
   11ca0:	ldr	r2, [pc, #1364]	; 121fc <main@@Base+0x82c>
   11ca4:	add	r2, pc, r2
   11ca8:	bl	11834 <printf@plt>
   11cac:	ldr	r3, [r4, #136]	; 0x88
   11cb0:	ldr	r2, [r4, #140]	; 0x8c
   11cb4:	adds	r3, r3, #1
   11cb8:	adc	r2, r2, #0
   11cbc:	str	r3, [r4, #136]	; 0x88
   11cc0:	str	r2, [r4, #140]	; 0x8c
   11cc4:	bl	127ac <setup@@Base>
   11cc8:	ldr	r3, [r4, #144]	; 0x90
   11ccc:	ldr	r2, [r4, #148]	; 0x94
   11cd0:	adds	r3, r3, #1
   11cd4:	adc	r2, r2, #0
   11cd8:	str	r3, [r4, #144]	; 0x90
   11cdc:	str	r2, [r4, #148]	; 0x94
   11ce0:	bl	1317c <boolean_binary_operator_is_read_properly@@Base>
   11ce4:	ldr	r3, [r4, #152]	; 0x98
   11ce8:	mov	r0, r6
   11cec:	ldr	r2, [r4, #156]	; 0x9c
   11cf0:	adds	r3, r3, #1
   11cf4:	adc	r2, r2, #0
   11cf8:	str	r3, [r4, #152]	; 0x98
   11cfc:	str	r2, [r4, #156]	; 0x9c
   11d00:	bl	118ac <puts@plt>
   11d04:	ldr	r3, [r4, #160]	; 0xa0
   11d08:	mov	r1, r8
   11d0c:	mov	r0, r7
   11d10:	ldr	r2, [r4, #164]	; 0xa4
   11d14:	adds	r3, r3, #1
   11d18:	adc	r2, r2, #0
   11d1c:	str	r3, [r4, #160]	; 0xa0
   11d20:	str	r2, [r4, #164]	; 0xa4
   11d24:	ldr	r2, [pc, #1236]	; 12200 <main@@Base+0x830>
   11d28:	add	r2, pc, r2
   11d2c:	bl	11834 <printf@plt>
   11d30:	ldr	r3, [r4, #168]	; 0xa8
   11d34:	ldr	r2, [r4, #172]	; 0xac
   11d38:	adds	r3, r3, #1
   11d3c:	adc	r2, r2, #0
   11d40:	str	r3, [r4, #168]	; 0xa8
   11d44:	str	r2, [r4, #172]	; 0xac
   11d48:	bl	127ac <setup@@Base>
   11d4c:	ldr	r3, [r4, #176]	; 0xb0
   11d50:	ldr	r2, [r4, #180]	; 0xb4
   11d54:	adds	r3, r3, #1
   11d58:	adc	r2, r2, #0
   11d5c:	str	r3, [r4, #176]	; 0xb0
   11d60:	str	r2, [r4, #180]	; 0xb4
   11d64:	bl	12b40 <boolean_expression_is_read_properly@@Base>
   11d68:	ldr	r3, [r4, #184]	; 0xb8
   11d6c:	mov	r0, r6
   11d70:	ldr	r2, [r4, #188]	; 0xbc
   11d74:	adds	r3, r3, #1
   11d78:	adc	r2, r2, #0
   11d7c:	str	r3, [r4, #184]	; 0xb8
   11d80:	str	r2, [r4, #188]	; 0xbc
   11d84:	bl	118ac <puts@plt>
   11d88:	ldr	r3, [r4, #192]	; 0xc0
   11d8c:	mov	r1, r8
   11d90:	mov	r0, r7
   11d94:	ldr	r2, [r4, #196]	; 0xc4
   11d98:	adds	r3, r3, #1
   11d9c:	adc	r2, r2, #0
   11da0:	str	r3, [r4, #192]	; 0xc0
   11da4:	str	r2, [r4, #196]	; 0xc4
   11da8:	ldr	r2, [pc, #1108]	; 12204 <main@@Base+0x834>
   11dac:	add	r2, pc, r2
   11db0:	bl	11834 <printf@plt>
   11db4:	ldr	r3, [r4, #200]	; 0xc8
   11db8:	ldr	r2, [r4, #204]	; 0xcc
   11dbc:	adds	r3, r3, #1
   11dc0:	adc	r2, r2, #0
   11dc4:	str	r3, [r4, #200]	; 0xc8
   11dc8:	str	r2, [r4, #204]	; 0xcc
   11dcc:	bl	127ac <setup@@Base>
   11dd0:	ldr	r3, [r4, #208]	; 0xd0
   11dd4:	ldr	r2, [r4, #212]	; 0xd4
   11dd8:	adds	r3, r3, #1
   11ddc:	adc	r2, r2, #0
   11de0:	str	r3, [r4, #208]	; 0xd0
   11de4:	str	r2, [r4, #212]	; 0xd4
   11de8:	bl	12e00 <boolean_expression_complex@@Base>
   11dec:	ldr	r3, [r4, #216]	; 0xd8
   11df0:	mov	r0, r6
   11df4:	ldr	r2, [r4, #220]	; 0xdc
   11df8:	adds	r3, r3, #1
   11dfc:	adc	r2, r2, #0
   11e00:	str	r3, [r4, #216]	; 0xd8
   11e04:	str	r2, [r4, #220]	; 0xdc
   11e08:	bl	118ac <puts@plt>
   11e0c:	ldr	r3, [r4, #224]	; 0xe0
   11e10:	mov	r1, r8
   11e14:	mov	r0, r7
   11e18:	ldr	r2, [r4, #228]	; 0xe4
   11e1c:	adds	r3, r3, #1
   11e20:	adc	r2, r2, #0
   11e24:	str	r3, [r4, #224]	; 0xe0
   11e28:	str	r2, [r4, #228]	; 0xe4
   11e2c:	ldr	r2, [pc, #980]	; 12208 <main@@Base+0x838>
   11e30:	add	r2, pc, r2
   11e34:	bl	11834 <printf@plt>
   11e38:	ldr	r3, [r4, #232]	; 0xe8
   11e3c:	ldr	r2, [r4, #236]	; 0xec
   11e40:	adds	r3, r3, #1
   11e44:	adc	r2, r2, #0
   11e48:	str	r3, [r4, #232]	; 0xe8
   11e4c:	str	r2, [r4, #236]	; 0xec
   11e50:	bl	127ac <setup@@Base>
   11e54:	ldr	r3, [r4, #240]	; 0xf0
   11e58:	ldr	r2, [r4, #244]	; 0xf4
   11e5c:	adds	r3, r3, #1
   11e60:	adc	r2, r2, #0
   11e64:	str	r3, [r4, #240]	; 0xf0
   11e68:	str	r2, [r4, #244]	; 0xf4
   11e6c:	bl	13774 <if_statement_only@@Base>
   11e70:	ldr	r3, [r4, #248]	; 0xf8
   11e74:	mov	r0, r6
   11e78:	ldr	r2, [r4, #252]	; 0xfc
   11e7c:	adds	r3, r3, #1
   11e80:	adc	r2, r2, #0
   11e84:	str	r3, [r4, #248]	; 0xf8
   11e88:	str	r2, [r4, #252]	; 0xfc
   11e8c:	bl	118ac <puts@plt>
   11e90:	ldr	r3, [r5, #1776]	; 0x6f0
   11e94:	mov	r1, r8
   11e98:	mov	r0, r7
   11e9c:	ldr	ip, [r5, #1780]	; 0x6f4
   11ea0:	ldr	r2, [pc, #868]	; 1220c <main@@Base+0x83c>
   11ea4:	adds	r3, r3, #1
   11ea8:	adc	ip, ip, #0
   11eac:	str	r3, [r5, #1776]	; 0x6f0
   11eb0:	add	r2, pc, r2
   11eb4:	str	ip, [r5, #1780]	; 0x6f4
   11eb8:	bl	11834 <printf@plt>
   11ebc:	ldr	r3, [r5, #1784]	; 0x6f8
   11ec0:	ldr	r2, [r5, #1788]	; 0x6fc
   11ec4:	adds	r3, r3, #1
   11ec8:	adc	r2, r2, #0
   11ecc:	str	r3, [r5, #1784]	; 0x6f8
   11ed0:	str	r2, [r5, #1788]	; 0x6fc
   11ed4:	bl	127ac <setup@@Base>
   11ed8:	ldr	r3, [r5, #1792]	; 0x700
   11edc:	ldr	r2, [r5, #1796]	; 0x704
   11ee0:	adds	r3, r3, #1
   11ee4:	adc	r2, r2, #0
   11ee8:	str	r3, [r5, #1792]	; 0x700
   11eec:	str	r2, [r5, #1796]	; 0x704
   11ef0:	bl	13acc <if_else_statements@@Base>
   11ef4:	ldr	r3, [r5, #1800]	; 0x708
   11ef8:	mov	r0, r6
   11efc:	ldr	r2, [r5, #1804]	; 0x70c
   11f00:	adds	r3, r3, #1
   11f04:	adc	r2, r2, #0
   11f08:	str	r3, [r5, #1800]	; 0x708
   11f0c:	str	r2, [r5, #1804]	; 0x70c
   11f10:	bl	118ac <puts@plt>
   11f14:	ldr	r3, [r5, #1808]	; 0x710
   11f18:	mov	r1, r8
   11f1c:	mov	r0, r7
   11f20:	ldr	r2, [r5, #1812]	; 0x714
   11f24:	adds	r3, r3, #1
   11f28:	adc	r2, r2, #0
   11f2c:	str	r3, [r5, #1808]	; 0x710
   11f30:	str	r2, [r5, #1812]	; 0x714
   11f34:	ldr	r2, [pc, #724]	; 12210 <main@@Base+0x840>
   11f38:	add	r2, pc, r2
   11f3c:	bl	11834 <printf@plt>
   11f40:	ldr	r3, [r5, #1816]	; 0x718
   11f44:	ldr	r2, [r5, #1820]	; 0x71c
   11f48:	adds	r3, r3, #1
   11f4c:	adc	r2, r2, #0
   11f50:	str	r3, [r5, #1816]	; 0x718
   11f54:	str	r2, [r5, #1820]	; 0x71c
   11f58:	bl	127ac <setup@@Base>
   11f5c:	ldr	r3, [r5, #1824]	; 0x720
   11f60:	ldr	r2, [r5, #1828]	; 0x724
   11f64:	adds	r3, r3, #1
   11f68:	adc	r2, r2, #0
   11f6c:	str	r3, [r5, #1824]	; 0x720
   11f70:	str	r2, [r5, #1828]	; 0x724
   11f74:	bl	14500 <if_statement_inside_if_statement@@Base>
   11f78:	ldr	r3, [r9, #-8]
   11f7c:	mov	r0, r6
   11f80:	ldr	r2, [r9, #-4]
   11f84:	adds	r3, r3, #1
   11f88:	adc	r2, r2, #0
   11f8c:	str	r3, [r9, #-8]
   11f90:	str	r2, [r9, #-4]
   11f94:	bl	118ac <puts@plt>
   11f98:	ldr	r3, [r9]
   11f9c:	mov	r1, r8
   11fa0:	mov	r0, r7
   11fa4:	ldr	r2, [r9, #4]
   11fa8:	adds	r3, r3, #1
   11fac:	adc	r2, r2, #0
   11fb0:	str	r3, [r9]
   11fb4:	str	r2, [r9, #4]
   11fb8:	ldr	r2, [pc, #596]	; 12214 <main@@Base+0x844>
   11fbc:	add	r2, pc, r2
   11fc0:	bl	11834 <printf@plt>
   11fc4:	ldr	r2, [r5, #1848]	; 0x738
   11fc8:	add	r3, r5, #1904	; 0x770
   11fcc:	ldr	r1, [r5, #1852]	; 0x73c
   11fd0:	str	r3, [sp, #4]
   11fd4:	adds	r2, r2, #1
   11fd8:	adc	r1, r1, #0
   11fdc:	str	r2, [r5, #1848]	; 0x738
   11fe0:	str	r1, [r5, #1852]	; 0x73c
   11fe4:	bl	127ac <setup@@Base>
   11fe8:	ldr	r2, [r5, #1856]	; 0x740
   11fec:	ldr	r1, [r5, #1860]	; 0x744
   11ff0:	adds	r2, r2, #1
   11ff4:	adc	r1, r1, #0
   11ff8:	str	r2, [r5, #1856]	; 0x740
   11ffc:	str	r1, [r5, #1860]	; 0x744
   12000:	bl	14a0c <if_statement_inside_else_statement@@Base>
   12004:	ldr	r2, [r5, #1864]	; 0x748
   12008:	mov	r0, r6
   1200c:	ldr	r1, [r5, #1868]	; 0x74c
   12010:	adds	r2, r2, #1
   12014:	adc	r1, r1, #0
   12018:	str	r2, [r5, #1864]	; 0x748
   1201c:	str	r1, [r5, #1868]	; 0x74c
   12020:	bl	118ac <puts@plt>
   12024:	ldr	r2, [r5, #1872]	; 0x750
   12028:	mov	r1, r8
   1202c:	mov	r0, r7
   12030:	ldr	ip, [r5, #1876]	; 0x754
   12034:	adds	r2, r2, #1
   12038:	str	r2, [r5, #1872]	; 0x750
   1203c:	adc	ip, ip, #0
   12040:	ldr	r2, [pc, #464]	; 12218 <main@@Base+0x848>
   12044:	str	ip, [r5, #1876]	; 0x754
   12048:	add	r2, pc, r2
   1204c:	bl	11834 <printf@plt>
   12050:	ldr	r2, [r5, #1880]	; 0x758
   12054:	ldr	r1, [r5, #1884]	; 0x75c
   12058:	adds	r2, r2, #1
   1205c:	adc	r1, r1, #0
   12060:	str	r2, [r5, #1880]	; 0x758
   12064:	str	r1, [r5, #1884]	; 0x75c
   12068:	bl	127ac <setup@@Base>
   1206c:	ldr	r2, [r5, #1888]	; 0x760
   12070:	ldr	r1, [r5, #1892]	; 0x764
   12074:	adds	r2, r2, #1
   12078:	adc	r1, r1, #0
   1207c:	str	r2, [r5, #1888]	; 0x760
   12080:	str	r1, [r5, #1892]	; 0x764
   12084:	bl	14224 <body_with_one_return@@Base>
   12088:	ldr	r3, [sp, #4]
   1208c:	mov	r0, r6
   12090:	ldr	r2, [r3, #-8]
   12094:	ldr	r1, [r3, #-4]
   12098:	adds	r2, r2, #1
   1209c:	adc	r1, r1, #0
   120a0:	str	r2, [r3, #-8]
   120a4:	str	r1, [r3, #-4]
   120a8:	bl	118ac <puts@plt>
   120ac:	ldr	r3, [sp, #4]
   120b0:	mov	r1, r8
   120b4:	mov	r0, r7
   120b8:	ldm	r3, {r2, lr}
   120bc:	adds	ip, r2, #1
   120c0:	ldr	r2, [pc, #340]	; 1221c <main@@Base+0x84c>
   120c4:	adc	lr, lr, #0
   120c8:	stm	r3, {ip, lr}
   120cc:	add	r2, pc, r2
   120d0:	bl	11834 <printf@plt>
   120d4:	ldr	r3, [r5, #1912]	; 0x778
   120d8:	ldr	r2, [r5, #1916]	; 0x77c
   120dc:	adds	r3, r3, #1
   120e0:	adc	r2, r2, #0
   120e4:	str	r3, [r5, #1912]	; 0x778
   120e8:	str	r2, [r5, #1916]	; 0x77c
   120ec:	bl	127ac <setup@@Base>
   120f0:	ldr	r3, [r5, #1920]	; 0x780
   120f4:	ldr	r2, [r5, #1924]	; 0x784
   120f8:	adds	r3, r3, #1
   120fc:	adc	r2, r2, #0
   12100:	str	r3, [r5, #1920]	; 0x780
   12104:	str	r2, [r5, #1924]	; 0x784
   12108:	bl	13e74 <body_with_two_returns@@Base>
   1210c:	ldr	r3, [r5, #1928]	; 0x788
   12110:	mov	r0, r6
   12114:	ldr	r2, [r5, #1932]	; 0x78c
   12118:	adds	r3, r3, #1
   1211c:	adc	r2, r2, #0
   12120:	str	r3, [r5, #1928]	; 0x788
   12124:	str	r2, [r5, #1932]	; 0x78c
   12128:	bl	118ac <puts@plt>
   1212c:	ldr	r3, [r5, #1936]	; 0x790
   12130:	ldr	r2, [r5, #1940]	; 0x794
   12134:	ldr	r0, [pc, #228]	; 12220 <main@@Base+0x850>
   12138:	adds	r3, r3, #1
   1213c:	adc	r2, r2, #0
   12140:	str	r3, [r5, #1936]	; 0x790
   12144:	add	r0, pc, r0
   12148:	str	r2, [r5, #1940]	; 0x794
   1214c:	bl	118ac <puts@plt>
   12150:	ldr	r3, [r5, #1944]	; 0x798
   12154:	ldr	r2, [r5, #1948]	; 0x79c
   12158:	ldr	r0, [pc, #196]	; 12224 <main@@Base+0x854>
   1215c:	adds	r3, r3, #1
   12160:	adc	r2, r2, #0
   12164:	str	r3, [r5, #1944]	; 0x798
   12168:	add	r0, pc, r0
   1216c:	str	r2, [r5, #1948]	; 0x79c
   12170:	bl	118ac <puts@plt>
   12174:	ldr	r3, [r5, #1952]	; 0x7a0
   12178:	ldr	r2, [r5, #1956]	; 0x7a4
   1217c:	ldr	r0, [sp]
   12180:	adds	r3, r3, #1
   12184:	adc	r2, r2, #0
   12188:	str	r3, [r5, #1952]	; 0x7a0
   1218c:	str	r2, [r5, #1956]	; 0x7a4
   12190:	bl	118ac <puts@plt>
   12194:	ldr	r3, [r5, #1960]	; 0x7a8
   12198:	mov	r0, #0
   1219c:	ldr	r2, [r5, #1964]	; 0x7ac
   121a0:	adds	r3, r3, #1
   121a4:	adc	r2, r2, r0
   121a8:	str	r3, [r5, #1960]	; 0x7a8
   121ac:	str	r2, [r5, #1964]	; 0x7ac
   121b0:	add	sp, sp, #12
   121b4:	ldrd	r4, [sp]
   121b8:	ldrd	r6, [sp, #8]
   121bc:	ldrd	r8, [sp, #16]
   121c0:	ldrd	sl, [sp, #24]
   121c4:	add	sp, sp, #32
   121c8:	pop	{pc}		; (ldr pc, [sp], #4)
   121cc:	andeq	r9, r1, ip, lsr #31
   121d0:	andeq	r9, r1, r8, lsl #12
   121d4:	strheq	r0, [r0], -ip
   121d8:	andeq	r8, r0, r8, lsr #3
   121dc:	ldrdeq	r8, [r0], -r0
   121e0:	andeq	r8, r0, ip, asr #3
   121e4:	andeq	r8, r0, r4, asr r1
   121e8:	andeq	r8, r0, r4, ror r1
   121ec:	andeq	r8, r0, r8, lsr #2
   121f0:	andeq	r8, r0, ip, ror #1
   121f4:	andeq	r8, r0, ip, lsr #1
   121f8:	andeq	r8, r0, ip, asr #32
   121fc:	strdeq	r7, [r0], -r0
   12200:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   12204:	andeq	r7, r0, r8, lsr pc
   12208:	ldrdeq	r7, [r0], -r0
   1220c:	andeq	r7, r0, r4, ror #28
   12210:	strdeq	r7, [r0], -r0
   12214:	muleq	r0, r0, sp
   12218:	andeq	r7, r0, r8, lsr #26
   1221c:			; <UNDEFINED> instruction: 0x00007cbc
   12220:	andeq	r7, r0, ip, asr ip
   12224:	andeq	r7, r0, r8, asr #24
   12228:	ldr	r0, [pc, #4]	; 12234 <main@@Base+0x864>
   1222c:	add	r0, pc, r0
   12230:	b	19424 <__gcov_sort_n_vals@@Base+0x4a0>
   12234:	muleq	r1, ip, lr
   12238:	ldr	r0, [pc, #4]	; 12244 <main@@Base+0x874>
   1223c:	add	r0, pc, r0
   12240:	b	19424 <__gcov_sort_n_vals@@Base+0x4a0>
   12244:	andeq	r9, r1, r0, asr #1
   12248:	ldr	r0, [pc, #4]	; 12254 <main@@Base+0x884>
   1224c:	add	r0, pc, r0
   12250:	b	19424 <__gcov_sort_n_vals@@Base+0x4a0>
   12254:	andeq	r9, r1, r4, asr #7
   12258:	ldr	r0, [pc, #4]	; 12264 <main@@Base+0x894>
   1225c:	add	r0, pc, r0
   12260:	b	19424 <__gcov_sort_n_vals@@Base+0x4a0>
   12264:			; <UNDEFINED> instruction: 0x000195b0

00012268 <_start@@Base>:
   12268:	mov	fp, #0
   1226c:	mov	lr, #0
   12270:	pop	{r1}		; (ldr r1, [sp], #4)
   12274:	mov	r2, sp
   12278:	push	{r2}		; (str r2, [sp, #-4]!)
   1227c:	push	{r0}		; (str r0, [sp, #-4]!)
   12280:	ldr	ip, [pc, #16]	; 12298 <_start@@Base+0x30>
   12284:	push	{ip}		; (str ip, [sp, #-4]!)
   12288:	ldr	r0, [pc, #12]	; 1229c <_start@@Base+0x34>
   1228c:	ldr	r3, [pc, #12]	; 122a0 <_start@@Base+0x38>
   12290:	bl	118c4 <__libc_start_main@plt>
   12294:	bl	1199c <abort@plt>
   12298:	muleq	r1, ip, r7
   1229c:	ldrdeq	r1, [r1], -r0
   122a0:	andeq	r9, r1, ip, lsr r7
   122a4:	ldr	r3, [pc, #20]	; 122c0 <_start@@Base+0x58>
   122a8:	ldr	r2, [pc, #20]	; 122c4 <_start@@Base+0x5c>
   122ac:	add	r3, pc, r3
   122b0:	ldr	r2, [r3, r2]
   122b4:	cmp	r2, #0
   122b8:	bxeq	lr
   122bc:	b	118d0 <__gmon_start__@plt>
   122c0:	andeq	r8, r1, ip, asr #26
   122c4:	andeq	r0, r0, r8, lsr #1
   122c8:	ldr	r0, [pc, #24]	; 122e8 <_start@@Base+0x80>
   122cc:	ldr	r3, [pc, #24]	; 122ec <_start@@Base+0x84>
   122d0:	cmp	r3, r0
   122d4:	bxeq	lr
   122d8:	ldr	r3, [pc, #16]	; 122f0 <_start@@Base+0x88>
   122dc:	cmp	r3, #0
   122e0:	bxeq	lr
   122e4:	bx	r3
   122e8:	andeq	fp, r2, ip, lsl #19
   122ec:	andeq	fp, r2, ip, lsl #19
   122f0:	andeq	r0, r0, r0
   122f4:	ldr	r0, [pc, #36]	; 12320 <_start@@Base+0xb8>
   122f8:	ldr	r1, [pc, #36]	; 12324 <_start@@Base+0xbc>
   122fc:	sub	r1, r1, r0
   12300:	asr	r1, r1, #2
   12304:	add	r1, r1, r1, lsr #31
   12308:	asrs	r1, r1, #1
   1230c:	bxeq	lr
   12310:	ldr	r3, [pc, #16]	; 12328 <_start@@Base+0xc0>
   12314:	cmp	r3, #0
   12318:	bxeq	lr
   1231c:	bx	r3
   12320:	andeq	fp, r2, ip, lsl #19
   12324:	andeq	fp, r2, ip, lsl #19
   12328:	andeq	r0, r0, r0
   1232c:	push	{r4, lr}
   12330:	ldr	r4, [pc, #24]	; 12350 <_start@@Base+0xe8>
   12334:	ldrb	r3, [r4]
   12338:	cmp	r3, #0
   1233c:	popne	{r4, pc}
   12340:	bl	122c8 <_start@@Base+0x60>
   12344:	mov	r3, #1
   12348:	strb	r3, [r4]
   1234c:	pop	{r4, pc}
   12350:	muleq	r2, r0, r9
   12354:	b	122f4 <_start@@Base+0x8c>

00012358 <next@@Base>:
   12358:	ldr	r1, [pc, #472]	; 12538 <next@@Base+0x1e0>
   1235c:	strd	r4, [sp, #-16]!
   12360:	ldr	r3, [pc, #468]	; 1253c <next@@Base+0x1e4>
   12364:	str	r6, [sp, #8]
   12368:	str	lr, [sp, #12]
   1236c:	add	r1, pc, r1
   12370:	ldr	r3, [r1, r3]
   12374:	ldr	r2, [r3, #204]	; 0xcc
   12378:	str	r0, [r3]
   1237c:	cmp	r2, #49	; 0x31
   12380:	add	r2, r2, #1
   12384:	bhi	12444 <next@@Base+0xec>
   12388:	ldr	lr, [pc, #432]	; 12540 <next@@Base+0x1e8>
   1238c:	str	r0, [r3, r2, lsl #2]
   12390:	ldr	r2, [r3, #204]	; 0xcc
   12394:	add	lr, pc, lr
   12398:	ldr	ip, [lr]
   1239c:	add	r2, r2, #1
   123a0:	ldr	r4, [lr, #4]
   123a4:	adds	ip, ip, #1
   123a8:	adc	r4, r4, #0
   123ac:	str	ip, [lr]
   123b0:	str	r4, [lr, #4]
   123b4:	ldr	ip, [pc, #392]	; 12544 <next@@Base+0x1ec>
   123b8:	str	r2, [r3, #204]	; 0xcc
   123bc:	ldr	r2, [r1, ip]
   123c0:	ldr	ip, [r2, #200]	; 0xc8
   123c4:	cmp	ip, #49	; 0x31
   123c8:	bhi	12404 <next@@Base+0xac>
   123cc:	ldr	r4, [pc, #372]	; 12548 <next@@Base+0x1f0>
   123d0:	add	lr, ip, #1
   123d4:	str	lr, [r2, #200]	; 0xc8
   123d8:	ldr	r5, [pc, #364]	; 1254c <next@@Base+0x1f4>
   123dc:	add	r4, pc, r4
   123e0:	ldr	lr, [r4, #16]
   123e4:	ldr	r6, [r4, #20]
   123e8:	adds	lr, lr, #1
   123ec:	adc	r6, r6, #0
   123f0:	str	lr, [r4, #16]
   123f4:	mov	lr, r5
   123f8:	str	r6, [r4, #20]
   123fc:	ldr	r1, [r1, r5]
   12400:	str	r1, [r2, ip, lsl #2]
   12404:	ldr	r2, [r3, #232]	; 0xe8
   12408:	cmp	r2, #0
   1240c:	beq	12474 <next@@Base+0x11c>
   12410:	blx	r2
   12414:	ldr	r2, [pc, #308]	; 12550 <next@@Base+0x1f8>
   12418:	ldrd	r4, [sp]
   1241c:	ldr	r6, [sp, #8]
   12420:	add	sp, sp, #12
   12424:	add	r2, pc, r2
   12428:	ldr	r3, [r2, #24]
   1242c:	ldr	r1, [r2, #28]
   12430:	adds	r3, r3, #1
   12434:	adc	r1, r1, #0
   12438:	str	r3, [r2, #24]
   1243c:	str	r1, [r2, #28]
   12440:	pop	{pc}		; (ldr pc, [sp], #4)
   12444:	ldr	lr, [pc, #264]	; 12554 <next@@Base+0x1fc>
   12448:	ldr	r5, [r3, #212]	; 0xd4
   1244c:	add	lr, pc, lr
   12450:	ldr	ip, [lr, #8]
   12454:	add	r5, r5, #1
   12458:	ldr	r4, [lr, #12]
   1245c:	str	r5, [r3, #212]	; 0xd4
   12460:	adds	ip, ip, #1
   12464:	adc	r4, r4, #0
   12468:	str	ip, [lr, #8]
   1246c:	str	r4, [lr, #12]
   12470:	b	123b4 <next@@Base+0x5c>
   12474:	ldr	r2, [r3, #220]	; 0xdc
   12478:	cmp	r2, #0
   1247c:	beq	124cc <next@@Base+0x174>
   12480:	ldr	r1, [r3, #224]	; 0xe0
   12484:	ldr	r0, [r3, #228]	; 0xe4
   12488:	cmp	r2, r1
   1248c:	ble	12500 <next@@Base+0x1a8>
   12490:	ldr	r2, [pc, #192]	; 12558 <next@@Base+0x200>
   12494:	add	ip, r1, #1
   12498:	ldr	r0, [r0, r1, lsl #2]
   1249c:	str	ip, [r3, #224]	; 0xe0
   124a0:	ldrd	r4, [sp]
   124a4:	add	r2, pc, r2
   124a8:	ldr	r3, [r2, #40]	; 0x28
   124ac:	ldr	r1, [r2, #44]	; 0x2c
   124b0:	ldr	r6, [sp, #8]
   124b4:	add	sp, sp, #12
   124b8:	adds	r3, r3, #1
   124bc:	adc	r1, r1, #0
   124c0:	str	r3, [r2, #40]	; 0x28
   124c4:	str	r1, [r2, #44]	; 0x2c
   124c8:	pop	{pc}		; (ldr pc, [sp], #4)
   124cc:	ldr	r2, [pc, #136]	; 1255c <next@@Base+0x204>
   124d0:	ldr	r0, [r3, #216]	; 0xd8
   124d4:	ldrd	r4, [sp]
   124d8:	add	r2, pc, r2
   124dc:	ldr	r3, [r2, #32]
   124e0:	ldr	r1, [r2, #36]	; 0x24
   124e4:	ldr	r6, [sp, #8]
   124e8:	add	sp, sp, #12
   124ec:	adds	r3, r3, #1
   124f0:	adc	r1, r1, #0
   124f4:	str	r3, [r2, #32]
   124f8:	str	r1, [r2, #36]	; 0x24
   124fc:	pop	{pc}		; (ldr pc, [sp], #4)
   12500:	ldr	r1, [pc, #88]	; 12560 <next@@Base+0x208>
   12504:	sub	r2, r2, #-1073741823	; 0xc0000001
   12508:	ldr	r0, [r0, r2, lsl #2]
   1250c:	ldrd	r4, [sp]
   12510:	add	r1, pc, r1
   12514:	ldr	r3, [r1, #48]	; 0x30
   12518:	ldr	r2, [r1, #52]	; 0x34
   1251c:	ldr	r6, [sp, #8]
   12520:	add	sp, sp, #12
   12524:	adds	r3, r3, #1
   12528:	adc	r2, r2, #0
   1252c:	str	r3, [r1, #48]	; 0x30
   12530:	str	r2, [r1, #52]	; 0x34
   12534:	pop	{pc}		; (ldr pc, [sp], #4)
   12538:	andeq	r8, r1, ip, lsl #25
   1253c:	andeq	r0, r0, ip, lsr #1
   12540:	strdeq	r9, [r1], -ip
   12544:	andeq	r0, r0, r4, asr #1
   12548:			; <UNDEFINED> instruction: 0x000195b4
   1254c:	andeq	r0, r0, r4, lsr #1
   12550:	andeq	r9, r1, ip, ror #10
   12554:	andeq	r9, r1, r4, asr #10
   12558:	andeq	r9, r1, ip, ror #9
   1255c:			; <UNDEFINED> instruction: 0x000194b8
   12560:	andeq	r9, r1, r0, lsl #9

00012564 <push_back@@Base>:
   12564:	ldr	ip, [pc, #332]	; 126b8 <push_back@@Base+0x154>
   12568:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1256c:	ldr	r3, [pc, #328]	; 126bc <push_back@@Base+0x158>
   12570:	strd	r6, [sp, #8]
   12574:	str	r8, [sp, #16]
   12578:	add	ip, pc, ip
   1257c:	str	lr, [sp, #20]
   12580:	ldr	r3, [ip, r3]
   12584:	ldr	r2, [r3, #408]	; 0x198
   12588:	str	r0, [r3]
   1258c:	str	r1, [r3, #204]	; 0xcc
   12590:	cmp	r2, #49	; 0x31
   12594:	add	r2, r2, #1
   12598:	bhi	12664 <push_back@@Base+0x100>
   1259c:	ldr	r4, [pc, #284]	; 126c0 <push_back@@Base+0x15c>
   125a0:	str	r0, [r3, r2, lsl #2]
   125a4:	ldr	r2, [r3, #408]	; 0x198
   125a8:	add	r4, pc, r4
   125ac:	ldr	lr, [r4, #56]	; 0x38
   125b0:	add	r2, r2, #52	; 0x34
   125b4:	ldr	r5, [r4, #60]	; 0x3c
   125b8:	str	r1, [r3, r2, lsl #2]
   125bc:	ldr	r2, [r3, #408]	; 0x198
   125c0:	adds	lr, lr, #1
   125c4:	adc	r5, r5, #0
   125c8:	str	lr, [r4, #56]	; 0x38
   125cc:	add	r2, r2, #1
   125d0:	str	r5, [r4, #60]	; 0x3c
   125d4:	ldr	lr, [pc, #232]	; 126c4 <push_back@@Base+0x160>
   125d8:	str	r2, [r3, #408]	; 0x198
   125dc:	ldr	r2, [ip, lr]
   125e0:	ldr	lr, [r2, #200]	; 0xc8
   125e4:	cmp	lr, #49	; 0x31
   125e8:	bhi	12620 <push_back@@Base+0xbc>
   125ec:	ldr	r5, [pc, #212]	; 126c8 <push_back@@Base+0x164>
   125f0:	add	r4, lr, #1
   125f4:	str	r4, [r2, #200]	; 0xc8
   125f8:	ldr	r6, [pc, #204]	; 126cc <push_back@@Base+0x168>
   125fc:	add	r5, pc, r5
   12600:	ldr	r4, [r5, #72]	; 0x48
   12604:	ldr	r7, [r5, #76]	; 0x4c
   12608:	adds	r4, r4, #1
   1260c:	adc	r7, r7, #0
   12610:	str	r4, [r5, #72]	; 0x48
   12614:	str	r7, [r5, #76]	; 0x4c
   12618:	ldr	ip, [ip, r6]
   1261c:	str	ip, [r2, lr, lsl #2]
   12620:	ldr	r3, [r3, #420]	; 0x1a4
   12624:	cmp	r3, #0
   12628:	beq	12694 <push_back@@Base+0x130>
   1262c:	blx	r3
   12630:	ldr	r2, [pc, #152]	; 126d0 <push_back@@Base+0x16c>
   12634:	add	r2, pc, r2
   12638:	ldr	r3, [r2, #88]	; 0x58
   1263c:	ldr	r1, [r2, #92]	; 0x5c
   12640:	adds	r3, r3, #1
   12644:	adc	r1, r1, #0
   12648:	str	r3, [r2, #88]	; 0x58
   1264c:	str	r1, [r2, #92]	; 0x5c
   12650:	ldrd	r4, [sp]
   12654:	ldrd	r6, [sp, #8]
   12658:	ldr	r8, [sp, #16]
   1265c:	add	sp, sp, #20
   12660:	pop	{pc}		; (ldr pc, [sp], #4)
   12664:	ldr	r4, [pc, #104]	; 126d4 <push_back@@Base+0x170>
   12668:	ldr	r6, [r3, #416]	; 0x1a0
   1266c:	add	r4, pc, r4
   12670:	ldr	lr, [r4, #64]	; 0x40
   12674:	add	r6, r6, #1
   12678:	ldr	r5, [r4, #68]	; 0x44
   1267c:	str	r6, [r3, #416]	; 0x1a0
   12680:	adds	lr, lr, #1
   12684:	adc	r5, r5, #0
   12688:	str	lr, [r4, #64]	; 0x40
   1268c:	str	r5, [r4, #68]	; 0x44
   12690:	b	125d4 <push_back@@Base+0x70>
   12694:	ldr	r2, [pc, #60]	; 126d8 <push_back@@Base+0x174>
   12698:	add	r2, pc, r2
   1269c:	ldr	r3, [r2, #80]	; 0x50
   126a0:	ldr	r1, [r2, #84]	; 0x54
   126a4:	adds	r3, r3, #1
   126a8:	adc	r1, r1, #0
   126ac:	str	r3, [r2, #80]	; 0x50
   126b0:	str	r1, [r2, #84]	; 0x54
   126b4:	b	12650 <push_back@@Base+0xec>
   126b8:	andeq	r8, r1, r0, lsl #21
   126bc:	muleq	r0, ip, r0
   126c0:	andeq	r9, r1, r8, ror #7
   126c4:	andeq	r0, r0, r4, asr #1
   126c8:	muleq	r1, r4, r3
   126cc:	andeq	r0, r0, r0, asr #1
   126d0:	andeq	r9, r1, ip, asr r3
   126d4:	andeq	r9, r1, r4, lsr #6
   126d8:	strdeq	r9, [r1], -r8

000126dc <next_reset@@Base>:
   126dc:	ldr	r0, [pc, #84]	; 12738 <next_reset@@Base+0x5c>
   126e0:	mov	r1, #0
   126e4:	mov	r2, #236	; 0xec
   126e8:	str	r4, [sp, #-8]!
   126ec:	ldr	r4, [pc, #72]	; 1273c <next_reset@@Base+0x60>
   126f0:	ldr	ip, [pc, #72]	; 12740 <next_reset@@Base+0x64>
   126f4:	add	r0, pc, r0
   126f8:	ldr	r3, [r0, #96]	; 0x60
   126fc:	str	lr, [sp, #4]
   12700:	add	r4, pc, r4
   12704:	ldr	lr, [r0, #100]	; 0x64
   12708:	adds	r3, r3, #1
   1270c:	adc	lr, lr, r1
   12710:	str	r3, [r0, #96]	; 0x60
   12714:	str	lr, [r0, #100]	; 0x64
   12718:	ldr	r3, [r4, ip]
   1271c:	mov	r0, r3
   12720:	bl	11924 <memset@plt>
   12724:	mov	r2, #50	; 0x32
   12728:	ldr	r4, [sp]
   1272c:	add	sp, sp, #4
   12730:	str	r2, [r0, #208]	; 0xd0
   12734:	pop	{pc}		; (ldr pc, [sp], #4)
   12738:	muleq	r1, ip, r2
   1273c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12740:	andeq	r0, r0, ip, lsr #1

00012744 <push_back_reset@@Base>:
   12744:	ldr	r0, [pc, #84]	; 127a0 <push_back_reset@@Base+0x5c>
   12748:	mov	r1, #0
   1274c:	mov	r2, #424	; 0x1a8
   12750:	str	r4, [sp, #-8]!
   12754:	ldr	r4, [pc, #72]	; 127a4 <push_back_reset@@Base+0x60>
   12758:	ldr	ip, [pc, #72]	; 127a8 <push_back_reset@@Base+0x64>
   1275c:	add	r0, pc, r0
   12760:	ldr	r3, [r0, #104]	; 0x68
   12764:	str	lr, [sp, #4]
   12768:	add	r4, pc, r4
   1276c:	ldr	lr, [r0, #108]	; 0x6c
   12770:	adds	r3, r3, #1
   12774:	adc	lr, lr, r1
   12778:	str	r3, [r0, #104]	; 0x68
   1277c:	str	lr, [r0, #108]	; 0x6c
   12780:	ldr	r3, [r4, ip]
   12784:	mov	r0, r3
   12788:	bl	11924 <memset@plt>
   1278c:	mov	r2, #50	; 0x32
   12790:	ldr	r4, [sp]
   12794:	add	sp, sp, #4
   12798:	str	r2, [r0, #412]	; 0x19c
   1279c:	pop	{pc}		; (ldr pc, [sp], #4)
   127a0:	andeq	r9, r1, r4, lsr r2
   127a4:	muleq	r1, r0, r8
   127a8:	muleq	r0, ip, r0

000127ac <setup@@Base>:
   127ac:	str	r4, [sp, #-8]!
   127b0:	ldr	r4, [pc, #96]	; 12818 <setup@@Base+0x6c>
   127b4:	add	r4, pc, r4
   127b8:	ldr	r3, [r4, #112]	; 0x70
   127bc:	ldr	r2, [r4, #116]	; 0x74
   127c0:	str	lr, [sp, #4]
   127c4:	adds	r3, r3, #1
   127c8:	adc	r2, r2, #0
   127cc:	str	r3, [r4, #112]	; 0x70
   127d0:	str	r2, [r4, #116]	; 0x74
   127d4:	bl	126dc <next_reset@@Base>
   127d8:	ldr	r3, [r4, #120]	; 0x78
   127dc:	ldr	r2, [r4, #124]	; 0x7c
   127e0:	adds	r3, r3, #1
   127e4:	adc	r2, r2, #0
   127e8:	str	r3, [r4, #120]	; 0x78
   127ec:	str	r2, [r4, #124]	; 0x7c
   127f0:	bl	12744 <push_back_reset@@Base>
   127f4:	ldr	r3, [r4, #128]	; 0x80
   127f8:	ldr	r2, [r4, #132]	; 0x84
   127fc:	adds	r3, r3, #1
   12800:	adc	r2, r2, #0
   12804:	str	r3, [r4, #128]	; 0x80
   12808:	str	r2, [r4, #132]	; 0x84
   1280c:	ldr	r4, [sp]
   12810:	add	sp, sp, #4
   12814:	pop	{pc}		; (ldr pc, [sp], #4)
   12818:	ldrdeq	r9, [r1], -ip

0001281c <no_int_as_first_stuff@@Base>:
   1281c:	strd	r4, [sp, #-20]!	; 0xffffffec
   12820:	ldr	r4, [pc, #320]	; 12968 <no_int_as_first_stuff@@Base+0x14c>
   12824:	add	r4, pc, r4
   12828:	ldr	r3, [r4, #136]	; 0x88
   1282c:	ldr	r2, [r4, #140]	; 0x8c
   12830:	strd	r6, [sp, #8]
   12834:	str	lr, [sp, #16]
   12838:	sub	sp, sp, #20
   1283c:	adds	r3, r3, #1
   12840:	mov	r5, sp
   12844:	ldr	r6, [pc, #288]	; 1296c <no_int_as_first_stuff@@Base+0x150>
   12848:	add	r1, sp, #4
   1284c:	mov	r0, r5
   12850:	adc	r2, r2, #0
   12854:	str	r3, [r4, #136]	; 0x88
   12858:	str	r2, [r4, #140]	; 0x8c
   1285c:	bl	161d8 <init_grammar@@Base>
   12860:	ldr	r3, [r4, #144]	; 0x90
   12864:	mov	r0, #4
   12868:	add	r6, pc, r6
   1286c:	ldr	r2, [r4, #148]	; 0x94
   12870:	adds	r3, r3, #1
   12874:	adc	r2, r2, #0
   12878:	str	r3, [r4, #144]	; 0x90
   1287c:	str	r2, [r4, #148]	; 0x94
   12880:	bl	118b8 <malloc@plt>
   12884:	mov	r7, r0
   12888:	bl	15000 <init_token_opar@@Base>
   1288c:	ldr	r3, [r4, #152]	; 0x98
   12890:	mov	r0, r5
   12894:	ldr	r1, [r4, #156]	; 0x9c
   12898:	ldr	r2, [pc, #208]	; 12970 <no_int_as_first_stuff@@Base+0x154>
   1289c:	adds	r3, r3, #1
   128a0:	adc	r1, r1, #0
   128a4:	str	r3, [r4, #152]	; 0x98
   128a8:	str	r1, [r4, #156]	; 0x9c
   128ac:	ldr	r5, [r6, r2]
   128b0:	str	r7, [r5, #216]	; 0xd8
   128b4:	bl	1716c <read_function_ast_node@@Base>
   128b8:	ldr	r3, [r5, #204]	; 0xcc
   128bc:	cmp	r3, #1
   128c0:	bne	128f8 <no_int_as_first_stuff@@Base+0xdc>
   128c4:	cmp	r0, #0
   128c8:	bne	12930 <no_int_as_first_stuff@@Base+0x114>
   128cc:	ldr	r3, [r4, #168]	; 0xa8
   128d0:	ldr	r2, [r4, #172]	; 0xac
   128d4:	adds	r3, r3, #1
   128d8:	adc	r2, r2, #0
   128dc:	str	r3, [r4, #168]	; 0xa8
   128e0:	str	r2, [r4, #172]	; 0xac
   128e4:	add	sp, sp, #20
   128e8:	ldrd	r4, [sp]
   128ec:	ldrd	r6, [sp, #8]
   128f0:	add	sp, sp, #16
   128f4:	pop	{pc}		; (ldr pc, [sp], #4)
   128f8:	ldr	r1, [r4, #160]	; 0xa0
   128fc:	mov	r2, #41	; 0x29
   12900:	ldr	ip, [r4, #164]	; 0xa4
   12904:	ldr	r3, [pc, #104]	; 12974 <no_int_as_first_stuff@@Base+0x158>
   12908:	adds	r0, r1, #1
   1290c:	ldr	r1, [pc, #100]	; 12978 <no_int_as_first_stuff@@Base+0x15c>
   12910:	str	r0, [r4, #160]	; 0xa0
   12914:	adc	ip, ip, #0
   12918:	ldr	r0, [pc, #92]	; 1297c <no_int_as_first_stuff@@Base+0x160>
   1291c:	add	r3, pc, r3
   12920:	str	ip, [r4, #164]	; 0xa4
   12924:	add	r1, pc, r1
   12928:	add	r0, pc, r0
   1292c:	bl	119b4 <__assert_fail@plt>
   12930:	ldr	r1, [r4, #176]	; 0xb0
   12934:	mov	r2, #42	; 0x2a
   12938:	ldr	ip, [r4, #180]	; 0xb4
   1293c:	ldr	r3, [pc, #60]	; 12980 <no_int_as_first_stuff@@Base+0x164>
   12940:	adds	r0, r1, #1
   12944:	ldr	r1, [pc, #56]	; 12984 <no_int_as_first_stuff@@Base+0x168>
   12948:	str	r0, [r4, #176]	; 0xb0
   1294c:	adc	ip, ip, #0
   12950:	ldr	r0, [pc, #48]	; 12988 <no_int_as_first_stuff@@Base+0x16c>
   12954:	add	r3, pc, r3
   12958:	str	ip, [r4, #180]	; 0xb4
   1295c:	add	r1, pc, r1
   12960:	add	r0, pc, r0
   12964:	bl	119b4 <__assert_fail@plt>
   12968:	andeq	r9, r1, ip, ror #2
   1296c:	muleq	r1, r0, r7
   12970:	andeq	r0, r0, ip, lsr #1
   12974:	andeq	r6, r0, r8, lsl #29
   12978:	strdeq	r6, [r0], -r0
   1297c:	andeq	r7, r0, r8, asr #32
   12980:	andeq	r6, r0, r0, asr lr
   12984:			; <UNDEFINED> instruction: 0x00006fb8
   12988:	andeq	r7, r0, ip, lsr #32

0001298c <int_but_not_followed_by_function@@Base>:
   1298c:	strd	r4, [sp, #-20]!	; 0xffffffec
   12990:	ldr	r4, [pc, #388]	; 12b1c <int_but_not_followed_by_function@@Base+0x190>
   12994:	ldr	r5, [pc, #388]	; 12b20 <int_but_not_followed_by_function@@Base+0x194>
   12998:	add	r4, pc, r4
   1299c:	ldr	r3, [r4, #184]	; 0xb8
   129a0:	add	r5, pc, r5
   129a4:	ldr	r2, [r4, #188]	; 0xbc
   129a8:	strd	r6, [sp, #8]
   129ac:	str	lr, [sp, #16]
   129b0:	sub	sp, sp, #20
   129b4:	adds	r3, r3, #1
   129b8:	mov	r6, sp
   129bc:	add	r1, sp, #4
   129c0:	mov	r0, r6
   129c4:	adc	r2, r2, #0
   129c8:	str	r3, [r4, #184]	; 0xb8
   129cc:	str	r2, [r4, #188]	; 0xbc
   129d0:	bl	161d8 <init_grammar@@Base>
   129d4:	ldr	r3, [r4, #192]	; 0xc0
   129d8:	mov	r0, #8
   129dc:	ldr	r2, [r4, #196]	; 0xc4
   129e0:	adds	r3, r3, #1
   129e4:	adc	r2, r2, #0
   129e8:	str	r3, [r4, #192]	; 0xc0
   129ec:	str	r2, [r4, #196]	; 0xc4
   129f0:	bl	118b8 <malloc@plt>
   129f4:	mov	r7, r0
   129f8:	mov	r0, #4
   129fc:	bl	118b8 <malloc@plt>
   12a00:	str	r0, [r7]
   12a04:	bl	14f68 <init_token_int_type@@Base>
   12a08:	ldr	r3, [r4, #200]	; 0xc8
   12a0c:	mov	r0, #4
   12a10:	ldr	r2, [r4, #204]	; 0xcc
   12a14:	adds	r3, r3, #1
   12a18:	adc	r2, r2, #0
   12a1c:	str	r3, [r4, #200]	; 0xc8
   12a20:	str	r2, [r4, #204]	; 0xcc
   12a24:	bl	118b8 <malloc@plt>
   12a28:	str	r0, [r7, #4]
   12a2c:	bl	15000 <init_token_opar@@Base>
   12a30:	ldr	r3, [r4, #208]	; 0xd0
   12a34:	mov	ip, #2
   12a38:	mov	r0, r6
   12a3c:	ldr	r1, [r4, #212]	; 0xd4
   12a40:	ldr	r2, [pc, #220]	; 12b24 <int_but_not_followed_by_function@@Base+0x198>
   12a44:	adds	r3, r3, #1
   12a48:	adc	r1, r1, #0
   12a4c:	str	r3, [r4, #208]	; 0xd0
   12a50:	str	r1, [r4, #212]	; 0xd4
   12a54:	ldr	r5, [r5, r2]
   12a58:	str	ip, [r5, #220]	; 0xdc
   12a5c:	str	r7, [r5, #228]	; 0xe4
   12a60:	bl	1716c <read_function_ast_node@@Base>
   12a64:	ldr	r3, [r5, #204]	; 0xcc
   12a68:	cmp	r3, #2
   12a6c:	bne	12aa4 <int_but_not_followed_by_function@@Base+0x118>
   12a70:	cmp	r0, #0
   12a74:	bne	12ae0 <int_but_not_followed_by_function@@Base+0x154>
   12a78:	ldr	r3, [r4, #224]	; 0xe0
   12a7c:	ldr	r2, [r4, #228]	; 0xe4
   12a80:	adds	r3, r3, #1
   12a84:	adc	r2, r2, #0
   12a88:	str	r3, [r4, #224]	; 0xe0
   12a8c:	str	r2, [r4, #228]	; 0xe4
   12a90:	add	sp, sp, #20
   12a94:	ldrd	r4, [sp]
   12a98:	ldrd	r6, [sp, #8]
   12a9c:	add	sp, sp, #16
   12aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   12aa4:	ldr	r3, [r4, #216]	; 0xd8
   12aa8:	mov	r2, #67	; 0x43
   12aac:	ldr	lr, [pc, #116]	; 12b28 <int_but_not_followed_by_function@@Base+0x19c>
   12ab0:	ldr	ip, [r4, #220]	; 0xdc
   12ab4:	adds	r3, r3, #1
   12ab8:	ldr	r1, [pc, #108]	; 12b2c <int_but_not_followed_by_function@@Base+0x1a0>
   12abc:	add	lr, pc, lr
   12ac0:	str	r3, [r4, #216]	; 0xd8
   12ac4:	ldr	r0, [pc, #100]	; 12b30 <int_but_not_followed_by_function@@Base+0x1a4>
   12ac8:	add	r3, lr, #24
   12acc:	adc	ip, ip, #0
   12ad0:	add	r1, pc, r1
   12ad4:	str	ip, [r4, #220]	; 0xdc
   12ad8:	add	r0, pc, r0
   12adc:	bl	119b4 <__assert_fail@plt>
   12ae0:	ldr	r3, [r4, #232]	; 0xe8
   12ae4:	mov	r2, #68	; 0x44
   12ae8:	ldr	lr, [pc, #68]	; 12b34 <int_but_not_followed_by_function@@Base+0x1a8>
   12aec:	ldr	ip, [r4, #236]	; 0xec
   12af0:	adds	r3, r3, #1
   12af4:	ldr	r1, [pc, #60]	; 12b38 <int_but_not_followed_by_function@@Base+0x1ac>
   12af8:	add	lr, pc, lr
   12afc:	str	r3, [r4, #232]	; 0xe8
   12b00:	ldr	r0, [pc, #52]	; 12b3c <int_but_not_followed_by_function@@Base+0x1b0>
   12b04:	add	r3, lr, #24
   12b08:	adc	ip, ip, #0
   12b0c:	add	r1, pc, r1
   12b10:	str	ip, [r4, #236]	; 0xec
   12b14:	add	r0, pc, r0
   12b18:	bl	119b4 <__assert_fail@plt>
   12b1c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12b20:	andeq	r8, r1, r8, asr r6
   12b24:	andeq	r0, r0, ip, lsr #1
   12b28:	andeq	r6, r0, r8, ror #25
   12b2c:	andeq	r6, r0, r4, asr #28
   12b30:	andeq	r6, r0, r0, asr #29
   12b34:	andeq	r6, r0, ip, lsr #25
   12b38:	andeq	r6, r0, r8, lsl #28
   12b3c:	andeq	r6, r0, r8, ror lr

00012b40 <boolean_expression_is_read_properly@@Base>:
   12b40:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12b44:	mov	r0, #3
   12b48:	ldr	r4, [pc, #636]	; 12dcc <boolean_expression_is_read_properly@@Base+0x28c>
   12b4c:	add	r4, pc, r4
   12b50:	ldr	r3, [r4, #240]	; 0xf0
   12b54:	ldr	r2, [r4, #244]	; 0xf4
   12b58:	strd	r6, [sp, #8]
   12b5c:	strd	r8, [sp, #16]
   12b60:	adds	r3, r3, #1
   12b64:	str	sl, [sp, #24]
   12b68:	str	lr, [sp, #28]
   12b6c:	sub	sp, sp, #16
   12b70:	adc	r2, r2, #0
   12b74:	str	r3, [r4, #240]	; 0xf0
   12b78:	mov	r9, sp
   12b7c:	ldr	r8, [pc, #588]	; 12dd0 <boolean_expression_is_read_properly@@Base+0x290>
   12b80:	str	r2, [r4, #244]	; 0xf4
   12b84:	bl	118b8 <malloc@plt>
   12b88:	mov	sl, r0
   12b8c:	movw	r2, #15649	; 0x3d21
   12b90:	mov	r3, #0
   12b94:	add	r1, sp, #4
   12b98:	mov	r0, r9
   12b9c:	strh	r2, [sl]
   12ba0:	add	r8, pc, r8
   12ba4:	strb	r3, [sl, #2]
   12ba8:	bl	161d8 <init_grammar@@Base>
   12bac:	ldr	r3, [r4, #248]	; 0xf8
   12bb0:	mov	r0, #20
   12bb4:	ldr	r2, [r4, #252]	; 0xfc
   12bb8:	adds	r3, r3, #1
   12bbc:	adc	r2, r2, #0
   12bc0:	str	r3, [r4, #248]	; 0xf8
   12bc4:	str	r2, [r4, #252]	; 0xfc
   12bc8:	bl	118b8 <malloc@plt>
   12bcc:	mov	r7, r0
   12bd0:	mov	r0, #8
   12bd4:	bl	118b8 <malloc@plt>
   12bd8:	mov	r1, #2
   12bdc:	str	r0, [r7]
   12be0:	bl	14f98 <init_token_int_value@@Base>
   12be4:	ldr	r3, [r4, #256]	; 0x100
   12be8:	mov	r0, #8
   12bec:	ldr	r1, [r4, #260]	; 0x104
   12bf0:	adds	r3, r3, #1
   12bf4:	adc	r1, r1, #0
   12bf8:	str	r3, [r4, #256]	; 0x100
   12bfc:	str	r1, [r4, #260]	; 0x104
   12c00:	bl	118b8 <malloc@plt>
   12c04:	mov	r1, #2
   12c08:	str	r0, [r7, #4]
   12c0c:	bl	14f98 <init_token_int_value@@Base>
   12c10:	ldr	r3, [r4, #264]	; 0x108
   12c14:	mov	r0, #8
   12c18:	ldr	r2, [r4, #268]	; 0x10c
   12c1c:	adds	r3, r3, #1
   12c20:	adc	r2, r2, #0
   12c24:	str	r3, [r4, #264]	; 0x108
   12c28:	str	r2, [r4, #268]	; 0x10c
   12c2c:	bl	118b8 <malloc@plt>
   12c30:	mov	r1, sl
   12c34:	str	r0, [r7, #8]
   12c38:	bl	151b0 <init_token_boolean_op@@Base>
   12c3c:	ldr	r3, [r4, #272]	; 0x110
   12c40:	mov	r0, #8
   12c44:	ldr	r2, [r4, #276]	; 0x114
   12c48:	adds	r3, r3, #1
   12c4c:	adc	r2, r2, #0
   12c50:	str	r3, [r4, #272]	; 0x110
   12c54:	str	r2, [r4, #276]	; 0x114
   12c58:	bl	118b8 <malloc@plt>
   12c5c:	mov	r1, #1
   12c60:	str	r0, [r7, #12]
   12c64:	bl	14f98 <init_token_int_value@@Base>
   12c68:	ldr	r3, [r4, #280]	; 0x118
   12c6c:	mov	r0, #4
   12c70:	ldr	r2, [r4, #284]	; 0x11c
   12c74:	adds	r3, r3, #1
   12c78:	adc	r2, r2, #0
   12c7c:	str	r3, [r4, #280]	; 0x118
   12c80:	str	r2, [r4, #284]	; 0x11c
   12c84:	bl	118b8 <malloc@plt>
   12c88:	str	r0, [r7, #16]
   12c8c:	bl	15030 <init_token_cpar@@Base>
   12c90:	ldr	r3, [r4, #288]	; 0x120
   12c94:	mov	ip, #5
   12c98:	mov	r0, r9
   12c9c:	ldr	r1, [r4, #292]	; 0x124
   12ca0:	ldr	r2, [pc, #300]	; 12dd4 <boolean_expression_is_read_properly@@Base+0x294>
   12ca4:	adds	r3, r3, #1
   12ca8:	adc	r1, r1, #0
   12cac:	str	r3, [r4, #288]	; 0x120
   12cb0:	str	r1, [r4, #292]	; 0x124
   12cb4:	ldr	r5, [r8, r2]
   12cb8:	str	ip, [r5, #220]	; 0xdc
   12cbc:	str	r7, [r5, #228]	; 0xe4
   12cc0:	bl	169e4 <read_boolean_expression@@Base>
   12cc4:	ldr	r3, [r5, #204]	; 0xcc
   12cc8:	cmp	r3, #5
   12ccc:	bne	12d24 <boolean_expression_is_read_properly@@Base+0x1e4>
   12cd0:	ldr	r3, [pc, #256]	; 12dd8 <boolean_expression_is_read_properly@@Base+0x298>
   12cd4:	ldr	r3, [r8, r3]
   12cd8:	ldr	r3, [r3, #408]	; 0x198
   12cdc:	cmp	r3, #1
   12ce0:	bne	12d94 <boolean_expression_is_read_properly@@Base+0x254>
   12ce4:	ldr	r3, [r0]
   12ce8:	cmp	r3, #5
   12cec:	bne	12d5c <boolean_expression_is_read_properly@@Base+0x21c>
   12cf0:	ldr	r3, [r4, #312]	; 0x138
   12cf4:	ldr	r2, [r4, #316]	; 0x13c
   12cf8:	adds	r3, r3, #1
   12cfc:	adc	r2, r2, #0
   12d00:	str	r3, [r4, #312]	; 0x138
   12d04:	str	r2, [r4, #316]	; 0x13c
   12d08:	add	sp, sp, #16
   12d0c:	ldrd	r4, [sp]
   12d10:	ldrd	r6, [sp, #8]
   12d14:	ldrd	r8, [sp, #16]
   12d18:	ldr	sl, [sp, #24]
   12d1c:	add	sp, sp, #28
   12d20:	pop	{pc}		; (ldr pc, [sp], #4)
   12d24:	add	r4, r4, #304	; 0x130
   12d28:	ldr	r3, [pc, #172]	; 12ddc <boolean_expression_is_read_properly@@Base+0x29c>
   12d2c:	mov	r2, #105	; 0x69
   12d30:	ldmdb	r4, {r0, ip}
   12d34:	ldr	r1, [pc, #164]	; 12de0 <boolean_expression_is_read_properly@@Base+0x2a0>
   12d38:	add	r3, pc, r3
   12d3c:	add	r3, r3, #60	; 0x3c
   12d40:	adds	r0, r0, #1
   12d44:	adc	ip, ip, #0
   12d48:	add	r1, pc, r1
   12d4c:	stmdb	r4, {r0, ip}
   12d50:	ldr	r0, [pc, #140]	; 12de4 <boolean_expression_is_read_properly@@Base+0x2a4>
   12d54:	add	r0, pc, r0
   12d58:	bl	119b4 <__assert_fail@plt>
   12d5c:	add	r4, r4, #320	; 0x140
   12d60:	ldr	r3, [pc, #128]	; 12de8 <boolean_expression_is_read_properly@@Base+0x2a8>
   12d64:	mov	r2, #107	; 0x6b
   12d68:	ldm	r4, {r0, ip}
   12d6c:	ldr	r1, [pc, #120]	; 12dec <boolean_expression_is_read_properly@@Base+0x2ac>
   12d70:	add	r3, pc, r3
   12d74:	add	r3, r3, #60	; 0x3c
   12d78:	adds	r0, r0, #1
   12d7c:	adc	ip, ip, #0
   12d80:	add	r1, pc, r1
   12d84:	stm	r4, {r0, ip}
   12d88:	ldr	r0, [pc, #96]	; 12df0 <boolean_expression_is_read_properly@@Base+0x2b0>
   12d8c:	add	r0, pc, r0
   12d90:	bl	119b4 <__assert_fail@plt>
   12d94:	add	r4, r4, #304	; 0x130
   12d98:	ldr	r3, [pc, #84]	; 12df4 <boolean_expression_is_read_properly@@Base+0x2b4>
   12d9c:	mov	r2, #106	; 0x6a
   12da0:	ldm	r4, {r0, ip}
   12da4:	ldr	r1, [pc, #76]	; 12df8 <boolean_expression_is_read_properly@@Base+0x2b8>
   12da8:	add	r3, pc, r3
   12dac:	add	r3, r3, #60	; 0x3c
   12db0:	adds	r0, r0, #1
   12db4:	adc	ip, ip, #0
   12db8:	add	r1, pc, r1
   12dbc:	stm	r4, {r0, ip}
   12dc0:	ldr	r0, [pc, #52]	; 12dfc <boolean_expression_is_read_properly@@Base+0x2bc>
   12dc4:	add	r0, pc, r0
   12dc8:	bl	119b4 <__assert_fail@plt>
   12dcc:	andeq	r8, r1, r4, asr #28
   12dd0:	andeq	r8, r1, r8, asr r4
   12dd4:	andeq	r0, r0, ip, lsr #1
   12dd8:	muleq	r0, ip, r0
   12ddc:	andeq	r6, r0, ip, ror #20
   12de0:	andeq	r6, r0, ip, asr #23
   12de4:	andeq	r6, r0, r0, ror #24
   12de8:	andeq	r6, r0, r4, lsr sl
   12dec:	muleq	r0, r4, fp
   12df0:	andeq	r6, r0, r4, ror #24
   12df4:	strdeq	r6, [r0], -ip
   12df8:	andeq	r6, r0, ip, asr fp
   12dfc:	andeq	r6, r0, ip, lsl #24

00012e00 <boolean_expression_complex@@Base>:
   12e00:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12e04:	mov	r0, #3
   12e08:	ldr	r4, [pc, #840]	; 13158 <boolean_expression_complex@@Base+0x358>
   12e0c:	add	r4, pc, r4
   12e10:	add	r4, r4, #336	; 0x150
   12e14:	ldr	r3, [r4, #-8]
   12e18:	ldr	r2, [r4, #-4]
   12e1c:	strd	r6, [sp, #8]
   12e20:	strd	r8, [sp, #16]
   12e24:	adds	r3, r3, #1
   12e28:	str	sl, [sp, #24]
   12e2c:	str	lr, [sp, #28]
   12e30:	sub	sp, sp, #16
   12e34:	adc	r2, r2, #0
   12e38:	str	r3, [r4, #-8]
   12e3c:	mov	r7, sp
   12e40:	ldr	r6, [pc, #788]	; 1315c <boolean_expression_complex@@Base+0x35c>
   12e44:	str	r2, [r4, #-4]
   12e48:	bl	118b8 <malloc@plt>
   12e4c:	mov	sl, r0
   12e50:	mov	r0, #3
   12e54:	bl	118b8 <malloc@plt>
   12e58:	mov	r9, r0
   12e5c:	mov	r0, #3
   12e60:	bl	118b8 <malloc@plt>
   12e64:	movw	r3, #15676	; 0x3d3c
   12e68:	movw	r1, #9766	; 0x2626
   12e6c:	mov	r8, r0
   12e70:	movw	r2, #15677	; 0x3d3d
   12e74:	strh	r3, [sl]
   12e78:	mov	r3, #0
   12e7c:	mov	r0, r7
   12e80:	strh	r1, [r9]
   12e84:	add	r1, sp, #4
   12e88:	add	r6, pc, r6
   12e8c:	strh	r2, [r8]
   12e90:	strb	r3, [r8, #2]
   12e94:	strb	r3, [r9, #2]
   12e98:	strb	r3, [sl, #2]
   12e9c:	bl	161d8 <init_grammar@@Base>
   12ea0:	ldr	r3, [r4]
   12ea4:	mov	r0, #40	; 0x28
   12ea8:	ldr	r2, [r4, #4]
   12eac:	adds	r3, r3, #1
   12eb0:	adc	r2, r2, #0
   12eb4:	str	r3, [r4]
   12eb8:	str	r2, [r4, #4]
   12ebc:	bl	118b8 <malloc@plt>
   12ec0:	mov	r5, r0
   12ec4:	mov	r0, #8
   12ec8:	bl	118b8 <malloc@plt>
   12ecc:	mov	r1, #2
   12ed0:	str	r0, [r5]
   12ed4:	bl	14f98 <init_token_int_value@@Base>
   12ed8:	ldr	r3, [r4, #8]
   12edc:	mov	r0, #8
   12ee0:	ldr	r2, [r4, #12]
   12ee4:	adds	r3, r3, #1
   12ee8:	adc	r2, r2, #0
   12eec:	str	r3, [r4, #8]
   12ef0:	str	r2, [r4, #12]
   12ef4:	bl	118b8 <malloc@plt>
   12ef8:	mov	r1, #2
   12efc:	str	r0, [r5, #4]
   12f00:	bl	14f98 <init_token_int_value@@Base>
   12f04:	ldr	r3, [r4, #16]
   12f08:	mov	r0, #8
   12f0c:	ldr	r2, [r4, #20]
   12f10:	adds	r3, r3, #1
   12f14:	adc	r2, r2, #0
   12f18:	str	r3, [r4, #16]
   12f1c:	str	r2, [r4, #20]
   12f20:	bl	118b8 <malloc@plt>
   12f24:	mov	r1, sl
   12f28:	str	r0, [r5, #8]
   12f2c:	bl	151b0 <init_token_boolean_op@@Base>
   12f30:	ldr	r3, [r4, #24]
   12f34:	mov	r0, #8
   12f38:	ldr	r2, [r4, #28]
   12f3c:	adds	r3, r3, #1
   12f40:	adc	r2, r2, #0
   12f44:	str	r3, [r4, #24]
   12f48:	str	r2, [r4, #28]
   12f4c:	bl	118b8 <malloc@plt>
   12f50:	mov	r1, #1
   12f54:	str	r0, [r5, #12]
   12f58:	bl	14f98 <init_token_int_value@@Base>
   12f5c:	ldr	r3, [r4, #32]
   12f60:	mov	r0, #8
   12f64:	ldr	r2, [r4, #36]	; 0x24
   12f68:	adds	r3, r3, #1
   12f6c:	adc	r2, r2, #0
   12f70:	str	r3, [r4, #32]
   12f74:	str	r2, [r4, #36]	; 0x24
   12f78:	bl	118b8 <malloc@plt>
   12f7c:	mov	r1, r9
   12f80:	str	r0, [r5, #16]
   12f84:	bl	151b0 <init_token_boolean_op@@Base>
   12f88:	ldr	r3, [r4, #40]	; 0x28
   12f8c:	mov	r0, #8
   12f90:	ldr	r2, [r4, #44]	; 0x2c
   12f94:	adds	r3, r3, #1
   12f98:	adc	r2, r2, #0
   12f9c:	str	r3, [r4, #40]	; 0x28
   12fa0:	str	r2, [r4, #44]	; 0x2c
   12fa4:	bl	118b8 <malloc@plt>
   12fa8:	mov	r1, #4
   12fac:	str	r0, [r5, #20]
   12fb0:	bl	14f98 <init_token_int_value@@Base>
   12fb4:	ldr	r3, [r4, #48]	; 0x30
   12fb8:	mov	r0, #8
   12fbc:	ldr	r2, [r4, #52]	; 0x34
   12fc0:	adds	r3, r3, #1
   12fc4:	adc	r2, r2, #0
   12fc8:	str	r3, [r4, #48]	; 0x30
   12fcc:	str	r2, [r4, #52]	; 0x34
   12fd0:	bl	118b8 <malloc@plt>
   12fd4:	mov	r1, #4
   12fd8:	str	r0, [r5, #24]
   12fdc:	bl	14f98 <init_token_int_value@@Base>
   12fe0:	ldr	r3, [r4, #56]	; 0x38
   12fe4:	mov	r0, #8
   12fe8:	ldr	r2, [r4, #60]	; 0x3c
   12fec:	adds	r3, r3, #1
   12ff0:	adc	r2, r2, #0
   12ff4:	str	r3, [r4, #56]	; 0x38
   12ff8:	str	r2, [r4, #60]	; 0x3c
   12ffc:	bl	118b8 <malloc@plt>
   13000:	mov	r1, r8
   13004:	str	r0, [r5, #28]
   13008:	bl	151b0 <init_token_boolean_op@@Base>
   1300c:	ldr	r3, [r4, #64]	; 0x40
   13010:	mov	r0, #8
   13014:	ldr	r2, [r4, #68]	; 0x44
   13018:	adds	r3, r3, #1
   1301c:	adc	r2, r2, #0
   13020:	str	r3, [r4, #64]	; 0x40
   13024:	str	r2, [r4, #68]	; 0x44
   13028:	bl	118b8 <malloc@plt>
   1302c:	mov	r1, #4
   13030:	str	r0, [r5, #32]
   13034:	bl	14f98 <init_token_int_value@@Base>
   13038:	ldr	r3, [r4, #72]	; 0x48
   1303c:	mov	r0, #4
   13040:	ldr	r2, [r4, #76]	; 0x4c
   13044:	adds	r3, r3, #1
   13048:	adc	r2, r2, #0
   1304c:	str	r3, [r4, #72]	; 0x48
   13050:	str	r2, [r4, #76]	; 0x4c
   13054:	bl	118b8 <malloc@plt>
   13058:	str	r0, [r5, #36]	; 0x24
   1305c:	bl	15030 <init_token_cpar@@Base>
   13060:	ldr	r3, [r4, #80]	; 0x50
   13064:	mov	ip, #10
   13068:	mov	r0, r7
   1306c:	ldr	r1, [r4, #84]	; 0x54
   13070:	ldr	r2, [pc, #232]	; 13160 <boolean_expression_complex@@Base+0x360>
   13074:	adds	r3, r3, #1
   13078:	adc	r1, r1, #0
   1307c:	str	r3, [r4, #80]	; 0x50
   13080:	str	r1, [r4, #84]	; 0x54
   13084:	ldr	r6, [r6, r2]
   13088:	str	ip, [r6, #220]	; 0xdc
   1308c:	str	r5, [r6, #228]	; 0xe4
   13090:	bl	169e4 <read_boolean_expression@@Base>
   13094:	ldr	r3, [r6, #204]	; 0xcc
   13098:	cmp	r3, #10
   1309c:	bne	130e0 <boolean_expression_complex@@Base+0x2e0>
   130a0:	ldr	r3, [r0]
   130a4:	cmp	r3, #5
   130a8:	bne	1311c <boolean_expression_complex@@Base+0x31c>
   130ac:	ldr	r3, [r4, #96]	; 0x60
   130b0:	ldr	r2, [r4, #100]	; 0x64
   130b4:	adds	r3, r3, #1
   130b8:	adc	r2, r2, #0
   130bc:	str	r3, [r4, #96]	; 0x60
   130c0:	str	r2, [r4, #100]	; 0x64
   130c4:	add	sp, sp, #16
   130c8:	ldrd	r4, [sp]
   130cc:	ldrd	r6, [sp, #8]
   130d0:	ldrd	r8, [sp, #16]
   130d4:	ldr	sl, [sp, #24]
   130d8:	add	sp, sp, #28
   130dc:	pop	{pc}		; (ldr pc, [sp], #4)
   130e0:	ldr	r3, [r4, #88]	; 0x58
   130e4:	mov	r2, #166	; 0xa6
   130e8:	ldr	lr, [pc, #116]	; 13164 <boolean_expression_complex@@Base+0x364>
   130ec:	ldr	ip, [r4, #92]	; 0x5c
   130f0:	adds	r3, r3, #1
   130f4:	ldr	r1, [pc, #108]	; 13168 <boolean_expression_complex@@Base+0x368>
   130f8:	add	lr, pc, lr
   130fc:	str	r3, [r4, #88]	; 0x58
   13100:	ldr	r0, [pc, #100]	; 1316c <boolean_expression_complex@@Base+0x36c>
   13104:	add	r3, lr, #96	; 0x60
   13108:	adc	ip, ip, #0
   1310c:	add	r1, pc, r1
   13110:	str	ip, [r4, #92]	; 0x5c
   13114:	add	r0, pc, r0
   13118:	bl	119b4 <__assert_fail@plt>
   1311c:	ldr	r3, [r4, #104]	; 0x68
   13120:	mov	r2, #167	; 0xa7
   13124:	ldr	lr, [pc, #68]	; 13170 <boolean_expression_complex@@Base+0x370>
   13128:	ldr	ip, [r4, #108]	; 0x6c
   1312c:	adds	r3, r3, #1
   13130:	ldr	r1, [pc, #60]	; 13174 <boolean_expression_complex@@Base+0x374>
   13134:	add	lr, pc, lr
   13138:	str	r3, [r4, #104]	; 0x68
   1313c:	ldr	r0, [pc, #52]	; 13178 <boolean_expression_complex@@Base+0x378>
   13140:	add	r3, lr, #96	; 0x60
   13144:	adc	ip, ip, #0
   13148:	add	r1, pc, r1
   1314c:	str	ip, [r4, #108]	; 0x6c
   13150:	add	r0, pc, r0
   13154:	bl	119b4 <__assert_fail@plt>
   13158:	andeq	r8, r1, r4, lsl #23
   1315c:	andeq	r8, r1, r0, ror r1
   13160:	andeq	r0, r0, ip, lsr #1
   13164:	andeq	r6, r0, ip, lsr #13
   13168:	andeq	r6, r0, r8, lsl #16
   1316c:	strdeq	r6, [r0], -ip
   13170:	andeq	r6, r0, r0, ror r6
   13174:	andeq	r6, r0, ip, asr #15
   13178:	andeq	r6, r0, r0, lsr #17

0001317c <boolean_binary_operator_is_read_properly@@Base>:
   1317c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13180:	mov	r0, #3
   13184:	ldr	r4, [pc, #704]	; 1344c <boolean_binary_operator_is_read_properly@@Base+0x2d0>
   13188:	add	r4, pc, r4
   1318c:	add	r4, r4, #448	; 0x1c0
   13190:	ldr	r3, [r4]
   13194:	ldr	r2, [r4, #4]
   13198:	strd	r6, [sp, #8]
   1319c:	str	r8, [sp, #16]
   131a0:	adds	r3, r3, #1
   131a4:	str	lr, [sp, #20]
   131a8:	sub	sp, sp, #16
   131ac:	mov	r7, sp
   131b0:	ldr	r6, [pc, #664]	; 13450 <boolean_binary_operator_is_read_properly@@Base+0x2d4>
   131b4:	adc	r2, r2, #0
   131b8:	str	r3, [r4]
   131bc:	str	r2, [r4, #4]
   131c0:	bl	118b8 <malloc@plt>
   131c4:	mov	r8, r0
   131c8:	movw	r2, #15649	; 0x3d21
   131cc:	mov	r3, #0
   131d0:	add	r1, sp, #4
   131d4:	mov	r0, r7
   131d8:	strh	r2, [r8]
   131dc:	add	r6, pc, r6
   131e0:	strb	r3, [r8, #2]
   131e4:	bl	161d8 <init_grammar@@Base>
   131e8:	ldr	r3, [r4, #8]
   131ec:	mov	r0, #12
   131f0:	ldr	r2, [r4, #12]
   131f4:	adds	r3, r3, #1
   131f8:	adc	r2, r2, #0
   131fc:	str	r3, [r4, #8]
   13200:	str	r2, [r4, #12]
   13204:	bl	118b8 <malloc@plt>
   13208:	mov	r5, r0
   1320c:	mov	r0, #8
   13210:	bl	118b8 <malloc@plt>
   13214:	mov	r1, #2
   13218:	str	r0, [r5]
   1321c:	bl	14f98 <init_token_int_value@@Base>
   13220:	ldr	r3, [r4, #16]
   13224:	mov	r0, #8
   13228:	ldr	r2, [r4, #20]
   1322c:	adds	r3, r3, #1
   13230:	adc	r2, r2, #0
   13234:	str	r3, [r4, #16]
   13238:	str	r2, [r4, #20]
   1323c:	bl	118b8 <malloc@plt>
   13240:	mov	r1, r8
   13244:	str	r0, [r5, #4]
   13248:	bl	151b0 <init_token_boolean_op@@Base>
   1324c:	ldr	r3, [r4, #24]
   13250:	mov	r0, #8
   13254:	ldr	r2, [r4, #28]
   13258:	adds	r3, r3, #1
   1325c:	adc	r2, r2, #0
   13260:	str	r3, [r4, #24]
   13264:	str	r2, [r4, #28]
   13268:	bl	118b8 <malloc@plt>
   1326c:	mov	r1, #1
   13270:	str	r0, [r5, #8]
   13274:	bl	14f98 <init_token_int_value@@Base>
   13278:	ldr	r3, [r4, #32]
   1327c:	mov	ip, #3
   13280:	mov	r0, r7
   13284:	ldr	r1, [r4, #36]	; 0x24
   13288:	ldr	r2, [pc, #452]	; 13454 <boolean_binary_operator_is_read_properly@@Base+0x2d8>
   1328c:	adds	r3, r3, #1
   13290:	adc	r1, r1, #0
   13294:	str	r3, [r4, #32]
   13298:	str	r1, [r4, #36]	; 0x24
   1329c:	ldr	r6, [r6, r2]
   132a0:	str	ip, [r6, #220]	; 0xdc
   132a4:	str	r5, [r6, #228]	; 0xe4
   132a8:	bl	165a8 <read_boolean_binary_expression@@Base>
   132ac:	ldr	r3, [r6, #204]	; 0xcc
   132b0:	cmp	r3, #3
   132b4:	bne	13320 <boolean_binary_operator_is_read_properly@@Base+0x1a4>
   132b8:	ldr	r3, [r0]
   132bc:	cmp	r3, #5
   132c0:	bne	13410 <boolean_binary_operator_is_read_properly@@Base+0x294>
   132c4:	ldr	r3, [r0, #8]
   132c8:	ldr	r3, [r3]
   132cc:	cmp	r3, #1
   132d0:	bne	133d4 <boolean_binary_operator_is_read_properly@@Base+0x258>
   132d4:	ldr	r3, [r0, #16]
   132d8:	cmp	r3, #1
   132dc:	bne	13398 <boolean_binary_operator_is_read_properly@@Base+0x21c>
   132e0:	ldr	r3, [r0, #12]
   132e4:	ldr	r3, [r3]
   132e8:	cmp	r3, #1
   132ec:	bne	1335c <boolean_binary_operator_is_read_properly@@Base+0x1e0>
   132f0:	ldr	r3, [r4, #72]	; 0x48
   132f4:	ldr	r2, [r4, #76]	; 0x4c
   132f8:	adds	r3, r3, #1
   132fc:	adc	r2, r2, #0
   13300:	str	r3, [r4, #72]	; 0x48
   13304:	str	r2, [r4, #76]	; 0x4c
   13308:	add	sp, sp, #16
   1330c:	ldrd	r4, [sp]
   13310:	ldrd	r6, [sp, #8]
   13314:	ldr	r8, [sp, #16]
   13318:	add	sp, sp, #20
   1331c:	pop	{pc}		; (ldr pc, [sp], #4)
   13320:	ldr	r3, [r4, #40]	; 0x28
   13324:	mov	r2, #200	; 0xc8
   13328:	ldr	lr, [pc, #296]	; 13458 <boolean_binary_operator_is_read_properly@@Base+0x2dc>
   1332c:	ldr	ip, [r4, #44]	; 0x2c
   13330:	adds	r3, r3, #1
   13334:	ldr	r1, [pc, #288]	; 1345c <boolean_binary_operator_is_read_properly@@Base+0x2e0>
   13338:	add	lr, pc, lr
   1333c:	str	r3, [r4, #40]	; 0x28
   13340:	ldr	r0, [pc, #280]	; 13460 <boolean_binary_operator_is_read_properly@@Base+0x2e4>
   13344:	add	r3, lr, #124	; 0x7c
   13348:	adc	ip, ip, #0
   1334c:	add	r1, pc, r1
   13350:	str	ip, [r4, #44]	; 0x2c
   13354:	add	r0, pc, r0
   13358:	bl	119b4 <__assert_fail@plt>
   1335c:	ldr	r3, [r4, #80]	; 0x50
   13360:	mov	r2, #205	; 0xcd
   13364:	ldr	lr, [pc, #248]	; 13464 <boolean_binary_operator_is_read_properly@@Base+0x2e8>
   13368:	ldr	ip, [r4, #84]	; 0x54
   1336c:	adds	r3, r3, #1
   13370:	ldr	r1, [pc, #240]	; 13468 <boolean_binary_operator_is_read_properly@@Base+0x2ec>
   13374:	add	lr, pc, lr
   13378:	str	r3, [r4, #80]	; 0x50
   1337c:	ldr	r0, [pc, #232]	; 1346c <boolean_binary_operator_is_read_properly@@Base+0x2f0>
   13380:	add	r3, lr, #124	; 0x7c
   13384:	adc	ip, ip, #0
   13388:	add	r1, pc, r1
   1338c:	str	ip, [r4, #84]	; 0x54
   13390:	add	r0, pc, r0
   13394:	bl	119b4 <__assert_fail@plt>
   13398:	ldr	r3, [r4, #64]	; 0x40
   1339c:	mov	r2, #204	; 0xcc
   133a0:	ldr	lr, [pc, #200]	; 13470 <boolean_binary_operator_is_read_properly@@Base+0x2f4>
   133a4:	ldr	ip, [r4, #68]	; 0x44
   133a8:	adds	r3, r3, #1
   133ac:	ldr	r1, [pc, #192]	; 13474 <boolean_binary_operator_is_read_properly@@Base+0x2f8>
   133b0:	add	lr, pc, lr
   133b4:	str	r3, [r4, #64]	; 0x40
   133b8:	ldr	r0, [pc, #184]	; 13478 <boolean_binary_operator_is_read_properly@@Base+0x2fc>
   133bc:	add	r3, lr, #124	; 0x7c
   133c0:	adc	ip, ip, #0
   133c4:	add	r1, pc, r1
   133c8:	str	ip, [r4, #68]	; 0x44
   133cc:	add	r0, pc, r0
   133d0:	bl	119b4 <__assert_fail@plt>
   133d4:	ldr	r3, [r4, #56]	; 0x38
   133d8:	mov	r2, #203	; 0xcb
   133dc:	ldr	lr, [pc, #152]	; 1347c <boolean_binary_operator_is_read_properly@@Base+0x300>
   133e0:	ldr	ip, [r4, #60]	; 0x3c
   133e4:	adds	r3, r3, #1
   133e8:	ldr	r1, [pc, #144]	; 13480 <boolean_binary_operator_is_read_properly@@Base+0x304>
   133ec:	add	lr, pc, lr
   133f0:	str	r3, [r4, #56]	; 0x38
   133f4:	ldr	r0, [pc, #136]	; 13484 <boolean_binary_operator_is_read_properly@@Base+0x308>
   133f8:	add	r3, lr, #124	; 0x7c
   133fc:	adc	ip, ip, #0
   13400:	add	r1, pc, r1
   13404:	str	ip, [r4, #60]	; 0x3c
   13408:	add	r0, pc, r0
   1340c:	bl	119b4 <__assert_fail@plt>
   13410:	ldr	r3, [r4, #48]	; 0x30
   13414:	mov	r2, #201	; 0xc9
   13418:	ldr	lr, [pc, #104]	; 13488 <boolean_binary_operator_is_read_properly@@Base+0x30c>
   1341c:	ldr	ip, [r4, #52]	; 0x34
   13420:	adds	r3, r3, #1
   13424:	ldr	r1, [pc, #96]	; 1348c <boolean_binary_operator_is_read_properly@@Base+0x310>
   13428:	add	lr, pc, lr
   1342c:	str	r3, [r4, #48]	; 0x30
   13430:	ldr	r0, [pc, #88]	; 13490 <boolean_binary_operator_is_read_properly@@Base+0x314>
   13434:	add	r3, lr, #124	; 0x7c
   13438:	adc	ip, ip, #0
   1343c:	add	r1, pc, r1
   13440:	str	ip, [r4, #52]	; 0x34
   13444:	add	r0, pc, r0
   13448:	bl	119b4 <__assert_fail@plt>
   1344c:	andeq	r8, r1, r8, lsl #16
   13450:	andeq	r7, r1, ip, lsl lr
   13454:	andeq	r0, r0, ip, lsr #1
   13458:	andeq	r6, r0, ip, ror #8
   1345c:	andeq	r6, r0, r8, asr #11
   13460:	ldrdeq	r6, [r0], -r8
   13464:	andeq	r6, r0, r0, lsr r4
   13468:	andeq	r6, r0, ip, lsl #11
   1346c:	strdeq	r6, [r0], -r0
   13470:	strdeq	r6, [r0], -r4
   13474:	andeq	r6, r0, r0, asr r5
   13478:	muleq	r0, r8, r6
   1347c:			; <UNDEFINED> instruction: 0x000063b8
   13480:	andeq	r6, r0, r4, lsl r5
   13484:	andeq	r6, r0, r0, asr #12
   13488:	andeq	r6, r0, ip, ror r3
   1348c:	ldrdeq	r6, [r0], -r8
   13490:	andeq	r6, r0, ip, lsr #11

00013494 <boolean_unary_operator_is_read_properly@@Base>:
   13494:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13498:	mov	r0, #2
   1349c:	ldr	r4, [pc, #648]	; 1372c <boolean_unary_operator_is_read_properly@@Base+0x298>
   134a0:	ldr	r5, [pc, #648]	; 13730 <boolean_unary_operator_is_read_properly@@Base+0x29c>
   134a4:	add	r4, pc, r4
   134a8:	add	r4, r4, #544	; 0x220
   134ac:	ldr	r3, [r4, #-8]
   134b0:	add	r5, pc, r5
   134b4:	ldr	r2, [r4, #-4]
   134b8:	strd	r6, [sp, #8]
   134bc:	str	r8, [sp, #16]
   134c0:	adds	r3, r3, #1
   134c4:	str	lr, [sp, #20]
   134c8:	sub	sp, sp, #16
   134cc:	mov	r6, sp
   134d0:	adc	r2, r2, #0
   134d4:	str	r3, [r4, #-8]
   134d8:	str	r2, [r4, #-4]
   134dc:	bl	118b8 <malloc@plt>
   134e0:	mov	r8, r0
   134e4:	mov	r3, #33	; 0x21
   134e8:	add	r1, sp, #4
   134ec:	mov	r0, r6
   134f0:	strh	r3, [r8]
   134f4:	bl	161d8 <init_grammar@@Base>
   134f8:	ldr	r3, [r4]
   134fc:	mov	r0, #8
   13500:	ldr	r2, [r4, #4]
   13504:	adds	r3, r3, #1
   13508:	adc	r2, r2, #0
   1350c:	str	r3, [r4]
   13510:	str	r2, [r4, #4]
   13514:	bl	118b8 <malloc@plt>
   13518:	mov	r7, r0
   1351c:	mov	r0, #8
   13520:	bl	118b8 <malloc@plt>
   13524:	mov	r1, r8
   13528:	str	r0, [r7]
   1352c:	bl	151b0 <init_token_boolean_op@@Base>
   13530:	ldr	r3, [r4, #8]
   13534:	mov	r0, #8
   13538:	ldr	r2, [r4, #12]
   1353c:	adds	r3, r3, #1
   13540:	adc	r2, r2, #0
   13544:	str	r3, [r4, #8]
   13548:	str	r2, [r4, #12]
   1354c:	bl	118b8 <malloc@plt>
   13550:	mov	r1, #1
   13554:	str	r0, [r7, #4]
   13558:	bl	14f98 <init_token_int_value@@Base>
   1355c:	ldr	r3, [r4, #16]
   13560:	mov	ip, #2
   13564:	mov	r0, r6
   13568:	ldr	r1, [r4, #20]
   1356c:	ldr	r2, [pc, #448]	; 13734 <boolean_unary_operator_is_read_properly@@Base+0x2a0>
   13570:	adds	r3, r3, #1
   13574:	adc	r1, r1, #0
   13578:	str	r3, [r4, #16]
   1357c:	str	r1, [r4, #20]
   13580:	ldr	r5, [r5, r2]
   13584:	str	ip, [r5, #220]	; 0xdc
   13588:	str	r7, [r5, #228]	; 0xe4
   1358c:	bl	163ac <read_boolean_unary_expression@@Base>
   13590:	ldr	r3, [r5, #204]	; 0xcc
   13594:	cmp	r3, #2
   13598:	bne	13600 <boolean_unary_operator_is_read_properly@@Base+0x16c>
   1359c:	ldr	r3, [r0]
   135a0:	cmp	r3, #5
   135a4:	bne	136f0 <boolean_unary_operator_is_read_properly@@Base+0x25c>
   135a8:	ldr	r3, [r0, #8]
   135ac:	ldr	r3, [r3]
   135b0:	cmp	r3, #1
   135b4:	bne	136b4 <boolean_unary_operator_is_read_properly@@Base+0x220>
   135b8:	ldr	r3, [r0, #16]
   135bc:	cmp	r3, #8
   135c0:	bne	13678 <boolean_unary_operator_is_read_properly@@Base+0x1e4>
   135c4:	ldr	r3, [r0, #12]
   135c8:	cmp	r3, #0
   135cc:	bne	1363c <boolean_unary_operator_is_read_properly@@Base+0x1a8>
   135d0:	ldr	r3, [r4, #56]	; 0x38
   135d4:	ldr	r2, [r4, #60]	; 0x3c
   135d8:	adds	r3, r3, #1
   135dc:	adc	r2, r2, #0
   135e0:	str	r3, [r4, #56]	; 0x38
   135e4:	str	r2, [r4, #60]	; 0x3c
   135e8:	add	sp, sp, #16
   135ec:	ldrd	r4, [sp]
   135f0:	ldrd	r6, [sp, #8]
   135f4:	ldr	r8, [sp, #16]
   135f8:	add	sp, sp, #20
   135fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13600:	ldr	r3, [r4, #24]
   13604:	mov	r2, #235	; 0xeb
   13608:	ldr	lr, [pc, #296]	; 13738 <boolean_unary_operator_is_read_properly@@Base+0x2a4>
   1360c:	ldr	ip, [r4, #28]
   13610:	adds	r3, r3, #1
   13614:	ldr	r1, [pc, #288]	; 1373c <boolean_unary_operator_is_read_properly@@Base+0x2a8>
   13618:	add	lr, pc, lr
   1361c:	str	r3, [r4, #24]
   13620:	ldr	r0, [pc, #280]	; 13740 <boolean_unary_operator_is_read_properly@@Base+0x2ac>
   13624:	add	r3, lr, #168	; 0xa8
   13628:	adc	ip, ip, #0
   1362c:	add	r1, pc, r1
   13630:	str	ip, [r4, #28]
   13634:	add	r0, pc, r0
   13638:	bl	119b4 <__assert_fail@plt>
   1363c:	ldr	r3, [r4, #64]	; 0x40
   13640:	mov	r2, #240	; 0xf0
   13644:	ldr	lr, [pc, #248]	; 13744 <boolean_unary_operator_is_read_properly@@Base+0x2b0>
   13648:	ldr	ip, [r4, #68]	; 0x44
   1364c:	adds	r3, r3, #1
   13650:	ldr	r1, [pc, #240]	; 13748 <boolean_unary_operator_is_read_properly@@Base+0x2b4>
   13654:	add	lr, pc, lr
   13658:	str	r3, [r4, #64]	; 0x40
   1365c:	ldr	r0, [pc, #232]	; 1374c <boolean_unary_operator_is_read_properly@@Base+0x2b8>
   13660:	add	r3, lr, #168	; 0xa8
   13664:	adc	ip, ip, #0
   13668:	add	r1, pc, r1
   1366c:	str	ip, [r4, #68]	; 0x44
   13670:	add	r0, pc, r0
   13674:	bl	119b4 <__assert_fail@plt>
   13678:	ldr	r3, [r4, #48]	; 0x30
   1367c:	mov	r2, #239	; 0xef
   13680:	ldr	lr, [pc, #200]	; 13750 <boolean_unary_operator_is_read_properly@@Base+0x2bc>
   13684:	ldr	ip, [r4, #52]	; 0x34
   13688:	adds	r3, r3, #1
   1368c:	ldr	r1, [pc, #192]	; 13754 <boolean_unary_operator_is_read_properly@@Base+0x2c0>
   13690:	add	lr, pc, lr
   13694:	str	r3, [r4, #48]	; 0x30
   13698:	ldr	r0, [pc, #184]	; 13758 <boolean_unary_operator_is_read_properly@@Base+0x2c4>
   1369c:	add	r3, lr, #168	; 0xa8
   136a0:	adc	ip, ip, #0
   136a4:	add	r1, pc, r1
   136a8:	str	ip, [r4, #52]	; 0x34
   136ac:	add	r0, pc, r0
   136b0:	bl	119b4 <__assert_fail@plt>
   136b4:	ldr	r3, [r4, #40]	; 0x28
   136b8:	mov	r2, #238	; 0xee
   136bc:	ldr	lr, [pc, #152]	; 1375c <boolean_unary_operator_is_read_properly@@Base+0x2c8>
   136c0:	ldr	ip, [r4, #44]	; 0x2c
   136c4:	adds	r3, r3, #1
   136c8:	ldr	r1, [pc, #144]	; 13760 <boolean_unary_operator_is_read_properly@@Base+0x2cc>
   136cc:	add	lr, pc, lr
   136d0:	str	r3, [r4, #40]	; 0x28
   136d4:	ldr	r0, [pc, #136]	; 13764 <boolean_unary_operator_is_read_properly@@Base+0x2d0>
   136d8:	add	r3, lr, #168	; 0xa8
   136dc:	adc	ip, ip, #0
   136e0:	add	r1, pc, r1
   136e4:	str	ip, [r4, #44]	; 0x2c
   136e8:	add	r0, pc, r0
   136ec:	bl	119b4 <__assert_fail@plt>
   136f0:	ldr	r3, [r4, #32]
   136f4:	mov	r2, #236	; 0xec
   136f8:	ldr	lr, [pc, #104]	; 13768 <boolean_unary_operator_is_read_properly@@Base+0x2d4>
   136fc:	ldr	ip, [r4, #36]	; 0x24
   13700:	adds	r3, r3, #1
   13704:	ldr	r1, [pc, #96]	; 1376c <boolean_unary_operator_is_read_properly@@Base+0x2d8>
   13708:	add	lr, pc, lr
   1370c:	str	r3, [r4, #32]
   13710:	ldr	r0, [pc, #88]	; 13770 <boolean_unary_operator_is_read_properly@@Base+0x2dc>
   13714:	add	r3, lr, #168	; 0xa8
   13718:	adc	ip, ip, #0
   1371c:	add	r1, pc, r1
   13720:	str	ip, [r4, #36]	; 0x24
   13724:	add	r0, pc, r0
   13728:	bl	119b4 <__assert_fail@plt>
   1372c:	andeq	r8, r1, ip, ror #9
   13730:	andeq	r7, r1, r8, asr #22
   13734:	andeq	r0, r0, ip, lsr #1
   13738:	andeq	r6, r0, ip, lsl #3
   1373c:	andeq	r6, r0, r8, ror #5
   13740:	andeq	r6, r0, r4, ror #6
   13744:	andeq	r6, r0, r0, asr r1
   13748:	andeq	r6, r0, ip, lsr #5
   1374c:	andeq	r6, r0, r0, asr #8
   13750:	andeq	r6, r0, r4, lsl r1
   13754:	andeq	r6, r0, r0, ror r2
   13758:	strdeq	r6, [r0], -r0
   1375c:	ldrdeq	r6, [r0], -r8
   13760:	andeq	r6, r0, r4, lsr r2
   13764:	andeq	r6, r0, r0, ror #6
   13768:	muleq	r0, ip, r0
   1376c:	strdeq	r6, [r0], -r8
   13770:	andeq	r6, r0, ip, asr #5

00013774 <if_statement_only@@Base>:
   13774:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13778:	ldr	r4, [pc, #796]	; 13a9c <if_statement_only@@Base+0x328>
   1377c:	add	r4, pc, r4
   13780:	add	r4, r4, #624	; 0x270
   13784:	ldr	r3, [r4, #-8]
   13788:	ldr	r2, [r4, #-4]
   1378c:	strd	r6, [sp, #8]
   13790:	str	r8, [sp, #16]
   13794:	adds	r3, r3, #1
   13798:	str	lr, [sp, #20]
   1379c:	sub	sp, sp, #16
   137a0:	mov	r7, sp
   137a4:	add	r1, sp, #4
   137a8:	ldr	r6, [pc, #752]	; 13aa0 <if_statement_only@@Base+0x32c>
   137ac:	adc	r2, r2, #0
   137b0:	mov	r0, r7
   137b4:	str	r3, [r4, #-8]
   137b8:	str	r2, [r4, #-4]
   137bc:	bl	161d8 <init_grammar@@Base>
   137c0:	ldr	r3, [r4]
   137c4:	mov	r0, #3
   137c8:	add	r6, pc, r6
   137cc:	ldr	r2, [r4, #4]
   137d0:	adds	r3, r3, #1
   137d4:	adc	r2, r2, #0
   137d8:	str	r3, [r4]
   137dc:	str	r2, [r4, #4]
   137e0:	bl	118b8 <malloc@plt>
   137e4:	mov	r8, r0
   137e8:	movw	r2, #15649	; 0x3d21
   137ec:	mov	r3, #0
   137f0:	mov	r0, #36	; 0x24
   137f4:	strh	r2, [r8]
   137f8:	strb	r3, [r8, #2]
   137fc:	bl	118b8 <malloc@plt>
   13800:	mov	r5, r0
   13804:	mov	r0, #4
   13808:	bl	118b8 <malloc@plt>
   1380c:	str	r0, [r5]
   13810:	bl	15000 <init_token_opar@@Base>
   13814:	ldr	r3, [r4, #8]
   13818:	mov	r0, #8
   1381c:	ldr	r2, [r4, #12]
   13820:	adds	r3, r3, #1
   13824:	adc	r2, r2, #0
   13828:	str	r3, [r4, #8]
   1382c:	str	r2, [r4, #12]
   13830:	bl	118b8 <malloc@plt>
   13834:	mov	r1, #1
   13838:	str	r0, [r5, #4]
   1383c:	bl	14f98 <init_token_int_value@@Base>
   13840:	ldr	r3, [r4, #16]
   13844:	mov	r0, #8
   13848:	ldr	r2, [r4, #20]
   1384c:	adds	r3, r3, #1
   13850:	adc	r2, r2, #0
   13854:	str	r3, [r4, #16]
   13858:	str	r2, [r4, #20]
   1385c:	bl	118b8 <malloc@plt>
   13860:	mov	r1, #1
   13864:	str	r0, [r5, #8]
   13868:	bl	14f98 <init_token_int_value@@Base>
   1386c:	ldr	r3, [r4, #24]
   13870:	mov	r0, #8
   13874:	ldr	r2, [r4, #28]
   13878:	adds	r3, r3, #1
   1387c:	adc	r2, r2, #0
   13880:	str	r3, [r4, #24]
   13884:	str	r2, [r4, #28]
   13888:	bl	118b8 <malloc@plt>
   1388c:	mov	r1, r8
   13890:	str	r0, [r5, #12]
   13894:	bl	151b0 <init_token_boolean_op@@Base>
   13898:	ldr	r3, [r4, #32]
   1389c:	mov	r0, #8
   138a0:	ldr	r2, [r4, #36]	; 0x24
   138a4:	adds	r3, r3, #1
   138a8:	adc	r2, r2, #0
   138ac:	str	r3, [r4, #32]
   138b0:	str	r2, [r4, #36]	; 0x24
   138b4:	bl	118b8 <malloc@plt>
   138b8:	mov	r1, #1
   138bc:	str	r0, [r5, #16]
   138c0:	bl	14f98 <init_token_int_value@@Base>
   138c4:	ldr	r3, [r4, #40]	; 0x28
   138c8:	mov	r0, #4
   138cc:	ldr	r2, [r4, #44]	; 0x2c
   138d0:	adds	r3, r3, #1
   138d4:	adc	r2, r2, #0
   138d8:	str	r3, [r4, #40]	; 0x28
   138dc:	str	r2, [r4, #44]	; 0x2c
   138e0:	bl	118b8 <malloc@plt>
   138e4:	str	r0, [r5, #20]
   138e8:	bl	15030 <init_token_cpar@@Base>
   138ec:	ldr	r3, [r4, #48]	; 0x30
   138f0:	mov	r0, #4
   138f4:	ldr	r2, [r4, #52]	; 0x34
   138f8:	adds	r3, r3, #1
   138fc:	adc	r2, r2, #0
   13900:	str	r3, [r4, #48]	; 0x30
   13904:	str	r2, [r4, #52]	; 0x34
   13908:	bl	118b8 <malloc@plt>
   1390c:	str	r0, [r5, #24]
   13910:	bl	15060 <init_token_obra@@Base>
   13914:	ldr	r3, [r4, #56]	; 0x38
   13918:	mov	r0, #4
   1391c:	ldr	r2, [r4, #60]	; 0x3c
   13920:	adds	r3, r3, #1
   13924:	adc	r2, r2, #0
   13928:	str	r3, [r4, #56]	; 0x38
   1392c:	str	r2, [r4, #60]	; 0x3c
   13930:	bl	118b8 <malloc@plt>
   13934:	str	r0, [r5, #28]
   13938:	bl	15090 <init_token_cbra@@Base>
   1393c:	ldr	r3, [r4, #64]	; 0x40
   13940:	mov	r0, #4
   13944:	ldr	r2, [r4, #68]	; 0x44
   13948:	adds	r3, r3, #1
   1394c:	adc	r2, r2, #0
   13950:	str	r3, [r4, #64]	; 0x40
   13954:	str	r2, [r4, #68]	; 0x44
   13958:	bl	118b8 <malloc@plt>
   1395c:	str	r0, [r5, #32]
   13960:	bl	15120 <init_token_eof@@Base>
   13964:	ldr	r3, [r4, #72]	; 0x48
   13968:	mov	ip, #9
   1396c:	mov	r0, r7
   13970:	ldr	r1, [r4, #76]	; 0x4c
   13974:	ldr	r2, [pc, #296]	; 13aa4 <if_statement_only@@Base+0x330>
   13978:	adds	r3, r3, #1
   1397c:	adc	r1, r1, #0
   13980:	str	r3, [r4, #72]	; 0x48
   13984:	str	r1, [r4, #76]	; 0x4c
   13988:	ldr	r6, [r6, r2]
   1398c:	str	ip, [r6, #220]	; 0xdc
   13990:	str	r5, [r6, #228]	; 0xe4
   13994:	bl	16c9c <read_if_statement@@Base>
   13998:	ldr	r3, [r6, #204]	; 0xcc
   1399c:	cmp	r3, #9
   139a0:	bne	139e8 <if_statement_only@@Base+0x274>
   139a4:	cmp	r0, #0
   139a8:	beq	13a60 <if_statement_only@@Base+0x2ec>
   139ac:	ldr	r3, [r0]
   139b0:	cmp	r3, #4
   139b4:	bne	13a24 <if_statement_only@@Base+0x2b0>
   139b8:	ldr	r3, [r4, #96]	; 0x60
   139bc:	ldr	r2, [r4, #100]	; 0x64
   139c0:	adds	r3, r3, #1
   139c4:	adc	r2, r2, #0
   139c8:	str	r3, [r4, #96]	; 0x60
   139cc:	str	r2, [r4, #100]	; 0x64
   139d0:	add	sp, sp, #16
   139d4:	ldrd	r4, [sp]
   139d8:	ldrd	r6, [sp, #8]
   139dc:	ldr	r8, [sp, #16]
   139e0:	add	sp, sp, #20
   139e4:	pop	{pc}		; (ldr pc, [sp], #4)
   139e8:	ldr	r3, [r4, #80]	; 0x50
   139ec:	movw	r2, #283	; 0x11b
   139f0:	ldr	lr, [pc, #176]	; 13aa8 <if_statement_only@@Base+0x334>
   139f4:	ldr	ip, [r4, #84]	; 0x54
   139f8:	adds	r3, r3, #1
   139fc:	ldr	r1, [pc, #168]	; 13aac <if_statement_only@@Base+0x338>
   13a00:	add	lr, pc, lr
   13a04:	str	r3, [r4, #80]	; 0x50
   13a08:	ldr	r0, [pc, #160]	; 13ab0 <if_statement_only@@Base+0x33c>
   13a0c:	add	r3, lr, #208	; 0xd0
   13a10:	adc	ip, ip, #0
   13a14:	add	r1, pc, r1
   13a18:	str	ip, [r4, #84]	; 0x54
   13a1c:	add	r0, pc, r0
   13a20:	bl	119b4 <__assert_fail@plt>
   13a24:	ldr	r3, [r4, #104]	; 0x68
   13a28:	movw	r2, #285	; 0x11d
   13a2c:	ldr	lr, [pc, #128]	; 13ab4 <if_statement_only@@Base+0x340>
   13a30:	ldr	ip, [r4, #108]	; 0x6c
   13a34:	adds	r3, r3, #1
   13a38:	ldr	r1, [pc, #120]	; 13ab8 <if_statement_only@@Base+0x344>
   13a3c:	add	lr, pc, lr
   13a40:	str	r3, [r4, #104]	; 0x68
   13a44:	ldr	r0, [pc, #112]	; 13abc <if_statement_only@@Base+0x348>
   13a48:	add	r3, lr, #208	; 0xd0
   13a4c:	adc	ip, ip, #0
   13a50:	add	r1, pc, r1
   13a54:	str	ip, [r4, #108]	; 0x6c
   13a58:	add	r0, pc, r0
   13a5c:	bl	119b4 <__assert_fail@plt>
   13a60:	ldr	r3, [r4, #88]	; 0x58
   13a64:	mov	r2, #284	; 0x11c
   13a68:	ldr	lr, [pc, #80]	; 13ac0 <if_statement_only@@Base+0x34c>
   13a6c:	ldr	ip, [r4, #92]	; 0x5c
   13a70:	adds	r3, r3, #1
   13a74:	ldr	r1, [pc, #72]	; 13ac4 <if_statement_only@@Base+0x350>
   13a78:	add	lr, pc, lr
   13a7c:	str	r3, [r4, #88]	; 0x58
   13a80:	ldr	r0, [pc, #64]	; 13ac8 <if_statement_only@@Base+0x354>
   13a84:	add	r3, lr, #208	; 0xd0
   13a88:	adc	ip, ip, #0
   13a8c:	add	r1, pc, r1
   13a90:	str	ip, [r4, #92]	; 0x5c
   13a94:	add	r0, pc, r0
   13a98:	bl	119b4 <__assert_fail@plt>
   13a9c:	andeq	r8, r1, r4, lsl r2
   13aa0:	andeq	r7, r1, r0, lsr r8
   13aa4:	andeq	r0, r0, ip, lsr #1
   13aa8:	andeq	r5, r0, r4, lsr #27
   13aac:	andeq	r5, r0, r0, lsl #30
   13ab0:	andeq	r6, r0, ip, lsr #1
   13ab4:	andeq	r5, r0, r8, ror #26
   13ab8:	andeq	r5, r0, r4, asr #29
   13abc:	muleq	r0, r8, r0
   13ac0:	andeq	r5, r0, ip, lsr #26
   13ac4:	andeq	r5, r0, r8, lsl #29
   13ac8:	andeq	r6, r0, r0, asr r0

00013acc <if_else_statements@@Base>:
   13acc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13ad0:	ldr	r4, [pc, #876]	; 13e44 <if_else_statements@@Base+0x378>
   13ad4:	add	r4, pc, r4
   13ad8:	add	r4, r4, #736	; 0x2e0
   13adc:	ldr	r3, [r4]
   13ae0:	ldr	r2, [r4, #4]
   13ae4:	strd	r6, [sp, #8]
   13ae8:	str	r8, [sp, #16]
   13aec:	adds	r3, r3, #1
   13af0:	str	lr, [sp, #20]
   13af4:	sub	sp, sp, #16
   13af8:	mov	r7, sp
   13afc:	add	r1, sp, #4
   13b00:	ldr	r6, [pc, #832]	; 13e48 <if_else_statements@@Base+0x37c>
   13b04:	adc	r2, r2, #0
   13b08:	mov	r0, r7
   13b0c:	str	r3, [r4]
   13b10:	str	r2, [r4, #4]
   13b14:	bl	161d8 <init_grammar@@Base>
   13b18:	ldr	r3, [r4, #8]
   13b1c:	mov	r0, #3
   13b20:	add	r6, pc, r6
   13b24:	ldr	r2, [r4, #12]
   13b28:	adds	r3, r3, #1
   13b2c:	adc	r2, r2, #0
   13b30:	str	r3, [r4, #8]
   13b34:	str	r2, [r4, #12]
   13b38:	bl	118b8 <malloc@plt>
   13b3c:	mov	r8, r0
   13b40:	movw	r2, #15649	; 0x3d21
   13b44:	mov	r3, #0
   13b48:	mov	r0, #44	; 0x2c
   13b4c:	strh	r2, [r8]
   13b50:	strb	r3, [r8, #2]
   13b54:	bl	118b8 <malloc@plt>
   13b58:	mov	r5, r0
   13b5c:	mov	r0, #4
   13b60:	bl	118b8 <malloc@plt>
   13b64:	str	r0, [r5]
   13b68:	bl	15000 <init_token_opar@@Base>
   13b6c:	ldr	r3, [r4, #16]
   13b70:	mov	r0, #8
   13b74:	ldr	r2, [r4, #20]
   13b78:	adds	r3, r3, #1
   13b7c:	adc	r2, r2, #0
   13b80:	str	r3, [r4, #16]
   13b84:	str	r2, [r4, #20]
   13b88:	bl	118b8 <malloc@plt>
   13b8c:	mov	r1, #1
   13b90:	str	r0, [r5, #4]
   13b94:	bl	14f98 <init_token_int_value@@Base>
   13b98:	ldr	r3, [r4, #24]
   13b9c:	mov	r0, #8
   13ba0:	ldr	r2, [r4, #28]
   13ba4:	adds	r3, r3, #1
   13ba8:	adc	r2, r2, #0
   13bac:	str	r3, [r4, #24]
   13bb0:	str	r2, [r4, #28]
   13bb4:	bl	118b8 <malloc@plt>
   13bb8:	mov	r1, #1
   13bbc:	str	r0, [r5, #8]
   13bc0:	bl	14f98 <init_token_int_value@@Base>
   13bc4:	ldr	r3, [r4, #32]
   13bc8:	mov	r0, #8
   13bcc:	ldr	r2, [r4, #36]	; 0x24
   13bd0:	adds	r3, r3, #1
   13bd4:	adc	r2, r2, #0
   13bd8:	str	r3, [r4, #32]
   13bdc:	str	r2, [r4, #36]	; 0x24
   13be0:	bl	118b8 <malloc@plt>
   13be4:	mov	r1, r8
   13be8:	str	r0, [r5, #12]
   13bec:	bl	151b0 <init_token_boolean_op@@Base>
   13bf0:	ldr	r3, [r4, #40]	; 0x28
   13bf4:	mov	r0, #8
   13bf8:	ldr	r2, [r4, #44]	; 0x2c
   13bfc:	adds	r3, r3, #1
   13c00:	adc	r2, r2, #0
   13c04:	str	r3, [r4, #40]	; 0x28
   13c08:	str	r2, [r4, #44]	; 0x2c
   13c0c:	bl	118b8 <malloc@plt>
   13c10:	mov	r1, #1
   13c14:	str	r0, [r5, #16]
   13c18:	bl	14f98 <init_token_int_value@@Base>
   13c1c:	ldr	r3, [r4, #48]	; 0x30
   13c20:	mov	r0, #4
   13c24:	ldr	r2, [r4, #52]	; 0x34
   13c28:	adds	r3, r3, #1
   13c2c:	adc	r2, r2, #0
   13c30:	str	r3, [r4, #48]	; 0x30
   13c34:	str	r2, [r4, #52]	; 0x34
   13c38:	bl	118b8 <malloc@plt>
   13c3c:	str	r0, [r5, #20]
   13c40:	bl	15030 <init_token_cpar@@Base>
   13c44:	ldr	r3, [r4, #56]	; 0x38
   13c48:	mov	r0, #4
   13c4c:	ldr	r2, [r4, #60]	; 0x3c
   13c50:	adds	r3, r3, #1
   13c54:	adc	r2, r2, #0
   13c58:	str	r3, [r4, #56]	; 0x38
   13c5c:	str	r2, [r4, #60]	; 0x3c
   13c60:	bl	118b8 <malloc@plt>
   13c64:	str	r0, [r5, #24]
   13c68:	bl	15060 <init_token_obra@@Base>
   13c6c:	ldr	r3, [r4, #64]	; 0x40
   13c70:	mov	r0, #4
   13c74:	ldr	r2, [r4, #68]	; 0x44
   13c78:	adds	r3, r3, #1
   13c7c:	adc	r2, r2, #0
   13c80:	str	r3, [r4, #64]	; 0x40
   13c84:	str	r2, [r4, #68]	; 0x44
   13c88:	bl	118b8 <malloc@plt>
   13c8c:	str	r0, [r5, #28]
   13c90:	bl	15090 <init_token_cbra@@Base>
   13c94:	ldr	r3, [r4, #72]	; 0x48
   13c98:	mov	r0, #4
   13c9c:	ldr	r2, [r4, #76]	; 0x4c
   13ca0:	adds	r3, r3, #1
   13ca4:	adc	r2, r2, #0
   13ca8:	str	r3, [r4, #72]	; 0x48
   13cac:	str	r2, [r4, #76]	; 0x4c
   13cb0:	bl	118b8 <malloc@plt>
   13cb4:	str	r0, [r5, #32]
   13cb8:	bl	15180 <init_token_else@@Base>
   13cbc:	ldr	r3, [r4, #80]	; 0x50
   13cc0:	mov	r0, #4
   13cc4:	ldr	r2, [r4, #84]	; 0x54
   13cc8:	adds	r3, r3, #1
   13ccc:	adc	r2, r2, #0
   13cd0:	str	r3, [r4, #80]	; 0x50
   13cd4:	str	r2, [r4, #84]	; 0x54
   13cd8:	bl	118b8 <malloc@plt>
   13cdc:	str	r0, [r5, #36]	; 0x24
   13ce0:	bl	15060 <init_token_obra@@Base>
   13ce4:	ldr	r3, [r4, #88]	; 0x58
   13ce8:	mov	r0, #4
   13cec:	ldr	r2, [r4, #92]	; 0x5c
   13cf0:	adds	r3, r3, #1
   13cf4:	adc	r2, r2, #0
   13cf8:	str	r3, [r4, #88]	; 0x58
   13cfc:	str	r2, [r4, #92]	; 0x5c
   13d00:	bl	118b8 <malloc@plt>
   13d04:	str	r0, [r5, #40]	; 0x28
   13d08:	bl	15090 <init_token_cbra@@Base>
   13d0c:	ldr	r3, [r4, #96]	; 0x60
   13d10:	mov	ip, #11
   13d14:	mov	r0, r7
   13d18:	ldr	r1, [r4, #100]	; 0x64
   13d1c:	ldr	r2, [pc, #296]	; 13e4c <if_else_statements@@Base+0x380>
   13d20:	adds	r3, r3, #1
   13d24:	adc	r1, r1, #0
   13d28:	str	r3, [r4, #96]	; 0x60
   13d2c:	str	r1, [r4, #100]	; 0x64
   13d30:	ldr	r6, [r6, r2]
   13d34:	str	ip, [r6, #220]	; 0xdc
   13d38:	str	r5, [r6, #228]	; 0xe4
   13d3c:	bl	16c9c <read_if_statement@@Base>
   13d40:	ldr	r3, [r6, #204]	; 0xcc
   13d44:	cmp	r3, #11
   13d48:	bne	13d90 <if_else_statements@@Base+0x2c4>
   13d4c:	cmp	r0, #0
   13d50:	beq	13e08 <if_else_statements@@Base+0x33c>
   13d54:	ldr	r3, [r0]
   13d58:	cmp	r3, #4
   13d5c:	bne	13dcc <if_else_statements@@Base+0x300>
   13d60:	ldr	r3, [r4, #120]	; 0x78
   13d64:	ldr	r2, [r4, #124]	; 0x7c
   13d68:	adds	r3, r3, #1
   13d6c:	adc	r2, r2, #0
   13d70:	str	r3, [r4, #120]	; 0x78
   13d74:	str	r2, [r4, #124]	; 0x7c
   13d78:	add	sp, sp, #16
   13d7c:	ldrd	r4, [sp]
   13d80:	ldrd	r6, [sp, #8]
   13d84:	ldr	r8, [sp, #16]
   13d88:	add	sp, sp, #20
   13d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d90:	ldr	r3, [r4, #104]	; 0x68
   13d94:	mov	r2, #332	; 0x14c
   13d98:	ldr	lr, [pc, #176]	; 13e50 <if_else_statements@@Base+0x384>
   13d9c:	ldr	ip, [r4, #108]	; 0x6c
   13da0:	adds	r3, r3, #1
   13da4:	ldr	r1, [pc, #168]	; 13e54 <if_else_statements@@Base+0x388>
   13da8:	add	lr, pc, lr
   13dac:	str	r3, [r4, #104]	; 0x68
   13db0:	ldr	r0, [pc, #160]	; 13e58 <if_else_statements@@Base+0x38c>
   13db4:	add	r3, lr, #228	; 0xe4
   13db8:	adc	ip, ip, #0
   13dbc:	add	r1, pc, r1
   13dc0:	str	ip, [r4, #108]	; 0x6c
   13dc4:	add	r0, pc, r0
   13dc8:	bl	119b4 <__assert_fail@plt>
   13dcc:	ldr	r3, [r4, #128]	; 0x80
   13dd0:	movw	r2, #334	; 0x14e
   13dd4:	ldr	lr, [pc, #128]	; 13e5c <if_else_statements@@Base+0x390>
   13dd8:	ldr	ip, [r4, #132]	; 0x84
   13ddc:	adds	r3, r3, #1
   13de0:	ldr	r1, [pc, #120]	; 13e60 <if_else_statements@@Base+0x394>
   13de4:	add	lr, pc, lr
   13de8:	str	r3, [r4, #128]	; 0x80
   13dec:	ldr	r0, [pc, #112]	; 13e64 <if_else_statements@@Base+0x398>
   13df0:	add	r3, lr, #228	; 0xe4
   13df4:	adc	ip, ip, #0
   13df8:	add	r1, pc, r1
   13dfc:	str	ip, [r4, #132]	; 0x84
   13e00:	add	r0, pc, r0
   13e04:	bl	119b4 <__assert_fail@plt>
   13e08:	ldr	r3, [r4, #112]	; 0x70
   13e0c:	movw	r2, #333	; 0x14d
   13e10:	ldr	lr, [pc, #80]	; 13e68 <if_else_statements@@Base+0x39c>
   13e14:	ldr	ip, [r4, #116]	; 0x74
   13e18:	adds	r3, r3, #1
   13e1c:	ldr	r1, [pc, #72]	; 13e6c <if_else_statements@@Base+0x3a0>
   13e20:	add	lr, pc, lr
   13e24:	str	r3, [r4, #112]	; 0x70
   13e28:	ldr	r0, [pc, #64]	; 13e70 <if_else_statements@@Base+0x3a4>
   13e2c:	add	r3, lr, #228	; 0xe4
   13e30:	adc	ip, ip, #0
   13e34:	add	r1, pc, r1
   13e38:	str	ip, [r4, #116]	; 0x74
   13e3c:	add	r0, pc, r0
   13e40:	bl	119b4 <__assert_fail@plt>
   13e44:			; <UNDEFINED> instruction: 0x00017ebc
   13e48:	ldrdeq	r7, [r1], -r8
   13e4c:	andeq	r0, r0, ip, lsr #1
   13e50:	strdeq	r5, [r0], -ip
   13e54:	andeq	r5, r0, r8, asr fp
   13e58:	andeq	r5, r0, r0, asr #26
   13e5c:	andeq	r5, r0, r0, asr #19
   13e60:	andeq	r5, r0, ip, lsl fp
   13e64:	strdeq	r5, [r0], -r0
   13e68:	andeq	r5, r0, r4, lsl #19
   13e6c:	andeq	r5, r0, r0, ror #21
   13e70:	andeq	r5, r0, r8, lsr #25

00013e74 <body_with_two_returns@@Base>:
   13e74:	strd	r4, [sp, #-20]!	; 0xffffffec
   13e78:	ldr	r4, [pc, #860]	; 141dc <body_with_two_returns@@Base+0x368>
   13e7c:	add	r4, pc, r4
   13e80:	add	r4, r4, #880	; 0x370
   13e84:	ldr	r3, [r4, #-8]
   13e88:	ldr	r2, [r4, #-4]
   13e8c:	strd	r6, [sp, #8]
   13e90:	str	lr, [sp, #16]
   13e94:	sub	sp, sp, #20
   13e98:	adds	r3, r3, #1
   13e9c:	mov	r7, sp
   13ea0:	ldr	r6, [pc, #824]	; 141e0 <body_with_two_returns@@Base+0x36c>
   13ea4:	add	r1, sp, #4
   13ea8:	mov	r0, r7
   13eac:	adc	r2, r2, #0
   13eb0:	str	r3, [r4, #-8]
   13eb4:	str	r2, [r4, #-4]
   13eb8:	bl	161d8 <init_grammar@@Base>
   13ebc:	ldr	r3, [r4]
   13ec0:	mov	r0, #32
   13ec4:	add	r6, pc, r6
   13ec8:	ldr	r2, [r4, #4]
   13ecc:	adds	r3, r3, #1
   13ed0:	adc	r2, r2, #0
   13ed4:	str	r3, [r4]
   13ed8:	str	r2, [r4, #4]
   13edc:	bl	118b8 <malloc@plt>
   13ee0:	mov	r5, r0
   13ee4:	mov	r0, #4
   13ee8:	bl	118b8 <malloc@plt>
   13eec:	str	r0, [r5]
   13ef0:	bl	15060 <init_token_obra@@Base>
   13ef4:	ldr	r3, [r4, #8]
   13ef8:	mov	r0, #4
   13efc:	ldr	r2, [r4, #12]
   13f00:	adds	r3, r3, #1
   13f04:	adc	r2, r2, #0
   13f08:	str	r3, [r4, #8]
   13f0c:	str	r2, [r4, #12]
   13f10:	bl	118b8 <malloc@plt>
   13f14:	str	r0, [r5, #4]
   13f18:	bl	150c0 <init_token_return@@Base>
   13f1c:	ldr	r3, [r4, #16]
   13f20:	mov	r0, #8
   13f24:	ldr	r2, [r4, #20]
   13f28:	adds	r3, r3, #1
   13f2c:	adc	r2, r2, #0
   13f30:	str	r3, [r4, #16]
   13f34:	str	r2, [r4, #20]
   13f38:	bl	118b8 <malloc@plt>
   13f3c:	mov	r1, #1
   13f40:	str	r0, [r5, #8]
   13f44:	bl	14f98 <init_token_int_value@@Base>
   13f48:	ldr	r3, [r4, #24]
   13f4c:	mov	r0, #4
   13f50:	ldr	r2, [r4, #28]
   13f54:	adds	r3, r3, #1
   13f58:	adc	r2, r2, #0
   13f5c:	str	r3, [r4, #24]
   13f60:	str	r2, [r4, #28]
   13f64:	bl	118b8 <malloc@plt>
   13f68:	str	r0, [r5, #12]
   13f6c:	bl	150f0 <init_token_semicolon@@Base>
   13f70:	ldr	r3, [r4, #32]
   13f74:	mov	r0, #4
   13f78:	ldr	r2, [r4, #36]	; 0x24
   13f7c:	adds	r3, r3, #1
   13f80:	adc	r2, r2, #0
   13f84:	str	r3, [r4, #32]
   13f88:	str	r2, [r4, #36]	; 0x24
   13f8c:	bl	118b8 <malloc@plt>
   13f90:	str	r0, [r5, #16]
   13f94:	bl	150c0 <init_token_return@@Base>
   13f98:	ldr	r3, [r4, #40]	; 0x28
   13f9c:	mov	r0, #8
   13fa0:	ldr	r2, [r4, #44]	; 0x2c
   13fa4:	adds	r3, r3, #1
   13fa8:	adc	r2, r2, #0
   13fac:	str	r3, [r4, #40]	; 0x28
   13fb0:	str	r2, [r4, #44]	; 0x2c
   13fb4:	bl	118b8 <malloc@plt>
   13fb8:	mov	r1, #1
   13fbc:	str	r0, [r5, #20]
   13fc0:	bl	14f98 <init_token_int_value@@Base>
   13fc4:	ldr	r3, [r4, #48]	; 0x30
   13fc8:	mov	r0, #4
   13fcc:	ldr	r2, [r4, #52]	; 0x34
   13fd0:	adds	r3, r3, #1
   13fd4:	adc	r2, r2, #0
   13fd8:	str	r3, [r4, #48]	; 0x30
   13fdc:	str	r2, [r4, #52]	; 0x34
   13fe0:	bl	118b8 <malloc@plt>
   13fe4:	str	r0, [r5, #24]
   13fe8:	bl	150f0 <init_token_semicolon@@Base>
   13fec:	ldr	r3, [r4, #56]	; 0x38
   13ff0:	mov	r0, #4
   13ff4:	ldr	r2, [r4, #60]	; 0x3c
   13ff8:	adds	r3, r3, #1
   13ffc:	adc	r2, r2, #0
   14000:	str	r3, [r4, #56]	; 0x38
   14004:	str	r2, [r4, #60]	; 0x3c
   14008:	bl	118b8 <malloc@plt>
   1400c:	str	r0, [r5, #28]
   14010:	bl	15090 <init_token_cbra@@Base>
   14014:	ldr	r3, [r4, #64]	; 0x40
   14018:	mov	ip, #8
   1401c:	mov	r0, r7
   14020:	ldr	r1, [r4, #68]	; 0x44
   14024:	ldr	r2, [pc, #440]	; 141e4 <body_with_two_returns@@Base+0x370>
   14028:	adds	r3, r3, #1
   1402c:	adc	r1, r1, #0
   14030:	str	r3, [r4, #64]	; 0x40
   14034:	str	r1, [r4, #68]	; 0x44
   14038:	ldr	r6, [r6, r2]
   1403c:	str	ip, [r6, #220]	; 0xdc
   14040:	str	r5, [r6, #228]	; 0xe4
   14044:	bl	16e90 <read_body@@Base>
   14048:	ldr	r3, [r6, #204]	; 0xcc
   1404c:	cmp	r3, #8
   14050:	bne	140b0 <body_with_two_returns@@Base+0x23c>
   14054:	cmp	r0, #0
   14058:	beq	141a0 <body_with_two_returns@@Base+0x32c>
   1405c:	ldr	r3, [r0]
   14060:	cmp	r3, #3
   14064:	bne	14164 <body_with_two_returns@@Base+0x2f0>
   14068:	ldr	r3, [r0, #4]
   1406c:	ldr	r2, [r3]
   14070:	cmp	r2, #3
   14074:	bne	14128 <body_with_two_returns@@Base+0x2b4>
   14078:	ldr	r3, [r3, #4]
   1407c:	cmp	r3, #0
   14080:	bne	140ec <body_with_two_returns@@Base+0x278>
   14084:	ldr	r3, [r4, #104]	; 0x68
   14088:	ldr	r2, [r4, #108]	; 0x6c
   1408c:	adds	r3, r3, #1
   14090:	adc	r2, r2, #0
   14094:	str	r3, [r4, #104]	; 0x68
   14098:	str	r2, [r4, #108]	; 0x6c
   1409c:	add	sp, sp, #20
   140a0:	ldrd	r4, [sp]
   140a4:	ldrd	r6, [sp, #8]
   140a8:	add	sp, sp, #16
   140ac:	pop	{pc}		; (ldr pc, [sp], #4)
   140b0:	ldr	r3, [r4, #72]	; 0x48
   140b4:	movw	r2, #371	; 0x173
   140b8:	ldr	lr, [pc, #296]	; 141e8 <body_with_two_returns@@Base+0x374>
   140bc:	ldr	ip, [r4, #76]	; 0x4c
   140c0:	adds	r3, r3, #1
   140c4:	ldr	r1, [pc, #288]	; 141ec <body_with_two_returns@@Base+0x378>
   140c8:	add	lr, pc, lr
   140cc:	str	r3, [r4, #72]	; 0x48
   140d0:	ldr	r0, [pc, #280]	; 141f0 <body_with_two_returns@@Base+0x37c>
   140d4:	add	r3, lr, #248	; 0xf8
   140d8:	adc	ip, ip, #0
   140dc:	add	r1, pc, r1
   140e0:	str	ip, [r4, #76]	; 0x4c
   140e4:	add	r0, pc, r0
   140e8:	bl	119b4 <__assert_fail@plt>
   140ec:	ldr	r3, [r4, #112]	; 0x70
   140f0:	movw	r2, #375	; 0x177
   140f4:	ldr	lr, [pc, #248]	; 141f4 <body_with_two_returns@@Base+0x380>
   140f8:	ldr	ip, [r4, #116]	; 0x74
   140fc:	adds	r3, r3, #1
   14100:	ldr	r1, [pc, #240]	; 141f8 <body_with_two_returns@@Base+0x384>
   14104:	add	lr, pc, lr
   14108:	str	r3, [r4, #112]	; 0x70
   1410c:	ldr	r0, [pc, #232]	; 141fc <body_with_two_returns@@Base+0x388>
   14110:	add	r3, lr, #248	; 0xf8
   14114:	adc	ip, ip, #0
   14118:	add	r1, pc, r1
   1411c:	str	ip, [r4, #116]	; 0x74
   14120:	add	r0, pc, r0
   14124:	bl	119b4 <__assert_fail@plt>
   14128:	ldr	r3, [r4, #96]	; 0x60
   1412c:	movw	r2, #374	; 0x176
   14130:	ldr	lr, [pc, #200]	; 14200 <body_with_two_returns@@Base+0x38c>
   14134:	ldr	ip, [r4, #100]	; 0x64
   14138:	adds	r3, r3, #1
   1413c:	ldr	r1, [pc, #192]	; 14204 <body_with_two_returns@@Base+0x390>
   14140:	add	lr, pc, lr
   14144:	str	r3, [r4, #96]	; 0x60
   14148:	ldr	r0, [pc, #184]	; 14208 <body_with_two_returns@@Base+0x394>
   1414c:	add	r3, lr, #248	; 0xf8
   14150:	adc	ip, ip, #0
   14154:	add	r1, pc, r1
   14158:	str	ip, [r4, #100]	; 0x64
   1415c:	add	r0, pc, r0
   14160:	bl	119b4 <__assert_fail@plt>
   14164:	ldr	r3, [r4, #88]	; 0x58
   14168:	movw	r2, #373	; 0x175
   1416c:	ldr	lr, [pc, #152]	; 1420c <body_with_two_returns@@Base+0x398>
   14170:	ldr	ip, [r4, #92]	; 0x5c
   14174:	adds	r3, r3, #1
   14178:	ldr	r1, [pc, #144]	; 14210 <body_with_two_returns@@Base+0x39c>
   1417c:	add	lr, pc, lr
   14180:	str	r3, [r4, #88]	; 0x58
   14184:	ldr	r0, [pc, #136]	; 14214 <body_with_two_returns@@Base+0x3a0>
   14188:	add	r3, lr, #248	; 0xf8
   1418c:	adc	ip, ip, #0
   14190:	add	r1, pc, r1
   14194:	str	ip, [r4, #92]	; 0x5c
   14198:	add	r0, pc, r0
   1419c:	bl	119b4 <__assert_fail@plt>
   141a0:	ldr	r3, [r4, #80]	; 0x50
   141a4:	mov	r2, #372	; 0x174
   141a8:	ldr	lr, [pc, #104]	; 14218 <body_with_two_returns@@Base+0x3a4>
   141ac:	ldr	ip, [r4, #84]	; 0x54
   141b0:	adds	r3, r3, #1
   141b4:	ldr	r1, [pc, #96]	; 1421c <body_with_two_returns@@Base+0x3a8>
   141b8:	add	lr, pc, lr
   141bc:	str	r3, [r4, #80]	; 0x50
   141c0:	ldr	r0, [pc, #88]	; 14220 <body_with_two_returns@@Base+0x3ac>
   141c4:	add	r3, lr, #248	; 0xf8
   141c8:	adc	ip, ip, #0
   141cc:	add	r1, pc, r1
   141d0:	str	ip, [r4, #84]	; 0x54
   141d4:	add	r0, pc, r0
   141d8:	bl	119b4 <__assert_fail@plt>
   141dc:	andeq	r7, r1, r4, lsl fp
   141e0:	andeq	r7, r1, r4, lsr r1
   141e4:	andeq	r0, r0, ip, lsr #1
   141e8:	ldrdeq	r5, [r0], -ip
   141ec:	andeq	r5, r0, r8, lsr r8
   141f0:	andeq	r5, r0, ip, lsr sl
   141f4:	andeq	r5, r0, r0, lsr #13
   141f8:	strdeq	r5, [r0], -ip
   141fc:	andeq	r5, r0, r0, asr sl
   14200:	andeq	r5, r0, r4, ror #12
   14204:	andeq	r5, r0, r0, asr #15
   14208:	strdeq	r5, [r0], -r8
   1420c:	andeq	r5, r0, r8, lsr #12
   14210:	andeq	r5, r0, r4, lsl #15
   14214:	andeq	r5, r0, r4, lsr #19
   14218:	andeq	r5, r0, ip, ror #11
   1421c:	andeq	r5, r0, r8, asr #14
   14220:	andeq	r5, r0, r0, lsl r9

00014224 <body_with_one_return@@Base>:
   14224:	strd	r4, [sp, #-20]!	; 0xffffffec
   14228:	ldr	r4, [pc, #660]	; 144c4 <body_with_one_return@@Base+0x2a0>
   1422c:	add	r4, pc, r4
   14230:	add	r4, r4, #1008	; 0x3f0
   14234:	ldr	r3, [r4, #-8]
   14238:	ldr	r2, [r4, #-4]
   1423c:	strd	r6, [sp, #8]
   14240:	str	lr, [sp, #16]
   14244:	sub	sp, sp, #20
   14248:	adds	r3, r3, #1
   1424c:	mov	r7, sp
   14250:	ldr	r6, [pc, #624]	; 144c8 <body_with_one_return@@Base+0x2a4>
   14254:	add	r1, sp, #4
   14258:	mov	r0, r7
   1425c:	adc	r2, r2, #0
   14260:	str	r3, [r4, #-8]
   14264:	str	r2, [r4, #-4]
   14268:	bl	161d8 <init_grammar@@Base>
   1426c:	ldr	r3, [r4]
   14270:	mov	r0, #20
   14274:	add	r6, pc, r6
   14278:	ldr	r2, [r4, #4]
   1427c:	adds	r3, r3, #1
   14280:	adc	r2, r2, #0
   14284:	str	r3, [r4]
   14288:	str	r2, [r4, #4]
   1428c:	bl	118b8 <malloc@plt>
   14290:	mov	r5, r0
   14294:	mov	r0, #4
   14298:	bl	118b8 <malloc@plt>
   1429c:	str	r0, [r5]
   142a0:	bl	15060 <init_token_obra@@Base>
   142a4:	ldr	r3, [r4, #8]
   142a8:	mov	r0, #4
   142ac:	ldr	r2, [r4, #12]
   142b0:	adds	r3, r3, #1
   142b4:	adc	r2, r2, #0
   142b8:	str	r3, [r4, #8]
   142bc:	str	r2, [r4, #12]
   142c0:	bl	118b8 <malloc@plt>
   142c4:	str	r0, [r5, #4]
   142c8:	bl	150c0 <init_token_return@@Base>
   142cc:	ldr	r3, [r4, #16]
   142d0:	mov	r0, #8
   142d4:	ldr	r2, [r4, #20]
   142d8:	adds	r3, r3, #1
   142dc:	adc	r2, r2, #0
   142e0:	str	r3, [r4, #16]
   142e4:	str	r2, [r4, #20]
   142e8:	bl	118b8 <malloc@plt>
   142ec:	mov	r1, #1
   142f0:	str	r0, [r5, #8]
   142f4:	bl	14f98 <init_token_int_value@@Base>
   142f8:	ldr	r3, [r4, #24]
   142fc:	mov	r0, #4
   14300:	ldr	r2, [r4, #28]
   14304:	adds	r3, r3, #1
   14308:	adc	r2, r2, #0
   1430c:	str	r3, [r4, #24]
   14310:	str	r2, [r4, #28]
   14314:	bl	118b8 <malloc@plt>
   14318:	str	r0, [r5, #12]
   1431c:	bl	150f0 <init_token_semicolon@@Base>
   14320:	ldr	r3, [r4, #32]
   14324:	mov	r0, #4
   14328:	ldr	r2, [r4, #36]	; 0x24
   1432c:	adds	r3, r3, #1
   14330:	adc	r2, r2, #0
   14334:	str	r3, [r4, #32]
   14338:	str	r2, [r4, #36]	; 0x24
   1433c:	bl	118b8 <malloc@plt>
   14340:	str	r0, [r5, #16]
   14344:	bl	15090 <init_token_cbra@@Base>
   14348:	ldr	r3, [r4, #40]	; 0x28
   1434c:	mov	ip, #5
   14350:	mov	r0, r7
   14354:	ldr	r1, [r4, #44]	; 0x2c
   14358:	ldr	r2, [pc, #364]	; 144cc <body_with_one_return@@Base+0x2a8>
   1435c:	adds	r3, r3, #1
   14360:	adc	r1, r1, #0
   14364:	str	r3, [r4, #40]	; 0x28
   14368:	str	r1, [r4, #44]	; 0x2c
   1436c:	ldr	r6, [r6, r2]
   14370:	str	ip, [r6, #220]	; 0xdc
   14374:	str	r5, [r6, #228]	; 0xe4
   14378:	bl	16e90 <read_body@@Base>
   1437c:	ldr	r3, [r6, #204]	; 0xcc
   14380:	cmp	r3, #5
   14384:	bne	143d4 <body_with_one_return@@Base+0x1b0>
   14388:	cmp	r0, #0
   1438c:	beq	14488 <body_with_one_return@@Base+0x264>
   14390:	ldr	r3, [r0]
   14394:	cmp	r3, #3
   14398:	bne	1444c <body_with_one_return@@Base+0x228>
   1439c:	ldr	r3, [r0, #4]
   143a0:	cmp	r3, #0
   143a4:	bne	14410 <body_with_one_return@@Base+0x1ec>
   143a8:	ldr	r3, [r4, #72]	; 0x48
   143ac:	ldr	r2, [r4, #76]	; 0x4c
   143b0:	adds	r3, r3, #1
   143b4:	adc	r2, r2, #0
   143b8:	str	r3, [r4, #72]	; 0x48
   143bc:	str	r2, [r4, #76]	; 0x4c
   143c0:	add	sp, sp, #20
   143c4:	ldrd	r4, [sp]
   143c8:	ldrd	r6, [sp, #8]
   143cc:	add	sp, sp, #16
   143d0:	pop	{pc}		; (ldr pc, [sp], #4)
   143d4:	ldr	r3, [r4, #48]	; 0x30
   143d8:	movw	r2, #406	; 0x196
   143dc:	ldr	lr, [pc, #236]	; 144d0 <body_with_one_return@@Base+0x2ac>
   143e0:	ldr	ip, [r4, #52]	; 0x34
   143e4:	adds	r3, r3, #1
   143e8:	ldr	r1, [pc, #228]	; 144d4 <body_with_one_return@@Base+0x2b0>
   143ec:	add	lr, pc, lr
   143f0:	str	r3, [r4, #48]	; 0x30
   143f4:	ldr	r0, [pc, #220]	; 144d8 <body_with_one_return@@Base+0x2b4>
   143f8:	add	r3, lr, #272	; 0x110
   143fc:	adc	ip, ip, #0
   14400:	add	r1, pc, r1
   14404:	str	ip, [r4, #52]	; 0x34
   14408:	add	r0, pc, r0
   1440c:	bl	119b4 <__assert_fail@plt>
   14410:	ldr	r3, [r4, #80]	; 0x50
   14414:	movw	r2, #409	; 0x199
   14418:	ldr	lr, [pc, #188]	; 144dc <body_with_one_return@@Base+0x2b8>
   1441c:	ldr	ip, [r4, #84]	; 0x54
   14420:	adds	r3, r3, #1
   14424:	ldr	r1, [pc, #180]	; 144e0 <body_with_one_return@@Base+0x2bc>
   14428:	add	lr, pc, lr
   1442c:	str	r3, [r4, #80]	; 0x50
   14430:	ldr	r0, [pc, #172]	; 144e4 <body_with_one_return@@Base+0x2c0>
   14434:	add	r3, lr, #272	; 0x110
   14438:	adc	ip, ip, #0
   1443c:	add	r1, pc, r1
   14440:	str	ip, [r4, #84]	; 0x54
   14444:	add	r0, pc, r0
   14448:	bl	119b4 <__assert_fail@plt>
   1444c:	ldr	r3, [r4, #64]	; 0x40
   14450:	mov	r2, #408	; 0x198
   14454:	ldr	lr, [pc, #140]	; 144e8 <body_with_one_return@@Base+0x2c4>
   14458:	ldr	ip, [r4, #68]	; 0x44
   1445c:	adds	r3, r3, #1
   14460:	ldr	r1, [pc, #132]	; 144ec <body_with_one_return@@Base+0x2c8>
   14464:	add	lr, pc, lr
   14468:	str	r3, [r4, #64]	; 0x40
   1446c:	ldr	r0, [pc, #124]	; 144f0 <body_with_one_return@@Base+0x2cc>
   14470:	add	r3, lr, #272	; 0x110
   14474:	adc	ip, ip, #0
   14478:	add	r1, pc, r1
   1447c:	str	ip, [r4, #68]	; 0x44
   14480:	add	r0, pc, r0
   14484:	bl	119b4 <__assert_fail@plt>
   14488:	ldr	r3, [r4, #56]	; 0x38
   1448c:	movw	r2, #407	; 0x197
   14490:	ldr	lr, [pc, #92]	; 144f4 <body_with_one_return@@Base+0x2d0>
   14494:	ldr	ip, [r4, #60]	; 0x3c
   14498:	adds	r3, r3, #1
   1449c:	ldr	r1, [pc, #84]	; 144f8 <body_with_one_return@@Base+0x2d4>
   144a0:	add	lr, pc, lr
   144a4:	str	r3, [r4, #56]	; 0x38
   144a8:	ldr	r0, [pc, #76]	; 144fc <body_with_one_return@@Base+0x2d8>
   144ac:	add	r3, lr, #272	; 0x110
   144b0:	adc	ip, ip, #0
   144b4:	add	r1, pc, r1
   144b8:	str	ip, [r4, #60]	; 0x3c
   144bc:	add	r0, pc, r0
   144c0:	bl	119b4 <__assert_fail@plt>
   144c4:	andeq	r7, r1, r4, ror #14
   144c8:	andeq	r6, r1, r4, lsl #27
   144cc:	andeq	r0, r0, ip, lsr #1
   144d0:			; <UNDEFINED> instruction: 0x000053b8
   144d4:	andeq	r5, r0, r4, lsl r5
   144d8:	andeq	r5, r0, ip, lsr #11
   144dc:	andeq	r5, r0, ip, ror r3
   144e0:	ldrdeq	r5, [r0], -r8
   144e4:	andeq	r5, r0, r4, asr #14
   144e8:	andeq	r5, r0, r0, asr #6
   144ec:	muleq	r0, ip, r4
   144f0:			; <UNDEFINED> instruction: 0x000056bc
   144f4:	andeq	r5, r0, r4, lsl #6
   144f8:	andeq	r5, r0, r0, ror #8
   144fc:	andeq	r5, r0, r8, lsr #12

00014500 <if_statement_inside_if_statement@@Base>:
   14500:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14504:	ldr	r4, [pc, #1232]	; 149dc <if_statement_inside_if_statement@@Base+0x4dc>
   14508:	add	r4, pc, r4
   1450c:	add	r4, r4, #1104	; 0x450
   14510:	ldr	r3, [r4, #-8]
   14514:	ldr	r2, [r4, #-4]
   14518:	strd	r6, [sp, #8]
   1451c:	strd	r8, [sp, #16]
   14520:	adds	r3, r3, #1
   14524:	str	lr, [sp, #24]
   14528:	sub	sp, sp, #20
   1452c:	mov	r7, sp
   14530:	add	r1, sp, #4
   14534:	ldr	r6, [pc, #1188]	; 149e0 <if_statement_inside_if_statement@@Base+0x4e0>
   14538:	adc	r2, r2, #0
   1453c:	mov	r0, r7
   14540:	str	r3, [r4, #-8]
   14544:	str	r2, [r4, #-4]
   14548:	bl	161d8 <init_grammar@@Base>
   1454c:	ldr	r3, [r4]
   14550:	mov	r0, #3
   14554:	add	r6, pc, r6
   14558:	ldr	r2, [r4, #4]
   1455c:	adds	r3, r3, #1
   14560:	adc	r2, r2, #0
   14564:	str	r3, [r4]
   14568:	str	r2, [r4, #4]
   1456c:	bl	118b8 <malloc@plt>
   14570:	mov	r9, r0
   14574:	mov	r0, #3
   14578:	bl	118b8 <malloc@plt>
   1457c:	mov	r8, r0
   14580:	movw	r2, #15649	; 0x3d21
   14584:	mov	r3, #0
   14588:	mov	r0, #76	; 0x4c
   1458c:	strh	r2, [r8]
   14590:	strh	r2, [r9]
   14594:	strb	r3, [r8, #2]
   14598:	strb	r3, [r9, #2]
   1459c:	bl	118b8 <malloc@plt>
   145a0:	mov	r5, r0
   145a4:	mov	r0, #4
   145a8:	bl	118b8 <malloc@plt>
   145ac:	str	r0, [r5]
   145b0:	bl	15000 <init_token_opar@@Base>
   145b4:	ldr	r3, [r4, #8]
   145b8:	mov	r0, #8
   145bc:	ldr	r2, [r4, #12]
   145c0:	adds	r3, r3, #1
   145c4:	adc	r2, r2, #0
   145c8:	str	r3, [r4, #8]
   145cc:	str	r2, [r4, #12]
   145d0:	bl	118b8 <malloc@plt>
   145d4:	mov	r1, #1
   145d8:	str	r0, [r5, #4]
   145dc:	bl	14f98 <init_token_int_value@@Base>
   145e0:	ldr	r3, [r4, #16]
   145e4:	mov	r0, #8
   145e8:	ldr	r2, [r4, #20]
   145ec:	adds	r3, r3, #1
   145f0:	adc	r2, r2, #0
   145f4:	str	r3, [r4, #16]
   145f8:	str	r2, [r4, #20]
   145fc:	bl	118b8 <malloc@plt>
   14600:	mov	r1, #1
   14604:	str	r0, [r5, #8]
   14608:	bl	14f98 <init_token_int_value@@Base>
   1460c:	ldr	r3, [r4, #24]
   14610:	mov	r0, #8
   14614:	ldr	r2, [r4, #28]
   14618:	adds	r3, r3, #1
   1461c:	adc	r2, r2, #0
   14620:	str	r3, [r4, #24]
   14624:	str	r2, [r4, #28]
   14628:	bl	118b8 <malloc@plt>
   1462c:	mov	r1, r9
   14630:	str	r0, [r5, #12]
   14634:	bl	151b0 <init_token_boolean_op@@Base>
   14638:	ldr	r3, [r4, #32]
   1463c:	mov	r0, #8
   14640:	ldr	r2, [r4, #36]	; 0x24
   14644:	adds	r3, r3, #1
   14648:	adc	r2, r2, #0
   1464c:	str	r3, [r4, #32]
   14650:	str	r2, [r4, #36]	; 0x24
   14654:	bl	118b8 <malloc@plt>
   14658:	mov	r1, #1
   1465c:	str	r0, [r5, #16]
   14660:	bl	14f98 <init_token_int_value@@Base>
   14664:	ldr	r3, [r4, #40]	; 0x28
   14668:	mov	r0, #4
   1466c:	ldr	r2, [r4, #44]	; 0x2c
   14670:	adds	r3, r3, #1
   14674:	adc	r2, r2, #0
   14678:	str	r3, [r4, #40]	; 0x28
   1467c:	str	r2, [r4, #44]	; 0x2c
   14680:	bl	118b8 <malloc@plt>
   14684:	str	r0, [r5, #20]
   14688:	bl	15030 <init_token_cpar@@Base>
   1468c:	ldr	r3, [r4, #48]	; 0x30
   14690:	mov	r0, #4
   14694:	ldr	r2, [r4, #52]	; 0x34
   14698:	adds	r3, r3, #1
   1469c:	adc	r2, r2, #0
   146a0:	str	r3, [r4, #48]	; 0x30
   146a4:	str	r2, [r4, #52]	; 0x34
   146a8:	bl	118b8 <malloc@plt>
   146ac:	str	r0, [r5, #24]
   146b0:	bl	15060 <init_token_obra@@Base>
   146b4:	ldr	r3, [r4, #56]	; 0x38
   146b8:	mov	r0, #4
   146bc:	ldr	r2, [r4, #60]	; 0x3c
   146c0:	adds	r3, r3, #1
   146c4:	adc	r2, r2, #0
   146c8:	str	r3, [r4, #56]	; 0x38
   146cc:	str	r2, [r4, #60]	; 0x3c
   146d0:	bl	118b8 <malloc@plt>
   146d4:	str	r0, [r5, #28]
   146d8:	bl	15150 <init_token_if@@Base>
   146dc:	ldr	r3, [r4, #64]	; 0x40
   146e0:	mov	r0, #4
   146e4:	ldr	r2, [r4, #68]	; 0x44
   146e8:	adds	r3, r3, #1
   146ec:	adc	r2, r2, #0
   146f0:	str	r3, [r4, #64]	; 0x40
   146f4:	str	r2, [r4, #68]	; 0x44
   146f8:	bl	118b8 <malloc@plt>
   146fc:	str	r0, [r5, #32]
   14700:	bl	15000 <init_token_opar@@Base>
   14704:	ldr	r3, [r4, #72]	; 0x48
   14708:	mov	r0, #8
   1470c:	ldr	r2, [r4, #76]	; 0x4c
   14710:	adds	r3, r3, #1
   14714:	adc	r2, r2, #0
   14718:	str	r3, [r4, #72]	; 0x48
   1471c:	str	r2, [r4, #76]	; 0x4c
   14720:	bl	118b8 <malloc@plt>
   14724:	mov	r1, #1
   14728:	str	r0, [r5, #36]	; 0x24
   1472c:	bl	14f98 <init_token_int_value@@Base>
   14730:	ldr	r3, [r4, #80]	; 0x50
   14734:	mov	r0, #8
   14738:	ldr	r2, [r4, #84]	; 0x54
   1473c:	adds	r3, r3, #1
   14740:	adc	r2, r2, #0
   14744:	str	r3, [r4, #80]	; 0x50
   14748:	str	r2, [r4, #84]	; 0x54
   1474c:	bl	118b8 <malloc@plt>
   14750:	mov	r1, #1
   14754:	str	r0, [r5, #40]	; 0x28
   14758:	bl	14f98 <init_token_int_value@@Base>
   1475c:	ldr	r3, [r4, #88]	; 0x58
   14760:	mov	r0, #8
   14764:	ldr	r2, [r4, #92]	; 0x5c
   14768:	adds	r3, r3, #1
   1476c:	adc	r2, r2, #0
   14770:	str	r3, [r4, #88]	; 0x58
   14774:	str	r2, [r4, #92]	; 0x5c
   14778:	bl	118b8 <malloc@plt>
   1477c:	mov	r1, r8
   14780:	str	r0, [r5, #44]	; 0x2c
   14784:	bl	151b0 <init_token_boolean_op@@Base>
   14788:	ldr	r3, [r4, #96]	; 0x60
   1478c:	mov	r0, #8
   14790:	ldr	r2, [r4, #100]	; 0x64
   14794:	adds	r3, r3, #1
   14798:	adc	r2, r2, #0
   1479c:	str	r3, [r4, #96]	; 0x60
   147a0:	str	r2, [r4, #100]	; 0x64
   147a4:	bl	118b8 <malloc@plt>
   147a8:	mov	r1, #1
   147ac:	str	r0, [r5, #48]	; 0x30
   147b0:	bl	14f98 <init_token_int_value@@Base>
   147b4:	ldr	r3, [r4, #104]	; 0x68
   147b8:	mov	r0, #4
   147bc:	ldr	r2, [r4, #108]	; 0x6c
   147c0:	adds	r3, r3, #1
   147c4:	adc	r2, r2, #0
   147c8:	str	r3, [r4, #104]	; 0x68
   147cc:	str	r2, [r4, #108]	; 0x6c
   147d0:	bl	118b8 <malloc@plt>
   147d4:	str	r0, [r5, #52]	; 0x34
   147d8:	bl	15030 <init_token_cpar@@Base>
   147dc:	ldr	r3, [r4, #112]	; 0x70
   147e0:	mov	r0, #4
   147e4:	ldr	r2, [r4, #116]	; 0x74
   147e8:	adds	r3, r3, #1
   147ec:	adc	r2, r2, #0
   147f0:	str	r3, [r4, #112]	; 0x70
   147f4:	str	r2, [r4, #116]	; 0x74
   147f8:	bl	118b8 <malloc@plt>
   147fc:	str	r0, [r5, #56]	; 0x38
   14800:	bl	15060 <init_token_obra@@Base>
   14804:	ldr	r3, [r4, #120]	; 0x78
   14808:	mov	r0, #4
   1480c:	ldr	r2, [r4, #124]	; 0x7c
   14810:	adds	r3, r3, #1
   14814:	adc	r2, r2, #0
   14818:	str	r3, [r4, #120]	; 0x78
   1481c:	str	r2, [r4, #124]	; 0x7c
   14820:	bl	118b8 <malloc@plt>
   14824:	str	r0, [r5, #60]	; 0x3c
   14828:	bl	15090 <init_token_cbra@@Base>
   1482c:	ldr	r3, [r4, #128]	; 0x80
   14830:	mov	r0, #4
   14834:	ldr	r2, [r4, #132]	; 0x84
   14838:	adds	r3, r3, #1
   1483c:	adc	r2, r2, #0
   14840:	str	r3, [r4, #128]	; 0x80
   14844:	str	r2, [r4, #132]	; 0x84
   14848:	bl	118b8 <malloc@plt>
   1484c:	str	r0, [r5, #64]	; 0x40
   14850:	bl	15090 <init_token_cbra@@Base>
   14854:	ldr	r3, [r4, #136]	; 0x88
   14858:	mov	r0, #4
   1485c:	ldr	r2, [r4, #140]	; 0x8c
   14860:	adds	r3, r3, #1
   14864:	adc	r2, r2, #0
   14868:	str	r3, [r4, #136]	; 0x88
   1486c:	str	r2, [r4, #140]	; 0x8c
   14870:	bl	118b8 <malloc@plt>
   14874:	str	r0, [r5, #68]	; 0x44
   14878:	bl	15090 <init_token_cbra@@Base>
   1487c:	ldr	r3, [r4, #144]	; 0x90
   14880:	mov	r0, #4
   14884:	ldr	r2, [r4, #148]	; 0x94
   14888:	adds	r3, r3, #1
   1488c:	adc	r2, r2, #0
   14890:	str	r3, [r4, #144]	; 0x90
   14894:	str	r2, [r4, #148]	; 0x94
   14898:	bl	118b8 <malloc@plt>
   1489c:	str	r0, [r5, #72]	; 0x48
   148a0:	bl	15120 <init_token_eof@@Base>
   148a4:	ldr	r3, [r4, #152]	; 0x98
   148a8:	mov	ip, #19
   148ac:	mov	r0, r7
   148b0:	ldr	r1, [r4, #156]	; 0x9c
   148b4:	ldr	r2, [pc, #296]	; 149e4 <if_statement_inside_if_statement@@Base+0x4e4>
   148b8:	adds	r3, r3, #1
   148bc:	adc	r1, r1, #0
   148c0:	str	r3, [r4, #152]	; 0x98
   148c4:	str	r1, [r4, #156]	; 0x9c
   148c8:	ldr	r6, [r6, r2]
   148cc:	str	ip, [r6, #220]	; 0xdc
   148d0:	str	r5, [r6, #228]	; 0xe4
   148d4:	bl	16c9c <read_if_statement@@Base>
   148d8:	ldr	r3, [r6, #204]	; 0xcc
   148dc:	cmp	r3, #19
   148e0:	bne	14928 <if_statement_inside_if_statement@@Base+0x428>
   148e4:	cmp	r0, #0
   148e8:	beq	149a0 <if_statement_inside_if_statement@@Base+0x4a0>
   148ec:	ldr	r3, [r0]
   148f0:	cmp	r3, #4
   148f4:	bne	14964 <if_statement_inside_if_statement@@Base+0x464>
   148f8:	ldr	r3, [r4, #176]	; 0xb0
   148fc:	ldr	r2, [r4, #180]	; 0xb4
   14900:	adds	r3, r3, #1
   14904:	adc	r2, r2, #0
   14908:	str	r3, [r4, #176]	; 0xb0
   1490c:	str	r2, [r4, #180]	; 0xb4
   14910:	add	sp, sp, #20
   14914:	ldrd	r4, [sp]
   14918:	ldrd	r6, [sp, #8]
   1491c:	ldrd	r8, [sp, #16]
   14920:	add	sp, sp, #24
   14924:	pop	{pc}		; (ldr pc, [sp], #4)
   14928:	ldr	r3, [r4, #160]	; 0xa0
   1492c:	mov	r2, #480	; 0x1e0
   14930:	ldr	lr, [pc, #176]	; 149e8 <if_statement_inside_if_statement@@Base+0x4e8>
   14934:	ldr	ip, [r4, #164]	; 0xa4
   14938:	adds	r3, r3, #1
   1493c:	ldr	r1, [pc, #168]	; 149ec <if_statement_inside_if_statement@@Base+0x4ec>
   14940:	add	lr, pc, lr
   14944:	str	r3, [r4, #160]	; 0xa0
   14948:	ldr	r0, [pc, #160]	; 149f0 <if_statement_inside_if_statement@@Base+0x4f0>
   1494c:	add	r3, lr, #296	; 0x128
   14950:	adc	ip, ip, #0
   14954:	add	r1, pc, r1
   14958:	str	ip, [r4, #164]	; 0xa4
   1495c:	add	r0, pc, r0
   14960:	bl	119b4 <__assert_fail@plt>
   14964:	ldr	r3, [r4, #184]	; 0xb8
   14968:	movw	r2, #482	; 0x1e2
   1496c:	ldr	lr, [pc, #128]	; 149f4 <if_statement_inside_if_statement@@Base+0x4f4>
   14970:	ldr	ip, [r4, #188]	; 0xbc
   14974:	adds	r3, r3, #1
   14978:	ldr	r1, [pc, #120]	; 149f8 <if_statement_inside_if_statement@@Base+0x4f8>
   1497c:	add	lr, pc, lr
   14980:	str	r3, [r4, #184]	; 0xb8
   14984:	ldr	r0, [pc, #112]	; 149fc <if_statement_inside_if_statement@@Base+0x4fc>
   14988:	add	r3, lr, #296	; 0x128
   1498c:	adc	ip, ip, #0
   14990:	add	r1, pc, r1
   14994:	str	ip, [r4, #188]	; 0xbc
   14998:	add	r0, pc, r0
   1499c:	bl	119b4 <__assert_fail@plt>
   149a0:	ldr	r3, [r4, #168]	; 0xa8
   149a4:	movw	r2, #481	; 0x1e1
   149a8:	ldr	lr, [pc, #80]	; 14a00 <if_statement_inside_if_statement@@Base+0x500>
   149ac:	ldr	ip, [r4, #172]	; 0xac
   149b0:	adds	r3, r3, #1
   149b4:	ldr	r1, [pc, #72]	; 14a04 <if_statement_inside_if_statement@@Base+0x504>
   149b8:	add	lr, pc, lr
   149bc:	str	r3, [r4, #168]	; 0xa8
   149c0:	ldr	r0, [pc, #64]	; 14a08 <if_statement_inside_if_statement@@Base+0x508>
   149c4:	add	r3, lr, #296	; 0x128
   149c8:	adc	ip, ip, #0
   149cc:	add	r1, pc, r1
   149d0:	str	ip, [r4, #172]	; 0xac
   149d4:	add	r0, pc, r0
   149d8:	bl	119b4 <__assert_fail@plt>
   149dc:	andeq	r7, r1, r8, lsl #9
   149e0:	andeq	r6, r1, r4, lsr #21
   149e4:	andeq	r0, r0, ip, lsr #1
   149e8:	andeq	r4, r0, r4, ror #28
   149ec:	andeq	r4, r0, r0, asr #31
   149f0:	andeq	r5, r0, r0, asr #4
   149f4:	andeq	r4, r0, r8, lsr #28
   149f8:	andeq	r4, r0, r4, lsl #31
   149fc:	andeq	r5, r0, r8, asr r1
   14a00:	andeq	r4, r0, ip, ror #27
   14a04:	andeq	r4, r0, r8, asr #30
   14a08:	andeq	r5, r0, r0, lsl r1

00014a0c <if_statement_inside_else_statement@@Base>:
   14a0c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14a10:	ldr	r4, [pc, #1312]	; 14f38 <if_statement_inside_else_statement@@Base+0x52c>
   14a14:	add	r4, pc, r4
   14a18:	add	r4, r4, #1296	; 0x510
   14a1c:	ldr	r3, [r4]
   14a20:	ldr	r2, [r4, #4]
   14a24:	strd	r6, [sp, #8]
   14a28:	strd	r8, [sp, #16]
   14a2c:	adds	r3, r3, #1
   14a30:	str	lr, [sp, #24]
   14a34:	sub	sp, sp, #20
   14a38:	mov	r7, sp
   14a3c:	add	r1, sp, #4
   14a40:	ldr	r6, [pc, #1268]	; 14f3c <if_statement_inside_else_statement@@Base+0x530>
   14a44:	adc	r2, r2, #0
   14a48:	mov	r0, r7
   14a4c:	str	r3, [r4]
   14a50:	str	r2, [r4, #4]
   14a54:	bl	161d8 <init_grammar@@Base>
   14a58:	ldr	r3, [r4, #8]
   14a5c:	mov	r0, #3
   14a60:	add	r6, pc, r6
   14a64:	ldr	r2, [r4, #12]
   14a68:	adds	r3, r3, #1
   14a6c:	adc	r2, r2, #0
   14a70:	str	r3, [r4, #8]
   14a74:	str	r2, [r4, #12]
   14a78:	bl	118b8 <malloc@plt>
   14a7c:	mov	r9, r0
   14a80:	mov	r0, #3
   14a84:	bl	118b8 <malloc@plt>
   14a88:	mov	r8, r0
   14a8c:	movw	r2, #15649	; 0x3d21
   14a90:	mov	r3, #0
   14a94:	mov	r0, #84	; 0x54
   14a98:	strh	r2, [r8]
   14a9c:	strh	r2, [r9]
   14aa0:	strb	r3, [r8, #2]
   14aa4:	strb	r3, [r9, #2]
   14aa8:	bl	118b8 <malloc@plt>
   14aac:	mov	r5, r0
   14ab0:	mov	r0, #4
   14ab4:	bl	118b8 <malloc@plt>
   14ab8:	str	r0, [r5]
   14abc:	bl	15000 <init_token_opar@@Base>
   14ac0:	ldr	r3, [r4, #16]
   14ac4:	mov	r0, #8
   14ac8:	ldr	r2, [r4, #20]
   14acc:	adds	r3, r3, #1
   14ad0:	adc	r2, r2, #0
   14ad4:	str	r3, [r4, #16]
   14ad8:	str	r2, [r4, #20]
   14adc:	bl	118b8 <malloc@plt>
   14ae0:	mov	r1, #1
   14ae4:	str	r0, [r5, #4]
   14ae8:	bl	14f98 <init_token_int_value@@Base>
   14aec:	ldr	r3, [r4, #24]
   14af0:	mov	r0, #8
   14af4:	ldr	r2, [r4, #28]
   14af8:	adds	r3, r3, #1
   14afc:	adc	r2, r2, #0
   14b00:	str	r3, [r4, #24]
   14b04:	str	r2, [r4, #28]
   14b08:	bl	118b8 <malloc@plt>
   14b0c:	mov	r1, #1
   14b10:	str	r0, [r5, #8]
   14b14:	bl	14f98 <init_token_int_value@@Base>
   14b18:	ldr	r3, [r4, #32]
   14b1c:	mov	r0, #8
   14b20:	ldr	r2, [r4, #36]	; 0x24
   14b24:	adds	r3, r3, #1
   14b28:	adc	r2, r2, #0
   14b2c:	str	r3, [r4, #32]
   14b30:	str	r2, [r4, #36]	; 0x24
   14b34:	bl	118b8 <malloc@plt>
   14b38:	mov	r1, r9
   14b3c:	str	r0, [r5, #12]
   14b40:	bl	151b0 <init_token_boolean_op@@Base>
   14b44:	ldr	r3, [r4, #40]	; 0x28
   14b48:	mov	r0, #8
   14b4c:	ldr	r2, [r4, #44]	; 0x2c
   14b50:	adds	r3, r3, #1
   14b54:	adc	r2, r2, #0
   14b58:	str	r3, [r4, #40]	; 0x28
   14b5c:	str	r2, [r4, #44]	; 0x2c
   14b60:	bl	118b8 <malloc@plt>
   14b64:	mov	r1, #1
   14b68:	str	r0, [r5, #16]
   14b6c:	bl	14f98 <init_token_int_value@@Base>
   14b70:	ldr	r3, [r4, #48]	; 0x30
   14b74:	mov	r0, #4
   14b78:	ldr	r2, [r4, #52]	; 0x34
   14b7c:	adds	r3, r3, #1
   14b80:	adc	r2, r2, #0
   14b84:	str	r3, [r4, #48]	; 0x30
   14b88:	str	r2, [r4, #52]	; 0x34
   14b8c:	bl	118b8 <malloc@plt>
   14b90:	str	r0, [r5, #20]
   14b94:	bl	15030 <init_token_cpar@@Base>
   14b98:	ldr	r3, [r4, #56]	; 0x38
   14b9c:	mov	r0, #4
   14ba0:	ldr	r2, [r4, #60]	; 0x3c
   14ba4:	adds	r3, r3, #1
   14ba8:	adc	r2, r2, #0
   14bac:	str	r3, [r4, #56]	; 0x38
   14bb0:	str	r2, [r4, #60]	; 0x3c
   14bb4:	bl	118b8 <malloc@plt>
   14bb8:	str	r0, [r5, #24]
   14bbc:	bl	15060 <init_token_obra@@Base>
   14bc0:	ldr	r3, [r4, #64]	; 0x40
   14bc4:	mov	r0, #4
   14bc8:	ldr	r2, [r4, #68]	; 0x44
   14bcc:	adds	r3, r3, #1
   14bd0:	adc	r2, r2, #0
   14bd4:	str	r3, [r4, #64]	; 0x40
   14bd8:	str	r2, [r4, #68]	; 0x44
   14bdc:	bl	118b8 <malloc@plt>
   14be0:	str	r0, [r5, #28]
   14be4:	bl	15090 <init_token_cbra@@Base>
   14be8:	ldr	r3, [r4, #72]	; 0x48
   14bec:	mov	r0, #4
   14bf0:	ldr	r2, [r4, #76]	; 0x4c
   14bf4:	adds	r3, r3, #1
   14bf8:	adc	r2, r2, #0
   14bfc:	str	r3, [r4, #72]	; 0x48
   14c00:	str	r2, [r4, #76]	; 0x4c
   14c04:	bl	118b8 <malloc@plt>
   14c08:	str	r0, [r5, #32]
   14c0c:	bl	15180 <init_token_else@@Base>
   14c10:	ldr	r3, [r4, #80]	; 0x50
   14c14:	mov	r0, #4
   14c18:	ldr	r2, [r4, #84]	; 0x54
   14c1c:	adds	r3, r3, #1
   14c20:	adc	r2, r2, #0
   14c24:	str	r3, [r4, #80]	; 0x50
   14c28:	str	r2, [r4, #84]	; 0x54
   14c2c:	bl	118b8 <malloc@plt>
   14c30:	str	r0, [r5, #36]	; 0x24
   14c34:	bl	15060 <init_token_obra@@Base>
   14c38:	ldr	r3, [r4, #88]	; 0x58
   14c3c:	mov	r0, #4
   14c40:	ldr	r2, [r4, #92]	; 0x5c
   14c44:	adds	r3, r3, #1
   14c48:	adc	r2, r2, #0
   14c4c:	str	r3, [r4, #88]	; 0x58
   14c50:	str	r2, [r4, #92]	; 0x5c
   14c54:	bl	118b8 <malloc@plt>
   14c58:	str	r0, [r5, #40]	; 0x28
   14c5c:	bl	15150 <init_token_if@@Base>
   14c60:	ldr	r3, [r4, #96]	; 0x60
   14c64:	mov	r0, #4
   14c68:	ldr	r2, [r4, #100]	; 0x64
   14c6c:	adds	r3, r3, #1
   14c70:	adc	r2, r2, #0
   14c74:	str	r3, [r4, #96]	; 0x60
   14c78:	str	r2, [r4, #100]	; 0x64
   14c7c:	bl	118b8 <malloc@plt>
   14c80:	str	r0, [r5, #44]	; 0x2c
   14c84:	bl	15000 <init_token_opar@@Base>
   14c88:	ldr	r3, [r4, #104]	; 0x68
   14c8c:	mov	r0, #8
   14c90:	ldr	r2, [r4, #108]	; 0x6c
   14c94:	adds	r3, r3, #1
   14c98:	adc	r2, r2, #0
   14c9c:	str	r3, [r4, #104]	; 0x68
   14ca0:	str	r2, [r4, #108]	; 0x6c
   14ca4:	bl	118b8 <malloc@plt>
   14ca8:	mov	r1, #1
   14cac:	str	r0, [r5, #48]	; 0x30
   14cb0:	bl	14f98 <init_token_int_value@@Base>
   14cb4:	ldr	r3, [r4, #112]	; 0x70
   14cb8:	mov	r0, #8
   14cbc:	ldr	r2, [r4, #116]	; 0x74
   14cc0:	adds	r3, r3, #1
   14cc4:	adc	r2, r2, #0
   14cc8:	str	r3, [r4, #112]	; 0x70
   14ccc:	str	r2, [r4, #116]	; 0x74
   14cd0:	bl	118b8 <malloc@plt>
   14cd4:	mov	r1, #1
   14cd8:	str	r0, [r5, #52]	; 0x34
   14cdc:	bl	14f98 <init_token_int_value@@Base>
   14ce0:	ldr	r3, [r4, #120]	; 0x78
   14ce4:	mov	r0, #8
   14ce8:	ldr	r2, [r4, #124]	; 0x7c
   14cec:	adds	r3, r3, #1
   14cf0:	adc	r2, r2, #0
   14cf4:	str	r3, [r4, #120]	; 0x78
   14cf8:	str	r2, [r4, #124]	; 0x7c
   14cfc:	bl	118b8 <malloc@plt>
   14d00:	mov	r1, r8
   14d04:	str	r0, [r5, #56]	; 0x38
   14d08:	bl	151b0 <init_token_boolean_op@@Base>
   14d0c:	ldr	r3, [r4, #128]	; 0x80
   14d10:	mov	r0, #8
   14d14:	ldr	r2, [r4, #132]	; 0x84
   14d18:	adds	r3, r3, #1
   14d1c:	adc	r2, r2, #0
   14d20:	str	r3, [r4, #128]	; 0x80
   14d24:	str	r2, [r4, #132]	; 0x84
   14d28:	bl	118b8 <malloc@plt>
   14d2c:	mov	r1, #1
   14d30:	str	r0, [r5, #60]	; 0x3c
   14d34:	bl	14f98 <init_token_int_value@@Base>
   14d38:	ldr	r3, [r4, #136]	; 0x88
   14d3c:	mov	r0, #4
   14d40:	ldr	r2, [r4, #140]	; 0x8c
   14d44:	adds	r3, r3, #1
   14d48:	adc	r2, r2, #0
   14d4c:	str	r3, [r4, #136]	; 0x88
   14d50:	str	r2, [r4, #140]	; 0x8c
   14d54:	bl	118b8 <malloc@plt>
   14d58:	str	r0, [r5, #64]	; 0x40
   14d5c:	bl	15030 <init_token_cpar@@Base>
   14d60:	ldr	r3, [r4, #144]	; 0x90
   14d64:	mov	r0, #4
   14d68:	ldr	r2, [r4, #148]	; 0x94
   14d6c:	adds	r3, r3, #1
   14d70:	adc	r2, r2, #0
   14d74:	str	r3, [r4, #144]	; 0x90
   14d78:	str	r2, [r4, #148]	; 0x94
   14d7c:	bl	118b8 <malloc@plt>
   14d80:	str	r0, [r5, #68]	; 0x44
   14d84:	bl	15060 <init_token_obra@@Base>
   14d88:	ldr	r3, [r4, #152]	; 0x98
   14d8c:	mov	r0, #4
   14d90:	ldr	r2, [r4, #156]	; 0x9c
   14d94:	adds	r3, r3, #1
   14d98:	adc	r2, r2, #0
   14d9c:	str	r3, [r4, #152]	; 0x98
   14da0:	str	r2, [r4, #156]	; 0x9c
   14da4:	bl	118b8 <malloc@plt>
   14da8:	str	r0, [r5, #72]	; 0x48
   14dac:	bl	15090 <init_token_cbra@@Base>
   14db0:	ldr	r3, [r4, #160]	; 0xa0
   14db4:	mov	r0, #4
   14db8:	ldr	r2, [r4, #164]	; 0xa4
   14dbc:	adds	r3, r3, #1
   14dc0:	adc	r2, r2, #0
   14dc4:	str	r3, [r4, #160]	; 0xa0
   14dc8:	str	r2, [r4, #164]	; 0xa4
   14dcc:	bl	118b8 <malloc@plt>
   14dd0:	str	r0, [r5, #76]	; 0x4c
   14dd4:	bl	15090 <init_token_cbra@@Base>
   14dd8:	ldr	r3, [r4, #168]	; 0xa8
   14ddc:	mov	r0, #4
   14de0:	ldr	r2, [r4, #172]	; 0xac
   14de4:	adds	r3, r3, #1
   14de8:	adc	r2, r2, #0
   14dec:	str	r3, [r4, #168]	; 0xa8
   14df0:	str	r2, [r4, #172]	; 0xac
   14df4:	bl	118b8 <malloc@plt>
   14df8:	str	r0, [r5, #80]	; 0x50
   14dfc:	bl	15090 <init_token_cbra@@Base>
   14e00:	ldr	r3, [r4, #176]	; 0xb0
   14e04:	mov	ip, #21
   14e08:	mov	r0, r7
   14e0c:	ldr	r1, [r4, #180]	; 0xb4
   14e10:	ldr	r2, [pc, #296]	; 14f40 <if_statement_inside_else_statement@@Base+0x534>
   14e14:	adds	r3, r3, #1
   14e18:	adc	r1, r1, #0
   14e1c:	str	r3, [r4, #176]	; 0xb0
   14e20:	str	r1, [r4, #180]	; 0xb4
   14e24:	ldr	r6, [r6, r2]
   14e28:	str	ip, [r6, #220]	; 0xdc
   14e2c:	str	r5, [r6, #228]	; 0xe4
   14e30:	bl	16c9c <read_if_statement@@Base>
   14e34:	ldr	r3, [r6, #204]	; 0xcc
   14e38:	cmp	r3, #21
   14e3c:	bne	14e84 <if_statement_inside_else_statement@@Base+0x478>
   14e40:	cmp	r0, #0
   14e44:	beq	14efc <if_statement_inside_else_statement@@Base+0x4f0>
   14e48:	ldr	r3, [r0]
   14e4c:	cmp	r3, #4
   14e50:	bne	14ec0 <if_statement_inside_else_statement@@Base+0x4b4>
   14e54:	ldr	r3, [r4, #200]	; 0xc8
   14e58:	ldr	r2, [r4, #204]	; 0xcc
   14e5c:	adds	r3, r3, #1
   14e60:	adc	r2, r2, #0
   14e64:	str	r3, [r4, #200]	; 0xc8
   14e68:	str	r2, [r4, #204]	; 0xcc
   14e6c:	add	sp, sp, #20
   14e70:	ldrd	r4, [sp]
   14e74:	ldrd	r6, [sp, #8]
   14e78:	ldrd	r8, [sp, #16]
   14e7c:	add	sp, sp, #24
   14e80:	pop	{pc}		; (ldr pc, [sp], #4)
   14e84:	ldr	r3, [r4, #184]	; 0xb8
   14e88:	movw	r2, #558	; 0x22e
   14e8c:	ldr	lr, [pc, #176]	; 14f44 <if_statement_inside_else_statement@@Base+0x538>
   14e90:	ldr	ip, [r4, #188]	; 0xbc
   14e94:	adds	r3, r3, #1
   14e98:	ldr	r1, [pc, #168]	; 14f48 <if_statement_inside_else_statement@@Base+0x53c>
   14e9c:	add	lr, pc, lr
   14ea0:	str	r3, [r4, #184]	; 0xb8
   14ea4:	ldr	r0, [pc, #160]	; 14f4c <if_statement_inside_else_statement@@Base+0x540>
   14ea8:	add	r3, lr, #332	; 0x14c
   14eac:	adc	ip, ip, #0
   14eb0:	add	r1, pc, r1
   14eb4:	str	ip, [r4, #188]	; 0xbc
   14eb8:	add	r0, pc, r0
   14ebc:	bl	119b4 <__assert_fail@plt>
   14ec0:	ldr	r3, [r4, #208]	; 0xd0
   14ec4:	mov	r2, #560	; 0x230
   14ec8:	ldr	lr, [pc, #128]	; 14f50 <if_statement_inside_else_statement@@Base+0x544>
   14ecc:	ldr	ip, [r4, #212]	; 0xd4
   14ed0:	adds	r3, r3, #1
   14ed4:	ldr	r1, [pc, #120]	; 14f54 <if_statement_inside_else_statement@@Base+0x548>
   14ed8:	add	lr, pc, lr
   14edc:	str	r3, [r4, #208]	; 0xd0
   14ee0:	ldr	r0, [pc, #112]	; 14f58 <if_statement_inside_else_statement@@Base+0x54c>
   14ee4:	add	r3, lr, #332	; 0x14c
   14ee8:	adc	ip, ip, #0
   14eec:	add	r1, pc, r1
   14ef0:	str	ip, [r4, #212]	; 0xd4
   14ef4:	add	r0, pc, r0
   14ef8:	bl	119b4 <__assert_fail@plt>
   14efc:	ldr	r3, [r4, #192]	; 0xc0
   14f00:	movw	r2, #559	; 0x22f
   14f04:	ldr	lr, [pc, #80]	; 14f5c <if_statement_inside_else_statement@@Base+0x550>
   14f08:	ldr	ip, [r4, #196]	; 0xc4
   14f0c:	adds	r3, r3, #1
   14f10:	ldr	r1, [pc, #72]	; 14f60 <if_statement_inside_else_statement@@Base+0x554>
   14f14:	add	lr, pc, lr
   14f18:	str	r3, [r4, #192]	; 0xc0
   14f1c:	ldr	r0, [pc, #64]	; 14f64 <if_statement_inside_else_statement@@Base+0x558>
   14f20:	add	r3, lr, #332	; 0x14c
   14f24:	adc	ip, ip, #0
   14f28:	add	r1, pc, r1
   14f2c:	str	ip, [r4, #196]	; 0xc4
   14f30:	add	r0, pc, r0
   14f34:	bl	119b4 <__assert_fail@plt>
   14f38:	andeq	r6, r1, ip, ror pc
   14f3c:	muleq	r1, r8, r5
   14f40:	andeq	r0, r0, ip, lsr #1
   14f44:	andeq	r4, r0, r8, lsl #18
   14f48:	andeq	r4, r0, r4, ror #20
   14f4c:	andeq	r4, r0, r0, lsl #26
   14f50:	andeq	r4, r0, ip, asr #17
   14f54:	andeq	r4, r0, r8, lsr #20
   14f58:	strdeq	r4, [r0], -ip
   14f5c:	muleq	r0, r0, r8
   14f60:	andeq	r4, r0, ip, ror #19
   14f64:			; <UNDEFINED> instruction: 0x00004bb4

00014f68 <init_token_int_type@@Base>:
   14f68:	ldr	r2, [pc, #36]	; 14f94 <init_token_int_type@@Base+0x2c>
   14f6c:	mov	r3, #0
   14f70:	str	r3, [r0]
   14f74:	add	r2, pc, r2
   14f78:	ldr	r3, [r2]
   14f7c:	ldr	r1, [r2, #4]
   14f80:	adds	r3, r3, #1
   14f84:	adc	r1, r1, #0
   14f88:	str	r3, [r2]
   14f8c:	str	r1, [r2, #4]
   14f90:	bx	lr
   14f94:	andeq	r7, r1, ip, asr #3

00014f98 <init_token_int_value@@Base>:
   14f98:	ldr	r2, [pc, #40]	; 14fc8 <init_token_int_value@@Base+0x30>
   14f9c:	mov	r3, #1
   14fa0:	str	r3, [r0]
   14fa4:	str	r1, [r0, #4]
   14fa8:	add	r2, pc, r2
   14fac:	ldr	r3, [r2, #8]
   14fb0:	ldr	r1, [r2, #12]
   14fb4:	adds	r3, r3, #1
   14fb8:	adc	r1, r1, #0
   14fbc:	str	r3, [r2, #8]
   14fc0:	str	r1, [r2, #12]
   14fc4:	bx	lr
   14fc8:	muleq	r1, r8, r1

00014fcc <init_token_function@@Base>:
   14fcc:	ldr	r2, [pc, #40]	; 14ffc <init_token_function@@Base+0x30>
   14fd0:	mov	r3, #2
   14fd4:	str	r3, [r0]
   14fd8:	str	r1, [r0, #4]
   14fdc:	add	r2, pc, r2
   14fe0:	ldr	r3, [r2, #16]
   14fe4:	ldr	r1, [r2, #20]
   14fe8:	adds	r3, r3, #1
   14fec:	adc	r1, r1, #0
   14ff0:	str	r3, [r2, #16]
   14ff4:	str	r1, [r2, #20]
   14ff8:	bx	lr
   14ffc:	andeq	r7, r1, r4, ror #2

00015000 <init_token_opar@@Base>:
   15000:	ldr	r2, [pc, #36]	; 1502c <init_token_opar@@Base+0x2c>
   15004:	mov	r3, #3
   15008:	str	r3, [r0]
   1500c:	add	r2, pc, r2
   15010:	ldr	r3, [r2, #24]
   15014:	ldr	r1, [r2, #28]
   15018:	adds	r3, r3, #1
   1501c:	adc	r1, r1, #0
   15020:	str	r3, [r2, #24]
   15024:	str	r1, [r2, #28]
   15028:	bx	lr
   1502c:	andeq	r7, r1, r4, lsr r1

00015030 <init_token_cpar@@Base>:
   15030:	ldr	r2, [pc, #36]	; 1505c <init_token_cpar@@Base+0x2c>
   15034:	mov	r3, #4
   15038:	str	r3, [r0]
   1503c:	add	r2, pc, r2
   15040:	ldr	r3, [r2, #32]
   15044:	ldr	r1, [r2, #36]	; 0x24
   15048:	adds	r3, r3, #1
   1504c:	adc	r1, r1, #0
   15050:	str	r3, [r2, #32]
   15054:	str	r1, [r2, #36]	; 0x24
   15058:	bx	lr
   1505c:	andeq	r7, r1, r4, lsl #2

00015060 <init_token_obra@@Base>:
   15060:	ldr	r2, [pc, #36]	; 1508c <init_token_obra@@Base+0x2c>
   15064:	mov	r3, #5
   15068:	str	r3, [r0]
   1506c:	add	r2, pc, r2
   15070:	ldr	r3, [r2, #40]	; 0x28
   15074:	ldr	r1, [r2, #44]	; 0x2c
   15078:	adds	r3, r3, #1
   1507c:	adc	r1, r1, #0
   15080:	str	r3, [r2, #40]	; 0x28
   15084:	str	r1, [r2, #44]	; 0x2c
   15088:	bx	lr
   1508c:	ldrdeq	r7, [r1], -r4

00015090 <init_token_cbra@@Base>:
   15090:	ldr	r2, [pc, #36]	; 150bc <init_token_cbra@@Base+0x2c>
   15094:	mov	r3, #6
   15098:	str	r3, [r0]
   1509c:	add	r2, pc, r2
   150a0:	ldr	r3, [r2, #48]	; 0x30
   150a4:	ldr	r1, [r2, #52]	; 0x34
   150a8:	adds	r3, r3, #1
   150ac:	adc	r1, r1, #0
   150b0:	str	r3, [r2, #48]	; 0x30
   150b4:	str	r1, [r2, #52]	; 0x34
   150b8:	bx	lr
   150bc:	andeq	r7, r1, r4, lsr #1

000150c0 <init_token_return@@Base>:
   150c0:	ldr	r2, [pc, #36]	; 150ec <init_token_return@@Base+0x2c>
   150c4:	mov	r3, #7
   150c8:	str	r3, [r0]
   150cc:	add	r2, pc, r2
   150d0:	ldr	r3, [r2, #56]	; 0x38
   150d4:	ldr	r1, [r2, #60]	; 0x3c
   150d8:	adds	r3, r3, #1
   150dc:	adc	r1, r1, #0
   150e0:	str	r3, [r2, #56]	; 0x38
   150e4:	str	r1, [r2, #60]	; 0x3c
   150e8:	bx	lr
   150ec:	andeq	r7, r1, r4, ror r0

000150f0 <init_token_semicolon@@Base>:
   150f0:	ldr	r2, [pc, #36]	; 1511c <init_token_semicolon@@Base+0x2c>
   150f4:	mov	r3, #8
   150f8:	str	r3, [r0]
   150fc:	add	r2, pc, r2
   15100:	ldr	r3, [r2, #64]	; 0x40
   15104:	ldr	r1, [r2, #68]	; 0x44
   15108:	adds	r3, r3, #1
   1510c:	adc	r1, r1, #0
   15110:	str	r3, [r2, #64]	; 0x40
   15114:	str	r1, [r2, #68]	; 0x44
   15118:	bx	lr
   1511c:	andeq	r7, r1, r4, asr #32

00015120 <init_token_eof@@Base>:
   15120:	ldr	r2, [pc, #36]	; 1514c <init_token_eof@@Base+0x2c>
   15124:	mov	r3, #9
   15128:	str	r3, [r0]
   1512c:	add	r2, pc, r2
   15130:	ldr	r3, [r2, #72]	; 0x48
   15134:	ldr	r1, [r2, #76]	; 0x4c
   15138:	adds	r3, r3, #1
   1513c:	adc	r1, r1, #0
   15140:	str	r3, [r2, #72]	; 0x48
   15144:	str	r1, [r2, #76]	; 0x4c
   15148:	bx	lr
   1514c:	andeq	r7, r1, r4, lsl r0

00015150 <init_token_if@@Base>:
   15150:	ldr	r2, [pc, #36]	; 1517c <init_token_if@@Base+0x2c>
   15154:	mov	r3, #10
   15158:	str	r3, [r0]
   1515c:	add	r2, pc, r2
   15160:	ldr	r3, [r2, #80]	; 0x50
   15164:	ldr	r1, [r2, #84]	; 0x54
   15168:	adds	r3, r3, #1
   1516c:	adc	r1, r1, #0
   15170:	str	r3, [r2, #80]	; 0x50
   15174:	str	r1, [r2, #84]	; 0x54
   15178:	bx	lr
   1517c:	andeq	r6, r1, r4, ror #31

00015180 <init_token_else@@Base>:
   15180:	ldr	r2, [pc, #36]	; 151ac <init_token_else@@Base+0x2c>
   15184:	mov	r3, #11
   15188:	str	r3, [r0]
   1518c:	add	r2, pc, r2
   15190:	ldr	r3, [r2, #88]	; 0x58
   15194:	ldr	r1, [r2, #92]	; 0x5c
   15198:	adds	r3, r3, #1
   1519c:	adc	r1, r1, #0
   151a0:	str	r3, [r2, #88]	; 0x58
   151a4:	str	r1, [r2, #92]	; 0x5c
   151a8:	bx	lr
   151ac:			; <UNDEFINED> instruction: 0x00016fb4

000151b0 <init_token_boolean_op@@Base>:
   151b0:	ldr	r2, [pc, #40]	; 151e0 <init_token_boolean_op@@Base+0x30>
   151b4:	mov	r3, #12
   151b8:	str	r3, [r0]
   151bc:	str	r1, [r0, #4]
   151c0:	add	r2, pc, r2
   151c4:	ldr	r3, [r2, #96]	; 0x60
   151c8:	ldr	r1, [r2, #100]	; 0x64
   151cc:	adds	r3, r3, #1
   151d0:	adc	r1, r1, #0
   151d4:	str	r3, [r2, #96]	; 0x60
   151d8:	str	r1, [r2, #100]	; 0x64
   151dc:	bx	lr
   151e0:	andeq	r6, r1, r0, lsl #31

000151e4 <free_token_int_type@@Base>:
   151e4:	ldr	r2, [pc, #28]	; 15208 <free_token_int_type@@Base+0x24>
   151e8:	add	r2, pc, r2
   151ec:	ldr	r3, [r2, #104]	; 0x68
   151f0:	ldr	r1, [r2, #108]	; 0x6c
   151f4:	adds	r3, r3, #1
   151f8:	adc	r1, r1, #0
   151fc:	str	r3, [r2, #104]	; 0x68
   15200:	str	r1, [r2, #108]	; 0x6c
   15204:	b	1184c <free@plt>
   15208:	andeq	r6, r1, r8, asr pc

0001520c <free_token_int_value@@Base>:
   1520c:	ldr	r2, [pc, #28]	; 15230 <free_token_int_value@@Base+0x24>
   15210:	add	r2, pc, r2
   15214:	ldr	r3, [r2, #112]	; 0x70
   15218:	ldr	r1, [r2, #116]	; 0x74
   1521c:	adds	r3, r3, #1
   15220:	adc	r1, r1, #0
   15224:	str	r3, [r2, #112]	; 0x70
   15228:	str	r1, [r2, #116]	; 0x74
   1522c:	b	1184c <free@plt>
   15230:	andeq	r6, r1, r0, lsr pc

00015234 <free_token_function@@Base>:
   15234:	ldr	r2, [pc, #28]	; 15258 <free_token_function@@Base+0x24>
   15238:	add	r2, pc, r2
   1523c:	ldr	r3, [r2, #120]	; 0x78
   15240:	ldr	r1, [r2, #124]	; 0x7c
   15244:	adds	r3, r3, #1
   15248:	adc	r1, r1, #0
   1524c:	str	r3, [r2, #120]	; 0x78
   15250:	str	r1, [r2, #124]	; 0x7c
   15254:	b	1184c <free@plt>
   15258:	andeq	r6, r1, r8, lsl #30

0001525c <free_token_opar@@Base>:
   1525c:	ldr	r2, [pc, #28]	; 15280 <free_token_opar@@Base+0x24>
   15260:	add	r2, pc, r2
   15264:	ldr	r3, [r2, #128]	; 0x80
   15268:	ldr	r1, [r2, #132]	; 0x84
   1526c:	adds	r3, r3, #1
   15270:	adc	r1, r1, #0
   15274:	str	r3, [r2, #128]	; 0x80
   15278:	str	r1, [r2, #132]	; 0x84
   1527c:	b	1184c <free@plt>
   15280:	andeq	r6, r1, r0, ror #29

00015284 <free_token_cpar@@Base>:
   15284:	ldr	r2, [pc, #28]	; 152a8 <free_token_cpar@@Base+0x24>
   15288:	add	r2, pc, r2
   1528c:	ldr	r3, [r2, #136]	; 0x88
   15290:	ldr	r1, [r2, #140]	; 0x8c
   15294:	adds	r3, r3, #1
   15298:	adc	r1, r1, #0
   1529c:	str	r3, [r2, #136]	; 0x88
   152a0:	str	r1, [r2, #140]	; 0x8c
   152a4:	b	1184c <free@plt>
   152a8:			; <UNDEFINED> instruction: 0x00016eb8

000152ac <free_token_obra@@Base>:
   152ac:	ldr	r2, [pc, #28]	; 152d0 <free_token_obra@@Base+0x24>
   152b0:	add	r2, pc, r2
   152b4:	ldr	r3, [r2, #144]	; 0x90
   152b8:	ldr	r1, [r2, #148]	; 0x94
   152bc:	adds	r3, r3, #1
   152c0:	adc	r1, r1, #0
   152c4:	str	r3, [r2, #144]	; 0x90
   152c8:	str	r1, [r2, #148]	; 0x94
   152cc:	b	1184c <free@plt>
   152d0:	muleq	r1, r0, lr

000152d4 <free_token_cbra@@Base>:
   152d4:	ldr	r2, [pc, #28]	; 152f8 <free_token_cbra@@Base+0x24>
   152d8:	add	r2, pc, r2
   152dc:	ldr	r3, [r2, #152]	; 0x98
   152e0:	ldr	r1, [r2, #156]	; 0x9c
   152e4:	adds	r3, r3, #1
   152e8:	adc	r1, r1, #0
   152ec:	str	r3, [r2, #152]	; 0x98
   152f0:	str	r1, [r2, #156]	; 0x9c
   152f4:	b	1184c <free@plt>
   152f8:	andeq	r6, r1, r8, ror #28

000152fc <free_token_return@@Base>:
   152fc:	ldr	r2, [pc, #28]	; 15320 <free_token_return@@Base+0x24>
   15300:	add	r2, pc, r2
   15304:	ldr	r3, [r2, #160]	; 0xa0
   15308:	ldr	r1, [r2, #164]	; 0xa4
   1530c:	adds	r3, r3, #1
   15310:	adc	r1, r1, #0
   15314:	str	r3, [r2, #160]	; 0xa0
   15318:	str	r1, [r2, #164]	; 0xa4
   1531c:	b	1184c <free@plt>
   15320:	andeq	r6, r1, r0, asr #28

00015324 <free_token_semicolon@@Base>:
   15324:	ldr	r2, [pc, #28]	; 15348 <free_token_semicolon@@Base+0x24>
   15328:	add	r2, pc, r2
   1532c:	ldr	r3, [r2, #168]	; 0xa8
   15330:	ldr	r1, [r2, #172]	; 0xac
   15334:	adds	r3, r3, #1
   15338:	adc	r1, r1, #0
   1533c:	str	r3, [r2, #168]	; 0xa8
   15340:	str	r1, [r2, #172]	; 0xac
   15344:	b	1184c <free@plt>
   15348:	andeq	r6, r1, r8, lsl lr

0001534c <free_token_eof@@Base>:
   1534c:	ldr	r2, [pc, #28]	; 15370 <free_token_eof@@Base+0x24>
   15350:	add	r2, pc, r2
   15354:	ldr	r3, [r2, #176]	; 0xb0
   15358:	ldr	r1, [r2, #180]	; 0xb4
   1535c:	adds	r3, r3, #1
   15360:	adc	r1, r1, #0
   15364:	str	r3, [r2, #176]	; 0xb0
   15368:	str	r1, [r2, #180]	; 0xb4
   1536c:	b	1184c <free@plt>
   15370:	strdeq	r6, [r1], -r0

00015374 <free_token_if@@Base>:
   15374:	ldr	r2, [pc, #28]	; 15398 <free_token_if@@Base+0x24>
   15378:	add	r2, pc, r2
   1537c:	ldr	r3, [r2, #184]	; 0xb8
   15380:	ldr	r1, [r2, #188]	; 0xbc
   15384:	adds	r3, r3, #1
   15388:	adc	r1, r1, #0
   1538c:	str	r3, [r2, #184]	; 0xb8
   15390:	str	r1, [r2, #188]	; 0xbc
   15394:	b	1184c <free@plt>
   15398:	andeq	r6, r1, r8, asr #27

0001539c <free_token_else@@Base>:
   1539c:	ldr	r2, [pc, #28]	; 153c0 <free_token_else@@Base+0x24>
   153a0:	add	r2, pc, r2
   153a4:	ldr	r3, [r2, #192]	; 0xc0
   153a8:	ldr	r1, [r2, #196]	; 0xc4
   153ac:	adds	r3, r3, #1
   153b0:	adc	r1, r1, #0
   153b4:	str	r3, [r2, #192]	; 0xc0
   153b8:	str	r1, [r2, #196]	; 0xc4
   153bc:	b	1184c <free@plt>
   153c0:	andeq	r6, r1, r0, lsr #27

000153c4 <free_token_boolean_op@@Base>:
   153c4:	str	r4, [sp, #-8]!
   153c8:	mov	r4, r0
   153cc:	ldr	r0, [r0, #4]
   153d0:	str	lr, [sp, #4]
   153d4:	cmp	r0, #0
   153d8:	beq	15414 <free_token_boolean_op@@Base+0x50>
   153dc:	ldr	r2, [pc, #84]	; 15438 <free_token_boolean_op@@Base+0x74>
   153e0:	add	r2, pc, r2
   153e4:	ldr	r3, [r2, #200]	; 0xc8
   153e8:	ldr	r1, [r2, #204]	; 0xcc
   153ec:	adds	r3, r3, #1
   153f0:	adc	r1, r1, #0
   153f4:	str	r3, [r2, #200]	; 0xc8
   153f8:	str	r1, [r2, #204]	; 0xcc
   153fc:	bl	1184c <free@plt>
   15400:	mov	r0, r4
   15404:	ldr	r4, [sp]
   15408:	ldr	lr, [sp, #4]
   1540c:	add	sp, sp, #8
   15410:	b	1184c <free@plt>
   15414:	ldr	r2, [pc, #32]	; 1543c <free_token_boolean_op@@Base+0x78>
   15418:	add	r2, pc, r2
   1541c:	ldr	r3, [r2, #208]	; 0xd0
   15420:	ldr	r1, [r2, #212]	; 0xd4
   15424:	adds	r3, r3, #1
   15428:	adc	r1, r1, #0
   1542c:	str	r3, [r2, #208]	; 0xd0
   15430:	str	r1, [r2, #212]	; 0xd4
   15434:	b	15400 <free_token_boolean_op@@Base+0x3c>
   15438:	andeq	r6, r1, r0, ror #26
   1543c:	andeq	r6, r1, r8, lsr #26

00015440 <init_ast_base@@Base>:
   15440:	ldr	ip, [pc, #32]	; 15468 <init_ast_base@@Base+0x28>
   15444:	stm	r0, {r1, r2}
   15448:	add	ip, pc, ip
   1544c:	ldr	r3, [ip]
   15450:	ldr	r2, [ip, #4]
   15454:	adds	r3, r3, #1
   15458:	adc	r2, r2, #0
   1545c:	str	r3, [ip]
   15460:	str	r2, [ip, #4]
   15464:	bx	lr
   15468:	ldrdeq	r6, [r1], -r0

0001546c <init_ast_base_single@@Base>:
   1546c:	str	r4, [sp, #-8]!
   15470:	mov	r2, #0
   15474:	ldr	r4, [pc, #68]	; 154c0 <init_ast_base_single@@Base+0x54>
   15478:	add	r4, pc, r4
   1547c:	ldr	r3, [r4, #8]
   15480:	ldr	ip, [r4, #12]
   15484:	str	lr, [sp, #4]
   15488:	adds	r3, r3, #1
   1548c:	adc	ip, ip, r2
   15490:	str	r3, [r4, #8]
   15494:	str	ip, [r4, #12]
   15498:	bl	15440 <init_ast_base@@Base>
   1549c:	ldr	r3, [r4, #16]
   154a0:	ldr	r2, [r4, #20]
   154a4:	adds	r3, r3, #1
   154a8:	adc	r2, r2, #0
   154ac:	str	r3, [r4, #16]
   154b0:	str	r2, [r4, #20]
   154b4:	ldr	r4, [sp]
   154b8:	add	sp, sp, #4
   154bc:	pop	{pc}		; (ldr pc, [sp], #4)
   154c0:	andeq	r6, r1, r0, lsr #27

000154c4 <init_node_id@@Base>:
   154c4:	strd	r4, [sp, #-16]!
   154c8:	mov	r5, r0
   154cc:	ldr	r4, [pc, #88]	; 1552c <init_node_id@@Base+0x68>
   154d0:	add	r4, pc, r4
   154d4:	ldr	r3, [r4, #24]
   154d8:	ldr	r2, [r4, #28]
   154dc:	str	r6, [sp, #8]
   154e0:	mov	r6, r1
   154e4:	mov	r1, #0
   154e8:	str	lr, [sp, #12]
   154ec:	adds	r3, r3, #1
   154f0:	adc	r2, r2, r1
   154f4:	str	r3, [r4, #24]
   154f8:	str	r2, [r4, #28]
   154fc:	bl	1546c <init_ast_base_single@@Base>
   15500:	ldr	r3, [r4, #32]
   15504:	str	r6, [r5, #8]
   15508:	ldr	r2, [r4, #36]	; 0x24
   1550c:	ldr	r6, [sp, #8]
   15510:	adds	r3, r3, #1
   15514:	adc	r2, r2, #0
   15518:	str	r3, [r4, #32]
   1551c:	str	r2, [r4, #36]	; 0x24
   15520:	ldrd	r4, [sp]
   15524:	add	sp, sp, #12
   15528:	pop	{pc}		; (ldr pc, [sp], #4)
   1552c:	andeq	r6, r1, r8, asr #26

00015530 <init_node_int@@Base>:
   15530:	strd	r4, [sp, #-16]!
   15534:	mov	r5, r0
   15538:	ldr	r4, [pc, #88]	; 15598 <init_node_int@@Base+0x68>
   1553c:	add	r4, pc, r4
   15540:	ldr	r3, [r4, #40]	; 0x28
   15544:	ldr	r2, [r4, #44]	; 0x2c
   15548:	str	r6, [sp, #8]
   1554c:	mov	r6, r1
   15550:	mov	r1, #1
   15554:	str	lr, [sp, #12]
   15558:	adds	r3, r3, r1
   1555c:	adc	r2, r2, #0
   15560:	str	r3, [r4, #40]	; 0x28
   15564:	str	r2, [r4, #44]	; 0x2c
   15568:	bl	1546c <init_ast_base_single@@Base>
   1556c:	ldr	r3, [r4, #48]	; 0x30
   15570:	str	r6, [r5, #8]
   15574:	ldr	r2, [r4, #52]	; 0x34
   15578:	ldr	r6, [sp, #8]
   1557c:	adds	r3, r3, #1
   15580:	adc	r2, r2, #0
   15584:	str	r3, [r4, #48]	; 0x30
   15588:	str	r2, [r4, #52]	; 0x34
   1558c:	ldrd	r4, [sp]
   15590:	add	sp, sp, #12
   15594:	pop	{pc}		; (ldr pc, [sp], #4)
   15598:	ldrdeq	r6, [r1], -ip

0001559c <init_node_function@@Base>:
   1559c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   155a0:	mov	r5, r0
   155a4:	ldr	r4, [pc, #104]	; 15614 <init_node_function@@Base+0x78>
   155a8:	add	r4, pc, r4
   155ac:	ldr	r3, [r4, #56]	; 0x38
   155b0:	ldr	ip, [r4, #60]	; 0x3c
   155b4:	strd	r6, [sp, #8]
   155b8:	mov	r7, r1
   155bc:	mov	r1, #2
   155c0:	mov	r6, r2
   155c4:	str	r8, [sp, #16]
   155c8:	adds	r3, r3, #1
   155cc:	str	lr, [sp, #20]
   155d0:	adc	ip, ip, #0
   155d4:	str	r3, [r4, #56]	; 0x38
   155d8:	str	ip, [r4, #60]	; 0x3c
   155dc:	bl	1546c <init_ast_base_single@@Base>
   155e0:	ldr	r3, [r4, #64]	; 0x40
   155e4:	ldr	r1, [r4, #68]	; 0x44
   155e8:	ldr	r8, [sp, #16]
   155ec:	adds	r3, r3, #1
   155f0:	str	r7, [r5, #8]
   155f4:	str	r6, [r5, #12]
   155f8:	adc	r1, r1, #0
   155fc:	str	r3, [r4, #64]	; 0x40
   15600:	ldrd	r6, [sp, #8]
   15604:	str	r1, [r4, #68]	; 0x44
   15608:	ldrd	r4, [sp]
   1560c:	add	sp, sp, #20
   15610:	pop	{pc}		; (ldr pc, [sp], #4)
   15614:	andeq	r6, r1, r0, ror ip

00015618 <init_node_return@@Base>:
   15618:	strd	r4, [sp, #-16]!
   1561c:	mov	r5, r0
   15620:	ldr	r4, [pc, #88]	; 15680 <init_node_return@@Base+0x68>
   15624:	add	r4, pc, r4
   15628:	ldr	r3, [r4, #72]	; 0x48
   1562c:	ldr	r2, [r4, #76]	; 0x4c
   15630:	str	r6, [sp, #8]
   15634:	mov	r6, r1
   15638:	mov	r1, #3
   1563c:	str	lr, [sp, #12]
   15640:	adds	r3, r3, #1
   15644:	adc	r2, r2, #0
   15648:	str	r3, [r4, #72]	; 0x48
   1564c:	str	r2, [r4, #76]	; 0x4c
   15650:	bl	1546c <init_ast_base_single@@Base>
   15654:	ldr	r3, [r4, #80]	; 0x50
   15658:	str	r6, [r5, #8]
   1565c:	ldr	r2, [r4, #84]	; 0x54
   15660:	ldr	r6, [sp, #8]
   15664:	adds	r3, r3, #1
   15668:	adc	r2, r2, #0
   1566c:	str	r3, [r4, #80]	; 0x50
   15670:	str	r2, [r4, #84]	; 0x54
   15674:	ldrd	r4, [sp]
   15678:	add	sp, sp, #12
   1567c:	pop	{pc}		; (ldr pc, [sp], #4)
   15680:	strdeq	r6, [r1], -r4

00015684 <init_node_if@@Base>:
   15684:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15688:	mov	r5, r0
   1568c:	ldr	r4, [pc, #112]	; 15704 <init_node_if@@Base+0x80>
   15690:	add	r4, pc, r4
   15694:	ldr	ip, [r4, #88]	; 0x58
   15698:	strd	r6, [sp, #8]
   1569c:	mov	r7, r1
   156a0:	mov	r1, #4
   156a4:	str	lr, [sp, #20]
   156a8:	mov	r6, r2
   156ac:	ldr	lr, [r4, #92]	; 0x5c
   156b0:	str	r8, [sp, #16]
   156b4:	mov	r8, r3
   156b8:	adds	ip, ip, #1
   156bc:	str	ip, [r4, #88]	; 0x58
   156c0:	adc	lr, lr, #0
   156c4:	str	lr, [r4, #92]	; 0x5c
   156c8:	bl	1546c <init_ast_base_single@@Base>
   156cc:	ldr	r1, [r4, #96]	; 0x60
   156d0:	str	r7, [r5, #8]
   156d4:	ldr	r0, [r4, #100]	; 0x64
   156d8:	str	r6, [r5, #12]
   156dc:	str	r8, [r5, #16]
   156e0:	adds	r1, r1, #1
   156e4:	ldrd	r6, [sp, #8]
   156e8:	adc	r0, r0, #0
   156ec:	str	r1, [r4, #96]	; 0x60
   156f0:	ldr	r8, [sp, #16]
   156f4:	str	r0, [r4, #100]	; 0x64
   156f8:	ldrd	r4, [sp]
   156fc:	add	sp, sp, #20
   15700:	pop	{pc}		; (ldr pc, [sp], #4)
   15704:	andeq	r6, r1, r8, lsl #23

00015708 <init_node_boolean_operator@@Base>:
   15708:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1570c:	mov	r5, r0
   15710:	ldr	r4, [pc, #120]	; 15790 <init_node_boolean_operator@@Base+0x88>
   15714:	add	r4, pc, r4
   15718:	ldr	ip, [r4, #104]	; 0x68
   1571c:	strd	r6, [sp, #8]
   15720:	mov	r6, r1
   15724:	mov	r1, #0
   15728:	str	lr, [sp, #20]
   1572c:	mov	r7, r3
   15730:	ldr	lr, [r4, #108]	; 0x6c
   15734:	str	r8, [sp, #16]
   15738:	mov	r8, r2
   1573c:	adds	ip, ip, #1
   15740:	str	ip, [r4, #104]	; 0x68
   15744:	adc	lr, lr, r1
   15748:	str	lr, [r4, #108]	; 0x6c
   1574c:	bl	1546c <init_ast_base_single@@Base>
   15750:	ldr	r1, [r4, #112]	; 0x70
   15754:	mov	r3, #5
   15758:	ldr	r2, [r4, #116]	; 0x74
   1575c:	str	r3, [r5]
   15760:	str	r8, [r5, #8]
   15764:	adds	r1, r1, #1
   15768:	str	r7, [r5, #12]
   1576c:	str	r6, [r5, #16]
   15770:	adc	r2, r2, #0
   15774:	str	r1, [r4, #112]	; 0x70
   15778:	ldrd	r6, [sp, #8]
   1577c:	str	r2, [r4, #116]	; 0x74
   15780:	ldrd	r4, [sp]
   15784:	ldr	r8, [sp, #16]
   15788:	add	sp, sp, #20
   1578c:	pop	{pc}		; (ldr pc, [sp], #4)
   15790:	andeq	r6, r1, r4, lsl #22

00015794 <free_node_boolean_operator@@Base>:
   15794:	strd	r4, [sp, #-16]!
   15798:	mov	r5, r0
   1579c:	ldr	r0, [r0, #4]
   157a0:	str	r6, [sp, #8]
   157a4:	str	lr, [sp, #12]
   157a8:	cmp	r0, #0
   157ac:	beq	1584c <free_node_boolean_operator@@Base+0xb8>
   157b0:	ldr	r4, [pc, #184]	; 15870 <free_node_boolean_operator@@Base+0xdc>
   157b4:	add	r4, pc, r4
   157b8:	ldr	r3, [r4, #120]	; 0x78
   157bc:	ldr	r2, [r4, #124]	; 0x7c
   157c0:	adds	r3, r3, #1
   157c4:	adc	r2, r2, #0
   157c8:	str	r3, [r4, #120]	; 0x78
   157cc:	str	r2, [r4, #124]	; 0x7c
   157d0:	bl	1587c <free_node@@Base>
   157d4:	ldr	r3, [r4, #136]	; 0x88
   157d8:	ldr	r2, [r4, #140]	; 0x8c
   157dc:	adds	r3, r3, #1
   157e0:	adc	r2, r2, #0
   157e4:	str	r3, [r4, #136]	; 0x88
   157e8:	str	r2, [r4, #140]	; 0x8c
   157ec:	ldr	r4, [pc, #128]	; 15874 <free_node_boolean_operator@@Base+0xe0>
   157f0:	ldr	r0, [r5, #8]
   157f4:	bl	1587c <free_node@@Base>
   157f8:	ldr	r0, [r5, #12]
   157fc:	add	r4, pc, r4
   15800:	ldr	r3, [r4, #144]	; 0x90
   15804:	ldr	r2, [r4, #148]	; 0x94
   15808:	adds	r3, r3, #1
   1580c:	adc	r2, r2, #0
   15810:	str	r3, [r4, #144]	; 0x90
   15814:	str	r2, [r4, #148]	; 0x94
   15818:	bl	1587c <free_node@@Base>
   1581c:	ldr	r3, [r4, #152]	; 0x98
   15820:	mov	r0, r5
   15824:	ldr	r2, [r4, #156]	; 0x9c
   15828:	ldr	r6, [sp, #8]
   1582c:	adds	r3, r3, #1
   15830:	ldr	lr, [sp, #12]
   15834:	adc	r2, r2, #0
   15838:	str	r3, [r4, #152]	; 0x98
   1583c:	str	r2, [r4, #156]	; 0x9c
   15840:	ldrd	r4, [sp]
   15844:	add	sp, sp, #16
   15848:	b	1184c <free@plt>
   1584c:	ldr	r2, [pc, #36]	; 15878 <free_node_boolean_operator@@Base+0xe4>
   15850:	add	r2, pc, r2
   15854:	ldr	r3, [r2, #128]	; 0x80
   15858:	ldr	r1, [r2, #132]	; 0x84
   1585c:	adds	r3, r3, #1
   15860:	adc	r1, r1, #0
   15864:	str	r3, [r2, #128]	; 0x80
   15868:	str	r1, [r2, #132]	; 0x84
   1586c:	b	157ec <free_node_boolean_operator@@Base+0x58>
   15870:	andeq	r6, r1, r4, ror #20
   15874:	andeq	r6, r1, ip, lsl sl
   15878:	andeq	r6, r1, r8, asr #19

0001587c <free_node@@Base>:
   1587c:	ldr	ip, [pc, #576]	; 15ac4 <free_node@@Base+0x248>
   15880:	str	r4, [sp, #-8]!
   15884:	ldr	r3, [r0]
   15888:	str	lr, [sp, #4]
   1588c:	add	ip, pc, ip
   15890:	cmp	r3, #5
   15894:	addls	pc, pc, r3, lsl #2
   15898:	b	15a64 <free_node@@Base+0x1e8>
   1589c:	b	158fc <free_node@@Base+0x80>
   158a0:	b	15944 <free_node@@Base+0xc8>
   158a4:	b	1598c <free_node@@Base+0x110>
   158a8:	b	159d4 <free_node@@Base+0x158>
   158ac:	b	15a1c <free_node@@Base+0x1a0>
   158b0:	b	158b4 <free_node@@Base+0x38>
   158b4:	ldr	r4, [pc, #524]	; 15ac8 <free_node@@Base+0x24c>
   158b8:	add	r4, pc, r4
   158bc:	ldr	r3, [r4, #208]	; 0xd0
   158c0:	ldr	r2, [r4, #212]	; 0xd4
   158c4:	adds	r3, r3, #1
   158c8:	adc	r2, r2, #0
   158cc:	str	r3, [r4, #208]	; 0xd0
   158d0:	str	r2, [r4, #212]	; 0xd4
   158d4:	bl	15794 <free_node_boolean_operator@@Base>
   158d8:	ldr	r3, [r4, #256]	; 0x100
   158dc:	ldr	r2, [r4, #260]	; 0x104
   158e0:	adds	r3, r3, #1
   158e4:	adc	r2, r2, #0
   158e8:	str	r3, [r4, #256]	; 0x100
   158ec:	str	r2, [r4, #260]	; 0x104
   158f0:	ldr	r4, [sp]
   158f4:	add	sp, sp, #4
   158f8:	pop	{pc}		; (ldr pc, [sp], #4)
   158fc:	ldr	r4, [pc, #456]	; 15acc <free_node@@Base+0x250>
   15900:	add	r4, pc, r4
   15904:	ldr	r3, [r4, #168]	; 0xa8
   15908:	ldr	r2, [r4, #172]	; 0xac
   1590c:	adds	r3, r3, #1
   15910:	adc	r2, r2, #0
   15914:	str	r3, [r4, #168]	; 0xa8
   15918:	str	r2, [r4, #172]	; 0xac
   1591c:	bl	15dd0 <free_node_id@@Base>
   15920:	ldr	r3, [r4, #216]	; 0xd8
   15924:	ldr	r2, [r4, #220]	; 0xdc
   15928:	adds	r3, r3, #1
   1592c:	adc	r2, r2, #0
   15930:	str	r3, [r4, #216]	; 0xd8
   15934:	str	r2, [r4, #220]	; 0xdc
   15938:	ldr	r4, [sp]
   1593c:	add	sp, sp, #4
   15940:	pop	{pc}		; (ldr pc, [sp], #4)
   15944:	ldr	r4, [pc, #388]	; 15ad0 <free_node@@Base+0x254>
   15948:	add	r4, pc, r4
   1594c:	ldr	r3, [r4, #176]	; 0xb0
   15950:	ldr	r2, [r4, #180]	; 0xb4
   15954:	adds	r3, r3, #1
   15958:	adc	r2, r2, #0
   1595c:	str	r3, [r4, #176]	; 0xb0
   15960:	str	r2, [r4, #180]	; 0xb4
   15964:	bl	15d34 <free_node_int@@Base>
   15968:	ldr	r3, [r4, #224]	; 0xe0
   1596c:	ldr	r2, [r4, #228]	; 0xe4
   15970:	adds	r3, r3, #1
   15974:	adc	r2, r2, #0
   15978:	str	r3, [r4, #224]	; 0xe0
   1597c:	str	r2, [r4, #228]	; 0xe4
   15980:	ldr	r4, [sp]
   15984:	add	sp, sp, #4
   15988:	pop	{pc}		; (ldr pc, [sp], #4)
   1598c:	ldr	r4, [pc, #320]	; 15ad4 <free_node@@Base+0x258>
   15990:	add	r4, pc, r4
   15994:	ldr	r3, [r4, #184]	; 0xb8
   15998:	ldr	r2, [r4, #188]	; 0xbc
   1599c:	adds	r3, r3, #1
   159a0:	adc	r2, r2, #0
   159a4:	str	r3, [r4, #184]	; 0xb8
   159a8:	str	r2, [r4, #188]	; 0xbc
   159ac:	bl	15c90 <free_node_function@@Base>
   159b0:	ldr	r3, [r4, #232]	; 0xe8
   159b4:	ldr	r2, [r4, #236]	; 0xec
   159b8:	adds	r3, r3, #1
   159bc:	adc	r2, r2, #0
   159c0:	str	r3, [r4, #232]	; 0xe8
   159c4:	str	r2, [r4, #236]	; 0xec
   159c8:	ldr	r4, [sp]
   159cc:	add	sp, sp, #4
   159d0:	pop	{pc}		; (ldr pc, [sp], #4)
   159d4:	ldr	r4, [pc, #252]	; 15ad8 <free_node@@Base+0x25c>
   159d8:	add	r4, pc, r4
   159dc:	ldr	r3, [r4, #192]	; 0xc0
   159e0:	ldr	r2, [r4, #196]	; 0xc4
   159e4:	adds	r3, r3, #1
   159e8:	adc	r2, r2, #0
   159ec:	str	r3, [r4, #192]	; 0xc0
   159f0:	str	r2, [r4, #196]	; 0xc4
   159f4:	bl	15bf4 <free_node_return@@Base>
   159f8:	ldr	r3, [r4, #240]	; 0xf0
   159fc:	ldr	r2, [r4, #244]	; 0xf4
   15a00:	adds	r3, r3, #1
   15a04:	adc	r2, r2, #0
   15a08:	str	r3, [r4, #240]	; 0xf0
   15a0c:	str	r2, [r4, #244]	; 0xf4
   15a10:	ldr	r4, [sp]
   15a14:	add	sp, sp, #4
   15a18:	pop	{pc}		; (ldr pc, [sp], #4)
   15a1c:	ldr	r4, [pc, #184]	; 15adc <free_node@@Base+0x260>
   15a20:	add	r4, pc, r4
   15a24:	ldr	r3, [r4, #200]	; 0xc8
   15a28:	ldr	r2, [r4, #204]	; 0xcc
   15a2c:	adds	r3, r3, #1
   15a30:	adc	r2, r2, #0
   15a34:	str	r3, [r4, #200]	; 0xc8
   15a38:	str	r2, [r4, #204]	; 0xcc
   15a3c:	bl	15aec <free_node_if@@Base>
   15a40:	ldr	r3, [r4, #248]	; 0xf8
   15a44:	ldr	r2, [r4, #252]	; 0xfc
   15a48:	adds	r3, r3, #1
   15a4c:	adc	r2, r2, #0
   15a50:	str	r3, [r4, #248]	; 0xf8
   15a54:	str	r2, [r4, #252]	; 0xfc
   15a58:	ldr	r4, [sp]
   15a5c:	add	sp, sp, #4
   15a60:	pop	{pc}		; (ldr pc, [sp], #4)
   15a64:	ldr	r4, [pc, #116]	; 15ae0 <free_node@@Base+0x264>
   15a68:	mov	r1, #1
   15a6c:	mov	r2, #31
   15a70:	ldr	r0, [pc, #108]	; 15ae4 <free_node@@Base+0x268>
   15a74:	add	r4, pc, r4
   15a78:	ldr	r3, [r4, #160]	; 0xa0
   15a7c:	ldr	lr, [r4, #164]	; 0xa4
   15a80:	adds	r3, r3, r1
   15a84:	adc	lr, lr, #0
   15a88:	str	r3, [r4, #160]	; 0xa0
   15a8c:	str	lr, [r4, #164]	; 0xa4
   15a90:	ldr	r3, [ip, r0]
   15a94:	ldr	r0, [pc, #76]	; 15ae8 <free_node@@Base+0x26c>
   15a98:	ldr	r3, [r3]
   15a9c:	add	r0, pc, r0
   15aa0:	bl	11870 <fwrite@plt>
   15aa4:	ldr	r3, [r4, #264]	; 0x108
   15aa8:	mov	r0, #1
   15aac:	ldr	r2, [r4, #268]	; 0x10c
   15ab0:	adds	r3, r3, r0
   15ab4:	adc	r2, r2, #0
   15ab8:	str	r3, [r4, #264]	; 0x108
   15abc:	str	r2, [r4, #268]	; 0x10c
   15ac0:	bl	118e8 <exit@plt>
   15ac4:	andeq	r5, r1, ip, ror #14
   15ac8:	andeq	r6, r1, r0, ror #18
   15acc:	andeq	r6, r1, r8, lsl r9
   15ad0:	ldrdeq	r6, [r1], -r0
   15ad4:	andeq	r6, r1, r8, lsl #17
   15ad8:	andeq	r6, r1, r0, asr #16
   15adc:	strdeq	r6, [r1], -r8
   15ae0:	andeq	r6, r1, r4, lsr #15
   15ae4:	andeq	r0, r0, r0, lsr #1
   15ae8:	andeq	r4, r0, r4, lsl r4

00015aec <free_node_if@@Base>:
   15aec:	strd	r4, [sp, #-16]!
   15af0:	mov	r5, r0
   15af4:	ldr	r0, [r0, #4]
   15af8:	str	r6, [sp, #8]
   15afc:	str	lr, [sp, #12]
   15b00:	cmp	r0, #0
   15b04:	beq	15bc4 <free_node_if@@Base+0xd8>
   15b08:	ldr	r4, [pc, #216]	; 15be8 <free_node_if@@Base+0xfc>
   15b0c:	add	r4, pc, r4
   15b10:	ldr	r3, [r4, #272]	; 0x110
   15b14:	ldr	r2, [r4, #276]	; 0x114
   15b18:	adds	r3, r3, #1
   15b1c:	adc	r2, r2, #0
   15b20:	str	r3, [r4, #272]	; 0x110
   15b24:	str	r2, [r4, #276]	; 0x114
   15b28:	bl	1587c <free_node@@Base>
   15b2c:	ldr	r3, [r4, #288]	; 0x120
   15b30:	ldr	r2, [r4, #292]	; 0x124
   15b34:	adds	r3, r3, #1
   15b38:	adc	r2, r2, #0
   15b3c:	str	r3, [r4, #288]	; 0x120
   15b40:	str	r2, [r4, #292]	; 0x124
   15b44:	ldr	r4, [pc, #160]	; 15bec <free_node_if@@Base+0x100>
   15b48:	ldr	r0, [r5, #8]
   15b4c:	bl	1587c <free_node@@Base>
   15b50:	ldr	r0, [r5, #12]
   15b54:	add	r4, pc, r4
   15b58:	ldr	r3, [r4, #296]	; 0x128
   15b5c:	ldr	r2, [r4, #300]	; 0x12c
   15b60:	adds	r3, r3, #1
   15b64:	adc	r2, r2, #0
   15b68:	str	r3, [r4, #296]	; 0x128
   15b6c:	str	r2, [r4, #300]	; 0x12c
   15b70:	bl	1587c <free_node@@Base>
   15b74:	ldr	r3, [r4, #304]	; 0x130
   15b78:	ldr	r2, [r4, #308]	; 0x134
   15b7c:	ldr	r0, [r5, #16]
   15b80:	adds	r3, r3, #1
   15b84:	adc	r2, r2, #0
   15b88:	str	r3, [r4, #304]	; 0x130
   15b8c:	str	r2, [r4, #308]	; 0x134
   15b90:	bl	1587c <free_node@@Base>
   15b94:	ldr	r3, [r4, #312]	; 0x138
   15b98:	mov	r0, r5
   15b9c:	ldr	r2, [r4, #316]	; 0x13c
   15ba0:	ldr	r6, [sp, #8]
   15ba4:	adds	r3, r3, #1
   15ba8:	ldr	lr, [sp, #12]
   15bac:	adc	r2, r2, #0
   15bb0:	str	r3, [r4, #312]	; 0x138
   15bb4:	str	r2, [r4, #316]	; 0x13c
   15bb8:	ldrd	r4, [sp]
   15bbc:	add	sp, sp, #16
   15bc0:	b	1184c <free@plt>
   15bc4:	ldr	r3, [pc, #36]	; 15bf0 <free_node_if@@Base+0x104>
   15bc8:	add	r3, pc, r3
   15bcc:	ldr	r2, [r3, #280]	; 0x118
   15bd0:	ldr	r1, [r3, #284]	; 0x11c
   15bd4:	adds	r2, r2, #1
   15bd8:	adc	r1, r1, #0
   15bdc:	str	r2, [r3, #280]	; 0x118
   15be0:	str	r1, [r3, #284]	; 0x11c
   15be4:	b	15b44 <free_node_if@@Base+0x58>
   15be8:	andeq	r6, r1, ip, lsl #14
   15bec:	andeq	r6, r1, r4, asr #13
   15bf0:	andeq	r6, r1, r0, asr r6

00015bf4 <free_node_return@@Base>:
   15bf4:	strd	r4, [sp, #-16]!
   15bf8:	mov	r5, r0
   15bfc:	ldr	r0, [r0, #4]
   15c00:	str	r6, [sp, #8]
   15c04:	str	lr, [sp, #12]
   15c08:	cmp	r0, #0
   15c0c:	beq	15c64 <free_node_return@@Base+0x70>
   15c10:	ldr	r4, [pc, #112]	; 15c88 <free_node_return@@Base+0x94>
   15c14:	add	r4, pc, r4
   15c18:	ldr	r3, [r4, #320]	; 0x140
   15c1c:	ldr	r2, [r4, #324]	; 0x144
   15c20:	adds	r3, r3, #1
   15c24:	adc	r2, r2, #0
   15c28:	str	r3, [r4, #320]	; 0x140
   15c2c:	str	r2, [r4, #324]	; 0x144
   15c30:	bl	1587c <free_node@@Base>
   15c34:	ldr	r3, [r4, #336]	; 0x150
   15c38:	ldr	r2, [r4, #340]	; 0x154
   15c3c:	adds	r3, r3, #1
   15c40:	adc	r2, r2, #0
   15c44:	str	r3, [r4, #336]	; 0x150
   15c48:	str	r2, [r4, #340]	; 0x154
   15c4c:	mov	r0, r5
   15c50:	ldrd	r4, [sp]
   15c54:	ldr	r6, [sp, #8]
   15c58:	ldr	lr, [sp, #12]
   15c5c:	add	sp, sp, #16
   15c60:	b	1184c <free@plt>
   15c64:	ldr	r3, [pc, #32]	; 15c8c <free_node_return@@Base+0x98>
   15c68:	add	r3, pc, r3
   15c6c:	ldr	r2, [r3, #328]	; 0x148
   15c70:	ldr	r1, [r3, #332]	; 0x14c
   15c74:	adds	r2, r2, #1
   15c78:	adc	r1, r1, #0
   15c7c:	str	r2, [r3, #328]	; 0x148
   15c80:	str	r1, [r3, #332]	; 0x14c
   15c84:	b	15c4c <free_node_return@@Base+0x58>
   15c88:	andeq	r6, r1, r4, lsl #12
   15c8c:			; <UNDEFINED> instruction: 0x000165b0

00015c90 <free_node_function@@Base>:
   15c90:	strd	r4, [sp, #-16]!
   15c94:	mov	r5, r0
   15c98:	ldr	r0, [r0, #4]
   15c9c:	str	r6, [sp, #8]
   15ca0:	str	lr, [sp, #12]
   15ca4:	cmp	r0, #0
   15ca8:	beq	15d08 <free_node_function@@Base+0x78>
   15cac:	ldr	r4, [pc, #120]	; 15d2c <free_node_function@@Base+0x9c>
   15cb0:	add	r4, pc, r4
   15cb4:	ldr	r3, [r4, #344]	; 0x158
   15cb8:	ldr	r2, [r4, #348]	; 0x15c
   15cbc:	adds	r3, r3, #1
   15cc0:	adc	r2, r2, #0
   15cc4:	str	r3, [r4, #344]	; 0x158
   15cc8:	str	r2, [r4, #348]	; 0x15c
   15ccc:	bl	1587c <free_node@@Base>
   15cd0:	ldr	r3, [r4, #360]	; 0x168
   15cd4:	ldr	r2, [r4, #364]	; 0x16c
   15cd8:	adds	r3, r3, #1
   15cdc:	adc	r2, r2, #0
   15ce0:	str	r3, [r4, #360]	; 0x168
   15ce4:	str	r2, [r4, #364]	; 0x16c
   15ce8:	ldr	r0, [r5, #8]
   15cec:	bl	1184c <free@plt>
   15cf0:	mov	r0, r5
   15cf4:	ldrd	r4, [sp]
   15cf8:	ldr	r6, [sp, #8]
   15cfc:	ldr	lr, [sp, #12]
   15d00:	add	sp, sp, #16
   15d04:	b	1184c <free@plt>
   15d08:	ldr	r3, [pc, #32]	; 15d30 <free_node_function@@Base+0xa0>
   15d0c:	add	r3, pc, r3
   15d10:	ldr	r2, [r3, #352]	; 0x160
   15d14:	ldr	r1, [r3, #356]	; 0x164
   15d18:	adds	r2, r2, #1
   15d1c:	adc	r1, r1, #0
   15d20:	str	r2, [r3, #352]	; 0x160
   15d24:	str	r1, [r3, #356]	; 0x164
   15d28:	b	15ce8 <free_node_function@@Base+0x58>
   15d2c:	andeq	r6, r1, r8, ror #10
   15d30:	andeq	r6, r1, ip, lsl #10

00015d34 <free_node_int@@Base>:
   15d34:	strd	r4, [sp, #-16]!
   15d38:	mov	r5, r0
   15d3c:	ldr	r0, [r0, #4]
   15d40:	str	r6, [sp, #8]
   15d44:	str	lr, [sp, #12]
   15d48:	cmp	r0, #0
   15d4c:	beq	15da4 <free_node_int@@Base+0x70>
   15d50:	ldr	r4, [pc, #112]	; 15dc8 <free_node_int@@Base+0x94>
   15d54:	add	r4, pc, r4
   15d58:	ldr	r3, [r4, #368]	; 0x170
   15d5c:	ldr	r2, [r4, #372]	; 0x174
   15d60:	adds	r3, r3, #1
   15d64:	adc	r2, r2, #0
   15d68:	str	r3, [r4, #368]	; 0x170
   15d6c:	str	r2, [r4, #372]	; 0x174
   15d70:	bl	1587c <free_node@@Base>
   15d74:	ldr	r3, [r4, #384]	; 0x180
   15d78:	ldr	r2, [r4, #388]	; 0x184
   15d7c:	adds	r3, r3, #1
   15d80:	adc	r2, r2, #0
   15d84:	str	r3, [r4, #384]	; 0x180
   15d88:	str	r2, [r4, #388]	; 0x184
   15d8c:	mov	r0, r5
   15d90:	ldrd	r4, [sp]
   15d94:	ldr	r6, [sp, #8]
   15d98:	ldr	lr, [sp, #12]
   15d9c:	add	sp, sp, #16
   15da0:	b	1184c <free@plt>
   15da4:	ldr	r3, [pc, #32]	; 15dcc <free_node_int@@Base+0x98>
   15da8:	add	r3, pc, r3
   15dac:	ldr	r2, [r3, #376]	; 0x178
   15db0:	ldr	r1, [r3, #380]	; 0x17c
   15db4:	adds	r2, r2, #1
   15db8:	adc	r1, r1, #0
   15dbc:	str	r2, [r3, #376]	; 0x178
   15dc0:	str	r1, [r3, #380]	; 0x17c
   15dc4:	b	15d8c <free_node_int@@Base+0x58>
   15dc8:	andeq	r6, r1, r4, asr #9
   15dcc:	andeq	r6, r1, r0, ror r4

00015dd0 <free_node_id@@Base>:
   15dd0:	strd	r4, [sp, #-16]!
   15dd4:	mov	r5, r0
   15dd8:	ldr	r0, [r0, #4]
   15ddc:	str	r6, [sp, #8]
   15de0:	str	lr, [sp, #12]
   15de4:	cmp	r0, #0
   15de8:	beq	15e40 <free_node_id@@Base+0x70>
   15dec:	ldr	r4, [pc, #112]	; 15e64 <free_node_id@@Base+0x94>
   15df0:	add	r4, pc, r4
   15df4:	ldr	r3, [r4, #392]	; 0x188
   15df8:	ldr	r2, [r4, #396]	; 0x18c
   15dfc:	adds	r3, r3, #1
   15e00:	adc	r2, r2, #0
   15e04:	str	r3, [r4, #392]	; 0x188
   15e08:	str	r2, [r4, #396]	; 0x18c
   15e0c:	bl	1587c <free_node@@Base>
   15e10:	ldr	r3, [r4, #408]	; 0x198
   15e14:	ldr	r2, [r4, #412]	; 0x19c
   15e18:	adds	r3, r3, #1
   15e1c:	adc	r2, r2, #0
   15e20:	str	r3, [r4, #408]	; 0x198
   15e24:	str	r2, [r4, #412]	; 0x19c
   15e28:	mov	r0, r5
   15e2c:	ldrd	r4, [sp]
   15e30:	ldr	r6, [sp, #8]
   15e34:	ldr	lr, [sp, #12]
   15e38:	add	sp, sp, #16
   15e3c:	b	1184c <free@plt>
   15e40:	ldr	r3, [pc, #32]	; 15e68 <free_node_id@@Base+0x98>
   15e44:	add	r3, pc, r3
   15e48:	ldr	r2, [r3, #400]	; 0x190
   15e4c:	ldr	r1, [r3, #404]	; 0x194
   15e50:	adds	r2, r2, #1
   15e54:	adc	r1, r1, #0
   15e58:	str	r2, [r3, #400]	; 0x190
   15e5c:	str	r1, [r3, #404]	; 0x194
   15e60:	b	15e28 <free_node_id@@Base+0x58>
   15e64:	andeq	r6, r1, r8, lsr #8
   15e68:	ldrdeq	r6, [r1], -r4

00015e6c <get_boolean_op_value@@Base>:
   15e6c:	strd	r4, [sp, #-16]!
   15e70:	mov	r1, #2
   15e74:	ldr	r5, [r0, #4]
   15e78:	str	r6, [sp, #8]
   15e7c:	ldr	r6, [pc, #772]	; 16188 <get_boolean_op_value@@Base+0x31c>
   15e80:	str	lr, [sp, #12]
   15e84:	mov	r0, r5
   15e88:	bl	11948 <strnlen@plt>
   15e8c:	cmp	r0, #2
   15e90:	add	r6, pc, r6
   15e94:	beq	15f9c <get_boolean_op_value@@Base+0x130>
   15e98:	ldrb	r3, [r5]
   15e9c:	cmp	r3, #60	; 0x3c
   15ea0:	beq	15f74 <get_boolean_op_value@@Base+0x108>
   15ea4:	cmp	r3, #62	; 0x3e
   15ea8:	beq	15f4c <get_boolean_op_value@@Base+0xe0>
   15eac:	cmp	r3, #33	; 0x21
   15eb0:	beq	15f14 <get_boolean_op_value@@Base+0xa8>
   15eb4:	ldr	r4, [pc, #720]	; 1618c <get_boolean_op_value@@Base+0x320>
   15eb8:	mov	r2, r5
   15ebc:	ldr	r0, [pc, #716]	; 16190 <get_boolean_op_value@@Base+0x324>
   15ec0:	ldr	r1, [pc, #716]	; 16194 <get_boolean_op_value@@Base+0x328>
   15ec4:	add	r4, pc, r4
   15ec8:	add	r4, r4, #416	; 0x1a0
   15ecc:	ldr	r3, [r4, #64]	; 0x40
   15ed0:	ldr	ip, [r4, #68]	; 0x44
   15ed4:	add	r1, pc, r1
   15ed8:	adds	r3, r3, #1
   15edc:	adc	ip, ip, #0
   15ee0:	str	r3, [r4, #64]	; 0x40
   15ee4:	str	ip, [r4, #68]	; 0x44
   15ee8:	ldr	r3, [r6, r0]
   15eec:	ldr	r0, [r3]
   15ef0:	bl	11900 <fprintf@plt>
   15ef4:	ldr	r3, [r4, #96]	; 0x60
   15ef8:	mov	r0, #1
   15efc:	ldr	r2, [r4, #100]	; 0x64
   15f00:	adds	r3, r3, r0
   15f04:	adc	r2, r2, #0
   15f08:	str	r3, [r4, #96]	; 0x60
   15f0c:	str	r2, [r4, #100]	; 0x64
   15f10:	bl	118e8 <exit@plt>
   15f14:	ldr	r3, [pc, #636]	; 16198 <get_boolean_op_value@@Base+0x32c>
   15f18:	mov	r4, #8
   15f1c:	add	r3, pc, r3
   15f20:	ldr	r2, [r3, #488]	; 0x1e8
   15f24:	ldr	r1, [r3, #492]	; 0x1ec
   15f28:	adds	r2, r2, #1
   15f2c:	adc	r1, r1, #0
   15f30:	str	r2, [r3, #488]	; 0x1e8
   15f34:	str	r1, [r3, #492]	; 0x1ec
   15f38:	mov	r0, r4
   15f3c:	ldrd	r4, [sp]
   15f40:	ldr	r6, [sp, #8]
   15f44:	add	sp, sp, #12
   15f48:	pop	{pc}		; (ldr pc, [sp], #4)
   15f4c:	ldr	r3, [pc, #584]	; 1619c <get_boolean_op_value@@Base+0x330>
   15f50:	mov	r4, #7
   15f54:	add	r3, pc, r3
   15f58:	ldr	r2, [r3, #504]	; 0x1f8
   15f5c:	ldr	r1, [r3, #508]	; 0x1fc
   15f60:	adds	r2, r2, #1
   15f64:	adc	r1, r1, #0
   15f68:	str	r2, [r3, #504]	; 0x1f8
   15f6c:	str	r1, [r3, #508]	; 0x1fc
   15f70:	b	15f38 <get_boolean_op_value@@Base+0xcc>
   15f74:	ldr	r3, [pc, #548]	; 161a0 <get_boolean_op_value@@Base+0x334>
   15f78:	mov	r4, #6
   15f7c:	add	r3, pc, r3
   15f80:	ldr	r2, [r3, #496]	; 0x1f0
   15f84:	ldr	r1, [r3, #500]	; 0x1f4
   15f88:	adds	r2, r2, #1
   15f8c:	adc	r1, r1, #0
   15f90:	str	r2, [r3, #496]	; 0x1f0
   15f94:	str	r1, [r3, #500]	; 0x1f4
   15f98:	b	15f38 <get_boolean_op_value@@Base+0xcc>
   15f9c:	ldr	r1, [pc, #512]	; 161a4 <get_boolean_op_value@@Base+0x338>
   15fa0:	mov	r2, r0
   15fa4:	mov	r4, r0
   15fa8:	mov	r0, r5
   15fac:	add	r1, pc, r1
   15fb0:	bl	11990 <strncmp@plt>
   15fb4:	cmp	r0, #0
   15fb8:	beq	160ec <get_boolean_op_value@@Base+0x280>
   15fbc:	ldr	r1, [pc, #484]	; 161a8 <get_boolean_op_value@@Base+0x33c>
   15fc0:	mov	r2, r4
   15fc4:	mov	r0, r5
   15fc8:	add	r1, pc, r1
   15fcc:	bl	11990 <strncmp@plt>
   15fd0:	cmp	r0, #0
   15fd4:	beq	160c4 <get_boolean_op_value@@Base+0x258>
   15fd8:	ldr	r1, [pc, #460]	; 161ac <get_boolean_op_value@@Base+0x340>
   15fdc:	mov	r2, r4
   15fe0:	mov	r0, r5
   15fe4:	add	r1, pc, r1
   15fe8:	bl	11990 <strncmp@plt>
   15fec:	cmp	r0, #0
   15ff0:	beq	16114 <get_boolean_op_value@@Base+0x2a8>
   15ff4:	ldr	r1, [pc, #436]	; 161b0 <get_boolean_op_value@@Base+0x344>
   15ff8:	mov	r2, r4
   15ffc:	mov	r0, r5
   16000:	add	r1, pc, r1
   16004:	bl	11990 <strncmp@plt>
   16008:	cmp	r0, #0
   1600c:	beq	16138 <get_boolean_op_value@@Base+0x2cc>
   16010:	ldr	r1, [pc, #412]	; 161b4 <get_boolean_op_value@@Base+0x348>
   16014:	mov	r2, r4
   16018:	mov	r0, r5
   1601c:	add	r1, pc, r1
   16020:	bl	11990 <strncmp@plt>
   16024:	cmp	r0, #0
   16028:	beq	16160 <get_boolean_op_value@@Base+0x2f4>
   1602c:	ldr	r3, [pc, #388]	; 161b8 <get_boolean_op_value@@Base+0x34c>
   16030:	mov	r2, r4
   16034:	mov	r0, r5
   16038:	ldr	r1, [pc, #380]	; 161bc <get_boolean_op_value@@Base+0x350>
   1603c:	add	r3, pc, r3
   16040:	add	r4, r3, #416	; 0x1a0
   16044:	ldr	r3, [r4, #40]	; 0x28
   16048:	add	r1, pc, r1
   1604c:	ldr	ip, [r4, #44]	; 0x2c
   16050:	adds	r3, r3, #1
   16054:	adc	ip, ip, #0
   16058:	str	r3, [r4, #40]	; 0x28
   1605c:	str	ip, [r4, #44]	; 0x2c
   16060:	bl	11990 <strncmp@plt>
   16064:	cmp	r0, #0
   16068:	moveq	r4, #5
   1606c:	beq	15f38 <get_boolean_op_value@@Base+0xcc>
   16070:	ldr	r3, [r4, #48]	; 0x30
   16074:	mov	r2, r5
   16078:	ldr	ip, [r4, #52]	; 0x34
   1607c:	ldr	r0, [pc, #268]	; 16190 <get_boolean_op_value@@Base+0x324>
   16080:	adds	r3, r3, #1
   16084:	ldr	r1, [pc, #308]	; 161c0 <get_boolean_op_value@@Base+0x354>
   16088:	adc	ip, ip, #0
   1608c:	str	r3, [r4, #48]	; 0x30
   16090:	str	ip, [r4, #52]	; 0x34
   16094:	ldr	r3, [r6, r0]
   16098:	add	r1, pc, r1
   1609c:	ldr	r0, [r3]
   160a0:	bl	11900 <fprintf@plt>
   160a4:	ldr	r3, [r4, #56]	; 0x38
   160a8:	mov	r0, #1
   160ac:	ldr	r2, [r4, #60]	; 0x3c
   160b0:	adds	r3, r3, r0
   160b4:	adc	r2, r2, #0
   160b8:	str	r3, [r4, #56]	; 0x38
   160bc:	str	r2, [r4, #60]	; 0x3c
   160c0:	bl	118e8 <exit@plt>
   160c4:	ldr	r3, [pc, #248]	; 161c4 <get_boolean_op_value@@Base+0x358>
   160c8:	mov	r4, #1
   160cc:	add	r3, pc, r3
   160d0:	ldr	r2, [r3, #424]	; 0x1a8
   160d4:	ldr	r1, [r3, #428]	; 0x1ac
   160d8:	adds	r2, r2, r4
   160dc:	adc	r1, r1, #0
   160e0:	str	r2, [r3, #424]	; 0x1a8
   160e4:	str	r1, [r3, #428]	; 0x1ac
   160e8:	b	15f38 <get_boolean_op_value@@Base+0xcc>
   160ec:	ldr	r3, [pc, #212]	; 161c8 <get_boolean_op_value@@Base+0x35c>
   160f0:	mov	r4, r0
   160f4:	add	r3, pc, r3
   160f8:	ldr	r2, [r3, #416]	; 0x1a0
   160fc:	ldr	r1, [r3, #420]	; 0x1a4
   16100:	adds	r2, r2, #1
   16104:	adc	r1, r1, #0
   16108:	str	r2, [r3, #416]	; 0x1a0
   1610c:	str	r1, [r3, #420]	; 0x1a4
   16110:	b	15f38 <get_boolean_op_value@@Base+0xcc>
   16114:	ldr	r3, [pc, #176]	; 161cc <get_boolean_op_value@@Base+0x360>
   16118:	add	r3, pc, r3
   1611c:	ldr	r2, [r3, #432]	; 0x1b0
   16120:	ldr	r1, [r3, #436]	; 0x1b4
   16124:	adds	r2, r2, #1
   16128:	adc	r1, r1, #0
   1612c:	str	r2, [r3, #432]	; 0x1b0
   16130:	str	r1, [r3, #436]	; 0x1b4
   16134:	b	15f38 <get_boolean_op_value@@Base+0xcc>
   16138:	ldr	r3, [pc, #144]	; 161d0 <get_boolean_op_value@@Base+0x364>
   1613c:	mov	r4, #3
   16140:	add	r3, pc, r3
   16144:	ldr	r2, [r3, #440]	; 0x1b8
   16148:	ldr	r1, [r3, #444]	; 0x1bc
   1614c:	adds	r2, r2, #1
   16150:	adc	r1, r1, #0
   16154:	str	r2, [r3, #440]	; 0x1b8
   16158:	str	r1, [r3, #444]	; 0x1bc
   1615c:	b	15f38 <get_boolean_op_value@@Base+0xcc>
   16160:	ldr	r3, [pc, #108]	; 161d4 <get_boolean_op_value@@Base+0x368>
   16164:	mov	r4, #4
   16168:	add	r3, pc, r3
   1616c:	ldr	r2, [r3, #448]	; 0x1c0
   16170:	ldr	r1, [r3, #452]	; 0x1c4
   16174:	adds	r2, r2, #1
   16178:	adc	r1, r1, #0
   1617c:	str	r2, [r3, #448]	; 0x1c0
   16180:	str	r1, [r3, #452]	; 0x1c4
   16184:	b	15f38 <get_boolean_op_value@@Base+0xcc>
   16188:	andeq	r5, r1, r8, ror #2
   1618c:	andeq	r6, r1, r4, asr r3
   16190:	andeq	r0, r0, r0, lsr #1
   16194:	andeq	r4, r0, r4, lsl r0
   16198:	strdeq	r6, [r1], -ip
   1619c:	andeq	r6, r1, r4, asr #5
   161a0:	muleq	r1, ip, r2
   161a4:	andeq	r3, r0, r4, lsr #30
   161a8:	andeq	r3, r0, ip, lsl #30
   161ac:	strdeq	r3, [r0], -r4
   161b0:	ldrdeq	r3, [r0], -ip
   161b4:	andeq	r3, r0, r4, asr #29
   161b8:	ldrdeq	r6, [r1], -ip
   161bc:	muleq	r0, ip, lr
   161c0:	andeq	r3, r0, r0, asr lr
   161c4:	andeq	r6, r1, ip, asr #2
   161c8:	andeq	r6, r1, r4, lsr #2
   161cc:	andeq	r6, r1, r0, lsl #2
   161d0:	ldrdeq	r6, [r1], -r8
   161d4:	strheq	r6, [r1], -r0

000161d8 <init_grammar@@Base>:
   161d8:	ldr	r2, [pc, #32]	; 16200 <init_grammar@@Base+0x28>
   161dc:	str	r1, [r0]
   161e0:	add	r2, pc, r2
   161e4:	ldr	r3, [r2]
   161e8:	ldr	r1, [r2, #4]
   161ec:	adds	r3, r3, #1
   161f0:	adc	r1, r1, #0
   161f4:	str	r3, [r2]
   161f8:	str	r1, [r2, #4]
   161fc:	bx	lr
   16200:	andeq	r6, r1, r0, asr #4

00016204 <destroy_grammar@@Base>:
   16204:	ldr	r2, [pc, #28]	; 16228 <destroy_grammar@@Base+0x24>
   16208:	add	r2, pc, r2
   1620c:	ldr	r3, [r2, #8]
   16210:	ldr	r1, [r2, #12]
   16214:	adds	r3, r3, #1
   16218:	adc	r1, r1, #0
   1621c:	str	r3, [r2, #8]
   16220:	str	r1, [r2, #12]
   16224:	bx	lr
   16228:	andeq	r6, r1, r8, lsl r2

0001622c <read_return_expression@@Base>:
   1622c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16230:	mov	r5, r0
   16234:	ldr	r4, [pc, #364]	; 163a8 <read_return_expression@@Base+0x17c>
   16238:	ldr	r0, [r0]
   1623c:	add	r4, pc, r4
   16240:	ldr	r3, [r4, #16]
   16244:	ldr	r2, [r4, #20]
   16248:	strd	r6, [sp, #8]
   1624c:	str	r8, [sp, #16]
   16250:	adds	r3, r3, #1
   16254:	str	lr, [sp, #20]
   16258:	adc	r2, r2, #0
   1625c:	str	r3, [r4, #16]
   16260:	str	r2, [r4, #20]
   16264:	bl	12358 <next@@Base>
   16268:	ldr	r3, [r0]
   1626c:	cmp	r3, #1
   16270:	bne	16388 <read_return_expression@@Base+0x15c>
   16274:	ldr	r3, [r4, #32]
   16278:	mov	r6, r0
   1627c:	mov	r0, #12
   16280:	ldr	r2, [r4, #36]	; 0x24
   16284:	adds	r3, r3, #1
   16288:	adc	r2, r2, #0
   1628c:	str	r3, [r4, #32]
   16290:	str	r2, [r4, #36]	; 0x24
   16294:	bl	118b8 <malloc@plt>
   16298:	ldr	r1, [r6, #4]
   1629c:	mov	r7, r0
   162a0:	bl	15530 <init_node_int@@Base>
   162a4:	ldr	r3, [r4, #40]	; 0x28
   162a8:	mov	r0, r6
   162ac:	ldr	r2, [r4, #44]	; 0x2c
   162b0:	adds	r3, r3, #1
   162b4:	adc	r2, r2, #0
   162b8:	str	r3, [r4, #40]	; 0x28
   162bc:	str	r2, [r4, #44]	; 0x2c
   162c0:	bl	1520c <free_token_int_value@@Base>
   162c4:	ldr	r3, [r4, #48]	; 0x30
   162c8:	mov	r0, #12
   162cc:	ldr	r2, [r4, #52]	; 0x34
   162d0:	adds	r3, r3, #1
   162d4:	adc	r2, r2, #0
   162d8:	str	r3, [r4, #48]	; 0x30
   162dc:	str	r2, [r4, #52]	; 0x34
   162e0:	bl	118b8 <malloc@plt>
   162e4:	mov	r1, r7
   162e8:	mov	r6, r0
   162ec:	bl	15618 <init_node_return@@Base>
   162f0:	ldr	r3, [r4, #56]	; 0x38
   162f4:	ldr	r2, [r4, #60]	; 0x3c
   162f8:	ldr	r0, [r5]
   162fc:	adds	r3, r3, #1
   16300:	adc	r2, r2, #0
   16304:	str	r3, [r4, #56]	; 0x38
   16308:	str	r2, [r4, #60]	; 0x3c
   1630c:	bl	12358 <next@@Base>
   16310:	ldr	r3, [r0]
   16314:	cmp	r3, #8
   16318:	bne	16368 <read_return_expression@@Base+0x13c>
   1631c:	ldr	r3, [r4, #72]	; 0x48
   16320:	ldr	r2, [r4, #76]	; 0x4c
   16324:	adds	r3, r3, #1
   16328:	adc	r2, r2, #0
   1632c:	str	r3, [r4, #72]	; 0x48
   16330:	str	r2, [r4, #76]	; 0x4c
   16334:	bl	15324 <free_token_semicolon@@Base>
   16338:	ldr	r3, [r4, #80]	; 0x50
   1633c:	ldr	r2, [r4, #84]	; 0x54
   16340:	adds	r3, r3, #1
   16344:	adc	r2, r2, #0
   16348:	str	r3, [r4, #80]	; 0x50
   1634c:	str	r2, [r4, #84]	; 0x54
   16350:	mov	r0, r6
   16354:	ldrd	r4, [sp]
   16358:	ldrd	r6, [sp, #8]
   1635c:	ldr	r8, [sp, #16]
   16360:	add	sp, sp, #20
   16364:	pop	{pc}		; (ldr pc, [sp], #4)
   16368:	ldr	r3, [r4, #64]	; 0x40
   1636c:	mov	r6, #0
   16370:	ldr	r2, [r4, #68]	; 0x44
   16374:	adds	r3, r3, #1
   16378:	adc	r2, r2, r6
   1637c:	str	r3, [r4, #64]	; 0x40
   16380:	str	r2, [r4, #68]	; 0x44
   16384:	b	16350 <read_return_expression@@Base+0x124>
   16388:	ldr	r3, [r4, #24]
   1638c:	mov	r6, #0
   16390:	ldr	r2, [r4, #28]
   16394:	adds	r3, r3, #1
   16398:	adc	r2, r2, r6
   1639c:	str	r3, [r4, #24]
   163a0:	str	r2, [r4, #28]
   163a4:	b	16350 <read_return_expression@@Base+0x124>
   163a8:	andeq	r6, r1, r4, ror #3

000163ac <read_boolean_unary_expression@@Base>:
   163ac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   163b0:	mov	r5, r0
   163b4:	mov	r0, #20
   163b8:	ldr	r4, [pc, #484]	; 165a4 <read_boolean_unary_expression@@Base+0x1f8>
   163bc:	add	r4, pc, r4
   163c0:	ldr	r3, [r4, #88]	; 0x58
   163c4:	ldr	r2, [r4, #92]	; 0x5c
   163c8:	strd	r6, [sp, #8]
   163cc:	strd	r8, [sp, #16]
   163d0:	adds	r3, r3, #1
   163d4:	str	sl, [sp, #24]
   163d8:	str	lr, [sp, #28]
   163dc:	adc	r2, r2, #0
   163e0:	str	r3, [r4, #88]	; 0x58
   163e4:	str	r2, [r4, #92]	; 0x5c
   163e8:	bl	118b8 <malloc@plt>
   163ec:	mov	r6, r0
   163f0:	ldr	r0, [r5]
   163f4:	bl	12358 <next@@Base>
   163f8:	ldr	r8, [r0]
   163fc:	cmp	r8, #12
   16400:	bne	16524 <read_boolean_unary_expression@@Base+0x178>
   16404:	ldr	r3, [r4, #104]	; 0x68
   16408:	mov	r9, r0
   1640c:	ldr	r2, [r4, #108]	; 0x6c
   16410:	adds	r3, r3, #1
   16414:	adc	r2, r2, #0
   16418:	str	r3, [r4, #104]	; 0x68
   1641c:	str	r2, [r4, #108]	; 0x6c
   16420:	bl	15e6c <get_boolean_op_value@@Base>
   16424:	ldr	r3, [r4, #120]	; 0x78
   16428:	mov	r7, r0
   1642c:	mov	r0, r9
   16430:	ldr	r2, [r4, #124]	; 0x7c
   16434:	adds	r3, r3, #1
   16438:	adc	r2, r2, #0
   1643c:	str	r3, [r4, #120]	; 0x78
   16440:	str	r2, [r4, #124]	; 0x7c
   16444:	bl	153c4 <free_token_boolean_op@@Base>
   16448:	ldr	r3, [r4, #128]	; 0x80
   1644c:	ldr	r2, [r4, #132]	; 0x84
   16450:	ldr	r0, [r5]
   16454:	adds	r3, r3, #1
   16458:	adc	r2, r2, #0
   1645c:	str	r3, [r4, #128]	; 0x80
   16460:	str	r2, [r4, #132]	; 0x84
   16464:	bl	12358 <next@@Base>
   16468:	ldr	r3, [r0]
   1646c:	mov	r5, r0
   16470:	cmp	r3, #1
   16474:	bne	16564 <read_boolean_unary_expression@@Base+0x1b8>
   16478:	ldr	r3, [r4, #144]	; 0x90
   1647c:	mov	r0, r8
   16480:	ldr	r2, [r4, #148]	; 0x94
   16484:	adds	r3, r3, #1
   16488:	adc	r2, r2, #0
   1648c:	str	r3, [r4, #144]	; 0x90
   16490:	str	r2, [r4, #148]	; 0x94
   16494:	bl	118b8 <malloc@plt>
   16498:	ldr	r1, [r5, #4]
   1649c:	mov	r8, r0
   164a0:	bl	15530 <init_node_int@@Base>
   164a4:	ldr	r3, [r4, #160]	; 0xa0
   164a8:	mov	r0, r5
   164ac:	ldr	r1, [r4, #164]	; 0xa4
   164b0:	adds	r3, r3, #1
   164b4:	adc	r1, r1, #0
   164b8:	str	r3, [r4, #160]	; 0xa0
   164bc:	str	r1, [r4, #164]	; 0xa4
   164c0:	bl	1520c <free_token_int_value@@Base>
   164c4:	ldr	ip, [r4, #168]	; 0xa8
   164c8:	mov	r3, #0
   164cc:	mov	r2, r8
   164d0:	mov	r1, r7
   164d4:	mov	r0, r6
   164d8:	ldr	lr, [r4, #172]	; 0xac
   164dc:	adds	ip, ip, #1
   164e0:	adc	lr, lr, r3
   164e4:	str	ip, [r4, #168]	; 0xa8
   164e8:	str	lr, [r4, #172]	; 0xac
   164ec:	bl	15708 <init_node_boolean_operator@@Base>
   164f0:	ldr	r3, [r4, #176]	; 0xb0
   164f4:	ldr	r2, [r4, #180]	; 0xb4
   164f8:	adds	r3, r3, #1
   164fc:	adc	r2, r2, #0
   16500:	str	r3, [r4, #176]	; 0xb0
   16504:	str	r2, [r4, #180]	; 0xb4
   16508:	mov	r0, r6
   1650c:	ldrd	r4, [sp]
   16510:	ldrd	r6, [sp, #8]
   16514:	ldrd	r8, [sp, #16]
   16518:	ldr	sl, [sp, #24]
   1651c:	add	sp, sp, #28
   16520:	pop	{pc}		; (ldr pc, [sp], #4)
   16524:	ldr	r3, [r4, #96]	; 0x60
   16528:	mov	r0, r6
   1652c:	mov	r6, #0
   16530:	ldr	r2, [r4, #100]	; 0x64
   16534:	adds	r3, r3, #1
   16538:	adc	r2, r2, r6
   1653c:	str	r3, [r4, #96]	; 0x60
   16540:	str	r2, [r4, #100]	; 0x64
   16544:	bl	15794 <free_node_boolean_operator@@Base>
   16548:	ldr	r3, [r4, #112]	; 0x70
   1654c:	ldr	r2, [r4, #116]	; 0x74
   16550:	adds	r3, r3, #1
   16554:	adc	r2, r2, r6
   16558:	str	r3, [r4, #112]	; 0x70
   1655c:	str	r2, [r4, #116]	; 0x74
   16560:	b	16508 <read_boolean_unary_expression@@Base+0x15c>
   16564:	ldr	r3, [r4, #136]	; 0x88
   16568:	mov	r0, r6
   1656c:	mov	r6, #0
   16570:	ldr	r2, [r4, #140]	; 0x8c
   16574:	adds	r3, r3, #1
   16578:	adc	r2, r2, r6
   1657c:	str	r3, [r4, #136]	; 0x88
   16580:	str	r2, [r4, #140]	; 0x8c
   16584:	bl	15794 <free_node_boolean_operator@@Base>
   16588:	ldr	r3, [r4, #152]	; 0x98
   1658c:	ldr	r2, [r4, #156]	; 0x9c
   16590:	adds	r3, r3, #1
   16594:	adc	r2, r2, r6
   16598:	str	r3, [r4, #152]	; 0x98
   1659c:	str	r2, [r4, #156]	; 0x9c
   165a0:	b	16508 <read_boolean_unary_expression@@Base+0x15c>
   165a4:	andeq	r6, r1, r4, rrx

000165a8 <read_boolean_binary_expression@@Base>:
   165a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   165ac:	mov	r5, r0
   165b0:	ldr	r4, [pc, #748]	; 168a4 <read_boolean_binary_expression@@Base+0x2fc>
   165b4:	ldr	r0, [r0]
   165b8:	add	r4, pc, r4
   165bc:	ldr	r3, [r4, #184]	; 0xb8
   165c0:	ldr	r2, [r4, #188]	; 0xbc
   165c4:	strd	r6, [sp, #8]
   165c8:	strd	r8, [sp, #16]
   165cc:	adds	r3, r3, #1
   165d0:	str	sl, [sp, #24]
   165d4:	str	lr, [sp, #28]
   165d8:	adc	r2, r2, #0
   165dc:	str	r3, [r4, #184]	; 0xb8
   165e0:	str	r2, [r4, #188]	; 0xbc
   165e4:	bl	12358 <next@@Base>
   165e8:	ldr	r1, [r0]
   165ec:	mov	r6, r0
   165f0:	cmp	r1, #1
   165f4:	beq	1669c <read_boolean_binary_expression@@Base+0xf4>
   165f8:	ldr	r3, [r4, #192]	; 0xc0
   165fc:	ldr	r2, [r4, #196]	; 0xc4
   16600:	adds	r3, r3, #1
   16604:	adc	r2, r2, #0
   16608:	cmp	r1, #12
   1660c:	str	r3, [r4, #192]	; 0xc0
   16610:	movne	r5, #0
   16614:	str	r2, [r4, #196]	; 0xc4
   16618:	beq	16638 <read_boolean_binary_expression@@Base+0x90>
   1661c:	mov	r0, r5
   16620:	ldrd	r4, [sp]
   16624:	ldrd	r6, [sp, #8]
   16628:	ldrd	r8, [sp, #16]
   1662c:	ldr	sl, [sp, #24]
   16630:	add	sp, sp, #28
   16634:	pop	{pc}		; (ldr pc, [sp], #4)
   16638:	ldr	r3, [r4, #208]	; 0xd0
   1663c:	mov	r1, r0
   16640:	ldr	r2, [r4, #212]	; 0xd4
   16644:	ldr	r0, [r5]
   16648:	adds	r3, r3, #1
   1664c:	adc	r2, r2, #0
   16650:	str	r3, [r4, #208]	; 0xd0
   16654:	str	r2, [r4, #212]	; 0xd4
   16658:	bl	12564 <push_back@@Base>
   1665c:	ldr	r3, [r4, #216]	; 0xd8
   16660:	mov	r0, r5
   16664:	ldr	r2, [r4, #220]	; 0xdc
   16668:	adds	r3, r3, #1
   1666c:	adc	r2, r2, #0
   16670:	str	r3, [r4, #216]	; 0xd8
   16674:	str	r2, [r4, #220]	; 0xdc
   16678:	bl	163ac <read_boolean_unary_expression@@Base>
   1667c:	ldr	r3, [r4, #224]	; 0xe0
   16680:	mov	r5, r0
   16684:	ldr	r2, [r4, #228]	; 0xe4
   16688:	adds	r3, r3, #1
   1668c:	adc	r2, r2, #0
   16690:	str	r3, [r4, #224]	; 0xe0
   16694:	str	r2, [r4, #228]	; 0xe4
   16698:	b	1661c <read_boolean_binary_expression@@Base+0x74>
   1669c:	ldr	r3, [r4, #200]	; 0xc8
   166a0:	mov	r0, #12
   166a4:	ldr	r2, [r4, #204]	; 0xcc
   166a8:	adds	r3, r3, #1
   166ac:	adc	r2, r2, #0
   166b0:	str	r3, [r4, #200]	; 0xc8
   166b4:	str	r2, [r4, #204]	; 0xcc
   166b8:	bl	118b8 <malloc@plt>
   166bc:	ldr	r1, [r6, #4]
   166c0:	mov	r7, r0
   166c4:	bl	15530 <init_node_int@@Base>
   166c8:	ldr	r3, [r4, #232]	; 0xe8
   166cc:	mov	r0, r6
   166d0:	ldr	r2, [r4, #236]	; 0xec
   166d4:	adds	r3, r3, #1
   166d8:	adc	r2, r2, #0
   166dc:	str	r3, [r4, #232]	; 0xe8
   166e0:	str	r2, [r4, #236]	; 0xec
   166e4:	bl	1520c <free_token_int_value@@Base>
   166e8:	ldr	r3, [r4, #240]	; 0xf0
   166ec:	ldr	r2, [r4, #244]	; 0xf4
   166f0:	ldr	r0, [r5]
   166f4:	adds	r3, r3, #1
   166f8:	adc	r2, r2, #0
   166fc:	str	r3, [r4, #240]	; 0xf0
   16700:	str	r2, [r4, #244]	; 0xf4
   16704:	bl	12358 <next@@Base>
   16708:	ldr	r9, [r0]
   1670c:	mov	sl, r0
   16710:	cmp	r9, #12
   16714:	bne	16824 <read_boolean_binary_expression@@Base+0x27c>
   16718:	ldr	r3, [r4, #256]	; 0x100
   1671c:	ldr	r1, [r4, #260]	; 0x104
   16720:	adds	r3, r3, #1
   16724:	adc	r1, r1, #0
   16728:	str	r3, [r4, #256]	; 0x100
   1672c:	str	r1, [r4, #260]	; 0x104
   16730:	bl	15e6c <get_boolean_op_value@@Base>
   16734:	ldr	r3, [r4, #272]	; 0x110
   16738:	mov	r8, r0
   1673c:	mov	r0, sl
   16740:	ldr	r1, [r4, #276]	; 0x114
   16744:	adds	r3, r3, #1
   16748:	adc	r1, r1, #0
   1674c:	str	r3, [r4, #272]	; 0x110
   16750:	str	r1, [r4, #276]	; 0x114
   16754:	bl	153c4 <free_token_boolean_op@@Base>
   16758:	ldr	r3, [r4, #280]	; 0x118
   1675c:	ldr	r2, [r4, #284]	; 0x11c
   16760:	ldr	r0, [r5]
   16764:	adds	r3, r3, #1
   16768:	adc	r2, r2, #0
   1676c:	str	r3, [r4, #280]	; 0x118
   16770:	str	r2, [r4, #284]	; 0x11c
   16774:	bl	12358 <next@@Base>
   16778:	ldr	r3, [r0]
   1677c:	mov	sl, r0
   16780:	cmp	r3, #1
   16784:	bne	16864 <read_boolean_binary_expression@@Base+0x2bc>
   16788:	ldr	r3, [r4, #296]	; 0x128
   1678c:	mov	r0, r9
   16790:	ldr	r1, [r4, #300]	; 0x12c
   16794:	adds	r3, r3, #1
   16798:	adc	r1, r1, #0
   1679c:	str	r3, [r4, #296]	; 0x128
   167a0:	str	r1, [r4, #300]	; 0x12c
   167a4:	bl	118b8 <malloc@plt>
   167a8:	ldr	r1, [sl, #4]
   167ac:	mov	r6, r0
   167b0:	bl	15530 <init_node_int@@Base>
   167b4:	ldr	r2, [r4, #312]	; 0x138
   167b8:	mov	r0, sl
   167bc:	ldr	r3, [r4, #316]	; 0x13c
   167c0:	adds	r2, r2, #1
   167c4:	adc	r3, r3, #0
   167c8:	str	r2, [r4, #312]	; 0x138
   167cc:	str	r3, [r4, #316]	; 0x13c
   167d0:	bl	1520c <free_token_int_value@@Base>
   167d4:	ldr	r2, [r4, #320]	; 0x140
   167d8:	mov	r0, #20
   167dc:	ldr	r3, [r4, #324]	; 0x144
   167e0:	adds	r2, r2, #1
   167e4:	adc	r3, r3, #0
   167e8:	str	r2, [r4, #320]	; 0x140
   167ec:	str	r3, [r4, #324]	; 0x144
   167f0:	bl	118b8 <malloc@plt>
   167f4:	mov	r3, r6
   167f8:	mov	r2, r7
   167fc:	mov	r1, r8
   16800:	mov	r5, r0
   16804:	bl	15708 <init_node_boolean_operator@@Base>
   16808:	ldr	r3, [r4, #328]	; 0x148
   1680c:	ldr	r2, [r4, #332]	; 0x14c
   16810:	adds	r3, r3, #1
   16814:	adc	r2, r2, #0
   16818:	str	r3, [r4, #328]	; 0x148
   1681c:	str	r2, [r4, #332]	; 0x14c
   16820:	b	1661c <read_boolean_binary_expression@@Base+0x74>
   16824:	ldr	r3, [r4, #248]	; 0xf8
   16828:	mov	r5, #0
   1682c:	mov	r0, r7
   16830:	ldr	r2, [r4, #252]	; 0xfc
   16834:	adds	r3, r3, #1
   16838:	adc	r2, r2, r5
   1683c:	str	r3, [r4, #248]	; 0xf8
   16840:	str	r2, [r4, #252]	; 0xfc
   16844:	bl	1587c <free_node@@Base>
   16848:	ldr	r3, [r4, #264]	; 0x108
   1684c:	ldr	r2, [r4, #268]	; 0x10c
   16850:	adds	r3, r3, #1
   16854:	adc	r2, r2, r5
   16858:	str	r3, [r4, #264]	; 0x108
   1685c:	str	r2, [r4, #268]	; 0x10c
   16860:	b	1661c <read_boolean_binary_expression@@Base+0x74>
   16864:	ldr	r3, [r4, #288]	; 0x120
   16868:	mov	r5, #0
   1686c:	mov	r0, r7
   16870:	ldr	r2, [r4, #292]	; 0x124
   16874:	adds	r3, r3, #1
   16878:	adc	r2, r2, r5
   1687c:	str	r3, [r4, #288]	; 0x120
   16880:	str	r2, [r4, #292]	; 0x124
   16884:	bl	1587c <free_node@@Base>
   16888:	ldr	r3, [r4, #304]	; 0x130
   1688c:	ldr	r2, [r4, #308]	; 0x134
   16890:	adds	r3, r3, #1
   16894:	adc	r2, r2, r5
   16898:	str	r3, [r4, #304]	; 0x130
   1689c:	str	r2, [r4, #308]	; 0x134
   168a0:	b	1661c <read_boolean_binary_expression@@Base+0x74>
   168a4:	andeq	r5, r1, r8, ror #28

000168a8 <read_single_boolean_expression@@Base>:
   168a8:	cmp	r1, #0
   168ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   168b0:	strd	r6, [sp, #8]
   168b4:	str	r8, [sp, #16]
   168b8:	str	lr, [sp, #20]
   168bc:	beq	16968 <read_single_boolean_expression@@Base+0xc0>
   168c0:	mov	r6, r3
   168c4:	ldr	r3, [r2]
   168c8:	mov	r5, r2
   168cc:	cmp	r3, #0
   168d0:	beq	169ac <read_single_boolean_expression@@Base+0x104>
   168d4:	ldr	r4, [pc, #252]	; 169d8 <read_single_boolean_expression@@Base+0x130>
   168d8:	add	r4, pc, r4
   168dc:	ldr	r3, [r4, #352]	; 0x160
   168e0:	ldr	r2, [r4, #356]	; 0x164
   168e4:	adds	r3, r3, #1
   168e8:	adc	r2, r2, #0
   168ec:	str	r3, [r4, #352]	; 0x160
   168f0:	str	r2, [r4, #356]	; 0x164
   168f4:	bl	165a8 <read_boolean_binary_expression@@Base>
   168f8:	ldr	r2, [r4, #368]	; 0x170
   168fc:	mov	r8, r0
   16900:	mov	r0, #20
   16904:	ldr	ip, [r4, #372]	; 0x174
   16908:	adds	r2, r2, #1
   1690c:	adc	ip, ip, #0
   16910:	str	r2, [r4, #368]	; 0x170
   16914:	str	ip, [r4, #372]	; 0x174
   16918:	bl	118b8 <malloc@plt>
   1691c:	mov	r3, r8
   16920:	mov	r1, r6
   16924:	mov	r2, #0
   16928:	mov	r7, r0
   1692c:	bl	15708 <init_node_boolean_operator@@Base>
   16930:	ldr	r3, [r4, #376]	; 0x178
   16934:	mov	r1, #0
   16938:	ldr	r2, [r4, #380]	; 0x17c
   1693c:	str	r1, [r5]
   16940:	adds	r3, r3, #1
   16944:	adc	r2, r2, r1
   16948:	str	r3, [r4, #376]	; 0x178
   1694c:	str	r2, [r4, #380]	; 0x17c
   16950:	mov	r0, r7
   16954:	ldrd	r4, [sp]
   16958:	ldrd	r6, [sp, #8]
   1695c:	ldr	r8, [sp, #16]
   16960:	add	sp, sp, #20
   16964:	pop	{pc}		; (ldr pc, [sp], #4)
   16968:	ldr	r4, [pc, #108]	; 169dc <read_single_boolean_expression@@Base+0x134>
   1696c:	add	r4, pc, r4
   16970:	ldr	r3, [r4, #336]	; 0x150
   16974:	ldr	r2, [r4, #340]	; 0x154
   16978:	adds	r3, r3, #1
   1697c:	adc	r2, r2, #0
   16980:	str	r3, [r4, #336]	; 0x150
   16984:	str	r2, [r4, #340]	; 0x154
   16988:	bl	165a8 <read_boolean_binary_expression@@Base>
   1698c:	ldr	r3, [r4, #344]	; 0x158
   16990:	mov	r7, r0
   16994:	ldr	r2, [r4, #348]	; 0x15c
   16998:	adds	r3, r3, #1
   1699c:	adc	r2, r2, #0
   169a0:	str	r3, [r4, #344]	; 0x158
   169a4:	str	r2, [r4, #348]	; 0x15c
   169a8:	b	16950 <read_single_boolean_expression@@Base+0xa8>
   169ac:	ldr	r2, [pc, #44]	; 169e0 <read_single_boolean_expression@@Base+0x138>
   169b0:	ldr	r3, [r3, #4]
   169b4:	add	r2, pc, r2
   169b8:	add	r3, r2, #336	; 0x150
   169bc:	ldr	r2, [r3, #24]
   169c0:	ldr	r1, [r3, #28]
   169c4:	adds	r2, r2, #1
   169c8:	adc	r1, r1, #0
   169cc:	str	r2, [r3, #24]
   169d0:	str	r1, [r3, #28]
   169d4:	udf	#0
   169d8:	andeq	r5, r1, r8, asr #22
   169dc:			; <UNDEFINED> instruction: 0x00015ab4
   169e0:	andeq	r5, r1, ip, ror #20

000169e4 <read_boolean_expression@@Base>:
   169e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   169e8:	ldr	r4, [pc, #648]	; 16c78 <read_boolean_expression@@Base+0x294>
   169ec:	ldr	r3, [pc, #648]	; 16c7c <read_boolean_expression@@Base+0x298>
   169f0:	add	r4, pc, r4
   169f4:	ldr	r2, [r4, #396]	; 0x18c
   169f8:	add	r3, pc, r3
   169fc:	strd	r6, [sp, #8]
   16a00:	mov	r7, #0
   16a04:	strd	r8, [sp, #16]
   16a08:	mov	r6, r0
   16a0c:	strd	sl, [sp, #24]
   16a10:	str	lr, [sp, #32]
   16a14:	sub	sp, sp, #20
   16a18:	ldr	r0, [r0]
   16a1c:	str	r3, [sp, #4]
   16a20:	ldr	r3, [r4, #392]	; 0x188
   16a24:	str	r7, [sp, #12]
   16a28:	adds	r3, r3, #1
   16a2c:	adc	r2, r2, r7
   16a30:	str	r3, [r4, #392]	; 0x188
   16a34:	str	r2, [r4, #396]	; 0x18c
   16a38:	bl	12358 <next@@Base>
   16a3c:	ldr	r2, [r4, #400]	; 0x190
   16a40:	ldr	r1, [r4, #404]	; 0x194
   16a44:	ldr	r3, [r0]
   16a48:	adds	r2, r2, #1
   16a4c:	adc	r1, r1, r7
   16a50:	str	r2, [r4, #400]	; 0x190
   16a54:	cmp	r3, #4
   16a58:	str	r1, [r4, #404]	; 0x194
   16a5c:	beq	16c1c <read_boolean_expression@@Base+0x238>
   16a60:	ldr	r5, [pc, #536]	; 16c80 <read_boolean_expression@@Base+0x29c>
   16a64:	add	r9, sp, #12
   16a68:	ldr	r4, [pc, #532]	; 16c84 <read_boolean_expression@@Base+0x2a0>
   16a6c:	ldr	sl, [pc, #532]	; 16c88 <read_boolean_expression@@Base+0x2a4>
   16a70:	add	r5, pc, r5
   16a74:	add	r5, r5, #400	; 0x190
   16a78:	add	r4, pc, r4
   16a7c:	add	r4, r4, #400	; 0x190
   16a80:	add	sl, pc, sl
   16a84:	b	16adc <read_boolean_expression@@Base+0xf8>
   16a88:	ldr	r2, [sl, #432]	; 0x1b0
   16a8c:	ldr	r1, [sl, #436]	; 0x1b4
   16a90:	adds	r2, r2, #1
   16a94:	adc	r1, r1, #0
   16a98:	str	r2, [sl, #432]	; 0x1b0
   16a9c:	str	r1, [sl, #436]	; 0x1b4
   16aa0:	bl	15e6c <get_boolean_op_value@@Base>
   16aa4:	ldr	r2, [sl, #456]	; 0x1c8
   16aa8:	mov	r8, r0
   16aac:	mov	r0, #1
   16ab0:	ldr	r1, [sl, #460]	; 0x1cc
   16ab4:	str	r0, [sp, #12]
   16ab8:	adds	r2, r2, r0
   16abc:	adc	r1, r1, #0
   16ac0:	str	r2, [sl, #456]	; 0x1c8
   16ac4:	str	r1, [sl, #460]	; 0x1cc
   16ac8:	ldr	r0, [r6]
   16acc:	bl	12358 <next@@Base>
   16ad0:	ldr	r3, [r0]
   16ad4:	cmp	r3, #4
   16ad8:	beq	16c1c <read_boolean_expression@@Base+0x238>
   16adc:	cmp	r3, #3
   16ae0:	beq	16b60 <read_boolean_expression@@Base+0x17c>
   16ae4:	cmp	r3, #12
   16ae8:	beq	16a88 <read_boolean_expression@@Base+0xa4>
   16aec:	cmp	r3, #1
   16af0:	beq	16bac <read_boolean_expression@@Base+0x1c8>
   16af4:	ldr	r4, [pc, #400]	; 16c8c <read_boolean_expression@@Base+0x2a8>
   16af8:	mov	r1, #1
   16afc:	mov	r2, #33	; 0x21
   16b00:	ldr	r0, [pc, #392]	; 16c90 <read_boolean_expression@@Base+0x2ac>
   16b04:	add	r4, pc, r4
   16b08:	add	r4, r4, #400	; 0x190
   16b0c:	ldr	r3, [r4, #8]
   16b10:	ldr	ip, [r4, #12]
   16b14:	adds	r3, r3, r1
   16b18:	str	r3, [r4, #8]
   16b1c:	mov	r3, r0
   16b20:	adc	ip, ip, #0
   16b24:	ldr	r0, [sp, #4]
   16b28:	str	ip, [r4, #12]
   16b2c:	ldr	r3, [r0, r3]
   16b30:	ldr	r0, [pc, #348]	; 16c94 <read_boolean_expression@@Base+0x2b0>
   16b34:	ldr	r3, [r3]
   16b38:	add	r0, pc, r0
   16b3c:	bl	11870 <fwrite@plt>
   16b40:	ldr	r3, [r4, #72]	; 0x48
   16b44:	mov	r0, #1
   16b48:	ldr	r2, [r4, #76]	; 0x4c
   16b4c:	adds	r3, r3, r0
   16b50:	adc	r2, r2, #0
   16b54:	str	r3, [r4, #72]	; 0x48
   16b58:	str	r2, [r4, #76]	; 0x4c
   16b5c:	bl	118e8 <exit@plt>
   16b60:	ldr	ip, [r5, #24]
   16b64:	mov	r1, r7
   16b68:	mov	r3, r8
   16b6c:	mov	r2, r9
   16b70:	mov	r0, r6
   16b74:	ldr	lr, [r5, #28]
   16b78:	adds	ip, ip, #1
   16b7c:	adc	lr, lr, #0
   16b80:	str	ip, [r5, #24]
   16b84:	str	lr, [r5, #28]
   16b88:	bl	168a8 <read_single_boolean_expression@@Base>
   16b8c:	ldr	r3, [r5, #64]	; 0x40
   16b90:	mov	r7, r0
   16b94:	ldr	r2, [r5, #68]	; 0x44
   16b98:	adds	r3, r3, #1
   16b9c:	adc	r2, r2, #0
   16ba0:	str	r3, [r5, #64]	; 0x40
   16ba4:	str	r2, [r5, #68]	; 0x44
   16ba8:	b	16ac8 <read_boolean_expression@@Base+0xe4>
   16bac:	ldr	r3, [r4, #16]
   16bb0:	mov	r1, r0
   16bb4:	ldr	r2, [r4, #20]
   16bb8:	ldr	r0, [r6]
   16bbc:	adds	r3, r3, #1
   16bc0:	adc	r2, r2, #0
   16bc4:	str	r3, [r4, #16]
   16bc8:	str	r2, [r4, #20]
   16bcc:	bl	12564 <push_back@@Base>
   16bd0:	ldr	ip, [r4, #40]	; 0x28
   16bd4:	mov	r1, r7
   16bd8:	mov	r3, r8
   16bdc:	mov	r2, r9
   16be0:	mov	r0, r6
   16be4:	ldr	lr, [r4, #44]	; 0x2c
   16be8:	adds	ip, ip, #1
   16bec:	adc	lr, lr, #0
   16bf0:	str	ip, [r4, #40]	; 0x28
   16bf4:	str	lr, [r4, #44]	; 0x2c
   16bf8:	bl	168a8 <read_single_boolean_expression@@Base>
   16bfc:	ldr	r3, [r4, #48]	; 0x30
   16c00:	mov	r7, r0
   16c04:	ldr	r2, [r4, #52]	; 0x34
   16c08:	adds	r3, r3, #1
   16c0c:	adc	r2, r2, #0
   16c10:	str	r3, [r4, #48]	; 0x30
   16c14:	str	r2, [r4, #52]	; 0x34
   16c18:	b	16ac8 <read_boolean_expression@@Base+0xe4>
   16c1c:	ldr	r4, [pc, #116]	; 16c98 <read_boolean_expression@@Base+0x2b4>
   16c20:	add	r4, pc, r4
   16c24:	ldr	r3, [r4, #480]	; 0x1e0
   16c28:	ldr	r2, [r4, #484]	; 0x1e4
   16c2c:	adds	r3, r3, #1
   16c30:	adc	r2, r2, #0
   16c34:	str	r3, [r4, #480]	; 0x1e0
   16c38:	str	r2, [r4, #484]	; 0x1e4
   16c3c:	bl	15284 <free_token_cpar@@Base>
   16c40:	ldr	r3, [r4, #488]	; 0x1e8
   16c44:	mov	r0, r7
   16c48:	ldr	r2, [r4, #492]	; 0x1ec
   16c4c:	adds	r3, r3, #1
   16c50:	adc	r2, r2, #0
   16c54:	str	r3, [r4, #488]	; 0x1e8
   16c58:	str	r2, [r4, #492]	; 0x1ec
   16c5c:	add	sp, sp, #20
   16c60:	ldrd	r4, [sp]
   16c64:	ldrd	r6, [sp, #8]
   16c68:	ldrd	r8, [sp, #16]
   16c6c:	ldrd	sl, [sp, #24]
   16c70:	add	sp, sp, #32
   16c74:	pop	{pc}		; (ldr pc, [sp], #4)
   16c78:	andeq	r5, r1, r0, lsr sl
   16c7c:	andeq	r4, r1, r0, lsl #12
   16c80:			; <UNDEFINED> instruction: 0x000159b0
   16c84:	andeq	r5, r1, r8, lsr #19
   16c88:	andeq	r5, r1, r0, lsr #19
   16c8c:	andeq	r5, r1, ip, lsl r9
   16c90:	andeq	r0, r0, r0, lsr #1
   16c94:	andeq	r3, r0, r8, asr r4
   16c98:	andeq	r5, r1, r0, lsl #16

00016c9c <read_if_statement@@Base>:
   16c9c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16ca0:	mov	r5, r0
   16ca4:	ldr	r4, [pc, #476]	; 16e88 <read_if_statement@@Base+0x1ec>
   16ca8:	ldr	r0, [r0]
   16cac:	add	r4, pc, r4
   16cb0:	add	r4, r4, #496	; 0x1f0
   16cb4:	ldr	r3, [r4]
   16cb8:	ldr	r2, [r4, #4]
   16cbc:	strd	r6, [sp, #8]
   16cc0:	str	r8, [sp, #16]
   16cc4:	adds	r3, r3, #1
   16cc8:	str	lr, [sp, #20]
   16ccc:	adc	r2, r2, #0
   16cd0:	str	r3, [r4]
   16cd4:	str	r2, [r4, #4]
   16cd8:	bl	12358 <next@@Base>
   16cdc:	ldr	r3, [r0]
   16ce0:	cmp	r3, #3
   16ce4:	bne	16e0c <read_if_statement@@Base+0x170>
   16ce8:	ldr	r3, [r4, #16]
   16cec:	ldr	r2, [r4, #20]
   16cf0:	adds	r3, r3, #1
   16cf4:	adc	r2, r2, #0
   16cf8:	str	r3, [r4, #16]
   16cfc:	str	r2, [r4, #20]
   16d00:	bl	1525c <free_token_opar@@Base>
   16d04:	ldr	r3, [r4, #24]
   16d08:	mov	r0, r5
   16d0c:	ldr	r2, [r4, #28]
   16d10:	adds	r3, r3, #1
   16d14:	adc	r2, r2, #0
   16d18:	str	r3, [r4, #24]
   16d1c:	str	r2, [r4, #28]
   16d20:	bl	169e4 <read_boolean_expression@@Base>
   16d24:	ldr	r3, [r4, #32]
   16d28:	mov	r6, r0
   16d2c:	mov	r0, r5
   16d30:	ldr	r2, [r4, #36]	; 0x24
   16d34:	adds	r3, r3, #1
   16d38:	adc	r2, r2, #0
   16d3c:	str	r3, [r4, #32]
   16d40:	str	r2, [r4, #36]	; 0x24
   16d44:	bl	16e90 <read_body@@Base>
   16d48:	ldr	r3, [r4, #40]	; 0x28
   16d4c:	mov	r7, r0
   16d50:	ldr	r2, [r4, #44]	; 0x2c
   16d54:	ldr	r0, [r5]
   16d58:	adds	r3, r3, #1
   16d5c:	adc	r2, r2, #0
   16d60:	str	r3, [r4, #40]	; 0x28
   16d64:	str	r2, [r4, #44]	; 0x2c
   16d68:	bl	12358 <next@@Base>
   16d6c:	ldr	r3, [r0]
   16d70:	mov	r1, r0
   16d74:	cmp	r3, #11
   16d78:	beq	16e2c <read_if_statement@@Base+0x190>
   16d7c:	ldr	r3, [r4, #56]	; 0x38
   16d80:	mov	r8, #0
   16d84:	ldr	r2, [r4, #60]	; 0x3c
   16d88:	ldr	r0, [r5]
   16d8c:	adds	r3, r3, #1
   16d90:	adc	r2, r2, r8
   16d94:	str	r3, [r4, #56]	; 0x38
   16d98:	str	r2, [r4, #60]	; 0x3c
   16d9c:	bl	12564 <push_back@@Base>
   16da0:	ldr	r3, [r4, #80]	; 0x50
   16da4:	ldr	r2, [r4, #84]	; 0x54
   16da8:	adds	r3, r3, #1
   16dac:	adc	r2, r2, r8
   16db0:	str	r3, [r4, #80]	; 0x50
   16db4:	str	r2, [r4, #84]	; 0x54
   16db8:	mov	r0, #20
   16dbc:	bl	118b8 <malloc@plt>
   16dc0:	mov	r3, r8
   16dc4:	mov	r2, r7
   16dc8:	mov	r1, r6
   16dcc:	mov	r5, r0
   16dd0:	bl	15684 <init_node_if@@Base>
   16dd4:	ldr	r3, [pc, #176]	; 16e8c <read_if_statement@@Base+0x1f0>
   16dd8:	add	r3, pc, r3
   16ddc:	ldr	r2, [r3, #584]	; 0x248
   16de0:	ldr	r1, [r3, #588]	; 0x24c
   16de4:	adds	r2, r2, #1
   16de8:	adc	r1, r1, #0
   16dec:	str	r2, [r3, #584]	; 0x248
   16df0:	str	r1, [r3, #588]	; 0x24c
   16df4:	mov	r0, r5
   16df8:	ldrd	r4, [sp]
   16dfc:	ldrd	r6, [sp, #8]
   16e00:	ldr	r8, [sp, #16]
   16e04:	add	sp, sp, #20
   16e08:	pop	{pc}		; (ldr pc, [sp], #4)
   16e0c:	ldr	r3, [r4, #8]
   16e10:	mov	r5, #0
   16e14:	ldr	r2, [r4, #12]
   16e18:	adds	r3, r3, #1
   16e1c:	adc	r2, r2, r5
   16e20:	str	r3, [r4, #8]
   16e24:	str	r2, [r4, #12]
   16e28:	b	16df4 <read_if_statement@@Base+0x158>
   16e2c:	ldr	r3, [r4, #48]	; 0x30
   16e30:	ldr	r2, [r4, #52]	; 0x34
   16e34:	adds	r3, r3, #1
   16e38:	adc	r2, r2, #0
   16e3c:	str	r3, [r4, #48]	; 0x30
   16e40:	str	r2, [r4, #52]	; 0x34
   16e44:	bl	1539c <free_token_else@@Base>
   16e48:	ldr	r3, [r4, #64]	; 0x40
   16e4c:	mov	r0, r5
   16e50:	ldr	r2, [r4, #68]	; 0x44
   16e54:	adds	r3, r3, #1
   16e58:	adc	r2, r2, #0
   16e5c:	str	r3, [r4, #64]	; 0x40
   16e60:	str	r2, [r4, #68]	; 0x44
   16e64:	bl	16e90 <read_body@@Base>
   16e68:	ldr	r3, [r4, #72]	; 0x48
   16e6c:	mov	r8, r0
   16e70:	ldr	r2, [r4, #76]	; 0x4c
   16e74:	adds	r3, r3, #1
   16e78:	adc	r2, r2, #0
   16e7c:	str	r3, [r4, #72]	; 0x48
   16e80:	str	r2, [r4, #76]	; 0x4c
   16e84:	b	16db8 <read_if_statement@@Base+0x11c>
   16e88:	andeq	r5, r1, r4, ror r7
   16e8c:	andeq	r5, r1, r8, asr #12

00016e90 <read_body@@Base>:
   16e90:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16e94:	ldr	r4, [pc, #696]	; 17154 <read_body@@Base+0x2c4>
   16e98:	add	r4, pc, r4
   16e9c:	add	r4, r4, #592	; 0x250
   16ea0:	ldr	r3, [r4]
   16ea4:	ldr	r2, [r4, #4]
   16ea8:	strd	r6, [sp, #8]
   16eac:	mov	r6, r0
   16eb0:	ldr	r0, [r0]
   16eb4:	adds	r3, r3, #1
   16eb8:	strd	r8, [sp, #16]
   16ebc:	str	sl, [sp, #24]
   16ec0:	adc	r2, r2, #0
   16ec4:	str	lr, [sp, #28]
   16ec8:	str	r3, [r4]
   16ecc:	str	r2, [r4, #4]
   16ed0:	bl	12358 <next@@Base>
   16ed4:	ldr	r3, [r0]
   16ed8:	cmp	r3, #5
   16edc:	bne	1712c <read_body@@Base+0x29c>
   16ee0:	ldr	r3, [r4, #16]
   16ee4:	ldr	r2, [r4, #20]
   16ee8:	adds	r3, r3, #1
   16eec:	adc	r2, r2, #0
   16ef0:	str	r3, [r4, #16]
   16ef4:	str	r2, [r4, #20]
   16ef8:	bl	152ac <free_token_obra@@Base>
   16efc:	ldr	r3, [r4, #24]
   16f00:	ldr	r2, [r4, #28]
   16f04:	ldr	r0, [r6]
   16f08:	adds	r3, r3, #1
   16f0c:	adc	r2, r2, #0
   16f10:	str	r3, [r4, #24]
   16f14:	str	r2, [r4, #28]
   16f18:	bl	12358 <next@@Base>
   16f1c:	ldr	r2, [r4, #32]
   16f20:	mov	r1, r0
   16f24:	ldr	r3, [r0]
   16f28:	ldr	r0, [r4, #36]	; 0x24
   16f2c:	adds	r2, r2, #1
   16f30:	str	r2, [r4, #32]
   16f34:	adc	r0, r0, #0
   16f38:	cmp	r3, #6
   16f3c:	str	r0, [r4, #36]	; 0x24
   16f40:	beq	1714c <read_body@@Base+0x2bc>
   16f44:	ldr	r5, [pc, #524]	; 17158 <read_body@@Base+0x2c8>
   16f48:	mov	r9, #0
   16f4c:	mov	r7, r9
   16f50:	ldr	r4, [pc, #516]	; 1715c <read_body@@Base+0x2cc>
   16f54:	ldr	r8, [pc, #516]	; 17160 <read_body@@Base+0x2d0>
   16f58:	add	r5, pc, r5
   16f5c:	add	r5, r5, #592	; 0x250
   16f60:	add	r4, pc, r4
   16f64:	add	r4, r4, #592	; 0x250
   16f68:	add	r8, pc, r8
   16f6c:	add	r8, r8, #592	; 0x250
   16f70:	cmp	r3, #7
   16f74:	beq	16fe0 <read_body@@Base+0x150>
   16f78:	cmp	r3, #10
   16f7c:	mov	r0, r1
   16f80:	beq	170a8 <read_body@@Base+0x218>
   16f84:	ldr	r4, [pc, #472]	; 17164 <read_body@@Base+0x2d4>
   16f88:	ldr	r0, [r6]
   16f8c:	add	r4, pc, r4
   16f90:	ldr	r3, [r4, #632]	; 0x278
   16f94:	ldr	r2, [r4, #636]	; 0x27c
   16f98:	adds	r3, r3, #1
   16f9c:	adc	r2, r2, #0
   16fa0:	str	r3, [r4, #632]	; 0x278
   16fa4:	str	r2, [r4, #636]	; 0x27c
   16fa8:	bl	12564 <push_back@@Base>
   16fac:	ldr	r3, [r4, #688]	; 0x2b0
   16fb0:	ldr	r2, [r4, #692]	; 0x2b4
   16fb4:	adds	r3, r3, #1
   16fb8:	adc	r2, r2, #0
   16fbc:	str	r3, [r4, #688]	; 0x2b0
   16fc0:	str	r2, [r4, #692]	; 0x2b4
   16fc4:	mov	r0, r7
   16fc8:	ldrd	r4, [sp]
   16fcc:	ldrd	r6, [sp, #8]
   16fd0:	ldrd	r8, [sp, #16]
   16fd4:	ldr	sl, [sp, #24]
   16fd8:	add	sp, sp, #28
   16fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   16fe0:	ldr	r3, [r5, #48]	; 0x30
   16fe4:	mov	r0, r1
   16fe8:	ldr	r2, [r5, #52]	; 0x34
   16fec:	adds	r3, r3, #1
   16ff0:	adc	r2, r2, #0
   16ff4:	str	r3, [r5, #48]	; 0x30
   16ff8:	str	r2, [r5, #52]	; 0x34
   16ffc:	bl	152fc <free_token_return@@Base>
   17000:	ldr	r3, [r5, #64]	; 0x40
   17004:	mov	r0, r6
   17008:	ldr	r2, [r5, #68]	; 0x44
   1700c:	adds	r3, r3, #1
   17010:	adc	r2, r2, #0
   17014:	str	r3, [r5, #64]	; 0x40
   17018:	str	r2, [r5, #68]	; 0x44
   1701c:	bl	1622c <read_return_expression@@Base>
   17020:	ldr	r3, [r5, #72]	; 0x48
   17024:	mov	r2, r0
   17028:	ldr	r1, [r5, #76]	; 0x4c
   1702c:	adds	r3, r3, #1
   17030:	adc	r1, r1, #0
   17034:	cmp	r7, #0
   17038:	str	r3, [r5, #72]	; 0x48
   1703c:	strne	r2, [r9, #4]
   17040:	str	r1, [r5, #76]	; 0x4c
   17044:	beq	1710c <read_body@@Base+0x27c>
   17048:	ldr	r0, [r6]
   1704c:	mov	r9, r2
   17050:	bl	12358 <next@@Base>
   17054:	ldr	r3, [r0]
   17058:	mov	r1, r0
   1705c:	cmp	r3, #6
   17060:	bne	16f70 <read_body@@Base+0xe0>
   17064:	ldr	r4, [pc, #252]	; 17168 <read_body@@Base+0x2d8>
   17068:	mov	r0, r1
   1706c:	add	r4, pc, r4
   17070:	ldr	r3, [r4, #704]	; 0x2c0
   17074:	ldr	r2, [r4, #708]	; 0x2c4
   17078:	adds	r3, r3, #1
   1707c:	adc	r2, r2, #0
   17080:	str	r3, [r4, #704]	; 0x2c0
   17084:	str	r2, [r4, #708]	; 0x2c4
   17088:	bl	152d4 <free_token_cbra@@Base>
   1708c:	ldr	r3, [r4, #712]	; 0x2c8
   17090:	ldr	r2, [r4, #716]	; 0x2cc
   17094:	adds	r3, r3, #1
   17098:	adc	r2, r2, #0
   1709c:	str	r3, [r4, #712]	; 0x2c8
   170a0:	str	r2, [r4, #716]	; 0x2cc
   170a4:	b	16fc4 <read_body@@Base+0x134>
   170a8:	ldr	r3, [r4, #56]	; 0x38
   170ac:	ldr	r2, [r4, #60]	; 0x3c
   170b0:	adds	r3, r3, #1
   170b4:	adc	r2, r2, #0
   170b8:	str	r3, [r4, #56]	; 0x38
   170bc:	str	r2, [r4, #60]	; 0x3c
   170c0:	bl	15374 <free_token_if@@Base>
   170c4:	ldr	r3, [r4, #80]	; 0x50
   170c8:	mov	r0, r6
   170cc:	ldr	r2, [r4, #84]	; 0x54
   170d0:	adds	r3, r3, #1
   170d4:	adc	r2, r2, #0
   170d8:	str	r3, [r4, #80]	; 0x50
   170dc:	str	r2, [r4, #84]	; 0x54
   170e0:	bl	16c9c <read_if_statement@@Base>
   170e4:	ldr	r3, [r4, #88]	; 0x58
   170e8:	mov	r2, r0
   170ec:	ldr	r1, [r4, #92]	; 0x5c
   170f0:	adds	r3, r3, #1
   170f4:	adc	r1, r1, #0
   170f8:	cmp	r7, #0
   170fc:	str	r3, [r4, #88]	; 0x58
   17100:	strne	r2, [r9, #4]
   17104:	str	r1, [r4, #92]	; 0x5c
   17108:	bne	17048 <read_body@@Base+0x1b8>
   1710c:	ldr	r3, [r8, #104]	; 0x68
   17110:	mov	r7, r2
   17114:	ldr	r1, [r8, #108]	; 0x6c
   17118:	adds	r3, r3, #1
   1711c:	adc	r1, r1, #0
   17120:	str	r3, [r8, #104]	; 0x68
   17124:	str	r1, [r8, #108]	; 0x6c
   17128:	b	17048 <read_body@@Base+0x1b8>
   1712c:	ldr	r3, [r4, #8]
   17130:	mov	r7, #0
   17134:	ldr	r2, [r4, #12]
   17138:	adds	r3, r3, #1
   1713c:	adc	r2, r2, r7
   17140:	str	r3, [r4, #8]
   17144:	str	r2, [r4, #12]
   17148:	b	16fc4 <read_body@@Base+0x134>
   1714c:	mov	r7, #0
   17150:	b	17064 <read_body@@Base+0x1d4>
   17154:	andeq	r5, r1, r8, lsl #11
   17158:	andeq	r5, r1, r8, asr #9
   1715c:	andeq	r5, r1, r0, asr #9
   17160:			; <UNDEFINED> instruction: 0x000154b8
   17164:	muleq	r1, r4, r4
   17168:			; <UNDEFINED> instruction: 0x000153b4

0001716c <read_function_ast_node@@Base>:
   1716c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17170:	ldr	r4, [pc, #564]	; 173ac <read_function_ast_node@@Base+0x240>
   17174:	add	r4, pc, r4
   17178:	add	r4, r4, #720	; 0x2d0
   1717c:	ldr	r3, [r4]
   17180:	ldr	r2, [r4, #4]
   17184:	strd	r6, [sp, #8]
   17188:	mov	r6, r0
   1718c:	ldr	r0, [r0]
   17190:	adds	r3, r3, #1
   17194:	str	r8, [sp, #16]
   17198:	str	lr, [sp, #20]
   1719c:	adc	r2, r2, #0
   171a0:	str	r3, [r4]
   171a4:	str	r2, [r4, #4]
   171a8:	bl	12358 <next@@Base>
   171ac:	ldr	r5, [r0]
   171b0:	cmp	r5, #0
   171b4:	bne	17354 <read_function_ast_node@@Base+0x1e8>
   171b8:	ldr	r3, [r4, #16]
   171bc:	ldr	r2, [r4, #20]
   171c0:	adds	r3, r3, #1
   171c4:	adc	r2, r2, #0
   171c8:	str	r3, [r4, #16]
   171cc:	str	r2, [r4, #20]
   171d0:	bl	151e4 <free_token_int_type@@Base>
   171d4:	ldr	r3, [r4, #24]
   171d8:	ldr	r2, [r4, #28]
   171dc:	ldr	r0, [r6]
   171e0:	adds	r3, r3, #1
   171e4:	adc	r2, r2, #0
   171e8:	str	r3, [r4, #24]
   171ec:	str	r2, [r4, #28]
   171f0:	bl	12358 <next@@Base>
   171f4:	ldr	r3, [r0]
   171f8:	mov	r7, r0
   171fc:	cmp	r3, #2
   17200:	bne	17324 <read_function_ast_node@@Base+0x1b8>
   17204:	ldr	r3, [r4, #40]	; 0x28
   17208:	ldr	r2, [r4, #44]	; 0x2c
   1720c:	ldr	r0, [r6]
   17210:	adds	r3, r3, #1
   17214:	adc	r2, r2, #0
   17218:	str	r3, [r4, #40]	; 0x28
   1721c:	str	r2, [r4, #44]	; 0x2c
   17220:	bl	12358 <next@@Base>
   17224:	ldr	r3, [r0]
   17228:	cmp	r3, #3
   1722c:	bne	17390 <read_function_ast_node@@Base+0x224>
   17230:	ldr	r3, [r4, #56]	; 0x38
   17234:	ldr	r2, [r4, #60]	; 0x3c
   17238:	adds	r3, r3, #1
   1723c:	adc	r2, r2, #0
   17240:	str	r3, [r4, #56]	; 0x38
   17244:	str	r2, [r4, #60]	; 0x3c
   17248:	bl	1525c <free_token_opar@@Base>
   1724c:	ldr	r3, [r4, #64]	; 0x40
   17250:	ldr	r2, [r4, #68]	; 0x44
   17254:	ldr	r0, [r6]
   17258:	adds	r3, r3, #1
   1725c:	adc	r2, r2, #0
   17260:	str	r3, [r4, #64]	; 0x40
   17264:	str	r2, [r4, #68]	; 0x44
   17268:	bl	12358 <next@@Base>
   1726c:	ldr	r3, [r0]
   17270:	cmp	r3, #4
   17274:	bne	17374 <read_function_ast_node@@Base+0x208>
   17278:	ldr	r3, [r4, #80]	; 0x50
   1727c:	ldr	r2, [r4, #84]	; 0x54
   17280:	adds	r3, r3, #1
   17284:	adc	r2, r2, #0
   17288:	str	r3, [r4, #80]	; 0x50
   1728c:	str	r2, [r4, #84]	; 0x54
   17290:	bl	15284 <free_token_cpar@@Base>
   17294:	ldr	r3, [r4, #88]	; 0x58
   17298:	mov	r0, r6
   1729c:	ldr	r2, [r4, #92]	; 0x5c
   172a0:	adds	r3, r3, #1
   172a4:	adc	r2, r2, #0
   172a8:	str	r3, [r4, #88]	; 0x58
   172ac:	str	r2, [r4, #92]	; 0x5c
   172b0:	bl	16e90 <read_body@@Base>
   172b4:	ldr	r3, [r4, #96]	; 0x60
   172b8:	mov	r6, r0
   172bc:	mov	r0, #16
   172c0:	ldr	r1, [r4, #100]	; 0x64
   172c4:	adds	r3, r3, #1
   172c8:	adc	r1, r1, #0
   172cc:	str	r3, [r4, #96]	; 0x60
   172d0:	str	r1, [r4, #100]	; 0x64
   172d4:	bl	118b8 <malloc@plt>
   172d8:	mov	r2, r6
   172dc:	ldr	r1, [r7, #4]
   172e0:	mov	r5, r0
   172e4:	bl	1559c <init_node_function@@Base>
   172e8:	ldr	r3, [r4, #104]	; 0x68
   172ec:	mov	r0, r7
   172f0:	ldr	r2, [r4, #108]	; 0x6c
   172f4:	adds	r3, r3, #1
   172f8:	adc	r2, r2, #0
   172fc:	str	r3, [r4, #104]	; 0x68
   17300:	str	r2, [r4, #108]	; 0x6c
   17304:	bl	15234 <free_token_function@@Base>
   17308:	ldr	r3, [r4, #112]	; 0x70
   1730c:	ldr	r2, [r4, #116]	; 0x74
   17310:	adds	r3, r3, #1
   17314:	adc	r2, r2, #0
   17318:	str	r3, [r4, #112]	; 0x70
   1731c:	str	r2, [r4, #116]	; 0x74
   17320:	b	1733c <read_function_ast_node@@Base+0x1d0>
   17324:	ldr	r3, [r4, #32]
   17328:	ldr	r2, [r4, #36]	; 0x24
   1732c:	adds	r3, r3, #1
   17330:	adc	r2, r2, #0
   17334:	str	r3, [r4, #32]
   17338:	str	r2, [r4, #36]	; 0x24
   1733c:	mov	r0, r5
   17340:	ldrd	r4, [sp]
   17344:	ldrd	r6, [sp, #8]
   17348:	ldr	r8, [sp, #16]
   1734c:	add	sp, sp, #20
   17350:	pop	{pc}		; (ldr pc, [sp], #4)
   17354:	ldr	r3, [r4, #8]
   17358:	mov	r5, #0
   1735c:	ldr	r2, [r4, #12]
   17360:	adds	r3, r3, #1
   17364:	adc	r2, r2, r5
   17368:	str	r3, [r4, #8]
   1736c:	str	r2, [r4, #12]
   17370:	b	1733c <read_function_ast_node@@Base+0x1d0>
   17374:	ldr	r3, [r4, #72]	; 0x48
   17378:	ldr	r2, [r4, #76]	; 0x4c
   1737c:	adds	r3, r3, #1
   17380:	adc	r2, r2, #0
   17384:	str	r3, [r4, #72]	; 0x48
   17388:	str	r2, [r4, #76]	; 0x4c
   1738c:	b	1733c <read_function_ast_node@@Base+0x1d0>
   17390:	ldr	r3, [r4, #48]	; 0x30
   17394:	ldr	r2, [r4, #52]	; 0x34
   17398:	adds	r3, r3, #1
   1739c:	adc	r2, r2, #0
   173a0:	str	r3, [r4, #48]	; 0x30
   173a4:	str	r2, [r4, #52]	; 0x34
   173a8:	b	1733c <read_function_ast_node@@Base+0x1d0>
   173ac:	andeq	r5, r1, ip, lsr #5

000173b0 <build_ast@@Base>:
   173b0:	str	r4, [sp, #-8]!
   173b4:	ldr	r4, [pc, #68]	; 17400 <build_ast@@Base+0x50>
   173b8:	add	r4, pc, r4
   173bc:	ldr	r3, [r4, #840]	; 0x348
   173c0:	ldr	r2, [r4, #844]	; 0x34c
   173c4:	str	lr, [sp, #4]
   173c8:	adds	r3, r3, #1
   173cc:	adc	r2, r2, #0
   173d0:	str	r3, [r4, #840]	; 0x348
   173d4:	str	r2, [r4, #844]	; 0x34c
   173d8:	bl	1716c <read_function_ast_node@@Base>
   173dc:	ldr	r3, [r4, #848]	; 0x350
   173e0:	ldr	r2, [r4, #852]	; 0x354
   173e4:	adds	r3, r3, #1
   173e8:	adc	r2, r2, #0
   173ec:	str	r3, [r4, #848]	; 0x350
   173f0:	str	r2, [r4, #852]	; 0x354
   173f4:	ldr	r4, [sp]
   173f8:	add	sp, sp, #4
   173fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17400:	andeq	r5, r1, r8, rrx
   17404:	b	186a8 <build_ast@@Base+0x12f8>
   17408:	push	{r4, r5, r6, r7, r8, lr}
   1740c:	subs	r5, r1, #0
   17410:	popeq	{r4, r5, r6, r7, r8, pc}
   17414:	mov	r4, r0
   17418:	bl	17404 <build_ast@@Base+0x54>
   1741c:	ldr	r3, [r4]
   17420:	ldr	r2, [r4, #4]
   17424:	adds	r6, r3, r0
   17428:	adc	r7, r2, r1
   1742c:	subs	r5, r5, #1
   17430:	strd	r6, [r4], #8
   17434:	bne	17418 <build_ast@@Base+0x68>
   17438:	pop	{r4, r5, r6, r7, r8, pc}
   1743c:	ldr	r3, [pc, #20]	; 17458 <build_ast@@Base+0xa8>
   17440:	ldr	r2, [pc, #20]	; 1745c <build_ast@@Base+0xac>
   17444:	add	r3, pc, r3
   17448:	ldr	r3, [r3, r2]
   1744c:	ldmib	r3, {r0, r3}
   17450:	add	r0, r0, r3
   17454:	bx	lr
   17458:			; <UNDEFINED> instruction: 0x00013bb4
   1745c:	strheq	r0, [r0], -r4
   17460:	ldr	r3, [pc, #28]	; 17484 <build_ast@@Base+0xd4>
   17464:	ldr	r2, [pc, #28]	; 17488 <build_ast@@Base+0xd8>
   17468:	add	r3, pc, r3
   1746c:	ldr	r3, [r3, r2]
   17470:	ldr	r2, [r3]
   17474:	cmp	r2, #0
   17478:	ldrne	r0, [r3, #20]
   1747c:	moveq	r0, #1
   17480:	bx	lr
   17484:	muleq	r1, r0, fp
   17488:	strheq	r0, [r0], -r4
   1748c:	bx	lr
   17490:	ldr	ip, [pc, #32]	; 174b8 <build_ast@@Base+0x108>
   17494:	mov	r3, #32
   17498:	teq	r0, r1
   1749c:	movmi	r2, ip
   174a0:	movpl	r2, #0
   174a4:	subs	r3, r3, #1
   174a8:	lsl	r1, r1, #1
   174ac:	eor	r0, r2, r0, lsl #1
   174b0:	bne	17498 <build_ast@@Base+0xe8>
   174b4:	bx	lr
   174b8:	strbeq	r1, [r1], #3511	; 0xdb7
   174bc:	ldr	r2, [pc, #60]	; 17500 <build_ast@@Base+0x150>
   174c0:	ldr	r3, [pc, #60]	; 17504 <build_ast@@Base+0x154>
   174c4:	add	r2, pc, r2
   174c8:	push	{r4, lr}
   174cc:	ldr	r4, [r2, r3]
   174d0:	ldr	r0, [r4]
   174d4:	cmp	r0, #0
   174d8:	popeq	{r4, pc}
   174dc:	ldr	r3, [pc, #36]	; 17508 <build_ast@@Base+0x158>
   174e0:	ldr	r3, [r2, r3]
   174e4:	ldr	r3, [r3]
   174e8:	cmp	r0, r3
   174ec:	popeq	{r4, pc}
   174f0:	bl	1193c <fclose@plt>
   174f4:	mov	r3, #0
   174f8:	str	r3, [r4]
   174fc:	pop	{r4, pc}
   17500:	andeq	r3, r1, r4, lsr fp
   17504:	strheq	r0, [r0], -r8
   17508:	andeq	r0, r0, r0, lsr #1
   1750c:	ldr	r3, [pc, #76]	; 17560 <build_ast@@Base+0x1b0>
   17510:	ldr	r1, [pc, #76]	; 17564 <build_ast@@Base+0x1b4>
   17514:	add	r3, pc, r3
   17518:	push	{r4, r5, r6, lr}
   1751c:	mov	r5, r0
   17520:	ldr	r4, [r3, r1]
   17524:	lsl	r1, r0, #2
   17528:	mov	r0, r4
   1752c:	mov	r2, #1
   17530:	ldr	r3, [r0], #28
   17534:	bl	11870 <fwrite@plt>
   17538:	cmp	r0, #1
   1753c:	movne	r3, #1
   17540:	ldr	r0, [r4, #8]
   17544:	strne	r3, [r4, #20]
   17548:	ldr	r3, [r4, #4]
   1754c:	sub	r0, r0, r5
   17550:	add	r3, r3, r5
   17554:	str	r3, [r4, #4]
   17558:	str	r0, [r4, #8]
   1755c:	pop	{r4, r5, r6, pc}
   17560:	andeq	r3, r1, r4, ror #21
   17564:	strheq	r0, [r0], -r4
   17568:	ldr	r3, [pc, #80]	; 175c0 <build_ast@@Base+0x210>
   1756c:	ldr	r2, [pc, #80]	; 175c4 <build_ast@@Base+0x214>
   17570:	add	r3, pc, r3
   17574:	push	{r4, r5, r6, lr}
   17578:	mov	r5, r0
   1757c:	ldr	r4, [r3, r2]
   17580:	ldr	r3, [r4, #8]
   17584:	cmp	r3, #1024	; 0x400
   17588:	bcs	175a0 <build_ast@@Base+0x1f0>
   1758c:	add	r0, r3, #7
   17590:	add	r3, r5, r3
   17594:	str	r3, [r4, #8]
   17598:	add	r0, r4, r0, lsl #2
   1759c:	pop	{r4, r5, r6, pc}
   175a0:	mov	r0, #1024	; 0x400
   175a4:	bl	1750c <build_ast@@Base+0x15c>
   175a8:	ldr	r3, [r4, #8]
   175ac:	cmp	r3, #0
   175b0:	addne	r2, r4, #4096	; 0x1000
   175b4:	ldrne	r2, [r2, #28]
   175b8:	strne	r2, [r4, #28]
   175bc:	b	1758c <build_ast@@Base+0x1dc>
   175c0:	andeq	r3, r1, r8, lsl #21
   175c4:	strheq	r0, [r0], -r4
   175c8:	ldr	r3, [pc, #192]	; 17690 <build_ast@@Base+0x2e0>
   175cc:	ldr	r2, [pc, #192]	; 17694 <build_ast@@Base+0x2e4>
   175d0:	add	r3, pc, r3
   175d4:	push	{r4, r5, r6, lr}
   175d8:	ldr	r4, [r3, r2]
   175dc:	ldr	r2, [r4, #24]
   175e0:	ldr	r3, [r4, #8]
   175e4:	ldr	ip, [r4, #12]
   175e8:	cmp	r2, #0
   175ec:	sub	ip, ip, r3
   175f0:	ble	1766c <build_ast@@Base+0x2bc>
   175f4:	cmp	ip, r0
   175f8:	mov	r5, r0
   175fc:	bcs	17658 <build_ast@@Base+0x2a8>
   17600:	ldr	r2, [r4, #4]
   17604:	cmp	ip, #0
   17608:	add	r2, r2, r3
   1760c:	str	r2, [r4, #4]
   17610:	addne	r2, r4, #28
   17614:	mov	r0, r4
   17618:	ldrne	r3, [r2, r3, lsl #2]
   1761c:	mov	r6, #0
   17620:	strne	r3, [r4, #28]
   17624:	ldr	r3, [r0], #28
   17628:	mov	r2, #4096	; 0x1000
   1762c:	add	r0, r0, ip, lsl #2
   17630:	mov	r1, #1
   17634:	str	ip, [r4, #12]
   17638:	str	r6, [r4, #8]
   1763c:	bl	11888 <fread@plt>
   17640:	ldr	r3, [r4, #12]
   17644:	add	r0, r3, r0, lsr #2
   17648:	cmp	r0, r5
   1764c:	str	r0, [r4, #12]
   17650:	bcc	17674 <build_ast@@Base+0x2c4>
   17654:	ldr	r3, [r4, #8]
   17658:	add	r0, r3, #7
   1765c:	add	r5, r5, r3
   17660:	str	r5, [r4, #8]
   17664:	add	r0, r4, r0, lsl #2
   17668:	pop	{r4, r5, r6, pc}
   1766c:	mov	r0, #0
   17670:	pop	{r4, r5, r6, pc}
   17674:	ldr	r3, [r4, #16]
   17678:	str	r6, [r4, #12]
   1767c:	add	r5, r5, r3
   17680:	sub	r5, r5, r0
   17684:	str	r5, [r4, #16]
   17688:	mov	r0, r6
   1768c:	pop	{r4, r5, r6, pc}
   17690:	andeq	r3, r1, r8, lsr #20
   17694:	strheq	r0, [r0], -r4
   17698:	push	{r4, r5, r6, lr}
   1769c:	ldr	r4, [pc, #92]	; 17700 <build_ast@@Base+0x350>
   176a0:	ldr	r3, [pc, #92]	; 17704 <build_ast@@Base+0x354>
   176a4:	add	r4, pc, r4
   176a8:	ldr	r5, [r4, r3]
   176ac:	ldr	r0, [r5]
   176b0:	cmp	r0, #0
   176b4:	popne	{r4, r5, r6, pc}
   176b8:	ldr	r0, [pc, #72]	; 17708 <build_ast@@Base+0x358>
   176bc:	add	r0, pc, r0
   176c0:	bl	118a0 <getenv@plt>
   176c4:	cmp	r0, #0
   176c8:	beq	176f8 <build_ast@@Base+0x348>
   176cc:	ldr	r1, [pc, #56]	; 1770c <build_ast@@Base+0x35c>
   176d0:	add	r1, pc, r1
   176d4:	bl	11978 <fopen64@plt>
   176d8:	str	r0, [r5]
   176dc:	cmp	r0, #0
   176e0:	popne	{r4, r5, r6, pc}
   176e4:	ldr	r3, [pc, #36]	; 17710 <build_ast@@Base+0x360>
   176e8:	ldr	r3, [r4, r3]
   176ec:	ldr	r0, [r3]
   176f0:	str	r0, [r5]
   176f4:	pop	{r4, r5, r6, pc}
   176f8:	ldr	r0, [r5]
   176fc:	b	176dc <build_ast@@Base+0x32c>
   17700:	andeq	r3, r1, r4, asr r9
   17704:	strheq	r0, [r0], -r8
   17708:	andeq	r2, r0, ip, ror #18
   1770c:	andeq	r2, r0, r8, ror #18
   17710:	andeq	r0, r0, r0, lsr #1
   17714:	push	{r0, r1, r2, r3}
   17718:	push	{lr}		; (str lr, [sp, #-4]!)
   1771c:	sub	sp, sp, #12
   17720:	add	r3, sp, #20
   17724:	str	r3, [sp, #4]
   17728:	bl	17698 <build_ast@@Base+0x2e8>
   1772c:	ldr	r1, [sp, #16]
   17730:	ldr	r2, [sp, #4]
   17734:	bl	11960 <vfprintf@plt>
   17738:	add	sp, sp, #12
   1773c:	pop	{lr}		; (ldr lr, [sp], #4)
   17740:	add	sp, sp, #16
   17744:	bx	lr
   17748:	push	{r4, r5, r6, r7, r8, lr}
   1774c:	subs	r6, r1, #0
   17750:	beq	177a4 <build_ast@@Base+0x3f4>
   17754:	cmp	r2, #0
   17758:	ldr	r7, [r6]
   1775c:	beq	17794 <build_ast@@Base+0x3e4>
   17760:	add	r4, r0, #12
   17764:	add	r5, r4, r2, lsl #2
   17768:	mov	r3, #0
   1776c:	ldr	r2, [r4, #4]!
   17770:	add	r1, r6, r3, lsl #3
   17774:	cmp	r2, #0
   17778:	add	r8, r3, #1
   1777c:	beq	1778c <build_ast@@Base+0x3dc>
   17780:	ldr	r0, [r1, #28]
   17784:	bl	1184c <free@plt>
   17788:	mov	r3, r8
   1778c:	cmp	r4, r5
   17790:	bne	1776c <build_ast@@Base+0x3bc>
   17794:	mov	r0, r6
   17798:	bl	1184c <free@plt>
   1779c:	mov	r0, r7
   177a0:	pop	{r4, r5, r6, r7, r8, pc}
   177a4:	mov	r7, r6
   177a8:	b	1779c <build_ast@@Base+0x3ec>
   177ac:	push	{r4, r5}
   177b0:	mov	r4, r0
   177b4:	mov	r5, r1
   177b8:	orrs	r3, r4, r5
   177bc:	beq	17800 <build_ast@@Base+0x450>
   177c0:	cmp	r1, #0
   177c4:	clzeq	r2, r0
   177c8:	addeq	r2, r2, #32
   177cc:	clzne	r2, r1
   177d0:	rsb	r3, r2, #63	; 0x3f
   177d4:	cmp	r3, #1
   177d8:	bls	17800 <build_ast@@Base+0x450>
   177dc:	rsb	r1, r2, #61	; 0x3d
   177e0:	rsb	r0, r1, #32
   177e4:	lsr	r3, r4, r1
   177e8:	sub	r1, r1, #32
   177ec:	orr	r3, r3, r5, lsl r0
   177f0:	orr	r3, r3, r5, lsr r1
   177f4:	rsb	r2, r2, #1073741886	; 0x4000003e
   177f8:	and	r0, r3, #3
   177fc:	add	r0, r0, r2, lsl #2
   17800:	pop	{r4, r5}
   17804:	bx	lr
   17808:	push	{r4, r5, r6, lr}
   1780c:	mov	r1, r3
   17810:	mov	r6, r0
   17814:	mov	r0, r2
   17818:	mov	r4, r2
   1781c:	mov	r5, r3
   17820:	bl	177ac <build_ast@@Base+0x3fc>
   17824:	add	r0, r0, r0, lsl #1
   17828:	lsl	r0, r0, #3
   1782c:	add	r3, r6, r0
   17830:	ldr	r1, [r6, r0]
   17834:	ldr	r2, [r3, #16]
   17838:	add	r1, r1, #1
   1783c:	str	r1, [r6, r0]
   17840:	ldrd	r0, [r3, #8]
   17844:	ldr	ip, [r3, #20]
   17848:	adds	r2, r2, r4
   1784c:	str	r2, [r3, #16]
   17850:	adc	r2, ip, r5
   17854:	cmp	r4, r0
   17858:	sbcs	r1, r5, r1
   1785c:	str	r2, [r3, #20]
   17860:	strdlt	r4, [r3, #8]
   17864:	pop	{r4, r5, r6, pc}
   17868:	ldr	r3, [r1, #8]
   1786c:	cmp	r3, #0
   17870:	bxeq	lr
   17874:	add	r2, r1, #6016	; 0x1780
   17878:	push	{r4, r5, r6, r7, r8, lr}
   1787c:	mov	r3, r1
   17880:	mov	r8, r1
   17884:	mov	r7, r0
   17888:	ldrd	r4, [r1, #24]
   1788c:	add	r2, r2, #32
   17890:	mov	ip, #0
   17894:	mov	r0, #0
   17898:	mov	r1, #0
   1789c:	str	ip, [r3, #40]	; 0x28
   178a0:	strd	r4, [r3, #48]	; 0x30
   178a4:	strd	r0, [r3, #56]	; 0x38
   178a8:	add	r3, r3, #24
   178ac:	cmp	r3, r2
   178b0:	bne	1789c <build_ast@@Base+0x4ec>
   178b4:	cmp	r7, #0
   178b8:	popeq	{r4, r5, r6, r7, r8, pc}
   178bc:	add	r8, r8, #40	; 0x28
   178c0:	ldr	r3, [r7, #16]
   178c4:	cmp	r3, #0
   178c8:	beq	17950 <build_ast@@Base+0x5a0>
   178cc:	ldr	r2, [r7, #52]	; 0x34
   178d0:	cmp	r2, #0
   178d4:	beq	17950 <build_ast@@Base+0x5a0>
   178d8:	mov	r6, #0
   178dc:	b	178ec <build_ast@@Base+0x53c>
   178e0:	add	r6, r6, #1
   178e4:	cmp	r2, r6
   178e8:	beq	17950 <build_ast@@Base+0x5a0>
   178ec:	ldr	r3, [r7, #56]	; 0x38
   178f0:	ldr	r5, [r3, r6, lsl #2]
   178f4:	cmp	r5, #0
   178f8:	beq	178e0 <build_ast@@Base+0x530>
   178fc:	ldr	r3, [r5]
   17900:	cmp	r3, r7
   17904:	bne	178e0 <build_ast@@Base+0x530>
   17908:	ldr	r3, [r5, #16]
   1790c:	cmp	r3, #0
   17910:	beq	178e0 <build_ast@@Base+0x530>
   17914:	mov	r4, #0
   17918:	ldr	r2, [r5, #20]
   1791c:	lsl	r3, r4, #3
   17920:	add	r2, r2, r3
   17924:	mov	r0, r8
   17928:	ldrd	r2, [r2]
   1792c:	bl	17808 <build_ast@@Base+0x458>
   17930:	ldr	r3, [r5, #16]
   17934:	add	r4, r4, #1
   17938:	cmp	r3, r4
   1793c:	bhi	17918 <build_ast@@Base+0x568>
   17940:	ldr	r2, [r7, #52]	; 0x34
   17944:	add	r6, r6, #1
   17948:	cmp	r2, r6
   1794c:	bne	178ec <build_ast@@Base+0x53c>
   17950:	ldr	r7, [r7, #4]
   17954:	cmp	r7, #0
   17958:	bne	178c0 <build_ast@@Base+0x510>
   1795c:	pop	{r4, r5, r6, r7, r8, pc}
   17960:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17964:	sub	sp, sp, #12
   17968:	mov	r6, r0
   1796c:	str	r0, [sp, #4]
   17970:	mov	r8, r2
   17974:	mov	r0, r1
   17978:	mov	r4, r1
   1797c:	ldr	r2, [pc, #364]	; 17af0 <build_ast@@Base+0x740>
   17980:	mov	r1, #0
   17984:	bl	11924 <memset@plt>
   17988:	mov	r5, #0
   1798c:	cmp	r6, #0
   17990:	str	r5, [r8]
   17994:	beq	17ad4 <build_ast@@Base+0x724>
   17998:	mov	r9, r5
   1799c:	ldr	r0, [r6, #12]
   179a0:	bl	118f4 <strlen@plt>
   179a4:	cmp	r5, r0
   179a8:	strcc	r0, [r8]
   179ac:	mov	r0, r9
   179b0:	ldr	r1, [r6, #8]
   179b4:	bl	17490 <build_ast@@Base+0xe0>
   179b8:	ldr	r7, [r6, #52]	; 0x34
   179bc:	mov	r1, r7
   179c0:	bl	17490 <build_ast@@Base+0xe0>
   179c4:	cmp	r7, #0
   179c8:	mov	r9, r0
   179cc:	beq	17ac0 <build_ast@@Base+0x710>
   179d0:	ldr	r5, [r6, #56]	; 0x38
   179d4:	add	r7, r5, r7, lsl #2
   179d8:	sub	r7, r7, #4
   179dc:	sub	r5, r5, #4
   179e0:	b	17a10 <build_ast@@Base+0x660>
   179e4:	ldr	r3, [sl]
   179e8:	mov	r0, r9
   179ec:	cmp	r3, r6
   179f0:	beq	17a2c <build_ast@@Base+0x67c>
   179f4:	mov	r1, #0
   179f8:	bl	17490 <build_ast@@Base+0xe0>
   179fc:	mov	r1, #0
   17a00:	bl	17490 <build_ast@@Base+0xe0>
   17a04:	mov	r9, r0
   17a08:	cmp	r5, r7
   17a0c:	beq	17ac0 <build_ast@@Base+0x710>
   17a10:	ldr	sl, [r5, #4]!
   17a14:	cmp	sl, #0
   17a18:	bne	179e4 <build_ast@@Base+0x634>
   17a1c:	mov	r1, sl
   17a20:	mov	r0, r9
   17a24:	bl	17490 <build_ast@@Base+0xe0>
   17a28:	b	179fc <build_ast@@Base+0x64c>
   17a2c:	ldr	r1, [sl, #12]
   17a30:	bl	17490 <build_ast@@Base+0xe0>
   17a34:	ldr	r1, [sl, #8]
   17a38:	bl	17490 <build_ast@@Base+0xe0>
   17a3c:	ldr	r3, [r6, #16]
   17a40:	cmp	r3, #0
   17a44:	mov	r9, r0
   17a48:	beq	17a08 <build_ast@@Base+0x658>
   17a4c:	ldr	fp, [sl, #16]
   17a50:	ldr	r3, [r4, #8]
   17a54:	mov	r1, fp
   17a58:	add	r3, r3, fp
   17a5c:	str	r3, [r4, #8]
   17a60:	bl	17490 <build_ast@@Base+0xe0>
   17a64:	cmp	fp, #0
   17a68:	mov	r9, r0
   17a6c:	beq	17a08 <build_ast@@Base+0x658>
   17a70:	ldr	r2, [sl, #20]
   17a74:	ldr	r3, [r4, #16]
   17a78:	add	lr, r2, fp, lsl #3
   17a7c:	ldr	ip, [r4, #20]
   17a80:	sub	lr, lr, #8
   17a84:	sub	r2, r2, #8
   17a88:	ldrd	r0, [r2, #8]!
   17a8c:	ldrd	sl, [r4, #24]
   17a90:	adds	r3, r3, r0
   17a94:	adc	ip, ip, r1
   17a98:	str	ip, [r4, #20]
   17a9c:	str	r3, [r4, #16]
   17aa0:	ldrd	r0, [r2]
   17aa4:	cmp	sl, r0
   17aa8:	sbcs	sl, fp, r1
   17aac:	strdlt	r0, [r4, #24]
   17ab0:	cmp	lr, r2
   17ab4:	bne	17a88 <build_ast@@Base+0x6d8>
   17ab8:	cmp	r5, r7
   17abc:	bne	17a10 <build_ast@@Base+0x660>
   17ac0:	ldr	r6, [r6, #4]
   17ac4:	cmp	r6, #0
   17ac8:	beq	17ad8 <build_ast@@Base+0x728>
   17acc:	ldr	r5, [r8]
   17ad0:	b	1799c <build_ast@@Base+0x5ec>
   17ad4:	ldr	r9, [sp, #4]
   17ad8:	ldr	r0, [sp, #4]
   17adc:	mov	r1, r4
   17ae0:	bl	17868 <build_ast@@Base+0x4b8>
   17ae4:	mov	r0, r9
   17ae8:	add	sp, sp, #12
   17aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17af0:	andeq	r1, r0, r8, asr #15
   17af4:	push	{r4, r5, r6, lr}
   17af8:	mov	r4, r0
   17afc:	ldr	r0, [pc, #192]	; 17bc4 <build_ast@@Base+0x814>
   17b00:	add	r0, pc, r0
   17b04:	bl	118a0 <getenv@plt>
   17b08:	subs	r3, r0, #0
   17b0c:	beq	17b18 <build_ast@@Base+0x768>
   17b10:	bl	1196c <atoi@plt>
   17b14:	bic	r3, r0, r0, asr #31
   17b18:	ldr	r0, [pc, #168]	; 17bc8 <build_ast@@Base+0x818>
   17b1c:	str	r3, [r4, #8]
   17b20:	add	r0, pc, r0
   17b24:	bl	118a0 <getenv@plt>
   17b28:	subs	r6, r0, #0
   17b2c:	beq	17b9c <build_ast@@Base+0x7ec>
   17b30:	bl	118f4 <strlen@plt>
   17b34:	ldr	r3, [r4, #4]
   17b38:	add	r3, r3, #2
   17b3c:	cmp	r0, #0
   17b40:	bne	17b7c <build_ast@@Base+0x7cc>
   17b44:	ldr	r2, [r4, #8]
   17b48:	cmp	r2, #0
   17b4c:	beq	17bb0 <build_ast@@Base+0x800>
   17b50:	ldr	r6, [pc, #116]	; 17bcc <build_ast@@Base+0x81c>
   17b54:	mov	r5, #1
   17b58:	add	r6, pc, r6
   17b5c:	str	r5, [r4, #12]
   17b60:	add	r0, r3, r5
   17b64:	bl	118b8 <malloc@plt>
   17b68:	mov	r2, r5
   17b6c:	mov	r1, r6
   17b70:	str	r0, [r4]
   17b74:	pop	{r4, r5, r6, lr}
   17b78:	b	11858 <memcpy@plt>
   17b7c:	sub	r5, r0, #1
   17b80:	ldrb	r2, [r6, r5]
   17b84:	cmp	r2, #47	; 0x2f
   17b88:	movne	r5, r0
   17b8c:	bne	17b5c <build_ast@@Base+0x7ac>
   17b90:	cmp	r5, #0
   17b94:	bne	17b5c <build_ast@@Base+0x7ac>
   17b98:	b	17b44 <build_ast@@Base+0x794>
   17b9c:	ldr	r2, [r4, #8]
   17ba0:	ldr	r3, [r4, #4]
   17ba4:	cmp	r2, #0
   17ba8:	add	r3, r3, #2
   17bac:	bne	17b50 <build_ast@@Base+0x7a0>
   17bb0:	str	r2, [r4, #12]
   17bb4:	mov	r0, r3
   17bb8:	bl	118b8 <malloc@plt>
   17bbc:	str	r0, [r4]
   17bc0:	pop	{r4, r5, r6, pc}
   17bc4:	andeq	r2, r0, r0, asr #10
   17bc8:	andeq	r2, r0, r4, lsr r5
   17bcc:	andeq	r2, r0, r4, ror #9
   17bd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bd4:	sub	sp, sp, #6080	; 0x17c0
   17bd8:	sub	sp, sp, #36	; 0x24
   17bdc:	mov	r3, r0
   17be0:	str	r1, [sp, #40]	; 0x28
   17be4:	mov	r1, #0
   17be8:	mov	r4, r1
   17bec:	str	r0, [sp, #56]	; 0x38
   17bf0:	add	r7, r3, #6016	; 0x1780
   17bf4:	add	r0, sp, #64	; 0x40
   17bf8:	add	r6, sp, #2016	; 0x7e0
   17bfc:	ldr	r2, [pc, #984]	; 17fdc <build_ast@@Base+0xc2c>
   17c00:	mov	r5, #251	; 0xfb
   17c04:	str	r0, [sp, #60]	; 0x3c
   17c08:	str	r5, [sp, #52]	; 0x34
   17c0c:	str	r6, [sp, #36]	; 0x24
   17c10:	mov	r9, r4
   17c14:	bl	11924 <memset@plt>
   17c18:	mov	sl, r4
   17c1c:	add	r3, r7, #8
   17c20:	mov	r0, r4
   17c24:	str	r3, [sp, #48]	; 0x30
   17c28:	sub	r3, r6, #1952	; 0x7a0
   17c2c:	str	r3, [sp, #44]	; 0x2c
   17c30:	ldr	r3, [sp, #48]	; 0x30
   17c34:	ldr	r2, [r3, #16]
   17c38:	ldr	r7, [r3]
   17c3c:	str	r2, [sp, #16]
   17c40:	ldr	r2, [r3, #20]
   17c44:	cmp	r7, #0
   17c48:	str	r2, [sp, #20]
   17c4c:	beq	17f6c <build_ast@@Base+0xbbc>
   17c50:	ldrd	r2, [r3, #8]
   17c54:	str	r9, [sp, #12]
   17c58:	strd	r2, [sp, #24]
   17c5c:	b	17d3c <build_ast@@Base+0x98c>
   17c60:	bls	17fd0 <build_ast@@Base+0xc20>
   17c64:	ldr	r3, [sp, #12]
   17c68:	mov	r2, r4
   17c6c:	umull	r0, r1, r7, r3
   17c70:	mov	r3, #0
   17c74:	mla	r1, r7, sl, r1
   17c78:	bl	194ec <__gcov_sort_n_vals@@Base+0x568>
   17c7c:	mov	r6, r0
   17c80:	mov	r8, r1
   17c84:	ldr	r3, [sp, #12]
   17c88:	sub	r4, r4, r7
   17c8c:	subs	r3, r3, r6
   17c90:	sbc	sl, sl, r8
   17c94:	mov	fp, r7
   17c98:	mov	r7, #0
   17c9c:	str	r3, [sp, #12]
   17ca0:	ldr	r0, [sp, #16]
   17ca4:	ldr	r3, [sp, #20]
   17ca8:	str	r7, [sp, #16]
   17cac:	str	r7, [sp, #20]
   17cb0:	adds	r6, r6, r0
   17cb4:	ldrd	r0, [sp]
   17cb8:	adc	r8, r8, r3
   17cbc:	bl	177ac <build_ast@@Base+0x3fc>
   17cc0:	ldr	r3, [sp, #44]	; 0x2c
   17cc4:	add	r1, r0, r0, lsl #1
   17cc8:	lsl	r1, r1, #3
   17ccc:	add	ip, r3, r1
   17cd0:	ldr	r3, [sp, #36]	; 0x24
   17cd4:	ldr	lr, [ip, #16]
   17cd8:	add	r1, r3, r1
   17cdc:	adds	r6, lr, r6
   17ce0:	ldr	lr, [ip, #20]
   17ce4:	ldrd	r2, [ip, #8]
   17ce8:	adc	lr, lr, r8
   17cec:	ldrd	r8, [sp]
   17cf0:	str	lr, [sp, #32]
   17cf4:	orrs	lr, r2, r3
   17cf8:	moveq	lr, #1
   17cfc:	movne	lr, #0
   17d00:	cmp	r8, r2
   17d04:	sbcs	r3, r9, r3
   17d08:	orrlt	lr, lr, #1
   17d0c:	cmp	lr, #0
   17d10:	str	r6, [ip, #16]
   17d14:	ldr	r6, [r1, #-1952]	; 0xfffff860
   17d18:	ldr	r3, [sp, #32]
   17d1c:	strdne	r8, [ip, #8]
   17d20:	cmp	r4, #0
   17d24:	add	fp, r6, fp
   17d28:	subeq	r5, r5, #1
   17d2c:	cmp	r7, #0
   17d30:	str	r3, [ip, #20]
   17d34:	str	fp, [r1, #-1952]	; 0xfffff860
   17d38:	beq	17f68 <build_ast@@Base+0xbb8>
   17d3c:	cmp	r4, #0
   17d40:	beq	17dc4 <build_ast@@Base+0xa14>
   17d44:	add	r2, r5, r5, lsl #1
   17d48:	ldr	r3, [sp, #40]	; 0x28
   17d4c:	add	r2, r3, r2, lsl #3
   17d50:	ldrd	r0, [sp, #24]
   17d54:	ldr	r3, [r2, #8]
   17d58:	ldr	r2, [r2, #12]
   17d5c:	adds	r3, r0, r3
   17d60:	str	r3, [sp]
   17d64:	adc	r3, r1, r2
   17d68:	cmp	r4, r7
   17d6c:	str	r3, [sp, #4]
   17d70:	bcs	17c60 <build_ast@@Base+0x8b0>
   17d74:	ldr	r6, [sp, #16]
   17d78:	ldr	r8, [sp, #20]
   17d7c:	mov	r2, r7
   17d80:	umull	r0, r1, r4, r6
   17d84:	mov	r3, #0
   17d88:	mla	r1, r4, r8, r1
   17d8c:	bl	194ec <__gcov_sort_n_vals@@Base+0x568>
   17d90:	sub	r7, r7, r4
   17d94:	mov	fp, r4
   17d98:	mov	r4, #0
   17d9c:	subs	r2, r6, r0
   17da0:	str	r2, [sp, #16]
   17da4:	sbc	r2, r8, r1
   17da8:	ldr	r6, [sp, #12]
   17dac:	mov	r8, sl
   17db0:	mov	r3, r1
   17db4:	str	r2, [sp, #20]
   17db8:	str	r4, [sp, #12]
   17dbc:	mov	sl, r4
   17dc0:	b	17cb0 <build_ast@@Base+0x900>
   17dc4:	cmp	r5, #0
   17dc8:	blt	17fc8 <build_ast@@Base+0xc18>
   17dcc:	ldr	r3, [sp, #40]	; 0x28
   17dd0:	add	r2, r5, r5, lsl #1
   17dd4:	ldr	r4, [r3, r2, lsl #3]
   17dd8:	add	r2, r3, r2, lsl #3
   17ddc:	cmp	r4, #0
   17de0:	bne	17f58 <build_ast@@Base+0xba8>
   17de4:	mov	r3, r2
   17de8:	ldr	r9, [sp, #12]
   17dec:	b	17e00 <build_ast@@Base+0xa50>
   17df0:	ldr	r4, [r3]
   17df4:	mov	r2, r3
   17df8:	cmp	r4, #0
   17dfc:	bne	17f58 <build_ast@@Base+0xba8>
   17e00:	subs	r5, r5, #1
   17e04:	sub	r3, r3, #24
   17e08:	bcs	17df0 <build_ast@@Base+0xa40>
   17e0c:	ldr	r2, [sp, #52]	; 0x34
   17e10:	ldr	ip, [sp, #36]	; 0x24
   17e14:	ldr	r4, [sp, #16]
   17e18:	lsl	r3, r2, #1
   17e1c:	add	r1, r3, r2
   17e20:	sub	r2, ip, #1952	; 0x7a0
   17e24:	lsl	r1, r1, #3
   17e28:	add	r2, r2, r1
   17e2c:	add	r1, ip, r1
   17e30:	ldr	ip, [r2, #16]
   17e34:	ldr	lr, [r1, #-1952]	; 0xfffff860
   17e38:	adds	ip, ip, r4
   17e3c:	add	r7, lr, r7
   17e40:	ldrd	r4, [r2, #8]
   17e44:	ldr	lr, [r2, #20]
   17e48:	str	r7, [r1, #-1952]	; 0xfffff860
   17e4c:	ldr	r1, [sp, #20]
   17e50:	str	ip, [r2, #16]
   17e54:	adc	lr, lr, r1
   17e58:	orrs	r1, r4, r5
   17e5c:	str	lr, [r2, #20]
   17e60:	beq	17f38 <build_ast@@Base+0xb88>
   17e64:	ldrd	r6, [sp, #24]
   17e68:	cmp	r6, r4
   17e6c:	sbcs	r2, r7, r5
   17e70:	blt	17f38 <build_ast@@Base+0xb88>
   17e74:	ldr	r2, [sp, #52]	; 0x34
   17e78:	ldr	lr, [sp, #60]	; 0x3c
   17e7c:	add	ip, r3, r2
   17e80:	ldr	r3, [sp, #56]	; 0x38
   17e84:	lsl	ip, ip, #3
   17e88:	add	r1, lr, ip
   17e8c:	add	ip, r3, ip
   17e90:	b	17eec <build_ast@@Base+0xb3c>
   17e94:	ldr	r3, [r1, #-8]
   17e98:	ldr	r6, [ip, #-8]
   17e9c:	ldr	r7, [ip, #-4]
   17ea0:	ldr	r2, [r1, #-4]
   17ea4:	adds	r6, r3, r6
   17ea8:	ldrd	r4, [r1, #-16]
   17eac:	adc	r2, r2, r7
   17eb0:	ldr	r3, [r1, #-24]	; 0xffffffe8
   17eb4:	ldr	r7, [ip, #-24]	; 0xffffffe8
   17eb8:	orrs	r8, r4, r5
   17ebc:	add	r3, r3, r7
   17ec0:	str	r2, [r1, #-4]
   17ec4:	str	r3, [r1, #-24]	; 0xffffffe8
   17ec8:	str	r6, [r1, #-8]
   17ecc:	ldrd	r2, [ip, #-16]
   17ed0:	sub	ip, ip, #24
   17ed4:	beq	17ee4 <build_ast@@Base+0xb34>
   17ed8:	cmp	r2, r4
   17edc:	sbcs	r4, r3, r5
   17ee0:	bge	17ee8 <build_ast@@Base+0xb38>
   17ee4:	strd	r2, [r1, #-16]
   17ee8:	sub	r1, r1, #24
   17eec:	cmp	r1, lr
   17ef0:	bne	17e94 <build_ast@@Base+0xae4>
   17ef4:	ldr	r3, [sp, #36]	; 0x24
   17ef8:	add	r0, r0, r0, lsl #1
   17efc:	sub	r3, r3, #1952	; 0x7a0
   17f00:	add	r3, r3, r0, lsl #3
   17f04:	ldr	r1, [sp, #60]	; 0x3c
   17f08:	ldr	r2, [r3, #16]
   17f0c:	ldr	ip, [r3, #20]
   17f10:	adds	r9, r2, r9
   17f14:	adc	sl, ip, sl
   17f18:	ldr	r0, [sp, #56]	; 0x38
   17f1c:	ldr	r2, [pc, #184]	; 17fdc <build_ast@@Base+0xc2c>
   17f20:	str	r9, [r3, #16]
   17f24:	str	sl, [r3, #20]
   17f28:	bl	11858 <memcpy@plt>
   17f2c:	add	sp, sp, #6080	; 0x17c0
   17f30:	add	sp, sp, #36	; 0x24
   17f34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f38:	ldr	r2, [sp, #52]	; 0x34
   17f3c:	ldrd	r4, [sp, #24]
   17f40:	add	r1, r3, r2
   17f44:	ldr	r2, [sp, #36]	; 0x24
   17f48:	sub	r2, r2, #1952	; 0x7a0
   17f4c:	add	r2, r2, r1, lsl #3
   17f50:	strd	r4, [r2, #8]
   17f54:	b	17e74 <build_ast@@Base+0xac4>
   17f58:	ldr	r3, [r2, #16]
   17f5c:	ldr	sl, [r2, #20]
   17f60:	str	r3, [sp, #12]
   17f64:	b	17d50 <build_ast@@Base+0x9a0>
   17f68:	ldr	r9, [sp, #12]
   17f6c:	ldr	r3, [sp, #52]	; 0x34
   17f70:	sub	r3, r3, #1
   17f74:	str	r3, [sp, #52]	; 0x34
   17f78:	cmn	r3, #1
   17f7c:	ldr	r3, [sp, #48]	; 0x30
   17f80:	sub	r3, r3, #24
   17f84:	str	r3, [sp, #48]	; 0x30
   17f88:	bne	17c30 <build_ast@@Base+0x880>
   17f8c:	cmp	r4, #0
   17f90:	subne	r5, r5, #1
   17f94:	cmp	r5, #0
   17f98:	blt	17ef4 <build_ast@@Base+0xb44>
   17f9c:	add	r5, r5, r5, lsl #1
   17fa0:	ldr	ip, [sp, #40]	; 0x28
   17fa4:	add	r3, ip, r5, lsl #3
   17fa8:	ldr	r2, [r3, #16]
   17fac:	ldr	r1, [r3, #20]
   17fb0:	adds	r9, r9, r2
   17fb4:	adc	sl, sl, r1
   17fb8:	cmp	ip, r3
   17fbc:	sub	r3, r3, #24
   17fc0:	bne	17fa8 <build_ast@@Base+0xbf8>
   17fc4:	b	17ef4 <build_ast@@Base+0xb44>
   17fc8:	ldr	r9, [sp, #12]
   17fcc:	b	17e0c <build_ast@@Base+0xa5c>
   17fd0:	ldr	r6, [sp, #12]
   17fd4:	mov	r8, sl
   17fd8:	b	17c84 <build_ast@@Base+0x8d4>
   17fdc:	andeq	r1, r0, r0, lsr #15
   17fe0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17fe4:	ldrb	r4, [r0]
   17fe8:	cmp	r4, #47	; 0x2f
   17fec:	addeq	r5, r0, #1
   17ff0:	ldrbeq	r4, [r0, #1]
   17ff4:	movne	r5, r0
   17ff8:	cmp	r4, #0
   17ffc:	beq	18050 <build_ast@@Base+0xca0>
   18000:	mov	r6, r0
   18004:	mov	r7, #0
   18008:	mov	r8, #47	; 0x2f
   1800c:	ldr	sl, [pc, #136]	; 1809c <build_ast@@Base+0xcec>
   18010:	b	18020 <build_ast@@Base+0xc70>
   18014:	ldrb	r4, [r5, #1]!
   18018:	cmp	r4, #0
   1801c:	beq	18050 <build_ast@@Base+0xca0>
   18020:	cmp	r4, #47	; 0x2f
   18024:	bne	18014 <build_ast@@Base+0xc64>
   18028:	strb	r7, [r5]
   1802c:	mov	r1, #0
   18030:	mov	r0, r6
   18034:	bl	11930 <access@plt>
   18038:	cmn	r0, #1
   1803c:	beq	1805c <build_ast@@Base+0xcac>
   18040:	strb	r8, [r5]
   18044:	ldrb	r4, [r5, #1]!
   18048:	cmp	r4, #0
   1804c:	bne	18020 <build_ast@@Base+0xc70>
   18050:	mov	r9, #0
   18054:	mov	r0, r9
   18058:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1805c:	mov	r1, sl
   18060:	mov	r0, r6
   18064:	bl	11918 <mkdir@plt>
   18068:	cmn	r0, #1
   1806c:	mov	r9, r0
   18070:	bne	18040 <build_ast@@Base+0xc90>
   18074:	bl	1190c <__errno_location@plt>
   18078:	ldr	r3, [r0]
   1807c:	cmp	r3, #17
   18080:	beq	18040 <build_ast@@Base+0xc90>
   18084:	ldr	r0, [pc, #20]	; 180a0 <build_ast@@Base+0xcf0>
   18088:	mov	r1, r6
   1808c:	add	r0, pc, r0
   18090:	bl	17714 <build_ast@@Base+0x364>
   18094:	strb	r4, [r5]
   18098:	b	18054 <build_ast@@Base+0xca4>
   1809c:	andeq	r0, r0, sp, ror #3
   180a0:	ldrdeq	r1, [r0], -r4
   180a4:	ldr	r3, [pc, #76]	; 180f8 <build_ast@@Base+0xd48>
   180a8:	cmp	r1, r3
   180ac:	beq	180f0 <build_ast@@Base+0xd40>
   180b0:	cmp	r2, #0
   180b4:	ldr	ip, [pc, #64]	; 180fc <build_ast@@Base+0xd4c>
   180b8:	push	{lr}		; (str lr, [sp, #-4]!)
   180bc:	rev	r3, r1
   180c0:	sub	sp, sp, #12
   180c4:	ldreq	r2, [r0]
   180c8:	ldr	r0, [pc, #48]	; 18100 <build_ast@@Base+0xd50>
   180cc:	stm	sp, {r3, ip}
   180d0:	mov	r1, r2
   180d4:	mov	r3, sp
   180d8:	add	r2, sp, #4
   180dc:	add	r0, pc, r0
   180e0:	bl	17714 <build_ast@@Base+0x364>
   180e4:	mov	r0, #0
   180e8:	add	sp, sp, #12
   180ec:	pop	{pc}		; (ldr pc, [sp], #4)
   180f0:	mov	r0, #1
   180f4:	bx	lr
   180f8:	teqmi	r8, sl, lsr #6
   180fc:	bcs	ce6208 <__bss_end__@@Base+0xcb86ec>
   18100:	andeq	r1, r0, ip, lsr #31
   18104:	ldr	r2, [r2]
   18108:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1810c:	cmp	r2, #0
   18110:	mov	r4, r3
   18114:	ldr	r2, [r3, #12]
   18118:	ldr	r3, [sp, #32]
   1811c:	beq	18208 <build_ast@@Base+0xe58>
   18120:	cmp	r1, #0
   18124:	addeq	r1, r2, #1
   18128:	streq	r1, [r4, #12]
   1812c:	cmp	r2, #0
   18130:	ldr	r0, [r4, #16]
   18134:	ldr	lr, [r4, #20]
   18138:	ldrd	r6, [r4, #24]
   1813c:	ldr	r2, [r4, #32]
   18140:	ldr	r1, [r4, #36]	; 0x24
   18144:	bne	181b4 <build_ast@@Base+0xe04>
   18148:	ldr	ip, [r3, #8]
   1814c:	str	ip, [r4, #8]
   18150:	ldr	ip, [r3, #16]
   18154:	ldr	r5, [r3, #20]
   18158:	adds	r0, ip, r0
   1815c:	adc	lr, r5, lr
   18160:	str	r0, [r4, #16]
   18164:	str	lr, [r4, #20]
   18168:	ldrd	r8, [r3, #24]
   1816c:	cmp	r6, r8
   18170:	sbcs	r0, r7, r9
   18174:	bge	18228 <build_ast@@Base+0xe78>
   18178:	strd	r8, [r4, #24]
   1817c:	ldr	r0, [r3, #24]
   18180:	ldr	ip, [r3, #28]
   18184:	adds	r2, r0, r2
   18188:	adc	r1, ip, r1
   1818c:	str	r1, [r4, #36]	; 0x24
   18190:	str	r2, [r4, #32]
   18194:	add	r1, r3, #40	; 0x28
   18198:	ldr	r2, [pc, #176]	; 18250 <build_ast@@Base+0xea0>
   1819c:	add	r0, r4, #40	; 0x28
   181a0:	bl	11858 <memcpy@plt>
   181a4:	ldr	r3, [sp, #36]	; 0x24
   181a8:	mov	r0, #0
   181ac:	str	r3, [r4]
   181b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   181b4:	ldr	ip, [r3, #16]
   181b8:	ldr	r5, [r3, #20]
   181bc:	adds	r0, ip, r0
   181c0:	adc	lr, r5, lr
   181c4:	str	r0, [r4, #16]
   181c8:	str	lr, [r4, #20]
   181cc:	ldrd	r8, [r3, #24]
   181d0:	cmp	r6, r8
   181d4:	sbcs	r0, r7, r9
   181d8:	bge	1823c <build_ast@@Base+0xe8c>
   181dc:	strd	r8, [r4, #24]
   181e0:	ldr	r0, [r3, #24]
   181e4:	ldr	ip, [r3, #28]
   181e8:	adds	r2, r0, r2
   181ec:	adc	r1, ip, r1
   181f0:	str	r1, [r4, #36]	; 0x24
   181f4:	str	r2, [r4, #32]
   181f8:	add	r1, r3, #40	; 0x28
   181fc:	add	r0, r4, #40	; 0x28
   18200:	bl	17bd0 <build_ast@@Base+0x820>
   18204:	b	181a4 <build_ast@@Base+0xdf4>
   18208:	cmp	r2, #0
   1820c:	beq	181a4 <build_ast@@Base+0xdf4>
   18210:	mov	r1, r0
   18214:	ldr	r0, [pc, #56]	; 18254 <build_ast@@Base+0xea4>
   18218:	add	r0, pc, r0
   1821c:	bl	17714 <build_ast@@Base+0x364>
   18220:	mvn	r0, #0
   18224:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18228:	adds	r2, r2, r8
   1822c:	adc	r1, r1, r9
   18230:	str	r1, [r4, #36]	; 0x24
   18234:	str	r2, [r4, #32]
   18238:	b	18194 <build_ast@@Base+0xde4>
   1823c:	adds	r2, r2, r8
   18240:	adc	r1, r1, r9
   18244:	str	r1, [r4, #36]	; 0x24
   18248:	str	r2, [r4, #32]
   1824c:	b	181f8 <build_ast@@Base+0xe48>
   18250:	andeq	r1, r0, r0, lsr #15
   18254:	andeq	r1, r0, r8, lsr #29
   18258:	ldr	r0, [pc, #52]	; 18294 <build_ast@@Base+0xee4>
   1825c:	ldr	r3, [pc, #52]	; 18298 <build_ast@@Base+0xee8>
   18260:	add	r0, pc, r0
   18264:	push	{lr}		; (str lr, [sp, #-4]!)
   18268:	mov	ip, #0
   1826c:	ldr	r3, [r0, r3]
   18270:	mvn	lr, #0
   18274:	mov	r2, ip
   18278:	str	lr, [r3, #24]
   1827c:	mov	r1, ip
   18280:	ldr	r0, [r3]
   18284:	pop	{lr}		; (ldr lr, [sp], #4)
   18288:	str	ip, [r3, #4]
   1828c:	str	ip, [r3, #8]
   18290:	b	11984 <fseek@plt>
   18294:	muleq	r1, r8, sp
   18298:	strheq	r0, [r0], -r4
   1829c:	push	{r4, r5, r6, r7, lr}
   182a0:	mov	r2, #0
   182a4:	sub	sp, sp, #36	; 0x24
   182a8:	mov	r3, #0
   182ac:	mov	r4, #0
   182b0:	mov	r6, r0
   182b4:	strd	r2, [sp, #8]
   182b8:	strd	r2, [sp, #16]
   182bc:	strh	r4, [sp, #2]
   182c0:	bl	118dc <getpid@plt>
   182c4:	ldr	r3, [pc, #196]	; 18390 <build_ast@@Base+0xfe0>
   182c8:	ldr	ip, [pc, #196]	; 18394 <build_ast@@Base+0xfe4>
   182cc:	add	r3, pc, r3
   182d0:	mvn	lr, #0
   182d4:	mov	r7, #1
   182d8:	ldr	r2, [pc, #184]	; 18398 <build_ast@@Base+0xfe8>
   182dc:	mov	r1, #66	; 0x42
   182e0:	str	r0, [sp, #24]
   182e4:	ldr	r5, [r3, ip]
   182e8:	mov	r0, r6
   182ec:	strh	r7, [sp]
   182f0:	str	r4, [r5, #4]
   182f4:	str	r4, [r5, #12]
   182f8:	str	r4, [r5, #8]
   182fc:	str	r4, [r5, #20]
   18300:	str	lr, [r5, #16]
   18304:	bl	11894 <open64@plt>
   18308:	subs	r6, r0, #0
   1830c:	movlt	r0, r4
   18310:	blt	18374 <build_ast@@Base+0xfc4>
   18314:	mov	r4, sp
   18318:	mov	r2, r4
   1831c:	mov	r1, #14
   18320:	mov	r0, r6
   18324:	bl	11954 <fcntl64@plt>
   18328:	cmp	r0, #0
   1832c:	beq	18340 <build_ast@@Base+0xf90>
   18330:	bl	1190c <__errno_location@plt>
   18334:	ldr	r3, [r0]
   18338:	cmp	r3, #4
   1833c:	beq	18318 <build_ast@@Base+0xf68>
   18340:	ldr	r1, [pc, #84]	; 1839c <build_ast@@Base+0xfec>
   18344:	mov	r0, r6
   18348:	add	r1, pc, r1
   1834c:	bl	11810 <fdopen@plt>
   18350:	cmp	r0, #0
   18354:	mov	r4, r0
   18358:	str	r0, [r5]
   1835c:	beq	1837c <build_ast@@Base+0xfcc>
   18360:	mov	r4, #1
   18364:	mov	r1, #0
   18368:	str	r4, [r5, #24]
   1836c:	bl	11828 <setbuf@plt>
   18370:	mov	r0, r4
   18374:	add	sp, sp, #36	; 0x24
   18378:	pop	{r4, r5, r6, r7, pc}
   1837c:	mov	r0, r6
   18380:	bl	119a8 <close@plt>
   18384:	mov	r0, r4
   18388:	add	sp, sp, #36	; 0x24
   1838c:	pop	{r4, r5, r6, r7, pc}
   18390:	andeq	r2, r1, ip, lsr #26
   18394:	strheq	r0, [r0], -r4
   18398:			; <UNDEFINED> instruction: 0x000001b6
   1839c:	andeq	r1, r0, r4, lsr #27
   183a0:	push	{r4, r5, r6, lr}
   183a4:	mov	r4, r1
   183a8:	ldr	r5, [pc, #248]	; 184a8 <build_ast@@Base+0x10f8>
   183ac:	ldr	ip, [r4, #8]
   183b0:	ldr	lr, [r4, #12]
   183b4:	ldr	r6, [r4]
   183b8:	cmp	ip, #0
   183bc:	mov	r1, r0
   183c0:	add	r5, pc, r5
   183c4:	add	r0, r6, lr
   183c8:	ble	18404 <build_ast@@Base+0x1054>
   183cc:	ldrb	r3, [r1]
   183d0:	cmp	r3, #47	; 0x2f
   183d4:	addeq	r2, r1, #1
   183d8:	ldrbeq	r3, [r1, #1]
   183dc:	movne	r2, r1
   183e0:	cmp	r3, #0
   183e4:	beq	18404 <build_ast@@Base+0x1054>
   183e8:	cmp	r3, #47	; 0x2f
   183ec:	moveq	r1, r2
   183f0:	ldrb	r3, [r2, #1]!
   183f4:	subeq	ip, ip, #1
   183f8:	cmp	r3, #0
   183fc:	cmpne	ip, #0
   18400:	bne	183e8 <build_ast@@Base+0x1038>
   18404:	cmp	lr, #0
   18408:	bne	18428 <build_ast@@Base+0x1078>
   1840c:	bl	1187c <strcpy@plt>
   18410:	ldr	r0, [r4]
   18414:	bl	1829c <build_ast@@Base+0xeec>
   18418:	cmp	r0, #0
   1841c:	beq	18440 <build_ast@@Base+0x1090>
   18420:	mov	r0, #0
   18424:	pop	{r4, r5, r6, pc}
   18428:	ldrb	r3, [r1]
   1842c:	cmp	r3, #47	; 0x2f
   18430:	movne	r3, #47	; 0x2f
   18434:	addne	r0, r0, #1
   18438:	strbne	r3, [r6, lr]
   1843c:	b	1840c <build_ast@@Base+0x105c>
   18440:	ldr	r0, [r4]
   18444:	bl	17fe0 <build_ast@@Base+0xc30>
   18448:	cmp	r0, #0
   1844c:	bne	18484 <build_ast@@Base+0x10d4>
   18450:	ldr	r0, [r4]
   18454:	bl	1829c <build_ast@@Base+0xeec>
   18458:	cmp	r0, #0
   1845c:	bne	18420 <build_ast@@Base+0x1070>
   18460:	ldr	r3, [pc, #68]	; 184ac <build_ast@@Base+0x10fc>
   18464:	ldr	r1, [pc, #68]	; 184b0 <build_ast@@Base+0x1100>
   18468:	ldr	r2, [r4]
   1846c:	ldr	r3, [r5, r3]
   18470:	add	r1, pc, r1
   18474:	ldr	r0, [r3]
   18478:	bl	11900 <fprintf@plt>
   1847c:	mvn	r0, #0
   18480:	pop	{r4, r5, r6, pc}
   18484:	ldr	r3, [pc, #32]	; 184ac <build_ast@@Base+0x10fc>
   18488:	ldr	r1, [pc, #36]	; 184b4 <build_ast@@Base+0x1104>
   1848c:	ldr	r2, [r4]
   18490:	ldr	r3, [r5, r3]
   18494:	add	r1, pc, r1
   18498:	ldr	r0, [r3]
   1849c:	bl	11900 <fprintf@plt>
   184a0:	mvn	r0, #0
   184a4:	pop	{r4, r5, r6, pc}
   184a8:	andeq	r2, r1, r8, lsr ip
   184ac:	andeq	r0, r0, r0, lsr #1
   184b0:	muleq	r0, r4, ip
   184b4:	andeq	r1, r0, ip, asr ip
   184b8:	ldr	r3, [pc, #96]	; 18520 <build_ast@@Base+0x1170>
   184bc:	ldr	r2, [pc, #96]	; 18524 <build_ast@@Base+0x1174>
   184c0:	add	r3, pc, r3
   184c4:	push	{r4, lr}
   184c8:	ldr	r4, [r3, r2]
   184cc:	ldr	r0, [r4]
   184d0:	cmp	r0, #0
   184d4:	beq	184f4 <build_ast@@Base+0x1144>
   184d8:	ldr	r3, [r4, #8]
   184dc:	cmp	r3, #0
   184e0:	bne	18504 <build_ast@@Base+0x1154>
   184e4:	bl	1193c <fclose@plt>
   184e8:	mov	r3, #0
   184ec:	str	r3, [r4]
   184f0:	str	r3, [r4, #12]
   184f4:	mov	r3, #0
   184f8:	str	r3, [r4, #24]
   184fc:	ldr	r0, [r4, #20]
   18500:	pop	{r4, pc}
   18504:	ldr	r2, [r4, #24]
   18508:	cmp	r2, #0
   1850c:	bge	184e4 <build_ast@@Base+0x1134>
   18510:	mov	r0, r3
   18514:	bl	1750c <build_ast@@Base+0x15c>
   18518:	ldr	r0, [r4]
   1851c:	b	184e4 <build_ast@@Base+0x1134>
   18520:	andeq	r2, r1, r8, lsr fp
   18524:	strheq	r0, [r0], -r4
   18528:	push	{r4, lr}
   1852c:	mov	r4, r0
   18530:	mov	r0, #1
   18534:	bl	17568 <build_ast@@Base+0x1b8>
   18538:	str	r4, [r0]
   1853c:	pop	{r4, pc}
   18540:	push	{r4, r5, r6, lr}
   18544:	mov	r5, r0
   18548:	mov	r0, #2
   1854c:	mov	r4, r1
   18550:	bl	17568 <build_ast@@Base+0x1b8>
   18554:	str	r5, [r0]
   18558:	str	r4, [r0, #4]
   1855c:	pop	{r4, r5, r6, pc}
   18560:	push	{r4, r5, r6, lr}
   18564:	mov	r5, r0
   18568:	mov	r0, #2
   1856c:	mov	r4, r1
   18570:	bl	17568 <build_ast@@Base+0x1b8>
   18574:	str	r5, [r0]
   18578:	str	r4, [r0, #4]
   1857c:	pop	{r4, r5, r6, pc}
   18580:	mov	r2, #0
   18584:	push	{r4, r5, r6, r7, r8, lr}
   18588:	mov	r3, r2
   1858c:	sub	sp, sp, #32
   18590:	mov	r5, r1
   18594:	mov	r7, r2
   18598:	mov	r4, r1
   1859c:	mov	r8, #1
   185a0:	str	r2, [sp]
   185a4:	str	r2, [sp, #4]
   185a8:	str	r2, [sp, #8]
   185ac:	str	r2, [sp, #12]
   185b0:	str	r2, [sp, #16]
   185b4:	str	r2, [sp, #20]
   185b8:	str	r2, [sp, #24]
   185bc:	str	r2, [sp, #28]
   185c0:	lsr	r2, r3, #5
   185c4:	ldr	lr, [r1, #40]	; 0x28
   185c8:	add	ip, sp, #32
   185cc:	cmp	lr, #0
   185d0:	add	r2, ip, r2, lsl #2
   185d4:	and	r6, r3, #31
   185d8:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   185dc:	add	r3, r3, #1
   185e0:	orrne	ip, ip, r8, lsl r6
   185e4:	addne	r7, r7, #1
   185e8:	strne	ip, [r2, #-32]	; 0xffffffe0
   185ec:	cmp	r3, #252	; 0xfc
   185f0:	add	r1, r1, #24
   185f4:	bne	185c0 <build_ast@@Base+0x1210>
   185f8:	add	r7, r7, r7, lsl #2
   185fc:	add	r1, r7, #17
   18600:	bl	18560 <build_ast@@Base+0x11b0>
   18604:	ldr	r0, [r5]
   18608:	bl	18528 <build_ast@@Base+0x1178>
   1860c:	ldr	r0, [r5, #8]
   18610:	bl	18528 <build_ast@@Base+0x1178>
   18614:	ldr	r0, [r5, #12]
   18618:	bl	18528 <build_ast@@Base+0x1178>
   1861c:	ldrd	r0, [r5, #16]
   18620:	bl	18540 <build_ast@@Base+0x1190>
   18624:	ldrd	r0, [r5, #24]
   18628:	bl	18540 <build_ast@@Base+0x1190>
   1862c:	ldrd	r0, [r5, #32]
   18630:	bl	18540 <build_ast@@Base+0x1190>
   18634:	sub	r6, sp, #4
   18638:	add	r7, sp, #28
   1863c:	ldr	r0, [r6, #4]!
   18640:	bl	18528 <build_ast@@Base+0x1178>
   18644:	cmp	r7, r6
   18648:	bne	1863c <build_ast@@Base+0x128c>
   1864c:	add	r5, r5, #6016	; 0x1780
   18650:	add	r5, r5, #32
   18654:	ldr	r3, [r4, #40]	; 0x28
   18658:	subs	r0, r3, #0
   1865c:	beq	18674 <build_ast@@Base+0x12c4>
   18660:	bl	18528 <build_ast@@Base+0x1178>
   18664:	ldrd	r0, [r4, #48]	; 0x30
   18668:	bl	18540 <build_ast@@Base+0x1190>
   1866c:	ldrd	r0, [r4, #56]	; 0x38
   18670:	bl	18540 <build_ast@@Base+0x1190>
   18674:	add	r4, r4, #24
   18678:	cmp	r4, r5
   1867c:	bne	18654 <build_ast@@Base+0x12a4>
   18680:	add	sp, sp, #32
   18684:	pop	{r4, r5, r6, r7, r8, pc}
   18688:	push	{r4, lr}
   1868c:	mov	r0, #1
   18690:	bl	175c8 <build_ast@@Base+0x218>
   18694:	subs	r3, r0, #0
   18698:	popeq	{r4, pc}
   1869c:	ldr	r0, [r3]
   186a0:	pop	{r4, lr}
   186a4:	b	1748c <build_ast@@Base+0xdc>
   186a8:	push	{r4, lr}
   186ac:	mov	r0, #2
   186b0:	bl	175c8 <build_ast@@Base+0x218>
   186b4:	subs	r2, r0, #0
   186b8:	beq	186dc <build_ast@@Base+0x132c>
   186bc:	ldr	r0, [r2]
   186c0:	bl	1748c <build_ast@@Base+0xdc>
   186c4:	mov	r3, r0
   186c8:	ldr	r0, [r2, #4]
   186cc:	bl	1748c <build_ast@@Base+0xdc>
   186d0:	mov	r1, r0
   186d4:	mov	r0, r3
   186d8:	pop	{r4, pc}
   186dc:	mov	r3, r2
   186e0:	mov	r1, r2
   186e4:	mov	r0, r3
   186e8:	pop	{r4, pc}
   186ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186f0:	sub	sp, sp, #28
   186f4:	mov	r8, r1
   186f8:	str	r3, [sp, #12]
   186fc:	mov	r4, #0
   18700:	add	r3, r1, #52	; 0x34
   18704:	add	r1, r1, #16
   18708:	str	r0, [sp, #20]
   1870c:	str	r2, [sp, #16]
   18710:	ldr	r2, [r3, #-4]!
   18714:	cmp	r2, #0
   18718:	addne	r4, r4, #1
   1871c:	cmp	r1, r3
   18720:	bne	18710 <build_ast@@Base+0x1360>
   18724:	add	r4, r4, #4
   18728:	lsl	r4, r4, #3
   1872c:	mov	r0, r4
   18730:	bl	118b8 <malloc@plt>
   18734:	subs	r6, r0, #0
   18738:	beq	1880c <build_ast@@Base+0x145c>
   1873c:	ldr	r3, [sp, #12]
   18740:	mov	r4, #0
   18744:	str	r3, [r6, #4]
   18748:	str	r4, [r6]
   1874c:	bl	18688 <build_ast@@Base+0x12d8>
   18750:	mov	r7, r4
   18754:	add	r5, r8, #12
   18758:	str	r0, [r6, #12]
   1875c:	bl	18688 <build_ast@@Base+0x12d8>
   18760:	str	r0, [r6, #16]
   18764:	bl	18688 <build_ast@@Base+0x12d8>
   18768:	str	r0, [r6, #20]
   1876c:	b	1877c <build_ast@@Base+0x13cc>
   18770:	add	r4, r4, #1
   18774:	cmp	r4, #9
   18778:	beq	187f8 <build_ast@@Base+0x1448>
   1877c:	ldr	r3, [r5, #4]!
   18780:	cmp	r3, #0
   18784:	beq	18770 <build_ast@@Base+0x13c0>
   18788:	bl	18688 <build_ast@@Base+0x12d8>
   1878c:	lsl	r3, r4, #17
   18790:	add	r3, r3, #27262976	; 0x1a00000
   18794:	add	r3, r3, #65536	; 0x10000
   18798:	cmp	r0, r3
   1879c:	bne	18860 <build_ast@@Base+0x14b0>
   187a0:	bl	18688 <build_ast@@Base+0x12d8>
   187a4:	lsr	sl, r0, #1
   187a8:	lsl	fp, sl, #3
   187ac:	mov	r0, fp
   187b0:	bl	118b8 <malloc@plt>
   187b4:	subs	r9, r0, #0
   187b8:	beq	18870 <build_ast@@Base+0x14c0>
   187bc:	add	r1, r6, r7, lsl #3
   187c0:	cmp	sl, #0
   187c4:	str	sl, [r1, #24]
   187c8:	str	r9, [r1, #28]
   187cc:	sub	fp, sl, #1
   187d0:	beq	187e8 <build_ast@@Base+0x1438>
   187d4:	bl	186a8 <build_ast@@Base+0x12f8>
   187d8:	sub	fp, fp, #1
   187dc:	cmn	fp, #1
   187e0:	strd	r0, [r9], #8
   187e4:	bne	187d4 <build_ast@@Base+0x1424>
   187e8:	add	r4, r4, #1
   187ec:	cmp	r4, #9
   187f0:	add	r7, r7, #1
   187f4:	bne	1877c <build_ast@@Base+0x13cc>
   187f8:	ldr	r3, [sp, #16]
   187fc:	mov	r0, r6
   18800:	str	r6, [r3]
   18804:	add	sp, sp, #28
   18808:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1880c:	mvn	r5, #0
   18810:	cmp	r4, #0
   18814:	bne	18854 <build_ast@@Base+0x14a4>
   18818:	ldr	r3, [pc, #92]	; 1887c <build_ast@@Base+0x14cc>
   1881c:	mov	r4, r5
   18820:	add	r3, pc, r3
   18824:	ldr	r0, [pc, #84]	; 18880 <build_ast@@Base+0x14d0>
   18828:	ldr	r2, [sp, #12]
   1882c:	ldr	r1, [sp, #20]
   18830:	str	r4, [sp]
   18834:	add	r0, pc, r0
   18838:	bl	17714 <build_ast@@Base+0x364>
   1883c:	mov	r2, r5
   18840:	mov	r1, r6
   18844:	mov	r0, r8
   18848:	add	sp, sp, #28
   1884c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18850:	b	17748 <build_ast@@Base+0x398>
   18854:	ldr	r3, [pc, #40]	; 18884 <build_ast@@Base+0x14d4>
   18858:	add	r3, pc, r3
   1885c:	b	18824 <build_ast@@Base+0x1474>
   18860:	ldr	r3, [pc, #32]	; 18888 <build_ast@@Base+0x14d8>
   18864:	mov	r5, r4
   18868:	add	r3, pc, r3
   1886c:	b	18824 <build_ast@@Base+0x1474>
   18870:	mov	r5, r4
   18874:	mov	r4, fp
   18878:	b	18810 <build_ast@@Base+0x1460>
   1887c:	andeq	r1, r0, r0, lsl #18
   18880:	andeq	r1, r0, r0, lsl r9
   18884:	ldrdeq	r1, [r0], -ip
   18888:			; <UNDEFINED> instruction: 0x000018b8
   1888c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18890:	sub	sp, sp, #36	; 0x24
   18894:	mov	r9, r0
   18898:	bl	18688 <build_ast@@Base+0x12d8>
   1889c:	mov	r7, #0
   188a0:	sub	r4, sp, #4
   188a4:	add	r5, sp, #28
   188a8:	str	r0, [r9]
   188ac:	bl	18688 <build_ast@@Base+0x12d8>
   188b0:	str	r0, [r9, #8]
   188b4:	bl	18688 <build_ast@@Base+0x12d8>
   188b8:	str	r0, [r9, #12]
   188bc:	bl	186a8 <build_ast@@Base+0x12f8>
   188c0:	strd	r0, [r9, #16]
   188c4:	bl	186a8 <build_ast@@Base+0x12f8>
   188c8:	strd	r0, [r9, #24]
   188cc:	bl	186a8 <build_ast@@Base+0x12f8>
   188d0:	ldr	r2, [pc, #264]	; 189e0 <build_ast@@Base+0x1630>
   188d4:	strd	r0, [r9, #32]
   188d8:	add	r0, r9, #40	; 0x28
   188dc:	mov	r1, r7
   188e0:	bl	11924 <memset@plt>
   188e4:	bl	18688 <build_ast@@Base+0x12d8>
   188e8:	str	r0, [r4, #4]!
   188ec:	bl	195d0 <__gcov_sort_n_vals@@Base+0x64c>
   188f0:	cmp	r4, r5
   188f4:	add	r7, r7, r0
   188f8:	bne	188e4 <build_ast@@Base+0x1534>
   188fc:	cmp	r7, #0
   18900:	sub	r7, r7, #1
   18904:	beq	189cc <build_ast@@Base+0x161c>
   18908:	ldr	r8, [pc, #212]	; 189e4 <build_ast@@Base+0x1634>
   1890c:	ldr	sl, [pc, #212]	; 189e8 <build_ast@@Base+0x1638>
   18910:	mov	r4, #0
   18914:	add	r8, pc, r8
   18918:	add	sl, pc, sl
   1891c:	mov	r5, r4
   18920:	mov	r6, r4
   18924:	cmp	r4, #0
   18928:	addeq	r3, sp, #32
   1892c:	addeq	r6, r3, r5, lsl #2
   18930:	subeq	r6, r6, #36	; 0x24
   18934:	beq	18950 <build_ast@@Base+0x15a0>
   18938:	b	18978 <build_ast@@Base+0x15c8>
   1893c:	ldr	r4, [r6, #4]!
   18940:	add	r3, r5, #1
   18944:	cmp	r4, #0
   18948:	bne	18970 <build_ast@@Base+0x15c0>
   1894c:	mov	r5, r3
   18950:	cmp	r5, #7
   18954:	bls	1893c <build_ast@@Base+0x158c>
   18958:	mov	r0, r8
   1895c:	bl	17714 <build_ast@@Base+0x364>
   18960:	ldr	r4, [r6, #4]!
   18964:	add	r3, r5, #1
   18968:	cmp	r4, #0
   1896c:	beq	1894c <build_ast@@Base+0x159c>
   18970:	lsl	r6, r5, #5
   18974:	mov	r5, r3
   18978:	tst	r4, #1
   1897c:	bne	18990 <build_ast@@Base+0x15e0>
   18980:	lsr	r4, r4, #1
   18984:	tst	r4, #1
   18988:	add	r6, r6, #1
   1898c:	beq	18980 <build_ast@@Base+0x15d0>
   18990:	cmp	r6, #251	; 0xfb
   18994:	bhi	189d4 <build_ast@@Base+0x1624>
   18998:	bl	18688 <build_ast@@Base+0x12d8>
   1899c:	add	fp, r6, r6, lsl #1
   189a0:	sub	r7, r7, #1
   189a4:	add	fp, r9, fp, lsl #3
   189a8:	lsr	r4, r4, #1
   189ac:	add	r6, r6, #1
   189b0:	str	r0, [fp, #40]	; 0x28
   189b4:	bl	186a8 <build_ast@@Base+0x12f8>
   189b8:	strd	r0, [fp, #48]	; 0x30
   189bc:	bl	186a8 <build_ast@@Base+0x12f8>
   189c0:	cmn	r7, #1
   189c4:	strd	r0, [fp, #56]	; 0x38
   189c8:	bne	18924 <build_ast@@Base+0x1574>
   189cc:	add	sp, sp, #36	; 0x24
   189d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189d4:	mov	r0, sl
   189d8:	bl	17714 <build_ast@@Base+0x364>
   189dc:	b	18998 <build_ast@@Base+0x15e8>
   189e0:	andeq	r1, r0, r0, lsr #15
   189e4:	andeq	r1, r0, r4, asr r8
   189e8:	muleq	r0, r0, r8
   189ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189f0:	sub	sp, sp, #6080	; 0x17c0
   189f4:	sub	sp, sp, #28
   189f8:	mov	r4, r1
   189fc:	strd	r2, [sp, #4]
   18a00:	add	r3, sp, #6144	; 0x1800
   18a04:	mov	r9, r0
   18a08:	ldr	r7, [r3]
   18a0c:	add	r3, sp, #6144	; 0x1800
   18a10:	add	r3, r3, #4
   18a14:	ldr	r6, [r3]
   18a18:	add	r3, sp, #6144	; 0x1800
   18a1c:	add	r3, r3, #8
   18a20:	ldr	sl, [r3]
   18a24:	bl	18688 <build_ast@@Base+0x12d8>
   18a28:	add	r3, r4, #12
   18a2c:	mov	r2, r9
   18a30:	str	r3, [sp, #12]
   18a34:	mov	r1, r0
   18a38:	mov	r0, r3
   18a3c:	bl	180a4 <build_ast@@Base+0xcf4>
   18a40:	cmp	r0, #0
   18a44:	beq	18ccc <build_ast@@Base+0x191c>
   18a48:	bl	18688 <build_ast@@Base+0x12d8>
   18a4c:	ldr	r3, [r4, #8]
   18a50:	cmp	r0, r3
   18a54:	bne	18ae8 <build_ast@@Base+0x1738>
   18a58:	ldr	fp, [pc, #628]	; 18cd4 <build_ast@@Base+0x1924>
   18a5c:	add	r5, sp, #16
   18a60:	add	fp, pc, fp
   18a64:	bl	1743c <build_ast@@Base+0x8c>
   18a68:	str	r0, [r6]
   18a6c:	bl	18688 <build_ast@@Base+0x12d8>
   18a70:	cmp	r0, #-1560281088	; 0xa3000000
   18a74:	bne	18b2c <build_ast@@Base+0x177c>
   18a78:	bl	18688 <build_ast@@Base+0x12d8>
   18a7c:	mov	r0, r5
   18a80:	bl	1888c <build_ast@@Base+0x14dc>
   18a84:	bl	17460 <build_ast@@Base+0xb0>
   18a88:	add	r2, sp, #2000	; 0x7d0
   18a8c:	add	r2, r2, #8
   18a90:	subs	r8, r0, #0
   18a94:	bne	18c60 <build_ast@@Base+0x18b0>
   18a98:	ldr	r3, [r7]
   18a9c:	cmp	r3, #0
   18aa0:	bne	18af8 <build_ast@@Base+0x1748>
   18aa4:	ldr	r3, [r2, #-1992]	; 0xfffff838
   18aa8:	cmp	r3, sl
   18aac:	bne	18a64 <build_ast@@Base+0x16b4>
   18ab0:	ldr	r3, [sp, #8]
   18ab4:	ldr	r2, [r2, #-1984]	; 0xfffff840
   18ab8:	ldr	r3, [r3]
   18abc:	cmp	r2, r3
   18ac0:	bne	18a64 <build_ast@@Base+0x16b4>
   18ac4:	ldr	r2, [pc, #524]	; 18cd8 <build_ast@@Base+0x1928>
   18ac8:	mov	r1, r5
   18acc:	ldr	r0, [sp, #4]
   18ad0:	bl	11858 <memcpy@plt>
   18ad4:	ldr	r3, [r6]
   18ad8:	str	r3, [r7]
   18adc:	b	18a64 <build_ast@@Base+0x16b4>
   18ae0:	cmp	r0, #0
   18ae4:	bne	18ca0 <build_ast@@Base+0x18f0>
   18ae8:	mov	r0, #0
   18aec:	add	sp, sp, #6080	; 0x17c0
   18af0:	add	sp, sp, #28
   18af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18af8:	ldr	r0, [pc, #476]	; 18cdc <build_ast@@Base+0x192c>
   18afc:	bl	118b8 <malloc@plt>
   18b00:	ldr	r2, [pc, #464]	; 18cd8 <build_ast@@Base+0x1928>
   18b04:	mov	r1, r5
   18b08:	mov	r3, r0
   18b0c:	str	r0, [fp]
   18b10:	add	r0, r0, #8
   18b14:	str	r3, [sp]
   18b18:	bl	11858 <memcpy@plt>
   18b1c:	ldr	r3, [sp]
   18b20:	str	r8, [r3]
   18b24:	ldr	fp, [fp]
   18b28:	b	18a64 <build_ast@@Base+0x16b4>
   18b2c:	ldr	r5, [r4, #52]	; 0x34
   18b30:	cmp	r5, #0
   18b34:	beq	18ae0 <build_ast@@Base+0x1730>
   18b38:	ldr	r3, [r4, #56]	; 0x38
   18b3c:	cmp	r0, #16777216	; 0x1000000
   18b40:	ldr	r8, [r3]
   18b44:	bne	18c9c <build_ast@@Base+0x18ec>
   18b48:	ldr	r6, [pc, #400]	; 18ce0 <build_ast@@Base+0x1930>
   18b4c:	mov	r5, #0
   18b50:	add	r6, pc, r6
   18b54:	add	r6, r6, #4
   18b58:	b	18b9c <build_ast@@Base+0x17ec>
   18b5c:	mov	r2, r6
   18b60:	mov	r3, r5
   18b64:	mov	r1, r4
   18b68:	mov	r0, r9
   18b6c:	bl	186ec <build_ast@@Base+0x133c>
   18b70:	subs	r6, r0, #0
   18b74:	beq	18ca0 <build_ast@@Base+0x18f0>
   18b78:	bl	18688 <build_ast@@Base+0x12d8>
   18b7c:	ldr	r3, [r4, #52]	; 0x34
   18b80:	add	r5, r5, #1
   18b84:	cmp	r3, r5
   18b88:	beq	18ae0 <build_ast@@Base+0x1730>
   18b8c:	ldr	r3, [r4, #56]	; 0x38
   18b90:	cmp	r0, #16777216	; 0x1000000
   18b94:	ldr	r8, [r3, r5, lsl #2]
   18b98:	bne	18ca0 <build_ast@@Base+0x18f0>
   18b9c:	bl	18688 <build_ast@@Base+0x12d8>
   18ba0:	cmp	r0, #0
   18ba4:	beq	18b78 <build_ast@@Base+0x17c8>
   18ba8:	cmp	r0, #3
   18bac:	bne	18ca0 <build_ast@@Base+0x18f0>
   18bb0:	cmp	r8, #0
   18bb4:	beq	18b5c <build_ast@@Base+0x17ac>
   18bb8:	ldr	r3, [r8]
   18bbc:	cmp	r4, r3
   18bc0:	bne	18b5c <build_ast@@Base+0x17ac>
   18bc4:	bl	18688 <build_ast@@Base+0x12d8>
   18bc8:	ldr	r3, [r8, #4]
   18bcc:	cmp	r0, r3
   18bd0:	bne	18ca0 <build_ast@@Base+0x18f0>
   18bd4:	bl	18688 <build_ast@@Base+0x12d8>
   18bd8:	ldr	r3, [r8, #8]
   18bdc:	cmp	r0, r3
   18be0:	bne	18ca0 <build_ast@@Base+0x18f0>
   18be4:	bl	18688 <build_ast@@Base+0x12d8>
   18be8:	ldr	r3, [r8, #12]
   18bec:	cmp	r0, r3
   18bf0:	bne	18ca0 <build_ast@@Base+0x18f0>
   18bf4:	ldr	r7, [pc, #232]	; 18ce4 <build_ast@@Base+0x1934>
   18bf8:	ldr	fp, [sp, #12]
   18bfc:	add	r8, r8, #16
   18c00:	ldr	sl, [fp, #4]!
   18c04:	cmp	sl, #0
   18c08:	beq	18c40 <build_ast@@Base+0x1890>
   18c0c:	bl	18688 <build_ast@@Base+0x12d8>
   18c10:	str	r0, [sp]
   18c14:	bl	18688 <build_ast@@Base+0x12d8>
   18c18:	ldr	r3, [sp]
   18c1c:	cmp	r3, r7
   18c20:	bne	18ca0 <build_ast@@Base+0x18f0>
   18c24:	ldr	r3, [r8]
   18c28:	mov	r1, r3
   18c2c:	cmp	r0, r3, lsl #1
   18c30:	bne	18ca0 <build_ast@@Base+0x18f0>
   18c34:	ldr	r0, [r8, #4]
   18c38:	blx	sl
   18c3c:	add	r8, r8, #8
   18c40:	ldr	r3, [pc, #160]	; 18ce8 <build_ast@@Base+0x1938>
   18c44:	add	r7, r7, #131072	; 0x20000
   18c48:	cmp	r7, r3
   18c4c:	bne	18c00 <build_ast@@Base+0x1850>
   18c50:	bl	17460 <build_ast@@Base+0xb0>
   18c54:	cmp	r0, #0
   18c58:	beq	18b78 <build_ast@@Base+0x17c8>
   18c5c:	mov	r8, r0
   18c60:	cmp	r8, #0
   18c64:	blt	18c90 <build_ast@@Base+0x18e0>
   18c68:	ldr	r2, [pc, #124]	; 18cec <build_ast@@Base+0x193c>
   18c6c:	add	r2, pc, r2
   18c70:	ldr	r0, [pc, #120]	; 18cf0 <build_ast@@Base+0x1940>
   18c74:	mov	r1, r9
   18c78:	add	r0, pc, r0
   18c7c:	bl	17714 <build_ast@@Base+0x364>
   18c80:	mvn	r0, #0
   18c84:	add	sp, sp, #6080	; 0x17c0
   18c88:	add	sp, sp, #28
   18c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c90:	ldr	r2, [pc, #92]	; 18cf4 <build_ast@@Base+0x1944>
   18c94:	add	r2, pc, r2
   18c98:	b	18c70 <build_ast@@Base+0x18c0>
   18c9c:	mov	r5, #0
   18ca0:	ldr	r2, [pc, #80]	; 18cf8 <build_ast@@Base+0x1948>
   18ca4:	ldr	r0, [pc, #80]	; 18cfc <build_ast@@Base+0x194c>
   18ca8:	mov	r3, r5
   18cac:	mov	r1, r9
   18cb0:	add	r2, pc, r2
   18cb4:	add	r0, pc, r0
   18cb8:	bl	17714 <build_ast@@Base+0x364>
   18cbc:	mvn	r0, #0
   18cc0:	add	sp, sp, #6080	; 0x17c0
   18cc4:	add	sp, sp, #28
   18cc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ccc:	mvn	r0, #0
   18cd0:	b	18aec <build_ast@@Base+0x173c>
   18cd4:	andeq	r3, r1, r8, lsl sp
   18cd8:	andeq	r1, r0, r8, asr #15
   18cdc:	ldrdeq	r1, [r0], -r0
   18ce0:	andeq	r3, r1, r8, lsr #24
   18ce4:			; <UNDEFINED> instruction: 0x01a10000
   18ce8:			; <UNDEFINED> instruction: 0x01b30000
   18cec:	andeq	r1, r0, r4, lsl #11
   18cf0:	andeq	r1, r0, r8, lsr #11
   18cf4:	andeq	r1, r0, r0, asr r5
   18cf8:			; <UNDEFINED> instruction: 0x00000fb0
   18cfc:	andeq	r1, r0, r4, asr #10
   18d00:	ldr	r3, [pc, #72]	; 18d50 <build_ast@@Base+0x19a0>
   18d04:	ldr	r2, [pc, #72]	; 18d54 <build_ast@@Base+0x19a4>
   18d08:	add	r3, pc, r3
   18d0c:	push	{r4, r5, r6, lr}
   18d10:	mov	r5, r0
   18d14:	ldr	r4, [r3, r2]
   18d18:	ldr	r0, [r4, #8]
   18d1c:	cmp	r0, #0
   18d20:	bne	18d48 <build_ast@@Base+0x1998>
   18d24:	lsl	r1, r5, #2
   18d28:	mov	r2, #0
   18d2c:	ldr	r0, [r4]
   18d30:	bl	11984 <fseek@plt>
   18d34:	ldr	r0, [r4]
   18d38:	bl	11864 <ftell@plt>
   18d3c:	asr	r0, r0, #2
   18d40:	str	r0, [r4, #4]
   18d44:	pop	{r4, r5, r6, pc}
   18d48:	bl	1750c <build_ast@@Base+0x15c>
   18d4c:	b	18d24 <build_ast@@Base+0x1974>
   18d50:	strdeq	r2, [r1], -r0
   18d54:	strheq	r0, [r0], -r4
   18d58:	cmp	r2, #0
   18d5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d60:	mov	r8, r0
   18d64:	sub	sp, sp, #20
   18d68:	mov	r5, r1
   18d6c:	mov	r4, r3
   18d70:	beq	18f40 <build_ast@@Base+0x1b90>
   18d74:	cmp	r4, #0
   18d78:	bne	18f5c <build_ast@@Base+0x1bac>
   18d7c:	mov	r1, r5
   18d80:	ldr	r5, [pc, #480]	; 18f68 <build_ast@@Base+0x1bb8>
   18d84:	mov	r0, #-1560281088	; 0xa3000000
   18d88:	add	r5, pc, r5
   18d8c:	bl	18580 <build_ast@@Base+0x11d0>
   18d90:	ldr	r4, [r5]
   18d94:	cmp	r4, #0
   18d98:	beq	18dc4 <build_ast@@Base+0x1a14>
   18d9c:	add	r1, r4, #8
   18da0:	mov	r0, #-1560281088	; 0xa3000000
   18da4:	bl	18580 <build_ast@@Base+0x11d0>
   18da8:	ldr	r3, [r5]
   18dac:	mov	r0, r3
   18db0:	ldr	r4, [r3]
   18db4:	bl	1184c <free@plt>
   18db8:	cmp	r4, #0
   18dbc:	str	r4, [r5]
   18dc0:	bne	18d9c <build_ast@@Base+0x19ec>
   18dc4:	ldr	r3, [r8, #52]	; 0x34
   18dc8:	cmp	r3, #0
   18dcc:	beq	18f18 <build_ast@@Base+0x1b68>
   18dd0:	ldr	r3, [pc, #404]	; 18f6c <build_ast@@Base+0x1bbc>
   18dd4:	ldr	r9, [pc, #404]	; 18f70 <build_ast@@Base+0x1bc0>
   18dd8:	add	r3, pc, r3
   18ddc:	str	r3, [sp, #4]
   18de0:	ldr	r3, [pc, #396]	; 18f74 <build_ast@@Base+0x1bc4>
   18de4:	mov	r7, #0
   18de8:	add	r3, pc, r3
   18dec:	str	r3, [sp, #12]
   18df0:	b	18e2c <build_ast@@Base+0x1a7c>
   18df4:	ldr	r3, [r8, #56]	; 0x38
   18df8:	ldr	r4, [r3, r7, lsl #2]
   18dfc:	cmp	r4, #0
   18e00:	beq	18e10 <build_ast@@Base+0x1a60>
   18e04:	ldr	r3, [r4]
   18e08:	cmp	r3, r8
   18e0c:	beq	18f28 <build_ast@@Base+0x1b78>
   18e10:	mov	r1, #0
   18e14:	mov	r0, #16777216	; 0x1000000
   18e18:	bl	18560 <build_ast@@Base+0x11b0>
   18e1c:	ldr	r3, [r8, #52]	; 0x34
   18e20:	add	r7, r7, #1
   18e24:	cmp	r3, r7
   18e28:	beq	18f18 <build_ast@@Base+0x1b68>
   18e2c:	ldr	r3, [sp, #4]
   18e30:	ldr	r4, [r3, #4]
   18e34:	cmp	r4, #0
   18e38:	beq	18df4 <build_ast@@Base+0x1a44>
   18e3c:	ldr	r3, [r4, #4]
   18e40:	cmp	r3, r7
   18e44:	bne	18df4 <build_ast@@Base+0x1a44>
   18e48:	mov	r3, #1
   18e4c:	mov	r1, #3
   18e50:	mov	r0, #16777216	; 0x1000000
   18e54:	add	r4, r4, #8
   18e58:	str	r3, [sp, #8]
   18e5c:	bl	18560 <build_ast@@Base+0x11b0>
   18e60:	ldr	r0, [r4, #4]
   18e64:	bl	18528 <build_ast@@Base+0x1178>
   18e68:	ldr	r0, [r4, #8]
   18e6c:	bl	18528 <build_ast@@Base+0x1178>
   18e70:	ldr	r0, [r4, #12]
   18e74:	bl	18528 <build_ast@@Base+0x1178>
   18e78:	ldr	r5, [pc, #248]	; 18f78 <build_ast@@Base+0x1bc8>
   18e7c:	add	r4, r4, #16
   18e80:	add	r6, r8, #12
   18e84:	b	18e94 <build_ast@@Base+0x1ae4>
   18e88:	add	r5, r5, #131072	; 0x20000
   18e8c:	cmp	r5, r9
   18e90:	beq	18ee4 <build_ast@@Base+0x1b34>
   18e94:	ldr	r3, [r6, #4]!
   18e98:	cmp	r3, #0
   18e9c:	beq	18e88 <build_ast@@Base+0x1ad8>
   18ea0:	ldr	fp, [r4]
   18ea4:	mov	r0, r5
   18ea8:	sub	sl, fp, #1
   18eac:	lsl	r1, fp, #1
   18eb0:	bl	18560 <build_ast@@Base+0x11b0>
   18eb4:	cmp	fp, #0
   18eb8:	ldr	fp, [r4, #4]
   18ebc:	beq	18ed4 <build_ast@@Base+0x1b24>
   18ec0:	sub	sl, sl, #1
   18ec4:	ldrd	r0, [fp], #8
   18ec8:	bl	18540 <build_ast@@Base+0x1190>
   18ecc:	cmn	sl, #1
   18ed0:	bne	18ec0 <build_ast@@Base+0x1b10>
   18ed4:	add	r5, r5, #131072	; 0x20000
   18ed8:	cmp	r5, r9
   18edc:	add	r4, r4, #8
   18ee0:	bne	18e94 <build_ast@@Base+0x1ae4>
   18ee4:	ldr	r3, [sp, #8]
   18ee8:	cmp	r3, #0
   18eec:	beq	18e1c <build_ast@@Base+0x1a6c>
   18ef0:	ldr	r4, [sp, #12]
   18ef4:	mov	r2, #9
   18ef8:	mov	r0, r8
   18efc:	ldr	r1, [r4, #4]
   18f00:	bl	17748 <build_ast@@Base+0x398>
   18f04:	ldr	r3, [r8, #52]	; 0x34
   18f08:	add	r7, r7, #1
   18f0c:	cmp	r3, r7
   18f10:	str	r0, [r4, #4]
   18f14:	bne	18e2c <build_ast@@Base+0x1a7c>
   18f18:	mov	r0, #0
   18f1c:	add	sp, sp, #20
   18f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f24:	b	18528 <build_ast@@Base+0x1178>
   18f28:	mov	r1, #3
   18f2c:	mov	r0, #16777216	; 0x1000000
   18f30:	bl	18560 <build_ast@@Base+0x11b0>
   18f34:	mov	r3, #0
   18f38:	str	r3, [sp, #8]
   18f3c:	b	18e60 <build_ast@@Base+0x1ab0>
   18f40:	ldr	r1, [pc, #52]	; 18f7c <build_ast@@Base+0x1bcc>
   18f44:	ldr	r0, [pc, #52]	; 18f80 <build_ast@@Base+0x1bd0>
   18f48:	bl	18560 <build_ast@@Base+0x11b0>
   18f4c:	ldr	r0, [r8, #8]
   18f50:	bl	18528 <build_ast@@Base+0x1178>
   18f54:	cmp	r4, #0
   18f58:	beq	18d7c <build_ast@@Base+0x19cc>
   18f5c:	mov	r0, r4
   18f60:	bl	18d00 <build_ast@@Base+0x1950>
   18f64:	b	18d7c <build_ast@@Base+0x19cc>
   18f68:	strdeq	r3, [r1], -r0
   18f6c:	andeq	r3, r1, r0, lsr #19
   18f70:			; <UNDEFINED> instruction: 0x01b30000
   18f74:	muleq	r1, r0, r9
   18f78:			; <UNDEFINED> instruction: 0x01a10000
   18f7c:	teqmi	r8, sl, lsr #6
   18f80:	strbvs	r6, [r3, -r1, ror #8]!

00018f84 <__gcov_sort_n_vals@@Base>:
   18f84:	cmp	r1, #2
   18f88:	bxle	lr
   18f8c:	sub	r1, r1, #3
   18f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f94:	add	r2, r0, #8
   18f98:	sub	sp, sp, #20
   18f9c:	mov	r6, r0
   18fa0:	bic	r7, r1, #1
   18fa4:	mvn	r8, #15
   18fa8:	mov	lr, #0
   18fac:	ldrd	r0, [r2]
   18fb0:	ldrd	r4, [r2, #16]
   18fb4:	ldrd	sl, [r2, #8]
   18fb8:	add	r9, r2, #16
   18fbc:	cmp	r0, r4
   18fc0:	sbcs	r3, r1, r5
   18fc4:	mov	ip, r9
   18fc8:	sub	r1, r6, r8
   18fcc:	strd	sl, [sp]
   18fd0:	mov	r3, lr
   18fd4:	bge	1903c <__gcov_sort_n_vals@@Base+0xb8>
   18fd8:	add	sl, r8, #16
   18fdc:	mvn	fp, #1
   18fe0:	add	sl, r2, sl
   18fe4:	orr	fp, lr, fp
   18fe8:	str	r7, [sp, #8]
   18fec:	str	r6, [sp, #12]
   18ff0:	b	19008 <__gcov_sort_n_vals@@Base+0x84>
   18ff4:	ldrd	r6, [ip, #-16]
   18ff8:	sub	r2, r2, #16
   18ffc:	cmp	r6, r4
   19000:	sbcs	r1, r7, r5
   19004:	bge	19064 <__gcov_sort_n_vals@@Base+0xe0>
   19008:	ldrd	r6, [r2, #-8]
   1900c:	lsl	r1, r3, #3
   19010:	mov	r0, r3
   19014:	strd	r6, [r2, #8]
   19018:	ldrd	r6, [sl, r1]
   1901c:	sub	r3, r3, #2
   19020:	cmp	r3, fp
   19024:	strd	r6, [r2, #16]
   19028:	mov	ip, r2
   1902c:	bne	18ff4 <__gcov_sort_n_vals@@Base+0x70>
   19030:	ldr	r6, [sp, #12]
   19034:	ldr	r7, [sp, #8]
   19038:	add	r1, r6, r1
   1903c:	ldrd	r2, [sp]
   19040:	cmp	lr, r7
   19044:	sub	r8, r8, #16
   19048:	strd	r2, [r1]
   1904c:	add	lr, lr, #2
   19050:	strd	r4, [ip]
   19054:	mov	r2, r9
   19058:	bne	18fac <__gcov_sort_n_vals@@Base+0x28>
   1905c:	add	sp, sp, #20
   19060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19064:	ldr	r6, [sp, #12]
   19068:	ldr	r7, [sp, #8]
   1906c:	add	r1, r6, r0, lsl #3
   19070:	b	1903c <__gcov_sort_n_vals@@Base+0xb8>
   19074:	push	{r4, r5, r6, lr}
   19078:	ldr	r4, [pc, #76]	; 190cc <__gcov_sort_n_vals@@Base+0x148>
   1907c:	smull	r2, r3, r4, r0
   19080:	asr	r4, r0, #31
   19084:	rsb	r4, r4, r3, asr #1
   19088:	add	r4, r4, r4, lsl #3
   1908c:	subs	r4, r0, r4
   19090:	bne	190c8 <__gcov_sort_n_vals@@Base+0x144>
   19094:	cmp	r0, #0
   19098:	mov	r6, r0
   1909c:	ldr	r5, [r1]
   190a0:	pople	{r4, r5, r6, pc}
   190a4:	add	r5, r5, #8
   190a8:	mov	r0, r5
   190ac:	add	r4, r4, #9
   190b0:	mov	r1, #8
   190b4:	bl	18f84 <__gcov_sort_n_vals@@Base>
   190b8:	cmp	r6, r4
   190bc:	add	r5, r5, #72	; 0x48
   190c0:	bgt	190a8 <__gcov_sort_n_vals@@Base+0x124>
   190c4:	pop	{r4, r5, r6, pc}
   190c8:	bl	1199c <abort@plt>
   190cc:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   190d0:	ldr	r3, [r0, #48]	; 0x30
   190d4:	cmp	r3, #0
   190d8:	bxeq	lr
   190dc:	push	{r4, r5, r6, lr}
   190e0:	ldr	lr, [r0, #52]	; 0x34
   190e4:	cmp	lr, #0
   190e8:	popeq	{r4, r5, r6, pc}
   190ec:	mov	r5, r0
   190f0:	mov	r4, #0
   190f4:	add	r6, r0, #12
   190f8:	ldr	r1, [r5, #56]	; 0x38
   190fc:	mov	r2, r6
   19100:	mov	r3, #0
   19104:	ldr	r1, [r1, r4, lsl #2]
   19108:	add	r1, r1, #16
   1910c:	ldr	ip, [r2, #4]!
   19110:	cmp	ip, #0
   19114:	beq	19124 <__gcov_sort_n_vals@@Base+0x1a0>
   19118:	cmp	r3, #8
   1911c:	beq	19140 <__gcov_sort_n_vals@@Base+0x1bc>
   19120:	add	r1, r1, #8
   19124:	add	r3, r3, #1
   19128:	cmp	r3, #9
   1912c:	bne	1910c <__gcov_sort_n_vals@@Base+0x188>
   19130:	add	r4, r4, #1
   19134:	cmp	lr, r4
   19138:	bne	190f8 <__gcov_sort_n_vals@@Base+0x174>
   1913c:	pop	{r4, r5, r6, pc}
   19140:	ldr	r0, [r1], #4
   19144:	bl	19074 <__gcov_sort_n_vals@@Base+0xf0>
   19148:	ldr	lr, [r5, #52]	; 0x34
   1914c:	b	19130 <__gcov_sort_n_vals@@Base+0x1ac>
   19150:	push	{r4, r5, r6, r7, r8, r9, lr}
   19154:	sub	sp, sp, #6080	; 0x17c0
   19158:	ldr	ip, [pc, #396]	; 192ec <__gcov_sort_n_vals@@Base+0x368>
   1915c:	sub	sp, sp, #36	; 0x24
   19160:	add	ip, pc, ip
   19164:	add	r5, sp, #2016	; 0x7e0
   19168:	mov	r4, r0
   1916c:	mov	r6, r1
   19170:	mov	r1, #0
   19174:	str	r1, [ip, #4]
   19178:	str	r1, [ip]
   1917c:	mov	r8, r2
   19180:	mov	r7, r3
   19184:	str	r1, [r5, #-2000]	; 0xfffff830
   19188:	str	r1, [r5, #-1996]	; 0xfffff834
   1918c:	bl	190d0 <__gcov_sort_n_vals@@Base+0x14c>
   19190:	mov	r1, r6
   19194:	ldr	r0, [r4, #12]
   19198:	bl	183a0 <build_ast@@Base+0xff0>
   1919c:	cmn	r0, #1
   191a0:	beq	1921c <__gcov_sort_n_vals@@Base+0x298>
   191a4:	bl	18688 <build_ast@@Base+0x12d8>
   191a8:	cmp	r0, #0
   191ac:	beq	19228 <__gcov_sort_n_vals@@Base+0x2a4>
   191b0:	ldr	r2, [pc, #312]	; 192f0 <__gcov_sort_n_vals@@Base+0x36c>
   191b4:	ldr	r1, [r6]
   191b8:	cmp	r0, r2
   191bc:	beq	19280 <__gcov_sort_n_vals@@Base+0x2fc>
   191c0:	ldr	r0, [pc, #300]	; 192f4 <__gcov_sort_n_vals@@Base+0x370>
   191c4:	add	r0, pc, r0
   191c8:	bl	17714 <build_ast@@Base+0x364>
   191cc:	ldr	r5, [pc, #292]	; 192f8 <__gcov_sort_n_vals@@Base+0x374>
   191d0:	add	r5, pc, r5
   191d4:	ldr	r1, [r5, #4]
   191d8:	cmp	r1, #0
   191dc:	beq	191fc <__gcov_sort_n_vals@@Base+0x278>
   191e0:	mov	r2, #9
   191e4:	mov	r0, r4
   191e8:	bl	17748 <build_ast@@Base+0x398>
   191ec:	cmp	r0, #0
   191f0:	mov	r1, r0
   191f4:	str	r0, [r5, #4]
   191f8:	bne	191e0 <__gcov_sort_n_vals@@Base+0x25c>
   191fc:	bl	184b8 <build_ast@@Base+0x1108>
   19200:	cmp	r0, #0
   19204:	beq	1921c <__gcov_sort_n_vals@@Base+0x298>
   19208:	blt	192e0 <__gcov_sort_n_vals@@Base+0x35c>
   1920c:	ldr	r0, [pc, #232]	; 192fc <__gcov_sort_n_vals@@Base+0x378>
   19210:	add	r0, pc, r0
   19214:	ldr	r1, [r6]
   19218:	bl	17714 <build_ast@@Base+0x364>
   1921c:	add	sp, sp, #6080	; 0x17c0
   19220:	add	sp, sp, #36	; 0x24
   19224:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19228:	bl	18258 <build_ast@@Base+0xea8>
   1922c:	ldr	r1, [r5, #-2000]	; 0xfffff830
   19230:	add	r9, sp, #24
   19234:	cmp	r1, #0
   19238:	beq	192c8 <__gcov_sort_n_vals@@Base+0x344>
   1923c:	add	r3, sp, #6144	; 0x1800
   19240:	str	r7, [sp, #4]
   19244:	ldr	r3, [r3]
   19248:	mov	r1, r8
   1924c:	str	r3, [sp]
   19250:	add	r2, r4, #16
   19254:	mov	r3, r9
   19258:	ldr	r0, [r6]
   1925c:	bl	18104 <build_ast@@Base+0xd54>
   19260:	cmn	r0, #1
   19264:	beq	191cc <__gcov_sort_n_vals@@Base+0x248>
   19268:	mov	r1, r9
   1926c:	ldr	r3, [r5, #-2000]	; 0xfffff830
   19270:	ldr	r2, [r5, #-1996]	; 0xfffff834
   19274:	mov	r0, r4
   19278:	bl	18d58 <build_ast@@Base+0x19a8>
   1927c:	b	191cc <__gcov_sort_n_vals@@Base+0x248>
   19280:	add	ip, sp, #20
   19284:	add	r3, sp, #16
   19288:	str	r7, [sp, #8]
   1928c:	stm	sp, {r3, ip}
   19290:	add	r3, sp, #6144	; 0x1800
   19294:	add	r9, sp, #24
   19298:	ldr	r3, [r3]
   1929c:	mov	r0, r1
   192a0:	mov	r2, r9
   192a4:	add	r3, r3, #8
   192a8:	mov	r1, r4
   192ac:	bl	189ec <build_ast@@Base+0x163c>
   192b0:	cmn	r0, #1
   192b4:	beq	191cc <__gcov_sort_n_vals@@Base+0x248>
   192b8:	bl	18258 <build_ast@@Base+0xea8>
   192bc:	ldr	r1, [r5, #-2000]	; 0xfffff830
   192c0:	cmp	r1, #0
   192c4:	bne	1923c <__gcov_sort_n_vals@@Base+0x2b8>
   192c8:	ldr	r2, [pc, #48]	; 19300 <__gcov_sort_n_vals@@Base+0x37c>
   192cc:	mov	r0, r9
   192d0:	bl	11924 <memset@plt>
   192d4:	ldr	r3, [r5, #-1996]	; 0xfffff834
   192d8:	str	r3, [r5, #-2000]	; 0xfffff830
   192dc:	b	1923c <__gcov_sort_n_vals@@Base+0x2b8>
   192e0:	ldr	r0, [pc, #28]	; 19304 <__gcov_sort_n_vals@@Base+0x380>
   192e4:	add	r0, pc, r0
   192e8:	b	19214 <__gcov_sort_n_vals@@Base+0x290>
   192ec:	andeq	r3, r1, r8, lsl r6
   192f0:	strbvs	r6, [r3, -r1, ror #8]!
   192f4:	strheq	r1, [r0], -r4
   192f8:	andeq	r3, r1, r8, lsr #11
   192fc:	andeq	r1, r0, ip, asr #32
   19300:	andeq	r1, r0, r8, asr #15
   19304:	andeq	r0, r0, r8, asr pc
   19308:	push	{r4, r5, r6, r7, r8, lr}
   1930c:	sub	sp, sp, #6080	; 0x17c0
   19310:	sub	sp, sp, #32
   19314:	add	r6, sp, #24
   19318:	add	r2, sp, #12
   1931c:	mov	r8, r1
   19320:	mov	r1, r6
   19324:	mov	r4, r0
   19328:	bl	17960 <build_ast@@Base+0x5b0>
   1932c:	add	r5, sp, #8
   19330:	mov	r7, r0
   19334:	mov	r0, r5
   19338:	bl	17af4 <build_ast@@Base+0x744>
   1933c:	cmp	r4, #0
   19340:	beq	19368 <__gcov_sort_n_vals@@Base+0x3e4>
   19344:	mov	r0, r4
   19348:	str	r6, [sp]
   1934c:	mov	r3, r7
   19350:	mov	r2, r8
   19354:	mov	r1, r5
   19358:	bl	19150 <__gcov_sort_n_vals@@Base+0x1cc>
   1935c:	ldr	r4, [r4, #4]
   19360:	cmp	r4, #0
   19364:	bne	19344 <__gcov_sort_n_vals@@Base+0x3c0>
   19368:	ldr	r0, [sp, #8]
   1936c:	bl	1184c <free@plt>
   19370:	add	sp, sp, #6080	; 0x17c0
   19374:	add	sp, sp, #32
   19378:	pop	{r4, r5, r6, r7, r8, pc}
   1937c:	ldrb	r1, [r0, #4]
   19380:	tst	r1, #1
   19384:	bxne	lr
   19388:	push	{r4, lr}
   1938c:	lsr	r1, r1, #1
   19390:	mov	r4, r0
   19394:	and	r1, r1, #1
   19398:	ldr	r0, [r0]
   1939c:	bl	19308 <__gcov_sort_n_vals@@Base+0x384>
   193a0:	ldrb	r3, [r4, #4]
   193a4:	bic	r3, r3, #3
   193a8:	orr	r3, r3, #3
   193ac:	strb	r3, [r4, #4]
   193b0:	pop	{r4, pc}
   193b4:	push	{r4, r5, r6, lr}
   193b8:	ldr	r4, [pc, #84]	; 19414 <__gcov_sort_n_vals@@Base+0x490>
   193bc:	ldr	r5, [pc, #84]	; 19418 <__gcov_sort_n_vals@@Base+0x494>
   193c0:	add	r4, pc, r4
   193c4:	mov	r0, r4
   193c8:	bl	1937c <__gcov_sort_n_vals@@Base+0x3f8>
   193cc:	ldr	r3, [r4, #8]
   193d0:	add	r5, pc, r5
   193d4:	cmp	r3, #0
   193d8:	ldrne	r2, [r4, #12]
   193dc:	strne	r2, [r3, #12]
   193e0:	ldr	r2, [pc, #52]	; 1941c <__gcov_sort_n_vals@@Base+0x498>
   193e4:	add	r2, pc, r2
   193e8:	ldr	r2, [r2, #12]
   193ec:	cmp	r2, #0
   193f0:	strne	r3, [r2, #8]
   193f4:	beq	19400 <__gcov_sort_n_vals@@Base+0x47c>
   193f8:	pop	{r4, r5, r6, lr}
   193fc:	b	174bc <build_ast@@Base+0x10c>
   19400:	ldr	r2, [pc, #24]	; 19420 <__gcov_sort_n_vals@@Base+0x49c>
   19404:	ldr	r2, [r5, r2]
   19408:	pop	{r4, r5, r6, lr}
   1940c:	str	r3, [r2, #4]
   19410:	b	174bc <build_ast@@Base+0x10c>
   19414:	andeq	r3, r1, r4, lsr #14
   19418:	andeq	r1, r1, r8, lsr #24
   1941c:	andeq	r3, r1, r0, lsl #14
   19420:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   19424:	ldr	r1, [r0]
   19428:	push	{r4, r5, r6, lr}
   1942c:	cmp	r1, #0
   19430:	ldr	r5, [pc, #156]	; 194d4 <__gcov_sort_n_vals@@Base+0x550>
   19434:	add	r5, pc, r5
   19438:	popeq	{r4, r5, r6, pc}
   1943c:	ldr	r3, [r0, #52]	; 0x34
   19440:	cmp	r3, #0
   19444:	popeq	{r4, r5, r6, pc}
   19448:	mov	r4, r0
   1944c:	mov	r2, #0
   19450:	add	r0, r0, #12
   19454:	bl	180a4 <build_ast@@Base+0xcf4>
   19458:	cmp	r0, #0
   1945c:	popeq	{r4, r5, r6, pc}
   19460:	ldr	r6, [pc, #112]	; 194d8 <__gcov_sort_n_vals@@Base+0x554>
   19464:	add	r6, pc, r6
   19468:	ldr	r2, [r6]
   1946c:	cmp	r2, #0
   19470:	beq	19488 <__gcov_sort_n_vals@@Base+0x504>
   19474:	ldr	r3, [pc, #96]	; 194dc <__gcov_sort_n_vals@@Base+0x558>
   19478:	str	r2, [r4, #4]
   1947c:	add	r3, pc, r3
   19480:	str	r4, [r3]
   19484:	pop	{r4, r5, r6, pc}
   19488:	ldr	r3, [pc, #80]	; 194e0 <__gcov_sort_n_vals@@Base+0x55c>
   1948c:	ldr	r2, [pc, #80]	; 194e4 <__gcov_sort_n_vals@@Base+0x560>
   19490:	mov	r0, #12
   19494:	ldr	r5, [r5, r3]
   19498:	add	r2, pc, r2
   1949c:	ldr	r1, [r5]
   194a0:	bl	180a4 <build_ast@@Base+0xcf4>
   194a4:	cmp	r0, #0
   194a8:	ldreq	r2, [r6]
   194ac:	beq	19474 <__gcov_sort_n_vals@@Base+0x4f0>
   194b0:	ldr	r3, [r5, #4]
   194b4:	cmp	r3, #0
   194b8:	str	r3, [r6, #8]
   194bc:	strne	r6, [r3, #12]
   194c0:	ldr	r3, [pc, #32]	; 194e8 <__gcov_sort_n_vals@@Base+0x564>
   194c4:	add	r3, pc, r3
   194c8:	str	r3, [r5, #4]
   194cc:	ldr	r2, [r3]
   194d0:	b	19474 <__gcov_sort_n_vals@@Base+0x4f0>
   194d4:	andeq	r1, r1, r4, asr #23
   194d8:	andeq	r3, r1, r0, lsl #13
   194dc:	andeq	r3, r1, r8, ror #12
   194e0:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   194e4:	andeq	r0, r0, r4, lsl #28
   194e8:	andeq	r3, r1, r0, lsr #12
   194ec:	cmp	r3, #0
   194f0:	cmpeq	r2, #0
   194f4:	bne	19518 <__gcov_sort_n_vals@@Base+0x594>
   194f8:	cmp	r1, #0
   194fc:	movlt	r1, #-2147483648	; 0x80000000
   19500:	movlt	r0, #0
   19504:	blt	19514 <__gcov_sort_n_vals@@Base+0x590>
   19508:	cmpeq	r0, #0
   1950c:	mvnne	r1, #-2147483648	; 0x80000000
   19510:	mvnne	r0, #0
   19514:	b	195c0 <__gcov_sort_n_vals@@Base+0x63c>
   19518:	sub	sp, sp, #8
   1951c:	push	{sp, lr}
   19520:	cmp	r1, #0
   19524:	blt	19544 <__gcov_sort_n_vals@@Base+0x5c0>
   19528:	cmp	r3, #0
   1952c:	blt	19578 <__gcov_sort_n_vals@@Base+0x5f4>
   19530:	bl	19614 <__gcov_sort_n_vals@@Base+0x690>
   19534:	ldr	lr, [sp, #4]
   19538:	add	sp, sp, #8
   1953c:	pop	{r2, r3}
   19540:	bx	lr
   19544:	rsbs	r0, r0, #0
   19548:	sbc	r1, r1, r1, lsl #1
   1954c:	cmp	r3, #0
   19550:	blt	1959c <__gcov_sort_n_vals@@Base+0x618>
   19554:	bl	19614 <__gcov_sort_n_vals@@Base+0x690>
   19558:	ldr	lr, [sp, #4]
   1955c:	add	sp, sp, #8
   19560:	pop	{r2, r3}
   19564:	rsbs	r0, r0, #0
   19568:	sbc	r1, r1, r1, lsl #1
   1956c:	rsbs	r2, r2, #0
   19570:	sbc	r3, r3, r3, lsl #1
   19574:	bx	lr
   19578:	rsbs	r2, r2, #0
   1957c:	sbc	r3, r3, r3, lsl #1
   19580:	bl	19614 <__gcov_sort_n_vals@@Base+0x690>
   19584:	ldr	lr, [sp, #4]
   19588:	add	sp, sp, #8
   1958c:	pop	{r2, r3}
   19590:	rsbs	r0, r0, #0
   19594:	sbc	r1, r1, r1, lsl #1
   19598:	bx	lr
   1959c:	rsbs	r2, r2, #0
   195a0:	sbc	r3, r3, r3, lsl #1
   195a4:	bl	19614 <__gcov_sort_n_vals@@Base+0x690>
   195a8:	ldr	lr, [sp, #4]
   195ac:	add	sp, sp, #8
   195b0:	pop	{r2, r3}
   195b4:	rsbs	r2, r2, #0
   195b8:	sbc	r3, r3, r3, lsl #1
   195bc:	bx	lr
   195c0:	push	{r1, lr}
   195c4:	mov	r0, #8
   195c8:	bl	1181c <raise@plt>
   195cc:	pop	{r1, pc}
   195d0:	ldr	r3, [pc, #48]	; 19608 <__gcov_sort_n_vals@@Base+0x684>
   195d4:	ldr	r2, [pc, #48]	; 1960c <__gcov_sort_n_vals@@Base+0x688>
   195d8:	and	r3, r3, r0, lsr #1
   195dc:	sub	r0, r0, r3
   195e0:	and	r3, r0, r2
   195e4:	and	r0, r2, r0, lsr #2
   195e8:	add	r3, r3, r0
   195ec:	ldr	r0, [pc, #28]	; 19610 <__gcov_sort_n_vals@@Base+0x68c>
   195f0:	add	r3, r3, r3, lsr #4
   195f4:	and	r0, r0, r3
   195f8:	add	r0, r0, r0, lsl #8
   195fc:	add	r0, r0, r0, lsl #16
   19600:	lsr	r0, r0, #24
   19604:	bx	lr
   19608:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   1960c:	teqcc	r3, #-872415232	; 0xcc000000
   19610:	svceq	0x000f0f0f
   19614:	cmp	r1, r3
   19618:	cmpeq	r0, r2
   1961c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19620:	mov	r4, r0
   19624:	movcc	r0, #0
   19628:	mov	r5, r1
   1962c:	ldr	lr, [sp, #36]	; 0x24
   19630:	movcc	r1, r0
   19634:	bcc	19730 <__gcov_sort_n_vals@@Base+0x7ac>
   19638:	cmp	r3, #0
   1963c:	clzeq	ip, r2
   19640:	clzne	ip, r3
   19644:	addeq	ip, ip, #32
   19648:	cmp	r5, #0
   1964c:	clzeq	r1, r4
   19650:	addeq	r1, r1, #32
   19654:	clzne	r1, r5
   19658:	sub	ip, ip, r1
   1965c:	sub	sl, ip, #32
   19660:	lsl	r9, r3, ip
   19664:	rsb	fp, ip, #32
   19668:	orr	r9, r9, r2, lsl sl
   1966c:	orr	r9, r9, r2, lsr fp
   19670:	lsl	r8, r2, ip
   19674:	cmp	r5, r9
   19678:	cmpeq	r4, r8
   1967c:	movcc	r0, #0
   19680:	movcc	r1, r0
   19684:	bcc	196a0 <__gcov_sort_n_vals@@Base+0x71c>
   19688:	mov	r0, #1
   1968c:	subs	r4, r4, r8
   19690:	lsl	r1, r0, sl
   19694:	orr	r1, r1, r0, lsr fp
   19698:	lsl	r0, r0, ip
   1969c:	sbc	r5, r5, r9
   196a0:	cmp	ip, #0
   196a4:	beq	19730 <__gcov_sort_n_vals@@Base+0x7ac>
   196a8:	lsr	r6, r8, #1
   196ac:	orr	r6, r6, r9, lsl #31
   196b0:	lsr	r7, r9, #1
   196b4:	mov	r2, ip
   196b8:	b	196dc <__gcov_sort_n_vals@@Base+0x758>
   196bc:	subs	r3, r4, r6
   196c0:	sbc	r8, r5, r7
   196c4:	adds	r3, r3, r3
   196c8:	adc	r8, r8, r8
   196cc:	adds	r4, r3, #1
   196d0:	adc	r5, r8, #0
   196d4:	subs	r2, r2, #1
   196d8:	beq	196f8 <__gcov_sort_n_vals@@Base+0x774>
   196dc:	cmp	r5, r7
   196e0:	cmpeq	r4, r6
   196e4:	bcs	196bc <__gcov_sort_n_vals@@Base+0x738>
   196e8:	adds	r4, r4, r4
   196ec:	adc	r5, r5, r5
   196f0:	subs	r2, r2, #1
   196f4:	bne	196dc <__gcov_sort_n_vals@@Base+0x758>
   196f8:	lsr	r3, r4, ip
   196fc:	orr	r3, r3, r5, lsl fp
   19700:	lsr	r2, r5, ip
   19704:	orr	r3, r3, r5, lsr sl
   19708:	adds	r0, r0, r4
   1970c:	mov	r4, r3
   19710:	lsl	r3, r2, ip
   19714:	orr	r3, r3, r4, lsl sl
   19718:	lsl	ip, r4, ip
   1971c:	orr	r3, r3, r4, lsr fp
   19720:	adc	r1, r1, r5
   19724:	subs	r0, r0, ip
   19728:	mov	r5, r2
   1972c:	sbc	r1, r1, r3
   19730:	cmp	lr, #0
   19734:	strdne	r4, [lr]
   19738:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001973c <__libc_csu_init@@Base>:
   1973c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19740:	mov	r7, r0
   19744:	ldr	r6, [pc, #72]	; 19794 <__libc_csu_init@@Base+0x58>
   19748:	ldr	r5, [pc, #72]	; 19798 <__libc_csu_init@@Base+0x5c>
   1974c:	add	r6, pc, r6
   19750:	add	r5, pc, r5
   19754:	sub	r6, r6, r5
   19758:	mov	r8, r1
   1975c:	mov	r9, r2
   19760:	bl	117f0 <fdopen@plt-0x20>
   19764:	asrs	r6, r6, #2
   19768:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1976c:	mov	r4, #0
   19770:	add	r4, r4, #1
   19774:	ldr	r3, [r5], #4
   19778:	mov	r2, r9
   1977c:	mov	r1, r8
   19780:	mov	r0, r7
   19784:	blx	r3
   19788:	cmp	r6, r4
   1978c:	bne	19770 <__libc_csu_init@@Base+0x34>
   19790:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19794:			; <UNDEFINED> instruction: 0x000117b0
   19798:	muleq	r1, r8, r7

0001979c <__libc_csu_fini@@Base>:
   1979c:	bx	lr

Disassembly of section .fini:

000197a0 <.fini>:
   197a0:	push	{r3, lr}
   197a4:	pop	{r3, pc}
