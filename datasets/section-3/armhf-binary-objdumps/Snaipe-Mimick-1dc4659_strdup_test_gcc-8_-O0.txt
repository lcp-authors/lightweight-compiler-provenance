
../repos/Snaipe-Mimick-1dc4659/sample/strdup/strdup_test:     file format elf32-littlearm


Disassembly of section .init:

000111a4 <.init>:
   111a4:	push	{r3, lr}
   111a8:	bl	112f0 <_start@@Base+0x3c>
   111ac:	pop	{r3, pc}

Disassembly of section .plt:

000111b0 <strstr@plt-0x14>:
   111b0:	push	{lr}		; (str lr, [sp, #-4]!)
   111b4:	ldr	lr, [pc, #4]	; 111c0 <strstr@plt-0x4>
   111b8:	add	lr, pc, lr
   111bc:	ldr	pc, [lr, #8]!
   111c0:	andeq	r3, r1, r0, asr #28

000111c4 <strstr@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #77824	; 0x13000
   111cc:	ldr	pc, [ip, #3648]!	; 0xe40

000111d0 <strcmp@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #77824	; 0x13000
   111d8:	ldr	pc, [ip, #3640]!	; 0xe38

000111dc <mprotect@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #77824	; 0x13000
   111e4:	ldr	pc, [ip, #3632]!	; 0xe30

000111e8 <free@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #77824	; 0x13000
   111f0:	ldr	pc, [ip, #3624]!	; 0xe28

000111f4 <memcpy@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #77824	; 0x13000
   111fc:	ldr	pc, [ip, #3616]!	; 0xe20

00011200 <realloc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #77824	; 0x13000
   11208:	ldr	pc, [ip, #3608]!	; 0xe18

0001120c <malloc@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #77824	; 0x13000
   11214:	ldr	pc, [ip, #3600]!	; 0xe10

00011218 <__libc_start_main@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #77824	; 0x13000
   11220:	ldr	pc, [ip, #3592]!	; 0xe08

00011224 <__gmon_start__@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #77824	; 0x13000
   1122c:	ldr	pc, [ip, #3584]!	; 0xe00

00011230 <strlen@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #77824	; 0x13000
   11238:	ldr	pc, [ip, #3576]!	; 0xdf8

0001123c <mmap@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #77824	; 0x13000
   11244:	ldr	pc, [ip, #3568]!	; 0xdf0

00011248 <strchr@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #77824	; 0x13000
   11250:	ldr	pc, [ip, #3560]!	; 0xde8

00011254 <fprintf@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #77824	; 0x13000
   1125c:	ldr	pc, [ip, #3552]!	; 0xde0

00011260 <__errno_location@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #77824	; 0x13000
   11268:	ldr	pc, [ip, #3544]!	; 0xdd8

0001126c <snprintf@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #77824	; 0x13000
   11274:	ldr	pc, [ip, #3536]!	; 0xdd0

00011278 <munmap@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #77824	; 0x13000
   11280:	ldr	pc, [ip, #3528]!	; 0xdc8

00011284 <my_strdup@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #77824	; 0x13000
   1128c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011290 <__tls_get_addr@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #77824	; 0x13000
   11298:	ldr	pc, [ip, #3512]!	; 0xdb8

0001129c <strncmp@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #77824	; 0x13000
   112a4:	ldr	pc, [ip, #3504]!	; 0xdb0

000112a8 <abort@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #77824	; 0x13000
   112b0:	ldr	pc, [ip, #3496]!	; 0xda8

Disassembly of section .text:

000112b4 <_start@@Base>:
   112b4:	mov	fp, #0
   112b8:	mov	lr, #0
   112bc:	pop	{r1}		; (ldr r1, [sp], #4)
   112c0:	mov	r2, sp
   112c4:	push	{r2}		; (str r2, [sp, #-4]!)
   112c8:	push	{r0}		; (str r0, [sp, #-4]!)
   112cc:	ldr	ip, [pc, #16]	; 112e4 <_start@@Base+0x30>
   112d0:	push	{ip}		; (str ip, [sp, #-4]!)
   112d4:	ldr	r0, [pc, #12]	; 112e8 <_start@@Base+0x34>
   112d8:	ldr	r3, [pc, #12]	; 112ec <_start@@Base+0x38>
   112dc:	bl	11218 <__libc_start_main@plt>
   112e0:	bl	112a8 <abort@plt>
   112e4:	andeq	r4, r1, r0, lsr #8
   112e8:	andeq	r1, r1, r4, lsl ip
   112ec:	andeq	r4, r1, r0, asr #7
   112f0:	ldr	r3, [pc, #20]	; 1130c <_start@@Base+0x58>
   112f4:	ldr	r2, [pc, #20]	; 11310 <_start@@Base+0x5c>
   112f8:	add	r3, pc, r3
   112fc:	ldr	r2, [r3, r2]
   11300:	cmp	r2, #0
   11304:	bxeq	lr
   11308:	b	11224 <__gmon_start__@plt>
   1130c:	andeq	r3, r1, r0, lsl #26
   11310:	muleq	r0, ip, r0
   11314:	ldr	r0, [pc, #24]	; 11334 <_start@@Base+0x80>
   11318:	ldr	r3, [pc, #24]	; 11338 <_start@@Base+0x84>
   1131c:	cmp	r3, r0
   11320:	bxeq	lr
   11324:	ldr	r3, [pc, #16]	; 1133c <_start@@Base+0x88>
   11328:	cmp	r3, #0
   1132c:	bxeq	lr
   11330:	bx	r3
   11334:	andeq	r5, r2, ip, asr #1
   11338:	andeq	r5, r2, ip, asr #1
   1133c:	andeq	r0, r0, r0
   11340:	ldr	r0, [pc, #36]	; 1136c <_start@@Base+0xb8>
   11344:	ldr	r1, [pc, #36]	; 11370 <_start@@Base+0xbc>
   11348:	sub	r1, r1, r0
   1134c:	asr	r1, r1, #2
   11350:	add	r1, r1, r1, lsr #31
   11354:	asrs	r1, r1, #1
   11358:	bxeq	lr
   1135c:	ldr	r3, [pc, #16]	; 11374 <_start@@Base+0xc0>
   11360:	cmp	r3, #0
   11364:	bxeq	lr
   11368:	bx	r3
   1136c:	andeq	r5, r2, ip, asr #1
   11370:	andeq	r5, r2, ip, asr #1
   11374:	andeq	r0, r0, r0
   11378:	push	{r4, lr}
   1137c:	ldr	r4, [pc, #24]	; 1139c <_start@@Base+0xe8>
   11380:	ldrb	r3, [r4]
   11384:	cmp	r3, #0
   11388:	popne	{r4, pc}
   1138c:	bl	11314 <_start@@Base+0x60>
   11390:	mov	r3, #1
   11394:	strb	r3, [r4]
   11398:	pop	{r4, pc}
   1139c:	andeq	r5, r2, ip, asr #1
   113a0:	b	11340 <_start@@Base+0x8c>
   113a4:	str	fp, [sp, #-8]!
   113a8:	str	lr, [sp, #4]
   113ac:	add	fp, sp, #4
   113b0:	sub	sp, sp, #96	; 0x60
   113b4:	str	r0, [fp, #-96]	; 0xffffffa0
   113b8:	bl	11ee4 <mmk_matcher_ctx@@Base>
   113bc:	str	r0, [fp, #-24]	; 0xffffffe8
   113c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   113c4:	cmp	r3, #0
   113c8:	beq	11624 <_start@@Base+0x370>
   113cc:	bl	134dc <mmk_ctx@@Base>
   113d0:	mov	r3, r0
   113d4:	mov	r0, r3
   113d8:	bl	13074 <mmk_stub_context@@Base>
   113dc:	str	r0, [fp, #-28]	; 0xffffffe4
   113e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   113e4:	ldr	r3, [r3]
   113e8:	cmp	r3, #0
   113ec:	bne	11440 <_start@@Base+0x18c>
   113f0:	mov	r0, #44	; 0x2c
   113f4:	bl	13fa4 <mmk_malloc@@Base>
   113f8:	str	r0, [fp, #-32]	; 0xffffffe0
   113fc:	bl	142c4 <mmk_when_get_result@@Base>
   11400:	mov	r2, r0
   11404:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11408:	add	r3, r3, #8
   1140c:	ldrd	r0, [r2]
   11410:	strd	r0, [r3]
   11414:	ldrd	r0, [r2, #8]
   11418:	strd	r0, [r3, #8]
   1141c:	ldr	r2, [r2, #16]
   11420:	str	r2, [r3, #16]
   11424:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11428:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1142c:	str	r2, [r3, #40]	; 0x28
   11430:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11434:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11438:	bl	14300 <mmk_when_impl@@Base>
   1143c:	b	11614 <_start@@Base+0x360>
   11440:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11444:	ldr	r3, [r3]
   11448:	cmp	r3, #1
   1144c:	bne	11614 <_start@@Base+0x360>
   11450:	mov	r3, #0
   11454:	str	r3, [fp, #-8]
   11458:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1145c:	bl	12348 <mmk_mock_params_begin@@Base>
   11460:	str	r0, [fp, #-12]
   11464:	b	115cc <_start@@Base+0x318>
   11468:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1146c:	str	r3, [fp, #-36]	; 0xffffffdc
   11470:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11474:	ldr	r3, [r3, #8]
   11478:	cmp	r3, #0
   1147c:	beq	1156c <_start@@Base+0x2b8>
   11480:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11484:	ldr	r3, [r3, #8]
   11488:	str	r3, [fp, #-36]	; 0xffffffdc
   1148c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11490:	ldr	r3, [r3]
   11494:	cmp	r3, #0
   11498:	beq	11590 <_start@@Base+0x2dc>
   1149c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114a0:	ldr	r3, [r3]
   114a4:	cmp	r3, #0
   114a8:	bge	1152c <_start@@Base+0x278>
   114ac:	ldr	r3, [fp, #-12]
   114b0:	add	r3, r3, #12
   114b4:	sub	r1, fp, #96	; 0x60
   114b8:	mov	r2, #4
   114bc:	mov	r0, r3
   114c0:	bl	13b98 <mmk_memcmp@@Base>
   114c4:	str	r0, [fp, #-40]	; 0xffffffd8
   114c8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   114cc:	cmp	r3, #0
   114d0:	bne	114e8 <_start@@Base+0x234>
   114d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114d8:	ldr	r3, [r3]
   114dc:	and	r3, r3, #2
   114e0:	cmp	r3, #0
   114e4:	beq	115a8 <_start@@Base+0x2f4>
   114e8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   114ec:	cmp	r3, #0
   114f0:	bge	11508 <_start@@Base+0x254>
   114f4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114f8:	ldr	r3, [r3]
   114fc:	and	r3, r3, #4
   11500:	cmp	r3, #0
   11504:	beq	115b0 <_start@@Base+0x2fc>
   11508:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1150c:	cmp	r3, #0
   11510:	ble	11590 <_start@@Base+0x2dc>
   11514:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11518:	ldr	r3, [r3]
   1151c:	and	r3, r3, #8
   11520:	cmp	r3, #0
   11524:	bne	11590 <_start@@Base+0x2dc>
   11528:	b	115bc <_start@@Base+0x308>
   1152c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11530:	ldr	r3, [r3]
   11534:	cmp	r3, #1
   11538:	bne	11590 <_start@@Base+0x2dc>
   1153c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11540:	bl	12028 <mmk_matcher_get_predicate@@Base>
   11544:	str	r0, [fp, #-44]	; 0xffffffd4
   11548:	ldr	r3, [fp, #-12]
   1154c:	ldr	r2, [r3, #12]
   11550:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11554:	mov	r0, r2
   11558:	blx	r3
   1155c:	mov	r3, r0
   11560:	cmp	r3, #0
   11564:	bne	11590 <_start@@Base+0x2dc>
   11568:	b	115bc <_start@@Base+0x308>
   1156c:	ldr	r3, [fp, #-12]
   11570:	add	r3, r3, #12
   11574:	sub	r1, fp, #96	; 0x60
   11578:	mov	r2, #4
   1157c:	mov	r0, r3
   11580:	bl	13b98 <mmk_memcmp@@Base>
   11584:	mov	r3, r0
   11588:	cmp	r3, #0
   1158c:	bne	115b8 <_start@@Base+0x304>
   11590:	ldr	r3, [fp, #-12]
   11594:	ldr	r3, [r3]
   11598:	ldr	r2, [fp, #-8]
   1159c:	add	r3, r2, r3
   115a0:	str	r3, [fp, #-8]
   115a4:	b	115bc <_start@@Base+0x308>
   115a8:	nop	{0}
   115ac:	b	115bc <_start@@Base+0x308>
   115b0:	nop	{0}
   115b4:	b	115bc <_start@@Base+0x308>
   115b8:	nop	{0}
   115bc:	ldr	r1, [fp, #-12]
   115c0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   115c4:	bl	1239c <mmk_mock_params_next@@Base>
   115c8:	str	r0, [fp, #-12]
   115cc:	ldr	r3, [fp, #-12]
   115d0:	cmp	r3, #0
   115d4:	bne	11468 <_start@@Base+0x1b4>
   115d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   115dc:	str	r3, [fp, #-16]
   115e0:	b	11600 <_start@@Base+0x34c>
   115e4:	ldr	r3, [fp, #-16]
   115e8:	ldr	r3, [r3, #8]
   115ec:	str	r3, [fp, #-48]	; 0xffffffd0
   115f0:	ldr	r0, [fp, #-16]
   115f4:	bl	1404c <mmk_free@@Base>
   115f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   115fc:	str	r3, [fp, #-16]
   11600:	ldr	r3, [fp, #-16]
   11604:	cmp	r3, #0
   11608:	bne	115e4 <_start@@Base+0x330>
   1160c:	ldr	r0, [fp, #-8]
   11610:	bl	13714 <mmk_verify_set_times@@Base>
   11614:	ldr	r3, [pc, #652]	; 118a8 <_start@@Base+0x5f4>
   11618:	add	r3, pc, r3
   1161c:	ldr	r3, [r3]
   11620:	b	11894 <_start@@Base+0x5e0>
   11624:	sub	r1, fp, #88	; 0x58
   11628:	mov	r2, #0
   1162c:	mov	r3, #0
   11630:	strd	r2, [r1]
   11634:	strd	r2, [r1, #8]
   11638:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1163c:	str	r3, [fp, #-76]	; 0xffffffb4
   11640:	sub	r3, fp, #88	; 0x58
   11644:	str	r3, [fp, #-52]	; 0xffffffcc
   11648:	mov	r1, #16
   1164c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11650:	bl	1394c <mmk_verify_register_call@@Base>
   11654:	bl	12414 <mmk_mock_get_params@@Base>
   11658:	str	r0, [fp, #-20]	; 0xffffffec
   1165c:	b	1187c <_start@@Base+0x5c8>
   11660:	ldr	r3, [fp, #-20]	; 0xffffffec
   11664:	str	r3, [fp, #-56]	; 0xffffffc8
   11668:	ldr	r3, [fp, #-20]	; 0xffffffec
   1166c:	ldr	r3, [r3]
   11670:	str	r3, [fp, #-60]	; 0xffffffc4
   11674:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11678:	ldr	r3, [r3, #8]
   1167c:	cmp	r3, #0
   11680:	beq	11768 <_start@@Base+0x4b4>
   11684:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11688:	ldr	r3, [r3, #8]
   1168c:	str	r3, [fp, #-60]	; 0xffffffc4
   11690:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11694:	ldr	r3, [r3]
   11698:	cmp	r3, #0
   1169c:	beq	1178c <_start@@Base+0x4d8>
   116a0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116a4:	ldr	r3, [r3]
   116a8:	cmp	r3, #0
   116ac:	bge	1172c <_start@@Base+0x478>
   116b0:	sub	r1, fp, #96	; 0x60
   116b4:	sub	r3, fp, #96	; 0x60
   116b8:	mov	r2, #4
   116bc:	mov	r0, r3
   116c0:	bl	13b98 <mmk_memcmp@@Base>
   116c4:	str	r0, [fp, #-64]	; 0xffffffc0
   116c8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   116cc:	cmp	r3, #0
   116d0:	bne	116e8 <_start@@Base+0x434>
   116d4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116d8:	ldr	r3, [r3]
   116dc:	and	r3, r3, #2
   116e0:	cmp	r3, #0
   116e4:	beq	11864 <_start@@Base+0x5b0>
   116e8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   116ec:	cmp	r3, #0
   116f0:	bge	11708 <_start@@Base+0x454>
   116f4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116f8:	ldr	r3, [r3]
   116fc:	and	r3, r3, #4
   11700:	cmp	r3, #0
   11704:	beq	11864 <_start@@Base+0x5b0>
   11708:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1170c:	cmp	r3, #0
   11710:	ble	1178c <_start@@Base+0x4d8>
   11714:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11718:	ldr	r3, [r3]
   1171c:	and	r3, r3, #8
   11720:	cmp	r3, #0
   11724:	bne	1178c <_start@@Base+0x4d8>
   11728:	b	11864 <_start@@Base+0x5b0>
   1172c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11730:	ldr	r3, [r3]
   11734:	cmp	r3, #1
   11738:	bne	1178c <_start@@Base+0x4d8>
   1173c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11740:	bl	12028 <mmk_matcher_get_predicate@@Base>
   11744:	str	r0, [fp, #-68]	; 0xffffffbc
   11748:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1174c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11750:	mov	r0, r2
   11754:	blx	r3
   11758:	mov	r3, r0
   1175c:	cmp	r3, #0
   11760:	bne	1178c <_start@@Base+0x4d8>
   11764:	b	11870 <_start@@Base+0x5bc>
   11768:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1176c:	add	r1, r3, #40	; 0x28
   11770:	sub	r3, fp, #96	; 0x60
   11774:	mov	r2, #4
   11778:	mov	r0, r3
   1177c:	bl	13b98 <mmk_memcmp@@Base>
   11780:	mov	r3, r0
   11784:	cmp	r3, #0
   11788:	bne	1186c <_start@@Base+0x5b8>
   1178c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11790:	ldr	r3, [r3, #12]
   11794:	cmp	r3, #0
   11798:	beq	117b0 <_start@@Base+0x4fc>
   1179c:	bl	11260 <__errno_location@plt>
   117a0:	mov	r2, r0
   117a4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117a8:	ldr	r3, [r3, #12]
   117ac:	str	r3, [r2]
   117b0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117b4:	ldr	r3, [r3, #20]
   117b8:	cmp	r3, #0
   117bc:	beq	117f0 <_start@@Base+0x53c>
   117c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117c4:	ldr	r3, [r3, #16]
   117c8:	cmp	r3, #0
   117cc:	bne	117f0 <_start@@Base+0x53c>
   117d0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117d4:	ldr	r3, [r3, #20]
   117d8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   117dc:	mov	r0, r2
   117e0:	blx	r3
   117e4:	str	r0, [fp, #-72]	; 0xffffffb8
   117e8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   117ec:	b	11894 <_start@@Base+0x5e0>
   117f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117f4:	ldr	r3, [r3, #20]
   117f8:	cmp	r3, #0
   117fc:	beq	11834 <_start@@Base+0x580>
   11800:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11804:	ldr	r3, [r3, #16]
   11808:	cmp	r3, #0
   1180c:	beq	11834 <_start@@Base+0x580>
   11810:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11814:	ldr	r3, [r3, #20]
   11818:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1181c:	mov	r0, r2
   11820:	blx	r3
   11824:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11828:	ldr	r3, [r3, #16]
   1182c:	ldr	r3, [r3]
   11830:	b	11894 <_start@@Base+0x5e0>
   11834:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11838:	ldr	r3, [r3, #16]
   1183c:	cmp	r3, #0
   11840:	beq	11854 <_start@@Base+0x5a0>
   11844:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11848:	ldr	r3, [r3, #16]
   1184c:	ldr	r3, [r3]
   11850:	b	11894 <_start@@Base+0x5e0>
   11854:	ldr	r3, [pc, #80]	; 118ac <_start@@Base+0x5f8>
   11858:	add	r3, pc, r3
   1185c:	ldr	r3, [r3]
   11860:	b	11894 <_start@@Base+0x5e0>
   11864:	nop	{0}
   11868:	b	11870 <_start@@Base+0x5bc>
   1186c:	nop	{0}
   11870:	ldr	r3, [fp, #-20]	; 0xffffffec
   11874:	ldr	r3, [r3, #4]
   11878:	str	r3, [fp, #-20]	; 0xffffffec
   1187c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11880:	cmp	r3, #0
   11884:	bne	11660 <_start@@Base+0x3ac>
   11888:	ldr	r3, [pc, #32]	; 118b0 <_start@@Base+0x5fc>
   1188c:	add	r3, pc, r3
   11890:	ldr	r3, [r3]
   11894:	mov	r0, r3
   11898:	sub	sp, fp, #4
   1189c:	ldr	fp, [sp]
   118a0:	add	sp, sp, #4
   118a4:	pop	{pc}		; (ldr pc, [sp], #4)
   118a8:			; <UNDEFINED> instruction: 0x00013ab0
   118ac:	andeq	r3, r1, r0, ror r8
   118b0:	andeq	r3, r1, ip, lsr r8
   118b4:	str	fp, [sp, #-8]!
   118b8:	str	lr, [sp, #4]
   118bc:	add	fp, sp, #4
   118c0:	sub	sp, sp, #8
   118c4:	str	r0, [fp, #-8]
   118c8:	ldr	r3, [pc, #36]	; 118f4 <_start@@Base+0x640>
   118cc:	add	r3, pc, r3
   118d0:	mov	r1, r3
   118d4:	ldr	r0, [fp, #-8]
   118d8:	bl	12050 <mmk_mock_create_internal@@Base>
   118dc:	mov	r3, r0
   118e0:	mov	r0, r3
   118e4:	sub	sp, fp, #4
   118e8:	ldr	fp, [sp]
   118ec:	add	sp, sp, #4
   118f0:	pop	{pc}		; (ldr pc, [sp], #4)
   118f4:			; <UNDEFINED> instruction: 0xfffffad0

000118f8 <test_simple_case@@Base>:
   118f8:	str	r4, [sp, #-12]!
   118fc:	str	fp, [sp, #4]
   11900:	str	lr, [sp, #8]
   11904:	add	fp, sp, #8
   11908:	sub	sp, sp, #76	; 0x4c
   1190c:	ldr	r4, [pc, #408]	; 11aac <test_simple_case@@Base+0x1b4>
   11910:	add	r4, pc, r4
   11914:	ldr	r3, [pc, #404]	; 11ab0 <test_simple_case@@Base+0x1b8>
   11918:	add	r3, pc, r3
   1191c:	mov	r0, r3
   11920:	bl	118b4 <_start@@Base+0x600>
   11924:	mov	r0, #0
   11928:	bl	11e28 <mmk_matcher_init@@Base>
   1192c:	sub	r1, fp, #68	; 0x44
   11930:	mov	r2, #0
   11934:	mov	r3, #0
   11938:	strd	r2, [r1]
   1193c:	strd	r2, [r1, #8]
   11940:	mov	r3, r2
   11944:	str	r3, [r1, #16]
   11948:	sub	r3, fp, #76	; 0x4c
   1194c:	str	r3, [fp, #-48]	; 0xffffffd0
   11950:	sub	r3, fp, #48	; 0x30
   11954:	str	r3, [fp, #-60]	; 0xffffffc4
   11958:	sub	r3, fp, #68	; 0x44
   1195c:	mov	r0, r3
   11960:	bl	1427c <mmk_when_init@@Base>
   11964:	mov	r0, #6
   11968:	bl	1120c <malloc@plt>
   1196c:	bl	11ea4 <mmk_matcher_term@@Base>
   11970:	ldr	r3, [pc, #316]	; 11ab4 <test_simple_case@@Base+0x1bc>
   11974:	add	r3, pc, r3
   11978:	mov	r0, r3
   1197c:	bl	11284 <my_strdup@plt>
   11980:	str	r0, [fp, #-16]
   11984:	mov	r0, #1
   11988:	bl	11e28 <mmk_matcher_init@@Base>
   1198c:	mov	r1, #0
   11990:	mov	r0, #-2147483638	; 0x8000000a
   11994:	bl	11f20 <mmk_matcher_add@@Base>
   11998:	mov	r0, #6
   1199c:	bl	1120c <malloc@plt>
   119a0:	bl	11ea4 <mmk_matcher_term@@Base>
   119a4:	sub	r1, fp, #44	; 0x2c
   119a8:	mov	r2, #0
   119ac:	mov	r3, #0
   119b0:	strd	r2, [r1]
   119b4:	strd	r2, [r1, #8]
   119b8:	strd	r2, [r1, #16]
   119bc:	mov	r3, #1
   119c0:	str	r3, [fp, #-44]	; 0xffffffd4
   119c4:	mov	r3, #1
   119c8:	str	r3, [fp, #-28]	; 0xffffffe4
   119cc:	sub	r3, fp, #44	; 0x2c
   119d0:	mov	r0, r3
   119d4:	bl	1375c <mmk_verify_times@@Base>
   119d8:	str	r0, [fp, #-20]	; 0xffffffec
   119dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   119e0:	cmp	r3, #0
   119e4:	bne	11a1c <test_simple_case@@Base+0x124>
   119e8:	ldr	r3, [pc, #200]	; 11ab8 <test_simple_case@@Base+0x1c0>
   119ec:	ldr	r3, [r4, r3]
   119f0:	ldr	r0, [r3]
   119f4:	ldr	r3, [pc, #192]	; 11abc <test_simple_case@@Base+0x1c4>
   119f8:	add	r3, pc, r3
   119fc:	str	r3, [sp]
   11a00:	mov	r3, #23
   11a04:	ldr	r2, [pc, #180]	; 11ac0 <test_simple_case@@Base+0x1c8>
   11a08:	add	r2, pc, r2
   11a0c:	ldr	r1, [pc, #176]	; 11ac4 <test_simple_case@@Base+0x1cc>
   11a10:	add	r1, pc, r1
   11a14:	bl	11254 <fprintf@plt>
   11a18:	bl	112a8 <abort@plt>
   11a1c:	sub	r3, fp, #76	; 0x4c
   11a20:	ldr	r2, [fp, #-16]
   11a24:	cmp	r2, r3
   11a28:	bne	11a50 <test_simple_case@@Base+0x158>
   11a2c:	sub	r3, fp, #76	; 0x4c
   11a30:	mov	r1, r3
   11a34:	ldr	r3, [pc, #140]	; 11ac8 <test_simple_case@@Base+0x1d0>
   11a38:	add	r3, pc, r3
   11a3c:	mov	r0, r3
   11a40:	bl	111d0 <strcmp@plt>
   11a44:	mov	r3, r0
   11a48:	cmp	r3, #0
   11a4c:	beq	11a84 <test_simple_case@@Base+0x18c>
   11a50:	ldr	r3, [pc, #96]	; 11ab8 <test_simple_case@@Base+0x1c0>
   11a54:	ldr	r3, [r4, r3]
   11a58:	ldr	r0, [r3]
   11a5c:	ldr	r3, [pc, #104]	; 11acc <test_simple_case@@Base+0x1d4>
   11a60:	add	r3, pc, r3
   11a64:	str	r3, [sp]
   11a68:	mov	r3, #24
   11a6c:	ldr	r2, [pc, #92]	; 11ad0 <test_simple_case@@Base+0x1d8>
   11a70:	add	r2, pc, r2
   11a74:	ldr	r1, [pc, #88]	; 11ad4 <test_simple_case@@Base+0x1dc>
   11a78:	add	r1, pc, r1
   11a7c:	bl	11254 <fprintf@plt>
   11a80:	bl	112a8 <abort@plt>
   11a84:	ldr	r3, [pc, #76]	; 11ad8 <test_simple_case@@Base+0x1e0>
   11a88:	ldr	r3, [r4, r3]
   11a8c:	mov	r0, r3
   11a90:	bl	11dd0 <mmk_reset@@Base>
   11a94:	nop	{0}
   11a98:	sub	sp, fp, #8
   11a9c:	ldr	r4, [sp]
   11aa0:	ldr	fp, [sp, #4]
   11aa4:	add	sp, sp, #8
   11aa8:	pop	{pc}		; (ldr pc, [sp], #4)
   11aac:	andeq	r3, r1, r8, ror #13
   11ab0:	andeq	r2, r0, r0, lsl fp
   11ab4:	andeq	r2, r0, r8, asr #21
   11ab8:	andeq	r0, r0, r8, lsl #1
   11abc:	andeq	r2, r0, r8, asr #21
   11ac0:	andeq	r2, r0, ip, lsr sl
   11ac4:	muleq	r0, r0, sl
   11ac8:	andeq	r3, r1, r0, lsl #13
   11acc:	andeq	r2, r0, r8, ror #20
   11ad0:	ldrdeq	r2, [r0], -r4
   11ad4:	andeq	r2, r0, r8, lsr #20
   11ad8:	muleq	r0, r8, r0

00011adc <test_error_case@@Base>:
   11adc:	str	r4, [sp, #-12]!
   11ae0:	str	fp, [sp, #4]
   11ae4:	str	lr, [sp, #8]
   11ae8:	add	fp, sp, #8
   11aec:	sub	sp, sp, #44	; 0x2c
   11af0:	ldr	r4, [pc, #256]	; 11bf8 <test_error_case@@Base+0x11c>
   11af4:	add	r4, pc, r4
   11af8:	ldr	r3, [pc, #252]	; 11bfc <test_error_case@@Base+0x120>
   11afc:	add	r3, pc, r3
   11b00:	mov	r0, r3
   11b04:	bl	118b4 <_start@@Base+0x600>
   11b08:	str	r0, [fp, #-16]
   11b0c:	mov	r0, #0
   11b10:	bl	11e28 <mmk_matcher_init@@Base>
   11b14:	sub	r1, fp, #44	; 0x2c
   11b18:	mov	r2, #0
   11b1c:	mov	r3, #0
   11b20:	strd	r2, [r1]
   11b24:	strd	r2, [r1, #8]
   11b28:	mov	r3, r2
   11b2c:	str	r3, [r1, #16]
   11b30:	mov	r3, #12
   11b34:	str	r3, [fp, #-40]	; 0xffffffd8
   11b38:	mov	r3, #0
   11b3c:	str	r3, [fp, #-24]	; 0xffffffe8
   11b40:	sub	r3, fp, #24
   11b44:	str	r3, [fp, #-36]	; 0xffffffdc
   11b48:	sub	r3, fp, #44	; 0x2c
   11b4c:	mov	r0, r3
   11b50:	bl	1427c <mmk_when_init@@Base>
   11b54:	mov	r1, #1
   11b58:	mov	r0, #0
   11b5c:	bl	11f20 <mmk_matcher_add@@Base>
   11b60:	ldr	r3, [fp, #-16]
   11b64:	mov	r0, #0
   11b68:	blx	r3
   11b6c:	bl	11ea4 <mmk_matcher_term@@Base>
   11b70:	ldr	r3, [pc, #136]	; 11c00 <test_error_case@@Base+0x124>
   11b74:	add	r3, pc, r3
   11b78:	mov	r0, r3
   11b7c:	bl	11284 <my_strdup@plt>
   11b80:	str	r0, [fp, #-20]	; 0xffffffec
   11b84:	ldr	r3, [fp, #-20]	; 0xffffffec
   11b88:	cmp	r3, #0
   11b8c:	bne	11ba4 <test_error_case@@Base+0xc8>
   11b90:	bl	11260 <__errno_location@plt>
   11b94:	mov	r3, r0
   11b98:	ldr	r3, [r3]
   11b9c:	cmp	r3, #12
   11ba0:	beq	11bd8 <test_error_case@@Base+0xfc>
   11ba4:	ldr	r3, [pc, #88]	; 11c04 <test_error_case@@Base+0x128>
   11ba8:	ldr	r3, [r4, r3]
   11bac:	ldr	r0, [r3]
   11bb0:	ldr	r3, [pc, #80]	; 11c08 <test_error_case@@Base+0x12c>
   11bb4:	add	r3, pc, r3
   11bb8:	str	r3, [sp]
   11bbc:	mov	r3, #39	; 0x27
   11bc0:	ldr	r2, [pc, #68]	; 11c0c <test_error_case@@Base+0x130>
   11bc4:	add	r2, pc, r2
   11bc8:	ldr	r1, [pc, #64]	; 11c10 <test_error_case@@Base+0x134>
   11bcc:	add	r1, pc, r1
   11bd0:	bl	11254 <fprintf@plt>
   11bd4:	bl	112a8 <abort@plt>
   11bd8:	ldr	r0, [fp, #-16]
   11bdc:	bl	11dd0 <mmk_reset@@Base>
   11be0:	nop	{0}
   11be4:	sub	sp, fp, #8
   11be8:	ldr	r4, [sp]
   11bec:	ldr	fp, [sp, #4]
   11bf0:	add	sp, sp, #8
   11bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   11bf8:	andeq	r3, r1, r4, lsl #10
   11bfc:	andeq	r2, r0, ip, lsr #18
   11c00:	andeq	r2, r0, r4, ror r9
   11c04:	andeq	r0, r0, r8, lsl #1
   11c08:	andeq	r2, r0, r8, lsr r9
   11c0c:	andeq	r2, r0, r0, lsl #17
   11c10:	ldrdeq	r2, [r0], -r4

00011c14 <main@@Base>:
   11c14:	str	fp, [sp, #-8]!
   11c18:	str	lr, [sp, #4]
   11c1c:	add	fp, sp, #4
   11c20:	bl	118f8 <test_simple_case@@Base>
   11c24:	bl	11adc <test_error_case@@Base>
   11c28:	mov	r3, #0
   11c2c:	mov	r0, r3
   11c30:	sub	sp, fp, #4
   11c34:	ldr	fp, [sp]
   11c38:	add	sp, sp, #4
   11c3c:	pop	{pc}		; (ldr pc, [sp], #4)

00011c40 <mmk_init@@Base>:
   11c40:	str	r4, [sp, #-12]!
   11c44:	str	fp, [sp, #4]
   11c48:	str	lr, [sp, #8]
   11c4c:	add	fp, sp, #8
   11c50:	sub	sp, sp, #12
   11c54:	ldr	r4, [pc, #176]	; 11d0c <mmk_init@@Base+0xcc>
   11c58:	add	r4, pc, r4
   11c5c:	ldr	r3, [pc, #172]	; 11d10 <mmk_init@@Base+0xd0>
   11c60:	add	r3, pc, r3
   11c64:	ldr	r3, [r3]
   11c68:	cmp	r3, #0
   11c6c:	bne	11cf4 <mmk_init@@Base+0xb4>
   11c70:	bl	127b0 <plt_init_ctx@@Base>
   11c74:	mov	r2, r0
   11c78:	ldr	r3, [pc, #148]	; 11d14 <mmk_init@@Base+0xd4>
   11c7c:	add	r3, pc, r3
   11c80:	str	r2, [r3, #4]
   11c84:	ldr	r3, [pc, #140]	; 11d18 <mmk_init@@Base+0xd8>
   11c88:	add	r3, pc, r3
   11c8c:	ldr	r3, [r3, #4]
   11c90:	cmn	r3, #1
   11c94:	bne	11ccc <mmk_init@@Base+0x8c>
   11c98:	ldr	r3, [pc, #124]	; 11d1c <mmk_init@@Base+0xdc>
   11c9c:	ldr	r3, [r4, r3]
   11ca0:	ldr	r0, [r3]
   11ca4:	ldr	r3, [pc, #116]	; 11d20 <mmk_init@@Base+0xe0>
   11ca8:	add	r3, pc, r3
   11cac:	str	r3, [sp]
   11cb0:	mov	r3, #45	; 0x2d
   11cb4:	ldr	r2, [pc, #104]	; 11d24 <mmk_init@@Base+0xe4>
   11cb8:	add	r2, pc, r2
   11cbc:	ldr	r1, [pc, #100]	; 11d28 <mmk_init@@Base+0xe8>
   11cc0:	add	r1, pc, r1
   11cc4:	bl	11254 <fprintf@plt>
   11cc8:	bl	112a8 <abort@plt>
   11ccc:	ldr	r3, [pc, #88]	; 11d2c <mmk_init@@Base+0xec>
   11cd0:	add	r3, pc, r3
   11cd4:	ldr	r3, [r3, #4]
   11cd8:	mov	r0, r3
   11cdc:	bl	14098 <mmk_init_vital_functions@@Base>
   11ce0:	ldr	r3, [pc, #72]	; 11d30 <mmk_init@@Base+0xf0>
   11ce4:	add	r3, pc, r3
   11ce8:	mov	r2, #1
   11cec:	str	r2, [r3]
   11cf0:	b	11cf8 <mmk_init@@Base+0xb8>
   11cf4:	nop	{0}
   11cf8:	sub	sp, fp, #8
   11cfc:	ldr	r4, [sp]
   11d00:	ldr	fp, [sp, #4]
   11d04:	add	sp, sp, #8
   11d08:	pop	{pc}		; (ldr pc, [sp], #4)
   11d0c:	andeq	r3, r1, r0, lsr #7
   11d10:	andeq	r3, r1, ip, ror #8
   11d14:	andeq	r3, r1, r0, asr r4
   11d18:	andeq	r3, r1, r4, asr #8
   11d1c:	andeq	r0, r0, r8, lsl #1
   11d20:	ldrdeq	r2, [r0], -r4
   11d24:	andeq	r2, r0, r4, asr r8
   11d28:	muleq	r0, ip, r8
   11d2c:	strdeq	r3, [r1], -ip
   11d30:	andeq	r3, r1, r8, ror #7

00011d34 <mmk_plt_ctx@@Base>:
   11d34:	str	fp, [sp, #-8]!
   11d38:	str	lr, [sp, #4]
   11d3c:	add	fp, sp, #4
   11d40:	sub	sp, sp, #8
   11d44:	ldr	r2, [pc, #104]	; 11db4 <mmk_plt_ctx@@Base+0x80>
   11d48:	add	r2, pc, r2
   11d4c:	ldr	r3, [pc, #100]	; 11db8 <mmk_plt_ctx@@Base+0x84>
   11d50:	add	r3, pc, r3
   11d54:	ldr	r3, [r3]
   11d58:	cmp	r3, #0
   11d5c:	bne	11d94 <mmk_plt_ctx@@Base+0x60>
   11d60:	ldr	r3, [pc, #84]	; 11dbc <mmk_plt_ctx@@Base+0x88>
   11d64:	ldr	r3, [r2, r3]
   11d68:	ldr	r0, [r3]
   11d6c:	ldr	r3, [pc, #76]	; 11dc0 <mmk_plt_ctx@@Base+0x8c>
   11d70:	add	r3, pc, r3
   11d74:	str	r3, [sp]
   11d78:	mov	r3, #54	; 0x36
   11d7c:	ldr	r2, [pc, #64]	; 11dc4 <mmk_plt_ctx@@Base+0x90>
   11d80:	add	r2, pc, r2
   11d84:	ldr	r1, [pc, #60]	; 11dc8 <mmk_plt_ctx@@Base+0x94>
   11d88:	add	r1, pc, r1
   11d8c:	bl	11254 <fprintf@plt>
   11d90:	bl	112a8 <abort@plt>
   11d94:	ldr	r3, [pc, #48]	; 11dcc <mmk_plt_ctx@@Base+0x98>
   11d98:	add	r3, pc, r3
   11d9c:	ldr	r3, [r3, #4]
   11da0:	mov	r0, r3
   11da4:	sub	sp, fp, #4
   11da8:	ldr	fp, [sp]
   11dac:	add	sp, sp, #4
   11db0:	pop	{pc}		; (ldr pc, [sp], #4)
   11db4:			; <UNDEFINED> instruction: 0x000132b0
   11db8:	andeq	r3, r1, ip, ror r3
   11dbc:	andeq	r0, r0, r8, lsl #1
   11dc0:	andeq	r2, r0, r4, lsr #16
   11dc4:	andeq	r2, r0, ip, lsl #15
   11dc8:	ldrdeq	r2, [r0], -r4
   11dcc:	andeq	r3, r1, r4, lsr r3

00011dd0 <mmk_reset@@Base>:
   11dd0:	str	fp, [sp, #-8]!
   11dd4:	str	lr, [sp, #4]
   11dd8:	add	fp, sp, #4
   11ddc:	sub	sp, sp, #16
   11de0:	str	r0, [fp, #-16]
   11de4:	ldr	r3, [fp, #-16]
   11de8:	cmp	r3, #0
   11dec:	beq	11e14 <mmk_reset@@Base+0x44>
   11df0:	ldr	r0, [fp, #-16]
   11df4:	bl	13420 <mmk_ask_ctx@@Base>
   11df8:	str	r0, [fp, #-8]
   11dfc:	ldr	r0, [fp, #-8]
   11e00:	bl	13074 <mmk_stub_context@@Base>
   11e04:	str	r0, [fp, #-12]
   11e08:	ldr	r0, [fp, #-12]
   11e0c:	bl	12260 <mmk_mock_destroy_internal@@Base>
   11e10:	b	11e18 <mmk_reset@@Base+0x48>
   11e14:	nop	{0}
   11e18:	sub	sp, fp, #4
   11e1c:	ldr	fp, [sp]
   11e20:	add	sp, sp, #4
   11e24:	pop	{pc}		; (ldr pc, [sp], #4)

00011e28 <mmk_matcher_init@@Base>:
   11e28:	str	fp, [sp, #-8]!
   11e2c:	str	lr, [sp, #4]
   11e30:	add	fp, sp, #4
   11e34:	sub	sp, sp, #16
   11e38:	str	r0, [fp, #-16]
   11e3c:	mov	r0, #12
   11e40:	bl	13fa4 <mmk_malloc@@Base>
   11e44:	str	r0, [fp, #-8]
   11e48:	ldr	r3, [fp, #-8]
   11e4c:	mov	r1, r3
   11e50:	mov	r2, #0
   11e54:	mov	r3, #0
   11e58:	strd	r2, [r1]
   11e5c:	mov	r3, r2
   11e60:	str	r3, [r1, #8]
   11e64:	ldr	r3, [fp, #-8]
   11e68:	ldr	r2, [fp, #-16]
   11e6c:	str	r2, [r3]
   11e70:	ldr	r3, [pc, #40]	; 11ea0 <mmk_matcher_init@@Base+0x78>
   11e74:	add	r3, pc, r3
   11e78:	mov	r0, r3
   11e7c:	bl	11290 <__tls_get_addr@plt>
   11e80:	mov	r2, r0
   11e84:	ldr	r3, [fp, #-8]
   11e88:	str	r3, [r2]
   11e8c:	nop	{0}
   11e90:	sub	sp, fp, #4
   11e94:	ldr	fp, [sp]
   11e98:	add	sp, sp, #4
   11e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   11ea0:	andeq	r3, r1, r0, ror #3

00011ea4 <mmk_matcher_term@@Base>:
   11ea4:	str	fp, [sp, #-8]!
   11ea8:	str	lr, [sp, #4]
   11eac:	add	fp, sp, #4
   11eb0:	ldr	r3, [pc, #40]	; 11ee0 <mmk_matcher_term@@Base+0x3c>
   11eb4:	add	r3, pc, r3
   11eb8:	mov	r0, r3
   11ebc:	bl	11290 <__tls_get_addr@plt>
   11ec0:	mov	r2, r0
   11ec4:	mov	r3, #0
   11ec8:	str	r3, [r2]
   11ecc:	nop	{0}
   11ed0:	sub	sp, fp, #4
   11ed4:	ldr	fp, [sp]
   11ed8:	add	sp, sp, #4
   11edc:	pop	{pc}		; (ldr pc, [sp], #4)
   11ee0:	andeq	r3, r1, r0, lsr #3

00011ee4 <mmk_matcher_ctx@@Base>:
   11ee4:	str	fp, [sp, #-8]!
   11ee8:	str	lr, [sp, #4]
   11eec:	add	fp, sp, #4
   11ef0:	ldr	r3, [pc, #36]	; 11f1c <mmk_matcher_ctx@@Base+0x38>
   11ef4:	add	r3, pc, r3
   11ef8:	mov	r0, r3
   11efc:	bl	11290 <__tls_get_addr@plt>
   11f00:	mov	r3, r0
   11f04:	ldr	r3, [r3]
   11f08:	mov	r0, r3
   11f0c:	sub	sp, fp, #4
   11f10:	ldr	fp, [sp]
   11f14:	add	sp, sp, #4
   11f18:	pop	{pc}		; (ldr pc, [sp], #4)
   11f1c:	andeq	r3, r1, r0, ror #2

00011f20 <mmk_matcher_add@@Base>:
   11f20:	str	fp, [sp, #-8]!
   11f24:	str	lr, [sp, #4]
   11f28:	add	fp, sp, #4
   11f2c:	sub	sp, sp, #24
   11f30:	str	r0, [fp, #-24]	; 0xffffffe8
   11f34:	str	r1, [fp, #-28]	; 0xffffffe4
   11f38:	mov	r0, #12
   11f3c:	bl	13fa4 <mmk_malloc@@Base>
   11f40:	str	r0, [fp, #-16]
   11f44:	ldr	r3, [pc, #212]	; 12020 <mmk_matcher_add@@Base+0x100>
   11f48:	add	r3, pc, r3
   11f4c:	mov	r0, r3
   11f50:	bl	11290 <__tls_get_addr@plt>
   11f54:	mov	r3, r0
   11f58:	ldr	r3, [r3]
   11f5c:	str	r3, [fp, #-8]
   11f60:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11f64:	ldr	r3, [fp, #-16]
   11f68:	mov	r1, r3
   11f6c:	mov	r2, #0
   11f70:	mov	r3, #0
   11f74:	strd	r2, [r1]
   11f78:	mov	r3, r2
   11f7c:	str	r3, [r1, #8]
   11f80:	ldr	r3, [fp, #-16]
   11f84:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11f88:	str	r2, [r3]
   11f8c:	ldr	r3, [fp, #-16]
   11f90:	str	r0, [r3, #4]
   11f94:	ldr	r3, [pc, #136]	; 12024 <mmk_matcher_add@@Base+0x104>
   11f98:	add	r3, pc, r3
   11f9c:	mov	r0, r3
   11fa0:	bl	11290 <__tls_get_addr@plt>
   11fa4:	mov	r3, r0
   11fa8:	ldr	r3, [r3]
   11fac:	ldr	r3, [r3, #8]
   11fb0:	str	r3, [fp, #-12]
   11fb4:	b	11fcc <mmk_matcher_add@@Base+0xac>
   11fb8:	ldr	r3, [fp, #-12]
   11fbc:	str	r3, [fp, #-8]
   11fc0:	ldr	r3, [fp, #-12]
   11fc4:	ldr	r3, [r3, #8]
   11fc8:	str	r3, [fp, #-12]
   11fcc:	ldr	r3, [fp, #-12]
   11fd0:	cmp	r3, #0
   11fd4:	beq	11ff0 <mmk_matcher_add@@Base+0xd0>
   11fd8:	ldr	r3, [fp, #-12]
   11fdc:	ldr	r2, [r3, #4]
   11fe0:	ldr	r3, [fp, #-16]
   11fe4:	ldr	r3, [r3, #4]
   11fe8:	cmp	r2, r3
   11fec:	bcc	11fb8 <mmk_matcher_add@@Base+0x98>
   11ff0:	ldr	r3, [fp, #-8]
   11ff4:	ldr	r2, [r3, #8]
   11ff8:	ldr	r3, [fp, #-16]
   11ffc:	str	r2, [r3, #8]
   12000:	ldr	r3, [fp, #-8]
   12004:	ldr	r2, [fp, #-16]
   12008:	str	r2, [r3, #8]
   1200c:	nop	{0}
   12010:	sub	sp, fp, #4
   12014:	ldr	fp, [sp]
   12018:	add	sp, sp, #4
   1201c:	pop	{pc}		; (ldr pc, [sp], #4)
   12020:	andeq	r3, r1, ip, lsl #2
   12024:	strheq	r3, [r1], -ip

00012028 <mmk_matcher_get_predicate@@Base>:
   12028:	push	{fp}		; (str fp, [sp, #-4]!)
   1202c:	add	fp, sp, #0
   12030:	sub	sp, sp, #12
   12034:	str	r0, [fp, #-8]
   12038:	ldr	r3, [fp, #-8]
   1203c:	add	r3, r3, #12
   12040:	mov	r0, r3
   12044:	add	sp, fp, #0
   12048:	pop	{fp}		; (ldr fp, [sp], #4)
   1204c:	bx	lr

00012050 <mmk_mock_create_internal@@Base>:
   12050:	str	r4, [sp, #-12]!
   12054:	str	fp, [sp, #4]
   12058:	str	lr, [sp, #8]
   1205c:	add	fp, sp, #8
   12060:	sub	sp, sp, #44	; 0x2c
   12064:	str	r0, [fp, #-40]	; 0xffffffd8
   12068:	str	r1, [fp, #-44]	; 0xffffffd4
   1206c:	ldr	r4, [pc, #464]	; 12244 <mmk_mock_create_internal@@Base+0x1f4>
   12070:	add	r4, pc, r4
   12074:	bl	11c40 <mmk_init@@Base>
   12078:	mov	r0, #20
   1207c:	bl	13fa4 <mmk_malloc@@Base>
   12080:	str	r0, [fp, #-20]	; 0xffffffec
   12084:	ldr	r3, [fp, #-20]	; 0xffffffec
   12088:	cmp	r3, #0
   1208c:	bne	120c4 <mmk_mock_create_internal@@Base+0x74>
   12090:	ldr	r3, [pc, #432]	; 12248 <mmk_mock_create_internal@@Base+0x1f8>
   12094:	ldr	r3, [r4, r3]
   12098:	ldr	r0, [r3]
   1209c:	ldr	r3, [pc, #424]	; 1224c <mmk_mock_create_internal@@Base+0x1fc>
   120a0:	add	r3, pc, r3
   120a4:	str	r3, [sp]
   120a8:	mov	r3, #36	; 0x24
   120ac:	ldr	r2, [pc, #412]	; 12250 <mmk_mock_create_internal@@Base+0x200>
   120b0:	add	r2, pc, r2
   120b4:	ldr	r1, [pc, #408]	; 12254 <mmk_mock_create_internal@@Base+0x204>
   120b8:	add	r1, pc, r1
   120bc:	bl	11254 <fprintf@plt>
   120c0:	bl	112a8 <abort@plt>
   120c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   120c8:	mov	r1, r3
   120cc:	mov	r2, #0
   120d0:	mov	r3, #0
   120d4:	strd	r2, [r1]
   120d8:	strd	r2, [r1, #8]
   120dc:	mov	r3, r2
   120e0:	str	r3, [r1, #16]
   120e4:	mov	r1, #64	; 0x40
   120e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   120ec:	bl	13d8c <mmk_strchr@@Base>
   120f0:	str	r0, [fp, #-24]	; 0xffffffe8
   120f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   120f8:	cmp	r3, #0
   120fc:	bne	12110 <mmk_mock_create_internal@@Base+0xc0>
   12100:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12104:	bl	13ef0 <mmk_strlen@@Base>
   12108:	str	r0, [fp, #-16]
   1210c:	b	12120 <mmk_mock_create_internal@@Base+0xd0>
   12110:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12114:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12118:	sub	r3, r2, r3
   1211c:	str	r3, [fp, #-16]
   12120:	ldr	r3, [fp, #-16]
   12124:	add	r3, r3, #1
   12128:	mov	r0, r3
   1212c:	bl	13fa4 <mmk_malloc@@Base>
   12130:	str	r0, [fp, #-28]	; 0xffffffe4
   12134:	ldr	r2, [fp, #-16]
   12138:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1213c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12140:	bl	13e64 <mmk_strncpy@@Base>
   12144:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12148:	ldr	r3, [fp, #-16]
   1214c:	add	r3, r2, r3
   12150:	mov	r2, #0
   12154:	strb	r2, [r3]
   12158:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1215c:	cmp	r3, #0
   12160:	beq	1218c <mmk_mock_create_internal@@Base+0x13c>
   12164:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12168:	add	r3, r3, #1
   1216c:	mov	r2, #4
   12170:	ldr	r1, [pc, #224]	; 12258 <mmk_mock_create_internal@@Base+0x208>
   12174:	add	r1, pc, r1
   12178:	mov	r0, r3
   1217c:	bl	13cc8 <mmk_strneq@@Base>
   12180:	mov	r3, r0
   12184:	cmp	r3, #0
   12188:	beq	12194 <mmk_mock_create_internal@@Base+0x144>
   1218c:	mov	r3, #1
   12190:	b	12198 <mmk_mock_create_internal@@Base+0x148>
   12194:	mov	r3, #0
   12198:	str	r3, [fp, #-32]	; 0xffffffe0
   1219c:	ldr	r2, [fp, #-20]	; 0xffffffec
   121a0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   121a4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   121a8:	bl	132ec <mmk_stub_create@@Base>
   121ac:	mov	r2, r0
   121b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   121b4:	str	r2, [r3, #4]
   121b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   121bc:	ldr	r3, [r3, #4]
   121c0:	cmp	r3, #0
   121c4:	bne	121ec <mmk_mock_create_internal@@Base+0x19c>
   121c8:	ldr	r3, [pc, #120]	; 12248 <mmk_mock_create_internal@@Base+0x1f8>
   121cc:	ldr	r3, [r4, r3]
   121d0:	ldr	r3, [r3]
   121d4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   121d8:	ldr	r1, [pc, #124]	; 1225c <mmk_mock_create_internal@@Base+0x20c>
   121dc:	add	r1, pc, r1
   121e0:	mov	r0, r3
   121e4:	bl	11254 <fprintf@plt>
   121e8:	bl	112a8 <abort@plt>
   121ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   121f0:	cmp	r3, #0
   121f4:	bne	12218 <mmk_mock_create_internal@@Base+0x1c8>
   121f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   121fc:	ldr	r4, [r3, #4]
   12200:	ldr	r2, [fp, #-20]	; 0xffffffec
   12204:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12208:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1220c:	bl	132ec <mmk_stub_create@@Base>
   12210:	mov	r3, r0
   12214:	str	r3, [r4, #36]	; 0x24
   12218:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1221c:	bl	1404c <mmk_free@@Base>
   12220:	ldr	r3, [fp, #-20]	; 0xffffffec
   12224:	ldr	r3, [r3, #4]
   12228:	ldr	r3, [r3, #32]
   1222c:	mov	r0, r3
   12230:	sub	sp, fp, #8
   12234:	ldr	r4, [sp]
   12238:	ldr	fp, [sp, #4]
   1223c:	add	sp, sp, #8
   12240:	pop	{pc}		; (ldr pc, [sp], #4)
   12244:	andeq	r2, r1, r8, lsl #31
   12248:	andeq	r0, r0, r8, lsl #1
   1224c:	andeq	r2, r0, r8, ror r5
   12250:	strdeq	r2, [r0], -r8
   12254:	andeq	r2, r0, r0, asr #10
   12258:	andeq	r2, r0, r8, lsr #9
   1225c:	andeq	r2, r0, r8, asr #8

00012260 <mmk_mock_destroy_internal@@Base>:
   12260:	str	fp, [sp, #-8]!
   12264:	str	lr, [sp, #4]
   12268:	add	fp, sp, #4
   1226c:	sub	sp, sp, #32
   12270:	str	r0, [fp, #-32]	; 0xffffffe0
   12274:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12278:	ldr	r3, [r3, #4]
   1227c:	str	r3, [fp, #-8]
   12280:	b	122a0 <mmk_mock_destroy_internal@@Base+0x40>
   12284:	ldr	r3, [fp, #-8]
   12288:	ldr	r3, [r3, #36]	; 0x24
   1228c:	str	r3, [fp, #-20]	; 0xffffffec
   12290:	ldr	r0, [fp, #-8]
   12294:	bl	133e8 <mmk_stub_destroy@@Base>
   12298:	ldr	r3, [fp, #-20]	; 0xffffffec
   1229c:	str	r3, [fp, #-8]
   122a0:	ldr	r3, [fp, #-8]
   122a4:	cmp	r3, #0
   122a8:	bne	12284 <mmk_mock_destroy_internal@@Base+0x24>
   122ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122b0:	ldr	r3, [r3, #8]
   122b4:	mov	r0, r3
   122b8:	bl	1404c <mmk_free@@Base>
   122bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122c0:	ldr	r3, [r3]
   122c4:	str	r3, [fp, #-12]
   122c8:	b	12320 <mmk_mock_destroy_internal@@Base+0xc0>
   122cc:	ldr	r3, [fp, #-12]
   122d0:	ldr	r3, [r3, #4]
   122d4:	str	r3, [fp, #-24]	; 0xffffffe8
   122d8:	ldr	r3, [fp, #-12]
   122dc:	ldr	r3, [r3]
   122e0:	str	r3, [fp, #-16]
   122e4:	b	12304 <mmk_mock_destroy_internal@@Base+0xa4>
   122e8:	ldr	r3, [fp, #-16]
   122ec:	ldr	r3, [r3, #8]
   122f0:	str	r3, [fp, #-28]	; 0xffffffe4
   122f4:	ldr	r0, [fp, #-16]
   122f8:	bl	1404c <mmk_free@@Base>
   122fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12300:	str	r3, [fp, #-16]
   12304:	ldr	r3, [fp, #-16]
   12308:	cmp	r3, #0
   1230c:	bne	122e8 <mmk_mock_destroy_internal@@Base+0x88>
   12310:	ldr	r0, [fp, #-12]
   12314:	bl	1404c <mmk_free@@Base>
   12318:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1231c:	str	r3, [fp, #-12]
   12320:	ldr	r3, [fp, #-12]
   12324:	cmp	r3, #0
   12328:	bne	122cc <mmk_mock_destroy_internal@@Base+0x6c>
   1232c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12330:	bl	1404c <mmk_free@@Base>
   12334:	nop	{0}
   12338:	sub	sp, fp, #4
   1233c:	ldr	fp, [sp]
   12340:	add	sp, sp, #4
   12344:	pop	{pc}		; (ldr pc, [sp], #4)

00012348 <mmk_mock_params_begin@@Base>:
   12348:	push	{fp}		; (str fp, [sp, #-4]!)
   1234c:	add	fp, sp, #0
   12350:	sub	sp, sp, #12
   12354:	str	r0, [fp, #-8]
   12358:	ldr	r3, [fp, #-8]
   1235c:	ldr	r3, [r3, #8]
   12360:	cmp	r3, #0
   12364:	beq	12378 <mmk_mock_params_begin@@Base+0x30>
   12368:	ldr	r3, [fp, #-8]
   1236c:	ldr	r3, [r3, #12]
   12370:	cmp	r3, #0
   12374:	bne	12380 <mmk_mock_params_begin@@Base+0x38>
   12378:	mov	r3, #0
   1237c:	b	1238c <mmk_mock_params_begin@@Base+0x44>
   12380:	ldr	r3, [fp, #-8]
   12384:	ldr	r3, [r3, #8]
   12388:	add	r3, r3, #4
   1238c:	mov	r0, r3
   12390:	add	sp, fp, #0
   12394:	pop	{fp}		; (ldr fp, [sp], #4)
   12398:	bx	lr

0001239c <mmk_mock_params_next@@Base>:
   1239c:	push	{fp}		; (str fp, [sp, #-4]!)
   123a0:	add	fp, sp, #0
   123a4:	sub	sp, sp, #20
   123a8:	str	r0, [fp, #-16]
   123ac:	str	r1, [fp, #-20]	; 0xffffffec
   123b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   123b4:	str	r3, [fp, #-8]
   123b8:	ldr	r3, [fp, #-8]
   123bc:	ldr	r3, [r3, #-4]
   123c0:	str	r3, [fp, #-12]
   123c4:	ldr	r3, [fp, #-12]
   123c8:	add	r3, r3, #4
   123cc:	ldr	r2, [fp, #-8]
   123d0:	add	r3, r2, r3
   123d4:	str	r3, [fp, #-8]
   123d8:	ldr	r3, [fp, #-16]
   123dc:	ldr	r2, [r3, #8]
   123e0:	ldr	r3, [fp, #-16]
   123e4:	ldr	r3, [r3, #12]
   123e8:	add	r3, r2, r3
   123ec:	ldr	r2, [fp, #-8]
   123f0:	cmp	r2, r3
   123f4:	bcc	12400 <mmk_mock_params_next@@Base+0x64>
   123f8:	mov	r3, #0
   123fc:	b	12404 <mmk_mock_params_next@@Base+0x68>
   12400:	ldr	r3, [fp, #-8]
   12404:	mov	r0, r3
   12408:	add	sp, fp, #0
   1240c:	pop	{fp}		; (ldr fp, [sp], #4)
   12410:	bx	lr

00012414 <mmk_mock_get_params@@Base>:
   12414:	str	fp, [sp, #-8]!
   12418:	str	lr, [sp, #4]
   1241c:	add	fp, sp, #4
   12420:	sub	sp, sp, #8
   12424:	bl	134dc <mmk_ctx@@Base>
   12428:	mov	r3, r0
   1242c:	mov	r0, r3
   12430:	bl	13074 <mmk_stub_context@@Base>
   12434:	str	r0, [fp, #-8]
   12438:	ldr	r3, [fp, #-8]
   1243c:	ldr	r3, [r3]
   12440:	mov	r0, r3
   12444:	sub	sp, fp, #4
   12448:	ldr	fp, [sp]
   1244c:	add	sp, sp, #4
   12450:	pop	{pc}		; (ldr pc, [sp], #4)
   12454:	push	{fp}		; (str fp, [sp, #-4]!)
   12458:	add	fp, sp, #0
   1245c:	sub	sp, sp, #20
   12460:	str	r0, [fp, #-16]
   12464:	str	r1, [fp, #-20]	; 0xffffffec
   12468:	ldr	r3, [fp, #-16]
   1246c:	ldr	r3, [r3]
   12470:	str	r3, [fp, #-12]
   12474:	ldr	r3, [fp, #-16]
   12478:	ldr	r3, [r3, #8]
   1247c:	str	r3, [fp, #-8]
   12480:	b	124d8 <mmk_mock_get_params@@Base+0xc4>
   12484:	ldr	r3, [fp, #-8]
   12488:	ldr	r3, [r3]
   1248c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12490:	cmp	r2, r3
   12494:	bne	124cc <mmk_mock_get_params@@Base+0xb8>
   12498:	ldr	r3, [fp, #-8]
   1249c:	ldr	r3, [r3, #4]
   124a0:	ldr	r2, [fp, #-12]
   124a4:	cmp	r2, r3
   124a8:	bhi	124b8 <mmk_mock_get_params@@Base+0xa4>
   124ac:	ldr	r3, [fp, #-8]
   124b0:	ldr	r3, [r3, #4]
   124b4:	b	124ec <mmk_mock_get_params@@Base+0xd8>
   124b8:	ldr	r3, [fp, #-8]
   124bc:	ldr	r2, [r3, #4]
   124c0:	ldr	r3, [fp, #-12]
   124c4:	add	r3, r2, r3
   124c8:	b	124ec <mmk_mock_get_params@@Base+0xd8>
   124cc:	ldr	r3, [fp, #-8]
   124d0:	add	r3, r3, #8
   124d4:	str	r3, [fp, #-8]
   124d8:	ldr	r3, [fp, #-8]
   124dc:	ldr	r3, [r3]
   124e0:	cmp	r3, #0
   124e4:	bne	12484 <mmk_mock_get_params@@Base+0x70>
   124e8:	mov	r3, #0
   124ec:	mov	r0, r3
   124f0:	add	sp, fp, #0
   124f4:	pop	{fp}		; (ldr fp, [sp], #4)
   124f8:	bx	lr
   124fc:	push	{fp}		; (str fp, [sp, #-4]!)
   12500:	add	fp, sp, #0
   12504:	sub	sp, sp, #20
   12508:	str	r0, [fp, #-16]
   1250c:	str	r1, [fp, #-20]	; 0xffffffec
   12510:	ldr	r3, [fp, #-16]
   12514:	ldr	r3, [r3, #8]
   12518:	str	r3, [fp, #-8]
   1251c:	b	1254c <mmk_mock_get_params@@Base+0x138>
   12520:	ldr	r3, [fp, #-8]
   12524:	ldr	r3, [r3]
   12528:	ldr	r2, [fp, #-20]	; 0xffffffec
   1252c:	cmp	r2, r3
   12530:	bne	12540 <mmk_mock_get_params@@Base+0x12c>
   12534:	ldr	r3, [fp, #-8]
   12538:	ldr	r3, [r3, #4]
   1253c:	b	12560 <mmk_mock_get_params@@Base+0x14c>
   12540:	ldr	r3, [fp, #-8]
   12544:	add	r3, r3, #8
   12548:	str	r3, [fp, #-8]
   1254c:	ldr	r3, [fp, #-8]
   12550:	ldr	r3, [r3]
   12554:	cmp	r3, #0
   12558:	bne	12520 <mmk_mock_get_params@@Base+0x10c>
   1255c:	mov	r3, #0
   12560:	mov	r0, r3
   12564:	add	sp, fp, #0
   12568:	pop	{fp}		; (ldr fp, [sp], #4)
   1256c:	bx	lr
   12570:	push	{fp}		; (str fp, [sp, #-4]!)
   12574:	add	fp, sp, #0
   12578:	sub	sp, sp, #12
   1257c:	str	r0, [fp, #-8]
   12580:	str	r1, [fp, #-12]
   12584:	b	125b4 <mmk_mock_get_params@@Base+0x1a0>
   12588:	ldr	r3, [fp, #-8]
   1258c:	ldr	r3, [r3]
   12590:	ldr	r2, [fp, #-12]
   12594:	cmp	r2, r3
   12598:	bne	125a8 <mmk_mock_get_params@@Base+0x194>
   1259c:	ldr	r3, [fp, #-8]
   125a0:	ldr	r3, [r3, #4]
   125a4:	b	125c8 <mmk_mock_get_params@@Base+0x1b4>
   125a8:	ldr	r3, [fp, #-8]
   125ac:	add	r3, r3, #8
   125b0:	str	r3, [fp, #-8]
   125b4:	ldr	r3, [fp, #-8]
   125b8:	ldr	r3, [r3]
   125bc:	cmp	r3, #0
   125c0:	bne	12588 <mmk_mock_get_params@@Base+0x174>
   125c4:	mvn	r3, #0
   125c8:	mov	r0, r3
   125cc:	add	sp, fp, #0
   125d0:	pop	{fp}		; (ldr fp, [sp], #4)
   125d4:	bx	lr
   125d8:	push	{fp}		; (str fp, [sp, #-4]!)
   125dc:	add	fp, sp, #0
   125e0:	sub	sp, sp, #20
   125e4:	str	r0, [fp, #-16]
   125e8:	str	r1, [fp, #-20]	; 0xffffffec
   125ec:	mov	r3, #0
   125f0:	str	r3, [fp, #-8]
   125f4:	b	12638 <mmk_mock_get_params@@Base+0x224>
   125f8:	ldr	r3, [fp, #-8]
   125fc:	lsl	r3, r3, #5
   12600:	ldr	r2, [fp, #-16]
   12604:	add	r3, r2, r3
   12608:	ldr	r3, [r3]
   1260c:	cmp	r3, #2
   12610:	bne	1262c <mmk_mock_get_params@@Base+0x218>
   12614:	ldr	r3, [fp, #-8]
   12618:	lsl	r3, r3, #5
   1261c:	ldr	r2, [fp, #-16]
   12620:	add	r3, r2, r3
   12624:	ldr	r3, [r3, #8]
   12628:	b	1264c <mmk_mock_get_params@@Base+0x238>
   1262c:	ldr	r3, [fp, #-8]
   12630:	add	r3, r3, #1
   12634:	str	r3, [fp, #-8]
   12638:	ldr	r2, [fp, #-8]
   1263c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12640:	cmp	r2, r3
   12644:	bcc	125f8 <mmk_mock_get_params@@Base+0x1e4>
   12648:	mov	r3, #0
   1264c:	mov	r0, r3
   12650:	add	sp, fp, #0
   12654:	pop	{fp}		; (ldr fp, [sp], #4)
   12658:	bx	lr
   1265c:	push	{fp}		; (str fp, [sp, #-4]!)
   12660:	add	fp, sp, #0
   12664:	sub	sp, sp, #20
   12668:	str	r0, [fp, #-16]
   1266c:	ldr	r3, [fp, #-16]
   12670:	str	r3, [fp, #-8]
   12674:	b	126a0 <mmk_mock_get_params@@Base+0x28c>
   12678:	ldr	r3, [fp, #-8]
   1267c:	ldr	r3, [r3]
   12680:	cmp	r3, #21
   12684:	bne	12694 <mmk_mock_get_params@@Base+0x280>
   12688:	ldr	r3, [fp, #-8]
   1268c:	ldr	r3, [r3, #4]
   12690:	b	126b4 <mmk_mock_get_params@@Base+0x2a0>
   12694:	ldr	r3, [fp, #-8]
   12698:	add	r3, r3, #8
   1269c:	str	r3, [fp, #-8]
   126a0:	ldr	r3, [fp, #-8]
   126a4:	ldr	r3, [r3]
   126a8:	cmp	r3, #0
   126ac:	bne	12678 <mmk_mock_get_params@@Base+0x264>
   126b0:	mov	r3, #0
   126b4:	mov	r0, r3
   126b8:	add	sp, fp, #0
   126bc:	pop	{fp}		; (ldr fp, [sp], #4)
   126c0:	bx	lr
   126c4:	str	fp, [sp, #-8]!
   126c8:	str	lr, [sp, #4]
   126cc:	add	fp, sp, #4
   126d0:	sub	sp, sp, #24
   126d4:	ldr	r3, [pc, #200]	; 127a4 <mmk_mock_get_params@@Base+0x390>
   126d8:	add	r3, pc, r3
   126dc:	mov	r2, #0
   126e0:	str	r2, [fp, #-8]
   126e4:	ldr	r2, [pc, #188]	; 127a8 <mmk_mock_get_params@@Base+0x394>
   126e8:	ldr	r2, [r3, r2]
   126ec:	str	r2, [fp, #-8]
   126f0:	ldr	r2, [fp, #-8]
   126f4:	cmp	r2, #0
   126f8:	bne	1278c <mmk_mock_get_params@@Base+0x378>
   126fc:	ldr	r2, [pc, #168]	; 127ac <mmk_mock_get_params@@Base+0x398>
   12700:	ldr	r3, [r3, r2]
   12704:	ldr	r3, [r3]
   12708:	str	r3, [fp, #-12]
   1270c:	nop	{0}
   12710:	ldr	r3, [fp, #-12]
   12714:	add	r2, r3, #4
   12718:	str	r2, [fp, #-12]
   1271c:	ldr	r3, [r3]
   12720:	cmp	r3, #0
   12724:	bne	12710 <mmk_mock_get_params@@Base+0x2fc>
   12728:	ldr	r3, [fp, #-12]
   1272c:	str	r3, [fp, #-16]
   12730:	mov	r1, #3
   12734:	ldr	r0, [fp, #-16]
   12738:	bl	12570 <mmk_mock_get_params@@Base+0x15c>
   1273c:	str	r0, [fp, #-20]	; 0xffffffec
   12740:	mov	r1, #4
   12744:	ldr	r0, [fp, #-16]
   12748:	bl	12570 <mmk_mock_get_params@@Base+0x15c>
   1274c:	str	r0, [fp, #-24]	; 0xffffffe8
   12750:	ldr	r3, [fp, #-20]	; 0xffffffec
   12754:	cmn	r3, #1
   12758:	beq	1278c <mmk_mock_get_params@@Base+0x378>
   1275c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12760:	cmn	r3, #1
   12764:	beq	1278c <mmk_mock_get_params@@Base+0x378>
   12768:	ldr	r3, [fp, #-20]	; 0xffffffec
   1276c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12770:	mov	r0, r3
   12774:	bl	125d8 <mmk_mock_get_params@@Base+0x1c4>
   12778:	str	r0, [fp, #-28]	; 0xffffffe4
   1277c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12780:	mov	r0, r3
   12784:	bl	1265c <mmk_mock_get_params@@Base+0x248>
   12788:	str	r0, [fp, #-8]
   1278c:	ldr	r3, [fp, #-8]
   12790:	mov	r0, r3
   12794:	sub	sp, fp, #4
   12798:	ldr	fp, [sp]
   1279c:	add	sp, sp, #4
   127a0:	pop	{pc}		; (ldr pc, [sp], #4)
   127a4:	andeq	r2, r1, r0, lsr #18
   127a8:	andeq	r0, r0, ip, lsr #1
   127ac:	strheq	r0, [r0], -r4

000127b0 <plt_init_ctx@@Base>:
   127b0:	str	fp, [sp, #-8]!
   127b4:	str	lr, [sp, #4]
   127b8:	add	fp, sp, #4
   127bc:	ldr	r3, [pc, #64]	; 12804 <plt_init_ctx@@Base+0x54>
   127c0:	add	r3, pc, r3
   127c4:	ldr	r3, [r3]
   127c8:	cmn	r3, #1
   127cc:	bne	127e4 <plt_init_ctx@@Base+0x34>
   127d0:	bl	126c4 <mmk_mock_get_params@@Base+0x2b0>
   127d4:	mov	r2, r0
   127d8:	ldr	r3, [pc, #40]	; 12808 <plt_init_ctx@@Base+0x58>
   127dc:	add	r3, pc, r3
   127e0:	str	r2, [r3]
   127e4:	ldr	r3, [pc, #32]	; 1280c <plt_init_ctx@@Base+0x5c>
   127e8:	add	r3, pc, r3
   127ec:	ldr	r3, [r3]
   127f0:	mov	r0, r3
   127f4:	sub	sp, fp, #4
   127f8:	ldr	fp, [sp]
   127fc:	add	sp, sp, #4
   12800:	pop	{pc}		; (ldr pc, [sp], #4)
   12804:	andeq	r2, r1, r0, lsl #18
   12808:	andeq	r2, r1, r4, ror #17
   1280c:	ldrdeq	r2, [r1], -r8

00012810 <plt_get_lib@@Base>:
   12810:	str	r4, [sp, #-12]!
   12814:	str	fp, [sp, #4]
   12818:	str	lr, [sp, #8]
   1281c:	add	fp, sp, #8
   12820:	sub	sp, sp, #60	; 0x3c
   12824:	str	r0, [fp, #-64]	; 0xffffffc0
   12828:	str	r1, [fp, #-68]	; 0xffffffbc
   1282c:	ldr	r4, [pc, #936]	; 12bdc <plt_get_lib@@Base+0x3cc>
   12830:	add	r4, pc, r4
   12834:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12838:	cmp	r3, #0
   1283c:	bne	1284c <plt_get_lib@@Base+0x3c>
   12840:	ldr	r3, [pc, #920]	; 12be0 <plt_get_lib@@Base+0x3d0>
   12844:	add	r3, pc, r3
   12848:	str	r3, [fp, #-68]	; 0xffffffbc
   1284c:	mov	r3, #0
   12850:	str	r3, [fp, #-16]
   12854:	mov	r2, #4
   12858:	ldr	r3, [pc, #900]	; 12be4 <plt_get_lib@@Base+0x3d4>
   1285c:	add	r3, pc, r3
   12860:	mov	r1, r3
   12864:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12868:	bl	1129c <strncmp@plt>
   1286c:	mov	r3, r0
   12870:	cmp	r3, #0
   12874:	bne	12884 <plt_get_lib@@Base+0x74>
   12878:	mov	r3, #1
   1287c:	str	r3, [fp, #-16]
   12880:	b	1298c <plt_get_lib@@Base+0x17c>
   12884:	mov	r2, #5
   12888:	ldr	r3, [pc, #856]	; 12be8 <plt_get_lib@@Base+0x3d8>
   1288c:	add	r3, pc, r3
   12890:	mov	r1, r3
   12894:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12898:	bl	1129c <strncmp@plt>
   1289c:	mov	r3, r0
   128a0:	cmp	r3, #0
   128a4:	bne	128b4 <plt_get_lib@@Base+0xa4>
   128a8:	mov	r3, #2
   128ac:	str	r3, [fp, #-16]
   128b0:	b	1298c <plt_get_lib@@Base+0x17c>
   128b4:	mov	r2, #4
   128b8:	ldr	r3, [pc, #812]	; 12bec <plt_get_lib@@Base+0x3dc>
   128bc:	add	r3, pc, r3
   128c0:	mov	r1, r3
   128c4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   128c8:	bl	1129c <strncmp@plt>
   128cc:	mov	r3, r0
   128d0:	cmp	r3, #0
   128d4:	bne	128e4 <plt_get_lib@@Base+0xd4>
   128d8:	mov	r3, #3
   128dc:	str	r3, [fp, #-16]
   128e0:	b	1298c <plt_get_lib@@Base+0x17c>
   128e4:	ldr	r3, [pc, #772]	; 12bf0 <plt_get_lib@@Base+0x3e0>
   128e8:	add	r3, pc, r3
   128ec:	mov	r1, r3
   128f0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   128f4:	bl	111d0 <strcmp@plt>
   128f8:	mov	r3, r0
   128fc:	cmp	r3, #0
   12900:	bne	12914 <plt_get_lib@@Base+0x104>
   12904:	ldr	r3, [pc, #744]	; 12bf4 <plt_get_lib@@Base+0x3e4>
   12908:	add	r3, pc, r3
   1290c:	str	r3, [fp, #-68]	; 0xffffffbc
   12910:	b	1298c <plt_get_lib@@Base+0x17c>
   12914:	mov	r1, #58	; 0x3a
   12918:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1291c:	bl	11248 <strchr@plt>
   12920:	str	r0, [fp, #-24]	; 0xffffffe8
   12924:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12928:	cmp	r3, #0
   1292c:	beq	12968 <plt_get_lib@@Base+0x158>
   12930:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12934:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12938:	sub	r3, r2, r3
   1293c:	add	r3, r3, #1
   12940:	str	r3, [fp, #-28]	; 0xffffffe4
   12944:	ldr	r3, [pc, #684]	; 12bf8 <plt_get_lib@@Base+0x3e8>
   12948:	ldr	r3, [r4, r3]
   1294c:	ldr	r0, [r3]
   12950:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12954:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12958:	ldr	r1, [pc, #668]	; 12bfc <plt_get_lib@@Base+0x3ec>
   1295c:	add	r1, pc, r1
   12960:	bl	11254 <fprintf@plt>
   12964:	b	12988 <plt_get_lib@@Base+0x178>
   12968:	ldr	r3, [pc, #648]	; 12bf8 <plt_get_lib@@Base+0x3e8>
   1296c:	ldr	r3, [r4, r3]
   12970:	ldr	r3, [r3]
   12974:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12978:	ldr	r1, [pc, #640]	; 12c00 <plt_get_lib@@Base+0x3f0>
   1297c:	add	r1, pc, r1
   12980:	mov	r0, r3
   12984:	bl	11254 <fprintf@plt>
   12988:	bl	112a8 <abort@plt>
   1298c:	ldr	r3, [fp, #-16]
   12990:	cmp	r3, #0
   12994:	beq	129b0 <plt_get_lib@@Base+0x1a0>
   12998:	mov	r1, #58	; 0x3a
   1299c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   129a0:	bl	11248 <strchr@plt>
   129a4:	mov	r3, r0
   129a8:	add	r3, r3, #1
   129ac:	b	129b4 <plt_get_lib@@Base+0x1a4>
   129b0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   129b4:	str	r3, [fp, #-32]	; 0xffffffe0
   129b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   129bc:	bl	11230 <strlen@plt>
   129c0:	str	r0, [fp, #-36]	; 0xffffffdc
   129c4:	ldr	r3, [pc, #568]	; 12c04 <plt_get_lib@@Base+0x3f4>
   129c8:	add	r3, pc, r3
   129cc:	mov	r1, r3
   129d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   129d4:	bl	111d0 <strcmp@plt>
   129d8:	mov	r3, r0
   129dc:	cmp	r3, #0
   129e0:	moveq	r3, #1
   129e4:	movne	r3, #0
   129e8:	uxtb	r3, r3
   129ec:	str	r3, [fp, #-40]	; 0xffffffd8
   129f0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   129f4:	ldr	r3, [r3, #4]
   129f8:	str	r3, [fp, #-20]	; 0xffffffec
   129fc:	b	12bb4 <plt_get_lib@@Base+0x3a4>
   12a00:	ldr	r3, [fp, #-16]
   12a04:	cmp	r3, #1
   12a08:	bne	12b38 <plt_get_lib@@Base+0x328>
   12a0c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12a10:	cmp	r3, #0
   12a14:	beq	12a70 <plt_get_lib@@Base+0x260>
   12a18:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a1c:	ldr	r3, [r3, #4]
   12a20:	ldr	r2, [pc, #480]	; 12c08 <plt_get_lib@@Base+0x3f8>
   12a24:	add	r2, pc, r2
   12a28:	mov	r1, r2
   12a2c:	mov	r0, r3
   12a30:	bl	111c4 <strstr@plt>
   12a34:	mov	r3, r0
   12a38:	cmp	r3, #0
   12a3c:	bne	12a68 <plt_get_lib@@Base+0x258>
   12a40:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a44:	ldr	r3, [r3, #4]
   12a48:	ldr	r2, [pc, #444]	; 12c0c <plt_get_lib@@Base+0x3fc>
   12a4c:	add	r2, pc, r2
   12a50:	mov	r1, r2
   12a54:	mov	r0, r3
   12a58:	bl	111c4 <strstr@plt>
   12a5c:	mov	r3, r0
   12a60:	cmp	r3, #0
   12a64:	beq	12ba8 <plt_get_lib@@Base+0x398>
   12a68:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a6c:	b	12bc4 <plt_get_lib@@Base+0x3b4>
   12a70:	mov	r3, sp
   12a74:	mov	r4, r3
   12a78:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12a7c:	add	r3, r3, #8
   12a80:	str	r3, [fp, #-44]	; 0xffffffd4
   12a84:	ldr	ip, [fp, #-44]	; 0xffffffd4
   12a88:	mov	r3, ip
   12a8c:	sub	r3, r3, #1
   12a90:	str	r3, [fp, #-48]	; 0xffffffd0
   12a94:	mov	r0, ip
   12a98:	mov	r1, #0
   12a9c:	mov	r2, #0
   12aa0:	mov	r3, #0
   12aa4:	lsl	r3, r1, #3
   12aa8:	orr	r3, r3, r0, lsr #29
   12aac:	lsl	r2, r0, #3
   12ab0:	mov	r0, ip
   12ab4:	mov	r1, #0
   12ab8:	mov	r2, #0
   12abc:	mov	r3, #0
   12ac0:	lsl	r3, r1, #3
   12ac4:	orr	r3, r3, r0, lsr #29
   12ac8:	lsl	r2, r0, #3
   12acc:	add	r3, ip, #7
   12ad0:	lsr	r3, r3, #3
   12ad4:	lsl	r3, r3, #3
   12ad8:	sub	sp, sp, r3
   12adc:	mov	r3, sp
   12ae0:	add	r3, r3, #0
   12ae4:	str	r3, [fp, #-52]	; 0xffffffcc
   12ae8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12aec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12af0:	ldr	r2, [pc, #280]	; 12c10 <plt_get_lib@@Base+0x400>
   12af4:	add	r2, pc, r2
   12af8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12afc:	bl	1126c <snprintf@plt>
   12b00:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b04:	ldr	r3, [r3, #4]
   12b08:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12b0c:	mov	r1, r2
   12b10:	mov	r0, r3
   12b14:	bl	111c4 <strstr@plt>
   12b18:	mov	r3, r0
   12b1c:	cmp	r3, #0
   12b20:	beq	12b30 <plt_get_lib@@Base+0x320>
   12b24:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b28:	mov	sp, r4
   12b2c:	b	12bc4 <plt_get_lib@@Base+0x3b4>
   12b30:	mov	sp, r4
   12b34:	b	12ba8 <plt_get_lib@@Base+0x398>
   12b38:	ldr	r3, [fp, #-16]
   12b3c:	cmp	r3, #0
   12b40:	beq	12b50 <plt_get_lib@@Base+0x340>
   12b44:	ldr	r3, [fp, #-16]
   12b48:	cmp	r3, #2
   12b4c:	bne	12b78 <plt_get_lib@@Base+0x368>
   12b50:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b54:	ldr	r3, [r3, #4]
   12b58:	mov	r1, r3
   12b5c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12b60:	bl	111d0 <strcmp@plt>
   12b64:	mov	r3, r0
   12b68:	cmp	r3, #0
   12b6c:	bne	12ba8 <plt_get_lib@@Base+0x398>
   12b70:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b74:	b	12bc4 <plt_get_lib@@Base+0x3b4>
   12b78:	ldr	r3, [fp, #-16]
   12b7c:	cmp	r3, #3
   12b80:	bne	12ba8 <plt_get_lib@@Base+0x398>
   12b84:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12b88:	ldr	r0, [fp, #-20]	; 0xffffffec
   12b8c:	bl	12cf4 <plt_get_lib@@Base+0x4e4>
   12b90:	str	r0, [fp, #-56]	; 0xffffffc8
   12b94:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12b98:	cmp	r3, #0
   12b9c:	beq	12ba8 <plt_get_lib@@Base+0x398>
   12ba0:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ba4:	b	12bc4 <plt_get_lib@@Base+0x3b4>
   12ba8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12bac:	ldr	r3, [r3, #12]
   12bb0:	str	r3, [fp, #-20]	; 0xffffffec
   12bb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12bb8:	cmp	r3, #0
   12bbc:	bne	12a00 <plt_get_lib@@Base+0x1f0>
   12bc0:	mov	r3, #0
   12bc4:	mov	r0, r3
   12bc8:	sub	sp, fp, #8
   12bcc:	ldr	r4, [sp]
   12bd0:	ldr	fp, [sp, #4]
   12bd4:	add	sp, sp, #8
   12bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   12bdc:	andeq	r2, r1, r8, asr #15
   12be0:	andeq	r1, r0, r4, lsl lr
   12be4:	andeq	r1, r0, r4, lsl #28
   12be8:	ldrdeq	r1, [r0], -ip
   12bec:			; <UNDEFINED> instruction: 0x00001db4
   12bf0:	andeq	r1, r0, r0, ror sp
   12bf4:	andeq	r1, r0, r0, ror sp
   12bf8:	andeq	r0, r0, r8, lsl #1
   12bfc:	andeq	r1, r0, r0, lsr #26
   12c00:	andeq	r1, r0, r4, lsr #26
   12c04:	strdeq	r1, [r0], -ip
   12c08:	andeq	r1, r0, r4, lsr #25
   12c0c:	andeq	r1, r0, r8, lsl #25
   12c10:	andeq	r1, r0, ip, ror #23
   12c14:	str	fp, [sp, #-8]!
   12c18:	str	lr, [sp, #4]
   12c1c:	add	fp, sp, #4
   12c20:	sub	sp, sp, #32
   12c24:	str	r0, [fp, #-24]	; 0xffffffe8
   12c28:	str	r1, [fp, #-28]	; 0xffffffe4
   12c2c:	str	r2, [fp, #-32]	; 0xffffffe0
   12c30:	str	r3, [fp, #-36]	; 0xffffffdc
   12c34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c38:	ldr	r3, [r3]
   12c3c:	str	r3, [fp, #-8]
   12c40:	mov	r3, #0
   12c44:	str	r3, [fp, #-12]
   12c48:	b	12cbc <plt_get_lib@@Base+0x4ac>
   12c4c:	ldr	r3, [fp, #-8]
   12c50:	ldr	r3, [r3, #4]
   12c54:	lsr	r3, r3, #8
   12c58:	lsl	r3, r3, #4
   12c5c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12c60:	add	r3, r2, r3
   12c64:	str	r3, [fp, #-16]
   12c68:	ldr	r3, [fp, #-16]
   12c6c:	ldr	r3, [r3]
   12c70:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12c74:	add	r3, r2, r3
   12c78:	ldr	r1, [fp, #-36]	; 0xffffffdc
   12c7c:	mov	r0, r3
   12c80:	bl	111d0 <strcmp@plt>
   12c84:	mov	r3, r0
   12c88:	cmp	r3, #0
   12c8c:	bne	12c9c <plt_get_lib@@Base+0x48c>
   12c90:	ldr	r3, [fp, #-8]
   12c94:	ldr	r3, [r3]
   12c98:	b	12ce0 <plt_get_lib@@Base+0x4d0>
   12c9c:	ldr	r3, [fp, #-12]
   12ca0:	add	r3, r3, #1
   12ca4:	str	r3, [fp, #-12]
   12ca8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12cac:	ldr	r3, [r3, #8]
   12cb0:	ldr	r2, [fp, #-8]
   12cb4:	add	r3, r2, r3
   12cb8:	str	r3, [fp, #-8]
   12cbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12cc0:	ldr	r2, [r3, #4]
   12cc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12cc8:	ldr	r3, [r3, #8]
   12ccc:	udiv	r3, r2, r3
   12cd0:	ldr	r2, [fp, #-12]
   12cd4:	cmp	r2, r3
   12cd8:	bcc	12c4c <plt_get_lib@@Base+0x43c>
   12cdc:	mov	r3, #0
   12ce0:	mov	r0, r3
   12ce4:	sub	sp, fp, #4
   12ce8:	ldr	fp, [sp]
   12cec:	add	sp, sp, #4
   12cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   12cf4:	str	fp, [sp, #-8]!
   12cf8:	str	lr, [sp, #4]
   12cfc:	add	fp, sp, #4
   12d00:	sub	sp, sp, #56	; 0x38
   12d04:	str	r0, [fp, #-56]	; 0xffffffc8
   12d08:	str	r1, [fp, #-60]	; 0xffffffc4
   12d0c:	mov	r1, #6
   12d10:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12d14:	bl	12454 <mmk_mock_get_params@@Base+0x40>
   12d18:	str	r0, [fp, #-8]
   12d1c:	mov	r1, #5
   12d20:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12d24:	bl	12454 <mmk_mock_get_params@@Base+0x40>
   12d28:	str	r0, [fp, #-12]
   12d2c:	mov	r1, #20
   12d30:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12d34:	bl	124fc <mmk_mock_get_params@@Base+0xe8>
   12d38:	mov	r3, r0
   12d3c:	str	r3, [fp, #-16]
   12d40:	mov	r1, #23
   12d44:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12d48:	bl	12454 <mmk_mock_get_params@@Base+0x40>
   12d4c:	str	r0, [fp, #-20]	; 0xffffffec
   12d50:	mov	r1, #2
   12d54:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12d58:	bl	124fc <mmk_mock_get_params@@Base+0xe8>
   12d5c:	str	r0, [fp, #-24]	; 0xffffffe8
   12d60:	ldr	r3, [fp, #-16]
   12d64:	add	r3, r3, #2
   12d68:	mov	r1, r3
   12d6c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12d70:	bl	124fc <mmk_mock_get_params@@Base+0xe8>
   12d74:	str	r0, [fp, #-28]	; 0xffffffe4
   12d78:	ldr	r3, [fp, #-8]
   12d7c:	cmp	r3, #0
   12d80:	beq	12dc0 <plt_get_lib@@Base+0x5b0>
   12d84:	ldr	r3, [fp, #-12]
   12d88:	cmp	r3, #0
   12d8c:	beq	12dc0 <plt_get_lib@@Base+0x5b0>
   12d90:	ldr	r3, [fp, #-16]
   12d94:	cmp	r3, #0
   12d98:	beq	12dc0 <plt_get_lib@@Base+0x5b0>
   12d9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12da0:	cmp	r3, #0
   12da4:	beq	12dc0 <plt_get_lib@@Base+0x5b0>
   12da8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12dac:	cmp	r3, #0
   12db0:	beq	12dc0 <plt_get_lib@@Base+0x5b0>
   12db4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12db8:	cmp	r3, #0
   12dbc:	bne	12dc8 <plt_get_lib@@Base+0x5b8>
   12dc0:	mov	r3, #0
   12dc4:	b	12e24 <plt_get_lib@@Base+0x614>
   12dc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12dcc:	str	r3, [fp, #-48]	; 0xffffffd0
   12dd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12dd4:	str	r3, [fp, #-44]	; 0xffffffd4
   12dd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12ddc:	str	r3, [fp, #-40]	; 0xffffffd8
   12de0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12de4:	ldr	r3, [r3]
   12de8:	str	r3, [fp, #-32]	; 0xffffffe0
   12dec:	sub	r0, fp, #48	; 0x30
   12df0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12df4:	ldr	r2, [fp, #-12]
   12df8:	ldr	r1, [fp, #-8]
   12dfc:	bl	12c14 <plt_get_lib@@Base+0x404>
   12e00:	str	r0, [fp, #-36]	; 0xffffffdc
   12e04:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12e08:	cmp	r3, #0
   12e0c:	beq	12e20 <plt_get_lib@@Base+0x610>
   12e10:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12e14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12e18:	add	r3, r2, r3
   12e1c:	b	12e24 <plt_get_lib@@Base+0x614>
   12e20:	mov	r3, #0
   12e24:	mov	r0, r3
   12e28:	sub	sp, fp, #4
   12e2c:	ldr	fp, [sp]
   12e30:	add	sp, sp, #4
   12e34:	pop	{pc}		; (ldr pc, [sp], #4)

00012e38 <plt_get_offsets@@Base>:
   12e38:	str	fp, [sp, #-8]!
   12e3c:	str	lr, [sp, #4]
   12e40:	add	fp, sp, #4
   12e44:	sub	sp, sp, #24
   12e48:	str	r0, [fp, #-16]
   12e4c:	str	r1, [fp, #-20]	; 0xffffffec
   12e50:	str	r2, [fp, #-24]	; 0xffffffe8
   12e54:	ldr	r1, [fp, #-20]	; 0xffffffec
   12e58:	ldr	r0, [fp, #-16]
   12e5c:	bl	12cf4 <plt_get_lib@@Base+0x4e4>
   12e60:	str	r0, [fp, #-8]
   12e64:	ldr	r3, [fp, #-8]
   12e68:	cmp	r3, #0
   12e6c:	beq	12eb0 <plt_get_offsets@@Base+0x78>
   12e70:	mov	r0, #8
   12e74:	bl	13fa4 <mmk_malloc@@Base>
   12e78:	str	r0, [fp, #-12]
   12e7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e80:	mov	r2, #1
   12e84:	str	r2, [r3]
   12e88:	ldr	r3, [fp, #-12]
   12e8c:	mov	r1, r3
   12e90:	mov	r2, #0
   12e94:	mov	r3, #0
   12e98:	strd	r2, [r1]
   12e9c:	ldr	r3, [fp, #-12]
   12ea0:	ldr	r2, [fp, #-8]
   12ea4:	str	r2, [r3]
   12ea8:	ldr	r3, [fp, #-12]
   12eac:	b	12eb4 <plt_get_offsets@@Base+0x7c>
   12eb0:	mov	r3, #0
   12eb4:	mov	r0, r3
   12eb8:	sub	sp, fp, #4
   12ebc:	ldr	fp, [sp]
   12ec0:	add	sp, sp, #4
   12ec4:	pop	{pc}		; (ldr pc, [sp], #4)

00012ec8 <plt_set_offsets@@Base>:
   12ec8:	push	{fp}		; (str fp, [sp, #-4]!)
   12ecc:	add	fp, sp, #0
   12ed0:	sub	sp, sp, #28
   12ed4:	str	r0, [fp, #-16]
   12ed8:	str	r1, [fp, #-20]	; 0xffffffec
   12edc:	str	r2, [fp, #-24]	; 0xffffffe8
   12ee0:	mov	r3, #0
   12ee4:	str	r3, [fp, #-8]
   12ee8:	b	12f5c <plt_set_offsets@@Base+0x94>
   12eec:	ldr	r3, [fp, #-8]
   12ef0:	lsl	r3, r3, #3
   12ef4:	ldr	r2, [fp, #-16]
   12ef8:	add	r3, r2, r3
   12efc:	ldr	r3, [r3, #4]
   12f00:	cmp	r3, #0
   12f04:	bne	12f34 <plt_set_offsets@@Base+0x6c>
   12f08:	ldr	r3, [fp, #-8]
   12f0c:	lsl	r3, r3, #3
   12f10:	ldr	r2, [fp, #-16]
   12f14:	add	r3, r2, r3
   12f18:	ldr	r2, [r3]
   12f1c:	ldr	r3, [fp, #-8]
   12f20:	lsl	r3, r3, #3
   12f24:	ldr	r1, [fp, #-16]
   12f28:	add	r3, r1, r3
   12f2c:	ldr	r2, [r2]
   12f30:	str	r2, [r3, #4]
   12f34:	ldr	r3, [fp, #-8]
   12f38:	lsl	r3, r3, #3
   12f3c:	ldr	r2, [fp, #-16]
   12f40:	add	r3, r2, r3
   12f44:	ldr	r3, [r3]
   12f48:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12f4c:	str	r2, [r3]
   12f50:	ldr	r3, [fp, #-8]
   12f54:	add	r3, r3, #1
   12f58:	str	r3, [fp, #-8]
   12f5c:	ldr	r2, [fp, #-8]
   12f60:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f64:	cmp	r2, r3
   12f68:	bcc	12eec <plt_set_offsets@@Base+0x24>
   12f6c:	nop	{0}
   12f70:	add	sp, fp, #0
   12f74:	pop	{fp}		; (ldr fp, [sp], #4)
   12f78:	bx	lr

00012f7c <plt_reset_offsets@@Base>:
   12f7c:	push	{fp}		; (str fp, [sp, #-4]!)
   12f80:	add	fp, sp, #0
   12f84:	sub	sp, sp, #20
   12f88:	str	r0, [fp, #-16]
   12f8c:	str	r1, [fp, #-20]	; 0xffffffec
   12f90:	mov	r3, #0
   12f94:	str	r3, [fp, #-8]
   12f98:	b	12fd4 <plt_reset_offsets@@Base+0x58>
   12f9c:	ldr	r3, [fp, #-8]
   12fa0:	lsl	r3, r3, #3
   12fa4:	ldr	r2, [fp, #-16]
   12fa8:	add	r2, r2, r3
   12fac:	ldr	r3, [fp, #-8]
   12fb0:	lsl	r3, r3, #3
   12fb4:	ldr	r1, [fp, #-16]
   12fb8:	add	r3, r1, r3
   12fbc:	ldr	r3, [r3]
   12fc0:	ldr	r2, [r2, #4]
   12fc4:	str	r2, [r3]
   12fc8:	ldr	r3, [fp, #-8]
   12fcc:	add	r3, r3, #1
   12fd0:	str	r3, [fp, #-8]
   12fd4:	ldr	r2, [fp, #-8]
   12fd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fdc:	cmp	r2, r3
   12fe0:	bcc	12f9c <plt_reset_offsets@@Base+0x20>
   12fe4:	nop	{0}
   12fe8:	add	sp, fp, #0
   12fec:	pop	{fp}		; (ldr fp, [sp], #4)
   12ff0:	bx	lr

00012ff4 <plt_get_real_fn@@Base>:
   12ff4:	str	fp, [sp, #-8]!
   12ff8:	str	lr, [sp, #4]
   12ffc:	add	fp, sp, #4
   13000:	sub	sp, sp, #16
   13004:	str	r0, [fp, #-16]
   13008:	str	r1, [fp, #-20]	; 0xffffffec
   1300c:	ldr	r3, [fp, #-16]
   13010:	ldr	r3, [r3, #4]
   13014:	str	r3, [fp, #-8]
   13018:	b	13050 <plt_get_real_fn@@Base+0x5c>
   1301c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13020:	ldr	r0, [fp, #-8]
   13024:	bl	12cf4 <plt_get_lib@@Base+0x4e4>
   13028:	str	r0, [fp, #-12]
   1302c:	ldr	r3, [fp, #-12]
   13030:	cmp	r3, #0
   13034:	beq	13044 <plt_get_real_fn@@Base+0x50>
   13038:	ldr	r3, [fp, #-12]
   1303c:	ldr	r3, [r3]
   13040:	b	13060 <plt_get_real_fn@@Base+0x6c>
   13044:	ldr	r3, [fp, #-8]
   13048:	ldr	r3, [r3, #12]
   1304c:	str	r3, [fp, #-8]
   13050:	ldr	r3, [fp, #-8]
   13054:	cmp	r3, #0
   13058:	bne	1301c <plt_get_real_fn@@Base+0x28>
   1305c:	mov	r3, #0
   13060:	mov	r0, r3
   13064:	sub	sp, fp, #4
   13068:	ldr	fp, [sp]
   1306c:	add	sp, sp, #4
   13070:	pop	{pc}		; (ldr pc, [sp], #4)

00013074 <mmk_stub_context@@Base>:
   13074:	push	{fp}		; (str fp, [sp, #-4]!)
   13078:	add	fp, sp, #0
   1307c:	sub	sp, sp, #12
   13080:	str	r0, [fp, #-8]
   13084:	ldr	r3, [fp, #-8]
   13088:	cmp	r3, #0
   1308c:	bne	13098 <mmk_stub_context@@Base+0x24>
   13090:	mov	r3, #0
   13094:	b	130a0 <mmk_stub_context@@Base+0x2c>
   13098:	ldr	r3, [fp, #-8]
   1309c:	ldr	r3, [r3, #12]
   130a0:	mov	r0, r3
   130a4:	add	sp, fp, #0
   130a8:	pop	{fp}		; (ldr fp, [sp], #4)
   130ac:	bx	lr

000130b0 <mmk_stub_create_static@@Base>:
   130b0:	str	r4, [sp, #-12]!
   130b4:	str	fp, [sp, #4]
   130b8:	str	lr, [sp, #8]
   130bc:	add	fp, sp, #8
   130c0:	sub	sp, sp, #44	; 0x2c
   130c4:	str	r0, [fp, #-40]	; 0xffffffd8
   130c8:	str	r1, [fp, #-44]	; 0xffffffd4
   130cc:	str	r2, [fp, #-48]	; 0xffffffd0
   130d0:	str	r3, [fp, #-52]	; 0xffffffcc
   130d4:	ldr	r4, [pc, #504]	; 132d4 <mmk_stub_create_static@@Base+0x224>
   130d8:	add	r4, pc, r4
   130dc:	ldr	r3, [pc, #500]	; 132d8 <mmk_stub_create_static@@Base+0x228>
   130e0:	add	r3, pc, r3
   130e4:	mov	r0, r3
   130e8:	bl	11290 <__tls_get_addr@plt>
   130ec:	mov	r2, r0
   130f0:	mov	r3, #0
   130f4:	str	r3, [r2]
   130f8:	ldr	r3, [pc, #476]	; 132dc <mmk_stub_create_static@@Base+0x22c>
   130fc:	add	r3, pc, r3
   13100:	mov	r0, r3
   13104:	bl	11290 <__tls_get_addr@plt>
   13108:	mov	r2, r0
   1310c:	mov	r3, #0
   13110:	str	r3, [r2]
   13114:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13118:	bl	13ef0 <mmk_strlen@@Base>
   1311c:	mov	r3, r0
   13120:	add	r3, r3, #1
   13124:	mov	r0, r3
   13128:	bl	13fa4 <mmk_malloc@@Base>
   1312c:	str	r0, [fp, #-20]	; 0xffffffec
   13130:	ldr	r3, [fp, #-20]	; 0xffffffec
   13134:	cmp	r3, #0
   13138:	bne	13144 <mmk_stub_create_static@@Base+0x94>
   1313c:	mvn	r3, #11
   13140:	b	132bc <mmk_stub_create_static@@Base+0x20c>
   13144:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13148:	ldr	r0, [fp, #-20]	; 0xffffffec
   1314c:	bl	13df4 <mmk_strcpy@@Base>
   13150:	mov	r3, #0
   13154:	str	r3, [fp, #-16]
   13158:	mov	r1, #64	; 0x40
   1315c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13160:	bl	13d8c <mmk_strchr@@Base>
   13164:	str	r0, [fp, #-24]	; 0xffffffe8
   13168:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1316c:	cmp	r3, #0
   13170:	beq	1318c <mmk_stub_create_static@@Base+0xdc>
   13174:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13178:	mov	r2, #0
   1317c:	strb	r2, [r3]
   13180:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13184:	add	r3, r3, #1
   13188:	str	r3, [fp, #-16]
   1318c:	bl	11d34 <mmk_plt_ctx@@Base>
   13190:	mov	r3, r0
   13194:	ldr	r1, [fp, #-16]
   13198:	mov	r0, r3
   1319c:	bl	12810 <plt_get_lib@@Base>
   131a0:	str	r0, [fp, #-28]	; 0xffffffe4
   131a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   131a8:	cmp	r3, #0
   131ac:	bne	131b8 <mmk_stub_create_static@@Base+0x108>
   131b0:	mvn	r3, #1
   131b4:	b	132bc <mmk_stub_create_static@@Base+0x20c>
   131b8:	mov	r3, #0
   131bc:	str	r3, [fp, #-36]	; 0xffffffdc
   131c0:	sub	r3, fp, #36	; 0x24
   131c4:	mov	r2, r3
   131c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   131cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   131d0:	bl	12e38 <plt_get_offsets@@Base>
   131d4:	str	r0, [fp, #-32]	; 0xffffffe0
   131d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   131dc:	cmp	r3, #0
   131e0:	beq	131f0 <mmk_stub_create_static@@Base+0x140>
   131e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   131e8:	cmp	r3, #0
   131ec:	bne	131f8 <mmk_stub_create_static@@Base+0x148>
   131f0:	mvn	r3, #1
   131f4:	b	132bc <mmk_stub_create_static@@Base+0x20c>
   131f8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   131fc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13200:	mov	r1, r3
   13204:	mov	r2, #0
   13208:	mov	r3, #0
   1320c:	strd	r2, [r1]
   13210:	strd	r2, [r1, #8]
   13214:	strd	r2, [r1, #16]
   13218:	strd	r2, [r1, #24]
   1321c:	strd	r2, [r1, #32]
   13220:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13224:	ldr	r2, [pc, #180]	; 132e0 <mmk_stub_create_static@@Base+0x230>
   13228:	ldr	r2, [r4, r2]
   1322c:	str	r2, [r3]
   13230:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13234:	ldr	r2, [pc, #168]	; 132e4 <mmk_stub_create_static@@Base+0x234>
   13238:	ldr	r2, [r4, r2]
   1323c:	str	r2, [r3, #4]
   13240:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13244:	ldr	r2, [pc, #156]	; 132e8 <mmk_stub_create_static@@Base+0x238>
   13248:	ldr	r2, [r4, r2]
   1324c:	str	r2, [r3, #8]
   13250:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13254:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13258:	str	r2, [r3, #12]
   1325c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13260:	ldr	r2, [fp, #-20]	; 0xffffffec
   13264:	str	r2, [r3, #16]
   13268:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1326c:	ldr	r2, [fp, #-16]
   13270:	str	r2, [r3, #20]
   13274:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13278:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1327c:	str	r2, [r3, #24]
   13280:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13284:	str	r0, [r3, #28]
   13288:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1328c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13290:	bl	13560 <create_trampoline@@Base>
   13294:	mov	r2, r0
   13298:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1329c:	str	r2, [r3, #32]
   132a0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   132a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   132a8:	ldr	r3, [r3, #32]
   132ac:	mov	r2, r3
   132b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   132b4:	bl	12ec8 <plt_set_offsets@@Base>
   132b8:	mov	r3, #0
   132bc:	mov	r0, r3
   132c0:	sub	sp, fp, #8
   132c4:	ldr	r4, [sp]
   132c8:	ldr	fp, [sp, #4]
   132cc:	add	sp, sp, #8
   132d0:	pop	{pc}		; (ldr pc, [sp], #4)
   132d4:	andeq	r1, r1, r0, lsr #30
   132d8:	andeq	r1, r1, ip, ror pc
   132dc:	andeq	r1, r1, r8, ror #30
   132e0:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   132e4:	muleq	r0, r0, r0
   132e8:	andeq	r0, r0, r0, lsr #1

000132ec <mmk_stub_create@@Base>:
   132ec:	str	fp, [sp, #-8]!
   132f0:	str	lr, [sp, #4]
   132f4:	add	fp, sp, #4
   132f8:	sub	sp, sp, #24
   132fc:	str	r0, [fp, #-16]
   13300:	str	r1, [fp, #-20]	; 0xffffffec
   13304:	str	r2, [fp, #-24]	; 0xffffffe8
   13308:	bl	11c40 <mmk_init@@Base>
   1330c:	mov	r0, #40	; 0x28
   13310:	bl	13fa4 <mmk_malloc@@Base>
   13314:	str	r0, [fp, #-8]
   13318:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1331c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13320:	ldr	r1, [fp, #-16]
   13324:	ldr	r0, [fp, #-8]
   13328:	bl	130b0 <mmk_stub_create_static@@Base>
   1332c:	str	r0, [fp, #-12]
   13330:	ldr	r3, [fp, #-12]
   13334:	cmp	r3, #0
   13338:	bge	1335c <mmk_stub_create@@Base+0x70>
   1333c:	ldr	r0, [fp, #-8]
   13340:	bl	1404c <mmk_free@@Base>
   13344:	bl	11260 <__errno_location@plt>
   13348:	mov	r2, r0
   1334c:	ldr	r3, [fp, #-12]
   13350:	str	r3, [r2]
   13354:	mov	r3, #0
   13358:	str	r3, [fp, #-8]
   1335c:	ldr	r3, [fp, #-8]
   13360:	mov	r0, r3
   13364:	sub	sp, fp, #4
   13368:	ldr	fp, [sp]
   1336c:	add	sp, sp, #4
   13370:	pop	{pc}		; (ldr pc, [sp], #4)

00013374 <mmk_stub_destroy_static@@Base>:
   13374:	str	fp, [sp, #-8]!
   13378:	str	lr, [sp, #4]
   1337c:	add	fp, sp, #4
   13380:	sub	sp, sp, #8
   13384:	str	r0, [fp, #-8]
   13388:	ldr	r3, [fp, #-8]
   1338c:	ldr	r2, [r3, #24]
   13390:	ldr	r3, [fp, #-8]
   13394:	ldr	r3, [r3, #28]
   13398:	mov	r1, r3
   1339c:	mov	r0, r2
   133a0:	bl	12f7c <plt_reset_offsets@@Base>
   133a4:	ldr	r3, [fp, #-8]
   133a8:	ldr	r3, [r3, #24]
   133ac:	mov	r0, r3
   133b0:	bl	1404c <mmk_free@@Base>
   133b4:	ldr	r3, [fp, #-8]
   133b8:	ldr	r3, [r3, #32]
   133bc:	mov	r0, r3
   133c0:	bl	136d8 <destroy_trampoline@@Base>
   133c4:	ldr	r3, [fp, #-8]
   133c8:	ldr	r3, [r3, #16]
   133cc:	mov	r0, r3
   133d0:	bl	1404c <mmk_free@@Base>
   133d4:	nop	{0}
   133d8:	sub	sp, fp, #4
   133dc:	ldr	fp, [sp]
   133e0:	add	sp, sp, #4
   133e4:	pop	{pc}		; (ldr pc, [sp], #4)

000133e8 <mmk_stub_destroy@@Base>:
   133e8:	str	fp, [sp, #-8]!
   133ec:	str	lr, [sp, #4]
   133f0:	add	fp, sp, #4
   133f4:	sub	sp, sp, #8
   133f8:	str	r0, [fp, #-8]
   133fc:	ldr	r0, [fp, #-8]
   13400:	bl	13374 <mmk_stub_destroy_static@@Base>
   13404:	ldr	r0, [fp, #-8]
   13408:	bl	1404c <mmk_free@@Base>
   1340c:	nop	{0}
   13410:	sub	sp, fp, #4
   13414:	ldr	fp, [sp]
   13418:	add	sp, sp, #4
   1341c:	pop	{pc}		; (ldr pc, [sp], #4)

00013420 <mmk_ask_ctx@@Base>:
   13420:	str	fp, [sp, #-8]!
   13424:	str	lr, [sp, #4]
   13428:	add	fp, sp, #4
   1342c:	sub	sp, sp, #8
   13430:	str	r0, [fp, #-8]
   13434:	ldr	r3, [pc, #52]	; 13470 <mmk_ask_ctx@@Base+0x50>
   13438:	add	r3, pc, r3
   1343c:	mov	r0, r3
   13440:	bl	11290 <__tls_get_addr@plt>
   13444:	mov	r2, r0
   13448:	mov	r3, #1
   1344c:	str	r3, [r2]
   13450:	ldr	r3, [fp, #-8]
   13454:	blx	r3
   13458:	mov	r3, r0
   1345c:	mov	r0, r3
   13460:	sub	sp, fp, #4
   13464:	ldr	fp, [sp]
   13468:	add	sp, sp, #4
   1346c:	pop	{pc}		; (ldr pc, [sp], #4)
   13470:	andeq	r1, r1, r4, lsr #24

00013474 <mmk_ctx_asked@@Base>:
   13474:	str	fp, [sp, #-8]!
   13478:	str	lr, [sp, #4]
   1347c:	add	fp, sp, #4
   13480:	sub	sp, sp, #8
   13484:	ldr	r3, [pc, #72]	; 134d4 <mmk_ctx_asked@@Base+0x60>
   13488:	add	r3, pc, r3
   1348c:	mov	r0, r3
   13490:	bl	11290 <__tls_get_addr@plt>
   13494:	mov	r3, r0
   13498:	ldr	r3, [r3]
   1349c:	str	r3, [fp, #-8]
   134a0:	ldr	r3, [pc, #48]	; 134d8 <mmk_ctx_asked@@Base+0x64>
   134a4:	add	r3, pc, r3
   134a8:	mov	r0, r3
   134ac:	bl	11290 <__tls_get_addr@plt>
   134b0:	mov	r2, r0
   134b4:	mov	r3, #0
   134b8:	str	r3, [r2]
   134bc:	ldr	r3, [fp, #-8]
   134c0:	mov	r0, r3
   134c4:	sub	sp, fp, #4
   134c8:	ldr	fp, [sp]
   134cc:	add	sp, sp, #4
   134d0:	pop	{pc}		; (ldr pc, [sp], #4)
   134d4:	ldrdeq	r1, [r1], -r4
   134d8:			; <UNDEFINED> instruction: 0x00011bb8

000134dc <mmk_ctx@@Base>:
   134dc:	str	fp, [sp, #-8]!
   134e0:	str	lr, [sp, #4]
   134e4:	add	fp, sp, #4
   134e8:	ldr	r3, [pc, #36]	; 13514 <mmk_ctx@@Base+0x38>
   134ec:	add	r3, pc, r3
   134f0:	mov	r0, r3
   134f4:	bl	11290 <__tls_get_addr@plt>
   134f8:	mov	r3, r0
   134fc:	ldr	r3, [r3]
   13500:	mov	r0, r3
   13504:	sub	sp, fp, #4
   13508:	ldr	fp, [sp]
   1350c:	add	sp, sp, #4
   13510:	pop	{pc}		; (ldr pc, [sp], #4)
   13514:	andeq	r1, r1, r8, ror fp

00013518 <mmk_set_ctx@@Base>:
   13518:	str	fp, [sp, #-8]!
   1351c:	str	lr, [sp, #4]
   13520:	add	fp, sp, #4
   13524:	sub	sp, sp, #8
   13528:	str	r0, [fp, #-8]
   1352c:	ldr	r3, [pc, #40]	; 1355c <mmk_set_ctx@@Base+0x44>
   13530:	add	r3, pc, r3
   13534:	mov	r0, r3
   13538:	bl	11290 <__tls_get_addr@plt>
   1353c:	mov	r2, r0
   13540:	ldr	r3, [fp, #-8]
   13544:	str	r3, [r2]
   13548:	nop	{0}
   1354c:	sub	sp, fp, #4
   13550:	ldr	fp, [sp]
   13554:	add	sp, sp, #4
   13558:	pop	{pc}		; (ldr pc, [sp], #4)
   1355c:	andeq	r1, r1, r4, lsr fp

00013560 <create_trampoline@@Base>:
   13560:	str	r4, [sp, #-12]!
   13564:	str	fp, [sp, #4]
   13568:	str	lr, [sp, #8]
   1356c:	add	fp, sp, #8
   13570:	sub	sp, sp, #28
   13574:	str	r0, [fp, #-24]	; 0xffffffe8
   13578:	str	r1, [fp, #-28]	; 0xffffffe4
   1357c:	ldr	r4, [pc, #300]	; 136b0 <create_trampoline@@Base+0x150>
   13580:	add	r4, pc, r4
   13584:	ldr	r3, [pc, #296]	; 136b4 <create_trampoline@@Base+0x154>
   13588:	ldr	r3, [r4, r3]
   1358c:	mov	r2, r3
   13590:	ldr	r3, [pc, #288]	; 136b8 <create_trampoline@@Base+0x158>
   13594:	ldr	r3, [r4, r3]
   13598:	sub	r3, r2, r3
   1359c:	str	r3, [fp, #-16]
   135a0:	ldr	r3, [fp, #-16]
   135a4:	cmp	r3, #4096	; 0x1000
   135a8:	bcc	135e0 <create_trampoline@@Base+0x80>
   135ac:	ldr	r3, [pc, #264]	; 136bc <create_trampoline@@Base+0x15c>
   135b0:	ldr	r3, [r4, r3]
   135b4:	ldr	r0, [r3]
   135b8:	ldr	r3, [pc, #256]	; 136c0 <create_trampoline@@Base+0x160>
   135bc:	add	r3, pc, r3
   135c0:	str	r3, [sp]
   135c4:	mov	r3, #45	; 0x2d
   135c8:	ldr	r2, [pc, #244]	; 136c4 <create_trampoline@@Base+0x164>
   135cc:	add	r2, pc, r2
   135d0:	ldr	r1, [pc, #240]	; 136c8 <create_trampoline@@Base+0x168>
   135d4:	add	r1, pc, r1
   135d8:	bl	11254 <fprintf@plt>
   135dc:	bl	112a8 <abort@plt>
   135e0:	mov	r3, #0
   135e4:	str	r3, [sp, #4]
   135e8:	mvn	r3, #0
   135ec:	str	r3, [sp]
   135f0:	mov	r3, #34	; 0x22
   135f4:	mov	r2, #7
   135f8:	mov	r1, #4096	; 0x1000
   135fc:	mov	r0, #0
   13600:	bl	1123c <mmap@plt>
   13604:	str	r0, [fp, #-20]	; 0xffffffec
   13608:	ldr	r3, [fp, #-20]	; 0xffffffec
   1360c:	cmn	r3, #1
   13610:	bne	13648 <create_trampoline@@Base+0xe8>
   13614:	ldr	r3, [pc, #160]	; 136bc <create_trampoline@@Base+0x15c>
   13618:	ldr	r3, [r4, r3]
   1361c:	ldr	r0, [r3]
   13620:	ldr	r3, [pc, #164]	; 136cc <create_trampoline@@Base+0x16c>
   13624:	add	r3, pc, r3
   13628:	str	r3, [sp]
   1362c:	mov	r3, #69	; 0x45
   13630:	ldr	r2, [pc, #152]	; 136d0 <create_trampoline@@Base+0x170>
   13634:	add	r2, pc, r2
   13638:	ldr	r1, [pc, #148]	; 136d4 <create_trampoline@@Base+0x174>
   1363c:	add	r1, pc, r1
   13640:	bl	11254 <fprintf@plt>
   13644:	bl	112a8 <abort@plt>
   13648:	ldr	r3, [fp, #-20]	; 0xffffffec
   1364c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13650:	str	r2, [r3]
   13654:	ldr	r3, [fp, #-20]	; 0xffffffec
   13658:	add	r3, r3, #4
   1365c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13660:	str	r2, [r3]
   13664:	ldr	r3, [fp, #-20]	; 0xffffffec
   13668:	add	r0, r3, #8
   1366c:	ldr	r2, [fp, #-16]
   13670:	ldr	r3, [pc, #64]	; 136b8 <create_trampoline@@Base+0x158>
   13674:	ldr	r3, [r4, r3]
   13678:	mov	r1, r3
   1367c:	bl	111f4 <memcpy@plt>
   13680:	mov	r2, #5
   13684:	mov	r1, #4096	; 0x1000
   13688:	ldr	r0, [fp, #-20]	; 0xffffffec
   1368c:	bl	111dc <mprotect@plt>
   13690:	ldr	r3, [fp, #-20]	; 0xffffffec
   13694:	add	r3, r3, #8
   13698:	mov	r0, r3
   1369c:	sub	sp, fp, #8
   136a0:	ldr	r4, [sp]
   136a4:	ldr	fp, [sp, #4]
   136a8:	add	sp, sp, #8
   136ac:	pop	{pc}		; (ldr pc, [sp], #4)
   136b0:	andeq	r1, r1, r8, ror sl
   136b4:	andeq	r0, r0, r4, lsl #1
   136b8:	andeq	r0, r0, ip, lsl #1
   136bc:	andeq	r0, r0, r8, lsl #1
   136c0:	andeq	r1, r0, r8, lsr #3
   136c4:	andeq	r1, r0, r0, lsr #2
   136c8:	andeq	r1, r0, r0, ror r1
   136cc:	andeq	r1, r0, ip, asr r1
   136d0:	strheq	r1, [r0], -r8
   136d4:	andeq	r1, r0, r8, lsl #2

000136d8 <destroy_trampoline@@Base>:
   136d8:	str	fp, [sp, #-8]!
   136dc:	str	lr, [sp, #4]
   136e0:	add	fp, sp, #4
   136e4:	sub	sp, sp, #8
   136e8:	str	r0, [fp, #-8]
   136ec:	ldr	r3, [fp, #-8]
   136f0:	sub	r3, r3, #8
   136f4:	mov	r1, #4096	; 0x1000
   136f8:	mov	r0, r3
   136fc:	bl	11278 <munmap@plt>
   13700:	nop	{0}
   13704:	sub	sp, fp, #4
   13708:	ldr	fp, [sp]
   1370c:	add	sp, sp, #4
   13710:	pop	{pc}		; (ldr pc, [sp], #4)

00013714 <mmk_verify_set_times@@Base>:
   13714:	str	fp, [sp, #-8]!
   13718:	str	lr, [sp, #4]
   1371c:	add	fp, sp, #4
   13720:	sub	sp, sp, #8
   13724:	str	r0, [fp, #-8]
   13728:	ldr	r3, [pc, #40]	; 13758 <mmk_verify_set_times@@Base+0x44>
   1372c:	add	r3, pc, r3
   13730:	mov	r0, r3
   13734:	bl	11290 <__tls_get_addr@plt>
   13738:	mov	r2, r0
   1373c:	ldr	r3, [fp, #-8]
   13740:	str	r3, [r2]
   13744:	nop	{0}
   13748:	sub	sp, fp, #4
   1374c:	ldr	fp, [sp]
   13750:	add	sp, sp, #4
   13754:	pop	{pc}		; (ldr pc, [sp], #4)
   13758:	andeq	r1, r1, r0, asr #18

0001375c <mmk_verify_times@@Base>:
   1375c:	str	fp, [sp, #-8]!
   13760:	str	lr, [sp, #4]
   13764:	add	fp, sp, #4
   13768:	sub	sp, sp, #16
   1376c:	str	r0, [fp, #-16]
   13770:	ldr	r3, [pc, #268]	; 13884 <mmk_verify_times@@Base+0x128>
   13774:	add	r3, pc, r3
   13778:	mov	r0, r3
   1377c:	bl	11290 <__tls_get_addr@plt>
   13780:	mov	r3, r0
   13784:	ldr	r3, [r3]
   13788:	str	r3, [fp, #-8]
   1378c:	ldr	r3, [fp, #-16]
   13790:	ldr	r3, [r3, #4]
   13794:	cmp	r3, #0
   13798:	beq	137b4 <mmk_verify_times@@Base+0x58>
   1379c:	ldr	r3, [fp, #-8]
   137a0:	cmp	r3, #0
   137a4:	moveq	r3, #1
   137a8:	movne	r3, #0
   137ac:	uxtb	r3, r3
   137b0:	b	13870 <mmk_verify_times@@Base+0x114>
   137b4:	ldr	r3, [fp, #-16]
   137b8:	ldr	r3, [r3, #8]
   137bc:	cmp	r3, #0
   137c0:	bne	137d4 <mmk_verify_times@@Base+0x78>
   137c4:	ldr	r3, [fp, #-16]
   137c8:	ldr	r3, [r3, #12]
   137cc:	cmp	r3, #0
   137d0:	beq	1382c <mmk_verify_times@@Base+0xd0>
   137d4:	ldr	r3, [fp, #-16]
   137d8:	ldr	r3, [r3, #12]
   137dc:	cmp	r3, #0
   137e0:	beq	137f0 <mmk_verify_times@@Base+0x94>
   137e4:	ldr	r3, [fp, #-16]
   137e8:	ldr	r3, [r3, #12]
   137ec:	b	137f4 <mmk_verify_times@@Base+0x98>
   137f0:	ldr	r3, [fp, #-8]
   137f4:	str	r3, [fp, #-12]
   137f8:	ldr	r3, [fp, #-16]
   137fc:	ldr	r3, [r3, #8]
   13800:	ldr	r2, [fp, #-8]
   13804:	cmp	r2, r3
   13808:	bcc	13824 <mmk_verify_times@@Base+0xc8>
   1380c:	ldr	r2, [fp, #-8]
   13810:	ldr	r3, [fp, #-12]
   13814:	cmp	r2, r3
   13818:	bhi	13824 <mmk_verify_times@@Base+0xc8>
   1381c:	mov	r3, #1
   13820:	b	13870 <mmk_verify_times@@Base+0x114>
   13824:	mov	r3, #0
   13828:	b	13870 <mmk_verify_times@@Base+0x114>
   1382c:	ldr	r3, [fp, #-16]
   13830:	ldr	r3, [r3, #20]
   13834:	cmp	r3, #0
   13838:	beq	13854 <mmk_verify_times@@Base+0xf8>
   1383c:	ldr	r3, [fp, #-16]
   13840:	ldr	r3, [r3, #20]
   13844:	ldr	r0, [fp, #-8]
   13848:	blx	r3
   1384c:	mov	r3, r0
   13850:	b	13870 <mmk_verify_times@@Base+0x114>
   13854:	ldr	r3, [fp, #-16]
   13858:	ldr	r3, [r3, #16]
   1385c:	ldr	r2, [fp, #-8]
   13860:	cmp	r2, r3
   13864:	moveq	r3, #1
   13868:	movne	r3, #0
   1386c:	uxtb	r3, r3
   13870:	mov	r0, r3
   13874:	sub	sp, fp, #4
   13878:	ldr	fp, [sp]
   1387c:	add	sp, sp, #4
   13880:	pop	{pc}		; (ldr pc, [sp], #4)
   13884:	strdeq	r1, [r1], -r8
   13888:	str	fp, [sp, #-8]!
   1388c:	str	lr, [sp, #4]
   13890:	add	fp, sp, #4
   13894:	sub	sp, sp, #32
   13898:	str	r0, [fp, #-24]	; 0xffffffe8
   1389c:	str	r1, [fp, #-28]	; 0xffffffe4
   138a0:	str	r2, [fp, #-32]	; 0xffffffe0
   138a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   138a8:	add	r3, r3, #4
   138ac:	str	r3, [fp, #-28]	; 0xffffffe4
   138b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   138b4:	sub	r3, r3, #4
   138b8:	str	r3, [fp, #-32]	; 0xffffffe0
   138bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   138c0:	bl	12348 <mmk_mock_params_begin@@Base>
   138c4:	str	r0, [fp, #-8]
   138c8:	b	13928 <mmk_verify_times@@Base+0x1cc>
   138cc:	ldr	r3, [fp, #-8]
   138d0:	add	r3, r3, #4
   138d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   138d8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   138dc:	mov	r0, r3
   138e0:	bl	13b98 <mmk_memcmp@@Base>
   138e4:	str	r0, [fp, #-12]
   138e8:	ldr	r3, [fp, #-12]
   138ec:	cmp	r3, #0
   138f0:	bne	13918 <mmk_verify_times@@Base+0x1bc>
   138f4:	ldr	r3, [fp, #-8]
   138f8:	str	r3, [fp, #-16]
   138fc:	ldr	r3, [fp, #-16]
   13900:	ldr	r3, [r3]
   13904:	add	r2, r3, #1
   13908:	ldr	r3, [fp, #-16]
   1390c:	str	r2, [r3]
   13910:	mov	r3, #1
   13914:	b	13938 <mmk_verify_times@@Base+0x1dc>
   13918:	ldr	r1, [fp, #-8]
   1391c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13920:	bl	1239c <mmk_mock_params_next@@Base>
   13924:	str	r0, [fp, #-8]
   13928:	ldr	r3, [fp, #-8]
   1392c:	cmp	r3, #0
   13930:	bne	138cc <mmk_verify_times@@Base+0x170>
   13934:	mov	r3, #0
   13938:	mov	r0, r3
   1393c:	sub	sp, fp, #4
   13940:	ldr	fp, [sp]
   13944:	add	sp, sp, #4
   13948:	pop	{pc}		; (ldr pc, [sp], #4)

0001394c <mmk_verify_register_call@@Base>:
   1394c:	str	r4, [sp, #-12]!
   13950:	str	fp, [sp, #4]
   13954:	str	lr, [sp, #8]
   13958:	add	fp, sp, #8
   1395c:	sub	sp, sp, #28
   13960:	str	r0, [fp, #-24]	; 0xffffffe8
   13964:	str	r1, [fp, #-28]	; 0xffffffe4
   13968:	ldr	r4, [pc, #520]	; 13b78 <mmk_verify_register_call@@Base+0x22c>
   1396c:	add	r4, pc, r4
   13970:	bl	134dc <mmk_ctx@@Base>
   13974:	mov	r3, r0
   13978:	mov	r0, r3
   1397c:	bl	13074 <mmk_stub_context@@Base>
   13980:	str	r0, [fp, #-16]
   13984:	ldr	r3, [fp, #-16]
   13988:	ldr	r3, [r3, #8]
   1398c:	cmp	r3, #0
   13990:	bne	139f8 <mmk_verify_register_call@@Base+0xac>
   13994:	mov	r0, #4096	; 0x1000
   13998:	bl	13fa4 <mmk_malloc@@Base>
   1399c:	mov	r2, r0
   139a0:	ldr	r3, [fp, #-16]
   139a4:	str	r2, [r3, #8]
   139a8:	ldr	r3, [fp, #-16]
   139ac:	ldr	r3, [r3, #8]
   139b0:	cmp	r3, #0
   139b4:	bne	139ec <mmk_verify_register_call@@Base+0xa0>
   139b8:	ldr	r3, [pc, #444]	; 13b7c <mmk_verify_register_call@@Base+0x230>
   139bc:	ldr	r3, [r4, r3]
   139c0:	ldr	r0, [r3]
   139c4:	ldr	r3, [pc, #436]	; 13b80 <mmk_verify_register_call@@Base+0x234>
   139c8:	add	r3, pc, r3
   139cc:	str	r3, [sp]
   139d0:	mov	r3, #79	; 0x4f
   139d4:	ldr	r2, [pc, #424]	; 13b84 <mmk_verify_register_call@@Base+0x238>
   139d8:	add	r2, pc, r2
   139dc:	ldr	r1, [pc, #420]	; 13b88 <mmk_verify_register_call@@Base+0x23c>
   139e0:	add	r1, pc, r1
   139e4:	bl	11254 <fprintf@plt>
   139e8:	bl	112a8 <abort@plt>
   139ec:	ldr	r3, [fp, #-16]
   139f0:	mov	r2, #4096	; 0x1000
   139f4:	str	r2, [r3, #16]
   139f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   139fc:	mov	r2, r3
   13a00:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13a04:	ldr	r0, [fp, #-16]
   13a08:	bl	13888 <mmk_verify_times@@Base+0x12c>
   13a0c:	mov	r3, r0
   13a10:	cmp	r3, #0
   13a14:	bne	13b60 <mmk_verify_register_call@@Base+0x214>
   13a18:	ldr	r3, [fp, #-16]
   13a1c:	ldr	r2, [r3, #12]
   13a20:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13a24:	add	r3, r2, r3
   13a28:	add	r2, r3, #4
   13a2c:	ldr	r3, [fp, #-16]
   13a30:	ldr	r3, [r3, #16]
   13a34:	cmp	r2, r3
   13a38:	bcc	13ae4 <mmk_verify_register_call@@Base+0x198>
   13a3c:	b	13a54 <mmk_verify_register_call@@Base+0x108>
   13a40:	ldr	r3, [fp, #-16]
   13a44:	ldr	r3, [r3, #16]
   13a48:	add	r2, r3, #4096	; 0x1000
   13a4c:	ldr	r3, [fp, #-16]
   13a50:	str	r2, [r3, #16]
   13a54:	ldr	r3, [fp, #-16]
   13a58:	ldr	r2, [r3, #12]
   13a5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13a60:	add	r3, r2, r3
   13a64:	add	r2, r3, #4
   13a68:	ldr	r3, [fp, #-16]
   13a6c:	ldr	r3, [r3, #16]
   13a70:	cmp	r2, r3
   13a74:	bcs	13a40 <mmk_verify_register_call@@Base+0xf4>
   13a78:	ldr	r3, [fp, #-16]
   13a7c:	ldr	r2, [r3, #8]
   13a80:	ldr	r3, [fp, #-16]
   13a84:	ldr	r3, [r3, #16]
   13a88:	mov	r1, r3
   13a8c:	mov	r0, r2
   13a90:	bl	13ff4 <mmk_realloc@@Base>
   13a94:	mov	r2, r0
   13a98:	ldr	r3, [fp, #-16]
   13a9c:	str	r2, [r3, #8]
   13aa0:	ldr	r3, [fp, #-16]
   13aa4:	ldr	r3, [r3, #8]
   13aa8:	cmp	r3, #0
   13aac:	bne	13ae4 <mmk_verify_register_call@@Base+0x198>
   13ab0:	ldr	r3, [pc, #196]	; 13b7c <mmk_verify_register_call@@Base+0x230>
   13ab4:	ldr	r3, [r4, r3]
   13ab8:	ldr	r0, [r3]
   13abc:	ldr	r3, [pc, #200]	; 13b8c <mmk_verify_register_call@@Base+0x240>
   13ac0:	add	r3, pc, r3
   13ac4:	str	r3, [sp]
   13ac8:	mov	r3, #91	; 0x5b
   13acc:	ldr	r2, [pc, #188]	; 13b90 <mmk_verify_register_call@@Base+0x244>
   13ad0:	add	r2, pc, r2
   13ad4:	ldr	r1, [pc, #184]	; 13b94 <mmk_verify_register_call@@Base+0x248>
   13ad8:	add	r1, pc, r1
   13adc:	bl	11254 <fprintf@plt>
   13ae0:	bl	112a8 <abort@plt>
   13ae4:	ldr	r3, [fp, #-16]
   13ae8:	ldr	r2, [r3, #8]
   13aec:	ldr	r3, [fp, #-16]
   13af0:	ldr	r3, [r3, #12]
   13af4:	add	r3, r2, r3
   13af8:	sub	r1, fp, #28
   13afc:	mov	r2, #4
   13b00:	mov	r0, r3
   13b04:	bl	13c48 <mmk_memcpy@@Base>
   13b08:	ldr	r3, [fp, #-16]
   13b0c:	ldr	r2, [r3, #8]
   13b10:	ldr	r3, [fp, #-16]
   13b14:	ldr	r3, [r3, #12]
   13b18:	add	r3, r3, #4
   13b1c:	add	r3, r2, r3
   13b20:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13b24:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13b28:	mov	r0, r3
   13b2c:	bl	13c48 <mmk_memcpy@@Base>
   13b30:	str	r0, [fp, #-20]	; 0xffffffec
   13b34:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b38:	mov	r2, #1
   13b3c:	str	r2, [r3]
   13b40:	ldr	r3, [fp, #-16]
   13b44:	ldr	r2, [r3, #12]
   13b48:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13b4c:	add	r3, r2, r3
   13b50:	add	r2, r3, #4
   13b54:	ldr	r3, [fp, #-16]
   13b58:	str	r2, [r3, #12]
   13b5c:	b	13b64 <mmk_verify_register_call@@Base+0x218>
   13b60:	nop	{0}
   13b64:	sub	sp, fp, #8
   13b68:	ldr	r4, [sp]
   13b6c:	ldr	fp, [sp, #4]
   13b70:	add	sp, sp, #8
   13b74:	pop	{pc}		; (ldr pc, [sp], #4)
   13b78:	andeq	r1, r1, ip, lsl #13
   13b7c:	andeq	r0, r0, r8, lsl #1
   13b80:	andeq	r0, r0, r0, asr #28
   13b84:			; <UNDEFINED> instruction: 0x00000dbc
   13b88:	andeq	r0, r0, r8, lsl #28
   13b8c:	andeq	r0, r0, r8, asr #26
   13b90:	andeq	r0, r0, r4, asr #25
   13b94:	andeq	r0, r0, r0, lsl sp

00013b98 <mmk_memcmp@@Base>:
   13b98:	push	{fp}		; (str fp, [sp, #-4]!)
   13b9c:	add	fp, sp, #0
   13ba0:	sub	sp, sp, #28
   13ba4:	str	r0, [fp, #-16]
   13ba8:	str	r1, [fp, #-20]	; 0xffffffec
   13bac:	str	r2, [fp, #-24]	; 0xffffffe8
   13bb0:	ldr	r3, [fp, #-16]
   13bb4:	str	r3, [fp, #-8]
   13bb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bbc:	str	r3, [fp, #-12]
   13bc0:	b	13c28 <mmk_memcmp@@Base+0x90>
   13bc4:	ldr	r3, [fp, #-8]
   13bc8:	ldrb	r2, [r3]
   13bcc:	ldr	r3, [fp, #-12]
   13bd0:	ldrb	r3, [r3]
   13bd4:	cmp	r2, r3
   13bd8:	beq	13c04 <mmk_memcmp@@Base+0x6c>
   13bdc:	ldr	r3, [fp, #-8]
   13be0:	ldrb	r2, [r3]
   13be4:	ldr	r3, [fp, #-12]
   13be8:	ldrb	r3, [r3]
   13bec:	cmp	r2, r3
   13bf0:	bcs	13bfc <mmk_memcmp@@Base+0x64>
   13bf4:	mvn	r3, #0
   13bf8:	b	13c38 <mmk_memcmp@@Base+0xa0>
   13bfc:	mov	r3, #1
   13c00:	b	13c38 <mmk_memcmp@@Base+0xa0>
   13c04:	ldr	r3, [fp, #-8]
   13c08:	add	r3, r3, #1
   13c0c:	str	r3, [fp, #-8]
   13c10:	ldr	r3, [fp, #-12]
   13c14:	add	r3, r3, #1
   13c18:	str	r3, [fp, #-12]
   13c1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c20:	sub	r3, r3, #1
   13c24:	str	r3, [fp, #-24]	; 0xffffffe8
   13c28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c2c:	cmp	r3, #0
   13c30:	bne	13bc4 <mmk_memcmp@@Base+0x2c>
   13c34:	mov	r3, #0
   13c38:	mov	r0, r3
   13c3c:	add	sp, fp, #0
   13c40:	pop	{fp}		; (ldr fp, [sp], #4)
   13c44:	bx	lr

00013c48 <mmk_memcpy@@Base>:
   13c48:	push	{fp}		; (str fp, [sp, #-4]!)
   13c4c:	add	fp, sp, #0
   13c50:	sub	sp, sp, #28
   13c54:	str	r0, [fp, #-16]
   13c58:	str	r1, [fp, #-20]	; 0xffffffec
   13c5c:	str	r2, [fp, #-24]	; 0xffffffe8
   13c60:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c64:	str	r3, [fp, #-8]
   13c68:	ldr	r3, [fp, #-16]
   13c6c:	str	r3, [fp, #-12]
   13c70:	b	13ca8 <mmk_memcpy@@Base+0x60>
   13c74:	ldr	r3, [fp, #-8]
   13c78:	ldrb	r2, [r3]
   13c7c:	ldr	r3, [fp, #-12]
   13c80:	strb	r2, [r3]
   13c84:	ldr	r3, [fp, #-12]
   13c88:	add	r3, r3, #1
   13c8c:	str	r3, [fp, #-12]
   13c90:	ldr	r3, [fp, #-8]
   13c94:	add	r3, r3, #1
   13c98:	str	r3, [fp, #-8]
   13c9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ca0:	sub	r3, r3, #1
   13ca4:	str	r3, [fp, #-24]	; 0xffffffe8
   13ca8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13cac:	cmp	r3, #0
   13cb0:	bne	13c74 <mmk_memcpy@@Base+0x2c>
   13cb4:	ldr	r3, [fp, #-16]
   13cb8:	mov	r0, r3
   13cbc:	add	sp, fp, #0
   13cc0:	pop	{fp}		; (ldr fp, [sp], #4)
   13cc4:	bx	lr

00013cc8 <mmk_strneq@@Base>:
   13cc8:	push	{fp}		; (str fp, [sp, #-4]!)
   13ccc:	add	fp, sp, #0
   13cd0:	sub	sp, sp, #20
   13cd4:	str	r0, [fp, #-8]
   13cd8:	str	r1, [fp, #-12]
   13cdc:	str	r2, [fp, #-16]
   13ce0:	b	13d28 <mmk_strneq@@Base+0x60>
   13ce4:	ldr	r3, [fp, #-8]
   13ce8:	ldrb	r2, [r3]
   13cec:	ldr	r3, [fp, #-12]
   13cf0:	ldrb	r3, [r3]
   13cf4:	cmp	r2, r3
   13cf8:	beq	13d04 <mmk_strneq@@Base+0x3c>
   13cfc:	mov	r3, #0
   13d00:	b	13d7c <mmk_strneq@@Base+0xb4>
   13d04:	ldr	r3, [fp, #-8]
   13d08:	add	r3, r3, #1
   13d0c:	str	r3, [fp, #-8]
   13d10:	ldr	r3, [fp, #-12]
   13d14:	add	r3, r3, #1
   13d18:	str	r3, [fp, #-12]
   13d1c:	ldr	r3, [fp, #-16]
   13d20:	sub	r3, r3, #1
   13d24:	str	r3, [fp, #-16]
   13d28:	ldr	r3, [fp, #-8]
   13d2c:	ldrb	r3, [r3]
   13d30:	cmp	r3, #0
   13d34:	beq	13d54 <mmk_strneq@@Base+0x8c>
   13d38:	ldr	r3, [fp, #-12]
   13d3c:	ldrb	r3, [r3]
   13d40:	cmp	r3, #0
   13d44:	beq	13d54 <mmk_strneq@@Base+0x8c>
   13d48:	ldr	r3, [fp, #-16]
   13d4c:	cmp	r3, #0
   13d50:	bne	13ce4 <mmk_strneq@@Base+0x1c>
   13d54:	ldr	r3, [fp, #-16]
   13d58:	cmp	r3, #0
   13d5c:	beq	13d70 <mmk_strneq@@Base+0xa8>
   13d60:	ldr	r3, [fp, #-12]
   13d64:	ldrb	r3, [r3]
   13d68:	cmp	r3, #0
   13d6c:	bne	13d78 <mmk_strneq@@Base+0xb0>
   13d70:	mov	r3, #1
   13d74:	b	13d7c <mmk_strneq@@Base+0xb4>
   13d78:	mov	r3, #0
   13d7c:	mov	r0, r3
   13d80:	add	sp, fp, #0
   13d84:	pop	{fp}		; (ldr fp, [sp], #4)
   13d88:	bx	lr

00013d8c <mmk_strchr@@Base>:
   13d8c:	push	{fp}		; (str fp, [sp, #-4]!)
   13d90:	add	fp, sp, #0
   13d94:	sub	sp, sp, #12
   13d98:	str	r0, [fp, #-8]
   13d9c:	str	r1, [fp, #-12]
   13da0:	b	13dd0 <mmk_strchr@@Base+0x44>
   13da4:	ldr	r3, [fp, #-8]
   13da8:	ldrb	r3, [r3]
   13dac:	mov	r2, r3
   13db0:	ldr	r3, [fp, #-12]
   13db4:	cmp	r3, r2
   13db8:	bne	13dc4 <mmk_strchr@@Base+0x38>
   13dbc:	ldr	r3, [fp, #-8]
   13dc0:	b	13de4 <mmk_strchr@@Base+0x58>
   13dc4:	ldr	r3, [fp, #-8]
   13dc8:	add	r3, r3, #1
   13dcc:	str	r3, [fp, #-8]
   13dd0:	ldr	r3, [fp, #-8]
   13dd4:	ldrb	r3, [r3]
   13dd8:	cmp	r3, #0
   13ddc:	bne	13da4 <mmk_strchr@@Base+0x18>
   13de0:	mov	r3, #0
   13de4:	mov	r0, r3
   13de8:	add	sp, fp, #0
   13dec:	pop	{fp}		; (ldr fp, [sp], #4)
   13df0:	bx	lr

00013df4 <mmk_strcpy@@Base>:
   13df4:	push	{fp}		; (str fp, [sp, #-4]!)
   13df8:	add	fp, sp, #0
   13dfc:	sub	sp, sp, #12
   13e00:	str	r0, [fp, #-8]
   13e04:	str	r1, [fp, #-12]
   13e08:	b	13e34 <mmk_strcpy@@Base+0x40>
   13e0c:	ldr	r3, [fp, #-12]
   13e10:	ldrb	r2, [r3]
   13e14:	ldr	r3, [fp, #-8]
   13e18:	strb	r2, [r3]
   13e1c:	ldr	r3, [fp, #-8]
   13e20:	add	r3, r3, #1
   13e24:	str	r3, [fp, #-8]
   13e28:	ldr	r3, [fp, #-12]
   13e2c:	add	r3, r3, #1
   13e30:	str	r3, [fp, #-12]
   13e34:	ldr	r3, [fp, #-12]
   13e38:	ldrb	r3, [r3]
   13e3c:	cmp	r3, #0
   13e40:	bne	13e0c <mmk_strcpy@@Base+0x18>
   13e44:	ldr	r3, [fp, #-8]
   13e48:	mov	r2, #0
   13e4c:	strb	r2, [r3]
   13e50:	ldr	r3, [fp, #-8]
   13e54:	mov	r0, r3
   13e58:	add	sp, fp, #0
   13e5c:	pop	{fp}		; (ldr fp, [sp], #4)
   13e60:	bx	lr

00013e64 <mmk_strncpy@@Base>:
   13e64:	push	{fp}		; (str fp, [sp, #-4]!)
   13e68:	add	fp, sp, #0
   13e6c:	sub	sp, sp, #20
   13e70:	str	r0, [fp, #-8]
   13e74:	str	r1, [fp, #-12]
   13e78:	str	r2, [fp, #-16]
   13e7c:	b	13eb4 <mmk_strncpy@@Base+0x50>
   13e80:	ldr	r3, [fp, #-12]
   13e84:	ldrb	r2, [r3]
   13e88:	ldr	r3, [fp, #-8]
   13e8c:	strb	r2, [r3]
   13e90:	ldr	r3, [fp, #-8]
   13e94:	add	r3, r3, #1
   13e98:	str	r3, [fp, #-8]
   13e9c:	ldr	r3, [fp, #-12]
   13ea0:	add	r3, r3, #1
   13ea4:	str	r3, [fp, #-12]
   13ea8:	ldr	r3, [fp, #-16]
   13eac:	sub	r3, r3, #1
   13eb0:	str	r3, [fp, #-16]
   13eb4:	ldr	r3, [fp, #-12]
   13eb8:	ldrb	r3, [r3]
   13ebc:	cmp	r3, #0
   13ec0:	beq	13ed0 <mmk_strncpy@@Base+0x6c>
   13ec4:	ldr	r3, [fp, #-16]
   13ec8:	cmp	r3, #0
   13ecc:	bne	13e80 <mmk_strncpy@@Base+0x1c>
   13ed0:	ldr	r3, [fp, #-8]
   13ed4:	mov	r2, #0
   13ed8:	strb	r2, [r3]
   13edc:	ldr	r3, [fp, #-8]
   13ee0:	mov	r0, r3
   13ee4:	add	sp, fp, #0
   13ee8:	pop	{fp}		; (ldr fp, [sp], #4)
   13eec:	bx	lr

00013ef0 <mmk_strlen@@Base>:
   13ef0:	push	{fp}		; (str fp, [sp, #-4]!)
   13ef4:	add	fp, sp, #0
   13ef8:	sub	sp, sp, #20
   13efc:	str	r0, [fp, #-16]
   13f00:	mov	r3, #0
   13f04:	str	r3, [fp, #-8]
   13f08:	b	13f24 <mmk_strlen@@Base+0x34>
   13f0c:	ldr	r3, [fp, #-8]
   13f10:	add	r3, r3, #1
   13f14:	str	r3, [fp, #-8]
   13f18:	ldr	r3, [fp, #-16]
   13f1c:	add	r3, r3, #1
   13f20:	str	r3, [fp, #-16]
   13f24:	ldr	r3, [fp, #-16]
   13f28:	ldrb	r3, [r3]
   13f2c:	cmp	r3, #0
   13f30:	bne	13f0c <mmk_strlen@@Base+0x1c>
   13f34:	ldr	r3, [fp, #-8]
   13f38:	mov	r0, r3
   13f3c:	add	sp, fp, #0
   13f40:	pop	{fp}		; (ldr fp, [sp], #4)
   13f44:	bx	lr

00013f48 <mmk_isspace@@Base>:
   13f48:	push	{fp}		; (str fp, [sp, #-4]!)
   13f4c:	add	fp, sp, #0
   13f50:	sub	sp, sp, #12
   13f54:	str	r0, [fp, #-8]
   13f58:	ldr	r3, [fp, #-8]
   13f5c:	cmp	r3, #32
   13f60:	beq	13f88 <mmk_isspace@@Base+0x40>
   13f64:	ldr	r3, [fp, #-8]
   13f68:	cmp	r3, #9
   13f6c:	beq	13f88 <mmk_isspace@@Base+0x40>
   13f70:	ldr	r3, [fp, #-8]
   13f74:	cmp	r3, #13
   13f78:	beq	13f88 <mmk_isspace@@Base+0x40>
   13f7c:	ldr	r3, [fp, #-8]
   13f80:	cmp	r3, #10
   13f84:	bne	13f90 <mmk_isspace@@Base+0x48>
   13f88:	mov	r3, #1
   13f8c:	b	13f94 <mmk_isspace@@Base+0x4c>
   13f90:	mov	r3, #0
   13f94:	mov	r0, r3
   13f98:	add	sp, fp, #0
   13f9c:	pop	{fp}		; (ldr fp, [sp], #4)
   13fa0:	bx	lr

00013fa4 <mmk_malloc@@Base>:
   13fa4:	str	fp, [sp, #-8]!
   13fa8:	str	lr, [sp, #4]
   13fac:	add	fp, sp, #4
   13fb0:	sub	sp, sp, #8
   13fb4:	str	r0, [fp, #-8]
   13fb8:	ldr	r2, [pc, #44]	; 13fec <mmk_malloc@@Base+0x48>
   13fbc:	add	r2, pc, r2
   13fc0:	ldr	r3, [pc, #40]	; 13ff0 <mmk_malloc@@Base+0x4c>
   13fc4:	ldr	r3, [r2, r3]
   13fc8:	ldr	r3, [r3]
   13fcc:	ldr	r0, [fp, #-8]
   13fd0:	blx	r3
   13fd4:	mov	r3, r0
   13fd8:	mov	r0, r3
   13fdc:	sub	sp, fp, #4
   13fe0:	ldr	fp, [sp]
   13fe4:	add	sp, sp, #4
   13fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   13fec:	andeq	r1, r1, ip, lsr r0
   13ff0:	andeq	r0, r0, r8, lsr #1

00013ff4 <mmk_realloc@@Base>:
   13ff4:	str	fp, [sp, #-8]!
   13ff8:	str	lr, [sp, #4]
   13ffc:	add	fp, sp, #4
   14000:	sub	sp, sp, #8
   14004:	str	r0, [fp, #-8]
   14008:	str	r1, [fp, #-12]
   1400c:	ldr	r2, [pc, #48]	; 14044 <mmk_realloc@@Base+0x50>
   14010:	add	r2, pc, r2
   14014:	ldr	r3, [pc, #44]	; 14048 <mmk_realloc@@Base+0x54>
   14018:	ldr	r3, [r2, r3]
   1401c:	ldr	r3, [r3]
   14020:	ldr	r1, [fp, #-12]
   14024:	ldr	r0, [fp, #-8]
   14028:	blx	r3
   1402c:	mov	r3, r0
   14030:	mov	r0, r3
   14034:	sub	sp, fp, #4
   14038:	ldr	fp, [sp]
   1403c:	add	sp, sp, #4
   14040:	pop	{pc}		; (ldr pc, [sp], #4)
   14044:	andeq	r0, r1, r8, ror #31
   14048:	muleq	r0, r4, r0

0001404c <mmk_free@@Base>:
   1404c:	str	fp, [sp, #-8]!
   14050:	str	lr, [sp, #4]
   14054:	add	fp, sp, #4
   14058:	sub	sp, sp, #8
   1405c:	str	r0, [fp, #-8]
   14060:	ldr	r2, [pc, #40]	; 14090 <mmk_free@@Base+0x44>
   14064:	add	r2, pc, r2
   14068:	ldr	r3, [pc, #36]	; 14094 <mmk_free@@Base+0x48>
   1406c:	ldr	r3, [r2, r3]
   14070:	ldr	r3, [r3]
   14074:	ldr	r0, [fp, #-8]
   14078:	blx	r3
   1407c:	nop	{0}
   14080:	sub	sp, fp, #4
   14084:	ldr	fp, [sp]
   14088:	add	sp, sp, #4
   1408c:	pop	{pc}		; (ldr pc, [sp], #4)
   14090:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14094:	andeq	r0, r0, r4, lsr #1

00014098 <mmk_init_vital_functions@@Base>:
   14098:	str	r4, [sp, #-12]!
   1409c:	str	fp, [sp, #4]
   140a0:	str	lr, [sp, #8]
   140a4:	add	fp, sp, #8
   140a8:	sub	sp, sp, #20
   140ac:	str	r0, [fp, #-16]
   140b0:	ldr	r4, [pc, #384]	; 14238 <mmk_init_vital_functions@@Base+0x1a0>
   140b4:	add	r4, pc, r4
   140b8:	mov	r0, #0
   140bc:	bl	1120c <malloc@plt>
   140c0:	mov	r3, r0
   140c4:	mov	r1, #0
   140c8:	mov	r0, r3
   140cc:	bl	11200 <realloc@plt>
   140d0:	mov	r3, r0
   140d4:	mov	r0, r3
   140d8:	bl	111e8 <free@plt>
   140dc:	ldr	r3, [pc, #344]	; 1423c <mmk_init_vital_functions@@Base+0x1a4>
   140e0:	add	r3, pc, r3
   140e4:	mov	r1, r3
   140e8:	ldr	r0, [fp, #-16]
   140ec:	bl	12ff4 <plt_get_real_fn@@Base>
   140f0:	mov	r2, r0
   140f4:	ldr	r3, [pc, #324]	; 14240 <mmk_init_vital_functions@@Base+0x1a8>
   140f8:	ldr	r3, [r4, r3]
   140fc:	str	r2, [r3]
   14100:	ldr	r3, [pc, #312]	; 14240 <mmk_init_vital_functions@@Base+0x1a8>
   14104:	ldr	r3, [r4, r3]
   14108:	ldr	r3, [r3]
   1410c:	cmp	r3, #0
   14110:	bne	14148 <mmk_init_vital_functions@@Base+0xb0>
   14114:	ldr	r3, [pc, #296]	; 14244 <mmk_init_vital_functions@@Base+0x1ac>
   14118:	ldr	r3, [r4, r3]
   1411c:	ldr	r0, [r3]
   14120:	ldr	r3, [pc, #288]	; 14248 <mmk_init_vital_functions@@Base+0x1b0>
   14124:	add	r3, pc, r3
   14128:	str	r3, [sp]
   1412c:	mov	r3, #88	; 0x58
   14130:	ldr	r2, [pc, #276]	; 1424c <mmk_init_vital_functions@@Base+0x1b4>
   14134:	add	r2, pc, r2
   14138:	ldr	r1, [pc, #272]	; 14250 <mmk_init_vital_functions@@Base+0x1b8>
   1413c:	add	r1, pc, r1
   14140:	bl	11254 <fprintf@plt>
   14144:	bl	112a8 <abort@plt>
   14148:	ldr	r3, [pc, #260]	; 14254 <mmk_init_vital_functions@@Base+0x1bc>
   1414c:	add	r3, pc, r3
   14150:	mov	r1, r3
   14154:	ldr	r0, [fp, #-16]
   14158:	bl	12ff4 <plt_get_real_fn@@Base>
   1415c:	mov	r2, r0
   14160:	ldr	r3, [pc, #240]	; 14258 <mmk_init_vital_functions@@Base+0x1c0>
   14164:	ldr	r3, [r4, r3]
   14168:	str	r2, [r3]
   1416c:	ldr	r3, [pc, #228]	; 14258 <mmk_init_vital_functions@@Base+0x1c0>
   14170:	ldr	r3, [r4, r3]
   14174:	ldr	r3, [r3]
   14178:	cmp	r3, #0
   1417c:	bne	141b4 <mmk_init_vital_functions@@Base+0x11c>
   14180:	ldr	r3, [pc, #188]	; 14244 <mmk_init_vital_functions@@Base+0x1ac>
   14184:	ldr	r3, [r4, r3]
   14188:	ldr	r0, [r3]
   1418c:	ldr	r3, [pc, #200]	; 1425c <mmk_init_vital_functions@@Base+0x1c4>
   14190:	add	r3, pc, r3
   14194:	str	r3, [sp]
   14198:	mov	r3, #89	; 0x59
   1419c:	ldr	r2, [pc, #188]	; 14260 <mmk_init_vital_functions@@Base+0x1c8>
   141a0:	add	r2, pc, r2
   141a4:	ldr	r1, [pc, #184]	; 14264 <mmk_init_vital_functions@@Base+0x1cc>
   141a8:	add	r1, pc, r1
   141ac:	bl	11254 <fprintf@plt>
   141b0:	bl	112a8 <abort@plt>
   141b4:	ldr	r3, [pc, #172]	; 14268 <mmk_init_vital_functions@@Base+0x1d0>
   141b8:	add	r3, pc, r3
   141bc:	mov	r1, r3
   141c0:	ldr	r0, [fp, #-16]
   141c4:	bl	12ff4 <plt_get_real_fn@@Base>
   141c8:	mov	r2, r0
   141cc:	ldr	r3, [pc, #152]	; 1426c <mmk_init_vital_functions@@Base+0x1d4>
   141d0:	ldr	r3, [r4, r3]
   141d4:	str	r2, [r3]
   141d8:	ldr	r3, [pc, #140]	; 1426c <mmk_init_vital_functions@@Base+0x1d4>
   141dc:	ldr	r3, [r4, r3]
   141e0:	ldr	r3, [r3]
   141e4:	cmp	r3, #0
   141e8:	bne	14220 <mmk_init_vital_functions@@Base+0x188>
   141ec:	ldr	r3, [pc, #80]	; 14244 <mmk_init_vital_functions@@Base+0x1ac>
   141f0:	ldr	r3, [r4, r3]
   141f4:	ldr	r0, [r3]
   141f8:	ldr	r3, [pc, #112]	; 14270 <mmk_init_vital_functions@@Base+0x1d8>
   141fc:	add	r3, pc, r3
   14200:	str	r3, [sp]
   14204:	mov	r3, #90	; 0x5a
   14208:	ldr	r2, [pc, #100]	; 14274 <mmk_init_vital_functions@@Base+0x1dc>
   1420c:	add	r2, pc, r2
   14210:	ldr	r1, [pc, #96]	; 14278 <mmk_init_vital_functions@@Base+0x1e0>
   14214:	add	r1, pc, r1
   14218:	bl	11254 <fprintf@plt>
   1421c:	bl	112a8 <abort@plt>
   14220:	nop	{0}
   14224:	sub	sp, fp, #8
   14228:	ldr	r4, [sp]
   1422c:	ldr	fp, [sp, #4]
   14230:	add	sp, sp, #8
   14234:	pop	{pc}		; (ldr pc, [sp], #4)
   14238:	andeq	r0, r1, r4, asr #30
   1423c:	andeq	r0, r0, r8, lsr r7
   14240:	andeq	r0, r0, r8, lsr #1
   14244:	andeq	r0, r0, r8, lsl #1
   14248:	andeq	r0, r0, r0, ror r7
   1424c:	andeq	r0, r0, ip, ror #13
   14250:	andeq	r0, r0, r8, lsr r7
   14254:	andeq	r0, r0, r0, lsl #15
   14258:	muleq	r0, r4, r0
   1425c:	andeq	r0, r0, r4, asr #14
   14260:	andeq	r0, r0, r0, lsl #13
   14264:	andeq	r0, r0, ip, asr #13
   14268:	andeq	r0, r0, r4, asr r7
   1426c:	andeq	r0, r0, r4, lsr #1
   14270:	andeq	r0, r0, r8, lsl r7
   14274:	andeq	r0, r0, r4, lsl r6
   14278:	andeq	r0, r0, r0, ror #12

0001427c <mmk_when_init@@Base>:
   1427c:	str	fp, [sp, #-8]!
   14280:	str	lr, [sp, #4]
   14284:	add	fp, sp, #4
   14288:	sub	sp, sp, #8
   1428c:	str	r0, [fp, #-8]
   14290:	ldr	r3, [pc, #40]	; 142c0 <mmk_when_init@@Base+0x44>
   14294:	add	r3, pc, r3
   14298:	mov	r0, r3
   1429c:	bl	11290 <__tls_get_addr@plt>
   142a0:	mov	r2, r0
   142a4:	ldr	r3, [fp, #-8]
   142a8:	str	r3, [r2]
   142ac:	nop	{0}
   142b0:	sub	sp, fp, #4
   142b4:	ldr	fp, [sp]
   142b8:	add	sp, sp, #4
   142bc:	pop	{pc}		; (ldr pc, [sp], #4)
   142c0:	andeq	r0, r1, r0, ror #27

000142c4 <mmk_when_get_result@@Base>:
   142c4:	str	fp, [sp, #-8]!
   142c8:	str	lr, [sp, #4]
   142cc:	add	fp, sp, #4
   142d0:	ldr	r3, [pc, #36]	; 142fc <mmk_when_get_result@@Base+0x38>
   142d4:	add	r3, pc, r3
   142d8:	mov	r0, r3
   142dc:	bl	11290 <__tls_get_addr@plt>
   142e0:	mov	r3, r0
   142e4:	ldr	r3, [r3]
   142e8:	mov	r0, r3
   142ec:	sub	sp, fp, #4
   142f0:	ldr	fp, [sp]
   142f4:	add	sp, sp, #4
   142f8:	pop	{pc}		; (ldr pc, [sp], #4)
   142fc:	andeq	r0, r1, r0, lsr #27

00014300 <mmk_when_impl@@Base>:
   14300:	str	fp, [sp, #-8]!
   14304:	str	lr, [sp, #4]
   14308:	add	fp, sp, #4
   1430c:	sub	sp, sp, #16
   14310:	str	r0, [fp, #-16]
   14314:	str	r1, [fp, #-20]	; 0xffffffec
   14318:	ldr	r3, [fp, #-20]	; 0xffffffec
   1431c:	str	r3, [fp, #-8]
   14320:	bl	11ee4 <mmk_matcher_ctx@@Base>
   14324:	mov	r2, r0
   14328:	ldr	r3, [fp, #-8]
   1432c:	str	r2, [r3]
   14330:	ldr	r3, [fp, #-16]
   14334:	ldr	r2, [r3]
   14338:	ldr	r3, [fp, #-8]
   1433c:	str	r2, [r3, #4]
   14340:	ldr	r3, [fp, #-16]
   14344:	ldr	r2, [fp, #-8]
   14348:	str	r2, [r3]
   1434c:	nop	{0}
   14350:	sub	sp, fp, #4
   14354:	ldr	fp, [sp]
   14358:	add	sp, sp, #4
   1435c:	pop	{pc}		; (ldr pc, [sp], #4)

00014360 <mmk_trampoline@@Base>:
   14360:	sub	ip, pc, #8
   14364:	push	{r0, r1, r2, r3}
   14368:	push	{ip, lr}
   1436c:	ldr	r0, [ip, #-8]
   14370:	ldr	ip, [r0, #4]
   14374:	blx	ip
   14378:	pop	{ip, lr}
   1437c:	push	{ip, lr}
   14380:	ldr	ip, [ip, #-8]
   14384:	ldr	ip, [ip]
   14388:	blx	ip
   1438c:	cmp	r0, #0
   14390:	bne	143a0 <mmk_trampoline@@Base+0x40>
   14394:	pop	{ip, lr}
   14398:	pop	{r0, r1, r2, r3}
   1439c:	ldr	pc, [ip, #-4]
   143a0:	pop	{ip, lr}
   143a4:	pop	{r0, r1, r2, r3}
   143a8:	push	{ip, lr}
   143ac:	ldr	ip, [ip, #-8]
   143b0:	ldr	ip, [ip, #8]
   143b4:	blx	ip
   143b8:	pop	{ip, pc}

000143bc <mmk_trampoline_end@@Base>:
   143bc:	nop			; (mov r0, r0)

000143c0 <__libc_csu_init@@Base>:
   143c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   143c4:	mov	r7, r0
   143c8:	ldr	r6, [pc, #72]	; 14418 <__libc_csu_init@@Base+0x58>
   143cc:	ldr	r5, [pc, #72]	; 1441c <__libc_csu_init@@Base+0x5c>
   143d0:	add	r6, pc, r6
   143d4:	add	r5, pc, r5
   143d8:	sub	r6, r6, r5
   143dc:	mov	r8, r1
   143e0:	mov	r9, r2
   143e4:	bl	111a4 <strstr@plt-0x20>
   143e8:	asrs	r6, r6, #2
   143ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   143f0:	mov	r4, #0
   143f4:	add	r4, r4, #1
   143f8:	ldr	r3, [r5], #4
   143fc:	mov	r2, r9
   14400:	mov	r1, r8
   14404:	mov	r0, r7
   14408:	blx	r3
   1440c:	cmp	r6, r4
   14410:	bne	143f4 <__libc_csu_init@@Base+0x34>
   14414:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14418:	andeq	r0, r1, r4, lsr #22
   1441c:	andeq	r0, r1, ip, lsl fp

00014420 <__libc_csu_fini@@Base>:
   14420:	bx	lr

Disassembly of section .fini:

00014424 <.fini>:
   14424:	push	{r3, lr}
   14428:	pop	{r3, pc}
