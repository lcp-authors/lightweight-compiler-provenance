
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uql:     file format elf32-littlearm


Disassembly of section .init:

000144f4 <.init>:
   144f4:	push	{r3, lr}
   144f8:	bl	1585c <_start@@Base+0x3c>
   144fc:	pop	{r3, pc}

Disassembly of section .plt:

00014500 <raise@plt-0x14>:
   14500:	push	{lr}		; (str lr, [sp, #-4]!)
   14504:	ldr	lr, [pc, #4]	; 14510 <raise@plt-0x4>
   14508:	add	lr, pc, lr
   1450c:	ldr	pc, [lr, #8]!
   14510:	strdeq	r0, [r4], -r0	; <UNPREDICTABLE>

00014514 <raise@plt>:
   14514:	add	ip, pc, #0, 12
   14518:	add	ip, ip, #64, 20	; 0x40000
   1451c:	ldr	pc, [ip, #2800]!	; 0xaf0

00014520 <strcmp@plt>:
   14520:	add	ip, pc, #0, 12
   14524:	add	ip, ip, #64, 20	; 0x40000
   14528:	ldr	pc, [ip, #2792]!	; 0xae8

0001452c <memmove@plt>:
   1452c:	add	ip, pc, #0, 12
   14530:	add	ip, ip, #64, 20	; 0x40000
   14534:	ldr	pc, [ip, #2784]!	; 0xae0

00014538 <free@plt>:
   14538:	add	ip, pc, #0, 12
   1453c:	add	ip, ip, #64, 20	; 0x40000
   14540:	ldr	pc, [ip, #2776]!	; 0xad8

00014544 <memcpy@plt>:
   14544:	add	ip, pc, #0, 12
   14548:	add	ip, ip, #64, 20	; 0x40000
   1454c:	ldr	pc, [ip, #2768]!	; 0xad0

00014550 <memcmp@plt>:
   14550:	add	ip, pc, #0, 12
   14554:	add	ip, ip, #64, 20	; 0x40000
   14558:	ldr	pc, [ip, #2760]!	; 0xac8

0001455c <realloc@plt>:
   1455c:	add	ip, pc, #0, 12
   14560:	add	ip, ip, #64, 20	; 0x40000
   14564:	ldr	pc, [ip, #2752]!	; 0xac0

00014568 <fwrite@plt>:
   14568:	add	ip, pc, #0, 12
   1456c:	add	ip, ip, #64, 20	; 0x40000
   14570:	ldr	pc, [ip, #2744]!	; 0xab8

00014574 <malloc@plt>:
   14574:	add	ip, pc, #0, 12
   14578:	add	ip, ip, #64, 20	; 0x40000
   1457c:	ldr	pc, [ip, #2736]!	; 0xab0

00014580 <__libc_start_main@plt>:
   14580:	add	ip, pc, #0, 12
   14584:	add	ip, ip, #64, 20	; 0x40000
   14588:	ldr	pc, [ip, #2728]!	; 0xaa8

0001458c <__gmon_start__@plt>:
   1458c:	add	ip, pc, #0, 12
   14590:	add	ip, ip, #64, 20	; 0x40000
   14594:	ldr	pc, [ip, #2720]!	; 0xaa0

00014598 <strlen@plt>:
   14598:	add	ip, pc, #0, 12
   1459c:	add	ip, ip, #64, 20	; 0x40000
   145a0:	ldr	pc, [ip, #2712]!	; 0xa98

000145a4 <fprintf@plt>:
   145a4:	add	ip, pc, #0, 12
   145a8:	add	ip, ip, #64, 20	; 0x40000
   145ac:	ldr	pc, [ip, #2704]!	; 0xa90

000145b0 <posix_memalign@plt>:
   145b0:	add	ip, pc, #0, 12
   145b4:	add	ip, ip, #64, 20	; 0x40000
   145b8:	ldr	pc, [ip, #2696]!	; 0xa88

000145bc <memset@plt>:
   145bc:	add	ip, pc, #0, 12
   145c0:	add	ip, ip, #64, 20	; 0x40000
   145c4:	ldr	pc, [ip, #2688]!	; 0xa80

000145c8 <strncpy@plt>:
   145c8:	add	ip, pc, #0, 12
   145cc:	add	ip, ip, #64, 20	; 0x40000
   145d0:	ldr	pc, [ip, #2680]!	; 0xa78

000145d4 <strtod@plt>:
   145d4:	add	ip, pc, #0, 12
   145d8:	add	ip, ip, #64, 20	; 0x40000
   145dc:	ldr	pc, [ip, #2672]!	; 0xa70

000145e0 <memchr@plt>:
   145e0:	add	ip, pc, #0, 12
   145e4:	add	ip, ip, #64, 20	; 0x40000
   145e8:	ldr	pc, [ip, #2664]!	; 0xa68

000145ec <fputc@plt>:
   145ec:	add	ip, pc, #0, 12
   145f0:	add	ip, ip, #64, 20	; 0x40000
   145f4:	ldr	pc, [ip, #2656]!	; 0xa60

000145f8 <sprintf@plt>:
   145f8:	add	ip, pc, #0, 12
   145fc:	add	ip, ip, #64, 20	; 0x40000
   14600:	ldr	pc, [ip, #2648]!	; 0xa58

00014604 <abort@plt>:
   14604:	add	ip, pc, #0, 12
   14608:	add	ip, ip, #64, 20	; 0x40000
   1460c:	ldr	pc, [ip, #2640]!	; 0xa50

00014610 <__assert_fail@plt>:
   14610:	add	ip, pc, #0, 12
   14614:	add	ip, ip, #64, 20	; 0x40000
   14618:	ldr	pc, [ip, #2632]!	; 0xa48

Disassembly of section .text:

00014620 <main@@Base-0x2c0>:
   14620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14624:	sub	sp, sp, #44	; 0x2c
   14628:	mov	r6, #0
   1462c:	ldr	r8, [sp, #80]	; 0x50
   14630:	mov	r7, #0
   14634:	cmp	r1, r2
   14638:	strd	r6, [r8]
   1463c:	mov	r4, r1
   14640:	mov	r5, r2
   14644:	mov	r9, r3
   14648:	mov	r6, r0
   1464c:	beq	14684 <__assert_fail@plt+0x74>
   14650:	ldrb	r3, [r1]
   14654:	cmp	r3, #34	; 0x22
   14658:	moveq	r3, #0
   1465c:	addeq	r4, r1, #1
   14660:	streq	r3, [r0, #12]
   14664:	beq	14684 <__assert_fail@plt+0x74>
   14668:	cmp	r3, #46	; 0x2e
   1466c:	movne	r3, #1
   14670:	strne	r3, [r0, #12]
   14674:	bne	14684 <__assert_fail@plt+0x74>
   14678:	mov	r3, #5
   1467c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   14680:	mov	r4, r0
   14684:	ldr	r3, [r6, #12]
   14688:	cmp	r3, #0
   1468c:	bne	146a4 <__assert_fail@plt+0x94>
   14690:	mov	r1, r4
   14694:	mov	r2, r5
   14698:	mov	r0, r6
   1469c:	bl	17770 <_start@@Base+0x1f50>
   146a0:	mov	r4, r0
   146a4:	cmp	r5, r4
   146a8:	beq	1479c <__assert_fail@plt+0x18c>
   146ac:	mov	r3, #0
   146b0:	mov	r2, #0
   146b4:	add	fp, sp, #24
   146b8:	strd	r2, [sp, #8]
   146bc:	add	r3, sp, #28
   146c0:	str	r3, [sp, #16]
   146c4:	add	r3, sp, #32
   146c8:	str	r3, [sp, #20]
   146cc:	mov	sl, r9
   146d0:	ldr	r3, [sp, #16]
   146d4:	mov	r2, r5
   146d8:	str	r3, [sp, #4]
   146dc:	ldr	r3, [sp, #20]
   146e0:	mov	r1, r4
   146e4:	str	r3, [sp]
   146e8:	mov	r0, r6
   146ec:	ldr	r7, [sl]
   146f0:	mov	r3, fp
   146f4:	blx	r7
   146f8:	cmp	r5, r0
   146fc:	beq	1479c <__assert_fail@plt+0x18c>
   14700:	cmp	r4, r0
   14704:	bne	14730 <__assert_fail@plt+0x120>
   14708:	ldr	r3, [sl, #4]!
   1470c:	cmp	r3, #0
   14710:	bne	146d0 <__assert_fail@plt+0xc0>
   14714:	mov	r2, r5
   14718:	mov	r1, r4
   1471c:	mov	r0, r6
   14720:	mov	r3, #23
   14724:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   14728:	mov	r5, r0
   1472c:	b	1479c <__assert_fail@plt+0x18c>
   14730:	ldr	r3, [sp, #24]
   14734:	mov	r7, r0
   14738:	cmp	r3, #0
   1473c:	beq	14790 <__assert_fail@plt+0x180>
   14740:	mov	r3, #8
   14744:	mov	r2, r5
   14748:	mov	r1, r7
   1474c:	mov	r0, r6
   14750:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   14754:	cmp	r5, r0
   14758:	beq	1479c <__assert_fail@plt+0x18c>
   1475c:	ldrd	r2, [r8]
   14760:	ldrd	r0, [sp, #8]
   14764:	ldr	ip, [sp, #28]
   14768:	adds	r0, r0, r2
   1476c:	adc	r1, r1, r3
   14770:	mov	r2, r0
   14774:	mov	r3, r1
   14778:	cmp	ip, #0
   1477c:	strd	r2, [r8]
   14780:	movne	r4, r7
   14784:	bne	146cc <__assert_fail@plt+0xbc>
   14788:	mov	r5, r7
   1478c:	b	1479c <__assert_fail@plt+0x18c>
   14790:	ldrd	r2, [sp, #32]
   14794:	strd	r2, [sp, #8]
   14798:	b	1475c <__assert_fail@plt+0x14c>
   1479c:	mov	r0, r5
   147a0:	add	sp, sp, #44	; 0x2c
   147a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147a8:	ldr	r3, [pc, #28]	; 147cc <__assert_fail@plt+0x1bc>
   147ac:	ldr	r1, [pc, #28]	; 147d0 <__assert_fail@plt+0x1c0>
   147b0:	ldr	r0, [pc, #28]	; 147d4 <__assert_fail@plt+0x1c4>
   147b4:	push	{r4, lr}
   147b8:	add	r3, pc, r3
   147bc:	mov	r2, #308	; 0x134
   147c0:	add	r1, pc, r1
   147c4:	add	r0, pc, r0
   147c8:	bl	14610 <__assert_fail@plt>
   147cc:	andeq	sp, r2, ip, ror r5
   147d0:	andeq	sp, r2, r4, asr #25
   147d4:	andeq	sp, r2, r8, asr #26
   147d8:	ldr	r3, [pc, #32]	; 14800 <__assert_fail@plt+0x1f0>
   147dc:	ldr	r1, [pc, #32]	; 14804 <__assert_fail@plt+0x1f4>
   147e0:	ldr	r0, [pc, #32]	; 14808 <__assert_fail@plt+0x1f8>
   147e4:	add	r3, pc, r3
   147e8:	push	{r4, lr}
   147ec:	add	r3, r3, #16
   147f0:	ldr	r2, [pc, #20]	; 1480c <__assert_fail@plt+0x1fc>
   147f4:	add	r1, pc, r1
   147f8:	add	r0, pc, r0
   147fc:	bl	14610 <__assert_fail@plt>
   14800:	andeq	sp, r2, r0, asr r5
   14804:	muleq	r2, r0, ip
   14808:	andeq	sp, r2, r4, lsl sp
   1480c:	andeq	r0, r0, r1, lsr #5
   14810:	ldr	r3, [pc, #32]	; 14838 <__assert_fail@plt+0x228>
   14814:	ldr	r1, [pc, #32]	; 1483c <__assert_fail@plt+0x22c>
   14818:	ldr	r0, [pc, #32]	; 14840 <__assert_fail@plt+0x230>
   1481c:	add	r3, pc, r3
   14820:	push	{r4, lr}
   14824:	add	r3, r3, #28
   14828:	ldr	r2, [pc, #20]	; 14844 <__assert_fail@plt+0x234>
   1482c:	add	r1, pc, r1
   14830:	add	r0, pc, r0
   14834:	bl	14610 <__assert_fail@plt>
   14838:	andeq	sp, r2, r8, lsl r5
   1483c:	andeq	sp, r2, r8, asr ip
   14840:	ldrdeq	sp, [r2], -ip
   14844:	andeq	r0, r0, r7, lsl #5
   14848:	ldr	r3, [pc, #32]	; 14870 <__assert_fail@plt+0x260>
   1484c:	ldr	r1, [pc, #32]	; 14874 <__assert_fail@plt+0x264>
   14850:	ldr	r0, [pc, #32]	; 14878 <__assert_fail@plt+0x268>
   14854:	add	r3, pc, r3
   14858:	push	{r4, lr}
   1485c:	mov	r2, #892	; 0x37c
   14860:	add	r3, r3, #40	; 0x28
   14864:	add	r1, pc, r1
   14868:	add	r0, pc, r0
   1486c:	bl	14610 <__assert_fail@plt>
   14870:	andeq	sp, r2, r0, ror #9
   14874:	andeq	sp, r2, r0, lsr #24
   14878:	andeq	sp, r2, ip, ror ip
   1487c:	ldr	r3, [pc, #28]	; 148a0 <__assert_fail@plt+0x290>
   14880:	ldr	r1, [pc, #28]	; 148a4 <__assert_fail@plt+0x294>
   14884:	ldr	r0, [pc, #28]	; 148a8 <__assert_fail@plt+0x298>
   14888:	push	{r4, lr}
   1488c:	add	r3, pc, r3
   14890:	mov	r2, #260	; 0x104
   14894:	add	r1, pc, r1
   14898:	add	r0, pc, r0
   1489c:	bl	14610 <__assert_fail@plt>
   148a0:	andeq	lr, r2, ip, lsr #9
   148a4:			; <UNDEFINED> instruction: 0x0002ecb0
   148a8:	andeq	lr, r2, ip, lsl sp
   148ac:	ldr	r3, [pc, #32]	; 148d4 <__assert_fail@plt+0x2c4>
   148b0:	ldr	r1, [pc, #32]	; 148d8 <__assert_fail@plt+0x2c8>
   148b4:	ldr	r0, [pc, #32]	; 148dc <__assert_fail@plt+0x2cc>
   148b8:	add	r3, pc, r3
   148bc:	push	{r4, lr}
   148c0:	mov	r2, #260	; 0x104
   148c4:	add	r3, r3, #204	; 0xcc
   148c8:	add	r1, pc, r1
   148cc:	add	r0, pc, r0
   148d0:	bl	14610 <__assert_fail@plt>
   148d4:	andeq	pc, r2, r0, lsl #2
   148d8:	andeq	lr, r2, ip, ror ip
   148dc:	andeq	lr, r2, r8, ror #25

000148e0 <main@@Base>:
   148e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148e4:	sub	sp, sp, #52	; 0x34
   148e8:	bl	254ac <edge_case_tests@@Base>
   148ec:	ldr	r7, [pc, #3284]	; 155c8 <main@@Base+0xce8>
   148f0:	ldr	r6, [pc, #3284]	; 155cc <main@@Base+0xcec>
   148f4:	mov	r4, #0
   148f8:	add	r6, pc, r6
   148fc:	add	r7, pc, r7
   14900:	ldr	r8, [pc, #3272]	; 155d0 <main@@Base+0xcf0>
   14904:	ldr	sl, [pc, #3272]	; 155d4 <main@@Base+0xcf4>
   14908:	add	r8, pc, r8
   1490c:	add	sl, pc, sl
   14910:	ldr	r9, [pc, #3264]	; 155d8 <main@@Base+0xcf8>
   14914:	mov	fp, sl
   14918:	add	r9, pc, r9
   1491c:	mov	r5, r0
   14920:	bl	25858 <error_case_tests@@Base>
   14924:	orr	r5, r5, r0
   14928:	bl	26010 <union_vector_tests@@Base>
   1492c:	orr	r5, r5, r0
   14930:	bl	25c08 <base64_tests@@Base>
   14934:	orr	r5, r5, r0
   14938:	bl	25e58 <mixed_type_union_tests@@Base>
   1493c:	ldr	r3, [pc, #3224]	; 155dc <main@@Base+0xcfc>
   14940:	ldr	r1, [pc, #3224]	; 155e0 <main@@Base+0xd00>
   14944:	mov	r2, r7
   14948:	str	r3, [sp, #8]
   1494c:	str	r4, [sp, #4]
   14950:	mov	r3, r4
   14954:	str	r4, [sp]
   14958:	add	r1, pc, r1
   1495c:	orr	r5, r5, r0
   14960:	mov	r0, r6
   14964:	bl	24fa0 <test_json@@Base>
   14968:	mov	r1, #528	; 0x210
   1496c:	str	r1, [sp, #8]
   14970:	ldr	r1, [pc, #3180]	; 155e4 <main@@Base+0xd04>
   14974:	mov	r3, r4
   14978:	mov	r2, r8
   1497c:	str	r4, [sp, #4]
   14980:	str	r4, [sp]
   14984:	add	r1, pc, r1
   14988:	orr	r5, r5, r0
   1498c:	mov	r0, r6
   14990:	bl	24fa0 <test_json@@Base>
   14994:	ldr	r1, [pc, #3148]	; 155e8 <main@@Base+0xd08>
   14998:	mov	r3, r4
   1499c:	str	r1, [sp, #8]
   149a0:	ldr	r1, [pc, #3140]	; 155ec <main@@Base+0xd0c>
   149a4:	mov	r2, sl
   149a8:	str	r4, [sp, #4]
   149ac:	str	r4, [sp]
   149b0:	add	r1, pc, r1
   149b4:	orr	r5, r5, r0
   149b8:	mov	r0, r6
   149bc:	bl	24fa0 <test_json@@Base>
   149c0:	ldr	r1, [pc, #3112]	; 155f0 <main@@Base+0xd10>
   149c4:	mov	r3, r4
   149c8:	str	r1, [sp, #8]
   149cc:	ldr	r1, [pc, #3104]	; 155f4 <main@@Base+0xd14>
   149d0:	mov	r2, r9
   149d4:	str	r4, [sp, #4]
   149d8:	str	r4, [sp]
   149dc:	add	r1, pc, r1
   149e0:	orr	r5, r5, r0
   149e4:	mov	r0, r6
   149e8:	bl	24fa0 <test_json@@Base>
   149ec:	ldr	r1, [pc, #3076]	; 155f8 <main@@Base+0xd18>
   149f0:	mov	r3, r4
   149f4:	str	r1, [sp, #8]
   149f8:	ldr	r1, [pc, #3068]	; 155fc <main@@Base+0xd1c>
   149fc:	mov	r2, r9
   14a00:	str	r4, [sp, #4]
   14a04:	str	r4, [sp]
   14a08:	add	r1, pc, r1
   14a0c:	orr	r5, r5, r0
   14a10:	mov	r0, r6
   14a14:	bl	24fa0 <test_json@@Base>
   14a18:	mov	r1, #540	; 0x21c
   14a1c:	str	r1, [sp, #8]
   14a20:	ldr	r1, [pc, #3032]	; 15600 <main@@Base+0xd20>
   14a24:	mov	r3, r4
   14a28:	mov	r2, r8
   14a2c:	str	r4, [sp, #4]
   14a30:	str	r4, [sp]
   14a34:	add	r1, pc, r1
   14a38:	orr	r5, r5, r0
   14a3c:	mov	r0, r6
   14a40:	bl	24fa0 <test_json@@Base>
   14a44:	ldr	r1, [pc, #3000]	; 15604 <main@@Base+0xd24>
   14a48:	mov	r3, r4
   14a4c:	str	r1, [sp, #8]
   14a50:	ldr	r1, [pc, #2992]	; 15608 <main@@Base+0xd28>
   14a54:	mov	r2, sl
   14a58:	str	r4, [sp, #4]
   14a5c:	str	r4, [sp]
   14a60:	add	r1, pc, r1
   14a64:	ldr	sl, [pc, #2976]	; 1560c <main@@Base+0xd2c>
   14a68:	add	sl, pc, sl
   14a6c:	orr	r5, r5, r0
   14a70:	mov	r0, r6
   14a74:	bl	24fa0 <test_json@@Base>
   14a78:	ldr	r1, [pc, #2960]	; 15610 <main@@Base+0xd30>
   14a7c:	mov	r3, r4
   14a80:	str	r1, [sp, #8]
   14a84:	ldr	r1, [pc, #2952]	; 15614 <main@@Base+0xd34>
   14a88:	mov	r2, r7
   14a8c:	str	r4, [sp, #4]
   14a90:	str	r4, [sp]
   14a94:	add	r1, pc, r1
   14a98:	orr	r5, r5, r0
   14a9c:	mov	r0, r6
   14aa0:	bl	24fa0 <test_json@@Base>
   14aa4:	ldr	r1, [pc, #2924]	; 15618 <main@@Base+0xd38>
   14aa8:	mov	r3, r4
   14aac:	str	r1, [sp, #8]
   14ab0:	ldr	r1, [pc, #2916]	; 1561c <main@@Base+0xd3c>
   14ab4:	mov	r2, r7
   14ab8:	str	r4, [sp, #4]
   14abc:	str	r4, [sp]
   14ac0:	add	r1, pc, r1
   14ac4:	orr	r5, r5, r0
   14ac8:	mov	r0, r6
   14acc:	bl	24fa0 <test_json@@Base>
   14ad0:	ldr	r1, [pc, #2888]	; 15620 <main@@Base+0xd40>
   14ad4:	mov	r3, r4
   14ad8:	str	r1, [sp, #8]
   14adc:	ldr	r1, [pc, #2880]	; 15624 <main@@Base+0xd44>
   14ae0:	mov	r2, r7
   14ae4:	str	r4, [sp, #4]
   14ae8:	str	r4, [sp]
   14aec:	add	r1, pc, r1
   14af0:	orr	r5, r5, r0
   14af4:	mov	r0, r6
   14af8:	bl	24fa0 <test_json@@Base>
   14afc:	ldr	r1, [pc, #2852]	; 15628 <main@@Base+0xd48>
   14b00:	mov	r3, r4
   14b04:	str	r1, [sp, #8]
   14b08:	ldr	r1, [pc, #2844]	; 1562c <main@@Base+0xd4c>
   14b0c:	mov	r2, r8
   14b10:	str	r4, [sp, #4]
   14b14:	str	r4, [sp]
   14b18:	add	r1, pc, r1
   14b1c:	orr	r5, r5, r0
   14b20:	mov	r0, r6
   14b24:	bl	24fa0 <test_json@@Base>
   14b28:	ldr	r1, [pc, #2816]	; 15630 <main@@Base+0xd50>
   14b2c:	mov	r3, r4
   14b30:	str	r1, [sp, #8]
   14b34:	ldr	r1, [pc, #2808]	; 15634 <main@@Base+0xd54>
   14b38:	mov	r2, fp
   14b3c:	str	r4, [sp, #4]
   14b40:	str	r4, [sp]
   14b44:	add	r1, pc, r1
   14b48:	orr	r5, r5, r0
   14b4c:	mov	r0, r6
   14b50:	bl	24fa0 <test_json@@Base>
   14b54:	mov	r1, #564	; 0x234
   14b58:	str	r1, [sp, #8]
   14b5c:	ldr	r1, [pc, #2772]	; 15638 <main@@Base+0xd58>
   14b60:	mov	r3, r4
   14b64:	mov	r2, r9
   14b68:	str	r4, [sp, #4]
   14b6c:	str	r4, [sp]
   14b70:	add	r1, pc, r1
   14b74:	orr	r5, r5, r0
   14b78:	mov	r0, r6
   14b7c:	bl	24fa0 <test_json@@Base>
   14b80:	ldr	r1, [pc, #2740]	; 1563c <main@@Base+0xd5c>
   14b84:	mov	r3, r4
   14b88:	str	r1, [sp, #8]
   14b8c:	ldr	r1, [pc, #2732]	; 15640 <main@@Base+0xd60>
   14b90:	mov	r2, r9
   14b94:	str	r4, [sp, #4]
   14b98:	str	r4, [sp]
   14b9c:	add	r1, pc, r1
   14ba0:	orr	r5, r5, r0
   14ba4:	mov	r0, r6
   14ba8:	bl	24fa0 <test_json@@Base>
   14bac:	ldr	r1, [pc, #2704]	; 15644 <main@@Base+0xd64>
   14bb0:	mov	r3, r4
   14bb4:	str	r1, [sp, #8]
   14bb8:	ldr	r1, [pc, #2696]	; 15648 <main@@Base+0xd68>
   14bbc:	mov	r2, r8
   14bc0:	str	r4, [sp, #4]
   14bc4:	str	r4, [sp]
   14bc8:	add	r1, pc, r1
   14bcc:	orr	r5, r5, r0
   14bd0:	mov	r0, r6
   14bd4:	bl	24fa0 <test_json@@Base>
   14bd8:	ldr	r1, [pc, #2668]	; 1564c <main@@Base+0xd6c>
   14bdc:	mov	r3, r4
   14be0:	str	r1, [sp, #8]
   14be4:	ldr	r1, [pc, #2660]	; 15650 <main@@Base+0xd70>
   14be8:	mov	r2, fp
   14bec:	str	r4, [sp, #4]
   14bf0:	str	r4, [sp]
   14bf4:	add	r1, pc, r1
   14bf8:	orr	r5, r5, r0
   14bfc:	mov	r0, r6
   14c00:	bl	24fa0 <test_json@@Base>
   14c04:	ldr	r1, [pc, #2632]	; 15654 <main@@Base+0xd74>
   14c08:	mov	r3, r4
   14c0c:	str	r1, [sp, #8]
   14c10:	ldr	r1, [pc, #2624]	; 15658 <main@@Base+0xd78>
   14c14:	mov	r2, r7
   14c18:	str	r4, [sp, #4]
   14c1c:	str	r4, [sp]
   14c20:	add	r1, pc, r1
   14c24:	orr	r5, r5, r0
   14c28:	mov	r0, r6
   14c2c:	bl	24fa0 <test_json@@Base>
   14c30:	ldr	r1, [pc, #2596]	; 1565c <main@@Base+0xd7c>
   14c34:	mov	r3, r4
   14c38:	str	r1, [sp, #8]
   14c3c:	ldr	r1, [pc, #2588]	; 15660 <main@@Base+0xd80>
   14c40:	mov	r2, r7
   14c44:	str	r4, [sp, #4]
   14c48:	str	r4, [sp]
   14c4c:	add	r1, pc, r1
   14c50:	orr	r5, r5, r0
   14c54:	mov	r0, r6
   14c58:	bl	24fa0 <test_json@@Base>
   14c5c:	ldr	r1, [pc, #2560]	; 15664 <main@@Base+0xd84>
   14c60:	mov	r3, r4
   14c64:	str	r1, [sp, #8]
   14c68:	ldr	r1, [pc, #2552]	; 15668 <main@@Base+0xd88>
   14c6c:	mov	r2, sl
   14c70:	str	r4, [sp, #4]
   14c74:	str	r4, [sp]
   14c78:	add	r1, pc, r1
   14c7c:	orr	r5, r5, r0
   14c80:	mov	r0, r6
   14c84:	bl	24fa0 <test_json@@Base>
   14c88:	ldr	r1, [pc, #2524]	; 1566c <main@@Base+0xd8c>
   14c8c:	mov	r3, r4
   14c90:	str	r1, [sp, #8]
   14c94:	ldr	r1, [pc, #2516]	; 15670 <main@@Base+0xd90>
   14c98:	mov	r2, sl
   14c9c:	str	r4, [sp, #4]
   14ca0:	str	r4, [sp]
   14ca4:	add	r1, pc, r1
   14ca8:	orr	r5, r5, r0
   14cac:	mov	r0, r6
   14cb0:	bl	24fa0 <test_json@@Base>
   14cb4:	ldr	r1, [pc, #2488]	; 15674 <main@@Base+0xd94>
   14cb8:	mov	r2, sl
   14cbc:	str	r1, [sp, #8]
   14cc0:	ldr	r1, [pc, #2480]	; 15678 <main@@Base+0xd98>
   14cc4:	mov	r3, r4
   14cc8:	str	r4, [sp, #4]
   14ccc:	str	r4, [sp]
   14cd0:	add	r1, pc, r1
   14cd4:	ldr	sl, [pc, #2464]	; 1567c <main@@Base+0xd9c>
   14cd8:	add	sl, pc, sl
   14cdc:	orr	r5, r5, r0
   14ce0:	mov	r0, r6
   14ce4:	bl	24fa0 <test_json@@Base>
   14ce8:	ldr	r1, [pc, #2448]	; 15680 <main@@Base+0xda0>
   14cec:	mov	r3, r4
   14cf0:	str	r1, [sp, #8]
   14cf4:	ldr	r1, [pc, #2440]	; 15684 <main@@Base+0xda4>
   14cf8:	mov	r2, r9
   14cfc:	str	r4, [sp, #4]
   14d00:	str	r4, [sp]
   14d04:	add	r1, pc, r1
   14d08:	orr	r5, r5, r0
   14d0c:	mov	r0, r6
   14d10:	bl	24fa0 <test_json@@Base>
   14d14:	ldr	r1, [pc, #2412]	; 15688 <main@@Base+0xda8>
   14d18:	mov	r3, r4
   14d1c:	str	r1, [sp, #8]
   14d20:	ldr	r1, [pc, #2404]	; 1568c <main@@Base+0xdac>
   14d24:	mov	r2, r8
   14d28:	str	r4, [sp, #4]
   14d2c:	str	r4, [sp]
   14d30:	add	r1, pc, r1
   14d34:	orr	r5, r5, r0
   14d38:	mov	r0, r6
   14d3c:	bl	24fa0 <test_json@@Base>
   14d40:	mov	r1, #604	; 0x25c
   14d44:	str	r1, [sp, #8]
   14d48:	ldr	r1, [pc, #2368]	; 15690 <main@@Base+0xdb0>
   14d4c:	mov	r3, r4
   14d50:	mov	r2, fp
   14d54:	str	r4, [sp, #4]
   14d58:	str	r4, [sp]
   14d5c:	add	r1, pc, r1
   14d60:	str	fp, [sp, #20]
   14d64:	ldr	fp, [pc, #2344]	; 15694 <main@@Base+0xdb4>
   14d68:	add	fp, pc, fp
   14d6c:	orr	r5, r5, r0
   14d70:	mov	r0, r6
   14d74:	bl	24fa0 <test_json@@Base>
   14d78:	ldr	r1, [pc, #2328]	; 15698 <main@@Base+0xdb8>
   14d7c:	ldr	ip, [pc, #2328]	; 1569c <main@@Base+0xdbc>
   14d80:	str	r1, [sp, #8]
   14d84:	ldr	r1, [pc, #2324]	; 156a0 <main@@Base+0xdc0>
   14d88:	add	ip, pc, ip
   14d8c:	mov	r2, ip
   14d90:	mov	r3, r4
   14d94:	str	r4, [sp, #4]
   14d98:	str	r4, [sp]
   14d9c:	add	r1, pc, r1
   14da0:	str	ip, [sp, #24]
   14da4:	orr	r5, r5, r0
   14da8:	mov	r0, r6
   14dac:	bl	24fa0 <test_json@@Base>
   14db0:	ldr	r1, [pc, #2284]	; 156a4 <main@@Base+0xdc4>
   14db4:	mov	r3, r4
   14db8:	str	r1, [sp, #8]
   14dbc:	ldr	r1, [pc, #2276]	; 156a8 <main@@Base+0xdc8>
   14dc0:	mov	r2, r9
   14dc4:	str	r4, [sp, #4]
   14dc8:	str	r4, [sp]
   14dcc:	add	r1, pc, r1
   14dd0:	orr	r5, r5, r0
   14dd4:	mov	r0, r6
   14dd8:	bl	24fa0 <test_json@@Base>
   14ddc:	ldr	r1, [pc, #2248]	; 156ac <main@@Base+0xdcc>
   14de0:	ldr	lr, [pc, #2248]	; 156b0 <main@@Base+0xdd0>
   14de4:	str	r1, [sp, #8]
   14de8:	ldr	r1, [pc, #2244]	; 156b4 <main@@Base+0xdd4>
   14dec:	add	lr, pc, lr
   14df0:	mov	r2, lr
   14df4:	mov	r3, r4
   14df8:	str	r4, [sp, #4]
   14dfc:	str	r4, [sp]
   14e00:	add	r1, pc, r1
   14e04:	str	lr, [sp, #28]
   14e08:	orr	r5, r5, r0
   14e0c:	mov	r0, r6
   14e10:	bl	24fa0 <test_json@@Base>
   14e14:	mov	r1, #616	; 0x268
   14e18:	ldr	ip, [pc, #2200]	; 156b8 <main@@Base+0xdd8>
   14e1c:	str	r1, [sp, #8]
   14e20:	ldr	r1, [pc, #2196]	; 156bc <main@@Base+0xddc>
   14e24:	add	ip, pc, ip
   14e28:	mov	r2, ip
   14e2c:	mov	r3, r4
   14e30:	str	r4, [sp, #4]
   14e34:	str	r4, [sp]
   14e38:	add	r1, pc, r1
   14e3c:	str	ip, [sp, #32]
   14e40:	orr	r5, r5, r0
   14e44:	mov	r0, r6
   14e48:	bl	24fa0 <test_json@@Base>
   14e4c:	ldr	r1, [pc, #2156]	; 156c0 <main@@Base+0xde0>
   14e50:	ldr	lr, [pc, #2156]	; 156c4 <main@@Base+0xde4>
   14e54:	str	r1, [sp, #8]
   14e58:	ldr	r1, [pc, #2152]	; 156c8 <main@@Base+0xde8>
   14e5c:	add	lr, pc, lr
   14e60:	mov	r2, lr
   14e64:	mov	r3, r4
   14e68:	str	r4, [sp, #4]
   14e6c:	str	r4, [sp]
   14e70:	add	r1, pc, r1
   14e74:	str	lr, [sp, #36]	; 0x24
   14e78:	orr	r5, r5, r0
   14e7c:	mov	r0, r6
   14e80:	bl	24fa0 <test_json@@Base>
   14e84:	ldr	r1, [pc, #2112]	; 156cc <main@@Base+0xdec>
   14e88:	mov	r3, r4
   14e8c:	str	r1, [sp, #8]
   14e90:	ldr	r1, [pc, #2104]	; 156d0 <main@@Base+0xdf0>
   14e94:	mov	r2, r8
   14e98:	str	r4, [sp, #4]
   14e9c:	str	r4, [sp]
   14ea0:	add	r1, pc, r1
   14ea4:	orr	r5, r5, r0
   14ea8:	mov	r0, r6
   14eac:	bl	24fa0 <test_json@@Base>
   14eb0:	ldr	r1, [pc, #2076]	; 156d4 <main@@Base+0xdf4>
   14eb4:	mov	r3, r4
   14eb8:	str	r1, [sp, #8]
   14ebc:	ldr	r1, [pc, #2068]	; 156d8 <main@@Base+0xdf8>
   14ec0:	mov	r2, r8
   14ec4:	str	r4, [sp, #4]
   14ec8:	str	r4, [sp]
   14ecc:	add	r1, pc, r1
   14ed0:	orr	r5, r5, r0
   14ed4:	mov	r0, r6
   14ed8:	bl	24fa0 <test_json@@Base>
   14edc:	mov	ip, #628	; 0x274
   14ee0:	mov	r3, r4
   14ee4:	mov	r2, sl
   14ee8:	mov	r1, fp
   14eec:	str	ip, [sp, #8]
   14ef0:	str	r4, [sp, #4]
   14ef4:	str	r4, [sp]
   14ef8:	orr	r5, r5, r0
   14efc:	mov	r0, r6
   14f00:	bl	24fa0 <test_json@@Base>
   14f04:	ldr	ip, [pc, #2000]	; 156dc <main@@Base+0xdfc>
   14f08:	mov	r1, fp
   14f0c:	str	ip, [sp, #8]
   14f10:	mov	r3, r4
   14f14:	mov	r2, sl
   14f18:	str	r4, [sp, #4]
   14f1c:	str	r4, [sp]
   14f20:	ldr	fp, [pc, #1976]	; 156e0 <main@@Base+0xe00>
   14f24:	add	fp, pc, fp
   14f28:	orr	r5, r5, r0
   14f2c:	mov	r0, r6
   14f30:	bl	24fa0 <test_json@@Base>
   14f34:	ldr	r1, [pc, #1960]	; 156e4 <main@@Base+0xe04>
   14f38:	mov	r3, r4
   14f3c:	str	r1, [sp, #8]
   14f40:	ldr	r1, [pc, #1952]	; 156e8 <main@@Base+0xe08>
   14f44:	mov	r2, fp
   14f48:	str	r4, [sp, #4]
   14f4c:	str	r4, [sp]
   14f50:	add	r1, pc, r1
   14f54:	str	fp, [sp, #40]	; 0x28
   14f58:	ldr	fp, [pc, #1932]	; 156ec <main@@Base+0xe0c>
   14f5c:	add	fp, pc, fp
   14f60:	orr	r5, r5, r0
   14f64:	mov	r0, r6
   14f68:	bl	24fa0 <test_json@@Base>
   14f6c:	ldr	r1, [pc, #1916]	; 156f0 <main@@Base+0xe10>
   14f70:	mov	r3, r4
   14f74:	str	r1, [sp, #8]
   14f78:	ldr	r1, [pc, #1908]	; 156f4 <main@@Base+0xe14>
   14f7c:	mov	r2, fp
   14f80:	str	r4, [sp, #4]
   14f84:	str	r4, [sp]
   14f88:	add	r1, pc, r1
   14f8c:	str	fp, [sp, #44]	; 0x2c
   14f90:	ldr	fp, [pc, #1888]	; 156f8 <main@@Base+0xe18>
   14f94:	add	fp, pc, fp
   14f98:	orr	r5, r5, r0
   14f9c:	mov	r0, r6
   14fa0:	bl	24fa0 <test_json@@Base>
   14fa4:	ldr	r1, [pc, #1872]	; 156fc <main@@Base+0xe1c>
   14fa8:	mov	r3, r4
   14fac:	str	r1, [sp, #8]
   14fb0:	ldr	r1, [pc, #1864]	; 15700 <main@@Base+0xe20>
   14fb4:	mov	r2, fp
   14fb8:	str	r4, [sp, #4]
   14fbc:	str	r4, [sp]
   14fc0:	add	r1, pc, r1
   14fc4:	orr	r5, r5, r0
   14fc8:	mov	r0, r6
   14fcc:	bl	24fa0 <test_json@@Base>
   14fd0:	ldr	r1, [pc, #1836]	; 15704 <main@@Base+0xe24>
   14fd4:	mov	r3, r4
   14fd8:	str	r1, [sp, #8]
   14fdc:	ldr	r1, [pc, #1828]	; 15708 <main@@Base+0xe28>
   14fe0:	mov	r2, r7
   14fe4:	str	r4, [sp, #4]
   14fe8:	str	r4, [sp]
   14fec:	add	r1, pc, r1
   14ff0:	orr	r5, r5, r0
   14ff4:	mov	r0, r6
   14ff8:	bl	24fa0 <test_json@@Base>
   14ffc:	ldr	r1, [pc, #1800]	; 1570c <main@@Base+0xe2c>
   15000:	mov	r3, r4
   15004:	str	r1, [sp, #8]
   15008:	ldr	r1, [pc, #1792]	; 15710 <main@@Base+0xe30>
   1500c:	mov	r2, r7
   15010:	str	r4, [sp, #4]
   15014:	str	r4, [sp]
   15018:	add	r1, pc, r1
   1501c:	orr	r5, r5, r0
   15020:	mov	r0, r6
   15024:	bl	24fa0 <test_json@@Base>
   15028:	ldr	r1, [pc, #1764]	; 15714 <main@@Base+0xe34>
   1502c:	mov	r3, r4
   15030:	str	r1, [sp, #8]
   15034:	ldr	r1, [pc, #1756]	; 15718 <main@@Base+0xe38>
   15038:	mov	r2, r8
   1503c:	str	r4, [sp, #4]
   15040:	str	r4, [sp]
   15044:	add	r1, pc, r1
   15048:	orr	r5, r5, r0
   1504c:	mov	r0, r6
   15050:	bl	24fa0 <test_json@@Base>
   15054:	mov	r1, #656	; 0x290
   15058:	str	r1, [sp, #8]
   1505c:	ldr	r1, [pc, #1720]	; 1571c <main@@Base+0xe3c>
   15060:	ldr	r2, [sp, #20]
   15064:	mov	r3, r4
   15068:	str	r4, [sp, #4]
   1506c:	str	r4, [sp]
   15070:	add	r1, pc, r1
   15074:	orr	r5, r5, r0
   15078:	mov	r0, r6
   1507c:	bl	24fa0 <test_json@@Base>
   15080:	ldr	r1, [pc, #1688]	; 15720 <main@@Base+0xe40>
   15084:	ldr	r2, [sp, #24]
   15088:	str	r1, [sp, #8]
   1508c:	ldr	r1, [pc, #1680]	; 15724 <main@@Base+0xe44>
   15090:	mov	r3, r4
   15094:	str	r4, [sp, #4]
   15098:	str	r4, [sp]
   1509c:	add	r1, pc, r1
   150a0:	orr	r5, r5, r0
   150a4:	mov	r0, r6
   150a8:	bl	24fa0 <test_json@@Base>
   150ac:	ldr	r1, [pc, #1652]	; 15728 <main@@Base+0xe48>
   150b0:	mov	r2, r9
   150b4:	str	r1, [sp, #8]
   150b8:	ldr	r1, [pc, #1644]	; 1572c <main@@Base+0xe4c>
   150bc:	mov	r3, r4
   150c0:	str	r4, [sp, #4]
   150c4:	str	r4, [sp]
   150c8:	add	r1, pc, r1
   150cc:	ldr	r9, [pc, #1628]	; 15730 <main@@Base+0xe50>
   150d0:	add	r9, pc, r9
   150d4:	orr	r5, r5, r0
   150d8:	mov	r0, r6
   150dc:	bl	24fa0 <test_json@@Base>
   150e0:	ldr	r1, [pc, #1612]	; 15734 <main@@Base+0xe54>
   150e4:	ldr	r2, [sp, #28]
   150e8:	str	r1, [sp, #8]
   150ec:	ldr	r1, [pc, #1604]	; 15738 <main@@Base+0xe58>
   150f0:	mov	r3, r4
   150f4:	str	r4, [sp, #4]
   150f8:	str	r4, [sp]
   150fc:	add	r1, pc, r1
   15100:	orr	r5, r5, r0
   15104:	mov	r0, r6
   15108:	bl	24fa0 <test_json@@Base>
   1510c:	mov	r1, #668	; 0x29c
   15110:	str	r1, [sp, #8]
   15114:	ldr	r1, [pc, #1568]	; 1573c <main@@Base+0xe5c>
   15118:	ldr	r2, [sp, #32]
   1511c:	mov	r3, r4
   15120:	str	r4, [sp, #4]
   15124:	str	r4, [sp]
   15128:	add	r1, pc, r1
   1512c:	orr	r5, r5, r0
   15130:	mov	r0, r6
   15134:	bl	24fa0 <test_json@@Base>
   15138:	ldr	r1, [pc, #1536]	; 15740 <main@@Base+0xe60>
   1513c:	ldr	r2, [sp, #36]	; 0x24
   15140:	str	r1, [sp, #8]
   15144:	ldr	r1, [pc, #1528]	; 15744 <main@@Base+0xe64>
   15148:	mov	r3, r4
   1514c:	str	r4, [sp, #4]
   15150:	str	r4, [sp]
   15154:	add	r1, pc, r1
   15158:	orr	r5, r5, r0
   1515c:	mov	r0, r6
   15160:	bl	24fa0 <test_json@@Base>
   15164:	ldr	r1, [pc, #1500]	; 15748 <main@@Base+0xe68>
   15168:	mov	r3, r4
   1516c:	str	r1, [sp, #8]
   15170:	ldr	r1, [pc, #1492]	; 1574c <main@@Base+0xe6c>
   15174:	mov	r2, r8
   15178:	str	r4, [sp, #4]
   1517c:	str	r4, [sp]
   15180:	add	r1, pc, r1
   15184:	orr	r5, r5, r0
   15188:	mov	r0, r6
   1518c:	bl	24fa0 <test_json@@Base>
   15190:	ldr	r1, [pc, #1464]	; 15750 <main@@Base+0xe70>
   15194:	mov	r2, r8
   15198:	str	r1, [sp, #8]
   1519c:	ldr	r1, [pc, #1456]	; 15754 <main@@Base+0xe74>
   151a0:	mov	r3, r4
   151a4:	str	r4, [sp, #4]
   151a8:	str	r4, [sp]
   151ac:	add	r1, pc, r1
   151b0:	ldr	r8, [pc, #1440]	; 15758 <main@@Base+0xe78>
   151b4:	add	r8, pc, r8
   151b8:	orr	r5, r5, r0
   151bc:	mov	r0, r6
   151c0:	bl	24fa0 <test_json@@Base>
   151c4:	mov	ip, #680	; 0x2a8
   151c8:	mov	r3, r4
   151cc:	mov	r2, sl
   151d0:	mov	r1, r8
   151d4:	str	ip, [sp, #8]
   151d8:	str	r4, [sp, #4]
   151dc:	str	r4, [sp]
   151e0:	orr	r5, r5, r0
   151e4:	mov	r0, r6
   151e8:	bl	24fa0 <test_json@@Base>
   151ec:	ldr	ip, [pc, #1384]	; 1575c <main@@Base+0xe7c>
   151f0:	mov	r2, sl
   151f4:	str	ip, [sp, #8]
   151f8:	mov	r1, r8
   151fc:	mov	r3, r4
   15200:	str	r4, [sp, #4]
   15204:	str	r4, [sp]
   15208:	ldr	r8, [pc, #1360]	; 15760 <main@@Base+0xe80>
   1520c:	add	r8, pc, r8
   15210:	orr	r5, r5, r0
   15214:	mov	r0, r6
   15218:	bl	24fa0 <test_json@@Base>
   1521c:	ldr	r1, [pc, #1344]	; 15764 <main@@Base+0xe84>
   15220:	ldr	r2, [sp, #40]	; 0x28
   15224:	str	r1, [sp, #8]
   15228:	ldr	r1, [pc, #1336]	; 15768 <main@@Base+0xe88>
   1522c:	mov	r3, r4
   15230:	str	r4, [sp, #4]
   15234:	str	r4, [sp]
   15238:	add	r1, pc, r1
   1523c:	orr	r5, r5, r0
   15240:	mov	r0, r6
   15244:	bl	24fa0 <test_json@@Base>
   15248:	ldr	r1, [pc, #1308]	; 1576c <main@@Base+0xe8c>
   1524c:	ldr	r2, [sp, #44]	; 0x2c
   15250:	str	r1, [sp, #8]
   15254:	ldr	r1, [pc, #1300]	; 15770 <main@@Base+0xe90>
   15258:	mov	r3, r4
   1525c:	str	r4, [sp, #4]
   15260:	str	r4, [sp]
   15264:	add	r1, pc, r1
   15268:	orr	r5, r5, r0
   1526c:	mov	r0, r6
   15270:	bl	24fa0 <test_json@@Base>
   15274:	ldr	r1, [pc, #1272]	; 15774 <main@@Base+0xe94>
   15278:	mov	r2, fp
   1527c:	str	r1, [sp, #8]
   15280:	ldr	r1, [pc, #1264]	; 15778 <main@@Base+0xe98>
   15284:	mov	r3, r4
   15288:	str	r4, [sp, #4]
   1528c:	str	r4, [sp]
   15290:	add	r1, pc, r1
   15294:	orr	r5, r5, r0
   15298:	mov	r0, r6
   1529c:	bl	24fa0 <test_json@@Base>
   152a0:	ldr	r1, [pc, #1236]	; 1577c <main@@Base+0xe9c>
   152a4:	mov	r3, r4
   152a8:	str	r1, [sp, #8]
   152ac:	ldr	r1, [pc, #1228]	; 15780 <main@@Base+0xea0>
   152b0:	mov	r2, r7
   152b4:	str	r4, [sp, #4]
   152b8:	str	r4, [sp]
   152bc:	add	r1, pc, r1
   152c0:	orr	r5, r5, r0
   152c4:	mov	r0, r6
   152c8:	bl	24fa0 <test_json@@Base>
   152cc:	ldr	r1, [pc, #1200]	; 15784 <main@@Base+0xea4>
   152d0:	mov	r3, r4
   152d4:	str	r1, [sp, #8]
   152d8:	ldr	r1, [pc, #1192]	; 15788 <main@@Base+0xea8>
   152dc:	mov	r2, r7
   152e0:	str	r4, [sp, #4]
   152e4:	str	r4, [sp]
   152e8:	add	r1, pc, r1
   152ec:	orr	r5, r5, r0
   152f0:	mov	r0, r6
   152f4:	bl	24fa0 <test_json@@Base>
   152f8:	ldr	r1, [pc, #1164]	; 1578c <main@@Base+0xeac>
   152fc:	mov	r3, r4
   15300:	str	r1, [sp, #8]
   15304:	ldr	r1, [pc, #1156]	; 15790 <main@@Base+0xeb0>
   15308:	mov	r2, r9
   1530c:	str	r4, [sp, #4]
   15310:	str	r4, [sp]
   15314:	add	r1, pc, r1
   15318:	orr	r5, r5, r0
   1531c:	mov	r0, r6
   15320:	bl	24fa0 <test_json@@Base>
   15324:	mov	r1, #716	; 0x2cc
   15328:	str	r1, [sp, #8]
   1532c:	ldr	r1, [pc, #1120]	; 15794 <main@@Base+0xeb4>
   15330:	mov	r2, r9
   15334:	mov	r3, r4
   15338:	str	r4, [sp, #4]
   1533c:	str	r4, [sp]
   15340:	add	r1, pc, r1
   15344:	orr	r5, r5, r0
   15348:	mov	r0, r6
   1534c:	bl	24fa0 <test_json@@Base>
   15350:	ldr	r2, [pc, #1088]	; 15798 <main@@Base+0xeb8>
   15354:	ldr	r1, [pc, #1088]	; 1579c <main@@Base+0xebc>
   15358:	str	r2, [sp, #8]
   1535c:	ldr	r2, [pc, #1084]	; 157a0 <main@@Base+0xec0>
   15360:	mov	r3, r4
   15364:	str	r4, [sp, #4]
   15368:	str	r4, [sp]
   1536c:	add	r2, pc, r2
   15370:	add	r1, pc, r1
   15374:	orr	r5, r5, r0
   15378:	mov	r0, r6
   1537c:	bl	24fa0 <test_json@@Base>
   15380:	ldr	r2, [pc, #1052]	; 157a4 <main@@Base+0xec4>
   15384:	ldr	r1, [pc, #1052]	; 157a8 <main@@Base+0xec8>
   15388:	str	r2, [sp, #8]
   1538c:	ldr	r2, [pc, #1048]	; 157ac <main@@Base+0xecc>
   15390:	mov	r3, r4
   15394:	str	r4, [sp, #4]
   15398:	str	r4, [sp]
   1539c:	add	r2, pc, r2
   153a0:	add	r1, pc, r1
   153a4:	orr	r5, r5, r0
   153a8:	mov	r0, r6
   153ac:	bl	24fa0 <test_json@@Base>
   153b0:	ldr	r1, [pc, #1016]	; 157b0 <main@@Base+0xed0>
   153b4:	mov	r3, r4
   153b8:	str	r1, [sp, #8]
   153bc:	ldr	r1, [pc, #1008]	; 157b4 <main@@Base+0xed4>
   153c0:	mov	r2, r8
   153c4:	str	r4, [sp, #4]
   153c8:	str	r4, [sp]
   153cc:	add	r1, pc, r1
   153d0:	orr	r5, r5, r0
   153d4:	mov	r0, r6
   153d8:	bl	24fa0 <test_json@@Base>
   153dc:	ldr	r1, [pc, #980]	; 157b8 <main@@Base+0xed8>
   153e0:	mov	r2, r8
   153e4:	str	r1, [sp, #8]
   153e8:	ldr	r1, [pc, #972]	; 157bc <main@@Base+0xedc>
   153ec:	mov	r3, r4
   153f0:	str	r4, [sp, #4]
   153f4:	str	r4, [sp]
   153f8:	add	r1, pc, r1
   153fc:	orr	r5, r5, r0
   15400:	mov	r0, r6
   15404:	bl	24fa0 <test_json@@Base>
   15408:	ldr	r2, [pc, #944]	; 157c0 <main@@Base+0xee0>
   1540c:	ldr	r1, [pc, #944]	; 157c4 <main@@Base+0xee4>
   15410:	str	r2, [sp, #8]
   15414:	ldr	r2, [pc, #940]	; 157c8 <main@@Base+0xee8>
   15418:	mov	r3, r4
   1541c:	str	r4, [sp, #4]
   15420:	str	r4, [sp]
   15424:	add	r2, pc, r2
   15428:	add	r1, pc, r1
   1542c:	orr	r5, r5, r0
   15430:	mov	r0, r6
   15434:	bl	24fa0 <test_json@@Base>
   15438:	ldr	r2, [pc, #908]	; 157cc <main@@Base+0xeec>
   1543c:	ldr	r1, [pc, #908]	; 157d0 <main@@Base+0xef0>
   15440:	str	r2, [sp, #8]
   15444:	ldr	r2, [pc, #904]	; 157d4 <main@@Base+0xef4>
   15448:	mov	r3, r4
   1544c:	str	r4, [sp, #4]
   15450:	str	r4, [sp]
   15454:	add	r2, pc, r2
   15458:	add	r1, pc, r1
   1545c:	orr	r5, r5, r0
   15460:	mov	r0, r6
   15464:	bl	24fa0 <test_json@@Base>
   15468:	mov	r2, #776	; 0x308
   1546c:	str	r2, [sp, #8]
   15470:	ldr	r1, [pc, #864]	; 157d8 <main@@Base+0xef8>
   15474:	ldr	r2, [pc, #864]	; 157dc <main@@Base+0xefc>
   15478:	mov	r3, r4
   1547c:	str	r4, [sp, #4]
   15480:	str	r4, [sp]
   15484:	add	r2, pc, r2
   15488:	add	r1, pc, r1
   1548c:	orr	r5, r5, r0
   15490:	mov	r0, r6
   15494:	bl	24fa0 <test_json@@Base>
   15498:	ldr	r1, [pc, #832]	; 157e0 <main@@Base+0xf00>
   1549c:	mov	r2, r7
   154a0:	str	r1, [sp, #8]
   154a4:	ldr	r1, [pc, #824]	; 157e4 <main@@Base+0xf04>
   154a8:	mov	r3, r4
   154ac:	str	r4, [sp, #4]
   154b0:	str	r4, [sp]
   154b4:	add	r1, pc, r1
   154b8:	orr	r5, r5, r0
   154bc:	mov	r0, r6
   154c0:	bl	24fa0 <test_json@@Base>
   154c4:	ldr	r2, [pc, #796]	; 157e8 <main@@Base+0xf08>
   154c8:	ldr	r1, [pc, #796]	; 157ec <main@@Base+0xf0c>
   154cc:	str	r2, [sp, #8]
   154d0:	ldr	r2, [pc, #792]	; 157f0 <main@@Base+0xf10>
   154d4:	mov	r3, r4
   154d8:	str	r4, [sp, #4]
   154dc:	str	r4, [sp]
   154e0:	add	r2, pc, r2
   154e4:	add	r1, pc, r1
   154e8:	orr	r5, r5, r0
   154ec:	mov	r0, r6
   154f0:	bl	24fa0 <test_json@@Base>
   154f4:	ldr	r2, [pc, #760]	; 157f4 <main@@Base+0xf14>
   154f8:	ldr	r1, [pc, #760]	; 157f8 <main@@Base+0xf18>
   154fc:	str	r2, [sp, #8]
   15500:	ldr	r2, [pc, #756]	; 157fc <main@@Base+0xf1c>
   15504:	mov	r3, r4
   15508:	str	r4, [sp, #4]
   1550c:	str	r4, [sp]
   15510:	add	r2, pc, r2
   15514:	add	r1, pc, r1
   15518:	orr	r5, r5, r0
   1551c:	mov	r0, r6
   15520:	bl	24fa0 <test_json@@Base>
   15524:	mov	r2, #796	; 0x31c
   15528:	str	r2, [sp, #8]
   1552c:	ldr	r1, [pc, #716]	; 15800 <main@@Base+0xf20>
   15530:	ldr	r2, [pc, #716]	; 15804 <main@@Base+0xf24>
   15534:	mov	r3, r4
   15538:	str	r4, [sp, #4]
   1553c:	str	r4, [sp]
   15540:	add	r2, pc, r2
   15544:	add	r1, pc, r1
   15548:	orr	r5, r5, r0
   1554c:	mov	r0, r6
   15550:	bl	24fa0 <test_json@@Base>
   15554:	ldr	r2, [pc, #684]	; 15808 <main@@Base+0xf28>
   15558:	ldr	r1, [pc, #684]	; 1580c <main@@Base+0xf2c>
   1555c:	str	r2, [sp, #8]
   15560:	ldr	r2, [pc, #680]	; 15810 <main@@Base+0xf30>
   15564:	mov	r3, r4
   15568:	str	r4, [sp, #4]
   1556c:	str	r4, [sp]
   15570:	add	r2, pc, r2
   15574:	add	r1, pc, r1
   15578:	orr	r5, r5, r0
   1557c:	mov	r0, r6
   15580:	bl	24fa0 <test_json@@Base>
   15584:	ldr	r2, [pc, #648]	; 15814 <main@@Base+0xf34>
   15588:	ldr	r1, [pc, #648]	; 15818 <main@@Base+0xf38>
   1558c:	str	r2, [sp, #8]
   15590:	ldr	r2, [pc, #644]	; 1581c <main@@Base+0xf3c>
   15594:	mov	r3, r4
   15598:	str	r4, [sp, #4]
   1559c:	str	r4, [sp]
   155a0:	add	r2, pc, r2
   155a4:	add	r1, pc, r1
   155a8:	orr	r5, r5, r0
   155ac:	mov	r0, r6
   155b0:	bl	24fa0 <test_json@@Base>
   155b4:	orrs	r3, r5, r0
   155b8:	mvnne	r0, #0
   155bc:	moveq	r0, r4
   155c0:	add	sp, sp, #52	; 0x34
   155c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155c8:	andeq	r9, r2, ip, asr sp
   155cc:	andeq	r0, r4, r8, ror #11
   155d0:	andeq	fp, r2, ip, lsl pc
   155d4:	andeq	fp, r2, r4, ror #30
   155d8:	andeq	fp, r2, r4, lsr #31
   155dc:	andeq	r0, r0, sp, lsl #4
   155e0:			; <UNDEFINED> instruction: 0x0002beb4
   155e4:	andeq	fp, r2, r4, asr #29
   155e8:	andeq	r0, r0, r3, lsl r2
   155ec:	andeq	fp, r2, r4, ror #29
   155f0:	andeq	r0, r0, r6, lsl r2
   155f4:	andeq	fp, r2, ip, lsl #30
   155f8:	andeq	r0, r0, r9, lsl r2
   155fc:	andeq	fp, r2, r4, lsl pc
   15600:	andeq	fp, r2, r4, lsr #30
   15604:	andeq	r0, r0, pc, lsl r2
   15608:	andeq	fp, r2, r0, lsr #30
   1560c:	muleq	r2, ip, r0
   15610:	andeq	r0, r0, r3, lsr #4
   15614:	andeq	fp, r2, r8, lsl pc
   15618:	andeq	r0, r0, r7, lsr #4
   1561c:	andeq	r9, r2, ip, lsr #22
   15620:	andeq	r0, r0, fp, lsr #4
   15624:	andeq	fp, r2, r8, ror #29
   15628:	andeq	r0, r0, lr, lsr #4
   1562c:	ldrdeq	fp, [r2], -r4
   15630:	andeq	r0, r0, r1, lsr r2
   15634:	andeq	fp, r2, ip, asr #29
   15638:	andeq	fp, r2, r4, asr #29
   1563c:	andeq	r0, r0, r7, lsr r2
   15640:	andeq	fp, r2, r8, asr #29
   15644:	andeq	r0, r0, sl, lsr r2
   15648:	ldrdeq	fp, [r2], -r4
   1564c:	andeq	r0, r0, sp, lsr r2
   15650:	andeq	fp, r2, r8, asr #29
   15654:	andeq	r0, r0, r1, asr #4
   15658:	andeq	fp, r2, r0, asr #29
   1565c:	andeq	r0, r0, r5, asr #4
   15660:	andeq	r9, r2, ip, asr ip
   15664:	andeq	r0, r0, r9, asr #4
   15668:			; <UNDEFINED> instruction: 0x0002beb4
   1566c:	andeq	r0, r0, pc, asr #4
   15670:			; <UNDEFINED> instruction: 0x0002beb0
   15674:	andeq	r0, r0, r2, asr r2
   15678:	andeq	fp, r2, ip, lsr #29
   1567c:	andeq	ip, r2, r8, ror #1
   15680:	andeq	r0, r0, r5, asr r2
   15684:	andeq	fp, r2, r0, lsr #29
   15688:	andeq	r0, r0, r9, asr r2
   1568c:	andeq	fp, r2, r4, lsr #29
   15690:	muleq	r2, ip, lr
   15694:	andeq	ip, r2, r4, ror r0
   15698:	andeq	r0, r0, pc, asr r2
   1569c:	muleq	r2, r4, lr
   156a0:	andeq	fp, r2, r8, lsr #29
   156a4:	andeq	r0, r0, r2, ror #4
   156a8:	muleq	r2, ip, lr
   156ac:	andeq	r0, r0, r5, ror #4
   156b0:	andeq	fp, r2, r0, lsr #29
   156b4:	andeq	fp, r2, ip, lsr #29
   156b8:	andeq	fp, r2, ip, lsr #29
   156bc:			; <UNDEFINED> instruction: 0x0002beb8
   156c0:	andeq	r0, r0, fp, ror #4
   156c4:			; <UNDEFINED> instruction: 0x0002beb8
   156c8:	andeq	fp, r2, r4, asr #29
   156cc:	andeq	r0, r0, lr, ror #4
   156d0:			; <UNDEFINED> instruction: 0x0002beb8
   156d4:	andeq	r0, r0, r1, ror r2
   156d8:			; <UNDEFINED> instruction: 0x0002beb8
   156dc:	andeq	r0, r0, r7, ror r2
   156e0:	andeq	fp, r2, r4, ror #29
   156e4:	andeq	r0, r0, sl, ror r2
   156e8:	andeq	fp, r2, r0, lsl #30
   156ec:	andeq	fp, r2, r8, asr #30
   156f0:	andeq	r0, r0, lr, ror r2
   156f4:	andeq	fp, r2, r8, ror #30
   156f8:			; <UNDEFINED> instruction: 0x0002bfb4
   156fc:	andeq	r0, r0, r2, lsl #5
   15700:	andeq	fp, r2, ip, ror #31
   15704:	andeq	r0, r0, r6, lsl #5
   15708:	andeq	ip, r2, r0, lsr r0
   1570c:	andeq	r0, r0, r9, lsl #5
   15710:	andeq	ip, r2, r0, lsr r0
   15714:	andeq	r0, r0, sp, lsl #5
   15718:	andeq	ip, r2, ip, lsr #32
   1571c:	andeq	ip, r2, r0, lsr #32
   15720:	muleq	r0, r3, r2
   15724:	andeq	ip, r2, r4, lsl r0
   15728:	muleq	r0, r6, r2
   1572c:	andeq	ip, r2, r8
   15730:	andeq	ip, r2, r0, asr #4
   15734:	muleq	r0, r9, r2
   15738:	strdeq	fp, [r2], -r4
   1573c:	andeq	fp, r2, r8, ror #31
   15740:	muleq	r0, pc, r2	; <UNPREDICTABLE>
   15744:	ldrdeq	fp, [r2], -ip
   15748:	andeq	r0, r0, r2, lsr #5
   1574c:	ldrdeq	fp, [r2], -r0
   15750:	andeq	r0, r0, r5, lsr #5
   15754:	andeq	fp, r2, ip, asr #31
   15758:	strdeq	fp, [r2], -r8
   1575c:	andeq	r0, r0, fp, lsr #5
   15760:	ldrdeq	ip, [r2], -r4
   15764:	andeq	r0, r0, lr, lsr #5
   15768:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   1576c:			; <UNDEFINED> instruction: 0x000002b2
   15770:			; <UNDEFINED> instruction: 0x0002bfb4
   15774:			; <UNDEFINED> instruction: 0x000002b6
   15778:	ldrdeq	fp, [r2], -r4
   1577c:			; <UNDEFINED> instruction: 0x000002ba
   15780:	andeq	ip, r2, r8
   15784:			; <UNDEFINED> instruction: 0x000002bd
   15788:	andeq	ip, r2, r4
   1578c:	andeq	r0, r0, r7, asr #5
   15790:	andeq	ip, r2, ip, asr r0
   15794:	muleq	r2, r0, r0
   15798:	ldrdeq	r0, [r0], -fp
   1579c:	andeq	ip, r2, r0, lsl #2
   157a0:	ldrdeq	ip, [r2], -r4
   157a4:	ldrdeq	r0, [r0], -lr
   157a8:	andeq	ip, r2, r4, lsr #2
   157ac:	andeq	ip, r2, r4, lsl r1
   157b0:	andeq	r0, r0, r2, ror #5
   157b4:	andeq	ip, r2, r8, asr r1
   157b8:	andeq	r0, r0, lr, ror #5
   157bc:	andeq	ip, r2, r4, ror r1
   157c0:	strdeq	r0, [r0], -lr
   157c4:	andeq	ip, r2, r8, lsl #4
   157c8:	andeq	ip, r2, r8, ror #3
   157cc:	andeq	r0, r0, r2, lsl #6
   157d0:	andeq	ip, r2, ip, lsr #4
   157d4:	andeq	ip, r2, r4, lsl #4
   157d8:	muleq	r2, ip, r2
   157dc:	andeq	ip, r2, r0, lsr r2
   157e0:	andeq	r0, r0, sp, lsl #6
   157e4:	andeq	ip, r2, ip, ror #5
   157e8:	andeq	r0, r0, r2, lsl r3
   157ec:	andeq	ip, r2, r4, lsr #7
   157f0:	andeq	ip, r2, r8, lsr r3
   157f4:	andeq	r0, r0, r7, lsl r3
   157f8:	andeq	ip, r2, r0, ror r4
   157fc:	strdeq	ip, [r2], -r4
   15800:	andeq	ip, r2, ip, lsr r5
   15804:	ldrdeq	ip, [r2], -r0
   15808:	andeq	r0, r0, r1, lsr #6
   1580c:	andeq	ip, r2, r8, lsl #12
   15810:	andeq	ip, r2, ip, lsl #11
   15814:	andeq	r0, r0, r6, lsr #6
   15818:	andeq	ip, r2, r8, ror #13
   1581c:	andeq	ip, r2, r8, ror #12

00015820 <_start@@Base>:
   15820:	mov	fp, #0
   15824:	mov	lr, #0
   15828:	pop	{r1}		; (ldr r1, [sp], #4)
   1582c:	mov	r2, sp
   15830:	push	{r2}		; (str r2, [sp, #-4]!)
   15834:	push	{r0}		; (str r0, [sp, #-4]!)
   15838:	ldr	ip, [pc, #16]	; 15850 <_start@@Base+0x30>
   1583c:	push	{ip}		; (str ip, [sp, #-4]!)
   15840:	ldr	r0, [pc, #12]	; 15854 <_start@@Base+0x34>
   15844:	ldr	r3, [pc, #12]	; 15858 <_start@@Base+0x38>
   15848:	bl	14580 <__libc_start_main@plt>
   1584c:	bl	14604 <abort@plt>
   15850:	andeq	sp, r3, r0, ror pc
   15854:	andeq	r4, r1, r0, ror #17
   15858:	andeq	sp, r3, r0, lsl pc
   1585c:	ldr	r3, [pc, #20]	; 15878 <_start@@Base+0x58>
   15860:	ldr	r2, [pc, #20]	; 1587c <_start@@Base+0x5c>
   15864:	add	r3, pc, r3
   15868:	ldr	r2, [r3, r2]
   1586c:	cmp	r2, #0
   15870:	bxeq	lr
   15874:	b	1458c <__gmon_start__@plt>
   15878:	muleq	r3, r4, r7
   1587c:	andeq	r0, r0, ip, rrx
   15880:	ldr	r3, [pc, #28]	; 158a4 <_start@@Base+0x84>
   15884:	ldr	r0, [pc, #28]	; 158a8 <_start@@Base+0x88>
   15888:	sub	r3, r3, r0
   1588c:	cmp	r3, #6
   15890:	bxls	lr
   15894:	ldr	r3, [pc, #16]	; 158ac <_start@@Base+0x8c>
   15898:	cmp	r3, #0
   1589c:	bxeq	lr
   158a0:	bx	r3
   158a4:	andeq	r5, r5, fp, asr #7
   158a8:	andeq	r5, r5, r8, asr #7
   158ac:	andeq	r0, r0, r0
   158b0:	ldr	r1, [pc, #36]	; 158dc <_start@@Base+0xbc>
   158b4:	ldr	r0, [pc, #36]	; 158e0 <_start@@Base+0xc0>
   158b8:	sub	r1, r1, r0
   158bc:	asr	r1, r1, #2
   158c0:	add	r1, r1, r1, lsr #31
   158c4:	asrs	r1, r1, #1
   158c8:	bxeq	lr
   158cc:	ldr	r3, [pc, #16]	; 158e4 <_start@@Base+0xc4>
   158d0:	cmp	r3, #0
   158d4:	bxeq	lr
   158d8:	bx	r3
   158dc:	andeq	r5, r5, r8, asr #7
   158e0:	andeq	r5, r5, r8, asr #7
   158e4:	andeq	r0, r0, r0
   158e8:	push	{r4, lr}
   158ec:	ldr	r4, [pc, #24]	; 1590c <_start@@Base+0xec>
   158f0:	ldrb	r3, [r4]
   158f4:	cmp	r3, #0
   158f8:	popne	{r4, pc}
   158fc:	bl	15880 <_start@@Base+0x60>
   15900:	mov	r3, #1
   15904:	strb	r3, [r4]
   15908:	pop	{r4, pc}
   1590c:	andeq	r5, r5, r8, asr #7
   15910:	ldr	r0, [pc, #40]	; 15940 <_start@@Base+0x120>
   15914:	ldr	r3, [r0]
   15918:	cmp	r3, #0
   1591c:	bne	15924 <_start@@Base+0x104>
   15920:	b	158b0 <_start@@Base+0x90>
   15924:	ldr	r3, [pc, #24]	; 15944 <_start@@Base+0x124>
   15928:	cmp	r3, #0
   1592c:	beq	15920 <_start@@Base+0x100>
   15930:	push	{r4, lr}
   15934:	blx	r3
   15938:	pop	{r4, lr}
   1593c:	b	158b0 <_start@@Base+0x90>
   15940:	andeq	r4, r5, r4, ror #29
   15944:	andeq	r0, r0, r0
   15948:	sub	r1, r1, r0
   1594c:	cmp	r1, #8
   15950:	push	{r4, r5, r6, r7}
   15954:	bls	159f0 <_start@@Base+0x1d0>
   15958:	ldrb	r4, [r0, #7]
   1595c:	mov	r5, #0
   15960:	ldrb	r6, [r0, #6]
   15964:	lsr	r3, r6, #24
   15968:	lsl	r2, r6, #8
   1596c:	orr	r4, r4, r2
   15970:	orr	r5, r5, r3
   15974:	ldrb	r6, [r0, #5]
   15978:	lsr	r3, r6, #16
   1597c:	lsl	r2, r6, #16
   15980:	orr	r4, r4, r2
   15984:	orr	r5, r5, r3
   15988:	ldrb	r6, [r0, #4]
   1598c:	lsr	r3, r6, #8
   15990:	lsl	r2, r6, #24
   15994:	orr	r4, r4, r2
   15998:	orr	r5, r5, r3
   1599c:	ldrb	r3, [r0, #3]
   159a0:	mov	r2, #0
   159a4:	orr	r4, r4, r2
   159a8:	orr	r5, r5, r3
   159ac:	ldrb	r6, [r0, #2]
   159b0:	mov	r2, #0
   159b4:	orr	r4, r4, r2
   159b8:	lsl	r3, r6, #8
   159bc:	orr	r5, r5, r3
   159c0:	ldrb	r6, [r0, #1]
   159c4:	mov	r2, #0
   159c8:	orr	r2, r2, r4
   159cc:	lsl	r3, r6, #16
   159d0:	orr	r3, r3, r5
   159d4:	ldrb	r4, [r0]
   159d8:	mov	r0, #0
   159dc:	orr	r0, r0, r2
   159e0:	lsl	r1, r4, #24
   159e4:	orr	r1, r1, r3
   159e8:	pop	{r4, r5, r6, r7}
   159ec:	bx	lr
   159f0:	sub	r1, r1, #1
   159f4:	cmp	r1, #7
   159f8:	addls	pc, pc, r1, lsl #2
   159fc:	b	15a74 <_start@@Base+0x254>
   15a00:	b	15a2c <_start@@Base+0x20c>
   15a04:	b	15a38 <_start@@Base+0x218>
   15a08:	b	15a44 <_start@@Base+0x224>
   15a0c:	b	15a50 <_start@@Base+0x230>
   15a10:	b	15a5c <_start@@Base+0x23c>
   15a14:	b	15a68 <_start@@Base+0x248>
   15a18:	b	15a20 <_start@@Base+0x200>
   15a1c:	b	15958 <_start@@Base+0x138>
   15a20:	mov	r4, #0
   15a24:	mov	r5, #0
   15a28:	b	15960 <_start@@Base+0x140>
   15a2c:	mov	r2, #0
   15a30:	mov	r3, #0
   15a34:	b	159d4 <_start@@Base+0x1b4>
   15a38:	mov	r4, #0
   15a3c:	mov	r5, #0
   15a40:	b	159c0 <_start@@Base+0x1a0>
   15a44:	mov	r4, #0
   15a48:	mov	r5, #0
   15a4c:	b	159ac <_start@@Base+0x18c>
   15a50:	mov	r4, #0
   15a54:	mov	r5, #0
   15a58:	b	1599c <_start@@Base+0x17c>
   15a5c:	mov	r4, #0
   15a60:	mov	r5, #0
   15a64:	b	15988 <_start@@Base+0x168>
   15a68:	mov	r4, #0
   15a6c:	mov	r5, #0
   15a70:	b	15974 <_start@@Base+0x154>
   15a74:	mov	r0, #0
   15a78:	mov	r1, #0
   15a7c:	b	159e8 <_start@@Base+0x1c8>
   15a80:	cmp	r0, #4
   15a84:	movhi	r0, #0
   15a88:	movls	r0, #1
   15a8c:	bx	lr
   15a90:	cmp	r0, #11
   15a94:	bhi	15ab8 <_start@@Base+0x298>
   15a98:	cmp	r0, #8
   15a9c:	bcs	15ac0 <_start@@Base+0x2a0>
   15aa0:	cmp	r0, #0
   15aa4:	beq	15ac0 <_start@@Base+0x2a0>
   15aa8:	cmp	r0, #2
   15aac:	beq	15ac0 <_start@@Base+0x2a0>
   15ab0:	mov	r0, #0
   15ab4:	bx	lr
   15ab8:	cmp	r0, #255	; 0xff
   15abc:	bne	15ab0 <_start@@Base+0x290>
   15ac0:	mov	r0, #1
   15ac4:	bx	lr
   15ac8:	bx	lr
   15acc:	mov	r0, #0
   15ad0:	bx	lr
   15ad4:	mov	r3, #4
   15ad8:	mov	r2, r3
   15adc:	mov	r1, #0
   15ae0:	b	2ad1c <flatcc_verify_field@@Base>
   15ae4:	ldr	r3, [pc, #132]	; 15b70 <_start@@Base+0x350>
   15ae8:	push	{r4, r5, r6, lr}
   15aec:	add	r3, pc, r3
   15af0:	sub	sp, sp, #8
   15af4:	mov	r2, #21
   15af8:	mov	r4, r0
   15afc:	stm	sp, {r2, r3}
   15b00:	ldr	r3, [pc, #108]	; 15b74 <_start@@Base+0x354>
   15b04:	mov	r2, #0
   15b08:	add	r3, pc, r3
   15b0c:	mov	r5, r1
   15b10:	bl	3c210 <flatcc_json_printer_table_field@@Base>
   15b14:	ldr	r3, [pc, #92]	; 15b78 <_start@@Base+0x358>
   15b18:	mov	r6, #22
   15b1c:	add	r3, pc, r3
   15b20:	str	r3, [sp, #4]
   15b24:	ldr	r3, [pc, #80]	; 15b7c <_start@@Base+0x35c>
   15b28:	mov	r1, r5
   15b2c:	mov	r0, r4
   15b30:	str	r6, [sp]
   15b34:	add	r3, pc, r3
   15b38:	mov	r2, #1
   15b3c:	bl	3c210 <flatcc_json_printer_table_field@@Base>
   15b40:	ldr	r3, [pc, #56]	; 15b80 <_start@@Base+0x360>
   15b44:	str	r6, [sp]
   15b48:	add	r3, pc, r3
   15b4c:	str	r3, [sp, #4]
   15b50:	ldr	r3, [pc, #44]	; 15b84 <_start@@Base+0x364>
   15b54:	mov	r1, r5
   15b58:	mov	r0, r4
   15b5c:	add	r3, pc, r3
   15b60:	mov	r2, #2
   15b64:	bl	3c210 <flatcc_json_printer_table_field@@Base>
   15b68:	add	sp, sp, #8
   15b6c:	pop	{r4, r5, r6, pc}
   15b70:	muleq	r0, ip, r1
   15b74:	andeq	r8, r2, r4, ror r4
   15b78:	andeq	r0, r0, r0, lsl #2
   15b7c:	andeq	r8, r2, r0, ror #8
   15b80:	andeq	r0, r0, r8, rrx
   15b84:	andeq	r8, r2, r0, asr r4
   15b88:	push	{lr}		; (str lr, [sp, #-4]!)
   15b8c:	sub	sp, sp, #12
   15b90:	mov	r3, #19
   15b94:	str	r3, [sp]
   15b98:	ldr	r3, [pc, #20]	; 15bb4 <_start@@Base+0x394>
   15b9c:	mov	r2, #0
   15ba0:	str	r2, [sp, #4]
   15ba4:	add	r3, pc, r3
   15ba8:	bl	33bc8 <flatcc_json_printer_int32_field@@Base>
   15bac:	add	sp, sp, #12
   15bb0:	pop	{pc}		; (ldr pc, [sp], #4)
   15bb4:	andeq	r8, r2, r0, lsr #8
   15bb8:	push	{r4, r5, lr}
   15bbc:	sub	sp, sp, #20
   15bc0:	mov	r3, #15
   15bc4:	str	r3, [sp]
   15bc8:	mov	r4, #0
   15bcc:	mov	r5, #0
   15bd0:	ldr	r3, [pc, #68]	; 15c1c <_start@@Base+0x3fc>
   15bd4:	strd	r4, [sp, #8]
   15bd8:	add	r3, pc, r3
   15bdc:	mov	r2, #0
   15be0:	mov	r4, r0
   15be4:	mov	r5, r1
   15be8:	bl	33dcc <flatcc_json_printer_int64_field@@Base>
   15bec:	mov	r3, #21
   15bf0:	str	r3, [sp]
   15bf4:	ldr	r3, [pc, #36]	; 15c20 <_start@@Base+0x400>
   15bf8:	mov	r2, #0
   15bfc:	str	r2, [sp, #4]
   15c00:	mov	r1, r5
   15c04:	mov	r0, r4
   15c08:	add	r3, pc, r3
   15c0c:	mov	r2, #1
   15c10:	bl	333e8 <flatcc_json_printer_uint32_field@@Base>
   15c14:	add	sp, sp, #20
   15c18:	pop	{r4, r5, pc}
   15c1c:	andeq	r8, r2, r0, lsl #8
   15c20:	andeq	r8, r2, r0, ror #7
   15c24:	push	{r4, r5, lr}
   15c28:	sub	sp, sp, #20
   15c2c:	mov	r3, #15
   15c30:	str	r3, [sp]
   15c34:	mov	r4, #0
   15c38:	mov	r5, #0
   15c3c:	ldr	r3, [pc, #68]	; 15c88 <_start@@Base+0x468>
   15c40:	strd	r4, [sp, #8]
   15c44:	add	r3, pc, r3
   15c48:	mov	r2, #0
   15c4c:	mov	r4, r0
   15c50:	mov	r5, r1
   15c54:	bl	33dcc <flatcc_json_printer_int64_field@@Base>
   15c58:	mov	r3, #16
   15c5c:	str	r3, [sp]
   15c60:	ldr	r3, [pc, #36]	; 15c8c <_start@@Base+0x46c>
   15c64:	mov	r2, #0
   15c68:	str	r2, [sp, #4]
   15c6c:	mov	r1, r5
   15c70:	mov	r0, r4
   15c74:	add	r3, pc, r3
   15c78:	mov	r2, #1
   15c7c:	bl	333e8 <flatcc_json_printer_uint32_field@@Base>
   15c80:	add	sp, sp, #20
   15c84:	pop	{r4, r5, pc}
   15c88:	muleq	r2, r4, r3
   15c8c:	andeq	r8, r2, ip, lsl #7
   15c90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c94:	sub	sp, sp, #20
   15c98:	ldr	r3, [pc, #288]	; 15dc0 <_start@@Base+0x5a0>
   15c9c:	mov	r7, #4
   15ca0:	mov	r2, #0
   15ca4:	str	r7, [sp]
   15ca8:	add	r3, pc, r3
   15cac:	mov	r4, r0
   15cb0:	mov	r5, r1
   15cb4:	mov	fp, r2
   15cb8:	mov	sl, #9
   15cbc:	bl	32b2c <flatcc_json_printer_string_field@@Base>
   15cc0:	ldr	r3, [pc, #252]	; 15dc4 <_start@@Base+0x5a4>
   15cc4:	mov	r1, r5
   15cc8:	mov	r0, r4
   15ccc:	stm	sp, {sl, fp}
   15cd0:	add	r3, pc, r3
   15cd4:	mov	r2, #1
   15cd8:	bl	333e8 <flatcc_json_printer_uint32_field@@Base>
   15cdc:	ldr	r3, [pc, #228]	; 15dc8 <_start@@Base+0x5a8>
   15ce0:	mov	r1, r5
   15ce4:	mov	r0, r4
   15ce8:	str	r7, [sp]
   15cec:	add	r3, pc, r3
   15cf0:	mov	r2, #2
   15cf4:	bl	32b2c <flatcc_json_printer_string_field@@Base>
   15cf8:	mov	r8, #0
   15cfc:	mov	r9, #0
   15d00:	ldr	r3, [pc, #196]	; 15dcc <_start@@Base+0x5ac>
   15d04:	mov	r6, #8
   15d08:	mov	r1, r5
   15d0c:	mov	r0, r4
   15d10:	strd	r8, [sp, #8]
   15d14:	str	r6, [sp]
   15d18:	add	r3, pc, r3
   15d1c:	mov	r2, #3
   15d20:	bl	33dcc <flatcc_json_printer_int64_field@@Base>
   15d24:	ldr	r3, [pc, #164]	; 15dd0 <_start@@Base+0x5b0>
   15d28:	mov	r2, r7
   15d2c:	mov	r1, r5
   15d30:	mov	r0, r4
   15d34:	str	r7, [sp]
   15d38:	add	r3, pc, r3
   15d3c:	bl	32b2c <flatcc_json_printer_string_field@@Base>
   15d40:	ldr	r3, [pc, #140]	; 15dd4 <_start@@Base+0x5b4>
   15d44:	mov	r1, r5
   15d48:	mov	r0, r4
   15d4c:	strd	r8, [sp, #8]
   15d50:	str	r6, [sp]
   15d54:	add	r3, pc, r3
   15d58:	mov	r2, #5
   15d5c:	bl	33dcc <flatcc_json_printer_int64_field@@Base>
   15d60:	ldr	r3, [pc, #112]	; 15dd8 <_start@@Base+0x5b8>
   15d64:	mov	r1, r5
   15d68:	mov	r0, r4
   15d6c:	stm	sp, {sl, fp}
   15d70:	add	r3, pc, r3
   15d74:	mov	r2, #6
   15d78:	bl	333e8 <flatcc_json_printer_uint32_field@@Base>
   15d7c:	ldr	r3, [pc, #88]	; 15ddc <_start@@Base+0x5bc>
   15d80:	mov	r1, r5
   15d84:	mov	r0, r4
   15d88:	strd	r8, [sp, #8]
   15d8c:	str	r6, [sp]
   15d90:	add	r3, pc, r3
   15d94:	mov	r2, #7
   15d98:	bl	33dcc <flatcc_json_printer_int64_field@@Base>
   15d9c:	ldr	r3, [pc, #60]	; 15de0 <_start@@Base+0x5c0>
   15da0:	stm	sp, {sl, fp}
   15da4:	mov	r2, r6
   15da8:	mov	r1, r5
   15dac:	mov	r0, r4
   15db0:	add	r3, pc, r3
   15db4:	bl	333e8 <flatcc_json_printer_uint32_field@@Base>
   15db8:	add	sp, sp, #20
   15dbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dc0:	andeq	r8, r2, ip, ror #6
   15dc4:	andeq	r8, r2, ip, asr #6
   15dc8:	andeq	r8, r2, ip, lsr r3
   15dcc:	andeq	r8, r2, r8, lsl r3
   15dd0:	andeq	r8, r2, r4, lsl #6
   15dd4:	strdeq	r8, [r2], -r0
   15dd8:	andeq	r8, r2, r0, ror #5
   15ddc:	andeq	r8, r2, ip, asr #5
   15de0:			; <UNDEFINED> instruction: 0x000282b8
   15de4:	ldr	r3, [pc, #1264]	; 162dc <_start@@Base+0xabc>
   15de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dec:	sub	sp, sp, #28
   15df0:	add	r3, pc, r3
   15df4:	str	r3, [sp, #4]
   15df8:	ldr	r3, [pc, #1248]	; 162e0 <_start@@Base+0xac0>
   15dfc:	mov	r6, #3
   15e00:	str	r6, [sp]
   15e04:	add	r3, pc, r3
   15e08:	mov	r2, #0
   15e0c:	mov	r4, r0
   15e10:	mov	r5, r1
   15e14:	bl	3cb80 <flatcc_json_printer_struct_field@@Base>
   15e18:	mov	r3, #150	; 0x96
   15e1c:	str	r3, [sp, #4]
   15e20:	ldr	r3, [pc, #1212]	; 162e4 <_start@@Base+0xac4>
   15e24:	mov	r7, #4
   15e28:	mov	r1, r5
   15e2c:	mov	r0, r4
   15e30:	str	r7, [sp]
   15e34:	add	r3, pc, r3
   15e38:	mov	r2, #1
   15e3c:	bl	339c0 <flatcc_json_printer_int16_field@@Base>
   15e40:	mov	r2, #2
   15e44:	mov	r3, #100	; 0x64
   15e48:	mov	r1, r5
   15e4c:	stm	sp, {r2, r3}
   15e50:	ldr	r3, [pc, #1168]	; 162e8 <_start@@Base+0xac8>
   15e54:	mov	r0, r4
   15e58:	add	r3, pc, r3
   15e5c:	bl	339c0 <flatcc_json_printer_int16_field@@Base>
   15e60:	ldr	r3, [pc, #1156]	; 162ec <_start@@Base+0xacc>
   15e64:	mov	r2, r6
   15e68:	mov	r1, r5
   15e6c:	mov	r0, r4
   15e70:	str	r7, [sp]
   15e74:	add	r3, pc, r3
   15e78:	bl	32b2c <flatcc_json_printer_string_field@@Base>
   15e7c:	mov	r3, #9
   15e80:	str	r3, [sp]
   15e84:	ldr	r3, [pc, #1124]	; 162f0 <_start@@Base+0xad0>
   15e88:	mov	r1, r5
   15e8c:	mov	r0, r4
   15e90:	add	r3, pc, r3
   15e94:	mov	r2, #5
   15e98:	bl	3787c <flatcc_json_printer_uint8_vector_field@@Base>
   15e9c:	ldr	r3, [pc, #1104]	; 162f4 <_start@@Base+0xad4>
   15ea0:	mov	r8, #5
   15ea4:	add	r3, pc, r3
   15ea8:	mov	fp, #8
   15eac:	str	r3, [sp, #8]
   15eb0:	ldr	r3, [pc, #1088]	; 162f8 <_start@@Base+0xad8>
   15eb4:	mov	r1, r5
   15eb8:	mov	r0, r4
   15ebc:	stm	sp, {r8, fp}
   15ec0:	add	r3, pc, r3
   15ec4:	mov	r2, #6
   15ec8:	bl	34dd8 <flatcc_json_printer_int8_enum_field@@Base>
   15ecc:	ldr	ip, [pc, #1064]	; 162fc <_start@@Base+0xadc>
   15ed0:	ldr	r3, [pc, #1064]	; 16300 <_start@@Base+0xae0>
   15ed4:	add	ip, pc, ip
   15ed8:	add	r3, pc, r3
   15edc:	mov	r2, fp
   15ee0:	stmib	sp, {r3, ip}
   15ee4:	ldr	r3, [pc, #1048]	; 16304 <_start@@Base+0xae4>
   15ee8:	mov	r1, r5
   15eec:	mov	r0, r4
   15ef0:	str	r7, [sp]
   15ef4:	add	r3, pc, r3
   15ef8:	ldr	r9, [pc, #1032]	; 16308 <_start@@Base+0xae8>
   15efc:	bl	3c4bc <flatcc_json_printer_union_field@@Base>
   15f00:	ldr	r3, [pc, #1028]	; 1630c <_start@@Base+0xaec>
   15f04:	add	r9, pc, r9
   15f08:	mov	r1, r5
   15f0c:	mov	r0, r4
   15f10:	str	r9, [sp, #8]
   15f14:	str	r7, [sp, #4]
   15f18:	str	r8, [sp]
   15f1c:	mov	r2, #9
   15f20:	add	r3, pc, r3
   15f24:	str	r9, [sp, #20]
   15f28:	bl	3b314 <flatcc_json_printer_struct_vector_field@@Base>
   15f2c:	ldr	r3, [pc, #988]	; 16310 <_start@@Base+0xaf0>
   15f30:	mov	r6, #17
   15f34:	mov	r1, r5
   15f38:	mov	r0, r4
   15f3c:	str	r6, [sp]
   15f40:	add	r3, pc, r3
   15f44:	mov	r2, #10
   15f48:	ldr	sl, [pc, #964]	; 16314 <_start@@Base+0xaf4>
   15f4c:	bl	3b694 <flatcc_json_printer_string_vector_field@@Base>
   15f50:	ldr	r3, [pc, #960]	; 16318 <_start@@Base+0xaf8>
   15f54:	add	sl, pc, sl
   15f58:	mov	r1, r5
   15f5c:	mov	r0, r4
   15f60:	str	sl, [sp, #4]
   15f64:	str	r6, [sp]
   15f68:	add	r3, pc, r3
   15f6c:	mov	r2, #11
   15f70:	bl	3ba74 <flatcc_json_printer_table_vector_field@@Base>
   15f74:	ldr	r3, [pc, #928]	; 1631c <_start@@Base+0xafc>
   15f78:	stm	sp, {r8, sl}
   15f7c:	mov	r1, r5
   15f80:	mov	r0, r4
   15f84:	add	r3, pc, r3
   15f88:	mov	r2, #12
   15f8c:	bl	3c210 <flatcc_json_printer_table_field@@Base>
   15f90:	ldr	r3, [pc, #904]	; 16320 <_start@@Base+0xb00>
   15f94:	mov	r9, #0
   15f98:	mov	r2, #20
   15f9c:	str	sl, [sp, #8]
   15fa0:	mov	r1, r5
   15fa4:	mov	r0, r4
   15fa8:	str	r9, [sp, #4]
   15fac:	str	r2, [sp]
   15fb0:	add	r3, pc, r3
   15fb4:	mov	r2, #13
   15fb8:	bl	3d1c4 <flatcc_json_printer_table_as_nested_root@@Base>
   15fbc:	ldr	r3, [pc, #864]	; 16324 <_start@@Base+0xb04>
   15fc0:	mov	r2, #9
   15fc4:	add	r3, pc, r3
   15fc8:	str	r3, [sp, #4]
   15fcc:	ldr	r3, [pc, #852]	; 16328 <_start@@Base+0xb08>
   15fd0:	str	r2, [sp]
   15fd4:	mov	r1, r5
   15fd8:	mov	r0, r4
   15fdc:	add	r3, pc, r3
   15fe0:	mov	r2, #14
   15fe4:	bl	3c210 <flatcc_json_printer_table_field@@Base>
   15fe8:	mov	r3, #1
   15fec:	str	r3, [sp, #4]
   15ff0:	ldr	r3, [pc, #820]	; 1632c <_start@@Base+0xb0c>
   15ff4:	mov	r1, r5
   15ff8:	mov	r0, r4
   15ffc:	str	fp, [sp]
   16000:	add	r3, pc, r3
   16004:	mov	r2, #15
   16008:	bl	33fe8 <flatcc_json_printer_bool_field@@Base>
   1600c:	ldr	r3, [pc, #796]	; 16330 <_start@@Base+0xb10>
   16010:	mov	sl, #16
   16014:	str	r9, [sp, #4]
   16018:	mov	r1, r5
   1601c:	mov	r0, r4
   16020:	mov	r2, sl
   16024:	str	sl, [sp]
   16028:	add	r3, pc, r3
   1602c:	bl	33bc8 <flatcc_json_printer_int32_field@@Base>
   16030:	ldr	r3, [pc, #764]	; 16334 <_start@@Base+0xb14>
   16034:	str	r9, [sp, #4]
   16038:	mov	r2, r6
   1603c:	mov	r1, r5
   16040:	mov	r0, r4
   16044:	str	sl, [sp]
   16048:	add	r3, pc, r3
   1604c:	bl	333e8 <flatcc_json_printer_uint32_field@@Base>
   16050:	mov	r2, #0
   16054:	mov	r3, #0
   16058:	mov	r1, r5
   1605c:	strd	r2, [sp, #8]
   16060:	ldr	r3, [pc, #720]	; 16338 <_start@@Base+0xb18>
   16064:	mov	r0, r4
   16068:	str	sl, [sp]
   1606c:	add	r3, pc, r3
   16070:	mov	r2, #18
   16074:	bl	33dcc <flatcc_json_printer_int64_field@@Base>
   16078:	mov	r2, #0
   1607c:	mov	r3, #0
   16080:	mov	r1, r5
   16084:	strd	r2, [sp, #8]
   16088:	ldr	r3, [pc, #684]	; 1633c <_start@@Base+0xb1c>
   1608c:	mov	r0, r4
   16090:	str	sl, [sp]
   16094:	add	r3, pc, r3
   16098:	mov	r2, #19
   1609c:	bl	335cc <flatcc_json_printer_uint64_field@@Base>
   160a0:	ldr	r3, [pc, #664]	; 16340 <_start@@Base+0xb20>
   160a4:	stm	sp, {r6, r9}
   160a8:	mov	r1, r5
   160ac:	mov	r0, r4
   160b0:	mov	r2, #20
   160b4:	add	r3, pc, r3
   160b8:	bl	33bc8 <flatcc_json_printer_int32_field@@Base>
   160bc:	ldr	r3, [pc, #640]	; 16344 <_start@@Base+0xb24>
   160c0:	stm	sp, {r6, r9}
   160c4:	mov	r1, r5
   160c8:	mov	r0, r4
   160cc:	add	r3, pc, r3
   160d0:	mov	r2, #21
   160d4:	bl	333e8 <flatcc_json_printer_uint32_field@@Base>
   160d8:	mov	r2, #0
   160dc:	mov	r3, #0
   160e0:	mov	r1, r5
   160e4:	strd	r2, [sp, #8]
   160e8:	ldr	r3, [pc, #600]	; 16348 <_start@@Base+0xb28>
   160ec:	mov	r0, r4
   160f0:	str	r6, [sp]
   160f4:	add	r3, pc, r3
   160f8:	mov	r2, #22
   160fc:	bl	33dcc <flatcc_json_printer_int64_field@@Base>
   16100:	mov	r2, #0
   16104:	mov	r3, #0
   16108:	mov	r1, r5
   1610c:	strd	r2, [sp, #8]
   16110:	ldr	r3, [pc, #564]	; 1634c <_start@@Base+0xb2c>
   16114:	mov	r0, r4
   16118:	str	r6, [sp]
   1611c:	add	r3, pc, r3
   16120:	mov	r2, #23
   16124:	bl	335cc <flatcc_json_printer_uint64_field@@Base>
   16128:	ldr	r3, [pc, #544]	; 16350 <_start@@Base+0xb30>
   1612c:	mov	r1, r5
   16130:	mov	r0, r4
   16134:	str	sl, [sp]
   16138:	add	r3, pc, r3
   1613c:	mov	r2, #24
   16140:	bl	390bc <flatcc_json_printer_bool_vector_field@@Base>
   16144:	ldr	r3, [pc, #520]	; 16354 <_start@@Base+0xb34>
   16148:	mov	r1, r5
   1614c:	mov	r0, r4
   16150:	str	r8, [sp]
   16154:	vldr	s0, [pc, #372]	; 162d0 <_start@@Base+0xab0>
   16158:	add	r3, pc, r3
   1615c:	mov	r2, #25
   16160:	bl	341cc <flatcc_json_printer_float_field@@Base>
   16164:	ldr	r3, [pc, #492]	; 16358 <_start@@Base+0xb38>
   16168:	mov	r9, #6
   1616c:	mov	r1, r5
   16170:	mov	r0, r4
   16174:	str	r9, [sp]
   16178:	vldr	s0, [pc, #340]	; 162d4 <_start@@Base+0xab4>
   1617c:	add	r3, pc, r3
   16180:	mov	r2, #26
   16184:	bl	341cc <flatcc_json_printer_float_field@@Base>
   16188:	ldr	r3, [pc, #460]	; 1635c <_start@@Base+0xb3c>
   1618c:	vldr	s0, [pc, #324]	; 162d8 <_start@@Base+0xab8>
   16190:	mov	r1, r5
   16194:	mov	r0, r4
   16198:	str	r9, [sp]
   1619c:	add	r3, pc, r3
   161a0:	mov	r2, #27
   161a4:	bl	341cc <flatcc_json_printer_float_field@@Base>
   161a8:	mov	r3, #18
   161ac:	str	r3, [sp]
   161b0:	ldr	r3, [pc, #424]	; 16360 <_start@@Base+0xb40>
   161b4:	mov	r1, r5
   161b8:	mov	r0, r4
   161bc:	add	r3, pc, r3
   161c0:	mov	r2, #28
   161c4:	bl	3b694 <flatcc_json_printer_string_vector_field@@Base>
   161c8:	ldr	r3, [pc, #404]	; 16364 <_start@@Base+0xb44>
   161cc:	mov	r2, #23
   161d0:	add	r3, pc, r3
   161d4:	str	r3, [sp, #8]
   161d8:	ldr	r3, [pc, #392]	; 16368 <_start@@Base+0xb48>
   161dc:	mov	r1, r5
   161e0:	mov	r0, r4
   161e4:	str	r2, [sp]
   161e8:	str	fp, [sp, #4]
   161ec:	add	r3, pc, r3
   161f0:	mov	r2, #29
   161f4:	bl	3b314 <flatcc_json_printer_struct_vector_field@@Base>
   161f8:	ldr	r3, [pc, #364]	; 1636c <_start@@Base+0xb4c>
   161fc:	mov	r1, r5
   16200:	mov	r0, r4
   16204:	str	r7, [sp]
   16208:	add	r3, pc, r3
   1620c:	mov	r2, #30
   16210:	bl	3787c <flatcc_json_printer_uint8_vector_field@@Base>
   16214:	ldr	r3, [sp, #20]
   16218:	mov	r1, r5
   1621c:	str	r3, [sp, #8]
   16220:	ldr	r3, [pc, #328]	; 16370 <_start@@Base+0xb50>
   16224:	mov	r0, r4
   16228:	str	r7, [sp, #4]
   1622c:	str	r8, [sp]
   16230:	add	r3, pc, r3
   16234:	mov	r2, #31
   16238:	bl	3b314 <flatcc_json_printer_struct_vector_field@@Base>
   1623c:	mov	r3, #15
   16240:	str	r3, [sp]
   16244:	ldr	r3, [pc, #296]	; 16374 <_start@@Base+0xb54>
   16248:	mov	r1, r5
   1624c:	mov	r0, r4
   16250:	add	r3, pc, r3
   16254:	mov	r2, #32
   16258:	bl	38df4 <flatcc_json_printer_int64_vector_field@@Base>
   1625c:	ldr	r3, [pc, #276]	; 16378 <_start@@Base+0xb58>
   16260:	mov	r1, r5
   16264:	mov	r0, r4
   16268:	str	r6, [sp]
   1626c:	add	r3, pc, r3
   16270:	mov	r2, #33	; 0x21
   16274:	bl	39710 <flatcc_json_printer_double_vector_field@@Base>
   16278:	ldr	r3, [pc, #252]	; 1637c <_start@@Base+0xb5c>
   1627c:	mov	r2, #21
   16280:	add	r3, pc, r3
   16284:	mov	r1, r5
   16288:	stm	sp, {r2, r3}
   1628c:	ldr	r3, [pc, #236]	; 16380 <_start@@Base+0xb60>
   16290:	mov	r0, r4
   16294:	add	r3, pc, r3
   16298:	mov	r2, #34	; 0x22
   1629c:	bl	3c210 <flatcc_json_printer_table_field@@Base>
   162a0:	ldr	r3, [pc, #220]	; 16384 <_start@@Base+0xb64>
   162a4:	mov	r2, #10
   162a8:	add	r3, pc, r3
   162ac:	mov	r1, r5
   162b0:	stm	sp, {r2, r3}
   162b4:	ldr	r3, [pc, #204]	; 16388 <_start@@Base+0xb68>
   162b8:	mov	r0, r4
   162bc:	add	r3, pc, r3
   162c0:	mov	r2, #35	; 0x23
   162c4:	bl	3c210 <flatcc_json_printer_table_field@@Base>
   162c8:	add	sp, sp, #28
   162cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162d0:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   162d4:	submi	r0, r0, r0
   162d8:	andeq	r0, r0, r0
   162dc:			; <UNDEFINED> instruction: 0x00000cb8
   162e0:	andeq	r8, r2, r0, ror r2
   162e4:	andeq	r8, r2, r4, asr #4
   162e8:	andeq	r8, r2, r8, lsr #4
   162ec:	andeq	r8, r2, r0, lsl r2
   162f0:	strdeq	r8, [r2], -ip
   162f4:	andeq	r0, r0, r0, lsr fp
   162f8:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   162fc:	muleq	r0, ip, r6
   16300:	andeq	r2, r0, r8, asr #3
   16304:	andeq	r8, r2, ip, lsr #3
   16308:	andeq	r0, r0, r4, lsl #12
   1630c:	andeq	r8, r2, r8, lsl #3
   16310:	andeq	r8, r2, r0, ror r1
   16314:			; <UNDEFINED> instruction: 0xfffffe88
   16318:	andeq	r8, r2, ip, asr r1
   1631c:	andeq	r8, r2, r4, asr r1
   16320:	andeq	r8, r2, r0, lsr r1
   16324:			; <UNDEFINED> instruction: 0x000004b8
   16328:	andeq	r8, r2, ip, lsl r1
   1632c:	andeq	r8, r2, r4, lsl #2
   16330:	andeq	r8, r2, r8, ror #1
   16334:	ldrdeq	r8, [r2], -ip
   16338:	andeq	r8, r2, ip, asr #1
   1633c:	strheq	r8, [r2], -r8	; <UNPREDICTABLE>
   16340:	andeq	r8, r2, ip, lsr #1
   16344:	andeq	r8, r2, r8, lsr #1
   16348:	muleq	r2, r4, r0
   1634c:	andeq	r8, r2, r0, lsl #1
   16350:	andeq	r8, r2, r8, ror r0
   16354:	andeq	r8, r2, ip, rrx
   16358:	andeq	r8, r2, r0, asr r0
   1635c:	andeq	r8, r2, r8, lsr r0
   16360:	andeq	r8, r2, r0, lsr #32
   16364:	andeq	r0, r0, r0, asr #4
   16368:	andeq	r8, r2, r4
   1636c:	andeq	r8, r2, r0
   16370:	andeq	r7, r2, r0, ror #31
   16374:	andeq	r7, r2, r8, asr #31
   16378:			; <UNDEFINED> instruction: 0x00027fbc
   1637c:	strdeq	r1, [r0], -ip
   16380:	andeq	r7, r2, r8, lsr #31
   16384:	ldrdeq	r0, [r0], -ip
   16388:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   1638c:	push	{r4, r5, r6, lr}
   16390:	sub	sp, sp, #8
   16394:	mov	r3, #4
   16398:	str	r3, [sp]
   1639c:	ldr	r3, [pc, #104]	; 1640c <_start@@Base+0xbec>
   163a0:	mov	r4, #0
   163a4:	mov	r2, r4
   163a8:	str	r4, [sp, #4]
   163ac:	add	r3, pc, r3
   163b0:	mov	r5, r0
   163b4:	mov	r6, r1
   163b8:	bl	32ce0 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   163bc:	mov	r3, #7
   163c0:	str	r3, [sp]
   163c4:	ldr	r3, [pc, #68]	; 16410 <_start@@Base+0xbf0>
   163c8:	mov	r2, #1
   163cc:	mov	r1, r6
   163d0:	mov	r0, r5
   163d4:	str	r2, [sp, #4]
   163d8:	add	r3, pc, r3
   163dc:	bl	32ce0 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   163e0:	mov	r3, #6
   163e4:	str	r3, [sp]
   163e8:	ldr	r3, [pc, #36]	; 16414 <_start@@Base+0xbf4>
   163ec:	str	r4, [sp, #4]
   163f0:	mov	r1, r6
   163f4:	mov	r0, r5
   163f8:	add	r3, pc, r3
   163fc:	mov	r2, #2
   16400:	bl	32ce0 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   16404:	add	sp, sp, #8
   16408:	pop	{r4, r5, r6, pc}
   1640c:			; <UNDEFINED> instruction: 0x00027eb4
   16410:	muleq	r2, r0, lr
   16414:	andeq	r7, r2, r8, ror lr
   16418:	ldr	ip, [pc, #92]	; 1647c <_start@@Base+0xc5c>
   1641c:	push	{r4, r5, lr}
   16420:	sub	sp, sp, #12
   16424:	add	ip, pc, ip
   16428:	mov	r4, r1
   1642c:	mov	r3, #0
   16430:	mov	r1, #2
   16434:	mov	r2, r4
   16438:	str	ip, [sp]
   1643c:	str	r1, [sp, #4]
   16440:	mov	r1, r3
   16444:	mov	r5, r0
   16448:	bl	35b90 <flatcc_json_printer_uint32_struct_field@@Base>
   1644c:	ldr	r3, [pc, #44]	; 16480 <_start@@Base+0xc60>
   16450:	mov	r1, #8
   16454:	add	r3, pc, r3
   16458:	str	r3, [sp]
   1645c:	str	r1, [sp, #4]
   16460:	mov	r2, r4
   16464:	mov	r0, r5
   16468:	mov	r3, #4
   1646c:	mov	r1, #1
   16470:	bl	35b90 <flatcc_json_printer_uint32_struct_field@@Base>
   16474:	add	sp, sp, #12
   16478:	pop	{r4, r5, pc}
   1647c:	andeq	r7, r2, r4, asr lr
   16480:	andeq	r7, r2, r8, lsr #28
   16484:	push	{r4, r5, r6, r8, r9, lr}
   16488:	sub	sp, sp, #16
   1648c:	ldr	r3, [pc, #112]	; 16504 <_start@@Base+0xce4>
   16490:	mov	r6, #2
   16494:	str	r6, [sp]
   16498:	add	r3, pc, r3
   1649c:	mov	r2, #0
   164a0:	mov	r4, r0
   164a4:	mov	r5, r1
   164a8:	bl	32b2c <flatcc_json_printer_string_field@@Base>
   164ac:	mov	r3, #3
   164b0:	str	r3, [sp]
   164b4:	mov	r8, #0
   164b8:	mov	r9, #0
   164bc:	ldr	r3, [pc, #68]	; 16508 <_start@@Base+0xce8>
   164c0:	mov	r1, r5
   164c4:	mov	r0, r4
   164c8:	strd	r8, [sp, #8]
   164cc:	add	r3, pc, r3
   164d0:	mov	r2, #1
   164d4:	bl	33dcc <flatcc_json_printer_int64_field@@Base>
   164d8:	mov	ip, #0
   164dc:	mov	r3, #5
   164e0:	mov	r2, r6
   164e4:	stm	sp, {r3, ip}
   164e8:	ldr	r3, [pc, #28]	; 1650c <_start@@Base+0xcec>
   164ec:	mov	r1, r5
   164f0:	mov	r0, r4
   164f4:	add	r3, pc, r3
   164f8:	bl	33204 <flatcc_json_printer_uint16_field@@Base>
   164fc:	add	sp, sp, #16
   16500:	pop	{r4, r5, r6, r8, r9, pc}
   16504:	andeq	r7, r2, r0, ror #27
   16508:			; <UNDEFINED> instruction: 0x00027dbc
   1650c:	muleq	r2, r8, sp
   16510:	ldr	ip, [pc, #88]	; 16570 <_start@@Base+0xd50>
   16514:	push	{r4, r5, r6, lr}
   16518:	sub	sp, sp, #8
   1651c:	add	ip, pc, ip
   16520:	mov	r4, #1
   16524:	mov	r3, #0
   16528:	mov	r5, r1
   1652c:	mov	r2, r1
   16530:	str	ip, [sp]
   16534:	mov	r1, r3
   16538:	str	r4, [sp, #4]
   1653c:	mov	r6, r0
   16540:	bl	36008 <flatcc_json_printer_int16_struct_field@@Base>
   16544:	ldr	r3, [pc, #40]	; 16574 <_start@@Base+0xd54>
   16548:	str	r4, [sp, #4]
   1654c:	add	r3, pc, r3
   16550:	str	r3, [sp]
   16554:	mov	r2, r5
   16558:	mov	r1, r4
   1655c:	mov	r0, r6
   16560:	mov	r3, #2
   16564:	bl	35e74 <flatcc_json_printer_int8_struct_field@@Base>
   16568:	add	sp, sp, #8
   1656c:	pop	{r4, r5, r6, pc}
   16570:	andeq	r7, r2, r4, asr ip
   16574:	andeq	r7, r2, r8, asr #26
   16578:	ldrb	r3, [r1, #8]
   1657c:	sub	r3, r3, #1
   16580:	cmp	r3, #3
   16584:	addls	pc, pc, r3, lsl #2
   16588:	b	165cc <_start@@Base+0xdac>
   1658c:	b	165c0 <_start@@Base+0xda0>
   16590:	b	165b4 <_start@@Base+0xd94>
   16594:	b	165a8 <_start@@Base+0xd88>
   16598:	b	1659c <_start@@Base+0xd7c>
   1659c:	ldr	r2, [pc, #44]	; 165d0 <_start@@Base+0xdb0>
   165a0:	add	r2, pc, r2
   165a4:	b	3c78c <flatcc_json_printer_union_table@@Base>
   165a8:	ldr	r2, [pc, #36]	; 165d4 <_start@@Base+0xdb4>
   165ac:	add	r2, pc, r2
   165b0:	b	3c78c <flatcc_json_printer_union_table@@Base>
   165b4:	ldr	r2, [pc, #28]	; 165d8 <_start@@Base+0xdb8>
   165b8:	add	r2, pc, r2
   165bc:	b	3c78c <flatcc_json_printer_union_table@@Base>
   165c0:	ldr	r2, [pc, #20]	; 165dc <_start@@Base+0xdbc>
   165c4:	add	r2, pc, r2
   165c8:	b	3c78c <flatcc_json_printer_union_table@@Base>
   165cc:	bx	lr
   165d0:	andeq	r0, r0, r8, lsr r0
   165d4:			; <UNDEFINED> instruction: 0xfffff514
   165d8:	andeq	r0, r0, r8, ror #6
   165dc:			; <UNDEFINED> instruction: 0xfffff818
   165e0:	ldr	r3, [pc, #144]	; 16678 <_start@@Base+0xe58>
   165e4:	push	{r4, r5, lr}
   165e8:	add	r3, pc, r3
   165ec:	sub	sp, sp, #20
   165f0:	mov	r2, #6
   165f4:	mov	r4, r0
   165f8:	stm	sp, {r2, r3}
   165fc:	ldr	r3, [pc, #120]	; 1667c <_start@@Base+0xe5c>
   16600:	mov	r2, #0
   16604:	add	r3, pc, r3
   16608:	mov	r5, r1
   1660c:	bl	3c210 <flatcc_json_printer_table_field@@Base>
   16610:	ldr	r3, [pc, #104]	; 16680 <_start@@Base+0xe60>
   16614:	mov	r2, #5
   16618:	add	r3, pc, r3
   1661c:	mov	r1, r5
   16620:	stm	sp, {r2, r3}
   16624:	ldr	r3, [pc, #88]	; 16684 <_start@@Base+0xe64>
   16628:	mov	r0, r4
   1662c:	add	r3, pc, r3
   16630:	mov	r2, #1
   16634:	bl	3c210 <flatcc_json_printer_table_field@@Base>
   16638:	ldr	r3, [pc, #72]	; 16688 <_start@@Base+0xe68>
   1663c:	ldr	r2, [pc, #72]	; 1668c <_start@@Base+0xe6c>
   16640:	add	r3, pc, r3
   16644:	str	r3, [sp, #4]
   16648:	ldr	r3, [pc, #64]	; 16690 <_start@@Base+0xe70>
   1664c:	mov	ip, #7
   16650:	add	r2, pc, r2
   16654:	str	r2, [sp, #8]
   16658:	mov	r1, r5
   1665c:	mov	r0, r4
   16660:	str	ip, [sp]
   16664:	add	r3, pc, r3
   16668:	mov	r2, #3
   1666c:	bl	3bed8 <flatcc_json_printer_union_vector_field@@Base>
   16670:	add	sp, sp, #20
   16674:	pop	{r4, r5, pc}
   16678:			; <UNDEFINED> instruction: 0xfffff4f4
   1667c:	muleq	r2, r4, ip
   16680:	andeq	r0, r0, r4, ror r0
   16684:	andeq	r7, r2, r4, ror ip
   16688:	andeq	r1, r0, r0, ror #20
   1668c:			; <UNDEFINED> instruction: 0xffffff20
   16690:	andeq	r7, r2, r4, asr #24
   16694:	push	{r4, r5, r6, r7, r8, r9, lr}
   16698:	mov	r3, #14
   1669c:	ldr	r5, [pc, #188]	; 16760 <_start@@Base+0xf40>
   166a0:	ldr	r4, [pc, #188]	; 16764 <_start@@Base+0xf44>
   166a4:	sub	sp, sp, #20
   166a8:	add	r5, pc, r5
   166ac:	add	r4, pc, r4
   166b0:	mov	r2, #1
   166b4:	stm	sp, {r3, r4, r5}
   166b8:	mov	r6, r0
   166bc:	ldr	r3, [pc, #164]	; 16768 <_start@@Base+0xf48>
   166c0:	mov	r7, r1
   166c4:	add	r3, pc, r3
   166c8:	bl	3c4bc <flatcc_json_printer_union_field@@Base>
   166cc:	ldr	r3, [pc, #152]	; 1676c <_start@@Base+0xf4c>
   166d0:	mov	r9, #10
   166d4:	mov	r1, r7
   166d8:	mov	r0, r6
   166dc:	stmib	sp, {r4, r5}
   166e0:	str	r9, [sp]
   166e4:	add	r3, pc, r3
   166e8:	mov	r2, #3
   166ec:	bl	3c4bc <flatcc_json_printer_union_field@@Base>
   166f0:	ldr	r3, [pc, #120]	; 16770 <_start@@Base+0xf50>
   166f4:	mov	r8, #9
   166f8:	mov	r1, r7
   166fc:	mov	r0, r6
   16700:	stmib	sp, {r4, r5}
   16704:	str	r8, [sp]
   16708:	add	r3, pc, r3
   1670c:	mov	r2, #5
   16710:	bl	3c4bc <flatcc_json_printer_union_field@@Base>
   16714:	mov	r3, #5
   16718:	str	r3, [sp]
   1671c:	ldr	r3, [pc, #80]	; 16774 <_start@@Base+0xf54>
   16720:	mov	r1, r7
   16724:	mov	r0, r6
   16728:	stmib	sp, {r4, r5}
   1672c:	add	r3, pc, r3
   16730:	mov	r2, #7
   16734:	bl	3c4bc <flatcc_json_printer_union_field@@Base>
   16738:	ldr	r3, [pc, #56]	; 16778 <_start@@Base+0xf58>
   1673c:	stmib	sp, {r4, r5}
   16740:	str	r9, [sp]
   16744:	mov	r2, r8
   16748:	mov	r1, r7
   1674c:	mov	r0, r6
   16750:	add	r3, pc, r3
   16754:	bl	3bed8 <flatcc_json_printer_union_vector_field@@Base>
   16758:	add	sp, sp, #20
   1675c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16760:	andeq	r0, r0, ip, asr #1
   16764:			; <UNDEFINED> instruction: 0x000001b0
   16768:	andeq	r7, r2, ip, ror #23
   1676c:	ldrdeq	r7, [r2], -ip
   16770:	andeq	r7, r2, r4, asr #23
   16774:	andeq	r7, r2, ip, lsr #23
   16778:	muleq	r2, r0, fp
   1677c:	ldrb	r3, [r1, #8]
   16780:	cmp	r3, #9
   16784:	beq	167c8 <_start@@Base+0xfa8>
   16788:	bls	167a4 <_start@@Base+0xf84>
   1678c:	cmp	r3, #11
   16790:	beq	167a0 <_start@@Base+0xf80>
   16794:	bcc	167e0 <_start@@Base+0xfc0>
   16798:	cmp	r3, #255	; 0xff
   1679c:	bne	167c0 <_start@@Base+0xfa0>
   167a0:	b	3c958 <flatcc_json_printer_union_string@@Base>
   167a4:	cmp	r3, #2
   167a8:	beq	167d4 <_start@@Base+0xfb4>
   167ac:	cmp	r3, #8
   167b0:	bne	167c4 <_start@@Base+0xfa4>
   167b4:	ldr	r2, [pc, #48]	; 167ec <_start@@Base+0xfcc>
   167b8:	add	r2, pc, r2
   167bc:	b	3c898 <flatcc_json_printer_union_struct@@Base>
   167c0:	bx	lr
   167c4:	bx	lr
   167c8:	ldr	r2, [pc, #32]	; 167f0 <_start@@Base+0xfd0>
   167cc:	add	r2, pc, r2
   167d0:	b	3c898 <flatcc_json_printer_union_struct@@Base>
   167d4:	ldr	r2, [pc, #24]	; 167f4 <_start@@Base+0xfd4>
   167d8:	add	r2, pc, r2
   167dc:	b	3c78c <flatcc_json_printer_union_table@@Base>
   167e0:	ldr	r2, [pc, #16]	; 167f8 <_start@@Base+0xfd8>
   167e4:	add	r2, pc, r2
   167e8:	b	3c898 <flatcc_json_printer_union_struct@@Base>
   167ec:	andeq	r0, r0, r0, ror r0
   167f0:	andeq	r0, r0, r8, lsr #32
   167f4:			; <UNDEFINED> instruction: 0xfffff3a8
   167f8:	andeq	r0, r0, r0, lsl r0
   167fc:	ldr	ip, [pc, #40]	; 1682c <_start@@Base+0x100c>
   16800:	push	{lr}		; (str lr, [sp, #-4]!)
   16804:	add	ip, pc, ip
   16808:	sub	sp, sp, #12
   1680c:	mov	lr, #10
   16810:	mov	r3, #0
   16814:	mov	r2, r1
   16818:	stm	sp, {ip, lr}
   1681c:	mov	r1, r3
   16820:	bl	3619c <flatcc_json_printer_int32_struct_field@@Base>
   16824:	add	sp, sp, #12
   16828:	pop	{pc}		; (ldr pc, [sp], #4)
   1682c:	andeq	r7, r2, r8, ror #21
   16830:	ldr	ip, [pc, #40]	; 16860 <_start@@Base+0x1040>
   16834:	push	{lr}		; (str lr, [sp, #-4]!)
   16838:	add	ip, pc, ip
   1683c:	sub	sp, sp, #12
   16840:	mov	lr, #11
   16844:	mov	r3, #0
   16848:	mov	r2, r1
   1684c:	stm	sp, {ip, lr}
   16850:	mov	r1, r3
   16854:	bl	35a20 <flatcc_json_printer_uint16_struct_field@@Base>
   16858:	add	sp, sp, #12
   1685c:	pop	{pc}		; (ldr pc, [sp], #4)
   16860:	andeq	r7, r2, r0, asr #21
   16864:	cmp	r1, #9
   16868:	mov	r3, r0
   1686c:	beq	168fc <_start@@Base+0x10dc>
   16870:	bls	16898 <_start@@Base+0x1078>
   16874:	cmp	r1, #11
   16878:	beq	168b8 <_start@@Base+0x1098>
   1687c:	bcc	168ec <_start@@Base+0x10cc>
   16880:	cmp	r1, #255	; 0xff
   16884:	bne	168c8 <_start@@Base+0x10a8>
   16888:	ldr	r1, [pc, #124]	; 1690c <_start@@Base+0x10ec>
   1688c:	mov	r2, #6
   16890:	add	r1, pc, r1
   16894:	b	32a14 <flatcc_json_printer_enum@@Base>
   16898:	cmp	r1, #2
   1689c:	beq	168dc <_start@@Base+0x10bc>
   168a0:	cmp	r1, #8
   168a4:	bne	168c8 <_start@@Base+0x10a8>
   168a8:	mov	r2, r1
   168ac:	ldr	r1, [pc, #92]	; 16910 <_start@@Base+0x10f0>
   168b0:	add	r1, pc, r1
   168b4:	b	32a14 <flatcc_json_printer_enum@@Base>
   168b8:	ldr	r1, [pc, #84]	; 16914 <_start@@Base+0x10f4>
   168bc:	mov	r2, #5
   168c0:	add	r1, pc, r1
   168c4:	b	32a14 <flatcc_json_printer_enum@@Base>
   168c8:	ldr	r1, [pc, #72]	; 16918 <_start@@Base+0x10f8>
   168cc:	mov	r0, r3
   168d0:	mov	r2, #4
   168d4:	add	r1, pc, r1
   168d8:	b	32a14 <flatcc_json_printer_enum@@Base>
   168dc:	ldr	r1, [pc, #56]	; 1691c <_start@@Base+0x10fc>
   168e0:	mov	r2, #5
   168e4:	add	r1, pc, r1
   168e8:	b	32a14 <flatcc_json_printer_enum@@Base>
   168ec:	ldr	r1, [pc, #44]	; 16920 <_start@@Base+0x1100>
   168f0:	mov	r2, #7
   168f4:	add	r1, pc, r1
   168f8:	b	32a14 <flatcc_json_printer_enum@@Base>
   168fc:	ldr	r1, [pc, #32]	; 16924 <_start@@Base+0x1104>
   16900:	mov	r2, #5
   16904:	add	r1, pc, r1
   16908:	b	32a14 <flatcc_json_printer_enum@@Base>
   1690c:	andeq	r7, r2, r0, lsr #21
   16910:	andeq	r7, r2, ip, asr sl
   16914:	andeq	r7, r2, r8, ror #20
   16918:			; <UNDEFINED> instruction: 0x0002c2b8
   1691c:	andeq	r7, r2, r0, lsr #20
   16920:	andeq	r7, r2, ip, lsr #20
   16924:	andeq	r7, r2, r4, lsl sl
   16928:	push	{r4, r5, r6, r7, lr}
   1692c:	mov	r3, #5
   16930:	ldr	r5, [pc, #144]	; 169c8 <_start@@Base+0x11a8>
   16934:	sub	sp, sp, #20
   16938:	mov	r4, #2
   1693c:	add	r5, pc, r5
   16940:	mov	r2, #0
   16944:	stm	sp, {r3, r4, r5}
   16948:	mov	r6, r0
   1694c:	ldr	r3, [pc, #120]	; 169cc <_start@@Base+0x11ac>
   16950:	mov	r7, r1
   16954:	add	r3, pc, r3
   16958:	bl	34dd8 <flatcc_json_printer_int8_enum_field@@Base>
   1695c:	mov	r3, #6
   16960:	str	r3, [sp]
   16964:	ldr	r3, [pc, #100]	; 169d0 <_start@@Base+0x11b0>
   16968:	mov	r1, r7
   1696c:	mov	r0, r6
   16970:	stmib	sp, {r4, r5}
   16974:	add	r3, pc, r3
   16978:	mov	r2, #1
   1697c:	bl	34dd8 <flatcc_json_printer_int8_enum_field@@Base>
   16980:	ldr	r3, [pc, #76]	; 169d4 <_start@@Base+0x11b4>
   16984:	mov	r2, r4
   16988:	mov	r1, r7
   1698c:	mov	r0, r6
   16990:	str	r4, [sp, #4]
   16994:	str	r4, [sp]
   16998:	add	r3, pc, r3
   1699c:	bl	33020 <flatcc_json_printer_uint8_field@@Base>
   169a0:	ldr	r3, [pc, #48]	; 169d8 <_start@@Base+0x11b8>
   169a4:	mov	r2, #3
   169a8:	str	r4, [sp, #4]
   169ac:	mov	r1, r7
   169b0:	mov	r0, r6
   169b4:	str	r2, [sp]
   169b8:	add	r3, pc, r3
   169bc:	bl	33020 <flatcc_json_printer_uint8_field@@Base>
   169c0:	add	sp, sp, #20
   169c4:	pop	{r4, r5, r6, r7, pc}
   169c8:	muleq	r0, r8, r0
   169cc:	andeq	r7, r2, r4, asr #14
   169d0:	andeq	r7, r2, r4, asr #19
   169d4:	andeq	r7, r2, r8, lsr #19
   169d8:	andeq	r7, r2, ip, lsl #19
   169dc:	push	{r4, r5, r6, r7, r8, lr}
   169e0:	uxtb	r4, r1
   169e4:	tst	r4, #244	; 0xf4
   169e8:	movne	r5, #1
   169ec:	moveq	r5, #0
   169f0:	cmp	r4, #0
   169f4:	orreq	r5, r5, #1
   169f8:	cmp	r5, #0
   169fc:	beq	16a08 <_start@@Base+0x11e8>
   16a00:	pop	{r4, r5, r6, r7, r8, lr}
   16a04:	b	328bc <flatcc_json_printer_int8@@Base>
   16a08:	sub	r3, r4, #1
   16a0c:	tst	r3, r4
   16a10:	movne	r7, #1
   16a14:	moveq	r7, #0
   16a18:	mov	r1, r7
   16a1c:	mov	r6, r0
   16a20:	bl	32a90 <flatcc_json_printer_delimit_enum_flags@@Base>
   16a24:	ands	r1, r4, #1
   16a28:	bne	16a4c <_start@@Base+0x122c>
   16a2c:	tst	r4, #2
   16a30:	bne	16a84 <_start@@Base+0x1264>
   16a34:	tst	r4, #8
   16a38:	bne	16a6c <_start@@Base+0x124c>
   16a3c:	mov	r1, r7
   16a40:	mov	r0, r6
   16a44:	pop	{r4, r5, r6, r7, r8, lr}
   16a48:	b	32a90 <flatcc_json_printer_delimit_enum_flags@@Base>
   16a4c:	ldr	r2, [pc, #80]	; 16aa4 <_start@@Base+0x1284>
   16a50:	mov	r1, r5
   16a54:	mov	r3, #3
   16a58:	add	r2, pc, r2
   16a5c:	mov	r0, r6
   16a60:	bl	32ac0 <flatcc_json_printer_enum_flag@@Base>
   16a64:	mov	r1, #1
   16a68:	b	16a2c <_start@@Base+0x120c>
   16a6c:	ldr	r2, [pc, #52]	; 16aa8 <_start@@Base+0x1288>
   16a70:	mov	r3, #4
   16a74:	add	r2, pc, r2
   16a78:	mov	r0, r6
   16a7c:	bl	32ac0 <flatcc_json_printer_enum_flag@@Base>
   16a80:	b	16a3c <_start@@Base+0x121c>
   16a84:	ldr	r2, [pc, #32]	; 16aac <_start@@Base+0x128c>
   16a88:	add	r5, r1, #1
   16a8c:	mov	r3, #5
   16a90:	add	r2, pc, r2
   16a94:	mov	r0, r6
   16a98:	bl	32ac0 <flatcc_json_printer_enum_flag@@Base>
   16a9c:	mov	r1, r5
   16aa0:	b	16a34 <_start@@Base+0x1214>
   16aa4:	strdeq	r7, [r2], -r0
   16aa8:	andeq	r7, r2, r0, ror #17
   16aac:			; <UNDEFINED> instruction: 0x000278bc
   16ab0:	ldr	ip, [pc, #256]	; 16bb8 <_start@@Base+0x1398>
   16ab4:	push	{r4, r5, r6, lr}
   16ab8:	sub	sp, sp, #16
   16abc:	add	ip, pc, ip
   16ac0:	mov	r6, #1
   16ac4:	mov	r3, #0
   16ac8:	mov	r4, r1
   16acc:	str	ip, [sp]
   16ad0:	mov	r2, r1
   16ad4:	str	r6, [sp, #4]
   16ad8:	mov	r1, r3
   16adc:	mov	r5, r0
   16ae0:	bl	3663c <flatcc_json_printer_float_struct_field@@Base>
   16ae4:	ldr	r3, [pc, #208]	; 16bbc <_start@@Base+0x139c>
   16ae8:	str	r6, [sp, #4]
   16aec:	add	r3, pc, r3
   16af0:	mov	r2, r4
   16af4:	mov	r1, r6
   16af8:	mov	r0, r5
   16afc:	str	r3, [sp]
   16b00:	mov	r3, #4
   16b04:	bl	3663c <flatcc_json_printer_float_struct_field@@Base>
   16b08:	ldr	r3, [pc, #176]	; 16bc0 <_start@@Base+0x13a0>
   16b0c:	str	r6, [sp, #4]
   16b10:	add	r3, pc, r3
   16b14:	mov	r2, r4
   16b18:	mov	r0, r5
   16b1c:	str	r3, [sp]
   16b20:	mov	r1, #2
   16b24:	mov	r3, #8
   16b28:	bl	3663c <flatcc_json_printer_float_struct_field@@Base>
   16b2c:	ldr	r3, [pc, #144]	; 16bc4 <_start@@Base+0x13a4>
   16b30:	mov	r6, #5
   16b34:	add	r3, pc, r3
   16b38:	mov	r2, r4
   16b3c:	mov	r0, r5
   16b40:	stm	sp, {r3, r6}
   16b44:	mov	r1, #3
   16b48:	mov	r3, #16
   16b4c:	bl	367b8 <flatcc_json_printer_double_struct_field@@Base>
   16b50:	ldr	r1, [pc, #112]	; 16bc8 <_start@@Base+0x13a8>
   16b54:	ldr	r3, [pc, #112]	; 16bcc <_start@@Base+0x13ac>
   16b58:	add	r1, pc, r1
   16b5c:	add	r3, pc, r3
   16b60:	mov	r2, r4
   16b64:	mov	r0, r5
   16b68:	str	r1, [sp, #8]
   16b6c:	str	r3, [sp]
   16b70:	str	r6, [sp, #4]
   16b74:	mov	r3, #24
   16b78:	mov	r1, #4
   16b7c:	bl	36fbc <flatcc_json_printer_int8_enum_struct_field@@Base>
   16b80:	ldr	ip, [pc, #72]	; 16bd0 <_start@@Base+0x13b0>
   16b84:	ldr	r3, [pc, #72]	; 16bd4 <_start@@Base+0x13b4>
   16b88:	add	ip, pc, ip
   16b8c:	add	r3, pc, r3
   16b90:	str	r3, [sp]
   16b94:	str	r6, [sp, #4]
   16b98:	mov	r2, r4
   16b9c:	mov	r1, r6
   16ba0:	mov	r0, r5
   16ba4:	str	ip, [sp, #8]
   16ba8:	mov	r3, #26
   16bac:	bl	3c970 <flatcc_json_printer_embedded_struct_field@@Base>
   16bb0:	add	sp, sp, #16
   16bb4:	pop	{r4, r5, r6, pc}
   16bb8:			; <UNDEFINED> instruction: 0x00027ab0
   16bbc:	strdeq	r7, [r2], -r0
   16bc0:	andeq	r7, r2, ip, asr #16
   16bc4:	andeq	r7, r2, ip, lsr #16
   16bc8:			; <UNDEFINED> instruction: 0xfffffe7c
   16bcc:	andeq	r7, r2, ip, lsl #16
   16bd0:			; <UNDEFINED> instruction: 0xfffff980
   16bd4:	andeq	r7, r2, r4, ror #15
   16bd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bdc:	mov	r4, r1
   16be0:	sub	sp, sp, #12
   16be4:	mov	r1, r2
   16be8:	mov	r5, r0
   16bec:	mov	r0, r4
   16bf0:	mov	sl, r2
   16bf4:	mov	fp, r3
   16bf8:	bl	15948 <_start@@Base+0x128>
   16bfc:	add	r3, pc, #628	; 0x274
   16c00:	ldrd	r2, [r3]
   16c04:	cmp	r1, r3
   16c08:	cmpeq	r0, r2
   16c0c:	bhi	16c80 <_start@@Base+0x1460>
   16c10:	add	r3, pc, #616	; 0x268
   16c14:	ldrd	r2, [r3]
   16c18:	cmp	r1, r3
   16c1c:	cmpeq	r0, r2
   16c20:	bls	16d48 <_start@@Base+0x1528>
   16c24:	add	r7, pc, #604	; 0x25c
   16c28:	ldrd	r6, [r7]
   16c2c:	and	r8, r0, #-16777216	; 0xff000000
   16c30:	cmp	r1, r7
   16c34:	cmpeq	r8, r6
   16c38:	beq	16e1c <_start@@Base+0x15fc>
   16c3c:	add	r3, pc, #588	; 0x24c
   16c40:	ldrd	r2, [r3]
   16c44:	bic	r0, r0, #255	; 0xff
   16c48:	cmp	r1, r3
   16c4c:	cmpeq	r0, r2
   16c50:	bne	16cac <_start@@Base+0x148c>
   16c54:	ldr	r3, [sp, #52]	; 0x34
   16c58:	mov	r2, sl
   16c5c:	str	r3, [sp]
   16c60:	mov	r0, r5
   16c64:	mov	r3, #7
   16c68:	mov	r1, r4
   16c6c:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   16c70:	cmp	r4, r0
   16c74:	movne	r6, #10
   16c78:	bne	16d88 <_start@@Base+0x1568>
   16c7c:	b	16cac <_start@@Base+0x148c>
   16c80:	add	r3, pc, #528	; 0x210
   16c84:	ldrd	r2, [r3]
   16c88:	cmp	r1, r3
   16c8c:	cmpeq	r0, r2
   16c90:	bhi	16cb8 <_start@@Base+0x1498>
   16c94:	add	r3, pc, #516	; 0x204
   16c98:	ldrd	r2, [r3]
   16c9c:	mov	r0, #0
   16ca0:	cmp	r1, r3
   16ca4:	cmpeq	r0, r2
   16ca8:	beq	16df0 <_start@@Base+0x15d0>
   16cac:	mov	r0, r4
   16cb0:	add	sp, sp, #12
   16cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cb8:	add	r3, pc, #488	; 0x1e8
   16cbc:	ldrd	r2, [r3]
   16cc0:	cmp	r1, r3
   16cc4:	cmpeq	r0, r2
   16cc8:	bls	16dac <_start@@Base+0x158c>
   16ccc:	add	r7, pc, #476	; 0x1dc
   16cd0:	ldrd	r6, [r7]
   16cd4:	ldr	r2, [pc, #500]	; 16ed0 <_start@@Base+0x16b0>
   16cd8:	mvn	r3, #0
   16cdc:	and	r3, r3, r1
   16ce0:	and	r2, r2, r0
   16ce4:	cmp	r3, r7
   16ce8:	cmpeq	r2, r6
   16cec:	beq	16e48 <_start@@Base+0x1628>
   16cf0:	add	r3, pc, #448	; 0x1c0
   16cf4:	ldrd	r2, [r3]
   16cf8:	cmp	r1, r3
   16cfc:	cmpeq	r0, r2
   16d00:	bne	16cac <_start@@Base+0x148c>
   16d04:	ldr	r3, [sp, #52]	; 0x34
   16d08:	mov	r2, sl
   16d0c:	str	r3, [sp]
   16d10:	mov	r0, r5
   16d14:	mov	r3, #8
   16d18:	mov	r1, r4
   16d1c:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   16d20:	cmp	r4, r0
   16d24:	beq	16cac <_start@@Base+0x148c>
   16d28:	ldr	r2, [sp, #48]	; 0x30
   16d2c:	mov	r4, r0
   16d30:	mov	r1, #0
   16d34:	mov	r0, #8
   16d38:	mov	r3, #0
   16d3c:	strd	r0, [r2]
   16d40:	str	r3, [fp]
   16d44:	b	16cac <_start@@Base+0x148c>
   16d48:	add	r3, pc, #368	; 0x170
   16d4c:	ldrd	r2, [r3]
   16d50:	and	r0, r0, #-16777216	; 0xff000000
   16d54:	cmp	r1, r3
   16d58:	cmpeq	r0, r2
   16d5c:	bne	16cac <_start@@Base+0x148c>
   16d60:	ldr	r3, [sp, #52]	; 0x34
   16d64:	mov	r2, sl
   16d68:	str	r3, [sp]
   16d6c:	mov	r0, r5
   16d70:	mov	r3, #5
   16d74:	mov	r1, r4
   16d78:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   16d7c:	cmp	r4, r0
   16d80:	movne	r6, #9
   16d84:	beq	16cac <_start@@Base+0x148c>
   16d88:	ldr	r2, [sp, #48]	; 0x30
   16d8c:	mov	r7, #0
   16d90:	mov	r3, #0
   16d94:	mov	r4, r0
   16d98:	strd	r6, [r2]
   16d9c:	mov	r0, r4
   16da0:	str	r3, [fp]
   16da4:	add	sp, sp, #12
   16da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dac:	add	r3, pc, #276	; 0x114
   16db0:	ldrd	r2, [r3]
   16db4:	and	r0, r0, #-16777216	; 0xff000000
   16db8:	cmp	r1, r3
   16dbc:	cmpeq	r0, r2
   16dc0:	bne	16cac <_start@@Base+0x148c>
   16dc4:	ldr	r3, [sp, #52]	; 0x34
   16dc8:	mov	r2, sl
   16dcc:	str	r3, [sp]
   16dd0:	mov	r0, r5
   16dd4:	mov	r3, #5
   16dd8:	mov	r1, r4
   16ddc:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   16de0:	cmp	r4, r0
   16de4:	beq	16cac <_start@@Base+0x148c>
   16de8:	mov	r6, #11
   16dec:	b	16d88 <_start@@Base+0x1568>
   16df0:	ldr	r3, [sp, #52]	; 0x34
   16df4:	mov	r2, sl
   16df8:	str	r3, [sp]
   16dfc:	mov	r0, r5
   16e00:	mov	r3, #4
   16e04:	mov	r1, r4
   16e08:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   16e0c:	cmp	r4, r0
   16e10:	movne	r6, #0
   16e14:	bne	16d88 <_start@@Base+0x1568>
   16e18:	b	16cac <_start@@Base+0x148c>
   16e1c:	ldr	r3, [sp, #52]	; 0x34
   16e20:	mov	r2, sl
   16e24:	str	r3, [sp]
   16e28:	mov	r0, r5
   16e2c:	mov	r3, #5
   16e30:	mov	r1, r4
   16e34:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   16e38:	cmp	r4, r0
   16e3c:	movne	r6, #2
   16e40:	bne	16d88 <_start@@Base+0x1568>
   16e44:	b	16cac <_start@@Base+0x148c>
   16e48:	ldr	r3, [sp, #52]	; 0x34
   16e4c:	mov	r2, sl
   16e50:	str	r3, [sp]
   16e54:	mov	r0, r5
   16e58:	mov	r3, #6
   16e5c:	mov	r1, r4
   16e60:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   16e64:	cmp	r4, r0
   16e68:	movne	r6, #255	; 0xff
   16e6c:	bne	16d88 <_start@@Base+0x1568>
   16e70:	b	16cac <_start@@Base+0x148c>
   16e74:	nop			; (mov r0, r0)
   16e78:			; <UNDEFINED> instruction: 0xffffffff
   16e7c:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   16e80:			; <UNDEFINED> instruction: 0x46616dff
   16e84:	rsbmi	r6, pc, #428	; 0x1ac
   16e88:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   16e8c:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   16e90:	strbtmi	r6, [r1], -r0, lsl #28
   16e94:	rsbmi	r6, pc, #428	; 0x1ac
   16e98:	ldrshvc	pc, [pc, #255]	; 16f9f <_start@@Base+0x177f>	; <UNPREDICTABLE>
   16e9c:	svcmi	0x00746865
   16ea0:	andeq	r0, r0, r0
   16ea4:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16ea8:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   16eac:	rsbpl	r7, r1, #117	; 0x75
   16eb0:	strbvs	r0, [r4, #-0]!
   16eb4:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   16eb8:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   16ebc:	rsbpl	r7, r1, #117	; 0x75
   16ec0:	strvs	r0, [r0, #-0]
   16ec4:	rsbmi	r6, r5, #108, 24	; 0x6c00
   16ec8:	andvc	r0, r0, #0
   16ecc:	svcmi	0x00746865
   16ed0:			; <UNDEFINED> instruction: 0xffff0000
   16ed4:	push	{r4, r5, r6, r7, r8, r9, lr}
   16ed8:	mov	r6, r1
   16edc:	sub	sp, sp, #12
   16ee0:	mov	r1, r2
   16ee4:	mov	r8, r0
   16ee8:	mov	r0, r6
   16eec:	mov	r7, r2
   16ef0:	mov	r9, r3
   16ef4:	bl	15948 <_start@@Base+0x128>
   16ef8:	add	r3, pc, #464	; 0x1d0
   16efc:	ldrd	r2, [r3]
   16f00:	cmp	r1, r3
   16f04:	cmpeq	r0, r2
   16f08:	mov	r5, r1
   16f0c:	bhi	16f38 <_start@@Base+0x1718>
   16f10:	add	r3, pc, #448	; 0x1c0
   16f14:	ldrd	r2, [r3]
   16f18:	bic	r5, r1, #255	; 0xff
   16f1c:	mov	r4, #0
   16f20:	cmp	r5, r3
   16f24:	cmpeq	r4, r2
   16f28:	beq	17008 <_start@@Base+0x17e8>
   16f2c:	mov	r0, r6
   16f30:	add	sp, sp, #12
   16f34:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16f38:	add	r3, pc, #416	; 0x1a0
   16f3c:	ldrd	r2, [r3]
   16f40:	mov	r4, r0
   16f44:	cmp	r1, r3
   16f48:	cmpeq	r0, r2
   16f4c:	beq	1704c <_start@@Base+0x182c>
   16f50:	add	r3, pc, #400	; 0x190
   16f54:	ldrd	r2, [r3]
   16f58:	bic	r0, r0, #255	; 0xff
   16f5c:	cmp	r1, r3
   16f60:	cmpeq	r0, r2
   16f64:	beq	17078 <_start@@Base+0x1858>
   16f68:	add	r3, pc, #384	; 0x180
   16f6c:	ldrd	r2, [r3]
   16f70:	mov	r0, #0
   16f74:	cmp	r5, r3
   16f78:	cmpeq	r0, r2
   16f7c:	beq	170a4 <_start@@Base+0x1884>
   16f80:	add	r3, pc, #368	; 0x170
   16f84:	ldrd	r2, [r3]
   16f88:	cmp	r5, r3
   16f8c:	cmpeq	r4, r2
   16f90:	bne	16f2c <_start@@Base+0x170c>
   16f94:	mov	r1, r7
   16f98:	add	r0, r6, #8
   16f9c:	bl	15948 <_start@@Base+0x128>
   16fa0:	add	r3, pc, #344	; 0x158
   16fa4:	ldrd	r2, [r3]
   16fa8:	cmp	r1, r3
   16fac:	cmpeq	r0, r2
   16fb0:	bne	16f2c <_start@@Base+0x170c>
   16fb4:	add	r4, r6, #16
   16fb8:	mov	r0, r4
   16fbc:	mov	r1, r7
   16fc0:	bl	15948 <_start@@Base+0x128>
   16fc4:	add	r3, pc, #316	; 0x13c
   16fc8:	ldrd	r2, [r3]
   16fcc:	bic	r0, r0, #255	; 0xff
   16fd0:	cmp	r1, r3
   16fd4:	cmpeq	r0, r2
   16fd8:	bne	16f2c <_start@@Base+0x170c>
   16fdc:	ldr	r3, [sp, #44]	; 0x2c
   16fe0:	mov	r2, r7
   16fe4:	str	r3, [sp]
   16fe8:	mov	r0, r8
   16fec:	mov	r3, #7
   16ff0:	mov	r1, r4
   16ff4:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   16ff8:	cmp	r4, r0
   16ffc:	beq	16f2c <_start@@Base+0x170c>
   17000:	mov	r4, #2
   17004:	b	17030 <_start@@Base+0x1810>
   17008:	ldr	r3, [sp, #44]	; 0x2c
   1700c:	mov	r2, r7
   17010:	str	r3, [sp]
   17014:	mov	r0, r8
   17018:	mov	r3, #3
   1701c:	mov	r1, r6
   17020:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   17024:	cmp	r6, r0
   17028:	movne	r4, #4
   1702c:	beq	16f30 <_start@@Base+0x1710>
   17030:	ldr	r2, [sp, #40]	; 0x28
   17034:	mov	r5, #0
   17038:	mov	r3, #0
   1703c:	strd	r4, [r2]
   17040:	str	r3, [r9]
   17044:	add	sp, sp, #12
   17048:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1704c:	ldr	r3, [sp, #44]	; 0x2c
   17050:	mov	r2, r7
   17054:	str	r3, [sp]
   17058:	mov	r0, r8
   1705c:	mov	r3, #8
   17060:	mov	r1, r6
   17064:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   17068:	cmp	r6, r0
   1706c:	movne	r4, #3
   17070:	bne	17030 <_start@@Base+0x1810>
   17074:	b	16f2c <_start@@Base+0x170c>
   17078:	ldr	r3, [sp, #44]	; 0x2c
   1707c:	mov	r2, r7
   17080:	str	r3, [sp]
   17084:	mov	r1, r6
   17088:	mov	r3, #7
   1708c:	mov	r0, r8
   17090:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   17094:	cmp	r6, r0
   17098:	movne	r4, #1
   1709c:	bne	17030 <_start@@Base+0x1810>
   170a0:	b	16f68 <_start@@Base+0x1748>
   170a4:	ldr	r3, [sp, #44]	; 0x2c
   170a8:	mov	r2, r7
   170ac:	str	r3, [sp]
   170b0:	mov	r0, r8
   170b4:	mov	r3, #4
   170b8:	mov	r1, r6
   170bc:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   170c0:	cmp	r6, r0
   170c4:	movne	r4, #0
   170c8:	bne	17030 <_start@@Base+0x1810>
   170cc:	b	16f2c <_start@@Base+0x170c>
   170d0:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   170d4:	stclmi	14, cr6, [pc, #-460]!	; 16f10 <_start@@Base+0x16f0>
   170d8:	andeq	r0, r0, r0
   170dc:	cmnmi	ip, r0, lsl #8
   170e0:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   170e4:	stclmi	14, cr6, [pc, #-460]!	; 16f20 <_start@@Base+0x1700>
   170e8:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   170ec:	stclmi	14, cr6, [pc, #-460]!	; 16f28 <_start@@Base+0x1708>
   170f0:	andeq	r0, r0, r0
   170f4:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   170f8:	cmnpl	r9, #112, 26	; 0x1c00
   170fc:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   17100:	rsbvs	r6, ip, #364904448	; 0x15c00000
   17104:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   17108:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1710c:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   17110:	push	{r4, r5, r6, r7, r8, r9, lr}
   17114:	mov	r4, r1
   17118:	sub	sp, sp, #12
   1711c:	mov	r1, r2
   17120:	mov	r6, r0
   17124:	mov	r0, r4
   17128:	mov	r5, r2
   1712c:	mov	r7, r3
   17130:	bl	15948 <_start@@Base+0x128>
   17134:	add	r3, pc, #316	; 0x13c
   17138:	ldrd	r2, [r3]
   1713c:	cmp	r1, r3
   17140:	cmpeq	r0, r2
   17144:	bhi	1716c <_start@@Base+0x194c>
   17148:	add	r3, pc, #304	; 0x130
   1714c:	ldrd	r2, [r3]
   17150:	mov	r0, #0
   17154:	cmp	r1, r3
   17158:	cmpeq	r0, r2
   1715c:	beq	171ec <_start@@Base+0x19cc>
   17160:	mov	r0, r4
   17164:	add	sp, sp, #12
   17168:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1716c:	add	r9, pc, #276	; 0x114
   17170:	ldrd	r8, [r9]
   17174:	ldr	r2, [pc, #292]	; 172a0 <_start@@Base+0x1a80>
   17178:	mvn	r3, #0
   1717c:	and	r3, r3, r1
   17180:	and	r2, r2, r0
   17184:	cmp	r3, r9
   17188:	cmpeq	r2, r8
   1718c:	beq	17230 <_start@@Base+0x1a10>
   17190:	add	r3, pc, #248	; 0xf8
   17194:	ldrd	r2, [r3]
   17198:	mov	r0, #0
   1719c:	cmp	r1, r3
   171a0:	cmpeq	r0, r2
   171a4:	bne	17160 <_start@@Base+0x1940>
   171a8:	ldr	r3, [sp, #44]	; 0x2c
   171ac:	mov	r2, r5
   171b0:	str	r3, [sp]
   171b4:	mov	r0, r6
   171b8:	mov	r3, #4
   171bc:	mov	r1, r4
   171c0:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   171c4:	cmp	r4, r0
   171c8:	beq	17160 <_start@@Base+0x1940>
   171cc:	add	r9, pc, #196	; 0xc4
   171d0:	ldrd	r8, [r9]
   171d4:	ldr	r2, [sp, #40]	; 0x28
   171d8:	mov	r3, #0
   171dc:	mov	r4, r0
   171e0:	strd	r8, [r2]
   171e4:	str	r3, [r7]
   171e8:	b	17160 <_start@@Base+0x1940>
   171ec:	ldr	r3, [sp, #44]	; 0x2c
   171f0:	mov	r2, r5
   171f4:	str	r3, [sp]
   171f8:	mov	r0, r6
   171fc:	mov	r3, #4
   17200:	mov	r1, r4
   17204:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   17208:	cmp	r4, r0
   1720c:	beq	17160 <_start@@Base+0x1940>
   17210:	ldr	r2, [sp, #40]	; 0x28
   17214:	mov	r8, #3
   17218:	mov	r9, #0
   1721c:	mov	r3, #0
   17220:	strd	r8, [r2]
   17224:	mov	r4, r0
   17228:	str	r3, [r7]
   1722c:	b	17160 <_start@@Base+0x1940>
   17230:	ldr	r3, [sp, #44]	; 0x2c
   17234:	mov	r2, r5
   17238:	str	r3, [sp]
   1723c:	mov	r0, r6
   17240:	mov	r3, #6
   17244:	mov	r1, r4
   17248:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   1724c:	cmp	r4, r0
   17250:	beq	17160 <_start@@Base+0x1940>
   17254:	ldr	r2, [sp, #40]	; 0x28
   17258:	mvn	r8, #1
   1725c:	mvn	r9, #0
   17260:	mov	r3, #1
   17264:	strd	r8, [r2]
   17268:	mov	r4, r0
   1726c:	str	r3, [r7]
   17270:	b	17160 <_start@@Base+0x1940>
   17274:	nop			; (mov r0, r0)
   17278:			; <UNDEFINED> instruction: 0xffffffff
   1727c:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   17280:	andeq	r0, r0, r0
   17284:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   17288:	strbvs	r0, [r7, #-0]!
   1728c:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   17290:	andeq	r0, r0, r0
   17294:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   17298:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   1729c:	andeq	r0, r0, r0
   172a0:			; <UNDEFINED> instruction: 0xffff0000
   172a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172a8:	mov	r4, r1
   172ac:	sub	sp, sp, #12
   172b0:	mov	r1, r2
   172b4:	mov	r5, r0
   172b8:	mov	r0, r4
   172bc:	mov	sl, r2
   172c0:	mov	fp, r3
   172c4:	bl	15948 <_start@@Base+0x128>
   172c8:	add	r3, pc, #408	; 0x198
   172cc:	ldrd	r2, [r3]
   172d0:	cmp	r1, r3
   172d4:	cmpeq	r0, r2
   172d8:	bhi	17300 <_start@@Base+0x1ae0>
   172dc:	add	r3, pc, #396	; 0x18c
   172e0:	ldrd	r2, [r3]
   172e4:	mov	r0, #0
   172e8:	cmp	r1, r3
   172ec:	cmpeq	r0, r2
   172f0:	beq	173d8 <_start@@Base+0x1bb8>
   172f4:	mov	r0, r4
   172f8:	add	sp, sp, #12
   172fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17300:	add	r3, pc, #368	; 0x170
   17304:	ldrd	r2, [r3]
   17308:	cmp	r1, r3
   1730c:	cmpeq	r0, r2
   17310:	bls	17394 <_start@@Base+0x1b74>
   17314:	add	r7, pc, #356	; 0x164
   17318:	ldrd	r6, [r7]
   1731c:	bic	r8, r0, #255	; 0xff
   17320:	cmp	r1, r7
   17324:	cmpeq	r8, r6
   17328:	beq	17424 <_start@@Base+0x1c04>
   1732c:	add	r7, pc, #340	; 0x154
   17330:	ldrd	r6, [r7]
   17334:	ldr	r2, [pc, #348]	; 17498 <_start@@Base+0x1c78>
   17338:	mvn	r3, #0
   1733c:	and	r1, r1, r3
   17340:	and	r0, r0, r2
   17344:	cmp	r1, r7
   17348:	cmpeq	r0, r6
   1734c:	bne	172f4 <_start@@Base+0x1ad4>
   17350:	ldr	r3, [sp, #52]	; 0x34
   17354:	mov	r2, sl
   17358:	str	r3, [sp]
   1735c:	mov	r0, r5
   17360:	mov	r3, #6
   17364:	mov	r1, r4
   17368:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   1736c:	cmp	r4, r0
   17370:	beq	172f4 <_start@@Base+0x1ad4>
   17374:	ldr	r2, [sp, #48]	; 0x30
   17378:	mov	r4, r0
   1737c:	mvn	r1, #0
   17380:	mvn	r0, #1
   17384:	mov	r3, #1
   17388:	strd	r0, [r2]
   1738c:	str	r3, [fp]
   17390:	b	172f4 <_start@@Base+0x1ad4>
   17394:	add	r3, pc, #244	; 0xf4
   17398:	ldrd	r2, [r3]
   1739c:	mov	r0, #0
   173a0:	cmp	r1, r3
   173a4:	cmpeq	r0, r2
   173a8:	bne	172f4 <_start@@Base+0x1ad4>
   173ac:	ldr	r3, [sp, #52]	; 0x34
   173b0:	mov	r2, sl
   173b4:	str	r3, [sp]
   173b8:	mov	r0, r5
   173bc:	mov	r3, #4
   173c0:	mov	r1, r4
   173c4:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   173c8:	cmp	r4, r0
   173cc:	beq	172f4 <_start@@Base+0x1ad4>
   173d0:	mov	r6, #42	; 0x2a
   173d4:	b	17400 <_start@@Base+0x1be0>
   173d8:	ldr	r3, [sp, #52]	; 0x34
   173dc:	mov	r2, sl
   173e0:	str	r3, [sp]
   173e4:	mov	r0, r5
   173e8:	mov	r3, #4
   173ec:	mov	r1, r4
   173f0:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   173f4:	cmp	r4, r0
   173f8:	movne	r6, #2
   173fc:	beq	172f4 <_start@@Base+0x1ad4>
   17400:	ldr	r2, [sp, #48]	; 0x30
   17404:	mov	r7, #0
   17408:	mov	r3, #0
   1740c:	mov	r4, r0
   17410:	strd	r6, [r2]
   17414:	mov	r0, r4
   17418:	str	r3, [fp]
   1741c:	add	sp, sp, #12
   17420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17424:	ldr	r3, [sp, #52]	; 0x34
   17428:	mov	r2, sl
   1742c:	str	r3, [sp]
   17430:	mov	r0, r5
   17434:	mov	r3, #7
   17438:	mov	r1, r4
   1743c:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   17440:	cmp	r4, r0
   17444:	beq	172f4 <_start@@Base+0x1ad4>
   17448:	ldr	r2, [sp, #48]	; 0x30
   1744c:	mvn	r6, #0
   17450:	mvn	r7, #0
   17454:	mov	r3, #1
   17458:	strd	r6, [r2]
   1745c:	mov	r4, r0
   17460:	str	r3, [fp]
   17464:	b	172f4 <_start@@Base+0x1ad4>
   17468:			; <UNDEFINED> instruction: 0xffffffff
   1746c:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   17470:	andeq	r0, r0, r0
   17474:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   17478:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1747c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   17480:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   17484:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   17488:	strbvs	r0, [r7, #-0]!
   1748c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   17490:	andeq	r0, r0, r0
   17494:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   17498:			; <UNDEFINED> instruction: 0xffff0000
   1749c:	push	{r4, r5, r6, r7, r8, r9, lr}
   174a0:	mov	r4, r1
   174a4:	sub	sp, sp, #12
   174a8:	mov	r1, r2
   174ac:	mov	r6, r0
   174b0:	mov	r0, r4
   174b4:	mov	r5, r2
   174b8:	mov	r7, r3
   174bc:	bl	15948 <_start@@Base+0x128>
   174c0:	add	r3, pc, #280	; 0x118
   174c4:	ldrd	r2, [r3]
   174c8:	cmp	r1, r3
   174cc:	cmpeq	r0, r2
   174d0:	bhi	174f8 <_start@@Base+0x1cd8>
   174d4:	add	r3, pc, #268	; 0x10c
   174d8:	ldrd	r2, [r3]
   174dc:	mov	r0, #0
   174e0:	cmp	r1, r3
   174e4:	cmpeq	r0, r2
   174e8:	beq	17568 <_start@@Base+0x1d48>
   174ec:	mov	r0, r4
   174f0:	add	sp, sp, #12
   174f4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   174f8:	add	r3, pc, #240	; 0xf0
   174fc:	ldrd	r2, [r3]
   17500:	mov	r0, #0
   17504:	cmp	r1, r3
   17508:	cmpeq	r0, r2
   1750c:	beq	175b4 <_start@@Base+0x1d94>
   17510:	add	r3, pc, #224	; 0xe0
   17514:	ldrd	r2, [r3]
   17518:	cmp	r1, r3
   1751c:	cmpeq	r0, r2
   17520:	bne	174ec <_start@@Base+0x1ccc>
   17524:	ldr	r3, [sp, #44]	; 0x2c
   17528:	mov	r2, r5
   1752c:	str	r3, [sp]
   17530:	mov	r0, r6
   17534:	mov	r3, #4
   17538:	mov	r1, r4
   1753c:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   17540:	cmp	r4, r0
   17544:	beq	174ec <_start@@Base+0x1ccc>
   17548:	ldr	r2, [sp, #40]	; 0x28
   1754c:	mov	r4, r0
   17550:	mvn	r1, #0
   17554:	mvn	r0, #10
   17558:	mov	r3, #1
   1755c:	strd	r0, [r2]
   17560:	str	r3, [r7]
   17564:	b	174ec <_start@@Base+0x1ccc>
   17568:	ldr	r3, [sp, #44]	; 0x2c
   1756c:	mov	r2, r5
   17570:	str	r3, [sp]
   17574:	mov	r0, r6
   17578:	mov	r3, #4
   1757c:	mov	r1, r4
   17580:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   17584:	cmp	r4, r0
   17588:	mvnne	r8, #11
   1758c:	beq	174ec <_start@@Base+0x1ccc>
   17590:	ldr	r2, [sp, #40]	; 0x28
   17594:	mvn	r9, #0
   17598:	mov	r3, #1
   1759c:	mov	r4, r0
   175a0:	strd	r8, [r2]
   175a4:	mov	r0, r4
   175a8:	str	r3, [r7]
   175ac:	add	sp, sp, #12
   175b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   175b4:	ldr	r3, [sp, #44]	; 0x2c
   175b8:	mov	r2, r5
   175bc:	str	r3, [sp]
   175c0:	mov	r0, r6
   175c4:	mov	r3, #4
   175c8:	mov	r1, r4
   175cc:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   175d0:	cmp	r4, r0
   175d4:	beq	174ec <_start@@Base+0x1ccc>
   175d8:	mvn	r8, #9
   175dc:	b	17590 <_start@@Base+0x1d70>
   175e0:			; <UNDEFINED> instruction: 0xffffffff
   175e4:	mcrvs	7, 3, r6, cr5, cr1, {1}
   175e8:	andeq	r0, r0, r0
   175ec:	mcrvs	7, 3, r6, cr5, cr1, {1}
   175f0:	andeq	r0, r0, r0
   175f4:	mcrvs	7, 3, r6, cr5, cr3, {1}
   175f8:	andeq	r0, r0, r0
   175fc:	mcrvs	7, 3, r6, cr5, cr2, {1}
   17600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17604:	mov	r4, r1
   17608:	sub	sp, sp, #12
   1760c:	mov	r1, r2
   17610:	mov	r5, r0
   17614:	mov	r0, r4
   17618:	mov	sl, r2
   1761c:	mov	fp, r3
   17620:	bl	15948 <_start@@Base+0x128>
   17624:	add	r3, pc, #292	; 0x124
   17628:	ldrd	r2, [r3]
   1762c:	cmp	r1, r3
   17630:	cmpeq	r0, r2
   17634:	bhi	1765c <_start@@Base+0x1e3c>
   17638:	add	r3, pc, #280	; 0x118
   1763c:	ldrd	r2, [r3]
   17640:	mov	r0, #0
   17644:	cmp	r1, r3
   17648:	cmpeq	r0, r2
   1764c:	beq	176d4 <_start@@Base+0x1eb4>
   17650:	mov	r0, r4
   17654:	add	sp, sp, #12
   17658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1765c:	add	r7, pc, #252	; 0xfc
   17660:	ldrd	r6, [r7]
   17664:	bic	r9, r1, #255	; 0xff
   17668:	mov	r8, #0
   1766c:	cmp	r9, r7
   17670:	cmpeq	r8, r6
   17674:	beq	17720 <_start@@Base+0x1f00>
   17678:	add	r3, pc, #232	; 0xe8
   1767c:	ldrd	r2, [r3]
   17680:	and	r0, r0, #-16777216	; 0xff000000
   17684:	cmp	r1, r3
   17688:	cmpeq	r0, r2
   1768c:	bne	17650 <_start@@Base+0x1e30>
   17690:	ldr	r3, [sp, #52]	; 0x34
   17694:	mov	r2, sl
   17698:	str	r3, [sp]
   1769c:	mov	r0, r5
   176a0:	mov	r3, #5
   176a4:	mov	r1, r4
   176a8:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   176ac:	cmp	r4, r0
   176b0:	beq	17650 <_start@@Base+0x1e30>
   176b4:	ldr	r2, [sp, #48]	; 0x30
   176b8:	mov	r4, r0
   176bc:	mov	r1, #0
   176c0:	mov	r0, #2
   176c4:	mov	r3, #0
   176c8:	strd	r0, [r2]
   176cc:	str	r3, [fp]
   176d0:	b	17650 <_start@@Base+0x1e30>
   176d4:	ldr	r3, [sp, #52]	; 0x34
   176d8:	mov	r2, sl
   176dc:	str	r3, [sp]
   176e0:	mov	r0, r5
   176e4:	mov	r3, #4
   176e8:	mov	r1, r4
   176ec:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   176f0:	cmp	r4, r0
   176f4:	movne	r6, #8
   176f8:	beq	17650 <_start@@Base+0x1e30>
   176fc:	ldr	r2, [sp, #48]	; 0x30
   17700:	mov	r7, #0
   17704:	mov	r3, #0
   17708:	mov	r4, r0
   1770c:	strd	r6, [r2]
   17710:	mov	r0, r4
   17714:	str	r3, [fp]
   17718:	add	sp, sp, #12
   1771c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17720:	ldr	r3, [sp, #52]	; 0x34
   17724:	mov	r2, sl
   17728:	str	r3, [sp]
   1772c:	mov	r0, r5
   17730:	mov	r3, #3
   17734:	mov	r1, r4
   17738:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   1773c:	cmp	r4, r0
   17740:	beq	17650 <_start@@Base+0x1e30>
   17744:	mov	r6, #1
   17748:	b	176fc <_start@@Base+0x1edc>
   1774c:	nop			; (mov r0, r0)
   17750:	ldclvs	15, cr15, [pc, #1020]!	; 17b54 <_start@@Base+0x2334>
   17754:	ldrbmi	r6, [r2, -r5, ror #10]!
   17758:	andeq	r0, r0, r0
   1775c:	rsbmi	r7, ip, #423624704	; 0x19400000
   17760:	andeq	r0, r0, r0
   17764:	rsbpl	r6, r5, #0, 8
   17768:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   1776c:	ldrbmi	r6, [r2, -r5, ror #10]!
   17770:	sub	r3, r2, r1
   17774:	cmp	r3, #1
   17778:	ble	1778c <_start@@Base+0x1f6c>
   1777c:	ldrb	r3, [r1]
   17780:	cmp	r3, #32
   17784:	bhi	17790 <_start@@Base+0x1f70>
   17788:	beq	17798 <_start@@Base+0x1f78>
   1778c:	b	2d3c8 <flatcc_json_parser_space_ext@@Base>
   17790:	mov	r0, r1
   17794:	bx	lr
   17798:	ldrb	r3, [r1, #1]
   1779c:	cmp	r3, #32
   177a0:	bls	1778c <_start@@Base+0x1f6c>
   177a4:	add	r0, r1, #1
   177a8:	bx	lr
   177ac:	mov	r3, #8
   177b0:	push	{r4, lr}
   177b4:	mov	r2, r3
   177b8:	mov	r1, #0
   177bc:	mov	r4, r0
   177c0:	bl	2ad1c <flatcc_verify_field@@Base>
   177c4:	cmp	r0, #0
   177c8:	popne	{r4, pc}
   177cc:	mov	r3, #4
   177d0:	mov	r0, r4
   177d4:	mov	r2, r3
   177d8:	mov	r1, #1
   177dc:	pop	{r4, lr}
   177e0:	b	2ad1c <flatcc_verify_field@@Base>
   177e4:	mov	r3, #1
   177e8:	push	{r4, lr}
   177ec:	mov	r2, r3
   177f0:	mov	r1, #0
   177f4:	mov	r4, r0
   177f8:	bl	2ad1c <flatcc_verify_field@@Base>
   177fc:	cmp	r0, #0
   17800:	popne	{r4, pc}
   17804:	mov	r3, #1
   17808:	mov	r2, r3
   1780c:	mov	r1, r3
   17810:	mov	r0, r4
   17814:	bl	2ad1c <flatcc_verify_field@@Base>
   17818:	cmp	r0, #0
   1781c:	popne	{r4, pc}
   17820:	mov	r3, #1
   17824:	mov	r2, r3
   17828:	mov	r1, #2
   1782c:	mov	r0, r4
   17830:	bl	2ad1c <flatcc_verify_field@@Base>
   17834:	cmp	r0, #0
   17838:	popne	{r4, pc}
   1783c:	mov	r3, #1
   17840:	mov	r0, r4
   17844:	mov	r2, r3
   17848:	mov	r1, #3
   1784c:	pop	{r4, lr}
   17850:	b	2ad1c <flatcc_verify_field@@Base>
   17854:	mov	r2, #0
   17858:	push	{r4, lr}
   1785c:	mov	r1, r2
   17860:	mov	r4, r0
   17864:	bl	2ad8c <flatcc_verify_string_field@@Base>
   17868:	cmp	r0, #0
   1786c:	popne	{r4, pc}
   17870:	mov	r3, #8
   17874:	mov	r2, r3
   17878:	mov	r1, #1
   1787c:	mov	r0, r4
   17880:	bl	2ad1c <flatcc_verify_field@@Base>
   17884:	cmp	r0, #0
   17888:	popne	{r4, pc}
   1788c:	mov	r3, #2
   17890:	mov	r0, r4
   17894:	mov	r2, r3
   17898:	mov	r1, r3
   1789c:	pop	{r4, lr}
   178a0:	b	2ad1c <flatcc_verify_field@@Base>
   178a4:	mov	r2, #0
   178a8:	push	{r4, lr}
   178ac:	mov	r1, r2
   178b0:	mov	r4, r0
   178b4:	bl	2ad8c <flatcc_verify_string_field@@Base>
   178b8:	cmp	r0, #0
   178bc:	popne	{r4, pc}
   178c0:	mov	r3, #4
   178c4:	mov	r2, r3
   178c8:	mov	r1, #1
   178cc:	mov	r0, r4
   178d0:	bl	2ad1c <flatcc_verify_field@@Base>
   178d4:	cmp	r0, #0
   178d8:	popne	{r4, pc}
   178dc:	mov	r2, r0
   178e0:	mov	r1, #2
   178e4:	mov	r0, r4
   178e8:	bl	2ad8c <flatcc_verify_string_field@@Base>
   178ec:	cmp	r0, #0
   178f0:	popne	{r4, pc}
   178f4:	mov	r3, #8
   178f8:	mov	r2, r3
   178fc:	mov	r1, #3
   17900:	mov	r0, r4
   17904:	bl	2ad1c <flatcc_verify_field@@Base>
   17908:	cmp	r0, #0
   1790c:	popne	{r4, pc}
   17910:	mov	r2, r0
   17914:	mov	r1, #4
   17918:	mov	r0, r4
   1791c:	bl	2ad8c <flatcc_verify_string_field@@Base>
   17920:	cmp	r0, #0
   17924:	popne	{r4, pc}
   17928:	mov	r3, #8
   1792c:	mov	r2, r3
   17930:	mov	r1, #5
   17934:	mov	r0, r4
   17938:	bl	2ad1c <flatcc_verify_field@@Base>
   1793c:	cmp	r0, #0
   17940:	popne	{r4, pc}
   17944:	mov	r3, #4
   17948:	mov	r2, r3
   1794c:	mov	r1, #6
   17950:	mov	r0, r4
   17954:	bl	2ad1c <flatcc_verify_field@@Base>
   17958:	cmp	r0, #0
   1795c:	popne	{r4, pc}
   17960:	mov	r3, #8
   17964:	mov	r2, r3
   17968:	mov	r1, #7
   1796c:	mov	r0, r4
   17970:	bl	2ad1c <flatcc_verify_field@@Base>
   17974:	cmp	r0, #0
   17978:	popne	{r4, pc}
   1797c:	mov	r3, #4
   17980:	mov	r0, r4
   17984:	mov	r2, r3
   17988:	mov	r1, #8
   1798c:	pop	{r4, lr}
   17990:	b	2ad1c <flatcc_verify_field@@Base>
   17994:	ldr	r3, [pc, #88]	; 179f4 <_start@@Base+0x21d4>
   17998:	mov	r2, #0
   1799c:	push	{r4, lr}
   179a0:	mov	r1, r2
   179a4:	add	r3, pc, r3
   179a8:	mov	r4, r0
   179ac:	bl	2b028 <flatcc_verify_table_field@@Base>
   179b0:	cmp	r0, #0
   179b4:	popne	{r4, pc}
   179b8:	ldr	r3, [pc, #56]	; 179f8 <_start@@Base+0x21d8>
   179bc:	mov	r2, r0
   179c0:	add	r3, pc, r3
   179c4:	mov	r1, #1
   179c8:	mov	r0, r4
   179cc:	bl	2b028 <flatcc_verify_table_field@@Base>
   179d0:	cmp	r0, #0
   179d4:	popne	{r4, pc}
   179d8:	ldr	r3, [pc, #28]	; 179fc <_start@@Base+0x21dc>
   179dc:	mov	r2, r0
   179e0:	add	r3, pc, r3
   179e4:	mov	r0, r4
   179e8:	mov	r1, #2
   179ec:	pop	{r4, lr}
   179f0:	b	2b028 <flatcc_verify_table_field@@Base>
   179f4:			; <UNDEFINED> instruction: 0xfffffef8
   179f8:	andeq	r0, r0, r4, asr #23
   179fc:			; <UNDEFINED> instruction: 0xfffffdc4
   17a00:	push	{r4, r5, r6, r7, r8, lr}
   17a04:	mov	r3, #16
   17a08:	sub	sp, sp, #8
   17a0c:	mov	r2, #32
   17a10:	mov	r1, #0
   17a14:	mov	r4, r0
   17a18:	bl	2ad1c <flatcc_verify_field@@Base>
   17a1c:	cmp	r0, #0
   17a20:	beq	17a2c <_start@@Base+0x220c>
   17a24:	add	sp, sp, #8
   17a28:	pop	{r4, r5, r6, r7, r8, pc}
   17a2c:	mov	r3, #2
   17a30:	mov	r2, r3
   17a34:	mov	r1, r3
   17a38:	mov	r0, r4
   17a3c:	bl	2ad1c <flatcc_verify_field@@Base>
   17a40:	cmp	r0, #0
   17a44:	bne	17a24 <_start@@Base+0x2204>
   17a48:	mov	r3, #2
   17a4c:	mov	r2, r3
   17a50:	mov	r1, #1
   17a54:	mov	r0, r4
   17a58:	bl	2ad1c <flatcc_verify_field@@Base>
   17a5c:	cmp	r0, #0
   17a60:	bne	17a24 <_start@@Base+0x2204>
   17a64:	mov	r2, #1
   17a68:	mov	r1, #3
   17a6c:	mov	r0, r4
   17a70:	bl	2ad8c <flatcc_verify_string_field@@Base>
   17a74:	cmp	r0, #0
   17a78:	bne	17a24 <_start@@Base+0x2204>
   17a7c:	mov	r3, #1
   17a80:	mov	r2, r3
   17a84:	mov	r1, #6
   17a88:	mov	r0, r4
   17a8c:	bl	2ad1c <flatcc_verify_field@@Base>
   17a90:	cmp	r0, #0
   17a94:	bne	17a24 <_start@@Base+0x2204>
   17a98:	mov	r5, #1
   17a9c:	mvn	r6, #0
   17aa0:	mov	r2, r0
   17aa4:	stm	sp, {r5, r6}
   17aa8:	mov	r3, r5
   17aac:	mov	r1, #5
   17ab0:	mov	r0, r4
   17ab4:	bl	2ae20 <flatcc_verify_vector_field@@Base>
   17ab8:	cmp	r0, #0
   17abc:	bne	17a24 <_start@@Base+0x2204>
   17ac0:	ldr	r3, [pc, #868]	; 17e2c <_start@@Base+0x260c>
   17ac4:	mov	r2, r0
   17ac8:	add	r3, pc, r3
   17acc:	mov	r1, #11
   17ad0:	mov	r0, r4
   17ad4:	bl	2b13c <flatcc_verify_table_vector_field@@Base>
   17ad8:	cmp	r0, #0
   17adc:	bne	17a24 <_start@@Base+0x2204>
   17ae0:	mov	r2, r0
   17ae4:	mov	r1, #10
   17ae8:	mov	r0, r4
   17aec:	bl	2aec8 <flatcc_verify_string_vector_field@@Base>
   17af0:	cmp	r0, #0
   17af4:	bne	17a24 <_start@@Base+0x2204>
   17af8:	mov	r2, r0
   17afc:	mov	r1, #28
   17b00:	mov	r0, r4
   17b04:	bl	2aec8 <flatcc_verify_string_vector_field@@Base>
   17b08:	cmp	r0, #0
   17b0c:	bne	17a24 <_start@@Base+0x2204>
   17b10:	mov	r2, r0
   17b14:	stm	sp, {r5, r6}
   17b18:	mov	r3, r5
   17b1c:	mov	r1, #24
   17b20:	mov	r0, r4
   17b24:	bl	2ae20 <flatcc_verify_vector_field@@Base>
   17b28:	cmp	r0, #0
   17b2c:	bne	17a24 <_start@@Base+0x2204>
   17b30:	mvn	r3, #-536870912	; 0xe0000000
   17b34:	mov	r5, #4
   17b38:	str	r3, [sp, #4]
   17b3c:	str	r5, [sp]
   17b40:	mov	r3, #8
   17b44:	mov	r2, #0
   17b48:	mov	r1, #29
   17b4c:	mov	r0, r4
   17b50:	bl	2ae20 <flatcc_verify_vector_field@@Base>
   17b54:	cmp	r0, #0
   17b58:	bne	17a24 <_start@@Base+0x2204>
   17b5c:	ldr	r7, [pc, #716]	; 17e30 <_start@@Base+0x2610>
   17b60:	mov	r2, r0
   17b64:	add	r7, pc, r7
   17b68:	mov	r3, r7
   17b6c:	mov	r1, #12
   17b70:	mov	r0, r4
   17b74:	bl	2b028 <flatcc_verify_table_field@@Base>
   17b78:	cmp	r0, #0
   17b7c:	bne	17a24 <_start@@Base+0x2204>
   17b80:	ldr	r3, [pc, #684]	; 17e34 <_start@@Base+0x2614>
   17b84:	mov	r2, r0
   17b88:	add	r3, pc, r3
   17b8c:	mov	r1, #8
   17b90:	mov	r0, r4
   17b94:	bl	2bc34 <flatcc_verify_union_field@@Base>
   17b98:	cmp	r0, #0
   17b9c:	bne	17a24 <_start@@Base+0x2204>
   17ba0:	mvn	r8, #-1073741824	; 0xc0000000
   17ba4:	mov	r6, #2
   17ba8:	mov	r2, r0
   17bac:	stm	sp, {r6, r8}
   17bb0:	mov	r3, r5
   17bb4:	mov	r1, #9
   17bb8:	mov	r0, r4
   17bbc:	bl	2ae20 <flatcc_verify_vector_field@@Base>
   17bc0:	cmp	r0, #0
   17bc4:	bne	17a24 <_start@@Base+0x2204>
   17bc8:	mov	r2, r0
   17bcc:	stm	sp, {r6, r8}
   17bd0:	mov	r3, r5
   17bd4:	mov	r1, #31
   17bd8:	mov	r0, r4
   17bdc:	bl	2ae20 <flatcc_verify_vector_field@@Base>
   17be0:	cmp	r0, #0
   17be4:	bne	17a24 <_start@@Base+0x2204>
   17be8:	mov	r6, #1
   17bec:	mov	r3, r0
   17bf0:	mov	r2, r0
   17bf4:	stm	sp, {r6, r7}
   17bf8:	mov	r1, #13
   17bfc:	mov	r0, r4
   17c00:	bl	2ba78 <flatcc_verify_table_as_nested_root@@Base>
   17c04:	cmp	r0, #0
   17c08:	bne	17a24 <_start@@Base+0x2204>
   17c0c:	ldr	r3, [pc, #548]	; 17e38 <_start@@Base+0x2618>
   17c10:	mov	r2, r0
   17c14:	add	r3, pc, r3
   17c18:	mov	r1, #14
   17c1c:	mov	r0, r4
   17c20:	bl	2b028 <flatcc_verify_table_field@@Base>
   17c24:	cmp	r0, #0
   17c28:	bne	17a24 <_start@@Base+0x2204>
   17c2c:	mov	r3, r6
   17c30:	mov	r2, r6
   17c34:	mov	r1, #15
   17c38:	mov	r0, r4
   17c3c:	bl	2ad1c <flatcc_verify_field@@Base>
   17c40:	cmp	r0, #0
   17c44:	bne	17a24 <_start@@Base+0x2204>
   17c48:	mov	r3, r5
   17c4c:	mov	r2, r5
   17c50:	mov	r1, #16
   17c54:	mov	r0, r4
   17c58:	bl	2ad1c <flatcc_verify_field@@Base>
   17c5c:	cmp	r0, #0
   17c60:	bne	17a24 <_start@@Base+0x2204>
   17c64:	mov	r3, r5
   17c68:	mov	r2, r5
   17c6c:	mov	r1, #17
   17c70:	mov	r0, r4
   17c74:	bl	2ad1c <flatcc_verify_field@@Base>
   17c78:	cmp	r0, #0
   17c7c:	bne	17a24 <_start@@Base+0x2204>
   17c80:	mov	r3, #8
   17c84:	mov	r2, r3
   17c88:	mov	r1, #18
   17c8c:	mov	r0, r4
   17c90:	bl	2ad1c <flatcc_verify_field@@Base>
   17c94:	cmp	r0, #0
   17c98:	bne	17a24 <_start@@Base+0x2204>
   17c9c:	mov	r3, #8
   17ca0:	mov	r2, r3
   17ca4:	mov	r1, #19
   17ca8:	mov	r0, r4
   17cac:	bl	2ad1c <flatcc_verify_field@@Base>
   17cb0:	cmp	r0, #0
   17cb4:	bne	17a24 <_start@@Base+0x2204>
   17cb8:	mov	r3, r5
   17cbc:	mov	r2, r5
   17cc0:	mov	r1, #20
   17cc4:	mov	r0, r4
   17cc8:	bl	2ad1c <flatcc_verify_field@@Base>
   17ccc:	cmp	r0, #0
   17cd0:	bne	17a24 <_start@@Base+0x2204>
   17cd4:	mov	r3, r5
   17cd8:	mov	r2, r5
   17cdc:	mov	r1, #21
   17ce0:	mov	r0, r4
   17ce4:	bl	2ad1c <flatcc_verify_field@@Base>
   17ce8:	cmp	r0, #0
   17cec:	bne	17a24 <_start@@Base+0x2204>
   17cf0:	mov	r3, #8
   17cf4:	mov	r2, r3
   17cf8:	mov	r1, #22
   17cfc:	mov	r0, r4
   17d00:	bl	2ad1c <flatcc_verify_field@@Base>
   17d04:	cmp	r0, #0
   17d08:	bne	17a24 <_start@@Base+0x2204>
   17d0c:	mov	r3, #8
   17d10:	mov	r2, r3
   17d14:	mov	r1, #23
   17d18:	mov	r0, r4
   17d1c:	bl	2ad1c <flatcc_verify_field@@Base>
   17d20:	cmp	r0, #0
   17d24:	bne	17a24 <_start@@Base+0x2204>
   17d28:	mov	r3, r5
   17d2c:	mov	r2, r5
   17d30:	mov	r1, #25
   17d34:	mov	r0, r4
   17d38:	bl	2ad1c <flatcc_verify_field@@Base>
   17d3c:	cmp	r0, #0
   17d40:	bne	17a24 <_start@@Base+0x2204>
   17d44:	mov	r3, r5
   17d48:	mov	r2, r5
   17d4c:	mov	r1, #26
   17d50:	mov	r0, r4
   17d54:	bl	2ad1c <flatcc_verify_field@@Base>
   17d58:	cmp	r0, #0
   17d5c:	bne	17a24 <_start@@Base+0x2204>
   17d60:	mov	r3, r5
   17d64:	mov	r2, r5
   17d68:	mov	r1, #27
   17d6c:	mov	r0, r4
   17d70:	bl	2ad1c <flatcc_verify_field@@Base>
   17d74:	cmp	r0, #0
   17d78:	bne	17a24 <_start@@Base+0x2204>
   17d7c:	mvn	r1, #0
   17d80:	mov	r2, r0
   17d84:	str	r1, [sp, #4]
   17d88:	mov	r3, r6
   17d8c:	str	r6, [sp]
   17d90:	mov	r1, #30
   17d94:	mov	r0, r4
   17d98:	bl	2ae20 <flatcc_verify_vector_field@@Base>
   17d9c:	cmp	r0, #0
   17da0:	bne	17a24 <_start@@Base+0x2204>
   17da4:	mov	r5, #8
   17da8:	mvn	r6, #-536870912	; 0xe0000000
   17dac:	mov	r3, r5
   17db0:	stm	sp, {r5, r6}
   17db4:	mov	r2, #0
   17db8:	mov	r1, #32
   17dbc:	mov	r0, r4
   17dc0:	bl	2ae20 <flatcc_verify_vector_field@@Base>
   17dc4:	cmp	r0, #0
   17dc8:	bne	17a24 <_start@@Base+0x2204>
   17dcc:	mov	r2, r0
   17dd0:	stm	sp, {r5, r6}
   17dd4:	mov	r3, r5
   17dd8:	mov	r1, #33	; 0x21
   17ddc:	mov	r0, r4
   17de0:	bl	2ae20 <flatcc_verify_vector_field@@Base>
   17de4:	cmp	r0, #0
   17de8:	bne	17a24 <_start@@Base+0x2204>
   17dec:	ldr	r3, [pc, #72]	; 17e3c <_start@@Base+0x261c>
   17df0:	mov	r2, r0
   17df4:	add	r3, pc, r3
   17df8:	mov	r1, #34	; 0x22
   17dfc:	mov	r0, r4
   17e00:	bl	2b028 <flatcc_verify_table_field@@Base>
   17e04:	cmp	r0, #0
   17e08:	bne	17a24 <_start@@Base+0x2204>
   17e0c:	ldr	r3, [pc, #44]	; 17e40 <_start@@Base+0x2620>
   17e10:	mov	r2, r0
   17e14:	add	r3, pc, r3
   17e18:	mov	r0, r4
   17e1c:	mov	r1, #35	; 0x23
   17e20:	add	sp, sp, #8
   17e24:	pop	{r4, r5, r6, r7, r8, lr}
   17e28:	b	2b028 <flatcc_verify_table_field@@Base>
   17e2c:			; <UNDEFINED> instruction: 0xffffff30
   17e30:			; <UNDEFINED> instruction: 0xfffffe94
   17e34:	andeq	r0, r0, r0, asr #6
   17e38:			; <UNDEFINED> instruction: 0xfffffc38
   17e3c:	andeq	r0, r0, r0, lsl #9
   17e40:	andeq	r0, r0, r8, lsr #32
   17e44:	push	{r4, r5, r6, lr}
   17e48:	mov	r4, #1
   17e4c:	sub	sp, sp, #8
   17e50:	mvn	r5, #0
   17e54:	mov	r2, #0
   17e58:	mov	r1, r2
   17e5c:	stm	sp, {r4, r5}
   17e60:	mov	r3, r4
   17e64:	mov	r6, r0
   17e68:	bl	2ae20 <flatcc_verify_vector_field@@Base>
   17e6c:	subs	r2, r0, #0
   17e70:	beq	17e80 <_start@@Base+0x2660>
   17e74:	mov	r0, r2
   17e78:	add	sp, sp, #8
   17e7c:	pop	{r4, r5, r6, pc}
   17e80:	stm	sp, {r4, r5}
   17e84:	mov	r3, r4
   17e88:	mov	r1, r4
   17e8c:	mov	r0, r6
   17e90:	bl	2ae20 <flatcc_verify_vector_field@@Base>
   17e94:	subs	r2, r0, #0
   17e98:	bne	17e74 <_start@@Base+0x2654>
   17e9c:	ldr	r3, [pc, #40]	; 17ecc <_start@@Base+0x26ac>
   17ea0:	str	r4, [sp]
   17ea4:	add	r3, pc, r3
   17ea8:	str	r3, [sp, #4]
   17eac:	mov	r0, r6
   17eb0:	mov	r3, r2
   17eb4:	mov	r1, #2
   17eb8:	bl	2ba78 <flatcc_verify_table_as_nested_root@@Base>
   17ebc:	mov	r2, r0
   17ec0:	mov	r0, r2
   17ec4:	add	sp, sp, #8
   17ec8:	pop	{r4, r5, r6, pc}
   17ecc:			; <UNDEFINED> instruction: 0xfffffb54
   17ed0:	ldrb	r3, [r0, #12]
   17ed4:	sub	r3, r3, #1
   17ed8:	cmp	r3, #3
   17edc:	addls	pc, pc, r3, lsl #2
   17ee0:	b	17f24 <_start@@Base+0x2704>
   17ee4:	b	17f18 <_start@@Base+0x26f8>
   17ee8:	b	17f0c <_start@@Base+0x26ec>
   17eec:	b	17f00 <_start@@Base+0x26e0>
   17ef0:	b	17ef4 <_start@@Base+0x26d4>
   17ef4:	ldr	r1, [pc, #48]	; 17f2c <_start@@Base+0x270c>
   17ef8:	add	r1, pc, r1
   17efc:	b	2b3f4 <flatcc_verify_union_table@@Base>
   17f00:	ldr	r1, [pc, #40]	; 17f30 <_start@@Base+0x2710>
   17f04:	add	r1, pc, r1
   17f08:	b	2b3f4 <flatcc_verify_union_table@@Base>
   17f0c:	ldr	r1, [pc, #32]	; 17f34 <_start@@Base+0x2714>
   17f10:	add	r1, pc, r1
   17f14:	b	2b3f4 <flatcc_verify_union_table@@Base>
   17f18:	ldr	r1, [pc, #24]	; 17f38 <_start@@Base+0x2718>
   17f1c:	add	r1, pc, r1
   17f20:	b	2b3f4 <flatcc_verify_union_table@@Base>
   17f24:	mov	r0, #0
   17f28:	bx	lr
   17f2c:	andeq	r0, r0, ip, lsr r0
   17f30:			; <UNDEFINED> instruction: 0xffffdbc0
   17f34:			; <UNDEFINED> instruction: 0xfffff8cc
   17f38:			; <UNDEFINED> instruction: 0xfffffadc
   17f3c:	ldr	r3, [pc, #88]	; 17f9c <_start@@Base+0x277c>
   17f40:	mov	r2, #0
   17f44:	push	{r4, lr}
   17f48:	mov	r1, r2
   17f4c:	add	r3, pc, r3
   17f50:	mov	r4, r0
   17f54:	bl	2b028 <flatcc_verify_table_field@@Base>
   17f58:	cmp	r0, #0
   17f5c:	popne	{r4, pc}
   17f60:	ldr	r3, [pc, #56]	; 17fa0 <_start@@Base+0x2780>
   17f64:	mov	r2, r0
   17f68:	add	r3, pc, r3
   17f6c:	mov	r1, #1
   17f70:	mov	r0, r4
   17f74:	bl	2b028 <flatcc_verify_table_field@@Base>
   17f78:	cmp	r0, #0
   17f7c:	popne	{r4, pc}
   17f80:	ldr	r3, [pc, #28]	; 17fa4 <_start@@Base+0x2784>
   17f84:	mov	r2, r0
   17f88:	add	r3, pc, r3
   17f8c:	mov	r0, r4
   17f90:	mov	r1, #3
   17f94:	pop	{r4, lr}
   17f98:	b	2bd8c <flatcc_verify_union_vector_field@@Base>
   17f9c:			; <UNDEFINED> instruction: 0xfffffa40
   17fa0:	andeq	r0, r0, r8, lsr r0
   17fa4:			; <UNDEFINED> instruction: 0xffffff40
   17fa8:	push	{r4, r5, r6, lr}
   17fac:	mov	r2, #0
   17fb0:	ldr	r4, [pc, #132]	; 1803c <_start@@Base+0x281c>
   17fb4:	mov	r1, #1
   17fb8:	add	r4, pc, r4
   17fbc:	mov	r3, r4
   17fc0:	mov	r5, r0
   17fc4:	bl	2bc34 <flatcc_verify_union_field@@Base>
   17fc8:	cmp	r0, #0
   17fcc:	popne	{r4, r5, r6, pc}
   17fd0:	mov	r2, r0
   17fd4:	mov	r3, r4
   17fd8:	mov	r1, #3
   17fdc:	mov	r0, r5
   17fe0:	bl	2bc34 <flatcc_verify_union_field@@Base>
   17fe4:	cmp	r0, #0
   17fe8:	popne	{r4, r5, r6, pc}
   17fec:	mov	r2, r0
   17ff0:	mov	r3, r4
   17ff4:	mov	r1, #5
   17ff8:	mov	r0, r5
   17ffc:	bl	2bc34 <flatcc_verify_union_field@@Base>
   18000:	cmp	r0, #0
   18004:	popne	{r4, r5, r6, pc}
   18008:	mov	r2, r0
   1800c:	mov	r3, r4
   18010:	mov	r1, #7
   18014:	mov	r0, r5
   18018:	bl	2bc34 <flatcc_verify_union_field@@Base>
   1801c:	cmp	r0, #0
   18020:	popne	{r4, r5, r6, pc}
   18024:	mov	r3, r4
   18028:	mov	r2, r0
   1802c:	mov	r1, #9
   18030:	mov	r0, r5
   18034:	pop	{r4, r5, r6, lr}
   18038:	b	2bd8c <flatcc_verify_union_vector_field@@Base>
   1803c:	andeq	r0, r0, r0, lsl #1
   18040:	ldrb	r3, [r0, #12]
   18044:	cmp	r3, #9
   18048:	beq	18084 <_start@@Base+0x2864>
   1804c:	bls	18068 <_start@@Base+0x2848>
   18050:	cmp	r3, #11
   18054:	beq	18064 <_start@@Base+0x2844>
   18058:	bcc	18084 <_start@@Base+0x2864>
   1805c:	cmp	r3, #255	; 0xff
   18060:	bne	18090 <_start@@Base+0x2870>
   18064:	b	2b548 <flatcc_verify_union_string@@Base>
   18068:	cmp	r3, #2
   1806c:	beq	18098 <_start@@Base+0x2878>
   18070:	cmp	r3, #8
   18074:	bne	18090 <_start@@Base+0x2870>
   18078:	mov	r2, #2
   1807c:	mov	r1, r2
   18080:	b	2b4ec <flatcc_verify_union_struct@@Base>
   18084:	mov	r2, #4
   18088:	mov	r1, r2
   1808c:	b	2b4ec <flatcc_verify_union_struct@@Base>
   18090:	mov	r0, #0
   18094:	bx	lr
   18098:	ldr	r1, [pc, #4]	; 180a4 <_start@@Base+0x2884>
   1809c:	add	r1, pc, r1
   180a0:	b	2b3f4 <flatcc_verify_union_table@@Base>
   180a4:			; <UNDEFINED> instruction: 0xffffda30
   180a8:	sub	r1, r1, #1
   180ac:	cmp	r1, #3
   180b0:	addls	pc, pc, r1, lsl #2
   180b4:	b	18108 <_start@@Base+0x28e8>
   180b8:	b	180f8 <_start@@Base+0x28d8>
   180bc:	b	180e8 <_start@@Base+0x28c8>
   180c0:	b	180d8 <_start@@Base+0x28b8>
   180c4:	b	180c8 <_start@@Base+0x28a8>
   180c8:	ldr	r1, [pc, #72]	; 18118 <_start@@Base+0x28f8>
   180cc:	mov	r2, #3
   180d0:	add	r1, pc, r1
   180d4:	b	32a14 <flatcc_json_printer_enum@@Base>
   180d8:	ldr	r1, [pc, #60]	; 1811c <_start@@Base+0x28fc>
   180dc:	mov	r2, #8
   180e0:	add	r1, pc, r1
   180e4:	b	32a14 <flatcc_json_printer_enum@@Base>
   180e8:	ldr	r1, [pc, #48]	; 18120 <_start@@Base+0x2900>
   180ec:	mov	r2, #23
   180f0:	add	r1, pc, r1
   180f4:	b	32a14 <flatcc_json_printer_enum@@Base>
   180f8:	ldr	r1, [pc, #36]	; 18124 <_start@@Base+0x2904>
   180fc:	mov	r2, #7
   18100:	add	r1, pc, r1
   18104:	b	32a14 <flatcc_json_printer_enum@@Base>
   18108:	ldr	r1, [pc, #24]	; 18128 <_start@@Base+0x2908>
   1810c:	mov	r2, #4
   18110:	add	r1, pc, r1
   18114:	b	32a14 <flatcc_json_printer_enum@@Base>
   18118:	ldrdeq	r6, [r2], -r4
   1811c:			; <UNDEFINED> instruction: 0x000262b8
   18120:	muleq	r2, r0, r2
   18124:	andeq	r6, r2, r8, ror r2
   18128:	andeq	sl, r2, ip, ror sl
   1812c:	push	{r4, r5, r6, r7, lr}
   18130:	mov	r4, #0
   18134:	sub	sp, sp, #28
   18138:	mov	r5, #0
   1813c:	cmp	r1, r2
   18140:	strd	r4, [r3]
   18144:	strd	r4, [sp, #16]
   18148:	str	r4, [sp, #12]
   1814c:	moveq	r0, r1
   18150:	beq	181a4 <_start@@Base+0x2984>
   18154:	mov	r5, r3
   18158:	add	r3, sp, #16
   1815c:	str	r3, [sp]
   18160:	add	r3, sp, #12
   18164:	mov	r4, r1
   18168:	mov	r6, r2
   1816c:	mov	r7, r0
   18170:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   18174:	cmp	r4, r0
   18178:	beq	181a4 <_start@@Base+0x2984>
   1817c:	ldr	r1, [sp, #12]
   18180:	ldrd	r2, [sp, #16]
   18184:	cmp	r1, #0
   18188:	beq	181ac <_start@@Base+0x298c>
   1818c:	cmp	r3, #-2147483648	; 0x80000000
   18190:	cmpeq	r2, #0
   18194:	bhi	181c4 <_start@@Base+0x29a4>
   18198:	rsbs	r2, r2, #0
   1819c:	rsc	r3, r3, #0
   181a0:	strd	r2, [r5]
   181a4:	add	sp, sp, #28
   181a8:	pop	{r4, r5, r6, r7, pc}
   181ac:	cmp	r2, #0
   181b0:	sbcs	r1, r3, #0
   181b4:	blt	181dc <_start@@Base+0x29bc>
   181b8:	strd	r2, [r5]
   181bc:	add	sp, sp, #28
   181c0:	pop	{r4, r5, r6, r7, pc}
   181c4:	mov	r1, r0
   181c8:	mov	r2, r6
   181cc:	mov	r0, r7
   181d0:	mov	r3, #8
   181d4:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   181d8:	b	181a4 <_start@@Base+0x2984>
   181dc:	mov	r1, r0
   181e0:	mov	r2, r6
   181e4:	mov	r0, r7
   181e8:	mov	r3, #7
   181ec:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   181f0:	b	181a4 <_start@@Base+0x2984>
   181f4:	push	{r4, r5, r6, r7, lr}
   181f8:	mov	r4, #0
   181fc:	sub	sp, sp, #28
   18200:	mov	r5, #0
   18204:	cmp	r1, r2
   18208:	strd	r4, [r3]
   1820c:	strd	r4, [sp, #16]
   18210:	str	r4, [sp, #12]
   18214:	moveq	r0, r1
   18218:	beq	18258 <_start@@Base+0x2a38>
   1821c:	mov	r5, r3
   18220:	add	r3, sp, #16
   18224:	str	r3, [sp]
   18228:	add	r3, sp, #12
   1822c:	mov	r4, r1
   18230:	mov	r6, r2
   18234:	mov	r7, r0
   18238:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   1823c:	cmp	r4, r0
   18240:	beq	18258 <_start@@Base+0x2a38>
   18244:	ldr	r3, [sp, #12]
   18248:	cmp	r3, #0
   1824c:	bne	18260 <_start@@Base+0x2a40>
   18250:	ldrd	r2, [sp, #16]
   18254:	strd	r2, [r5]
   18258:	add	sp, sp, #28
   1825c:	pop	{r4, r5, r6, r7, pc}
   18260:	mov	r1, r0
   18264:	mov	r2, r6
   18268:	mov	r0, r7
   1826c:	mov	r3, #8
   18270:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   18274:	add	sp, sp, #28
   18278:	pop	{r4, r5, r6, r7, pc}
   1827c:	mov	r0, #0
   18280:	bx	lr
   18284:	bx	lr
   18288:	push	{r4, r5, r6, r7, r8, r9, lr}
   1828c:	mov	r6, #0
   18290:	sub	sp, sp, #28
   18294:	mov	r7, #0
   18298:	mov	lr, #0
   1829c:	cmp	r1, r2
   182a0:	str	lr, [r3]
   182a4:	str	lr, [sp, #12]
   182a8:	strd	r6, [sp, #16]
   182ac:	moveq	r0, r1
   182b0:	beq	18304 <_start@@Base+0x2ae4>
   182b4:	mov	r5, r3
   182b8:	add	r3, sp, #16
   182bc:	str	r3, [sp]
   182c0:	add	r3, sp, #12
   182c4:	mov	r4, r1
   182c8:	mov	r7, r0
   182cc:	mov	r6, r2
   182d0:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   182d4:	cmp	r4, r0
   182d8:	beq	18304 <_start@@Base+0x2ae4>
   182dc:	ldr	r3, [sp, #12]
   182e0:	cmp	r3, #0
   182e4:	bne	1830c <_start@@Base+0x2aec>
   182e8:	ldrd	r2, [sp, #16]
   182ec:	mov	r9, #0
   182f0:	mvn	r8, #0
   182f4:	cmp	r3, r9
   182f8:	cmpeq	r2, r8
   182fc:	strls	r2, [r5]
   18300:	bhi	18328 <_start@@Base+0x2b08>
   18304:	add	sp, sp, #28
   18308:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1830c:	mov	r1, r0
   18310:	mov	r2, r6
   18314:	mov	r0, r7
   18318:	mov	r3, #8
   1831c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   18320:	add	sp, sp, #28
   18324:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18328:	mov	r1, r0
   1832c:	mov	r2, r6
   18330:	mov	r0, r7
   18334:	mov	r3, #7
   18338:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1833c:	add	sp, sp, #28
   18340:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18344:	push	{r4, r5, r6, r7, lr}
   18348:	mov	r6, #0
   1834c:	sub	sp, sp, #28
   18350:	mov	r7, #0
   18354:	mov	lr, #0
   18358:	cmp	r1, r2
   1835c:	strb	lr, [r3]
   18360:	str	lr, [sp, #12]
   18364:	strd	r6, [sp, #16]
   18368:	moveq	r0, r1
   1836c:	beq	183b8 <_start@@Base+0x2b98>
   18370:	mov	r5, r3
   18374:	add	r3, sp, #16
   18378:	str	r3, [sp]
   1837c:	add	r3, sp, #12
   18380:	mov	r4, r1
   18384:	mov	r7, r0
   18388:	mov	r6, r2
   1838c:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   18390:	cmp	r4, r0
   18394:	beq	183b8 <_start@@Base+0x2b98>
   18398:	ldr	r3, [sp, #12]
   1839c:	cmp	r3, #0
   183a0:	bne	183c0 <_start@@Base+0x2ba0>
   183a4:	ldrd	r2, [sp, #16]
   183a8:	cmp	r3, #0
   183ac:	cmpeq	r2, #255	; 0xff
   183b0:	strbls	r2, [r5]
   183b4:	bhi	183dc <_start@@Base+0x2bbc>
   183b8:	add	sp, sp, #28
   183bc:	pop	{r4, r5, r6, r7, pc}
   183c0:	mov	r1, r0
   183c4:	mov	r2, r6
   183c8:	mov	r0, r7
   183cc:	mov	r3, #8
   183d0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   183d4:	add	sp, sp, #28
   183d8:	pop	{r4, r5, r6, r7, pc}
   183dc:	mov	r1, r0
   183e0:	mov	r2, r6
   183e4:	mov	r0, r7
   183e8:	mov	r3, #7
   183ec:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   183f0:	add	sp, sp, #28
   183f4:	pop	{r4, r5, r6, r7, pc}
   183f8:	push	{r4, r5, r6, r7, r8, r9, lr}
   183fc:	mov	r6, #0
   18400:	sub	sp, sp, #28
   18404:	mov	r7, #0
   18408:	mov	lr, #0
   1840c:	cmp	r1, r2
   18410:	str	lr, [r3]
   18414:	str	lr, [sp, #12]
   18418:	strd	r6, [sp, #16]
   1841c:	moveq	r0, r1
   18420:	beq	18470 <_start@@Base+0x2c50>
   18424:	mov	r5, r3
   18428:	add	r3, sp, #16
   1842c:	str	r3, [sp]
   18430:	add	r3, sp, #12
   18434:	mov	r4, r1
   18438:	mov	r7, r0
   1843c:	mov	r6, r2
   18440:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   18444:	cmp	r4, r0
   18448:	beq	18470 <_start@@Base+0x2c50>
   1844c:	ldr	r1, [sp, #12]
   18450:	ldrd	r2, [sp, #16]
   18454:	cmp	r1, #0
   18458:	beq	18478 <_start@@Base+0x2c58>
   1845c:	cmp	r3, #0
   18460:	cmpeq	r2, #-2147483648	; 0x80000000
   18464:	rsbls	r2, r2, #0
   18468:	strls	r2, [r5]
   1846c:	bhi	184a8 <_start@@Base+0x2c88>
   18470:	add	sp, sp, #28
   18474:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18478:	mov	r9, #0
   1847c:	cmp	r3, r9
   18480:	mvn	r8, #-2147483648	; 0x80000000
   18484:	cmpeq	r2, r8
   18488:	strls	r2, [r5]
   1848c:	bls	18470 <_start@@Base+0x2c50>
   18490:	mov	r1, r0
   18494:	mov	r2, r6
   18498:	mov	r0, r7
   1849c:	mov	r3, #7
   184a0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   184a4:	b	18470 <_start@@Base+0x2c50>
   184a8:	mov	r1, r0
   184ac:	mov	r2, r6
   184b0:	mov	r0, r7
   184b4:	mov	r3, #8
   184b8:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   184bc:	b	18470 <_start@@Base+0x2c50>
   184c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   184c4:	mov	r6, #0
   184c8:	sub	sp, sp, #28
   184cc:	mov	r7, #0
   184d0:	mov	lr, #0
   184d4:	cmp	r1, r2
   184d8:	strh	lr, [r3]
   184dc:	str	lr, [sp, #12]
   184e0:	strd	r6, [sp, #16]
   184e4:	moveq	r0, r1
   184e8:	beq	18538 <_start@@Base+0x2d18>
   184ec:	mov	r5, r3
   184f0:	add	r3, sp, #16
   184f4:	str	r3, [sp]
   184f8:	add	r3, sp, #12
   184fc:	mov	r4, r1
   18500:	mov	r7, r0
   18504:	mov	r6, r2
   18508:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   1850c:	cmp	r4, r0
   18510:	beq	18538 <_start@@Base+0x2d18>
   18514:	ldr	r1, [sp, #12]
   18518:	ldrd	r2, [sp, #16]
   1851c:	cmp	r1, #0
   18520:	beq	18540 <_start@@Base+0x2d20>
   18524:	cmp	r3, #0
   18528:	cmpeq	r2, #32768	; 0x8000
   1852c:	rsbls	r2, r2, #0
   18530:	strhls	r2, [r5]
   18534:	bhi	18570 <_start@@Base+0x2d50>
   18538:	add	sp, sp, #28
   1853c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18540:	ldr	r8, [pc, #64]	; 18588 <_start@@Base+0x2d68>
   18544:	mov	r9, #0
   18548:	cmp	r3, r9
   1854c:	cmpeq	r2, r8
   18550:	strhls	r2, [r5]
   18554:	bls	18538 <_start@@Base+0x2d18>
   18558:	mov	r1, r0
   1855c:	mov	r2, r6
   18560:	mov	r0, r7
   18564:	mov	r3, #7
   18568:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1856c:	b	18538 <_start@@Base+0x2d18>
   18570:	mov	r1, r0
   18574:	mov	r2, r6
   18578:	mov	r0, r7
   1857c:	mov	r3, #8
   18580:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   18584:	b	18538 <_start@@Base+0x2d18>
   18588:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1858c:	mov	r3, #8
   18590:	push	{r4, lr}
   18594:	mov	r2, r3
   18598:	mov	r1, #0
   1859c:	mov	r4, r0
   185a0:	bl	2ad1c <flatcc_verify_field@@Base>
   185a4:	cmp	r0, #0
   185a8:	popne	{r4, pc}
   185ac:	mov	r3, #4
   185b0:	mov	r0, r4
   185b4:	mov	r2, r3
   185b8:	mov	r1, #1
   185bc:	pop	{r4, lr}
   185c0:	b	2ad1c <flatcc_verify_field@@Base>
   185c4:	cmp	r1, r2
   185c8:	beq	185d8 <_start@@Base+0x2db8>
   185cc:	ldrb	ip, [r1]
   185d0:	cmp	ip, #123	; 0x7b
   185d4:	beq	185e8 <_start@@Base+0x2dc8>
   185d8:	mov	ip, #0
   185dc:	str	ip, [r3]
   185e0:	mov	r3, #21
   185e4:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   185e8:	push	{r4, r5, r6, lr}
   185ec:	mov	r5, r0
   185f0:	add	r0, r1, #1
   185f4:	mov	r6, r3
   185f8:	sub	r3, r2, r0
   185fc:	cmp	r3, #1
   18600:	mov	r4, r2
   18604:	ble	18618 <_start@@Base+0x2df8>
   18608:	ldrb	r3, [r1, #1]
   1860c:	cmp	r3, #32
   18610:	bhi	18628 <_start@@Base+0x2e08>
   18614:	beq	18648 <_start@@Base+0x2e28>
   18618:	mov	r1, r0
   1861c:	mov	r2, r4
   18620:	mov	r0, r5
   18624:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   18628:	cmp	r4, r0
   1862c:	beq	1863c <_start@@Base+0x2e1c>
   18630:	ldrb	r3, [r0]
   18634:	cmp	r3, #125	; 0x7d
   18638:	beq	1865c <_start@@Base+0x2e3c>
   1863c:	mov	r3, #1
   18640:	str	r3, [r6]
   18644:	pop	{r4, r5, r6, pc}
   18648:	ldrb	r3, [r1, #2]
   1864c:	cmp	r3, #32
   18650:	addhi	r0, r1, #2
   18654:	bls	18618 <_start@@Base+0x2df8>
   18658:	b	18628 <_start@@Base+0x2e08>
   1865c:	mov	r3, #0
   18660:	mov	r2, r4
   18664:	add	r1, r0, #1
   18668:	str	r3, [r6]
   1866c:	mov	r0, r5
   18670:	pop	{r4, r5, r6, lr}
   18674:	b	17770 <_start@@Base+0x1f50>
   18678:	ldr	ip, [r0, #12]
   1867c:	cmp	ip, #0
   18680:	ldrb	ip, [r1, r3]
   18684:	beq	1870c <_start@@Base+0x2eec>
   18688:	cmp	ip, #58	; 0x3a
   1868c:	cmpne	ip, #32
   18690:	movls	ip, #0
   18694:	add	r3, r1, r3
   18698:	movhi	ip, #1
   1869c:	strls	ip, [r0, #12]
   186a0:	bhi	18714 <_start@@Base+0x2ef4>
   186a4:	push	{r4, r5, r6, lr}
   186a8:	mov	r5, r2
   186ac:	sub	r2, r2, r3
   186b0:	cmp	r2, #1
   186b4:	mov	r4, r0
   186b8:	ble	186cc <_start@@Base+0x2eac>
   186bc:	ldrb	r2, [r3]
   186c0:	cmp	r2, #32
   186c4:	bhi	186e0 <_start@@Base+0x2ec0>
   186c8:	beq	18728 <_start@@Base+0x2f08>
   186cc:	mov	r1, r3
   186d0:	mov	r2, r5
   186d4:	mov	r0, r4
   186d8:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   186dc:	mov	r3, r0
   186e0:	cmp	r5, r3
   186e4:	beq	186f4 <_start@@Base+0x2ed4>
   186e8:	ldrb	r2, [r3]
   186ec:	cmp	r2, #58	; 0x3a
   186f0:	beq	1873c <_start@@Base+0x2f1c>
   186f4:	mov	r2, r5
   186f8:	mov	r1, r3
   186fc:	mov	r0, r4
   18700:	mov	r3, #4
   18704:	pop	{r4, r5, r6, lr}
   18708:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   1870c:	cmp	ip, #34	; 0x22
   18710:	beq	1871c <_start@@Base+0x2efc>
   18714:	mov	r0, r1
   18718:	bx	lr
   1871c:	add	r3, r3, #1
   18720:	add	r3, r1, r3
   18724:	b	186a4 <_start@@Base+0x2e84>
   18728:	ldrb	r2, [r3, #1]
   1872c:	cmp	r2, #32
   18730:	addhi	r3, r3, #1
   18734:	bls	186cc <_start@@Base+0x2eac>
   18738:	b	186e0 <_start@@Base+0x2ec0>
   1873c:	mov	r2, r5
   18740:	mov	r0, r4
   18744:	add	r1, r3, #1
   18748:	pop	{r4, r5, r6, lr}
   1874c:	b	17770 <_start@@Base+0x1f50>
   18750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18754:	sub	sp, sp, #36	; 0x24
   18758:	mov	ip, #0
   1875c:	str	r3, [sp, #12]
   18760:	ldr	r3, [sp, #72]	; 0x48
   18764:	cmp	r1, r2
   18768:	mov	r5, r1
   1876c:	mov	r6, r2
   18770:	str	ip, [r3]
   18774:	mov	r8, r0
   18778:	beq	188bc <_start@@Base+0x309c>
   1877c:	ldrb	r3, [r1]
   18780:	cmp	r3, #34	; 0x22
   18784:	beq	1886c <_start@@Base+0x304c>
   18788:	cmp	r3, #46	; 0x2e
   1878c:	movne	r3, #1
   18790:	strne	r3, [r0, #12]
   18794:	beq	188cc <_start@@Base+0x30ac>
   18798:	add	fp, sp, #16
   1879c:	add	sl, sp, #20
   187a0:	add	r9, sp, #24
   187a4:	ldr	r3, [sp, #12]
   187a8:	mov	r7, r3
   187ac:	ldr	r4, [r3]
   187b0:	b	187c8 <_start@@Base+0x2fa8>
   187b4:	cmp	r5, r0
   187b8:	bne	187f4 <_start@@Base+0x2fd4>
   187bc:	ldr	r4, [r7, #4]!
   187c0:	cmp	r4, #0
   187c4:	beq	1883c <_start@@Base+0x301c>
   187c8:	stm	sp, {r9, sl}
   187cc:	mov	r3, fp
   187d0:	mov	r2, r6
   187d4:	mov	r1, r5
   187d8:	mov	r0, r8
   187dc:	blx	r4
   187e0:	cmp	r6, r0
   187e4:	bne	187b4 <_start@@Base+0x2f94>
   187e8:	mov	r0, r6
   187ec:	add	sp, sp, #36	; 0x24
   187f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187f4:	ldr	r3, [sp, #16]
   187f8:	mov	r4, r0
   187fc:	cmp	r3, #0
   18800:	ldrd	r0, [sp, #24]
   18804:	beq	18860 <_start@@Base+0x3040>
   18808:	bl	3dd10 <flatcc_json_printer_clear@@Base+0x7c0>
   1880c:	vmov	s15, r0
   18810:	vneg.f32	s14, s15
   18814:	ldr	r3, [sp, #72]	; 0x48
   18818:	vldr	s15, [r3]
   1881c:	ldr	r3, [sp, #20]
   18820:	cmp	r3, #0
   18824:	vadd.f32	s15, s15, s14
   18828:	ldr	r3, [sp, #72]	; 0x48
   1882c:	vstr	s15, [r3]
   18830:	beq	18900 <_start@@Base+0x30e0>
   18834:	mov	r5, r4
   18838:	b	187a4 <_start@@Base+0x2f84>
   1883c:	mov	r2, r6
   18840:	mov	r1, r5
   18844:	mov	r0, r8
   18848:	mov	r3, #23
   1884c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   18850:	mov	r6, r0
   18854:	mov	r0, r6
   18858:	add	sp, sp, #36	; 0x24
   1885c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18860:	bl	3dd10 <flatcc_json_printer_clear@@Base+0x7c0>
   18864:	vmov	s14, r0
   18868:	b	18814 <_start@@Base+0x2ff4>
   1886c:	add	r5, r1, #1
   18870:	sub	r3, r6, r5
   18874:	mov	r2, #0
   18878:	str	r2, [r0, #12]
   1887c:	cmp	r3, #1
   18880:	ble	18894 <_start@@Base+0x3074>
   18884:	ldrb	r3, [r5]
   18888:	cmp	r3, #32
   1888c:	bhi	188a8 <_start@@Base+0x3088>
   18890:	beq	188ec <_start@@Base+0x30cc>
   18894:	mov	r1, r5
   18898:	mov	r2, r6
   1889c:	mov	r0, r8
   188a0:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   188a4:	mov	r5, r0
   188a8:	cmp	r6, r5
   188ac:	bne	18798 <_start@@Base+0x2f78>
   188b0:	mov	r0, r6
   188b4:	add	sp, sp, #36	; 0x24
   188b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188bc:	ldr	r3, [r0, #12]
   188c0:	cmp	r3, #0
   188c4:	beq	18894 <_start@@Base+0x3074>
   188c8:	b	187e8 <_start@@Base+0x2fc8>
   188cc:	mov	r3, #5
   188d0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   188d4:	ldr	r3, [r8, #12]
   188d8:	cmp	r3, #0
   188dc:	mov	r5, r0
   188e0:	subeq	r3, r6, r0
   188e4:	beq	1887c <_start@@Base+0x305c>
   188e8:	b	188a8 <_start@@Base+0x3088>
   188ec:	ldrb	r3, [r5, #1]
   188f0:	cmp	r3, #32
   188f4:	addhi	r5, r5, #1
   188f8:	bls	18894 <_start@@Base+0x3074>
   188fc:	b	188a8 <_start@@Base+0x3088>
   18900:	mov	r6, r4
   18904:	b	187e8 <_start@@Base+0x2fc8>
   18908:	cmp	r1, r2
   1890c:	beq	1891c <_start@@Base+0x30fc>
   18910:	ldrb	ip, [r1]
   18914:	cmp	ip, #91	; 0x5b
   18918:	beq	1892c <_start@@Base+0x310c>
   1891c:	mov	ip, #0
   18920:	str	ip, [r3]
   18924:	mov	r3, #22
   18928:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   1892c:	push	{r4, r5, r6, lr}
   18930:	mov	r5, r0
   18934:	add	r0, r1, #1
   18938:	mov	r6, r3
   1893c:	sub	r3, r2, r0
   18940:	cmp	r3, #1
   18944:	mov	r4, r2
   18948:	ble	1895c <_start@@Base+0x313c>
   1894c:	ldrb	r3, [r1, #1]
   18950:	cmp	r3, #32
   18954:	bhi	1896c <_start@@Base+0x314c>
   18958:	beq	1898c <_start@@Base+0x316c>
   1895c:	mov	r1, r0
   18960:	mov	r2, r4
   18964:	mov	r0, r5
   18968:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1896c:	cmp	r4, r0
   18970:	beq	18980 <_start@@Base+0x3160>
   18974:	ldrb	r3, [r0]
   18978:	cmp	r3, #93	; 0x5d
   1897c:	beq	189a0 <_start@@Base+0x3180>
   18980:	mov	r3, #1
   18984:	str	r3, [r6]
   18988:	pop	{r4, r5, r6, pc}
   1898c:	ldrb	r3, [r1, #2]
   18990:	cmp	r3, #32
   18994:	addhi	r0, r1, #2
   18998:	bls	1895c <_start@@Base+0x313c>
   1899c:	b	1896c <_start@@Base+0x314c>
   189a0:	mov	r3, #0
   189a4:	mov	r2, r4
   189a8:	add	r1, r0, #1
   189ac:	str	r3, [r6]
   189b0:	mov	r0, r5
   189b4:	pop	{r4, r5, r6, lr}
   189b8:	b	17770 <_start@@Base+0x1f50>
   189bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189c0:	sub	sp, sp, #36	; 0x24
   189c4:	mov	r8, #0
   189c8:	str	r3, [sp, #12]
   189cc:	ldr	r3, [sp, #72]	; 0x48
   189d0:	mov	r9, #0
   189d4:	cmp	r1, r2
   189d8:	strd	r8, [r3]
   189dc:	mov	r5, r1
   189e0:	mov	r6, r2
   189e4:	mov	r8, r0
   189e8:	beq	18b2c <_start@@Base+0x330c>
   189ec:	ldrb	r3, [r1]
   189f0:	cmp	r3, #34	; 0x22
   189f4:	beq	18adc <_start@@Base+0x32bc>
   189f8:	cmp	r3, #46	; 0x2e
   189fc:	movne	r3, #1
   18a00:	strne	r3, [r0, #12]
   18a04:	beq	18b3c <_start@@Base+0x331c>
   18a08:	add	fp, sp, #16
   18a0c:	add	sl, sp, #20
   18a10:	add	r9, sp, #24
   18a14:	ldr	r3, [sp, #12]
   18a18:	mov	r7, r3
   18a1c:	ldr	r4, [r3]
   18a20:	b	18a38 <_start@@Base+0x3218>
   18a24:	cmp	r5, r0
   18a28:	bne	18a64 <_start@@Base+0x3244>
   18a2c:	ldr	r4, [r7, #4]!
   18a30:	cmp	r4, #0
   18a34:	beq	18aac <_start@@Base+0x328c>
   18a38:	stm	sp, {r9, sl}
   18a3c:	mov	r3, fp
   18a40:	mov	r2, r6
   18a44:	mov	r1, r5
   18a48:	mov	r0, r8
   18a4c:	blx	r4
   18a50:	cmp	r6, r0
   18a54:	bne	18a24 <_start@@Base+0x3204>
   18a58:	mov	r0, r6
   18a5c:	add	sp, sp, #36	; 0x24
   18a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a64:	ldr	r3, [sp, #16]
   18a68:	mov	r4, r0
   18a6c:	cmp	r3, #0
   18a70:	ldrd	r0, [sp, #24]
   18a74:	beq	18ad0 <_start@@Base+0x32b0>
   18a78:	bl	3dad8 <flatcc_json_printer_clear@@Base+0x588>
   18a7c:	vmov	d7, r0, r1
   18a80:	vneg.f64	d6, d7
   18a84:	ldr	r3, [sp, #72]	; 0x48
   18a88:	vldr	d7, [r3]
   18a8c:	ldr	r3, [sp, #20]
   18a90:	cmp	r3, #0
   18a94:	vadd.f64	d7, d7, d6
   18a98:	ldr	r3, [sp, #72]	; 0x48
   18a9c:	vstr	d7, [r3]
   18aa0:	beq	18b70 <_start@@Base+0x3350>
   18aa4:	mov	r5, r4
   18aa8:	b	18a14 <_start@@Base+0x31f4>
   18aac:	mov	r2, r6
   18ab0:	mov	r1, r5
   18ab4:	mov	r0, r8
   18ab8:	mov	r3, #23
   18abc:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   18ac0:	mov	r6, r0
   18ac4:	mov	r0, r6
   18ac8:	add	sp, sp, #36	; 0x24
   18acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ad0:	bl	3dad8 <flatcc_json_printer_clear@@Base+0x588>
   18ad4:	vmov	d6, r0, r1
   18ad8:	b	18a84 <_start@@Base+0x3264>
   18adc:	add	r5, r1, #1
   18ae0:	sub	r3, r6, r5
   18ae4:	mov	r2, #0
   18ae8:	str	r2, [r0, #12]
   18aec:	cmp	r3, #1
   18af0:	ble	18b04 <_start@@Base+0x32e4>
   18af4:	ldrb	r3, [r5]
   18af8:	cmp	r3, #32
   18afc:	bhi	18b18 <_start@@Base+0x32f8>
   18b00:	beq	18b5c <_start@@Base+0x333c>
   18b04:	mov	r1, r5
   18b08:	mov	r2, r6
   18b0c:	mov	r0, r8
   18b10:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   18b14:	mov	r5, r0
   18b18:	cmp	r6, r5
   18b1c:	bne	18a08 <_start@@Base+0x31e8>
   18b20:	mov	r0, r6
   18b24:	add	sp, sp, #36	; 0x24
   18b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b2c:	ldr	r3, [r0, #12]
   18b30:	cmp	r3, #0
   18b34:	beq	18b04 <_start@@Base+0x32e4>
   18b38:	b	18a58 <_start@@Base+0x3238>
   18b3c:	mov	r3, #5
   18b40:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   18b44:	ldr	r3, [r8, #12]
   18b48:	cmp	r3, #0
   18b4c:	mov	r5, r0
   18b50:	subeq	r3, r6, r0
   18b54:	beq	18aec <_start@@Base+0x32cc>
   18b58:	b	18b18 <_start@@Base+0x32f8>
   18b5c:	ldrb	r3, [r5, #1]
   18b60:	cmp	r3, #32
   18b64:	addhi	r5, r5, #1
   18b68:	bls	18b04 <_start@@Base+0x32e4>
   18b6c:	b	18b18 <_start@@Base+0x32f8>
   18b70:	mov	r6, r4
   18b74:	b	18a58 <_start@@Base+0x3238>
   18b78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b7c:	sub	sp, sp, #36	; 0x24
   18b80:	mov	ip, #0
   18b84:	str	r3, [sp, #12]
   18b88:	ldr	r3, [sp, #72]	; 0x48
   18b8c:	cmp	r1, r2
   18b90:	mov	r6, r1
   18b94:	mov	r5, r2
   18b98:	strb	ip, [r3]
   18b9c:	mov	r8, r0
   18ba0:	beq	18d00 <_start@@Base+0x34e0>
   18ba4:	ldrb	r3, [r1]
   18ba8:	cmp	r3, #34	; 0x22
   18bac:	beq	18cbc <_start@@Base+0x349c>
   18bb0:	cmp	r3, #46	; 0x2e
   18bb4:	movne	r3, #1
   18bb8:	strne	r3, [r0, #12]
   18bbc:	beq	18d10 <_start@@Base+0x34f0>
   18bc0:	add	fp, sp, #16
   18bc4:	add	sl, sp, #20
   18bc8:	add	r9, sp, #24
   18bcc:	mov	r3, #0
   18bd0:	str	r3, [sp, #8]
   18bd4:	ldr	r3, [sp, #12]
   18bd8:	mov	r7, r3
   18bdc:	ldr	r4, [r3]
   18be0:	b	18bf8 <_start@@Base+0x33d8>
   18be4:	cmp	r6, r0
   18be8:	bne	18c24 <_start@@Base+0x3404>
   18bec:	ldr	r4, [r7, #4]!
   18bf0:	cmp	r4, #0
   18bf4:	beq	18c78 <_start@@Base+0x3458>
   18bf8:	stm	sp, {r9, sl}
   18bfc:	mov	r3, fp
   18c00:	mov	r2, r5
   18c04:	mov	r1, r6
   18c08:	mov	r0, r8
   18c0c:	blx	r4
   18c10:	cmp	r5, r0
   18c14:	bne	18be4 <_start@@Base+0x33c4>
   18c18:	mov	r0, r5
   18c1c:	add	sp, sp, #36	; 0x24
   18c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c24:	ldr	r3, [sp, #16]
   18c28:	mov	r4, r0
   18c2c:	cmp	r3, #0
   18c30:	bne	18c9c <_start@@Base+0x347c>
   18c34:	ldr	r3, [sp, #28]
   18c38:	ldr	r2, [sp, #24]
   18c3c:	orrs	r3, r2, r3
   18c40:	movne	r3, #1
   18c44:	moveq	r3, #0
   18c48:	str	r3, [sp, #8]
   18c4c:	ldr	r3, [sp, #72]	; 0x48
   18c50:	ldr	r2, [sp, #20]
   18c54:	ldr	r1, [sp, #8]
   18c58:	ldrb	r3, [r3]
   18c5c:	cmp	r2, #0
   18c60:	ldr	r2, [sp, #72]	; 0x48
   18c64:	add	r3, r1, r3
   18c68:	strb	r3, [r2]
   18c6c:	beq	18d44 <_start@@Base+0x3524>
   18c70:	mov	r6, r4
   18c74:	b	18bd4 <_start@@Base+0x33b4>
   18c78:	mov	r2, r5
   18c7c:	mov	r1, r6
   18c80:	mov	r0, r8
   18c84:	mov	r3, #23
   18c88:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   18c8c:	mov	r5, r0
   18c90:	mov	r0, r5
   18c94:	add	sp, sp, #36	; 0x24
   18c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c9c:	mov	r3, #8
   18ca0:	mov	r2, r5
   18ca4:	mov	r1, r4
   18ca8:	mov	r0, r8
   18cac:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   18cb0:	cmp	r5, r0
   18cb4:	bne	18c4c <_start@@Base+0x342c>
   18cb8:	b	18c18 <_start@@Base+0x33f8>
   18cbc:	add	r6, r1, #1
   18cc0:	sub	r3, r2, r6
   18cc4:	str	ip, [r0, #12]
   18cc8:	cmp	r3, #1
   18ccc:	ble	18ce0 <_start@@Base+0x34c0>
   18cd0:	ldrb	r3, [r6]
   18cd4:	cmp	r3, #32
   18cd8:	bhi	18cf4 <_start@@Base+0x34d4>
   18cdc:	beq	18d30 <_start@@Base+0x3510>
   18ce0:	mov	r1, r6
   18ce4:	mov	r2, r5
   18ce8:	mov	r0, r8
   18cec:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   18cf0:	mov	r6, r0
   18cf4:	cmp	r5, r6
   18cf8:	bne	18bc0 <_start@@Base+0x33a0>
   18cfc:	b	18c18 <_start@@Base+0x33f8>
   18d00:	ldr	r3, [r0, #12]
   18d04:	cmp	r3, #0
   18d08:	bne	18c18 <_start@@Base+0x33f8>
   18d0c:	b	18ce0 <_start@@Base+0x34c0>
   18d10:	mov	r3, #5
   18d14:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   18d18:	ldr	r3, [r8, #12]
   18d1c:	cmp	r3, #0
   18d20:	mov	r6, r0
   18d24:	subeq	r3, r5, r0
   18d28:	beq	18cc8 <_start@@Base+0x34a8>
   18d2c:	b	18cf4 <_start@@Base+0x34d4>
   18d30:	ldrb	r3, [r6, #1]
   18d34:	cmp	r3, #32
   18d38:	addhi	r6, r6, #1
   18d3c:	bls	18ce0 <_start@@Base+0x34c0>
   18d40:	b	18cf4 <_start@@Base+0x34d4>
   18d44:	mov	r5, r4
   18d48:	b	18c18 <_start@@Base+0x33f8>
   18d4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d50:	sub	sp, sp, #36	; 0x24
   18d54:	mov	ip, #0
   18d58:	str	r3, [sp, #8]
   18d5c:	ldr	r3, [sp, #72]	; 0x48
   18d60:	cmp	r1, r2
   18d64:	mov	r6, r1
   18d68:	mov	r5, r2
   18d6c:	strh	ip, [r3]
   18d70:	mov	r8, r0
   18d74:	beq	18ef8 <_start@@Base+0x36d8>
   18d78:	ldrb	r3, [r1]
   18d7c:	cmp	r3, #34	; 0x22
   18d80:	beq	18eac <_start@@Base+0x368c>
   18d84:	cmp	r3, #46	; 0x2e
   18d88:	movne	r3, #1
   18d8c:	strne	r3, [r0, #12]
   18d90:	beq	18f08 <_start@@Base+0x36e8>
   18d94:	add	fp, sp, #16
   18d98:	add	sl, sp, #20
   18d9c:	add	r9, sp, #24
   18da0:	mov	r3, #0
   18da4:	str	r3, [sp, #12]
   18da8:	ldr	r7, [sp, #8]
   18dac:	ldr	r4, [r7]
   18db0:	b	18dc8 <_start@@Base+0x35a8>
   18db4:	cmp	r6, r0
   18db8:	bne	18df4 <_start@@Base+0x35d4>
   18dbc:	ldr	r4, [r7, #4]!
   18dc0:	cmp	r4, #0
   18dc4:	beq	18e50 <_start@@Base+0x3630>
   18dc8:	stm	sp, {r9, sl}
   18dcc:	mov	r3, fp
   18dd0:	mov	r2, r5
   18dd4:	mov	r1, r6
   18dd8:	mov	r0, r8
   18ddc:	blx	r4
   18de0:	cmp	r5, r0
   18de4:	bne	18db4 <_start@@Base+0x3594>
   18de8:	mov	r0, r5
   18dec:	add	sp, sp, #36	; 0x24
   18df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18df4:	ldr	r3, [sp, #16]
   18df8:	mov	r4, r0
   18dfc:	cmp	r3, #0
   18e00:	bne	18e74 <_start@@Base+0x3654>
   18e04:	ldrd	r2, [sp, #24]
   18e08:	ldr	r0, [pc, #308]	; 18f44 <_start@@Base+0x3724>
   18e0c:	mov	r1, #0
   18e10:	cmp	r3, r1
   18e14:	cmpeq	r2, r0
   18e18:	uxthls	r3, r2
   18e1c:	strls	r3, [sp, #12]
   18e20:	bhi	18e94 <_start@@Base+0x3674>
   18e24:	ldr	r3, [sp, #72]	; 0x48
   18e28:	ldr	r2, [sp, #20]
   18e2c:	ldr	r1, [sp, #12]
   18e30:	ldrh	r3, [r3]
   18e34:	cmp	r2, #0
   18e38:	ldr	r2, [sp, #72]	; 0x48
   18e3c:	add	r3, r1, r3
   18e40:	strh	r3, [r2]
   18e44:	beq	18f3c <_start@@Base+0x371c>
   18e48:	mov	r6, r4
   18e4c:	b	18da8 <_start@@Base+0x3588>
   18e50:	mov	r2, r5
   18e54:	mov	r1, r6
   18e58:	mov	r0, r8
   18e5c:	mov	r3, #23
   18e60:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   18e64:	mov	r5, r0
   18e68:	mov	r0, r5
   18e6c:	add	sp, sp, #36	; 0x24
   18e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e74:	mov	r3, #8
   18e78:	mov	r2, r5
   18e7c:	mov	r1, r4
   18e80:	mov	r0, r8
   18e84:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   18e88:	cmp	r5, r0
   18e8c:	bne	18e24 <_start@@Base+0x3604>
   18e90:	b	18de8 <_start@@Base+0x35c8>
   18e94:	mov	r3, #7
   18e98:	mov	r2, r5
   18e9c:	mov	r1, r4
   18ea0:	mov	r0, r8
   18ea4:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   18ea8:	b	18e88 <_start@@Base+0x3668>
   18eac:	add	r6, r1, #1
   18eb0:	sub	r3, r2, r6
   18eb4:	str	ip, [r0, #12]
   18eb8:	cmp	r3, #1
   18ebc:	ble	18ed0 <_start@@Base+0x36b0>
   18ec0:	ldrb	r3, [r6]
   18ec4:	cmp	r3, #32
   18ec8:	bhi	18ee4 <_start@@Base+0x36c4>
   18ecc:	beq	18f28 <_start@@Base+0x3708>
   18ed0:	mov	r1, r6
   18ed4:	mov	r2, r5
   18ed8:	mov	r0, r8
   18edc:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   18ee0:	mov	r6, r0
   18ee4:	cmp	r5, r6
   18ee8:	bne	18d94 <_start@@Base+0x3574>
   18eec:	mov	r0, r5
   18ef0:	add	sp, sp, #36	; 0x24
   18ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ef8:	ldr	r3, [r0, #12]
   18efc:	cmp	r3, #0
   18f00:	beq	18ed0 <_start@@Base+0x36b0>
   18f04:	b	18de8 <_start@@Base+0x35c8>
   18f08:	mov	r3, #5
   18f0c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   18f10:	ldr	r3, [r8, #12]
   18f14:	cmp	r3, #0
   18f18:	mov	r6, r0
   18f1c:	subeq	r3, r5, r0
   18f20:	beq	18eb8 <_start@@Base+0x3698>
   18f24:	b	18ee4 <_start@@Base+0x36c4>
   18f28:	ldrb	r3, [r6, #1]
   18f2c:	cmp	r3, #32
   18f30:	addhi	r6, r6, #1
   18f34:	bls	18ed0 <_start@@Base+0x36b0>
   18f38:	b	18ee4 <_start@@Base+0x36c4>
   18f3c:	mov	r5, r4
   18f40:	b	18de8 <_start@@Base+0x35c8>
   18f44:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   18f48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f4c:	sub	sp, sp, #36	; 0x24
   18f50:	mov	ip, #0
   18f54:	str	r3, [sp, #8]
   18f58:	ldr	r3, [sp, #72]	; 0x48
   18f5c:	cmp	r1, r2
   18f60:	mov	r6, r1
   18f64:	mov	r5, r2
   18f68:	str	ip, [r3]
   18f6c:	mov	r8, r0
   18f70:	beq	190f0 <_start@@Base+0x38d0>
   18f74:	ldrb	r3, [r1]
   18f78:	cmp	r3, #34	; 0x22
   18f7c:	beq	190a4 <_start@@Base+0x3884>
   18f80:	cmp	r3, #46	; 0x2e
   18f84:	movne	r3, #1
   18f88:	strne	r3, [r0, #12]
   18f8c:	beq	19100 <_start@@Base+0x38e0>
   18f90:	add	fp, sp, #16
   18f94:	add	sl, sp, #20
   18f98:	add	r9, sp, #24
   18f9c:	mov	r3, #0
   18fa0:	str	r3, [sp, #12]
   18fa4:	ldr	r7, [sp, #8]
   18fa8:	ldr	r4, [r7]
   18fac:	b	18fc4 <_start@@Base+0x37a4>
   18fb0:	cmp	r6, r0
   18fb4:	bne	18ff0 <_start@@Base+0x37d0>
   18fb8:	ldr	r4, [r7, #4]!
   18fbc:	cmp	r4, #0
   18fc0:	beq	19048 <_start@@Base+0x3828>
   18fc4:	stm	sp, {r9, sl}
   18fc8:	mov	r3, fp
   18fcc:	mov	r2, r5
   18fd0:	mov	r1, r6
   18fd4:	mov	r0, r8
   18fd8:	blx	r4
   18fdc:	cmp	r5, r0
   18fe0:	bne	18fb0 <_start@@Base+0x3790>
   18fe4:	mov	r0, r5
   18fe8:	add	sp, sp, #36	; 0x24
   18fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ff0:	ldr	r3, [sp, #16]
   18ff4:	mov	r4, r0
   18ff8:	cmp	r3, #0
   18ffc:	bne	1906c <_start@@Base+0x384c>
   19000:	ldrd	r2, [sp, #24]
   19004:	mov	r1, #0
   19008:	mvn	r0, #0
   1900c:	cmp	r3, r1
   19010:	cmpeq	r2, r0
   19014:	strls	r2, [sp, #12]
   19018:	bhi	1908c <_start@@Base+0x386c>
   1901c:	ldr	r3, [sp, #72]	; 0x48
   19020:	ldr	r2, [sp, #20]
   19024:	ldr	r1, [sp, #12]
   19028:	ldr	r3, [r3]
   1902c:	cmp	r2, #0
   19030:	ldr	r2, [sp, #72]	; 0x48
   19034:	add	r3, r3, r1
   19038:	str	r3, [r2]
   1903c:	beq	19134 <_start@@Base+0x3914>
   19040:	mov	r6, r4
   19044:	b	18fa4 <_start@@Base+0x3784>
   19048:	mov	r2, r5
   1904c:	mov	r1, r6
   19050:	mov	r0, r8
   19054:	mov	r3, #23
   19058:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1905c:	mov	r5, r0
   19060:	mov	r0, r5
   19064:	add	sp, sp, #36	; 0x24
   19068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1906c:	mov	r3, #8
   19070:	mov	r2, r5
   19074:	mov	r1, r4
   19078:	mov	r0, r8
   1907c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   19080:	cmp	r5, r0
   19084:	bne	1901c <_start@@Base+0x37fc>
   19088:	b	18fe4 <_start@@Base+0x37c4>
   1908c:	mov	r3, #7
   19090:	mov	r2, r5
   19094:	mov	r1, r4
   19098:	mov	r0, r8
   1909c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   190a0:	b	19080 <_start@@Base+0x3860>
   190a4:	add	r6, r1, #1
   190a8:	sub	r3, r2, r6
   190ac:	str	ip, [r0, #12]
   190b0:	cmp	r3, #1
   190b4:	ble	190c8 <_start@@Base+0x38a8>
   190b8:	ldrb	r3, [r6]
   190bc:	cmp	r3, #32
   190c0:	bhi	190dc <_start@@Base+0x38bc>
   190c4:	beq	19120 <_start@@Base+0x3900>
   190c8:	mov	r1, r6
   190cc:	mov	r2, r5
   190d0:	mov	r0, r8
   190d4:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   190d8:	mov	r6, r0
   190dc:	cmp	r5, r6
   190e0:	bne	18f90 <_start@@Base+0x3770>
   190e4:	mov	r0, r5
   190e8:	add	sp, sp, #36	; 0x24
   190ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190f0:	ldr	r3, [r0, #12]
   190f4:	cmp	r3, #0
   190f8:	beq	190c8 <_start@@Base+0x38a8>
   190fc:	b	18fe4 <_start@@Base+0x37c4>
   19100:	mov	r3, #5
   19104:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   19108:	ldr	r3, [r8, #12]
   1910c:	cmp	r3, #0
   19110:	mov	r6, r0
   19114:	subeq	r3, r5, r0
   19118:	beq	190b0 <_start@@Base+0x3890>
   1911c:	b	190dc <_start@@Base+0x38bc>
   19120:	ldrb	r3, [r6, #1]
   19124:	cmp	r3, #32
   19128:	addhi	r6, r6, #1
   1912c:	bls	190c8 <_start@@Base+0x38a8>
   19130:	b	190dc <_start@@Base+0x38bc>
   19134:	mov	r5, r4
   19138:	b	18fe4 <_start@@Base+0x37c4>
   1913c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19140:	sub	sp, sp, #36	; 0x24
   19144:	mov	ip, #0
   19148:	str	r3, [sp, #12]
   1914c:	ldr	r3, [sp, #72]	; 0x48
   19150:	cmp	r1, r2
   19154:	mov	r5, r1
   19158:	mov	r6, r2
   1915c:	strh	ip, [r3]
   19160:	mov	r8, r0
   19164:	beq	19300 <_start@@Base+0x3ae0>
   19168:	ldrb	r3, [r1]
   1916c:	cmp	r3, #34	; 0x22
   19170:	beq	192b4 <_start@@Base+0x3a94>
   19174:	cmp	r3, #46	; 0x2e
   19178:	movne	r3, #1
   1917c:	strne	r3, [r0, #12]
   19180:	beq	19310 <_start@@Base+0x3af0>
   19184:	add	fp, sp, #16
   19188:	add	sl, sp, #20
   1918c:	add	r9, sp, #24
   19190:	mov	r3, #0
   19194:	str	r3, [sp, #8]
   19198:	ldr	r7, [sp, #12]
   1919c:	ldr	r4, [r7]
   191a0:	b	191b8 <_start@@Base+0x3998>
   191a4:	cmp	r5, r0
   191a8:	bne	191e4 <_start@@Base+0x39c4>
   191ac:	ldr	r4, [r7, #4]!
   191b0:	cmp	r4, #0
   191b4:	beq	1923c <_start@@Base+0x3a1c>
   191b8:	stm	sp, {r9, sl}
   191bc:	mov	r3, fp
   191c0:	mov	r2, r6
   191c4:	mov	r1, r5
   191c8:	mov	r0, r8
   191cc:	blx	r4
   191d0:	cmp	r6, r0
   191d4:	bne	191a4 <_start@@Base+0x3984>
   191d8:	mov	r0, r6
   191dc:	add	sp, sp, #36	; 0x24
   191e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191e4:	ldr	r1, [sp, #16]
   191e8:	mov	r4, r0
   191ec:	cmp	r1, #0
   191f0:	ldrd	r2, [sp, #24]
   191f4:	beq	19260 <_start@@Base+0x3a40>
   191f8:	cmp	r3, #0
   191fc:	cmpeq	r2, #32768	; 0x8000
   19200:	rsbls	r2, r2, #0
   19204:	sxthls	r3, r2
   19208:	strls	r3, [sp, #8]
   1920c:	bhi	19294 <_start@@Base+0x3a74>
   19210:	ldr	r3, [sp, #72]	; 0x48
   19214:	ldr	r2, [sp, #20]
   19218:	ldr	r1, [sp, #8]
   1921c:	ldrh	r3, [r3]
   19220:	cmp	r2, #0
   19224:	ldr	r2, [sp, #72]	; 0x48
   19228:	add	r3, r3, r1
   1922c:	strh	r3, [r2]
   19230:	beq	19344 <_start@@Base+0x3b24>
   19234:	mov	r5, r4
   19238:	b	19198 <_start@@Base+0x3978>
   1923c:	mov	r2, r6
   19240:	mov	r1, r5
   19244:	mov	r0, r8
   19248:	mov	r3, #23
   1924c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   19250:	mov	r6, r0
   19254:	mov	r0, r6
   19258:	add	sp, sp, #36	; 0x24
   1925c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19260:	ldr	r0, [pc, #228]	; 1934c <_start@@Base+0x3b2c>
   19264:	mov	r1, #0
   19268:	cmp	r3, r1
   1926c:	cmpeq	r2, r0
   19270:	sxthls	r3, r2
   19274:	strls	r3, [sp, #8]
   19278:	bls	19210 <_start@@Base+0x39f0>
   1927c:	mov	r3, #7
   19280:	mov	r2, r6
   19284:	mov	r1, r4
   19288:	mov	r0, r8
   1928c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   19290:	b	192a8 <_start@@Base+0x3a88>
   19294:	mov	r3, #8
   19298:	mov	r2, r6
   1929c:	mov	r1, r4
   192a0:	mov	r0, r8
   192a4:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   192a8:	cmp	r6, r0
   192ac:	bne	19210 <_start@@Base+0x39f0>
   192b0:	b	191d8 <_start@@Base+0x39b8>
   192b4:	add	r5, r1, #1
   192b8:	sub	r3, r2, r5
   192bc:	str	ip, [r0, #12]
   192c0:	cmp	r3, #1
   192c4:	ble	192d8 <_start@@Base+0x3ab8>
   192c8:	ldrb	r3, [r5]
   192cc:	cmp	r3, #32
   192d0:	bhi	192ec <_start@@Base+0x3acc>
   192d4:	beq	19330 <_start@@Base+0x3b10>
   192d8:	mov	r1, r5
   192dc:	mov	r2, r6
   192e0:	mov	r0, r8
   192e4:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   192e8:	mov	r5, r0
   192ec:	cmp	r6, r5
   192f0:	bne	19184 <_start@@Base+0x3964>
   192f4:	mov	r0, r6
   192f8:	add	sp, sp, #36	; 0x24
   192fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19300:	ldr	r3, [r0, #12]
   19304:	cmp	r3, #0
   19308:	beq	192d8 <_start@@Base+0x3ab8>
   1930c:	b	191d8 <_start@@Base+0x39b8>
   19310:	mov	r3, #5
   19314:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   19318:	ldr	r3, [r8, #12]
   1931c:	cmp	r3, #0
   19320:	mov	r5, r0
   19324:	subeq	r3, r6, r0
   19328:	beq	192c0 <_start@@Base+0x3aa0>
   1932c:	b	192ec <_start@@Base+0x3acc>
   19330:	ldrb	r3, [r5, #1]
   19334:	cmp	r3, #32
   19338:	addhi	r5, r5, #1
   1933c:	bls	192d8 <_start@@Base+0x3ab8>
   19340:	b	192ec <_start@@Base+0x3acc>
   19344:	mov	r6, r4
   19348:	b	191d8 <_start@@Base+0x39b8>
   1934c:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   19350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19354:	sub	sp, sp, #36	; 0x24
   19358:	mov	ip, #0
   1935c:	str	r3, [sp, #12]
   19360:	ldr	r3, [sp, #72]	; 0x48
   19364:	cmp	r1, r2
   19368:	mov	r5, r1
   1936c:	mov	r6, r2
   19370:	strb	ip, [r3]
   19374:	mov	r8, r0
   19378:	beq	19510 <_start@@Base+0x3cf0>
   1937c:	ldrb	r3, [r1]
   19380:	cmp	r3, #34	; 0x22
   19384:	beq	194c4 <_start@@Base+0x3ca4>
   19388:	cmp	r3, #46	; 0x2e
   1938c:	movne	r3, #1
   19390:	strne	r3, [r0, #12]
   19394:	beq	19520 <_start@@Base+0x3d00>
   19398:	add	fp, sp, #16
   1939c:	add	sl, sp, #20
   193a0:	add	r9, sp, #24
   193a4:	mov	r3, #0
   193a8:	str	r3, [sp, #8]
   193ac:	ldr	r3, [sp, #12]
   193b0:	mov	r7, r3
   193b4:	ldr	r4, [r3]
   193b8:	b	193d0 <_start@@Base+0x3bb0>
   193bc:	cmp	r5, r0
   193c0:	bne	193fc <_start@@Base+0x3bdc>
   193c4:	ldr	r4, [r7, #4]!
   193c8:	cmp	r4, #0
   193cc:	beq	19454 <_start@@Base+0x3c34>
   193d0:	stm	sp, {r9, sl}
   193d4:	mov	r3, fp
   193d8:	mov	r2, r6
   193dc:	mov	r1, r5
   193e0:	mov	r0, r8
   193e4:	blx	r4
   193e8:	cmp	r6, r0
   193ec:	bne	193bc <_start@@Base+0x3b9c>
   193f0:	mov	r0, r6
   193f4:	add	sp, sp, #36	; 0x24
   193f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193fc:	ldr	r1, [sp, #16]
   19400:	mov	r4, r0
   19404:	cmp	r1, #0
   19408:	ldrd	r2, [sp, #24]
   1940c:	beq	19478 <_start@@Base+0x3c58>
   19410:	cmp	r3, #0
   19414:	cmpeq	r2, #128	; 0x80
   19418:	rsbls	r2, r2, #0
   1941c:	sxtbls	r3, r2
   19420:	strls	r3, [sp, #8]
   19424:	bhi	194a4 <_start@@Base+0x3c84>
   19428:	ldr	r3, [sp, #72]	; 0x48
   1942c:	ldr	r2, [sp, #20]
   19430:	ldr	r1, [sp, #8]
   19434:	ldrb	r3, [r3]
   19438:	cmp	r2, #0
   1943c:	ldr	r2, [sp, #72]	; 0x48
   19440:	add	r3, r3, r1
   19444:	strb	r3, [r2]
   19448:	beq	19554 <_start@@Base+0x3d34>
   1944c:	mov	r5, r4
   19450:	b	193ac <_start@@Base+0x3b8c>
   19454:	mov	r2, r6
   19458:	mov	r1, r5
   1945c:	mov	r0, r8
   19460:	mov	r3, #23
   19464:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   19468:	mov	r6, r0
   1946c:	mov	r0, r6
   19470:	add	sp, sp, #36	; 0x24
   19474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19478:	cmp	r3, #0
   1947c:	cmpeq	r2, #127	; 0x7f
   19480:	sxtbls	r3, r2
   19484:	strls	r3, [sp, #8]
   19488:	bls	19428 <_start@@Base+0x3c08>
   1948c:	mov	r3, #7
   19490:	mov	r2, r6
   19494:	mov	r1, r4
   19498:	mov	r0, r8
   1949c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   194a0:	b	194b8 <_start@@Base+0x3c98>
   194a4:	mov	r3, #8
   194a8:	mov	r2, r6
   194ac:	mov	r1, r4
   194b0:	mov	r0, r8
   194b4:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   194b8:	cmp	r6, r0
   194bc:	bne	19428 <_start@@Base+0x3c08>
   194c0:	b	193f0 <_start@@Base+0x3bd0>
   194c4:	add	r5, r1, #1
   194c8:	sub	r3, r2, r5
   194cc:	str	ip, [r0, #12]
   194d0:	cmp	r3, #1
   194d4:	ble	194e8 <_start@@Base+0x3cc8>
   194d8:	ldrb	r3, [r5]
   194dc:	cmp	r3, #32
   194e0:	bhi	194fc <_start@@Base+0x3cdc>
   194e4:	beq	19540 <_start@@Base+0x3d20>
   194e8:	mov	r1, r5
   194ec:	mov	r2, r6
   194f0:	mov	r0, r8
   194f4:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   194f8:	mov	r5, r0
   194fc:	cmp	r6, r5
   19500:	bne	19398 <_start@@Base+0x3b78>
   19504:	mov	r0, r6
   19508:	add	sp, sp, #36	; 0x24
   1950c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19510:	ldr	r3, [r0, #12]
   19514:	cmp	r3, #0
   19518:	beq	194e8 <_start@@Base+0x3cc8>
   1951c:	b	193f0 <_start@@Base+0x3bd0>
   19520:	mov	r3, #5
   19524:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   19528:	ldr	r3, [r8, #12]
   1952c:	cmp	r3, #0
   19530:	mov	r5, r0
   19534:	subeq	r3, r6, r0
   19538:	beq	194d0 <_start@@Base+0x3cb0>
   1953c:	b	194fc <_start@@Base+0x3cdc>
   19540:	ldrb	r3, [r5, #1]
   19544:	cmp	r3, #32
   19548:	addhi	r5, r5, #1
   1954c:	bls	194e8 <_start@@Base+0x3cc8>
   19550:	b	194fc <_start@@Base+0x3cdc>
   19554:	mov	r6, r4
   19558:	b	193f0 <_start@@Base+0x3bd0>
   1955c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19560:	sub	sp, sp, #36	; 0x24
   19564:	mov	ip, #0
   19568:	str	r3, [sp, #12]
   1956c:	ldr	r3, [sp, #72]	; 0x48
   19570:	cmp	r1, r2
   19574:	mov	r5, r1
   19578:	mov	r6, r2
   1957c:	str	ip, [r3]
   19580:	mov	r8, r0
   19584:	beq	1971c <_start@@Base+0x3efc>
   19588:	ldrb	r3, [r1]
   1958c:	cmp	r3, #34	; 0x22
   19590:	beq	196d0 <_start@@Base+0x3eb0>
   19594:	cmp	r3, #46	; 0x2e
   19598:	movne	r3, #1
   1959c:	strne	r3, [r0, #12]
   195a0:	beq	1972c <_start@@Base+0x3f0c>
   195a4:	add	fp, sp, #16
   195a8:	add	sl, sp, #20
   195ac:	add	r9, sp, #24
   195b0:	mov	r3, #0
   195b4:	str	r3, [sp, #8]
   195b8:	ldr	r3, [sp, #12]
   195bc:	mov	r7, r3
   195c0:	ldr	r4, [r3]
   195c4:	b	195dc <_start@@Base+0x3dbc>
   195c8:	cmp	r5, r0
   195cc:	bne	19608 <_start@@Base+0x3de8>
   195d0:	ldr	r4, [r7, #4]!
   195d4:	cmp	r4, #0
   195d8:	beq	1965c <_start@@Base+0x3e3c>
   195dc:	stm	sp, {r9, sl}
   195e0:	mov	r3, fp
   195e4:	mov	r2, r6
   195e8:	mov	r1, r5
   195ec:	mov	r0, r8
   195f0:	blx	r4
   195f4:	cmp	r6, r0
   195f8:	bne	195c8 <_start@@Base+0x3da8>
   195fc:	mov	r0, r6
   19600:	add	sp, sp, #36	; 0x24
   19604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19608:	ldr	r1, [sp, #16]
   1960c:	mov	r4, r0
   19610:	cmp	r1, #0
   19614:	ldrd	r2, [sp, #24]
   19618:	beq	19680 <_start@@Base+0x3e60>
   1961c:	cmp	r3, #0
   19620:	cmpeq	r2, #-2147483648	; 0x80000000
   19624:	rsbls	r3, r2, #0
   19628:	strls	r3, [sp, #8]
   1962c:	bhi	196b0 <_start@@Base+0x3e90>
   19630:	ldr	r3, [sp, #72]	; 0x48
   19634:	ldr	r2, [sp, #20]
   19638:	ldr	r1, [sp, #8]
   1963c:	ldr	r3, [r3]
   19640:	cmp	r2, #0
   19644:	ldr	r2, [sp, #72]	; 0x48
   19648:	add	r3, r3, r1
   1964c:	str	r3, [r2]
   19650:	beq	19760 <_start@@Base+0x3f40>
   19654:	mov	r5, r4
   19658:	b	195b8 <_start@@Base+0x3d98>
   1965c:	mov	r2, r6
   19660:	mov	r1, r5
   19664:	mov	r0, r8
   19668:	mov	r3, #23
   1966c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   19670:	mov	r6, r0
   19674:	mov	r0, r6
   19678:	add	sp, sp, #36	; 0x24
   1967c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19680:	mov	r1, #0
   19684:	cmp	r3, r1
   19688:	mvn	r0, #-2147483648	; 0x80000000
   1968c:	cmpeq	r2, r0
   19690:	strls	r2, [sp, #8]
   19694:	bls	19630 <_start@@Base+0x3e10>
   19698:	mov	r3, #7
   1969c:	mov	r2, r6
   196a0:	mov	r1, r4
   196a4:	mov	r0, r8
   196a8:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   196ac:	b	196c4 <_start@@Base+0x3ea4>
   196b0:	mov	r3, #8
   196b4:	mov	r2, r6
   196b8:	mov	r1, r4
   196bc:	mov	r0, r8
   196c0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   196c4:	cmp	r6, r0
   196c8:	bne	19630 <_start@@Base+0x3e10>
   196cc:	b	195fc <_start@@Base+0x3ddc>
   196d0:	add	r5, r1, #1
   196d4:	sub	r3, r2, r5
   196d8:	str	ip, [r0, #12]
   196dc:	cmp	r3, #1
   196e0:	ble	196f4 <_start@@Base+0x3ed4>
   196e4:	ldrb	r3, [r5]
   196e8:	cmp	r3, #32
   196ec:	bhi	19708 <_start@@Base+0x3ee8>
   196f0:	beq	1974c <_start@@Base+0x3f2c>
   196f4:	mov	r1, r5
   196f8:	mov	r2, r6
   196fc:	mov	r0, r8
   19700:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   19704:	mov	r5, r0
   19708:	cmp	r6, r5
   1970c:	bne	195a4 <_start@@Base+0x3d84>
   19710:	mov	r0, r6
   19714:	add	sp, sp, #36	; 0x24
   19718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1971c:	ldr	r3, [r0, #12]
   19720:	cmp	r3, #0
   19724:	beq	196f4 <_start@@Base+0x3ed4>
   19728:	b	195fc <_start@@Base+0x3ddc>
   1972c:	mov	r3, #5
   19730:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   19734:	ldr	r3, [r8, #12]
   19738:	cmp	r3, #0
   1973c:	mov	r5, r0
   19740:	subeq	r3, r6, r0
   19744:	beq	196dc <_start@@Base+0x3ebc>
   19748:	b	19708 <_start@@Base+0x3ee8>
   1974c:	ldrb	r3, [r5, #1]
   19750:	cmp	r3, #32
   19754:	addhi	r5, r5, #1
   19758:	bls	196f4 <_start@@Base+0x3ed4>
   1975c:	b	19708 <_start@@Base+0x3ee8>
   19760:	mov	r6, r4
   19764:	b	195fc <_start@@Base+0x3ddc>
   19768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1976c:	sub	sp, sp, #36	; 0x24
   19770:	mov	ip, #0
   19774:	str	r3, [sp, #8]
   19778:	ldr	r3, [sp, #72]	; 0x48
   1977c:	cmp	r1, r2
   19780:	mov	r6, r1
   19784:	mov	r5, r2
   19788:	strb	ip, [r3]
   1978c:	mov	r8, r0
   19790:	beq	19910 <_start@@Base+0x40f0>
   19794:	ldrb	r3, [r1]
   19798:	cmp	r3, #34	; 0x22
   1979c:	beq	198c4 <_start@@Base+0x40a4>
   197a0:	cmp	r3, #46	; 0x2e
   197a4:	movne	r3, #1
   197a8:	strne	r3, [r0, #12]
   197ac:	beq	19920 <_start@@Base+0x4100>
   197b0:	add	fp, sp, #16
   197b4:	add	sl, sp, #20
   197b8:	add	r9, sp, #24
   197bc:	mov	r3, #0
   197c0:	str	r3, [sp, #12]
   197c4:	ldr	r3, [sp, #8]
   197c8:	mov	r7, r3
   197cc:	ldr	r4, [r3]
   197d0:	b	197e8 <_start@@Base+0x3fc8>
   197d4:	cmp	r6, r0
   197d8:	bne	19814 <_start@@Base+0x3ff4>
   197dc:	ldr	r4, [r7, #4]!
   197e0:	cmp	r4, #0
   197e4:	beq	19868 <_start@@Base+0x4048>
   197e8:	stm	sp, {r9, sl}
   197ec:	mov	r3, fp
   197f0:	mov	r2, r5
   197f4:	mov	r1, r6
   197f8:	mov	r0, r8
   197fc:	blx	r4
   19800:	cmp	r5, r0
   19804:	bne	197d4 <_start@@Base+0x3fb4>
   19808:	mov	r0, r5
   1980c:	add	sp, sp, #36	; 0x24
   19810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19814:	ldr	r3, [sp, #16]
   19818:	mov	r4, r0
   1981c:	cmp	r3, #0
   19820:	bne	1988c <_start@@Base+0x406c>
   19824:	ldrd	r2, [sp, #24]
   19828:	cmp	r3, #0
   1982c:	cmpeq	r2, #255	; 0xff
   19830:	uxtbls	r3, r2
   19834:	strls	r3, [sp, #12]
   19838:	bhi	198ac <_start@@Base+0x408c>
   1983c:	ldr	r3, [sp, #72]	; 0x48
   19840:	ldr	r2, [sp, #20]
   19844:	ldr	r1, [sp, #12]
   19848:	ldrb	r3, [r3]
   1984c:	cmp	r2, #0
   19850:	ldr	r2, [sp, #72]	; 0x48
   19854:	add	r3, r1, r3
   19858:	strb	r3, [r2]
   1985c:	beq	19954 <_start@@Base+0x4134>
   19860:	mov	r6, r4
   19864:	b	197c4 <_start@@Base+0x3fa4>
   19868:	mov	r2, r5
   1986c:	mov	r1, r6
   19870:	mov	r0, r8
   19874:	mov	r3, #23
   19878:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1987c:	mov	r5, r0
   19880:	mov	r0, r5
   19884:	add	sp, sp, #36	; 0x24
   19888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1988c:	mov	r3, #8
   19890:	mov	r2, r5
   19894:	mov	r1, r4
   19898:	mov	r0, r8
   1989c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   198a0:	cmp	r5, r0
   198a4:	bne	1983c <_start@@Base+0x401c>
   198a8:	b	19808 <_start@@Base+0x3fe8>
   198ac:	mov	r3, #7
   198b0:	mov	r2, r5
   198b4:	mov	r1, r4
   198b8:	mov	r0, r8
   198bc:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   198c0:	b	198a0 <_start@@Base+0x4080>
   198c4:	add	r6, r1, #1
   198c8:	sub	r3, r2, r6
   198cc:	str	ip, [r0, #12]
   198d0:	cmp	r3, #1
   198d4:	ble	198e8 <_start@@Base+0x40c8>
   198d8:	ldrb	r3, [r6]
   198dc:	cmp	r3, #32
   198e0:	bhi	198fc <_start@@Base+0x40dc>
   198e4:	beq	19940 <_start@@Base+0x4120>
   198e8:	mov	r1, r6
   198ec:	mov	r2, r5
   198f0:	mov	r0, r8
   198f4:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   198f8:	mov	r6, r0
   198fc:	cmp	r5, r6
   19900:	bne	197b0 <_start@@Base+0x3f90>
   19904:	mov	r0, r5
   19908:	add	sp, sp, #36	; 0x24
   1990c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19910:	ldr	r3, [r0, #12]
   19914:	cmp	r3, #0
   19918:	beq	198e8 <_start@@Base+0x40c8>
   1991c:	b	19808 <_start@@Base+0x3fe8>
   19920:	mov	r3, #5
   19924:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   19928:	ldr	r3, [r8, #12]
   1992c:	cmp	r3, #0
   19930:	mov	r6, r0
   19934:	subeq	r3, r5, r0
   19938:	beq	198d0 <_start@@Base+0x40b0>
   1993c:	b	198fc <_start@@Base+0x40dc>
   19940:	ldrb	r3, [r6, #1]
   19944:	cmp	r3, #32
   19948:	addhi	r6, r6, #1
   1994c:	bls	198e8 <_start@@Base+0x40c8>
   19950:	b	198fc <_start@@Base+0x40dc>
   19954:	mov	r5, r4
   19958:	b	19808 <_start@@Base+0x3fe8>
   1995c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19960:	sub	sp, sp, #44	; 0x2c
   19964:	mov	r8, #0
   19968:	str	r3, [sp, #20]
   1996c:	ldr	r3, [sp, #80]	; 0x50
   19970:	mov	r9, #0
   19974:	cmp	r1, r2
   19978:	strd	r8, [r3]
   1997c:	mov	r5, r1
   19980:	mov	r6, r2
   19984:	mov	r8, r0
   19988:	beq	19b18 <_start@@Base+0x42f8>
   1998c:	ldrb	r3, [r1]
   19990:	cmp	r3, #34	; 0x22
   19994:	beq	19ac8 <_start@@Base+0x42a8>
   19998:	cmp	r3, #46	; 0x2e
   1999c:	movne	r3, #1
   199a0:	strne	r3, [r0, #12]
   199a4:	beq	19b28 <_start@@Base+0x4308>
   199a8:	mov	r2, #0
   199ac:	mov	r3, #0
   199b0:	add	fp, sp, #24
   199b4:	add	sl, sp, #28
   199b8:	add	r9, sp, #32
   199bc:	strd	r2, [sp, #8]
   199c0:	ldr	r7, [sp, #20]
   199c4:	ldr	r4, [r7]
   199c8:	b	199e0 <_start@@Base+0x41c0>
   199cc:	cmp	r5, r0
   199d0:	bne	19a0c <_start@@Base+0x41ec>
   199d4:	ldr	r4, [r7, #4]!
   199d8:	cmp	r4, #0
   199dc:	beq	19a70 <_start@@Base+0x4250>
   199e0:	stm	sp, {r9, sl}
   199e4:	mov	r3, fp
   199e8:	mov	r2, r6
   199ec:	mov	r1, r5
   199f0:	mov	r0, r8
   199f4:	blx	r4
   199f8:	cmp	r6, r0
   199fc:	bne	199cc <_start@@Base+0x41ac>
   19a00:	mov	r0, r6
   19a04:	add	sp, sp, #44	; 0x2c
   19a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a0c:	ldr	r1, [sp, #24]
   19a10:	mov	r4, r0
   19a14:	cmp	r1, #0
   19a18:	ldrd	r2, [sp, #32]
   19a1c:	beq	19a94 <_start@@Base+0x4274>
   19a20:	cmp	r3, #-2147483648	; 0x80000000
   19a24:	cmpeq	r2, #0
   19a28:	bhi	19aa8 <_start@@Base+0x4288>
   19a2c:	rsbs	r2, r2, #0
   19a30:	rsc	r3, r3, #0
   19a34:	strd	r2, [sp, #8]
   19a38:	ldr	r3, [sp, #80]	; 0x50
   19a3c:	ldrd	r0, [sp, #8]
   19a40:	ldr	ip, [sp, #28]
   19a44:	ldrd	r2, [r3]
   19a48:	adds	r0, r0, r2
   19a4c:	adc	r1, r1, r3
   19a50:	mov	r3, r1
   19a54:	ldr	r1, [sp, #80]	; 0x50
   19a58:	mov	r2, r0
   19a5c:	cmp	ip, #0
   19a60:	strd	r2, [r1]
   19a64:	beq	19b74 <_start@@Base+0x4354>
   19a68:	mov	r5, r4
   19a6c:	b	199c0 <_start@@Base+0x41a0>
   19a70:	mov	r2, r6
   19a74:	mov	r1, r5
   19a78:	mov	r0, r8
   19a7c:	mov	r3, #23
   19a80:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   19a84:	mov	r6, r0
   19a88:	mov	r0, r6
   19a8c:	add	sp, sp, #44	; 0x2c
   19a90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a94:	cmp	r2, #0
   19a98:	sbcs	r1, r3, #0
   19a9c:	blt	19b48 <_start@@Base+0x4328>
   19aa0:	strd	r2, [sp, #8]
   19aa4:	b	19a38 <_start@@Base+0x4218>
   19aa8:	mov	r3, #8
   19aac:	mov	r2, r6
   19ab0:	mov	r1, r4
   19ab4:	mov	r0, r8
   19ab8:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   19abc:	cmp	r6, r0
   19ac0:	bne	19a38 <_start@@Base+0x4218>
   19ac4:	b	19a00 <_start@@Base+0x41e0>
   19ac8:	add	r5, r1, #1
   19acc:	sub	r3, r6, r5
   19ad0:	mov	r2, #0
   19ad4:	str	r2, [r0, #12]
   19ad8:	cmp	r3, #1
   19adc:	ble	19af0 <_start@@Base+0x42d0>
   19ae0:	ldrb	r3, [r5]
   19ae4:	cmp	r3, #32
   19ae8:	bhi	19b04 <_start@@Base+0x42e4>
   19aec:	beq	19b60 <_start@@Base+0x4340>
   19af0:	mov	r1, r5
   19af4:	mov	r2, r6
   19af8:	mov	r0, r8
   19afc:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   19b00:	mov	r5, r0
   19b04:	cmp	r6, r5
   19b08:	bne	199a8 <_start@@Base+0x4188>
   19b0c:	mov	r0, r6
   19b10:	add	sp, sp, #44	; 0x2c
   19b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b18:	ldr	r3, [r0, #12]
   19b1c:	cmp	r3, #0
   19b20:	beq	19af0 <_start@@Base+0x42d0>
   19b24:	b	19a00 <_start@@Base+0x41e0>
   19b28:	mov	r3, #5
   19b2c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   19b30:	ldr	r3, [r8, #12]
   19b34:	cmp	r3, #0
   19b38:	mov	r5, r0
   19b3c:	subeq	r3, r6, r0
   19b40:	beq	19ad8 <_start@@Base+0x42b8>
   19b44:	b	19b04 <_start@@Base+0x42e4>
   19b48:	mov	r3, #7
   19b4c:	mov	r2, r6
   19b50:	mov	r1, r4
   19b54:	mov	r0, r8
   19b58:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   19b5c:	b	19abc <_start@@Base+0x429c>
   19b60:	ldrb	r3, [r5, #1]
   19b64:	cmp	r3, #32
   19b68:	addhi	r5, r5, #1
   19b6c:	bls	19af0 <_start@@Base+0x42d0>
   19b70:	b	19b04 <_start@@Base+0x42e4>
   19b74:	mov	r6, r4
   19b78:	b	19a00 <_start@@Base+0x41e0>
   19b7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b80:	sub	sp, sp, #156	; 0x9c
   19b84:	mov	r8, r0
   19b88:	mov	r0, r3
   19b8c:	str	r3, [sp, #124]	; 0x7c
   19b90:	mov	r4, r2
   19b94:	mov	r3, #0
   19b98:	mov	r2, #4
   19b9c:	str	r3, [r0]
   19ba0:	mov	r5, r1
   19ba4:	ldr	r0, [r8]
   19ba8:	mov	r1, r2
   19bac:	bl	2737c <flatcc_builder_start_struct@@Base>
   19bb0:	subs	r3, r0, #0
   19bb4:	str	r3, [sp, #112]	; 0x70
   19bb8:	beq	1a320 <_start@@Base+0x4b00>
   19bbc:	cmp	r5, r4
   19bc0:	beq	19bd0 <_start@@Base+0x43b0>
   19bc4:	ldrb	r3, [r5]
   19bc8:	cmp	r3, #123	; 0x7b
   19bcc:	beq	19c30 <_start@@Base+0x4410>
   19bd0:	mov	r1, r5
   19bd4:	mov	r3, #21
   19bd8:	mov	r2, r4
   19bdc:	mov	r0, r8
   19be0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   19be4:	mov	r1, r0
   19be8:	cmp	r4, r1
   19bec:	beq	19c10 <_start@@Base+0x43f0>
   19bf0:	ldr	r0, [r8]
   19bf4:	str	r1, [sp, #8]
   19bf8:	bl	27424 <flatcc_builder_end_struct@@Base>
   19bfc:	ldr	r3, [sp, #124]	; 0x7c
   19c00:	ldr	r1, [sp, #8]
   19c04:	cmp	r0, #0
   19c08:	str	r0, [r3]
   19c0c:	bne	19c24 <_start@@Base+0x4404>
   19c10:	mov	r2, r4
   19c14:	mov	r0, r8
   19c18:	mov	r3, #33	; 0x21
   19c1c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   19c20:	mov	r1, r0
   19c24:	mov	r0, r1
   19c28:	add	sp, sp, #156	; 0x9c
   19c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c30:	add	r3, r5, #1
   19c34:	sub	r2, r4, r3
   19c38:	cmp	r2, #1
   19c3c:	ble	19c50 <_start@@Base+0x4430>
   19c40:	ldrb	r2, [r5, #1]
   19c44:	cmp	r2, #32
   19c48:	bhi	19c64 <_start@@Base+0x4444>
   19c4c:	beq	1a344 <_start@@Base+0x4b24>
   19c50:	mov	r1, r3
   19c54:	mov	r2, r4
   19c58:	mov	r0, r8
   19c5c:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   19c60:	mov	r3, r0
   19c64:	cmp	r4, r3
   19c68:	beq	19c78 <_start@@Base+0x4458>
   19c6c:	ldrb	r2, [r3]
   19c70:	cmp	r2, #125	; 0x7d
   19c74:	beq	1a358 <_start@@Base+0x4b38>
   19c78:	ldr	r2, [pc, #1312]	; 1a1a0 <_start@@Base+0x4980>
   19c7c:	mov	r9, #0
   19c80:	add	r2, pc, r2
   19c84:	str	r2, [sp, #128]	; 0x80
   19c88:	mov	r1, r3
   19c8c:	add	r2, sp, #136	; 0x88
   19c90:	str	r2, [sp, #132]	; 0x84
   19c94:	add	r2, sp, #140	; 0x8c
   19c98:	str	r2, [sp, #116]	; 0x74
   19c9c:	cmp	r4, r1
   19ca0:	beq	19fb0 <_start@@Base+0x4790>
   19ca4:	ldrb	r3, [r1]
   19ca8:	cmp	r3, #34	; 0x22
   19cac:	moveq	r3, #0
   19cb0:	addeq	r1, r1, #1
   19cb4:	streq	r3, [r8, #12]
   19cb8:	beq	19ccc <_start@@Base+0x44ac>
   19cbc:	cmp	r3, #46	; 0x2e
   19cc0:	movne	r3, #1
   19cc4:	strne	r3, [r8, #12]
   19cc8:	beq	1a240 <_start@@Base+0x4a20>
   19ccc:	sub	r3, r4, r1
   19cd0:	cmp	r3, #8
   19cd4:	bls	19fc0 <_start@@Base+0x47a0>
   19cd8:	ldrb	r6, [r1, #7]
   19cdc:	mov	r7, #0
   19ce0:	ldrb	r2, [r1, #6]
   19ce4:	lsr	r0, r2, #24
   19ce8:	lsl	r3, r2, #8
   19cec:	str	r0, [sp, #76]	; 0x4c
   19cf0:	str	r3, [sp, #72]	; 0x48
   19cf4:	ldrd	r2, [sp, #72]	; 0x48
   19cf8:	orr	r2, r2, r6
   19cfc:	orr	r3, r3, r7
   19d00:	ldrb	r6, [r1, #5]
   19d04:	lsr	r0, r6, #16
   19d08:	str	r0, [sp, #52]	; 0x34
   19d0c:	lsl	r0, r6, #16
   19d10:	str	r0, [sp, #48]	; 0x30
   19d14:	ldrd	r6, [sp, #48]	; 0x30
   19d18:	orr	r6, r6, r2
   19d1c:	orr	r7, r7, r3
   19d20:	mov	r2, r6
   19d24:	mov	r3, r7
   19d28:	ldrb	r6, [r1, #4]
   19d2c:	lsr	r0, r6, #8
   19d30:	str	r0, [sp, #28]
   19d34:	lsl	r0, r6, #24
   19d38:	str	r0, [sp, #24]
   19d3c:	ldrd	r6, [sp, #24]
   19d40:	orr	r6, r6, r2
   19d44:	orr	r7, r7, r3
   19d48:	mov	r2, r6
   19d4c:	mov	r3, r7
   19d50:	ldrb	r0, [r1, #3]
   19d54:	str	r0, [sp, #36]	; 0x24
   19d58:	mov	r0, #0
   19d5c:	str	r0, [sp, #32]
   19d60:	ldrd	r6, [sp, #32]
   19d64:	orr	r6, r6, r2
   19d68:	orr	r7, r7, r3
   19d6c:	mov	r2, r6
   19d70:	mov	r3, r7
   19d74:	ldrb	r6, [r1, #2]
   19d78:	lsl	r0, r6, #8
   19d7c:	str	r0, [sp, #20]
   19d80:	mov	r0, #0
   19d84:	str	r0, [sp, #16]
   19d88:	ldrd	r6, [sp, #16]
   19d8c:	orr	r6, r6, r2
   19d90:	orr	r7, r7, r3
   19d94:	mov	r2, r6
   19d98:	mov	r3, r7
   19d9c:	ldrb	r6, [r1, #1]
   19da0:	lsl	r0, r6, #16
   19da4:	str	r0, [sp, #12]
   19da8:	mov	r0, #0
   19dac:	str	r0, [sp, #8]
   19db0:	ldrd	r6, [sp, #8]
   19db4:	orr	r6, r6, r2
   19db8:	orr	r7, r7, r3
   19dbc:	mov	r2, r6
   19dc0:	mov	r3, r7
   19dc4:	ldrb	r6, [r1]
   19dc8:	mov	sl, #0
   19dcc:	orr	r2, r2, sl
   19dd0:	lsl	fp, r6, #24
   19dd4:	add	r7, pc, #956	; 0x3bc
   19dd8:	ldrd	r6, [r7]
   19ddc:	orr	r3, r3, fp
   19de0:	cmp	r3, r7
   19de4:	cmpeq	r2, r6
   19de8:	bne	19fb0 <_start@@Base+0x4790>
   19dec:	add	r5, r1, #8
   19df0:	sub	r0, r4, r5
   19df4:	cmp	r0, #8
   19df8:	bls	1a044 <_start@@Base+0x4824>
   19dfc:	ldrb	r6, [r1, #15]
   19e00:	mov	r7, #0
   19e04:	ldrb	r2, [r1, #14]
   19e08:	lsr	ip, r2, #24
   19e0c:	lsl	r3, r2, #8
   19e10:	str	ip, [sp, #108]	; 0x6c
   19e14:	str	r3, [sp, #104]	; 0x68
   19e18:	ldrd	r2, [sp, #104]	; 0x68
   19e1c:	orr	r2, r2, r6
   19e20:	orr	r3, r3, r7
   19e24:	mov	r6, r2
   19e28:	mov	r7, r3
   19e2c:	ldrb	r2, [r1, #13]
   19e30:	lsr	ip, r2, #16
   19e34:	lsl	r3, r2, #16
   19e38:	str	ip, [sp, #100]	; 0x64
   19e3c:	str	r3, [sp, #96]	; 0x60
   19e40:	ldrd	r2, [sp, #96]	; 0x60
   19e44:	orr	r2, r2, r6
   19e48:	orr	r3, r3, r7
   19e4c:	mov	r6, r2
   19e50:	mov	r7, r3
   19e54:	ldrb	r2, [r1, #12]
   19e58:	lsr	ip, r2, #8
   19e5c:	lsl	r3, r2, #24
   19e60:	str	ip, [sp, #84]	; 0x54
   19e64:	str	r3, [sp, #80]	; 0x50
   19e68:	ldrd	r2, [sp, #80]	; 0x50
   19e6c:	orr	r2, r2, r6
   19e70:	orr	r3, r3, r7
   19e74:	ldrb	ip, [r1, #11]
   19e78:	str	ip, [sp, #92]	; 0x5c
   19e7c:	mov	ip, #0
   19e80:	str	ip, [sp, #88]	; 0x58
   19e84:	ldrd	r6, [sp, #88]	; 0x58
   19e88:	orr	r6, r6, r2
   19e8c:	orr	r7, r7, r3
   19e90:	mov	r2, r6
   19e94:	mov	r3, r7
   19e98:	ldrb	r6, [r1, #10]
   19e9c:	lsl	ip, r6, #8
   19ea0:	str	ip, [sp, #68]	; 0x44
   19ea4:	mov	ip, #0
   19ea8:	str	ip, [sp, #64]	; 0x40
   19eac:	ldrd	r6, [sp, #64]	; 0x40
   19eb0:	orr	r6, r6, r2
   19eb4:	orr	r7, r7, r3
   19eb8:	mov	r2, r6
   19ebc:	mov	r3, r7
   19ec0:	ldrb	r6, [r1, #9]
   19ec4:	lsl	ip, r6, #16
   19ec8:	str	ip, [sp, #60]	; 0x3c
   19ecc:	mov	ip, #0
   19ed0:	str	ip, [sp, #56]	; 0x38
   19ed4:	ldrd	r6, [sp, #56]	; 0x38
   19ed8:	orr	r6, r6, r2
   19edc:	orr	r7, r7, r3
   19ee0:	mov	r2, r6
   19ee4:	mov	r3, r7
   19ee8:	ldrb	r6, [r1, #8]
   19eec:	lsl	r1, r6, #24
   19ef0:	str	r1, [sp, #44]	; 0x2c
   19ef4:	mov	r1, #0
   19ef8:	str	r1, [sp, #40]	; 0x28
   19efc:	ldrd	r6, [sp, #40]	; 0x28
   19f00:	orr	r7, r7, r3
   19f04:	mov	r3, r7
   19f08:	ldr	r7, [pc, #660]	; 1a1a4 <_start@@Base+0x4984>
   19f0c:	orr	r6, r6, r2
   19f10:	and	r3, r3, r7
   19f14:	ldr	r7, [pc, #652]	; 1a1a8 <_start@@Base+0x4988>
   19f18:	mov	r2, r6
   19f1c:	mov	r6, #0
   19f20:	and	r2, r2, r6
   19f24:	cmp	r3, r7
   19f28:	mov	r6, #0
   19f2c:	cmpeq	r2, r6
   19f30:	bne	19f3c <_start@@Base+0x471c>
   19f34:	cmp	r0, #2
   19f38:	bgt	1a1ac <_start@@Base+0x498c>
   19f3c:	mov	r1, r5
   19f40:	mov	r2, r4
   19f44:	mov	r0, r8
   19f48:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   19f4c:	sub	r3, r4, r0
   19f50:	cmp	r3, #1
   19f54:	ble	19f68 <_start@@Base+0x4748>
   19f58:	ldrb	r3, [r0]
   19f5c:	cmp	r3, #32
   19f60:	bhi	19f78 <_start@@Base+0x4758>
   19f64:	beq	1a0fc <_start@@Base+0x48dc>
   19f68:	mov	r1, r0
   19f6c:	mov	r2, r4
   19f70:	mov	r0, r8
   19f74:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   19f78:	cmp	r4, r0
   19f7c:	beq	1a114 <_start@@Base+0x48f4>
   19f80:	ldrb	r3, [r0]
   19f84:	cmp	r3, #44	; 0x2c
   19f88:	beq	1a11c <_start@@Base+0x48fc>
   19f8c:	cmp	r3, #125	; 0x7d
   19f90:	beq	1a0c8 <_start@@Base+0x48a8>
   19f94:	mov	r1, r0
   19f98:	mov	r3, #10
   19f9c:	mov	r2, r4
   19fa0:	mov	r0, r8
   19fa4:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   19fa8:	mov	r1, r0
   19fac:	b	19be8 <_start@@Base+0x43c8>
   19fb0:	mov	r2, r4
   19fb4:	mov	r0, r8
   19fb8:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   19fbc:	b	19f4c <_start@@Base+0x472c>
   19fc0:	sub	r3, r3, #1
   19fc4:	cmp	r3, #7
   19fc8:	addls	pc, pc, r3, lsl #2
   19fcc:	b	19fb0 <_start@@Base+0x4790>
   19fd0:	b	1a038 <_start@@Base+0x4818>
   19fd4:	b	1a02c <_start@@Base+0x480c>
   19fd8:	b	1a020 <_start@@Base+0x4800>
   19fdc:	b	1a014 <_start@@Base+0x47f4>
   19fe0:	b	1a008 <_start@@Base+0x47e8>
   19fe4:	b	19ffc <_start@@Base+0x47dc>
   19fe8:	b	19ff0 <_start@@Base+0x47d0>
   19fec:	b	19cd8 <_start@@Base+0x44b8>
   19ff0:	mov	r6, r9
   19ff4:	mov	r7, #0
   19ff8:	b	19ce0 <_start@@Base+0x44c0>
   19ffc:	mov	r2, r9
   1a000:	mov	r3, #0
   1a004:	b	19d00 <_start@@Base+0x44e0>
   1a008:	mov	r2, r9
   1a00c:	mov	r3, #0
   1a010:	b	19d28 <_start@@Base+0x4508>
   1a014:	mov	r2, r9
   1a018:	mov	r3, #0
   1a01c:	b	19d50 <_start@@Base+0x4530>
   1a020:	mov	r2, r9
   1a024:	mov	r3, #0
   1a028:	b	19d74 <_start@@Base+0x4554>
   1a02c:	mov	r2, r9
   1a030:	mov	r3, #0
   1a034:	b	19d9c <_start@@Base+0x457c>
   1a038:	mov	r2, r9
   1a03c:	mov	r3, #0
   1a040:	b	19dc4 <_start@@Base+0x45a4>
   1a044:	sub	r3, r0, #1
   1a048:	cmp	r3, #7
   1a04c:	addls	pc, pc, r3, lsl #2
   1a050:	b	19f3c <_start@@Base+0x471c>
   1a054:	b	1a0bc <_start@@Base+0x489c>
   1a058:	b	1a0b0 <_start@@Base+0x4890>
   1a05c:	b	1a0a4 <_start@@Base+0x4884>
   1a060:	b	1a098 <_start@@Base+0x4878>
   1a064:	b	1a08c <_start@@Base+0x486c>
   1a068:	b	1a080 <_start@@Base+0x4860>
   1a06c:	b	1a074 <_start@@Base+0x4854>
   1a070:	b	19dfc <_start@@Base+0x45dc>
   1a074:	mov	r6, r9
   1a078:	mov	r7, #0
   1a07c:	b	19e04 <_start@@Base+0x45e4>
   1a080:	mov	r6, r9
   1a084:	mov	r7, #0
   1a088:	b	19e2c <_start@@Base+0x460c>
   1a08c:	mov	r6, r9
   1a090:	mov	r7, #0
   1a094:	b	19e54 <_start@@Base+0x4634>
   1a098:	mov	r2, r9
   1a09c:	mov	r3, #0
   1a0a0:	b	19e74 <_start@@Base+0x4654>
   1a0a4:	mov	r2, r9
   1a0a8:	mov	r3, #0
   1a0ac:	b	19e98 <_start@@Base+0x4678>
   1a0b0:	mov	r2, r9
   1a0b4:	mov	r3, #0
   1a0b8:	b	19ec0 <_start@@Base+0x46a0>
   1a0bc:	mov	r2, r9
   1a0c0:	mov	r3, #0
   1a0c4:	b	19ee8 <_start@@Base+0x46c8>
   1a0c8:	add	r1, r0, #1
   1a0cc:	sub	r3, r4, r1
   1a0d0:	cmp	r3, #1
   1a0d4:	ble	1a0e8 <_start@@Base+0x48c8>
   1a0d8:	ldrb	r3, [r0, #1]
   1a0dc:	cmp	r3, #32
   1a0e0:	bhi	19be8 <_start@@Base+0x43c8>
   1a0e4:	beq	1a298 <_start@@Base+0x4a78>
   1a0e8:	mov	r2, r4
   1a0ec:	mov	r0, r8
   1a0f0:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1a0f4:	mov	r1, r0
   1a0f8:	b	19be8 <_start@@Base+0x43c8>
   1a0fc:	ldrb	r3, [r0, #1]
   1a100:	cmp	r3, #32
   1a104:	addhi	r0, r0, #1
   1a108:	bls	19f68 <_start@@Base+0x4748>
   1a10c:	cmp	r4, r0
   1a110:	bne	19f80 <_start@@Base+0x4760>
   1a114:	mov	r1, r4
   1a118:	b	19c10 <_start@@Base+0x43f0>
   1a11c:	add	r1, r0, #1
   1a120:	sub	r3, r4, r1
   1a124:	cmp	r3, #1
   1a128:	ble	1a13c <_start@@Base+0x491c>
   1a12c:	ldrb	r3, [r0, #1]
   1a130:	cmp	r3, #32
   1a134:	bhi	1a14c <_start@@Base+0x492c>
   1a138:	beq	1a2ac <_start@@Base+0x4a8c>
   1a13c:	mov	r2, r4
   1a140:	mov	r0, r8
   1a144:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1a148:	mov	r1, r0
   1a14c:	cmp	r4, r1
   1a150:	beq	1a328 <_start@@Base+0x4b08>
   1a154:	ldrb	r3, [r1]
   1a158:	cmp	r3, #125	; 0x7d
   1a15c:	bne	19c9c <_start@@Base+0x447c>
   1a160:	mov	r3, r1
   1a164:	add	r1, r1, #1
   1a168:	sub	r2, r4, r1
   1a16c:	cmp	r2, #1
   1a170:	ble	1a0e8 <_start@@Base+0x48c8>
   1a174:	ldrb	r2, [r3, #1]
   1a178:	cmp	r2, #32
   1a17c:	bhi	19be8 <_start@@Base+0x43c8>
   1a180:	bne	1a0e8 <_start@@Base+0x48c8>
   1a184:	ldrb	r2, [r3, #2]
   1a188:	cmp	r2, #32
   1a18c:	addhi	r1, r3, #2
   1a190:	bls	1a0e8 <_start@@Base+0x48c8>
   1a194:	b	19be8 <_start@@Base+0x43c8>
   1a198:	cmpvc	pc, #1342177286	; 0x50000006
   1a19c:	rsbvs	r6, pc, #428	; 0x1ac
   1a1a0:	andeq	fp, r3, r0, lsl #8
   1a1a4:			; <UNDEFINED> instruction: 0xffff0000
   1a1a8:	cmnvs	r4, r0
   1a1ac:	mov	r3, #2
   1a1b0:	mov	r2, r4
   1a1b4:	mov	r1, r5
   1a1b8:	mov	r0, r8
   1a1bc:	bl	18678 <_start@@Base+0x2e58>
   1a1c0:	cmp	r5, r0
   1a1c4:	str	r0, [sp, #120]	; 0x78
   1a1c8:	beq	19f3c <_start@@Base+0x471c>
   1a1cc:	ldrd	r2, [sp, #40]	; 0x28
   1a1d0:	mov	r1, #0
   1a1d4:	cmp	r4, r0
   1a1d8:	mov	r5, r0
   1a1dc:	str	r2, [sp, #136]	; 0x88
   1a1e0:	str	r9, [sp, #144]	; 0x90
   1a1e4:	str	r1, [sp, #148]	; 0x94
   1a1e8:	str	r2, [sp, #140]	; 0x8c
   1a1ec:	beq	1a2d8 <_start@@Base+0x4ab8>
   1a1f0:	add	r3, sp, #144	; 0x90
   1a1f4:	str	r3, [sp]
   1a1f8:	mov	r1, r0
   1a1fc:	ldr	r3, [sp, #116]	; 0x74
   1a200:	mov	r2, r4
   1a204:	mov	r0, r8
   1a208:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   1a20c:	cmp	r5, r0
   1a210:	beq	1a2d8 <_start@@Base+0x4ab8>
   1a214:	ldr	r1, [sp, #140]	; 0x8c
   1a218:	ldrd	r2, [sp, #144]	; 0x90
   1a21c:	cmp	r1, #0
   1a220:	beq	1a258 <_start@@Base+0x4a38>
   1a224:	cmp	r3, #0
   1a228:	cmpeq	r2, #-2147483648	; 0x80000000
   1a22c:	rsbls	r3, r2, #0
   1a230:	bhi	1a2c0 <_start@@Base+0x4aa0>
   1a234:	ldr	r2, [sp, #112]	; 0x70
   1a238:	str	r3, [r2]
   1a23c:	b	19f4c <_start@@Base+0x472c>
   1a240:	mov	r3, #5
   1a244:	mov	r2, r4
   1a248:	mov	r0, r8
   1a24c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1a250:	mov	r1, r0
   1a254:	b	19ccc <_start@@Base+0x44ac>
   1a258:	mov	r7, #0
   1a25c:	cmp	r3, r7
   1a260:	mvn	r6, #-2147483648	; 0x80000000
   1a264:	cmpeq	r2, r6
   1a268:	movls	r3, r2
   1a26c:	bls	1a234 <_start@@Base+0x4a14>
   1a270:	mov	r1, r0
   1a274:	mov	r3, #7
   1a278:	mov	r2, r4
   1a27c:	mov	r0, r8
   1a280:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1a284:	ldr	r3, [sp, #120]	; 0x78
   1a288:	cmp	r3, r0
   1a28c:	beq	1a2d8 <_start@@Base+0x4ab8>
   1a290:	ldr	r3, [sp, #136]	; 0x88
   1a294:	b	1a234 <_start@@Base+0x4a14>
   1a298:	ldrb	r3, [r0, #2]
   1a29c:	cmp	r3, #32
   1a2a0:	addhi	r1, r0, #2
   1a2a4:	bls	1a0e8 <_start@@Base+0x48c8>
   1a2a8:	b	19be8 <_start@@Base+0x43c8>
   1a2ac:	ldrb	r3, [r0, #2]
   1a2b0:	cmp	r3, #32
   1a2b4:	addhi	r1, r0, #2
   1a2b8:	bls	1a13c <_start@@Base+0x491c>
   1a2bc:	b	1a14c <_start@@Base+0x492c>
   1a2c0:	mov	r1, r0
   1a2c4:	mov	r3, #8
   1a2c8:	mov	r2, r4
   1a2cc:	mov	r0, r8
   1a2d0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1a2d4:	b	1a284 <_start@@Base+0x4a64>
   1a2d8:	ldr	r3, [sp, #132]	; 0x84
   1a2dc:	ldr	r5, [sp, #120]	; 0x78
   1a2e0:	str	r3, [sp]
   1a2e4:	mov	r2, r4
   1a2e8:	ldr	r3, [sp, #128]	; 0x80
   1a2ec:	mov	r1, r5
   1a2f0:	mov	r0, r8
   1a2f4:	bl	1955c <_start@@Base+0x3d3c>
   1a2f8:	cmp	r4, r0
   1a2fc:	cmpne	r0, r5
   1a300:	bne	1a290 <_start@@Base+0x4a70>
   1a304:	mov	r1, r0
   1a308:	mov	r3, #33	; 0x21
   1a30c:	mov	r2, r4
   1a310:	mov	r0, r8
   1a314:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1a318:	mov	r1, r0
   1a31c:	b	19be8 <_start@@Base+0x43c8>
   1a320:	mov	r1, r5
   1a324:	b	19c10 <_start@@Base+0x43f0>
   1a328:	mov	r1, r4
   1a32c:	mov	r3, #10
   1a330:	mov	r2, r4
   1a334:	mov	r0, r8
   1a338:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1a33c:	mov	r1, r0
   1a340:	b	19be8 <_start@@Base+0x43c8>
   1a344:	ldrb	r2, [r5, #2]
   1a348:	cmp	r2, #32
   1a34c:	addhi	r3, r5, #2
   1a350:	bls	19c50 <_start@@Base+0x4430>
   1a354:	b	19c64 <_start@@Base+0x4444>
   1a358:	add	r1, r3, #1
   1a35c:	mov	r2, r4
   1a360:	mov	r0, r8
   1a364:	bl	17770 <_start@@Base+0x1f50>
   1a368:	mov	r1, r0
   1a36c:	b	19be8 <_start@@Base+0x43c8>
   1a370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a374:	sub	sp, sp, #12
   1a378:	mov	sl, r2
   1a37c:	str	r3, [sp]
   1a380:	sub	r2, r2, r1
   1a384:	ldr	r3, [sp, #48]	; 0x30
   1a388:	cmp	r2, #8
   1a38c:	mov	r4, r1
   1a390:	mov	r5, r0
   1a394:	str	r3, [sp, #4]
   1a398:	ldr	fp, [sp, #52]	; 0x34
   1a39c:	bls	1a474 <_start@@Base+0x4c54>
   1a3a0:	ldrb	r6, [r4, #7]
   1a3a4:	mov	r7, #0
   1a3a8:	ldrb	r0, [r4, #6]
   1a3ac:	lsr	r3, r0, #24
   1a3b0:	lsl	r2, r0, #8
   1a3b4:	orr	r6, r6, r2
   1a3b8:	orr	r7, r7, r3
   1a3bc:	ldrb	r0, [r4, #5]
   1a3c0:	lsr	r3, r0, #16
   1a3c4:	lsl	r2, r0, #16
   1a3c8:	orr	r6, r6, r2
   1a3cc:	orr	r7, r7, r3
   1a3d0:	ldrb	r0, [r4, #4]
   1a3d4:	lsr	r3, r0, #8
   1a3d8:	lsl	r2, r0, #24
   1a3dc:	orr	r6, r6, r2
   1a3e0:	orr	r7, r7, r3
   1a3e4:	ldrb	r3, [r4, #3]
   1a3e8:	mov	r2, #0
   1a3ec:	orr	r2, r2, r6
   1a3f0:	orr	r3, r3, r7
   1a3f4:	ldrb	r0, [r4, #2]
   1a3f8:	mov	r6, #0
   1a3fc:	orr	r2, r2, r6
   1a400:	lsl	r7, r0, #8
   1a404:	orr	r3, r3, r7
   1a408:	ldrb	r0, [r4, #1]
   1a40c:	mov	r6, #0
   1a410:	orr	r6, r6, r2
   1a414:	lsl	r7, r0, #16
   1a418:	orr	r7, r7, r3
   1a41c:	ldrb	r2, [r4]
   1a420:	add	r9, pc, #280	; 0x118
   1a424:	ldrd	r8, [r9]
   1a428:	mov	r0, #0
   1a42c:	orr	r0, r0, r6
   1a430:	lsl	r1, r2, #24
   1a434:	orr	r1, r1, r7
   1a438:	cmp	r1, r9
   1a43c:	cmpeq	r0, r8
   1a440:	bne	1a468 <_start@@Base+0x4c48>
   1a444:	add	r6, r4, #8
   1a448:	mov	r0, r6
   1a44c:	mov	r1, sl
   1a450:	bl	15948 <_start@@Base+0x128>
   1a454:	mov	r0, #0
   1a458:	and	r1, r1, #-16777216	; 0xff000000
   1a45c:	cmp	r1, #1912602624	; 0x72000000
   1a460:	cmpeq	r0, #0
   1a464:	beq	1a4a4 <_start@@Base+0x4c84>
   1a468:	mov	r0, r4
   1a46c:	add	sp, sp, #12
   1a470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a474:	sub	r2, r2, #1
   1a478:	cmp	r2, #7
   1a47c:	addls	pc, pc, r2, lsl #2
   1a480:	b	1a468 <_start@@Base+0x4c48>
   1a484:	b	1a4ec <_start@@Base+0x4ccc>
   1a488:	b	1a4f8 <_start@@Base+0x4cd8>
   1a48c:	b	1a504 <_start@@Base+0x4ce4>
   1a490:	b	1a510 <_start@@Base+0x4cf0>
   1a494:	b	1a51c <_start@@Base+0x4cfc>
   1a498:	b	1a528 <_start@@Base+0x4d08>
   1a49c:	b	1a534 <_start@@Base+0x4d14>
   1a4a0:	b	1a3a0 <_start@@Base+0x4b80>
   1a4a4:	sub	r3, sl, r6
   1a4a8:	cmp	r3, #1
   1a4ac:	ble	1a468 <_start@@Base+0x4c48>
   1a4b0:	ldrb	r3, [r4, #9]
   1a4b4:	cmp	r3, #46	; 0x2e
   1a4b8:	bne	1a468 <_start@@Base+0x4c48>
   1a4bc:	add	r1, r4, #10
   1a4c0:	cmp	r6, r1
   1a4c4:	beq	1a468 <_start@@Base+0x4c48>
   1a4c8:	ldr	r3, [sp, #4]
   1a4cc:	str	fp, [sp, #52]	; 0x34
   1a4d0:	str	r3, [sp, #48]	; 0x30
   1a4d4:	mov	r2, sl
   1a4d8:	ldr	r3, [sp]
   1a4dc:	mov	r0, r5
   1a4e0:	add	sp, sp, #12
   1a4e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4e8:	b	16bd8 <_start@@Base+0x13b8>
   1a4ec:	mov	r6, #0
   1a4f0:	mov	r7, #0
   1a4f4:	b	1a41c <_start@@Base+0x4bfc>
   1a4f8:	mov	r2, #0
   1a4fc:	mov	r3, #0
   1a500:	b	1a408 <_start@@Base+0x4be8>
   1a504:	mov	r2, #0
   1a508:	mov	r3, #0
   1a50c:	b	1a3f4 <_start@@Base+0x4bd4>
   1a510:	mov	r6, #0
   1a514:	mov	r7, #0
   1a518:	b	1a3e4 <_start@@Base+0x4bc4>
   1a51c:	mov	r6, #0
   1a520:	mov	r7, #0
   1a524:	b	1a3d0 <_start@@Base+0x4bb0>
   1a528:	mov	r6, #0
   1a52c:	mov	r7, #0
   1a530:	b	1a3bc <_start@@Base+0x4b9c>
   1a534:	mov	r6, #0
   1a538:	mov	r7, #0
   1a53c:	b	1a3a8 <_start@@Base+0x4b88>
   1a540:	cmnvs	r3, r5, ror #8
   1a544:	cmnmi	r8, #-2147483620	; 0x8000001c
   1a548:	push	{r4, r5, r6, lr}
   1a54c:	mov	r4, r2
   1a550:	sub	r2, r2, r1
   1a554:	cmp	r2, #1
   1a558:	mov	r5, r0
   1a55c:	mov	r6, r3
   1a560:	ble	1a574 <_start@@Base+0x4d54>
   1a564:	ldrb	r3, [r1]
   1a568:	cmp	r3, #32
   1a56c:	bhi	1a584 <_start@@Base+0x4d64>
   1a570:	beq	1a5f4 <_start@@Base+0x4dd4>
   1a574:	mov	r2, r4
   1a578:	mov	r0, r5
   1a57c:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1a580:	mov	r1, r0
   1a584:	cmp	r4, r1
   1a588:	beq	1a658 <_start@@Base+0x4e38>
   1a58c:	ldrb	r3, [r1]
   1a590:	cmp	r3, #44	; 0x2c
   1a594:	beq	1a608 <_start@@Base+0x4de8>
   1a598:	mov	r3, #0
   1a59c:	str	r3, [r6]
   1a5a0:	ldrb	r3, [r1]
   1a5a4:	cmp	r3, #93	; 0x5d
   1a5a8:	beq	1a5c0 <_start@@Base+0x4da0>
   1a5ac:	mov	r2, r4
   1a5b0:	mov	r0, r5
   1a5b4:	mov	r3, #9
   1a5b8:	pop	{r4, r5, r6, lr}
   1a5bc:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   1a5c0:	add	r0, r1, #1
   1a5c4:	sub	r3, r4, r0
   1a5c8:	cmp	r3, #1
   1a5cc:	ble	1a5e0 <_start@@Base+0x4dc0>
   1a5d0:	ldrb	r3, [r1, #1]
   1a5d4:	cmp	r3, #32
   1a5d8:	pophi	{r4, r5, r6, pc}
   1a5dc:	beq	1a67c <_start@@Base+0x4e5c>
   1a5e0:	mov	r2, r4
   1a5e4:	mov	r1, r0
   1a5e8:	mov	r0, r5
   1a5ec:	pop	{r4, r5, r6, lr}
   1a5f0:	b	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1a5f4:	ldrb	r3, [r1, #1]
   1a5f8:	cmp	r3, #32
   1a5fc:	addhi	r1, r1, #1
   1a600:	bls	1a574 <_start@@Base+0x4d54>
   1a604:	b	1a584 <_start@@Base+0x4d64>
   1a608:	add	r0, r1, #1
   1a60c:	sub	r3, r4, r0
   1a610:	cmp	r3, #1
   1a614:	ble	1a628 <_start@@Base+0x4e08>
   1a618:	ldrb	r3, [r1, #1]
   1a61c:	cmp	r3, #32
   1a620:	bhi	1a638 <_start@@Base+0x4e18>
   1a624:	beq	1a668 <_start@@Base+0x4e48>
   1a628:	mov	r1, r0
   1a62c:	mov	r2, r4
   1a630:	mov	r0, r5
   1a634:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1a638:	cmp	r4, r0
   1a63c:	beq	1a6ac <_start@@Base+0x4e8c>
   1a640:	ldrb	r3, [r0]
   1a644:	cmp	r3, #93	; 0x5d
   1a648:	beq	1a690 <_start@@Base+0x4e70>
   1a64c:	mov	r3, #1
   1a650:	str	r3, [r6]
   1a654:	pop	{r4, r5, r6, pc}
   1a658:	mov	r3, #0
   1a65c:	mov	r0, r4
   1a660:	str	r3, [r6]
   1a664:	pop	{r4, r5, r6, pc}
   1a668:	ldrb	r3, [r1, #2]
   1a66c:	cmp	r3, #32
   1a670:	addhi	r0, r1, #2
   1a674:	bls	1a628 <_start@@Base+0x4e08>
   1a678:	b	1a638 <_start@@Base+0x4e18>
   1a67c:	ldrb	r3, [r1, #2]
   1a680:	cmp	r3, #32
   1a684:	bls	1a5e0 <_start@@Base+0x4dc0>
   1a688:	add	r0, r1, #2
   1a68c:	pop	{r4, r5, r6, pc}
   1a690:	mov	r3, #0
   1a694:	mov	r2, r4
   1a698:	add	r1, r0, #1
   1a69c:	str	r3, [r6]
   1a6a0:	mov	r0, r5
   1a6a4:	pop	{r4, r5, r6, lr}
   1a6a8:	b	17770 <_start@@Base+0x1f50>
   1a6ac:	mov	r3, #0
   1a6b0:	str	r3, [r6]
   1a6b4:	mov	r0, r5
   1a6b8:	mov	r2, r4
   1a6bc:	mov	r1, r4
   1a6c0:	mov	r3, #9
   1a6c4:	pop	{r4, r5, r6, lr}
   1a6c8:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   1a6cc:	push	{r4, r5, r6, lr}
   1a6d0:	mov	r4, r2
   1a6d4:	sub	r2, r2, r1
   1a6d8:	cmp	r2, #1
   1a6dc:	mov	r5, r0
   1a6e0:	mov	r6, r3
   1a6e4:	ble	1a6f8 <_start@@Base+0x4ed8>
   1a6e8:	ldrb	r3, [r1]
   1a6ec:	cmp	r3, #32
   1a6f0:	bhi	1a708 <_start@@Base+0x4ee8>
   1a6f4:	beq	1a778 <_start@@Base+0x4f58>
   1a6f8:	mov	r2, r4
   1a6fc:	mov	r0, r5
   1a700:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1a704:	mov	r1, r0
   1a708:	cmp	r4, r1
   1a70c:	beq	1a7dc <_start@@Base+0x4fbc>
   1a710:	ldrb	r3, [r1]
   1a714:	cmp	r3, #44	; 0x2c
   1a718:	beq	1a78c <_start@@Base+0x4f6c>
   1a71c:	mov	r3, #0
   1a720:	str	r3, [r6]
   1a724:	ldrb	r3, [r1]
   1a728:	cmp	r3, #125	; 0x7d
   1a72c:	beq	1a744 <_start@@Base+0x4f24>
   1a730:	mov	r2, r4
   1a734:	mov	r0, r5
   1a738:	mov	r3, #10
   1a73c:	pop	{r4, r5, r6, lr}
   1a740:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   1a744:	add	r0, r1, #1
   1a748:	sub	r3, r4, r0
   1a74c:	cmp	r3, #1
   1a750:	ble	1a764 <_start@@Base+0x4f44>
   1a754:	ldrb	r3, [r1, #1]
   1a758:	cmp	r3, #32
   1a75c:	pophi	{r4, r5, r6, pc}
   1a760:	beq	1a800 <_start@@Base+0x4fe0>
   1a764:	mov	r2, r4
   1a768:	mov	r1, r0
   1a76c:	mov	r0, r5
   1a770:	pop	{r4, r5, r6, lr}
   1a774:	b	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1a778:	ldrb	r3, [r1, #1]
   1a77c:	cmp	r3, #32
   1a780:	addhi	r1, r1, #1
   1a784:	bls	1a6f8 <_start@@Base+0x4ed8>
   1a788:	b	1a708 <_start@@Base+0x4ee8>
   1a78c:	add	r0, r1, #1
   1a790:	sub	r3, r4, r0
   1a794:	cmp	r3, #1
   1a798:	ble	1a7ac <_start@@Base+0x4f8c>
   1a79c:	ldrb	r3, [r1, #1]
   1a7a0:	cmp	r3, #32
   1a7a4:	bhi	1a7bc <_start@@Base+0x4f9c>
   1a7a8:	beq	1a7ec <_start@@Base+0x4fcc>
   1a7ac:	mov	r1, r0
   1a7b0:	mov	r2, r4
   1a7b4:	mov	r0, r5
   1a7b8:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1a7bc:	cmp	r4, r0
   1a7c0:	beq	1a830 <_start@@Base+0x5010>
   1a7c4:	ldrb	r3, [r0]
   1a7c8:	cmp	r3, #125	; 0x7d
   1a7cc:	beq	1a814 <_start@@Base+0x4ff4>
   1a7d0:	mov	r3, #1
   1a7d4:	str	r3, [r6]
   1a7d8:	pop	{r4, r5, r6, pc}
   1a7dc:	mov	r3, #0
   1a7e0:	mov	r0, r4
   1a7e4:	str	r3, [r6]
   1a7e8:	pop	{r4, r5, r6, pc}
   1a7ec:	ldrb	r3, [r1, #2]
   1a7f0:	cmp	r3, #32
   1a7f4:	addhi	r0, r1, #2
   1a7f8:	bls	1a7ac <_start@@Base+0x4f8c>
   1a7fc:	b	1a7bc <_start@@Base+0x4f9c>
   1a800:	ldrb	r3, [r1, #2]
   1a804:	cmp	r3, #32
   1a808:	bls	1a764 <_start@@Base+0x4f44>
   1a80c:	add	r0, r1, #2
   1a810:	pop	{r4, r5, r6, pc}
   1a814:	mov	r3, #0
   1a818:	mov	r2, r4
   1a81c:	add	r1, r0, #1
   1a820:	str	r3, [r6]
   1a824:	mov	r0, r5
   1a828:	pop	{r4, r5, r6, lr}
   1a82c:	b	17770 <_start@@Base+0x1f50>
   1a830:	mov	r3, #0
   1a834:	str	r3, [r6]
   1a838:	mov	r0, r5
   1a83c:	mov	r2, r4
   1a840:	mov	r1, r4
   1a844:	mov	r3, #10
   1a848:	pop	{r4, r5, r6, lr}
   1a84c:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   1a850:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a854:	sub	sp, sp, #44	; 0x2c
   1a858:	mov	sl, r0
   1a85c:	mov	r0, r3
   1a860:	str	r3, [sp, #24]
   1a864:	mov	r3, #0
   1a868:	str	r3, [r0]
   1a86c:	mov	r4, r1
   1a870:	ldr	r0, [sl]
   1a874:	mov	r1, #10
   1a878:	mov	r5, r2
   1a87c:	bl	27fb8 <flatcc_builder_start_table@@Base>
   1a880:	cmp	r0, #0
   1a884:	bne	1aa90 <_start@@Base+0x5270>
   1a888:	add	r3, sp, #36	; 0x24
   1a88c:	str	r3, [sp]
   1a890:	mov	r2, r5
   1a894:	mov	r3, #5
   1a898:	mov	r1, r4
   1a89c:	mov	r0, sl
   1a8a0:	bl	2f6a8 <flatcc_json_parser_prepare_unions@@Base>
   1a8a4:	cmp	r5, r0
   1a8a8:	beq	1aa90 <_start@@Base+0x5270>
   1a8ac:	add	fp, sp, #32
   1a8b0:	mov	r1, r4
   1a8b4:	mov	r3, fp
   1a8b8:	mov	r2, r5
   1a8bc:	mov	r0, sl
   1a8c0:	bl	185c4 <_start@@Base+0x2da4>
   1a8c4:	ldr	r3, [sp, #32]
   1a8c8:	cmp	r3, #0
   1a8cc:	mov	r4, r0
   1a8d0:	beq	1aa84 <_start@@Base+0x5264>
   1a8d4:	ldr	r3, [pc, #1084]	; 1ad18 <_start@@Base+0x54f8>
   1a8d8:	add	r9, pc, #992	; 0x3e0
   1a8dc:	ldrd	r8, [r9]
   1a8e0:	add	r3, pc, r3
   1a8e4:	add	r3, r3, #76	; 0x4c
   1a8e8:	str	r3, [sp, #28]
   1a8ec:	b	1a970 <_start@@Base+0x5150>
   1a8f0:	add	r3, pc, #976	; 0x3d0
   1a8f4:	ldrd	r2, [r3]
   1a8f8:	cmp	r1, r3
   1a8fc:	cmpeq	r0, r2
   1a900:	beq	1ab7c <_start@@Base+0x535c>
   1a904:	add	r3, pc, #964	; 0x3c4
   1a908:	ldrd	r2, [r3]
   1a90c:	cmp	r1, r3
   1a910:	cmpeq	r0, r2
   1a914:	beq	1ac20 <_start@@Base+0x5400>
   1a918:	add	r3, pc, #952	; 0x3b8
   1a91c:	ldrd	r2, [r3]
   1a920:	and	r0, r0, #-16777216	; 0xff000000
   1a924:	cmp	r1, r3
   1a928:	cmpeq	r0, r2
   1a92c:	bne	1a93c <_start@@Base+0x511c>
   1a930:	sub	r3, r5, r4
   1a934:	cmp	r3, #5
   1a938:	bgt	1af00 <_start@@Base+0x56e0>
   1a93c:	mov	r1, r4
   1a940:	mov	r2, r5
   1a944:	mov	r0, sl
   1a948:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1a94c:	mov	r1, r0
   1a950:	mov	r3, fp
   1a954:	mov	r2, r5
   1a958:	mov	r0, sl
   1a95c:	bl	1a6cc <_start@@Base+0x4eac>
   1a960:	ldr	r3, [sp, #32]
   1a964:	cmp	r3, #0
   1a968:	mov	r4, r0
   1a96c:	beq	1aa84 <_start@@Base+0x5264>
   1a970:	cmp	r5, r4
   1a974:	beq	1a9a0 <_start@@Base+0x5180>
   1a978:	ldrb	r3, [r4]
   1a97c:	cmp	r3, #34	; 0x22
   1a980:	moveq	r3, #0
   1a984:	addeq	r4, r4, #1
   1a988:	streq	r3, [sl, #12]
   1a98c:	beq	1a9a0 <_start@@Base+0x5180>
   1a990:	cmp	r3, #46	; 0x2e
   1a994:	movne	r3, #1
   1a998:	strne	r3, [sl, #12]
   1a99c:	beq	1adb0 <_start@@Base+0x5590>
   1a9a0:	mov	r1, r5
   1a9a4:	mov	r0, r4
   1a9a8:	bl	15948 <_start@@Base+0x128>
   1a9ac:	cmp	r1, r9
   1a9b0:	cmpeq	r0, r8
   1a9b4:	bls	1a8f0 <_start@@Base+0x50d0>
   1a9b8:	add	r3, pc, #800	; 0x320
   1a9bc:	ldrd	r2, [r3]
   1a9c0:	cmp	r1, r3
   1a9c4:	cmpeq	r0, r2
   1a9c8:	bhi	1aaac <_start@@Base+0x528c>
   1a9cc:	add	r3, pc, #788	; 0x314
   1a9d0:	ldrd	r2, [r3]
   1a9d4:	cmp	r1, r3
   1a9d8:	cmpeq	r0, r2
   1a9dc:	bne	1a93c <_start@@Base+0x511c>
   1a9e0:	add	r4, r4, #8
   1a9e4:	mov	r0, r4
   1a9e8:	mov	r1, r5
   1a9ec:	bl	15948 <_start@@Base+0x128>
   1a9f0:	add	r3, pc, #760	; 0x2f8
   1a9f4:	ldrd	r2, [r3]
   1a9f8:	bic	r6, r0, #255	; 0xff
   1a9fc:	cmp	r1, r3
   1aa00:	cmpeq	r6, r2
   1aa04:	beq	1af4c <_start@@Base+0x572c>
   1aa08:	ldr	r3, [pc, #780]	; 1ad1c <_start@@Base+0x54fc>
   1aa0c:	mov	r2, #0
   1aa10:	and	r1, r1, r3
   1aa14:	ldr	r3, [pc, #772]	; 1ad20 <_start@@Base+0x5500>
   1aa18:	and	r0, r0, r2
   1aa1c:	cmp	r1, r3
   1aa20:	mov	r2, #0
   1aa24:	cmpeq	r0, r2
   1aa28:	bne	1a93c <_start@@Base+0x511c>
   1aa2c:	sub	r3, r5, r4
   1aa30:	cmp	r3, #2
   1aa34:	ble	1a93c <_start@@Base+0x511c>
   1aa38:	mov	r1, r4
   1aa3c:	mov	r3, #2
   1aa40:	mov	r2, r5
   1aa44:	mov	r0, sl
   1aa48:	bl	18678 <_start@@Base+0x2e58>
   1aa4c:	cmp	r4, r0
   1aa50:	mov	r1, r0
   1aa54:	beq	1a93c <_start@@Base+0x511c>
   1aa58:	ldr	ip, [sp, #36]	; 0x24
   1aa5c:	ldr	r3, [pc, #704]	; 1ad24 <_start@@Base+0x5504>
   1aa60:	mov	r2, #9
   1aa64:	add	r3, pc, r3
   1aa68:	str	r3, [sp, #8]
   1aa6c:	stm	sp, {r2, ip}
   1aa70:	mov	r3, #4
   1aa74:	mov	r2, r5
   1aa78:	mov	r0, sl
   1aa7c:	bl	2faf4 <flatcc_json_parser_union_vector@@Base>
   1aa80:	b	1a94c <_start@@Base+0x512c>
   1aa84:	ldr	r3, [sl, #24]
   1aa88:	cmp	r3, #0
   1aa8c:	beq	1adcc <_start@@Base+0x55ac>
   1aa90:	mov	r2, r5
   1aa94:	mov	r1, r4
   1aa98:	mov	r0, sl
   1aa9c:	mov	r3, #33	; 0x21
   1aaa0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1aaa4:	add	sp, sp, #44	; 0x2c
   1aaa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aaac:	add	r3, pc, #580	; 0x244
   1aab0:	ldrd	r2, [r3]
   1aab4:	cmp	r1, r3
   1aab8:	cmpeq	r0, r2
   1aabc:	beq	1ad40 <_start@@Base+0x5520>
   1aac0:	add	r3, pc, #568	; 0x238
   1aac4:	ldrd	r2, [r3]
   1aac8:	cmp	r1, r3
   1aacc:	cmpeq	r0, r2
   1aad0:	bne	1a93c <_start@@Base+0x511c>
   1aad4:	add	r4, r4, #8
   1aad8:	mov	r0, r4
   1aadc:	mov	r1, r5
   1aae0:	bl	15948 <_start@@Base+0x128>
   1aae4:	ldr	r2, [pc, #560]	; 1ad1c <_start@@Base+0x54fc>
   1aae8:	mvn	r3, #0
   1aaec:	mov	r6, r0
   1aaf0:	mov	r7, r1
   1aaf4:	add	r1, pc, #524	; 0x20c
   1aaf8:	ldrd	r0, [r1]
   1aafc:	and	r3, r3, r7
   1ab00:	and	r2, r2, r6
   1ab04:	cmp	r3, r1
   1ab08:	cmpeq	r2, r0
   1ab0c:	beq	1afc0 <_start@@Base+0x57a0>
   1ab10:	and	r7, r7, #-16777216	; 0xff000000
   1ab14:	mov	r6, #0
   1ab18:	cmp	r7, #1795162112	; 0x6b000000
   1ab1c:	cmpeq	r6, #0
   1ab20:	bne	1a93c <_start@@Base+0x511c>
   1ab24:	sub	r3, r5, r4
   1ab28:	cmp	r3, #1
   1ab2c:	ble	1a93c <_start@@Base+0x511c>
   1ab30:	mov	r1, r4
   1ab34:	mov	r3, #1
   1ab38:	mov	r2, r5
   1ab3c:	mov	r0, sl
   1ab40:	bl	18678 <_start@@Base+0x2e58>
   1ab44:	cmp	r4, r0
   1ab48:	mov	r1, r0
   1ab4c:	beq	1a93c <_start@@Base+0x511c>
   1ab50:	ldr	r3, [pc, #464]	; 1ad28 <_start@@Base+0x5508>
   1ab54:	ldr	r0, [sp, #36]	; 0x24
   1ab58:	add	r3, pc, r3
   1ab5c:	mov	r2, #5
   1ab60:	stmib	sp, {r0, r3}
   1ab64:	str	r2, [sp]
   1ab68:	mov	r3, #2
   1ab6c:	mov	r2, r5
   1ab70:	mov	r0, sl
   1ab74:	bl	2f768 <flatcc_json_parser_union@@Base>
   1ab78:	b	1a94c <_start@@Base+0x512c>
   1ab7c:	add	r4, r4, #8
   1ab80:	mov	r0, r4
   1ab84:	mov	r1, r5
   1ab88:	bl	15948 <_start@@Base+0x128>
   1ab8c:	add	r3, pc, #380	; 0x17c
   1ab90:	ldrd	r2, [r3]
   1ab94:	bic	r6, r0, #255	; 0xff
   1ab98:	cmp	r1, r3
   1ab9c:	cmpeq	r6, r2
   1aba0:	beq	1ae98 <_start@@Base+0x5678>
   1aba4:	ldr	r3, [pc, #368]	; 1ad1c <_start@@Base+0x54fc>
   1aba8:	mov	r2, #0
   1abac:	and	r1, r1, r3
   1abb0:	ldr	r3, [pc, #372]	; 1ad2c <_start@@Base+0x550c>
   1abb4:	and	r0, r0, r2
   1abb8:	cmp	r1, r3
   1abbc:	mov	r2, #0
   1abc0:	cmpeq	r0, r2
   1abc4:	bne	1a93c <_start@@Base+0x511c>
   1abc8:	sub	r3, r5, r4
   1abcc:	cmp	r3, #2
   1abd0:	ble	1a93c <_start@@Base+0x511c>
   1abd4:	mov	r1, r4
   1abd8:	mov	r3, #2
   1abdc:	mov	r2, r5
   1abe0:	mov	r0, sl
   1abe4:	bl	18678 <_start@@Base+0x2e58>
   1abe8:	cmp	r4, r0
   1abec:	mov	r1, r0
   1abf0:	beq	1a93c <_start@@Base+0x511c>
   1abf4:	ldr	ip, [sp, #36]	; 0x24
   1abf8:	ldr	r3, [pc, #304]	; 1ad30 <_start@@Base+0x5510>
   1abfc:	mov	r2, #3
   1ac00:	add	r3, pc, r3
   1ac04:	str	r3, [sp, #8]
   1ac08:	stm	sp, {r2, ip}
   1ac0c:	mov	r3, #1
   1ac10:	mov	r2, r5
   1ac14:	mov	r0, sl
   1ac18:	bl	2f768 <flatcc_json_parser_union@@Base>
   1ac1c:	b	1a94c <_start@@Base+0x512c>
   1ac20:	add	r4, r4, #8
   1ac24:	mov	r0, r4
   1ac28:	mov	r1, r5
   1ac2c:	bl	15948 <_start@@Base+0x128>
   1ac30:	ldr	r3, [pc, #228]	; 1ad1c <_start@@Base+0x54fc>
   1ac34:	ldr	r7, [pc, #248]	; 1ad34 <_start@@Base+0x5514>
   1ac38:	mov	r2, #0
   1ac3c:	mov	r6, #0
   1ac40:	and	r1, r1, r3
   1ac44:	and	r0, r0, r2
   1ac48:	cmp	r1, r7
   1ac4c:	cmpeq	r0, r6
   1ac50:	bne	1a93c <_start@@Base+0x511c>
   1ac54:	sub	r3, r5, r4
   1ac58:	cmp	r3, #2
   1ac5c:	ble	1a93c <_start@@Base+0x511c>
   1ac60:	mov	r1, r4
   1ac64:	mov	r3, #2
   1ac68:	mov	r2, r5
   1ac6c:	mov	r0, sl
   1ac70:	bl	18678 <_start@@Base+0x2e58>
   1ac74:	cmp	r4, r0
   1ac78:	mov	r1, r0
   1ac7c:	beq	1a93c <_start@@Base+0x511c>
   1ac80:	ldr	r3, [pc, #176]	; 1ad38 <_start@@Base+0x5518>
   1ac84:	ldr	lr, [sp, #36]	; 0x24
   1ac88:	ldr	r2, [pc, #172]	; 1ad3c <_start@@Base+0x551c>
   1ac8c:	mov	ip, #7
   1ac90:	add	r3, pc, r3
   1ac94:	add	r2, pc, r2
   1ac98:	add	r3, r3, #28
   1ac9c:	str	r3, [sp, #8]
   1aca0:	str	r2, [sp, #12]
   1aca4:	stm	sp, {ip, lr}
   1aca8:	mov	r3, #3
   1acac:	mov	r2, r5
   1acb0:	mov	r0, sl
   1acb4:	bl	2f8ac <flatcc_json_parser_union_type@@Base>
   1acb8:	b	1a94c <_start@@Base+0x512c>
   1acbc:	nop			; (mov r0, r0)
   1acc0:	cmnvs	r3, r4, ror #8
   1acc4:	cmnvs	r8, #-2147483620	; 0x8000001c
   1acc8:	strbvs	r6, [pc, -r9, ror #28]!
   1accc:	cmnvs	lr, r1, ror #8
   1acd0:	svcvs	0x005f7479
   1acd4:	cmnvs	r1, #6464	; 0x1940
   1acd8:	svcvs	0x00000000
   1acdc:	cmnvs	r1, #6464	; 0x1940
   1ace0:	svcpl	0x00636860
   1ace4:			; <UNDEFINED> instruction: 0x6d61696e
   1ace8:	cmnvs	r3, r5, ror #8
   1acec:	cmnvs	r8, #-2147483620	; 0x8000001c
   1acf0:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1acf4:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   1acf8:	svcpl	0x00636861
   1acfc:			; <UNDEFINED> instruction: 0x6d61696e
   1ad00:	svcpl	0x006b6963
   1ad04:	cmnvc	r9, #1694498816	; 0x65000000
   1ad08:	rsbvc	r0, r5, r0
   1ad0c:	blvs	17f7ef8 <__bss_end__@@Base+0x17a2b2c>
   1ad10:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1ad14:	cmnvc	r4, #116, 30	; 0x1d0
   1ad18:	andeq	sl, r3, r0, lsr #15
   1ad1c:			; <UNDEFINED> instruction: 0xffff0000
   1ad20:	rsbsvc	r0, r3, #0
   1ad24:	andeq	r0, r0, r8, asr #12
   1ad28:	andeq	r0, r0, r4, asr r5
   1ad2c:	cmnvc	r4, #0
   1ad30:	andeq	r0, r0, ip, lsr #9
   1ad34:	rsbvc	r0, r5, r0
   1ad38:	strdeq	sl, [r3], -r0
   1ad3c:	andeq	r0, r0, r8, lsl r4
   1ad40:	add	r6, r4, #8
   1ad44:	mov	r0, r6
   1ad48:	mov	r1, r5
   1ad4c:	bl	15948 <_start@@Base+0x128>
   1ad50:	add	r3, pc, #792	; 0x318
   1ad54:	ldrd	r2, [r3]
   1ad58:	cmp	r1, r3
   1ad5c:	cmpeq	r0, r2
   1ad60:	beq	1ae04 <_start@@Base+0x55e4>
   1ad64:	ldr	r2, [pc, #796]	; 1b088 <_start@@Base+0x5868>
   1ad68:	mvn	r3, #0
   1ad6c:	and	r2, r2, r0
   1ad70:	and	r3, r3, r1
   1ad74:	mov	r0, r2
   1ad78:	mov	r1, r3
   1ad7c:	add	r3, pc, #756	; 0x2f4
   1ad80:	ldrd	r2, [r3]
   1ad84:	cmp	r1, r3
   1ad88:	cmpeq	r0, r2
   1ad8c:	bne	1ad9c <_start@@Base+0x557c>
   1ad90:	sub	r3, r5, r6
   1ad94:	cmp	r3, #6
   1ad98:	bgt	1b020 <_start@@Base+0x5800>
   1ad9c:	mov	r1, r6
   1ada0:	mov	r2, r5
   1ada4:	mov	r0, sl
   1ada8:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1adac:	b	1a94c <_start@@Base+0x512c>
   1adb0:	mov	r1, r4
   1adb4:	mov	r3, #5
   1adb8:	mov	r2, r5
   1adbc:	mov	r0, sl
   1adc0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1adc4:	mov	r4, r0
   1adc8:	b	1a9a0 <_start@@Base+0x5180>
   1adcc:	mov	r1, r4
   1add0:	ldr	r3, [sp, #36]	; 0x24
   1add4:	mov	r2, r5
   1add8:	mov	r0, sl
   1addc:	bl	2f710 <flatcc_json_parser_finalize_unions@@Base>
   1ade0:	mov	r4, r0
   1ade4:	ldr	r0, [sl]
   1ade8:	bl	289ac <flatcc_builder_end_table@@Base>
   1adec:	ldr	r3, [sp, #24]
   1adf0:	cmp	r0, #0
   1adf4:	str	r0, [r3]
   1adf8:	movne	r0, r4
   1adfc:	beq	1aa90 <_start@@Base+0x5270>
   1ae00:	b	1aaa4 <_start@@Base+0x5284>
   1ae04:	add	r4, r4, #16
   1ae08:	mov	r0, r4
   1ae0c:	mov	r1, r5
   1ae10:	bl	15948 <_start@@Base+0x128>
   1ae14:	add	r3, pc, #612	; 0x264
   1ae18:	ldrd	r2, [r3]
   1ae1c:	mov	r0, #0
   1ae20:	bic	r1, r1, #255	; 0xff
   1ae24:	cmp	r1, r3
   1ae28:	cmpeq	r0, r2
   1ae2c:	bne	1a93c <_start@@Base+0x511c>
   1ae30:	sub	r3, r5, r4
   1ae34:	cmp	r3, #3
   1ae38:	ble	1a93c <_start@@Base+0x511c>
   1ae3c:	mov	r1, r4
   1ae40:	mov	r3, #3
   1ae44:	mov	r2, r5
   1ae48:	mov	r0, sl
   1ae4c:	bl	18678 <_start@@Base+0x2e58>
   1ae50:	cmp	r4, r0
   1ae54:	mov	r1, r0
   1ae58:	beq	1a93c <_start@@Base+0x511c>
   1ae5c:	ldr	r3, [pc, #552]	; 1b08c <_start@@Base+0x586c>
   1ae60:	ldr	lr, [sp, #36]	; 0x24
   1ae64:	ldr	r2, [pc, #548]	; 1b090 <_start@@Base+0x5870>
   1ae68:	mov	ip, #1
   1ae6c:	add	r3, pc, r3
   1ae70:	add	r2, pc, r2
   1ae74:	add	r3, r3, #60	; 0x3c
   1ae78:	str	r3, [sp, #8]
   1ae7c:	str	r2, [sp, #12]
   1ae80:	stm	sp, {ip, lr}
   1ae84:	mov	r3, #0
   1ae88:	mov	r2, r5
   1ae8c:	mov	r0, sl
   1ae90:	bl	2f8ac <flatcc_json_parser_union_type@@Base>
   1ae94:	b	1a94c <_start@@Base+0x512c>
   1ae98:	sub	r3, r5, r4
   1ae9c:	cmp	r3, #7
   1aea0:	ble	1a93c <_start@@Base+0x511c>
   1aea4:	mov	r1, r4
   1aea8:	mov	r3, #7
   1aeac:	mov	r2, r5
   1aeb0:	mov	r0, sl
   1aeb4:	bl	18678 <_start@@Base+0x2e58>
   1aeb8:	cmp	r4, r0
   1aebc:	mov	r1, r0
   1aec0:	beq	1a93c <_start@@Base+0x511c>
   1aec4:	ldr	r3, [pc, #456]	; 1b094 <_start@@Base+0x5874>
   1aec8:	ldr	lr, [sp, #36]	; 0x24
   1aecc:	ldr	r2, [pc, #452]	; 1b098 <_start@@Base+0x5878>
   1aed0:	mov	ip, #3
   1aed4:	add	r3, pc, r3
   1aed8:	add	r2, pc, r2
   1aedc:	add	r3, r3, #12
   1aee0:	str	r3, [sp, #8]
   1aee4:	str	r2, [sp, #12]
   1aee8:	stm	sp, {ip, lr}
   1aeec:	mov	r3, #1
   1aef0:	mov	r2, r5
   1aef4:	mov	r0, sl
   1aef8:	bl	2f8ac <flatcc_json_parser_union_type@@Base>
   1aefc:	b	1a94c <_start@@Base+0x512c>
   1af00:	mov	r1, r4
   1af04:	mov	r3, #5
   1af08:	mov	r2, r5
   1af0c:	mov	r0, sl
   1af10:	bl	18678 <_start@@Base+0x2e58>
   1af14:	cmp	r0, r4
   1af18:	mov	r1, r0
   1af1c:	beq	1a93c <_start@@Base+0x511c>
   1af20:	ldr	ip, [sp, #36]	; 0x24
   1af24:	ldr	r3, [pc, #368]	; 1b09c <_start@@Base+0x587c>
   1af28:	mov	r2, #7
   1af2c:	add	r3, pc, r3
   1af30:	str	r3, [sp, #8]
   1af34:	stm	sp, {r2, ip}
   1af38:	mov	r3, #3
   1af3c:	mov	r2, r5
   1af40:	mov	r0, sl
   1af44:	bl	2f768 <flatcc_json_parser_union@@Base>
   1af48:	b	1a94c <_start@@Base+0x512c>
   1af4c:	sub	r3, r5, r4
   1af50:	cmp	r3, #7
   1af54:	ble	1a93c <_start@@Base+0x511c>
   1af58:	mov	r1, r4
   1af5c:	mov	r3, #7
   1af60:	mov	r2, r5
   1af64:	mov	r0, sl
   1af68:	bl	18678 <_start@@Base+0x2e58>
   1af6c:	cmp	r4, r0
   1af70:	mov	r1, r0
   1af74:	beq	1a93c <_start@@Base+0x511c>
   1af78:	ldr	r3, [pc, #288]	; 1b0a0 <_start@@Base+0x5880>
   1af7c:	ldr	lr, [sp, #36]	; 0x24
   1af80:	ldr	ip, [pc, #284]	; 1b0a4 <_start@@Base+0x5884>
   1af84:	ldr	r2, [pc, #284]	; 1b0a8 <_start@@Base+0x5888>
   1af88:	mov	r0, #9
   1af8c:	add	r3, pc, r3
   1af90:	add	ip, pc, ip
   1af94:	add	r2, pc, r2
   1af98:	add	r3, r3, #44	; 0x2c
   1af9c:	str	r3, [sp, #8]
   1afa0:	str	r2, [sp, #12]
   1afa4:	stm	sp, {r0, lr}
   1afa8:	str	ip, [sp, #16]
   1afac:	mov	r3, #4
   1afb0:	mov	r2, r5
   1afb4:	mov	r0, sl
   1afb8:	bl	2fbc0 <flatcc_json_parser_union_type_vector@@Base>
   1afbc:	b	1a94c <_start@@Base+0x512c>
   1afc0:	sub	r3, r5, r4
   1afc4:	cmp	r3, #6
   1afc8:	ble	1a93c <_start@@Base+0x511c>
   1afcc:	mov	r1, r4
   1afd0:	mov	r3, #6
   1afd4:	mov	r2, r5
   1afd8:	mov	r0, sl
   1afdc:	bl	18678 <_start@@Base+0x2e58>
   1afe0:	cmp	r4, r0
   1afe4:	mov	r1, r0
   1afe8:	beq	1a93c <_start@@Base+0x511c>
   1afec:	ldr	ip, [sp, #36]	; 0x24
   1aff0:	ldr	r3, [pc, #180]	; 1b0ac <_start@@Base+0x588c>
   1aff4:	ldr	r0, [sp, #28]
   1aff8:	mov	r2, #5
   1affc:	add	r3, pc, r3
   1b000:	str	r0, [sp, #8]
   1b004:	str	r3, [sp, #12]
   1b008:	stm	sp, {r2, ip}
   1b00c:	mov	r3, #2
   1b010:	mov	r2, r5
   1b014:	mov	r0, sl
   1b018:	bl	2f8ac <flatcc_json_parser_union_type@@Base>
   1b01c:	b	1a94c <_start@@Base+0x512c>
   1b020:	mov	r1, r6
   1b024:	mov	r3, #6
   1b028:	mov	r2, r5
   1b02c:	mov	r0, sl
   1b030:	bl	18678 <_start@@Base+0x2e58>
   1b034:	cmp	r6, r0
   1b038:	mov	r1, r0
   1b03c:	beq	1ad9c <_start@@Base+0x557c>
   1b040:	ldr	ip, [sp, #36]	; 0x24
   1b044:	ldr	r3, [pc, #100]	; 1b0b0 <_start@@Base+0x5890>
   1b048:	mov	r2, #1
   1b04c:	add	r3, pc, r3
   1b050:	str	r3, [sp, #8]
   1b054:	stm	sp, {r2, ip}
   1b058:	mov	r3, #0
   1b05c:	mov	r2, r5
   1b060:	mov	r0, sl
   1b064:	bl	2f768 <flatcc_json_parser_union@@Base>
   1b068:	b	1a94c <_start@@Base+0x512c>
   1b06c:	nop			; (mov r0, r0)
   1b070:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   1b074:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1b078:	ldrbvs	r0, [r2, #-0]!
   1b07c:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1b080:	andeq	r0, r0, r0
   1b084:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1b088:			; <UNDEFINED> instruction: 0xffff0000
   1b08c:	andeq	sl, r3, r4, lsl r2
   1b090:	andeq	r0, r0, ip, lsr r2
   1b094:	andeq	sl, r3, ip, lsr #3
   1b098:	ldrdeq	r0, [r0], -r4
   1b09c:	andeq	r0, r0, r0, lsl #3
   1b0a0:	strdeq	sl, [r3], -r4
   1b0a4:			; <UNDEFINED> instruction: 0xffffaaf8
   1b0a8:	andeq	r0, r0, r8, lsl r1
   1b0ac:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1b0b0:	andeq	r0, r0, r0, rrx
   1b0b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0b8:	sub	sp, sp, #132	; 0x84
   1b0bc:	mov	ip, #0
   1b0c0:	ldr	lr, [sp, #168]	; 0xa8
   1b0c4:	cmp	r3, #9
   1b0c8:	mov	r5, r0
   1b0cc:	str	ip, [lr]
   1b0d0:	mov	r4, r2
   1b0d4:	beq	1b184 <_start@@Base+0x5964>
   1b0d8:	mov	r8, r1
   1b0dc:	bls	1b124 <_start@@Base+0x5904>
   1b0e0:	cmp	r3, #11
   1b0e4:	beq	1b1cc <_start@@Base+0x59ac>
   1b0e8:	bcc	1b184 <_start@@Base+0x5964>
   1b0ec:	cmp	r3, #255	; 0xff
   1b0f0:	beq	1b1cc <_start@@Base+0x59ac>
   1b0f4:	ldr	r3, [r5, #8]
   1b0f8:	mov	r2, r4
   1b0fc:	tst	r3, #1
   1b100:	mov	r1, r8
   1b104:	mov	r0, r5
   1b108:	bne	1b9c8 <_start@@Base+0x61a8>
   1b10c:	mov	r3, #15
   1b110:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1b114:	mov	r1, r0
   1b118:	mov	r0, r1
   1b11c:	add	sp, sp, #132	; 0x84
   1b120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b124:	cmp	r3, #2
   1b128:	beq	1b56c <_start@@Base+0x5d4c>
   1b12c:	cmp	r3, #8
   1b130:	beq	1b1dc <_start@@Base+0x59bc>
   1b134:	cmp	r3, ip
   1b138:	bne	1b0f4 <_start@@Base+0x58d4>
   1b13c:	sub	r3, r2, r1
   1b140:	cmp	r3, #3
   1b144:	ble	1b168 <_start@@Base+0x5948>
   1b148:	ldr	r1, [pc, #1160]	; 1b5d8 <_start@@Base+0x5db8>
   1b14c:	mov	r2, #4
   1b150:	add	r1, pc, r1
   1b154:	mov	r0, r8
   1b158:	bl	14550 <memcmp@plt>
   1b15c:	cmp	r0, #0
   1b160:	addeq	r1, r8, #4
   1b164:	beq	1b118 <_start@@Base+0x58f8>
   1b168:	mov	r1, r8
   1b16c:	mov	r2, r4
   1b170:	mov	r0, r5
   1b174:	mov	r3, #26
   1b178:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1b17c:	mov	r1, r0
   1b180:	b	1b118 <_start@@Base+0x58f8>
   1b184:	ldr	r3, [sp, #168]	; 0xa8
   1b188:	bl	19b7c <_start@@Base+0x435c>
   1b18c:	mov	r1, r0
   1b190:	ldr	r3, [r5, #24]
   1b194:	cmp	r3, #0
   1b198:	bne	1b118 <_start@@Base+0x58f8>
   1b19c:	ldr	r3, [sp, #168]	; 0xa8
   1b1a0:	ldr	r3, [r3]
   1b1a4:	cmp	r3, #0
   1b1a8:	bne	1b118 <_start@@Base+0x58f8>
   1b1ac:	mov	r2, r4
   1b1b0:	mov	r0, r5
   1b1b4:	mov	r3, #33	; 0x21
   1b1b8:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1b1bc:	mov	r1, r0
   1b1c0:	mov	r0, r1
   1b1c4:	add	sp, sp, #132	; 0x84
   1b1c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1cc:	ldr	r3, [sp, #168]	; 0xa8
   1b1d0:	bl	2f500 <flatcc_json_parser_build_string@@Base>
   1b1d4:	mov	r1, r0
   1b1d8:	b	1b190 <_start@@Base+0x5970>
   1b1dc:	mov	r2, #2
   1b1e0:	mov	r1, r2
   1b1e4:	ldr	r0, [r0]
   1b1e8:	bl	2737c <flatcc_builder_start_struct@@Base>
   1b1ec:	subs	r3, r0, #0
   1b1f0:	str	r3, [sp, #48]	; 0x30
   1b1f4:	beq	1b550 <_start@@Base+0x5d30>
   1b1f8:	add	r6, sp, #112	; 0x70
   1b1fc:	mov	r1, r8
   1b200:	mov	r3, r6
   1b204:	mov	r2, r4
   1b208:	mov	r0, r5
   1b20c:	bl	185c4 <_start@@Base+0x2da4>
   1b210:	ldr	r3, [sp, #112]	; 0x70
   1b214:	cmp	r3, #0
   1b218:	mov	r1, r0
   1b21c:	beq	1b8c8 <_start@@Base+0x60a8>
   1b220:	ldr	r3, [pc, #948]	; 1b5dc <_start@@Base+0x5dbc>
   1b224:	str	r6, [sp, #32]
   1b228:	add	r3, pc, r3
   1b22c:	add	r3, r3, #104	; 0x68
   1b230:	str	r3, [sp, #72]	; 0x48
   1b234:	mov	r7, #0
   1b238:	mov	r6, r5
   1b23c:	b	1b2a8 <_start@@Base+0x5a88>
   1b240:	add	r5, r0, #8
   1b244:	mov	r0, r5
   1b248:	mov	r1, r4
   1b24c:	bl	15948 <_start@@Base+0x128>
   1b250:	add	r3, pc, #880	; 0x370
   1b254:	ldrd	r2, [r3]
   1b258:	mov	r0, #0
   1b25c:	bic	r1, r1, #255	; 0xff
   1b260:	cmp	r1, r3
   1b264:	cmpeq	r0, r2
   1b268:	bne	1b278 <_start@@Base+0x5a58>
   1b26c:	sub	r3, r4, r5
   1b270:	cmp	r3, #3
   1b274:	bgt	1b494 <_start@@Base+0x5c74>
   1b278:	mov	r1, r5
   1b27c:	mov	r2, r4
   1b280:	mov	r0, r6
   1b284:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1b288:	mov	r1, r0
   1b28c:	ldr	r3, [sp, #32]
   1b290:	mov	r2, r4
   1b294:	mov	r0, r6
   1b298:	bl	1a6cc <_start@@Base+0x4eac>
   1b29c:	ldr	r3, [sp, #112]	; 0x70
   1b2a0:	cmp	r3, #0
   1b2a4:	beq	1b8f4 <_start@@Base+0x60d4>
   1b2a8:	cmp	r4, r0
   1b2ac:	beq	1b3f8 <_start@@Base+0x5bd8>
   1b2b0:	ldrb	r3, [r0]
   1b2b4:	cmp	r3, #34	; 0x22
   1b2b8:	moveq	r3, #0
   1b2bc:	addeq	r0, r0, #1
   1b2c0:	streq	r3, [r6, #12]
   1b2c4:	beq	1b2d8 <_start@@Base+0x5ab8>
   1b2c8:	cmp	r3, #46	; 0x2e
   1b2cc:	movne	r3, #1
   1b2d0:	strne	r3, [r6, #12]
   1b2d4:	beq	1b52c <_start@@Base+0x5d0c>
   1b2d8:	sub	r3, r4, r0
   1b2dc:	cmp	r3, #8
   1b2e0:	bls	1b410 <_start@@Base+0x5bf0>
   1b2e4:	ldrb	r8, [r0, #7]
   1b2e8:	mov	r9, #0
   1b2ec:	ldrb	r2, [r0, #6]
   1b2f0:	lsr	r1, r2, #24
   1b2f4:	lsl	r3, r2, #8
   1b2f8:	str	r1, [sp, #84]	; 0x54
   1b2fc:	str	r3, [sp, #80]	; 0x50
   1b300:	ldrd	r2, [sp, #80]	; 0x50
   1b304:	orr	r2, r2, r8
   1b308:	orr	r3, r3, r9
   1b30c:	mov	r8, r2
   1b310:	mov	r9, r3
   1b314:	ldrb	r2, [r0, #5]
   1b318:	lsr	r1, r2, #16
   1b31c:	lsl	r3, r2, #16
   1b320:	str	r1, [sp, #68]	; 0x44
   1b324:	str	r3, [sp, #64]	; 0x40
   1b328:	ldrd	r2, [sp, #64]	; 0x40
   1b32c:	orr	r2, r2, r8
   1b330:	orr	r3, r3, r9
   1b334:	ldrb	r8, [r0, #4]
   1b338:	lsr	r1, r8, #8
   1b33c:	str	r1, [sp, #28]
   1b340:	lsl	r1, r8, #24
   1b344:	str	r1, [sp, #24]
   1b348:	ldrd	r8, [sp, #24]
   1b34c:	orr	r8, r8, r2
   1b350:	orr	r9, r9, r3
   1b354:	mov	r2, r8
   1b358:	mov	r3, r9
   1b35c:	ldrb	r1, [r0, #3]
   1b360:	str	r1, [sp, #44]	; 0x2c
   1b364:	mov	r1, #0
   1b368:	str	r1, [sp, #40]	; 0x28
   1b36c:	ldrd	r8, [sp, #40]	; 0x28
   1b370:	orr	r8, r8, r2
   1b374:	orr	r9, r9, r3
   1b378:	mov	r2, r8
   1b37c:	mov	r3, r9
   1b380:	ldrb	r8, [r0, #2]
   1b384:	lsl	r1, r8, #8
   1b388:	str	r1, [sp, #20]
   1b38c:	mov	r1, #0
   1b390:	str	r1, [sp, #16]
   1b394:	ldrd	r8, [sp, #16]
   1b398:	orr	r8, r8, r2
   1b39c:	orr	r9, r9, r3
   1b3a0:	mov	r2, r8
   1b3a4:	mov	r3, r9
   1b3a8:	ldrb	r8, [r0, #1]
   1b3ac:	lsl	r1, r8, #16
   1b3b0:	str	r1, [sp, #12]
   1b3b4:	mov	r1, #0
   1b3b8:	str	r1, [sp, #8]
   1b3bc:	ldrd	r8, [sp, #8]
   1b3c0:	orr	r8, r8, r2
   1b3c4:	orr	r9, r9, r3
   1b3c8:	mov	r2, r8
   1b3cc:	mov	r3, r9
   1b3d0:	ldrb	r8, [r0]
   1b3d4:	mov	sl, #0
   1b3d8:	orr	r2, r2, sl
   1b3dc:	lsl	fp, r8, #24
   1b3e0:	add	r9, pc, #488	; 0x1e8
   1b3e4:	ldrd	r8, [r9]
   1b3e8:	orr	r3, r3, fp
   1b3ec:	cmp	r3, r9
   1b3f0:	cmpeq	r2, r8
   1b3f4:	beq	1b240 <_start@@Base+0x5a20>
   1b3f8:	mov	r1, r0
   1b3fc:	mov	r2, r4
   1b400:	mov	r0, r6
   1b404:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1b408:	mov	r1, r0
   1b40c:	b	1b28c <_start@@Base+0x5a6c>
   1b410:	sub	r3, r3, #1
   1b414:	cmp	r3, #7
   1b418:	addls	pc, pc, r3, lsl #2
   1b41c:	b	1b3f8 <_start@@Base+0x5bd8>
   1b420:	b	1b488 <_start@@Base+0x5c68>
   1b424:	b	1b47c <_start@@Base+0x5c5c>
   1b428:	b	1b470 <_start@@Base+0x5c50>
   1b42c:	b	1b464 <_start@@Base+0x5c44>
   1b430:	b	1b458 <_start@@Base+0x5c38>
   1b434:	b	1b44c <_start@@Base+0x5c2c>
   1b438:	b	1b440 <_start@@Base+0x5c20>
   1b43c:	b	1b2e4 <_start@@Base+0x5ac4>
   1b440:	mov	r8, r7
   1b444:	mov	r9, #0
   1b448:	b	1b2ec <_start@@Base+0x5acc>
   1b44c:	mov	r8, r7
   1b450:	mov	r9, #0
   1b454:	b	1b314 <_start@@Base+0x5af4>
   1b458:	mov	r2, r7
   1b45c:	mov	r3, #0
   1b460:	b	1b334 <_start@@Base+0x5b14>
   1b464:	mov	r2, r7
   1b468:	mov	r3, #0
   1b46c:	b	1b35c <_start@@Base+0x5b3c>
   1b470:	mov	r2, r7
   1b474:	mov	r3, #0
   1b478:	b	1b380 <_start@@Base+0x5b60>
   1b47c:	mov	r2, r7
   1b480:	mov	r3, #0
   1b484:	b	1b3a8 <_start@@Base+0x5b88>
   1b488:	mov	r2, r7
   1b48c:	mov	r3, #0
   1b490:	b	1b3d0 <_start@@Base+0x5bb0>
   1b494:	mov	r3, #3
   1b498:	mov	r2, r4
   1b49c:	mov	r1, r5
   1b4a0:	mov	r0, r6
   1b4a4:	bl	18678 <_start@@Base+0x2e58>
   1b4a8:	cmp	r5, r0
   1b4ac:	str	r0, [sp, #56]	; 0x38
   1b4b0:	beq	1b278 <_start@@Base+0x5a58>
   1b4b4:	cmp	r4, r0
   1b4b8:	mov	r5, r0
   1b4bc:	strh	sl, [sp, #108]	; 0x6c
   1b4c0:	str	r7, [sp, #120]	; 0x78
   1b4c4:	str	sl, [sp, #124]	; 0x7c
   1b4c8:	str	sl, [sp, #116]	; 0x74
   1b4cc:	beq	1b880 <_start@@Base+0x6060>
   1b4d0:	add	r3, sp, #120	; 0x78
   1b4d4:	mov	r1, r0
   1b4d8:	str	r3, [sp]
   1b4dc:	mov	r2, r4
   1b4e0:	add	r3, sp, #116	; 0x74
   1b4e4:	mov	r0, r6
   1b4e8:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   1b4ec:	cmp	r5, r0
   1b4f0:	mov	r1, r0
   1b4f4:	beq	1b880 <_start@@Base+0x6060>
   1b4f8:	ldr	r3, [sp, #116]	; 0x74
   1b4fc:	cmp	r3, sl
   1b500:	bne	1ba08 <_start@@Base+0x61e8>
   1b504:	ldrd	r2, [sp, #120]	; 0x78
   1b508:	ldr	r8, [pc, #208]	; 1b5e0 <_start@@Base+0x5dc0>
   1b50c:	mov	r9, #0
   1b510:	cmp	r3, r9
   1b514:	cmpeq	r2, r8
   1b518:	uxthls	r2, r2
   1b51c:	bhi	1ba7c <_start@@Base+0x625c>
   1b520:	ldr	r3, [sp, #48]	; 0x30
   1b524:	strh	r2, [r3]
   1b528:	b	1b28c <_start@@Base+0x5a6c>
   1b52c:	mov	r1, r0
   1b530:	mov	r3, #5
   1b534:	mov	r2, r4
   1b538:	mov	r0, r6
   1b53c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1b540:	b	1b2d8 <_start@@Base+0x5ab8>
   1b544:	ldr	r3, [r5, #24]
   1b548:	cmp	r3, #0
   1b54c:	beq	1ba30 <_start@@Base+0x6210>
   1b550:	mov	r1, r8
   1b554:	mov	r3, #33	; 0x21
   1b558:	mov	r2, r4
   1b55c:	mov	r0, r5
   1b560:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1b564:	mov	r1, r0
   1b568:	b	1b190 <_start@@Base+0x5970>
   1b56c:	mov	r1, #1
   1b570:	ldr	r0, [r0]
   1b574:	bl	27fb8 <flatcc_builder_start_table@@Base>
   1b578:	cmp	r0, #0
   1b57c:	bne	1b550 <_start@@Base+0x5d30>
   1b580:	add	r9, sp, #108	; 0x6c
   1b584:	mov	r1, r8
   1b588:	mov	r3, r9
   1b58c:	mov	r2, r4
   1b590:	mov	r0, r5
   1b594:	bl	185c4 <_start@@Base+0x2da4>
   1b598:	ldr	r3, [sp, #108]	; 0x6c
   1b59c:	cmp	r3, #0
   1b5a0:	mov	r8, r0
   1b5a4:	beq	1b544 <_start@@Base+0x5d24>
   1b5a8:	ldr	r3, [pc, #52]	; 1b5e4 <_start@@Base+0x5dc4>
   1b5ac:	mov	fp, #0
   1b5b0:	add	r3, pc, r3
   1b5b4:	add	r3, r3, #92	; 0x5c
   1b5b8:	str	r3, [sp, #24]
   1b5bc:	str	fp, [sp, #16]
   1b5c0:	b	1b78c <_start@@Base+0x5f6c>
   1b5c4:	nop			; (mov r0, r0)
   1b5c8:	andeq	r0, r0, r0
   1b5cc:	ldrbvs	r6, [r4, -r0, lsl #16]!
   1b5d0:	svcpl	0x006c656e
   1b5d4:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   1b5d8:	andeq	r3, r2, r8, asr r2
   1b5dc:	andeq	r9, r3, r8, asr lr
   1b5e0:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1b5e4:	ldrdeq	r9, [r3], -r0
   1b5e8:	ldrb	r2, [r8, #7]
   1b5ec:	mov	r3, #0
   1b5f0:	ldrb	r0, [r8, #6]
   1b5f4:	lsr	ip, r0, #24
   1b5f8:	lsl	r1, r0, #8
   1b5fc:	str	ip, [sp, #92]	; 0x5c
   1b600:	str	r1, [sp, #88]	; 0x58
   1b604:	ldrd	r0, [sp, #88]	; 0x58
   1b608:	orr	r0, r0, r2
   1b60c:	orr	r1, r1, r3
   1b610:	mov	r2, r0
   1b614:	mov	r3, r1
   1b618:	ldrb	r0, [r8, #5]
   1b61c:	lsr	ip, r0, #16
   1b620:	lsl	r1, r0, #16
   1b624:	str	ip, [sp, #76]	; 0x4c
   1b628:	str	r1, [sp, #72]	; 0x48
   1b62c:	ldrd	r0, [sp, #72]	; 0x48
   1b630:	orr	r0, r0, r2
   1b634:	orr	r1, r1, r3
   1b638:	mov	r2, r0
   1b63c:	mov	r3, r1
   1b640:	ldrb	r0, [r8, #4]
   1b644:	lsr	ip, r0, #8
   1b648:	lsl	r1, r0, #24
   1b64c:	str	ip, [sp, #52]	; 0x34
   1b650:	str	r1, [sp, #48]	; 0x30
   1b654:	ldrd	r0, [sp, #48]	; 0x30
   1b658:	orr	r0, r0, r2
   1b65c:	orr	r1, r1, r3
   1b660:	mov	r2, r0
   1b664:	mov	r3, r1
   1b668:	ldrb	r1, [r8, #3]
   1b66c:	str	r1, [sp, #60]	; 0x3c
   1b670:	mov	r1, #0
   1b674:	str	r1, [sp, #56]	; 0x38
   1b678:	ldrd	r0, [sp, #56]	; 0x38
   1b67c:	orr	r0, r0, r2
   1b680:	orr	r1, r1, r3
   1b684:	mov	r2, r0
   1b688:	mov	r3, r1
   1b68c:	ldrb	r0, [r8, #2]
   1b690:	lsl	r1, r0, #8
   1b694:	str	r1, [sp, #36]	; 0x24
   1b698:	mov	r1, #0
   1b69c:	str	r1, [sp, #32]
   1b6a0:	ldrd	r0, [sp, #32]
   1b6a4:	orr	r0, r0, r2
   1b6a8:	orr	r1, r1, r3
   1b6ac:	mov	r2, r0
   1b6b0:	mov	r3, r1
   1b6b4:	ldrb	r0, [r8, #1]
   1b6b8:	mov	sl, #0
   1b6bc:	orr	r2, r2, sl
   1b6c0:	lsl	fp, r0, #16
   1b6c4:	orr	r3, r3, fp
   1b6c8:	ldrb	r0, [r8]
   1b6cc:	mov	r6, #0
   1b6d0:	orr	r2, r2, r6
   1b6d4:	lsl	r7, r0, #24
   1b6d8:	add	r1, pc, #952	; 0x3b8
   1b6dc:	ldrd	r0, [r1]
   1b6e0:	orr	r3, r3, r7
   1b6e4:	cmp	r3, r1
   1b6e8:	cmpeq	r2, r0
   1b6ec:	bne	1b754 <_start@@Base+0x5f34>
   1b6f0:	add	r3, r8, #8
   1b6f4:	mov	r0, r3
   1b6f8:	mov	r1, r4
   1b6fc:	str	r3, [sp, #8]
   1b700:	bl	15948 <_start@@Base+0x128>
   1b704:	add	r3, pc, #916	; 0x394
   1b708:	ldrd	r2, [r3]
   1b70c:	cmp	r1, r3
   1b710:	cmpeq	r0, r2
   1b714:	ldr	r3, [sp, #8]
   1b718:	bne	1b84c <_start@@Base+0x602c>
   1b71c:	add	r8, r8, #16
   1b720:	mov	r0, r8
   1b724:	mov	r1, r4
   1b728:	bl	15948 <_start@@Base+0x128>
   1b72c:	add	r3, pc, #884	; 0x374
   1b730:	ldrd	r2, [r3]
   1b734:	mov	r0, #0
   1b738:	bic	r1, r1, #255	; 0xff
   1b73c:	cmp	r1, r3
   1b740:	cmpeq	r0, r2
   1b744:	bne	1b754 <_start@@Base+0x5f34>
   1b748:	sub	r3, r4, r8
   1b74c:	cmp	r3, #3
   1b750:	bgt	1b900 <_start@@Base+0x60e0>
   1b754:	mov	r1, r8
   1b758:	mov	r2, r4
   1b75c:	mov	r0, r5
   1b760:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1b764:	mov	r8, r0
   1b768:	mov	r1, r8
   1b76c:	mov	r3, r9
   1b770:	mov	r2, r4
   1b774:	mov	r0, r5
   1b778:	bl	1a6cc <_start@@Base+0x4eac>
   1b77c:	ldr	r3, [sp, #108]	; 0x6c
   1b780:	cmp	r3, #0
   1b784:	mov	r8, r0
   1b788:	beq	1b544 <_start@@Base+0x5d24>
   1b78c:	cmp	r4, r8
   1b790:	beq	1b754 <_start@@Base+0x5f34>
   1b794:	ldrb	r3, [r8]
   1b798:	cmp	r3, #34	; 0x22
   1b79c:	moveq	r3, #0
   1b7a0:	addeq	r8, r8, #1
   1b7a4:	streq	r3, [r5, #12]
   1b7a8:	beq	1b7bc <_start@@Base+0x5f9c>
   1b7ac:	cmp	r3, #46	; 0x2e
   1b7b0:	movne	r3, #1
   1b7b4:	strne	r3, [r5, #12]
   1b7b8:	beq	1b864 <_start@@Base+0x6044>
   1b7bc:	sub	r3, r4, r8
   1b7c0:	cmp	r3, #8
   1b7c4:	bhi	1b5e8 <_start@@Base+0x5dc8>
   1b7c8:	sub	r3, r3, #1
   1b7cc:	cmp	r3, #7
   1b7d0:	addls	pc, pc, r3, lsl #2
   1b7d4:	b	1b754 <_start@@Base+0x5f34>
   1b7d8:	b	1b840 <_start@@Base+0x6020>
   1b7dc:	b	1b834 <_start@@Base+0x6014>
   1b7e0:	b	1b828 <_start@@Base+0x6008>
   1b7e4:	b	1b81c <_start@@Base+0x5ffc>
   1b7e8:	b	1b810 <_start@@Base+0x5ff0>
   1b7ec:	b	1b804 <_start@@Base+0x5fe4>
   1b7f0:	b	1b7f8 <_start@@Base+0x5fd8>
   1b7f4:	b	1b5e8 <_start@@Base+0x5dc8>
   1b7f8:	ldr	r2, [sp, #16]
   1b7fc:	mov	r3, #0
   1b800:	b	1b5f0 <_start@@Base+0x5dd0>
   1b804:	ldr	r2, [sp, #16]
   1b808:	mov	r3, #0
   1b80c:	b	1b618 <_start@@Base+0x5df8>
   1b810:	ldr	r2, [sp, #16]
   1b814:	mov	r3, #0
   1b818:	b	1b640 <_start@@Base+0x5e20>
   1b81c:	ldr	r2, [sp, #16]
   1b820:	mov	r3, #0
   1b824:	b	1b668 <_start@@Base+0x5e48>
   1b828:	ldr	r2, [sp, #16]
   1b82c:	mov	r3, #0
   1b830:	b	1b68c <_start@@Base+0x5e6c>
   1b834:	ldr	r2, [sp, #16]
   1b838:	mov	r3, #0
   1b83c:	b	1b6b4 <_start@@Base+0x5e94>
   1b840:	ldr	r2, [sp, #16]
   1b844:	mov	r3, #0
   1b848:	b	1b6c8 <_start@@Base+0x5ea8>
   1b84c:	mov	r1, r3
   1b850:	mov	r2, r4
   1b854:	mov	r0, r5
   1b858:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1b85c:	mov	r8, r0
   1b860:	b	1b768 <_start@@Base+0x5f48>
   1b864:	mov	r1, r8
   1b868:	mov	r3, #5
   1b86c:	mov	r2, r4
   1b870:	mov	r0, r5
   1b874:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1b878:	mov	r8, r0
   1b87c:	b	1b7bc <_start@@Base+0x5f9c>
   1b880:	ldr	r5, [sp, #56]	; 0x38
   1b884:	add	r3, sp, #108	; 0x6c
   1b888:	str	r3, [sp]
   1b88c:	mov	r1, r5
   1b890:	ldr	r3, [sp, #72]	; 0x48
   1b894:	mov	r2, r4
   1b898:	mov	r0, r6
   1b89c:	bl	18d4c <_start@@Base+0x352c>
   1b8a0:	cmp	r4, r0
   1b8a4:	cmpne	r0, r5
   1b8a8:	mov	r1, r0
   1b8ac:	bne	1ba28 <_start@@Base+0x6208>
   1b8b0:	mov	r3, #33	; 0x21
   1b8b4:	mov	r2, r4
   1b8b8:	mov	r0, r6
   1b8bc:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1b8c0:	mov	r5, r6
   1b8c4:	mov	r1, r0
   1b8c8:	cmp	r4, r1
   1b8cc:	beq	1b554 <_start@@Base+0x5d34>
   1b8d0:	ldr	r0, [r5]
   1b8d4:	str	r1, [sp, #8]
   1b8d8:	bl	27424 <flatcc_builder_end_struct@@Base>
   1b8dc:	ldr	r3, [sp, #168]	; 0xa8
   1b8e0:	ldr	r1, [sp, #8]
   1b8e4:	cmp	r0, #0
   1b8e8:	str	r0, [r3]
   1b8ec:	beq	1b554 <_start@@Base+0x5d34>
   1b8f0:	b	1b118 <_start@@Base+0x58f8>
   1b8f4:	mov	r1, r0
   1b8f8:	mov	r5, r6
   1b8fc:	b	1b8c8 <_start@@Base+0x60a8>
   1b900:	mov	r1, r8
   1b904:	mov	r3, #3
   1b908:	mov	r2, r4
   1b90c:	mov	r0, r5
   1b910:	bl	18678 <_start@@Base+0x2e58>
   1b914:	cmp	r8, r0
   1b918:	mov	r1, r0
   1b91c:	str	r0, [sp, #8]
   1b920:	beq	1b754 <_start@@Base+0x5f34>
   1b924:	ldr	r3, [sp, #16]
   1b928:	cmp	r4, r0
   1b92c:	str	r6, [sp, #112]	; 0x70
   1b930:	str	r3, [sp, #120]	; 0x78
   1b934:	str	r6, [sp, #124]	; 0x7c
   1b938:	str	r6, [sp, #116]	; 0x74
   1b93c:	beq	1bab4 <_start@@Base+0x6294>
   1b940:	add	r3, sp, #120	; 0x78
   1b944:	str	r3, [sp]
   1b948:	mov	r2, r4
   1b94c:	add	r3, sp, #116	; 0x74
   1b950:	mov	r0, r5
   1b954:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   1b958:	ldr	r3, [sp, #8]
   1b95c:	cmp	r3, r0
   1b960:	mov	r8, r0
   1b964:	beq	1bab0 <_start@@Base+0x6290>
   1b968:	ldr	r1, [sp, #116]	; 0x74
   1b96c:	ldrd	r2, [sp, #120]	; 0x78
   1b970:	cmp	r1, r6
   1b974:	beq	1b9d4 <_start@@Base+0x61b4>
   1b978:	cmp	r3, #0
   1b97c:	cmpeq	r2, #-2147483648	; 0x80000000
   1b980:	rsbls	r2, r2, #0
   1b984:	strls	r2, [sp, #112]	; 0x70
   1b988:	bhi	1ba50 <_start@@Base+0x6230>
   1b98c:	cmp	r2, #0
   1b990:	bne	1b9a0 <_start@@Base+0x6180>
   1b994:	ldr	r3, [r5, #8]
   1b998:	tst	r3, #2
   1b99c:	beq	1b768 <_start@@Base+0x5f48>
   1b9a0:	mov	r3, #4
   1b9a4:	mov	r2, r3
   1b9a8:	mov	r1, #0
   1b9ac:	ldr	r0, [r5]
   1b9b0:	bl	299f8 <flatcc_builder_table_add@@Base>
   1b9b4:	cmp	r0, #0
   1b9b8:	beq	1b550 <_start@@Base+0x5d30>
   1b9bc:	ldr	r3, [sp, #112]	; 0x70
   1b9c0:	str	r3, [r0]
   1b9c4:	b	1b768 <_start@@Base+0x5f48>
   1b9c8:	bl	2e3d0 <flatcc_json_parser_generic_json@@Base>
   1b9cc:	mov	r1, r0
   1b9d0:	b	1b118 <_start@@Base+0x58f8>
   1b9d4:	mov	r1, #0
   1b9d8:	cmp	r3, r1
   1b9dc:	mvn	r0, #-2147483648	; 0x80000000
   1b9e0:	cmpeq	r2, r0
   1b9e4:	strls	r2, [sp, #112]	; 0x70
   1b9e8:	bls	1b98c <_start@@Base+0x616c>
   1b9ec:	mov	r1, r8
   1b9f0:	mov	r3, #7
   1b9f4:	mov	r2, r4
   1b9f8:	mov	r0, r5
   1b9fc:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1ba00:	mov	r8, r0
   1ba04:	b	1ba68 <_start@@Base+0x6248>
   1ba08:	mov	r3, #8
   1ba0c:	mov	r2, r4
   1ba10:	mov	r0, r6
   1ba14:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1ba18:	mov	r1, r0
   1ba1c:	ldr	r3, [sp, #56]	; 0x38
   1ba20:	cmp	r3, r1
   1ba24:	beq	1b880 <_start@@Base+0x6060>
   1ba28:	ldrh	r2, [sp, #108]	; 0x6c
   1ba2c:	b	1b520 <_start@@Base+0x5d00>
   1ba30:	ldr	r0, [r5]
   1ba34:	bl	289ac <flatcc_builder_end_table@@Base>
   1ba38:	ldr	r3, [sp, #168]	; 0xa8
   1ba3c:	cmp	r0, #0
   1ba40:	str	r0, [r3]
   1ba44:	movne	r1, r8
   1ba48:	beq	1b550 <_start@@Base+0x5d30>
   1ba4c:	b	1b190 <_start@@Base+0x5970>
   1ba50:	mov	r1, r0
   1ba54:	mov	r3, #8
   1ba58:	mov	r2, r4
   1ba5c:	mov	r0, r5
   1ba60:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1ba64:	mov	r8, r0
   1ba68:	ldr	r3, [sp, #8]
   1ba6c:	cmp	r3, r8
   1ba70:	beq	1bab4 <_start@@Base+0x6294>
   1ba74:	ldr	r2, [sp, #112]	; 0x70
   1ba78:	b	1b98c <_start@@Base+0x616c>
   1ba7c:	mov	r3, #7
   1ba80:	mov	r2, r4
   1ba84:	mov	r0, r6
   1ba88:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1ba8c:	mov	r1, r0
   1ba90:	b	1ba1c <_start@@Base+0x61fc>
   1ba94:	nop			; (mov r0, r0)
   1ba98:	ldrbvs	r6, [pc], #-372	; 1baa0 <_start@@Base+0x6280>
   1ba9c:	cmnvc	r7, #456	; 0x1c8
   1baa0:	svcpl	0x0064616d
   1baa4:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   1baa8:	andeq	r0, r0, r0
   1baac:	cmnvs	r7, r0, lsl #10
   1bab0:	str	r0, [sp, #8]
   1bab4:	add	r3, sp, #112	; 0x70
   1bab8:	str	r3, [sp]
   1babc:	mov	r2, r4
   1bac0:	ldr	r3, [sp, #24]
   1bac4:	ldr	r1, [sp, #8]
   1bac8:	mov	r0, r5
   1bacc:	bl	1955c <_start@@Base+0x3d3c>
   1bad0:	ldr	r3, [sp, #8]
   1bad4:	cmp	r4, r0
   1bad8:	cmpne	r0, r3
   1badc:	mov	r8, r0
   1bae0:	bne	1ba74 <_start@@Base+0x6254>
   1bae4:	b	1b550 <_start@@Base+0x5d30>
   1bae8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1baec:	mov	r7, r3
   1baf0:	mov	r3, #0
   1baf4:	mov	r5, r0
   1baf8:	mov	r6, r1
   1bafc:	str	r3, [r7]
   1bb00:	mov	r1, r3
   1bb04:	ldr	r0, [r0]
   1bb08:	mov	r4, r2
   1bb0c:	bl	27fb8 <flatcc_builder_start_table@@Base>
   1bb10:	cmp	r0, #0
   1bb14:	bne	1bb50 <_start@@Base+0x6330>
   1bb18:	cmp	r6, r4
   1bb1c:	beq	1bb2c <_start@@Base+0x630c>
   1bb20:	ldrb	r3, [r6]
   1bb24:	cmp	r3, #123	; 0x7b
   1bb28:	beq	1bb84 <_start@@Base+0x6364>
   1bb2c:	mov	r1, r6
   1bb30:	mov	r3, #21
   1bb34:	mov	r2, r4
   1bb38:	mov	r0, r5
   1bb3c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1bb40:	mov	r6, r0
   1bb44:	ldr	r3, [r5, #24]
   1bb48:	cmp	r3, #0
   1bb4c:	beq	1bb68 <_start@@Base+0x6348>
   1bb50:	mov	r2, r4
   1bb54:	mov	r1, r6
   1bb58:	mov	r0, r5
   1bb5c:	mov	r3, #33	; 0x21
   1bb60:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bb64:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   1bb68:	ldr	r0, [r5]
   1bb6c:	bl	289ac <flatcc_builder_end_table@@Base>
   1bb70:	cmp	r0, #0
   1bb74:	str	r0, [r7]
   1bb78:	beq	1bb50 <_start@@Base+0x6330>
   1bb7c:	mov	r0, r6
   1bb80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bb84:	add	r1, r6, #1
   1bb88:	sub	r3, r4, r1
   1bb8c:	cmp	r3, #1
   1bb90:	ble	1bba4 <_start@@Base+0x6384>
   1bb94:	ldrb	r3, [r6, #1]
   1bb98:	cmp	r3, #32
   1bb9c:	bhi	1bbb4 <_start@@Base+0x6394>
   1bba0:	beq	1bd60 <_start@@Base+0x6540>
   1bba4:	mov	r2, r4
   1bba8:	mov	r0, r5
   1bbac:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1bbb0:	mov	r1, r0
   1bbb4:	cmp	r4, r1
   1bbb8:	beq	1bbc8 <_start@@Base+0x63a8>
   1bbbc:	ldrb	r3, [r1]
   1bbc0:	cmp	r3, #125	; 0x7d
   1bbc4:	beq	1bd08 <_start@@Base+0x64e8>
   1bbc8:	mov	r6, #1
   1bbcc:	mov	r9, #5
   1bbd0:	mov	r8, #0
   1bbd4:	cmp	r4, r1
   1bbd8:	beq	1bbfc <_start@@Base+0x63dc>
   1bbdc:	ldrb	r3, [r1]
   1bbe0:	cmp	r3, #34	; 0x22
   1bbe4:	addeq	r1, r1, #1
   1bbe8:	streq	r8, [r5, #12]
   1bbec:	beq	1bbfc <_start@@Base+0x63dc>
   1bbf0:	cmp	r3, #46	; 0x2e
   1bbf4:	strne	r6, [r5, #12]
   1bbf8:	beq	1bd20 <_start@@Base+0x6500>
   1bbfc:	mov	r2, r4
   1bc00:	mov	r0, r5
   1bc04:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1bc08:	sub	r3, r4, r0
   1bc0c:	cmp	r3, #1
   1bc10:	ble	1bc24 <_start@@Base+0x6404>
   1bc14:	ldrb	r3, [r0]
   1bc18:	cmp	r3, #32
   1bc1c:	bhi	1bc34 <_start@@Base+0x6414>
   1bc20:	beq	1bca4 <_start@@Base+0x6484>
   1bc24:	mov	r1, r0
   1bc28:	mov	r2, r4
   1bc2c:	mov	r0, r5
   1bc30:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1bc34:	cmp	r4, r0
   1bc38:	beq	1bcbc <_start@@Base+0x649c>
   1bc3c:	ldrb	r3, [r0]
   1bc40:	cmp	r3, #44	; 0x2c
   1bc44:	beq	1bcc4 <_start@@Base+0x64a4>
   1bc48:	cmp	r3, #125	; 0x7d
   1bc4c:	beq	1bc6c <_start@@Base+0x644c>
   1bc50:	mov	r1, r0
   1bc54:	mov	r3, #10
   1bc58:	mov	r2, r4
   1bc5c:	mov	r0, r5
   1bc60:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1bc64:	mov	r6, r0
   1bc68:	b	1bb44 <_start@@Base+0x6324>
   1bc6c:	add	r6, r0, #1
   1bc70:	sub	r3, r4, r6
   1bc74:	cmp	r3, #1
   1bc78:	ble	1bc8c <_start@@Base+0x646c>
   1bc7c:	ldrb	r3, [r0, #1]
   1bc80:	cmp	r3, #32
   1bc84:	bhi	1bb44 <_start@@Base+0x6324>
   1bc88:	beq	1bd38 <_start@@Base+0x6518>
   1bc8c:	mov	r1, r6
   1bc90:	mov	r2, r4
   1bc94:	mov	r0, r5
   1bc98:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1bc9c:	mov	r6, r0
   1bca0:	b	1bb44 <_start@@Base+0x6324>
   1bca4:	ldrb	r3, [r0, #1]
   1bca8:	cmp	r3, #32
   1bcac:	addhi	r0, r0, #1
   1bcb0:	bls	1bc24 <_start@@Base+0x6404>
   1bcb4:	cmp	r4, r0
   1bcb8:	bne	1bc3c <_start@@Base+0x641c>
   1bcbc:	mov	r6, r4
   1bcc0:	b	1bb44 <_start@@Base+0x6324>
   1bcc4:	add	r1, r0, #1
   1bcc8:	sub	r3, r4, r1
   1bccc:	cmp	r3, #1
   1bcd0:	ble	1bce4 <_start@@Base+0x64c4>
   1bcd4:	ldrb	r3, [r0, #1]
   1bcd8:	cmp	r3, #32
   1bcdc:	bhi	1bcf4 <_start@@Base+0x64d4>
   1bce0:	beq	1bd4c <_start@@Base+0x652c>
   1bce4:	mov	r2, r4
   1bce8:	mov	r0, r5
   1bcec:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1bcf0:	mov	r1, r0
   1bcf4:	cmp	r4, r1
   1bcf8:	beq	1bd74 <_start@@Base+0x6554>
   1bcfc:	ldrb	r3, [r1]
   1bd00:	cmp	r3, #125	; 0x7d
   1bd04:	bne	1bbd4 <_start@@Base+0x63b4>
   1bd08:	add	r1, r1, #1
   1bd0c:	mov	r2, r4
   1bd10:	mov	r0, r5
   1bd14:	bl	17770 <_start@@Base+0x1f50>
   1bd18:	mov	r6, r0
   1bd1c:	b	1bb44 <_start@@Base+0x6324>
   1bd20:	mov	r3, r9
   1bd24:	mov	r2, r4
   1bd28:	mov	r0, r5
   1bd2c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1bd30:	mov	r1, r0
   1bd34:	b	1bbfc <_start@@Base+0x63dc>
   1bd38:	ldrb	r3, [r0, #2]
   1bd3c:	cmp	r3, #32
   1bd40:	addhi	r6, r0, #2
   1bd44:	bls	1bc8c <_start@@Base+0x646c>
   1bd48:	b	1bb44 <_start@@Base+0x6324>
   1bd4c:	ldrb	r3, [r0, #2]
   1bd50:	cmp	r3, #32
   1bd54:	addhi	r1, r0, #2
   1bd58:	bls	1bce4 <_start@@Base+0x64c4>
   1bd5c:	b	1bcf4 <_start@@Base+0x64d4>
   1bd60:	ldrb	r3, [r6, #2]
   1bd64:	cmp	r3, #32
   1bd68:	addhi	r1, r6, #2
   1bd6c:	bls	1bba4 <_start@@Base+0x6384>
   1bd70:	b	1bbb4 <_start@@Base+0x6394>
   1bd74:	mov	r3, #10
   1bd78:	mov	r2, r4
   1bd7c:	mov	r1, r4
   1bd80:	mov	r0, r5
   1bd84:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1bd88:	mov	r6, r0
   1bd8c:	b	1bb44 <_start@@Base+0x6324>
   1bd90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd94:	sub	sp, sp, #100	; 0x64
   1bd98:	cmp	r1, r2
   1bd9c:	mov	r5, r2
   1bda0:	mov	r6, r0
   1bda4:	str	r3, [sp, #64]	; 0x40
   1bda8:	beq	1bdb8 <_start@@Base+0x6598>
   1bdac:	ldrb	r3, [r1]
   1bdb0:	cmp	r3, #123	; 0x7b
   1bdb4:	beq	1bdd8 <_start@@Base+0x65b8>
   1bdb8:	mov	r2, r5
   1bdbc:	mov	r0, r6
   1bdc0:	mov	r3, #21
   1bdc4:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1bdc8:	mov	r5, r0
   1bdcc:	mov	r0, r5
   1bdd0:	add	sp, sp, #100	; 0x64
   1bdd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bdd8:	add	r4, r1, #1
   1bddc:	sub	r3, r2, r4
   1bde0:	cmp	r3, #1
   1bde4:	ble	1bdf8 <_start@@Base+0x65d8>
   1bde8:	ldrb	r3, [r1, #1]
   1bdec:	cmp	r3, #32
   1bdf0:	bhi	1be0c <_start@@Base+0x65ec>
   1bdf4:	beq	1c5b0 <_start@@Base+0x6d90>
   1bdf8:	mov	r1, r4
   1bdfc:	mov	r2, r5
   1be00:	mov	r0, r6
   1be04:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1be08:	mov	r4, r0
   1be0c:	cmp	r5, r4
   1be10:	beq	1be20 <_start@@Base+0x6600>
   1be14:	ldrb	r3, [r4]
   1be18:	cmp	r3, #125	; 0x7d
   1be1c:	beq	1c5c4 <_start@@Base+0x6da4>
   1be20:	ldr	r2, [pc, #1972]	; 1c5dc <_start@@Base+0x6dbc>
   1be24:	ldr	r3, [pc, #1972]	; 1c5e0 <_start@@Base+0x6dc0>
   1be28:	add	r2, pc, r2
   1be2c:	add	r3, pc, r3
   1be30:	mov	r7, #0
   1be34:	add	r2, r2, #128	; 0x80
   1be38:	add	r3, r3, #116	; 0x74
   1be3c:	str	r2, [sp, #72]	; 0x48
   1be40:	str	r3, [sp, #76]	; 0x4c
   1be44:	strd	r8, [sp, #32]
   1be48:	cmp	r5, r4
   1be4c:	beq	1c0f8 <_start@@Base+0x68d8>
   1be50:	ldrb	r3, [r4]
   1be54:	cmp	r3, #34	; 0x22
   1be58:	beq	1c298 <_start@@Base+0x6a78>
   1be5c:	cmp	r3, #46	; 0x2e
   1be60:	movne	r3, #1
   1be64:	subne	ip, r5, r4
   1be68:	strne	r3, [r6, #12]
   1be6c:	beq	1c3d4 <_start@@Base+0x6bb4>
   1be70:	cmp	ip, #8
   1be74:	bls	1c10c <_start@@Base+0x68ec>
   1be78:	ldrb	r2, [r4, #6]
   1be7c:	mov	r9, #0
   1be80:	lsr	r1, r2, #24
   1be84:	lsl	r3, r2, #8
   1be88:	str	r1, [sp, #60]	; 0x3c
   1be8c:	str	r3, [sp, #56]	; 0x38
   1be90:	ldrd	r2, [sp, #56]	; 0x38
   1be94:	orr	r3, r3, r9
   1be98:	mov	r9, r3
   1be9c:	ldrb	r2, [r4, #5]
   1bea0:	lsr	r1, r2, #16
   1bea4:	lsl	r3, r2, #16
   1bea8:	str	r1, [sp, #52]	; 0x34
   1beac:	str	r3, [sp, #48]	; 0x30
   1beb0:	ldrd	r2, [sp, #48]	; 0x30
   1beb4:	orr	r3, r3, r9
   1beb8:	mov	r9, r3
   1bebc:	ldrb	r2, [r4, #4]
   1bec0:	lsr	r1, r2, #8
   1bec4:	lsl	r3, r2, #24
   1bec8:	str	r1, [sp, #28]
   1becc:	str	r3, [sp, #24]
   1bed0:	ldrd	r2, [sp, #24]
   1bed4:	orr	r3, r3, r9
   1bed8:	mov	r9, r3
   1bedc:	ldrb	r3, [r4, #3]
   1bee0:	str	r3, [sp, #44]	; 0x2c
   1bee4:	mov	r3, #0
   1bee8:	str	r3, [sp, #40]	; 0x28
   1beec:	ldrd	r2, [sp, #40]	; 0x28
   1bef0:	orr	r3, r3, r9
   1bef4:	mov	r9, r3
   1bef8:	ldrb	r2, [r4, #2]
   1befc:	lsl	r3, r2, #8
   1bf00:	str	r3, [sp, #20]
   1bf04:	mov	r3, #0
   1bf08:	str	r3, [sp, #16]
   1bf0c:	ldrd	r2, [sp, #16]
   1bf10:	orr	r3, r3, r9
   1bf14:	mov	r9, r3
   1bf18:	ldrb	r2, [r4]
   1bf1c:	ldrb	r0, [r4, #1]
   1bf20:	mov	sl, #0
   1bf24:	str	sl, [sp, #8]
   1bf28:	lsl	r3, r2, #24
   1bf2c:	str	r3, [sp, #12]
   1bf30:	ldrd	r2, [sp, #8]
   1bf34:	lsl	fp, r0, #16
   1bf38:	orr	r9, r9, fp
   1bf3c:	orr	r3, r3, r9
   1bf40:	and	r3, r3, #-16777216	; 0xff000000
   1bf44:	mov	r2, #0
   1bf48:	cmp	r3, #1644167168	; 0x62000000
   1bf4c:	cmpeq	r2, #0
   1bf50:	strd	r2, [sp, #32]
   1bf54:	beq	1c164 <_start@@Base+0x6944>
   1bf58:	ldrd	r2, [sp, #32]
   1bf5c:	cmp	r3, #1627389952	; 0x61000000
   1bf60:	cmpeq	r2, #0
   1bf64:	bne	1c0f8 <_start@@Base+0x68d8>
   1bf68:	cmp	ip, #1
   1bf6c:	ble	1c0f8 <_start@@Base+0x68d8>
   1bf70:	ldr	r3, [r6, #12]
   1bf74:	cmp	r3, #0
   1bf78:	ldrb	r3, [r4, #1]
   1bf7c:	beq	1c338 <_start@@Base+0x6b18>
   1bf80:	cmp	r3, #58	; 0x3a
   1bf84:	cmpne	r3, #32
   1bf88:	movls	r3, #0
   1bf8c:	movhi	r3, #1
   1bf90:	strls	r3, [r6, #12]
   1bf94:	addls	r1, r4, #1
   1bf98:	bhi	1c0f8 <_start@@Base+0x68d8>
   1bf9c:	sub	r3, r5, r1
   1bfa0:	cmp	r3, #1
   1bfa4:	ble	1bfb8 <_start@@Base+0x6798>
   1bfa8:	ldrb	r3, [r1]
   1bfac:	cmp	r3, #32
   1bfb0:	bhi	1bfc8 <_start@@Base+0x67a8>
   1bfb4:	beq	1c4e0 <_start@@Base+0x6cc0>
   1bfb8:	mov	r2, r5
   1bfbc:	mov	r0, r6
   1bfc0:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1bfc4:	mov	r1, r0
   1bfc8:	cmp	r5, r1
   1bfcc:	beq	1bfdc <_start@@Base+0x67bc>
   1bfd0:	ldrb	r3, [r1]
   1bfd4:	cmp	r3, #58	; 0x3a
   1bfd8:	beq	1c508 <_start@@Base+0x6ce8>
   1bfdc:	mov	r3, #4
   1bfe0:	mov	r2, r5
   1bfe4:	mov	r0, r6
   1bfe8:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1bfec:	str	r0, [sp, #68]	; 0x44
   1bff0:	ldr	r1, [sp, #68]	; 0x44
   1bff4:	cmp	r1, r4
   1bff8:	beq	1c0f8 <_start@@Base+0x68d8>
   1bffc:	mov	r2, #0
   1c000:	mov	r3, #0
   1c004:	cmp	r5, r1
   1c008:	mov	r4, r1
   1c00c:	strh	r7, [sp, #82]	; 0x52
   1c010:	str	r7, [sp, #84]	; 0x54
   1c014:	strd	r2, [sp, #88]	; 0x58
   1c018:	beq	1c438 <_start@@Base+0x6c18>
   1c01c:	add	r3, sp, #88	; 0x58
   1c020:	str	r3, [sp]
   1c024:	mov	r2, r5
   1c028:	add	r3, sp, #84	; 0x54
   1c02c:	mov	r0, r6
   1c030:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   1c034:	cmp	r4, r0
   1c038:	beq	1c438 <_start@@Base+0x6c18>
   1c03c:	ldr	r1, [sp, #84]	; 0x54
   1c040:	ldrd	r2, [sp, #88]	; 0x58
   1c044:	cmp	r1, #0
   1c048:	beq	1c348 <_start@@Base+0x6b28>
   1c04c:	cmp	r3, #0
   1c050:	cmpeq	r2, #32768	; 0x8000
   1c054:	rsbls	r2, r2, #0
   1c058:	sxthls	r2, r2
   1c05c:	bhi	1c408 <_start@@Base+0x6be8>
   1c060:	ldr	r3, [sp, #64]	; 0x40
   1c064:	strh	r2, [r3]
   1c068:	sub	r3, r5, r0
   1c06c:	cmp	r3, #1
   1c070:	ble	1c084 <_start@@Base+0x6864>
   1c074:	ldrb	r3, [r0]
   1c078:	cmp	r3, #32
   1c07c:	bhi	1c094 <_start@@Base+0x6874>
   1c080:	beq	1c2a8 <_start@@Base+0x6a88>
   1c084:	mov	r1, r0
   1c088:	mov	r2, r5
   1c08c:	mov	r0, r6
   1c090:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1c094:	cmp	r5, r0
   1c098:	beq	1bdcc <_start@@Base+0x65ac>
   1c09c:	ldrb	r3, [r0]
   1c0a0:	cmp	r3, #44	; 0x2c
   1c0a4:	beq	1c2bc <_start@@Base+0x6a9c>
   1c0a8:	cmp	r3, #125	; 0x7d
   1c0ac:	beq	1c264 <_start@@Base+0x6a44>
   1c0b0:	mov	r2, r5
   1c0b4:	mov	r1, r0
   1c0b8:	mov	r3, #10
   1c0bc:	mov	r0, r6
   1c0c0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1c0c4:	mov	r5, r0
   1c0c8:	mov	r0, r5
   1c0cc:	add	sp, sp, #100	; 0x64
   1c0d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0d4:	ldrb	r2, [r4]
   1c0d8:	lsl	r3, r2, #24
   1c0dc:	str	r3, [sp, #36]	; 0x24
   1c0e0:	mov	r3, #0
   1c0e4:	str	r3, [sp, #32]
   1c0e8:	ldrd	r2, [sp, #32]
   1c0ec:	cmp	r3, #1644167168	; 0x62000000
   1c0f0:	cmpeq	r2, #0
   1c0f4:	bne	1bf58 <_start@@Base+0x6738>
   1c0f8:	mov	r1, r4
   1c0fc:	mov	r2, r5
   1c100:	mov	r0, r6
   1c104:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c108:	b	1c068 <_start@@Base+0x6848>
   1c10c:	sub	r3, ip, #1
   1c110:	cmp	r3, #7
   1c114:	addls	pc, pc, r3, lsl #2
   1c118:	b	1c0f8 <_start@@Base+0x68d8>
   1c11c:	b	1c0d4 <_start@@Base+0x68b4>
   1c120:	b	1c15c <_start@@Base+0x693c>
   1c124:	b	1c154 <_start@@Base+0x6934>
   1c128:	b	1c14c <_start@@Base+0x692c>
   1c12c:	b	1c144 <_start@@Base+0x6924>
   1c130:	b	1c13c <_start@@Base+0x691c>
   1c134:	b	1be78 <_start@@Base+0x6658>
   1c138:	b	1be78 <_start@@Base+0x6658>
   1c13c:	mov	r9, #0
   1c140:	b	1be9c <_start@@Base+0x667c>
   1c144:	mov	r9, #0
   1c148:	b	1bebc <_start@@Base+0x669c>
   1c14c:	mov	r9, #0
   1c150:	b	1bedc <_start@@Base+0x66bc>
   1c154:	mov	r9, #0
   1c158:	b	1bef8 <_start@@Base+0x66d8>
   1c15c:	mov	r9, #0
   1c160:	b	1bf18 <_start@@Base+0x66f8>
   1c164:	cmp	ip, #1
   1c168:	ble	1c0f8 <_start@@Base+0x68d8>
   1c16c:	ldr	r3, [r6, #12]
   1c170:	cmp	r3, sl
   1c174:	ldrb	r3, [r4, #1]
   1c178:	beq	1c390 <_start@@Base+0x6b70>
   1c17c:	cmp	r3, #58	; 0x3a
   1c180:	cmpne	r3, #32
   1c184:	movls	r3, #0
   1c188:	movhi	r3, #1
   1c18c:	strls	r3, [r6, #12]
   1c190:	addls	r1, r4, #1
   1c194:	bhi	1c0f8 <_start@@Base+0x68d8>
   1c198:	sub	r3, r5, r1
   1c19c:	cmp	r3, #1
   1c1a0:	ble	1c1b4 <_start@@Base+0x6994>
   1c1a4:	ldrb	r3, [r1]
   1c1a8:	cmp	r3, #32
   1c1ac:	bhi	1c1c4 <_start@@Base+0x69a4>
   1c1b0:	beq	1c4f4 <_start@@Base+0x6cd4>
   1c1b4:	mov	r2, r5
   1c1b8:	mov	r0, r6
   1c1bc:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1c1c0:	mov	r1, r0
   1c1c4:	cmp	r5, r1
   1c1c8:	beq	1c1d8 <_start@@Base+0x69b8>
   1c1cc:	ldrb	r3, [r1]
   1c1d0:	cmp	r3, #58	; 0x3a
   1c1d4:	beq	1c544 <_start@@Base+0x6d24>
   1c1d8:	mov	r3, #4
   1c1dc:	mov	r2, r5
   1c1e0:	mov	r0, r6
   1c1e4:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1c1e8:	mov	r8, r0
   1c1ec:	cmp	r8, r4
   1c1f0:	mov	r1, r8
   1c1f4:	beq	1c0f8 <_start@@Base+0x68d8>
   1c1f8:	mov	r2, #0
   1c1fc:	mov	r3, #0
   1c200:	cmp	r5, r8
   1c204:	strb	r7, [sp, #82]	; 0x52
   1c208:	str	r7, [sp, #84]	; 0x54
   1c20c:	strd	r2, [sp, #88]	; 0x58
   1c210:	beq	1c4b4 <_start@@Base+0x6c94>
   1c214:	add	r3, sp, #88	; 0x58
   1c218:	str	r3, [sp]
   1c21c:	mov	r2, r5
   1c220:	add	r3, sp, #84	; 0x54
   1c224:	mov	r0, r6
   1c228:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   1c22c:	cmp	r8, r0
   1c230:	beq	1c4b4 <_start@@Base+0x6c94>
   1c234:	ldr	r1, [sp, #84]	; 0x54
   1c238:	ldrd	r2, [sp, #88]	; 0x58
   1c23c:	cmp	r1, #0
   1c240:	beq	1c3a0 <_start@@Base+0x6b80>
   1c244:	cmp	r3, #0
   1c248:	cmpeq	r2, #128	; 0x80
   1c24c:	rsbls	r2, r2, #0
   1c250:	sxtbls	r2, r2
   1c254:	bhi	1c420 <_start@@Base+0x6c00>
   1c258:	ldr	r3, [sp, #64]	; 0x40
   1c25c:	strb	r2, [r3, #2]
   1c260:	b	1c068 <_start@@Base+0x6848>
   1c264:	add	r1, r0, #1
   1c268:	sub	r3, r5, r1
   1c26c:	cmp	r3, #1
   1c270:	ble	1c284 <_start@@Base+0x6a64>
   1c274:	ldrb	r3, [r0, #1]
   1c278:	cmp	r3, #32
   1c27c:	bhi	1c388 <_start@@Base+0x6b68>
   1c280:	beq	1c3f4 <_start@@Base+0x6bd4>
   1c284:	mov	r2, r5
   1c288:	mov	r0, r6
   1c28c:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1c290:	mov	r5, r0
   1c294:	b	1bdcc <_start@@Base+0x65ac>
   1c298:	add	r4, r4, #1
   1c29c:	str	r7, [r6, #12]
   1c2a0:	sub	ip, r5, r4
   1c2a4:	b	1be70 <_start@@Base+0x6650>
   1c2a8:	ldrb	r3, [r0, #1]
   1c2ac:	cmp	r3, #32
   1c2b0:	addhi	r0, r0, #1
   1c2b4:	bls	1c084 <_start@@Base+0x6864>
   1c2b8:	b	1c094 <_start@@Base+0x6874>
   1c2bc:	add	r4, r0, #1
   1c2c0:	sub	r3, r5, r4
   1c2c4:	cmp	r3, #1
   1c2c8:	ble	1c2dc <_start@@Base+0x6abc>
   1c2cc:	ldrb	r3, [r0, #1]
   1c2d0:	cmp	r3, #32
   1c2d4:	bhi	1c2f0 <_start@@Base+0x6ad0>
   1c2d8:	beq	1c480 <_start@@Base+0x6c60>
   1c2dc:	mov	r1, r4
   1c2e0:	mov	r2, r5
   1c2e4:	mov	r0, r6
   1c2e8:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1c2ec:	mov	r4, r0
   1c2f0:	cmp	r5, r4
   1c2f4:	beq	1c498 <_start@@Base+0x6c78>
   1c2f8:	ldrb	r3, [r4]
   1c2fc:	cmp	r3, #125	; 0x7d
   1c300:	bne	1be48 <_start@@Base+0x6628>
   1c304:	add	r1, r4, #1
   1c308:	sub	r3, r5, r1
   1c30c:	cmp	r3, #1
   1c310:	ble	1c284 <_start@@Base+0x6a64>
   1c314:	ldrb	r3, [r4, #1]
   1c318:	cmp	r3, #32
   1c31c:	bhi	1c388 <_start@@Base+0x6b68>
   1c320:	bne	1c284 <_start@@Base+0x6a64>
   1c324:	ldrb	r3, [r4, #2]
   1c328:	cmp	r3, #32
   1c32c:	addhi	r5, r4, #2
   1c330:	bls	1c284 <_start@@Base+0x6a64>
   1c334:	b	1bdcc <_start@@Base+0x65ac>
   1c338:	cmp	r3, #34	; 0x22
   1c33c:	bne	1c0f8 <_start@@Base+0x68d8>
   1c340:	add	r1, r4, #2
   1c344:	b	1bf9c <_start@@Base+0x677c>
   1c348:	ldr	r8, [pc, #660]	; 1c5e4 <_start@@Base+0x6dc4>
   1c34c:	mov	r9, #0
   1c350:	cmp	r3, r9
   1c354:	cmpeq	r2, r8
   1c358:	sxthls	r2, r2
   1c35c:	bls	1c060 <_start@@Base+0x6840>
   1c360:	mov	r1, r0
   1c364:	mov	r3, #7
   1c368:	mov	r2, r5
   1c36c:	mov	r0, r6
   1c370:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1c374:	ldr	r3, [sp, #68]	; 0x44
   1c378:	cmp	r3, r0
   1c37c:	beq	1c438 <_start@@Base+0x6c18>
   1c380:	ldrsh	r2, [sp, #82]	; 0x52
   1c384:	b	1c060 <_start@@Base+0x6840>
   1c388:	mov	r5, r1
   1c38c:	b	1bdcc <_start@@Base+0x65ac>
   1c390:	cmp	r3, #34	; 0x22
   1c394:	bne	1c0f8 <_start@@Base+0x68d8>
   1c398:	add	r1, r4, #2
   1c39c:	b	1c198 <_start@@Base+0x6978>
   1c3a0:	cmp	r3, #0
   1c3a4:	cmpeq	r2, #127	; 0x7f
   1c3a8:	sxtbls	r2, r2
   1c3ac:	bls	1c258 <_start@@Base+0x6a38>
   1c3b0:	mov	r1, r0
   1c3b4:	mov	r3, #7
   1c3b8:	mov	r2, r5
   1c3bc:	mov	r0, r6
   1c3c0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1c3c4:	cmp	r8, r0
   1c3c8:	beq	1c4b4 <_start@@Base+0x6c94>
   1c3cc:	ldrsb	r2, [sp, #82]	; 0x52
   1c3d0:	b	1c258 <_start@@Base+0x6a38>
   1c3d4:	mov	r1, r4
   1c3d8:	mov	r3, #5
   1c3dc:	mov	r2, r5
   1c3e0:	mov	r0, r6
   1c3e4:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1c3e8:	mov	r4, r0
   1c3ec:	sub	ip, r5, r0
   1c3f0:	b	1be70 <_start@@Base+0x6650>
   1c3f4:	ldrb	r3, [r0, #2]
   1c3f8:	cmp	r3, #32
   1c3fc:	addhi	r5, r0, #2
   1c400:	bls	1c284 <_start@@Base+0x6a64>
   1c404:	b	1bdcc <_start@@Base+0x65ac>
   1c408:	mov	r1, r0
   1c40c:	mov	r3, #8
   1c410:	mov	r2, r5
   1c414:	mov	r0, r6
   1c418:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1c41c:	b	1c374 <_start@@Base+0x6b54>
   1c420:	mov	r1, r0
   1c424:	mov	r3, #8
   1c428:	mov	r2, r5
   1c42c:	mov	r0, r6
   1c430:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1c434:	b	1c3c4 <_start@@Base+0x6ba4>
   1c438:	ldr	r4, [sp, #68]	; 0x44
   1c43c:	add	r3, sp, #82	; 0x52
   1c440:	str	r3, [sp]
   1c444:	mov	r2, r5
   1c448:	ldr	r3, [sp, #72]	; 0x48
   1c44c:	mov	r1, r4
   1c450:	mov	r0, r6
   1c454:	bl	1913c <_start@@Base+0x391c>
   1c458:	cmp	r5, r0
   1c45c:	cmpne	r0, r4
   1c460:	bne	1c380 <_start@@Base+0x6b60>
   1c464:	mov	r2, r5
   1c468:	mov	r1, r0
   1c46c:	mov	r3, #33	; 0x21
   1c470:	mov	r0, r6
   1c474:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1c478:	mov	r5, r0
   1c47c:	b	1bdcc <_start@@Base+0x65ac>
   1c480:	ldrb	r3, [r0, #2]
   1c484:	cmp	r3, #32
   1c488:	addhi	r4, r0, #2
   1c48c:	bls	1c2dc <_start@@Base+0x6abc>
   1c490:	cmp	r5, r4
   1c494:	bne	1c2f8 <_start@@Base+0x6ad8>
   1c498:	mov	r2, r5
   1c49c:	mov	r1, r5
   1c4a0:	mov	r0, r6
   1c4a4:	mov	r3, #10
   1c4a8:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1c4ac:	mov	r5, r0
   1c4b0:	b	1bdcc <_start@@Base+0x65ac>
   1c4b4:	add	r3, sp, #82	; 0x52
   1c4b8:	str	r3, [sp]
   1c4bc:	mov	r2, r5
   1c4c0:	ldr	r3, [sp, #76]	; 0x4c
   1c4c4:	mov	r1, r8
   1c4c8:	mov	r0, r6
   1c4cc:	bl	19350 <_start@@Base+0x3b30>
   1c4d0:	cmp	r5, r0
   1c4d4:	cmpne	r0, r8
   1c4d8:	bne	1c3cc <_start@@Base+0x6bac>
   1c4dc:	b	1c464 <_start@@Base+0x6c44>
   1c4e0:	ldrb	r3, [r1, #1]
   1c4e4:	cmp	r3, #32
   1c4e8:	addhi	r1, r1, #1
   1c4ec:	bls	1bfb8 <_start@@Base+0x6798>
   1c4f0:	b	1bfc8 <_start@@Base+0x67a8>
   1c4f4:	ldrb	r3, [r1, #1]
   1c4f8:	cmp	r3, #32
   1c4fc:	addhi	r1, r1, #1
   1c500:	bls	1c1b4 <_start@@Base+0x6994>
   1c504:	b	1c1c4 <_start@@Base+0x69a4>
   1c508:	add	r3, r1, #1
   1c50c:	str	r3, [sp, #68]	; 0x44
   1c510:	sub	r3, r5, r3
   1c514:	cmp	r3, #1
   1c518:	ble	1c52c <_start@@Base+0x6d0c>
   1c51c:	ldrb	r3, [r1, #1]
   1c520:	cmp	r3, #32
   1c524:	bhi	1bff0 <_start@@Base+0x67d0>
   1c528:	beq	1c580 <_start@@Base+0x6d60>
   1c52c:	ldr	r1, [sp, #68]	; 0x44
   1c530:	mov	r2, r5
   1c534:	mov	r0, r6
   1c538:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1c53c:	str	r0, [sp, #68]	; 0x44
   1c540:	b	1bff0 <_start@@Base+0x67d0>
   1c544:	add	r3, r1, #1
   1c548:	mov	r8, r3
   1c54c:	sub	r3, r5, r3
   1c550:	cmp	r3, #1
   1c554:	ble	1c568 <_start@@Base+0x6d48>
   1c558:	ldrb	r3, [r1, #1]
   1c55c:	cmp	r3, #32
   1c560:	bhi	1c1ec <_start@@Base+0x69cc>
   1c564:	beq	1c598 <_start@@Base+0x6d78>
   1c568:	mov	r1, r8
   1c56c:	mov	r2, r5
   1c570:	mov	r0, r6
   1c574:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   1c578:	mov	r8, r0
   1c57c:	b	1c1ec <_start@@Base+0x69cc>
   1c580:	ldrb	r3, [r1, #2]
   1c584:	cmp	r3, #32
   1c588:	addhi	r3, r1, #2
   1c58c:	strhi	r3, [sp, #68]	; 0x44
   1c590:	bls	1c52c <_start@@Base+0x6d0c>
   1c594:	b	1bff0 <_start@@Base+0x67d0>
   1c598:	ldrb	r3, [r1, #2]
   1c59c:	cmp	r3, #32
   1c5a0:	addhi	r3, r1, #2
   1c5a4:	movhi	r8, r3
   1c5a8:	bls	1c568 <_start@@Base+0x6d48>
   1c5ac:	b	1c1ec <_start@@Base+0x69cc>
   1c5b0:	ldrb	r3, [r1, #2]
   1c5b4:	cmp	r3, #32
   1c5b8:	addhi	r4, r1, #2
   1c5bc:	bls	1bdf8 <_start@@Base+0x65d8>
   1c5c0:	b	1be0c <_start@@Base+0x65ec>
   1c5c4:	mov	r2, r5
   1c5c8:	add	r1, r4, #1
   1c5cc:	mov	r0, r6
   1c5d0:	bl	17770 <_start@@Base+0x1f50>
   1c5d4:	mov	r5, r0
   1c5d8:	b	1bdcc <_start@@Base+0x65ac>
   1c5dc:	andeq	r9, r3, r8, asr r2
   1c5e0:	andeq	r9, r3, r4, asr r2
   1c5e4:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1c5e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5ec:	vpush	{d8-d9}
   1c5f0:	mov	sl, r0
   1c5f4:	mov	r0, r3
   1c5f8:	mov	fp, r1
   1c5fc:	sub	sp, sp, #156	; 0x9c
   1c600:	mov	r1, #36	; 0x24
   1c604:	str	r3, [sp, #76]	; 0x4c
   1c608:	mov	r3, #0
   1c60c:	str	r3, [r0]
   1c610:	ldr	r0, [sl]
   1c614:	mov	r9, r2
   1c618:	bl	27fb8 <flatcc_builder_start_table@@Base>
   1c61c:	cmp	r0, #0
   1c620:	bne	1c7e8 <_start@@Base+0x6fc8>
   1c624:	add	r3, sp, #128	; 0x80
   1c628:	str	r3, [sp]
   1c62c:	mov	r2, r9
   1c630:	mov	r3, #1
   1c634:	mov	r1, fp
   1c638:	mov	r0, sl
   1c63c:	bl	2f6a8 <flatcc_json_parser_prepare_unions@@Base>
   1c640:	cmp	r9, r0
   1c644:	beq	1c7e8 <_start@@Base+0x6fc8>
   1c648:	add	r3, sp, #120	; 0x78
   1c64c:	mov	r1, fp
   1c650:	mov	r2, r9
   1c654:	mov	r0, sl
   1c658:	mov	r4, r3
   1c65c:	bl	185c4 <_start@@Base+0x2da4>
   1c660:	ldr	r3, [sp, #120]	; 0x78
   1c664:	cmp	r3, #0
   1c668:	mov	fp, r0
   1c66c:	beq	1c7b0 <_start@@Base+0x6f90>
   1c670:	ldr	r1, [pc, #1152]	; 1caf8 <_start@@Base+0x72d8>
   1c674:	ldr	r2, [pc, #1152]	; 1cafc <_start@@Base+0x72dc>
   1c678:	ldr	r3, [pc, #1152]	; 1cb00 <_start@@Base+0x72e0>
   1c67c:	add	r1, pc, r1
   1c680:	add	r2, pc, r2
   1c684:	add	r3, pc, r3
   1c688:	mov	fp, r9
   1c68c:	mov	r7, r0
   1c690:	mov	r9, r4
   1c694:	add	r1, r1, #476	; 0x1dc
   1c698:	add	r2, r2, #452	; 0x1c4
   1c69c:	add	r3, r3, #428	; 0x1ac
   1c6a0:	str	r1, [sp, #80]	; 0x50
   1c6a4:	str	r2, [sp, #84]	; 0x54
   1c6a8:	str	r3, [sp, #96]	; 0x60
   1c6ac:	cmp	fp, r7
   1c6b0:	beq	1c6dc <_start@@Base+0x6ebc>
   1c6b4:	ldrb	r3, [r7]
   1c6b8:	cmp	r3, #34	; 0x22
   1c6bc:	moveq	r3, #0
   1c6c0:	addeq	r7, r7, #1
   1c6c4:	streq	r3, [sl, #12]
   1c6c8:	beq	1c6dc <_start@@Base+0x6ebc>
   1c6cc:	cmp	r3, #46	; 0x2e
   1c6d0:	movne	r3, #1
   1c6d4:	strne	r3, [sl, #12]
   1c6d8:	beq	1cc8c <_start@@Base+0x746c>
   1c6dc:	mov	r1, fp
   1c6e0:	mov	r0, r7
   1c6e4:	bl	15948 <_start@@Base+0x128>
   1c6e8:	add	r3, pc, #880	; 0x370
   1c6ec:	ldrd	r2, [r3]
   1c6f0:	cmp	r1, r3
   1c6f4:	cmpeq	r0, r2
   1c6f8:	mov	r4, r0
   1c6fc:	mov	r5, r1
   1c700:	bhi	1c808 <_start@@Base+0x6fe8>
   1c704:	add	r3, pc, #860	; 0x35c
   1c708:	ldrd	r2, [r3]
   1c70c:	cmp	r1, r3
   1c710:	cmpeq	r0, r2
   1c714:	bhi	1c884 <_start@@Base+0x7064>
   1c718:	add	r3, pc, #848	; 0x350
   1c71c:	ldrd	r2, [r3]
   1c720:	cmp	r1, r3
   1c724:	cmpeq	r0, r2
   1c728:	bhi	1c938 <_start@@Base+0x7118>
   1c72c:	add	r3, pc, #836	; 0x344
   1c730:	ldrd	r2, [r3]
   1c734:	and	r4, r0, #-16777216	; 0xff000000
   1c738:	cmp	r1, r3
   1c73c:	cmpeq	r4, r2
   1c740:	beq	1d248 <_start@@Base+0x7a28>
   1c744:	add	r3, pc, #820	; 0x334
   1c748:	ldrd	r2, [r3]
   1c74c:	cmp	r1, r3
   1c750:	cmpeq	r4, r2
   1c754:	beq	1cdf8 <_start@@Base+0x75d8>
   1c758:	mov	r1, r7
   1c75c:	mov	r2, fp
   1c760:	mov	r0, sl
   1c764:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c768:	mov	r7, r0
   1c76c:	b	1c784 <_start@@Base+0x6f64>
   1c770:	mov	r1, r7
   1c774:	mov	r2, fp
   1c778:	mov	r0, sl
   1c77c:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c780:	mov	r7, r0
   1c784:	mov	r1, r7
   1c788:	mov	r3, r9
   1c78c:	mov	r2, fp
   1c790:	mov	r0, sl
   1c794:	bl	1a6cc <_start@@Base+0x4eac>
   1c798:	ldr	r3, [sp, #120]	; 0x78
   1c79c:	cmp	r3, #0
   1c7a0:	mov	r7, r0
   1c7a4:	bne	1c6ac <_start@@Base+0x6e8c>
   1c7a8:	mov	r9, fp
   1c7ac:	mov	fp, r0
   1c7b0:	ldr	r3, [sl, #24]
   1c7b4:	cmp	r3, #0
   1c7b8:	bne	1c7e8 <_start@@Base+0x6fc8>
   1c7bc:	mov	r1, #3
   1c7c0:	ldr	r0, [sl]
   1c7c4:	bl	287d4 <flatcc_builder_check_required_field@@Base>
   1c7c8:	mov	r1, fp
   1c7cc:	cmp	r0, #0
   1c7d0:	bne	1f610 <_start@@Base+0x9df0>
   1c7d4:	mov	r3, #29
   1c7d8:	mov	r2, r9
   1c7dc:	mov	r0, sl
   1c7e0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1c7e4:	mov	fp, r0
   1c7e8:	mov	r2, r9
   1c7ec:	mov	r1, fp
   1c7f0:	mov	r0, sl
   1c7f4:	mov	r3, #33	; 0x21
   1c7f8:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1c7fc:	add	sp, sp, #156	; 0x9c
   1c800:	vpop	{d8-d9}
   1c804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c808:	add	r3, pc, #632	; 0x278
   1c80c:	ldrd	r2, [r3]
   1c810:	cmp	r1, r3
   1c814:	cmpeq	r0, r2
   1c818:	bhi	1c8dc <_start@@Base+0x70bc>
   1c81c:	add	r3, pc, #620	; 0x26c
   1c820:	ldrd	r2, [r3]
   1c824:	cmp	r1, r3
   1c828:	cmpeq	r0, r2
   1c82c:	beq	1cc00 <_start@@Base+0x73e0>
   1c830:	add	r3, pc, #608	; 0x260
   1c834:	ldrd	r2, [r3]
   1c838:	cmp	r1, r3
   1c83c:	cmpeq	r0, r2
   1c840:	bhi	1cba4 <_start@@Base+0x7384>
   1c844:	add	r3, pc, #596	; 0x254
   1c848:	ldrd	r2, [r3]
   1c84c:	cmp	r1, r3
   1c850:	cmpeq	r0, r2
   1c854:	beq	1d2bc <_start@@Base+0x7a9c>
   1c858:	add	r3, pc, #584	; 0x248
   1c85c:	ldrd	r2, [r3]
   1c860:	cmp	r1, r3
   1c864:	cmpeq	r0, r2
   1c868:	beq	1ce80 <_start@@Base+0x7660>
   1c86c:	mov	r1, r7
   1c870:	mov	r2, fp
   1c874:	mov	r0, sl
   1c878:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c87c:	mov	r7, r0
   1c880:	b	1c784 <_start@@Base+0x6f64>
   1c884:	add	r3, pc, #548	; 0x224
   1c888:	ldrd	r2, [r3]
   1c88c:	cmp	r1, r3
   1c890:	cmpeq	r0, r2
   1c894:	bhi	1c97c <_start@@Base+0x715c>
   1c898:	add	r3, pc, #536	; 0x218
   1c89c:	ldrd	r2, [r3]
   1c8a0:	cmp	r1, r3
   1c8a4:	cmpeq	r0, r2
   1c8a8:	bhi	1cca8 <_start@@Base+0x7488>
   1c8ac:	add	r3, pc, #524	; 0x20c
   1c8b0:	ldrd	r2, [r3]
   1c8b4:	mov	r4, #0
   1c8b8:	cmp	r1, r3
   1c8bc:	cmpeq	r4, r2
   1c8c0:	beq	1cf98 <_start@@Base+0x7778>
   1c8c4:	mov	r1, r7
   1c8c8:	mov	r2, fp
   1c8cc:	mov	r0, sl
   1c8d0:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c8d4:	mov	r7, r0
   1c8d8:	b	1c784 <_start@@Base+0x6f64>
   1c8dc:	add	r3, pc, #484	; 0x1e4
   1c8e0:	ldrd	r2, [r3]
   1c8e4:	cmp	r1, r3
   1c8e8:	cmpeq	r0, r2
   1c8ec:	bhi	1cb14 <_start@@Base+0x72f4>
   1c8f0:	add	r3, pc, #472	; 0x1d8
   1c8f4:	ldrd	r2, [r3]
   1c8f8:	ldr	r0, [pc, #516]	; 1cb04 <_start@@Base+0x72e4>
   1c8fc:	mvn	r1, #0
   1c900:	and	r5, r5, r1
   1c904:	and	r4, r4, r0
   1c908:	cmp	r5, r3
   1c90c:	cmpeq	r4, r2
   1c910:	bne	1c770 <_start@@Base+0x6f50>
   1c914:	sub	r3, fp, r7
   1c918:	cmp	r3, #6
   1c91c:	bgt	1cfe0 <_start@@Base+0x77c0>
   1c920:	mov	r1, r7
   1c924:	mov	r2, fp
   1c928:	mov	r0, sl
   1c92c:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c930:	mov	r7, r0
   1c934:	b	1c784 <_start@@Base+0x6f64>
   1c938:	ldr	r3, [pc, #456]	; 1cb08 <_start@@Base+0x72e8>
   1c93c:	mvn	r2, #0
   1c940:	cmp	r1, r3
   1c944:	cmpeq	r0, r2
   1c948:	bhi	1ccfc <_start@@Base+0x74dc>
   1c94c:	add	r3, pc, #388	; 0x184
   1c950:	ldrd	r2, [r3]
   1c954:	mov	r4, #0
   1c958:	cmp	r1, r3
   1c95c:	cmpeq	r4, r2
   1c960:	beq	1cfbc <_start@@Base+0x779c>
   1c964:	mov	r1, r7
   1c968:	mov	r2, fp
   1c96c:	mov	r0, sl
   1c970:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c974:	mov	r7, r0
   1c978:	b	1c784 <_start@@Base+0x6f64>
   1c97c:	add	r3, pc, #348	; 0x15c
   1c980:	ldrd	r2, [r3]
   1c984:	and	r0, r0, #-16777216	; 0xff000000
   1c988:	cmp	r1, r3
   1c98c:	cmpeq	r0, r2
   1c990:	strd	r0, [sp, #56]	; 0x38
   1c994:	beq	1d188 <_start@@Base+0x7968>
   1c998:	sub	r6, fp, r7
   1c99c:	cmp	r6, #4
   1c9a0:	bgt	1e9dc <_start@@Base+0x91bc>
   1c9a4:	add	r3, pc, #316	; 0x13c
   1c9a8:	ldrd	r2, [r3]
   1c9ac:	ldrd	r0, [sp, #56]	; 0x38
   1c9b0:	cmp	r1, r3
   1c9b4:	cmpeq	r0, r2
   1c9b8:	beq	1d0ac <_start@@Base+0x788c>
   1c9bc:	add	r3, pc, #300	; 0x12c
   1c9c0:	ldrd	r2, [r3]
   1c9c4:	cmp	r5, r3
   1c9c8:	cmpeq	r4, r2
   1c9cc:	bne	1d0b4 <_start@@Base+0x7894>
   1c9d0:	add	r7, r7, #8
   1c9d4:	mov	r0, r7
   1c9d8:	mov	r1, fp
   1c9dc:	bl	15948 <_start@@Base+0x128>
   1c9e0:	mov	r0, #0
   1c9e4:	and	r1, r1, #-16777216	; 0xff000000
   1c9e8:	cmp	r1, #1694498816	; 0x65000000
   1c9ec:	cmpeq	r0, #0
   1c9f0:	bne	1d4a0 <_start@@Base+0x7c80>
   1c9f4:	sub	r3, fp, r7
   1c9f8:	cmp	r3, #1
   1c9fc:	ble	1dad8 <_start@@Base+0x82b8>
   1ca00:	mov	r1, r7
   1ca04:	mov	r3, #1
   1ca08:	mov	r2, fp
   1ca0c:	mov	r0, sl
   1ca10:	bl	18678 <_start@@Base+0x2e58>
   1ca14:	cmp	r7, r0
   1ca18:	mov	r1, r0
   1ca1c:	beq	1dad8 <_start@@Base+0x82b8>
   1ca20:	ldr	r3, [pc, #228]	; 1cb0c <_start@@Base+0x72ec>
   1ca24:	ldr	ip, [sp, #128]	; 0x80
   1ca28:	ldr	r2, [pc, #224]	; 1cb10 <_start@@Base+0x72f0>
   1ca2c:	mov	r0, #8
   1ca30:	add	r3, pc, r3
   1ca34:	add	r2, pc, r2
   1ca38:	add	r3, r3, #268	; 0x10c
   1ca3c:	str	r3, [sp, #8]
   1ca40:	str	r2, [sp, #12]
   1ca44:	stm	sp, {r0, ip}
   1ca48:	mov	r3, #0
   1ca4c:	mov	r2, fp
   1ca50:	mov	r0, sl
   1ca54:	bl	2f8ac <flatcc_json_parser_union_type@@Base>
   1ca58:	mov	r7, r0
   1ca5c:	b	1c784 <_start@@Base+0x6f64>
   1ca60:	cmnvs	r2, r0, ror #4
   1ca64:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ca68:			; <UNDEFINED> instruction: 0xffffffff
   1ca6c:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   1ca70:			; <UNDEFINED> instruction: 0xffffffff
   1ca74:			; <UNDEFINED> instruction: 0x666c6577
   1ca78:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   1ca7c:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   1ca80:	andvc	r0, r0, #0
   1ca84:	cmnvs	pc, #28416	; 0x6f00
   1ca88:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1ca8c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ca90:	cmnvs	r2, r1, ror #4
   1ca94:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ca98:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1ca9c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1caa0:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1caa4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1caa8:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1caac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cab0:			; <UNDEFINED> instruction: 0xffffffff
   1cab4:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   1cab8:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   1cabc:	rsbvc	r7, r1, r5, ror #4
   1cac0:	andeq	r0, r0, r0
   1cac4:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   1cac8:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   1cacc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cad0:	ldrtvs	r0, [r3], -r0
   1cad4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cad8:	andeq	r0, r0, r0
   1cadc:			; <UNDEFINED> instruction: 0x666c6578
   1cae0:	strcc	r0, [r0], #-0
   1cae4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cae8:	strcc	r0, [r0, #-0]
   1caec:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1caf0:	svcpl	0x00747970
   1caf4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1caf8:	andeq	r8, r3, r4, lsl #20
   1cafc:	andeq	r8, r3, r0, lsl #20
   1cb00:	strdeq	r8, [r3], -ip
   1cb04:			; <UNDEFINED> instruction: 0xffff0000
   1cb08:	stmdavs	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
   1cb0c:	andeq	r8, r3, r0, asr r6
   1cb10:	muleq	r0, r0, r2
   1cb14:	add	r3, pc, #972	; 0x3cc
   1cb18:	ldrd	r2, [r3]
   1cb1c:	cmp	r1, r3
   1cb20:	cmpeq	r0, r2
   1cb24:	beq	1d26c <_start@@Base+0x7a4c>
   1cb28:	add	r3, pc, #960	; 0x3c0
   1cb2c:	ldrd	r2, [r3]
   1cb30:	cmp	r1, r3
   1cb34:	cmpeq	r0, r2
   1cb38:	bls	1cda8 <_start@@Base+0x7588>
   1cb3c:	add	r3, pc, #948	; 0x3b4
   1cb40:	ldrd	r2, [r3]
   1cb44:	cmp	r1, r3
   1cb48:	cmpeq	r0, r2
   1cb4c:	bne	1d314 <_start@@Base+0x7af4>
   1cb50:	add	r4, r7, #8
   1cb54:	mov	r0, r4
   1cb58:	mov	r1, fp
   1cb5c:	bl	15948 <_start@@Base+0x128>
   1cb60:	add	r3, pc, #920	; 0x398
   1cb64:	ldrd	r2, [r3]
   1cb68:	cmp	r1, r3
   1cb6c:	cmpeq	r0, r2
   1cb70:	beq	1f160 <_start@@Base+0x9940>
   1cb74:	add	r3, pc, #908	; 0x38c
   1cb78:	ldrd	r2, [r3]
   1cb7c:	bic	r0, r0, #255	; 0xff
   1cb80:	cmp	r1, r3
   1cb84:	cmpeq	r0, r2
   1cb88:	beq	1dab4 <_start@@Base+0x8294>
   1cb8c:	mov	r1, r4
   1cb90:	mov	r2, fp
   1cb94:	mov	r0, sl
   1cb98:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1cb9c:	mov	r7, r0
   1cba0:	b	1c784 <_start@@Base+0x6f64>
   1cba4:	add	r3, pc, #868	; 0x364
   1cba8:	ldrd	r2, [r3]
   1cbac:	cmp	r1, r3
   1cbb0:	cmpeq	r0, r2
   1cbb4:	bls	1cd58 <_start@@Base+0x7538>
   1cbb8:	add	r3, pc, #856	; 0x358
   1cbbc:	ldrd	r2, [r3]
   1cbc0:	ldr	r0, [pc, #968]	; 1cf90 <_start@@Base+0x7770>
   1cbc4:	mvn	r1, #0
   1cbc8:	and	r5, r5, r1
   1cbcc:	cmp	r5, r3
   1cbd0:	and	r4, r4, r0
   1cbd4:	cmpeq	r4, r2
   1cbd8:	sub	r3, fp, r7
   1cbdc:	beq	1d51c <_start@@Base+0x7cfc>
   1cbe0:	cmp	r3, #5
   1cbe4:	bgt	1f33c <_start@@Base+0x9b1c>
   1cbe8:	mov	r1, r7
   1cbec:	mov	r2, fp
   1cbf0:	mov	r0, sl
   1cbf4:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1cbf8:	mov	r7, r0
   1cbfc:	b	1c784 <_start@@Base+0x6f64>
   1cc00:	add	r4, r7, #8
   1cc04:	mov	r0, r4
   1cc08:	mov	r1, fp
   1cc0c:	bl	15948 <_start@@Base+0x128>
   1cc10:	add	r3, pc, #776	; 0x308
   1cc14:	ldrd	r2, [r3]
   1cc18:	cmp	r1, r3
   1cc1c:	cmpeq	r0, r2
   1cc20:	bhi	1ce1c <_start@@Base+0x75fc>
   1cc24:	add	r3, pc, #764	; 0x2fc
   1cc28:	ldrd	r2, [r3]
   1cc2c:	cmp	r1, r3
   1cc30:	cmpeq	r0, r2
   1cc34:	beq	1e214 <_start@@Base+0x89f4>
   1cc38:	add	r3, pc, #752	; 0x2f0
   1cc3c:	ldrd	r2, [r3]
   1cc40:	cmp	r1, r3
   1cc44:	cmpeq	r0, r2
   1cc48:	bne	1d4d4 <_start@@Base+0x7cb4>
   1cc4c:	add	r4, r7, #16
   1cc50:	mov	r0, r4
   1cc54:	mov	r1, fp
   1cc58:	bl	15948 <_start@@Base+0x128>
   1cc5c:	add	r3, pc, #724	; 0x2d4
   1cc60:	ldrd	r2, [r3]
   1cc64:	bic	r0, r0, #255	; 0xff
   1cc68:	cmp	r1, r3
   1cc6c:	cmpeq	r0, r2
   1cc70:	beq	1db28 <_start@@Base+0x8308>
   1cc74:	mov	r1, r4
   1cc78:	mov	r2, fp
   1cc7c:	mov	r0, sl
   1cc80:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1cc84:	mov	r7, r0
   1cc88:	b	1c784 <_start@@Base+0x6f64>
   1cc8c:	mov	r1, r7
   1cc90:	mov	r3, #5
   1cc94:	mov	r2, fp
   1cc98:	mov	r0, sl
   1cc9c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1cca0:	mov	r7, r0
   1cca4:	b	1c6dc <_start@@Base+0x6ebc>
   1cca8:	add	r3, pc, #656	; 0x290
   1ccac:	ldrd	r2, [r3]
   1ccb0:	cmp	r1, r3
   1ccb4:	cmpeq	r0, r2
   1ccb8:	beq	1d070 <_start@@Base+0x7850>
   1ccbc:	add	r3, pc, #644	; 0x284
   1ccc0:	ldrd	r2, [r3]
   1ccc4:	bic	r5, r1, #255	; 0xff
   1ccc8:	mov	r4, #0
   1cccc:	cmp	r5, r3
   1ccd0:	cmpeq	r4, r2
   1ccd4:	bne	1d35c <_start@@Base+0x7b3c>
   1ccd8:	sub	r3, fp, r7
   1ccdc:	cmp	r3, #3
   1cce0:	bgt	1ea2c <_start@@Base+0x920c>
   1cce4:	mov	r1, r7
   1cce8:	mov	r2, fp
   1ccec:	mov	r0, sl
   1ccf0:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ccf4:	mov	r7, r0
   1ccf8:	b	1c784 <_start@@Base+0x6f64>
   1ccfc:	add	r3, pc, #588	; 0x24c
   1cd00:	ldrd	r2, [r3]
   1cd04:	cmp	r1, r3
   1cd08:	cmpeq	r0, r2
   1cd0c:	bhi	1cea4 <_start@@Base+0x7684>
   1cd10:	ldr	r3, [pc, #632]	; 1cf90 <_start@@Base+0x7770>
   1cd14:	mov	r2, #0
   1cd18:	and	r5, r5, r3
   1cd1c:	ldr	r3, [pc, #624]	; 1cf94 <_start@@Base+0x7774>
   1cd20:	and	r4, r4, r2
   1cd24:	cmp	r5, r3
   1cd28:	mov	r2, #0
   1cd2c:	cmpeq	r4, r2
   1cd30:	bne	1d4b8 <_start@@Base+0x7c98>
   1cd34:	sub	r3, fp, r7
   1cd38:	cmp	r3, #2
   1cd3c:	bgt	1dc20 <_start@@Base+0x8400>
   1cd40:	mov	r1, r7
   1cd44:	mov	r2, fp
   1cd48:	mov	r0, sl
   1cd4c:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1cd50:	mov	r7, r0
   1cd54:	b	1c784 <_start@@Base+0x6f64>
   1cd58:	add	r3, pc, #504	; 0x1f8
   1cd5c:	ldrd	r2, [r3]
   1cd60:	cmp	r1, r3
   1cd64:	cmpeq	r0, r2
   1cd68:	bne	1d344 <_start@@Base+0x7b24>
   1cd6c:	add	r4, r7, #8
   1cd70:	mov	r0, r4
   1cd74:	mov	r1, fp
   1cd78:	bl	15948 <_start@@Base+0x128>
   1cd7c:	mov	r0, #0
   1cd80:	and	r1, r1, #-16777216	; 0xff000000
   1cd84:	cmp	r1, #2030043136	; 0x79000000
   1cd88:	cmpeq	r0, #0
   1cd8c:	beq	1d668 <_start@@Base+0x7e48>
   1cd90:	mov	r1, r4
   1cd94:	mov	r2, fp
   1cd98:	mov	r0, sl
   1cd9c:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1cda0:	mov	r7, r0
   1cda4:	b	1c784 <_start@@Base+0x6f64>
   1cda8:	add	r3, pc, #432	; 0x1b0
   1cdac:	ldrd	r2, [r3]
   1cdb0:	cmp	r1, r3
   1cdb4:	cmpeq	r0, r2
   1cdb8:	bne	1d32c <_start@@Base+0x7b0c>
   1cdbc:	add	r4, r7, #8
   1cdc0:	mov	r0, r4
   1cdc4:	mov	r1, fp
   1cdc8:	bl	15948 <_start@@Base+0x128>
   1cdcc:	add	r3, pc, #404	; 0x194
   1cdd0:	ldrd	r2, [r3]
   1cdd4:	cmp	r1, r3
   1cdd8:	cmpeq	r0, r2
   1cddc:	beq	1d874 <_start@@Base+0x8054>
   1cde0:	mov	r1, r4
   1cde4:	mov	r2, fp
   1cde8:	mov	r0, sl
   1cdec:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1cdf0:	mov	r7, r0
   1cdf4:	b	1c784 <_start@@Base+0x6f64>
   1cdf8:	sub	r3, fp, r7
   1cdfc:	cmp	r3, #5
   1ce00:	bgt	1d53c <_start@@Base+0x7d1c>
   1ce04:	mov	r1, r7
   1ce08:	mov	r2, fp
   1ce0c:	mov	r0, sl
   1ce10:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ce14:	mov	r7, r0
   1ce18:	b	1c784 <_start@@Base+0x6f64>
   1ce1c:	add	r3, pc, #332	; 0x14c
   1ce20:	ldrd	r2, [r3]
   1ce24:	cmp	r1, r3
   1ce28:	cmpeq	r0, r2
   1ce2c:	beq	1e3ac <_start@@Base+0x8b8c>
   1ce30:	add	r3, pc, #320	; 0x140
   1ce34:	ldrd	r2, [r3]
   1ce38:	cmp	r1, r3
   1ce3c:	cmpeq	r0, r2
   1ce40:	bne	1d4ec <_start@@Base+0x7ccc>
   1ce44:	add	r4, r7, #16
   1ce48:	mov	r0, r4
   1ce4c:	mov	r1, fp
   1ce50:	bl	15948 <_start@@Base+0x128>
   1ce54:	mov	r0, #0
   1ce58:	and	r1, r1, #-16777216	; 0xff000000
   1ce5c:	cmp	r1, #1929379840	; 0x73000000
   1ce60:	cmpeq	r0, #0
   1ce64:	beq	1db4c <_start@@Base+0x832c>
   1ce68:	mov	r1, r4
   1ce6c:	mov	r2, fp
   1ce70:	mov	r0, sl
   1ce74:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ce78:	mov	r7, r0
   1ce7c:	b	1c784 <_start@@Base+0x6f64>
   1ce80:	sub	r3, fp, r7
   1ce84:	cmp	r3, #8
   1ce88:	bgt	1e548 <_start@@Base+0x8d28>
   1ce8c:	mov	r1, r7
   1ce90:	mov	r2, fp
   1ce94:	mov	r0, sl
   1ce98:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ce9c:	mov	r7, r0
   1cea0:	b	1c784 <_start@@Base+0x6f64>
   1cea4:	add	r3, pc, #212	; 0xd4
   1cea8:	ldrd	r2, [r3]
   1ceac:	cmp	r1, r3
   1ceb0:	cmpeq	r0, r2
   1ceb4:	beq	1e854 <_start@@Base+0x9034>
   1ceb8:	add	r3, pc, #200	; 0xc8
   1cebc:	ldrd	r2, [r3]
   1cec0:	mov	r4, #0
   1cec4:	cmp	r1, r3
   1cec8:	cmpeq	r4, r2
   1cecc:	beq	1d644 <_start@@Base+0x7e24>
   1ced0:	mov	r1, r7
   1ced4:	mov	r2, fp
   1ced8:	mov	r0, sl
   1cedc:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1cee0:	mov	r7, r0
   1cee4:	b	1c784 <_start@@Base+0x6f64>
   1cee8:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   1ceec:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cef0:	svcvs	0x00725f6e
   1cef4:			; <UNDEFINED> instruction: 0x76656374
   1cef8:	svcvs	0x00725f6f
   1cefc:			; <UNDEFINED> instruction: 0x76656374
   1cf00:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   1cf04:	ldrbvs	r6, [pc], -pc, ror #8
   1cf08:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   1cf0c:	ldrbvs	r6, [pc], -pc, ror #24
   1cf10:	ldrbvs	pc, [pc, #4095]!	; 1df17 <_start@@Base+0x86f7>	; <UNPREDICTABLE>
   1cf14:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cf18:	ldrtvs	r0, [r2], -r0
   1cf1c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cf20:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1cf24:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1cf28:	svcvs	0x006f6c73
   1cf2c:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1cf30:	svcvs	0x00727465
   1cf34:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1cf38:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1cf3c:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   1cf40:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   1cf44:	rsbvc	r7, r1, r5, ror #4
   1cf48:	andeq	r0, r0, r0
   1cf4c:	rsbvc	r7, pc, r0, lsl #6
   1cf50:	mrcvs	15, 3, r6, cr4, cr1, {3}
   1cf54:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1cf58:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   1cf5c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cf60:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1cf64:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cf68:	cmnvs	r4, r5, ror r2
   1cf6c:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   1cf70:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1cf74:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1cf78:	cmnvs	r2, r5, ror #24
   1cf7c:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1cf80:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1cf84:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1cf88:	andeq	r0, r0, r0
   1cf8c:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   1cf90:			; <UNDEFINED> instruction: 0xffff0000
   1cf94:	ldmdavs	r0!, {}^	; <UNPREDICTABLE>
   1cf98:	sub	r3, fp, r7
   1cf9c:	cmp	r3, #4
   1cfa0:	bgt	1e7a8 <_start@@Base+0x8f88>
   1cfa4:	mov	r1, r7
   1cfa8:	mov	r2, fp
   1cfac:	mov	r0, sl
   1cfb0:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1cfb4:	mov	r7, r0
   1cfb8:	b	1c784 <_start@@Base+0x6f64>
   1cfbc:	sub	r3, fp, r7
   1cfc0:	cmp	r3, #4
   1cfc4:	bgt	1e668 <_start@@Base+0x8e48>
   1cfc8:	mov	r1, r7
   1cfcc:	mov	r2, fp
   1cfd0:	mov	r0, sl
   1cfd4:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1cfd8:	mov	r7, r0
   1cfdc:	b	1c784 <_start@@Base+0x6f64>
   1cfe0:	mov	r3, #6
   1cfe4:	mov	r2, fp
   1cfe8:	mov	r1, r7
   1cfec:	mov	r0, sl
   1cff0:	bl	18678 <_start@@Base+0x2e58>
   1cff4:	cmp	r0, r7
   1cff8:	mov	r5, r0
   1cffc:	beq	1c920 <_start@@Base+0x7100>
   1d000:	add	r4, sp, #152	; 0x98
   1d004:	mov	r3, #0
   1d008:	mov	r1, r0
   1d00c:	str	r3, [r4, #-8]!
   1d010:	mov	r2, fp
   1d014:	mov	r0, sl
   1d018:	mov	r3, r4
   1d01c:	bl	2e2c8 <flatcc_json_parser_float@@Base>
   1d020:	cmp	r0, r5
   1d024:	mov	r7, r0
   1d028:	beq	1f43c <_start@@Base+0x9c1c>
   1d02c:	vldr	s15, [sp, #144]	; 0x90
   1d030:	vcmp.f32	s15, #0.0
   1d034:	vmrs	APSR_nzcv, fpscr
   1d038:	bne	1d048 <_start@@Base+0x7828>
   1d03c:	ldr	r3, [sl, #8]
   1d040:	tst	r3, #2
   1d044:	beq	1c784 <_start@@Base+0x6f64>
   1d048:	mov	r3, #4
   1d04c:	mov	r2, r3
   1d050:	mov	r1, #27
   1d054:	ldr	r0, [sl]
   1d058:	bl	299f8 <flatcc_builder_table_add@@Base>
   1d05c:	cmp	r0, #0
   1d060:	beq	1d17c <_start@@Base+0x795c>
   1d064:	ldr	r3, [sp, #144]	; 0x90
   1d068:	str	r3, [r0]
   1d06c:	b	1c784 <_start@@Base+0x6f64>
   1d070:	add	r4, r7, #8
   1d074:	mov	r0, r4
   1d078:	mov	r1, fp
   1d07c:	bl	15948 <_start@@Base+0x128>
   1d080:	add	r3, pc, #752	; 0x2f0
   1d084:	ldrd	r2, [r3]
   1d088:	cmp	r1, r3
   1d08c:	cmpeq	r0, r2
   1d090:	beq	1da68 <_start@@Base+0x8248>
   1d094:	mov	r1, r4
   1d098:	mov	r2, fp
   1d09c:	mov	r0, sl
   1d0a0:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d0a4:	mov	r7, r0
   1d0a8:	b	1c784 <_start@@Base+0x6f64>
   1d0ac:	cmp	r6, #5
   1d0b0:	bgt	1d0cc <_start@@Base+0x78ac>
   1d0b4:	mov	r1, r7
   1d0b8:	mov	r2, fp
   1d0bc:	mov	r0, sl
   1d0c0:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d0c4:	mov	r7, r0
   1d0c8:	b	1c784 <_start@@Base+0x6f64>
   1d0cc:	mov	r3, #5
   1d0d0:	mov	r2, fp
   1d0d4:	mov	r1, r7
   1d0d8:	mov	r0, sl
   1d0dc:	bl	18678 <_start@@Base+0x2e58>
   1d0e0:	cmp	r0, r7
   1d0e4:	mov	r4, r0
   1d0e8:	beq	1d0b4 <_start@@Base+0x7894>
   1d0ec:	mvn	r3, #-1073741824	; 0xc0000000
   1d0f0:	mov	r2, #2
   1d0f4:	mov	r1, #4
   1d0f8:	ldr	r0, [sl]
   1d0fc:	bl	27d58 <flatcc_builder_start_vector@@Base>
   1d100:	cmp	r0, #0
   1d104:	bne	1fda4 <_start@@Base+0xa584>
   1d108:	mov	r3, r9
   1d10c:	mov	r1, r4
   1d110:	mov	r2, fp
   1d114:	mov	r0, sl
   1d118:	bl	18908 <_start@@Base+0x30e8>
   1d11c:	ldr	r3, [sp, #120]	; 0x78
   1d120:	cmp	r3, #0
   1d124:	mov	r7, r0
   1d128:	beq	1e9a8 <_start@@Base+0x9188>
   1d12c:	mov	r4, #1
   1d130:	b	1d15c <_start@@Base+0x793c>
   1d134:	bl	1bd90 <_start@@Base+0x6570>
   1d138:	mov	r3, r9
   1d13c:	mov	r2, fp
   1d140:	mov	r1, r0
   1d144:	mov	r0, sl
   1d148:	bl	1a548 <_start@@Base+0x4d28>
   1d14c:	ldr	r3, [sp, #120]	; 0x78
   1d150:	cmp	r3, #0
   1d154:	mov	r7, r0
   1d158:	beq	1e9a8 <_start@@Base+0x9188>
   1d15c:	mov	r1, r4
   1d160:	ldr	r0, [sl]
   1d164:	bl	27504 <flatcc_builder_extend_vector@@Base>
   1d168:	mov	r1, r7
   1d16c:	mov	r2, fp
   1d170:	subs	r3, r0, #0
   1d174:	mov	r0, sl
   1d178:	bne	1d134 <_start@@Base+0x7914>
   1d17c:	mov	r9, fp
   1d180:	mov	fp, r7
   1d184:	b	1c7e8 <_start@@Base+0x6fc8>
   1d188:	sub	r3, fp, r7
   1d18c:	cmp	r3, #5
   1d190:	ble	1d0b4 <_start@@Base+0x7894>
   1d194:	mov	r3, #5
   1d198:	mov	r2, fp
   1d19c:	mov	r1, r7
   1d1a0:	mov	r0, sl
   1d1a4:	bl	18678 <_start@@Base+0x2e58>
   1d1a8:	cmp	r0, r7
   1d1ac:	mov	r4, r0
   1d1b0:	beq	1d0b4 <_start@@Base+0x7894>
   1d1b4:	mvn	r3, #-1073741824	; 0xc0000000
   1d1b8:	mov	r2, #2
   1d1bc:	mov	r1, #4
   1d1c0:	ldr	r0, [sl]
   1d1c4:	bl	27d58 <flatcc_builder_start_vector@@Base>
   1d1c8:	cmp	r0, #0
   1d1cc:	bne	1fda4 <_start@@Base+0xa584>
   1d1d0:	mov	r3, r9
   1d1d4:	mov	r1, r4
   1d1d8:	mov	r2, fp
   1d1dc:	mov	r0, sl
   1d1e0:	bl	18908 <_start@@Base+0x30e8>
   1d1e4:	ldr	r3, [sp, #120]	; 0x78
   1d1e8:	cmp	r3, #0
   1d1ec:	mov	r7, r0
   1d1f0:	beq	1e058 <_start@@Base+0x8838>
   1d1f4:	mov	r4, #1
   1d1f8:	b	1d224 <_start@@Base+0x7a04>
   1d1fc:	bl	1bd90 <_start@@Base+0x6570>
   1d200:	mov	r3, r9
   1d204:	mov	r2, fp
   1d208:	mov	r1, r0
   1d20c:	mov	r0, sl
   1d210:	bl	1a548 <_start@@Base+0x4d28>
   1d214:	ldr	r3, [sp, #120]	; 0x78
   1d218:	cmp	r3, #0
   1d21c:	mov	r7, r0
   1d220:	beq	1e058 <_start@@Base+0x8838>
   1d224:	mov	r1, r4
   1d228:	ldr	r0, [sl]
   1d22c:	bl	27504 <flatcc_builder_extend_vector@@Base>
   1d230:	mov	r1, r7
   1d234:	mov	r2, fp
   1d238:	subs	r3, r0, #0
   1d23c:	mov	r0, sl
   1d240:	bne	1d1fc <_start@@Base+0x79dc>
   1d244:	b	1d17c <_start@@Base+0x795c>
   1d248:	sub	r3, fp, r7
   1d24c:	cmp	r3, #5
   1d250:	bgt	1e1b4 <_start@@Base+0x8994>
   1d254:	mov	r1, r7
   1d258:	mov	r2, fp
   1d25c:	mov	r0, sl
   1d260:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d264:	mov	r7, r0
   1d268:	b	1c784 <_start@@Base+0x6f64>
   1d26c:	add	r7, r7, #8
   1d270:	mov	r0, r7
   1d274:	mov	r1, fp
   1d278:	bl	15948 <_start@@Base+0x128>
   1d27c:	add	r3, pc, #252	; 0xfc
   1d280:	ldrd	r2, [r3]
   1d284:	cmp	r1, r3
   1d288:	cmpeq	r0, r2
   1d28c:	bhi	1d398 <_start@@Base+0x7b78>
   1d290:	add	r3, pc, #240	; 0xf0
   1d294:	ldrd	r2, [r3]
   1d298:	cmp	r1, r3
   1d29c:	cmpeq	r0, r2
   1d2a0:	beq	1d9a0 <_start@@Base+0x8180>
   1d2a4:	mov	r1, r7
   1d2a8:	mov	r2, fp
   1d2ac:	mov	r0, sl
   1d2b0:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d2b4:	mov	r7, r0
   1d2b8:	b	1c784 <_start@@Base+0x6f64>
   1d2bc:	add	r4, r7, #8
   1d2c0:	mov	r0, r4
   1d2c4:	mov	r1, fp
   1d2c8:	bl	15948 <_start@@Base+0x128>
   1d2cc:	ldr	r3, [pc, #188]	; 1d390 <_start@@Base+0x7b70>
   1d2d0:	ldr	r7, [pc, #188]	; 1d394 <_start@@Base+0x7b74>
   1d2d4:	mov	r2, #0
   1d2d8:	mov	r6, #0
   1d2dc:	and	r3, r3, r1
   1d2e0:	and	r2, r2, r0
   1d2e4:	cmp	r3, r7
   1d2e8:	cmpeq	r2, r6
   1d2ec:	bne	1d504 <_start@@Base+0x7ce4>
   1d2f0:	sub	r3, fp, r4
   1d2f4:	cmp	r3, #2
   1d2f8:	bgt	1dd40 <_start@@Base+0x8520>
   1d2fc:	mov	r1, r4
   1d300:	mov	r2, fp
   1d304:	mov	r0, sl
   1d308:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d30c:	mov	r7, r0
   1d310:	b	1c784 <_start@@Base+0x6f64>
   1d314:	mov	r1, r7
   1d318:	mov	r2, fp
   1d31c:	mov	r0, sl
   1d320:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d324:	mov	r7, r0
   1d328:	b	1c784 <_start@@Base+0x6f64>
   1d32c:	mov	r1, r7
   1d330:	mov	r2, fp
   1d334:	mov	r0, sl
   1d338:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d33c:	mov	r7, r0
   1d340:	b	1c784 <_start@@Base+0x6f64>
   1d344:	mov	r1, r7
   1d348:	mov	r2, fp
   1d34c:	mov	r0, sl
   1d350:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d354:	mov	r7, r0
   1d358:	b	1c784 <_start@@Base+0x6f64>
   1d35c:	mov	r1, r7
   1d360:	mov	r2, fp
   1d364:	mov	r0, sl
   1d368:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d36c:	mov	r7, r0
   1d370:	b	1c784 <_start@@Base+0x6f64>
   1d374:	nop			; (mov r0, r0)
   1d378:	rsbvc	r6, r1, r5, ror #6
   1d37c:	smcvs	54867	; 0xd653
   1d380:			; <UNDEFINED> instruction: 0x666e7630
   1d384:	teqvc	r6, #1593835520	; 0x5f000000
   1d388:			; <UNDEFINED> instruction: 0x666e7631
   1d38c:	teqvc	r3, #-268435451	; 0xf0000005
   1d390:			; <UNDEFINED> instruction: 0xffff0000
   1d394:	ldrtcc	r0, [r4], -r0
   1d398:	add	r3, pc, #864	; 0x360
   1d39c:	ldrd	r2, [r3]
   1d3a0:	cmp	r1, r3
   1d3a4:	cmpeq	r0, r2
   1d3a8:	bls	1d8c0 <_start@@Base+0x80a0>
   1d3ac:	add	r3, pc, #852	; 0x354
   1d3b0:	ldrd	r2, [r3]
   1d3b4:	cmp	r1, r3
   1d3b8:	cmpeq	r0, r2
   1d3bc:	beq	1f738 <_start@@Base+0x9f18>
   1d3c0:	add	r3, pc, #840	; 0x348
   1d3c4:	ldrd	r2, [r3]
   1d3c8:	cmp	r1, r3
   1d3cc:	cmpeq	r0, r2
   1d3d0:	bne	1f548 <_start@@Base+0x9d28>
   1d3d4:	sub	r3, fp, r7
   1d3d8:	cmp	r3, #8
   1d3dc:	bgt	2007c <_start@@Base+0xa85c>
   1d3e0:	add	r7, r7, #8
   1d3e4:	mov	r0, r7
   1d3e8:	mov	r1, fp
   1d3ec:	bl	15948 <_start@@Base+0x128>
   1d3f0:	mov	r0, #0
   1d3f4:	and	r1, r1, #-16777216	; 0xff000000
   1d3f8:	cmp	r1, #1627389952	; 0x61000000
   1d3fc:	cmpeq	r0, #0
   1d400:	bne	20464 <_start@@Base+0xac44>
   1d404:	sub	r3, fp, r7
   1d408:	cmp	r3, #1
   1d40c:	ble	20578 <_start@@Base+0xad58>
   1d410:	mov	r3, #1
   1d414:	mov	r2, fp
   1d418:	mov	r1, r7
   1d41c:	mov	r0, sl
   1d420:	bl	18678 <_start@@Base+0x2e58>
   1d424:	cmp	r7, r0
   1d428:	mov	r4, r0
   1d42c:	beq	2057c <_start@@Base+0xad5c>
   1d430:	mov	r0, #0
   1d434:	mov	r1, #0
   1d438:	add	r5, sp, #152	; 0x98
   1d43c:	mov	r2, fp
   1d440:	strd	r0, [r5, #-8]!
   1d444:	mov	r1, r4
   1d448:	mov	r3, r5
   1d44c:	mov	r0, sl
   1d450:	bl	181f4 <_start@@Base+0x29d4>
   1d454:	cmp	r0, r4
   1d458:	mov	r7, r0
   1d45c:	beq	2063c <_start@@Base+0xae1c>
   1d460:	ldrd	r2, [sp, #144]	; 0x90
   1d464:	orrs	r3, r2, r3
   1d468:	bne	1d478 <_start@@Base+0x7c58>
   1d46c:	ldr	r3, [sl, #8]
   1d470:	tst	r3, #2
   1d474:	beq	1c784 <_start@@Base+0x6f64>
   1d478:	mov	r3, #8
   1d47c:	mov	r2, r3
   1d480:	mov	r1, #23
   1d484:	ldr	r0, [sl]
   1d488:	bl	299f8 <flatcc_builder_table_add@@Base>
   1d48c:	cmp	r0, #0
   1d490:	beq	2071c <_start@@Base+0xaefc>
   1d494:	ldrd	r2, [sp, #144]	; 0x90
   1d498:	strd	r2, [r0]
   1d49c:	b	1c784 <_start@@Base+0x6f64>
   1d4a0:	mov	r1, r7
   1d4a4:	mov	r2, fp
   1d4a8:	mov	r0, sl
   1d4ac:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d4b0:	mov	r7, r0
   1d4b4:	b	1c784 <_start@@Base+0x6f64>
   1d4b8:	mov	r1, r7
   1d4bc:	mov	r2, fp
   1d4c0:	mov	r0, sl
   1d4c4:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d4c8:	mov	r7, r0
   1d4cc:	b	1c784 <_start@@Base+0x6f64>
   1d4d0:	mov	r4, r0
   1d4d4:	mov	r1, r4
   1d4d8:	mov	r2, fp
   1d4dc:	mov	r0, sl
   1d4e0:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d4e4:	mov	r7, r0
   1d4e8:	b	1c784 <_start@@Base+0x6f64>
   1d4ec:	mov	r1, r4
   1d4f0:	mov	r2, fp
   1d4f4:	mov	r0, sl
   1d4f8:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d4fc:	mov	r7, r0
   1d500:	b	1c784 <_start@@Base+0x6f64>
   1d504:	mov	r1, r4
   1d508:	mov	r2, fp
   1d50c:	mov	r0, sl
   1d510:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d514:	mov	r7, r0
   1d518:	b	1c784 <_start@@Base+0x6f64>
   1d51c:	cmp	r3, #6
   1d520:	bgt	1dcac <_start@@Base+0x848c>
   1d524:	mov	r1, r7
   1d528:	mov	r2, fp
   1d52c:	mov	r0, sl
   1d530:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d534:	mov	r7, r0
   1d538:	b	1c784 <_start@@Base+0x6f64>
   1d53c:	mov	r3, #5
   1d540:	mov	r2, fp
   1d544:	mov	r1, r7
   1d548:	mov	r0, sl
   1d54c:	bl	18678 <_start@@Base+0x2e58>
   1d550:	cmp	r0, r7
   1d554:	mov	r4, r0
   1d558:	beq	1ce04 <_start@@Base+0x75e4>
   1d55c:	mov	r0, #0
   1d560:	mov	r1, #0
   1d564:	mov	r3, #0
   1d568:	cmp	fp, r4
   1d56c:	strd	r0, [sp, #144]	; 0x90
   1d570:	strb	r3, [sp, #136]	; 0x88
   1d574:	str	r3, [sp, #140]	; 0x8c
   1d578:	beq	1f128 <_start@@Base+0x9908>
   1d57c:	add	r3, sp, #144	; 0x90
   1d580:	str	r3, [sp]
   1d584:	mov	r2, fp
   1d588:	add	r3, sp, #140	; 0x8c
   1d58c:	mov	r1, r4
   1d590:	mov	r0, sl
   1d594:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   1d598:	cmp	r4, r0
   1d59c:	mov	r7, r0
   1d5a0:	beq	1f124 <_start@@Base+0x9904>
   1d5a4:	ldr	r1, [sp, #140]	; 0x8c
   1d5a8:	ldrd	r2, [sp, #144]	; 0x90
   1d5ac:	cmp	r1, #0
   1d5b0:	bne	1d604 <_start@@Base+0x7de4>
   1d5b4:	cmp	r3, #0
   1d5b8:	cmpeq	r2, #127	; 0x7f
   1d5bc:	sxtbls	r2, r2
   1d5c0:	strbls	r2, [sp, #136]	; 0x88
   1d5c4:	bhi	1f71c <_start@@Base+0x9efc>
   1d5c8:	cmp	r2, #8
   1d5cc:	bne	1d5dc <_start@@Base+0x7dbc>
   1d5d0:	ldr	r3, [sl, #8]
   1d5d4:	tst	r3, #2
   1d5d8:	beq	1c784 <_start@@Base+0x6f64>
   1d5dc:	mov	r3, #1
   1d5e0:	mov	r2, r3
   1d5e4:	mov	r1, #6
   1d5e8:	ldr	r0, [sl]
   1d5ec:	bl	299f8 <flatcc_builder_table_add@@Base>
   1d5f0:	cmp	r0, #0
   1d5f4:	beq	1d17c <_start@@Base+0x795c>
   1d5f8:	ldrsb	r3, [sp, #136]	; 0x88
   1d5fc:	strb	r3, [r0]
   1d600:	b	1c784 <_start@@Base+0x6f64>
   1d604:	cmp	r3, #0
   1d608:	cmpeq	r2, #128	; 0x80
   1d60c:	rsbls	r2, r2, #0
   1d610:	sxtbls	r2, r2
   1d614:	strbls	r2, [sp, #136]	; 0x88
   1d618:	bls	1d5c8 <_start@@Base+0x7da8>
   1d61c:	mov	r1, r0
   1d620:	mov	r3, #8
   1d624:	mov	r2, fp
   1d628:	mov	r0, sl
   1d62c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1d630:	mov	r7, r0
   1d634:	cmp	r4, r7
   1d638:	beq	1f128 <_start@@Base+0x9908>
   1d63c:	ldrsb	r2, [sp, #136]	; 0x88
   1d640:	b	1d5c8 <_start@@Base+0x7da8>
   1d644:	sub	r3, fp, r7
   1d648:	cmp	r3, #4
   1d64c:	bgt	1f4bc <_start@@Base+0x9c9c>
   1d650:	mov	r1, r7
   1d654:	mov	r2, fp
   1d658:	mov	r0, sl
   1d65c:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d660:	mov	r7, r0
   1d664:	b	1c784 <_start@@Base+0x6f64>
   1d668:	sub	r3, fp, r4
   1d66c:	cmp	r3, #1
   1d670:	ble	1fcf8 <_start@@Base+0xa4d8>
   1d674:	mov	r3, #1
   1d678:	mov	r2, fp
   1d67c:	mov	r1, r4
   1d680:	mov	r0, sl
   1d684:	bl	18678 <_start@@Base+0x2e58>
   1d688:	cmp	r4, r0
   1d68c:	mov	r7, r0
   1d690:	beq	1fcf4 <_start@@Base+0xa4d4>
   1d694:	mov	r3, #0
   1d698:	mov	r1, #3
   1d69c:	ldr	r0, [sl]
   1d6a0:	str	r3, [sp, #124]	; 0x7c
   1d6a4:	bl	27fb8 <flatcc_builder_start_table@@Base>
   1d6a8:	cmp	r0, #0
   1d6ac:	bne	1e810 <_start@@Base+0x8ff0>
   1d6b0:	add	r6, sp, #132	; 0x84
   1d6b4:	mov	r1, r7
   1d6b8:	mov	r3, r6
   1d6bc:	mov	r2, fp
   1d6c0:	mov	r0, sl
   1d6c4:	bl	185c4 <_start@@Base+0x2da4>
   1d6c8:	ldr	r3, [sp, #132]	; 0x84
   1d6cc:	cmp	r3, #0
   1d6d0:	mov	r7, r0
   1d6d4:	beq	1f5ec <_start@@Base+0x9dcc>
   1d6d8:	ldr	r2, [pc, #56]	; 1d718 <_start@@Base+0x7ef8>
   1d6dc:	ldr	r3, [pc, #56]	; 1d71c <_start@@Base+0x7efc>
   1d6e0:	add	r2, pc, r2
   1d6e4:	add	r3, pc, r3
   1d6e8:	add	r2, r2, #344	; 0x158
   1d6ec:	add	r3, r3, #332	; 0x14c
   1d6f0:	str	r2, [sp, #56]	; 0x38
   1d6f4:	str	r3, [sp, #72]	; 0x48
   1d6f8:	mov	r8, #1
   1d6fc:	b	1d77c <_start@@Base+0x7f5c>
   1d700:			; <UNDEFINED> instruction: 0x666e7630
   1d704:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1d708:			; <UNDEFINED> instruction: 0x666e7631
   1d70c:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1d710:			; <UNDEFINED> instruction: 0x666e7631
   1d714:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   1d718:	andeq	r7, r3, r0, lsr #19
   1d71c:	muleq	r3, ip, r9
   1d720:	add	r3, pc, #968	; 0x3c8
   1d724:	ldrd	r2, [r3]
   1d728:	and	r0, r0, #-16777216	; 0xff000000
   1d72c:	cmp	r1, r3
   1d730:	cmpeq	r0, r2
   1d734:	bne	1d744 <_start@@Base+0x7f24>
   1d738:	sub	r3, fp, r7
   1d73c:	cmp	r3, #5
   1d740:	bgt	1e08c <_start@@Base+0x886c>
   1d744:	mov	r1, r7
   1d748:	mov	r2, fp
   1d74c:	mov	r0, sl
   1d750:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d754:	mov	r7, r0
   1d758:	mov	r1, r7
   1d75c:	mov	r3, r6
   1d760:	mov	r2, fp
   1d764:	mov	r0, sl
   1d768:	bl	1a6cc <_start@@Base+0x4eac>
   1d76c:	ldr	r3, [sp, #132]	; 0x84
   1d770:	cmp	r3, #0
   1d774:	mov	r7, r0
   1d778:	beq	1f5ec <_start@@Base+0x9dcc>
   1d77c:	cmp	fp, r7
   1d780:	beq	1d7a8 <_start@@Base+0x7f88>
   1d784:	ldrb	r3, [r7]
   1d788:	cmp	r3, #34	; 0x22
   1d78c:	moveq	r3, #0
   1d790:	addeq	r7, r7, #1
   1d794:	streq	r3, [sl, #12]
   1d798:	beq	1d7a8 <_start@@Base+0x7f88>
   1d79c:	cmp	r3, #46	; 0x2e
   1d7a0:	strne	r8, [sl, #12]
   1d7a4:	beq	1e4cc <_start@@Base+0x8cac>
   1d7a8:	mov	r1, fp
   1d7ac:	mov	r0, r7
   1d7b0:	bl	15948 <_start@@Base+0x128>
   1d7b4:	ldr	r3, [pc, #860]	; 1db18 <_start@@Base+0x82f8>
   1d7b8:	mvn	r2, #0
   1d7bc:	cmp	r1, r3
   1d7c0:	cmpeq	r0, r2
   1d7c4:	bls	1d720 <_start@@Base+0x7f00>
   1d7c8:	add	r3, pc, #808	; 0x328
   1d7cc:	ldrd	r2, [r3]
   1d7d0:	bic	r5, r1, #255	; 0xff
   1d7d4:	mov	r4, #0
   1d7d8:	cmp	r5, r3
   1d7dc:	cmpeq	r4, r2
   1d7e0:	beq	1df10 <_start@@Base+0x86f0>
   1d7e4:	ldr	r3, [pc, #816]	; 1db1c <_start@@Base+0x82fc>
   1d7e8:	mov	r2, #0
   1d7ec:	and	r1, r1, r3
   1d7f0:	ldr	r3, [pc, #808]	; 1db20 <_start@@Base+0x8300>
   1d7f4:	and	r0, r0, r2
   1d7f8:	cmp	r1, r3
   1d7fc:	mov	r2, #0
   1d800:	cmpeq	r0, r2
   1d804:	bne	1d744 <_start@@Base+0x7f24>
   1d808:	sub	r3, fp, r7
   1d80c:	cmp	r3, #2
   1d810:	ble	1d744 <_start@@Base+0x7f24>
   1d814:	mov	r1, r7
   1d818:	mov	r3, #2
   1d81c:	mov	r2, fp
   1d820:	mov	r0, sl
   1d824:	bl	18678 <_start@@Base+0x2e58>
   1d828:	cmp	r0, r7
   1d82c:	mov	r1, r0
   1d830:	beq	1d744 <_start@@Base+0x7f24>
   1d834:	add	r3, sp, #136	; 0x88
   1d838:	mov	r2, fp
   1d83c:	mov	r0, sl
   1d840:	bl	2f500 <flatcc_json_parser_build_string@@Base>
   1d844:	ldr	r3, [sp, #136]	; 0x88
   1d848:	cmp	r3, #0
   1d84c:	mov	r7, r0
   1d850:	beq	1e810 <_start@@Base+0x8ff0>
   1d854:	mov	r1, #0
   1d858:	ldr	r0, [sl]
   1d85c:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   1d860:	cmp	r0, #0
   1d864:	beq	1e810 <_start@@Base+0x8ff0>
   1d868:	ldr	r3, [sp, #136]	; 0x88
   1d86c:	str	r3, [r0]
   1d870:	b	1d758 <_start@@Base+0x7f38>
   1d874:	add	r4, r7, #16
   1d878:	mov	r0, r4
   1d87c:	mov	r1, fp
   1d880:	bl	15948 <_start@@Base+0x128>
   1d884:	add	r3, pc, #628	; 0x274
   1d888:	ldrd	r2, [r3]
   1d88c:	mov	r0, #0
   1d890:	cmp	r1, r3
   1d894:	cmpeq	r0, r2
   1d898:	bne	1f2dc <_start@@Base+0x9abc>
   1d89c:	sub	r3, fp, r4
   1d8a0:	cmp	r3, #4
   1d8a4:	bgt	1fde8 <_start@@Base+0xa5c8>
   1d8a8:	mov	r1, r4
   1d8ac:	mov	r2, fp
   1d8b0:	mov	r0, sl
   1d8b4:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d8b8:	mov	r7, r0
   1d8bc:	b	1c784 <_start@@Base+0x6f64>
   1d8c0:	add	r3, pc, #576	; 0x240
   1d8c4:	ldrd	r2, [r3]
   1d8c8:	cmp	r1, r3
   1d8cc:	cmpeq	r0, r2
   1d8d0:	bne	1f3d0 <_start@@Base+0x9bb0>
   1d8d4:	sub	r3, fp, r7
   1d8d8:	cmp	r3, #8
   1d8dc:	bgt	1feac <_start@@Base+0xa68c>
   1d8e0:	add	r7, r7, #8
   1d8e4:	mov	r0, r7
   1d8e8:	mov	r1, fp
   1d8ec:	bl	15948 <_start@@Base+0x128>
   1d8f0:	mov	r0, #0
   1d8f4:	and	r1, r1, #-16777216	; 0xff000000
   1d8f8:	cmp	r1, #1627389952	; 0x61000000
   1d8fc:	cmpeq	r0, #0
   1d900:	bne	202e4 <_start@@Base+0xaac4>
   1d904:	sub	r3, fp, r7
   1d908:	cmp	r3, #1
   1d90c:	ble	20594 <_start@@Base+0xad74>
   1d910:	mov	r3, #1
   1d914:	mov	r2, fp
   1d918:	mov	r1, r7
   1d91c:	mov	r0, sl
   1d920:	bl	18678 <_start@@Base+0x2e58>
   1d924:	cmp	r7, r0
   1d928:	mov	r4, r0
   1d92c:	beq	20598 <_start@@Base+0xad78>
   1d930:	mov	r0, #0
   1d934:	mov	r1, #0
   1d938:	add	r5, sp, #152	; 0x98
   1d93c:	mov	r2, fp
   1d940:	strd	r0, [r5, #-8]!
   1d944:	mov	r1, r4
   1d948:	mov	r3, r5
   1d94c:	mov	r0, sl
   1d950:	bl	1812c <_start@@Base+0x290c>
   1d954:	cmp	r0, r4
   1d958:	mov	r7, r0
   1d95c:	beq	206a4 <_start@@Base+0xae84>
   1d960:	ldrd	r2, [sp, #144]	; 0x90
   1d964:	orrs	r3, r2, r3
   1d968:	bne	1d978 <_start@@Base+0x8158>
   1d96c:	ldr	r3, [sl, #8]
   1d970:	tst	r3, #2
   1d974:	beq	1c784 <_start@@Base+0x6f64>
   1d978:	mov	r3, #8
   1d97c:	mov	r2, r3
   1d980:	mov	r1, #22
   1d984:	ldr	r0, [sl]
   1d988:	bl	299f8 <flatcc_builder_table_add@@Base>
   1d98c:	cmp	r0, #0
   1d990:	beq	2071c <_start@@Base+0xaefc>
   1d994:	ldrd	r2, [sp, #144]	; 0x90
   1d998:	strd	r2, [r0]
   1d99c:	b	1c784 <_start@@Base+0x6f64>
   1d9a0:	sub	r3, fp, r7
   1d9a4:	cmp	r3, #8
   1d9a8:	bgt	1f690 <_start@@Base+0x9e70>
   1d9ac:	add	r7, r7, #8
   1d9b0:	mov	r0, r7
   1d9b4:	mov	r1, fp
   1d9b8:	bl	15948 <_start@@Base+0x128>
   1d9bc:	mov	r0, #0
   1d9c0:	and	r1, r1, #-16777216	; 0xff000000
   1d9c4:	cmp	r1, #1627389952	; 0x61000000
   1d9c8:	cmpeq	r0, #0
   1d9cc:	bne	1ff3c <_start@@Base+0xa71c>
   1d9d0:	sub	r3, fp, r7
   1d9d4:	cmp	r3, #1
   1d9d8:	ble	20560 <_start@@Base+0xad40>
   1d9dc:	mov	r3, #1
   1d9e0:	mov	r2, fp
   1d9e4:	mov	r1, r7
   1d9e8:	mov	r0, sl
   1d9ec:	bl	18678 <_start@@Base+0x2e58>
   1d9f0:	cmp	r7, r0
   1d9f4:	mov	r4, r0
   1d9f8:	beq	20560 <_start@@Base+0xad40>
   1d9fc:	add	r5, sp, #152	; 0x98
   1da00:	mov	r3, #0
   1da04:	str	r3, [r5, #-8]!
   1da08:	mov	r1, r0
   1da0c:	mov	r2, fp
   1da10:	mov	r3, r5
   1da14:	mov	r0, sl
   1da18:	bl	183f8 <_start@@Base+0x2bd8>
   1da1c:	cmp	r0, r4
   1da20:	mov	r7, r0
   1da24:	beq	206e8 <_start@@Base+0xaec8>
   1da28:	ldr	r3, [sp, #144]	; 0x90
   1da2c:	cmp	r3, #0
   1da30:	bne	1da40 <_start@@Base+0x8220>
   1da34:	ldr	r3, [sl, #8]
   1da38:	tst	r3, #2
   1da3c:	beq	1c784 <_start@@Base+0x6f64>
   1da40:	mov	r3, #4
   1da44:	mov	r2, r3
   1da48:	mov	r1, #20
   1da4c:	ldr	r0, [sl]
   1da50:	bl	299f8 <flatcc_builder_table_add@@Base>
   1da54:	cmp	r0, #0
   1da58:	beq	2071c <_start@@Base+0xaefc>
   1da5c:	ldr	r3, [sp, #144]	; 0x90
   1da60:	str	r3, [r0]
   1da64:	b	1c784 <_start@@Base+0x6f64>
   1da68:	add	r7, r7, #16
   1da6c:	mov	r0, r7
   1da70:	mov	r1, fp
   1da74:	bl	15948 <_start@@Base+0x128>
   1da78:	add	r3, pc, #144	; 0x90
   1da7c:	ldrd	r2, [r3]
   1da80:	and	r0, r0, #-16777216	; 0xff000000
   1da84:	cmp	r1, r3
   1da88:	cmpeq	r0, r2
   1da8c:	bne	1f400 <_start@@Base+0x9be0>
   1da90:	sub	r3, fp, r7
   1da94:	cmp	r3, #5
   1da98:	bgt	1ffb4 <_start@@Base+0xa794>
   1da9c:	mov	r1, r7
   1daa0:	mov	r2, fp
   1daa4:	mov	r0, sl
   1daa8:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1daac:	mov	r7, r0
   1dab0:	b	1c784 <_start@@Base+0x6f64>
   1dab4:	sub	r3, fp, r4
   1dab8:	cmp	r3, #7
   1dabc:	bgt	1f82c <_start@@Base+0xa00c>
   1dac0:	mov	r1, r4
   1dac4:	mov	r2, fp
   1dac8:	mov	r0, sl
   1dacc:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1dad0:	mov	r7, r0
   1dad4:	b	1c784 <_start@@Base+0x6f64>
   1dad8:	mov	r1, r7
   1dadc:	mov	r2, fp
   1dae0:	mov	r0, sl
   1dae4:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1dae8:	mov	r7, r0
   1daec:	b	1c784 <_start@@Base+0x6f64>
   1daf0:	strvc	r0, [r0], #-0
   1daf4:	cmnvs	pc, #461373440	; 0x1b800000
   1daf8:	andeq	r0, r0, r0
   1dafc:	strbtvc	r6, [r1], -r0, lsl #24
   1db00:	andeq	r0, r0, r0
   1db04:			; <UNDEFINED> instruction: 0x66666572
   1db08:			; <UNDEFINED> instruction: 0x666e7631
   1db0c:	teqvc	r6, #1593835520	; 0x5f000000
   1db10:	strvc	r0, [r0], #-0
   1db14:	svcpl	0x00746573
   1db18:	stmdbvs	r3!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   1db1c:			; <UNDEFINED> instruction: 0xffff0000
   1db20:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1db24:	submi	r0, r0, r0
   1db28:	sub	r3, fp, r4
   1db2c:	cmp	r3, #7
   1db30:	bgt	1f990 <_start@@Base+0xa170>
   1db34:	mov	r1, r4
   1db38:	mov	r2, fp
   1db3c:	mov	r0, sl
   1db40:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1db44:	mov	r7, r0
   1db48:	b	1c784 <_start@@Base+0x6f64>
   1db4c:	sub	r3, fp, r4
   1db50:	cmp	r3, #1
   1db54:	ble	20144 <_start@@Base+0xa924>
   1db58:	mov	r3, #1
   1db5c:	mov	r2, fp
   1db60:	mov	r1, r4
   1db64:	mov	r0, sl
   1db68:	bl	18678 <_start@@Base+0x2e58>
   1db6c:	cmp	r4, r0
   1db70:	mov	r7, r0
   1db74:	beq	20140 <_start@@Base+0xa920>
   1db78:	ldr	r0, [sl]
   1db7c:	bl	27dd0 <flatcc_builder_start_offset_vector@@Base>
   1db80:	cmp	r0, #0
   1db84:	bne	1d17c <_start@@Base+0x795c>
   1db88:	mov	r1, r7
   1db8c:	mov	r3, r9
   1db90:	mov	r2, fp
   1db94:	mov	r0, sl
   1db98:	bl	18908 <_start@@Base+0x30e8>
   1db9c:	ldr	r3, [sp, #120]	; 0x78
   1dba0:	cmp	r3, #0
   1dba4:	mov	r7, r0
   1dba8:	beq	1fd3c <_start@@Base+0xa51c>
   1dbac:	add	r4, sp, #124	; 0x7c
   1dbb0:	mov	r5, #1
   1dbb4:	b	1dbf4 <_start@@Base+0x83d4>
   1dbb8:	ldr	r0, [sl]
   1dbbc:	bl	27768 <flatcc_builder_extend_offset_vector@@Base>
   1dbc0:	mov	r3, r9
   1dbc4:	mov	r2, fp
   1dbc8:	mov	r1, r7
   1dbcc:	subs	ip, r0, #0
   1dbd0:	mov	r0, sl
   1dbd4:	beq	1d17c <_start@@Base+0x795c>
   1dbd8:	ldr	lr, [sp, #124]	; 0x7c
   1dbdc:	str	lr, [ip]
   1dbe0:	bl	1a548 <_start@@Base+0x4d28>
   1dbe4:	ldr	r3, [sp, #120]	; 0x78
   1dbe8:	cmp	r3, #0
   1dbec:	mov	r7, r0
   1dbf0:	beq	1fd3c <_start@@Base+0xa51c>
   1dbf4:	mov	r1, r7
   1dbf8:	mov	r3, r4
   1dbfc:	mov	r2, fp
   1dc00:	mov	r0, sl
   1dc04:	bl	1c5e8 <_start@@Base+0x6dc8>
   1dc08:	ldr	r3, [sp, #124]	; 0x7c
   1dc0c:	mov	r1, r5
   1dc10:	cmp	r3, #0
   1dc14:	mov	r7, r0
   1dc18:	bne	1dbb8 <_start@@Base+0x8398>
   1dc1c:	b	1d17c <_start@@Base+0x795c>
   1dc20:	mov	r3, #2
   1dc24:	mov	r2, fp
   1dc28:	mov	r1, r7
   1dc2c:	mov	r0, sl
   1dc30:	bl	18678 <_start@@Base+0x2e58>
   1dc34:	cmp	r0, r7
   1dc38:	mov	r5, r0
   1dc3c:	beq	1cd40 <_start@@Base+0x7520>
   1dc40:	add	r4, sp, #152	; 0x98
   1dc44:	mov	r3, #0
   1dc48:	strh	r3, [r4, #-8]!
   1dc4c:	mov	r1, r0
   1dc50:	mov	r2, fp
   1dc54:	mov	r3, r4
   1dc58:	mov	r0, sl
   1dc5c:	bl	184c0 <_start@@Base+0x2ca0>
   1dc60:	cmp	r5, r0
   1dc64:	mov	r7, r0
   1dc68:	beq	20048 <_start@@Base+0xa828>
   1dc6c:	ldrsh	r3, [sp, #144]	; 0x90
   1dc70:	cmp	r3, #100	; 0x64
   1dc74:	bne	1dc84 <_start@@Base+0x8464>
   1dc78:	ldr	r3, [sl, #8]
   1dc7c:	tst	r3, #2
   1dc80:	beq	1c784 <_start@@Base+0x6f64>
   1dc84:	mov	r3, #2
   1dc88:	mov	r2, r3
   1dc8c:	mov	r1, r3
   1dc90:	ldr	r0, [sl]
   1dc94:	bl	299f8 <flatcc_builder_table_add@@Base>
   1dc98:	cmp	r0, #0
   1dc9c:	beq	1d17c <_start@@Base+0x795c>
   1dca0:	ldrsh	r3, [sp, #144]	; 0x90
   1dca4:	strh	r3, [r0]
   1dca8:	b	1c784 <_start@@Base+0x6f64>
   1dcac:	mov	r3, #6
   1dcb0:	mov	r2, fp
   1dcb4:	mov	r1, r7
   1dcb8:	mov	r0, sl
   1dcbc:	bl	18678 <_start@@Base+0x2e58>
   1dcc0:	cmp	r0, r7
   1dcc4:	mov	r5, r0
   1dcc8:	beq	1d524 <_start@@Base+0x7d04>
   1dccc:	add	r4, sp, #152	; 0x98
   1dcd0:	mov	r3, #0
   1dcd4:	mov	r1, r0
   1dcd8:	str	r3, [r4, #-8]!
   1dcdc:	mov	r2, fp
   1dce0:	mov	r0, sl
   1dce4:	mov	r3, r4
   1dce8:	bl	2e2c8 <flatcc_json_parser_float@@Base>
   1dcec:	cmp	r0, r5
   1dcf0:	mov	r7, r0
   1dcf4:	beq	2015c <_start@@Base+0xa93c>
   1dcf8:	vldr	s15, [pc, #-476]	; 1db24 <_start@@Base+0x8304>
   1dcfc:	vldr	s14, [sp, #144]	; 0x90
   1dd00:	vcmp.f32	s14, s15
   1dd04:	vmrs	APSR_nzcv, fpscr
   1dd08:	bne	1dd18 <_start@@Base+0x84f8>
   1dd0c:	ldr	r3, [sl, #8]
   1dd10:	tst	r3, #2
   1dd14:	beq	1c784 <_start@@Base+0x6f64>
   1dd18:	mov	r3, #4
   1dd1c:	mov	r2, r3
   1dd20:	mov	r1, #26
   1dd24:	ldr	r0, [sl]
   1dd28:	bl	299f8 <flatcc_builder_table_add@@Base>
   1dd2c:	cmp	r0, #0
   1dd30:	beq	1d17c <_start@@Base+0x795c>
   1dd34:	ldr	r3, [sp, #144]	; 0x90
   1dd38:	str	r3, [r0]
   1dd3c:	b	1c784 <_start@@Base+0x6f64>
   1dd40:	mov	r3, #2
   1dd44:	mov	r2, fp
   1dd48:	mov	r1, r4
   1dd4c:	mov	r0, sl
   1dd50:	bl	18678 <_start@@Base+0x2e58>
   1dd54:	cmp	r4, r0
   1dd58:	mov	r7, r0
   1dd5c:	beq	206e0 <_start@@Base+0xaec0>
   1dd60:	mov	r3, #0
   1dd64:	mov	r1, #3
   1dd68:	ldr	r0, [sl]
   1dd6c:	str	r3, [sp, #124]	; 0x7c
   1dd70:	bl	27fb8 <flatcc_builder_start_table@@Base>
   1dd74:	cmp	r0, #0
   1dd78:	bne	1e014 <_start@@Base+0x87f4>
   1dd7c:	add	r4, sp, #140	; 0x8c
   1dd80:	mov	r1, r7
   1dd84:	mov	r3, r4
   1dd88:	mov	r2, fp
   1dd8c:	mov	r0, sl
   1dd90:	bl	185c4 <_start@@Base+0x2da4>
   1dd94:	ldr	r3, [sp, #140]	; 0x8c
   1dd98:	cmp	r3, #0
   1dd9c:	mov	r7, r0
   1dda0:	beq	1f648 <_start@@Base+0x9e28>
   1dda4:	mov	r5, #1
   1dda8:	str	r9, [sp, #56]	; 0x38
   1ddac:	b	1de0c <_start@@Base+0x85ec>
   1ddb0:	add	r3, pc, #936	; 0x3a8
   1ddb4:	ldrd	r2, [r3]
   1ddb8:	mov	r0, #0
   1ddbc:	cmp	r1, r3
   1ddc0:	cmpeq	r0, r2
   1ddc4:	bne	1ddd4 <_start@@Base+0x85b4>
   1ddc8:	sub	r3, fp, r7
   1ddcc:	cmp	r3, #4
   1ddd0:	bgt	1e4e8 <_start@@Base+0x8cc8>
   1ddd4:	mov	r1, r7
   1ddd8:	mov	r2, fp
   1dddc:	mov	r0, sl
   1dde0:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1dde4:	mov	r7, r0
   1dde8:	mov	r1, r7
   1ddec:	mov	r3, r4
   1ddf0:	mov	r2, fp
   1ddf4:	mov	r0, sl
   1ddf8:	bl	1a6cc <_start@@Base+0x4eac>
   1ddfc:	ldr	r3, [sp, #140]	; 0x8c
   1de00:	cmp	r3, #0
   1de04:	mov	r7, r0
   1de08:	beq	1f644 <_start@@Base+0x9e24>
   1de0c:	cmp	fp, r7
   1de10:	beq	1de38 <_start@@Base+0x8618>
   1de14:	ldrb	r3, [r7]
   1de18:	cmp	r3, #34	; 0x22
   1de1c:	moveq	r3, #0
   1de20:	addeq	r7, r7, #1
   1de24:	streq	r3, [sl, #12]
   1de28:	beq	1de38 <_start@@Base+0x8618>
   1de2c:	cmp	r3, #46	; 0x2e
   1de30:	strne	r5, [sl, #12]
   1de34:	beq	1e98c <_start@@Base+0x916c>
   1de38:	mov	r1, fp
   1de3c:	mov	r0, r7
   1de40:	bl	15948 <_start@@Base+0x128>
   1de44:	add	r3, pc, #796	; 0x31c
   1de48:	ldrd	r2, [r3]
   1de4c:	cmp	r1, r3
   1de50:	cmpeq	r0, r2
   1de54:	bls	1ddb0 <_start@@Base+0x8590>
   1de58:	add	r9, pc, #784	; 0x310
   1de5c:	ldrd	r8, [r9]
   1de60:	bic	r2, r0, #255	; 0xff
   1de64:	cmp	r1, r9
   1de68:	cmpeq	r2, r8
   1de6c:	beq	1dfac <_start@@Base+0x878c>
   1de70:	ldr	r2, [pc, #792]	; 1e190 <_start@@Base+0x8970>
   1de74:	mvn	r3, #0
   1de78:	and	r2, r2, r0
   1de7c:	and	r3, r3, r1
   1de80:	mov	r0, r2
   1de84:	mov	r1, r3
   1de88:	add	r3, pc, #744	; 0x2e8
   1de8c:	ldrd	r2, [r3]
   1de90:	cmp	r1, r3
   1de94:	cmpeq	r0, r2
   1de98:	bne	1ddd4 <_start@@Base+0x85b4>
   1de9c:	sub	r3, fp, r7
   1dea0:	cmp	r3, #6
   1dea4:	ble	1ddd4 <_start@@Base+0x85b4>
   1dea8:	mov	r1, r7
   1deac:	mov	r3, #6
   1deb0:	mov	r2, fp
   1deb4:	mov	r0, sl
   1deb8:	bl	18678 <_start@@Base+0x2e58>
   1debc:	cmp	r0, r7
   1dec0:	mov	r1, r0
   1dec4:	beq	1ddd4 <_start@@Base+0x85b4>
   1dec8:	mov	r3, #0
   1decc:	str	r3, [sp]
   1ded0:	mov	r2, fp
   1ded4:	add	r3, sp, #144	; 0x90
   1ded8:	mov	r0, sl
   1dedc:	bl	2f108 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1dee0:	ldr	r3, [sp, #144]	; 0x90
   1dee4:	cmp	r3, #0
   1dee8:	mov	r7, r0
   1deec:	beq	1e010 <_start@@Base+0x87f0>
   1def0:	mov	r1, #2
   1def4:	ldr	r0, [sl]
   1def8:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   1defc:	cmp	r0, #0
   1df00:	beq	1e010 <_start@@Base+0x87f0>
   1df04:	ldr	r3, [sp, #144]	; 0x90
   1df08:	str	r3, [r0]
   1df0c:	b	1dde8 <_start@@Base+0x85c8>
   1df10:	sub	r3, fp, r7
   1df14:	cmp	r3, #3
   1df18:	ble	1d744 <_start@@Base+0x7f24>
   1df1c:	mov	r3, #3
   1df20:	mov	r2, fp
   1df24:	mov	r1, r7
   1df28:	mov	r0, sl
   1df2c:	bl	18678 <_start@@Base+0x2e58>
   1df30:	cmp	r0, r7
   1df34:	mov	r5, r0
   1df38:	beq	1d744 <_start@@Base+0x7f24>
   1df3c:	mov	r0, #0
   1df40:	mov	r1, #0
   1df44:	add	r4, sp, #152	; 0x98
   1df48:	mov	r2, fp
   1df4c:	strd	r0, [r4, #-8]!
   1df50:	mov	r1, r5
   1df54:	mov	r3, r4
   1df58:	mov	r0, sl
   1df5c:	bl	1812c <_start@@Base+0x290c>
   1df60:	cmp	r5, r0
   1df64:	mov	r7, r0
   1df68:	beq	1ff88 <_start@@Base+0xa768>
   1df6c:	ldrd	r2, [sp, #144]	; 0x90
   1df70:	orrs	r3, r2, r3
   1df74:	bne	1df84 <_start@@Base+0x8764>
   1df78:	ldr	r3, [sl, #8]
   1df7c:	tst	r3, #2
   1df80:	beq	1d758 <_start@@Base+0x7f38>
   1df84:	mov	r3, #8
   1df88:	mov	r2, r3
   1df8c:	mov	r1, r8
   1df90:	ldr	r0, [sl]
   1df94:	bl	299f8 <flatcc_builder_table_add@@Base>
   1df98:	cmp	r0, #0
   1df9c:	beq	1e808 <_start@@Base+0x8fe8>
   1dfa0:	ldrd	r2, [sp, #144]	; 0x90
   1dfa4:	strd	r2, [r0]
   1dfa8:	b	1d758 <_start@@Base+0x7f38>
   1dfac:	sub	r3, fp, r7
   1dfb0:	cmp	r3, #7
   1dfb4:	ble	1ddd4 <_start@@Base+0x85b4>
   1dfb8:	mov	r1, r7
   1dfbc:	mov	r3, #7
   1dfc0:	mov	r2, fp
   1dfc4:	mov	r0, sl
   1dfc8:	bl	18678 <_start@@Base+0x2e58>
   1dfcc:	cmp	r0, r7
   1dfd0:	mov	r1, r0
   1dfd4:	beq	1ddd4 <_start@@Base+0x85b4>
   1dfd8:	add	r3, sp, #144	; 0x90
   1dfdc:	str	r5, [sp]
   1dfe0:	mov	r2, fp
   1dfe4:	mov	r0, sl
   1dfe8:	bl	2f108 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1dfec:	ldr	r3, [sp, #144]	; 0x90
   1dff0:	cmp	r3, #0
   1dff4:	mov	r7, r0
   1dff8:	beq	1e010 <_start@@Base+0x87f0>
   1dffc:	mov	r1, r5
   1e000:	ldr	r0, [sl]
   1e004:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   1e008:	cmp	r0, #0
   1e00c:	bne	1df04 <_start@@Base+0x86e4>
   1e010:	ldr	r9, [sp, #56]	; 0x38
   1e014:	mov	r1, r7
   1e018:	mov	r3, #33	; 0x21
   1e01c:	mov	r2, fp
   1e020:	mov	r0, sl
   1e024:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1e028:	ldr	r3, [sp, #124]	; 0x7c
   1e02c:	cmp	r3, #0
   1e030:	mov	r7, r0
   1e034:	beq	1d17c <_start@@Base+0x795c>
   1e038:	mov	r1, #35	; 0x23
   1e03c:	ldr	r0, [sl]
   1e040:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   1e044:	cmp	r0, #0
   1e048:	beq	1d17c <_start@@Base+0x795c>
   1e04c:	ldr	r3, [sp, #124]	; 0x7c
   1e050:	str	r3, [r0]
   1e054:	b	1c784 <_start@@Base+0x6f64>
   1e058:	ldr	r0, [sl]
   1e05c:	bl	28cf4 <flatcc_builder_end_vector@@Base>
   1e060:	cmp	r0, #0
   1e064:	str	r0, [sp, #124]	; 0x7c
   1e068:	beq	1d17c <_start@@Base+0x795c>
   1e06c:	mov	r1, #9
   1e070:	ldr	r0, [sl]
   1e074:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   1e078:	cmp	r0, #0
   1e07c:	beq	1d17c <_start@@Base+0x795c>
   1e080:	ldr	r3, [sp, #124]	; 0x7c
   1e084:	str	r3, [r0]
   1e088:	b	1c784 <_start@@Base+0x6f64>
   1e08c:	mov	r3, #5
   1e090:	mov	r2, fp
   1e094:	mov	r1, r7
   1e098:	mov	r0, sl
   1e09c:	bl	18678 <_start@@Base+0x2e58>
   1e0a0:	cmp	r0, r7
   1e0a4:	mov	r4, r0
   1e0a8:	beq	1d744 <_start@@Base+0x7f24>
   1e0ac:	mov	r0, #0
   1e0b0:	mov	r1, #0
   1e0b4:	mov	r3, #0
   1e0b8:	cmp	fp, r4
   1e0bc:	strd	r0, [sp, #144]	; 0x90
   1e0c0:	strh	r3, [sp, #118]	; 0x76
   1e0c4:	str	r3, [sp, #140]	; 0x8c
   1e0c8:	beq	1f308 <_start@@Base+0x9ae8>
   1e0cc:	add	r3, sp, #144	; 0x90
   1e0d0:	str	r3, [sp]
   1e0d4:	mov	r2, fp
   1e0d8:	add	r3, sp, #140	; 0x8c
   1e0dc:	mov	r1, r4
   1e0e0:	mov	r0, sl
   1e0e4:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   1e0e8:	cmp	r4, r0
   1e0ec:	mov	r7, r0
   1e0f0:	beq	1f304 <_start@@Base+0x9ae4>
   1e0f4:	ldr	r3, [sp, #140]	; 0x8c
   1e0f8:	cmp	r3, #0
   1e0fc:	bne	1f418 <_start@@Base+0x9bf8>
   1e100:	ldrd	r2, [sp, #144]	; 0x90
   1e104:	ldr	r0, [pc, #116]	; 1e180 <_start@@Base+0x8960>
   1e108:	mov	r1, #0
   1e10c:	cmp	r3, r1
   1e110:	cmpeq	r2, r0
   1e114:	uxthls	r2, r2
   1e118:	strhls	r2, [sp, #118]	; 0x76
   1e11c:	bhi	1f5ac <_start@@Base+0x9d8c>
   1e120:	cmp	r2, #0
   1e124:	bne	1e134 <_start@@Base+0x8914>
   1e128:	ldr	r3, [sl, #8]
   1e12c:	tst	r3, #2
   1e130:	beq	1d758 <_start@@Base+0x7f38>
   1e134:	mov	r3, #2
   1e138:	mov	r2, r3
   1e13c:	mov	r1, r3
   1e140:	ldr	r0, [sl]
   1e144:	bl	299f8 <flatcc_builder_table_add@@Base>
   1e148:	cmp	r0, #0
   1e14c:	beq	1e810 <_start@@Base+0x8ff0>
   1e150:	ldrh	r3, [sp, #118]	; 0x76
   1e154:	strh	r3, [r0]
   1e158:	b	1d758 <_start@@Base+0x7f38>
   1e15c:	nop			; (mov r0, r0)
   1e160:	andeq	r0, r0, r0
   1e164:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   1e168:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1e16c:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1e170:	cmnvs	r4, r0, lsl #2
   1e174:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   1e178:	strbvs	r0, [r4, #-0]!
   1e17c:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1e180:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1e184:	andeq	r0, r2, r8, lsr #2
   1e188:	andeq	r6, r3, ip, ror #27
   1e18c:	andeq	r0, r2, r0, lsr #2
   1e190:			; <UNDEFINED> instruction: 0xffff0000
   1e194:	ldrvs	r0, [r2, -r0]!
   1e198:	andeq	pc, r1, ip, lsr #28
   1e19c:	andeq	pc, r1, r4, lsl lr	; <UNPREDICTABLE>
   1e1a0:			; <UNDEFINED> instruction: 0x000369b0
   1e1a4:	muleq	r3, r4, r7
   1e1a8:			; <UNDEFINED> instruction: 0x000052bc
   1e1ac:	andeq	r6, r3, r4, ror #11
   1e1b0:	andeq	r6, r3, r0, ror #11
   1e1b4:	mov	r1, r7
   1e1b8:	mov	r3, #5
   1e1bc:	mov	r2, fp
   1e1c0:	mov	r0, sl
   1e1c4:	bl	18678 <_start@@Base+0x2e58>
   1e1c8:	cmp	r0, r7
   1e1cc:	mov	r1, r0
   1e1d0:	beq	1d254 <_start@@Base+0x7a34>
   1e1d4:	add	r3, sp, #124	; 0x7c
   1e1d8:	mov	r2, fp
   1e1dc:	mov	r0, sl
   1e1e0:	bl	1c5e8 <_start@@Base+0x6dc8>
   1e1e4:	ldr	r3, [sp, #124]	; 0x7c
   1e1e8:	cmp	r3, #0
   1e1ec:	mov	r7, r0
   1e1f0:	beq	1d17c <_start@@Base+0x795c>
   1e1f4:	mov	r1, #12
   1e1f8:	ldr	r0, [sl]
   1e1fc:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   1e200:	cmp	r0, #0
   1e204:	beq	1d17c <_start@@Base+0x795c>
   1e208:	ldr	r3, [sp, #124]	; 0x7c
   1e20c:	str	r3, [r0]
   1e210:	b	1c784 <_start@@Base+0x6f64>
   1e214:	sub	r3, fp, r4
   1e218:	cmp	r3, #8
   1e21c:	ble	1d4d4 <_start@@Base+0x7cb4>
   1e220:	mov	r3, #8
   1e224:	mov	r2, fp
   1e228:	mov	r1, r4
   1e22c:	mov	r0, sl
   1e230:	bl	18678 <_start@@Base+0x2e58>
   1e234:	cmp	r4, r0
   1e238:	mov	r7, r0
   1e23c:	beq	1d4d0 <_start@@Base+0x7cb0>
   1e240:	mov	r2, #1
   1e244:	mov	r1, r2
   1e248:	mvn	r3, #0
   1e24c:	ldr	r0, [sl]
   1e250:	bl	27d58 <flatcc_builder_start_vector@@Base>
   1e254:	subs	r6, r0, #0
   1e258:	bne	1d17c <_start@@Base+0x795c>
   1e25c:	mov	r1, r7
   1e260:	mov	r3, r9
   1e264:	mov	r2, fp
   1e268:	mov	r0, sl
   1e26c:	bl	18908 <_start@@Base+0x30e8>
   1e270:	ldr	r3, [sp, #120]	; 0x78
   1e274:	cmp	r3, #0
   1e278:	mov	r7, r0
   1e27c:	beq	1f488 <_start@@Base+0x9c68>
   1e280:	ldr	r2, [pc, #-260]	; 1e184 <_start@@Base+0x8964>
   1e284:	ldr	r3, [pc, #-260]	; 1e188 <_start@@Base+0x8968>
   1e288:	add	r2, pc, r2
   1e28c:	str	r2, [sp, #72]	; 0x48
   1e290:	ldr	r2, [pc, #-268]	; 1e18c <_start@@Base+0x896c>
   1e294:	add	r3, pc, r3
   1e298:	add	r2, pc, r2
   1e29c:	add	r3, r3, #284	; 0x11c
   1e2a0:	str	r2, [sp, #56]	; 0x38
   1e2a4:	str	r3, [sp, #100]	; 0x64
   1e2a8:	mov	r5, #1
   1e2ac:	b	1e2d8 <_start@@Base+0x8ab8>
   1e2b0:	ldrb	r2, [sp, #140]	; 0x8c
   1e2b4:	mov	r3, r9
   1e2b8:	mov	r0, sl
   1e2bc:	strb	r2, [r4]
   1e2c0:	mov	r2, fp
   1e2c4:	bl	1a548 <_start@@Base+0x4d28>
   1e2c8:	ldr	r3, [sp, #120]	; 0x78
   1e2cc:	cmp	r3, #0
   1e2d0:	mov	r7, r0
   1e2d4:	beq	1f488 <_start@@Base+0x9c68>
   1e2d8:	mov	r1, r5
   1e2dc:	ldr	r0, [sl]
   1e2e0:	strb	r6, [sp, #140]	; 0x8c
   1e2e4:	bl	27504 <flatcc_builder_extend_vector@@Base>
   1e2e8:	subs	r4, r0, #0
   1e2ec:	beq	1d17c <_start@@Base+0x795c>
   1e2f0:	sub	r8, fp, r7
   1e2f4:	cmp	r8, #3
   1e2f8:	ble	1e344 <_start@@Base+0x8b24>
   1e2fc:	ldr	r1, [sp, #72]	; 0x48
   1e300:	mov	r2, #4
   1e304:	mov	r0, r7
   1e308:	bl	14550 <memcmp@plt>
   1e30c:	cmp	r0, #0
   1e310:	strbeq	r5, [sp, #140]	; 0x8c
   1e314:	addeq	r1, r7, #4
   1e318:	beq	1e36c <_start@@Base+0x8b4c>
   1e31c:	cmp	r8, #4
   1e320:	beq	1e344 <_start@@Base+0x8b24>
   1e324:	ldr	r1, [sp, #56]	; 0x38
   1e328:	mov	r2, #5
   1e32c:	mov	r0, r7
   1e330:	bl	14550 <memcmp@plt>
   1e334:	cmp	r0, #0
   1e338:	strbeq	r0, [sp, #140]	; 0x8c
   1e33c:	addeq	r1, r7, #5
   1e340:	beq	1e36c <_start@@Base+0x8b4c>
   1e344:	add	r3, sp, #144	; 0x90
   1e348:	mov	r1, r7
   1e34c:	mov	r2, fp
   1e350:	mov	r0, sl
   1e354:	bl	18344 <_start@@Base+0x2b24>
   1e358:	ldrb	r3, [sp, #144]	; 0x90
   1e35c:	adds	r3, r3, #0
   1e360:	movne	r3, #1
   1e364:	strb	r3, [sp, #140]	; 0x8c
   1e368:	mov	r1, r0
   1e36c:	cmp	r1, r7
   1e370:	bne	1e2b0 <_start@@Base+0x8a90>
   1e374:	add	r3, sp, #140	; 0x8c
   1e378:	str	r3, [sp]
   1e37c:	mov	r1, r7
   1e380:	ldr	r3, [sp, #100]	; 0x64
   1e384:	mov	r2, fp
   1e388:	mov	r0, sl
   1e38c:	bl	18b78 <_start@@Base+0x3358>
   1e390:	cmp	fp, r0
   1e394:	cmpne	r0, r7
   1e398:	mov	r1, r0
   1e39c:	bne	1e2b0 <_start@@Base+0x8a90>
   1e3a0:	mov	r9, fp
   1e3a4:	mov	fp, r0
   1e3a8:	b	1c7e8 <_start@@Base+0x6fc8>
   1e3ac:	add	r4, r7, #16
   1e3b0:	mov	r0, r4
   1e3b4:	mov	r1, fp
   1e3b8:	bl	15948 <_start@@Base+0x128>
   1e3bc:	ldr	r3, [pc, #-564]	; 1e190 <_start@@Base+0x8970>
   1e3c0:	mov	r2, #0
   1e3c4:	and	r3, r3, r1
   1e3c8:	mov	r7, r1
   1e3cc:	ldr	r1, [pc, #-576]	; 1e194 <_start@@Base+0x8974>
   1e3d0:	and	r2, r2, r0
   1e3d4:	cmp	r3, r1
   1e3d8:	mov	r0, #0
   1e3dc:	cmpeq	r2, r0
   1e3e0:	beq	1f66c <_start@@Base+0x9e4c>
   1e3e4:	and	r7, r7, #-16777216	; 0xff000000
   1e3e8:	mov	r6, #0
   1e3ec:	cmp	r7, #1728053248	; 0x67000000
   1e3f0:	cmpeq	r6, #0
   1e3f4:	bne	1f470 <_start@@Base+0x9c50>
   1e3f8:	sub	r3, fp, r4
   1e3fc:	cmp	r3, #1
   1e400:	ble	20334 <_start@@Base+0xab14>
   1e404:	mov	r3, #1
   1e408:	mov	r2, fp
   1e40c:	mov	r1, r4
   1e410:	mov	r0, sl
   1e414:	bl	18678 <_start@@Base+0x2e58>
   1e418:	cmp	r4, r0
   1e41c:	mov	r7, r0
   1e420:	beq	20330 <_start@@Base+0xab10>
   1e424:	ldr	r0, [sl]
   1e428:	bl	27dd0 <flatcc_builder_start_offset_vector@@Base>
   1e42c:	cmp	r0, #0
   1e430:	bne	1d17c <_start@@Base+0x795c>
   1e434:	mov	r1, r7
   1e438:	mov	r3, r9
   1e43c:	mov	r2, fp
   1e440:	mov	r0, sl
   1e444:	bl	18908 <_start@@Base+0x30e8>
   1e448:	ldr	r3, [sp, #120]	; 0x78
   1e44c:	cmp	r3, #0
   1e450:	mov	r7, r0
   1e454:	beq	2010c <_start@@Base+0xa8ec>
   1e458:	add	r4, sp, #124	; 0x7c
   1e45c:	mov	r5, #1
   1e460:	b	1e4a0 <_start@@Base+0x8c80>
   1e464:	ldr	r0, [sl]
   1e468:	bl	27768 <flatcc_builder_extend_offset_vector@@Base>
   1e46c:	mov	r3, r9
   1e470:	mov	r2, fp
   1e474:	mov	r1, r7
   1e478:	subs	ip, r0, #0
   1e47c:	mov	r0, sl
   1e480:	beq	1d17c <_start@@Base+0x795c>
   1e484:	ldr	lr, [sp, #124]	; 0x7c
   1e488:	str	lr, [ip]
   1e48c:	bl	1a548 <_start@@Base+0x4d28>
   1e490:	ldr	r3, [sp, #120]	; 0x78
   1e494:	cmp	r3, #0
   1e498:	mov	r7, r0
   1e49c:	beq	2010c <_start@@Base+0xa8ec>
   1e4a0:	mov	r1, r7
   1e4a4:	mov	r3, r4
   1e4a8:	mov	r2, fp
   1e4ac:	mov	r0, sl
   1e4b0:	bl	2f500 <flatcc_json_parser_build_string@@Base>
   1e4b4:	ldr	r3, [sp, #124]	; 0x7c
   1e4b8:	mov	r1, r5
   1e4bc:	cmp	r3, #0
   1e4c0:	mov	r7, r0
   1e4c4:	bne	1e464 <_start@@Base+0x8c44>
   1e4c8:	b	1d17c <_start@@Base+0x795c>
   1e4cc:	mov	r1, r7
   1e4d0:	mov	r3, #5
   1e4d4:	mov	r2, fp
   1e4d8:	mov	r0, sl
   1e4dc:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1e4e0:	mov	r7, r0
   1e4e4:	b	1d7a8 <_start@@Base+0x7f88>
   1e4e8:	mov	r1, r7
   1e4ec:	mov	r3, #4
   1e4f0:	mov	r2, fp
   1e4f4:	mov	r0, sl
   1e4f8:	bl	18678 <_start@@Base+0x2e58>
   1e4fc:	cmp	r0, r7
   1e500:	mov	r1, r0
   1e504:	beq	1ddd4 <_start@@Base+0x85b4>
   1e508:	mov	r6, #0
   1e50c:	add	r3, sp, #144	; 0x90
   1e510:	str	r6, [sp]
   1e514:	mov	r2, fp
   1e518:	mov	r0, sl
   1e51c:	bl	2f108 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1e520:	ldr	r3, [sp, #144]	; 0x90
   1e524:	cmp	r3, r6
   1e528:	mov	r7, r0
   1e52c:	beq	1e010 <_start@@Base+0x87f0>
   1e530:	mov	r1, r6
   1e534:	ldr	r0, [sl]
   1e538:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   1e53c:	cmp	r0, #0
   1e540:	bne	1df04 <_start@@Base+0x86e4>
   1e544:	b	1e010 <_start@@Base+0x87f0>
   1e548:	mov	r3, #8
   1e54c:	mov	r2, fp
   1e550:	mov	r1, r7
   1e554:	mov	r0, sl
   1e558:	bl	18678 <_start@@Base+0x2e58>
   1e55c:	cmp	r0, r7
   1e560:	mov	r4, r0
   1e564:	beq	1ce8c <_start@@Base+0x766c>
   1e568:	sub	r5, fp, r0
   1e56c:	mov	r3, #0
   1e570:	cmp	r5, #3
   1e574:	strb	r3, [sp, #136]	; 0x88
   1e578:	ble	1e5bc <_start@@Base+0x8d9c>
   1e57c:	ldr	r1, [pc, #-1004]	; 1e198 <_start@@Base+0x8978>
   1e580:	mov	r2, #4
   1e584:	add	r1, pc, r1
   1e588:	bl	14550 <memcmp@plt>
   1e58c:	cmp	r0, #0
   1e590:	beq	1f2f4 <_start@@Base+0x9ad4>
   1e594:	cmp	r5, #4
   1e598:	beq	1e5bc <_start@@Base+0x8d9c>
   1e59c:	ldr	r1, [pc, #-1032]	; 1e19c <_start@@Base+0x897c>
   1e5a0:	mov	r2, #5
   1e5a4:	add	r1, pc, r1
   1e5a8:	mov	r0, r4
   1e5ac:	bl	14550 <memcmp@plt>
   1e5b0:	cmp	r0, #0
   1e5b4:	addeq	r7, r4, #5
   1e5b8:	beq	1e640 <_start@@Base+0x8e20>
   1e5bc:	mov	r0, #0
   1e5c0:	mov	r1, #0
   1e5c4:	mov	r3, #0
   1e5c8:	cmp	fp, r4
   1e5cc:	strd	r0, [sp, #144]	; 0x90
   1e5d0:	str	r3, [sp, #140]	; 0x8c
   1e5d4:	beq	1f298 <_start@@Base+0x9a78>
   1e5d8:	add	r3, sp, #144	; 0x90
   1e5dc:	str	r3, [sp]
   1e5e0:	mov	r2, fp
   1e5e4:	add	r3, sp, #140	; 0x8c
   1e5e8:	mov	r1, r4
   1e5ec:	mov	r0, sl
   1e5f0:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   1e5f4:	cmp	r4, r0
   1e5f8:	mov	r7, r0
   1e5fc:	beq	1f298 <_start@@Base+0x9a78>
   1e600:	ldr	r3, [sp, #140]	; 0x8c
   1e604:	cmp	r3, #0
   1e608:	bne	1f964 <_start@@Base+0xa144>
   1e60c:	ldrd	r2, [sp, #144]	; 0x90
   1e610:	cmp	r3, #0
   1e614:	cmpeq	r2, #255	; 0xff
   1e618:	bhi	1fe90 <_start@@Base+0xa670>
   1e61c:	tst	r2, #255	; 0xff
   1e620:	movne	r3, #1
   1e624:	moveq	r3, #0
   1e628:	strb	r3, [sp, #136]	; 0x88
   1e62c:	cmp	r3, #1
   1e630:	bne	1e640 <_start@@Base+0x8e20>
   1e634:	ldr	r3, [sl, #8]
   1e638:	tst	r3, #2
   1e63c:	beq	1c784 <_start@@Base+0x6f64>
   1e640:	mov	r3, #1
   1e644:	mov	r2, r3
   1e648:	mov	r1, #15
   1e64c:	ldr	r0, [sl]
   1e650:	bl	299f8 <flatcc_builder_table_add@@Base>
   1e654:	cmp	r0, #0
   1e658:	beq	1d17c <_start@@Base+0x795c>
   1e65c:	ldrb	r3, [sp, #136]	; 0x88
   1e660:	strb	r3, [r0]
   1e664:	b	1c784 <_start@@Base+0x6f64>
   1e668:	mov	r3, #4
   1e66c:	mov	r2, fp
   1e670:	mov	r1, r7
   1e674:	mov	r0, sl
   1e678:	bl	18678 <_start@@Base+0x2e58>
   1e67c:	cmp	r0, r7
   1e680:	mov	r4, r0
   1e684:	beq	1cfc8 <_start@@Base+0x77a8>
   1e688:	mov	r2, #1
   1e68c:	mov	r1, r2
   1e690:	mvn	r3, #0
   1e694:	ldr	r0, [sl]
   1e698:	bl	27d58 <flatcc_builder_start_vector@@Base>
   1e69c:	subs	r6, r0, #0
   1e6a0:	bne	1fda4 <_start@@Base+0xa584>
   1e6a4:	mov	r3, r9
   1e6a8:	mov	r1, r4
   1e6ac:	mov	r2, fp
   1e6b0:	mov	r0, sl
   1e6b4:	bl	18908 <_start@@Base+0x30e8>
   1e6b8:	ldr	r3, [sp, #120]	; 0x78
   1e6bc:	cmp	r3, #0
   1e6c0:	mov	r7, r0
   1e6c4:	beq	1e774 <_start@@Base+0x8f54>
   1e6c8:	ldr	r3, [pc, #-1328]	; 1e1a0 <_start@@Base+0x8980>
   1e6cc:	mov	r8, #1
   1e6d0:	add	r3, pc, r3
   1e6d4:	add	r3, r3, #156	; 0x9c
   1e6d8:	str	r3, [sp, #56]	; 0x38
   1e6dc:	add	r5, sp, #144	; 0x90
   1e6e0:	b	1e710 <_start@@Base+0x8ef0>
   1e6e4:	ldrb	r2, [sp, #144]	; 0x90
   1e6e8:	mov	r1, r0
   1e6ec:	mov	r3, r9
   1e6f0:	strb	r2, [r4]
   1e6f4:	mov	r0, sl
   1e6f8:	mov	r2, fp
   1e6fc:	bl	1a548 <_start@@Base+0x4d28>
   1e700:	ldr	r3, [sp, #120]	; 0x78
   1e704:	cmp	r3, #0
   1e708:	mov	r7, r0
   1e70c:	beq	1e774 <_start@@Base+0x8f54>
   1e710:	mov	r1, r8
   1e714:	ldr	r0, [sl]
   1e718:	strb	r6, [sp, #144]	; 0x90
   1e71c:	bl	27504 <flatcc_builder_extend_vector@@Base>
   1e720:	mov	r1, r7
   1e724:	mov	r3, r5
   1e728:	mov	r2, fp
   1e72c:	subs	r4, r0, #0
   1e730:	mov	r0, sl
   1e734:	beq	1d17c <_start@@Base+0x795c>
   1e738:	bl	18344 <_start@@Base+0x2b24>
   1e73c:	cmp	r0, r7
   1e740:	bne	1e6e4 <_start@@Base+0x8ec4>
   1e744:	str	r5, [sp]
   1e748:	ldr	r3, [sp, #56]	; 0x38
   1e74c:	mov	r2, fp
   1e750:	mov	r1, r7
   1e754:	mov	r0, sl
   1e758:	bl	19768 <_start@@Base+0x3f48>
   1e75c:	cmp	fp, r0
   1e760:	cmpne	r0, r7
   1e764:	bne	1e6e4 <_start@@Base+0x8ec4>
   1e768:	mov	r9, fp
   1e76c:	mov	fp, r0
   1e770:	b	1c7e8 <_start@@Base+0x6fc8>
   1e774:	ldr	r0, [sl]
   1e778:	bl	28cf4 <flatcc_builder_end_vector@@Base>
   1e77c:	cmp	r0, #0
   1e780:	str	r0, [sp, #124]	; 0x7c
   1e784:	beq	1d17c <_start@@Base+0x795c>
   1e788:	mov	r1, #30
   1e78c:	ldr	r0, [sl]
   1e790:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   1e794:	cmp	r0, #0
   1e798:	beq	1d17c <_start@@Base+0x795c>
   1e79c:	ldr	r3, [sp, #124]	; 0x7c
   1e7a0:	str	r3, [r0]
   1e7a4:	b	1c784 <_start@@Base+0x6f64>
   1e7a8:	mov	r1, r7
   1e7ac:	mov	r3, #4
   1e7b0:	mov	r2, fp
   1e7b4:	mov	r0, sl
   1e7b8:	bl	18678 <_start@@Base+0x2e58>
   1e7bc:	cmp	r0, r7
   1e7c0:	mov	r1, r0
   1e7c4:	beq	1cfa4 <_start@@Base+0x7784>
   1e7c8:	add	r3, sp, #124	; 0x7c
   1e7cc:	mov	r2, fp
   1e7d0:	mov	r0, sl
   1e7d4:	bl	2f500 <flatcc_json_parser_build_string@@Base>
   1e7d8:	ldr	r3, [sp, #124]	; 0x7c
   1e7dc:	cmp	r3, #0
   1e7e0:	mov	r7, r0
   1e7e4:	beq	1d17c <_start@@Base+0x795c>
   1e7e8:	mov	r1, #3
   1e7ec:	ldr	r0, [sl]
   1e7f0:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   1e7f4:	cmp	r0, #0
   1e7f8:	beq	1d17c <_start@@Base+0x795c>
   1e7fc:	ldr	r3, [sp, #124]	; 0x7c
   1e800:	str	r3, [r0]
   1e804:	b	1c784 <_start@@Base+0x6f64>
   1e808:	mov	r0, r7
   1e80c:	mov	r7, r0
   1e810:	mov	r1, r7
   1e814:	mov	r3, #33	; 0x21
   1e818:	mov	r2, fp
   1e81c:	mov	r0, sl
   1e820:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1e824:	ldr	r3, [sp, #124]	; 0x7c
   1e828:	cmp	r3, #0
   1e82c:	mov	r7, r0
   1e830:	beq	1d17c <_start@@Base+0x795c>
   1e834:	mov	r1, #14
   1e838:	ldr	r0, [sl]
   1e83c:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   1e840:	cmp	r0, #0
   1e844:	beq	1d17c <_start@@Base+0x795c>
   1e848:	ldr	r3, [sp, #124]	; 0x7c
   1e84c:	str	r3, [r0]
   1e850:	b	1c784 <_start@@Base+0x6f64>
   1e854:	add	r4, r7, #8
   1e858:	mov	r0, r4
   1e85c:	mov	r1, fp
   1e860:	bl	15948 <_start@@Base+0x128>
   1e864:	mov	r0, #0
   1e868:	and	r1, r1, #-16777216	; 0xff000000
   1e86c:	cmp	r1, #2030043136	; 0x79000000
   1e870:	cmpeq	r0, #0
   1e874:	bne	1f3e8 <_start@@Base+0x9bc8>
   1e878:	sub	r3, fp, r4
   1e87c:	cmp	r3, #1
   1e880:	ble	20480 <_start@@Base+0xac60>
   1e884:	mov	r3, #1
   1e888:	mov	r2, fp
   1e88c:	mov	r1, r4
   1e890:	mov	r0, sl
   1e894:	bl	18678 <_start@@Base+0x2e58>
   1e898:	cmp	r4, r0
   1e89c:	mov	r7, r0
   1e8a0:	beq	2047c <_start@@Base+0xac5c>
   1e8a4:	mov	r2, #1
   1e8a8:	mov	r1, r2
   1e8ac:	mvn	r3, #0
   1e8b0:	ldr	r0, [sl]
   1e8b4:	bl	27d58 <flatcc_builder_start_vector@@Base>
   1e8b8:	cmp	r0, #0
   1e8bc:	bne	1d17c <_start@@Base+0x795c>
   1e8c0:	mov	r1, r7
   1e8c4:	mov	r3, r9
   1e8c8:	mov	r2, fp
   1e8cc:	mov	r0, sl
   1e8d0:	bl	18908 <_start@@Base+0x30e8>
   1e8d4:	ldr	r3, [sp, #120]	; 0x78
   1e8d8:	cmp	r3, #0
   1e8dc:	mov	r7, r0
   1e8e0:	beq	1fd70 <_start@@Base+0xa550>
   1e8e4:	ldr	r3, [pc, #-1864]	; 1e1a4 <_start@@Base+0x8984>
   1e8e8:	mov	r8, #0
   1e8ec:	add	r3, pc, r3
   1e8f0:	add	r3, r3, #180	; 0xb4
   1e8f4:	str	r3, [sp, #56]	; 0x38
   1e8f8:	mov	r6, #1
   1e8fc:	add	r5, sp, #144	; 0x90
   1e900:	b	1e930 <_start@@Base+0x9110>
   1e904:	ldrb	r2, [sp, #144]	; 0x90
   1e908:	mov	r1, r0
   1e90c:	mov	r3, r9
   1e910:	strb	r2, [r4]
   1e914:	mov	r0, sl
   1e918:	mov	r2, fp
   1e91c:	bl	1a548 <_start@@Base+0x4d28>
   1e920:	ldr	r3, [sp, #120]	; 0x78
   1e924:	cmp	r3, #0
   1e928:	mov	r7, r0
   1e92c:	beq	1fd70 <_start@@Base+0xa550>
   1e930:	mov	r1, r6
   1e934:	ldr	r0, [sl]
   1e938:	strb	r8, [sp, #144]	; 0x90
   1e93c:	bl	27504 <flatcc_builder_extend_vector@@Base>
   1e940:	mov	r1, r7
   1e944:	mov	r3, r5
   1e948:	mov	r2, fp
   1e94c:	subs	r4, r0, #0
   1e950:	mov	r0, sl
   1e954:	beq	1d17c <_start@@Base+0x795c>
   1e958:	bl	18344 <_start@@Base+0x2b24>
   1e95c:	cmp	r0, r7
   1e960:	bne	1e904 <_start@@Base+0x90e4>
   1e964:	str	r5, [sp]
   1e968:	ldr	r3, [sp, #56]	; 0x38
   1e96c:	mov	r2, fp
   1e970:	mov	r1, r7
   1e974:	mov	r0, sl
   1e978:	bl	19768 <_start@@Base+0x3f48>
   1e97c:	cmp	fp, r0
   1e980:	cmpne	r0, r7
   1e984:	bne	1e904 <_start@@Base+0x90e4>
   1e988:	b	1e768 <_start@@Base+0x8f48>
   1e98c:	mov	r1, r7
   1e990:	mov	r3, #5
   1e994:	mov	r2, fp
   1e998:	mov	r0, sl
   1e99c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1e9a0:	mov	r7, r0
   1e9a4:	b	1de38 <_start@@Base+0x8618>
   1e9a8:	ldr	r0, [sl]
   1e9ac:	bl	28cf4 <flatcc_builder_end_vector@@Base>
   1e9b0:	cmp	r0, #0
   1e9b4:	str	r0, [sp, #124]	; 0x7c
   1e9b8:	beq	1d17c <_start@@Base+0x795c>
   1e9bc:	mov	r1, #31
   1e9c0:	ldr	r0, [sl]
   1e9c4:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   1e9c8:	cmp	r0, #0
   1e9cc:	beq	1d17c <_start@@Base+0x795c>
   1e9d0:	ldr	r3, [sp, #124]	; 0x7c
   1e9d4:	str	r3, [r0]
   1e9d8:	b	1c784 <_start@@Base+0x6f64>
   1e9dc:	mov	r1, r7
   1e9e0:	mov	r3, #4
   1e9e4:	mov	r2, fp
   1e9e8:	mov	r0, sl
   1e9ec:	bl	18678 <_start@@Base+0x2e58>
   1e9f0:	cmp	r0, r7
   1e9f4:	mov	r1, r0
   1e9f8:	beq	1c9a4 <_start@@Base+0x7184>
   1e9fc:	ldr	ip, [sp, #128]	; 0x80
   1ea00:	ldr	r3, [pc, #-2144]	; 1e1a8 <_start@@Base+0x8988>
   1ea04:	mov	r2, #8
   1ea08:	add	r3, pc, r3
   1ea0c:	str	r3, [sp, #8]
   1ea10:	stm	sp, {r2, ip}
   1ea14:	mov	r3, #0
   1ea18:	mov	r2, fp
   1ea1c:	mov	r0, sl
   1ea20:	bl	2f768 <flatcc_json_parser_union@@Base>
   1ea24:	mov	r7, r0
   1ea28:	b	1c784 <_start@@Base+0x6f64>
   1ea2c:	mov	r3, #3
   1ea30:	mov	r2, fp
   1ea34:	mov	r1, r7
   1ea38:	mov	r0, sl
   1ea3c:	bl	18678 <_start@@Base+0x2e58>
   1ea40:	cmp	r0, r7
   1ea44:	mov	r6, r0
   1ea48:	beq	1cce4 <_start@@Base+0x74c4>
   1ea4c:	mov	r3, #16
   1ea50:	mov	r2, #32
   1ea54:	mov	r1, #0
   1ea58:	ldr	r0, [sl]
   1ea5c:	bl	299f8 <flatcc_builder_table_add@@Base>
   1ea60:	subs	r3, r0, #0
   1ea64:	str	r3, [sp, #72]	; 0x48
   1ea68:	beq	20510 <_start@@Base+0xacf0>
   1ea6c:	add	r8, sp, #136	; 0x88
   1ea70:	mov	r3, r8
   1ea74:	mov	r1, r6
   1ea78:	mov	r2, fp
   1ea7c:	mov	r0, sl
   1ea80:	bl	185c4 <_start@@Base+0x2da4>
   1ea84:	ldr	r3, [sp, #136]	; 0x88
   1ea88:	cmp	r3, #0
   1ea8c:	mov	r7, r0
   1ea90:	beq	1c784 <_start@@Base+0x6f64>
   1ea94:	ldr	r2, [pc, #-2288]	; 1e1ac <_start@@Base+0x898c>
   1ea98:	ldr	r3, [pc, #-2288]	; 1e1b0 <_start@@Base+0x8990>
   1ea9c:	add	r2, pc, r2
   1eaa0:	add	r3, pc, r3
   1eaa4:	add	r2, r2, #256	; 0x100
   1eaa8:	add	r3, r3, #244	; 0xf4
   1eaac:	str	r9, [sp, #100]	; 0x64
   1eab0:	str	r8, [sp, #56]	; 0x38
   1eab4:	vldr	s18, [pc, #900]	; 1ee40 <_start@@Base+0x9620>
   1eab8:	vldr	d8, [pc, #856]	; 1ee18 <_start@@Base+0x95f8>
   1eabc:	str	r2, [sp, #104]	; 0x68
   1eac0:	str	r3, [sp, #108]	; 0x6c
   1eac4:	ldrd	r8, [sp, #88]	; 0x58
   1eac8:	b	1ec54 <_start@@Base+0x9434>
   1eacc:	ldrb	r2, [r7, #7]
   1ead0:	mov	r3, #0
   1ead4:	ldrb	r0, [r7, #6]
   1ead8:	lsr	lr, r0, #24
   1eadc:	lsl	r1, r0, #8
   1eae0:	str	lr, [sp, #68]	; 0x44
   1eae4:	str	r1, [sp, #64]	; 0x40
   1eae8:	ldrd	r0, [sp, #64]	; 0x40
   1eaec:	orr	r0, r0, r2
   1eaf0:	orr	r1, r1, r3
   1eaf4:	mov	r2, r0
   1eaf8:	mov	r3, r1
   1eafc:	ldrb	r0, [r7, #5]
   1eb00:	lsr	lr, r0, #16
   1eb04:	lsl	r1, r0, #16
   1eb08:	str	lr, [sp, #52]	; 0x34
   1eb0c:	str	r1, [sp, #48]	; 0x30
   1eb10:	ldrd	r0, [sp, #48]	; 0x30
   1eb14:	orr	r0, r0, r2
   1eb18:	orr	r1, r1, r3
   1eb1c:	mov	r2, r0
   1eb20:	mov	r3, r1
   1eb24:	ldrb	r0, [r7, #4]
   1eb28:	lsr	lr, r0, #8
   1eb2c:	lsl	r1, r0, #24
   1eb30:	str	lr, [sp, #36]	; 0x24
   1eb34:	str	r1, [sp, #32]
   1eb38:	ldrd	r0, [sp, #32]
   1eb3c:	orr	r0, r0, r2
   1eb40:	orr	r1, r1, r3
   1eb44:	mov	r2, r0
   1eb48:	mov	r3, r1
   1eb4c:	ldrb	r1, [r7, #3]
   1eb50:	str	r1, [sp, #44]	; 0x2c
   1eb54:	mov	r1, #0
   1eb58:	str	r1, [sp, #40]	; 0x28
   1eb5c:	ldrd	r0, [sp, #40]	; 0x28
   1eb60:	orr	r0, r0, r2
   1eb64:	orr	r1, r1, r3
   1eb68:	mov	r2, r0
   1eb6c:	mov	r3, r1
   1eb70:	ldrb	r0, [r7, #2]
   1eb74:	lsl	r1, r0, #8
   1eb78:	str	r1, [sp, #28]
   1eb7c:	mov	r1, #0
   1eb80:	str	r1, [sp, #24]
   1eb84:	ldrd	r0, [sp, #24]
   1eb88:	orr	r0, r0, r2
   1eb8c:	orr	r1, r1, r3
   1eb90:	mov	r2, r0
   1eb94:	mov	r3, r1
   1eb98:	ldrb	r0, [r7, #1]
   1eb9c:	lsl	r1, r0, #16
   1eba0:	str	r1, [sp, #20]
   1eba4:	mov	r1, #0
   1eba8:	str	r1, [sp, #16]
   1ebac:	ldrd	r0, [sp, #16]
   1ebb0:	orr	r0, r0, r2
   1ebb4:	orr	r1, r1, r3
   1ebb8:	mov	r2, r0
   1ebbc:	mov	r3, r1
   1ebc0:	ldrb	r4, [r7]
   1ebc4:	add	r1, pc, #596	; 0x254
   1ebc8:	ldrd	r0, [r1]
   1ebcc:	mov	r8, #0
   1ebd0:	orr	r2, r2, r8
   1ebd4:	lsl	r9, r4, #24
   1ebd8:	orr	r3, r3, r9
   1ebdc:	cmp	r3, r1
   1ebe0:	cmpeq	r2, r0
   1ebe4:	bls	1ed14 <_start@@Base+0x94f4>
   1ebe8:	mvn	r1, #-2013265920	; 0x88000000
   1ebec:	mvn	r0, #0
   1ebf0:	cmp	r3, r1
   1ebf4:	cmpeq	r2, r0
   1ebf8:	bhi	1eda0 <_start@@Base+0x9580>
   1ebfc:	add	r1, pc, #548	; 0x224
   1ec00:	ldrd	r0, [r1]
   1ec04:	and	r2, r2, #-16777216	; 0xff000000
   1ec08:	cmp	r3, r1
   1ec0c:	cmpeq	r2, r0
   1ec10:	bne	1ec1c <_start@@Base+0x93fc>
   1ec14:	cmp	ip, #5
   1ec18:	bgt	1efd0 <_start@@Base+0x97b0>
   1ec1c:	mov	r1, r7
   1ec20:	mov	r2, fp
   1ec24:	mov	r0, sl
   1ec28:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ec2c:	mov	r4, r0
   1ec30:	ldr	r3, [sp, #56]	; 0x38
   1ec34:	mov	r1, r4
   1ec38:	mov	r2, fp
   1ec3c:	mov	r0, sl
   1ec40:	bl	1a6cc <_start@@Base+0x4eac>
   1ec44:	ldr	r3, [sp, #136]	; 0x88
   1ec48:	cmp	r3, #0
   1ec4c:	mov	r7, r0
   1ec50:	beq	1f070 <_start@@Base+0x9850>
   1ec54:	cmp	fp, r7
   1ec58:	beq	1ef74 <_start@@Base+0x9754>
   1ec5c:	ldrb	r3, [r7]
   1ec60:	cmp	r3, #34	; 0x22
   1ec64:	moveq	r3, #0
   1ec68:	addeq	r7, r7, #1
   1ec6c:	streq	r3, [sl, #12]
   1ec70:	beq	1ec84 <_start@@Base+0x9464>
   1ec74:	cmp	r3, #46	; 0x2e
   1ec78:	movne	r3, #1
   1ec7c:	strne	r3, [sl, #12]
   1ec80:	beq	1ef7c <_start@@Base+0x975c>
   1ec84:	sub	ip, fp, r7
   1ec88:	cmp	ip, #8
   1ec8c:	bhi	1eacc <_start@@Base+0x92ac>
   1ec90:	sub	r3, ip, #1
   1ec94:	cmp	r3, #7
   1ec98:	addls	pc, pc, r3, lsl #2
   1ec9c:	b	1ec1c <_start@@Base+0x93fc>
   1eca0:	b	1ed08 <_start@@Base+0x94e8>
   1eca4:	b	1ecfc <_start@@Base+0x94dc>
   1eca8:	b	1ecf0 <_start@@Base+0x94d0>
   1ecac:	b	1ece4 <_start@@Base+0x94c4>
   1ecb0:	b	1ecd8 <_start@@Base+0x94b8>
   1ecb4:	b	1eccc <_start@@Base+0x94ac>
   1ecb8:	b	1ecc0 <_start@@Base+0x94a0>
   1ecbc:	b	1eacc <_start@@Base+0x92ac>
   1ecc0:	mov	r2, #0
   1ecc4:	mov	r3, #0
   1ecc8:	b	1ead4 <_start@@Base+0x92b4>
   1eccc:	mov	r2, #0
   1ecd0:	mov	r3, #0
   1ecd4:	b	1eafc <_start@@Base+0x92dc>
   1ecd8:	mov	r2, #0
   1ecdc:	mov	r3, #0
   1ece0:	b	1eb24 <_start@@Base+0x9304>
   1ece4:	mov	r2, #0
   1ece8:	mov	r3, #0
   1ecec:	b	1eb4c <_start@@Base+0x932c>
   1ecf0:	mov	r2, #0
   1ecf4:	mov	r3, #0
   1ecf8:	b	1eb70 <_start@@Base+0x9350>
   1ecfc:	mov	r2, #0
   1ed00:	mov	r3, #0
   1ed04:	b	1eb98 <_start@@Base+0x9378>
   1ed08:	mov	r2, #0
   1ed0c:	mov	r3, #0
   1ed10:	b	1ebc0 <_start@@Base+0x93a0>
   1ed14:	add	r1, pc, #276	; 0x114
   1ed18:	ldrd	r0, [r1]
   1ed1c:	and	r2, r2, #-16777216	; 0xff000000
   1ed20:	cmp	r3, r1
   1ed24:	cmpeq	r2, r0
   1ed28:	beq	1ee54 <_start@@Base+0x9634>
   1ed2c:	add	r1, pc, #260	; 0x104
   1ed30:	ldrd	r0, [r1]
   1ed34:	cmp	r3, r1
   1ed38:	cmpeq	r2, r0
   1ed3c:	bne	1ec1c <_start@@Base+0x93fc>
   1ed40:	cmp	ip, #5
   1ed44:	ble	1ec1c <_start@@Base+0x93fc>
   1ed48:	mov	r3, #5
   1ed4c:	mov	r2, fp
   1ed50:	mov	r1, r7
   1ed54:	mov	r0, sl
   1ed58:	bl	18678 <_start@@Base+0x2e58>
   1ed5c:	cmp	r0, r7
   1ed60:	mov	r5, r0
   1ed64:	beq	1ec1c <_start@@Base+0x93fc>
   1ed68:	add	r6, sp, #152	; 0x98
   1ed6c:	mov	r1, r0
   1ed70:	vstmdb	r6!, {d8}
   1ed74:	mov	r2, fp
   1ed78:	mov	r0, sl
   1ed7c:	mov	r3, r6
   1ed80:	bl	2e1f8 <flatcc_json_parser_double@@Base>
   1ed84:	cmp	r5, r0
   1ed88:	mov	r4, r0
   1ed8c:	beq	1f098 <_start@@Base+0x9878>
   1ed90:	ldrd	r2, [sp, #144]	; 0x90
   1ed94:	ldr	r1, [sp, #72]	; 0x48
   1ed98:	strd	r2, [r1, #16]
   1ed9c:	b	1ec30 <_start@@Base+0x9410>
   1eda0:	mvn	r1, #-2030043136	; 0x87000000
   1eda4:	mvn	r0, #0
   1eda8:	cmp	r3, r1
   1edac:	cmpeq	r2, r0
   1edb0:	bhi	1eef0 <_start@@Base+0x96d0>
   1edb4:	cmp	ip, #1
   1edb8:	ble	1ec1c <_start@@Base+0x93fc>
   1edbc:	mov	r3, #1
   1edc0:	mov	r2, fp
   1edc4:	mov	r1, r7
   1edc8:	mov	r0, sl
   1edcc:	bl	18678 <_start@@Base+0x2e58>
   1edd0:	cmp	r0, r7
   1edd4:	mov	r5, r0
   1edd8:	beq	1ec1c <_start@@Base+0x93fc>
   1eddc:	vmov	r3, s18
   1ede0:	add	r6, sp, #152	; 0x98
   1ede4:	mov	r1, r0
   1ede8:	mov	r2, fp
   1edec:	str	r3, [r6, #-8]!
   1edf0:	mov	r0, sl
   1edf4:	mov	r3, r6
   1edf8:	bl	2e2c8 <flatcc_json_parser_float@@Base>
   1edfc:	cmp	r5, r0
   1ee00:	mov	r4, r0
   1ee04:	beq	1f578 <_start@@Base+0x9d58>
   1ee08:	ldr	r2, [sp, #72]	; 0x48
   1ee0c:	ldr	r3, [sp, #144]	; 0x90
   1ee10:	str	r3, [r2]
   1ee14:	b	1ec30 <_start@@Base+0x9410>
	...
   1ee20:	rscscc	pc, pc, #1020	; 0x3fc
   1ee24:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ee28:	movwcc	r0, #0
   1ee2c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ee30:	andcc	r0, r0, #0
   1ee34:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ee38:	mrscc	r0, (UNDEF: 0)
   1ee3c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ee40:	andeq	r0, r0, r0
   1ee44:	andeq	r5, r3, r0, ror #31
   1ee48:	andeq	r5, r3, ip, lsr #31
   1ee4c:	andeq	r5, r3, r0, asr pc
   1ee50:	andeq	r5, r3, r8, lsl #29
   1ee54:	cmp	ip, #5
   1ee58:	ble	1ec1c <_start@@Base+0x93fc>
   1ee5c:	mov	r3, #5
   1ee60:	mov	r2, fp
   1ee64:	mov	r1, r7
   1ee68:	mov	r0, sl
   1ee6c:	bl	18678 <_start@@Base+0x2e58>
   1ee70:	cmp	r0, r7
   1ee74:	mov	r5, r0
   1ee78:	beq	1ec1c <_start@@Base+0x93fc>
   1ee7c:	mov	r2, #0
   1ee80:	mov	r3, #0
   1ee84:	cmp	fp, r0
   1ee88:	strb	r8, [sp, #132]	; 0x84
   1ee8c:	str	r8, [sp, #140]	; 0x8c
   1ee90:	strd	r2, [sp, #144]	; 0x90
   1ee94:	beq	1f0cc <_start@@Base+0x98ac>
   1ee98:	add	r3, sp, #144	; 0x90
   1ee9c:	str	r3, [sp]
   1eea0:	mov	r1, r0
   1eea4:	add	r3, sp, #140	; 0x8c
   1eea8:	mov	r2, fp
   1eeac:	mov	r0, sl
   1eeb0:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   1eeb4:	cmp	r5, r0
   1eeb8:	mov	r4, r0
   1eebc:	beq	1f0cc <_start@@Base+0x98ac>
   1eec0:	ldr	r1, [sp, #140]	; 0x8c
   1eec4:	ldrd	r2, [sp, #144]	; 0x90
   1eec8:	cmp	r1, r8
   1eecc:	beq	1ef98 <_start@@Base+0x9778>
   1eed0:	cmp	r3, #0
   1eed4:	cmpeq	r2, #128	; 0x80
   1eed8:	rsbls	r2, r2, #0
   1eedc:	sxtbls	r2, r2
   1eee0:	bhi	1f07c <_start@@Base+0x985c>
   1eee4:	ldr	r3, [sp, #72]	; 0x48
   1eee8:	strb	r2, [r3, #24]
   1eeec:	b	1ec30 <_start@@Base+0x9410>
   1eef0:	and	r3, r3, #-16777216	; 0xff000000
   1eef4:	mov	r2, #0
   1eef8:	cmp	r3, #2046820352	; 0x7a000000
   1eefc:	cmpeq	r2, #0
   1ef00:	beq	1f00c <_start@@Base+0x97ec>
   1ef04:	cmp	r3, #2030043136	; 0x79000000
   1ef08:	cmpeq	r2, #0
   1ef0c:	bne	1ec1c <_start@@Base+0x93fc>
   1ef10:	cmp	ip, #1
   1ef14:	ble	1ec1c <_start@@Base+0x93fc>
   1ef18:	mov	r3, #1
   1ef1c:	mov	r2, fp
   1ef20:	mov	r1, r7
   1ef24:	mov	r0, sl
   1ef28:	bl	18678 <_start@@Base+0x2e58>
   1ef2c:	cmp	r0, r7
   1ef30:	mov	r5, r0
   1ef34:	beq	1ec1c <_start@@Base+0x93fc>
   1ef38:	vmov	r3, s18
   1ef3c:	add	r6, sp, #152	; 0x98
   1ef40:	mov	r1, r0
   1ef44:	mov	r2, fp
   1ef48:	str	r3, [r6, #-8]!
   1ef4c:	mov	r0, sl
   1ef50:	mov	r3, r6
   1ef54:	bl	2e2c8 <flatcc_json_parser_float@@Base>
   1ef58:	cmp	r5, r0
   1ef5c:	mov	r4, r0
   1ef60:	beq	1f800 <_start@@Base+0x9fe0>
   1ef64:	ldr	r2, [sp, #72]	; 0x48
   1ef68:	ldr	r3, [sp, #144]	; 0x90
   1ef6c:	str	r3, [r2, #4]
   1ef70:	b	1ec30 <_start@@Base+0x9410>
   1ef74:	mov	r7, fp
   1ef78:	b	1ec1c <_start@@Base+0x93fc>
   1ef7c:	mov	r1, r7
   1ef80:	mov	r3, #5
   1ef84:	mov	r2, fp
   1ef88:	mov	r0, sl
   1ef8c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1ef90:	mov	r7, r0
   1ef94:	b	1ec84 <_start@@Base+0x9464>
   1ef98:	cmp	r3, #0
   1ef9c:	cmpeq	r2, #127	; 0x7f
   1efa0:	sxtbls	r2, r2
   1efa4:	bls	1eee4 <_start@@Base+0x96c4>
   1efa8:	mov	r1, r0
   1efac:	mov	r3, #7
   1efb0:	mov	r2, fp
   1efb4:	mov	r0, sl
   1efb8:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1efbc:	mov	r4, r0
   1efc0:	cmp	r5, r4
   1efc4:	beq	1f0cc <_start@@Base+0x98ac>
   1efc8:	ldrsb	r2, [sp, #132]	; 0x84
   1efcc:	b	1eee4 <_start@@Base+0x96c4>
   1efd0:	mov	r1, r7
   1efd4:	mov	r3, #5
   1efd8:	mov	r2, fp
   1efdc:	mov	r0, sl
   1efe0:	bl	18678 <_start@@Base+0x2e58>
   1efe4:	cmp	r0, r7
   1efe8:	mov	r1, r0
   1efec:	beq	1ec1c <_start@@Base+0x93fc>
   1eff0:	ldr	r3, [sp, #72]	; 0x48
   1eff4:	mov	r2, fp
   1eff8:	add	r3, r3, #26
   1effc:	mov	r0, sl
   1f000:	bl	1bd90 <_start@@Base+0x6570>
   1f004:	mov	r4, r0
   1f008:	b	1ec30 <_start@@Base+0x9410>
   1f00c:	cmp	ip, #1
   1f010:	ble	1ec1c <_start@@Base+0x93fc>
   1f014:	mov	r3, #1
   1f018:	mov	r2, fp
   1f01c:	mov	r1, r7
   1f020:	mov	r0, sl
   1f024:	bl	18678 <_start@@Base+0x2e58>
   1f028:	cmp	r0, r7
   1f02c:	mov	r5, r0
   1f030:	beq	1ec1c <_start@@Base+0x93fc>
   1f034:	vmov	r3, s18
   1f038:	add	r6, sp, #152	; 0x98
   1f03c:	mov	r1, r0
   1f040:	mov	r2, fp
   1f044:	str	r3, [r6, #-8]!
   1f048:	mov	r0, sl
   1f04c:	mov	r3, r6
   1f050:	bl	2e2c8 <flatcc_json_parser_float@@Base>
   1f054:	cmp	r5, r0
   1f058:	mov	r4, r0
   1f05c:	beq	1fd10 <_start@@Base+0xa4f0>
   1f060:	ldr	r2, [sp, #72]	; 0x48
   1f064:	ldr	r3, [sp, #144]	; 0x90
   1f068:	str	r3, [r2, #8]
   1f06c:	b	1ec30 <_start@@Base+0x9410>
   1f070:	strd	r8, [sp, #88]	; 0x58
   1f074:	ldr	r9, [sp, #100]	; 0x64
   1f078:	b	1c784 <_start@@Base+0x6f64>
   1f07c:	mov	r1, r0
   1f080:	mov	r3, #8
   1f084:	mov	r2, fp
   1f088:	mov	r0, sl
   1f08c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1f090:	mov	r4, r0
   1f094:	b	1efc0 <_start@@Base+0x97a0>
   1f098:	ldr	r3, [pc, #-604]	; 1ee44 <_start@@Base+0x9624>
   1f09c:	mov	r1, r0
   1f0a0:	add	r3, pc, r3
   1f0a4:	str	r6, [sp]
   1f0a8:	add	r3, r3, #220	; 0xdc
   1f0ac:	mov	r2, fp
   1f0b0:	mov	r0, sl
   1f0b4:	bl	189bc <_start@@Base+0x319c>
   1f0b8:	cmp	fp, r0
   1f0bc:	cmpne	r4, r0
   1f0c0:	beq	2051c <_start@@Base+0xacfc>
   1f0c4:	mov	r4, r0
   1f0c8:	b	1ed90 <_start@@Base+0x9570>
   1f0cc:	ldr	r3, [pc, #-652]	; 1ee48 <_start@@Base+0x9628>
   1f0d0:	add	r2, sp, #132	; 0x84
   1f0d4:	add	r3, pc, r3
   1f0d8:	str	r2, [sp]
   1f0dc:	add	r3, r3, #204	; 0xcc
   1f0e0:	mov	r2, fp
   1f0e4:	mov	r1, r5
   1f0e8:	mov	r0, sl
   1f0ec:	bl	19350 <_start@@Base+0x3b30>
   1f0f0:	cmp	fp, r0
   1f0f4:	cmpne	r0, r5
   1f0f8:	mov	r4, r0
   1f0fc:	bne	1efc8 <_start@@Base+0x97a8>
   1f100:	strd	r8, [sp, #88]	; 0x58
   1f104:	ldr	r9, [sp, #100]	; 0x64
   1f108:	mov	r1, r4
   1f10c:	mov	r3, #33	; 0x21
   1f110:	mov	r2, fp
   1f114:	mov	r0, sl
   1f118:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1f11c:	mov	r7, r0
   1f120:	b	1c784 <_start@@Base+0x6f64>
   1f124:	mov	r4, r0
   1f128:	ldr	r3, [pc, #-740]	; 1ee4c <_start@@Base+0x962c>
   1f12c:	add	r2, sp, #136	; 0x88
   1f130:	add	r3, pc, r3
   1f134:	str	r2, [sp]
   1f138:	add	r3, r3, #140	; 0x8c
   1f13c:	mov	r2, fp
   1f140:	mov	r1, r4
   1f144:	mov	r0, sl
   1f148:	bl	19350 <_start@@Base+0x3b30>
   1f14c:	cmp	fp, r0
   1f150:	cmpne	r0, r4
   1f154:	mov	r7, r0
   1f158:	bne	1d63c <_start@@Base+0x7e1c>
   1f15c:	b	1d17c <_start@@Base+0x795c>
   1f160:	add	r4, r7, #16
   1f164:	mov	r0, r4
   1f168:	mov	r1, fp
   1f16c:	bl	15948 <_start@@Base+0x128>
   1f170:	mov	r0, #0
   1f174:	and	r1, r1, #-16777216	; 0xff000000
   1f178:	cmp	r1, #1929379840	; 0x73000000
   1f17c:	cmpeq	r0, #0
   1f180:	bne	1f560 <_start@@Base+0x9d40>
   1f184:	sub	r3, fp, r4
   1f188:	cmp	r3, #1
   1f18c:	ble	204c4 <_start@@Base+0xaca4>
   1f190:	mov	r3, #1
   1f194:	mov	r2, fp
   1f198:	mov	r1, r4
   1f19c:	mov	r0, sl
   1f1a0:	bl	18678 <_start@@Base+0x2e58>
   1f1a4:	cmp	r4, r0
   1f1a8:	mov	r7, r0
   1f1ac:	beq	204c0 <_start@@Base+0xaca0>
   1f1b0:	mov	r2, #8
   1f1b4:	mov	r1, r2
   1f1b8:	mvn	r3, #-536870912	; 0xe0000000
   1f1bc:	ldr	r0, [sl]
   1f1c0:	bl	27d58 <flatcc_builder_start_vector@@Base>
   1f1c4:	cmp	r0, #0
   1f1c8:	bne	1d17c <_start@@Base+0x795c>
   1f1cc:	mov	r1, r7
   1f1d0:	mov	r3, r9
   1f1d4:	mov	r2, fp
   1f1d8:	mov	r0, sl
   1f1dc:	bl	18908 <_start@@Base+0x30e8>
   1f1e0:	ldr	r3, [sp, #120]	; 0x78
   1f1e4:	cmp	r3, #0
   1f1e8:	mov	r7, r0
   1f1ec:	beq	1ff54 <_start@@Base+0xa734>
   1f1f0:	ldr	r8, [pc, #-936]	; 1ee50 <_start@@Base+0x9630>
   1f1f4:	vldr	d8, [pc, #972]	; 1f5c8 <_start@@Base+0x9da8>
   1f1f8:	add	r8, pc, r8
   1f1fc:	add	r8, r8, #500	; 0x1f4
   1f200:	mov	r6, #1
   1f204:	add	r5, sp, #144	; 0x90
   1f208:	b	1f238 <_start@@Base+0x9a18>
   1f20c:	vldr	d7, [sp, #144]	; 0x90
   1f210:	mov	r1, r0
   1f214:	mov	r3, r9
   1f218:	mov	r2, fp
   1f21c:	vstr	d7, [r4]
   1f220:	mov	r0, sl
   1f224:	bl	1a548 <_start@@Base+0x4d28>
   1f228:	ldr	r3, [sp, #120]	; 0x78
   1f22c:	cmp	r3, #0
   1f230:	mov	r7, r0
   1f234:	beq	1ff54 <_start@@Base+0xa734>
   1f238:	mov	r1, r6
   1f23c:	ldr	r0, [sl]
   1f240:	vstr	d8, [sp, #144]	; 0x90
   1f244:	bl	27504 <flatcc_builder_extend_vector@@Base>
   1f248:	mov	r1, r7
   1f24c:	mov	r3, r5
   1f250:	mov	r2, fp
   1f254:	subs	r4, r0, #0
   1f258:	mov	r0, sl
   1f25c:	beq	1d17c <_start@@Base+0x795c>
   1f260:	bl	2e1f8 <flatcc_json_parser_double@@Base>
   1f264:	cmp	r0, r7
   1f268:	bne	1f20c <_start@@Base+0x99ec>
   1f26c:	str	r5, [sp]
   1f270:	mov	r3, r8
   1f274:	mov	r2, fp
   1f278:	mov	r1, r7
   1f27c:	mov	r0, sl
   1f280:	bl	189bc <_start@@Base+0x319c>
   1f284:	cmp	fp, r0
   1f288:	cmpne	r0, r7
   1f28c:	bne	1f20c <_start@@Base+0x99ec>
   1f290:	mov	r9, fp
   1f294:	b	1c7e4 <_start@@Base+0x6fc4>
   1f298:	mov	r3, #0
   1f29c:	strb	r3, [sp, #136]	; 0x88
   1f2a0:	ldr	r3, [pc, #812]	; 1f5d4 <_start@@Base+0x9db4>
   1f2a4:	add	r2, sp, #136	; 0x88
   1f2a8:	add	r3, pc, r3
   1f2ac:	str	r2, [sp]
   1f2b0:	add	r3, r3, #320	; 0x140
   1f2b4:	mov	r2, fp
   1f2b8:	mov	r1, r4
   1f2bc:	mov	r0, sl
   1f2c0:	bl	18b78 <_start@@Base+0x3358>
   1f2c4:	cmp	fp, r0
   1f2c8:	cmpne	r0, r4
   1f2cc:	mov	r7, r0
   1f2d0:	beq	1d17c <_start@@Base+0x795c>
   1f2d4:	ldrb	r3, [sp, #136]	; 0x88
   1f2d8:	b	1e62c <_start@@Base+0x8e0c>
   1f2dc:	mov	r1, r4
   1f2e0:	mov	r2, fp
   1f2e4:	mov	r0, sl
   1f2e8:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f2ec:	mov	r7, r0
   1f2f0:	b	1c784 <_start@@Base+0x6f64>
   1f2f4:	mov	r3, #1
   1f2f8:	add	r7, r4, #4
   1f2fc:	strb	r3, [sp, #136]	; 0x88
   1f300:	b	1e634 <_start@@Base+0x8e14>
   1f304:	mov	r4, r0
   1f308:	add	r3, sp, #118	; 0x76
   1f30c:	str	r3, [sp]
   1f310:	mov	r2, fp
   1f314:	ldr	r3, [sp, #72]	; 0x48
   1f318:	mov	r1, r4
   1f31c:	mov	r0, sl
   1f320:	bl	18d4c <_start@@Base+0x352c>
   1f324:	cmp	fp, r0
   1f328:	cmpne	r0, r4
   1f32c:	mov	r7, r0
   1f330:	beq	1e810 <_start@@Base+0x8ff0>
   1f334:	ldrh	r2, [sp, #118]	; 0x76
   1f338:	b	1e120 <_start@@Base+0x8900>
   1f33c:	mov	r3, #5
   1f340:	mov	r2, fp
   1f344:	mov	r1, r7
   1f348:	mov	r0, sl
   1f34c:	bl	18678 <_start@@Base+0x2e58>
   1f350:	cmp	r0, r7
   1f354:	mov	r5, r0
   1f358:	beq	1cbe8 <_start@@Base+0x73c8>
   1f35c:	add	r4, sp, #152	; 0x98
   1f360:	mov	r3, #0
   1f364:	mov	r1, r0
   1f368:	str	r3, [r4, #-8]!
   1f36c:	mov	r2, fp
   1f370:	mov	r0, sl
   1f374:	mov	r3, r4
   1f378:	bl	2e2c8 <flatcc_json_parser_float@@Base>
   1f37c:	cmp	r0, r5
   1f380:	mov	r7, r0
   1f384:	beq	20014 <_start@@Base+0xa7f4>
   1f388:	vldr	s15, [pc, #576]	; 1f5d0 <_start@@Base+0x9db0>
   1f38c:	vldr	s14, [sp, #144]	; 0x90
   1f390:	vcmp.f32	s14, s15
   1f394:	vmrs	APSR_nzcv, fpscr
   1f398:	bne	1f3a8 <_start@@Base+0x9b88>
   1f39c:	ldr	r3, [sl, #8]
   1f3a0:	tst	r3, #2
   1f3a4:	beq	1c784 <_start@@Base+0x6f64>
   1f3a8:	mov	r3, #4
   1f3ac:	mov	r2, r3
   1f3b0:	mov	r1, #25
   1f3b4:	ldr	r0, [sl]
   1f3b8:	bl	299f8 <flatcc_builder_table_add@@Base>
   1f3bc:	cmp	r0, #0
   1f3c0:	beq	1d17c <_start@@Base+0x795c>
   1f3c4:	ldr	r3, [sp, #144]	; 0x90
   1f3c8:	str	r3, [r0]
   1f3cc:	b	1c784 <_start@@Base+0x6f64>
   1f3d0:	mov	r1, r7
   1f3d4:	mov	r2, fp
   1f3d8:	mov	r0, sl
   1f3dc:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f3e0:	mov	r7, r0
   1f3e4:	b	1c784 <_start@@Base+0x6f64>
   1f3e8:	mov	r1, r4
   1f3ec:	mov	r2, fp
   1f3f0:	mov	r0, sl
   1f3f4:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f3f8:	mov	r7, r0
   1f3fc:	b	1c784 <_start@@Base+0x6f64>
   1f400:	mov	r1, r7
   1f404:	mov	r2, fp
   1f408:	mov	r0, sl
   1f40c:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f410:	mov	r7, r0
   1f414:	b	1c784 <_start@@Base+0x6f64>
   1f418:	mov	r1, r0
   1f41c:	mov	r3, #8
   1f420:	mov	r2, fp
   1f424:	mov	r0, sl
   1f428:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1f42c:	mov	r7, r0
   1f430:	cmp	r4, r7
   1f434:	bne	1f334 <_start@@Base+0x9b14>
   1f438:	b	1f308 <_start@@Base+0x9ae8>
   1f43c:	ldr	r3, [pc, #404]	; 1f5d8 <_start@@Base+0x9db8>
   1f440:	mov	r1, r0
   1f444:	add	r3, pc, r3
   1f448:	str	r4, [sp]
   1f44c:	add	r3, r3, #380	; 0x17c
   1f450:	mov	r2, fp
   1f454:	mov	r0, sl
   1f458:	bl	18750 <_start@@Base+0x2f30>
   1f45c:	cmp	fp, r0
   1f460:	cmpne	r7, r0
   1f464:	beq	1f290 <_start@@Base+0x9a70>
   1f468:	mov	r7, r0
   1f46c:	b	1d02c <_start@@Base+0x780c>
   1f470:	mov	r1, r4
   1f474:	mov	r2, fp
   1f478:	mov	r0, sl
   1f47c:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f480:	mov	r7, r0
   1f484:	b	1c784 <_start@@Base+0x6f64>
   1f488:	ldr	r0, [sl]
   1f48c:	bl	28cf4 <flatcc_builder_end_vector@@Base>
   1f490:	cmp	r0, #0
   1f494:	str	r0, [sp, #124]	; 0x7c
   1f498:	beq	1d17c <_start@@Base+0x795c>
   1f49c:	mov	r1, #24
   1f4a0:	ldr	r0, [sl]
   1f4a4:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   1f4a8:	cmp	r0, #0
   1f4ac:	beq	1d17c <_start@@Base+0x795c>
   1f4b0:	ldr	r3, [sp, #124]	; 0x7c
   1f4b4:	str	r3, [r0]
   1f4b8:	b	1c784 <_start@@Base+0x6f64>
   1f4bc:	mov	r3, #4
   1f4c0:	mov	r2, fp
   1f4c4:	mov	r1, r7
   1f4c8:	mov	r0, sl
   1f4cc:	bl	18678 <_start@@Base+0x2e58>
   1f4d0:	cmp	r0, r7
   1f4d4:	mov	r5, r0
   1f4d8:	beq	1d650 <_start@@Base+0x7e30>
   1f4dc:	add	r4, sp, #152	; 0x98
   1f4e0:	mov	r3, #0
   1f4e4:	strh	r3, [r4, #-8]!
   1f4e8:	mov	r1, r0
   1f4ec:	mov	r2, fp
   1f4f0:	mov	r3, r4
   1f4f4:	mov	r0, sl
   1f4f8:	bl	184c0 <_start@@Base+0x2ca0>
   1f4fc:	cmp	r0, r5
   1f500:	mov	r7, r0
   1f504:	beq	20430 <_start@@Base+0xac10>
   1f508:	ldrsh	r3, [sp, #144]	; 0x90
   1f50c:	cmp	r3, #150	; 0x96
   1f510:	bne	1f520 <_start@@Base+0x9d00>
   1f514:	ldr	r3, [sl, #8]
   1f518:	tst	r3, #2
   1f51c:	beq	1c784 <_start@@Base+0x6f64>
   1f520:	mov	r3, #2
   1f524:	mov	r2, r3
   1f528:	mov	r1, #1
   1f52c:	ldr	r0, [sl]
   1f530:	bl	299f8 <flatcc_builder_table_add@@Base>
   1f534:	cmp	r0, #0
   1f538:	beq	1d17c <_start@@Base+0x795c>
   1f53c:	ldrsh	r3, [sp, #144]	; 0x90
   1f540:	strh	r3, [r0]
   1f544:	b	1c784 <_start@@Base+0x6f64>
   1f548:	mov	r1, r7
   1f54c:	mov	r2, fp
   1f550:	mov	r0, sl
   1f554:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f558:	mov	r7, r0
   1f55c:	b	1c784 <_start@@Base+0x6f64>
   1f560:	mov	r1, r4
   1f564:	mov	r2, fp
   1f568:	mov	r0, sl
   1f56c:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f570:	mov	r7, r0
   1f574:	b	1c784 <_start@@Base+0x6f64>
   1f578:	ldr	r3, [pc, #92]	; 1f5dc <_start@@Base+0x9dbc>
   1f57c:	mov	r1, r0
   1f580:	add	r3, pc, r3
   1f584:	str	r6, [sp]
   1f588:	add	r3, r3, #232	; 0xe8
   1f58c:	mov	r2, fp
   1f590:	mov	r0, sl
   1f594:	bl	18750 <_start@@Base+0x2f30>
   1f598:	cmp	fp, r0
   1f59c:	cmpne	r4, r0
   1f5a0:	beq	2051c <_start@@Base+0xacfc>
   1f5a4:	mov	r4, r0
   1f5a8:	b	1ee08 <_start@@Base+0x95e8>
   1f5ac:	mov	r1, r7
   1f5b0:	mov	r3, #7
   1f5b4:	mov	r2, fp
   1f5b8:	mov	r0, sl
   1f5bc:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1f5c0:	mov	r7, r0
   1f5c4:	b	1f430 <_start@@Base+0x9c10>
	...
   1f5d0:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   1f5d4:	ldrdeq	r5, [r3], -r8
   1f5d8:	andeq	r5, r3, ip, lsr ip
   1f5dc:	andeq	r5, r3, r0, lsl #22
   1f5e0:	andeq	r5, r3, ip, ror #15
   1f5e4:	andeq	r5, r3, r8, lsl #13
   1f5e8:	andeq	r5, r3, r4, lsl #13
   1f5ec:	ldr	r3, [sl, #24]
   1f5f0:	cmp	r3, #0
   1f5f4:	bne	1e810 <_start@@Base+0x8ff0>
   1f5f8:	ldr	r0, [sl]
   1f5fc:	bl	289ac <flatcc_builder_end_table@@Base>
   1f600:	cmp	r0, #0
   1f604:	str	r0, [sp, #124]	; 0x7c
   1f608:	beq	1e810 <_start@@Base+0x8ff0>
   1f60c:	b	1e834 <_start@@Base+0x9014>
   1f610:	ldr	r3, [sp, #128]	; 0x80
   1f614:	mov	r2, r9
   1f618:	mov	r0, sl
   1f61c:	bl	2f710 <flatcc_json_parser_finalize_unions@@Base>
   1f620:	mov	fp, r0
   1f624:	ldr	r0, [sl]
   1f628:	bl	289ac <flatcc_builder_end_table@@Base>
   1f62c:	ldr	r3, [sp, #76]	; 0x4c
   1f630:	cmp	r0, #0
   1f634:	str	r0, [r3]
   1f638:	beq	1c7e8 <_start@@Base+0x6fc8>
   1f63c:	mov	r0, fp
   1f640:	b	1c7fc <_start@@Base+0x6fdc>
   1f644:	ldr	r9, [sp, #56]	; 0x38
   1f648:	ldr	r3, [sl, #24]
   1f64c:	cmp	r3, #0
   1f650:	bne	1e014 <_start@@Base+0x87f4>
   1f654:	ldr	r0, [sl]
   1f658:	bl	289ac <flatcc_builder_end_table@@Base>
   1f65c:	cmp	r0, #0
   1f660:	str	r0, [sp, #124]	; 0x7c
   1f664:	beq	1e014 <_start@@Base+0x87f4>
   1f668:	b	1e038 <_start@@Base+0x8818>
   1f66c:	sub	r3, fp, r4
   1f670:	cmp	r3, #2
   1f674:	bgt	2021c <_start@@Base+0xa9fc>
   1f678:	mov	r1, r4
   1f67c:	mov	r2, fp
   1f680:	mov	r0, sl
   1f684:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f688:	mov	r7, r0
   1f68c:	b	1c784 <_start@@Base+0x6f64>
   1f690:	mov	r3, #8
   1f694:	mov	r2, fp
   1f698:	mov	r1, r7
   1f69c:	mov	r0, sl
   1f6a0:	bl	18678 <_start@@Base+0x2e58>
   1f6a4:	cmp	r7, r0
   1f6a8:	mov	r4, r0
   1f6ac:	beq	1d9ac <_start@@Base+0x818c>
   1f6b0:	add	r5, sp, #152	; 0x98
   1f6b4:	mov	r3, #0
   1f6b8:	str	r3, [r5, #-8]!
   1f6bc:	mov	r1, r0
   1f6c0:	mov	r2, fp
   1f6c4:	mov	r3, r5
   1f6c8:	mov	r0, sl
   1f6cc:	bl	183f8 <_start@@Base+0x2bd8>
   1f6d0:	cmp	r0, r4
   1f6d4:	mov	r7, r0
   1f6d8:	beq	204dc <_start@@Base+0xacbc>
   1f6dc:	ldr	r3, [sp, #144]	; 0x90
   1f6e0:	cmp	r3, #0
   1f6e4:	bne	1f6f4 <_start@@Base+0x9ed4>
   1f6e8:	ldr	r3, [sl, #8]
   1f6ec:	tst	r3, #2
   1f6f0:	beq	1c784 <_start@@Base+0x6f64>
   1f6f4:	mov	r3, #4
   1f6f8:	mov	r2, r3
   1f6fc:	mov	r1, #16
   1f700:	ldr	r0, [sl]
   1f704:	bl	299f8 <flatcc_builder_table_add@@Base>
   1f708:	cmp	r0, #0
   1f70c:	beq	2071c <_start@@Base+0xaefc>
   1f710:	ldr	r3, [sp, #144]	; 0x90
   1f714:	str	r3, [r0]
   1f718:	b	1c784 <_start@@Base+0x6f64>
   1f71c:	mov	r1, r0
   1f720:	mov	r3, #7
   1f724:	mov	r2, fp
   1f728:	mov	r0, sl
   1f72c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1f730:	mov	r7, r0
   1f734:	b	1d634 <_start@@Base+0x7e14>
   1f738:	sub	r3, fp, r7
   1f73c:	cmp	r3, #8
   1f740:	bgt	20190 <_start@@Base+0xa970>
   1f744:	add	r7, r7, #8
   1f748:	mov	r0, r7
   1f74c:	mov	r1, fp
   1f750:	bl	15948 <_start@@Base+0x128>
   1f754:	mov	r0, #0
   1f758:	and	r1, r1, #-16777216	; 0xff000000
   1f75c:	cmp	r1, #1627389952	; 0x61000000
   1f760:	cmpeq	r0, #0
   1f764:	bne	204a8 <_start@@Base+0xac88>
   1f768:	sub	r3, fp, r7
   1f76c:	cmp	r3, #1
   1f770:	ble	205b0 <_start@@Base+0xad90>
   1f774:	mov	r3, #1
   1f778:	mov	r2, fp
   1f77c:	mov	r1, r7
   1f780:	mov	r0, sl
   1f784:	bl	18678 <_start@@Base+0x2e58>
   1f788:	cmp	r7, r0
   1f78c:	mov	r4, r0
   1f790:	beq	205b4 <_start@@Base+0xad94>
   1f794:	add	r5, sp, #152	; 0x98
   1f798:	mov	r3, #0
   1f79c:	str	r3, [r5, #-8]!
   1f7a0:	mov	r1, r0
   1f7a4:	mov	r2, fp
   1f7a8:	mov	r3, r5
   1f7ac:	mov	r0, sl
   1f7b0:	bl	18288 <_start@@Base+0x2a68>
   1f7b4:	cmp	r0, r4
   1f7b8:	mov	r7, r0
   1f7bc:	beq	20668 <_start@@Base+0xae48>
   1f7c0:	ldr	r3, [sp, #144]	; 0x90
   1f7c4:	cmp	r3, #0
   1f7c8:	bne	1f7d8 <_start@@Base+0x9fb8>
   1f7cc:	ldr	r3, [sl, #8]
   1f7d0:	tst	r3, #2
   1f7d4:	beq	1c784 <_start@@Base+0x6f64>
   1f7d8:	mov	r3, #4
   1f7dc:	mov	r2, r3
   1f7e0:	mov	r1, #21
   1f7e4:	ldr	r0, [sl]
   1f7e8:	bl	299f8 <flatcc_builder_table_add@@Base>
   1f7ec:	cmp	r0, #0
   1f7f0:	beq	2071c <_start@@Base+0xaefc>
   1f7f4:	ldr	r3, [sp, #144]	; 0x90
   1f7f8:	str	r3, [r0]
   1f7fc:	b	1c784 <_start@@Base+0x6f64>
   1f800:	mov	r1, r0
   1f804:	str	r6, [sp]
   1f808:	ldr	r3, [sp, #104]	; 0x68
   1f80c:	mov	r2, fp
   1f810:	mov	r0, sl
   1f814:	bl	18750 <_start@@Base+0x2f30>
   1f818:	cmp	fp, r0
   1f81c:	cmpne	r4, r0
   1f820:	beq	2051c <_start@@Base+0xacfc>
   1f824:	mov	r4, r0
   1f828:	b	1ef64 <_start@@Base+0x9744>
   1f82c:	mov	r3, #7
   1f830:	mov	r2, fp
   1f834:	mov	r1, r4
   1f838:	mov	r0, sl
   1f83c:	bl	18678 <_start@@Base+0x2e58>
   1f840:	cmp	r4, r0
   1f844:	mov	r7, r0
   1f848:	beq	206d0 <_start@@Base+0xaeb0>
   1f84c:	mov	r2, #8
   1f850:	mov	r1, r2
   1f854:	mvn	r3, #-536870912	; 0xe0000000
   1f858:	ldr	r0, [sl]
   1f85c:	bl	27d58 <flatcc_builder_start_vector@@Base>
   1f860:	cmp	r0, #0
   1f864:	bne	1d17c <_start@@Base+0x795c>
   1f868:	mov	r1, r7
   1f86c:	mov	r3, r9
   1f870:	mov	r2, fp
   1f874:	mov	r0, sl
   1f878:	bl	18908 <_start@@Base+0x30e8>
   1f87c:	ldr	r3, [sp, #120]	; 0x78
   1f880:	cmp	r3, #0
   1f884:	mov	r7, r0
   1f888:	beq	1f930 <_start@@Base+0xa110>
   1f88c:	ldr	r3, [pc, #-692]	; 1f5e0 <_start@@Base+0x9dc0>
   1f890:	add	r5, sp, #144	; 0x90
   1f894:	add	r3, pc, r3
   1f898:	add	r8, r3, #512	; 0x200
   1f89c:	b	1f8cc <_start@@Base+0xa0ac>
   1f8a0:	ldrd	r6, [sp, #144]	; 0x90
   1f8a4:	mov	r1, r0
   1f8a8:	mov	r3, r9
   1f8ac:	strd	r6, [r4]
   1f8b0:	mov	r2, fp
   1f8b4:	mov	r0, sl
   1f8b8:	bl	1a548 <_start@@Base+0x4d28>
   1f8bc:	ldr	r3, [sp, #120]	; 0x78
   1f8c0:	cmp	r3, #0
   1f8c4:	mov	r7, r0
   1f8c8:	beq	1f930 <_start@@Base+0xa110>
   1f8cc:	mov	r2, #0
   1f8d0:	mov	r3, #0
   1f8d4:	mov	r1, #1
   1f8d8:	ldr	r0, [sl]
   1f8dc:	strd	r2, [sp, #144]	; 0x90
   1f8e0:	bl	27504 <flatcc_builder_extend_vector@@Base>
   1f8e4:	mov	r1, r7
   1f8e8:	mov	r3, r5
   1f8ec:	mov	r2, fp
   1f8f0:	subs	r4, r0, #0
   1f8f4:	mov	r0, sl
   1f8f8:	beq	1d17c <_start@@Base+0x795c>
   1f8fc:	bl	1812c <_start@@Base+0x290c>
   1f900:	cmp	r0, r7
   1f904:	bne	1f8a0 <_start@@Base+0xa080>
   1f908:	str	r5, [sp]
   1f90c:	mov	r3, r8
   1f910:	mov	r2, fp
   1f914:	mov	r1, r7
   1f918:	mov	r0, sl
   1f91c:	bl	1995c <_start@@Base+0x413c>
   1f920:	cmp	fp, r0
   1f924:	cmpne	r0, r7
   1f928:	bne	1f8a0 <_start@@Base+0xa080>
   1f92c:	b	1f290 <_start@@Base+0x9a70>
   1f930:	ldr	r0, [sl]
   1f934:	bl	28cf4 <flatcc_builder_end_vector@@Base>
   1f938:	cmp	r0, #0
   1f93c:	str	r0, [sp, #124]	; 0x7c
   1f940:	beq	1d17c <_start@@Base+0x795c>
   1f944:	mov	r1, #32
   1f948:	ldr	r0, [sl]
   1f94c:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   1f950:	cmp	r0, #0
   1f954:	beq	1d17c <_start@@Base+0x795c>
   1f958:	ldr	r3, [sp, #124]	; 0x7c
   1f95c:	str	r3, [r0]
   1f960:	b	1c784 <_start@@Base+0x6f64>
   1f964:	mov	r1, r0
   1f968:	mov	r3, #8
   1f96c:	mov	r2, fp
   1f970:	mov	r0, sl
   1f974:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1f978:	mov	r7, r0
   1f97c:	mov	r3, #0
   1f980:	cmp	r4, r7
   1f984:	strb	r3, [sp, #136]	; 0x88
   1f988:	bne	1e640 <_start@@Base+0x8e20>
   1f98c:	b	1f2a0 <_start@@Base+0x9a80>
   1f990:	mov	r3, #7
   1f994:	mov	r2, fp
   1f998:	mov	r1, r4
   1f99c:	mov	r0, sl
   1f9a0:	bl	18678 <_start@@Base+0x2e58>
   1f9a4:	cmp	r4, r0
   1f9a8:	mov	r7, r0
   1f9ac:	beq	2069c <_start@@Base+0xae7c>
   1f9b0:	mvn	r3, #-536870912	; 0xe0000000
   1f9b4:	mov	r2, #4
   1f9b8:	mov	r1, #8
   1f9bc:	ldr	r0, [sl]
   1f9c0:	bl	27d58 <flatcc_builder_start_vector@@Base>
   1f9c4:	cmp	r0, #0
   1f9c8:	bne	1d17c <_start@@Base+0x795c>
   1f9cc:	mov	r1, r7
   1f9d0:	mov	r3, r9
   1f9d4:	mov	r2, fp
   1f9d8:	mov	r0, sl
   1f9dc:	bl	18908 <_start@@Base+0x30e8>
   1f9e0:	ldr	r3, [sp, #120]	; 0x78
   1f9e4:	cmp	r3, #0
   1f9e8:	mov	r7, r0
   1f9ec:	beq	1fc68 <_start@@Base+0xa448>
   1f9f0:	ldr	r2, [pc, #-1044]	; 1f5e4 <_start@@Base+0x9dc4>
   1f9f4:	ldr	r3, [pc, #-1044]	; 1f5e8 <_start@@Base+0x9dc8>
   1f9f8:	add	r2, pc, r2
   1f9fc:	add	r3, pc, r3
   1fa00:	mov	r8, #1
   1fa04:	add	r2, r2, #308	; 0x134
   1fa08:	add	r3, r3, #296	; 0x128
   1fa0c:	str	r2, [sp, #100]	; 0x64
   1fa10:	str	r3, [sp, #104]	; 0x68
   1fa14:	str	r9, [sp, #72]	; 0x48
   1fa18:	mov	r1, r8
   1fa1c:	ldr	r0, [sl]
   1fa20:	bl	27504 <flatcc_builder_extend_vector@@Base>
   1fa24:	subs	r3, r0, #0
   1fa28:	str	r3, [sp, #56]	; 0x38
   1fa2c:	beq	1d17c <_start@@Base+0x795c>
   1fa30:	add	r9, sp, #140	; 0x8c
   1fa34:	mov	r3, r9
   1fa38:	mov	r1, r7
   1fa3c:	mov	r2, fp
   1fa40:	mov	r0, sl
   1fa44:	bl	185c4 <_start@@Base+0x2da4>
   1fa48:	ldr	r3, [sp, #140]	; 0x8c
   1fa4c:	cmp	r3, #0
   1fa50:	mov	r4, r0
   1fa54:	bne	1fab4 <_start@@Base+0xa294>
   1fa58:	b	1fc40 <_start@@Base+0xa420>
   1fa5c:	add	r3, pc, #844	; 0x34c
   1fa60:	ldrd	r2, [r3]
   1fa64:	cmp	r1, r3
   1fa68:	cmpeq	r0, r2
   1fa6c:	bne	1fa7c <_start@@Base+0xa25c>
   1fa70:	sub	r3, fp, r4
   1fa74:	cmp	r3, #8
   1fa78:	bgt	1fb78 <_start@@Base+0xa358>
   1fa7c:	mov	r1, r4
   1fa80:	mov	r2, fp
   1fa84:	mov	r0, sl
   1fa88:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1fa8c:	mov	r4, r0
   1fa90:	mov	r1, r4
   1fa94:	mov	r3, r9
   1fa98:	mov	r2, fp
   1fa9c:	mov	r0, sl
   1faa0:	bl	1a6cc <_start@@Base+0x4eac>
   1faa4:	ldr	r3, [sp, #140]	; 0x8c
   1faa8:	cmp	r3, #0
   1faac:	mov	r4, r0
   1fab0:	beq	1fc40 <_start@@Base+0xa420>
   1fab4:	cmp	fp, r4
   1fab8:	beq	1fbd4 <_start@@Base+0xa3b4>
   1fabc:	ldrb	r3, [r4]
   1fac0:	cmp	r3, #34	; 0x22
   1fac4:	moveq	r3, #0
   1fac8:	addeq	r4, r4, #1
   1facc:	streq	r3, [sl, #12]
   1fad0:	beq	1fae0 <_start@@Base+0xa2c0>
   1fad4:	cmp	r3, #46	; 0x2e
   1fad8:	strne	r8, [sl, #12]
   1fadc:	beq	1fc0c <_start@@Base+0xa3ec>
   1fae0:	mov	r1, fp
   1fae4:	mov	r0, r4
   1fae8:	bl	15948 <_start@@Base+0x128>
   1faec:	ldr	r3, [pc, #708]	; 1fdb8 <_start@@Base+0xa598>
   1faf0:	ldr	r7, [pc, #708]	; 1fdbc <_start@@Base+0xa59c>
   1faf4:	mov	r2, #0
   1faf8:	mov	r6, #0
   1fafc:	and	r3, r3, r1
   1fb00:	and	r2, r2, r0
   1fb04:	cmp	r3, r7
   1fb08:	cmpeq	r2, r6
   1fb0c:	bne	1fa5c <_start@@Base+0xa23c>
   1fb10:	sub	r3, fp, r4
   1fb14:	cmp	r3, #2
   1fb18:	ble	1fa7c <_start@@Base+0xa25c>
   1fb1c:	mov	r3, #2
   1fb20:	mov	r2, fp
   1fb24:	mov	r1, r4
   1fb28:	mov	r0, sl
   1fb2c:	bl	18678 <_start@@Base+0x2e58>
   1fb30:	cmp	r0, r4
   1fb34:	mov	r5, r0
   1fb38:	beq	1fa7c <_start@@Base+0xa25c>
   1fb3c:	add	r6, sp, #152	; 0x98
   1fb40:	mov	r3, #0
   1fb44:	str	r3, [r6, #-8]!
   1fb48:	mov	r1, r0
   1fb4c:	mov	r2, fp
   1fb50:	mov	r3, r6
   1fb54:	mov	r0, sl
   1fb58:	bl	18288 <_start@@Base+0x2a68>
   1fb5c:	cmp	r5, r0
   1fb60:	mov	r4, r0
   1fb64:	beq	1fcc8 <_start@@Base+0xa4a8>
   1fb68:	ldr	r2, [sp, #56]	; 0x38
   1fb6c:	ldr	r3, [sp, #144]	; 0x90
   1fb70:	str	r3, [r2]
   1fb74:	b	1fa90 <_start@@Base+0xa270>
   1fb78:	mov	r3, #8
   1fb7c:	mov	r2, fp
   1fb80:	mov	r1, r4
   1fb84:	mov	r0, sl
   1fb88:	bl	18678 <_start@@Base+0x2e58>
   1fb8c:	cmp	r4, r0
   1fb90:	mov	r5, r0
   1fb94:	beq	1fa7c <_start@@Base+0xa25c>
   1fb98:	add	r6, sp, #152	; 0x98
   1fb9c:	mov	r3, #0
   1fba0:	str	r3, [r6, #-8]!
   1fba4:	mov	r1, r0
   1fba8:	mov	r2, fp
   1fbac:	mov	r3, r6
   1fbb0:	mov	r0, sl
   1fbb4:	bl	18288 <_start@@Base+0x2a68>
   1fbb8:	cmp	r5, r0
   1fbbc:	mov	r4, r0
   1fbc0:	beq	1fc9c <_start@@Base+0xa47c>
   1fbc4:	ldr	r2, [sp, #56]	; 0x38
   1fbc8:	ldr	r3, [sp, #144]	; 0x90
   1fbcc:	str	r3, [r2, #4]
   1fbd0:	b	1fa90 <_start@@Base+0xa270>
   1fbd4:	mov	r1, fp
   1fbd8:	mov	r0, fp
   1fbdc:	bl	15948 <_start@@Base+0x128>
   1fbe0:	ldr	r3, [pc, #464]	; 1fdb8 <_start@@Base+0xa598>
   1fbe4:	ldr	r5, [pc, #464]	; 1fdbc <_start@@Base+0xa59c>
   1fbe8:	mov	r2, #0
   1fbec:	mov	r4, #0
   1fbf0:	and	r3, r3, r1
   1fbf4:	and	r2, r2, r0
   1fbf8:	cmp	r3, r5
   1fbfc:	cmpeq	r2, r4
   1fc00:	mov	r4, fp
   1fc04:	bne	1fa5c <_start@@Base+0xa23c>
   1fc08:	b	1fa7c <_start@@Base+0xa25c>
   1fc0c:	mov	r1, r4
   1fc10:	mov	r3, #5
   1fc14:	mov	r2, fp
   1fc18:	mov	r0, sl
   1fc1c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1fc20:	mov	r4, r0
   1fc24:	b	1fae0 <_start@@Base+0xa2c0>
   1fc28:	mov	r1, r0
   1fc2c:	mov	r3, #33	; 0x21
   1fc30:	mov	r2, fp
   1fc34:	mov	r0, sl
   1fc38:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1fc3c:	mov	r4, r0
   1fc40:	ldr	r3, [sp, #72]	; 0x48
   1fc44:	mov	r1, r4
   1fc48:	mov	r2, fp
   1fc4c:	mov	r0, sl
   1fc50:	bl	1a548 <_start@@Base+0x4d28>
   1fc54:	ldr	r3, [sp, #120]	; 0x78
   1fc58:	cmp	r3, #0
   1fc5c:	mov	r7, r0
   1fc60:	bne	1fa18 <_start@@Base+0xa1f8>
   1fc64:	ldr	r9, [sp, #72]	; 0x48
   1fc68:	ldr	r0, [sl]
   1fc6c:	bl	28cf4 <flatcc_builder_end_vector@@Base>
   1fc70:	cmp	r0, #0
   1fc74:	str	r0, [sp, #124]	; 0x7c
   1fc78:	beq	1d17c <_start@@Base+0x795c>
   1fc7c:	mov	r1, #29
   1fc80:	ldr	r0, [sl]
   1fc84:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   1fc88:	cmp	r0, #0
   1fc8c:	beq	1d17c <_start@@Base+0x795c>
   1fc90:	ldr	r3, [sp, #124]	; 0x7c
   1fc94:	str	r3, [r0]
   1fc98:	b	1c784 <_start@@Base+0x6f64>
   1fc9c:	mov	r1, r0
   1fca0:	str	r6, [sp]
   1fca4:	ldr	r3, [sp, #100]	; 0x64
   1fca8:	mov	r2, fp
   1fcac:	mov	r0, sl
   1fcb0:	bl	18f48 <_start@@Base+0x3728>
   1fcb4:	cmp	fp, r0
   1fcb8:	cmpne	r4, r0
   1fcbc:	beq	1fc28 <_start@@Base+0xa408>
   1fcc0:	mov	r4, r0
   1fcc4:	b	1fbc4 <_start@@Base+0xa3a4>
   1fcc8:	mov	r1, r0
   1fccc:	str	r6, [sp]
   1fcd0:	ldr	r3, [sp, #104]	; 0x68
   1fcd4:	mov	r2, fp
   1fcd8:	mov	r0, sl
   1fcdc:	bl	18f48 <_start@@Base+0x3728>
   1fce0:	cmp	fp, r0
   1fce4:	cmpne	r4, r0
   1fce8:	beq	1fc28 <_start@@Base+0xa408>
   1fcec:	mov	r4, r0
   1fcf0:	b	1fb68 <_start@@Base+0xa348>
   1fcf4:	mov	r4, r0
   1fcf8:	mov	r1, r4
   1fcfc:	mov	r2, fp
   1fd00:	mov	r0, sl
   1fd04:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1fd08:	mov	r7, r0
   1fd0c:	b	1c784 <_start@@Base+0x6f64>
   1fd10:	mov	r1, r0
   1fd14:	str	r6, [sp]
   1fd18:	ldr	r3, [sp, #108]	; 0x6c
   1fd1c:	mov	r2, fp
   1fd20:	mov	r0, sl
   1fd24:	bl	18750 <_start@@Base+0x2f30>
   1fd28:	cmp	fp, r0
   1fd2c:	cmpne	r4, r0
   1fd30:	beq	2051c <_start@@Base+0xacfc>
   1fd34:	mov	r4, r0
   1fd38:	b	1f060 <_start@@Base+0x9840>
   1fd3c:	ldr	r0, [sl]
   1fd40:	bl	28e1c <flatcc_builder_end_offset_vector@@Base>
   1fd44:	cmp	r0, #0
   1fd48:	str	r0, [sp, #124]	; 0x7c
   1fd4c:	beq	1d17c <_start@@Base+0x795c>
   1fd50:	mov	r1, #11
   1fd54:	ldr	r0, [sl]
   1fd58:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   1fd5c:	cmp	r0, #0
   1fd60:	beq	1d17c <_start@@Base+0x795c>
   1fd64:	ldr	r3, [sp, #124]	; 0x7c
   1fd68:	str	r3, [r0]
   1fd6c:	b	1c784 <_start@@Base+0x6f64>
   1fd70:	ldr	r0, [sl]
   1fd74:	bl	28cf4 <flatcc_builder_end_vector@@Base>
   1fd78:	cmp	r0, #0
   1fd7c:	str	r0, [sp, #124]	; 0x7c
   1fd80:	beq	1d17c <_start@@Base+0x795c>
   1fd84:	mov	r1, #5
   1fd88:	ldr	r0, [sl]
   1fd8c:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   1fd90:	cmp	r0, #0
   1fd94:	beq	1d17c <_start@@Base+0x795c>
   1fd98:	ldr	r3, [sp, #124]	; 0x7c
   1fd9c:	str	r3, [r0]
   1fda0:	b	1c784 <_start@@Base+0x6f64>
   1fda4:	mov	r9, fp
   1fda8:	mov	fp, r4
   1fdac:	b	1c7e8 <_start@@Base+0x6fc8>
   1fdb0:	cmnvs	lr, r5, ror #6
   1fdb4:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   1fdb8:			; <UNDEFINED> instruction: 0xffff0000
   1fdbc:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1fdc0:	andeq	r5, r3, r4, rrx
   1fdc4:	andeq	r5, r3, r0, lsr r0
   1fdc8:	andeq	r4, r3, ip, lsl pc
   1fdcc:	andeq	r4, r3, ip, ror #25
   1fdd0:	andeq	r4, r3, r8, asr #24
   1fdd4:	muleq	r3, ip, fp
   1fdd8:	andeq	r4, r3, ip, asr #22
   1fddc:	andeq	r4, r3, ip, lsr #21
   1fde0:	andeq	r4, r3, r8, ror sl
   1fde4:	muleq	r3, r0, r9
   1fde8:	mov	r3, #4
   1fdec:	mov	r2, fp
   1fdf0:	mov	r1, r4
   1fdf4:	mov	r0, sl
   1fdf8:	bl	18678 <_start@@Base+0x2e58>
   1fdfc:	cmp	r4, r0
   1fe00:	mov	r7, r0
   1fe04:	beq	206d8 <_start@@Base+0xaeb8>
   1fe08:	cmp	fp, r0
   1fe0c:	beq	1fe1c <_start@@Base+0xa5fc>
   1fe10:	ldrb	r3, [r0]
   1fe14:	cmp	r3, #91	; 0x5b
   1fe18:	beq	2034c <_start@@Base+0xab2c>
   1fe1c:	mov	r3, #0
   1fe20:	mov	r2, r3
   1fe24:	mov	r1, r3
   1fe28:	ldr	r0, [sl]
   1fe2c:	bl	27180 <flatcc_builder_start_buffer@@Base>
   1fe30:	cmp	r0, #0
   1fe34:	bne	1d17c <_start@@Base+0x795c>
   1fe38:	mov	r1, r7
   1fe3c:	add	r3, sp, #124	; 0x7c
   1fe40:	mov	r2, fp
   1fe44:	mov	r0, sl
   1fe48:	bl	1c5e8 <_start@@Base+0x6dc8>
   1fe4c:	ldr	r1, [sp, #124]	; 0x7c
   1fe50:	cmp	r1, #0
   1fe54:	mov	r7, r0
   1fe58:	beq	1d17c <_start@@Base+0x795c>
   1fe5c:	ldr	r0, [sl]
   1fe60:	bl	27238 <flatcc_builder_end_buffer@@Base>
   1fe64:	str	r0, [sp, #124]	; 0x7c
   1fe68:	cmp	r0, #0
   1fe6c:	beq	1d17c <_start@@Base+0x795c>
   1fe70:	mov	r1, #13
   1fe74:	ldr	r0, [sl]
   1fe78:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   1fe7c:	cmp	r0, #0
   1fe80:	beq	1d17c <_start@@Base+0x795c>
   1fe84:	ldr	r3, [sp, #124]	; 0x7c
   1fe88:	str	r3, [r0]
   1fe8c:	b	1c784 <_start@@Base+0x6f64>
   1fe90:	mov	r1, r0
   1fe94:	mov	r3, #7
   1fe98:	mov	r2, fp
   1fe9c:	mov	r0, sl
   1fea0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   1fea4:	mov	r7, r0
   1fea8:	b	1f97c <_start@@Base+0xa15c>
   1feac:	mov	r3, #8
   1feb0:	mov	r2, fp
   1feb4:	mov	r1, r7
   1feb8:	mov	r0, sl
   1febc:	bl	18678 <_start@@Base+0x2e58>
   1fec0:	cmp	r7, r0
   1fec4:	mov	r5, r0
   1fec8:	beq	1d8e0 <_start@@Base+0x80c0>
   1fecc:	mov	r0, #0
   1fed0:	mov	r1, #0
   1fed4:	add	r4, sp, #152	; 0x98
   1fed8:	mov	r2, fp
   1fedc:	strd	r0, [r4, #-8]!
   1fee0:	mov	r1, r5
   1fee4:	mov	r3, r4
   1fee8:	mov	r0, sl
   1feec:	bl	1812c <_start@@Base+0x290c>
   1fef0:	cmp	r0, r5
   1fef4:	mov	r7, r0
   1fef8:	beq	2052c <_start@@Base+0xad0c>
   1fefc:	ldrd	r2, [sp, #144]	; 0x90
   1ff00:	orrs	r3, r2, r3
   1ff04:	bne	1ff14 <_start@@Base+0xa6f4>
   1ff08:	ldr	r3, [sl, #8]
   1ff0c:	tst	r3, #2
   1ff10:	beq	1c784 <_start@@Base+0x6f64>
   1ff14:	mov	r3, #8
   1ff18:	mov	r2, r3
   1ff1c:	mov	r1, #18
   1ff20:	ldr	r0, [sl]
   1ff24:	bl	299f8 <flatcc_builder_table_add@@Base>
   1ff28:	cmp	r0, #0
   1ff2c:	beq	2071c <_start@@Base+0xaefc>
   1ff30:	ldrd	r2, [sp, #144]	; 0x90
   1ff34:	strd	r2, [r0]
   1ff38:	b	1c784 <_start@@Base+0x6f64>
   1ff3c:	mov	r1, r7
   1ff40:	mov	r2, fp
   1ff44:	mov	r0, sl
   1ff48:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ff4c:	mov	r7, r0
   1ff50:	b	1c784 <_start@@Base+0x6f64>
   1ff54:	ldr	r0, [sl]
   1ff58:	bl	28cf4 <flatcc_builder_end_vector@@Base>
   1ff5c:	cmp	r0, #0
   1ff60:	str	r0, [sp, #124]	; 0x7c
   1ff64:	beq	1d17c <_start@@Base+0x795c>
   1ff68:	mov	r1, #33	; 0x21
   1ff6c:	ldr	r0, [sl]
   1ff70:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   1ff74:	cmp	r0, #0
   1ff78:	beq	1d17c <_start@@Base+0x795c>
   1ff7c:	ldr	r3, [sp, #124]	; 0x7c
   1ff80:	str	r3, [r0]
   1ff84:	b	1c784 <_start@@Base+0x6f64>
   1ff88:	mov	r1, r0
   1ff8c:	str	r4, [sp]
   1ff90:	ldr	r3, [sp, #56]	; 0x38
   1ff94:	mov	r2, fp
   1ff98:	mov	r0, sl
   1ff9c:	bl	1995c <_start@@Base+0x413c>
   1ffa0:	cmp	fp, r0
   1ffa4:	cmpne	r7, r0
   1ffa8:	beq	1e80c <_start@@Base+0x8fec>
   1ffac:	mov	r7, r0
   1ffb0:	b	1df6c <_start@@Base+0x874c>
   1ffb4:	mov	r1, r7
   1ffb8:	mov	r3, #5
   1ffbc:	mov	r2, fp
   1ffc0:	mov	r0, sl
   1ffc4:	bl	18678 <_start@@Base+0x2e58>
   1ffc8:	cmp	r7, r0
   1ffcc:	mov	r1, r0
   1ffd0:	beq	1da9c <_start@@Base+0x827c>
   1ffd4:	add	r3, sp, #124	; 0x7c
   1ffd8:	mov	r2, fp
   1ffdc:	mov	r0, sl
   1ffe0:	bl	1bae8 <_start@@Base+0x62c8>
   1ffe4:	ldr	r3, [sp, #124]	; 0x7c
   1ffe8:	cmp	r3, #0
   1ffec:	mov	r7, r0
   1fff0:	beq	1d17c <_start@@Base+0x795c>
   1fff4:	mov	r1, #34	; 0x22
   1fff8:	ldr	r0, [sl]
   1fffc:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   20000:	cmp	r0, #0
   20004:	beq	1d17c <_start@@Base+0x795c>
   20008:	ldr	r3, [sp, #124]	; 0x7c
   2000c:	str	r3, [r0]
   20010:	b	1c784 <_start@@Base+0x6f64>
   20014:	ldr	r3, [pc, #-604]	; 1fdc0 <_start@@Base+0xa5a0>
   20018:	mov	r1, r0
   2001c:	add	r3, pc, r3
   20020:	str	r4, [sp]
   20024:	add	r3, r3, #368	; 0x170
   20028:	mov	r2, fp
   2002c:	mov	r0, sl
   20030:	bl	18750 <_start@@Base+0x2f30>
   20034:	cmp	fp, r0
   20038:	cmpne	r7, r0
   2003c:	beq	1f290 <_start@@Base+0x9a70>
   20040:	mov	r7, r0
   20044:	b	1f388 <_start@@Base+0x9b68>
   20048:	ldr	r3, [pc, #-652]	; 1fdc4 <_start@@Base+0xa5a4>
   2004c:	mov	r1, r0
   20050:	add	r3, pc, r3
   20054:	str	r4, [sp]
   20058:	add	r3, r3, #168	; 0xa8
   2005c:	mov	r2, fp
   20060:	mov	r0, sl
   20064:	bl	1913c <_start@@Base+0x391c>
   20068:	cmp	fp, r0
   2006c:	cmpne	r7, r0
   20070:	beq	1e768 <_start@@Base+0x8f48>
   20074:	mov	r7, r0
   20078:	b	1dc6c <_start@@Base+0x844c>
   2007c:	mov	r3, #8
   20080:	mov	r2, fp
   20084:	mov	r1, r7
   20088:	mov	r0, sl
   2008c:	bl	18678 <_start@@Base+0x2e58>
   20090:	cmp	r7, r0
   20094:	mov	r4, r0
   20098:	beq	20634 <_start@@Base+0xae14>
   2009c:	mov	r0, #0
   200a0:	mov	r1, #0
   200a4:	add	r5, sp, #152	; 0x98
   200a8:	mov	r2, fp
   200ac:	strd	r0, [r5, #-8]!
   200b0:	mov	r1, r4
   200b4:	mov	r3, r5
   200b8:	mov	r0, sl
   200bc:	bl	181f4 <_start@@Base+0x29d4>
   200c0:	cmp	r0, r4
   200c4:	mov	r7, r0
   200c8:	beq	205cc <_start@@Base+0xadac>
   200cc:	ldrd	r2, [sp, #144]	; 0x90
   200d0:	orrs	r3, r2, r3
   200d4:	bne	200e4 <_start@@Base+0xa8c4>
   200d8:	ldr	r3, [sl, #8]
   200dc:	tst	r3, #2
   200e0:	beq	1c784 <_start@@Base+0x6f64>
   200e4:	mov	r3, #8
   200e8:	mov	r2, r3
   200ec:	mov	r1, #19
   200f0:	ldr	r0, [sl]
   200f4:	bl	299f8 <flatcc_builder_table_add@@Base>
   200f8:	cmp	r0, #0
   200fc:	beq	1d17c <_start@@Base+0x795c>
   20100:	ldrd	r2, [sp, #144]	; 0x90
   20104:	strd	r2, [r0]
   20108:	b	1c784 <_start@@Base+0x6f64>
   2010c:	ldr	r0, [sl]
   20110:	bl	28e1c <flatcc_builder_end_offset_vector@@Base>
   20114:	cmp	r0, #0
   20118:	str	r0, [sp, #124]	; 0x7c
   2011c:	beq	1d17c <_start@@Base+0x795c>
   20120:	mov	r1, #10
   20124:	ldr	r0, [sl]
   20128:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   2012c:	cmp	r0, #0
   20130:	beq	1d17c <_start@@Base+0x795c>
   20134:	ldr	r3, [sp, #124]	; 0x7c
   20138:	str	r3, [r0]
   2013c:	b	1c784 <_start@@Base+0x6f64>
   20140:	mov	r4, r0
   20144:	mov	r1, r4
   20148:	mov	r2, fp
   2014c:	mov	r0, sl
   20150:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   20154:	mov	r7, r0
   20158:	b	1c784 <_start@@Base+0x6f64>
   2015c:	ldr	r3, [pc, #-924]	; 1fdc8 <_start@@Base+0xa5a8>
   20160:	mov	r1, r0
   20164:	add	r3, pc, r3
   20168:	str	r4, [sp]
   2016c:	add	r3, r3, #356	; 0x164
   20170:	mov	r2, fp
   20174:	mov	r0, sl
   20178:	bl	18750 <_start@@Base+0x2f30>
   2017c:	cmp	fp, r0
   20180:	cmpne	r7, r0
   20184:	beq	1f290 <_start@@Base+0x9a70>
   20188:	mov	r7, r0
   2018c:	b	1dcf8 <_start@@Base+0x84d8>
   20190:	mov	r3, #8
   20194:	mov	r2, fp
   20198:	mov	r1, r7
   2019c:	mov	r0, sl
   201a0:	bl	18678 <_start@@Base+0x2e58>
   201a4:	cmp	r7, r0
   201a8:	mov	r5, r0
   201ac:	beq	1f744 <_start@@Base+0x9f24>
   201b0:	add	r4, sp, #152	; 0x98
   201b4:	mov	r3, #0
   201b8:	str	r3, [r4, #-8]!
   201bc:	mov	r1, r0
   201c0:	mov	r2, fp
   201c4:	mov	r3, r4
   201c8:	mov	r0, sl
   201cc:	bl	18288 <_start@@Base+0x2a68>
   201d0:	cmp	r0, r5
   201d4:	mov	r7, r0
   201d8:	beq	20600 <_start@@Base+0xade0>
   201dc:	ldr	r3, [sp, #144]	; 0x90
   201e0:	cmp	r3, #0
   201e4:	bne	201f4 <_start@@Base+0xa9d4>
   201e8:	ldr	r3, [sl, #8]
   201ec:	tst	r3, #2
   201f0:	beq	1c784 <_start@@Base+0x6f64>
   201f4:	mov	r3, #4
   201f8:	mov	r2, r3
   201fc:	mov	r1, #17
   20200:	ldr	r0, [sl]
   20204:	bl	299f8 <flatcc_builder_table_add@@Base>
   20208:	cmp	r0, #0
   2020c:	beq	2071c <_start@@Base+0xaefc>
   20210:	ldr	r3, [sp, #144]	; 0x90
   20214:	str	r3, [r0]
   20218:	b	1c784 <_start@@Base+0x6f64>
   2021c:	mov	r3, #2
   20220:	mov	r2, fp
   20224:	mov	r1, r4
   20228:	mov	r0, sl
   2022c:	bl	18678 <_start@@Base+0x2e58>
   20230:	cmp	r4, r0
   20234:	mov	r7, r0
   20238:	beq	20694 <_start@@Base+0xae74>
   2023c:	ldr	r0, [sl]
   20240:	bl	27dd0 <flatcc_builder_start_offset_vector@@Base>
   20244:	cmp	r0, #0
   20248:	bne	1d17c <_start@@Base+0x795c>
   2024c:	mov	r1, r7
   20250:	mov	r3, r9
   20254:	mov	r2, fp
   20258:	mov	r0, sl
   2025c:	bl	18908 <_start@@Base+0x30e8>
   20260:	ldr	r3, [sp, #120]	; 0x78
   20264:	cmp	r3, #0
   20268:	mov	r7, r0
   2026c:	beq	202fc <_start@@Base+0xaadc>
   20270:	add	r4, sp, #124	; 0x7c
   20274:	mov	r5, #1
   20278:	b	202b8 <_start@@Base+0xaa98>
   2027c:	ldr	r0, [sl]
   20280:	bl	27768 <flatcc_builder_extend_offset_vector@@Base>
   20284:	mov	r3, r9
   20288:	mov	r2, fp
   2028c:	mov	r1, r7
   20290:	subs	ip, r0, #0
   20294:	mov	r0, sl
   20298:	beq	1d17c <_start@@Base+0x795c>
   2029c:	ldr	lr, [sp, #124]	; 0x7c
   202a0:	str	lr, [ip]
   202a4:	bl	1a548 <_start@@Base+0x4d28>
   202a8:	ldr	r3, [sp, #120]	; 0x78
   202ac:	cmp	r3, #0
   202b0:	mov	r7, r0
   202b4:	beq	202fc <_start@@Base+0xaadc>
   202b8:	mov	r1, r7
   202bc:	mov	r3, r4
   202c0:	mov	r2, fp
   202c4:	mov	r0, sl
   202c8:	bl	2f500 <flatcc_json_parser_build_string@@Base>
   202cc:	ldr	r3, [sp, #124]	; 0x7c
   202d0:	mov	r1, r5
   202d4:	cmp	r3, #0
   202d8:	mov	r7, r0
   202dc:	bne	2027c <_start@@Base+0xaa5c>
   202e0:	b	1d17c <_start@@Base+0x795c>
   202e4:	mov	r1, r7
   202e8:	mov	r2, fp
   202ec:	mov	r0, sl
   202f0:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   202f4:	mov	r7, r0
   202f8:	b	1c784 <_start@@Base+0x6f64>
   202fc:	ldr	r0, [sl]
   20300:	bl	28e1c <flatcc_builder_end_offset_vector@@Base>
   20304:	cmp	r0, #0
   20308:	str	r0, [sp, #124]	; 0x7c
   2030c:	beq	1d17c <_start@@Base+0x795c>
   20310:	mov	r1, #28
   20314:	ldr	r0, [sl]
   20318:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   2031c:	cmp	r0, #0
   20320:	beq	1d17c <_start@@Base+0x795c>
   20324:	ldr	r3, [sp, #124]	; 0x7c
   20328:	str	r3, [r0]
   2032c:	b	1c784 <_start@@Base+0x6f64>
   20330:	mov	r4, r0
   20334:	mov	r1, r4
   20338:	mov	r2, fp
   2033c:	mov	r0, sl
   20340:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   20344:	mov	r7, r0
   20348:	b	1c784 <_start@@Base+0x6f64>
   2034c:	mov	r2, #1
   20350:	mov	r1, r2
   20354:	mvn	r3, #0
   20358:	ldr	r0, [sl]
   2035c:	bl	27d58 <flatcc_builder_start_vector@@Base>
   20360:	subs	r6, r0, #0
   20364:	bne	1d17c <_start@@Base+0x795c>
   20368:	mov	r1, r7
   2036c:	mov	r3, r9
   20370:	mov	r2, fp
   20374:	mov	r0, sl
   20378:	bl	18908 <_start@@Base+0x30e8>
   2037c:	ldr	r3, [sp, #120]	; 0x78
   20380:	cmp	r3, #0
   20384:	mov	r7, r0
   20388:	beq	20498 <_start@@Base+0xac78>
   2038c:	ldr	r3, [pc, #-1480]	; 1fdcc <_start@@Base+0xa5ac>
   20390:	mov	r8, #1
   20394:	add	r3, pc, r3
   20398:	add	r3, r3, #488	; 0x1e8
   2039c:	str	r3, [sp, #56]	; 0x38
   203a0:	add	r5, sp, #144	; 0x90
   203a4:	b	203d4 <_start@@Base+0xabb4>
   203a8:	ldrb	r2, [sp, #144]	; 0x90
   203ac:	mov	r1, r0
   203b0:	mov	r3, r9
   203b4:	strb	r2, [r4]
   203b8:	mov	r0, sl
   203bc:	mov	r2, fp
   203c0:	bl	1a548 <_start@@Base+0x4d28>
   203c4:	ldr	r3, [sp, #120]	; 0x78
   203c8:	cmp	r3, #0
   203cc:	mov	r7, r0
   203d0:	beq	20498 <_start@@Base+0xac78>
   203d4:	mov	r1, r8
   203d8:	ldr	r0, [sl]
   203dc:	strb	r6, [sp, #144]	; 0x90
   203e0:	bl	27504 <flatcc_builder_extend_vector@@Base>
   203e4:	mov	r1, r7
   203e8:	mov	r3, r5
   203ec:	mov	r2, fp
   203f0:	subs	r4, r0, #0
   203f4:	mov	r0, sl
   203f8:	beq	1d17c <_start@@Base+0x795c>
   203fc:	bl	18344 <_start@@Base+0x2b24>
   20400:	cmp	r0, r7
   20404:	bne	203a8 <_start@@Base+0xab88>
   20408:	str	r5, [sp]
   2040c:	ldr	r3, [sp, #56]	; 0x38
   20410:	mov	r2, fp
   20414:	mov	r1, r7
   20418:	mov	r0, sl
   2041c:	bl	19768 <_start@@Base+0x3f48>
   20420:	cmp	fp, r0
   20424:	cmpne	r0, r7
   20428:	bne	203a8 <_start@@Base+0xab88>
   2042c:	b	1f290 <_start@@Base+0x9a70>
   20430:	ldr	r3, [pc, #-1640]	; 1fdd0 <_start@@Base+0xa5b0>
   20434:	mov	r1, r0
   20438:	add	r3, pc, r3
   2043c:	str	r4, [sp]
   20440:	add	r3, r3, #192	; 0xc0
   20444:	mov	r2, fp
   20448:	mov	r0, sl
   2044c:	bl	1913c <_start@@Base+0x391c>
   20450:	cmp	fp, r0
   20454:	cmpne	r7, r0
   20458:	beq	1e768 <_start@@Base+0x8f48>
   2045c:	mov	r7, r0
   20460:	b	1f508 <_start@@Base+0x9ce8>
   20464:	mov	r1, r7
   20468:	mov	r2, fp
   2046c:	mov	r0, sl
   20470:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   20474:	mov	r7, r0
   20478:	b	1c784 <_start@@Base+0x6f64>
   2047c:	mov	r4, r0
   20480:	mov	r1, r4
   20484:	mov	r2, fp
   20488:	mov	r0, sl
   2048c:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   20490:	mov	r7, r0
   20494:	b	1c784 <_start@@Base+0x6f64>
   20498:	ldr	r0, [sl]
   2049c:	bl	28cf4 <flatcc_builder_end_vector@@Base>
   204a0:	str	r0, [sp, #124]	; 0x7c
   204a4:	b	1fe68 <_start@@Base+0xa648>
   204a8:	mov	r1, r7
   204ac:	mov	r2, fp
   204b0:	mov	r0, sl
   204b4:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   204b8:	mov	r7, r0
   204bc:	b	1c784 <_start@@Base+0x6f64>
   204c0:	mov	r4, r0
   204c4:	mov	r1, r4
   204c8:	mov	r2, fp
   204cc:	mov	r0, sl
   204d0:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   204d4:	mov	r7, r0
   204d8:	b	1c784 <_start@@Base+0x6f64>
   204dc:	ldr	r3, [pc, #-1808]	; 1fdd4 <_start@@Base+0xa5b4>
   204e0:	mov	r1, r0
   204e4:	add	r3, pc, r3
   204e8:	str	r5, [sp]
   204ec:	add	r3, r3, #392	; 0x188
   204f0:	mov	r2, fp
   204f4:	mov	r0, sl
   204f8:	bl	1955c <_start@@Base+0x3d3c>
   204fc:	cmp	fp, r0
   20500:	cmpne	r7, r0
   20504:	beq	1f290 <_start@@Base+0x9a70>
   20508:	mov	r7, r0
   2050c:	b	1f6dc <_start@@Base+0x9ebc>
   20510:	mov	r9, fp
   20514:	mov	fp, r6
   20518:	b	1c7e8 <_start@@Base+0x6fc8>
   2051c:	strd	r8, [sp, #88]	; 0x58
   20520:	mov	r4, r0
   20524:	ldr	r9, [sp, #100]	; 0x64
   20528:	b	1f108 <_start@@Base+0x98e8>
   2052c:	ldr	r3, [pc, #-1884]	; 1fdd8 <_start@@Base+0xa5b8>
   20530:	mov	r1, r0
   20534:	add	r3, pc, r3
   20538:	str	r4, [sp]
   2053c:	add	r3, r3, #416	; 0x1a0
   20540:	mov	r2, fp
   20544:	mov	r0, sl
   20548:	bl	1995c <_start@@Base+0x413c>
   2054c:	cmp	fp, r0
   20550:	cmpne	r7, r0
   20554:	beq	1f290 <_start@@Base+0x9a70>
   20558:	mov	r7, r0
   2055c:	b	1fefc <_start@@Base+0xa6dc>
   20560:	mov	r1, r7
   20564:	mov	r2, fp
   20568:	mov	r0, sl
   2056c:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   20570:	mov	r7, r0
   20574:	b	1c784 <_start@@Base+0x6f64>
   20578:	mov	r4, r7
   2057c:	mov	r1, r4
   20580:	mov	r2, fp
   20584:	mov	r0, sl
   20588:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   2058c:	mov	r7, r0
   20590:	b	1c784 <_start@@Base+0x6f64>
   20594:	mov	r4, r7
   20598:	mov	r1, r4
   2059c:	mov	r2, fp
   205a0:	mov	r0, sl
   205a4:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   205a8:	mov	r7, r0
   205ac:	b	1c784 <_start@@Base+0x6f64>
   205b0:	mov	r4, r7
   205b4:	mov	r1, r4
   205b8:	mov	r2, fp
   205bc:	mov	r0, sl
   205c0:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   205c4:	mov	r7, r0
   205c8:	b	1c784 <_start@@Base+0x6f64>
   205cc:	ldr	r3, [pc, #-2040]	; 1fddc <_start@@Base+0xa5bc>
   205d0:	str	r5, [sp]
   205d4:	add	r3, pc, r3
   205d8:	add	r3, r3, #464	; 0x1d0
   205dc:	mov	r2, fp
   205e0:	mov	r1, r4
   205e4:	mov	r0, sl
   205e8:	bl	14620 <__assert_fail@plt+0x10>
   205ec:	cmp	fp, r0
   205f0:	cmpne	r4, r0
   205f4:	beq	1f290 <_start@@Base+0x9a70>
   205f8:	mov	r7, r0
   205fc:	b	200cc <_start@@Base+0xa8ac>
   20600:	ldr	r3, [pc, #-2088]	; 1fde0 <_start@@Base+0xa5c0>
   20604:	mov	r1, r0
   20608:	add	r3, pc, r3
   2060c:	str	r4, [sp]
   20610:	add	r3, r3, #440	; 0x1b8
   20614:	mov	r2, fp
   20618:	mov	r0, sl
   2061c:	bl	18f48 <_start@@Base+0x3728>
   20620:	cmp	fp, r0
   20624:	cmpne	r7, r0
   20628:	beq	1f290 <_start@@Base+0x9a70>
   2062c:	mov	r7, r0
   20630:	b	201dc <_start@@Base+0xa9bc>
   20634:	mov	r7, r0
   20638:	b	1d3e0 <_start@@Base+0x7bc0>
   2063c:	mov	r1, r0
   20640:	str	r5, [sp]
   20644:	ldr	r3, [sp, #80]	; 0x50
   20648:	mov	r2, fp
   2064c:	mov	r0, sl
   20650:	bl	14620 <__assert_fail@plt+0x10>
   20654:	cmp	fp, r0
   20658:	cmpne	r7, r0
   2065c:	beq	1f290 <_start@@Base+0x9a70>
   20660:	mov	r7, r0
   20664:	b	1d460 <_start@@Base+0x7c40>
   20668:	mov	r1, r0
   2066c:	str	r5, [sp]
   20670:	ldr	r3, [sp, #84]	; 0x54
   20674:	mov	r2, fp
   20678:	mov	r0, sl
   2067c:	bl	18f48 <_start@@Base+0x3728>
   20680:	cmp	fp, r0
   20684:	cmpne	r7, r0
   20688:	beq	1f290 <_start@@Base+0x9a70>
   2068c:	mov	r7, r0
   20690:	b	1f7c0 <_start@@Base+0x9fa0>
   20694:	mov	r4, r0
   20698:	b	1f678 <_start@@Base+0x9e58>
   2069c:	mov	r4, r0
   206a0:	b	1db34 <_start@@Base+0x8314>
   206a4:	mov	r1, r0
   206a8:	str	r5, [sp]
   206ac:	ldr	r3, [sp, #96]	; 0x60
   206b0:	mov	r2, fp
   206b4:	mov	r0, sl
   206b8:	bl	1995c <_start@@Base+0x413c>
   206bc:	cmp	fp, r0
   206c0:	cmpne	r7, r0
   206c4:	beq	1f290 <_start@@Base+0x9a70>
   206c8:	mov	r7, r0
   206cc:	b	1d960 <_start@@Base+0x8140>
   206d0:	mov	r4, r0
   206d4:	b	1dac0 <_start@@Base+0x82a0>
   206d8:	mov	r4, r0
   206dc:	b	1d8a8 <_start@@Base+0x8088>
   206e0:	mov	r4, r0
   206e4:	b	1d2fc <_start@@Base+0x7adc>
   206e8:	ldr	r3, [pc, #-2316]	; 1fde4 <_start@@Base+0xa5c4>
   206ec:	mov	r1, r0
   206f0:	add	r3, pc, r3
   206f4:	str	r5, [sp]
   206f8:	add	r3, r3, #404	; 0x194
   206fc:	mov	r2, fp
   20700:	mov	r0, sl
   20704:	bl	1955c <_start@@Base+0x3d3c>
   20708:	cmp	fp, r0
   2070c:	cmpne	r7, r0
   20710:	beq	1f290 <_start@@Base+0x9a70>
   20714:	mov	r7, r0
   20718:	b	1da28 <_start@@Base+0x8208>
   2071c:	mov	r9, fp
   20720:	mov	r0, r7
   20724:	b	1c7e4 <_start@@Base+0x6fc4>
   20728:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2072c:	mov	r5, r2
   20730:	sub	r2, r2, r1
   20734:	cmp	r2, #8
   20738:	sub	sp, sp, #8
   2073c:	mov	r4, r1
   20740:	mov	r8, r0
   20744:	mov	r9, r3
   20748:	bls	20814 <_start@@Base+0xaff4>
   2074c:	ldrb	r6, [r4, #7]
   20750:	mov	r7, #0
   20754:	ldrb	r2, [r4, #6]
   20758:	lsr	r1, r2, #24
   2075c:	lsl	r0, r2, #8
   20760:	orr	r6, r6, r0
   20764:	orr	r7, r7, r1
   20768:	ldrb	r2, [r4, #5]
   2076c:	lsr	r1, r2, #16
   20770:	lsl	r0, r2, #16
   20774:	orr	r0, r0, r6
   20778:	orr	r1, r1, r7
   2077c:	ldrb	r2, [r4, #4]
   20780:	lsr	r7, r2, #8
   20784:	lsl	r6, r2, #24
   20788:	orr	r6, r6, r0
   2078c:	orr	r7, r7, r1
   20790:	ldrb	r1, [r4, #3]
   20794:	mov	r0, #0
   20798:	orr	r6, r6, r0
   2079c:	orr	r7, r7, r1
   207a0:	ldrb	r2, [r4, #2]
   207a4:	mov	r0, #0
   207a8:	orr	r6, r6, r0
   207ac:	lsl	r1, r2, #8
   207b0:	orr	r7, r7, r1
   207b4:	ldrb	r2, [r4, #1]
   207b8:	mov	r0, #0
   207bc:	orr	r0, r0, r6
   207c0:	lsl	r1, r2, #16
   207c4:	orr	r1, r1, r7
   207c8:	ldrb	r2, [r4]
   207cc:	mov	r6, #0
   207d0:	orr	r0, r0, r6
   207d4:	lsl	r7, r2, #24
   207d8:	add	r3, pc, #376	; 0x178
   207dc:	ldrd	r2, [r3]
   207e0:	orr	r1, r1, r7
   207e4:	cmp	r1, r3
   207e8:	cmpeq	r0, r2
   207ec:	beq	20844 <_start@@Base+0xb024>
   207f0:	add	r3, pc, #360	; 0x168
   207f4:	ldrd	r2, [r3]
   207f8:	mov	r0, #0
   207fc:	cmp	r1, r3
   20800:	cmpeq	r0, r2
   20804:	beq	208c4 <_start@@Base+0xb0a4>
   20808:	mov	r0, r4
   2080c:	add	sp, sp, #8
   20810:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20814:	sub	r2, r2, #1
   20818:	cmp	r2, #7
   2081c:	addls	pc, pc, r2, lsl #2
   20820:	b	20808 <_start@@Base+0xafe8>
   20824:	b	20904 <_start@@Base+0xb0e4>
   20828:	b	20910 <_start@@Base+0xb0f0>
   2082c:	b	2091c <_start@@Base+0xb0fc>
   20830:	b	20928 <_start@@Base+0xb108>
   20834:	b	20934 <_start@@Base+0xb114>
   20838:	b	20940 <_start@@Base+0xb120>
   2083c:	b	2094c <_start@@Base+0xb12c>
   20840:	b	2074c <_start@@Base+0xaf2c>
   20844:	mov	r1, r5
   20848:	add	r0, r4, #8
   2084c:	bl	15948 <_start@@Base+0x128>
   20850:	add	r3, pc, #272	; 0x110
   20854:	ldrd	r2, [r3]
   20858:	cmp	r1, r3
   2085c:	cmpeq	r0, r2
   20860:	bne	20808 <_start@@Base+0xafe8>
   20864:	add	sl, r4, #16
   20868:	mov	r0, sl
   2086c:	mov	r1, r5
   20870:	bl	15948 <_start@@Base+0x128>
   20874:	mov	r0, #0
   20878:	and	r1, r1, #-16777216	; 0xff000000
   2087c:	cmp	r1, #1694498816	; 0x65000000
   20880:	cmpeq	r0, #0
   20884:	bne	20808 <_start@@Base+0xafe8>
   20888:	ldr	r3, [sp, #44]	; 0x2c
   2088c:	mov	r2, r5
   20890:	str	r3, [sp]
   20894:	mov	r0, r8
   20898:	mov	r3, #1
   2089c:	mov	r1, sl
   208a0:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   208a4:	cmp	sl, r0
   208a8:	beq	20808 <_start@@Base+0xafe8>
   208ac:	ldr	r1, [sp, #40]	; 0x28
   208b0:	mov	r2, #1
   208b4:	mov	r3, #0
   208b8:	strd	r2, [r1]
   208bc:	str	r6, [r9]
   208c0:	b	2080c <_start@@Base+0xafec>
   208c4:	ldr	r3, [sp, #44]	; 0x2c
   208c8:	mov	r2, r5
   208cc:	str	r3, [sp]
   208d0:	mov	r0, r8
   208d4:	mov	r3, #4
   208d8:	mov	r1, r4
   208dc:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   208e0:	cmp	r4, r0
   208e4:	beq	2080c <_start@@Base+0xafec>
   208e8:	ldr	r1, [sp, #40]	; 0x28
   208ec:	mov	r2, #0
   208f0:	mov	r3, #0
   208f4:	strd	r2, [r1]
   208f8:	str	r6, [r9]
   208fc:	add	sp, sp, #8
   20900:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20904:	mov	r0, #0
   20908:	mov	r1, #0
   2090c:	b	207c8 <_start@@Base+0xafa8>
   20910:	mov	r6, #0
   20914:	mov	r7, #0
   20918:	b	207b4 <_start@@Base+0xaf94>
   2091c:	mov	r6, #0
   20920:	mov	r7, #0
   20924:	b	207a0 <_start@@Base+0xaf80>
   20928:	mov	r6, #0
   2092c:	mov	r7, #0
   20930:	b	20790 <_start@@Base+0xaf70>
   20934:	mov	r0, #0
   20938:	mov	r1, #0
   2093c:	b	2077c <_start@@Base+0xaf5c>
   20940:	mov	r6, #0
   20944:	mov	r7, #0
   20948:	b	20768 <_start@@Base+0xaf48>
   2094c:	mov	r6, #0
   20950:	mov	r7, #0
   20954:	b	20754 <_start@@Base+0xaf34>
   20958:	rsbvc	r6, r5, #116, 28	; 0x740
   2095c:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   20960:	andeq	r0, r0, r0
   20964:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   20968:	cmnvc	r0, #-1073741800	; 0xc0000018
   2096c:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   20970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20974:	mov	r4, r1
   20978:	sub	sp, sp, #12
   2097c:	mov	r1, r2
   20980:	mov	r5, r0
   20984:	mov	r0, r4
   20988:	mov	sl, r2
   2098c:	mov	fp, r3
   20990:	bl	15948 <_start@@Base+0x128>
   20994:	add	r3, pc, #780	; 0x30c
   20998:	ldrd	r2, [r3]
   2099c:	ldr	r8, [sp, #48]	; 0x30
   209a0:	ldr	r9, [sp, #52]	; 0x34
   209a4:	cmp	r1, r3
   209a8:	cmpeq	r0, r2
   209ac:	bhi	209ec <_start@@Base+0xb1cc>
   209b0:	add	r3, pc, #760	; 0x2f8
   209b4:	ldrd	r2, [r3]
   209b8:	cmp	r1, r3
   209bc:	cmpeq	r0, r2
   209c0:	bhi	20b38 <_start@@Base+0xb318>
   209c4:	add	r3, pc, #748	; 0x2ec
   209c8:	ldrd	r2, [r3]
   209cc:	bic	r1, r1, #255	; 0xff
   209d0:	mov	r0, #0
   209d4:	cmp	r1, r3
   209d8:	cmpeq	r0, r2
   209dc:	beq	20bf8 <_start@@Base+0xb3d8>
   209e0:	mov	r0, r4
   209e4:	add	sp, sp, #12
   209e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209ec:	add	r3, pc, #716	; 0x2cc
   209f0:	ldrd	r2, [r3]
   209f4:	cmp	r1, r3
   209f8:	cmpeq	r0, r2
   209fc:	bhi	20a50 <_start@@Base+0xb230>
   20a00:	add	r3, pc, #704	; 0x2c0
   20a04:	ldrd	r2, [r3]
   20a08:	cmp	r1, r3
   20a0c:	cmpeq	r0, r2
   20a10:	bne	209e0 <_start@@Base+0xb1c0>
   20a14:	sub	r3, sl, r4
   20a18:	cmp	r3, #8
   20a1c:	ble	209e0 <_start@@Base+0xb1c0>
   20a20:	ldrb	r3, [r4, #8]
   20a24:	cmp	r3, #46	; 0x2e
   20a28:	bne	209e0 <_start@@Base+0xb1c0>
   20a2c:	str	r9, [sp, #52]	; 0x34
   20a30:	str	r8, [sp, #48]	; 0x30
   20a34:	mov	r3, fp
   20a38:	mov	r2, sl
   20a3c:	add	r1, r4, #9
   20a40:	mov	r0, r5
   20a44:	add	sp, sp, #12
   20a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a4c:	b	17110 <_start@@Base+0x18f0>
   20a50:	add	r3, pc, #632	; 0x278
   20a54:	ldrd	r2, [r3]
   20a58:	cmp	r1, r3
   20a5c:	cmpeq	r0, r2
   20a60:	bls	20ba8 <_start@@Base+0xb388>
   20a64:	add	r3, pc, #620	; 0x26c
   20a68:	ldrd	r2, [r3]
   20a6c:	cmp	r1, r3
   20a70:	cmpeq	r0, r2
   20a74:	beq	20c68 <_start@@Base+0xb448>
   20a78:	add	r3, pc, #608	; 0x260
   20a7c:	ldrd	r2, [r3]
   20a80:	cmp	r1, r3
   20a84:	cmpeq	r0, r2
   20a88:	bne	209e0 <_start@@Base+0xb1c0>
   20a8c:	add	r6, r4, #8
   20a90:	mov	r0, r6
   20a94:	mov	r1, sl
   20a98:	bl	15948 <_start@@Base+0x128>
   20a9c:	add	r3, pc, #580	; 0x244
   20aa0:	ldrd	r2, [r3]
   20aa4:	mov	r0, #0
   20aa8:	cmp	r1, r3
   20aac:	cmpeq	r0, r2
   20ab0:	bne	209e0 <_start@@Base+0xb1c0>
   20ab4:	sub	r3, sl, r6
   20ab8:	cmp	r3, #4
   20abc:	ble	209e0 <_start@@Base+0xb1c0>
   20ac0:	ldrb	r3, [r4, #12]
   20ac4:	cmp	r3, #46	; 0x2e
   20ac8:	bne	209e0 <_start@@Base+0xb1c0>
   20acc:	add	r7, r4, #13
   20ad0:	cmp	r6, r7
   20ad4:	beq	209e0 <_start@@Base+0xb1c0>
   20ad8:	mov	r1, sl
   20adc:	mov	r0, r7
   20ae0:	bl	15948 <_start@@Base+0x128>
   20ae4:	mov	r0, #0
   20ae8:	and	r1, r1, #-16777216	; 0xff000000
   20aec:	cmp	r1, #2013265920	; 0x78000000
   20af0:	cmpeq	r0, #0
   20af4:	movne	r4, r7
   20af8:	bne	209e0 <_start@@Base+0xb1c0>
   20afc:	str	r9, [sp]
   20b00:	mov	r2, sl
   20b04:	mov	r0, r5
   20b08:	mov	r3, #1
   20b0c:	mov	r1, r7
   20b10:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   20b14:	cmp	r7, r0
   20b18:	mov	r4, r0
   20b1c:	beq	209e0 <_start@@Base+0xb1c0>
   20b20:	mov	r0, #0
   20b24:	mov	r1, #0
   20b28:	mov	r3, #0
   20b2c:	strd	r0, [r8]
   20b30:	str	r3, [fp]
   20b34:	b	209e0 <_start@@Base+0xb1c0>
   20b38:	add	r7, pc, #432	; 0x1b0
   20b3c:	ldrd	r6, [r7]
   20b40:	bic	r3, r1, #255	; 0xff
   20b44:	mov	r2, #0
   20b48:	cmp	r3, r7
   20b4c:	cmpeq	r2, r6
   20b50:	beq	20c2c <_start@@Base+0xb40c>
   20b54:	add	r3, pc, #412	; 0x19c
   20b58:	ldrd	r2, [r3]
   20b5c:	and	r0, r0, #-16777216	; 0xff000000
   20b60:	cmp	r1, r3
   20b64:	cmpeq	r0, r2
   20b68:	bne	209e0 <_start@@Base+0xb1c0>
   20b6c:	sub	r3, sl, r4
   20b70:	cmp	r3, #5
   20b74:	ble	209e0 <_start@@Base+0xb1c0>
   20b78:	ldrb	r3, [r4, #5]
   20b7c:	cmp	r3, #46	; 0x2e
   20b80:	bne	209e0 <_start@@Base+0xb1c0>
   20b84:	str	r9, [sp, #52]	; 0x34
   20b88:	str	r8, [sp, #48]	; 0x30
   20b8c:	mov	r3, fp
   20b90:	mov	r2, sl
   20b94:	add	r1, r4, #6
   20b98:	mov	r0, r5
   20b9c:	add	sp, sp, #12
   20ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ba4:	b	17600 <_start@@Base+0x1de0>
   20ba8:	add	r3, pc, #336	; 0x150
   20bac:	ldrd	r2, [r3]
   20bb0:	cmp	r1, r3
   20bb4:	cmpeq	r0, r2
   20bb8:	bne	209e0 <_start@@Base+0xb1c0>
   20bbc:	sub	r3, sl, r4
   20bc0:	cmp	r3, #8
   20bc4:	ble	209e0 <_start@@Base+0xb1c0>
   20bc8:	ldrb	r3, [r4, #8]
   20bcc:	cmp	r3, #46	; 0x2e
   20bd0:	bne	209e0 <_start@@Base+0xb1c0>
   20bd4:	str	r9, [sp, #52]	; 0x34
   20bd8:	str	r8, [sp, #48]	; 0x30
   20bdc:	mov	r3, fp
   20be0:	mov	r2, sl
   20be4:	add	r1, r4, #9
   20be8:	mov	r0, r5
   20bec:	add	sp, sp, #12
   20bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20bf4:	b	172a4 <_start@@Base+0x1a84>
   20bf8:	sub	r3, sl, r4
   20bfc:	cmp	r3, #3
   20c00:	ble	209e0 <_start@@Base+0xb1c0>
   20c04:	ldrb	r3, [r4, #3]
   20c08:	cmp	r3, #46	; 0x2e
   20c0c:	bne	209e0 <_start@@Base+0xb1c0>
   20c10:	mov	r3, fp
   20c14:	mov	r2, sl
   20c18:	add	r1, r4, #4
   20c1c:	mov	r0, r5
   20c20:	add	sp, sp, #12
   20c24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c28:	b	16ed4 <_start@@Base+0x16b4>
   20c2c:	sub	r3, sl, r4
   20c30:	cmp	r3, #3
   20c34:	ble	209e0 <_start@@Base+0xb1c0>
   20c38:	ldrb	r3, [r4, #3]
   20c3c:	cmp	r3, #46	; 0x2e
   20c40:	bne	209e0 <_start@@Base+0xb1c0>
   20c44:	str	r9, [sp, #52]	; 0x34
   20c48:	str	r8, [sp, #48]	; 0x30
   20c4c:	mov	r3, fp
   20c50:	mov	r2, sl
   20c54:	add	r1, r4, #4
   20c58:	mov	r0, r5
   20c5c:	add	sp, sp, #12
   20c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c64:	b	20728 <_start@@Base+0xaf08>
   20c68:	sub	r3, sl, r4
   20c6c:	cmp	r3, #8
   20c70:	ble	209e0 <_start@@Base+0xb1c0>
   20c74:	ldrb	r3, [r4, #8]
   20c78:	cmp	r3, #46	; 0x2e
   20c7c:	bne	209e0 <_start@@Base+0xb1c0>
   20c80:	str	r9, [sp, #52]	; 0x34
   20c84:	str	r8, [sp, #48]	; 0x30
   20c88:	mov	r3, fp
   20c8c:	mov	r2, sl
   20c90:	add	r1, r4, #9
   20c94:	mov	r0, r5
   20c98:	add	sp, sp, #12
   20c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ca0:	b	1749c <_start@@Base+0x1c7c>
   20ca4:	nop			; (mov r0, r0)
   20ca8:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   20cac:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   20cb0:	ldrshvc	pc, [pc, #255]	; 20db7 <_start@@Base+0xb597>	; <UNPREDICTABLE>
   20cb4:	cmnmi	pc, #28416	; 0x6f00
   20cb8:	andeq	r0, r0, r0
   20cbc:	cmnmi	lr, r0, lsl #18
   20cc0:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   20cc4:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   20cc8:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   20ccc:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   20cd0:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   20cd4:	mcrvs	7, 3, r6, cr5, cr15, {2}
   20cd8:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   20cdc:	mcrvs	7, 3, r6, cr5, cr15, {2}
   20ce0:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   20ce4:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   20ce8:	andeq	r0, r0, r0
   20cec:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   20cf0:	andeq	r0, r0, r0
   20cf4:	strbtmi	r6, [pc], -r0, lsl #30
   20cf8:	andvc	r0, r0, #0
   20cfc:	cmnmi	pc, #28416	; 0x6f00
   20d00:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   20d04:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   20d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d0c:	sub	sp, sp, #652	; 0x28c
   20d10:	mov	fp, r0
   20d14:	mov	r0, r3
   20d18:	str	r3, [sp, #592]	; 0x250
   20d1c:	mov	r3, #0
   20d20:	str	r3, [r0]
   20d24:	mov	r4, r1
   20d28:	ldr	r0, [fp]
   20d2c:	mov	r1, #4
   20d30:	mov	sl, r2
   20d34:	bl	27fb8 <flatcc_builder_start_table@@Base>
   20d38:	subs	r3, r0, #0
   20d3c:	str	r3, [sp, #580]	; 0x244
   20d40:	bne	2101c <_start@@Base+0xb7fc>
   20d44:	add	r3, sp, #616	; 0x268
   20d48:	str	r3, [sp]
   20d4c:	mov	r2, sl
   20d50:	mov	r3, #1
   20d54:	mov	r1, r4
   20d58:	mov	r0, fp
   20d5c:	bl	2f6a8 <flatcc_json_parser_prepare_unions@@Base>
   20d60:	cmp	sl, r0
   20d64:	beq	2101c <_start@@Base+0xb7fc>
   20d68:	mov	r1, r4
   20d6c:	add	r3, sp, #608	; 0x260
   20d70:	mov	r2, sl
   20d74:	mov	r0, fp
   20d78:	bl	185c4 <_start@@Base+0x2da4>
   20d7c:	ldr	r3, [sp, #608]	; 0x260
   20d80:	strd	r8, [sp, #24]
   20d84:	mov	r4, r0
   20d88:	cmp	r3, #0
   20d8c:	beq	21010 <_start@@Base+0xb7f0>
   20d90:	cmp	sl, r4
   20d94:	ldreq	r5, [sp, #580]	; 0x244
   20d98:	beq	2232c <_start@@Base+0xcb0c>
   20d9c:	ldrb	r3, [r4]
   20da0:	cmp	r3, #34	; 0x22
   20da4:	beq	21198 <_start@@Base+0xb978>
   20da8:	cmp	r3, #46	; 0x2e
   20dac:	movne	r3, #1
   20db0:	subne	r5, sl, r4
   20db4:	strne	r3, [fp, #12]
   20db8:	beq	22378 <_start@@Base+0xcb58>
   20dbc:	cmp	r5, #8
   20dc0:	bls	21038 <_start@@Base+0xb818>
   20dc4:	ldrb	r6, [r4, #7]
   20dc8:	mov	r7, #0
   20dcc:	ldrb	r2, [r4, #6]
   20dd0:	lsl	r3, r2, #8
   20dd4:	str	r3, [sp, #520]	; 0x208
   20dd8:	add	r3, sp, #520	; 0x208
   20ddc:	lsr	r1, r2, #24
   20de0:	str	r1, [sp, #524]	; 0x20c
   20de4:	ldrd	r2, [r3]
   20de8:	orr	r2, r2, r6
   20dec:	orr	r3, r3, r7
   20df0:	mov	r6, r2
   20df4:	mov	r7, r3
   20df8:	ldrb	r2, [r4, #5]
   20dfc:	lsl	r3, r2, #16
   20e00:	str	r3, [sp, #448]	; 0x1c0
   20e04:	add	r3, sp, #448	; 0x1c0
   20e08:	lsr	r1, r2, #16
   20e0c:	str	r1, [sp, #452]	; 0x1c4
   20e10:	ldrd	r2, [r3]
   20e14:	orr	r2, r2, r6
   20e18:	orr	r3, r3, r7
   20e1c:	mov	r6, r2
   20e20:	mov	r7, r3
   20e24:	ldrb	r2, [r4, #4]
   20e28:	lsl	r3, r2, #24
   20e2c:	str	r3, [sp, #376]	; 0x178
   20e30:	add	r3, sp, #376	; 0x178
   20e34:	lsr	r1, r2, #8
   20e38:	str	r1, [sp, #380]	; 0x17c
   20e3c:	ldrd	r2, [r3]
   20e40:	orr	r2, r2, r6
   20e44:	orr	r3, r3, r7
   20e48:	mov	r6, r2
   20e4c:	mov	r7, r3
   20e50:	ldrb	r3, [r4, #3]
   20e54:	str	r3, [sp, #404]	; 0x194
   20e58:	mov	r3, #0
   20e5c:	str	r3, [sp, #400]	; 0x190
   20e60:	add	r3, sp, #400	; 0x190
   20e64:	ldrd	r2, [r3]
   20e68:	orr	r2, r2, r6
   20e6c:	orr	r3, r3, r7
   20e70:	mov	r6, r2
   20e74:	mov	r7, r3
   20e78:	ldrb	r2, [r4, #2]
   20e7c:	lsl	r3, r2, #8
   20e80:	str	r3, [sp, #372]	; 0x174
   20e84:	mov	r3, #0
   20e88:	str	r3, [sp, #368]	; 0x170
   20e8c:	add	r3, sp, #368	; 0x170
   20e90:	ldrd	r2, [r3]
   20e94:	orr	r2, r2, r6
   20e98:	orr	r3, r3, r7
   20e9c:	mov	r6, r2
   20ea0:	mov	r7, r3
   20ea4:	ldrb	r2, [r4, #1]
   20ea8:	lsl	r3, r2, #16
   20eac:	str	r3, [sp, #300]	; 0x12c
   20eb0:	mov	r3, #0
   20eb4:	str	r3, [sp, #296]	; 0x128
   20eb8:	add	r3, sp, #296	; 0x128
   20ebc:	ldrd	r2, [r3]
   20ec0:	orr	r2, r2, r6
   20ec4:	orr	r3, r3, r7
   20ec8:	mov	r6, r2
   20ecc:	mov	r7, r3
   20ed0:	ldrb	r2, [r4]
   20ed4:	lsl	r3, r2, #24
   20ed8:	str	r3, [sp, #260]	; 0x104
   20edc:	mov	r3, #0
   20ee0:	str	r3, [sp, #256]	; 0x100
   20ee4:	add	r3, sp, #256	; 0x100
   20ee8:	ldrd	r2, [r3]
   20eec:	orr	r2, r2, r6
   20ef0:	orr	r3, r3, r7
   20ef4:	mov	r6, r2
   20ef8:	mov	r7, r3
   20efc:	add	r3, pc, #684	; 0x2ac
   20f00:	ldrd	r2, [r3]
   20f04:	cmp	r7, r3
   20f08:	cmpeq	r6, r2
   20f0c:	beq	210bc <_start@@Base+0xb89c>
   20f10:	add	r3, pc, #672	; 0x2a0
   20f14:	ldrd	r2, [r3]
   20f18:	bic	r0, r6, #255	; 0xff
   20f1c:	cmp	r7, r3
   20f20:	cmpeq	r0, r2
   20f24:	movne	r3, #1
   20f28:	moveq	r3, #0
   20f2c:	cmp	r5, #7
   20f30:	orrle	r3, r3, #1
   20f34:	subs	r8, r3, #0
   20f38:	beq	223f4 <_start@@Base+0xcbd4>
   20f3c:	add	r1, pc, #636	; 0x27c
   20f40:	ldrd	r0, [r1]
   20f44:	ldr	r2, [pc, #652]	; 211d8 <_start@@Base+0xb9b8>
   20f48:	mvn	r3, #0
   20f4c:	and	r3, r3, r7
   20f50:	and	r2, r2, r6
   20f54:	cmp	r3, r1
   20f58:	cmpeq	r2, r0
   20f5c:	beq	211ec <_start@@Base+0xb9cc>
   20f60:	add	r3, pc, #608	; 0x260
   20f64:	ldrd	r2, [r3]
   20f68:	and	r6, r6, #-16777216	; 0xff000000
   20f6c:	cmp	r7, r3
   20f70:	cmpeq	r6, r2
   20f74:	bne	20f80 <_start@@Base+0xb760>
   20f78:	cmp	r5, #5
   20f7c:	bgt	22398 <_start@@Base+0xcb78>
   20f80:	mov	r1, r4
   20f84:	mov	r2, sl
   20f88:	mov	r0, fp
   20f8c:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   20f90:	mov	r6, r0
   20f94:	sub	r3, sl, r6
   20f98:	cmp	r3, #1
   20f9c:	ble	20fb0 <_start@@Base+0xb790>
   20fa0:	ldrb	r3, [r6]
   20fa4:	cmp	r3, #32
   20fa8:	bhi	20fc4 <_start@@Base+0xb7a4>
   20fac:	beq	221cc <_start@@Base+0xc9ac>
   20fb0:	mov	r1, r6
   20fb4:	mov	r2, sl
   20fb8:	mov	r0, fp
   20fbc:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   20fc0:	mov	r6, r0
   20fc4:	cmp	sl, r6
   20fc8:	beq	221e4 <_start@@Base+0xc9c4>
   20fcc:	ldrb	r3, [r6]
   20fd0:	cmp	r3, #44	; 0x2c
   20fd4:	beq	222d0 <_start@@Base+0xcab0>
   20fd8:	mov	r3, #0
   20fdc:	str	r3, [sp, #608]	; 0x260
   20fe0:	ldrb	r3, [r6]
   20fe4:	cmp	r3, #125	; 0x7d
   20fe8:	beq	2115c <_start@@Base+0xb93c>
   20fec:	mov	r3, #10
   20ff0:	mov	r1, r6
   20ff4:	mov	r2, sl
   20ff8:	mov	r0, fp
   20ffc:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   21000:	ldr	r3, [sp, #608]	; 0x260
   21004:	cmp	r3, #0
   21008:	mov	r4, r0
   2100c:	bne	20d90 <_start@@Base+0xb570>
   21010:	ldr	r3, [fp, #24]
   21014:	cmp	r3, #0
   21018:	beq	23a20 <_start@@Base+0xe200>
   2101c:	mov	r2, sl
   21020:	mov	r1, r4
   21024:	mov	r0, fp
   21028:	mov	r3, #33	; 0x21
   2102c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   21030:	add	sp, sp, #652	; 0x28c
   21034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21038:	sub	r3, r5, #1
   2103c:	cmp	r3, #7
   21040:	addls	pc, pc, r3, lsl #2
   21044:	b	2232c <_start@@Base+0xcb0c>
   21048:	b	210b0 <_start@@Base+0xb890>
   2104c:	b	210a4 <_start@@Base+0xb884>
   21050:	b	21098 <_start@@Base+0xb878>
   21054:	b	2108c <_start@@Base+0xb86c>
   21058:	b	21080 <_start@@Base+0xb860>
   2105c:	b	21074 <_start@@Base+0xb854>
   21060:	b	21068 <_start@@Base+0xb848>
   21064:	b	20dc4 <_start@@Base+0xb5a4>
   21068:	mov	r6, #0
   2106c:	mov	r7, #0
   21070:	b	20dcc <_start@@Base+0xb5ac>
   21074:	mov	r6, #0
   21078:	mov	r7, #0
   2107c:	b	20df8 <_start@@Base+0xb5d8>
   21080:	mov	r6, #0
   21084:	mov	r7, #0
   21088:	b	20e24 <_start@@Base+0xb604>
   2108c:	mov	r6, #0
   21090:	mov	r7, #0
   21094:	b	20e50 <_start@@Base+0xb630>
   21098:	mov	r6, #0
   2109c:	mov	r7, #0
   210a0:	b	20e78 <_start@@Base+0xb658>
   210a4:	mov	r6, #0
   210a8:	mov	r7, #0
   210ac:	b	20ea4 <_start@@Base+0xb684>
   210b0:	mov	r6, #0
   210b4:	mov	r7, #0
   210b8:	b	20ed0 <_start@@Base+0xb6b0>
   210bc:	add	r4, r4, #8
   210c0:	mov	r0, r4
   210c4:	mov	r1, sl
   210c8:	bl	15948 <_start@@Base+0x128>
   210cc:	add	r3, pc, #252	; 0xfc
   210d0:	ldrd	r2, [r3]
   210d4:	mov	r0, #0
   210d8:	cmp	r1, r3
   210dc:	cmpeq	r0, r2
   210e0:	bne	20f80 <_start@@Base+0xb760>
   210e4:	sub	r3, sl, r4
   210e8:	cmp	r3, #4
   210ec:	ble	20f80 <_start@@Base+0xb760>
   210f0:	mov	r1, r4
   210f4:	mov	r3, #4
   210f8:	mov	r2, sl
   210fc:	mov	r0, fp
   21100:	bl	18678 <_start@@Base+0x2e58>
   21104:	cmp	r4, r0
   21108:	mov	r1, r0
   2110c:	beq	20f80 <_start@@Base+0xb760>
   21110:	ldr	r3, [pc, #196]	; 211dc <_start@@Base+0xb9bc>
   21114:	ldr	lr, [sp, #616]	; 0x268
   21118:	add	r3, pc, r3
   2111c:	add	r3, r3, #524	; 0x20c
   21120:	ldr	ip, [pc, #184]	; 211e0 <_start@@Base+0xb9c0>
   21124:	ldr	r2, [pc, #184]	; 211e4 <_start@@Base+0xb9c4>
   21128:	str	r3, [sp, #8]
   2112c:	mov	r3, #3
   21130:	add	ip, pc, ip
   21134:	add	r2, pc, r2
   21138:	str	r2, [sp, #12]
   2113c:	stm	sp, {r3, lr}
   21140:	str	ip, [sp, #16]
   21144:	ldr	r3, [sp, #256]	; 0x100
   21148:	mov	r2, sl
   2114c:	mov	r0, fp
   21150:	bl	2fbc0 <flatcc_json_parser_union_type_vector@@Base>
   21154:	mov	r6, r0
   21158:	b	20f94 <_start@@Base+0xb774>
   2115c:	add	r4, r6, #1
   21160:	sub	r3, sl, r4
   21164:	cmp	r3, #1
   21168:	ble	2117c <_start@@Base+0xb95c>
   2116c:	ldrb	r3, [r6, #1]
   21170:	cmp	r3, #32
   21174:	bhi	21010 <_start@@Base+0xb7f0>
   21178:	beq	238d8 <_start@@Base+0xe0b8>
   2117c:	mov	r1, r4
   21180:	mov	r2, sl
   21184:	mov	r0, fp
   21188:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2118c:	ldr	r3, [sp, #608]	; 0x260
   21190:	mov	r4, r0
   21194:	b	20d88 <_start@@Base+0xb568>
   21198:	add	r4, r4, #1
   2119c:	mov	r3, #0
   211a0:	sub	r5, sl, r4
   211a4:	str	r3, [fp, #12]
   211a8:	b	20dbc <_start@@Base+0xb59c>
   211ac:	nop			; (mov r0, r0)
   211b0:	cmnvs	lr, pc, asr r9
   211b4:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   211b8:	cmnvs	lr, r0, lsl #18
   211bc:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   211c0:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   211c4:	rsbsvc	r6, r2, r6, ror #10
   211c8:	strvs	r0, [r0, #-0]
   211cc:	stclvs	6, cr7, [pc, #-420]!	; 21030 <_start@@Base+0xb810>
   211d0:	andeq	r0, r0, r0
   211d4:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   211d8:			; <UNDEFINED> instruction: 0xffff0000
   211dc:	andeq	r3, r3, r8, ror #30
   211e0:			; <UNDEFINED> instruction: 0xffff4948
   211e4:	muleq	r0, r0, fp
   211e8:	andeq	r3, r3, r4, lsr lr
   211ec:	cmp	r5, #6
   211f0:	ble	20f80 <_start@@Base+0xb760>
   211f4:	mov	r3, #6
   211f8:	mov	r2, sl
   211fc:	mov	r1, r4
   21200:	mov	r0, fp
   21204:	bl	18678 <_start@@Base+0x2e58>
   21208:	cmp	r0, r4
   2120c:	mov	r6, r0
   21210:	beq	20f80 <_start@@Base+0xb760>
   21214:	mov	r3, #0
   21218:	mov	r1, #3
   2121c:	ldr	r0, [fp]
   21220:	str	r3, [sp, #612]	; 0x264
   21224:	bl	27fb8 <flatcc_builder_start_table@@Base>
   21228:	cmp	r0, #0
   2122c:	bne	217b4 <_start@@Base+0xbf94>
   21230:	add	r3, sp, #620	; 0x26c
   21234:	mov	r2, sl
   21238:	mov	r1, r6
   2123c:	mov	r0, fp
   21240:	bl	185c4 <_start@@Base+0x2da4>
   21244:	ldr	r2, [pc, #-100]	; 211e8 <_start@@Base+0xb9c8>
   21248:	ldr	r3, [sp, #620]	; 0x26c
   2124c:	add	r2, pc, r2
   21250:	add	r2, r2, #648	; 0x288
   21254:	str	r2, [sp, #596]	; 0x254
   21258:	cmp	r3, #0
   2125c:	beq	21768 <_start@@Base+0xbf48>
   21260:	mov	r9, fp
   21264:	mov	fp, sl
   21268:	cmp	fp, r0
   2126c:	beq	217f8 <_start@@Base+0xbfd8>
   21270:	ldrb	r3, [r0]
   21274:	cmp	r3, #34	; 0x22
   21278:	moveq	r3, #0
   2127c:	addeq	r0, r0, #1
   21280:	streq	r3, [r9, #12]
   21284:	beq	21298 <_start@@Base+0xba78>
   21288:	cmp	r3, #46	; 0x2e
   2128c:	movne	r3, #1
   21290:	strne	r3, [r9, #12]
   21294:	beq	2219c <_start@@Base+0xc97c>
   21298:	sub	r3, fp, r0
   2129c:	cmp	r3, #8
   212a0:	bls	21810 <_start@@Base+0xbff0>
   212a4:	ldrb	r2, [r0, #7]
   212a8:	mov	r3, #0
   212ac:	ldrb	r4, [r0, #6]
   212b0:	lsr	r1, r4, #24
   212b4:	str	r1, [sp, #308]	; 0x134
   212b8:	lsl	r1, r4, #8
   212bc:	str	r1, [sp, #304]	; 0x130
   212c0:	add	r1, sp, #304	; 0x130
   212c4:	ldrd	r4, [r1]
   212c8:	orr	r4, r4, r2
   212cc:	orr	r5, r5, r3
   212d0:	mov	r2, r4
   212d4:	mov	r3, r5
   212d8:	ldrb	r4, [r0, #5]
   212dc:	lsr	r1, r4, #16
   212e0:	str	r1, [sp, #188]	; 0xbc
   212e4:	lsl	r1, r4, #16
   212e8:	str	r1, [sp, #184]	; 0xb8
   212ec:	ldrd	r4, [sp, #184]	; 0xb8
   212f0:	orr	r4, r4, r2
   212f4:	orr	r5, r5, r3
   212f8:	mov	r2, r4
   212fc:	mov	r3, r5
   21300:	ldrb	r4, [r0, #4]
   21304:	lsr	r1, r4, #8
   21308:	str	r1, [sp, #132]	; 0x84
   2130c:	lsl	r1, r4, #24
   21310:	str	r1, [sp, #128]	; 0x80
   21314:	ldrd	r4, [sp, #128]	; 0x80
   21318:	orr	r4, r4, r2
   2131c:	orr	r5, r5, r3
   21320:	mov	r2, r4
   21324:	mov	r3, r5
   21328:	ldrb	r1, [r0, #3]
   2132c:	str	r1, [sp, #148]	; 0x94
   21330:	mov	r1, #0
   21334:	str	r1, [sp, #144]	; 0x90
   21338:	ldrd	r4, [sp, #144]	; 0x90
   2133c:	orr	r4, r4, r2
   21340:	orr	r5, r5, r3
   21344:	mov	r2, r4
   21348:	mov	r3, r5
   2134c:	ldrb	r4, [r0, #2]
   21350:	lsl	r1, r4, #8
   21354:	str	r1, [sp, #108]	; 0x6c
   21358:	mov	r1, #0
   2135c:	str	r1, [sp, #104]	; 0x68
   21360:	ldrd	r4, [sp, #104]	; 0x68
   21364:	orr	r4, r4, r2
   21368:	orr	r5, r5, r3
   2136c:	mov	r2, r4
   21370:	mov	r3, r5
   21374:	ldrb	r4, [r0, #1]
   21378:	lsl	r1, r4, #16
   2137c:	str	r1, [sp, #76]	; 0x4c
   21380:	mov	r1, #0
   21384:	str	r1, [sp, #72]	; 0x48
   21388:	ldrd	r4, [sp, #72]	; 0x48
   2138c:	orr	r4, r4, r2
   21390:	orr	r5, r5, r3
   21394:	mov	r2, r4
   21398:	mov	r3, r5
   2139c:	ldrb	r4, [r0]
   213a0:	lsl	r1, r4, #24
   213a4:	str	r1, [sp, #52]	; 0x34
   213a8:	mov	r1, #0
   213ac:	str	r1, [sp, #48]	; 0x30
   213b0:	ldrd	r4, [sp, #48]	; 0x30
   213b4:	orr	r4, r4, r2
   213b8:	orr	r5, r5, r3
   213bc:	mov	r2, r4
   213c0:	mov	r3, r5
   213c4:	add	r5, pc, #948	; 0x3b4
   213c8:	ldrd	r4, [r5]
   213cc:	cmp	r3, r5
   213d0:	cmpeq	r2, r4
   213d4:	bne	217f8 <_start@@Base+0xbfd8>
   213d8:	add	r1, r0, #8
   213dc:	sub	r3, fp, r1
   213e0:	cmp	r3, #8
   213e4:	bls	21894 <_start@@Base+0xc074>
   213e8:	ldrb	r4, [r0, #15]
   213ec:	mov	r5, #0
   213f0:	ldrb	r2, [r0, #14]
   213f4:	lsl	r3, r2, #8
   213f8:	str	r3, [sp, #472]	; 0x1d8
   213fc:	add	r3, sp, #472	; 0x1d8
   21400:	lsr	ip, r2, #24
   21404:	str	ip, [sp, #476]	; 0x1dc
   21408:	ldrd	r2, [r3]
   2140c:	orr	r2, r2, r4
   21410:	orr	r3, r3, r5
   21414:	ldrb	r4, [r0, #13]
   21418:	lsr	ip, r4, #16
   2141c:	str	ip, [sp, #396]	; 0x18c
   21420:	lsl	ip, r4, #16
   21424:	str	ip, [sp, #392]	; 0x188
   21428:	add	ip, sp, #392	; 0x188
   2142c:	ldrd	r4, [ip]
   21430:	orr	r4, r4, r2
   21434:	orr	r5, r5, r3
   21438:	mov	r2, r4
   2143c:	mov	r3, r5
   21440:	ldrb	r4, [r0, #12]
   21444:	lsr	ip, r4, #8
   21448:	str	ip, [sp, #316]	; 0x13c
   2144c:	lsl	ip, r4, #24
   21450:	str	ip, [sp, #312]	; 0x138
   21454:	add	ip, sp, #312	; 0x138
   21458:	ldrd	r4, [ip]
   2145c:	orr	r4, r4, r2
   21460:	orr	r5, r5, r3
   21464:	mov	r2, r4
   21468:	mov	r3, r5
   2146c:	ldrb	ip, [r0, #11]
   21470:	str	ip, [sp, #348]	; 0x15c
   21474:	mov	ip, #0
   21478:	str	ip, [sp, #344]	; 0x158
   2147c:	add	ip, sp, #344	; 0x158
   21480:	ldrd	r4, [ip]
   21484:	orr	r4, r4, r2
   21488:	orr	r5, r5, r3
   2148c:	mov	r2, r4
   21490:	mov	r3, r5
   21494:	ldrb	r4, [r0, #10]
   21498:	lsl	ip, r4, #8
   2149c:	str	ip, [sp, #268]	; 0x10c
   214a0:	mov	ip, #0
   214a4:	str	ip, [sp, #264]	; 0x108
   214a8:	add	ip, sp, #264	; 0x108
   214ac:	ldrd	r4, [ip]
   214b0:	orr	r4, r4, r2
   214b4:	orr	r5, r5, r3
   214b8:	mov	r2, r4
   214bc:	mov	r3, r5
   214c0:	ldrb	r4, [r0, #9]
   214c4:	lsl	ip, r4, #16
   214c8:	str	ip, [sp, #228]	; 0xe4
   214cc:	mov	ip, #0
   214d0:	str	ip, [sp, #224]	; 0xe0
   214d4:	ldrd	r4, [sp, #224]	; 0xe0
   214d8:	orr	r4, r4, r2
   214dc:	orr	r5, r5, r3
   214e0:	mov	r2, r4
   214e4:	mov	r3, r5
   214e8:	ldrb	r4, [r0, #8]
   214ec:	lsl	ip, r4, #24
   214f0:	str	ip, [sp, #196]	; 0xc4
   214f4:	mov	ip, #0
   214f8:	str	ip, [sp, #192]	; 0xc0
   214fc:	ldrd	r4, [sp, #192]	; 0xc0
   21500:	orr	r4, r4, r2
   21504:	orr	r5, r5, r3
   21508:	mov	r2, r4
   2150c:	mov	r3, r5
   21510:	add	r5, pc, #624	; 0x270
   21514:	ldrd	r4, [r5]
   21518:	cmp	r3, r5
   2151c:	cmpeq	r2, r4
   21520:	bne	217fc <_start@@Base+0xbfdc>
   21524:	add	r7, r0, #16
   21528:	sub	r6, fp, r7
   2152c:	cmp	r6, #8
   21530:	bls	219f0 <_start@@Base+0xc1d0>
   21534:	ldrb	r4, [r0, #23]
   21538:	mov	r5, #0
   2153c:	ldrb	r2, [r0, #22]
   21540:	lsl	r3, r2, #8
   21544:	str	r3, [sp, #560]	; 0x230
   21548:	add	r3, sp, #560	; 0x230
   2154c:	lsr	r1, r2, #24
   21550:	str	r1, [sp, #564]	; 0x234
   21554:	ldrd	r2, [r3]
   21558:	orr	r2, r2, r4
   2155c:	orr	r3, r3, r5
   21560:	mov	r4, r2
   21564:	mov	r5, r3
   21568:	ldrb	r2, [r0, #21]
   2156c:	lsl	r3, r2, #16
   21570:	str	r3, [sp, #544]	; 0x220
   21574:	add	r3, sp, #544	; 0x220
   21578:	lsr	r1, r2, #16
   2157c:	str	r1, [sp, #548]	; 0x224
   21580:	ldrd	r2, [r3]
   21584:	orr	r2, r2, r4
   21588:	orr	r3, r3, r5
   2158c:	mov	r4, r2
   21590:	mov	r5, r3
   21594:	ldrb	r2, [r0, #20]
   21598:	lsl	r3, r2, #24
   2159c:	str	r3, [sp, #488]	; 0x1e8
   215a0:	add	r3, sp, #488	; 0x1e8
   215a4:	lsr	r1, r2, #8
   215a8:	str	r1, [sp, #492]	; 0x1ec
   215ac:	ldrd	r2, [r3]
   215b0:	orr	r2, r2, r4
   215b4:	orr	r3, r3, r5
   215b8:	ldrb	r1, [r0, #19]
   215bc:	str	r1, [sp, #508]	; 0x1fc
   215c0:	mov	r1, #0
   215c4:	str	r1, [sp, #504]	; 0x1f8
   215c8:	add	r1, sp, #504	; 0x1f8
   215cc:	ldrd	r4, [r1]
   215d0:	orr	r4, r4, r2
   215d4:	orr	r5, r5, r3
   215d8:	mov	r2, r4
   215dc:	mov	r3, r5
   215e0:	ldrb	r4, [r0, #18]
   215e4:	lsl	r1, r4, #8
   215e8:	str	r1, [sp, #460]	; 0x1cc
   215ec:	mov	r1, #0
   215f0:	str	r1, [sp, #456]	; 0x1c8
   215f4:	add	r1, sp, #456	; 0x1c8
   215f8:	ldrd	r4, [r1]
   215fc:	orr	r4, r4, r2
   21600:	orr	r5, r5, r3
   21604:	mov	r2, r4
   21608:	mov	r3, r5
   2160c:	ldrb	r4, [r0, #17]
   21610:	lsl	r1, r4, #16
   21614:	str	r1, [sp, #444]	; 0x1bc
   21618:	mov	r1, #0
   2161c:	str	r1, [sp, #440]	; 0x1b8
   21620:	add	r1, sp, #440	; 0x1b8
   21624:	ldrd	r4, [r1]
   21628:	orr	r4, r4, r2
   2162c:	orr	r5, r5, r3
   21630:	mov	r2, r4
   21634:	mov	r3, r5
   21638:	ldrb	r4, [r0, #16]
   2163c:	add	r1, pc, #332	; 0x14c
   21640:	ldrd	r0, [r1]
   21644:	lsl	ip, r4, #24
   21648:	str	ip, [sp, #388]	; 0x184
   2164c:	mov	ip, #0
   21650:	str	ip, [sp, #384]	; 0x180
   21654:	add	ip, sp, #384	; 0x180
   21658:	ldrd	r4, [ip]
   2165c:	orr	r4, r4, r2
   21660:	orr	r5, r5, r3
   21664:	mov	r2, r4
   21668:	mov	r3, r5
   2166c:	ldr	r4, [pc, #308]	; 217a8 <_start@@Base+0xbf88>
   21670:	mvn	r5, #0
   21674:	and	r5, r5, r3
   21678:	and	r4, r4, r2
   2167c:	cmp	r5, r1
   21680:	cmpeq	r4, r0
   21684:	beq	21a74 <_start@@Base+0xc254>
   21688:	add	r1, pc, #264	; 0x108
   2168c:	ldrd	r0, [r1]
   21690:	and	r2, r2, #-16777216	; 0xff000000
   21694:	cmp	r3, r1
   21698:	cmpeq	r2, r0
   2169c:	movne	r3, #1
   216a0:	moveq	r3, #0
   216a4:	cmp	r6, #5
   216a8:	orrle	r3, r3, #1
   216ac:	cmp	r3, #0
   216b0:	beq	22f70 <_start@@Base+0xd750>
   216b4:	add	r3, pc, #228	; 0xe4
   216b8:	ldrd	r2, [r3]
   216bc:	cmp	r5, r3
   216c0:	cmpeq	r4, r2
   216c4:	bne	216d0 <_start@@Base+0xbeb0>
   216c8:	cmp	r6, #6
   216cc:	bgt	22444 <_start@@Base+0xcc24>
   216d0:	mov	r1, r7
   216d4:	mov	r2, fp
   216d8:	mov	r0, r9
   216dc:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   216e0:	mov	sl, r0
   216e4:	sub	r3, fp, sl
   216e8:	cmp	r3, #1
   216ec:	ble	21700 <_start@@Base+0xbee0>
   216f0:	ldrb	r3, [sl]
   216f4:	cmp	r3, #32
   216f8:	bhi	21714 <_start@@Base+0xbef4>
   216fc:	beq	21950 <_start@@Base+0xc130>
   21700:	mov	r1, sl
   21704:	mov	r2, fp
   21708:	mov	r0, r9
   2170c:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   21710:	mov	sl, r0
   21714:	cmp	fp, sl
   21718:	beq	21968 <_start@@Base+0xc148>
   2171c:	ldrb	r3, [sl]
   21720:	cmp	r3, #44	; 0x2c
   21724:	beq	219a0 <_start@@Base+0xc180>
   21728:	mov	r5, sl
   2172c:	mov	r3, #0
   21730:	str	r3, [sp, #620]	; 0x26c
   21734:	ldrb	r3, [r5]
   21738:	mov	sl, fp
   2173c:	mov	fp, r9
   21740:	cmp	r3, #125	; 0x7d
   21744:	beq	21918 <_start@@Base+0xc0f8>
   21748:	mov	r3, #10
   2174c:	mov	r1, r5
   21750:	mov	r2, sl
   21754:	mov	r0, r9
   21758:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2175c:	ldr	r3, [sp, #620]	; 0x26c
   21760:	cmp	r3, #0
   21764:	bne	21260 <_start@@Base+0xba40>
   21768:	mov	r6, r0
   2176c:	ldr	r3, [fp, #24]
   21770:	cmp	r3, #0
   21774:	beq	21988 <_start@@Base+0xc168>
   21778:	b	217b4 <_start@@Base+0xbf94>
   2177c:	nop			; (mov r0, r0)
   21780:	bvs	1cfd540 <__bss_end__@@Base+0x1ca8174>
   21784:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21788:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   2178c:	rsbsvc	r6, r2, r6, ror #10
   21790:	ldrvs	r0, [r2, -r0]!
   21794:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   21798:	strvs	r0, [r0, -r0]
   2179c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   217a0:	ldrvs	r0, [r3, -r0]!
   217a4:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   217a8:			; <UNDEFINED> instruction: 0xffff0000
   217ac:			; <UNDEFINED> instruction: 0x000335b4
   217b0:	andeq	r3, r3, ip, lsr #11
   217b4:	mov	r1, r6
   217b8:	mov	r3, #33	; 0x21
   217bc:	mov	r2, sl
   217c0:	mov	r0, fp
   217c4:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   217c8:	ldr	r3, [sp, #612]	; 0x264
   217cc:	cmp	r3, #0
   217d0:	mov	r6, r0
   217d4:	beq	223ec <_start@@Base+0xcbcc>
   217d8:	mov	r1, #0
   217dc:	ldr	r0, [fp]
   217e0:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   217e4:	cmp	r0, #0
   217e8:	beq	223ec <_start@@Base+0xcbcc>
   217ec:	ldr	r3, [sp, #612]	; 0x264
   217f0:	str	r3, [r0]
   217f4:	b	20f94 <_start@@Base+0xb774>
   217f8:	mov	r1, r0
   217fc:	mov	r2, fp
   21800:	mov	r0, r9
   21804:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   21808:	mov	sl, r0
   2180c:	b	216e4 <_start@@Base+0xbec4>
   21810:	sub	r3, r3, #1
   21814:	cmp	r3, #7
   21818:	addls	pc, pc, r3, lsl #2
   2181c:	b	217f8 <_start@@Base+0xbfd8>
   21820:	b	21888 <_start@@Base+0xc068>
   21824:	b	2187c <_start@@Base+0xc05c>
   21828:	b	21870 <_start@@Base+0xc050>
   2182c:	b	21864 <_start@@Base+0xc044>
   21830:	b	21858 <_start@@Base+0xc038>
   21834:	b	2184c <_start@@Base+0xc02c>
   21838:	b	21840 <_start@@Base+0xc020>
   2183c:	b	212a4 <_start@@Base+0xba84>
   21840:	mov	r2, #0
   21844:	mov	r3, #0
   21848:	b	212ac <_start@@Base+0xba8c>
   2184c:	mov	r2, #0
   21850:	mov	r3, #0
   21854:	b	212d8 <_start@@Base+0xbab8>
   21858:	mov	r2, #0
   2185c:	mov	r3, #0
   21860:	b	21300 <_start@@Base+0xbae0>
   21864:	mov	r2, #0
   21868:	mov	r3, #0
   2186c:	b	21328 <_start@@Base+0xbb08>
   21870:	mov	r2, #0
   21874:	mov	r3, #0
   21878:	b	2134c <_start@@Base+0xbb2c>
   2187c:	mov	r2, #0
   21880:	mov	r3, #0
   21884:	b	21374 <_start@@Base+0xbb54>
   21888:	mov	r2, #0
   2188c:	mov	r3, #0
   21890:	b	2139c <_start@@Base+0xbb7c>
   21894:	sub	r3, r3, #1
   21898:	cmp	r3, #7
   2189c:	addls	pc, pc, r3, lsl #2
   218a0:	b	217fc <_start@@Base+0xbfdc>
   218a4:	b	2190c <_start@@Base+0xc0ec>
   218a8:	b	21900 <_start@@Base+0xc0e0>
   218ac:	b	218f4 <_start@@Base+0xc0d4>
   218b0:	b	218e8 <_start@@Base+0xc0c8>
   218b4:	b	218dc <_start@@Base+0xc0bc>
   218b8:	b	218d0 <_start@@Base+0xc0b0>
   218bc:	b	218c4 <_start@@Base+0xc0a4>
   218c0:	b	213e8 <_start@@Base+0xbbc8>
   218c4:	mov	r4, #0
   218c8:	mov	r5, #0
   218cc:	b	213f0 <_start@@Base+0xbbd0>
   218d0:	mov	r2, #0
   218d4:	mov	r3, #0
   218d8:	b	21414 <_start@@Base+0xbbf4>
   218dc:	mov	r2, #0
   218e0:	mov	r3, #0
   218e4:	b	21440 <_start@@Base+0xbc20>
   218e8:	mov	r2, #0
   218ec:	mov	r3, #0
   218f0:	b	2146c <_start@@Base+0xbc4c>
   218f4:	mov	r2, #0
   218f8:	mov	r3, #0
   218fc:	b	21494 <_start@@Base+0xbc74>
   21900:	mov	r2, #0
   21904:	mov	r3, #0
   21908:	b	214c0 <_start@@Base+0xbca0>
   2190c:	mov	r2, #0
   21910:	mov	r3, #0
   21914:	b	214e8 <_start@@Base+0xbcc8>
   21918:	add	r0, r5, #1
   2191c:	sub	r3, sl, r0
   21920:	cmp	r3, #1
   21924:	ble	21938 <_start@@Base+0xc118>
   21928:	ldrb	r3, [r5, #1]
   2192c:	cmp	r3, #32
   21930:	bhi	21768 <_start@@Base+0xbf48>
   21934:	beq	22350 <_start@@Base+0xcb30>
   21938:	mov	r1, r0
   2193c:	mov	r2, sl
   21940:	mov	r0, fp
   21944:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   21948:	ldr	r3, [sp, #620]	; 0x26c
   2194c:	b	21258 <_start@@Base+0xba38>
   21950:	ldrb	r3, [sl, #1]
   21954:	cmp	r3, #32
   21958:	addhi	sl, sl, #1
   2195c:	bls	21700 <_start@@Base+0xbee0>
   21960:	cmp	fp, sl
   21964:	bne	2171c <_start@@Base+0xbefc>
   21968:	mov	sl, fp
   2196c:	mov	fp, r9
   21970:	mov	r3, #0
   21974:	str	r3, [sp, #620]	; 0x26c
   21978:	ldr	r3, [fp, #24]
   2197c:	mov	r6, sl
   21980:	cmp	r3, #0
   21984:	bne	217b4 <_start@@Base+0xbf94>
   21988:	ldr	r0, [fp]
   2198c:	bl	289ac <flatcc_builder_end_table@@Base>
   21990:	cmp	r0, #0
   21994:	str	r0, [sp, #612]	; 0x264
   21998:	beq	217b4 <_start@@Base+0xbf94>
   2199c:	b	217d8 <_start@@Base+0xbfb8>
   219a0:	add	r0, sl, #1
   219a4:	sub	r3, fp, r0
   219a8:	cmp	r3, #1
   219ac:	ble	219c0 <_start@@Base+0xc1a0>
   219b0:	ldrb	r3, [sl, #1]
   219b4:	cmp	r3, #32
   219b8:	bhi	219d0 <_start@@Base+0xc1b0>
   219bc:	beq	22e40 <_start@@Base+0xd620>
   219c0:	mov	r1, r0
   219c4:	mov	r2, fp
   219c8:	mov	r0, r9
   219cc:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   219d0:	cmp	fp, r0
   219d4:	beq	22e58 <_start@@Base+0xd638>
   219d8:	ldrb	r3, [r0]
   219dc:	cmp	r3, #125	; 0x7d
   219e0:	beq	238ec <_start@@Base+0xe0cc>
   219e4:	mov	r3, #1
   219e8:	str	r3, [sp, #620]	; 0x26c
   219ec:	b	21268 <_start@@Base+0xba48>
   219f0:	sub	r3, r6, #1
   219f4:	cmp	r3, #7
   219f8:	addls	pc, pc, r3, lsl #2
   219fc:	b	216d0 <_start@@Base+0xbeb0>
   21a00:	b	21a68 <_start@@Base+0xc248>
   21a04:	b	21a5c <_start@@Base+0xc23c>
   21a08:	b	21a50 <_start@@Base+0xc230>
   21a0c:	b	21a44 <_start@@Base+0xc224>
   21a10:	b	21a38 <_start@@Base+0xc218>
   21a14:	b	21a2c <_start@@Base+0xc20c>
   21a18:	b	21a20 <_start@@Base+0xc200>
   21a1c:	b	21534 <_start@@Base+0xbd14>
   21a20:	mov	r4, #0
   21a24:	mov	r5, #0
   21a28:	b	2153c <_start@@Base+0xbd1c>
   21a2c:	mov	r4, #0
   21a30:	mov	r5, #0
   21a34:	b	21568 <_start@@Base+0xbd48>
   21a38:	mov	r4, #0
   21a3c:	mov	r5, #0
   21a40:	b	21594 <_start@@Base+0xbd74>
   21a44:	mov	r2, #0
   21a48:	mov	r3, #0
   21a4c:	b	215b8 <_start@@Base+0xbd98>
   21a50:	mov	r2, #0
   21a54:	mov	r3, #0
   21a58:	b	215e0 <_start@@Base+0xbdc0>
   21a5c:	mov	r2, #0
   21a60:	mov	r3, #0
   21a64:	b	2160c <_start@@Base+0xbdec>
   21a68:	mov	r2, #0
   21a6c:	mov	r3, #0
   21a70:	b	21638 <_start@@Base+0xbe18>
   21a74:	cmp	r6, #6
   21a78:	ble	216d0 <_start@@Base+0xbeb0>
   21a7c:	mov	r3, #6
   21a80:	mov	r2, fp
   21a84:	mov	r1, r7
   21a88:	mov	r0, r9
   21a8c:	bl	18678 <_start@@Base+0x2e58>
   21a90:	cmp	r7, r0
   21a94:	mov	sl, r0
   21a98:	beq	216d0 <_start@@Base+0xbeb0>
   21a9c:	mov	r1, #2
   21aa0:	ldr	r0, [r9]
   21aa4:	bl	27fb8 <flatcc_builder_start_table@@Base>
   21aa8:	cmp	r0, #0
   21aac:	bne	21e64 <_start@@Base+0xc644>
   21ab0:	add	r3, sp, #624	; 0x270
   21ab4:	mov	r1, sl
   21ab8:	mov	r2, fp
   21abc:	mov	r0, r9
   21ac0:	bl	185c4 <_start@@Base+0x2da4>
   21ac4:	ldr	r3, [pc, #-800]	; 217ac <_start@@Base+0xbf8c>
   21ac8:	ldr	r5, [pc, #-800]	; 217b0 <_start@@Base+0xbf90>
   21acc:	add	r3, pc, r3
   21ad0:	add	r3, r3, #540	; 0x21c
   21ad4:	add	r5, pc, r5
   21ad8:	mov	r8, r3
   21adc:	ldr	r3, [sp, #624]	; 0x270
   21ae0:	add	r5, r5, #552	; 0x228
   21ae4:	cmp	r3, #0
   21ae8:	beq	21e54 <_start@@Base+0xc634>
   21aec:	mov	r1, r0
   21af0:	cmp	fp, r1
   21af4:	beq	21e8c <_start@@Base+0xc66c>
   21af8:	ldrb	r3, [r1]
   21afc:	cmp	r3, #34	; 0x22
   21b00:	moveq	r3, #0
   21b04:	addeq	r1, r1, #1
   21b08:	streq	r3, [r9, #12]
   21b0c:	beq	21b20 <_start@@Base+0xc300>
   21b10:	cmp	r3, #46	; 0x2e
   21b14:	movne	r3, #1
   21b18:	strne	r3, [r9, #12]
   21b1c:	beq	221b4 <_start@@Base+0xc994>
   21b20:	sub	r3, fp, r1
   21b24:	cmp	r3, #8
   21b28:	bls	21ea0 <_start@@Base+0xc680>
   21b2c:	ldrb	r2, [r1, #7]
   21b30:	mov	r3, #0
   21b34:	ldrb	r6, [r1, #6]
   21b38:	lsr	r0, r6, #24
   21b3c:	str	r0, [sp, #332]	; 0x14c
   21b40:	lsl	r0, r6, #8
   21b44:	str	r0, [sp, #328]	; 0x148
   21b48:	add	r0, sp, #328	; 0x148
   21b4c:	ldrd	r6, [r0]
   21b50:	orr	r6, r6, r2
   21b54:	orr	r7, r7, r3
   21b58:	mov	r2, r6
   21b5c:	mov	r3, r7
   21b60:	ldrb	r6, [r1, #5]
   21b64:	lsr	r0, r6, #16
   21b68:	str	r0, [sp, #204]	; 0xcc
   21b6c:	lsl	r0, r6, #16
   21b70:	str	r0, [sp, #200]	; 0xc8
   21b74:	ldrd	r6, [sp, #200]	; 0xc8
   21b78:	orr	r6, r6, r2
   21b7c:	orr	r7, r7, r3
   21b80:	mov	r2, r6
   21b84:	mov	r3, r7
   21b88:	ldrb	r6, [r1, #4]
   21b8c:	lsr	r0, r6, #8
   21b90:	str	r0, [sp, #140]	; 0x8c
   21b94:	lsl	r0, r6, #24
   21b98:	str	r0, [sp, #136]	; 0x88
   21b9c:	ldrd	r6, [sp, #136]	; 0x88
   21ba0:	orr	r6, r6, r2
   21ba4:	orr	r7, r7, r3
   21ba8:	mov	r2, r6
   21bac:	mov	r3, r7
   21bb0:	ldrb	r0, [r1, #3]
   21bb4:	str	r0, [sp, #156]	; 0x9c
   21bb8:	mov	r0, #0
   21bbc:	str	r0, [sp, #152]	; 0x98
   21bc0:	ldrd	r6, [sp, #152]	; 0x98
   21bc4:	orr	r6, r6, r2
   21bc8:	orr	r7, r7, r3
   21bcc:	mov	r2, r6
   21bd0:	mov	r3, r7
   21bd4:	ldrb	r6, [r1, #2]
   21bd8:	lsl	r0, r6, #8
   21bdc:	str	r0, [sp, #116]	; 0x74
   21be0:	mov	r0, #0
   21be4:	str	r0, [sp, #112]	; 0x70
   21be8:	ldrd	r6, [sp, #112]	; 0x70
   21bec:	orr	r6, r6, r2
   21bf0:	orr	r7, r7, r3
   21bf4:	mov	r2, r6
   21bf8:	mov	r3, r7
   21bfc:	ldrb	r6, [r1, #1]
   21c00:	lsl	r0, r6, #16
   21c04:	str	r0, [sp, #92]	; 0x5c
   21c08:	mov	r0, #0
   21c0c:	str	r0, [sp, #88]	; 0x58
   21c10:	ldrd	r6, [sp, #88]	; 0x58
   21c14:	orr	r6, r6, r2
   21c18:	orr	r7, r7, r3
   21c1c:	mov	r2, r6
   21c20:	mov	r3, r7
   21c24:	ldrb	r6, [r1]
   21c28:	lsl	r0, r6, #24
   21c2c:	str	r0, [sp, #60]	; 0x3c
   21c30:	mov	r0, #0
   21c34:	str	r0, [sp, #56]	; 0x38
   21c38:	ldrd	r6, [sp, #56]	; 0x38
   21c3c:	orr	r6, r6, r2
   21c40:	orr	r7, r7, r3
   21c44:	mov	r2, r6
   21c48:	mov	r3, r7
   21c4c:	add	r7, pc, #908	; 0x38c
   21c50:	ldrd	r6, [r7]
   21c54:	cmp	r3, r7
   21c58:	cmpeq	r2, r6
   21c5c:	bne	21e8c <_start@@Base+0xc66c>
   21c60:	add	r4, r1, #8
   21c64:	sub	ip, fp, r4
   21c68:	cmp	ip, #8
   21c6c:	bls	21f24 <_start@@Base+0xc704>
   21c70:	ldrb	r6, [r1, #15]
   21c74:	mov	r7, #0
   21c78:	ldrb	r2, [r1, #14]
   21c7c:	lsl	r3, r2, #8
   21c80:	str	r3, [sp, #496]	; 0x1f0
   21c84:	add	r3, sp, #496	; 0x1f0
   21c88:	lsr	r0, r2, #24
   21c8c:	str	r0, [sp, #500]	; 0x1f4
   21c90:	ldrd	r2, [r3]
   21c94:	orr	r2, r2, r6
   21c98:	orr	r3, r3, r7
   21c9c:	mov	r6, r2
   21ca0:	mov	r7, r3
   21ca4:	ldrb	r2, [r1, #13]
   21ca8:	lsl	r3, r2, #16
   21cac:	str	r3, [sp, #416]	; 0x1a0
   21cb0:	add	r3, sp, #416	; 0x1a0
   21cb4:	lsr	r0, r2, #16
   21cb8:	str	r0, [sp, #420]	; 0x1a4
   21cbc:	ldrd	r2, [r3]
   21cc0:	orr	r2, r2, r6
   21cc4:	orr	r3, r3, r7
   21cc8:	mov	r6, r2
   21ccc:	mov	r7, r3
   21cd0:	ldrb	r2, [r1, #12]
   21cd4:	lsl	r3, r2, #24
   21cd8:	str	r3, [sp, #336]	; 0x150
   21cdc:	add	r3, sp, #336	; 0x150
   21ce0:	lsr	r0, r2, #8
   21ce4:	str	r0, [sp, #340]	; 0x154
   21ce8:	ldrd	r2, [r3]
   21cec:	orr	r2, r2, r6
   21cf0:	orr	r3, r3, r7
   21cf4:	ldrb	r0, [r1, #11]
   21cf8:	str	r0, [sp, #364]	; 0x16c
   21cfc:	mov	r0, #0
   21d00:	str	r0, [sp, #360]	; 0x168
   21d04:	add	r0, sp, #360	; 0x168
   21d08:	ldrd	r6, [r0]
   21d0c:	orr	r6, r6, r2
   21d10:	orr	r7, r7, r3
   21d14:	mov	r2, r6
   21d18:	mov	r3, r7
   21d1c:	ldrb	r6, [r1, #10]
   21d20:	lsl	r0, r6, #8
   21d24:	str	r0, [sp, #284]	; 0x11c
   21d28:	mov	r0, #0
   21d2c:	str	r0, [sp, #280]	; 0x118
   21d30:	add	r0, sp, #280	; 0x118
   21d34:	ldrd	r6, [r0]
   21d38:	orr	r6, r6, r2
   21d3c:	orr	r7, r7, r3
   21d40:	mov	r2, r6
   21d44:	mov	r3, r7
   21d48:	ldrb	r6, [r1, #9]
   21d4c:	lsl	r0, r6, #16
   21d50:	str	r0, [sp, #252]	; 0xfc
   21d54:	mov	r0, #0
   21d58:	str	r0, [sp, #248]	; 0xf8
   21d5c:	ldrd	r6, [sp, #248]	; 0xf8
   21d60:	orr	r6, r6, r2
   21d64:	orr	r7, r7, r3
   21d68:	mov	r2, r6
   21d6c:	mov	r3, r7
   21d70:	ldrb	r6, [r1, #8]
   21d74:	add	r1, pc, #620	; 0x26c
   21d78:	ldrd	r0, [r1]
   21d7c:	lsl	lr, r6, #24
   21d80:	str	lr, [sp, #172]	; 0xac
   21d84:	mov	lr, #0
   21d88:	str	lr, [sp, #168]	; 0xa8
   21d8c:	ldrd	r6, [sp, #168]	; 0xa8
   21d90:	orr	r6, r6, r2
   21d94:	orr	r7, r7, r3
   21d98:	mov	r2, r6
   21d9c:	cmp	r7, r1
   21da0:	bic	r6, r6, #255	; 0xff
   21da4:	cmpeq	r6, r0
   21da8:	beq	22068 <_start@@Base+0xc848>
   21dac:	add	r1, pc, #572	; 0x23c
   21db0:	ldrd	r0, [r1]
   21db4:	cmp	r7, r1
   21db8:	cmpeq	r2, r0
   21dbc:	bne	21dc8 <_start@@Base+0xc5a8>
   21dc0:	cmp	ip, #8
   21dc4:	bgt	22200 <_start@@Base+0xc9e0>
   21dc8:	mov	r1, r4
   21dcc:	mov	r2, fp
   21dd0:	mov	r0, r9
   21dd4:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   21dd8:	mov	r4, r0
   21ddc:	sub	r3, fp, r4
   21de0:	cmp	r3, #1
   21de4:	ble	21df8 <_start@@Base+0xc5d8>
   21de8:	ldrb	r3, [r4]
   21dec:	cmp	r3, #32
   21df0:	bhi	21e0c <_start@@Base+0xc5ec>
   21df4:	beq	22000 <_start@@Base+0xc7e0>
   21df8:	mov	r1, r4
   21dfc:	mov	r2, fp
   21e00:	mov	r0, r9
   21e04:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   21e08:	mov	r4, r0
   21e0c:	cmp	fp, r4
   21e10:	beq	22018 <_start@@Base+0xc7f8>
   21e14:	ldrb	r3, [r4]
   21e18:	cmp	r3, #44	; 0x2c
   21e1c:	beq	2214c <_start@@Base+0xc92c>
   21e20:	mov	r3, #0
   21e24:	str	r3, [sp, #624]	; 0x270
   21e28:	ldrb	r3, [r4]
   21e2c:	cmp	r3, #125	; 0x7d
   21e30:	beq	21fa8 <_start@@Base+0xc788>
   21e34:	mov	r3, #10
   21e38:	mov	r1, r4
   21e3c:	mov	r2, fp
   21e40:	mov	r0, r9
   21e44:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   21e48:	ldr	r3, [sp, #624]	; 0x270
   21e4c:	cmp	r3, #0
   21e50:	bne	21aec <_start@@Base+0xc2cc>
   21e54:	mov	sl, r0
   21e58:	ldr	r3, [r9, #24]
   21e5c:	cmp	r3, #0
   21e60:	beq	22030 <_start@@Base+0xc810>
   21e64:	mov	r5, sl
   21e68:	mov	sl, fp
   21e6c:	mov	fp, r9
   21e70:	mov	r1, r5
   21e74:	mov	r3, #33	; 0x21
   21e78:	mov	r2, sl
   21e7c:	mov	r0, fp
   21e80:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   21e84:	mov	r6, r0
   21e88:	b	217b4 <_start@@Base+0xbf94>
   21e8c:	mov	r2, fp
   21e90:	mov	r0, r9
   21e94:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   21e98:	mov	r4, r0
   21e9c:	b	21ddc <_start@@Base+0xc5bc>
   21ea0:	sub	r3, r3, #1
   21ea4:	cmp	r3, #7
   21ea8:	addls	pc, pc, r3, lsl #2
   21eac:	b	21e8c <_start@@Base+0xc66c>
   21eb0:	b	21f18 <_start@@Base+0xc6f8>
   21eb4:	b	21f0c <_start@@Base+0xc6ec>
   21eb8:	b	21f00 <_start@@Base+0xc6e0>
   21ebc:	b	21ef4 <_start@@Base+0xc6d4>
   21ec0:	b	21ee8 <_start@@Base+0xc6c8>
   21ec4:	b	21edc <_start@@Base+0xc6bc>
   21ec8:	b	21ed0 <_start@@Base+0xc6b0>
   21ecc:	b	21b2c <_start@@Base+0xc30c>
   21ed0:	mov	r2, #0
   21ed4:	mov	r3, #0
   21ed8:	b	21b34 <_start@@Base+0xc314>
   21edc:	mov	r2, #0
   21ee0:	mov	r3, #0
   21ee4:	b	21b60 <_start@@Base+0xc340>
   21ee8:	mov	r2, #0
   21eec:	mov	r3, #0
   21ef0:	b	21b88 <_start@@Base+0xc368>
   21ef4:	mov	r2, #0
   21ef8:	mov	r3, #0
   21efc:	b	21bb0 <_start@@Base+0xc390>
   21f00:	mov	r2, #0
   21f04:	mov	r3, #0
   21f08:	b	21bd4 <_start@@Base+0xc3b4>
   21f0c:	mov	r2, #0
   21f10:	mov	r3, #0
   21f14:	b	21bfc <_start@@Base+0xc3dc>
   21f18:	mov	r2, #0
   21f1c:	mov	r3, #0
   21f20:	b	21c24 <_start@@Base+0xc404>
   21f24:	sub	r3, ip, #1
   21f28:	cmp	r3, #7
   21f2c:	addls	pc, pc, r3, lsl #2
   21f30:	b	21dc8 <_start@@Base+0xc5a8>
   21f34:	b	21f9c <_start@@Base+0xc77c>
   21f38:	b	21f90 <_start@@Base+0xc770>
   21f3c:	b	21f84 <_start@@Base+0xc764>
   21f40:	b	21f78 <_start@@Base+0xc758>
   21f44:	b	21f6c <_start@@Base+0xc74c>
   21f48:	b	21f60 <_start@@Base+0xc740>
   21f4c:	b	21f54 <_start@@Base+0xc734>
   21f50:	b	21c70 <_start@@Base+0xc450>
   21f54:	mov	r6, #0
   21f58:	mov	r7, #0
   21f5c:	b	21c78 <_start@@Base+0xc458>
   21f60:	mov	r6, #0
   21f64:	mov	r7, #0
   21f68:	b	21ca4 <_start@@Base+0xc484>
   21f6c:	mov	r6, #0
   21f70:	mov	r7, #0
   21f74:	b	21cd0 <_start@@Base+0xc4b0>
   21f78:	mov	r2, #0
   21f7c:	mov	r3, #0
   21f80:	b	21cf4 <_start@@Base+0xc4d4>
   21f84:	mov	r2, #0
   21f88:	mov	r3, #0
   21f8c:	b	21d1c <_start@@Base+0xc4fc>
   21f90:	mov	r2, #0
   21f94:	mov	r3, #0
   21f98:	b	21d48 <_start@@Base+0xc528>
   21f9c:	mov	r2, #0
   21fa0:	mov	r3, #0
   21fa4:	b	21d70 <_start@@Base+0xc550>
   21fa8:	add	r0, r4, #1
   21fac:	sub	r3, fp, r0
   21fb0:	cmp	r3, #1
   21fb4:	ble	21fc8 <_start@@Base+0xc7a8>
   21fb8:	ldrb	r3, [r4, #1]
   21fbc:	cmp	r3, #32
   21fc0:	bhi	21e54 <_start@@Base+0xc634>
   21fc4:	beq	22364 <_start@@Base+0xcb44>
   21fc8:	mov	r1, r0
   21fcc:	mov	r2, fp
   21fd0:	mov	r0, r9
   21fd4:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   21fd8:	ldr	r3, [sp, #624]	; 0x270
   21fdc:	b	21ae4 <_start@@Base+0xc2c4>
   21fe0:	svcpl	0x00626262
   21fe4:	cmnvs	r1, r1, ror #2
   21fe8:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   21fec:	subsvs	r7, pc, #116, 6	; 0xd0000001
   21ff0:	cmnvs	r2, pc, asr r4
   21ff4:	subsvs	r7, pc, #116, 6	; 0xd0000001
   21ff8:	andeq	r1, r0, r4, lsr #17
   21ffc:	strdeq	r2, [r3], -r0
   22000:	ldrb	r3, [r4, #1]
   22004:	cmp	r3, #32
   22008:	addhi	r4, r4, #1
   2200c:	bls	21df8 <_start@@Base+0xc5d8>
   22010:	cmp	fp, r4
   22014:	bne	21e14 <_start@@Base+0xc5f4>
   22018:	mov	r3, #0
   2201c:	str	r3, [sp, #624]	; 0x270
   22020:	ldr	r3, [r9, #24]
   22024:	mov	sl, fp
   22028:	cmp	r3, #0
   2202c:	bne	21e64 <_start@@Base+0xc644>
   22030:	ldr	r0, [r9]
   22034:	bl	289ac <flatcc_builder_end_table@@Base>
   22038:	subs	r4, r0, #0
   2203c:	beq	21e64 <_start@@Base+0xc644>
   22040:	mov	r1, #1
   22044:	ldr	r0, [r9]
   22048:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   2204c:	cmp	r0, #0
   22050:	bne	22834 <_start@@Base+0xd014>
   22054:	mov	r5, sl
   22058:	mov	r6, r5
   2205c:	mov	sl, fp
   22060:	mov	fp, r9
   22064:	b	217b4 <_start@@Base+0xbf94>
   22068:	cmp	ip, #7
   2206c:	ble	21dc8 <_start@@Base+0xc5a8>
   22070:	mov	r3, #7
   22074:	mov	r2, fp
   22078:	mov	r1, r4
   2207c:	mov	r0, r9
   22080:	bl	18678 <_start@@Base+0x2e58>
   22084:	cmp	r4, r0
   22088:	mov	r6, r0
   2208c:	beq	21dc8 <_start@@Base+0xc5a8>
   22090:	ldr	r1, [sp, #168]	; 0xa8
   22094:	mov	r2, #0
   22098:	mov	r3, #0
   2209c:	str	r1, [sp, #628]	; 0x274
   220a0:	add	r1, sp, #632	; 0x278
   220a4:	cmp	fp, r0
   220a8:	strd	r2, [r1]
   220ac:	add	r1, sp, #640	; 0x280
   220b0:	strd	r2, [r1]
   220b4:	beq	23a6c <_start@@Base+0xe24c>
   220b8:	str	r1, [sp]
   220bc:	add	r3, sp, #628	; 0x274
   220c0:	mov	r1, r0
   220c4:	mov	r2, fp
   220c8:	mov	r0, r9
   220cc:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   220d0:	cmp	r6, r0
   220d4:	mov	r4, r0
   220d8:	beq	23a6c <_start@@Base+0xe24c>
   220dc:	ldr	r1, [sp, #628]	; 0x274
   220e0:	add	r3, sp, #640	; 0x280
   220e4:	cmp	r1, #0
   220e8:	ldrd	r2, [r3]
   220ec:	beq	22338 <_start@@Base+0xcb18>
   220f0:	cmp	r3, #-2147483648	; 0x80000000
   220f4:	cmpeq	r2, #0
   220f8:	bhi	23998 <_start@@Base+0xe178>
   220fc:	rsbs	r2, r2, #0
   22100:	rsc	r3, r3, #0
   22104:	add	r1, sp, #632	; 0x278
   22108:	strd	r2, [r1]
   2210c:	orrs	r3, r2, r3
   22110:	bne	22120 <_start@@Base+0xc900>
   22114:	ldr	r3, [r9, #8]
   22118:	tst	r3, #2
   2211c:	beq	21ddc <_start@@Base+0xc5bc>
   22120:	mov	r3, #8
   22124:	mov	r2, r3
   22128:	mov	r1, #0
   2212c:	ldr	r0, [r9]
   22130:	bl	299f8 <flatcc_builder_table_add@@Base>
   22134:	cmp	r0, #0
   22138:	beq	238c8 <_start@@Base+0xe0a8>
   2213c:	add	r3, sp, #632	; 0x278
   22140:	ldrd	r2, [r3]
   22144:	strd	r2, [r0]
   22148:	b	21ddc <_start@@Base+0xc5bc>
   2214c:	add	r1, r4, #1
   22150:	sub	r3, fp, r1
   22154:	cmp	r3, #1
   22158:	ble	2216c <_start@@Base+0xc94c>
   2215c:	ldrb	r3, [r4, #1]
   22160:	cmp	r3, #32
   22164:	bhi	2217c <_start@@Base+0xc95c>
   22168:	beq	22ed8 <_start@@Base+0xd6b8>
   2216c:	mov	r2, fp
   22170:	mov	r0, r9
   22174:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   22178:	mov	r1, r0
   2217c:	cmp	fp, r1
   22180:	beq	22ef0 <_start@@Base+0xd6d0>
   22184:	ldrb	r3, [r1]
   22188:	cmp	r3, #125	; 0x7d
   2218c:	beq	23930 <_start@@Base+0xe110>
   22190:	mov	r3, #1
   22194:	str	r3, [sp, #624]	; 0x270
   22198:	b	21af0 <_start@@Base+0xc2d0>
   2219c:	mov	r1, r0
   221a0:	mov	r3, #5
   221a4:	mov	r2, fp
   221a8:	mov	r0, r9
   221ac:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   221b0:	b	21298 <_start@@Base+0xba78>
   221b4:	mov	r3, #5
   221b8:	mov	r2, fp
   221bc:	mov	r0, r9
   221c0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   221c4:	mov	r1, r0
   221c8:	b	21b20 <_start@@Base+0xc300>
   221cc:	ldrb	r3, [r6, #1]
   221d0:	cmp	r3, #32
   221d4:	addhi	r6, r6, #1
   221d8:	bls	20fb0 <_start@@Base+0xb790>
   221dc:	cmp	sl, r6
   221e0:	bne	20fcc <_start@@Base+0xb7ac>
   221e4:	mov	r3, #0
   221e8:	str	r3, [sp, #608]	; 0x260
   221ec:	ldr	r3, [fp, #24]
   221f0:	mov	r4, sl
   221f4:	cmp	r3, #0
   221f8:	bne	2101c <_start@@Base+0xb7fc>
   221fc:	b	23a20 <_start@@Base+0xe200>
   22200:	mov	r3, #8
   22204:	mov	r2, fp
   22208:	mov	r1, r4
   2220c:	mov	r0, r9
   22210:	bl	18678 <_start@@Base+0x2e58>
   22214:	cmp	r4, r0
   22218:	mov	r6, r0
   2221c:	beq	21dc8 <_start@@Base+0xc5a8>
   22220:	cmp	fp, r0
   22224:	ldrd	r0, [sp, #168]	; 0xa8
   22228:	mov	r2, #0
   2222c:	mov	r3, #0
   22230:	add	r1, sp, #640	; 0x280
   22234:	str	r0, [sp, #628]	; 0x274
   22238:	str	r0, [sp, #632]	; 0x278
   2223c:	strd	r2, [r1]
   22240:	beq	239c4 <_start@@Base+0xe1a4>
   22244:	str	r1, [sp]
   22248:	add	r3, sp, #632	; 0x278
   2224c:	mov	r2, fp
   22250:	mov	r1, r6
   22254:	mov	r0, r9
   22258:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   2225c:	cmp	r6, r0
   22260:	mov	r4, r0
   22264:	beq	239c4 <_start@@Base+0xe1a4>
   22268:	ldr	r3, [sp, #632]	; 0x278
   2226c:	cmp	r3, #0
   22270:	bne	22eb0 <_start@@Base+0xd690>
   22274:	add	r3, sp, #640	; 0x280
   22278:	mov	r1, #0
   2227c:	ldrd	r2, [r3]
   22280:	mvn	r0, #0
   22284:	cmp	r3, r1
   22288:	cmpeq	r2, r0
   2228c:	strls	r2, [sp, #628]	; 0x274
   22290:	bhi	22f54 <_start@@Base+0xd734>
   22294:	cmp	r2, #0
   22298:	bne	222a8 <_start@@Base+0xca88>
   2229c:	ldr	r3, [r9, #8]
   222a0:	tst	r3, #2
   222a4:	beq	21ddc <_start@@Base+0xc5bc>
   222a8:	mov	r3, #4
   222ac:	mov	r2, r3
   222b0:	mov	r1, #1
   222b4:	ldr	r0, [r9]
   222b8:	bl	299f8 <flatcc_builder_table_add@@Base>
   222bc:	cmp	r0, #0
   222c0:	beq	238c8 <_start@@Base+0xe0a8>
   222c4:	ldr	r3, [sp, #628]	; 0x274
   222c8:	str	r3, [r0]
   222cc:	b	21ddc <_start@@Base+0xc5bc>
   222d0:	add	r4, r6, #1
   222d4:	sub	r3, sl, r4
   222d8:	cmp	r3, #1
   222dc:	ble	222f0 <_start@@Base+0xcad0>
   222e0:	ldrb	r3, [r6, #1]
   222e4:	cmp	r3, #32
   222e8:	bhi	22304 <_start@@Base+0xcae4>
   222ec:	beq	23a9c <_start@@Base+0xe27c>
   222f0:	mov	r1, r4
   222f4:	mov	r2, sl
   222f8:	mov	r0, fp
   222fc:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   22300:	mov	r4, r0
   22304:	cmp	sl, r4
   22308:	beq	23bd8 <_start@@Base+0xe3b8>
   2230c:	ldrb	r3, [r4]
   22310:	cmp	r3, #125	; 0x7d
   22314:	beq	23b04 <_start@@Base+0xe2e4>
   22318:	cmp	sl, r4
   2231c:	mov	r3, #1
   22320:	str	r3, [sp, #608]	; 0x260
   22324:	ldreq	r5, [sp, #580]	; 0x244
   22328:	bne	20d9c <_start@@Base+0xb57c>
   2232c:	mov	r6, #0
   22330:	mov	r7, #0
   22334:	b	20f60 <_start@@Base+0xb740>
   22338:	cmp	r2, #0
   2233c:	sbcs	r1, r3, #0
   22340:	blt	23b88 <_start@@Base+0xe368>
   22344:	add	r1, sp, #632	; 0x278
   22348:	strd	r2, [r1]
   2234c:	b	2210c <_start@@Base+0xc8ec>
   22350:	ldrb	r3, [r5, #2]
   22354:	cmp	r3, #32
   22358:	bls	21938 <_start@@Base+0xc118>
   2235c:	add	r6, r5, #2
   22360:	b	2176c <_start@@Base+0xbf4c>
   22364:	ldrb	r3, [r4, #2]
   22368:	cmp	r3, #32
   2236c:	bls	21fc8 <_start@@Base+0xc7a8>
   22370:	add	sl, r4, #2
   22374:	b	21e58 <_start@@Base+0xc638>
   22378:	mov	r1, r4
   2237c:	mov	r3, #5
   22380:	mov	r2, sl
   22384:	mov	r0, fp
   22388:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2238c:	mov	r4, r0
   22390:	sub	r5, sl, r0
   22394:	b	20dbc <_start@@Base+0xb59c>
   22398:	mov	r1, r4
   2239c:	mov	r3, #5
   223a0:	mov	r2, sl
   223a4:	mov	r0, fp
   223a8:	bl	18678 <_start@@Base+0x2e58>
   223ac:	cmp	r0, r4
   223b0:	mov	r1, r0
   223b4:	beq	20f80 <_start@@Base+0xb760>
   223b8:	add	r3, sp, #612	; 0x264
   223bc:	mov	r2, sl
   223c0:	mov	r0, fp
   223c4:	bl	1a850 <_start@@Base+0x5030>
   223c8:	ldr	r3, [sp, #612]	; 0x264
   223cc:	cmp	r3, #0
   223d0:	mov	r6, r0
   223d4:	beq	223ec <_start@@Base+0xcbcc>
   223d8:	mov	r1, #1
   223dc:	ldr	r0, [fp]
   223e0:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   223e4:	cmp	r0, #0
   223e8:	bne	217ec <_start@@Base+0xbfcc>
   223ec:	mov	r4, r6
   223f0:	b	2101c <_start@@Base+0xb7fc>
   223f4:	mov	r1, r4
   223f8:	mov	r3, #7
   223fc:	mov	r2, sl
   22400:	mov	r0, fp
   22404:	bl	18678 <_start@@Base+0x2e58>
   22408:	cmp	r0, r4
   2240c:	mov	r1, r0
   22410:	beq	20f3c <_start@@Base+0xb71c>
   22414:	ldr	lr, [sp, #616]	; 0x268
   22418:	ldr	r2, [pc, #-1064]	; 21ff8 <_start@@Base+0xc7d8>
   2241c:	mov	ip, #3
   22420:	add	r2, pc, r2
   22424:	str	r2, [sp, #8]
   22428:	mov	r3, r8
   2242c:	stm	sp, {ip, lr}
   22430:	mov	r2, sl
   22434:	mov	r0, fp
   22438:	bl	2faf4 <flatcc_json_parser_union_vector@@Base>
   2243c:	mov	r6, r0
   22440:	b	20f94 <_start@@Base+0xb774>
   22444:	mov	r3, #6
   22448:	mov	r2, fp
   2244c:	mov	r1, r7
   22450:	mov	r0, r9
   22454:	bl	18678 <_start@@Base+0x2e58>
   22458:	cmp	r7, r0
   2245c:	mov	sl, r0
   22460:	beq	216d0 <_start@@Base+0xbeb0>
   22464:	mov	r1, #2
   22468:	ldr	r0, [r9]
   2246c:	bl	27fb8 <flatcc_builder_start_table@@Base>
   22470:	cmp	r0, #0
   22474:	bne	21e64 <_start@@Base+0xc644>
   22478:	ldr	r5, [pc, #-1156]	; 21ffc <_start@@Base+0xc7dc>
   2247c:	add	r3, sp, #624	; 0x270
   22480:	mov	r1, sl
   22484:	mov	r2, fp
   22488:	mov	r0, r9
   2248c:	bl	185c4 <_start@@Base+0x2da4>
   22490:	add	r5, pc, r5
   22494:	ldr	r3, [sp, #624]	; 0x270
   22498:	add	r5, r5, #636	; 0x27c
   2249c:	cmp	r3, #0
   224a0:	beq	22800 <_start@@Base+0xcfe0>
   224a4:	mov	r1, r0
   224a8:	cmp	fp, r1
   224ac:	beq	2283c <_start@@Base+0xd01c>
   224b0:	ldrb	r3, [r1]
   224b4:	cmp	r3, #34	; 0x22
   224b8:	moveq	r3, #0
   224bc:	addeq	r1, r1, #1
   224c0:	streq	r3, [r9, #12]
   224c4:	beq	224d8 <_start@@Base+0xccb8>
   224c8:	cmp	r3, #46	; 0x2e
   224cc:	movne	r3, #1
   224d0:	strne	r3, [r9, #12]
   224d4:	beq	22ce4 <_start@@Base+0xd4c4>
   224d8:	sub	r3, fp, r1
   224dc:	cmp	r3, #8
   224e0:	bls	22850 <_start@@Base+0xd030>
   224e4:	ldrb	r2, [r1, #7]
   224e8:	mov	r3, #0
   224ec:	ldrb	r6, [r1, #6]
   224f0:	lsr	r0, r6, #24
   224f4:	str	r0, [sp, #212]	; 0xd4
   224f8:	lsl	r0, r6, #8
   224fc:	str	r0, [sp, #208]	; 0xd0
   22500:	ldrd	r6, [sp, #208]	; 0xd0
   22504:	orr	r6, r6, r2
   22508:	orr	r7, r7, r3
   2250c:	mov	r2, r6
   22510:	mov	r3, r7
   22514:	ldrb	r6, [r1, #5]
   22518:	lsr	r0, r6, #16
   2251c:	str	r0, [sp, #124]	; 0x7c
   22520:	lsl	r0, r6, #16
   22524:	str	r0, [sp, #120]	; 0x78
   22528:	ldrd	r6, [sp, #120]	; 0x78
   2252c:	orr	r6, r6, r2
   22530:	orr	r7, r7, r3
   22534:	mov	r2, r6
   22538:	mov	r3, r7
   2253c:	ldrb	r6, [r1, #4]
   22540:	lsr	r0, r6, #8
   22544:	str	r0, [sp, #68]	; 0x44
   22548:	lsl	r0, r6, #24
   2254c:	str	r0, [sp, #64]	; 0x40
   22550:	ldrd	r6, [sp, #64]	; 0x40
   22554:	orr	r6, r6, r2
   22558:	orr	r7, r7, r3
   2255c:	mov	r2, r6
   22560:	mov	r3, r7
   22564:	ldrb	r0, [r1, #3]
   22568:	str	r0, [sp, #84]	; 0x54
   2256c:	mov	r0, #0
   22570:	str	r0, [sp, #80]	; 0x50
   22574:	ldrd	r6, [sp, #80]	; 0x50
   22578:	orr	r6, r6, r2
   2257c:	orr	r7, r7, r3
   22580:	mov	r2, r6
   22584:	mov	r3, r7
   22588:	ldrb	r6, [r1, #2]
   2258c:	lsl	r0, r6, #8
   22590:	str	r0, [sp, #44]	; 0x2c
   22594:	mov	r0, #0
   22598:	str	r0, [sp, #40]	; 0x28
   2259c:	ldrd	r6, [sp, #40]	; 0x28
   225a0:	orr	r6, r6, r2
   225a4:	orr	r7, r7, r3
   225a8:	mov	r2, r6
   225ac:	mov	r3, r7
   225b0:	ldrb	r6, [r1, #1]
   225b4:	lsl	r0, r6, #16
   225b8:	str	r0, [sp, #36]	; 0x24
   225bc:	mov	r0, #0
   225c0:	str	r0, [sp, #32]
   225c4:	ldrd	r6, [sp, #32]
   225c8:	orr	r6, r6, r2
   225cc:	orr	r7, r7, r3
   225d0:	mov	r2, r6
   225d4:	mov	r3, r7
   225d8:	ldrb	r6, [r1]
   225dc:	lsl	r0, r6, #24
   225e0:	str	r0, [sp, #28]
   225e4:	mov	r0, #0
   225e8:	str	r0, [sp, #24]
   225ec:	ldrd	r6, [sp, #24]
   225f0:	orr	r6, r6, r2
   225f4:	orr	r7, r7, r3
   225f8:	mov	r2, r6
   225fc:	mov	r3, r7
   22600:	add	r7, pc, #944	; 0x3b0
   22604:	ldrd	r6, [r7]
   22608:	cmp	r3, r7
   2260c:	cmpeq	r2, r6
   22610:	bne	2283c <_start@@Base+0xd01c>
   22614:	add	r4, r1, #8
   22618:	sub	r0, fp, r4
   2261c:	cmp	r0, #8
   22620:	bls	228d4 <_start@@Base+0xd0b4>
   22624:	ldrb	r6, [r1, #15]
   22628:	mov	r7, #0
   2262c:	ldrb	r2, [r1, #14]
   22630:	lsl	r3, r2, #8
   22634:	str	r3, [sp, #432]	; 0x1b0
   22638:	add	r3, sp, #432	; 0x1b0
   2263c:	lsr	ip, r2, #24
   22640:	str	ip, [sp, #436]	; 0x1b4
   22644:	ldrd	r2, [r3]
   22648:	orr	r2, r2, r6
   2264c:	orr	r3, r3, r7
   22650:	mov	r6, r2
   22654:	mov	r7, r3
   22658:	ldrb	r2, [r1, #13]
   2265c:	lsl	r3, r2, #16
   22660:	str	r3, [sp, #288]	; 0x120
   22664:	add	r3, sp, #288	; 0x120
   22668:	lsr	ip, r2, #16
   2266c:	str	ip, [sp, #292]	; 0x124
   22670:	ldrd	r2, [r3]
   22674:	orr	r2, r2, r6
   22678:	orr	r3, r3, r7
   2267c:	mov	r6, r2
   22680:	mov	r7, r3
   22684:	ldrb	r2, [r1, #12]
   22688:	lsr	ip, r2, #8
   2268c:	lsl	r3, r2, #24
   22690:	str	ip, [sp, #220]	; 0xdc
   22694:	str	r3, [sp, #216]	; 0xd8
   22698:	ldrd	r2, [sp, #216]	; 0xd8
   2269c:	orr	r2, r2, r6
   226a0:	orr	r3, r3, r7
   226a4:	ldrb	ip, [r1, #11]
   226a8:	str	ip, [sp, #236]	; 0xec
   226ac:	mov	ip, #0
   226b0:	str	ip, [sp, #232]	; 0xe8
   226b4:	ldrd	r6, [sp, #232]	; 0xe8
   226b8:	orr	r6, r6, r2
   226bc:	orr	r7, r7, r3
   226c0:	mov	r2, r6
   226c4:	mov	r3, r7
   226c8:	ldrb	r6, [r1, #10]
   226cc:	lsl	ip, r6, #8
   226d0:	str	ip, [sp, #180]	; 0xb4
   226d4:	mov	ip, #0
   226d8:	str	ip, [sp, #176]	; 0xb0
   226dc:	ldrd	r6, [sp, #176]	; 0xb0
   226e0:	orr	r6, r6, r2
   226e4:	orr	r7, r7, r3
   226e8:	mov	r2, r6
   226ec:	mov	r3, r7
   226f0:	ldrb	r6, [r1, #9]
   226f4:	lsl	ip, r6, #16
   226f8:	str	ip, [sp, #164]	; 0xa4
   226fc:	mov	ip, #0
   22700:	str	ip, [sp, #160]	; 0xa0
   22704:	ldrd	r6, [sp, #160]	; 0xa0
   22708:	orr	r6, r6, r2
   2270c:	orr	r7, r7, r3
   22710:	mov	r2, r6
   22714:	mov	r3, r7
   22718:	ldrb	r6, [r1, #8]
   2271c:	lsl	ip, r6, #24
   22720:	str	ip, [sp, #100]	; 0x64
   22724:	mov	ip, #0
   22728:	str	ip, [sp, #96]	; 0x60
   2272c:	ldrd	r6, [sp, #96]	; 0x60
   22730:	orr	r6, r6, r2
   22734:	orr	r7, r7, r3
   22738:	mov	r2, r6
   2273c:	mov	r3, r7
   22740:	add	r7, pc, #632	; 0x278
   22744:	ldrd	r6, [r7]
   22748:	cmp	r3, r7
   2274c:	cmpeq	r2, r6
   22750:	beq	229e0 <_start@@Base+0xd1c0>
   22754:	add	r7, pc, #620	; 0x26c
   22758:	ldrd	r6, [r7]
   2275c:	bic	r2, r2, #255	; 0xff
   22760:	cmp	r3, r7
   22764:	cmpeq	r2, r6
   22768:	bne	22774 <_start@@Base+0xcf54>
   2276c:	cmp	r0, #7
   22770:	bgt	22cfc <_start@@Base+0xd4dc>
   22774:	mov	r1, r4
   22778:	mov	r2, fp
   2277c:	mov	r0, r9
   22780:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   22784:	mov	r4, r0
   22788:	sub	r3, fp, r4
   2278c:	cmp	r3, #1
   22790:	ble	227a4 <_start@@Base+0xcf84>
   22794:	ldrb	r3, [r4]
   22798:	cmp	r3, #32
   2279c:	bhi	227b8 <_start@@Base+0xcf98>
   227a0:	beq	22990 <_start@@Base+0xd170>
   227a4:	mov	r1, r4
   227a8:	mov	r2, fp
   227ac:	mov	r0, r9
   227b0:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   227b4:	mov	r4, r0
   227b8:	cmp	fp, r4
   227bc:	beq	229a8 <_start@@Base+0xd188>
   227c0:	ldrb	r3, [r4]
   227c4:	cmp	r3, #44	; 0x2c
   227c8:	beq	22c10 <_start@@Base+0xd3f0>
   227cc:	mov	r3, #0
   227d0:	str	r3, [sp, #624]	; 0x270
   227d4:	ldrb	r3, [r4]
   227d8:	cmp	r3, #125	; 0x7d
   227dc:	beq	22958 <_start@@Base+0xd138>
   227e0:	mov	r3, #10
   227e4:	mov	r1, r4
   227e8:	mov	r2, fp
   227ec:	mov	r0, r9
   227f0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   227f4:	ldr	r3, [sp, #624]	; 0x270
   227f8:	cmp	r3, #0
   227fc:	bne	224a4 <_start@@Base+0xcc84>
   22800:	mov	sl, r0
   22804:	ldr	r3, [r9, #24]
   22808:	cmp	r3, #0
   2280c:	bne	21e64 <_start@@Base+0xc644>
   22810:	ldr	r0, [r9]
   22814:	bl	289ac <flatcc_builder_end_table@@Base>
   22818:	subs	r4, r0, #0
   2281c:	beq	21e64 <_start@@Base+0xc644>
   22820:	mov	r1, #2
   22824:	ldr	r0, [r9]
   22828:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   2282c:	cmp	r0, #0
   22830:	beq	22054 <_start@@Base+0xc834>
   22834:	str	r4, [r0]
   22838:	b	216e4 <_start@@Base+0xbec4>
   2283c:	mov	r2, fp
   22840:	mov	r0, r9
   22844:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   22848:	mov	r4, r0
   2284c:	b	22788 <_start@@Base+0xcf68>
   22850:	sub	r3, r3, #1
   22854:	cmp	r3, #7
   22858:	addls	pc, pc, r3, lsl #2
   2285c:	b	2283c <_start@@Base+0xd01c>
   22860:	b	228c8 <_start@@Base+0xd0a8>
   22864:	b	228bc <_start@@Base+0xd09c>
   22868:	b	228b0 <_start@@Base+0xd090>
   2286c:	b	228a4 <_start@@Base+0xd084>
   22870:	b	22898 <_start@@Base+0xd078>
   22874:	b	2288c <_start@@Base+0xd06c>
   22878:	b	22880 <_start@@Base+0xd060>
   2287c:	b	224e4 <_start@@Base+0xccc4>
   22880:	mov	r2, #0
   22884:	mov	r3, #0
   22888:	b	224ec <_start@@Base+0xcccc>
   2288c:	mov	r2, #0
   22890:	mov	r3, #0
   22894:	b	22514 <_start@@Base+0xccf4>
   22898:	mov	r2, #0
   2289c:	mov	r3, #0
   228a0:	b	2253c <_start@@Base+0xcd1c>
   228a4:	mov	r2, #0
   228a8:	mov	r3, #0
   228ac:	b	22564 <_start@@Base+0xcd44>
   228b0:	mov	r2, #0
   228b4:	mov	r3, #0
   228b8:	b	22588 <_start@@Base+0xcd68>
   228bc:	mov	r2, #0
   228c0:	mov	r3, #0
   228c4:	b	225b0 <_start@@Base+0xcd90>
   228c8:	mov	r2, #0
   228cc:	mov	r3, #0
   228d0:	b	225d8 <_start@@Base+0xcdb8>
   228d4:	sub	r3, r0, #1
   228d8:	cmp	r3, #7
   228dc:	addls	pc, pc, r3, lsl #2
   228e0:	b	22774 <_start@@Base+0xcf54>
   228e4:	b	2294c <_start@@Base+0xd12c>
   228e8:	b	22940 <_start@@Base+0xd120>
   228ec:	b	22934 <_start@@Base+0xd114>
   228f0:	b	22928 <_start@@Base+0xd108>
   228f4:	b	2291c <_start@@Base+0xd0fc>
   228f8:	b	22910 <_start@@Base+0xd0f0>
   228fc:	b	22904 <_start@@Base+0xd0e4>
   22900:	b	22624 <_start@@Base+0xce04>
   22904:	mov	r6, #0
   22908:	mov	r7, #0
   2290c:	b	2262c <_start@@Base+0xce0c>
   22910:	mov	r6, #0
   22914:	mov	r7, #0
   22918:	b	22658 <_start@@Base+0xce38>
   2291c:	mov	r6, #0
   22920:	mov	r7, #0
   22924:	b	22684 <_start@@Base+0xce64>
   22928:	mov	r2, #0
   2292c:	mov	r3, #0
   22930:	b	226a4 <_start@@Base+0xce84>
   22934:	mov	r2, #0
   22938:	mov	r3, #0
   2293c:	b	226c8 <_start@@Base+0xcea8>
   22940:	mov	r2, #0
   22944:	mov	r3, #0
   22948:	b	226f0 <_start@@Base+0xced0>
   2294c:	mov	r2, #0
   22950:	mov	r3, #0
   22954:	b	22718 <_start@@Base+0xcef8>
   22958:	add	r0, r4, #1
   2295c:	sub	r3, fp, r0
   22960:	cmp	r3, #1
   22964:	ble	22978 <_start@@Base+0xd158>
   22968:	ldrb	r3, [r4, #1]
   2296c:	cmp	r3, #32
   22970:	bhi	22800 <_start@@Base+0xcfe0>
   22974:	beq	22df0 <_start@@Base+0xd5d0>
   22978:	mov	r1, r0
   2297c:	mov	r2, fp
   22980:	mov	r0, r9
   22984:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   22988:	ldr	r3, [sp, #624]	; 0x270
   2298c:	b	2249c <_start@@Base+0xcc7c>
   22990:	ldrb	r3, [r4, #1]
   22994:	cmp	r3, #32
   22998:	addhi	r4, r4, #1
   2299c:	bls	227a4 <_start@@Base+0xcf84>
   229a0:	cmp	fp, r4
   229a4:	bne	227c0 <_start@@Base+0xcfa0>
   229a8:	mov	r3, #0
   229ac:	str	r3, [sp, #624]	; 0x270
   229b0:	mov	sl, fp
   229b4:	b	22804 <_start@@Base+0xcfe4>
   229b8:	svcpl	0x00626262
   229bc:	cmnvs	r1, r1, ror #2
   229c0:	cmnvs	r2, pc, asr r4
   229c4:	subsvs	r7, pc, #116, 6	; 0xd0000001
   229c8:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   229cc:	subsvs	r7, pc, #116, 6	; 0xd0000001
   229d0:	movwvc	r0, #0
   229d4:	cmnvc	r4, #112, 10	; 0x1c000000
   229d8:	muleq	r3, ip, r0
   229dc:	andeq	r2, r3, ip, lsr #1
   229e0:	add	r4, r1, #16
   229e4:	sub	r0, fp, r4
   229e8:	cmp	r0, #8
   229ec:	bls	22c60 <_start@@Base+0xd440>
   229f0:	ldrb	r6, [r1, #23]
   229f4:	mov	r7, #0
   229f8:	ldrb	r2, [r1, #22]
   229fc:	lsl	r3, r2, #8
   22a00:	str	r3, [sp, #568]	; 0x238
   22a04:	add	r3, sp, #568	; 0x238
   22a08:	lsr	ip, r2, #24
   22a0c:	str	ip, [sp, #572]	; 0x23c
   22a10:	ldrd	r2, [r3]
   22a14:	orr	r2, r2, r6
   22a18:	orr	r3, r3, r7
   22a1c:	mov	r6, r2
   22a20:	mov	r7, r3
   22a24:	ldrb	r2, [r1, #21]
   22a28:	lsl	r3, r2, #16
   22a2c:	str	r3, [sp, #552]	; 0x228
   22a30:	add	r3, sp, #552	; 0x228
   22a34:	lsr	ip, r2, #16
   22a38:	str	ip, [sp, #556]	; 0x22c
   22a3c:	ldrd	r2, [r3]
   22a40:	orr	r2, r2, r6
   22a44:	orr	r3, r3, r7
   22a48:	mov	r6, r2
   22a4c:	mov	r7, r3
   22a50:	ldrb	r2, [r1, #20]
   22a54:	lsl	r3, r2, #24
   22a58:	str	r3, [sp, #528]	; 0x210
   22a5c:	add	r3, sp, #528	; 0x210
   22a60:	lsr	ip, r2, #8
   22a64:	str	ip, [sp, #532]	; 0x214
   22a68:	ldrd	r2, [r3]
   22a6c:	orr	r2, r2, r6
   22a70:	orr	r3, r3, r7
   22a74:	ldrb	ip, [r1, #19]
   22a78:	str	ip, [sp, #540]	; 0x21c
   22a7c:	mov	ip, #0
   22a80:	str	ip, [sp, #536]	; 0x218
   22a84:	add	ip, sp, #536	; 0x218
   22a88:	ldrd	r6, [ip]
   22a8c:	orr	r6, r6, r2
   22a90:	orr	r7, r7, r3
   22a94:	mov	r2, r6
   22a98:	mov	r3, r7
   22a9c:	ldrb	r6, [r1, #18]
   22aa0:	lsl	ip, r6, #8
   22aa4:	str	ip, [sp, #516]	; 0x204
   22aa8:	mov	ip, #0
   22aac:	str	ip, [sp, #512]	; 0x200
   22ab0:	add	ip, sp, #512	; 0x200
   22ab4:	ldrd	r6, [ip]
   22ab8:	orr	r6, r6, r2
   22abc:	orr	r7, r7, r3
   22ac0:	mov	r2, r6
   22ac4:	mov	r3, r7
   22ac8:	ldrb	r6, [r1, #17]
   22acc:	lsl	ip, r6, #16
   22ad0:	str	ip, [sp, #468]	; 0x1d4
   22ad4:	mov	ip, #0
   22ad8:	str	ip, [sp, #464]	; 0x1d0
   22adc:	add	ip, sp, #464	; 0x1d0
   22ae0:	ldrd	r6, [ip]
   22ae4:	orr	r6, r6, r2
   22ae8:	orr	r7, r7, r3
   22aec:	mov	r2, r6
   22af0:	mov	r3, r7
   22af4:	ldrb	r6, [r1, #16]
   22af8:	lsl	r1, r6, #24
   22afc:	str	r1, [sp, #428]	; 0x1ac
   22b00:	mov	r1, #0
   22b04:	str	r1, [sp, #424]	; 0x1a8
   22b08:	add	r1, sp, #424	; 0x1a8
   22b0c:	ldrd	r6, [r1]
   22b10:	orr	r6, r6, r2
   22b14:	orr	r7, r7, r3
   22b18:	mov	r3, r7
   22b1c:	and	r2, r6, #-16777216	; 0xff000000
   22b20:	sub	r7, pc, #344	; 0x158
   22b24:	ldrd	r6, [r7]
   22b28:	cmp	r3, r7
   22b2c:	cmpeq	r2, r6
   22b30:	bne	22774 <_start@@Base+0xcf54>
   22b34:	cmp	r0, #5
   22b38:	ble	22774 <_start@@Base+0xcf54>
   22b3c:	mov	r3, #5
   22b40:	mov	r2, fp
   22b44:	mov	r1, r4
   22b48:	mov	r0, r9
   22b4c:	bl	18678 <_start@@Base+0x2e58>
   22b50:	cmp	r4, r0
   22b54:	mov	r6, r0
   22b58:	beq	22774 <_start@@Base+0xcf54>
   22b5c:	add	r1, sp, #424	; 0x1a8
   22b60:	cmp	fp, r0
   22b64:	ldrd	r0, [r1]
   22b68:	mov	r2, #0
   22b6c:	mov	r3, #0
   22b70:	add	r1, sp, #640	; 0x280
   22b74:	str	r0, [sp, #628]	; 0x274
   22b78:	str	r0, [sp, #632]	; 0x278
   22b7c:	strd	r2, [r1]
   22b80:	beq	23acc <_start@@Base+0xe2ac>
   22b84:	str	r1, [sp]
   22b88:	add	r3, sp, #632	; 0x278
   22b8c:	mov	r2, fp
   22b90:	mov	r1, r6
   22b94:	mov	r0, r9
   22b98:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   22b9c:	cmp	r6, r0
   22ba0:	mov	r4, r0
   22ba4:	beq	23acc <_start@@Base+0xe2ac>
   22ba8:	ldr	r3, [sp, #632]	; 0x278
   22bac:	cmp	r3, #0
   22bb0:	bne	23970 <_start@@Base+0xe150>
   22bb4:	add	r3, sp, #640	; 0x280
   22bb8:	mov	r1, #0
   22bbc:	ldrd	r2, [r3]
   22bc0:	mvn	r0, #0
   22bc4:	cmp	r3, r1
   22bc8:	cmpeq	r2, r0
   22bcc:	strls	r2, [sp, #628]	; 0x274
   22bd0:	bhi	239f4 <_start@@Base+0xe1d4>
   22bd4:	cmp	r2, #0
   22bd8:	bne	22be8 <_start@@Base+0xd3c8>
   22bdc:	ldr	r3, [r9, #8]
   22be0:	tst	r3, #2
   22be4:	beq	22788 <_start@@Base+0xcf68>
   22be8:	mov	r3, #4
   22bec:	mov	r2, r3
   22bf0:	mov	r1, #1
   22bf4:	ldr	r0, [r9]
   22bf8:	bl	299f8 <flatcc_builder_table_add@@Base>
   22bfc:	cmp	r0, #0
   22c00:	beq	238c8 <_start@@Base+0xe0a8>
   22c04:	ldr	r3, [sp, #628]	; 0x274
   22c08:	str	r3, [r0]
   22c0c:	b	22788 <_start@@Base+0xcf68>
   22c10:	add	r1, r4, #1
   22c14:	sub	r3, fp, r1
   22c18:	cmp	r3, #1
   22c1c:	ble	22c30 <_start@@Base+0xd410>
   22c20:	ldrb	r3, [r4, #1]
   22c24:	cmp	r3, #32
   22c28:	bhi	22c40 <_start@@Base+0xd420>
   22c2c:	beq	22e04 <_start@@Base+0xd5e4>
   22c30:	mov	r2, fp
   22c34:	mov	r0, r9
   22c38:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   22c3c:	mov	r1, r0
   22c40:	cmp	fp, r1
   22c44:	beq	22e1c <_start@@Base+0xd5fc>
   22c48:	ldrb	r3, [r1]
   22c4c:	cmp	r3, #125	; 0x7d
   22c50:	beq	22f14 <_start@@Base+0xd6f4>
   22c54:	mov	r3, #1
   22c58:	str	r3, [sp, #624]	; 0x270
   22c5c:	b	224a8 <_start@@Base+0xcc88>
   22c60:	sub	r3, r0, #1
   22c64:	cmp	r3, #7
   22c68:	addls	pc, pc, r3, lsl #2
   22c6c:	b	22774 <_start@@Base+0xcf54>
   22c70:	b	22cd8 <_start@@Base+0xd4b8>
   22c74:	b	22ccc <_start@@Base+0xd4ac>
   22c78:	b	22cc0 <_start@@Base+0xd4a0>
   22c7c:	b	22cb4 <_start@@Base+0xd494>
   22c80:	b	22ca8 <_start@@Base+0xd488>
   22c84:	b	22c9c <_start@@Base+0xd47c>
   22c88:	b	22c90 <_start@@Base+0xd470>
   22c8c:	b	229f0 <_start@@Base+0xd1d0>
   22c90:	mov	r6, #0
   22c94:	mov	r7, #0
   22c98:	b	229f8 <_start@@Base+0xd1d8>
   22c9c:	mov	r6, #0
   22ca0:	mov	r7, #0
   22ca4:	b	22a24 <_start@@Base+0xd204>
   22ca8:	mov	r6, #0
   22cac:	mov	r7, #0
   22cb0:	b	22a50 <_start@@Base+0xd230>
   22cb4:	mov	r2, #0
   22cb8:	mov	r3, #0
   22cbc:	b	22a74 <_start@@Base+0xd254>
   22cc0:	mov	r2, #0
   22cc4:	mov	r3, #0
   22cc8:	b	22a9c <_start@@Base+0xd27c>
   22ccc:	mov	r2, #0
   22cd0:	mov	r3, #0
   22cd4:	b	22ac8 <_start@@Base+0xd2a8>
   22cd8:	mov	r2, #0
   22cdc:	mov	r3, #0
   22ce0:	b	22af4 <_start@@Base+0xd2d4>
   22ce4:	mov	r3, #5
   22ce8:	mov	r2, fp
   22cec:	mov	r0, r9
   22cf0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   22cf4:	mov	r1, r0
   22cf8:	b	224d8 <_start@@Base+0xccb8>
   22cfc:	mov	r3, #7
   22d00:	mov	r2, fp
   22d04:	mov	r1, r4
   22d08:	mov	r0, r9
   22d0c:	bl	18678 <_start@@Base+0x2e58>
   22d10:	cmp	r4, r0
   22d14:	mov	r6, r0
   22d18:	beq	22774 <_start@@Base+0xcf54>
   22d1c:	ldr	r1, [sp, #96]	; 0x60
   22d20:	mov	r2, #0
   22d24:	mov	r3, #0
   22d28:	str	r1, [sp, #628]	; 0x274
   22d2c:	add	r1, sp, #632	; 0x278
   22d30:	cmp	fp, r0
   22d34:	strd	r2, [r1]
   22d38:	add	r1, sp, #640	; 0x280
   22d3c:	strd	r2, [r1]
   22d40:	beq	2389c <_start@@Base+0xe07c>
   22d44:	str	r1, [sp]
   22d48:	add	r3, sp, #628	; 0x274
   22d4c:	mov	r1, r0
   22d50:	mov	r2, fp
   22d54:	mov	r0, r9
   22d58:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   22d5c:	cmp	r6, r0
   22d60:	mov	r4, r0
   22d64:	beq	2389c <_start@@Base+0xe07c>
   22d68:	ldr	r1, [sp, #628]	; 0x274
   22d6c:	add	r3, sp, #640	; 0x280
   22d70:	cmp	r1, #0
   22d74:	ldrd	r2, [r3]
   22d78:	beq	22dd8 <_start@@Base+0xd5b8>
   22d7c:	cmp	r3, #-2147483648	; 0x80000000
   22d80:	cmpeq	r2, #0
   22d84:	bhi	22e84 <_start@@Base+0xd664>
   22d88:	rsbs	r2, r2, #0
   22d8c:	rsc	r3, r3, #0
   22d90:	add	r1, sp, #632	; 0x278
   22d94:	strd	r2, [r1]
   22d98:	orrs	r3, r2, r3
   22d9c:	bne	22dac <_start@@Base+0xd58c>
   22da0:	ldr	r3, [r9, #8]
   22da4:	tst	r3, #2
   22da8:	beq	22788 <_start@@Base+0xcf68>
   22dac:	mov	r3, #8
   22db0:	mov	r2, r3
   22db4:	mov	r1, #0
   22db8:	ldr	r0, [r9]
   22dbc:	bl	299f8 <flatcc_builder_table_add@@Base>
   22dc0:	cmp	r0, #0
   22dc4:	beq	238c8 <_start@@Base+0xe0a8>
   22dc8:	add	r3, sp, #632	; 0x278
   22dcc:	ldrd	r2, [r3]
   22dd0:	strd	r2, [r0]
   22dd4:	b	22788 <_start@@Base+0xcf68>
   22dd8:	cmp	r2, #0
   22ddc:	sbcs	r1, r3, #0
   22de0:	blt	23ab0 <_start@@Base+0xe290>
   22de4:	add	r1, sp, #632	; 0x278
   22de8:	strd	r2, [r1]
   22dec:	b	22d98 <_start@@Base+0xd578>
   22df0:	ldrb	r3, [r4, #2]
   22df4:	cmp	r3, #32
   22df8:	bls	22978 <_start@@Base+0xd158>
   22dfc:	add	sl, r4, #2
   22e00:	b	22804 <_start@@Base+0xcfe4>
   22e04:	ldrb	r3, [r4, #2]
   22e08:	cmp	r3, #32
   22e0c:	addhi	r1, r4, #2
   22e10:	bls	22c30 <_start@@Base+0xd410>
   22e14:	cmp	fp, r1
   22e18:	bne	22c48 <_start@@Base+0xd428>
   22e1c:	mov	ip, #0
   22e20:	mov	r3, #10
   22e24:	mov	r2, fp
   22e28:	mov	r1, fp
   22e2c:	mov	r0, r9
   22e30:	str	ip, [sp, #624]	; 0x270
   22e34:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   22e38:	ldr	r3, [sp, #624]	; 0x270
   22e3c:	b	2249c <_start@@Base+0xcc7c>
   22e40:	ldrb	r3, [sl, #2]
   22e44:	cmp	r3, #32
   22e48:	addhi	r0, sl, #2
   22e4c:	bls	219c0 <_start@@Base+0xc1a0>
   22e50:	cmp	fp, r0
   22e54:	bne	219d8 <_start@@Base+0xc1b8>
   22e58:	mov	sl, fp
   22e5c:	mov	ip, #0
   22e60:	mov	r3, #10
   22e64:	mov	r2, sl
   22e68:	mov	r1, sl
   22e6c:	mov	r0, r9
   22e70:	str	ip, [sp, #620]	; 0x26c
   22e74:	mov	fp, r9
   22e78:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   22e7c:	ldr	r3, [sp, #620]	; 0x26c
   22e80:	b	21258 <_start@@Base+0xba38>
   22e84:	mov	r1, r0
   22e88:	mov	r3, #8
   22e8c:	mov	r2, fp
   22e90:	mov	r0, r9
   22e94:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   22e98:	mov	r4, r0
   22e9c:	cmp	r6, r4
   22ea0:	beq	2389c <_start@@Base+0xe07c>
   22ea4:	add	r3, sp, #632	; 0x278
   22ea8:	ldrd	r2, [r3]
   22eac:	b	22d98 <_start@@Base+0xd578>
   22eb0:	mov	r1, r0
   22eb4:	mov	r3, #8
   22eb8:	mov	r2, fp
   22ebc:	mov	r0, r9
   22ec0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   22ec4:	mov	r4, r0
   22ec8:	cmp	r6, r4
   22ecc:	beq	239c4 <_start@@Base+0xe1a4>
   22ed0:	ldr	r2, [sp, #628]	; 0x274
   22ed4:	b	22294 <_start@@Base+0xca74>
   22ed8:	ldrb	r3, [r4, #2]
   22edc:	cmp	r3, #32
   22ee0:	addhi	r1, r4, #2
   22ee4:	bls	2216c <_start@@Base+0xc94c>
   22ee8:	cmp	fp, r1
   22eec:	bne	22184 <_start@@Base+0xc964>
   22ef0:	mov	ip, #0
   22ef4:	mov	r3, #10
   22ef8:	mov	r2, fp
   22efc:	mov	r1, fp
   22f00:	mov	r0, r9
   22f04:	str	ip, [sp, #624]	; 0x270
   22f08:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   22f0c:	ldr	r3, [sp, #624]	; 0x270
   22f10:	b	21ae4 <_start@@Base+0xc2c4>
   22f14:	mov	r0, r1
   22f18:	add	r1, r1, #1
   22f1c:	sub	r3, fp, r1
   22f20:	cmp	r3, #1
   22f24:	mov	r3, #0
   22f28:	str	r3, [sp, #624]	; 0x270
   22f2c:	ble	22f40 <_start@@Base+0xd720>
   22f30:	ldrb	r3, [r0, #1]
   22f34:	cmp	r3, #32
   22f38:	bhi	23afc <_start@@Base+0xe2dc>
   22f3c:	beq	23a58 <_start@@Base+0xe238>
   22f40:	mov	r2, fp
   22f44:	mov	r0, r9
   22f48:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   22f4c:	ldr	r3, [sp, #624]	; 0x270
   22f50:	b	2249c <_start@@Base+0xcc7c>
   22f54:	mov	r1, r4
   22f58:	mov	r3, #7
   22f5c:	mov	r2, fp
   22f60:	mov	r0, r9
   22f64:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   22f68:	mov	r4, r0
   22f6c:	b	22ec8 <_start@@Base+0xd6a8>
   22f70:	mov	r3, #5
   22f74:	mov	r2, fp
   22f78:	mov	r1, r7
   22f7c:	mov	r0, r9
   22f80:	bl	18678 <_start@@Base+0x2e58>
   22f84:	cmp	r7, r0
   22f88:	mov	sl, r0
   22f8c:	beq	216b4 <_start@@Base+0xbe94>
   22f90:	mov	r1, #9
   22f94:	ldr	r0, [r9]
   22f98:	bl	27fb8 <flatcc_builder_start_table@@Base>
   22f9c:	cmp	r0, #0
   22fa0:	bne	21e64 <_start@@Base+0xc644>
   22fa4:	add	r3, sp, #628	; 0x274
   22fa8:	mov	r1, sl
   22fac:	mov	r2, fp
   22fb0:	mov	r0, r9
   22fb4:	mov	r8, r3
   22fb8:	bl	185c4 <_start@@Base+0x2da4>
   22fbc:	ldr	r3, [sp, #628]	; 0x274
   22fc0:	cmp	r3, #0
   22fc4:	mov	sl, r0
   22fc8:	beq	232c0 <_start@@Base+0xdaa0>
   22fcc:	ldr	r3, [pc, #-1528]	; 229dc <_start@@Base+0xd1bc>
   22fd0:	ldr	r2, [pc, #-1536]	; 229d8 <_start@@Base+0xd1b8>
   22fd4:	add	r3, pc, r3
   22fd8:	add	r3, r3, #612	; 0x264
   22fdc:	str	r3, [sp, #600]	; 0x258
   22fe0:	add	r3, sp, #584	; 0x248
   22fe4:	add	r2, pc, r2
   22fe8:	ldrd	r6, [r3]
   22fec:	add	r2, r2, #624	; 0x270
   22ff0:	str	r2, [sp, #604]	; 0x25c
   22ff4:	cmp	fp, sl
   22ff8:	beq	2327c <_start@@Base+0xda5c>
   22ffc:	ldrb	r3, [sl]
   23000:	cmp	r3, #34	; 0x22
   23004:	moveq	r3, #0
   23008:	addeq	sl, sl, #1
   2300c:	streq	r3, [r9, #12]
   23010:	beq	23024 <_start@@Base+0xd804>
   23014:	cmp	r3, #46	; 0x2e
   23018:	movne	r3, #1
   2301c:	strne	r3, [r9, #12]
   23020:	beq	23768 <_start@@Base+0xdf48>
   23024:	sub	ip, fp, sl
   23028:	cmp	ip, #8
   2302c:	bls	233a8 <_start@@Base+0xdb88>
   23030:	ldrb	r2, [sl, #7]
   23034:	mov	r3, #0
   23038:	ldrb	r0, [sl, #6]
   2303c:	lsl	r1, r0, #8
   23040:	str	r1, [sp, #480]	; 0x1e0
   23044:	add	r1, sp, #480	; 0x1e0
   23048:	lsr	lr, r0, #24
   2304c:	str	lr, [sp, #484]	; 0x1e4
   23050:	ldrd	r0, [r1]
   23054:	orr	r0, r0, r2
   23058:	orr	r1, r1, r3
   2305c:	mov	r2, r0
   23060:	mov	r3, r1
   23064:	ldrb	r0, [sl, #5]
   23068:	lsl	r1, r0, #16
   2306c:	str	r1, [sp, #408]	; 0x198
   23070:	add	r1, sp, #408	; 0x198
   23074:	lsr	lr, r0, #16
   23078:	str	lr, [sp, #412]	; 0x19c
   2307c:	ldrd	r0, [r1]
   23080:	orr	r0, r0, r2
   23084:	orr	r1, r1, r3
   23088:	mov	r2, r0
   2308c:	mov	r3, r1
   23090:	ldrb	r0, [sl, #4]
   23094:	lsl	r1, r0, #24
   23098:	str	r1, [sp, #320]	; 0x140
   2309c:	add	r1, sp, #320	; 0x140
   230a0:	lsr	lr, r0, #8
   230a4:	str	lr, [sp, #324]	; 0x144
   230a8:	ldrd	r0, [r1]
   230ac:	orr	r0, r0, r2
   230b0:	orr	r1, r1, r3
   230b4:	mov	r2, r0
   230b8:	mov	r3, r1
   230bc:	ldrb	r1, [sl, #3]
   230c0:	str	r1, [sp, #356]	; 0x164
   230c4:	mov	r1, #0
   230c8:	str	r1, [sp, #352]	; 0x160
   230cc:	add	r1, sp, #352	; 0x160
   230d0:	ldrd	r0, [r1]
   230d4:	orr	r0, r0, r2
   230d8:	orr	r1, r1, r3
   230dc:	mov	r2, r0
   230e0:	mov	r3, r1
   230e4:	ldrb	r0, [sl, #2]
   230e8:	lsl	r1, r0, #8
   230ec:	str	r1, [sp, #276]	; 0x114
   230f0:	mov	r1, #0
   230f4:	str	r1, [sp, #272]	; 0x110
   230f8:	add	r1, sp, #272	; 0x110
   230fc:	ldrd	r0, [r1]
   23100:	orr	r0, r0, r2
   23104:	orr	r1, r1, r3
   23108:	mov	r2, r0
   2310c:	mov	r3, r1
   23110:	ldrb	r0, [sl, #1]
   23114:	lsl	r1, r0, #16
   23118:	str	r1, [sp, #244]	; 0xf4
   2311c:	mov	r1, #0
   23120:	str	r1, [sp, #240]	; 0xf0
   23124:	ldrd	r0, [sp, #240]	; 0xf0
   23128:	orr	r0, r0, r2
   2312c:	orr	r1, r1, r3
   23130:	mov	r2, r0
   23134:	mov	r3, r1
   23138:	ldrb	r4, [sl]
   2313c:	add	r1, pc, #932	; 0x3a4
   23140:	ldrd	r0, [r1]
   23144:	mov	r6, #0
   23148:	orr	r2, r2, r6
   2314c:	lsl	r7, r4, #24
   23150:	orr	r3, r3, r7
   23154:	cmp	r3, r1
   23158:	cmpeq	r2, r0
   2315c:	bls	232e8 <_start@@Base+0xdac8>
   23160:	add	r1, pc, #904	; 0x388
   23164:	ldrd	r0, [r1]
   23168:	cmp	r3, r1
   2316c:	cmpeq	r2, r0
   23170:	beq	23538 <_start@@Base+0xdd18>
   23174:	add	r1, pc, #892	; 0x37c
   23178:	ldrd	r0, [r1]
   2317c:	mov	r4, #0
   23180:	mov	r5, r3
   23184:	cmp	r3, r1
   23188:	cmpeq	r4, r0
   2318c:	beq	23668 <_start@@Base+0xde48>
   23190:	add	r1, pc, #872	; 0x368
   23194:	ldrd	r0, [r1]
   23198:	cmp	r3, r1
   2319c:	cmpeq	r2, r0
   231a0:	bne	23280 <_start@@Base+0xda60>
   231a4:	cmp	ip, #8
   231a8:	bgt	23784 <_start@@Base+0xdf64>
   231ac:	add	sl, sl, #8
   231b0:	mov	r0, sl
   231b4:	mov	r1, fp
   231b8:	bl	15948 <_start@@Base+0x128>
   231bc:	mov	r0, #0
   231c0:	and	r1, r1, #-16777216	; 0xff000000
   231c4:	cmp	r1, #889192448	; 0x35000000
   231c8:	cmpeq	r0, #0
   231cc:	bne	23280 <_start@@Base+0xda60>
   231d0:	sub	r3, fp, sl
   231d4:	cmp	r3, #1
   231d8:	ble	23280 <_start@@Base+0xda60>
   231dc:	mov	r3, #1
   231e0:	mov	r2, fp
   231e4:	mov	r1, sl
   231e8:	mov	r0, r9
   231ec:	bl	18678 <_start@@Base+0x2e58>
   231f0:	cmp	sl, r0
   231f4:	mov	r4, r0
   231f8:	beq	23280 <_start@@Base+0xda60>
   231fc:	add	r5, sp, #648	; 0x288
   23200:	mov	r3, #0
   23204:	str	r3, [r5, #-8]!
   23208:	mov	r1, r0
   2320c:	mov	r2, fp
   23210:	mov	r3, r5
   23214:	mov	r0, r9
   23218:	bl	18288 <_start@@Base+0x2a68>
   2321c:	cmp	r4, r0
   23220:	mov	sl, r0
   23224:	beq	23c5c <_start@@Base+0xe43c>
   23228:	ldr	r3, [sp, #640]	; 0x280
   2322c:	cmp	r3, #0
   23230:	bne	23240 <_start@@Base+0xda20>
   23234:	ldr	r3, [r9, #8]
   23238:	tst	r3, #2
   2323c:	beq	23294 <_start@@Base+0xda74>
   23240:	mov	r3, #4
   23244:	mov	r2, r3
   23248:	mov	r1, #8
   2324c:	ldr	r0, [r9]
   23250:	bl	299f8 <flatcc_builder_table_add@@Base>
   23254:	cmp	r0, #0
   23258:	bne	234d8 <_start@@Base+0xdcb8>
   2325c:	mov	r5, sl
   23260:	add	r3, sp, #584	; 0x248
   23264:	mov	sl, fp
   23268:	mov	r0, r5
   2326c:	mov	fp, r9
   23270:	strd	r6, [r3]
   23274:	mov	r5, r0
   23278:	b	21e70 <_start@@Base+0xc650>
   2327c:	mov	sl, fp
   23280:	mov	r1, sl
   23284:	mov	r2, fp
   23288:	mov	r0, r9
   2328c:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   23290:	mov	sl, r0
   23294:	mov	r1, sl
   23298:	mov	r3, r8
   2329c:	mov	r2, fp
   232a0:	mov	r0, r9
   232a4:	bl	1a6cc <_start@@Base+0x4eac>
   232a8:	ldr	r3, [sp, #628]	; 0x274
   232ac:	cmp	r3, #0
   232b0:	mov	sl, r0
   232b4:	bne	22ff4 <_start@@Base+0xd7d4>
   232b8:	add	r3, sp, #584	; 0x248
   232bc:	strd	r6, [r3]
   232c0:	ldr	r1, [r9, #24]
   232c4:	cmp	r1, #0
   232c8:	bne	21e64 <_start@@Base+0xc644>
   232cc:	ldr	r0, [r9]
   232d0:	str	r1, [sp, #600]	; 0x258
   232d4:	bl	289ac <flatcc_builder_end_table@@Base>
   232d8:	ldr	r1, [sp, #600]	; 0x258
   232dc:	subs	r4, r0, #0
   232e0:	beq	21e64 <_start@@Base+0xc644>
   232e4:	b	22824 <_start@@Base+0xd004>
   232e8:	add	r1, pc, #536	; 0x218
   232ec:	ldrd	r0, [r1]
   232f0:	cmp	r3, r1
   232f4:	cmpeq	r2, r0
   232f8:	beq	2342c <_start@@Base+0xdc0c>
   232fc:	add	r5, pc, #524	; 0x20c
   23300:	ldrd	r4, [r5]
   23304:	mov	r0, #0
   23308:	mov	r1, r3
   2330c:	cmp	r3, r5
   23310:	cmpeq	r0, r4
   23314:	beq	235f4 <_start@@Base+0xddd4>
   23318:	add	r5, pc, #504	; 0x1f8
   2331c:	ldrd	r4, [r5]
   23320:	cmp	r3, r5
   23324:	cmpeq	r2, r4
   23328:	beq	236c8 <_start@@Base+0xdea8>
   2332c:	add	r3, pc, #492	; 0x1ec
   23330:	ldrd	r2, [r3]
   23334:	cmp	r1, r3
   23338:	cmpeq	r0, r2
   2333c:	bne	23280 <_start@@Base+0xda60>
   23340:	cmp	ip, #4
   23344:	ble	23280 <_start@@Base+0xda60>
   23348:	mov	r1, sl
   2334c:	mov	r3, #4
   23350:	mov	r2, fp
   23354:	mov	r0, r9
   23358:	bl	18678 <_start@@Base+0x2e58>
   2335c:	cmp	r0, sl
   23360:	mov	r1, r0
   23364:	beq	23280 <_start@@Base+0xda60>
   23368:	add	r3, sp, #632	; 0x278
   2336c:	mov	r2, fp
   23370:	mov	r0, r9
   23374:	bl	2f500 <flatcc_json_parser_build_string@@Base>
   23378:	ldr	r3, [sp, #632]	; 0x278
   2337c:	cmp	r3, #0
   23380:	mov	sl, r0
   23384:	beq	23650 <_start@@Base+0xde30>
   23388:	mov	r1, #2
   2338c:	ldr	r0, [r9]
   23390:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   23394:	cmp	r0, #0
   23398:	beq	23650 <_start@@Base+0xde30>
   2339c:	ldr	r3, [sp, #632]	; 0x278
   233a0:	str	r3, [r0]
   233a4:	b	23294 <_start@@Base+0xda74>
   233a8:	sub	r3, ip, #1
   233ac:	cmp	r3, #7
   233b0:	addls	pc, pc, r3, lsl #2
   233b4:	b	23280 <_start@@Base+0xda60>
   233b8:	b	23420 <_start@@Base+0xdc00>
   233bc:	b	23414 <_start@@Base+0xdbf4>
   233c0:	b	23408 <_start@@Base+0xdbe8>
   233c4:	b	233fc <_start@@Base+0xdbdc>
   233c8:	b	233f0 <_start@@Base+0xdbd0>
   233cc:	b	233e4 <_start@@Base+0xdbc4>
   233d0:	b	233d8 <_start@@Base+0xdbb8>
   233d4:	b	23030 <_start@@Base+0xd810>
   233d8:	mov	r2, #0
   233dc:	mov	r3, #0
   233e0:	b	23038 <_start@@Base+0xd818>
   233e4:	mov	r2, #0
   233e8:	mov	r3, #0
   233ec:	b	23064 <_start@@Base+0xd844>
   233f0:	mov	r2, #0
   233f4:	mov	r3, #0
   233f8:	b	23090 <_start@@Base+0xd870>
   233fc:	mov	r2, #0
   23400:	mov	r3, #0
   23404:	b	230bc <_start@@Base+0xd89c>
   23408:	mov	r2, #0
   2340c:	mov	r3, #0
   23410:	b	230e4 <_start@@Base+0xd8c4>
   23414:	mov	r2, #0
   23418:	mov	r3, #0
   2341c:	b	23110 <_start@@Base+0xd8f0>
   23420:	mov	r2, #0
   23424:	mov	r3, #0
   23428:	b	23138 <_start@@Base+0xd918>
   2342c:	add	sl, sl, #8
   23430:	mov	r0, sl
   23434:	mov	r1, fp
   23438:	bl	15948 <_start@@Base+0x128>
   2343c:	mov	r0, #0
   23440:	and	r1, r1, #-16777216	; 0xff000000
   23444:	cmp	r1, #889192448	; 0x35000000
   23448:	cmpeq	r0, #0
   2344c:	bne	23280 <_start@@Base+0xda60>
   23450:	sub	r3, fp, sl
   23454:	cmp	r3, #1
   23458:	ble	23280 <_start@@Base+0xda60>
   2345c:	mov	r3, #1
   23460:	mov	r2, fp
   23464:	mov	r1, sl
   23468:	mov	r0, r9
   2346c:	bl	18678 <_start@@Base+0x2e58>
   23470:	cmp	sl, r0
   23474:	mov	r4, r0
   23478:	beq	23280 <_start@@Base+0xda60>
   2347c:	add	r5, sp, #648	; 0x288
   23480:	mov	r1, r0
   23484:	str	r6, [r5, #-8]!
   23488:	mov	r2, fp
   2348c:	mov	r3, r5
   23490:	mov	r0, r9
   23494:	bl	18288 <_start@@Base+0x2a68>
   23498:	cmp	r4, r0
   2349c:	mov	sl, r0
   234a0:	beq	23c00 <_start@@Base+0xe3e0>
   234a4:	ldr	r3, [sp, #640]	; 0x280
   234a8:	cmp	r3, #0
   234ac:	bne	234bc <_start@@Base+0xdc9c>
   234b0:	ldr	r3, [r9, #8]
   234b4:	tst	r3, #2
   234b8:	beq	23294 <_start@@Base+0xda74>
   234bc:	mov	r3, #4
   234c0:	mov	r2, r3
   234c4:	mov	r1, #1
   234c8:	ldr	r0, [r9]
   234cc:	bl	299f8 <flatcc_builder_table_add@@Base>
   234d0:	cmp	r0, #0
   234d4:	beq	23650 <_start@@Base+0xde30>
   234d8:	ldr	r3, [sp, #640]	; 0x280
   234dc:	str	r3, [r0]
   234e0:	b	23294 <_start@@Base+0xda74>
   234e4:	nop			; (mov r0, r0)
   234e8:			; <UNDEFINED> instruction: 0xffffffff
   234ec:	cmnvs	r3, #-2013265919	; 0x88000001
   234f0:	teqcc	r2, r4, lsr r3
   234f4:	cmnvs	r3, #-1946157055	; 0x8c000001
   234f8:	andeq	r0, r0, r0
   234fc:	cmnvs	r3, #-1946157055	; 0x8c000001
   23500:	teqcc	r2, r4, lsr r3
   23504:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   23508:	teqcc	r2, r4, lsr r3
   2350c:	cmnvs	r1, r1, ror #2
   23510:	andeq	r0, r0, r0
   23514:	cmnvs	r1, r1, ror #2
   23518:	teqcc	r2, r4, lsr r3
   2351c:	rsbvs	r6, r2, #536870918	; 0x20000006
   23520:	andeq	r0, r0, r0
   23524:	rsbvs	r6, r2, #536870918	; 0x20000006
   23528:	andeq	r1, r3, r4, lsr #10
   2352c:	ldrdeq	r1, [r3], -r4
   23530:	andeq	r1, r3, r8, ror r4
   23534:	strdeq	r1, [r3], -r0
   23538:	cmp	ip, #8
   2353c:	bgt	23810 <_start@@Base+0xdff0>
   23540:	add	sl, sl, #8
   23544:	mov	r0, sl
   23548:	mov	r1, fp
   2354c:	bl	15948 <_start@@Base+0x128>
   23550:	mov	r0, #0
   23554:	and	r1, r1, #-16777216	; 0xff000000
   23558:	cmp	r1, #889192448	; 0x35000000
   2355c:	cmpeq	r0, #0
   23560:	bne	23280 <_start@@Base+0xda60>
   23564:	sub	r3, fp, sl
   23568:	cmp	r3, #1
   2356c:	ble	23280 <_start@@Base+0xda60>
   23570:	mov	r3, #1
   23574:	mov	r2, fp
   23578:	mov	r1, sl
   2357c:	mov	r0, r9
   23580:	bl	18678 <_start@@Base+0x2e58>
   23584:	cmp	sl, r0
   23588:	mov	r4, r0
   2358c:	beq	23280 <_start@@Base+0xda60>
   23590:	add	r5, sp, #648	; 0x288
   23594:	mov	r3, #0
   23598:	str	r3, [r5, #-8]!
   2359c:	mov	r1, r0
   235a0:	mov	r2, fp
   235a4:	mov	r3, r5
   235a8:	mov	r0, r9
   235ac:	bl	18288 <_start@@Base+0x2a68>
   235b0:	cmp	r4, r0
   235b4:	mov	sl, r0
   235b8:	beq	23c88 <_start@@Base+0xe468>
   235bc:	ldr	r3, [sp, #640]	; 0x280
   235c0:	cmp	r3, #0
   235c4:	bne	235d4 <_start@@Base+0xddb4>
   235c8:	ldr	r3, [r9, #8]
   235cc:	tst	r3, #2
   235d0:	beq	23294 <_start@@Base+0xda74>
   235d4:	mov	r3, #4
   235d8:	mov	r2, r3
   235dc:	mov	r1, #6
   235e0:	ldr	r0, [r9]
   235e4:	bl	299f8 <flatcc_builder_table_add@@Base>
   235e8:	cmp	r0, #0
   235ec:	bne	234d8 <_start@@Base+0xdcb8>
   235f0:	b	2325c <_start@@Base+0xda3c>
   235f4:	cmp	ip, #4
   235f8:	ble	23280 <_start@@Base+0xda60>
   235fc:	mov	r1, sl
   23600:	mov	r3, #4
   23604:	mov	r2, fp
   23608:	mov	r0, r9
   2360c:	bl	18678 <_start@@Base+0x2e58>
   23610:	cmp	r0, sl
   23614:	mov	r1, r0
   23618:	beq	23280 <_start@@Base+0xda60>
   2361c:	add	r3, sp, #632	; 0x278
   23620:	mov	r2, fp
   23624:	mov	r0, r9
   23628:	bl	2f500 <flatcc_json_parser_build_string@@Base>
   2362c:	ldr	r3, [sp, #632]	; 0x278
   23630:	cmp	r3, #0
   23634:	mov	sl, r0
   23638:	beq	23650 <_start@@Base+0xde30>
   2363c:	mov	r1, r6
   23640:	ldr	r0, [r9]
   23644:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   23648:	cmp	r0, #0
   2364c:	bne	2339c <_start@@Base+0xdb7c>
   23650:	add	r3, sp, #584	; 0x248
   23654:	mov	r5, sl
   23658:	strd	r6, [r3]
   2365c:	mov	sl, fp
   23660:	mov	fp, r9
   23664:	b	21e70 <_start@@Base+0xc650>
   23668:	cmp	ip, #4
   2366c:	ble	23280 <_start@@Base+0xda60>
   23670:	mov	r1, sl
   23674:	mov	r3, #4
   23678:	mov	r2, fp
   2367c:	mov	r0, r9
   23680:	bl	18678 <_start@@Base+0x2e58>
   23684:	cmp	r0, sl
   23688:	mov	r1, r0
   2368c:	beq	23280 <_start@@Base+0xda60>
   23690:	add	r3, sp, #632	; 0x278
   23694:	mov	r2, fp
   23698:	mov	r0, r9
   2369c:	bl	2f500 <flatcc_json_parser_build_string@@Base>
   236a0:	ldr	r3, [sp, #632]	; 0x278
   236a4:	cmp	r3, #0
   236a8:	mov	sl, r0
   236ac:	beq	23650 <_start@@Base+0xde30>
   236b0:	mov	r1, #4
   236b4:	ldr	r0, [r9]
   236b8:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   236bc:	cmp	r0, #0
   236c0:	bne	2339c <_start@@Base+0xdb7c>
   236c4:	b	23650 <_start@@Base+0xde30>
   236c8:	cmp	ip, #8
   236cc:	ble	23280 <_start@@Base+0xda60>
   236d0:	mov	r3, #8
   236d4:	mov	r2, fp
   236d8:	mov	r1, sl
   236dc:	mov	r0, r9
   236e0:	bl	18678 <_start@@Base+0x2e58>
   236e4:	cmp	r0, sl
   236e8:	mov	r5, r0
   236ec:	beq	23280 <_start@@Base+0xda60>
   236f0:	mov	r0, #0
   236f4:	mov	r1, #0
   236f8:	add	r4, sp, #648	; 0x288
   236fc:	mov	r2, fp
   23700:	strd	r0, [r4, #-8]!
   23704:	mov	r1, r5
   23708:	mov	r3, r4
   2370c:	mov	r0, r9
   23710:	bl	1812c <_start@@Base+0x290c>
   23714:	cmp	r5, r0
   23718:	mov	sl, r0
   2371c:	beq	23ba4 <_start@@Base+0xe384>
   23720:	add	r3, sp, #640	; 0x280
   23724:	ldrd	r2, [r3]
   23728:	orrs	r3, r2, r3
   2372c:	bne	2373c <_start@@Base+0xdf1c>
   23730:	ldr	r3, [r9, #8]
   23734:	tst	r3, #2
   23738:	beq	23294 <_start@@Base+0xda74>
   2373c:	mov	r3, #8
   23740:	mov	r2, r3
   23744:	mov	r1, #3
   23748:	ldr	r0, [r9]
   2374c:	bl	299f8 <flatcc_builder_table_add@@Base>
   23750:	cmp	r0, #0
   23754:	beq	23650 <_start@@Base+0xde30>
   23758:	add	r3, sp, #640	; 0x280
   2375c:	ldrd	r2, [r3]
   23760:	strd	r2, [r0]
   23764:	b	23294 <_start@@Base+0xda74>
   23768:	mov	r1, sl
   2376c:	mov	r3, #5
   23770:	mov	r2, fp
   23774:	mov	r0, r9
   23778:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2377c:	mov	sl, r0
   23780:	b	23024 <_start@@Base+0xd804>
   23784:	mov	r3, #8
   23788:	mov	r2, fp
   2378c:	mov	r1, sl
   23790:	mov	r0, r9
   23794:	bl	18678 <_start@@Base+0x2e58>
   23798:	cmp	r0, sl
   2379c:	mov	r5, r0
   237a0:	beq	231ac <_start@@Base+0xd98c>
   237a4:	mov	r0, #0
   237a8:	mov	r1, #0
   237ac:	add	r4, sp, #648	; 0x288
   237b0:	mov	r2, fp
   237b4:	strd	r0, [r4, #-8]!
   237b8:	mov	r1, r5
   237bc:	mov	r3, r4
   237c0:	mov	r0, r9
   237c4:	bl	1812c <_start@@Base+0x290c>
   237c8:	cmp	r5, r0
   237cc:	mov	sl, r0
   237d0:	beq	23b28 <_start@@Base+0xe308>
   237d4:	add	r3, sp, #640	; 0x280
   237d8:	ldrd	r2, [r3]
   237dc:	orrs	r3, r2, r3
   237e0:	bne	237f0 <_start@@Base+0xdfd0>
   237e4:	ldr	r3, [r9, #8]
   237e8:	tst	r3, #2
   237ec:	beq	23294 <_start@@Base+0xda74>
   237f0:	mov	r3, #8
   237f4:	mov	r2, r3
   237f8:	mov	r1, #7
   237fc:	ldr	r0, [r9]
   23800:	bl	299f8 <flatcc_builder_table_add@@Base>
   23804:	cmp	r0, #0
   23808:	bne	23758 <_start@@Base+0xdf38>
   2380c:	b	23650 <_start@@Base+0xde30>
   23810:	mov	r3, #8
   23814:	mov	r2, fp
   23818:	mov	r1, sl
   2381c:	mov	r0, r9
   23820:	bl	18678 <_start@@Base+0x2e58>
   23824:	cmp	r0, sl
   23828:	mov	r5, r0
   2382c:	beq	23540 <_start@@Base+0xdd20>
   23830:	mov	r0, #0
   23834:	mov	r1, #0
   23838:	add	r4, sp, #648	; 0x288
   2383c:	mov	r2, fp
   23840:	strd	r0, [r4, #-8]!
   23844:	mov	r1, r5
   23848:	mov	r3, r4
   2384c:	mov	r0, r9
   23850:	bl	1812c <_start@@Base+0x290c>
   23854:	cmp	r5, r0
   23858:	mov	sl, r0
   2385c:	beq	23b54 <_start@@Base+0xe334>
   23860:	add	r3, sp, #640	; 0x280
   23864:	ldrd	r2, [r3]
   23868:	orrs	r3, r2, r3
   2386c:	bne	2387c <_start@@Base+0xe05c>
   23870:	ldr	r3, [r9, #8]
   23874:	tst	r3, #2
   23878:	beq	23294 <_start@@Base+0xda74>
   2387c:	mov	r3, #8
   23880:	mov	r2, r3
   23884:	mov	r1, #5
   23888:	ldr	r0, [r9]
   2388c:	bl	299f8 <flatcc_builder_table_add@@Base>
   23890:	cmp	r0, #0
   23894:	bne	23758 <_start@@Base+0xdf38>
   23898:	b	23650 <_start@@Base+0xde30>
   2389c:	add	r3, sp, #632	; 0x278
   238a0:	str	r3, [sp]
   238a4:	mov	r2, fp
   238a8:	ldr	r3, [sp, #596]	; 0x254
   238ac:	mov	r1, r6
   238b0:	mov	r0, r9
   238b4:	bl	1995c <_start@@Base+0x413c>
   238b8:	cmp	fp, r0
   238bc:	cmpne	r0, r6
   238c0:	mov	r4, r0
   238c4:	bne	22ea4 <_start@@Base+0xd684>
   238c8:	mov	sl, fp
   238cc:	mov	r5, r4
   238d0:	mov	fp, r9
   238d4:	b	21e70 <_start@@Base+0xc650>
   238d8:	ldrb	r3, [r6, #2]
   238dc:	cmp	r3, #32
   238e0:	bls	2117c <_start@@Base+0xb95c>
   238e4:	add	r4, r6, #2
   238e8:	b	21010 <_start@@Base+0xb7f0>
   238ec:	mov	sl, fp
   238f0:	add	r1, r0, #1
   238f4:	sub	r3, sl, r1
   238f8:	cmp	r3, #1
   238fc:	mov	r3, #0
   23900:	mov	fp, r9
   23904:	str	r3, [sp, #620]	; 0x26c
   23908:	ble	2391c <_start@@Base+0xe0fc>
   2390c:	ldrb	r3, [r0, #1]
   23910:	cmp	r3, #32
   23914:	bhi	23a10 <_start@@Base+0xe1f0>
   23918:	beq	23c48 <_start@@Base+0xe428>
   2391c:	mov	r2, sl
   23920:	mov	r0, fp
   23924:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   23928:	ldr	r3, [sp, #620]	; 0x26c
   2392c:	b	21258 <_start@@Base+0xba38>
   23930:	mov	r0, r1
   23934:	add	r1, r1, #1
   23938:	sub	r3, fp, r1
   2393c:	cmp	r3, #1
   23940:	mov	r3, #0
   23944:	str	r3, [sp, #624]	; 0x270
   23948:	ble	2395c <_start@@Base+0xe13c>
   2394c:	ldrb	r3, [r0, #1]
   23950:	cmp	r3, #32
   23954:	bhi	23a18 <_start@@Base+0xe1f8>
   23958:	beq	23c34 <_start@@Base+0xe414>
   2395c:	mov	r2, fp
   23960:	mov	r0, r9
   23964:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   23968:	ldr	r3, [sp, #624]	; 0x270
   2396c:	b	21ae4 <_start@@Base+0xc2c4>
   23970:	mov	r1, r0
   23974:	mov	r3, #8
   23978:	mov	r2, fp
   2397c:	mov	r0, r9
   23980:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   23984:	mov	r4, r0
   23988:	cmp	r6, r4
   2398c:	beq	23acc <_start@@Base+0xe2ac>
   23990:	ldr	r2, [sp, #628]	; 0x274
   23994:	b	22bd4 <_start@@Base+0xd3b4>
   23998:	mov	r1, r0
   2399c:	mov	r3, #8
   239a0:	mov	r2, fp
   239a4:	mov	r0, r9
   239a8:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   239ac:	mov	r4, r0
   239b0:	cmp	r6, r4
   239b4:	beq	23a6c <_start@@Base+0xe24c>
   239b8:	add	r3, sp, #632	; 0x278
   239bc:	ldrd	r2, [r3]
   239c0:	b	2210c <_start@@Base+0xc8ec>
   239c4:	add	r3, sp, #628	; 0x274
   239c8:	str	r3, [sp]
   239cc:	mov	r2, fp
   239d0:	mov	r3, r5
   239d4:	mov	r1, r6
   239d8:	mov	r0, r9
   239dc:	bl	18f48 <_start@@Base+0x3728>
   239e0:	cmp	fp, r0
   239e4:	cmpne	r0, r6
   239e8:	mov	r4, r0
   239ec:	bne	22ed0 <_start@@Base+0xd6b0>
   239f0:	b	238c8 <_start@@Base+0xe0a8>
   239f4:	mov	r1, r4
   239f8:	mov	r3, #7
   239fc:	mov	r2, fp
   23a00:	mov	r0, r9
   23a04:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   23a08:	mov	r4, r0
   23a0c:	b	23988 <_start@@Base+0xe168>
   23a10:	mov	r6, r1
   23a14:	b	2176c <_start@@Base+0xbf4c>
   23a18:	mov	sl, r1
   23a1c:	b	21e58 <_start@@Base+0xc638>
   23a20:	mov	r1, r4
   23a24:	ldr	r3, [sp, #616]	; 0x268
   23a28:	mov	r2, sl
   23a2c:	mov	r0, fp
   23a30:	bl	2f710 <flatcc_json_parser_finalize_unions@@Base>
   23a34:	mov	r4, r0
   23a38:	ldr	r0, [fp]
   23a3c:	bl	289ac <flatcc_builder_end_table@@Base>
   23a40:	ldr	r3, [sp, #592]	; 0x250
   23a44:	cmp	r0, #0
   23a48:	str	r0, [r3]
   23a4c:	beq	2101c <_start@@Base+0xb7fc>
   23a50:	mov	r0, r4
   23a54:	b	21030 <_start@@Base+0xb810>
   23a58:	ldrb	r3, [r0, #2]
   23a5c:	cmp	r3, #32
   23a60:	bls	22f40 <_start@@Base+0xd720>
   23a64:	add	sl, r0, #2
   23a68:	b	22804 <_start@@Base+0xcfe4>
   23a6c:	add	r3, sp, #632	; 0x278
   23a70:	str	r3, [sp]
   23a74:	mov	r2, fp
   23a78:	mov	r3, r8
   23a7c:	mov	r1, r6
   23a80:	mov	r0, r9
   23a84:	bl	1995c <_start@@Base+0x413c>
   23a88:	cmp	fp, r0
   23a8c:	cmpne	r0, r6
   23a90:	mov	r4, r0
   23a94:	bne	239b8 <_start@@Base+0xe198>
   23a98:	b	238c8 <_start@@Base+0xe0a8>
   23a9c:	ldrb	r3, [r6, #2]
   23aa0:	cmp	r3, #32
   23aa4:	addhi	r4, r6, #2
   23aa8:	bls	222f0 <_start@@Base+0xcad0>
   23aac:	b	22304 <_start@@Base+0xcae4>
   23ab0:	mov	r1, r0
   23ab4:	mov	r3, #7
   23ab8:	mov	r2, fp
   23abc:	mov	r0, r9
   23ac0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   23ac4:	mov	r4, r0
   23ac8:	b	22e9c <_start@@Base+0xd67c>
   23acc:	add	r3, sp, #628	; 0x274
   23ad0:	str	r3, [sp]
   23ad4:	mov	r2, fp
   23ad8:	mov	r3, r5
   23adc:	mov	r1, r6
   23ae0:	mov	r0, r9
   23ae4:	bl	18f48 <_start@@Base+0x3728>
   23ae8:	cmp	fp, r0
   23aec:	cmpne	r0, r6
   23af0:	mov	r4, r0
   23af4:	bne	23990 <_start@@Base+0xe170>
   23af8:	b	238c8 <_start@@Base+0xe0a8>
   23afc:	mov	sl, r1
   23b00:	b	22804 <_start@@Base+0xcfe4>
   23b04:	mov	r3, #0
   23b08:	add	r1, r4, #1
   23b0c:	mov	r2, sl
   23b10:	mov	r0, fp
   23b14:	str	r3, [sp, #608]	; 0x260
   23b18:	bl	17770 <_start@@Base+0x1f50>
   23b1c:	ldr	r3, [sp, #608]	; 0x260
   23b20:	mov	r4, r0
   23b24:	b	20d88 <_start@@Base+0xb568>
   23b28:	mov	r1, r0
   23b2c:	str	r4, [sp]
   23b30:	ldr	r3, [sp, #600]	; 0x258
   23b34:	mov	r2, fp
   23b38:	mov	r0, r9
   23b3c:	bl	1995c <_start@@Base+0x413c>
   23b40:	cmp	fp, r0
   23b44:	cmpne	sl, r0
   23b48:	beq	23cb8 <_start@@Base+0xe498>
   23b4c:	mov	sl, r0
   23b50:	b	237d4 <_start@@Base+0xdfb4>
   23b54:	ldr	r3, [pc, #-1588]	; 23528 <_start@@Base+0xdd08>
   23b58:	mov	r1, r0
   23b5c:	add	r3, pc, r3
   23b60:	str	r4, [sp]
   23b64:	add	r3, r3, #588	; 0x24c
   23b68:	mov	r2, fp
   23b6c:	mov	r0, r9
   23b70:	bl	1995c <_start@@Base+0x413c>
   23b74:	cmp	fp, r0
   23b78:	cmpne	sl, r0
   23b7c:	beq	23cb8 <_start@@Base+0xe498>
   23b80:	mov	sl, r0
   23b84:	b	23860 <_start@@Base+0xe040>
   23b88:	mov	r1, r0
   23b8c:	mov	r3, #7
   23b90:	mov	r2, fp
   23b94:	mov	r0, r9
   23b98:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   23b9c:	mov	r4, r0
   23ba0:	b	239b0 <_start@@Base+0xe190>
   23ba4:	ldr	r3, [pc, #-1664]	; 2352c <_start@@Base+0xdd0c>
   23ba8:	mov	r1, r0
   23bac:	add	r3, pc, r3
   23bb0:	str	r4, [sp]
   23bb4:	add	r3, r3, #576	; 0x240
   23bb8:	mov	r2, fp
   23bbc:	mov	r0, r9
   23bc0:	bl	1995c <_start@@Base+0x413c>
   23bc4:	cmp	fp, r0
   23bc8:	cmpne	sl, r0
   23bcc:	beq	23cb8 <_start@@Base+0xe498>
   23bd0:	mov	sl, r0
   23bd4:	b	23720 <_start@@Base+0xdf00>
   23bd8:	mov	ip, #0
   23bdc:	mov	r3, #10
   23be0:	mov	r2, sl
   23be4:	mov	r1, sl
   23be8:	mov	r0, fp
   23bec:	str	ip, [sp, #608]	; 0x260
   23bf0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   23bf4:	ldr	r3, [sp, #608]	; 0x260
   23bf8:	mov	r4, r0
   23bfc:	b	20d88 <_start@@Base+0xb568>
   23c00:	ldr	r3, [pc, #-1752]	; 23530 <_start@@Base+0xdd10>
   23c04:	mov	r1, r0
   23c08:	add	r3, pc, r3
   23c0c:	str	r5, [sp]
   23c10:	add	r3, r3, #564	; 0x234
   23c14:	mov	r2, fp
   23c18:	mov	r0, r9
   23c1c:	bl	18f48 <_start@@Base+0x3728>
   23c20:	cmp	fp, r0
   23c24:	cmpne	sl, r0
   23c28:	beq	23cb8 <_start@@Base+0xe498>
   23c2c:	mov	sl, r0
   23c30:	b	234a4 <_start@@Base+0xdc84>
   23c34:	ldrb	r3, [r0, #2]
   23c38:	cmp	r3, #32
   23c3c:	bls	2395c <_start@@Base+0xe13c>
   23c40:	add	sl, r0, #2
   23c44:	b	21e58 <_start@@Base+0xc638>
   23c48:	ldrb	r3, [r0, #2]
   23c4c:	cmp	r3, #32
   23c50:	bls	2391c <_start@@Base+0xe0fc>
   23c54:	add	r6, r0, #2
   23c58:	b	2176c <_start@@Base+0xbf4c>
   23c5c:	mov	r1, r0
   23c60:	str	r5, [sp]
   23c64:	ldr	r3, [sp, #604]	; 0x25c
   23c68:	mov	r2, fp
   23c6c:	mov	r0, r9
   23c70:	bl	18f48 <_start@@Base+0x3728>
   23c74:	cmp	fp, r0
   23c78:	cmpne	sl, r0
   23c7c:	beq	23cb8 <_start@@Base+0xe498>
   23c80:	mov	sl, r0
   23c84:	b	23228 <_start@@Base+0xda08>
   23c88:	ldr	r3, [pc, #-1884]	; 23534 <_start@@Base+0xdd14>
   23c8c:	mov	r1, r0
   23c90:	add	r3, pc, r3
   23c94:	str	r5, [sp]
   23c98:	add	r3, r3, #600	; 0x258
   23c9c:	mov	r2, fp
   23ca0:	mov	r0, r9
   23ca4:	bl	18f48 <_start@@Base+0x3728>
   23ca8:	cmp	fp, r0
   23cac:	cmpne	sl, r0
   23cb0:	movne	sl, r0
   23cb4:	bne	235bc <_start@@Base+0xdd9c>
   23cb8:	add	r3, sp, #584	; 0x248
   23cbc:	mov	sl, fp
   23cc0:	strd	r6, [r3]
   23cc4:	mov	fp, r9
   23cc8:	b	23274 <_start@@Base+0xda54>
   23ccc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23cd0:	sub	sp, sp, #108	; 0x6c
   23cd4:	mov	r9, r2
   23cd8:	ldr	r2, [sp, #144]	; 0x90
   23cdc:	mov	ip, #0
   23ce0:	mov	r5, r0
   23ce4:	mov	r4, r1
   23ce8:	str	ip, [r2]
   23cec:	cmp	r3, #4
   23cf0:	addls	pc, pc, r3, lsl #2
   23cf4:	b	243b8 <_start@@Base+0xeb98>
   23cf8:	b	23d50 <_start@@Base+0xe530>
   23cfc:	b	23d98 <_start@@Base+0xe578>
   23d00:	b	23da8 <_start@@Base+0xe588>
   23d04:	b	24074 <_start@@Base+0xe854>
   23d08:	b	23d0c <_start@@Base+0xe4ec>
   23d0c:	ldr	r3, [sp, #144]	; 0x90
   23d10:	mov	r2, r9
   23d14:	bl	20d08 <_start@@Base+0xb4e8>
   23d18:	ldr	r3, [r5, #24]
   23d1c:	cmp	r3, #0
   23d20:	bne	23d48 <_start@@Base+0xe528>
   23d24:	ldr	r3, [sp, #144]	; 0x90
   23d28:	ldr	r3, [r3]
   23d2c:	cmp	r3, #0
   23d30:	bne	23d48 <_start@@Base+0xe528>
   23d34:	mov	r1, r0
   23d38:	mov	r2, r9
   23d3c:	mov	r0, r5
   23d40:	mov	r3, #33	; 0x21
   23d44:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   23d48:	add	sp, sp, #108	; 0x6c
   23d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23d50:	sub	r3, r9, r1
   23d54:	cmp	r3, #3
   23d58:	ble	23d7c <_start@@Base+0xe55c>
   23d5c:	ldr	r1, [pc, #1348]	; 242a8 <_start@@Base+0xea88>
   23d60:	mov	r2, #4
   23d64:	add	r1, pc, r1
   23d68:	mov	r0, r4
   23d6c:	bl	14550 <memcmp@plt>
   23d70:	cmp	r0, #0
   23d74:	addeq	r0, r4, #4
   23d78:	beq	23d48 <_start@@Base+0xe528>
   23d7c:	mov	r2, r9
   23d80:	mov	r1, r4
   23d84:	mov	r0, r5
   23d88:	mov	r3, #26
   23d8c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   23d90:	add	sp, sp, #108	; 0x6c
   23d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23d98:	ldr	r3, [sp, #144]	; 0x90
   23d9c:	mov	r2, r9
   23da0:	bl	1c5e8 <_start@@Base+0x6dc8>
   23da4:	b	23d18 <_start@@Base+0xe4f8>
   23da8:	mov	r1, #4
   23dac:	ldr	r0, [r0]
   23db0:	bl	27fb8 <flatcc_builder_start_table@@Base>
   23db4:	cmp	r0, #0
   23db8:	bne	24384 <_start@@Base+0xeb64>
   23dbc:	add	fp, sp, #88	; 0x58
   23dc0:	mov	r1, r4
   23dc4:	mov	r3, fp
   23dc8:	mov	r2, r9
   23dcc:	mov	r0, r5
   23dd0:	bl	185c4 <_start@@Base+0x2da4>
   23dd4:	ldr	r3, [sp, #88]	; 0x58
   23dd8:	cmp	r3, #0
   23ddc:	mov	r4, r0
   23de0:	beq	2462c <_start@@Base+0xee0c>
   23de4:	ldr	r1, [pc, #1216]	; 242ac <_start@@Base+0xea8c>
   23de8:	ldr	r2, [pc, #1216]	; 242b0 <_start@@Base+0xea90>
   23dec:	ldr	r3, [pc, #1216]	; 242b4 <_start@@Base+0xea94>
   23df0:	add	r1, pc, r1
   23df4:	add	r2, pc, r2
   23df8:	add	r3, pc, r3
   23dfc:	add	r1, r1, #704	; 0x2c0
   23e00:	add	r2, r2, #660	; 0x294
   23e04:	add	r3, r3, #692	; 0x2b4
   23e08:	str	r1, [sp, #68]	; 0x44
   23e0c:	str	r2, [sp, #72]	; 0x48
   23e10:	str	r3, [sp, #76]	; 0x4c
   23e14:	mov	r8, r5
   23e18:	b	24008 <_start@@Base+0xe7e8>
   23e1c:	ldrb	r6, [r4, #7]
   23e20:	mov	r7, #0
   23e24:	ldrb	r2, [r4, #6]
   23e28:	lsr	r1, r2, #24
   23e2c:	lsl	r3, r2, #8
   23e30:	str	r1, [sp, #60]	; 0x3c
   23e34:	str	r3, [sp, #56]	; 0x38
   23e38:	ldrd	r2, [sp, #56]	; 0x38
   23e3c:	orr	r2, r2, r6
   23e40:	orr	r3, r3, r7
   23e44:	mov	r6, r2
   23e48:	mov	r7, r3
   23e4c:	ldrb	r2, [r4, #5]
   23e50:	lsr	r1, r2, #16
   23e54:	lsl	r3, r2, #16
   23e58:	str	r1, [sp, #52]	; 0x34
   23e5c:	str	r3, [sp, #48]	; 0x30
   23e60:	ldrd	r2, [sp, #48]	; 0x30
   23e64:	orr	r2, r2, r6
   23e68:	orr	r3, r3, r7
   23e6c:	mov	r6, r2
   23e70:	mov	r7, r3
   23e74:	ldrb	r2, [r4, #4]
   23e78:	lsr	r1, r2, #8
   23e7c:	lsl	r3, r2, #24
   23e80:	str	r1, [sp, #36]	; 0x24
   23e84:	str	r3, [sp, #32]
   23e88:	ldrd	r2, [sp, #32]
   23e8c:	orr	r2, r2, r6
   23e90:	orr	r3, r3, r7
   23e94:	mov	r6, r2
   23e98:	mov	r7, r3
   23e9c:	ldrb	r3, [r4, #3]
   23ea0:	str	r3, [sp, #44]	; 0x2c
   23ea4:	mov	r3, #0
   23ea8:	str	r3, [sp, #40]	; 0x28
   23eac:	ldrd	r2, [sp, #40]	; 0x28
   23eb0:	orr	r2, r2, r6
   23eb4:	orr	r3, r3, r7
   23eb8:	mov	r6, r2
   23ebc:	mov	r7, r3
   23ec0:	ldrb	r2, [r4, #2]
   23ec4:	lsl	r3, r2, #8
   23ec8:	str	r3, [sp, #28]
   23ecc:	mov	r3, #0
   23ed0:	str	r3, [sp, #24]
   23ed4:	ldrd	r2, [sp, #24]
   23ed8:	orr	r2, r2, r6
   23edc:	orr	r3, r3, r7
   23ee0:	mov	r6, r2
   23ee4:	mov	r7, r3
   23ee8:	ldrb	r2, [r4, #1]
   23eec:	lsl	r3, r2, #16
   23ef0:	str	r3, [sp, #20]
   23ef4:	mov	r3, #0
   23ef8:	str	r3, [sp, #16]
   23efc:	ldrd	r2, [sp, #16]
   23f00:	orr	r2, r2, r6
   23f04:	orr	r3, r3, r7
   23f08:	mov	r6, r2
   23f0c:	mov	r7, r3
   23f10:	ldrb	r0, [r4]
   23f14:	add	r3, pc, #884	; 0x374
   23f18:	ldrd	r2, [r3]
   23f1c:	lsl	r1, r0, #24
   23f20:	str	r1, [sp, #12]
   23f24:	mov	r1, #0
   23f28:	str	r1, [sp, #8]
   23f2c:	ldrd	r0, [sp, #8]
   23f30:	orr	r0, r0, r6
   23f34:	orr	r1, r1, r7
   23f38:	mov	r6, r0
   23f3c:	mov	r7, r1
   23f40:	ldr	r0, [pc, #880]	; 242b8 <_start@@Base+0xea98>
   23f44:	mvn	r1, #0
   23f48:	and	r1, r1, r7
   23f4c:	and	r0, r0, r6
   23f50:	cmp	r1, r3
   23f54:	cmpeq	r0, r2
   23f58:	beq	240d8 <_start@@Base+0xe8b8>
   23f5c:	add	r3, pc, #820	; 0x334
   23f60:	ldrd	r2, [r3]
   23f64:	and	r0, r6, #-16777216	; 0xff000000
   23f68:	cmp	r7, r3
   23f6c:	cmpeq	r0, r2
   23f70:	movne	sl, #1
   23f74:	moveq	sl, #0
   23f78:	cmp	r5, #5
   23f7c:	orrle	sl, sl, #1
   23f80:	cmp	sl, #0
   23f84:	beq	24410 <_start@@Base+0xebf0>
   23f88:	add	r3, pc, #784	; 0x310
   23f8c:	ldrd	r2, [r3]
   23f90:	bic	r1, r7, #255	; 0xff
   23f94:	mov	r0, #0
   23f98:	cmp	r1, r3
   23f9c:	cmpeq	r0, r2
   23fa0:	beq	241ac <_start@@Base+0xe98c>
   23fa4:	ldr	r3, [pc, #780]	; 242b8 <_start@@Base+0xea98>
   23fa8:	mov	r2, #0
   23fac:	and	r7, r7, r3
   23fb0:	ldr	r3, [pc, #772]	; 242bc <_start@@Base+0xea9c>
   23fb4:	and	r6, r6, r2
   23fb8:	cmp	r7, r3
   23fbc:	mov	r2, #0
   23fc0:	cmpeq	r6, r2
   23fc4:	bne	23fd0 <_start@@Base+0xe7b0>
   23fc8:	cmp	r5, #2
   23fcc:	bgt	242c4 <_start@@Base+0xeaa4>
   23fd0:	mov	r1, r4
   23fd4:	mov	r2, r9
   23fd8:	mov	r0, r8
   23fdc:	bl	2edc0 <flatcc_json_parser_unmatched_symbol@@Base>
   23fe0:	mov	r4, r0
   23fe4:	mov	r1, r4
   23fe8:	mov	r3, fp
   23fec:	mov	r2, r9
   23ff0:	mov	r0, r8
   23ff4:	bl	1a6cc <_start@@Base+0x4eac>
   23ff8:	ldr	r3, [sp, #88]	; 0x58
   23ffc:	cmp	r3, #0
   24000:	mov	r4, r0
   24004:	beq	24628 <_start@@Base+0xee08>
   24008:	cmp	r9, r4
   2400c:	beq	2427c <_start@@Base+0xea5c>
   24010:	ldrb	r3, [r4]
   24014:	cmp	r3, #34	; 0x22
   24018:	moveq	r3, #0
   2401c:	addeq	r4, r4, #1
   24020:	streq	r3, [r8, #12]
   24024:	beq	24038 <_start@@Base+0xe818>
   24028:	cmp	r3, #46	; 0x2e
   2402c:	movne	r3, #1
   24030:	strne	r3, [r8, #12]
   24034:	beq	2439c <_start@@Base+0xeb7c>
   24038:	sub	r5, r9, r4
   2403c:	cmp	r5, #8
   24040:	bhi	23e1c <_start@@Base+0xe5fc>
   24044:	sub	r3, r5, #1
   24048:	cmp	r3, #7
   2404c:	addls	pc, pc, r3, lsl #2
   24050:	b	24280 <_start@@Base+0xea60>
   24054:	b	240cc <_start@@Base+0xe8ac>
   24058:	b	240c0 <_start@@Base+0xe8a0>
   2405c:	b	240b4 <_start@@Base+0xe894>
   24060:	b	240a8 <_start@@Base+0xe888>
   24064:	b	2409c <_start@@Base+0xe87c>
   24068:	b	24090 <_start@@Base+0xe870>
   2406c:	b	24084 <_start@@Base+0xe864>
   24070:	b	23e1c <_start@@Base+0xe5fc>
   24074:	ldr	r3, [sp, #144]	; 0x90
   24078:	mov	r2, r9
   2407c:	bl	1bae8 <_start@@Base+0x62c8>
   24080:	b	23d18 <_start@@Base+0xe4f8>
   24084:	mov	r6, #0
   24088:	mov	r7, #0
   2408c:	b	23e24 <_start@@Base+0xe604>
   24090:	mov	r6, #0
   24094:	mov	r7, #0
   24098:	b	23e4c <_start@@Base+0xe62c>
   2409c:	mov	r6, #0
   240a0:	mov	r7, #0
   240a4:	b	23e74 <_start@@Base+0xe654>
   240a8:	mov	r6, #0
   240ac:	mov	r7, #0
   240b0:	b	23e9c <_start@@Base+0xe67c>
   240b4:	mov	r6, #0
   240b8:	mov	r7, #0
   240bc:	b	23ec0 <_start@@Base+0xe6a0>
   240c0:	mov	r6, #0
   240c4:	mov	r7, #0
   240c8:	b	23ee8 <_start@@Base+0xe6c8>
   240cc:	mov	r6, #0
   240d0:	mov	r7, #0
   240d4:	b	23f10 <_start@@Base+0xe6f0>
   240d8:	cmp	r5, #6
   240dc:	ble	23fa4 <_start@@Base+0xe784>
   240e0:	mov	r3, #6
   240e4:	mov	r2, r9
   240e8:	mov	r1, r4
   240ec:	mov	r0, r8
   240f0:	bl	18678 <_start@@Base+0x2e58>
   240f4:	cmp	r0, r4
   240f8:	mov	sl, r0
   240fc:	beq	23fa4 <_start@@Base+0xe784>
   24100:	cmp	r9, r0
   24104:	ldrd	r0, [sp, #8]
   24108:	mov	r2, #0
   2410c:	mov	r3, #0
   24110:	strb	r0, [sp, #87]	; 0x57
   24114:	str	r0, [sp, #92]	; 0x5c
   24118:	strd	r2, [sp, #96]	; 0x60
   2411c:	beq	24550 <_start@@Base+0xed30>
   24120:	add	r3, sp, #96	; 0x60
   24124:	str	r3, [sp]
   24128:	mov	r2, r9
   2412c:	add	r3, sp, #92	; 0x5c
   24130:	mov	r1, sl
   24134:	mov	r0, r8
   24138:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   2413c:	cmp	sl, r0
   24140:	mov	r4, r0
   24144:	beq	2454c <_start@@Base+0xed2c>
   24148:	ldr	r1, [sp, #92]	; 0x5c
   2414c:	ldrd	r2, [sp, #96]	; 0x60
   24150:	cmp	r1, #0
   24154:	beq	243d4 <_start@@Base+0xebb4>
   24158:	cmp	r3, #0
   2415c:	cmpeq	r2, #128	; 0x80
   24160:	rsbls	r2, r2, #0
   24164:	sxtbls	r2, r2
   24168:	strbls	r2, [sp, #87]	; 0x57
   2416c:	bhi	24698 <_start@@Base+0xee78>
   24170:	cmp	r2, #2
   24174:	bne	24184 <_start@@Base+0xe964>
   24178:	ldr	r3, [r8, #8]
   2417c:	tst	r3, #2
   24180:	beq	23fe4 <_start@@Base+0xe7c4>
   24184:	mov	r3, #1
   24188:	mov	r2, r3
   2418c:	mov	r1, r3
   24190:	ldr	r0, [r8]
   24194:	bl	299f8 <flatcc_builder_table_add@@Base>
   24198:	cmp	r0, #0
   2419c:	beq	24380 <_start@@Base+0xeb60>
   241a0:	ldrsb	r3, [sp, #87]	; 0x57
   241a4:	strb	r3, [r0]
   241a8:	b	23fe4 <_start@@Base+0xe7c4>
   241ac:	cmp	r5, #3
   241b0:	ble	23fd0 <_start@@Base+0xe7b0>
   241b4:	mov	r3, #3
   241b8:	mov	r2, r9
   241bc:	mov	r1, r4
   241c0:	mov	r0, r8
   241c4:	bl	18678 <_start@@Base+0x2e58>
   241c8:	cmp	r0, r4
   241cc:	mov	r5, r0
   241d0:	beq	23fd0 <_start@@Base+0xe7b0>
   241d4:	mov	r0, #0
   241d8:	mov	r1, #0
   241dc:	mov	r3, #0
   241e0:	cmp	r9, r5
   241e4:	strd	r0, [sp, #96]	; 0x60
   241e8:	strb	r3, [sp, #87]	; 0x57
   241ec:	str	r3, [sp, #92]	; 0x5c
   241f0:	beq	2458c <_start@@Base+0xed6c>
   241f4:	add	r3, sp, #96	; 0x60
   241f8:	str	r3, [sp]
   241fc:	mov	r2, r9
   24200:	add	r3, sp, #92	; 0x5c
   24204:	mov	r1, r5
   24208:	mov	r0, r8
   2420c:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   24210:	cmp	r5, r0
   24214:	mov	r4, r0
   24218:	beq	24588 <_start@@Base+0xed68>
   2421c:	ldr	r3, [sp, #92]	; 0x5c
   24220:	cmp	r3, #0
   24224:	bne	24658 <_start@@Base+0xee38>
   24228:	ldrd	r2, [sp, #96]	; 0x60
   2422c:	cmp	r3, #0
   24230:	cmpeq	r2, #255	; 0xff
   24234:	uxtbls	r2, r2
   24238:	strbls	r2, [sp, #87]	; 0x57
   2423c:	bhi	246b4 <_start@@Base+0xee94>
   24240:	cmp	r2, #2
   24244:	bne	24254 <_start@@Base+0xea34>
   24248:	ldr	r3, [r8, #8]
   2424c:	tst	r3, #2
   24250:	beq	23fe4 <_start@@Base+0xe7c4>
   24254:	mov	r3, #1
   24258:	mov	r2, r3
   2425c:	mov	r1, #3
   24260:	ldr	r0, [r8]
   24264:	bl	299f8 <flatcc_builder_table_add@@Base>
   24268:	cmp	r0, #0
   2426c:	beq	24380 <_start@@Base+0xeb60>
   24270:	ldrb	r3, [sp, #87]	; 0x57
   24274:	strb	r3, [r0]
   24278:	b	23fe4 <_start@@Base+0xe7c4>
   2427c:	mov	r5, #0
   24280:	mov	r6, #0
   24284:	mov	r7, #0
   24288:	b	23fa4 <_start@@Base+0xe784>
   2428c:	nop			; (mov r0, r0)
   24290:	eorsvc	r0, r2, #0
   24294:	cmnvs	pc, #28416	; 0x6f00
   24298:	andvc	r0, r0, #0
   2429c:	cmnvs	pc, #28416	; 0x6f00
   242a0:	andeq	r0, r0, r0
   242a4:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   242a8:	andeq	sl, r1, r4, asr #12
   242ac:	muleq	r3, r0, r2
   242b0:	andeq	r1, r3, ip, lsl #5
   242b4:	andeq	r1, r3, r8, lsl #5
   242b8:			; <UNDEFINED> instruction: 0xffff0000
   242bc:	strbvc	r0, [r3, #-0]!
   242c0:	andeq	r0, r3, r8, lsl #21
   242c4:	mov	r3, #2
   242c8:	mov	r2, r9
   242cc:	mov	r1, r4
   242d0:	mov	r0, r8
   242d4:	bl	18678 <_start@@Base+0x2e58>
   242d8:	cmp	r0, r4
   242dc:	mov	r5, r0
   242e0:	beq	23fd0 <_start@@Base+0xe7b0>
   242e4:	mov	r0, #0
   242e8:	mov	r1, #0
   242ec:	mov	r3, #0
   242f0:	cmp	r9, r5
   242f4:	strd	r0, [sp, #96]	; 0x60
   242f8:	strb	r3, [sp, #87]	; 0x57
   242fc:	str	r3, [sp, #92]	; 0x5c
   24300:	beq	24518 <_start@@Base+0xecf8>
   24304:	add	r3, sp, #96	; 0x60
   24308:	str	r3, [sp]
   2430c:	mov	r2, r9
   24310:	add	r3, sp, #92	; 0x5c
   24314:	mov	r1, r5
   24318:	mov	r0, r8
   2431c:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   24320:	cmp	r5, r0
   24324:	mov	r4, r0
   24328:	beq	24514 <_start@@Base+0xecf4>
   2432c:	ldr	r3, [sp, #92]	; 0x5c
   24330:	cmp	r3, #0
   24334:	bne	245c0 <_start@@Base+0xeda0>
   24338:	ldrd	r2, [sp, #96]	; 0x60
   2433c:	cmp	r3, #0
   24340:	cmpeq	r2, #255	; 0xff
   24344:	uxtbls	r2, r2
   24348:	strbls	r2, [sp, #87]	; 0x57
   2434c:	bhi	2467c <_start@@Base+0xee5c>
   24350:	cmp	r2, #2
   24354:	bne	24364 <_start@@Base+0xeb44>
   24358:	ldr	r3, [r8, #8]
   2435c:	tst	r3, #2
   24360:	beq	23fe4 <_start@@Base+0xe7c4>
   24364:	mov	r3, #1
   24368:	mov	r2, r3
   2436c:	mov	r1, #2
   24370:	ldr	r0, [r8]
   24374:	bl	299f8 <flatcc_builder_table_add@@Base>
   24378:	cmp	r0, #0
   2437c:	bne	24270 <_start@@Base+0xea50>
   24380:	mov	r5, r8
   24384:	mov	r1, r4
   24388:	mov	r3, #33	; 0x21
   2438c:	mov	r2, r9
   24390:	mov	r0, r5
   24394:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   24398:	b	23d18 <_start@@Base+0xe4f8>
   2439c:	mov	r1, r4
   243a0:	mov	r3, #5
   243a4:	mov	r2, r9
   243a8:	mov	r0, r8
   243ac:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   243b0:	mov	r4, r0
   243b4:	b	24038 <_start@@Base+0xe818>
   243b8:	ldr	r3, [r0, #8]
   243bc:	mov	r2, r9
   243c0:	tst	r3, #1
   243c4:	bne	24580 <_start@@Base+0xed60>
   243c8:	mov	r3, #15
   243cc:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   243d0:	b	23d48 <_start@@Base+0xe528>
   243d4:	cmp	r3, #0
   243d8:	cmpeq	r2, #127	; 0x7f
   243dc:	sxtbls	r2, r2
   243e0:	strbls	r2, [sp, #87]	; 0x57
   243e4:	bls	24170 <_start@@Base+0xe950>
   243e8:	mov	r1, r0
   243ec:	mov	r3, #7
   243f0:	mov	r2, r9
   243f4:	mov	r0, r8
   243f8:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   243fc:	mov	r4, r0
   24400:	cmp	sl, r4
   24404:	beq	24550 <_start@@Base+0xed30>
   24408:	ldrsb	r2, [sp, #87]	; 0x57
   2440c:	b	24170 <_start@@Base+0xe950>
   24410:	mov	r1, r4
   24414:	mov	r3, #5
   24418:	mov	r2, r9
   2441c:	mov	r0, r8
   24420:	bl	18678 <_start@@Base+0x2e58>
   24424:	cmp	r0, r4
   24428:	mov	r1, r0
   2442c:	str	r0, [sp, #64]	; 0x40
   24430:	beq	23f88 <_start@@Base+0xe768>
   24434:	mov	r2, #0
   24438:	mov	r3, #0
   2443c:	cmp	r9, r0
   24440:	strb	sl, [sp, #87]	; 0x57
   24444:	str	sl, [sp, #92]	; 0x5c
   24448:	strd	r2, [sp, #96]	; 0x60
   2444c:	beq	245ec <_start@@Base+0xedcc>
   24450:	add	r3, sp, #96	; 0x60
   24454:	str	r3, [sp]
   24458:	mov	r5, r0
   2445c:	add	r3, sp, #92	; 0x5c
   24460:	mov	r2, r9
   24464:	mov	r0, r8
   24468:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   2446c:	cmp	r5, r0
   24470:	mov	r4, r0
   24474:	beq	245e8 <_start@@Base+0xedc8>
   24478:	ldr	r1, [sp, #92]	; 0x5c
   2447c:	ldrd	r2, [sp, #96]	; 0x60
   24480:	cmp	r1, #0
   24484:	beq	244d4 <_start@@Base+0xecb4>
   24488:	cmp	r3, #0
   2448c:	cmpeq	r2, #128	; 0x80
   24490:	rsbls	r2, r2, #0
   24494:	sxtbls	r2, r2
   24498:	strbls	r2, [sp, #87]	; 0x57
   2449c:	bhi	246d0 <_start@@Base+0xeeb0>
   244a0:	cmp	r2, #2
   244a4:	bne	244b4 <_start@@Base+0xec94>
   244a8:	ldr	r3, [r8, #8]
   244ac:	tst	r3, #2
   244b0:	beq	23fe4 <_start@@Base+0xe7c4>
   244b4:	mov	r3, #1
   244b8:	mov	r2, r3
   244bc:	mov	r1, #0
   244c0:	ldr	r0, [r8]
   244c4:	bl	299f8 <flatcc_builder_table_add@@Base>
   244c8:	cmp	r0, #0
   244cc:	bne	241a0 <_start@@Base+0xe980>
   244d0:	b	24380 <_start@@Base+0xeb60>
   244d4:	cmp	r3, #0
   244d8:	cmpeq	r2, #127	; 0x7f
   244dc:	sxtbls	r2, r2
   244e0:	strbls	r2, [sp, #87]	; 0x57
   244e4:	bls	244a0 <_start@@Base+0xec80>
   244e8:	mov	r1, r0
   244ec:	mov	r3, #7
   244f0:	mov	r2, r9
   244f4:	mov	r0, r8
   244f8:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   244fc:	mov	r4, r0
   24500:	ldr	r3, [sp, #64]	; 0x40
   24504:	cmp	r3, r4
   24508:	beq	245ec <_start@@Base+0xedcc>
   2450c:	ldrsb	r2, [sp, #87]	; 0x57
   24510:	b	244a0 <_start@@Base+0xec80>
   24514:	mov	r5, r0
   24518:	add	r3, sp, #87	; 0x57
   2451c:	str	r3, [sp]
   24520:	mov	r2, r9
   24524:	ldr	r3, [sp, #68]	; 0x44
   24528:	mov	r1, r5
   2452c:	mov	r0, r8
   24530:	bl	19768 <_start@@Base+0x3f48>
   24534:	cmp	r9, r0
   24538:	cmpne	r0, r5
   2453c:	mov	r4, r0
   24540:	beq	24380 <_start@@Base+0xeb60>
   24544:	ldrb	r2, [sp, #87]	; 0x57
   24548:	b	24350 <_start@@Base+0xeb30>
   2454c:	mov	sl, r0
   24550:	add	r3, sp, #87	; 0x57
   24554:	str	r3, [sp]
   24558:	mov	r2, r9
   2455c:	ldr	r3, [sp, #72]	; 0x48
   24560:	mov	r1, sl
   24564:	mov	r0, r8
   24568:	bl	19350 <_start@@Base+0x3b30>
   2456c:	cmp	r9, r0
   24570:	cmpne	r0, sl
   24574:	mov	r4, r0
   24578:	bne	24408 <_start@@Base+0xebe8>
   2457c:	b	24380 <_start@@Base+0xeb60>
   24580:	bl	2e3d0 <flatcc_json_parser_generic_json@@Base>
   24584:	b	23d48 <_start@@Base+0xe528>
   24588:	mov	r5, r0
   2458c:	add	r3, sp, #87	; 0x57
   24590:	str	r3, [sp]
   24594:	mov	r2, r9
   24598:	ldr	r3, [sp, #76]	; 0x4c
   2459c:	mov	r1, r5
   245a0:	mov	r0, r8
   245a4:	bl	19768 <_start@@Base+0x3f48>
   245a8:	cmp	r9, r0
   245ac:	cmpne	r0, r5
   245b0:	mov	r4, r0
   245b4:	beq	24380 <_start@@Base+0xeb60>
   245b8:	ldrb	r2, [sp, #87]	; 0x57
   245bc:	b	24240 <_start@@Base+0xea20>
   245c0:	mov	r1, r0
   245c4:	mov	r3, #8
   245c8:	mov	r2, r9
   245cc:	mov	r0, r8
   245d0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   245d4:	mov	r4, r0
   245d8:	cmp	r5, r4
   245dc:	beq	24518 <_start@@Base+0xecf8>
   245e0:	ldrb	r2, [sp, #87]	; 0x57
   245e4:	b	24350 <_start@@Base+0xeb30>
   245e8:	str	r0, [sp, #64]	; 0x40
   245ec:	ldr	r3, [pc, #-820]	; 242c0 <_start@@Base+0xeaa0>
   245f0:	ldr	r5, [sp, #64]	; 0x40
   245f4:	add	r2, sp, #87	; 0x57
   245f8:	add	r3, pc, r3
   245fc:	str	r2, [sp]
   24600:	add	r3, r3, #676	; 0x2a4
   24604:	mov	r2, r9
   24608:	mov	r1, r5
   2460c:	mov	r0, r8
   24610:	bl	19350 <_start@@Base+0x3b30>
   24614:	cmp	r9, r0
   24618:	cmpne	r0, r5
   2461c:	mov	r4, r0
   24620:	bne	2450c <_start@@Base+0xecec>
   24624:	b	24380 <_start@@Base+0xeb60>
   24628:	mov	r5, r8
   2462c:	ldr	r3, [r5, #24]
   24630:	cmp	r3, #0
   24634:	bne	24384 <_start@@Base+0xeb64>
   24638:	ldr	r0, [r5]
   2463c:	bl	289ac <flatcc_builder_end_table@@Base>
   24640:	ldr	r3, [sp, #144]	; 0x90
   24644:	cmp	r0, #0
   24648:	str	r0, [r3]
   2464c:	beq	24384 <_start@@Base+0xeb64>
   24650:	mov	r0, r4
   24654:	b	23d18 <_start@@Base+0xe4f8>
   24658:	mov	r1, r0
   2465c:	mov	r3, #8
   24660:	mov	r2, r9
   24664:	mov	r0, r8
   24668:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2466c:	mov	r4, r0
   24670:	cmp	r5, r4
   24674:	bne	245b8 <_start@@Base+0xed98>
   24678:	b	2458c <_start@@Base+0xed6c>
   2467c:	mov	r1, r0
   24680:	mov	r3, #7
   24684:	mov	r2, r9
   24688:	mov	r0, r8
   2468c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   24690:	mov	r4, r0
   24694:	b	245d8 <_start@@Base+0xedb8>
   24698:	mov	r1, r0
   2469c:	mov	r3, #8
   246a0:	mov	r2, r9
   246a4:	mov	r0, r8
   246a8:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   246ac:	mov	r4, r0
   246b0:	b	24400 <_start@@Base+0xebe0>
   246b4:	mov	r1, r0
   246b8:	mov	r3, #7
   246bc:	mov	r2, r9
   246c0:	mov	r0, r8
   246c4:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   246c8:	mov	r4, r0
   246cc:	b	24670 <_start@@Base+0xee50>
   246d0:	mov	r1, r0
   246d4:	mov	r3, #8
   246d8:	mov	r2, r9
   246dc:	mov	r0, r8
   246e0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   246e4:	mov	r4, r0
   246e8:	b	24500 <_start@@Base+0xece0>
   246ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   246f0:	mov	r4, r1
   246f4:	sub	sp, sp, #28
   246f8:	mov	r1, r2
   246fc:	mov	r8, r0
   24700:	mov	r0, r4
   24704:	mov	r5, r2
   24708:	mov	sl, r3
   2470c:	bl	15948 <_start@@Base+0x128>
   24710:	add	r3, pc, #952	; 0x3b8
   24714:	ldrd	r2, [r3]
   24718:	ldr	r7, [sp, #64]	; 0x40
   2471c:	ldr	fp, [sp, #68]	; 0x44
   24720:	cmp	r1, r3
   24724:	cmpeq	r0, r2
   24728:	bhi	2474c <_start@@Base+0xef2c>
   2472c:	add	r3, pc, #932	; 0x3a4
   24730:	ldrd	r2, [r3]
   24734:	cmp	r1, r3
   24738:	cmpeq	r0, r2
   2473c:	beq	24860 <_start@@Base+0xf040>
   24740:	mov	r0, r4
   24744:	add	sp, sp, #28
   24748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2474c:	add	r3, pc, #908	; 0x38c
   24750:	ldrd	r2, [r3]
   24754:	cmp	r1, r3
   24758:	cmpeq	r0, r2
   2475c:	beq	248e0 <_start@@Base+0xf0c0>
   24760:	add	r3, pc, #896	; 0x380
   24764:	ldrd	r2, [r3]
   24768:	cmp	r1, r3
   2476c:	cmpeq	r0, r2
   24770:	bne	24740 <_start@@Base+0xef20>
   24774:	mov	r1, r5
   24778:	add	r0, r4, #8
   2477c:	bl	15948 <_start@@Base+0x128>
   24780:	add	r3, pc, #872	; 0x368
   24784:	ldrd	r2, [r3]
   24788:	cmp	r1, r3
   2478c:	cmpeq	r0, r2
   24790:	bne	24740 <_start@@Base+0xef20>
   24794:	mov	r1, r5
   24798:	add	r0, r4, #16
   2479c:	bl	15948 <_start@@Base+0x128>
   247a0:	add	r3, pc, #848	; 0x350
   247a4:	ldrd	r2, [r3]
   247a8:	cmp	r1, r3
   247ac:	cmpeq	r0, r2
   247b0:	bne	24740 <_start@@Base+0xef20>
   247b4:	mov	r1, r5
   247b8:	add	r0, r4, #24
   247bc:	bl	15948 <_start@@Base+0x128>
   247c0:	add	r3, pc, #824	; 0x338
   247c4:	ldrd	r2, [r3]
   247c8:	cmp	r1, r3
   247cc:	cmpeq	r0, r2
   247d0:	bne	24740 <_start@@Base+0xef20>
   247d4:	add	r6, r4, #32
   247d8:	mov	r0, r6
   247dc:	mov	r1, r5
   247e0:	bl	15948 <_start@@Base+0x128>
   247e4:	mov	r0, #0
   247e8:	and	r1, r1, #-16777216	; 0xff000000
   247ec:	cmp	r1, #1694498816	; 0x65000000
   247f0:	cmpeq	r0, #0
   247f4:	bne	24740 <_start@@Base+0xef20>
   247f8:	sub	r6, r5, r6
   247fc:	cmp	r6, #1
   24800:	ble	24740 <_start@@Base+0xef20>
   24804:	ldrb	r3, [r4, #33]	; 0x21
   24808:	cmp	r3, #46	; 0x2e
   2480c:	bne	24740 <_start@@Base+0xef20>
   24810:	add	r9, r4, #34	; 0x22
   24814:	mov	r0, r9
   24818:	mov	r1, r5
   2481c:	bl	15948 <_start@@Base+0x128>
   24820:	mov	r2, #0
   24824:	bic	r3, r1, #255	; 0xff
   24828:	strd	r0, [sp, #8]
   2482c:	add	r1, pc, #724	; 0x2d4
   24830:	ldrd	r0, [r1]
   24834:	cmp	r3, r1
   24838:	cmpeq	r2, r0
   2483c:	beq	24e6c <_start@@Base+0xf64c>
   24840:	add	r3, pc, #712	; 0x2c8
   24844:	ldrd	r2, [r3]
   24848:	ldrd	r0, [sp, #8]
   2484c:	cmp	r1, r3
   24850:	cmpeq	r0, r2
   24854:	beq	24dfc <_start@@Base+0xf5dc>
   24858:	mov	r4, r9
   2485c:	b	24740 <_start@@Base+0xef20>
   24860:	mov	r1, r5
   24864:	add	r0, r4, #8
   24868:	bl	15948 <_start@@Base+0x128>
   2486c:	add	r3, pc, #676	; 0x2a4
   24870:	ldrd	r2, [r3]
   24874:	cmp	r1, r3
   24878:	cmpeq	r0, r2
   2487c:	bne	24740 <_start@@Base+0xef20>
   24880:	add	r6, r4, #16
   24884:	mov	r0, r6
   24888:	mov	r1, r5
   2488c:	bl	15948 <_start@@Base+0x128>
   24890:	mov	r0, #0
   24894:	and	r1, r1, #-16777216	; 0xff000000
   24898:	cmp	r1, #1912602624	; 0x72000000
   2489c:	cmpeq	r0, #0
   248a0:	bne	24740 <_start@@Base+0xef20>
   248a4:	sub	r6, r5, r6
   248a8:	cmp	r6, #1
   248ac:	ble	24740 <_start@@Base+0xef20>
   248b0:	ldrb	r3, [r4, #17]
   248b4:	cmp	r3, #46	; 0x2e
   248b8:	bne	24740 <_start@@Base+0xef20>
   248bc:	str	fp, [sp, #68]	; 0x44
   248c0:	str	r7, [sp, #64]	; 0x40
   248c4:	mov	r3, sl
   248c8:	mov	r2, r5
   248cc:	add	r1, r4, #18
   248d0:	mov	r0, r8
   248d4:	add	sp, sp, #28
   248d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   248dc:	b	16bd8 <_start@@Base+0x13b8>
   248e0:	mov	r1, r5
   248e4:	add	r0, r4, #8
   248e8:	bl	15948 <_start@@Base+0x128>
   248ec:	add	r3, pc, #556	; 0x22c
   248f0:	ldrd	r2, [r3]
   248f4:	cmp	r1, r3
   248f8:	cmpeq	r0, r2
   248fc:	bhi	249ac <_start@@Base+0xf18c>
   24900:	add	r3, pc, #544	; 0x220
   24904:	ldrd	r2, [r3]
   24908:	cmp	r1, r3
   2490c:	cmpeq	r0, r2
   24910:	bls	24a4c <_start@@Base+0xf22c>
   24914:	add	r3, pc, #532	; 0x214
   24918:	ldrd	r2, [r3]
   2491c:	cmp	r1, r3
   24920:	cmpeq	r0, r2
   24924:	beq	24d5c <_start@@Base+0xf53c>
   24928:	add	r3, pc, #520	; 0x208
   2492c:	ldrd	r2, [r3]
   24930:	cmp	r1, r3
   24934:	cmpeq	r0, r2
   24938:	bne	24740 <_start@@Base+0xef20>
   2493c:	add	r6, r4, #16
   24940:	mov	r0, r6
   24944:	mov	r1, r5
   24948:	bl	15948 <_start@@Base+0x128>
   2494c:	ldr	r3, [pc, #532]	; 24b68 <_start@@Base+0xf348>
   24950:	mov	r2, #0
   24954:	and	r3, r3, r1
   24958:	ldr	r1, [pc, #524]	; 24b6c <_start@@Base+0xf34c>
   2495c:	and	r2, r2, r0
   24960:	cmp	r3, r1
   24964:	mov	r0, #0
   24968:	cmpeq	r2, r0
   2496c:	bne	24740 <_start@@Base+0xef20>
   24970:	sub	r6, r5, r6
   24974:	cmp	r6, #2
   24978:	ble	24740 <_start@@Base+0xef20>
   2497c:	ldrb	r3, [r4, #18]
   24980:	cmp	r3, #46	; 0x2e
   24984:	bne	24740 <_start@@Base+0xef20>
   24988:	str	fp, [sp, #68]	; 0x44
   2498c:	str	r7, [sp, #64]	; 0x40
   24990:	mov	r3, sl
   24994:	mov	r2, r5
   24998:	add	r1, r4, #19
   2499c:	mov	r0, r8
   249a0:	add	sp, sp, #28
   249a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   249a8:	b	20728 <_start@@Base+0xaf08>
   249ac:	add	r3, pc, #396	; 0x18c
   249b0:	ldrd	r2, [r3]
   249b4:	cmp	r1, r3
   249b8:	cmpeq	r0, r2
   249bc:	beq	24b74 <_start@@Base+0xf354>
   249c0:	add	r3, pc, #384	; 0x180
   249c4:	ldrd	r2, [r3]
   249c8:	cmp	r1, r3
   249cc:	cmpeq	r0, r2
   249d0:	bhi	24bd8 <_start@@Base+0xf3b8>
   249d4:	add	r3, pc, #372	; 0x174
   249d8:	ldrd	r2, [r3]
   249dc:	cmp	r1, r3
   249e0:	cmpeq	r0, r2
   249e4:	bne	24740 <_start@@Base+0xef20>
   249e8:	add	r6, r4, #16
   249ec:	mov	r0, r6
   249f0:	mov	r1, r5
   249f4:	bl	15948 <_start@@Base+0x128>
   249f8:	add	r3, pc, #344	; 0x158
   249fc:	ldrd	r2, [r3]
   24a00:	bic	r0, r0, #255	; 0xff
   24a04:	cmp	r1, r3
   24a08:	cmpeq	r0, r2
   24a0c:	bne	24740 <_start@@Base+0xef20>
   24a10:	sub	r6, r5, r6
   24a14:	cmp	r6, #7
   24a18:	ble	24740 <_start@@Base+0xef20>
   24a1c:	ldrb	r3, [r4, #23]
   24a20:	cmp	r3, #46	; 0x2e
   24a24:	bne	24740 <_start@@Base+0xef20>
   24a28:	str	fp, [sp, #68]	; 0x44
   24a2c:	str	r7, [sp, #64]	; 0x40
   24a30:	mov	r3, sl
   24a34:	mov	r2, r5
   24a38:	add	r1, r4, #24
   24a3c:	mov	r0, r8
   24a40:	add	sp, sp, #28
   24a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a48:	b	172a4 <_start@@Base+0x1a84>
   24a4c:	add	r3, pc, #268	; 0x10c
   24a50:	ldrd	r2, [r3]
   24a54:	cmp	r1, r3
   24a58:	cmpeq	r0, r2
   24a5c:	bne	24740 <_start@@Base+0xef20>
   24a60:	add	r6, r4, #16
   24a64:	mov	r0, r6
   24a68:	mov	r1, r5
   24a6c:	bl	15948 <_start@@Base+0x128>
   24a70:	ldr	r3, [pc, #240]	; 24b68 <_start@@Base+0xf348>
   24a74:	mov	r2, #0
   24a78:	and	r3, r3, r1
   24a7c:	ldr	r1, [pc, #236]	; 24b70 <_start@@Base+0xf350>
   24a80:	and	r2, r2, r0
   24a84:	cmp	r3, r1
   24a88:	mov	r0, #0
   24a8c:	cmpeq	r2, r0
   24a90:	bne	24740 <_start@@Base+0xef20>
   24a94:	sub	r6, r5, r6
   24a98:	cmp	r6, #2
   24a9c:	ble	24740 <_start@@Base+0xef20>
   24aa0:	ldrb	r3, [r4, #18]
   24aa4:	cmp	r3, #46	; 0x2e
   24aa8:	bne	24740 <_start@@Base+0xef20>
   24aac:	str	fp, [sp, #68]	; 0x44
   24ab0:	str	r7, [sp, #64]	; 0x40
   24ab4:	mov	r3, sl
   24ab8:	mov	r2, r5
   24abc:	add	r1, r4, #19
   24ac0:	mov	r0, r8
   24ac4:	add	sp, sp, #28
   24ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24acc:	b	16ed4 <_start@@Base+0x16b4>
   24ad0:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   24ad4:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   24ad8:	cmnvs	r3, lr, lsr #18
   24adc:			; <UNDEFINED> instruction: 0x46616e74
   24ae0:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   24ae4:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   24ae8:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   24aec:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   24af0:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   24af4:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   24af8:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   24afc:	cmnpl	r0, #-1073741800	; 0xc0000018
   24b00:	cmnvs	ip, #100, 10	; 0x19000000
   24b04:	svcvs	0x006d496e
   24b08:	andeq	r0, r0, r0
   24b0c:	strbtmi	r6, [pc], -r0, lsl #30
   24b10:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   24b14:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   24b18:	cmnvs	r3, r5, ror #8
   24b1c:	cmnmi	r8, #-2147483620	; 0x8000001c
   24b20:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   24b24:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24b28:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   24b2c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24b30:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   24b34:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24b38:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   24b3c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24b40:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   24b44:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24b48:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   24b4c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24b50:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   24b54:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24b58:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   24b5c:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   24b60:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   24b64:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24b68:			; <UNDEFINED> instruction: 0xffff0000
   24b6c:	svcvs	0x006f0000
   24b70:	cdpvs	0, 7, cr0, cr9, cr0, {0}
   24b74:	add	r6, r4, #16
   24b78:	mov	r0, r6
   24b7c:	mov	r1, r5
   24b80:	bl	15948 <_start@@Base+0x128>
   24b84:	add	r3, pc, #940	; 0x3ac
   24b88:	ldrd	r2, [r3]
   24b8c:	bic	r0, r0, #255	; 0xff
   24b90:	cmp	r1, r3
   24b94:	cmpeq	r0, r2
   24b98:	bne	24740 <_start@@Base+0xef20>
   24b9c:	sub	r6, r5, r6
   24ba0:	cmp	r6, #7
   24ba4:	ble	24740 <_start@@Base+0xef20>
   24ba8:	ldrb	r3, [r4, #23]
   24bac:	cmp	r3, #46	; 0x2e
   24bb0:	bne	24740 <_start@@Base+0xef20>
   24bb4:	str	fp, [sp, #68]	; 0x44
   24bb8:	str	r7, [sp, #64]	; 0x40
   24bbc:	mov	r3, sl
   24bc0:	mov	r2, r5
   24bc4:	add	r1, r4, #24
   24bc8:	mov	r0, r8
   24bcc:	add	sp, sp, #28
   24bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24bd4:	b	17110 <_start@@Base+0x18f0>
   24bd8:	add	r3, pc, #864	; 0x360
   24bdc:	ldrd	r2, [r3]
   24be0:	cmp	r1, r3
   24be4:	cmpeq	r0, r2
   24be8:	bne	24740 <_start@@Base+0xef20>
   24bec:	add	r9, r4, #16
   24bf0:	mov	r0, r9
   24bf4:	mov	r1, r5
   24bf8:	bl	15948 <_start@@Base+0x128>
   24bfc:	mov	r3, r1
   24c00:	bic	r2, r0, #255	; 0xff
   24c04:	strd	r0, [sp, #8]
   24c08:	add	r1, pc, #824	; 0x338
   24c0c:	ldrd	r0, [r1]
   24c10:	cmp	r3, r1
   24c14:	cmpeq	r2, r0
   24c18:	beq	24dc0 <_start@@Base+0xf5a0>
   24c1c:	add	r3, pc, #812	; 0x32c
   24c20:	ldrd	r2, [r3]
   24c24:	ldrd	r0, [sp, #8]
   24c28:	cmp	r1, r3
   24c2c:	cmpeq	r0, r2
   24c30:	bne	24740 <_start@@Base+0xef20>
   24c34:	add	r6, r4, #24
   24c38:	mov	r0, r6
   24c3c:	mov	r1, r5
   24c40:	bl	15948 <_start@@Base+0x128>
   24c44:	add	r3, pc, #780	; 0x30c
   24c48:	ldrd	r2, [r3]
   24c4c:	mov	r0, #0
   24c50:	bic	r1, r1, #255	; 0xff
   24c54:	cmp	r1, r3
   24c58:	cmpeq	r0, r2
   24c5c:	bne	24740 <_start@@Base+0xef20>
   24c60:	sub	r6, r5, r6
   24c64:	cmp	r6, #3
   24c68:	ble	24740 <_start@@Base+0xef20>
   24c6c:	ldrb	r3, [r4, #27]
   24c70:	cmp	r3, #46	; 0x2e
   24c74:	bne	24740 <_start@@Base+0xef20>
   24c78:	add	r6, r4, #28
   24c7c:	sub	r3, r5, r6
   24c80:	cmp	r3, #8
   24c84:	bls	24ea8 <_start@@Base+0xf688>
   24c88:	ldrb	r2, [r4, #35]	; 0x23
   24c8c:	mov	r3, #0
   24c90:	strd	r2, [sp, #8]
   24c94:	ldrb	r0, [r4, #34]	; 0x22
   24c98:	lsr	r3, r0, #24
   24c9c:	lsl	r2, r0, #8
   24ca0:	ldrd	r0, [sp, #8]
   24ca4:	orr	r0, r0, r2
   24ca8:	orr	r1, r1, r3
   24cac:	strd	r0, [sp, #8]
   24cb0:	ldrb	r0, [r4, #33]	; 0x21
   24cb4:	lsr	r3, r0, #16
   24cb8:	lsl	r2, r0, #16
   24cbc:	ldrd	r0, [sp, #8]
   24cc0:	orr	r0, r0, r2
   24cc4:	orr	r1, r1, r3
   24cc8:	strd	r0, [sp, #8]
   24ccc:	ldrb	r0, [r4, #32]
   24cd0:	lsr	r3, r0, #8
   24cd4:	ldrd	r0, [sp, #8]
   24cd8:	orr	r1, r1, r3
   24cdc:	mov	r3, r1
   24ce0:	ldrb	r1, [r4, #31]
   24ce4:	orr	r1, r1, r3
   24ce8:	ldrb	r2, [r4, #30]
   24cec:	mov	r3, #0
   24cf0:	strd	r2, [sp, #8]
   24cf4:	ldr	ip, [sp, #8]
   24cf8:	lsl	r3, ip, #8
   24cfc:	orr	r3, r3, r1
   24d00:	ldrb	r0, [r4, #29]
   24d04:	mov	r1, #0
   24d08:	strd	r0, [sp, #8]
   24d0c:	ldr	ip, [sp, #8]
   24d10:	lsl	r1, ip, #16
   24d14:	orr	r3, r3, r1
   24d18:	ldrb	r0, [r4, #28]
   24d1c:	mov	r1, #0
   24d20:	mov	r2, #0
   24d24:	strd	r0, [sp, #16]
   24d28:	ldr	r1, [sp, #16]
   24d2c:	lsl	r1, r1, #24
   24d30:	str	r1, [sp, #12]
   24d34:	mov	r1, #0
   24d38:	str	r1, [sp, #8]
   24d3c:	ldrd	r0, [sp, #8]
   24d40:	orr	r1, r1, r3
   24d44:	and	r3, r1, #-16777216	; 0xff000000
   24d48:	cmp	r3, #2013265920	; 0x78000000
   24d4c:	cmpeq	r2, #0
   24d50:	beq	24ed8 <_start@@Base+0xf6b8>
   24d54:	mov	r4, r6
   24d58:	b	24740 <_start@@Base+0xef20>
   24d5c:	add	r6, r4, #16
   24d60:	mov	r0, r6
   24d64:	mov	r1, r5
   24d68:	bl	15948 <_start@@Base+0x128>
   24d6c:	add	r3, pc, #492	; 0x1ec
   24d70:	ldrd	r2, [r3]
   24d74:	mov	r0, #0
   24d78:	cmp	r1, r3
   24d7c:	cmpeq	r0, r2
   24d80:	bne	24740 <_start@@Base+0xef20>
   24d84:	sub	r6, r5, r6
   24d88:	cmp	r6, #4
   24d8c:	ble	24740 <_start@@Base+0xef20>
   24d90:	ldrb	r3, [r4, #20]
   24d94:	cmp	r3, #46	; 0x2e
   24d98:	bne	24740 <_start@@Base+0xef20>
   24d9c:	str	fp, [sp, #68]	; 0x44
   24da0:	str	r7, [sp, #64]	; 0x40
   24da4:	mov	r3, sl
   24da8:	mov	r2, r5
   24dac:	add	r1, r4, #21
   24db0:	mov	r0, r8
   24db4:	add	sp, sp, #28
   24db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24dbc:	b	17600 <_start@@Base+0x1de0>
   24dc0:	sub	r9, r5, r9
   24dc4:	cmp	r9, #7
   24dc8:	ble	24740 <_start@@Base+0xef20>
   24dcc:	ldrb	r3, [r4, #23]
   24dd0:	cmp	r3, #46	; 0x2e
   24dd4:	bne	24740 <_start@@Base+0xef20>
   24dd8:	str	fp, [sp, #68]	; 0x44
   24ddc:	str	r7, [sp, #64]	; 0x40
   24de0:	mov	r3, sl
   24de4:	mov	r2, r5
   24de8:	add	r1, r4, #24
   24dec:	mov	r0, r8
   24df0:	add	sp, sp, #28
   24df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24df8:	b	1749c <_start@@Base+0x1c7c>
   24dfc:	add	r6, r4, #42	; 0x2a
   24e00:	mov	r0, r6
   24e04:	mov	r1, r5
   24e08:	bl	15948 <_start@@Base+0x128>
   24e0c:	ldr	r3, [pc, #340]	; 24f68 <_start@@Base+0xf748>
   24e10:	mov	r2, #0
   24e14:	and	r3, r3, r1
   24e18:	ldr	r1, [pc, #332]	; 24f6c <_start@@Base+0xf74c>
   24e1c:	and	r2, r2, r0
   24e20:	cmp	r3, r1
   24e24:	mov	r0, #0
   24e28:	cmpeq	r2, r0
   24e2c:	bne	24858 <_start@@Base+0xf038>
   24e30:	str	fp, [sp]
   24e34:	mov	r2, r5
   24e38:	mov	r0, r8
   24e3c:	mov	r3, #2
   24e40:	mov	r1, r6
   24e44:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   24e48:	cmp	r6, r0
   24e4c:	mov	r4, r0
   24e50:	beq	24858 <_start@@Base+0xf038>
   24e54:	mov	r0, #0
   24e58:	mov	r1, #0
   24e5c:	mov	r3, #0
   24e60:	strd	r0, [r7]
   24e64:	str	r3, [sl]
   24e68:	b	24740 <_start@@Base+0xef20>
   24e6c:	str	fp, [sp]
   24e70:	mov	r2, r5
   24e74:	mov	r0, r8
   24e78:	mov	r3, #3
   24e7c:	mov	r1, r9
   24e80:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   24e84:	cmp	r9, r0
   24e88:	mov	r4, r0
   24e8c:	beq	24740 <_start@@Base+0xef20>
   24e90:	mov	r0, #17
   24e94:	mov	r1, #0
   24e98:	mov	r3, #0
   24e9c:	strd	r0, [r7]
   24ea0:	str	r3, [sl]
   24ea4:	b	24740 <_start@@Base+0xef20>
   24ea8:	sub	r3, r3, #1
   24eac:	cmp	r3, #7
   24eb0:	addls	pc, pc, r3, lsl #2
   24eb4:	b	24d54 <_start@@Base+0xf534>
   24eb8:	b	24f98 <_start@@Base+0xf778>
   24ebc:	b	24f90 <_start@@Base+0xf770>
   24ec0:	b	24f88 <_start@@Base+0xf768>
   24ec4:	b	24f80 <_start@@Base+0xf760>
   24ec8:	b	24f70 <_start@@Base+0xf750>
   24ecc:	b	24f24 <_start@@Base+0xf704>
   24ed0:	b	24f14 <_start@@Base+0xf6f4>
   24ed4:	b	24c88 <_start@@Base+0xf468>
   24ed8:	str	fp, [sp]
   24edc:	mov	r2, r5
   24ee0:	mov	r0, r8
   24ee4:	mov	r3, #1
   24ee8:	mov	r1, r6
   24eec:	bl	2e010 <flatcc_json_parser_match_constant@@Base>
   24ef0:	cmp	r6, r0
   24ef4:	mov	r4, r0
   24ef8:	beq	24740 <_start@@Base+0xef20>
   24efc:	mov	r3, #0
   24f00:	mov	r2, #0
   24f04:	strd	r2, [r7]
   24f08:	ldr	r3, [sp, #8]
   24f0c:	str	r3, [sl]
   24f10:	b	24740 <_start@@Base+0xef20>
   24f14:	mov	r2, #0
   24f18:	mov	r3, #0
   24f1c:	strd	r2, [sp, #8]
   24f20:	b	24c94 <_start@@Base+0xf474>
   24f24:	mov	r2, #0
   24f28:	mov	r3, #0
   24f2c:	strd	r2, [sp, #8]
   24f30:	b	24cb0 <_start@@Base+0xf490>
   24f34:	nop			; (mov r0, r0)
   24f38:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   24f3c:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   24f40:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   24f44:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24f48:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   24f4c:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   24f50:	rsbsvc	r7, r4, r5, ror #18
   24f54:	svcvs	0x0074656d
   24f58:	andeq	r0, r0, r0
   24f5c:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   24f60:	andeq	r0, r0, r0
   24f64:	svcvs	0x006c6f72
   24f68:			; <UNDEFINED> instruction: 0xffff0000
   24f6c:	cmnvs	ip, r0
   24f70:	mov	r2, #0
   24f74:	mov	r3, #0
   24f78:	strd	r2, [sp, #8]
   24f7c:	b	24ccc <_start@@Base+0xf4ac>
   24f80:	mov	r3, #0
   24f84:	b	24ce0 <_start@@Base+0xf4c0>
   24f88:	mov	r1, #0
   24f8c:	b	24ce8 <_start@@Base+0xf4c8>
   24f90:	mov	r3, #0
   24f94:	b	24d00 <_start@@Base+0xf4e0>
   24f98:	mov	r3, #0
   24f9c:	b	24d18 <_start@@Base+0xf4f8>

00024fa0 <test_json@@Base>:
   24fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24fa4:	sub	sp, sp, #388	; 0x184
   24fa8:	add	ip, sp, #152	; 0x98
   24fac:	ldr	r4, [sp, #428]	; 0x1ac
   24fb0:	mov	r6, r0
   24fb4:	add	r0, sp, #104	; 0x68
   24fb8:	mov	r7, r0
   24fbc:	str	r0, [sp, #28]
   24fc0:	mov	r0, ip
   24fc4:	mov	r8, r2
   24fc8:	mov	r9, r3
   24fcc:	str	ip, [sp, #20]
   24fd0:	mov	r5, r1
   24fd4:	ldr	sl, [sp, #424]	; 0x1a8
   24fd8:	bl	26840 <flatcc_builder_init@@Base>
   24fdc:	mov	r0, r7
   24fe0:	mov	r1, #0
   24fe4:	bl	3d458 <flatcc_json_printer_init_dynamic_buffer@@Base>
   24fe8:	lsr	r3, r4, #3
   24fec:	tst	r4, #16
   24ff0:	and	r3, r3, #1
   24ff4:	lsr	r1, r4, #1
   24ff8:	and	r1, r1, #1
   24ffc:	lsr	r2, r4, #2
   25000:	strb	r3, [sp, #133]	; 0x85
   25004:	ldr	r7, [pc, #1096]	; 25454 <test_json@@Base+0x4b4>
   25008:	movne	r3, #2
   2500c:	and	r2, r2, #1
   25010:	strb	r1, [sp, #131]	; 0x83
   25014:	strbne	r3, [sp, #129]	; 0x81
   25018:	and	r1, r4, #1
   2501c:	tst	r4, #32
   25020:	add	r7, pc, r7
   25024:	strb	r2, [sp, #132]	; 0x84
   25028:	strb	r1, [sp, #130]	; 0x82
   2502c:	beq	25048 <test_json@@Base+0xa8>
   25030:	mov	r3, #2
   25034:	mov	r2, #1
   25038:	strb	r3, [sp, #129]	; 0x81
   2503c:	mov	r3, #0
   25040:	strb	r2, [sp, #130]	; 0x82
   25044:	strb	r3, [sp, #131]	; 0x83
   25048:	mov	r0, r5
   2504c:	bl	14598 <strlen@plt>
   25050:	ldr	r2, [r6, #4]
   25054:	ldr	r3, [r6]
   25058:	add	r1, sp, #60	; 0x3c
   2505c:	str	r2, [sp, #8]
   25060:	str	r3, [sp, #4]
   25064:	str	sl, [sp]
   25068:	mov	r2, r5
   2506c:	mov	r3, r0
   25070:	ldr	r0, [sp, #20]
   25074:	bl	301ec <flatcc_json_parser_table_as_root@@Base>
   25078:	cmp	r0, r9
   2507c:	beq	251a8 <test_json@@Base+0x208>
   25080:	cmp	r9, #0
   25084:	beq	251c0 <test_json@@Base+0x220>
   25088:	cmp	r0, #0
   2508c:	ldr	r3, [pc, #964]	; 25458 <test_json@@Base+0x4b8>
   25090:	bne	2514c <test_json@@Base+0x1ac>
   25094:	ldr	r4, [r7, r3]
   25098:	mov	r0, r9
   2509c:	ldr	r6, [r4]
   250a0:	bl	2cffc <flatcc_json_parser_error_string@@Base>
   250a4:	ldr	r1, [pc, #944]	; 2545c <test_json@@Base+0x4bc>
   250a8:	ldr	r2, [sp, #432]	; 0x1b0
   250ac:	add	r1, pc, r1
   250b0:	mov	r3, r0
   250b4:	mov	r0, r6
   250b8:	bl	145a4 <fprintf@plt>
   250bc:	ldr	r1, [pc, #924]	; 25460 <test_json@@Base+0x4c0>
   250c0:	mov	r2, r5
   250c4:	ldr	r0, [r4]
   250c8:	add	r1, pc, r1
   250cc:	bl	145a4 <fprintf@plt>
   250d0:	ldr	r3, [sp, #80]	; 0x50
   250d4:	cmp	r3, #1
   250d8:	movgt	r5, #0
   250dc:	movgt	r6, #32
   250e0:	ble	25104 <test_json@@Base+0x164>
   250e4:	ldr	r1, [r4]
   250e8:	mov	r0, r6
   250ec:	bl	145ec <fputc@plt>
   250f0:	ldr	r3, [sp, #80]	; 0x50
   250f4:	add	r5, r5, #1
   250f8:	sub	r3, r3, #1
   250fc:	cmp	r3, r5
   25100:	bgt	250e4 <test_json@@Base+0x144>
   25104:	ldr	r0, [pc, #856]	; 25464 <test_json@@Base+0x4c4>
   25108:	ldr	r3, [r4]
   2510c:	mov	r2, #2
   25110:	mov	r1, #1
   25114:	add	r0, pc, r0
   25118:	mvn	r4, #0
   2511c:	bl	14568 <fwrite@plt>
   25120:	mov	r3, #0
   25124:	str	r3, [sp, #24]
   25128:	ldr	r0, [sp, #24]
   2512c:	bl	2a3dc <flatcc_builder_aligned_free@@Base>
   25130:	ldr	r0, [sp, #20]
   25134:	bl	269c8 <flatcc_builder_clear@@Base>
   25138:	ldr	r0, [sp, #28]
   2513c:	bl	3d550 <flatcc_json_printer_clear@@Base>
   25140:	mov	r0, r4
   25144:	add	sp, sp, #388	; 0x184
   25148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2514c:	ldr	r4, [r7, r3]
   25150:	ldr	r6, [r4]
   25154:	bl	2cffc <flatcc_json_parser_error_string@@Base>
   25158:	ldr	r1, [pc, #776]	; 25468 <test_json@@Base+0x4c8>
   2515c:	ldr	r2, [sp, #432]	; 0x1b0
   25160:	add	r1, pc, r1
   25164:	mov	r3, r0
   25168:	mov	r0, r6
   2516c:	bl	145a4 <fprintf@plt>
   25170:	mov	r0, r9
   25174:	ldr	r6, [r4]
   25178:	bl	2cffc <flatcc_json_parser_error_string@@Base>
   2517c:	ldr	r1, [pc, #744]	; 2546c <test_json@@Base+0x4cc>
   25180:	add	r1, pc, r1
   25184:	mov	r2, r0
   25188:	mov	r0, r6
   2518c:	bl	145a4 <fprintf@plt>
   25190:	ldr	r1, [pc, #728]	; 25470 <test_json@@Base+0x4d0>
   25194:	mov	r2, r5
   25198:	ldr	r0, [r4]
   2519c:	add	r1, pc, r1
   251a0:	bl	145a4 <fprintf@plt>
   251a4:	b	250d0 <test_json@@Base+0x130>
   251a8:	cmp	r9, #0
   251ac:	beq	25200 <test_json@@Base+0x260>
   251b0:	mov	r3, #0
   251b4:	str	r3, [sp, #24]
   251b8:	mov	r4, r3
   251bc:	b	25128 <test_json@@Base+0x188>
   251c0:	ldr	r3, [pc, #656]	; 25458 <test_json@@Base+0x4b8>
   251c4:	ldr	r4, [r7, r3]
   251c8:	ldr	r6, [r4]
   251cc:	bl	2cffc <flatcc_json_parser_error_string@@Base>
   251d0:	ldr	r1, [pc, #668]	; 25474 <test_json@@Base+0x4d4>
   251d4:	ldr	r2, [sp, #432]	; 0x1b0
   251d8:	add	r1, pc, r1
   251dc:	mov	r3, r0
   251e0:	mov	r0, r6
   251e4:	bl	145a4 <fprintf@plt>
   251e8:	ldr	r1, [pc, #648]	; 25478 <test_json@@Base+0x4d8>
   251ec:	mov	r2, r5
   251f0:	ldr	r0, [r4]
   251f4:	add	r1, pc, r1
   251f8:	bl	145a4 <fprintf@plt>
   251fc:	b	250d0 <test_json@@Base+0x130>
   25200:	add	r1, sp, #32
   25204:	ldr	r0, [sp, #20]
   25208:	bl	2a2d4 <flatcc_builder_finalize_aligned_buffer@@Base>
   2520c:	ldr	r3, [r6, #12]
   25210:	ldr	r2, [r6]
   25214:	ldr	r1, [sp, #32]
   25218:	str	r0, [sp, #24]
   2521c:	bl	2b7a8 <flatcc_verify_table_as_root@@Base>
   25220:	cmp	r0, #0
   25224:	beq	253ac <test_json@@Base+0x40c>
   25228:	ldr	r3, [pc, #552]	; 25458 <test_json@@Base+0x4b8>
   2522c:	ldr	r4, [r7, r3]
   25230:	ldr	r5, [r4]
   25234:	bl	2aa1c <flatcc_verify_error_string@@Base>
   25238:	ldr	r2, [pc, #572]	; 2547c <test_json@@Base+0x4dc>
   2523c:	ldr	r1, [pc, #572]	; 25480 <test_json@@Base+0x4e0>
   25240:	ldr	r3, [sp, #432]	; 0x1b0
   25244:	add	r2, pc, r2
   25248:	add	r1, pc, r1
   2524c:	str	r0, [sp]
   25250:	mov	r0, r5
   25254:	bl	145a4 <fprintf@plt>
   25258:	ldr	r3, [sp, #24]
   2525c:	cmp	r3, #0
   25260:	beq	25368 <test_json@@Base+0x3c8>
   25264:	ldr	r5, [r4]
   25268:	ldr	r2, [pc, #532]	; 25484 <test_json@@Base+0x4e4>
   2526c:	ldr	r1, [pc, #532]	; 25488 <test_json@@Base+0x4e8>
   25270:	ldr	r9, [sp, #32]
   25274:	mov	r0, r5
   25278:	add	r2, pc, r2
   2527c:	add	r1, pc, r1
   25280:	bl	145a4 <fprintf@plt>
   25284:	cmp	r9, #0
   25288:	beq	25350 <test_json@@Base+0x3b0>
   2528c:	ldr	r3, [pc, #504]	; 2548c <test_json@@Base+0x4ec>
   25290:	ldr	fp, [pc, #504]	; 25490 <test_json@@Base+0x4f0>
   25294:	add	r3, pc, r3
   25298:	str	r3, [sp, #16]
   2529c:	ldr	sl, [pc, #496]	; 25494 <test_json@@Base+0x4f4>
   252a0:	ldr	r3, [sp, #24]
   252a4:	mov	r4, #0
   252a8:	add	fp, pc, fp
   252ac:	add	sl, pc, sl
   252b0:	sub	r6, r3, #1
   252b4:	add	r8, sp, #40	; 0x28
   252b8:	b	25324 <test_json@@Base+0x384>
   252bc:	cmp	r4, #0
   252c0:	beq	252c8 <test_json@@Base+0x328>
   252c4:	bl	145a4 <fprintf@plt>
   252c8:	mov	r2, r4
   252cc:	ldr	r1, [sp, #16]
   252d0:	mov	r0, r5
   252d4:	bl	145a4 <fprintf@plt>
   252d8:	ldrb	r2, [r6, #1]
   252dc:	mov	r1, sl
   252e0:	mov	r0, r5
   252e4:	bl	145a4 <fprintf@plt>
   252e8:	ldrb	r1, [r6, #1]!
   252ec:	add	r3, sp, #384	; 0x180
   252f0:	add	r2, r3, r7
   252f4:	sub	r0, r1, #32
   252f8:	cmp	r0, #94	; 0x5e
   252fc:	addls	r3, sp, #384	; 0x180
   25300:	addls	r2, r3, r7
   25304:	movhi	r3, #46	; 0x2e
   25308:	add	r4, r4, #1
   2530c:	strbhi	r3, [r2, #-344]	; 0xfffffea8
   25310:	strbls	r1, [r2, #-344]	; 0xfffffea8
   25314:	mov	r3, #0
   25318:	cmp	r9, r4
   2531c:	strb	r3, [r2, #-343]	; 0xfffffea9
   25320:	beq	25370 <test_json@@Base+0x3d0>
   25324:	ands	r7, r4, #15
   25328:	mov	r2, r8
   2532c:	mov	r1, fp
   25330:	mov	r0, r5
   25334:	beq	252bc <test_json@@Base+0x31c>
   25338:	tst	r4, #7
   2533c:	bne	252d8 <test_json@@Base+0x338>
   25340:	mov	r1, r5
   25344:	mov	r0, #32
   25348:	bl	145ec <fputc@plt>
   2534c:	b	252d8 <test_json@@Base+0x338>
   25350:	add	r8, sp, #40	; 0x28
   25354:	ldr	r1, [pc, #316]	; 25498 <test_json@@Base+0x4f8>
   25358:	mov	r2, r8
   2535c:	mov	r0, r5
   25360:	add	r1, pc, r1
   25364:	bl	145a4 <fprintf@plt>
   25368:	mvn	r4, #0
   2536c:	b	25128 <test_json@@Base+0x188>
   25370:	tst	r4, #15
   25374:	beq	25354 <test_json@@Base+0x3b4>
   25378:	ldr	r9, [pc, #284]	; 2549c <test_json@@Base+0x4fc>
   2537c:	mov	r7, #3
   25380:	add	r9, pc, r9
   25384:	mov	r6, #1
   25388:	add	r4, r4, #1
   2538c:	mov	r3, r5
   25390:	mov	r2, r7
   25394:	mov	r1, r6
   25398:	mov	r0, r9
   2539c:	bl	14568 <fwrite@plt>
   253a0:	tst	r4, #15
   253a4:	bne	25388 <test_json@@Base+0x3e8>
   253a8:	b	25354 <test_json@@Base+0x3b4>
   253ac:	ldr	r1, [r6, #8]
   253b0:	ldr	r4, [sp, #28]
   253b4:	ldr	r3, [r6]
   253b8:	ldr	r2, [sp, #32]
   253bc:	str	r1, [sp]
   253c0:	mov	r0, r4
   253c4:	ldr	r1, [sp, #24]
   253c8:	bl	3cf04 <flatcc_json_printer_table_as_root@@Base>
   253cc:	add	r1, sp, #36	; 0x24
   253d0:	mov	r0, r4
   253d4:	bl	3d4f8 <flatcc_json_printer_get_buffer@@Base>
   253d8:	subs	r6, r0, #0
   253dc:	beq	253f4 <test_json@@Base+0x454>
   253e0:	mov	r1, r6
   253e4:	mov	r0, r8
   253e8:	bl	14520 <strcmp@plt>
   253ec:	subs	r4, r0, #0
   253f0:	beq	25128 <test_json@@Base+0x188>
   253f4:	ldr	r3, [pc, #92]	; 25458 <test_json@@Base+0x4b8>
   253f8:	ldr	r5, [pc, #160]	; 254a0 <test_json@@Base+0x500>
   253fc:	ldr	r1, [pc, #160]	; 254a4 <test_json@@Base+0x504>
   25400:	ldr	r4, [r7, r3]
   25404:	add	r5, pc, r5
   25408:	ldr	r2, [sp, #432]	; 0x1b0
   2540c:	add	r1, pc, r1
   25410:	ldr	r0, [r4]
   25414:	bl	145a4 <fprintf@plt>
   25418:	mov	r2, r6
   2541c:	mov	r1, r5
   25420:	ldr	r0, [r4]
   25424:	bl	145a4 <fprintf@plt>
   25428:	ldr	r0, [pc, #120]	; 254a8 <test_json@@Base+0x508>
   2542c:	ldr	r3, [r4]
   25430:	mov	r2, #10
   25434:	mov	r1, #1
   25438:	add	r0, pc, r0
   2543c:	bl	14568 <fwrite@plt>
   25440:	mov	r2, r8
   25444:	mov	r1, r5
   25448:	ldr	r0, [r4]
   2544c:	bl	145a4 <fprintf@plt>
   25450:	b	25258 <test_json@@Base+0x2b8>
   25454:	ldrdeq	pc, [r2], -r8
   25458:	andeq	r0, r0, r8, rrx
   2545c:	andeq	r9, r1, ip, asr r3
   25460:	andeq	r9, r1, ip, ror r3
   25464:	andeq	r9, r1, r8, asr r3
   25468:	andeq	r9, r1, r0, ror #4
   2546c:	andeq	r9, r1, r8, ror #4
   25470:	andeq	r9, r1, r8, lsr #5
   25474:	andeq	r9, r1, r0, ror r2
   25478:	andeq	r9, r1, r0, asr r2
   2547c:	andeq	r9, r1, ip, lsr #4
   25480:	andeq	r9, r1, ip, lsl #5
   25484:	andeq	r9, r1, r8, asr #5
   25488:	ldrdeq	r9, [r1], -r4
   2548c:	andeq	r9, r1, ip, asr #5
   25490:			; <UNDEFINED> instruction: 0x000192b0
   25494:			; <UNDEFINED> instruction: 0x000192bc
   25498:	strdeq	r9, [r1], -r8
   2549c:	strdeq	r9, [r1], -r0
   254a0:	andeq	r9, r1, r0, asr #32
   254a4:	strdeq	r9, [r1], -r0
   254a8:	strdeq	r9, [r1], -ip

000254ac <edge_case_tests@@Base>:
   254ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   254b0:	sub	sp, sp, #36	; 0x24
   254b4:	ldr	r6, [pc, #836]	; 25800 <edge_case_tests@@Base+0x354>
   254b8:	ldr	r2, [pc, #836]	; 25804 <edge_case_tests@@Base+0x358>
   254bc:	ldr	r1, [pc, #836]	; 25808 <edge_case_tests@@Base+0x35c>
   254c0:	mov	r5, #0
   254c4:	add	r6, pc, r6
   254c8:	mov	r3, #155	; 0x9b
   254cc:	str	r3, [sp, #8]
   254d0:	mov	r0, r6
   254d4:	mov	r3, r5
   254d8:	str	r5, [sp, #4]
   254dc:	str	r5, [sp]
   254e0:	add	r2, pc, r2
   254e4:	add	r1, pc, r1
   254e8:	bl	24fa0 <test_json@@Base>
   254ec:	ldr	r7, [pc, #792]	; 2580c <edge_case_tests@@Base+0x360>
   254f0:	ldr	r9, [pc, #792]	; 25810 <edge_case_tests@@Base+0x364>
   254f4:	mov	r8, #2
   254f8:	mov	ip, #168	; 0xa8
   254fc:	add	r7, pc, r7
   25500:	add	r9, pc, r9
   25504:	str	ip, [sp, #8]
   25508:	mov	r3, r5
   2550c:	mov	r2, r7
   25510:	mov	r1, r9
   25514:	str	r8, [sp]
   25518:	str	r5, [sp, #4]
   2551c:	str	r7, [sp, #20]
   25520:	ldr	sl, [pc, #748]	; 25814 <edge_case_tests@@Base+0x368>
   25524:	mov	r7, #1
   25528:	add	sl, pc, sl
   2552c:	ldr	fp, [pc, #740]	; 25818 <edge_case_tests@@Base+0x36c>
   25530:	add	fp, pc, fp
   25534:	mov	r4, r0
   25538:	mov	r0, r6
   2553c:	bl	24fa0 <test_json@@Base>
   25540:	mov	r1, #172	; 0xac
   25544:	str	r1, [sp, #8]
   25548:	ldr	r2, [pc, #716]	; 2581c <edge_case_tests@@Base+0x370>
   2554c:	ldr	r1, [pc, #716]	; 25820 <edge_case_tests@@Base+0x374>
   25550:	add	r2, pc, r2
   25554:	stm	sp, {r5, r8}
   25558:	mov	r3, r5
   2555c:	add	r1, pc, r1
   25560:	str	r2, [sp, #24]
   25564:	orr	r4, r4, r0
   25568:	mov	r0, r6
   2556c:	bl	24fa0 <test_json@@Base>
   25570:	ldr	lr, [pc, #684]	; 25824 <edge_case_tests@@Base+0x378>
   25574:	mov	ip, #176	; 0xb0
   25578:	add	lr, pc, lr
   2557c:	str	ip, [sp, #8]
   25580:	mov	ip, #4
   25584:	mov	r2, lr
   25588:	str	ip, [sp, #4]
   2558c:	str	r8, [sp]
   25590:	mov	r1, r9
   25594:	mov	r3, r5
   25598:	str	lr, [sp, #28]
   2559c:	ldr	r9, [pc, #644]	; 25828 <edge_case_tests@@Base+0x37c>
   255a0:	add	r9, pc, r9
   255a4:	orr	r4, r4, r0
   255a8:	mov	r0, r6
   255ac:	bl	24fa0 <test_json@@Base>
   255b0:	mov	r2, #180	; 0xb4
   255b4:	mov	r1, #8
   255b8:	str	r2, [sp, #8]
   255bc:	str	r1, [sp, #4]
   255c0:	ldr	r2, [pc, #612]	; 2582c <edge_case_tests@@Base+0x380>
   255c4:	ldr	r1, [pc, #612]	; 25830 <edge_case_tests@@Base+0x384>
   255c8:	mov	r3, r5
   255cc:	str	r5, [sp]
   255d0:	add	r2, pc, r2
   255d4:	add	r1, pc, r1
   255d8:	orr	r4, r4, r0
   255dc:	mov	r0, r6
   255e0:	bl	24fa0 <test_json@@Base>
   255e4:	mov	r1, #195	; 0xc3
   255e8:	str	r1, [sp, #8]
   255ec:	ldr	r1, [pc, #576]	; 25834 <edge_case_tests@@Base+0x388>
   255f0:	str	r8, [sp]
   255f4:	mov	r3, r5
   255f8:	ldr	r2, [sp, #20]
   255fc:	str	r5, [sp, #4]
   25600:	add	r1, pc, r1
   25604:	orr	r4, r4, r0
   25608:	mov	r0, r6
   2560c:	bl	24fa0 <test_json@@Base>
   25610:	mov	ip, #199	; 0xc7
   25614:	mov	r3, r5
   25618:	mov	r2, r9
   2561c:	mov	r1, sl
   25620:	str	ip, [sp, #8]
   25624:	str	r5, [sp, #4]
   25628:	str	r7, [sp]
   2562c:	orr	r4, r4, r0
   25630:	mov	r0, r6
   25634:	bl	24fa0 <test_json@@Base>
   25638:	mov	r1, sl
   2563c:	ldr	sl, [pc, #500]	; 25838 <edge_case_tests@@Base+0x38c>
   25640:	mov	ip, #203	; 0xcb
   25644:	add	sl, pc, sl
   25648:	str	ip, [sp, #8]
   2564c:	mov	r3, r5
   25650:	mov	r2, sl
   25654:	str	r7, [sp, #4]
   25658:	str	r7, [sp]
   2565c:	orr	r4, r4, r0
   25660:	mov	r0, r6
   25664:	bl	24fa0 <test_json@@Base>
   25668:	mov	r1, #209	; 0xd1
   2566c:	str	r1, [sp, #8]
   25670:	ldr	r1, [pc, #452]	; 2583c <edge_case_tests@@Base+0x390>
   25674:	mov	r3, r5
   25678:	mov	r2, r9
   2567c:	str	r5, [sp, #4]
   25680:	str	r7, [sp]
   25684:	add	r1, pc, r1
   25688:	orr	r4, r4, r0
   2568c:	mov	r0, r6
   25690:	bl	24fa0 <test_json@@Base>
   25694:	mov	ip, #217	; 0xd9
   25698:	str	ip, [sp, #8]
   2569c:	str	r8, [sp]
   256a0:	mov	r3, r5
   256a4:	ldr	r2, [sp, #20]
   256a8:	mov	r1, fp
   256ac:	str	r5, [sp, #4]
   256b0:	orr	r4, r4, r0
   256b4:	mov	r0, r6
   256b8:	bl	24fa0 <test_json@@Base>
   256bc:	mov	r1, #221	; 0xdd
   256c0:	str	r1, [sp, #8]
   256c4:	ldr	r1, [pc, #372]	; 25840 <edge_case_tests@@Base+0x394>
   256c8:	stm	sp, {r5, r8}
   256cc:	ldr	r2, [sp, #24]
   256d0:	mov	r3, r5
   256d4:	add	r1, pc, r1
   256d8:	orr	r4, r4, r0
   256dc:	mov	r0, r6
   256e0:	bl	24fa0 <test_json@@Base>
   256e4:	mov	ip, #225	; 0xe1
   256e8:	mov	r3, #4
   256ec:	str	ip, [sp, #8]
   256f0:	str	r3, [sp, #4]
   256f4:	str	r8, [sp]
   256f8:	ldr	r2, [sp, #28]
   256fc:	mov	r1, fp
   25700:	mov	r3, r5
   25704:	orr	r4, r4, r0
   25708:	mov	r0, r6
   2570c:	bl	24fa0 <test_json@@Base>
   25710:	mov	r2, #229	; 0xe5
   25714:	str	r2, [sp, #8]
   25718:	ldr	r1, [pc, #292]	; 25844 <edge_case_tests@@Base+0x398>
   2571c:	ldr	r2, [pc, #292]	; 25848 <edge_case_tests@@Base+0x39c>
   25720:	mov	r3, #8
   25724:	str	r3, [sp, #4]
   25728:	str	r5, [sp]
   2572c:	mov	r3, r5
   25730:	add	r2, pc, r2
   25734:	add	r1, pc, r1
   25738:	orr	r4, r4, r0
   2573c:	mov	r0, r6
   25740:	bl	24fa0 <test_json@@Base>
   25744:	mov	r1, #233	; 0xe9
   25748:	str	r1, [sp, #8]
   2574c:	ldr	r1, [pc, #248]	; 2584c <edge_case_tests@@Base+0x3a0>
   25750:	str	r8, [sp]
   25754:	ldr	r2, [sp, #20]
   25758:	mov	r3, r5
   2575c:	str	r5, [sp, #4]
   25760:	add	r1, pc, r1
   25764:	ldr	r8, [pc, #228]	; 25850 <edge_case_tests@@Base+0x3a4>
   25768:	add	r8, pc, r8
   2576c:	orr	r4, r4, r0
   25770:	mov	r0, r6
   25774:	bl	24fa0 <test_json@@Base>
   25778:	mov	ip, #237	; 0xed
   2577c:	mov	r3, r5
   25780:	mov	r2, r9
   25784:	mov	r1, r8
   25788:	str	ip, [sp, #8]
   2578c:	str	r5, [sp, #4]
   25790:	str	r7, [sp]
   25794:	orr	r4, r4, r0
   25798:	mov	r0, r6
   2579c:	bl	24fa0 <test_json@@Base>
   257a0:	mov	ip, #241	; 0xf1
   257a4:	mov	r2, sl
   257a8:	mov	r1, r8
   257ac:	mov	r3, r5
   257b0:	str	ip, [sp, #8]
   257b4:	str	r7, [sp, #4]
   257b8:	str	r7, [sp]
   257bc:	orr	r4, r4, r0
   257c0:	mov	r0, r6
   257c4:	bl	24fa0 <test_json@@Base>
   257c8:	mov	r1, #247	; 0xf7
   257cc:	str	r1, [sp, #8]
   257d0:	ldr	r1, [pc, #124]	; 25854 <edge_case_tests@@Base+0x3a8>
   257d4:	str	r5, [sp, #4]
   257d8:	str	r7, [sp]
   257dc:	mov	r3, r5
   257e0:	mov	r2, r9
   257e4:	add	r1, pc, r1
   257e8:	orr	r4, r4, r0
   257ec:	mov	r0, r6
   257f0:	bl	24fa0 <test_json@@Base>
   257f4:	orr	r0, r4, r0
   257f8:	add	sp, sp, #36	; 0x24
   257fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25800:	andeq	pc, r2, ip, lsl sl	; <UNPREDICTABLE>
   25804:	muleq	r1, r4, r0
   25808:	strheq	r9, [r1], -r0
   2580c:	andeq	r9, r1, ip, asr #1
   25810:	andeq	r9, r1, ip, ror #1
   25814:	andeq	r9, r1, r0, asr #5
   25818:	andeq	r9, r1, r8, ror r3
   2581c:	andeq	r9, r1, r0, asr #1
   25820:	ldrdeq	r9, [r1], -r4
   25824:	andeq	r9, r1, r0, ror #1
   25828:	andeq	r9, r1, ip, lsr #4
   2582c:	muleq	r1, ip, r0
   25830:	andeq	r9, r1, ip, lsr #3
   25834:	andeq	r9, r1, r4, lsr #3
   25838:	ldrdeq	r9, [r1], -r8
   2583c:			; <UNDEFINED> instruction: 0x000191b0
   25840:	strdeq	r9, [r1], -r4
   25844:	ldrdeq	r9, [r1], -r0
   25848:			; <UNDEFINED> instruction: 0x000191bc
   2584c:			; <UNDEFINED> instruction: 0x000192b8
   25850:	ldrdeq	r9, [r1], -r0
   25854:	andeq	r9, r1, r0, lsl #5

00025858 <error_case_tests@@Base>:
   25858:	push	{r4, r5, r6, lr}
   2585c:	sub	sp, sp, #16
   25860:	ldr	r6, [pc, #804]	; 25b8c <error_case_tests@@Base+0x334>
   25864:	ldr	r3, [pc, #804]	; 25b90 <error_case_tests@@Base+0x338>
   25868:	ldr	r1, [pc, #804]	; 25b94 <error_case_tests@@Base+0x33c>
   2586c:	mov	r4, #0
   25870:	add	r6, pc, r6
   25874:	str	r3, [sp, #8]
   25878:	mov	r2, r4
   2587c:	mov	r0, r6
   25880:	str	r4, [sp, #4]
   25884:	str	r4, [sp]
   25888:	mov	r3, #13
   2588c:	add	r1, pc, r1
   25890:	bl	24fa0 <test_json@@Base>
   25894:	ldr	r3, [pc, #764]	; 25b98 <error_case_tests@@Base+0x340>
   25898:	ldr	r1, [pc, #764]	; 25b9c <error_case_tests@@Base+0x344>
   2589c:	mov	r2, r4
   258a0:	str	r3, [sp, #8]
   258a4:	str	r4, [sp, #4]
   258a8:	str	r4, [sp]
   258ac:	mov	r3, #13
   258b0:	add	r1, pc, r1
   258b4:	mov	r5, r0
   258b8:	mov	r0, r6
   258bc:	bl	24fa0 <test_json@@Base>
   258c0:	ldr	r3, [pc, #728]	; 25ba0 <error_case_tests@@Base+0x348>
   258c4:	ldr	r1, [pc, #728]	; 25ba4 <error_case_tests@@Base+0x34c>
   258c8:	mov	r2, r4
   258cc:	str	r3, [sp, #8]
   258d0:	str	r4, [sp, #4]
   258d4:	str	r4, [sp]
   258d8:	mov	r3, #13
   258dc:	add	r1, pc, r1
   258e0:	orr	r5, r5, r0
   258e4:	mov	r0, r6
   258e8:	bl	24fa0 <test_json@@Base>
   258ec:	ldr	r3, [pc, #692]	; 25ba8 <error_case_tests@@Base+0x350>
   258f0:	ldr	r1, [pc, #692]	; 25bac <error_case_tests@@Base+0x354>
   258f4:	mov	r2, r4
   258f8:	str	r3, [sp, #8]
   258fc:	str	r4, [sp, #4]
   25900:	str	r4, [sp]
   25904:	mov	r3, #13
   25908:	add	r1, pc, r1
   2590c:	orr	r5, r5, r0
   25910:	mov	r0, r6
   25914:	bl	24fa0 <test_json@@Base>
   25918:	ldr	r3, [pc, #656]	; 25bb0 <error_case_tests@@Base+0x358>
   2591c:	ldr	r1, [pc, #656]	; 25bb4 <error_case_tests@@Base+0x35c>
   25920:	mov	r2, r4
   25924:	str	r3, [sp, #8]
   25928:	str	r4, [sp, #4]
   2592c:	str	r4, [sp]
   25930:	mov	r3, #13
   25934:	add	r1, pc, r1
   25938:	orr	r5, r5, r0
   2593c:	mov	r0, r6
   25940:	bl	24fa0 <test_json@@Base>
   25944:	ldr	r1, [pc, #620]	; 25bb8 <error_case_tests@@Base+0x360>
   25948:	mov	r3, #296	; 0x128
   2594c:	mov	r2, r4
   25950:	str	r3, [sp, #8]
   25954:	str	r4, [sp, #4]
   25958:	str	r4, [sp]
   2595c:	mov	r3, #13
   25960:	add	r1, pc, r1
   25964:	orr	r5, r5, r0
   25968:	mov	r0, r6
   2596c:	bl	24fa0 <test_json@@Base>
   25970:	ldr	r3, [pc, #580]	; 25bbc <error_case_tests@@Base+0x364>
   25974:	ldr	r1, [pc, #580]	; 25bc0 <error_case_tests@@Base+0x368>
   25978:	mov	r2, r4
   2597c:	str	r3, [sp, #8]
   25980:	str	r4, [sp, #4]
   25984:	str	r4, [sp]
   25988:	mov	r3, #13
   2598c:	add	r1, pc, r1
   25990:	orr	r5, r5, r0
   25994:	mov	r0, r6
   25998:	bl	24fa0 <test_json@@Base>
   2599c:	ldr	r3, [pc, #544]	; 25bc4 <error_case_tests@@Base+0x36c>
   259a0:	ldr	r1, [pc, #544]	; 25bc8 <error_case_tests@@Base+0x370>
   259a4:	mov	r2, r4
   259a8:	str	r3, [sp, #8]
   259ac:	str	r4, [sp, #4]
   259b0:	str	r4, [sp]
   259b4:	mov	r3, #13
   259b8:	add	r1, pc, r1
   259bc:	orr	r5, r5, r0
   259c0:	mov	r0, r6
   259c4:	bl	24fa0 <test_json@@Base>
   259c8:	ldr	r3, [pc, #508]	; 25bcc <error_case_tests@@Base+0x374>
   259cc:	ldr	r1, [pc, #508]	; 25bd0 <error_case_tests@@Base+0x378>
   259d0:	mov	r2, r4
   259d4:	str	r3, [sp, #8]
   259d8:	str	r4, [sp, #4]
   259dc:	str	r4, [sp]
   259e0:	mov	r3, #13
   259e4:	add	r1, pc, r1
   259e8:	orr	r5, r5, r0
   259ec:	mov	r0, r6
   259f0:	bl	24fa0 <test_json@@Base>
   259f4:	ldr	r3, [pc, #472]	; 25bd4 <error_case_tests@@Base+0x37c>
   259f8:	ldr	r1, [pc, #472]	; 25bd8 <error_case_tests@@Base+0x380>
   259fc:	mov	r2, r4
   25a00:	str	r3, [sp, #8]
   25a04:	str	r4, [sp, #4]
   25a08:	str	r4, [sp]
   25a0c:	mov	r3, #13
   25a10:	add	r1, pc, r1
   25a14:	orr	r5, r5, r0
   25a18:	mov	r0, r6
   25a1c:	bl	24fa0 <test_json@@Base>
   25a20:	ldr	r1, [pc, #436]	; 25bdc <error_case_tests@@Base+0x384>
   25a24:	mov	r3, #324	; 0x144
   25a28:	mov	r2, r4
   25a2c:	str	r3, [sp, #8]
   25a30:	str	r4, [sp, #4]
   25a34:	str	r4, [sp]
   25a38:	mov	r3, #13
   25a3c:	add	r1, pc, r1
   25a40:	orr	r5, r5, r0
   25a44:	mov	r0, r6
   25a48:	bl	24fa0 <test_json@@Base>
   25a4c:	ldr	r3, [pc, #396]	; 25be0 <error_case_tests@@Base+0x388>
   25a50:	ldr	r1, [pc, #396]	; 25be4 <error_case_tests@@Base+0x38c>
   25a54:	mov	r2, r4
   25a58:	str	r3, [sp, #8]
   25a5c:	str	r4, [sp, #4]
   25a60:	str	r4, [sp]
   25a64:	mov	r3, #13
   25a68:	add	r1, pc, r1
   25a6c:	orr	r5, r5, r0
   25a70:	mov	r0, r6
   25a74:	bl	24fa0 <test_json@@Base>
   25a78:	ldr	r1, [pc, #360]	; 25be8 <error_case_tests@@Base+0x390>
   25a7c:	mov	r3, #328	; 0x148
   25a80:	mov	r2, r4
   25a84:	str	r3, [sp, #8]
   25a88:	str	r4, [sp, #4]
   25a8c:	str	r4, [sp]
   25a90:	mov	r3, #13
   25a94:	add	r1, pc, r1
   25a98:	orr	r5, r5, r0
   25a9c:	mov	r0, r6
   25aa0:	bl	24fa0 <test_json@@Base>
   25aa4:	ldr	r3, [pc, #320]	; 25bec <error_case_tests@@Base+0x394>
   25aa8:	ldr	r1, [pc, #320]	; 25bf0 <error_case_tests@@Base+0x398>
   25aac:	mov	r2, r4
   25ab0:	str	r3, [sp, #8]
   25ab4:	str	r4, [sp, #4]
   25ab8:	str	r4, [sp]
   25abc:	mov	r3, #13
   25ac0:	add	r1, pc, r1
   25ac4:	orr	r5, r5, r0
   25ac8:	mov	r0, r6
   25acc:	bl	24fa0 <test_json@@Base>
   25ad0:	ldr	r3, [pc, #284]	; 25bf4 <error_case_tests@@Base+0x39c>
   25ad4:	ldr	r1, [pc, #284]	; 25bf8 <error_case_tests@@Base+0x3a0>
   25ad8:	mov	r2, r4
   25adc:	str	r3, [sp, #8]
   25ae0:	str	r4, [sp, #4]
   25ae4:	str	r4, [sp]
   25ae8:	mov	r3, #13
   25aec:	add	r1, pc, r1
   25af0:	orr	r5, r5, r0
   25af4:	mov	r0, r6
   25af8:	bl	24fa0 <test_json@@Base>
   25afc:	ldr	r1, [pc, #248]	; 25bfc <error_case_tests@@Base+0x3a4>
   25b00:	mov	r3, #336	; 0x150
   25b04:	mov	r2, r4
   25b08:	str	r3, [sp, #8]
   25b0c:	str	r4, [sp, #4]
   25b10:	str	r4, [sp]
   25b14:	mov	r3, #13
   25b18:	add	r1, pc, r1
   25b1c:	orr	r5, r5, r0
   25b20:	mov	r0, r6
   25b24:	bl	24fa0 <test_json@@Base>
   25b28:	ldr	r1, [pc, #208]	; 25c00 <error_case_tests@@Base+0x3a8>
   25b2c:	mov	r3, #340	; 0x154
   25b30:	mov	r2, r4
   25b34:	str	r3, [sp, #8]
   25b38:	str	r4, [sp, #4]
   25b3c:	str	r4, [sp]
   25b40:	mov	r3, #13
   25b44:	add	r1, pc, r1
   25b48:	orr	r5, r5, r0
   25b4c:	mov	r0, r6
   25b50:	bl	24fa0 <test_json@@Base>
   25b54:	ldr	r1, [pc, #168]	; 25c04 <error_case_tests@@Base+0x3ac>
   25b58:	mov	r3, #344	; 0x158
   25b5c:	str	r3, [sp, #8]
   25b60:	str	r4, [sp, #4]
   25b64:	str	r4, [sp]
   25b68:	mov	r2, r4
   25b6c:	mov	r3, #13
   25b70:	add	r1, pc, r1
   25b74:	orr	r5, r5, r0
   25b78:	mov	r0, r6
   25b7c:	bl	24fa0 <test_json@@Base>
   25b80:	orr	r0, r5, r0
   25b84:	add	sp, sp, #16
   25b88:	pop	{r4, r5, r6, pc}
   25b8c:	andeq	pc, r2, r0, ror r6	; <UNPREDICTABLE>
   25b90:	andeq	r0, r0, sp, lsl r1
   25b94:	andeq	r9, r1, r8, lsr r2
   25b98:	andeq	r0, r0, pc, lsl r1
   25b9c:	andeq	r9, r1, r0, lsr r2
   25ba0:	andeq	r0, r0, r1, lsr #2
   25ba4:	andeq	r9, r1, r8, ror #4
   25ba8:	andeq	r0, r0, r3, lsr #2
   25bac:	muleq	r1, ip, r2
   25bb0:	andeq	r0, r0, r5, lsr #2
   25bb4:	andeq	r9, r1, r8, asr #5
   25bb8:	strdeq	r9, [r1], -r4
   25bbc:	andeq	r0, r0, fp, lsr #2
   25bc0:	andeq	r9, r1, r8, ror #6
   25bc4:	andeq	r0, r0, pc, lsr #2
   25bc8:	ldrdeq	r9, [r1], -r8
   25bcc:	andeq	r0, r0, r3, lsr r1
   25bd0:	andeq	r9, r1, r4, ror r4
   25bd4:	andeq	r0, r0, r2, asr #2
   25bd8:	andeq	r9, r1, r0, lsl r5
   25bdc:	strdeq	r9, [r1], -ip
   25be0:	andeq	r0, r0, r6, asr #2
   25be4:	andeq	r9, r1, r8, lsr #10
   25be8:	andeq	r9, r1, r0, asr r5
   25bec:	andeq	r0, r0, sl, asr #2
   25bf0:	andeq	r9, r1, r4, ror r5
   25bf4:	andeq	r0, r0, sp, asr #2
   25bf8:	muleq	r1, r8, r5
   25bfc:	strdeq	r9, [r1], -r8
   25c00:	andeq	r9, r1, r8, asr r6
   25c04:	ldrdeq	r9, [r1], -ip

00025c08 <base64_tests@@Base>:
   25c08:	push	{r4, r5, r6, r7, r8, r9, lr}
   25c0c:	sub	sp, sp, #20
   25c10:	ldr	r6, [pc, #484]	; 25dfc <base64_tests@@Base+0x1f4>
   25c14:	ldr	r3, [pc, #484]	; 25e00 <base64_tests@@Base+0x1f8>
   25c18:	ldr	r2, [pc, #484]	; 25e04 <base64_tests@@Base+0x1fc>
   25c1c:	ldr	r1, [pc, #484]	; 25e08 <base64_tests@@Base+0x200>
   25c20:	mov	r4, #0
   25c24:	add	r6, pc, r6
   25c28:	str	r3, [sp, #8]
   25c2c:	mov	r0, r6
   25c30:	mov	r3, r4
   25c34:	str	r4, [sp, #4]
   25c38:	str	r4, [sp]
   25c3c:	add	r2, pc, r2
   25c40:	add	r1, pc, r1
   25c44:	bl	24fa0 <test_json@@Base>
   25c48:	mov	r2, #372	; 0x174
   25c4c:	str	r2, [sp, #8]
   25c50:	ldr	r1, [pc, #436]	; 25e0c <base64_tests@@Base+0x204>
   25c54:	ldr	r2, [pc, #436]	; 25e10 <base64_tests@@Base+0x208>
   25c58:	mov	r3, r4
   25c5c:	str	r4, [sp, #4]
   25c60:	str	r4, [sp]
   25c64:	add	r2, pc, r2
   25c68:	add	r1, pc, r1
   25c6c:	ldr	r9, [pc, #416]	; 25e14 <base64_tests@@Base+0x20c>
   25c70:	ldr	r8, [pc, #416]	; 25e18 <base64_tests@@Base+0x210>
   25c74:	add	r9, pc, r9
   25c78:	add	r8, pc, r8
   25c7c:	ldr	r7, [pc, #408]	; 25e1c <base64_tests@@Base+0x214>
   25c80:	add	r7, pc, r7
   25c84:	mov	r5, r0
   25c88:	mov	r0, r6
   25c8c:	bl	24fa0 <test_json@@Base>
   25c90:	mov	r1, #376	; 0x178
   25c94:	str	r1, [sp, #8]
   25c98:	ldr	r1, [pc, #384]	; 25e20 <base64_tests@@Base+0x218>
   25c9c:	mov	r3, r4
   25ca0:	mov	r2, r9
   25ca4:	str	r4, [sp, #4]
   25ca8:	str	r4, [sp]
   25cac:	add	r1, pc, r1
   25cb0:	orr	r5, r5, r0
   25cb4:	mov	r0, r6
   25cb8:	bl	24fa0 <test_json@@Base>
   25cbc:	ldr	r1, [pc, #352]	; 25e24 <base64_tests@@Base+0x21c>
   25cc0:	mov	r3, r4
   25cc4:	str	r1, [sp, #8]
   25cc8:	ldr	r1, [pc, #344]	; 25e28 <base64_tests@@Base+0x220>
   25ccc:	mov	r2, r8
   25cd0:	str	r4, [sp, #4]
   25cd4:	str	r4, [sp]
   25cd8:	add	r1, pc, r1
   25cdc:	orr	r5, r5, r0
   25ce0:	mov	r0, r6
   25ce4:	bl	24fa0 <test_json@@Base>
   25ce8:	ldr	r1, [pc, #316]	; 25e2c <base64_tests@@Base+0x224>
   25cec:	mov	r2, r9
   25cf0:	str	r1, [sp, #8]
   25cf4:	ldr	r1, [pc, #308]	; 25e30 <base64_tests@@Base+0x228>
   25cf8:	mov	r3, r4
   25cfc:	str	r4, [sp, #4]
   25d00:	str	r4, [sp]
   25d04:	add	r1, pc, r1
   25d08:	orr	r5, r5, r0
   25d0c:	mov	r0, r6
   25d10:	bl	24fa0 <test_json@@Base>
   25d14:	ldr	r1, [pc, #280]	; 25e34 <base64_tests@@Base+0x22c>
   25d18:	mov	r2, r8
   25d1c:	str	r1, [sp, #8]
   25d20:	ldr	r1, [pc, #272]	; 25e38 <base64_tests@@Base+0x230>
   25d24:	mov	r3, r4
   25d28:	str	r4, [sp, #4]
   25d2c:	str	r4, [sp]
   25d30:	add	r1, pc, r1
   25d34:	orr	r5, r5, r0
   25d38:	mov	r0, r6
   25d3c:	bl	24fa0 <test_json@@Base>
   25d40:	ldr	r1, [pc, #244]	; 25e3c <base64_tests@@Base+0x234>
   25d44:	mov	r3, #388	; 0x184
   25d48:	mov	r2, r4
   25d4c:	str	r3, [sp, #8]
   25d50:	str	r4, [sp, #4]
   25d54:	str	r4, [sp]
   25d58:	mov	r3, #31
   25d5c:	add	r1, pc, r1
   25d60:	orr	r5, r5, r0
   25d64:	mov	r0, r6
   25d68:	bl	24fa0 <test_json@@Base>
   25d6c:	ldr	r3, [pc, #204]	; 25e40 <base64_tests@@Base+0x238>
   25d70:	ldr	r1, [pc, #204]	; 25e44 <base64_tests@@Base+0x23c>
   25d74:	mov	r2, r4
   25d78:	str	r3, [sp, #8]
   25d7c:	str	r4, [sp, #4]
   25d80:	str	r4, [sp]
   25d84:	mov	r3, #32
   25d88:	add	r1, pc, r1
   25d8c:	orr	r5, r5, r0
   25d90:	mov	r0, r6
   25d94:	bl	24fa0 <test_json@@Base>
   25d98:	ldr	r1, [pc, #168]	; 25e48 <base64_tests@@Base+0x240>
   25d9c:	mov	r3, r4
   25da0:	str	r1, [sp, #8]
   25da4:	ldr	r1, [pc, #160]	; 25e4c <base64_tests@@Base+0x244>
   25da8:	mov	r2, r7
   25dac:	str	r4, [sp, #4]
   25db0:	str	r4, [sp]
   25db4:	add	r1, pc, r1
   25db8:	orr	r5, r5, r0
   25dbc:	mov	r0, r6
   25dc0:	bl	24fa0 <test_json@@Base>
   25dc4:	ldr	r1, [pc, #132]	; 25e50 <base64_tests@@Base+0x248>
   25dc8:	str	r4, [sp, #4]
   25dcc:	str	r1, [sp, #8]
   25dd0:	ldr	r1, [pc, #124]	; 25e54 <base64_tests@@Base+0x24c>
   25dd4:	str	r4, [sp]
   25dd8:	mov	r3, r4
   25ddc:	mov	r2, r7
   25de0:	add	r1, pc, r1
   25de4:	orr	r5, r5, r0
   25de8:	mov	r0, r6
   25dec:	bl	24fa0 <test_json@@Base>
   25df0:	orr	r0, r5, r0
   25df4:	add	sp, sp, #20
   25df8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   25dfc:			; <UNDEFINED> instruction: 0x0002f2bc
   25e00:	andeq	r0, r0, r1, ror r1
   25e04:	andeq	r8, r1, ip, lsl sl
   25e08:			; <UNDEFINED> instruction: 0x000196bc
   25e0c:	ldrdeq	r9, [r1], -r0
   25e10:			; <UNDEFINED> instruction: 0x000196b0
   25e14:	andeq	r9, r1, ip, ror #13
   25e18:	andeq	r9, r1, r8, asr r8
   25e1c:			; <UNDEFINED> instruction: 0x00019cb0
   25e20:	andeq	r9, r1, r8, ror #14
   25e24:	andeq	r0, r0, fp, ror r1
   25e28:			; <UNDEFINED> instruction: 0x000198b0
   25e2c:	andeq	r0, r0, lr, ror r1
   25e30:	andeq	r9, r1, r0, asr #18
   25e34:	andeq	r0, r0, r1, lsl #3
   25e38:	andeq	r9, r1, ip, asr #19
   25e3c:	andeq	r9, r1, ip, asr sl
   25e40:	andeq	r0, r0, r7, lsl #3
   25e44:	andeq	r9, r1, ip, ror #21
   25e48:	muleq	r0, r6, r1
   25e4c:	andeq	r9, r1, r4, asr ip
   25e50:	andeq	r0, r0, r3, lsr #3
   25e54:	strdeq	r9, [r1], -r8

00025e58 <mixed_type_union_tests@@Base>:
   25e58:	push	{r4, r5, r6, r7, lr}
   25e5c:	sub	sp, sp, #20
   25e60:	ldr	r6, [pc, #348]	; 25fc4 <mixed_type_union_tests@@Base+0x16c>
   25e64:	ldr	r2, [pc, #348]	; 25fc8 <mixed_type_union_tests@@Base+0x170>
   25e68:	add	r6, pc, r6
   25e6c:	ldr	r1, [pc, #344]	; 25fcc <mixed_type_union_tests@@Base+0x174>
   25e70:	mov	r4, #0
   25e74:	add	r6, r6, #16
   25e78:	mov	r3, #432	; 0x1b0
   25e7c:	str	r3, [sp, #8]
   25e80:	mov	r0, r6
   25e84:	mov	r3, r4
   25e88:	str	r4, [sp, #4]
   25e8c:	str	r4, [sp]
   25e90:	add	r2, pc, r2
   25e94:	add	r1, pc, r1
   25e98:	bl	24fa0 <test_json@@Base>
   25e9c:	ldr	r1, [pc, #300]	; 25fd0 <mixed_type_union_tests@@Base+0x178>
   25ea0:	ldr	r7, [pc, #300]	; 25fd4 <mixed_type_union_tests@@Base+0x17c>
   25ea4:	str	r1, [sp, #8]
   25ea8:	ldr	r1, [pc, #296]	; 25fd8 <mixed_type_union_tests@@Base+0x180>
   25eac:	add	r7, pc, r7
   25eb0:	mov	r3, r4
   25eb4:	mov	r2, r7
   25eb8:	str	r4, [sp, #4]
   25ebc:	str	r4, [sp]
   25ec0:	add	r1, pc, r1
   25ec4:	mov	r5, r0
   25ec8:	mov	r0, r6
   25ecc:	bl	24fa0 <test_json@@Base>
   25ed0:	ldr	r1, [pc, #260]	; 25fdc <mixed_type_union_tests@@Base+0x184>
   25ed4:	mov	r3, r4
   25ed8:	str	r1, [sp, #8]
   25edc:	ldr	r1, [pc, #252]	; 25fe0 <mixed_type_union_tests@@Base+0x188>
   25ee0:	mov	r2, r7
   25ee4:	str	r4, [sp, #4]
   25ee8:	str	r4, [sp]
   25eec:	add	r1, pc, r1
   25ef0:	orr	r5, r5, r0
   25ef4:	mov	r0, r6
   25ef8:	bl	24fa0 <test_json@@Base>
   25efc:	ldr	r2, [pc, #224]	; 25fe4 <mixed_type_union_tests@@Base+0x18c>
   25f00:	ldr	r1, [pc, #224]	; 25fe8 <mixed_type_union_tests@@Base+0x190>
   25f04:	str	r2, [sp, #8]
   25f08:	ldr	r2, [pc, #220]	; 25fec <mixed_type_union_tests@@Base+0x194>
   25f0c:	mov	r3, r4
   25f10:	str	r4, [sp, #4]
   25f14:	str	r4, [sp]
   25f18:	add	r2, pc, r2
   25f1c:	add	r1, pc, r1
   25f20:	orr	r5, r5, r0
   25f24:	mov	r0, r6
   25f28:	bl	24fa0 <test_json@@Base>
   25f2c:	ldr	r2, [pc, #188]	; 25ff0 <mixed_type_union_tests@@Base+0x198>
   25f30:	ldr	r1, [pc, #188]	; 25ff4 <mixed_type_union_tests@@Base+0x19c>
   25f34:	str	r2, [sp, #8]
   25f38:	ldr	r2, [pc, #184]	; 25ff8 <mixed_type_union_tests@@Base+0x1a0>
   25f3c:	mov	r3, r4
   25f40:	str	r4, [sp, #4]
   25f44:	str	r4, [sp]
   25f48:	add	r2, pc, r2
   25f4c:	add	r1, pc, r1
   25f50:	orr	r5, r5, r0
   25f54:	mov	r0, r6
   25f58:	bl	24fa0 <test_json@@Base>
   25f5c:	ldr	r2, [pc, #152]	; 25ffc <mixed_type_union_tests@@Base+0x1a4>
   25f60:	ldr	r1, [pc, #152]	; 26000 <mixed_type_union_tests@@Base+0x1a8>
   25f64:	str	r2, [sp, #8]
   25f68:	ldr	r2, [pc, #148]	; 26004 <mixed_type_union_tests@@Base+0x1ac>
   25f6c:	mov	r3, r4
   25f70:	str	r4, [sp, #4]
   25f74:	str	r4, [sp]
   25f78:	add	r2, pc, r2
   25f7c:	add	r1, pc, r1
   25f80:	orr	r5, r5, r0
   25f84:	mov	r0, r6
   25f88:	bl	24fa0 <test_json@@Base>
   25f8c:	ldr	r1, [pc, #116]	; 26008 <mixed_type_union_tests@@Base+0x1b0>
   25f90:	str	r4, [sp, #4]
   25f94:	str	r1, [sp, #8]
   25f98:	ldr	r1, [pc, #108]	; 2600c <mixed_type_union_tests@@Base+0x1b4>
   25f9c:	str	r4, [sp]
   25fa0:	mov	r3, r4
   25fa4:	mov	r2, r7
   25fa8:	add	r1, pc, r1
   25fac:	orr	r5, r5, r0
   25fb0:	mov	r0, r6
   25fb4:	bl	24fa0 <test_json@@Base>
   25fb8:	orr	r0, r5, r0
   25fbc:	add	sp, sp, #20
   25fc0:	pop	{r4, r5, r6, r7, pc}
   25fc4:	andeq	pc, r2, r8, ror r0	; <UNPREDICTABLE>
   25fc8:	andeq	r9, r1, r4, lsl sp
   25fcc:	andeq	r9, r1, r8, asr sp
   25fd0:			; <UNDEFINED> instruction: 0x000001b5
   25fd4:	muleq	r1, r0, sp
   25fd8:	strdeq	r9, [r1], -r4
   25fdc:			; <UNDEFINED> instruction: 0x000001ba
   25fe0:	andeq	r9, r1, ip, asr #28
   25fe4:	andeq	r0, r0, r1, asr #3
   25fe8:	andeq	r9, r1, r0, ror pc
   25fec:			; <UNDEFINED> instruction: 0x00019eb8
   25ff0:	andeq	r0, r0, sl, asr #3
   25ff4:	andeq	sl, r1, r0, lsl #2
   25ff8:	andeq	sl, r1, r4, lsr #32
   25ffc:	ldrdeq	r0, [r0], -r5
   26000:	andeq	sl, r1, r0, lsr #6
   26004:	ldrdeq	sl, [r1], -ip
   26008:	ldrdeq	r0, [r0], -sl
   2600c:	andeq	sl, r1, r8, ror r4

00026010 <union_vector_tests@@Base>:
   26010:	push	{r4, r5, r6, r7, lr}
   26014:	sub	sp, sp, #20
   26018:	ldr	r5, [pc, #304]	; 26150 <union_vector_tests@@Base+0x140>
   2601c:	ldr	r7, [pc, #304]	; 26154 <union_vector_tests@@Base+0x144>
   26020:	ldr	r3, [pc, #304]	; 26158 <union_vector_tests@@Base+0x148>
   26024:	add	r5, pc, r5
   26028:	ldr	r1, [pc, #300]	; 2615c <union_vector_tests@@Base+0x14c>
   2602c:	mov	r4, #0
   26030:	add	r5, r5, #32
   26034:	add	r7, pc, r7
   26038:	mov	r2, r7
   2603c:	str	r3, [sp, #8]
   26040:	mov	r0, r5
   26044:	mov	r3, r4
   26048:	str	r4, [sp, #4]
   2604c:	str	r4, [sp]
   26050:	add	r1, pc, r1
   26054:	bl	24fa0 <test_json@@Base>
   26058:	mov	r2, #488	; 0x1e8
   2605c:	str	r2, [sp, #8]
   26060:	ldr	r1, [pc, #248]	; 26160 <union_vector_tests@@Base+0x150>
   26064:	ldr	r2, [pc, #248]	; 26164 <union_vector_tests@@Base+0x154>
   26068:	mov	r3, r4
   2606c:	str	r4, [sp, #4]
   26070:	str	r4, [sp]
   26074:	add	r2, pc, r2
   26078:	add	r1, pc, r1
   2607c:	mov	r6, r0
   26080:	mov	r0, r5
   26084:	bl	24fa0 <test_json@@Base>
   26088:	ldr	r2, [pc, #216]	; 26168 <union_vector_tests@@Base+0x158>
   2608c:	ldr	r1, [pc, #216]	; 2616c <union_vector_tests@@Base+0x15c>
   26090:	str	r2, [sp, #8]
   26094:	ldr	r2, [pc, #212]	; 26170 <union_vector_tests@@Base+0x160>
   26098:	mov	r3, r4
   2609c:	str	r4, [sp, #4]
   260a0:	str	r4, [sp]
   260a4:	add	r2, pc, r2
   260a8:	add	r1, pc, r1
   260ac:	orr	r6, r6, r0
   260b0:	mov	r0, r5
   260b4:	bl	24fa0 <test_json@@Base>
   260b8:	ldr	r2, [pc, #180]	; 26174 <union_vector_tests@@Base+0x164>
   260bc:	ldr	r1, [pc, #180]	; 26178 <union_vector_tests@@Base+0x168>
   260c0:	str	r2, [sp, #8]
   260c4:	ldr	r2, [pc, #176]	; 2617c <union_vector_tests@@Base+0x16c>
   260c8:	mov	r3, r4
   260cc:	str	r4, [sp, #4]
   260d0:	str	r4, [sp]
   260d4:	add	r2, pc, r2
   260d8:	add	r1, pc, r1
   260dc:	orr	r6, r6, r0
   260e0:	mov	r0, r5
   260e4:	bl	24fa0 <test_json@@Base>
   260e8:	ldr	r1, [pc, #144]	; 26180 <union_vector_tests@@Base+0x170>
   260ec:	mov	r2, r7
   260f0:	str	r1, [sp, #8]
   260f4:	ldr	r1, [pc, #136]	; 26184 <union_vector_tests@@Base+0x174>
   260f8:	mov	r3, r4
   260fc:	str	r4, [sp, #4]
   26100:	str	r4, [sp]
   26104:	add	r1, pc, r1
   26108:	orr	r6, r6, r0
   2610c:	mov	r0, r5
   26110:	bl	24fa0 <test_json@@Base>
   26114:	mov	r2, #500	; 0x1f4
   26118:	str	r2, [sp, #8]
   2611c:	ldr	r1, [pc, #100]	; 26188 <union_vector_tests@@Base+0x178>
   26120:	ldr	r2, [pc, #100]	; 2618c <union_vector_tests@@Base+0x17c>
   26124:	str	r4, [sp, #4]
   26128:	str	r4, [sp]
   2612c:	mov	r3, r4
   26130:	add	r2, pc, r2
   26134:	add	r1, pc, r1
   26138:	orr	r6, r6, r0
   2613c:	mov	r0, r5
   26140:	bl	24fa0 <test_json@@Base>
   26144:	orr	r0, r6, r0
   26148:	add	sp, sp, #20
   2614c:	pop	{r4, r5, r6, r7, pc}
   26150:			; <UNDEFINED> instruction: 0x0002eebc
   26154:	andeq	sl, r1, ip, ror r4
   26158:	andeq	r0, r0, r5, ror #3
   2615c:	muleq	r1, r8, r4
   26160:	ldrdeq	sl, [r1], -ip
   26164:			; <UNDEFINED> instruction: 0x0001a4b4
   26168:	andeq	r0, r0, fp, ror #3
   2616c:	andeq	sl, r1, r4, lsr #10
   26170:	andeq	sl, r1, r4, ror #9
   26174:	andeq	r0, r0, lr, ror #3
   26178:			; <UNDEFINED> instruction: 0x0001a5b0
   2617c:	andeq	sl, r1, r8, asr #10
   26180:	strdeq	r0, [r0], -r1
   26184:	andeq	sl, r1, r4, lsl #12
   26188:	andeq	sl, r1, r0, ror r6
   2618c:	andeq	sl, r1, r8, lsl r6
   26190:	push	{r4, r5, r6, lr}
   26194:	mov	r4, r0
   26198:	ldr	ip, [r0, #28]
   2619c:	sub	sp, sp, #8
   261a0:	mov	r3, #1
   261a4:	ldr	r0, [r0, #40]	; 0x28
   261a8:	ldr	r6, [r4, #48]	; 0x30
   261ac:	mov	r5, r2
   261b0:	str	r3, [sp]
   261b4:	add	r2, r1, ip
   261b8:	add	r1, r4, #60	; 0x3c
   261bc:	blx	r6
   261c0:	cmp	r0, #0
   261c4:	bne	261fc <union_vector_tests@@Base+0x1ec>
   261c8:	ldr	r1, [r4, #28]
   261cc:	ldr	r3, [r4, #64]	; 0x40
   261d0:	ldr	r2, [r4, #60]	; 0x3c
   261d4:	sub	r3, r3, r1
   261d8:	ldr	ip, [r4, #32]
   261dc:	cmp	r3, r5
   261e0:	movcs	r3, r5
   261e4:	add	r2, r2, r1
   261e8:	str	r3, [r4, #24]
   261ec:	str	r2, [r4, #16]
   261f0:	str	r5, [ip, #4]
   261f4:	add	sp, sp, #8
   261f8:	pop	{r4, r5, r6, pc}
   261fc:	mvn	r0, #0
   26200:	b	261f4 <union_vector_tests@@Base+0x1e4>

00026204 <flatcc_builder_default_alloc@@Base>:
   26204:	push	{r4, r5, r6, r7, r8, lr}
   26208:	subs	r5, r2, #0
   2620c:	mov	r6, r1
   26210:	bne	26234 <flatcc_builder_default_alloc@@Base+0x30>
   26214:	ldr	r0, [r1]
   26218:	cmp	r0, #0
   2621c:	popeq	{r4, r5, r6, r7, r8, pc}
   26220:	bl	14538 <free@plt>
   26224:	str	r5, [r6]
   26228:	str	r5, [r6, #4]
   2622c:	mov	r0, r5
   26230:	pop	{r4, r5, r6, r7, r8, pc}
   26234:	mov	r7, r3
   26238:	ldr	r3, [sp, #24]
   2623c:	sub	r2, r3, #1
   26240:	cmp	r2, #6
   26244:	addls	pc, pc, r2, lsl #2
   26248:	b	262e4 <flatcc_builder_default_alloc@@Base+0xe0>
   2624c:	b	262b8 <flatcc_builder_default_alloc@@Base+0xb4>
   26250:	b	262e4 <flatcc_builder_default_alloc@@Base+0xe0>
   26254:	b	262e4 <flatcc_builder_default_alloc@@Base+0xe0>
   26258:	b	262dc <flatcc_builder_default_alloc@@Base+0xd8>
   2625c:	b	26268 <flatcc_builder_default_alloc@@Base+0x64>
   26260:	b	262e4 <flatcc_builder_default_alloc@@Base+0xe0>
   26264:	b	262d4 <flatcc_builder_default_alloc@@Base+0xd0>
   26268:	mov	r4, r5
   2626c:	ldr	r3, [r6, #4]
   26270:	cmp	r5, r3
   26274:	bhi	26280 <flatcc_builder_default_alloc@@Base+0x7c>
   26278:	cmp	r4, r3, lsr #1
   2627c:	bls	262ec <flatcc_builder_default_alloc@@Base+0xe8>
   26280:	mov	r1, r4
   26284:	ldr	r0, [r6]
   26288:	bl	1455c <realloc@plt>
   2628c:	subs	r5, r0, #0
   26290:	beq	26308 <flatcc_builder_default_alloc@@Base+0x104>
   26294:	cmp	r7, #0
   26298:	beq	262a8 <flatcc_builder_default_alloc@@Base+0xa4>
   2629c:	ldr	r0, [r6, #4]
   262a0:	cmp	r0, r4
   262a4:	bcc	262f4 <flatcc_builder_default_alloc@@Base+0xf0>
   262a8:	str	r5, [r6]
   262ac:	str	r4, [r6, #4]
   262b0:	mov	r0, #0
   262b4:	pop	{r4, r5, r6, r7, r8, pc}
   262b8:	mov	r4, #256	; 0x100
   262bc:	cmp	r5, r4
   262c0:	bls	2626c <flatcc_builder_default_alloc@@Base+0x68>
   262c4:	lsl	r4, r4, #1
   262c8:	cmp	r5, r4
   262cc:	bhi	262c4 <flatcc_builder_default_alloc@@Base+0xc0>
   262d0:	b	2626c <flatcc_builder_default_alloc@@Base+0x68>
   262d4:	mov	r4, #64	; 0x40
   262d8:	b	262bc <flatcc_builder_default_alloc@@Base+0xb8>
   262dc:	mov	r4, #288	; 0x120
   262e0:	b	262bc <flatcc_builder_default_alloc@@Base+0xb8>
   262e4:	mov	r4, #32
   262e8:	b	262bc <flatcc_builder_default_alloc@@Base+0xb8>
   262ec:	mov	r0, #0
   262f0:	pop	{r4, r5, r6, r7, r8, pc}
   262f4:	sub	r2, r4, r0
   262f8:	mov	r1, #0
   262fc:	add	r0, r5, r0
   26300:	bl	145bc <memset@plt>
   26304:	b	262a8 <flatcc_builder_default_alloc@@Base+0xa4>
   26308:	mvn	r0, #0
   2630c:	pop	{r4, r5, r6, r7, r8, pc}
   26310:	push	{r4, r5, lr}
   26314:	cmp	r2, #0
   26318:	ldr	lr, [pc, #248]	; 26418 <flatcc_builder_default_alloc@@Base+0x214>
   2631c:	sub	sp, sp, #84	; 0x54
   26320:	mov	ip, r0
   26324:	add	lr, pc, lr
   26328:	bne	26338 <flatcc_builder_default_alloc@@Base+0x134>
   2632c:	ldrh	r2, [r0, #132]	; 0x84
   26330:	cmp	r2, #0
   26334:	moveq	r2, #1
   26338:	ldrh	r0, [r1]
   2633c:	cmp	r0, #3
   26340:	movls	r4, #4
   26344:	movls	r0, r4
   26348:	strhls	r4, [r1]
   2634c:	cmp	r2, r0
   26350:	strhhi	r2, [r1]
   26354:	cmp	r3, #0
   26358:	bne	2636c <flatcc_builder_default_alloc@@Base+0x168>
   2635c:	ldr	r4, [ip, #140]	; 0x8c
   26360:	sub	r2, r2, #1
   26364:	ands	r3, r2, r4
   26368:	bne	26378 <flatcc_builder_default_alloc@@Base+0x174>
   2636c:	mov	r0, #0
   26370:	add	sp, sp, #84	; 0x54
   26374:	pop	{r4, r5, pc}
   26378:	ldr	r2, [pc, #156]	; 2641c <flatcc_builder_default_alloc@@Base+0x218>
   2637c:	add	r1, r4, r3
   26380:	str	r3, [sp, #8]
   26384:	ldr	r0, [lr, r2]
   26388:	cmp	r4, r1
   2638c:	mov	r2, #1
   26390:	str	r0, [sp, #16]
   26394:	str	r3, [sp, #20]
   26398:	str	r1, [ip, #140]	; 0x8c
   2639c:	str	r2, [sp, #12]
   263a0:	bgt	263f0 <flatcc_builder_default_alloc@@Base+0x1ec>
   263a4:	ldr	r0, [ip, #36]	; 0x24
   263a8:	add	r1, sp, #16
   263ac:	str	r3, [sp]
   263b0:	mov	r3, r4
   263b4:	ldr	r5, [ip, #44]	; 0x2c
   263b8:	blx	r5
   263bc:	cmp	r0, #0
   263c0:	bne	263f4 <flatcc_builder_default_alloc@@Base+0x1f0>
   263c4:	cmn	r4, #1
   263c8:	bne	2636c <flatcc_builder_default_alloc@@Base+0x168>
   263cc:	ldr	r3, [pc, #76]	; 26420 <flatcc_builder_default_alloc@@Base+0x21c>
   263d0:	ldr	r1, [pc, #76]	; 26424 <flatcc_builder_default_alloc@@Base+0x220>
   263d4:	ldr	r0, [pc, #76]	; 26428 <flatcc_builder_default_alloc@@Base+0x224>
   263d8:	add	r3, pc, r3
   263dc:	ldr	r2, [pc, #72]	; 2642c <flatcc_builder_default_alloc@@Base+0x228>
   263e0:	add	r3, r3, #60	; 0x3c
   263e4:	add	r1, pc, r1
   263e8:	add	r0, pc, r0
   263ec:	bl	14610 <__assert_fail@plt>
   263f0:	bl	147d8 <__assert_fail@plt+0x1c8>
   263f4:	ldr	r3, [pc, #52]	; 26430 <flatcc_builder_default_alloc@@Base+0x22c>
   263f8:	ldr	r1, [pc, #52]	; 26434 <flatcc_builder_default_alloc@@Base+0x230>
   263fc:	ldr	r0, [pc, #52]	; 26438 <flatcc_builder_default_alloc@@Base+0x234>
   26400:	add	r3, pc, r3
   26404:	ldr	r2, [pc, #48]	; 2643c <flatcc_builder_default_alloc@@Base+0x238>
   26408:	add	r3, r3, #16
   2640c:	add	r1, pc, r1
   26410:	add	r0, pc, r0
   26414:	bl	14610 <__assert_fail@plt>
   26418:	ldrdeq	lr, [r2], -r4
   2641c:	andeq	r0, r0, r4, rrx
   26420:	andeq	fp, r1, ip, asr r9
   26424:	andeq	ip, r1, r0, lsr #1
   26428:	andeq	ip, r1, r4, lsr #2
   2642c:			; <UNDEFINED> instruction: 0x000002be
   26430:	andeq	fp, r1, r4, lsr r9
   26434:	andeq	ip, r1, r8, ror r0
   26438:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   2643c:	andeq	r0, r0, r5, lsr #5
   26440:	push	{r4, r5, r6, r7, lr}
   26444:	mov	r5, r1
   26448:	ldr	r1, [r0, #156]	; 0x9c
   2644c:	ldr	r3, [r0, #160]	; 0xa0
   26450:	add	r2, r1, #1
   26454:	cmp	r2, r3
   26458:	sub	sp, sp, #12
   2645c:	mov	r4, r0
   26460:	str	r2, [r0, #156]	; 0x9c
   26464:	ble	264d4 <flatcc_builder_default_alloc@@Base+0x2d0>
   26468:	ldr	r3, [r0, #176]	; 0xb0
   2646c:	cmp	r3, #0
   26470:	cmpgt	r2, r3
   26474:	movgt	r3, #1
   26478:	movle	r3, #0
   2647c:	bgt	26548 <flatcc_builder_default_alloc@@Base+0x344>
   26480:	add	r1, r1, r1, lsl #3
   26484:	ldr	r0, [r0, #88]	; 0x58
   26488:	lsl	r6, r1, #2
   2648c:	add	r2, r6, #36	; 0x24
   26490:	cmp	r2, r0
   26494:	bhi	26524 <flatcc_builder_default_alloc@@Base+0x320>
   26498:	ldr	r3, [r4, #84]	; 0x54
   2649c:	add	r3, r3, r6
   264a0:	cmp	r3, #0
   264a4:	str	r3, [r4, #32]
   264a8:	beq	26548 <flatcc_builder_default_alloc@@Base+0x344>
   264ac:	ldr	r2, [r4, #88]	; 0x58
   264b0:	ldr	r0, [pc, #152]	; 26550 <flatcc_builder_default_alloc@@Base+0x34c>
   264b4:	ldr	r1, [r4, #176]	; 0xb0
   264b8:	umull	r0, r2, r0, r2
   264bc:	lsr	r2, r2, #3
   264c0:	cmp	r1, #0
   264c4:	cmpgt	r2, r1
   264c8:	str	r2, [r4, #160]	; 0xa0
   264cc:	strgt	r1, [r4, #160]	; 0xa0
   264d0:	b	264e0 <flatcc_builder_default_alloc@@Base+0x2dc>
   264d4:	ldr	r3, [r0, #32]
   264d8:	add	r3, r3, #36	; 0x24
   264dc:	str	r3, [r0, #32]
   264e0:	ldr	r0, [r4, #20]
   264e4:	ldr	ip, [r4, #28]
   264e8:	ldrh	lr, [r4, #130]	; 0x82
   264ec:	add	r2, r0, ip
   264f0:	mov	r1, #0
   264f4:	str	r0, [r3, #8]
   264f8:	strh	lr, [r3, #12]
   264fc:	add	r2, r2, #7
   26500:	mvn	lr, #3
   26504:	mov	r0, r1
   26508:	bic	r2, r2, #7
   2650c:	strh	r5, [r4, #130]	; 0x82
   26510:	stm	r3, {ip, lr}
   26514:	str	r2, [r4, #28]
   26518:	str	r1, [r4, #20]
   2651c:	add	sp, sp, #12
   26520:	pop	{r4, r5, r6, r7, pc}
   26524:	mov	r1, #4
   26528:	ldr	r0, [r4, #40]	; 0x28
   2652c:	str	r1, [sp]
   26530:	add	r1, r4, #84	; 0x54
   26534:	ldr	r7, [r4, #48]	; 0x30
   26538:	blx	r7
   2653c:	cmp	r0, #0
   26540:	beq	26498 <flatcc_builder_default_alloc@@Base+0x294>
   26544:	bl	147a8 <__assert_fail@plt+0x198>
   26548:	mvn	r0, #0
   2654c:	b	2651c <flatcc_builder_default_alloc@@Base+0x318>
   26550:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   26554:	push	{r4, r5, r6, r7, lr}
   26558:	mov	r5, r0
   2655c:	ldrh	r0, [r0, #128]	; 0x80
   26560:	sub	sp, sp, #92	; 0x5c
   26564:	add	ip, sp, #12
   26568:	cmp	r0, #3
   2656c:	movls	r0, #4
   26570:	strhls	r0, [r5, #128]	; 0x80
   26574:	ldr	r4, [pc, #448]	; 2673c <flatcc_builder_default_alloc@@Base+0x538>
   26578:	ldr	r0, [r5, #136]	; 0x88
   2657c:	mov	r7, #4
   26580:	mov	r6, #1
   26584:	str	ip, [sp, #24]
   26588:	lsls	ip, r2, #2
   2658c:	add	r4, pc, r4
   26590:	str	r2, [sp, #12]
   26594:	and	lr, r0, #3
   26598:	str	r7, [sp, #16]
   2659c:	str	r7, [sp, #28]
   265a0:	str	r6, [sp, #20]
   265a4:	beq	265c0 <flatcc_builder_default_alloc@@Base+0x3bc>
   265a8:	add	r7, ip, r7
   265ac:	mov	r6, #2
   265b0:	str	r1, [sp, #32]
   265b4:	str	ip, [sp, #36]	; 0x24
   265b8:	str	r7, [sp, #16]
   265bc:	str	r6, [sp, #20]
   265c0:	cmp	lr, #0
   265c4:	beq	265f4 <flatcc_builder_default_alloc@@Base+0x3f0>
   265c8:	ldr	ip, [sp, #20]
   265cc:	ldr	r6, [pc, #364]	; 26740 <flatcc_builder_default_alloc@@Base+0x53c>
   265d0:	add	ip, ip, #1
   265d4:	add	r7, r7, lr
   265d8:	str	r7, [sp, #16]
   265dc:	ldr	r6, [r4, r6]
   265e0:	add	r4, sp, #88	; 0x58
   265e4:	add	r4, r4, ip, lsl #3
   265e8:	str	ip, [sp, #20]
   265ec:	str	r6, [r4, #-72]	; 0xffffffb8
   265f0:	str	lr, [r4, #-68]	; 0xffffffbc
   265f4:	cmp	r2, #0
   265f8:	sub	r4, r0, r7
   265fc:	beq	26690 <flatcc_builder_default_alloc@@Base+0x48c>
   26600:	add	r6, r3, r2
   26604:	mvn	ip, #3
   26608:	mov	r2, r3
   2660c:	b	26644 <flatcc_builder_default_alloc@@Base+0x440>
   26610:	sub	r0, ip, r4
   26614:	add	r0, r0, lr
   26618:	cmp	r3, #0
   2661c:	str	r0, [r1]
   26620:	beq	26630 <flatcc_builder_default_alloc@@Base+0x42c>
   26624:	ldrb	r0, [r2]
   26628:	cmp	r0, #0
   2662c:	beq	266f0 <flatcc_builder_default_alloc@@Base+0x4ec>
   26630:	add	r2, r2, #1
   26634:	cmp	r2, r6
   26638:	add	r1, r1, #4
   2663c:	sub	ip, ip, #4
   26640:	beq	26688 <flatcc_builder_default_alloc@@Base+0x484>
   26644:	ldr	lr, [r1]
   26648:	cmp	lr, #0
   2664c:	bne	26610 <flatcc_builder_default_alloc@@Base+0x40c>
   26650:	cmp	r3, #0
   26654:	beq	266cc <flatcc_builder_default_alloc@@Base+0x4c8>
   26658:	ldrb	r0, [r2]
   2665c:	cmp	r0, #0
   26660:	beq	26630 <flatcc_builder_default_alloc@@Base+0x42c>
   26664:	ldr	r3, [pc, #216]	; 26744 <flatcc_builder_default_alloc@@Base+0x540>
   26668:	ldr	r1, [pc, #216]	; 26748 <flatcc_builder_default_alloc@@Base+0x544>
   2666c:	ldr	r0, [pc, #216]	; 2674c <flatcc_builder_default_alloc@@Base+0x548>
   26670:	add	r3, pc, r3
   26674:	ldr	r2, [pc, #212]	; 26750 <flatcc_builder_default_alloc@@Base+0x54c>
   26678:	add	r3, r3, #76	; 0x4c
   2667c:	add	r1, pc, r1
   26680:	add	r0, pc, r0
   26684:	bl	14610 <__assert_fail@plt>
   26688:	ldr	r0, [r5, #136]	; 0x88
   2668c:	sub	r4, r0, r7
   26690:	cmp	r4, r0
   26694:	bge	26738 <flatcc_builder_default_alloc@@Base+0x534>
   26698:	ldr	r0, [r5, #36]	; 0x24
   2669c:	ldr	r2, [sp, #20]
   266a0:	str	r7, [sp]
   266a4:	mov	r3, r4
   266a8:	ldr	r6, [r5, #44]	; 0x2c
   266ac:	add	r1, sp, #24
   266b0:	blx	r6
   266b4:	cmp	r0, #0
   266b8:	bne	26714 <flatcc_builder_default_alloc@@Base+0x510>
   266bc:	mov	r0, r4
   266c0:	str	r4, [r5, #136]	; 0x88
   266c4:	add	sp, sp, #92	; 0x5c
   266c8:	pop	{r4, r5, r6, r7, pc}
   266cc:	ldr	r3, [pc, #128]	; 26754 <flatcc_builder_default_alloc@@Base+0x550>
   266d0:	ldr	r1, [pc, #128]	; 26758 <flatcc_builder_default_alloc@@Base+0x554>
   266d4:	ldr	r0, [pc, #128]	; 2675c <flatcc_builder_default_alloc@@Base+0x558>
   266d8:	add	r3, pc, r3
   266dc:	ldr	r2, [pc, #124]	; 26760 <flatcc_builder_default_alloc@@Base+0x55c>
   266e0:	add	r3, r3, #76	; 0x4c
   266e4:	add	r1, pc, r1
   266e8:	add	r0, pc, r0
   266ec:	bl	14610 <__assert_fail@plt>
   266f0:	ldr	r3, [pc, #108]	; 26764 <flatcc_builder_default_alloc@@Base+0x560>
   266f4:	ldr	r1, [pc, #108]	; 26768 <flatcc_builder_default_alloc@@Base+0x564>
   266f8:	ldr	r0, [pc, #108]	; 2676c <flatcc_builder_default_alloc@@Base+0x568>
   266fc:	add	r3, pc, r3
   26700:	ldr	r2, [pc, #104]	; 26770 <flatcc_builder_default_alloc@@Base+0x56c>
   26704:	add	r3, r3, #76	; 0x4c
   26708:	add	r1, pc, r1
   2670c:	add	r0, pc, r0
   26710:	bl	14610 <__assert_fail@plt>
   26714:	ldr	r3, [pc, #88]	; 26774 <flatcc_builder_default_alloc@@Base+0x570>
   26718:	ldr	r1, [pc, #88]	; 26778 <flatcc_builder_default_alloc@@Base+0x574>
   2671c:	ldr	r0, [pc, #88]	; 2677c <flatcc_builder_default_alloc@@Base+0x578>
   26720:	add	r3, pc, r3
   26724:	ldr	r2, [pc, #84]	; 26780 <flatcc_builder_default_alloc@@Base+0x57c>
   26728:	add	r3, r3, #28
   2672c:	add	r1, pc, r1
   26730:	add	r0, pc, r0
   26734:	bl	14610 <__assert_fail@plt>
   26738:	bl	14810 <__assert_fail@plt+0x200>
   2673c:	andeq	lr, r2, ip, ror #20
   26740:	andeq	r0, r0, r4, rrx
   26744:	andeq	fp, r1, r4, asr #13
   26748:	andeq	fp, r1, r8, lsl #28
   2674c:	muleq	r1, r0, lr
   26750:			; <UNDEFINED> instruction: 0x000005b5
   26754:	andeq	fp, r1, ip, asr r6
   26758:	andeq	fp, r1, r0, lsr #27
   2675c:	andeq	fp, r1, r4, lsr #28
   26760:			; <UNDEFINED> instruction: 0x000005b7
   26764:	andeq	fp, r1, r8, lsr r6
   26768:	andeq	fp, r1, ip, ror sp
   2676c:	strdeq	fp, [r1], -r4
   26770:			; <UNDEFINED> instruction: 0x000005b1
   26774:	andeq	fp, r1, r4, lsl r6
   26778:	andeq	fp, r1, r8, asr sp
   2677c:	ldrdeq	fp, [r1], -ip
   26780:	andeq	r0, r0, fp, lsl #5

00026784 <flatcc_builder_flush_vtable_cache@@Base>:
   26784:	ldr	r3, [r0, #116]	; 0x74
   26788:	cmp	r3, #0
   2678c:	bxeq	lr
   26790:	ldr	r2, [r0, #96]	; 0x60
   26794:	push	{r4, lr}
   26798:	mov	r1, #0
   2679c:	mov	r4, r0
   267a0:	ldr	r0, [r0, #92]	; 0x5c
   267a4:	bl	145bc <memset@plt>
   267a8:	mov	r2, #16
   267ac:	mov	r3, #0
   267b0:	str	r2, [r4, #124]	; 0x7c
   267b4:	str	r3, [r4, #120]	; 0x78
   267b8:	pop	{r4, pc}

000267bc <flatcc_builder_custom_init@@Base>:
   267bc:	push	{r4, r5, r6, r7, r8, lr}
   267c0:	mov	r6, r1
   267c4:	mov	r7, r2
   267c8:	mov	r1, #0
   267cc:	mov	r2, #232	; 0xe8
   267d0:	mov	r5, r3
   267d4:	mov	r4, r0
   267d8:	ldr	r8, [sp, #24]
   267dc:	bl	145bc <memset@plt>
   267e0:	ldr	r3, [pc, #76]	; 26834 <flatcc_builder_custom_init@@Base+0x78>
   267e4:	cmp	r6, #0
   267e8:	add	r3, pc, r3
   267ec:	beq	2681c <flatcc_builder_custom_init@@Base+0x60>
   267f0:	cmp	r5, #0
   267f4:	beq	26810 <flatcc_builder_custom_init@@Base+0x54>
   267f8:	str	r8, [r4, #40]	; 0x28
   267fc:	str	r5, [r4, #48]	; 0x30
   26800:	str	r7, [r4, #36]	; 0x24
   26804:	str	r6, [r4, #44]	; 0x2c
   26808:	mov	r0, #0
   2680c:	pop	{r4, r5, r6, r7, r8, pc}
   26810:	ldr	r2, [pc, #32]	; 26838 <flatcc_builder_custom_init@@Base+0x7c>
   26814:	ldr	r5, [r3, r2]
   26818:	b	267f8 <flatcc_builder_custom_init@@Base+0x3c>
   2681c:	ldr	r2, [pc, #24]	; 2683c <flatcc_builder_custom_init@@Base+0x80>
   26820:	mov	r1, #1
   26824:	str	r1, [r4, #184]	; 0xb8
   26828:	add	r7, r4, #188	; 0xbc
   2682c:	ldr	r6, [r3, r2]
   26830:	b	267f0 <flatcc_builder_custom_init@@Base+0x34>
   26834:	andeq	lr, r2, r0, lsl r8
   26838:	andeq	r0, r0, r0, ror r0
   2683c:	andeq	r0, r0, r8, ror r0

00026840 <flatcc_builder_init@@Base>:
   26840:	push	{lr}		; (str lr, [sp, #-4]!)
   26844:	sub	sp, sp, #12
   26848:	mov	r3, #0
   2684c:	str	r3, [sp]
   26850:	mov	r2, r3
   26854:	mov	r1, r3
   26858:	bl	267bc <flatcc_builder_custom_init@@Base>
   2685c:	add	sp, sp, #12
   26860:	pop	{pc}		; (ldr pc, [sp], #4)

00026864 <flatcc_builder_custom_reset@@Base>:
   26864:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26868:	add	r7, r0, #52	; 0x34
   2686c:	mov	r4, #0
   26870:	sub	sp, sp, #12
   26874:	mov	r5, r0
   26878:	mov	sl, r1
   2687c:	mov	r8, r2
   26880:	mov	r6, r7
   26884:	mov	r9, r4
   26888:	mov	fp, #1
   2688c:	b	268e0 <flatcc_builder_custom_reset@@Base+0x7c>
   26890:	cmp	r4, #5
   26894:	cmpne	r8, #0
   26898:	beq	268c4 <flatcc_builder_custom_reset@@Base+0x60>
   2689c:	ldr	r0, [r5, #40]	; 0x28
   268a0:	mov	r3, fp
   268a4:	str	r4, [sp]
   268a8:	mov	r2, #1
   268ac:	mov	r1, r6
   268b0:	ldr	ip, [r5, #48]	; 0x30
   268b4:	blx	ip
   268b8:	cmp	r0, #0
   268bc:	bne	269a4 <flatcc_builder_custom_reset@@Base+0x140>
   268c0:	ldr	r0, [r7, r4, lsl #3]
   268c4:	ldr	r2, [r6, #4]
   268c8:	mov	r1, r9
   268cc:	bl	145bc <memset@plt>
   268d0:	add	r4, r4, #1
   268d4:	cmp	r4, #8
   268d8:	add	r6, r6, #8
   268dc:	beq	2691c <flatcc_builder_custom_reset@@Base+0xb8>
   268e0:	ldr	r0, [r7, r4, lsl #3]
   268e4:	cmp	r0, #0
   268e8:	bne	26890 <flatcc_builder_custom_reset@@Base+0x2c>
   268ec:	ldr	r3, [r6, #4]
   268f0:	cmp	r3, #0
   268f4:	beq	268d0 <flatcc_builder_custom_reset@@Base+0x6c>
   268f8:	ldr	r3, [pc, #172]	; 269ac <flatcc_builder_custom_reset@@Base+0x148>
   268fc:	ldr	r1, [pc, #172]	; 269b0 <flatcc_builder_custom_reset@@Base+0x14c>
   26900:	ldr	r0, [pc, #172]	; 269b4 <flatcc_builder_custom_reset@@Base+0x150>
   26904:	add	r3, pc, r3
   26908:	ldr	r2, [pc, #168]	; 269b8 <flatcc_builder_custom_reset@@Base+0x154>
   2690c:	add	r3, r3, #108	; 0x6c
   26910:	add	r1, pc, r1
   26914:	add	r0, pc, r0
   26918:	bl	14610 <__assert_fail@plt>
   2691c:	ldr	r2, [r5, #124]	; 0x7c
   26920:	mov	r3, #0
   26924:	ldr	r0, [r5, #60]	; 0x3c
   26928:	cmp	r2, r3
   2692c:	str	r3, [r5, #120]	; 0x78
   26930:	ldr	r1, [r5, #76]	; 0x4c
   26934:	movne	r3, #16
   26938:	ldr	r2, [r5, #52]	; 0x34
   2693c:	str	r0, [r5, #16]
   26940:	ldr	r0, [r5, #184]	; 0xb8
   26944:	strne	r3, [r5, #124]	; 0x7c
   26948:	mov	r3, #0
   2694c:	cmp	sl, #0
   26950:	strne	r3, [r5, #172]	; 0xac
   26954:	strne	r3, [r5, #176]	; 0xb0
   26958:	strne	r3, [r5, #180]	; 0xb4
   2695c:	cmp	r0, #0
   26960:	stm	r5, {r1, r2}
   26964:	strh	r3, [r5, #128]	; 0x80
   26968:	str	r3, [r5, #136]	; 0x88
   2696c:	str	r3, [r5, #140]	; 0x8c
   26970:	str	r3, [r5, #156]	; 0x9c
   26974:	str	r3, [r5, #160]	; 0xa0
   26978:	str	r3, [r5, #20]
   2697c:	str	r3, [r5, #24]
   26980:	str	r3, [r5, #148]	; 0x94
   26984:	str	r3, [r5, #152]	; 0x98
   26988:	str	r3, [r5, #32]
   2698c:	beq	2699c <flatcc_builder_custom_reset@@Base+0x138>
   26990:	add	r0, r5, #188	; 0xbc
   26994:	bl	2a440 <flatcc_emitter_reset@@Base>
   26998:	mov	r0, #0
   2699c:	add	sp, sp, #12
   269a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   269a4:	mvn	r0, #0
   269a8:	b	2699c <flatcc_builder_custom_reset@@Base+0x138>
   269ac:	andeq	fp, r1, r0, lsr r4
   269b0:	andeq	fp, r1, r4, ror fp
   269b4:	andeq	fp, r1, ip, lsl #24
   269b8:			; <UNDEFINED> instruction: 0x000001b2

000269bc <flatcc_builder_reset@@Base>:
   269bc:	mov	r2, #0
   269c0:	mov	r1, r2
   269c4:	b	26864 <flatcc_builder_custom_reset@@Base>

000269c8 <flatcc_builder_clear@@Base>:
   269c8:	push	{r4, r5, r6, r7, r8, lr}
   269cc:	mov	r4, #0
   269d0:	sub	sp, sp, #8
   269d4:	mov	r6, r0
   269d8:	add	r5, r0, #52	; 0x34
   269dc:	mov	r8, r4
   269e0:	ldr	r0, [r6, #40]	; 0x28
   269e4:	mov	r1, r5
   269e8:	str	r4, [sp]
   269ec:	mov	r3, r8
   269f0:	add	r4, r4, #1
   269f4:	ldr	r7, [r6, #48]	; 0x30
   269f8:	mov	r2, #0
   269fc:	blx	r7
   26a00:	cmp	r4, #8
   26a04:	add	r5, r5, #8
   26a08:	bne	269e0 <flatcc_builder_clear@@Base+0x18>
   26a0c:	ldr	r3, [r6, #184]	; 0xb8
   26a10:	cmp	r3, #0
   26a14:	beq	26a20 <flatcc_builder_clear@@Base+0x58>
   26a18:	add	r0, r6, #188	; 0xbc
   26a1c:	bl	2a4fc <flatcc_emitter_clear@@Base>
   26a20:	mov	r0, r6
   26a24:	mov	r2, #232	; 0xe8
   26a28:	mov	r1, #0
   26a2c:	add	sp, sp, #8
   26a30:	pop	{r4, r5, r6, r7, r8, lr}
   26a34:	b	145bc <memset@plt>

00026a38 <flatcc_builder_enter_user_frame_ptr@@Base>:
   26a38:	push	{r4, r5, r6, r7, r8, lr}
   26a3c:	add	r4, r1, #3
   26a40:	bic	r4, r4, #3
   26a44:	ldr	r7, [r0, #228]	; 0xe4
   26a48:	add	r4, r4, #4
   26a4c:	ldr	r3, [r0, #112]	; 0x70
   26a50:	add	r2, r4, r7
   26a54:	cmp	r2, r3
   26a58:	sub	sp, sp, #8
   26a5c:	mov	r6, r0
   26a60:	bhi	26aa8 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   26a64:	ldr	r8, [r6, #108]	; 0x6c
   26a68:	adds	r5, r8, r7
   26a6c:	beq	26ad0 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   26a70:	mov	r2, r4
   26a74:	mov	r1, #0
   26a78:	mov	r0, r5
   26a7c:	bl	145bc <memset@plt>
   26a80:	ldr	r3, [r6, #224]	; 0xe0
   26a84:	add	r0, r5, #4
   26a88:	str	r3, [r8, r7]
   26a8c:	ldr	r3, [r6, #228]	; 0xe4
   26a90:	add	r4, r4, r3
   26a94:	add	r3, r3, #4
   26a98:	str	r4, [r6, #228]	; 0xe4
   26a9c:	str	r3, [r6, #224]	; 0xe0
   26aa0:	add	sp, sp, #8
   26aa4:	pop	{r4, r5, r6, r7, r8, pc}
   26aa8:	mov	r3, #7
   26aac:	ldr	r0, [r0, #40]	; 0x28
   26ab0:	add	r1, r6, #108	; 0x6c
   26ab4:	str	r3, [sp]
   26ab8:	mov	r3, #0
   26abc:	ldr	r5, [r6, #48]	; 0x30
   26ac0:	blx	r5
   26ac4:	cmp	r0, #0
   26ac8:	beq	26a64 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   26acc:	bl	147a8 <__assert_fail@plt+0x198>
   26ad0:	mov	r0, r5
   26ad4:	b	26aa0 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>

00026ad8 <flatcc_builder_enter_user_frame@@Base>:
   26ad8:	push	{r4, r5, r6, r7, lr}
   26adc:	add	r4, r1, #3
   26ae0:	bic	r4, r4, #3
   26ae4:	ldr	r6, [r0, #228]	; 0xe4
   26ae8:	add	r4, r4, #4
   26aec:	ldr	r3, [r0, #112]	; 0x70
   26af0:	add	r2, r4, r6
   26af4:	cmp	r2, r3
   26af8:	sub	sp, sp, #12
   26afc:	mov	r5, r0
   26b00:	bhi	26b40 <flatcc_builder_enter_user_frame@@Base+0x68>
   26b04:	ldr	r7, [r5, #108]	; 0x6c
   26b08:	adds	r0, r7, r6
   26b0c:	beq	26b38 <flatcc_builder_enter_user_frame@@Base+0x60>
   26b10:	mov	r2, r4
   26b14:	mov	r1, #0
   26b18:	bl	145bc <memset@plt>
   26b1c:	ldr	r3, [r5, #224]	; 0xe0
   26b20:	str	r3, [r7, r6]
   26b24:	ldr	r0, [r5, #228]	; 0xe4
   26b28:	add	r4, r4, r0
   26b2c:	add	r0, r0, #4
   26b30:	str	r4, [r5, #228]	; 0xe4
   26b34:	str	r0, [r5, #224]	; 0xe0
   26b38:	add	sp, sp, #12
   26b3c:	pop	{r4, r5, r6, r7, pc}
   26b40:	mov	r3, #7
   26b44:	ldr	r0, [r0, #40]	; 0x28
   26b48:	add	r1, r5, #108	; 0x6c
   26b4c:	str	r3, [sp]
   26b50:	mov	r3, #0
   26b54:	ldr	r7, [r5, #48]	; 0x30
   26b58:	blx	r7
   26b5c:	cmp	r0, #0
   26b60:	beq	26b04 <flatcc_builder_enter_user_frame@@Base+0x2c>
   26b64:	bl	147a8 <__assert_fail@plt+0x198>

00026b68 <flatcc_builder_exit_user_frame@@Base>:
   26b68:	ldr	r3, [r0, #224]	; 0xe0
   26b6c:	cmp	r3, #0
   26b70:	beq	26b94 <flatcc_builder_exit_user_frame@@Base+0x2c>
   26b74:	ldr	r2, [r0, #108]	; 0x6c
   26b78:	sub	r1, r3, #4
   26b7c:	add	r3, r2, r3
   26b80:	str	r1, [r0, #228]	; 0xe4
   26b84:	ldr	r3, [r3, #-4]
   26b88:	str	r3, [r0, #224]	; 0xe0
   26b8c:	mov	r0, r3
   26b90:	bx	lr
   26b94:	ldr	r3, [pc, #32]	; 26bbc <flatcc_builder_exit_user_frame@@Base+0x54>
   26b98:	ldr	r1, [pc, #32]	; 26bc0 <flatcc_builder_exit_user_frame@@Base+0x58>
   26b9c:	ldr	r0, [pc, #32]	; 26bc4 <flatcc_builder_exit_user_frame@@Base+0x5c>
   26ba0:	add	r3, pc, r3
   26ba4:	push	{r4, lr}
   26ba8:	add	r3, r3, #136	; 0x88
   26bac:	ldr	r2, [pc, #20]	; 26bc8 <flatcc_builder_exit_user_frame@@Base+0x60>
   26bb0:	add	r1, pc, r1
   26bb4:	add	r0, pc, r0
   26bb8:	bl	14610 <__assert_fail@plt>
   26bbc:	muleq	r1, r4, r1
   26bc0:	ldrdeq	fp, [r1], -r4
   26bc4:	andeq	fp, r1, r0, lsl #19
   26bc8:	andeq	r0, r0, lr, lsl r2

00026bcc <flatcc_builder_exit_user_frame_at@@Base>:
   26bcc:	ldr	r2, [r0, #224]	; 0xe0
   26bd0:	cmp	r2, r1
   26bd4:	bcc	26be0 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   26bd8:	str	r1, [r0, #224]	; 0xe0
   26bdc:	b	26b68 <flatcc_builder_exit_user_frame@@Base>
   26be0:	ldr	r3, [pc, #32]	; 26c08 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   26be4:	ldr	r1, [pc, #32]	; 26c0c <flatcc_builder_exit_user_frame_at@@Base+0x40>
   26be8:	ldr	r0, [pc, #32]	; 26c10 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   26bec:	add	r3, pc, r3
   26bf0:	push	{r4, lr}
   26bf4:	add	r3, r3, #168	; 0xa8
   26bf8:	ldr	r2, [pc, #20]	; 26c14 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   26bfc:	add	r1, pc, r1
   26c00:	add	r0, pc, r0
   26c04:	bl	14610 <__assert_fail@plt>
   26c08:	andeq	fp, r1, r8, asr #2
   26c0c:	andeq	fp, r1, r8, lsl #17
   26c10:	andeq	fp, r1, r0, asr r9
   26c14:	andeq	r0, r0, r7, lsr #4

00026c18 <flatcc_builder_get_current_user_frame@@Base>:
   26c18:	ldr	r0, [r0, #224]	; 0xe0
   26c1c:	bx	lr

00026c20 <flatcc_builder_get_user_frame_ptr@@Base>:
   26c20:	ldr	r0, [r0, #108]	; 0x6c
   26c24:	add	r0, r0, r1
   26c28:	bx	lr

00026c2c <flatcc_builder_embed_buffer@@Base>:
   26c2c:	ldr	ip, [r0, #152]	; 0x98
   26c30:	push	{r4, r5, r6, lr}
   26c34:	mov	r5, r3
   26c38:	sub	sp, sp, #88	; 0x58
   26c3c:	adds	r3, ip, #0
   26c40:	movne	r3, #1
   26c44:	mov	r6, r2
   26c48:	mov	r2, r1
   26c4c:	add	r1, sp, #104	; 0x68
   26c50:	mov	r4, r0
   26c54:	bl	26310 <flatcc_builder_default_alloc@@Base+0x10c>
   26c58:	ldr	ip, [pc, #324]	; 26da4 <flatcc_builder_embed_buffer@@Base+0x178>
   26c5c:	add	ip, pc, ip
   26c60:	cmp	r0, #0
   26c64:	bne	26d6c <flatcc_builder_embed_buffer@@Base+0x140>
   26c68:	ldr	r2, [sp, #108]	; 0x6c
   26c6c:	ldr	r1, [r4, #136]	; 0x88
   26c70:	ldrh	r3, [sp, #104]	; 0x68
   26c74:	tst	r2, #2
   26c78:	moveq	lr, #0
   26c7c:	movne	lr, #4
   26c80:	sub	r2, r1, r5
   26c84:	sub	r3, r3, #1
   26c88:	sub	r2, r2, lr
   26c8c:	and	r2, r2, r3
   26c90:	ldr	r3, [r4, #152]	; 0x98
   26c94:	str	r0, [sp, #16]
   26c98:	str	r0, [sp, #20]
   26c9c:	cmp	r3, #0
   26ca0:	add	r0, r5, r2
   26ca4:	str	r0, [sp, #12]
   26ca8:	beq	26cc8 <flatcc_builder_embed_buffer@@Base+0x9c>
   26cac:	mov	r3, #4
   26cb0:	mov	lr, #1
   26cb4:	add	r0, sp, #12
   26cb8:	str	r3, [sp, #16]
   26cbc:	str	r3, [sp, #28]
   26cc0:	str	r0, [sp, #24]
   26cc4:	str	lr, [sp, #20]
   26cc8:	cmp	r5, #0
   26ccc:	beq	26cf4 <flatcc_builder_embed_buffer@@Base+0xc8>
   26cd0:	ldr	r0, [sp, #20]
   26cd4:	add	lr, sp, #88	; 0x58
   26cd8:	add	r0, r0, #1
   26cdc:	add	r3, r3, r5
   26ce0:	add	lr, lr, r0, lsl #3
   26ce4:	str	r3, [sp, #16]
   26ce8:	str	r0, [sp, #20]
   26cec:	str	r6, [lr, #-72]	; 0xffffffb8
   26cf0:	str	r5, [lr, #-68]	; 0xffffffbc
   26cf4:	cmp	r2, #0
   26cf8:	bne	26d3c <flatcc_builder_embed_buffer@@Base+0x110>
   26cfc:	sub	r5, r1, r3
   26d00:	cmp	r1, r5
   26d04:	ble	26da0 <flatcc_builder_embed_buffer@@Base+0x174>
   26d08:	ldr	r0, [r4, #36]	; 0x24
   26d0c:	ldr	r2, [sp, #20]
   26d10:	str	r3, [sp]
   26d14:	add	r1, sp, #24
   26d18:	ldr	r6, [r4, #44]	; 0x2c
   26d1c:	mov	r3, r5
   26d20:	blx	r6
   26d24:	cmp	r0, #0
   26d28:	streq	r5, [r4, #136]	; 0x88
   26d2c:	bne	26d7c <flatcc_builder_embed_buffer@@Base+0x150>
   26d30:	mov	r0, r5
   26d34:	add	sp, sp, #88	; 0x58
   26d38:	pop	{r4, r5, r6, pc}
   26d3c:	ldr	r0, [sp, #20]
   26d40:	ldr	lr, [pc, #96]	; 26da8 <flatcc_builder_embed_buffer@@Base+0x17c>
   26d44:	add	r0, r0, #1
   26d48:	add	r3, r3, r2
   26d4c:	str	r3, [sp, #16]
   26d50:	ldr	lr, [ip, lr]
   26d54:	add	ip, sp, #88	; 0x58
   26d58:	add	ip, ip, r0, lsl #3
   26d5c:	str	r0, [sp, #20]
   26d60:	str	lr, [ip, #-72]	; 0xffffffb8
   26d64:	str	r2, [ip, #-68]	; 0xffffffbc
   26d68:	b	26cfc <flatcc_builder_embed_buffer@@Base+0xd0>
   26d6c:	mov	r5, #0
   26d70:	mov	r0, r5
   26d74:	add	sp, sp, #88	; 0x58
   26d78:	pop	{r4, r5, r6, pc}
   26d7c:	ldr	r3, [pc, #40]	; 26dac <flatcc_builder_embed_buffer@@Base+0x180>
   26d80:	ldr	r1, [pc, #40]	; 26db0 <flatcc_builder_embed_buffer@@Base+0x184>
   26d84:	ldr	r0, [pc, #40]	; 26db4 <flatcc_builder_embed_buffer@@Base+0x188>
   26d88:	add	r3, pc, r3
   26d8c:	ldr	r2, [pc, #36]	; 26db8 <flatcc_builder_embed_buffer@@Base+0x18c>
   26d90:	add	r3, r3, #28
   26d94:	add	r1, pc, r1
   26d98:	add	r0, pc, r0
   26d9c:	bl	14610 <__assert_fail@plt>
   26da0:	bl	14810 <__assert_fail@plt+0x200>
   26da4:	muleq	r2, ip, r3
   26da8:	andeq	r0, r0, r4, rrx
   26dac:	andeq	sl, r1, ip, lsr #31
   26db0:	strdeq	fp, [r1], -r0
   26db4:	andeq	fp, r1, r4, ror r7
   26db8:	andeq	r0, r0, fp, lsl #5

00026dbc <flatcc_builder_create_buffer@@Base>:
   26dbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26dc0:	sub	sp, sp, #100	; 0x64
   26dc4:	mov	r5, #0
   26dc8:	ldr	r8, [sp, #140]	; 0x8c
   26dcc:	mov	r9, r1
   26dd0:	and	r6, r8, #1
   26dd4:	mov	r7, r3
   26dd8:	add	r1, sp, #136	; 0x88
   26ddc:	mov	r3, r6
   26de0:	str	r5, [sp, #20]
   26de4:	mov	r4, r0
   26de8:	bl	26310 <flatcc_builder_default_alloc@@Base+0x10c>
   26dec:	ldr	lr, [pc, #516]	; 26ff8 <flatcc_builder_create_buffer@@Base+0x23c>
   26df0:	add	lr, pc, lr
   26df4:	cmp	r0, r5
   26df8:	bne	26f8c <flatcc_builder_create_buffer@@Base+0x1d0>
   26dfc:	ldrh	r3, [r4, #128]	; 0x80
   26e00:	ldrh	r2, [sp, #136]	; 0x88
   26e04:	uxtb	r5, r6
   26e08:	cmp	r3, r2
   26e0c:	strhcc	r2, [r4, #128]	; 0x80
   26e10:	cmp	r9, #0
   26e14:	sub	r2, r2, #1
   26e18:	ldrne	r3, [r9]
   26e1c:	ldreq	r0, [sp, #20]
   26e20:	ldrne	r0, [r9]
   26e24:	strne	r3, [sp, #20]
   26e28:	cmp	r0, #0
   26e2c:	movne	r0, #4
   26e30:	moveq	r0, #0
   26e34:	ands	r3, r8, #2
   26e38:	ldr	r8, [r4, #136]	; 0x88
   26e3c:	bne	26f5c <flatcc_builder_create_buffer@@Base+0x1a0>
   26e40:	sub	r1, r8, #4
   26e44:	cmp	r5, #0
   26e48:	sub	r1, r1, r0
   26e4c:	and	r2, r2, r1
   26e50:	moveq	r9, #1
   26e54:	moveq	ip, #4
   26e58:	bne	26f68 <flatcc_builder_create_buffer@@Base+0x1ac>
   26e5c:	add	r1, r3, #1
   26e60:	add	sl, sp, #96	; 0x60
   26e64:	add	r1, sl, r1, lsl #3
   26e68:	mov	fp, #4
   26e6c:	add	sl, sp, #12
   26e70:	cmp	r0, #0
   26e74:	str	ip, [sp, #24]
   26e78:	str	r9, [sp, #28]
   26e7c:	str	sl, [r1, #-72]	; 0xffffffb8
   26e80:	str	fp, [r1, #-68]	; 0xffffffbc
   26e84:	beq	26eb0 <flatcc_builder_create_buffer@@Base+0xf4>
   26e88:	add	r9, r9, #1
   26e8c:	add	r1, sp, #96	; 0x60
   26e90:	add	r9, r1, r9, lsl #3
   26e94:	add	r3, r3, #2
   26e98:	add	ip, ip, r0
   26e9c:	str	r3, [sp, #28]
   26ea0:	add	r3, sp, #20
   26ea4:	str	r0, [r9, #-68]	; 0xffffffbc
   26ea8:	str	ip, [sp, #24]
   26eac:	str	r3, [r9, #-72]	; 0xffffffb8
   26eb0:	cmp	r2, #0
   26eb4:	beq	26ee4 <flatcc_builder_create_buffer@@Base+0x128>
   26eb8:	ldr	r3, [sp, #28]
   26ebc:	ldr	r1, [pc, #312]	; 26ffc <flatcc_builder_create_buffer@@Base+0x240>
   26ec0:	add	r3, r3, #1
   26ec4:	add	ip, ip, r2
   26ec8:	str	ip, [sp, #24]
   26ecc:	ldr	r0, [lr, r1]
   26ed0:	add	r1, sp, #96	; 0x60
   26ed4:	add	r1, r1, r3, lsl #3
   26ed8:	str	r3, [sp, #28]
   26edc:	str	r0, [r1, #-72]	; 0xffffffb8
   26ee0:	str	r2, [r1, #-68]	; 0xffffffbc
   26ee4:	cmp	r5, #0
   26ee8:	sub	r5, r8, ip
   26eec:	mov	r3, r5
   26ef0:	beq	26f9c <flatcc_builder_create_buffer@@Base+0x1e0>
   26ef4:	cmp	r6, #0
   26ef8:	add	r3, r5, #4
   26efc:	beq	26f9c <flatcc_builder_create_buffer@@Base+0x1e0>
   26f00:	ldr	r2, [r4, #144]	; 0x90
   26f04:	sub	r2, r2, r3
   26f08:	str	r2, [sp, #16]
   26f0c:	sub	r7, r7, r3
   26f10:	cmp	r5, r8
   26f14:	str	r7, [sp, #12]
   26f18:	mov	r6, r5
   26f1c:	bge	26fac <flatcc_builder_create_buffer@@Base+0x1f0>
   26f20:	ldr	r0, [r4, #36]	; 0x24
   26f24:	ldr	r2, [sp, #28]
   26f28:	str	ip, [sp]
   26f2c:	mov	r3, r5
   26f30:	ldr	r7, [r4, #44]	; 0x2c
   26f34:	add	r1, sp, #32
   26f38:	blx	r7
   26f3c:	cmp	r0, #0
   26f40:	bne	26fb0 <flatcc_builder_create_buffer@@Base+0x1f4>
   26f44:	cmp	r5, #0
   26f48:	str	r5, [r4, #136]	; 0x88
   26f4c:	beq	26fd4 <flatcc_builder_create_buffer@@Base+0x218>
   26f50:	mov	r0, r6
   26f54:	add	sp, sp, #100	; 0x64
   26f58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f5c:	sub	r3, r8, #8
   26f60:	sub	r3, r3, r0
   26f64:	and	r2, r2, r3
   26f68:	mov	ip, #4
   26f6c:	mov	r3, #1
   26f70:	add	r1, sp, #16
   26f74:	str	ip, [sp, #36]	; 0x24
   26f78:	str	r1, [sp, #32]
   26f7c:	mov	r5, r3
   26f80:	mov	r9, #2
   26f84:	mov	ip, #8
   26f88:	b	26e5c <flatcc_builder_create_buffer@@Base+0xa0>
   26f8c:	mov	r6, r5
   26f90:	mov	r0, r6
   26f94:	add	sp, sp, #100	; 0x64
   26f98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f9c:	ldr	r2, [r4, #140]	; 0x8c
   26fa0:	sub	r2, r2, r3
   26fa4:	str	r2, [sp, #16]
   26fa8:	b	26f0c <flatcc_builder_create_buffer@@Base+0x150>
   26fac:	bl	14810 <__assert_fail@plt+0x200>
   26fb0:	ldr	r3, [pc, #72]	; 27000 <flatcc_builder_create_buffer@@Base+0x244>
   26fb4:	ldr	r1, [pc, #72]	; 27004 <flatcc_builder_create_buffer@@Base+0x248>
   26fb8:	ldr	r0, [pc, #72]	; 27008 <flatcc_builder_create_buffer@@Base+0x24c>
   26fbc:	add	r3, pc, r3
   26fc0:	ldr	r2, [pc, #68]	; 2700c <flatcc_builder_create_buffer@@Base+0x250>
   26fc4:	add	r3, r3, #28
   26fc8:	add	r1, pc, r1
   26fcc:	add	r0, pc, r0
   26fd0:	bl	14610 <__assert_fail@plt>
   26fd4:	ldr	r3, [pc, #52]	; 27010 <flatcc_builder_create_buffer@@Base+0x254>
   26fd8:	ldr	r1, [pc, #52]	; 27014 <flatcc_builder_create_buffer@@Base+0x258>
   26fdc:	ldr	r0, [pc, #52]	; 27018 <flatcc_builder_create_buffer@@Base+0x25c>
   26fe0:	add	r3, pc, r3
   26fe4:	mov	r2, #772	; 0x304
   26fe8:	add	r3, r3, #204	; 0xcc
   26fec:	add	r1, pc, r1
   26ff0:	add	r0, pc, r0
   26ff4:	bl	14610 <__assert_fail@plt>
   26ff8:	andeq	lr, r2, r8, lsl #4
   26ffc:	andeq	r0, r0, r4, rrx
   27000:	andeq	sl, r1, r8, ror sp
   27004:			; <UNDEFINED> instruction: 0x0001b4bc
   27008:	andeq	fp, r1, r0, asr #10
   2700c:	andeq	r0, r0, fp, lsl #5
   27010:	andeq	sl, r1, r4, asr sp
   27014:	muleq	r1, r8, r4
   27018:	andeq	fp, r1, ip, lsl r5

0002701c <flatcc_builder_create_struct@@Base>:
   2701c:	push	{r4, r5, r6, lr}
   27020:	cmp	r3, #0
   27024:	ldr	lr, [pc, #300]	; 27158 <flatcc_builder_create_struct@@Base+0x13c>
   27028:	sub	sp, sp, #80	; 0x50
   2702c:	add	lr, pc, lr
   27030:	beq	27134 <flatcc_builder_create_struct@@Base+0x118>
   27034:	mov	r5, r0
   27038:	ldrh	r0, [r0, #128]	; 0x80
   2703c:	ldr	ip, [r5, #136]	; 0x88
   27040:	cmp	r0, r3
   27044:	strhcc	r3, [r5, #128]	; 0x80
   27048:	mov	r0, #0
   2704c:	sub	r3, r3, #1
   27050:	sub	r4, ip, r2
   27054:	cmp	r2, #0
   27058:	and	r3, r3, r4
   2705c:	str	r0, [sp, #8]
   27060:	str	r0, [sp, #12]
   27064:	bne	270e4 <flatcc_builder_create_struct@@Base+0xc8>
   27068:	cmp	r3, #0
   2706c:	movne	r6, #1
   27070:	movne	r1, r2
   27074:	beq	2710c <flatcc_builder_create_struct@@Base+0xf0>
   27078:	ldr	r0, [pc, #220]	; 2715c <flatcc_builder_create_struct@@Base+0x140>
   2707c:	add	r1, r1, #1
   27080:	add	r2, r2, r3
   27084:	add	r4, sp, #80	; 0x50
   27088:	add	r1, r4, r1, lsl #3
   2708c:	str	r2, [sp, #8]
   27090:	sub	r4, ip, r2
   27094:	ldr	r0, [lr, r0]
   27098:	str	r3, [r1, #-68]	; 0xffffffbc
   2709c:	str	r0, [r1, #-72]	; 0xffffffb8
   270a0:	str	r6, [sp, #12]
   270a4:	cmp	ip, r4
   270a8:	ble	2710c <flatcc_builder_create_struct@@Base+0xf0>
   270ac:	ldr	r3, [sp, #12]
   270b0:	ldr	r0, [r5, #36]	; 0x24
   270b4:	add	r1, sp, #16
   270b8:	str	r2, [sp]
   270bc:	mov	r2, r3
   270c0:	ldr	r6, [r5, #44]	; 0x2c
   270c4:	mov	r3, r4
   270c8:	blx	r6
   270cc:	cmp	r0, #0
   270d0:	bne	27110 <flatcc_builder_create_struct@@Base+0xf4>
   270d4:	mov	r0, r4
   270d8:	str	r4, [r5, #136]	; 0x88
   270dc:	add	sp, sp, #80	; 0x50
   270e0:	pop	{r4, r5, r6, pc}
   270e4:	cmp	r3, r0
   270e8:	mov	r0, #1
   270ec:	str	r1, [sp, #16]
   270f0:	str	r2, [sp, #8]
   270f4:	str	r2, [sp, #20]
   270f8:	str	r0, [sp, #12]
   270fc:	movne	r1, r0
   27100:	movne	r6, #2
   27104:	beq	270a4 <flatcc_builder_create_struct@@Base+0x88>
   27108:	b	27078 <flatcc_builder_create_struct@@Base+0x5c>
   2710c:	bl	14810 <__assert_fail@plt+0x200>
   27110:	ldr	r3, [pc, #72]	; 27160 <flatcc_builder_create_struct@@Base+0x144>
   27114:	ldr	r1, [pc, #72]	; 27164 <flatcc_builder_create_struct@@Base+0x148>
   27118:	ldr	r0, [pc, #72]	; 27168 <flatcc_builder_create_struct@@Base+0x14c>
   2711c:	add	r3, pc, r3
   27120:	ldr	r2, [pc, #68]	; 2716c <flatcc_builder_create_struct@@Base+0x150>
   27124:	add	r3, r3, #28
   27128:	add	r1, pc, r1
   2712c:	add	r0, pc, r0
   27130:	bl	14610 <__assert_fail@plt>
   27134:	ldr	r3, [pc, #52]	; 27170 <flatcc_builder_create_struct@@Base+0x154>
   27138:	ldr	r1, [pc, #52]	; 27174 <flatcc_builder_create_struct@@Base+0x158>
   2713c:	ldr	r0, [pc, #52]	; 27178 <flatcc_builder_create_struct@@Base+0x15c>
   27140:	add	r3, pc, r3
   27144:	ldr	r2, [pc, #48]	; 2717c <flatcc_builder_create_struct@@Base+0x160>
   27148:	add	r3, r3, #236	; 0xec
   2714c:	add	r1, pc, r1
   27150:	add	r0, pc, r0
   27154:	bl	14610 <__assert_fail@plt>
   27158:	andeq	sp, r2, ip, asr #31
   2715c:	andeq	r0, r0, r4, rrx
   27160:	andeq	sl, r1, r8, lsl ip
   27164:	andeq	fp, r1, ip, asr r3
   27168:	andeq	fp, r1, r0, ror #7
   2716c:	andeq	r0, r0, fp, lsl #5
   27170:	strdeq	sl, [r1], -r4
   27174:	andeq	fp, r1, r8, lsr r3
   27178:	andeq	fp, r1, r0, lsr #8
   2717c:	andeq	r0, r0, pc, lsl #6

00027180 <flatcc_builder_start_buffer@@Base>:
   27180:	push	{r4, r5, r6, r7, r8, lr}
   27184:	mov	r5, r1
   27188:	ldrh	r1, [r0, #128]	; 0x80
   2718c:	mov	r4, r0
   27190:	mov	r7, r2
   27194:	mov	r6, r3
   27198:	bl	26440 <flatcc_builder_default_alloc@@Base+0x23c>
   2719c:	ldr	r1, [pc, #140]	; 27230 <flatcc_builder_start_buffer@@Base+0xb0>
   271a0:	add	r1, pc, r1
   271a4:	cmp	r0, #0
   271a8:	bne	27228 <flatcc_builder_start_buffer@@Base+0xa8>
   271ac:	ldrh	r3, [r4, #132]	; 0x84
   271b0:	ldr	ip, [r4, #32]
   271b4:	mov	r2, #1
   271b8:	strh	r2, [r4, #128]	; 0x80
   271bc:	strh	r3, [ip, #34]	; 0x22
   271c0:	ldrh	r3, [r4, #164]	; 0xa4
   271c4:	strh	r7, [r4, #132]	; 0x84
   271c8:	cmp	r5, #0
   271cc:	strh	r3, [ip, #32]
   271d0:	ldr	r3, [r4, #144]	; 0x90
   271d4:	strh	r6, [r4, #164]	; 0xa4
   271d8:	str	r3, [ip, #20]
   271dc:	ldr	r3, [r4, #152]	; 0x98
   271e0:	str	r3, [ip, #28]
   271e4:	ldr	r3, [r4, #148]	; 0x94
   271e8:	ldr	lr, [r4, #136]	; 0x88
   271ec:	ldr	r2, [r4, #168]	; 0xa8
   271f0:	add	r6, r3, #1
   271f4:	str	r3, [r4, #152]	; 0x98
   271f8:	str	r6, [r4, #148]	; 0x94
   271fc:	str	lr, [r4, #144]	; 0x90
   27200:	str	r2, [ip, #16]
   27204:	beq	2721c <flatcc_builder_start_buffer@@Base+0x9c>
   27208:	ldr	r2, [r5]
   2720c:	mov	r3, #1
   27210:	str	r2, [r4, #168]	; 0xa8
   27214:	strh	r3, [ip, #14]
   27218:	pop	{r4, r5, r6, r7, r8, pc}
   2721c:	ldr	r3, [pc, #16]	; 27234 <flatcc_builder_start_buffer@@Base+0xb4>
   27220:	ldr	r5, [r1, r3]
   27224:	b	27208 <flatcc_builder_start_buffer@@Base+0x88>
   27228:	mvn	r0, #0
   2722c:	pop	{r4, r5, r6, r7, r8, pc}
   27230:	andeq	sp, r2, r8, asr lr
   27234:	andeq	r0, r0, r4, rrx

00027238 <flatcc_builder_end_buffer@@Base>:
   27238:	ldr	ip, [r0, #32]
   2723c:	ldrh	r2, [r0, #164]	; 0xa4
   27240:	push	{r4, r5, r6, lr}
   27244:	mov	r4, r0
   27248:	ldrh	ip, [ip, #14]
   2724c:	ldr	r0, [r0, #152]	; 0x98
   27250:	and	r2, r2, #2
   27254:	cmp	r0, #0
   27258:	moveq	r0, r2
   2725c:	orrne	r0, r2, #1
   27260:	cmp	ip, #1
   27264:	sub	sp, sp, #8
   27268:	bne	27348 <flatcc_builder_end_buffer@@Base+0x110>
   2726c:	ldrh	r2, [r4, #132]	; 0x84
   27270:	ldrh	ip, [r4, #128]	; 0x80
   27274:	mov	r3, r1
   27278:	add	r1, r4, #168	; 0xa8
   2727c:	cmp	r2, ip
   27280:	movhi	ip, r2
   27284:	strhhi	r2, [r4, #128]	; 0x80
   27288:	str	r0, [sp, #4]
   2728c:	str	ip, [sp]
   27290:	mov	r0, r4
   27294:	bl	26dbc <flatcc_builder_create_buffer@@Base>
   27298:	subs	r5, r0, #0
   2729c:	beq	2733c <flatcc_builder_end_buffer@@Base+0x104>
   272a0:	ldr	r3, [r4, #32]
   272a4:	ldr	r2, [r4, #20]
   272a8:	mov	r1, #0
   272ac:	ldr	ip, [r3, #20]
   272b0:	ldr	r0, [r4, #16]
   272b4:	str	ip, [r4, #144]	; 0x90
   272b8:	ldr	ip, [r3, #28]
   272bc:	str	ip, [r4, #152]	; 0x98
   272c0:	ldr	ip, [r3, #16]
   272c4:	str	ip, [r4, #168]	; 0xa8
   272c8:	ldrh	r3, [r3, #32]
   272cc:	strh	r3, [r4, #164]	; 0xa4
   272d0:	bl	145bc <memset@plt>
   272d4:	ldr	r3, [r4, #32]
   272d8:	ldr	r2, [r4, #64]	; 0x40
   272dc:	ldrh	lr, [r4, #130]	; 0x82
   272e0:	ldr	ip, [r3]
   272e4:	ldr	r1, [r3, #4]
   272e8:	ldrh	r0, [r4, #128]	; 0x80
   272ec:	sub	r2, r2, ip
   272f0:	cmp	r2, r1
   272f4:	movcs	r2, r1
   272f8:	cmp	r0, lr
   272fc:	ldr	r0, [r4, #60]	; 0x3c
   27300:	ldr	r6, [r3, #8]
   27304:	str	r2, [r4, #24]
   27308:	add	r2, r0, ip
   2730c:	str	r2, [r4, #16]
   27310:	str	r6, [r4, #20]
   27314:	ldr	r2, [r4, #156]	; 0x9c
   27318:	str	ip, [r4, #28]
   2731c:	str	r1, [r3, #4]
   27320:	strhcc	lr, [r4, #128]	; 0x80
   27324:	ldrh	r1, [r3, #12]
   27328:	sub	r2, r2, #1
   2732c:	sub	r3, r3, #36	; 0x24
   27330:	str	r2, [r4, #156]	; 0x9c
   27334:	strh	r1, [r4, #130]	; 0x82
   27338:	str	r3, [r4, #32]
   2733c:	mov	r0, r5
   27340:	add	sp, sp, #8
   27344:	pop	{r4, r5, r6, pc}
   27348:	ldr	r3, [pc, #28]	; 2736c <flatcc_builder_end_buffer@@Base+0x134>
   2734c:	ldr	r1, [pc, #28]	; 27370 <flatcc_builder_end_buffer@@Base+0x138>
   27350:	ldr	r0, [pc, #28]	; 27374 <flatcc_builder_end_buffer@@Base+0x13c>
   27354:	add	r3, pc, r3
   27358:	ldr	r2, [pc, #24]	; 27378 <flatcc_builder_end_buffer@@Base+0x140>
   2735c:	add	r3, r3, #268	; 0x10c
   27360:	add	r1, pc, r1
   27364:	add	r0, pc, r0
   27368:	bl	14610 <__assert_fail@plt>
   2736c:	andeq	sl, r1, r0, ror #19
   27370:	andeq	fp, r1, r4, lsr #2
   27374:	andeq	fp, r1, r8, lsl r2
   27378:	andeq	r0, r0, r6, asr #6

0002737c <flatcc_builder_start_struct@@Base>:
   2737c:	push	{r4, r5, r6, lr}
   27380:	mov	r5, r1
   27384:	mov	r1, r2
   27388:	mov	r4, r0
   2738c:	bl	26440 <flatcc_builder_default_alloc@@Base+0x23c>
   27390:	cmp	r0, #0
   27394:	bne	27414 <flatcc_builder_start_struct@@Base+0x98>
   27398:	ldr	r2, [r4, #28]
   2739c:	ldr	r3, [r4, #64]	; 0x40
   273a0:	ldr	r0, [r4, #60]	; 0x3c
   273a4:	ldr	ip, [r4, #32]
   273a8:	sub	r3, r3, r2
   273ac:	cmn	r3, #4
   273b0:	ldr	r6, [r4, #20]
   273b4:	add	r0, r0, r2
   273b8:	mov	r2, #2
   273bc:	strh	r2, [ip, #14]
   273c0:	mvnhi	r2, #3
   273c4:	movhi	r3, r2
   273c8:	add	r5, r5, r6
   273cc:	strhi	r2, [r4, #24]
   273d0:	strls	r3, [r4, #24]
   273d4:	mvn	r2, #3
   273d8:	cmp	r5, r3
   273dc:	str	r0, [r4, #16]
   273e0:	str	r2, [ip, #4]
   273e4:	str	r5, [r4, #20]
   273e8:	bcs	273f4 <flatcc_builder_start_struct@@Base+0x78>
   273ec:	add	r0, r0, r6
   273f0:	pop	{r4, r5, r6, pc}
   273f4:	add	r1, r5, #1
   273f8:	mov	r0, r4
   273fc:	bl	26190 <union_vector_tests@@Base+0x180>
   27400:	cmp	r0, #0
   27404:	bne	27414 <flatcc_builder_start_struct@@Base+0x98>
   27408:	ldr	r0, [r4, #16]
   2740c:	add	r0, r0, r6
   27410:	pop	{r4, r5, r6, pc}
   27414:	mov	r0, #0
   27418:	pop	{r4, r5, r6, pc}

0002741c <flatcc_builder_struct_edit@@Base>:
   2741c:	ldr	r0, [r0, #16]
   27420:	bx	lr

00027424 <flatcc_builder_end_struct@@Base>:
   27424:	ldr	r3, [r0, #32]
   27428:	push	{r4, r5, r6, lr}
   2742c:	ldrh	r3, [r3, #14]
   27430:	cmp	r3, #2
   27434:	bne	274d4 <flatcc_builder_end_struct@@Base+0xb0>
   27438:	ldrh	r3, [r0, #130]	; 0x82
   2743c:	ldr	r2, [r0, #20]
   27440:	ldr	r1, [r0, #16]
   27444:	mov	r4, r0
   27448:	bl	2701c <flatcc_builder_create_struct@@Base>
   2744c:	subs	r5, r0, #0
   27450:	beq	274cc <flatcc_builder_end_struct@@Base+0xa8>
   27454:	ldr	r2, [r4, #20]
   27458:	mov	r1, #0
   2745c:	ldr	r0, [r4, #16]
   27460:	bl	145bc <memset@plt>
   27464:	ldr	r3, [r4, #32]
   27468:	ldr	r2, [r4, #64]	; 0x40
   2746c:	ldrh	lr, [r4, #130]	; 0x82
   27470:	ldr	ip, [r3]
   27474:	ldr	r1, [r3, #4]
   27478:	ldrh	r0, [r4, #128]	; 0x80
   2747c:	sub	r2, r2, ip
   27480:	cmp	r2, r1
   27484:	movcs	r2, r1
   27488:	cmp	r0, lr
   2748c:	ldr	r0, [r4, #60]	; 0x3c
   27490:	ldr	r6, [r3, #8]
   27494:	str	r2, [r4, #24]
   27498:	add	r2, r0, ip
   2749c:	str	r2, [r4, #16]
   274a0:	str	r6, [r4, #20]
   274a4:	ldr	r2, [r4, #156]	; 0x9c
   274a8:	str	ip, [r4, #28]
   274ac:	str	r1, [r3, #4]
   274b0:	strhcc	lr, [r4, #128]	; 0x80
   274b4:	ldrh	r1, [r3, #12]
   274b8:	sub	r2, r2, #1
   274bc:	sub	r3, r3, #36	; 0x24
   274c0:	str	r2, [r4, #156]	; 0x9c
   274c4:	strh	r1, [r4, #130]	; 0x82
   274c8:	str	r3, [r4, #32]
   274cc:	mov	r0, r5
   274d0:	pop	{r4, r5, r6, pc}
   274d4:	ldr	r3, [pc, #28]	; 274f8 <flatcc_builder_end_struct@@Base+0xd4>
   274d8:	ldr	r1, [pc, #28]	; 274fc <flatcc_builder_end_struct@@Base+0xd8>
   274dc:	ldr	r0, [pc, #28]	; 27500 <flatcc_builder_end_struct@@Base+0xdc>
   274e0:	add	r3, pc, r3
   274e4:	mov	r2, #872	; 0x368
   274e8:	add	r3, r3, #296	; 0x128
   274ec:	add	r1, pc, r1
   274f0:	add	r0, pc, r0
   274f4:	bl	14610 <__assert_fail@plt>
   274f8:	andeq	sl, r1, r4, asr r8
   274fc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   27500:	strheq	fp, [r1], -r8

00027504 <flatcc_builder_extend_vector@@Base>:
   27504:	ldr	r2, [r0, #32]
   27508:	push	{r4, r5, r6, lr}
   2750c:	ldr	r3, [r2, #20]
   27510:	ldr	r4, [r2, #24]
   27514:	add	ip, r1, r3
   27518:	cmp	r3, ip
   2751c:	movls	r3, #0
   27520:	movhi	r3, #1
   27524:	cmp	r4, ip
   27528:	movcs	r4, r3
   2752c:	orrcc	r4, r3, #1
   27530:	cmp	r4, #0
   27534:	bne	27584 <flatcc_builder_extend_vector@@Base+0x80>
   27538:	ldr	lr, [r2, #16]
   2753c:	str	ip, [r2, #20]
   27540:	ldr	r6, [r0, #20]
   27544:	ldr	r3, [r0, #24]
   27548:	mla	r1, lr, r1, r6
   2754c:	mov	r5, r0
   27550:	cmp	r1, r3
   27554:	str	r1, [r0, #20]
   27558:	bcs	27568 <flatcc_builder_extend_vector@@Base+0x64>
   2755c:	ldr	r0, [r5, #16]
   27560:	add	r0, r0, r6
   27564:	pop	{r4, r5, r6, pc}
   27568:	add	r1, r1, #1
   2756c:	mvn	r2, #3
   27570:	bl	26190 <union_vector_tests@@Base+0x180>
   27574:	cmp	r0, #0
   27578:	beq	2755c <flatcc_builder_extend_vector@@Base+0x58>
   2757c:	mov	r0, r4
   27580:	pop	{r4, r5, r6, pc}
   27584:	bl	14848 <__assert_fail@plt+0x238>

00027588 <flatcc_builder_vector_push@@Base>:
   27588:	ldr	r3, [r0, #32]
   2758c:	push	{r4, r5, r6, r7, r8, lr}
   27590:	ldrh	r2, [r3, #14]
   27594:	cmp	r2, #4
   27598:	bne	27640 <flatcc_builder_vector_push@@Base+0xb8>
   2759c:	mov	r6, r1
   275a0:	ldr	r2, [r3, #20]
   275a4:	ldr	r1, [r3, #24]
   275a8:	cmp	r2, r1
   275ac:	bhi	2761c <flatcc_builder_vector_push@@Base+0x94>
   275b0:	add	r2, r2, #1
   275b4:	str	r2, [r3, #20]
   275b8:	ldr	r7, [r3, #16]
   275bc:	ldr	r5, [r0, #20]
   275c0:	ldr	r3, [r0, #24]
   275c4:	add	r1, r7, r5
   275c8:	cmp	r1, r3
   275cc:	mov	r4, r0
   275d0:	str	r1, [r0, #20]
   275d4:	bcs	27600 <flatcc_builder_vector_push@@Base+0x78>
   275d8:	ldr	r3, [r4, #16]
   275dc:	adds	r3, r3, r5
   275e0:	beq	275f8 <flatcc_builder_vector_push@@Base+0x70>
   275e4:	mov	r0, r3
   275e8:	mov	r2, r7
   275ec:	mov	r1, r6
   275f0:	bl	14544 <memcpy@plt>
   275f4:	mov	r3, r0
   275f8:	mov	r0, r3
   275fc:	pop	{r4, r5, r6, r7, r8, pc}
   27600:	add	r1, r1, #1
   27604:	mvn	r2, #3
   27608:	bl	26190 <union_vector_tests@@Base+0x180>
   2760c:	cmp	r0, #0
   27610:	beq	275d8 <flatcc_builder_vector_push@@Base+0x50>
   27614:	mov	r3, #0
   27618:	b	275f8 <flatcc_builder_vector_push@@Base+0x70>
   2761c:	ldr	r3, [pc, #64]	; 27664 <flatcc_builder_vector_push@@Base+0xdc>
   27620:	ldr	r1, [pc, #64]	; 27668 <flatcc_builder_vector_push@@Base+0xe0>
   27624:	ldr	r0, [pc, #64]	; 2766c <flatcc_builder_vector_push@@Base+0xe4>
   27628:	add	r3, pc, r3
   2762c:	mov	r2, #908	; 0x38c
   27630:	add	r3, r3, #324	; 0x144
   27634:	add	r1, pc, r1
   27638:	add	r0, pc, r0
   2763c:	bl	14610 <__assert_fail@plt>
   27640:	ldr	r3, [pc, #40]	; 27670 <flatcc_builder_vector_push@@Base+0xe8>
   27644:	ldr	r1, [pc, #40]	; 27674 <flatcc_builder_vector_push@@Base+0xec>
   27648:	ldr	r0, [pc, #40]	; 27678 <flatcc_builder_vector_push@@Base+0xf0>
   2764c:	add	r3, pc, r3
   27650:	ldr	r2, [pc, #36]	; 2767c <flatcc_builder_vector_push@@Base+0xf4>
   27654:	add	r3, r3, #324	; 0x144
   27658:	add	r1, pc, r1
   2765c:	add	r0, pc, r0
   27660:	bl	14610 <__assert_fail@plt>
   27664:	andeq	sl, r1, ip, lsl #14
   27668:	andeq	sl, r1, r0, asr lr
   2766c:	andeq	sl, r1, r8, asr #31
   27670:	andeq	sl, r1, r8, ror #13
   27674:	andeq	sl, r1, ip, lsr #28
   27678:	andeq	sl, r1, r8, ror pc
   2767c:	andeq	r0, r0, fp, lsl #7

00027680 <flatcc_builder_append_vector@@Base>:
   27680:	push	{r4, r5, r6, r7, r8, lr}
   27684:	mov	r7, r1
   27688:	ldr	r1, [r0, #32]
   2768c:	ldrh	r3, [r1, #14]
   27690:	cmp	r3, #4
   27694:	bne	27734 <flatcc_builder_append_vector@@Base+0xb4>
   27698:	ldr	r3, [r1, #20]
   2769c:	ldr	r4, [r1, #24]
   276a0:	add	ip, r2, r3
   276a4:	cmp	r3, ip
   276a8:	movls	r3, #0
   276ac:	movhi	r3, #1
   276b0:	cmp	r4, ip
   276b4:	movcs	r4, r3
   276b8:	orrcc	r4, r3, #1
   276bc:	cmp	r4, #0
   276c0:	bne	27730 <flatcc_builder_append_vector@@Base+0xb0>
   276c4:	ldr	r6, [r1, #16]
   276c8:	str	ip, [r1, #20]
   276cc:	ldr	r8, [r0, #20]
   276d0:	mul	r6, r6, r2
   276d4:	ldr	r3, [r0, #24]
   276d8:	add	r1, r6, r8
   276dc:	cmp	r1, r3
   276e0:	mov	r5, r0
   276e4:	str	r1, [r0, #20]
   276e8:	bcs	27714 <flatcc_builder_append_vector@@Base+0x94>
   276ec:	ldr	r3, [r5, #16]
   276f0:	adds	r3, r3, r8
   276f4:	beq	2770c <flatcc_builder_append_vector@@Base+0x8c>
   276f8:	mov	r0, r3
   276fc:	mov	r2, r6
   27700:	mov	r1, r7
   27704:	bl	14544 <memcpy@plt>
   27708:	mov	r3, r0
   2770c:	mov	r0, r3
   27710:	pop	{r4, r5, r6, r7, r8, pc}
   27714:	add	r1, r1, #1
   27718:	mvn	r2, #3
   2771c:	bl	26190 <union_vector_tests@@Base+0x180>
   27720:	cmp	r0, #0
   27724:	beq	276ec <flatcc_builder_append_vector@@Base+0x6c>
   27728:	mov	r3, r4
   2772c:	b	2770c <flatcc_builder_append_vector@@Base+0x8c>
   27730:	bl	14848 <__assert_fail@plt+0x238>
   27734:	ldr	r3, [pc, #28]	; 27758 <flatcc_builder_append_vector@@Base+0xd8>
   27738:	ldr	r1, [pc, #28]	; 2775c <flatcc_builder_append_vector@@Base+0xdc>
   2773c:	ldr	r0, [pc, #28]	; 27760 <flatcc_builder_append_vector@@Base+0xe0>
   27740:	add	r3, pc, r3
   27744:	ldr	r2, [pc, #24]	; 27764 <flatcc_builder_append_vector@@Base+0xe4>
   27748:	add	r3, r3, #352	; 0x160
   2774c:	add	r1, pc, r1
   27750:	add	r0, pc, r0
   27754:	bl	14610 <__assert_fail@plt>
   27758:	strdeq	sl, [r1], -r4
   2775c:	andeq	sl, r1, r8, lsr sp
   27760:	andeq	sl, r1, r4, lsl #29
   27764:	muleq	r0, r3, r3

00027768 <flatcc_builder_extend_offset_vector@@Base>:
   27768:	ldr	ip, [r0, #32]
   2776c:	push	{r4, r5, r6, lr}
   27770:	ldr	r3, [ip, #20]
   27774:	adds	r2, r1, r3
   27778:	movcs	r3, #1
   2777c:	movcc	r3, #0
   27780:	cmn	r2, #-1073741823	; 0xc0000001
   27784:	movls	r4, #0
   27788:	movhi	r4, #1
   2778c:	orrs	r4, r3, r4
   27790:	bne	277dc <flatcc_builder_extend_offset_vector@@Base+0x74>
   27794:	str	r2, [ip, #20]
   27798:	ldr	r6, [r0, #20]
   2779c:	ldr	r3, [r0, #24]
   277a0:	add	r1, r6, r1, lsl #2
   277a4:	cmp	r1, r3
   277a8:	mov	r5, r0
   277ac:	str	r1, [r0, #20]
   277b0:	bcs	277c0 <flatcc_builder_extend_offset_vector@@Base+0x58>
   277b4:	ldr	r0, [r5, #16]
   277b8:	add	r0, r0, r6
   277bc:	pop	{r4, r5, r6, pc}
   277c0:	add	r1, r1, #1
   277c4:	mvn	r2, #3
   277c8:	bl	26190 <union_vector_tests@@Base+0x180>
   277cc:	cmp	r0, #0
   277d0:	beq	277b4 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   277d4:	mov	r0, r4
   277d8:	pop	{r4, r5, r6, pc}
   277dc:	bl	14848 <__assert_fail@plt+0x238>

000277e0 <flatcc_builder_offset_vector_push@@Base>:
   277e0:	ldr	r2, [r0, #32]
   277e4:	push	{r4, r5, r6, lr}
   277e8:	ldrh	r3, [r2, #14]
   277ec:	cmp	r3, #5
   277f0:	bne	27858 <flatcc_builder_offset_vector_push@@Base+0x78>
   277f4:	ldr	r3, [r2, #20]
   277f8:	cmn	r3, #-1073741823	; 0xc0000001
   277fc:	beq	27850 <flatcc_builder_offset_vector_push@@Base+0x70>
   27800:	add	r3, r3, #1
   27804:	str	r3, [r2, #20]
   27808:	ldr	r5, [r0, #20]
   2780c:	ldr	r2, [r0, #24]
   27810:	add	r3, r5, #4
   27814:	cmp	r3, r2
   27818:	mov	r4, r0
   2781c:	mov	r6, r1
   27820:	str	r3, [r0, #20]
   27824:	bcs	2783c <flatcc_builder_offset_vector_push@@Base+0x5c>
   27828:	ldr	r3, [r4, #16]
   2782c:	adds	r0, r3, r5
   27830:	beq	2787c <flatcc_builder_offset_vector_push@@Base+0x9c>
   27834:	str	r6, [r3, r5]
   27838:	pop	{r4, r5, r6, pc}
   2783c:	mvn	r2, #3
   27840:	add	r1, r5, #5
   27844:	bl	26190 <union_vector_tests@@Base+0x180>
   27848:	cmp	r0, #0
   2784c:	beq	27828 <flatcc_builder_offset_vector_push@@Base+0x48>
   27850:	mov	r0, #0
   27854:	pop	{r4, r5, r6, pc}
   27858:	ldr	r3, [pc, #32]	; 27880 <flatcc_builder_offset_vector_push@@Base+0xa0>
   2785c:	ldr	r1, [pc, #32]	; 27884 <flatcc_builder_offset_vector_push@@Base+0xa4>
   27860:	ldr	r0, [pc, #32]	; 27888 <flatcc_builder_offset_vector_push@@Base+0xa8>
   27864:	add	r3, pc, r3
   27868:	ldr	r2, [pc, #28]	; 2788c <flatcc_builder_offset_vector_push@@Base+0xac>
   2786c:	add	r3, r3, #384	; 0x180
   27870:	add	r1, pc, r1
   27874:	add	r0, pc, r0
   27878:	bl	14610 <__assert_fail@plt>
   2787c:	pop	{r4, r5, r6, pc}
   27880:	ldrdeq	sl, [r1], -r0
   27884:	andeq	sl, r1, r4, lsl ip
   27888:	andeq	sl, r1, ip, asr #27
   2788c:	andeq	r0, r0, r6, lsr #7

00027890 <flatcc_builder_append_offset_vector@@Base>:
   27890:	ldr	ip, [r0, #32]
   27894:	push	{r4, r5, r6, r7, r8, lr}
   27898:	ldrh	r3, [ip, #14]
   2789c:	cmp	r3, #5
   278a0:	bne	27938 <flatcc_builder_append_offset_vector@@Base+0xa8>
   278a4:	mov	r6, r1
   278a8:	ldr	r1, [ip, #20]
   278ac:	adds	r1, r2, r1
   278b0:	movcs	lr, #1
   278b4:	movcc	lr, #0
   278b8:	cmn	r1, #-1073741823	; 0xc0000001
   278bc:	movls	r3, #0
   278c0:	movhi	r3, #1
   278c4:	orrs	r8, lr, r3
   278c8:	bne	27934 <flatcc_builder_append_offset_vector@@Base+0xa4>
   278cc:	str	r1, [ip, #20]
   278d0:	ldr	r7, [r0, #20]
   278d4:	lsl	r4, r2, #2
   278d8:	ldr	r3, [r0, #24]
   278dc:	add	r1, r4, r7
   278e0:	cmp	r1, r3
   278e4:	mov	r5, r0
   278e8:	str	r1, [r0, #20]
   278ec:	bcs	27918 <flatcc_builder_append_offset_vector@@Base+0x88>
   278f0:	ldr	r3, [r5, #16]
   278f4:	adds	r3, r3, r7
   278f8:	beq	27910 <flatcc_builder_append_offset_vector@@Base+0x80>
   278fc:	mov	r0, r3
   27900:	mov	r2, r4
   27904:	mov	r1, r6
   27908:	bl	14544 <memcpy@plt>
   2790c:	mov	r3, r0
   27910:	mov	r0, r3
   27914:	pop	{r4, r5, r6, r7, r8, pc}
   27918:	add	r1, r1, #1
   2791c:	mvn	r2, #3
   27920:	bl	26190 <union_vector_tests@@Base+0x180>
   27924:	cmp	r0, #0
   27928:	beq	278f0 <flatcc_builder_append_offset_vector@@Base+0x60>
   2792c:	mov	r3, r8
   27930:	b	27910 <flatcc_builder_append_offset_vector@@Base+0x80>
   27934:	bl	14848 <__assert_fail@plt+0x238>
   27938:	ldr	r3, [pc, #28]	; 2795c <flatcc_builder_append_offset_vector@@Base+0xcc>
   2793c:	ldr	r1, [pc, #28]	; 27960 <flatcc_builder_append_offset_vector@@Base+0xd0>
   27940:	ldr	r0, [pc, #28]	; 27964 <flatcc_builder_append_offset_vector@@Base+0xd4>
   27944:	add	r3, pc, r3
   27948:	mov	r2, #948	; 0x3b4
   2794c:	add	r3, r3, #420	; 0x1a4
   27950:	add	r1, pc, r1
   27954:	add	r0, pc, r0
   27958:	bl	14610 <__assert_fail@plt>
   2795c:	strdeq	sl, [r1], -r0
   27960:	andeq	sl, r1, r4, lsr fp
   27964:	andeq	sl, r1, ip, ror #25

00027968 <flatcc_builder_extend_string@@Base>:
   27968:	ldr	r2, [r0, #32]
   2796c:	push	{r4, r5, r6, lr}
   27970:	ldrh	r3, [r2, #14]
   27974:	cmp	r3, #6
   27978:	bne	279d4 <flatcc_builder_extend_string@@Base+0x6c>
   2797c:	ldr	r3, [r2, #20]
   27980:	adds	r3, r1, r3
   27984:	bcs	279d0 <flatcc_builder_extend_string@@Base+0x68>
   27988:	str	r3, [r2, #20]
   2798c:	ldr	r5, [r0, #20]
   27990:	ldr	r3, [r0, #24]
   27994:	add	r1, r1, r5
   27998:	cmp	r1, r3
   2799c:	mov	r4, r0
   279a0:	str	r1, [r0, #20]
   279a4:	bcs	279b4 <flatcc_builder_extend_string@@Base+0x4c>
   279a8:	ldr	r0, [r4, #16]
   279ac:	add	r0, r0, r5
   279b0:	pop	{r4, r5, r6, pc}
   279b4:	add	r1, r1, #1
   279b8:	mvn	r2, #3
   279bc:	bl	26190 <union_vector_tests@@Base+0x180>
   279c0:	cmp	r0, #0
   279c4:	beq	279a8 <flatcc_builder_extend_string@@Base+0x40>
   279c8:	mov	r0, #0
   279cc:	pop	{r4, r5, r6, pc}
   279d0:	bl	14848 <__assert_fail@plt+0x238>
   279d4:	ldr	r3, [pc, #28]	; 279f8 <flatcc_builder_extend_string@@Base+0x90>
   279d8:	ldr	r1, [pc, #28]	; 279fc <flatcc_builder_extend_string@@Base+0x94>
   279dc:	ldr	r0, [pc, #28]	; 27a00 <flatcc_builder_extend_string@@Base+0x98>
   279e0:	add	r3, pc, r3
   279e4:	ldr	r2, [pc, #24]	; 27a04 <flatcc_builder_extend_string@@Base+0x9c>
   279e8:	add	r3, r3, #456	; 0x1c8
   279ec:	add	r1, pc, r1
   279f0:	add	r0, pc, r0
   279f4:	bl	14610 <__assert_fail@plt>
   279f8:	andeq	sl, r1, r4, asr r3
   279fc:	muleq	r1, r8, sl
   27a00:	andeq	sl, r1, r4, lsl #25
   27a04:			; <UNDEFINED> instruction: 0x000003bd

00027a08 <flatcc_builder_append_string@@Base>:
   27a08:	push	{r4, r5, r6, r7, r8, lr}
   27a0c:	mov	r7, r1
   27a10:	ldr	r1, [r0, #32]
   27a14:	ldrh	r3, [r1, #14]
   27a18:	cmp	r3, #6
   27a1c:	bne	27a98 <flatcc_builder_append_string@@Base+0x90>
   27a20:	ldr	r3, [r1, #20]
   27a24:	mov	r5, r2
   27a28:	adds	r3, r2, r3
   27a2c:	bcs	27a94 <flatcc_builder_append_string@@Base+0x8c>
   27a30:	str	r3, [r1, #20]
   27a34:	ldr	r6, [r0, #20]
   27a38:	ldr	r3, [r0, #24]
   27a3c:	add	r1, r2, r6
   27a40:	cmp	r1, r3
   27a44:	mov	r4, r0
   27a48:	str	r1, [r0, #20]
   27a4c:	bcs	27a78 <flatcc_builder_append_string@@Base+0x70>
   27a50:	ldr	r3, [r4, #16]
   27a54:	adds	r3, r3, r6
   27a58:	beq	27a70 <flatcc_builder_append_string@@Base+0x68>
   27a5c:	mov	r0, r3
   27a60:	mov	r2, r5
   27a64:	mov	r1, r7
   27a68:	bl	14544 <memcpy@plt>
   27a6c:	mov	r3, r0
   27a70:	mov	r0, r3
   27a74:	pop	{r4, r5, r6, r7, r8, pc}
   27a78:	add	r1, r1, #1
   27a7c:	mvn	r2, #3
   27a80:	bl	26190 <union_vector_tests@@Base+0x180>
   27a84:	cmp	r0, #0
   27a88:	beq	27a50 <flatcc_builder_append_string@@Base+0x48>
   27a8c:	mov	r3, #0
   27a90:	b	27a70 <flatcc_builder_append_string@@Base+0x68>
   27a94:	bl	14848 <__assert_fail@plt+0x238>
   27a98:	ldr	r3, [pc, #28]	; 27abc <flatcc_builder_append_string@@Base+0xb4>
   27a9c:	ldr	r1, [pc, #28]	; 27ac0 <flatcc_builder_append_string@@Base+0xb8>
   27aa0:	ldr	r0, [pc, #28]	; 27ac4 <flatcc_builder_append_string@@Base+0xbc>
   27aa4:	add	r3, pc, r3
   27aa8:	ldr	r2, [pc, #24]	; 27ac8 <flatcc_builder_append_string@@Base+0xc0>
   27aac:	add	r3, r3, #488	; 0x1e8
   27ab0:	add	r1, pc, r1
   27ab4:	add	r0, pc, r0
   27ab8:	bl	14610 <__assert_fail@plt>
   27abc:	muleq	r1, r0, r2
   27ac0:	ldrdeq	sl, [r1], -r4
   27ac4:	andeq	sl, r1, r0, asr #23
   27ac8:	andeq	r0, r0, r6, asr #7

00027acc <flatcc_builder_append_string_str@@Base>:
   27acc:	push	{r4, r5, r6, lr}
   27ad0:	mov	r5, r0
   27ad4:	mov	r0, r1
   27ad8:	mov	r4, r1
   27adc:	bl	14598 <strlen@plt>
   27ae0:	mov	r1, r4
   27ae4:	mov	r2, r0
   27ae8:	mov	r0, r5
   27aec:	pop	{r4, r5, r6, lr}
   27af0:	b	27a08 <flatcc_builder_append_string@@Base>

00027af4 <flatcc_builder_append_string_strn@@Base>:
   27af4:	push	{r4, r5, r6, lr}
   27af8:	mov	r4, r1
   27afc:	mov	r6, r0
   27b00:	mov	r1, #0
   27b04:	mov	r0, r4
   27b08:	mov	r5, r2
   27b0c:	bl	145e0 <memchr@plt>
   27b10:	mov	r1, r4
   27b14:	cmp	r0, #0
   27b18:	subne	r5, r0, r4
   27b1c:	mov	r2, r5
   27b20:	mov	r0, r6
   27b24:	pop	{r4, r5, r6, lr}
   27b28:	b	27a08 <flatcc_builder_append_string@@Base>

00027b2c <flatcc_builder_truncate_vector@@Base>:
   27b2c:	ldr	r3, [r0, #32]
   27b30:	push	{r4, lr}
   27b34:	ldrh	r2, [r3, #14]
   27b38:	cmp	r2, #4
   27b3c:	bne	27b80 <flatcc_builder_truncate_vector@@Base+0x54>
   27b40:	ldr	ip, [r3, #20]
   27b44:	cmp	ip, r1
   27b48:	bcc	27ba4 <flatcc_builder_truncate_vector@@Base+0x78>
   27b4c:	ldr	r2, [r3, #16]
   27b50:	sub	ip, ip, r1
   27b54:	str	ip, [r3, #20]
   27b58:	mul	r2, r2, r1
   27b5c:	ldr	r3, [r0, #20]
   27b60:	ldr	r1, [r0, #16]
   27b64:	sub	r3, r3, r2
   27b68:	str	r3, [r0, #20]
   27b6c:	add	r0, r1, r3
   27b70:	mov	r1, #0
   27b74:	bl	145bc <memset@plt>
   27b78:	mov	r0, #0
   27b7c:	pop	{r4, pc}
   27b80:	ldr	r3, [pc, #64]	; 27bc8 <flatcc_builder_truncate_vector@@Base+0x9c>
   27b84:	ldr	r1, [pc, #64]	; 27bcc <flatcc_builder_truncate_vector@@Base+0xa0>
   27b88:	ldr	r0, [pc, #64]	; 27bd0 <flatcc_builder_truncate_vector@@Base+0xa4>
   27b8c:	add	r3, pc, r3
   27b90:	ldr	r2, [pc, #60]	; 27bd4 <flatcc_builder_truncate_vector@@Base+0xa8>
   27b94:	add	r3, r3, #520	; 0x208
   27b98:	add	r1, pc, r1
   27b9c:	add	r0, pc, r0
   27ba0:	bl	14610 <__assert_fail@plt>
   27ba4:	ldr	r3, [pc, #44]	; 27bd8 <flatcc_builder_truncate_vector@@Base+0xac>
   27ba8:	ldr	r1, [pc, #44]	; 27bdc <flatcc_builder_truncate_vector@@Base+0xb0>
   27bac:	ldr	r0, [pc, #44]	; 27be0 <flatcc_builder_truncate_vector@@Base+0xb4>
   27bb0:	add	r3, pc, r3
   27bb4:	ldr	r2, [pc, #40]	; 27be4 <flatcc_builder_truncate_vector@@Base+0xb8>
   27bb8:	add	r3, r3, #520	; 0x208
   27bbc:	add	r1, pc, r1
   27bc0:	add	r0, pc, r0
   27bc4:	bl	14610 <__assert_fail@plt>
   27bc8:	andeq	sl, r1, r8, lsr #3
   27bcc:	andeq	sl, r1, ip, ror #17
   27bd0:	andeq	sl, r1, r8, lsr sl
   27bd4:	ldrdeq	r0, [r0], -r9
   27bd8:	andeq	sl, r1, r4, lsl #3
   27bdc:	andeq	sl, r1, r8, asr #17
   27be0:	andeq	sl, r1, r0, ror #21
   27be4:	ldrdeq	r0, [r0], -sl

00027be8 <flatcc_builder_truncate_offset_vector@@Base>:
   27be8:	ldr	r3, [r0, #32]
   27bec:	push	{r4, lr}
   27bf0:	ldrh	r2, [r3, #14]
   27bf4:	cmp	r2, #5
   27bf8:	bne	27c3c <flatcc_builder_truncate_offset_vector@@Base+0x54>
   27bfc:	ldr	ip, [r3, #20]
   27c00:	cmp	ip, r1
   27c04:	bcc	27c60 <flatcc_builder_truncate_offset_vector@@Base+0x78>
   27c08:	ldr	r2, [r3, #16]
   27c0c:	sub	ip, ip, r1
   27c10:	str	ip, [r3, #20]
   27c14:	mul	r2, r2, r1
   27c18:	ldr	r3, [r0, #20]
   27c1c:	ldr	r1, [r0, #16]
   27c20:	sub	r3, r3, r2
   27c24:	str	r3, [r0, #20]
   27c28:	add	r0, r1, r3
   27c2c:	mov	r1, #0
   27c30:	bl	145bc <memset@plt>
   27c34:	mov	r0, #0
   27c38:	pop	{r4, pc}
   27c3c:	ldr	r3, [pc, #64]	; 27c84 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   27c40:	ldr	r1, [pc, #64]	; 27c88 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   27c44:	ldr	r0, [pc, #64]	; 27c8c <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   27c48:	add	r3, pc, r3
   27c4c:	ldr	r2, [pc, #60]	; 27c90 <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   27c50:	add	r3, r3, #552	; 0x228
   27c54:	add	r1, pc, r1
   27c58:	add	r0, pc, r0
   27c5c:	bl	14610 <__assert_fail@plt>
   27c60:	ldr	r3, [pc, #44]	; 27c94 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   27c64:	ldr	r1, [pc, #44]	; 27c98 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   27c68:	ldr	r0, [pc, #44]	; 27c9c <flatcc_builder_truncate_offset_vector@@Base+0xb4>
   27c6c:	add	r3, pc, r3
   27c70:	ldr	r2, [pc, #40]	; 27ca0 <flatcc_builder_truncate_offset_vector@@Base+0xb8>
   27c74:	add	r3, r3, #552	; 0x228
   27c78:	add	r1, pc, r1
   27c7c:	add	r0, pc, r0
   27c80:	bl	14610 <__assert_fail@plt>
   27c84:	andeq	sl, r1, ip, ror #1
   27c88:	andeq	sl, r1, r0, lsr r8
   27c8c:	andeq	sl, r1, r8, ror #19
   27c90:	andeq	r0, r0, r2, ror #7
   27c94:	andeq	sl, r1, r8, asr #1
   27c98:	andeq	sl, r1, ip, lsl #16
   27c9c:	andeq	sl, r1, r8, asr #20
   27ca0:	andeq	r0, r0, r3, ror #7

00027ca4 <flatcc_builder_truncate_string@@Base>:
   27ca4:	ldr	r2, [r0, #32]
   27ca8:	push	{r4, lr}
   27cac:	ldrh	r3, [r2, #14]
   27cb0:	cmp	r3, #6
   27cb4:	bne	27cf4 <flatcc_builder_truncate_string@@Base+0x50>
   27cb8:	ldr	r3, [r2, #20]
   27cbc:	cmp	r3, r1
   27cc0:	bcc	27d18 <flatcc_builder_truncate_string@@Base+0x74>
   27cc4:	sub	r3, r3, r1
   27cc8:	str	r3, [r2, #20]
   27ccc:	ldr	r3, [r0, #20]
   27cd0:	ldr	r2, [r0, #16]
   27cd4:	sub	r3, r3, r1
   27cd8:	str	r3, [r0, #20]
   27cdc:	add	r0, r2, r3
   27ce0:	mov	r2, r1
   27ce4:	mov	r1, #0
   27ce8:	bl	145bc <memset@plt>
   27cec:	mov	r0, #0
   27cf0:	pop	{r4, pc}
   27cf4:	ldr	r3, [pc, #64]	; 27d3c <flatcc_builder_truncate_string@@Base+0x98>
   27cf8:	ldr	r1, [pc, #64]	; 27d40 <flatcc_builder_truncate_string@@Base+0x9c>
   27cfc:	ldr	r0, [pc, #64]	; 27d44 <flatcc_builder_truncate_string@@Base+0xa0>
   27d00:	add	r3, pc, r3
   27d04:	ldr	r2, [pc, #60]	; 27d48 <flatcc_builder_truncate_string@@Base+0xa4>
   27d08:	add	r3, r3, #592	; 0x250
   27d0c:	add	r1, pc, r1
   27d10:	add	r0, pc, r0
   27d14:	bl	14610 <__assert_fail@plt>
   27d18:	ldr	r3, [pc, #44]	; 27d4c <flatcc_builder_truncate_string@@Base+0xa8>
   27d1c:	ldr	r1, [pc, #44]	; 27d50 <flatcc_builder_truncate_string@@Base+0xac>
   27d20:	ldr	r0, [pc, #44]	; 27d54 <flatcc_builder_truncate_string@@Base+0xb0>
   27d24:	add	r3, pc, r3
   27d28:	mov	r2, #1004	; 0x3ec
   27d2c:	add	r3, r3, #592	; 0x250
   27d30:	add	r1, pc, r1
   27d34:	add	r0, pc, r0
   27d38:	bl	14610 <__assert_fail@plt>
   27d3c:	andeq	sl, r1, r4, lsr r0
   27d40:	andeq	sl, r1, r8, ror r7
   27d44:	andeq	sl, r1, r4, ror #18
   27d48:	andeq	r0, r0, fp, ror #7
   27d4c:	andeq	sl, r1, r0, lsl r0
   27d50:	andeq	sl, r1, r4, asr r7
   27d54:	andeq	sl, r1, ip, asr #19

00027d58 <flatcc_builder_start_vector@@Base>:
   27d58:	cmp	r2, #4
   27d5c:	push	{r4, r5, r6, lr}
   27d60:	mov	r6, r1
   27d64:	movcs	r1, r2
   27d68:	movcc	r1, #4
   27d6c:	mov	r5, r3
   27d70:	mov	r4, r0
   27d74:	bl	26440 <flatcc_builder_default_alloc@@Base+0x23c>
   27d78:	cmp	r0, #0
   27d7c:	bne	27dc8 <flatcc_builder_start_vector@@Base+0x70>
   27d80:	ldr	r2, [r4, #32]
   27d84:	mov	lr, #4
   27d88:	str	r6, [r2, #16]
   27d8c:	str	r0, [r2, #20]
   27d90:	str	r5, [r2, #24]
   27d94:	ldr	ip, [r4, #28]
   27d98:	ldr	r3, [r4, #64]	; 0x40
   27d9c:	ldr	r1, [r4, #60]	; 0x3c
   27da0:	sub	r3, r3, ip
   27da4:	cmn	r3, #4
   27da8:	mvnhi	r3, #3
   27dac:	strh	lr, [r2, #14]
   27db0:	add	r1, r1, ip
   27db4:	str	r3, [r4, #24]
   27db8:	mvn	r3, #3
   27dbc:	str	r1, [r4, #16]
   27dc0:	str	r3, [r2, #4]
   27dc4:	pop	{r4, r5, r6, pc}
   27dc8:	mvn	r0, #0
   27dcc:	pop	{r4, r5, r6, pc}

00027dd0 <flatcc_builder_start_offset_vector@@Base>:
   27dd0:	push	{r4, lr}
   27dd4:	mov	r1, #4
   27dd8:	mov	r4, r0
   27ddc:	bl	26440 <flatcc_builder_default_alloc@@Base+0x23c>
   27de0:	cmp	r0, #0
   27de4:	bne	27e30 <flatcc_builder_start_offset_vector@@Base+0x60>
   27de8:	ldr	r3, [r4, #32]
   27dec:	mov	r2, #4
   27df0:	mov	lr, #5
   27df4:	str	r0, [r3, #20]
   27df8:	str	r2, [r3, #16]
   27dfc:	ldr	ip, [r4, #28]
   27e00:	ldr	r2, [r4, #64]	; 0x40
   27e04:	ldr	r1, [r4, #60]	; 0x3c
   27e08:	sub	r2, r2, ip
   27e0c:	cmn	r2, #4
   27e10:	mvnhi	r2, #3
   27e14:	strh	lr, [r3, #14]
   27e18:	add	r1, r1, ip
   27e1c:	str	r2, [r4, #24]
   27e20:	mvn	r2, #3
   27e24:	str	r1, [r4, #16]
   27e28:	str	r2, [r3, #4]
   27e2c:	pop	{r4, pc}
   27e30:	mvn	r0, #0
   27e34:	pop	{r4, pc}

00027e38 <flatcc_builder_start_string@@Base>:
   27e38:	push	{r4, lr}
   27e3c:	mov	r1, #1
   27e40:	mov	r4, r0
   27e44:	bl	26440 <flatcc_builder_default_alloc@@Base+0x23c>
   27e48:	cmp	r0, #0
   27e4c:	bne	27e98 <flatcc_builder_start_string@@Base+0x60>
   27e50:	ldr	r3, [r4, #32]
   27e54:	mov	r2, #1
   27e58:	mov	lr, #6
   27e5c:	str	r0, [r3, #20]
   27e60:	str	r2, [r3, #16]
   27e64:	ldr	ip, [r4, #28]
   27e68:	ldr	r2, [r4, #64]	; 0x40
   27e6c:	ldr	r1, [r4, #60]	; 0x3c
   27e70:	sub	r2, r2, ip
   27e74:	cmn	r2, #4
   27e78:	mvnhi	r2, #3
   27e7c:	strh	lr, [r3, #14]
   27e80:	add	r1, r1, ip
   27e84:	str	r2, [r4, #24]
   27e88:	mvn	r2, #3
   27e8c:	str	r1, [r4, #16]
   27e90:	str	r2, [r3, #4]
   27e94:	pop	{r4, pc}
   27e98:	mvn	r0, #0
   27e9c:	pop	{r4, pc}

00027ea0 <flatcc_builder_reserve_table@@Base>:
   27ea0:	cmp	r1, #0
   27ea4:	push	{r4, r5, r6, r7, lr}
   27ea8:	sub	sp, sp, #12
   27eac:	blt	27f84 <flatcc_builder_reserve_table@@Base+0xe4>
   27eb0:	ldr	r2, [r0, #32]
   27eb4:	add	r1, r1, #2
   27eb8:	mov	r5, r0
   27ebc:	ldrh	r6, [r2, #28]
   27ec0:	ldr	r3, [r2, #16]
   27ec4:	ldr	r0, [r0, #56]	; 0x38
   27ec8:	lsl	r4, r1, #1
   27ecc:	add	r6, r3, r6, lsl #1
   27ed0:	add	r2, r6, r4
   27ed4:	cmp	r2, r0
   27ed8:	bhi	27f34 <flatcc_builder_reserve_table@@Base+0x94>
   27edc:	ldr	r3, [r5, #52]	; 0x34
   27ee0:	adds	r3, r3, r6
   27ee4:	streq	r3, [r5, #4]
   27ee8:	mvneq	r0, #0
   27eec:	beq	27f2c <flatcc_builder_reserve_table@@Base+0x8c>
   27ef0:	ldr	r2, [r5, #32]
   27ef4:	add	r3, r3, #4
   27ef8:	str	r3, [r5, #4]
   27efc:	ldr	r6, [r2, #20]
   27f00:	ldr	r3, [r5, #80]	; 0x50
   27f04:	add	r2, r4, r6
   27f08:	sub	r2, r2, #3
   27f0c:	cmp	r2, r3
   27f10:	bhi	27f5c <flatcc_builder_reserve_table@@Base+0xbc>
   27f14:	ldr	r3, [r5, #76]	; 0x4c
   27f18:	add	r3, r3, r6
   27f1c:	cmp	r3, #0
   27f20:	movne	r0, #0
   27f24:	mvneq	r0, #0
   27f28:	str	r3, [r5]
   27f2c:	add	sp, sp, #12
   27f30:	pop	{r4, r5, r6, r7, pc}
   27f34:	mov	r3, #0
   27f38:	ldr	r0, [r5, #40]	; 0x28
   27f3c:	add	r1, r5, #52	; 0x34
   27f40:	str	r3, [sp]
   27f44:	mov	r3, #1
   27f48:	ldr	r7, [r5, #48]	; 0x30
   27f4c:	blx	r7
   27f50:	cmp	r0, #0
   27f54:	beq	27edc <flatcc_builder_reserve_table@@Base+0x3c>
   27f58:	bl	147a8 <__assert_fail@plt+0x198>
   27f5c:	mov	r3, #3
   27f60:	ldr	r0, [r5, #40]	; 0x28
   27f64:	add	r1, r5, #76	; 0x4c
   27f68:	str	r3, [sp]
   27f6c:	mov	r3, #0
   27f70:	ldr	r4, [r5, #48]	; 0x30
   27f74:	blx	r4
   27f78:	cmp	r0, #0
   27f7c:	beq	27f14 <flatcc_builder_reserve_table@@Base+0x74>
   27f80:	b	27f58 <flatcc_builder_reserve_table@@Base+0xb8>
   27f84:	ldr	r3, [pc, #28]	; 27fa8 <flatcc_builder_reserve_table@@Base+0x108>
   27f88:	ldr	r1, [pc, #28]	; 27fac <flatcc_builder_reserve_table@@Base+0x10c>
   27f8c:	ldr	r0, [pc, #28]	; 27fb0 <flatcc_builder_reserve_table@@Base+0x110>
   27f90:	add	r3, pc, r3
   27f94:	ldr	r2, [pc, #24]	; 27fb4 <flatcc_builder_reserve_table@@Base+0x114>
   27f98:	add	r3, r3, #624	; 0x270
   27f9c:	add	r1, pc, r1
   27fa0:	add	r0, pc, r0
   27fa4:	bl	14610 <__assert_fail@plt>
   27fa8:	andeq	r9, r1, r4, lsr #27
   27fac:	andeq	sl, r1, r8, ror #9
   27fb0:	andeq	sl, r1, r4, lsl #15
   27fb4:	andeq	r0, r0, r9, lsr #8

00027fb8 <flatcc_builder_start_table@@Base>:
   27fb8:	push	{r4, r5, r6, r7, r8, lr}
   27fbc:	mov	r5, r1
   27fc0:	sub	sp, sp, #8
   27fc4:	mov	r1, #4
   27fc8:	mov	r4, r0
   27fcc:	bl	26440 <flatcc_builder_default_alloc@@Base+0x23c>
   27fd0:	subs	r7, r0, #0
   27fd4:	bne	2810c <flatcc_builder_start_table@@Base+0x154>
   27fd8:	ldr	r3, [r4, #52]	; 0x34
   27fdc:	ldr	r6, [r4, #4]
   27fe0:	ldr	r0, [r4, #32]
   27fe4:	sub	r6, r6, r3
   27fe8:	add	r5, r5, #2
   27fec:	str	r6, [r0, #16]
   27ff0:	ldr	r1, [r4, #76]	; 0x4c
   27ff4:	ldr	r2, [r4]
   27ff8:	lsl	r5, r5, #1
   27ffc:	sub	r2, r2, r1
   28000:	str	r2, [r0, #20]
   28004:	ldr	r2, [r4, #12]
   28008:	ldr	lr, [pc, #268]	; 2811c <flatcc_builder_start_table@@Base+0x164>
   2800c:	str	r2, [r0, #24]
   28010:	ldrh	r2, [r4, #8]
   28014:	mov	r1, #3
   28018:	strh	r2, [r0, #28]
   2801c:	add	r6, r6, r2, lsl #1
   28020:	ldr	ip, [r4, #56]	; 0x38
   28024:	add	r2, r6, r5
   28028:	cmp	r2, ip
   2802c:	strh	r7, [r4, #8]
   28030:	str	lr, [r4, #12]
   28034:	strh	r1, [r0, #14]
   28038:	bhi	280bc <flatcc_builder_start_table@@Base+0x104>
   2803c:	adds	r6, r3, r6
   28040:	streq	r6, [r4, #4]
   28044:	beq	2810c <flatcc_builder_start_table@@Base+0x154>
   28048:	ldr	r3, [r4, #32]
   2804c:	add	r6, r6, #4
   28050:	str	r6, [r4, #4]
   28054:	ldr	r6, [r3, #20]
   28058:	sub	r2, r5, #3
   2805c:	ldr	r3, [r4, #80]	; 0x50
   28060:	add	r2, r2, r6
   28064:	cmp	r2, r3
   28068:	bhi	280e4 <flatcc_builder_start_table@@Base+0x12c>
   2806c:	ldr	r3, [r4, #76]	; 0x4c
   28070:	add	r3, r3, r6
   28074:	cmp	r3, #0
   28078:	str	r3, [r4]
   2807c:	beq	2810c <flatcc_builder_start_table@@Base+0x154>
   28080:	ldr	r0, [r4, #28]
   28084:	ldr	r3, [r4, #64]	; 0x40
   28088:	ldr	r2, [pc, #144]	; 28120 <flatcc_builder_start_table@@Base+0x168>
   2808c:	sub	r3, r3, r0
   28090:	ldr	r1, [r4, #60]	; 0x3c
   28094:	ldr	ip, [r4, #32]
   28098:	cmp	r3, r2
   2809c:	add	r1, r1, r0
   280a0:	movcs	r3, r2
   280a4:	str	r1, [r4, #16]
   280a8:	str	r3, [r4, #24]
   280ac:	mov	r0, r7
   280b0:	str	r2, [ip, #4]
   280b4:	add	sp, sp, #8
   280b8:	pop	{r4, r5, r6, r7, r8, pc}
   280bc:	ldr	r0, [r4, #40]	; 0x28
   280c0:	mov	r3, #1
   280c4:	str	r7, [sp]
   280c8:	add	r1, r4, #52	; 0x34
   280cc:	ldr	r8, [r4, #48]	; 0x30
   280d0:	blx	r8
   280d4:	cmp	r0, #0
   280d8:	bne	28108 <flatcc_builder_start_table@@Base+0x150>
   280dc:	ldr	r3, [r4, #52]	; 0x34
   280e0:	b	2803c <flatcc_builder_start_table@@Base+0x84>
   280e4:	mov	r3, #3
   280e8:	ldr	r0, [r4, #40]	; 0x28
   280ec:	add	r1, r4, #76	; 0x4c
   280f0:	str	r3, [sp]
   280f4:	mov	r3, #0
   280f8:	ldr	r5, [r4, #48]	; 0x30
   280fc:	blx	r5
   28100:	cmp	r0, #0
   28104:	beq	2806c <flatcc_builder_start_table@@Base+0xb4>
   28108:	bl	147a8 <__assert_fail@plt+0x198>
   2810c:	mvn	r7, #0
   28110:	mov	r0, r7
   28114:	add	sp, sp, #8
   28118:	pop	{r4, r5, r6, r7, r8, pc}
   2811c:	svccs	0x00693b52
   28120:	strdeq	pc, [r0], -ip

00028124 <flatcc_builder_create_vtable@@Base>:
   28124:	push	{r4, r5, r6, lr}
   28128:	sub	sp, sp, #80	; 0x50
   2812c:	subs	r3, r2, #0
   28130:	mov	r2, #0
   28134:	mov	r4, r0
   28138:	str	r2, [sp, #8]
   2813c:	str	r2, [sp, #12]
   28140:	beq	281b8 <flatcc_builder_create_vtable@@Base+0x94>
   28144:	ldr	r0, [r0, #152]	; 0x98
   28148:	mov	r2, #1
   2814c:	cmp	r0, #0
   28150:	str	r1, [sp, #16]
   28154:	str	r3, [sp, #8]
   28158:	str	r3, [sp, #20]
   2815c:	str	r2, [sp, #12]
   28160:	mov	r1, r3
   28164:	beq	281d4 <flatcc_builder_create_vtable@@Base+0xb0>
   28168:	ldr	r2, [r4, #136]	; 0x88
   2816c:	sub	r5, r2, r3
   28170:	cmp	r2, r5
   28174:	ble	281d0 <flatcc_builder_create_vtable@@Base+0xac>
   28178:	ldr	r0, [r4, #36]	; 0x24
   2817c:	ldr	r2, [sp, #12]
   28180:	str	r3, [sp]
   28184:	add	r1, sp, #16
   28188:	ldr	r6, [r4, #44]	; 0x2c
   2818c:	mov	r3, r5
   28190:	blx	r6
   28194:	cmp	r0, #0
   28198:	bne	28248 <flatcc_builder_create_vtable@@Base+0x124>
   2819c:	cmp	r5, #0
   281a0:	str	r5, [r4, #136]	; 0x88
   281a4:	beq	281ac <flatcc_builder_create_vtable@@Base+0x88>
   281a8:	add	r5, r5, #1
   281ac:	mov	r0, r5
   281b0:	add	sp, sp, #80	; 0x50
   281b4:	pop	{r4, r5, r6, pc}
   281b8:	ldr	r3, [r0, #152]	; 0x98
   281bc:	cmp	r3, #0
   281c0:	bne	281d0 <flatcc_builder_create_vtable@@Base+0xac>
   281c4:	ldr	r3, [r0, #180]	; 0xb4
   281c8:	cmp	r3, #0
   281cc:	beq	2823c <flatcc_builder_create_vtable@@Base+0x118>
   281d0:	bl	14810 <__assert_fail@plt+0x200>
   281d4:	ldr	r2, [r4, #180]	; 0xb4
   281d8:	cmp	r2, #0
   281dc:	bne	28168 <flatcc_builder_create_vtable@@Base+0x44>
   281e0:	ldr	r5, [r4, #140]	; 0x8c
   281e4:	add	r3, r5, r3
   281e8:	cmp	r5, r3
   281ec:	str	r3, [r4, #140]	; 0x8c
   281f0:	bgt	2826c <flatcc_builder_create_vtable@@Base+0x148>
   281f4:	ldr	r0, [r4, #36]	; 0x24
   281f8:	ldr	r2, [sp, #12]
   281fc:	str	r1, [sp]
   28200:	mov	r3, r5
   28204:	ldr	r4, [r4, #44]	; 0x2c
   28208:	add	r1, sp, #16
   2820c:	blx	r4
   28210:	cmp	r0, #0
   28214:	beq	281a8 <flatcc_builder_create_vtable@@Base+0x84>
   28218:	ldr	r3, [pc, #80]	; 28270 <flatcc_builder_create_vtable@@Base+0x14c>
   2821c:	ldr	r1, [pc, #80]	; 28274 <flatcc_builder_create_vtable@@Base+0x150>
   28220:	ldr	r0, [pc, #80]	; 28278 <flatcc_builder_create_vtable@@Base+0x154>
   28224:	add	r3, pc, r3
   28228:	ldr	r2, [pc, #76]	; 2827c <flatcc_builder_create_vtable@@Base+0x158>
   2822c:	add	r3, r3, #16
   28230:	add	r1, pc, r1
   28234:	add	r0, pc, r0
   28238:	bl	14610 <__assert_fail@plt>
   2823c:	ldr	r5, [r4, #140]	; 0x8c
   28240:	mov	r1, r3
   28244:	b	281f4 <flatcc_builder_create_vtable@@Base+0xd0>
   28248:	ldr	r3, [pc, #48]	; 28280 <flatcc_builder_create_vtable@@Base+0x15c>
   2824c:	ldr	r1, [pc, #48]	; 28284 <flatcc_builder_create_vtable@@Base+0x160>
   28250:	ldr	r0, [pc, #48]	; 28288 <flatcc_builder_create_vtable@@Base+0x164>
   28254:	add	r3, pc, r3
   28258:	ldr	r2, [pc, #44]	; 2828c <flatcc_builder_create_vtable@@Base+0x168>
   2825c:	add	r3, r3, #28
   28260:	add	r1, pc, r1
   28264:	add	r0, pc, r0
   28268:	bl	14610 <__assert_fail@plt>
   2826c:	bl	147d8 <__assert_fail@plt+0x1c8>
   28270:	andeq	r9, r1, r0, lsl fp
   28274:	andeq	sl, r1, r4, asr r2
   28278:	ldrdeq	sl, [r1], -r8
   2827c:	andeq	r0, r0, r5, lsr #5
   28280:	andeq	r9, r1, r0, ror #21
   28284:	andeq	sl, r1, r4, lsr #4
   28288:	andeq	sl, r1, r8, lsr #5
   2828c:	andeq	r0, r0, fp, lsl #5

00028290 <flatcc_builder_create_cached_vtable@@Base>:
   28290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28294:	sub	sp, sp, #28
   28298:	ldr	r4, [r0, #116]	; 0x74
   2829c:	mov	sl, r3
   282a0:	cmp	r4, #0
   282a4:	mov	r8, r0
   282a8:	str	r1, [sp, #8]
   282ac:	mov	r7, r2
   282b0:	rsbne	r3, r4, #32
   282b4:	beq	2840c <flatcc_builder_create_cached_vtable@@Base+0x17c>
   282b8:	lsr	sl, sl, r3
   282bc:	ldr	r3, [r8, #92]	; 0x5c
   282c0:	adds	r2, r3, sl, lsl #2
   282c4:	str	r3, [sp, #16]
   282c8:	str	r2, [sp, #20]
   282cc:	beq	28400 <flatcc_builder_create_cached_vtable@@Base+0x170>
   282d0:	ldr	r5, [r3, sl, lsl #2]
   282d4:	cmp	r5, #0
   282d8:	beq	284fc <flatcc_builder_create_cached_vtable@@Base+0x26c>
   282dc:	mov	r3, #0
   282e0:	ldr	fp, [r8, #100]	; 0x64
   282e4:	ldr	r6, [r8, #68]	; 0x44
   282e8:	mov	r9, r2
   282ec:	str	r3, [sp, #12]
   282f0:	b	28304 <flatcc_builder_create_cached_vtable@@Base+0x74>
   282f4:	ldr	r5, [r4, #12]
   282f8:	add	r9, r4, #12
   282fc:	cmp	r5, #0
   28300:	beq	28354 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   28304:	add	r4, fp, r5
   28308:	ldr	r2, [r4, #8]
   2830c:	add	r1, r6, r2
   28310:	ldrh	r2, [r6, r2]
   28314:	cmp	r2, r7
   28318:	bne	282f4 <flatcc_builder_create_cached_vtable@@Base+0x64>
   2831c:	mov	r2, r7
   28320:	ldr	r0, [sp, #8]
   28324:	bl	14550 <memcmp@plt>
   28328:	cmp	r0, #0
   2832c:	bne	282f4 <flatcc_builder_create_cached_vtable@@Base+0x64>
   28330:	ldr	r1, [r4, #4]
   28334:	ldr	r2, [r8, #152]	; 0x98
   28338:	cmp	r1, r2
   2833c:	beq	283d0 <flatcc_builder_create_cached_vtable@@Base+0x140>
   28340:	ldr	r5, [r4, #12]
   28344:	add	r9, r4, #12
   28348:	cmp	r5, #0
   2834c:	str	r4, [sp, #12]
   28350:	bne	28304 <flatcc_builder_create_cached_vtable@@Base+0x74>
   28354:	ldr	r4, [r8, #124]	; 0x7c
   28358:	ldr	r3, [r8, #104]	; 0x68
   2835c:	add	r2, r4, #16
   28360:	cmp	r2, r3
   28364:	bhi	284d4 <flatcc_builder_create_cached_vtable@@Base+0x244>
   28368:	ldr	r5, [r8, #100]	; 0x64
   2836c:	adds	r6, r5, r4
   28370:	beq	28400 <flatcc_builder_create_cached_vtable@@Base+0x170>
   28374:	ldr	r3, [r8, #124]	; 0x7c
   28378:	ldr	r0, [sp, #16]
   2837c:	ldr	r2, [r8, #152]	; 0x98
   28380:	add	r1, r3, #16
   28384:	str	r1, [r8, #124]	; 0x7c
   28388:	str	r2, [r6, #4]
   2838c:	ldr	r1, [r0, sl, lsl #2]
   28390:	mov	r2, r7
   28394:	str	r1, [r6, #12]
   28398:	str	r3, [r0, sl, lsl #2]
   2839c:	ldr	r1, [sp, #8]
   283a0:	mov	r0, r8
   283a4:	bl	28124 <flatcc_builder_create_vtable@@Base>
   283a8:	cmp	r0, #0
   283ac:	str	r0, [r5, r4]
   283b0:	beq	28400 <flatcc_builder_create_cached_vtable@@Base+0x170>
   283b4:	ldr	r3, [sp, #12]
   283b8:	cmp	r3, #0
   283bc:	beq	28504 <flatcc_builder_create_cached_vtable@@Base+0x274>
   283c0:	ldr	r3, [r3, #8]
   283c4:	str	r3, [r6, #8]
   283c8:	add	sp, sp, #28
   283cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   283d0:	ldr	r3, [sp, #20]
   283d4:	cmp	r3, r9
   283d8:	beq	283f4 <flatcc_builder_create_cached_vtable@@Base+0x164>
   283dc:	ldr	r2, [sp, #16]
   283e0:	ldr	r3, [r4, #12]
   283e4:	str	r3, [r9]
   283e8:	ldr	r3, [r2, sl, lsl #2]
   283ec:	str	r3, [r4, #12]
   283f0:	str	r5, [r2, sl, lsl #2]
   283f4:	ldr	r0, [r4]
   283f8:	add	sp, sp, #28
   283fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28400:	mov	r0, #0
   28404:	add	sp, sp, #28
   28408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2840c:	ldr	r3, [r0, #124]	; 0x7c
   28410:	add	r5, r0, #92	; 0x5c
   28414:	cmp	r3, #0
   28418:	bne	2859c <flatcc_builder_create_cached_vtable@@Base+0x30c>
   2841c:	ldr	r3, [r0, #104]	; 0x68
   28420:	cmp	r3, #15
   28424:	bls	284a8 <flatcc_builder_create_cached_vtable@@Base+0x218>
   28428:	ldr	r3, [r8, #100]	; 0x64
   2842c:	cmp	r3, #0
   28430:	beq	28400 <flatcc_builder_create_cached_vtable@@Base+0x170>
   28434:	mov	r2, #16
   28438:	mov	r3, #5
   2843c:	str	r2, [r8, #124]	; 0x7c
   28440:	ldr	r0, [r8, #40]	; 0x28
   28444:	mov	r1, r5
   28448:	str	r3, [sp]
   2844c:	mov	r2, #256	; 0x100
   28450:	ldr	r5, [r8, #48]	; 0x30
   28454:	mov	r3, #1
   28458:	blx	r5
   2845c:	cmp	r0, #0
   28460:	bne	28400 <flatcc_builder_create_cached_vtable@@Base+0x170>
   28464:	ldr	r1, [r8, #96]	; 0x60
   28468:	mov	r3, #256	; 0x100
   2846c:	b	28474 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   28470:	mov	r3, r2
   28474:	lsl	r2, r3, #1
   28478:	cmp	r2, r1
   2847c:	bls	28470 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   28480:	lsr	r3, r3, #2
   28484:	cmp	r3, #1
   28488:	bls	2855c <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   2848c:	mov	r2, #1
   28490:	add	r4, r4, #1
   28494:	cmp	r3, r2, lsl r4
   28498:	bhi	28490 <flatcc_builder_create_cached_vtable@@Base+0x200>
   2849c:	rsb	r3, r4, #32
   284a0:	str	r4, [r8, #116]	; 0x74
   284a4:	b	282b8 <flatcc_builder_create_cached_vtable@@Base+0x28>
   284a8:	mov	r3, #6
   284ac:	ldr	r0, [r0, #40]	; 0x28
   284b0:	mov	r2, #16
   284b4:	str	r3, [sp]
   284b8:	add	r1, r8, #100	; 0x64
   284bc:	ldr	r6, [r8, #48]	; 0x30
   284c0:	mov	r3, r4
   284c4:	blx	r6
   284c8:	cmp	r0, #0
   284cc:	beq	28428 <flatcc_builder_create_cached_vtable@@Base+0x198>
   284d0:	b	28588 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   284d4:	mov	r3, #6
   284d8:	ldr	r0, [r8, #40]	; 0x28
   284dc:	add	r1, r8, #100	; 0x64
   284e0:	str	r3, [sp]
   284e4:	mov	r3, #0
   284e8:	ldr	r5, [r8, #48]	; 0x30
   284ec:	blx	r5
   284f0:	cmp	r0, #0
   284f4:	beq	28368 <flatcc_builder_create_cached_vtable@@Base+0xd8>
   284f8:	b	28588 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   284fc:	str	r5, [sp, #12]
   28500:	b	28354 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   28504:	ldr	r3, [r8, #172]	; 0xac
   28508:	ldr	r9, [r8, #120]	; 0x78
   2850c:	cmp	r3, #0
   28510:	add	r2, r9, r7
   28514:	beq	28520 <flatcc_builder_create_cached_vtable@@Base+0x290>
   28518:	cmp	r3, r2
   2851c:	bcc	2858c <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   28520:	ldr	r3, [r8, #72]	; 0x48
   28524:	cmp	r3, r2
   28528:	bcc	28564 <flatcc_builder_create_cached_vtable@@Base+0x2d4>
   2852c:	ldr	r3, [r8, #68]	; 0x44
   28530:	adds	r0, r3, r9
   28534:	beq	285c0 <flatcc_builder_create_cached_vtable@@Base+0x330>
   28538:	ldr	r3, [r8, #120]	; 0x78
   2853c:	ldr	r1, [sp, #8]
   28540:	add	ip, r3, r7
   28544:	str	r3, [r6, #8]
   28548:	mov	r2, r7
   2854c:	str	ip, [r8, #120]	; 0x78
   28550:	bl	14544 <memcpy@plt>
   28554:	ldr	r0, [r5, r4]
   28558:	b	283c8 <flatcc_builder_create_cached_vtable@@Base+0x138>
   2855c:	mov	r3, #32
   28560:	b	284a0 <flatcc_builder_create_cached_vtable@@Base+0x210>
   28564:	mov	r3, #2
   28568:	ldr	r0, [r8, #40]	; 0x28
   2856c:	add	r1, r8, #68	; 0x44
   28570:	str	r3, [sp]
   28574:	mov	r3, #0
   28578:	ldr	sl, [r8, #48]	; 0x30
   2857c:	blx	sl
   28580:	cmp	r0, #0
   28584:	beq	2852c <flatcc_builder_create_cached_vtable@@Base+0x29c>
   28588:	bl	147a8 <__assert_fail@plt+0x198>
   2858c:	mov	r0, r8
   28590:	bl	26784 <flatcc_builder_flush_vtable_cache@@Base>
   28594:	ldr	r0, [r5, r4]
   28598:	b	283c8 <flatcc_builder_create_cached_vtable@@Base+0x138>
   2859c:	ldr	r3, [pc, #36]	; 285c8 <flatcc_builder_create_cached_vtable@@Base+0x338>
   285a0:	ldr	r1, [pc, #36]	; 285cc <flatcc_builder_create_cached_vtable@@Base+0x33c>
   285a4:	ldr	r0, [pc, #36]	; 285d0 <flatcc_builder_create_cached_vtable@@Base+0x340>
   285a8:	add	r3, pc, r3
   285ac:	ldr	r2, [pc, #32]	; 285d4 <flatcc_builder_create_cached_vtable@@Base+0x344>
   285b0:	add	r3, r3, #656	; 0x290
   285b4:	add	r1, pc, r1
   285b8:	add	r0, pc, r0
   285bc:	bl	14610 <__assert_fail@plt>
   285c0:	mvn	r0, #0
   285c4:	b	283c8 <flatcc_builder_create_cached_vtable@@Base+0x138>
   285c8:	andeq	r9, r1, ip, lsl #15
   285cc:	ldrdeq	r9, [r1], -r0
   285d0:	andeq	sl, r1, r8, ror r1
   285d4:	andeq	r0, r0, r6, asr r1

000285d8 <flatcc_builder_create_table@@Base>:
   285d8:	push	{r4, r5, r6, r7, r8, lr}
   285dc:	sub	sp, sp, #88	; 0x58
   285e0:	ldr	r8, [pc, #436]	; 2879c <flatcc_builder_create_table@@Base+0x1c4>
   285e4:	ldr	r4, [sp, #116]	; 0x74
   285e8:	add	r8, pc, r8
   285ec:	cmp	r4, #0
   285f0:	ldr	lr, [sp, #120]	; 0x78
   285f4:	blt	2872c <flatcc_builder_create_table@@Base+0x154>
   285f8:	tst	lr, #1
   285fc:	beq	28778 <flatcc_builder_create_table@@Base+0x1a0>
   28600:	mov	r5, r0
   28604:	ldrh	r0, [r0, #128]	; 0x80
   28608:	cmp	r3, #4
   2860c:	movcc	r3, #4
   28610:	ldr	ip, [r5, #136]	; 0x88
   28614:	cmp	r0, r3
   28618:	mvn	r0, #3
   2861c:	strhcc	r3, [r5, #128]	; 0x80
   28620:	sub	r7, ip, r2
   28624:	sub	r3, r3, #1
   28628:	sub	r0, r0, r2
   2862c:	and	r7, r7, r3
   28630:	add	r0, r0, ip
   28634:	sub	r3, lr, #1
   28638:	sub	r0, r0, r7
   2863c:	sub	r3, r0, r3
   28640:	cmp	r4, #0
   28644:	str	r3, [sp, #12]
   28648:	beq	2867c <flatcc_builder_create_table@@Base+0xa4>
   2864c:	ldr	ip, [sp, #112]	; 0x70
   28650:	mvn	r6, #3
   28654:	add	r4, ip, r4, lsl #1
   28658:	sub	r6, r6, r0
   2865c:	ldrh	r3, [ip], #2
   28660:	sub	lr, r6, r3
   28664:	ldr	r0, [r1, r3]
   28668:	cmp	r4, ip
   2866c:	add	r0, r0, lr
   28670:	str	r0, [r1, r3]
   28674:	bne	2865c <flatcc_builder_create_table@@Base+0x84>
   28678:	ldr	ip, [r5, #136]	; 0x88
   2867c:	mov	r3, #4
   28680:	mov	lr, #1
   28684:	add	r0, sp, #12
   28688:	cmp	r2, #0
   2868c:	str	r3, [sp, #16]
   28690:	str	r3, [sp, #28]
   28694:	str	r0, [sp, #24]
   28698:	str	lr, [sp, #20]
   2869c:	beq	286b8 <flatcc_builder_create_table@@Base+0xe0>
   286a0:	add	r3, r2, r3
   286a4:	mov	r0, #2
   286a8:	str	r1, [sp, #32]
   286ac:	str	r2, [sp, #36]	; 0x24
   286b0:	str	r3, [sp, #16]
   286b4:	str	r0, [sp, #20]
   286b8:	cmp	r7, #0
   286bc:	beq	286ec <flatcc_builder_create_table@@Base+0x114>
   286c0:	ldr	r2, [sp, #20]
   286c4:	ldr	r1, [pc, #212]	; 287a0 <flatcc_builder_create_table@@Base+0x1c8>
   286c8:	add	r2, r2, #1
   286cc:	add	r3, r3, r7
   286d0:	str	r3, [sp, #16]
   286d4:	ldr	r0, [r8, r1]
   286d8:	add	r1, sp, #88	; 0x58
   286dc:	add	r1, r1, r2, lsl #3
   286e0:	str	r2, [sp, #20]
   286e4:	str	r0, [r1, #-72]	; 0xffffffb8
   286e8:	str	r7, [r1, #-68]	; 0xffffffbc
   286ec:	sub	r4, ip, r3
   286f0:	cmp	r4, ip
   286f4:	bge	28774 <flatcc_builder_create_table@@Base+0x19c>
   286f8:	ldr	r0, [r5, #36]	; 0x24
   286fc:	ldr	r2, [sp, #20]
   28700:	str	r3, [sp]
   28704:	add	r1, sp, #24
   28708:	ldr	r6, [r5, #44]	; 0x2c
   2870c:	mov	r3, r4
   28710:	blx	r6
   28714:	cmp	r0, #0
   28718:	bne	28750 <flatcc_builder_create_table@@Base+0x178>
   2871c:	mov	r0, r4
   28720:	str	r4, [r5, #136]	; 0x88
   28724:	add	sp, sp, #88	; 0x58
   28728:	pop	{r4, r5, r6, r7, r8, pc}
   2872c:	ldr	r3, [pc, #112]	; 287a4 <flatcc_builder_create_table@@Base+0x1cc>
   28730:	ldr	r1, [pc, #112]	; 287a8 <flatcc_builder_create_table@@Base+0x1d0>
   28734:	ldr	r0, [pc, #112]	; 287ac <flatcc_builder_create_table@@Base+0x1d4>
   28738:	add	r3, pc, r3
   2873c:	ldr	r2, [pc, #108]	; 287b0 <flatcc_builder_create_table@@Base+0x1d8>
   28740:	add	r3, r3, #668	; 0x29c
   28744:	add	r1, pc, r1
   28748:	add	r0, pc, r0
   2874c:	bl	14610 <__assert_fail@plt>
   28750:	ldr	r3, [pc, #92]	; 287b4 <flatcc_builder_create_table@@Base+0x1dc>
   28754:	ldr	r1, [pc, #92]	; 287b8 <flatcc_builder_create_table@@Base+0x1e0>
   28758:	ldr	r0, [pc, #92]	; 287bc <flatcc_builder_create_table@@Base+0x1e4>
   2875c:	add	r3, pc, r3
   28760:	ldr	r2, [pc, #88]	; 287c0 <flatcc_builder_create_table@@Base+0x1e8>
   28764:	add	r3, r3, #28
   28768:	add	r1, pc, r1
   2876c:	add	r0, pc, r0
   28770:	bl	14610 <__assert_fail@plt>
   28774:	bl	14810 <__assert_fail@plt+0x200>
   28778:	ldr	r3, [pc, #68]	; 287c4 <flatcc_builder_create_table@@Base+0x1ec>
   2877c:	ldr	r1, [pc, #68]	; 287c8 <flatcc_builder_create_table@@Base+0x1f0>
   28780:	ldr	r0, [pc, #68]	; 287cc <flatcc_builder_create_table@@Base+0x1f4>
   28784:	add	r3, pc, r3
   28788:	ldr	r2, [pc, #64]	; 287d0 <flatcc_builder_create_table@@Base+0x1f8>
   2878c:	add	r3, r3, #668	; 0x29c
   28790:	add	r1, pc, r1
   28794:	add	r0, pc, r0
   28798:	bl	14610 <__assert_fail@plt>
   2879c:	andeq	ip, r2, r0, lsl sl
   287a0:	andeq	r0, r0, r4, rrx
   287a4:	strdeq	r9, [r1], -ip
   287a8:	andeq	r9, r1, r0, asr #26
   287ac:	strdeq	r9, [r1], -r8
   287b0:	ldrdeq	r0, [r0], -r5
   287b4:	ldrdeq	r9, [r1], -r8
   287b8:	andeq	r9, r1, ip, lsl sp
   287bc:	andeq	r9, r1, r0, lsr #27
   287c0:	andeq	r0, r0, fp, lsl #5
   287c4:			; <UNDEFINED> instruction: 0x000195b0
   287c8:	strdeq	r9, [r1], -r4
   287cc:	andeq	r9, r1, r0, asr #31
   287d0:	ldrdeq	r0, [r0], -fp

000287d4 <flatcc_builder_check_required_field@@Base>:
   287d4:	ldr	r3, [r0, #32]
   287d8:	ldrh	r3, [r3, #14]
   287dc:	cmp	r3, #3
   287e0:	bne	2880c <flatcc_builder_check_required_field@@Base+0x38>
   287e4:	ldrh	r3, [r0, #8]
   287e8:	cmp	r3, r1
   287ec:	movls	r0, #0
   287f0:	bls	28808 <flatcc_builder_check_required_field@@Base+0x34>
   287f4:	ldr	r3, [r0, #4]
   287f8:	lsl	r1, r1, #1
   287fc:	ldrh	r0, [r3, r1]
   28800:	adds	r0, r0, #0
   28804:	movne	r0, #1
   28808:	bx	lr
   2880c:	ldr	r3, [pc, #32]	; 28834 <flatcc_builder_check_required_field@@Base+0x60>
   28810:	ldr	r1, [pc, #32]	; 28838 <flatcc_builder_check_required_field@@Base+0x64>
   28814:	ldr	r0, [pc, #32]	; 2883c <flatcc_builder_check_required_field@@Base+0x68>
   28818:	add	r3, pc, r3
   2881c:	push	{r4, lr}
   28820:	add	r3, r3, #696	; 0x2b8
   28824:	ldr	r2, [pc, #20]	; 28840 <flatcc_builder_check_required_field@@Base+0x6c>
   28828:	add	r1, pc, r1
   2882c:	add	r0, pc, r0
   28830:	bl	14610 <__assert_fail@plt>
   28834:	andeq	r9, r1, ip, lsl r5
   28838:	andeq	r9, r1, ip, asr ip
   2883c:	andeq	r9, r1, r4, lsr pc
   28840:	strdeq	r0, [r0], -r8

00028844 <flatcc_builder_check_union_field@@Base>:
   28844:	ldr	r3, [r0, #32]
   28848:	ldrh	r3, [r3, #14]
   2884c:	cmp	r3, #3
   28850:	bne	288cc <flatcc_builder_check_union_field@@Base+0x88>
   28854:	cmp	r1, #0
   28858:	beq	288a4 <flatcc_builder_check_union_field@@Base+0x60>
   2885c:	ldrh	r3, [r0, #8]
   28860:	cmp	r3, r1
   28864:	bls	288a4 <flatcc_builder_check_union_field@@Base+0x60>
   28868:	sub	r1, r1, #-2147483647	; 0x80000001
   2886c:	ldr	r3, [r0, #4]
   28870:	lsl	r1, r1, #1
   28874:	ldrh	r2, [r3, r1]
   28878:	cmp	r2, #0
   2887c:	beq	288b8 <flatcc_builder_check_union_field@@Base+0x74>
   28880:	ldr	r0, [r0, #16]
   28884:	add	r1, r3, r1
   28888:	ldrb	r2, [r0, r2]
   2888c:	ldrh	r1, [r1, #2]
   28890:	cmp	r2, #0
   28894:	bne	288ac <flatcc_builder_check_union_field@@Base+0x68>
   28898:	clz	r0, r1
   2889c:	lsr	r0, r0, #5
   288a0:	bx	lr
   288a4:	mov	r0, #0
   288a8:	bx	lr
   288ac:	adds	r0, r1, #0
   288b0:	movne	r0, #1
   288b4:	b	288a8 <flatcc_builder_check_union_field@@Base+0x64>
   288b8:	add	r1, r3, r1
   288bc:	ldrh	r1, [r1, #2]
   288c0:	clz	r0, r1
   288c4:	lsr	r0, r0, #5
   288c8:	bx	lr
   288cc:	ldr	r3, [pc, #32]	; 288f4 <flatcc_builder_check_union_field@@Base+0xb0>
   288d0:	ldr	r1, [pc, #32]	; 288f8 <flatcc_builder_check_union_field@@Base+0xb4>
   288d4:	ldr	r0, [pc, #32]	; 288fc <flatcc_builder_check_union_field@@Base+0xb8>
   288d8:	add	r3, pc, r3
   288dc:	push	{r4, lr}
   288e0:	add	r3, r3, #732	; 0x2dc
   288e4:	ldr	r2, [pc, #20]	; 28900 <flatcc_builder_check_union_field@@Base+0xbc>
   288e8:	add	r1, pc, r1
   288ec:	add	r0, pc, r0
   288f0:	bl	14610 <__assert_fail@plt>
   288f4:	andeq	r9, r1, ip, asr r4
   288f8:	muleq	r1, ip, fp
   288fc:	andeq	r9, r1, r4, ror lr
   28900:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00028904 <flatcc_builder_check_required@@Base>:
   28904:	ldr	r3, [r0, #32]
   28908:	ldrh	r3, [r3, #14]
   2890c:	cmp	r3, #3
   28910:	bne	28974 <flatcc_builder_check_required@@Base+0x70>
   28914:	ldrh	r3, [r0, #8]
   28918:	cmp	r3, r2
   2891c:	movlt	r0, #0
   28920:	blt	28970 <flatcc_builder_check_required@@Base+0x6c>
   28924:	cmp	r2, #0
   28928:	ble	2896c <flatcc_builder_check_required@@Base+0x68>
   2892c:	ldrh	r3, [r1]
   28930:	ldr	ip, [r0, #4]
   28934:	lsl	r3, r3, #1
   28938:	ldrh	r0, [ip, r3]
   2893c:	cmp	r0, #0
   28940:	beq	28970 <flatcc_builder_check_required@@Base+0x6c>
   28944:	add	r2, r1, r2, lsl #1
   28948:	add	r1, r1, #2
   2894c:	b	28964 <flatcc_builder_check_required@@Base+0x60>
   28950:	ldrh	r3, [r1], #2
   28954:	lsl	r3, r3, #1
   28958:	ldrh	r0, [ip, r3]
   2895c:	cmp	r0, #0
   28960:	beq	28970 <flatcc_builder_check_required@@Base+0x6c>
   28964:	cmp	r1, r2
   28968:	bne	28950 <flatcc_builder_check_required@@Base+0x4c>
   2896c:	mov	r0, #1
   28970:	bx	lr
   28974:	ldr	r3, [pc, #32]	; 2899c <flatcc_builder_check_required@@Base+0x98>
   28978:	ldr	r1, [pc, #32]	; 289a0 <flatcc_builder_check_required@@Base+0x9c>
   2897c:	ldr	r0, [pc, #32]	; 289a4 <flatcc_builder_check_required@@Base+0xa0>
   28980:	add	r3, pc, r3
   28984:	push	{r4, lr}
   28988:	add	r3, r3, #768	; 0x300
   2898c:	ldr	r2, [pc, #20]	; 289a8 <flatcc_builder_check_required@@Base+0xa4>
   28990:	add	r1, pc, r1
   28994:	add	r0, pc, r0
   28998:	bl	14610 <__assert_fail@plt>
   2899c:			; <UNDEFINED> instruction: 0x000193b4
   289a0:	strdeq	r9, [r1], -r4
   289a4:	andeq	r9, r1, ip, asr #27
   289a8:	andeq	r0, r0, r1, lsl r5

000289ac <flatcc_builder_end_table@@Base>:
   289ac:	ldr	r3, [r0, #32]
   289b0:	push	{r4, r5, r6, r7, lr}
   289b4:	sub	sp, sp, #20
   289b8:	ldrh	r3, [r3, #14]
   289bc:	cmp	r3, #3
   289c0:	bne	28b44 <flatcc_builder_end_table@@Base+0x198>
   289c4:	ldrh	r5, [r0, #8]
   289c8:	ldr	r3, [r0, #12]
   289cc:	ldr	r1, [pc, #404]	; 28b68 <flatcc_builder_end_table@@Base+0x1bc>
   289d0:	add	r5, r5, #2
   289d4:	ldr	r2, [r0, #20]
   289d8:	lsl	r5, r5, #1
   289dc:	add	r2, r2, #4
   289e0:	uxth	r5, r5
   289e4:	eor	r3, r3, r5
   289e8:	uxth	r2, r2
   289ec:	mul	r3, r1, r3
   289f0:	ldr	ip, [r0, #4]
   289f4:	eor	r3, r3, r2
   289f8:	sub	r6, ip, #4
   289fc:	mul	r1, r1, r3
   28a00:	strh	r2, [ip, #-2]
   28a04:	strh	r5, [ip, #-4]
   28a08:	mov	r3, r1
   28a0c:	str	r1, [r0, #12]
   28a10:	mov	r2, r5
   28a14:	mov	r1, r6
   28a18:	mov	r4, r0
   28a1c:	bl	28290 <flatcc_builder_create_cached_vtable@@Base>
   28a20:	subs	r7, r0, #0
   28a24:	bne	28a38 <flatcc_builder_end_table@@Base+0x8c>
   28a28:	mov	r5, #0
   28a2c:	mov	r0, r5
   28a30:	add	sp, sp, #20
   28a34:	pop	{r4, r5, r6, r7, pc}
   28a38:	mov	r2, r5
   28a3c:	mov	r1, #0
   28a40:	mov	r0, r6
   28a44:	bl	145bc <memset@plt>
   28a48:	ldr	r3, [r4, #32]
   28a4c:	ldr	ip, [r4, #76]	; 0x4c
   28a50:	ldr	r0, [r4]
   28a54:	ldr	r2, [r3, #20]
   28a58:	ldr	r1, [r4, #16]
   28a5c:	add	ip, ip, r2
   28a60:	sub	r0, r0, ip
   28a64:	ldrh	r3, [r4, #130]	; 0x82
   28a68:	asr	r0, r0, #1
   28a6c:	ldr	r2, [r4, #20]
   28a70:	str	r0, [sp, #4]
   28a74:	str	r7, [sp, #8]
   28a78:	str	ip, [sp]
   28a7c:	mov	r0, r4
   28a80:	bl	285d8 <flatcc_builder_create_table@@Base>
   28a84:	subs	r5, r0, #0
   28a88:	beq	28a28 <flatcc_builder_end_table@@Base+0x7c>
   28a8c:	ldr	r3, [r4, #32]
   28a90:	ldr	r0, [r4, #52]	; 0x34
   28a94:	ldr	ip, [r4, #76]	; 0x4c
   28a98:	ldr	r1, [r3, #24]
   28a9c:	ldr	r2, [r4, #20]
   28aa0:	str	r1, [r4, #12]
   28aa4:	ldrh	lr, [r3, #28]
   28aa8:	mov	r1, #0
   28aac:	strh	lr, [r4, #8]
   28ab0:	ldr	lr, [r3, #16]
   28ab4:	add	r0, r0, lr
   28ab8:	str	r0, [r4, #4]
   28abc:	ldr	r3, [r3, #20]
   28ac0:	ldr	r0, [r4, #16]
   28ac4:	add	r3, ip, r3
   28ac8:	str	r3, [r4]
   28acc:	bl	145bc <memset@plt>
   28ad0:	ldr	r3, [r4, #32]
   28ad4:	ldr	r2, [r4, #64]	; 0x40
   28ad8:	ldrh	lr, [r4, #130]	; 0x82
   28adc:	ldr	ip, [r3]
   28ae0:	ldr	r1, [r3, #4]
   28ae4:	ldrh	r0, [r4, #128]	; 0x80
   28ae8:	sub	r2, r2, ip
   28aec:	cmp	r2, r1
   28af0:	movcs	r2, r1
   28af4:	cmp	r0, lr
   28af8:	ldr	r0, [r4, #60]	; 0x3c
   28afc:	ldr	r6, [r3, #8]
   28b00:	str	r2, [r4, #24]
   28b04:	add	r2, r0, ip
   28b08:	str	r2, [r4, #16]
   28b0c:	str	r6, [r4, #20]
   28b10:	ldr	r2, [r4, #156]	; 0x9c
   28b14:	str	ip, [r4, #28]
   28b18:	str	r1, [r3, #4]
   28b1c:	strhcc	lr, [r4, #128]	; 0x80
   28b20:	ldrh	r1, [r3, #12]
   28b24:	sub	r2, r2, #1
   28b28:	sub	r3, r3, #36	; 0x24
   28b2c:	mov	r0, r5
   28b30:	str	r2, [r4, #156]	; 0x9c
   28b34:	strh	r1, [r4, #130]	; 0x82
   28b38:	str	r3, [r4, #32]
   28b3c:	add	sp, sp, #20
   28b40:	pop	{r4, r5, r6, r7, pc}
   28b44:	ldr	r3, [pc, #32]	; 28b6c <flatcc_builder_end_table@@Base+0x1c0>
   28b48:	ldr	r1, [pc, #32]	; 28b70 <flatcc_builder_end_table@@Base+0x1c4>
   28b4c:	ldr	r0, [pc, #32]	; 28b74 <flatcc_builder_end_table@@Base+0x1c8>
   28b50:	add	r3, pc, r3
   28b54:	ldr	r2, [pc, #28]	; 28b78 <flatcc_builder_end_table@@Base+0x1cc>
   28b58:	add	r3, r3, #800	; 0x320
   28b5c:	add	r1, pc, r1
   28b60:	add	r0, pc, r0
   28b64:	bl	14610 <__assert_fail@plt>
   28b68:			; <UNDEFINED> instruction: 0x9e3779b1
   28b6c:	andeq	r9, r1, r4, ror #3
   28b70:	andeq	r9, r1, r8, lsr #18
   28b74:	andeq	r9, r1, r0, lsl #24
   28b78:	andeq	r0, r0, r5, lsr #10

00028b7c <flatcc_builder_create_vector@@Base>:
   28b7c:	push	{r4, r5, r6, lr}
   28b80:	sub	sp, sp, #88	; 0x58
   28b84:	ldr	lr, [pc, #320]	; 28ccc <flatcc_builder_create_vector@@Base+0x150>
   28b88:	ldr	ip, [sp, #108]	; 0x6c
   28b8c:	mov	r4, r0
   28b90:	cmp	r2, ip
   28b94:	add	lr, pc, lr
   28b98:	ldrh	r0, [sp, #104]	; 0x68
   28b9c:	bhi	28c80 <flatcc_builder_create_vector@@Base+0x104>
   28ba0:	ldrh	ip, [r4, #128]	; 0x80
   28ba4:	cmp	r0, #4
   28ba8:	mul	r3, r3, r2
   28bac:	movcc	r0, #4
   28bb0:	ldr	r6, [r4, #136]	; 0x88
   28bb4:	cmp	ip, r0
   28bb8:	strhcc	r0, [r4, #128]	; 0x80
   28bbc:	sub	r5, r6, r3
   28bc0:	sub	r0, r0, #1
   28bc4:	mov	ip, #4
   28bc8:	str	r2, [sp, #12]
   28bcc:	and	r0, r0, r5
   28bd0:	add	r2, sp, #12
   28bd4:	mov	r5, #1
   28bd8:	cmp	r3, #0
   28bdc:	str	ip, [sp, #16]
   28be0:	str	ip, [sp, #28]
   28be4:	str	r2, [sp, #24]
   28be8:	str	r5, [sp, #20]
   28bec:	bne	28c64 <flatcc_builder_create_vector@@Base+0xe8>
   28bf0:	cmp	r0, #0
   28bf4:	beq	28c24 <flatcc_builder_create_vector@@Base+0xa8>
   28bf8:	ldr	r3, [sp, #20]
   28bfc:	ldr	r2, [pc, #204]	; 28cd0 <flatcc_builder_create_vector@@Base+0x154>
   28c00:	add	r3, r3, #1
   28c04:	add	ip, ip, r0
   28c08:	str	ip, [sp, #16]
   28c0c:	ldr	r1, [lr, r2]
   28c10:	add	r2, sp, #88	; 0x58
   28c14:	add	r2, r2, r3, lsl #3
   28c18:	str	r3, [sp, #20]
   28c1c:	str	r1, [r2, #-72]	; 0xffffffb8
   28c20:	str	r0, [r2, #-68]	; 0xffffffbc
   28c24:	sub	r5, r6, ip
   28c28:	cmp	r6, r5
   28c2c:	ble	28cc8 <flatcc_builder_create_vector@@Base+0x14c>
   28c30:	ldr	r0, [r4, #36]	; 0x24
   28c34:	ldr	r2, [sp, #20]
   28c38:	str	ip, [sp]
   28c3c:	mov	r3, r5
   28c40:	ldr	r6, [r4, #44]	; 0x2c
   28c44:	add	r1, sp, #24
   28c48:	blx	r6
   28c4c:	cmp	r0, #0
   28c50:	bne	28ca4 <flatcc_builder_create_vector@@Base+0x128>
   28c54:	mov	r0, r5
   28c58:	str	r5, [r4, #136]	; 0x88
   28c5c:	add	sp, sp, #88	; 0x58
   28c60:	pop	{r4, r5, r6, pc}
   28c64:	add	ip, r3, ip
   28c68:	mov	r2, #2
   28c6c:	str	r1, [sp, #32]
   28c70:	str	r3, [sp, #36]	; 0x24
   28c74:	str	ip, [sp, #16]
   28c78:	str	r2, [sp, #20]
   28c7c:	b	28bf0 <flatcc_builder_create_vector@@Base+0x74>
   28c80:	ldr	r3, [pc, #76]	; 28cd4 <flatcc_builder_create_vector@@Base+0x158>
   28c84:	ldr	r1, [pc, #76]	; 28cd8 <flatcc_builder_create_vector@@Base+0x15c>
   28c88:	ldr	r0, [pc, #76]	; 28cdc <flatcc_builder_create_vector@@Base+0x160>
   28c8c:	add	r3, pc, r3
   28c90:	ldr	r2, [pc, #72]	; 28ce0 <flatcc_builder_create_vector@@Base+0x164>
   28c94:	add	r3, r3, #828	; 0x33c
   28c98:	add	r1, pc, r1
   28c9c:	add	r0, pc, r0
   28ca0:	bl	14610 <__assert_fail@plt>
   28ca4:	ldr	r3, [pc, #56]	; 28ce4 <flatcc_builder_create_vector@@Base+0x168>
   28ca8:	ldr	r1, [pc, #56]	; 28ce8 <flatcc_builder_create_vector@@Base+0x16c>
   28cac:	ldr	r0, [pc, #56]	; 28cec <flatcc_builder_create_vector@@Base+0x170>
   28cb0:	add	r3, pc, r3
   28cb4:	ldr	r2, [pc, #52]	; 28cf0 <flatcc_builder_create_vector@@Base+0x174>
   28cb8:	add	r3, r3, #28
   28cbc:	add	r1, pc, r1
   28cc0:	add	r0, pc, r0
   28cc4:	bl	14610 <__assert_fail@plt>
   28cc8:	bl	14810 <__assert_fail@plt+0x200>
   28ccc:	andeq	ip, r2, r4, ror #8
   28cd0:	andeq	r0, r0, r4, rrx
   28cd4:	andeq	r9, r1, r8, lsr #1
   28cd8:	andeq	r9, r1, ip, ror #15
   28cdc:	strdeq	r9, [r1], -r0
   28ce0:	andeq	r0, r0, r5, asr r5
   28ce4:	andeq	r9, r1, r4, lsl #1
   28ce8:	andeq	r9, r1, r8, asr #15
   28cec:	andeq	r9, r1, ip, asr #16
   28cf0:	andeq	r0, r0, fp, lsl #5

00028cf4 <flatcc_builder_end_vector@@Base>:
   28cf4:	ldr	r1, [r0, #32]
   28cf8:	push	{r4, r5, r6, lr}
   28cfc:	sub	sp, sp, #8
   28d00:	ldrh	r3, [r1, #14]
   28d04:	cmp	r3, #4
   28d08:	bne	28dbc <flatcc_builder_end_vector@@Base+0xc8>
   28d0c:	ldrh	lr, [r0, #130]	; 0x82
   28d10:	ldr	ip, [r1, #24]
   28d14:	ldr	r3, [r1, #16]
   28d18:	ldr	r2, [r1, #20]
   28d1c:	ldr	r1, [r0, #16]
   28d20:	str	lr, [sp]
   28d24:	str	ip, [sp, #4]
   28d28:	mov	r4, r0
   28d2c:	bl	28b7c <flatcc_builder_create_vector@@Base>
   28d30:	subs	r5, r0, #0
   28d34:	beq	28db0 <flatcc_builder_end_vector@@Base+0xbc>
   28d38:	ldr	r2, [r4, #20]
   28d3c:	mov	r1, #0
   28d40:	ldr	r0, [r4, #16]
   28d44:	bl	145bc <memset@plt>
   28d48:	ldr	r3, [r4, #32]
   28d4c:	ldr	r2, [r4, #64]	; 0x40
   28d50:	ldrh	lr, [r4, #130]	; 0x82
   28d54:	ldr	ip, [r3]
   28d58:	ldr	r1, [r3, #4]
   28d5c:	ldrh	r0, [r4, #128]	; 0x80
   28d60:	sub	r2, r2, ip
   28d64:	cmp	r2, r1
   28d68:	movcs	r2, r1
   28d6c:	cmp	r0, lr
   28d70:	ldr	r0, [r4, #60]	; 0x3c
   28d74:	ldr	r6, [r3, #8]
   28d78:	str	r2, [r4, #24]
   28d7c:	add	r2, r0, ip
   28d80:	str	r2, [r4, #16]
   28d84:	str	r6, [r4, #20]
   28d88:	ldr	r2, [r4, #156]	; 0x9c
   28d8c:	str	ip, [r4, #28]
   28d90:	str	r1, [r3, #4]
   28d94:	strhcc	lr, [r4, #128]	; 0x80
   28d98:	ldrh	r1, [r3, #12]
   28d9c:	sub	r2, r2, #1
   28da0:	sub	r3, r3, #36	; 0x24
   28da4:	str	r2, [r4, #156]	; 0x9c
   28da8:	strh	r1, [r4, #130]	; 0x82
   28dac:	str	r3, [r4, #32]
   28db0:	mov	r0, r5
   28db4:	add	sp, sp, #8
   28db8:	pop	{r4, r5, r6, pc}
   28dbc:	ldr	r3, [pc, #28]	; 28de0 <flatcc_builder_end_vector@@Base+0xec>
   28dc0:	ldr	r1, [pc, #28]	; 28de4 <flatcc_builder_end_vector@@Base+0xf0>
   28dc4:	ldr	r0, [pc, #28]	; 28de8 <flatcc_builder_end_vector@@Base+0xf4>
   28dc8:	add	r3, pc, r3
   28dcc:	ldr	r2, [pc, #24]	; 28dec <flatcc_builder_end_vector@@Base+0xf8>
   28dd0:	add	r3, r3, #860	; 0x35c
   28dd4:	add	r1, pc, r1
   28dd8:	add	r0, pc, r0
   28ddc:	bl	14610 <__assert_fail@plt>
   28de0:	andeq	r8, r1, ip, ror #30
   28de4:			; <UNDEFINED> instruction: 0x000196b0
   28de8:	strdeq	r9, [r1], -ip
   28dec:	andeq	r0, r0, r8, ror r5

00028df0 <flatcc_builder_vector_count@@Base>:
   28df0:	ldr	r3, [r0, #32]
   28df4:	ldr	r0, [r3, #20]
   28df8:	bx	lr

00028dfc <flatcc_builder_vector_edit@@Base>:
   28dfc:	ldr	r0, [r0, #16]
   28e00:	bx	lr

00028e04 <flatcc_builder_create_offset_vector_direct@@Base>:
   28e04:	cmn	r2, #-1073741823	; 0xc0000001
   28e08:	bls	28e14 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   28e0c:	mov	r0, #0
   28e10:	bx	lr
   28e14:	mov	r3, #0
   28e18:	b	26554 <flatcc_builder_default_alloc@@Base+0x350>

00028e1c <flatcc_builder_end_offset_vector@@Base>:
   28e1c:	ldr	r3, [r0, #32]
   28e20:	push	{r4, r5, r6, lr}
   28e24:	ldrh	r2, [r3, #14]
   28e28:	cmp	r2, #5
   28e2c:	bne	28ec8 <flatcc_builder_end_offset_vector@@Base+0xac>
   28e30:	ldr	r2, [r3, #20]
   28e34:	ldr	r1, [r0, #16]
   28e38:	mov	r4, r0
   28e3c:	bl	28e04 <flatcc_builder_create_offset_vector_direct@@Base>
   28e40:	subs	r5, r0, #0
   28e44:	beq	28ec0 <flatcc_builder_end_offset_vector@@Base+0xa4>
   28e48:	ldr	r2, [r4, #20]
   28e4c:	mov	r1, #0
   28e50:	ldr	r0, [r4, #16]
   28e54:	bl	145bc <memset@plt>
   28e58:	ldr	r3, [r4, #32]
   28e5c:	ldr	r2, [r4, #64]	; 0x40
   28e60:	ldrh	lr, [r4, #130]	; 0x82
   28e64:	ldr	ip, [r3]
   28e68:	ldr	r1, [r3, #4]
   28e6c:	ldrh	r0, [r4, #128]	; 0x80
   28e70:	sub	r2, r2, ip
   28e74:	cmp	r2, r1
   28e78:	movcs	r2, r1
   28e7c:	cmp	r0, lr
   28e80:	ldr	r0, [r4, #60]	; 0x3c
   28e84:	ldr	r6, [r3, #8]
   28e88:	str	r2, [r4, #24]
   28e8c:	add	r2, r0, ip
   28e90:	str	r2, [r4, #16]
   28e94:	str	r6, [r4, #20]
   28e98:	ldr	r2, [r4, #156]	; 0x9c
   28e9c:	str	ip, [r4, #28]
   28ea0:	str	r1, [r3, #4]
   28ea4:	strhcc	lr, [r4, #128]	; 0x80
   28ea8:	ldrh	r1, [r3, #12]
   28eac:	sub	r2, r2, #1
   28eb0:	sub	r3, r3, #36	; 0x24
   28eb4:	str	r2, [r4, #156]	; 0x9c
   28eb8:	strh	r1, [r4, #130]	; 0x82
   28ebc:	str	r3, [r4, #32]
   28ec0:	mov	r0, r5
   28ec4:	pop	{r4, r5, r6, pc}
   28ec8:	ldr	r3, [pc, #28]	; 28eec <flatcc_builder_end_offset_vector@@Base+0xd0>
   28ecc:	ldr	r1, [pc, #28]	; 28ef0 <flatcc_builder_end_offset_vector@@Base+0xd4>
   28ed0:	ldr	r0, [pc, #28]	; 28ef4 <flatcc_builder_end_offset_vector@@Base+0xd8>
   28ed4:	add	r3, pc, r3
   28ed8:	ldr	r2, [pc, #24]	; 28ef8 <flatcc_builder_end_offset_vector@@Base+0xdc>
   28edc:	add	r3, r3, #888	; 0x378
   28ee0:	add	r1, pc, r1
   28ee4:	add	r0, pc, r0
   28ee8:	bl	14610 <__assert_fail@plt>
   28eec:	andeq	r8, r1, r0, ror #28
   28ef0:	andeq	r9, r1, r4, lsr #11
   28ef4:	andeq	r9, r1, ip, asr r7
   28ef8:	andeq	r0, r0, r8, asr #11

00028efc <flatcc_builder_create_offset_vector@@Base>:
   28efc:	push	{r4, r5, r6, lr}
   28f00:	mov	r6, r1
   28f04:	mov	r5, r2
   28f08:	mov	r4, r0
   28f0c:	bl	27dd0 <flatcc_builder_start_offset_vector@@Base>
   28f10:	cmp	r0, #0
   28f14:	beq	28f20 <flatcc_builder_create_offset_vector@@Base+0x24>
   28f18:	mov	r0, #0
   28f1c:	pop	{r4, r5, r6, pc}
   28f20:	mov	r1, r5
   28f24:	mov	r0, r4
   28f28:	bl	27768 <flatcc_builder_extend_offset_vector@@Base>
   28f2c:	cmp	r0, #0
   28f30:	beq	28f18 <flatcc_builder_create_offset_vector@@Base+0x1c>
   28f34:	lsl	r2, r5, #2
   28f38:	mov	r1, r6
   28f3c:	bl	14544 <memcpy@plt>
   28f40:	mov	r0, r4
   28f44:	pop	{r4, r5, r6, lr}
   28f48:	b	28e1c <flatcc_builder_end_offset_vector@@Base>

00028f4c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   28f4c:	ldr	r2, [r0, #32]
   28f50:	push	{r4, r5, r6, lr}
   28f54:	ldrh	ip, [r2, #14]
   28f58:	cmp	ip, #5
   28f5c:	bne	29010 <flatcc_builder_end_offset_vector_for_unions@@Base+0xc4>
   28f60:	ldr	r2, [r2, #20]
   28f64:	cmn	r2, #-1073741823	; 0xc0000001
   28f68:	bls	28f78 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   28f6c:	mov	r5, #0
   28f70:	mov	r0, r5
   28f74:	pop	{r4, r5, r6, pc}
   28f78:	mov	r3, r1
   28f7c:	ldr	r1, [r0, #16]
   28f80:	mov	r4, r0
   28f84:	bl	26554 <flatcc_builder_default_alloc@@Base+0x350>
   28f88:	subs	r5, r0, #0
   28f8c:	beq	28f6c <flatcc_builder_end_offset_vector_for_unions@@Base+0x20>
   28f90:	ldr	r2, [r4, #20]
   28f94:	mov	r1, #0
   28f98:	ldr	r0, [r4, #16]
   28f9c:	bl	145bc <memset@plt>
   28fa0:	ldr	r3, [r4, #32]
   28fa4:	ldr	r2, [r4, #64]	; 0x40
   28fa8:	ldrh	lr, [r4, #130]	; 0x82
   28fac:	ldr	ip, [r3]
   28fb0:	ldr	r1, [r3, #4]
   28fb4:	ldrh	r0, [r4, #128]	; 0x80
   28fb8:	sub	r2, r2, ip
   28fbc:	cmp	r2, r1
   28fc0:	movcs	r2, r1
   28fc4:	cmp	r0, lr
   28fc8:	ldr	r0, [r4, #60]	; 0x3c
   28fcc:	ldr	r6, [r3, #8]
   28fd0:	str	r2, [r4, #24]
   28fd4:	add	r2, r0, ip
   28fd8:	str	r2, [r4, #16]
   28fdc:	str	r6, [r4, #20]
   28fe0:	ldr	r2, [r4, #156]	; 0x9c
   28fe4:	str	ip, [r4, #28]
   28fe8:	str	r1, [r3, #4]
   28fec:	strhcc	lr, [r4, #128]	; 0x80
   28ff0:	ldrh	r1, [r3, #12]
   28ff4:	sub	r2, r2, #1
   28ff8:	sub	r3, r3, #36	; 0x24
   28ffc:	str	r2, [r4, #156]	; 0x9c
   29000:	strh	r1, [r4, #130]	; 0x82
   29004:	str	r3, [r4, #32]
   29008:	mov	r0, r5
   2900c:	pop	{r4, r5, r6, pc}
   29010:	ldr	r3, [pc, #28]	; 29034 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe8>
   29014:	ldr	r1, [pc, #28]	; 29038 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   29018:	ldr	r0, [pc, #28]	; 2903c <flatcc_builder_end_offset_vector_for_unions@@Base+0xf0>
   2901c:	add	r3, pc, r3
   29020:	ldr	r2, [pc, #24]	; 29040 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf4>
   29024:	add	r3, r3, #924	; 0x39c
   29028:	add	r1, pc, r1
   2902c:	add	r0, pc, r0
   29030:	bl	14610 <__assert_fail@plt>
   29034:	andeq	r8, r1, r8, lsl sp
   29038:	andeq	r9, r1, ip, asr r4
   2903c:	andeq	r9, r1, r4, lsl r6
   29040:	ldrdeq	r0, [r0], -r5

00029044 <flatcc_builder_offset_vector_edit@@Base>:
   29044:	ldr	r0, [r0, #16]
   29048:	bx	lr

0002904c <flatcc_builder_offset_vector_count@@Base>:
   2904c:	ldr	r3, [r0, #32]
   29050:	ldr	r0, [r3, #20]
   29054:	bx	lr

00029058 <flatcc_builder_create_union_vector_direct@@Base>:
   29058:	push	{r4, r5, r6, r7, r8, lr}
   2905c:	sub	sp, sp, #8
   29060:	mov	r4, r0
   29064:	ldr	r5, [sp, #32]
   29068:	cmn	r5, #-1073741823	; 0xc0000001
   2906c:	bls	29088 <flatcc_builder_create_union_vector_direct@@Base+0x30>
   29070:	mov	r3, #0
   29074:	mov	r0, r4
   29078:	str	r3, [r4]
   2907c:	str	r3, [r4, #4]
   29080:	add	sp, sp, #8
   29084:	pop	{r4, r5, r6, r7, r8, pc}
   29088:	mov	r6, r1
   2908c:	mov	r7, r2
   29090:	mov	r1, r3
   29094:	mov	r0, r6
   29098:	mov	r3, r2
   2909c:	mov	r2, r5
   290a0:	bl	26554 <flatcc_builder_default_alloc@@Base+0x350>
   290a4:	subs	r8, r0, #0
   290a8:	beq	29070 <flatcc_builder_create_union_vector_direct@@Base+0x18>
   290ac:	mvn	ip, #0
   290b0:	mov	r3, #1
   290b4:	mov	r2, r5
   290b8:	mov	r1, r7
   290bc:	mov	r0, r6
   290c0:	stm	sp, {r3, ip}
   290c4:	bl	28b7c <flatcc_builder_create_vector@@Base>
   290c8:	stm	r4, {r0, r8}
   290cc:	mov	r0, r4
   290d0:	add	sp, sp, #8
   290d4:	pop	{r4, r5, r6, r7, r8, pc}

000290d8 <flatcc_builder_create_union_vector@@Base>:
   290d8:	push	{r4, r5, r6, r7, r8, lr}
   290dc:	mov	r6, r0
   290e0:	sub	sp, sp, #16
   290e4:	mov	r0, r1
   290e8:	mov	r5, r1
   290ec:	mov	r4, r2
   290f0:	mov	r7, r3
   290f4:	bl	27dd0 <flatcc_builder_start_offset_vector@@Base>
   290f8:	cmp	r0, #0
   290fc:	beq	29118 <flatcc_builder_create_union_vector@@Base+0x40>
   29100:	mov	r3, #0
   29104:	mov	r0, r6
   29108:	str	r3, [r6]
   2910c:	str	r3, [r6, #4]
   29110:	add	sp, sp, #16
   29114:	pop	{r4, r5, r6, r7, r8, pc}
   29118:	mov	r1, r7
   2911c:	mov	r0, r5
   29120:	bl	27768 <flatcc_builder_extend_offset_vector@@Base>
   29124:	cmp	r0, #0
   29128:	beq	29100 <flatcc_builder_create_union_vector@@Base+0x28>
   2912c:	ldr	r8, [r5, #20]
   29130:	ldr	r3, [r5, #24]
   29134:	add	r1, r7, r8
   29138:	cmp	r1, r3
   2913c:	str	r1, [r5, #20]
   29140:	bcs	29238 <flatcc_builder_create_union_vector@@Base+0x160>
   29144:	ldr	r2, [r5, #16]
   29148:	adds	r8, r2, r8
   2914c:	beq	29100 <flatcc_builder_create_union_vector@@Base+0x28>
   29150:	mov	r0, r5
   29154:	bl	29044 <flatcc_builder_offset_vector_edit@@Base>
   29158:	cmp	r7, #0
   2915c:	movne	r1, r4
   29160:	subne	lr, r8, #1
   29164:	mov	r3, r0
   29168:	addne	r2, r1, r7, lsl #3
   2916c:	subne	ip, r0, #4
   29170:	beq	29190 <flatcc_builder_create_union_vector@@Base+0xb8>
   29174:	ldrb	r4, [r1]
   29178:	add	r1, r1, #8
   2917c:	strb	r4, [lr, #1]!
   29180:	ldr	r4, [r1, #-4]
   29184:	cmp	r2, r1
   29188:	str	r4, [ip, #4]!
   2918c:	bne	29174 <flatcc_builder_create_union_vector@@Base+0x9c>
   29190:	str	r7, [sp]
   29194:	mov	r2, r8
   29198:	mov	r1, r5
   2919c:	add	r0, sp, #8
   291a0:	bl	29058 <flatcc_builder_create_union_vector_direct@@Base>
   291a4:	ldr	r2, [r5, #20]
   291a8:	mov	r1, #0
   291ac:	ldr	r0, [r5, #16]
   291b0:	ldr	r7, [sp, #8]
   291b4:	ldr	r4, [sp, #12]
   291b8:	bl	145bc <memset@plt>
   291bc:	ldr	r3, [r5, #32]
   291c0:	ldr	r2, [r5, #64]	; 0x40
   291c4:	ldrh	lr, [r5, #130]	; 0x82
   291c8:	ldr	ip, [r3]
   291cc:	ldr	r1, [r3, #4]
   291d0:	ldrh	r0, [r5, #128]	; 0x80
   291d4:	sub	r2, r2, ip
   291d8:	cmp	r2, r1
   291dc:	movcs	r2, r1
   291e0:	cmp	r0, lr
   291e4:	ldr	r0, [r5, #60]	; 0x3c
   291e8:	ldr	r8, [r3, #8]
   291ec:	str	r2, [r5, #24]
   291f0:	add	r2, r0, ip
   291f4:	str	r2, [r5, #16]
   291f8:	str	r8, [r5, #20]
   291fc:	ldr	r2, [r5, #156]	; 0x9c
   29200:	str	ip, [r5, #28]
   29204:	str	r1, [r3, #4]
   29208:	strhcc	lr, [r5, #128]	; 0x80
   2920c:	ldrh	r1, [r3, #12]
   29210:	sub	r2, r2, #1
   29214:	sub	r3, r3, #36	; 0x24
   29218:	mov	r0, r6
   2921c:	str	r7, [r6]
   29220:	str	r4, [r6, #4]
   29224:	str	r2, [r5, #156]	; 0x9c
   29228:	strh	r1, [r5, #130]	; 0x82
   2922c:	str	r3, [r5, #32]
   29230:	add	sp, sp, #16
   29234:	pop	{r4, r5, r6, r7, r8, pc}
   29238:	add	r1, r1, #1
   2923c:	mvn	r2, #3
   29240:	mov	r0, r5
   29244:	bl	26190 <union_vector_tests@@Base+0x180>
   29248:	cmp	r0, #0
   2924c:	beq	29144 <flatcc_builder_create_union_vector@@Base+0x6c>
   29250:	b	29100 <flatcc_builder_create_union_vector@@Base+0x28>

00029254 <flatcc_builder_start_union_vector@@Base>:
   29254:	push	{r4, lr}
   29258:	mov	r1, #4
   2925c:	mov	r4, r0
   29260:	bl	26440 <flatcc_builder_default_alloc@@Base+0x23c>
   29264:	cmp	r0, #0
   29268:	bne	292b4 <flatcc_builder_start_union_vector@@Base+0x60>
   2926c:	ldr	r3, [r4, #32]
   29270:	mov	r2, #8
   29274:	mov	lr, #7
   29278:	str	r0, [r3, #20]
   2927c:	str	r2, [r3, #16]
   29280:	ldr	ip, [r4, #28]
   29284:	ldr	r2, [r4, #64]	; 0x40
   29288:	ldr	r1, [r4, #60]	; 0x3c
   2928c:	sub	r2, r2, ip
   29290:	cmn	r2, #4
   29294:	mvnhi	r2, #3
   29298:	strh	lr, [r3, #14]
   2929c:	add	r1, r1, ip
   292a0:	str	r2, [r4, #24]
   292a4:	mvn	r2, #3
   292a8:	str	r1, [r4, #16]
   292ac:	str	r2, [r3, #4]
   292b0:	pop	{r4, pc}
   292b4:	mvn	r0, #0
   292b8:	pop	{r4, pc}

000292bc <flatcc_builder_union_vector_edit@@Base>:
   292bc:	ldr	r0, [r0, #16]
   292c0:	bx	lr

000292c4 <flatcc_builder_union_vector_count@@Base>:
   292c4:	ldr	r3, [r0, #32]
   292c8:	ldr	r0, [r3, #20]
   292cc:	bx	lr

000292d0 <flatcc_builder_end_union_vector@@Base>:
   292d0:	ldr	r3, [r1, #32]
   292d4:	push	{r4, r5, r6, r7, r8, lr}
   292d8:	sub	sp, sp, #16
   292dc:	ldrh	r3, [r3, #14]
   292e0:	cmp	r3, #7
   292e4:	bne	2943c <flatcc_builder_end_union_vector@@Base+0x16c>
   292e8:	mov	r5, r0
   292ec:	mov	r0, r1
   292f0:	mov	r4, r1
   292f4:	bl	292c4 <flatcc_builder_union_vector_count@@Base>
   292f8:	ldr	r8, [r4, #20]
   292fc:	ldr	r3, [r4, #24]
   29300:	lsl	r7, r0, #2
   29304:	add	r1, r7, r0
   29308:	add	r1, r1, r8
   2930c:	cmp	r1, r3
   29310:	mov	r6, r0
   29314:	str	r1, [r4, #20]
   29318:	bcs	2940c <flatcc_builder_end_union_vector@@Base+0x13c>
   2931c:	ldr	r3, [r4, #16]
   29320:	adds	r8, r3, r8
   29324:	beq	29424 <flatcc_builder_end_union_vector@@Base+0x154>
   29328:	mov	r0, r4
   2932c:	bl	292bc <flatcc_builder_union_vector_edit@@Base>
   29330:	cmp	r6, #0
   29334:	add	r2, r8, r7
   29338:	subne	ip, r2, #1
   2933c:	subne	r1, r8, #4
   29340:	addne	r7, r0, r6, lsl #3
   29344:	beq	29364 <flatcc_builder_end_union_vector@@Base+0x94>
   29348:	ldrb	lr, [r0]
   2934c:	add	r0, r0, #8
   29350:	strb	lr, [ip, #1]!
   29354:	ldr	lr, [r0, #-4]
   29358:	cmp	r0, r7
   2935c:	str	lr, [r1, #4]!
   29360:	bne	29348 <flatcc_builder_end_union_vector@@Base+0x78>
   29364:	mov	r3, r8
   29368:	str	r6, [sp]
   2936c:	mov	r1, r4
   29370:	add	r0, sp, #8
   29374:	bl	29058 <flatcc_builder_create_union_vector_direct@@Base>
   29378:	ldr	r2, [r4, #20]
   2937c:	mov	r1, #0
   29380:	ldr	r0, [r4, #16]
   29384:	ldr	r7, [sp, #8]
   29388:	ldr	r6, [sp, #12]
   2938c:	bl	145bc <memset@plt>
   29390:	ldr	r3, [r4, #32]
   29394:	ldr	r2, [r4, #64]	; 0x40
   29398:	ldrh	lr, [r4, #130]	; 0x82
   2939c:	ldr	ip, [r3]
   293a0:	ldr	r1, [r3, #4]
   293a4:	ldrh	r0, [r4, #128]	; 0x80
   293a8:	sub	r2, r2, ip
   293ac:	cmp	r2, r1
   293b0:	movcs	r2, r1
   293b4:	cmp	r0, lr
   293b8:	ldr	r0, [r4, #60]	; 0x3c
   293bc:	ldr	r8, [r3, #8]
   293c0:	str	r2, [r4, #24]
   293c4:	add	r2, r0, ip
   293c8:	str	r2, [r4, #16]
   293cc:	str	r8, [r4, #20]
   293d0:	ldr	r2, [r4, #156]	; 0x9c
   293d4:	str	ip, [r4, #28]
   293d8:	str	r1, [r3, #4]
   293dc:	strhcc	lr, [r4, #128]	; 0x80
   293e0:	ldrh	r1, [r3, #12]
   293e4:	sub	r2, r2, #1
   293e8:	sub	r3, r3, #36	; 0x24
   293ec:	mov	r0, r5
   293f0:	str	r7, [r5]
   293f4:	str	r6, [r5, #4]
   293f8:	str	r2, [r4, #156]	; 0x9c
   293fc:	strh	r1, [r4, #130]	; 0x82
   29400:	str	r3, [r4, #32]
   29404:	add	sp, sp, #16
   29408:	pop	{r4, r5, r6, r7, r8, pc}
   2940c:	add	r1, r1, #1
   29410:	mvn	r2, #3
   29414:	mov	r0, r4
   29418:	bl	26190 <union_vector_tests@@Base+0x180>
   2941c:	cmp	r0, #0
   29420:	beq	2931c <flatcc_builder_end_union_vector@@Base+0x4c>
   29424:	mov	r3, #0
   29428:	mov	r0, r5
   2942c:	str	r3, [r5]
   29430:	str	r3, [r5, #4]
   29434:	add	sp, sp, #16
   29438:	pop	{r4, r5, r6, r7, r8, pc}
   2943c:	ldr	r3, [pc, #28]	; 29460 <flatcc_builder_end_union_vector@@Base+0x190>
   29440:	ldr	r1, [pc, #28]	; 29464 <flatcc_builder_end_union_vector@@Base+0x194>
   29444:	ldr	r0, [pc, #28]	; 29468 <flatcc_builder_end_union_vector@@Base+0x198>
   29448:	add	r3, pc, r3
   2944c:	ldr	r2, [pc, #24]	; 2946c <flatcc_builder_end_union_vector@@Base+0x19c>
   29450:	add	r3, r3, #968	; 0x3c8
   29454:	add	r1, pc, r1
   29458:	add	r0, pc, r0
   2945c:	bl	14610 <__assert_fail@plt>
   29460:	andeq	r8, r1, ip, ror #17
   29464:	andeq	r9, r1, r0, lsr r0
   29468:	andeq	r9, r1, r8, asr #6
   2946c:	andeq	r0, r0, r1, asr r6

00029470 <flatcc_builder_extend_union_vector@@Base>:
   29470:	ldr	ip, [r0, #32]
   29474:	push	{r4, r5, r6, lr}
   29478:	ldr	r3, [ip, #20]
   2947c:	adds	r2, r1, r3
   29480:	movcs	r3, #1
   29484:	movcc	r3, #0
   29488:	cmn	r2, #-536870911	; 0xe0000001
   2948c:	movls	r4, #0
   29490:	movhi	r4, #1
   29494:	orrs	r4, r3, r4
   29498:	bne	294e4 <flatcc_builder_extend_union_vector@@Base+0x74>
   2949c:	str	r2, [ip, #20]
   294a0:	ldr	r6, [r0, #20]
   294a4:	ldr	r3, [r0, #24]
   294a8:	add	r1, r6, r1, lsl #3
   294ac:	cmp	r1, r3
   294b0:	mov	r5, r0
   294b4:	str	r1, [r0, #20]
   294b8:	bcs	294c8 <flatcc_builder_extend_union_vector@@Base+0x58>
   294bc:	ldr	r0, [r5, #16]
   294c0:	add	r0, r0, r6
   294c4:	pop	{r4, r5, r6, pc}
   294c8:	add	r1, r1, #1
   294cc:	mvn	r2, #3
   294d0:	bl	26190 <union_vector_tests@@Base+0x180>
   294d4:	cmp	r0, #0
   294d8:	beq	294bc <flatcc_builder_extend_union_vector@@Base+0x4c>
   294dc:	mov	r0, r4
   294e0:	pop	{r4, r5, r6, pc}
   294e4:	bl	14848 <__assert_fail@plt+0x238>

000294e8 <flatcc_builder_truncate_union_vector@@Base>:
   294e8:	ldr	r3, [r0, #32]
   294ec:	push	{r4, lr}
   294f0:	ldrh	r2, [r3, #14]
   294f4:	cmp	r2, #7
   294f8:	bne	2953c <flatcc_builder_truncate_union_vector@@Base+0x54>
   294fc:	ldr	ip, [r3, #20]
   29500:	cmp	ip, r1
   29504:	bcc	29560 <flatcc_builder_truncate_union_vector@@Base+0x78>
   29508:	ldr	r2, [r3, #16]
   2950c:	sub	ip, ip, r1
   29510:	str	ip, [r3, #20]
   29514:	mul	r2, r2, r1
   29518:	ldr	r3, [r0, #20]
   2951c:	ldr	r1, [r0, #16]
   29520:	sub	r3, r3, r2
   29524:	str	r3, [r0, #20]
   29528:	add	r0, r1, r3
   2952c:	mov	r1, #0
   29530:	bl	145bc <memset@plt>
   29534:	mov	r0, #0
   29538:	pop	{r4, pc}
   2953c:	ldr	r3, [pc, #64]	; 29584 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   29540:	ldr	r1, [pc, #64]	; 29588 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   29544:	ldr	r0, [pc, #64]	; 2958c <flatcc_builder_truncate_union_vector@@Base+0xa4>
   29548:	add	r3, pc, r3
   2954c:	ldr	r2, [pc, #60]	; 29590 <flatcc_builder_truncate_union_vector@@Base+0xa8>
   29550:	add	r3, r3, #1000	; 0x3e8
   29554:	add	r1, pc, r1
   29558:	add	r0, pc, r0
   2955c:	bl	14610 <__assert_fail@plt>
   29560:	ldr	r3, [pc, #44]	; 29594 <flatcc_builder_truncate_union_vector@@Base+0xac>
   29564:	ldr	r1, [pc, #44]	; 29598 <flatcc_builder_truncate_union_vector@@Base+0xb0>
   29568:	ldr	r0, [pc, #44]	; 2959c <flatcc_builder_truncate_union_vector@@Base+0xb4>
   2956c:	add	r3, pc, r3
   29570:	ldr	r2, [pc, #40]	; 295a0 <flatcc_builder_truncate_union_vector@@Base+0xb8>
   29574:	add	r3, r3, #1000	; 0x3e8
   29578:	add	r1, pc, r1
   2957c:	add	r0, pc, r0
   29580:	bl	14610 <__assert_fail@plt>
   29584:	andeq	r8, r1, ip, ror #15
   29588:	andeq	r8, r1, r0, lsr pc
   2958c:	andeq	r9, r1, r8, asr #4
   29590:	andeq	r0, r0, r1, lsl #13
   29594:	andeq	r8, r1, r8, asr #15
   29598:	andeq	r8, r1, ip, lsl #30
   2959c:	andeq	r9, r1, r8, asr #2
   295a0:	andeq	r0, r0, r2, lsl #13

000295a4 <flatcc_builder_union_vector_push@@Base>:
   295a4:	ldr	ip, [r0, #32]
   295a8:	push	{r4, r5, r6, lr}
   295ac:	sub	sp, sp, #8
   295b0:	ldrh	r3, [ip, #14]
   295b4:	stm	sp, {r1, r2}
   295b8:	cmp	r3, #7
   295bc:	bne	2963c <flatcc_builder_union_vector_push@@Base+0x98>
   295c0:	ldr	r3, [ip, #20]
   295c4:	cmn	r3, #-536870911	; 0xe0000001
   295c8:	beq	2962c <flatcc_builder_union_vector_push@@Base+0x88>
   295cc:	add	r3, r3, #1
   295d0:	str	r3, [ip, #20]
   295d4:	ldr	r6, [r0, #20]
   295d8:	ldr	r2, [r0, #24]
   295dc:	add	r3, r6, #8
   295e0:	cmp	r3, r2
   295e4:	mov	r4, r0
   295e8:	mov	r5, sp
   295ec:	str	r3, [r0, #20]
   295f0:	bcs	29618 <flatcc_builder_union_vector_push@@Base+0x74>
   295f4:	ldr	r3, [r4, #16]
   295f8:	adds	r3, r3, r6
   295fc:	beq	29660 <flatcc_builder_union_vector_push@@Base+0xbc>
   29600:	ldm	r5, {r0, r1}
   29604:	mov	r2, r3
   29608:	stm	r3, {r0, r1}
   2960c:	mov	r0, r2
   29610:	add	sp, sp, #8
   29614:	pop	{r4, r5, r6, pc}
   29618:	mvn	r2, #3
   2961c:	add	r1, r6, #9
   29620:	bl	26190 <union_vector_tests@@Base+0x180>
   29624:	cmp	r0, #0
   29628:	beq	295f4 <flatcc_builder_union_vector_push@@Base+0x50>
   2962c:	mov	r2, #0
   29630:	mov	r0, r2
   29634:	add	sp, sp, #8
   29638:	pop	{r4, r5, r6, pc}
   2963c:	ldr	r3, [pc, #36]	; 29668 <flatcc_builder_union_vector_push@@Base+0xc4>
   29640:	ldr	r1, [pc, #36]	; 2966c <flatcc_builder_union_vector_push@@Base+0xc8>
   29644:	ldr	r0, [pc, #36]	; 29670 <flatcc_builder_union_vector_push@@Base+0xcc>
   29648:	add	r3, pc, r3
   2964c:	ldr	r2, [pc, #32]	; 29674 <flatcc_builder_union_vector_push@@Base+0xd0>
   29650:	add	r3, r3, #1040	; 0x410
   29654:	add	r1, pc, r1
   29658:	add	r0, pc, r0
   2965c:	bl	14610 <__assert_fail@plt>
   29660:	mov	r2, r3
   29664:	b	2960c <flatcc_builder_union_vector_push@@Base+0x68>
   29668:	andeq	r8, r1, ip, ror #13
   2966c:	andeq	r8, r1, r0, lsr lr
   29670:	andeq	r9, r1, r8, asr #2
   29674:	andeq	r0, r0, sp, lsl #13

00029678 <flatcc_builder_append_union_vector@@Base>:
   29678:	ldr	ip, [r0, #32]
   2967c:	push	{r4, r5, r6, r7, r8, lr}
   29680:	ldrh	r3, [ip, #14]
   29684:	cmp	r3, #7
   29688:	bne	29720 <flatcc_builder_append_union_vector@@Base+0xa8>
   2968c:	mov	r6, r1
   29690:	ldr	r1, [ip, #20]
   29694:	adds	r1, r2, r1
   29698:	movcs	lr, #1
   2969c:	movcc	lr, #0
   296a0:	cmn	r1, #-536870911	; 0xe0000001
   296a4:	movls	r3, #0
   296a8:	movhi	r3, #1
   296ac:	orrs	r8, lr, r3
   296b0:	bne	2971c <flatcc_builder_append_union_vector@@Base+0xa4>
   296b4:	str	r1, [ip, #20]
   296b8:	ldr	r7, [r0, #20]
   296bc:	lsl	r4, r2, #3
   296c0:	ldr	r3, [r0, #24]
   296c4:	add	r1, r4, r7
   296c8:	cmp	r1, r3
   296cc:	mov	r5, r0
   296d0:	str	r1, [r0, #20]
   296d4:	bcs	29700 <flatcc_builder_append_union_vector@@Base+0x88>
   296d8:	ldr	r3, [r5, #16]
   296dc:	adds	r3, r3, r7
   296e0:	beq	296f8 <flatcc_builder_append_union_vector@@Base+0x80>
   296e4:	mov	r0, r3
   296e8:	mov	r2, r4
   296ec:	mov	r1, r6
   296f0:	bl	14544 <memcpy@plt>
   296f4:	mov	r3, r0
   296f8:	mov	r0, r3
   296fc:	pop	{r4, r5, r6, r7, r8, pc}
   29700:	add	r1, r1, #1
   29704:	mvn	r2, #3
   29708:	bl	26190 <union_vector_tests@@Base+0x180>
   2970c:	cmp	r0, #0
   29710:	beq	296d8 <flatcc_builder_append_union_vector@@Base+0x60>
   29714:	mov	r3, r8
   29718:	b	296f8 <flatcc_builder_append_union_vector@@Base+0x80>
   2971c:	bl	14848 <__assert_fail@plt+0x238>
   29720:	ldr	r3, [pc, #32]	; 29748 <flatcc_builder_append_union_vector@@Base+0xd0>
   29724:	ldr	r1, [pc, #32]	; 2974c <flatcc_builder_append_union_vector@@Base+0xd4>
   29728:	add	r3, pc, r3
   2972c:	ldr	r0, [pc, #28]	; 29750 <flatcc_builder_append_union_vector@@Base+0xd8>
   29730:	add	r3, r3, #1072	; 0x430
   29734:	ldr	r2, [pc, #24]	; 29754 <flatcc_builder_append_union_vector@@Base+0xdc>
   29738:	add	r3, r3, #4
   2973c:	add	r1, pc, r1
   29740:	add	r0, pc, r0
   29744:	bl	14610 <__assert_fail@plt>
   29748:	andeq	r8, r1, ip, lsl #12
   2974c:	andeq	r8, r1, r8, asr #26
   29750:	andeq	r9, r1, r0, rrx
   29754:	muleq	r0, ip, r6

00029758 <flatcc_builder_create_string@@Base>:
   29758:	push	{r4, r5, r6, lr}
   2975c:	sub	sp, sp, #88	; 0x58
   29760:	ldr	lr, [r0, #136]	; 0x88
   29764:	mov	r4, r0
   29768:	add	r0, sp, #88	; 0x58
   2976c:	cmp	r2, #0
   29770:	sub	r3, lr, r2
   29774:	str	r2, [r0, #-76]!	; 0xffffffb4
   29778:	sub	r3, r3, #1
   2977c:	str	r0, [sp, #24]
   29780:	ldr	r5, [pc, #188]	; 29844 <flatcc_builder_create_string@@Base+0xec>
   29784:	moveq	r0, #1
   29788:	strne	r1, [sp, #32]
   2978c:	mov	ip, #4
   29790:	moveq	r1, r0
   29794:	movne	r1, #2
   29798:	and	r3, r3, #3
   2979c:	ldr	r0, [pc, #164]	; 29848 <flatcc_builder_create_string@@Base+0xf0>
   297a0:	str	ip, [sp, #28]
   297a4:	add	r5, pc, r5
   297a8:	addne	ip, r2, ip
   297ac:	add	r3, r3, #1
   297b0:	add	r1, r1, #1
   297b4:	add	ip, ip, r3
   297b8:	add	r6, sp, #88	; 0x58
   297bc:	strne	r2, [sp, #36]	; 0x24
   297c0:	add	r1, r6, r1, lsl #3
   297c4:	str	ip, [sp, #16]
   297c8:	ldr	r0, [r5, r0]
   297cc:	sub	r5, lr, ip
   297d0:	movne	r2, #3
   297d4:	moveq	r2, #2
   297d8:	cmp	lr, r5
   297dc:	str	r0, [r1, #-72]	; 0xffffffb8
   297e0:	str	r3, [r1, #-68]	; 0xffffffbc
   297e4:	str	r2, [sp, #20]
   297e8:	ble	2981c <flatcc_builder_create_string@@Base+0xc4>
   297ec:	ldr	r0, [r4, #36]	; 0x24
   297f0:	mov	r3, r5
   297f4:	str	ip, [sp]
   297f8:	add	r1, sp, #24
   297fc:	ldr	r6, [r4, #44]	; 0x2c
   29800:	blx	r6
   29804:	cmp	r0, #0
   29808:	bne	29820 <flatcc_builder_create_string@@Base+0xc8>
   2980c:	mov	r0, r5
   29810:	str	r5, [r4, #136]	; 0x88
   29814:	add	sp, sp, #88	; 0x58
   29818:	pop	{r4, r5, r6, pc}
   2981c:	bl	14810 <__assert_fail@plt+0x200>
   29820:	ldr	r3, [pc, #36]	; 2984c <flatcc_builder_create_string@@Base+0xf4>
   29824:	ldr	r1, [pc, #36]	; 29850 <flatcc_builder_create_string@@Base+0xf8>
   29828:	ldr	r0, [pc, #36]	; 29854 <flatcc_builder_create_string@@Base+0xfc>
   2982c:	add	r3, pc, r3
   29830:	ldr	r2, [pc, #32]	; 29858 <flatcc_builder_create_string@@Base+0x100>
   29834:	add	r3, r3, #28
   29838:	add	r1, pc, r1
   2983c:	add	r0, pc, r0
   29840:	bl	14610 <__assert_fail@plt>
   29844:	andeq	fp, r2, r4, asr r8
   29848:	andeq	r0, r0, r4, rrx
   2984c:	andeq	r8, r1, r8, lsl #10
   29850:	andeq	r8, r1, ip, asr #24
   29854:	ldrdeq	r8, [r1], -r0
   29858:	andeq	r0, r0, fp, lsl #5

0002985c <flatcc_builder_create_string_str@@Base>:
   2985c:	push	{r4, r5, r6, lr}
   29860:	mov	r5, r0
   29864:	mov	r0, r1
   29868:	mov	r4, r1
   2986c:	bl	14598 <strlen@plt>
   29870:	mov	r1, r4
   29874:	mov	r2, r0
   29878:	mov	r0, r5
   2987c:	pop	{r4, r5, r6, lr}
   29880:	b	29758 <flatcc_builder_create_string@@Base>

00029884 <flatcc_builder_create_string_strn@@Base>:
   29884:	push	{r4, r5, r6, lr}
   29888:	mov	r4, r1
   2988c:	mov	r6, r0
   29890:	mov	r1, #0
   29894:	mov	r0, r4
   29898:	mov	r5, r2
   2989c:	bl	145e0 <memchr@plt>
   298a0:	mov	r1, r4
   298a4:	cmp	r0, #0
   298a8:	subne	r5, r0, r4
   298ac:	mov	r2, r5
   298b0:	mov	r0, r6
   298b4:	pop	{r4, r5, r6, lr}
   298b8:	b	29758 <flatcc_builder_create_string@@Base>

000298bc <flatcc_builder_end_string@@Base>:
   298bc:	ldr	r3, [r0, #32]
   298c0:	push	{r4, r5, r6, lr}
   298c4:	ldrh	r2, [r3, #14]
   298c8:	cmp	r2, #6
   298cc:	bne	2999c <flatcc_builder_end_string@@Base+0xe0>
   298d0:	ldr	r2, [r3, #20]
   298d4:	ldr	r3, [r0, #20]
   298d8:	mov	r4, r0
   298dc:	cmp	r2, r3
   298e0:	bne	29974 <flatcc_builder_end_string@@Base+0xb8>
   298e4:	ldr	r1, [r0, #16]
   298e8:	bl	29758 <flatcc_builder_create_string@@Base>
   298ec:	subs	r5, r0, #0
   298f0:	beq	2996c <flatcc_builder_end_string@@Base+0xb0>
   298f4:	ldr	r2, [r4, #20]
   298f8:	mov	r1, #0
   298fc:	ldr	r0, [r4, #16]
   29900:	bl	145bc <memset@plt>
   29904:	ldr	r3, [r4, #32]
   29908:	ldr	r2, [r4, #64]	; 0x40
   2990c:	ldrh	lr, [r4, #130]	; 0x82
   29910:	ldr	ip, [r3]
   29914:	ldr	r1, [r3, #4]
   29918:	ldrh	r0, [r4, #128]	; 0x80
   2991c:	sub	r2, r2, ip
   29920:	cmp	r2, r1
   29924:	movcs	r2, r1
   29928:	cmp	r0, lr
   2992c:	ldr	r0, [r4, #60]	; 0x3c
   29930:	ldr	r6, [r3, #8]
   29934:	str	r2, [r4, #24]
   29938:	add	r2, r0, ip
   2993c:	str	r2, [r4, #16]
   29940:	str	r6, [r4, #20]
   29944:	ldr	r2, [r4, #156]	; 0x9c
   29948:	str	ip, [r4, #28]
   2994c:	str	r1, [r3, #4]
   29950:	strhcc	lr, [r4, #128]	; 0x80
   29954:	ldrh	r1, [r3, #12]
   29958:	sub	r2, r2, #1
   2995c:	sub	r3, r3, #36	; 0x24
   29960:	str	r2, [r4, #156]	; 0x9c
   29964:	strh	r1, [r4, #130]	; 0x82
   29968:	str	r3, [r4, #32]
   2996c:	mov	r0, r5
   29970:	pop	{r4, r5, r6, pc}
   29974:	ldr	r3, [pc, #72]	; 299c4 <flatcc_builder_end_string@@Base+0x108>
   29978:	ldr	r1, [pc, #72]	; 299c8 <flatcc_builder_end_string@@Base+0x10c>
   2997c:	add	r3, pc, r3
   29980:	ldr	r0, [pc, #68]	; 299cc <flatcc_builder_end_string@@Base+0x110>
   29984:	add	r3, r3, #1104	; 0x450
   29988:	ldr	r2, [pc, #64]	; 299d0 <flatcc_builder_end_string@@Base+0x114>
   2998c:	add	r3, r3, #8
   29990:	add	r1, pc, r1
   29994:	add	r0, pc, r0
   29998:	bl	14610 <__assert_fail@plt>
   2999c:	ldr	r3, [pc, #48]	; 299d4 <flatcc_builder_end_string@@Base+0x118>
   299a0:	ldr	r1, [pc, #48]	; 299d8 <flatcc_builder_end_string@@Base+0x11c>
   299a4:	add	r3, pc, r3
   299a8:	ldr	r0, [pc, #44]	; 299dc <flatcc_builder_end_string@@Base+0x120>
   299ac:	add	r3, r3, #1104	; 0x450
   299b0:	ldr	r2, [pc, #40]	; 299e0 <flatcc_builder_end_string@@Base+0x124>
   299b4:	add	r3, r3, #8
   299b8:	add	r1, pc, r1
   299bc:	add	r0, pc, r0
   299c0:	bl	14610 <__assert_fail@plt>
   299c4:			; <UNDEFINED> instruction: 0x000183b8
   299c8:	strdeq	r8, [r1], -r4
   299cc:	andeq	r8, r1, r0, asr #28
   299d0:	andeq	r0, r0, r5, asr #13
   299d4:	muleq	r1, r0, r3
   299d8:	andeq	r8, r1, ip, asr #21
   299dc:			; <UNDEFINED> instruction: 0x00018cb8
   299e0:	andeq	r0, r0, r4, asr #13

000299e4 <flatcc_builder_string_edit@@Base>:
   299e4:	ldr	r0, [r0, #16]
   299e8:	bx	lr

000299ec <flatcc_builder_string_len@@Base>:
   299ec:	ldr	r3, [r0, #32]
   299f0:	ldr	r0, [r3, #20]
   299f4:	bx	lr

000299f8 <flatcc_builder_table_add@@Base>:
   299f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   299fc:	mov	r4, r0
   29a00:	ldr	r0, [r0, #32]
   29a04:	ldrh	r0, [r0, #14]
   29a08:	cmp	r0, #3
   29a0c:	bne	29b24 <flatcc_builder_table_add@@Base+0x12c>
   29a10:	ldr	r0, [pc, #308]	; 29b4c <flatcc_builder_table_add@@Base+0x154>
   29a14:	cmp	r1, r0
   29a18:	bhi	29afc <flatcc_builder_table_add@@Base+0x104>
   29a1c:	ldrh	r0, [r4, #130]	; 0x82
   29a20:	lsl	r8, r1, #1
   29a24:	cmp	r0, r3
   29a28:	ldr	r0, [r4, #4]
   29a2c:	strhcc	r3, [r4, #130]	; 0x82
   29a30:	add	lr, r0, r8
   29a34:	ldrh	r7, [r0, r8]
   29a38:	cmp	r7, #0
   29a3c:	bne	29ad4 <flatcc_builder_table_add@@Base+0xdc>
   29a40:	ldr	ip, [r4, #12]
   29a44:	ldr	r9, [pc, #260]	; 29b50 <flatcc_builder_table_add@@Base+0x158>
   29a48:	eor	ip, ip, r1
   29a4c:	ldr	r0, [r4, #20]
   29a50:	mul	ip, r9, ip
   29a54:	sub	r6, r3, #1
   29a58:	eor	ip, ip, r2
   29a5c:	rsb	r3, r3, #0
   29a60:	add	r6, r6, r0
   29a64:	and	r6, r6, r3
   29a68:	mul	ip, r9, ip
   29a6c:	ldr	r3, [r4, #24]
   29a70:	add	r2, r2, r6
   29a74:	cmp	r2, r3
   29a78:	uxth	r5, r1
   29a7c:	str	ip, [r4, #12]
   29a80:	str	r2, [r4, #20]
   29a84:	bcs	29aac <flatcc_builder_table_add@@Base+0xb4>
   29a88:	add	r3, r6, #4
   29a8c:	strh	r3, [lr]
   29a90:	ldrh	r3, [r4, #8]
   29a94:	ldr	r0, [r4, #16]
   29a98:	cmp	r3, r5
   29a9c:	addls	r5, r5, #1
   29aa0:	strhls	r5, [r4, #8]
   29aa4:	add	r0, r0, r6
   29aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29aac:	add	r1, r2, #1
   29ab0:	mov	r0, r4
   29ab4:	ldr	r2, [pc, #152]	; 29b54 <flatcc_builder_table_add@@Base+0x15c>
   29ab8:	bl	26190 <union_vector_tests@@Base+0x180>
   29abc:	cmp	r0, #0
   29ac0:	ldreq	lr, [r4, #4]
   29ac4:	addeq	lr, lr, r8
   29ac8:	beq	29a88 <flatcc_builder_table_add@@Base+0x90>
   29acc:	mov	r0, r7
   29ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29ad4:	ldr	r3, [pc, #124]	; 29b58 <flatcc_builder_table_add@@Base+0x160>
   29ad8:	ldr	r1, [pc, #124]	; 29b5c <flatcc_builder_table_add@@Base+0x164>
   29adc:	add	r3, pc, r3
   29ae0:	ldr	r0, [pc, #120]	; 29b60 <flatcc_builder_table_add@@Base+0x168>
   29ae4:	add	r3, r3, #1136	; 0x470
   29ae8:	ldr	r2, [pc, #116]	; 29b64 <flatcc_builder_table_add@@Base+0x16c>
   29aec:	add	r3, r3, #4
   29af0:	add	r1, pc, r1
   29af4:	add	r0, pc, r0
   29af8:	bl	14610 <__assert_fail@plt>
   29afc:	ldr	r3, [pc, #100]	; 29b68 <flatcc_builder_table_add@@Base+0x170>
   29b00:	ldr	r1, [pc, #100]	; 29b6c <flatcc_builder_table_add@@Base+0x174>
   29b04:	add	r3, pc, r3
   29b08:	ldr	r0, [pc, #96]	; 29b70 <flatcc_builder_table_add@@Base+0x178>
   29b0c:	add	r3, r3, #1136	; 0x470
   29b10:	ldr	r2, [pc, #92]	; 29b74 <flatcc_builder_table_add@@Base+0x17c>
   29b14:	add	r3, r3, #4
   29b18:	add	r1, pc, r1
   29b1c:	add	r0, pc, r0
   29b20:	bl	14610 <__assert_fail@plt>
   29b24:	ldr	r3, [pc, #76]	; 29b78 <flatcc_builder_table_add@@Base+0x180>
   29b28:	ldr	r1, [pc, #76]	; 29b7c <flatcc_builder_table_add@@Base+0x184>
   29b2c:	add	r3, pc, r3
   29b30:	ldr	r0, [pc, #72]	; 29b80 <flatcc_builder_table_add@@Base+0x188>
   29b34:	add	r3, r3, #1136	; 0x470
   29b38:	ldr	r2, [pc, #68]	; 29b84 <flatcc_builder_table_add@@Base+0x18c>
   29b3c:	add	r3, r3, #4
   29b40:	add	r1, pc, r1
   29b44:	add	r0, pc, r0
   29b48:	bl	14610 <__assert_fail@plt>
   29b4c:	strdeq	r7, [r0], -ip
   29b50:			; <UNDEFINED> instruction: 0x9e3779b1
   29b54:	strdeq	pc, [r0], -ip
   29b58:	andeq	r8, r1, r8, asr r2
   29b5c:	muleq	r1, r4, r9
   29b60:	andeq	r8, r1, r8, lsl sl
   29b64:	strdeq	r0, [r0], -r8
   29b68:	andeq	r8, r1, r0, lsr r2
   29b6c:	andeq	r8, r1, ip, ror #18
   29b70:	ldrdeq	r8, [r1], -ip
   29b74:	andeq	r0, r0, lr, ror #13
   29b78:	andeq	r8, r1, r8, lsl #4
   29b7c:	andeq	r8, r1, r4, asr #18
   29b80:	andeq	r8, r1, ip, lsl ip
   29b84:	andeq	r0, r0, sp, ror #13

00029b88 <flatcc_builder_table_edit@@Base>:
   29b88:	ldr	r3, [r0, #32]
   29b8c:	ldrh	r3, [r3, #14]
   29b90:	cmp	r3, #3
   29b94:	bne	29bac <flatcc_builder_table_edit@@Base+0x24>
   29b98:	ldr	r3, [r0, #20]
   29b9c:	ldr	r0, [r0, #16]
   29ba0:	sub	r1, r3, r1
   29ba4:	add	r0, r0, r1
   29ba8:	bx	lr
   29bac:	ldr	r3, [pc, #32]	; 29bd4 <flatcc_builder_table_edit@@Base+0x4c>
   29bb0:	ldr	r1, [pc, #32]	; 29bd8 <flatcc_builder_table_edit@@Base+0x50>
   29bb4:	ldr	r0, [pc, #32]	; 29bdc <flatcc_builder_table_edit@@Base+0x54>
   29bb8:	add	r3, pc, r3
   29bbc:	push	{r4, lr}
   29bc0:	add	r3, r3, #1168	; 0x490
   29bc4:	ldr	r2, [pc, #20]	; 29be0 <flatcc_builder_table_edit@@Base+0x58>
   29bc8:	add	r1, pc, r1
   29bcc:	add	r0, pc, r0
   29bd0:	bl	14610 <__assert_fail@plt>
   29bd4:	andeq	r8, r1, ip, ror r1
   29bd8:			; <UNDEFINED> instruction: 0x000188bc
   29bdc:	muleq	r1, r4, fp
   29be0:	andeq	r0, r0, r2, lsl #14

00029be4 <flatcc_builder_table_add_copy@@Base>:
   29be4:	push	{r4, r5, r6, lr}
   29be8:	mov	r4, r3
   29bec:	mov	r6, r2
   29bf0:	ldrh	r3, [sp, #16]
   29bf4:	mov	r2, r4
   29bf8:	bl	299f8 <flatcc_builder_table_add@@Base>
   29bfc:	subs	r5, r0, #0
   29c00:	beq	29c10 <flatcc_builder_table_add_copy@@Base+0x2c>
   29c04:	mov	r2, r4
   29c08:	mov	r1, r6
   29c0c:	bl	14544 <memcpy@plt>
   29c10:	mov	r0, r5
   29c14:	pop	{r4, r5, r6, pc}

00029c18 <flatcc_builder_table_add_offset@@Base>:
   29c18:	ldr	r3, [r0, #32]
   29c1c:	push	{r4, r5, r6, r7, r8, lr}
   29c20:	ldrh	r3, [r3, #14]
   29c24:	cmp	r3, #3
   29c28:	bne	29d40 <flatcc_builder_table_add_offset@@Base+0x128>
   29c2c:	ldr	r3, [pc, #308]	; 29d68 <flatcc_builder_table_add_offset@@Base+0x150>
   29c30:	cmp	r1, r3
   29c34:	bhi	29d18 <flatcc_builder_table_add_offset@@Base+0x100>
   29c38:	ldr	r3, [r0, #4]
   29c3c:	lsl	r7, r1, #1
   29c40:	mov	r4, r0
   29c44:	ldrh	r6, [r3, r7]
   29c48:	add	ip, r3, r7
   29c4c:	cmp	r6, #0
   29c50:	bne	29cf0 <flatcc_builder_table_add_offset@@Base+0xd8>
   29c54:	ldr	r3, [r0, #12]
   29c58:	ldr	r2, [pc, #268]	; 29d6c <flatcc_builder_table_add_offset@@Base+0x154>
   29c5c:	eor	r3, r3, r1
   29c60:	ldr	r5, [r0, #20]
   29c64:	mul	r3, r2, r3
   29c68:	add	r5, r5, #3
   29c6c:	eor	r3, r3, #4
   29c70:	bic	r5, r5, #3
   29c74:	mul	r3, r2, r3
   29c78:	ldr	lr, [r0, #24]
   29c7c:	add	r2, r5, #4
   29c80:	cmp	r2, lr
   29c84:	uxth	r8, r1
   29c88:	str	r3, [r0, #12]
   29c8c:	str	r2, [r0, #20]
   29c90:	bhi	29ccc <flatcc_builder_table_add_offset@@Base+0xb4>
   29c94:	uxth	r2, r5
   29c98:	add	r3, r2, #4
   29c9c:	strh	r3, [ip]
   29ca0:	ldrh	r3, [r4, #8]
   29ca4:	ldr	r0, [r4, #16]
   29ca8:	cmp	r3, r8
   29cac:	ldr	r3, [r4]
   29cb0:	addls	r1, r8, #1
   29cb4:	strhls	r1, [r4, #8]
   29cb8:	add	r1, r3, #2
   29cbc:	str	r1, [r4]
   29cc0:	add	r0, r0, r5
   29cc4:	strh	r2, [r3]
   29cc8:	pop	{r4, r5, r6, r7, r8, pc}
   29ccc:	mov	r1, r2
   29cd0:	ldr	r2, [pc, #152]	; 29d70 <flatcc_builder_table_add_offset@@Base+0x158>
   29cd4:	bl	26190 <union_vector_tests@@Base+0x180>
   29cd8:	cmp	r0, #0
   29cdc:	ldreq	ip, [r4, #4]
   29ce0:	addeq	ip, ip, r7
   29ce4:	beq	29c94 <flatcc_builder_table_add_offset@@Base+0x7c>
   29ce8:	mov	r0, r6
   29cec:	pop	{r4, r5, r6, r7, r8, pc}
   29cf0:	ldr	r3, [pc, #124]	; 29d74 <flatcc_builder_table_add_offset@@Base+0x15c>
   29cf4:	ldr	r1, [pc, #124]	; 29d78 <flatcc_builder_table_add_offset@@Base+0x160>
   29cf8:	add	r3, pc, r3
   29cfc:	ldr	r0, [pc, #120]	; 29d7c <flatcc_builder_table_add_offset@@Base+0x164>
   29d00:	add	r3, r3, #1184	; 0x4a0
   29d04:	ldr	r2, [pc, #116]	; 29d80 <flatcc_builder_table_add_offset@@Base+0x168>
   29d08:	add	r3, r3, #12
   29d0c:	add	r1, pc, r1
   29d10:	add	r0, pc, r0
   29d14:	bl	14610 <__assert_fail@plt>
   29d18:	ldr	r3, [pc, #100]	; 29d84 <flatcc_builder_table_add_offset@@Base+0x16c>
   29d1c:	ldr	r1, [pc, #100]	; 29d88 <flatcc_builder_table_add_offset@@Base+0x170>
   29d20:	add	r3, pc, r3
   29d24:	ldr	r0, [pc, #96]	; 29d8c <flatcc_builder_table_add_offset@@Base+0x174>
   29d28:	add	r3, r3, #1184	; 0x4a0
   29d2c:	ldr	r2, [pc, #92]	; 29d90 <flatcc_builder_table_add_offset@@Base+0x178>
   29d30:	add	r3, r3, #12
   29d34:	add	r1, pc, r1
   29d38:	add	r0, pc, r0
   29d3c:	bl	14610 <__assert_fail@plt>
   29d40:	ldr	r3, [pc, #76]	; 29d94 <flatcc_builder_table_add_offset@@Base+0x17c>
   29d44:	ldr	r1, [pc, #76]	; 29d98 <flatcc_builder_table_add_offset@@Base+0x180>
   29d48:	add	r3, pc, r3
   29d4c:	ldr	r0, [pc, #72]	; 29d9c <flatcc_builder_table_add_offset@@Base+0x184>
   29d50:	add	r3, r3, #1184	; 0x4a0
   29d54:	ldr	r2, [pc, #68]	; 29da0 <flatcc_builder_table_add_offset@@Base+0x188>
   29d58:	add	r3, r3, #12
   29d5c:	add	r1, pc, r1
   29d60:	add	r0, pc, r0
   29d64:	bl	14610 <__assert_fail@plt>
   29d68:	strdeq	r7, [r0], -ip
   29d6c:			; <UNDEFINED> instruction: 0x9e3779b1
   29d70:	strdeq	pc, [r0], -ip
   29d74:	andeq	r8, r1, ip, lsr r0
   29d78:	andeq	r8, r1, r8, ror r7
   29d7c:	strdeq	r8, [r1], -ip
   29d80:	andeq	r0, r0, fp, lsl r7
   29d84:	andeq	r8, r1, r4, lsl r0
   29d88:	andeq	r8, r1, r0, asr r7
   29d8c:	andeq	r8, r1, r0, asr #21
   29d90:	andeq	r0, r0, r4, lsl r7
   29d94:	andeq	r7, r1, ip, ror #31
   29d98:	andeq	r8, r1, r8, lsr #14
   29d9c:	andeq	r8, r1, r0, lsl #20
   29da0:	andeq	r0, r0, r3, lsl r7

00029da4 <flatcc_builder_table_add_union@@Base>:
   29da4:	push	{r4, r5, r6, r7, lr}
   29da8:	sub	sp, sp, #12
   29dac:	add	ip, sp, #8
   29db0:	stmdb	ip, {r2, r3}
   29db4:	ldr	r3, [r0, #32]
   29db8:	ldrb	r5, [sp]
   29dbc:	ldr	r6, [sp, #4]
   29dc0:	ldrh	r3, [r3, #14]
   29dc4:	cmp	r3, #3
   29dc8:	bne	29e50 <flatcc_builder_table_add_union@@Base+0xac>
   29dcc:	cmp	r5, #0
   29dd0:	mov	r4, r0
   29dd4:	mov	r7, r1
   29dd8:	beq	29e20 <flatcc_builder_table_add_union@@Base+0x7c>
   29ddc:	cmp	r6, #0
   29de0:	beq	29df4 <flatcc_builder_table_add_union@@Base+0x50>
   29de4:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   29de8:	cmp	r0, #0
   29dec:	strne	r6, [r0]
   29df0:	beq	29ea0 <flatcc_builder_table_add_union@@Base+0xfc>
   29df4:	mov	r3, #1
   29df8:	sub	r1, r7, #1
   29dfc:	mov	r0, r4
   29e00:	mov	r2, r3
   29e04:	bl	299f8 <flatcc_builder_table_add@@Base>
   29e08:	cmp	r0, #0
   29e0c:	beq	29e78 <flatcc_builder_table_add_union@@Base+0xd4>
   29e10:	strb	r5, [r0]
   29e14:	mov	r0, #0
   29e18:	add	sp, sp, #12
   29e1c:	pop	{r4, r5, r6, r7, pc}
   29e20:	cmp	r6, #0
   29e24:	beq	29df4 <flatcc_builder_table_add_union@@Base+0x50>
   29e28:	ldr	r3, [pc, #152]	; 29ec8 <flatcc_builder_table_add_union@@Base+0x124>
   29e2c:	ldr	r1, [pc, #152]	; 29ecc <flatcc_builder_table_add_union@@Base+0x128>
   29e30:	add	r3, pc, r3
   29e34:	ldr	r0, [pc, #148]	; 29ed0 <flatcc_builder_table_add_union@@Base+0x12c>
   29e38:	add	r3, r3, #1216	; 0x4c0
   29e3c:	ldr	r2, [pc, #144]	; 29ed4 <flatcc_builder_table_add_union@@Base+0x130>
   29e40:	add	r3, r3, #12
   29e44:	add	r1, pc, r1
   29e48:	add	r0, pc, r0
   29e4c:	bl	14610 <__assert_fail@plt>
   29e50:	ldr	r3, [pc, #128]	; 29ed8 <flatcc_builder_table_add_union@@Base+0x134>
   29e54:	ldr	r1, [pc, #128]	; 29edc <flatcc_builder_table_add_union@@Base+0x138>
   29e58:	add	r3, pc, r3
   29e5c:	ldr	r0, [pc, #124]	; 29ee0 <flatcc_builder_table_add_union@@Base+0x13c>
   29e60:	add	r3, r3, #1216	; 0x4c0
   29e64:	ldr	r2, [pc, #120]	; 29ee4 <flatcc_builder_table_add_union@@Base+0x140>
   29e68:	add	r3, r3, #12
   29e6c:	add	r1, pc, r1
   29e70:	add	r0, pc, r0
   29e74:	bl	14610 <__assert_fail@plt>
   29e78:	ldr	r3, [pc, #104]	; 29ee8 <flatcc_builder_table_add_union@@Base+0x144>
   29e7c:	ldr	r1, [pc, #104]	; 29eec <flatcc_builder_table_add_union@@Base+0x148>
   29e80:	add	r3, pc, r3
   29e84:	ldr	r0, [pc, #100]	; 29ef0 <flatcc_builder_table_add_union@@Base+0x14c>
   29e88:	add	r3, r3, #1216	; 0x4c0
   29e8c:	ldr	r2, [pc, #96]	; 29ef4 <flatcc_builder_table_add_union@@Base+0x150>
   29e90:	add	r3, r3, #12
   29e94:	add	r1, pc, r1
   29e98:	add	r0, pc, r0
   29e9c:	bl	14610 <__assert_fail@plt>
   29ea0:	ldr	r3, [pc, #80]	; 29ef8 <flatcc_builder_table_add_union@@Base+0x154>
   29ea4:	ldr	r1, [pc, #80]	; 29efc <flatcc_builder_table_add_union@@Base+0x158>
   29ea8:	add	r3, pc, r3
   29eac:	ldr	r0, [pc, #76]	; 29f00 <flatcc_builder_table_add_union@@Base+0x15c>
   29eb0:	add	r3, r3, #1216	; 0x4c0
   29eb4:	ldr	r2, [pc, #72]	; 29f04 <flatcc_builder_table_add_union@@Base+0x160>
   29eb8:	add	r3, r3, #12
   29ebc:	add	r1, pc, r1
   29ec0:	add	r0, pc, r0
   29ec4:	bl	14610 <__assert_fail@plt>
   29ec8:	andeq	r7, r1, r4, lsl #30
   29ecc:	andeq	r8, r1, r0, asr #12
   29ed0:	strdeq	r8, [r1], -r4
   29ed4:	andeq	r0, r0, pc, ror #11
   29ed8:	ldrdeq	r7, [r1], -ip
   29edc:	andeq	r8, r1, r8, lsl r6
   29ee0:	strdeq	r8, [r1], -r0
   29ee4:	andeq	r0, r0, lr, ror #11
   29ee8:			; <UNDEFINED> instruction: 0x00017eb4
   29eec:	strdeq	r8, [r1], -r0
   29ef0:	ldrdeq	r8, [r1], -r4
   29ef4:	strdeq	r0, [r0], -r6
   29ef8:	andeq	r7, r1, ip, lsl #29
   29efc:	andeq	r8, r1, r8, asr #11
   29f00:	andeq	r8, r1, r0, lsr #19
   29f04:	strdeq	r0, [r0], -r2

00029f08 <flatcc_builder_table_add_union_vector@@Base>:
   29f08:	push	{r4, r5, r6, r7, lr}
   29f0c:	sub	sp, sp, #12
   29f10:	add	ip, sp, #8
   29f14:	stmdb	ip, {r2, r3}
   29f18:	ldr	r3, [r0, #32]
   29f1c:	ldr	r4, [sp]
   29f20:	ldr	r6, [sp, #4]
   29f24:	ldrh	r3, [r3, #14]
   29f28:	cmp	r3, #3
   29f2c:	bne	29fd0 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   29f30:	clz	r3, r6
   29f34:	clz	r2, r4
   29f38:	lsr	r3, r3, #5
   29f3c:	lsr	r2, r2, #5
   29f40:	cmp	r2, r3
   29f44:	beq	29f64 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   29f48:	adds	r4, r4, #0
   29f4c:	movne	r4, #1
   29f50:	cmp	r4, r3
   29f54:	mvnne	r0, #0
   29f58:	beq	29ff8 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   29f5c:	add	sp, sp, #12
   29f60:	pop	{r4, r5, r6, r7, pc}
   29f64:	cmp	r4, #0
   29f68:	moveq	r0, r4
   29f6c:	beq	29f5c <flatcc_builder_table_add_union_vector@@Base+0x54>
   29f70:	mov	r7, r1
   29f74:	sub	r1, r1, #1
   29f78:	mov	r5, r0
   29f7c:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   29f80:	cmp	r0, #0
   29f84:	beq	2a020 <flatcc_builder_table_add_union_vector@@Base+0x118>
   29f88:	str	r4, [r0]
   29f8c:	mov	r1, r7
   29f90:	mov	r0, r5
   29f94:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   29f98:	cmp	r0, #0
   29f9c:	strne	r6, [r0]
   29fa0:	movne	r0, #0
   29fa4:	bne	29f5c <flatcc_builder_table_add_union_vector@@Base+0x54>
   29fa8:	ldr	r3, [pc, #152]	; 2a048 <flatcc_builder_table_add_union_vector@@Base+0x140>
   29fac:	ldr	r1, [pc, #152]	; 2a04c <flatcc_builder_table_add_union_vector@@Base+0x144>
   29fb0:	add	r3, pc, r3
   29fb4:	ldr	r0, [pc, #148]	; 2a050 <flatcc_builder_table_add_union_vector@@Base+0x148>
   29fb8:	add	r3, r3, #1248	; 0x4e0
   29fbc:	ldr	r2, [pc, #144]	; 2a054 <flatcc_builder_table_add_union_vector@@Base+0x14c>
   29fc0:	add	r3, r3, #12
   29fc4:	add	r1, pc, r1
   29fc8:	add	r0, pc, r0
   29fcc:	bl	14610 <__assert_fail@plt>
   29fd0:	ldr	r3, [pc, #128]	; 2a058 <flatcc_builder_table_add_union_vector@@Base+0x150>
   29fd4:	ldr	r1, [pc, #128]	; 2a05c <flatcc_builder_table_add_union_vector@@Base+0x154>
   29fd8:	add	r3, pc, r3
   29fdc:	ldr	r0, [pc, #124]	; 2a060 <flatcc_builder_table_add_union_vector@@Base+0x158>
   29fe0:	add	r3, r3, #1248	; 0x4e0
   29fe4:	mov	r2, #1536	; 0x600
   29fe8:	add	r3, r3, #12
   29fec:	add	r1, pc, r1
   29ff0:	add	r0, pc, r0
   29ff4:	bl	14610 <__assert_fail@plt>
   29ff8:	ldr	r3, [pc, #100]	; 2a064 <flatcc_builder_table_add_union_vector@@Base+0x15c>
   29ffc:	ldr	r1, [pc, #100]	; 2a068 <flatcc_builder_table_add_union_vector@@Base+0x160>
   2a000:	add	r3, pc, r3
   2a004:	ldr	r0, [pc, #96]	; 2a06c <flatcc_builder_table_add_union_vector@@Base+0x164>
   2a008:	add	r3, r3, #1248	; 0x4e0
   2a00c:	ldr	r2, [pc, #92]	; 2a070 <flatcc_builder_table_add_union_vector@@Base+0x168>
   2a010:	add	r3, r3, #12
   2a014:	add	r1, pc, r1
   2a018:	add	r0, pc, r0
   2a01c:	bl	14610 <__assert_fail@plt>
   2a020:	ldr	r3, [pc, #76]	; 2a074 <flatcc_builder_table_add_union_vector@@Base+0x16c>
   2a024:	ldr	r1, [pc, #76]	; 2a078 <flatcc_builder_table_add_union_vector@@Base+0x170>
   2a028:	add	r3, pc, r3
   2a02c:	ldr	r0, [pc, #72]	; 2a07c <flatcc_builder_table_add_union_vector@@Base+0x174>
   2a030:	add	r3, r3, #1248	; 0x4e0
   2a034:	ldr	r2, [pc, #68]	; 2a080 <flatcc_builder_table_add_union_vector@@Base+0x178>
   2a038:	add	r3, r3, #12
   2a03c:	add	r1, pc, r1
   2a040:	add	r0, pc, r0
   2a044:	bl	14610 <__assert_fail@plt>
   2a048:	andeq	r7, r1, r4, lsl #27
   2a04c:	andeq	r8, r1, r0, asr #9
   2a050:	muleq	r1, r8, r8
   2a054:	andeq	r0, r0, r8, lsl #12
   2a058:	andeq	r7, r1, ip, asr sp
   2a05c:	muleq	r1, r8, r4
   2a060:	andeq	r8, r1, r0, ror r7
   2a064:	andeq	r7, r1, r4, lsr sp
   2a068:	andeq	r8, r1, r0, ror r4
   2a06c:	andeq	r8, r1, r0, ror #16
   2a070:	andeq	r0, r0, r1, lsl #12
   2a074:	andeq	r7, r1, ip, lsl #26
   2a078:	andeq	r8, r1, r8, asr #8
   2a07c:	andeq	r8, r1, r0, lsr #16
   2a080:	andeq	r0, r0, r4, lsl #12

0002a084 <flatcc_builder_push_buffer_alignment@@Base>:
   2a084:	mov	r3, r0
   2a088:	mov	r2, #4
   2a08c:	ldrh	r0, [r0, #128]	; 0x80
   2a090:	strh	r2, [r3, #128]	; 0x80
   2a094:	bx	lr

0002a098 <flatcc_builder_pop_buffer_alignment@@Base>:
   2a098:	ldrh	r3, [r0, #128]	; 0x80
   2a09c:	cmp	r3, r1
   2a0a0:	strhcc	r1, [r0, #128]	; 0x80
   2a0a4:	bx	lr

0002a0a8 <flatcc_builder_get_buffer_alignment@@Base>:
   2a0a8:	ldrh	r0, [r0, #128]	; 0x80
   2a0ac:	bx	lr

0002a0b0 <flatcc_builder_set_vtable_clustering@@Base>:
   2a0b0:	clz	r1, r1
   2a0b4:	lsr	r1, r1, #5
   2a0b8:	str	r1, [r0, #180]	; 0xb4
   2a0bc:	bx	lr

0002a0c0 <flatcc_builder_set_block_align@@Base>:
   2a0c0:	strh	r1, [r0, #132]	; 0x84
   2a0c4:	bx	lr

0002a0c8 <flatcc_builder_get_level@@Base>:
   2a0c8:	ldr	r0, [r0, #156]	; 0x9c
   2a0cc:	bx	lr

0002a0d0 <flatcc_builder_set_max_level@@Base>:
   2a0d0:	ldr	r3, [r0, #160]	; 0xa0
   2a0d4:	str	r1, [r0, #176]	; 0xb0
   2a0d8:	cmp	r1, r3
   2a0dc:	strgt	r1, [r0, #160]	; 0xa0
   2a0e0:	bx	lr

0002a0e4 <flatcc_builder_get_buffer_size@@Base>:
   2a0e4:	ldr	r2, [r0, #140]	; 0x8c
   2a0e8:	ldr	r0, [r0, #136]	; 0x88
   2a0ec:	sub	r0, r2, r0
   2a0f0:	bx	lr

0002a0f4 <flatcc_builder_get_buffer_start@@Base>:
   2a0f4:	ldr	r0, [r0, #136]	; 0x88
   2a0f8:	bx	lr

0002a0fc <flatcc_builder_get_buffer_end@@Base>:
   2a0fc:	ldr	r0, [r0, #140]	; 0x8c
   2a100:	bx	lr

0002a104 <flatcc_builder_set_vtable_cache_limit@@Base>:
   2a104:	str	r1, [r0, #172]	; 0xac
   2a108:	bx	lr

0002a10c <flatcc_builder_set_identifier@@Base>:
   2a10c:	ldr	r3, [pc, #32]	; 2a134 <flatcc_builder_set_identifier@@Base+0x28>
   2a110:	cmp	r1, #0
   2a114:	add	r3, pc, r3
   2a118:	beq	2a128 <flatcc_builder_set_identifier@@Base+0x1c>
   2a11c:	ldr	r3, [r1]
   2a120:	str	r3, [r0, #168]	; 0xa8
   2a124:	bx	lr
   2a128:	ldr	r2, [pc, #8]	; 2a138 <flatcc_builder_set_identifier@@Base+0x2c>
   2a12c:	ldr	r1, [r3, r2]
   2a130:	b	2a11c <flatcc_builder_set_identifier@@Base+0x10>
   2a134:	andeq	sl, r2, r4, ror #29
   2a138:	andeq	r0, r0, r4, rrx

0002a13c <flatcc_builder_get_type@@Base>:
   2a13c:	ldr	r0, [r0, #32]
   2a140:	cmp	r0, #0
   2a144:	ldrhne	r0, [r0, #14]
   2a148:	bx	lr

0002a14c <flatcc_builder_get_type_at@@Base>:
   2a14c:	cmp	r1, #0
   2a150:	ble	2a178 <flatcc_builder_get_type_at@@Base+0x2c>
   2a154:	ldr	r3, [r0, #156]	; 0x9c
   2a158:	cmp	r1, r3
   2a15c:	bgt	2a178 <flatcc_builder_get_type_at@@Base+0x2c>
   2a160:	sub	r1, r1, r3
   2a164:	ldr	r3, [r0, #32]
   2a168:	add	r1, r1, r1, lsl #3
   2a16c:	add	r1, r3, r1, lsl #2
   2a170:	ldrh	r0, [r1, #14]
   2a174:	bx	lr
   2a178:	mov	r0, #0
   2a17c:	bx	lr

0002a180 <flatcc_builder_get_direct_buffer@@Base>:
   2a180:	ldr	r3, [r0, #184]	; 0xb8
   2a184:	cmp	r3, #0
   2a188:	beq	2a19c <flatcc_builder_get_direct_buffer@@Base+0x1c>
   2a18c:	ldr	r2, [r0, #188]	; 0xbc
   2a190:	ldr	r3, [r0, #192]	; 0xc0
   2a194:	cmp	r2, r3
   2a198:	beq	2a1b0 <flatcc_builder_get_direct_buffer@@Base+0x30>
   2a19c:	cmp	r1, #0
   2a1a0:	movne	r0, #0
   2a1a4:	strne	r0, [r1]
   2a1a8:	moveq	r0, r1
   2a1ac:	bx	lr
   2a1b0:	cmp	r1, #0
   2a1b4:	ldrne	r3, [r0, #212]	; 0xd4
   2a1b8:	ldr	r0, [r0, #196]	; 0xc4
   2a1bc:	strne	r3, [r1]
   2a1c0:	bx	lr

0002a1c4 <flatcc_builder_copy_buffer@@Base>:
   2a1c4:	ldr	r3, [r0, #184]	; 0xb8
   2a1c8:	cmp	r3, #0
   2a1cc:	beq	2a20c <flatcc_builder_copy_buffer@@Base+0x48>
   2a1d0:	push	{r4, lr}
   2a1d4:	add	r0, r0, #188	; 0xbc
   2a1d8:	bl	2a8dc <flatcc_emitter_copy_buffer@@Base>
   2a1dc:	cmp	r0, #0
   2a1e0:	popne	{r4, pc}
   2a1e4:	ldr	r3, [pc, #40]	; 2a214 <flatcc_builder_copy_buffer@@Base+0x50>
   2a1e8:	ldr	r1, [pc, #40]	; 2a218 <flatcc_builder_copy_buffer@@Base+0x54>
   2a1ec:	add	r3, pc, r3
   2a1f0:	ldr	r0, [pc, #36]	; 2a21c <flatcc_builder_copy_buffer@@Base+0x58>
   2a1f4:	add	r3, r3, #1296	; 0x510
   2a1f8:	ldr	r2, [pc, #32]	; 2a220 <flatcc_builder_copy_buffer@@Base+0x5c>
   2a1fc:	add	r3, r3, #4
   2a200:	add	r1, pc, r1
   2a204:	add	r0, pc, r0
   2a208:	bl	14610 <__assert_fail@plt>
   2a20c:	mov	r0, r3
   2a210:	bx	lr
   2a214:	andeq	r7, r1, r8, asr #22
   2a218:	andeq	r8, r1, r4, lsl #5
   2a21c:	muleq	r1, ip, r6
   2a220:	andeq	r0, r0, r6, lsl #15

0002a224 <flatcc_builder_finalize_buffer@@Base>:
   2a224:	push	{r4, r5, r6, lr}
   2a228:	mov	r5, r1
   2a22c:	mov	r6, r0
   2a230:	bl	2a0e4 <flatcc_builder_get_buffer_size@@Base>
   2a234:	cmp	r5, #0
   2a238:	strne	r0, [r5]
   2a23c:	mov	r4, r0
   2a240:	bl	14574 <malloc@plt>
   2a244:	subs	r5, r0, #0
   2a248:	beq	2a26c <flatcc_builder_finalize_buffer@@Base+0x48>
   2a24c:	mov	r2, r4
   2a250:	mov	r0, r6
   2a254:	mov	r1, r5
   2a258:	bl	2a1c4 <flatcc_builder_copy_buffer@@Base>
   2a25c:	cmp	r0, #0
   2a260:	beq	2a290 <flatcc_builder_finalize_buffer@@Base+0x6c>
   2a264:	mov	r0, r5
   2a268:	pop	{r4, r5, r6, pc}
   2a26c:	ldr	r3, [pc, #64]	; 2a2b4 <flatcc_builder_finalize_buffer@@Base+0x90>
   2a270:	ldr	r1, [pc, #64]	; 2a2b8 <flatcc_builder_finalize_buffer@@Base+0x94>
   2a274:	ldr	r0, [pc, #64]	; 2a2bc <flatcc_builder_finalize_buffer@@Base+0x98>
   2a278:	add	r3, pc, r3
   2a27c:	ldr	r2, [pc, #60]	; 2a2c0 <flatcc_builder_finalize_buffer@@Base+0x9c>
   2a280:	add	r3, r3, #1328	; 0x530
   2a284:	add	r1, pc, r1
   2a288:	add	r0, pc, r0
   2a28c:	bl	14610 <__assert_fail@plt>
   2a290:	ldr	r3, [pc, #44]	; 2a2c4 <flatcc_builder_finalize_buffer@@Base+0xa0>
   2a294:	ldr	r1, [pc, #44]	; 2a2c8 <flatcc_builder_finalize_buffer@@Base+0xa4>
   2a298:	ldr	r0, [pc, #44]	; 2a2cc <flatcc_builder_finalize_buffer@@Base+0xa8>
   2a29c:	add	r3, pc, r3
   2a2a0:	ldr	r2, [pc, #40]	; 2a2d0 <flatcc_builder_finalize_buffer@@Base+0xac>
   2a2a4:	add	r3, r3, #1328	; 0x530
   2a2a8:	add	r1, pc, r1
   2a2ac:	add	r0, pc, r0
   2a2b0:	bl	14610 <__assert_fail@plt>
   2a2b4:			; <UNDEFINED> instruction: 0x00017abc
   2a2b8:	andeq	r8, r1, r0, lsl #4
   2a2bc:	andeq	r8, r1, r4, lsl #5
   2a2c0:	muleq	r0, r8, r7
   2a2c4:	muleq	r1, r8, sl
   2a2c8:	ldrdeq	r8, [r1], -ip
   2a2cc:	andeq	r8, r1, r0, ror #4
   2a2d0:	muleq	r0, ip, r7

0002a2d4 <flatcc_builder_finalize_aligned_buffer@@Base>:
   2a2d4:	push	{r4, r5, r6, r7, lr}
   2a2d8:	sub	sp, sp, #12
   2a2dc:	mov	r6, r1
   2a2e0:	mov	r7, r0
   2a2e4:	bl	2a0e4 <flatcc_builder_get_buffer_size@@Base>
   2a2e8:	cmp	r6, #0
   2a2ec:	strne	r0, [r6]
   2a2f0:	mov	r4, r0
   2a2f4:	mov	r0, r7
   2a2f8:	bl	2a0a8 <flatcc_builder_get_buffer_alignment@@Base>
   2a2fc:	sub	r4, r4, #1
   2a300:	mov	r1, r0
   2a304:	rsb	r3, r0, #0
   2a308:	add	r4, r4, r0
   2a30c:	add	r0, sp, #8
   2a310:	cmp	r1, #4
   2a314:	and	r4, r4, r3
   2a318:	mov	r3, #0
   2a31c:	movcc	r1, #4
   2a320:	mov	r2, r4
   2a324:	str	r3, [r0, #-4]!
   2a328:	bl	145b0 <posix_memalign@plt>
   2a32c:	cmp	r0, #0
   2a330:	beq	2a360 <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   2a334:	ldr	r0, [sp, #4]
   2a338:	cmp	r0, #0
   2a33c:	beq	2a344 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   2a340:	bl	14538 <free@plt>
   2a344:	cmp	r6, #0
   2a348:	moveq	r5, r6
   2a34c:	movne	r5, #0
   2a350:	strne	r5, [r6]
   2a354:	mov	r0, r5
   2a358:	add	sp, sp, #12
   2a35c:	pop	{r4, r5, r6, r7, pc}
   2a360:	ldr	r5, [sp, #4]
   2a364:	cmp	r5, #0
   2a368:	beq	2a344 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   2a36c:	mov	r2, r4
   2a370:	mov	r0, r7
   2a374:	mov	r1, r5
   2a378:	bl	2a1c4 <flatcc_builder_copy_buffer@@Base>
   2a37c:	cmp	r0, #0
   2a380:	bne	2a354 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
   2a384:	mov	r0, r5
   2a388:	b	2a340 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>

0002a38c <flatcc_builder_aligned_alloc@@Base>:
   2a38c:	push	{r4, lr}
   2a390:	sub	sp, sp, #8
   2a394:	add	r3, sp, #8
   2a398:	cmp	r0, #4
   2a39c:	mov	r4, #0
   2a3a0:	mov	r2, r1
   2a3a4:	str	r4, [r3, #-4]!
   2a3a8:	movcs	r1, r0
   2a3ac:	movcc	r1, #4
   2a3b0:	mov	r0, r3
   2a3b4:	bl	145b0 <posix_memalign@plt>
   2a3b8:	cmp	r0, r4
   2a3bc:	ldr	r0, [sp, #4]
   2a3c0:	beq	2a3d4 <flatcc_builder_aligned_alloc@@Base+0x48>
   2a3c4:	cmp	r0, #0
   2a3c8:	beq	2a3d4 <flatcc_builder_aligned_alloc@@Base+0x48>
   2a3cc:	bl	14538 <free@plt>
   2a3d0:	mov	r0, r4
   2a3d4:	add	sp, sp, #8
   2a3d8:	pop	{r4, pc}

0002a3dc <flatcc_builder_aligned_free@@Base>:
   2a3dc:	b	14538 <free@plt>

0002a3e0 <flatcc_builder_get_emit_context@@Base>:
   2a3e0:	ldr	r0, [r0, #36]	; 0x24
   2a3e4:	bx	lr

0002a3e8 <flatcc_emitter_recycle_page@@Base>:
   2a3e8:	ldr	r3, [r0]
   2a3ec:	cmp	r3, r1
   2a3f0:	beq	2a438 <flatcc_emitter_recycle_page@@Base+0x50>
   2a3f4:	ldr	r2, [r0, #4]
   2a3f8:	cmp	r1, r2
   2a3fc:	beq	2a438 <flatcc_emitter_recycle_page@@Base+0x50>
   2a400:	ldr	ip, [r1, #2944]	; 0xb80
   2a404:	ldr	r2, [r1, #2948]	; 0xb84
   2a408:	push	{lr}		; (str lr, [sp, #-4]!)
   2a40c:	mov	r0, #0
   2a410:	str	r2, [ip, #2948]	; 0xb84
   2a414:	ldr	r2, [r3, #2948]	; 0xb84
   2a418:	ldr	lr, [r1, #2948]	; 0xb84
   2a41c:	str	ip, [lr, #2944]	; 0xb80
   2a420:	str	r3, [r1, #2944]	; 0xb80
   2a424:	str	r2, [r1, #2948]	; 0xb84
   2a428:	str	r1, [r2, #2944]	; 0xb80
   2a42c:	ldr	r3, [r1, #2944]	; 0xb80
   2a430:	str	r1, [r3, #2948]	; 0xb84
   2a434:	pop	{pc}		; (ldr pc, [sp], #4)
   2a438:	mvn	r0, #0
   2a43c:	bx	lr

0002a440 <flatcc_emitter_reset@@Base>:
   2a440:	ldr	r2, [r0]
   2a444:	cmp	r2, #0
   2a448:	bxeq	lr
   2a44c:	ldr	r3, [r0, #32]
   2a450:	mov	r1, #1472	; 0x5c0
   2a454:	push	{r4, lr}
   2a458:	cmp	r3, #0
   2a45c:	str	r1, [r0, #12]
   2a460:	str	r1, [r0, #20]
   2a464:	ldr	r1, [r0, #24]
   2a468:	add	ip, r2, #1472	; 0x5c0
   2a46c:	moveq	r3, r1
   2a470:	stmib	r0, {r2, ip}
   2a474:	str	ip, [r0, #16]
   2a478:	add	ip, r3, r3, lsl #1
   2a47c:	lsr	r3, r1, #2
   2a480:	add	r3, r3, ip, lsr #2
   2a484:	ldr	ip, [r0, #28]
   2a488:	ldr	lr, [pc, #104]	; 2a4f8 <flatcc_emitter_reset@@Base+0xb8>
   2a48c:	cmp	ip, r3, lsl #1
   2a490:	mov	r1, #0
   2a494:	str	lr, [r2, #2952]	; 0xb88
   2a498:	str	r3, [r0, #32]
   2a49c:	str	r1, [r0, #24]
   2a4a0:	popls	{r4, pc}
   2a4a4:	ldr	r3, [r2, #2944]	; 0xb80
   2a4a8:	mov	r4, r0
   2a4ac:	cmp	r2, r3
   2a4b0:	popeq	{r4, pc}
   2a4b4:	ldr	r1, [r3, #2944]	; 0xb80
   2a4b8:	mov	r0, r3
   2a4bc:	str	r1, [r2, #2944]	; 0xb80
   2a4c0:	ldr	r3, [r3, #2944]	; 0xb80
   2a4c4:	str	r2, [r3, #2948]	; 0xb84
   2a4c8:	bl	14538 <free@plt>
   2a4cc:	ldr	r3, [r4, #28]
   2a4d0:	ldr	r2, [r4, #32]
   2a4d4:	sub	r3, r3, #2944	; 0xb80
   2a4d8:	str	r3, [r4, #28]
   2a4dc:	cmp	r3, r2, lsl #1
   2a4e0:	popls	{r4, pc}
   2a4e4:	ldm	r4, {r1, r2}
   2a4e8:	ldr	r3, [r2, #2944]	; 0xb80
   2a4ec:	cmp	r3, r1
   2a4f0:	bne	2a4b4 <flatcc_emitter_reset@@Base+0x74>
   2a4f4:	pop	{r4, pc}
   2a4f8:			; <UNDEFINED> instruction: 0xfffffa40

0002a4fc <flatcc_emitter_clear@@Base>:
   2a4fc:	ldr	r3, [r0]
   2a500:	cmp	r3, #0
   2a504:	bxeq	lr
   2a508:	ldr	r2, [r3, #2948]	; 0xb84
   2a50c:	mov	r1, #0
   2a510:	push	{r4, r5, r6, lr}
   2a514:	mov	r5, r0
   2a518:	str	r1, [r2, #2944]	; 0xb80
   2a51c:	ldr	r4, [r3, #2944]	; 0xb80
   2a520:	cmp	r4, r1
   2a524:	bne	2a530 <flatcc_emitter_clear@@Base+0x34>
   2a528:	b	2a560 <flatcc_emitter_clear@@Base+0x64>
   2a52c:	mov	r4, r3
   2a530:	ldr	r0, [r4, #2948]	; 0xb84
   2a534:	bl	14538 <free@plt>
   2a538:	ldr	r3, [r4, #2944]	; 0xb80
   2a53c:	cmp	r3, #0
   2a540:	bne	2a52c <flatcc_emitter_clear@@Base+0x30>
   2a544:	mov	r0, r4
   2a548:	bl	14538 <free@plt>
   2a54c:	mov	r0, r5
   2a550:	mov	r2, #36	; 0x24
   2a554:	mov	r1, #0
   2a558:	pop	{r4, r5, r6, lr}
   2a55c:	b	145bc <memset@plt>
   2a560:	mov	r4, r3
   2a564:	b	2a544 <flatcc_emitter_clear@@Base+0x48>

0002a568 <flatcc_emitter@@Base>:
   2a568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a56c:	sub	sp, sp, #12
   2a570:	mov	r4, r0
   2a574:	ldr	ip, [sp, #48]	; 0x30
   2a578:	ldr	r0, [r0, #24]
   2a57c:	cmp	r3, #0
   2a580:	add	r0, r0, ip
   2a584:	str	r0, [r4, #24]
   2a588:	blt	2a74c <flatcc_emitter@@Base+0x1e4>
   2a58c:	ldr	r0, [r4, #20]
   2a590:	cmp	ip, r0
   2a594:	bls	2a620 <flatcc_emitter@@Base+0xb8>
   2a598:	cmp	r2, #0
   2a59c:	addne	r7, r1, #8
   2a5a0:	movne	r8, r2
   2a5a4:	movne	r9, #2944	; 0xb80
   2a5a8:	beq	2a614 <flatcc_emitter@@Base+0xac>
   2a5ac:	ldr	r6, [r7, #-4]
   2a5b0:	ldr	sl, [r7, #-8]
   2a5b4:	cmp	r6, #0
   2a5b8:	beq	2a608 <flatcc_emitter@@Base+0xa0>
   2a5bc:	cmp	r0, r6
   2a5c0:	mov	r5, r0
   2a5c4:	bcs	2a668 <flatcc_emitter@@Base+0x100>
   2a5c8:	cmp	r0, #0
   2a5cc:	beq	2a674 <flatcc_emitter@@Base+0x10c>
   2a5d0:	sub	r6, r6, r0
   2a5d4:	mov	r1, sl
   2a5d8:	mov	r2, r5
   2a5dc:	ldr	r0, [r4, #16]
   2a5e0:	bl	14544 <memcpy@plt>
   2a5e4:	ldr	r3, [r4, #16]
   2a5e8:	ldr	r0, [r4, #20]
   2a5ec:	add	r3, r3, r5
   2a5f0:	sub	r0, r0, r5
   2a5f4:	cmp	r6, #0
   2a5f8:	add	sl, sl, r5
   2a5fc:	str	r3, [r4, #16]
   2a600:	str	r0, [r4, #20]
   2a604:	bne	2a5bc <flatcc_emitter@@Base+0x54>
   2a608:	subs	r8, r8, #1
   2a60c:	add	r7, r7, #8
   2a610:	bne	2a5ac <flatcc_emitter@@Base+0x44>
   2a614:	mov	r0, #0
   2a618:	add	sp, sp, #12
   2a61c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a620:	ldr	r3, [r4, #16]
   2a624:	sub	r0, r0, ip
   2a628:	add	ip, r3, ip
   2a62c:	str	r0, [r4, #20]
   2a630:	str	ip, [r4, #16]
   2a634:	cmp	r2, #0
   2a638:	addne	r4, r1, #8
   2a63c:	movne	r7, r2
   2a640:	beq	2a614 <flatcc_emitter@@Base+0xac>
   2a644:	ldmdb	r4, {r1, r2}
   2a648:	mov	r0, r3
   2a64c:	bl	14544 <memcpy@plt>
   2a650:	ldr	r2, [r4, #-4]
   2a654:	subs	r7, r7, #1
   2a658:	add	r4, r4, #8
   2a65c:	add	r3, r0, r2
   2a660:	bne	2a644 <flatcc_emitter@@Base+0xdc>
   2a664:	b	2a614 <flatcc_emitter@@Base+0xac>
   2a668:	mov	r5, r6
   2a66c:	mov	r6, #0
   2a670:	b	2a5d4 <flatcc_emitter@@Base+0x6c>
   2a674:	ldr	fp, [r4, #4]
   2a678:	cmp	fp, #0
   2a67c:	beq	2a6ec <flatcc_emitter@@Base+0x184>
   2a680:	ldr	r5, [fp, #2944]	; 0xb80
   2a684:	ldr	r3, [r4]
   2a688:	cmp	r5, r3
   2a68c:	beq	2a6b4 <flatcc_emitter@@Base+0x14c>
   2a690:	str	r5, [r4, #4]
   2a694:	ldr	r3, [r5, #2948]	; 0xb84
   2a698:	mov	r0, r9
   2a69c:	str	r5, [r4, #16]
   2a6a0:	ldr	r3, [r3, #2952]	; 0xb88
   2a6a4:	str	r9, [r4, #20]
   2a6a8:	add	r3, r3, #2944	; 0xb80
   2a6ac:	str	r3, [r5, #2952]	; 0xb88
   2a6b0:	b	2a5bc <flatcc_emitter@@Base+0x54>
   2a6b4:	ldr	r0, [pc, #540]	; 2a8d8 <flatcc_emitter@@Base+0x370>
   2a6b8:	bl	14574 <malloc@plt>
   2a6bc:	cmp	r0, #0
   2a6c0:	beq	2a6fc <flatcc_emitter@@Base+0x194>
   2a6c4:	ldr	r3, [r4, #28]
   2a6c8:	str	r5, [r0, #2944]	; 0xb80
   2a6cc:	add	r3, r3, #2944	; 0xb80
   2a6d0:	str	fp, [r0, #2948]	; 0xb84
   2a6d4:	str	r3, [r4, #28]
   2a6d8:	str	r0, [r5, #2948]	; 0xb84
   2a6dc:	str	r0, [fp, #2944]	; 0xb80
   2a6e0:	mov	r5, r0
   2a6e4:	str	r0, [r4, #4]
   2a6e8:	b	2a694 <flatcc_emitter@@Base+0x12c>
   2a6ec:	ldr	r0, [pc, #484]	; 2a8d8 <flatcc_emitter@@Base+0x370>
   2a6f0:	bl	14574 <malloc@plt>
   2a6f4:	cmp	r0, #0
   2a6f8:	bne	2a708 <flatcc_emitter@@Base+0x1a0>
   2a6fc:	mvn	r0, #0
   2a700:	add	sp, sp, #12
   2a704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a708:	mov	r2, #1472	; 0x5c0
   2a70c:	ldr	r3, [r4, #28]
   2a710:	str	r2, [r4, #12]
   2a714:	str	r2, [r4, #20]
   2a718:	sub	r2, r2, #2944	; 0xb80
   2a71c:	str	r2, [r0, #2952]	; 0xb88
   2a720:	str	r0, [r4]
   2a724:	add	r3, r3, #2944	; 0xb80
   2a728:	str	r0, [r4, #4]
   2a72c:	str	r0, [r0, #2944]	; 0xb80
   2a730:	str	r0, [r0, #2948]	; 0xb84
   2a734:	add	r0, r0, #1472	; 0x5c0
   2a738:	str	r0, [r4, #8]
   2a73c:	str	r0, [r4, #16]
   2a740:	str	r3, [r4, #28]
   2a744:	mov	r0, #1472	; 0x5c0
   2a748:	b	2a5bc <flatcc_emitter@@Base+0x54>
   2a74c:	ldr	r0, [r4, #12]
   2a750:	cmp	ip, r0
   2a754:	bls	2a7d4 <flatcc_emitter@@Base+0x26c>
   2a758:	add	r6, r1, r2, lsl #3
   2a75c:	mov	r7, r2
   2a760:	mov	r9, #2944	; 0xb80
   2a764:	mov	r8, #0
   2a768:	cmp	r7, #0
   2a76c:	beq	2a614 <flatcc_emitter@@Base+0xac>
   2a770:	ldr	r5, [r6, #-4]
   2a774:	ldr	sl, [r6, #-8]
   2a778:	cmp	r5, #0
   2a77c:	add	sl, sl, r5
   2a780:	beq	2a7c8 <flatcc_emitter@@Base+0x260>
   2a784:	ldr	r2, [r4, #12]
   2a788:	cmp	r2, r5
   2a78c:	bcs	2a7ec <flatcc_emitter@@Base+0x284>
   2a790:	cmp	r2, #0
   2a794:	beq	2a7fc <flatcc_emitter@@Base+0x294>
   2a798:	sub	r5, r5, r2
   2a79c:	mov	r1, r8
   2a7a0:	ldr	r0, [r4, #8]
   2a7a4:	rsb	r3, r2, #0
   2a7a8:	add	r0, r0, r3
   2a7ac:	add	sl, sl, r3
   2a7b0:	str	r1, [r4, #12]
   2a7b4:	str	r0, [r4, #8]
   2a7b8:	mov	r1, sl
   2a7bc:	bl	14544 <memcpy@plt>
   2a7c0:	cmp	r5, #0
   2a7c4:	bne	2a784 <flatcc_emitter@@Base+0x21c>
   2a7c8:	sub	r6, r6, #8
   2a7cc:	sub	r7, r7, #1
   2a7d0:	b	2a768 <flatcc_emitter@@Base+0x200>
   2a7d4:	ldr	r3, [r4, #8]
   2a7d8:	sub	r0, r0, ip
   2a7dc:	sub	r3, r3, ip
   2a7e0:	str	r0, [r4, #12]
   2a7e4:	str	r3, [r4, #8]
   2a7e8:	b	2a634 <flatcc_emitter@@Base+0xcc>
   2a7ec:	sub	r1, r2, r5
   2a7f0:	mov	r2, r5
   2a7f4:	mov	r5, #0
   2a7f8:	b	2a7a0 <flatcc_emitter@@Base+0x238>
   2a7fc:	ldr	r3, [r4]
   2a800:	cmp	r3, #0
   2a804:	beq	2a888 <flatcc_emitter@@Base+0x320>
   2a808:	ldr	fp, [r3, #2948]	; 0xb84
   2a80c:	ldr	r2, [r4, #4]
   2a810:	cmp	fp, r2
   2a814:	beq	2a848 <flatcc_emitter@@Base+0x2e0>
   2a818:	ldr	r3, [r3, #2952]	; 0xb88
   2a81c:	sub	r3, r3, #2944	; 0xb80
   2a820:	str	r3, [fp, #2952]	; 0xb88
   2a824:	str	fp, [r4]
   2a828:	ldr	r3, [fp, #2944]	; 0xb80
   2a82c:	add	r2, fp, #2944	; 0xb80
   2a830:	str	r9, [r4, #12]
   2a834:	ldr	r3, [r3, #2952]	; 0xb88
   2a838:	str	r2, [r4, #8]
   2a83c:	sub	r3, r3, #2944	; 0xb80
   2a840:	str	r3, [fp, #2952]	; 0xb88
   2a844:	b	2a784 <flatcc_emitter@@Base+0x21c>
   2a848:	ldr	r0, [pc, #136]	; 2a8d8 <flatcc_emitter@@Base+0x370>
   2a84c:	str	r3, [sp, #4]
   2a850:	bl	14574 <malloc@plt>
   2a854:	ldr	r3, [sp, #4]
   2a858:	cmp	r0, #0
   2a85c:	beq	2a6fc <flatcc_emitter@@Base+0x194>
   2a860:	ldr	r2, [r4, #28]
   2a864:	str	fp, [r0, #2948]	; 0xb84
   2a868:	add	r2, r2, #2944	; 0xb80
   2a86c:	str	r3, [r0, #2944]	; 0xb80
   2a870:	str	r2, [r4, #28]
   2a874:	str	r0, [r3, #2948]	; 0xb84
   2a878:	str	r0, [fp, #2944]	; 0xb80
   2a87c:	str	r0, [r4]
   2a880:	mov	fp, r0
   2a884:	b	2a828 <flatcc_emitter@@Base+0x2c0>
   2a888:	ldr	r0, [pc, #72]	; 2a8d8 <flatcc_emitter@@Base+0x370>
   2a88c:	bl	14574 <malloc@plt>
   2a890:	cmp	r0, #0
   2a894:	beq	2a6fc <flatcc_emitter@@Base+0x194>
   2a898:	mov	r2, #1472	; 0x5c0
   2a89c:	ldr	r3, [r4, #28]
   2a8a0:	str	r2, [r4, #12]
   2a8a4:	str	r2, [r4, #20]
   2a8a8:	sub	r2, r2, #2944	; 0xb80
   2a8ac:	str	r2, [r0, #2952]	; 0xb88
   2a8b0:	str	r0, [r4]
   2a8b4:	add	r3, r3, #2944	; 0xb80
   2a8b8:	str	r0, [r4, #4]
   2a8bc:	str	r0, [r0, #2944]	; 0xb80
   2a8c0:	str	r0, [r0, #2948]	; 0xb84
   2a8c4:	add	r0, r0, #1472	; 0x5c0
   2a8c8:	str	r0, [r4, #8]
   2a8cc:	str	r0, [r4, #16]
   2a8d0:	str	r3, [r4, #28]
   2a8d4:	b	2a784 <flatcc_emitter@@Base+0x21c>
   2a8d8:	andeq	r0, r0, ip, lsl #23

0002a8dc <flatcc_emitter_copy_buffer@@Base>:
   2a8dc:	ldr	ip, [r0, #24]
   2a8e0:	cmp	ip, r2
   2a8e4:	bhi	2a980 <flatcc_emitter_copy_buffer@@Base+0xa4>
   2a8e8:	ldr	r2, [r0]
   2a8ec:	cmp	r2, #0
   2a8f0:	beq	2a980 <flatcc_emitter_copy_buffer@@Base+0xa4>
   2a8f4:	mov	r3, r1
   2a8f8:	ldr	r1, [r0, #4]
   2a8fc:	push	{r4, r5, r6, lr}
   2a900:	cmp	r2, r1
   2a904:	mov	r5, r0
   2a908:	beq	2a98c <flatcc_emitter_copy_buffer@@Base+0xb0>
   2a90c:	ldr	r4, [r0, #12]
   2a910:	ldr	r1, [r5, #8]
   2a914:	rsb	r4, r4, #2944	; 0xb80
   2a918:	mov	r2, r4
   2a91c:	mov	r0, r3
   2a920:	bl	14544 <memcpy@plt>
   2a924:	ldr	r2, [r5]
   2a928:	ldr	r1, [r5, #4]
   2a92c:	add	r3, r0, r4
   2a930:	ldr	r4, [r2, #2944]	; 0xb80
   2a934:	cmp	r4, r1
   2a938:	beq	2a964 <flatcc_emitter_copy_buffer@@Base+0x88>
   2a93c:	mov	r6, #2944	; 0xb80
   2a940:	mov	r1, r4
   2a944:	mov	r0, r3
   2a948:	mov	r2, r6
   2a94c:	bl	14544 <memcpy@plt>
   2a950:	ldr	r4, [r4, #2944]	; 0xb80
   2a954:	ldr	r1, [r5, #4]
   2a958:	cmp	r1, r4
   2a95c:	add	r3, r0, #2944	; 0xb80
   2a960:	bne	2a940 <flatcc_emitter_copy_buffer@@Base+0x64>
   2a964:	ldr	r2, [r5, #20]
   2a968:	mov	r0, r3
   2a96c:	rsb	r2, r2, #2944	; 0xb80
   2a970:	bl	14544 <memcpy@plt>
   2a974:	mov	r3, r0
   2a978:	mov	r0, r3
   2a97c:	pop	{r4, r5, r6, pc}
   2a980:	mov	r3, #0
   2a984:	mov	r0, r3
   2a988:	bx	lr
   2a98c:	ldr	r1, [r0, #8]
   2a990:	mov	r2, ip
   2a994:	mov	r0, r3
   2a998:	bl	14544 <memcpy@plt>
   2a99c:	mov	r3, r0
   2a9a0:	b	2a978 <flatcc_emitter_copy_buffer@@Base+0x9c>
   2a9a4:	add	r1, r1, #2
   2a9a8:	ldrh	ip, [r0, #22]
   2a9ac:	lsl	r1, r1, #1
   2a9b0:	uxth	r1, r1
   2a9b4:	cmp	ip, r1
   2a9b8:	bls	2a9e4 <flatcc_emitter_copy_buffer@@Base+0x108>
   2a9bc:	ldr	ip, [r0, #12]
   2a9c0:	ldrh	r1, [ip, r1]
   2a9c4:	cmp	r1, #0
   2a9c8:	beq	2a9e4 <flatcc_emitter_copy_buffer@@Base+0x108>
   2a9cc:	ldrh	r2, [r0, #20]
   2a9d0:	add	ip, r1, #4
   2a9d4:	cmp	ip, r2
   2a9d8:	bls	2a9fc <flatcc_emitter_copy_buffer@@Base+0x120>
   2a9dc:	mov	r0, #13
   2a9e0:	bx	lr
   2a9e4:	mov	r1, #0
   2a9e8:	cmp	r2, r1
   2a9ec:	movne	r0, #4
   2a9f0:	moveq	r0, r1
   2a9f4:	str	r1, [r3]
   2a9f8:	bx	lr
   2a9fc:	ldr	r2, [r0, #16]
   2aa00:	add	r1, r1, r2
   2aa04:	ands	r0, r1, #3
   2aa08:	beq	2aa14 <flatcc_emitter_copy_buffer@@Base+0x138>
   2aa0c:	mov	r0, #12
   2aa10:	bx	lr
   2aa14:	str	r1, [r3]
   2aa18:	bx	lr

0002aa1c <flatcc_verify_error_string@@Base>:
   2aa1c:	cmp	r0, #36	; 0x24
   2aa20:	addls	pc, pc, r0, lsl #2
   2aa24:	b	2ac78 <flatcc_verify_error_string@@Base+0x25c>
   2aa28:	b	2aabc <flatcc_verify_error_string@@Base+0xa0>
   2aa2c:	b	2ac6c <flatcc_verify_error_string@@Base+0x250>
   2aa30:	b	2ac60 <flatcc_verify_error_string@@Base+0x244>
   2aa34:	b	2ac54 <flatcc_verify_error_string@@Base+0x238>
   2aa38:	b	2ac48 <flatcc_verify_error_string@@Base+0x22c>
   2aa3c:	b	2ac3c <flatcc_verify_error_string@@Base+0x220>
   2aa40:	b	2ac30 <flatcc_verify_error_string@@Base+0x214>
   2aa44:	b	2ac24 <flatcc_verify_error_string@@Base+0x208>
   2aa48:	b	2ac18 <flatcc_verify_error_string@@Base+0x1fc>
   2aa4c:	b	2ac0c <flatcc_verify_error_string@@Base+0x1f0>
   2aa50:	b	2ac00 <flatcc_verify_error_string@@Base+0x1e4>
   2aa54:	b	2abf4 <flatcc_verify_error_string@@Base+0x1d8>
   2aa58:	b	2abe8 <flatcc_verify_error_string@@Base+0x1cc>
   2aa5c:	b	2abdc <flatcc_verify_error_string@@Base+0x1c0>
   2aa60:	b	2abd0 <flatcc_verify_error_string@@Base+0x1b4>
   2aa64:	b	2abc4 <flatcc_verify_error_string@@Base+0x1a8>
   2aa68:	b	2abb8 <flatcc_verify_error_string@@Base+0x19c>
   2aa6c:	b	2abac <flatcc_verify_error_string@@Base+0x190>
   2aa70:	b	2aba0 <flatcc_verify_error_string@@Base+0x184>
   2aa74:	b	2ab94 <flatcc_verify_error_string@@Base+0x178>
   2aa78:	b	2ab88 <flatcc_verify_error_string@@Base+0x16c>
   2aa7c:	b	2ab7c <flatcc_verify_error_string@@Base+0x160>
   2aa80:	b	2ab70 <flatcc_verify_error_string@@Base+0x154>
   2aa84:	b	2ab64 <flatcc_verify_error_string@@Base+0x148>
   2aa88:	b	2ab58 <flatcc_verify_error_string@@Base+0x13c>
   2aa8c:	b	2ab4c <flatcc_verify_error_string@@Base+0x130>
   2aa90:	b	2ab40 <flatcc_verify_error_string@@Base+0x124>
   2aa94:	b	2ab34 <flatcc_verify_error_string@@Base+0x118>
   2aa98:	b	2ab28 <flatcc_verify_error_string@@Base+0x10c>
   2aa9c:	b	2ab1c <flatcc_verify_error_string@@Base+0x100>
   2aaa0:	b	2ab10 <flatcc_verify_error_string@@Base+0xf4>
   2aaa4:	b	2ab04 <flatcc_verify_error_string@@Base+0xe8>
   2aaa8:	b	2aaf8 <flatcc_verify_error_string@@Base+0xdc>
   2aaac:	b	2aaec <flatcc_verify_error_string@@Base+0xd0>
   2aab0:	b	2aae0 <flatcc_verify_error_string@@Base+0xc4>
   2aab4:	b	2aad4 <flatcc_verify_error_string@@Base+0xb8>
   2aab8:	b	2aac8 <flatcc_verify_error_string@@Base+0xac>
   2aabc:	ldr	r0, [pc, #448]	; 2ac84 <flatcc_verify_error_string@@Base+0x268>
   2aac0:	add	r0, pc, r0
   2aac4:	bx	lr
   2aac8:	ldr	r0, [pc, #440]	; 2ac88 <flatcc_verify_error_string@@Base+0x26c>
   2aacc:	add	r0, pc, r0
   2aad0:	bx	lr
   2aad4:	ldr	r0, [pc, #432]	; 2ac8c <flatcc_verify_error_string@@Base+0x270>
   2aad8:	add	r0, pc, r0
   2aadc:	bx	lr
   2aae0:	ldr	r0, [pc, #424]	; 2ac90 <flatcc_verify_error_string@@Base+0x274>
   2aae4:	add	r0, pc, r0
   2aae8:	bx	lr
   2aaec:	ldr	r0, [pc, #416]	; 2ac94 <flatcc_verify_error_string@@Base+0x278>
   2aaf0:	add	r0, pc, r0
   2aaf4:	bx	lr
   2aaf8:	ldr	r0, [pc, #408]	; 2ac98 <flatcc_verify_error_string@@Base+0x27c>
   2aafc:	add	r0, pc, r0
   2ab00:	bx	lr
   2ab04:	ldr	r0, [pc, #400]	; 2ac9c <flatcc_verify_error_string@@Base+0x280>
   2ab08:	add	r0, pc, r0
   2ab0c:	bx	lr
   2ab10:	ldr	r0, [pc, #392]	; 2aca0 <flatcc_verify_error_string@@Base+0x284>
   2ab14:	add	r0, pc, r0
   2ab18:	bx	lr
   2ab1c:	ldr	r0, [pc, #384]	; 2aca4 <flatcc_verify_error_string@@Base+0x288>
   2ab20:	add	r0, pc, r0
   2ab24:	bx	lr
   2ab28:	ldr	r0, [pc, #376]	; 2aca8 <flatcc_verify_error_string@@Base+0x28c>
   2ab2c:	add	r0, pc, r0
   2ab30:	bx	lr
   2ab34:	ldr	r0, [pc, #368]	; 2acac <flatcc_verify_error_string@@Base+0x290>
   2ab38:	add	r0, pc, r0
   2ab3c:	bx	lr
   2ab40:	ldr	r0, [pc, #360]	; 2acb0 <flatcc_verify_error_string@@Base+0x294>
   2ab44:	add	r0, pc, r0
   2ab48:	bx	lr
   2ab4c:	ldr	r0, [pc, #352]	; 2acb4 <flatcc_verify_error_string@@Base+0x298>
   2ab50:	add	r0, pc, r0
   2ab54:	bx	lr
   2ab58:	ldr	r0, [pc, #344]	; 2acb8 <flatcc_verify_error_string@@Base+0x29c>
   2ab5c:	add	r0, pc, r0
   2ab60:	bx	lr
   2ab64:	ldr	r0, [pc, #336]	; 2acbc <flatcc_verify_error_string@@Base+0x2a0>
   2ab68:	add	r0, pc, r0
   2ab6c:	bx	lr
   2ab70:	ldr	r0, [pc, #328]	; 2acc0 <flatcc_verify_error_string@@Base+0x2a4>
   2ab74:	add	r0, pc, r0
   2ab78:	bx	lr
   2ab7c:	ldr	r0, [pc, #320]	; 2acc4 <flatcc_verify_error_string@@Base+0x2a8>
   2ab80:	add	r0, pc, r0
   2ab84:	bx	lr
   2ab88:	ldr	r0, [pc, #312]	; 2acc8 <flatcc_verify_error_string@@Base+0x2ac>
   2ab8c:	add	r0, pc, r0
   2ab90:	bx	lr
   2ab94:	ldr	r0, [pc, #304]	; 2accc <flatcc_verify_error_string@@Base+0x2b0>
   2ab98:	add	r0, pc, r0
   2ab9c:	bx	lr
   2aba0:	ldr	r0, [pc, #296]	; 2acd0 <flatcc_verify_error_string@@Base+0x2b4>
   2aba4:	add	r0, pc, r0
   2aba8:	bx	lr
   2abac:	ldr	r0, [pc, #288]	; 2acd4 <flatcc_verify_error_string@@Base+0x2b8>
   2abb0:	add	r0, pc, r0
   2abb4:	bx	lr
   2abb8:	ldr	r0, [pc, #280]	; 2acd8 <flatcc_verify_error_string@@Base+0x2bc>
   2abbc:	add	r0, pc, r0
   2abc0:	bx	lr
   2abc4:	ldr	r0, [pc, #272]	; 2acdc <flatcc_verify_error_string@@Base+0x2c0>
   2abc8:	add	r0, pc, r0
   2abcc:	bx	lr
   2abd0:	ldr	r0, [pc, #264]	; 2ace0 <flatcc_verify_error_string@@Base+0x2c4>
   2abd4:	add	r0, pc, r0
   2abd8:	bx	lr
   2abdc:	ldr	r0, [pc, #256]	; 2ace4 <flatcc_verify_error_string@@Base+0x2c8>
   2abe0:	add	r0, pc, r0
   2abe4:	bx	lr
   2abe8:	ldr	r0, [pc, #248]	; 2ace8 <flatcc_verify_error_string@@Base+0x2cc>
   2abec:	add	r0, pc, r0
   2abf0:	bx	lr
   2abf4:	ldr	r0, [pc, #240]	; 2acec <flatcc_verify_error_string@@Base+0x2d0>
   2abf8:	add	r0, pc, r0
   2abfc:	bx	lr
   2ac00:	ldr	r0, [pc, #232]	; 2acf0 <flatcc_verify_error_string@@Base+0x2d4>
   2ac04:	add	r0, pc, r0
   2ac08:	bx	lr
   2ac0c:	ldr	r0, [pc, #224]	; 2acf4 <flatcc_verify_error_string@@Base+0x2d8>
   2ac10:	add	r0, pc, r0
   2ac14:	bx	lr
   2ac18:	ldr	r0, [pc, #216]	; 2acf8 <flatcc_verify_error_string@@Base+0x2dc>
   2ac1c:	add	r0, pc, r0
   2ac20:	bx	lr
   2ac24:	ldr	r0, [pc, #208]	; 2acfc <flatcc_verify_error_string@@Base+0x2e0>
   2ac28:	add	r0, pc, r0
   2ac2c:	bx	lr
   2ac30:	ldr	r0, [pc, #200]	; 2ad00 <flatcc_verify_error_string@@Base+0x2e4>
   2ac34:	add	r0, pc, r0
   2ac38:	bx	lr
   2ac3c:	ldr	r0, [pc, #192]	; 2ad04 <flatcc_verify_error_string@@Base+0x2e8>
   2ac40:	add	r0, pc, r0
   2ac44:	bx	lr
   2ac48:	ldr	r0, [pc, #184]	; 2ad08 <flatcc_verify_error_string@@Base+0x2ec>
   2ac4c:	add	r0, pc, r0
   2ac50:	bx	lr
   2ac54:	ldr	r0, [pc, #176]	; 2ad0c <flatcc_verify_error_string@@Base+0x2f0>
   2ac58:	add	r0, pc, r0
   2ac5c:	bx	lr
   2ac60:	ldr	r0, [pc, #168]	; 2ad10 <flatcc_verify_error_string@@Base+0x2f4>
   2ac64:	add	r0, pc, r0
   2ac68:	bx	lr
   2ac6c:	ldr	r0, [pc, #160]	; 2ad14 <flatcc_verify_error_string@@Base+0x2f8>
   2ac70:	add	r0, pc, r0
   2ac74:	bx	lr
   2ac78:	ldr	r0, [pc, #152]	; 2ad18 <flatcc_verify_error_string@@Base+0x2fc>
   2ac7c:	add	r0, pc, r0
   2ac80:	bx	lr
   2ac84:	andeq	r7, r1, r8, ror #27
   2ac88:	andeq	r8, r1, r4, asr r2
   2ac8c:	andeq	r8, r1, r0, lsr #4
   2ac90:	andeq	r8, r1, r0, ror #3
   2ac94:	andeq	r8, r1, ip, lsr #3
   2ac98:	andeq	r8, r1, r8, ror r1
   2ac9c:	andeq	r8, r1, r4, asr r1
   2aca0:	andeq	r8, r1, r0, lsr #2
   2aca4:	andeq	r8, r1, ip, ror #1
   2aca8:	andeq	r8, r1, r8, asr #1
   2acac:	andeq	r8, r1, r0, lsr #1
   2acb0:	andeq	r8, r1, r0, lsl #1
   2acb4:	andeq	r8, r1, r4, asr #32
   2acb8:	andeq	r8, r1, ip
   2acbc:	ldrdeq	r7, [r1], -r4
   2acc0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   2acc4:	andeq	r7, r1, ip, asr pc
   2acc8:	andeq	r7, r1, r8, lsr pc
   2accc:	andeq	r7, r1, r4, lsl #30
   2acd0:	andeq	r7, r1, r4, ror #29
   2acd4:			; <UNDEFINED> instruction: 0x00017eb0
   2acd8:	andeq	r7, r1, ip, ror lr
   2acdc:	andeq	r7, r1, r8, asr #28
   2ace0:	andeq	r7, r1, r0, lsr #28
   2ace4:	strdeq	r7, [r1], -r8
   2ace8:	ldrdeq	r7, [r1], -r4
   2acec:			; <UNDEFINED> instruction: 0x00017db4
   2acf0:	muleq	r1, r0, sp
   2acf4:	andeq	r7, r1, r0, ror sp
   2acf8:	andeq	r7, r1, r0, asr sp
   2acfc:	andeq	r7, r1, r8, lsr #26
   2ad00:	strdeq	r7, [r1], -ip
   2ad04:	andeq	r7, r1, ip, asr #25
   2ad08:	andeq	r7, r1, r8, lsr #25
   2ad0c:	andeq	r7, r1, r0, lsl #25
   2ad10:	andeq	r7, r1, r0, ror #24
   2ad14:	andeq	r7, r1, ip, lsr ip
   2ad18:	strheq	r8, [r1], -r4

0002ad1c <flatcc_verify_field@@Base>:
   2ad1c:	add	r1, r1, #2
   2ad20:	ldrh	ip, [r0, #22]
   2ad24:	lsl	r1, r1, #1
   2ad28:	uxth	r1, r1
   2ad2c:	cmp	ip, r1
   2ad30:	bls	2ad64 <flatcc_verify_field@@Base+0x48>
   2ad34:	ldr	ip, [r0, #12]
   2ad38:	ldrh	r1, [ip, r1]
   2ad3c:	cmp	r1, #0
   2ad40:	beq	2ad64 <flatcc_verify_field@@Base+0x48>
   2ad44:	push	{lr}		; (str lr, [sp, #-4]!)
   2ad48:	add	r2, r2, r1
   2ad4c:	ldrh	lr, [r0, #20]
   2ad50:	ldr	ip, [r0]
   2ad54:	cmp	r2, lr
   2ad58:	bls	2ad6c <flatcc_verify_field@@Base+0x50>
   2ad5c:	mov	r0, #13
   2ad60:	pop	{pc}		; (ldr pc, [sp], #4)
   2ad64:	mov	r0, #0
   2ad68:	bx	lr
   2ad6c:	ldr	r0, [r0, #16]
   2ad70:	sub	r3, r3, #1
   2ad74:	add	r0, ip, r0
   2ad78:	add	r0, r0, r1
   2ad7c:	tst	r0, r3
   2ad80:	moveq	r0, #0
   2ad84:	movne	r0, #12
   2ad88:	pop	{pc}		; (ldr pc, [sp], #4)

0002ad8c <flatcc_verify_string_field@@Base>:
   2ad8c:	push	{r4, lr}
   2ad90:	sub	sp, sp, #8
   2ad94:	add	r3, sp, #4
   2ad98:	mov	r4, r0
   2ad9c:	bl	2a9a4 <flatcc_emitter_copy_buffer@@Base+0xc8>
   2ada0:	cmp	r0, #0
   2ada4:	bne	2adf8 <flatcc_verify_string_field@@Base+0x6c>
   2ada8:	ldr	r3, [sp, #4]
   2adac:	cmp	r3, #0
   2adb0:	beq	2adf8 <flatcc_verify_string_field@@Base+0x6c>
   2adb4:	ldr	r1, [r4]
   2adb8:	ldr	r2, [r1, r3]
   2adbc:	add	r2, r3, r2
   2adc0:	cmp	r3, r2
   2adc4:	bcs	2ae00 <flatcc_verify_string_field@@Base+0x74>
   2adc8:	ldr	r3, [r4, #4]
   2adcc:	add	ip, r2, #4
   2add0:	cmp	r3, ip
   2add4:	bcc	2ae00 <flatcc_verify_string_field@@Base+0x74>
   2add8:	tst	r2, #3
   2addc:	bne	2ae00 <flatcc_verify_string_field@@Base+0x74>
   2ade0:	ldr	r2, [r1, r2]
   2ade4:	sub	r3, r3, ip
   2ade8:	add	lr, r2, #1
   2adec:	cmp	r3, lr
   2adf0:	movcc	r0, #8
   2adf4:	bcs	2ae0c <flatcc_verify_string_field@@Base+0x80>
   2adf8:	add	sp, sp, #8
   2adfc:	pop	{r4, pc}
   2ae00:	mov	r0, #17
   2ae04:	add	sp, sp, #8
   2ae08:	pop	{r4, pc}
   2ae0c:	add	r1, r1, ip
   2ae10:	ldrb	r3, [r1, r2]
   2ae14:	cmp	r3, #0
   2ae18:	movne	r0, #7
   2ae1c:	b	2adf8 <flatcc_verify_string_field@@Base+0x6c>

0002ae20 <flatcc_verify_vector_field@@Base>:
   2ae20:	push	{r4, r5, r6, lr}
   2ae24:	sub	sp, sp, #8
   2ae28:	mov	r5, r3
   2ae2c:	add	r3, sp, #4
   2ae30:	mov	r6, r0
   2ae34:	ldrh	r4, [sp, #24]
   2ae38:	bl	2a9a4 <flatcc_emitter_copy_buffer@@Base+0xc8>
   2ae3c:	cmp	r0, #0
   2ae40:	bne	2aea0 <flatcc_verify_vector_field@@Base+0x80>
   2ae44:	ldr	r3, [sp, #4]
   2ae48:	cmp	r3, #0
   2ae4c:	beq	2aea0 <flatcc_verify_vector_field@@Base+0x80>
   2ae50:	ldr	r1, [r6]
   2ae54:	ldr	r2, [r1, r3]
   2ae58:	add	r2, r3, r2
   2ae5c:	cmp	r3, r2
   2ae60:	bcs	2aea8 <flatcc_verify_vector_field@@Base+0x88>
   2ae64:	ldr	ip, [r6, #4]
   2ae68:	add	r3, r2, #4
   2ae6c:	cmp	ip, r3
   2ae70:	bcc	2aea8 <flatcc_verify_vector_field@@Base+0x88>
   2ae74:	cmp	r4, #4
   2ae78:	movcc	r4, #4
   2ae7c:	sub	r4, r4, #1
   2ae80:	orr	r4, r4, #3
   2ae84:	tst	r4, r3
   2ae88:	bne	2aea8 <flatcc_verify_vector_field@@Base+0x88>
   2ae8c:	ldr	r2, [r1, r2]
   2ae90:	ldr	r1, [sp, #28]
   2ae94:	cmp	r1, r2
   2ae98:	movcc	r0, #25
   2ae9c:	bcs	2aeb4 <flatcc_verify_vector_field@@Base+0x94>
   2aea0:	add	sp, sp, #8
   2aea4:	pop	{r4, r5, r6, pc}
   2aea8:	mov	r0, #16
   2aeac:	add	sp, sp, #8
   2aeb0:	pop	{r4, r5, r6, pc}
   2aeb4:	mul	r5, r2, r5
   2aeb8:	sub	r3, ip, r3
   2aebc:	cmp	r3, r5
   2aec0:	movcc	r0, #26
   2aec4:	b	2aea0 <flatcc_verify_vector_field@@Base+0x80>

0002aec8 <flatcc_verify_string_vector_field@@Base>:
   2aec8:	push	{r4, r5, r6, r7, lr}
   2aecc:	sub	sp, sp, #12
   2aed0:	add	r3, sp, #4
   2aed4:	mov	r4, r0
   2aed8:	bl	2a9a4 <flatcc_emitter_copy_buffer@@Base+0xc8>
   2aedc:	cmp	r0, #0
   2aee0:	bne	2af38 <flatcc_verify_string_vector_field@@Base+0x70>
   2aee4:	ldr	r3, [sp, #4]
   2aee8:	cmp	r3, #0
   2aeec:	beq	2af38 <flatcc_verify_string_vector_field@@Base+0x70>
   2aef0:	ldr	lr, [r4]
   2aef4:	ldr	r2, [lr, r3]
   2aef8:	add	r2, r3, r2
   2aefc:	cmp	r3, r2
   2af00:	bcs	2af40 <flatcc_verify_string_vector_field@@Base+0x78>
   2af04:	ldr	r5, [r4, #4]
   2af08:	add	r3, r2, #4
   2af0c:	cmp	r5, r3
   2af10:	bcc	2af40 <flatcc_verify_string_vector_field@@Base+0x78>
   2af14:	tst	r3, #3
   2af18:	bne	2af40 <flatcc_verify_string_vector_field@@Base+0x78>
   2af1c:	ldr	r1, [lr, r2]
   2af20:	cmn	r1, #-1073741823	; 0xc0000001
   2af24:	bls	2af4c <flatcc_verify_string_vector_field@@Base+0x84>
   2af28:	ldr	r2, [lr, r2]
   2af2c:	cmn	r2, #-1073741823	; 0xc0000001
   2af30:	movhi	r0, #25
   2af34:	bls	2afb8 <flatcc_verify_string_vector_field@@Base+0xf0>
   2af38:	add	sp, sp, #12
   2af3c:	pop	{r4, r5, r6, r7, pc}
   2af40:	mov	r0, #16
   2af44:	add	sp, sp, #12
   2af48:	pop	{r4, r5, r6, r7, pc}
   2af4c:	lsl	r4, r1, #2
   2af50:	sub	ip, r5, r3
   2af54:	cmp	ip, r4
   2af58:	bcc	2af28 <flatcc_verify_string_vector_field@@Base+0x60>
   2af5c:	cmp	r1, #0
   2af60:	beq	2af38 <flatcc_verify_string_vector_field@@Base+0x70>
   2af64:	ldr	r2, [lr, r3]
   2af68:	add	r1, lr, r3
   2af6c:	add	r2, r3, r2
   2af70:	cmp	r3, r2
   2af74:	bcs	2afac <flatcc_verify_string_vector_field@@Base+0xe4>
   2af78:	add	ip, r2, #4
   2af7c:	cmp	r5, ip
   2af80:	bcc	2afac <flatcc_verify_string_vector_field@@Base+0xe4>
   2af84:	tst	r2, #3
   2af88:	bne	2afac <flatcc_verify_string_vector_field@@Base+0xe4>
   2af8c:	ldr	r2, [lr, r2]
   2af90:	sub	r6, r5, ip
   2af94:	add	r7, r2, #1
   2af98:	cmp	r7, r6
   2af9c:	bls	2afc8 <flatcc_verify_string_vector_field@@Base+0x100>
   2afa0:	mov	r0, #8
   2afa4:	add	sp, sp, #12
   2afa8:	pop	{r4, r5, r6, r7, pc}
   2afac:	mov	r0, #17
   2afb0:	add	sp, sp, #12
   2afb4:	pop	{r4, r5, r6, r7, pc}
   2afb8:	sub	r3, r5, r3
   2afbc:	cmp	r3, r2, lsl #2
   2afc0:	movcc	r0, #26
   2afc4:	b	2af38 <flatcc_verify_string_vector_field@@Base+0x70>
   2afc8:	add	r4, r3, r4
   2afcc:	add	r2, lr, r2
   2afd0:	ldrb	r2, [r2, ip]
   2afd4:	cmp	r2, #0
   2afd8:	movne	r0, #7
   2afdc:	bne	2af38 <flatcc_verify_string_vector_field@@Base+0x70>
   2afe0:	add	r3, r3, #4
   2afe4:	cmp	r3, r4
   2afe8:	beq	2af38 <flatcc_verify_string_vector_field@@Base+0x70>
   2afec:	ldr	r2, [r1, #4]!
   2aff0:	add	r2, r3, r2
   2aff4:	cmp	r3, r2
   2aff8:	add	ip, r2, #4
   2affc:	bcs	2afac <flatcc_verify_string_vector_field@@Base+0xe4>
   2b000:	cmp	r5, ip
   2b004:	bcc	2afac <flatcc_verify_string_vector_field@@Base+0xe4>
   2b008:	tst	r2, #3
   2b00c:	sub	r7, r5, ip
   2b010:	bne	2afac <flatcc_verify_string_vector_field@@Base+0xe4>
   2b014:	ldr	r2, [lr, r2]
   2b018:	add	r6, r2, #1
   2b01c:	cmp	r7, r6
   2b020:	bcc	2afa0 <flatcc_verify_string_vector_field@@Base+0xd8>
   2b024:	b	2afcc <flatcc_verify_string_vector_field@@Base+0x104>

0002b028 <flatcc_verify_table_field@@Base>:
   2b028:	push	{r4, r5, lr}
   2b02c:	sub	sp, sp, #36	; 0x24
   2b030:	mov	r5, r3
   2b034:	add	r3, sp, #4
   2b038:	mov	r4, r0
   2b03c:	bl	2a9a4 <flatcc_emitter_copy_buffer@@Base+0xc8>
   2b040:	cmp	r0, #0
   2b044:	bne	2b054 <flatcc_verify_table_field@@Base+0x2c>
   2b048:	ldr	r3, [sp, #4]
   2b04c:	cmp	r3, #0
   2b050:	bne	2b05c <flatcc_verify_table_field@@Base+0x34>
   2b054:	add	sp, sp, #36	; 0x24
   2b058:	pop	{r4, r5, pc}
   2b05c:	ldr	r2, [r4, #8]
   2b060:	ldr	ip, [r4]
   2b064:	sub	r2, r2, #1
   2b068:	cmp	r2, #0
   2b06c:	ldr	r1, [ip, r3]
   2b070:	ldr	lr, [r4, #4]
   2b074:	str	r2, [sp, #16]
   2b078:	moveq	r0, #3
   2b07c:	beq	2b054 <flatcc_verify_table_field@@Base+0x2c>
   2b080:	add	r2, r3, r1
   2b084:	cmp	r3, r2
   2b088:	bcs	2b124 <flatcc_verify_table_field@@Base+0xfc>
   2b08c:	add	r3, r2, #4
   2b090:	cmp	lr, r3
   2b094:	bcc	2b124 <flatcc_verify_table_field@@Base+0xfc>
   2b098:	tst	r2, #3
   2b09c:	bne	2b124 <flatcc_verify_table_field@@Base+0xfc>
   2b0a0:	str	r2, [sp, #24]
   2b0a4:	ldr	r3, [ip, r2]
   2b0a8:	subs	r3, r2, r3
   2b0ac:	bmi	2b12c <flatcc_verify_table_field@@Base+0x104>
   2b0b0:	tst	r3, #1
   2b0b4:	bne	2b12c <flatcc_verify_table_field@@Base+0x104>
   2b0b8:	add	r1, r3, #2
   2b0bc:	cmp	lr, r1
   2b0c0:	movcc	r0, #27
   2b0c4:	bcc	2b054 <flatcc_verify_table_field@@Base+0x2c>
   2b0c8:	ldrh	r0, [ip, r3]
   2b0cc:	add	r4, ip, r3
   2b0d0:	add	r3, r0, r3
   2b0d4:	cmp	lr, r3
   2b0d8:	strh	r0, [sp, #30]
   2b0dc:	bcc	2b134 <flatcc_verify_table_field@@Base+0x10c>
   2b0e0:	tst	r0, #1
   2b0e4:	bne	2b134 <flatcc_verify_table_field@@Base+0x10c>
   2b0e8:	cmp	r0, #3
   2b0ec:	movls	r0, #28
   2b0f0:	bls	2b054 <flatcc_verify_table_field@@Base+0x2c>
   2b0f4:	ldrh	r3, [ip, r1]
   2b0f8:	sub	r2, lr, r2
   2b0fc:	cmp	r2, r3
   2b100:	strh	r3, [sp, #28]
   2b104:	movcc	r0, #20
   2b108:	bcc	2b054 <flatcc_verify_table_field@@Base+0x2c>
   2b10c:	add	r0, sp, #8
   2b110:	str	r4, [sp, #20]
   2b114:	str	ip, [sp, #8]
   2b118:	str	lr, [sp, #12]
   2b11c:	blx	r5
   2b120:	b	2b054 <flatcc_verify_table_field@@Base+0x2c>
   2b124:	mov	r0, #15
   2b128:	b	2b054 <flatcc_verify_table_field@@Base+0x2c>
   2b12c:	mov	r0, #29
   2b130:	b	2b054 <flatcc_verify_table_field@@Base+0x2c>
   2b134:	mov	r0, #30
   2b138:	b	2b054 <flatcc_verify_table_field@@Base+0x2c>

0002b13c <flatcc_verify_table_vector_field@@Base>:
   2b13c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b140:	sub	sp, sp, #44	; 0x2c
   2b144:	mov	r8, r3
   2b148:	add	r3, sp, #12
   2b14c:	mov	r4, r0
   2b150:	bl	2a9a4 <flatcc_emitter_copy_buffer@@Base+0xc8>
   2b154:	subs	r5, r0, #0
   2b158:	bne	2b168 <flatcc_verify_table_vector_field@@Base+0x2c>
   2b15c:	ldr	r3, [sp, #12]
   2b160:	cmp	r3, #0
   2b164:	bne	2b174 <flatcc_verify_table_vector_field@@Base+0x38>
   2b168:	mov	r0, r5
   2b16c:	add	sp, sp, #44	; 0x2c
   2b170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b174:	ldr	r7, [r4, #8]
   2b178:	cmp	r7, #0
   2b17c:	ble	2b1d8 <flatcc_verify_table_vector_field@@Base+0x9c>
   2b180:	ldr	sl, [r4]
   2b184:	ldr	r1, [sl, r3]
   2b188:	add	r1, r3, r1
   2b18c:	cmp	r3, r1
   2b190:	bcs	2b1e8 <flatcc_verify_table_vector_field@@Base+0xac>
   2b194:	ldr	fp, [r4, #4]
   2b198:	add	r4, r1, #4
   2b19c:	cmp	fp, r4
   2b1a0:	bcc	2b1e8 <flatcc_verify_table_vector_field@@Base+0xac>
   2b1a4:	tst	r4, #3
   2b1a8:	bne	2b1e8 <flatcc_verify_table_vector_field@@Base+0xac>
   2b1ac:	ldr	r3, [sl, r1]
   2b1b0:	cmn	r3, #-1073741823	; 0xc0000001
   2b1b4:	bls	2b1f8 <flatcc_verify_table_vector_field@@Base+0xbc>
   2b1b8:	ldr	r3, [sl, r1]
   2b1bc:	cmn	r3, #-1073741823	; 0xc0000001
   2b1c0:	movhi	r5, #25
   2b1c4:	bhi	2b168 <flatcc_verify_table_vector_field@@Base+0x2c>
   2b1c8:	sub	r4, fp, r4
   2b1cc:	cmp	r4, r3, lsl #2
   2b1d0:	movcc	r5, #26
   2b1d4:	b	2b168 <flatcc_verify_table_vector_field@@Base+0x2c>
   2b1d8:	mov	r5, #3
   2b1dc:	mov	r0, r5
   2b1e0:	add	sp, sp, #44	; 0x2c
   2b1e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b1e8:	mov	r5, #16
   2b1ec:	mov	r0, r5
   2b1f0:	add	sp, sp, #44	; 0x2c
   2b1f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b1f8:	lsl	r9, r3, #2
   2b1fc:	sub	r2, fp, r4
   2b200:	cmp	r2, r9
   2b204:	bcc	2b1b8 <flatcc_verify_table_vector_field@@Base+0x7c>
   2b208:	cmp	r3, #0
   2b20c:	beq	2b168 <flatcc_verify_table_vector_field@@Base+0x2c>
   2b210:	sub	r7, r7, #2
   2b214:	cmp	r7, #0
   2b218:	ldr	r3, [sl, r4]
   2b21c:	add	r2, sl, r4
   2b220:	str	r7, [sp, #24]
   2b224:	beq	2b1d8 <flatcc_verify_table_vector_field@@Base+0x9c>
   2b228:	add	r3, r4, r3
   2b22c:	cmp	r4, r3
   2b230:	bcs	2b3d0 <flatcc_verify_table_vector_field@@Base+0x294>
   2b234:	add	r0, r3, #4
   2b238:	cmp	fp, r0
   2b23c:	bcc	2b3d0 <flatcc_verify_table_vector_field@@Base+0x294>
   2b240:	tst	r3, #3
   2b244:	bne	2b3d0 <flatcc_verify_table_vector_field@@Base+0x294>
   2b248:	add	r1, r1, #8
   2b24c:	add	r9, r4, r9
   2b250:	add	r6, sl, r1
   2b254:	mov	r1, r2
   2b258:	add	r2, sp, #16
   2b25c:	str	r2, [sp]
   2b260:	str	r3, [sp, #32]
   2b264:	ldr	r2, [sl, r3]
   2b268:	subs	r2, r3, r2
   2b26c:	bmi	2b278 <flatcc_verify_table_vector_field@@Base+0x13c>
   2b270:	tst	r2, #1
   2b274:	beq	2b328 <flatcc_verify_table_vector_field@@Base+0x1ec>
   2b278:	ldr	r3, [r1]
   2b27c:	str	r7, [sp, #24]
   2b280:	add	r3, r4, r3
   2b284:	cmp	r3, r4
   2b288:	bls	2b3dc <flatcc_verify_table_vector_field@@Base+0x2a0>
   2b28c:	add	r2, r3, #4
   2b290:	cmp	fp, r2
   2b294:	bcc	2b3dc <flatcc_verify_table_vector_field@@Base+0x2a0>
   2b298:	tst	r3, #3
   2b29c:	bne	2b3dc <flatcc_verify_table_vector_field@@Base+0x2a0>
   2b2a0:	str	r3, [sp, #32]
   2b2a4:	ldr	r2, [sl, r3]
   2b2a8:	subs	r2, r3, r2
   2b2ac:	bmi	2b3e4 <flatcc_verify_table_vector_field@@Base+0x2a8>
   2b2b0:	tst	r2, #1
   2b2b4:	bne	2b3e4 <flatcc_verify_table_vector_field@@Base+0x2a8>
   2b2b8:	add	r0, r2, #2
   2b2bc:	cmp	fp, r0
   2b2c0:	movcc	r5, #27
   2b2c4:	bcc	2b168 <flatcc_verify_table_vector_field@@Base+0x2c>
   2b2c8:	ldrh	r1, [sl, r2]
   2b2cc:	add	ip, sl, r2
   2b2d0:	add	r2, r1, r2
   2b2d4:	cmp	fp, r2
   2b2d8:	strh	r1, [sp, #38]	; 0x26
   2b2dc:	bcc	2b3ec <flatcc_verify_table_vector_field@@Base+0x2b0>
   2b2e0:	tst	r1, #1
   2b2e4:	bne	2b3ec <flatcc_verify_table_vector_field@@Base+0x2b0>
   2b2e8:	cmp	r1, #3
   2b2ec:	movls	r5, #28
   2b2f0:	bls	2b168 <flatcc_verify_table_vector_field@@Base+0x2c>
   2b2f4:	ldrh	r2, [sl, r0]
   2b2f8:	sub	r3, fp, r3
   2b2fc:	cmp	r3, r2
   2b300:	strh	r2, [sp, #36]	; 0x24
   2b304:	movcc	r5, #20
   2b308:	bcc	2b168 <flatcc_verify_table_vector_field@@Base+0x2c>
   2b30c:	add	r0, sp, #16
   2b310:	str	ip, [sp, #28]
   2b314:	str	sl, [sp, #16]
   2b318:	str	fp, [sp, #20]
   2b31c:	blx	r8
   2b320:	mov	r5, r0
   2b324:	b	2b168 <flatcc_verify_table_vector_field@@Base+0x2c>
   2b328:	add	r0, r2, #2
   2b32c:	cmp	fp, r0
   2b330:	bcc	2b278 <flatcc_verify_table_vector_field@@Base+0x13c>
   2b334:	ldrh	lr, [sl, r2]
   2b338:	add	ip, sl, r2
   2b33c:	add	r2, lr, r2
   2b340:	cmp	fp, r2
   2b344:	strh	lr, [sp, #38]	; 0x26
   2b348:	bcc	2b278 <flatcc_verify_table_vector_field@@Base+0x13c>
   2b34c:	tst	lr, #1
   2b350:	bne	2b278 <flatcc_verify_table_vector_field@@Base+0x13c>
   2b354:	cmp	lr, #3
   2b358:	bls	2b278 <flatcc_verify_table_vector_field@@Base+0x13c>
   2b35c:	ldrh	r2, [sl, r0]
   2b360:	sub	r3, fp, r3
   2b364:	cmp	r3, r2
   2b368:	strh	r2, [sp, #36]	; 0x24
   2b36c:	bcc	2b278 <flatcc_verify_table_vector_field@@Base+0x13c>
   2b370:	ldr	r0, [sp]
   2b374:	str	r1, [sp, #4]
   2b378:	str	ip, [sp, #28]
   2b37c:	str	sl, [sp, #16]
   2b380:	str	fp, [sp, #20]
   2b384:	blx	r8
   2b388:	ldr	r1, [sp, #4]
   2b38c:	cmp	r0, #0
   2b390:	bne	2b278 <flatcc_verify_table_vector_field@@Base+0x13c>
   2b394:	add	r4, r4, #4
   2b398:	cmp	r4, r9
   2b39c:	beq	2b168 <flatcc_verify_table_vector_field@@Base+0x2c>
   2b3a0:	mov	r2, r6
   2b3a4:	ldr	r3, [r6], #4
   2b3a8:	str	r7, [sp, #24]
   2b3ac:	add	r3, r3, r4
   2b3b0:	cmp	r4, r3
   2b3b4:	bcs	2b3d0 <flatcc_verify_table_vector_field@@Base+0x294>
   2b3b8:	add	r0, r3, #4
   2b3bc:	cmp	fp, r0
   2b3c0:	bcc	2b3d0 <flatcc_verify_table_vector_field@@Base+0x294>
   2b3c4:	tst	r3, #3
   2b3c8:	add	r1, r1, #4
   2b3cc:	beq	2b260 <flatcc_verify_table_vector_field@@Base+0x124>
   2b3d0:	ldr	r3, [r2]
   2b3d4:	str	r7, [sp, #24]
   2b3d8:	b	2b280 <flatcc_verify_table_vector_field@@Base+0x144>
   2b3dc:	mov	r5, #15
   2b3e0:	b	2b168 <flatcc_verify_table_vector_field@@Base+0x2c>
   2b3e4:	mov	r5, #29
   2b3e8:	b	2b168 <flatcc_verify_table_vector_field@@Base+0x2c>
   2b3ec:	mov	r5, #30
   2b3f0:	b	2b168 <flatcc_verify_table_vector_field@@Base+0x2c>

0002b3f4 <flatcc_verify_union_table@@Base>:
   2b3f4:	ldr	r3, [r0, #8]
   2b3f8:	push	{r4, r5, lr}
   2b3fc:	sub	r3, r3, #1
   2b400:	sub	sp, sp, #28
   2b404:	cmp	r3, #0
   2b408:	ldr	lr, [r0]
   2b40c:	str	r3, [sp, #8]
   2b410:	ldr	ip, [r0, #4]
   2b414:	ldr	r2, [r0, #16]
   2b418:	ldr	r3, [r0, #20]
   2b41c:	moveq	r0, #3
   2b420:	bne	2b42c <flatcc_verify_union_table@@Base+0x38>
   2b424:	add	sp, sp, #28
   2b428:	pop	{r4, r5, pc}
   2b42c:	add	r3, r2, r3
   2b430:	cmp	r2, r3
   2b434:	bcs	2b4d0 <flatcc_verify_union_table@@Base+0xdc>
   2b438:	add	r2, r3, #4
   2b43c:	cmp	ip, r2
   2b440:	bcc	2b4d0 <flatcc_verify_union_table@@Base+0xdc>
   2b444:	tst	r3, #3
   2b448:	bne	2b4d0 <flatcc_verify_union_table@@Base+0xdc>
   2b44c:	str	r3, [sp, #16]
   2b450:	ldr	r2, [lr, r3]
   2b454:	subs	r2, r3, r2
   2b458:	bmi	2b4dc <flatcc_verify_union_table@@Base+0xe8>
   2b45c:	tst	r2, #1
   2b460:	bne	2b4dc <flatcc_verify_union_table@@Base+0xe8>
   2b464:	add	r0, r2, #2
   2b468:	cmp	ip, r0
   2b46c:	movcc	r0, #27
   2b470:	bcc	2b424 <flatcc_verify_union_table@@Base+0x30>
   2b474:	ldrh	r4, [lr, r2]
   2b478:	add	r5, lr, r2
   2b47c:	add	r2, r4, r2
   2b480:	cmp	ip, r2
   2b484:	strh	r4, [sp, #22]
   2b488:	bcc	2b4e4 <flatcc_verify_union_table@@Base+0xf0>
   2b48c:	tst	r4, #1
   2b490:	bne	2b4e4 <flatcc_verify_union_table@@Base+0xf0>
   2b494:	cmp	r4, #3
   2b498:	movls	r0, #28
   2b49c:	bls	2b424 <flatcc_verify_union_table@@Base+0x30>
   2b4a0:	ldrh	r2, [lr, r0]
   2b4a4:	sub	r3, ip, r3
   2b4a8:	cmp	r3, r2
   2b4ac:	strh	r2, [sp, #20]
   2b4b0:	movcc	r0, #20
   2b4b4:	bcc	2b424 <flatcc_verify_union_table@@Base+0x30>
   2b4b8:	mov	r0, sp
   2b4bc:	str	r5, [sp, #12]
   2b4c0:	str	lr, [sp]
   2b4c4:	str	ip, [sp, #4]
   2b4c8:	blx	r1
   2b4cc:	b	2b424 <flatcc_verify_union_table@@Base+0x30>
   2b4d0:	mov	r0, #15
   2b4d4:	add	sp, sp, #28
   2b4d8:	pop	{r4, r5, pc}
   2b4dc:	mov	r0, #29
   2b4e0:	b	2b424 <flatcc_verify_union_table@@Base+0x30>
   2b4e4:	mov	r0, #30
   2b4e8:	b	2b424 <flatcc_verify_union_table@@Base+0x30>

0002b4ec <flatcc_verify_union_struct@@Base>:
   2b4ec:	ldr	r3, [r0, #20]
   2b4f0:	ldr	ip, [r0, #4]
   2b4f4:	cmp	r3, #0
   2b4f8:	ldr	r0, [r0, #16]
   2b4fc:	bne	2b508 <flatcc_verify_union_struct@@Base+0x1c>
   2b500:	mov	r0, #18
   2b504:	bx	lr
   2b508:	add	r3, r0, r3
   2b50c:	cmp	ip, r3
   2b510:	bcc	2b500 <flatcc_verify_union_struct@@Base+0x14>
   2b514:	adds	r1, r1, r3
   2b518:	bcc	2b524 <flatcc_verify_union_struct@@Base+0x38>
   2b51c:	mov	r0, #10
   2b520:	bx	lr
   2b524:	cmp	ip, r1
   2b528:	bcs	2b534 <flatcc_verify_union_struct@@Base+0x48>
   2b52c:	mov	r0, #9
   2b530:	bx	lr
   2b534:	sub	r2, r2, #1
   2b538:	tst	r2, r3
   2b53c:	movne	r0, #11
   2b540:	moveq	r0, #0
   2b544:	bx	lr

0002b548 <flatcc_verify_union_string@@Base>:
   2b548:	ldr	r2, [r0, #16]
   2b54c:	ldr	r3, [r0, #20]
   2b550:	add	r3, r2, r3
   2b554:	cmp	r2, r3
   2b558:	bcs	2b594 <flatcc_verify_union_string@@Base+0x4c>
   2b55c:	ldr	r2, [r0, #4]
   2b560:	add	r1, r3, #4
   2b564:	cmp	r2, r1
   2b568:	bcc	2b594 <flatcc_verify_union_string@@Base+0x4c>
   2b56c:	tst	r3, #3
   2b570:	bne	2b594 <flatcc_verify_union_string@@Base+0x4c>
   2b574:	ldr	r0, [r0]
   2b578:	sub	r2, r2, r1
   2b57c:	ldr	r3, [r0, r3]
   2b580:	add	ip, r3, #1
   2b584:	cmp	r2, ip
   2b588:	bcs	2b59c <flatcc_verify_union_string@@Base+0x54>
   2b58c:	mov	r0, #8
   2b590:	bx	lr
   2b594:	mov	r0, #17
   2b598:	bx	lr
   2b59c:	add	r1, r0, r1
   2b5a0:	ldrb	r0, [r1, r3]
   2b5a4:	cmp	r0, #0
   2b5a8:	movne	r0, #7
   2b5ac:	moveq	r0, #0
   2b5b0:	bx	lr

0002b5b4 <flatcc_verify_buffer_header@@Base>:
   2b5b4:	ands	r3, r0, #3
   2b5b8:	beq	2b5c4 <flatcc_verify_buffer_header@@Base+0x10>
   2b5bc:	mov	r0, #5
   2b5c0:	bx	lr
   2b5c4:	cmn	r1, #9
   2b5c8:	bls	2b5d4 <flatcc_verify_buffer_header@@Base+0x20>
   2b5cc:	mov	r0, #6
   2b5d0:	bx	lr
   2b5d4:	cmp	r1, #7
   2b5d8:	bls	2b624 <flatcc_verify_buffer_header@@Base+0x70>
   2b5dc:	cmp	r2, #0
   2b5e0:	beq	2b62c <flatcc_verify_buffer_header@@Base+0x78>
   2b5e4:	push	{r4, lr}
   2b5e8:	sub	sp, sp, #8
   2b5ec:	mov	r4, r0
   2b5f0:	add	r0, sp, #8
   2b5f4:	mov	r1, r2
   2b5f8:	str	r3, [r0, #-4]!
   2b5fc:	mov	r2, #4
   2b600:	bl	145c8 <strncpy@plt>
   2b604:	ldr	r2, [r4, #4]
   2b608:	ldr	r3, [sp, #4]
   2b60c:	cmp	r3, #0
   2b610:	cmpne	r2, r3
   2b614:	moveq	r0, #0
   2b618:	movne	r0, #2
   2b61c:	add	sp, sp, #8
   2b620:	pop	{r4, pc}
   2b624:	mov	r0, #1
   2b628:	bx	lr
   2b62c:	mov	r0, #0
   2b630:	bx	lr

0002b634 <flatcc_verify_typed_buffer_header@@Base>:
   2b634:	tst	r0, #3
   2b638:	beq	2b644 <flatcc_verify_typed_buffer_header@@Base+0x10>
   2b63c:	mov	r0, #5
   2b640:	bx	lr
   2b644:	cmn	r1, #9
   2b648:	bls	2b654 <flatcc_verify_typed_buffer_header@@Base+0x20>
   2b64c:	mov	r0, #6
   2b650:	bx	lr
   2b654:	cmp	r1, #7
   2b658:	bls	2b680 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   2b65c:	cmp	r2, #0
   2b660:	beq	2b678 <flatcc_verify_typed_buffer_header@@Base+0x44>
   2b664:	ldr	r0, [r0, #4]
   2b668:	cmp	r2, r0
   2b66c:	movne	r0, #2
   2b670:	moveq	r0, #0
   2b674:	bx	lr
   2b678:	mov	r0, r2
   2b67c:	bx	lr
   2b680:	mov	r0, #1
   2b684:	bx	lr

0002b688 <flatcc_verify_struct_as_root@@Base>:
   2b688:	push	{r4, r5, r6, r7, r8, lr}
   2b68c:	mov	r6, r3
   2b690:	mov	r5, r0
   2b694:	mov	r4, r1
   2b698:	mov	r8, r2
   2b69c:	ldrh	r7, [sp, #24]
   2b6a0:	bl	2b5b4 <flatcc_verify_buffer_header@@Base>
   2b6a4:	cmp	r0, #0
   2b6a8:	bne	2b6d4 <flatcc_verify_struct_as_root@@Base+0x4c>
   2b6ac:	ldr	r2, [r5]
   2b6b0:	cmp	r4, r2
   2b6b4:	movcs	r3, #0
   2b6b8:	movcc	r3, #1
   2b6bc:	cmp	r2, #0
   2b6c0:	orreq	r3, r3, #1
   2b6c4:	cmp	r3, #0
   2b6c8:	beq	2b6e8 <flatcc_verify_struct_as_root@@Base+0x60>
   2b6cc:	mov	r0, #18
   2b6d0:	pop	{r4, r5, r6, r7, r8, pc}
   2b6d4:	mov	r2, r8
   2b6d8:	mov	r1, r4
   2b6dc:	mov	r0, r5
   2b6e0:	pop	{r4, r5, r6, r7, r8, lr}
   2b6e4:	b	2b5b4 <flatcc_verify_buffer_header@@Base>
   2b6e8:	adds	r6, r6, r2
   2b6ec:	bcc	2b6f8 <flatcc_verify_struct_as_root@@Base+0x70>
   2b6f0:	mov	r0, #10
   2b6f4:	pop	{r4, r5, r6, r7, r8, pc}
   2b6f8:	cmp	r4, r6
   2b6fc:	bcs	2b708 <flatcc_verify_struct_as_root@@Base+0x80>
   2b700:	mov	r0, #9
   2b704:	pop	{r4, r5, r6, r7, r8, pc}
   2b708:	sub	r7, r7, #1
   2b70c:	tst	r7, r2
   2b710:	movne	r0, #11
   2b714:	pop	{r4, r5, r6, r7, r8, pc}

0002b718 <flatcc_verify_struct_as_typed_root@@Base>:
   2b718:	push	{r4, r5, r6, r7, r8, lr}
   2b71c:	mov	r6, r3
   2b720:	mov	r5, r0
   2b724:	mov	r4, r1
   2b728:	mov	r8, r2
   2b72c:	ldrh	r7, [sp, #24]
   2b730:	bl	2b634 <flatcc_verify_typed_buffer_header@@Base>
   2b734:	cmp	r0, #0
   2b738:	bne	2b764 <flatcc_verify_struct_as_typed_root@@Base+0x4c>
   2b73c:	ldr	r2, [r5]
   2b740:	cmp	r4, r2
   2b744:	movcs	r3, #0
   2b748:	movcc	r3, #1
   2b74c:	cmp	r2, #0
   2b750:	orreq	r3, r3, #1
   2b754:	cmp	r3, #0
   2b758:	beq	2b778 <flatcc_verify_struct_as_typed_root@@Base+0x60>
   2b75c:	mov	r0, #18
   2b760:	pop	{r4, r5, r6, r7, r8, pc}
   2b764:	mov	r2, r8
   2b768:	mov	r1, r4
   2b76c:	mov	r0, r5
   2b770:	pop	{r4, r5, r6, r7, r8, lr}
   2b774:	b	2b634 <flatcc_verify_typed_buffer_header@@Base>
   2b778:	adds	r6, r6, r2
   2b77c:	bcc	2b788 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   2b780:	mov	r0, #10
   2b784:	pop	{r4, r5, r6, r7, r8, pc}
   2b788:	cmp	r4, r6
   2b78c:	bcs	2b798 <flatcc_verify_struct_as_typed_root@@Base+0x80>
   2b790:	mov	r0, #9
   2b794:	pop	{r4, r5, r6, r7, r8, pc}
   2b798:	sub	r7, r7, #1
   2b79c:	tst	r7, r2
   2b7a0:	movne	r0, #11
   2b7a4:	pop	{r4, r5, r6, r7, r8, pc}

0002b7a8 <flatcc_verify_table_as_root@@Base>:
   2b7a8:	push	{r4, r5, r6, r7, lr}
   2b7ac:	sub	sp, sp, #28
   2b7b0:	mov	r7, r3
   2b7b4:	mov	r4, r0
   2b7b8:	mov	r5, r1
   2b7bc:	mov	r6, r2
   2b7c0:	bl	2b5b4 <flatcc_verify_buffer_header@@Base>
   2b7c4:	cmp	r0, #0
   2b7c8:	bne	2b800 <flatcc_verify_table_as_root@@Base+0x58>
   2b7cc:	ldr	r3, [r4]
   2b7d0:	mov	r2, #99	; 0x63
   2b7d4:	cmp	r3, #0
   2b7d8:	str	r2, [sp, #8]
   2b7dc:	beq	2b7f4 <flatcc_verify_table_as_root@@Base+0x4c>
   2b7e0:	add	r2, r3, #4
   2b7e4:	cmp	r5, r2
   2b7e8:	bcc	2b7f4 <flatcc_verify_table_as_root@@Base+0x4c>
   2b7ec:	tst	r3, #3
   2b7f0:	beq	2b818 <flatcc_verify_table_as_root@@Base+0x70>
   2b7f4:	mov	r0, #15
   2b7f8:	add	sp, sp, #28
   2b7fc:	pop	{r4, r5, r6, r7, pc}
   2b800:	mov	r2, r6
   2b804:	mov	r1, r5
   2b808:	mov	r0, r4
   2b80c:	bl	2b5b4 <flatcc_verify_buffer_header@@Base>
   2b810:	add	sp, sp, #28
   2b814:	pop	{r4, r5, r6, r7, pc}
   2b818:	ldr	r2, [r4, r3]
   2b81c:	str	r3, [sp, #16]
   2b820:	subs	r2, r3, r2
   2b824:	bmi	2b898 <flatcc_verify_table_as_root@@Base+0xf0>
   2b828:	tst	r2, #1
   2b82c:	bne	2b898 <flatcc_verify_table_as_root@@Base+0xf0>
   2b830:	add	r1, r2, #2
   2b834:	cmp	r5, r1
   2b838:	movcc	r0, #27
   2b83c:	bcc	2b7f8 <flatcc_verify_table_as_root@@Base+0x50>
   2b840:	ldrh	r0, [r4, r2]
   2b844:	add	ip, r4, r2
   2b848:	add	r2, r0, r2
   2b84c:	cmp	r5, r2
   2b850:	strh	r0, [sp, #22]
   2b854:	bcc	2b8a0 <flatcc_verify_table_as_root@@Base+0xf8>
   2b858:	tst	r0, #1
   2b85c:	bne	2b8a0 <flatcc_verify_table_as_root@@Base+0xf8>
   2b860:	cmp	r0, #3
   2b864:	movls	r0, #28
   2b868:	bls	2b7f8 <flatcc_verify_table_as_root@@Base+0x50>
   2b86c:	ldrh	r2, [r4, r1]
   2b870:	sub	r3, r5, r3
   2b874:	cmp	r3, r2
   2b878:	strh	r2, [sp, #20]
   2b87c:	movcc	r0, #20
   2b880:	bcc	2b7f8 <flatcc_verify_table_as_root@@Base+0x50>
   2b884:	mov	r0, sp
   2b888:	str	ip, [sp, #12]
   2b88c:	stm	sp, {r4, r5}
   2b890:	blx	r7
   2b894:	b	2b7f8 <flatcc_verify_table_as_root@@Base+0x50>
   2b898:	mov	r0, #29
   2b89c:	b	2b7f8 <flatcc_verify_table_as_root@@Base+0x50>
   2b8a0:	mov	r0, #30
   2b8a4:	b	2b7f8 <flatcc_verify_table_as_root@@Base+0x50>

0002b8a8 <flatcc_verify_table_as_typed_root@@Base>:
   2b8a8:	push	{r4, r5, r6, r7, lr}
   2b8ac:	sub	sp, sp, #28
   2b8b0:	mov	r7, r3
   2b8b4:	mov	r4, r0
   2b8b8:	mov	r5, r1
   2b8bc:	mov	r6, r2
   2b8c0:	bl	2b634 <flatcc_verify_typed_buffer_header@@Base>
   2b8c4:	cmp	r0, #0
   2b8c8:	bne	2b900 <flatcc_verify_table_as_typed_root@@Base+0x58>
   2b8cc:	ldr	r3, [r4]
   2b8d0:	mov	r2, #99	; 0x63
   2b8d4:	cmp	r3, #0
   2b8d8:	str	r2, [sp, #8]
   2b8dc:	beq	2b8f4 <flatcc_verify_table_as_typed_root@@Base+0x4c>
   2b8e0:	add	r2, r3, #4
   2b8e4:	cmp	r5, r2
   2b8e8:	bcc	2b8f4 <flatcc_verify_table_as_typed_root@@Base+0x4c>
   2b8ec:	tst	r3, #3
   2b8f0:	beq	2b918 <flatcc_verify_table_as_typed_root@@Base+0x70>
   2b8f4:	mov	r0, #15
   2b8f8:	add	sp, sp, #28
   2b8fc:	pop	{r4, r5, r6, r7, pc}
   2b900:	mov	r2, r6
   2b904:	mov	r1, r5
   2b908:	mov	r0, r4
   2b90c:	bl	2b634 <flatcc_verify_typed_buffer_header@@Base>
   2b910:	add	sp, sp, #28
   2b914:	pop	{r4, r5, r6, r7, pc}
   2b918:	ldr	r2, [r4, r3]
   2b91c:	str	r3, [sp, #16]
   2b920:	subs	r2, r3, r2
   2b924:	bmi	2b998 <flatcc_verify_table_as_typed_root@@Base+0xf0>
   2b928:	tst	r2, #1
   2b92c:	bne	2b998 <flatcc_verify_table_as_typed_root@@Base+0xf0>
   2b930:	add	r1, r2, #2
   2b934:	cmp	r5, r1
   2b938:	movcc	r0, #27
   2b93c:	bcc	2b8f8 <flatcc_verify_table_as_typed_root@@Base+0x50>
   2b940:	ldrh	r0, [r4, r2]
   2b944:	add	ip, r4, r2
   2b948:	add	r2, r0, r2
   2b94c:	cmp	r5, r2
   2b950:	strh	r0, [sp, #22]
   2b954:	bcc	2b9a0 <flatcc_verify_table_as_typed_root@@Base+0xf8>
   2b958:	tst	r0, #1
   2b95c:	bne	2b9a0 <flatcc_verify_table_as_typed_root@@Base+0xf8>
   2b960:	cmp	r0, #3
   2b964:	movls	r0, #28
   2b968:	bls	2b8f8 <flatcc_verify_table_as_typed_root@@Base+0x50>
   2b96c:	ldrh	r2, [r4, r1]
   2b970:	sub	r3, r5, r3
   2b974:	cmp	r3, r2
   2b978:	strh	r2, [sp, #20]
   2b97c:	movcc	r0, #20
   2b980:	bcc	2b8f8 <flatcc_verify_table_as_typed_root@@Base+0x50>
   2b984:	mov	r0, sp
   2b988:	str	ip, [sp, #12]
   2b98c:	stm	sp, {r4, r5}
   2b990:	blx	r7
   2b994:	b	2b8f8 <flatcc_verify_table_as_typed_root@@Base+0x50>
   2b998:	mov	r0, #29
   2b99c:	b	2b8f8 <flatcc_verify_table_as_typed_root@@Base+0x50>
   2b9a0:	mov	r0, #30
   2b9a4:	b	2b8f8 <flatcc_verify_table_as_typed_root@@Base+0x50>

0002b9a8 <flatcc_verify_struct_as_nested_root@@Base>:
   2b9a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b9ac:	sub	sp, sp, #12
   2b9b0:	mvn	sl, #0
   2b9b4:	ldrh	r6, [sp, #52]	; 0x34
   2b9b8:	mov	r9, #1
   2b9bc:	mov	r7, r3
   2b9c0:	str	sl, [sp, #4]
   2b9c4:	mov	r3, r6
   2b9c8:	str	r9, [sp]
   2b9cc:	mov	r5, r0
   2b9d0:	mov	r4, r1
   2b9d4:	mov	fp, r2
   2b9d8:	ldr	r8, [sp, #48]	; 0x30
   2b9dc:	bl	2ae20 <flatcc_verify_vector_field@@Base>
   2b9e0:	cmp	r0, #0
   2b9e4:	bne	2ba4c <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   2b9e8:	add	r4, r4, #2
   2b9ec:	ldrh	r3, [r5, #22]
   2b9f0:	lsl	r4, r4, #1
   2b9f4:	uxth	r4, r4
   2b9f8:	cmp	r3, r4
   2b9fc:	bls	2ba70 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   2ba00:	ldr	r3, [r5, #12]
   2ba04:	ldrh	r3, [r3, r4]
   2ba08:	cmp	r3, #0
   2ba0c:	beq	2ba70 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   2ba10:	ldr	r1, [r5, #16]
   2ba14:	ldr	r2, [r5]
   2ba18:	add	r3, r3, r1
   2ba1c:	adds	r1, r2, r3
   2ba20:	beq	2ba70 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   2ba24:	ldr	r2, [r2, r3]
   2ba28:	mov	r3, r8
   2ba2c:	add	r0, r1, r2
   2ba30:	add	r0, r0, #4
   2ba34:	ldr	r1, [r1, r2]
   2ba38:	mov	r2, r7
   2ba3c:	str	r6, [sp, #48]	; 0x30
   2ba40:	add	sp, sp, #12
   2ba44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba48:	b	2b688 <flatcc_verify_struct_as_root@@Base>
   2ba4c:	str	sl, [sp, #52]	; 0x34
   2ba50:	str	r9, [sp, #48]	; 0x30
   2ba54:	mov	r3, r6
   2ba58:	mov	r2, fp
   2ba5c:	mov	r1, r4
   2ba60:	mov	r0, r5
   2ba64:	add	sp, sp, #12
   2ba68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba6c:	b	2ae20 <flatcc_verify_vector_field@@Base>
   2ba70:	add	sp, sp, #12
   2ba74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ba78 <flatcc_verify_table_as_nested_root@@Base>:
   2ba78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2ba7c:	sub	sp, sp, #32
   2ba80:	mvn	r9, #0
   2ba84:	ldrh	r7, [sp, #64]	; 0x40
   2ba88:	mov	r8, #1
   2ba8c:	mov	r6, r3
   2ba90:	str	r9, [sp, #4]
   2ba94:	mov	r3, r7
   2ba98:	str	r8, [sp]
   2ba9c:	mov	r5, r0
   2baa0:	mov	r4, r1
   2baa4:	mov	sl, r2
   2baa8:	bl	2ae20 <flatcc_verify_vector_field@@Base>
   2baac:	cmp	r0, #0
   2bab0:	bne	2bb54 <flatcc_verify_table_as_nested_root@@Base+0xdc>
   2bab4:	add	r4, r4, #2
   2bab8:	ldrh	r3, [r5, #22]
   2babc:	lsl	r4, r4, #1
   2bac0:	uxth	r4, r4
   2bac4:	cmp	r3, r4
   2bac8:	bls	2bb34 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2bacc:	ldr	r3, [r5, #12]
   2bad0:	ldrh	r3, [r3, r4]
   2bad4:	cmp	r3, #0
   2bad8:	beq	2bb34 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2badc:	ldr	r1, [r5, #16]
   2bae0:	ldr	r2, [r5]
   2bae4:	add	r3, r3, r1
   2bae8:	adds	r1, r2, r3
   2baec:	beq	2bb34 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2baf0:	ldr	r3, [r2, r3]
   2baf4:	mov	r2, r6
   2baf8:	add	r4, r1, r3
   2bafc:	ldr	r7, [r1, r3]
   2bb00:	add	r8, r4, #4
   2bb04:	mov	r0, r8
   2bb08:	mov	r1, r7
   2bb0c:	bl	2b5b4 <flatcc_verify_buffer_header@@Base>
   2bb10:	cmp	r0, #0
   2bb14:	bne	2bb3c <flatcc_verify_table_as_nested_root@@Base+0xc4>
   2bb18:	ldr	r3, [r5, #8]
   2bb1c:	ldr	r2, [r4, #4]
   2bb20:	sub	r3, r3, #1
   2bb24:	cmp	r3, #0
   2bb28:	str	r3, [sp, #16]
   2bb2c:	moveq	r0, #3
   2bb30:	bne	2bb74 <flatcc_verify_table_as_nested_root@@Base+0xfc>
   2bb34:	add	sp, sp, #32
   2bb38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bb3c:	mov	r2, r6
   2bb40:	mov	r1, r7
   2bb44:	mov	r0, r8
   2bb48:	bl	2b5b4 <flatcc_verify_buffer_header@@Base>
   2bb4c:	add	sp, sp, #32
   2bb50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bb54:	stm	sp, {r8, r9}
   2bb58:	mov	r3, r7
   2bb5c:	mov	r2, sl
   2bb60:	mov	r1, r4
   2bb64:	mov	r0, r5
   2bb68:	bl	2ae20 <flatcc_verify_vector_field@@Base>
   2bb6c:	add	sp, sp, #32
   2bb70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bb74:	cmp	r2, #0
   2bb78:	beq	2bc18 <flatcc_verify_table_as_nested_root@@Base+0x1a0>
   2bb7c:	add	r3, r2, #4
   2bb80:	cmp	r7, r3
   2bb84:	bcc	2bc18 <flatcc_verify_table_as_nested_root@@Base+0x1a0>
   2bb88:	tst	r2, #3
   2bb8c:	bne	2bc18 <flatcc_verify_table_as_nested_root@@Base+0x1a0>
   2bb90:	str	r2, [sp, #24]
   2bb94:	ldr	r3, [r8, r2]
   2bb98:	subs	r3, r2, r3
   2bb9c:	bmi	2bc24 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2bba0:	tst	r3, #1
   2bba4:	bne	2bc24 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2bba8:	add	r1, r3, #2
   2bbac:	cmp	r7, r1
   2bbb0:	movcc	r0, #27
   2bbb4:	bcc	2bb34 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2bbb8:	ldrh	r0, [r8, r3]
   2bbbc:	add	ip, r8, r3
   2bbc0:	add	r3, r0, r3
   2bbc4:	cmp	r7, r3
   2bbc8:	strh	r0, [sp, #30]
   2bbcc:	bcc	2bc2c <flatcc_verify_table_as_nested_root@@Base+0x1b4>
   2bbd0:	tst	r0, #1
   2bbd4:	bne	2bc2c <flatcc_verify_table_as_nested_root@@Base+0x1b4>
   2bbd8:	cmp	r0, #3
   2bbdc:	movls	r0, #28
   2bbe0:	bls	2bb34 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2bbe4:	ldrh	r3, [r8, r1]
   2bbe8:	sub	r2, r7, r2
   2bbec:	cmp	r2, r3
   2bbf0:	strh	r3, [sp, #28]
   2bbf4:	movcc	r0, #20
   2bbf8:	bcc	2bb34 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2bbfc:	add	r0, sp, #8
   2bc00:	ldr	r3, [sp, #68]	; 0x44
   2bc04:	str	ip, [sp, #20]
   2bc08:	str	r8, [sp, #8]
   2bc0c:	str	r7, [sp, #12]
   2bc10:	blx	r3
   2bc14:	b	2bb34 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2bc18:	mov	r0, #15
   2bc1c:	add	sp, sp, #32
   2bc20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bc24:	mov	r0, #29
   2bc28:	b	2bb34 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2bc2c:	mov	r0, #30
   2bc30:	b	2bb34 <flatcc_verify_table_as_nested_root@@Base+0xbc>

0002bc34 <flatcc_verify_union_field@@Base>:
   2bc34:	sub	ip, r1, #1
   2bc38:	push	{r4, r5, r6, lr}
   2bc3c:	uxth	ip, ip
   2bc40:	add	ip, ip, #2
   2bc44:	ldrh	lr, [r0, #22]
   2bc48:	lsl	ip, ip, #1
   2bc4c:	sub	sp, sp, #32
   2bc50:	uxth	ip, ip
   2bc54:	cmp	ip, lr
   2bc58:	ldr	r5, [r0, #12]
   2bc5c:	bcs	2bc88 <flatcc_verify_union_field@@Base+0x54>
   2bc60:	ldrh	ip, [r5, ip]
   2bc64:	cmp	ip, #0
   2bc68:	beq	2bc88 <flatcc_verify_union_field@@Base+0x54>
   2bc6c:	ldrh	r4, [r0, #20]
   2bc70:	add	r6, ip, #1
   2bc74:	cmp	r6, r4
   2bc78:	movhi	r0, #13
   2bc7c:	bls	2bccc <flatcc_verify_union_field@@Base+0x98>
   2bc80:	add	sp, sp, #32
   2bc84:	pop	{r4, r5, r6, pc}
   2bc88:	add	r1, r1, #2
   2bc8c:	lsl	r1, r1, #1
   2bc90:	uxth	r1, r1
   2bc94:	cmp	lr, r1
   2bc98:	bhi	2bcb4 <flatcc_verify_union_field@@Base+0x80>
   2bc9c:	cmp	r2, #0
   2bca0:	movne	r0, #21
   2bca4:	bne	2bc80 <flatcc_verify_union_field@@Base+0x4c>
   2bca8:	mov	r0, #0
   2bcac:	add	sp, sp, #32
   2bcb0:	pop	{r4, r5, r6, pc}
   2bcb4:	ldrh	r3, [r5, r1]
   2bcb8:	cmp	r3, #0
   2bcbc:	movne	r0, #23
   2bcc0:	beq	2bc9c <flatcc_verify_union_field@@Base+0x68>
   2bcc4:	add	sp, sp, #32
   2bcc8:	pop	{r4, r5, r6, pc}
   2bccc:	add	r4, r1, #2
   2bcd0:	ldr	r6, [r0]
   2bcd4:	lsl	r4, r4, #1
   2bcd8:	uxth	r4, r4
   2bcdc:	cmp	lr, r4
   2bce0:	bhi	2bd54 <flatcc_verify_union_field@@Base+0x120>
   2bce4:	ldr	lr, [r0, #16]
   2bce8:	add	ip, ip, lr
   2bcec:	add	r4, r6, ip
   2bcf0:	ldrb	ip, [r6, ip]
   2bcf4:	cmp	ip, #0
   2bcf8:	beq	2bca8 <flatcc_verify_union_field@@Base+0x74>
   2bcfc:	mov	r6, r3
   2bd00:	add	r3, sp, #4
   2bd04:	mov	r5, r0
   2bd08:	bl	2a9a4 <flatcc_emitter_copy_buffer@@Base+0xc8>
   2bd0c:	cmp	r0, #0
   2bd10:	bne	2bc80 <flatcc_verify_union_field@@Base+0x4c>
   2bd14:	ldr	r3, [sp, #4]
   2bd18:	cmp	r3, #0
   2bd1c:	beq	2bca8 <flatcc_verify_union_field@@Base+0x74>
   2bd20:	ldmib	r5, {r0, r1}
   2bd24:	ldr	r2, [r5]
   2bd28:	str	r3, [sp, #24]
   2bd2c:	str	r0, [sp, #12]
   2bd30:	str	r1, [sp, #16]
   2bd34:	ldr	r3, [r2, r3]
   2bd38:	str	r2, [sp, #8]
   2bd3c:	str	r3, [sp, #28]
   2bd40:	ldrb	r3, [r4]
   2bd44:	add	r0, sp, #8
   2bd48:	strb	r3, [sp, #20]
   2bd4c:	blx	r6
   2bd50:	b	2bc80 <flatcc_verify_union_field@@Base+0x4c>
   2bd54:	ldr	lr, [r0, #16]
   2bd58:	ldrh	r5, [r5, r4]
   2bd5c:	add	ip, ip, lr
   2bd60:	add	r4, r6, ip
   2bd64:	ldrb	ip, [r6, ip]
   2bd68:	adds	lr, ip, #0
   2bd6c:	movne	lr, #1
   2bd70:	cmp	r5, #0
   2bd74:	orreq	lr, lr, #1
   2bd78:	cmp	lr, #0
   2bd7c:	bne	2bcf4 <flatcc_verify_union_field@@Base+0xc0>
   2bd80:	mov	r0, #24
   2bd84:	add	sp, sp, #32
   2bd88:	pop	{r4, r5, r6, pc}

0002bd8c <flatcc_verify_union_vector_field@@Base>:
   2bd8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bd90:	sub	r6, r1, #1
   2bd94:	ldrh	lr, [r0, #22]
   2bd98:	uxth	r6, r6
   2bd9c:	add	r5, r6, #2
   2bda0:	sub	sp, sp, #52	; 0x34
   2bda4:	lsl	r5, r5, #1
   2bda8:	ldr	r4, [r0, #12]
   2bdac:	uxth	r5, r5
   2bdb0:	cmp	r5, lr
   2bdb4:	bcs	2be64 <flatcc_verify_union_vector_field@@Base+0xd8>
   2bdb8:	ldrh	ip, [r4, r5]
   2bdbc:	cmp	ip, #0
   2bdc0:	beq	2be64 <flatcc_verify_union_vector_field@@Base+0xd8>
   2bdc4:	mov	r9, #1
   2bdc8:	mvn	fp, #0
   2bdcc:	str	r3, [sp, #12]
   2bdd0:	mov	r7, r1
   2bdd4:	stm	sp, {r9, fp}
   2bdd8:	mov	r3, r9
   2bddc:	mov	r1, r6
   2bde0:	mov	r8, r2
   2bde4:	mov	r4, r0
   2bde8:	bl	2ae20 <flatcc_verify_vector_field@@Base>
   2bdec:	subs	sl, r0, #0
   2bdf0:	bne	2bf1c <flatcc_verify_union_vector_field@@Base+0x190>
   2bdf4:	ldrh	r3, [r4, #22]
   2bdf8:	cmp	r3, r5
   2bdfc:	bls	2be58 <flatcc_verify_union_vector_field@@Base+0xcc>
   2be00:	ldr	r3, [r4, #12]
   2be04:	ldrh	r3, [r3, r5]
   2be08:	cmp	r3, #0
   2be0c:	beq	2be58 <flatcc_verify_union_vector_field@@Base+0xcc>
   2be10:	ldr	r1, [r4, #16]
   2be14:	ldr	r2, [r4]
   2be18:	add	r3, r3, r1
   2be1c:	adds	lr, r2, r3
   2be20:	beq	2be58 <flatcc_verify_union_vector_field@@Base+0xcc>
   2be24:	ldr	ip, [r2, r3]
   2be28:	mov	r1, r7
   2be2c:	mov	r2, r8
   2be30:	add	r3, sp, #20
   2be34:	mov	r0, r4
   2be38:	add	r5, lr, ip
   2be3c:	ldr	r7, [lr, ip]
   2be40:	bl	2a9a4 <flatcc_emitter_copy_buffer@@Base+0xc8>
   2be44:	subs	r6, r0, #0
   2be48:	bne	2bf04 <flatcc_verify_union_vector_field@@Base+0x178>
   2be4c:	ldr	r3, [sp, #20]
   2be50:	cmp	r3, #0
   2be54:	bne	2bea0 <flatcc_verify_union_vector_field@@Base+0x114>
   2be58:	mov	r0, sl
   2be5c:	add	sp, sp, #52	; 0x34
   2be60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2be64:	add	ip, r1, #2
   2be68:	lsl	ip, ip, #1
   2be6c:	uxth	ip, ip
   2be70:	cmp	lr, ip
   2be74:	bhi	2be90 <flatcc_verify_union_vector_field@@Base+0x104>
   2be78:	cmp	r2, #0
   2be7c:	movne	sl, #22
   2be80:	beq	2bdc4 <flatcc_verify_union_vector_field@@Base+0x38>
   2be84:	mov	r0, sl
   2be88:	add	sp, sp, #52	; 0x34
   2be8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2be90:	ldrh	ip, [r4, ip]
   2be94:	cmp	ip, #0
   2be98:	bne	2bdc4 <flatcc_verify_union_vector_field@@Base+0x38>
   2be9c:	b	2be78 <flatcc_verify_union_vector_field@@Base+0xec>
   2bea0:	ldr	r1, [r4, #8]
   2bea4:	cmp	r1, #0
   2bea8:	movle	sl, #3
   2beac:	ble	2be58 <flatcc_verify_union_vector_field@@Base+0xcc>
   2beb0:	ldr	r0, [r4]
   2beb4:	ldr	r2, [r0, r3]
   2beb8:	add	r2, r3, r2
   2bebc:	cmp	r3, r2
   2bec0:	bcs	2bf14 <flatcc_verify_union_vector_field@@Base+0x188>
   2bec4:	ldr	ip, [r4, #4]
   2bec8:	add	r8, r2, #4
   2becc:	cmp	ip, r8
   2bed0:	bcc	2bf14 <flatcc_verify_union_vector_field@@Base+0x188>
   2bed4:	ands	r3, r8, #3
   2bed8:	beq	2bf44 <flatcc_verify_union_vector_field@@Base+0x1b8>
   2bedc:	cmp	r3, #0
   2bee0:	bne	2bf14 <flatcc_verify_union_vector_field@@Base+0x188>
   2bee4:	ldr	r3, [r0, r2]
   2bee8:	cmn	r3, #-1073741823	; 0xc0000001
   2beec:	movhi	sl, #25
   2bef0:	bhi	2be58 <flatcc_verify_union_vector_field@@Base+0xcc>
   2bef4:	sub	ip, ip, r8
   2bef8:	cmp	ip, r3, lsl #2
   2befc:	movcc	sl, #26
   2bf00:	bcc	2be58 <flatcc_verify_union_vector_field@@Base+0xcc>
   2bf04:	mov	sl, r6
   2bf08:	mov	r0, sl
   2bf0c:	add	sp, sp, #52	; 0x34
   2bf10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bf14:	mov	sl, #16
   2bf18:	b	2be58 <flatcc_verify_union_vector_field@@Base+0xcc>
   2bf1c:	stm	sp, {r9, fp}
   2bf20:	mov	r3, r9
   2bf24:	mov	r2, r8
   2bf28:	mov	r1, r6
   2bf2c:	mov	r0, r4
   2bf30:	bl	2ae20 <flatcc_verify_vector_field@@Base>
   2bf34:	mov	sl, r0
   2bf38:	mov	r0, sl
   2bf3c:	add	sp, sp, #52	; 0x34
   2bf40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bf44:	ldr	r3, [r0, r2]
   2bf48:	add	r4, r0, r2
   2bf4c:	cmn	r3, #-1073741823	; 0xc0000001
   2bf50:	bhi	2bee4 <flatcc_verify_union_vector_field@@Base+0x158>
   2bf54:	lsl	lr, r3, #2
   2bf58:	sub	r9, ip, r8
   2bf5c:	cmp	r9, lr
   2bf60:	bcc	2bee4 <flatcc_verify_union_vector_field@@Base+0x158>
   2bf64:	cmp	r7, r3
   2bf68:	movne	sl, #34	; 0x22
   2bf6c:	bne	2be58 <flatcc_verify_union_vector_field@@Base+0xcc>
   2bf70:	sub	r1, r1, #1
   2bf74:	cmp	r7, #0
   2bf78:	str	r1, [sp, #32]
   2bf7c:	str	r0, [sp, #24]
   2bf80:	str	ip, [sp, #28]
   2bf84:	beq	2bf04 <flatcc_verify_union_vector_field@@Base+0x178>
   2bf88:	add	r2, r2, lr
   2bf8c:	add	r7, r0, r2
   2bf90:	add	r5, r5, #4
   2bf94:	add	r9, sp, #24
   2bf98:	b	2bfb8 <flatcc_verify_union_vector_field@@Base+0x22c>
   2bf9c:	ldrb	r3, [r5]
   2bfa0:	cmp	r3, #0
   2bfa4:	bne	2c004 <flatcc_verify_union_vector_field@@Base+0x278>
   2bfa8:	cmp	r4, r7
   2bfac:	add	r8, r8, #4
   2bfb0:	add	r5, r5, #1
   2bfb4:	beq	2bf04 <flatcc_verify_union_vector_field@@Base+0x178>
   2bfb8:	ldr	r3, [r4, #4]!
   2bfbc:	mov	r0, r9
   2bfc0:	cmp	r3, #0
   2bfc4:	beq	2bf9c <flatcc_verify_union_vector_field@@Base+0x210>
   2bfc8:	ldrb	r2, [r5]
   2bfcc:	cmp	r2, #0
   2bfd0:	beq	2c00c <flatcc_verify_union_vector_field@@Base+0x280>
   2bfd4:	str	r3, [sp, #44]	; 0x2c
   2bfd8:	ldr	r3, [sp, #12]
   2bfdc:	strb	r2, [sp, #36]	; 0x24
   2bfe0:	str	r8, [sp, #40]	; 0x28
   2bfe4:	blx	r3
   2bfe8:	cmp	r0, #0
   2bfec:	beq	2bfa8 <flatcc_verify_union_vector_field@@Base+0x21c>
   2bff0:	mov	r0, r9
   2bff4:	ldr	r3, [sp, #12]
   2bff8:	blx	r3
   2bffc:	mov	sl, r0
   2c000:	b	2be58 <flatcc_verify_union_vector_field@@Base+0xcc>
   2c004:	mov	sl, #32
   2c008:	b	2be58 <flatcc_verify_union_vector_field@@Base+0xcc>
   2c00c:	mov	sl, #33	; 0x21
   2c010:	b	2be58 <flatcc_verify_union_vector_field@@Base+0xcc>
   2c014:	andeq	r0, r0, r0

0002c018 <grisu3_diy_fp_encode_double@@Base>:
   2c018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c01c:	sub	sp, sp, #60	; 0x3c
   2c020:	mov	sl, r0
   2c024:	ldr	lr, [sp, #96]	; 0x60
   2c028:	mov	fp, r1
   2c02c:	cmp	lr, #0
   2c030:	mov	r6, r3
   2c034:	movne	lr, #4
   2c038:	orrs	r3, sl, fp
   2c03c:	sub	r2, r2, r6
   2c040:	beq	2c5ac <grisu3_diy_fp_encode_double@@Base+0x594>
   2c044:	ldr	r1, [pc, #1380]	; 2c5b0 <grisu3_diy_fp_encode_double@@Base+0x598>
   2c048:	mov	r0, #0
   2c04c:	and	r0, r0, sl
   2c050:	and	r1, r1, fp
   2c054:	orrs	r3, r0, r1
   2c058:	movne	ip, #0
   2c05c:	bne	2c098 <grisu3_diy_fp_encode_double@@Base+0x80>
   2c060:	mvn	r4, #9
   2c064:	lsl	r3, fp, #10
   2c068:	lsl	r1, sl, #10
   2c06c:	orr	r3, r3, sl, lsr #22
   2c070:	mov	sl, r1
   2c074:	ldr	r1, [pc, #1332]	; 2c5b0 <grisu3_diy_fp_encode_double@@Base+0x598>
   2c078:	mov	r0, #0
   2c07c:	and	r0, r0, sl
   2c080:	and	r1, r1, r3
   2c084:	mov	fp, r3
   2c088:	orrs	r3, r0, r1
   2c08c:	mov	ip, r4
   2c090:	sub	r4, r4, #10
   2c094:	beq	2c064 <grisu3_diy_fp_encode_double@@Base+0x4c>
   2c098:	cmp	sl, #0
   2c09c:	sbcs	r3, fp, #0
   2c0a0:	blt	2c0bc <grisu3_diy_fp_encode_double@@Base+0xa4>
   2c0a4:	adds	sl, sl, sl
   2c0a8:	adc	fp, fp, fp
   2c0ac:	cmp	sl, #0
   2c0b0:	sbcs	r3, fp, #0
   2c0b4:	sub	ip, ip, #1
   2c0b8:	bge	2c0a4 <grisu3_diy_fp_encode_double@@Base+0x8c>
   2c0bc:	rsb	r3, ip, #0
   2c0c0:	cmn	r2, #348	; 0x15c
   2c0c4:	lsl	r3, lr, r3
   2c0c8:	str	r3, [sp, #20]
   2c0cc:	blt	2c588 <grisu3_diy_fp_encode_double@@Base+0x570>
   2c0d0:	cmp	r2, #348	; 0x15c
   2c0d4:	bge	2c564 <grisu3_diy_fp_encode_double@@Base+0x54c>
   2c0d8:	add	r1, r2, #348	; 0x15c
   2c0dc:	ldr	r3, [pc, #1232]	; 2c5b4 <grisu3_diy_fp_encode_double@@Base+0x59c>
   2c0e0:	asr	r1, r1, #3
   2c0e4:	add	r3, pc, r3
   2c0e8:	add	r1, r3, r1, lsl #4
   2c0ec:	ldrsh	r7, [r1, #66]	; 0x42
   2c0f0:	ldrd	r4, [r1, #56]	; 0x38
   2c0f4:	ldrsh	r1, [r1, #64]	; 0x40
   2c0f8:	cmp	r2, r7
   2c0fc:	strd	r4, [sp]
   2c100:	str	r1, [sp, #40]	; 0x28
   2c104:	blt	2c548 <grisu3_diy_fp_encode_double@@Base+0x530>
   2c108:	add	r1, r7, #7
   2c10c:	cmp	r2, r1
   2c110:	bgt	2c52c <grisu3_diy_fp_encode_double@@Base+0x514>
   2c114:	cmp	r2, r7
   2c118:	beq	2c208 <grisu3_diy_fp_encode_double@@Base+0x1f0>
   2c11c:	sub	r2, r2, r7
   2c120:	sub	r7, r2, #1
   2c124:	cmp	r7, #6
   2c128:	bhi	2c50c <grisu3_diy_fp_encode_double@@Base+0x4f4>
   2c12c:	ldr	r0, [pc, #1156]	; 2c5b8 <grisu3_diy_fp_encode_double@@Base+0x5a0>
   2c130:	lsl	r1, r7, #4
   2c134:	add	r0, pc, r0
   2c138:	mov	r3, #0
   2c13c:	ldrd	r4, [r0, r1]
   2c140:	add	r1, r0, r1
   2c144:	str	r1, [sp, #44]	; 0x2c
   2c148:	mov	r8, r4
   2c14c:	mov	r0, r4
   2c150:	strd	r4, [sp, #24]
   2c154:	umull	r4, r5, sl, r5
   2c158:	mov	r1, #0
   2c15c:	strd	r4, [sp, #32]
   2c160:	umull	r4, r5, fp, r8
   2c164:	mul	lr, sl, r1
   2c168:	mla	r2, fp, r1, r5
   2c16c:	mla	lr, r8, r3, lr
   2c170:	ldr	r1, [sp, #28]
   2c174:	umull	r8, r9, sl, r0
   2c178:	ldr	r0, [sp, #36]	; 0x24
   2c17c:	strd	r4, [sp, #48]	; 0x30
   2c180:	mla	r3, r1, r3, r0
   2c184:	add	r0, lr, r9
   2c188:	mov	lr, #0
   2c18c:	str	r0, [sp, #8]
   2c190:	str	lr, [sp, #12]
   2c194:	mov	r4, r2
   2c198:	mov	r0, r3
   2c19c:	ldrd	r2, [sp, #8]
   2c1a0:	ldr	r8, [sp, #48]	; 0x30
   2c1a4:	add	r6, r6, #1
   2c1a8:	adds	r2, r2, r8
   2c1ac:	adc	r3, r3, #0
   2c1b0:	adds	r0, r0, r4
   2c1b4:	ldr	r4, [sp, #28]
   2c1b8:	adc	r1, lr, lr
   2c1bc:	adds	r2, r2, #-2147483648	; 0x80000000
   2c1c0:	umlal	r0, r1, r4, fp
   2c1c4:	mov	fp, r1
   2c1c8:	ldr	r1, [sp, #44]	; 0x2c
   2c1cc:	adc	r3, r3, #0
   2c1d0:	mov	sl, r0
   2c1d4:	ldr	r4, [r1, #8]
   2c1d8:	ldr	r1, [sp, #32]
   2c1dc:	add	r7, r6, r7
   2c1e0:	adds	r2, r2, r1
   2c1e4:	adc	r3, r3, #0
   2c1e8:	adds	sl, sl, r3
   2c1ec:	adc	fp, fp, lr
   2c1f0:	cmp	r7, #19
   2c1f4:	add	ip, ip, r4
   2c1f8:	ldrgt	r3, [sp, #20]
   2c1fc:	add	ip, ip, #64	; 0x40
   2c200:	addgt	r3, r3, #4
   2c204:	strgt	r3, [sp, #20]
   2c208:	ldrd	r0, [sp]
   2c20c:	mov	r3, #0
   2c210:	mov	r5, #0
   2c214:	mov	r2, r0
   2c218:	umull	r6, r7, sl, r1
   2c21c:	umull	r8, r9, fp, r2
   2c220:	mul	lr, sl, r3
   2c224:	mla	r9, fp, r3, r9
   2c228:	ldr	r3, [sp, #4]
   2c22c:	umull	r0, r1, sl, r2
   2c230:	mla	r0, r2, r5, lr
   2c234:	mla	lr, r3, r5, r7
   2c238:	add	r2, r0, r1
   2c23c:	adds	r2, r2, r8
   2c240:	mov	r0, lr
   2c244:	ldr	r4, [sp, #4]
   2c248:	mov	lr, #0
   2c24c:	adc	r3, lr, #0
   2c250:	adds	r0, r0, r9
   2c254:	adc	r1, lr, lr
   2c258:	umlal	r0, r1, r4, fp
   2c25c:	adds	r2, r2, #-2147483648	; 0x80000000
   2c260:	adc	r3, r3, #0
   2c264:	adds	r2, r2, r6
   2c268:	adc	r3, r3, #0
   2c26c:	adds	r6, r3, r0
   2c270:	ldr	r3, [sp, #40]	; 0x28
   2c274:	adc	r7, lr, r1
   2c278:	add	ip, ip, r3
   2c27c:	ldr	r3, [sp, #20]
   2c280:	cmp	r3, lr
   2c284:	moveq	r2, #8
   2c288:	movne	r2, #9
   2c28c:	orrs	r1, r6, r7
   2c290:	add	r2, r3, r2
   2c294:	add	lr, ip, #64	; 0x40
   2c298:	beq	2c5ac <grisu3_diy_fp_encode_double@@Base+0x594>
   2c29c:	ldr	r1, [pc, #780]	; 2c5b0 <grisu3_diy_fp_encode_double@@Base+0x598>
   2c2a0:	mov	r0, #0
   2c2a4:	and	r0, r0, r6
   2c2a8:	and	r1, r1, r7
   2c2ac:	orrs	r3, r0, r1
   2c2b0:	bne	2c4e4 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   2c2b4:	add	ip, ip, #54	; 0x36
   2c2b8:	lsl	r3, r7, #10
   2c2bc:	lsl	r1, r6, #10
   2c2c0:	orr	r3, r3, r6, lsr #22
   2c2c4:	mov	r6, r1
   2c2c8:	ldr	r1, [pc, #736]	; 2c5b0 <grisu3_diy_fp_encode_double@@Base+0x598>
   2c2cc:	mov	r0, #0
   2c2d0:	and	r1, r1, r3
   2c2d4:	and	r0, r0, r6
   2c2d8:	mov	r7, r3
   2c2dc:	orrs	r3, r0, r1
   2c2e0:	mov	r3, ip
   2c2e4:	sub	ip, ip, #10
   2c2e8:	beq	2c2b8 <grisu3_diy_fp_encode_double@@Base+0x2a0>
   2c2ec:	cmp	r6, #0
   2c2f0:	sbcs	r1, r7, #0
   2c2f4:	blt	2c310 <grisu3_diy_fp_encode_double@@Base+0x2f8>
   2c2f8:	adds	r6, r6, r6
   2c2fc:	adc	r7, r7, r7
   2c300:	cmp	r6, #0
   2c304:	sbcs	r1, r7, #0
   2c308:	sub	r3, r3, #1
   2c30c:	bge	2c2f8 <grisu3_diy_fp_encode_double@@Base+0x2e0>
   2c310:	ldr	r0, [pc, #676]	; 2c5bc <grisu3_diy_fp_encode_double@@Base+0x5a4>
   2c314:	sub	lr, lr, r3
   2c318:	add	r1, r3, #64	; 0x40
   2c31c:	cmp	r1, r0
   2c320:	lsl	r2, r2, lr
   2c324:	blt	2c468 <grisu3_diy_fp_encode_double@@Base+0x450>
   2c328:	mov	r1, #0
   2c32c:	mov	lr, r1
   2c330:	mov	r0, #4
   2c334:	lsr	r4, r6, lr
   2c338:	rsb	r6, lr, #32
   2c33c:	sub	ip, lr, #32
   2c340:	orr	r4, r4, r7, lsl r6
   2c344:	orr	r4, r4, r7, lsr ip
   2c348:	add	ip, r2, r0
   2c34c:	cmp	lr, ip
   2c350:	add	r3, lr, r3
   2c354:	lsr	r5, r7, lr
   2c358:	blt	2c380 <grisu3_diy_fp_encode_double@@Base+0x368>
   2c35c:	adds	r4, r4, #1
   2c360:	adc	r5, r5, #0
   2c364:	mov	r6, #0
   2c368:	and	r7, r5, #2097152	; 0x200000
   2c36c:	orrs	lr, r6, r7
   2c370:	beq	2c380 <grisu3_diy_fp_encode_double@@Base+0x368>
   2c374:	lsrs	r5, r5, #1
   2c378:	rrx	r4, r4
   2c37c:	add	r3, r3, #1
   2c380:	ldr	r7, [pc, #568]	; 2c5c0 <grisu3_diy_fp_encode_double@@Base+0x5a8>
   2c384:	mvn	r6, #0
   2c388:	cmp	r5, r7
   2c38c:	cmpeq	r4, r6
   2c390:	bls	2c3ac <grisu3_diy_fp_encode_double@@Base+0x394>
   2c394:	lsrs	r5, r5, #1
   2c398:	rrx	r4, r4
   2c39c:	cmp	r5, r7
   2c3a0:	cmpeq	r4, r6
   2c3a4:	add	r3, r3, #1
   2c3a8:	bhi	2c394 <grisu3_diy_fp_encode_double@@Base+0x37c>
   2c3ac:	ldr	r8, [pc, #528]	; 2c5c4 <grisu3_diy_fp_encode_double@@Base+0x5ac>
   2c3b0:	cmp	r3, r8
   2c3b4:	movlt	r8, #0
   2c3b8:	movlt	r9, #0
   2c3bc:	blt	2c43c <grisu3_diy_fp_encode_double@@Base+0x424>
   2c3c0:	beq	2c410 <grisu3_diy_fp_encode_double@@Base+0x3f8>
   2c3c4:	mov	r6, #0
   2c3c8:	and	r7, r5, #1048576	; 0x100000
   2c3cc:	orrs	lr, r6, r7
   2c3d0:	addne	r3, r3, #1072	; 0x430
   2c3d4:	addne	r3, r3, #3
   2c3d8:	movne	r8, #0
   2c3dc:	lslne	r9, r3, #20
   2c3e0:	beq	2c3fc <grisu3_diy_fp_encode_double@@Base+0x3e4>
   2c3e4:	b	2c424 <grisu3_diy_fp_encode_double@@Base+0x40c>
   2c3e8:	mov	r6, #0
   2c3ec:	and	r7, r5, #1048576	; 0x100000
   2c3f0:	orrs	r6, r6, r7
   2c3f4:	bne	2c4c8 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   2c3f8:	mov	r3, lr
   2c3fc:	adds	r4, r4, r4
   2c400:	sub	lr, r3, #1
   2c404:	adc	r5, r5, r5
   2c408:	cmp	lr, r8
   2c40c:	bne	2c3e8 <grisu3_diy_fp_encode_double@@Base+0x3d0>
   2c410:	mov	r8, #0
   2c414:	and	r9, r5, #1048576	; 0x100000
   2c418:	orrs	r3, r8, r9
   2c41c:	movne	r8, #0
   2c420:	movne	r9, #1048576	; 0x100000
   2c424:	ldr	r7, [pc, #412]	; 2c5c8 <grisu3_diy_fp_encode_double@@Base+0x5b0>
   2c428:	mvn	r6, #0
   2c42c:	and	r4, r4, r6
   2c430:	and	r5, r5, r7
   2c434:	orr	r8, r8, r4
   2c438:	orr	r9, r9, r5
   2c43c:	ldr	r3, [sp, #100]	; 0x64
   2c440:	cmp	ip, r1
   2c444:	sub	r0, r0, r2
   2c448:	movgt	ip, #0
   2c44c:	movle	ip, #1
   2c450:	cmp	r0, r1
   2c454:	movlt	r0, ip
   2c458:	orrge	r0, ip, #1
   2c45c:	strd	r8, [r3]
   2c460:	add	sp, sp, #60	; 0x3c
   2c464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c468:	mvn	r0, #1072	; 0x430
   2c46c:	cmp	r1, r0
   2c470:	blt	2c4dc <grisu3_diy_fp_encode_double@@Base+0x4c4>
   2c474:	add	r1, r3, #1136	; 0x470
   2c478:	add	r1, r1, #2
   2c47c:	rsb	lr, r1, #64	; 0x40
   2c480:	cmp	lr, #60	; 0x3c
   2c484:	rsbgt	r1, r1, #2
   2c488:	ble	2c4ec <grisu3_diy_fp_encode_double@@Base+0x4d4>
   2c48c:	rsb	r0, r1, #32
   2c490:	lsr	ip, r6, r1
   2c494:	orr	ip, ip, r7, lsl r0
   2c498:	sub	r0, r1, #32
   2c49c:	lsr	lr, r7, r1
   2c4a0:	orr	ip, ip, r7, lsr r0
   2c4a4:	asr	r2, r2, r1
   2c4a8:	add	r3, r3, r1
   2c4ac:	mov	r1, #0
   2c4b0:	mov	r7, lr
   2c4b4:	mov	r6, ip
   2c4b8:	add	r2, r2, #9
   2c4bc:	mov	r0, r1
   2c4c0:	mov	lr, #62	; 0x3e
   2c4c4:	b	2c334 <grisu3_diy_fp_encode_double@@Base+0x31c>
   2c4c8:	add	r3, r3, #1072	; 0x430
   2c4cc:	add	r3, r3, #2
   2c4d0:	mov	r8, #0
   2c4d4:	lsl	r9, r3, #20
   2c4d8:	b	2c424 <grisu3_diy_fp_encode_double@@Base+0x40c>
   2c4dc:	mov	r1, #2
   2c4e0:	b	2c48c <grisu3_diy_fp_encode_double@@Base+0x474>
   2c4e4:	mov	r3, lr
   2c4e8:	b	2c2ec <grisu3_diy_fp_encode_double@@Base+0x2d4>
   2c4ec:	rsb	r1, r1, #63	; 0x3f
   2c4f0:	mov	ip, #1
   2c4f4:	mov	r0, #8
   2c4f8:	lsl	r4, ip, r1
   2c4fc:	and	r4, r4, r6
   2c500:	lsl	r0, r0, r1
   2c504:	lsl	r1, r4, #3
   2c508:	b	2c334 <grisu3_diy_fp_encode_double@@Base+0x31c>
   2c50c:	ldr	r1, [pc, #184]	; 2c5cc <grisu3_diy_fp_encode_double@@Base+0x5b4>
   2c510:	ldr	r0, [pc, #184]	; 2c5d0 <grisu3_diy_fp_encode_double@@Base+0x5b8>
   2c514:	add	r3, r3, #1440	; 0x5a0
   2c518:	add	r3, r3, #8
   2c51c:	mov	r2, #185	; 0xb9
   2c520:	add	r1, pc, r1
   2c524:	add	r0, pc, r0
   2c528:	bl	14610 <__assert_fail@plt>
   2c52c:	ldr	r1, [pc, #160]	; 2c5d4 <grisu3_diy_fp_encode_double@@Base+0x5bc>
   2c530:	ldr	r0, [pc, #160]	; 2c5d8 <grisu3_diy_fp_encode_double@@Base+0x5c0>
   2c534:	add	r3, r3, #24
   2c538:	mov	r2, #89	; 0x59
   2c53c:	add	r1, pc, r1
   2c540:	add	r0, pc, r0
   2c544:	bl	14610 <__assert_fail@plt>
   2c548:	ldr	r1, [pc, #140]	; 2c5dc <grisu3_diy_fp_encode_double@@Base+0x5c4>
   2c54c:	ldr	r0, [pc, #140]	; 2c5e0 <grisu3_diy_fp_encode_double@@Base+0x5c8>
   2c550:	add	r3, r3, #24
   2c554:	mov	r2, #88	; 0x58
   2c558:	add	r1, pc, r1
   2c55c:	add	r0, pc, r0
   2c560:	bl	14610 <__assert_fail@plt>
   2c564:	ldr	r3, [pc, #120]	; 2c5e4 <grisu3_diy_fp_encode_double@@Base+0x5cc>
   2c568:	ldr	r1, [pc, #120]	; 2c5e8 <grisu3_diy_fp_encode_double@@Base+0x5d0>
   2c56c:	ldr	r0, [pc, #120]	; 2c5ec <grisu3_diy_fp_encode_double@@Base+0x5d4>
   2c570:	add	r3, pc, r3
   2c574:	mov	r2, #81	; 0x51
   2c578:	add	r3, r3, #24
   2c57c:	add	r1, pc, r1
   2c580:	add	r0, pc, r0
   2c584:	bl	14610 <__assert_fail@plt>
   2c588:	ldr	r3, [pc, #96]	; 2c5f0 <grisu3_diy_fp_encode_double@@Base+0x5d8>
   2c58c:	ldr	r1, [pc, #96]	; 2c5f4 <grisu3_diy_fp_encode_double@@Base+0x5dc>
   2c590:	ldr	r0, [pc, #96]	; 2c5f8 <grisu3_diy_fp_encode_double@@Base+0x5e0>
   2c594:	add	r3, pc, r3
   2c598:	mov	r2, #80	; 0x50
   2c59c:	add	r3, r3, #24
   2c5a0:	add	r1, pc, r1
   2c5a4:	add	r0, pc, r0
   2c5a8:	bl	14610 <__assert_fail@plt>
   2c5ac:	bl	1487c <__assert_fail@plt+0x26c>
   2c5b0:			; <UNDEFINED> instruction: 0xffc00000
   2c5b4:	andeq	r6, r1, r4, asr ip
   2c5b8:	andeq	r9, r2, ip, lsl r2
   2c5bc:			; <UNDEFINED> instruction: 0xfffffc0e
   2c5c0:			; <UNDEFINED> instruction: 0x001fffff
   2c5c4:			; <UNDEFINED> instruction: 0xfffffbce
   2c5c8:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   2c5cc:	andeq	r7, r1, r0, lsr #1
   2c5d0:	andeq	r7, r1, r4, lsl #3
   2c5d4:	andeq	r7, r1, r4, lsl #1
   2c5d8:	andeq	r7, r1, ip, asr #2
   2c5dc:	andeq	r7, r1, r8, rrx
   2c5e0:	andeq	r7, r1, r0, lsr #2
   2c5e4:	andeq	r6, r1, r8, asr #15
   2c5e8:	andeq	r7, r1, r4, asr #32
   2c5ec:	ldrdeq	r7, [r1], -r0
   2c5f0:	andeq	r6, r1, r4, lsr #15
   2c5f4:	andeq	r7, r1, r0, lsr #32
   2c5f8:	andeq	r7, r1, ip, lsl #1
   2c5fc:	cmp	r1, #1000	; 0x3e8
   2c600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c604:	addle	r1, r1, #1
   2c608:	addgt	lr, r0, #1000	; 0x3e8
   2c60c:	mov	r4, #0
   2c610:	mov	r5, #0
   2c614:	addle	lr, r0, r1
   2c618:	addgt	lr, lr, #1
   2c61c:	cmp	lr, r0
   2c620:	sub	sp, sp, #44	; 0x2c
   2c624:	mov	fp, r2
   2c628:	mov	sl, r0
   2c62c:	strd	r4, [r2]
   2c630:	beq	2cb6c <grisu3_diy_fp_encode_double@@Base+0xb54>
   2c634:	ldrb	r0, [r0]
   2c638:	cmp	r0, #45	; 0x2d
   2c63c:	movne	r2, #0
   2c640:	movne	r3, sl
   2c644:	strne	r2, [sp, #16]
   2c648:	beq	2c9fc <grisu3_diy_fp_encode_double@@Base+0x9e4>
   2c64c:	cmp	r0, #48	; 0x30
   2c650:	beq	2ca1c <grisu3_diy_fp_encode_double@@Base+0xa04>
   2c654:	sub	r2, r0, #49	; 0x31
   2c658:	cmp	r2, #8
   2c65c:	bhi	2c75c <grisu3_diy_fp_encode_double@@Base+0x744>
   2c660:	add	r9, r3, #1
   2c664:	sub	r0, r0, #48	; 0x30
   2c668:	cmp	lr, r9
   2c66c:	asr	r1, r0, #31
   2c670:	beq	2cfcc <grisu3_diy_fp_encode_double@@Base+0xfb4>
   2c674:	ldrb	ip, [r3, #1]
   2c678:	sub	r3, ip, #48	; 0x30
   2c67c:	cmp	r3, #9
   2c680:	movhi	r4, r9
   2c684:	movhi	r9, #0
   2c688:	bhi	2c6ec <grisu3_diy_fp_encode_double@@Base+0x6d4>
   2c68c:	add	r5, r9, #1
   2c690:	mov	r8, #10
   2c694:	add	r7, pc, #988	; 0x3dc
   2c698:	ldrd	r6, [r7]
   2c69c:	b	2c6b0 <grisu3_diy_fp_encode_double@@Base+0x698>
   2c6a0:	cmp	r1, r7
   2c6a4:	cmpeq	r0, r6
   2c6a8:	bhi	2c778 <grisu3_diy_fp_encode_double@@Base+0x760>
   2c6ac:	mov	r5, r3
   2c6b0:	umull	r2, r3, r0, r8
   2c6b4:	mla	r3, r8, r1, r3
   2c6b8:	adds	r0, r2, ip
   2c6bc:	adc	r1, r3, #0
   2c6c0:	subs	r0, r0, #48	; 0x30
   2c6c4:	sbc	r1, r1, #0
   2c6c8:	cmp	r5, lr
   2c6cc:	mov	r4, r5
   2c6d0:	beq	2ce00 <grisu3_diy_fp_encode_double@@Base+0xde8>
   2c6d4:	ldrb	ip, [r5]
   2c6d8:	add	r3, r5, #1
   2c6dc:	sub	r2, ip, #48	; 0x30
   2c6e0:	cmp	r2, #9
   2c6e4:	bls	2c6a0 <grisu3_diy_fp_encode_double@@Base+0x688>
   2c6e8:	sub	r9, r5, r9
   2c6ec:	mov	r8, #0
   2c6f0:	mov	r2, r8
   2c6f4:	sub	r3, ip, #49	; 0x31
   2c6f8:	cmp	r3, #8
   2c6fc:	bhi	2c938 <grisu3_diy_fp_encode_double@@Base+0x920>
   2c700:	add	r6, r4, #1
   2c704:	cmp	lr, r6
   2c708:	add	r5, r2, #1
   2c70c:	beq	2caa8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2c710:	ldrb	ip, [r4, #1]
   2c714:	sub	r3, ip, #48	; 0x30
   2c718:	cmp	r3, #9
   2c71c:	bhi	2c92c <grisu3_diy_fp_encode_double@@Base+0x914>
   2c720:	sub	r2, r2, r4
   2c724:	add	r4, r4, #2
   2c728:	b	2c73c <grisu3_diy_fp_encode_double@@Base+0x724>
   2c72c:	ldrb	ip, [r4], #1
   2c730:	sub	r3, ip, #48	; 0x30
   2c734:	cmp	r3, #9
   2c738:	bhi	2c92c <grisu3_diy_fp_encode_double@@Base+0x914>
   2c73c:	cmp	r4, lr
   2c740:	add	r5, r2, r4
   2c744:	mov	r6, r4
   2c748:	bne	2c72c <grisu3_diy_fp_encode_double@@Base+0x714>
   2c74c:	add	r5, r5, r9
   2c750:	mov	r4, lr
   2c754:	mov	r8, #1
   2c758:	b	2c7cc <grisu3_diy_fp_encode_double@@Base+0x7b4>
   2c75c:	ldr	r3, [sp, #16]
   2c760:	cmp	r3, #0
   2c764:	moveq	r4, sl
   2c768:	movne	r4, #0
   2c76c:	mov	r0, r4
   2c770:	add	sp, sp, #44	; 0x2c
   2c774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c778:	cmp	ip, #52	; 0x34
   2c77c:	movls	r2, #0
   2c780:	movhi	r2, #1
   2c784:	adds	r0, r0, r2
   2c788:	adc	r1, r1, #0
   2c78c:	cmp	ip, #48	; 0x30
   2c790:	sub	r9, r4, r9
   2c794:	movne	r8, #1
   2c798:	movne	r2, #0
   2c79c:	beq	2c7b4 <grisu3_diy_fp_encode_double@@Base+0x79c>
   2c7a0:	b	2c6f4 <grisu3_diy_fp_encode_double@@Base+0x6dc>
   2c7a4:	ldrb	ip, [r3]
   2c7a8:	add	r3, r3, #1
   2c7ac:	cmp	ip, #48	; 0x30
   2c7b0:	bne	2ca70 <grisu3_diy_fp_encode_double@@Base+0xa58>
   2c7b4:	cmp	lr, r3
   2c7b8:	mov	r4, r3
   2c7bc:	sub	r2, r3, r5
   2c7c0:	bne	2c7a4 <grisu3_diy_fp_encode_double@@Base+0x78c>
   2c7c4:	add	r5, r2, r9
   2c7c8:	mov	r8, #1
   2c7cc:	cmp	lr, r4
   2c7d0:	beq	2caa8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2c7d4:	orrs	r3, r0, r1
   2c7d8:	moveq	r2, #1
   2c7dc:	movne	r2, #0
   2c7e0:	cmn	r5, #324	; 0x144
   2c7e4:	movge	r3, #0
   2c7e8:	movlt	r3, #1
   2c7ec:	orrs	r3, r2, r3
   2c7f0:	bne	2c908 <grisu3_diy_fp_encode_double@@Base+0x8f0>
   2c7f4:	ldr	r3, [pc, #652]	; 2ca88 <grisu3_diy_fp_encode_double@@Base+0xa70>
   2c7f8:	cmp	r5, r3
   2c7fc:	bgt	2ca98 <grisu3_diy_fp_encode_double@@Base+0xa80>
   2c800:	ldr	r3, [pc, #644]	; 2ca8c <grisu3_diy_fp_encode_double@@Base+0xa74>
   2c804:	mvn	r2, #0
   2c808:	cmp	r1, r3
   2c80c:	cmpeq	r0, r2
   2c810:	movls	r3, #1
   2c814:	movhi	r3, #0
   2c818:	cmp	r5, #22
   2c81c:	movhi	r3, #0
   2c820:	andls	r3, r3, #1
   2c824:	cmp	r3, #0
   2c828:	beq	2cb94 <grisu3_diy_fp_encode_double@@Base+0xb7c>
   2c82c:	bl	3dad8 <flatcc_json_printer_clear@@Base+0x588>
   2c830:	sub	r9, r5, r9
   2c834:	add	r3, r9, #22
   2c838:	vmov	d7, r0, r1
   2c83c:	cmp	r3, #44	; 0x2c
   2c840:	addls	pc, pc, r3, lsl #2
   2c844:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c848:	b	2ccf8 <grisu3_diy_fp_encode_double@@Base+0xce0>
   2c84c:	b	2cd04 <grisu3_diy_fp_encode_double@@Base+0xcec>
   2c850:	b	2ccec <grisu3_diy_fp_encode_double@@Base+0xcd4>
   2c854:	b	2cdc4 <grisu3_diy_fp_encode_double@@Base+0xdac>
   2c858:	b	2cdb8 <grisu3_diy_fp_encode_double@@Base+0xda0>
   2c85c:	b	2cdac <grisu3_diy_fp_encode_double@@Base+0xd94>
   2c860:	b	2cda0 <grisu3_diy_fp_encode_double@@Base+0xd88>
   2c864:	b	2cd94 <grisu3_diy_fp_encode_double@@Base+0xd7c>
   2c868:	b	2cd88 <grisu3_diy_fp_encode_double@@Base+0xd70>
   2c86c:	b	2cd7c <grisu3_diy_fp_encode_double@@Base+0xd64>
   2c870:	b	2cd70 <grisu3_diy_fp_encode_double@@Base+0xd58>
   2c874:	b	2cd64 <grisu3_diy_fp_encode_double@@Base+0xd4c>
   2c878:	b	2cd58 <grisu3_diy_fp_encode_double@@Base+0xd40>
   2c87c:	b	2cd4c <grisu3_diy_fp_encode_double@@Base+0xd34>
   2c880:	b	2cd40 <grisu3_diy_fp_encode_double@@Base+0xd28>
   2c884:	b	2cd34 <grisu3_diy_fp_encode_double@@Base+0xd1c>
   2c888:	b	2cd28 <grisu3_diy_fp_encode_double@@Base+0xd10>
   2c88c:	b	2cd1c <grisu3_diy_fp_encode_double@@Base+0xd04>
   2c890:	b	2cd10 <grisu3_diy_fp_encode_double@@Base+0xcf8>
   2c894:	b	2cc74 <grisu3_diy_fp_encode_double@@Base+0xc5c>
   2c898:	b	2cc68 <grisu3_diy_fp_encode_double@@Base+0xc50>
   2c89c:	b	2cc5c <grisu3_diy_fp_encode_double@@Base+0xc44>
   2c8a0:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c8a4:	b	2cc44 <grisu3_diy_fp_encode_double@@Base+0xc2c>
   2c8a8:	b	2cc38 <grisu3_diy_fp_encode_double@@Base+0xc20>
   2c8ac:	b	2cc2c <grisu3_diy_fp_encode_double@@Base+0xc14>
   2c8b0:	b	2cc20 <grisu3_diy_fp_encode_double@@Base+0xc08>
   2c8b4:	b	2cc14 <grisu3_diy_fp_encode_double@@Base+0xbfc>
   2c8b8:	b	2cc08 <grisu3_diy_fp_encode_double@@Base+0xbf0>
   2c8bc:	b	2cbfc <grisu3_diy_fp_encode_double@@Base+0xbe4>
   2c8c0:	b	2cbf0 <grisu3_diy_fp_encode_double@@Base+0xbd8>
   2c8c4:	b	2cbe4 <grisu3_diy_fp_encode_double@@Base+0xbcc>
   2c8c8:	b	2cbd8 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c8cc:	b	2cbcc <grisu3_diy_fp_encode_double@@Base+0xbb4>
   2c8d0:	b	2c8fc <grisu3_diy_fp_encode_double@@Base+0x8e4>
   2c8d4:	b	2ccd4 <grisu3_diy_fp_encode_double@@Base+0xcbc>
   2c8d8:	b	2ccc8 <grisu3_diy_fp_encode_double@@Base+0xcb0>
   2c8dc:	b	2ccbc <grisu3_diy_fp_encode_double@@Base+0xca4>
   2c8e0:	b	2ccb0 <grisu3_diy_fp_encode_double@@Base+0xc98>
   2c8e4:	b	2cca4 <grisu3_diy_fp_encode_double@@Base+0xc8c>
   2c8e8:	b	2cc98 <grisu3_diy_fp_encode_double@@Base+0xc80>
   2c8ec:	b	2cc8c <grisu3_diy_fp_encode_double@@Base+0xc74>
   2c8f0:	b	2cc80 <grisu3_diy_fp_encode_double@@Base+0xc68>
   2c8f4:	b	2cce0 <grisu3_diy_fp_encode_double@@Base+0xcc8>
   2c8f8:	b	2cc50 <grisu3_diy_fp_encode_double@@Base+0xc38>
   2c8fc:	vldr	d6, [pc, #380]	; 2ca80 <grisu3_diy_fp_encode_double@@Base+0xa68>
   2c900:	vmul.f64	d7, d7, d6
   2c904:	vstr	d7, [fp]
   2c908:	ldr	r3, [sp, #16]
   2c90c:	cmp	r3, #0
   2c910:	beq	2c76c <grisu3_diy_fp_encode_double@@Base+0x754>
   2c914:	vldr	d7, [fp]
   2c918:	mov	r0, r4
   2c91c:	vneg.f64	d7, d7
   2c920:	vstr	d7, [fp]
   2c924:	add	sp, sp, #44	; 0x2c
   2c928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c92c:	mov	r2, r5
   2c930:	mov	r4, r6
   2c934:	mov	r8, #1
   2c938:	cmp	ip, #46	; 0x2e
   2c93c:	beq	2cab0 <grisu3_diy_fp_encode_double@@Base+0xa98>
   2c940:	cmp	lr, r4
   2c944:	add	r5, r2, r9
   2c948:	beq	2caa8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2c94c:	orr	ip, ip, #32
   2c950:	cmp	ip, #101	; 0x65
   2c954:	bne	2c7d4 <grisu3_diy_fp_encode_double@@Base+0x7bc>
   2c958:	sub	r3, lr, r4
   2c95c:	cmp	r3, #1
   2c960:	ble	2caa8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2c964:	ldrb	r2, [r4, #1]
   2c968:	cmp	r2, #43	; 0x2b
   2c96c:	beq	2cde4 <grisu3_diy_fp_encode_double@@Base+0xdcc>
   2c970:	cmp	r2, #45	; 0x2d
   2c974:	beq	2cfa8 <grisu3_diy_fp_encode_double@@Base+0xf90>
   2c978:	add	ip, r4, #1
   2c97c:	mov	r3, #0
   2c980:	str	r3, [sp, #8]
   2c984:	sub	r2, r2, #48	; 0x30
   2c988:	uxtb	r3, r2
   2c98c:	cmp	r3, #9
   2c990:	bhi	2caa8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2c994:	add	r4, ip, #1
   2c998:	cmp	lr, r4
   2c99c:	beq	2c9e8 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   2c9a0:	ldrb	r3, [ip, #1]
   2c9a4:	sub	r6, r3, #48	; 0x30
   2c9a8:	cmp	r6, #9
   2c9ac:	bhi	2cdd0 <grisu3_diy_fp_encode_double@@Base+0xdb8>
   2c9b0:	ldr	r7, [pc, #216]	; 2ca90 <grisu3_diy_fp_encode_double@@Base+0xa78>
   2c9b4:	add	ip, ip, #2
   2c9b8:	b	2c9cc <grisu3_diy_fp_encode_double@@Base+0x9b4>
   2c9bc:	ldrb	r3, [ip], #1
   2c9c0:	sub	r6, r3, #48	; 0x30
   2c9c4:	cmp	r6, #9
   2c9c8:	bhi	2cdd0 <grisu3_diy_fp_encode_double@@Base+0xdb8>
   2c9cc:	add	r4, r2, r2, lsl #2
   2c9d0:	cmp	r2, r7
   2c9d4:	add	r4, r3, r4, lsl #1
   2c9d8:	suble	r2, r4, #48	; 0x30
   2c9dc:	cmp	lr, ip
   2c9e0:	mov	r4, ip
   2c9e4:	bne	2c9bc <grisu3_diy_fp_encode_double@@Base+0x9a4>
   2c9e8:	ldr	r3, [sp, #8]
   2c9ec:	cmp	r3, #0
   2c9f0:	beq	2caa8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2c9f4:	sub	r5, r5, r2
   2c9f8:	b	2c7cc <grisu3_diy_fp_encode_double@@Base+0x7b4>
   2c9fc:	add	r3, sl, #1
   2ca00:	cmp	lr, r3
   2ca04:	beq	2caa8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2ca08:	ldrb	r0, [sl, #1]
   2ca0c:	mov	r2, #1
   2ca10:	str	r2, [sp, #16]
   2ca14:	cmp	r0, #48	; 0x30
   2ca18:	bne	2c654 <grisu3_diy_fp_encode_double@@Base+0x63c>
   2ca1c:	add	r4, r3, #1
   2ca20:	cmp	lr, r4
   2ca24:	beq	2cb7c <grisu3_diy_fp_encode_double@@Base+0xb64>
   2ca28:	ldrb	ip, [r3, #1]
   2ca2c:	orr	r2, ip, #32
   2ca30:	cmp	r2, #120	; 0x78
   2ca34:	moveq	r4, sl
   2ca38:	beq	2c76c <grisu3_diy_fp_encode_double@@Base+0x754>
   2ca3c:	cmp	ip, #48	; 0x30
   2ca40:	bne	2ca60 <grisu3_diy_fp_encode_double@@Base+0xa48>
   2ca44:	add	r3, r3, #2
   2ca48:	cmp	r3, lr
   2ca4c:	mov	r4, r3
   2ca50:	beq	2cb7c <grisu3_diy_fp_encode_double@@Base+0xb64>
   2ca54:	ldrb	ip, [r3], #1
   2ca58:	cmp	ip, #48	; 0x30
   2ca5c:	beq	2ca48 <grisu3_diy_fp_encode_double@@Base+0xa30>
   2ca60:	mov	r9, r4
   2ca64:	mov	r0, #0
   2ca68:	mov	r1, #0
   2ca6c:	b	2c678 <grisu3_diy_fp_encode_double@@Base+0x660>
   2ca70:	mov	r8, #1
   2ca74:	b	2c6f4 <grisu3_diy_fp_encode_double@@Base+0x6dc>
   2ca78:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2ca7c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   2ca80:	andge	r0, r0, #0
   2ca84:	rsbmi	r1, sp, #148, 20	; 0x94000
   2ca88:	andeq	r0, r0, r6, lsr r1
   2ca8c:			; <UNDEFINED> instruction: 0x001fffff
   2ca90:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   2ca94:	svcvc	0x00f00000	; IMB
   2ca98:	ldr	r3, [pc, #-12]	; 2ca94 <grisu3_diy_fp_encode_double@@Base+0xa7c>
   2ca9c:	mov	r2, #0
   2caa0:	strd	r2, [fp]
   2caa4:	b	2c908 <grisu3_diy_fp_encode_double@@Base+0x8f0>
   2caa8:	mov	r4, #0
   2caac:	b	2c76c <grisu3_diy_fp_encode_double@@Base+0x754>
   2cab0:	ldrb	r3, [r4, #1]
   2cab4:	add	ip, r4, #1
   2cab8:	mov	r5, ip
   2cabc:	str	ip, [sp, #20]
   2cac0:	sub	ip, r3, #48	; 0x30
   2cac4:	cmp	ip, #9
   2cac8:	bhi	2caa8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2cacc:	cmp	lr, r5
   2cad0:	beq	2cfe8 <grisu3_diy_fp_encode_double@@Base+0xfd0>
   2cad4:	add	r7, pc, #980	; 0x3d4
   2cad8:	ldrd	r6, [r7]
   2cadc:	cmp	r1, r7
   2cae0:	cmpeq	r0, r6
   2cae4:	bhi	2cfd8 <grisu3_diy_fp_encode_double@@Base+0xfc0>
   2cae8:	add	r4, r4, #2
   2caec:	strd	r6, [sp, #8]
   2caf0:	mov	ip, #10
   2caf4:	str	r9, [sp, #24]
   2caf8:	str	r8, [sp, #28]
   2cafc:	b	2cb24 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   2cb00:	ldrb	r3, [r4]
   2cb04:	add	r4, r4, #1
   2cb08:	sub	r5, r3, #48	; 0x30
   2cb0c:	cmp	r5, #9
   2cb10:	bhi	2ce08 <grisu3_diy_fp_encode_double@@Base+0xdf0>
   2cb14:	ldrd	r8, [sp, #8]
   2cb18:	cmp	r1, r9
   2cb1c:	cmpeq	r0, r8
   2cb20:	bhi	2cf68 <grisu3_diy_fp_encode_double@@Base+0xf50>
   2cb24:	umull	r6, r7, r0, ip
   2cb28:	mla	r7, ip, r1, r7
   2cb2c:	adds	r0, r6, r3
   2cb30:	adc	r1, r7, #0
   2cb34:	subs	r0, r0, #48	; 0x30
   2cb38:	sbc	r1, r1, #0
   2cb3c:	cmp	r4, lr
   2cb40:	sub	r2, r2, #1
   2cb44:	mov	r6, r4
   2cb48:	bne	2cb00 <grisu3_diy_fp_encode_double@@Base+0xae8>
   2cb4c:	ldr	r3, [sp, #20]
   2cb50:	ldr	r9, [sp, #24]
   2cb54:	ldr	r8, [sp, #28]
   2cb58:	sub	r3, lr, r3
   2cb5c:	mov	r4, lr
   2cb60:	add	r9, r9, r3
   2cb64:	add	r5, r2, r9
   2cb68:	b	2c7cc <grisu3_diy_fp_encode_double@@Base+0x7b4>
   2cb6c:	mov	r4, lr
   2cb70:	mov	r0, r4
   2cb74:	add	sp, sp, #44	; 0x2c
   2cb78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cb7c:	mov	r9, #0
   2cb80:	mov	r0, #0
   2cb84:	mov	r1, #0
   2cb88:	mov	r5, r9
   2cb8c:	mov	r8, #0
   2cb90:	b	2c7cc <grisu3_diy_fp_encode_double@@Base+0x7b4>
   2cb94:	stm	sp, {r8, fp}
   2cb98:	mov	r3, r9
   2cb9c:	mov	r2, r5
   2cba0:	bl	2c018 <grisu3_diy_fp_encode_double@@Base>
   2cba4:	cmp	r0, #0
   2cba8:	bne	2c908 <grisu3_diy_fp_encode_double@@Base+0x8f0>
   2cbac:	mov	r0, sl
   2cbb0:	add	r1, sp, #36	; 0x24
   2cbb4:	bl	145d4 <strtod@plt>
   2cbb8:	ldr	r3, [sp, #36]	; 0x24
   2cbbc:	cmp	r4, r3
   2cbc0:	movcs	r4, r3
   2cbc4:	vstr	d0, [fp]
   2cbc8:	b	2c76c <grisu3_diy_fp_encode_double@@Base+0x754>
   2cbcc:	vldr	d6, [pc, #740]	; 2ceb8 <grisu3_diy_fp_encode_double@@Base+0xea0>
   2cbd0:	vmul.f64	d7, d7, d6
   2cbd4:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cbd8:	vldr	d6, [pc, #736]	; 2cec0 <grisu3_diy_fp_encode_double@@Base+0xea8>
   2cbdc:	vmul.f64	d7, d7, d6
   2cbe0:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cbe4:	vldr	d6, [pc, #732]	; 2cec8 <grisu3_diy_fp_encode_double@@Base+0xeb0>
   2cbe8:	vmul.f64	d7, d7, d6
   2cbec:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cbf0:	vldr	d6, [pc, #728]	; 2ced0 <grisu3_diy_fp_encode_double@@Base+0xeb8>
   2cbf4:	vmul.f64	d7, d7, d6
   2cbf8:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cbfc:	vldr	d6, [pc, #724]	; 2ced8 <grisu3_diy_fp_encode_double@@Base+0xec0>
   2cc00:	vmul.f64	d7, d7, d6
   2cc04:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cc08:	vldr	d6, [pc, #720]	; 2cee0 <grisu3_diy_fp_encode_double@@Base+0xec8>
   2cc0c:	vmul.f64	d7, d7, d6
   2cc10:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cc14:	vldr	d6, [pc, #716]	; 2cee8 <grisu3_diy_fp_encode_double@@Base+0xed0>
   2cc18:	vmul.f64	d7, d7, d6
   2cc1c:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cc20:	vldr	d6, [pc, #712]	; 2cef0 <grisu3_diy_fp_encode_double@@Base+0xed8>
   2cc24:	vmul.f64	d7, d7, d6
   2cc28:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cc2c:	vldr	d6, [pc, #708]	; 2cef8 <grisu3_diy_fp_encode_double@@Base+0xee0>
   2cc30:	vmul.f64	d7, d7, d6
   2cc34:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cc38:	vldr	d6, [pc, #704]	; 2cf00 <grisu3_diy_fp_encode_double@@Base+0xee8>
   2cc3c:	vmul.f64	d7, d7, d6
   2cc40:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cc44:	vldr	d6, [pc, #700]	; 2cf08 <grisu3_diy_fp_encode_double@@Base+0xef0>
   2cc48:	vmul.f64	d7, d7, d6
   2cc4c:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cc50:	vldr	d6, [pc, #696]	; 2cf10 <grisu3_diy_fp_encode_double@@Base+0xef8>
   2cc54:	vmul.f64	d7, d7, d6
   2cc58:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cc5c:	vldr	d6, [pc, #676]	; 2cf08 <grisu3_diy_fp_encode_double@@Base+0xef0>
   2cc60:	vdiv.f64	d7, d7, d6
   2cc64:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cc68:	vldr	d6, [pc, #656]	; 2cf00 <grisu3_diy_fp_encode_double@@Base+0xee8>
   2cc6c:	vdiv.f64	d7, d7, d6
   2cc70:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cc74:	vldr	d6, [pc, #636]	; 2cef8 <grisu3_diy_fp_encode_double@@Base+0xee0>
   2cc78:	vdiv.f64	d7, d7, d6
   2cc7c:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cc80:	vldr	d6, [pc, #656]	; 2cf18 <grisu3_diy_fp_encode_double@@Base+0xf00>
   2cc84:	vmul.f64	d7, d7, d6
   2cc88:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cc8c:	vldr	d6, [pc, #652]	; 2cf20 <grisu3_diy_fp_encode_double@@Base+0xf08>
   2cc90:	vmul.f64	d7, d7, d6
   2cc94:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cc98:	vldr	d6, [pc, #648]	; 2cf28 <grisu3_diy_fp_encode_double@@Base+0xf10>
   2cc9c:	vmul.f64	d7, d7, d6
   2cca0:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cca4:	vldr	d6, [pc, #644]	; 2cf30 <grisu3_diy_fp_encode_double@@Base+0xf18>
   2cca8:	vmul.f64	d7, d7, d6
   2ccac:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2ccb0:	vldr	d6, [pc, #640]	; 2cf38 <grisu3_diy_fp_encode_double@@Base+0xf20>
   2ccb4:	vmul.f64	d7, d7, d6
   2ccb8:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2ccbc:	vldr	d6, [pc, #636]	; 2cf40 <grisu3_diy_fp_encode_double@@Base+0xf28>
   2ccc0:	vmul.f64	d7, d7, d6
   2ccc4:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2ccc8:	vldr	d6, [pc, #632]	; 2cf48 <grisu3_diy_fp_encode_double@@Base+0xf30>
   2cccc:	vmul.f64	d7, d7, d6
   2ccd0:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2ccd4:	vldr	d6, [pc, #628]	; 2cf50 <grisu3_diy_fp_encode_double@@Base+0xf38>
   2ccd8:	vmul.f64	d7, d7, d6
   2ccdc:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cce0:	vldr	d6, [pc, #624]	; 2cf58 <grisu3_diy_fp_encode_double@@Base+0xf40>
   2cce4:	vmul.f64	d7, d7, d6
   2cce8:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2ccec:	vldr	d6, [pc, #548]	; 2cf18 <grisu3_diy_fp_encode_double@@Base+0xf00>
   2ccf0:	vdiv.f64	d7, d7, d6
   2ccf4:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2ccf8:	vldr	d6, [pc, #528]	; 2cf10 <grisu3_diy_fp_encode_double@@Base+0xef8>
   2ccfc:	vdiv.f64	d7, d7, d6
   2cd00:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cd04:	vldr	d6, [pc, #588]	; 2cf58 <grisu3_diy_fp_encode_double@@Base+0xf40>
   2cd08:	vdiv.f64	d7, d7, d6
   2cd0c:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cd10:	vldr	d6, [pc, #472]	; 2cef0 <grisu3_diy_fp_encode_double@@Base+0xed8>
   2cd14:	vdiv.f64	d7, d7, d6
   2cd18:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cd1c:	vldr	d6, [pc, #452]	; 2cee8 <grisu3_diy_fp_encode_double@@Base+0xed0>
   2cd20:	vdiv.f64	d7, d7, d6
   2cd24:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cd28:	vldr	d6, [pc, #432]	; 2cee0 <grisu3_diy_fp_encode_double@@Base+0xec8>
   2cd2c:	vdiv.f64	d7, d7, d6
   2cd30:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cd34:	vldr	d6, [pc, #412]	; 2ced8 <grisu3_diy_fp_encode_double@@Base+0xec0>
   2cd38:	vdiv.f64	d7, d7, d6
   2cd3c:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cd40:	vldr	d6, [pc, #392]	; 2ced0 <grisu3_diy_fp_encode_double@@Base+0xeb8>
   2cd44:	vdiv.f64	d7, d7, d6
   2cd48:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cd4c:	vldr	d6, [pc, #372]	; 2cec8 <grisu3_diy_fp_encode_double@@Base+0xeb0>
   2cd50:	vdiv.f64	d7, d7, d6
   2cd54:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cd58:	vldr	d6, [pc, #352]	; 2cec0 <grisu3_diy_fp_encode_double@@Base+0xea8>
   2cd5c:	vdiv.f64	d7, d7, d6
   2cd60:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cd64:	vldr	d6, [pc, #332]	; 2ceb8 <grisu3_diy_fp_encode_double@@Base+0xea0>
   2cd68:	vdiv.f64	d7, d7, d6
   2cd6c:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cd70:	vldr	d6, [pc, #488]	; 2cf60 <grisu3_diy_fp_encode_double@@Base+0xf48>
   2cd74:	vdiv.f64	d7, d7, d6
   2cd78:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cd7c:	vldr	d6, [pc, #460]	; 2cf50 <grisu3_diy_fp_encode_double@@Base+0xf38>
   2cd80:	vdiv.f64	d7, d7, d6
   2cd84:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cd88:	vldr	d6, [pc, #440]	; 2cf48 <grisu3_diy_fp_encode_double@@Base+0xf30>
   2cd8c:	vdiv.f64	d7, d7, d6
   2cd90:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cd94:	vldr	d6, [pc, #420]	; 2cf40 <grisu3_diy_fp_encode_double@@Base+0xf28>
   2cd98:	vdiv.f64	d7, d7, d6
   2cd9c:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cda0:	vldr	d6, [pc, #400]	; 2cf38 <grisu3_diy_fp_encode_double@@Base+0xf20>
   2cda4:	vdiv.f64	d7, d7, d6
   2cda8:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cdac:	vldr	d6, [pc, #380]	; 2cf30 <grisu3_diy_fp_encode_double@@Base+0xf18>
   2cdb0:	vdiv.f64	d7, d7, d6
   2cdb4:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cdb8:	vldr	d6, [pc, #360]	; 2cf28 <grisu3_diy_fp_encode_double@@Base+0xf10>
   2cdbc:	vdiv.f64	d7, d7, d6
   2cdc0:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cdc4:	vldr	d6, [pc, #340]	; 2cf20 <grisu3_diy_fp_encode_double@@Base+0xf08>
   2cdc8:	vdiv.f64	d7, d7, d6
   2cdcc:	b	2c904 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2cdd0:	ldr	r3, [sp, #8]
   2cdd4:	cmp	r3, #0
   2cdd8:	bne	2c9f4 <grisu3_diy_fp_encode_double@@Base+0x9dc>
   2cddc:	add	r5, r5, r2
   2cde0:	b	2c7d4 <grisu3_diy_fp_encode_double@@Base+0x7bc>
   2cde4:	add	ip, r4, #2
   2cde8:	cmp	lr, ip
   2cdec:	beq	2caa8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2cdf0:	mov	r3, #0
   2cdf4:	ldrb	r2, [r4, #2]
   2cdf8:	str	r3, [sp, #8]
   2cdfc:	b	2c984 <grisu3_diy_fp_encode_double@@Base+0x96c>
   2ce00:	sub	r9, lr, r9
   2ce04:	b	2cb88 <grisu3_diy_fp_encode_double@@Base+0xb70>
   2ce08:	ldr	r3, [sp, #20]
   2ce0c:	ldr	r9, [sp, #24]
   2ce10:	sub	r3, r6, r3
   2ce14:	ldr	r8, [sp, #28]
   2ce18:	add	r9, r9, r3
   2ce1c:	ldrb	ip, [r6]
   2ce20:	cmp	ip, #48	; 0x30
   2ce24:	bne	2cfc4 <grisu3_diy_fp_encode_double@@Base+0xfac>
   2ce28:	sub	r3, r2, r6
   2ce2c:	add	r6, r6, #1
   2ce30:	cmp	r6, lr
   2ce34:	mov	r4, r6
   2ce38:	add	r2, r3, r6
   2ce3c:	beq	2cb64 <grisu3_diy_fp_encode_double@@Base+0xb4c>
   2ce40:	ldrb	ip, [r6], #1
   2ce44:	cmp	ip, #48	; 0x30
   2ce48:	beq	2ce30 <grisu3_diy_fp_encode_double@@Base+0xe18>
   2ce4c:	sub	r3, ip, #49	; 0x31
   2ce50:	cmp	r3, #8
   2ce54:	bhi	2cea8 <grisu3_diy_fp_encode_double@@Base+0xe90>
   2ce58:	add	r3, r4, #1
   2ce5c:	cmp	lr, r3
   2ce60:	beq	2caa8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2ce64:	ldrb	ip, [r4, #1]
   2ce68:	sub	r5, ip, #48	; 0x30
   2ce6c:	cmp	r5, #9
   2ce70:	bhi	2cea0 <grisu3_diy_fp_encode_double@@Base+0xe88>
   2ce74:	add	r3, r4, #2
   2ce78:	b	2ce90 <grisu3_diy_fp_encode_double@@Base+0xe78>
   2ce7c:	ldrb	ip, [r3]
   2ce80:	add	r3, r3, #1
   2ce84:	sub	r5, ip, #48	; 0x30
   2ce88:	cmp	r5, #9
   2ce8c:	bhi	2cea4 <grisu3_diy_fp_encode_double@@Base+0xe8c>
   2ce90:	cmp	r3, lr
   2ce94:	mov	r4, r3
   2ce98:	bne	2ce7c <grisu3_diy_fp_encode_double@@Base+0xe64>
   2ce9c:	b	2c7c4 <grisu3_diy_fp_encode_double@@Base+0x7ac>
   2cea0:	mov	r4, r3
   2cea4:	mov	r8, #1
   2cea8:	add	r5, r2, r9
   2ceac:	b	2c94c <grisu3_diy_fp_encode_double@@Base+0x934>
   2ceb0:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2ceb4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   2ceb8:	stmda	r0, {}	; <UNPREDICTABLE>
   2cebc:	eorsmi	r4, r7, #7733248	; 0x760000
   2cec0:	andcs	r0, r0, r0
   2cec4:	andmi	sl, r2, #95	; 0x5f
   2cec8:	andeq	r0, r0, r0
   2cecc:	bicmi	ip, sp, r5, ror #26
   2ced0:	andeq	r0, r0, r0
   2ced4:	orrsmi	sp, r7, r4, lsl #15
   2ced8:	andeq	r0, r0, r0
   2cedc:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   2cee0:	andeq	r0, r0, r0
   2cee4:	smlawbmi	lr, r0, r4, r8
   2cee8:	andeq	r0, r0, r0
   2ceec:	rscsmi	r6, r8, r0, lsl #20
   2cef0:	andeq	r0, r0, r0
   2cef4:	sbcmi	r8, r3, r0, lsl #16
   2cef8:	andeq	r0, r0, r0
   2cefc:	addmi	r4, pc, r0
   2cf00:	andeq	r0, r0, r0
   2cf04:	subsmi	r0, r9, r0
   2cf08:	andeq	r0, r0, r0
   2cf0c:	eormi	r0, r4, r0
   2cf10:			; <UNDEFINED> instruction: 0x064dd592
   2cf14:	strmi	pc, [r0], #207	; 0xcf
   2cf18:	ldmvc	r5!, {r6, sl, fp, pc}
   2cf1c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   2cf20:	addsvs	r3, r1, r0, lsl #26
   2cf24:	mvnmi	r5, #228, 16	; 0xe40000
   2cf28:	strbvs	ip, [lr, -r0, lsl #16]
   2cf2c:			; <UNDEFINED> instruction: 0x43abc16d
   2cf30:	ldrbhi	sl, [r8]
   2cf34:	cmnmi	r6, #1459617792	; 0x57000000
   2cf38:	strbcc	r8, [r0, r0]!
   2cf3c:	movtmi	ip, #4985	; 0x1379
   2cf40:	ldrtcs	r0, [r4], -r0
   2cf44:	movwmi	r6, #52213	; 0xcbf5
   2cf48:	cdpne	0, 9, cr0, cr0, cr0, {0}
   2cf4c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   2cf50:	strb	r0, [r0, #-0]
   2cf54:	adcmi	r3, r2, #156	; 0x9c
   2cf58:	usatle	lr, #2, r0, asr #30
   2cf5c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   2cf60:	andge	r0, r0, #0
   2cf64:	rsbmi	r1, sp, #148, 20	; 0x94000
   2cf68:	ldr	r8, [sp, #28]
   2cf6c:	ldr	ip, [sp, #20]
   2cf70:	cmp	r8, #0
   2cf74:	ldr	r9, [sp, #24]
   2cf78:	sub	r8, r6, ip
   2cf7c:	bne	2cf94 <grisu3_diy_fp_encode_double@@Base+0xf7c>
   2cf80:	cmp	r3, #52	; 0x34
   2cf84:	movls	r3, #0
   2cf88:	movhi	r3, #1
   2cf8c:	adds	r0, r0, r3
   2cf90:	adc	r1, r1, #0
   2cf94:	cmp	lr, r6
   2cf98:	add	r9, r9, r8
   2cf9c:	beq	2caa8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2cfa0:	mov	r8, #1
   2cfa4:	b	2ce1c <grisu3_diy_fp_encode_double@@Base+0xe04>
   2cfa8:	add	ip, r4, #2
   2cfac:	cmp	lr, ip
   2cfb0:	beq	2caa8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2cfb4:	mov	r3, #1
   2cfb8:	ldrb	r2, [r4, #2]
   2cfbc:	str	r3, [sp, #8]
   2cfc0:	b	2c984 <grisu3_diy_fp_encode_double@@Base+0x96c>
   2cfc4:	mov	r4, r6
   2cfc8:	b	2ce4c <grisu3_diy_fp_encode_double@@Base+0xe34>
   2cfcc:	mov	r4, lr
   2cfd0:	mov	r9, #0
   2cfd4:	b	2cb88 <grisu3_diy_fp_encode_double@@Base+0xb70>
   2cfd8:	cmp	r8, #0
   2cfdc:	bne	2cff4 <grisu3_diy_fp_encode_double@@Base+0xfdc>
   2cfe0:	ldr	r6, [sp, #20]
   2cfe4:	b	2cf80 <grisu3_diy_fp_encode_double@@Base+0xf68>
   2cfe8:	mov	r4, lr
   2cfec:	mov	r3, #0
   2cff0:	b	2cb60 <grisu3_diy_fp_encode_double@@Base+0xb48>
   2cff4:	ldr	r6, [sp, #20]
   2cff8:	b	2ce1c <grisu3_diy_fp_encode_double@@Base+0xe04>

0002cffc <flatcc_json_parser_error_string@@Base>:
   2cffc:	cmp	r0, #34	; 0x22
   2d000:	addls	pc, pc, r0, lsl #2
   2d004:	b	2d238 <flatcc_json_parser_error_string@@Base+0x23c>
   2d008:	b	2d094 <flatcc_json_parser_error_string@@Base+0x98>
   2d00c:	b	2d22c <flatcc_json_parser_error_string@@Base+0x230>
   2d010:	b	2d220 <flatcc_json_parser_error_string@@Base+0x224>
   2d014:	b	2d214 <flatcc_json_parser_error_string@@Base+0x218>
   2d018:	b	2d208 <flatcc_json_parser_error_string@@Base+0x20c>
   2d01c:	b	2d1fc <flatcc_json_parser_error_string@@Base+0x200>
   2d020:	b	2d1f0 <flatcc_json_parser_error_string@@Base+0x1f4>
   2d024:	b	2d1e4 <flatcc_json_parser_error_string@@Base+0x1e8>
   2d028:	b	2d1d8 <flatcc_json_parser_error_string@@Base+0x1dc>
   2d02c:	b	2d1cc <flatcc_json_parser_error_string@@Base+0x1d0>
   2d030:	b	2d1c0 <flatcc_json_parser_error_string@@Base+0x1c4>
   2d034:	b	2d1b4 <flatcc_json_parser_error_string@@Base+0x1b8>
   2d038:	b	2d1a8 <flatcc_json_parser_error_string@@Base+0x1ac>
   2d03c:	b	2d19c <flatcc_json_parser_error_string@@Base+0x1a0>
   2d040:	b	2d190 <flatcc_json_parser_error_string@@Base+0x194>
   2d044:	b	2d184 <flatcc_json_parser_error_string@@Base+0x188>
   2d048:	b	2d178 <flatcc_json_parser_error_string@@Base+0x17c>
   2d04c:	b	2d16c <flatcc_json_parser_error_string@@Base+0x170>
   2d050:	b	2d160 <flatcc_json_parser_error_string@@Base+0x164>
   2d054:	b	2d154 <flatcc_json_parser_error_string@@Base+0x158>
   2d058:	b	2d148 <flatcc_json_parser_error_string@@Base+0x14c>
   2d05c:	b	2d13c <flatcc_json_parser_error_string@@Base+0x140>
   2d060:	b	2d130 <flatcc_json_parser_error_string@@Base+0x134>
   2d064:	b	2d124 <flatcc_json_parser_error_string@@Base+0x128>
   2d068:	b	2d118 <flatcc_json_parser_error_string@@Base+0x11c>
   2d06c:	b	2d10c <flatcc_json_parser_error_string@@Base+0x110>
   2d070:	b	2d100 <flatcc_json_parser_error_string@@Base+0x104>
   2d074:	b	2d0f4 <flatcc_json_parser_error_string@@Base+0xf8>
   2d078:	b	2d0e8 <flatcc_json_parser_error_string@@Base+0xec>
   2d07c:	b	2d0dc <flatcc_json_parser_error_string@@Base+0xe0>
   2d080:	b	2d0d0 <flatcc_json_parser_error_string@@Base+0xd4>
   2d084:	b	2d0c4 <flatcc_json_parser_error_string@@Base+0xc8>
   2d088:	b	2d0b8 <flatcc_json_parser_error_string@@Base+0xbc>
   2d08c:	b	2d0ac <flatcc_json_parser_error_string@@Base+0xb0>
   2d090:	b	2d0a0 <flatcc_json_parser_error_string@@Base+0xa4>
   2d094:	ldr	r0, [pc, #424]	; 2d244 <flatcc_json_parser_error_string@@Base+0x248>
   2d098:	add	r0, pc, r0
   2d09c:	bx	lr
   2d0a0:	ldr	r0, [pc, #416]	; 2d248 <flatcc_json_parser_error_string@@Base+0x24c>
   2d0a4:	add	r0, pc, r0
   2d0a8:	bx	lr
   2d0ac:	ldr	r0, [pc, #408]	; 2d24c <flatcc_json_parser_error_string@@Base+0x250>
   2d0b0:	add	r0, pc, r0
   2d0b4:	bx	lr
   2d0b8:	ldr	r0, [pc, #400]	; 2d250 <flatcc_json_parser_error_string@@Base+0x254>
   2d0bc:	add	r0, pc, r0
   2d0c0:	bx	lr
   2d0c4:	ldr	r0, [pc, #392]	; 2d254 <flatcc_json_parser_error_string@@Base+0x258>
   2d0c8:	add	r0, pc, r0
   2d0cc:	bx	lr
   2d0d0:	ldr	r0, [pc, #384]	; 2d258 <flatcc_json_parser_error_string@@Base+0x25c>
   2d0d4:	add	r0, pc, r0
   2d0d8:	bx	lr
   2d0dc:	ldr	r0, [pc, #376]	; 2d25c <flatcc_json_parser_error_string@@Base+0x260>
   2d0e0:	add	r0, pc, r0
   2d0e4:	bx	lr
   2d0e8:	ldr	r0, [pc, #368]	; 2d260 <flatcc_json_parser_error_string@@Base+0x264>
   2d0ec:	add	r0, pc, r0
   2d0f0:	bx	lr
   2d0f4:	ldr	r0, [pc, #360]	; 2d264 <flatcc_json_parser_error_string@@Base+0x268>
   2d0f8:	add	r0, pc, r0
   2d0fc:	bx	lr
   2d100:	ldr	r0, [pc, #352]	; 2d268 <flatcc_json_parser_error_string@@Base+0x26c>
   2d104:	add	r0, pc, r0
   2d108:	bx	lr
   2d10c:	ldr	r0, [pc, #344]	; 2d26c <flatcc_json_parser_error_string@@Base+0x270>
   2d110:	add	r0, pc, r0
   2d114:	bx	lr
   2d118:	ldr	r0, [pc, #336]	; 2d270 <flatcc_json_parser_error_string@@Base+0x274>
   2d11c:	add	r0, pc, r0
   2d120:	bx	lr
   2d124:	ldr	r0, [pc, #328]	; 2d274 <flatcc_json_parser_error_string@@Base+0x278>
   2d128:	add	r0, pc, r0
   2d12c:	bx	lr
   2d130:	ldr	r0, [pc, #320]	; 2d278 <flatcc_json_parser_error_string@@Base+0x27c>
   2d134:	add	r0, pc, r0
   2d138:	bx	lr
   2d13c:	ldr	r0, [pc, #312]	; 2d27c <flatcc_json_parser_error_string@@Base+0x280>
   2d140:	add	r0, pc, r0
   2d144:	bx	lr
   2d148:	ldr	r0, [pc, #304]	; 2d280 <flatcc_json_parser_error_string@@Base+0x284>
   2d14c:	add	r0, pc, r0
   2d150:	bx	lr
   2d154:	ldr	r0, [pc, #296]	; 2d284 <flatcc_json_parser_error_string@@Base+0x288>
   2d158:	add	r0, pc, r0
   2d15c:	bx	lr
   2d160:	ldr	r0, [pc, #288]	; 2d288 <flatcc_json_parser_error_string@@Base+0x28c>
   2d164:	add	r0, pc, r0
   2d168:	bx	lr
   2d16c:	ldr	r0, [pc, #280]	; 2d28c <flatcc_json_parser_error_string@@Base+0x290>
   2d170:	add	r0, pc, r0
   2d174:	bx	lr
   2d178:	ldr	r0, [pc, #272]	; 2d290 <flatcc_json_parser_error_string@@Base+0x294>
   2d17c:	add	r0, pc, r0
   2d180:	bx	lr
   2d184:	ldr	r0, [pc, #264]	; 2d294 <flatcc_json_parser_error_string@@Base+0x298>
   2d188:	add	r0, pc, r0
   2d18c:	bx	lr
   2d190:	ldr	r0, [pc, #256]	; 2d298 <flatcc_json_parser_error_string@@Base+0x29c>
   2d194:	add	r0, pc, r0
   2d198:	bx	lr
   2d19c:	ldr	r0, [pc, #248]	; 2d29c <flatcc_json_parser_error_string@@Base+0x2a0>
   2d1a0:	add	r0, pc, r0
   2d1a4:	bx	lr
   2d1a8:	ldr	r0, [pc, #240]	; 2d2a0 <flatcc_json_parser_error_string@@Base+0x2a4>
   2d1ac:	add	r0, pc, r0
   2d1b0:	bx	lr
   2d1b4:	ldr	r0, [pc, #232]	; 2d2a4 <flatcc_json_parser_error_string@@Base+0x2a8>
   2d1b8:	add	r0, pc, r0
   2d1bc:	bx	lr
   2d1c0:	ldr	r0, [pc, #224]	; 2d2a8 <flatcc_json_parser_error_string@@Base+0x2ac>
   2d1c4:	add	r0, pc, r0
   2d1c8:	bx	lr
   2d1cc:	ldr	r0, [pc, #216]	; 2d2ac <flatcc_json_parser_error_string@@Base+0x2b0>
   2d1d0:	add	r0, pc, r0
   2d1d4:	bx	lr
   2d1d8:	ldr	r0, [pc, #208]	; 2d2b0 <flatcc_json_parser_error_string@@Base+0x2b4>
   2d1dc:	add	r0, pc, r0
   2d1e0:	bx	lr
   2d1e4:	ldr	r0, [pc, #200]	; 2d2b4 <flatcc_json_parser_error_string@@Base+0x2b8>
   2d1e8:	add	r0, pc, r0
   2d1ec:	bx	lr
   2d1f0:	ldr	r0, [pc, #192]	; 2d2b8 <flatcc_json_parser_error_string@@Base+0x2bc>
   2d1f4:	add	r0, pc, r0
   2d1f8:	bx	lr
   2d1fc:	ldr	r0, [pc, #184]	; 2d2bc <flatcc_json_parser_error_string@@Base+0x2c0>
   2d200:	add	r0, pc, r0
   2d204:	bx	lr
   2d208:	ldr	r0, [pc, #176]	; 2d2c0 <flatcc_json_parser_error_string@@Base+0x2c4>
   2d20c:	add	r0, pc, r0
   2d210:	bx	lr
   2d214:	ldr	r0, [pc, #168]	; 2d2c4 <flatcc_json_parser_error_string@@Base+0x2c8>
   2d218:	add	r0, pc, r0
   2d21c:	bx	lr
   2d220:	ldr	r0, [pc, #160]	; 2d2c8 <flatcc_json_parser_error_string@@Base+0x2cc>
   2d224:	add	r0, pc, r0
   2d228:	bx	lr
   2d22c:	ldr	r0, [pc, #152]	; 2d2cc <flatcc_json_parser_error_string@@Base+0x2d0>
   2d230:	add	r0, pc, r0
   2d234:	bx	lr
   2d238:	ldr	r0, [pc, #144]	; 2d2d0 <flatcc_json_parser_error_string@@Base+0x2d4>
   2d23c:	add	r0, pc, r0
   2d240:	bx	lr
   2d244:	andeq	r5, r1, r0, lsl r8
   2d248:	andeq	r5, r1, ip, ror ip
   2d24c:	andeq	r6, r1, r4, lsl #17
   2d250:	andeq	r6, r1, ip, asr r8
   2d254:	andeq	r6, r1, r8, lsr r8
   2d258:	andeq	r6, r1, ip, lsl #16
   2d25c:	andeq	r5, r1, r4, lsl r8
   2d260:	ldrdeq	r6, [r1], -r8
   2d264:			; <UNDEFINED> instruction: 0x000167b0
   2d268:	andeq	r6, r1, r4, lsl #15
   2d26c:	andeq	r6, r1, r8, asr r7
   2d270:	andeq	r6, r1, r8, lsr r7
   2d274:	andeq	r6, r1, r8, lsl #14
   2d278:	andeq	r6, r1, ip, ror #13
   2d27c:	ldrdeq	r6, [r1], -r0
   2d280:			; <UNDEFINED> instruction: 0x000166b0
   2d284:	muleq	r1, r4, r6
   2d288:	andeq	r6, r1, r8, ror r6
   2d28c:	andeq	r6, r1, r8, asr r6
   2d290:	andeq	r6, r1, ip, lsr r6
   2d294:	andeq	r6, r1, ip, lsl r6
   2d298:	strdeq	r6, [r1], -r4
   2d29c:	ldrdeq	r6, [r1], -r8
   2d2a0:			; <UNDEFINED> instruction: 0x000165b8
   2d2a4:	muleq	r1, ip, r5
   2d2a8:	andeq	r6, r1, ip, ror r5
   2d2ac:	andeq	r6, r1, ip, asr r5
   2d2b0:	andeq	r6, r1, r4, asr #10
   2d2b4:	andeq	r5, r1, r0, lsl #21
   2d2b8:	andeq	r6, r1, ip, lsl r5
   2d2bc:	strdeq	r6, [r1], -r8
   2d2c0:	ldrdeq	r6, [r1], -ip
   2d2c4:	andeq	r6, r1, r0, asr #9
   2d2c8:	andeq	r6, r1, r4, lsr #9
   2d2cc:	muleq	r1, r4, r4
   2d2d0:	strdeq	r5, [r1], -r4

0002d2d4 <flatcc_json_parser_set_error@@Base>:
   2d2d4:	ldr	ip, [r0, #24]
   2d2d8:	cmp	ip, #0
   2d2dc:	bne	2d2f8 <flatcc_json_parser_set_error@@Base+0x24>
   2d2e0:	ldr	ip, [r0, #4]
   2d2e4:	str	r3, [r0, #24]
   2d2e8:	sub	r3, r1, ip
   2d2ec:	add	r3, r3, #1
   2d2f0:	str	r1, [r0, #36]	; 0x24
   2d2f4:	str	r3, [r0, #20]
   2d2f8:	mov	r0, r2
   2d2fc:	bx	lr

0002d300 <flatcc_json_parser_string_part@@Base>:
   2d300:	cmp	r1, r2
   2d304:	beq	2d3a4 <flatcc_json_parser_string_part@@Base+0xa4>
   2d308:	ldrb	ip, [r1]
   2d30c:	cmp	ip, #34	; 0x22
   2d310:	cmpne	ip, #31
   2d314:	movhi	r3, #1
   2d318:	movls	r3, #0
   2d31c:	cmp	ip, #92	; 0x5c
   2d320:	moveq	r3, #0
   2d324:	andne	r3, r3, #1
   2d328:	cmp	r3, #0
   2d32c:	beq	2d3b0 <flatcc_json_parser_string_part@@Base+0xb0>
   2d330:	add	r3, r1, #1
   2d334:	cmp	r3, r2
   2d338:	mov	r1, r3
   2d33c:	beq	2d3a8 <flatcc_json_parser_string_part@@Base+0xa8>
   2d340:	push	{lr}		; (str lr, [sp, #-4]!)
   2d344:	b	2d354 <flatcc_json_parser_string_part@@Base+0x54>
   2d348:	cmp	r3, r2
   2d34c:	mov	r1, r3
   2d350:	beq	2d398 <flatcc_json_parser_string_part@@Base+0x98>
   2d354:	ldrb	ip, [r3], #1
   2d358:	cmp	ip, #34	; 0x22
   2d35c:	cmpne	ip, #31
   2d360:	movhi	lr, #1
   2d364:	movls	lr, #0
   2d368:	cmp	ip, #92	; 0x5c
   2d36c:	moveq	lr, #0
   2d370:	andne	lr, lr, #1
   2d374:	cmp	lr, #0
   2d378:	bne	2d348 <flatcc_json_parser_string_part@@Base+0x48>
   2d37c:	cmp	ip, #31
   2d380:	bls	2d38c <flatcc_json_parser_string_part@@Base+0x8c>
   2d384:	mov	r0, r1
   2d388:	pop	{pc}		; (ldr pc, [sp], #4)
   2d38c:	mov	r3, #17
   2d390:	pop	{lr}		; (ldr lr, [sp], #4)
   2d394:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   2d398:	mov	r3, #20
   2d39c:	pop	{lr}		; (ldr lr, [sp], #4)
   2d3a0:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   2d3a4:	mov	r1, r2
   2d3a8:	mov	r3, #20
   2d3ac:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   2d3b0:	cmp	ip, #31
   2d3b4:	bls	2d3c0 <flatcc_json_parser_string_part@@Base+0xc0>
   2d3b8:	mov	r0, r1
   2d3bc:	bx	lr
   2d3c0:	mov	r3, #17
   2d3c4:	b	2d2d4 <flatcc_json_parser_set_error@@Base>

0002d3c8 <flatcc_json_parser_space_ext@@Base>:
   2d3c8:	push	{lr}		; (str lr, [sp, #-4]!)
   2d3cc:	mov	lr, #0
   2d3d0:	cmp	r1, r2
   2d3d4:	beq	2d404 <flatcc_json_parser_space_ext@@Base+0x3c>
   2d3d8:	ldrb	ip, [r1]
   2d3dc:	cmp	ip, #32
   2d3e0:	bne	2d40c <flatcc_json_parser_space_ext@@Base+0x44>
   2d3e4:	add	r3, r1, #1
   2d3e8:	b	2d3f8 <flatcc_json_parser_space_ext@@Base+0x30>
   2d3ec:	ldrb	ip, [r3], #1
   2d3f0:	cmp	ip, #32
   2d3f4:	bne	2d40c <flatcc_json_parser_space_ext@@Base+0x44>
   2d3f8:	cmp	r3, r2
   2d3fc:	mov	r1, r3
   2d400:	bne	2d3ec <flatcc_json_parser_space_ext@@Base+0x24>
   2d404:	mov	r0, r1
   2d408:	pop	{pc}		; (ldr pc, [sp], #4)
   2d40c:	cmp	ip, #32
   2d410:	bhi	2d404 <flatcc_json_parser_space_ext@@Base+0x3c>
   2d414:	sub	ip, ip, #9
   2d418:	cmp	ip, #23
   2d41c:	addls	pc, pc, ip, lsl #2
   2d420:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d424:	b	2d4d0 <flatcc_json_parser_space_ext@@Base+0x108>
   2d428:	b	2d4a4 <flatcc_json_parser_space_ext@@Base+0xdc>
   2d42c:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d430:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d434:	b	2d484 <flatcc_json_parser_space_ext@@Base+0xbc>
   2d438:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d43c:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d440:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d444:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d448:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d44c:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d450:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d454:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d458:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d45c:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d460:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d464:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d468:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d46c:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d470:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d474:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d478:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d47c:	b	2d4d8 <flatcc_json_parser_space_ext@@Base+0x110>
   2d480:	b	2d3d0 <flatcc_json_parser_space_ext@@Base+0x8>
   2d484:	sub	r3, r2, r1
   2d488:	cmp	r3, #1
   2d48c:	movle	r3, lr
   2d490:	ldrbgt	r3, [r1, #1]
   2d494:	subgt	r3, r3, #10
   2d498:	clzgt	r3, r3
   2d49c:	lsrgt	r3, r3, #5
   2d4a0:	add	r1, r1, r3
   2d4a4:	ldr	r3, [r0, #16]
   2d4a8:	add	r1, r1, #1
   2d4ac:	add	r3, r3, #1
   2d4b0:	str	r1, [r0, #4]
   2d4b4:	str	r3, [r0, #16]
   2d4b8:	cmp	r2, r1
   2d4bc:	beq	2d4e4 <flatcc_json_parser_space_ext@@Base+0x11c>
   2d4c0:	ldrb	ip, [r1]
   2d4c4:	cmp	ip, #32
   2d4c8:	bls	2d414 <flatcc_json_parser_space_ext@@Base+0x4c>
   2d4cc:	b	2d404 <flatcc_json_parser_space_ext@@Base+0x3c>
   2d4d0:	add	r1, r1, #1
   2d4d4:	b	2d4b8 <flatcc_json_parser_space_ext@@Base+0xf0>
   2d4d8:	mov	r3, #5
   2d4dc:	pop	{lr}		; (ldr lr, [sp], #4)
   2d4e0:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   2d4e4:	mov	r1, r2
   2d4e8:	b	2d404 <flatcc_json_parser_space_ext@@Base+0x3c>
   2d4ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d4f0:	sub	sp, sp, #36	; 0x24
   2d4f4:	mov	ip, #0
   2d4f8:	str	r3, [sp, #8]
   2d4fc:	ldr	r3, [sp, #72]	; 0x48
   2d500:	cmp	r1, r2
   2d504:	mov	r6, r1
   2d508:	mov	r5, r2
   2d50c:	strb	ip, [r3]
   2d510:	mov	r8, r0
   2d514:	beq	2d694 <flatcc_json_parser_space_ext@@Base+0x2cc>
   2d518:	ldrb	r3, [r1]
   2d51c:	cmp	r3, #34	; 0x22
   2d520:	beq	2d648 <flatcc_json_parser_space_ext@@Base+0x280>
   2d524:	cmp	r3, #46	; 0x2e
   2d528:	movne	r3, #1
   2d52c:	strne	r3, [r0, #12]
   2d530:	beq	2d6a4 <flatcc_json_parser_space_ext@@Base+0x2dc>
   2d534:	add	fp, sp, #16
   2d538:	add	sl, sp, #20
   2d53c:	add	r9, sp, #24
   2d540:	mov	r3, #0
   2d544:	str	r3, [sp, #12]
   2d548:	ldr	r3, [sp, #8]
   2d54c:	mov	r7, r3
   2d550:	ldr	r4, [r3]
   2d554:	b	2d56c <flatcc_json_parser_space_ext@@Base+0x1a4>
   2d558:	cmp	r6, r0
   2d55c:	bne	2d598 <flatcc_json_parser_space_ext@@Base+0x1d0>
   2d560:	ldr	r4, [r7, #4]!
   2d564:	cmp	r4, #0
   2d568:	beq	2d5ec <flatcc_json_parser_space_ext@@Base+0x224>
   2d56c:	stm	sp, {r9, sl}
   2d570:	mov	r3, fp
   2d574:	mov	r2, r5
   2d578:	mov	r1, r6
   2d57c:	mov	r0, r8
   2d580:	blx	r4
   2d584:	cmp	r5, r0
   2d588:	bne	2d558 <flatcc_json_parser_space_ext@@Base+0x190>
   2d58c:	mov	r0, r5
   2d590:	add	sp, sp, #36	; 0x24
   2d594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d598:	ldr	r3, [sp, #16]
   2d59c:	mov	r4, r0
   2d5a0:	cmp	r3, #0
   2d5a4:	bne	2d610 <flatcc_json_parser_space_ext@@Base+0x248>
   2d5a8:	ldrd	r2, [sp, #24]
   2d5ac:	cmp	r3, #0
   2d5b0:	cmpeq	r2, #255	; 0xff
   2d5b4:	uxtbls	r3, r2
   2d5b8:	strls	r3, [sp, #12]
   2d5bc:	bhi	2d630 <flatcc_json_parser_space_ext@@Base+0x268>
   2d5c0:	ldr	r3, [sp, #72]	; 0x48
   2d5c4:	ldr	r2, [sp, #20]
   2d5c8:	ldr	r1, [sp, #12]
   2d5cc:	ldrb	r3, [r3]
   2d5d0:	cmp	r2, #0
   2d5d4:	ldr	r2, [sp, #72]	; 0x48
   2d5d8:	add	r3, r1, r3
   2d5dc:	strb	r3, [r2]
   2d5e0:	beq	2d6d8 <flatcc_json_parser_space_ext@@Base+0x310>
   2d5e4:	mov	r6, r4
   2d5e8:	b	2d548 <flatcc_json_parser_space_ext@@Base+0x180>
   2d5ec:	mov	r2, r5
   2d5f0:	mov	r1, r6
   2d5f4:	mov	r0, r8
   2d5f8:	mov	r3, #23
   2d5fc:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2d600:	mov	r5, r0
   2d604:	mov	r0, r5
   2d608:	add	sp, sp, #36	; 0x24
   2d60c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d610:	mov	r3, #8
   2d614:	mov	r2, r5
   2d618:	mov	r1, r4
   2d61c:	mov	r0, r8
   2d620:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2d624:	cmp	r5, r0
   2d628:	bne	2d5c0 <flatcc_json_parser_space_ext@@Base+0x1f8>
   2d62c:	b	2d58c <flatcc_json_parser_space_ext@@Base+0x1c4>
   2d630:	mov	r3, #7
   2d634:	mov	r2, r5
   2d638:	mov	r1, r4
   2d63c:	mov	r0, r8
   2d640:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2d644:	b	2d624 <flatcc_json_parser_space_ext@@Base+0x25c>
   2d648:	add	r6, r1, #1
   2d64c:	sub	r3, r2, r6
   2d650:	str	ip, [r0, #12]
   2d654:	cmp	r3, #1
   2d658:	ble	2d66c <flatcc_json_parser_space_ext@@Base+0x2a4>
   2d65c:	ldrb	r3, [r6]
   2d660:	cmp	r3, #32
   2d664:	bhi	2d680 <flatcc_json_parser_space_ext@@Base+0x2b8>
   2d668:	beq	2d6c4 <flatcc_json_parser_space_ext@@Base+0x2fc>
   2d66c:	mov	r1, r6
   2d670:	mov	r2, r5
   2d674:	mov	r0, r8
   2d678:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2d67c:	mov	r6, r0
   2d680:	cmp	r5, r6
   2d684:	bne	2d534 <flatcc_json_parser_space_ext@@Base+0x16c>
   2d688:	mov	r0, r5
   2d68c:	add	sp, sp, #36	; 0x24
   2d690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d694:	ldr	r3, [r0, #12]
   2d698:	cmp	r3, #0
   2d69c:	beq	2d66c <flatcc_json_parser_space_ext@@Base+0x2a4>
   2d6a0:	b	2d58c <flatcc_json_parser_space_ext@@Base+0x1c4>
   2d6a4:	mov	r3, #5
   2d6a8:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2d6ac:	ldr	r3, [r8, #12]
   2d6b0:	cmp	r3, #0
   2d6b4:	mov	r6, r0
   2d6b8:	subeq	r3, r5, r0
   2d6bc:	beq	2d654 <flatcc_json_parser_space_ext@@Base+0x28c>
   2d6c0:	b	2d680 <flatcc_json_parser_space_ext@@Base+0x2b8>
   2d6c4:	ldrb	r3, [r6, #1]
   2d6c8:	cmp	r3, #32
   2d6cc:	addhi	r6, r6, #1
   2d6d0:	bls	2d66c <flatcc_json_parser_space_ext@@Base+0x2a4>
   2d6d4:	b	2d680 <flatcc_json_parser_space_ext@@Base+0x2b8>
   2d6d8:	mov	r5, r4
   2d6dc:	b	2d58c <flatcc_json_parser_space_ext@@Base+0x1c4>
   2d6e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d6e4:	sub	sp, sp, #28
   2d6e8:	mov	r9, r3
   2d6ec:	ldrh	r3, [sp, #68]	; 0x44
   2d6f0:	mov	ip, #0
   2d6f4:	mov	r7, r0
   2d6f8:	ldr	r0, [r0]
   2d6fc:	mov	r4, r1
   2d700:	mov	r5, r2
   2d704:	str	ip, [sp, #20]
   2d708:	str	r3, [sp, #12]
   2d70c:	bl	27dd0 <flatcc_builder_start_offset_vector@@Base>
   2d710:	cmp	r0, #0
   2d714:	bne	2d770 <flatcc_json_parser_space_ext@@Base+0x3a8>
   2d718:	cmp	r4, r5
   2d71c:	beq	2d72c <flatcc_json_parser_space_ext@@Base+0x364>
   2d720:	ldrb	r3, [r4]
   2d724:	cmp	r3, #91	; 0x5b
   2d728:	beq	2d78c <flatcc_json_parser_space_ext@@Base+0x3c4>
   2d72c:	mov	r1, r4
   2d730:	mov	r3, #22
   2d734:	mov	r2, r5
   2d738:	mov	r0, r7
   2d73c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2d740:	mov	r6, #0
   2d744:	mov	r4, r0
   2d748:	ldr	r3, [sp, #64]	; 0x40
   2d74c:	cmp	r3, r6
   2d750:	beq	2d9e8 <flatcc_json_parser_space_ext@@Base+0x620>
   2d754:	mov	r2, r5
   2d758:	mov	r1, r4
   2d75c:	mov	r0, r7
   2d760:	mov	r3, #30
   2d764:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2d768:	b	2d784 <flatcc_json_parser_space_ext@@Base+0x3bc>
   2d76c:	mov	r4, sl
   2d770:	mov	r2, r5
   2d774:	mov	r1, r4
   2d778:	mov	r0, r7
   2d77c:	mov	r3, #33	; 0x21
   2d780:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2d784:	add	sp, sp, #28
   2d788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d78c:	add	r8, r4, #1
   2d790:	sub	r3, r5, r8
   2d794:	cmp	r3, #1
   2d798:	ble	2d7ac <flatcc_json_parser_space_ext@@Base+0x3e4>
   2d79c:	ldrb	r3, [r4, #1]
   2d7a0:	cmp	r3, #32
   2d7a4:	bhi	2d7c0 <flatcc_json_parser_space_ext@@Base+0x3f8>
   2d7a8:	beq	2da30 <flatcc_json_parser_space_ext@@Base+0x668>
   2d7ac:	mov	r1, r8
   2d7b0:	mov	r2, r5
   2d7b4:	mov	r0, r7
   2d7b8:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2d7bc:	mov	r8, r0
   2d7c0:	cmp	r5, r8
   2d7c4:	beq	2d7d4 <flatcc_json_parser_space_ext@@Base+0x40c>
   2d7c8:	ldrb	r3, [r8]
   2d7cc:	cmp	r3, #93	; 0x5d
   2d7d0:	beq	2da7c <flatcc_json_parser_space_ext@@Base+0x6b4>
   2d7d4:	ldr	r3, [sp, #64]	; 0x40
   2d7d8:	cmp	r3, #0
   2d7dc:	beq	2d96c <flatcc_json_parser_space_ext@@Base+0x5a4>
   2d7e0:	add	sl, sp, #20
   2d7e4:	mov	r6, #0
   2d7e8:	mov	fp, #1
   2d7ec:	mov	r4, sl
   2d7f0:	mov	r1, r9
   2d7f4:	ldr	r0, [r7]
   2d7f8:	bl	26c20 <flatcc_builder_get_user_frame_ptr@@Base>
   2d7fc:	mov	r1, r8
   2d800:	mov	r2, r5
   2d804:	ldr	ip, [sp, #72]	; 0x48
   2d808:	ldrb	r3, [r0, r6]
   2d80c:	str	r4, [sp]
   2d810:	mov	r0, r7
   2d814:	blx	ip
   2d818:	cmp	r5, r0
   2d81c:	mov	sl, r0
   2d820:	beq	2d9a0 <flatcc_json_parser_space_ext@@Base+0x5d8>
   2d824:	mov	r1, fp
   2d828:	ldr	r0, [r7]
   2d82c:	bl	27768 <flatcc_builder_extend_offset_vector@@Base>
   2d830:	cmp	r0, #0
   2d834:	beq	2d76c <flatcc_json_parser_space_ext@@Base+0x3a4>
   2d838:	ldr	r3, [sp, #20]
   2d83c:	sub	r1, r5, sl
   2d840:	cmp	r1, #1
   2d844:	str	r3, [r0]
   2d848:	ble	2d85c <flatcc_json_parser_space_ext@@Base+0x494>
   2d84c:	ldrb	r3, [sl]
   2d850:	cmp	r3, #32
   2d854:	bhi	2d87c <flatcc_json_parser_space_ext@@Base+0x4b4>
   2d858:	beq	2d8f0 <flatcc_json_parser_space_ext@@Base+0x528>
   2d85c:	mov	r1, sl
   2d860:	mov	r2, r5
   2d864:	mov	r0, r7
   2d868:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2d86c:	mov	sl, r0
   2d870:	cmp	r5, sl
   2d874:	beq	2d908 <flatcc_json_parser_space_ext@@Base+0x540>
   2d878:	ldrb	r3, [sl]
   2d87c:	cmp	r3, #44	; 0x2c
   2d880:	beq	2d914 <flatcc_json_parser_space_ext@@Base+0x54c>
   2d884:	cmp	r3, #93	; 0x5d
   2d888:	mov	r4, sl
   2d88c:	beq	2d8b0 <flatcc_json_parser_space_ext@@Base+0x4e8>
   2d890:	mov	r1, sl
   2d894:	mov	r3, #9
   2d898:	mov	r2, r5
   2d89c:	mov	r0, r7
   2d8a0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2d8a4:	add	r6, r6, #1
   2d8a8:	mov	r4, r0
   2d8ac:	b	2d748 <flatcc_json_parser_space_ext@@Base+0x380>
   2d8b0:	add	r1, sl, #1
   2d8b4:	sub	r3, r5, r1
   2d8b8:	cmp	r3, #1
   2d8bc:	ble	2d8d8 <flatcc_json_parser_space_ext@@Base+0x510>
   2d8c0:	ldrb	r3, [sl, #1]
   2d8c4:	cmp	r3, #32
   2d8c8:	addhi	r6, r6, #1
   2d8cc:	movhi	r4, r1
   2d8d0:	bhi	2d748 <flatcc_json_parser_space_ext@@Base+0x380>
   2d8d4:	beq	2d988 <flatcc_json_parser_space_ext@@Base+0x5c0>
   2d8d8:	mov	r2, r5
   2d8dc:	mov	r0, r7
   2d8e0:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2d8e4:	mov	r4, r0
   2d8e8:	add	r6, r6, #1
   2d8ec:	b	2d748 <flatcc_json_parser_space_ext@@Base+0x380>
   2d8f0:	ldrb	r3, [sl, #1]
   2d8f4:	cmp	r3, #32
   2d8f8:	addhi	sl, sl, #1
   2d8fc:	bls	2d85c <flatcc_json_parser_space_ext@@Base+0x494>
   2d900:	cmp	r5, sl
   2d904:	bne	2d878 <flatcc_json_parser_space_ext@@Base+0x4b0>
   2d908:	mov	r4, sl
   2d90c:	add	r6, r6, #1
   2d910:	b	2d748 <flatcc_json_parser_space_ext@@Base+0x380>
   2d914:	add	r8, sl, #1
   2d918:	sub	r3, r5, r8
   2d91c:	cmp	r3, #1
   2d920:	ble	2d934 <flatcc_json_parser_space_ext@@Base+0x56c>
   2d924:	ldrb	r3, [sl, #1]
   2d928:	cmp	r3, #32
   2d92c:	bhi	2d948 <flatcc_json_parser_space_ext@@Base+0x580>
   2d930:	beq	2d9ac <flatcc_json_parser_space_ext@@Base+0x5e4>
   2d934:	mov	r1, r8
   2d938:	mov	r2, r5
   2d93c:	mov	r0, r7
   2d940:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2d944:	mov	r8, r0
   2d948:	cmp	r5, r8
   2d94c:	beq	2da44 <flatcc_json_parser_space_ext@@Base+0x67c>
   2d950:	ldrb	r3, [r8]
   2d954:	cmp	r3, #93	; 0x5d
   2d958:	beq	2d9c0 <flatcc_json_parser_space_ext@@Base+0x5f8>
   2d95c:	ldr	r3, [sp, #64]	; 0x40
   2d960:	add	r6, r6, #1
   2d964:	cmp	r3, r6
   2d968:	bne	2d7f0 <flatcc_json_parser_space_ext@@Base+0x428>
   2d96c:	mov	r2, r5
   2d970:	mov	r1, r8
   2d974:	mov	r0, r7
   2d978:	mov	r3, #30
   2d97c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2d980:	add	sp, sp, #28
   2d984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d988:	ldrb	r3, [r4, #2]
   2d98c:	cmp	r3, #32
   2d990:	addhi	r4, r4, #2
   2d994:	addhi	r6, r6, #1
   2d998:	bls	2d8d8 <flatcc_json_parser_space_ext@@Base+0x510>
   2d99c:	b	2d748 <flatcc_json_parser_space_ext@@Base+0x380>
   2d9a0:	mov	r0, r5
   2d9a4:	add	sp, sp, #28
   2d9a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d9ac:	ldrb	r3, [sl, #2]
   2d9b0:	cmp	r3, #32
   2d9b4:	addhi	r8, sl, #2
   2d9b8:	bls	2d934 <flatcc_json_parser_space_ext@@Base+0x56c>
   2d9bc:	b	2d948 <flatcc_json_parser_space_ext@@Base+0x580>
   2d9c0:	add	r4, r8, #1
   2d9c4:	sub	r3, r5, r4
   2d9c8:	cmp	r3, #1
   2d9cc:	ble	2d9e0 <flatcc_json_parser_space_ext@@Base+0x618>
   2d9d0:	ldrb	r3, [r8, #1]
   2d9d4:	cmp	r3, #32
   2d9d8:	bhi	2d8e8 <flatcc_json_parser_space_ext@@Base+0x520>
   2d9dc:	beq	2da64 <flatcc_json_parser_space_ext@@Base+0x69c>
   2d9e0:	mov	r1, r4
   2d9e4:	b	2d8d8 <flatcc_json_parser_space_ext@@Base+0x510>
   2d9e8:	mov	r1, r9
   2d9ec:	ldr	r0, [r7]
   2d9f0:	bl	26c20 <flatcc_builder_get_user_frame_ptr@@Base>
   2d9f4:	mov	r1, r0
   2d9f8:	ldr	r0, [r7]
   2d9fc:	bl	28f4c <flatcc_builder_end_offset_vector_for_unions@@Base>
   2da00:	cmp	r0, #0
   2da04:	str	r0, [sp, #20]
   2da08:	beq	2d770 <flatcc_json_parser_space_ext@@Base+0x3a8>
   2da0c:	ldr	r1, [sp, #12]
   2da10:	ldr	r0, [r7]
   2da14:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   2da18:	subs	r3, r0, #0
   2da1c:	beq	2d770 <flatcc_json_parser_space_ext@@Base+0x3a8>
   2da20:	ldr	r2, [sp, #20]
   2da24:	mov	r0, r4
   2da28:	str	r2, [r3]
   2da2c:	b	2d784 <flatcc_json_parser_space_ext@@Base+0x3bc>
   2da30:	ldrb	r3, [r4, #2]
   2da34:	cmp	r3, #32
   2da38:	addhi	r8, r4, #2
   2da3c:	bls	2d7ac <flatcc_json_parser_space_ext@@Base+0x3e4>
   2da40:	b	2d7c0 <flatcc_json_parser_space_ext@@Base+0x3f8>
   2da44:	mov	r3, #9
   2da48:	mov	r2, r5
   2da4c:	mov	r1, r5
   2da50:	mov	r0, r7
   2da54:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2da58:	add	r6, r6, #1
   2da5c:	mov	r4, r0
   2da60:	b	2d748 <flatcc_json_parser_space_ext@@Base+0x380>
   2da64:	ldrb	r3, [r8, #2]
   2da68:	cmp	r3, #32
   2da6c:	addhi	r4, r8, #2
   2da70:	addhi	r6, r6, #1
   2da74:	bls	2d9e0 <flatcc_json_parser_space_ext@@Base+0x618>
   2da78:	b	2d748 <flatcc_json_parser_space_ext@@Base+0x380>
   2da7c:	add	r4, r8, #1
   2da80:	sub	r3, r5, r4
   2da84:	cmp	r3, #1
   2da88:	ble	2daa0 <flatcc_json_parser_space_ext@@Base+0x6d8>
   2da8c:	ldrb	r3, [r8, #1]
   2da90:	cmp	r3, #32
   2da94:	movhi	r6, #0
   2da98:	bhi	2d748 <flatcc_json_parser_space_ext@@Base+0x380>
   2da9c:	beq	2dabc <flatcc_json_parser_space_ext@@Base+0x6f4>
   2daa0:	mov	r1, r4
   2daa4:	mov	r2, r5
   2daa8:	mov	r0, r7
   2daac:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2dab0:	mov	r6, #0
   2dab4:	mov	r4, r0
   2dab8:	b	2d748 <flatcc_json_parser_space_ext@@Base+0x380>
   2dabc:	ldrb	r3, [r8, #2]
   2dac0:	cmp	r3, #32
   2dac4:	addhi	r4, r8, #2
   2dac8:	movhi	r6, #0
   2dacc:	bls	2daa0 <flatcc_json_parser_space_ext@@Base+0x6d8>
   2dad0:	b	2d748 <flatcc_json_parser_space_ext@@Base+0x380>

0002dad4 <flatcc_json_parser_string_escape@@Base>:
   2dad4:	sub	ip, r2, r1
   2dad8:	cmp	ip, #1
   2dadc:	ble	2dc74 <flatcc_json_parser_string_escape@@Base+0x1a0>
   2dae0:	push	{r4, r5, lr}
   2dae4:	ldrb	lr, [r1]
   2dae8:	cmp	lr, #92	; 0x5c
   2daec:	beq	2db04 <flatcc_json_parser_string_escape@@Base+0x30>
   2daf0:	mov	ip, #0
   2daf4:	strb	ip, [r3]
   2daf8:	mov	r3, #18
   2dafc:	pop	{r4, r5, lr}
   2db00:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   2db04:	ldrb	lr, [r1, #1]
   2db08:	sub	lr, lr, #34	; 0x22
   2db0c:	cmp	lr, #86	; 0x56
   2db10:	addls	pc, pc, lr, lsl #2
   2db14:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db18:	b	2dd0c <flatcc_json_parser_string_escape@@Base+0x238>
   2db1c:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db20:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db24:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db28:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db2c:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db30:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db34:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db38:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db3c:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db40:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db44:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db48:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db4c:	b	2dd24 <flatcc_json_parser_string_escape@@Base+0x250>
   2db50:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db54:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db58:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db5c:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db60:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db64:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db68:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db6c:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db70:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db74:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db78:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db7c:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db80:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db84:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db88:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db8c:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db90:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db94:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db98:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2db9c:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dba0:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dba4:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dba8:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbac:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbb0:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbb4:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbb8:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbbc:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbc0:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbc4:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbc8:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbcc:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbd0:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbd4:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbd8:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbdc:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbe0:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbe4:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbe8:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbec:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbf0:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbf4:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbf8:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dbfc:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc00:	b	2dd3c <flatcc_json_parser_string_escape@@Base+0x268>
   2dc04:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc08:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc0c:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc10:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc14:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc18:	b	2dd54 <flatcc_json_parser_string_escape@@Base+0x280>
   2dc1c:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc20:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc24:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc28:	b	2dd6c <flatcc_json_parser_string_escape@@Base+0x298>
   2dc2c:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc30:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc34:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc38:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc3c:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc40:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc44:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc48:	b	2dd84 <flatcc_json_parser_string_escape@@Base+0x2b0>
   2dc4c:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc50:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc54:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc58:	b	2dd9c <flatcc_json_parser_string_escape@@Base+0x2c8>
   2dc5c:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc60:	b	2ddb4 <flatcc_json_parser_string_escape@@Base+0x2e0>
   2dc64:	b	2ddcc <flatcc_json_parser_string_escape@@Base+0x2f8>
   2dc68:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc6c:	b	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc70:	b	2dc84 <flatcc_json_parser_string_escape@@Base+0x1b0>
   2dc74:	mov	ip, #0
   2dc78:	strb	ip, [r3]
   2dc7c:	mov	r3, #18
   2dc80:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   2dc84:	cmp	ip, #3
   2dc88:	mov	ip, #1
   2dc8c:	strb	ip, [r3]
   2dc90:	ble	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dc94:	ldrb	ip, [r1, #2]
   2dc98:	sub	lr, ip, #48	; 0x30
   2dc9c:	uxtb	r4, lr
   2dca0:	cmp	r4, #9
   2dca4:	lslls	ip, lr, #4
   2dca8:	uxtbls	ip, ip
   2dcac:	bls	2dccc <flatcc_json_parser_string_escape@@Base+0x1f8>
   2dcb0:	orr	ip, ip, #32
   2dcb4:	sub	lr, ip, #97	; 0x61
   2dcb8:	cmp	lr, #5
   2dcbc:	bhi	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dcc0:	sub	ip, ip, #87	; 0x57
   2dcc4:	lsl	ip, ip, #4
   2dcc8:	uxtb	ip, ip
   2dccc:	ldrb	lr, [r1, #3]
   2dcd0:	sub	r4, lr, #48	; 0x30
   2dcd4:	uxtb	r4, r4
   2dcd8:	cmp	r4, #9
   2dcdc:	orrls	ip, r4, ip
   2dce0:	bls	2dd00 <flatcc_json_parser_string_escape@@Base+0x22c>
   2dce4:	orr	lr, lr, #32
   2dce8:	sub	r4, lr, #97	; 0x61
   2dcec:	cmp	r4, #5
   2dcf0:	bhi	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2dcf4:	sub	lr, lr, #87	; 0x57
   2dcf8:	orr	ip, lr, ip
   2dcfc:	uxtb	ip, ip
   2dd00:	strb	ip, [r3, #1]
   2dd04:	add	r0, r1, #4
   2dd08:	pop	{r4, r5, pc}
   2dd0c:	mov	ip, #1
   2dd10:	mov	r2, #34	; 0x22
   2dd14:	add	r0, r1, #2
   2dd18:	strb	ip, [r3]
   2dd1c:	strb	r2, [r3, #1]
   2dd20:	pop	{r4, r5, pc}
   2dd24:	mov	ip, #1
   2dd28:	mov	r2, #47	; 0x2f
   2dd2c:	add	r0, r1, #2
   2dd30:	strb	ip, [r3]
   2dd34:	strb	r2, [r3, #1]
   2dd38:	pop	{r4, r5, pc}
   2dd3c:	mov	ip, #1
   2dd40:	mov	r2, #92	; 0x5c
   2dd44:	add	r0, r1, #2
   2dd48:	strb	ip, [r3]
   2dd4c:	strb	r2, [r3, #1]
   2dd50:	pop	{r4, r5, pc}
   2dd54:	mov	ip, #1
   2dd58:	mov	r2, #8
   2dd5c:	add	r0, r1, #2
   2dd60:	strb	ip, [r3]
   2dd64:	strb	r2, [r3, #1]
   2dd68:	pop	{r4, r5, pc}
   2dd6c:	mov	ip, #1
   2dd70:	mov	r2, #12
   2dd74:	add	r0, r1, #2
   2dd78:	strb	ip, [r3]
   2dd7c:	strb	r2, [r3, #1]
   2dd80:	pop	{r4, r5, pc}
   2dd84:	mov	ip, #1
   2dd88:	mov	r2, #10
   2dd8c:	add	r0, r1, #2
   2dd90:	strb	ip, [r3]
   2dd94:	strb	r2, [r3, #1]
   2dd98:	pop	{r4, r5, pc}
   2dd9c:	mov	ip, #1
   2dda0:	mov	r2, #13
   2dda4:	add	r0, r1, #2
   2dda8:	strb	ip, [r3]
   2ddac:	strb	r2, [r3, #1]
   2ddb0:	pop	{r4, r5, pc}
   2ddb4:	mov	ip, #1
   2ddb8:	mov	r2, #9
   2ddbc:	add	r0, r1, #2
   2ddc0:	strb	ip, [r3]
   2ddc4:	strb	r2, [r3, #1]
   2ddc8:	pop	{r4, r5, pc}
   2ddcc:	cmp	ip, #5
   2ddd0:	ble	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2ddd4:	ldrb	ip, [r1, #2]
   2ddd8:	sub	lr, ip, #48	; 0x30
   2dddc:	uxtb	r4, lr
   2dde0:	cmp	r4, #9
   2dde4:	lslls	ip, lr, #12
   2dde8:	uxthls	ip, ip
   2ddec:	bls	2de0c <flatcc_json_parser_string_escape@@Base+0x338>
   2ddf0:	orr	ip, ip, #32
   2ddf4:	sub	lr, ip, #97	; 0x61
   2ddf8:	cmp	lr, #5
   2ddfc:	bhi	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2de00:	sub	ip, ip, #87	; 0x57
   2de04:	lsl	ip, ip, #12
   2de08:	and	ip, ip, #61440	; 0xf000
   2de0c:	ldrb	lr, [r1, #3]
   2de10:	sub	r4, lr, #48	; 0x30
   2de14:	uxtb	r5, r4
   2de18:	cmp	r5, #9
   2de1c:	bhi	2dea0 <flatcc_json_parser_string_escape@@Base+0x3cc>
   2de20:	uxth	r4, r4
   2de24:	orr	ip, ip, r4, lsl #8
   2de28:	and	ip, ip, #65280	; 0xff00
   2de2c:	ldrb	lr, [r1, #4]
   2de30:	sub	r4, lr, #48	; 0x30
   2de34:	uxtb	r5, r4
   2de38:	cmp	r5, #9
   2de3c:	bhi	2dec4 <flatcc_json_parser_string_escape@@Base+0x3f0>
   2de40:	uxth	r4, r4
   2de44:	orr	ip, ip, r4, lsl #4
   2de48:	uxth	ip, ip
   2de4c:	ldrb	lr, [r1, #5]
   2de50:	sub	r4, lr, #48	; 0x30
   2de54:	uxtb	r5, r4
   2de58:	cmp	r5, #9
   2de5c:	orrls	r2, ip, r4
   2de60:	uxthls	r2, r2
   2de64:	bls	2de84 <flatcc_json_parser_string_escape@@Base+0x3b0>
   2de68:	orr	lr, lr, #32
   2de6c:	sub	r4, lr, #97	; 0x61
   2de70:	cmp	r4, #5
   2de74:	bhi	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2de78:	sub	r2, lr, #87	; 0x57
   2de7c:	orr	r2, ip, r2
   2de80:	uxth	r2, r2
   2de84:	cmp	r2, #127	; 0x7f
   2de88:	bhi	2dee8 <flatcc_json_parser_string_escape@@Base+0x414>
   2de8c:	mov	r0, #1
   2de90:	strb	r2, [r3, #1]
   2de94:	strb	r0, [r3]
   2de98:	add	r0, r1, #6
   2de9c:	pop	{r4, r5, pc}
   2dea0:	orr	lr, lr, #32
   2dea4:	sub	r4, lr, #97	; 0x61
   2dea8:	cmp	r4, #5
   2deac:	bhi	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2deb0:	sub	lr, lr, #87	; 0x57
   2deb4:	uxth	lr, lr
   2deb8:	orr	ip, ip, lr, lsl #8
   2debc:	and	ip, ip, #65280	; 0xff00
   2dec0:	b	2de2c <flatcc_json_parser_string_escape@@Base+0x358>
   2dec4:	orr	lr, lr, #32
   2dec8:	sub	r4, lr, #97	; 0x61
   2decc:	cmp	r4, #5
   2ded0:	bhi	2daf0 <flatcc_json_parser_string_escape@@Base+0x1c>
   2ded4:	sub	lr, lr, #87	; 0x57
   2ded8:	uxth	lr, lr
   2dedc:	orr	ip, ip, lr, lsl #4
   2dee0:	uxth	ip, ip
   2dee4:	b	2de4c <flatcc_json_parser_string_escape@@Base+0x378>
   2dee8:	cmp	r2, #2048	; 0x800
   2deec:	bcs	2df18 <flatcc_json_parser_string_escape@@Base+0x444>
   2def0:	and	r0, r2, #63	; 0x3f
   2def4:	mvn	ip, #63	; 0x3f
   2def8:	mvn	r0, r0, lsl #25
   2defc:	orr	r2, ip, r2, lsr #6
   2df00:	mvn	r0, r0, lsr #25
   2df04:	mov	ip, #2
   2df08:	strb	r0, [r3, #2]
   2df0c:	strb	r2, [r3, #1]
   2df10:	strb	ip, [r3]
   2df14:	b	2de98 <flatcc_json_parser_string_escape@@Base+0x3c4>
   2df18:	lsl	lr, r2, #20
   2df1c:	mvn	r4, #127	; 0x7f
   2df20:	and	ip, r2, #63	; 0x3f
   2df24:	mvn	r0, #31
   2df28:	orr	r2, r0, r2, lsr #12
   2df2c:	orr	lr, r4, lr, lsr #26
   2df30:	orr	ip, ip, r4
   2df34:	mov	r0, #3
   2df38:	strb	lr, [r3, #2]
   2df3c:	strb	ip, [r3, #3]
   2df40:	strb	r2, [r3, #1]
   2df44:	strb	r0, [r3]
   2df48:	b	2de98 <flatcc_json_parser_string_escape@@Base+0x3c4>

0002df4c <flatcc_json_parser_skip_constant@@Base>:
   2df4c:	cmp	r1, r2
   2df50:	push	{r4, r5, r6, lr}
   2df54:	mov	r5, r2
   2df58:	beq	2dfe8 <flatcc_json_parser_skip_constant@@Base+0x9c>
   2df5c:	mov	r4, r1
   2df60:	mov	r6, r0
   2df64:	b	2df74 <flatcc_json_parser_skip_constant@@Base+0x28>
   2df68:	add	r4, r4, #1
   2df6c:	cmp	r5, r4
   2df70:	beq	2dfe8 <flatcc_json_parser_skip_constant@@Base+0x9c>
   2df74:	ldrb	r3, [r4]
   2df78:	sub	r2, r3, #95	; 0x5f
   2df7c:	clz	r2, r2
   2df80:	lsr	r2, r2, #5
   2df84:	orrs	r2, r2, r3, lsr #7
   2df88:	bne	2df68 <flatcc_json_parser_skip_constant@@Base+0x1c>
   2df8c:	sub	r2, r3, #48	; 0x30
   2df90:	cmp	r3, #46	; 0x2e
   2df94:	cmpne	r2, #9
   2df98:	bls	2df68 <flatcc_json_parser_skip_constant@@Base+0x1c>
   2df9c:	orr	r2, r3, #32
   2dfa0:	sub	r2, r2, #97	; 0x61
   2dfa4:	cmp	r2, #25
   2dfa8:	bls	2df68 <flatcc_json_parser_skip_constant@@Base+0x1c>
   2dfac:	sub	r2, r5, r4
   2dfb0:	cmp	r2, #1
   2dfb4:	ble	2dfc4 <flatcc_json_parser_skip_constant@@Base+0x78>
   2dfb8:	cmp	r3, #32
   2dfbc:	bhi	2dff0 <flatcc_json_parser_skip_constant@@Base+0xa4>
   2dfc0:	beq	2dffc <flatcc_json_parser_skip_constant@@Base+0xb0>
   2dfc4:	mov	r2, r5
   2dfc8:	mov	r1, r4
   2dfcc:	mov	r0, r6
   2dfd0:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2dfd4:	cmp	r4, r0
   2dfd8:	beq	2dff0 <flatcc_json_parser_skip_constant@@Base+0xa4>
   2dfdc:	mov	r4, r0
   2dfe0:	cmp	r5, r4
   2dfe4:	bne	2df74 <flatcc_json_parser_skip_constant@@Base+0x28>
   2dfe8:	mov	r0, r5
   2dfec:	pop	{r4, r5, r6, pc}
   2dff0:	mov	r5, r4
   2dff4:	mov	r0, r5
   2dff8:	pop	{r4, r5, r6, pc}
   2dffc:	ldrb	r3, [r4, #1]
   2e000:	cmp	r3, #32
   2e004:	addhi	r0, r4, #1
   2e008:	bls	2dfc4 <flatcc_json_parser_skip_constant@@Base+0x78>
   2e00c:	b	2dfd4 <flatcc_json_parser_skip_constant@@Base+0x88>

0002e010 <flatcc_json_parser_match_constant@@Base>:
   2e010:	push	{r4, r5, r6, r7, r8, lr}
   2e014:	sub	lr, r2, r1
   2e018:	cmp	r3, lr
   2e01c:	ldr	r5, [sp, #24]
   2e020:	bge	2e070 <flatcc_json_parser_match_constant@@Base+0x60>
   2e024:	mov	r7, r1
   2e028:	ldr	r1, [r0, #12]
   2e02c:	mov	r6, r2
   2e030:	cmp	r1, #0
   2e034:	mov	lr, r0
   2e038:	add	r4, r7, r3
   2e03c:	bne	2e080 <flatcc_json_parser_match_constant@@Base+0x70>
   2e040:	ldrb	r3, [r7, r3]
   2e044:	cmp	r3, #32
   2e048:	beq	2e10c <flatcc_json_parser_match_constant@@Base+0xfc>
   2e04c:	cmp	r3, #34	; 0x22
   2e050:	beq	2e154 <flatcc_json_parser_match_constant@@Base+0x144>
   2e054:	cmp	r3, #92	; 0x5c
   2e058:	str	r1, [r5]
   2e05c:	bne	2e104 <flatcc_json_parser_match_constant@@Base+0xf4>
   2e060:	mov	r1, r4
   2e064:	mov	r3, #18
   2e068:	pop	{r4, r5, r6, r7, r8, lr}
   2e06c:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   2e070:	mov	r3, #0
   2e074:	mov	r0, r1
   2e078:	str	r3, [r5]
   2e07c:	pop	{r4, r5, r6, r7, r8, pc}
   2e080:	sub	r2, r2, r4
   2e084:	cmp	r2, #1
   2e088:	ble	2e09c <flatcc_json_parser_match_constant@@Base+0x8c>
   2e08c:	ldrb	r3, [r7, r3]
   2e090:	cmp	r3, #32
   2e094:	bhi	2e1ac <flatcc_json_parser_match_constant@@Base+0x19c>
   2e098:	beq	2e1dc <flatcc_json_parser_match_constant@@Base+0x1cc>
   2e09c:	mov	r0, lr
   2e0a0:	mov	r2, r6
   2e0a4:	mov	r1, r4
   2e0a8:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2e0ac:	cmp	r6, r0
   2e0b0:	beq	2e1b8 <flatcc_json_parser_match_constant@@Base+0x1a8>
   2e0b4:	cmp	r4, r0
   2e0b8:	beq	2e0e4 <flatcc_json_parser_match_constant@@Base+0xd4>
   2e0bc:	ldrb	r3, [r0]
   2e0c0:	sub	r2, r3, #95	; 0x5f
   2e0c4:	clz	r2, r2
   2e0c8:	lsr	r2, r2, #5
   2e0cc:	orrs	r2, r2, r3, lsr #7
   2e0d0:	bne	2e1a0 <flatcc_json_parser_match_constant@@Base+0x190>
   2e0d4:	orr	r3, r3, #32
   2e0d8:	sub	r3, r3, #97	; 0x61
   2e0dc:	cmp	r3, #25
   2e0e0:	bls	2e1a0 <flatcc_json_parser_match_constant@@Base+0x190>
   2e0e4:	mov	r3, #0
   2e0e8:	str	r3, [r5]
   2e0ec:	ldrb	r3, [r0]
   2e0f0:	and	r2, r3, #223	; 0xdf
   2e0f4:	cmp	r3, #44	; 0x2c
   2e0f8:	cmpne	r2, #93	; 0x5d
   2e0fc:	movne	r0, r7
   2e100:	pop	{r4, r5, r6, r7, r8, pc}
   2e104:	mov	r0, r7
   2e108:	pop	{r4, r5, r6, r7, r8, pc}
   2e10c:	add	r3, r4, #1
   2e110:	cmp	r2, r3
   2e114:	beq	2e1f0 <flatcc_json_parser_match_constant@@Base+0x1e0>
   2e118:	ldrb	r1, [r4, #1]
   2e11c:	cmp	r1, #32
   2e120:	bne	2e184 <flatcc_json_parser_match_constant@@Base+0x174>
   2e124:	add	r3, r4, #2
   2e128:	b	2e138 <flatcc_json_parser_match_constant@@Base+0x128>
   2e12c:	ldrb	r1, [r3], #1
   2e130:	cmp	r1, #32
   2e134:	bne	2e188 <flatcc_json_parser_match_constant@@Base+0x178>
   2e138:	cmp	r6, r3
   2e13c:	mov	r4, r3
   2e140:	bne	2e12c <flatcc_json_parser_match_constant@@Base+0x11c>
   2e144:	mov	r0, r4
   2e148:	mov	r3, #0
   2e14c:	str	r3, [r5]
   2e150:	pop	{r4, r5, r6, r7, r8, pc}
   2e154:	add	r0, r4, #1
   2e158:	cmn	r0, #1
   2e15c:	bge	2e170 <flatcc_json_parser_match_constant@@Base+0x160>
   2e160:	ldrb	r3, [r4, #1]
   2e164:	cmp	r3, #32
   2e168:	bhi	2e148 <flatcc_json_parser_match_constant@@Base+0x138>
   2e16c:	beq	2e1c8 <flatcc_json_parser_match_constant@@Base+0x1b8>
   2e170:	mov	r1, r0
   2e174:	mov	r2, #0
   2e178:	mov	r0, lr
   2e17c:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2e180:	b	2e148 <flatcc_json_parser_match_constant@@Base+0x138>
   2e184:	mov	r4, r3
   2e188:	cmp	r1, #34	; 0x22
   2e18c:	beq	2e154 <flatcc_json_parser_match_constant@@Base+0x144>
   2e190:	mov	r3, #1
   2e194:	mov	r0, r4
   2e198:	str	r3, [r5]
   2e19c:	pop	{r4, r5, r6, r7, r8, pc}
   2e1a0:	mov	r3, #1
   2e1a4:	str	r3, [r5]
   2e1a8:	pop	{r4, r5, r6, r7, r8, pc}
   2e1ac:	cmp	r4, r6
   2e1b0:	movne	r0, r4
   2e1b4:	bne	2e0e4 <flatcc_json_parser_match_constant@@Base+0xd4>
   2e1b8:	mov	r3, #0
   2e1bc:	mov	r0, r6
   2e1c0:	str	r3, [r5]
   2e1c4:	pop	{r4, r5, r6, r7, r8, pc}
   2e1c8:	ldrb	r3, [r4, #2]
   2e1cc:	cmp	r3, #32
   2e1d0:	addhi	r0, r4, #2
   2e1d4:	bls	2e170 <flatcc_json_parser_match_constant@@Base+0x160>
   2e1d8:	b	2e148 <flatcc_json_parser_match_constant@@Base+0x138>
   2e1dc:	ldrb	r3, [r4, #1]
   2e1e0:	cmp	r3, #32
   2e1e4:	addhi	r0, r4, #1
   2e1e8:	bls	2e09c <flatcc_json_parser_match_constant@@Base+0x8c>
   2e1ec:	b	2e0ac <flatcc_json_parser_match_constant@@Base+0x9c>
   2e1f0:	mov	r4, r2
   2e1f4:	b	2e144 <flatcc_json_parser_match_constant@@Base+0x134>

0002e1f8 <flatcc_json_parser_double@@Base>:
   2e1f8:	push	{r4, r5, r6, r7, r8, lr}
   2e1fc:	mov	r4, #0
   2e200:	mov	r5, #0
   2e204:	cmp	r1, r2
   2e208:	strd	r4, [r3]
   2e20c:	beq	2e2a0 <flatcc_json_parser_double@@Base+0xa8>
   2e210:	ldrb	ip, [r1]
   2e214:	cmp	ip, #45	; 0x2d
   2e218:	addeq	ip, r1, #1
   2e21c:	movne	ip, r1
   2e220:	sub	lr, r2, ip
   2e224:	cmp	lr, #1
   2e228:	ble	2e240 <flatcc_json_parser_double@@Base+0x48>
   2e22c:	ldrb	lr, [ip]
   2e230:	cmp	lr, #46	; 0x2e
   2e234:	beq	2e2b4 <flatcc_json_parser_double@@Base+0xbc>
   2e238:	cmp	lr, #48	; 0x30
   2e23c:	beq	2e2a8 <flatcc_json_parser_double@@Base+0xb0>
   2e240:	mov	r4, r1
   2e244:	mov	r5, r2
   2e248:	sub	r1, r5, r1
   2e24c:	mov	r7, r0
   2e250:	mov	r2, r3
   2e254:	mov	r0, r4
   2e258:	mov	r6, r3
   2e25c:	bl	2c5fc <grisu3_diy_fp_encode_double@@Base+0x5e4>
   2e260:	cmp	r4, r0
   2e264:	cmpne	r0, #0
   2e268:	mov	r1, r0
   2e26c:	bne	2e2a0 <flatcc_json_parser_double@@Base+0xa8>
   2e270:	vldr	d7, [r6]
   2e274:	vldr	d6, [pc, #68]	; 2e2c0 <flatcc_json_parser_double@@Base+0xc8>
   2e278:	mov	r2, r5
   2e27c:	mov	r1, r4
   2e280:	vabs.f64	d7, d7
   2e284:	mov	r0, r7
   2e288:	vcmp.f64	d7, d6
   2e28c:	vmrs	APSR_nzcv, fpscr
   2e290:	ble	2e2b4 <flatcc_json_parser_double@@Base+0xbc>
   2e294:	mov	r3, #7
   2e298:	pop	{r4, r5, r6, r7, r8, lr}
   2e29c:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   2e2a0:	mov	r0, r1
   2e2a4:	pop	{r4, r5, r6, r7, r8, pc}
   2e2a8:	ldrb	ip, [ip, #1]
   2e2ac:	cmp	ip, #48	; 0x30
   2e2b0:	bne	2e240 <flatcc_json_parser_double@@Base+0x48>
   2e2b4:	mov	r3, #6
   2e2b8:	pop	{r4, r5, r6, r7, r8, lr}
   2e2bc:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   2e2c0:			; <UNDEFINED> instruction: 0xffffffff
   2e2c4:	svcvc	0x00efffff

0002e2c8 <flatcc_json_parser_float@@Base>:
   2e2c8:	mov	ip, #0
   2e2cc:	cmp	r1, r2
   2e2d0:	str	ip, [r3]
   2e2d4:	beq	2e3bc <flatcc_json_parser_float@@Base+0xf4>
   2e2d8:	push	{r4, r5, r6, r7, lr}
   2e2dc:	mov	r7, r3
   2e2e0:	ldrb	ip, [r1]
   2e2e4:	sub	sp, sp, #12
   2e2e8:	mov	r6, r0
   2e2ec:	cmp	ip, #45	; 0x2d
   2e2f0:	addeq	ip, r1, #1
   2e2f4:	movne	ip, r1
   2e2f8:	sub	r3, r2, ip
   2e2fc:	cmp	r3, #1
   2e300:	mov	r5, r2
   2e304:	mov	r4, r1
   2e308:	ble	2e320 <flatcc_json_parser_float@@Base+0x58>
   2e30c:	ldrb	r3, [ip]
   2e310:	cmp	r3, #46	; 0x2e
   2e314:	beq	2e390 <flatcc_json_parser_float@@Base+0xc8>
   2e318:	cmp	r3, #48	; 0x30
   2e31c:	beq	2e3ac <flatcc_json_parser_float@@Base+0xe4>
   2e320:	mov	r2, sp
   2e324:	sub	r1, r5, r4
   2e328:	mov	r0, r4
   2e32c:	bl	2c5fc <grisu3_diy_fp_encode_double@@Base+0x5e4>
   2e330:	vldr	d6, [sp]
   2e334:	vldr	s14, [pc, #136]	; 2e3c4 <flatcc_json_parser_float@@Base+0xfc>
   2e338:	vcvt.f32.f64	s15, d6
   2e33c:	vabs.f32	s11, s15
   2e340:	vstr	s15, [r7]
   2e344:	vcmp.f32	s11, s14
   2e348:	vmrs	APSR_nzcv, fpscr
   2e34c:	ble	2e384 <flatcc_json_parser_float@@Base+0xbc>
   2e350:	vcmpe.f64	d6, #0.0
   2e354:	vldr	s15, [pc, #108]	; 2e3c8 <flatcc_json_parser_float@@Base+0x100>
   2e358:	vldr	s14, [pc, #108]	; 2e3cc <flatcc_json_parser_float@@Base+0x104>
   2e35c:	mov	r2, r5
   2e360:	vmrs	APSR_nzcv, fpscr
   2e364:	mov	r1, r4
   2e368:	mov	r0, r6
   2e36c:	mov	r3, #7
   2e370:	vmovpl.f32	s15, s14
   2e374:	vstr	s15, [r7]
   2e378:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2e37c:	add	sp, sp, #12
   2e380:	pop	{r4, r5, r6, r7, pc}
   2e384:	cmp	r4, r0
   2e388:	cmpne	r0, #0
   2e38c:	bne	2e37c <flatcc_json_parser_float@@Base+0xb4>
   2e390:	mov	r2, r5
   2e394:	mov	r1, r4
   2e398:	mov	r0, r6
   2e39c:	mov	r3, #6
   2e3a0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2e3a4:	add	sp, sp, #12
   2e3a8:	pop	{r4, r5, r6, r7, pc}
   2e3ac:	ldrb	r3, [ip, #1]
   2e3b0:	cmp	r3, #48	; 0x30
   2e3b4:	bne	2e320 <flatcc_json_parser_float@@Base+0x58>
   2e3b8:	b	2e390 <flatcc_json_parser_float@@Base+0xc8>
   2e3bc:	mov	r0, r1
   2e3c0:	bx	lr
   2e3c4:	svcvc	0x007fffff
   2e3c8:			; <UNDEFINED> instruction: 0xff800000
   2e3cc:	svcvc	0x00800000

0002e3d0 <flatcc_json_parser_generic_json@@Base>:
   2e3d0:	cmp	r1, r2
   2e3d4:	mov	r3, r1
   2e3d8:	beq	2ecf8 <flatcc_json_parser_generic_json@@Base+0x928>
   2e3dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e3e0:	mov	r4, r2
   2e3e4:	sub	sp, sp, #532	; 0x214
   2e3e8:	ldrb	r2, [r1]
   2e3ec:	add	r8, sp, #16
   2e3f0:	mov	r6, r0
   2e3f4:	mov	r5, r8
   2e3f8:	mov	fp, #125	; 0x7d
   2e3fc:	mov	r9, #10
   2e400:	mov	sl, #9
   2e404:	cmp	r5, r8
   2e408:	beq	2e494 <flatcc_json_parser_generic_json@@Base+0xc4>
   2e40c:	ldrb	r1, [r5, #-1]
   2e410:	cmp	r1, #125	; 0x7d
   2e414:	beq	2e890 <flatcc_json_parser_generic_json@@Base+0x4c0>
   2e418:	cmp	r2, #57	; 0x39
   2e41c:	bls	2e49c <flatcc_json_parser_generic_json@@Base+0xcc>
   2e420:	cmp	r2, #91	; 0x5b
   2e424:	beq	2e82c <flatcc_json_parser_generic_json@@Base+0x45c>
   2e428:	cmp	r2, #123	; 0x7b
   2e42c:	bne	2e5c4 <flatcc_json_parser_generic_json@@Base+0x1f4>
   2e430:	add	r2, sp, #528	; 0x210
   2e434:	cmp	r5, r2
   2e438:	beq	2ed24 <flatcc_json_parser_generic_json@@Base+0x954>
   2e43c:	add	r1, r3, #1
   2e440:	sub	r2, r4, r1
   2e444:	cmp	r2, #1
   2e448:	strb	fp, [r5]
   2e44c:	add	r5, r5, #1
   2e450:	ble	2e468 <flatcc_json_parser_generic_json@@Base+0x98>
   2e454:	ldrb	r2, [r3, #1]
   2e458:	cmp	r2, #32
   2e45c:	movhi	r3, r1
   2e460:	bhi	2e478 <flatcc_json_parser_generic_json@@Base+0xa8>
   2e464:	beq	2e9e4 <flatcc_json_parser_generic_json@@Base+0x614>
   2e468:	mov	r2, r4
   2e46c:	mov	r0, r6
   2e470:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2e474:	mov	r3, r0
   2e478:	cmp	r4, r3
   2e47c:	beq	2eb88 <flatcc_json_parser_generic_json@@Base+0x7b8>
   2e480:	ldrb	r2, [r3]
   2e484:	cmp	r2, #125	; 0x7d
   2e488:	bne	2e404 <flatcc_json_parser_generic_json@@Base+0x34>
   2e48c:	mov	r0, r3
   2e490:	b	2e654 <flatcc_json_parser_generic_json@@Base+0x284>
   2e494:	cmp	r2, #57	; 0x39
   2e498:	bhi	2e9c4 <flatcc_json_parser_generic_json@@Base+0x5f4>
   2e49c:	cmp	r2, #48	; 0x30
   2e4a0:	bcs	2e544 <flatcc_json_parser_generic_json@@Base+0x174>
   2e4a4:	cmp	r2, #34	; 0x22
   2e4a8:	bne	2e53c <flatcc_json_parser_generic_json@@Base+0x16c>
   2e4ac:	add	ip, r3, #1
   2e4b0:	cmp	r4, ip
   2e4b4:	beq	2e524 <flatcc_json_parser_generic_json@@Base+0x154>
   2e4b8:	ldrb	r3, [ip]
   2e4bc:	cmp	r3, #34	; 0x22
   2e4c0:	addne	r7, sp, #12
   2e4c4:	bne	2e4d8 <flatcc_json_parser_generic_json@@Base+0x108>
   2e4c8:	b	2eaa0 <flatcc_json_parser_generic_json@@Base+0x6d0>
   2e4cc:	ldrb	r3, [r0]
   2e4d0:	cmp	r3, #34	; 0x22
   2e4d4:	beq	2eaa0 <flatcc_json_parser_generic_json@@Base+0x6d0>
   2e4d8:	mov	r1, ip
   2e4dc:	mov	r2, r4
   2e4e0:	mov	r0, r6
   2e4e4:	bl	2d300 <flatcc_json_parser_string_part@@Base>
   2e4e8:	mov	r3, r7
   2e4ec:	mov	r2, r4
   2e4f0:	mov	ip, r0
   2e4f4:	cmp	r4, ip
   2e4f8:	mov	r1, r0
   2e4fc:	mov	r0, r6
   2e500:	beq	2e510 <flatcc_json_parser_generic_json@@Base+0x140>
   2e504:	ldrb	lr, [ip]
   2e508:	cmp	lr, #34	; 0x22
   2e50c:	beq	2eaa0 <flatcc_json_parser_generic_json@@Base+0x6d0>
   2e510:	bl	2dad4 <flatcc_json_parser_string_escape@@Base>
   2e514:	cmp	r4, r0
   2e518:	mov	ip, r0
   2e51c:	bne	2e4cc <flatcc_json_parser_generic_json@@Base+0xfc>
   2e520:	mov	ip, r4
   2e524:	mov	r1, ip
   2e528:	mov	r3, #20
   2e52c:	mov	r2, r4
   2e530:	mov	r0, r6
   2e534:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2e538:	b	2e5e4 <flatcc_json_parser_generic_json@@Base+0x214>
   2e53c:	cmp	r2, #45	; 0x2d
   2e540:	bne	2e5c4 <flatcc_json_parser_generic_json@@Base+0x1f4>
   2e544:	cmp	r4, r3
   2e548:	beq	2ec98 <flatcc_json_parser_generic_json@@Base+0x8c8>
   2e54c:	cmp	r2, #45	; 0x2d
   2e550:	beq	2eb94 <flatcc_json_parser_generic_json@@Base+0x7c4>
   2e554:	ldrb	r2, [r3]
   2e558:	cmp	r2, #48	; 0x30
   2e55c:	beq	2eaa8 <flatcc_json_parser_generic_json@@Base+0x6d8>
   2e560:	sub	r2, r2, #49	; 0x31
   2e564:	cmp	r2, #8
   2e568:	bhi	2ec64 <flatcc_json_parser_generic_json@@Base+0x894>
   2e56c:	add	r0, r3, #1
   2e570:	cmp	r4, r0
   2e574:	beq	2e5ac <flatcc_json_parser_generic_json@@Base+0x1dc>
   2e578:	ldrb	r2, [r3, #1]
   2e57c:	sub	r1, r2, #48	; 0x30
   2e580:	cmp	r1, #9
   2e584:	bhi	2eab8 <flatcc_json_parser_generic_json@@Base+0x6e8>
   2e588:	add	r3, r3, #2
   2e58c:	b	2e5a0 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2e590:	ldrb	r2, [r3], #1
   2e594:	sub	r1, r2, #48	; 0x30
   2e598:	cmp	r1, #9
   2e59c:	bhi	2eab8 <flatcc_json_parser_generic_json@@Base+0x6e8>
   2e5a0:	cmp	r3, r4
   2e5a4:	mov	r0, r3
   2e5a8:	bne	2e590 <flatcc_json_parser_generic_json@@Base+0x1c0>
   2e5ac:	mov	r1, r0
   2e5b0:	mov	r3, #6
   2e5b4:	mov	r2, r4
   2e5b8:	mov	r0, r6
   2e5bc:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2e5c0:	b	2e5e4 <flatcc_json_parser_generic_json@@Base+0x214>
   2e5c4:	mov	r1, r3
   2e5c8:	mov	r2, r4
   2e5cc:	mov	r0, r6
   2e5d0:	str	r3, [sp, #4]
   2e5d4:	bl	2df4c <flatcc_json_parser_skip_constant@@Base>
   2e5d8:	ldr	r3, [sp, #4]
   2e5dc:	cmp	r0, r3
   2e5e0:	beq	2ed54 <flatcc_json_parser_generic_json@@Base+0x984>
   2e5e4:	cmp	r4, r0
   2e5e8:	bne	2e654 <flatcc_json_parser_generic_json@@Base+0x284>
   2e5ec:	b	2ec98 <flatcc_json_parser_generic_json@@Base+0x8c8>
   2e5f0:	cmp	r3, #1
   2e5f4:	ble	2e608 <flatcc_json_parser_generic_json@@Base+0x238>
   2e5f8:	ldrb	r3, [r0]
   2e5fc:	cmp	r3, #32
   2e600:	bhi	2e618 <flatcc_json_parser_generic_json@@Base+0x248>
   2e604:	beq	2e700 <flatcc_json_parser_generic_json@@Base+0x330>
   2e608:	mov	r1, r0
   2e60c:	mov	r2, r4
   2e610:	mov	r0, r6
   2e614:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2e618:	cmp	r4, r0
   2e61c:	beq	2e718 <flatcc_json_parser_generic_json@@Base+0x348>
   2e620:	ldrb	r3, [r0]
   2e624:	cmp	r3, #44	; 0x2c
   2e628:	beq	2e74c <flatcc_json_parser_generic_json@@Base+0x37c>
   2e62c:	cmp	r3, #125	; 0x7d
   2e630:	beq	2e6cc <flatcc_json_parser_generic_json@@Base+0x2fc>
   2e634:	mov	r1, r0
   2e638:	mov	r3, r9
   2e63c:	mov	r2, r4
   2e640:	mov	r0, r6
   2e644:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2e648:	cmp	r4, r0
   2e64c:	beq	2e718 <flatcc_json_parser_generic_json@@Base+0x348>
   2e650:	mov	r5, r7
   2e654:	cmp	r5, r8
   2e658:	beq	2e744 <flatcc_json_parser_generic_json@@Base+0x374>
   2e65c:	ldrb	r3, [r5, #-1]
   2e660:	sub	r7, r5, #1
   2e664:	cmp	r3, #93	; 0x5d
   2e668:	sub	r3, r4, r0
   2e66c:	bne	2e5f0 <flatcc_json_parser_generic_json@@Base+0x220>
   2e670:	cmp	r3, #1
   2e674:	ble	2e688 <flatcc_json_parser_generic_json@@Base+0x2b8>
   2e678:	ldrb	r3, [r0]
   2e67c:	cmp	r3, #32
   2e680:	bhi	2e698 <flatcc_json_parser_generic_json@@Base+0x2c8>
   2e684:	beq	2e798 <flatcc_json_parser_generic_json@@Base+0x3c8>
   2e688:	mov	r1, r0
   2e68c:	mov	r2, r4
   2e690:	mov	r0, r6
   2e694:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2e698:	cmp	r4, r0
   2e69c:	beq	2e718 <flatcc_json_parser_generic_json@@Base+0x348>
   2e6a0:	ldrb	r3, [r0]
   2e6a4:	cmp	r3, #44	; 0x2c
   2e6a8:	beq	2e7ac <flatcc_json_parser_generic_json@@Base+0x3dc>
   2e6ac:	cmp	r3, #93	; 0x5d
   2e6b0:	beq	2e6cc <flatcc_json_parser_generic_json@@Base+0x2fc>
   2e6b4:	mov	r1, r0
   2e6b8:	mov	r3, sl
   2e6bc:	mov	r2, r4
   2e6c0:	mov	r0, r6
   2e6c4:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2e6c8:	b	2e648 <flatcc_json_parser_generic_json@@Base+0x278>
   2e6cc:	add	r1, r0, #1
   2e6d0:	sub	r3, r4, r1
   2e6d4:	cmp	r3, #1
   2e6d8:	ble	2e6f0 <flatcc_json_parser_generic_json@@Base+0x320>
   2e6dc:	ldrb	r3, [r0, #1]
   2e6e0:	cmp	r3, #32
   2e6e4:	movhi	r0, r1
   2e6e8:	bhi	2e648 <flatcc_json_parser_generic_json@@Base+0x278>
   2e6ec:	beq	2e818 <flatcc_json_parser_generic_json@@Base+0x448>
   2e6f0:	mov	r2, r4
   2e6f4:	mov	r0, r6
   2e6f8:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2e6fc:	b	2e648 <flatcc_json_parser_generic_json@@Base+0x278>
   2e700:	ldrb	r3, [r0, #1]
   2e704:	cmp	r3, #32
   2e708:	addhi	r0, r0, #1
   2e70c:	bls	2e608 <flatcc_json_parser_generic_json@@Base+0x238>
   2e710:	cmp	r4, r0
   2e714:	bne	2e620 <flatcc_json_parser_generic_json@@Base+0x250>
   2e718:	mov	r0, r4
   2e71c:	cmp	r7, r8
   2e720:	beq	2e744 <flatcc_json_parser_generic_json@@Base+0x374>
   2e724:	ldrb	r3, [r7, #-1]
   2e728:	mov	r0, r6
   2e72c:	mov	r2, r4
   2e730:	cmp	r3, #93	; 0x5d
   2e734:	movne	r3, #10
   2e738:	moveq	r3, #9
   2e73c:	mov	r1, r4
   2e740:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2e744:	add	sp, sp, #532	; 0x214
   2e748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e74c:	add	r1, r0, #1
   2e750:	sub	r3, r4, r1
   2e754:	cmp	r3, #1
   2e758:	ble	2e76c <flatcc_json_parser_generic_json@@Base+0x39c>
   2e75c:	ldrb	r3, [r0, #1]
   2e760:	cmp	r3, #32
   2e764:	bhi	2e77c <flatcc_json_parser_generic_json@@Base+0x3ac>
   2e768:	beq	2eb48 <flatcc_json_parser_generic_json@@Base+0x778>
   2e76c:	mov	r2, r4
   2e770:	mov	r0, r6
   2e774:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2e778:	mov	r1, r0
   2e77c:	cmp	r4, r1
   2e780:	beq	2ec4c <flatcc_json_parser_generic_json@@Base+0x87c>
   2e784:	ldrb	r2, [r1]
   2e788:	cmp	r2, #125	; 0x7d
   2e78c:	beq	2e7f0 <flatcc_json_parser_generic_json@@Base+0x420>
   2e790:	mov	r3, r1
   2e794:	b	2e404 <flatcc_json_parser_generic_json@@Base+0x34>
   2e798:	ldrb	r3, [r0, #1]
   2e79c:	cmp	r3, #32
   2e7a0:	addhi	r0, r0, #1
   2e7a4:	bls	2e688 <flatcc_json_parser_generic_json@@Base+0x2b8>
   2e7a8:	b	2e698 <flatcc_json_parser_generic_json@@Base+0x2c8>
   2e7ac:	add	r1, r0, #1
   2e7b0:	sub	r3, r4, r1
   2e7b4:	cmp	r3, #1
   2e7b8:	ble	2e7cc <flatcc_json_parser_generic_json@@Base+0x3fc>
   2e7bc:	ldrb	r3, [r0, #1]
   2e7c0:	cmp	r3, #32
   2e7c4:	bhi	2e7dc <flatcc_json_parser_generic_json@@Base+0x40c>
   2e7c8:	beq	2e9d0 <flatcc_json_parser_generic_json@@Base+0x600>
   2e7cc:	mov	r2, r4
   2e7d0:	mov	r0, r6
   2e7d4:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2e7d8:	mov	r1, r0
   2e7dc:	cmp	r4, r1
   2e7e0:	beq	2ece0 <flatcc_json_parser_generic_json@@Base+0x910>
   2e7e4:	ldrb	r2, [r1]
   2e7e8:	cmp	r2, #93	; 0x5d
   2e7ec:	bne	2e790 <flatcc_json_parser_generic_json@@Base+0x3c0>
   2e7f0:	add	r0, r1, #1
   2e7f4:	sub	r3, r4, r0
   2e7f8:	cmp	r3, #1
   2e7fc:	ble	2e810 <flatcc_json_parser_generic_json@@Base+0x440>
   2e800:	ldrb	r3, [r1, #1]
   2e804:	cmp	r3, #32
   2e808:	bhi	2e648 <flatcc_json_parser_generic_json@@Base+0x278>
   2e80c:	beq	2eccc <flatcc_json_parser_generic_json@@Base+0x8fc>
   2e810:	mov	r1, r0
   2e814:	b	2e6f0 <flatcc_json_parser_generic_json@@Base+0x320>
   2e818:	ldrb	r3, [r0, #2]
   2e81c:	cmp	r3, #32
   2e820:	addhi	r0, r0, #2
   2e824:	bls	2e6f0 <flatcc_json_parser_generic_json@@Base+0x320>
   2e828:	b	2e648 <flatcc_json_parser_generic_json@@Base+0x278>
   2e82c:	add	r2, sp, #528	; 0x210
   2e830:	cmp	r5, r2
   2e834:	beq	2ed24 <flatcc_json_parser_generic_json@@Base+0x954>
   2e838:	add	r1, r3, #1
   2e83c:	sub	r2, r4, r1
   2e840:	cmp	r2, #1
   2e844:	mov	r2, #93	; 0x5d
   2e848:	strb	r2, [r5]
   2e84c:	add	r5, r5, #1
   2e850:	ble	2e868 <flatcc_json_parser_generic_json@@Base+0x498>
   2e854:	ldrb	r2, [r3, #1]
   2e858:	cmp	r2, #32
   2e85c:	movhi	r3, r1
   2e860:	bhi	2e878 <flatcc_json_parser_generic_json@@Base+0x4a8>
   2e864:	beq	2e9f8 <flatcc_json_parser_generic_json@@Base+0x628>
   2e868:	mov	r2, r4
   2e86c:	mov	r0, r6
   2e870:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2e874:	mov	r3, r0
   2e878:	cmp	r4, r3
   2e87c:	beq	2eb88 <flatcc_json_parser_generic_json@@Base+0x7b8>
   2e880:	ldrb	r2, [r3]
   2e884:	cmp	r2, #93	; 0x5d
   2e888:	bne	2e404 <flatcc_json_parser_generic_json@@Base+0x34>
   2e88c:	b	2e48c <flatcc_json_parser_generic_json@@Base+0xbc>
   2e890:	cmp	r2, #34	; 0x22
   2e894:	moveq	r2, #0
   2e898:	addeq	r3, r3, #1
   2e89c:	streq	r2, [r6, #12]
   2e8a0:	beq	2ea30 <flatcc_json_parser_generic_json@@Base+0x660>
   2e8a4:	cmp	r2, #46	; 0x2e
   2e8a8:	movne	r2, #1
   2e8ac:	strne	r2, [r6, #12]
   2e8b0:	beq	2ea0c <flatcc_json_parser_generic_json@@Base+0x63c>
   2e8b4:	cmp	r4, r3
   2e8b8:	moveq	r0, r4
   2e8bc:	beq	2e92c <flatcc_json_parser_generic_json@@Base+0x55c>
   2e8c0:	ldrb	r2, [r3]
   2e8c4:	cmp	r2, #32
   2e8c8:	addhi	r3, r3, #1
   2e8cc:	bls	2ed9c <flatcc_json_parser_generic_json@@Base+0x9cc>
   2e8d0:	cmp	r2, #46	; 0x2e
   2e8d4:	cmpne	r2, #95	; 0x5f
   2e8d8:	sub	r0, r3, #1
   2e8dc:	beq	2ea80 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2e8e0:	sub	r1, r2, #48	; 0x30
   2e8e4:	tst	r2, #128	; 0x80
   2e8e8:	uxtb	r1, r1
   2e8ec:	bne	2ea80 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2e8f0:	orr	ip, r2, #32
   2e8f4:	sub	ip, ip, #97	; 0x61
   2e8f8:	cmp	r1, #9
   2e8fc:	uxtb	ip, ip
   2e900:	bls	2ea80 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2e904:	cmp	ip, #25
   2e908:	bls	2ea80 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2e90c:	sub	r3, r4, r0
   2e910:	cmp	r3, #1
   2e914:	ble	2e92c <flatcc_json_parser_generic_json@@Base+0x55c>
   2e918:	ldrb	r2, [r0]
   2e91c:	cmp	r2, #32
   2e920:	bhi	2e93c <flatcc_json_parser_generic_json@@Base+0x56c>
   2e924:	cmp	r2, #32
   2e928:	beq	2eca4 <flatcc_json_parser_generic_json@@Base+0x8d4>
   2e92c:	mov	r1, r0
   2e930:	mov	r2, r4
   2e934:	mov	r0, r6
   2e938:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2e93c:	cmp	r4, r0
   2e940:	beq	2ed6c <flatcc_json_parser_generic_json@@Base+0x99c>
   2e944:	ldrb	r3, [r0]
   2e948:	cmp	r3, #58	; 0x3a
   2e94c:	bne	2ed84 <flatcc_json_parser_generic_json@@Base+0x9b4>
   2e950:	add	r3, r0, #1
   2e954:	sub	r2, r4, r3
   2e958:	cmp	r2, #1
   2e95c:	ble	2e970 <flatcc_json_parser_generic_json@@Base+0x5a0>
   2e960:	ldrb	r2, [r0, #1]
   2e964:	cmp	r2, #32
   2e968:	bhi	2e988 <flatcc_json_parser_generic_json@@Base+0x5b8>
   2e96c:	beq	2ecb8 <flatcc_json_parser_generic_json@@Base+0x8e8>
   2e970:	mov	r1, r3
   2e974:	mov	r2, r4
   2e978:	mov	r0, r6
   2e97c:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2e980:	ldrb	r2, [r0]
   2e984:	mov	r3, r0
   2e988:	cmp	r2, #57	; 0x39
   2e98c:	bhi	2e420 <flatcc_json_parser_generic_json@@Base+0x50>
   2e990:	cmp	r2, #48	; 0x30
   2e994:	bcs	2e544 <flatcc_json_parser_generic_json@@Base+0x174>
   2e998:	cmp	r2, #34	; 0x22
   2e99c:	bne	2e53c <flatcc_json_parser_generic_json@@Base+0x16c>
   2e9a0:	cmp	r3, r4
   2e9a4:	bne	2e4ac <flatcc_json_parser_generic_json@@Base+0xdc>
   2e9a8:	mov	r3, #16
   2e9ac:	mov	r2, r4
   2e9b0:	mov	r1, r4
   2e9b4:	mov	r0, r6
   2e9b8:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2e9bc:	mov	ip, r0
   2e9c0:	b	2e4b0 <flatcc_json_parser_generic_json@@Base+0xe0>
   2e9c4:	cmp	r2, #91	; 0x5b
   2e9c8:	bne	2e428 <flatcc_json_parser_generic_json@@Base+0x58>
   2e9cc:	b	2e838 <flatcc_json_parser_generic_json@@Base+0x468>
   2e9d0:	ldrb	r3, [r0, #2]
   2e9d4:	cmp	r3, #32
   2e9d8:	addhi	r1, r0, #2
   2e9dc:	bls	2e7cc <flatcc_json_parser_generic_json@@Base+0x3fc>
   2e9e0:	b	2e7dc <flatcc_json_parser_generic_json@@Base+0x40c>
   2e9e4:	ldrb	r2, [r3, #2]
   2e9e8:	cmp	r2, #32
   2e9ec:	addhi	r3, r3, #2
   2e9f0:	bls	2e468 <flatcc_json_parser_generic_json@@Base+0x98>
   2e9f4:	b	2e478 <flatcc_json_parser_generic_json@@Base+0xa8>
   2e9f8:	ldrb	r2, [r3, #2]
   2e9fc:	cmp	r2, #32
   2ea00:	addhi	r3, r3, #2
   2ea04:	bls	2e868 <flatcc_json_parser_generic_json@@Base+0x498>
   2ea08:	b	2e878 <flatcc_json_parser_generic_json@@Base+0x4a8>
   2ea0c:	mov	r1, r3
   2ea10:	mov	r2, r4
   2ea14:	mov	r3, #5
   2ea18:	mov	r0, r6
   2ea1c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2ea20:	ldr	r2, [r6, #12]
   2ea24:	cmp	r2, #0
   2ea28:	mov	r3, r0
   2ea2c:	bne	2e8b4 <flatcc_json_parser_generic_json@@Base+0x4e4>
   2ea30:	cmp	r4, r3
   2ea34:	beq	2ec7c <flatcc_json_parser_generic_json@@Base+0x8ac>
   2ea38:	ldrb	r1, [r3]
   2ea3c:	cmp	r1, #34	; 0x22
   2ea40:	bne	2ea60 <flatcc_json_parser_generic_json@@Base+0x690>
   2ea44:	b	2ec90 <flatcc_json_parser_generic_json@@Base+0x8c0>
   2ea48:	add	r3, r2, #1
   2ea4c:	cmp	r4, r3
   2ea50:	beq	2ec7c <flatcc_json_parser_generic_json@@Base+0x8ac>
   2ea54:	ldrb	r1, [r2, #1]
   2ea58:	cmp	r1, #34	; 0x22
   2ea5c:	beq	2ec90 <flatcc_json_parser_generic_json@@Base+0x8c0>
   2ea60:	cmp	r1, #92	; 0x5c
   2ea64:	mov	r2, r3
   2ea68:	bne	2ea48 <flatcc_json_parser_generic_json@@Base+0x678>
   2ea6c:	sub	r2, r4, r3
   2ea70:	cmp	r2, #1
   2ea74:	ble	2ec28 <flatcc_json_parser_generic_json@@Base+0x858>
   2ea78:	add	r2, r3, #1
   2ea7c:	b	2ea48 <flatcc_json_parser_generic_json@@Base+0x678>
   2ea80:	cmp	r4, r3
   2ea84:	mov	r0, r3
   2ea88:	beq	2ed00 <flatcc_json_parser_generic_json@@Base+0x930>
   2ea8c:	ldrb	r1, [r3], #1
   2ea90:	cmp	r1, #32
   2ea94:	bls	2ed04 <flatcc_json_parser_generic_json@@Base+0x934>
   2ea98:	mov	r2, r1
   2ea9c:	b	2e8d0 <flatcc_json_parser_generic_json@@Base+0x500>
   2eaa0:	add	r0, ip, #1
   2eaa4:	b	2e5e4 <flatcc_json_parser_generic_json@@Base+0x214>
   2eaa8:	add	r0, r3, #1
   2eaac:	cmp	r4, r0
   2eab0:	ldrbne	r2, [r3, #1]
   2eab4:	beq	2e5ac <flatcc_json_parser_generic_json@@Base+0x1dc>
   2eab8:	cmp	r2, #46	; 0x2e
   2eabc:	beq	2ebd4 <flatcc_json_parser_generic_json@@Base+0x804>
   2eac0:	and	r3, r2, #223	; 0xdf
   2eac4:	cmp	r3, #69	; 0x45
   2eac8:	bne	2eb5c <flatcc_json_parser_generic_json@@Base+0x78c>
   2eacc:	add	r1, r0, #1
   2ead0:	cmp	r4, r1
   2ead4:	beq	2eba0 <flatcc_json_parser_generic_json@@Base+0x7d0>
   2ead8:	ldrb	r3, [r0, #1]
   2eadc:	sub	r2, r3, #43	; 0x2b
   2eae0:	tst	r2, #253	; 0xfd
   2eae4:	bne	2eaf8 <flatcc_json_parser_generic_json@@Base+0x728>
   2eae8:	add	r1, r0, #2
   2eaec:	cmp	r4, r1
   2eaf0:	beq	2e5b0 <flatcc_json_parser_generic_json@@Base+0x1e0>
   2eaf4:	ldrb	r3, [r0, #2]
   2eaf8:	sub	r3, r3, #48	; 0x30
   2eafc:	cmp	r3, #9
   2eb00:	bhi	2e5b0 <flatcc_json_parser_generic_json@@Base+0x1e0>
   2eb04:	add	r0, r1, #1
   2eb08:	cmp	r4, r0
   2eb0c:	beq	2e5ac <flatcc_json_parser_generic_json@@Base+0x1dc>
   2eb10:	ldrb	r2, [r1, #1]
   2eb14:	sub	r3, r2, #48	; 0x30
   2eb18:	cmp	r3, #9
   2eb1c:	bhi	2eb5c <flatcc_json_parser_generic_json@@Base+0x78c>
   2eb20:	add	r3, r1, #2
   2eb24:	b	2eb38 <flatcc_json_parser_generic_json@@Base+0x768>
   2eb28:	ldrb	r2, [r3], #1
   2eb2c:	sub	r1, r2, #48	; 0x30
   2eb30:	cmp	r1, #9
   2eb34:	bhi	2eb5c <flatcc_json_parser_generic_json@@Base+0x78c>
   2eb38:	cmp	r4, r3
   2eb3c:	mov	r0, r3
   2eb40:	bne	2eb28 <flatcc_json_parser_generic_json@@Base+0x758>
   2eb44:	b	2e5ac <flatcc_json_parser_generic_json@@Base+0x1dc>
   2eb48:	ldrb	r3, [r0, #2]
   2eb4c:	cmp	r3, #32
   2eb50:	addhi	r1, r0, #2
   2eb54:	bls	2e76c <flatcc_json_parser_generic_json@@Base+0x39c>
   2eb58:	b	2e77c <flatcc_json_parser_generic_json@@Base+0x3ac>
   2eb5c:	cmp	r2, #32
   2eb60:	beq	2e5e4 <flatcc_json_parser_generic_json@@Base+0x214>
   2eb64:	bls	2ebb8 <flatcc_json_parser_generic_json@@Base+0x7e8>
   2eb68:	cmp	r2, #58	; 0x3a
   2eb6c:	beq	2e5e4 <flatcc_json_parser_generic_json@@Base+0x214>
   2eb70:	bls	2ec84 <flatcc_json_parser_generic_json@@Base+0x8b4>
   2eb74:	cmp	r2, #93	; 0x5d
   2eb78:	beq	2e5e4 <flatcc_json_parser_generic_json@@Base+0x214>
   2eb7c:	cmp	r2, #125	; 0x7d
   2eb80:	bne	2e5ac <flatcc_json_parser_generic_json@@Base+0x1dc>
   2eb84:	b	2e5e4 <flatcc_json_parser_generic_json@@Base+0x214>
   2eb88:	mov	r0, r4
   2eb8c:	add	sp, sp, #532	; 0x214
   2eb90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eb94:	add	r3, r3, #1
   2eb98:	cmp	r4, r3
   2eb9c:	bne	2e554 <flatcc_json_parser_generic_json@@Base+0x184>
   2eba0:	mov	r3, #6
   2eba4:	mov	r2, r4
   2eba8:	mov	r1, r4
   2ebac:	mov	r0, r6
   2ebb0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2ebb4:	b	2e5e4 <flatcc_json_parser_generic_json@@Base+0x214>
   2ebb8:	cmp	r2, #9
   2ebbc:	bcc	2e5ac <flatcc_json_parser_generic_json@@Base+0x1dc>
   2ebc0:	cmp	r2, #11
   2ebc4:	bls	2e5e4 <flatcc_json_parser_generic_json@@Base+0x214>
   2ebc8:	cmp	r2, #13
   2ebcc:	bne	2e5ac <flatcc_json_parser_generic_json@@Base+0x1dc>
   2ebd0:	b	2e5e4 <flatcc_json_parser_generic_json@@Base+0x214>
   2ebd4:	ldrb	r3, [r0, #1]
   2ebd8:	sub	r3, r3, #48	; 0x30
   2ebdc:	cmp	r3, #9
   2ebe0:	bhi	2ed3c <flatcc_json_parser_generic_json@@Base+0x96c>
   2ebe4:	add	r3, r0, #2
   2ebe8:	cmp	r4, r3
   2ebec:	beq	2edb8 <flatcc_json_parser_generic_json@@Base+0x9e8>
   2ebf0:	ldrb	r2, [r0, #2]
   2ebf4:	sub	r1, r2, #48	; 0x30
   2ebf8:	cmp	r1, #9
   2ebfc:	bhi	2edb0 <flatcc_json_parser_generic_json@@Base+0x9e0>
   2ec00:	add	r3, r0, #3
   2ec04:	b	2ec18 <flatcc_json_parser_generic_json@@Base+0x848>
   2ec08:	ldrb	r2, [r3], #1
   2ec0c:	sub	r1, r2, #48	; 0x30
   2ec10:	cmp	r1, #9
   2ec14:	bhi	2eac0 <flatcc_json_parser_generic_json@@Base+0x6f0>
   2ec18:	cmp	r4, r3
   2ec1c:	mov	r0, r3
   2ec20:	bne	2ec08 <flatcc_json_parser_generic_json@@Base+0x838>
   2ec24:	b	2e5ac <flatcc_json_parser_generic_json@@Base+0x1dc>
   2ec28:	ldrb	r2, [r3]
   2ec2c:	cmp	r2, #34	; 0x22
   2ec30:	beq	2ec90 <flatcc_json_parser_generic_json@@Base+0x8c0>
   2ec34:	mov	r1, r3
   2ec38:	mov	r2, r4
   2ec3c:	mov	r3, #20
   2ec40:	mov	r0, r6
   2ec44:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2ec48:	b	2e90c <flatcc_json_parser_generic_json@@Base+0x53c>
   2ec4c:	mov	r3, r9
   2ec50:	mov	r2, r4
   2ec54:	mov	r1, r4
   2ec58:	mov	r0, r6
   2ec5c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2ec60:	b	2e648 <flatcc_json_parser_generic_json@@Base+0x278>
   2ec64:	mov	r1, r3
   2ec68:	mov	r2, r4
   2ec6c:	mov	r3, #6
   2ec70:	mov	r0, r6
   2ec74:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2ec78:	b	2e5e4 <flatcc_json_parser_generic_json@@Base+0x214>
   2ec7c:	mov	r3, r4
   2ec80:	b	2ec34 <flatcc_json_parser_generic_json@@Base+0x864>
   2ec84:	cmp	r2, #44	; 0x2c
   2ec88:	bne	2e5ac <flatcc_json_parser_generic_json@@Base+0x1dc>
   2ec8c:	b	2e5e4 <flatcc_json_parser_generic_json@@Base+0x214>
   2ec90:	add	r0, r3, #1
   2ec94:	b	2e90c <flatcc_json_parser_generic_json@@Base+0x53c>
   2ec98:	mov	r7, r5
   2ec9c:	mov	r0, r4
   2eca0:	b	2e71c <flatcc_json_parser_generic_json@@Base+0x34c>
   2eca4:	ldrb	r3, [r0, #1]
   2eca8:	cmp	r3, #32
   2ecac:	addhi	r0, r0, #1
   2ecb0:	bls	2e92c <flatcc_json_parser_generic_json@@Base+0x55c>
   2ecb4:	b	2e93c <flatcc_json_parser_generic_json@@Base+0x56c>
   2ecb8:	ldrb	r2, [r0, #2]
   2ecbc:	cmp	r2, #32
   2ecc0:	addhi	r3, r0, #2
   2ecc4:	bls	2e970 <flatcc_json_parser_generic_json@@Base+0x5a0>
   2ecc8:	b	2e988 <flatcc_json_parser_generic_json@@Base+0x5b8>
   2eccc:	ldrb	r3, [r1, #2]
   2ecd0:	cmp	r3, #32
   2ecd4:	addhi	r0, r1, #2
   2ecd8:	bls	2e810 <flatcc_json_parser_generic_json@@Base+0x440>
   2ecdc:	b	2e648 <flatcc_json_parser_generic_json@@Base+0x278>
   2ece0:	mov	r3, sl
   2ece4:	mov	r2, r4
   2ece8:	mov	r1, r4
   2ecec:	mov	r0, r6
   2ecf0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2ecf4:	b	2e648 <flatcc_json_parser_generic_json@@Base+0x278>
   2ecf8:	mov	r0, r1
   2ecfc:	bx	lr
   2ed00:	mov	r0, r4
   2ed04:	cmp	r2, #46	; 0x2e
   2ed08:	bne	2e90c <flatcc_json_parser_generic_json@@Base+0x53c>
   2ed0c:	mov	r1, r0
   2ed10:	mov	r3, #5
   2ed14:	mov	r2, r4
   2ed18:	mov	r0, r6
   2ed1c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2ed20:	b	2e90c <flatcc_json_parser_generic_json@@Base+0x53c>
   2ed24:	mov	r1, r3
   2ed28:	mov	r2, r4
   2ed2c:	mov	r0, r6
   2ed30:	mov	r3, #2
   2ed34:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2ed38:	b	2e744 <flatcc_json_parser_generic_json@@Base+0x374>
   2ed3c:	add	r1, r0, #1
   2ed40:	mov	r3, #6
   2ed44:	mov	r2, r4
   2ed48:	mov	r0, r6
   2ed4c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2ed50:	b	2e5e4 <flatcc_json_parser_generic_json@@Base+0x214>
   2ed54:	mov	r1, r3
   2ed58:	mov	r2, r4
   2ed5c:	mov	r0, r6
   2ed60:	mov	r3, #5
   2ed64:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2ed68:	b	2e744 <flatcc_json_parser_generic_json@@Base+0x374>
   2ed6c:	mov	r0, r6
   2ed70:	mov	r3, #10
   2ed74:	mov	r2, r4
   2ed78:	mov	r1, r4
   2ed7c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2ed80:	b	2e744 <flatcc_json_parser_generic_json@@Base+0x374>
   2ed84:	mov	r1, r0
   2ed88:	mov	r2, r4
   2ed8c:	mov	r0, r6
   2ed90:	mov	r3, #4
   2ed94:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2ed98:	b	2e744 <flatcc_json_parser_generic_json@@Base+0x374>
   2ed9c:	sub	r1, r4, r3
   2eda0:	cmp	r1, #1
   2eda4:	mov	r0, r3
   2eda8:	bgt	2e924 <flatcc_json_parser_generic_json@@Base+0x554>
   2edac:	b	2e92c <flatcc_json_parser_generic_json@@Base+0x55c>
   2edb0:	mov	r0, r3
   2edb4:	b	2eac0 <flatcc_json_parser_generic_json@@Base+0x6f0>
   2edb8:	mov	r0, r4
   2edbc:	b	2e5ac <flatcc_json_parser_generic_json@@Base+0x1dc>

0002edc0 <flatcc_json_parser_unmatched_symbol@@Base>:
   2edc0:	ldr	ip, [r0, #8]
   2edc4:	tst	ip, #1
   2edc8:	beq	2ee9c <flatcc_json_parser_unmatched_symbol@@Base+0xdc>
   2edcc:	push	{r4, r5, r6, lr}
   2edd0:	mov	r4, r2
   2edd4:	ldr	r2, [r0, #12]
   2edd8:	mov	r5, r0
   2eddc:	cmp	r2, #0
   2ede0:	mov	r3, r1
   2ede4:	beq	2eea4 <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
   2ede8:	cmp	r1, r4
   2edec:	beq	2ee3c <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   2edf0:	ldrb	r1, [r1]
   2edf4:	cmp	r1, #32
   2edf8:	bls	2ee3c <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   2edfc:	add	r2, r3, #1
   2ee00:	cmp	r1, #46	; 0x2e
   2ee04:	cmpne	r1, #95	; 0x5f
   2ee08:	sub	r3, r2, #1
   2ee0c:	beq	2ef08 <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   2ee10:	sub	r0, r1, #48	; 0x30
   2ee14:	tst	r1, #128	; 0x80
   2ee18:	uxtb	r0, r0
   2ee1c:	bne	2ef08 <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   2ee20:	orr	ip, r1, #32
   2ee24:	sub	ip, ip, #97	; 0x61
   2ee28:	cmp	r0, #9
   2ee2c:	uxtb	ip, ip
   2ee30:	bls	2ef08 <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   2ee34:	cmp	ip, #25
   2ee38:	bls	2ef08 <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   2ee3c:	mov	r6, r4
   2ee40:	sub	r2, r6, r3
   2ee44:	cmp	r2, #1
   2ee48:	ble	2ee5c <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   2ee4c:	ldrb	r2, [r3]
   2ee50:	cmp	r2, #32
   2ee54:	bhi	2ee70 <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
   2ee58:	beq	2ef28 <flatcc_json_parser_unmatched_symbol@@Base+0x168>
   2ee5c:	mov	r1, r3
   2ee60:	mov	r2, r4
   2ee64:	mov	r0, r5
   2ee68:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2ee6c:	mov	r3, r0
   2ee70:	cmp	r4, r3
   2ee74:	beq	2ee84 <flatcc_json_parser_unmatched_symbol@@Base+0xc4>
   2ee78:	ldrb	r2, [r3]
   2ee7c:	cmp	r2, #58	; 0x3a
   2ee80:	beq	2ef98 <flatcc_json_parser_unmatched_symbol@@Base+0x1d8>
   2ee84:	mov	r2, r4
   2ee88:	mov	r1, r3
   2ee8c:	mov	r0, r5
   2ee90:	mov	r3, #4
   2ee94:	pop	{r4, r5, r6, lr}
   2ee98:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   2ee9c:	mov	r3, #13
   2eea0:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   2eea4:	cmp	r1, r4
   2eea8:	beq	2efec <flatcc_json_parser_unmatched_symbol@@Base+0x22c>
   2eeac:	ldrb	r1, [r1]
   2eeb0:	cmp	r1, #34	; 0x22
   2eeb4:	movne	r6, r4
   2eeb8:	bne	2eed8 <flatcc_json_parser_unmatched_symbol@@Base+0x118>
   2eebc:	b	2ef64 <flatcc_json_parser_unmatched_symbol@@Base+0x1a4>
   2eec0:	add	r3, r2, #1
   2eec4:	cmp	r4, r3
   2eec8:	beq	2ef00 <flatcc_json_parser_unmatched_symbol@@Base+0x140>
   2eecc:	ldrb	r1, [r2, #1]
   2eed0:	cmp	r1, #34	; 0x22
   2eed4:	beq	2ef68 <flatcc_json_parser_unmatched_symbol@@Base+0x1a8>
   2eed8:	cmp	r1, #92	; 0x5c
   2eedc:	mov	r2, r3
   2eee0:	bne	2eec0 <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   2eee4:	sub	r2, r4, r3
   2eee8:	cmp	r2, #1
   2eeec:	ble	2ef3c <flatcc_json_parser_unmatched_symbol@@Base+0x17c>
   2eef0:	add	r2, r3, #1
   2eef4:	add	r3, r2, #1
   2eef8:	cmp	r4, r3
   2eefc:	bne	2eecc <flatcc_json_parser_unmatched_symbol@@Base+0x10c>
   2ef00:	mov	r3, r4
   2ef04:	b	2ef48 <flatcc_json_parser_unmatched_symbol@@Base+0x188>
   2ef08:	cmp	r4, r2
   2ef0c:	mov	r3, r2
   2ef10:	beq	2ef70 <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
   2ef14:	ldrb	r0, [r2], #1
   2ef18:	cmp	r0, #32
   2ef1c:	bls	2ef74 <flatcc_json_parser_unmatched_symbol@@Base+0x1b4>
   2ef20:	mov	r1, r0
   2ef24:	b	2ee00 <flatcc_json_parser_unmatched_symbol@@Base+0x40>
   2ef28:	ldrb	r2, [r3, #1]
   2ef2c:	cmp	r2, #32
   2ef30:	addhi	r3, r3, #1
   2ef34:	bls	2ee5c <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   2ef38:	b	2ee70 <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
   2ef3c:	ldrb	r2, [r3]
   2ef40:	cmp	r2, #34	; 0x22
   2ef44:	beq	2ef68 <flatcc_json_parser_unmatched_symbol@@Base+0x1a8>
   2ef48:	mov	r1, r3
   2ef4c:	mov	r2, r4
   2ef50:	mov	r3, #20
   2ef54:	mov	r0, r5
   2ef58:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2ef5c:	mov	r3, r0
   2ef60:	b	2ee40 <flatcc_json_parser_unmatched_symbol@@Base+0x80>
   2ef64:	mov	r6, r4
   2ef68:	add	r3, r3, #1
   2ef6c:	b	2ee40 <flatcc_json_parser_unmatched_symbol@@Base+0x80>
   2ef70:	mov	r3, r4
   2ef74:	cmp	r1, #46	; 0x2e
   2ef78:	bne	2ee3c <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   2ef7c:	mov	r1, r3
   2ef80:	mov	r2, r4
   2ef84:	mov	r3, #5
   2ef88:	mov	r0, r5
   2ef8c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2ef90:	mov	r3, r0
   2ef94:	b	2ee3c <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   2ef98:	add	r1, r3, #1
   2ef9c:	sub	r6, r6, r1
   2efa0:	cmp	r6, #1
   2efa4:	ble	2efb8 <flatcc_json_parser_unmatched_symbol@@Base+0x1f8>
   2efa8:	ldrb	r2, [r3, #1]
   2efac:	cmp	r2, #32
   2efb0:	bhi	2efc8 <flatcc_json_parser_unmatched_symbol@@Base+0x208>
   2efb4:	beq	2efd8 <flatcc_json_parser_unmatched_symbol@@Base+0x218>
   2efb8:	mov	r2, r4
   2efbc:	mov	r0, r5
   2efc0:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2efc4:	mov	r1, r0
   2efc8:	mov	r2, r4
   2efcc:	mov	r0, r5
   2efd0:	pop	{r4, r5, r6, lr}
   2efd4:	b	2e3d0 <flatcc_json_parser_generic_json@@Base>
   2efd8:	ldrb	r2, [r3, #2]
   2efdc:	cmp	r2, #32
   2efe0:	addhi	r1, r3, #2
   2efe4:	bls	2efb8 <flatcc_json_parser_unmatched_symbol@@Base+0x1f8>
   2efe8:	b	2efc8 <flatcc_json_parser_unmatched_symbol@@Base+0x208>
   2efec:	mov	r6, r1
   2eff0:	b	2ef48 <flatcc_json_parser_unmatched_symbol@@Base+0x188>

0002eff4 <flatcc_json_parser_integer@@Base>:
   2eff4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2eff8:	cmp	r1, r2
   2effc:	ldr	r9, [sp, #32]
   2f000:	beq	2f0f0 <flatcc_json_parser_integer@@Base+0xfc>
   2f004:	ldrb	ip, [r1]
   2f008:	mov	r8, r0
   2f00c:	sub	ip, ip, #45	; 0x2d
   2f010:	clz	ip, ip
   2f014:	lsr	ip, ip, #5
   2f018:	add	r0, r1, ip
   2f01c:	cmp	r2, r0
   2f020:	str	ip, [r3]
   2f024:	beq	2f0fc <flatcc_json_parser_integer@@Base+0x108>
   2f028:	ldrb	r6, [r1, ip]
   2f02c:	sub	r3, r6, #48	; 0x30
   2f030:	cmp	r3, #9
   2f034:	bhi	2f0a4 <flatcc_json_parser_integer@@Base+0xb0>
   2f038:	uxtb	r6, r6
   2f03c:	mov	r7, #0
   2f040:	subs	r6, r6, #48	; 0x30
   2f044:	add	r3, r0, #1
   2f048:	sbc	r7, r7, #0
   2f04c:	mov	lr, #10
   2f050:	b	2f088 <flatcc_json_parser_integer@@Base+0x94>
   2f054:	ldrb	ip, [r3], #1
   2f058:	sub	sl, ip, #48	; 0x30
   2f05c:	cmp	sl, #9
   2f060:	bhi	2f0ac <flatcc_json_parser_integer@@Base+0xb8>
   2f064:	subs	r4, r4, #48	; 0x30
   2f068:	sbc	r5, r5, #0
   2f06c:	adds	r4, r4, ip
   2f070:	adc	r5, r5, #0
   2f074:	cmp	r5, r7
   2f078:	cmpeq	r4, r6
   2f07c:	mov	r7, r5
   2f080:	mov	r6, r4
   2f084:	bcc	2f0dc <flatcc_json_parser_integer@@Base+0xe8>
   2f088:	umull	r4, r5, r6, lr
   2f08c:	cmp	r3, r2
   2f090:	mla	r5, lr, r7, r5
   2f094:	mov	r0, r3
   2f098:	bne	2f054 <flatcc_json_parser_integer@@Base+0x60>
   2f09c:	strd	r6, [r9]
   2f0a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f0a4:	mov	r6, #0
   2f0a8:	mov	r7, #0
   2f0ac:	cmp	r1, r0
   2f0b0:	beq	2f0f8 <flatcc_json_parser_integer@@Base+0x104>
   2f0b4:	ldrb	r3, [r0]
   2f0b8:	and	r1, r3, #223	; 0xdf
   2f0bc:	cmp	r3, #46	; 0x2e
   2f0c0:	cmpne	r1, #69	; 0x45
   2f0c4:	bne	2f09c <flatcc_json_parser_integer@@Base+0xa8>
   2f0c8:	mov	r1, r0
   2f0cc:	mov	r3, #12
   2f0d0:	mov	r0, r8
   2f0d4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f0d8:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   2f0dc:	mov	r1, r0
   2f0e0:	mov	r3, #8
   2f0e4:	mov	r0, r8
   2f0e8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f0ec:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   2f0f0:	mov	r0, r1
   2f0f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f0f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f0fc:	mov	r6, #0
   2f100:	mov	r7, #0
   2f104:	b	2f09c <flatcc_json_parser_integer@@Base+0xa8>

0002f108 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   2f108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f10c:	sub	sp, sp, #36	; 0x24
   2f110:	mov	r5, r2
   2f114:	ldr	r8, [sp, #72]	; 0x48
   2f118:	mov	r7, r0
   2f11c:	adds	sl, r8, #0
   2f120:	movne	sl, #1
   2f124:	cmp	r1, r2
   2f128:	mov	r9, r3
   2f12c:	beq	2f140 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38>
   2f130:	ldrb	r3, [r1]
   2f134:	cmp	r3, #34	; 0x22
   2f138:	addeq	r4, r1, #1
   2f13c:	beq	2f154 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4c>
   2f140:	mov	r3, #16
   2f144:	mov	r2, r5
   2f148:	mov	r0, r7
   2f14c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2f150:	mov	r4, r0
   2f154:	mov	r2, r5
   2f158:	mov	r1, r4
   2f15c:	mov	r0, r7
   2f160:	bl	2d300 <flatcc_json_parser_string_part@@Base>
   2f164:	cmp	r5, r0
   2f168:	mov	r6, r0
   2f16c:	beq	2f17c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   2f170:	ldrb	r3, [r0]
   2f174:	cmp	r3, #34	; 0x22
   2f178:	beq	2f1a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   2f17c:	mov	ip, #0
   2f180:	cmp	r8, ip
   2f184:	moveq	r3, #31
   2f188:	movne	r3, #32
   2f18c:	mov	r2, r5
   2f190:	mov	r1, r6
   2f194:	mov	r0, r7
   2f198:	str	ip, [r9]
   2f19c:	add	sp, sp, #36	; 0x24
   2f1a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f1a4:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   2f1a8:	sub	fp, r0, r4
   2f1ac:	and	r2, fp, #3
   2f1b0:	lsr	r3, fp, #2
   2f1b4:	cmp	r2, #2
   2f1b8:	add	r3, r3, r3, lsl #1
   2f1bc:	str	r3, [sp]
   2f1c0:	beq	2f2a4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x19c>
   2f1c4:	cmp	r2, #3
   2f1c8:	addeq	r3, r3, #2
   2f1cc:	streq	r3, [sp]
   2f1d0:	mov	r2, #1
   2f1d4:	mov	r1, r2
   2f1d8:	mvn	r3, #0
   2f1dc:	ldr	r0, [r7]
   2f1e0:	bl	27d58 <flatcc_builder_start_vector@@Base>
   2f1e4:	cmp	r0, #0
   2f1e8:	bne	2f2b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   2f1ec:	ldr	r1, [sp]
   2f1f0:	ldr	r0, [r7]
   2f1f4:	bl	27504 <flatcc_builder_extend_vector@@Base>
   2f1f8:	subs	r3, r0, #0
   2f1fc:	str	r3, [sp, #4]
   2f200:	beq	2f2b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   2f204:	cmp	sl, #1
   2f208:	bne	2f300 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f8>
   2f20c:	ldr	r3, [pc, #740]	; 2f4f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f0>
   2f210:	add	r3, pc, r3
   2f214:	add	r3, r3, #1472	; 0x5c0
   2f218:	add	r3, r3, #4
   2f21c:	ldr	r2, [sp]
   2f220:	mov	ip, fp
   2f224:	cmp	r2, #0
   2f228:	mvneq	r2, #0
   2f22c:	str	r2, [sp, #12]
   2f230:	mov	sl, r4
   2f234:	ldr	r2, [sp, #4]
   2f238:	str	r2, [sp, #8]
   2f23c:	cmp	ip, #0
   2f240:	beq	2f3ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e4>
   2f244:	mov	lr, ip
   2f248:	mov	r1, #0
   2f24c:	ldrb	r2, [sl, r1]
   2f250:	ldrb	r0, [r3, r2]
   2f254:	add	r2, sp, #32
   2f258:	add	r2, r2, r1
   2f25c:	cmp	r0, #63	; 0x3f
   2f260:	strb	r0, [r2, #-4]
   2f264:	bls	2f2e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1dc>
   2f268:	cmp	r0, #65	; 0x41
   2f26c:	beq	2f2d8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   2f270:	cmp	r0, #66	; 0x42
   2f274:	movne	r2, r1
   2f278:	beq	2f314 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x20c>
   2f27c:	sub	r2, lr, r2
   2f280:	cmp	r1, #2
   2f284:	beq	2f44c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x344>
   2f288:	cmp	r1, #3
   2f28c:	beq	2f388 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x280>
   2f290:	cmp	r1, #0
   2f294:	beq	2f3dc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d4>
   2f298:	sub	r6, fp, ip
   2f29c:	add	r6, r4, r6
   2f2a0:	b	2f17c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   2f2a4:	ldr	r3, [sp]
   2f2a8:	add	r3, r3, #1
   2f2ac:	str	r3, [sp]
   2f2b0:	b	2f1d0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc8>
   2f2b4:	mov	r3, #0
   2f2b8:	str	r3, [r9]
   2f2bc:	mov	r2, r5
   2f2c0:	mov	r1, r6
   2f2c4:	mov	r0, r7
   2f2c8:	mov	r3, #33	; 0x21
   2f2cc:	add	sp, sp, #36	; 0x24
   2f2d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f2d4:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   2f2d8:	add	sl, sl, #1
   2f2dc:	sub	lr, lr, #1
   2f2e0:	sub	r1, r1, #1
   2f2e4:	add	r1, r1, #1
   2f2e8:	cmp	r1, #3
   2f2ec:	bhi	2f478 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x370>
   2f2f0:	cmp	r1, lr
   2f2f4:	bne	2f24c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x144>
   2f2f8:	mov	r2, #0
   2f2fc:	b	2f280 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x178>
   2f300:	ldr	r3, [pc, #500]	; 2f4fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f4>
   2f304:	add	r3, pc, r3
   2f308:	add	r3, r3, #1728	; 0x6c0
   2f30c:	add	r3, r3, #4
   2f310:	b	2f21c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x114>
   2f314:	add	r2, r1, #1
   2f318:	cmp	r2, #7
   2f31c:	movls	r0, #1
   2f320:	movhi	r0, #0
   2f324:	cmp	lr, r2
   2f328:	movls	r0, #0
   2f32c:	cmp	r0, #0
   2f330:	beq	2f27c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   2f334:	ldrb	r0, [sl, r2]
   2f338:	add	sl, sl, r2
   2f33c:	ldrb	r0, [r3, r0]
   2f340:	sub	r0, r0, #65	; 0x41
   2f344:	cmp	r0, #1
   2f348:	bls	2f364 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x25c>
   2f34c:	b	2f27c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   2f350:	ldrb	r0, [sl, #1]!
   2f354:	ldrb	r0, [r3, r0]
   2f358:	sub	r0, r0, #65	; 0x41
   2f35c:	cmp	r0, #1
   2f360:	bhi	2f27c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   2f364:	add	r2, r2, #1
   2f368:	cmp	lr, r2
   2f36c:	movhi	r0, #1
   2f370:	movls	r0, #0
   2f374:	cmp	r2, #7
   2f378:	movhi	r0, #0
   2f37c:	cmp	r0, #0
   2f380:	bne	2f350 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x248>
   2f384:	b	2f27c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   2f388:	ldrb	r1, [sp, #30]
   2f38c:	ldr	r0, [sp, #12]
   2f390:	lsl	r3, r1, #6
   2f394:	tst	r3, #192	; 0xc0
   2f398:	movne	r3, #1
   2f39c:	moveq	r3, #0
   2f3a0:	cmp	r0, #1
   2f3a4:	orreq	r3, r3, #1
   2f3a8:	cmp	r3, #0
   2f3ac:	bne	2f298 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   2f3b0:	ldrb	r3, [sp, #29]
   2f3b4:	ldrb	r0, [sp, #28]
   2f3b8:	lsr	r1, r1, #2
   2f3bc:	orr	r1, r1, r3, lsl #4
   2f3c0:	lsr	r3, r3, #4
   2f3c4:	orr	r0, r3, r0, lsl #2
   2f3c8:	ldr	r3, [sp, #8]
   2f3cc:	add	r3, r3, #2
   2f3d0:	strb	r1, [r3, #-1]
   2f3d4:	strb	r0, [r3, #-2]
   2f3d8:	str	r3, [sp, #8]
   2f3dc:	sub	r2, fp, r2
   2f3e0:	cmp	fp, r2
   2f3e4:	addne	r6, r4, r2
   2f3e8:	bne	2f17c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   2f3ec:	ldmib	sp, {r2, r3}
   2f3f0:	sub	r1, r3, r2
   2f3f4:	ldr	r3, [sp]
   2f3f8:	cmp	r3, r1
   2f3fc:	bls	2f418 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x310>
   2f400:	ldr	r3, [sp]
   2f404:	ldr	r0, [r7]
   2f408:	sub	r1, r3, r1
   2f40c:	bl	27b2c <flatcc_builder_truncate_vector@@Base>
   2f410:	cmp	r0, #0
   2f414:	bne	2f2b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   2f418:	ldr	r0, [r7]
   2f41c:	bl	28cf4 <flatcc_builder_end_vector@@Base>
   2f420:	cmp	r0, #0
   2f424:	str	r0, [r9]
   2f428:	beq	2f2b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   2f42c:	ldrb	r3, [r6]
   2f430:	cmp	r3, #34	; 0x22
   2f434:	beq	2f4ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3e4>
   2f438:	mov	r2, r5
   2f43c:	mov	r1, r6
   2f440:	mov	r0, r7
   2f444:	mov	r3, #20
   2f448:	b	2f19c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x94>
   2f44c:	ldrb	r3, [sp, #29]
   2f450:	lsl	r1, r3, #4
   2f454:	tst	r1, #240	; 0xf0
   2f458:	bne	2f298 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   2f45c:	ldrb	r1, [sp, #28]
   2f460:	lsr	r3, r3, #4
   2f464:	orr	r3, r3, r1, lsl #2
   2f468:	ldr	r1, [sp, #8]
   2f46c:	strb	r3, [r1], #1
   2f470:	str	r1, [sp, #8]
   2f474:	b	2f3dc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d4>
   2f478:	ldr	r2, [sp, #12]
   2f47c:	cmp	r2, #2
   2f480:	bls	2f298 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   2f484:	ldrb	r1, [sp, #30]
   2f488:	ldrb	ip, [sp, #29]
   2f48c:	subs	r2, r2, #3
   2f490:	str	r1, [sp, #16]
   2f494:	ldrb	r1, [sp, #28]
   2f498:	str	r2, [sp, #12]
   2f49c:	lsr	r0, ip, #4
   2f4a0:	str	r1, [sp, #20]
   2f4a4:	ldr	r2, [sp, #20]
   2f4a8:	ldrb	r1, [sp, #31]
   2f4ac:	add	sl, sl, #4
   2f4b0:	orr	r0, r0, r2, lsl #2
   2f4b4:	ldr	r2, [sp, #16]
   2f4b8:	orr	r1, r1, r2, lsl #6
   2f4bc:	lsr	r2, r2, #2
   2f4c0:	orr	r2, r2, ip, lsl #4
   2f4c4:	sub	ip, lr, #4
   2f4c8:	ldr	lr, [sp, #8]
   2f4cc:	strb	r2, [lr, #1]
   2f4d0:	add	r2, lr, #3
   2f4d4:	strb	r0, [lr]
   2f4d8:	strb	r1, [lr, #2]
   2f4dc:	str	r2, [sp, #8]
   2f4e0:	bne	2f23c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x134>
   2f4e4:	mov	r2, ip
   2f4e8:	b	2f3dc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d4>
   2f4ec:	add	r0, r6, #1
   2f4f0:	add	sp, sp, #36	; 0x24
   2f4f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f4f8:	andeq	r3, r1, r8, lsr #22
   2f4fc:	andeq	r3, r1, r4, lsr sl

0002f500 <flatcc_json_parser_build_string@@Base>:
   2f500:	cmp	r1, r2
   2f504:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f508:	mov	r6, r2
   2f50c:	sub	sp, sp, #8
   2f510:	mov	r5, r0
   2f514:	mov	r8, r3
   2f518:	beq	2f52c <flatcc_json_parser_build_string@@Base+0x2c>
   2f51c:	ldrb	r3, [r1]
   2f520:	cmp	r3, #34	; 0x22
   2f524:	addeq	r7, r1, #1
   2f528:	beq	2f540 <flatcc_json_parser_build_string@@Base+0x40>
   2f52c:	mov	r3, #16
   2f530:	mov	r2, r6
   2f534:	mov	r0, r5
   2f538:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2f53c:	mov	r7, r0
   2f540:	mov	r2, r6
   2f544:	mov	r1, r7
   2f548:	mov	r0, r5
   2f54c:	bl	2d300 <flatcc_json_parser_string_part@@Base>
   2f550:	cmp	r6, r0
   2f554:	mov	r4, r0
   2f558:	beq	2f568 <flatcc_json_parser_build_string@@Base+0x68>
   2f55c:	ldrb	r3, [r0]
   2f560:	cmp	r3, #34	; 0x22
   2f564:	beq	2f660 <flatcc_json_parser_build_string@@Base+0x160>
   2f568:	ldr	r0, [r5]
   2f56c:	bl	27e38 <flatcc_builder_start_string@@Base>
   2f570:	cmp	r0, #0
   2f574:	beq	2f58c <flatcc_json_parser_build_string@@Base+0x8c>
   2f578:	mov	r3, #0
   2f57c:	str	r3, [r8]
   2f580:	mov	r0, r4
   2f584:	add	sp, sp, #8
   2f588:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f58c:	sub	r2, r4, r7
   2f590:	mov	r1, r7
   2f594:	ldr	r0, [r5]
   2f598:	bl	27a08 <flatcc_builder_append_string@@Base>
   2f59c:	cmp	r0, #0
   2f5a0:	beq	2f578 <flatcc_json_parser_build_string@@Base+0x78>
   2f5a4:	cmp	r6, r4
   2f5a8:	beq	2f6a0 <flatcc_json_parser_build_string@@Base+0x1a0>
   2f5ac:	ldrb	r3, [r4]
   2f5b0:	cmp	r3, #34	; 0x22
   2f5b4:	beq	2f688 <flatcc_json_parser_build_string@@Base+0x188>
   2f5b8:	add	sl, sp, #4
   2f5bc:	add	r9, sp, #5
   2f5c0:	b	2f5dc <flatcc_json_parser_build_string@@Base+0xdc>
   2f5c4:	bl	27a08 <flatcc_builder_append_string@@Base>
   2f5c8:	cmp	r0, #0
   2f5cc:	beq	2f578 <flatcc_json_parser_build_string@@Base+0x78>
   2f5d0:	ldrb	r3, [r4]
   2f5d4:	cmp	r3, #34	; 0x22
   2f5d8:	beq	2f688 <flatcc_json_parser_build_string@@Base+0x188>
   2f5dc:	mov	r1, r4
   2f5e0:	mov	r3, sl
   2f5e4:	mov	r2, r6
   2f5e8:	mov	r0, r5
   2f5ec:	bl	2dad4 <flatcc_json_parser_string_escape@@Base>
   2f5f0:	ldrb	r2, [sp, #4]
   2f5f4:	mov	r1, r9
   2f5f8:	mov	r7, r0
   2f5fc:	ldr	r0, [r5]
   2f600:	bl	27a08 <flatcc_builder_append_string@@Base>
   2f604:	mov	r2, r6
   2f608:	mov	r1, r7
   2f60c:	cmp	r0, #0
   2f610:	mov	r0, r5
   2f614:	beq	2f698 <flatcc_json_parser_build_string@@Base+0x198>
   2f618:	bl	2d300 <flatcc_json_parser_string_part@@Base>
   2f61c:	mov	r1, r7
   2f620:	mov	r4, r0
   2f624:	cmp	r6, r4
   2f628:	sub	r2, r0, r7
   2f62c:	ldr	r0, [r5]
   2f630:	bne	2f5c4 <flatcc_json_parser_build_string@@Base+0xc4>
   2f634:	bl	298bc <flatcc_builder_end_string@@Base>
   2f638:	str	r0, [r8]
   2f63c:	mov	r1, r4
   2f640:	mov	r2, r6
   2f644:	mov	r0, r5
   2f648:	mov	r3, #20
   2f64c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2f650:	mov	r4, r0
   2f654:	mov	r0, r4
   2f658:	add	sp, sp, #8
   2f65c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f660:	sub	r2, r0, r7
   2f664:	mov	r1, r7
   2f668:	ldr	r0, [r5]
   2f66c:	bl	29758 <flatcc_builder_create_string@@Base>
   2f670:	str	r0, [r8]
   2f674:	ldrb	r3, [r4]
   2f678:	cmp	r3, #34	; 0x22
   2f67c:	addeq	r4, r4, #1
   2f680:	bne	2f63c <flatcc_json_parser_build_string@@Base+0x13c>
   2f684:	b	2f580 <flatcc_json_parser_build_string@@Base+0x80>
   2f688:	ldr	r0, [r5]
   2f68c:	bl	298bc <flatcc_builder_end_string@@Base>
   2f690:	str	r0, [r8]
   2f694:	b	2f674 <flatcc_json_parser_build_string@@Base+0x174>
   2f698:	mov	r4, r7
   2f69c:	b	2f578 <flatcc_json_parser_build_string@@Base+0x78>
   2f6a0:	ldr	r0, [r5]
   2f6a4:	b	2f634 <flatcc_json_parser_build_string@@Base+0x134>

0002f6a8 <flatcc_json_parser_prepare_unions@@Base>:
   2f6a8:	push	{r4, r5, r6, r7, r8, lr}
   2f6ac:	mov	r5, r0
   2f6b0:	add	r0, r3, r3, lsl #1
   2f6b4:	mov	r6, r1
   2f6b8:	lsl	r1, r0, #3
   2f6bc:	add	r1, r1, #8
   2f6c0:	ldr	r0, [r5]
   2f6c4:	ldr	r7, [sp, #24]
   2f6c8:	mov	r4, r3
   2f6cc:	mov	r8, r2
   2f6d0:	bl	26ad8 <flatcc_builder_enter_user_frame@@Base>
   2f6d4:	cmp	r0, #0
   2f6d8:	str	r0, [r7]
   2f6dc:	beq	2f6f8 <flatcc_json_parser_prepare_unions@@Base+0x50>
   2f6e0:	mov	r1, r0
   2f6e4:	ldr	r0, [r5]
   2f6e8:	bl	26c20 <flatcc_builder_get_user_frame_ptr@@Base>
   2f6ec:	str	r4, [r0]
   2f6f0:	mov	r0, r6
   2f6f4:	pop	{r4, r5, r6, r7, r8, pc}
   2f6f8:	mov	r2, r8
   2f6fc:	mov	r1, r6
   2f700:	mov	r0, r5
   2f704:	mov	r3, #33	; 0x21
   2f708:	pop	{r4, r5, r6, r7, r8, lr}
   2f70c:	b	2d2d4 <flatcc_json_parser_set_error@@Base>

0002f710 <flatcc_json_parser_finalize_unions@@Base>:
   2f710:	push	{r4, r5, r6, r7, r8, lr}
   2f714:	mov	r4, r0
   2f718:	mov	r6, r1
   2f71c:	ldr	r0, [r0]
   2f720:	mov	r1, r3
   2f724:	mov	r5, r3
   2f728:	mov	r7, r2
   2f72c:	bl	26c20 <flatcc_builder_get_user_frame_ptr@@Base>
   2f730:	ldr	r3, [r0, #4]
   2f734:	cmp	r3, #0
   2f738:	beq	2f754 <flatcc_json_parser_finalize_unions@@Base+0x44>
   2f73c:	mov	r1, r6
   2f740:	mov	r2, r7
   2f744:	mov	r3, #27
   2f748:	mov	r0, r4
   2f74c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2f750:	mov	r6, r0
   2f754:	mov	r1, r5
   2f758:	ldr	r0, [r4]
   2f75c:	bl	26bcc <flatcc_builder_exit_user_frame_at@@Base>
   2f760:	mov	r0, r6
   2f764:	pop	{r4, r5, r6, r7, r8, pc}

0002f768 <flatcc_json_parser_union@@Base>:
   2f768:	push	{r4, r5, r6, r7, r8, lr}
   2f76c:	sub	sp, sp, #16
   2f770:	mov	r5, r0
   2f774:	mov	r8, r1
   2f778:	ldr	r0, [r0]
   2f77c:	ldr	r1, [sp, #44]	; 0x2c
   2f780:	mov	r4, r3
   2f784:	mov	r6, r2
   2f788:	ldrh	r7, [sp, #40]	; 0x28
   2f78c:	bl	26c20 <flatcc_builder_get_user_frame_ptr@@Base>
   2f790:	add	r4, r4, r4, lsl #1
   2f794:	add	r4, r0, r4, lsl #3
   2f798:	ldr	r3, [r4, #8]
   2f79c:	cmp	r3, #0
   2f7a0:	beq	2f7c8 <flatcc_json_parser_union@@Base+0x60>
   2f7a4:	mov	r2, r6
   2f7a8:	mov	r1, r8
   2f7ac:	mov	r0, r5
   2f7b0:	mov	r3, #28
   2f7b4:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2f7b8:	mov	r4, r0
   2f7bc:	mov	r0, r4
   2f7c0:	add	sp, sp, #16
   2f7c4:	pop	{r4, r5, r6, r7, r8, pc}
   2f7c8:	ldrb	r3, [r4, #20]
   2f7cc:	cmp	r3, #0
   2f7d0:	beq	2f874 <flatcc_json_parser_union@@Base+0x10c>
   2f7d4:	ldrb	r3, [r4, #21]
   2f7d8:	cmp	r3, #0
   2f7dc:	strb	r3, [sp, #8]
   2f7e0:	beq	2f850 <flatcc_json_parser_union@@Base+0xe8>
   2f7e4:	ldr	r2, [r0, #4]
   2f7e8:	mov	r1, r8
   2f7ec:	sub	r2, r2, #1
   2f7f0:	str	r2, [r0, #4]
   2f7f4:	add	r0, sp, #12
   2f7f8:	str	r0, [sp]
   2f7fc:	mov	r2, r6
   2f800:	mov	r0, r5
   2f804:	ldr	ip, [sp, #48]	; 0x30
   2f808:	blx	ip
   2f80c:	add	r3, sp, #8
   2f810:	cmp	r6, r0
   2f814:	mov	r4, r0
   2f818:	beq	2f7bc <flatcc_json_parser_union@@Base+0x54>
   2f81c:	mov	r1, r7
   2f820:	ldm	r3, {r2, r3}
   2f824:	ldr	r0, [r5]
   2f828:	bl	29da4 <flatcc_builder_table_add_union@@Base>
   2f82c:	cmp	r0, #0
   2f830:	beq	2f7bc <flatcc_json_parser_union@@Base+0x54>
   2f834:	mov	r1, r4
   2f838:	mov	r2, r6
   2f83c:	mov	r0, r5
   2f840:	mov	r3, #28
   2f844:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2f848:	mov	r4, r0
   2f84c:	b	2f7bc <flatcc_json_parser_union@@Base+0x54>
   2f850:	mov	r2, r6
   2f854:	mov	r1, r8
   2f858:	mov	r0, r5
   2f85c:	mov	r3, #25
   2f860:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2f864:	mov	r4, r0
   2f868:	mov	r0, r4
   2f86c:	add	sp, sp, #16
   2f870:	pop	{r4, r5, r6, r7, r8, pc}
   2f874:	ldr	r3, [r0, #4]
   2f878:	ldr	lr, [r5, #16]
   2f87c:	ldr	ip, [r5, #4]
   2f880:	add	r3, r3, #1
   2f884:	str	r3, [r0, #4]
   2f888:	mov	r2, r6
   2f88c:	str	lr, [r4, #16]
   2f890:	str	ip, [r4, #12]
   2f894:	str	r8, [r4, #8]
   2f898:	mov	r1, r8
   2f89c:	mov	r0, r5
   2f8a0:	bl	2e3d0 <flatcc_json_parser_generic_json@@Base>
   2f8a4:	mov	r4, r0
   2f8a8:	b	2f7bc <flatcc_json_parser_union@@Base+0x54>

0002f8ac <flatcc_json_parser_union_type@@Base>:
   2f8ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f8b0:	sub	sp, sp, #36	; 0x24
   2f8b4:	mov	r4, r3
   2f8b8:	ldrh	r3, [sp, #72]	; 0x48
   2f8bc:	mov	r5, r0
   2f8c0:	mov	sl, r1
   2f8c4:	ldr	r0, [r0]
   2f8c8:	ldr	r1, [sp, #76]	; 0x4c
   2f8cc:	str	r3, [sp, #12]
   2f8d0:	mov	r7, r2
   2f8d4:	bl	26c20 <flatcc_builder_get_user_frame_ptr@@Base>
   2f8d8:	add	r4, r4, r4, lsl #1
   2f8dc:	lsl	r4, r4, #3
   2f8e0:	add	fp, r0, #8
   2f8e4:	add	r6, fp, r4
   2f8e8:	ldrb	r3, [r6, #12]
   2f8ec:	cmp	r3, #0
   2f8f0:	bne	2f9fc <flatcc_json_parser_union_type@@Base+0x150>
   2f8f4:	mov	r9, r0
   2f8f8:	mov	r1, #0
   2f8fc:	mov	r0, #0
   2f900:	mov	r2, #1
   2f904:	cmp	sl, r7
   2f908:	strb	r2, [r6, #12]
   2f90c:	str	r3, [sp, #20]
   2f910:	strd	r0, [sp, #24]
   2f914:	strb	r3, [r6, #13]
   2f918:	beq	2fa20 <flatcc_json_parser_union_type@@Base+0x174>
   2f91c:	add	r3, sp, #24
   2f920:	str	r3, [sp]
   2f924:	mov	r2, r7
   2f928:	add	r3, sp, #20
   2f92c:	mov	r1, sl
   2f930:	mov	r0, r5
   2f934:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   2f938:	cmp	sl, r0
   2f93c:	mov	r8, r0
   2f940:	beq	2fa24 <flatcc_json_parser_union_type@@Base+0x178>
   2f944:	ldr	r3, [sp, #20]
   2f948:	cmp	r3, #0
   2f94c:	bne	2fa64 <flatcc_json_parser_union_type@@Base+0x1b8>
   2f950:	ldrd	r2, [sp, #24]
   2f954:	cmp	r3, #0
   2f958:	cmpeq	r2, #255	; 0xff
   2f95c:	strbls	r2, [r6, #13]
   2f960:	bhi	2faa0 <flatcc_json_parser_union_type@@Base+0x1f4>
   2f964:	ldr	r1, [fp, r4]
   2f968:	cmp	r1, #0
   2f96c:	beq	2fa88 <flatcc_json_parser_union_type@@Base+0x1dc>
   2f970:	ldr	r3, [r9, #4]
   2f974:	cmp	r3, #0
   2f978:	beq	2fabc <flatcc_json_parser_union_type@@Base+0x210>
   2f97c:	ldr	r0, [r6, #8]
   2f980:	ldr	r2, [r6, #4]
   2f984:	sub	r3, r3, #1
   2f988:	str	r3, [r9, #4]
   2f98c:	ldr	sl, [r5, #16]
   2f990:	ldr	r9, [r5, #4]
   2f994:	str	r0, [r5, #16]
   2f998:	str	r2, [r5, #4]
   2f99c:	ldrb	ip, [r6, #13]
   2f9a0:	add	r4, sp, #32
   2f9a4:	add	r2, sp, #28
   2f9a8:	str	r2, [sp]
   2f9ac:	mov	r3, ip
   2f9b0:	strb	ip, [r4, #-8]!
   2f9b4:	mov	r2, r7
   2f9b8:	mov	r0, r5
   2f9bc:	ldr	ip, [sp, #84]	; 0x54
   2f9c0:	blx	ip
   2f9c4:	cmp	r7, r0
   2f9c8:	moveq	r8, r7
   2f9cc:	beq	2f9f0 <flatcc_json_parser_union_type@@Base+0x144>
   2f9d0:	ldr	r1, [sp, #12]
   2f9d4:	ldm	r4, {r2, r3}
   2f9d8:	ldr	r0, [r5]
   2f9dc:	bl	29da4 <flatcc_builder_table_add_union@@Base>
   2f9e0:	cmp	r0, #0
   2f9e4:	streq	sl, [r5, #16]
   2f9e8:	streq	r9, [r5, #4]
   2f9ec:	bne	2fa48 <flatcc_json_parser_union_type@@Base+0x19c>
   2f9f0:	mov	r0, r8
   2f9f4:	add	sp, sp, #36	; 0x24
   2f9f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f9fc:	mov	r2, r7
   2fa00:	mov	r1, sl
   2fa04:	mov	r0, r5
   2fa08:	mov	r3, #28
   2fa0c:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2fa10:	mov	r8, r0
   2fa14:	mov	r0, r8
   2fa18:	add	sp, sp, #36	; 0x24
   2fa1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fa20:	mov	r8, r7
   2fa24:	add	r3, r6, #13
   2fa28:	mov	r1, r8
   2fa2c:	str	r3, [sp]
   2fa30:	mov	r2, r7
   2fa34:	ldr	r3, [sp, #80]	; 0x50
   2fa38:	mov	r0, r5
   2fa3c:	bl	2d4ec <flatcc_json_parser_space_ext@@Base+0x124>
   2fa40:	mov	r8, r0
   2fa44:	b	2f964 <flatcc_json_parser_union_type@@Base+0xb8>
   2fa48:	mov	r1, r8
   2fa4c:	mov	r2, r7
   2fa50:	mov	r0, r5
   2fa54:	mov	r3, #28
   2fa58:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2fa5c:	mov	r8, r0
   2fa60:	b	2f9f0 <flatcc_json_parser_union_type@@Base+0x144>
   2fa64:	mov	r1, r0
   2fa68:	mov	r3, #8
   2fa6c:	mov	r2, r7
   2fa70:	mov	r0, r5
   2fa74:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2fa78:	mov	r8, r0
   2fa7c:	cmp	sl, r8
   2fa80:	bne	2f964 <flatcc_json_parser_union_type@@Base+0xb8>
   2fa84:	b	2fa24 <flatcc_json_parser_union_type@@Base+0x178>
   2fa88:	ldrb	r2, [r6, #13]
   2fa8c:	ldr	r3, [r9, #4]
   2fa90:	cmp	r2, #0
   2fa94:	addne	r3, r3, #1
   2fa98:	str	r3, [r9, #4]
   2fa9c:	b	2f9f0 <flatcc_json_parser_union_type@@Base+0x144>
   2faa0:	mov	r1, r0
   2faa4:	mov	r3, #7
   2faa8:	mov	r2, r7
   2faac:	mov	r0, r5
   2fab0:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2fab4:	mov	r8, r0
   2fab8:	b	2fa7c <flatcc_json_parser_union_type@@Base+0x1d0>
   2fabc:	ldr	r3, [pc, #32]	; 2fae4 <flatcc_json_parser_union_type@@Base+0x238>
   2fac0:	ldr	r1, [pc, #32]	; 2fae8 <flatcc_json_parser_union_type@@Base+0x23c>
   2fac4:	add	r3, pc, r3
   2fac8:	ldr	r0, [pc, #28]	; 2faec <flatcc_json_parser_union_type@@Base+0x240>
   2facc:	add	r3, r3, #1984	; 0x7c0
   2fad0:	ldr	r2, [pc, #24]	; 2faf0 <flatcc_json_parser_union_type@@Base+0x244>
   2fad4:	add	r3, r3, #4
   2fad8:	add	r1, pc, r1
   2fadc:	add	r0, pc, r0
   2fae0:	bl	14610 <__assert_fail@plt>
   2fae4:	andeq	r3, r1, r4, ror r2
   2fae8:	andeq	r3, r1, ip, ror #28
   2faec:	andeq	r3, r1, ip, asr #29
   2faf0:	andeq	r0, r0, r5, asr #7

0002faf4 <flatcc_json_parser_union_vector@@Base>:
   2faf4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2faf8:	mov	r5, r0
   2fafc:	mov	r6, r1
   2fb00:	ldr	r0, [r0]
   2fb04:	ldr	r1, [sp, #36]	; 0x24
   2fb08:	mov	r4, r3
   2fb0c:	mov	r9, r2
   2fb10:	ldrh	r7, [sp, #32]
   2fb14:	ldr	r8, [sp, #40]	; 0x28
   2fb18:	bl	26c20 <flatcc_builder_get_user_frame_ptr@@Base>
   2fb1c:	add	r3, r4, r4, lsl #1
   2fb20:	lsl	r3, r3, #3
   2fb24:	add	ip, r0, #8
   2fb28:	add	r1, ip, r3
   2fb2c:	ldr	r2, [ip, r3]
   2fb30:	cmp	r2, #0
   2fb34:	beq	2fb50 <flatcc_json_parser_union_vector@@Base+0x5c>
   2fb38:	mov	r2, r9
   2fb3c:	mov	r1, r6
   2fb40:	mov	r0, r5
   2fb44:	mov	r3, #28
   2fb48:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2fb4c:	b	2d2d4 <flatcc_json_parser_set_error@@Base>
   2fb50:	ldrb	r2, [r1, #12]
   2fb54:	cmp	r2, #0
   2fb58:	beq	2fb90 <flatcc_json_parser_union_vector@@Base+0x9c>
   2fb5c:	ldr	r3, [r0, #4]
   2fb60:	mov	r2, r9
   2fb64:	sub	r3, r3, #1
   2fb68:	str	r3, [r0, #4]
   2fb6c:	ldr	r3, [r1, #20]
   2fb70:	str	r8, [sp, #40]	; 0x28
   2fb74:	str	r7, [sp, #36]	; 0x24
   2fb78:	ldr	ip, [r1, #16]
   2fb7c:	mov	r0, r5
   2fb80:	mov	r1, r6
   2fb84:	str	ip, [sp, #32]
   2fb88:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2fb8c:	b	2d6e0 <flatcc_json_parser_space_ext@@Base+0x318>
   2fb90:	ldr	lr, [r0, #4]
   2fb94:	ldr	r4, [r5, #16]
   2fb98:	add	lr, lr, #1
   2fb9c:	str	lr, [r0, #4]
   2fba0:	ldr	r0, [r5, #4]
   2fba4:	mov	r2, r9
   2fba8:	stmib	r1, {r0, r4}
   2fbac:	mov	r1, r6
   2fbb0:	str	r6, [ip, r3]
   2fbb4:	mov	r0, r5
   2fbb8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2fbbc:	b	2e3d0 <flatcc_json_parser_generic_json@@Base>

0002fbc0 <flatcc_json_parser_union_type_vector@@Base>:
   2fbc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fbc4:	sub	sp, sp, #60	; 0x3c
   2fbc8:	mov	r7, r3
   2fbcc:	ldrh	r3, [sp, #96]	; 0x60
   2fbd0:	mov	r6, r0
   2fbd4:	mov	r5, r1
   2fbd8:	ldr	r0, [r0]
   2fbdc:	ldr	r1, [sp, #100]	; 0x64
   2fbe0:	str	r3, [sp, #28]
   2fbe4:	mov	r4, r2
   2fbe8:	bl	26c20 <flatcc_builder_get_user_frame_ptr@@Base>
   2fbec:	add	r7, r7, r7, lsl #1
   2fbf0:	lsl	r3, r7, #3
   2fbf4:	str	r3, [sp, #32]
   2fbf8:	add	r0, r0, #8
   2fbfc:	add	r3, r0, r3
   2fc00:	str	r3, [sp, #24]
   2fc04:	ldrb	r3, [r3, #12]
   2fc08:	cmp	r3, #0
   2fc0c:	bne	2fcd8 <flatcc_json_parser_union_type_vector@@Base+0x118>
   2fc10:	ldr	r3, [sp, #24]
   2fc14:	mov	r2, #1
   2fc18:	mov	r1, r2
   2fc1c:	strb	r2, [r3, #12]
   2fc20:	mvn	r3, #0
   2fc24:	ldr	r0, [r6]
   2fc28:	bl	27d58 <flatcc_builder_start_vector@@Base>
   2fc2c:	cmp	r0, #0
   2fc30:	bne	2fcbc <flatcc_json_parser_union_type_vector@@Base+0xfc>
   2fc34:	cmp	r5, r4
   2fc38:	beq	2fc48 <flatcc_json_parser_union_type_vector@@Base+0x88>
   2fc3c:	ldrb	r3, [r5]
   2fc40:	cmp	r3, #91	; 0x5b
   2fc44:	beq	2fcf4 <flatcc_json_parser_union_type_vector@@Base+0x134>
   2fc48:	mov	r1, r5
   2fc4c:	mov	r3, #22
   2fc50:	mov	r2, r4
   2fc54:	mov	r0, r6
   2fc58:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2fc5c:	mov	r5, r0
   2fc60:	ldr	r0, [r6]
   2fc64:	bl	28df0 <flatcc_builder_vector_count@@Base>
   2fc68:	ldr	r3, [sp, #24]
   2fc6c:	mov	r1, r0
   2fc70:	str	r0, [r3, #16]
   2fc74:	mov	r7, r0
   2fc78:	ldr	r0, [r6]
   2fc7c:	bl	26ad8 <flatcc_builder_enter_user_frame@@Base>
   2fc80:	mov	r1, r0
   2fc84:	mov	r8, r0
   2fc88:	ldr	r0, [r6]
   2fc8c:	bl	26c20 <flatcc_builder_get_user_frame_ptr@@Base>
   2fc90:	mov	r9, r0
   2fc94:	ldr	r0, [r6]
   2fc98:	bl	28dfc <flatcc_builder_vector_edit@@Base>
   2fc9c:	mov	r2, r7
   2fca0:	mov	r1, r0
   2fca4:	mov	r0, r9
   2fca8:	bl	14544 <memcpy@plt>
   2fcac:	ldr	r0, [r6]
   2fcb0:	bl	28cf4 <flatcc_builder_end_vector@@Base>
   2fcb4:	subs	r9, r0, #0
   2fcb8:	bne	2fff4 <flatcc_json_parser_union_type_vector@@Base+0x434>
   2fcbc:	mov	r2, r4
   2fcc0:	mov	r1, r5
   2fcc4:	mov	r0, r6
   2fcc8:	mov	r3, #33	; 0x21
   2fccc:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2fcd0:	add	sp, sp, #60	; 0x3c
   2fcd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fcd8:	mov	r2, r4
   2fcdc:	mov	r1, r5
   2fce0:	mov	r0, r6
   2fce4:	mov	r3, #28
   2fce8:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2fcec:	add	sp, sp, #60	; 0x3c
   2fcf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fcf4:	add	r1, r5, #1
   2fcf8:	sub	r3, r4, r1
   2fcfc:	cmp	r3, #1
   2fd00:	ble	2fd18 <flatcc_json_parser_union_type_vector@@Base+0x158>
   2fd04:	ldrb	r3, [r5, #1]
   2fd08:	cmp	r3, #32
   2fd0c:	movhi	r5, r1
   2fd10:	bhi	2fd28 <flatcc_json_parser_union_type_vector@@Base+0x168>
   2fd14:	beq	300cc <flatcc_json_parser_union_type_vector@@Base+0x50c>
   2fd18:	mov	r2, r4
   2fd1c:	mov	r0, r6
   2fd20:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2fd24:	mov	r5, r0
   2fd28:	cmp	r4, r5
   2fd2c:	beq	2fd3c <flatcc_json_parser_union_type_vector@@Base+0x17c>
   2fd30:	ldrb	r3, [r5]
   2fd34:	cmp	r3, #93	; 0x5d
   2fd38:	beq	2ff60 <flatcc_json_parser_union_type_vector@@Base+0x3a0>
   2fd3c:	add	fp, sp, #44	; 0x2c
   2fd40:	str	fp, [sp, #20]
   2fd44:	ldr	fp, [sp, #112]	; 0x70
   2fd48:	add	r3, sp, #43	; 0x2b
   2fd4c:	mov	r9, #1
   2fd50:	mov	r7, #0
   2fd54:	str	r3, [sp, #36]	; 0x24
   2fd58:	add	r3, sp, #48	; 0x30
   2fd5c:	str	r3, [sp, #16]
   2fd60:	mov	r1, r9
   2fd64:	ldr	r0, [r6]
   2fd68:	bl	27504 <flatcc_builder_extend_vector@@Base>
   2fd6c:	subs	r8, r0, #0
   2fd70:	beq	2fcbc <flatcc_json_parser_union_type_vector@@Base+0xfc>
   2fd74:	mov	r2, #0
   2fd78:	mov	r3, #0
   2fd7c:	cmp	r4, r5
   2fd80:	strd	r2, [sp, #48]	; 0x30
   2fd84:	str	r7, [sp, #44]	; 0x2c
   2fd88:	strb	r7, [sp, #43]	; 0x2b
   2fd8c:	beq	2fec4 <flatcc_json_parser_union_type_vector@@Base+0x304>
   2fd90:	ldr	r3, [sp, #16]
   2fd94:	mov	r2, r4
   2fd98:	str	r3, [sp]
   2fd9c:	mov	r1, r5
   2fda0:	ldr	r3, [sp, #20]
   2fda4:	mov	r0, r6
   2fda8:	bl	2eff4 <flatcc_json_parser_integer@@Base>
   2fdac:	cmp	r0, r5
   2fdb0:	mov	sl, r0
   2fdb4:	beq	2fec4 <flatcc_json_parser_union_type_vector@@Base+0x304>
   2fdb8:	ldr	r3, [sp, #44]	; 0x2c
   2fdbc:	cmp	r3, #0
   2fdc0:	bne	2fea4 <flatcc_json_parser_union_type_vector@@Base+0x2e4>
   2fdc4:	ldrd	r0, [sp, #48]	; 0x30
   2fdc8:	cmp	r1, #0
   2fdcc:	cmpeq	r0, #255	; 0xff
   2fdd0:	uxtbls	r0, r0
   2fdd4:	strbls	r0, [sp, #43]	; 0x2b
   2fdd8:	bhi	2ff98 <flatcc_json_parser_union_type_vector@@Base+0x3d8>
   2fddc:	blx	fp
   2fde0:	cmp	r0, #0
   2fde4:	ldrbne	r2, [sp, #43]	; 0x2b
   2fde8:	bne	2fe00 <flatcc_json_parser_union_type_vector@@Base+0x240>
   2fdec:	ldr	r3, [r6, #8]
   2fdf0:	tst	r3, #1
   2fdf4:	beq	2ffdc <flatcc_json_parser_union_type_vector@@Base+0x41c>
   2fdf8:	mov	r2, r7
   2fdfc:	strb	r0, [sp, #43]	; 0x2b
   2fe00:	sub	r3, r4, sl
   2fe04:	cmp	r3, #1
   2fe08:	strb	r2, [r8]
   2fe0c:	ble	2fe20 <flatcc_json_parser_union_type_vector@@Base+0x260>
   2fe10:	ldrb	r3, [sl]
   2fe14:	cmp	r3, #32
   2fe18:	bhi	2fe34 <flatcc_json_parser_union_type_vector@@Base+0x274>
   2fe1c:	beq	2fef8 <flatcc_json_parser_union_type_vector@@Base+0x338>
   2fe20:	mov	r1, sl
   2fe24:	mov	r2, r4
   2fe28:	mov	r0, r6
   2fe2c:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2fe30:	mov	sl, r0
   2fe34:	cmp	r4, sl
   2fe38:	beq	2ff10 <flatcc_json_parser_union_type_vector@@Base+0x350>
   2fe3c:	ldrb	r3, [sl]
   2fe40:	cmp	r3, #44	; 0x2c
   2fe44:	beq	2ff18 <flatcc_json_parser_union_type_vector@@Base+0x358>
   2fe48:	cmp	r3, #93	; 0x5d
   2fe4c:	beq	2fe6c <flatcc_json_parser_union_type_vector@@Base+0x2ac>
   2fe50:	mov	r1, sl
   2fe54:	mov	r3, #9
   2fe58:	mov	r2, r4
   2fe5c:	mov	r0, r6
   2fe60:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2fe64:	mov	r5, r0
   2fe68:	b	2fc60 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2fe6c:	add	r5, sl, #1
   2fe70:	sub	r3, r4, r5
   2fe74:	cmp	r3, #1
   2fe78:	ble	2fe8c <flatcc_json_parser_union_type_vector@@Base+0x2cc>
   2fe7c:	ldrb	r3, [sl, #1]
   2fe80:	cmp	r3, #32
   2fe84:	bhi	2fc60 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2fe88:	beq	2ffb4 <flatcc_json_parser_union_type_vector@@Base+0x3f4>
   2fe8c:	mov	r1, r5
   2fe90:	mov	r2, r4
   2fe94:	mov	r0, r6
   2fe98:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2fe9c:	mov	r5, r0
   2fea0:	b	2fc60 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2fea4:	mov	r1, r0
   2fea8:	mov	r3, #8
   2feac:	mov	r2, r4
   2feb0:	mov	r0, r6
   2feb4:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2feb8:	mov	sl, r0
   2febc:	cmp	sl, r5
   2fec0:	bne	2fef0 <flatcc_json_parser_union_type_vector@@Base+0x330>
   2fec4:	ldr	r3, [sp, #36]	; 0x24
   2fec8:	mov	r2, r4
   2fecc:	str	r3, [sp]
   2fed0:	mov	r1, r5
   2fed4:	ldr	r3, [sp, #104]	; 0x68
   2fed8:	mov	r0, r6
   2fedc:	bl	2d4ec <flatcc_json_parser_space_ext@@Base+0x124>
   2fee0:	cmp	r4, r0
   2fee4:	cmpne	r0, r5
   2fee8:	mov	sl, r0
   2feec:	beq	300c4 <flatcc_json_parser_union_type_vector@@Base+0x504>
   2fef0:	ldrb	r0, [sp, #43]	; 0x2b
   2fef4:	b	2fddc <flatcc_json_parser_union_type_vector@@Base+0x21c>
   2fef8:	ldrb	r3, [sl, #1]
   2fefc:	cmp	r3, #32
   2ff00:	addhi	sl, sl, #1
   2ff04:	bls	2fe20 <flatcc_json_parser_union_type_vector@@Base+0x260>
   2ff08:	cmp	r4, sl
   2ff0c:	bne	2fe3c <flatcc_json_parser_union_type_vector@@Base+0x27c>
   2ff10:	mov	r5, r4
   2ff14:	b	2fc60 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2ff18:	add	r5, sl, #1
   2ff1c:	sub	r3, r4, r5
   2ff20:	cmp	r3, #1
   2ff24:	ble	2ff38 <flatcc_json_parser_union_type_vector@@Base+0x378>
   2ff28:	ldrb	r3, [sl, #1]
   2ff2c:	cmp	r3, #32
   2ff30:	bhi	2ff4c <flatcc_json_parser_union_type_vector@@Base+0x38c>
   2ff34:	beq	2ffc8 <flatcc_json_parser_union_type_vector@@Base+0x408>
   2ff38:	mov	r1, r5
   2ff3c:	mov	r2, r4
   2ff40:	mov	r0, r6
   2ff44:	bl	2d3c8 <flatcc_json_parser_space_ext@@Base>
   2ff48:	mov	r5, r0
   2ff4c:	cmp	r4, r5
   2ff50:	beq	300a8 <flatcc_json_parser_union_type_vector@@Base+0x4e8>
   2ff54:	ldrb	r3, [r5]
   2ff58:	cmp	r3, #93	; 0x5d
   2ff5c:	bne	2fd60 <flatcc_json_parser_union_type_vector@@Base+0x1a0>
   2ff60:	add	r1, r5, #1
   2ff64:	sub	r3, r4, r1
   2ff68:	cmp	r3, #1
   2ff6c:	ble	2fe90 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   2ff70:	ldrb	r3, [r5, #1]
   2ff74:	cmp	r3, #32
   2ff78:	movhi	r5, r1
   2ff7c:	bhi	2fc60 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2ff80:	bne	2fe90 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   2ff84:	ldrb	r3, [r5, #2]
   2ff88:	cmp	r3, #32
   2ff8c:	addhi	r5, r5, #2
   2ff90:	bls	2fe90 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   2ff94:	b	2fc60 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2ff98:	mov	r1, sl
   2ff9c:	mov	r3, #7
   2ffa0:	mov	r2, r4
   2ffa4:	mov	r0, r6
   2ffa8:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2ffac:	mov	sl, r0
   2ffb0:	b	2febc <flatcc_json_parser_union_type_vector@@Base+0x2fc>
   2ffb4:	ldrb	r3, [sl, #2]
   2ffb8:	cmp	r3, #32
   2ffbc:	addhi	r5, sl, #2
   2ffc0:	bls	2fe8c <flatcc_json_parser_union_type_vector@@Base+0x2cc>
   2ffc4:	b	2fc60 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2ffc8:	ldrb	r3, [sl, #2]
   2ffcc:	cmp	r3, #32
   2ffd0:	addhi	r5, sl, #2
   2ffd4:	bls	2ff38 <flatcc_json_parser_union_type_vector@@Base+0x378>
   2ffd8:	b	2ff4c <flatcc_json_parser_union_type_vector@@Base+0x38c>
   2ffdc:	mov	r2, r4
   2ffe0:	mov	r1, sl
   2ffe4:	mov	r0, r6
   2ffe8:	mov	r3, #15
   2ffec:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   2fff0:	b	2fcd0 <flatcc_json_parser_union_type_vector@@Base+0x110>
   2fff4:	ldr	r3, [sp, #28]
   2fff8:	ldr	r0, [r6]
   2fffc:	sub	r1, r3, #1
   30000:	bl	29c18 <flatcc_builder_table_add_offset@@Base>
   30004:	cmp	r0, #0
   30008:	beq	2fcbc <flatcc_json_parser_union_type_vector@@Base+0xfc>
   3000c:	str	r9, [r0]
   30010:	ldr	r1, [sp, #100]	; 0x64
   30014:	ldr	r0, [r6]
   30018:	bl	26c20 <flatcc_builder_get_user_frame_ptr@@Base>
   3001c:	ldr	r1, [sp, #32]
   30020:	add	r3, r0, #8
   30024:	mov	r2, r0
   30028:	add	r0, r3, r1
   3002c:	ldr	r1, [r3, r1]
   30030:	ldr	r3, [r2, #4]
   30034:	cmp	r1, #0
   30038:	addeq	r3, r3, #1
   3003c:	str	r8, [r0, #20]
   30040:	moveq	r0, r5
   30044:	streq	r3, [r2, #4]
   30048:	beq	2fcd0 <flatcc_json_parser_union_type_vector@@Base+0x110>
   3004c:	cmp	r3, #0
   30050:	beq	300e0 <flatcc_json_parser_union_type_vector@@Base+0x520>
   30054:	sub	r3, r3, #1
   30058:	ldmib	r0, {r0, ip}
   3005c:	str	r3, [r2, #4]
   30060:	ldr	r2, [sp, #108]	; 0x6c
   30064:	str	r7, [sp]
   30068:	str	r2, [sp, #8]
   3006c:	ldr	r2, [sp, #28]
   30070:	mov	r3, r8
   30074:	str	r2, [sp, #4]
   30078:	mov	r2, r4
   3007c:	ldr	r8, [r6, #16]
   30080:	ldr	r7, [r6, #4]
   30084:	str	ip, [r6, #16]
   30088:	str	r0, [r6, #4]
   3008c:	mov	r0, r6
   30090:	bl	2d6e0 <flatcc_json_parser_space_ext@@Base+0x318>
   30094:	cmp	r4, r0
   30098:	strne	r8, [r6, #16]
   3009c:	strne	r7, [r6, #4]
   300a0:	movne	r0, r5
   300a4:	b	2fcd0 <flatcc_json_parser_union_type_vector@@Base+0x110>
   300a8:	mov	r3, #9
   300ac:	mov	r2, r4
   300b0:	mov	r1, r4
   300b4:	mov	r0, r6
   300b8:	bl	2d2d4 <flatcc_json_parser_set_error@@Base>
   300bc:	mov	r5, r0
   300c0:	b	2fc60 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   300c4:	mov	r5, r0
   300c8:	b	2fcbc <flatcc_json_parser_union_type_vector@@Base+0xfc>
   300cc:	ldrb	r3, [r5, #2]
   300d0:	cmp	r3, #32
   300d4:	addhi	r5, r5, #2
   300d8:	bls	2fd18 <flatcc_json_parser_union_type_vector@@Base+0x158>
   300dc:	b	2fd28 <flatcc_json_parser_union_type_vector@@Base+0x168>
   300e0:	ldr	r3, [pc, #32]	; 30108 <flatcc_json_parser_union_type_vector@@Base+0x548>
   300e4:	ldr	r1, [pc, #32]	; 3010c <flatcc_json_parser_union_type_vector@@Base+0x54c>
   300e8:	add	r3, pc, r3
   300ec:	ldr	r0, [pc, #28]	; 30110 <flatcc_json_parser_union_type_vector@@Base+0x550>
   300f0:	add	r3, r3, #2016	; 0x7e0
   300f4:	ldr	r2, [pc, #24]	; 30114 <flatcc_json_parser_union_type_vector@@Base+0x554>
   300f8:	add	r3, r3, #4
   300fc:	add	r1, pc, r1
   30100:	add	r0, pc, r0
   30104:	bl	14610 <__assert_fail@plt>
   30108:	andeq	r2, r1, r0, asr ip
   3010c:	andeq	r3, r1, r8, asr #16
   30110:	andeq	r3, r1, r8, lsr #17
   30114:	andeq	r0, r0, r2, ror #8

00030118 <flatcc_json_parser_struct_as_root@@Base>:
   30118:	push	{r4, r5, r6, r7, r8, r9, lr}
   3011c:	sub	sp, sp, #52	; 0x34
   30120:	mov	r5, r2
   30124:	ldr	r8, [sp, #80]	; 0x50
   30128:	mov	r9, r0
   3012c:	ands	r7, r8, #4
   30130:	movne	r7, #2
   30134:	subs	r4, r1, #0
   30138:	addeq	r4, sp, #4
   3013c:	mov	r2, #44	; 0x2c
   30140:	mov	r1, #0
   30144:	mov	r0, r4
   30148:	add	r6, r5, r3
   3014c:	bl	145bc <memset@plt>
   30150:	mov	r2, #1
   30154:	str	r2, [r4, #16]
   30158:	str	r6, [r4, #32]
   3015c:	str	r9, [r4]
   30160:	stmib	r4, {r5, r8}
   30164:	str	r5, [r4, #28]
   30168:	str	r5, [r4, #36]	; 0x24
   3016c:	mov	r3, r7
   30170:	mov	r2, #0
   30174:	ldr	r1, [sp, #84]	; 0x54
   30178:	mov	r0, r9
   3017c:	bl	27180 <flatcc_builder_start_buffer@@Base>
   30180:	cmp	r0, #0
   30184:	bne	301dc <flatcc_json_parser_struct_as_root@@Base+0xc4>
   30188:	mov	r2, r6
   3018c:	mov	r3, sp
   30190:	mov	r1, r5
   30194:	mov	r0, r4
   30198:	ldr	ip, [sp, #88]	; 0x58
   3019c:	blx	ip
   301a0:	ldr	r6, [r4, #24]
   301a4:	cmp	r6, #0
   301a8:	beq	301b8 <flatcc_json_parser_struct_as_root@@Base+0xa0>
   301ac:	mov	r0, r6
   301b0:	add	sp, sp, #52	; 0x34
   301b4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   301b8:	mov	r0, r9
   301bc:	ldr	r1, [sp]
   301c0:	bl	27238 <flatcc_builder_end_buffer@@Base>
   301c4:	cmp	r0, #0
   301c8:	beq	301dc <flatcc_json_parser_struct_as_root@@Base+0xc4>
   301cc:	mov	r0, r6
   301d0:	str	r5, [r4, #40]	; 0x28
   301d4:	add	sp, sp, #52	; 0x34
   301d8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   301dc:	mvn	r6, #0
   301e0:	mov	r0, r6
   301e4:	add	sp, sp, #52	; 0x34
   301e8:	pop	{r4, r5, r6, r7, r8, r9, pc}

000301ec <flatcc_json_parser_table_as_root@@Base>:
   301ec:	push	{lr}		; (str lr, [sp, #-4]!)
   301f0:	pop	{lr}		; (ldr lr, [sp], #4)
   301f4:	b	30118 <flatcc_json_parser_struct_as_root@@Base>
   301f8:	cmp	r0, #1000	; 0x3e8
   301fc:	push	{r4, lr}
   30200:	mov	r3, r0
   30204:	bcc	30280 <flatcc_json_parser_table_as_root@@Base+0x94>
   30208:	ldr	r2, [pc, #340]	; 30364 <flatcc_json_parser_table_as_root@@Base+0x178>
   3020c:	cmp	r0, r2
   30210:	bhi	302e4 <flatcc_json_parser_table_as_root@@Base+0xf8>
   30214:	ldr	lr, [pc, #332]	; 30368 <flatcc_json_parser_table_as_root@@Base+0x17c>
   30218:	mov	r2, #100	; 0x64
   3021c:	ldr	ip, [pc, #328]	; 3036c <flatcc_json_parser_table_as_root@@Base+0x180>
   30220:	umull	r0, lr, lr, r3
   30224:	add	ip, pc, ip
   30228:	lsr	lr, lr, #5
   3022c:	mov	r0, #0
   30230:	mul	r2, r2, lr
   30234:	strb	r0, [r1, #4]
   30238:	sub	r3, r3, r2
   3023c:	add	r4, r1, #2
   30240:	uxth	r2, r3
   30244:	uxth	r3, lr
   30248:	ldrb	lr, [ip, r2, lsl #1]
   3024c:	add	r2, ip, r2, lsl #1
   30250:	mov	r0, #4
   30254:	strb	lr, [r1, #2]
   30258:	ldrb	r2, [r2, #1]
   3025c:	strb	r2, [r1, #3]
   30260:	ldr	r2, [pc, #264]	; 30370 <flatcc_json_parser_table_as_root@@Base+0x184>
   30264:	add	r2, pc, r2
   30268:	add	r1, r2, r3, lsl #1
   3026c:	ldrb	r3, [r2, r3, lsl #1]
   30270:	strb	r3, [r4, #-2]
   30274:	ldrb	r3, [r1, #1]
   30278:	strb	r3, [r4, #-1]
   3027c:	pop	{r4, pc}
   30280:	cmp	r0, #99	; 0x63
   30284:	bls	30334 <flatcc_json_parser_table_as_root@@Base+0x148>
   30288:	add	lr, r1, #3
   3028c:	mov	r0, #3
   30290:	mov	r2, #0
   30294:	strb	r2, [r1, #3]
   30298:	ldr	r4, [pc, #200]	; 30368 <flatcc_json_parser_table_as_root@@Base+0x17c>
   3029c:	mov	r2, #100	; 0x64
   302a0:	ldr	ip, [pc, #204]	; 30374 <flatcc_json_parser_table_as_root@@Base+0x188>
   302a4:	umull	r1, r4, r4, r3
   302a8:	add	ip, pc, ip
   302ac:	lsr	r4, r4, #5
   302b0:	sub	r1, lr, #2
   302b4:	mul	r2, r2, r4
   302b8:	sub	r2, r3, r2
   302bc:	uxth	r3, r4
   302c0:	uxth	r2, r2
   302c4:	ldrb	r4, [ip, r2, lsl #1]
   302c8:	add	r2, ip, r2, lsl #1
   302cc:	strb	r4, [lr, #-2]
   302d0:	ldrb	r2, [r2, #1]
   302d4:	strb	r2, [lr, #-1]
   302d8:	add	r3, r3, #48	; 0x30
   302dc:	strb	r3, [r1, #-1]
   302e0:	pop	{r4, pc}
   302e4:	ldr	r4, [pc, #124]	; 30368 <flatcc_json_parser_table_as_root@@Base+0x17c>
   302e8:	mov	r2, #100	; 0x64
   302ec:	ldr	ip, [pc, #132]	; 30378 <flatcc_json_parser_table_as_root@@Base+0x18c>
   302f0:	umull	r0, r4, r4, r3
   302f4:	add	ip, pc, ip
   302f8:	lsr	r4, r4, #5
   302fc:	mov	r0, #0
   30300:	mul	r2, r2, r4
   30304:	strb	r0, [r1, #5]
   30308:	sub	r3, r3, r2
   3030c:	add	lr, r1, #3
   30310:	uxth	r2, r3
   30314:	uxth	r3, r4
   30318:	ldrb	r4, [ip, r2, lsl #1]
   3031c:	add	r2, ip, r2, lsl #1
   30320:	mov	r0, #5
   30324:	strb	r4, [r1, #3]
   30328:	ldrb	r2, [r2, #1]
   3032c:	strb	r2, [r1, #4]
   30330:	b	30298 <flatcc_json_parser_table_as_root@@Base+0xac>
   30334:	cmp	r0, #9
   30338:	bls	30350 <flatcc_json_parser_table_as_root@@Base+0x164>
   3033c:	mov	r2, #0
   30340:	strb	r2, [r1, #2]
   30344:	add	r4, r1, #2
   30348:	mov	r0, #2
   3034c:	b	30260 <flatcc_json_parser_table_as_root@@Base+0x74>
   30350:	mov	r2, #0
   30354:	strb	r2, [r1, #1]
   30358:	mov	r0, #1
   3035c:	add	r1, r1, #1
   30360:	b	302d8 <flatcc_json_parser_table_as_root@@Base+0xec>
   30364:	andeq	r2, r0, pc, lsl #14
   30368:	mvnpl	r8, pc, lsl r5
   3036c:	muleq	r1, r4, r7
   30370:	andeq	r3, r1, r4, asr r7
   30374:	andeq	r3, r1, r0, lsl r7
   30378:	andeq	r3, r1, r4, asr #13
   3037c:	ldr	r2, [pc, #804]	; 306a8 <flatcc_json_parser_table_as_root@@Base+0x4bc>
   30380:	push	{r4, lr}
   30384:	cmp	r0, r2
   30388:	mov	r3, r0
   3038c:	bls	304c4 <flatcc_json_parser_table_as_root@@Base+0x2d8>
   30390:	ldr	r2, [pc, #788]	; 306ac <flatcc_json_parser_table_as_root@@Base+0x4c0>
   30394:	cmp	r0, r2
   30398:	bls	30504 <flatcc_json_parser_table_as_root@@Base+0x318>
   3039c:	ldr	r2, [pc, #780]	; 306b0 <flatcc_json_parser_table_as_root@@Base+0x4c4>
   303a0:	cmp	r0, r2
   303a4:	bls	30608 <flatcc_json_parser_table_as_root@@Base+0x41c>
   303a8:	ldr	ip, [pc, #772]	; 306b4 <flatcc_json_parser_table_as_root@@Base+0x4c8>
   303ac:	mov	r0, #100	; 0x64
   303b0:	ldr	r2, [pc, #768]	; 306b8 <flatcc_json_parser_table_as_root@@Base+0x4cc>
   303b4:	umull	lr, ip, ip, r3
   303b8:	add	r2, pc, r2
   303bc:	lsr	ip, ip, #5
   303c0:	mov	lr, #0
   303c4:	mul	r0, r0, ip
   303c8:	strb	lr, [r1, #10]
   303cc:	sub	r3, r3, r0
   303d0:	add	lr, r1, #8
   303d4:	ldrb	r4, [r2, r3, lsl #1]
   303d8:	add	r2, r2, r3, lsl #1
   303dc:	mov	r0, #10
   303e0:	strb	r4, [r1, #8]
   303e4:	ldrb	r2, [r2, #1]
   303e8:	mov	r3, ip
   303ec:	strb	r2, [r1, #9]
   303f0:	ldr	r4, [pc, #700]	; 306b4 <flatcc_json_parser_table_as_root@@Base+0x4c8>
   303f4:	mov	ip, #100	; 0x64
   303f8:	ldr	r2, [pc, #700]	; 306bc <flatcc_json_parser_table_as_root@@Base+0x4d0>
   303fc:	umull	r1, r4, r4, r3
   30400:	add	r2, pc, r2
   30404:	lsr	r4, r4, #5
   30408:	sub	r1, lr, #2
   3040c:	mul	ip, ip, r4
   30410:	sub	ip, r3, ip
   30414:	mov	r3, r4
   30418:	ldrb	r4, [r2, ip, lsl #1]
   3041c:	add	r2, r2, ip, lsl #1
   30420:	strb	r4, [lr, #-2]
   30424:	ldrb	r2, [r2, #1]
   30428:	strb	r2, [lr, #-1]
   3042c:	ldr	lr, [pc, #640]	; 306b4 <flatcc_json_parser_table_as_root@@Base+0x4c8>
   30430:	mov	ip, #100	; 0x64
   30434:	ldr	r2, [pc, #644]	; 306c0 <flatcc_json_parser_table_as_root@@Base+0x4d4>
   30438:	umull	r4, lr, lr, r3
   3043c:	add	r2, pc, r2
   30440:	lsr	lr, lr, #5
   30444:	sub	r4, r1, #2
   30448:	mul	ip, ip, lr
   3044c:	sub	ip, r3, ip
   30450:	mov	r3, lr
   30454:	ldrb	lr, [r2, ip, lsl #1]
   30458:	add	r2, r2, ip, lsl #1
   3045c:	strb	lr, [r1, #-2]
   30460:	ldrb	r2, [r2, #1]
   30464:	strb	r2, [r1, #-1]
   30468:	ldr	lr, [pc, #580]	; 306b4 <flatcc_json_parser_table_as_root@@Base+0x4c8>
   3046c:	mov	ip, #100	; 0x64
   30470:	ldr	r2, [pc, #588]	; 306c4 <flatcc_json_parser_table_as_root@@Base+0x4d8>
   30474:	umull	r1, lr, lr, r3
   30478:	add	r2, pc, r2
   3047c:	lsr	lr, lr, #5
   30480:	sub	r1, r4, #2
   30484:	mul	ip, ip, lr
   30488:	sub	ip, r3, ip
   3048c:	mov	r3, lr
   30490:	ldrb	lr, [r2, ip, lsl #1]
   30494:	add	r2, r2, ip, lsl #1
   30498:	strb	lr, [r4, #-2]
   3049c:	ldrb	r2, [r2, #1]
   304a0:	strb	r2, [r4, #-1]
   304a4:	ldr	r2, [pc, #540]	; 306c8 <flatcc_json_parser_table_as_root@@Base+0x4dc>
   304a8:	add	r2, pc, r2
   304ac:	add	ip, r2, r3, lsl #1
   304b0:	ldrb	r3, [r2, r3, lsl #1]
   304b4:	strb	r3, [r1, #-2]
   304b8:	ldrb	r3, [ip, #1]
   304bc:	strb	r3, [r1, #-1]
   304c0:	pop	{r4, pc}
   304c4:	cmp	r0, #99	; 0x63
   304c8:	bls	304e8 <flatcc_json_parser_table_as_root@@Base+0x2fc>
   304cc:	cmp	r0, #1000	; 0x3e8
   304d0:	bcc	305e0 <flatcc_json_parser_table_as_root@@Base+0x3f4>
   304d4:	mov	r2, #0
   304d8:	strb	r2, [r1, #4]
   304dc:	add	r4, r1, #4
   304e0:	mov	r0, #4
   304e4:	b	30468 <flatcc_json_parser_table_as_root@@Base+0x27c>
   304e8:	cmp	r0, #9
   304ec:	bls	305f4 <flatcc_json_parser_table_as_root@@Base+0x408>
   304f0:	mov	r2, #0
   304f4:	strb	r2, [r1, #2]
   304f8:	mov	r0, #2
   304fc:	add	r1, r1, #2
   30500:	b	304a4 <flatcc_json_parser_table_as_root@@Base+0x2b8>
   30504:	ldr	r2, [pc, #448]	; 306cc <flatcc_json_parser_table_as_root@@Base+0x4e0>
   30508:	cmp	r0, r2
   3050c:	bls	30660 <flatcc_json_parser_table_as_root@@Base+0x474>
   30510:	add	r4, r1, #7
   30514:	mov	r0, #7
   30518:	mov	r2, #0
   3051c:	strb	r2, [r1, #7]
   30520:	ldr	lr, [pc, #396]	; 306b4 <flatcc_json_parser_table_as_root@@Base+0x4c8>
   30524:	mov	ip, #100	; 0x64
   30528:	ldr	r2, [pc, #416]	; 306d0 <flatcc_json_parser_table_as_root@@Base+0x4e4>
   3052c:	umull	r1, lr, lr, r3
   30530:	add	r2, pc, r2
   30534:	lsr	lr, lr, #5
   30538:	sub	r1, r4, #2
   3053c:	mul	ip, ip, lr
   30540:	sub	ip, r3, ip
   30544:	mov	r3, lr
   30548:	ldrb	lr, [r2, ip, lsl #1]
   3054c:	add	r2, r2, ip, lsl #1
   30550:	strb	lr, [r4, #-2]
   30554:	ldrb	r2, [r2, #1]
   30558:	strb	r2, [r4, #-1]
   3055c:	ldr	lr, [pc, #336]	; 306b4 <flatcc_json_parser_table_as_root@@Base+0x4c8>
   30560:	mov	ip, #100	; 0x64
   30564:	ldr	r2, [pc, #360]	; 306d4 <flatcc_json_parser_table_as_root@@Base+0x4e8>
   30568:	umull	r4, lr, lr, r3
   3056c:	add	r2, pc, r2
   30570:	lsr	lr, lr, #5
   30574:	sub	r4, r1, #2
   30578:	mul	ip, ip, lr
   3057c:	sub	ip, r3, ip
   30580:	mov	r3, lr
   30584:	ldrb	lr, [r2, ip, lsl #1]
   30588:	add	r2, r2, ip, lsl #1
   3058c:	strb	lr, [r1, #-2]
   30590:	ldrb	r2, [r2, #1]
   30594:	strb	r2, [r1, #-1]
   30598:	ldr	lr, [pc, #276]	; 306b4 <flatcc_json_parser_table_as_root@@Base+0x4c8>
   3059c:	mov	ip, #100	; 0x64
   305a0:	ldr	r2, [pc, #304]	; 306d8 <flatcc_json_parser_table_as_root@@Base+0x4ec>
   305a4:	umull	r1, lr, lr, r3
   305a8:	add	r2, pc, r2
   305ac:	lsr	lr, lr, #5
   305b0:	sub	r1, r4, #2
   305b4:	mul	ip, ip, lr
   305b8:	sub	ip, r3, ip
   305bc:	mov	r3, lr
   305c0:	ldrb	lr, [r2, ip, lsl #1]
   305c4:	add	r2, r2, ip, lsl #1
   305c8:	strb	lr, [r4, #-2]
   305cc:	ldrb	r2, [r2, #1]
   305d0:	strb	r2, [r4, #-1]
   305d4:	add	r3, r3, #48	; 0x30
   305d8:	strb	r3, [r1, #-1]
   305dc:	pop	{r4, pc}
   305e0:	mov	r2, #0
   305e4:	strb	r2, [r1, #3]
   305e8:	add	r4, r1, #3
   305ec:	mov	r0, #3
   305f0:	b	30598 <flatcc_json_parser_table_as_root@@Base+0x3ac>
   305f4:	mov	r2, #0
   305f8:	strb	r2, [r1, #1]
   305fc:	mov	r0, #1
   30600:	add	r1, r1, #1
   30604:	b	305d4 <flatcc_json_parser_table_as_root@@Base+0x3e8>
   30608:	ldr	r2, [pc, #204]	; 306dc <flatcc_json_parser_table_as_root@@Base+0x4f0>
   3060c:	cmp	r0, r2
   30610:	bls	30694 <flatcc_json_parser_table_as_root@@Base+0x4a8>
   30614:	ldr	ip, [pc, #152]	; 306b4 <flatcc_json_parser_table_as_root@@Base+0x4c8>
   30618:	mov	r0, #100	; 0x64
   3061c:	ldr	r2, [pc, #188]	; 306e0 <flatcc_json_parser_table_as_root@@Base+0x4f4>
   30620:	umull	lr, ip, ip, r3
   30624:	add	r2, pc, r2
   30628:	lsr	ip, ip, #5
   3062c:	mov	lr, #0
   30630:	mul	r0, r0, ip
   30634:	strb	lr, [r1, #9]
   30638:	sub	r3, r3, r0
   3063c:	add	r4, r1, #7
   30640:	ldrb	lr, [r2, r3, lsl #1]
   30644:	add	r2, r2, r3, lsl #1
   30648:	mov	r0, #9
   3064c:	strb	lr, [r1, #7]
   30650:	ldrb	r2, [r2, #1]
   30654:	mov	r3, ip
   30658:	strb	r2, [r1, #8]
   3065c:	b	30520 <flatcc_json_parser_table_as_root@@Base+0x334>
   30660:	ldr	r2, [pc, #124]	; 306e4 <flatcc_json_parser_table_as_root@@Base+0x4f8>
   30664:	cmp	r0, r2
   30668:	bls	30680 <flatcc_json_parser_table_as_root@@Base+0x494>
   3066c:	mov	r2, #0
   30670:	strb	r2, [r1, #6]
   30674:	mov	r0, #6
   30678:	add	r1, r1, #6
   3067c:	b	3042c <flatcc_json_parser_table_as_root@@Base+0x240>
   30680:	mov	r2, #0
   30684:	strb	r2, [r1, #5]
   30688:	mov	r0, #5
   3068c:	add	r1, r1, #5
   30690:	b	3055c <flatcc_json_parser_table_as_root@@Base+0x370>
   30694:	mov	r2, #0
   30698:	strb	r2, [r1, #8]
   3069c:	add	lr, r1, #8
   306a0:	mov	r0, #8
   306a4:	b	303f0 <flatcc_json_parser_table_as_root@@Base+0x204>
   306a8:	andeq	r2, r0, pc, lsl #14
   306ac:	addseq	r9, r8, pc, ror r6
   306b0:	blcc	fe6e2eb4 <__bss_end__@@Base+0xfe68dae8>
   306b4:	mvnpl	r8, pc, lsl r5
   306b8:	andeq	r3, r1, r0, lsl #12
   306bc:			; <UNDEFINED> instruction: 0x000135b8
   306c0:	andeq	r3, r1, ip, ror r5
   306c4:	andeq	r3, r1, r0, asr #10
   306c8:	andeq	r3, r1, r0, lsl r5
   306cc:	andeq	r4, pc, pc, lsr r2	; <UNPREDICTABLE>
   306d0:	andeq	r3, r1, r8, lsl #9
   306d4:	andeq	r3, r1, ip, asr #8
   306d8:	andeq	r3, r1, r0, lsl r4
   306dc:	ldrbeq	lr, [r5, #255]!	; 0xff
   306e0:	muleq	r1, r4, r3
   306e4:	muleq	r1, pc, r6	; <UNPREDICTABLE>
   306e8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   306ec:	mov	r4, r0
   306f0:	add	r9, pc, #992	; 0x3e0
   306f4:	ldrd	r8, [r9]
   306f8:	mov	r6, r2
   306fc:	cmp	r1, r9
   30700:	cmpeq	r0, r8
   30704:	bls	30b38 <flatcc_json_parser_table_as_root@@Base+0x94c>
   30708:	add	r3, pc, #976	; 0x3d0
   3070c:	ldrd	r2, [r3]
   30710:	mov	r5, r1
   30714:	cmp	r1, r3
   30718:	cmpeq	r0, r2
   3071c:	bls	3095c <flatcc_json_parser_table_as_root@@Base+0x770>
   30720:	add	r3, pc, #960	; 0x3c0
   30724:	ldrd	r2, [r3]
   30728:	cmp	r1, r3
   3072c:	cmpeq	r0, r2
   30730:	bls	30b44 <flatcc_json_parser_table_as_root@@Base+0x958>
   30734:	add	r3, pc, #948	; 0x3b4
   30738:	ldrd	r2, [r3]
   3073c:	cmp	r1, r3
   30740:	cmpeq	r0, r2
   30744:	bls	30d14 <flatcc_json_parser_table_as_root@@Base+0xb28>
   30748:	add	r3, pc, #936	; 0x3a8
   3074c:	ldrd	r2, [r3]
   30750:	cmp	r1, r3
   30754:	cmpeq	r0, r2
   30758:	bls	30bfc <flatcc_json_parser_table_as_root@@Base+0xa10>
   3075c:	mov	r3, #0
   30760:	strb	r3, [r6, #20]
   30764:	mov	r2, #100	; 0x64
   30768:	mov	r3, #0
   3076c:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30770:	mov	r0, r4
   30774:	mov	r1, r5
   30778:	mov	r3, #0
   3077c:	ldr	r7, [pc, #908]	; 30b10 <flatcc_json_parser_table_as_root@@Base+0x924>
   30780:	add	r7, pc, r7
   30784:	mov	r8, r2
   30788:	mov	r2, #100	; 0x64
   3078c:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30790:	ldrb	r2, [r7, r8, lsl #1]
   30794:	add	r3, r7, r8, lsl #1
   30798:	add	r8, r6, #18
   3079c:	strb	r2, [r6, #18]
   307a0:	ldrb	r3, [r3, #1]
   307a4:	mov	r7, #20
   307a8:	strb	r3, [r6, #19]
   307ac:	mov	r4, r0
   307b0:	mov	r5, r1
   307b4:	mov	r0, r4
   307b8:	mov	r1, r5
   307bc:	mov	r2, #100	; 0x64
   307c0:	mov	r3, #0
   307c4:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   307c8:	mov	r0, r4
   307cc:	mov	r1, r5
   307d0:	mov	r3, #0
   307d4:	ldr	r6, [pc, #824]	; 30b14 <flatcc_json_parser_table_as_root@@Base+0x928>
   307d8:	add	r6, pc, r6
   307dc:	mov	r9, r2
   307e0:	mov	r2, #100	; 0x64
   307e4:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   307e8:	ldrb	r3, [r6, r9, lsl #1]
   307ec:	add	r2, r6, r9, lsl #1
   307f0:	sub	r6, r8, #2
   307f4:	strb	r3, [r8, #-2]
   307f8:	ldrb	r3, [r2, #1]
   307fc:	strb	r3, [r8, #-1]
   30800:	mov	r4, r0
   30804:	mov	r5, r1
   30808:	mov	r0, r4
   3080c:	mov	r1, r5
   30810:	mov	r2, #100	; 0x64
   30814:	mov	r3, #0
   30818:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   3081c:	mov	r0, r4
   30820:	mov	r1, r5
   30824:	mov	r3, #0
   30828:	ldr	r8, [pc, #744]	; 30b18 <flatcc_json_parser_table_as_root@@Base+0x92c>
   3082c:	add	r8, pc, r8
   30830:	mov	r9, r2
   30834:	mov	r2, #100	; 0x64
   30838:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   3083c:	ldrb	r3, [r8, r9, lsl #1]
   30840:	add	r2, r8, r9, lsl #1
   30844:	sub	r9, r6, #2
   30848:	strb	r3, [r6, #-2]
   3084c:	ldrb	r3, [r2, #1]
   30850:	strb	r3, [r6, #-1]
   30854:	mov	r4, r0
   30858:	mov	r5, r1
   3085c:	mov	r0, r4
   30860:	mov	r1, r5
   30864:	mov	r2, #100	; 0x64
   30868:	mov	r3, #0
   3086c:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30870:	mov	r0, r4
   30874:	mov	r1, r5
   30878:	mov	r3, #0
   3087c:	ldr	r8, [pc, #664]	; 30b1c <flatcc_json_parser_table_as_root@@Base+0x930>
   30880:	add	r8, pc, r8
   30884:	mov	r6, r2
   30888:	mov	r2, #100	; 0x64
   3088c:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30890:	ldrb	r3, [r8, r6, lsl #1]
   30894:	add	r2, r8, r6, lsl #1
   30898:	sub	r6, r9, #2
   3089c:	strb	r3, [r9, #-2]
   308a0:	ldrb	r3, [r2, #1]
   308a4:	strb	r3, [r9, #-1]
   308a8:	mov	r4, r0
   308ac:	mov	r5, r1
   308b0:	mov	r0, r4
   308b4:	mov	r1, r5
   308b8:	mov	r2, #100	; 0x64
   308bc:	mov	r3, #0
   308c0:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   308c4:	mov	r0, r4
   308c8:	mov	r1, r5
   308cc:	mov	r3, #0
   308d0:	ldr	r8, [pc, #584]	; 30b20 <flatcc_json_parser_table_as_root@@Base+0x934>
   308d4:	sub	sl, r6, #2
   308d8:	add	r8, pc, r8
   308dc:	mov	r9, r2
   308e0:	mov	r2, #100	; 0x64
   308e4:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   308e8:	ldrb	r3, [r8, r9, lsl #1]
   308ec:	add	r2, r8, r9, lsl #1
   308f0:	strb	r3, [r6, #-2]
   308f4:	ldrb	r3, [r2, #1]
   308f8:	strb	r3, [r6, #-1]
   308fc:	mov	r4, r0
   30900:	mov	r5, r1
   30904:	mov	r2, #100	; 0x64
   30908:	mov	r3, #0
   3090c:	mov	r0, r4
   30910:	mov	r1, r5
   30914:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30918:	mov	r3, #0
   3091c:	mov	r0, r4
   30920:	mov	r1, r5
   30924:	ldr	fp, [pc, #504]	; 30b24 <flatcc_json_parser_table_as_root@@Base+0x938>
   30928:	add	fp, pc, fp
   3092c:	mov	r6, r2
   30930:	mov	r2, #100	; 0x64
   30934:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30938:	ldrb	r3, [fp, r6, lsl #1]
   3093c:	add	r2, fp, r6, lsl #1
   30940:	sub	r6, sl, #2
   30944:	strb	r3, [sl, #-2]
   30948:	ldrb	r3, [r2, #1]
   3094c:	strb	r3, [sl, #-1]
   30950:	mov	r8, r0
   30954:	mov	r9, r1
   30958:	b	30a0c <flatcc_json_parser_table_as_root@@Base+0x820>
   3095c:	add	r3, pc, #412	; 0x19c
   30960:	ldrd	r2, [r3]
   30964:	cmp	r1, r3
   30968:	cmpeq	r0, r2
   3096c:	bhi	30b80 <flatcc_json_parser_table_as_root@@Base+0x994>
   30970:	add	r3, pc, #400	; 0x190
   30974:	ldrd	r2, [r3]
   30978:	cmp	r1, r3
   3097c:	cmpeq	r0, r2
   30980:	bls	30d3c <flatcc_json_parser_table_as_root@@Base+0xb50>
   30984:	add	r8, r6, #11
   30988:	mov	r7, #11
   3098c:	mov	r3, #0
   30990:	strb	r3, [r6, #11]
   30994:	mov	r2, #100	; 0x64
   30998:	mov	r3, #0
   3099c:	mov	r0, r4
   309a0:	mov	r1, r5
   309a4:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   309a8:	ldr	r9, [pc, #376]	; 30b28 <flatcc_json_parser_table_as_root@@Base+0x93c>
   309ac:	mov	r0, r4
   309b0:	add	r9, pc, r9
   309b4:	sub	r6, r8, #3
   309b8:	ldrb	r1, [r9, r2, lsl #1]
   309bc:	add	r3, r9, r2, lsl #1
   309c0:	mov	r2, #100	; 0x64
   309c4:	strb	r1, [r8, #-2]
   309c8:	ldrb	r1, [r3, #1]
   309cc:	mov	r3, #0
   309d0:	strb	r1, [r8, #-1]
   309d4:	mov	r1, r5
   309d8:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   309dc:	mov	r2, #10
   309e0:	mov	r3, #0
   309e4:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   309e8:	mov	r0, r4
   309ec:	mov	r1, r5
   309f0:	mov	r3, #0
   309f4:	add	r2, r2, #48	; 0x30
   309f8:	strb	r2, [r8, #-3]
   309fc:	mov	r2, #1000	; 0x3e8
   30a00:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30a04:	mov	r8, r0
   30a08:	mov	r9, r1
   30a0c:	mov	r0, r8
   30a10:	mov	r1, r9
   30a14:	mov	r2, #100	; 0x64
   30a18:	mov	r3, #0
   30a1c:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30a20:	ldr	r4, [pc, #260]	; 30b2c <flatcc_json_parser_table_as_root@@Base+0x940>
   30a24:	mov	r0, r8
   30a28:	add	r4, pc, r4
   30a2c:	ldrb	r3, [r4, r2, lsl #1]
   30a30:	add	r2, r4, r2, lsl #1
   30a34:	strb	r3, [r6, #-2]
   30a38:	ldrb	r1, [r2, #1]
   30a3c:	mov	r3, #0
   30a40:	mov	r2, #100	; 0x64
   30a44:	strb	r1, [r6, #-1]
   30a48:	mov	r1, r9
   30a4c:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30a50:	mov	r2, #100	; 0x64
   30a54:	mov	r3, #0
   30a58:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30a5c:	mov	r0, r8
   30a60:	ldrb	r3, [r4, r2, lsl #1]
   30a64:	add	r2, r4, r2, lsl #1
   30a68:	strb	r3, [r6, #-4]
   30a6c:	ldrb	r1, [r2, #1]
   30a70:	mov	r3, #0
   30a74:	ldr	r2, [pc, #180]	; 30b30 <flatcc_json_parser_table_as_root@@Base+0x944>
   30a78:	strb	r1, [r6, #-3]
   30a7c:	mov	r1, r9
   30a80:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30a84:	mov	r2, #100	; 0x64
   30a88:	mov	r3, #0
   30a8c:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30a90:	mov	r0, r8
   30a94:	mov	r1, r9
   30a98:	mov	r3, #0
   30a9c:	ldrb	lr, [r4, r2, lsl #1]
   30aa0:	add	ip, r4, r2, lsl #1
   30aa4:	ldr	r2, [pc, #136]	; 30b34 <flatcc_json_parser_table_as_root@@Base+0x948>
   30aa8:	strb	lr, [r6, #-6]
   30aac:	ldrb	ip, [ip, #1]
   30ab0:	strb	ip, [r6, #-5]
   30ab4:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30ab8:	ldrb	r3, [r4, r0, lsl #1]
   30abc:	add	r4, r4, r0, lsl #1
   30ac0:	mov	r0, r7
   30ac4:	strb	r3, [r6, #-8]
   30ac8:	ldrb	r3, [r4, #1]
   30acc:	strb	r3, [r6, #-7]
   30ad0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30ad4:	nop			; (mov r0, r0)
   30ad8:	blcc	fe6e32dc <__bss_end__@@Base+0xfe68df10>
   30adc:	andeq	r0, r0, r0
   30ae0:	mrcmi	15, 3, r9, cr2, cr15, {7}
   30ae4:	andeq	r0, r0, r8, lsl r9
   30ae8:	svcvs	0x00c0ffff
   30aec:	strdeq	r8, [r3], -r2	; <UNPREDICTABLE>
   30af0:			; <UNDEFINED> instruction: 0xa763ffff
   30af4:	stcleq	6, cr11, [r0, #716]!	; 0x2cc
   30af8:	stmibhi	r7!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   30afc:	bhi	ff1f9714 <__bss_end__@@Base+0xff1a4348>
   30b00:	ldmdami	r6!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}^
   30b04:	andeq	r0, r0, r7, lsl r0
   30b08:	strpl	lr, [fp], #-1023	; 0xfffffc01
   30b0c:	andeq	r0, r0, r2
   30b10:	andeq	r3, r1, r8, lsr r2
   30b14:	andeq	r3, r1, r0, ror #3
   30b18:	andeq	r3, r1, ip, lsl #3
   30b1c:	andeq	r3, r1, r8, lsr r1
   30b20:	andeq	r3, r1, r0, ror #1
   30b24:	muleq	r1, r0, r0
   30b28:	andeq	r3, r1, r8
   30b2c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   30b30:	andeq	r2, r0, r0, lsl r7
   30b34:	andeq	r4, pc, r0, asr #4
   30b38:	mov	r1, r2
   30b3c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30b40:	b	3037c <flatcc_json_parser_table_as_root@@Base+0x190>
   30b44:	add	r3, pc, #580	; 0x244
   30b48:	ldrd	r2, [r3]
   30b4c:	cmp	r1, r3
   30b50:	cmpeq	r0, r2
   30b54:	bhi	30d00 <flatcc_json_parser_table_as_root@@Base+0xb14>
   30b58:	add	r3, pc, #568	; 0x238
   30b5c:	ldrd	r2, [r3]
   30b60:	cmp	r1, r3
   30b64:	cmpeq	r0, r2
   30b68:	bls	30d78 <flatcc_json_parser_table_as_root@@Base+0xb8c>
   30b6c:	mov	r3, #0
   30b70:	strb	r3, [r6, #15]
   30b74:	mov	r7, #15
   30b78:	add	r6, r6, #15
   30b7c:	b	30ca8 <flatcc_json_parser_table_as_root@@Base+0xabc>
   30b80:	add	r3, pc, #536	; 0x218
   30b84:	ldrd	r2, [r3]
   30b88:	cmp	r1, r3
   30b8c:	cmpeq	r0, r2
   30b90:	bls	30d50 <flatcc_json_parser_table_as_root@@Base+0xb64>
   30b94:	add	r9, r6, #13
   30b98:	mov	r7, #13
   30b9c:	mov	r3, #0
   30ba0:	strb	r3, [r6, #13]
   30ba4:	mov	r0, r4
   30ba8:	mov	r1, r5
   30bac:	mov	r2, #100	; 0x64
   30bb0:	mov	r3, #0
   30bb4:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30bb8:	mov	r0, r4
   30bbc:	mov	r1, r5
   30bc0:	mov	r3, #0
   30bc4:	ldr	r8, [pc, #484]	; 30db0 <flatcc_json_parser_table_as_root@@Base+0xbc4>
   30bc8:	add	r8, pc, r8
   30bcc:	mov	r6, r2
   30bd0:	mov	r2, #100	; 0x64
   30bd4:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30bd8:	ldrb	r3, [r8, r6, lsl #1]
   30bdc:	add	r2, r8, r6, lsl #1
   30be0:	sub	r8, r9, #2
   30be4:	strb	r3, [r9, #-2]
   30be8:	ldrb	r3, [r2, #1]
   30bec:	strb	r3, [r9, #-1]
   30bf0:	mov	r4, r0
   30bf4:	mov	r5, r1
   30bf8:	b	30994 <flatcc_json_parser_table_as_root@@Base+0x7a8>
   30bfc:	mov	r3, #0
   30c00:	strb	r3, [r6, #19]
   30c04:	mov	r2, #100	; 0x64
   30c08:	mov	r3, #0
   30c0c:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30c10:	mov	r0, r4
   30c14:	mov	r1, r5
   30c18:	mov	r3, #0
   30c1c:	ldr	r7, [pc, #400]	; 30db4 <flatcc_json_parser_table_as_root@@Base+0xbc8>
   30c20:	add	r7, pc, r7
   30c24:	mov	r8, r2
   30c28:	mov	r2, #100	; 0x64
   30c2c:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30c30:	ldrb	r2, [r7, r8, lsl #1]
   30c34:	add	r3, r7, r8, lsl #1
   30c38:	add	r8, r6, #17
   30c3c:	strb	r2, [r6, #17]
   30c40:	ldrb	r3, [r3, #1]
   30c44:	mov	r7, #19
   30c48:	strb	r3, [r6, #18]
   30c4c:	mov	r4, r0
   30c50:	mov	r5, r1
   30c54:	mov	r0, r4
   30c58:	mov	r1, r5
   30c5c:	mov	r2, #100	; 0x64
   30c60:	mov	r3, #0
   30c64:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30c68:	mov	r0, r4
   30c6c:	mov	r1, r5
   30c70:	mov	r3, #0
   30c74:	ldr	r6, [pc, #316]	; 30db8 <flatcc_json_parser_table_as_root@@Base+0xbcc>
   30c78:	add	r6, pc, r6
   30c7c:	mov	r9, r2
   30c80:	mov	r2, #100	; 0x64
   30c84:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30c88:	ldrb	r3, [r6, r9, lsl #1]
   30c8c:	add	r2, r6, r9, lsl #1
   30c90:	sub	r6, r8, #2
   30c94:	strb	r3, [r8, #-2]
   30c98:	ldrb	r3, [r2, #1]
   30c9c:	strb	r3, [r8, #-1]
   30ca0:	mov	r4, r0
   30ca4:	mov	r5, r1
   30ca8:	mov	r0, r4
   30cac:	mov	r1, r5
   30cb0:	mov	r2, #100	; 0x64
   30cb4:	mov	r3, #0
   30cb8:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30cbc:	mov	r0, r4
   30cc0:	mov	r1, r5
   30cc4:	mov	r3, #0
   30cc8:	ldr	r8, [pc, #236]	; 30dbc <flatcc_json_parser_table_as_root@@Base+0xbd0>
   30ccc:	add	r8, pc, r8
   30cd0:	mov	r9, r2
   30cd4:	mov	r2, #100	; 0x64
   30cd8:	bl	3dd9c <flatcc_json_printer_clear@@Base+0x84c>
   30cdc:	ldrb	r3, [r8, r9, lsl #1]
   30ce0:	add	r2, r8, r9, lsl #1
   30ce4:	sub	r9, r6, #2
   30ce8:	strb	r3, [r6, #-2]
   30cec:	ldrb	r3, [r2, #1]
   30cf0:	strb	r3, [r6, #-1]
   30cf4:	mov	r4, r0
   30cf8:	mov	r5, r1
   30cfc:	b	30ba4 <flatcc_json_parser_table_as_root@@Base+0x9b8>
   30d00:	mov	r3, #0
   30d04:	strb	r3, [r6, #16]
   30d08:	mov	r7, #16
   30d0c:	add	r6, r6, #16
   30d10:	b	30808 <flatcc_json_parser_table_as_root@@Base+0x61c>
   30d14:	add	r3, pc, #140	; 0x8c
   30d18:	ldrd	r2, [r3]
   30d1c:	cmp	r1, r3
   30d20:	cmpeq	r0, r2
   30d24:	bls	30d64 <flatcc_json_parser_table_as_root@@Base+0xb78>
   30d28:	mov	r3, #0
   30d2c:	strb	r3, [r6, #18]
   30d30:	add	r8, r6, #18
   30d34:	mov	r7, #18
   30d38:	b	307b4 <flatcc_json_parser_table_as_root@@Base+0x5c8>
   30d3c:	mov	r3, #0
   30d40:	strb	r3, [r6, #10]
   30d44:	add	sl, r6, #10
   30d48:	mov	r7, #10
   30d4c:	b	30904 <flatcc_json_parser_table_as_root@@Base+0x718>
   30d50:	mov	r3, #0
   30d54:	strb	r3, [r6, #12]
   30d58:	mov	r7, #12
   30d5c:	add	r6, r6, #12
   30d60:	b	308b0 <flatcc_json_parser_table_as_root@@Base+0x6c4>
   30d64:	mov	r3, #0
   30d68:	strb	r3, [r6, #17]
   30d6c:	add	r8, r6, #17
   30d70:	mov	r7, #17
   30d74:	b	30c54 <flatcc_json_parser_table_as_root@@Base+0xa68>
   30d78:	mov	r3, #0
   30d7c:	strb	r3, [r6, #14]
   30d80:	add	r9, r6, #14
   30d84:	mov	r7, #14
   30d88:	b	3085c <flatcc_json_parser_table_as_root@@Base+0x670>
   30d8c:	nop			; (mov r0, r0)
   30d90:	strbge	r7, [r6], #4095	; 0xfff
   30d94:	andeq	r8, r3, lr, ror sp
   30d98:	ldrshtne	r3, [sl], #-255	; 0xffffff01
   30d9c:	strdeq	r5, [r0], -r3
   30da0:	strtle	r0, [r5], #4095	; 0xfff
   30da4:	andeq	r0, r0, r8, ror #1
   30da8:	stcpl	15, cr15, [r9, #1020]	; 0x3fc
   30dac:	smceq	13400	; 0x3458
   30db0:	strdeq	r2, [r1], -r0
   30db4:	muleq	r1, r8, sp
   30db8:	andeq	r2, r1, r0, asr #26
   30dbc:	andeq	r2, r1, ip, ror #25
   30dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30dc4:	sub	sp, sp, #20
   30dc8:	mov	r8, r2
   30dcc:	mov	r9, r3
   30dd0:	strd	r2, [sp, #8]
   30dd4:	ldrd	r2, [sp, #80]	; 0x50
   30dd8:	ldrd	r6, [sp, #64]	; 0x40
   30ddc:	ldrd	sl, [sp, #72]	; 0x48
   30de0:	subs	r8, r8, r2
   30de4:	sbc	r9, r9, r3
   30de8:	cmp	r9, r7
   30dec:	cmpeq	r8, r6
   30df0:	bls	30f68 <flatcc_json_parser_table_as_root@@Base+0xd7c>
   30df4:	ldrd	r2, [sp, #56]	; 0x38
   30df8:	subs	r2, r2, r6
   30dfc:	sbc	r3, r3, r7
   30e00:	cmp	fp, r3
   30e04:	cmpeq	sl, r2
   30e08:	bhi	30f74 <flatcc_json_parser_table_as_root@@Base+0xd88>
   30e0c:	ldrd	r4, [sp, #56]	; 0x38
   30e10:	sub	ip, r1, #1
   30e14:	add	ip, r0, ip
   30e18:	subs	r4, r4, sl
   30e1c:	sbc	r5, r5, fp
   30e20:	subs	r4, r4, r6
   30e24:	sbc	r5, r5, r7
   30e28:	adds	r2, sl, r6
   30e2c:	adc	r3, fp, r7
   30e30:	cmp	r9, r3
   30e34:	cmpeq	r8, r2
   30e38:	bhi	30ef8 <flatcc_json_parser_table_as_root@@Base+0xd0c>
   30e3c:	subs	r4, r8, r6
   30e40:	sbc	r5, r9, r7
   30e44:	strd	r4, [sp]
   30e48:	subs	r4, r2, r8
   30e4c:	sbc	r5, r3, r9
   30e50:	ldrd	r8, [sp]
   30e54:	cmp	r9, r5
   30e58:	cmpeq	r8, r4
   30e5c:	bcc	30f68 <flatcc_json_parser_table_as_root@@Base+0xd7c>
   30e60:	sub	r1, r1, #1
   30e64:	ldrb	ip, [r0, r1]
   30e68:	sub	ip, ip, #1
   30e6c:	strb	ip, [r0, r1]
   30e70:	ldrd	r0, [sp, #8]
   30e74:	ldrd	r4, [sp, #80]	; 0x50
   30e78:	adds	r0, r0, r4
   30e7c:	adc	r1, r1, r5
   30e80:	cmp	r1, r3
   30e84:	cmpeq	r0, r2
   30e88:	bls	30ed4 <flatcc_json_parser_table_as_root@@Base+0xce8>
   30e8c:	ldrd	r4, [sp, #56]	; 0x38
   30e90:	subs	r4, r4, r2
   30e94:	sbc	r5, r5, r3
   30e98:	cmp	fp, r5
   30e9c:	cmpeq	sl, r4
   30ea0:	bhi	30ed4 <flatcc_json_parser_table_as_root@@Base+0xce8>
   30ea4:	adds	sl, sl, r2
   30ea8:	adc	fp, fp, r3
   30eac:	cmp	r1, fp
   30eb0:	cmpeq	r0, sl
   30eb4:	bhi	30eec <flatcc_json_parser_table_as_root@@Base+0xd00>
   30eb8:	subs	sl, sl, r0
   30ebc:	sbc	fp, fp, r1
   30ec0:	subs	r0, r0, r2
   30ec4:	sbc	r1, r1, r3
   30ec8:	cmp	r1, fp
   30ecc:	cmpeq	r0, sl
   30ed0:	bhi	30eec <flatcc_json_parser_table_as_root@@Base+0xd00>
   30ed4:	ldrd	r0, [sp, #80]	; 0x50
   30ed8:	adds	r0, r0, r0
   30edc:	adc	r1, r1, r1
   30ee0:	cmp	r1, r3
   30ee4:	cmpeq	r0, r2
   30ee8:	bls	30f2c <flatcc_json_parser_table_as_root@@Base+0xd40>
   30eec:	mov	r0, #0
   30ef0:	add	sp, sp, #20
   30ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30ef8:	ldrb	lr, [ip]
   30efc:	subs	r6, r4, sl
   30f00:	sbc	r7, r5, fp
   30f04:	cmp	fp, r5
   30f08:	cmpeq	sl, r4
   30f0c:	sub	lr, lr, #1
   30f10:	mov	r4, r6
   30f14:	mov	r5, r7
   30f18:	strb	lr, [ip]
   30f1c:	mov	r6, r2
   30f20:	mov	r7, r3
   30f24:	bls	30e28 <flatcc_json_parser_table_as_root@@Base+0xc3c>
   30f28:	b	30ed4 <flatcc_json_parser_table_as_root@@Base+0xce8>
   30f2c:	ldr	ip, [sp, #84]	; 0x54
   30f30:	ldrd	r4, [sp, #56]	; 0x38
   30f34:	lsl	r1, ip, #2
   30f38:	ldr	ip, [sp, #80]	; 0x50
   30f3c:	lsl	r0, ip, #2
   30f40:	subs	r4, r4, r0
   30f44:	orr	r1, r1, ip, lsr #30
   30f48:	sbc	r5, r5, r1
   30f4c:	cmp	r5, r3
   30f50:	cmpeq	r4, r2
   30f54:	mov	r0, r4
   30f58:	movcs	r0, #1
   30f5c:	bcc	30eec <flatcc_json_parser_table_as_root@@Base+0xd00>
   30f60:	add	sp, sp, #20
   30f64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30f68:	mov	r2, r6
   30f6c:	mov	r3, r7
   30f70:	b	30e70 <flatcc_json_parser_table_as_root@@Base+0xc84>
   30f74:	mov	r2, r6
   30f78:	mov	r3, r7
   30f7c:	b	30ed4 <flatcc_json_parser_table_as_root@@Base+0xce8>
   30f80:	cmp	r0, #0
   30f84:	push	{r4, r5, lr}
   30f88:	addlt	r2, r1, #1
   30f8c:	movge	r2, r1
   30f90:	ldr	r5, [pc, #116]	; 3100c <flatcc_json_parser_table_as_root@@Base+0xe20>
   30f94:	rsblt	r0, r0, #0
   30f98:	mov	lr, r2
   30f9c:	mvn	r4, #9
   30fa0:	movlt	r3, #45	; 0x2d
   30fa4:	strblt	r3, [r1]
   30fa8:	smull	r3, ip, r5, r0
   30fac:	asr	r3, r0, #31
   30fb0:	rsb	r3, r3, ip, asr #2
   30fb4:	mla	ip, r4, r3, r0
   30fb8:	subs	r0, r3, #0
   30fbc:	add	r3, ip, #48	; 0x30
   30fc0:	strb	r3, [lr], #1
   30fc4:	bne	30fa8 <flatcc_json_parser_table_as_root@@Base+0xdbc>
   30fc8:	sub	ip, lr, r2
   30fcc:	strb	r0, [lr]
   30fd0:	add	ip, ip, ip, lsr #31
   30fd4:	asr	ip, ip, #1
   30fd8:	cmp	ip, #0
   30fdc:	ble	31004 <flatcc_json_parser_table_as_root@@Base+0xe18>
   30fe0:	mov	r3, r2
   30fe4:	add	ip, r2, ip
   30fe8:	mov	r2, lr
   30fec:	ldrb	r4, [r2, #-1]
   30ff0:	ldrb	r0, [r3]
   30ff4:	strb	r4, [r3], #1
   30ff8:	cmp	ip, r3
   30ffc:	strb	r0, [r2, #-1]!
   31000:	bne	30fec <flatcc_json_parser_table_as_root@@Base+0xe00>
   31004:	sub	r0, lr, r1
   31008:	pop	{r4, r5, pc}
   3100c:	strbtvs	r6, [r6], -r7, ror #12
   31010:	ldr	r3, [r0, #20]
   31014:	ldr	r2, [r0, #16]
   31018:	cmp	r3, r2
   3101c:	bcc	3104c <flatcc_json_parser_table_as_root@@Base+0xe60>
   31020:	ldr	r2, [r0, #36]	; 0x24
   31024:	mov	r1, r3
   31028:	cmp	r2, #0
   3102c:	moveq	r2, #3
   31030:	ldr	r3, [r0]
   31034:	streq	r2, [r0, #36]	; 0x24
   31038:	ldr	r2, [r0, #12]
   3103c:	sub	r1, r1, r3
   31040:	add	r2, r2, r1
   31044:	str	r3, [r0, #20]
   31048:	str	r2, [r0, #12]
   3104c:	mov	r2, #0
   31050:	strb	r2, [r3]
   31054:	bx	lr
   31058:	push	{r4, r5, r6, r7, r8, lr}
   3105c:	mov	r4, r0
   31060:	ldr	r3, [r0, #20]
   31064:	ldr	r5, [r0, #16]
   31068:	mov	r7, r1
   3106c:	cmp	r3, r5
   31070:	mov	r6, r2
   31074:	bcs	310f0 <flatcc_json_parser_table_as_root@@Base+0xf04>
   31078:	sub	r5, r5, r3
   3107c:	cmp	r5, r6
   31080:	bcs	310d0 <flatcc_json_parser_table_as_root@@Base+0xee4>
   31084:	mov	r8, #0
   31088:	mov	r2, r5
   3108c:	mov	r1, r7
   31090:	mov	r0, r3
   31094:	bl	14544 <memcpy@plt>
   31098:	ldr	r3, [r4, #20]
   3109c:	ldr	r2, [r4, #44]	; 0x2c
   310a0:	add	r3, r3, r5
   310a4:	str	r3, [r4, #20]
   310a8:	mov	r1, r8
   310ac:	mov	r0, r4
   310b0:	blx	r2
   310b4:	ldr	r3, [r4, #20]
   310b8:	ldr	r2, [r4, #16]
   310bc:	sub	r6, r6, r5
   310c0:	add	r7, r7, r5
   310c4:	sub	r5, r2, r3
   310c8:	cmp	r6, r5
   310cc:	bhi	31088 <flatcc_json_parser_table_as_root@@Base+0xe9c>
   310d0:	mov	r0, r3
   310d4:	mov	r2, r6
   310d8:	mov	r1, r7
   310dc:	bl	14544 <memcpy@plt>
   310e0:	ldr	r3, [r4, #20]
   310e4:	add	r6, r3, r6
   310e8:	str	r6, [r4, #20]
   310ec:	pop	{r4, r5, r6, r7, r8, pc}
   310f0:	ldr	r3, [r0, #44]	; 0x2c
   310f4:	mov	r1, #0
   310f8:	blx	r3
   310fc:	ldr	r5, [r4, #16]
   31100:	ldr	r3, [r4, #20]
   31104:	b	31078 <flatcc_json_parser_table_as_root@@Base+0xe8c>
   31108:	push	{r4, r5, r6, r7, r8, lr}
   3110c:	mov	r4, r0
   31110:	ldr	r3, [r0, #20]
   31114:	ldr	r5, [r0, #16]
   31118:	mov	r6, r1
   3111c:	cmp	r3, r5
   31120:	bcs	3119c <flatcc_json_parser_table_as_root@@Base+0xfb0>
   31124:	sub	r5, r5, r3
   31128:	cmp	r5, r6
   3112c:	bcs	3117c <flatcc_json_parser_table_as_root@@Base+0xf90>
   31130:	mov	r8, #32
   31134:	mov	r7, #0
   31138:	mov	r2, r5
   3113c:	mov	r0, r3
   31140:	mov	r1, r8
   31144:	bl	145bc <memset@plt>
   31148:	ldr	r3, [r4, #20]
   3114c:	ldr	r2, [r4, #44]	; 0x2c
   31150:	add	r3, r3, r5
   31154:	str	r3, [r4, #20]
   31158:	mov	r1, r7
   3115c:	mov	r0, r4
   31160:	blx	r2
   31164:	ldr	r3, [r4, #20]
   31168:	ldr	r2, [r4, #16]
   3116c:	sub	r6, r6, r5
   31170:	sub	r5, r2, r3
   31174:	cmp	r6, r5
   31178:	bhi	31138 <flatcc_json_parser_table_as_root@@Base+0xf4c>
   3117c:	mov	r0, r3
   31180:	mov	r2, r6
   31184:	mov	r1, #32
   31188:	bl	145bc <memset@plt>
   3118c:	ldr	r3, [r4, #20]
   31190:	add	r6, r3, r6
   31194:	str	r6, [r4, #20]
   31198:	pop	{r4, r5, r6, r7, r8, pc}
   3119c:	ldr	r3, [r0, #44]	; 0x2c
   311a0:	mov	r1, #0
   311a4:	blx	r3
   311a8:	ldr	r5, [r4, #16]
   311ac:	ldr	r3, [r4, #20]
   311b0:	b	31124 <flatcc_json_parser_table_as_root@@Base+0xf38>
   311b4:	push	{r4, r5, r6, lr}
   311b8:	ldrb	r1, [r0, #25]
   311bc:	ldr	r5, [r0, #32]
   311c0:	ldr	r2, [r0, #20]
   311c4:	ldr	ip, [r0, #16]
   311c8:	mul	r5, r5, r1
   311cc:	add	r1, r2, r5
   311d0:	cmp	ip, r1
   311d4:	bcc	311fc <flatcc_json_parser_table_as_root@@Base+0x1010>
   311d8:	mov	r4, r0
   311dc:	mov	r1, #32
   311e0:	mov	r0, r2
   311e4:	mov	r2, r5
   311e8:	bl	145bc <memset@plt>
   311ec:	ldr	r3, [r4, #20]
   311f0:	add	r5, r3, r5
   311f4:	str	r5, [r4, #20]
   311f8:	pop	{r4, r5, r6, pc}
   311fc:	mov	r1, r5
   31200:	pop	{r4, r5, r6, lr}
   31204:	b	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   31208:	cmp	r1, #0
   3120c:	push	{r4, r5, r6, lr}
   31210:	mov	r4, r0
   31214:	ldr	ip, [r0, #20]
   31218:	bne	31228 <flatcc_json_parser_table_as_root@@Base+0x103c>
   3121c:	ldr	r5, [r0, #16]
   31220:	cmp	ip, r5
   31224:	bcs	31260 <flatcc_json_parser_table_as_root@@Base+0x1074>
   31228:	ldr	r0, [r4]
   3122c:	ldr	r3, [r4, #40]	; 0x28
   31230:	sub	r5, ip, r0
   31234:	mov	r1, r5
   31238:	mov	r2, #1
   3123c:	bl	14568 <fwrite@plt>
   31240:	ldr	ip, [r4, #12]
   31244:	ldr	r3, [r4]
   31248:	add	ip, ip, r5
   3124c:	str	ip, [r4, #12]
   31250:	str	r3, [r4, #20]
   31254:	mov	r2, #0
   31258:	strb	r2, [r3]
   3125c:	pop	{r4, r5, r6, pc}
   31260:	ldr	r3, [r0, #40]	; 0x28
   31264:	ldr	r1, [r0, #8]
   31268:	mov	r2, #1
   3126c:	ldr	r0, [r0]
   31270:	sub	r5, ip, r5
   31274:	bl	14568 <fwrite@plt>
   31278:	ldr	r0, [r4]
   3127c:	ldr	r1, [r4, #8]
   31280:	mov	r2, r5
   31284:	add	r1, r0, r1
   31288:	bl	14544 <memcpy@plt>
   3128c:	ldr	r2, [r4, #12]
   31290:	ldr	r3, [r4]
   31294:	ldr	r1, [r4, #8]
   31298:	add	r3, r3, r5
   3129c:	add	r2, r2, r1
   312a0:	str	r3, [r4, #20]
   312a4:	str	r2, [r4, #12]
   312a8:	b	31254 <flatcc_json_parser_table_as_root@@Base+0x1068>
   312ac:	ldr	r3, [r0, #20]
   312b0:	mov	r2, #0
   312b4:	push	{r4, r5, r6, lr}
   312b8:	ldr	r5, [r0]
   312bc:	strb	r2, [r3]
   312c0:	ldr	r1, [r0, #20]
   312c4:	ldr	r2, [r0, #16]
   312c8:	cmp	r1, r2
   312cc:	popcc	{r4, r5, r6, pc}
   312d0:	mov	r4, r0
   312d4:	ldm	r0, {r0, r1}
   312d8:	sub	r5, r3, r5
   312dc:	lsl	r1, r1, #1
   312e0:	bl	1455c <realloc@plt>
   312e4:	cmp	r0, #0
   312e8:	beq	3131c <flatcc_json_parser_table_as_root@@Base+0x1130>
   312ec:	ldr	r3, [r4, #4]
   312f0:	add	r2, r0, r5
   312f4:	str	r2, [r4, #20]
   312f8:	lsl	r3, r3, #1
   312fc:	sub	r1, r3, #64	; 0x40
   31300:	add	ip, r0, r1
   31304:	stm	r4, {r0, r3}
   31308:	str	ip, [r4, #16]
   3130c:	str	r1, [r4, #8]
   31310:	mov	r3, #0
   31314:	strb	r3, [r2]
   31318:	pop	{r4, r5, r6, pc}
   3131c:	ldr	r3, [r4, #36]	; 0x24
   31320:	ldr	r2, [r4]
   31324:	cmp	r3, #0
   31328:	moveq	r3, #3
   3132c:	streq	r3, [r4, #36]	; 0x24
   31330:	ldr	r3, [r4, #12]
   31334:	str	r2, [r4, #20]
   31338:	add	r3, r3, r5
   3133c:	str	r3, [r4, #12]
   31340:	b	31310 <flatcc_json_parser_table_as_root@@Base+0x1124>
   31344:	cmp	r0, #99	; 0x63
   31348:	mov	r3, r0
   3134c:	bls	313a4 <flatcc_json_parser_table_as_root@@Base+0x11b8>
   31350:	ldr	r2, [pc, #156]	; 313f4 <flatcc_json_parser_table_as_root@@Base+0x1208>
   31354:	push	{lr}		; (str lr, [sp, #-4]!)
   31358:	mov	r0, #100	; 0x64
   3135c:	umull	lr, r2, r2, r3
   31360:	ldr	ip, [pc, #144]	; 313f8 <flatcc_json_parser_table_as_root@@Base+0x120c>
   31364:	mov	lr, #0
   31368:	lsr	r2, r2, #5
   3136c:	add	ip, pc, ip
   31370:	mul	r0, r0, r2
   31374:	strb	lr, [r1, #3]
   31378:	sub	r3, r3, r0
   3137c:	add	r2, r2, #48	; 0x30
   31380:	uxtb	r3, r3
   31384:	mov	r0, #3
   31388:	ldrb	lr, [ip, r3, lsl #1]
   3138c:	add	r3, ip, r3, lsl #1
   31390:	strb	lr, [r1, #1]
   31394:	ldrb	r3, [r3, #1]
   31398:	strb	r2, [r1]
   3139c:	strb	r3, [r1, #2]
   313a0:	pop	{pc}		; (ldr pc, [sp], #4)
   313a4:	cmp	r0, #9
   313a8:	bls	313dc <flatcc_json_parser_table_as_root@@Base+0x11f0>
   313ac:	ldr	r2, [pc, #72]	; 313fc <flatcc_json_parser_table_as_root@@Base+0x1210>
   313b0:	sxth	r3, r0
   313b4:	add	r2, pc, r2
   313b8:	mov	r0, #0
   313bc:	strb	r0, [r1, #2]
   313c0:	ldrb	ip, [r2, r3, lsl #1]
   313c4:	add	r3, r2, r3, lsl #1
   313c8:	mov	r0, #2
   313cc:	strb	ip, [r1]
   313d0:	ldrb	r3, [r3, #1]
   313d4:	strb	r3, [r1, #1]
   313d8:	bx	lr
   313dc:	add	r3, r3, #48	; 0x30
   313e0:	mov	r2, #0
   313e4:	mov	r0, #1
   313e8:	strb	r3, [r1]
   313ec:	strb	r2, [r1, #1]
   313f0:	bx	lr
   313f4:	mvnpl	r8, pc, lsl r5
   313f8:	andeq	r2, r1, ip, asr #12
   313fc:	andeq	r2, r1, r4, lsl #12
   31400:	ldr	r3, [pc, #32]	; 31428 <flatcc_json_parser_table_as_root@@Base+0x123c>
   31404:	ldr	r1, [pc, #32]	; 3142c <flatcc_json_parser_table_as_root@@Base+0x1240>
   31408:	ldr	r0, [pc, #32]	; 31430 <flatcc_json_parser_table_as_root@@Base+0x1244>
   3140c:	add	r3, pc, r3
   31410:	push	{r4, lr}
   31414:	mov	r2, #239	; 0xef
   31418:	add	r3, r3, #228	; 0xe4
   3141c:	add	r1, pc, r1
   31420:	add	r0, pc, r0
   31424:	bl	14610 <__assert_fail@plt>
   31428:	andeq	r2, r1, ip, lsr #11
   3142c:	andeq	r2, r1, r8, lsr #2
   31430:	ldrdeq	r2, [r1], -r8
   31434:	cmp	r0, #0
   31438:	bne	31464 <flatcc_json_parser_table_as_root@@Base+0x1278>
   3143c:	ldr	r3, [pc, #68]	; 31488 <flatcc_json_parser_table_as_root@@Base+0x129c>
   31440:	mov	r2, #5
   31444:	add	r3, pc, r3
   31448:	add	ip, r3, #256	; 0x100
   3144c:	ldr	r0, [r3, #256]	; 0x100
   31450:	ldrh	r3, [ip, #4]
   31454:	str	r0, [r1]
   31458:	mov	r0, r2
   3145c:	strh	r3, [r1, #4]
   31460:	bx	lr
   31464:	ldr	r3, [pc, #32]	; 3148c <flatcc_json_parser_table_as_root@@Base+0x12a0>
   31468:	mov	r2, #4
   3146c:	add	r3, pc, r3
   31470:	ldrb	ip, [r3, #252]	; 0xfc
   31474:	ldr	r0, [r3, #248]	; 0xf8
   31478:	strb	ip, [r1, #4]
   3147c:	str	r0, [r1]
   31480:	mov	r0, r2
   31484:	bx	lr
   31488:	andeq	r2, r1, r4, ror r5
   3148c:	andeq	r2, r1, ip, asr #10
   31490:	push	{r4, r5, lr}
   31494:	sub	sp, sp, #12
   31498:	cmp	r1, #0
   3149c:	cmpne	r2, #7
   314a0:	mov	r2, #0
   314a4:	mov	r5, r0
   314a8:	str	r2, [sp, #4]
   314ac:	bls	314ec <flatcc_json_parser_table_as_root@@Base+0x1300>
   314b0:	cmp	r3, #0
   314b4:	beq	314e0 <flatcc_json_parser_table_as_root@@Base+0x12f4>
   314b8:	mov	r2, #4
   314bc:	mov	r4, r1
   314c0:	add	r0, sp, r2
   314c4:	mov	r1, r3
   314c8:	bl	145c8 <strncpy@plt>
   314cc:	ldr	r2, [r4, #4]
   314d0:	ldr	r3, [sp, #4]
   314d4:	cmp	r2, r3
   314d8:	cmpne	r3, #0
   314dc:	bne	31520 <flatcc_json_parser_table_as_root@@Base+0x1334>
   314e0:	mov	r0, #1
   314e4:	add	sp, sp, #12
   314e8:	pop	{r4, r5, pc}
   314ec:	ldr	r3, [r0, #36]	; 0x24
   314f0:	ldr	r1, [pc, #92]	; 31554 <flatcc_json_parser_table_as_root@@Base+0x1368>
   314f4:	cmp	r3, r2
   314f8:	moveq	r3, #1
   314fc:	streq	r3, [r0, #36]	; 0x24
   31500:	ldr	r3, [pc, #80]	; 31558 <flatcc_json_parser_table_as_root@@Base+0x136c>
   31504:	ldr	r0, [pc, #80]	; 3155c <flatcc_json_parser_table_as_root@@Base+0x1370>
   31508:	add	r3, pc, r3
   3150c:	ldr	r2, [pc, #76]	; 31560 <flatcc_json_parser_table_as_root@@Base+0x1374>
   31510:	add	r3, r3, #264	; 0x108
   31514:	add	r1, pc, r1
   31518:	add	r0, pc, r0
   3151c:	bl	14610 <__assert_fail@plt>
   31520:	ldr	r3, [r5, #36]	; 0x24
   31524:	ldr	r1, [pc, #56]	; 31564 <flatcc_json_parser_table_as_root@@Base+0x1378>
   31528:	cmp	r3, #0
   3152c:	moveq	r3, #1
   31530:	streq	r3, [r5, #36]	; 0x24
   31534:	ldr	r3, [pc, #44]	; 31568 <flatcc_json_parser_table_as_root@@Base+0x137c>
   31538:	ldr	r0, [pc, #44]	; 3156c <flatcc_json_parser_table_as_root@@Base+0x1380>
   3153c:	add	r3, pc, r3
   31540:	ldr	r2, [pc, #40]	; 31570 <flatcc_json_parser_table_as_root@@Base+0x1384>
   31544:	add	r3, r3, #264	; 0x108
   31548:	add	r1, pc, r1
   3154c:	add	r0, pc, r0
   31550:	bl	14610 <__assert_fail@plt>
   31554:	andeq	r2, r1, r0, lsl #24
   31558:			; <UNDEFINED> instruction: 0x000124b0
   3155c:	andeq	r2, r1, r0, ror #24
   31560:	strdeq	r0, [r0], -fp
   31564:	andeq	r2, r1, ip, asr #23
   31568:	andeq	r2, r1, ip, ror r4
   3156c:	andeq	r2, r1, ip, asr #24
   31570:	andeq	r0, r0, r4, lsl #8
   31574:	cmp	r2, #0
   31578:	beq	316a4 <flatcc_json_parser_table_as_root@@Base+0x14b8>
   3157c:	bics	ip, r3, #224	; 0xe0
   31580:	push	{r4, r5, r6, r7, lr}
   31584:	ldr	r6, [r2]
   31588:	beq	31698 <flatcc_json_parser_table_as_root@@Base+0x14ac>
   3158c:	cmp	ip, #1
   31590:	movne	r1, #0
   31594:	movne	r3, #3
   31598:	bne	3168c <flatcc_json_parser_table_as_root@@Base+0x14a0>
   3159c:	ldr	r5, [pc, #340]	; 316f8 <flatcc_json_parser_table_as_root@@Base+0x150c>
   315a0:	add	r5, pc, r5
   315a4:	cmp	r6, #2
   315a8:	bls	31624 <flatcc_json_parser_table_as_root@@Base+0x1438>
   315ac:	add	r4, r0, #4
   315b0:	add	ip, r1, #3
   315b4:	ldrb	r0, [ip, #-3]
   315b8:	sub	r6, r6, #3
   315bc:	cmp	r6, #2
   315c0:	mov	r1, ip
   315c4:	ldrb	lr, [r5, r0, lsr #2]
   315c8:	add	ip, ip, #3
   315cc:	mov	r0, r4
   315d0:	strb	lr, [r4, #-4]
   315d4:	ldrb	lr, [ip, #-6]
   315d8:	ldrb	r7, [ip, #-5]
   315dc:	add	r4, r4, #4
   315e0:	lsl	lr, lr, #4
   315e4:	and	lr, lr, #48	; 0x30
   315e8:	orr	lr, lr, r7, lsr #4
   315ec:	ldrb	lr, [r5, lr]
   315f0:	strb	lr, [r4, #-7]
   315f4:	ldrb	lr, [ip, #-5]
   315f8:	ldrb	r7, [ip, #-4]
   315fc:	lsl	lr, lr, #2
   31600:	and	lr, lr, #60	; 0x3c
   31604:	orr	lr, lr, r7, lsr #6
   31608:	ldrb	lr, [r5, lr]
   3160c:	strb	lr, [r4, #-6]
   31610:	ldrb	lr, [ip, #-4]
   31614:	and	lr, lr, #63	; 0x3f
   31618:	ldrb	lr, [r5, lr]
   3161c:	strb	lr, [r4, #-5]
   31620:	bhi	315b4 <flatcc_json_parser_table_as_root@@Base+0x13c8>
   31624:	cmp	r6, #1
   31628:	and	r3, r3, #128	; 0x80
   3162c:	beq	316bc <flatcc_json_parser_table_as_root@@Base+0x14d0>
   31630:	cmp	r6, #2
   31634:	bne	316b0 <flatcc_json_parser_table_as_root@@Base+0x14c4>
   31638:	ldrb	ip, [r1]
   3163c:	cmp	r3, #0
   31640:	ldrb	ip, [r5, ip, lsr #2]
   31644:	strb	ip, [r0]
   31648:	ldrb	ip, [r1]
   3164c:	ldrb	lr, [r1, #1]
   31650:	lsl	ip, ip, #4
   31654:	and	ip, ip, #48	; 0x30
   31658:	orr	ip, ip, lr, lsr #4
   3165c:	ldrb	ip, [r5, ip]
   31660:	strb	ip, [r0, #1]
   31664:	ldrb	r1, [r1, #1]
   31668:	lsl	r1, r1, #2
   3166c:	and	r1, r1, #60	; 0x3c
   31670:	ldrb	r1, [r5, r1]
   31674:	strb	r1, [r0, #2]
   31678:	beq	316f0 <flatcc_json_parser_table_as_root@@Base+0x1504>
   3167c:	mov	r3, #61	; 0x3d
   31680:	strb	r3, [r0, #3]
   31684:	ldr	r1, [r2]
   31688:	mov	r3, #0
   3168c:	str	r1, [r2]
   31690:	mov	r0, r3
   31694:	pop	{r4, r5, r6, r7, pc}
   31698:	ldr	r5, [pc, #92]	; 316fc <flatcc_json_parser_table_as_root@@Base+0x1510>
   3169c:	add	r5, pc, r5
   316a0:	b	315a4 <flatcc_json_parser_table_as_root@@Base+0x13b8>
   316a4:	mov	r3, #2
   316a8:	mov	r0, r3
   316ac:	bx	lr
   316b0:	ldr	r1, [r2]
   316b4:	mov	r3, #0
   316b8:	b	3168c <flatcc_json_parser_table_as_root@@Base+0x14a0>
   316bc:	ldrb	ip, [r1]
   316c0:	cmp	r3, #0
   316c4:	movne	r3, #61	; 0x3d
   316c8:	ldrb	ip, [r5, ip, lsr #2]
   316cc:	strb	ip, [r0]
   316d0:	ldrb	r1, [r1]
   316d4:	strbne	r3, [r0, #2]
   316d8:	strbne	r3, [r0, #3]
   316dc:	movne	r3, #0
   316e0:	lsl	r1, r1, #4
   316e4:	and	r1, r1, #48	; 0x30
   316e8:	ldrb	r1, [r5, r1]
   316ec:	strb	r1, [r0, #1]
   316f0:	ldr	r1, [r2]
   316f4:	b	3168c <flatcc_json_parser_table_as_root@@Base+0x14a0>
   316f8:	andeq	r2, r1, r8, asr ip
   316fc:	andeq	r2, r1, r8, lsl fp
   31700:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31704:	sub	sp, sp, #164	; 0xa4
   31708:	subs	r1, r0, #0
   3170c:	vstr	d0, [sp, #88]	; 0x58
   31710:	str	r1, [sp, #120]	; 0x78
   31714:	beq	322d4 <flatcc_json_parser_table_as_root@@Base+0x20e8>
   31718:	vmov	r2, r3, d0
   3171c:	vmov	r4, s0
   31720:	adds	r6, r2, r2
   31724:	adc	r7, r3, r3
   31728:	mov	r5, r3
   3172c:	ldr	r3, [pc, #1332]	; 31c68 <flatcc_json_parser_table_as_root@@Base+0x1a7c>
   31730:	mov	r2, #0
   31734:	cmp	r7, r3
   31738:	cmpeq	r6, r2
   3173c:	bhi	32044 <flatcc_json_parser_table_as_root@@Base+0x1e58>
   31740:	cmp	r4, #0
   31744:	sbcs	r3, r5, #0
   31748:	movlt	r3, #45	; 0x2d
   3174c:	vldrlt	d7, [sp, #88]	; 0x58
   31750:	ldrlt	r2, [sp, #120]	; 0x78
   31754:	ldrge	r3, [sp, #120]	; 0x78
   31758:	addlt	r5, r5, #-2147483648	; 0x80000000
   3175c:	vneglt.f64	d7, d7
   31760:	strblt	r3, [r2]
   31764:	addlt	r3, r2, #1
   31768:	str	r3, [sp, #84]	; 0x54
   3176c:	vstrlt	d7, [sp, #88]	; 0x58
   31770:	orrs	r3, r4, r5
   31774:	beq	3201c <flatcc_json_parser_table_as_root@@Base+0x1e30>
   31778:	ldr	r3, [pc, #1260]	; 31c6c <flatcc_json_parser_table_as_root@@Base+0x1a80>
   3177c:	mov	r2, #0
   31780:	cmp	r5, r3
   31784:	cmpeq	r4, r2
   31788:	beq	32088 <flatcc_json_parser_table_as_root@@Base+0x1e9c>
   3178c:	ldrd	sl, [sp, #88]	; 0x58
   31790:	and	r0, sl, r2
   31794:	and	r1, fp, r3
   31798:	orrs	r3, r0, r1
   3179c:	strd	r0, [sp, #40]	; 0x28
   317a0:	beq	32060 <flatcc_json_parser_table_as_root@@Base+0x1e74>
   317a4:	ldr	r6, [pc, #1220]	; 31c70 <flatcc_json_parser_table_as_root@@Base+0x1a84>
   317a8:	mvn	r2, #0
   317ac:	ldr	r3, [pc, #1232]	; 31c84 <flatcc_json_parser_table_as_root@@Base+0x1a98>
   317b0:	and	r6, r6, fp, lsr #20
   317b4:	and	r2, r2, sl
   317b8:	sub	r6, r6, #1072	; 0x430
   317bc:	and	r3, r3, fp
   317c0:	adds	r8, r2, #0
   317c4:	sub	r1, r6, #3
   317c8:	adc	r9, r3, #1048576	; 0x100000
   317cc:	sub	r6, r6, #4
   317d0:	str	r1, [sp, #32]
   317d4:	ldr	ip, [sp, #32]
   317d8:	mov	r2, r8
   317dc:	mov	r3, r9
   317e0:	lsl	r1, r3, #10
   317e4:	orr	r1, r1, r2, lsr #22
   317e8:	lsl	r0, r2, #10
   317ec:	mov	r3, r1
   317f0:	ldr	r1, [pc, #1148]	; 31c74 <flatcc_json_parser_table_as_root@@Base+0x1a88>
   317f4:	mov	r2, r0
   317f8:	mov	r0, #0
   317fc:	and	r0, r0, r2
   31800:	and	r1, r1, r3
   31804:	orrs	r1, r0, r1
   31808:	sub	ip, ip, #10
   3180c:	beq	317e0 <flatcc_json_parser_table_as_root@@Base+0x15f4>
   31810:	cmp	r2, #0
   31814:	sbcs	r1, r3, #0
   31818:	blt	31834 <flatcc_json_parser_table_as_root@@Base+0x1648>
   3181c:	adds	r2, r2, r2
   31820:	adc	r3, r3, r3
   31824:	cmp	r2, #0
   31828:	sbcs	r1, r3, #0
   3182c:	sub	ip, ip, #1
   31830:	bge	3181c <flatcc_json_parser_table_as_root@@Base+0x1630>
   31834:	adds	r0, r8, r8
   31838:	adc	r1, r9, r9
   3183c:	sub	r7, r6, #10
   31840:	strd	r0, [sp, #48]	; 0x30
   31844:	adds	r0, r0, #1
   31848:	adc	r1, r1, #0
   3184c:	lsl	lr, r1, #10
   31850:	lsl	r4, r0, #10
   31854:	ldr	r5, [pc, #1048]	; 31c74 <flatcc_json_parser_table_as_root@@Base+0x1a88>
   31858:	orr	lr, lr, r0, lsr #22
   3185c:	mov	r0, r4
   31860:	mov	r4, #0
   31864:	and	r5, r5, lr
   31868:	and	r4, r4, r0
   3186c:	orrs	r4, r4, r5
   31870:	mov	r1, lr
   31874:	mov	lr, r7
   31878:	sub	r7, r7, #10
   3187c:	beq	3184c <flatcc_json_parser_table_as_root@@Base+0x1660>
   31880:	mov	r5, r1
   31884:	mov	r4, r0
   31888:	cmp	r0, #0
   3188c:	sbcs	r1, r1, #0
   31890:	strd	r4, [sp, #64]	; 0x40
   31894:	blt	318b8 <flatcc_json_parser_table_as_root@@Base+0x16cc>
   31898:	mov	r1, r5
   3189c:	adds	r0, r0, r0
   318a0:	adc	r1, r1, r1
   318a4:	cmp	r0, #0
   318a8:	sbcs	r4, r1, #0
   318ac:	sub	lr, lr, #1
   318b0:	bge	3189c <flatcc_json_parser_table_as_root@@Base+0x16b0>
   318b4:	strd	r0, [sp, #64]	; 0x40
   318b8:	vldr	d7, [sp, #88]	; 0x58
   318bc:	vcmpe.f64	d7, #0.0
   318c0:	vmrs	APSR_nzcv, fpscr
   318c4:	ble	322b0 <flatcc_json_parser_table_as_root@@Base+0x20c4>
   318c8:	vldr	d7, [pc, #896]	; 31c50 <flatcc_json_parser_table_as_root@@Base+0x1a64>
   318cc:	vldr	d6, [sp, #88]	; 0x58
   318d0:	vcmpe.f64	d6, d7
   318d4:	vmrs	APSR_nzcv, fpscr
   318d8:	bhi	322b0 <flatcc_json_parser_table_as_root@@Base+0x20c4>
   318dc:	ldr	r5, [pc, #928]	; 31c84 <flatcc_json_parser_table_as_root@@Base+0x1a98>
   318e0:	mvn	r4, #0
   318e4:	and	r5, r5, fp
   318e8:	and	r4, r4, sl
   318ec:	orr	r4, r4, r5
   318f0:	ldr	r5, [sp, #44]	; 0x2c
   318f4:	adds	r5, r5, #0
   318f8:	movne	r5, #1
   318fc:	cmp	r4, #0
   31900:	movne	r5, #0
   31904:	cmp	r5, #0
   31908:	bne	32220 <flatcc_json_parser_table_as_root@@Base+0x2034>
   3190c:	ldrd	r4, [sp, #48]	; 0x30
   31910:	subs	r4, r4, #1
   31914:	sbc	r5, r5, #0
   31918:	mvn	r7, #60	; 0x3c
   3191c:	sub	r7, r7, ip
   31920:	vldr	d5, [pc, #816]	; 31c58 <flatcc_json_parser_table_as_root@@Base+0x1a6c>
   31924:	vmov	s15, r7
   31928:	vldr	d6, [pc, #816]	; 31c60 <flatcc_json_parser_table_as_root@@Base+0x1a74>
   3192c:	sub	r6, r6, lr
   31930:	sub	r7, r6, #32
   31934:	vcvt.f64.s32	d7, s15
   31938:	lsl	fp, r5, r6
   3193c:	rsb	r5, r6, #32
   31940:	orr	fp, fp, r4, lsl r7
   31944:	lsl	sl, r4, r6
   31948:	vmul.f64	d7, d7, d5
   3194c:	orr	fp, fp, r4, lsr r5
   31950:	vcmpe.f64	d7, d6
   31954:	vcvt.s32.f64	s11, d7
   31958:	vmrs	APSR_nzcv, fpscr
   3195c:	vmov	r4, s11
   31960:	bmi	31978 <flatcc_json_parser_table_as_root@@Base+0x178c>
   31964:	vcvt.f64.s32	d5, s11
   31968:	vsub.f64	d7, d7, d5
   3196c:	vcmp.f64	d7, d6
   31970:	vmrs	APSR_nzcv, fpscr
   31974:	addne	r4, r4, #1
   31978:	add	r4, r4, #344	; 0x158
   3197c:	adds	r8, r4, #3
   31980:	addmi	r8, r4, #10
   31984:	ldr	r1, [pc, #748]	; 31c78 <flatcc_json_parser_table_as_root@@Base+0x1a8c>
   31988:	asr	r8, r8, #3
   3198c:	add	r8, r8, #1
   31990:	add	r1, pc, r1
   31994:	mov	r6, sl
   31998:	mov	r7, #0
   3199c:	lsl	r0, r8, #4
   319a0:	add	r4, r1, #320	; 0x140
   319a4:	strd	r6, [sp, #72]	; 0x48
   319a8:	add	r4, r4, r0
   319ac:	ldrd	r6, [sp, #64]	; 0x40
   319b0:	ldrd	r4, [r4, #-8]
   319b4:	mov	r7, #0
   319b8:	mov	r8, r6
   319bc:	mov	r9, r7
   319c0:	mov	r6, r2
   319c4:	mov	r7, #0
   319c8:	strd	r8, [sp, #56]	; 0x38
   319cc:	strd	r6, [sp, #48]	; 0x30
   319d0:	mov	r6, r4
   319d4:	mov	r7, #0
   319d8:	strd	r4, [sp, #40]	; 0x28
   319dc:	strd	r6, [sp, #32]
   319e0:	ldrd	r4, [sp, #72]	; 0x48
   319e4:	str	r0, [sp, #124]	; 0x7c
   319e8:	ldr	r7, [sp, #60]	; 0x3c
   319ec:	ldr	r0, [sp, #32]
   319f0:	mov	r6, r4
   319f4:	str	r1, [sp, #140]	; 0x8c
   319f8:	mul	r2, r0, r5
   319fc:	mul	r0, r0, r7
   31a00:	mov	r7, r6
   31a04:	ldr	r6, [sp, #36]	; 0x24
   31a08:	mov	r5, r4
   31a0c:	ldr	r4, [sp, #32]
   31a10:	mla	r2, r7, r6, r2
   31a14:	ldr	r7, [sp, #56]	; 0x38
   31a18:	umull	r4, r5, r4, r5
   31a1c:	mla	r7, r7, r6, r0
   31a20:	ldr	r0, [sp, #32]
   31a24:	add	r8, r2, r5
   31a28:	str	r7, [sp, #136]	; 0x88
   31a2c:	umull	r4, r5, r0, fp
   31a30:	umull	r6, r7, r3, r0
   31a34:	strd	r4, [sp, #112]	; 0x70
   31a38:	ldrd	r4, [sp, #40]	; 0x28
   31a3c:	strd	r6, [sp, #104]	; 0x68
   31a40:	ldr	r7, [sp, #48]	; 0x30
   31a44:	ldr	r0, [sp, #36]	; 0x24
   31a48:	ldr	r4, [sp, #36]	; 0x24
   31a4c:	umull	r6, r7, r7, r5
   31a50:	add	r2, r1, #312	; 0x138
   31a54:	strd	r6, [sp, #96]	; 0x60
   31a58:	ldr	r7, [sp, #116]	; 0x74
   31a5c:	ldr	r1, [sp, #32]
   31a60:	mla	r0, fp, r0, r7
   31a64:	umull	sl, fp, r5, fp
   31a68:	mov	r6, sl
   31a6c:	mov	r7, fp
   31a70:	ldrd	sl, [sp, #48]	; 0x30
   31a74:	mul	r5, sl, r4
   31a78:	mov	sl, r0
   31a7c:	mla	r5, r1, fp, r5
   31a80:	ldr	r1, [sp, #124]	; 0x7c
   31a84:	str	r5, [sp, #128]	; 0x80
   31a88:	add	r1, r2, r1
   31a8c:	str	r1, [sp, #124]	; 0x7c
   31a90:	ldr	r1, [sp, #112]	; 0x70
   31a94:	mov	r2, #0
   31a98:	adds	r8, r8, r1
   31a9c:	ldr	r1, [sp, #32]
   31aa0:	ldr	r0, [sp, #68]	; 0x44
   31aa4:	ldr	r4, [sp, #56]	; 0x38
   31aa8:	adc	r9, r2, #0
   31aac:	umull	r0, r1, r1, r0
   31ab0:	adds	r8, r8, #-2147483648	; 0x80000000
   31ab4:	strd	r0, [sp, #112]	; 0x70
   31ab8:	ldr	r1, [sp, #32]
   31abc:	adc	r9, r9, #0
   31ac0:	ldr	r0, [sp, #44]	; 0x2c
   31ac4:	umull	r4, r5, r1, r4
   31ac8:	ldr	r1, [sp, #44]	; 0x2c
   31acc:	strd	r4, [sp, #144]	; 0x90
   31ad0:	subs	r4, r6, #1
   31ad4:	sbc	r5, r7, #0
   31ad8:	ldrd	r6, [sp, #72]	; 0x48
   31adc:	adds	sl, sl, r4
   31ae0:	adc	fp, r2, r5
   31ae4:	umull	r4, r5, r1, r6
   31ae8:	mla	r0, r0, r7, r5
   31aec:	adds	r8, r8, r4
   31af0:	adc	r9, r9, #0
   31af4:	adds	r0, sl, r0
   31af8:	adc	r1, fp, r2
   31afc:	ldrd	r4, [sp, #64]	; 0x40
   31b00:	mov	r7, r1
   31b04:	ldr	r1, [sp, #36]	; 0x24
   31b08:	mov	r6, r0
   31b0c:	ldr	r0, [sp, #116]	; 0x74
   31b10:	mov	sl, r9
   31b14:	mla	r1, r5, r1, r0
   31b18:	ldrd	r8, [sp, #40]	; 0x28
   31b1c:	str	r1, [sp, #72]	; 0x48
   31b20:	umull	r0, r1, r9, r5
   31b24:	strd	r0, [sp, #40]	; 0x28
   31b28:	ldrd	r0, [sp, #56]	; 0x38
   31b2c:	umull	r4, r5, r9, r0
   31b30:	mov	r0, r1
   31b34:	strd	r4, [sp, #56]	; 0x38
   31b38:	mla	r4, r9, r0, r5
   31b3c:	ldrd	r0, [sp, #40]	; 0x28
   31b40:	ldr	r5, [sp, #48]	; 0x30
   31b44:	strd	r8, [sp, #40]	; 0x28
   31b48:	adds	r0, r0, #1
   31b4c:	adc	r1, r1, #0
   31b50:	adds	r6, r6, sl
   31b54:	adc	r7, r7, r2
   31b58:	ldr	sl, [sp, #72]	; 0x48
   31b5c:	strd	r6, [sp, #64]	; 0x40
   31b60:	adds	sl, sl, r0
   31b64:	ldr	r6, [sp, #36]	; 0x24
   31b68:	mov	r0, r4
   31b6c:	ldr	r4, [sp, #32]
   31b70:	ldr	r7, [sp, #108]	; 0x6c
   31b74:	mov	r8, r9
   31b78:	umull	r4, r5, r5, r4
   31b7c:	mla	r4, r3, r6, r7
   31b80:	ldr	r7, [sp, #52]	; 0x34
   31b84:	ldr	r9, [sp, #100]	; 0x64
   31b88:	adc	fp, r2, r1
   31b8c:	adds	r6, sl, r0
   31b90:	mla	r8, r8, r7, r9
   31b94:	ldr	sl, [sp, #148]	; 0x94
   31b98:	adc	r7, fp, r2
   31b9c:	ldr	r9, [sp, #136]	; 0x88
   31ba0:	strd	r6, [sp, #32]
   31ba4:	add	r6, r9, sl
   31ba8:	ldr	sl, [sp, #112]	; 0x70
   31bac:	ldr	r9, [sp, #128]	; 0x80
   31bb0:	adds	r6, r6, sl
   31bb4:	add	r0, r9, r5
   31bb8:	ldr	r5, [sp, #104]	; 0x68
   31bbc:	adc	r7, r2, #0
   31bc0:	adds	r6, r6, #-2147483648	; 0x80000000
   31bc4:	mov	sl, r4
   31bc8:	adc	r7, r7, #0
   31bcc:	ldr	r4, [sp, #56]	; 0x38
   31bd0:	adds	r0, r0, r5
   31bd4:	adc	r1, r2, #0
   31bd8:	adds	sl, sl, r8
   31bdc:	adc	fp, r2, r2
   31be0:	adds	r6, r6, r4
   31be4:	ldr	r4, [sp, #44]	; 0x2c
   31be8:	adc	r7, r7, #0
   31bec:	adds	r0, r0, #-2147483648	; 0x80000000
   31bf0:	umlal	sl, fp, r4, r3
   31bf4:	ldr	r3, [sp, #124]	; 0x7c
   31bf8:	ldr	r4, [sp, #96]	; 0x60
   31bfc:	mov	r8, r7
   31c00:	adc	r1, r1, #0
   31c04:	ldrd	r6, [sp, #32]
   31c08:	adds	r0, r0, r4
   31c0c:	ldrsh	r3, [r3, #8]
   31c10:	adc	r1, r1, #0
   31c14:	mov	r4, r1
   31c18:	ldrd	r0, [sp, #64]	; 0x40
   31c1c:	adds	r6, r6, r8
   31c20:	adc	r7, r7, r2
   31c24:	mov	r8, r6
   31c28:	add	ip, r3, ip
   31c2c:	add	lr, lr, r3
   31c30:	ldr	r3, [sp, #124]	; 0x7c
   31c34:	subs	r6, r8, r0
   31c38:	mov	r9, r7
   31c3c:	sbc	r7, r9, r1
   31c40:	ldrsh	r3, [r3, #10]
   31c44:	strd	r6, [sp, #32]
   31c48:	b	31cac <flatcc_json_parser_table_as_root@@Base+0x1ac0>
   31c4c:	nop			; (mov r0, r0)
   31c50:			; <UNDEFINED> instruction: 0xffffffff
   31c54:	svcvc	0x00efffff
   31c58:			; <UNDEFINED> instruction: 0x509f79fe
   31c5c:	svccc	0x00d34413
	...
   31c68:			; <UNDEFINED> instruction: 0xffe00000
   31c6c:	svcvc	0x00f00000	; IMB
   31c70:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   31c74:			; <UNDEFINED> instruction: 0xffc00000
   31c78:	andeq	r2, r1, r8, lsr #32
   31c7c:	stclgt	12, cr12, [ip], {205}	; 0xcd
   31c80:	andeq	r2, r1, r0, ror #4
   31c84:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   31c88:			; <UNDEFINED> instruction: 0xfffffbce
   31c8c:			; <UNDEFINED> instruction: 0xfffffbcd
   31c90:	andeq	r2, r1, r4, ror #1
   31c94:	strdeq	r1, [r1], -ip
   31c98:	andeq	r1, r1, r4, ror pc
   31c9c:	strdeq	r1, [r1], -r4
   31ca0:	ldrdeq	r1, [r1], -r8
   31ca4:	andeq	r1, r1, r0, asr pc
   31ca8:			; <UNDEFINED> instruction: 0x00011fbc
   31cac:	adds	r6, r4, sl
   31cb0:	adc	r7, r2, fp
   31cb4:	cmp	r1, r9
   31cb8:	cmpeq	r0, r8
   31cbc:	str	r3, [sp, #144]	; 0x90
   31cc0:	add	r0, lr, #64	; 0x40
   31cc4:	add	r3, ip, #64	; 0x40
   31cc8:	strd	r8, [sp, #112]	; 0x70
   31ccc:	strd	r6, [sp, #128]	; 0x80
   31cd0:	str	r0, [sp, #136]	; 0x88
   31cd4:	str	r3, [sp, #124]	; 0x7c
   31cd8:	bhi	322ac <flatcc_json_parser_table_as_root@@Base+0x20c0>
   31cdc:	add	r1, ip, #129	; 0x81
   31ce0:	mvn	r8, #63	; 0x3f
   31ce4:	add	r3, r1, r1, lsl #4
   31ce8:	sub	r8, r8, ip
   31cec:	add	r1, r1, r3, lsl #3
   31cf0:	mov	r0, #1
   31cf4:	sub	ip, r8, #32
   31cf8:	add	r1, r1, r1, lsl #3
   31cfc:	mov	r4, #0
   31d00:	mov	r5, #0
   31d04:	asr	r1, r1, #12
   31d08:	lsl	r3, r0, ip
   31d0c:	strd	r4, [sp, #96]	; 0x60
   31d10:	ldr	r9, [sp, #140]	; 0x8c
   31d14:	add	r4, r1, r0
   31d18:	str	r3, [sp, #100]	; 0x64
   31d1c:	ldrd	sl, [sp, #112]	; 0x70
   31d20:	rsb	lr, r8, #32
   31d24:	add	r3, r9, r4, lsl #2
   31d28:	ldr	r2, [sp, #100]	; 0x64
   31d2c:	lsr	r5, sl, r8
   31d30:	orr	r2, r2, r0, lsr lr
   31d34:	ldr	sl, [r3, #1704]	; 0x6a8
   31d38:	lsl	r3, r0, r8
   31d3c:	str	r2, [sp, #100]	; 0x64
   31d40:	str	r3, [sp, #96]	; 0x60
   31d44:	ldrd	r6, [sp, #96]	; 0x60
   31d48:	ldrd	r2, [sp, #112]	; 0x70
   31d4c:	orr	r5, r5, fp, lsl lr
   31d50:	subs	r6, r6, #1
   31d54:	sbc	r7, r7, #0
   31d58:	orr	r5, r5, r3, lsr ip
   31d5c:	and	r2, r2, r6
   31d60:	and	r3, r3, r7
   31d64:	cmp	r5, sl
   31d68:	strd	r2, [sp, #56]	; 0x38
   31d6c:	addcc	r3, r9, r1, lsl #2
   31d70:	movcc	r4, r1
   31d74:	ldrcc	sl, [r3, #1704]	; 0x6a8
   31d78:	cmp	r4, #0
   31d7c:	str	ip, [sp, #40]	; 0x28
   31d80:	str	lr, [sp, #48]	; 0x30
   31d84:	strd	r6, [sp, #104]	; 0x68
   31d88:	ble	32294 <flatcc_json_parser_table_as_root@@Base+0x20a8>
   31d8c:	mov	r1, sl
   31d90:	mov	r0, r5
   31d94:	bl	3d588 <flatcc_json_printer_clear@@Base+0x38>
   31d98:	ldr	r3, [sp, #84]	; 0x54
   31d9c:	mov	r1, sl
   31da0:	sub	r4, r4, #1
   31da4:	add	r0, r0, #48	; 0x30
   31da8:	strb	r0, [r3]
   31dac:	mov	r0, r5
   31db0:	bl	3d774 <flatcc_json_printer_clear@@Base+0x224>
   31db4:	ldr	r2, [sp, #40]	; 0x28
   31db8:	ldrd	r6, [sp, #56]	; 0x38
   31dbc:	mov	r3, #0
   31dc0:	mov	fp, r1
   31dc4:	lsl	r1, r1, r2
   31dc8:	ldr	r2, [sp, #48]	; 0x30
   31dcc:	lsl	r0, fp, r8
   31dd0:	orr	r1, r1, fp, lsr r2
   31dd4:	adds	r6, r6, r0
   31dd8:	adc	r7, r7, r1
   31ddc:	mov	r0, r6
   31de0:	mov	r1, r7
   31de4:	ldrd	r6, [sp, #32]
   31de8:	strd	r0, [sp, #72]	; 0x48
   31dec:	cmp	r1, r7
   31df0:	cmpeq	r0, r6
   31df4:	bcc	3229c <flatcc_json_parser_table_as_root@@Base+0x20b0>
   31df8:	ldr	r9, [sp, #84]	; 0x54
   31dfc:	ldrd	r6, [sp, #32]
   31e00:	str	r3, [sp, #72]	; 0x48
   31e04:	mov	r5, #1
   31e08:	str	r8, [sp, #64]	; 0x40
   31e0c:	str	r9, [sp, #32]
   31e10:	b	31e78 <flatcc_json_parser_table_as_root@@Base+0x1c8c>
   31e14:	mov	r1, sl
   31e18:	mov	r0, fp
   31e1c:	bl	3d588 <flatcc_json_printer_clear@@Base+0x38>
   31e20:	ldr	r3, [sp, #32]
   31e24:	mov	r1, sl
   31e28:	add	r5, r5, #1
   31e2c:	sub	r4, r4, #1
   31e30:	add	r0, r0, #48	; 0x30
   31e34:	strb	r0, [r3, #1]!
   31e38:	mov	r0, fp
   31e3c:	str	r3, [sp, #32]
   31e40:	bl	3d774 <flatcc_json_printer_clear@@Base+0x224>
   31e44:	ldr	r3, [sp, #40]	; 0x28
   31e48:	lsl	r9, r1, r3
   31e4c:	ldr	r3, [sp, #48]	; 0x30
   31e50:	mov	fp, r1
   31e54:	orr	r9, r9, r1, lsr r3
   31e58:	ldr	r3, [sp, #64]	; 0x40
   31e5c:	lsl	r8, r1, r3
   31e60:	ldrd	r0, [sp, #56]	; 0x38
   31e64:	adds	r0, r0, r8
   31e68:	adc	r1, r1, r9
   31e6c:	cmp	r7, r1
   31e70:	cmpeq	r6, r0
   31e74:	bhi	320c0 <flatcc_json_parser_table_as_root@@Base+0x1ed4>
   31e78:	ldr	r3, [pc, #-516]	; 31c7c <flatcc_json_parser_table_as_root@@Base+0x1a90>
   31e7c:	cmp	r4, #0
   31e80:	umull	r3, sl, r3, sl
   31e84:	lsr	sl, sl, #3
   31e88:	bne	31e14 <flatcc_json_parser_table_as_root@@Base+0x1c28>
   31e8c:	ldr	r8, [sp, #64]	; 0x40
   31e90:	strd	r6, [sp, #32]
   31e94:	ldr	r3, [sp, #84]	; 0x54
   31e98:	str	r8, [sp, #64]	; 0x40
   31e9c:	add	r9, r3, r5
   31ea0:	mov	r0, r9
   31ea4:	ldrd	r6, [sp, #32]
   31ea8:	ldrd	r8, [sp, #56]	; 0x38
   31eac:	mov	r2, #1
   31eb0:	mov	r3, #0
   31eb4:	mov	lr, #10
   31eb8:	umull	sl, fp, r8, lr
   31ebc:	mul	r1, lr, r7
   31ec0:	ldr	ip, [sp, #64]	; 0x40
   31ec4:	mla	fp, lr, r9, fp
   31ec8:	str	r1, [sp, #32]
   31ecc:	lsr	r1, sl, ip
   31ed0:	ldr	ip, [sp, #48]	; 0x30
   31ed4:	ldr	r8, [sp, #40]	; 0x28
   31ed8:	umull	r6, r7, r6, lr
   31edc:	orr	r1, r1, fp, lsl ip
   31ee0:	orr	r1, r1, fp, lsr r8
   31ee4:	ldrd	r8, [sp, #104]	; 0x68
   31ee8:	mul	ip, lr, r3
   31eec:	and	r8, r8, sl
   31ef0:	ldr	sl, [sp, #32]
   31ef4:	umull	r2, r3, r2, lr
   31ef8:	and	r9, r9, fp
   31efc:	add	r7, sl, r7
   31f00:	cmp	r7, r9
   31f04:	add	r1, r1, #48	; 0x30
   31f08:	cmpeq	r6, r8
   31f0c:	add	r5, r5, #1
   31f10:	sub	r4, r4, #1
   31f14:	strb	r1, [r0], #1
   31f18:	add	r3, ip, r3
   31f1c:	bls	31eb8 <flatcc_json_parser_table_as_root@@Base+0x1ccc>
   31f20:	ldrd	sl, [sp, #128]	; 0x80
   31f24:	strd	r6, [sp, #32]
   31f28:	ldrd	r6, [sp, #112]	; 0x70
   31f2c:	ldr	ip, [sp, #124]	; 0x7c
   31f30:	subs	r0, r6, sl
   31f34:	sbc	r1, r7, fp
   31f38:	cmp	fp, r7
   31f3c:	cmpeq	sl, r6
   31f40:	ldr	r6, [sp, #136]	; 0x88
   31f44:	movhi	lr, #1
   31f48:	movls	lr, #0
   31f4c:	cmp	ip, r6
   31f50:	orrne	lr, lr, #1
   31f54:	cmp	lr, #0
   31f58:	bne	322ac <flatcc_json_parser_table_as_root@@Base+0x20c0>
   31f5c:	mul	r1, r2, r1
   31f60:	strd	r2, [sp, #24]
   31f64:	mla	r1, r0, r3, r1
   31f68:	umull	r2, r3, r2, r0
   31f6c:	ldrd	r6, [sp, #96]	; 0x60
   31f70:	mov	r0, r8
   31f74:	add	r3, r1, r3
   31f78:	mov	r1, r9
   31f7c:	strd	r6, [sp, #16]
   31f80:	strd	r0, [sp, #8]
   31f84:	ldrd	r0, [sp, #32]
   31f88:	strd	r0, [sp]
   31f8c:	mov	r1, r5
   31f90:	ldr	r0, [sp, #84]	; 0x54
   31f94:	bl	30dc0 <flatcc_json_parser_table_as_root@@Base+0xbd4>
   31f98:	ldr	r3, [sp, #144]	; 0x90
   31f9c:	cmp	r0, #0
   31fa0:	sub	r4, r4, r3
   31fa4:	beq	321f8 <flatcc_json_parser_table_as_root@@Base+0x200c>
   31fa8:	cmp	r5, #2
   31fac:	subgt	r3, r5, #1
   31fb0:	movle	r3, #1
   31fb4:	cmp	r4, #0
   31fb8:	blt	3214c <flatcc_json_parser_table_as_root@@Base+0x1f60>
   31fbc:	cmp	r4, #2
   31fc0:	bgt	321d4 <flatcc_json_parser_table_as_root@@Base+0x1fe8>
   31fc4:	cmp	r4, #0
   31fc8:	beq	31ffc <flatcc_json_parser_table_as_root@@Base+0x1e10>
   31fcc:	sub	r1, r4, #1
   31fd0:	ble	31ffc <flatcc_json_parser_table_as_root@@Base+0x1e10>
   31fd4:	ldr	r3, [sp, #84]	; 0x54
   31fd8:	add	r4, r4, r5
   31fdc:	add	r4, r3, r4
   31fe0:	mov	r2, #48	; 0x30
   31fe4:	add	r3, r3, r5
   31fe8:	strb	r2, [r3], #1
   31fec:	cmp	r4, r3
   31ff0:	bne	31fe8 <flatcc_json_parser_table_as_root@@Base+0x1dfc>
   31ff4:	add	r5, r5, #1
   31ff8:	add	r5, r5, r1
   31ffc:	ldr	r2, [sp, #84]	; 0x54
   32000:	ldr	r3, [sp, #120]	; 0x78
   32004:	add	r0, r2, r5
   32008:	sub	r0, r0, r3
   3200c:	mov	r3, #0
   32010:	strb	r3, [r2, r5]
   32014:	add	sp, sp, #164	; 0xa4
   32018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3201c:	ldr	r1, [sp, #84]	; 0x54
   32020:	mov	r3, #0
   32024:	mov	r0, r1
   32028:	mov	r2, #48	; 0x30
   3202c:	strb	r2, [r1]
   32030:	strb	r3, [r0, #1]!
   32034:	ldr	r3, [sp, #120]	; 0x78
   32038:	sub	r0, r0, r3
   3203c:	add	sp, sp, #164	; 0xa4
   32040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32044:	vmov	r3, s0
   32048:	ldr	r1, [pc, #-976]	; 31c80 <flatcc_json_parser_table_as_root@@Base+0x1a94>
   3204c:	mov	r2, r5
   32050:	add	r1, pc, r1
   32054:	add	sp, sp, #164	; 0xa4
   32058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3205c:	b	145f8 <sprintf@plt>
   32060:	ldr	r9, [pc, #-996]	; 31c84 <flatcc_json_parser_table_as_root@@Base+0x1a98>
   32064:	mvn	r8, #0
   32068:	and	r8, r8, sl
   3206c:	and	r9, r9, fp
   32070:	orrs	r3, r8, r9
   32074:	beq	322f8 <flatcc_json_parser_table_as_root@@Base+0x210c>
   32078:	ldr	r3, [pc, #-1016]	; 31c88 <flatcc_json_parser_table_as_root@@Base+0x1a9c>
   3207c:	ldr	r6, [pc, #-1016]	; 31c8c <flatcc_json_parser_table_as_root@@Base+0x1aa0>
   32080:	str	r3, [sp, #32]
   32084:	b	317d4 <flatcc_json_parser_table_as_root@@Base+0x15e8>
   32088:	ldr	lr, [sp, #84]	; 0x54
   3208c:	mov	ip, #105	; 0x69
   32090:	mov	r0, lr
   32094:	mov	r1, #110	; 0x6e
   32098:	mov	r2, #102	; 0x66
   3209c:	mov	r3, #0
   320a0:	strb	ip, [lr]
   320a4:	strb	r1, [lr, #1]
   320a8:	strb	r2, [lr, #2]
   320ac:	strb	r3, [r0, #3]!
   320b0:	ldr	r3, [sp, #120]	; 0x78
   320b4:	sub	r0, r0, r3
   320b8:	add	sp, sp, #164	; 0xa4
   320bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   320c0:	mov	r8, r3
   320c4:	strd	r0, [sp, #72]	; 0x48
   320c8:	strd	r6, [sp, #32]
   320cc:	ldrd	r0, [sp, #128]	; 0x80
   320d0:	ldrd	r6, [sp, #112]	; 0x70
   320d4:	subs	r2, r6, r0
   320d8:	sbc	r3, r7, r1
   320dc:	cmp	r1, r7
   320e0:	cmpeq	r0, r6
   320e4:	ldr	r1, [sp, #124]	; 0x7c
   320e8:	ldr	r0, [sp, #136]	; 0x88
   320ec:	movhi	lr, #1
   320f0:	movls	lr, #0
   320f4:	cmp	r1, r0
   320f8:	orrne	lr, lr, #1
   320fc:	cmp	lr, #0
   32100:	bne	322ac <flatcc_json_parser_table_as_root@@Base+0x20c0>
   32104:	ldr	r1, [sp, #40]	; 0x28
   32108:	lsl	r8, sl, r8
   3210c:	lsl	ip, sl, r1
   32110:	ldr	r1, [sp, #48]	; 0x30
   32114:	mov	fp, #0
   32118:	str	r8, [sp, #16]
   3211c:	orr	ip, ip, sl, lsr r1
   32120:	ldrd	r0, [sp, #72]	; 0x48
   32124:	mov	sl, #1
   32128:	str	ip, [sp, #20]
   3212c:	strd	r0, [sp, #8]
   32130:	ldrd	r0, [sp, #32]
   32134:	strd	sl, [sp, #24]
   32138:	strd	r0, [sp]
   3213c:	mov	r1, r5
   32140:	ldr	r0, [sp, #84]	; 0x54
   32144:	bl	30dc0 <flatcc_json_parser_table_as_root@@Base+0xbd4>
   32148:	b	31f98 <flatcc_json_parser_table_as_root@@Base+0x1dac>
   3214c:	rsb	r1, r4, #0
   32150:	add	r2, r4, r5
   32154:	cmp	r1, r5
   32158:	cmnge	r2, #2
   3215c:	bge	32240 <flatcc_json_parser_table_as_root@@Base+0x2054>
   32160:	cmp	r5, #1
   32164:	beq	321d4 <flatcc_json_parser_table_as_root@@Base+0x1fe8>
   32168:	cmp	r3, r1
   3216c:	movlt	r1, r3
   32170:	cmp	r1, #0
   32174:	sub	ip, r5, r1
   32178:	ble	32198 <flatcc_json_parser_table_as_root@@Base+0x1fac>
   3217c:	ldr	r3, [sp, #84]	; 0x54
   32180:	add	r0, r3, ip
   32184:	add	r3, r3, r5
   32188:	ldrb	r2, [r3, #-1]
   3218c:	strb	r2, [r3], #-1
   32190:	cmp	r0, r3
   32194:	bne	32188 <flatcc_json_parser_table_as_root@@Base+0x1f9c>
   32198:	ldr	r2, [sp, #84]	; 0x54
   3219c:	mov	r3, #46	; 0x2e
   321a0:	adds	r0, r1, r4
   321a4:	strb	r3, [r2, ip]
   321a8:	add	r3, r5, #1
   321ac:	moveq	r5, r3
   321b0:	beq	31ffc <flatcc_json_parser_table_as_root@@Base+0x1e10>
   321b4:	ldr	ip, [sp, #84]	; 0x54
   321b8:	add	r5, r5, #2
   321bc:	mov	r2, #101	; 0x65
   321c0:	add	r1, ip, r5
   321c4:	strb	r2, [ip, r3]
   321c8:	bl	30f80 <flatcc_json_parser_table_as_root@@Base+0xd94>
   321cc:	add	r5, r5, r0
   321d0:	b	31ffc <flatcc_json_parser_table_as_root@@Base+0x1e10>
   321d4:	ldr	r2, [sp, #84]	; 0x54
   321d8:	add	r6, r5, #1
   321dc:	mov	r3, #101	; 0x65
   321e0:	strb	r3, [r2, r5]
   321e4:	mov	r0, r4
   321e8:	add	r1, r2, r6
   321ec:	bl	30f80 <flatcc_json_parser_table_as_root@@Base+0xd94>
   321f0:	add	r5, r6, r0
   321f4:	b	31ffc <flatcc_json_parser_table_as_root@@Base+0x1e10>
   321f8:	ldr	r4, [sp, #84]	; 0x54
   321fc:	ldr	r1, [pc, #-1396]	; 31c90 <flatcc_json_parser_table_as_root@@Base+0x1aa4>
   32200:	ldrd	r2, [sp, #88]	; 0x58
   32204:	add	r1, pc, r1
   32208:	mov	r0, r4
   3220c:	bl	145f8 <sprintf@plt>
   32210:	ldr	r2, [sp, #120]	; 0x78
   32214:	sub	r3, r4, r2
   32218:	add	r0, r3, r0
   3221c:	b	3203c <flatcc_json_parser_table_as_root@@Base+0x1e50>
   32220:	lsl	r5, r9, #2
   32224:	lsl	r4, r8, #2
   32228:	ldr	r1, [sp, #32]
   3222c:	orr	r5, r5, r8, lsr #30
   32230:	subs	r4, r4, #1
   32234:	sub	r6, r1, #2
   32238:	sbc	r5, r5, #0
   3223c:	b	31918 <flatcc_json_parser_table_as_root@@Base+0x172c>
   32240:	ldr	r6, [sp, #84]	; 0x54
   32244:	rsb	r0, r5, #2
   32248:	sub	r0, r0, r4
   3224c:	mov	r2, r5
   32250:	add	r0, r6, r0
   32254:	mov	r1, r6
   32258:	rsb	r4, r4, #2
   3225c:	bl	1452c <memmove@plt>
   32260:	sub	r0, r4, r5
   32264:	mov	r2, #48	; 0x30
   32268:	mov	r3, #46	; 0x2e
   3226c:	cmp	r0, #2
   32270:	strb	r2, [r6]
   32274:	strb	r3, [r6, #1]
   32278:	ble	322a4 <flatcc_json_parser_table_as_root@@Base+0x20b8>
   3227c:	add	r3, r6, #2
   32280:	add	r1, r6, r0
   32284:	strb	r2, [r3], #1
   32288:	cmp	r1, r3
   3228c:	bne	32284 <flatcc_json_parser_table_as_root@@Base+0x2098>
   32290:	b	321cc <flatcc_json_parser_table_as_root@@Base+0x1fe0>
   32294:	mov	r5, #0
   32298:	b	31e94 <flatcc_json_parser_table_as_root@@Base+0x1ca8>
   3229c:	mov	r5, #1
   322a0:	b	320cc <flatcc_json_parser_table_as_root@@Base+0x1ee0>
   322a4:	mov	r0, #2
   322a8:	b	321cc <flatcc_json_parser_table_as_root@@Base+0x1fe0>
   322ac:	bl	31400 <flatcc_json_parser_table_as_root@@Base+0x1214>
   322b0:	ldr	r3, [pc, #-1572]	; 31c94 <flatcc_json_parser_table_as_root@@Base+0x1aa8>
   322b4:	ldr	r1, [pc, #-1572]	; 31c98 <flatcc_json_parser_table_as_root@@Base+0x1aac>
   322b8:	ldr	r0, [pc, #-1572]	; 31c9c <flatcc_json_parser_table_as_root@@Base+0x1ab0>
   322bc:	add	r3, pc, r3
   322c0:	mov	r2, #138	; 0x8a
   322c4:	add	r3, r3, #300	; 0x12c
   322c8:	add	r1, pc, r1
   322cc:	add	r0, pc, r0
   322d0:	bl	14610 <__assert_fail@plt>
   322d4:	ldr	r3, [pc, #-1596]	; 31ca0 <flatcc_json_parser_table_as_root@@Base+0x1ab4>
   322d8:	ldr	r1, [pc, #-1596]	; 31ca4 <flatcc_json_parser_table_as_root@@Base+0x1ab8>
   322dc:	ldr	r0, [pc, #-1596]	; 31ca8 <flatcc_json_parser_table_as_root@@Base+0x1abc>
   322e0:	add	r3, pc, r3
   322e4:	mov	r2, #189	; 0xbd
   322e8:	add	r3, r3, #280	; 0x118
   322ec:	add	r1, pc, r1
   322f0:	add	r0, pc, r0
   322f4:	bl	14610 <__assert_fail@plt>
   322f8:	bl	148ac <__assert_fail@plt+0x29c>
   322fc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32300:	mov	sl, r0
   32304:	ldr	r0, [r0, #20]
   32308:	mov	r7, r2
   3230c:	mov	r8, #92	; 0x5c
   32310:	add	r2, r0, #1
   32314:	mov	fp, #102	; 0x66
   32318:	mov	r9, #48	; 0x30
   3231c:	str	r2, [sl, #20]
   32320:	mov	r2, #34	; 0x22
   32324:	strb	r2, [r0]
   32328:	ldrb	r4, [r1]
   3232c:	mov	r5, r1
   32330:	cmp	r4, #34	; 0x22
   32334:	cmpne	r4, #31
   32338:	bls	32514 <flatcc_json_parser_table_as_root@@Base+0x2328>
   3233c:	cmp	r4, #92	; 0x5c
   32340:	bne	32350 <flatcc_json_parser_table_as_root@@Base+0x2164>
   32344:	b	32514 <flatcc_json_parser_table_as_root@@Base+0x2328>
   32348:	cmp	r4, #92	; 0x5c
   3234c:	beq	32360 <flatcc_json_parser_table_as_root@@Base+0x2174>
   32350:	ldrb	r4, [r5, #1]!
   32354:	cmp	r4, #34	; 0x22
   32358:	cmpne	r4, #31
   3235c:	bhi	32348 <flatcc_json_parser_table_as_root@@Base+0x215c>
   32360:	sub	r6, r5, r1
   32364:	ldr	r0, [sl, #20]
   32368:	ldr	r2, [sl, #16]
   3236c:	add	r3, r0, r6
   32370:	cmp	r2, r3
   32374:	mov	r2, r6
   32378:	bls	3247c <flatcc_json_parser_table_as_root@@Base+0x2290>
   3237c:	bl	14544 <memcpy@plt>
   32380:	ldr	r2, [sl, #20]
   32384:	subs	r7, r7, r6
   32388:	add	r2, r2, r6
   3238c:	str	r2, [sl, #20]
   32390:	beq	32490 <flatcc_json_parser_table_as_root@@Base+0x22a4>
   32394:	add	r3, r2, #1
   32398:	cmp	r4, #12
   3239c:	str	r3, [sl, #20]
   323a0:	strb	r8, [r2]
   323a4:	beq	324b8 <flatcc_json_parser_table_as_root@@Base+0x22cc>
   323a8:	bhi	3244c <flatcc_json_parser_table_as_root@@Base+0x2260>
   323ac:	cmp	r4, #9
   323b0:	beq	324fc <flatcc_json_parser_table_as_root@@Base+0x2310>
   323b4:	cmp	r4, #10
   323b8:	beq	324e4 <flatcc_json_parser_table_as_root@@Base+0x22f8>
   323bc:	cmp	r4, #8
   323c0:	beq	324cc <flatcc_json_parser_table_as_root@@Base+0x22e0>
   323c4:	ldr	r3, [sl, #20]
   323c8:	lsr	r1, r4, #4
   323cc:	add	r2, r3, #1
   323d0:	str	r2, [sl, #20]
   323d4:	mov	r2, #117	; 0x75
   323d8:	strb	r2, [r3]
   323dc:	ldr	r3, [sl, #20]
   323e0:	cmp	r1, #9
   323e4:	add	r2, r3, #1
   323e8:	str	r2, [sl, #20]
   323ec:	strb	r9, [r3]
   323f0:	ldr	r2, [sl, #20]
   323f4:	movhi	r3, #87	; 0x57
   323f8:	add	r0, r2, #1
   323fc:	str	r0, [sl, #20]
   32400:	strb	r9, [r2]
   32404:	ldr	r2, [sl, #20]
   32408:	movls	r3, #48	; 0x30
   3240c:	add	r3, r3, r1
   32410:	and	r4, r4, #15
   32414:	add	r1, r2, #1
   32418:	str	r1, [sl, #20]
   3241c:	cmp	r4, #9
   32420:	strb	r3, [r2]
   32424:	ldr	r2, [sl, #20]
   32428:	movhi	r3, #87	; 0x57
   3242c:	movls	r3, #48	; 0x30
   32430:	add	r1, r2, #1
   32434:	add	r3, r3, r4
   32438:	str	r1, [sl, #20]
   3243c:	strb	r3, [r2]
   32440:	sub	r7, r7, #1
   32444:	add	r1, r5, #1
   32448:	b	32328 <flatcc_json_parser_table_as_root@@Base+0x213c>
   3244c:	cmp	r4, #34	; 0x22
   32450:	beq	324a4 <flatcc_json_parser_table_as_root@@Base+0x22b8>
   32454:	cmp	r4, #92	; 0x5c
   32458:	beq	324a4 <flatcc_json_parser_table_as_root@@Base+0x22b8>
   3245c:	cmp	r4, #13
   32460:	bne	323c4 <flatcc_json_parser_table_as_root@@Base+0x21d8>
   32464:	ldr	r3, [sl, #20]
   32468:	add	r2, r3, #1
   3246c:	str	r2, [sl, #20]
   32470:	mov	r2, #114	; 0x72
   32474:	strb	r2, [r3]
   32478:	b	32440 <flatcc_json_parser_table_as_root@@Base+0x2254>
   3247c:	mov	r0, sl
   32480:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   32484:	subs	r7, r7, r6
   32488:	ldr	r2, [sl, #20]
   3248c:	bne	32394 <flatcc_json_parser_table_as_root@@Base+0x21a8>
   32490:	add	r0, r2, #1
   32494:	mov	r1, #34	; 0x22
   32498:	str	r0, [sl, #20]
   3249c:	strb	r1, [r2]
   324a0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   324a4:	ldr	r3, [sl, #20]
   324a8:	add	r2, r3, #1
   324ac:	str	r2, [sl, #20]
   324b0:	strb	r4, [r3]
   324b4:	b	32440 <flatcc_json_parser_table_as_root@@Base+0x2254>
   324b8:	ldr	r3, [sl, #20]
   324bc:	add	r2, r3, #1
   324c0:	str	r2, [sl, #20]
   324c4:	strb	fp, [r3]
   324c8:	b	32440 <flatcc_json_parser_table_as_root@@Base+0x2254>
   324cc:	ldr	r3, [sl, #20]
   324d0:	mov	r2, #98	; 0x62
   324d4:	add	r1, r3, #1
   324d8:	str	r1, [sl, #20]
   324dc:	strb	r2, [r3]
   324e0:	b	32440 <flatcc_json_parser_table_as_root@@Base+0x2254>
   324e4:	ldr	r3, [sl, #20]
   324e8:	mov	r2, #110	; 0x6e
   324ec:	add	r1, r3, #1
   324f0:	str	r1, [sl, #20]
   324f4:	strb	r2, [r3]
   324f8:	b	32440 <flatcc_json_parser_table_as_root@@Base+0x2254>
   324fc:	ldr	r3, [sl, #20]
   32500:	mov	r2, #116	; 0x74
   32504:	add	r1, r3, #1
   32508:	str	r1, [sl, #20]
   3250c:	strb	r2, [r3]
   32510:	b	32440 <flatcc_json_parser_table_as_root@@Base+0x2254>
   32514:	mov	r6, #0
   32518:	b	32364 <flatcc_json_parser_table_as_root@@Base+0x2178>
   3251c:	push	{r4, r5, r6, r7, r8, lr}
   32520:	mov	r6, r1
   32524:	ldrb	r1, [r0, #25]
   32528:	mov	r4, r0
   3252c:	mov	r5, r2
   32530:	cmp	r1, #0
   32534:	bne	32604 <flatcc_json_parser_table_as_root@@Base+0x2418>
   32538:	ldr	r2, [r0, #20]
   3253c:	ldr	r3, [r0, #16]
   32540:	cmp	r2, r3
   32544:	bcs	325d8 <flatcc_json_parser_table_as_root@@Base+0x23ec>
   32548:	mov	r3, #34	; 0x22
   3254c:	strb	r3, [r2]
   32550:	ldrb	r3, [r4, #26]
   32554:	ldr	r0, [r4, #20]
   32558:	ldr	r2, [r4, #16]
   3255c:	cmp	r3, #0
   32560:	addeq	r0, r0, #1
   32564:	add	r3, r0, r5
   32568:	cmp	r2, r3
   3256c:	str	r0, [r4, #20]
   32570:	bhi	325e8 <flatcc_json_parser_table_as_root@@Base+0x23fc>
   32574:	mov	r2, r5
   32578:	mov	r1, r6
   3257c:	mov	r0, r4
   32580:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   32584:	ldr	r5, [r4, #20]
   32588:	mov	r3, #34	; 0x22
   3258c:	strb	r3, [r5]
   32590:	ldr	r1, [r4, #20]
   32594:	ldrb	r3, [r4, #26]
   32598:	clz	r3, r3
   3259c:	lsr	r3, r3, #5
   325a0:	add	r2, r1, r3
   325a4:	add	r2, r2, #1
   325a8:	mov	r0, #58	; 0x3a
   325ac:	str	r2, [r4, #20]
   325b0:	strb	r0, [r1, r3]
   325b4:	ldr	r3, [r4, #20]
   325b8:	mov	r2, #32
   325bc:	strb	r2, [r3]
   325c0:	ldrb	r2, [r4, #25]
   325c4:	ldr	r3, [r4, #20]
   325c8:	cmp	r2, #0
   325cc:	addne	r3, r3, #1
   325d0:	str	r3, [r4, #20]
   325d4:	pop	{r4, r5, r6, r7, r8, pc}
   325d8:	ldr	r3, [r0, #44]	; 0x2c
   325dc:	blx	r3
   325e0:	ldr	r2, [r4, #20]
   325e4:	b	32548 <flatcc_json_parser_table_as_root@@Base+0x235c>
   325e8:	mov	r2, r5
   325ec:	mov	r1, r6
   325f0:	bl	14544 <memcpy@plt>
   325f4:	ldr	r3, [r4, #20]
   325f8:	add	r5, r3, r5
   325fc:	str	r5, [r4, #20]
   32600:	b	32588 <flatcc_json_parser_table_as_root@@Base+0x239c>
   32604:	ldr	r3, [r0, #20]
   32608:	mov	r2, #10
   3260c:	add	r1, r3, #1
   32610:	str	r1, [r0, #20]
   32614:	strb	r2, [r3]
   32618:	ldrb	r7, [r0, #25]
   3261c:	ldr	r2, [r0, #32]
   32620:	ldr	r3, [r0, #20]
   32624:	ldr	r1, [r0, #16]
   32628:	mul	r7, r2, r7
   3262c:	add	r2, r3, r7
   32630:	cmp	r1, r2
   32634:	bcc	32658 <flatcc_json_parser_table_as_root@@Base+0x246c>
   32638:	mov	r2, r7
   3263c:	mov	r0, r3
   32640:	mov	r1, #32
   32644:	bl	145bc <memset@plt>
   32648:	ldr	r2, [r4, #20]
   3264c:	add	r2, r2, r7
   32650:	str	r2, [r4, #20]
   32654:	b	32548 <flatcc_json_parser_table_as_root@@Base+0x235c>
   32658:	mov	r1, r7
   3265c:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   32660:	ldr	r2, [r4, #20]
   32664:	b	32548 <flatcc_json_parser_table_as_root@@Base+0x235c>

00032668 <flatcc_json_printer_error_string@@Base>:
   32668:	cmp	r0, #3
   3266c:	addls	pc, pc, r0, lsl #2
   32670:	b	326b4 <flatcc_json_printer_error_string@@Base+0x4c>
   32674:	b	32684 <flatcc_json_printer_error_string@@Base+0x1c>
   32678:	b	326a8 <flatcc_json_printer_error_string@@Base+0x40>
   3267c:	b	3269c <flatcc_json_printer_error_string@@Base+0x34>
   32680:	b	32690 <flatcc_json_printer_error_string@@Base+0x28>
   32684:	ldr	r0, [pc, #52]	; 326c0 <flatcc_json_printer_error_string@@Base+0x58>
   32688:	add	r0, pc, r0
   3268c:	bx	lr
   32690:	ldr	r0, [pc, #44]	; 326c4 <flatcc_json_printer_error_string@@Base+0x5c>
   32694:	add	r0, pc, r0
   32698:	bx	lr
   3269c:	ldr	r0, [pc, #36]	; 326c8 <flatcc_json_printer_error_string@@Base+0x60>
   326a0:	add	r0, pc, r0
   326a4:	bx	lr
   326a8:	ldr	r0, [pc, #28]	; 326cc <flatcc_json_printer_error_string@@Base+0x64>
   326ac:	add	r0, pc, r0
   326b0:	bx	lr
   326b4:	ldr	r0, [pc, #20]	; 326d0 <flatcc_json_printer_error_string@@Base+0x68>
   326b8:	add	r0, pc, r0
   326bc:	bx	lr
   326c0:	andeq	r0, r1, r0, lsr #4
   326c4:	ldrdeq	r0, [r1], -r4
   326c8:	andeq	r1, r1, ip, asr ip
   326cc:	andeq	r1, r1, r4, asr #24
   326d0:	andeq	r0, r1, r8, ror r6

000326d4 <flatcc_json_printer_fmt_float@@Base>:
   326d4:	vcvt.f64.f32	d0, s0
   326d8:	b	31700 <flatcc_json_parser_table_as_root@@Base+0x1514>

000326dc <flatcc_json_printer_fmt_double@@Base>:
   326dc:	b	31700 <flatcc_json_parser_table_as_root@@Base+0x1514>

000326e0 <flatcc_json_printer_fmt_bool@@Base>:
   326e0:	cmp	r1, #0
   326e4:	mov	r2, r0
   326e8:	bne	32710 <flatcc_json_printer_fmt_bool@@Base+0x30>
   326ec:	ldr	r3, [pc, #56]	; 3272c <flatcc_json_printer_fmt_bool@@Base+0x4c>
   326f0:	mov	r1, #5
   326f4:	add	r3, pc, r3
   326f8:	ldrb	ip, [r3, #4]
   326fc:	ldr	r0, [r3]
   32700:	strb	ip, [r2, #4]
   32704:	str	r0, [r2]
   32708:	mov	r0, r1
   3270c:	bx	lr
   32710:	ldr	r3, [pc, #24]	; 32730 <flatcc_json_printer_fmt_bool@@Base+0x50>
   32714:	mov	r1, #4
   32718:	add	r3, pc, r3
   3271c:	ldr	r0, [r3]
   32720:	str	r0, [r2]
   32724:	mov	r0, r1
   32728:	bx	lr
   3272c:	andeq	fp, r0, r4, asr #25
   32730:	muleq	r0, r8, ip

00032734 <flatcc_json_printer_string@@Base>:
   32734:	b	322fc <flatcc_json_parser_table_as_root@@Base+0x2110>

00032738 <flatcc_json_printer_write@@Base>:
   32738:	push	{r4, r5, r6, lr}
   3273c:	ldr	lr, [r0, #20]
   32740:	ldr	ip, [r0, #16]
   32744:	add	r4, lr, r2
   32748:	cmp	ip, r4
   3274c:	bls	32770 <flatcc_json_printer_write@@Base+0x38>
   32750:	mov	r4, r0
   32754:	mov	r0, lr
   32758:	mov	r5, r2
   3275c:	bl	14544 <memcpy@plt>
   32760:	ldr	ip, [r4, #20]
   32764:	add	ip, ip, r5
   32768:	str	ip, [r4, #20]
   3276c:	pop	{r4, r5, r6, pc}
   32770:	pop	{r4, r5, r6, lr}
   32774:	b	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>

00032778 <flatcc_json_printer_nl@@Base>:
   32778:	ldr	r2, [r0, #20]
   3277c:	mov	r1, #10
   32780:	add	ip, r2, #1
   32784:	str	ip, [r0, #20]
   32788:	strb	r1, [r2]
   3278c:	ldr	r1, [r0, #20]
   32790:	ldr	r2, [r0, #16]
   32794:	cmp	r1, r2
   32798:	bxcc	lr
   3279c:	ldr	r3, [r0, #44]	; 0x2c
   327a0:	mov	r1, #0
   327a4:	bx	r3

000327a8 <flatcc_json_printer_char@@Base>:
   327a8:	ldr	r3, [r0, #20]
   327ac:	add	r2, r3, #1
   327b0:	str	r2, [r0, #20]
   327b4:	strb	r1, [r3]
   327b8:	bx	lr

000327bc <flatcc_json_printer_indent@@Base>:
   327bc:	push	{r4, r5, r6, lr}
   327c0:	ldrb	r1, [r0, #25]
   327c4:	ldr	r5, [r0, #32]
   327c8:	ldr	r2, [r0, #20]
   327cc:	ldr	ip, [r0, #16]
   327d0:	mul	r5, r5, r1
   327d4:	add	r1, r2, r5
   327d8:	cmp	ip, r1
   327dc:	bcc	32804 <flatcc_json_printer_indent@@Base+0x48>
   327e0:	mov	r4, r0
   327e4:	mov	r1, #32
   327e8:	mov	r0, r2
   327ec:	mov	r2, r5
   327f0:	bl	145bc <memset@plt>
   327f4:	ldr	r3, [r4, #20]
   327f8:	add	r5, r3, r5
   327fc:	str	r5, [r4, #20]
   32800:	pop	{r4, r5, r6, pc}
   32804:	mov	r1, r5
   32808:	pop	{r4, r5, r6, lr}
   3280c:	b	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>

00032810 <flatcc_json_printer_add_level@@Base>:
   32810:	ldr	r3, [r0, #32]
   32814:	add	r1, r3, r1
   32818:	str	r1, [r0, #32]
   3281c:	bx	lr

00032820 <flatcc_json_printer_get_level@@Base>:
   32820:	ldr	r0, [r0, #32]
   32824:	bx	lr

00032828 <flatcc_json_printer_uint8@@Base>:
   32828:	push	{r4, lr}
   3282c:	mov	r4, r0
   32830:	mov	r0, r1
   32834:	ldr	r1, [r4, #20]
   32838:	bl	31344 <flatcc_json_parser_table_as_root@@Base+0x1158>
   3283c:	ldr	r3, [r4, #20]
   32840:	add	r0, r3, r0
   32844:	str	r0, [r4, #20]
   32848:	pop	{r4, pc}

0003284c <flatcc_json_printer_uint16@@Base>:
   3284c:	push	{r4, lr}
   32850:	mov	r4, r0
   32854:	mov	r0, r1
   32858:	ldr	r1, [r4, #20]
   3285c:	bl	301f8 <flatcc_json_parser_table_as_root@@Base+0xc>
   32860:	ldr	r3, [r4, #20]
   32864:	add	r0, r3, r0
   32868:	str	r0, [r4, #20]
   3286c:	pop	{r4, pc}

00032870 <flatcc_json_printer_uint32@@Base>:
   32870:	push	{r4, lr}
   32874:	mov	r4, r0
   32878:	mov	r0, r1
   3287c:	ldr	r1, [r4, #20]
   32880:	bl	3037c <flatcc_json_parser_table_as_root@@Base+0x190>
   32884:	ldr	r3, [r4, #20]
   32888:	add	r0, r3, r0
   3288c:	str	r0, [r4, #20]
   32890:	pop	{r4, pc}

00032894 <flatcc_json_printer_uint64@@Base>:
   32894:	push	{r4, lr}
   32898:	mov	r4, r0
   3289c:	mov	r1, r3
   328a0:	mov	r0, r2
   328a4:	ldr	r2, [r4, #20]
   328a8:	bl	306e8 <flatcc_json_parser_table_as_root@@Base+0x4fc>
   328ac:	ldr	r3, [r4, #20]
   328b0:	add	r0, r3, r0
   328b4:	str	r0, [r4, #20]
   328b8:	pop	{r4, pc}

000328bc <flatcc_json_printer_int8@@Base>:
   328bc:	push	{r4, r5, r6, lr}
   328c0:	mov	r4, r0
   328c4:	subs	r0, r1, #0
   328c8:	ldr	r1, [r4, #20]
   328cc:	lsr	r5, r0, #31
   328d0:	rsblt	r0, r0, #0
   328d4:	movlt	r3, #45	; 0x2d
   328d8:	sxtblt	r0, r0
   328dc:	strblt	r3, [r1]
   328e0:	uxtb	r0, r0
   328e4:	addlt	r1, r1, #1
   328e8:	bl	31344 <flatcc_json_parser_table_as_root@@Base+0x1158>
   328ec:	ldr	r3, [r4, #20]
   328f0:	add	r0, r5, r0
   328f4:	add	r3, r3, r0
   328f8:	str	r3, [r4, #20]
   328fc:	pop	{r4, r5, r6, pc}

00032900 <flatcc_json_printer_int16@@Base>:
   32900:	push	{r4, r5, r6, lr}
   32904:	mov	r4, r0
   32908:	subs	r0, r1, #0
   3290c:	ldr	r1, [r4, #20]
   32910:	lsr	r5, r0, #31
   32914:	rsblt	r0, r0, #0
   32918:	movlt	r3, #45	; 0x2d
   3291c:	sxthlt	r0, r0
   32920:	strblt	r3, [r1]
   32924:	uxth	r0, r0
   32928:	addlt	r1, r1, #1
   3292c:	bl	301f8 <flatcc_json_parser_table_as_root@@Base+0xc>
   32930:	ldr	r3, [r4, #20]
   32934:	add	r0, r5, r0
   32938:	add	r3, r3, r0
   3293c:	str	r3, [r4, #20]
   32940:	pop	{r4, r5, r6, pc}

00032944 <flatcc_json_printer_int32@@Base>:
   32944:	push	{r4, r5, r6, lr}
   32948:	mov	r4, r0
   3294c:	subs	r0, r1, #0
   32950:	ldr	r1, [r4, #20]
   32954:	movlt	r3, #45	; 0x2d
   32958:	lsr	r5, r0, #31
   3295c:	strblt	r3, [r1]
   32960:	rsblt	r0, r0, #0
   32964:	addlt	r1, r1, #1
   32968:	bl	3037c <flatcc_json_parser_table_as_root@@Base+0x190>
   3296c:	ldr	r3, [r4, #20]
   32970:	add	r0, r5, r0
   32974:	add	r3, r3, r0
   32978:	str	r3, [r4, #20]
   3297c:	pop	{r4, r5, r6, pc}

00032980 <flatcc_json_printer_int64@@Base>:
   32980:	push	{r4, r5, r6, lr}
   32984:	mov	r1, r3
   32988:	mov	r4, r0
   3298c:	cmp	r2, #0
   32990:	sbcs	r3, r3, #0
   32994:	mov	r0, r2
   32998:	lsr	r5, r1, #31
   3299c:	ldr	r2, [r4, #20]
   329a0:	bge	329b8 <flatcc_json_printer_int64@@Base+0x38>
   329a4:	mov	r3, #45	; 0x2d
   329a8:	rsbs	r0, r0, #0
   329ac:	strb	r3, [r2]
   329b0:	rsc	r1, r1, #0
   329b4:	add	r2, r2, #1
   329b8:	bl	306e8 <flatcc_json_parser_table_as_root@@Base+0x4fc>
   329bc:	ldr	r3, [r4, #20]
   329c0:	add	r0, r5, r0
   329c4:	add	r3, r3, r0
   329c8:	str	r3, [r4, #20]
   329cc:	pop	{r4, r5, r6, pc}

000329d0 <flatcc_json_printer_float@@Base>:
   329d0:	push	{r4, lr}
   329d4:	vcvt.f64.f32	d0, s0
   329d8:	mov	r4, r0
   329dc:	ldr	r0, [r0, #20]
   329e0:	bl	31700 <flatcc_json_parser_table_as_root@@Base+0x1514>
   329e4:	ldr	r3, [r4, #20]
   329e8:	add	r0, r3, r0
   329ec:	str	r0, [r4, #20]
   329f0:	pop	{r4, pc}

000329f4 <flatcc_json_printer_double@@Base>:
   329f4:	push	{r4, lr}
   329f8:	mov	r4, r0
   329fc:	ldr	r0, [r0, #20]
   32a00:	bl	31700 <flatcc_json_parser_table_as_root@@Base+0x1514>
   32a04:	ldr	r3, [r4, #20]
   32a08:	add	r0, r3, r0
   32a0c:	str	r0, [r4, #20]
   32a10:	pop	{r4, pc}

00032a14 <flatcc_json_printer_enum@@Base>:
   32a14:	ldr	r3, [r0, #20]
   32a18:	mov	ip, #34	; 0x22
   32a1c:	push	{r4, r5, r6, lr}
   32a20:	mov	r4, r0
   32a24:	strb	ip, [r3]
   32a28:	ldrb	ip, [r0, #26]
   32a2c:	ldr	r3, [r0, #20]
   32a30:	ldr	lr, [r0, #16]
   32a34:	cmp	ip, #0
   32a38:	addeq	r3, r3, #1
   32a3c:	add	ip, r3, r2
   32a40:	cmp	lr, ip
   32a44:	str	r3, [r0, #20]
   32a48:	bhi	32a74 <flatcc_json_printer_enum@@Base+0x60>
   32a4c:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   32a50:	ldr	r2, [r4, #20]
   32a54:	mov	r3, #34	; 0x22
   32a58:	strb	r3, [r2]
   32a5c:	ldrb	r2, [r4, #26]
   32a60:	ldr	r3, [r4, #20]
   32a64:	cmp	r2, #0
   32a68:	addeq	r3, r3, #1
   32a6c:	str	r3, [r4, #20]
   32a70:	pop	{r4, r5, r6, pc}
   32a74:	mov	r0, r3
   32a78:	mov	r5, r2
   32a7c:	bl	14544 <memcpy@plt>
   32a80:	ldr	r2, [r4, #20]
   32a84:	add	r2, r2, r5
   32a88:	str	r2, [r4, #20]
   32a8c:	b	32a54 <flatcc_json_printer_enum@@Base+0x40>

00032a90 <flatcc_json_printer_delimit_enum_flags@@Base>:
   32a90:	ldr	r3, [r0, #20]
   32a94:	ldrb	r2, [r0, #26]
   32a98:	adds	r1, r1, #0
   32a9c:	mov	ip, #34	; 0x22
   32aa0:	strb	ip, [r3]
   32aa4:	movne	r1, #1
   32aa8:	ldr	r3, [r0, #20]
   32aac:	cmp	r2, #0
   32ab0:	orreq	r1, r1, #1
   32ab4:	add	r1, r3, r1
   32ab8:	str	r1, [r0, #20]
   32abc:	bx	lr

00032ac0 <flatcc_json_printer_enum_flag@@Base>:
   32ac0:	push	{r4, r5, r6, lr}
   32ac4:	mov	r5, #32
   32ac8:	ldr	lr, [r0, #20]
   32acc:	mov	r4, r2
   32ad0:	strb	r5, [lr]
   32ad4:	ldr	lr, [r0, #20]
   32ad8:	ldr	r5, [r0, #16]
   32adc:	cmp	r1, #0
   32ae0:	addgt	lr, lr, #1
   32ae4:	add	r2, lr, r3
   32ae8:	cmp	r5, r2
   32aec:	str	lr, [r0, #20]
   32af0:	bls	32b1c <flatcc_json_printer_enum_flag@@Base+0x5c>
   32af4:	mov	r1, r4
   32af8:	mov	r4, r0
   32afc:	mov	r2, r3
   32b00:	mov	r0, lr
   32b04:	mov	r5, r3
   32b08:	bl	14544 <memcpy@plt>
   32b0c:	ldr	r3, [r4, #20]
   32b10:	add	r3, r3, r5
   32b14:	str	r3, [r4, #20]
   32b18:	pop	{r4, r5, r6, pc}
   32b1c:	mov	r1, r4
   32b20:	mov	r2, r3
   32b24:	pop	{r4, r5, r6, lr}
   32b28:	b	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>

00032b2c <flatcc_json_printer_string_field@@Base>:
   32b2c:	add	r2, r2, #2
   32b30:	ldr	ip, [r1, #8]
   32b34:	lsl	r2, r2, #1
   32b38:	cmp	r2, ip
   32b3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32b40:	ldr	r8, [sp, #32]
   32b44:	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   32b48:	ldr	ip, [r1, #4]
   32b4c:	ldrh	r7, [ip, r2]
   32b50:	cmp	r7, #0
   32b54:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   32b58:	ldr	r6, [r1]
   32b5c:	adds	r5, r6, r7
   32b60:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   32b64:	ldr	r2, [r1, #16]
   32b68:	mov	r9, r3
   32b6c:	cmp	r2, #0
   32b70:	add	r2, r2, #1
   32b74:	str	r2, [r1, #16]
   32b78:	ldrne	r2, [r0, #20]
   32b7c:	movne	r1, #44	; 0x2c
   32b80:	addne	ip, r2, #1
   32b84:	strne	ip, [r0, #20]
   32b88:	strbne	r1, [r2]
   32b8c:	ldrb	r1, [r0, #25]
   32b90:	mov	r4, r0
   32b94:	cmp	r1, #0
   32b98:	bne	32c7c <flatcc_json_printer_string_field@@Base+0x150>
   32b9c:	ldr	r2, [r0, #20]
   32ba0:	ldr	r3, [r0, #16]
   32ba4:	cmp	r2, r3
   32ba8:	bcc	32bb8 <flatcc_json_printer_string_field@@Base+0x8c>
   32bac:	ldr	r3, [r0, #44]	; 0x2c
   32bb0:	blx	r3
   32bb4:	ldr	r2, [r4, #20]
   32bb8:	mov	r3, #34	; 0x22
   32bbc:	strb	r3, [r2]
   32bc0:	ldrb	r3, [r4, #26]
   32bc4:	ldr	r0, [r4, #20]
   32bc8:	ldr	r2, [r4, #16]
   32bcc:	cmp	r3, #0
   32bd0:	addeq	r0, r0, #1
   32bd4:	add	r3, r0, r8
   32bd8:	cmp	r2, r3
   32bdc:	str	r0, [r4, #20]
   32be0:	bhi	32c60 <flatcc_json_printer_string_field@@Base+0x134>
   32be4:	mov	r2, r8
   32be8:	mov	r1, r9
   32bec:	mov	r0, r4
   32bf0:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   32bf4:	ldr	r8, [r4, #20]
   32bf8:	mov	r3, #34	; 0x22
   32bfc:	strb	r3, [r8]
   32c00:	ldr	r1, [r4, #20]
   32c04:	ldrb	r3, [r4, #26]
   32c08:	clz	r3, r3
   32c0c:	lsr	r3, r3, #5
   32c10:	add	r2, r1, r3
   32c14:	add	r2, r2, #1
   32c18:	mov	r0, #58	; 0x3a
   32c1c:	str	r2, [r4, #20]
   32c20:	strb	r0, [r1, r3]
   32c24:	ldr	r3, [r4, #20]
   32c28:	mov	r2, #32
   32c2c:	mov	r0, r4
   32c30:	strb	r2, [r3]
   32c34:	ldrb	ip, [r4, #25]
   32c38:	ldr	r2, [r6, r7]
   32c3c:	ldr	r3, [r4, #20]
   32c40:	add	r1, r5, r2
   32c44:	cmp	ip, #0
   32c48:	addne	r3, r3, #1
   32c4c:	ldr	r2, [r5, r2]
   32c50:	add	r1, r1, #4
   32c54:	str	r3, [r4, #20]
   32c58:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   32c5c:	b	322fc <flatcc_json_parser_table_as_root@@Base+0x2110>
   32c60:	mov	r2, r8
   32c64:	mov	r1, r9
   32c68:	bl	14544 <memcpy@plt>
   32c6c:	ldr	r3, [r4, #20]
   32c70:	add	r8, r3, r8
   32c74:	str	r8, [r4, #20]
   32c78:	b	32bf8 <flatcc_json_printer_string_field@@Base+0xcc>
   32c7c:	ldr	r3, [r0, #20]
   32c80:	mov	r2, #10
   32c84:	add	r1, r3, #1
   32c88:	str	r1, [r0, #20]
   32c8c:	strb	r2, [r3]
   32c90:	ldrb	r3, [r0, #25]
   32c94:	ldr	r2, [r0, #32]
   32c98:	ldr	r0, [r0, #20]
   32c9c:	ldr	r1, [r4, #16]
   32ca0:	mul	sl, r2, r3
   32ca4:	add	r3, r0, sl
   32ca8:	cmp	r1, r3
   32cac:	bcc	32ccc <flatcc_json_printer_string_field@@Base+0x1a0>
   32cb0:	mov	r2, sl
   32cb4:	mov	r1, #32
   32cb8:	bl	145bc <memset@plt>
   32cbc:	ldr	r2, [r4, #20]
   32cc0:	add	r2, r2, sl
   32cc4:	str	r2, [r4, #20]
   32cc8:	b	32bb8 <flatcc_json_printer_string_field@@Base+0x8c>
   32ccc:	mov	r1, sl
   32cd0:	mov	r0, r4
   32cd4:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   32cd8:	ldr	r2, [r4, #20]
   32cdc:	b	32bb8 <flatcc_json_printer_string_field@@Base+0x8c>

00032ce0 <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   32ce0:	add	r2, r2, #2
   32ce4:	ldr	ip, [r1, #8]
   32ce8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32cec:	lsl	r2, r2, #1
   32cf0:	sub	sp, sp, #20
   32cf4:	cmp	r2, ip
   32cf8:	ldr	r6, [sp, #56]	; 0x38
   32cfc:	bge	32f40 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x260>
   32d00:	ldr	ip, [r1, #4]
   32d04:	ldrh	r9, [ip, r2]
   32d08:	cmp	r9, #0
   32d0c:	beq	32f40 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x260>
   32d10:	ldr	r2, [sp, #60]	; 0x3c
   32d14:	ldr	r4, [r1]
   32d18:	adds	r8, r2, #0
   32d1c:	movne	r8, #1
   32d20:	orr	r2, r8, #128	; 0x80
   32d24:	adds	r7, r4, r9
   32d28:	str	r2, [sp, #4]
   32d2c:	beq	32f40 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x260>
   32d30:	ldr	r2, [r1, #16]
   32d34:	mov	sl, r3
   32d38:	cmp	r2, #0
   32d3c:	add	r2, r2, #1
   32d40:	str	r2, [r1, #16]
   32d44:	ldrne	r2, [r0, #20]
   32d48:	movne	r1, #44	; 0x2c
   32d4c:	addne	ip, r2, #1
   32d50:	strne	ip, [r0, #20]
   32d54:	strbne	r1, [r2]
   32d58:	ldrb	r1, [r0, #25]
   32d5c:	mov	r5, r0
   32d60:	ldr	r3, [r0, #20]
   32d64:	cmp	r1, #0
   32d68:	bne	32f84 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2a4>
   32d6c:	ldr	r2, [r0, #16]
   32d70:	cmp	r3, r2
   32d74:	bcc	32d84 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa4>
   32d78:	ldr	r3, [r0, #44]	; 0x2c
   32d7c:	blx	r3
   32d80:	ldr	r3, [r5, #20]
   32d84:	mov	r2, #34	; 0x22
   32d88:	strb	r2, [r3]
   32d8c:	ldrb	r3, [r5, #26]
   32d90:	ldr	r0, [r5, #20]
   32d94:	ldr	r2, [r5, #16]
   32d98:	cmp	r3, #0
   32d9c:	addeq	r0, r0, #1
   32da0:	add	r3, r0, r6
   32da4:	cmp	r2, r3
   32da8:	str	r0, [r5, #20]
   32dac:	bhi	32f48 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x268>
   32db0:	mov	r2, r6
   32db4:	mov	r1, sl
   32db8:	mov	r0, r5
   32dbc:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   32dc0:	ldr	r6, [r5, #20]
   32dc4:	mov	r0, #34	; 0x22
   32dc8:	strb	r0, [r6]
   32dcc:	ldr	r1, [r5, #20]
   32dd0:	ldrb	r3, [r5, #26]
   32dd4:	clz	r3, r3
   32dd8:	lsr	r3, r3, #5
   32ddc:	add	r2, r1, r3
   32de0:	add	r2, r2, #1
   32de4:	mov	ip, #58	; 0x3a
   32de8:	str	r2, [r5, #20]
   32dec:	strb	ip, [r1, r3]
   32df0:	ldr	r3, [r5, #20]
   32df4:	mov	r1, #32
   32df8:	ldr	r2, [pc, #524]	; 3300c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x32c>
   32dfc:	strb	r1, [r3]
   32e00:	ldrb	r3, [r5, #25]
   32e04:	ldr	ip, [r4, r9]
   32e08:	ldr	lr, [r5, #20]
   32e0c:	adds	r3, r3, #0
   32e10:	movne	r3, #1
   32e14:	ldr	r4, [r7, ip]
   32e18:	add	r1, lr, r3
   32e1c:	add	r1, r1, #1
   32e20:	str	r4, [sp, #8]
   32e24:	str	r1, [r5, #20]
   32e28:	strb	r0, [lr, r3]
   32e2c:	ldr	r6, [sp, #8]
   32e30:	ldr	r0, [r5, #20]
   32e34:	ldr	r4, [r5, #16]
   32e38:	lsl	r6, r6, #2
   32e3c:	add	r7, r7, ip
   32e40:	umull	r3, r6, r2, r6
   32e44:	add	r7, r7, #4
   32e48:	lsr	r6, r6, #1
   32e4c:	add	r6, r6, #3
   32e50:	bic	r6, r6, #3
   32e54:	add	r3, r0, r6
   32e58:	cmp	r3, r4
   32e5c:	bcs	32f64 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x284>
   32e60:	cmp	r4, r3
   32e64:	bcs	32f18 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x238>
   32e68:	sub	r4, r4, r0
   32e6c:	bic	r4, r4, #3
   32e70:	add	r6, r4, r4, lsl #1
   32e74:	lsrs	r6, r6, #2
   32e78:	beq	32fe4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x304>
   32e7c:	mov	r3, r6
   32e80:	ldr	fp, [pc, #388]	; 3300c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x32c>
   32e84:	mov	r6, r4
   32e88:	add	sl, sp, #12
   32e8c:	mov	r9, #0
   32e90:	mov	r4, r3
   32e94:	b	32eac <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1cc>
   32e98:	sub	r6, r3, r0
   32e9c:	bic	r6, r6, #3
   32ea0:	add	r4, r6, r6, lsl #1
   32ea4:	lsrs	r4, r4, #2
   32ea8:	beq	32fe4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x304>
   32eac:	mov	r1, r7
   32eb0:	mov	r3, r8
   32eb4:	mov	r2, sl
   32eb8:	str	r4, [sp, #12]
   32ebc:	bl	31574 <flatcc_json_parser_table_as_root@@Base+0x1388>
   32ec0:	ldr	r2, [r5, #20]
   32ec4:	ldr	r3, [sp, #8]
   32ec8:	add	r6, r2, r6
   32ecc:	sub	r3, r3, r4
   32ed0:	str	r6, [r5, #20]
   32ed4:	str	r3, [sp, #8]
   32ed8:	mov	r0, r5
   32edc:	ldr	r3, [r5, #44]	; 0x2c
   32ee0:	mov	r1, r9
   32ee4:	blx	r3
   32ee8:	ldr	r6, [sp, #8]
   32eec:	ldr	r0, [r5, #20]
   32ef0:	ldr	r3, [r5, #16]
   32ef4:	lsl	r6, r6, #2
   32ef8:	add	r7, r7, r4
   32efc:	umull	r2, r6, fp, r6
   32f00:	lsr	r6, r6, #1
   32f04:	add	r6, r6, #3
   32f08:	bic	r6, r6, #3
   32f0c:	add	r2, r0, r6
   32f10:	cmp	r3, r2
   32f14:	bcc	32e98 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1b8>
   32f18:	ldr	r3, [sp, #4]
   32f1c:	mov	r1, r7
   32f20:	add	r2, sp, #8
   32f24:	bl	31574 <flatcc_json_parser_table_as_root@@Base+0x1388>
   32f28:	ldr	r2, [r5, #20]
   32f2c:	mov	r1, #34	; 0x22
   32f30:	add	r3, r2, r6
   32f34:	add	r3, r3, #1
   32f38:	str	r3, [r5, #20]
   32f3c:	strb	r1, [r2, r6]
   32f40:	add	sp, sp, #20
   32f44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32f48:	mov	r2, r6
   32f4c:	mov	r1, sl
   32f50:	bl	14544 <memcpy@plt>
   32f54:	ldr	r3, [r5, #20]
   32f58:	add	r6, r3, r6
   32f5c:	str	r6, [r5, #20]
   32f60:	b	32dc4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xe4>
   32f64:	ldr	r3, [r5, #44]	; 0x2c
   32f68:	mov	r0, r5
   32f6c:	mov	r1, #0
   32f70:	blx	r3
   32f74:	ldr	r0, [r5, #20]
   32f78:	ldr	r4, [r5, #16]
   32f7c:	add	r3, r0, r6
   32f80:	b	32e60 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x180>
   32f84:	mov	r2, #10
   32f88:	add	r1, r3, #1
   32f8c:	str	r1, [r0, #20]
   32f90:	strb	r2, [r3]
   32f94:	ldrb	r3, [r0, #25]
   32f98:	ldr	fp, [r0, #32]
   32f9c:	ldr	r0, [r0, #20]
   32fa0:	ldr	r2, [r5, #16]
   32fa4:	mul	fp, fp, r3
   32fa8:	add	r3, r0, fp
   32fac:	cmp	r2, r3
   32fb0:	bcc	32fd0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2f0>
   32fb4:	mov	r2, fp
   32fb8:	mov	r1, #32
   32fbc:	bl	145bc <memset@plt>
   32fc0:	ldr	r3, [r5, #20]
   32fc4:	add	r3, r3, fp
   32fc8:	str	r3, [r5, #20]
   32fcc:	b	32d84 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa4>
   32fd0:	mov	r1, fp
   32fd4:	mov	r0, r5
   32fd8:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   32fdc:	ldr	r3, [r5, #20]
   32fe0:	b	32d84 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa4>
   32fe4:	ldr	r3, [pc, #36]	; 33010 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x330>
   32fe8:	ldr	r1, [pc, #36]	; 33014 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x334>
   32fec:	add	r3, pc, r3
   32ff0:	ldr	r0, [pc, #32]	; 33018 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x338>
   32ff4:	add	r3, r3, #1744	; 0x6d0
   32ff8:	ldr	r2, [pc, #28]	; 3301c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x33c>
   32ffc:	add	r3, r3, #4
   33000:	add	r1, pc, r1
   33004:	add	r0, pc, r0
   33008:	bl	14610 <__assert_fail@plt>
   3300c:	bge	feaddac0 <__bss_end__@@Base+0xfea886f4>
   33010:	andeq	r0, r1, ip, asr #19
   33014:	andeq	r1, r1, r4, lsl r1
   33018:	andeq	r1, r1, r8, lsl #6
   3301c:	andeq	r0, r0, r5, lsl r1

00033020 <flatcc_json_printer_uint8_field@@Base>:
   33020:	add	r2, r2, #2
   33024:	ldr	ip, [r1, #8]
   33028:	lsl	r2, r2, #1
   3302c:	push	{r4, r5, r6, r7, r8, lr}
   33030:	cmp	r2, ip
   33034:	ldr	r5, [sp, #24]
   33038:	ldrb	ip, [sp, #28]
   3303c:	blt	33054 <flatcc_json_printer_uint8_field@@Base+0x34>
   33040:	ldrb	r2, [r0, #29]
   33044:	cmp	r2, #0
   33048:	popeq	{r4, r5, r6, r7, r8, pc}
   3304c:	mov	r6, ip
   33050:	b	3307c <flatcc_json_printer_uint8_field@@Base+0x5c>
   33054:	ldr	lr, [r1, #4]
   33058:	ldrh	r2, [lr, r2]
   3305c:	cmp	r2, #0
   33060:	beq	33040 <flatcc_json_printer_uint8_field@@Base+0x20>
   33064:	ldr	lr, [r1]
   33068:	cmn	lr, r2
   3306c:	beq	33040 <flatcc_json_printer_uint8_field@@Base+0x20>
   33070:	ldrb	r6, [lr, r2]
   33074:	cmp	ip, r6
   33078:	beq	33190 <flatcc_json_printer_uint8_field@@Base+0x170>
   3307c:	ldr	r2, [r1, #16]
   33080:	mov	r7, r3
   33084:	cmp	r2, #0
   33088:	add	r2, r2, #1
   3308c:	str	r2, [r1, #16]
   33090:	ldrne	r2, [r0, #20]
   33094:	movne	r1, #44	; 0x2c
   33098:	addne	ip, r2, #1
   3309c:	strne	ip, [r0, #20]
   330a0:	strbne	r1, [r2]
   330a4:	ldrb	r1, [r0, #25]
   330a8:	mov	r4, r0
   330ac:	cmp	r1, #0
   330b0:	bne	331a0 <flatcc_json_printer_uint8_field@@Base+0x180>
   330b4:	ldr	r2, [r0, #20]
   330b8:	ldr	r3, [r0, #16]
   330bc:	cmp	r2, r3
   330c0:	bcc	330d0 <flatcc_json_printer_uint8_field@@Base+0xb0>
   330c4:	ldr	r3, [r0, #44]	; 0x2c
   330c8:	blx	r3
   330cc:	ldr	r2, [r4, #20]
   330d0:	mov	r3, #34	; 0x22
   330d4:	strb	r3, [r2]
   330d8:	ldrb	r3, [r4, #26]
   330dc:	ldr	r0, [r4, #20]
   330e0:	ldr	r2, [r4, #16]
   330e4:	cmp	r3, #0
   330e8:	addeq	r0, r0, #1
   330ec:	add	r3, r0, r5
   330f0:	cmp	r2, r3
   330f4:	str	r0, [r4, #20]
   330f8:	bhi	33174 <flatcc_json_printer_uint8_field@@Base+0x154>
   330fc:	mov	r2, r5
   33100:	mov	r1, r7
   33104:	mov	r0, r4
   33108:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   3310c:	ldr	r5, [r4, #20]
   33110:	mov	r3, #34	; 0x22
   33114:	strb	r3, [r5]
   33118:	ldr	r1, [r4, #20]
   3311c:	ldrb	r3, [r4, #26]
   33120:	clz	r3, r3
   33124:	lsr	r3, r3, #5
   33128:	add	r2, r1, r3
   3312c:	add	r2, r2, #1
   33130:	mov	r0, #58	; 0x3a
   33134:	str	r2, [r4, #20]
   33138:	strb	r0, [r1, r3]
   3313c:	ldr	r3, [r4, #20]
   33140:	mov	r2, #32
   33144:	mov	r0, r6
   33148:	strb	r2, [r3]
   3314c:	ldrb	r3, [r4, #25]
   33150:	ldr	r1, [r4, #20]
   33154:	cmp	r3, #0
   33158:	addne	r1, r1, #1
   3315c:	str	r1, [r4, #20]
   33160:	bl	31344 <flatcc_json_parser_table_as_root@@Base+0x1158>
   33164:	ldr	r3, [r4, #20]
   33168:	add	r0, r3, r0
   3316c:	str	r0, [r4, #20]
   33170:	pop	{r4, r5, r6, r7, r8, pc}
   33174:	mov	r2, r5
   33178:	mov	r1, r7
   3317c:	bl	14544 <memcpy@plt>
   33180:	ldr	r3, [r4, #20]
   33184:	add	r5, r3, r5
   33188:	str	r5, [r4, #20]
   3318c:	b	33110 <flatcc_json_printer_uint8_field@@Base+0xf0>
   33190:	ldrb	r2, [r0, #28]
   33194:	cmp	r2, #0
   33198:	beq	3307c <flatcc_json_printer_uint8_field@@Base+0x5c>
   3319c:	pop	{r4, r5, r6, r7, r8, pc}
   331a0:	ldr	r3, [r0, #20]
   331a4:	mov	r2, #10
   331a8:	add	r1, r3, #1
   331ac:	str	r1, [r0, #20]
   331b0:	strb	r2, [r3]
   331b4:	ldrb	r8, [r0, #25]
   331b8:	ldr	r2, [r0, #32]
   331bc:	ldr	r0, [r0, #20]
   331c0:	ldr	r1, [r4, #16]
   331c4:	mul	r8, r2, r8
   331c8:	add	r3, r0, r8
   331cc:	cmp	r1, r3
   331d0:	bcc	331f0 <flatcc_json_printer_uint8_field@@Base+0x1d0>
   331d4:	mov	r2, r8
   331d8:	mov	r1, #32
   331dc:	bl	145bc <memset@plt>
   331e0:	ldr	r2, [r4, #20]
   331e4:	add	r2, r2, r8
   331e8:	str	r2, [r4, #20]
   331ec:	b	330d0 <flatcc_json_printer_uint8_field@@Base+0xb0>
   331f0:	mov	r1, r8
   331f4:	mov	r0, r4
   331f8:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   331fc:	ldr	r2, [r4, #20]
   33200:	b	330d0 <flatcc_json_printer_uint8_field@@Base+0xb0>

00033204 <flatcc_json_printer_uint16_field@@Base>:
   33204:	add	r2, r2, #2
   33208:	ldr	ip, [r1, #8]
   3320c:	lsl	r2, r2, #1
   33210:	push	{r4, r5, r6, r7, r8, lr}
   33214:	cmp	r2, ip
   33218:	ldr	r5, [sp, #24]
   3321c:	ldrh	ip, [sp, #28]
   33220:	blt	33238 <flatcc_json_printer_uint16_field@@Base+0x34>
   33224:	ldrb	r2, [r0, #29]
   33228:	cmp	r2, #0
   3322c:	popeq	{r4, r5, r6, r7, r8, pc}
   33230:	mov	r6, ip
   33234:	b	33260 <flatcc_json_printer_uint16_field@@Base+0x5c>
   33238:	ldr	lr, [r1, #4]
   3323c:	ldrh	r2, [lr, r2]
   33240:	cmp	r2, #0
   33244:	beq	33224 <flatcc_json_printer_uint16_field@@Base+0x20>
   33248:	ldr	lr, [r1]
   3324c:	cmn	lr, r2
   33250:	beq	33224 <flatcc_json_printer_uint16_field@@Base+0x20>
   33254:	ldrh	r6, [lr, r2]
   33258:	cmp	ip, r6
   3325c:	beq	33374 <flatcc_json_printer_uint16_field@@Base+0x170>
   33260:	ldr	r2, [r1, #16]
   33264:	mov	r7, r3
   33268:	cmp	r2, #0
   3326c:	add	r2, r2, #1
   33270:	str	r2, [r1, #16]
   33274:	ldrne	r2, [r0, #20]
   33278:	movne	r1, #44	; 0x2c
   3327c:	addne	ip, r2, #1
   33280:	strne	ip, [r0, #20]
   33284:	strbne	r1, [r2]
   33288:	ldrb	r1, [r0, #25]
   3328c:	mov	r4, r0
   33290:	cmp	r1, #0
   33294:	bne	33384 <flatcc_json_printer_uint16_field@@Base+0x180>
   33298:	ldr	r2, [r0, #20]
   3329c:	ldr	r3, [r0, #16]
   332a0:	cmp	r2, r3
   332a4:	bcc	332b4 <flatcc_json_printer_uint16_field@@Base+0xb0>
   332a8:	ldr	r3, [r0, #44]	; 0x2c
   332ac:	blx	r3
   332b0:	ldr	r2, [r4, #20]
   332b4:	mov	r3, #34	; 0x22
   332b8:	strb	r3, [r2]
   332bc:	ldrb	r3, [r4, #26]
   332c0:	ldr	r0, [r4, #20]
   332c4:	ldr	r2, [r4, #16]
   332c8:	cmp	r3, #0
   332cc:	addeq	r0, r0, #1
   332d0:	add	r3, r0, r5
   332d4:	cmp	r2, r3
   332d8:	str	r0, [r4, #20]
   332dc:	bhi	33358 <flatcc_json_printer_uint16_field@@Base+0x154>
   332e0:	mov	r2, r5
   332e4:	mov	r1, r7
   332e8:	mov	r0, r4
   332ec:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   332f0:	ldr	r5, [r4, #20]
   332f4:	mov	r3, #34	; 0x22
   332f8:	strb	r3, [r5]
   332fc:	ldr	r1, [r4, #20]
   33300:	ldrb	r3, [r4, #26]
   33304:	clz	r3, r3
   33308:	lsr	r3, r3, #5
   3330c:	add	r2, r1, r3
   33310:	add	r2, r2, #1
   33314:	mov	r0, #58	; 0x3a
   33318:	str	r2, [r4, #20]
   3331c:	strb	r0, [r1, r3]
   33320:	ldr	r3, [r4, #20]
   33324:	mov	r2, #32
   33328:	mov	r0, r6
   3332c:	strb	r2, [r3]
   33330:	ldrb	r3, [r4, #25]
   33334:	ldr	r1, [r4, #20]
   33338:	cmp	r3, #0
   3333c:	addne	r1, r1, #1
   33340:	str	r1, [r4, #20]
   33344:	bl	301f8 <flatcc_json_parser_table_as_root@@Base+0xc>
   33348:	ldr	r3, [r4, #20]
   3334c:	add	r0, r3, r0
   33350:	str	r0, [r4, #20]
   33354:	pop	{r4, r5, r6, r7, r8, pc}
   33358:	mov	r2, r5
   3335c:	mov	r1, r7
   33360:	bl	14544 <memcpy@plt>
   33364:	ldr	r3, [r4, #20]
   33368:	add	r5, r3, r5
   3336c:	str	r5, [r4, #20]
   33370:	b	332f4 <flatcc_json_printer_uint16_field@@Base+0xf0>
   33374:	ldrb	r2, [r0, #28]
   33378:	cmp	r2, #0
   3337c:	beq	33260 <flatcc_json_printer_uint16_field@@Base+0x5c>
   33380:	pop	{r4, r5, r6, r7, r8, pc}
   33384:	ldr	r3, [r0, #20]
   33388:	mov	r2, #10
   3338c:	add	r1, r3, #1
   33390:	str	r1, [r0, #20]
   33394:	strb	r2, [r3]
   33398:	ldrb	r8, [r0, #25]
   3339c:	ldr	r2, [r0, #32]
   333a0:	ldr	r0, [r0, #20]
   333a4:	ldr	r1, [r4, #16]
   333a8:	mul	r8, r2, r8
   333ac:	add	r3, r0, r8
   333b0:	cmp	r1, r3
   333b4:	bcc	333d4 <flatcc_json_printer_uint16_field@@Base+0x1d0>
   333b8:	mov	r2, r8
   333bc:	mov	r1, #32
   333c0:	bl	145bc <memset@plt>
   333c4:	ldr	r2, [r4, #20]
   333c8:	add	r2, r2, r8
   333cc:	str	r2, [r4, #20]
   333d0:	b	332b4 <flatcc_json_printer_uint16_field@@Base+0xb0>
   333d4:	mov	r1, r8
   333d8:	mov	r0, r4
   333dc:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   333e0:	ldr	r2, [r4, #20]
   333e4:	b	332b4 <flatcc_json_printer_uint16_field@@Base+0xb0>

000333e8 <flatcc_json_printer_uint32_field@@Base>:
   333e8:	add	r2, r2, #2
   333ec:	ldr	ip, [r1, #8]
   333f0:	lsl	r2, r2, #1
   333f4:	push	{r4, r5, r6, r7, r8, lr}
   333f8:	cmp	r2, ip
   333fc:	ldr	r5, [sp, #24]
   33400:	blt	33418 <flatcc_json_printer_uint32_field@@Base+0x30>
   33404:	ldrb	r2, [r0, #29]
   33408:	cmp	r2, #0
   3340c:	popeq	{r4, r5, r6, r7, r8, pc}
   33410:	ldr	r6, [sp, #28]
   33414:	b	33444 <flatcc_json_printer_uint32_field@@Base+0x5c>
   33418:	ldr	ip, [r1, #4]
   3341c:	ldrh	r2, [ip, r2]
   33420:	cmp	r2, #0
   33424:	beq	33404 <flatcc_json_printer_uint32_field@@Base+0x1c>
   33428:	ldr	ip, [r1]
   3342c:	cmn	ip, r2
   33430:	beq	33404 <flatcc_json_printer_uint32_field@@Base+0x1c>
   33434:	ldr	r6, [ip, r2]
   33438:	ldr	r2, [sp, #28]
   3343c:	cmp	r2, r6
   33440:	beq	33558 <flatcc_json_printer_uint32_field@@Base+0x170>
   33444:	ldr	r2, [r1, #16]
   33448:	mov	r7, r3
   3344c:	cmp	r2, #0
   33450:	add	r2, r2, #1
   33454:	str	r2, [r1, #16]
   33458:	ldrne	r2, [r0, #20]
   3345c:	movne	r1, #44	; 0x2c
   33460:	addne	ip, r2, #1
   33464:	strne	ip, [r0, #20]
   33468:	strbne	r1, [r2]
   3346c:	ldrb	r1, [r0, #25]
   33470:	mov	r4, r0
   33474:	cmp	r1, #0
   33478:	bne	33568 <flatcc_json_printer_uint32_field@@Base+0x180>
   3347c:	ldr	r2, [r0, #20]
   33480:	ldr	r3, [r0, #16]
   33484:	cmp	r2, r3
   33488:	bcc	33498 <flatcc_json_printer_uint32_field@@Base+0xb0>
   3348c:	ldr	r3, [r0, #44]	; 0x2c
   33490:	blx	r3
   33494:	ldr	r2, [r4, #20]
   33498:	mov	r3, #34	; 0x22
   3349c:	strb	r3, [r2]
   334a0:	ldrb	r3, [r4, #26]
   334a4:	ldr	r0, [r4, #20]
   334a8:	ldr	r2, [r4, #16]
   334ac:	cmp	r3, #0
   334b0:	addeq	r0, r0, #1
   334b4:	add	r3, r0, r5
   334b8:	cmp	r2, r3
   334bc:	str	r0, [r4, #20]
   334c0:	bhi	3353c <flatcc_json_printer_uint32_field@@Base+0x154>
   334c4:	mov	r2, r5
   334c8:	mov	r1, r7
   334cc:	mov	r0, r4
   334d0:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   334d4:	ldr	r5, [r4, #20]
   334d8:	mov	r3, #34	; 0x22
   334dc:	strb	r3, [r5]
   334e0:	ldr	r1, [r4, #20]
   334e4:	ldrb	r3, [r4, #26]
   334e8:	clz	r3, r3
   334ec:	lsr	r3, r3, #5
   334f0:	add	r2, r1, r3
   334f4:	add	r2, r2, #1
   334f8:	mov	r0, #58	; 0x3a
   334fc:	str	r2, [r4, #20]
   33500:	strb	r0, [r1, r3]
   33504:	ldr	r3, [r4, #20]
   33508:	mov	r2, #32
   3350c:	mov	r0, r6
   33510:	strb	r2, [r3]
   33514:	ldrb	r3, [r4, #25]
   33518:	ldr	r1, [r4, #20]
   3351c:	cmp	r3, #0
   33520:	addne	r1, r1, #1
   33524:	str	r1, [r4, #20]
   33528:	bl	3037c <flatcc_json_parser_table_as_root@@Base+0x190>
   3352c:	ldr	r3, [r4, #20]
   33530:	add	r0, r3, r0
   33534:	str	r0, [r4, #20]
   33538:	pop	{r4, r5, r6, r7, r8, pc}
   3353c:	mov	r2, r5
   33540:	mov	r1, r7
   33544:	bl	14544 <memcpy@plt>
   33548:	ldr	r3, [r4, #20]
   3354c:	add	r5, r3, r5
   33550:	str	r5, [r4, #20]
   33554:	b	334d8 <flatcc_json_printer_uint32_field@@Base+0xf0>
   33558:	ldrb	r2, [r0, #28]
   3355c:	cmp	r2, #0
   33560:	beq	33444 <flatcc_json_printer_uint32_field@@Base+0x5c>
   33564:	pop	{r4, r5, r6, r7, r8, pc}
   33568:	ldr	r3, [r0, #20]
   3356c:	mov	r2, #10
   33570:	add	r1, r3, #1
   33574:	str	r1, [r0, #20]
   33578:	strb	r2, [r3]
   3357c:	ldrb	r8, [r0, #25]
   33580:	ldr	r2, [r0, #32]
   33584:	ldr	r0, [r0, #20]
   33588:	ldr	r1, [r4, #16]
   3358c:	mul	r8, r2, r8
   33590:	add	r3, r0, r8
   33594:	cmp	r1, r3
   33598:	bcc	335b8 <flatcc_json_printer_uint32_field@@Base+0x1d0>
   3359c:	mov	r2, r8
   335a0:	mov	r1, #32
   335a4:	bl	145bc <memset@plt>
   335a8:	ldr	r2, [r4, #20]
   335ac:	add	r2, r2, r8
   335b0:	str	r2, [r4, #20]
   335b4:	b	33498 <flatcc_json_printer_uint32_field@@Base+0xb0>
   335b8:	mov	r1, r8
   335bc:	mov	r0, r4
   335c0:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   335c4:	ldr	r2, [r4, #20]
   335c8:	b	33498 <flatcc_json_printer_uint32_field@@Base+0xb0>

000335cc <flatcc_json_printer_uint64_field@@Base>:
   335cc:	add	r2, r2, #2
   335d0:	ldr	ip, [r1, #8]
   335d4:	lsl	r2, r2, #1
   335d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   335dc:	cmp	r2, ip
   335e0:	ldr	r5, [sp, #32]
   335e4:	blt	335fc <flatcc_json_printer_uint64_field@@Base+0x30>
   335e8:	ldrb	r2, [r0, #29]
   335ec:	cmp	r2, #0
   335f0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   335f4:	ldrd	r6, [sp, #40]	; 0x28
   335f8:	b	3362c <flatcc_json_printer_uint64_field@@Base+0x60>
   335fc:	ldr	ip, [r1, #4]
   33600:	ldrh	r2, [ip, r2]
   33604:	cmp	r2, #0
   33608:	beq	335e8 <flatcc_json_printer_uint64_field@@Base+0x1c>
   3360c:	ldr	ip, [r1]
   33610:	cmn	ip, r2
   33614:	beq	335e8 <flatcc_json_printer_uint64_field@@Base+0x1c>
   33618:	ldrd	r6, [ip, r2]
   3361c:	ldrd	r8, [sp, #40]	; 0x28
   33620:	cmp	r9, r7
   33624:	cmpeq	r8, r6
   33628:	beq	33744 <flatcc_json_printer_uint64_field@@Base+0x178>
   3362c:	ldr	r2, [r1, #16]
   33630:	mov	r8, r3
   33634:	cmp	r2, #0
   33638:	add	r2, r2, #1
   3363c:	str	r2, [r1, #16]
   33640:	ldrne	r2, [r0, #20]
   33644:	movne	r1, #44	; 0x2c
   33648:	addne	ip, r2, #1
   3364c:	strne	ip, [r0, #20]
   33650:	strbne	r1, [r2]
   33654:	ldrb	r1, [r0, #25]
   33658:	mov	r4, r0
   3365c:	cmp	r1, #0
   33660:	bne	33754 <flatcc_json_printer_uint64_field@@Base+0x188>
   33664:	ldr	r2, [r0, #20]
   33668:	ldr	r3, [r0, #16]
   3366c:	cmp	r2, r3
   33670:	bcc	33680 <flatcc_json_printer_uint64_field@@Base+0xb4>
   33674:	ldr	r3, [r0, #44]	; 0x2c
   33678:	blx	r3
   3367c:	ldr	r2, [r4, #20]
   33680:	mov	r3, #34	; 0x22
   33684:	strb	r3, [r2]
   33688:	ldrb	r3, [r4, #26]
   3368c:	ldr	r0, [r4, #20]
   33690:	ldr	r2, [r4, #16]
   33694:	cmp	r3, #0
   33698:	addeq	r0, r0, #1
   3369c:	add	r3, r0, r5
   336a0:	cmp	r2, r3
   336a4:	str	r0, [r4, #20]
   336a8:	bhi	33728 <flatcc_json_printer_uint64_field@@Base+0x15c>
   336ac:	mov	r2, r5
   336b0:	mov	r1, r8
   336b4:	mov	r0, r4
   336b8:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   336bc:	ldr	r5, [r4, #20]
   336c0:	mov	r3, #34	; 0x22
   336c4:	strb	r3, [r5]
   336c8:	ldr	r1, [r4, #20]
   336cc:	ldrb	r3, [r4, #26]
   336d0:	clz	r3, r3
   336d4:	lsr	r3, r3, #5
   336d8:	add	r2, r1, r3
   336dc:	add	r2, r2, #1
   336e0:	mov	r0, #58	; 0x3a
   336e4:	str	r2, [r4, #20]
   336e8:	strb	r0, [r1, r3]
   336ec:	ldr	r3, [r4, #20]
   336f0:	mov	r2, #32
   336f4:	mov	r0, r6
   336f8:	strb	r2, [r3]
   336fc:	ldrb	r3, [r4, #25]
   33700:	ldr	r2, [r4, #20]
   33704:	mov	r1, r7
   33708:	cmp	r3, #0
   3370c:	addne	r2, r2, #1
   33710:	str	r2, [r4, #20]
   33714:	bl	306e8 <flatcc_json_parser_table_as_root@@Base+0x4fc>
   33718:	ldr	r3, [r4, #20]
   3371c:	add	r0, r3, r0
   33720:	str	r0, [r4, #20]
   33724:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33728:	mov	r2, r5
   3372c:	mov	r1, r8
   33730:	bl	14544 <memcpy@plt>
   33734:	ldr	r3, [r4, #20]
   33738:	add	r5, r3, r5
   3373c:	str	r5, [r4, #20]
   33740:	b	336c0 <flatcc_json_printer_uint64_field@@Base+0xf4>
   33744:	ldrb	r2, [r0, #28]
   33748:	cmp	r2, #0
   3374c:	beq	3362c <flatcc_json_printer_uint64_field@@Base+0x60>
   33750:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33754:	ldr	r3, [r0, #20]
   33758:	mov	r2, #10
   3375c:	add	r1, r3, #1
   33760:	str	r1, [r0, #20]
   33764:	strb	r2, [r3]
   33768:	ldrb	r3, [r0, #25]
   3376c:	ldr	r2, [r0, #32]
   33770:	ldr	r0, [r0, #20]
   33774:	ldr	r1, [r4, #16]
   33778:	mul	r9, r2, r3
   3377c:	add	r3, r0, r9
   33780:	cmp	r1, r3
   33784:	bcc	337a4 <flatcc_json_printer_uint64_field@@Base+0x1d8>
   33788:	mov	r2, r9
   3378c:	mov	r1, #32
   33790:	bl	145bc <memset@plt>
   33794:	ldr	r2, [r4, #20]
   33798:	add	r2, r2, r9
   3379c:	str	r2, [r4, #20]
   337a0:	b	33680 <flatcc_json_printer_uint64_field@@Base+0xb4>
   337a4:	mov	r1, r9
   337a8:	mov	r0, r4
   337ac:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   337b0:	ldr	r2, [r4, #20]
   337b4:	b	33680 <flatcc_json_printer_uint64_field@@Base+0xb4>

000337b8 <flatcc_json_printer_int8_field@@Base>:
   337b8:	add	r2, r2, #2
   337bc:	ldr	ip, [r1, #8]
   337c0:	lsl	r2, r2, #1
   337c4:	push	{r4, r5, r6, r7, r8, lr}
   337c8:	cmp	r2, ip
   337cc:	ldr	r6, [sp, #24]
   337d0:	ldrsb	ip, [sp, #28]
   337d4:	blt	337ec <flatcc_json_printer_int8_field@@Base+0x34>
   337d8:	ldrb	r2, [r0, #29]
   337dc:	cmp	r2, #0
   337e0:	popeq	{r4, r5, r6, r7, r8, pc}
   337e4:	mov	r5, ip
   337e8:	b	33814 <flatcc_json_printer_int8_field@@Base+0x5c>
   337ec:	ldr	lr, [r1, #4]
   337f0:	ldrh	r2, [lr, r2]
   337f4:	cmp	r2, #0
   337f8:	beq	337d8 <flatcc_json_printer_int8_field@@Base+0x20>
   337fc:	ldr	lr, [r1]
   33800:	cmn	lr, r2
   33804:	beq	337d8 <flatcc_json_printer_int8_field@@Base+0x20>
   33808:	ldrsb	r5, [lr, r2]
   3380c:	cmp	ip, r5
   33810:	beq	3394c <flatcc_json_printer_int8_field@@Base+0x194>
   33814:	ldr	r2, [r1, #16]
   33818:	mov	r7, r3
   3381c:	cmp	r2, #0
   33820:	add	r2, r2, #1
   33824:	str	r2, [r1, #16]
   33828:	ldrne	r2, [r0, #20]
   3382c:	movne	r1, #44	; 0x2c
   33830:	addne	ip, r2, #1
   33834:	strne	ip, [r0, #20]
   33838:	strbne	r1, [r2]
   3383c:	ldrb	r1, [r0, #25]
   33840:	mov	r4, r0
   33844:	cmp	r1, #0
   33848:	bne	3395c <flatcc_json_printer_int8_field@@Base+0x1a4>
   3384c:	ldr	r2, [r0, #20]
   33850:	ldr	r3, [r0, #16]
   33854:	cmp	r2, r3
   33858:	bcc	33868 <flatcc_json_printer_int8_field@@Base+0xb0>
   3385c:	ldr	r3, [r0, #44]	; 0x2c
   33860:	blx	r3
   33864:	ldr	r2, [r4, #20]
   33868:	mov	r3, #34	; 0x22
   3386c:	strb	r3, [r2]
   33870:	ldrb	r3, [r4, #26]
   33874:	ldr	r0, [r4, #20]
   33878:	ldr	r2, [r4, #16]
   3387c:	cmp	r3, #0
   33880:	addeq	r0, r0, #1
   33884:	add	r3, r0, r6
   33888:	cmp	r2, r3
   3388c:	str	r0, [r4, #20]
   33890:	bhi	33930 <flatcc_json_printer_int8_field@@Base+0x178>
   33894:	mov	r2, r6
   33898:	mov	r1, r7
   3389c:	mov	r0, r4
   338a0:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   338a4:	ldr	r6, [r4, #20]
   338a8:	mov	r3, #34	; 0x22
   338ac:	strb	r3, [r6]
   338b0:	ldr	r1, [r4, #20]
   338b4:	ldrb	r3, [r4, #26]
   338b8:	clz	r3, r3
   338bc:	lsr	r3, r3, #5
   338c0:	add	r2, r1, r3
   338c4:	mov	r0, #58	; 0x3a
   338c8:	add	r2, r2, #1
   338cc:	str	r2, [r4, #20]
   338d0:	strb	r0, [r1, r3]
   338d4:	ldr	r3, [r4, #20]
   338d8:	mov	r2, #32
   338dc:	lsr	r6, r5, #31
   338e0:	strb	r2, [r3]
   338e4:	ldrb	r3, [r4, #25]
   338e8:	ldr	r2, [r4, #20]
   338ec:	adds	r3, r3, #0
   338f0:	movne	r3, #1
   338f4:	cmp	r5, #0
   338f8:	rsblt	r5, r5, #0
   338fc:	add	r1, r2, r3
   33900:	sxtblt	r5, r5
   33904:	movlt	r0, #45	; 0x2d
   33908:	str	r1, [r4, #20]
   3390c:	strblt	r0, [r2, r3]
   33910:	addlt	r1, r1, #1
   33914:	uxtb	r0, r5
   33918:	bl	31344 <flatcc_json_parser_table_as_root@@Base+0x1158>
   3391c:	ldr	r3, [r4, #20]
   33920:	add	r0, r6, r0
   33924:	add	r3, r3, r0
   33928:	str	r3, [r4, #20]
   3392c:	pop	{r4, r5, r6, r7, r8, pc}
   33930:	mov	r2, r6
   33934:	mov	r1, r7
   33938:	bl	14544 <memcpy@plt>
   3393c:	ldr	r3, [r4, #20]
   33940:	add	r6, r3, r6
   33944:	str	r6, [r4, #20]
   33948:	b	338a8 <flatcc_json_printer_int8_field@@Base+0xf0>
   3394c:	ldrb	r2, [r0, #28]
   33950:	cmp	r2, #0
   33954:	beq	33814 <flatcc_json_printer_int8_field@@Base+0x5c>
   33958:	pop	{r4, r5, r6, r7, r8, pc}
   3395c:	ldr	r3, [r0, #20]
   33960:	mov	r2, #10
   33964:	add	r1, r3, #1
   33968:	str	r1, [r0, #20]
   3396c:	strb	r2, [r3]
   33970:	ldrb	r8, [r0, #25]
   33974:	ldr	r2, [r0, #32]
   33978:	ldr	r0, [r0, #20]
   3397c:	ldr	r1, [r4, #16]
   33980:	mul	r8, r2, r8
   33984:	add	r3, r0, r8
   33988:	cmp	r1, r3
   3398c:	bcc	339ac <flatcc_json_printer_int8_field@@Base+0x1f4>
   33990:	mov	r2, r8
   33994:	mov	r1, #32
   33998:	bl	145bc <memset@plt>
   3399c:	ldr	r2, [r4, #20]
   339a0:	add	r2, r2, r8
   339a4:	str	r2, [r4, #20]
   339a8:	b	33868 <flatcc_json_printer_int8_field@@Base+0xb0>
   339ac:	mov	r1, r8
   339b0:	mov	r0, r4
   339b4:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   339b8:	ldr	r2, [r4, #20]
   339bc:	b	33868 <flatcc_json_printer_int8_field@@Base+0xb0>

000339c0 <flatcc_json_printer_int16_field@@Base>:
   339c0:	add	r2, r2, #2
   339c4:	ldr	ip, [r1, #8]
   339c8:	lsl	r2, r2, #1
   339cc:	push	{r4, r5, r6, r7, r8, lr}
   339d0:	cmp	r2, ip
   339d4:	ldr	r6, [sp, #24]
   339d8:	ldrsh	ip, [sp, #28]
   339dc:	blt	339f4 <flatcc_json_printer_int16_field@@Base+0x34>
   339e0:	ldrb	r2, [r0, #29]
   339e4:	cmp	r2, #0
   339e8:	popeq	{r4, r5, r6, r7, r8, pc}
   339ec:	mov	r5, ip
   339f0:	b	33a1c <flatcc_json_printer_int16_field@@Base+0x5c>
   339f4:	ldr	lr, [r1, #4]
   339f8:	ldrh	r2, [lr, r2]
   339fc:	cmp	r2, #0
   33a00:	beq	339e0 <flatcc_json_printer_int16_field@@Base+0x20>
   33a04:	ldr	lr, [r1]
   33a08:	cmn	lr, r2
   33a0c:	beq	339e0 <flatcc_json_printer_int16_field@@Base+0x20>
   33a10:	ldrsh	r5, [lr, r2]
   33a14:	cmp	ip, r5
   33a18:	beq	33b54 <flatcc_json_printer_int16_field@@Base+0x194>
   33a1c:	ldr	r2, [r1, #16]
   33a20:	mov	r7, r3
   33a24:	cmp	r2, #0
   33a28:	add	r2, r2, #1
   33a2c:	str	r2, [r1, #16]
   33a30:	ldrne	r2, [r0, #20]
   33a34:	movne	r1, #44	; 0x2c
   33a38:	addne	ip, r2, #1
   33a3c:	strne	ip, [r0, #20]
   33a40:	strbne	r1, [r2]
   33a44:	ldrb	r1, [r0, #25]
   33a48:	mov	r4, r0
   33a4c:	cmp	r1, #0
   33a50:	bne	33b64 <flatcc_json_printer_int16_field@@Base+0x1a4>
   33a54:	ldr	r2, [r0, #20]
   33a58:	ldr	r3, [r0, #16]
   33a5c:	cmp	r2, r3
   33a60:	bcc	33a70 <flatcc_json_printer_int16_field@@Base+0xb0>
   33a64:	ldr	r3, [r0, #44]	; 0x2c
   33a68:	blx	r3
   33a6c:	ldr	r2, [r4, #20]
   33a70:	mov	r3, #34	; 0x22
   33a74:	strb	r3, [r2]
   33a78:	ldrb	r3, [r4, #26]
   33a7c:	ldr	r0, [r4, #20]
   33a80:	ldr	r2, [r4, #16]
   33a84:	cmp	r3, #0
   33a88:	addeq	r0, r0, #1
   33a8c:	add	r3, r0, r6
   33a90:	cmp	r2, r3
   33a94:	str	r0, [r4, #20]
   33a98:	bhi	33b38 <flatcc_json_printer_int16_field@@Base+0x178>
   33a9c:	mov	r2, r6
   33aa0:	mov	r1, r7
   33aa4:	mov	r0, r4
   33aa8:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   33aac:	ldr	r6, [r4, #20]
   33ab0:	mov	r3, #34	; 0x22
   33ab4:	strb	r3, [r6]
   33ab8:	ldr	r1, [r4, #20]
   33abc:	ldrb	r3, [r4, #26]
   33ac0:	clz	r3, r3
   33ac4:	lsr	r3, r3, #5
   33ac8:	add	r2, r1, r3
   33acc:	mov	r0, #58	; 0x3a
   33ad0:	add	r2, r2, #1
   33ad4:	str	r2, [r4, #20]
   33ad8:	strb	r0, [r1, r3]
   33adc:	ldr	r3, [r4, #20]
   33ae0:	mov	r2, #32
   33ae4:	lsr	r6, r5, #31
   33ae8:	strb	r2, [r3]
   33aec:	ldrb	r3, [r4, #25]
   33af0:	ldr	r2, [r4, #20]
   33af4:	adds	r3, r3, #0
   33af8:	movne	r3, #1
   33afc:	cmp	r5, #0
   33b00:	rsblt	r5, r5, #0
   33b04:	add	r1, r2, r3
   33b08:	sxthlt	r5, r5
   33b0c:	movlt	r0, #45	; 0x2d
   33b10:	str	r1, [r4, #20]
   33b14:	strblt	r0, [r2, r3]
   33b18:	addlt	r1, r1, #1
   33b1c:	uxth	r0, r5
   33b20:	bl	301f8 <flatcc_json_parser_table_as_root@@Base+0xc>
   33b24:	ldr	r3, [r4, #20]
   33b28:	add	r0, r6, r0
   33b2c:	add	r3, r3, r0
   33b30:	str	r3, [r4, #20]
   33b34:	pop	{r4, r5, r6, r7, r8, pc}
   33b38:	mov	r2, r6
   33b3c:	mov	r1, r7
   33b40:	bl	14544 <memcpy@plt>
   33b44:	ldr	r3, [r4, #20]
   33b48:	add	r6, r3, r6
   33b4c:	str	r6, [r4, #20]
   33b50:	b	33ab0 <flatcc_json_printer_int16_field@@Base+0xf0>
   33b54:	ldrb	r2, [r0, #28]
   33b58:	cmp	r2, #0
   33b5c:	beq	33a1c <flatcc_json_printer_int16_field@@Base+0x5c>
   33b60:	pop	{r4, r5, r6, r7, r8, pc}
   33b64:	ldr	r3, [r0, #20]
   33b68:	mov	r2, #10
   33b6c:	add	r1, r3, #1
   33b70:	str	r1, [r0, #20]
   33b74:	strb	r2, [r3]
   33b78:	ldrb	r8, [r0, #25]
   33b7c:	ldr	r2, [r0, #32]
   33b80:	ldr	r0, [r0, #20]
   33b84:	ldr	r1, [r4, #16]
   33b88:	mul	r8, r2, r8
   33b8c:	add	r3, r0, r8
   33b90:	cmp	r1, r3
   33b94:	bcc	33bb4 <flatcc_json_printer_int16_field@@Base+0x1f4>
   33b98:	mov	r2, r8
   33b9c:	mov	r1, #32
   33ba0:	bl	145bc <memset@plt>
   33ba4:	ldr	r2, [r4, #20]
   33ba8:	add	r2, r2, r8
   33bac:	str	r2, [r4, #20]
   33bb0:	b	33a70 <flatcc_json_printer_int16_field@@Base+0xb0>
   33bb4:	mov	r1, r8
   33bb8:	mov	r0, r4
   33bbc:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   33bc0:	ldr	r2, [r4, #20]
   33bc4:	b	33a70 <flatcc_json_printer_int16_field@@Base+0xb0>

00033bc8 <flatcc_json_printer_int32_field@@Base>:
   33bc8:	add	r2, r2, #2
   33bcc:	ldr	ip, [r1, #8]
   33bd0:	lsl	r2, r2, #1
   33bd4:	push	{r4, r5, r6, r7, r8, lr}
   33bd8:	cmp	r2, ip
   33bdc:	ldr	r6, [sp, #24]
   33be0:	blt	33bf8 <flatcc_json_printer_int32_field@@Base+0x30>
   33be4:	ldrb	r2, [r0, #29]
   33be8:	cmp	r2, #0
   33bec:	popeq	{r4, r5, r6, r7, r8, pc}
   33bf0:	ldr	r5, [sp, #28]
   33bf4:	b	33c24 <flatcc_json_printer_int32_field@@Base+0x5c>
   33bf8:	ldr	ip, [r1, #4]
   33bfc:	ldrh	r2, [ip, r2]
   33c00:	cmp	r2, #0
   33c04:	beq	33be4 <flatcc_json_printer_int32_field@@Base+0x1c>
   33c08:	ldr	ip, [r1]
   33c0c:	cmn	ip, r2
   33c10:	beq	33be4 <flatcc_json_printer_int32_field@@Base+0x1c>
   33c14:	ldr	r5, [ip, r2]
   33c18:	ldr	r2, [sp, #28]
   33c1c:	cmp	r2, r5
   33c20:	beq	33d58 <flatcc_json_printer_int32_field@@Base+0x190>
   33c24:	ldr	r2, [r1, #16]
   33c28:	mov	r7, r3
   33c2c:	cmp	r2, #0
   33c30:	add	r2, r2, #1
   33c34:	str	r2, [r1, #16]
   33c38:	ldrne	r2, [r0, #20]
   33c3c:	movne	r1, #44	; 0x2c
   33c40:	addne	ip, r2, #1
   33c44:	strne	ip, [r0, #20]
   33c48:	strbne	r1, [r2]
   33c4c:	ldrb	r1, [r0, #25]
   33c50:	mov	r4, r0
   33c54:	cmp	r1, #0
   33c58:	bne	33d68 <flatcc_json_printer_int32_field@@Base+0x1a0>
   33c5c:	ldr	r2, [r0, #20]
   33c60:	ldr	r3, [r0, #16]
   33c64:	cmp	r2, r3
   33c68:	bcc	33c78 <flatcc_json_printer_int32_field@@Base+0xb0>
   33c6c:	ldr	r3, [r0, #44]	; 0x2c
   33c70:	blx	r3
   33c74:	ldr	r2, [r4, #20]
   33c78:	mov	r3, #34	; 0x22
   33c7c:	strb	r3, [r2]
   33c80:	ldrb	r3, [r4, #26]
   33c84:	ldr	r0, [r4, #20]
   33c88:	ldr	r2, [r4, #16]
   33c8c:	cmp	r3, #0
   33c90:	addeq	r0, r0, #1
   33c94:	add	r3, r0, r6
   33c98:	cmp	r2, r3
   33c9c:	str	r0, [r4, #20]
   33ca0:	bhi	33d3c <flatcc_json_printer_int32_field@@Base+0x174>
   33ca4:	mov	r2, r6
   33ca8:	mov	r1, r7
   33cac:	mov	r0, r4
   33cb0:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   33cb4:	ldr	r6, [r4, #20]
   33cb8:	mov	r3, #34	; 0x22
   33cbc:	strb	r3, [r6]
   33cc0:	ldr	r1, [r4, #20]
   33cc4:	ldrb	r3, [r4, #26]
   33cc8:	clz	r3, r3
   33ccc:	lsr	r3, r3, #5
   33cd0:	add	r2, r1, r3
   33cd4:	mov	r0, #58	; 0x3a
   33cd8:	add	r2, r2, #1
   33cdc:	str	r2, [r4, #20]
   33ce0:	strb	r0, [r1, r3]
   33ce4:	ldr	r3, [r4, #20]
   33ce8:	mov	r2, #32
   33cec:	lsr	r6, r5, #31
   33cf0:	strb	r2, [r3]
   33cf4:	ldrb	r3, [r4, #25]
   33cf8:	ldr	r2, [r4, #20]
   33cfc:	adds	r3, r3, #0
   33d00:	movne	r3, #1
   33d04:	cmp	r5, #0
   33d08:	add	r1, r2, r3
   33d0c:	movlt	r0, #45	; 0x2d
   33d10:	rsblt	r5, r5, #0
   33d14:	str	r1, [r4, #20]
   33d18:	strblt	r0, [r2, r3]
   33d1c:	addlt	r1, r1, #1
   33d20:	mov	r0, r5
   33d24:	bl	3037c <flatcc_json_parser_table_as_root@@Base+0x190>
   33d28:	ldr	r3, [r4, #20]
   33d2c:	add	r0, r6, r0
   33d30:	add	r3, r3, r0
   33d34:	str	r3, [r4, #20]
   33d38:	pop	{r4, r5, r6, r7, r8, pc}
   33d3c:	mov	r2, r6
   33d40:	mov	r1, r7
   33d44:	bl	14544 <memcpy@plt>
   33d48:	ldr	r3, [r4, #20]
   33d4c:	add	r6, r3, r6
   33d50:	str	r6, [r4, #20]
   33d54:	b	33cb8 <flatcc_json_printer_int32_field@@Base+0xf0>
   33d58:	ldrb	r2, [r0, #28]
   33d5c:	cmp	r2, #0
   33d60:	beq	33c24 <flatcc_json_printer_int32_field@@Base+0x5c>
   33d64:	pop	{r4, r5, r6, r7, r8, pc}
   33d68:	ldr	r3, [r0, #20]
   33d6c:	mov	r2, #10
   33d70:	add	r1, r3, #1
   33d74:	str	r1, [r0, #20]
   33d78:	strb	r2, [r3]
   33d7c:	ldrb	r8, [r0, #25]
   33d80:	ldr	r2, [r0, #32]
   33d84:	ldr	r0, [r0, #20]
   33d88:	ldr	r1, [r4, #16]
   33d8c:	mul	r8, r2, r8
   33d90:	add	r3, r0, r8
   33d94:	cmp	r1, r3
   33d98:	bcc	33db8 <flatcc_json_printer_int32_field@@Base+0x1f0>
   33d9c:	mov	r2, r8
   33da0:	mov	r1, #32
   33da4:	bl	145bc <memset@plt>
   33da8:	ldr	r2, [r4, #20]
   33dac:	add	r2, r2, r8
   33db0:	str	r2, [r4, #20]
   33db4:	b	33c78 <flatcc_json_printer_int32_field@@Base+0xb0>
   33db8:	mov	r1, r8
   33dbc:	mov	r0, r4
   33dc0:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   33dc4:	ldr	r2, [r4, #20]
   33dc8:	b	33c78 <flatcc_json_printer_int32_field@@Base+0xb0>

00033dcc <flatcc_json_printer_int64_field@@Base>:
   33dcc:	add	r2, r2, #2
   33dd0:	ldr	ip, [r1, #8]
   33dd4:	lsl	r2, r2, #1
   33dd8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33ddc:	cmp	r2, ip
   33de0:	ldr	r5, [sp, #32]
   33de4:	blt	33dfc <flatcc_json_printer_int64_field@@Base+0x30>
   33de8:	ldrb	r2, [r0, #29]
   33dec:	cmp	r2, #0
   33df0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   33df4:	ldrd	r6, [sp, #40]	; 0x28
   33df8:	b	33e2c <flatcc_json_printer_int64_field@@Base+0x60>
   33dfc:	ldr	ip, [r1, #4]
   33e00:	ldrh	r2, [ip, r2]
   33e04:	cmp	r2, #0
   33e08:	beq	33de8 <flatcc_json_printer_int64_field@@Base+0x1c>
   33e0c:	ldr	ip, [r1]
   33e10:	cmn	ip, r2
   33e14:	beq	33de8 <flatcc_json_printer_int64_field@@Base+0x1c>
   33e18:	ldrd	r6, [ip, r2]
   33e1c:	ldrd	r8, [sp, #40]	; 0x28
   33e20:	cmp	r9, r7
   33e24:	cmpeq	r8, r6
   33e28:	beq	33f5c <flatcc_json_printer_int64_field@@Base+0x190>
   33e2c:	ldr	r2, [r1, #16]
   33e30:	mov	r8, r3
   33e34:	cmp	r2, #0
   33e38:	add	r2, r2, #1
   33e3c:	str	r2, [r1, #16]
   33e40:	ldrne	r2, [r0, #20]
   33e44:	movne	r1, #44	; 0x2c
   33e48:	addne	ip, r2, #1
   33e4c:	strne	ip, [r0, #20]
   33e50:	strbne	r1, [r2]
   33e54:	ldrb	r1, [r0, #25]
   33e58:	mov	r4, r0
   33e5c:	cmp	r1, #0
   33e60:	bne	33f84 <flatcc_json_printer_int64_field@@Base+0x1b8>
   33e64:	ldr	r2, [r0, #20]
   33e68:	ldr	r3, [r0, #16]
   33e6c:	cmp	r2, r3
   33e70:	bcc	33e80 <flatcc_json_printer_int64_field@@Base+0xb4>
   33e74:	ldr	r3, [r0, #44]	; 0x2c
   33e78:	blx	r3
   33e7c:	ldr	r2, [r4, #20]
   33e80:	mov	r3, #34	; 0x22
   33e84:	strb	r3, [r2]
   33e88:	ldrb	r3, [r4, #26]
   33e8c:	ldr	r0, [r4, #20]
   33e90:	ldr	r2, [r4, #16]
   33e94:	cmp	r3, #0
   33e98:	addeq	r0, r0, #1
   33e9c:	add	r3, r0, r5
   33ea0:	cmp	r2, r3
   33ea4:	str	r0, [r4, #20]
   33ea8:	bhi	33f40 <flatcc_json_printer_int64_field@@Base+0x174>
   33eac:	mov	r2, r5
   33eb0:	mov	r1, r8
   33eb4:	mov	r0, r4
   33eb8:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   33ebc:	ldr	r5, [r4, #20]
   33ec0:	mov	r3, #34	; 0x22
   33ec4:	strb	r3, [r5]
   33ec8:	ldr	r1, [r4, #20]
   33ecc:	ldrb	r3, [r4, #26]
   33ed0:	clz	r3, r3
   33ed4:	lsr	r3, r3, #5
   33ed8:	add	r2, r1, r3
   33edc:	add	r2, r2, #1
   33ee0:	mov	r0, #58	; 0x3a
   33ee4:	str	r2, [r4, #20]
   33ee8:	strb	r0, [r1, r3]
   33eec:	ldr	r3, [r4, #20]
   33ef0:	mov	r2, #32
   33ef4:	lsr	r5, r7, #31
   33ef8:	strb	r2, [r3]
   33efc:	ldrb	r3, [r4, #25]
   33f00:	ldr	r1, [r4, #20]
   33f04:	adds	r3, r3, #0
   33f08:	movne	r3, #1
   33f0c:	cmp	r6, #0
   33f10:	add	r2, r1, r3
   33f14:	sbcs	r0, r7, #0
   33f18:	str	r2, [r4, #20]
   33f1c:	blt	33f6c <flatcc_json_printer_int64_field@@Base+0x1a0>
   33f20:	mov	r0, r6
   33f24:	mov	r1, r7
   33f28:	bl	306e8 <flatcc_json_parser_table_as_root@@Base+0x4fc>
   33f2c:	ldr	r3, [r4, #20]
   33f30:	add	r0, r5, r0
   33f34:	add	r3, r3, r0
   33f38:	str	r3, [r4, #20]
   33f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33f40:	mov	r2, r5
   33f44:	mov	r1, r8
   33f48:	bl	14544 <memcpy@plt>
   33f4c:	ldr	r3, [r4, #20]
   33f50:	add	r5, r3, r5
   33f54:	str	r5, [r4, #20]
   33f58:	b	33ec0 <flatcc_json_printer_int64_field@@Base+0xf4>
   33f5c:	ldrb	r2, [r0, #28]
   33f60:	cmp	r2, #0
   33f64:	beq	33e2c <flatcc_json_printer_int64_field@@Base+0x60>
   33f68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33f6c:	rsbs	r6, r6, #0
   33f70:	mov	r0, #45	; 0x2d
   33f74:	rsc	r7, r7, #0
   33f78:	add	r2, r2, #1
   33f7c:	strb	r0, [r1, r3]
   33f80:	b	33f20 <flatcc_json_printer_int64_field@@Base+0x154>
   33f84:	ldr	r3, [r0, #20]
   33f88:	mov	r2, #10
   33f8c:	add	r1, r3, #1
   33f90:	str	r1, [r0, #20]
   33f94:	strb	r2, [r3]
   33f98:	ldrb	r3, [r0, #25]
   33f9c:	ldr	r2, [r0, #32]
   33fa0:	ldr	r0, [r0, #20]
   33fa4:	ldr	r1, [r4, #16]
   33fa8:	mul	r9, r2, r3
   33fac:	add	r3, r0, r9
   33fb0:	cmp	r1, r3
   33fb4:	bcc	33fd4 <flatcc_json_printer_int64_field@@Base+0x208>
   33fb8:	mov	r2, r9
   33fbc:	mov	r1, #32
   33fc0:	bl	145bc <memset@plt>
   33fc4:	ldr	r2, [r4, #20]
   33fc8:	add	r2, r2, r9
   33fcc:	str	r2, [r4, #20]
   33fd0:	b	33e80 <flatcc_json_printer_int64_field@@Base+0xb4>
   33fd4:	mov	r1, r9
   33fd8:	mov	r0, r4
   33fdc:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   33fe0:	ldr	r2, [r4, #20]
   33fe4:	b	33e80 <flatcc_json_printer_int64_field@@Base+0xb4>

00033fe8 <flatcc_json_printer_bool_field@@Base>:
   33fe8:	add	r2, r2, #2
   33fec:	ldr	ip, [r1, #8]
   33ff0:	lsl	r2, r2, #1
   33ff4:	push	{r4, r5, r6, r7, r8, lr}
   33ff8:	cmp	r2, ip
   33ffc:	ldr	r5, [sp, #24]
   34000:	ldrb	ip, [sp, #28]
   34004:	blt	3401c <flatcc_json_printer_bool_field@@Base+0x34>
   34008:	ldrb	r2, [r0, #29]
   3400c:	cmp	r2, #0
   34010:	popeq	{r4, r5, r6, r7, r8, pc}
   34014:	mov	r6, ip
   34018:	b	34044 <flatcc_json_printer_bool_field@@Base+0x5c>
   3401c:	ldr	lr, [r1, #4]
   34020:	ldrh	r2, [lr, r2]
   34024:	cmp	r2, #0
   34028:	beq	34008 <flatcc_json_printer_bool_field@@Base+0x20>
   3402c:	ldr	lr, [r1]
   34030:	cmn	lr, r2
   34034:	beq	34008 <flatcc_json_printer_bool_field@@Base+0x20>
   34038:	ldrb	r6, [lr, r2]
   3403c:	cmp	ip, r6
   34040:	beq	34158 <flatcc_json_printer_bool_field@@Base+0x170>
   34044:	ldr	r2, [r1, #16]
   34048:	mov	r7, r3
   3404c:	cmp	r2, #0
   34050:	add	r2, r2, #1
   34054:	str	r2, [r1, #16]
   34058:	ldrne	r2, [r0, #20]
   3405c:	movne	r1, #44	; 0x2c
   34060:	addne	ip, r2, #1
   34064:	strne	ip, [r0, #20]
   34068:	strbne	r1, [r2]
   3406c:	ldrb	r1, [r0, #25]
   34070:	mov	r4, r0
   34074:	cmp	r1, #0
   34078:	bne	34168 <flatcc_json_printer_bool_field@@Base+0x180>
   3407c:	ldr	r2, [r0, #20]
   34080:	ldr	r3, [r0, #16]
   34084:	cmp	r2, r3
   34088:	bcc	34098 <flatcc_json_printer_bool_field@@Base+0xb0>
   3408c:	ldr	r3, [r0, #44]	; 0x2c
   34090:	blx	r3
   34094:	ldr	r2, [r4, #20]
   34098:	mov	r3, #34	; 0x22
   3409c:	strb	r3, [r2]
   340a0:	ldrb	r3, [r4, #26]
   340a4:	ldr	r0, [r4, #20]
   340a8:	ldr	r2, [r4, #16]
   340ac:	cmp	r3, #0
   340b0:	addeq	r0, r0, #1
   340b4:	add	r3, r0, r5
   340b8:	cmp	r2, r3
   340bc:	str	r0, [r4, #20]
   340c0:	bhi	3413c <flatcc_json_printer_bool_field@@Base+0x154>
   340c4:	mov	r2, r5
   340c8:	mov	r1, r7
   340cc:	mov	r0, r4
   340d0:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   340d4:	ldr	r5, [r4, #20]
   340d8:	mov	r3, #34	; 0x22
   340dc:	strb	r3, [r5]
   340e0:	ldr	r1, [r4, #20]
   340e4:	ldrb	r3, [r4, #26]
   340e8:	clz	r3, r3
   340ec:	lsr	r3, r3, #5
   340f0:	add	r2, r1, r3
   340f4:	add	r2, r2, #1
   340f8:	mov	r0, #58	; 0x3a
   340fc:	str	r2, [r4, #20]
   34100:	strb	r0, [r1, r3]
   34104:	ldr	r3, [r4, #20]
   34108:	mov	r2, #32
   3410c:	mov	r0, r6
   34110:	strb	r2, [r3]
   34114:	ldrb	r3, [r4, #25]
   34118:	ldr	r1, [r4, #20]
   3411c:	cmp	r3, #0
   34120:	addne	r1, r1, #1
   34124:	str	r1, [r4, #20]
   34128:	bl	31434 <flatcc_json_parser_table_as_root@@Base+0x1248>
   3412c:	ldr	r3, [r4, #20]
   34130:	add	r0, r3, r0
   34134:	str	r0, [r4, #20]
   34138:	pop	{r4, r5, r6, r7, r8, pc}
   3413c:	mov	r2, r5
   34140:	mov	r1, r7
   34144:	bl	14544 <memcpy@plt>
   34148:	ldr	r3, [r4, #20]
   3414c:	add	r5, r3, r5
   34150:	str	r5, [r4, #20]
   34154:	b	340d8 <flatcc_json_printer_bool_field@@Base+0xf0>
   34158:	ldrb	r2, [r0, #28]
   3415c:	cmp	r2, #0
   34160:	beq	34044 <flatcc_json_printer_bool_field@@Base+0x5c>
   34164:	pop	{r4, r5, r6, r7, r8, pc}
   34168:	ldr	r3, [r0, #20]
   3416c:	mov	r2, #10
   34170:	add	r1, r3, #1
   34174:	str	r1, [r0, #20]
   34178:	strb	r2, [r3]
   3417c:	ldrb	r8, [r0, #25]
   34180:	ldr	r2, [r0, #32]
   34184:	ldr	r0, [r0, #20]
   34188:	ldr	r1, [r4, #16]
   3418c:	mul	r8, r2, r8
   34190:	add	r3, r0, r8
   34194:	cmp	r1, r3
   34198:	bcc	341b8 <flatcc_json_printer_bool_field@@Base+0x1d0>
   3419c:	mov	r2, r8
   341a0:	mov	r1, #32
   341a4:	bl	145bc <memset@plt>
   341a8:	ldr	r2, [r4, #20]
   341ac:	add	r2, r2, r8
   341b0:	str	r2, [r4, #20]
   341b4:	b	34098 <flatcc_json_printer_bool_field@@Base+0xb0>
   341b8:	mov	r1, r8
   341bc:	mov	r0, r4
   341c0:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   341c4:	ldr	r2, [r4, #20]
   341c8:	b	34098 <flatcc_json_printer_bool_field@@Base+0xb0>

000341cc <flatcc_json_printer_float_field@@Base>:
   341cc:	add	r2, r2, #2
   341d0:	ldr	ip, [r1, #8]
   341d4:	lsl	r2, r2, #1
   341d8:	push	{r4, r5, r6, r7, r8, lr}
   341dc:	cmp	r2, ip
   341e0:	vpush	{d8}
   341e4:	ldr	r5, [sp, #32]
   341e8:	blt	34200 <flatcc_json_printer_float_field@@Base+0x34>
   341ec:	ldrb	r2, [r0, #29]
   341f0:	cmp	r2, #0
   341f4:	beq	3432c <flatcc_json_printer_float_field@@Base+0x160>
   341f8:	vmov.f32	s16, s0
   341fc:	b	34238 <flatcc_json_printer_float_field@@Base+0x6c>
   34200:	ldr	ip, [r1, #4]
   34204:	ldrh	ip, [ip, r2]
   34208:	cmp	ip, #0
   3420c:	beq	341ec <flatcc_json_printer_float_field@@Base+0x20>
   34210:	ldr	r2, [r1]
   34214:	adds	r2, r2, ip
   34218:	beq	341ec <flatcc_json_printer_float_field@@Base+0x20>
   3421c:	vldr	s16, [r2]
   34220:	vcmp.f32	s0, s16
   34224:	vmrs	APSR_nzcv, fpscr
   34228:	bne	34238 <flatcc_json_printer_float_field@@Base+0x6c>
   3422c:	ldrb	r2, [r0, #28]
   34230:	cmp	r2, #0
   34234:	bne	3432c <flatcc_json_printer_float_field@@Base+0x160>
   34238:	ldr	r2, [r1, #16]
   3423c:	mov	r6, r3
   34240:	cmp	r2, #0
   34244:	add	r2, r2, #1
   34248:	str	r2, [r1, #16]
   3424c:	ldrne	r2, [r0, #20]
   34250:	movne	r1, #44	; 0x2c
   34254:	addne	ip, r2, #1
   34258:	strne	ip, [r0, #20]
   3425c:	strbne	r1, [r2]
   34260:	ldrb	r1, [r0, #25]
   34264:	mov	r4, r0
   34268:	cmp	r1, #0
   3426c:	bne	34350 <flatcc_json_printer_float_field@@Base+0x184>
   34270:	ldr	r2, [r0, #20]
   34274:	ldr	r3, [r0, #16]
   34278:	cmp	r2, r3
   3427c:	bcc	3428c <flatcc_json_printer_float_field@@Base+0xc0>
   34280:	ldr	r3, [r0, #44]	; 0x2c
   34284:	blx	r3
   34288:	ldr	r2, [r4, #20]
   3428c:	mov	r3, #34	; 0x22
   34290:	strb	r3, [r2]
   34294:	ldrb	r3, [r4, #26]
   34298:	ldr	r0, [r4, #20]
   3429c:	ldr	r2, [r4, #16]
   342a0:	cmp	r3, #0
   342a4:	addeq	r0, r0, #1
   342a8:	add	r3, r0, r5
   342ac:	cmp	r2, r3
   342b0:	str	r0, [r4, #20]
   342b4:	bhi	34334 <flatcc_json_printer_float_field@@Base+0x168>
   342b8:	mov	r2, r5
   342bc:	mov	r1, r6
   342c0:	mov	r0, r4
   342c4:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   342c8:	ldr	r5, [r4, #20]
   342cc:	mov	r3, #34	; 0x22
   342d0:	strb	r3, [r5]
   342d4:	ldr	r1, [r4, #20]
   342d8:	ldrb	r3, [r4, #26]
   342dc:	clz	r3, r3
   342e0:	lsr	r3, r3, #5
   342e4:	add	r2, r1, r3
   342e8:	add	r2, r2, #1
   342ec:	mov	r0, #58	; 0x3a
   342f0:	str	r2, [r4, #20]
   342f4:	strb	r0, [r1, r3]
   342f8:	ldr	r3, [r4, #20]
   342fc:	mov	r2, #32
   34300:	vcvt.f64.f32	d0, s16
   34304:	strb	r2, [r3]
   34308:	ldrb	r3, [r4, #25]
   3430c:	ldr	r0, [r4, #20]
   34310:	cmp	r3, #0
   34314:	addne	r0, r0, #1
   34318:	str	r0, [r4, #20]
   3431c:	bl	31700 <flatcc_json_parser_table_as_root@@Base+0x1514>
   34320:	ldr	r3, [r4, #20]
   34324:	add	r0, r3, r0
   34328:	str	r0, [r4, #20]
   3432c:	vpop	{d8}
   34330:	pop	{r4, r5, r6, r7, r8, pc}
   34334:	mov	r2, r5
   34338:	mov	r1, r6
   3433c:	bl	14544 <memcpy@plt>
   34340:	ldr	r3, [r4, #20]
   34344:	add	r5, r3, r5
   34348:	str	r5, [r4, #20]
   3434c:	b	342cc <flatcc_json_printer_float_field@@Base+0x100>
   34350:	ldr	r3, [r0, #20]
   34354:	mov	r2, #10
   34358:	add	r1, r3, #1
   3435c:	str	r1, [r0, #20]
   34360:	strb	r2, [r3]
   34364:	ldrb	r7, [r0, #25]
   34368:	ldr	r2, [r0, #32]
   3436c:	ldr	r0, [r0, #20]
   34370:	ldr	r1, [r4, #16]
   34374:	mul	r7, r2, r7
   34378:	add	r3, r0, r7
   3437c:	cmp	r1, r3
   34380:	bcc	343a0 <flatcc_json_printer_float_field@@Base+0x1d4>
   34384:	mov	r2, r7
   34388:	mov	r1, #32
   3438c:	bl	145bc <memset@plt>
   34390:	ldr	r2, [r4, #20]
   34394:	add	r2, r2, r7
   34398:	str	r2, [r4, #20]
   3439c:	b	3428c <flatcc_json_printer_float_field@@Base+0xc0>
   343a0:	mov	r1, r7
   343a4:	mov	r0, r4
   343a8:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   343ac:	ldr	r2, [r4, #20]
   343b0:	b	3428c <flatcc_json_printer_float_field@@Base+0xc0>

000343b4 <flatcc_json_printer_double_field@@Base>:
   343b4:	add	r2, r2, #2
   343b8:	ldr	ip, [r1, #8]
   343bc:	lsl	r2, r2, #1
   343c0:	push	{r4, r5, r6, r7, r8, lr}
   343c4:	cmp	r2, ip
   343c8:	vpush	{d8}
   343cc:	ldr	r5, [sp, #32]
   343d0:	blt	343e8 <flatcc_json_printer_double_field@@Base+0x34>
   343d4:	ldrb	r2, [r0, #29]
   343d8:	cmp	r2, #0
   343dc:	beq	34514 <flatcc_json_printer_double_field@@Base+0x160>
   343e0:	vmov.f64	d8, d0
   343e4:	b	34420 <flatcc_json_printer_double_field@@Base+0x6c>
   343e8:	ldr	ip, [r1, #4]
   343ec:	ldrh	ip, [ip, r2]
   343f0:	cmp	ip, #0
   343f4:	beq	343d4 <flatcc_json_printer_double_field@@Base+0x20>
   343f8:	ldr	r2, [r1]
   343fc:	adds	r2, r2, ip
   34400:	beq	343d4 <flatcc_json_printer_double_field@@Base+0x20>
   34404:	vldr	d8, [r2]
   34408:	vcmp.f64	d0, d8
   3440c:	vmrs	APSR_nzcv, fpscr
   34410:	bne	34420 <flatcc_json_printer_double_field@@Base+0x6c>
   34414:	ldrb	r2, [r0, #28]
   34418:	cmp	r2, #0
   3441c:	bne	34514 <flatcc_json_printer_double_field@@Base+0x160>
   34420:	ldr	r2, [r1, #16]
   34424:	mov	r6, r3
   34428:	cmp	r2, #0
   3442c:	add	r2, r2, #1
   34430:	str	r2, [r1, #16]
   34434:	ldrne	r2, [r0, #20]
   34438:	movne	r1, #44	; 0x2c
   3443c:	addne	ip, r2, #1
   34440:	strne	ip, [r0, #20]
   34444:	strbne	r1, [r2]
   34448:	ldrb	r1, [r0, #25]
   3444c:	mov	r4, r0
   34450:	cmp	r1, #0
   34454:	bne	34538 <flatcc_json_printer_double_field@@Base+0x184>
   34458:	ldr	r2, [r0, #20]
   3445c:	ldr	r3, [r0, #16]
   34460:	cmp	r2, r3
   34464:	bcc	34474 <flatcc_json_printer_double_field@@Base+0xc0>
   34468:	ldr	r3, [r0, #44]	; 0x2c
   3446c:	blx	r3
   34470:	ldr	r2, [r4, #20]
   34474:	mov	r3, #34	; 0x22
   34478:	strb	r3, [r2]
   3447c:	ldrb	r3, [r4, #26]
   34480:	ldr	r0, [r4, #20]
   34484:	ldr	r2, [r4, #16]
   34488:	cmp	r3, #0
   3448c:	addeq	r0, r0, #1
   34490:	add	r3, r0, r5
   34494:	cmp	r2, r3
   34498:	str	r0, [r4, #20]
   3449c:	bhi	3451c <flatcc_json_printer_double_field@@Base+0x168>
   344a0:	mov	r2, r5
   344a4:	mov	r1, r6
   344a8:	mov	r0, r4
   344ac:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   344b0:	ldr	r5, [r4, #20]
   344b4:	mov	r3, #34	; 0x22
   344b8:	strb	r3, [r5]
   344bc:	ldr	r1, [r4, #20]
   344c0:	ldrb	r3, [r4, #26]
   344c4:	clz	r3, r3
   344c8:	lsr	r3, r3, #5
   344cc:	add	r2, r1, r3
   344d0:	add	r2, r2, #1
   344d4:	mov	r0, #58	; 0x3a
   344d8:	str	r2, [r4, #20]
   344dc:	strb	r0, [r1, r3]
   344e0:	ldr	r3, [r4, #20]
   344e4:	mov	r2, #32
   344e8:	vmov.f64	d0, d8
   344ec:	strb	r2, [r3]
   344f0:	ldrb	r3, [r4, #25]
   344f4:	ldr	r0, [r4, #20]
   344f8:	cmp	r3, #0
   344fc:	addne	r0, r0, #1
   34500:	str	r0, [r4, #20]
   34504:	bl	31700 <flatcc_json_parser_table_as_root@@Base+0x1514>
   34508:	ldr	r3, [r4, #20]
   3450c:	add	r0, r3, r0
   34510:	str	r0, [r4, #20]
   34514:	vpop	{d8}
   34518:	pop	{r4, r5, r6, r7, r8, pc}
   3451c:	mov	r2, r5
   34520:	mov	r1, r6
   34524:	bl	14544 <memcpy@plt>
   34528:	ldr	r3, [r4, #20]
   3452c:	add	r5, r3, r5
   34530:	str	r5, [r4, #20]
   34534:	b	344b4 <flatcc_json_printer_double_field@@Base+0x100>
   34538:	ldr	r3, [r0, #20]
   3453c:	mov	r2, #10
   34540:	add	r1, r3, #1
   34544:	str	r1, [r0, #20]
   34548:	strb	r2, [r3]
   3454c:	ldrb	r7, [r0, #25]
   34550:	ldr	r2, [r0, #32]
   34554:	ldr	r0, [r0, #20]
   34558:	ldr	r1, [r4, #16]
   3455c:	mul	r7, r2, r7
   34560:	add	r3, r0, r7
   34564:	cmp	r1, r3
   34568:	bcc	34588 <flatcc_json_printer_double_field@@Base+0x1d4>
   3456c:	mov	r2, r7
   34570:	mov	r1, #32
   34574:	bl	145bc <memset@plt>
   34578:	ldr	r2, [r4, #20]
   3457c:	add	r2, r2, r7
   34580:	str	r2, [r4, #20]
   34584:	b	34474 <flatcc_json_printer_double_field@@Base+0xc0>
   34588:	mov	r1, r7
   3458c:	mov	r0, r4
   34590:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   34594:	ldr	r2, [r4, #20]
   34598:	b	34474 <flatcc_json_printer_double_field@@Base+0xc0>

0003459c <flatcc_json_printer_uint8_enum_field@@Base>:
   3459c:	add	r2, r2, #2
   345a0:	ldr	ip, [r1, #8]
   345a4:	lsl	r2, r2, #1
   345a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   345ac:	cmp	r2, ip
   345b0:	ldr	r7, [sp, #32]
   345b4:	ldrb	ip, [sp, #36]	; 0x24
   345b8:	ldr	r5, [sp, #40]	; 0x28
   345bc:	blt	345d4 <flatcc_json_printer_uint8_enum_field@@Base+0x38>
   345c0:	ldrb	r2, [r0, #29]
   345c4:	cmp	r2, #0
   345c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   345cc:	mov	r6, ip
   345d0:	b	345fc <flatcc_json_printer_uint8_enum_field@@Base+0x60>
   345d4:	ldr	lr, [r1, #4]
   345d8:	ldrh	r2, [lr, r2]
   345dc:	cmp	r2, #0
   345e0:	beq	345c0 <flatcc_json_printer_uint8_enum_field@@Base+0x24>
   345e4:	ldr	lr, [r1]
   345e8:	cmn	lr, r2
   345ec:	beq	345c0 <flatcc_json_printer_uint8_enum_field@@Base+0x24>
   345f0:	ldrb	r6, [lr, r2]
   345f4:	cmp	ip, r6
   345f8:	beq	34730 <flatcc_json_printer_uint8_enum_field@@Base+0x194>
   345fc:	ldr	r2, [r1, #16]
   34600:	mov	r8, r3
   34604:	cmp	r2, #0
   34608:	add	r2, r2, #1
   3460c:	str	r2, [r1, #16]
   34610:	ldrne	r2, [r0, #20]
   34614:	movne	r1, #44	; 0x2c
   34618:	addne	ip, r2, #1
   3461c:	strne	ip, [r0, #20]
   34620:	strbne	r1, [r2]
   34624:	ldrb	r1, [r0, #25]
   34628:	mov	r4, r0
   3462c:	cmp	r1, #0
   34630:	bne	34740 <flatcc_json_printer_uint8_enum_field@@Base+0x1a4>
   34634:	ldr	r2, [r0, #20]
   34638:	ldr	r3, [r0, #16]
   3463c:	cmp	r2, r3
   34640:	bcc	34650 <flatcc_json_printer_uint8_enum_field@@Base+0xb4>
   34644:	ldr	r3, [r0, #44]	; 0x2c
   34648:	blx	r3
   3464c:	ldr	r2, [r4, #20]
   34650:	mov	r3, #34	; 0x22
   34654:	strb	r3, [r2]
   34658:	ldrb	r3, [r4, #26]
   3465c:	ldr	r0, [r4, #20]
   34660:	ldr	r2, [r4, #16]
   34664:	cmp	r3, #0
   34668:	addeq	r0, r0, #1
   3466c:	add	r3, r0, r7
   34670:	cmp	r2, r3
   34674:	str	r0, [r4, #20]
   34678:	bhi	34714 <flatcc_json_printer_uint8_enum_field@@Base+0x178>
   3467c:	mov	r2, r7
   34680:	mov	r1, r8
   34684:	mov	r0, r4
   34688:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   3468c:	ldr	r7, [r4, #20]
   34690:	mov	r3, #34	; 0x22
   34694:	strb	r3, [r7]
   34698:	ldr	r1, [r4, #20]
   3469c:	ldrb	r3, [r4, #26]
   346a0:	clz	r3, r3
   346a4:	lsr	r3, r3, #5
   346a8:	add	r2, r1, r3
   346ac:	add	r2, r2, #1
   346b0:	mov	r0, #58	; 0x3a
   346b4:	str	r2, [r4, #20]
   346b8:	strb	r0, [r1, r3]
   346bc:	ldr	r3, [r4, #20]
   346c0:	mov	r2, #32
   346c4:	strb	r2, [r3]
   346c8:	ldrb	r2, [r4, #25]
   346cc:	ldrb	r3, [r4, #27]
   346d0:	ldr	r1, [r4, #20]
   346d4:	cmp	r2, #0
   346d8:	addne	r1, r1, #1
   346dc:	cmp	r3, #0
   346e0:	str	r1, [r4, #20]
   346e4:	bne	346fc <flatcc_json_printer_uint8_enum_field@@Base+0x160>
   346e8:	mov	r1, r6
   346ec:	mov	r0, r4
   346f0:	mov	r3, r5
   346f4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   346f8:	bx	r3
   346fc:	mov	r0, r6
   34700:	bl	31344 <flatcc_json_parser_table_as_root@@Base+0x1158>
   34704:	ldr	r3, [r4, #20]
   34708:	add	r0, r3, r0
   3470c:	str	r0, [r4, #20]
   34710:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34714:	mov	r2, r7
   34718:	mov	r1, r8
   3471c:	bl	14544 <memcpy@plt>
   34720:	ldr	r3, [r4, #20]
   34724:	add	r7, r3, r7
   34728:	str	r7, [r4, #20]
   3472c:	b	34690 <flatcc_json_printer_uint8_enum_field@@Base+0xf4>
   34730:	ldrb	r2, [r0, #28]
   34734:	cmp	r2, #0
   34738:	beq	345fc <flatcc_json_printer_uint8_enum_field@@Base+0x60>
   3473c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34740:	ldr	r3, [r0, #20]
   34744:	mov	r2, #10
   34748:	add	r1, r3, #1
   3474c:	str	r1, [r0, #20]
   34750:	strb	r2, [r3]
   34754:	ldrb	r3, [r0, #25]
   34758:	ldr	r2, [r0, #32]
   3475c:	ldr	r0, [r0, #20]
   34760:	ldr	r1, [r4, #16]
   34764:	mul	r9, r2, r3
   34768:	add	r3, r0, r9
   3476c:	cmp	r1, r3
   34770:	bcc	34790 <flatcc_json_printer_uint8_enum_field@@Base+0x1f4>
   34774:	mov	r2, r9
   34778:	mov	r1, #32
   3477c:	bl	145bc <memset@plt>
   34780:	ldr	r2, [r4, #20]
   34784:	add	r2, r2, r9
   34788:	str	r2, [r4, #20]
   3478c:	b	34650 <flatcc_json_printer_uint8_enum_field@@Base+0xb4>
   34790:	mov	r1, r9
   34794:	mov	r0, r4
   34798:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3479c:	ldr	r2, [r4, #20]
   347a0:	b	34650 <flatcc_json_printer_uint8_enum_field@@Base+0xb4>

000347a4 <flatcc_json_printer_uint16_enum_field@@Base>:
   347a4:	add	r2, r2, #2
   347a8:	ldr	ip, [r1, #8]
   347ac:	lsl	r2, r2, #1
   347b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   347b4:	cmp	r2, ip
   347b8:	ldr	r7, [sp, #32]
   347bc:	ldrh	ip, [sp, #36]	; 0x24
   347c0:	ldr	r5, [sp, #40]	; 0x28
   347c4:	blt	347dc <flatcc_json_printer_uint16_enum_field@@Base+0x38>
   347c8:	ldrb	r2, [r0, #29]
   347cc:	cmp	r2, #0
   347d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   347d4:	mov	r6, ip
   347d8:	b	34804 <flatcc_json_printer_uint16_enum_field@@Base+0x60>
   347dc:	ldr	lr, [r1, #4]
   347e0:	ldrh	r2, [lr, r2]
   347e4:	cmp	r2, #0
   347e8:	beq	347c8 <flatcc_json_printer_uint16_enum_field@@Base+0x24>
   347ec:	ldr	lr, [r1]
   347f0:	cmn	lr, r2
   347f4:	beq	347c8 <flatcc_json_printer_uint16_enum_field@@Base+0x24>
   347f8:	ldrh	r6, [lr, r2]
   347fc:	cmp	ip, r6
   34800:	beq	34938 <flatcc_json_printer_uint16_enum_field@@Base+0x194>
   34804:	ldr	r2, [r1, #16]
   34808:	mov	r8, r3
   3480c:	cmp	r2, #0
   34810:	add	r2, r2, #1
   34814:	str	r2, [r1, #16]
   34818:	ldrne	r2, [r0, #20]
   3481c:	movne	r1, #44	; 0x2c
   34820:	addne	ip, r2, #1
   34824:	strne	ip, [r0, #20]
   34828:	strbne	r1, [r2]
   3482c:	ldrb	r1, [r0, #25]
   34830:	mov	r4, r0
   34834:	cmp	r1, #0
   34838:	bne	34948 <flatcc_json_printer_uint16_enum_field@@Base+0x1a4>
   3483c:	ldr	r2, [r0, #20]
   34840:	ldr	r3, [r0, #16]
   34844:	cmp	r2, r3
   34848:	bcc	34858 <flatcc_json_printer_uint16_enum_field@@Base+0xb4>
   3484c:	ldr	r3, [r0, #44]	; 0x2c
   34850:	blx	r3
   34854:	ldr	r2, [r4, #20]
   34858:	mov	r3, #34	; 0x22
   3485c:	strb	r3, [r2]
   34860:	ldrb	r3, [r4, #26]
   34864:	ldr	r0, [r4, #20]
   34868:	ldr	r2, [r4, #16]
   3486c:	cmp	r3, #0
   34870:	addeq	r0, r0, #1
   34874:	add	r3, r0, r7
   34878:	cmp	r2, r3
   3487c:	str	r0, [r4, #20]
   34880:	bhi	3491c <flatcc_json_printer_uint16_enum_field@@Base+0x178>
   34884:	mov	r2, r7
   34888:	mov	r1, r8
   3488c:	mov	r0, r4
   34890:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   34894:	ldr	r7, [r4, #20]
   34898:	mov	r3, #34	; 0x22
   3489c:	strb	r3, [r7]
   348a0:	ldr	r1, [r4, #20]
   348a4:	ldrb	r3, [r4, #26]
   348a8:	clz	r3, r3
   348ac:	lsr	r3, r3, #5
   348b0:	add	r2, r1, r3
   348b4:	add	r2, r2, #1
   348b8:	mov	r0, #58	; 0x3a
   348bc:	str	r2, [r4, #20]
   348c0:	strb	r0, [r1, r3]
   348c4:	ldr	r3, [r4, #20]
   348c8:	mov	r2, #32
   348cc:	strb	r2, [r3]
   348d0:	ldrb	r2, [r4, #25]
   348d4:	ldrb	r3, [r4, #27]
   348d8:	ldr	r1, [r4, #20]
   348dc:	cmp	r2, #0
   348e0:	addne	r1, r1, #1
   348e4:	cmp	r3, #0
   348e8:	str	r1, [r4, #20]
   348ec:	bne	34904 <flatcc_json_printer_uint16_enum_field@@Base+0x160>
   348f0:	mov	r1, r6
   348f4:	mov	r0, r4
   348f8:	mov	r3, r5
   348fc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   34900:	bx	r3
   34904:	mov	r0, r6
   34908:	bl	301f8 <flatcc_json_parser_table_as_root@@Base+0xc>
   3490c:	ldr	r3, [r4, #20]
   34910:	add	r0, r3, r0
   34914:	str	r0, [r4, #20]
   34918:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3491c:	mov	r2, r7
   34920:	mov	r1, r8
   34924:	bl	14544 <memcpy@plt>
   34928:	ldr	r3, [r4, #20]
   3492c:	add	r7, r3, r7
   34930:	str	r7, [r4, #20]
   34934:	b	34898 <flatcc_json_printer_uint16_enum_field@@Base+0xf4>
   34938:	ldrb	r2, [r0, #28]
   3493c:	cmp	r2, #0
   34940:	beq	34804 <flatcc_json_printer_uint16_enum_field@@Base+0x60>
   34944:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34948:	ldr	r3, [r0, #20]
   3494c:	mov	r2, #10
   34950:	add	r1, r3, #1
   34954:	str	r1, [r0, #20]
   34958:	strb	r2, [r3]
   3495c:	ldrb	r3, [r0, #25]
   34960:	ldr	r2, [r0, #32]
   34964:	ldr	r0, [r0, #20]
   34968:	ldr	r1, [r4, #16]
   3496c:	mul	r9, r2, r3
   34970:	add	r3, r0, r9
   34974:	cmp	r1, r3
   34978:	bcc	34998 <flatcc_json_printer_uint16_enum_field@@Base+0x1f4>
   3497c:	mov	r2, r9
   34980:	mov	r1, #32
   34984:	bl	145bc <memset@plt>
   34988:	ldr	r2, [r4, #20]
   3498c:	add	r2, r2, r9
   34990:	str	r2, [r4, #20]
   34994:	b	34858 <flatcc_json_printer_uint16_enum_field@@Base+0xb4>
   34998:	mov	r1, r9
   3499c:	mov	r0, r4
   349a0:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   349a4:	ldr	r2, [r4, #20]
   349a8:	b	34858 <flatcc_json_printer_uint16_enum_field@@Base+0xb4>

000349ac <flatcc_json_printer_uint32_enum_field@@Base>:
   349ac:	add	r2, r2, #2
   349b0:	ldr	ip, [r1, #8]
   349b4:	lsl	r2, r2, #1
   349b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   349bc:	cmp	r2, ip
   349c0:	ldr	r7, [sp, #32]
   349c4:	ldr	ip, [sp, #36]	; 0x24
   349c8:	ldr	r5, [sp, #40]	; 0x28
   349cc:	blt	349e4 <flatcc_json_printer_uint32_enum_field@@Base+0x38>
   349d0:	ldrb	r2, [r0, #29]
   349d4:	cmp	r2, #0
   349d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   349dc:	mov	r6, ip
   349e0:	b	34a0c <flatcc_json_printer_uint32_enum_field@@Base+0x60>
   349e4:	ldr	lr, [r1, #4]
   349e8:	ldrh	r2, [lr, r2]
   349ec:	cmp	r2, #0
   349f0:	beq	349d0 <flatcc_json_printer_uint32_enum_field@@Base+0x24>
   349f4:	ldr	lr, [r1]
   349f8:	cmn	lr, r2
   349fc:	beq	349d0 <flatcc_json_printer_uint32_enum_field@@Base+0x24>
   34a00:	ldr	r6, [lr, r2]
   34a04:	cmp	ip, r6
   34a08:	beq	34b40 <flatcc_json_printer_uint32_enum_field@@Base+0x194>
   34a0c:	ldr	r2, [r1, #16]
   34a10:	mov	r8, r3
   34a14:	cmp	r2, #0
   34a18:	add	r2, r2, #1
   34a1c:	str	r2, [r1, #16]
   34a20:	ldrne	r2, [r0, #20]
   34a24:	movne	r1, #44	; 0x2c
   34a28:	addne	ip, r2, #1
   34a2c:	strne	ip, [r0, #20]
   34a30:	strbne	r1, [r2]
   34a34:	ldrb	r1, [r0, #25]
   34a38:	mov	r4, r0
   34a3c:	cmp	r1, #0
   34a40:	bne	34b50 <flatcc_json_printer_uint32_enum_field@@Base+0x1a4>
   34a44:	ldr	r2, [r0, #20]
   34a48:	ldr	r3, [r0, #16]
   34a4c:	cmp	r2, r3
   34a50:	bcc	34a60 <flatcc_json_printer_uint32_enum_field@@Base+0xb4>
   34a54:	ldr	r3, [r0, #44]	; 0x2c
   34a58:	blx	r3
   34a5c:	ldr	r2, [r4, #20]
   34a60:	mov	r3, #34	; 0x22
   34a64:	strb	r3, [r2]
   34a68:	ldrb	r3, [r4, #26]
   34a6c:	ldr	r0, [r4, #20]
   34a70:	ldr	r2, [r4, #16]
   34a74:	cmp	r3, #0
   34a78:	addeq	r0, r0, #1
   34a7c:	add	r3, r0, r7
   34a80:	cmp	r2, r3
   34a84:	str	r0, [r4, #20]
   34a88:	bhi	34b24 <flatcc_json_printer_uint32_enum_field@@Base+0x178>
   34a8c:	mov	r2, r7
   34a90:	mov	r1, r8
   34a94:	mov	r0, r4
   34a98:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   34a9c:	ldr	r7, [r4, #20]
   34aa0:	mov	r3, #34	; 0x22
   34aa4:	strb	r3, [r7]
   34aa8:	ldr	r1, [r4, #20]
   34aac:	ldrb	r3, [r4, #26]
   34ab0:	clz	r3, r3
   34ab4:	lsr	r3, r3, #5
   34ab8:	add	r2, r1, r3
   34abc:	add	r2, r2, #1
   34ac0:	mov	r0, #58	; 0x3a
   34ac4:	str	r2, [r4, #20]
   34ac8:	strb	r0, [r1, r3]
   34acc:	ldr	r3, [r4, #20]
   34ad0:	mov	r2, #32
   34ad4:	strb	r2, [r3]
   34ad8:	ldrb	r2, [r4, #25]
   34adc:	ldrb	r3, [r4, #27]
   34ae0:	ldr	r1, [r4, #20]
   34ae4:	cmp	r2, #0
   34ae8:	addne	r1, r1, #1
   34aec:	cmp	r3, #0
   34af0:	str	r1, [r4, #20]
   34af4:	bne	34b0c <flatcc_json_printer_uint32_enum_field@@Base+0x160>
   34af8:	mov	r1, r6
   34afc:	mov	r0, r4
   34b00:	mov	r3, r5
   34b04:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   34b08:	bx	r3
   34b0c:	mov	r0, r6
   34b10:	bl	3037c <flatcc_json_parser_table_as_root@@Base+0x190>
   34b14:	ldr	r3, [r4, #20]
   34b18:	add	r0, r3, r0
   34b1c:	str	r0, [r4, #20]
   34b20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34b24:	mov	r2, r7
   34b28:	mov	r1, r8
   34b2c:	bl	14544 <memcpy@plt>
   34b30:	ldr	r3, [r4, #20]
   34b34:	add	r7, r3, r7
   34b38:	str	r7, [r4, #20]
   34b3c:	b	34aa0 <flatcc_json_printer_uint32_enum_field@@Base+0xf4>
   34b40:	ldrb	r2, [r0, #28]
   34b44:	cmp	r2, #0
   34b48:	beq	34a0c <flatcc_json_printer_uint32_enum_field@@Base+0x60>
   34b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34b50:	ldr	r3, [r0, #20]
   34b54:	mov	r2, #10
   34b58:	add	r1, r3, #1
   34b5c:	str	r1, [r0, #20]
   34b60:	strb	r2, [r3]
   34b64:	ldrb	r3, [r0, #25]
   34b68:	ldr	r2, [r0, #32]
   34b6c:	ldr	r0, [r0, #20]
   34b70:	ldr	r1, [r4, #16]
   34b74:	mul	r9, r2, r3
   34b78:	add	r3, r0, r9
   34b7c:	cmp	r1, r3
   34b80:	bcc	34ba0 <flatcc_json_printer_uint32_enum_field@@Base+0x1f4>
   34b84:	mov	r2, r9
   34b88:	mov	r1, #32
   34b8c:	bl	145bc <memset@plt>
   34b90:	ldr	r2, [r4, #20]
   34b94:	add	r2, r2, r9
   34b98:	str	r2, [r4, #20]
   34b9c:	b	34a60 <flatcc_json_printer_uint32_enum_field@@Base+0xb4>
   34ba0:	mov	r1, r9
   34ba4:	mov	r0, r4
   34ba8:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   34bac:	ldr	r2, [r4, #20]
   34bb0:	b	34a60 <flatcc_json_printer_uint32_enum_field@@Base+0xb4>

00034bb4 <flatcc_json_printer_uint64_enum_field@@Base>:
   34bb4:	add	r2, r2, #2
   34bb8:	ldr	ip, [r1, #8]
   34bbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34bc0:	lsl	r2, r2, #1
   34bc4:	sub	sp, sp, #4
   34bc8:	cmp	r2, ip
   34bcc:	ldr	r8, [sp, #40]	; 0x28
   34bd0:	ldrd	sl, [sp, #48]	; 0x30
   34bd4:	ldr	r5, [sp, #56]	; 0x38
   34bd8:	blt	34bf4 <flatcc_json_printer_uint64_enum_field@@Base+0x40>
   34bdc:	ldrb	r2, [r0, #29]
   34be0:	cmp	r2, #0
   34be4:	beq	34d40 <flatcc_json_printer_uint64_enum_field@@Base+0x18c>
   34be8:	mov	r6, sl
   34bec:	mov	r7, fp
   34bf0:	b	34c20 <flatcc_json_printer_uint64_enum_field@@Base+0x6c>
   34bf4:	ldr	ip, [r1, #4]
   34bf8:	ldrh	r2, [ip, r2]
   34bfc:	cmp	r2, #0
   34c00:	beq	34bdc <flatcc_json_printer_uint64_enum_field@@Base+0x28>
   34c04:	ldr	ip, [r1]
   34c08:	cmn	ip, r2
   34c0c:	beq	34bdc <flatcc_json_printer_uint64_enum_field@@Base+0x28>
   34c10:	ldrd	r6, [ip, r2]
   34c14:	cmp	fp, r7
   34c18:	cmpeq	sl, r6
   34c1c:	beq	34d64 <flatcc_json_printer_uint64_enum_field@@Base+0x1b0>
   34c20:	ldr	r2, [r1, #16]
   34c24:	mov	r9, r3
   34c28:	cmp	r2, #0
   34c2c:	add	r2, r2, #1
   34c30:	str	r2, [r1, #16]
   34c34:	ldrne	r2, [r0, #20]
   34c38:	movne	r1, #44	; 0x2c
   34c3c:	addne	ip, r2, #1
   34c40:	strne	ip, [r0, #20]
   34c44:	strbne	r1, [r2]
   34c48:	ldrb	r1, [r0, #25]
   34c4c:	mov	r4, r0
   34c50:	cmp	r1, #0
   34c54:	bne	34d74 <flatcc_json_printer_uint64_enum_field@@Base+0x1c0>
   34c58:	ldr	r2, [r0, #20]
   34c5c:	ldr	r3, [r0, #16]
   34c60:	cmp	r2, r3
   34c64:	bcc	34c74 <flatcc_json_printer_uint64_enum_field@@Base+0xc0>
   34c68:	ldr	r3, [r0, #44]	; 0x2c
   34c6c:	blx	r3
   34c70:	ldr	r2, [r4, #20]
   34c74:	mov	r3, #34	; 0x22
   34c78:	strb	r3, [r2]
   34c7c:	ldrb	r3, [r4, #26]
   34c80:	ldr	r0, [r4, #20]
   34c84:	ldr	r2, [r4, #16]
   34c88:	cmp	r3, #0
   34c8c:	addeq	r0, r0, #1
   34c90:	add	r3, r0, r8
   34c94:	cmp	r2, r3
   34c98:	str	r0, [r4, #20]
   34c9c:	bhi	34d48 <flatcc_json_printer_uint64_enum_field@@Base+0x194>
   34ca0:	mov	r2, r8
   34ca4:	mov	r1, r9
   34ca8:	mov	r0, r4
   34cac:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   34cb0:	ldr	r8, [r4, #20]
   34cb4:	mov	r3, #34	; 0x22
   34cb8:	strb	r3, [r8]
   34cbc:	ldr	r1, [r4, #20]
   34cc0:	ldrb	r3, [r4, #26]
   34cc4:	clz	r3, r3
   34cc8:	lsr	r3, r3, #5
   34ccc:	add	r2, r1, r3
   34cd0:	add	r2, r2, #1
   34cd4:	mov	r0, #58	; 0x3a
   34cd8:	str	r2, [r4, #20]
   34cdc:	strb	r0, [r1, r3]
   34ce0:	ldr	r3, [r4, #20]
   34ce4:	mov	r2, #32
   34ce8:	strb	r2, [r3]
   34cec:	ldrb	r1, [r4, #25]
   34cf0:	ldrb	r3, [r4, #27]
   34cf4:	ldr	r2, [r4, #20]
   34cf8:	cmp	r1, #0
   34cfc:	addne	r2, r2, #1
   34d00:	cmp	r3, #0
   34d04:	str	r2, [r4, #20]
   34d08:	bne	34d28 <flatcc_json_printer_uint64_enum_field@@Base+0x174>
   34d0c:	mov	r2, r6
   34d10:	mov	r3, r7
   34d14:	mov	r0, r4
   34d18:	mov	r1, r5
   34d1c:	add	sp, sp, #4
   34d20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34d24:	bx	r1
   34d28:	mov	r0, r6
   34d2c:	mov	r1, r7
   34d30:	bl	306e8 <flatcc_json_parser_table_as_root@@Base+0x4fc>
   34d34:	ldr	r3, [r4, #20]
   34d38:	add	r0, r3, r0
   34d3c:	str	r0, [r4, #20]
   34d40:	add	sp, sp, #4
   34d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34d48:	mov	r2, r8
   34d4c:	mov	r1, r9
   34d50:	bl	14544 <memcpy@plt>
   34d54:	ldr	r3, [r4, #20]
   34d58:	add	r8, r3, r8
   34d5c:	str	r8, [r4, #20]
   34d60:	b	34cb4 <flatcc_json_printer_uint64_enum_field@@Base+0x100>
   34d64:	ldrb	r2, [r0, #28]
   34d68:	cmp	r2, #0
   34d6c:	beq	34c20 <flatcc_json_printer_uint64_enum_field@@Base+0x6c>
   34d70:	b	34d40 <flatcc_json_printer_uint64_enum_field@@Base+0x18c>
   34d74:	ldr	r3, [r0, #20]
   34d78:	mov	r2, #10
   34d7c:	add	r1, r3, #1
   34d80:	str	r1, [r0, #20]
   34d84:	strb	r2, [r3]
   34d88:	ldrb	r3, [r0, #25]
   34d8c:	ldr	r2, [r0, #32]
   34d90:	ldr	r0, [r0, #20]
   34d94:	ldr	r1, [r4, #16]
   34d98:	mul	sl, r2, r3
   34d9c:	add	r3, r0, sl
   34da0:	cmp	r1, r3
   34da4:	bcc	34dc4 <flatcc_json_printer_uint64_enum_field@@Base+0x210>
   34da8:	mov	r2, sl
   34dac:	mov	r1, #32
   34db0:	bl	145bc <memset@plt>
   34db4:	ldr	r2, [r4, #20]
   34db8:	add	r2, r2, sl
   34dbc:	str	r2, [r4, #20]
   34dc0:	b	34c74 <flatcc_json_printer_uint64_enum_field@@Base+0xc0>
   34dc4:	mov	r1, sl
   34dc8:	mov	r0, r4
   34dcc:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   34dd0:	ldr	r2, [r4, #20]
   34dd4:	b	34c74 <flatcc_json_printer_uint64_enum_field@@Base+0xc0>

00034dd8 <flatcc_json_printer_int8_enum_field@@Base>:
   34dd8:	add	r2, r2, #2
   34ddc:	ldr	ip, [r1, #8]
   34de0:	lsl	r2, r2, #1
   34de4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   34de8:	cmp	r2, ip
   34dec:	ldr	r7, [sp, #32]
   34df0:	ldrsb	ip, [sp, #36]	; 0x24
   34df4:	ldr	r6, [sp, #40]	; 0x28
   34df8:	blt	34e10 <flatcc_json_printer_int8_enum_field@@Base+0x38>
   34dfc:	ldrb	r2, [r0, #29]
   34e00:	cmp	r2, #0
   34e04:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   34e08:	mov	r5, ip
   34e0c:	b	34e38 <flatcc_json_printer_int8_enum_field@@Base+0x60>
   34e10:	ldr	lr, [r1, #4]
   34e14:	ldrh	r2, [lr, r2]
   34e18:	cmp	r2, #0
   34e1c:	beq	34dfc <flatcc_json_printer_int8_enum_field@@Base+0x24>
   34e20:	ldr	lr, [r1]
   34e24:	cmn	lr, r2
   34e28:	beq	34dfc <flatcc_json_printer_int8_enum_field@@Base+0x24>
   34e2c:	ldrsb	r5, [lr, r2]
   34e30:	cmp	ip, r5
   34e34:	beq	34f90 <flatcc_json_printer_int8_enum_field@@Base+0x1b8>
   34e38:	ldr	r2, [r1, #16]
   34e3c:	mov	r8, r3
   34e40:	cmp	r2, #0
   34e44:	add	r2, r2, #1
   34e48:	str	r2, [r1, #16]
   34e4c:	ldrne	r2, [r0, #20]
   34e50:	movne	r1, #44	; 0x2c
   34e54:	addne	ip, r2, #1
   34e58:	strne	ip, [r0, #20]
   34e5c:	strbne	r1, [r2]
   34e60:	ldrb	r1, [r0, #25]
   34e64:	mov	r4, r0
   34e68:	cmp	r1, #0
   34e6c:	bne	34fa0 <flatcc_json_printer_int8_enum_field@@Base+0x1c8>
   34e70:	ldr	r2, [r0, #20]
   34e74:	ldr	r3, [r0, #16]
   34e78:	cmp	r2, r3
   34e7c:	bcc	34e8c <flatcc_json_printer_int8_enum_field@@Base+0xb4>
   34e80:	ldr	r3, [r0, #44]	; 0x2c
   34e84:	blx	r3
   34e88:	ldr	r2, [r4, #20]
   34e8c:	mov	r3, #34	; 0x22
   34e90:	strb	r3, [r2]
   34e94:	ldrb	r3, [r4, #26]
   34e98:	ldr	r0, [r4, #20]
   34e9c:	ldr	r2, [r4, #16]
   34ea0:	cmp	r3, #0
   34ea4:	addeq	r0, r0, #1
   34ea8:	add	r3, r0, r7
   34eac:	cmp	r2, r3
   34eb0:	str	r0, [r4, #20]
   34eb4:	bhi	34f60 <flatcc_json_printer_int8_enum_field@@Base+0x188>
   34eb8:	mov	r2, r7
   34ebc:	mov	r1, r8
   34ec0:	mov	r0, r4
   34ec4:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   34ec8:	ldr	r7, [r4, #20]
   34ecc:	mov	r3, #34	; 0x22
   34ed0:	strb	r3, [r7]
   34ed4:	ldr	r1, [r4, #20]
   34ed8:	ldrb	r3, [r4, #26]
   34edc:	clz	r3, r3
   34ee0:	lsr	r3, r3, #5
   34ee4:	add	r2, r1, r3
   34ee8:	add	r2, r2, #1
   34eec:	mov	r0, #58	; 0x3a
   34ef0:	str	r2, [r4, #20]
   34ef4:	strb	r0, [r1, r3]
   34ef8:	ldr	r3, [r4, #20]
   34efc:	mov	r2, #32
   34f00:	strb	r2, [r3]
   34f04:	ldrb	r3, [r4, #25]
   34f08:	ldrb	r0, [r4, #27]
   34f0c:	ldr	r2, [r4, #20]
   34f10:	adds	r3, r3, #0
   34f14:	movne	r3, #1
   34f18:	add	r1, r2, r3
   34f1c:	cmp	r0, #0
   34f20:	str	r1, [r4, #20]
   34f24:	beq	34f7c <flatcc_json_printer_int8_enum_field@@Base+0x1a4>
   34f28:	cmp	r5, #0
   34f2c:	lsr	r6, r5, #31
   34f30:	rsblt	r5, r5, #0
   34f34:	movlt	r0, #45	; 0x2d
   34f38:	sxtblt	r5, r5
   34f3c:	strblt	r0, [r2, r3]
   34f40:	addlt	r1, r1, #1
   34f44:	uxtb	r0, r5
   34f48:	bl	31344 <flatcc_json_parser_table_as_root@@Base+0x1158>
   34f4c:	ldr	r3, [r4, #20]
   34f50:	add	r0, r6, r0
   34f54:	add	r3, r3, r0
   34f58:	str	r3, [r4, #20]
   34f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34f60:	mov	r2, r7
   34f64:	mov	r1, r8
   34f68:	bl	14544 <memcpy@plt>
   34f6c:	ldr	r3, [r4, #20]
   34f70:	add	r7, r3, r7
   34f74:	str	r7, [r4, #20]
   34f78:	b	34ecc <flatcc_json_printer_int8_enum_field@@Base+0xf4>
   34f7c:	mov	r1, r5
   34f80:	mov	r0, r4
   34f84:	mov	r3, r6
   34f88:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   34f8c:	bx	r3
   34f90:	ldrb	r2, [r0, #28]
   34f94:	cmp	r2, #0
   34f98:	beq	34e38 <flatcc_json_printer_int8_enum_field@@Base+0x60>
   34f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34fa0:	ldr	r3, [r0, #20]
   34fa4:	mov	r2, #10
   34fa8:	add	r1, r3, #1
   34fac:	str	r1, [r0, #20]
   34fb0:	strb	r2, [r3]
   34fb4:	ldrb	r3, [r0, #25]
   34fb8:	ldr	r2, [r0, #32]
   34fbc:	ldr	r0, [r0, #20]
   34fc0:	ldr	r1, [r4, #16]
   34fc4:	mul	r9, r2, r3
   34fc8:	add	r3, r0, r9
   34fcc:	cmp	r1, r3
   34fd0:	bcc	34ff0 <flatcc_json_printer_int8_enum_field@@Base+0x218>
   34fd4:	mov	r2, r9
   34fd8:	mov	r1, #32
   34fdc:	bl	145bc <memset@plt>
   34fe0:	ldr	r2, [r4, #20]
   34fe4:	add	r2, r2, r9
   34fe8:	str	r2, [r4, #20]
   34fec:	b	34e8c <flatcc_json_printer_int8_enum_field@@Base+0xb4>
   34ff0:	mov	r1, r9
   34ff4:	mov	r0, r4
   34ff8:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   34ffc:	ldr	r2, [r4, #20]
   35000:	b	34e8c <flatcc_json_printer_int8_enum_field@@Base+0xb4>

00035004 <flatcc_json_printer_int16_enum_field@@Base>:
   35004:	add	r2, r2, #2
   35008:	ldr	ip, [r1, #8]
   3500c:	lsl	r2, r2, #1
   35010:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   35014:	cmp	r2, ip
   35018:	ldr	r7, [sp, #32]
   3501c:	ldrsh	ip, [sp, #36]	; 0x24
   35020:	ldr	r6, [sp, #40]	; 0x28
   35024:	blt	3503c <flatcc_json_printer_int16_enum_field@@Base+0x38>
   35028:	ldrb	r2, [r0, #29]
   3502c:	cmp	r2, #0
   35030:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   35034:	mov	r5, ip
   35038:	b	35064 <flatcc_json_printer_int16_enum_field@@Base+0x60>
   3503c:	ldr	lr, [r1, #4]
   35040:	ldrh	r2, [lr, r2]
   35044:	cmp	r2, #0
   35048:	beq	35028 <flatcc_json_printer_int16_enum_field@@Base+0x24>
   3504c:	ldr	lr, [r1]
   35050:	cmn	lr, r2
   35054:	beq	35028 <flatcc_json_printer_int16_enum_field@@Base+0x24>
   35058:	ldrsh	r5, [lr, r2]
   3505c:	cmp	ip, r5
   35060:	beq	351bc <flatcc_json_printer_int16_enum_field@@Base+0x1b8>
   35064:	ldr	r2, [r1, #16]
   35068:	mov	r8, r3
   3506c:	cmp	r2, #0
   35070:	add	r2, r2, #1
   35074:	str	r2, [r1, #16]
   35078:	ldrne	r2, [r0, #20]
   3507c:	movne	r1, #44	; 0x2c
   35080:	addne	ip, r2, #1
   35084:	strne	ip, [r0, #20]
   35088:	strbne	r1, [r2]
   3508c:	ldrb	r1, [r0, #25]
   35090:	mov	r4, r0
   35094:	cmp	r1, #0
   35098:	bne	351cc <flatcc_json_printer_int16_enum_field@@Base+0x1c8>
   3509c:	ldr	r2, [r0, #20]
   350a0:	ldr	r3, [r0, #16]
   350a4:	cmp	r2, r3
   350a8:	bcc	350b8 <flatcc_json_printer_int16_enum_field@@Base+0xb4>
   350ac:	ldr	r3, [r0, #44]	; 0x2c
   350b0:	blx	r3
   350b4:	ldr	r2, [r4, #20]
   350b8:	mov	r3, #34	; 0x22
   350bc:	strb	r3, [r2]
   350c0:	ldrb	r3, [r4, #26]
   350c4:	ldr	r0, [r4, #20]
   350c8:	ldr	r2, [r4, #16]
   350cc:	cmp	r3, #0
   350d0:	addeq	r0, r0, #1
   350d4:	add	r3, r0, r7
   350d8:	cmp	r2, r3
   350dc:	str	r0, [r4, #20]
   350e0:	bhi	3518c <flatcc_json_printer_int16_enum_field@@Base+0x188>
   350e4:	mov	r2, r7
   350e8:	mov	r1, r8
   350ec:	mov	r0, r4
   350f0:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   350f4:	ldr	r7, [r4, #20]
   350f8:	mov	r3, #34	; 0x22
   350fc:	strb	r3, [r7]
   35100:	ldr	r1, [r4, #20]
   35104:	ldrb	r3, [r4, #26]
   35108:	clz	r3, r3
   3510c:	lsr	r3, r3, #5
   35110:	add	r2, r1, r3
   35114:	add	r2, r2, #1
   35118:	mov	r0, #58	; 0x3a
   3511c:	str	r2, [r4, #20]
   35120:	strb	r0, [r1, r3]
   35124:	ldr	r3, [r4, #20]
   35128:	mov	r2, #32
   3512c:	strb	r2, [r3]
   35130:	ldrb	r3, [r4, #25]
   35134:	ldrb	r0, [r4, #27]
   35138:	ldr	r2, [r4, #20]
   3513c:	adds	r3, r3, #0
   35140:	movne	r3, #1
   35144:	add	r1, r2, r3
   35148:	cmp	r0, #0
   3514c:	str	r1, [r4, #20]
   35150:	beq	351a8 <flatcc_json_printer_int16_enum_field@@Base+0x1a4>
   35154:	cmp	r5, #0
   35158:	lsr	r6, r5, #31
   3515c:	rsblt	r5, r5, #0
   35160:	movlt	r0, #45	; 0x2d
   35164:	sxthlt	r5, r5
   35168:	strblt	r0, [r2, r3]
   3516c:	addlt	r1, r1, #1
   35170:	uxth	r0, r5
   35174:	bl	301f8 <flatcc_json_parser_table_as_root@@Base+0xc>
   35178:	ldr	r3, [r4, #20]
   3517c:	add	r0, r6, r0
   35180:	add	r3, r3, r0
   35184:	str	r3, [r4, #20]
   35188:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3518c:	mov	r2, r7
   35190:	mov	r1, r8
   35194:	bl	14544 <memcpy@plt>
   35198:	ldr	r3, [r4, #20]
   3519c:	add	r7, r3, r7
   351a0:	str	r7, [r4, #20]
   351a4:	b	350f8 <flatcc_json_printer_int16_enum_field@@Base+0xf4>
   351a8:	mov	r1, r5
   351ac:	mov	r0, r4
   351b0:	mov	r3, r6
   351b4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   351b8:	bx	r3
   351bc:	ldrb	r2, [r0, #28]
   351c0:	cmp	r2, #0
   351c4:	beq	35064 <flatcc_json_printer_int16_enum_field@@Base+0x60>
   351c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   351cc:	ldr	r3, [r0, #20]
   351d0:	mov	r2, #10
   351d4:	add	r1, r3, #1
   351d8:	str	r1, [r0, #20]
   351dc:	strb	r2, [r3]
   351e0:	ldrb	r3, [r0, #25]
   351e4:	ldr	r2, [r0, #32]
   351e8:	ldr	r0, [r0, #20]
   351ec:	ldr	r1, [r4, #16]
   351f0:	mul	r9, r2, r3
   351f4:	add	r3, r0, r9
   351f8:	cmp	r1, r3
   351fc:	bcc	3521c <flatcc_json_printer_int16_enum_field@@Base+0x218>
   35200:	mov	r2, r9
   35204:	mov	r1, #32
   35208:	bl	145bc <memset@plt>
   3520c:	ldr	r2, [r4, #20]
   35210:	add	r2, r2, r9
   35214:	str	r2, [r4, #20]
   35218:	b	350b8 <flatcc_json_printer_int16_enum_field@@Base+0xb4>
   3521c:	mov	r1, r9
   35220:	mov	r0, r4
   35224:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   35228:	ldr	r2, [r4, #20]
   3522c:	b	350b8 <flatcc_json_printer_int16_enum_field@@Base+0xb4>

00035230 <flatcc_json_printer_int32_enum_field@@Base>:
   35230:	add	r2, r2, #2
   35234:	ldr	ip, [r1, #8]
   35238:	lsl	r2, r2, #1
   3523c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   35240:	cmp	r2, ip
   35244:	ldr	r7, [sp, #32]
   35248:	ldr	ip, [sp, #36]	; 0x24
   3524c:	ldr	r5, [sp, #40]	; 0x28
   35250:	blt	35268 <flatcc_json_printer_int32_enum_field@@Base+0x38>
   35254:	ldrb	r2, [r0, #29]
   35258:	cmp	r2, #0
   3525c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   35260:	mov	r6, ip
   35264:	b	35290 <flatcc_json_printer_int32_enum_field@@Base+0x60>
   35268:	ldr	lr, [r1, #4]
   3526c:	ldrh	r2, [lr, r2]
   35270:	cmp	r2, #0
   35274:	beq	35254 <flatcc_json_printer_int32_enum_field@@Base+0x24>
   35278:	ldr	lr, [r1]
   3527c:	cmn	lr, r2
   35280:	beq	35254 <flatcc_json_printer_int32_enum_field@@Base+0x24>
   35284:	ldr	r6, [lr, r2]
   35288:	cmp	ip, r6
   3528c:	beq	353e4 <flatcc_json_printer_int32_enum_field@@Base+0x1b4>
   35290:	ldr	r2, [r1, #16]
   35294:	mov	r8, r3
   35298:	cmp	r2, #0
   3529c:	add	r2, r2, #1
   352a0:	str	r2, [r1, #16]
   352a4:	ldrne	r2, [r0, #20]
   352a8:	movne	r1, #44	; 0x2c
   352ac:	addne	ip, r2, #1
   352b0:	strne	ip, [r0, #20]
   352b4:	strbne	r1, [r2]
   352b8:	ldrb	r1, [r0, #25]
   352bc:	mov	r4, r0
   352c0:	cmp	r1, #0
   352c4:	bne	353f4 <flatcc_json_printer_int32_enum_field@@Base+0x1c4>
   352c8:	ldr	r2, [r0, #20]
   352cc:	ldr	r3, [r0, #16]
   352d0:	cmp	r2, r3
   352d4:	bcc	352e4 <flatcc_json_printer_int32_enum_field@@Base+0xb4>
   352d8:	ldr	r3, [r0, #44]	; 0x2c
   352dc:	blx	r3
   352e0:	ldr	r2, [r4, #20]
   352e4:	mov	r3, #34	; 0x22
   352e8:	strb	r3, [r2]
   352ec:	ldrb	r3, [r4, #26]
   352f0:	ldr	r0, [r4, #20]
   352f4:	ldr	r2, [r4, #16]
   352f8:	cmp	r3, #0
   352fc:	addeq	r0, r0, #1
   35300:	add	r3, r0, r7
   35304:	cmp	r2, r3
   35308:	str	r0, [r4, #20]
   3530c:	bhi	353b4 <flatcc_json_printer_int32_enum_field@@Base+0x184>
   35310:	mov	r2, r7
   35314:	mov	r1, r8
   35318:	mov	r0, r4
   3531c:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   35320:	ldr	r7, [r4, #20]
   35324:	mov	r3, #34	; 0x22
   35328:	strb	r3, [r7]
   3532c:	ldr	r1, [r4, #20]
   35330:	ldrb	r3, [r4, #26]
   35334:	clz	r3, r3
   35338:	lsr	r3, r3, #5
   3533c:	add	r2, r1, r3
   35340:	add	r2, r2, #1
   35344:	mov	r0, #58	; 0x3a
   35348:	str	r2, [r4, #20]
   3534c:	strb	r0, [r1, r3]
   35350:	ldr	r3, [r4, #20]
   35354:	mov	r2, #32
   35358:	strb	r2, [r3]
   3535c:	ldrb	r3, [r4, #25]
   35360:	ldrb	r0, [r4, #27]
   35364:	ldr	r2, [r4, #20]
   35368:	adds	r3, r3, #0
   3536c:	movne	r3, #1
   35370:	add	r1, r2, r3
   35374:	cmp	r0, #0
   35378:	str	r1, [r4, #20]
   3537c:	beq	353d0 <flatcc_json_printer_int32_enum_field@@Base+0x1a0>
   35380:	cmp	r6, #0
   35384:	movlt	r0, #45	; 0x2d
   35388:	lsr	r5, r6, #31
   3538c:	rsblt	r6, r6, #0
   35390:	strblt	r0, [r2, r3]
   35394:	addlt	r1, r1, #1
   35398:	mov	r0, r6
   3539c:	bl	3037c <flatcc_json_parser_table_as_root@@Base+0x190>
   353a0:	ldr	r3, [r4, #20]
   353a4:	add	r0, r5, r0
   353a8:	add	r3, r3, r0
   353ac:	str	r3, [r4, #20]
   353b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   353b4:	mov	r2, r7
   353b8:	mov	r1, r8
   353bc:	bl	14544 <memcpy@plt>
   353c0:	ldr	r3, [r4, #20]
   353c4:	add	r7, r3, r7
   353c8:	str	r7, [r4, #20]
   353cc:	b	35324 <flatcc_json_printer_int32_enum_field@@Base+0xf4>
   353d0:	mov	r1, r6
   353d4:	mov	r0, r4
   353d8:	mov	r3, r5
   353dc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   353e0:	bx	r3
   353e4:	ldrb	r2, [r0, #28]
   353e8:	cmp	r2, #0
   353ec:	beq	35290 <flatcc_json_printer_int32_enum_field@@Base+0x60>
   353f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   353f4:	ldr	r3, [r0, #20]
   353f8:	mov	r2, #10
   353fc:	add	r1, r3, #1
   35400:	str	r1, [r0, #20]
   35404:	strb	r2, [r3]
   35408:	ldrb	r3, [r0, #25]
   3540c:	ldr	r2, [r0, #32]
   35410:	ldr	r0, [r0, #20]
   35414:	ldr	r1, [r4, #16]
   35418:	mul	r9, r2, r3
   3541c:	add	r3, r0, r9
   35420:	cmp	r1, r3
   35424:	bcc	35444 <flatcc_json_printer_int32_enum_field@@Base+0x214>
   35428:	mov	r2, r9
   3542c:	mov	r1, #32
   35430:	bl	145bc <memset@plt>
   35434:	ldr	r2, [r4, #20]
   35438:	add	r2, r2, r9
   3543c:	str	r2, [r4, #20]
   35440:	b	352e4 <flatcc_json_printer_int32_enum_field@@Base+0xb4>
   35444:	mov	r1, r9
   35448:	mov	r0, r4
   3544c:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   35450:	ldr	r2, [r4, #20]
   35454:	b	352e4 <flatcc_json_printer_int32_enum_field@@Base+0xb4>

00035458 <flatcc_json_printer_int64_enum_field@@Base>:
   35458:	add	r2, r2, #2
   3545c:	ldr	ip, [r1, #8]
   35460:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35464:	lsl	r2, r2, #1
   35468:	sub	sp, sp, #4
   3546c:	cmp	r2, ip
   35470:	ldr	r8, [sp, #40]	; 0x28
   35474:	ldrd	sl, [sp, #48]	; 0x30
   35478:	ldr	r5, [sp, #56]	; 0x38
   3547c:	blt	35498 <flatcc_json_printer_int64_enum_field@@Base+0x40>
   35480:	ldrb	r2, [r0, #29]
   35484:	cmp	r2, #0
   35488:	beq	355f4 <flatcc_json_printer_int64_enum_field@@Base+0x19c>
   3548c:	mov	r6, sl
   35490:	mov	r7, fp
   35494:	b	354c4 <flatcc_json_printer_int64_enum_field@@Base+0x6c>
   35498:	ldr	ip, [r1, #4]
   3549c:	ldrh	r2, [ip, r2]
   354a0:	cmp	r2, #0
   354a4:	beq	35480 <flatcc_json_printer_int64_enum_field@@Base+0x28>
   354a8:	ldr	ip, [r1]
   354ac:	cmn	ip, r2
   354b0:	beq	35480 <flatcc_json_printer_int64_enum_field@@Base+0x28>
   354b4:	ldrd	r6, [ip, r2]
   354b8:	cmp	fp, r7
   354bc:	cmpeq	sl, r6
   354c0:	beq	35634 <flatcc_json_printer_int64_enum_field@@Base+0x1dc>
   354c4:	ldr	r2, [r1, #16]
   354c8:	mov	r9, r3
   354cc:	cmp	r2, #0
   354d0:	add	r2, r2, #1
   354d4:	str	r2, [r1, #16]
   354d8:	ldrne	r2, [r0, #20]
   354dc:	movne	r1, #44	; 0x2c
   354e0:	addne	ip, r2, #1
   354e4:	strne	ip, [r0, #20]
   354e8:	strbne	r1, [r2]
   354ec:	ldrb	r1, [r0, #25]
   354f0:	mov	r4, r0
   354f4:	cmp	r1, #0
   354f8:	bne	35644 <flatcc_json_printer_int64_enum_field@@Base+0x1ec>
   354fc:	ldr	r2, [r0, #20]
   35500:	ldr	r3, [r0, #16]
   35504:	cmp	r2, r3
   35508:	bcc	35518 <flatcc_json_printer_int64_enum_field@@Base+0xc0>
   3550c:	ldr	r3, [r0, #44]	; 0x2c
   35510:	blx	r3
   35514:	ldr	r2, [r4, #20]
   35518:	mov	r3, #34	; 0x22
   3551c:	strb	r3, [r2]
   35520:	ldrb	r3, [r4, #26]
   35524:	ldr	r0, [r4, #20]
   35528:	ldr	r2, [r4, #16]
   3552c:	cmp	r3, #0
   35530:	addeq	r0, r0, #1
   35534:	add	r3, r0, r8
   35538:	cmp	r2, r3
   3553c:	str	r0, [r4, #20]
   35540:	bhi	355fc <flatcc_json_printer_int64_enum_field@@Base+0x1a4>
   35544:	mov	r2, r8
   35548:	mov	r1, r9
   3554c:	mov	r0, r4
   35550:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   35554:	ldr	r8, [r4, #20]
   35558:	mov	r3, #34	; 0x22
   3555c:	strb	r3, [r8]
   35560:	ldr	r1, [r4, #20]
   35564:	ldrb	r3, [r4, #26]
   35568:	clz	r3, r3
   3556c:	lsr	r3, r3, #5
   35570:	add	r2, r1, r3
   35574:	add	r2, r2, #1
   35578:	mov	r0, #58	; 0x3a
   3557c:	str	r2, [r4, #20]
   35580:	strb	r0, [r1, r3]
   35584:	ldr	r3, [r4, #20]
   35588:	mov	r2, #32
   3558c:	strb	r2, [r3]
   35590:	ldrb	r3, [r4, #25]
   35594:	ldrb	r0, [r4, #27]
   35598:	ldr	r1, [r4, #20]
   3559c:	adds	r3, r3, #0
   355a0:	movne	r3, #1
   355a4:	add	r2, r1, r3
   355a8:	cmp	r0, #0
   355ac:	str	r2, [r4, #20]
   355b0:	beq	35618 <flatcc_json_printer_int64_enum_field@@Base+0x1c0>
   355b4:	cmp	r6, #0
   355b8:	sbcs	r0, r7, #0
   355bc:	lsr	r5, r7, #31
   355c0:	bge	355d8 <flatcc_json_printer_int64_enum_field@@Base+0x180>
   355c4:	rsbs	r6, r6, #0
   355c8:	rsc	r7, r7, #0
   355cc:	add	r2, r2, #1
   355d0:	mov	r0, #45	; 0x2d
   355d4:	strb	r0, [r1, r3]
   355d8:	mov	r0, r6
   355dc:	mov	r1, r7
   355e0:	bl	306e8 <flatcc_json_parser_table_as_root@@Base+0x4fc>
   355e4:	ldr	r3, [r4, #20]
   355e8:	add	r0, r5, r0
   355ec:	add	r3, r3, r0
   355f0:	str	r3, [r4, #20]
   355f4:	add	sp, sp, #4
   355f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   355fc:	mov	r2, r8
   35600:	mov	r1, r9
   35604:	bl	14544 <memcpy@plt>
   35608:	ldr	r3, [r4, #20]
   3560c:	add	r8, r3, r8
   35610:	str	r8, [r4, #20]
   35614:	b	35558 <flatcc_json_printer_int64_enum_field@@Base+0x100>
   35618:	mov	r2, r6
   3561c:	mov	r3, r7
   35620:	mov	r0, r4
   35624:	mov	r1, r5
   35628:	add	sp, sp, #4
   3562c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35630:	bx	r1
   35634:	ldrb	r2, [r0, #28]
   35638:	cmp	r2, #0
   3563c:	beq	354c4 <flatcc_json_printer_int64_enum_field@@Base+0x6c>
   35640:	b	355f4 <flatcc_json_printer_int64_enum_field@@Base+0x19c>
   35644:	ldr	r3, [r0, #20]
   35648:	mov	r2, #10
   3564c:	add	r1, r3, #1
   35650:	str	r1, [r0, #20]
   35654:	strb	r2, [r3]
   35658:	ldrb	r3, [r0, #25]
   3565c:	ldr	r2, [r0, #32]
   35660:	ldr	r0, [r0, #20]
   35664:	ldr	r1, [r4, #16]
   35668:	mul	sl, r2, r3
   3566c:	add	r3, r0, sl
   35670:	cmp	r1, r3
   35674:	bcc	35694 <flatcc_json_printer_int64_enum_field@@Base+0x23c>
   35678:	mov	r2, sl
   3567c:	mov	r1, #32
   35680:	bl	145bc <memset@plt>
   35684:	ldr	r2, [r4, #20]
   35688:	add	r2, r2, sl
   3568c:	str	r2, [r4, #20]
   35690:	b	35518 <flatcc_json_printer_int64_enum_field@@Base+0xc0>
   35694:	mov	r1, sl
   35698:	mov	r0, r4
   3569c:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   356a0:	ldr	r2, [r4, #20]
   356a4:	b	35518 <flatcc_json_printer_int64_enum_field@@Base+0xc0>

000356a8 <flatcc_json_printer_bool_enum_field@@Base>:
   356a8:	add	r2, r2, #2
   356ac:	ldr	ip, [r1, #8]
   356b0:	lsl	r2, r2, #1
   356b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   356b8:	cmp	r2, ip
   356bc:	ldr	r7, [sp, #32]
   356c0:	ldrb	ip, [sp, #36]	; 0x24
   356c4:	ldr	r5, [sp, #40]	; 0x28
   356c8:	blt	356e0 <flatcc_json_printer_bool_enum_field@@Base+0x38>
   356cc:	ldrb	r2, [r0, #29]
   356d0:	cmp	r2, #0
   356d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   356d8:	mov	r6, ip
   356dc:	b	35708 <flatcc_json_printer_bool_enum_field@@Base+0x60>
   356e0:	ldr	lr, [r1, #4]
   356e4:	ldrh	r2, [lr, r2]
   356e8:	cmp	r2, #0
   356ec:	beq	356cc <flatcc_json_printer_bool_enum_field@@Base+0x24>
   356f0:	ldr	lr, [r1]
   356f4:	cmn	lr, r2
   356f8:	beq	356cc <flatcc_json_printer_bool_enum_field@@Base+0x24>
   356fc:	ldrb	r6, [lr, r2]
   35700:	cmp	ip, r6
   35704:	beq	3583c <flatcc_json_printer_bool_enum_field@@Base+0x194>
   35708:	ldr	r2, [r1, #16]
   3570c:	mov	r8, r3
   35710:	cmp	r2, #0
   35714:	add	r2, r2, #1
   35718:	str	r2, [r1, #16]
   3571c:	ldrne	r2, [r0, #20]
   35720:	movne	r1, #44	; 0x2c
   35724:	addne	ip, r2, #1
   35728:	strne	ip, [r0, #20]
   3572c:	strbne	r1, [r2]
   35730:	ldrb	r1, [r0, #25]
   35734:	mov	r4, r0
   35738:	cmp	r1, #0
   3573c:	bne	3584c <flatcc_json_printer_bool_enum_field@@Base+0x1a4>
   35740:	ldr	r2, [r0, #20]
   35744:	ldr	r3, [r0, #16]
   35748:	cmp	r2, r3
   3574c:	bcc	3575c <flatcc_json_printer_bool_enum_field@@Base+0xb4>
   35750:	ldr	r3, [r0, #44]	; 0x2c
   35754:	blx	r3
   35758:	ldr	r2, [r4, #20]
   3575c:	mov	r3, #34	; 0x22
   35760:	strb	r3, [r2]
   35764:	ldrb	r3, [r4, #26]
   35768:	ldr	r0, [r4, #20]
   3576c:	ldr	r2, [r4, #16]
   35770:	cmp	r3, #0
   35774:	addeq	r0, r0, #1
   35778:	add	r3, r0, r7
   3577c:	cmp	r2, r3
   35780:	str	r0, [r4, #20]
   35784:	bhi	35820 <flatcc_json_printer_bool_enum_field@@Base+0x178>
   35788:	mov	r2, r7
   3578c:	mov	r1, r8
   35790:	mov	r0, r4
   35794:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   35798:	ldr	r7, [r4, #20]
   3579c:	mov	r3, #34	; 0x22
   357a0:	strb	r3, [r7]
   357a4:	ldr	r1, [r4, #20]
   357a8:	ldrb	r3, [r4, #26]
   357ac:	clz	r3, r3
   357b0:	lsr	r3, r3, #5
   357b4:	add	r2, r1, r3
   357b8:	add	r2, r2, #1
   357bc:	mov	r0, #58	; 0x3a
   357c0:	str	r2, [r4, #20]
   357c4:	strb	r0, [r1, r3]
   357c8:	ldr	r3, [r4, #20]
   357cc:	mov	r2, #32
   357d0:	strb	r2, [r3]
   357d4:	ldrb	r2, [r4, #25]
   357d8:	ldrb	r3, [r4, #27]
   357dc:	ldr	r1, [r4, #20]
   357e0:	cmp	r2, #0
   357e4:	addne	r1, r1, #1
   357e8:	cmp	r3, #0
   357ec:	str	r1, [r4, #20]
   357f0:	bne	35808 <flatcc_json_printer_bool_enum_field@@Base+0x160>
   357f4:	mov	r1, r6
   357f8:	mov	r0, r4
   357fc:	mov	r3, r5
   35800:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   35804:	bx	r3
   35808:	mov	r0, r6
   3580c:	bl	31434 <flatcc_json_parser_table_as_root@@Base+0x1248>
   35810:	ldr	r3, [r4, #20]
   35814:	add	r0, r3, r0
   35818:	str	r0, [r4, #20]
   3581c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35820:	mov	r2, r7
   35824:	mov	r1, r8
   35828:	bl	14544 <memcpy@plt>
   3582c:	ldr	r3, [r4, #20]
   35830:	add	r7, r3, r7
   35834:	str	r7, [r4, #20]
   35838:	b	3579c <flatcc_json_printer_bool_enum_field@@Base+0xf4>
   3583c:	ldrb	r2, [r0, #28]
   35840:	cmp	r2, #0
   35844:	beq	35708 <flatcc_json_printer_bool_enum_field@@Base+0x60>
   35848:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3584c:	ldr	r3, [r0, #20]
   35850:	mov	r2, #10
   35854:	add	r1, r3, #1
   35858:	str	r1, [r0, #20]
   3585c:	strb	r2, [r3]
   35860:	ldrb	r3, [r0, #25]
   35864:	ldr	r2, [r0, #32]
   35868:	ldr	r0, [r0, #20]
   3586c:	ldr	r1, [r4, #16]
   35870:	mul	r9, r2, r3
   35874:	add	r3, r0, r9
   35878:	cmp	r1, r3
   3587c:	bcc	3589c <flatcc_json_printer_bool_enum_field@@Base+0x1f4>
   35880:	mov	r2, r9
   35884:	mov	r1, #32
   35888:	bl	145bc <memset@plt>
   3588c:	ldr	r2, [r4, #20]
   35890:	add	r2, r2, r9
   35894:	str	r2, [r4, #20]
   35898:	b	3575c <flatcc_json_printer_bool_enum_field@@Base+0xb4>
   3589c:	mov	r1, r9
   358a0:	mov	r0, r4
   358a4:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   358a8:	ldr	r2, [r4, #20]
   358ac:	b	3575c <flatcc_json_printer_bool_enum_field@@Base+0xb4>

000358b0 <flatcc_json_printer_uint8_struct_field@@Base>:
   358b0:	cmp	r1, #0
   358b4:	push	{r4, r5, r6, r7, r8, lr}
   358b8:	mov	r4, r0
   358bc:	ldrb	r5, [r2, r3]
   358c0:	ldrne	r3, [r0, #20]
   358c4:	movne	r2, #44	; 0x2c
   358c8:	addne	r1, r3, #1
   358cc:	strne	r1, [r0, #20]
   358d0:	strbne	r2, [r3]
   358d4:	ldrb	r1, [r0, #25]
   358d8:	ldr	r6, [sp, #28]
   358dc:	cmp	r1, #0
   358e0:	bne	359bc <flatcc_json_printer_uint8_struct_field@@Base+0x10c>
   358e4:	ldr	r2, [r0, #20]
   358e8:	ldr	r3, [r0, #16]
   358ec:	cmp	r2, r3
   358f0:	bcs	35998 <flatcc_json_printer_uint8_struct_field@@Base+0xe8>
   358f4:	mov	r3, #34	; 0x22
   358f8:	strb	r3, [r2]
   358fc:	ldrb	r3, [r4, #26]
   35900:	ldr	r0, [r4, #20]
   35904:	ldr	r2, [r4, #16]
   35908:	cmp	r3, #0
   3590c:	addeq	r0, r0, #1
   35910:	add	r3, r0, r6
   35914:	cmp	r2, r3
   35918:	str	r0, [r4, #20]
   3591c:	mov	r2, r6
   35920:	ldr	r1, [sp, #24]
   35924:	bhi	359a8 <flatcc_json_printer_uint8_struct_field@@Base+0xf8>
   35928:	mov	r0, r4
   3592c:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   35930:	ldr	r6, [r4, #20]
   35934:	mov	r3, #34	; 0x22
   35938:	strb	r3, [r6]
   3593c:	ldr	r1, [r4, #20]
   35940:	ldrb	r3, [r4, #26]
   35944:	clz	r3, r3
   35948:	lsr	r3, r3, #5
   3594c:	add	r2, r1, r3
   35950:	add	r2, r2, #1
   35954:	mov	r0, #58	; 0x3a
   35958:	str	r2, [r4, #20]
   3595c:	strb	r0, [r1, r3]
   35960:	ldr	r3, [r4, #20]
   35964:	mov	r2, #32
   35968:	mov	r0, r5
   3596c:	strb	r2, [r3]
   35970:	ldrb	r3, [r4, #25]
   35974:	ldr	r1, [r4, #20]
   35978:	cmp	r3, #0
   3597c:	addne	r1, r1, #1
   35980:	str	r1, [r4, #20]
   35984:	bl	31344 <flatcc_json_parser_table_as_root@@Base+0x1158>
   35988:	ldr	r3, [r4, #20]
   3598c:	add	r0, r3, r0
   35990:	str	r0, [r4, #20]
   35994:	pop	{r4, r5, r6, r7, r8, pc}
   35998:	ldr	r3, [r0, #44]	; 0x2c
   3599c:	blx	r3
   359a0:	ldr	r2, [r4, #20]
   359a4:	b	358f4 <flatcc_json_printer_uint8_struct_field@@Base+0x44>
   359a8:	bl	14544 <memcpy@plt>
   359ac:	ldr	r3, [r4, #20]
   359b0:	add	r6, r3, r6
   359b4:	str	r6, [r4, #20]
   359b8:	b	35934 <flatcc_json_printer_uint8_struct_field@@Base+0x84>
   359bc:	ldr	r3, [r0, #20]
   359c0:	mov	r2, #10
   359c4:	add	r1, r3, #1
   359c8:	str	r1, [r0, #20]
   359cc:	strb	r2, [r3]
   359d0:	ldrb	r7, [r0, #25]
   359d4:	ldr	r2, [r0, #32]
   359d8:	ldr	r0, [r0, #20]
   359dc:	ldr	r1, [r4, #16]
   359e0:	mul	r7, r2, r7
   359e4:	add	r3, r0, r7
   359e8:	cmp	r1, r3
   359ec:	bcc	35a0c <flatcc_json_printer_uint8_struct_field@@Base+0x15c>
   359f0:	mov	r2, r7
   359f4:	mov	r1, #32
   359f8:	bl	145bc <memset@plt>
   359fc:	ldr	r2, [r4, #20]
   35a00:	add	r2, r2, r7
   35a04:	str	r2, [r4, #20]
   35a08:	b	358f4 <flatcc_json_printer_uint8_struct_field@@Base+0x44>
   35a0c:	mov	r1, r7
   35a10:	mov	r0, r4
   35a14:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   35a18:	ldr	r2, [r4, #20]
   35a1c:	b	358f4 <flatcc_json_printer_uint8_struct_field@@Base+0x44>

00035a20 <flatcc_json_printer_uint16_struct_field@@Base>:
   35a20:	cmp	r1, #0
   35a24:	push	{r4, r5, r6, r7, r8, lr}
   35a28:	mov	r4, r0
   35a2c:	ldrh	r5, [r2, r3]
   35a30:	ldrne	r3, [r0, #20]
   35a34:	movne	r2, #44	; 0x2c
   35a38:	addne	r1, r3, #1
   35a3c:	strne	r1, [r0, #20]
   35a40:	strbne	r2, [r3]
   35a44:	ldrb	r1, [r0, #25]
   35a48:	ldr	r6, [sp, #28]
   35a4c:	cmp	r1, #0
   35a50:	bne	35b2c <flatcc_json_printer_uint16_struct_field@@Base+0x10c>
   35a54:	ldr	r2, [r0, #20]
   35a58:	ldr	r3, [r0, #16]
   35a5c:	cmp	r2, r3
   35a60:	bcs	35b08 <flatcc_json_printer_uint16_struct_field@@Base+0xe8>
   35a64:	mov	r3, #34	; 0x22
   35a68:	strb	r3, [r2]
   35a6c:	ldrb	r3, [r4, #26]
   35a70:	ldr	r0, [r4, #20]
   35a74:	ldr	r2, [r4, #16]
   35a78:	cmp	r3, #0
   35a7c:	addeq	r0, r0, #1
   35a80:	add	r3, r0, r6
   35a84:	cmp	r2, r3
   35a88:	str	r0, [r4, #20]
   35a8c:	mov	r2, r6
   35a90:	ldr	r1, [sp, #24]
   35a94:	bhi	35b18 <flatcc_json_printer_uint16_struct_field@@Base+0xf8>
   35a98:	mov	r0, r4
   35a9c:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   35aa0:	ldr	r6, [r4, #20]
   35aa4:	mov	r3, #34	; 0x22
   35aa8:	strb	r3, [r6]
   35aac:	ldr	r1, [r4, #20]
   35ab0:	ldrb	r3, [r4, #26]
   35ab4:	clz	r3, r3
   35ab8:	lsr	r3, r3, #5
   35abc:	add	r2, r1, r3
   35ac0:	add	r2, r2, #1
   35ac4:	mov	r0, #58	; 0x3a
   35ac8:	str	r2, [r4, #20]
   35acc:	strb	r0, [r1, r3]
   35ad0:	ldr	r3, [r4, #20]
   35ad4:	mov	r2, #32
   35ad8:	mov	r0, r5
   35adc:	strb	r2, [r3]
   35ae0:	ldrb	r3, [r4, #25]
   35ae4:	ldr	r1, [r4, #20]
   35ae8:	cmp	r3, #0
   35aec:	addne	r1, r1, #1
   35af0:	str	r1, [r4, #20]
   35af4:	bl	301f8 <flatcc_json_parser_table_as_root@@Base+0xc>
   35af8:	ldr	r3, [r4, #20]
   35afc:	add	r0, r3, r0
   35b00:	str	r0, [r4, #20]
   35b04:	pop	{r4, r5, r6, r7, r8, pc}
   35b08:	ldr	r3, [r0, #44]	; 0x2c
   35b0c:	blx	r3
   35b10:	ldr	r2, [r4, #20]
   35b14:	b	35a64 <flatcc_json_printer_uint16_struct_field@@Base+0x44>
   35b18:	bl	14544 <memcpy@plt>
   35b1c:	ldr	r3, [r4, #20]
   35b20:	add	r6, r3, r6
   35b24:	str	r6, [r4, #20]
   35b28:	b	35aa4 <flatcc_json_printer_uint16_struct_field@@Base+0x84>
   35b2c:	ldr	r3, [r0, #20]
   35b30:	mov	r2, #10
   35b34:	add	r1, r3, #1
   35b38:	str	r1, [r0, #20]
   35b3c:	strb	r2, [r3]
   35b40:	ldrb	r7, [r0, #25]
   35b44:	ldr	r2, [r0, #32]
   35b48:	ldr	r0, [r0, #20]
   35b4c:	ldr	r1, [r4, #16]
   35b50:	mul	r7, r2, r7
   35b54:	add	r3, r0, r7
   35b58:	cmp	r1, r3
   35b5c:	bcc	35b7c <flatcc_json_printer_uint16_struct_field@@Base+0x15c>
   35b60:	mov	r2, r7
   35b64:	mov	r1, #32
   35b68:	bl	145bc <memset@plt>
   35b6c:	ldr	r2, [r4, #20]
   35b70:	add	r2, r2, r7
   35b74:	str	r2, [r4, #20]
   35b78:	b	35a64 <flatcc_json_printer_uint16_struct_field@@Base+0x44>
   35b7c:	mov	r1, r7
   35b80:	mov	r0, r4
   35b84:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   35b88:	ldr	r2, [r4, #20]
   35b8c:	b	35a64 <flatcc_json_printer_uint16_struct_field@@Base+0x44>

00035b90 <flatcc_json_printer_uint32_struct_field@@Base>:
   35b90:	cmp	r1, #0
   35b94:	push	{r4, r5, r6, r7, r8, lr}
   35b98:	mov	r4, r0
   35b9c:	ldr	r5, [r2, r3]
   35ba0:	ldrne	r3, [r0, #20]
   35ba4:	movne	r2, #44	; 0x2c
   35ba8:	addne	r1, r3, #1
   35bac:	strne	r1, [r0, #20]
   35bb0:	strbne	r2, [r3]
   35bb4:	ldrb	r1, [r0, #25]
   35bb8:	ldr	r6, [sp, #28]
   35bbc:	cmp	r1, #0
   35bc0:	bne	35c9c <flatcc_json_printer_uint32_struct_field@@Base+0x10c>
   35bc4:	ldr	r2, [r0, #20]
   35bc8:	ldr	r3, [r0, #16]
   35bcc:	cmp	r2, r3
   35bd0:	bcs	35c78 <flatcc_json_printer_uint32_struct_field@@Base+0xe8>
   35bd4:	mov	r3, #34	; 0x22
   35bd8:	strb	r3, [r2]
   35bdc:	ldrb	r3, [r4, #26]
   35be0:	ldr	r0, [r4, #20]
   35be4:	ldr	r2, [r4, #16]
   35be8:	cmp	r3, #0
   35bec:	addeq	r0, r0, #1
   35bf0:	add	r3, r0, r6
   35bf4:	cmp	r2, r3
   35bf8:	str	r0, [r4, #20]
   35bfc:	mov	r2, r6
   35c00:	ldr	r1, [sp, #24]
   35c04:	bhi	35c88 <flatcc_json_printer_uint32_struct_field@@Base+0xf8>
   35c08:	mov	r0, r4
   35c0c:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   35c10:	ldr	r6, [r4, #20]
   35c14:	mov	r3, #34	; 0x22
   35c18:	strb	r3, [r6]
   35c1c:	ldr	r1, [r4, #20]
   35c20:	ldrb	r3, [r4, #26]
   35c24:	clz	r3, r3
   35c28:	lsr	r3, r3, #5
   35c2c:	add	r2, r1, r3
   35c30:	add	r2, r2, #1
   35c34:	mov	r0, #58	; 0x3a
   35c38:	str	r2, [r4, #20]
   35c3c:	strb	r0, [r1, r3]
   35c40:	ldr	r3, [r4, #20]
   35c44:	mov	r2, #32
   35c48:	mov	r0, r5
   35c4c:	strb	r2, [r3]
   35c50:	ldrb	r3, [r4, #25]
   35c54:	ldr	r1, [r4, #20]
   35c58:	cmp	r3, #0
   35c5c:	addne	r1, r1, #1
   35c60:	str	r1, [r4, #20]
   35c64:	bl	3037c <flatcc_json_parser_table_as_root@@Base+0x190>
   35c68:	ldr	r3, [r4, #20]
   35c6c:	add	r0, r3, r0
   35c70:	str	r0, [r4, #20]
   35c74:	pop	{r4, r5, r6, r7, r8, pc}
   35c78:	ldr	r3, [r0, #44]	; 0x2c
   35c7c:	blx	r3
   35c80:	ldr	r2, [r4, #20]
   35c84:	b	35bd4 <flatcc_json_printer_uint32_struct_field@@Base+0x44>
   35c88:	bl	14544 <memcpy@plt>
   35c8c:	ldr	r3, [r4, #20]
   35c90:	add	r6, r3, r6
   35c94:	str	r6, [r4, #20]
   35c98:	b	35c14 <flatcc_json_printer_uint32_struct_field@@Base+0x84>
   35c9c:	ldr	r3, [r0, #20]
   35ca0:	mov	r2, #10
   35ca4:	add	r1, r3, #1
   35ca8:	str	r1, [r0, #20]
   35cac:	strb	r2, [r3]
   35cb0:	ldrb	r7, [r0, #25]
   35cb4:	ldr	r2, [r0, #32]
   35cb8:	ldr	r0, [r0, #20]
   35cbc:	ldr	r1, [r4, #16]
   35cc0:	mul	r7, r2, r7
   35cc4:	add	r3, r0, r7
   35cc8:	cmp	r1, r3
   35ccc:	bcc	35cec <flatcc_json_printer_uint32_struct_field@@Base+0x15c>
   35cd0:	mov	r2, r7
   35cd4:	mov	r1, #32
   35cd8:	bl	145bc <memset@plt>
   35cdc:	ldr	r2, [r4, #20]
   35ce0:	add	r2, r2, r7
   35ce4:	str	r2, [r4, #20]
   35ce8:	b	35bd4 <flatcc_json_printer_uint32_struct_field@@Base+0x44>
   35cec:	mov	r1, r7
   35cf0:	mov	r0, r4
   35cf4:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   35cf8:	ldr	r2, [r4, #20]
   35cfc:	b	35bd4 <flatcc_json_printer_uint32_struct_field@@Base+0x44>

00035d00 <flatcc_json_printer_uint64_struct_field@@Base>:
   35d00:	cmp	r1, #0
   35d04:	push	{r4, r5, r6, r7, r8, lr}
   35d08:	mov	r4, r0
   35d0c:	ldrd	r6, [r2, r3]
   35d10:	ldrne	r3, [r0, #20]
   35d14:	movne	r2, #44	; 0x2c
   35d18:	addne	r1, r3, #1
   35d1c:	strne	r1, [r0, #20]
   35d20:	strbne	r2, [r3]
   35d24:	ldrb	r1, [r0, #25]
   35d28:	ldr	r5, [sp, #28]
   35d2c:	cmp	r1, #0
   35d30:	bne	35e10 <flatcc_json_printer_uint64_struct_field@@Base+0x110>
   35d34:	ldr	r2, [r0, #20]
   35d38:	ldr	r3, [r0, #16]
   35d3c:	cmp	r2, r3
   35d40:	bcs	35dec <flatcc_json_printer_uint64_struct_field@@Base+0xec>
   35d44:	mov	r3, #34	; 0x22
   35d48:	strb	r3, [r2]
   35d4c:	ldrb	r3, [r4, #26]
   35d50:	ldr	r0, [r4, #20]
   35d54:	ldr	r2, [r4, #16]
   35d58:	cmp	r3, #0
   35d5c:	addeq	r0, r0, #1
   35d60:	add	r3, r0, r5
   35d64:	cmp	r2, r3
   35d68:	str	r0, [r4, #20]
   35d6c:	mov	r2, r5
   35d70:	ldr	r1, [sp, #24]
   35d74:	bhi	35dfc <flatcc_json_printer_uint64_struct_field@@Base+0xfc>
   35d78:	mov	r0, r4
   35d7c:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   35d80:	ldr	r5, [r4, #20]
   35d84:	mov	r3, #34	; 0x22
   35d88:	strb	r3, [r5]
   35d8c:	ldr	r1, [r4, #20]
   35d90:	ldrb	r3, [r4, #26]
   35d94:	clz	r3, r3
   35d98:	lsr	r3, r3, #5
   35d9c:	add	r2, r1, r3
   35da0:	add	r2, r2, #1
   35da4:	mov	r0, #58	; 0x3a
   35da8:	str	r2, [r4, #20]
   35dac:	strb	r0, [r1, r3]
   35db0:	ldr	r3, [r4, #20]
   35db4:	mov	r2, #32
   35db8:	mov	r0, r6
   35dbc:	strb	r2, [r3]
   35dc0:	ldrb	r3, [r4, #25]
   35dc4:	ldr	r2, [r4, #20]
   35dc8:	mov	r1, r7
   35dcc:	cmp	r3, #0
   35dd0:	addne	r2, r2, #1
   35dd4:	str	r2, [r4, #20]
   35dd8:	bl	306e8 <flatcc_json_parser_table_as_root@@Base+0x4fc>
   35ddc:	ldr	r3, [r4, #20]
   35de0:	add	r0, r3, r0
   35de4:	str	r0, [r4, #20]
   35de8:	pop	{r4, r5, r6, r7, r8, pc}
   35dec:	ldr	r3, [r0, #44]	; 0x2c
   35df0:	blx	r3
   35df4:	ldr	r2, [r4, #20]
   35df8:	b	35d44 <flatcc_json_printer_uint64_struct_field@@Base+0x44>
   35dfc:	bl	14544 <memcpy@plt>
   35e00:	ldr	r3, [r4, #20]
   35e04:	add	r5, r3, r5
   35e08:	str	r5, [r4, #20]
   35e0c:	b	35d84 <flatcc_json_printer_uint64_struct_field@@Base+0x84>
   35e10:	ldr	r3, [r0, #20]
   35e14:	mov	r2, #10
   35e18:	add	r1, r3, #1
   35e1c:	str	r1, [r0, #20]
   35e20:	strb	r2, [r3]
   35e24:	ldrb	r8, [r0, #25]
   35e28:	ldr	r2, [r0, #32]
   35e2c:	ldr	r0, [r0, #20]
   35e30:	ldr	r1, [r4, #16]
   35e34:	mul	r8, r2, r8
   35e38:	add	r3, r0, r8
   35e3c:	cmp	r1, r3
   35e40:	bcc	35e60 <flatcc_json_printer_uint64_struct_field@@Base+0x160>
   35e44:	mov	r2, r8
   35e48:	mov	r1, #32
   35e4c:	bl	145bc <memset@plt>
   35e50:	ldr	r2, [r4, #20]
   35e54:	add	r2, r2, r8
   35e58:	str	r2, [r4, #20]
   35e5c:	b	35d44 <flatcc_json_printer_uint64_struct_field@@Base+0x44>
   35e60:	mov	r1, r8
   35e64:	mov	r0, r4
   35e68:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   35e6c:	ldr	r2, [r4, #20]
   35e70:	b	35d44 <flatcc_json_printer_uint64_struct_field@@Base+0x44>

00035e74 <flatcc_json_printer_int8_struct_field@@Base>:
   35e74:	cmp	r1, #0
   35e78:	push	{r4, r5, r6, r7, r8, lr}
   35e7c:	mov	r4, r0
   35e80:	ldrsb	r5, [r2, r3]
   35e84:	ldrne	r3, [r0, #20]
   35e88:	movne	r2, #44	; 0x2c
   35e8c:	addne	r1, r3, #1
   35e90:	strne	r1, [r0, #20]
   35e94:	strbne	r2, [r3]
   35e98:	ldrb	r1, [r0, #25]
   35e9c:	ldr	r6, [sp, #28]
   35ea0:	cmp	r1, #0
   35ea4:	bne	35fa4 <flatcc_json_printer_int8_struct_field@@Base+0x130>
   35ea8:	ldr	r2, [r0, #20]
   35eac:	ldr	r3, [r0, #16]
   35eb0:	cmp	r2, r3
   35eb4:	bcs	35f80 <flatcc_json_printer_int8_struct_field@@Base+0x10c>
   35eb8:	mov	r3, #34	; 0x22
   35ebc:	strb	r3, [r2]
   35ec0:	ldrb	r3, [r4, #26]
   35ec4:	ldr	r0, [r4, #20]
   35ec8:	ldr	r2, [r4, #16]
   35ecc:	cmp	r3, #0
   35ed0:	addeq	r0, r0, #1
   35ed4:	add	r3, r0, r6
   35ed8:	cmp	r2, r3
   35edc:	str	r0, [r4, #20]
   35ee0:	mov	r2, r6
   35ee4:	ldr	r1, [sp, #24]
   35ee8:	bhi	35f90 <flatcc_json_printer_int8_struct_field@@Base+0x11c>
   35eec:	mov	r0, r4
   35ef0:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   35ef4:	ldr	r6, [r4, #20]
   35ef8:	mov	r3, #34	; 0x22
   35efc:	strb	r3, [r6]
   35f00:	ldr	r1, [r4, #20]
   35f04:	ldrb	r3, [r4, #26]
   35f08:	clz	r3, r3
   35f0c:	lsr	r3, r3, #5
   35f10:	add	r2, r1, r3
   35f14:	mov	r0, #58	; 0x3a
   35f18:	add	r2, r2, #1
   35f1c:	str	r2, [r4, #20]
   35f20:	strb	r0, [r1, r3]
   35f24:	ldr	r3, [r4, #20]
   35f28:	mov	r2, #32
   35f2c:	lsr	r6, r5, #31
   35f30:	strb	r2, [r3]
   35f34:	ldrb	r3, [r4, #25]
   35f38:	ldr	r2, [r4, #20]
   35f3c:	adds	r3, r3, #0
   35f40:	movne	r3, #1
   35f44:	cmp	r5, #0
   35f48:	rsblt	r5, r5, #0
   35f4c:	add	r1, r2, r3
   35f50:	sxtblt	r5, r5
   35f54:	movlt	r0, #45	; 0x2d
   35f58:	str	r1, [r4, #20]
   35f5c:	strblt	r0, [r2, r3]
   35f60:	addlt	r1, r1, #1
   35f64:	uxtb	r0, r5
   35f68:	bl	31344 <flatcc_json_parser_table_as_root@@Base+0x1158>
   35f6c:	ldr	r3, [r4, #20]
   35f70:	add	r0, r6, r0
   35f74:	add	r3, r3, r0
   35f78:	str	r3, [r4, #20]
   35f7c:	pop	{r4, r5, r6, r7, r8, pc}
   35f80:	ldr	r3, [r0, #44]	; 0x2c
   35f84:	blx	r3
   35f88:	ldr	r2, [r4, #20]
   35f8c:	b	35eb8 <flatcc_json_printer_int8_struct_field@@Base+0x44>
   35f90:	bl	14544 <memcpy@plt>
   35f94:	ldr	r3, [r4, #20]
   35f98:	add	r6, r3, r6
   35f9c:	str	r6, [r4, #20]
   35fa0:	b	35ef8 <flatcc_json_printer_int8_struct_field@@Base+0x84>
   35fa4:	ldr	r3, [r0, #20]
   35fa8:	mov	r2, #10
   35fac:	add	r1, r3, #1
   35fb0:	str	r1, [r0, #20]
   35fb4:	strb	r2, [r3]
   35fb8:	ldrb	r7, [r0, #25]
   35fbc:	ldr	r2, [r0, #32]
   35fc0:	ldr	r0, [r0, #20]
   35fc4:	ldr	r1, [r4, #16]
   35fc8:	mul	r7, r2, r7
   35fcc:	add	r3, r0, r7
   35fd0:	cmp	r1, r3
   35fd4:	bcc	35ff4 <flatcc_json_printer_int8_struct_field@@Base+0x180>
   35fd8:	mov	r2, r7
   35fdc:	mov	r1, #32
   35fe0:	bl	145bc <memset@plt>
   35fe4:	ldr	r2, [r4, #20]
   35fe8:	add	r2, r2, r7
   35fec:	str	r2, [r4, #20]
   35ff0:	b	35eb8 <flatcc_json_printer_int8_struct_field@@Base+0x44>
   35ff4:	mov	r1, r7
   35ff8:	mov	r0, r4
   35ffc:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   36000:	ldr	r2, [r4, #20]
   36004:	b	35eb8 <flatcc_json_printer_int8_struct_field@@Base+0x44>

00036008 <flatcc_json_printer_int16_struct_field@@Base>:
   36008:	cmp	r1, #0
   3600c:	push	{r4, r5, r6, r7, r8, lr}
   36010:	mov	r4, r0
   36014:	ldrsh	r5, [r2, r3]
   36018:	ldrne	r3, [r0, #20]
   3601c:	movne	r2, #44	; 0x2c
   36020:	addne	r1, r3, #1
   36024:	strne	r1, [r0, #20]
   36028:	strbne	r2, [r3]
   3602c:	ldrb	r1, [r0, #25]
   36030:	ldr	r6, [sp, #28]
   36034:	cmp	r1, #0
   36038:	bne	36138 <flatcc_json_printer_int16_struct_field@@Base+0x130>
   3603c:	ldr	r2, [r0, #20]
   36040:	ldr	r3, [r0, #16]
   36044:	cmp	r2, r3
   36048:	bcs	36114 <flatcc_json_printer_int16_struct_field@@Base+0x10c>
   3604c:	mov	r3, #34	; 0x22
   36050:	strb	r3, [r2]
   36054:	ldrb	r3, [r4, #26]
   36058:	ldr	r0, [r4, #20]
   3605c:	ldr	r2, [r4, #16]
   36060:	cmp	r3, #0
   36064:	addeq	r0, r0, #1
   36068:	add	r3, r0, r6
   3606c:	cmp	r2, r3
   36070:	str	r0, [r4, #20]
   36074:	mov	r2, r6
   36078:	ldr	r1, [sp, #24]
   3607c:	bhi	36124 <flatcc_json_printer_int16_struct_field@@Base+0x11c>
   36080:	mov	r0, r4
   36084:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   36088:	ldr	r6, [r4, #20]
   3608c:	mov	r3, #34	; 0x22
   36090:	strb	r3, [r6]
   36094:	ldr	r1, [r4, #20]
   36098:	ldrb	r3, [r4, #26]
   3609c:	clz	r3, r3
   360a0:	lsr	r3, r3, #5
   360a4:	add	r2, r1, r3
   360a8:	mov	r0, #58	; 0x3a
   360ac:	add	r2, r2, #1
   360b0:	str	r2, [r4, #20]
   360b4:	strb	r0, [r1, r3]
   360b8:	ldr	r3, [r4, #20]
   360bc:	mov	r2, #32
   360c0:	lsr	r6, r5, #31
   360c4:	strb	r2, [r3]
   360c8:	ldrb	r3, [r4, #25]
   360cc:	ldr	r2, [r4, #20]
   360d0:	adds	r3, r3, #0
   360d4:	movne	r3, #1
   360d8:	cmp	r5, #0
   360dc:	rsblt	r5, r5, #0
   360e0:	add	r1, r2, r3
   360e4:	sxthlt	r5, r5
   360e8:	movlt	r0, #45	; 0x2d
   360ec:	str	r1, [r4, #20]
   360f0:	strblt	r0, [r2, r3]
   360f4:	addlt	r1, r1, #1
   360f8:	uxth	r0, r5
   360fc:	bl	301f8 <flatcc_json_parser_table_as_root@@Base+0xc>
   36100:	ldr	r3, [r4, #20]
   36104:	add	r0, r6, r0
   36108:	add	r3, r3, r0
   3610c:	str	r3, [r4, #20]
   36110:	pop	{r4, r5, r6, r7, r8, pc}
   36114:	ldr	r3, [r0, #44]	; 0x2c
   36118:	blx	r3
   3611c:	ldr	r2, [r4, #20]
   36120:	b	3604c <flatcc_json_printer_int16_struct_field@@Base+0x44>
   36124:	bl	14544 <memcpy@plt>
   36128:	ldr	r3, [r4, #20]
   3612c:	add	r6, r3, r6
   36130:	str	r6, [r4, #20]
   36134:	b	3608c <flatcc_json_printer_int16_struct_field@@Base+0x84>
   36138:	ldr	r3, [r0, #20]
   3613c:	mov	r2, #10
   36140:	add	r1, r3, #1
   36144:	str	r1, [r0, #20]
   36148:	strb	r2, [r3]
   3614c:	ldrb	r7, [r0, #25]
   36150:	ldr	r2, [r0, #32]
   36154:	ldr	r0, [r0, #20]
   36158:	ldr	r1, [r4, #16]
   3615c:	mul	r7, r2, r7
   36160:	add	r3, r0, r7
   36164:	cmp	r1, r3
   36168:	bcc	36188 <flatcc_json_printer_int16_struct_field@@Base+0x180>
   3616c:	mov	r2, r7
   36170:	mov	r1, #32
   36174:	bl	145bc <memset@plt>
   36178:	ldr	r2, [r4, #20]
   3617c:	add	r2, r2, r7
   36180:	str	r2, [r4, #20]
   36184:	b	3604c <flatcc_json_printer_int16_struct_field@@Base+0x44>
   36188:	mov	r1, r7
   3618c:	mov	r0, r4
   36190:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   36194:	ldr	r2, [r4, #20]
   36198:	b	3604c <flatcc_json_printer_int16_struct_field@@Base+0x44>

0003619c <flatcc_json_printer_int32_struct_field@@Base>:
   3619c:	cmp	r1, #0
   361a0:	push	{r4, r5, r6, r7, r8, lr}
   361a4:	mov	r4, r0
   361a8:	ldr	r5, [r2, r3]
   361ac:	ldrne	r3, [r0, #20]
   361b0:	movne	r2, #44	; 0x2c
   361b4:	addne	r1, r3, #1
   361b8:	strne	r1, [r0, #20]
   361bc:	strbne	r2, [r3]
   361c0:	ldrb	r1, [r0, #25]
   361c4:	ldr	r6, [sp, #28]
   361c8:	cmp	r1, #0
   361cc:	bne	362c8 <flatcc_json_printer_int32_struct_field@@Base+0x12c>
   361d0:	ldr	r2, [r0, #20]
   361d4:	ldr	r3, [r0, #16]
   361d8:	cmp	r2, r3
   361dc:	bcs	362a4 <flatcc_json_printer_int32_struct_field@@Base+0x108>
   361e0:	mov	r3, #34	; 0x22
   361e4:	strb	r3, [r2]
   361e8:	ldrb	r3, [r4, #26]
   361ec:	ldr	r0, [r4, #20]
   361f0:	ldr	r2, [r4, #16]
   361f4:	cmp	r3, #0
   361f8:	addeq	r0, r0, #1
   361fc:	add	r3, r0, r6
   36200:	cmp	r2, r3
   36204:	str	r0, [r4, #20]
   36208:	mov	r2, r6
   3620c:	ldr	r1, [sp, #24]
   36210:	bhi	362b4 <flatcc_json_printer_int32_struct_field@@Base+0x118>
   36214:	mov	r0, r4
   36218:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   3621c:	ldr	r6, [r4, #20]
   36220:	mov	r3, #34	; 0x22
   36224:	strb	r3, [r6]
   36228:	ldr	r1, [r4, #20]
   3622c:	ldrb	r3, [r4, #26]
   36230:	clz	r3, r3
   36234:	lsr	r3, r3, #5
   36238:	add	r2, r1, r3
   3623c:	mov	r0, #58	; 0x3a
   36240:	add	r2, r2, #1
   36244:	str	r2, [r4, #20]
   36248:	strb	r0, [r1, r3]
   3624c:	ldr	r3, [r4, #20]
   36250:	mov	r2, #32
   36254:	lsr	r6, r5, #31
   36258:	strb	r2, [r3]
   3625c:	ldrb	r3, [r4, #25]
   36260:	ldr	r2, [r4, #20]
   36264:	adds	r3, r3, #0
   36268:	movne	r3, #1
   3626c:	cmp	r5, #0
   36270:	add	r1, r2, r3
   36274:	movlt	r0, #45	; 0x2d
   36278:	rsblt	r5, r5, #0
   3627c:	str	r1, [r4, #20]
   36280:	strblt	r0, [r2, r3]
   36284:	addlt	r1, r1, #1
   36288:	mov	r0, r5
   3628c:	bl	3037c <flatcc_json_parser_table_as_root@@Base+0x190>
   36290:	ldr	r3, [r4, #20]
   36294:	add	r0, r6, r0
   36298:	add	r3, r3, r0
   3629c:	str	r3, [r4, #20]
   362a0:	pop	{r4, r5, r6, r7, r8, pc}
   362a4:	ldr	r3, [r0, #44]	; 0x2c
   362a8:	blx	r3
   362ac:	ldr	r2, [r4, #20]
   362b0:	b	361e0 <flatcc_json_printer_int32_struct_field@@Base+0x44>
   362b4:	bl	14544 <memcpy@plt>
   362b8:	ldr	r3, [r4, #20]
   362bc:	add	r6, r3, r6
   362c0:	str	r6, [r4, #20]
   362c4:	b	36220 <flatcc_json_printer_int32_struct_field@@Base+0x84>
   362c8:	ldr	r3, [r0, #20]
   362cc:	mov	r2, #10
   362d0:	add	r1, r3, #1
   362d4:	str	r1, [r0, #20]
   362d8:	strb	r2, [r3]
   362dc:	ldrb	r7, [r0, #25]
   362e0:	ldr	r2, [r0, #32]
   362e4:	ldr	r0, [r0, #20]
   362e8:	ldr	r1, [r4, #16]
   362ec:	mul	r7, r2, r7
   362f0:	add	r3, r0, r7
   362f4:	cmp	r1, r3
   362f8:	bcc	36318 <flatcc_json_printer_int32_struct_field@@Base+0x17c>
   362fc:	mov	r2, r7
   36300:	mov	r1, #32
   36304:	bl	145bc <memset@plt>
   36308:	ldr	r2, [r4, #20]
   3630c:	add	r2, r2, r7
   36310:	str	r2, [r4, #20]
   36314:	b	361e0 <flatcc_json_printer_int32_struct_field@@Base+0x44>
   36318:	mov	r1, r7
   3631c:	mov	r0, r4
   36320:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   36324:	ldr	r2, [r4, #20]
   36328:	b	361e0 <flatcc_json_printer_int32_struct_field@@Base+0x44>

0003632c <flatcc_json_printer_int64_struct_field@@Base>:
   3632c:	cmp	r1, #0
   36330:	push	{r4, r5, r6, r7, r8, lr}
   36334:	mov	r4, r0
   36338:	ldrd	r6, [r2, r3]
   3633c:	ldrne	r3, [r0, #20]
   36340:	movne	r2, #44	; 0x2c
   36344:	addne	r1, r3, #1
   36348:	strne	r1, [r0, #20]
   3634c:	strbne	r2, [r3]
   36350:	ldrb	r1, [r0, #25]
   36354:	ldr	r5, [sp, #28]
   36358:	cmp	r1, #0
   3635c:	bne	36468 <flatcc_json_printer_int64_struct_field@@Base+0x13c>
   36360:	ldr	r2, [r0, #20]
   36364:	ldr	r3, [r0, #16]
   36368:	cmp	r2, r3
   3636c:	bcs	36444 <flatcc_json_printer_int64_struct_field@@Base+0x118>
   36370:	mov	r3, #34	; 0x22
   36374:	strb	r3, [r2]
   36378:	ldrb	r3, [r4, #26]
   3637c:	ldr	r0, [r4, #20]
   36380:	ldr	r2, [r4, #16]
   36384:	cmp	r3, #0
   36388:	addeq	r0, r0, #1
   3638c:	add	r3, r0, r5
   36390:	cmp	r2, r3
   36394:	str	r0, [r4, #20]
   36398:	mov	r2, r5
   3639c:	ldr	r1, [sp, #24]
   363a0:	bhi	36454 <flatcc_json_printer_int64_struct_field@@Base+0x128>
   363a4:	mov	r0, r4
   363a8:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   363ac:	ldr	r5, [r4, #20]
   363b0:	mov	r3, #34	; 0x22
   363b4:	strb	r3, [r5]
   363b8:	ldr	r1, [r4, #20]
   363bc:	ldrb	r3, [r4, #26]
   363c0:	clz	r3, r3
   363c4:	lsr	r3, r3, #5
   363c8:	add	r2, r1, r3
   363cc:	add	r2, r2, #1
   363d0:	mov	r0, #58	; 0x3a
   363d4:	str	r2, [r4, #20]
   363d8:	strb	r0, [r1, r3]
   363dc:	ldr	r3, [r4, #20]
   363e0:	mov	r2, #32
   363e4:	lsr	r5, r7, #31
   363e8:	strb	r2, [r3]
   363ec:	ldrb	r3, [r4, #25]
   363f0:	ldr	r1, [r4, #20]
   363f4:	adds	r3, r3, #0
   363f8:	movne	r3, #1
   363fc:	cmp	r6, #0
   36400:	add	r2, r1, r3
   36404:	sbcs	r0, r7, #0
   36408:	str	r2, [r4, #20]
   3640c:	bge	36424 <flatcc_json_printer_int64_struct_field@@Base+0xf8>
   36410:	rsbs	r6, r6, #0
   36414:	rsc	r7, r7, #0
   36418:	add	r2, r2, #1
   3641c:	mov	r0, #45	; 0x2d
   36420:	strb	r0, [r1, r3]
   36424:	mov	r0, r6
   36428:	mov	r1, r7
   3642c:	bl	306e8 <flatcc_json_parser_table_as_root@@Base+0x4fc>
   36430:	ldr	r3, [r4, #20]
   36434:	add	r0, r5, r0
   36438:	add	r3, r3, r0
   3643c:	str	r3, [r4, #20]
   36440:	pop	{r4, r5, r6, r7, r8, pc}
   36444:	ldr	r3, [r0, #44]	; 0x2c
   36448:	blx	r3
   3644c:	ldr	r2, [r4, #20]
   36450:	b	36370 <flatcc_json_printer_int64_struct_field@@Base+0x44>
   36454:	bl	14544 <memcpy@plt>
   36458:	ldr	r3, [r4, #20]
   3645c:	add	r5, r3, r5
   36460:	str	r5, [r4, #20]
   36464:	b	363b0 <flatcc_json_printer_int64_struct_field@@Base+0x84>
   36468:	ldr	r3, [r0, #20]
   3646c:	mov	r2, #10
   36470:	add	r1, r3, #1
   36474:	str	r1, [r0, #20]
   36478:	strb	r2, [r3]
   3647c:	ldrb	r8, [r0, #25]
   36480:	ldr	r2, [r0, #32]
   36484:	ldr	r0, [r0, #20]
   36488:	ldr	r1, [r4, #16]
   3648c:	mul	r8, r2, r8
   36490:	add	r3, r0, r8
   36494:	cmp	r1, r3
   36498:	bcc	364b8 <flatcc_json_printer_int64_struct_field@@Base+0x18c>
   3649c:	mov	r2, r8
   364a0:	mov	r1, #32
   364a4:	bl	145bc <memset@plt>
   364a8:	ldr	r2, [r4, #20]
   364ac:	add	r2, r2, r8
   364b0:	str	r2, [r4, #20]
   364b4:	b	36370 <flatcc_json_printer_int64_struct_field@@Base+0x44>
   364b8:	mov	r1, r8
   364bc:	mov	r0, r4
   364c0:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   364c4:	ldr	r2, [r4, #20]
   364c8:	b	36370 <flatcc_json_printer_int64_struct_field@@Base+0x44>

000364cc <flatcc_json_printer_bool_struct_field@@Base>:
   364cc:	cmp	r1, #0
   364d0:	push	{r4, r5, r6, r7, r8, lr}
   364d4:	mov	r4, r0
   364d8:	ldrb	r5, [r2, r3]
   364dc:	ldrne	r3, [r0, #20]
   364e0:	movne	r2, #44	; 0x2c
   364e4:	addne	r1, r3, #1
   364e8:	strne	r1, [r0, #20]
   364ec:	strbne	r2, [r3]
   364f0:	ldrb	r1, [r0, #25]
   364f4:	ldr	r6, [sp, #28]
   364f8:	cmp	r1, #0
   364fc:	bne	365d8 <flatcc_json_printer_bool_struct_field@@Base+0x10c>
   36500:	ldr	r2, [r0, #20]
   36504:	ldr	r3, [r0, #16]
   36508:	cmp	r2, r3
   3650c:	bcs	365b4 <flatcc_json_printer_bool_struct_field@@Base+0xe8>
   36510:	mov	r3, #34	; 0x22
   36514:	strb	r3, [r2]
   36518:	ldrb	r3, [r4, #26]
   3651c:	ldr	r0, [r4, #20]
   36520:	ldr	r2, [r4, #16]
   36524:	cmp	r3, #0
   36528:	addeq	r0, r0, #1
   3652c:	add	r3, r0, r6
   36530:	cmp	r2, r3
   36534:	str	r0, [r4, #20]
   36538:	mov	r2, r6
   3653c:	ldr	r1, [sp, #24]
   36540:	bhi	365c4 <flatcc_json_printer_bool_struct_field@@Base+0xf8>
   36544:	mov	r0, r4
   36548:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   3654c:	ldr	r6, [r4, #20]
   36550:	mov	r3, #34	; 0x22
   36554:	strb	r3, [r6]
   36558:	ldr	r1, [r4, #20]
   3655c:	ldrb	r3, [r4, #26]
   36560:	clz	r3, r3
   36564:	lsr	r3, r3, #5
   36568:	add	r2, r1, r3
   3656c:	add	r2, r2, #1
   36570:	mov	r0, #58	; 0x3a
   36574:	str	r2, [r4, #20]
   36578:	strb	r0, [r1, r3]
   3657c:	ldr	r3, [r4, #20]
   36580:	mov	r2, #32
   36584:	mov	r0, r5
   36588:	strb	r2, [r3]
   3658c:	ldrb	r3, [r4, #25]
   36590:	ldr	r1, [r4, #20]
   36594:	cmp	r3, #0
   36598:	addne	r1, r1, #1
   3659c:	str	r1, [r4, #20]
   365a0:	bl	31434 <flatcc_json_parser_table_as_root@@Base+0x1248>
   365a4:	ldr	r3, [r4, #20]
   365a8:	add	r0, r3, r0
   365ac:	str	r0, [r4, #20]
   365b0:	pop	{r4, r5, r6, r7, r8, pc}
   365b4:	ldr	r3, [r0, #44]	; 0x2c
   365b8:	blx	r3
   365bc:	ldr	r2, [r4, #20]
   365c0:	b	36510 <flatcc_json_printer_bool_struct_field@@Base+0x44>
   365c4:	bl	14544 <memcpy@plt>
   365c8:	ldr	r3, [r4, #20]
   365cc:	add	r6, r3, r6
   365d0:	str	r6, [r4, #20]
   365d4:	b	36550 <flatcc_json_printer_bool_struct_field@@Base+0x84>
   365d8:	ldr	r3, [r0, #20]
   365dc:	mov	r2, #10
   365e0:	add	r1, r3, #1
   365e4:	str	r1, [r0, #20]
   365e8:	strb	r2, [r3]
   365ec:	ldrb	r7, [r0, #25]
   365f0:	ldr	r2, [r0, #32]
   365f4:	ldr	r0, [r0, #20]
   365f8:	ldr	r1, [r4, #16]
   365fc:	mul	r7, r2, r7
   36600:	add	r3, r0, r7
   36604:	cmp	r1, r3
   36608:	bcc	36628 <flatcc_json_printer_bool_struct_field@@Base+0x15c>
   3660c:	mov	r2, r7
   36610:	mov	r1, #32
   36614:	bl	145bc <memset@plt>
   36618:	ldr	r2, [r4, #20]
   3661c:	add	r2, r2, r7
   36620:	str	r2, [r4, #20]
   36624:	b	36510 <flatcc_json_printer_bool_struct_field@@Base+0x44>
   36628:	mov	r1, r7
   3662c:	mov	r0, r4
   36630:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   36634:	ldr	r2, [r4, #20]
   36638:	b	36510 <flatcc_json_printer_bool_struct_field@@Base+0x44>

0003663c <flatcc_json_printer_float_struct_field@@Base>:
   3663c:	cmp	r1, #0
   36640:	add	r3, r2, r3
   36644:	push	{r4, r5, r6, lr}
   36648:	vpush	{d8}
   3664c:	vldr	s16, [r3]
   36650:	ldrne	r3, [r0, #20]
   36654:	movne	r2, #44	; 0x2c
   36658:	addne	r1, r3, #1
   3665c:	strne	r1, [r0, #20]
   36660:	strbne	r2, [r3]
   36664:	ldrb	r1, [r0, #25]
   36668:	mov	r4, r0
   3666c:	ldr	r5, [sp, #28]
   36670:	cmp	r1, #0
   36674:	bne	36754 <flatcc_json_printer_float_struct_field@@Base+0x118>
   36678:	ldr	r2, [r0, #20]
   3667c:	ldr	r3, [r0, #16]
   36680:	cmp	r2, r3
   36684:	bcs	36730 <flatcc_json_printer_float_struct_field@@Base+0xf4>
   36688:	mov	r3, #34	; 0x22
   3668c:	strb	r3, [r2]
   36690:	ldrb	r3, [r4, #26]
   36694:	ldr	r0, [r4, #20]
   36698:	ldr	r2, [r4, #16]
   3669c:	cmp	r3, #0
   366a0:	addeq	r0, r0, #1
   366a4:	add	r3, r0, r5
   366a8:	cmp	r2, r3
   366ac:	str	r0, [r4, #20]
   366b0:	mov	r2, r5
   366b4:	ldr	r1, [sp, #24]
   366b8:	bhi	36740 <flatcc_json_printer_float_struct_field@@Base+0x104>
   366bc:	mov	r0, r4
   366c0:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   366c4:	ldr	r5, [r4, #20]
   366c8:	mov	r3, #34	; 0x22
   366cc:	strb	r3, [r5]
   366d0:	ldr	r1, [r4, #20]
   366d4:	ldrb	r3, [r4, #26]
   366d8:	clz	r3, r3
   366dc:	lsr	r3, r3, #5
   366e0:	add	r2, r1, r3
   366e4:	add	r2, r2, #1
   366e8:	mov	r0, #58	; 0x3a
   366ec:	str	r2, [r4, #20]
   366f0:	strb	r0, [r1, r3]
   366f4:	ldr	r3, [r4, #20]
   366f8:	mov	r2, #32
   366fc:	vcvt.f64.f32	d0, s16
   36700:	strb	r2, [r3]
   36704:	ldrb	r3, [r4, #25]
   36708:	ldr	r0, [r4, #20]
   3670c:	cmp	r3, #0
   36710:	addne	r0, r0, #1
   36714:	str	r0, [r4, #20]
   36718:	bl	31700 <flatcc_json_parser_table_as_root@@Base+0x1514>
   3671c:	vpop	{d8}
   36720:	ldr	r3, [r4, #20]
   36724:	add	r0, r3, r0
   36728:	str	r0, [r4, #20]
   3672c:	pop	{r4, r5, r6, pc}
   36730:	ldr	r3, [r0, #44]	; 0x2c
   36734:	blx	r3
   36738:	ldr	r2, [r4, #20]
   3673c:	b	36688 <flatcc_json_printer_float_struct_field@@Base+0x4c>
   36740:	bl	14544 <memcpy@plt>
   36744:	ldr	r3, [r4, #20]
   36748:	add	r5, r3, r5
   3674c:	str	r5, [r4, #20]
   36750:	b	366c8 <flatcc_json_printer_float_struct_field@@Base+0x8c>
   36754:	ldr	r3, [r0, #20]
   36758:	mov	r2, #10
   3675c:	add	r1, r3, #1
   36760:	str	r1, [r0, #20]
   36764:	strb	r2, [r3]
   36768:	ldrb	r6, [r0, #25]
   3676c:	ldr	r2, [r0, #32]
   36770:	ldr	r0, [r0, #20]
   36774:	ldr	r1, [r4, #16]
   36778:	mul	r6, r2, r6
   3677c:	add	r3, r0, r6
   36780:	cmp	r1, r3
   36784:	bcc	367a4 <flatcc_json_printer_float_struct_field@@Base+0x168>
   36788:	mov	r2, r6
   3678c:	mov	r1, #32
   36790:	bl	145bc <memset@plt>
   36794:	ldr	r2, [r4, #20]
   36798:	add	r2, r2, r6
   3679c:	str	r2, [r4, #20]
   367a0:	b	36688 <flatcc_json_printer_float_struct_field@@Base+0x4c>
   367a4:	mov	r1, r6
   367a8:	mov	r0, r4
   367ac:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   367b0:	ldr	r2, [r4, #20]
   367b4:	b	36688 <flatcc_json_printer_float_struct_field@@Base+0x4c>

000367b8 <flatcc_json_printer_double_struct_field@@Base>:
   367b8:	cmp	r1, #0
   367bc:	add	r3, r2, r3
   367c0:	push	{r4, r5, r6, lr}
   367c4:	vpush	{d8}
   367c8:	vldr	d8, [r3]
   367cc:	ldrne	r3, [r0, #20]
   367d0:	movne	r2, #44	; 0x2c
   367d4:	addne	r1, r3, #1
   367d8:	strne	r1, [r0, #20]
   367dc:	strbne	r2, [r3]
   367e0:	ldrb	r1, [r0, #25]
   367e4:	mov	r4, r0
   367e8:	ldr	r5, [sp, #28]
   367ec:	cmp	r1, #0
   367f0:	bne	368d0 <flatcc_json_printer_double_struct_field@@Base+0x118>
   367f4:	ldr	r2, [r0, #20]
   367f8:	ldr	r3, [r0, #16]
   367fc:	cmp	r2, r3
   36800:	bcs	368ac <flatcc_json_printer_double_struct_field@@Base+0xf4>
   36804:	mov	r3, #34	; 0x22
   36808:	strb	r3, [r2]
   3680c:	ldrb	r3, [r4, #26]
   36810:	ldr	r0, [r4, #20]
   36814:	ldr	r2, [r4, #16]
   36818:	cmp	r3, #0
   3681c:	addeq	r0, r0, #1
   36820:	add	r3, r0, r5
   36824:	cmp	r2, r3
   36828:	str	r0, [r4, #20]
   3682c:	mov	r2, r5
   36830:	ldr	r1, [sp, #24]
   36834:	bhi	368bc <flatcc_json_printer_double_struct_field@@Base+0x104>
   36838:	mov	r0, r4
   3683c:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   36840:	ldr	r5, [r4, #20]
   36844:	mov	r3, #34	; 0x22
   36848:	strb	r3, [r5]
   3684c:	ldr	r1, [r4, #20]
   36850:	ldrb	r3, [r4, #26]
   36854:	clz	r3, r3
   36858:	lsr	r3, r3, #5
   3685c:	add	r2, r1, r3
   36860:	add	r2, r2, #1
   36864:	mov	r0, #58	; 0x3a
   36868:	str	r2, [r4, #20]
   3686c:	strb	r0, [r1, r3]
   36870:	ldr	r3, [r4, #20]
   36874:	mov	r2, #32
   36878:	vmov.f64	d0, d8
   3687c:	strb	r2, [r3]
   36880:	ldrb	r3, [r4, #25]
   36884:	ldr	r0, [r4, #20]
   36888:	cmp	r3, #0
   3688c:	addne	r0, r0, #1
   36890:	str	r0, [r4, #20]
   36894:	bl	31700 <flatcc_json_parser_table_as_root@@Base+0x1514>
   36898:	vpop	{d8}
   3689c:	ldr	r3, [r4, #20]
   368a0:	add	r0, r3, r0
   368a4:	str	r0, [r4, #20]
   368a8:	pop	{r4, r5, r6, pc}
   368ac:	ldr	r3, [r0, #44]	; 0x2c
   368b0:	blx	r3
   368b4:	ldr	r2, [r4, #20]
   368b8:	b	36804 <flatcc_json_printer_double_struct_field@@Base+0x4c>
   368bc:	bl	14544 <memcpy@plt>
   368c0:	ldr	r3, [r4, #20]
   368c4:	add	r5, r3, r5
   368c8:	str	r5, [r4, #20]
   368cc:	b	36844 <flatcc_json_printer_double_struct_field@@Base+0x8c>
   368d0:	ldr	r3, [r0, #20]
   368d4:	mov	r2, #10
   368d8:	add	r1, r3, #1
   368dc:	str	r1, [r0, #20]
   368e0:	strb	r2, [r3]
   368e4:	ldrb	r6, [r0, #25]
   368e8:	ldr	r2, [r0, #32]
   368ec:	ldr	r0, [r0, #20]
   368f0:	ldr	r1, [r4, #16]
   368f4:	mul	r6, r2, r6
   368f8:	add	r3, r0, r6
   368fc:	cmp	r1, r3
   36900:	bcc	36920 <flatcc_json_printer_double_struct_field@@Base+0x168>
   36904:	mov	r2, r6
   36908:	mov	r1, #32
   3690c:	bl	145bc <memset@plt>
   36910:	ldr	r2, [r4, #20]
   36914:	add	r2, r2, r6
   36918:	str	r2, [r4, #20]
   3691c:	b	36804 <flatcc_json_printer_double_struct_field@@Base+0x4c>
   36920:	mov	r1, r6
   36924:	mov	r0, r4
   36928:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3692c:	ldr	r2, [r4, #20]
   36930:	b	36804 <flatcc_json_printer_double_struct_field@@Base+0x4c>

00036934 <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   36934:	cmp	r1, #0
   36938:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3693c:	mov	r4, r0
   36940:	ldrb	r5, [r2, r3]
   36944:	ldrne	r3, [r0, #20]
   36948:	movne	r2, #44	; 0x2c
   3694c:	addne	r1, r3, #1
   36950:	strne	r1, [r0, #20]
   36954:	strbne	r2, [r3]
   36958:	ldrb	r1, [r0, #25]
   3695c:	ldr	r8, [sp, #32]
   36960:	ldr	r7, [sp, #36]	; 0x24
   36964:	cmp	r1, #0
   36968:	ldr	r6, [sp, #40]	; 0x28
   3696c:	bne	36a70 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x13c>
   36970:	ldr	r2, [r0, #20]
   36974:	ldr	r3, [r0, #16]
   36978:	cmp	r2, r3
   3697c:	bcs	36a2c <flatcc_json_printer_uint8_enum_struct_field@@Base+0xf8>
   36980:	mov	r3, #34	; 0x22
   36984:	strb	r3, [r2]
   36988:	ldrb	r3, [r4, #26]
   3698c:	ldr	r0, [r4, #20]
   36990:	ldr	r2, [r4, #16]
   36994:	cmp	r3, #0
   36998:	addeq	r0, r0, #1
   3699c:	add	r3, r0, r7
   369a0:	cmp	r2, r3
   369a4:	str	r0, [r4, #20]
   369a8:	bhi	36a54 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x120>
   369ac:	mov	r2, r7
   369b0:	mov	r1, r8
   369b4:	mov	r0, r4
   369b8:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   369bc:	ldr	r7, [r4, #20]
   369c0:	mov	r3, #34	; 0x22
   369c4:	strb	r3, [r7]
   369c8:	ldr	r1, [r4, #20]
   369cc:	ldrb	r3, [r4, #26]
   369d0:	clz	r3, r3
   369d4:	lsr	r3, r3, #5
   369d8:	add	r2, r1, r3
   369dc:	add	r2, r2, #1
   369e0:	mov	r0, #58	; 0x3a
   369e4:	str	r2, [r4, #20]
   369e8:	strb	r0, [r1, r3]
   369ec:	ldr	r3, [r4, #20]
   369f0:	mov	r2, #32
   369f4:	strb	r2, [r3]
   369f8:	ldrb	r2, [r4, #25]
   369fc:	ldrb	r3, [r4, #27]
   36a00:	ldr	r1, [r4, #20]
   36a04:	cmp	r2, #0
   36a08:	addne	r1, r1, #1
   36a0c:	cmp	r3, #0
   36a10:	str	r1, [r4, #20]
   36a14:	bne	36a3c <flatcc_json_printer_uint8_enum_struct_field@@Base+0x108>
   36a18:	mov	r1, r5
   36a1c:	mov	r0, r4
   36a20:	mov	r3, r6
   36a24:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   36a28:	bx	r3
   36a2c:	ldr	r3, [r0, #44]	; 0x2c
   36a30:	blx	r3
   36a34:	ldr	r2, [r4, #20]
   36a38:	b	36980 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x4c>
   36a3c:	mov	r0, r5
   36a40:	bl	31344 <flatcc_json_parser_table_as_root@@Base+0x1158>
   36a44:	ldr	r3, [r4, #20]
   36a48:	add	r0, r3, r0
   36a4c:	str	r0, [r4, #20]
   36a50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36a54:	mov	r2, r7
   36a58:	mov	r1, r8
   36a5c:	bl	14544 <memcpy@plt>
   36a60:	ldr	r3, [r4, #20]
   36a64:	add	r7, r3, r7
   36a68:	str	r7, [r4, #20]
   36a6c:	b	369c0 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x8c>
   36a70:	ldr	r3, [r0, #20]
   36a74:	mov	r2, #10
   36a78:	add	r1, r3, #1
   36a7c:	str	r1, [r0, #20]
   36a80:	strb	r2, [r3]
   36a84:	ldrb	r3, [r0, #25]
   36a88:	ldr	r2, [r0, #32]
   36a8c:	ldr	r0, [r0, #20]
   36a90:	ldr	r1, [r4, #16]
   36a94:	mul	r9, r2, r3
   36a98:	add	r3, r0, r9
   36a9c:	cmp	r1, r3
   36aa0:	bcc	36ac0 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x18c>
   36aa4:	mov	r2, r9
   36aa8:	mov	r1, #32
   36aac:	bl	145bc <memset@plt>
   36ab0:	ldr	r2, [r4, #20]
   36ab4:	add	r2, r2, r9
   36ab8:	str	r2, [r4, #20]
   36abc:	b	36980 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x4c>
   36ac0:	mov	r1, r9
   36ac4:	mov	r0, r4
   36ac8:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   36acc:	ldr	r2, [r4, #20]
   36ad0:	b	36980 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x4c>

00036ad4 <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   36ad4:	cmp	r1, #0
   36ad8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36adc:	mov	r4, r0
   36ae0:	ldrh	r5, [r2, r3]
   36ae4:	ldrne	r3, [r0, #20]
   36ae8:	movne	r2, #44	; 0x2c
   36aec:	addne	r1, r3, #1
   36af0:	strne	r1, [r0, #20]
   36af4:	strbne	r2, [r3]
   36af8:	ldrb	r1, [r0, #25]
   36afc:	ldr	r8, [sp, #32]
   36b00:	ldr	r7, [sp, #36]	; 0x24
   36b04:	cmp	r1, #0
   36b08:	ldr	r6, [sp, #40]	; 0x28
   36b0c:	bne	36c10 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x13c>
   36b10:	ldr	r2, [r0, #20]
   36b14:	ldr	r3, [r0, #16]
   36b18:	cmp	r2, r3
   36b1c:	bcs	36bcc <flatcc_json_printer_uint16_enum_struct_field@@Base+0xf8>
   36b20:	mov	r3, #34	; 0x22
   36b24:	strb	r3, [r2]
   36b28:	ldrb	r3, [r4, #26]
   36b2c:	ldr	r0, [r4, #20]
   36b30:	ldr	r2, [r4, #16]
   36b34:	cmp	r3, #0
   36b38:	addeq	r0, r0, #1
   36b3c:	add	r3, r0, r7
   36b40:	cmp	r2, r3
   36b44:	str	r0, [r4, #20]
   36b48:	bhi	36bf4 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x120>
   36b4c:	mov	r2, r7
   36b50:	mov	r1, r8
   36b54:	mov	r0, r4
   36b58:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   36b5c:	ldr	r7, [r4, #20]
   36b60:	mov	r3, #34	; 0x22
   36b64:	strb	r3, [r7]
   36b68:	ldr	r1, [r4, #20]
   36b6c:	ldrb	r3, [r4, #26]
   36b70:	clz	r3, r3
   36b74:	lsr	r3, r3, #5
   36b78:	add	r2, r1, r3
   36b7c:	add	r2, r2, #1
   36b80:	mov	r0, #58	; 0x3a
   36b84:	str	r2, [r4, #20]
   36b88:	strb	r0, [r1, r3]
   36b8c:	ldr	r3, [r4, #20]
   36b90:	mov	r2, #32
   36b94:	strb	r2, [r3]
   36b98:	ldrb	r2, [r4, #25]
   36b9c:	ldrb	r3, [r4, #27]
   36ba0:	ldr	r1, [r4, #20]
   36ba4:	cmp	r2, #0
   36ba8:	addne	r1, r1, #1
   36bac:	cmp	r3, #0
   36bb0:	str	r1, [r4, #20]
   36bb4:	bne	36bdc <flatcc_json_printer_uint16_enum_struct_field@@Base+0x108>
   36bb8:	mov	r1, r5
   36bbc:	mov	r0, r4
   36bc0:	mov	r3, r6
   36bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   36bc8:	bx	r3
   36bcc:	ldr	r3, [r0, #44]	; 0x2c
   36bd0:	blx	r3
   36bd4:	ldr	r2, [r4, #20]
   36bd8:	b	36b20 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x4c>
   36bdc:	mov	r0, r5
   36be0:	bl	301f8 <flatcc_json_parser_table_as_root@@Base+0xc>
   36be4:	ldr	r3, [r4, #20]
   36be8:	add	r0, r3, r0
   36bec:	str	r0, [r4, #20]
   36bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36bf4:	mov	r2, r7
   36bf8:	mov	r1, r8
   36bfc:	bl	14544 <memcpy@plt>
   36c00:	ldr	r3, [r4, #20]
   36c04:	add	r7, r3, r7
   36c08:	str	r7, [r4, #20]
   36c0c:	b	36b60 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x8c>
   36c10:	ldr	r3, [r0, #20]
   36c14:	mov	r2, #10
   36c18:	add	r1, r3, #1
   36c1c:	str	r1, [r0, #20]
   36c20:	strb	r2, [r3]
   36c24:	ldrb	r3, [r0, #25]
   36c28:	ldr	r2, [r0, #32]
   36c2c:	ldr	r0, [r0, #20]
   36c30:	ldr	r1, [r4, #16]
   36c34:	mul	r9, r2, r3
   36c38:	add	r3, r0, r9
   36c3c:	cmp	r1, r3
   36c40:	bcc	36c60 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x18c>
   36c44:	mov	r2, r9
   36c48:	mov	r1, #32
   36c4c:	bl	145bc <memset@plt>
   36c50:	ldr	r2, [r4, #20]
   36c54:	add	r2, r2, r9
   36c58:	str	r2, [r4, #20]
   36c5c:	b	36b20 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x4c>
   36c60:	mov	r1, r9
   36c64:	mov	r0, r4
   36c68:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   36c6c:	ldr	r2, [r4, #20]
   36c70:	b	36b20 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x4c>

00036c74 <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   36c74:	cmp	r1, #0
   36c78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36c7c:	mov	r4, r0
   36c80:	ldr	r5, [r2, r3]
   36c84:	ldrne	r3, [r0, #20]
   36c88:	movne	r2, #44	; 0x2c
   36c8c:	addne	r1, r3, #1
   36c90:	strne	r1, [r0, #20]
   36c94:	strbne	r2, [r3]
   36c98:	ldrb	r1, [r0, #25]
   36c9c:	ldr	r8, [sp, #32]
   36ca0:	ldr	r7, [sp, #36]	; 0x24
   36ca4:	cmp	r1, #0
   36ca8:	ldr	r6, [sp, #40]	; 0x28
   36cac:	bne	36db0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x13c>
   36cb0:	ldr	r2, [r0, #20]
   36cb4:	ldr	r3, [r0, #16]
   36cb8:	cmp	r2, r3
   36cbc:	bcs	36d6c <flatcc_json_printer_uint32_enum_struct_field@@Base+0xf8>
   36cc0:	mov	r3, #34	; 0x22
   36cc4:	strb	r3, [r2]
   36cc8:	ldrb	r3, [r4, #26]
   36ccc:	ldr	r0, [r4, #20]
   36cd0:	ldr	r2, [r4, #16]
   36cd4:	cmp	r3, #0
   36cd8:	addeq	r0, r0, #1
   36cdc:	add	r3, r0, r7
   36ce0:	cmp	r2, r3
   36ce4:	str	r0, [r4, #20]
   36ce8:	bhi	36d94 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x120>
   36cec:	mov	r2, r7
   36cf0:	mov	r1, r8
   36cf4:	mov	r0, r4
   36cf8:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   36cfc:	ldr	r7, [r4, #20]
   36d00:	mov	r3, #34	; 0x22
   36d04:	strb	r3, [r7]
   36d08:	ldr	r1, [r4, #20]
   36d0c:	ldrb	r3, [r4, #26]
   36d10:	clz	r3, r3
   36d14:	lsr	r3, r3, #5
   36d18:	add	r2, r1, r3
   36d1c:	add	r2, r2, #1
   36d20:	mov	r0, #58	; 0x3a
   36d24:	str	r2, [r4, #20]
   36d28:	strb	r0, [r1, r3]
   36d2c:	ldr	r3, [r4, #20]
   36d30:	mov	r2, #32
   36d34:	strb	r2, [r3]
   36d38:	ldrb	r2, [r4, #25]
   36d3c:	ldrb	r3, [r4, #27]
   36d40:	ldr	r1, [r4, #20]
   36d44:	cmp	r2, #0
   36d48:	addne	r1, r1, #1
   36d4c:	cmp	r3, #0
   36d50:	str	r1, [r4, #20]
   36d54:	bne	36d7c <flatcc_json_printer_uint32_enum_struct_field@@Base+0x108>
   36d58:	mov	r1, r5
   36d5c:	mov	r0, r4
   36d60:	mov	r3, r6
   36d64:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   36d68:	bx	r3
   36d6c:	ldr	r3, [r0, #44]	; 0x2c
   36d70:	blx	r3
   36d74:	ldr	r2, [r4, #20]
   36d78:	b	36cc0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x4c>
   36d7c:	mov	r0, r5
   36d80:	bl	3037c <flatcc_json_parser_table_as_root@@Base+0x190>
   36d84:	ldr	r3, [r4, #20]
   36d88:	add	r0, r3, r0
   36d8c:	str	r0, [r4, #20]
   36d90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36d94:	mov	r2, r7
   36d98:	mov	r1, r8
   36d9c:	bl	14544 <memcpy@plt>
   36da0:	ldr	r3, [r4, #20]
   36da4:	add	r7, r3, r7
   36da8:	str	r7, [r4, #20]
   36dac:	b	36d00 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x8c>
   36db0:	ldr	r3, [r0, #20]
   36db4:	mov	r2, #10
   36db8:	add	r1, r3, #1
   36dbc:	str	r1, [r0, #20]
   36dc0:	strb	r2, [r3]
   36dc4:	ldrb	r3, [r0, #25]
   36dc8:	ldr	r2, [r0, #32]
   36dcc:	ldr	r0, [r0, #20]
   36dd0:	ldr	r1, [r4, #16]
   36dd4:	mul	r9, r2, r3
   36dd8:	add	r3, r0, r9
   36ddc:	cmp	r1, r3
   36de0:	bcc	36e00 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x18c>
   36de4:	mov	r2, r9
   36de8:	mov	r1, #32
   36dec:	bl	145bc <memset@plt>
   36df0:	ldr	r2, [r4, #20]
   36df4:	add	r2, r2, r9
   36df8:	str	r2, [r4, #20]
   36dfc:	b	36cc0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x4c>
   36e00:	mov	r1, r9
   36e04:	mov	r0, r4
   36e08:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   36e0c:	ldr	r2, [r4, #20]
   36e10:	b	36cc0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x4c>

00036e14 <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   36e14:	cmp	r1, #0
   36e18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36e1c:	mov	r4, r0
   36e20:	ldrd	r6, [r2, r3]
   36e24:	ldrne	r3, [r0, #20]
   36e28:	movne	r2, #44	; 0x2c
   36e2c:	addne	r1, r3, #1
   36e30:	strne	r1, [r0, #20]
   36e34:	strbne	r2, [r3]
   36e38:	ldrb	r1, [r0, #25]
   36e3c:	ldr	r9, [sp, #32]
   36e40:	ldr	r8, [sp, #36]	; 0x24
   36e44:	cmp	r1, #0
   36e48:	ldr	r5, [sp, #40]	; 0x28
   36e4c:	bne	36f58 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x144>
   36e50:	ldr	r2, [r0, #20]
   36e54:	ldr	r3, [r0, #16]
   36e58:	cmp	r2, r3
   36e5c:	bcs	36f10 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xfc>
   36e60:	mov	r3, #34	; 0x22
   36e64:	strb	r3, [r2]
   36e68:	ldrb	r3, [r4, #26]
   36e6c:	ldr	r0, [r4, #20]
   36e70:	ldr	r2, [r4, #16]
   36e74:	cmp	r3, #0
   36e78:	addeq	r0, r0, #1
   36e7c:	add	r3, r0, r8
   36e80:	cmp	r2, r3
   36e84:	str	r0, [r4, #20]
   36e88:	bhi	36f3c <flatcc_json_printer_uint64_enum_struct_field@@Base+0x128>
   36e8c:	mov	r2, r8
   36e90:	mov	r1, r9
   36e94:	mov	r0, r4
   36e98:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   36e9c:	ldr	r8, [r4, #20]
   36ea0:	mov	r3, #34	; 0x22
   36ea4:	strb	r3, [r8]
   36ea8:	ldr	r1, [r4, #20]
   36eac:	ldrb	r3, [r4, #26]
   36eb0:	clz	r3, r3
   36eb4:	lsr	r3, r3, #5
   36eb8:	add	r2, r1, r3
   36ebc:	add	r2, r2, #1
   36ec0:	mov	r0, #58	; 0x3a
   36ec4:	str	r2, [r4, #20]
   36ec8:	strb	r0, [r1, r3]
   36ecc:	ldr	r3, [r4, #20]
   36ed0:	mov	r2, #32
   36ed4:	strb	r2, [r3]
   36ed8:	ldrb	r1, [r4, #25]
   36edc:	ldrb	r3, [r4, #27]
   36ee0:	ldr	r2, [r4, #20]
   36ee4:	cmp	r1, #0
   36ee8:	addne	r2, r2, #1
   36eec:	cmp	r3, #0
   36ef0:	str	r2, [r4, #20]
   36ef4:	bne	36f20 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x10c>
   36ef8:	mov	r2, r6
   36efc:	mov	r3, r7
   36f00:	mov	r0, r4
   36f04:	mov	r1, r5
   36f08:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   36f0c:	bx	r1
   36f10:	ldr	r3, [r0, #44]	; 0x2c
   36f14:	blx	r3
   36f18:	ldr	r2, [r4, #20]
   36f1c:	b	36e60 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x4c>
   36f20:	mov	r0, r6
   36f24:	mov	r1, r7
   36f28:	bl	306e8 <flatcc_json_parser_table_as_root@@Base+0x4fc>
   36f2c:	ldr	r3, [r4, #20]
   36f30:	add	r0, r3, r0
   36f34:	str	r0, [r4, #20]
   36f38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36f3c:	mov	r2, r8
   36f40:	mov	r1, r9
   36f44:	bl	14544 <memcpy@plt>
   36f48:	ldr	r3, [r4, #20]
   36f4c:	add	r8, r3, r8
   36f50:	str	r8, [r4, #20]
   36f54:	b	36ea0 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x8c>
   36f58:	ldr	r3, [r0, #20]
   36f5c:	mov	r2, #10
   36f60:	add	r1, r3, #1
   36f64:	str	r1, [r0, #20]
   36f68:	strb	r2, [r3]
   36f6c:	ldrb	r3, [r0, #25]
   36f70:	ldr	r2, [r0, #32]
   36f74:	ldr	r0, [r0, #20]
   36f78:	ldr	r1, [r4, #16]
   36f7c:	mul	sl, r2, r3
   36f80:	add	r3, r0, sl
   36f84:	cmp	r1, r3
   36f88:	bcc	36fa8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x194>
   36f8c:	mov	r2, sl
   36f90:	mov	r1, #32
   36f94:	bl	145bc <memset@plt>
   36f98:	ldr	r2, [r4, #20]
   36f9c:	add	r2, r2, sl
   36fa0:	str	r2, [r4, #20]
   36fa4:	b	36e60 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x4c>
   36fa8:	mov	r1, sl
   36fac:	mov	r0, r4
   36fb0:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   36fb4:	ldr	r2, [r4, #20]
   36fb8:	b	36e60 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x4c>

00036fbc <flatcc_json_printer_int8_enum_struct_field@@Base>:
   36fbc:	cmp	r1, #0
   36fc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36fc4:	mov	r4, r0
   36fc8:	ldrsb	r5, [r2, r3]
   36fcc:	ldrne	r3, [r0, #20]
   36fd0:	movne	r2, #44	; 0x2c
   36fd4:	addne	r1, r3, #1
   36fd8:	strne	r1, [r0, #20]
   36fdc:	strbne	r2, [r3]
   36fe0:	ldrb	r1, [r0, #25]
   36fe4:	ldr	r8, [sp, #32]
   36fe8:	ldr	r7, [sp, #36]	; 0x24
   36fec:	cmp	r1, #0
   36ff0:	ldr	r6, [sp, #40]	; 0x28
   36ff4:	bne	3711c <flatcc_json_printer_int8_enum_struct_field@@Base+0x160>
   36ff8:	ldr	r2, [r0, #20]
   36ffc:	ldr	r3, [r0, #16]
   37000:	cmp	r2, r3
   37004:	bcs	370dc <flatcc_json_printer_int8_enum_struct_field@@Base+0x120>
   37008:	mov	r3, #34	; 0x22
   3700c:	strb	r3, [r2]
   37010:	ldrb	r3, [r4, #26]
   37014:	ldr	r0, [r4, #20]
   37018:	ldr	r2, [r4, #16]
   3701c:	cmp	r3, #0
   37020:	addeq	r0, r0, #1
   37024:	add	r3, r0, r7
   37028:	cmp	r2, r3
   3702c:	str	r0, [r4, #20]
   37030:	bhi	370ec <flatcc_json_printer_int8_enum_struct_field@@Base+0x130>
   37034:	mov	r2, r7
   37038:	mov	r1, r8
   3703c:	mov	r0, r4
   37040:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   37044:	ldr	r7, [r4, #20]
   37048:	mov	r3, #34	; 0x22
   3704c:	strb	r3, [r7]
   37050:	ldr	r1, [r4, #20]
   37054:	ldrb	r3, [r4, #26]
   37058:	clz	r3, r3
   3705c:	lsr	r3, r3, #5
   37060:	add	r2, r1, r3
   37064:	add	r2, r2, #1
   37068:	mov	r0, #58	; 0x3a
   3706c:	str	r2, [r4, #20]
   37070:	strb	r0, [r1, r3]
   37074:	ldr	r3, [r4, #20]
   37078:	mov	r2, #32
   3707c:	strb	r2, [r3]
   37080:	ldrb	r3, [r4, #25]
   37084:	ldrb	r0, [r4, #27]
   37088:	ldr	r2, [r4, #20]
   3708c:	adds	r3, r3, #0
   37090:	movne	r3, #1
   37094:	add	r1, r2, r3
   37098:	cmp	r0, #0
   3709c:	str	r1, [r4, #20]
   370a0:	beq	37108 <flatcc_json_printer_int8_enum_struct_field@@Base+0x14c>
   370a4:	cmp	r5, #0
   370a8:	lsr	r6, r5, #31
   370ac:	rsblt	r5, r5, #0
   370b0:	movlt	r0, #45	; 0x2d
   370b4:	sxtblt	r5, r5
   370b8:	strblt	r0, [r2, r3]
   370bc:	addlt	r1, r1, #1
   370c0:	uxtb	r0, r5
   370c4:	bl	31344 <flatcc_json_parser_table_as_root@@Base+0x1158>
   370c8:	ldr	r3, [r4, #20]
   370cc:	add	r0, r6, r0
   370d0:	add	r3, r3, r0
   370d4:	str	r3, [r4, #20]
   370d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   370dc:	ldr	r3, [r0, #44]	; 0x2c
   370e0:	blx	r3
   370e4:	ldr	r2, [r4, #20]
   370e8:	b	37008 <flatcc_json_printer_int8_enum_struct_field@@Base+0x4c>
   370ec:	mov	r2, r7
   370f0:	mov	r1, r8
   370f4:	bl	14544 <memcpy@plt>
   370f8:	ldr	r3, [r4, #20]
   370fc:	add	r7, r3, r7
   37100:	str	r7, [r4, #20]
   37104:	b	37048 <flatcc_json_printer_int8_enum_struct_field@@Base+0x8c>
   37108:	mov	r1, r5
   3710c:	mov	r0, r4
   37110:	mov	r3, r6
   37114:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   37118:	bx	r3
   3711c:	ldr	r3, [r0, #20]
   37120:	mov	r2, #10
   37124:	add	r1, r3, #1
   37128:	str	r1, [r0, #20]
   3712c:	strb	r2, [r3]
   37130:	ldrb	r3, [r0, #25]
   37134:	ldr	r2, [r0, #32]
   37138:	ldr	r0, [r0, #20]
   3713c:	ldr	r1, [r4, #16]
   37140:	mul	r9, r2, r3
   37144:	add	r3, r0, r9
   37148:	cmp	r1, r3
   3714c:	bcc	3716c <flatcc_json_printer_int8_enum_struct_field@@Base+0x1b0>
   37150:	mov	r2, r9
   37154:	mov	r1, #32
   37158:	bl	145bc <memset@plt>
   3715c:	ldr	r2, [r4, #20]
   37160:	add	r2, r2, r9
   37164:	str	r2, [r4, #20]
   37168:	b	37008 <flatcc_json_printer_int8_enum_struct_field@@Base+0x4c>
   3716c:	mov	r1, r9
   37170:	mov	r0, r4
   37174:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   37178:	ldr	r2, [r4, #20]
   3717c:	b	37008 <flatcc_json_printer_int8_enum_struct_field@@Base+0x4c>

00037180 <flatcc_json_printer_int16_enum_struct_field@@Base>:
   37180:	cmp	r1, #0
   37184:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   37188:	mov	r4, r0
   3718c:	ldrsh	r5, [r2, r3]
   37190:	ldrne	r3, [r0, #20]
   37194:	movne	r2, #44	; 0x2c
   37198:	addne	r1, r3, #1
   3719c:	strne	r1, [r0, #20]
   371a0:	strbne	r2, [r3]
   371a4:	ldrb	r1, [r0, #25]
   371a8:	ldr	r8, [sp, #32]
   371ac:	ldr	r7, [sp, #36]	; 0x24
   371b0:	cmp	r1, #0
   371b4:	ldr	r6, [sp, #40]	; 0x28
   371b8:	bne	372e0 <flatcc_json_printer_int16_enum_struct_field@@Base+0x160>
   371bc:	ldr	r2, [r0, #20]
   371c0:	ldr	r3, [r0, #16]
   371c4:	cmp	r2, r3
   371c8:	bcs	372a0 <flatcc_json_printer_int16_enum_struct_field@@Base+0x120>
   371cc:	mov	r3, #34	; 0x22
   371d0:	strb	r3, [r2]
   371d4:	ldrb	r3, [r4, #26]
   371d8:	ldr	r0, [r4, #20]
   371dc:	ldr	r2, [r4, #16]
   371e0:	cmp	r3, #0
   371e4:	addeq	r0, r0, #1
   371e8:	add	r3, r0, r7
   371ec:	cmp	r2, r3
   371f0:	str	r0, [r4, #20]
   371f4:	bhi	372b0 <flatcc_json_printer_int16_enum_struct_field@@Base+0x130>
   371f8:	mov	r2, r7
   371fc:	mov	r1, r8
   37200:	mov	r0, r4
   37204:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   37208:	ldr	r7, [r4, #20]
   3720c:	mov	r3, #34	; 0x22
   37210:	strb	r3, [r7]
   37214:	ldr	r1, [r4, #20]
   37218:	ldrb	r3, [r4, #26]
   3721c:	clz	r3, r3
   37220:	lsr	r3, r3, #5
   37224:	add	r2, r1, r3
   37228:	add	r2, r2, #1
   3722c:	mov	r0, #58	; 0x3a
   37230:	str	r2, [r4, #20]
   37234:	strb	r0, [r1, r3]
   37238:	ldr	r3, [r4, #20]
   3723c:	mov	r2, #32
   37240:	strb	r2, [r3]
   37244:	ldrb	r3, [r4, #25]
   37248:	ldrb	r0, [r4, #27]
   3724c:	ldr	r2, [r4, #20]
   37250:	adds	r3, r3, #0
   37254:	movne	r3, #1
   37258:	add	r1, r2, r3
   3725c:	cmp	r0, #0
   37260:	str	r1, [r4, #20]
   37264:	beq	372cc <flatcc_json_printer_int16_enum_struct_field@@Base+0x14c>
   37268:	cmp	r5, #0
   3726c:	lsr	r6, r5, #31
   37270:	rsblt	r5, r5, #0
   37274:	movlt	r0, #45	; 0x2d
   37278:	sxthlt	r5, r5
   3727c:	strblt	r0, [r2, r3]
   37280:	addlt	r1, r1, #1
   37284:	uxth	r0, r5
   37288:	bl	301f8 <flatcc_json_parser_table_as_root@@Base+0xc>
   3728c:	ldr	r3, [r4, #20]
   37290:	add	r0, r6, r0
   37294:	add	r3, r3, r0
   37298:	str	r3, [r4, #20]
   3729c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   372a0:	ldr	r3, [r0, #44]	; 0x2c
   372a4:	blx	r3
   372a8:	ldr	r2, [r4, #20]
   372ac:	b	371cc <flatcc_json_printer_int16_enum_struct_field@@Base+0x4c>
   372b0:	mov	r2, r7
   372b4:	mov	r1, r8
   372b8:	bl	14544 <memcpy@plt>
   372bc:	ldr	r3, [r4, #20]
   372c0:	add	r7, r3, r7
   372c4:	str	r7, [r4, #20]
   372c8:	b	3720c <flatcc_json_printer_int16_enum_struct_field@@Base+0x8c>
   372cc:	mov	r1, r5
   372d0:	mov	r0, r4
   372d4:	mov	r3, r6
   372d8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   372dc:	bx	r3
   372e0:	ldr	r3, [r0, #20]
   372e4:	mov	r2, #10
   372e8:	add	r1, r3, #1
   372ec:	str	r1, [r0, #20]
   372f0:	strb	r2, [r3]
   372f4:	ldrb	r3, [r0, #25]
   372f8:	ldr	r2, [r0, #32]
   372fc:	ldr	r0, [r0, #20]
   37300:	ldr	r1, [r4, #16]
   37304:	mul	r9, r2, r3
   37308:	add	r3, r0, r9
   3730c:	cmp	r1, r3
   37310:	bcc	37330 <flatcc_json_printer_int16_enum_struct_field@@Base+0x1b0>
   37314:	mov	r2, r9
   37318:	mov	r1, #32
   3731c:	bl	145bc <memset@plt>
   37320:	ldr	r2, [r4, #20]
   37324:	add	r2, r2, r9
   37328:	str	r2, [r4, #20]
   3732c:	b	371cc <flatcc_json_printer_int16_enum_struct_field@@Base+0x4c>
   37330:	mov	r1, r9
   37334:	mov	r0, r4
   37338:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3733c:	ldr	r2, [r4, #20]
   37340:	b	371cc <flatcc_json_printer_int16_enum_struct_field@@Base+0x4c>

00037344 <flatcc_json_printer_int32_enum_struct_field@@Base>:
   37344:	cmp	r1, #0
   37348:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3734c:	mov	r4, r0
   37350:	ldr	r6, [r2, r3]
   37354:	ldrne	r3, [r0, #20]
   37358:	movne	r2, #44	; 0x2c
   3735c:	addne	r1, r3, #1
   37360:	strne	r1, [r0, #20]
   37364:	strbne	r2, [r3]
   37368:	ldrb	r1, [r0, #25]
   3736c:	ldr	r8, [sp, #32]
   37370:	ldr	r7, [sp, #36]	; 0x24
   37374:	cmp	r1, #0
   37378:	ldr	r5, [sp, #40]	; 0x28
   3737c:	bne	374a0 <flatcc_json_printer_int32_enum_struct_field@@Base+0x15c>
   37380:	ldr	r2, [r0, #20]
   37384:	ldr	r3, [r0, #16]
   37388:	cmp	r2, r3
   3738c:	bcs	37460 <flatcc_json_printer_int32_enum_struct_field@@Base+0x11c>
   37390:	mov	r3, #34	; 0x22
   37394:	strb	r3, [r2]
   37398:	ldrb	r3, [r4, #26]
   3739c:	ldr	r0, [r4, #20]
   373a0:	ldr	r2, [r4, #16]
   373a4:	cmp	r3, #0
   373a8:	addeq	r0, r0, #1
   373ac:	add	r3, r0, r7
   373b0:	cmp	r2, r3
   373b4:	str	r0, [r4, #20]
   373b8:	bhi	37470 <flatcc_json_printer_int32_enum_struct_field@@Base+0x12c>
   373bc:	mov	r2, r7
   373c0:	mov	r1, r8
   373c4:	mov	r0, r4
   373c8:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   373cc:	ldr	r7, [r4, #20]
   373d0:	mov	r3, #34	; 0x22
   373d4:	strb	r3, [r7]
   373d8:	ldr	r1, [r4, #20]
   373dc:	ldrb	r3, [r4, #26]
   373e0:	clz	r3, r3
   373e4:	lsr	r3, r3, #5
   373e8:	add	r2, r1, r3
   373ec:	add	r2, r2, #1
   373f0:	mov	r0, #58	; 0x3a
   373f4:	str	r2, [r4, #20]
   373f8:	strb	r0, [r1, r3]
   373fc:	ldr	r3, [r4, #20]
   37400:	mov	r2, #32
   37404:	strb	r2, [r3]
   37408:	ldrb	r3, [r4, #25]
   3740c:	ldrb	r0, [r4, #27]
   37410:	ldr	r2, [r4, #20]
   37414:	adds	r3, r3, #0
   37418:	movne	r3, #1
   3741c:	add	r1, r2, r3
   37420:	cmp	r0, #0
   37424:	str	r1, [r4, #20]
   37428:	beq	3748c <flatcc_json_printer_int32_enum_struct_field@@Base+0x148>
   3742c:	cmp	r6, #0
   37430:	movlt	r0, #45	; 0x2d
   37434:	lsr	r5, r6, #31
   37438:	rsblt	r6, r6, #0
   3743c:	strblt	r0, [r2, r3]
   37440:	addlt	r1, r1, #1
   37444:	mov	r0, r6
   37448:	bl	3037c <flatcc_json_parser_table_as_root@@Base+0x190>
   3744c:	ldr	r3, [r4, #20]
   37450:	add	r0, r5, r0
   37454:	add	r3, r3, r0
   37458:	str	r3, [r4, #20]
   3745c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37460:	ldr	r3, [r0, #44]	; 0x2c
   37464:	blx	r3
   37468:	ldr	r2, [r4, #20]
   3746c:	b	37390 <flatcc_json_printer_int32_enum_struct_field@@Base+0x4c>
   37470:	mov	r2, r7
   37474:	mov	r1, r8
   37478:	bl	14544 <memcpy@plt>
   3747c:	ldr	r3, [r4, #20]
   37480:	add	r7, r3, r7
   37484:	str	r7, [r4, #20]
   37488:	b	373d0 <flatcc_json_printer_int32_enum_struct_field@@Base+0x8c>
   3748c:	mov	r1, r6
   37490:	mov	r0, r4
   37494:	mov	r3, r5
   37498:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3749c:	bx	r3
   374a0:	ldr	r3, [r0, #20]
   374a4:	mov	r2, #10
   374a8:	add	r1, r3, #1
   374ac:	str	r1, [r0, #20]
   374b0:	strb	r2, [r3]
   374b4:	ldrb	r3, [r0, #25]
   374b8:	ldr	r2, [r0, #32]
   374bc:	ldr	r0, [r0, #20]
   374c0:	ldr	r1, [r4, #16]
   374c4:	mul	r9, r2, r3
   374c8:	add	r3, r0, r9
   374cc:	cmp	r1, r3
   374d0:	bcc	374f0 <flatcc_json_printer_int32_enum_struct_field@@Base+0x1ac>
   374d4:	mov	r2, r9
   374d8:	mov	r1, #32
   374dc:	bl	145bc <memset@plt>
   374e0:	ldr	r2, [r4, #20]
   374e4:	add	r2, r2, r9
   374e8:	str	r2, [r4, #20]
   374ec:	b	37390 <flatcc_json_printer_int32_enum_struct_field@@Base+0x4c>
   374f0:	mov	r1, r9
   374f4:	mov	r0, r4
   374f8:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   374fc:	ldr	r2, [r4, #20]
   37500:	b	37390 <flatcc_json_printer_int32_enum_struct_field@@Base+0x4c>

00037504 <flatcc_json_printer_int64_enum_struct_field@@Base>:
   37504:	cmp	r1, #0
   37508:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3750c:	mov	r4, r0
   37510:	ldrd	r6, [r2, r3]
   37514:	ldrne	r3, [r0, #20]
   37518:	movne	r2, #44	; 0x2c
   3751c:	addne	r1, r3, #1
   37520:	strne	r1, [r0, #20]
   37524:	strbne	r2, [r3]
   37528:	ldrb	r1, [r0, #25]
   3752c:	ldr	r9, [sp, #32]
   37530:	ldr	r8, [sp, #36]	; 0x24
   37534:	cmp	r1, #0
   37538:	ldr	r5, [sp, #40]	; 0x28
   3753c:	bne	37678 <flatcc_json_printer_int64_enum_struct_field@@Base+0x174>
   37540:	ldr	r2, [r0, #20]
   37544:	ldr	r3, [r0, #16]
   37548:	cmp	r2, r3
   3754c:	bcs	3761c <flatcc_json_printer_int64_enum_struct_field@@Base+0x118>
   37550:	mov	r3, #34	; 0x22
   37554:	strb	r3, [r2]
   37558:	ldrb	r3, [r4, #26]
   3755c:	ldr	r0, [r4, #20]
   37560:	ldr	r2, [r4, #16]
   37564:	cmp	r3, #0
   37568:	addeq	r0, r0, #1
   3756c:	add	r3, r0, r8
   37570:	cmp	r2, r3
   37574:	str	r0, [r4, #20]
   37578:	bhi	37644 <flatcc_json_printer_int64_enum_struct_field@@Base+0x140>
   3757c:	mov	r2, r8
   37580:	mov	r1, r9
   37584:	mov	r0, r4
   37588:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   3758c:	ldr	r8, [r4, #20]
   37590:	mov	r3, #34	; 0x22
   37594:	strb	r3, [r8]
   37598:	ldr	r1, [r4, #20]
   3759c:	ldrb	r3, [r4, #26]
   375a0:	clz	r3, r3
   375a4:	lsr	r3, r3, #5
   375a8:	add	r2, r1, r3
   375ac:	add	r2, r2, #1
   375b0:	mov	r0, #58	; 0x3a
   375b4:	str	r2, [r4, #20]
   375b8:	strb	r0, [r1, r3]
   375bc:	ldr	r3, [r4, #20]
   375c0:	mov	r2, #32
   375c4:	strb	r2, [r3]
   375c8:	ldrb	r3, [r4, #25]
   375cc:	ldrb	r0, [r4, #27]
   375d0:	ldr	r1, [r4, #20]
   375d4:	adds	r3, r3, #0
   375d8:	movne	r3, #1
   375dc:	add	r2, r1, r3
   375e0:	cmp	r0, #0
   375e4:	str	r2, [r4, #20]
   375e8:	beq	37660 <flatcc_json_printer_int64_enum_struct_field@@Base+0x15c>
   375ec:	cmp	r6, #0
   375f0:	sbcs	r0, r7, #0
   375f4:	lsr	r5, r7, #31
   375f8:	blt	3762c <flatcc_json_printer_int64_enum_struct_field@@Base+0x128>
   375fc:	mov	r0, r6
   37600:	mov	r1, r7
   37604:	bl	306e8 <flatcc_json_parser_table_as_root@@Base+0x4fc>
   37608:	ldr	r3, [r4, #20]
   3760c:	add	r0, r5, r0
   37610:	add	r3, r3, r0
   37614:	str	r3, [r4, #20]
   37618:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3761c:	ldr	r3, [r0, #44]	; 0x2c
   37620:	blx	r3
   37624:	ldr	r2, [r4, #20]
   37628:	b	37550 <flatcc_json_printer_int64_enum_struct_field@@Base+0x4c>
   3762c:	rsbs	r6, r6, #0
   37630:	mov	r0, #45	; 0x2d
   37634:	rsc	r7, r7, #0
   37638:	add	r2, r2, #1
   3763c:	strb	r0, [r1, r3]
   37640:	b	375fc <flatcc_json_printer_int64_enum_struct_field@@Base+0xf8>
   37644:	mov	r2, r8
   37648:	mov	r1, r9
   3764c:	bl	14544 <memcpy@plt>
   37650:	ldr	r3, [r4, #20]
   37654:	add	r8, r3, r8
   37658:	str	r8, [r4, #20]
   3765c:	b	37590 <flatcc_json_printer_int64_enum_struct_field@@Base+0x8c>
   37660:	mov	r2, r6
   37664:	mov	r3, r7
   37668:	mov	r0, r4
   3766c:	mov	r1, r5
   37670:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   37674:	bx	r1
   37678:	ldr	r3, [r0, #20]
   3767c:	mov	r2, #10
   37680:	add	r1, r3, #1
   37684:	str	r1, [r0, #20]
   37688:	strb	r2, [r3]
   3768c:	ldrb	r3, [r0, #25]
   37690:	ldr	r2, [r0, #32]
   37694:	ldr	r0, [r0, #20]
   37698:	ldr	r1, [r4, #16]
   3769c:	mul	sl, r2, r3
   376a0:	add	r3, r0, sl
   376a4:	cmp	r1, r3
   376a8:	bcc	376c8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x1c4>
   376ac:	mov	r2, sl
   376b0:	mov	r1, #32
   376b4:	bl	145bc <memset@plt>
   376b8:	ldr	r2, [r4, #20]
   376bc:	add	r2, r2, sl
   376c0:	str	r2, [r4, #20]
   376c4:	b	37550 <flatcc_json_printer_int64_enum_struct_field@@Base+0x4c>
   376c8:	mov	r1, sl
   376cc:	mov	r0, r4
   376d0:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   376d4:	ldr	r2, [r4, #20]
   376d8:	b	37550 <flatcc_json_printer_int64_enum_struct_field@@Base+0x4c>

000376dc <flatcc_json_printer_bool_enum_struct_field@@Base>:
   376dc:	cmp	r1, #0
   376e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   376e4:	mov	r4, r0
   376e8:	ldrb	r5, [r2, r3]
   376ec:	ldrne	r3, [r0, #20]
   376f0:	movne	r2, #44	; 0x2c
   376f4:	addne	r1, r3, #1
   376f8:	strne	r1, [r0, #20]
   376fc:	strbne	r2, [r3]
   37700:	ldrb	r1, [r0, #25]
   37704:	ldr	r8, [sp, #32]
   37708:	ldr	r7, [sp, #36]	; 0x24
   3770c:	cmp	r1, #0
   37710:	ldr	r6, [sp, #40]	; 0x28
   37714:	bne	37818 <flatcc_json_printer_bool_enum_struct_field@@Base+0x13c>
   37718:	ldr	r2, [r0, #20]
   3771c:	ldr	r3, [r0, #16]
   37720:	cmp	r2, r3
   37724:	bcs	377d4 <flatcc_json_printer_bool_enum_struct_field@@Base+0xf8>
   37728:	mov	r3, #34	; 0x22
   3772c:	strb	r3, [r2]
   37730:	ldrb	r3, [r4, #26]
   37734:	ldr	r0, [r4, #20]
   37738:	ldr	r2, [r4, #16]
   3773c:	cmp	r3, #0
   37740:	addeq	r0, r0, #1
   37744:	add	r3, r0, r7
   37748:	cmp	r2, r3
   3774c:	str	r0, [r4, #20]
   37750:	bhi	377fc <flatcc_json_printer_bool_enum_struct_field@@Base+0x120>
   37754:	mov	r2, r7
   37758:	mov	r1, r8
   3775c:	mov	r0, r4
   37760:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   37764:	ldr	r7, [r4, #20]
   37768:	mov	r3, #34	; 0x22
   3776c:	strb	r3, [r7]
   37770:	ldr	r1, [r4, #20]
   37774:	ldrb	r3, [r4, #26]
   37778:	clz	r3, r3
   3777c:	lsr	r3, r3, #5
   37780:	add	r2, r1, r3
   37784:	add	r2, r2, #1
   37788:	mov	r0, #58	; 0x3a
   3778c:	str	r2, [r4, #20]
   37790:	strb	r0, [r1, r3]
   37794:	ldr	r3, [r4, #20]
   37798:	mov	r2, #32
   3779c:	strb	r2, [r3]
   377a0:	ldrb	r2, [r4, #25]
   377a4:	ldrb	r3, [r4, #27]
   377a8:	ldr	r1, [r4, #20]
   377ac:	cmp	r2, #0
   377b0:	addne	r1, r1, #1
   377b4:	cmp	r3, #0
   377b8:	str	r1, [r4, #20]
   377bc:	bne	377e4 <flatcc_json_printer_bool_enum_struct_field@@Base+0x108>
   377c0:	mov	r1, r5
   377c4:	mov	r0, r4
   377c8:	mov	r3, r6
   377cc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   377d0:	bx	r3
   377d4:	ldr	r3, [r0, #44]	; 0x2c
   377d8:	blx	r3
   377dc:	ldr	r2, [r4, #20]
   377e0:	b	37728 <flatcc_json_printer_bool_enum_struct_field@@Base+0x4c>
   377e4:	mov	r0, r5
   377e8:	bl	31434 <flatcc_json_parser_table_as_root@@Base+0x1248>
   377ec:	ldr	r3, [r4, #20]
   377f0:	add	r0, r3, r0
   377f4:	str	r0, [r4, #20]
   377f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   377fc:	mov	r2, r7
   37800:	mov	r1, r8
   37804:	bl	14544 <memcpy@plt>
   37808:	ldr	r3, [r4, #20]
   3780c:	add	r7, r3, r7
   37810:	str	r7, [r4, #20]
   37814:	b	37768 <flatcc_json_printer_bool_enum_struct_field@@Base+0x8c>
   37818:	ldr	r3, [r0, #20]
   3781c:	mov	r2, #10
   37820:	add	r1, r3, #1
   37824:	str	r1, [r0, #20]
   37828:	strb	r2, [r3]
   3782c:	ldrb	r3, [r0, #25]
   37830:	ldr	r2, [r0, #32]
   37834:	ldr	r0, [r0, #20]
   37838:	ldr	r1, [r4, #16]
   3783c:	mul	r9, r2, r3
   37840:	add	r3, r0, r9
   37844:	cmp	r1, r3
   37848:	bcc	37868 <flatcc_json_printer_bool_enum_struct_field@@Base+0x18c>
   3784c:	mov	r2, r9
   37850:	mov	r1, #32
   37854:	bl	145bc <memset@plt>
   37858:	ldr	r2, [r4, #20]
   3785c:	add	r2, r2, r9
   37860:	str	r2, [r4, #20]
   37864:	b	37728 <flatcc_json_printer_bool_enum_struct_field@@Base+0x4c>
   37868:	mov	r1, r9
   3786c:	mov	r0, r4
   37870:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   37874:	ldr	r2, [r4, #20]
   37878:	b	37728 <flatcc_json_printer_bool_enum_struct_field@@Base+0x4c>

0003787c <flatcc_json_printer_uint8_vector_field@@Base>:
   3787c:	add	r2, r2, #2
   37880:	ldr	ip, [r1, #8]
   37884:	lsl	r2, r2, #1
   37888:	cmp	ip, r2
   3788c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37890:	ldr	r7, [sp, #40]	; 0x28
   37894:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37898:	ldr	ip, [r1, #4]
   3789c:	ldrh	ip, [ip, r2]
   378a0:	cmp	ip, #0
   378a4:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   378a8:	ldr	r5, [r1]
   378ac:	adds	lr, r5, ip
   378b0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   378b4:	ldr	r2, [r1, #16]
   378b8:	mov	r8, r3
   378bc:	cmp	r2, #0
   378c0:	add	r2, r2, #1
   378c4:	str	r2, [r1, #16]
   378c8:	ldrne	r2, [r0, #20]
   378cc:	movne	r1, #44	; 0x2c
   378d0:	addne	r4, r2, #1
   378d4:	strne	r4, [r0, #20]
   378d8:	strbne	r1, [r2]
   378dc:	ldrb	r1, [r0, #25]
   378e0:	ldr	r3, [r5, ip]
   378e4:	mov	r4, r0
   378e8:	cmp	r1, #0
   378ec:	add	r6, lr, r3
   378f0:	ldr	r5, [lr, r3]
   378f4:	ldr	r3, [r0, #20]
   378f8:	bne	37b7c <flatcc_json_printer_uint8_vector_field@@Base+0x300>
   378fc:	ldr	r2, [r0, #16]
   37900:	cmp	r3, r2
   37904:	bcc	37914 <flatcc_json_printer_uint8_vector_field@@Base+0x98>
   37908:	ldr	r3, [r0, #44]	; 0x2c
   3790c:	blx	r3
   37910:	ldr	r3, [r4, #20]
   37914:	mov	r2, #34	; 0x22
   37918:	strb	r2, [r3]
   3791c:	ldrb	r3, [r4, #26]
   37920:	ldr	r0, [r4, #20]
   37924:	ldr	r2, [r4, #16]
   37928:	cmp	r3, #0
   3792c:	addeq	r0, r0, #1
   37930:	add	r3, r0, r7
   37934:	cmp	r2, r3
   37938:	str	r0, [r4, #20]
   3793c:	bhi	37afc <flatcc_json_printer_uint8_vector_field@@Base+0x280>
   37940:	mov	r2, r7
   37944:	mov	r1, r8
   37948:	mov	r0, r4
   3794c:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   37950:	ldr	r7, [r4, #20]
   37954:	mov	r3, #34	; 0x22
   37958:	strb	r3, [r7]
   3795c:	ldr	r1, [r4, #20]
   37960:	ldrb	r3, [r4, #26]
   37964:	clz	r3, r3
   37968:	lsr	r3, r3, #5
   3796c:	add	r2, r1, r3
   37970:	add	r2, r2, #1
   37974:	mov	r0, #58	; 0x3a
   37978:	str	r2, [r4, #20]
   3797c:	strb	r0, [r1, r3]
   37980:	ldr	r3, [r4, #20]
   37984:	mov	r2, #32
   37988:	mov	ip, #91	; 0x5b
   3798c:	strb	r2, [r3]
   37990:	ldrb	r3, [r4, #25]
   37994:	ldr	r0, [r4, #20]
   37998:	ldr	r2, [r4, #32]
   3799c:	adds	r3, r3, #0
   379a0:	movne	r3, #1
   379a4:	add	r1, r0, r3
   379a8:	add	r1, r1, #1
   379ac:	add	r2, r2, #1
   379b0:	cmp	r5, #0
   379b4:	str	r1, [r4, #20]
   379b8:	str	r2, [r4, #32]
   379bc:	strb	ip, [r0, r3]
   379c0:	bne	379e8 <flatcc_json_printer_uint8_vector_field@@Base+0x16c>
   379c4:	ldr	r0, [r4, #20]
   379c8:	ldrb	r3, [r4, #25]
   379cc:	cmp	r3, #0
   379d0:	bne	37b18 <flatcc_json_printer_uint8_vector_field@@Base+0x29c>
   379d4:	add	r2, r0, #1
   379d8:	mov	r3, #93	; 0x5d
   379dc:	str	r2, [r4, #20]
   379e0:	strb	r3, [r0]
   379e4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   379e8:	ldrb	r3, [r4, #25]
   379ec:	cmp	r3, #0
   379f0:	bne	37bc8 <flatcc_json_printer_uint8_vector_field@@Base+0x34c>
   379f4:	ldr	r1, [r4, #20]
   379f8:	ldr	r2, [r4, #16]
   379fc:	cmp	r1, r2
   37a00:	bcs	37bec <flatcc_json_printer_uint8_vector_field@@Base+0x370>
   37a04:	ldrb	r0, [r6, #4]
   37a08:	bl	31344 <flatcc_json_parser_table_as_root@@Base+0x1158>
   37a0c:	ldr	r3, [r4, #20]
   37a10:	cmp	r5, #1
   37a14:	add	fp, r6, #5
   37a18:	add	r0, r3, r0
   37a1c:	str	r0, [r4, #20]
   37a20:	beq	379c8 <flatcc_json_printer_uint8_vector_field@@Base+0x14c>
   37a24:	add	r5, r5, #4
   37a28:	mov	r7, #44	; 0x2c
   37a2c:	mov	r9, #10
   37a30:	mov	r8, #32
   37a34:	b	37a68 <flatcc_json_printer_uint8_vector_field@@Base+0x1ec>
   37a38:	ldr	r1, [r4, #20]
   37a3c:	ldr	r3, [r4, #16]
   37a40:	cmp	r1, r3
   37a44:	bcs	37ad0 <flatcc_json_printer_uint8_vector_field@@Base+0x254>
   37a48:	ldrb	r0, [fp], #1
   37a4c:	bl	31344 <flatcc_json_parser_table_as_root@@Base+0x1158>
   37a50:	ldr	r3, [r4, #20]
   37a54:	sub	r2, r5, fp
   37a58:	cmn	r6, r2
   37a5c:	add	r0, r3, r0
   37a60:	str	r0, [r4, #20]
   37a64:	beq	379c8 <flatcc_json_printer_uint8_vector_field@@Base+0x14c>
   37a68:	add	r3, r0, #1
   37a6c:	str	r3, [r4, #20]
   37a70:	strb	r7, [r0]
   37a74:	ldrb	r3, [r4, #25]
   37a78:	cmp	r3, #0
   37a7c:	beq	37a38 <flatcc_json_printer_uint8_vector_field@@Base+0x1bc>
   37a80:	ldr	r3, [r4, #20]
   37a84:	mov	r1, r8
   37a88:	add	r2, r3, #1
   37a8c:	str	r2, [r4, #20]
   37a90:	strb	r9, [r3]
   37a94:	ldrb	r3, [r4, #25]
   37a98:	ldr	r2, [r4, #32]
   37a9c:	ldr	ip, [r4, #20]
   37aa0:	ldr	lr, [r4, #16]
   37aa4:	mul	sl, r2, r3
   37aa8:	mov	r0, ip
   37aac:	add	ip, ip, sl
   37ab0:	cmp	lr, ip
   37ab4:	mov	r2, sl
   37ab8:	bcc	37ae8 <flatcc_json_printer_uint8_vector_field@@Base+0x26c>
   37abc:	bl	145bc <memset@plt>
   37ac0:	ldr	r1, [r4, #20]
   37ac4:	add	r1, r1, sl
   37ac8:	str	r1, [r4, #20]
   37acc:	b	37a48 <flatcc_json_printer_uint8_vector_field@@Base+0x1cc>
   37ad0:	mov	r1, #0
   37ad4:	ldr	r3, [r4, #44]	; 0x2c
   37ad8:	mov	r0, r4
   37adc:	blx	r3
   37ae0:	ldr	r1, [r4, #20]
   37ae4:	b	37a48 <flatcc_json_printer_uint8_vector_field@@Base+0x1cc>
   37ae8:	mov	r1, sl
   37aec:	mov	r0, r4
   37af0:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   37af4:	ldr	r1, [r4, #20]
   37af8:	b	37a48 <flatcc_json_printer_uint8_vector_field@@Base+0x1cc>
   37afc:	mov	r2, r7
   37b00:	mov	r1, r8
   37b04:	bl	14544 <memcpy@plt>
   37b08:	ldr	r3, [r4, #20]
   37b0c:	add	r7, r3, r7
   37b10:	str	r7, [r4, #20]
   37b14:	b	37954 <flatcc_json_printer_uint8_vector_field@@Base+0xd8>
   37b18:	add	r2, r0, #1
   37b1c:	mov	r3, #10
   37b20:	str	r2, [r4, #20]
   37b24:	strb	r3, [r0]
   37b28:	ldr	r3, [r4, #32]
   37b2c:	ldrb	r5, [r4, #25]
   37b30:	sub	r3, r3, #1
   37b34:	ldr	r0, [r4, #20]
   37b38:	ldr	r2, [r4, #16]
   37b3c:	mul	r5, r3, r5
   37b40:	str	r3, [r4, #32]
   37b44:	add	r3, r0, r5
   37b48:	cmp	r2, r3
   37b4c:	bcc	37b68 <flatcc_json_printer_uint8_vector_field@@Base+0x2ec>
   37b50:	mov	r2, r5
   37b54:	mov	r1, #32
   37b58:	bl	145bc <memset@plt>
   37b5c:	ldr	r0, [r4, #20]
   37b60:	add	r0, r0, r5
   37b64:	b	379d4 <flatcc_json_printer_uint8_vector_field@@Base+0x158>
   37b68:	mov	r0, r4
   37b6c:	mov	r1, r5
   37b70:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   37b74:	ldr	r0, [r4, #20]
   37b78:	b	379d4 <flatcc_json_printer_uint8_vector_field@@Base+0x158>
   37b7c:	mov	r2, #10
   37b80:	add	r1, r3, #1
   37b84:	str	r1, [r0, #20]
   37b88:	strb	r2, [r3]
   37b8c:	ldrb	r3, [r0, #25]
   37b90:	ldr	r9, [r0, #32]
   37b94:	ldr	r0, [r0, #20]
   37b98:	ldr	r2, [r4, #16]
   37b9c:	mul	r9, r9, r3
   37ba0:	add	r3, r0, r9
   37ba4:	cmp	r2, r3
   37ba8:	bcc	37c04 <flatcc_json_printer_uint8_vector_field@@Base+0x388>
   37bac:	mov	r2, r9
   37bb0:	mov	r1, #32
   37bb4:	bl	145bc <memset@plt>
   37bb8:	ldr	r3, [r4, #20]
   37bbc:	add	r3, r3, r9
   37bc0:	str	r3, [r4, #20]
   37bc4:	b	37914 <flatcc_json_printer_uint8_vector_field@@Base+0x98>
   37bc8:	ldr	r3, [r4, #20]
   37bcc:	mov	r2, #10
   37bd0:	add	r1, r3, #1
   37bd4:	str	r1, [r4, #20]
   37bd8:	mov	r0, r4
   37bdc:	strb	r2, [r3]
   37be0:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   37be4:	ldr	r1, [r4, #20]
   37be8:	b	37a04 <flatcc_json_printer_uint8_vector_field@@Base+0x188>
   37bec:	mov	r1, r3
   37bf0:	mov	r0, r4
   37bf4:	ldr	r3, [r4, #44]	; 0x2c
   37bf8:	blx	r3
   37bfc:	ldr	r1, [r4, #20]
   37c00:	b	37a04 <flatcc_json_printer_uint8_vector_field@@Base+0x188>
   37c04:	mov	r1, r9
   37c08:	mov	r0, r4
   37c0c:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   37c10:	ldr	r3, [r4, #20]
   37c14:	b	37914 <flatcc_json_printer_uint8_vector_field@@Base+0x98>

00037c18 <flatcc_json_printer_utype_vector_field@@Base>:
   37c18:	b	3787c <flatcc_json_printer_uint8_vector_field@@Base>

00037c1c <flatcc_json_printer_uint16_vector_field@@Base>:
   37c1c:	add	r2, r2, #2
   37c20:	ldr	ip, [r1, #8]
   37c24:	lsl	r2, r2, #1
   37c28:	cmp	ip, r2
   37c2c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37c30:	ldr	r6, [sp, #40]	; 0x28
   37c34:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37c38:	ldr	ip, [r1, #4]
   37c3c:	ldrh	ip, [ip, r2]
   37c40:	cmp	ip, #0
   37c44:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37c48:	ldr	r5, [r1]
   37c4c:	adds	lr, r5, ip
   37c50:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37c54:	ldr	r2, [r1, #16]
   37c58:	mov	r7, r3
   37c5c:	cmp	r2, #0
   37c60:	add	r2, r2, #1
   37c64:	str	r2, [r1, #16]
   37c68:	ldrne	r2, [r0, #20]
   37c6c:	movne	r1, #44	; 0x2c
   37c70:	addne	r4, r2, #1
   37c74:	strne	r4, [r0, #20]
   37c78:	strbne	r1, [r2]
   37c7c:	ldrb	r1, [r0, #25]
   37c80:	ldr	r3, [r5, ip]
   37c84:	mov	r4, r0
   37c88:	cmp	r1, #0
   37c8c:	add	r5, lr, r3
   37c90:	ldr	sl, [lr, r3]
   37c94:	ldr	r3, [r0, #20]
   37c98:	bne	37f20 <flatcc_json_printer_uint16_vector_field@@Base+0x304>
   37c9c:	ldr	r2, [r0, #16]
   37ca0:	cmp	r3, r2
   37ca4:	bcc	37cb4 <flatcc_json_printer_uint16_vector_field@@Base+0x98>
   37ca8:	ldr	r3, [r0, #44]	; 0x2c
   37cac:	blx	r3
   37cb0:	ldr	r3, [r4, #20]
   37cb4:	mov	r2, #34	; 0x22
   37cb8:	strb	r2, [r3]
   37cbc:	ldrb	r3, [r4, #26]
   37cc0:	ldr	r0, [r4, #20]
   37cc4:	ldr	r2, [r4, #16]
   37cc8:	cmp	r3, #0
   37ccc:	addeq	r0, r0, #1
   37cd0:	add	r3, r0, r6
   37cd4:	cmp	r2, r3
   37cd8:	str	r0, [r4, #20]
   37cdc:	bhi	37ea0 <flatcc_json_printer_uint16_vector_field@@Base+0x284>
   37ce0:	mov	r2, r6
   37ce4:	mov	r1, r7
   37ce8:	mov	r0, r4
   37cec:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   37cf0:	ldr	r6, [r4, #20]
   37cf4:	mov	r3, #34	; 0x22
   37cf8:	strb	r3, [r6]
   37cfc:	ldr	r1, [r4, #20]
   37d00:	ldrb	r3, [r4, #26]
   37d04:	clz	r3, r3
   37d08:	lsr	r3, r3, #5
   37d0c:	add	r2, r1, r3
   37d10:	add	r2, r2, #1
   37d14:	mov	r0, #58	; 0x3a
   37d18:	str	r2, [r4, #20]
   37d1c:	strb	r0, [r1, r3]
   37d20:	ldr	r3, [r4, #20]
   37d24:	mov	r2, #32
   37d28:	mov	ip, #91	; 0x5b
   37d2c:	strb	r2, [r3]
   37d30:	ldrb	r3, [r4, #25]
   37d34:	ldr	r0, [r4, #20]
   37d38:	ldr	r2, [r4, #32]
   37d3c:	adds	r3, r3, #0
   37d40:	movne	r3, #1
   37d44:	add	r1, r0, r3
   37d48:	add	r1, r1, #1
   37d4c:	add	r2, r2, #1
   37d50:	cmp	sl, #0
   37d54:	str	r1, [r4, #20]
   37d58:	str	r2, [r4, #32]
   37d5c:	strb	ip, [r0, r3]
   37d60:	bne	37d88 <flatcc_json_printer_uint16_vector_field@@Base+0x16c>
   37d64:	ldr	r0, [r4, #20]
   37d68:	ldrb	r3, [r4, #25]
   37d6c:	cmp	r3, #0
   37d70:	bne	37ebc <flatcc_json_printer_uint16_vector_field@@Base+0x2a0>
   37d74:	add	r2, r0, #1
   37d78:	mov	r3, #93	; 0x5d
   37d7c:	str	r2, [r4, #20]
   37d80:	strb	r3, [r0]
   37d84:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37d88:	ldrb	r3, [r4, #25]
   37d8c:	cmp	r3, #0
   37d90:	bne	37f6c <flatcc_json_printer_uint16_vector_field@@Base+0x350>
   37d94:	ldr	r1, [r4, #20]
   37d98:	ldr	r2, [r4, #16]
   37d9c:	cmp	r1, r2
   37da0:	bcs	37f90 <flatcc_json_printer_uint16_vector_field@@Base+0x374>
   37da4:	ldrh	r0, [r5, #4]
   37da8:	bl	301f8 <flatcc_json_parser_table_as_root@@Base+0xc>
   37dac:	ldr	r3, [r4, #20]
   37db0:	cmp	sl, #1
   37db4:	add	r5, r5, #6
   37db8:	sub	sl, sl, #2
   37dbc:	add	r0, r3, r0
   37dc0:	str	r0, [r4, #20]
   37dc4:	beq	37d68 <flatcc_json_printer_uint16_vector_field@@Base+0x14c>
   37dc8:	mov	r6, #44	; 0x2c
   37dcc:	mov	r9, #0
   37dd0:	mov	r8, #10
   37dd4:	mov	r7, #32
   37dd8:	b	37e0c <flatcc_json_printer_uint16_vector_field@@Base+0x1f0>
   37ddc:	ldr	r1, [r4, #20]
   37de0:	ldr	r3, [r4, #16]
   37de4:	cmp	r1, r3
   37de8:	bcs	37e74 <flatcc_json_printer_uint16_vector_field@@Base+0x258>
   37dec:	ldrh	r0, [r5], #2
   37df0:	bl	301f8 <flatcc_json_parser_table_as_root@@Base+0xc>
   37df4:	ldr	r3, [r4, #20]
   37df8:	cmp	sl, #0
   37dfc:	sub	sl, sl, #1
   37e00:	add	r0, r3, r0
   37e04:	str	r0, [r4, #20]
   37e08:	beq	37d68 <flatcc_json_printer_uint16_vector_field@@Base+0x14c>
   37e0c:	add	r3, r0, #1
   37e10:	str	r3, [r4, #20]
   37e14:	strb	r6, [r0]
   37e18:	ldrb	r3, [r4, #25]
   37e1c:	cmp	r3, #0
   37e20:	beq	37ddc <flatcc_json_printer_uint16_vector_field@@Base+0x1c0>
   37e24:	ldr	r3, [r4, #20]
   37e28:	mov	r1, r7
   37e2c:	add	r2, r3, #1
   37e30:	str	r2, [r4, #20]
   37e34:	strb	r8, [r3]
   37e38:	ldrb	r2, [r4, #25]
   37e3c:	ldr	fp, [r4, #32]
   37e40:	ldr	r3, [r4, #20]
   37e44:	ldr	ip, [r4, #16]
   37e48:	mul	fp, fp, r2
   37e4c:	mov	r0, r3
   37e50:	add	r3, r3, fp
   37e54:	cmp	ip, r3
   37e58:	mov	r2, fp
   37e5c:	bcc	37e8c <flatcc_json_printer_uint16_vector_field@@Base+0x270>
   37e60:	bl	145bc <memset@plt>
   37e64:	ldr	r1, [r4, #20]
   37e68:	add	r1, r1, fp
   37e6c:	str	r1, [r4, #20]
   37e70:	b	37dec <flatcc_json_printer_uint16_vector_field@@Base+0x1d0>
   37e74:	mov	r1, r9
   37e78:	ldr	r3, [r4, #44]	; 0x2c
   37e7c:	mov	r0, r4
   37e80:	blx	r3
   37e84:	ldr	r1, [r4, #20]
   37e88:	b	37dec <flatcc_json_printer_uint16_vector_field@@Base+0x1d0>
   37e8c:	mov	r1, fp
   37e90:	mov	r0, r4
   37e94:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   37e98:	ldr	r1, [r4, #20]
   37e9c:	b	37dec <flatcc_json_printer_uint16_vector_field@@Base+0x1d0>
   37ea0:	mov	r2, r6
   37ea4:	mov	r1, r7
   37ea8:	bl	14544 <memcpy@plt>
   37eac:	ldr	r3, [r4, #20]
   37eb0:	add	r6, r3, r6
   37eb4:	str	r6, [r4, #20]
   37eb8:	b	37cf4 <flatcc_json_printer_uint16_vector_field@@Base+0xd8>
   37ebc:	add	r2, r0, #1
   37ec0:	mov	r3, #10
   37ec4:	str	r2, [r4, #20]
   37ec8:	strb	r3, [r0]
   37ecc:	ldr	r3, [r4, #32]
   37ed0:	ldrb	r5, [r4, #25]
   37ed4:	sub	r3, r3, #1
   37ed8:	ldr	r0, [r4, #20]
   37edc:	ldr	r2, [r4, #16]
   37ee0:	mul	r5, r3, r5
   37ee4:	str	r3, [r4, #32]
   37ee8:	add	r3, r0, r5
   37eec:	cmp	r2, r3
   37ef0:	bcc	37f0c <flatcc_json_printer_uint16_vector_field@@Base+0x2f0>
   37ef4:	mov	r2, r5
   37ef8:	mov	r1, #32
   37efc:	bl	145bc <memset@plt>
   37f00:	ldr	r0, [r4, #20]
   37f04:	add	r0, r0, r5
   37f08:	b	37d74 <flatcc_json_printer_uint16_vector_field@@Base+0x158>
   37f0c:	mov	r0, r4
   37f10:	mov	r1, r5
   37f14:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   37f18:	ldr	r0, [r4, #20]
   37f1c:	b	37d74 <flatcc_json_printer_uint16_vector_field@@Base+0x158>
   37f20:	mov	r2, #10
   37f24:	add	r1, r3, #1
   37f28:	str	r1, [r0, #20]
   37f2c:	strb	r2, [r3]
   37f30:	ldrb	r3, [r0, #25]
   37f34:	ldr	r8, [r0, #32]
   37f38:	ldr	r0, [r0, #20]
   37f3c:	ldr	r2, [r4, #16]
   37f40:	mul	r8, r8, r3
   37f44:	add	r3, r0, r8
   37f48:	cmp	r2, r3
   37f4c:	bcc	37fa8 <flatcc_json_printer_uint16_vector_field@@Base+0x38c>
   37f50:	mov	r2, r8
   37f54:	mov	r1, #32
   37f58:	bl	145bc <memset@plt>
   37f5c:	ldr	r3, [r4, #20]
   37f60:	add	r3, r3, r8
   37f64:	str	r3, [r4, #20]
   37f68:	b	37cb4 <flatcc_json_printer_uint16_vector_field@@Base+0x98>
   37f6c:	ldr	r3, [r4, #20]
   37f70:	mov	r2, #10
   37f74:	add	r1, r3, #1
   37f78:	str	r1, [r4, #20]
   37f7c:	mov	r0, r4
   37f80:	strb	r2, [r3]
   37f84:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   37f88:	ldr	r1, [r4, #20]
   37f8c:	b	37da4 <flatcc_json_printer_uint16_vector_field@@Base+0x188>
   37f90:	mov	r1, r3
   37f94:	mov	r0, r4
   37f98:	ldr	r3, [r4, #44]	; 0x2c
   37f9c:	blx	r3
   37fa0:	ldr	r1, [r4, #20]
   37fa4:	b	37da4 <flatcc_json_printer_uint16_vector_field@@Base+0x188>
   37fa8:	mov	r1, r8
   37fac:	mov	r0, r4
   37fb0:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   37fb4:	ldr	r3, [r4, #20]
   37fb8:	b	37cb4 <flatcc_json_printer_uint16_vector_field@@Base+0x98>

00037fbc <flatcc_json_printer_uint32_vector_field@@Base>:
   37fbc:	add	r2, r2, #2
   37fc0:	ldr	ip, [r1, #8]
   37fc4:	lsl	r2, r2, #1
   37fc8:	cmp	ip, r2
   37fcc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37fd0:	ldr	r6, [sp, #40]	; 0x28
   37fd4:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37fd8:	ldr	ip, [r1, #4]
   37fdc:	ldrh	ip, [ip, r2]
   37fe0:	cmp	ip, #0
   37fe4:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37fe8:	ldr	r5, [r1]
   37fec:	adds	lr, r5, ip
   37ff0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37ff4:	ldr	r2, [r1, #16]
   37ff8:	mov	r7, r3
   37ffc:	cmp	r2, #0
   38000:	add	r2, r2, #1
   38004:	str	r2, [r1, #16]
   38008:	ldrne	r2, [r0, #20]
   3800c:	movne	r1, #44	; 0x2c
   38010:	addne	r4, r2, #1
   38014:	strne	r4, [r0, #20]
   38018:	strbne	r1, [r2]
   3801c:	ldrb	r1, [r0, #25]
   38020:	ldr	r3, [r5, ip]
   38024:	mov	r4, r0
   38028:	cmp	r1, #0
   3802c:	add	r5, lr, r3
   38030:	ldr	sl, [lr, r3]
   38034:	ldr	r3, [r0, #20]
   38038:	bne	382c0 <flatcc_json_printer_uint32_vector_field@@Base+0x304>
   3803c:	ldr	r2, [r0, #16]
   38040:	cmp	r3, r2
   38044:	bcc	38054 <flatcc_json_printer_uint32_vector_field@@Base+0x98>
   38048:	ldr	r3, [r0, #44]	; 0x2c
   3804c:	blx	r3
   38050:	ldr	r3, [r4, #20]
   38054:	mov	r2, #34	; 0x22
   38058:	strb	r2, [r3]
   3805c:	ldrb	r3, [r4, #26]
   38060:	ldr	r0, [r4, #20]
   38064:	ldr	r2, [r4, #16]
   38068:	cmp	r3, #0
   3806c:	addeq	r0, r0, #1
   38070:	add	r3, r0, r6
   38074:	cmp	r2, r3
   38078:	str	r0, [r4, #20]
   3807c:	bhi	38240 <flatcc_json_printer_uint32_vector_field@@Base+0x284>
   38080:	mov	r2, r6
   38084:	mov	r1, r7
   38088:	mov	r0, r4
   3808c:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   38090:	ldr	r6, [r4, #20]
   38094:	mov	r3, #34	; 0x22
   38098:	strb	r3, [r6]
   3809c:	ldr	r1, [r4, #20]
   380a0:	ldrb	r3, [r4, #26]
   380a4:	clz	r3, r3
   380a8:	lsr	r3, r3, #5
   380ac:	add	r2, r1, r3
   380b0:	add	r2, r2, #1
   380b4:	mov	r0, #58	; 0x3a
   380b8:	str	r2, [r4, #20]
   380bc:	strb	r0, [r1, r3]
   380c0:	ldr	r3, [r4, #20]
   380c4:	mov	r2, #32
   380c8:	mov	ip, #91	; 0x5b
   380cc:	strb	r2, [r3]
   380d0:	ldrb	r3, [r4, #25]
   380d4:	ldr	r0, [r4, #20]
   380d8:	ldr	r2, [r4, #32]
   380dc:	adds	r3, r3, #0
   380e0:	movne	r3, #1
   380e4:	add	r1, r0, r3
   380e8:	add	r1, r1, #1
   380ec:	add	r2, r2, #1
   380f0:	cmp	sl, #0
   380f4:	str	r1, [r4, #20]
   380f8:	str	r2, [r4, #32]
   380fc:	strb	ip, [r0, r3]
   38100:	bne	38128 <flatcc_json_printer_uint32_vector_field@@Base+0x16c>
   38104:	ldr	r0, [r4, #20]
   38108:	ldrb	r3, [r4, #25]
   3810c:	cmp	r3, #0
   38110:	bne	3825c <flatcc_json_printer_uint32_vector_field@@Base+0x2a0>
   38114:	add	r2, r0, #1
   38118:	mov	r3, #93	; 0x5d
   3811c:	str	r2, [r4, #20]
   38120:	strb	r3, [r0]
   38124:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38128:	ldrb	r3, [r4, #25]
   3812c:	cmp	r3, #0
   38130:	bne	3830c <flatcc_json_printer_uint32_vector_field@@Base+0x350>
   38134:	ldr	r1, [r4, #20]
   38138:	ldr	r2, [r4, #16]
   3813c:	cmp	r1, r2
   38140:	bcs	38330 <flatcc_json_printer_uint32_vector_field@@Base+0x374>
   38144:	ldr	r0, [r5, #4]
   38148:	bl	3037c <flatcc_json_parser_table_as_root@@Base+0x190>
   3814c:	ldr	r3, [r4, #20]
   38150:	cmp	sl, #1
   38154:	add	r5, r5, #8
   38158:	sub	sl, sl, #2
   3815c:	add	r0, r3, r0
   38160:	str	r0, [r4, #20]
   38164:	beq	38108 <flatcc_json_printer_uint32_vector_field@@Base+0x14c>
   38168:	mov	r6, #44	; 0x2c
   3816c:	mov	r9, #0
   38170:	mov	r8, #10
   38174:	mov	r7, #32
   38178:	b	381ac <flatcc_json_printer_uint32_vector_field@@Base+0x1f0>
   3817c:	ldr	r1, [r4, #20]
   38180:	ldr	r3, [r4, #16]
   38184:	cmp	r1, r3
   38188:	bcs	38214 <flatcc_json_printer_uint32_vector_field@@Base+0x258>
   3818c:	ldr	r0, [r5], #4
   38190:	bl	3037c <flatcc_json_parser_table_as_root@@Base+0x190>
   38194:	ldr	r3, [r4, #20]
   38198:	cmp	sl, #0
   3819c:	sub	sl, sl, #1
   381a0:	add	r0, r3, r0
   381a4:	str	r0, [r4, #20]
   381a8:	beq	38108 <flatcc_json_printer_uint32_vector_field@@Base+0x14c>
   381ac:	add	r3, r0, #1
   381b0:	str	r3, [r4, #20]
   381b4:	strb	r6, [r0]
   381b8:	ldrb	r3, [r4, #25]
   381bc:	cmp	r3, #0
   381c0:	beq	3817c <flatcc_json_printer_uint32_vector_field@@Base+0x1c0>
   381c4:	ldr	r3, [r4, #20]
   381c8:	mov	r1, r7
   381cc:	add	r2, r3, #1
   381d0:	str	r2, [r4, #20]
   381d4:	strb	r8, [r3]
   381d8:	ldrb	r2, [r4, #25]
   381dc:	ldr	fp, [r4, #32]
   381e0:	ldr	r3, [r4, #20]
   381e4:	ldr	ip, [r4, #16]
   381e8:	mul	fp, fp, r2
   381ec:	mov	r0, r3
   381f0:	add	r3, r3, fp
   381f4:	cmp	ip, r3
   381f8:	mov	r2, fp
   381fc:	bcc	3822c <flatcc_json_printer_uint32_vector_field@@Base+0x270>
   38200:	bl	145bc <memset@plt>
   38204:	ldr	r1, [r4, #20]
   38208:	add	r1, r1, fp
   3820c:	str	r1, [r4, #20]
   38210:	b	3818c <flatcc_json_printer_uint32_vector_field@@Base+0x1d0>
   38214:	mov	r1, r9
   38218:	ldr	r3, [r4, #44]	; 0x2c
   3821c:	mov	r0, r4
   38220:	blx	r3
   38224:	ldr	r1, [r4, #20]
   38228:	b	3818c <flatcc_json_printer_uint32_vector_field@@Base+0x1d0>
   3822c:	mov	r1, fp
   38230:	mov	r0, r4
   38234:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   38238:	ldr	r1, [r4, #20]
   3823c:	b	3818c <flatcc_json_printer_uint32_vector_field@@Base+0x1d0>
   38240:	mov	r2, r6
   38244:	mov	r1, r7
   38248:	bl	14544 <memcpy@plt>
   3824c:	ldr	r3, [r4, #20]
   38250:	add	r6, r3, r6
   38254:	str	r6, [r4, #20]
   38258:	b	38094 <flatcc_json_printer_uint32_vector_field@@Base+0xd8>
   3825c:	add	r2, r0, #1
   38260:	mov	r3, #10
   38264:	str	r2, [r4, #20]
   38268:	strb	r3, [r0]
   3826c:	ldr	r3, [r4, #32]
   38270:	ldrb	r5, [r4, #25]
   38274:	sub	r3, r3, #1
   38278:	ldr	r0, [r4, #20]
   3827c:	ldr	r2, [r4, #16]
   38280:	mul	r5, r3, r5
   38284:	str	r3, [r4, #32]
   38288:	add	r3, r0, r5
   3828c:	cmp	r2, r3
   38290:	bcc	382ac <flatcc_json_printer_uint32_vector_field@@Base+0x2f0>
   38294:	mov	r2, r5
   38298:	mov	r1, #32
   3829c:	bl	145bc <memset@plt>
   382a0:	ldr	r0, [r4, #20]
   382a4:	add	r0, r0, r5
   382a8:	b	38114 <flatcc_json_printer_uint32_vector_field@@Base+0x158>
   382ac:	mov	r0, r4
   382b0:	mov	r1, r5
   382b4:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   382b8:	ldr	r0, [r4, #20]
   382bc:	b	38114 <flatcc_json_printer_uint32_vector_field@@Base+0x158>
   382c0:	mov	r2, #10
   382c4:	add	r1, r3, #1
   382c8:	str	r1, [r0, #20]
   382cc:	strb	r2, [r3]
   382d0:	ldrb	r3, [r0, #25]
   382d4:	ldr	r8, [r0, #32]
   382d8:	ldr	r0, [r0, #20]
   382dc:	ldr	r2, [r4, #16]
   382e0:	mul	r8, r8, r3
   382e4:	add	r3, r0, r8
   382e8:	cmp	r2, r3
   382ec:	bcc	38348 <flatcc_json_printer_uint32_vector_field@@Base+0x38c>
   382f0:	mov	r2, r8
   382f4:	mov	r1, #32
   382f8:	bl	145bc <memset@plt>
   382fc:	ldr	r3, [r4, #20]
   38300:	add	r3, r3, r8
   38304:	str	r3, [r4, #20]
   38308:	b	38054 <flatcc_json_printer_uint32_vector_field@@Base+0x98>
   3830c:	ldr	r3, [r4, #20]
   38310:	mov	r2, #10
   38314:	add	r1, r3, #1
   38318:	str	r1, [r4, #20]
   3831c:	mov	r0, r4
   38320:	strb	r2, [r3]
   38324:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   38328:	ldr	r1, [r4, #20]
   3832c:	b	38144 <flatcc_json_printer_uint32_vector_field@@Base+0x188>
   38330:	mov	r1, r3
   38334:	mov	r0, r4
   38338:	ldr	r3, [r4, #44]	; 0x2c
   3833c:	blx	r3
   38340:	ldr	r1, [r4, #20]
   38344:	b	38144 <flatcc_json_printer_uint32_vector_field@@Base+0x188>
   38348:	mov	r1, r8
   3834c:	mov	r0, r4
   38350:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   38354:	ldr	r3, [r4, #20]
   38358:	b	38054 <flatcc_json_printer_uint32_vector_field@@Base+0x98>

0003835c <flatcc_json_printer_uint64_vector_field@@Base>:
   3835c:	add	r2, r2, #2
   38360:	ldr	ip, [r1, #8]
   38364:	lsl	r2, r2, #1
   38368:	cmp	ip, r2
   3836c:	bxle	lr
   38370:	ldr	ip, [r1, #4]
   38374:	ldrh	ip, [ip, r2]
   38378:	cmp	ip, #0
   3837c:	bxeq	lr
   38380:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38384:	ldr	r5, [r1]
   38388:	adds	lr, r5, ip
   3838c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38390:	ldr	r2, [r1, #16]
   38394:	cmp	r2, #0
   38398:	add	r2, r2, #1
   3839c:	str	r2, [r1, #16]
   383a0:	ldrne	r2, [r0, #20]
   383a4:	movne	r1, #44	; 0x2c
   383a8:	addne	r4, r2, #1
   383ac:	strne	r4, [r0, #20]
   383b0:	strbne	r1, [r2]
   383b4:	mov	r1, r3
   383b8:	ldr	r3, [r5, ip]
   383bc:	mov	r4, r0
   383c0:	ldr	r2, [sp, #40]	; 0x28
   383c4:	ldr	sl, [lr, r3]
   383c8:	add	r5, lr, r3
   383cc:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   383d0:	ldr	r3, [r4, #32]
   383d4:	ldr	r2, [r4, #20]
   383d8:	add	r3, r3, #1
   383dc:	add	r0, r2, #1
   383e0:	mov	r1, #91	; 0x5b
   383e4:	cmp	sl, #0
   383e8:	str	r3, [r4, #32]
   383ec:	str	r0, [r4, #20]
   383f0:	strb	r1, [r2]
   383f4:	bne	3841c <flatcc_json_printer_uint64_vector_field@@Base+0xc0>
   383f8:	ldr	r0, [r4, #20]
   383fc:	ldrb	r3, [r4, #25]
   38400:	cmp	r3, #0
   38404:	bne	38534 <flatcc_json_printer_uint64_vector_field@@Base+0x1d8>
   38408:	add	r2, r0, #1
   3840c:	mov	r3, #93	; 0x5d
   38410:	str	r2, [r4, #20]
   38414:	strb	r3, [r0]
   38418:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3841c:	ldrb	r1, [r4, #25]
   38420:	cmp	r1, #0
   38424:	bne	38598 <flatcc_json_printer_uint64_vector_field@@Base+0x23c>
   38428:	ldr	r2, [r4, #20]
   3842c:	ldr	r3, [r4, #16]
   38430:	cmp	r2, r3
   38434:	bcs	385bc <flatcc_json_printer_uint64_vector_field@@Base+0x260>
   38438:	ldrd	r0, [r5, #4]
   3843c:	bl	306e8 <flatcc_json_parser_table_as_root@@Base+0x4fc>
   38440:	ldr	r3, [r4, #20]
   38444:	cmp	sl, #1
   38448:	add	r5, r5, #12
   3844c:	sub	sl, sl, #2
   38450:	add	r0, r3, r0
   38454:	str	r0, [r4, #20]
   38458:	beq	383fc <flatcc_json_printer_uint64_vector_field@@Base+0xa0>
   3845c:	mov	r6, #44	; 0x2c
   38460:	mov	r9, #0
   38464:	mov	r8, #10
   38468:	mov	r7, #32
   3846c:	b	384a0 <flatcc_json_printer_uint64_vector_field@@Base+0x144>
   38470:	ldr	r2, [r4, #20]
   38474:	ldr	r3, [r4, #16]
   38478:	cmp	r2, r3
   3847c:	bcs	38508 <flatcc_json_printer_uint64_vector_field@@Base+0x1ac>
   38480:	ldrd	r0, [r5], #8
   38484:	bl	306e8 <flatcc_json_parser_table_as_root@@Base+0x4fc>
   38488:	ldr	r3, [r4, #20]
   3848c:	cmp	sl, #0
   38490:	sub	sl, sl, #1
   38494:	add	r0, r3, r0
   38498:	str	r0, [r4, #20]
   3849c:	beq	383fc <flatcc_json_printer_uint64_vector_field@@Base+0xa0>
   384a0:	add	r3, r0, #1
   384a4:	str	r3, [r4, #20]
   384a8:	strb	r6, [r0]
   384ac:	ldrb	r3, [r4, #25]
   384b0:	cmp	r3, #0
   384b4:	beq	38470 <flatcc_json_printer_uint64_vector_field@@Base+0x114>
   384b8:	ldr	r3, [r4, #20]
   384bc:	mov	r1, r7
   384c0:	add	r2, r3, #1
   384c4:	str	r2, [r4, #20]
   384c8:	strb	r8, [r3]
   384cc:	ldrb	r2, [r4, #25]
   384d0:	ldr	fp, [r4, #32]
   384d4:	ldr	r3, [r4, #20]
   384d8:	ldr	ip, [r4, #16]
   384dc:	mul	fp, fp, r2
   384e0:	mov	r0, r3
   384e4:	add	r3, r3, fp
   384e8:	cmp	ip, r3
   384ec:	mov	r2, fp
   384f0:	bcc	38520 <flatcc_json_printer_uint64_vector_field@@Base+0x1c4>
   384f4:	bl	145bc <memset@plt>
   384f8:	ldr	r2, [r4, #20]
   384fc:	add	r2, r2, fp
   38500:	str	r2, [r4, #20]
   38504:	b	38480 <flatcc_json_printer_uint64_vector_field@@Base+0x124>
   38508:	ldr	r3, [r4, #44]	; 0x2c
   3850c:	mov	r1, r9
   38510:	mov	r0, r4
   38514:	blx	r3
   38518:	ldr	r2, [r4, #20]
   3851c:	b	38480 <flatcc_json_printer_uint64_vector_field@@Base+0x124>
   38520:	mov	r1, fp
   38524:	mov	r0, r4
   38528:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3852c:	ldr	r2, [r4, #20]
   38530:	b	38480 <flatcc_json_printer_uint64_vector_field@@Base+0x124>
   38534:	add	r2, r0, #1
   38538:	mov	r3, #10
   3853c:	str	r2, [r4, #20]
   38540:	strb	r3, [r0]
   38544:	ldr	r3, [r4, #32]
   38548:	ldrb	r5, [r4, #25]
   3854c:	sub	r3, r3, #1
   38550:	ldr	r0, [r4, #20]
   38554:	ldr	r2, [r4, #16]
   38558:	mul	r5, r3, r5
   3855c:	str	r3, [r4, #32]
   38560:	add	r3, r0, r5
   38564:	cmp	r2, r3
   38568:	bcc	38584 <flatcc_json_printer_uint64_vector_field@@Base+0x228>
   3856c:	mov	r2, r5
   38570:	mov	r1, #32
   38574:	bl	145bc <memset@plt>
   38578:	ldr	r0, [r4, #20]
   3857c:	add	r0, r0, r5
   38580:	b	38408 <flatcc_json_printer_uint64_vector_field@@Base+0xac>
   38584:	mov	r0, r4
   38588:	mov	r1, r5
   3858c:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   38590:	ldr	r0, [r4, #20]
   38594:	b	38408 <flatcc_json_printer_uint64_vector_field@@Base+0xac>
   38598:	ldr	r3, [r4, #20]
   3859c:	mov	r2, #10
   385a0:	add	r1, r3, #1
   385a4:	str	r1, [r4, #20]
   385a8:	mov	r0, r4
   385ac:	strb	r2, [r3]
   385b0:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   385b4:	ldr	r2, [r4, #20]
   385b8:	b	38438 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   385bc:	ldr	r3, [r4, #44]	; 0x2c
   385c0:	mov	r0, r4
   385c4:	blx	r3
   385c8:	ldr	r2, [r4, #20]
   385cc:	b	38438 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>

000385d0 <flatcc_json_printer_int8_vector_field@@Base>:
   385d0:	add	r2, r2, #2
   385d4:	ldr	ip, [r1, #8]
   385d8:	lsl	r2, r2, #1
   385dc:	cmp	ip, r2
   385e0:	bxle	lr
   385e4:	ldr	ip, [r1, #4]
   385e8:	ldrh	ip, [ip, r2]
   385ec:	cmp	ip, #0
   385f0:	bxeq	lr
   385f4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   385f8:	ldr	lr, [r1]
   385fc:	adds	r5, lr, ip
   38600:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38604:	ldr	r2, [r1, #16]
   38608:	cmp	r2, #0
   3860c:	add	r2, r2, #1
   38610:	str	r2, [r1, #16]
   38614:	ldrne	r2, [r0, #20]
   38618:	movne	r1, #44	; 0x2c
   3861c:	addne	r4, r2, #1
   38620:	strne	r4, [r0, #20]
   38624:	strbne	r1, [r2]
   38628:	mov	r1, r3
   3862c:	ldr	r3, [lr, ip]
   38630:	mov	r4, r0
   38634:	ldr	r2, [sp, #40]	; 0x28
   38638:	ldr	r6, [r5, r3]
   3863c:	add	r7, r5, r3
   38640:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   38644:	ldr	r3, [r4, #32]
   38648:	ldr	r2, [r4, #20]
   3864c:	add	r3, r3, #1
   38650:	add	r0, r2, #1
   38654:	mov	r1, #91	; 0x5b
   38658:	cmp	r6, #0
   3865c:	str	r3, [r4, #32]
   38660:	str	r0, [r4, #20]
   38664:	strb	r1, [r2]
   38668:	bne	38690 <flatcc_json_printer_int8_vector_field@@Base+0xc0>
   3866c:	ldr	r0, [r4, #20]
   38670:	ldrb	r3, [r4, #25]
   38674:	cmp	r3, #0
   38678:	bne	387ec <flatcc_json_printer_int8_vector_field@@Base+0x21c>
   3867c:	add	r2, r0, #1
   38680:	mov	r3, #93	; 0x5d
   38684:	str	r2, [r4, #20]
   38688:	strb	r3, [r0]
   3868c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38690:	ldrb	r3, [r4, #25]
   38694:	cmp	r3, #0
   38698:	bne	38850 <flatcc_json_printer_int8_vector_field@@Base+0x280>
   3869c:	ldr	r1, [r4, #20]
   386a0:	ldr	r2, [r4, #16]
   386a4:	cmp	r1, r2
   386a8:	bcs	38874 <flatcc_json_printer_int8_vector_field@@Base+0x2a4>
   386ac:	ldrsb	r0, [r7, #4]
   386b0:	add	fp, r7, #4
   386b4:	cmp	r0, #0
   386b8:	lsr	r5, r0, #31
   386bc:	rsblt	r0, r0, #0
   386c0:	movlt	r3, #45	; 0x2d
   386c4:	sxtblt	r0, r0
   386c8:	strblt	r3, [r1]
   386cc:	uxtb	r0, r0
   386d0:	addlt	r1, r1, #1
   386d4:	bl	31344 <flatcc_json_parser_table_as_root@@Base+0x1158>
   386d8:	ldr	r3, [r4, #20]
   386dc:	cmp	r6, #1
   386e0:	add	r0, r5, r0
   386e4:	add	r0, r3, r0
   386e8:	str	r0, [r4, #20]
   386ec:	beq	38670 <flatcc_json_printer_int8_vector_field@@Base+0xa0>
   386f0:	mov	r8, #44	; 0x2c
   386f4:	mov	sl, #10
   386f8:	mov	r9, #32
   386fc:	b	38758 <flatcc_json_printer_int8_vector_field@@Base+0x188>
   38700:	ldr	r1, [r4, #20]
   38704:	ldr	r3, [r4, #16]
   38708:	cmp	r1, r3
   3870c:	bcs	387c0 <flatcc_json_printer_int8_vector_field@@Base+0x1f0>
   38710:	ldrsb	r0, [fp, #1]!
   38714:	cmp	r0, #0
   38718:	lsr	r5, r0, #31
   3871c:	rsblt	r0, r0, #0
   38720:	movlt	r3, #45	; 0x2d
   38724:	sxtblt	r0, r0
   38728:	strblt	r3, [r1]
   3872c:	uxtb	r0, r0
   38730:	addlt	r1, r1, #1
   38734:	bl	31344 <flatcc_json_parser_table_as_root@@Base+0x1158>
   38738:	ldr	r3, [r4, #20]
   3873c:	rsb	r2, fp, #3
   38740:	add	r2, r2, r6
   38744:	cmn	r7, r2
   38748:	add	r0, r5, r0
   3874c:	add	r0, r3, r0
   38750:	str	r0, [r4, #20]
   38754:	beq	38670 <flatcc_json_printer_int8_vector_field@@Base+0xa0>
   38758:	add	r3, r0, #1
   3875c:	str	r3, [r4, #20]
   38760:	strb	r8, [r0]
   38764:	ldrb	r3, [r4, #25]
   38768:	cmp	r3, #0
   3876c:	beq	38700 <flatcc_json_printer_int8_vector_field@@Base+0x130>
   38770:	ldr	r3, [r4, #20]
   38774:	mov	r1, r9
   38778:	add	r2, r3, #1
   3877c:	str	r2, [r4, #20]
   38780:	strb	sl, [r3]
   38784:	ldrb	r2, [r4, #25]
   38788:	ldr	r5, [r4, #32]
   3878c:	ldr	r3, [r4, #20]
   38790:	ldr	ip, [r4, #16]
   38794:	mul	r5, r5, r2
   38798:	mov	r0, r3
   3879c:	add	r3, r3, r5
   387a0:	cmp	ip, r3
   387a4:	mov	r2, r5
   387a8:	bcc	387d8 <flatcc_json_printer_int8_vector_field@@Base+0x208>
   387ac:	bl	145bc <memset@plt>
   387b0:	ldr	r1, [r4, #20]
   387b4:	add	r1, r1, r5
   387b8:	str	r1, [r4, #20]
   387bc:	b	38710 <flatcc_json_printer_int8_vector_field@@Base+0x140>
   387c0:	mov	r1, #0
   387c4:	ldr	r3, [r4, #44]	; 0x2c
   387c8:	mov	r0, r4
   387cc:	blx	r3
   387d0:	ldr	r1, [r4, #20]
   387d4:	b	38710 <flatcc_json_printer_int8_vector_field@@Base+0x140>
   387d8:	mov	r1, r5
   387dc:	mov	r0, r4
   387e0:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   387e4:	ldr	r1, [r4, #20]
   387e8:	b	38710 <flatcc_json_printer_int8_vector_field@@Base+0x140>
   387ec:	add	r2, r0, #1
   387f0:	mov	r3, #10
   387f4:	str	r2, [r4, #20]
   387f8:	strb	r3, [r0]
   387fc:	ldr	r3, [r4, #32]
   38800:	ldrb	r5, [r4, #25]
   38804:	sub	r3, r3, #1
   38808:	ldr	r0, [r4, #20]
   3880c:	ldr	r2, [r4, #16]
   38810:	mul	r5, r3, r5
   38814:	str	r3, [r4, #32]
   38818:	add	r3, r0, r5
   3881c:	cmp	r2, r3
   38820:	bcc	3883c <flatcc_json_printer_int8_vector_field@@Base+0x26c>
   38824:	mov	r2, r5
   38828:	mov	r1, #32
   3882c:	bl	145bc <memset@plt>
   38830:	ldr	r0, [r4, #20]
   38834:	add	r0, r0, r5
   38838:	b	3867c <flatcc_json_printer_int8_vector_field@@Base+0xac>
   3883c:	mov	r0, r4
   38840:	mov	r1, r5
   38844:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   38848:	ldr	r0, [r4, #20]
   3884c:	b	3867c <flatcc_json_printer_int8_vector_field@@Base+0xac>
   38850:	ldr	r3, [r4, #20]
   38854:	mov	r2, #10
   38858:	add	r1, r3, #1
   3885c:	str	r1, [r4, #20]
   38860:	mov	r0, r4
   38864:	strb	r2, [r3]
   38868:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   3886c:	ldr	r1, [r4, #20]
   38870:	b	386ac <flatcc_json_printer_int8_vector_field@@Base+0xdc>
   38874:	mov	r1, r3
   38878:	mov	r0, r4
   3887c:	ldr	r3, [r4, #44]	; 0x2c
   38880:	blx	r3
   38884:	ldr	r1, [r4, #20]
   38888:	b	386ac <flatcc_json_printer_int8_vector_field@@Base+0xdc>

0003888c <flatcc_json_printer_int16_vector_field@@Base>:
   3888c:	add	r2, r2, #2
   38890:	ldr	ip, [r1, #8]
   38894:	lsl	r2, r2, #1
   38898:	cmp	ip, r2
   3889c:	bxle	lr
   388a0:	ldr	ip, [r1, #4]
   388a4:	ldrh	ip, [ip, r2]
   388a8:	cmp	ip, #0
   388ac:	bxeq	lr
   388b0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   388b4:	ldr	lr, [r1]
   388b8:	adds	r6, lr, ip
   388bc:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   388c0:	ldr	r2, [r1, #16]
   388c4:	cmp	r2, #0
   388c8:	add	r2, r2, #1
   388cc:	str	r2, [r1, #16]
   388d0:	ldrne	r2, [r0, #20]
   388d4:	movne	r1, #44	; 0x2c
   388d8:	addne	r4, r2, #1
   388dc:	strne	r4, [r0, #20]
   388e0:	strbne	r1, [r2]
   388e4:	mov	r1, r3
   388e8:	ldr	r3, [lr, ip]
   388ec:	mov	r4, r0
   388f0:	ldr	r2, [sp, #40]	; 0x28
   388f4:	ldr	fp, [r6, r3]
   388f8:	add	r5, r6, r3
   388fc:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   38900:	ldr	r3, [r4, #32]
   38904:	ldr	r2, [r4, #20]
   38908:	add	r3, r3, #1
   3890c:	add	r0, r2, #1
   38910:	mov	r1, #91	; 0x5b
   38914:	cmp	fp, #0
   38918:	str	r3, [r4, #32]
   3891c:	str	r0, [r4, #20]
   38920:	strb	r1, [r2]
   38924:	bne	3894c <flatcc_json_printer_int16_vector_field@@Base+0xc0>
   38928:	ldr	r0, [r4, #20]
   3892c:	ldrb	r3, [r4, #25]
   38930:	cmp	r3, #0
   38934:	bne	38aa8 <flatcc_json_printer_int16_vector_field@@Base+0x21c>
   38938:	add	r2, r0, #1
   3893c:	mov	r3, #93	; 0x5d
   38940:	str	r2, [r4, #20]
   38944:	strb	r3, [r0]
   38948:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3894c:	ldrb	r3, [r4, #25]
   38950:	cmp	r3, #0
   38954:	bne	38b0c <flatcc_json_printer_int16_vector_field@@Base+0x280>
   38958:	ldr	r1, [r4, #20]
   3895c:	ldr	r2, [r4, #16]
   38960:	cmp	r1, r2
   38964:	bcs	38b30 <flatcc_json_printer_int16_vector_field@@Base+0x2a4>
   38968:	ldrsh	r0, [r5, #4]
   3896c:	add	r5, r5, #4
   38970:	cmp	r0, #0
   38974:	lsr	r6, r0, #31
   38978:	rsblt	r0, r0, #0
   3897c:	movlt	r3, #45	; 0x2d
   38980:	sxthlt	r0, r0
   38984:	strblt	r3, [r1]
   38988:	uxth	r0, r0
   3898c:	addlt	r1, r1, #1
   38990:	bl	301f8 <flatcc_json_parser_table_as_root@@Base+0xc>
   38994:	ldr	r3, [r4, #20]
   38998:	cmp	fp, #1
   3899c:	sub	fp, fp, #2
   389a0:	add	r0, r6, r0
   389a4:	add	r0, r3, r0
   389a8:	str	r0, [r4, #20]
   389ac:	beq	3892c <flatcc_json_printer_int16_vector_field@@Base+0xa0>
   389b0:	mov	r6, #44	; 0x2c
   389b4:	mov	r8, #10
   389b8:	mov	r7, #32
   389bc:	mov	r9, #45	; 0x2d
   389c0:	b	38a14 <flatcc_json_printer_int16_vector_field@@Base+0x188>
   389c4:	ldr	r1, [r4, #20]
   389c8:	ldr	r3, [r4, #16]
   389cc:	cmp	r1, r3
   389d0:	bcs	38a7c <flatcc_json_printer_int16_vector_field@@Base+0x1f0>
   389d4:	ldrsh	r0, [r5, #2]!
   389d8:	cmp	r0, #0
   389dc:	lsr	sl, r0, #31
   389e0:	rsblt	r0, r0, #0
   389e4:	strblt	r9, [r1]
   389e8:	sxthlt	r0, r0
   389ec:	addlt	r1, r1, #1
   389f0:	uxth	r0, r0
   389f4:	bl	301f8 <flatcc_json_parser_table_as_root@@Base+0xc>
   389f8:	ldr	r2, [r4, #20]
   389fc:	cmp	fp, #0
   38a00:	sub	fp, fp, #1
   38a04:	add	r0, sl, r0
   38a08:	add	r0, r2, r0
   38a0c:	str	r0, [r4, #20]
   38a10:	beq	3892c <flatcc_json_printer_int16_vector_field@@Base+0xa0>
   38a14:	add	r3, r0, #1
   38a18:	str	r3, [r4, #20]
   38a1c:	strb	r6, [r0]
   38a20:	ldrb	r3, [r4, #25]
   38a24:	cmp	r3, #0
   38a28:	beq	389c4 <flatcc_json_printer_int16_vector_field@@Base+0x138>
   38a2c:	ldr	r3, [r4, #20]
   38a30:	mov	r1, r7
   38a34:	add	r2, r3, #1
   38a38:	str	r2, [r4, #20]
   38a3c:	strb	r8, [r3]
   38a40:	ldrb	r3, [r4, #25]
   38a44:	ldr	r2, [r4, #32]
   38a48:	ldr	ip, [r4, #20]
   38a4c:	ldr	lr, [r4, #16]
   38a50:	mul	sl, r2, r3
   38a54:	mov	r0, ip
   38a58:	add	ip, ip, sl
   38a5c:	cmp	lr, ip
   38a60:	mov	r2, sl
   38a64:	bcc	38a94 <flatcc_json_printer_int16_vector_field@@Base+0x208>
   38a68:	bl	145bc <memset@plt>
   38a6c:	ldr	r1, [r4, #20]
   38a70:	add	r1, r1, sl
   38a74:	str	r1, [r4, #20]
   38a78:	b	389d4 <flatcc_json_printer_int16_vector_field@@Base+0x148>
   38a7c:	mov	r1, #0
   38a80:	ldr	r3, [r4, #44]	; 0x2c
   38a84:	mov	r0, r4
   38a88:	blx	r3
   38a8c:	ldr	r1, [r4, #20]
   38a90:	b	389d4 <flatcc_json_printer_int16_vector_field@@Base+0x148>
   38a94:	mov	r1, sl
   38a98:	mov	r0, r4
   38a9c:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   38aa0:	ldr	r1, [r4, #20]
   38aa4:	b	389d4 <flatcc_json_printer_int16_vector_field@@Base+0x148>
   38aa8:	add	r2, r0, #1
   38aac:	mov	r3, #10
   38ab0:	str	r2, [r4, #20]
   38ab4:	strb	r3, [r0]
   38ab8:	ldr	r3, [r4, #32]
   38abc:	ldrb	r5, [r4, #25]
   38ac0:	sub	r3, r3, #1
   38ac4:	ldr	r0, [r4, #20]
   38ac8:	ldr	r2, [r4, #16]
   38acc:	mul	r5, r3, r5
   38ad0:	str	r3, [r4, #32]
   38ad4:	add	r3, r0, r5
   38ad8:	cmp	r2, r3
   38adc:	bcc	38af8 <flatcc_json_printer_int16_vector_field@@Base+0x26c>
   38ae0:	mov	r2, r5
   38ae4:	mov	r1, #32
   38ae8:	bl	145bc <memset@plt>
   38aec:	ldr	r0, [r4, #20]
   38af0:	add	r0, r0, r5
   38af4:	b	38938 <flatcc_json_printer_int16_vector_field@@Base+0xac>
   38af8:	mov	r0, r4
   38afc:	mov	r1, r5
   38b00:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   38b04:	ldr	r0, [r4, #20]
   38b08:	b	38938 <flatcc_json_printer_int16_vector_field@@Base+0xac>
   38b0c:	ldr	r3, [r4, #20]
   38b10:	mov	r2, #10
   38b14:	add	r1, r3, #1
   38b18:	str	r1, [r4, #20]
   38b1c:	mov	r0, r4
   38b20:	strb	r2, [r3]
   38b24:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   38b28:	ldr	r1, [r4, #20]
   38b2c:	b	38968 <flatcc_json_printer_int16_vector_field@@Base+0xdc>
   38b30:	mov	r1, r3
   38b34:	mov	r0, r4
   38b38:	ldr	r3, [r4, #44]	; 0x2c
   38b3c:	blx	r3
   38b40:	ldr	r1, [r4, #20]
   38b44:	b	38968 <flatcc_json_printer_int16_vector_field@@Base+0xdc>

00038b48 <flatcc_json_printer_int32_vector_field@@Base>:
   38b48:	add	r2, r2, #2
   38b4c:	ldr	ip, [r1, #8]
   38b50:	lsl	r2, r2, #1
   38b54:	cmp	ip, r2
   38b58:	bxle	lr
   38b5c:	ldr	ip, [r1, #4]
   38b60:	ldrh	ip, [ip, r2]
   38b64:	cmp	ip, #0
   38b68:	bxeq	lr
   38b6c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38b70:	ldr	lr, [r1]
   38b74:	adds	r6, lr, ip
   38b78:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38b7c:	ldr	r2, [r1, #16]
   38b80:	cmp	r2, #0
   38b84:	add	r2, r2, #1
   38b88:	str	r2, [r1, #16]
   38b8c:	ldrne	r2, [r0, #20]
   38b90:	movne	r1, #44	; 0x2c
   38b94:	addne	r4, r2, #1
   38b98:	strne	r4, [r0, #20]
   38b9c:	strbne	r1, [r2]
   38ba0:	mov	r1, r3
   38ba4:	ldr	r3, [lr, ip]
   38ba8:	mov	r4, r0
   38bac:	ldr	r2, [sp, #40]	; 0x28
   38bb0:	ldr	fp, [r6, r3]
   38bb4:	add	r5, r6, r3
   38bb8:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   38bbc:	ldr	r3, [r4, #32]
   38bc0:	ldr	r2, [r4, #20]
   38bc4:	add	r3, r3, #1
   38bc8:	add	r0, r2, #1
   38bcc:	mov	r1, #91	; 0x5b
   38bd0:	cmp	fp, #0
   38bd4:	str	r3, [r4, #32]
   38bd8:	str	r0, [r4, #20]
   38bdc:	strb	r1, [r2]
   38be0:	bne	38c08 <flatcc_json_printer_int32_vector_field@@Base+0xc0>
   38be4:	ldr	r0, [r4, #20]
   38be8:	ldrb	r3, [r4, #25]
   38bec:	cmp	r3, #0
   38bf0:	bne	38d54 <flatcc_json_printer_int32_vector_field@@Base+0x20c>
   38bf4:	add	r2, r0, #1
   38bf8:	mov	r3, #93	; 0x5d
   38bfc:	str	r2, [r4, #20]
   38c00:	strb	r3, [r0]
   38c04:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38c08:	ldrb	r3, [r4, #25]
   38c0c:	cmp	r3, #0
   38c10:	bne	38db8 <flatcc_json_printer_int32_vector_field@@Base+0x270>
   38c14:	ldr	r1, [r4, #20]
   38c18:	ldr	r2, [r4, #16]
   38c1c:	cmp	r1, r2
   38c20:	bcs	38ddc <flatcc_json_printer_int32_vector_field@@Base+0x294>
   38c24:	ldr	r0, [r5, #4]
   38c28:	add	r5, r5, #4
   38c2c:	cmp	r0, #0
   38c30:	movlt	r3, #45	; 0x2d
   38c34:	strblt	r3, [r1]
   38c38:	lsr	r6, r0, #31
   38c3c:	addlt	r1, r1, #1
   38c40:	rsblt	r0, r0, #0
   38c44:	bl	3037c <flatcc_json_parser_table_as_root@@Base+0x190>
   38c48:	ldr	r3, [r4, #20]
   38c4c:	cmp	fp, #1
   38c50:	sub	fp, fp, #2
   38c54:	add	r0, r6, r0
   38c58:	add	r0, r3, r0
   38c5c:	str	r0, [r4, #20]
   38c60:	beq	38be8 <flatcc_json_printer_int32_vector_field@@Base+0xa0>
   38c64:	mov	r6, #44	; 0x2c
   38c68:	mov	r8, #10
   38c6c:	mov	r7, #32
   38c70:	mov	r9, #45	; 0x2d
   38c74:	b	38cc0 <flatcc_json_printer_int32_vector_field@@Base+0x178>
   38c78:	ldr	r1, [r4, #20]
   38c7c:	ldr	r3, [r4, #16]
   38c80:	cmp	r1, r3
   38c84:	bcs	38d28 <flatcc_json_printer_int32_vector_field@@Base+0x1e0>
   38c88:	ldr	r0, [r5, #4]!
   38c8c:	cmp	r0, #0
   38c90:	lsr	sl, r0, #31
   38c94:	strblt	r9, [r1]
   38c98:	rsblt	r0, r0, #0
   38c9c:	addlt	r1, r1, #1
   38ca0:	bl	3037c <flatcc_json_parser_table_as_root@@Base+0x190>
   38ca4:	ldr	r2, [r4, #20]
   38ca8:	cmp	fp, #0
   38cac:	sub	fp, fp, #1
   38cb0:	add	r0, sl, r0
   38cb4:	add	r0, r2, r0
   38cb8:	str	r0, [r4, #20]
   38cbc:	beq	38be8 <flatcc_json_printer_int32_vector_field@@Base+0xa0>
   38cc0:	add	r3, r0, #1
   38cc4:	str	r3, [r4, #20]
   38cc8:	strb	r6, [r0]
   38ccc:	ldrb	r3, [r4, #25]
   38cd0:	cmp	r3, #0
   38cd4:	beq	38c78 <flatcc_json_printer_int32_vector_field@@Base+0x130>
   38cd8:	ldr	r3, [r4, #20]
   38cdc:	mov	r1, r7
   38ce0:	add	r2, r3, #1
   38ce4:	str	r2, [r4, #20]
   38ce8:	strb	r8, [r3]
   38cec:	ldrb	r3, [r4, #25]
   38cf0:	ldr	r2, [r4, #32]
   38cf4:	ldr	ip, [r4, #20]
   38cf8:	ldr	lr, [r4, #16]
   38cfc:	mul	sl, r2, r3
   38d00:	mov	r0, ip
   38d04:	add	ip, ip, sl
   38d08:	cmp	lr, ip
   38d0c:	mov	r2, sl
   38d10:	bcc	38d40 <flatcc_json_printer_int32_vector_field@@Base+0x1f8>
   38d14:	bl	145bc <memset@plt>
   38d18:	ldr	r1, [r4, #20]
   38d1c:	add	r1, r1, sl
   38d20:	str	r1, [r4, #20]
   38d24:	b	38c88 <flatcc_json_printer_int32_vector_field@@Base+0x140>
   38d28:	mov	r1, #0
   38d2c:	ldr	r3, [r4, #44]	; 0x2c
   38d30:	mov	r0, r4
   38d34:	blx	r3
   38d38:	ldr	r1, [r4, #20]
   38d3c:	b	38c88 <flatcc_json_printer_int32_vector_field@@Base+0x140>
   38d40:	mov	r1, sl
   38d44:	mov	r0, r4
   38d48:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   38d4c:	ldr	r1, [r4, #20]
   38d50:	b	38c88 <flatcc_json_printer_int32_vector_field@@Base+0x140>
   38d54:	add	r2, r0, #1
   38d58:	mov	r3, #10
   38d5c:	str	r2, [r4, #20]
   38d60:	strb	r3, [r0]
   38d64:	ldr	r3, [r4, #32]
   38d68:	ldrb	r5, [r4, #25]
   38d6c:	sub	r3, r3, #1
   38d70:	ldr	r0, [r4, #20]
   38d74:	ldr	r2, [r4, #16]
   38d78:	mul	r5, r3, r5
   38d7c:	str	r3, [r4, #32]
   38d80:	add	r3, r0, r5
   38d84:	cmp	r2, r3
   38d88:	bcc	38da4 <flatcc_json_printer_int32_vector_field@@Base+0x25c>
   38d8c:	mov	r2, r5
   38d90:	mov	r1, #32
   38d94:	bl	145bc <memset@plt>
   38d98:	ldr	r0, [r4, #20]
   38d9c:	add	r0, r0, r5
   38da0:	b	38bf4 <flatcc_json_printer_int32_vector_field@@Base+0xac>
   38da4:	mov	r0, r4
   38da8:	mov	r1, r5
   38dac:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   38db0:	ldr	r0, [r4, #20]
   38db4:	b	38bf4 <flatcc_json_printer_int32_vector_field@@Base+0xac>
   38db8:	ldr	r3, [r4, #20]
   38dbc:	mov	r2, #10
   38dc0:	add	r1, r3, #1
   38dc4:	str	r1, [r4, #20]
   38dc8:	mov	r0, r4
   38dcc:	strb	r2, [r3]
   38dd0:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   38dd4:	ldr	r1, [r4, #20]
   38dd8:	b	38c24 <flatcc_json_printer_int32_vector_field@@Base+0xdc>
   38ddc:	mov	r1, r3
   38de0:	mov	r0, r4
   38de4:	ldr	r3, [r4, #44]	; 0x2c
   38de8:	blx	r3
   38dec:	ldr	r1, [r4, #20]
   38df0:	b	38c24 <flatcc_json_printer_int32_vector_field@@Base+0xdc>

00038df4 <flatcc_json_printer_int64_vector_field@@Base>:
   38df4:	add	r2, r2, #2
   38df8:	ldr	ip, [r1, #8]
   38dfc:	lsl	r2, r2, #1
   38e00:	cmp	ip, r2
   38e04:	bxle	lr
   38e08:	ldr	ip, [r1, #4]
   38e0c:	ldrh	ip, [ip, r2]
   38e10:	cmp	ip, #0
   38e14:	bxeq	lr
   38e18:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38e1c:	ldr	lr, [r1]
   38e20:	adds	r6, lr, ip
   38e24:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38e28:	ldr	r2, [r1, #16]
   38e2c:	cmp	r2, #0
   38e30:	add	r2, r2, #1
   38e34:	str	r2, [r1, #16]
   38e38:	ldrne	r2, [r0, #20]
   38e3c:	movne	r1, #44	; 0x2c
   38e40:	addne	r4, r2, #1
   38e44:	strne	r4, [r0, #20]
   38e48:	strbne	r1, [r2]
   38e4c:	mov	r1, r3
   38e50:	ldr	r3, [lr, ip]
   38e54:	mov	r4, r0
   38e58:	ldr	r2, [sp, #40]	; 0x28
   38e5c:	ldr	fp, [r6, r3]
   38e60:	add	r5, r6, r3
   38e64:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   38e68:	ldr	r3, [r4, #32]
   38e6c:	ldr	r2, [r4, #20]
   38e70:	add	r3, r3, #1
   38e74:	add	r0, r2, #1
   38e78:	mov	r1, #91	; 0x5b
   38e7c:	cmp	fp, #0
   38e80:	str	r3, [r4, #32]
   38e84:	str	r0, [r4, #20]
   38e88:	strb	r1, [r2]
   38e8c:	bne	38eb4 <flatcc_json_printer_int64_vector_field@@Base+0xc0>
   38e90:	ldr	r0, [r4, #20]
   38e94:	ldrb	r3, [r4, #25]
   38e98:	cmp	r3, #0
   38e9c:	bne	39008 <flatcc_json_printer_int64_vector_field@@Base+0x214>
   38ea0:	add	r2, r0, #1
   38ea4:	mov	r3, #93	; 0x5d
   38ea8:	str	r2, [r4, #20]
   38eac:	strb	r3, [r0]
   38eb0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38eb4:	ldrb	r1, [r4, #25]
   38eb8:	cmp	r1, #0
   38ebc:	bne	3906c <flatcc_json_printer_int64_vector_field@@Base+0x278>
   38ec0:	ldr	r2, [r4, #20]
   38ec4:	ldr	r3, [r4, #16]
   38ec8:	cmp	r2, r3
   38ecc:	bcs	390a8 <flatcc_json_printer_int64_vector_field@@Base+0x2b4>
   38ed0:	ldrd	r0, [r5, #4]
   38ed4:	add	r5, r5, #4
   38ed8:	cmp	r0, #0
   38edc:	sbcs	r3, r1, #0
   38ee0:	lsr	r6, r1, #31
   38ee4:	blt	39090 <flatcc_json_printer_int64_vector_field@@Base+0x29c>
   38ee8:	bl	306e8 <flatcc_json_parser_table_as_root@@Base+0x4fc>
   38eec:	ldr	r3, [r4, #20]
   38ef0:	cmp	fp, #1
   38ef4:	sub	fp, fp, #2
   38ef8:	add	r0, r6, r0
   38efc:	add	r0, r3, r0
   38f00:	str	r0, [r4, #20]
   38f04:	beq	38e94 <flatcc_json_printer_int64_vector_field@@Base+0xa0>
   38f08:	mov	r6, #44	; 0x2c
   38f0c:	mov	r8, #10
   38f10:	mov	r7, #32
   38f14:	mov	r9, #45	; 0x2d
   38f18:	b	38f60 <flatcc_json_printer_int64_vector_field@@Base+0x16c>
   38f1c:	ldr	r2, [r4, #20]
   38f20:	ldr	r3, [r4, #16]
   38f24:	cmp	r2, r3
   38f28:	bcs	38fdc <flatcc_json_printer_int64_vector_field@@Base+0x1e8>
   38f2c:	ldrd	r0, [r5, #8]!
   38f30:	cmp	r0, #0
   38f34:	sbcs	r3, r1, #0
   38f38:	lsr	sl, r1, #31
   38f3c:	blt	38fc8 <flatcc_json_printer_int64_vector_field@@Base+0x1d4>
   38f40:	bl	306e8 <flatcc_json_parser_table_as_root@@Base+0x4fc>
   38f44:	ldr	r2, [r4, #20]
   38f48:	cmp	fp, #0
   38f4c:	sub	fp, fp, #1
   38f50:	add	r0, sl, r0
   38f54:	add	r0, r2, r0
   38f58:	str	r0, [r4, #20]
   38f5c:	beq	38e94 <flatcc_json_printer_int64_vector_field@@Base+0xa0>
   38f60:	add	r3, r0, #1
   38f64:	str	r3, [r4, #20]
   38f68:	strb	r6, [r0]
   38f6c:	ldrb	r3, [r4, #25]
   38f70:	cmp	r3, #0
   38f74:	beq	38f1c <flatcc_json_printer_int64_vector_field@@Base+0x128>
   38f78:	ldr	r3, [r4, #20]
   38f7c:	mov	r1, r7
   38f80:	add	r2, r3, #1
   38f84:	str	r2, [r4, #20]
   38f88:	strb	r8, [r3]
   38f8c:	ldrb	r2, [r4, #25]
   38f90:	ldr	r3, [r4, #32]
   38f94:	ldr	ip, [r4, #20]
   38f98:	ldr	lr, [r4, #16]
   38f9c:	mul	sl, r3, r2
   38fa0:	mov	r0, ip
   38fa4:	add	ip, ip, sl
   38fa8:	cmp	lr, ip
   38fac:	mov	r2, sl
   38fb0:	bcc	38ff4 <flatcc_json_printer_int64_vector_field@@Base+0x200>
   38fb4:	bl	145bc <memset@plt>
   38fb8:	ldr	r2, [r4, #20]
   38fbc:	add	r2, r2, sl
   38fc0:	str	r2, [r4, #20]
   38fc4:	b	38f2c <flatcc_json_printer_int64_vector_field@@Base+0x138>
   38fc8:	rsbs	r0, r0, #0
   38fcc:	strb	r9, [r2]
   38fd0:	rsc	r1, r1, #0
   38fd4:	add	r2, r2, #1
   38fd8:	b	38f40 <flatcc_json_printer_int64_vector_field@@Base+0x14c>
   38fdc:	ldr	r3, [r4, #44]	; 0x2c
   38fe0:	mov	r1, #0
   38fe4:	mov	r0, r4
   38fe8:	blx	r3
   38fec:	ldr	r2, [r4, #20]
   38ff0:	b	38f2c <flatcc_json_printer_int64_vector_field@@Base+0x138>
   38ff4:	mov	r1, sl
   38ff8:	mov	r0, r4
   38ffc:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   39000:	ldr	r2, [r4, #20]
   39004:	b	38f2c <flatcc_json_printer_int64_vector_field@@Base+0x138>
   39008:	add	r2, r0, #1
   3900c:	mov	r3, #10
   39010:	str	r2, [r4, #20]
   39014:	strb	r3, [r0]
   39018:	ldr	r3, [r4, #32]
   3901c:	ldrb	r5, [r4, #25]
   39020:	sub	r3, r3, #1
   39024:	ldr	r0, [r4, #20]
   39028:	ldr	r2, [r4, #16]
   3902c:	mul	r5, r3, r5
   39030:	str	r3, [r4, #32]
   39034:	add	r3, r0, r5
   39038:	cmp	r2, r3
   3903c:	bcc	39058 <flatcc_json_printer_int64_vector_field@@Base+0x264>
   39040:	mov	r2, r5
   39044:	mov	r1, #32
   39048:	bl	145bc <memset@plt>
   3904c:	ldr	r0, [r4, #20]
   39050:	add	r0, r0, r5
   39054:	b	38ea0 <flatcc_json_printer_int64_vector_field@@Base+0xac>
   39058:	mov	r0, r4
   3905c:	mov	r1, r5
   39060:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   39064:	ldr	r0, [r4, #20]
   39068:	b	38ea0 <flatcc_json_printer_int64_vector_field@@Base+0xac>
   3906c:	ldr	r3, [r4, #20]
   39070:	mov	r2, #10
   39074:	add	r1, r3, #1
   39078:	str	r1, [r4, #20]
   3907c:	mov	r0, r4
   39080:	strb	r2, [r3]
   39084:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   39088:	ldr	r2, [r4, #20]
   3908c:	b	38ed0 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   39090:	mov	r3, #45	; 0x2d
   39094:	rsbs	r0, r0, #0
   39098:	strb	r3, [r2]
   3909c:	rsc	r1, r1, #0
   390a0:	add	r2, r2, #1
   390a4:	b	38ee8 <flatcc_json_printer_int64_vector_field@@Base+0xf4>
   390a8:	ldr	r3, [r4, #44]	; 0x2c
   390ac:	mov	r0, r4
   390b0:	blx	r3
   390b4:	ldr	r2, [r4, #20]
   390b8:	b	38ed0 <flatcc_json_printer_int64_vector_field@@Base+0xdc>

000390bc <flatcc_json_printer_bool_vector_field@@Base>:
   390bc:	add	r2, r2, #2
   390c0:	ldr	ip, [r1, #8]
   390c4:	lsl	r2, r2, #1
   390c8:	cmp	ip, r2
   390cc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   390d0:	ldr	r7, [sp, #40]	; 0x28
   390d4:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   390d8:	ldr	ip, [r1, #4]
   390dc:	ldrh	ip, [ip, r2]
   390e0:	cmp	ip, #0
   390e4:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   390e8:	ldr	r5, [r1]
   390ec:	adds	lr, r5, ip
   390f0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   390f4:	ldr	r2, [r1, #16]
   390f8:	mov	r8, r3
   390fc:	cmp	r2, #0
   39100:	add	r2, r2, #1
   39104:	str	r2, [r1, #16]
   39108:	ldrne	r2, [r0, #20]
   3910c:	movne	r1, #44	; 0x2c
   39110:	addne	r4, r2, #1
   39114:	strne	r4, [r0, #20]
   39118:	strbne	r1, [r2]
   3911c:	ldrb	r1, [r0, #25]
   39120:	ldr	r3, [r5, ip]
   39124:	mov	r4, r0
   39128:	cmp	r1, #0
   3912c:	add	r6, lr, r3
   39130:	ldr	r5, [lr, r3]
   39134:	ldr	r3, [r0, #20]
   39138:	bne	393bc <flatcc_json_printer_bool_vector_field@@Base+0x300>
   3913c:	ldr	r2, [r0, #16]
   39140:	cmp	r3, r2
   39144:	bcc	39154 <flatcc_json_printer_bool_vector_field@@Base+0x98>
   39148:	ldr	r3, [r0, #44]	; 0x2c
   3914c:	blx	r3
   39150:	ldr	r3, [r4, #20]
   39154:	mov	r2, #34	; 0x22
   39158:	strb	r2, [r3]
   3915c:	ldrb	r3, [r4, #26]
   39160:	ldr	r0, [r4, #20]
   39164:	ldr	r2, [r4, #16]
   39168:	cmp	r3, #0
   3916c:	addeq	r0, r0, #1
   39170:	add	r3, r0, r7
   39174:	cmp	r2, r3
   39178:	str	r0, [r4, #20]
   3917c:	bhi	3933c <flatcc_json_printer_bool_vector_field@@Base+0x280>
   39180:	mov	r2, r7
   39184:	mov	r1, r8
   39188:	mov	r0, r4
   3918c:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   39190:	ldr	r7, [r4, #20]
   39194:	mov	r3, #34	; 0x22
   39198:	strb	r3, [r7]
   3919c:	ldr	r1, [r4, #20]
   391a0:	ldrb	r3, [r4, #26]
   391a4:	clz	r3, r3
   391a8:	lsr	r3, r3, #5
   391ac:	add	r2, r1, r3
   391b0:	add	r2, r2, #1
   391b4:	mov	r0, #58	; 0x3a
   391b8:	str	r2, [r4, #20]
   391bc:	strb	r0, [r1, r3]
   391c0:	ldr	r3, [r4, #20]
   391c4:	mov	r1, #32
   391c8:	mov	lr, #91	; 0x5b
   391cc:	strb	r1, [r3]
   391d0:	ldrb	r3, [r4, #25]
   391d4:	ldr	ip, [r4, #20]
   391d8:	ldr	r2, [r4, #32]
   391dc:	adds	r3, r3, #0
   391e0:	movne	r3, #1
   391e4:	add	r0, ip, r3
   391e8:	add	r0, r0, #1
   391ec:	add	r2, r2, #1
   391f0:	cmp	r5, #0
   391f4:	str	r0, [r4, #20]
   391f8:	str	r2, [r4, #32]
   391fc:	strb	lr, [ip, r3]
   39200:	bne	39228 <flatcc_json_printer_bool_vector_field@@Base+0x16c>
   39204:	ldr	r0, [r4, #20]
   39208:	ldrb	r3, [r4, #25]
   3920c:	cmp	r3, #0
   39210:	bne	39358 <flatcc_json_printer_bool_vector_field@@Base+0x29c>
   39214:	add	r2, r0, #1
   39218:	mov	r3, #93	; 0x5d
   3921c:	str	r2, [r4, #20]
   39220:	strb	r3, [r0]
   39224:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39228:	ldrb	r3, [r4, #25]
   3922c:	cmp	r3, #0
   39230:	bne	39408 <flatcc_json_printer_bool_vector_field@@Base+0x34c>
   39234:	ldr	r1, [r4, #20]
   39238:	ldr	r2, [r4, #16]
   3923c:	cmp	r1, r2
   39240:	bcs	39454 <flatcc_json_printer_bool_vector_field@@Base+0x398>
   39244:	ldrb	r0, [r6, #4]
   39248:	bl	31434 <flatcc_json_parser_table_as_root@@Base+0x1248>
   3924c:	ldr	r3, [r4, #20]
   39250:	cmp	r5, #1
   39254:	add	fp, r6, #5
   39258:	add	r0, r3, r0
   3925c:	str	r0, [r4, #20]
   39260:	beq	39208 <flatcc_json_printer_bool_vector_field@@Base+0x14c>
   39264:	add	r5, r5, #4
   39268:	mov	r7, #44	; 0x2c
   3926c:	mov	r9, #10
   39270:	mov	r8, #32
   39274:	b	392a8 <flatcc_json_printer_bool_vector_field@@Base+0x1ec>
   39278:	ldr	r1, [r4, #20]
   3927c:	ldr	r3, [r4, #16]
   39280:	cmp	r1, r3
   39284:	bcs	39310 <flatcc_json_printer_bool_vector_field@@Base+0x254>
   39288:	ldrb	r0, [fp], #1
   3928c:	bl	31434 <flatcc_json_parser_table_as_root@@Base+0x1248>
   39290:	ldr	r3, [r4, #20]
   39294:	sub	r2, r5, fp
   39298:	cmn	r6, r2
   3929c:	add	r0, r3, r0
   392a0:	str	r0, [r4, #20]
   392a4:	beq	39208 <flatcc_json_printer_bool_vector_field@@Base+0x14c>
   392a8:	add	r3, r0, #1
   392ac:	str	r3, [r4, #20]
   392b0:	strb	r7, [r0]
   392b4:	ldrb	r3, [r4, #25]
   392b8:	cmp	r3, #0
   392bc:	beq	39278 <flatcc_json_printer_bool_vector_field@@Base+0x1bc>
   392c0:	ldr	r3, [r4, #20]
   392c4:	mov	r1, r8
   392c8:	add	r2, r3, #1
   392cc:	str	r2, [r4, #20]
   392d0:	strb	r9, [r3]
   392d4:	ldrb	r3, [r4, #25]
   392d8:	ldr	r2, [r4, #32]
   392dc:	ldr	ip, [r4, #20]
   392e0:	ldr	lr, [r4, #16]
   392e4:	mul	sl, r2, r3
   392e8:	mov	r0, ip
   392ec:	add	ip, ip, sl
   392f0:	cmp	lr, ip
   392f4:	mov	r2, sl
   392f8:	bcc	39328 <flatcc_json_printer_bool_vector_field@@Base+0x26c>
   392fc:	bl	145bc <memset@plt>
   39300:	ldr	r1, [r4, #20]
   39304:	add	r1, r1, sl
   39308:	str	r1, [r4, #20]
   3930c:	b	39288 <flatcc_json_printer_bool_vector_field@@Base+0x1cc>
   39310:	mov	r1, #0
   39314:	ldr	r3, [r4, #44]	; 0x2c
   39318:	mov	r0, r4
   3931c:	blx	r3
   39320:	ldr	r1, [r4, #20]
   39324:	b	39288 <flatcc_json_printer_bool_vector_field@@Base+0x1cc>
   39328:	mov	r1, sl
   3932c:	mov	r0, r4
   39330:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   39334:	ldr	r1, [r4, #20]
   39338:	b	39288 <flatcc_json_printer_bool_vector_field@@Base+0x1cc>
   3933c:	mov	r2, r7
   39340:	mov	r1, r8
   39344:	bl	14544 <memcpy@plt>
   39348:	ldr	r3, [r4, #20]
   3934c:	add	r7, r3, r7
   39350:	str	r7, [r4, #20]
   39354:	b	39194 <flatcc_json_printer_bool_vector_field@@Base+0xd8>
   39358:	add	r2, r0, #1
   3935c:	mov	r3, #10
   39360:	str	r2, [r4, #20]
   39364:	strb	r3, [r0]
   39368:	ldr	r3, [r4, #32]
   3936c:	ldrb	r5, [r4, #25]
   39370:	sub	r3, r3, #1
   39374:	ldr	r0, [r4, #20]
   39378:	ldr	r2, [r4, #16]
   3937c:	mul	r5, r3, r5
   39380:	str	r3, [r4, #32]
   39384:	add	r3, r0, r5
   39388:	cmp	r2, r3
   3938c:	bcc	393a8 <flatcc_json_printer_bool_vector_field@@Base+0x2ec>
   39390:	mov	r2, r5
   39394:	mov	r1, #32
   39398:	bl	145bc <memset@plt>
   3939c:	ldr	r0, [r4, #20]
   393a0:	add	r0, r0, r5
   393a4:	b	39214 <flatcc_json_printer_bool_vector_field@@Base+0x158>
   393a8:	mov	r0, r4
   393ac:	mov	r1, r5
   393b0:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   393b4:	ldr	r0, [r4, #20]
   393b8:	b	39214 <flatcc_json_printer_bool_vector_field@@Base+0x158>
   393bc:	mov	r2, #10
   393c0:	add	r1, r3, #1
   393c4:	str	r1, [r0, #20]
   393c8:	strb	r2, [r3]
   393cc:	ldrb	r3, [r0, #25]
   393d0:	ldr	r9, [r0, #32]
   393d4:	ldr	r0, [r0, #20]
   393d8:	ldr	r2, [r4, #16]
   393dc:	mul	r9, r9, r3
   393e0:	add	r3, r0, r9
   393e4:	cmp	r2, r3
   393e8:	bcc	3946c <flatcc_json_printer_bool_vector_field@@Base+0x3b0>
   393ec:	mov	r2, r9
   393f0:	mov	r1, #32
   393f4:	bl	145bc <memset@plt>
   393f8:	ldr	r3, [r4, #20]
   393fc:	add	r3, r3, r9
   39400:	str	r3, [r4, #20]
   39404:	b	39154 <flatcc_json_printer_bool_vector_field@@Base+0x98>
   39408:	ldr	r3, [r4, #20]
   3940c:	mov	r2, #10
   39410:	add	r0, r3, #1
   39414:	str	r0, [r4, #20]
   39418:	strb	r2, [r3]
   3941c:	ldrb	r3, [r4, #25]
   39420:	ldr	r7, [r4, #32]
   39424:	ldr	r0, [r4, #20]
   39428:	ldr	r2, [r4, #16]
   3942c:	mul	r7, r7, r3
   39430:	add	r3, r0, r7
   39434:	cmp	r2, r3
   39438:	bcc	39480 <flatcc_json_printer_bool_vector_field@@Base+0x3c4>
   3943c:	mov	r2, r7
   39440:	bl	145bc <memset@plt>
   39444:	ldr	r1, [r4, #20]
   39448:	add	r1, r1, r7
   3944c:	str	r1, [r4, #20]
   39450:	b	39244 <flatcc_json_printer_bool_vector_field@@Base+0x188>
   39454:	mov	r1, r3
   39458:	mov	r0, r4
   3945c:	ldr	r3, [r4, #44]	; 0x2c
   39460:	blx	r3
   39464:	ldr	r1, [r4, #20]
   39468:	b	39244 <flatcc_json_printer_bool_vector_field@@Base+0x188>
   3946c:	mov	r1, r9
   39470:	mov	r0, r4
   39474:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   39478:	ldr	r3, [r4, #20]
   3947c:	b	39154 <flatcc_json_printer_bool_vector_field@@Base+0x98>
   39480:	mov	r1, r7
   39484:	mov	r0, r4
   39488:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3948c:	ldr	r1, [r4, #20]
   39490:	b	39244 <flatcc_json_printer_bool_vector_field@@Base+0x188>

00039494 <flatcc_json_printer_float_vector_field@@Base>:
   39494:	add	r2, r2, #2
   39498:	ldr	ip, [r1, #8]
   3949c:	lsl	r2, r2, #1
   394a0:	cmp	ip, r2
   394a4:	bxle	lr
   394a8:	ldr	ip, [r1, #4]
   394ac:	ldrh	ip, [ip, r2]
   394b0:	cmp	ip, #0
   394b4:	bxeq	lr
   394b8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   394bc:	ldr	r5, [r1]
   394c0:	adds	lr, r5, ip
   394c4:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   394c8:	ldr	r2, [r1, #16]
   394cc:	cmp	r2, #0
   394d0:	add	r2, r2, #1
   394d4:	str	r2, [r1, #16]
   394d8:	ldrne	r2, [r0, #20]
   394dc:	movne	r1, #44	; 0x2c
   394e0:	addne	r4, r2, #1
   394e4:	strne	r4, [r0, #20]
   394e8:	strbne	r1, [r2]
   394ec:	mov	r1, r3
   394f0:	ldr	r3, [r5, ip]
   394f4:	mov	r4, r0
   394f8:	ldr	r2, [sp, #40]	; 0x28
   394fc:	ldr	r7, [lr, r3]
   39500:	add	r6, lr, r3
   39504:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   39508:	ldr	r3, [r4, #32]
   3950c:	ldr	r2, [r4, #20]
   39510:	add	r3, r3, #1
   39514:	add	r0, r2, #1
   39518:	mov	r1, #91	; 0x5b
   3951c:	cmp	r7, #0
   39520:	str	r3, [r4, #32]
   39524:	str	r0, [r4, #20]
   39528:	strb	r1, [r2]
   3952c:	bne	39554 <flatcc_json_printer_float_vector_field@@Base+0xc0>
   39530:	ldr	r0, [r4, #20]
   39534:	ldrb	r3, [r4, #25]
   39538:	cmp	r3, #0
   3953c:	bne	39674 <flatcc_json_printer_float_vector_field@@Base+0x1e0>
   39540:	add	r2, r0, #1
   39544:	mov	r3, #93	; 0x5d
   39548:	str	r2, [r4, #20]
   3954c:	strb	r3, [r0]
   39550:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39554:	ldrb	r1, [r4, #25]
   39558:	cmp	r1, #0
   3955c:	bne	396d8 <flatcc_json_printer_float_vector_field@@Base+0x244>
   39560:	ldr	r0, [r4, #20]
   39564:	ldr	r3, [r4, #16]
   39568:	cmp	r0, r3
   3956c:	bcs	396fc <flatcc_json_printer_float_vector_field@@Base+0x268>
   39570:	vldr	s0, [r6, #4]
   39574:	sub	r5, r7, #2
   39578:	add	r6, r6, #8
   3957c:	vcvt.f64.f32	d0, s0
   39580:	bl	31700 <flatcc_json_parser_table_as_root@@Base+0x1514>
   39584:	ldr	r3, [r4, #20]
   39588:	cmp	r7, #1
   3958c:	add	r0, r3, r0
   39590:	str	r0, [r4, #20]
   39594:	beq	39534 <flatcc_json_printer_float_vector_field@@Base+0xa0>
   39598:	mov	r7, #44	; 0x2c
   3959c:	mov	sl, #0
   395a0:	mov	r9, #10
   395a4:	mov	r8, #32
   395a8:	b	395e0 <flatcc_json_printer_float_vector_field@@Base+0x14c>
   395ac:	ldr	r0, [r4, #20]
   395b0:	ldr	r3, [r4, #16]
   395b4:	cmp	r0, r3
   395b8:	bcs	39648 <flatcc_json_printer_float_vector_field@@Base+0x1b4>
   395bc:	vldmia	r6!, {s0}
   395c0:	vcvt.f64.f32	d0, s0
   395c4:	bl	31700 <flatcc_json_parser_table_as_root@@Base+0x1514>
   395c8:	ldr	r3, [r4, #20]
   395cc:	cmp	r5, #0
   395d0:	sub	r5, r5, #1
   395d4:	add	r0, r3, r0
   395d8:	str	r0, [r4, #20]
   395dc:	beq	39534 <flatcc_json_printer_float_vector_field@@Base+0xa0>
   395e0:	add	r3, r0, #1
   395e4:	str	r3, [r4, #20]
   395e8:	strb	r7, [r0]
   395ec:	ldrb	r3, [r4, #25]
   395f0:	cmp	r3, #0
   395f4:	beq	395ac <flatcc_json_printer_float_vector_field@@Base+0x118>
   395f8:	ldr	r3, [r4, #20]
   395fc:	mov	r1, r8
   39600:	add	r2, r3, #1
   39604:	str	r2, [r4, #20]
   39608:	strb	r9, [r3]
   3960c:	ldrb	r0, [r4, #25]
   39610:	ldr	fp, [r4, #32]
   39614:	ldr	r3, [r4, #20]
   39618:	ldr	ip, [r4, #16]
   3961c:	mul	fp, fp, r0
   39620:	mov	r0, r3
   39624:	add	r3, r3, fp
   39628:	cmp	ip, r3
   3962c:	mov	r2, fp
   39630:	bcc	39660 <flatcc_json_printer_float_vector_field@@Base+0x1cc>
   39634:	bl	145bc <memset@plt>
   39638:	ldr	r0, [r4, #20]
   3963c:	add	r0, r0, fp
   39640:	str	r0, [r4, #20]
   39644:	b	395bc <flatcc_json_printer_float_vector_field@@Base+0x128>
   39648:	mov	r0, r4
   3964c:	ldr	r3, [r4, #44]	; 0x2c
   39650:	mov	r1, sl
   39654:	blx	r3
   39658:	ldr	r0, [r4, #20]
   3965c:	b	395bc <flatcc_json_printer_float_vector_field@@Base+0x128>
   39660:	mov	r0, r4
   39664:	mov	r1, fp
   39668:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3966c:	ldr	r0, [r4, #20]
   39670:	b	395bc <flatcc_json_printer_float_vector_field@@Base+0x128>
   39674:	add	r2, r0, #1
   39678:	mov	r3, #10
   3967c:	str	r2, [r4, #20]
   39680:	strb	r3, [r0]
   39684:	ldr	r3, [r4, #32]
   39688:	ldrb	r5, [r4, #25]
   3968c:	sub	r3, r3, #1
   39690:	ldr	r0, [r4, #20]
   39694:	ldr	r2, [r4, #16]
   39698:	mul	r5, r3, r5
   3969c:	str	r3, [r4, #32]
   396a0:	add	r3, r0, r5
   396a4:	cmp	r2, r3
   396a8:	bcc	396c4 <flatcc_json_printer_float_vector_field@@Base+0x230>
   396ac:	mov	r2, r5
   396b0:	mov	r1, #32
   396b4:	bl	145bc <memset@plt>
   396b8:	ldr	r0, [r4, #20]
   396bc:	add	r0, r0, r5
   396c0:	b	39540 <flatcc_json_printer_float_vector_field@@Base+0xac>
   396c4:	mov	r0, r4
   396c8:	mov	r1, r5
   396cc:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   396d0:	ldr	r0, [r4, #20]
   396d4:	b	39540 <flatcc_json_printer_float_vector_field@@Base+0xac>
   396d8:	ldr	r3, [r4, #20]
   396dc:	mov	r2, #10
   396e0:	add	r1, r3, #1
   396e4:	str	r1, [r4, #20]
   396e8:	mov	r0, r4
   396ec:	strb	r2, [r3]
   396f0:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   396f4:	ldr	r0, [r4, #20]
   396f8:	b	39570 <flatcc_json_printer_float_vector_field@@Base+0xdc>
   396fc:	mov	r0, r4
   39700:	ldr	r3, [r4, #44]	; 0x2c
   39704:	blx	r3
   39708:	ldr	r0, [r4, #20]
   3970c:	b	39570 <flatcc_json_printer_float_vector_field@@Base+0xdc>

00039710 <flatcc_json_printer_double_vector_field@@Base>:
   39710:	add	r2, r2, #2
   39714:	ldr	ip, [r1, #8]
   39718:	lsl	r2, r2, #1
   3971c:	cmp	ip, r2
   39720:	bxle	lr
   39724:	ldr	ip, [r1, #4]
   39728:	ldrh	ip, [ip, r2]
   3972c:	cmp	ip, #0
   39730:	bxeq	lr
   39734:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39738:	ldr	r5, [r1]
   3973c:	adds	lr, r5, ip
   39740:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39744:	ldr	r2, [r1, #16]
   39748:	cmp	r2, #0
   3974c:	add	r2, r2, #1
   39750:	str	r2, [r1, #16]
   39754:	ldrne	r2, [r0, #20]
   39758:	movne	r1, #44	; 0x2c
   3975c:	addne	r4, r2, #1
   39760:	strne	r4, [r0, #20]
   39764:	strbne	r1, [r2]
   39768:	mov	r1, r3
   3976c:	ldr	r3, [r5, ip]
   39770:	mov	r4, r0
   39774:	ldr	r2, [sp, #40]	; 0x28
   39778:	ldr	sl, [lr, r3]
   3977c:	add	r5, lr, r3
   39780:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   39784:	ldr	r3, [r4, #32]
   39788:	ldr	r2, [r4, #20]
   3978c:	add	r3, r3, #1
   39790:	add	r0, r2, #1
   39794:	mov	r1, #91	; 0x5b
   39798:	cmp	sl, #0
   3979c:	str	r3, [r4, #32]
   397a0:	str	r0, [r4, #20]
   397a4:	strb	r1, [r2]
   397a8:	bne	397d0 <flatcc_json_printer_double_vector_field@@Base+0xc0>
   397ac:	ldr	r0, [r4, #20]
   397b0:	ldrb	r3, [r4, #25]
   397b4:	cmp	r3, #0
   397b8:	bne	398e8 <flatcc_json_printer_double_vector_field@@Base+0x1d8>
   397bc:	add	r2, r0, #1
   397c0:	mov	r3, #93	; 0x5d
   397c4:	str	r2, [r4, #20]
   397c8:	strb	r3, [r0]
   397cc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   397d0:	ldrb	r1, [r4, #25]
   397d4:	cmp	r1, #0
   397d8:	bne	3994c <flatcc_json_printer_double_vector_field@@Base+0x23c>
   397dc:	ldr	r0, [r4, #20]
   397e0:	ldr	r3, [r4, #16]
   397e4:	cmp	r0, r3
   397e8:	bcs	39970 <flatcc_json_printer_double_vector_field@@Base+0x260>
   397ec:	vldr	d0, [r5, #4]
   397f0:	bl	31700 <flatcc_json_parser_table_as_root@@Base+0x1514>
   397f4:	ldr	r3, [r4, #20]
   397f8:	cmp	sl, #1
   397fc:	add	r5, r5, #12
   39800:	sub	sl, sl, #2
   39804:	add	r0, r3, r0
   39808:	str	r0, [r4, #20]
   3980c:	beq	397b0 <flatcc_json_printer_double_vector_field@@Base+0xa0>
   39810:	mov	r6, #44	; 0x2c
   39814:	mov	r9, #0
   39818:	mov	r8, #10
   3981c:	mov	r7, #32
   39820:	b	39854 <flatcc_json_printer_double_vector_field@@Base+0x144>
   39824:	ldr	r0, [r4, #20]
   39828:	ldr	r3, [r4, #16]
   3982c:	cmp	r0, r3
   39830:	bcs	398bc <flatcc_json_printer_double_vector_field@@Base+0x1ac>
   39834:	vldmia	r5!, {d0}
   39838:	bl	31700 <flatcc_json_parser_table_as_root@@Base+0x1514>
   3983c:	ldr	r3, [r4, #20]
   39840:	cmp	sl, #0
   39844:	sub	sl, sl, #1
   39848:	add	r0, r3, r0
   3984c:	str	r0, [r4, #20]
   39850:	beq	397b0 <flatcc_json_printer_double_vector_field@@Base+0xa0>
   39854:	add	r3, r0, #1
   39858:	str	r3, [r4, #20]
   3985c:	strb	r6, [r0]
   39860:	ldrb	r3, [r4, #25]
   39864:	cmp	r3, #0
   39868:	beq	39824 <flatcc_json_printer_double_vector_field@@Base+0x114>
   3986c:	ldr	r3, [r4, #20]
   39870:	mov	r1, r7
   39874:	add	r2, r3, #1
   39878:	str	r2, [r4, #20]
   3987c:	strb	r8, [r3]
   39880:	ldrb	r0, [r4, #25]
   39884:	ldr	fp, [r4, #32]
   39888:	ldr	r3, [r4, #20]
   3988c:	ldr	ip, [r4, #16]
   39890:	mul	fp, fp, r0
   39894:	mov	r0, r3
   39898:	add	r3, r3, fp
   3989c:	cmp	ip, r3
   398a0:	mov	r2, fp
   398a4:	bcc	398d4 <flatcc_json_printer_double_vector_field@@Base+0x1c4>
   398a8:	bl	145bc <memset@plt>
   398ac:	ldr	r0, [r4, #20]
   398b0:	add	r0, r0, fp
   398b4:	str	r0, [r4, #20]
   398b8:	b	39834 <flatcc_json_printer_double_vector_field@@Base+0x124>
   398bc:	mov	r0, r4
   398c0:	ldr	r3, [r4, #44]	; 0x2c
   398c4:	mov	r1, r9
   398c8:	blx	r3
   398cc:	ldr	r0, [r4, #20]
   398d0:	b	39834 <flatcc_json_printer_double_vector_field@@Base+0x124>
   398d4:	mov	r0, r4
   398d8:	mov	r1, fp
   398dc:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   398e0:	ldr	r0, [r4, #20]
   398e4:	b	39834 <flatcc_json_printer_double_vector_field@@Base+0x124>
   398e8:	add	r2, r0, #1
   398ec:	mov	r3, #10
   398f0:	str	r2, [r4, #20]
   398f4:	strb	r3, [r0]
   398f8:	ldr	r3, [r4, #32]
   398fc:	ldrb	r5, [r4, #25]
   39900:	sub	r3, r3, #1
   39904:	ldr	r0, [r4, #20]
   39908:	ldr	r2, [r4, #16]
   3990c:	mul	r5, r3, r5
   39910:	str	r3, [r4, #32]
   39914:	add	r3, r0, r5
   39918:	cmp	r2, r3
   3991c:	bcc	39938 <flatcc_json_printer_double_vector_field@@Base+0x228>
   39920:	mov	r2, r5
   39924:	mov	r1, #32
   39928:	bl	145bc <memset@plt>
   3992c:	ldr	r0, [r4, #20]
   39930:	add	r0, r0, r5
   39934:	b	397bc <flatcc_json_printer_double_vector_field@@Base+0xac>
   39938:	mov	r0, r4
   3993c:	mov	r1, r5
   39940:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   39944:	ldr	r0, [r4, #20]
   39948:	b	397bc <flatcc_json_printer_double_vector_field@@Base+0xac>
   3994c:	ldr	r3, [r4, #20]
   39950:	mov	r2, #10
   39954:	add	r1, r3, #1
   39958:	str	r1, [r4, #20]
   3995c:	mov	r0, r4
   39960:	strb	r2, [r3]
   39964:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   39968:	ldr	r0, [r4, #20]
   3996c:	b	397ec <flatcc_json_printer_double_vector_field@@Base+0xdc>
   39970:	mov	r0, r4
   39974:	ldr	r3, [r4, #44]	; 0x2c
   39978:	blx	r3
   3997c:	ldr	r0, [r4, #20]
   39980:	b	397ec <flatcc_json_printer_double_vector_field@@Base+0xdc>

00039984 <flatcc_json_printer_utype_enum_vector_field@@Base>:
   39984:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39988:	sub	sp, sp, #4
   3998c:	ldrb	r5, [r0, #27]
   39990:	ldr	r8, [sp, #44]	; 0x2c
   39994:	cmp	r5, #0
   39998:	ldr	r5, [sp, #40]	; 0x28
   3999c:	bne	39b24 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1a0>
   399a0:	mov	r6, r3
   399a4:	add	r3, r2, #2
   399a8:	ldr	r2, [r1, #8]
   399ac:	lsl	r3, r3, #1
   399b0:	cmp	r2, r3
   399b4:	mov	lr, r1
   399b8:	bgt	399c4 <flatcc_json_printer_utype_enum_vector_field@@Base+0x40>
   399bc:	add	sp, sp, #4
   399c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   399c4:	ldr	r2, [r1, #4]
   399c8:	ldrh	r2, [r2, r3]
   399cc:	cmp	r2, #0
   399d0:	beq	399bc <flatcc_json_printer_utype_enum_vector_field@@Base+0x38>
   399d4:	mov	r4, r0
   399d8:	ldr	r0, [r1]
   399dc:	adds	ip, r0, r2
   399e0:	beq	399bc <flatcc_json_printer_utype_enum_vector_field@@Base+0x38>
   399e4:	ldr	r3, [r1, #16]
   399e8:	cmp	r3, #0
   399ec:	add	r3, r3, #1
   399f0:	str	r3, [r1, #16]
   399f4:	ldrne	r3, [r4, #20]
   399f8:	movne	r1, #44	; 0x2c
   399fc:	addne	lr, r3, #1
   39a00:	strne	lr, [r4, #20]
   39a04:	strbne	r1, [r3]
   39a08:	ldr	r3, [r0, r2]
   39a0c:	mov	r1, r6
   39a10:	mov	r2, r5
   39a14:	mov	r0, r4
   39a18:	ldr	r6, [ip, r3]
   39a1c:	add	r7, ip, r3
   39a20:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   39a24:	ldr	r3, [r4, #32]
   39a28:	ldr	r2, [r4, #20]
   39a2c:	add	r3, r3, #1
   39a30:	add	r0, r2, #1
   39a34:	mov	r1, #91	; 0x5b
   39a38:	cmp	r6, #0
   39a3c:	str	r3, [r4, #32]
   39a40:	str	r0, [r4, #20]
   39a44:	strb	r1, [r2]
   39a48:	beq	39b54 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1d0>
   39a4c:	ldrb	r1, [r4, #25]
   39a50:	cmp	r1, #0
   39a54:	bne	39bd0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x24c>
   39a58:	ldr	r2, [r4, #20]
   39a5c:	ldr	r3, [r4, #16]
   39a60:	cmp	r2, r3
   39a64:	bcs	39c00 <flatcc_json_printer_utype_enum_vector_field@@Base+0x27c>
   39a68:	ldrb	r1, [r7, #4]
   39a6c:	mov	r0, r4
   39a70:	blx	r8
   39a74:	cmp	r6, #1
   39a78:	add	r5, r7, #5
   39a7c:	beq	39b54 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1d0>
   39a80:	add	r6, r6, #4
   39a84:	mov	r9, #44	; 0x2c
   39a88:	mov	fp, #10
   39a8c:	b	39ab8 <flatcc_json_printer_utype_enum_vector_field@@Base+0x134>
   39a90:	ldr	r2, [r4, #20]
   39a94:	ldr	r3, [r4, #16]
   39a98:	cmp	r2, r3
   39a9c:	bcs	39b30 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1ac>
   39aa0:	ldrb	r1, [r5], #1
   39aa4:	mov	r0, r4
   39aa8:	blx	r8
   39aac:	sub	r3, r6, r5
   39ab0:	cmn	r7, r3
   39ab4:	beq	39b54 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1d0>
   39ab8:	ldr	r3, [r4, #20]
   39abc:	add	r2, r3, #1
   39ac0:	str	r2, [r4, #20]
   39ac4:	strb	r9, [r3]
   39ac8:	ldrb	r3, [r4, #25]
   39acc:	cmp	r3, #0
   39ad0:	beq	39a90 <flatcc_json_printer_utype_enum_vector_field@@Base+0x10c>
   39ad4:	ldr	r3, [r4, #20]
   39ad8:	mov	r1, #32
   39adc:	add	r2, r3, #1
   39ae0:	str	r2, [r4, #20]
   39ae4:	strb	fp, [r3]
   39ae8:	ldrb	r2, [r4, #25]
   39aec:	ldr	sl, [r4, #32]
   39af0:	ldr	r3, [r4, #20]
   39af4:	ldr	ip, [r4, #16]
   39af8:	mul	sl, sl, r2
   39afc:	mov	r0, r3
   39b00:	add	r3, r3, sl
   39b04:	cmp	ip, r3
   39b08:	mov	r2, sl
   39b0c:	bcc	39b44 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1c0>
   39b10:	bl	145bc <memset@plt>
   39b14:	ldr	r3, [r4, #20]
   39b18:	add	sl, r3, sl
   39b1c:	str	sl, [r4, #20]
   39b20:	b	39aa0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x11c>
   39b24:	add	sp, sp, #4
   39b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39b2c:	b	37c18 <flatcc_json_printer_utype_vector_field@@Base>
   39b30:	ldr	r3, [r4, #44]	; 0x2c
   39b34:	mov	r1, #0
   39b38:	mov	r0, r4
   39b3c:	blx	r3
   39b40:	b	39aa0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x11c>
   39b44:	mov	r1, sl
   39b48:	mov	r0, r4
   39b4c:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   39b50:	b	39aa0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x11c>
   39b54:	ldrb	r3, [r4, #25]
   39b58:	cmp	r3, #0
   39b5c:	bne	39b7c <flatcc_json_printer_utype_enum_vector_field@@Base+0x1f8>
   39b60:	ldr	r3, [r4, #20]
   39b64:	add	r1, r3, #1
   39b68:	mov	r2, #93	; 0x5d
   39b6c:	str	r1, [r4, #20]
   39b70:	strb	r2, [r3]
   39b74:	add	sp, sp, #4
   39b78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39b7c:	ldr	r3, [r4, #20]
   39b80:	mov	r2, #10
   39b84:	add	r1, r3, #1
   39b88:	str	r1, [r4, #20]
   39b8c:	strb	r2, [r3]
   39b90:	ldr	r2, [r4, #32]
   39b94:	ldrb	r3, [r4, #25]
   39b98:	sub	r2, r2, #1
   39b9c:	ldr	r0, [r4, #20]
   39ba0:	ldr	r1, [r4, #16]
   39ba4:	mul	r5, r2, r3
   39ba8:	str	r2, [r4, #32]
   39bac:	add	r3, r0, r5
   39bb0:	cmp	r1, r3
   39bb4:	bcc	39bf0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x26c>
   39bb8:	mov	r2, r5
   39bbc:	mov	r1, #32
   39bc0:	bl	145bc <memset@plt>
   39bc4:	ldr	r3, [r4, #20]
   39bc8:	add	r3, r3, r5
   39bcc:	b	39b64 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1e0>
   39bd0:	ldr	r3, [r4, #20]
   39bd4:	mov	r2, #10
   39bd8:	add	r1, r3, #1
   39bdc:	str	r1, [r4, #20]
   39be0:	mov	r0, r4
   39be4:	strb	r2, [r3]
   39be8:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   39bec:	b	39a68 <flatcc_json_printer_utype_enum_vector_field@@Base+0xe4>
   39bf0:	mov	r1, r5
   39bf4:	mov	r0, r4
   39bf8:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   39bfc:	b	39b60 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1dc>
   39c00:	ldr	r3, [r4, #44]	; 0x2c
   39c04:	mov	r0, r4
   39c08:	blx	r3
   39c0c:	b	39a68 <flatcc_json_printer_utype_enum_vector_field@@Base+0xe4>

00039c10 <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   39c10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39c14:	sub	sp, sp, #4
   39c18:	ldrb	r5, [r0, #27]
   39c1c:	ldr	r8, [sp, #44]	; 0x2c
   39c20:	cmp	r5, #0
   39c24:	ldr	r5, [sp, #40]	; 0x28
   39c28:	bne	39db0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1a0>
   39c2c:	mov	r6, r3
   39c30:	add	r3, r2, #2
   39c34:	ldr	r2, [r1, #8]
   39c38:	lsl	r3, r3, #1
   39c3c:	cmp	r2, r3
   39c40:	mov	lr, r1
   39c44:	bgt	39c50 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x40>
   39c48:	add	sp, sp, #4
   39c4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39c50:	ldr	r2, [r1, #4]
   39c54:	ldrh	r2, [r2, r3]
   39c58:	cmp	r2, #0
   39c5c:	beq	39c48 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x38>
   39c60:	mov	r4, r0
   39c64:	ldr	r0, [r1]
   39c68:	adds	ip, r0, r2
   39c6c:	beq	39c48 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x38>
   39c70:	ldr	r3, [r1, #16]
   39c74:	cmp	r3, #0
   39c78:	add	r3, r3, #1
   39c7c:	str	r3, [r1, #16]
   39c80:	ldrne	r3, [r4, #20]
   39c84:	movne	r1, #44	; 0x2c
   39c88:	addne	lr, r3, #1
   39c8c:	strne	lr, [r4, #20]
   39c90:	strbne	r1, [r3]
   39c94:	ldr	r3, [r0, r2]
   39c98:	mov	r1, r6
   39c9c:	mov	r2, r5
   39ca0:	mov	r0, r4
   39ca4:	ldr	r6, [ip, r3]
   39ca8:	add	r7, ip, r3
   39cac:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   39cb0:	ldr	r3, [r4, #32]
   39cb4:	ldr	r2, [r4, #20]
   39cb8:	add	r3, r3, #1
   39cbc:	add	r0, r2, #1
   39cc0:	mov	r1, #91	; 0x5b
   39cc4:	cmp	r6, #0
   39cc8:	str	r3, [r4, #32]
   39ccc:	str	r0, [r4, #20]
   39cd0:	strb	r1, [r2]
   39cd4:	beq	39de0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d0>
   39cd8:	ldrb	r1, [r4, #25]
   39cdc:	cmp	r1, #0
   39ce0:	bne	39e5c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x24c>
   39ce4:	ldr	r2, [r4, #20]
   39ce8:	ldr	r3, [r4, #16]
   39cec:	cmp	r2, r3
   39cf0:	bcs	39e8c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x27c>
   39cf4:	ldrb	r1, [r7, #4]
   39cf8:	mov	r0, r4
   39cfc:	blx	r8
   39d00:	cmp	r6, #1
   39d04:	add	r5, r7, #5
   39d08:	beq	39de0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d0>
   39d0c:	add	r6, r6, #4
   39d10:	mov	r9, #44	; 0x2c
   39d14:	mov	fp, #10
   39d18:	b	39d44 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x134>
   39d1c:	ldr	r2, [r4, #20]
   39d20:	ldr	r3, [r4, #16]
   39d24:	cmp	r2, r3
   39d28:	bcs	39dbc <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1ac>
   39d2c:	ldrb	r1, [r5], #1
   39d30:	mov	r0, r4
   39d34:	blx	r8
   39d38:	sub	r3, r6, r5
   39d3c:	cmn	r7, r3
   39d40:	beq	39de0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d0>
   39d44:	ldr	r3, [r4, #20]
   39d48:	add	r2, r3, #1
   39d4c:	str	r2, [r4, #20]
   39d50:	strb	r9, [r3]
   39d54:	ldrb	r3, [r4, #25]
   39d58:	cmp	r3, #0
   39d5c:	beq	39d1c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x10c>
   39d60:	ldr	r3, [r4, #20]
   39d64:	mov	r1, #32
   39d68:	add	r2, r3, #1
   39d6c:	str	r2, [r4, #20]
   39d70:	strb	fp, [r3]
   39d74:	ldrb	r2, [r4, #25]
   39d78:	ldr	sl, [r4, #32]
   39d7c:	ldr	r3, [r4, #20]
   39d80:	ldr	ip, [r4, #16]
   39d84:	mul	sl, sl, r2
   39d88:	mov	r0, r3
   39d8c:	add	r3, r3, sl
   39d90:	cmp	ip, r3
   39d94:	mov	r2, sl
   39d98:	bcc	39dd0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1c0>
   39d9c:	bl	145bc <memset@plt>
   39da0:	ldr	r3, [r4, #20]
   39da4:	add	sl, r3, sl
   39da8:	str	sl, [r4, #20]
   39dac:	b	39d2c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x11c>
   39db0:	add	sp, sp, #4
   39db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39db8:	b	3787c <flatcc_json_printer_uint8_vector_field@@Base>
   39dbc:	ldr	r3, [r4, #44]	; 0x2c
   39dc0:	mov	r1, #0
   39dc4:	mov	r0, r4
   39dc8:	blx	r3
   39dcc:	b	39d2c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x11c>
   39dd0:	mov	r1, sl
   39dd4:	mov	r0, r4
   39dd8:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   39ddc:	b	39d2c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x11c>
   39de0:	ldrb	r3, [r4, #25]
   39de4:	cmp	r3, #0
   39de8:	bne	39e08 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1f8>
   39dec:	ldr	r3, [r4, #20]
   39df0:	add	r1, r3, #1
   39df4:	mov	r2, #93	; 0x5d
   39df8:	str	r1, [r4, #20]
   39dfc:	strb	r2, [r3]
   39e00:	add	sp, sp, #4
   39e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39e08:	ldr	r3, [r4, #20]
   39e0c:	mov	r2, #10
   39e10:	add	r1, r3, #1
   39e14:	str	r1, [r4, #20]
   39e18:	strb	r2, [r3]
   39e1c:	ldr	r2, [r4, #32]
   39e20:	ldrb	r3, [r4, #25]
   39e24:	sub	r2, r2, #1
   39e28:	ldr	r0, [r4, #20]
   39e2c:	ldr	r1, [r4, #16]
   39e30:	mul	r5, r2, r3
   39e34:	str	r2, [r4, #32]
   39e38:	add	r3, r0, r5
   39e3c:	cmp	r1, r3
   39e40:	bcc	39e7c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x26c>
   39e44:	mov	r2, r5
   39e48:	mov	r1, #32
   39e4c:	bl	145bc <memset@plt>
   39e50:	ldr	r3, [r4, #20]
   39e54:	add	r3, r3, r5
   39e58:	b	39df0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1e0>
   39e5c:	ldr	r3, [r4, #20]
   39e60:	mov	r2, #10
   39e64:	add	r1, r3, #1
   39e68:	str	r1, [r4, #20]
   39e6c:	mov	r0, r4
   39e70:	strb	r2, [r3]
   39e74:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   39e78:	b	39cf4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xe4>
   39e7c:	mov	r1, r5
   39e80:	mov	r0, r4
   39e84:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   39e88:	b	39dec <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1dc>
   39e8c:	ldr	r3, [r4, #44]	; 0x2c
   39e90:	mov	r0, r4
   39e94:	blx	r3
   39e98:	b	39cf4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xe4>

00039e9c <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   39e9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39ea0:	sub	sp, sp, #4
   39ea4:	ldrb	r5, [r0, #27]
   39ea8:	ldr	r7, [sp, #44]	; 0x2c
   39eac:	cmp	r5, #0
   39eb0:	ldr	r5, [sp, #40]	; 0x28
   39eb4:	bne	3a040 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1a4>
   39eb8:	mov	r6, r3
   39ebc:	add	r3, r2, #2
   39ec0:	ldr	r2, [r1, #8]
   39ec4:	lsl	r3, r3, #1
   39ec8:	cmp	r2, r3
   39ecc:	mov	lr, r1
   39ed0:	bgt	39edc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x40>
   39ed4:	add	sp, sp, #4
   39ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39edc:	ldr	r2, [r1, #4]
   39ee0:	ldrh	r2, [r2, r3]
   39ee4:	cmp	r2, #0
   39ee8:	beq	39ed4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x38>
   39eec:	mov	r4, r0
   39ef0:	ldr	r0, [r1]
   39ef4:	adds	ip, r0, r2
   39ef8:	beq	39ed4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x38>
   39efc:	ldr	r3, [r1, #16]
   39f00:	cmp	r3, #0
   39f04:	add	r3, r3, #1
   39f08:	str	r3, [r1, #16]
   39f0c:	ldrne	r3, [r4, #20]
   39f10:	movne	r1, #44	; 0x2c
   39f14:	addne	lr, r3, #1
   39f18:	strne	lr, [r4, #20]
   39f1c:	strbne	r1, [r3]
   39f20:	ldr	r3, [r0, r2]
   39f24:	mov	r1, r6
   39f28:	mov	r2, r5
   39f2c:	mov	r0, r4
   39f30:	ldr	r5, [ip, r3]
   39f34:	add	r6, ip, r3
   39f38:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   39f3c:	ldr	r3, [r4, #32]
   39f40:	ldr	r2, [r4, #20]
   39f44:	add	r3, r3, #1
   39f48:	add	r0, r2, #1
   39f4c:	mov	r1, #91	; 0x5b
   39f50:	cmp	r5, #0
   39f54:	str	r3, [r4, #32]
   39f58:	str	r0, [r4, #20]
   39f5c:	strb	r1, [r2]
   39f60:	beq	3a070 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d4>
   39f64:	ldrb	r1, [r4, #25]
   39f68:	cmp	r1, #0
   39f6c:	bne	3a0ec <flatcc_json_printer_uint16_enum_vector_field@@Base+0x250>
   39f70:	ldr	r2, [r4, #20]
   39f74:	ldr	r3, [r4, #16]
   39f78:	cmp	r2, r3
   39f7c:	bcs	3a11c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x280>
   39f80:	ldrh	r1, [r6, #4]
   39f84:	mov	r0, r4
   39f88:	blx	r7
   39f8c:	cmp	r5, #1
   39f90:	add	r6, r6, #6
   39f94:	sub	r5, r5, #2
   39f98:	beq	3a070 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d4>
   39f9c:	mov	r8, #44	; 0x2c
   39fa0:	mov	sl, #10
   39fa4:	mov	r9, #32
   39fa8:	b	39fd4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x138>
   39fac:	ldr	r2, [r4, #20]
   39fb0:	ldr	r3, [r4, #16]
   39fb4:	cmp	r2, r3
   39fb8:	bcs	3a04c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1b0>
   39fbc:	ldrh	r1, [r6], #2
   39fc0:	mov	r0, r4
   39fc4:	blx	r7
   39fc8:	cmp	r5, #0
   39fcc:	sub	r5, r5, #1
   39fd0:	beq	3a070 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d4>
   39fd4:	ldr	r3, [r4, #20]
   39fd8:	add	r2, r3, #1
   39fdc:	str	r2, [r4, #20]
   39fe0:	strb	r8, [r3]
   39fe4:	ldrb	r3, [r4, #25]
   39fe8:	cmp	r3, #0
   39fec:	beq	39fac <flatcc_json_printer_uint16_enum_vector_field@@Base+0x110>
   39ff0:	ldr	r3, [r4, #20]
   39ff4:	mov	r1, r9
   39ff8:	add	r2, r3, #1
   39ffc:	str	r2, [r4, #20]
   3a000:	strb	sl, [r3]
   3a004:	ldrb	r3, [r4, #25]
   3a008:	ldr	r2, [r4, #32]
   3a00c:	ldr	ip, [r4, #20]
   3a010:	ldr	lr, [r4, #16]
   3a014:	mul	fp, r2, r3
   3a018:	mov	r0, ip
   3a01c:	add	ip, ip, fp
   3a020:	cmp	lr, ip
   3a024:	mov	r2, fp
   3a028:	bcc	3a060 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1c4>
   3a02c:	bl	145bc <memset@plt>
   3a030:	ldr	r2, [r4, #20]
   3a034:	add	r3, r2, fp
   3a038:	str	r3, [r4, #20]
   3a03c:	b	39fbc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x120>
   3a040:	add	sp, sp, #4
   3a044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a048:	b	37c1c <flatcc_json_printer_uint16_vector_field@@Base>
   3a04c:	ldr	r3, [r4, #44]	; 0x2c
   3a050:	mov	r1, #0
   3a054:	mov	r0, r4
   3a058:	blx	r3
   3a05c:	b	39fbc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x120>
   3a060:	mov	r1, fp
   3a064:	mov	r0, r4
   3a068:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3a06c:	b	39fbc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x120>
   3a070:	ldrb	r3, [r4, #25]
   3a074:	cmp	r3, #0
   3a078:	bne	3a098 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1fc>
   3a07c:	ldr	r3, [r4, #20]
   3a080:	add	r1, r3, #1
   3a084:	mov	r2, #93	; 0x5d
   3a088:	str	r1, [r4, #20]
   3a08c:	strb	r2, [r3]
   3a090:	add	sp, sp, #4
   3a094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a098:	ldr	r3, [r4, #20]
   3a09c:	mov	r2, #10
   3a0a0:	add	r1, r3, #1
   3a0a4:	str	r1, [r4, #20]
   3a0a8:	strb	r2, [r3]
   3a0ac:	ldr	r2, [r4, #32]
   3a0b0:	ldrb	r3, [r4, #25]
   3a0b4:	sub	r2, r2, #1
   3a0b8:	ldr	r0, [r4, #20]
   3a0bc:	ldr	r1, [r4, #16]
   3a0c0:	mul	r5, r2, r3
   3a0c4:	str	r2, [r4, #32]
   3a0c8:	add	r3, r0, r5
   3a0cc:	cmp	r1, r3
   3a0d0:	bcc	3a10c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x270>
   3a0d4:	mov	r2, r5
   3a0d8:	mov	r1, #32
   3a0dc:	bl	145bc <memset@plt>
   3a0e0:	ldr	r3, [r4, #20]
   3a0e4:	add	r3, r3, r5
   3a0e8:	b	3a080 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1e4>
   3a0ec:	ldr	r3, [r4, #20]
   3a0f0:	mov	r2, #10
   3a0f4:	add	r1, r3, #1
   3a0f8:	str	r1, [r4, #20]
   3a0fc:	mov	r0, r4
   3a100:	strb	r2, [r3]
   3a104:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   3a108:	b	39f80 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xe4>
   3a10c:	mov	r1, r5
   3a110:	mov	r0, r4
   3a114:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3a118:	b	3a07c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1e0>
   3a11c:	ldr	r3, [r4, #44]	; 0x2c
   3a120:	mov	r0, r4
   3a124:	blx	r3
   3a128:	b	39f80 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xe4>

0003a12c <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   3a12c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a130:	sub	sp, sp, #4
   3a134:	ldrb	r5, [r0, #27]
   3a138:	ldr	r7, [sp, #44]	; 0x2c
   3a13c:	cmp	r5, #0
   3a140:	ldr	r5, [sp, #40]	; 0x28
   3a144:	bne	3a2d0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1a4>
   3a148:	mov	r6, r3
   3a14c:	add	r3, r2, #2
   3a150:	ldr	r2, [r1, #8]
   3a154:	lsl	r3, r3, #1
   3a158:	cmp	r2, r3
   3a15c:	mov	lr, r1
   3a160:	bgt	3a16c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x40>
   3a164:	add	sp, sp, #4
   3a168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a16c:	ldr	r2, [r1, #4]
   3a170:	ldrh	r2, [r2, r3]
   3a174:	cmp	r2, #0
   3a178:	beq	3a164 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x38>
   3a17c:	mov	r4, r0
   3a180:	ldr	r0, [r1]
   3a184:	adds	ip, r0, r2
   3a188:	beq	3a164 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x38>
   3a18c:	ldr	r3, [r1, #16]
   3a190:	cmp	r3, #0
   3a194:	add	r3, r3, #1
   3a198:	str	r3, [r1, #16]
   3a19c:	ldrne	r3, [r4, #20]
   3a1a0:	movne	r1, #44	; 0x2c
   3a1a4:	addne	lr, r3, #1
   3a1a8:	strne	lr, [r4, #20]
   3a1ac:	strbne	r1, [r3]
   3a1b0:	ldr	r3, [r0, r2]
   3a1b4:	mov	r1, r6
   3a1b8:	mov	r2, r5
   3a1bc:	mov	r0, r4
   3a1c0:	ldr	r5, [ip, r3]
   3a1c4:	add	r6, ip, r3
   3a1c8:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   3a1cc:	ldr	r3, [r4, #32]
   3a1d0:	ldr	r2, [r4, #20]
   3a1d4:	add	r3, r3, #1
   3a1d8:	add	r0, r2, #1
   3a1dc:	mov	r1, #91	; 0x5b
   3a1e0:	cmp	r5, #0
   3a1e4:	str	r3, [r4, #32]
   3a1e8:	str	r0, [r4, #20]
   3a1ec:	strb	r1, [r2]
   3a1f0:	beq	3a300 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d4>
   3a1f4:	ldrb	r1, [r4, #25]
   3a1f8:	cmp	r1, #0
   3a1fc:	bne	3a37c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x250>
   3a200:	ldr	r2, [r4, #20]
   3a204:	ldr	r3, [r4, #16]
   3a208:	cmp	r2, r3
   3a20c:	bcs	3a3ac <flatcc_json_printer_uint32_enum_vector_field@@Base+0x280>
   3a210:	ldr	r1, [r6, #4]
   3a214:	mov	r0, r4
   3a218:	blx	r7
   3a21c:	cmp	r5, #1
   3a220:	add	r6, r6, #8
   3a224:	sub	r5, r5, #2
   3a228:	beq	3a300 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d4>
   3a22c:	mov	r8, #44	; 0x2c
   3a230:	mov	sl, #10
   3a234:	mov	r9, #32
   3a238:	b	3a264 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x138>
   3a23c:	ldr	r2, [r4, #20]
   3a240:	ldr	r3, [r4, #16]
   3a244:	cmp	r2, r3
   3a248:	bcs	3a2dc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1b0>
   3a24c:	ldr	r1, [r6], #4
   3a250:	mov	r0, r4
   3a254:	blx	r7
   3a258:	cmp	r5, #0
   3a25c:	sub	r5, r5, #1
   3a260:	beq	3a300 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d4>
   3a264:	ldr	r3, [r4, #20]
   3a268:	add	r2, r3, #1
   3a26c:	str	r2, [r4, #20]
   3a270:	strb	r8, [r3]
   3a274:	ldrb	r3, [r4, #25]
   3a278:	cmp	r3, #0
   3a27c:	beq	3a23c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x110>
   3a280:	ldr	r3, [r4, #20]
   3a284:	mov	r1, r9
   3a288:	add	r2, r3, #1
   3a28c:	str	r2, [r4, #20]
   3a290:	strb	sl, [r3]
   3a294:	ldrb	r3, [r4, #25]
   3a298:	ldr	r2, [r4, #32]
   3a29c:	ldr	ip, [r4, #20]
   3a2a0:	ldr	lr, [r4, #16]
   3a2a4:	mul	fp, r2, r3
   3a2a8:	mov	r0, ip
   3a2ac:	add	ip, ip, fp
   3a2b0:	cmp	lr, ip
   3a2b4:	mov	r2, fp
   3a2b8:	bcc	3a2f0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1c4>
   3a2bc:	bl	145bc <memset@plt>
   3a2c0:	ldr	r2, [r4, #20]
   3a2c4:	add	r3, r2, fp
   3a2c8:	str	r3, [r4, #20]
   3a2cc:	b	3a24c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x120>
   3a2d0:	add	sp, sp, #4
   3a2d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a2d8:	b	37fbc <flatcc_json_printer_uint32_vector_field@@Base>
   3a2dc:	ldr	r3, [r4, #44]	; 0x2c
   3a2e0:	mov	r1, #0
   3a2e4:	mov	r0, r4
   3a2e8:	blx	r3
   3a2ec:	b	3a24c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x120>
   3a2f0:	mov	r1, fp
   3a2f4:	mov	r0, r4
   3a2f8:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3a2fc:	b	3a24c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x120>
   3a300:	ldrb	r3, [r4, #25]
   3a304:	cmp	r3, #0
   3a308:	bne	3a328 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1fc>
   3a30c:	ldr	r3, [r4, #20]
   3a310:	add	r1, r3, #1
   3a314:	mov	r2, #93	; 0x5d
   3a318:	str	r1, [r4, #20]
   3a31c:	strb	r2, [r3]
   3a320:	add	sp, sp, #4
   3a324:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a328:	ldr	r3, [r4, #20]
   3a32c:	mov	r2, #10
   3a330:	add	r1, r3, #1
   3a334:	str	r1, [r4, #20]
   3a338:	strb	r2, [r3]
   3a33c:	ldr	r2, [r4, #32]
   3a340:	ldrb	r3, [r4, #25]
   3a344:	sub	r2, r2, #1
   3a348:	ldr	r0, [r4, #20]
   3a34c:	ldr	r1, [r4, #16]
   3a350:	mul	r5, r2, r3
   3a354:	str	r2, [r4, #32]
   3a358:	add	r3, r0, r5
   3a35c:	cmp	r1, r3
   3a360:	bcc	3a39c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x270>
   3a364:	mov	r2, r5
   3a368:	mov	r1, #32
   3a36c:	bl	145bc <memset@plt>
   3a370:	ldr	r3, [r4, #20]
   3a374:	add	r3, r3, r5
   3a378:	b	3a310 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1e4>
   3a37c:	ldr	r3, [r4, #20]
   3a380:	mov	r2, #10
   3a384:	add	r1, r3, #1
   3a388:	str	r1, [r4, #20]
   3a38c:	mov	r0, r4
   3a390:	strb	r2, [r3]
   3a394:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   3a398:	b	3a210 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xe4>
   3a39c:	mov	r1, r5
   3a3a0:	mov	r0, r4
   3a3a4:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3a3a8:	b	3a30c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1e0>
   3a3ac:	ldr	r3, [r4, #44]	; 0x2c
   3a3b0:	mov	r0, r4
   3a3b4:	blx	r3
   3a3b8:	b	3a210 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xe4>

0003a3bc <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   3a3bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a3c0:	sub	sp, sp, #4
   3a3c4:	ldrb	r5, [r0, #27]
   3a3c8:	ldr	r7, [sp, #44]	; 0x2c
   3a3cc:	cmp	r5, #0
   3a3d0:	ldr	r5, [sp, #40]	; 0x28
   3a3d4:	bne	3a560 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1a4>
   3a3d8:	mov	r6, r3
   3a3dc:	add	r3, r2, #2
   3a3e0:	ldr	r2, [r1, #8]
   3a3e4:	lsl	r3, r3, #1
   3a3e8:	cmp	r2, r3
   3a3ec:	mov	lr, r1
   3a3f0:	bgt	3a3fc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x40>
   3a3f4:	add	sp, sp, #4
   3a3f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a3fc:	ldr	r2, [r1, #4]
   3a400:	ldrh	r2, [r2, r3]
   3a404:	cmp	r2, #0
   3a408:	beq	3a3f4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x38>
   3a40c:	mov	r4, r0
   3a410:	ldr	r0, [r1]
   3a414:	adds	ip, r0, r2
   3a418:	beq	3a3f4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x38>
   3a41c:	ldr	r3, [r1, #16]
   3a420:	cmp	r3, #0
   3a424:	add	r3, r3, #1
   3a428:	str	r3, [r1, #16]
   3a42c:	ldrne	r3, [r4, #20]
   3a430:	movne	r1, #44	; 0x2c
   3a434:	addne	lr, r3, #1
   3a438:	strne	lr, [r4, #20]
   3a43c:	strbne	r1, [r3]
   3a440:	ldr	r3, [r0, r2]
   3a444:	mov	r1, r6
   3a448:	mov	r2, r5
   3a44c:	mov	r0, r4
   3a450:	ldr	r5, [ip, r3]
   3a454:	add	r6, ip, r3
   3a458:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   3a45c:	ldr	r3, [r4, #32]
   3a460:	ldr	r2, [r4, #20]
   3a464:	add	r3, r3, #1
   3a468:	add	r0, r2, #1
   3a46c:	mov	r1, #91	; 0x5b
   3a470:	cmp	r5, #0
   3a474:	str	r3, [r4, #32]
   3a478:	str	r0, [r4, #20]
   3a47c:	strb	r1, [r2]
   3a480:	beq	3a590 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d4>
   3a484:	ldrb	r1, [r4, #25]
   3a488:	cmp	r1, #0
   3a48c:	bne	3a60c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x250>
   3a490:	ldr	r2, [r4, #20]
   3a494:	ldr	r3, [r4, #16]
   3a498:	cmp	r2, r3
   3a49c:	bcs	3a63c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x280>
   3a4a0:	ldrd	r2, [r6, #4]
   3a4a4:	mov	r0, r4
   3a4a8:	blx	r7
   3a4ac:	cmp	r5, #1
   3a4b0:	add	r6, r6, #12
   3a4b4:	sub	r5, r5, #2
   3a4b8:	beq	3a590 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d4>
   3a4bc:	mov	r8, #44	; 0x2c
   3a4c0:	mov	sl, #10
   3a4c4:	mov	r9, #32
   3a4c8:	b	3a4f4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x138>
   3a4cc:	ldr	r2, [r4, #20]
   3a4d0:	ldr	r3, [r4, #16]
   3a4d4:	cmp	r2, r3
   3a4d8:	bcs	3a56c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1b0>
   3a4dc:	ldrd	r2, [r6], #8
   3a4e0:	mov	r0, r4
   3a4e4:	blx	r7
   3a4e8:	cmp	r5, #0
   3a4ec:	sub	r5, r5, #1
   3a4f0:	beq	3a590 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d4>
   3a4f4:	ldr	r3, [r4, #20]
   3a4f8:	add	r2, r3, #1
   3a4fc:	str	r2, [r4, #20]
   3a500:	strb	r8, [r3]
   3a504:	ldrb	r3, [r4, #25]
   3a508:	cmp	r3, #0
   3a50c:	beq	3a4cc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x110>
   3a510:	ldr	r3, [r4, #20]
   3a514:	mov	r1, r9
   3a518:	add	r2, r3, #1
   3a51c:	str	r2, [r4, #20]
   3a520:	strb	sl, [r3]
   3a524:	ldrb	r3, [r4, #25]
   3a528:	ldr	r2, [r4, #32]
   3a52c:	ldr	ip, [r4, #20]
   3a530:	ldr	lr, [r4, #16]
   3a534:	mul	fp, r2, r3
   3a538:	mov	r0, ip
   3a53c:	add	ip, ip, fp
   3a540:	cmp	lr, ip
   3a544:	mov	r2, fp
   3a548:	bcc	3a580 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1c4>
   3a54c:	bl	145bc <memset@plt>
   3a550:	ldr	r2, [r4, #20]
   3a554:	add	r3, r2, fp
   3a558:	str	r3, [r4, #20]
   3a55c:	b	3a4dc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x120>
   3a560:	add	sp, sp, #4
   3a564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a568:	b	3835c <flatcc_json_printer_uint64_vector_field@@Base>
   3a56c:	ldr	r3, [r4, #44]	; 0x2c
   3a570:	mov	r1, #0
   3a574:	mov	r0, r4
   3a578:	blx	r3
   3a57c:	b	3a4dc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x120>
   3a580:	mov	r1, fp
   3a584:	mov	r0, r4
   3a588:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3a58c:	b	3a4dc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x120>
   3a590:	ldrb	r3, [r4, #25]
   3a594:	cmp	r3, #0
   3a598:	bne	3a5b8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1fc>
   3a59c:	ldr	r3, [r4, #20]
   3a5a0:	add	r1, r3, #1
   3a5a4:	mov	r2, #93	; 0x5d
   3a5a8:	str	r1, [r4, #20]
   3a5ac:	strb	r2, [r3]
   3a5b0:	add	sp, sp, #4
   3a5b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a5b8:	ldr	r3, [r4, #20]
   3a5bc:	mov	r2, #10
   3a5c0:	add	r1, r3, #1
   3a5c4:	str	r1, [r4, #20]
   3a5c8:	strb	r2, [r3]
   3a5cc:	ldr	r2, [r4, #32]
   3a5d0:	ldrb	r3, [r4, #25]
   3a5d4:	sub	r2, r2, #1
   3a5d8:	ldr	r0, [r4, #20]
   3a5dc:	ldr	r1, [r4, #16]
   3a5e0:	mul	r5, r2, r3
   3a5e4:	str	r2, [r4, #32]
   3a5e8:	add	r3, r0, r5
   3a5ec:	cmp	r1, r3
   3a5f0:	bcc	3a62c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x270>
   3a5f4:	mov	r2, r5
   3a5f8:	mov	r1, #32
   3a5fc:	bl	145bc <memset@plt>
   3a600:	ldr	r3, [r4, #20]
   3a604:	add	r3, r3, r5
   3a608:	b	3a5a0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1e4>
   3a60c:	ldr	r3, [r4, #20]
   3a610:	mov	r2, #10
   3a614:	add	r1, r3, #1
   3a618:	str	r1, [r4, #20]
   3a61c:	mov	r0, r4
   3a620:	strb	r2, [r3]
   3a624:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   3a628:	b	3a4a0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xe4>
   3a62c:	mov	r1, r5
   3a630:	mov	r0, r4
   3a634:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3a638:	b	3a59c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1e0>
   3a63c:	ldr	r3, [r4, #44]	; 0x2c
   3a640:	mov	r0, r4
   3a644:	blx	r3
   3a648:	b	3a4a0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xe4>

0003a64c <flatcc_json_printer_int8_enum_vector_field@@Base>:
   3a64c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a650:	sub	sp, sp, #4
   3a654:	ldrb	r5, [r0, #27]
   3a658:	ldr	r8, [sp, #44]	; 0x2c
   3a65c:	cmp	r5, #0
   3a660:	ldr	r5, [sp, #40]	; 0x28
   3a664:	bne	3a7ec <flatcc_json_printer_int8_enum_vector_field@@Base+0x1a0>
   3a668:	mov	r6, r3
   3a66c:	add	r3, r2, #2
   3a670:	ldr	r2, [r1, #8]
   3a674:	lsl	r3, r3, #1
   3a678:	cmp	r2, r3
   3a67c:	mov	lr, r1
   3a680:	bgt	3a68c <flatcc_json_printer_int8_enum_vector_field@@Base+0x40>
   3a684:	add	sp, sp, #4
   3a688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a68c:	ldr	r2, [r1, #4]
   3a690:	ldrh	r2, [r2, r3]
   3a694:	cmp	r2, #0
   3a698:	beq	3a684 <flatcc_json_printer_int8_enum_vector_field@@Base+0x38>
   3a69c:	mov	r4, r0
   3a6a0:	ldr	r0, [r1]
   3a6a4:	adds	ip, r0, r2
   3a6a8:	beq	3a684 <flatcc_json_printer_int8_enum_vector_field@@Base+0x38>
   3a6ac:	ldr	r3, [r1, #16]
   3a6b0:	cmp	r3, #0
   3a6b4:	add	r3, r3, #1
   3a6b8:	str	r3, [r1, #16]
   3a6bc:	ldrne	r3, [r4, #20]
   3a6c0:	movne	r1, #44	; 0x2c
   3a6c4:	addne	lr, r3, #1
   3a6c8:	strne	lr, [r4, #20]
   3a6cc:	strbne	r1, [r3]
   3a6d0:	ldr	r3, [r0, r2]
   3a6d4:	mov	r1, r6
   3a6d8:	mov	r2, r5
   3a6dc:	mov	r0, r4
   3a6e0:	ldr	r6, [ip, r3]
   3a6e4:	add	r7, ip, r3
   3a6e8:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   3a6ec:	ldr	r3, [r4, #32]
   3a6f0:	ldr	r2, [r4, #20]
   3a6f4:	add	r3, r3, #1
   3a6f8:	add	r0, r2, #1
   3a6fc:	mov	r1, #91	; 0x5b
   3a700:	cmp	r6, #0
   3a704:	str	r3, [r4, #32]
   3a708:	str	r0, [r4, #20]
   3a70c:	strb	r1, [r2]
   3a710:	beq	3a81c <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d0>
   3a714:	ldrb	r1, [r4, #25]
   3a718:	cmp	r1, #0
   3a71c:	bne	3a898 <flatcc_json_printer_int8_enum_vector_field@@Base+0x24c>
   3a720:	ldr	r2, [r4, #20]
   3a724:	ldr	r3, [r4, #16]
   3a728:	cmp	r2, r3
   3a72c:	bcs	3a8c8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x27c>
   3a730:	ldrsb	r1, [r7, #4]
   3a734:	mov	r0, r4
   3a738:	blx	r8
   3a73c:	cmp	r6, #1
   3a740:	add	r5, r7, #5
   3a744:	beq	3a81c <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d0>
   3a748:	add	r6, r6, #4
   3a74c:	mov	r9, #44	; 0x2c
   3a750:	mov	fp, #10
   3a754:	b	3a780 <flatcc_json_printer_int8_enum_vector_field@@Base+0x134>
   3a758:	ldr	r2, [r4, #20]
   3a75c:	ldr	r3, [r4, #16]
   3a760:	cmp	r2, r3
   3a764:	bcs	3a7f8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1ac>
   3a768:	ldrsb	r1, [r5], #1
   3a76c:	mov	r0, r4
   3a770:	blx	r8
   3a774:	sub	r3, r6, r5
   3a778:	cmn	r7, r3
   3a77c:	beq	3a81c <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d0>
   3a780:	ldr	r3, [r4, #20]
   3a784:	add	r2, r3, #1
   3a788:	str	r2, [r4, #20]
   3a78c:	strb	r9, [r3]
   3a790:	ldrb	r3, [r4, #25]
   3a794:	cmp	r3, #0
   3a798:	beq	3a758 <flatcc_json_printer_int8_enum_vector_field@@Base+0x10c>
   3a79c:	ldr	r3, [r4, #20]
   3a7a0:	mov	r1, #32
   3a7a4:	add	r2, r3, #1
   3a7a8:	str	r2, [r4, #20]
   3a7ac:	strb	fp, [r3]
   3a7b0:	ldrb	r2, [r4, #25]
   3a7b4:	ldr	sl, [r4, #32]
   3a7b8:	ldr	r3, [r4, #20]
   3a7bc:	ldr	ip, [r4, #16]
   3a7c0:	mul	sl, sl, r2
   3a7c4:	mov	r0, r3
   3a7c8:	add	r3, r3, sl
   3a7cc:	cmp	ip, r3
   3a7d0:	mov	r2, sl
   3a7d4:	bcc	3a80c <flatcc_json_printer_int8_enum_vector_field@@Base+0x1c0>
   3a7d8:	bl	145bc <memset@plt>
   3a7dc:	ldr	r3, [r4, #20]
   3a7e0:	add	sl, r3, sl
   3a7e4:	str	sl, [r4, #20]
   3a7e8:	b	3a768 <flatcc_json_printer_int8_enum_vector_field@@Base+0x11c>
   3a7ec:	add	sp, sp, #4
   3a7f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a7f4:	b	385d0 <flatcc_json_printer_int8_vector_field@@Base>
   3a7f8:	ldr	r3, [r4, #44]	; 0x2c
   3a7fc:	mov	r1, #0
   3a800:	mov	r0, r4
   3a804:	blx	r3
   3a808:	b	3a768 <flatcc_json_printer_int8_enum_vector_field@@Base+0x11c>
   3a80c:	mov	r1, sl
   3a810:	mov	r0, r4
   3a814:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3a818:	b	3a768 <flatcc_json_printer_int8_enum_vector_field@@Base+0x11c>
   3a81c:	ldrb	r3, [r4, #25]
   3a820:	cmp	r3, #0
   3a824:	bne	3a844 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1f8>
   3a828:	ldr	r3, [r4, #20]
   3a82c:	add	r1, r3, #1
   3a830:	mov	r2, #93	; 0x5d
   3a834:	str	r1, [r4, #20]
   3a838:	strb	r2, [r3]
   3a83c:	add	sp, sp, #4
   3a840:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a844:	ldr	r3, [r4, #20]
   3a848:	mov	r2, #10
   3a84c:	add	r1, r3, #1
   3a850:	str	r1, [r4, #20]
   3a854:	strb	r2, [r3]
   3a858:	ldr	r2, [r4, #32]
   3a85c:	ldrb	r3, [r4, #25]
   3a860:	sub	r2, r2, #1
   3a864:	ldr	r0, [r4, #20]
   3a868:	ldr	r1, [r4, #16]
   3a86c:	mul	r5, r2, r3
   3a870:	str	r2, [r4, #32]
   3a874:	add	r3, r0, r5
   3a878:	cmp	r1, r3
   3a87c:	bcc	3a8b8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x26c>
   3a880:	mov	r2, r5
   3a884:	mov	r1, #32
   3a888:	bl	145bc <memset@plt>
   3a88c:	ldr	r3, [r4, #20]
   3a890:	add	r3, r3, r5
   3a894:	b	3a82c <flatcc_json_printer_int8_enum_vector_field@@Base+0x1e0>
   3a898:	ldr	r3, [r4, #20]
   3a89c:	mov	r2, #10
   3a8a0:	add	r1, r3, #1
   3a8a4:	str	r1, [r4, #20]
   3a8a8:	mov	r0, r4
   3a8ac:	strb	r2, [r3]
   3a8b0:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   3a8b4:	b	3a730 <flatcc_json_printer_int8_enum_vector_field@@Base+0xe4>
   3a8b8:	mov	r1, r5
   3a8bc:	mov	r0, r4
   3a8c0:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3a8c4:	b	3a828 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1dc>
   3a8c8:	ldr	r3, [r4, #44]	; 0x2c
   3a8cc:	mov	r0, r4
   3a8d0:	blx	r3
   3a8d4:	b	3a730 <flatcc_json_printer_int8_enum_vector_field@@Base+0xe4>

0003a8d8 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   3a8d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a8dc:	sub	sp, sp, #4
   3a8e0:	ldrb	r5, [r0, #27]
   3a8e4:	ldr	r7, [sp, #44]	; 0x2c
   3a8e8:	cmp	r5, #0
   3a8ec:	ldr	r5, [sp, #40]	; 0x28
   3a8f0:	bne	3aa7c <flatcc_json_printer_int16_enum_vector_field@@Base+0x1a4>
   3a8f4:	mov	r6, r3
   3a8f8:	add	r3, r2, #2
   3a8fc:	ldr	r2, [r1, #8]
   3a900:	lsl	r3, r3, #1
   3a904:	cmp	r2, r3
   3a908:	mov	lr, r1
   3a90c:	bgt	3a918 <flatcc_json_printer_int16_enum_vector_field@@Base+0x40>
   3a910:	add	sp, sp, #4
   3a914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a918:	ldr	r2, [r1, #4]
   3a91c:	ldrh	r2, [r2, r3]
   3a920:	cmp	r2, #0
   3a924:	beq	3a910 <flatcc_json_printer_int16_enum_vector_field@@Base+0x38>
   3a928:	mov	r4, r0
   3a92c:	ldr	r0, [r1]
   3a930:	adds	ip, r0, r2
   3a934:	beq	3a910 <flatcc_json_printer_int16_enum_vector_field@@Base+0x38>
   3a938:	ldr	r3, [r1, #16]
   3a93c:	cmp	r3, #0
   3a940:	add	r3, r3, #1
   3a944:	str	r3, [r1, #16]
   3a948:	ldrne	r3, [r4, #20]
   3a94c:	movne	r1, #44	; 0x2c
   3a950:	addne	lr, r3, #1
   3a954:	strne	lr, [r4, #20]
   3a958:	strbne	r1, [r3]
   3a95c:	ldr	r3, [r0, r2]
   3a960:	mov	r1, r6
   3a964:	mov	r2, r5
   3a968:	mov	r0, r4
   3a96c:	ldr	r5, [ip, r3]
   3a970:	add	r6, ip, r3
   3a974:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   3a978:	ldr	r3, [r4, #32]
   3a97c:	ldr	r2, [r4, #20]
   3a980:	add	r3, r3, #1
   3a984:	add	r0, r2, #1
   3a988:	mov	r1, #91	; 0x5b
   3a98c:	cmp	r5, #0
   3a990:	str	r3, [r4, #32]
   3a994:	str	r0, [r4, #20]
   3a998:	strb	r1, [r2]
   3a99c:	beq	3aaac <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d4>
   3a9a0:	ldrb	r1, [r4, #25]
   3a9a4:	cmp	r1, #0
   3a9a8:	bne	3ab28 <flatcc_json_printer_int16_enum_vector_field@@Base+0x250>
   3a9ac:	ldr	r2, [r4, #20]
   3a9b0:	ldr	r3, [r4, #16]
   3a9b4:	cmp	r2, r3
   3a9b8:	bcs	3ab58 <flatcc_json_printer_int16_enum_vector_field@@Base+0x280>
   3a9bc:	ldrsh	r1, [r6, #4]
   3a9c0:	mov	r0, r4
   3a9c4:	blx	r7
   3a9c8:	cmp	r5, #1
   3a9cc:	add	r6, r6, #6
   3a9d0:	sub	r5, r5, #2
   3a9d4:	beq	3aaac <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d4>
   3a9d8:	mov	r8, #44	; 0x2c
   3a9dc:	mov	sl, #10
   3a9e0:	mov	r9, #32
   3a9e4:	b	3aa10 <flatcc_json_printer_int16_enum_vector_field@@Base+0x138>
   3a9e8:	ldr	r2, [r4, #20]
   3a9ec:	ldr	r3, [r4, #16]
   3a9f0:	cmp	r2, r3
   3a9f4:	bcs	3aa88 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1b0>
   3a9f8:	ldrsh	r1, [r6], #2
   3a9fc:	mov	r0, r4
   3aa00:	blx	r7
   3aa04:	cmp	r5, #0
   3aa08:	sub	r5, r5, #1
   3aa0c:	beq	3aaac <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d4>
   3aa10:	ldr	r3, [r4, #20]
   3aa14:	add	r2, r3, #1
   3aa18:	str	r2, [r4, #20]
   3aa1c:	strb	r8, [r3]
   3aa20:	ldrb	r3, [r4, #25]
   3aa24:	cmp	r3, #0
   3aa28:	beq	3a9e8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x110>
   3aa2c:	ldr	r3, [r4, #20]
   3aa30:	mov	r1, r9
   3aa34:	add	r2, r3, #1
   3aa38:	str	r2, [r4, #20]
   3aa3c:	strb	sl, [r3]
   3aa40:	ldrb	r3, [r4, #25]
   3aa44:	ldr	r2, [r4, #32]
   3aa48:	ldr	ip, [r4, #20]
   3aa4c:	ldr	lr, [r4, #16]
   3aa50:	mul	fp, r2, r3
   3aa54:	mov	r0, ip
   3aa58:	add	ip, ip, fp
   3aa5c:	cmp	lr, ip
   3aa60:	mov	r2, fp
   3aa64:	bcc	3aa9c <flatcc_json_printer_int16_enum_vector_field@@Base+0x1c4>
   3aa68:	bl	145bc <memset@plt>
   3aa6c:	ldr	r2, [r4, #20]
   3aa70:	add	r3, r2, fp
   3aa74:	str	r3, [r4, #20]
   3aa78:	b	3a9f8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x120>
   3aa7c:	add	sp, sp, #4
   3aa80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3aa84:	b	3888c <flatcc_json_printer_int16_vector_field@@Base>
   3aa88:	ldr	r3, [r4, #44]	; 0x2c
   3aa8c:	mov	r1, #0
   3aa90:	mov	r0, r4
   3aa94:	blx	r3
   3aa98:	b	3a9f8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x120>
   3aa9c:	mov	r1, fp
   3aaa0:	mov	r0, r4
   3aaa4:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3aaa8:	b	3a9f8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x120>
   3aaac:	ldrb	r3, [r4, #25]
   3aab0:	cmp	r3, #0
   3aab4:	bne	3aad4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1fc>
   3aab8:	ldr	r3, [r4, #20]
   3aabc:	add	r1, r3, #1
   3aac0:	mov	r2, #93	; 0x5d
   3aac4:	str	r1, [r4, #20]
   3aac8:	strb	r2, [r3]
   3aacc:	add	sp, sp, #4
   3aad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3aad4:	ldr	r3, [r4, #20]
   3aad8:	mov	r2, #10
   3aadc:	add	r1, r3, #1
   3aae0:	str	r1, [r4, #20]
   3aae4:	strb	r2, [r3]
   3aae8:	ldr	r2, [r4, #32]
   3aaec:	ldrb	r3, [r4, #25]
   3aaf0:	sub	r2, r2, #1
   3aaf4:	ldr	r0, [r4, #20]
   3aaf8:	ldr	r1, [r4, #16]
   3aafc:	mul	r5, r2, r3
   3ab00:	str	r2, [r4, #32]
   3ab04:	add	r3, r0, r5
   3ab08:	cmp	r1, r3
   3ab0c:	bcc	3ab48 <flatcc_json_printer_int16_enum_vector_field@@Base+0x270>
   3ab10:	mov	r2, r5
   3ab14:	mov	r1, #32
   3ab18:	bl	145bc <memset@plt>
   3ab1c:	ldr	r3, [r4, #20]
   3ab20:	add	r3, r3, r5
   3ab24:	b	3aabc <flatcc_json_printer_int16_enum_vector_field@@Base+0x1e4>
   3ab28:	ldr	r3, [r4, #20]
   3ab2c:	mov	r2, #10
   3ab30:	add	r1, r3, #1
   3ab34:	str	r1, [r4, #20]
   3ab38:	mov	r0, r4
   3ab3c:	strb	r2, [r3]
   3ab40:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   3ab44:	b	3a9bc <flatcc_json_printer_int16_enum_vector_field@@Base+0xe4>
   3ab48:	mov	r1, r5
   3ab4c:	mov	r0, r4
   3ab50:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3ab54:	b	3aab8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1e0>
   3ab58:	ldr	r3, [r4, #44]	; 0x2c
   3ab5c:	mov	r0, r4
   3ab60:	blx	r3
   3ab64:	b	3a9bc <flatcc_json_printer_int16_enum_vector_field@@Base+0xe4>

0003ab68 <flatcc_json_printer_int32_enum_vector_field@@Base>:
   3ab68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ab6c:	sub	sp, sp, #4
   3ab70:	ldrb	r5, [r0, #27]
   3ab74:	ldr	r7, [sp, #44]	; 0x2c
   3ab78:	cmp	r5, #0
   3ab7c:	ldr	r5, [sp, #40]	; 0x28
   3ab80:	bne	3ad0c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1a4>
   3ab84:	mov	r6, r3
   3ab88:	add	r3, r2, #2
   3ab8c:	ldr	r2, [r1, #8]
   3ab90:	lsl	r3, r3, #1
   3ab94:	cmp	r2, r3
   3ab98:	mov	lr, r1
   3ab9c:	bgt	3aba8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x40>
   3aba0:	add	sp, sp, #4
   3aba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3aba8:	ldr	r2, [r1, #4]
   3abac:	ldrh	r2, [r2, r3]
   3abb0:	cmp	r2, #0
   3abb4:	beq	3aba0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x38>
   3abb8:	mov	r4, r0
   3abbc:	ldr	r0, [r1]
   3abc0:	adds	ip, r0, r2
   3abc4:	beq	3aba0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x38>
   3abc8:	ldr	r3, [r1, #16]
   3abcc:	cmp	r3, #0
   3abd0:	add	r3, r3, #1
   3abd4:	str	r3, [r1, #16]
   3abd8:	ldrne	r3, [r4, #20]
   3abdc:	movne	r1, #44	; 0x2c
   3abe0:	addne	lr, r3, #1
   3abe4:	strne	lr, [r4, #20]
   3abe8:	strbne	r1, [r3]
   3abec:	ldr	r3, [r0, r2]
   3abf0:	mov	r1, r6
   3abf4:	mov	r2, r5
   3abf8:	mov	r0, r4
   3abfc:	ldr	r5, [ip, r3]
   3ac00:	add	r6, ip, r3
   3ac04:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   3ac08:	ldr	r3, [r4, #32]
   3ac0c:	ldr	r2, [r4, #20]
   3ac10:	add	r3, r3, #1
   3ac14:	add	r0, r2, #1
   3ac18:	mov	r1, #91	; 0x5b
   3ac1c:	cmp	r5, #0
   3ac20:	str	r3, [r4, #32]
   3ac24:	str	r0, [r4, #20]
   3ac28:	strb	r1, [r2]
   3ac2c:	beq	3ad3c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d4>
   3ac30:	ldrb	r1, [r4, #25]
   3ac34:	cmp	r1, #0
   3ac38:	bne	3adb8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x250>
   3ac3c:	ldr	r2, [r4, #20]
   3ac40:	ldr	r3, [r4, #16]
   3ac44:	cmp	r2, r3
   3ac48:	bcs	3ade8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x280>
   3ac4c:	ldr	r1, [r6, #4]
   3ac50:	mov	r0, r4
   3ac54:	blx	r7
   3ac58:	cmp	r5, #1
   3ac5c:	add	r6, r6, #8
   3ac60:	sub	r5, r5, #2
   3ac64:	beq	3ad3c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d4>
   3ac68:	mov	r8, #44	; 0x2c
   3ac6c:	mov	sl, #10
   3ac70:	mov	r9, #32
   3ac74:	b	3aca0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x138>
   3ac78:	ldr	r2, [r4, #20]
   3ac7c:	ldr	r3, [r4, #16]
   3ac80:	cmp	r2, r3
   3ac84:	bcs	3ad18 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1b0>
   3ac88:	ldr	r1, [r6], #4
   3ac8c:	mov	r0, r4
   3ac90:	blx	r7
   3ac94:	cmp	r5, #0
   3ac98:	sub	r5, r5, #1
   3ac9c:	beq	3ad3c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d4>
   3aca0:	ldr	r3, [r4, #20]
   3aca4:	add	r2, r3, #1
   3aca8:	str	r2, [r4, #20]
   3acac:	strb	r8, [r3]
   3acb0:	ldrb	r3, [r4, #25]
   3acb4:	cmp	r3, #0
   3acb8:	beq	3ac78 <flatcc_json_printer_int32_enum_vector_field@@Base+0x110>
   3acbc:	ldr	r3, [r4, #20]
   3acc0:	mov	r1, r9
   3acc4:	add	r2, r3, #1
   3acc8:	str	r2, [r4, #20]
   3accc:	strb	sl, [r3]
   3acd0:	ldrb	r3, [r4, #25]
   3acd4:	ldr	r2, [r4, #32]
   3acd8:	ldr	ip, [r4, #20]
   3acdc:	ldr	lr, [r4, #16]
   3ace0:	mul	fp, r2, r3
   3ace4:	mov	r0, ip
   3ace8:	add	ip, ip, fp
   3acec:	cmp	lr, ip
   3acf0:	mov	r2, fp
   3acf4:	bcc	3ad2c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1c4>
   3acf8:	bl	145bc <memset@plt>
   3acfc:	ldr	r2, [r4, #20]
   3ad00:	add	r3, r2, fp
   3ad04:	str	r3, [r4, #20]
   3ad08:	b	3ac88 <flatcc_json_printer_int32_enum_vector_field@@Base+0x120>
   3ad0c:	add	sp, sp, #4
   3ad10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ad14:	b	38b48 <flatcc_json_printer_int32_vector_field@@Base>
   3ad18:	ldr	r3, [r4, #44]	; 0x2c
   3ad1c:	mov	r1, #0
   3ad20:	mov	r0, r4
   3ad24:	blx	r3
   3ad28:	b	3ac88 <flatcc_json_printer_int32_enum_vector_field@@Base+0x120>
   3ad2c:	mov	r1, fp
   3ad30:	mov	r0, r4
   3ad34:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3ad38:	b	3ac88 <flatcc_json_printer_int32_enum_vector_field@@Base+0x120>
   3ad3c:	ldrb	r3, [r4, #25]
   3ad40:	cmp	r3, #0
   3ad44:	bne	3ad64 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1fc>
   3ad48:	ldr	r3, [r4, #20]
   3ad4c:	add	r1, r3, #1
   3ad50:	mov	r2, #93	; 0x5d
   3ad54:	str	r1, [r4, #20]
   3ad58:	strb	r2, [r3]
   3ad5c:	add	sp, sp, #4
   3ad60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ad64:	ldr	r3, [r4, #20]
   3ad68:	mov	r2, #10
   3ad6c:	add	r1, r3, #1
   3ad70:	str	r1, [r4, #20]
   3ad74:	strb	r2, [r3]
   3ad78:	ldr	r2, [r4, #32]
   3ad7c:	ldrb	r3, [r4, #25]
   3ad80:	sub	r2, r2, #1
   3ad84:	ldr	r0, [r4, #20]
   3ad88:	ldr	r1, [r4, #16]
   3ad8c:	mul	r5, r2, r3
   3ad90:	str	r2, [r4, #32]
   3ad94:	add	r3, r0, r5
   3ad98:	cmp	r1, r3
   3ad9c:	bcc	3add8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x270>
   3ada0:	mov	r2, r5
   3ada4:	mov	r1, #32
   3ada8:	bl	145bc <memset@plt>
   3adac:	ldr	r3, [r4, #20]
   3adb0:	add	r3, r3, r5
   3adb4:	b	3ad4c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1e4>
   3adb8:	ldr	r3, [r4, #20]
   3adbc:	mov	r2, #10
   3adc0:	add	r1, r3, #1
   3adc4:	str	r1, [r4, #20]
   3adc8:	mov	r0, r4
   3adcc:	strb	r2, [r3]
   3add0:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   3add4:	b	3ac4c <flatcc_json_printer_int32_enum_vector_field@@Base+0xe4>
   3add8:	mov	r1, r5
   3addc:	mov	r0, r4
   3ade0:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3ade4:	b	3ad48 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1e0>
   3ade8:	ldr	r3, [r4, #44]	; 0x2c
   3adec:	mov	r0, r4
   3adf0:	blx	r3
   3adf4:	b	3ac4c <flatcc_json_printer_int32_enum_vector_field@@Base+0xe4>

0003adf8 <flatcc_json_printer_int64_enum_vector_field@@Base>:
   3adf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3adfc:	sub	sp, sp, #4
   3ae00:	ldrb	r5, [r0, #27]
   3ae04:	ldr	r7, [sp, #44]	; 0x2c
   3ae08:	cmp	r5, #0
   3ae0c:	ldr	r5, [sp, #40]	; 0x28
   3ae10:	bne	3af9c <flatcc_json_printer_int64_enum_vector_field@@Base+0x1a4>
   3ae14:	mov	r6, r3
   3ae18:	add	r3, r2, #2
   3ae1c:	ldr	r2, [r1, #8]
   3ae20:	lsl	r3, r3, #1
   3ae24:	cmp	r2, r3
   3ae28:	mov	lr, r1
   3ae2c:	bgt	3ae38 <flatcc_json_printer_int64_enum_vector_field@@Base+0x40>
   3ae30:	add	sp, sp, #4
   3ae34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ae38:	ldr	r2, [r1, #4]
   3ae3c:	ldrh	r2, [r2, r3]
   3ae40:	cmp	r2, #0
   3ae44:	beq	3ae30 <flatcc_json_printer_int64_enum_vector_field@@Base+0x38>
   3ae48:	mov	r4, r0
   3ae4c:	ldr	r0, [r1]
   3ae50:	adds	ip, r0, r2
   3ae54:	beq	3ae30 <flatcc_json_printer_int64_enum_vector_field@@Base+0x38>
   3ae58:	ldr	r3, [r1, #16]
   3ae5c:	cmp	r3, #0
   3ae60:	add	r3, r3, #1
   3ae64:	str	r3, [r1, #16]
   3ae68:	ldrne	r3, [r4, #20]
   3ae6c:	movne	r1, #44	; 0x2c
   3ae70:	addne	lr, r3, #1
   3ae74:	strne	lr, [r4, #20]
   3ae78:	strbne	r1, [r3]
   3ae7c:	ldr	r3, [r0, r2]
   3ae80:	mov	r1, r6
   3ae84:	mov	r2, r5
   3ae88:	mov	r0, r4
   3ae8c:	ldr	r5, [ip, r3]
   3ae90:	add	r6, ip, r3
   3ae94:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   3ae98:	ldr	r3, [r4, #32]
   3ae9c:	ldr	r2, [r4, #20]
   3aea0:	add	r3, r3, #1
   3aea4:	add	r0, r2, #1
   3aea8:	mov	r1, #91	; 0x5b
   3aeac:	cmp	r5, #0
   3aeb0:	str	r3, [r4, #32]
   3aeb4:	str	r0, [r4, #20]
   3aeb8:	strb	r1, [r2]
   3aebc:	beq	3afcc <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d4>
   3aec0:	ldrb	r1, [r4, #25]
   3aec4:	cmp	r1, #0
   3aec8:	bne	3b048 <flatcc_json_printer_int64_enum_vector_field@@Base+0x250>
   3aecc:	ldr	r2, [r4, #20]
   3aed0:	ldr	r3, [r4, #16]
   3aed4:	cmp	r2, r3
   3aed8:	bcs	3b078 <flatcc_json_printer_int64_enum_vector_field@@Base+0x280>
   3aedc:	ldrd	r2, [r6, #4]
   3aee0:	mov	r0, r4
   3aee4:	blx	r7
   3aee8:	cmp	r5, #1
   3aeec:	add	r6, r6, #12
   3aef0:	sub	r5, r5, #2
   3aef4:	beq	3afcc <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d4>
   3aef8:	mov	r8, #44	; 0x2c
   3aefc:	mov	sl, #10
   3af00:	mov	r9, #32
   3af04:	b	3af30 <flatcc_json_printer_int64_enum_vector_field@@Base+0x138>
   3af08:	ldr	r2, [r4, #20]
   3af0c:	ldr	r3, [r4, #16]
   3af10:	cmp	r2, r3
   3af14:	bcs	3afa8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1b0>
   3af18:	ldrd	r2, [r6], #8
   3af1c:	mov	r0, r4
   3af20:	blx	r7
   3af24:	cmp	r5, #0
   3af28:	sub	r5, r5, #1
   3af2c:	beq	3afcc <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d4>
   3af30:	ldr	r3, [r4, #20]
   3af34:	add	r2, r3, #1
   3af38:	str	r2, [r4, #20]
   3af3c:	strb	r8, [r3]
   3af40:	ldrb	r3, [r4, #25]
   3af44:	cmp	r3, #0
   3af48:	beq	3af08 <flatcc_json_printer_int64_enum_vector_field@@Base+0x110>
   3af4c:	ldr	r3, [r4, #20]
   3af50:	mov	r1, r9
   3af54:	add	r2, r3, #1
   3af58:	str	r2, [r4, #20]
   3af5c:	strb	sl, [r3]
   3af60:	ldrb	r3, [r4, #25]
   3af64:	ldr	r2, [r4, #32]
   3af68:	ldr	ip, [r4, #20]
   3af6c:	ldr	lr, [r4, #16]
   3af70:	mul	fp, r2, r3
   3af74:	mov	r0, ip
   3af78:	add	ip, ip, fp
   3af7c:	cmp	lr, ip
   3af80:	mov	r2, fp
   3af84:	bcc	3afbc <flatcc_json_printer_int64_enum_vector_field@@Base+0x1c4>
   3af88:	bl	145bc <memset@plt>
   3af8c:	ldr	r2, [r4, #20]
   3af90:	add	r3, r2, fp
   3af94:	str	r3, [r4, #20]
   3af98:	b	3af18 <flatcc_json_printer_int64_enum_vector_field@@Base+0x120>
   3af9c:	add	sp, sp, #4
   3afa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3afa4:	b	38df4 <flatcc_json_printer_int64_vector_field@@Base>
   3afa8:	ldr	r3, [r4, #44]	; 0x2c
   3afac:	mov	r1, #0
   3afb0:	mov	r0, r4
   3afb4:	blx	r3
   3afb8:	b	3af18 <flatcc_json_printer_int64_enum_vector_field@@Base+0x120>
   3afbc:	mov	r1, fp
   3afc0:	mov	r0, r4
   3afc4:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3afc8:	b	3af18 <flatcc_json_printer_int64_enum_vector_field@@Base+0x120>
   3afcc:	ldrb	r3, [r4, #25]
   3afd0:	cmp	r3, #0
   3afd4:	bne	3aff4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1fc>
   3afd8:	ldr	r3, [r4, #20]
   3afdc:	add	r1, r3, #1
   3afe0:	mov	r2, #93	; 0x5d
   3afe4:	str	r1, [r4, #20]
   3afe8:	strb	r2, [r3]
   3afec:	add	sp, sp, #4
   3aff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3aff4:	ldr	r3, [r4, #20]
   3aff8:	mov	r2, #10
   3affc:	add	r1, r3, #1
   3b000:	str	r1, [r4, #20]
   3b004:	strb	r2, [r3]
   3b008:	ldr	r2, [r4, #32]
   3b00c:	ldrb	r3, [r4, #25]
   3b010:	sub	r2, r2, #1
   3b014:	ldr	r0, [r4, #20]
   3b018:	ldr	r1, [r4, #16]
   3b01c:	mul	r5, r2, r3
   3b020:	str	r2, [r4, #32]
   3b024:	add	r3, r0, r5
   3b028:	cmp	r1, r3
   3b02c:	bcc	3b068 <flatcc_json_printer_int64_enum_vector_field@@Base+0x270>
   3b030:	mov	r2, r5
   3b034:	mov	r1, #32
   3b038:	bl	145bc <memset@plt>
   3b03c:	ldr	r3, [r4, #20]
   3b040:	add	r3, r3, r5
   3b044:	b	3afdc <flatcc_json_printer_int64_enum_vector_field@@Base+0x1e4>
   3b048:	ldr	r3, [r4, #20]
   3b04c:	mov	r2, #10
   3b050:	add	r1, r3, #1
   3b054:	str	r1, [r4, #20]
   3b058:	mov	r0, r4
   3b05c:	strb	r2, [r3]
   3b060:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   3b064:	b	3aedc <flatcc_json_printer_int64_enum_vector_field@@Base+0xe4>
   3b068:	mov	r1, r5
   3b06c:	mov	r0, r4
   3b070:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3b074:	b	3afd8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1e0>
   3b078:	ldr	r3, [r4, #44]	; 0x2c
   3b07c:	mov	r0, r4
   3b080:	blx	r3
   3b084:	b	3aedc <flatcc_json_printer_int64_enum_vector_field@@Base+0xe4>

0003b088 <flatcc_json_printer_bool_enum_vector_field@@Base>:
   3b088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b08c:	sub	sp, sp, #4
   3b090:	ldrb	r5, [r0, #27]
   3b094:	ldr	r8, [sp, #44]	; 0x2c
   3b098:	cmp	r5, #0
   3b09c:	ldr	r5, [sp, #40]	; 0x28
   3b0a0:	bne	3b228 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1a0>
   3b0a4:	mov	r6, r3
   3b0a8:	add	r3, r2, #2
   3b0ac:	ldr	r2, [r1, #8]
   3b0b0:	lsl	r3, r3, #1
   3b0b4:	cmp	r2, r3
   3b0b8:	mov	lr, r1
   3b0bc:	bgt	3b0c8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x40>
   3b0c0:	add	sp, sp, #4
   3b0c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b0c8:	ldr	r2, [r1, #4]
   3b0cc:	ldrh	r2, [r2, r3]
   3b0d0:	cmp	r2, #0
   3b0d4:	beq	3b0c0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x38>
   3b0d8:	mov	r4, r0
   3b0dc:	ldr	r0, [r1]
   3b0e0:	adds	ip, r0, r2
   3b0e4:	beq	3b0c0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x38>
   3b0e8:	ldr	r3, [r1, #16]
   3b0ec:	cmp	r3, #0
   3b0f0:	add	r3, r3, #1
   3b0f4:	str	r3, [r1, #16]
   3b0f8:	ldrne	r3, [r4, #20]
   3b0fc:	movne	r1, #44	; 0x2c
   3b100:	addne	lr, r3, #1
   3b104:	strne	lr, [r4, #20]
   3b108:	strbne	r1, [r3]
   3b10c:	ldr	r3, [r0, r2]
   3b110:	mov	r1, r6
   3b114:	mov	r2, r5
   3b118:	mov	r0, r4
   3b11c:	ldr	r6, [ip, r3]
   3b120:	add	r7, ip, r3
   3b124:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   3b128:	ldr	r3, [r4, #32]
   3b12c:	ldr	r2, [r4, #20]
   3b130:	add	r3, r3, #1
   3b134:	add	r0, r2, #1
   3b138:	mov	r1, #91	; 0x5b
   3b13c:	cmp	r6, #0
   3b140:	str	r3, [r4, #32]
   3b144:	str	r0, [r4, #20]
   3b148:	strb	r1, [r2]
   3b14c:	beq	3b258 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d0>
   3b150:	ldrb	r1, [r4, #25]
   3b154:	cmp	r1, #0
   3b158:	bne	3b2d4 <flatcc_json_printer_bool_enum_vector_field@@Base+0x24c>
   3b15c:	ldr	r2, [r4, #20]
   3b160:	ldr	r3, [r4, #16]
   3b164:	cmp	r2, r3
   3b168:	bcs	3b304 <flatcc_json_printer_bool_enum_vector_field@@Base+0x27c>
   3b16c:	ldrb	r1, [r7, #4]
   3b170:	mov	r0, r4
   3b174:	blx	r8
   3b178:	cmp	r6, #1
   3b17c:	add	r5, r7, #5
   3b180:	beq	3b258 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d0>
   3b184:	add	r6, r6, #4
   3b188:	mov	r9, #44	; 0x2c
   3b18c:	mov	fp, #10
   3b190:	b	3b1bc <flatcc_json_printer_bool_enum_vector_field@@Base+0x134>
   3b194:	ldr	r2, [r4, #20]
   3b198:	ldr	r3, [r4, #16]
   3b19c:	cmp	r2, r3
   3b1a0:	bcs	3b234 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1ac>
   3b1a4:	ldrb	r1, [r5], #1
   3b1a8:	mov	r0, r4
   3b1ac:	blx	r8
   3b1b0:	sub	r3, r6, r5
   3b1b4:	cmn	r7, r3
   3b1b8:	beq	3b258 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d0>
   3b1bc:	ldr	r3, [r4, #20]
   3b1c0:	add	r2, r3, #1
   3b1c4:	str	r2, [r4, #20]
   3b1c8:	strb	r9, [r3]
   3b1cc:	ldrb	r3, [r4, #25]
   3b1d0:	cmp	r3, #0
   3b1d4:	beq	3b194 <flatcc_json_printer_bool_enum_vector_field@@Base+0x10c>
   3b1d8:	ldr	r3, [r4, #20]
   3b1dc:	mov	r1, #32
   3b1e0:	add	r2, r3, #1
   3b1e4:	str	r2, [r4, #20]
   3b1e8:	strb	fp, [r3]
   3b1ec:	ldrb	r2, [r4, #25]
   3b1f0:	ldr	sl, [r4, #32]
   3b1f4:	ldr	r3, [r4, #20]
   3b1f8:	ldr	ip, [r4, #16]
   3b1fc:	mul	sl, sl, r2
   3b200:	mov	r0, r3
   3b204:	add	r3, r3, sl
   3b208:	cmp	ip, r3
   3b20c:	mov	r2, sl
   3b210:	bcc	3b248 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1c0>
   3b214:	bl	145bc <memset@plt>
   3b218:	ldr	r3, [r4, #20]
   3b21c:	add	sl, r3, sl
   3b220:	str	sl, [r4, #20]
   3b224:	b	3b1a4 <flatcc_json_printer_bool_enum_vector_field@@Base+0x11c>
   3b228:	add	sp, sp, #4
   3b22c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b230:	b	390bc <flatcc_json_printer_bool_vector_field@@Base>
   3b234:	ldr	r3, [r4, #44]	; 0x2c
   3b238:	mov	r1, #0
   3b23c:	mov	r0, r4
   3b240:	blx	r3
   3b244:	b	3b1a4 <flatcc_json_printer_bool_enum_vector_field@@Base+0x11c>
   3b248:	mov	r1, sl
   3b24c:	mov	r0, r4
   3b250:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3b254:	b	3b1a4 <flatcc_json_printer_bool_enum_vector_field@@Base+0x11c>
   3b258:	ldrb	r3, [r4, #25]
   3b25c:	cmp	r3, #0
   3b260:	bne	3b280 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1f8>
   3b264:	ldr	r3, [r4, #20]
   3b268:	add	r1, r3, #1
   3b26c:	mov	r2, #93	; 0x5d
   3b270:	str	r1, [r4, #20]
   3b274:	strb	r2, [r3]
   3b278:	add	sp, sp, #4
   3b27c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b280:	ldr	r3, [r4, #20]
   3b284:	mov	r2, #10
   3b288:	add	r1, r3, #1
   3b28c:	str	r1, [r4, #20]
   3b290:	strb	r2, [r3]
   3b294:	ldr	r2, [r4, #32]
   3b298:	ldrb	r3, [r4, #25]
   3b29c:	sub	r2, r2, #1
   3b2a0:	ldr	r0, [r4, #20]
   3b2a4:	ldr	r1, [r4, #16]
   3b2a8:	mul	r5, r2, r3
   3b2ac:	str	r2, [r4, #32]
   3b2b0:	add	r3, r0, r5
   3b2b4:	cmp	r1, r3
   3b2b8:	bcc	3b2f4 <flatcc_json_printer_bool_enum_vector_field@@Base+0x26c>
   3b2bc:	mov	r2, r5
   3b2c0:	mov	r1, #32
   3b2c4:	bl	145bc <memset@plt>
   3b2c8:	ldr	r3, [r4, #20]
   3b2cc:	add	r3, r3, r5
   3b2d0:	b	3b268 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1e0>
   3b2d4:	ldr	r3, [r4, #20]
   3b2d8:	mov	r2, #10
   3b2dc:	add	r1, r3, #1
   3b2e0:	str	r1, [r4, #20]
   3b2e4:	mov	r0, r4
   3b2e8:	strb	r2, [r3]
   3b2ec:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   3b2f0:	b	3b16c <flatcc_json_printer_bool_enum_vector_field@@Base+0xe4>
   3b2f4:	mov	r1, r5
   3b2f8:	mov	r0, r4
   3b2fc:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3b300:	b	3b264 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1dc>
   3b304:	ldr	r3, [r4, #44]	; 0x2c
   3b308:	mov	r0, r4
   3b30c:	blx	r3
   3b310:	b	3b16c <flatcc_json_printer_bool_enum_vector_field@@Base+0xe4>

0003b314 <flatcc_json_printer_struct_vector_field@@Base>:
   3b314:	add	r2, r2, #2
   3b318:	ldr	ip, [r1, #8]
   3b31c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b320:	lsl	r2, r2, #1
   3b324:	sub	sp, sp, #12
   3b328:	cmp	r2, ip
   3b32c:	ldr	r9, [sp, #52]	; 0x34
   3b330:	ldr	r8, [sp, #56]	; 0x38
   3b334:	bge	3b52c <flatcc_json_printer_struct_vector_field@@Base+0x218>
   3b338:	ldr	ip, [r1, #4]
   3b33c:	ldrh	lr, [ip, r2]
   3b340:	cmp	lr, #0
   3b344:	beq	3b52c <flatcc_json_printer_struct_vector_field@@Base+0x218>
   3b348:	ldr	r5, [r1]
   3b34c:	adds	ip, r5, lr
   3b350:	beq	3b52c <flatcc_json_printer_struct_vector_field@@Base+0x218>
   3b354:	ldr	r2, [r1, #16]
   3b358:	cmp	r2, #0
   3b35c:	add	r2, r2, #1
   3b360:	str	r2, [r1, #16]
   3b364:	ldrne	r2, [r0, #20]
   3b368:	movne	r1, #44	; 0x2c
   3b36c:	addne	r4, r2, #1
   3b370:	strne	r4, [r0, #20]
   3b374:	strbne	r1, [r2]
   3b378:	mov	r1, r3
   3b37c:	ldr	r3, [r5, lr]
   3b380:	mov	r4, r0
   3b384:	ldr	r2, [sp, #48]	; 0x30
   3b388:	ldr	r5, [ip, r3]
   3b38c:	add	r6, ip, r3
   3b390:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   3b394:	ldr	r3, [r4, #32]
   3b398:	ldr	r2, [r4, #20]
   3b39c:	add	r3, r3, #1
   3b3a0:	add	r0, r2, #1
   3b3a4:	mov	r1, #91	; 0x5b
   3b3a8:	cmp	r5, #0
   3b3ac:	str	r3, [r4, #32]
   3b3b0:	str	r0, [r4, #20]
   3b3b4:	strb	r1, [r2]
   3b3b8:	beq	3b50c <flatcc_json_printer_struct_vector_field@@Base+0x1f8>
   3b3bc:	ldrb	r1, [r4, #25]
   3b3c0:	cmp	r1, #0
   3b3c4:	bne	3b65c <flatcc_json_printer_struct_vector_field@@Base+0x348>
   3b3c8:	ldr	r2, [r4, #20]
   3b3cc:	ldr	r3, [r4, #16]
   3b3d0:	cmp	r2, r3
   3b3d4:	bcs	3b680 <flatcc_json_printer_struct_vector_field@@Base+0x36c>
   3b3d8:	ldr	r3, [r4, #32]
   3b3dc:	add	r1, r2, #1
   3b3e0:	add	r3, r3, #1
   3b3e4:	mov	r0, #123	; 0x7b
   3b3e8:	add	r6, r6, #4
   3b3ec:	str	r3, [r4, #32]
   3b3f0:	str	r1, [r4, #20]
   3b3f4:	strb	r0, [r2]
   3b3f8:	mov	r1, r6
   3b3fc:	mov	r0, r4
   3b400:	blx	r8
   3b404:	ldrb	r3, [r4, #25]
   3b408:	cmp	r3, #0
   3b40c:	bne	3b630 <flatcc_json_printer_struct_vector_field@@Base+0x31c>
   3b410:	ldr	r3, [r4, #20]
   3b414:	cmp	r5, #1
   3b418:	add	r2, r3, #1
   3b41c:	mov	r7, #125	; 0x7d
   3b420:	str	r2, [r4, #20]
   3b424:	sub	r5, r5, #2
   3b428:	strb	r7, [r3]
   3b42c:	beq	3b50c <flatcc_json_printer_struct_vector_field@@Base+0x1f8>
   3b430:	mov	fp, #44	; 0x2c
   3b434:	mov	sl, #123	; 0x7b
   3b438:	b	3b498 <flatcc_json_printer_struct_vector_field@@Base+0x184>
   3b43c:	ldr	r2, [r4, #20]
   3b440:	ldr	r3, [r4, #16]
   3b444:	cmp	r2, r3
   3b448:	bcs	3b590 <flatcc_json_printer_struct_vector_field@@Base+0x27c>
   3b44c:	ldr	r3, [r4, #32]
   3b450:	add	r1, r2, #1
   3b454:	add	r3, r3, #1
   3b458:	str	r3, [r4, #32]
   3b45c:	str	r1, [r4, #20]
   3b460:	mov	r0, r4
   3b464:	mov	r1, r6
   3b468:	strb	sl, [r2]
   3b46c:	blx	r8
   3b470:	ldrb	r3, [r4, #25]
   3b474:	cmp	r3, #0
   3b478:	bne	3b534 <flatcc_json_printer_struct_vector_field@@Base+0x220>
   3b47c:	ldr	r1, [r4, #20]
   3b480:	cmp	r5, #0
   3b484:	add	r3, r1, #1
   3b488:	str	r3, [r4, #20]
   3b48c:	sub	r5, r5, #1
   3b490:	strb	r7, [r1]
   3b494:	beq	3b50c <flatcc_json_printer_struct_vector_field@@Base+0x1f8>
   3b498:	ldr	r3, [r4, #20]
   3b49c:	add	r6, r6, r9
   3b4a0:	add	r2, r3, #1
   3b4a4:	str	r2, [r4, #20]
   3b4a8:	strb	fp, [r3]
   3b4ac:	ldrb	r3, [r4, #25]
   3b4b0:	cmp	r3, #0
   3b4b4:	beq	3b43c <flatcc_json_printer_struct_vector_field@@Base+0x128>
   3b4b8:	ldr	r3, [r4, #20]
   3b4bc:	add	r2, r3, #1
   3b4c0:	str	r2, [r4, #20]
   3b4c4:	mov	r2, #10
   3b4c8:	strb	r2, [r3]
   3b4cc:	ldrb	r3, [r4, #25]
   3b4d0:	ldr	r2, [r4, #32]
   3b4d4:	ldr	r0, [r4, #20]
   3b4d8:	ldr	r1, [r4, #16]
   3b4dc:	mul	r3, r2, r3
   3b4e0:	add	r2, r0, r3
   3b4e4:	cmp	r1, r2
   3b4e8:	bcc	3b5a8 <flatcc_json_printer_struct_vector_field@@Base+0x294>
   3b4ec:	mov	r2, r3
   3b4f0:	mov	r1, #32
   3b4f4:	str	r3, [sp, #4]
   3b4f8:	bl	145bc <memset@plt>
   3b4fc:	ldr	r2, [r4, #20]
   3b500:	ldr	r3, [sp, #4]
   3b504:	add	r2, r2, r3
   3b508:	b	3b44c <flatcc_json_printer_struct_vector_field@@Base+0x138>
   3b50c:	ldrb	r3, [r4, #25]
   3b510:	cmp	r3, #0
   3b514:	bne	3b5cc <flatcc_json_printer_struct_vector_field@@Base+0x2b8>
   3b518:	ldr	r3, [r4, #20]
   3b51c:	add	r1, r3, #1
   3b520:	mov	r2, #93	; 0x5d
   3b524:	str	r1, [r4, #20]
   3b528:	strb	r2, [r3]
   3b52c:	add	sp, sp, #12
   3b530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b534:	ldr	r3, [r4, #20]
   3b538:	add	r2, r3, #1
   3b53c:	str	r2, [r4, #20]
   3b540:	mov	r2, #10
   3b544:	strb	r2, [r3]
   3b548:	ldr	r2, [r4, #32]
   3b54c:	ldrb	r1, [r4, #25]
   3b550:	sub	r2, r2, #1
   3b554:	ldr	r0, [r4, #20]
   3b558:	ldr	ip, [r4, #16]
   3b55c:	mul	r3, r2, r1
   3b560:	str	r2, [r4, #32]
   3b564:	add	r2, r0, r3
   3b568:	cmp	ip, r2
   3b56c:	bcc	3b5bc <flatcc_json_printer_struct_vector_field@@Base+0x2a8>
   3b570:	mov	r2, r3
   3b574:	mov	r1, #32
   3b578:	str	r3, [sp, #4]
   3b57c:	bl	145bc <memset@plt>
   3b580:	ldr	r1, [r4, #20]
   3b584:	ldr	r3, [sp, #4]
   3b588:	add	r1, r1, r3
   3b58c:	b	3b480 <flatcc_json_printer_struct_vector_field@@Base+0x16c>
   3b590:	ldr	r3, [r4, #44]	; 0x2c
   3b594:	mov	r1, #0
   3b598:	mov	r0, r4
   3b59c:	blx	r3
   3b5a0:	ldr	r2, [r4, #20]
   3b5a4:	b	3b44c <flatcc_json_printer_struct_vector_field@@Base+0x138>
   3b5a8:	mov	r1, r3
   3b5ac:	mov	r0, r4
   3b5b0:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3b5b4:	ldr	r2, [r4, #20]
   3b5b8:	b	3b44c <flatcc_json_printer_struct_vector_field@@Base+0x138>
   3b5bc:	mov	r1, r3
   3b5c0:	mov	r0, r4
   3b5c4:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3b5c8:	b	3b47c <flatcc_json_printer_struct_vector_field@@Base+0x168>
   3b5cc:	ldr	r3, [r4, #20]
   3b5d0:	mov	r2, #10
   3b5d4:	add	r1, r3, #1
   3b5d8:	str	r1, [r4, #20]
   3b5dc:	strb	r2, [r3]
   3b5e0:	ldr	r2, [r4, #32]
   3b5e4:	ldrb	r3, [r4, #25]
   3b5e8:	sub	r2, r2, #1
   3b5ec:	ldr	r0, [r4, #20]
   3b5f0:	ldr	r1, [r4, #16]
   3b5f4:	mul	r5, r2, r3
   3b5f8:	str	r2, [r4, #32]
   3b5fc:	add	r3, r0, r5
   3b600:	cmp	r1, r3
   3b604:	bcc	3b620 <flatcc_json_printer_struct_vector_field@@Base+0x30c>
   3b608:	mov	r2, r5
   3b60c:	mov	r1, #32
   3b610:	bl	145bc <memset@plt>
   3b614:	ldr	r3, [r4, #20]
   3b618:	add	r3, r3, r5
   3b61c:	b	3b51c <flatcc_json_printer_struct_vector_field@@Base+0x208>
   3b620:	mov	r1, r5
   3b624:	mov	r0, r4
   3b628:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3b62c:	b	3b518 <flatcc_json_printer_struct_vector_field@@Base+0x204>
   3b630:	ldr	r3, [r4, #20]
   3b634:	mov	r2, #10
   3b638:	add	r1, r3, #1
   3b63c:	str	r1, [r4, #20]
   3b640:	strb	r2, [r3]
   3b644:	ldr	r3, [r4, #32]
   3b648:	mov	r0, r4
   3b64c:	sub	r3, r3, #1
   3b650:	str	r3, [r4, #32]
   3b654:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   3b658:	b	3b410 <flatcc_json_printer_struct_vector_field@@Base+0xfc>
   3b65c:	ldr	r3, [r4, #20]
   3b660:	mov	r2, #10
   3b664:	add	r1, r3, #1
   3b668:	str	r1, [r4, #20]
   3b66c:	mov	r0, r4
   3b670:	strb	r2, [r3]
   3b674:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   3b678:	ldr	r2, [r4, #20]
   3b67c:	b	3b3d8 <flatcc_json_printer_struct_vector_field@@Base+0xc4>
   3b680:	ldr	r3, [r4, #44]	; 0x2c
   3b684:	mov	r0, r4
   3b688:	blx	r3
   3b68c:	ldr	r2, [r4, #20]
   3b690:	b	3b3d8 <flatcc_json_printer_struct_vector_field@@Base+0xc4>

0003b694 <flatcc_json_printer_string_vector_field@@Base>:
   3b694:	add	r2, r2, #2
   3b698:	ldr	ip, [r1, #8]
   3b69c:	lsl	r2, r2, #1
   3b6a0:	cmp	ip, r2
   3b6a4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b6a8:	ldr	r6, [sp, #40]	; 0x28
   3b6ac:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b6b0:	ldr	ip, [r1, #4]
   3b6b4:	ldrh	ip, [ip, r2]
   3b6b8:	cmp	ip, #0
   3b6bc:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b6c0:	ldr	r5, [r1]
   3b6c4:	adds	lr, r5, ip
   3b6c8:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b6cc:	ldr	r2, [r1, #16]
   3b6d0:	mov	r8, r3
   3b6d4:	cmp	r2, #0
   3b6d8:	add	r2, r2, #1
   3b6dc:	str	r2, [r1, #16]
   3b6e0:	ldrne	r2, [r0, #20]
   3b6e4:	movne	r1, #44	; 0x2c
   3b6e8:	addne	r4, r2, #1
   3b6ec:	strne	r4, [r0, #20]
   3b6f0:	strbne	r1, [r2]
   3b6f4:	ldrb	r1, [r0, #25]
   3b6f8:	ldr	r3, [r5, ip]
   3b6fc:	mov	r4, r0
   3b700:	cmp	r1, #0
   3b704:	add	r7, lr, r3
   3b708:	ldr	r5, [lr, r3]
   3b70c:	ldr	r3, [r0, #20]
   3b710:	bne	3b9a4 <flatcc_json_printer_string_vector_field@@Base+0x310>
   3b714:	ldr	r2, [r0, #16]
   3b718:	cmp	r3, r2
   3b71c:	bcc	3b72c <flatcc_json_printer_string_vector_field@@Base+0x98>
   3b720:	ldr	r3, [r0, #44]	; 0x2c
   3b724:	blx	r3
   3b728:	ldr	r3, [r4, #20]
   3b72c:	mov	r2, #34	; 0x22
   3b730:	strb	r2, [r3]
   3b734:	ldrb	r3, [r4, #26]
   3b738:	ldr	r0, [r4, #20]
   3b73c:	ldr	r2, [r4, #16]
   3b740:	cmp	r3, #0
   3b744:	addeq	r0, r0, #1
   3b748:	add	r3, r0, r6
   3b74c:	cmp	r2, r3
   3b750:	str	r0, [r4, #20]
   3b754:	bhi	3b924 <flatcc_json_printer_string_vector_field@@Base+0x290>
   3b758:	mov	r2, r6
   3b75c:	mov	r1, r8
   3b760:	mov	r0, r4
   3b764:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   3b768:	ldr	r6, [r4, #20]
   3b76c:	mov	r3, #34	; 0x22
   3b770:	strb	r3, [r6]
   3b774:	ldr	r1, [r4, #20]
   3b778:	ldrb	r3, [r4, #26]
   3b77c:	clz	r3, r3
   3b780:	lsr	r3, r3, #5
   3b784:	add	r2, r1, r3
   3b788:	add	r2, r2, #1
   3b78c:	mov	r0, #58	; 0x3a
   3b790:	str	r2, [r4, #20]
   3b794:	strb	r0, [r1, r3]
   3b798:	ldr	r3, [r4, #20]
   3b79c:	mov	lr, #32
   3b7a0:	mov	r1, #91	; 0x5b
   3b7a4:	strb	lr, [r3]
   3b7a8:	ldrb	r3, [r4, #25]
   3b7ac:	ldr	ip, [r4, #20]
   3b7b0:	ldr	r2, [r4, #32]
   3b7b4:	adds	r3, r3, #0
   3b7b8:	movne	r3, #1
   3b7bc:	add	r0, ip, r3
   3b7c0:	add	r0, r0, #1
   3b7c4:	add	r2, r2, #1
   3b7c8:	cmp	r5, #0
   3b7cc:	str	r0, [r4, #20]
   3b7d0:	str	r2, [r4, #32]
   3b7d4:	strb	r1, [ip, r3]
   3b7d8:	beq	3b900 <flatcc_json_printer_string_vector_field@@Base+0x26c>
   3b7dc:	ldrb	r1, [r4, #25]
   3b7e0:	cmp	r1, #0
   3b7e4:	bne	3b9f0 <flatcc_json_printer_string_vector_field@@Base+0x35c>
   3b7e8:	ldr	r2, [r4, #20]
   3b7ec:	ldr	r3, [r4, #16]
   3b7f0:	cmp	r2, r3
   3b7f4:	bcs	3ba40 <flatcc_json_printer_string_vector_field@@Base+0x3ac>
   3b7f8:	ldr	r3, [r7, #4]
   3b7fc:	mov	r0, r4
   3b800:	add	r3, r3, #4
   3b804:	add	r1, r7, r3
   3b808:	add	r1, r1, #4
   3b80c:	ldr	r2, [r7, r3]
   3b810:	bl	322fc <flatcc_json_parser_table_as_root@@Base+0x2110>
   3b814:	cmp	r5, #1
   3b818:	sub	r5, r5, #2
   3b81c:	beq	3b900 <flatcc_json_printer_string_vector_field@@Base+0x26c>
   3b820:	add	r7, r7, #8
   3b824:	mov	r8, #44	; 0x2c
   3b828:	mov	sl, #10
   3b82c:	mov	r9, #32
   3b830:	b	3b86c <flatcc_json_printer_string_vector_field@@Base+0x1d8>
   3b834:	ldr	r2, [r4, #20]
   3b838:	ldr	r3, [r4, #16]
   3b83c:	cmp	r2, r3
   3b840:	bcs	3b8dc <flatcc_json_printer_string_vector_field@@Base+0x248>
   3b844:	ldr	r3, [r6]
   3b848:	mov	r0, r4
   3b84c:	add	r1, r6, r3
   3b850:	add	r1, r1, #4
   3b854:	ldr	r2, [r6, r3]
   3b858:	bl	322fc <flatcc_json_parser_table_as_root@@Base+0x2110>
   3b85c:	cmp	r5, #0
   3b860:	add	r7, r7, #4
   3b864:	sub	r5, r5, #1
   3b868:	beq	3b900 <flatcc_json_printer_string_vector_field@@Base+0x26c>
   3b86c:	ldr	r3, [r4, #20]
   3b870:	mov	r6, r7
   3b874:	add	r2, r3, #1
   3b878:	str	r2, [r4, #20]
   3b87c:	strb	r8, [r3]
   3b880:	ldrb	r3, [r4, #25]
   3b884:	cmp	r3, #0
   3b888:	beq	3b834 <flatcc_json_printer_string_vector_field@@Base+0x1a0>
   3b88c:	ldr	r3, [r4, #20]
   3b890:	mov	r1, r9
   3b894:	add	r2, r3, #1
   3b898:	str	r2, [r4, #20]
   3b89c:	strb	sl, [r3]
   3b8a0:	ldrb	r3, [r4, #25]
   3b8a4:	ldr	r2, [r4, #32]
   3b8a8:	ldr	ip, [r4, #20]
   3b8ac:	ldr	lr, [r4, #16]
   3b8b0:	mul	fp, r2, r3
   3b8b4:	mov	r0, ip
   3b8b8:	add	ip, ip, fp
   3b8bc:	cmp	lr, ip
   3b8c0:	mov	r2, fp
   3b8c4:	bcc	3b8f0 <flatcc_json_printer_string_vector_field@@Base+0x25c>
   3b8c8:	bl	145bc <memset@plt>
   3b8cc:	ldr	r2, [r4, #20]
   3b8d0:	add	r3, r2, fp
   3b8d4:	str	r3, [r4, #20]
   3b8d8:	b	3b844 <flatcc_json_printer_string_vector_field@@Base+0x1b0>
   3b8dc:	ldr	r3, [r4, #44]	; 0x2c
   3b8e0:	mov	r1, #0
   3b8e4:	mov	r0, r4
   3b8e8:	blx	r3
   3b8ec:	b	3b844 <flatcc_json_printer_string_vector_field@@Base+0x1b0>
   3b8f0:	mov	r1, fp
   3b8f4:	mov	r0, r4
   3b8f8:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3b8fc:	b	3b844 <flatcc_json_printer_string_vector_field@@Base+0x1b0>
   3b900:	ldrb	r3, [r4, #25]
   3b904:	cmp	r3, #0
   3b908:	bne	3b940 <flatcc_json_printer_string_vector_field@@Base+0x2ac>
   3b90c:	ldr	r3, [r4, #20]
   3b910:	add	r1, r3, #1
   3b914:	mov	r2, #93	; 0x5d
   3b918:	str	r1, [r4, #20]
   3b91c:	strb	r2, [r3]
   3b920:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b924:	mov	r2, r6
   3b928:	mov	r1, r8
   3b92c:	bl	14544 <memcpy@plt>
   3b930:	ldr	r3, [r4, #20]
   3b934:	add	r6, r3, r6
   3b938:	str	r6, [r4, #20]
   3b93c:	b	3b76c <flatcc_json_printer_string_vector_field@@Base+0xd8>
   3b940:	ldr	r3, [r4, #20]
   3b944:	mov	r2, #10
   3b948:	add	r1, r3, #1
   3b94c:	str	r1, [r4, #20]
   3b950:	strb	r2, [r3]
   3b954:	ldr	r2, [r4, #32]
   3b958:	ldrb	r3, [r4, #25]
   3b95c:	sub	r2, r2, #1
   3b960:	ldr	r0, [r4, #20]
   3b964:	ldr	r1, [r4, #16]
   3b968:	mul	r5, r2, r3
   3b96c:	str	r2, [r4, #32]
   3b970:	add	r3, r0, r5
   3b974:	cmp	r1, r3
   3b978:	bcc	3b994 <flatcc_json_printer_string_vector_field@@Base+0x300>
   3b97c:	mov	r2, r5
   3b980:	mov	r1, #32
   3b984:	bl	145bc <memset@plt>
   3b988:	ldr	r3, [r4, #20]
   3b98c:	add	r3, r3, r5
   3b990:	b	3b910 <flatcc_json_printer_string_vector_field@@Base+0x27c>
   3b994:	mov	r1, r5
   3b998:	mov	r0, r4
   3b99c:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3b9a0:	b	3b90c <flatcc_json_printer_string_vector_field@@Base+0x278>
   3b9a4:	mov	r2, #10
   3b9a8:	add	r1, r3, #1
   3b9ac:	str	r1, [r0, #20]
   3b9b0:	strb	r2, [r3]
   3b9b4:	ldrb	r3, [r0, #25]
   3b9b8:	ldr	r9, [r0, #32]
   3b9bc:	ldr	r0, [r0, #20]
   3b9c0:	ldr	r2, [r4, #16]
   3b9c4:	mul	r9, r9, r3
   3b9c8:	add	r3, r0, r9
   3b9cc:	cmp	r2, r3
   3b9d0:	bcc	3ba50 <flatcc_json_printer_string_vector_field@@Base+0x3bc>
   3b9d4:	mov	r2, r9
   3b9d8:	mov	r1, #32
   3b9dc:	bl	145bc <memset@plt>
   3b9e0:	ldr	r3, [r4, #20]
   3b9e4:	add	r3, r3, r9
   3b9e8:	str	r3, [r4, #20]
   3b9ec:	b	3b72c <flatcc_json_printer_string_vector_field@@Base+0x98>
   3b9f0:	ldr	r3, [r4, #20]
   3b9f4:	mov	r2, #10
   3b9f8:	add	r1, r3, #1
   3b9fc:	str	r1, [r4, #20]
   3ba00:	strb	r2, [r3]
   3ba04:	ldrb	r3, [r4, #25]
   3ba08:	ldr	r6, [r4, #32]
   3ba0c:	ldr	r0, [r4, #20]
   3ba10:	ldr	r2, [r4, #16]
   3ba14:	mul	r6, r6, r3
   3ba18:	add	r3, r0, r6
   3ba1c:	cmp	r2, r3
   3ba20:	bcc	3ba64 <flatcc_json_printer_string_vector_field@@Base+0x3d0>
   3ba24:	mov	r2, r6
   3ba28:	mov	r1, lr
   3ba2c:	bl	145bc <memset@plt>
   3ba30:	ldr	r3, [r4, #20]
   3ba34:	add	r6, r3, r6
   3ba38:	str	r6, [r4, #20]
   3ba3c:	b	3b7f8 <flatcc_json_printer_string_vector_field@@Base+0x164>
   3ba40:	ldr	r3, [r4, #44]	; 0x2c
   3ba44:	mov	r0, r4
   3ba48:	blx	r3
   3ba4c:	b	3b7f8 <flatcc_json_printer_string_vector_field@@Base+0x164>
   3ba50:	mov	r1, r9
   3ba54:	mov	r0, r4
   3ba58:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3ba5c:	ldr	r3, [r4, #20]
   3ba60:	b	3b72c <flatcc_json_printer_string_vector_field@@Base+0x98>
   3ba64:	mov	r1, r6
   3ba68:	mov	r0, r4
   3ba6c:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3ba70:	b	3b7f8 <flatcc_json_printer_string_vector_field@@Base+0x164>

0003ba74 <flatcc_json_printer_table_vector_field@@Base>:
   3ba74:	add	r2, r2, #2
   3ba78:	ldr	ip, [r1, #8]
   3ba7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ba80:	lsl	r2, r2, #1
   3ba84:	sub	sp, sp, #44	; 0x2c
   3ba88:	cmp	ip, r2
   3ba8c:	ldr	r6, [sp, #80]	; 0x50
   3ba90:	ble	3bbe4 <flatcc_json_printer_table_vector_field@@Base+0x170>
   3ba94:	ldr	ip, [r1, #4]
   3ba98:	ldrh	ip, [ip, r2]
   3ba9c:	cmp	ip, #0
   3baa0:	beq	3bbe4 <flatcc_json_printer_table_vector_field@@Base+0x170>
   3baa4:	ldr	r5, [r1]
   3baa8:	adds	lr, r5, ip
   3baac:	beq	3bbe4 <flatcc_json_printer_table_vector_field@@Base+0x170>
   3bab0:	ldr	r2, [r1, #16]
   3bab4:	mov	r9, r3
   3bab8:	cmp	r2, #0
   3babc:	add	r2, r2, #1
   3bac0:	str	r2, [r1, #16]
   3bac4:	ldrne	r2, [r0, #20]
   3bac8:	movne	r4, #44	; 0x2c
   3bacc:	addne	r7, r2, #1
   3bad0:	strne	r7, [r0, #20]
   3bad4:	strbne	r4, [r2]
   3bad8:	mov	r7, r1
   3badc:	ldrb	r1, [r0, #25]
   3bae0:	ldr	r3, [r5, ip]
   3bae4:	mov	r4, r0
   3bae8:	cmp	r1, #0
   3baec:	add	r8, lr, r3
   3baf0:	ldr	r5, [lr, r3]
   3baf4:	ldr	r3, [r0, #20]
   3baf8:	bne	3be4c <flatcc_json_printer_table_vector_field@@Base+0x3d8>
   3bafc:	ldr	r2, [r0, #16]
   3bb00:	cmp	r3, r2
   3bb04:	bcc	3bb14 <flatcc_json_printer_table_vector_field@@Base+0xa0>
   3bb08:	ldr	r3, [r0, #44]	; 0x2c
   3bb0c:	blx	r3
   3bb10:	ldr	r3, [r4, #20]
   3bb14:	mov	r2, #34	; 0x22
   3bb18:	strb	r2, [r3]
   3bb1c:	ldrb	r3, [r4, #26]
   3bb20:	ldr	r0, [r4, #20]
   3bb24:	ldr	r2, [r4, #16]
   3bb28:	cmp	r3, #0
   3bb2c:	addeq	r0, r0, #1
   3bb30:	add	r3, r0, r6
   3bb34:	cmp	r2, r3
   3bb38:	str	r0, [r4, #20]
   3bb3c:	bhi	3bbec <flatcc_json_printer_table_vector_field@@Base+0x178>
   3bb40:	mov	r2, r6
   3bb44:	mov	r1, r9
   3bb48:	mov	r0, r4
   3bb4c:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   3bb50:	ldr	r6, [r4, #20]
   3bb54:	mov	r3, #34	; 0x22
   3bb58:	strb	r3, [r6]
   3bb5c:	ldr	r1, [r4, #20]
   3bb60:	ldrb	r3, [r4, #26]
   3bb64:	clz	r3, r3
   3bb68:	lsr	r3, r3, #5
   3bb6c:	add	r2, r1, r3
   3bb70:	add	r2, r2, #1
   3bb74:	mov	r0, #58	; 0x3a
   3bb78:	str	r2, [r4, #20]
   3bb7c:	strb	r0, [r1, r3]
   3bb80:	ldr	r3, [r4, #20]
   3bb84:	mov	r2, #32
   3bb88:	mov	ip, #91	; 0x5b
   3bb8c:	strb	r2, [r3]
   3bb90:	ldrb	r3, [r4, #25]
   3bb94:	ldr	r0, [r4, #20]
   3bb98:	ldr	r2, [r4, #32]
   3bb9c:	adds	r3, r3, #0
   3bba0:	movne	r3, #1
   3bba4:	add	r1, r0, r3
   3bba8:	add	r1, r1, #1
   3bbac:	add	r2, r2, #1
   3bbb0:	cmp	r5, #0
   3bbb4:	str	r1, [r4, #20]
   3bbb8:	str	r2, [r4, #32]
   3bbbc:	strb	ip, [r0, r3]
   3bbc0:	bne	3bc5c <flatcc_json_printer_table_vector_field@@Base+0x1e8>
   3bbc4:	ldrb	r3, [r4, #25]
   3bbc8:	cmp	r3, #0
   3bbcc:	bne	3bc08 <flatcc_json_printer_table_vector_field@@Base+0x194>
   3bbd0:	ldr	r3, [r4, #20]
   3bbd4:	add	r1, r3, #1
   3bbd8:	mov	r2, #93	; 0x5d
   3bbdc:	str	r1, [r4, #20]
   3bbe0:	strb	r2, [r3]
   3bbe4:	add	sp, sp, #44	; 0x2c
   3bbe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bbec:	mov	r2, r6
   3bbf0:	mov	r1, r9
   3bbf4:	bl	14544 <memcpy@plt>
   3bbf8:	ldr	r3, [r4, #20]
   3bbfc:	add	r6, r3, r6
   3bc00:	str	r6, [r4, #20]
   3bc04:	b	3bb54 <flatcc_json_printer_table_vector_field@@Base+0xe0>
   3bc08:	ldr	r3, [r4, #20]
   3bc0c:	mov	r2, #10
   3bc10:	add	r1, r3, #1
   3bc14:	str	r1, [r4, #20]
   3bc18:	strb	r2, [r3]
   3bc1c:	ldr	r2, [r4, #32]
   3bc20:	ldrb	r3, [r4, #25]
   3bc24:	sub	r2, r2, #1
   3bc28:	ldr	r0, [r4, #20]
   3bc2c:	ldr	r1, [r4, #16]
   3bc30:	mul	r5, r2, r3
   3bc34:	str	r2, [r4, #32]
   3bc38:	add	r3, r0, r5
   3bc3c:	cmp	r1, r3
   3bc40:	bcc	3bcdc <flatcc_json_printer_table_vector_field@@Base+0x268>
   3bc44:	mov	r2, r5
   3bc48:	mov	r1, #32
   3bc4c:	bl	145bc <memset@plt>
   3bc50:	ldr	r3, [r4, #20]
   3bc54:	add	r3, r3, r5
   3bc58:	b	3bbd4 <flatcc_json_printer_table_vector_field@@Base+0x160>
   3bc5c:	ldr	r3, [r7, #12]
   3bc60:	add	r6, r8, #4
   3bc64:	subs	r3, r3, #1
   3bc68:	bne	3bcec <flatcc_json_printer_table_vector_field@@Base+0x278>
   3bc6c:	ldr	r3, [r4, #36]	; 0x24
   3bc70:	cmp	r3, #0
   3bc74:	moveq	r3, #2
   3bc78:	streq	r3, [r4, #36]	; 0x24
   3bc7c:	sub	r5, r5, #1
   3bc80:	mov	sl, #44	; 0x2c
   3bc84:	mov	fp, #123	; 0x7b
   3bc88:	add	r9, sp, #20
   3bc8c:	sub	r5, r5, #1
   3bc90:	cmn	r5, #1
   3bc94:	mov	r1, #2
   3bc98:	beq	3bbc4 <flatcc_json_printer_table_vector_field@@Base+0x150>
   3bc9c:	ldr	r3, [r4, #20]
   3bca0:	add	r6, r6, #4
   3bca4:	add	r2, r3, #1
   3bca8:	str	r2, [r4, #20]
   3bcac:	strb	sl, [r3]
   3bcb0:	ldr	r3, [r7, #12]
   3bcb4:	subs	r3, r3, #1
   3bcb8:	bne	3bd68 <flatcc_json_printer_table_vector_field@@Base+0x2f4>
   3bcbc:	ldr	r3, [r4, #36]	; 0x24
   3bcc0:	sub	r5, r5, #1
   3bcc4:	cmp	r3, #0
   3bcc8:	streq	r1, [r4, #36]	; 0x24
   3bccc:	cmn	r5, #1
   3bcd0:	mov	r1, #2
   3bcd4:	bne	3bc9c <flatcc_json_printer_table_vector_field@@Base+0x228>
   3bcd8:	b	3bbc4 <flatcc_json_printer_table_vector_field@@Base+0x150>
   3bcdc:	mov	r1, r5
   3bce0:	mov	r0, r4
   3bce4:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3bce8:	b	3bbd0 <flatcc_json_printer_table_vector_field@@Base+0x15c>
   3bcec:	ldr	r1, [r4, #32]
   3bcf0:	ldr	r2, [r8, #4]
   3bcf4:	ldr	r0, [r4, #20]
   3bcf8:	add	r1, r1, #1
   3bcfc:	str	r1, [r4, #32]
   3bd00:	add	lr, r0, #1
   3bd04:	mov	ip, #123	; 0x7b
   3bd08:	mov	r1, #0
   3bd0c:	str	lr, [r4, #20]
   3bd10:	strb	ip, [r0]
   3bd14:	str	r3, [sp, #12]
   3bd18:	str	r1, [sp, #16]
   3bd1c:	ldr	r1, [r6, r2]
   3bd20:	add	r3, r6, r2
   3bd24:	sub	r2, r3, r1
   3bd28:	mov	r0, r4
   3bd2c:	ldrh	ip, [r2]
   3bd30:	mov	r1, sp
   3bd34:	str	r3, [sp]
   3bd38:	ldr	r3, [sp, #84]	; 0x54
   3bd3c:	stmib	sp, {r2, ip}
   3bd40:	blx	r3
   3bd44:	ldrb	r3, [r4, #25]
   3bd48:	cmp	r3, #0
   3bd4c:	bne	3beac <flatcc_json_printer_table_vector_field@@Base+0x438>
   3bd50:	ldr	r3, [r4, #20]
   3bd54:	mov	r2, #125	; 0x7d
   3bd58:	add	r1, r3, #1
   3bd5c:	str	r1, [r4, #20]
   3bd60:	strb	r2, [r3]
   3bd64:	b	3bc7c <flatcc_json_printer_table_vector_field@@Base+0x208>
   3bd68:	ldr	r1, [r4, #32]
   3bd6c:	ldr	r2, [r6]
   3bd70:	ldr	r0, [r4, #20]
   3bd74:	add	r1, r1, #1
   3bd78:	str	r1, [r4, #32]
   3bd7c:	add	ip, r0, #1
   3bd80:	mov	r1, #0
   3bd84:	str	ip, [r4, #20]
   3bd88:	strb	fp, [r0]
   3bd8c:	str	r3, [sp, #32]
   3bd90:	str	r1, [sp, #36]	; 0x24
   3bd94:	ldr	r1, [r6, r2]
   3bd98:	add	r3, r6, r2
   3bd9c:	sub	r2, r3, r1
   3bda0:	mov	r0, r4
   3bda4:	ldrh	ip, [r2]
   3bda8:	mov	r1, r9
   3bdac:	str	r3, [sp, #20]
   3bdb0:	ldr	r3, [sp, #84]	; 0x54
   3bdb4:	str	r2, [sp, #24]
   3bdb8:	str	ip, [sp, #28]
   3bdbc:	blx	r3
   3bdc0:	ldrb	r3, [r4, #25]
   3bdc4:	cmp	r3, #0
   3bdc8:	ldr	r3, [r4, #20]
   3bdcc:	bne	3bde4 <flatcc_json_printer_table_vector_field@@Base+0x370>
   3bdd0:	add	r2, r3, #1
   3bdd4:	str	r2, [r4, #20]
   3bdd8:	mov	r2, #125	; 0x7d
   3bddc:	strb	r2, [r3]
   3bde0:	b	3bc8c <flatcc_json_printer_table_vector_field@@Base+0x218>
   3bde4:	add	r2, r3, #1
   3bde8:	str	r2, [r4, #20]
   3bdec:	mov	r2, #10
   3bdf0:	strb	r2, [r3]
   3bdf4:	ldr	ip, [r4, #32]
   3bdf8:	ldrb	r3, [r4, #25]
   3bdfc:	sub	ip, ip, #1
   3be00:	ldr	lr, [r4, #20]
   3be04:	mov	r1, #32
   3be08:	mul	r8, ip, r3
   3be0c:	ldr	r3, [r4, #16]
   3be10:	mov	r0, lr
   3be14:	add	lr, lr, r8
   3be18:	cmp	r3, lr
   3be1c:	mov	r2, r8
   3be20:	str	ip, [r4, #32]
   3be24:	bcc	3be38 <flatcc_json_printer_table_vector_field@@Base+0x3c4>
   3be28:	bl	145bc <memset@plt>
   3be2c:	ldr	r3, [r4, #20]
   3be30:	add	r3, r3, r8
   3be34:	b	3bdd0 <flatcc_json_printer_table_vector_field@@Base+0x35c>
   3be38:	mov	r1, r8
   3be3c:	mov	r0, r4
   3be40:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3be44:	ldr	r3, [r4, #20]
   3be48:	b	3bdd0 <flatcc_json_printer_table_vector_field@@Base+0x35c>
   3be4c:	mov	r2, #10
   3be50:	add	r1, r3, #1
   3be54:	str	r1, [r0, #20]
   3be58:	strb	r2, [r3]
   3be5c:	ldrb	r3, [r0, #25]
   3be60:	ldr	sl, [r0, #32]
   3be64:	ldr	r0, [r0, #20]
   3be68:	ldr	r2, [r4, #16]
   3be6c:	mul	sl, sl, r3
   3be70:	add	r3, r0, sl
   3be74:	cmp	r2, r3
   3be78:	bcc	3be98 <flatcc_json_printer_table_vector_field@@Base+0x424>
   3be7c:	mov	r2, sl
   3be80:	mov	r1, #32
   3be84:	bl	145bc <memset@plt>
   3be88:	ldr	r3, [r4, #20]
   3be8c:	add	r3, r3, sl
   3be90:	str	r3, [r4, #20]
   3be94:	b	3bb14 <flatcc_json_printer_table_vector_field@@Base+0xa0>
   3be98:	mov	r1, sl
   3be9c:	mov	r0, r4
   3bea0:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3bea4:	ldr	r3, [r4, #20]
   3bea8:	b	3bb14 <flatcc_json_printer_table_vector_field@@Base+0xa0>
   3beac:	ldr	r3, [r4, #20]
   3beb0:	mov	r2, #10
   3beb4:	add	r1, r3, #1
   3beb8:	str	r1, [r4, #20]
   3bebc:	strb	r2, [r3]
   3bec0:	ldr	r3, [r4, #32]
   3bec4:	mov	r0, r4
   3bec8:	sub	r3, r3, #1
   3becc:	str	r3, [r4, #32]
   3bed0:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   3bed4:	b	3bd50 <flatcc_json_printer_table_vector_field@@Base+0x2dc>

0003bed8 <flatcc_json_printer_union_vector_field@@Base>:
   3bed8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bedc:	mov	r8, r2
   3bee0:	add	r2, r2, #1
   3bee4:	mov	r5, r1
   3bee8:	ldr	r1, [r1, #8]
   3beec:	sub	sp, sp, #140	; 0x8c
   3bef0:	lsl	r2, r2, #1
   3bef4:	cmp	r2, r1
   3bef8:	mov	r4, r0
   3befc:	mov	r9, r3
   3bf00:	ldr	r6, [sp, #176]	; 0xb0
   3bf04:	movge	r7, #0
   3bf08:	bge	3bf20 <flatcc_json_printer_union_vector_field@@Base+0x48>
   3bf0c:	ldr	r3, [r5, #4]
   3bf10:	ldrh	r7, [r3, r2]
   3bf14:	cmp	r7, #0
   3bf18:	ldrne	r3, [r5]
   3bf1c:	addne	r7, r3, r7
   3bf20:	add	r2, r2, #2
   3bf24:	cmp	r2, r1
   3bf28:	bge	3c148 <flatcc_json_printer_union_vector_field@@Base+0x270>
   3bf2c:	ldr	r3, [r5, #4]
   3bf30:	ldrh	sl, [r3, r2]
   3bf34:	cmp	sl, #0
   3bf38:	beq	3c148 <flatcc_json_printer_union_vector_field@@Base+0x270>
   3bf3c:	ldr	r3, [r5]
   3bf40:	cmp	r6, #100	; 0x64
   3bf44:	mov	r2, r3
   3bf48:	str	r3, [sp, #12]
   3bf4c:	ldr	r3, [r5, #12]
   3bf50:	add	fp, r2, sl
   3bf54:	str	r3, [sp, #20]
   3bf58:	bgt	3c17c <flatcc_json_printer_union_vector_field@@Base+0x2a4>
   3bf5c:	add	r3, sp, #28
   3bf60:	mov	r0, r3
   3bf64:	mov	r2, r6
   3bf68:	mov	r1, r9
   3bf6c:	bl	14544 <memcpy@plt>
   3bf70:	ldr	r2, [pc, #644]	; 3c1fc <flatcc_json_printer_union_vector_field@@Base+0x324>
   3bf74:	cmp	fp, #0
   3bf78:	cmpne	r7, #0
   3bf7c:	add	r2, pc, r2
   3bf80:	ldrb	ip, [r2, #4]
   3bf84:	mov	r3, r0
   3bf88:	add	r1, r0, r6
   3bf8c:	ldr	r0, [r2]
   3bf90:	str	r0, [r3, r6]
   3bf94:	strb	ip, [r1, #4]
   3bf98:	beq	3c158 <flatcc_json_printer_union_vector_field@@Base+0x280>
   3bf9c:	ldr	r2, [sp, #180]	; 0xb4
   3bfa0:	add	r1, r6, #5
   3bfa4:	str	r2, [sp, #4]
   3bfa8:	str	r1, [sp]
   3bfac:	sub	r2, r8, #1
   3bfb0:	mov	r1, r5
   3bfb4:	mov	r0, r4
   3bfb8:	bl	39984 <flatcc_json_printer_utype_enum_vector_field@@Base>
   3bfbc:	ldr	r3, [r5, #16]
   3bfc0:	mov	r0, r4
   3bfc4:	cmp	r3, #0
   3bfc8:	add	r3, r3, #1
   3bfcc:	str	r3, [r5, #16]
   3bfd0:	ldrne	r3, [r4, #20]
   3bfd4:	movne	r2, #44	; 0x2c
   3bfd8:	addne	r1, r3, #1
   3bfdc:	strne	r1, [r4, #20]
   3bfe0:	strbne	r2, [r3]
   3bfe4:	ldr	r3, [sp, #12]
   3bfe8:	mov	r2, r6
   3bfec:	mov	r1, r9
   3bff0:	ldr	r3, [r3, sl]
   3bff4:	ldr	r6, [r7]
   3bff8:	add	r5, fp, r3
   3bffc:	ldr	r8, [fp, r3]
   3c000:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   3c004:	ldr	r3, [r4, #32]
   3c008:	ldr	r2, [r4, #20]
   3c00c:	add	r3, r3, #1
   3c010:	add	r0, r2, #1
   3c014:	mov	r1, #91	; 0x5b
   3c018:	cmp	r8, #0
   3c01c:	str	r3, [r4, #32]
   3c020:	str	r0, [r4, #20]
   3c024:	strb	r1, [r2]
   3c028:	beq	3c120 <flatcc_json_printer_union_vector_field@@Base+0x248>
   3c02c:	add	r7, r7, r6
   3c030:	add	r5, r5, #4
   3c034:	ldrb	r3, [r7, #4]
   3c038:	cmp	r3, #0
   3c03c:	bne	3c1e0 <flatcc_json_printer_union_vector_field@@Base+0x308>
   3c040:	ldr	r3, [r4, #20]
   3c044:	mov	r2, #110	; 0x6e
   3c048:	add	r1, r3, #1
   3c04c:	str	r1, [r4, #20]
   3c050:	strb	r2, [r3]
   3c054:	ldr	r3, [r4, #20]
   3c058:	mov	r2, #117	; 0x75
   3c05c:	add	r1, r3, #1
   3c060:	str	r1, [r4, #20]
   3c064:	strb	r2, [r3]
   3c068:	ldr	r3, [r4, #20]
   3c06c:	mov	r2, #108	; 0x6c
   3c070:	add	r1, r3, #1
   3c074:	str	r1, [r4, #20]
   3c078:	strb	r2, [r3]
   3c07c:	ldr	r3, [r4, #20]
   3c080:	add	r1, r3, #1
   3c084:	str	r1, [r4, #20]
   3c088:	strb	r2, [r3]
   3c08c:	add	r8, r8, #3
   3c090:	add	r8, r7, r8
   3c094:	mov	r9, #44	; 0x2c
   3c098:	add	r7, r7, #4
   3c09c:	mov	sl, #110	; 0x6e
   3c0a0:	mov	fp, #117	; 0x75
   3c0a4:	mov	r6, #108	; 0x6c
   3c0a8:	add	r3, sp, #16
   3c0ac:	str	r3, [sp, #12]
   3c0b0:	cmp	r7, r8
   3c0b4:	beq	3c120 <flatcc_json_printer_union_vector_field@@Base+0x248>
   3c0b8:	ldrb	r2, [r7, #1]!
   3c0bc:	ldr	r3, [r4, #20]
   3c0c0:	add	r5, r5, #4
   3c0c4:	add	r1, r3, #1
   3c0c8:	cmp	r2, #0
   3c0cc:	str	r1, [r4, #20]
   3c0d0:	strb	r9, [r3]
   3c0d4:	bne	3c160 <flatcc_json_printer_union_vector_field@@Base+0x288>
   3c0d8:	ldr	r3, [r4, #20]
   3c0dc:	cmp	r7, r8
   3c0e0:	add	r2, r3, #1
   3c0e4:	str	r2, [r4, #20]
   3c0e8:	strb	sl, [r3]
   3c0ec:	ldr	r3, [r4, #20]
   3c0f0:	add	r2, r3, #1
   3c0f4:	str	r2, [r4, #20]
   3c0f8:	strb	fp, [r3]
   3c0fc:	ldr	r3, [r4, #20]
   3c100:	add	r2, r3, #1
   3c104:	str	r2, [r4, #20]
   3c108:	strb	r6, [r3]
   3c10c:	ldr	r3, [r4, #20]
   3c110:	add	r2, r3, #1
   3c114:	str	r2, [r4, #20]
   3c118:	strb	r6, [r3]
   3c11c:	bne	3c0b8 <flatcc_json_printer_union_vector_field@@Base+0x1e0>
   3c120:	ldrb	r3, [r4, #25]
   3c124:	cmp	r3, #0
   3c128:	bne	3c1b4 <flatcc_json_printer_union_vector_field@@Base+0x2dc>
   3c12c:	ldr	r3, [r4, #20]
   3c130:	mov	r2, #93	; 0x5d
   3c134:	add	r1, r3, #1
   3c138:	str	r1, [r4, #20]
   3c13c:	strb	r2, [r3]
   3c140:	add	sp, sp, #140	; 0x8c
   3c144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c148:	ldr	r3, [r5, #12]
   3c14c:	cmp	r6, #100	; 0x64
   3c150:	str	r3, [sp, #20]
   3c154:	bgt	3c17c <flatcc_json_printer_union_vector_field@@Base+0x2a4>
   3c158:	add	sp, sp, #140	; 0x8c
   3c15c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c160:	ldr	r1, [sp, #12]
   3c164:	mov	r0, r4
   3c168:	ldr	r3, [sp, #184]	; 0xb8
   3c16c:	strb	r2, [sp, #24]
   3c170:	str	r5, [sp, #16]
   3c174:	blx	r3
   3c178:	b	3c0b0 <flatcc_json_printer_union_vector_field@@Base+0x1d8>
   3c17c:	ldr	r3, [r4, #36]	; 0x24
   3c180:	ldr	r1, [pc, #120]	; 3c200 <flatcc_json_printer_union_vector_field@@Base+0x328>
   3c184:	cmp	r3, #0
   3c188:	moveq	r3, #1
   3c18c:	streq	r3, [r4, #36]	; 0x24
   3c190:	ldr	r3, [pc, #108]	; 3c204 <flatcc_json_printer_union_vector_field@@Base+0x32c>
   3c194:	ldr	r0, [pc, #108]	; 3c208 <flatcc_json_printer_union_vector_field@@Base+0x330>
   3c198:	add	r3, pc, r3
   3c19c:	add	r3, r3, #1776	; 0x6f0
   3c1a0:	ldr	r2, [pc, #100]	; 3c20c <flatcc_json_printer_union_vector_field@@Base+0x334>
   3c1a4:	add	r3, r3, #8
   3c1a8:	add	r1, pc, r1
   3c1ac:	add	r0, pc, r0
   3c1b0:	bl	14610 <__assert_fail@plt>
   3c1b4:	ldr	r3, [r4, #20]
   3c1b8:	mov	r2, #10
   3c1bc:	add	r1, r3, #1
   3c1c0:	str	r1, [r4, #20]
   3c1c4:	strb	r2, [r3]
   3c1c8:	ldr	r3, [r4, #32]
   3c1cc:	mov	r0, r4
   3c1d0:	sub	r3, r3, #1
   3c1d4:	str	r3, [r4, #32]
   3c1d8:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   3c1dc:	b	3c12c <flatcc_json_printer_union_vector_field@@Base+0x254>
   3c1e0:	add	r1, sp, #136	; 0x88
   3c1e4:	strb	r3, [sp, #24]
   3c1e8:	mov	r0, r4
   3c1ec:	str	r5, [r1, #-120]!	; 0xffffff88
   3c1f0:	ldr	r3, [sp, #184]	; 0xb8
   3c1f4:	blx	r3
   3c1f8:	b	3c08c <flatcc_json_printer_union_vector_field@@Base+0x1b4>
   3c1fc:			; <UNDEFINED> instruction: 0x000083b4
   3c200:	andeq	r7, r0, ip, ror #30
   3c204:	andeq	r7, r0, r0, lsr #16
   3c208:	andeq	r8, r0, r8, ror #2
   3c20c:	andeq	r0, r0, fp, asr #6

0003c210 <flatcc_json_printer_table_field@@Base>:
   3c210:	add	r2, r2, #2
   3c214:	ldr	ip, [r1, #8]
   3c218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c21c:	lsl	r2, r2, #1
   3c220:	sub	sp, sp, #28
   3c224:	cmp	r2, ip
   3c228:	ldr	r9, [sp, #64]	; 0x40
   3c22c:	bge	3c350 <flatcc_json_printer_table_field@@Base+0x140>
   3c230:	ldr	ip, [r1, #4]
   3c234:	ldrh	r6, [ip, r2]
   3c238:	cmp	r6, #0
   3c23c:	beq	3c350 <flatcc_json_printer_table_field@@Base+0x140>
   3c240:	ldr	r8, [r1]
   3c244:	adds	r7, r8, r6
   3c248:	beq	3c350 <flatcc_json_printer_table_field@@Base+0x140>
   3c24c:	ldr	r2, [r1, #16]
   3c250:	mov	r5, r1
   3c254:	cmp	r2, #0
   3c258:	add	r2, r2, #1
   3c25c:	str	r2, [r1, #16]
   3c260:	ldrne	r2, [r0, #20]
   3c264:	movne	ip, #44	; 0x2c
   3c268:	addne	lr, r2, #1
   3c26c:	strne	lr, [r0, #20]
   3c270:	strbne	ip, [r2]
   3c274:	ldrb	r1, [r0, #25]
   3c278:	mov	sl, r3
   3c27c:	mov	r4, r0
   3c280:	cmp	r1, #0
   3c284:	bne	3c444 <flatcc_json_printer_table_field@@Base+0x234>
   3c288:	ldr	r2, [r0, #20]
   3c28c:	ldr	r3, [r0, #16]
   3c290:	cmp	r2, r3
   3c294:	bcc	3c2a4 <flatcc_json_printer_table_field@@Base+0x94>
   3c298:	ldr	r3, [r0, #44]	; 0x2c
   3c29c:	blx	r3
   3c2a0:	ldr	r2, [r4, #20]
   3c2a4:	mov	r3, #34	; 0x22
   3c2a8:	strb	r3, [r2]
   3c2ac:	ldrb	r3, [r4, #26]
   3c2b0:	ldr	r0, [r4, #20]
   3c2b4:	ldr	r2, [r4, #16]
   3c2b8:	cmp	r3, #0
   3c2bc:	addeq	r0, r0, #1
   3c2c0:	add	r3, r0, r9
   3c2c4:	cmp	r2, r3
   3c2c8:	str	r0, [r4, #20]
   3c2cc:	bhi	3c358 <flatcc_json_printer_table_field@@Base+0x148>
   3c2d0:	mov	r2, r9
   3c2d4:	mov	r1, sl
   3c2d8:	mov	r0, r4
   3c2dc:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   3c2e0:	ldr	r9, [r4, #20]
   3c2e4:	mov	r3, #34	; 0x22
   3c2e8:	strb	r3, [r9]
   3c2ec:	ldr	r1, [r4, #20]
   3c2f0:	ldrb	r3, [r4, #26]
   3c2f4:	clz	r3, r3
   3c2f8:	lsr	r3, r3, #5
   3c2fc:	add	r2, r1, r3
   3c300:	add	r2, r2, #1
   3c304:	mov	r0, #58	; 0x3a
   3c308:	str	r2, [r4, #20]
   3c30c:	strb	r0, [r1, r3]
   3c310:	ldr	r3, [r4, #20]
   3c314:	mov	r9, #32
   3c318:	strb	r9, [r3]
   3c31c:	ldrb	r2, [r4, #25]
   3c320:	ldr	r3, [r5, #12]
   3c324:	ldr	r0, [r4, #20]
   3c328:	adds	r2, r2, #0
   3c32c:	movne	r2, #1
   3c330:	add	r1, r0, r2
   3c334:	subs	r3, r3, #1
   3c338:	str	r1, [r4, #20]
   3c33c:	bne	3c374 <flatcc_json_printer_table_field@@Base+0x164>
   3c340:	ldr	r3, [r4, #36]	; 0x24
   3c344:	cmp	r3, #0
   3c348:	moveq	r3, #2
   3c34c:	streq	r3, [r4, #36]	; 0x24
   3c350:	add	sp, sp, #28
   3c354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c358:	mov	r2, r9
   3c35c:	mov	r1, sl
   3c360:	bl	14544 <memcpy@plt>
   3c364:	ldr	r3, [r4, #20]
   3c368:	add	r9, r3, r9
   3c36c:	str	r9, [r4, #20]
   3c370:	b	3c2e4 <flatcc_json_printer_table_field@@Base+0xd4>
   3c374:	ldr	lr, [r8, r6]
   3c378:	ldr	ip, [r4, #32]
   3c37c:	add	r1, r1, #1
   3c380:	str	r1, [r4, #20]
   3c384:	add	ip, ip, #1
   3c388:	mov	r1, #0
   3c38c:	mov	r5, #123	; 0x7b
   3c390:	str	ip, [r4, #32]
   3c394:	strb	r5, [r0, r2]
   3c398:	str	r1, [sp, #20]
   3c39c:	str	r3, [sp, #16]
   3c3a0:	ldr	r3, [r7, lr]
   3c3a4:	add	r7, r7, lr
   3c3a8:	sub	r3, r7, r3
   3c3ac:	add	r1, sp, #4
   3c3b0:	ldrh	r2, [r3]
   3c3b4:	mov	r0, r4
   3c3b8:	str	r3, [sp, #8]
   3c3bc:	ldr	r3, [sp, #68]	; 0x44
   3c3c0:	str	r2, [sp, #12]
   3c3c4:	str	r7, [sp, #4]
   3c3c8:	blx	r3
   3c3cc:	ldrb	r3, [r4, #25]
   3c3d0:	cmp	r3, #0
   3c3d4:	ldr	r3, [r4, #20]
   3c3d8:	bne	3c3f4 <flatcc_json_printer_table_field@@Base+0x1e4>
   3c3dc:	add	r1, r3, #1
   3c3e0:	mov	r2, #125	; 0x7d
   3c3e4:	str	r1, [r4, #20]
   3c3e8:	strb	r2, [r3]
   3c3ec:	add	sp, sp, #28
   3c3f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c3f4:	add	r1, r3, #1
   3c3f8:	mov	r2, #10
   3c3fc:	str	r1, [r4, #20]
   3c400:	strb	r2, [r3]
   3c404:	ldr	r2, [r4, #32]
   3c408:	ldrb	r3, [r4, #25]
   3c40c:	sub	r2, r2, #1
   3c410:	ldr	r0, [r4, #20]
   3c414:	ldr	r1, [r4, #16]
   3c418:	mul	r5, r2, r3
   3c41c:	str	r2, [r4, #32]
   3c420:	add	r3, r0, r5
   3c424:	cmp	r1, r3
   3c428:	bcc	3c4a8 <flatcc_json_printer_table_field@@Base+0x298>
   3c42c:	mov	r1, r9
   3c430:	mov	r2, r5
   3c434:	bl	145bc <memset@plt>
   3c438:	ldr	r3, [r4, #20]
   3c43c:	add	r3, r3, r5
   3c440:	b	3c3dc <flatcc_json_printer_table_field@@Base+0x1cc>
   3c444:	ldr	r3, [r0, #20]
   3c448:	mov	r2, #10
   3c44c:	add	r1, r3, #1
   3c450:	str	r1, [r0, #20]
   3c454:	strb	r2, [r3]
   3c458:	ldrb	r3, [r0, #25]
   3c45c:	ldr	r2, [r0, #32]
   3c460:	ldr	r0, [r0, #20]
   3c464:	ldr	r1, [r4, #16]
   3c468:	mul	fp, r2, r3
   3c46c:	add	r3, r0, fp
   3c470:	cmp	r1, r3
   3c474:	bcc	3c494 <flatcc_json_printer_table_field@@Base+0x284>
   3c478:	mov	r2, fp
   3c47c:	mov	r1, #32
   3c480:	bl	145bc <memset@plt>
   3c484:	ldr	r2, [r4, #20]
   3c488:	add	r2, r2, fp
   3c48c:	str	r2, [r4, #20]
   3c490:	b	3c2a4 <flatcc_json_printer_table_field@@Base+0x94>
   3c494:	mov	r1, fp
   3c498:	mov	r0, r4
   3c49c:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3c4a0:	ldr	r2, [r4, #20]
   3c4a4:	b	3c2a4 <flatcc_json_printer_table_field@@Base+0x94>
   3c4a8:	mov	r1, r5
   3c4ac:	mov	r0, r4
   3c4b0:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3c4b4:	ldr	r3, [r4, #20]
   3c4b8:	b	3c3dc <flatcc_json_printer_table_field@@Base+0x1cc>

0003c4bc <flatcc_json_printer_union_field@@Base>:
   3c4bc:	add	r2, r2, #1
   3c4c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   3c4c4:	lsl	r2, r2, #1
   3c4c8:	ldr	lr, [r1, #8]
   3c4cc:	sub	sp, sp, #20
   3c4d0:	cmp	r2, lr
   3c4d4:	movge	ip, #0
   3c4d8:	bge	3c4f0 <flatcc_json_printer_union_field@@Base+0x34>
   3c4dc:	ldr	ip, [r1, #4]
   3c4e0:	ldrh	ip, [ip, r2]
   3c4e4:	cmp	ip, #0
   3c4e8:	ldrne	r4, [r1]
   3c4ec:	addne	ip, r4, ip
   3c4f0:	add	r2, r2, #2
   3c4f4:	cmp	r2, lr
   3c4f8:	bge	3c668 <flatcc_json_printer_union_field@@Base+0x1ac>
   3c4fc:	ldr	lr, [r1, #4]
   3c500:	ldrh	r2, [lr, r2]
   3c504:	cmp	r2, #0
   3c508:	beq	3c668 <flatcc_json_printer_union_field@@Base+0x1ac>
   3c50c:	ldr	r7, [r1]
   3c510:	adds	r7, r7, r2
   3c514:	moveq	r2, #1
   3c518:	movne	r2, #0
   3c51c:	cmp	ip, #0
   3c520:	orreq	r2, r2, #1
   3c524:	cmp	r2, #0
   3c528:	bne	3c668 <flatcc_json_printer_union_field@@Base+0x1ac>
   3c52c:	ldr	r2, [r1, #16]
   3c530:	ldrb	r8, [ip]
   3c534:	cmp	r2, #0
   3c538:	add	r2, r2, #1
   3c53c:	str	r2, [r1, #16]
   3c540:	ldrne	r2, [r0, #20]
   3c544:	movne	ip, #44	; 0x2c
   3c548:	addne	lr, r2, #1
   3c54c:	strne	lr, [r0, #20]
   3c550:	mov	r5, r1
   3c554:	strbne	ip, [r2]
   3c558:	ldrb	r1, [r0, #25]
   3c55c:	mov	r6, r3
   3c560:	mov	r4, r0
   3c564:	cmp	r1, #0
   3c568:	ldr	r3, [r0, #20]
   3c56c:	bne	3c714 <flatcc_json_printer_union_field@@Base+0x258>
   3c570:	ldr	r2, [r0, #16]
   3c574:	cmp	r3, r2
   3c578:	bcs	3c760 <flatcc_json_printer_union_field@@Base+0x2a4>
   3c57c:	mov	r2, #34	; 0x22
   3c580:	strb	r2, [r3]
   3c584:	ldrb	r3, [r4, #26]
   3c588:	ldr	r0, [r4, #20]
   3c58c:	ldr	r2, [r4, #16]
   3c590:	cmp	r3, #0
   3c594:	addeq	r0, r0, #1
   3c598:	ldr	r3, [sp, #48]	; 0x30
   3c59c:	str	r0, [r4, #20]
   3c5a0:	add	r3, r0, r3
   3c5a4:	cmp	r2, r3
   3c5a8:	mov	r1, r6
   3c5ac:	ldr	r2, [sp, #48]	; 0x30
   3c5b0:	bhi	3c670 <flatcc_json_printer_union_field@@Base+0x1b4>
   3c5b4:	mov	r0, r4
   3c5b8:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   3c5bc:	ldr	r3, [r4, #20]
   3c5c0:	ldr	r1, [r4, #16]
   3c5c4:	add	r2, r3, #5
   3c5c8:	cmp	r1, r2
   3c5cc:	bls	3c694 <flatcc_json_printer_union_field@@Base+0x1d8>
   3c5d0:	ldr	r2, [pc, #428]	; 3c784 <flatcc_json_printer_union_field@@Base+0x2c8>
   3c5d4:	add	r2, pc, r2
   3c5d8:	ldrb	r1, [r2, #4]
   3c5dc:	ldr	r0, [r2]
   3c5e0:	strb	r1, [r3, #4]
   3c5e4:	str	r0, [r3]
   3c5e8:	ldr	r3, [r4, #20]
   3c5ec:	add	r3, r3, #5
   3c5f0:	str	r3, [r4, #20]
   3c5f4:	mov	r2, #34	; 0x22
   3c5f8:	strb	r2, [r3]
   3c5fc:	ldr	r1, [r4, #20]
   3c600:	ldrb	r2, [r4, #26]
   3c604:	clz	r2, r2
   3c608:	lsr	r2, r2, #5
   3c60c:	add	r3, r1, r2
   3c610:	add	r3, r3, #1
   3c614:	mov	r0, #58	; 0x3a
   3c618:	str	r3, [r4, #20]
   3c61c:	strb	r0, [r1, r2]
   3c620:	ldr	r3, [r4, #20]
   3c624:	mov	r2, #32
   3c628:	strb	r2, [r3]
   3c62c:	ldrb	r2, [r4, #25]
   3c630:	ldrb	r3, [r4, #27]
   3c634:	ldr	r1, [r4, #20]
   3c638:	cmp	r2, #0
   3c63c:	addne	r1, r1, #1
   3c640:	cmp	r3, #0
   3c644:	str	r1, [r4, #20]
   3c648:	beq	3c6b0 <flatcc_json_printer_union_field@@Base+0x1f4>
   3c64c:	mov	r0, r8
   3c650:	bl	31344 <flatcc_json_parser_table_as_root@@Base+0x1158>
   3c654:	ldr	r3, [r4, #20]
   3c658:	cmp	r8, #0
   3c65c:	add	r0, r3, r0
   3c660:	str	r0, [r4, #20]
   3c664:	bne	3c6c8 <flatcc_json_printer_union_field@@Base+0x20c>
   3c668:	add	sp, sp, #20
   3c66c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3c670:	bl	14544 <memcpy@plt>
   3c674:	ldr	r3, [r4, #20]
   3c678:	ldr	r2, [sp, #48]	; 0x30
   3c67c:	ldr	r1, [r4, #16]
   3c680:	add	r3, r3, r2
   3c684:	add	r2, r3, #5
   3c688:	cmp	r1, r2
   3c68c:	str	r3, [r4, #20]
   3c690:	bhi	3c5d0 <flatcc_json_printer_union_field@@Base+0x114>
   3c694:	ldr	r1, [pc, #236]	; 3c788 <flatcc_json_printer_union_field@@Base+0x2cc>
   3c698:	mov	r2, #5
   3c69c:	add	r1, pc, r1
   3c6a0:	mov	r0, r4
   3c6a4:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   3c6a8:	ldr	r3, [r4, #20]
   3c6ac:	b	3c5f4 <flatcc_json_printer_union_field@@Base+0x138>
   3c6b0:	mov	r1, r8
   3c6b4:	mov	r0, r4
   3c6b8:	ldr	r3, [sp, #52]	; 0x34
   3c6bc:	blx	r3
   3c6c0:	cmp	r8, #0
   3c6c4:	beq	3c668 <flatcc_json_printer_union_field@@Base+0x1ac>
   3c6c8:	ldr	r3, [r4, #20]
   3c6cc:	mov	r2, #44	; 0x2c
   3c6d0:	add	r0, r3, #1
   3c6d4:	str	r0, [r4, #20]
   3c6d8:	mov	r1, r6
   3c6dc:	strb	r2, [r3]
   3c6e0:	mov	r0, r4
   3c6e4:	ldr	r2, [sp, #48]	; 0x30
   3c6e8:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   3c6ec:	ldr	r3, [r5, #12]
   3c6f0:	add	r1, sp, #16
   3c6f4:	str	r3, [sp, #8]
   3c6f8:	mov	r0, r4
   3c6fc:	str	r7, [r1, #-12]!
   3c700:	ldr	r3, [sp, #56]	; 0x38
   3c704:	strb	r8, [sp, #12]
   3c708:	blx	r3
   3c70c:	add	sp, sp, #20
   3c710:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3c714:	mov	r2, #10
   3c718:	add	r1, r3, #1
   3c71c:	str	r1, [r0, #20]
   3c720:	strb	r2, [r3]
   3c724:	ldrb	r3, [r0, #25]
   3c728:	ldr	r9, [r0, #32]
   3c72c:	ldr	r0, [r0, #20]
   3c730:	ldr	r2, [r4, #16]
   3c734:	mul	r9, r9, r3
   3c738:	add	r3, r0, r9
   3c73c:	cmp	r2, r3
   3c740:	bcc	3c770 <flatcc_json_printer_union_field@@Base+0x2b4>
   3c744:	mov	r2, r9
   3c748:	mov	r1, #32
   3c74c:	bl	145bc <memset@plt>
   3c750:	ldr	r3, [r4, #20]
   3c754:	add	r3, r3, r9
   3c758:	str	r3, [r4, #20]
   3c75c:	b	3c57c <flatcc_json_printer_union_field@@Base+0xc0>
   3c760:	ldr	r3, [r0, #44]	; 0x2c
   3c764:	blx	r3
   3c768:	ldr	r3, [r4, #20]
   3c76c:	b	3c57c <flatcc_json_printer_union_field@@Base+0xc0>
   3c770:	mov	r1, r9
   3c774:	mov	r0, r4
   3c778:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3c77c:	ldr	r3, [r4, #20]
   3c780:	b	3c57c <flatcc_json_printer_union_field@@Base+0xc0>
   3c784:	andeq	r7, r0, ip, asr sp
   3c788:	muleq	r0, r4, ip

0003c78c <flatcc_json_printer_union_table@@Base>:
   3c78c:	ldr	r3, [r1, #4]
   3c790:	push	{r4, r5, r6, r7, lr}
   3c794:	subs	r3, r3, #1
   3c798:	sub	sp, sp, #28
   3c79c:	mov	r4, r0
   3c7a0:	bne	3c7bc <flatcc_json_printer_union_table@@Base+0x30>
   3c7a4:	ldr	r3, [r0, #36]	; 0x24
   3c7a8:	cmp	r3, #0
   3c7ac:	moveq	r3, #2
   3c7b0:	streq	r3, [r0, #36]	; 0x24
   3c7b4:	add	sp, sp, #28
   3c7b8:	pop	{r4, r5, r6, r7, pc}
   3c7bc:	ldr	r1, [r1]
   3c7c0:	ldr	ip, [r0, #32]
   3c7c4:	ldr	r5, [r0, #20]
   3c7c8:	ldr	lr, [r1]
   3c7cc:	add	ip, ip, #1
   3c7d0:	str	ip, [r0, #32]
   3c7d4:	add	r7, r5, #1
   3c7d8:	mov	ip, #0
   3c7dc:	mov	r6, #123	; 0x7b
   3c7e0:	str	r7, [r0, #20]
   3c7e4:	strb	r6, [r5]
   3c7e8:	str	r3, [sp, #16]
   3c7ec:	str	ip, [sp, #20]
   3c7f0:	ldr	ip, [r1, lr]
   3c7f4:	add	r3, r1, lr
   3c7f8:	sub	ip, r3, ip
   3c7fc:	add	r1, sp, #4
   3c800:	ldrh	lr, [ip]
   3c804:	stmib	sp, {r3, ip, lr}
   3c808:	blx	r2
   3c80c:	ldrb	r3, [r4, #25]
   3c810:	cmp	r3, #0
   3c814:	ldr	r3, [r4, #20]
   3c818:	bne	3c834 <flatcc_json_printer_union_table@@Base+0xa8>
   3c81c:	add	r1, r3, #1
   3c820:	mov	r2, #125	; 0x7d
   3c824:	str	r1, [r4, #20]
   3c828:	strb	r2, [r3]
   3c82c:	add	sp, sp, #28
   3c830:	pop	{r4, r5, r6, r7, pc}
   3c834:	add	r1, r3, #1
   3c838:	mov	r2, #10
   3c83c:	str	r1, [r4, #20]
   3c840:	strb	r2, [r3]
   3c844:	ldr	r2, [r4, #32]
   3c848:	ldrb	r3, [r4, #25]
   3c84c:	sub	r2, r2, #1
   3c850:	ldr	r0, [r4, #20]
   3c854:	ldr	r1, [r4, #16]
   3c858:	mul	r5, r2, r3
   3c85c:	str	r2, [r4, #32]
   3c860:	add	r3, r0, r5
   3c864:	cmp	r1, r3
   3c868:	bcc	3c884 <flatcc_json_printer_union_table@@Base+0xf8>
   3c86c:	mov	r2, r5
   3c870:	mov	r1, #32
   3c874:	bl	145bc <memset@plt>
   3c878:	ldr	r3, [r4, #20]
   3c87c:	add	r3, r3, r5
   3c880:	b	3c81c <flatcc_json_printer_union_table@@Base+0x90>
   3c884:	mov	r1, r5
   3c888:	mov	r0, r4
   3c88c:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3c890:	ldr	r3, [r4, #20]
   3c894:	b	3c81c <flatcc_json_printer_union_table@@Base+0x90>

0003c898 <flatcc_json_printer_union_struct@@Base>:
   3c898:	ldr	r3, [r0, #32]
   3c89c:	ldr	ip, [r0, #20]
   3c8a0:	push	{r4, r5, r6, lr}
   3c8a4:	add	r3, r3, #1
   3c8a8:	mov	lr, #123	; 0x7b
   3c8ac:	add	r5, ip, #1
   3c8b0:	str	r3, [r0, #32]
   3c8b4:	str	r5, [r0, #20]
   3c8b8:	strb	lr, [ip]
   3c8bc:	ldr	r3, [r1]
   3c8c0:	mov	r4, r0
   3c8c4:	ldr	r1, [r3]
   3c8c8:	add	r1, r3, r1
   3c8cc:	blx	r2
   3c8d0:	ldrb	r3, [r4, #25]
   3c8d4:	cmp	r3, #0
   3c8d8:	bne	3c8f4 <flatcc_json_printer_union_struct@@Base+0x5c>
   3c8dc:	ldr	r1, [r4, #20]
   3c8e0:	add	r2, r1, #1
   3c8e4:	mov	r3, #125	; 0x7d
   3c8e8:	str	r2, [r4, #20]
   3c8ec:	strb	r3, [r1]
   3c8f0:	pop	{r4, r5, r6, pc}
   3c8f4:	ldr	r3, [r4, #20]
   3c8f8:	mov	r2, #10
   3c8fc:	add	r1, r3, #1
   3c900:	str	r1, [r4, #20]
   3c904:	strb	r2, [r3]
   3c908:	ldr	r3, [r4, #32]
   3c90c:	ldrb	r1, [r4, #25]
   3c910:	sub	r3, r3, #1
   3c914:	ldr	r0, [r4, #20]
   3c918:	ldr	r2, [r4, #16]
   3c91c:	mul	r5, r3, r1
   3c920:	str	r3, [r4, #32]
   3c924:	add	r3, r0, r5
   3c928:	cmp	r2, r3
   3c92c:	bcc	3c948 <flatcc_json_printer_union_struct@@Base+0xb0>
   3c930:	mov	r1, #32
   3c934:	mov	r2, r5
   3c938:	bl	145bc <memset@plt>
   3c93c:	ldr	r1, [r4, #20]
   3c940:	add	r1, r1, r5
   3c944:	b	3c8e0 <flatcc_json_printer_union_struct@@Base+0x48>
   3c948:	mov	r1, r5
   3c94c:	mov	r0, r4
   3c950:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3c954:	b	3c8dc <flatcc_json_printer_union_struct@@Base+0x44>

0003c958 <flatcc_json_printer_union_string@@Base>:
   3c958:	ldr	r3, [r1]
   3c95c:	ldr	r2, [r3]
   3c960:	add	r1, r3, r2
   3c964:	add	r1, r1, #4
   3c968:	ldr	r2, [r3, r2]
   3c96c:	b	322fc <flatcc_json_parser_table_as_root@@Base+0x2110>

0003c970 <flatcc_json_printer_embedded_struct_field@@Base>:
   3c970:	cmp	r1, #0
   3c974:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3c978:	mov	r8, r3
   3c97c:	ldrne	r3, [r0, #20]
   3c980:	mov	r7, r2
   3c984:	addne	r1, r3, #1
   3c988:	movne	r2, #44	; 0x2c
   3c98c:	strne	r1, [r0, #20]
   3c990:	strbne	r2, [r3]
   3c994:	ldrb	r1, [r0, #25]
   3c998:	mov	r4, r0
   3c99c:	ldr	r6, [sp, #36]	; 0x24
   3c9a0:	cmp	r1, #0
   3c9a4:	ldr	r5, [sp, #40]	; 0x28
   3c9a8:	bne	3cb0c <flatcc_json_printer_embedded_struct_field@@Base+0x19c>
   3c9ac:	ldr	r2, [r0, #20]
   3c9b0:	ldr	r3, [r0, #16]
   3c9b4:	cmp	r2, r3
   3c9b8:	bcs	3ca94 <flatcc_json_printer_embedded_struct_field@@Base+0x124>
   3c9bc:	mov	r3, #34	; 0x22
   3c9c0:	strb	r3, [r2]
   3c9c4:	ldrb	r3, [r4, #26]
   3c9c8:	ldr	r0, [r4, #20]
   3c9cc:	ldr	r2, [r4, #16]
   3c9d0:	cmp	r3, #0
   3c9d4:	addeq	r0, r0, #1
   3c9d8:	add	r3, r0, r6
   3c9dc:	cmp	r2, r3
   3c9e0:	str	r0, [r4, #20]
   3c9e4:	mov	r2, r6
   3c9e8:	ldr	r1, [sp, #32]
   3c9ec:	bhi	3caa4 <flatcc_json_printer_embedded_struct_field@@Base+0x134>
   3c9f0:	mov	r0, r4
   3c9f4:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   3c9f8:	ldr	r6, [r4, #20]
   3c9fc:	mov	r3, #34	; 0x22
   3ca00:	strb	r3, [r6]
   3ca04:	ldr	r1, [r4, #20]
   3ca08:	ldrb	r2, [r4, #26]
   3ca0c:	clz	r2, r2
   3ca10:	lsr	r2, r2, #5
   3ca14:	add	r3, r1, r2
   3ca18:	add	r3, r3, #1
   3ca1c:	mov	r0, #58	; 0x3a
   3ca20:	str	r3, [r4, #20]
   3ca24:	strb	r0, [r1, r2]
   3ca28:	ldr	r3, [r4, #20]
   3ca2c:	mov	r6, #32
   3ca30:	add	r1, r7, r8
   3ca34:	strb	r6, [r3]
   3ca38:	ldrb	r3, [r4, #25]
   3ca3c:	ldr	ip, [r4, #20]
   3ca40:	ldr	r2, [r4, #32]
   3ca44:	adds	r3, r3, #0
   3ca48:	movne	r3, #1
   3ca4c:	add	r0, ip, r3
   3ca50:	add	r0, r0, #1
   3ca54:	str	r0, [r4, #20]
   3ca58:	add	r2, r2, #1
   3ca5c:	mov	r0, #123	; 0x7b
   3ca60:	str	r2, [r4, #32]
   3ca64:	strb	r0, [ip, r3]
   3ca68:	mov	r0, r4
   3ca6c:	blx	r5
   3ca70:	ldrb	r3, [r4, #25]
   3ca74:	cmp	r3, #0
   3ca78:	bne	3cab8 <flatcc_json_printer_embedded_struct_field@@Base+0x148>
   3ca7c:	ldr	r1, [r4, #20]
   3ca80:	add	r2, r1, #1
   3ca84:	mov	r3, #125	; 0x7d
   3ca88:	str	r2, [r4, #20]
   3ca8c:	strb	r3, [r1]
   3ca90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ca94:	ldr	r3, [r0, #44]	; 0x2c
   3ca98:	blx	r3
   3ca9c:	ldr	r2, [r4, #20]
   3caa0:	b	3c9bc <flatcc_json_printer_embedded_struct_field@@Base+0x4c>
   3caa4:	bl	14544 <memcpy@plt>
   3caa8:	ldr	r3, [r4, #20]
   3caac:	add	r6, r3, r6
   3cab0:	str	r6, [r4, #20]
   3cab4:	b	3c9fc <flatcc_json_printer_embedded_struct_field@@Base+0x8c>
   3cab8:	ldr	r3, [r4, #20]
   3cabc:	mov	r2, #10
   3cac0:	add	r1, r3, #1
   3cac4:	str	r1, [r4, #20]
   3cac8:	strb	r2, [r3]
   3cacc:	ldr	r3, [r4, #32]
   3cad0:	ldrb	r1, [r4, #25]
   3cad4:	sub	r3, r3, #1
   3cad8:	ldr	r0, [r4, #20]
   3cadc:	ldr	r2, [r4, #16]
   3cae0:	mul	r5, r3, r1
   3cae4:	str	r3, [r4, #32]
   3cae8:	add	r3, r0, r5
   3caec:	cmp	r2, r3
   3caf0:	bcc	3cb70 <flatcc_json_printer_embedded_struct_field@@Base+0x200>
   3caf4:	mov	r1, r6
   3caf8:	mov	r2, r5
   3cafc:	bl	145bc <memset@plt>
   3cb00:	ldr	r1, [r4, #20]
   3cb04:	add	r1, r1, r5
   3cb08:	b	3ca80 <flatcc_json_printer_embedded_struct_field@@Base+0x110>
   3cb0c:	ldr	r3, [r0, #20]
   3cb10:	mov	r2, #10
   3cb14:	add	r1, r3, #1
   3cb18:	str	r1, [r0, #20]
   3cb1c:	strb	r2, [r3]
   3cb20:	ldrb	r3, [r0, #25]
   3cb24:	ldr	r2, [r0, #32]
   3cb28:	ldr	r0, [r0, #20]
   3cb2c:	ldr	r1, [r4, #16]
   3cb30:	mul	r9, r2, r3
   3cb34:	add	r3, r0, r9
   3cb38:	cmp	r1, r3
   3cb3c:	bcc	3cb5c <flatcc_json_printer_embedded_struct_field@@Base+0x1ec>
   3cb40:	mov	r2, r9
   3cb44:	mov	r1, #32
   3cb48:	bl	145bc <memset@plt>
   3cb4c:	ldr	r2, [r4, #20]
   3cb50:	add	r2, r2, r9
   3cb54:	str	r2, [r4, #20]
   3cb58:	b	3c9bc <flatcc_json_printer_embedded_struct_field@@Base+0x4c>
   3cb5c:	mov	r1, r9
   3cb60:	mov	r0, r4
   3cb64:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3cb68:	ldr	r2, [r4, #20]
   3cb6c:	b	3c9bc <flatcc_json_printer_embedded_struct_field@@Base+0x4c>
   3cb70:	mov	r1, r5
   3cb74:	mov	r0, r4
   3cb78:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3cb7c:	b	3ca7c <flatcc_json_printer_embedded_struct_field@@Base+0x10c>

0003cb80 <flatcc_json_printer_struct_field@@Base>:
   3cb80:	add	r2, r2, #2
   3cb84:	ldr	ip, [r1, #8]
   3cb88:	lsl	r2, r2, #1
   3cb8c:	cmp	r2, ip
   3cb90:	push	{r4, r5, r6, r7, r8, lr}
   3cb94:	ldr	r6, [sp, #24]
   3cb98:	popge	{r4, r5, r6, r7, r8, pc}
   3cb9c:	ldr	ip, [r1, #4]
   3cba0:	ldrh	r2, [ip, r2]
   3cba4:	cmp	r2, #0
   3cba8:	popeq	{r4, r5, r6, r7, r8, pc}
   3cbac:	ldr	r5, [r1]
   3cbb0:	adds	r5, r5, r2
   3cbb4:	popeq	{r4, r5, r6, r7, r8, pc}
   3cbb8:	ldr	r2, [r1, #16]
   3cbbc:	mov	r7, r3
   3cbc0:	cmp	r2, #0
   3cbc4:	add	r2, r2, #1
   3cbc8:	str	r2, [r1, #16]
   3cbcc:	ldrne	r2, [r0, #20]
   3cbd0:	movne	r1, #44	; 0x2c
   3cbd4:	addne	ip, r2, #1
   3cbd8:	strne	ip, [r0, #20]
   3cbdc:	strbne	r1, [r2]
   3cbe0:	ldrb	r1, [r0, #25]
   3cbe4:	mov	r4, r0
   3cbe8:	cmp	r1, #0
   3cbec:	bne	3cd68 <flatcc_json_printer_struct_field@@Base+0x1e8>
   3cbf0:	ldr	r2, [r0, #20]
   3cbf4:	ldr	r3, [r0, #16]
   3cbf8:	cmp	r2, r3
   3cbfc:	bcc	3cc0c <flatcc_json_printer_struct_field@@Base+0x8c>
   3cc00:	ldr	r3, [r0, #44]	; 0x2c
   3cc04:	blx	r3
   3cc08:	ldr	r2, [r4, #20]
   3cc0c:	mov	r3, #34	; 0x22
   3cc10:	strb	r3, [r2]
   3cc14:	ldrb	r3, [r4, #26]
   3cc18:	ldr	r0, [r4, #20]
   3cc1c:	ldr	r2, [r4, #16]
   3cc20:	cmp	r3, #0
   3cc24:	addeq	r0, r0, #1
   3cc28:	add	r3, r0, r6
   3cc2c:	cmp	r2, r3
   3cc30:	str	r0, [r4, #20]
   3cc34:	bhi	3cce8 <flatcc_json_printer_struct_field@@Base+0x168>
   3cc38:	mov	r2, r6
   3cc3c:	mov	r1, r7
   3cc40:	mov	r0, r4
   3cc44:	bl	31058 <flatcc_json_parser_table_as_root@@Base+0xe6c>
   3cc48:	ldr	r6, [r4, #20]
   3cc4c:	mov	r3, #34	; 0x22
   3cc50:	strb	r3, [r6]
   3cc54:	ldr	r1, [r4, #20]
   3cc58:	ldrb	r3, [r4, #26]
   3cc5c:	clz	r3, r3
   3cc60:	lsr	r3, r3, #5
   3cc64:	add	r2, r1, r3
   3cc68:	add	r2, r2, #1
   3cc6c:	mov	r0, #58	; 0x3a
   3cc70:	str	r2, [r4, #20]
   3cc74:	strb	r0, [r1, r3]
   3cc78:	ldr	r3, [r4, #20]
   3cc7c:	mov	r6, #32
   3cc80:	mov	lr, #123	; 0x7b
   3cc84:	strb	r6, [r3]
   3cc88:	ldrb	r3, [r4, #25]
   3cc8c:	ldr	ip, [r4, #20]
   3cc90:	ldr	r2, [r4, #32]
   3cc94:	adds	r3, r3, #0
   3cc98:	movne	r3, #1
   3cc9c:	add	r0, ip, r3
   3cca0:	add	r0, r0, #1
   3cca4:	add	r2, r2, #1
   3cca8:	str	r0, [r4, #20]
   3ccac:	str	r2, [r4, #32]
   3ccb0:	mov	r1, r5
   3ccb4:	strb	lr, [ip, r3]
   3ccb8:	mov	r0, r4
   3ccbc:	ldr	r3, [sp, #28]
   3ccc0:	blx	r3
   3ccc4:	ldrb	r3, [r4, #25]
   3ccc8:	cmp	r3, #0
   3cccc:	bne	3cd04 <flatcc_json_printer_struct_field@@Base+0x184>
   3ccd0:	ldr	r1, [r4, #20]
   3ccd4:	add	r2, r1, #1
   3ccd8:	mov	r3, #125	; 0x7d
   3ccdc:	str	r2, [r4, #20]
   3cce0:	strb	r3, [r1]
   3cce4:	pop	{r4, r5, r6, r7, r8, pc}
   3cce8:	mov	r2, r6
   3ccec:	mov	r1, r7
   3ccf0:	bl	14544 <memcpy@plt>
   3ccf4:	ldr	r3, [r4, #20]
   3ccf8:	add	r6, r3, r6
   3ccfc:	str	r6, [r4, #20]
   3cd00:	b	3cc4c <flatcc_json_printer_struct_field@@Base+0xcc>
   3cd04:	ldr	r3, [r4, #20]
   3cd08:	mov	r2, #10
   3cd0c:	add	r1, r3, #1
   3cd10:	str	r1, [r4, #20]
   3cd14:	strb	r2, [r3]
   3cd18:	ldr	r3, [r4, #32]
   3cd1c:	ldrb	r1, [r4, #25]
   3cd20:	sub	r3, r3, #1
   3cd24:	ldr	r0, [r4, #20]
   3cd28:	ldr	r2, [r4, #16]
   3cd2c:	mul	r5, r3, r1
   3cd30:	str	r3, [r4, #32]
   3cd34:	add	r3, r0, r5
   3cd38:	cmp	r2, r3
   3cd3c:	bcc	3cd58 <flatcc_json_printer_struct_field@@Base+0x1d8>
   3cd40:	mov	r1, r6
   3cd44:	mov	r2, r5
   3cd48:	bl	145bc <memset@plt>
   3cd4c:	ldr	r1, [r4, #20]
   3cd50:	add	r1, r1, r5
   3cd54:	b	3ccd4 <flatcc_json_printer_struct_field@@Base+0x154>
   3cd58:	mov	r1, r5
   3cd5c:	mov	r0, r4
   3cd60:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3cd64:	b	3ccd0 <flatcc_json_printer_struct_field@@Base+0x150>
   3cd68:	ldr	r3, [r0, #20]
   3cd6c:	mov	r2, #10
   3cd70:	add	r1, r3, #1
   3cd74:	str	r1, [r0, #20]
   3cd78:	strb	r2, [r3]
   3cd7c:	ldrb	r8, [r0, #25]
   3cd80:	ldr	r2, [r0, #32]
   3cd84:	ldr	r0, [r0, #20]
   3cd88:	ldr	r1, [r4, #16]
   3cd8c:	mul	r8, r2, r8
   3cd90:	add	r3, r0, r8
   3cd94:	cmp	r1, r3
   3cd98:	bcc	3cdb8 <flatcc_json_printer_struct_field@@Base+0x238>
   3cd9c:	mov	r2, r8
   3cda0:	mov	r1, #32
   3cda4:	bl	145bc <memset@plt>
   3cda8:	ldr	r2, [r4, #20]
   3cdac:	add	r2, r2, r8
   3cdb0:	str	r2, [r4, #20]
   3cdb4:	b	3cc0c <flatcc_json_printer_struct_field@@Base+0x8c>
   3cdb8:	mov	r1, r8
   3cdbc:	mov	r0, r4
   3cdc0:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3cdc4:	ldr	r2, [r4, #20]
   3cdc8:	b	3cc0c <flatcc_json_printer_struct_field@@Base+0x8c>

0003cdcc <flatcc_json_printer_struct_as_root@@Base>:
   3cdcc:	push	{r4, r5, r6, lr}
   3cdd0:	mov	r4, r0
   3cdd4:	mov	r5, r1
   3cdd8:	bl	31490 <flatcc_json_parser_table_as_root@@Base+0x12a4>
   3cddc:	cmp	r0, #0
   3cde0:	beq	3cefc <flatcc_json_printer_struct_as_root@@Base+0x130>
   3cde4:	ldr	r3, [r4, #32]
   3cde8:	ldr	r2, [r4, #20]
   3cdec:	add	r3, r3, #1
   3cdf0:	add	r0, r2, #1
   3cdf4:	mov	r1, #123	; 0x7b
   3cdf8:	str	r3, [r4, #32]
   3cdfc:	str	r0, [r4, #20]
   3ce00:	strb	r1, [r2]
   3ce04:	ldr	r1, [r5]
   3ce08:	ldr	r3, [sp, #16]
   3ce0c:	mov	r0, r4
   3ce10:	add	r1, r5, r1
   3ce14:	blx	r3
   3ce18:	ldrb	r3, [r4, #25]
   3ce1c:	cmp	r3, #0
   3ce20:	bne	3ce98 <flatcc_json_printer_struct_as_root@@Base+0xcc>
   3ce24:	ldr	r1, [r4, #20]
   3ce28:	mov	r3, #125	; 0x7d
   3ce2c:	add	r2, r1, #1
   3ce30:	str	r2, [r4, #20]
   3ce34:	strb	r3, [r1]
   3ce38:	ldrb	r3, [r4, #25]
   3ce3c:	cmp	r3, #0
   3ce40:	bne	3ce78 <flatcc_json_printer_struct_as_root@@Base+0xac>
   3ce44:	ldr	r3, [r4, #44]	; 0x2c
   3ce48:	mov	r1, #1
   3ce4c:	mov	r0, r4
   3ce50:	blx	r3
   3ce54:	ldr	r3, [r4, #36]	; 0x24
   3ce58:	cmp	r3, #0
   3ce5c:	bne	3cefc <flatcc_json_printer_struct_as_root@@Base+0x130>
   3ce60:	ldr	r0, [r4, #20]
   3ce64:	ldr	r2, [r4]
   3ce68:	ldr	r3, [r4, #12]
   3ce6c:	sub	r0, r0, r2
   3ce70:	add	r0, r0, r3
   3ce74:	pop	{r4, r5, r6, pc}
   3ce78:	ldr	r3, [r4, #32]
   3ce7c:	cmp	r3, #0
   3ce80:	moveq	r2, #10
   3ce84:	ldreq	r3, [r4, #20]
   3ce88:	addeq	r1, r3, #1
   3ce8c:	streq	r1, [r4, #20]
   3ce90:	strbeq	r2, [r3]
   3ce94:	b	3ce44 <flatcc_json_printer_struct_as_root@@Base+0x78>
   3ce98:	ldr	r3, [r4, #20]
   3ce9c:	mov	r2, #10
   3cea0:	add	r1, r3, #1
   3cea4:	str	r1, [r4, #20]
   3cea8:	strb	r2, [r3]
   3ceac:	ldr	r3, [r4, #32]
   3ceb0:	ldrb	r1, [r4, #25]
   3ceb4:	sub	r3, r3, #1
   3ceb8:	ldr	r0, [r4, #20]
   3cebc:	ldr	r2, [r4, #16]
   3cec0:	mul	r5, r3, r1
   3cec4:	str	r3, [r4, #32]
   3cec8:	add	r3, r0, r5
   3cecc:	cmp	r2, r3
   3ced0:	bcc	3ceec <flatcc_json_printer_struct_as_root@@Base+0x120>
   3ced4:	mov	r1, #32
   3ced8:	mov	r2, r5
   3cedc:	bl	145bc <memset@plt>
   3cee0:	ldr	r1, [r4, #20]
   3cee4:	add	r1, r1, r5
   3cee8:	b	3ce28 <flatcc_json_printer_struct_as_root@@Base+0x5c>
   3ceec:	mov	r1, r5
   3cef0:	mov	r0, r4
   3cef4:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3cef8:	b	3ce24 <flatcc_json_printer_struct_as_root@@Base+0x58>
   3cefc:	mvn	r0, #0
   3cf00:	pop	{r4, r5, r6, pc}

0003cf04 <flatcc_json_printer_table_as_root@@Base>:
   3cf04:	push	{r4, r5, lr}
   3cf08:	sub	sp, sp, #28
   3cf0c:	mov	r4, r0
   3cf10:	mov	r5, r1
   3cf14:	bl	31490 <flatcc_json_parser_table_as_root@@Base+0x12a4>
   3cf18:	cmp	r0, #0
   3cf1c:	beq	3d004 <flatcc_json_printer_table_as_root@@Base+0x100>
   3cf20:	ldr	r2, [r5]
   3cf24:	ldr	r1, [r4, #20]
   3cf28:	ldr	r3, [r4, #32]
   3cf2c:	add	ip, r1, #1
   3cf30:	add	r3, r3, #1
   3cf34:	mov	r0, #123	; 0x7b
   3cf38:	str	r3, [r4, #32]
   3cf3c:	str	ip, [r4, #20]
   3cf40:	strb	r0, [r1]
   3cf44:	ldr	r3, [r5, r2]
   3cf48:	add	r5, r5, r2
   3cf4c:	sub	r3, r5, r3
   3cf50:	mov	ip, #0
   3cf54:	ldrh	lr, [r3]
   3cf58:	mov	r2, #99	; 0x63
   3cf5c:	str	r3, [sp, #8]
   3cf60:	add	r1, sp, #4
   3cf64:	ldr	r3, [sp, #40]	; 0x28
   3cf68:	mov	r0, r4
   3cf6c:	str	lr, [sp, #12]
   3cf70:	str	r5, [sp, #4]
   3cf74:	str	ip, [sp, #20]
   3cf78:	str	r2, [sp, #16]
   3cf7c:	blx	r3
   3cf80:	ldrb	r3, [r4, #25]
   3cf84:	cmp	r3, #0
   3cf88:	ldr	r3, [r4, #20]
   3cf8c:	bne	3d010 <flatcc_json_printer_table_as_root@@Base+0x10c>
   3cf90:	add	r1, r3, #1
   3cf94:	mov	r2, #125	; 0x7d
   3cf98:	str	r1, [r4, #20]
   3cf9c:	strb	r2, [r3]
   3cfa0:	ldrb	r3, [r4, #25]
   3cfa4:	cmp	r3, #0
   3cfa8:	bne	3cfe4 <flatcc_json_printer_table_as_root@@Base+0xe0>
   3cfac:	ldr	r3, [r4, #44]	; 0x2c
   3cfb0:	mov	r1, #1
   3cfb4:	mov	r0, r4
   3cfb8:	blx	r3
   3cfbc:	ldr	r3, [r4, #36]	; 0x24
   3cfc0:	cmp	r3, #0
   3cfc4:	bne	3d004 <flatcc_json_printer_table_as_root@@Base+0x100>
   3cfc8:	ldr	r0, [r4, #20]
   3cfcc:	ldr	r2, [r4]
   3cfd0:	ldr	r3, [r4, #12]
   3cfd4:	sub	r0, r0, r2
   3cfd8:	add	r0, r0, r3
   3cfdc:	add	sp, sp, #28
   3cfe0:	pop	{r4, r5, pc}
   3cfe4:	ldr	r3, [r4, #32]
   3cfe8:	cmp	r3, #0
   3cfec:	moveq	r2, #10
   3cff0:	ldreq	r3, [r4, #20]
   3cff4:	addeq	r1, r3, #1
   3cff8:	streq	r1, [r4, #20]
   3cffc:	strbeq	r2, [r3]
   3d000:	b	3cfac <flatcc_json_printer_table_as_root@@Base+0xa8>
   3d004:	mvn	r0, #0
   3d008:	add	sp, sp, #28
   3d00c:	pop	{r4, r5, pc}
   3d010:	add	r1, r3, #1
   3d014:	mov	r2, #10
   3d018:	str	r1, [r4, #20]
   3d01c:	strb	r2, [r3]
   3d020:	ldr	r2, [r4, #32]
   3d024:	ldrb	r3, [r4, #25]
   3d028:	sub	r2, r2, #1
   3d02c:	ldr	r0, [r4, #20]
   3d030:	ldr	r1, [r4, #16]
   3d034:	mul	r5, r2, r3
   3d038:	str	r2, [r4, #32]
   3d03c:	add	r3, r0, r5
   3d040:	cmp	r1, r3
   3d044:	bcc	3d060 <flatcc_json_printer_table_as_root@@Base+0x15c>
   3d048:	mov	r2, r5
   3d04c:	mov	r1, #32
   3d050:	bl	145bc <memset@plt>
   3d054:	ldr	r3, [r4, #20]
   3d058:	add	r3, r3, r5
   3d05c:	b	3cf90 <flatcc_json_printer_table_as_root@@Base+0x8c>
   3d060:	mov	r1, r5
   3d064:	mov	r0, r4
   3d068:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3d06c:	ldr	r3, [r4, #20]
   3d070:	b	3cf90 <flatcc_json_printer_table_as_root@@Base+0x8c>

0003d074 <flatcc_json_printer_struct_as_nested_root@@Base>:
   3d074:	add	r2, r2, #2
   3d078:	ldr	ip, [r1, #8]
   3d07c:	lsl	r2, r2, #1
   3d080:	cmp	r2, ip
   3d084:	bxge	lr
   3d088:	ldr	ip, [r1, #4]
   3d08c:	ldrh	r2, [ip, r2]
   3d090:	cmp	r2, #0
   3d094:	bxeq	lr
   3d098:	ldr	ip, [r1]
   3d09c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d0a0:	adds	r8, ip, r2
   3d0a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d0a8:	ldr	r7, [ip, r2]
   3d0ac:	mov	r6, r3
   3d0b0:	add	r9, r8, r7
   3d0b4:	mov	r5, r1
   3d0b8:	ldr	r3, [sp, #36]	; 0x24
   3d0bc:	mov	r1, r9
   3d0c0:	ldr	r2, [r8, r7]
   3d0c4:	mov	r4, r0
   3d0c8:	bl	31490 <flatcc_json_parser_table_as_root@@Base+0x12a4>
   3d0cc:	cmp	r0, #0
   3d0d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d0d4:	ldr	r3, [r5, #16]
   3d0d8:	mov	r0, r4
   3d0dc:	cmp	r3, #0
   3d0e0:	add	r3, r3, #1
   3d0e4:	str	r3, [r5, #16]
   3d0e8:	ldrne	r3, [r4, #20]
   3d0ec:	movne	r2, #44	; 0x2c
   3d0f0:	addne	r1, r3, #1
   3d0f4:	strne	r1, [r4, #20]
   3d0f8:	strbne	r2, [r3]
   3d0fc:	mov	r1, r6
   3d100:	ldr	r2, [sp, #32]
   3d104:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   3d108:	ldr	r3, [r4, #32]
   3d10c:	ldr	r2, [r4, #20]
   3d110:	add	r3, r3, #1
   3d114:	add	r0, r2, #1
   3d118:	mov	r1, #123	; 0x7b
   3d11c:	str	r3, [r4, #32]
   3d120:	str	r0, [r4, #20]
   3d124:	strb	r1, [r2]
   3d128:	ldr	r1, [r8, r7]
   3d12c:	ldr	r3, [sp, #40]	; 0x28
   3d130:	mov	r0, r4
   3d134:	add	r1, r9, r1
   3d138:	blx	r3
   3d13c:	ldrb	r3, [r4, #25]
   3d140:	cmp	r3, #0
   3d144:	bne	3d160 <flatcc_json_printer_struct_as_nested_root@@Base+0xec>
   3d148:	ldr	r1, [r4, #20]
   3d14c:	add	r2, r1, #1
   3d150:	mov	r3, #125	; 0x7d
   3d154:	str	r2, [r4, #20]
   3d158:	strb	r3, [r1]
   3d15c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d160:	ldr	r3, [r4, #20]
   3d164:	mov	r2, #10
   3d168:	add	r1, r3, #1
   3d16c:	str	r1, [r4, #20]
   3d170:	strb	r2, [r3]
   3d174:	ldr	r3, [r4, #32]
   3d178:	ldrb	r1, [r4, #25]
   3d17c:	sub	r3, r3, #1
   3d180:	ldr	r0, [r4, #20]
   3d184:	ldr	r2, [r4, #16]
   3d188:	mul	r5, r3, r1
   3d18c:	str	r3, [r4, #32]
   3d190:	add	r3, r0, r5
   3d194:	cmp	r2, r3
   3d198:	bcc	3d1b4 <flatcc_json_printer_struct_as_nested_root@@Base+0x140>
   3d19c:	mov	r1, #32
   3d1a0:	mov	r2, r5
   3d1a4:	bl	145bc <memset@plt>
   3d1a8:	ldr	r1, [r4, #20]
   3d1ac:	add	r1, r1, r5
   3d1b0:	b	3d14c <flatcc_json_printer_struct_as_nested_root@@Base+0xd8>
   3d1b4:	mov	r1, r5
   3d1b8:	mov	r0, r4
   3d1bc:	bl	31108 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   3d1c0:	b	3d148 <flatcc_json_printer_struct_as_nested_root@@Base+0xd4>

0003d1c4 <flatcc_json_printer_table_as_nested_root@@Base>:
   3d1c4:	add	r2, r2, #2
   3d1c8:	ldr	ip, [r1, #8]
   3d1cc:	lsl	r2, r2, #1
   3d1d0:	cmp	r2, ip
   3d1d4:	bxge	lr
   3d1d8:	ldr	ip, [r1, #4]
   3d1dc:	ldrh	r2, [ip, r2]
   3d1e0:	cmp	r2, #0
   3d1e4:	bxeq	lr
   3d1e8:	push	{r4, r5, r6, r7, r8, lr}
   3d1ec:	sub	sp, sp, #24
   3d1f0:	ldr	lr, [r1]
   3d1f4:	adds	ip, lr, r2
   3d1f8:	beq	3d27c <flatcc_json_printer_table_as_nested_root@@Base+0xb8>
   3d1fc:	ldr	r2, [lr, r2]
   3d200:	mov	r6, r3
   3d204:	add	r8, ip, r2
   3d208:	add	r7, r8, #4
   3d20c:	mov	r4, r1
   3d210:	ldr	r3, [sp, #52]	; 0x34
   3d214:	ldr	r2, [ip, r2]
   3d218:	mov	r1, r7
   3d21c:	mov	r5, r0
   3d220:	bl	31490 <flatcc_json_parser_table_as_root@@Base+0x12a4>
   3d224:	cmp	r0, #0
   3d228:	beq	3d27c <flatcc_json_printer_table_as_nested_root@@Base+0xb8>
   3d22c:	ldr	r3, [r4, #16]
   3d230:	mov	r0, r5
   3d234:	cmp	r3, #0
   3d238:	add	r3, r3, #1
   3d23c:	str	r3, [r4, #16]
   3d240:	ldrne	r3, [r5, #20]
   3d244:	movne	r2, #44	; 0x2c
   3d248:	addne	r1, r3, #1
   3d24c:	strne	r1, [r5, #20]
   3d250:	strbne	r2, [r3]
   3d254:	mov	r1, r6
   3d258:	ldr	r2, [sp, #48]	; 0x30
   3d25c:	bl	3251c <flatcc_json_parser_table_as_root@@Base+0x2330>
   3d260:	ldr	r3, [r4, #12]
   3d264:	subs	r3, r3, #1
   3d268:	bne	3d284 <flatcc_json_printer_table_as_nested_root@@Base+0xc0>
   3d26c:	ldr	r3, [r5, #36]	; 0x24
   3d270:	cmp	r3, #0
   3d274:	moveq	r3, #2
   3d278:	streq	r3, [r5, #36]	; 0x24
   3d27c:	add	sp, sp, #24
   3d280:	pop	{r4, r5, r6, r7, r8, pc}
   3d284:	ldr	r2, [r5, #32]
   3d288:	ldr	r1, [r8, #4]
   3d28c:	ldr	r0, [r5, #20]
   3d290:	add	r2, r2, #1
   3d294:	str	r2, [r5, #32]
   3d298:	add	lr, r0, #1
   3d29c:	mov	ip, #123	; 0x7b
   3d2a0:	mov	r2, #0
   3d2a4:	str	lr, [r5, #20]
   3d2a8:	strb	ip, [r0]
   3d2ac:	str	r2, [sp, #20]
   3d2b0:	str	r3, [sp, #16]
   3d2b4:	ldr	r3, [r7, r1]
   3d2b8:	add	r7, r7, r1
   3d2bc:	sub	r3, r7, r3
   3d2c0:	add	r1, sp, #4
   3d2c4:	ldrh	r2, [r3]
   3d2c8:	mov	r0, r5
   3d2cc:	str	r3, [sp, #8]
   3d2d0:	ldr	r3, [sp, #56]	; 0x38
   3d2d4:	str	r2, [sp, #12]
   3d2d8:	str	r7, [sp, #4]
   3d2dc:	blx	r3
   3d2e0:	ldrb	r3, [r5, #25]
   3d2e4:	cmp	r3, #0
   3d2e8:	bne	3d308 <flatcc_json_printer_table_as_nested_root@@Base+0x144>
   3d2ec:	ldr	r3, [r5, #20]
   3d2f0:	mov	r2, #125	; 0x7d
   3d2f4:	add	r1, r3, #1
   3d2f8:	str	r1, [r5, #20]
   3d2fc:	strb	r2, [r3]
   3d300:	add	sp, sp, #24
   3d304:	pop	{r4, r5, r6, r7, r8, pc}
   3d308:	ldr	r3, [r5, #20]
   3d30c:	mov	r2, #10
   3d310:	add	r1, r3, #1
   3d314:	str	r1, [r5, #20]
   3d318:	strb	r2, [r3]
   3d31c:	ldr	r3, [r5, #32]
   3d320:	mov	r0, r5
   3d324:	sub	r3, r3, #1
   3d328:	str	r3, [r5, #32]
   3d32c:	bl	311b4 <flatcc_json_parser_table_as_root@@Base+0xfc8>
   3d330:	b	3d2ec <flatcc_json_printer_table_as_nested_root@@Base+0x128>

0003d334 <flatcc_json_printer_init@@Base>:
   3d334:	push	{r4, r5, r6, lr}
   3d338:	mov	r2, #48	; 0x30
   3d33c:	mov	r5, r1
   3d340:	mov	r1, #0
   3d344:	mov	r4, r0
   3d348:	bl	145bc <memset@plt>
   3d34c:	ldr	r3, [pc, #104]	; 3d3bc <flatcc_json_printer_init@@Base+0x88>
   3d350:	cmp	r5, #0
   3d354:	add	r3, pc, r3
   3d358:	beq	3d3ac <flatcc_json_printer_init@@Base+0x78>
   3d35c:	ldr	r3, [pc, #92]	; 3d3c0 <flatcc_json_printer_init@@Base+0x8c>
   3d360:	ldr	r6, [pc, #92]	; 3d3c4 <flatcc_json_printer_init@@Base+0x90>
   3d364:	add	r3, pc, r3
   3d368:	str	r3, [r4, #44]	; 0x2c
   3d36c:	str	r5, [r4, #40]	; 0x28
   3d370:	mov	r0, r6
   3d374:	bl	14574 <malloc@plt>
   3d378:	cmp	r0, #0
   3d37c:	addne	r1, r0, #16384	; 0x4000
   3d380:	movne	r2, #1
   3d384:	movne	r3, #16384	; 0x4000
   3d388:	str	r0, [r4]
   3d38c:	strne	r0, [r4, #20]
   3d390:	strne	r6, [r4, #4]
   3d394:	movne	r0, #0
   3d398:	strne	r1, [r4, #16]
   3d39c:	strbne	r2, [r4, #24]
   3d3a0:	strne	r3, [r4, #8]
   3d3a4:	mvneq	r0, #0
   3d3a8:	pop	{r4, r5, r6, pc}
   3d3ac:	ldr	r2, [pc, #20]	; 3d3c8 <flatcc_json_printer_init@@Base+0x94>
   3d3b0:	ldr	r3, [r3, r2]
   3d3b4:	ldr	r5, [r3]
   3d3b8:	b	3d35c <flatcc_json_printer_init@@Base+0x28>
   3d3bc:	andeq	r7, r1, r4, lsr #25
   3d3c0:			; <UNDEFINED> instruction: 0xffff3e9c
   3d3c4:	andeq	r4, r0, r0, asr #32
   3d3c8:	andeq	r0, r0, r4, ror r0

0003d3cc <flatcc_json_printer_init_buffer@@Base>:
   3d3cc:	cmp	r2, #63	; 0x3f
   3d3d0:	push	{r4, r5, r6, lr}
   3d3d4:	bls	3d420 <flatcc_json_printer_init_buffer@@Base+0x54>
   3d3d8:	mov	r6, r1
   3d3dc:	mov	r5, r2
   3d3e0:	mov	r1, #0
   3d3e4:	mov	r2, #48	; 0x30
   3d3e8:	mov	r4, r0
   3d3ec:	bl	145bc <memset@plt>
   3d3f0:	ldr	r3, [pc, #76]	; 3d444 <flatcc_json_printer_init_buffer@@Base+0x78>
   3d3f4:	sub	r2, r5, #64	; 0x40
   3d3f8:	add	r3, pc, r3
   3d3fc:	add	r1, r6, r2
   3d400:	str	r6, [r4]
   3d404:	str	r5, [r4, #4]
   3d408:	str	r2, [r4, #8]
   3d40c:	str	r1, [r4, #16]
   3d410:	str	r6, [r4, #20]
   3d414:	str	r3, [r4, #44]	; 0x2c
   3d418:	mov	r0, #0
   3d41c:	pop	{r4, r5, r6, pc}
   3d420:	ldr	r3, [pc, #32]	; 3d448 <flatcc_json_printer_init_buffer@@Base+0x7c>
   3d424:	ldr	r1, [pc, #32]	; 3d44c <flatcc_json_printer_init_buffer@@Base+0x80>
   3d428:	ldr	r0, [pc, #32]	; 3d450 <flatcc_json_printer_init_buffer@@Base+0x84>
   3d42c:	add	r3, pc, r3
   3d430:	ldr	r2, [pc, #28]	; 3d454 <flatcc_json_printer_init_buffer@@Base+0x88>
   3d434:	add	r3, r3, #1824	; 0x720
   3d438:	add	r1, pc, r1
   3d43c:	add	r0, pc, r0
   3d440:	bl	14610 <__assert_fail@plt>
   3d444:			; <UNDEFINED> instruction: 0xffff3c10
   3d448:	andeq	r6, r0, ip, lsl #11
   3d44c:	ldrdeq	r6, [r0], -ip
   3d450:	strdeq	r6, [r0], -ip
   3d454:	andeq	r0, r0, sp, lsl #9

0003d458 <flatcc_json_printer_init_dynamic_buffer@@Base>:
   3d458:	cmp	r1, #0
   3d45c:	push	{r4, r5, r6, lr}
   3d460:	mov	r4, r0
   3d464:	moveq	r6, #4032	; 0xfc0
   3d468:	moveq	r5, #4096	; 0x1000
   3d46c:	beq	3d480 <flatcc_json_printer_init_dynamic_buffer@@Base+0x28>
   3d470:	cmp	r1, #64	; 0x40
   3d474:	movcs	r5, r1
   3d478:	movcc	r5, #64	; 0x40
   3d47c:	sub	r6, r5, #64	; 0x40
   3d480:	mov	r2, #48	; 0x30
   3d484:	mov	r1, #0
   3d488:	mov	r0, r4
   3d48c:	bl	145bc <memset@plt>
   3d490:	mov	r0, r5
   3d494:	bl	14574 <malloc@plt>
   3d498:	ldr	r3, [pc, #84]	; 3d4f4 <flatcc_json_printer_init_dynamic_buffer@@Base+0x9c>
   3d49c:	mov	r2, #1
   3d4a0:	add	r3, pc, r3
   3d4a4:	stmib	r4, {r5, r6}
   3d4a8:	str	r3, [r4, #44]	; 0x2c
   3d4ac:	strb	r2, [r4, #24]
   3d4b0:	add	r1, r0, r6
   3d4b4:	cmp	r0, #0
   3d4b8:	str	r0, [r4]
   3d4bc:	str	r0, [r4, #20]
   3d4c0:	str	r1, [r4, #16]
   3d4c4:	beq	3d4d0 <flatcc_json_printer_init_dynamic_buffer@@Base+0x78>
   3d4c8:	mov	r0, #0
   3d4cc:	pop	{r4, r5, r6, pc}
   3d4d0:	ldr	r3, [r4, #36]	; 0x24
   3d4d4:	cmp	r3, #0
   3d4d8:	bne	3d4ec <flatcc_json_printer_init_dynamic_buffer@@Base+0x94>
   3d4dc:	mov	r3, #3
   3d4e0:	str	r3, [r4, #36]	; 0x24
   3d4e4:	mvn	r0, #0
   3d4e8:	pop	{r4, r5, r6, pc}
   3d4ec:	mvn	r0, #0
   3d4f0:	pop	{r4, r5, r6, pc}
   3d4f4:			; <UNDEFINED> instruction: 0xffff3e04

0003d4f8 <flatcc_json_printer_get_buffer@@Base>:
   3d4f8:	ldr	r3, [r0, #44]	; 0x2c
   3d4fc:	push	{r4, r5, r6, lr}
   3d500:	mov	r5, r1
   3d504:	mov	r1, #0
   3d508:	mov	r4, r0
   3d50c:	blx	r3
   3d510:	cmp	r5, #0
   3d514:	ldr	r0, [r4]
   3d518:	ldrne	r3, [r4, #20]
   3d51c:	subne	r3, r3, r0
   3d520:	strne	r3, [r5]
   3d524:	pop	{r4, r5, r6, pc}

0003d528 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   3d528:	push	{r4, r5, r6, lr}
   3d52c:	mov	r5, r0
   3d530:	bl	3d4f8 <flatcc_json_printer_get_buffer@@Base>
   3d534:	mov	r2, #48	; 0x30
   3d538:	mov	r1, #0
   3d53c:	mov	r4, r0
   3d540:	mov	r0, r5
   3d544:	bl	145bc <memset@plt>
   3d548:	mov	r0, r4
   3d54c:	pop	{r4, r5, r6, pc}

0003d550 <flatcc_json_printer_clear@@Base>:
   3d550:	push	{r4, lr}
   3d554:	mov	r4, r0
   3d558:	ldrb	r3, [r0, #24]
   3d55c:	cmp	r3, #0
   3d560:	beq	3d574 <flatcc_json_printer_clear@@Base+0x24>
   3d564:	ldr	r0, [r0]
   3d568:	cmp	r0, #0
   3d56c:	beq	3d574 <flatcc_json_printer_clear@@Base+0x24>
   3d570:	bl	14538 <free@plt>
   3d574:	mov	r0, r4
   3d578:	mov	r2, #48	; 0x30
   3d57c:	mov	r1, #0
   3d580:	pop	{r4, lr}
   3d584:	b	145bc <memset@plt>
   3d588:	subs	r2, r1, #1
   3d58c:	bxeq	lr
   3d590:	bcc	3d768 <flatcc_json_printer_clear@@Base+0x218>
   3d594:	cmp	r0, r1
   3d598:	bls	3d74c <flatcc_json_printer_clear@@Base+0x1fc>
   3d59c:	tst	r1, r2
   3d5a0:	beq	3d758 <flatcc_json_printer_clear@@Base+0x208>
   3d5a4:	clz	r3, r0
   3d5a8:	clz	r2, r1
   3d5ac:	sub	r3, r2, r3
   3d5b0:	rsbs	r3, r3, #31
   3d5b4:	addne	r3, r3, r3, lsl #1
   3d5b8:	mov	r2, #0
   3d5bc:	addne	pc, pc, r3, lsl #2
   3d5c0:	nop			; (mov r0, r0)
   3d5c4:	cmp	r0, r1, lsl #31
   3d5c8:	adc	r2, r2, r2
   3d5cc:	subcs	r0, r0, r1, lsl #31
   3d5d0:	cmp	r0, r1, lsl #30
   3d5d4:	adc	r2, r2, r2
   3d5d8:	subcs	r0, r0, r1, lsl #30
   3d5dc:	cmp	r0, r1, lsl #29
   3d5e0:	adc	r2, r2, r2
   3d5e4:	subcs	r0, r0, r1, lsl #29
   3d5e8:	cmp	r0, r1, lsl #28
   3d5ec:	adc	r2, r2, r2
   3d5f0:	subcs	r0, r0, r1, lsl #28
   3d5f4:	cmp	r0, r1, lsl #27
   3d5f8:	adc	r2, r2, r2
   3d5fc:	subcs	r0, r0, r1, lsl #27
   3d600:	cmp	r0, r1, lsl #26
   3d604:	adc	r2, r2, r2
   3d608:	subcs	r0, r0, r1, lsl #26
   3d60c:	cmp	r0, r1, lsl #25
   3d610:	adc	r2, r2, r2
   3d614:	subcs	r0, r0, r1, lsl #25
   3d618:	cmp	r0, r1, lsl #24
   3d61c:	adc	r2, r2, r2
   3d620:	subcs	r0, r0, r1, lsl #24
   3d624:	cmp	r0, r1, lsl #23
   3d628:	adc	r2, r2, r2
   3d62c:	subcs	r0, r0, r1, lsl #23
   3d630:	cmp	r0, r1, lsl #22
   3d634:	adc	r2, r2, r2
   3d638:	subcs	r0, r0, r1, lsl #22
   3d63c:	cmp	r0, r1, lsl #21
   3d640:	adc	r2, r2, r2
   3d644:	subcs	r0, r0, r1, lsl #21
   3d648:	cmp	r0, r1, lsl #20
   3d64c:	adc	r2, r2, r2
   3d650:	subcs	r0, r0, r1, lsl #20
   3d654:	cmp	r0, r1, lsl #19
   3d658:	adc	r2, r2, r2
   3d65c:	subcs	r0, r0, r1, lsl #19
   3d660:	cmp	r0, r1, lsl #18
   3d664:	adc	r2, r2, r2
   3d668:	subcs	r0, r0, r1, lsl #18
   3d66c:	cmp	r0, r1, lsl #17
   3d670:	adc	r2, r2, r2
   3d674:	subcs	r0, r0, r1, lsl #17
   3d678:	cmp	r0, r1, lsl #16
   3d67c:	adc	r2, r2, r2
   3d680:	subcs	r0, r0, r1, lsl #16
   3d684:	cmp	r0, r1, lsl #15
   3d688:	adc	r2, r2, r2
   3d68c:	subcs	r0, r0, r1, lsl #15
   3d690:	cmp	r0, r1, lsl #14
   3d694:	adc	r2, r2, r2
   3d698:	subcs	r0, r0, r1, lsl #14
   3d69c:	cmp	r0, r1, lsl #13
   3d6a0:	adc	r2, r2, r2
   3d6a4:	subcs	r0, r0, r1, lsl #13
   3d6a8:	cmp	r0, r1, lsl #12
   3d6ac:	adc	r2, r2, r2
   3d6b0:	subcs	r0, r0, r1, lsl #12
   3d6b4:	cmp	r0, r1, lsl #11
   3d6b8:	adc	r2, r2, r2
   3d6bc:	subcs	r0, r0, r1, lsl #11
   3d6c0:	cmp	r0, r1, lsl #10
   3d6c4:	adc	r2, r2, r2
   3d6c8:	subcs	r0, r0, r1, lsl #10
   3d6cc:	cmp	r0, r1, lsl #9
   3d6d0:	adc	r2, r2, r2
   3d6d4:	subcs	r0, r0, r1, lsl #9
   3d6d8:	cmp	r0, r1, lsl #8
   3d6dc:	adc	r2, r2, r2
   3d6e0:	subcs	r0, r0, r1, lsl #8
   3d6e4:	cmp	r0, r1, lsl #7
   3d6e8:	adc	r2, r2, r2
   3d6ec:	subcs	r0, r0, r1, lsl #7
   3d6f0:	cmp	r0, r1, lsl #6
   3d6f4:	adc	r2, r2, r2
   3d6f8:	subcs	r0, r0, r1, lsl #6
   3d6fc:	cmp	r0, r1, lsl #5
   3d700:	adc	r2, r2, r2
   3d704:	subcs	r0, r0, r1, lsl #5
   3d708:	cmp	r0, r1, lsl #4
   3d70c:	adc	r2, r2, r2
   3d710:	subcs	r0, r0, r1, lsl #4
   3d714:	cmp	r0, r1, lsl #3
   3d718:	adc	r2, r2, r2
   3d71c:	subcs	r0, r0, r1, lsl #3
   3d720:	cmp	r0, r1, lsl #2
   3d724:	adc	r2, r2, r2
   3d728:	subcs	r0, r0, r1, lsl #2
   3d72c:	cmp	r0, r1, lsl #1
   3d730:	adc	r2, r2, r2
   3d734:	subcs	r0, r0, r1, lsl #1
   3d738:	cmp	r0, r1
   3d73c:	adc	r2, r2, r2
   3d740:	subcs	r0, r0, r1
   3d744:	mov	r0, r2
   3d748:	bx	lr
   3d74c:	moveq	r0, #1
   3d750:	movne	r0, #0
   3d754:	bx	lr
   3d758:	clz	r2, r1
   3d75c:	rsb	r2, r2, #31
   3d760:	lsr	r0, r0, r2
   3d764:	bx	lr
   3d768:	cmp	r0, #0
   3d76c:	mvnne	r0, #0
   3d770:	b	3ddd8 <flatcc_json_printer_clear@@Base+0x888>
   3d774:	cmp	r1, #0
   3d778:	beq	3d768 <flatcc_json_printer_clear@@Base+0x218>
   3d77c:	push	{r0, r1, lr}
   3d780:	bl	3d588 <flatcc_json_printer_clear@@Base+0x38>
   3d784:	pop	{r1, r2, lr}
   3d788:	mul	r3, r2, r0
   3d78c:	sub	r1, r1, r3
   3d790:	bx	lr
   3d794:	eor	r1, r1, #-2147483648	; 0x80000000
   3d798:	b	3d7a0 <flatcc_json_printer_clear@@Base+0x250>
   3d79c:	eor	r3, r3, #-2147483648	; 0x80000000
   3d7a0:	push	{r4, r5, lr}
   3d7a4:	lsl	r4, r1, #1
   3d7a8:	lsl	r5, r3, #1
   3d7ac:	teq	r4, r5
   3d7b0:	teqeq	r0, r2
   3d7b4:	orrsne	ip, r4, r0
   3d7b8:	orrsne	ip, r5, r2
   3d7bc:	mvnsne	ip, r4, asr #21
   3d7c0:	mvnsne	ip, r5, asr #21
   3d7c4:	beq	3d9b0 <flatcc_json_printer_clear@@Base+0x460>
   3d7c8:	lsr	r4, r4, #21
   3d7cc:	rsbs	r5, r4, r5, lsr #21
   3d7d0:	rsblt	r5, r5, #0
   3d7d4:	ble	3d7f4 <flatcc_json_printer_clear@@Base+0x2a4>
   3d7d8:	add	r4, r4, r5
   3d7dc:	eor	r2, r0, r2
   3d7e0:	eor	r3, r1, r3
   3d7e4:	eor	r0, r2, r0
   3d7e8:	eor	r1, r3, r1
   3d7ec:	eor	r2, r0, r2
   3d7f0:	eor	r3, r1, r3
   3d7f4:	cmp	r5, #54	; 0x36
   3d7f8:	pophi	{r4, r5, pc}
   3d7fc:	tst	r1, #-2147483648	; 0x80000000
   3d800:	lsl	r1, r1, #12
   3d804:	mov	ip, #1048576	; 0x100000
   3d808:	orr	r1, ip, r1, lsr #12
   3d80c:	beq	3d818 <flatcc_json_printer_clear@@Base+0x2c8>
   3d810:	rsbs	r0, r0, #0
   3d814:	rsc	r1, r1, #0
   3d818:	tst	r3, #-2147483648	; 0x80000000
   3d81c:	lsl	r3, r3, #12
   3d820:	orr	r3, ip, r3, lsr #12
   3d824:	beq	3d830 <flatcc_json_printer_clear@@Base+0x2e0>
   3d828:	rsbs	r2, r2, #0
   3d82c:	rsc	r3, r3, #0
   3d830:	teq	r4, r5
   3d834:	beq	3d998 <flatcc_json_printer_clear@@Base+0x448>
   3d838:	sub	r4, r4, #1
   3d83c:	rsbs	lr, r5, #32
   3d840:	blt	3d85c <flatcc_json_printer_clear@@Base+0x30c>
   3d844:	lsl	ip, r2, lr
   3d848:	adds	r0, r0, r2, lsr r5
   3d84c:	adc	r1, r1, #0
   3d850:	adds	r0, r0, r3, lsl lr
   3d854:	adcs	r1, r1, r3, asr r5
   3d858:	b	3d878 <flatcc_json_printer_clear@@Base+0x328>
   3d85c:	sub	r5, r5, #32
   3d860:	add	lr, lr, #32
   3d864:	cmp	r2, #1
   3d868:	lsl	ip, r3, lr
   3d86c:	orrcs	ip, ip, #2
   3d870:	adds	r0, r0, r3, asr r5
   3d874:	adcs	r1, r1, r3, asr #31
   3d878:	and	r5, r1, #-2147483648	; 0x80000000
   3d87c:	bpl	3d88c <flatcc_json_printer_clear@@Base+0x33c>
   3d880:	rsbs	ip, ip, #0
   3d884:	rscs	r0, r0, #0
   3d888:	rsc	r1, r1, #0
   3d88c:	cmp	r1, #1048576	; 0x100000
   3d890:	bcc	3d8d0 <flatcc_json_printer_clear@@Base+0x380>
   3d894:	cmp	r1, #2097152	; 0x200000
   3d898:	bcc	3d8b8 <flatcc_json_printer_clear@@Base+0x368>
   3d89c:	lsrs	r1, r1, #1
   3d8a0:	rrxs	r0, r0
   3d8a4:	rrx	ip, ip
   3d8a8:	add	r4, r4, #1
   3d8ac:	lsl	r2, r4, #21
   3d8b0:	cmn	r2, #4194304	; 0x400000
   3d8b4:	bcs	3da10 <flatcc_json_printer_clear@@Base+0x4c0>
   3d8b8:	cmp	ip, #-2147483648	; 0x80000000
   3d8bc:	lsrseq	ip, r0, #1
   3d8c0:	adcs	r0, r0, #0
   3d8c4:	adc	r1, r1, r4, lsl #20
   3d8c8:	orr	r1, r1, r5
   3d8cc:	pop	{r4, r5, pc}
   3d8d0:	lsls	ip, ip, #1
   3d8d4:	adcs	r0, r0, r0
   3d8d8:	adc	r1, r1, r1
   3d8dc:	tst	r1, #1048576	; 0x100000
   3d8e0:	sub	r4, r4, #1
   3d8e4:	bne	3d8b8 <flatcc_json_printer_clear@@Base+0x368>
   3d8e8:	teq	r1, #0
   3d8ec:	moveq	r1, r0
   3d8f0:	moveq	r0, #0
   3d8f4:	clz	r3, r1
   3d8f8:	addeq	r3, r3, #32
   3d8fc:	sub	r3, r3, #11
   3d900:	subs	r2, r3, #32
   3d904:	bge	3d928 <flatcc_json_printer_clear@@Base+0x3d8>
   3d908:	adds	r2, r2, #12
   3d90c:	ble	3d924 <flatcc_json_printer_clear@@Base+0x3d4>
   3d910:	add	ip, r2, #20
   3d914:	rsb	r2, r2, #12
   3d918:	lsl	r0, r1, ip
   3d91c:	lsr	r1, r1, r2
   3d920:	b	3d938 <flatcc_json_printer_clear@@Base+0x3e8>
   3d924:	add	r2, r2, #20
   3d928:	rsble	ip, r2, #32
   3d92c:	lsl	r1, r1, r2
   3d930:	orrle	r1, r1, r0, lsr ip
   3d934:	lslle	r0, r0, r2
   3d938:	subs	r4, r4, r3
   3d93c:	addge	r1, r1, r4, lsl #20
   3d940:	orrge	r1, r1, r5
   3d944:	popge	{r4, r5, pc}
   3d948:	mvn	r4, r4
   3d94c:	subs	r4, r4, #31
   3d950:	bge	3d98c <flatcc_json_printer_clear@@Base+0x43c>
   3d954:	adds	r4, r4, #12
   3d958:	bgt	3d974 <flatcc_json_printer_clear@@Base+0x424>
   3d95c:	add	r4, r4, #20
   3d960:	rsb	r2, r4, #32
   3d964:	lsr	r0, r0, r4
   3d968:	orr	r0, r0, r1, lsl r2
   3d96c:	orr	r1, r5, r1, lsr r4
   3d970:	pop	{r4, r5, pc}
   3d974:	rsb	r4, r4, #12
   3d978:	rsb	r2, r4, #32
   3d97c:	lsr	r0, r0, r2
   3d980:	orr	r0, r0, r1, lsl r4
   3d984:	mov	r1, r5
   3d988:	pop	{r4, r5, pc}
   3d98c:	lsr	r0, r1, r4
   3d990:	mov	r1, r5
   3d994:	pop	{r4, r5, pc}
   3d998:	teq	r4, #0
   3d99c:	eor	r3, r3, #1048576	; 0x100000
   3d9a0:	eoreq	r1, r1, #1048576	; 0x100000
   3d9a4:	addeq	r4, r4, #1
   3d9a8:	subne	r5, r5, #1
   3d9ac:	b	3d838 <flatcc_json_printer_clear@@Base+0x2e8>
   3d9b0:	mvns	ip, r4, asr #21
   3d9b4:	mvnsne	ip, r5, asr #21
   3d9b8:	beq	3da20 <flatcc_json_printer_clear@@Base+0x4d0>
   3d9bc:	teq	r4, r5
   3d9c0:	teqeq	r0, r2
   3d9c4:	beq	3d9d8 <flatcc_json_printer_clear@@Base+0x488>
   3d9c8:	orrs	ip, r4, r0
   3d9cc:	moveq	r1, r3
   3d9d0:	moveq	r0, r2
   3d9d4:	pop	{r4, r5, pc}
   3d9d8:	teq	r1, r3
   3d9dc:	movne	r1, #0
   3d9e0:	movne	r0, #0
   3d9e4:	popne	{r4, r5, pc}
   3d9e8:	lsrs	ip, r4, #21
   3d9ec:	bne	3da00 <flatcc_json_printer_clear@@Base+0x4b0>
   3d9f0:	lsls	r0, r0, #1
   3d9f4:	adcs	r1, r1, r1
   3d9f8:	orrcs	r1, r1, #-2147483648	; 0x80000000
   3d9fc:	pop	{r4, r5, pc}
   3da00:	adds	r4, r4, #4194304	; 0x400000
   3da04:	addcc	r1, r1, #1048576	; 0x100000
   3da08:	popcc	{r4, r5, pc}
   3da0c:	and	r5, r1, #-2147483648	; 0x80000000
   3da10:	orr	r1, r5, #2130706432	; 0x7f000000
   3da14:	orr	r1, r1, #15728640	; 0xf00000
   3da18:	mov	r0, #0
   3da1c:	pop	{r4, r5, pc}
   3da20:	mvns	ip, r4, asr #21
   3da24:	movne	r1, r3
   3da28:	movne	r0, r2
   3da2c:	mvnseq	ip, r5, asr #21
   3da30:	movne	r3, r1
   3da34:	movne	r2, r0
   3da38:	orrs	r4, r0, r1, lsl #12
   3da3c:	orrseq	r5, r2, r3, lsl #12
   3da40:	teqeq	r1, r3
   3da44:	orrne	r1, r1, #524288	; 0x80000
   3da48:	pop	{r4, r5, pc}
   3da4c:	teq	r0, #0
   3da50:	moveq	r1, #0
   3da54:	bxeq	lr
   3da58:	push	{r4, r5, lr}
   3da5c:	mov	r4, #1024	; 0x400
   3da60:	add	r4, r4, #50	; 0x32
   3da64:	mov	r5, #0
   3da68:	mov	r1, #0
   3da6c:	b	3d8e8 <flatcc_json_printer_clear@@Base+0x398>
   3da70:	teq	r0, #0
   3da74:	moveq	r1, #0
   3da78:	bxeq	lr
   3da7c:	push	{r4, r5, lr}
   3da80:	mov	r4, #1024	; 0x400
   3da84:	add	r4, r4, #50	; 0x32
   3da88:	ands	r5, r0, #-2147483648	; 0x80000000
   3da8c:	rsbmi	r0, r0, #0
   3da90:	mov	r1, #0
   3da94:	b	3d8e8 <flatcc_json_printer_clear@@Base+0x398>
   3da98:	lsls	r2, r0, #1
   3da9c:	asr	r1, r2, #3
   3daa0:	rrx	r1, r1
   3daa4:	lsl	r0, r2, #28
   3daa8:	andsne	r3, r2, #-16777216	; 0xff000000
   3daac:	teqne	r3, #-16777216	; 0xff000000
   3dab0:	eorne	r1, r1, #939524096	; 0x38000000
   3dab4:	bxne	lr
   3dab8:	teq	r2, #0
   3dabc:	teqne	r3, #-16777216	; 0xff000000
   3dac0:	bxeq	lr
   3dac4:	push	{r4, r5, lr}
   3dac8:	mov	r4, #896	; 0x380
   3dacc:	and	r5, r1, #-2147483648	; 0x80000000
   3dad0:	bic	r1, r1, #-2147483648	; 0x80000000
   3dad4:	b	3d8e8 <flatcc_json_printer_clear@@Base+0x398>
   3dad8:	orrs	r2, r0, r1
   3dadc:	bxeq	lr
   3dae0:	push	{r4, r5, lr}
   3dae4:	mov	r5, #0
   3dae8:	b	3db08 <flatcc_json_printer_clear@@Base+0x5b8>
   3daec:	orrs	r2, r0, r1
   3daf0:	bxeq	lr
   3daf4:	push	{r4, r5, lr}
   3daf8:	ands	r5, r1, #-2147483648	; 0x80000000
   3dafc:	bpl	3db08 <flatcc_json_printer_clear@@Base+0x5b8>
   3db00:	rsbs	r0, r0, #0
   3db04:	rsc	r1, r1, #0
   3db08:	mov	r4, #1024	; 0x400
   3db0c:	add	r4, r4, #50	; 0x32
   3db10:	lsrs	ip, r1, #22
   3db14:	beq	3d88c <flatcc_json_printer_clear@@Base+0x33c>
   3db18:	mov	r2, #3
   3db1c:	lsrs	ip, ip, #3
   3db20:	addne	r2, r2, #3
   3db24:	lsrs	ip, ip, #3
   3db28:	addne	r2, r2, #3
   3db2c:	add	r2, r2, ip, lsr #3
   3db30:	rsb	r3, r2, #32
   3db34:	lsl	ip, r0, r3
   3db38:	lsr	r0, r0, r2
   3db3c:	orr	r0, r0, r1, lsl r3
   3db40:	lsr	r1, r1, r2
   3db44:	add	r4, r4, r2
   3db48:	b	3d88c <flatcc_json_printer_clear@@Base+0x33c>
   3db4c:	eor	r0, r0, #-2147483648	; 0x80000000
   3db50:	b	3db58 <flatcc_json_printer_clear@@Base+0x608>
   3db54:	eor	r1, r1, #-2147483648	; 0x80000000
   3db58:	lsls	r2, r0, #1
   3db5c:	lslsne	r3, r1, #1
   3db60:	teqne	r2, r3
   3db64:	mvnsne	ip, r2, asr #24
   3db68:	mvnsne	ip, r3, asr #24
   3db6c:	beq	3dc64 <flatcc_json_printer_clear@@Base+0x714>
   3db70:	lsr	r2, r2, #24
   3db74:	rsbs	r3, r2, r3, lsr #24
   3db78:	addgt	r2, r2, r3
   3db7c:	eorgt	r1, r0, r1
   3db80:	eorgt	r0, r1, r0
   3db84:	eorgt	r1, r0, r1
   3db88:	rsblt	r3, r3, #0
   3db8c:	cmp	r3, #25
   3db90:	bxhi	lr
   3db94:	tst	r0, #-2147483648	; 0x80000000
   3db98:	orr	r0, r0, #8388608	; 0x800000
   3db9c:	bic	r0, r0, #-16777216	; 0xff000000
   3dba0:	rsbne	r0, r0, #0
   3dba4:	tst	r1, #-2147483648	; 0x80000000
   3dba8:	orr	r1, r1, #8388608	; 0x800000
   3dbac:	bic	r1, r1, #-16777216	; 0xff000000
   3dbb0:	rsbne	r1, r1, #0
   3dbb4:	teq	r2, r3
   3dbb8:	beq	3dc4c <flatcc_json_printer_clear@@Base+0x6fc>
   3dbbc:	sub	r2, r2, #1
   3dbc0:	adds	r0, r0, r1, asr r3
   3dbc4:	rsb	r3, r3, #32
   3dbc8:	lsl	r1, r1, r3
   3dbcc:	and	r3, r0, #-2147483648	; 0x80000000
   3dbd0:	bpl	3dbdc <flatcc_json_printer_clear@@Base+0x68c>
   3dbd4:	rsbs	r1, r1, #0
   3dbd8:	rsc	r0, r0, #0
   3dbdc:	cmp	r0, #8388608	; 0x800000
   3dbe0:	bcc	3dc14 <flatcc_json_printer_clear@@Base+0x6c4>
   3dbe4:	cmp	r0, #16777216	; 0x1000000
   3dbe8:	bcc	3dc00 <flatcc_json_printer_clear@@Base+0x6b0>
   3dbec:	lsrs	r0, r0, #1
   3dbf0:	rrx	r1, r1
   3dbf4:	add	r2, r2, #1
   3dbf8:	cmp	r2, #254	; 0xfe
   3dbfc:	bcs	3dcb8 <flatcc_json_printer_clear@@Base+0x768>
   3dc00:	cmp	r1, #-2147483648	; 0x80000000
   3dc04:	adc	r0, r0, r2, lsl #23
   3dc08:	biceq	r0, r0, #1
   3dc0c:	orr	r0, r0, r3
   3dc10:	bx	lr
   3dc14:	lsls	r1, r1, #1
   3dc18:	adc	r0, r0, r0
   3dc1c:	tst	r0, #8388608	; 0x800000
   3dc20:	sub	r2, r2, #1
   3dc24:	bne	3dc00 <flatcc_json_printer_clear@@Base+0x6b0>
   3dc28:	clz	ip, r0
   3dc2c:	sub	ip, ip, #8
   3dc30:	subs	r2, r2, ip
   3dc34:	lsl	r0, r0, ip
   3dc38:	addge	r0, r0, r2, lsl #23
   3dc3c:	rsblt	r2, r2, #0
   3dc40:	orrge	r0, r0, r3
   3dc44:	orrlt	r0, r3, r0, lsr r2
   3dc48:	bx	lr
   3dc4c:	teq	r2, #0
   3dc50:	eor	r1, r1, #8388608	; 0x800000
   3dc54:	eoreq	r0, r0, #8388608	; 0x800000
   3dc58:	addeq	r2, r2, #1
   3dc5c:	subne	r3, r3, #1
   3dc60:	b	3dbbc <flatcc_json_printer_clear@@Base+0x66c>
   3dc64:	lsl	r3, r1, #1
   3dc68:	mvns	ip, r2, asr #24
   3dc6c:	mvnsne	ip, r3, asr #24
   3dc70:	beq	3dcc4 <flatcc_json_printer_clear@@Base+0x774>
   3dc74:	teq	r2, r3
   3dc78:	beq	3dc88 <flatcc_json_printer_clear@@Base+0x738>
   3dc7c:	teq	r2, #0
   3dc80:	moveq	r0, r1
   3dc84:	bx	lr
   3dc88:	teq	r0, r1
   3dc8c:	movne	r0, #0
   3dc90:	bxne	lr
   3dc94:	tst	r2, #-16777216	; 0xff000000
   3dc98:	bne	3dca8 <flatcc_json_printer_clear@@Base+0x758>
   3dc9c:	lsls	r0, r0, #1
   3dca0:	orrcs	r0, r0, #-2147483648	; 0x80000000
   3dca4:	bx	lr
   3dca8:	adds	r2, r2, #33554432	; 0x2000000
   3dcac:	addcc	r0, r0, #8388608	; 0x800000
   3dcb0:	bxcc	lr
   3dcb4:	and	r3, r0, #-2147483648	; 0x80000000
   3dcb8:	orr	r0, r3, #2130706432	; 0x7f000000
   3dcbc:	orr	r0, r0, #8388608	; 0x800000
   3dcc0:	bx	lr
   3dcc4:	mvns	r2, r2, asr #24
   3dcc8:	movne	r0, r1
   3dccc:	mvnseq	r3, r3, asr #24
   3dcd0:	movne	r1, r0
   3dcd4:	lsls	r2, r0, #9
   3dcd8:	lslseq	r3, r1, #9
   3dcdc:	teqeq	r0, r1
   3dce0:	orrne	r0, r0, #4194304	; 0x400000
   3dce4:	bx	lr
   3dce8:	mov	r3, #0
   3dcec:	b	3dcf8 <flatcc_json_printer_clear@@Base+0x7a8>
   3dcf0:	ands	r3, r0, #-2147483648	; 0x80000000
   3dcf4:	rsbmi	r0, r0, #0
   3dcf8:	movs	ip, r0
   3dcfc:	bxeq	lr
   3dd00:	orr	r3, r3, #1258291200	; 0x4b000000
   3dd04:	mov	r1, r0
   3dd08:	mov	r0, #0
   3dd0c:	b	3dd50 <flatcc_json_printer_clear@@Base+0x800>
   3dd10:	orrs	r2, r0, r1
   3dd14:	bxeq	lr
   3dd18:	mov	r3, #0
   3dd1c:	b	3dd38 <flatcc_json_printer_clear@@Base+0x7e8>
   3dd20:	orrs	r2, r0, r1
   3dd24:	bxeq	lr
   3dd28:	ands	r3, r1, #-2147483648	; 0x80000000
   3dd2c:	bpl	3dd38 <flatcc_json_printer_clear@@Base+0x7e8>
   3dd30:	rsbs	r0, r0, #0
   3dd34:	rsc	r1, r1, #0
   3dd38:	movs	ip, r1
   3dd3c:	moveq	ip, r0
   3dd40:	moveq	r1, r0
   3dd44:	moveq	r0, #0
   3dd48:	orr	r3, r3, #1526726656	; 0x5b000000
   3dd4c:	subeq	r3, r3, #268435456	; 0x10000000
   3dd50:	sub	r3, r3, #8388608	; 0x800000
   3dd54:	clz	r2, ip
   3dd58:	subs	r2, r2, #8
   3dd5c:	sub	r3, r3, r2, lsl #23
   3dd60:	blt	3dd80 <flatcc_json_printer_clear@@Base+0x830>
   3dd64:	add	r3, r3, r1, lsl r2
   3dd68:	lsl	ip, r0, r2
   3dd6c:	rsb	r2, r2, #32
   3dd70:	cmp	ip, #-2147483648	; 0x80000000
   3dd74:	adc	r0, r3, r0, lsr r2
   3dd78:	biceq	r0, r0, #1
   3dd7c:	bx	lr
   3dd80:	add	r2, r2, #32
   3dd84:	lsl	ip, r1, r2
   3dd88:	rsb	r2, r2, #32
   3dd8c:	orrs	r0, r0, ip, lsl #1
   3dd90:	adc	r0, r3, r1, lsr r2
   3dd94:	biceq	r0, r0, ip, lsr #31
   3dd98:	bx	lr
   3dd9c:	cmp	r3, #0
   3dda0:	cmpeq	r2, #0
   3dda4:	bne	3ddbc <flatcc_json_printer_clear@@Base+0x86c>
   3dda8:	cmp	r1, #0
   3ddac:	cmpeq	r0, #0
   3ddb0:	mvnne	r1, #0
   3ddb4:	mvnne	r0, #0
   3ddb8:	b	3ddd8 <flatcc_json_printer_clear@@Base+0x888>
   3ddbc:	sub	sp, sp, #8
   3ddc0:	push	{sp, lr}
   3ddc4:	bl	3dde8 <flatcc_json_printer_clear@@Base+0x898>
   3ddc8:	ldr	lr, [sp, #4]
   3ddcc:	add	sp, sp, #8
   3ddd0:	pop	{r2, r3}
   3ddd4:	bx	lr
   3ddd8:	push	{r1, lr}
   3dddc:	mov	r0, #8
   3dde0:	bl	14514 <raise@plt>
   3dde4:	pop	{r1, pc}
   3dde8:	cmp	r1, r3
   3ddec:	push	{r4, r5, r6, r7, r8, r9, lr}
   3ddf0:	cmpeq	r0, r2
   3ddf4:	mov	r4, r0
   3ddf8:	mov	r5, r1
   3ddfc:	ldr	r9, [sp, #28]
   3de00:	movcc	r0, #0
   3de04:	movcc	r1, #0
   3de08:	bcc	3df00 <flatcc_json_printer_clear@@Base+0x9b0>
   3de0c:	cmp	r3, #0
   3de10:	clzeq	ip, r2
   3de14:	clzne	ip, r3
   3de18:	addeq	ip, ip, #32
   3de1c:	cmp	r5, #0
   3de20:	clzeq	r1, r4
   3de24:	addeq	r1, r1, #32
   3de28:	clzne	r1, r5
   3de2c:	sub	ip, ip, r1
   3de30:	sub	lr, ip, #32
   3de34:	lsl	r7, r3, ip
   3de38:	rsb	r8, ip, #32
   3de3c:	orr	r7, r7, r2, lsl lr
   3de40:	orr	r7, r7, r2, lsr r8
   3de44:	lsl	r6, r2, ip
   3de48:	cmp	r5, r7
   3de4c:	cmpeq	r4, r6
   3de50:	movcc	r0, #0
   3de54:	movcc	r1, #0
   3de58:	bcc	3de74 <flatcc_json_printer_clear@@Base+0x924>
   3de5c:	mov	r3, #1
   3de60:	subs	r4, r4, r6
   3de64:	lsl	r1, r3, lr
   3de68:	lsl	r0, r3, ip
   3de6c:	orr	r1, r1, r3, lsr r8
   3de70:	sbc	r5, r5, r7
   3de74:	cmp	ip, #0
   3de78:	beq	3df00 <flatcc_json_printer_clear@@Base+0x9b0>
   3de7c:	lsrs	r3, r7, #1
   3de80:	rrx	r2, r6
   3de84:	mov	r6, ip
   3de88:	b	3deac <flatcc_json_printer_clear@@Base+0x95c>
   3de8c:	subs	r4, r4, r2
   3de90:	sbc	r5, r5, r3
   3de94:	adds	r4, r4, r4
   3de98:	adc	r5, r5, r5
   3de9c:	adds	r4, r4, #1
   3dea0:	adc	r5, r5, #0
   3dea4:	subs	r6, r6, #1
   3dea8:	beq	3dec8 <flatcc_json_printer_clear@@Base+0x978>
   3deac:	cmp	r5, r3
   3deb0:	cmpeq	r4, r2
   3deb4:	bcs	3de8c <flatcc_json_printer_clear@@Base+0x93c>
   3deb8:	adds	r4, r4, r4
   3debc:	adc	r5, r5, r5
   3dec0:	subs	r6, r6, #1
   3dec4:	bne	3deac <flatcc_json_printer_clear@@Base+0x95c>
   3dec8:	lsr	r6, r4, ip
   3decc:	lsr	r7, r5, ip
   3ded0:	orr	r6, r6, r5, lsl r8
   3ded4:	adds	r2, r0, r4
   3ded8:	orr	r6, r6, r5, lsr lr
   3dedc:	adc	r3, r1, r5
   3dee0:	lsl	r1, r7, ip
   3dee4:	orr	r1, r1, r6, lsl lr
   3dee8:	lsl	r0, r6, ip
   3deec:	orr	r1, r1, r6, lsr r8
   3def0:	subs	r0, r2, r0
   3def4:	mov	r4, r6
   3def8:	mov	r5, r7
   3defc:	sbc	r1, r3, r1
   3df00:	cmp	r9, #0
   3df04:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   3df08:	strd	r4, [r9]
   3df0c:	pop	{r4, r5, r6, r7, r8, r9, pc}

0003df10 <__libc_csu_init@@Base>:
   3df10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3df14:	mov	r7, r0
   3df18:	ldr	r6, [pc, #72]	; 3df68 <__libc_csu_init@@Base+0x58>
   3df1c:	ldr	r5, [pc, #72]	; 3df6c <__libc_csu_init@@Base+0x5c>
   3df20:	add	r6, pc, r6
   3df24:	add	r5, pc, r5
   3df28:	sub	r6, r6, r5
   3df2c:	mov	r8, r1
   3df30:	mov	r9, r2
   3df34:	bl	144f4 <raise@plt-0x20>
   3df38:	asrs	r6, r6, #2
   3df3c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3df40:	mov	r4, #0
   3df44:	add	r4, r4, #1
   3df48:	ldr	r3, [r5], #4
   3df4c:	mov	r2, r9
   3df50:	mov	r1, r8
   3df54:	mov	r0, r7
   3df58:	blx	r3
   3df5c:	cmp	r6, r4
   3df60:	bne	3df44 <__libc_csu_init@@Base+0x34>
   3df64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3df68:			; <UNDEFINED> instruction: 0x00016fb8
   3df6c:			; <UNDEFINED> instruction: 0x00016fb0

0003df70 <__libc_csu_fini@@Base>:
   3df70:	bx	lr

Disassembly of section .fini:

0003df74 <.fini>:
   3df74:	push	{r3, lr}
   3df78:	pop	{r3, pc}
