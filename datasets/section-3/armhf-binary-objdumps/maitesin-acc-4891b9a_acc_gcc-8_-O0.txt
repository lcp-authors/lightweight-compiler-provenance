
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

00011868 <.init>:
   11868:	push	{r3, lr}
   1186c:	bl	11a74 <_start@@Base+0x3c>
   11870:	pop	{r3, pc}

Disassembly of section .plt:

00011874 <fdopen@plt-0x14>:
   11874:	push	{lr}		; (str lr, [sp, #-4]!)
   11878:	ldr	lr, [pc, #4]	; 11884 <fdopen@plt-0x4>
   1187c:	add	lr, pc, lr
   11880:	ldr	pc, [lr, #8]!
   11884:	andeq	ip, r1, ip, ror r7

00011888 <fdopen@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #28, 20	; 0x1c000
   11890:	ldr	pc, [ip, #1916]!	; 0x77c

00011894 <raise@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #28, 20	; 0x1c000
   1189c:	ldr	pc, [ip, #1908]!	; 0x774

000118a0 <setbuf@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #28, 20	; 0x1c000
   118a8:	ldr	pc, [ip, #1900]!	; 0x76c

000118ac <fopen@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #28, 20	; 0x1c000
   118b4:	ldr	pc, [ip, #1892]!	; 0x764

000118b8 <free@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #28, 20	; 0x1c000
   118c0:	ldr	pc, [ip, #1884]!	; 0x75c

000118c4 <memcpy@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #28, 20	; 0x1c000
   118cc:	ldr	pc, [ip, #1876]!	; 0x754

000118d0 <ftell@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #28, 20	; 0x1c000
   118d8:	ldr	pc, [ip, #1868]!	; 0x74c

000118dc <fwrite@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #28, 20	; 0x1c000
   118e4:	ldr	pc, [ip, #1860]!	; 0x744

000118e8 <strcpy@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #28, 20	; 0x1c000
   118f0:	ldr	pc, [ip, #1852]!	; 0x73c

000118f4 <fread@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #28, 20	; 0x1c000
   118fc:	ldr	pc, [ip, #1844]!	; 0x734

00011900 <open64@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #28, 20	; 0x1c000
   11908:	ldr	pc, [ip, #1836]!	; 0x72c

0001190c <getenv@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #28, 20	; 0x1c000
   11914:	ldr	pc, [ip, #1828]!	; 0x724

00011918 <malloc@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #28, 20	; 0x1c000
   11920:	ldr	pc, [ip, #1820]!	; 0x71c

00011924 <__libc_start_main@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #28, 20	; 0x1c000
   1192c:	ldr	pc, [ip, #1812]!	; 0x714

00011930 <__gmon_start__@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #28, 20	; 0x1c000
   11938:	ldr	pc, [ip, #1804]!	; 0x70c

0001193c <getpid@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #28, 20	; 0x1c000
   11944:	ldr	pc, [ip, #1796]!	; 0x704

00011948 <exit@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #28, 20	; 0x1c000
   11950:	ldr	pc, [ip, #1788]!	; 0x6fc

00011954 <strlen@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #28, 20	; 0x1c000
   1195c:	ldr	pc, [ip, #1780]!	; 0x6f4

00011960 <getopt@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #28, 20	; 0x1c000
   11968:	ldr	pc, [ip, #1772]!	; 0x6ec

0001196c <fprintf@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #28, 20	; 0x1c000
   11974:	ldr	pc, [ip, #1764]!	; 0x6e4

00011978 <__errno_location@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #28, 20	; 0x1c000
   11980:	ldr	pc, [ip, #1756]!	; 0x6dc

00011984 <mkdir@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #28, 20	; 0x1c000
   1198c:	ldr	pc, [ip, #1748]!	; 0x6d4

00011990 <memset@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #28, 20	; 0x1c000
   11998:	ldr	pc, [ip, #1740]!	; 0x6cc

0001199c <strncpy@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #28, 20	; 0x1c000
   119a4:	ldr	pc, [ip, #1732]!	; 0x6c4

000119a8 <access@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #28, 20	; 0x1c000
   119b0:	ldr	pc, [ip, #1724]!	; 0x6bc

000119b4 <fclose@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #28, 20	; 0x1c000
   119bc:	ldr	pc, [ip, #1716]!	; 0x6b4

000119c0 <strnlen@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #28, 20	; 0x1c000
   119c8:	ldr	pc, [ip, #1708]!	; 0x6ac

000119cc <fcntl64@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #28, 20	; 0x1c000
   119d4:	ldr	pc, [ip, #1700]!	; 0x6a4

000119d8 <vfprintf@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #28, 20	; 0x1c000
   119e0:	ldr	pc, [ip, #1692]!	; 0x69c

000119e4 <fputc@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #28, 20	; 0x1c000
   119ec:	ldr	pc, [ip, #1684]!	; 0x694

000119f0 <atoi@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #28, 20	; 0x1c000
   119f8:	ldr	pc, [ip, #1676]!	; 0x68c

000119fc <fopen64@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #28, 20	; 0x1c000
   11a04:	ldr	pc, [ip, #1668]!	; 0x684

00011a08 <fseek@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #28, 20	; 0x1c000
   11a10:	ldr	pc, [ip, #1660]!	; 0x67c

00011a14 <strncmp@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #28, 20	; 0x1c000
   11a1c:	ldr	pc, [ip, #1652]!	; 0x674

00011a20 <abort@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #28, 20	; 0x1c000
   11a28:	ldr	pc, [ip, #1644]!	; 0x66c

00011a2c <close@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #28, 20	; 0x1c000
   11a34:	ldr	pc, [ip, #1636]!	; 0x664

Disassembly of section .text:

00011a38 <_start@@Base>:
   11a38:	mov	fp, #0
   11a3c:	mov	lr, #0
   11a40:	pop	{r1}		; (ldr r1, [sp], #4)
   11a44:	mov	r2, sp
   11a48:	push	{r2}		; (str r2, [sp, #-4]!)
   11a4c:	push	{r0}		; (str r0, [sp, #-4]!)
   11a50:	ldr	ip, [pc, #16]	; 11a68 <_start@@Base+0x30>
   11a54:	push	{ip}		; (str ip, [sp, #-4]!)
   11a58:	ldr	r0, [pc, #12]	; 11a6c <_start@@Base+0x34>
   11a5c:	ldr	r3, [pc, #12]	; 11a70 <_start@@Base+0x38>
   11a60:	bl	11924 <__libc_start_main@plt>
   11a64:	bl	11a20 <abort@plt>
   11a68:	andeq	ip, r1, ip, ror #17
   11a6c:	andeq	r2, r1, ip, lsr r2
   11a70:	andeq	ip, r1, ip, lsl #17
   11a74:	ldr	r3, [pc, #20]	; 11a90 <_start@@Base+0x58>
   11a78:	ldr	r2, [pc, #20]	; 11a94 <_start@@Base+0x5c>
   11a7c:	add	r3, pc, r3
   11a80:	ldr	r2, [r3, r2]
   11a84:	cmp	r2, #0
   11a88:	bxeq	lr
   11a8c:	b	11930 <__gmon_start__@plt>
   11a90:	andeq	ip, r1, ip, ror r5
   11a94:	andeq	r0, r0, r4, lsr #1
   11a98:	ldr	r0, [pc, #24]	; 11ab8 <_start@@Base+0x80>
   11a9c:	ldr	r3, [pc, #24]	; 11abc <_start@@Base+0x84>
   11aa0:	cmp	r3, r0
   11aa4:	bxeq	lr
   11aa8:	ldr	r3, [pc, #16]	; 11ac0 <_start@@Base+0x88>
   11aac:	cmp	r3, #0
   11ab0:	bxeq	lr
   11ab4:	bx	r3
   11ab8:	muleq	r2, ip, sl
   11abc:	muleq	r2, ip, sl
   11ac0:	andeq	r0, r0, r0
   11ac4:	ldr	r0, [pc, #36]	; 11af0 <_start@@Base+0xb8>
   11ac8:	ldr	r1, [pc, #36]	; 11af4 <_start@@Base+0xbc>
   11acc:	sub	r1, r1, r0
   11ad0:	asr	r1, r1, #2
   11ad4:	add	r1, r1, r1, lsr #31
   11ad8:	asrs	r1, r1, #1
   11adc:	bxeq	lr
   11ae0:	ldr	r3, [pc, #16]	; 11af8 <_start@@Base+0xc0>
   11ae4:	cmp	r3, #0
   11ae8:	bxeq	lr
   11aec:	bx	r3
   11af0:	muleq	r2, ip, sl
   11af4:	muleq	r2, ip, sl
   11af8:	andeq	r0, r0, r0
   11afc:	push	{r4, lr}
   11b00:	ldr	r4, [pc, #24]	; 11b20 <_start@@Base+0xe8>
   11b04:	ldrb	r3, [r4]
   11b08:	cmp	r3, #0
   11b0c:	popne	{r4, pc}
   11b10:	bl	11a98 <_start@@Base+0x60>
   11b14:	mov	r3, #1
   11b18:	strb	r3, [r4]
   11b1c:	pop	{r4, pc}
   11b20:	andeq	lr, r2, r0, lsr #21
   11b24:	b	11ac4 <_start@@Base+0x8c>

00011b28 <load_file@@Base>:
   11b28:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11b2c:	strd	r6, [sp, #8]
   11b30:	strd	r8, [sp, #16]
   11b34:	strd	sl, [sp, #24]
   11b38:	str	lr, [sp, #32]
   11b3c:	add	fp, sp, #32
   11b40:	sub	sp, sp, #124	; 0x7c
   11b44:	str	r0, [fp, #-56]	; 0xffffffc8
   11b48:	ldr	sl, [pc, #996]	; 11f34 <load_file@@Base+0x40c>
   11b4c:	add	sl, pc, sl
   11b50:	ldr	r3, [pc, #992]	; 11f38 <load_file@@Base+0x410>
   11b54:	add	r3, pc, r3
   11b58:	ldrd	r2, [r3]
   11b5c:	adds	r4, r2, #1
   11b60:	adc	r5, r3, #0
   11b64:	ldr	r3, [pc, #976]	; 11f3c <load_file@@Base+0x414>
   11b68:	add	r3, pc, r3
   11b6c:	strd	r4, [r3]
   11b70:	mov	r3, #0
   11b74:	str	r3, [fp, #-40]	; 0xffffffd8
   11b78:	ldr	r3, [pc, #960]	; 11f40 <load_file@@Base+0x418>
   11b7c:	add	r3, pc, r3
   11b80:	mov	r1, r3
   11b84:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11b88:	bl	118ac <fopen@plt>
   11b8c:	str	r0, [fp, #-44]	; 0xffffffd4
   11b90:	ldr	r3, [pc, #940]	; 11f44 <load_file@@Base+0x41c>
   11b94:	add	r3, pc, r3
   11b98:	ldrd	r2, [r3, #8]
   11b9c:	adds	r6, r2, #1
   11ba0:	adc	r7, r3, #0
   11ba4:	ldr	r3, [pc, #924]	; 11f48 <load_file@@Base+0x420>
   11ba8:	add	r3, pc, r3
   11bac:	strd	r6, [r3, #8]
   11bb0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11bb4:	cmp	r3, #0
   11bb8:	beq	11ee0 <load_file@@Base+0x3b8>
   11bbc:	ldr	r3, [pc, #904]	; 11f4c <load_file@@Base+0x424>
   11bc0:	add	r3, pc, r3
   11bc4:	ldrd	r2, [r3, #16]
   11bc8:	adds	r8, r2, #1
   11bcc:	adc	r9, r3, #0
   11bd0:	ldr	r3, [pc, #888]	; 11f50 <load_file@@Base+0x428>
   11bd4:	add	r3, pc, r3
   11bd8:	strd	r8, [r3, #16]
   11bdc:	mov	r2, #2
   11be0:	mov	r1, #0
   11be4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11be8:	bl	11a08 <fseek@plt>
   11bec:	mov	r1, r0
   11bf0:	ldr	r3, [pc, #860]	; 11f54 <load_file@@Base+0x42c>
   11bf4:	add	r3, pc, r3
   11bf8:	ldrd	r2, [r3, #24]
   11bfc:	adds	r0, r2, #1
   11c00:	str	r0, [fp, #-68]	; 0xffffffbc
   11c04:	adc	r3, r3, #0
   11c08:	str	r3, [fp, #-64]	; 0xffffffc0
   11c0c:	ldr	r3, [pc, #836]	; 11f58 <load_file@@Base+0x430>
   11c10:	add	r3, pc, r3
   11c14:	ldrd	r4, [fp, #-68]	; 0xffffffbc
   11c18:	strd	r4, [r3, #24]
   11c1c:	cmp	r1, #0
   11c20:	bne	11ed8 <load_file@@Base+0x3b0>
   11c24:	ldr	r3, [pc, #816]	; 11f5c <load_file@@Base+0x434>
   11c28:	add	r3, pc, r3
   11c2c:	ldrd	r2, [r3, #32]
   11c30:	adds	r1, r2, #1
   11c34:	str	r1, [fp, #-76]	; 0xffffffb4
   11c38:	adc	r3, r3, #0
   11c3c:	str	r3, [fp, #-72]	; 0xffffffb8
   11c40:	ldr	r3, [pc, #792]	; 11f60 <load_file@@Base+0x438>
   11c44:	add	r3, pc, r3
   11c48:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   11c4c:	strd	r0, [r3, #32]
   11c50:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11c54:	bl	118d0 <ftell@plt>
   11c58:	str	r0, [fp, #-48]	; 0xffffffd0
   11c5c:	ldr	r3, [pc, #768]	; 11f64 <load_file@@Base+0x43c>
   11c60:	add	r3, pc, r3
   11c64:	ldrd	r2, [r3, #40]	; 0x28
   11c68:	adds	r1, r2, #1
   11c6c:	str	r1, [fp, #-84]	; 0xffffffac
   11c70:	adc	r3, r3, #0
   11c74:	str	r3, [fp, #-80]	; 0xffffffb0
   11c78:	ldr	r3, [pc, #744]	; 11f68 <load_file@@Base+0x440>
   11c7c:	add	r3, pc, r3
   11c80:	ldrd	r0, [fp, #-84]	; 0xffffffac
   11c84:	strd	r0, [r3, #40]	; 0x28
   11c88:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11c8c:	cmn	r3, #1
   11c90:	bne	11d14 <load_file@@Base+0x1ec>
   11c94:	ldr	r3, [pc, #720]	; 11f6c <load_file@@Base+0x444>
   11c98:	add	r3, pc, r3
   11c9c:	ldrd	r2, [r3, #48]	; 0x30
   11ca0:	adds	r1, r2, #1
   11ca4:	str	r1, [fp, #-92]	; 0xffffffa4
   11ca8:	adc	r3, r3, #0
   11cac:	str	r3, [fp, #-88]	; 0xffffffa8
   11cb0:	ldr	r3, [pc, #696]	; 11f70 <load_file@@Base+0x448>
   11cb4:	add	r3, pc, r3
   11cb8:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   11cbc:	strd	r0, [r3, #48]	; 0x30
   11cc0:	ldr	r3, [pc, #684]	; 11f74 <load_file@@Base+0x44c>
   11cc4:	ldr	r3, [sl, r3]
   11cc8:	ldr	r3, [r3]
   11ccc:	mov	r2, #51	; 0x33
   11cd0:	mov	r1, #1
   11cd4:	ldr	r0, [pc, #668]	; 11f78 <load_file@@Base+0x450>
   11cd8:	add	r0, pc, r0
   11cdc:	bl	118dc <fwrite@plt>
   11ce0:	ldr	r3, [pc, #660]	; 11f7c <load_file@@Base+0x454>
   11ce4:	add	r3, pc, r3
   11ce8:	ldrd	r2, [r3, #56]	; 0x38
   11cec:	adds	r1, r2, #1
   11cf0:	str	r1, [fp, #-100]	; 0xffffff9c
   11cf4:	adc	r3, r3, #0
   11cf8:	str	r3, [fp, #-96]	; 0xffffffa0
   11cfc:	ldr	r3, [pc, #636]	; 11f80 <load_file@@Base+0x458>
   11d00:	add	r3, pc, r3
   11d04:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   11d08:	strd	r0, [r3, #56]	; 0x38
   11d0c:	mov	r0, #1
   11d10:	bl	11948 <exit@plt>
   11d14:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11d18:	add	r3, r3, #1
   11d1c:	mov	r0, r3
   11d20:	bl	11918 <malloc@plt>
   11d24:	mov	r3, r0
   11d28:	str	r3, [fp, #-40]	; 0xffffffd8
   11d2c:	mov	r2, #0
   11d30:	mov	r1, #0
   11d34:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11d38:	bl	11a08 <fseek@plt>
   11d3c:	mov	r1, r0
   11d40:	ldr	r3, [pc, #572]	; 11f84 <load_file@@Base+0x45c>
   11d44:	add	r3, pc, r3
   11d48:	ldrd	r2, [r3, #64]	; 0x40
   11d4c:	adds	r0, r2, #1
   11d50:	str	r0, [fp, #-108]	; 0xffffff94
   11d54:	adc	r3, r3, #0
   11d58:	str	r3, [fp, #-104]	; 0xffffff98
   11d5c:	ldr	r3, [pc, #548]	; 11f88 <load_file@@Base+0x460>
   11d60:	add	r3, pc, r3
   11d64:	ldrd	r4, [fp, #-108]	; 0xffffff94
   11d68:	strd	r4, [r3, #64]	; 0x40
   11d6c:	cmp	r1, #0
   11d70:	beq	11df4 <load_file@@Base+0x2cc>
   11d74:	ldr	r3, [pc, #528]	; 11f8c <load_file@@Base+0x464>
   11d78:	add	r3, pc, r3
   11d7c:	ldrd	r2, [r3, #72]	; 0x48
   11d80:	adds	r1, r2, #1
   11d84:	str	r1, [fp, #-116]	; 0xffffff8c
   11d88:	adc	r3, r3, #0
   11d8c:	str	r3, [fp, #-112]	; 0xffffff90
   11d90:	ldr	r3, [pc, #504]	; 11f90 <load_file@@Base+0x468>
   11d94:	add	r3, pc, r3
   11d98:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   11d9c:	strd	r0, [r3, #72]	; 0x48
   11da0:	ldr	r3, [pc, #460]	; 11f74 <load_file@@Base+0x44c>
   11da4:	ldr	r3, [sl, r3]
   11da8:	ldr	r3, [r3]
   11dac:	mov	r2, #49	; 0x31
   11db0:	mov	r1, #1
   11db4:	ldr	r0, [pc, #472]	; 11f94 <load_file@@Base+0x46c>
   11db8:	add	r0, pc, r0
   11dbc:	bl	118dc <fwrite@plt>
   11dc0:	ldr	r3, [pc, #464]	; 11f98 <load_file@@Base+0x470>
   11dc4:	add	r3, pc, r3
   11dc8:	ldrd	r2, [r3, #80]	; 0x50
   11dcc:	adds	r1, r2, #1
   11dd0:	str	r1, [fp, #-124]	; 0xffffff84
   11dd4:	adc	r3, r3, #0
   11dd8:	str	r3, [fp, #-120]	; 0xffffff88
   11ddc:	ldr	r3, [pc, #440]	; 11f9c <load_file@@Base+0x474>
   11de0:	add	r3, pc, r3
   11de4:	ldrd	r0, [fp, #-124]	; 0xffffff84
   11de8:	strd	r0, [r3, #80]	; 0x50
   11dec:	mov	r0, #1
   11df0:	bl	11948 <exit@plt>
   11df4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   11df8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11dfc:	mov	r1, #1
   11e00:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11e04:	bl	118f4 <fread@plt>
   11e08:	str	r0, [fp, #-52]	; 0xffffffcc
   11e0c:	ldr	r3, [pc, #396]	; 11fa0 <load_file@@Base+0x478>
   11e10:	add	r3, pc, r3
   11e14:	ldrd	r2, [r3, #88]	; 0x58
   11e18:	adds	r1, r2, #1
   11e1c:	str	r1, [fp, #-132]	; 0xffffff7c
   11e20:	adc	r3, r3, #0
   11e24:	str	r3, [fp, #-128]	; 0xffffff80
   11e28:	ldr	r3, [pc, #372]	; 11fa4 <load_file@@Base+0x47c>
   11e2c:	add	r3, pc, r3
   11e30:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   11e34:	strd	r0, [r3, #88]	; 0x58
   11e38:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11e3c:	cmp	r3, #0
   11e40:	bne	11e98 <load_file@@Base+0x370>
   11e44:	ldr	r3, [pc, #296]	; 11f74 <load_file@@Base+0x44c>
   11e48:	ldr	r3, [sl, r3]
   11e4c:	ldr	r3, [r3]
   11e50:	ldr	r2, [fp, #-56]	; 0xffffffc8
   11e54:	ldr	r1, [pc, #332]	; 11fa8 <load_file@@Base+0x480>
   11e58:	add	r1, pc, r1
   11e5c:	mov	r0, r3
   11e60:	bl	1196c <fprintf@plt>
   11e64:	ldr	r3, [pc, #320]	; 11fac <load_file@@Base+0x484>
   11e68:	add	r3, pc, r3
   11e6c:	ldrd	r2, [r3, #96]	; 0x60
   11e70:	adds	r1, r2, #1
   11e74:	str	r1, [fp, #-140]	; 0xffffff74
   11e78:	adc	r3, r3, #0
   11e7c:	str	r3, [fp, #-136]	; 0xffffff78
   11e80:	ldr	r3, [pc, #296]	; 11fb0 <load_file@@Base+0x488>
   11e84:	add	r3, pc, r3
   11e88:	ldrd	r0, [fp, #-140]	; 0xffffff74
   11e8c:	strd	r0, [r3, #96]	; 0x60
   11e90:	mov	r0, #1
   11e94:	bl	11948 <exit@plt>
   11e98:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11e9c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11ea0:	add	r3, r2, r3
   11ea4:	mov	r2, #0
   11ea8:	strb	r2, [r3]
   11eac:	ldr	r3, [pc, #256]	; 11fb4 <load_file@@Base+0x48c>
   11eb0:	add	r3, pc, r3
   11eb4:	ldrd	r2, [r3, #104]	; 0x68
   11eb8:	adds	r1, r2, #1
   11ebc:	str	r1, [fp, #-148]	; 0xffffff6c
   11ec0:	adc	r3, r3, #0
   11ec4:	str	r3, [fp, #-144]	; 0xffffff70
   11ec8:	ldr	r3, [pc, #232]	; 11fb8 <load_file@@Base+0x490>
   11ecc:	add	r3, pc, r3
   11ed0:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   11ed4:	strd	r0, [r3, #104]	; 0x68
   11ed8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11edc:	bl	119b4 <fclose@plt>
   11ee0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11ee4:	ldr	r3, [pc, #208]	; 11fbc <load_file@@Base+0x494>
   11ee8:	add	r3, pc, r3
   11eec:	ldrd	r2, [r3, #112]	; 0x70
   11ef0:	adds	r0, r2, #1
   11ef4:	str	r0, [fp, #-156]	; 0xffffff64
   11ef8:	adc	r3, r3, #0
   11efc:	str	r3, [fp, #-152]	; 0xffffff68
   11f00:	ldr	r3, [pc, #184]	; 11fc0 <load_file@@Base+0x498>
   11f04:	add	r3, pc, r3
   11f08:	ldrd	r4, [fp, #-156]	; 0xffffff64
   11f0c:	strd	r4, [r3, #112]	; 0x70
   11f10:	mov	r3, r1
   11f14:	mov	r0, r3
   11f18:	sub	sp, fp, #32
   11f1c:	ldrd	r4, [sp]
   11f20:	ldrd	r6, [sp, #8]
   11f24:	ldrd	r8, [sp, #16]
   11f28:	ldrd	sl, [sp, #24]
   11f2c:	add	sp, sp, #32
   11f30:	pop	{pc}		; (ldr pc, [sp], #4)
   11f34:	andeq	ip, r1, ip, lsr #9
   11f38:	ldrdeq	ip, [r1], -r4
   11f3c:	andeq	ip, r1, r0, asr #31
   11f40:	andeq	sl, r0, r8, ror sp
   11f44:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11f48:	andeq	ip, r1, r0, lsl #31
   11f4c:	andeq	ip, r1, r8, ror #30
   11f50:	andeq	ip, r1, r4, asr pc
   11f54:	andeq	ip, r1, r4, lsr pc
   11f58:	andeq	ip, r1, r8, lsl pc
   11f5c:	andeq	ip, r1, r0, lsl #30
   11f60:	andeq	ip, r1, r4, ror #29
   11f64:	andeq	ip, r1, r8, asr #29
   11f68:	andeq	ip, r1, ip, lsr #29
   11f6c:	muleq	r1, r0, lr
   11f70:	andeq	ip, r1, r4, ror lr
   11f74:	andeq	r0, r0, r0, lsr #1
   11f78:	andeq	sl, r0, r0, lsr #24
   11f7c:	andeq	ip, r1, r4, asr #28
   11f80:	andeq	ip, r1, r8, lsr #28
   11f84:	andeq	ip, r1, r4, ror #27
   11f88:	andeq	ip, r1, r8, asr #27
   11f8c:			; <UNDEFINED> instruction: 0x0001cdb0
   11f90:	muleq	r1, r4, sp
   11f94:	andeq	sl, r0, r4, ror fp
   11f98:	andeq	ip, r1, r4, ror #26
   11f9c:	andeq	ip, r1, r8, asr #26
   11fa0:	andeq	ip, r1, r8, lsl sp
   11fa4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   11fa8:	andeq	sl, r0, r8, lsl #22
   11fac:	andeq	ip, r1, r0, asr #25
   11fb0:	andeq	ip, r1, r4, lsr #25
   11fb4:	andeq	ip, r1, r8, ror ip
   11fb8:	andeq	ip, r1, ip, asr ip
   11fbc:	andeq	ip, r1, r0, asr #24
   11fc0:	andeq	ip, r1, r4, lsr #24

00011fc4 <my_main@@Base>:
   11fc4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11fc8:	strd	r6, [sp, #8]
   11fcc:	strd	r8, [sp, #16]
   11fd0:	str	fp, [sp, #24]
   11fd4:	str	lr, [sp, #28]
   11fd8:	add	fp, sp, #28
   11fdc:	sub	sp, sp, #96	; 0x60
   11fe0:	str	r0, [fp, #-72]	; 0xffffffb8
   11fe4:	str	r1, [fp, #-76]	; 0xffffffb4
   11fe8:	ldr	r3, [pc, #516]	; 121f4 <my_main@@Base+0x230>
   11fec:	add	r3, pc, r3
   11ff0:	ldrd	r2, [r3]
   11ff4:	adds	r4, r2, #1
   11ff8:	adc	r5, r3, #0
   11ffc:	ldr	r3, [pc, #500]	; 121f8 <my_main@@Base+0x234>
   12000:	add	r3, pc, r3
   12004:	strd	r4, [r3]
   12008:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1200c:	bl	11b28 <load_file@@Base>
   12010:	str	r0, [fp, #-32]	; 0xffffffe0
   12014:	ldr	r3, [pc, #480]	; 121fc <my_main@@Base+0x238>
   12018:	add	r3, pc, r3
   1201c:	ldrd	r2, [r3, #8]
   12020:	adds	r6, r2, #1
   12024:	adc	r7, r3, #0
   12028:	ldr	r3, [pc, #464]	; 12200 <my_main@@Base+0x23c>
   1202c:	add	r3, pc, r3
   12030:	strd	r6, [r3, #8]
   12034:	sub	r3, fp, #44	; 0x2c
   12038:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1203c:	mov	r0, r3
   12040:	bl	12ff4 <init_lexer@@Base>
   12044:	ldr	r3, [pc, #440]	; 12204 <my_main@@Base+0x240>
   12048:	add	r3, pc, r3
   1204c:	ldrd	r2, [r3, #16]
   12050:	adds	r8, r2, #1
   12054:	adc	r9, r3, #0
   12058:	ldr	r3, [pc, #424]	; 12208 <my_main@@Base+0x244>
   1205c:	add	r3, pc, r3
   12060:	strd	r8, [r3, #16]
   12064:	sub	r3, fp, #44	; 0x2c
   12068:	sub	r2, fp, #48	; 0x30
   1206c:	mov	r1, r3
   12070:	mov	r0, r2
   12074:	bl	16d6c <init_grammar@@Base>
   12078:	ldr	r3, [pc, #396]	; 1220c <my_main@@Base+0x248>
   1207c:	add	r3, pc, r3
   12080:	ldrd	r2, [r3, #24]
   12084:	adds	r1, r2, #1
   12088:	str	r1, [fp, #-84]	; 0xffffffac
   1208c:	adc	r3, r3, #0
   12090:	str	r3, [fp, #-80]	; 0xffffffb0
   12094:	ldr	r3, [pc, #372]	; 12210 <my_main@@Base+0x24c>
   12098:	add	r3, pc, r3
   1209c:	ldrd	r0, [fp, #-84]	; 0xffffffac
   120a0:	strd	r0, [r3, #24]
   120a4:	sub	r1, fp, #48	; 0x30
   120a8:	sub	r3, fp, #68	; 0x44
   120ac:	ldr	r2, [fp, #-76]	; 0xffffffb4
   120b0:	mov	r0, r3
   120b4:	bl	18e0c <init_generator@@Base>
   120b8:	ldr	r3, [pc, #340]	; 12214 <my_main@@Base+0x250>
   120bc:	add	r3, pc, r3
   120c0:	ldrd	r2, [r3, #32]
   120c4:	adds	r1, r2, #1
   120c8:	str	r1, [fp, #-92]	; 0xffffffa4
   120cc:	adc	r3, r3, #0
   120d0:	str	r3, [fp, #-88]	; 0xffffffa8
   120d4:	ldr	r3, [pc, #316]	; 12218 <my_main@@Base+0x254>
   120d8:	add	r3, pc, r3
   120dc:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   120e0:	strd	r0, [r3, #32]
   120e4:	sub	r3, fp, #68	; 0x44
   120e8:	mov	r0, r3
   120ec:	bl	18f74 <generate_code@@Base>
   120f0:	ldr	r3, [pc, #292]	; 1221c <my_main@@Base+0x258>
   120f4:	add	r3, pc, r3
   120f8:	ldrd	r2, [r3, #40]	; 0x28
   120fc:	adds	r1, r2, #1
   12100:	str	r1, [fp, #-100]	; 0xffffff9c
   12104:	adc	r3, r3, #0
   12108:	str	r3, [fp, #-96]	; 0xffffffa0
   1210c:	ldr	r3, [pc, #268]	; 12220 <my_main@@Base+0x25c>
   12110:	add	r3, pc, r3
   12114:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   12118:	strd	r0, [r3, #40]	; 0x28
   1211c:	sub	r3, fp, #68	; 0x44
   12120:	mov	r0, r3
   12124:	bl	18edc <destroy_generator@@Base>
   12128:	ldr	r3, [pc, #244]	; 12224 <my_main@@Base+0x260>
   1212c:	add	r3, pc, r3
   12130:	ldrd	r2, [r3, #48]	; 0x30
   12134:	adds	r1, r2, #1
   12138:	str	r1, [fp, #-108]	; 0xffffff94
   1213c:	adc	r3, r3, #0
   12140:	str	r3, [fp, #-104]	; 0xffffff98
   12144:	ldr	r3, [pc, #220]	; 12228 <my_main@@Base+0x264>
   12148:	add	r3, pc, r3
   1214c:	ldrd	r0, [fp, #-108]	; 0xffffff94
   12150:	strd	r0, [r3, #48]	; 0x30
   12154:	sub	r3, fp, #48	; 0x30
   12158:	mov	r0, r3
   1215c:	bl	16dd0 <destroy_grammar@@Base>
   12160:	ldr	r3, [pc, #196]	; 1222c <my_main@@Base+0x268>
   12164:	add	r3, pc, r3
   12168:	ldrd	r2, [r3, #56]	; 0x38
   1216c:	adds	r1, r2, #1
   12170:	str	r1, [fp, #-116]	; 0xffffff8c
   12174:	adc	r3, r3, #0
   12178:	str	r3, [fp, #-112]	; 0xffffff90
   1217c:	ldr	r3, [pc, #172]	; 12230 <my_main@@Base+0x26c>
   12180:	add	r3, pc, r3
   12184:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   12188:	strd	r0, [r3, #56]	; 0x38
   1218c:	sub	r3, fp, #44	; 0x2c
   12190:	mov	r0, r3
   12194:	bl	13070 <destroy_lexer@@Base>
   12198:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1219c:	bl	118b8 <free@plt>
   121a0:	mov	r1, #0
   121a4:	ldr	r3, [pc, #136]	; 12234 <my_main@@Base+0x270>
   121a8:	add	r3, pc, r3
   121ac:	ldrd	r2, [r3, #64]	; 0x40
   121b0:	adds	r0, r2, #1
   121b4:	str	r0, [fp, #-124]	; 0xffffff84
   121b8:	adc	r3, r3, #0
   121bc:	str	r3, [fp, #-120]	; 0xffffff88
   121c0:	ldr	r3, [pc, #112]	; 12238 <my_main@@Base+0x274>
   121c4:	add	r3, pc, r3
   121c8:	ldrd	r4, [fp, #-124]	; 0xffffff84
   121cc:	strd	r4, [r3, #64]	; 0x40
   121d0:	mov	r3, r1
   121d4:	mov	r0, r3
   121d8:	sub	sp, fp, #28
   121dc:	ldrd	r4, [sp]
   121e0:	ldrd	r6, [sp, #8]
   121e4:	ldrd	r8, [sp, #16]
   121e8:	ldr	fp, [sp, #24]
   121ec:	add	sp, sp, #28
   121f0:	pop	{pc}		; (ldr pc, [sp], #4)
   121f4:	strdeq	ip, [r1], -r4
   121f8:	andeq	ip, r1, r0, ror #21
   121fc:	andeq	ip, r1, r8, asr #21
   12200:			; <UNDEFINED> instruction: 0x0001cab4
   12204:	muleq	r1, r8, sl
   12208:	andeq	ip, r1, r4, lsl #21
   1220c:	andeq	ip, r1, r4, ror #20
   12210:	andeq	ip, r1, r8, asr #20
   12214:	andeq	ip, r1, r4, lsr #20
   12218:	andeq	ip, r1, r8, lsl #20
   1221c:	andeq	ip, r1, ip, ror #19
   12220:	ldrdeq	ip, [r1], -r0
   12224:			; <UNDEFINED> instruction: 0x0001c9b4
   12228:	muleq	r1, r8, r9
   1222c:	andeq	ip, r1, ip, ror r9
   12230:	andeq	ip, r1, r0, ror #18
   12234:	andeq	ip, r1, r8, lsr r9
   12238:	andeq	ip, r1, ip, lsl r9

0001223c <main@@Base>:
   1223c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12240:	str	r6, [sp, #8]
   12244:	strd	r8, [sp, #12]
   12248:	str	fp, [sp, #20]
   1224c:	str	lr, [sp, #24]
   12250:	add	fp, sp, #24
   12254:	sub	sp, sp, #68	; 0x44
   12258:	str	r0, [fp, #-40]	; 0xffffffd8
   1225c:	str	r1, [fp, #-44]	; 0xffffffd4
   12260:	ldr	r6, [pc, #592]	; 124b8 <main@@Base+0x27c>
   12264:	add	r6, pc, r6
   12268:	ldr	r3, [pc, #588]	; 124bc <main@@Base+0x280>
   1226c:	add	r3, pc, r3
   12270:	ldrd	r2, [r3]
   12274:	adds	r4, r2, #1
   12278:	adc	r5, r3, #0
   1227c:	ldr	r3, [pc, #572]	; 124c0 <main@@Base+0x284>
   12280:	add	r3, pc, r3
   12284:	strd	r4, [r3]
   12288:	mov	r3, #0
   1228c:	str	r3, [fp, #-32]	; 0xffffffe0
   12290:	mov	r3, #0
   12294:	str	r3, [fp, #-36]	; 0xffffffdc
   12298:	b	122e8 <main@@Base+0xac>
   1229c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   122a0:	cmp	r3, #111	; 0x6f
   122a4:	bne	122e8 <main@@Base+0xac>
   122a8:	ldr	r3, [pc, #532]	; 124c4 <main@@Base+0x288>
   122ac:	add	r3, pc, r3
   122b0:	ldrd	r2, [r3, #8]
   122b4:	adds	r1, r2, #1
   122b8:	str	r1, [fp, #-52]	; 0xffffffcc
   122bc:	adc	r3, r3, #0
   122c0:	str	r3, [fp, #-48]	; 0xffffffd0
   122c4:	ldr	r3, [pc, #508]	; 124c8 <main@@Base+0x28c>
   122c8:	add	r3, pc, r3
   122cc:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   122d0:	strd	r0, [r3, #8]
   122d4:	ldr	r3, [pc, #496]	; 124cc <main@@Base+0x290>
   122d8:	ldr	r3, [r6, r3]
   122dc:	ldr	r3, [r3]
   122e0:	str	r3, [fp, #-32]	; 0xffffffe0
   122e4:	nop	{0}
   122e8:	ldr	r3, [pc, #480]	; 124d0 <main@@Base+0x294>
   122ec:	add	r3, pc, r3
   122f0:	mov	r2, r3
   122f4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   122f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   122fc:	bl	11960 <getopt@plt>
   12300:	str	r0, [fp, #-36]	; 0xffffffdc
   12304:	ldr	r3, [pc, #456]	; 124d4 <main@@Base+0x298>
   12308:	add	r3, pc, r3
   1230c:	ldrd	r2, [r3, #16]
   12310:	adds	r1, r2, #1
   12314:	str	r1, [fp, #-60]	; 0xffffffc4
   12318:	adc	r3, r3, #0
   1231c:	str	r3, [fp, #-56]	; 0xffffffc8
   12320:	ldr	r3, [pc, #432]	; 124d8 <main@@Base+0x29c>
   12324:	add	r3, pc, r3
   12328:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   1232c:	strd	r0, [r3, #16]
   12330:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12334:	cmn	r3, #1
   12338:	bne	1229c <main@@Base+0x60>
   1233c:	ldr	r3, [pc, #408]	; 124dc <main@@Base+0x2a0>
   12340:	ldr	r3, [r6, r3]
   12344:	ldr	r3, [r3]
   12348:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1234c:	cmp	r2, r3
   12350:	ble	12420 <main@@Base+0x1e4>
   12354:	ldr	r3, [pc, #388]	; 124e0 <main@@Base+0x2a4>
   12358:	add	r3, pc, r3
   1235c:	ldrd	r2, [r3, #24]
   12360:	adds	r1, r2, #1
   12364:	str	r1, [fp, #-68]	; 0xffffffbc
   12368:	adc	r3, r3, #0
   1236c:	str	r3, [fp, #-64]	; 0xffffffc0
   12370:	ldr	r3, [pc, #364]	; 124e4 <main@@Base+0x2a8>
   12374:	add	r3, pc, r3
   12378:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   1237c:	strd	r0, [r3, #24]
   12380:	ldr	r3, [pc, #340]	; 124dc <main@@Base+0x2a0>
   12384:	ldr	r3, [r6, r3]
   12388:	ldr	r3, [r3]
   1238c:	lsl	r3, r3, #2
   12390:	ldr	r2, [fp, #-44]	; 0xffffffd4
   12394:	add	r3, r2, r3
   12398:	ldr	r0, [r3]
   1239c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   123a0:	cmp	r3, #0
   123a4:	beq	123dc <main@@Base+0x1a0>
   123a8:	ldr	r3, [pc, #312]	; 124e8 <main@@Base+0x2ac>
   123ac:	add	r3, pc, r3
   123b0:	ldrd	r2, [r3, #40]	; 0x28
   123b4:	adds	r1, r2, #1
   123b8:	str	r1, [fp, #-84]	; 0xffffffac
   123bc:	adc	r3, r3, #0
   123c0:	str	r3, [fp, #-80]	; 0xffffffb0
   123c4:	ldr	r3, [pc, #288]	; 124ec <main@@Base+0x2b0>
   123c8:	add	r3, pc, r3
   123cc:	ldrd	r4, [fp, #-84]	; 0xffffffac
   123d0:	strd	r4, [r3, #40]	; 0x28
   123d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   123d8:	b	123e4 <main@@Base+0x1a8>
   123dc:	ldr	r3, [pc, #268]	; 124f0 <main@@Base+0x2b4>
   123e0:	add	r3, pc, r3
   123e4:	mov	r1, r3
   123e8:	bl	11fc4 <my_main@@Base>
   123ec:	mov	r1, r0
   123f0:	ldr	r3, [pc, #252]	; 124f4 <main@@Base+0x2b8>
   123f4:	add	r3, pc, r3
   123f8:	ldrd	r2, [r3, #48]	; 0x30
   123fc:	adds	r0, r2, #1
   12400:	str	r0, [fp, #-92]	; 0xffffffa4
   12404:	adc	r3, r3, #0
   12408:	str	r3, [fp, #-88]	; 0xffffffa8
   1240c:	ldr	r3, [pc, #228]	; 124f8 <main@@Base+0x2bc>
   12410:	add	r3, pc, r3
   12414:	ldrd	r4, [fp, #-92]	; 0xffffffa4
   12418:	strd	r4, [r3, #48]	; 0x30
   1241c:	b	12494 <main@@Base+0x258>
   12420:	ldr	r3, [pc, #212]	; 124fc <main@@Base+0x2c0>
   12424:	add	r3, pc, r3
   12428:	ldrd	r2, [r3, #32]
   1242c:	adds	r1, r2, #1
   12430:	str	r1, [fp, #-76]	; 0xffffffb4
   12434:	adc	r3, r3, #0
   12438:	str	r3, [fp, #-72]	; 0xffffffb8
   1243c:	ldr	r3, [pc, #188]	; 12500 <main@@Base+0x2c4>
   12440:	add	r3, pc, r3
   12444:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   12448:	strd	r0, [r3, #32]
   1244c:	ldr	r3, [pc, #176]	; 12504 <main@@Base+0x2c8>
   12450:	ldr	r3, [r6, r3]
   12454:	ldr	r3, [r3]
   12458:	mov	r2, #45	; 0x2d
   1245c:	mov	r1, #1
   12460:	ldr	r0, [pc, #160]	; 12508 <main@@Base+0x2cc>
   12464:	add	r0, pc, r0
   12468:	bl	118dc <fwrite@plt>
   1246c:	ldr	r3, [pc, #152]	; 1250c <main@@Base+0x2d0>
   12470:	add	r3, pc, r3
   12474:	ldrd	r2, [r3, #56]	; 0x38
   12478:	adds	r8, r2, #1
   1247c:	adc	r9, r3, #0
   12480:	ldr	r3, [pc, #136]	; 12510 <main@@Base+0x2d4>
   12484:	add	r3, pc, r3
   12488:	strd	r8, [r3, #56]	; 0x38
   1248c:	mov	r0, #1
   12490:	bl	11948 <exit@plt>
   12494:	mov	r3, r1
   12498:	mov	r0, r3
   1249c:	sub	sp, fp, #24
   124a0:	ldrd	r4, [sp]
   124a4:	ldr	r6, [sp, #8]
   124a8:	ldrd	r8, [sp, #12]
   124ac:	ldr	fp, [sp, #20]
   124b0:	add	sp, sp, #24
   124b4:	pop	{pc}		; (ldr pc, [sp], #4)
   124b8:	muleq	r1, r4, sp
   124bc:	andeq	ip, r1, r4, lsr r8
   124c0:	andeq	ip, r1, r0, lsr #16
   124c4:	strdeq	ip, [r1], -r4
   124c8:	ldrdeq	ip, [r1], -r8
   124cc:	strheq	r0, [r0], -r4
   124d0:	andeq	sl, r0, ip, lsl #13
   124d4:	muleq	r1, r8, r7
   124d8:	andeq	ip, r1, ip, ror r7
   124dc:	muleq	r0, ip, r0
   124e0:	andeq	ip, r1, r8, asr #14
   124e4:	andeq	ip, r1, ip, lsr #14
   124e8:	strdeq	ip, [r1], -r4
   124ec:	ldrdeq	ip, [r1], -r8
   124f0:	muleq	r0, ip, r5
   124f4:	andeq	ip, r1, ip, lsr #13
   124f8:	muleq	r1, r0, r6
   124fc:	andeq	ip, r1, ip, ror r6
   12500:	andeq	ip, r1, r0, ror #12
   12504:	andeq	r0, r0, r0, lsr #1
   12508:	andeq	sl, r0, ip, lsl r5
   1250c:	andeq	ip, r1, r0, lsr r6
   12510:	andeq	ip, r1, ip, lsl r6
   12514:	str	fp, [sp, #-8]!
   12518:	str	lr, [sp, #4]
   1251c:	add	fp, sp, #4
   12520:	ldr	r3, [pc, #24]	; 12540 <main@@Base+0x304>
   12524:	add	r3, pc, r3
   12528:	mov	r0, r3
   1252c:	bl	1c574 <__gcov_sort_n_vals@@Base+0x4a0>
   12530:	sub	sp, fp, #4
   12534:	ldr	fp, [sp]
   12538:	add	sp, sp, #4
   1253c:	pop	{pc}		; (ldr pc, [sp], #4)
   12540:	andeq	fp, r1, r8, ror #23
   12544:	str	fp, [sp, #-8]!
   12548:	str	lr, [sp, #4]
   1254c:	add	fp, sp, #4
   12550:	bl	1c504 <__gcov_sort_n_vals@@Base+0x430>
   12554:	sub	sp, fp, #4
   12558:	ldr	fp, [sp]
   1255c:	add	sp, sp, #4
   12560:	pop	{pc}		; (ldr pc, [sp], #4)

00012564 <init_token_int_type@@Base>:
   12564:	strd	r4, [sp, #-12]!
   12568:	str	fp, [sp, #8]
   1256c:	add	fp, sp, #8
   12570:	sub	sp, sp, #12
   12574:	str	r0, [fp, #-16]
   12578:	ldr	r3, [pc, #60]	; 125bc <init_token_int_type@@Base+0x58>
   1257c:	add	r3, pc, r3
   12580:	ldrd	r2, [r3]
   12584:	adds	r4, r2, #1
   12588:	adc	r5, r3, #0
   1258c:	ldr	r3, [pc, #44]	; 125c0 <init_token_int_type@@Base+0x5c>
   12590:	add	r3, pc, r3
   12594:	strd	r4, [r3]
   12598:	ldr	r3, [fp, #-16]
   1259c:	mov	r2, #0
   125a0:	str	r2, [r3]
   125a4:	nop	{0}
   125a8:	sub	sp, fp, #8
   125ac:	ldrd	r4, [sp]
   125b0:	ldr	fp, [sp, #8]
   125b4:	add	sp, sp, #12
   125b8:	bx	lr
   125bc:	strdeq	ip, [r1], -r4
   125c0:	andeq	ip, r1, r0, ror #13

000125c4 <init_token_int_value@@Base>:
   125c4:	strd	r4, [sp, #-12]!
   125c8:	str	fp, [sp, #8]
   125cc:	add	fp, sp, #8
   125d0:	sub	sp, sp, #12
   125d4:	str	r0, [fp, #-16]
   125d8:	str	r1, [fp, #-20]	; 0xffffffec
   125dc:	ldr	r3, [pc, #72]	; 1262c <init_token_int_value@@Base+0x68>
   125e0:	add	r3, pc, r3
   125e4:	ldrd	r2, [r3]
   125e8:	adds	r4, r2, #1
   125ec:	adc	r5, r3, #0
   125f0:	ldr	r3, [pc, #56]	; 12630 <init_token_int_value@@Base+0x6c>
   125f4:	add	r3, pc, r3
   125f8:	strd	r4, [r3]
   125fc:	ldr	r3, [fp, #-16]
   12600:	mov	r2, #1
   12604:	str	r2, [r3]
   12608:	ldr	r3, [fp, #-16]
   1260c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12610:	str	r2, [r3, #4]
   12614:	nop	{0}
   12618:	sub	sp, fp, #8
   1261c:	ldrd	r4, [sp]
   12620:	ldr	fp, [sp, #8]
   12624:	add	sp, sp, #12
   12628:	bx	lr
   1262c:	andeq	ip, r1, r8, lsl #13
   12630:	andeq	ip, r1, r4, ror r6

00012634 <init_token_function@@Base>:
   12634:	strd	r4, [sp, #-12]!
   12638:	str	fp, [sp, #8]
   1263c:	add	fp, sp, #8
   12640:	sub	sp, sp, #12
   12644:	str	r0, [fp, #-16]
   12648:	str	r1, [fp, #-20]	; 0xffffffec
   1264c:	ldr	r3, [pc, #72]	; 1269c <init_token_function@@Base+0x68>
   12650:	add	r3, pc, r3
   12654:	ldrd	r2, [r3]
   12658:	adds	r4, r2, #1
   1265c:	adc	r5, r3, #0
   12660:	ldr	r3, [pc, #56]	; 126a0 <init_token_function@@Base+0x6c>
   12664:	add	r3, pc, r3
   12668:	strd	r4, [r3]
   1266c:	ldr	r3, [fp, #-16]
   12670:	mov	r2, #2
   12674:	str	r2, [r3]
   12678:	ldr	r3, [fp, #-16]
   1267c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12680:	str	r2, [r3, #4]
   12684:	nop	{0}
   12688:	sub	sp, fp, #8
   1268c:	ldrd	r4, [sp]
   12690:	ldr	fp, [sp, #8]
   12694:	add	sp, sp, #12
   12698:	bx	lr
   1269c:	andeq	ip, r1, r0, lsl r6
   126a0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>

000126a4 <init_token_opar@@Base>:
   126a4:	strd	r4, [sp, #-12]!
   126a8:	str	fp, [sp, #8]
   126ac:	add	fp, sp, #8
   126b0:	sub	sp, sp, #12
   126b4:	str	r0, [fp, #-16]
   126b8:	ldr	r3, [pc, #60]	; 126fc <init_token_opar@@Base+0x58>
   126bc:	add	r3, pc, r3
   126c0:	ldrd	r2, [r3]
   126c4:	adds	r4, r2, #1
   126c8:	adc	r5, r3, #0
   126cc:	ldr	r3, [pc, #44]	; 12700 <init_token_opar@@Base+0x5c>
   126d0:	add	r3, pc, r3
   126d4:	strd	r4, [r3]
   126d8:	ldr	r3, [fp, #-16]
   126dc:	mov	r2, #3
   126e0:	str	r2, [r3]
   126e4:	nop	{0}
   126e8:	sub	sp, fp, #8
   126ec:	ldrd	r4, [sp]
   126f0:	ldr	fp, [sp, #8]
   126f4:	add	sp, sp, #12
   126f8:	bx	lr
   126fc:	muleq	r1, ip, r5
   12700:	andeq	ip, r1, r8, lsl #11

00012704 <init_token_cpar@@Base>:
   12704:	strd	r4, [sp, #-12]!
   12708:	str	fp, [sp, #8]
   1270c:	add	fp, sp, #8
   12710:	sub	sp, sp, #12
   12714:	str	r0, [fp, #-16]
   12718:	ldr	r3, [pc, #60]	; 1275c <init_token_cpar@@Base+0x58>
   1271c:	add	r3, pc, r3
   12720:	ldrd	r2, [r3]
   12724:	adds	r4, r2, #1
   12728:	adc	r5, r3, #0
   1272c:	ldr	r3, [pc, #44]	; 12760 <init_token_cpar@@Base+0x5c>
   12730:	add	r3, pc, r3
   12734:	strd	r4, [r3]
   12738:	ldr	r3, [fp, #-16]
   1273c:	mov	r2, #4
   12740:	str	r2, [r3]
   12744:	nop	{0}
   12748:	sub	sp, fp, #8
   1274c:	ldrd	r4, [sp]
   12750:	ldr	fp, [sp, #8]
   12754:	add	sp, sp, #12
   12758:	bx	lr
   1275c:	andeq	ip, r1, r4, lsr r5
   12760:	andeq	ip, r1, r0, lsr #10

00012764 <init_token_obra@@Base>:
   12764:	strd	r4, [sp, #-12]!
   12768:	str	fp, [sp, #8]
   1276c:	add	fp, sp, #8
   12770:	sub	sp, sp, #12
   12774:	str	r0, [fp, #-16]
   12778:	ldr	r3, [pc, #60]	; 127bc <init_token_obra@@Base+0x58>
   1277c:	add	r3, pc, r3
   12780:	ldrd	r2, [r3]
   12784:	adds	r4, r2, #1
   12788:	adc	r5, r3, #0
   1278c:	ldr	r3, [pc, #44]	; 127c0 <init_token_obra@@Base+0x5c>
   12790:	add	r3, pc, r3
   12794:	strd	r4, [r3]
   12798:	ldr	r3, [fp, #-16]
   1279c:	mov	r2, #5
   127a0:	str	r2, [r3]
   127a4:	nop	{0}
   127a8:	sub	sp, fp, #8
   127ac:	ldrd	r4, [sp]
   127b0:	ldr	fp, [sp, #8]
   127b4:	add	sp, sp, #12
   127b8:	bx	lr
   127bc:	andeq	ip, r1, ip, asr #9
   127c0:			; <UNDEFINED> instruction: 0x0001c4b8

000127c4 <init_token_cbra@@Base>:
   127c4:	strd	r4, [sp, #-12]!
   127c8:	str	fp, [sp, #8]
   127cc:	add	fp, sp, #8
   127d0:	sub	sp, sp, #12
   127d4:	str	r0, [fp, #-16]
   127d8:	ldr	r3, [pc, #60]	; 1281c <init_token_cbra@@Base+0x58>
   127dc:	add	r3, pc, r3
   127e0:	ldrd	r2, [r3]
   127e4:	adds	r4, r2, #1
   127e8:	adc	r5, r3, #0
   127ec:	ldr	r3, [pc, #44]	; 12820 <init_token_cbra@@Base+0x5c>
   127f0:	add	r3, pc, r3
   127f4:	strd	r4, [r3]
   127f8:	ldr	r3, [fp, #-16]
   127fc:	mov	r2, #6
   12800:	str	r2, [r3]
   12804:	nop	{0}
   12808:	sub	sp, fp, #8
   1280c:	ldrd	r4, [sp]
   12810:	ldr	fp, [sp, #8]
   12814:	add	sp, sp, #12
   12818:	bx	lr
   1281c:	andeq	ip, r1, r4, ror #8
   12820:	andeq	ip, r1, r0, asr r4

00012824 <init_token_return@@Base>:
   12824:	strd	r4, [sp, #-12]!
   12828:	str	fp, [sp, #8]
   1282c:	add	fp, sp, #8
   12830:	sub	sp, sp, #12
   12834:	str	r0, [fp, #-16]
   12838:	ldr	r3, [pc, #60]	; 1287c <init_token_return@@Base+0x58>
   1283c:	add	r3, pc, r3
   12840:	ldrd	r2, [r3]
   12844:	adds	r4, r2, #1
   12848:	adc	r5, r3, #0
   1284c:	ldr	r3, [pc, #44]	; 12880 <init_token_return@@Base+0x5c>
   12850:	add	r3, pc, r3
   12854:	strd	r4, [r3]
   12858:	ldr	r3, [fp, #-16]
   1285c:	mov	r2, #7
   12860:	str	r2, [r3]
   12864:	nop	{0}
   12868:	sub	sp, fp, #8
   1286c:	ldrd	r4, [sp]
   12870:	ldr	fp, [sp, #8]
   12874:	add	sp, sp, #12
   12878:	bx	lr
   1287c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12880:	andeq	ip, r1, r8, ror #7

00012884 <init_token_semicolon@@Base>:
   12884:	strd	r4, [sp, #-12]!
   12888:	str	fp, [sp, #8]
   1288c:	add	fp, sp, #8
   12890:	sub	sp, sp, #12
   12894:	str	r0, [fp, #-16]
   12898:	ldr	r3, [pc, #60]	; 128dc <init_token_semicolon@@Base+0x58>
   1289c:	add	r3, pc, r3
   128a0:	ldrd	r2, [r3]
   128a4:	adds	r4, r2, #1
   128a8:	adc	r5, r3, #0
   128ac:	ldr	r3, [pc, #44]	; 128e0 <init_token_semicolon@@Base+0x5c>
   128b0:	add	r3, pc, r3
   128b4:	strd	r4, [r3]
   128b8:	ldr	r3, [fp, #-16]
   128bc:	mov	r2, #8
   128c0:	str	r2, [r3]
   128c4:	nop	{0}
   128c8:	sub	sp, fp, #8
   128cc:	ldrd	r4, [sp]
   128d0:	ldr	fp, [sp, #8]
   128d4:	add	sp, sp, #12
   128d8:	bx	lr
   128dc:	muleq	r1, r4, r3
   128e0:	andeq	ip, r1, r0, lsl #7

000128e4 <init_token_eof@@Base>:
   128e4:	strd	r4, [sp, #-12]!
   128e8:	str	fp, [sp, #8]
   128ec:	add	fp, sp, #8
   128f0:	sub	sp, sp, #12
   128f4:	str	r0, [fp, #-16]
   128f8:	ldr	r3, [pc, #60]	; 1293c <init_token_eof@@Base+0x58>
   128fc:	add	r3, pc, r3
   12900:	ldrd	r2, [r3]
   12904:	adds	r4, r2, #1
   12908:	adc	r5, r3, #0
   1290c:	ldr	r3, [pc, #44]	; 12940 <init_token_eof@@Base+0x5c>
   12910:	add	r3, pc, r3
   12914:	strd	r4, [r3]
   12918:	ldr	r3, [fp, #-16]
   1291c:	mov	r2, #9
   12920:	str	r2, [r3]
   12924:	nop	{0}
   12928:	sub	sp, fp, #8
   1292c:	ldrd	r4, [sp]
   12930:	ldr	fp, [sp, #8]
   12934:	add	sp, sp, #12
   12938:	bx	lr
   1293c:	andeq	ip, r1, ip, lsr #6
   12940:	andeq	ip, r1, r8, lsl r3

00012944 <init_token_if@@Base>:
   12944:	strd	r4, [sp, #-12]!
   12948:	str	fp, [sp, #8]
   1294c:	add	fp, sp, #8
   12950:	sub	sp, sp, #12
   12954:	str	r0, [fp, #-16]
   12958:	ldr	r3, [pc, #60]	; 1299c <init_token_if@@Base+0x58>
   1295c:	add	r3, pc, r3
   12960:	ldrd	r2, [r3]
   12964:	adds	r4, r2, #1
   12968:	adc	r5, r3, #0
   1296c:	ldr	r3, [pc, #44]	; 129a0 <init_token_if@@Base+0x5c>
   12970:	add	r3, pc, r3
   12974:	strd	r4, [r3]
   12978:	ldr	r3, [fp, #-16]
   1297c:	mov	r2, #10
   12980:	str	r2, [r3]
   12984:	nop	{0}
   12988:	sub	sp, fp, #8
   1298c:	ldrd	r4, [sp]
   12990:	ldr	fp, [sp, #8]
   12994:	add	sp, sp, #12
   12998:	bx	lr
   1299c:	andeq	ip, r1, r4, asr #5
   129a0:			; <UNDEFINED> instruction: 0x0001c2b0

000129a4 <init_token_else@@Base>:
   129a4:	strd	r4, [sp, #-12]!
   129a8:	str	fp, [sp, #8]
   129ac:	add	fp, sp, #8
   129b0:	sub	sp, sp, #12
   129b4:	str	r0, [fp, #-16]
   129b8:	ldr	r3, [pc, #60]	; 129fc <init_token_else@@Base+0x58>
   129bc:	add	r3, pc, r3
   129c0:	ldrd	r2, [r3]
   129c4:	adds	r4, r2, #1
   129c8:	adc	r5, r3, #0
   129cc:	ldr	r3, [pc, #44]	; 12a00 <init_token_else@@Base+0x5c>
   129d0:	add	r3, pc, r3
   129d4:	strd	r4, [r3]
   129d8:	ldr	r3, [fp, #-16]
   129dc:	mov	r2, #11
   129e0:	str	r2, [r3]
   129e4:	nop	{0}
   129e8:	sub	sp, fp, #8
   129ec:	ldrd	r4, [sp]
   129f0:	ldr	fp, [sp, #8]
   129f4:	add	sp, sp, #12
   129f8:	bx	lr
   129fc:	andeq	ip, r1, ip, asr r2
   12a00:	andeq	ip, r1, r8, asr #4

00012a04 <init_token_boolean_op@@Base>:
   12a04:	strd	r4, [sp, #-12]!
   12a08:	str	fp, [sp, #8]
   12a0c:	add	fp, sp, #8
   12a10:	sub	sp, sp, #12
   12a14:	str	r0, [fp, #-16]
   12a18:	str	r1, [fp, #-20]	; 0xffffffec
   12a1c:	ldr	r3, [pc, #72]	; 12a6c <init_token_boolean_op@@Base+0x68>
   12a20:	add	r3, pc, r3
   12a24:	ldrd	r2, [r3]
   12a28:	adds	r4, r2, #1
   12a2c:	adc	r5, r3, #0
   12a30:	ldr	r3, [pc, #56]	; 12a70 <init_token_boolean_op@@Base+0x6c>
   12a34:	add	r3, pc, r3
   12a38:	strd	r4, [r3]
   12a3c:	ldr	r3, [fp, #-16]
   12a40:	mov	r2, #12
   12a44:	str	r2, [r3]
   12a48:	ldr	r3, [fp, #-16]
   12a4c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12a50:	str	r2, [r3, #4]
   12a54:	nop	{0}
   12a58:	sub	sp, fp, #8
   12a5c:	ldrd	r4, [sp]
   12a60:	ldr	fp, [sp, #8]
   12a64:	add	sp, sp, #12
   12a68:	bx	lr
   12a6c:	strdeq	ip, [r1], -r0
   12a70:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>

00012a74 <free_token_int_type@@Base>:
   12a74:	strd	r4, [sp, #-16]!
   12a78:	str	fp, [sp, #8]
   12a7c:	str	lr, [sp, #12]
   12a80:	add	fp, sp, #12
   12a84:	sub	sp, sp, #8
   12a88:	str	r0, [fp, #-16]
   12a8c:	ldr	r3, [pc, #56]	; 12acc <free_token_int_type@@Base+0x58>
   12a90:	add	r3, pc, r3
   12a94:	ldrd	r2, [r3]
   12a98:	adds	r4, r2, #1
   12a9c:	adc	r5, r3, #0
   12aa0:	ldr	r3, [pc, #40]	; 12ad0 <free_token_int_type@@Base+0x5c>
   12aa4:	add	r3, pc, r3
   12aa8:	strd	r4, [r3]
   12aac:	ldr	r0, [fp, #-16]
   12ab0:	bl	118b8 <free@plt>
   12ab4:	nop	{0}
   12ab8:	sub	sp, fp, #12
   12abc:	ldrd	r4, [sp]
   12ac0:	ldr	fp, [sp, #8]
   12ac4:	add	sp, sp, #12
   12ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   12acc:	andeq	ip, r1, r8, ror r1
   12ad0:	andeq	ip, r1, r4, ror #2

00012ad4 <free_token_int_value@@Base>:
   12ad4:	strd	r4, [sp, #-16]!
   12ad8:	str	fp, [sp, #8]
   12adc:	str	lr, [sp, #12]
   12ae0:	add	fp, sp, #12
   12ae4:	sub	sp, sp, #8
   12ae8:	str	r0, [fp, #-16]
   12aec:	ldr	r3, [pc, #56]	; 12b2c <free_token_int_value@@Base+0x58>
   12af0:	add	r3, pc, r3
   12af4:	ldrd	r2, [r3]
   12af8:	adds	r4, r2, #1
   12afc:	adc	r5, r3, #0
   12b00:	ldr	r3, [pc, #40]	; 12b30 <free_token_int_value@@Base+0x5c>
   12b04:	add	r3, pc, r3
   12b08:	strd	r4, [r3]
   12b0c:	ldr	r0, [fp, #-16]
   12b10:	bl	118b8 <free@plt>
   12b14:	nop	{0}
   12b18:	sub	sp, fp, #12
   12b1c:	ldrd	r4, [sp]
   12b20:	ldr	fp, [sp, #8]
   12b24:	add	sp, sp, #12
   12b28:	pop	{pc}		; (ldr pc, [sp], #4)
   12b2c:	andeq	ip, r1, r0, lsl r1
   12b30:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>

00012b34 <free_token_function@@Base>:
   12b34:	strd	r4, [sp, #-16]!
   12b38:	str	fp, [sp, #8]
   12b3c:	str	lr, [sp, #12]
   12b40:	add	fp, sp, #12
   12b44:	sub	sp, sp, #8
   12b48:	str	r0, [fp, #-16]
   12b4c:	ldr	r3, [pc, #56]	; 12b8c <free_token_function@@Base+0x58>
   12b50:	add	r3, pc, r3
   12b54:	ldrd	r2, [r3]
   12b58:	adds	r4, r2, #1
   12b5c:	adc	r5, r3, #0
   12b60:	ldr	r3, [pc, #40]	; 12b90 <free_token_function@@Base+0x5c>
   12b64:	add	r3, pc, r3
   12b68:	strd	r4, [r3]
   12b6c:	ldr	r0, [fp, #-16]
   12b70:	bl	118b8 <free@plt>
   12b74:	nop	{0}
   12b78:	sub	sp, fp, #12
   12b7c:	ldrd	r4, [sp]
   12b80:	ldr	fp, [sp, #8]
   12b84:	add	sp, sp, #12
   12b88:	pop	{pc}		; (ldr pc, [sp], #4)
   12b8c:	andeq	ip, r1, r8, lsr #1
   12b90:	muleq	r1, r4, r0

00012b94 <free_token_opar@@Base>:
   12b94:	strd	r4, [sp, #-16]!
   12b98:	str	fp, [sp, #8]
   12b9c:	str	lr, [sp, #12]
   12ba0:	add	fp, sp, #12
   12ba4:	sub	sp, sp, #8
   12ba8:	str	r0, [fp, #-16]
   12bac:	ldr	r3, [pc, #56]	; 12bec <free_token_opar@@Base+0x58>
   12bb0:	add	r3, pc, r3
   12bb4:	ldrd	r2, [r3]
   12bb8:	adds	r4, r2, #1
   12bbc:	adc	r5, r3, #0
   12bc0:	ldr	r3, [pc, #40]	; 12bf0 <free_token_opar@@Base+0x5c>
   12bc4:	add	r3, pc, r3
   12bc8:	strd	r4, [r3]
   12bcc:	ldr	r0, [fp, #-16]
   12bd0:	bl	118b8 <free@plt>
   12bd4:	nop	{0}
   12bd8:	sub	sp, fp, #12
   12bdc:	ldrd	r4, [sp]
   12be0:	ldr	fp, [sp, #8]
   12be4:	add	sp, sp, #12
   12be8:	pop	{pc}		; (ldr pc, [sp], #4)
   12bec:	andeq	ip, r1, r0, asr #32
   12bf0:	andeq	ip, r1, ip, lsr #32

00012bf4 <free_token_cpar@@Base>:
   12bf4:	strd	r4, [sp, #-16]!
   12bf8:	str	fp, [sp, #8]
   12bfc:	str	lr, [sp, #12]
   12c00:	add	fp, sp, #12
   12c04:	sub	sp, sp, #8
   12c08:	str	r0, [fp, #-16]
   12c0c:	ldr	r3, [pc, #56]	; 12c4c <free_token_cpar@@Base+0x58>
   12c10:	add	r3, pc, r3
   12c14:	ldrd	r2, [r3]
   12c18:	adds	r4, r2, #1
   12c1c:	adc	r5, r3, #0
   12c20:	ldr	r3, [pc, #40]	; 12c50 <free_token_cpar@@Base+0x5c>
   12c24:	add	r3, pc, r3
   12c28:	strd	r4, [r3]
   12c2c:	ldr	r0, [fp, #-16]
   12c30:	bl	118b8 <free@plt>
   12c34:	nop	{0}
   12c38:	sub	sp, fp, #12
   12c3c:	ldrd	r4, [sp]
   12c40:	ldr	fp, [sp, #8]
   12c44:	add	sp, sp, #12
   12c48:	pop	{pc}		; (ldr pc, [sp], #4)
   12c4c:	ldrdeq	fp, [r1], -r8
   12c50:	andeq	fp, r1, r4, asr #31

00012c54 <free_token_obra@@Base>:
   12c54:	strd	r4, [sp, #-16]!
   12c58:	str	fp, [sp, #8]
   12c5c:	str	lr, [sp, #12]
   12c60:	add	fp, sp, #12
   12c64:	sub	sp, sp, #8
   12c68:	str	r0, [fp, #-16]
   12c6c:	ldr	r3, [pc, #56]	; 12cac <free_token_obra@@Base+0x58>
   12c70:	add	r3, pc, r3
   12c74:	ldrd	r2, [r3]
   12c78:	adds	r4, r2, #1
   12c7c:	adc	r5, r3, #0
   12c80:	ldr	r3, [pc, #40]	; 12cb0 <free_token_obra@@Base+0x5c>
   12c84:	add	r3, pc, r3
   12c88:	strd	r4, [r3]
   12c8c:	ldr	r0, [fp, #-16]
   12c90:	bl	118b8 <free@plt>
   12c94:	nop	{0}
   12c98:	sub	sp, fp, #12
   12c9c:	ldrd	r4, [sp]
   12ca0:	ldr	fp, [sp, #8]
   12ca4:	add	sp, sp, #12
   12ca8:	pop	{pc}		; (ldr pc, [sp], #4)
   12cac:	andeq	fp, r1, r0, ror pc
   12cb0:	andeq	fp, r1, ip, asr pc

00012cb4 <free_token_cbra@@Base>:
   12cb4:	strd	r4, [sp, #-16]!
   12cb8:	str	fp, [sp, #8]
   12cbc:	str	lr, [sp, #12]
   12cc0:	add	fp, sp, #12
   12cc4:	sub	sp, sp, #8
   12cc8:	str	r0, [fp, #-16]
   12ccc:	ldr	r3, [pc, #56]	; 12d0c <free_token_cbra@@Base+0x58>
   12cd0:	add	r3, pc, r3
   12cd4:	ldrd	r2, [r3]
   12cd8:	adds	r4, r2, #1
   12cdc:	adc	r5, r3, #0
   12ce0:	ldr	r3, [pc, #40]	; 12d10 <free_token_cbra@@Base+0x5c>
   12ce4:	add	r3, pc, r3
   12ce8:	strd	r4, [r3]
   12cec:	ldr	r0, [fp, #-16]
   12cf0:	bl	118b8 <free@plt>
   12cf4:	nop	{0}
   12cf8:	sub	sp, fp, #12
   12cfc:	ldrd	r4, [sp]
   12d00:	ldr	fp, [sp, #8]
   12d04:	add	sp, sp, #12
   12d08:	pop	{pc}		; (ldr pc, [sp], #4)
   12d0c:	andeq	fp, r1, r8, lsl #30
   12d10:	strdeq	fp, [r1], -r4

00012d14 <free_token_return@@Base>:
   12d14:	strd	r4, [sp, #-16]!
   12d18:	str	fp, [sp, #8]
   12d1c:	str	lr, [sp, #12]
   12d20:	add	fp, sp, #12
   12d24:	sub	sp, sp, #8
   12d28:	str	r0, [fp, #-16]
   12d2c:	ldr	r3, [pc, #56]	; 12d6c <free_token_return@@Base+0x58>
   12d30:	add	r3, pc, r3
   12d34:	ldrd	r2, [r3]
   12d38:	adds	r4, r2, #1
   12d3c:	adc	r5, r3, #0
   12d40:	ldr	r3, [pc, #40]	; 12d70 <free_token_return@@Base+0x5c>
   12d44:	add	r3, pc, r3
   12d48:	strd	r4, [r3]
   12d4c:	ldr	r0, [fp, #-16]
   12d50:	bl	118b8 <free@plt>
   12d54:	nop	{0}
   12d58:	sub	sp, fp, #12
   12d5c:	ldrd	r4, [sp]
   12d60:	ldr	fp, [sp, #8]
   12d64:	add	sp, sp, #12
   12d68:	pop	{pc}		; (ldr pc, [sp], #4)
   12d6c:	andeq	fp, r1, r0, lsr #29
   12d70:	andeq	fp, r1, ip, lsl #29

00012d74 <free_token_semicolon@@Base>:
   12d74:	strd	r4, [sp, #-16]!
   12d78:	str	fp, [sp, #8]
   12d7c:	str	lr, [sp, #12]
   12d80:	add	fp, sp, #12
   12d84:	sub	sp, sp, #8
   12d88:	str	r0, [fp, #-16]
   12d8c:	ldr	r3, [pc, #56]	; 12dcc <free_token_semicolon@@Base+0x58>
   12d90:	add	r3, pc, r3
   12d94:	ldrd	r2, [r3]
   12d98:	adds	r4, r2, #1
   12d9c:	adc	r5, r3, #0
   12da0:	ldr	r3, [pc, #40]	; 12dd0 <free_token_semicolon@@Base+0x5c>
   12da4:	add	r3, pc, r3
   12da8:	strd	r4, [r3]
   12dac:	ldr	r0, [fp, #-16]
   12db0:	bl	118b8 <free@plt>
   12db4:	nop	{0}
   12db8:	sub	sp, fp, #12
   12dbc:	ldrd	r4, [sp]
   12dc0:	ldr	fp, [sp, #8]
   12dc4:	add	sp, sp, #12
   12dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   12dcc:	andeq	fp, r1, r8, lsr lr
   12dd0:	andeq	fp, r1, r4, lsr #28

00012dd4 <free_token_eof@@Base>:
   12dd4:	strd	r4, [sp, #-16]!
   12dd8:	str	fp, [sp, #8]
   12ddc:	str	lr, [sp, #12]
   12de0:	add	fp, sp, #12
   12de4:	sub	sp, sp, #8
   12de8:	str	r0, [fp, #-16]
   12dec:	ldr	r3, [pc, #56]	; 12e2c <free_token_eof@@Base+0x58>
   12df0:	add	r3, pc, r3
   12df4:	ldrd	r2, [r3]
   12df8:	adds	r4, r2, #1
   12dfc:	adc	r5, r3, #0
   12e00:	ldr	r3, [pc, #40]	; 12e30 <free_token_eof@@Base+0x5c>
   12e04:	add	r3, pc, r3
   12e08:	strd	r4, [r3]
   12e0c:	ldr	r0, [fp, #-16]
   12e10:	bl	118b8 <free@plt>
   12e14:	nop	{0}
   12e18:	sub	sp, fp, #12
   12e1c:	ldrd	r4, [sp]
   12e20:	ldr	fp, [sp, #8]
   12e24:	add	sp, sp, #12
   12e28:	pop	{pc}		; (ldr pc, [sp], #4)
   12e2c:	ldrdeq	fp, [r1], -r0
   12e30:			; <UNDEFINED> instruction: 0x0001bdbc

00012e34 <free_token_if@@Base>:
   12e34:	strd	r4, [sp, #-16]!
   12e38:	str	fp, [sp, #8]
   12e3c:	str	lr, [sp, #12]
   12e40:	add	fp, sp, #12
   12e44:	sub	sp, sp, #8
   12e48:	str	r0, [fp, #-16]
   12e4c:	ldr	r3, [pc, #56]	; 12e8c <free_token_if@@Base+0x58>
   12e50:	add	r3, pc, r3
   12e54:	ldrd	r2, [r3]
   12e58:	adds	r4, r2, #1
   12e5c:	adc	r5, r3, #0
   12e60:	ldr	r3, [pc, #40]	; 12e90 <free_token_if@@Base+0x5c>
   12e64:	add	r3, pc, r3
   12e68:	strd	r4, [r3]
   12e6c:	ldr	r0, [fp, #-16]
   12e70:	bl	118b8 <free@plt>
   12e74:	nop	{0}
   12e78:	sub	sp, fp, #12
   12e7c:	ldrd	r4, [sp]
   12e80:	ldr	fp, [sp, #8]
   12e84:	add	sp, sp, #12
   12e88:	pop	{pc}		; (ldr pc, [sp], #4)
   12e8c:	andeq	fp, r1, r8, ror #26
   12e90:	andeq	fp, r1, r4, asr sp

00012e94 <free_token_else@@Base>:
   12e94:	strd	r4, [sp, #-16]!
   12e98:	str	fp, [sp, #8]
   12e9c:	str	lr, [sp, #12]
   12ea0:	add	fp, sp, #12
   12ea4:	sub	sp, sp, #8
   12ea8:	str	r0, [fp, #-16]
   12eac:	ldr	r3, [pc, #56]	; 12eec <free_token_else@@Base+0x58>
   12eb0:	add	r3, pc, r3
   12eb4:	ldrd	r2, [r3]
   12eb8:	adds	r4, r2, #1
   12ebc:	adc	r5, r3, #0
   12ec0:	ldr	r3, [pc, #40]	; 12ef0 <free_token_else@@Base+0x5c>
   12ec4:	add	r3, pc, r3
   12ec8:	strd	r4, [r3]
   12ecc:	ldr	r0, [fp, #-16]
   12ed0:	bl	118b8 <free@plt>
   12ed4:	nop	{0}
   12ed8:	sub	sp, fp, #12
   12edc:	ldrd	r4, [sp]
   12ee0:	ldr	fp, [sp, #8]
   12ee4:	add	sp, sp, #12
   12ee8:	pop	{pc}		; (ldr pc, [sp], #4)
   12eec:	andeq	fp, r1, r0, lsl #26
   12ef0:	andeq	fp, r1, ip, ror #25

00012ef4 <free_token_boolean_op@@Base>:
   12ef4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12ef8:	strd	r6, [sp, #8]
   12efc:	str	fp, [sp, #16]
   12f00:	str	lr, [sp, #20]
   12f04:	add	fp, sp, #20
   12f08:	sub	sp, sp, #8
   12f0c:	str	r0, [fp, #-24]	; 0xffffffe8
   12f10:	ldr	r3, [pc, #124]	; 12f94 <free_token_boolean_op@@Base+0xa0>
   12f14:	add	r3, pc, r3
   12f18:	ldrd	r2, [r3]
   12f1c:	adds	r6, r2, #1
   12f20:	adc	r7, r3, #0
   12f24:	ldr	r3, [pc, #108]	; 12f98 <free_token_boolean_op@@Base+0xa4>
   12f28:	add	r3, pc, r3
   12f2c:	strd	r6, [r3]
   12f30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12f34:	ldr	r3, [r3, #4]
   12f38:	cmp	r3, #0
   12f3c:	beq	12f70 <free_token_boolean_op@@Base+0x7c>
   12f40:	ldr	r3, [pc, #84]	; 12f9c <free_token_boolean_op@@Base+0xa8>
   12f44:	add	r3, pc, r3
   12f48:	ldrd	r2, [r3, #8]
   12f4c:	adds	r4, r2, #1
   12f50:	adc	r5, r3, #0
   12f54:	ldr	r3, [pc, #68]	; 12fa0 <free_token_boolean_op@@Base+0xac>
   12f58:	add	r3, pc, r3
   12f5c:	strd	r4, [r3, #8]
   12f60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12f64:	ldr	r3, [r3, #4]
   12f68:	mov	r0, r3
   12f6c:	bl	118b8 <free@plt>
   12f70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12f74:	bl	118b8 <free@plt>
   12f78:	nop	{0}
   12f7c:	sub	sp, fp, #20
   12f80:	ldrd	r4, [sp]
   12f84:	ldrd	r6, [sp, #8]
   12f88:	ldr	fp, [sp, #16]
   12f8c:	add	sp, sp, #20
   12f90:	pop	{pc}		; (ldr pc, [sp], #4)
   12f94:	andeq	fp, r1, ip, lsl #25
   12f98:	andeq	fp, r1, r8, ror ip
   12f9c:	andeq	fp, r1, ip, asr ip
   12fa0:	andeq	fp, r1, r8, asr #24
   12fa4:	str	fp, [sp, #-8]!
   12fa8:	str	lr, [sp, #4]
   12fac:	add	fp, sp, #4
   12fb0:	ldr	r3, [pc, #24]	; 12fd0 <free_token_boolean_op@@Base+0xdc>
   12fb4:	add	r3, pc, r3
   12fb8:	mov	r0, r3
   12fbc:	bl	1c574 <__gcov_sort_n_vals@@Base+0x4a0>
   12fc0:	sub	sp, fp, #4
   12fc4:	ldr	fp, [sp]
   12fc8:	add	sp, sp, #4
   12fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   12fd0:	andeq	fp, r1, ip, ror #8
   12fd4:	str	fp, [sp, #-8]!
   12fd8:	str	lr, [sp, #4]
   12fdc:	add	fp, sp, #4
   12fe0:	bl	1c504 <__gcov_sort_n_vals@@Base+0x430>
   12fe4:	sub	sp, fp, #4
   12fe8:	ldr	fp, [sp]
   12fec:	add	sp, sp, #4
   12ff0:	pop	{pc}		; (ldr pc, [sp], #4)

00012ff4 <init_lexer@@Base>:
   12ff4:	strd	r4, [sp, #-12]!
   12ff8:	str	fp, [sp, #8]
   12ffc:	add	fp, sp, #8
   13000:	sub	sp, sp, #12
   13004:	str	r0, [fp, #-16]
   13008:	str	r1, [fp, #-20]	; 0xffffffec
   1300c:	ldr	r3, [pc, #84]	; 13068 <init_lexer@@Base+0x74>
   13010:	add	r3, pc, r3
   13014:	ldrd	r2, [r3]
   13018:	adds	r4, r2, #1
   1301c:	adc	r5, r3, #0
   13020:	ldr	r3, [pc, #68]	; 1306c <init_lexer@@Base+0x78>
   13024:	add	r3, pc, r3
   13028:	strd	r4, [r3]
   1302c:	ldr	r3, [fp, #-16]
   13030:	ldr	r2, [fp, #-20]	; 0xffffffec
   13034:	str	r2, [r3]
   13038:	ldr	r3, [fp, #-16]
   1303c:	mov	r2, #0
   13040:	str	r2, [r3, #4]
   13044:	ldr	r3, [fp, #-16]
   13048:	mov	r2, #0
   1304c:	str	r2, [r3, #8]
   13050:	nop	{0}
   13054:	sub	sp, fp, #8
   13058:	ldrd	r4, [sp]
   1305c:	ldr	fp, [sp, #8]
   13060:	add	sp, sp, #12
   13064:	bx	lr
   13068:	andeq	fp, r1, r0, asr #31
   1306c:	andeq	fp, r1, ip, lsr #31

00013070 <destroy_lexer@@Base>:
   13070:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13074:	strd	r6, [sp, #8]
   13078:	strd	r8, [sp, #16]
   1307c:	str	fp, [sp, #24]
   13080:	str	lr, [sp, #28]
   13084:	add	fp, sp, #28
   13088:	sub	sp, sp, #16
   1308c:	str	r0, [fp, #-40]	; 0xffffffd8
   13090:	ldr	r3, [pc, #180]	; 1314c <destroy_lexer@@Base+0xdc>
   13094:	add	r3, pc, r3
   13098:	ldrd	r2, [r3]
   1309c:	adds	r8, r2, #1
   130a0:	adc	r9, r3, #0
   130a4:	ldr	r3, [pc, #164]	; 13150 <destroy_lexer@@Base+0xe0>
   130a8:	add	r3, pc, r3
   130ac:	strd	r8, [r3]
   130b0:	mov	r3, #0
   130b4:	str	r3, [fp, #-32]	; 0xffffffe0
   130b8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   130bc:	ldr	r3, [r3, #4]
   130c0:	str	r3, [fp, #-36]	; 0xffffffdc
   130c4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   130c8:	cmp	r3, #0
   130cc:	beq	1312c <destroy_lexer@@Base+0xbc>
   130d0:	ldr	r3, [pc, #124]	; 13154 <destroy_lexer@@Base+0xe4>
   130d4:	add	r3, pc, r3
   130d8:	ldrd	r2, [r3, #8]
   130dc:	adds	r6, r2, #1
   130e0:	adc	r7, r3, #0
   130e4:	ldr	r3, [pc, #108]	; 13158 <destroy_lexer@@Base+0xe8>
   130e8:	add	r3, pc, r3
   130ec:	strd	r6, [r3, #8]
   130f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   130f4:	str	r3, [fp, #-32]	; 0xffffffe0
   130f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   130fc:	ldr	r3, [r3]
   13100:	str	r3, [fp, #-36]	; 0xffffffdc
   13104:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13108:	bl	13164 <free_stack_base@@Base>
   1310c:	ldr	r3, [pc, #72]	; 1315c <destroy_lexer@@Base+0xec>
   13110:	add	r3, pc, r3
   13114:	ldrd	r2, [r3, #16]
   13118:	adds	r4, r2, #1
   1311c:	adc	r5, r3, #0
   13120:	ldr	r3, [pc, #56]	; 13160 <destroy_lexer@@Base+0xf0>
   13124:	add	r3, pc, r3
   13128:	strd	r4, [r3, #16]
   1312c:	nop	{0}
   13130:	sub	sp, fp, #28
   13134:	ldrd	r4, [sp]
   13138:	ldrd	r6, [sp, #8]
   1313c:	ldrd	r8, [sp, #16]
   13140:	ldr	fp, [sp, #24]
   13144:	add	sp, sp, #28
   13148:	pop	{pc}		; (ldr pc, [sp], #4)
   1314c:	andeq	fp, r1, r4, lsr #30
   13150:	andeq	fp, r1, r0, lsl pc
   13154:	andeq	fp, r1, r4, ror #29
   13158:	ldrdeq	fp, [r1], -r0
   1315c:	andeq	fp, r1, r8, lsr #29
   13160:	muleq	r1, r4, lr

00013164 <free_stack_base@@Base>:
   13164:	strd	r4, [sp, #-16]!
   13168:	str	fp, [sp, #8]
   1316c:	str	lr, [sp, #12]
   13170:	add	fp, sp, #12
   13174:	sub	sp, sp, #8
   13178:	str	r0, [fp, #-16]
   1317c:	ldr	r3, [pc, #56]	; 131bc <free_stack_base@@Base+0x58>
   13180:	add	r3, pc, r3
   13184:	ldrd	r2, [r3]
   13188:	adds	r4, r2, #1
   1318c:	adc	r5, r3, #0
   13190:	ldr	r3, [pc, #40]	; 131c0 <free_stack_base@@Base+0x5c>
   13194:	add	r3, pc, r3
   13198:	strd	r4, [r3]
   1319c:	ldr	r0, [fp, #-16]
   131a0:	bl	118b8 <free@plt>
   131a4:	nop	{0}
   131a8:	sub	sp, fp, #12
   131ac:	ldrd	r4, [sp]
   131b0:	ldr	fp, [sp, #8]
   131b4:	add	sp, sp, #12
   131b8:	pop	{pc}		; (ldr pc, [sp], #4)
   131bc:	andeq	fp, r1, r0, lsr lr
   131c0:	andeq	fp, r1, ip, lsl lr

000131c4 <push_back@@Base>:
   131c4:	strd	r4, [sp, #-16]!
   131c8:	str	fp, [sp, #8]
   131cc:	str	lr, [sp, #12]
   131d0:	add	fp, sp, #12
   131d4:	sub	sp, sp, #16
   131d8:	str	r0, [fp, #-24]	; 0xffffffe8
   131dc:	str	r1, [fp, #-28]	; 0xffffffe4
   131e0:	ldr	r3, [pc, #104]	; 13250 <push_back@@Base+0x8c>
   131e4:	add	r3, pc, r3
   131e8:	ldrd	r2, [r3]
   131ec:	adds	r4, r2, #1
   131f0:	adc	r5, r3, #0
   131f4:	ldr	r3, [pc, #88]	; 13254 <push_back@@Base+0x90>
   131f8:	add	r3, pc, r3
   131fc:	strd	r4, [r3]
   13200:	mov	r0, #8
   13204:	bl	11918 <malloc@plt>
   13208:	mov	r3, r0
   1320c:	str	r3, [fp, #-16]
   13210:	ldr	r3, [fp, #-16]
   13214:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13218:	str	r2, [r3, #4]
   1321c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13220:	ldr	r2, [r3, #4]
   13224:	ldr	r3, [fp, #-16]
   13228:	str	r2, [r3]
   1322c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13230:	ldr	r2, [fp, #-16]
   13234:	str	r2, [r3, #4]
   13238:	nop	{0}
   1323c:	sub	sp, fp, #12
   13240:	ldrd	r4, [sp]
   13244:	ldr	fp, [sp, #8]
   13248:	add	sp, sp, #12
   1324c:	pop	{pc}		; (ldr pc, [sp], #4)
   13250:	andeq	fp, r1, r4, asr #27
   13254:			; <UNDEFINED> instruction: 0x0001bdb0

00013258 <get_char@@Base>:
   13258:	strd	r4, [sp, #-12]!
   1325c:	str	fp, [sp, #8]
   13260:	add	fp, sp, #8
   13264:	sub	sp, sp, #12
   13268:	str	r0, [fp, #-16]
   1326c:	ldr	r3, [pc, #84]	; 132c8 <get_char@@Base+0x70>
   13270:	add	r3, pc, r3
   13274:	ldrd	r2, [r3]
   13278:	adds	r4, r2, #1
   1327c:	adc	r5, r3, #0
   13280:	ldr	r3, [pc, #68]	; 132cc <get_char@@Base+0x74>
   13284:	add	r3, pc, r3
   13288:	strd	r4, [r3]
   1328c:	ldr	r3, [fp, #-16]
   13290:	ldr	r2, [r3]
   13294:	ldr	r3, [fp, #-16]
   13298:	ldr	r3, [r3, #8]
   1329c:	add	r0, r3, #1
   132a0:	ldr	r1, [fp, #-16]
   132a4:	str	r0, [r1, #8]
   132a8:	add	r3, r2, r3
   132ac:	ldrb	r3, [r3]
   132b0:	mov	r0, r3
   132b4:	sub	sp, fp, #8
   132b8:	ldrd	r4, [sp]
   132bc:	ldr	fp, [sp, #8]
   132c0:	add	sp, sp, #12
   132c4:	bx	lr
   132c8:	andeq	fp, r1, r0, lsr sp
   132cc:	andeq	fp, r1, ip, lsl sp

000132d0 <push_back_chars@@Base>:
   132d0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   132d4:	strd	r6, [sp, #8]
   132d8:	strd	r8, [sp, #16]
   132dc:	str	fp, [sp, #24]
   132e0:	str	lr, [sp, #28]
   132e4:	add	fp, sp, #28
   132e8:	sub	sp, sp, #8
   132ec:	str	r0, [fp, #-32]	; 0xffffffe0
   132f0:	str	r1, [fp, #-36]	; 0xffffffdc
   132f4:	ldr	r1, [pc, #212]	; 133d0 <push_back_chars@@Base+0x100>
   132f8:	add	r1, pc, r1
   132fc:	ldr	r3, [pc, #208]	; 133d4 <push_back_chars@@Base+0x104>
   13300:	add	r3, pc, r3
   13304:	ldrd	r2, [r3]
   13308:	adds	r8, r2, #1
   1330c:	adc	r9, r3, #0
   13310:	ldr	r3, [pc, #192]	; 133d8 <push_back_chars@@Base+0x108>
   13314:	add	r3, pc, r3
   13318:	strd	r8, [r3]
   1331c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13320:	ldr	r3, [r3, #8]
   13324:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13328:	cmp	r2, r3
   1332c:	bhi	1336c <push_back_chars@@Base+0x9c>
   13330:	ldr	r3, [pc, #164]	; 133dc <push_back_chars@@Base+0x10c>
   13334:	add	r3, pc, r3
   13338:	ldrd	r2, [r3, #8]
   1333c:	adds	r6, r2, #1
   13340:	adc	r7, r3, #0
   13344:	ldr	r3, [pc, #148]	; 133e0 <push_back_chars@@Base+0x110>
   13348:	add	r3, pc, r3
   1334c:	strd	r6, [r3, #8]
   13350:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13354:	ldr	r2, [r3, #8]
   13358:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1335c:	sub	r2, r2, r3
   13360:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13364:	str	r2, [r3, #8]
   13368:	b	133b4 <push_back_chars@@Base+0xe4>
   1336c:	ldr	r3, [pc, #112]	; 133e4 <push_back_chars@@Base+0x114>
   13370:	ldr	r3, [r1, r3]
   13374:	ldr	r3, [r3]
   13378:	mov	r2, #32
   1337c:	mov	r1, #1
   13380:	ldr	r0, [pc, #96]	; 133e8 <push_back_chars@@Base+0x118>
   13384:	add	r0, pc, r0
   13388:	bl	118dc <fwrite@plt>
   1338c:	ldr	r3, [pc, #88]	; 133ec <push_back_chars@@Base+0x11c>
   13390:	add	r3, pc, r3
   13394:	ldrd	r2, [r3, #16]
   13398:	adds	r4, r2, #1
   1339c:	adc	r5, r3, #0
   133a0:	ldr	r3, [pc, #72]	; 133f0 <push_back_chars@@Base+0x120>
   133a4:	add	r3, pc, r3
   133a8:	strd	r4, [r3, #16]
   133ac:	mov	r0, #1
   133b0:	bl	11948 <exit@plt>
   133b4:	sub	sp, fp, #28
   133b8:	ldrd	r4, [sp]
   133bc:	ldrd	r6, [sp, #8]
   133c0:	ldrd	r8, [sp, #16]
   133c4:	ldr	fp, [sp, #24]
   133c8:	add	sp, sp, #28
   133cc:	pop	{pc}		; (ldr pc, [sp], #4)
   133d0:	andeq	sl, r1, r0, lsl #26
   133d4:	andeq	fp, r1, r8, lsl #25
   133d8:	andeq	fp, r1, r4, ror ip
   133dc:	andeq	fp, r1, r4, asr ip
   133e0:	andeq	fp, r1, r0, asr #24
   133e4:	andeq	r0, r0, r0, lsr #1
   133e8:	strdeq	r9, [r0], -ip
   133ec:	strdeq	fp, [r1], -r8
   133f0:	andeq	fp, r1, r4, ror #23

000133f4 <push_back_one_char@@Base>:
   133f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   133f8:	strd	r6, [sp, #8]
   133fc:	str	fp, [sp, #16]
   13400:	str	lr, [sp, #20]
   13404:	add	fp, sp, #20
   13408:	sub	sp, sp, #8
   1340c:	str	r0, [fp, #-24]	; 0xffffffe8
   13410:	ldr	r3, [pc, #96]	; 13478 <push_back_one_char@@Base+0x84>
   13414:	add	r3, pc, r3
   13418:	ldrd	r2, [r3]
   1341c:	adds	r6, r2, #1
   13420:	adc	r7, r3, #0
   13424:	ldr	r3, [pc, #80]	; 1347c <push_back_one_char@@Base+0x88>
   13428:	add	r3, pc, r3
   1342c:	strd	r6, [r3]
   13430:	mov	r1, #1
   13434:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13438:	bl	132d0 <push_back_chars@@Base>
   1343c:	ldr	r3, [pc, #60]	; 13480 <push_back_one_char@@Base+0x8c>
   13440:	add	r3, pc, r3
   13444:	ldrd	r2, [r3, #8]
   13448:	adds	r4, r2, #1
   1344c:	adc	r5, r3, #0
   13450:	ldr	r3, [pc, #44]	; 13484 <push_back_one_char@@Base+0x90>
   13454:	add	r3, pc, r3
   13458:	strd	r4, [r3, #8]
   1345c:	nop	{0}
   13460:	sub	sp, fp, #20
   13464:	ldrd	r4, [sp]
   13468:	ldrd	r6, [sp, #8]
   1346c:	ldr	fp, [sp, #16]
   13470:	add	sp, sp, #20
   13474:	pop	{pc}		; (ldr pc, [sp], #4)
   13478:	andeq	fp, r1, r4, ror #22
   1347c:	andeq	fp, r1, r0, asr fp
   13480:	andeq	fp, r1, r8, lsr fp
   13484:	andeq	fp, r1, r4, lsr #22

00013488 <next@@Base>:
   13488:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1348c:	strd	r6, [sp, #8]
   13490:	strd	r8, [sp, #16]
   13494:	strd	sl, [sp, #24]
   13498:	str	lr, [sp, #32]
   1349c:	add	fp, sp, #32
   134a0:	sub	sp, sp, #1296	; 0x510
   134a4:	sub	sp, sp, #4
   134a8:	str	r0, [fp, #-584]	; 0xfffffdb8
   134ac:	ldr	sl, [pc, #3864]	; 143cc <next@@Base+0xf44>
   134b0:	add	sl, pc, sl
   134b4:	ldr	r3, [pc, #3860]	; 143d0 <next@@Base+0xf48>
   134b8:	add	r3, pc, r3
   134bc:	ldrd	r2, [r3]
   134c0:	adds	r4, r2, #1
   134c4:	adc	r5, r3, #0
   134c8:	ldr	r3, [pc, #3844]	; 143d4 <next@@Base+0xf4c>
   134cc:	add	r3, pc, r3
   134d0:	strd	r4, [r3]
   134d4:	mov	r3, #0
   134d8:	str	r3, [fp, #-40]	; 0xffffffd8
   134dc:	mov	r3, #0
   134e0:	str	r3, [fp, #-44]	; 0xffffffd4
   134e4:	mov	r3, #0
   134e8:	str	r3, [fp, #-48]	; 0xffffffd0
   134ec:	mov	r3, #0
   134f0:	str	r3, [fp, #-56]	; 0xffffffc8
   134f4:	mov	r3, #0
   134f8:	str	r3, [fp, #-60]	; 0xffffffc4
   134fc:	ldr	r3, [fp, #-584]	; 0xfffffdb8
   13500:	ldr	r3, [r3, #4]
   13504:	cmp	r3, #0
   13508:	beq	13594 <next@@Base+0x10c>
   1350c:	ldr	r3, [pc, #3780]	; 143d8 <next@@Base+0xf50>
   13510:	add	r3, pc, r3
   13514:	ldrd	r2, [r3, #8]
   13518:	adds	r8, r2, #1
   1351c:	adc	r9, r3, #0
   13520:	ldr	r3, [pc, #3764]	; 143dc <next@@Base+0xf54>
   13524:	add	r3, pc, r3
   13528:	strd	r8, [r3, #8]
   1352c:	ldr	r3, [fp, #-584]	; 0xfffffdb8
   13530:	ldr	r3, [r3, #4]
   13534:	str	r3, [fp, #-64]	; 0xffffffc0
   13538:	ldr	r3, [fp, #-584]	; 0xfffffdb8
   1353c:	ldr	r3, [r3, #4]
   13540:	ldr	r2, [r3]
   13544:	ldr	r3, [fp, #-584]	; 0xfffffdb8
   13548:	str	r2, [r3, #4]
   1354c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13550:	ldr	r3, [r3, #4]
   13554:	str	r3, [fp, #-56]	; 0xffffffc8
   13558:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1355c:	mov	r2, #0
   13560:	str	r2, [r3, #4]
   13564:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13568:	bl	13164 <free_stack_base@@Base>
   1356c:	ldr	r3, [pc, #3692]	; 143e0 <next@@Base+0xf58>
   13570:	add	r3, pc, r3
   13574:	ldrd	r2, [r3, #16]
   13578:	adds	r6, r2, #1
   1357c:	adc	r7, r3, #0
   13580:	ldr	r3, [pc, #3676]	; 143e4 <next@@Base+0xf5c>
   13584:	add	r3, pc, r3
   13588:	strd	r6, [r3, #16]
   1358c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13590:	b	157c4 <next@@Base+0x233c>
   13594:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   13598:	bl	13258 <get_char@@Base>
   1359c:	mov	r3, r0
   135a0:	strb	r3, [fp, #-49]	; 0xffffffcf
   135a4:	nop	{0}
   135a8:	ldr	r3, [pc, #3640]	; 143e8 <next@@Base+0xf60>
   135ac:	add	r3, pc, r3
   135b0:	ldrd	r2, [r3, #24]
   135b4:	adds	r1, r2, #1
   135b8:	str	r1, [fp, #-596]	; 0xfffffdac
   135bc:	adc	r3, r3, #0
   135c0:	str	r3, [fp, #-592]	; 0xfffffdb0
   135c4:	ldr	r3, [pc, #3616]	; 143ec <next@@Base+0xf64>
   135c8:	add	r3, pc, r3
   135cc:	sub	r2, fp, #596	; 0x254
   135d0:	ldrd	r0, [r2]
   135d4:	strd	r0, [r3, #24]
   135d8:	b	15760 <next@@Base+0x22d8>
   135dc:	ldr	r3, [pc, #3596]	; 143f0 <next@@Base+0xf68>
   135e0:	add	r3, pc, r3
   135e4:	add	r3, r3, #752	; 0x2f0
   135e8:	ldrd	r2, [r3, #-8]
   135ec:	adds	r1, r2, #1
   135f0:	str	r1, [fp, #-1316]	; 0xfffffadc
   135f4:	adc	r3, r3, #0
   135f8:	str	r3, [fp, #-1312]	; 0xfffffae0
   135fc:	ldr	r3, [pc, #3568]	; 143f4 <next@@Base+0xf6c>
   13600:	add	r3, pc, r3
   13604:	add	r3, r3, #752	; 0x2f0
   13608:	sub	r2, fp, #1312	; 0x520
   1360c:	sub	r2, r2, #4
   13610:	ldrd	r0, [r2]
   13614:	strd	r0, [r3, #-8]
   13618:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1361c:	cmp	r3, #5
   13620:	addls	pc, pc, r3, lsl #2
   13624:	b	15760 <next@@Base+0x22d8>
   13628:	b	13640 <next@@Base+0x1b8>
   1362c:	b	14a7c <next@@Base+0x15f4>
   13630:	b	14c34 <next@@Base+0x17ac>
   13634:	b	14e98 <next@@Base+0x1a10>
   13638:	b	15158 <next@@Base+0x1cd0>
   1363c:	b	15514 <next@@Base+0x208c>
   13640:	ldr	r3, [pc, #3504]	; 143f8 <next@@Base+0xf70>
   13644:	add	r3, pc, r3
   13648:	ldrd	r2, [r3, #32]
   1364c:	adds	r1, r2, #1
   13650:	str	r1, [fp, #-604]	; 0xfffffda4
   13654:	adc	r3, r3, #0
   13658:	str	r3, [fp, #-600]	; 0xfffffda8
   1365c:	ldr	r3, [pc, #3480]	; 143fc <next@@Base+0xf74>
   13660:	add	r3, pc, r3
   13664:	sub	r2, fp, #604	; 0x25c
   13668:	ldrd	r0, [r2]
   1366c:	strd	r0, [r3, #32]
   13670:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13674:	cmp	r3, #9
   13678:	beq	136f4 <next@@Base+0x26c>
   1367c:	ldr	r3, [pc, #3452]	; 14400 <next@@Base+0xf78>
   13680:	add	r3, pc, r3
   13684:	ldrd	r2, [r3, #80]	; 0x50
   13688:	adds	r1, r2, #1
   1368c:	str	r1, [fp, #-652]	; 0xfffffd74
   13690:	adc	r3, r3, #0
   13694:	str	r3, [fp, #-648]	; 0xfffffd78
   13698:	ldr	r3, [pc, #3428]	; 14404 <next@@Base+0xf7c>
   1369c:	add	r3, pc, r3
   136a0:	sub	r2, fp, #652	; 0x28c
   136a4:	ldrd	r0, [r2]
   136a8:	strd	r0, [r3, #80]	; 0x50
   136ac:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   136b0:	cmp	r3, #32
   136b4:	beq	136f4 <next@@Base+0x26c>
   136b8:	ldr	r3, [pc, #3400]	; 14408 <next@@Base+0xf80>
   136bc:	add	r3, pc, r3
   136c0:	ldrd	r2, [r3, #88]	; 0x58
   136c4:	adds	r1, r2, #1
   136c8:	str	r1, [fp, #-660]	; 0xfffffd6c
   136cc:	adc	r3, r3, #0
   136d0:	str	r3, [fp, #-656]	; 0xfffffd70
   136d4:	ldr	r3, [pc, #3376]	; 1440c <next@@Base+0xf84>
   136d8:	add	r3, pc, r3
   136dc:	sub	r2, fp, #660	; 0x294
   136e0:	ldrd	r0, [r2]
   136e4:	strd	r0, [r3, #88]	; 0x58
   136e8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   136ec:	cmp	r3, #10
   136f0:	bne	13708 <next@@Base+0x280>
   136f4:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   136f8:	bl	13258 <get_char@@Base>
   136fc:	mov	r3, r0
   13700:	strb	r3, [fp, #-49]	; 0xffffffcf
   13704:	b	14a3c <next@@Base+0x15b4>
   13708:	ldr	r3, [pc, #3328]	; 14410 <next@@Base+0xf88>
   1370c:	add	r3, pc, r3
   13710:	ldrd	r2, [r3, #96]	; 0x60
   13714:	adds	r1, r2, #1
   13718:	str	r1, [fp, #-668]	; 0xfffffd64
   1371c:	adc	r3, r3, #0
   13720:	str	r3, [fp, #-664]	; 0xfffffd68
   13724:	ldr	r3, [pc, #3304]	; 14414 <next@@Base+0xf8c>
   13728:	add	r3, pc, r3
   1372c:	sub	r2, fp, #668	; 0x29c
   13730:	ldrd	r0, [r2]
   13734:	strd	r0, [r3, #96]	; 0x60
   13738:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1373c:	cmp	r3, #48	; 0x30
   13740:	bne	137c8 <next@@Base+0x340>
   13744:	ldr	r3, [pc, #3276]	; 14418 <next@@Base+0xf90>
   13748:	add	r3, pc, r3
   1374c:	ldrd	r2, [r3, #104]	; 0x68
   13750:	adds	r1, r2, #1
   13754:	str	r1, [fp, #-676]	; 0xfffffd5c
   13758:	adc	r3, r3, #0
   1375c:	str	r3, [fp, #-672]	; 0xfffffd60
   13760:	ldr	r3, [pc, #3252]	; 1441c <next@@Base+0xf94>
   13764:	add	r3, pc, r3
   13768:	sub	r2, fp, #676	; 0x2a4
   1376c:	ldrd	r0, [r2]
   13770:	strd	r0, [r3, #104]	; 0x68
   13774:	mov	r0, #8
   13778:	bl	11918 <malloc@plt>
   1377c:	mov	r3, r0
   13780:	str	r3, [fp, #-56]	; 0xffffffc8
   13784:	mov	r1, #0
   13788:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1378c:	bl	125c4 <init_token_int_value@@Base>
   13790:	ldr	r3, [pc, #3208]	; 14420 <next@@Base+0xf98>
   13794:	add	r3, pc, r3
   13798:	ldrd	r2, [r3, #112]	; 0x70
   1379c:	adds	r1, r2, #1
   137a0:	str	r1, [fp, #-684]	; 0xfffffd54
   137a4:	adc	r3, r3, #0
   137a8:	str	r3, [fp, #-680]	; 0xfffffd58
   137ac:	ldr	r3, [pc, #3184]	; 14424 <next@@Base+0xf9c>
   137b0:	add	r3, pc, r3
   137b4:	sub	r2, fp, #684	; 0x2ac
   137b8:	ldrd	r0, [r2]
   137bc:	strd	r0, [r3, #112]	; 0x70
   137c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   137c4:	b	157c4 <next@@Base+0x233c>
   137c8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   137cc:	cmp	r3, #48	; 0x30
   137d0:	bls	138a8 <next@@Base+0x420>
   137d4:	ldr	r3, [pc, #3148]	; 14428 <next@@Base+0xfa0>
   137d8:	add	r3, pc, r3
   137dc:	ldrd	r2, [r3, #120]	; 0x78
   137e0:	adds	r1, r2, #1
   137e4:	str	r1, [fp, #-692]	; 0xfffffd4c
   137e8:	adc	r3, r3, #0
   137ec:	str	r3, [fp, #-688]	; 0xfffffd50
   137f0:	ldr	r3, [pc, #3124]	; 1442c <next@@Base+0xfa4>
   137f4:	add	r3, pc, r3
   137f8:	sub	r2, fp, #692	; 0x2b4
   137fc:	ldrd	r0, [r2]
   13800:	strd	r0, [r3, #120]	; 0x78
   13804:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13808:	cmp	r3, #57	; 0x39
   1380c:	bhi	138a8 <next@@Base+0x420>
   13810:	ldr	r3, [pc, #3096]	; 14430 <next@@Base+0xfa8>
   13814:	add	r3, pc, r3
   13818:	ldrd	r2, [r3, #128]	; 0x80
   1381c:	adds	r1, r2, #1
   13820:	str	r1, [fp, #-700]	; 0xfffffd44
   13824:	adc	r3, r3, #0
   13828:	str	r3, [fp, #-696]	; 0xfffffd48
   1382c:	ldr	r3, [pc, #3072]	; 14434 <next@@Base+0xfac>
   13830:	add	r3, pc, r3
   13834:	sub	r2, fp, #700	; 0x2bc
   13838:	ldrd	r0, [r2]
   1383c:	strd	r0, [r3, #128]	; 0x80
   13840:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13844:	add	r3, r2, #1
   13848:	str	r3, [fp, #-44]	; 0xffffffd4
   1384c:	sub	r3, fp, #36	; 0x24
   13850:	add	r2, r3, r2
   13854:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13858:	strb	r3, [r2, #-540]	; 0xfffffde4
   1385c:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   13860:	bl	13258 <get_char@@Base>
   13864:	mov	r3, r0
   13868:	strb	r3, [fp, #-49]	; 0xffffffcf
   1386c:	ldr	r3, [pc, #3012]	; 14438 <next@@Base+0xfb0>
   13870:	add	r3, pc, r3
   13874:	ldrd	r2, [r3, #136]	; 0x88
   13878:	adds	r1, r2, #1
   1387c:	str	r1, [fp, #-708]	; 0xfffffd3c
   13880:	adc	r3, r3, #0
   13884:	str	r3, [fp, #-704]	; 0xfffffd40
   13888:	ldr	r3, [pc, #2988]	; 1443c <next@@Base+0xfb4>
   1388c:	add	r3, pc, r3
   13890:	sub	r2, fp, #708	; 0x2c4
   13894:	ldrd	r0, [r2]
   13898:	strd	r0, [r3, #136]	; 0x88
   1389c:	mov	r3, #1
   138a0:	str	r3, [fp, #-48]	; 0xffffffd0
   138a4:	b	14a3c <next@@Base+0x15b4>
   138a8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   138ac:	cmp	r3, #40	; 0x28
   138b0:	bne	13934 <next@@Base+0x4ac>
   138b4:	ldr	r3, [pc, #2948]	; 14440 <next@@Base+0xfb8>
   138b8:	add	r3, pc, r3
   138bc:	ldrd	r2, [r3, #144]	; 0x90
   138c0:	adds	r1, r2, #1
   138c4:	str	r1, [fp, #-716]	; 0xfffffd34
   138c8:	adc	r3, r3, #0
   138cc:	str	r3, [fp, #-712]	; 0xfffffd38
   138d0:	ldr	r3, [pc, #2924]	; 14444 <next@@Base+0xfbc>
   138d4:	add	r3, pc, r3
   138d8:	sub	r2, fp, #716	; 0x2cc
   138dc:	ldrd	r0, [r2]
   138e0:	strd	r0, [r3, #144]	; 0x90
   138e4:	mov	r0, #4
   138e8:	bl	11918 <malloc@plt>
   138ec:	mov	r3, r0
   138f0:	str	r3, [fp, #-56]	; 0xffffffc8
   138f4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   138f8:	bl	126a4 <init_token_opar@@Base>
   138fc:	ldr	r3, [pc, #2884]	; 14448 <next@@Base+0xfc0>
   13900:	add	r3, pc, r3
   13904:	ldrd	r2, [r3, #152]	; 0x98
   13908:	adds	r1, r2, #1
   1390c:	str	r1, [fp, #-724]	; 0xfffffd2c
   13910:	adc	r3, r3, #0
   13914:	str	r3, [fp, #-720]	; 0xfffffd30
   13918:	ldr	r3, [pc, #2860]	; 1444c <next@@Base+0xfc4>
   1391c:	add	r3, pc, r3
   13920:	sub	r2, fp, #724	; 0x2d4
   13924:	ldrd	r0, [r2]
   13928:	strd	r0, [r3, #152]	; 0x98
   1392c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13930:	b	157c4 <next@@Base+0x233c>
   13934:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13938:	cmp	r3, #41	; 0x29
   1393c:	bne	139c0 <next@@Base+0x538>
   13940:	ldr	r3, [pc, #2824]	; 14450 <next@@Base+0xfc8>
   13944:	add	r3, pc, r3
   13948:	ldrd	r2, [r3, #160]	; 0xa0
   1394c:	adds	r1, r2, #1
   13950:	str	r1, [fp, #-732]	; 0xfffffd24
   13954:	adc	r3, r3, #0
   13958:	str	r3, [fp, #-728]	; 0xfffffd28
   1395c:	ldr	r3, [pc, #2800]	; 14454 <next@@Base+0xfcc>
   13960:	add	r3, pc, r3
   13964:	sub	r2, fp, #732	; 0x2dc
   13968:	ldrd	r0, [r2]
   1396c:	strd	r0, [r3, #160]	; 0xa0
   13970:	mov	r0, #4
   13974:	bl	11918 <malloc@plt>
   13978:	mov	r3, r0
   1397c:	str	r3, [fp, #-56]	; 0xffffffc8
   13980:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13984:	bl	12704 <init_token_cpar@@Base>
   13988:	ldr	r3, [pc, #2760]	; 14458 <next@@Base+0xfd0>
   1398c:	add	r3, pc, r3
   13990:	ldrd	r2, [r3, #168]	; 0xa8
   13994:	adds	r1, r2, #1
   13998:	str	r1, [fp, #-740]	; 0xfffffd1c
   1399c:	adc	r3, r3, #0
   139a0:	str	r3, [fp, #-736]	; 0xfffffd20
   139a4:	ldr	r3, [pc, #2736]	; 1445c <next@@Base+0xfd4>
   139a8:	add	r3, pc, r3
   139ac:	sub	r2, fp, #740	; 0x2e4
   139b0:	ldrd	r0, [r2]
   139b4:	strd	r0, [r3, #168]	; 0xa8
   139b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   139bc:	b	157c4 <next@@Base+0x233c>
   139c0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   139c4:	cmp	r3, #123	; 0x7b
   139c8:	bne	13a4c <next@@Base+0x5c4>
   139cc:	ldr	r3, [pc, #2700]	; 14460 <next@@Base+0xfd8>
   139d0:	add	r3, pc, r3
   139d4:	ldrd	r2, [r3, #176]	; 0xb0
   139d8:	adds	r1, r2, #1
   139dc:	str	r1, [fp, #-748]	; 0xfffffd14
   139e0:	adc	r3, r3, #0
   139e4:	str	r3, [fp, #-744]	; 0xfffffd18
   139e8:	ldr	r3, [pc, #2676]	; 14464 <next@@Base+0xfdc>
   139ec:	add	r3, pc, r3
   139f0:	sub	r2, fp, #748	; 0x2ec
   139f4:	ldrd	r0, [r2]
   139f8:	strd	r0, [r3, #176]	; 0xb0
   139fc:	mov	r0, #4
   13a00:	bl	11918 <malloc@plt>
   13a04:	mov	r3, r0
   13a08:	str	r3, [fp, #-56]	; 0xffffffc8
   13a0c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13a10:	bl	12764 <init_token_obra@@Base>
   13a14:	ldr	r3, [pc, #2636]	; 14468 <next@@Base+0xfe0>
   13a18:	add	r3, pc, r3
   13a1c:	ldrd	r2, [r3, #184]	; 0xb8
   13a20:	adds	r1, r2, #1
   13a24:	str	r1, [fp, #-756]	; 0xfffffd0c
   13a28:	adc	r3, r3, #0
   13a2c:	str	r3, [fp, #-752]	; 0xfffffd10
   13a30:	ldr	r3, [pc, #2612]	; 1446c <next@@Base+0xfe4>
   13a34:	add	r3, pc, r3
   13a38:	sub	r2, fp, #756	; 0x2f4
   13a3c:	ldrd	r0, [r2]
   13a40:	strd	r0, [r3, #184]	; 0xb8
   13a44:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13a48:	b	157c4 <next@@Base+0x233c>
   13a4c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13a50:	cmp	r3, #125	; 0x7d
   13a54:	bne	13ad8 <next@@Base+0x650>
   13a58:	ldr	r3, [pc, #2576]	; 14470 <next@@Base+0xfe8>
   13a5c:	add	r3, pc, r3
   13a60:	ldrd	r2, [r3, #192]	; 0xc0
   13a64:	adds	r1, r2, #1
   13a68:	str	r1, [fp, #-764]	; 0xfffffd04
   13a6c:	adc	r3, r3, #0
   13a70:	str	r3, [fp, #-760]	; 0xfffffd08
   13a74:	ldr	r3, [pc, #2552]	; 14474 <next@@Base+0xfec>
   13a78:	add	r3, pc, r3
   13a7c:	sub	r2, fp, #764	; 0x2fc
   13a80:	ldrd	r0, [r2]
   13a84:	strd	r0, [r3, #192]	; 0xc0
   13a88:	mov	r0, #4
   13a8c:	bl	11918 <malloc@plt>
   13a90:	mov	r3, r0
   13a94:	str	r3, [fp, #-56]	; 0xffffffc8
   13a98:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13a9c:	bl	127c4 <init_token_cbra@@Base>
   13aa0:	ldr	r3, [pc, #2512]	; 14478 <next@@Base+0xff0>
   13aa4:	add	r3, pc, r3
   13aa8:	ldrd	r2, [r3, #200]	; 0xc8
   13aac:	adds	r1, r2, #1
   13ab0:	str	r1, [fp, #-772]	; 0xfffffcfc
   13ab4:	adc	r3, r3, #0
   13ab8:	str	r3, [fp, #-768]	; 0xfffffd00
   13abc:	ldr	r3, [pc, #2488]	; 1447c <next@@Base+0xff4>
   13ac0:	add	r3, pc, r3
   13ac4:	sub	r2, fp, #772	; 0x304
   13ac8:	ldrd	r0, [r2]
   13acc:	strd	r0, [r3, #200]	; 0xc8
   13ad0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13ad4:	b	157c4 <next@@Base+0x233c>
   13ad8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13adc:	cmp	r3, #59	; 0x3b
   13ae0:	bne	13b64 <next@@Base+0x6dc>
   13ae4:	ldr	r3, [pc, #2452]	; 14480 <next@@Base+0xff8>
   13ae8:	add	r3, pc, r3
   13aec:	ldrd	r2, [r3, #208]	; 0xd0
   13af0:	adds	r1, r2, #1
   13af4:	str	r1, [fp, #-780]	; 0xfffffcf4
   13af8:	adc	r3, r3, #0
   13afc:	str	r3, [fp, #-776]	; 0xfffffcf8
   13b00:	ldr	r3, [pc, #2428]	; 14484 <next@@Base+0xffc>
   13b04:	add	r3, pc, r3
   13b08:	sub	r2, fp, #780	; 0x30c
   13b0c:	ldrd	r0, [r2]
   13b10:	strd	r0, [r3, #208]	; 0xd0
   13b14:	mov	r0, #4
   13b18:	bl	11918 <malloc@plt>
   13b1c:	mov	r3, r0
   13b20:	str	r3, [fp, #-56]	; 0xffffffc8
   13b24:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13b28:	bl	12884 <init_token_semicolon@@Base>
   13b2c:	ldr	r3, [pc, #2388]	; 14488 <next@@Base+0x1000>
   13b30:	add	r3, pc, r3
   13b34:	ldrd	r2, [r3, #216]	; 0xd8
   13b38:	adds	r1, r2, #1
   13b3c:	str	r1, [fp, #-788]	; 0xfffffcec
   13b40:	adc	r3, r3, #0
   13b44:	str	r3, [fp, #-784]	; 0xfffffcf0
   13b48:	ldr	r3, [pc, #2364]	; 1448c <next@@Base+0x1004>
   13b4c:	add	r3, pc, r3
   13b50:	sub	r2, fp, #788	; 0x314
   13b54:	ldrd	r0, [r2]
   13b58:	strd	r0, [r3, #216]	; 0xd8
   13b5c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13b60:	b	157c4 <next@@Base+0x233c>
   13b64:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13b68:	cmp	r3, #101	; 0x65
   13b6c:	bne	13c08 <next@@Base+0x780>
   13b70:	ldr	r3, [pc, #2328]	; 14490 <next@@Base+0x1008>
   13b74:	add	r3, pc, r3
   13b78:	ldrd	r2, [r3, #224]	; 0xe0
   13b7c:	adds	r1, r2, #1
   13b80:	str	r1, [fp, #-796]	; 0xfffffce4
   13b84:	adc	r3, r3, #0
   13b88:	str	r3, [fp, #-792]	; 0xfffffce8
   13b8c:	ldr	r3, [pc, #2304]	; 14494 <next@@Base+0x100c>
   13b90:	add	r3, pc, r3
   13b94:	sub	r2, fp, #796	; 0x31c
   13b98:	ldrd	r0, [r2]
   13b9c:	strd	r0, [r3, #224]	; 0xe0
   13ba0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13ba4:	add	r3, r2, #1
   13ba8:	str	r3, [fp, #-44]	; 0xffffffd4
   13bac:	sub	r3, fp, #36	; 0x24
   13bb0:	add	r2, r3, r2
   13bb4:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13bb8:	strb	r3, [r2, #-540]	; 0xfffffde4
   13bbc:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   13bc0:	bl	13258 <get_char@@Base>
   13bc4:	mov	r3, r0
   13bc8:	strb	r3, [fp, #-49]	; 0xffffffcf
   13bcc:	ldr	r3, [pc, #2244]	; 14498 <next@@Base+0x1010>
   13bd0:	add	r3, pc, r3
   13bd4:	ldrd	r2, [r3, #232]	; 0xe8
   13bd8:	adds	r1, r2, #1
   13bdc:	str	r1, [fp, #-804]	; 0xfffffcdc
   13be0:	adc	r3, r3, #0
   13be4:	str	r3, [fp, #-800]	; 0xfffffce0
   13be8:	ldr	r3, [pc, #2220]	; 1449c <next@@Base+0x1014>
   13bec:	add	r3, pc, r3
   13bf0:	sub	r2, fp, #804	; 0x324
   13bf4:	ldrd	r0, [r2]
   13bf8:	strd	r0, [r3, #232]	; 0xe8
   13bfc:	mov	r3, #5
   13c00:	str	r3, [fp, #-48]	; 0xffffffd0
   13c04:	b	14a3c <next@@Base+0x15b4>
   13c08:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13c0c:	cmp	r3, #105	; 0x69
   13c10:	bne	13cac <next@@Base+0x824>
   13c14:	ldr	r3, [pc, #2180]	; 144a0 <next@@Base+0x1018>
   13c18:	add	r3, pc, r3
   13c1c:	ldrd	r2, [r3, #240]	; 0xf0
   13c20:	adds	r1, r2, #1
   13c24:	str	r1, [fp, #-812]	; 0xfffffcd4
   13c28:	adc	r3, r3, #0
   13c2c:	str	r3, [fp, #-808]	; 0xfffffcd8
   13c30:	ldr	r3, [pc, #2156]	; 144a4 <next@@Base+0x101c>
   13c34:	add	r3, pc, r3
   13c38:	sub	r2, fp, #812	; 0x32c
   13c3c:	ldrd	r0, [r2]
   13c40:	strd	r0, [r3, #240]	; 0xf0
   13c44:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13c48:	add	r3, r2, #1
   13c4c:	str	r3, [fp, #-44]	; 0xffffffd4
   13c50:	sub	r3, fp, #36	; 0x24
   13c54:	add	r2, r3, r2
   13c58:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13c5c:	strb	r3, [r2, #-540]	; 0xfffffde4
   13c60:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   13c64:	bl	13258 <get_char@@Base>
   13c68:	mov	r3, r0
   13c6c:	strb	r3, [fp, #-49]	; 0xffffffcf
   13c70:	ldr	r3, [pc, #2096]	; 144a8 <next@@Base+0x1020>
   13c74:	add	r3, pc, r3
   13c78:	ldrd	r2, [r3, #248]	; 0xf8
   13c7c:	adds	r1, r2, #1
   13c80:	str	r1, [fp, #-820]	; 0xfffffccc
   13c84:	adc	r3, r3, #0
   13c88:	str	r3, [fp, #-816]	; 0xfffffcd0
   13c8c:	ldr	r3, [pc, #2072]	; 144ac <next@@Base+0x1024>
   13c90:	add	r3, pc, r3
   13c94:	sub	r2, fp, #820	; 0x334
   13c98:	ldrd	r0, [r2]
   13c9c:	strd	r0, [r3, #248]	; 0xf8
   13ca0:	mov	r3, #2
   13ca4:	str	r3, [fp, #-48]	; 0xffffffd0
   13ca8:	b	14a3c <next@@Base+0x15b4>
   13cac:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13cb0:	cmp	r3, #109	; 0x6d
   13cb4:	bne	13d60 <next@@Base+0x8d8>
   13cb8:	ldr	r3, [pc, #2032]	; 144b0 <next@@Base+0x1028>
   13cbc:	add	r3, pc, r3
   13cc0:	add	r3, r3, #256	; 0x100
   13cc4:	ldrd	r2, [r3]
   13cc8:	adds	r1, r2, #1
   13ccc:	str	r1, [fp, #-828]	; 0xfffffcc4
   13cd0:	adc	r3, r3, #0
   13cd4:	str	r3, [fp, #-824]	; 0xfffffcc8
   13cd8:	ldr	r3, [pc, #2004]	; 144b4 <next@@Base+0x102c>
   13cdc:	add	r3, pc, r3
   13ce0:	add	r3, r3, #256	; 0x100
   13ce4:	sub	r2, fp, #828	; 0x33c
   13ce8:	ldrd	r0, [r2]
   13cec:	strd	r0, [r3]
   13cf0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13cf4:	add	r3, r2, #1
   13cf8:	str	r3, [fp, #-44]	; 0xffffffd4
   13cfc:	sub	r3, fp, #36	; 0x24
   13d00:	add	r2, r3, r2
   13d04:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13d08:	strb	r3, [r2, #-540]	; 0xfffffde4
   13d0c:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   13d10:	bl	13258 <get_char@@Base>
   13d14:	mov	r3, r0
   13d18:	strb	r3, [fp, #-49]	; 0xffffffcf
   13d1c:	ldr	r3, [pc, #1940]	; 144b8 <next@@Base+0x1030>
   13d20:	add	r3, pc, r3
   13d24:	add	r3, r3, #272	; 0x110
   13d28:	ldrd	r2, [r3, #-8]
   13d2c:	adds	r1, r2, #1
   13d30:	str	r1, [fp, #-836]	; 0xfffffcbc
   13d34:	adc	r3, r3, #0
   13d38:	str	r3, [fp, #-832]	; 0xfffffcc0
   13d3c:	ldr	r3, [pc, #1912]	; 144bc <next@@Base+0x1034>
   13d40:	add	r3, pc, r3
   13d44:	add	r3, r3, #272	; 0x110
   13d48:	sub	r2, fp, #836	; 0x344
   13d4c:	ldrd	r0, [r2]
   13d50:	strd	r0, [r3, #-8]
   13d54:	mov	r3, #3
   13d58:	str	r3, [fp, #-48]	; 0xffffffd0
   13d5c:	b	14a3c <next@@Base+0x15b4>
   13d60:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13d64:	cmp	r3, #114	; 0x72
   13d68:	bne	13e14 <next@@Base+0x98c>
   13d6c:	ldr	r3, [pc, #1868]	; 144c0 <next@@Base+0x1038>
   13d70:	add	r3, pc, r3
   13d74:	add	r3, r3, #272	; 0x110
   13d78:	ldrd	r2, [r3]
   13d7c:	adds	r1, r2, #1
   13d80:	str	r1, [fp, #-844]	; 0xfffffcb4
   13d84:	adc	r3, r3, #0
   13d88:	str	r3, [fp, #-840]	; 0xfffffcb8
   13d8c:	ldr	r3, [pc, #1840]	; 144c4 <next@@Base+0x103c>
   13d90:	add	r3, pc, r3
   13d94:	add	r3, r3, #272	; 0x110
   13d98:	sub	r2, fp, #844	; 0x34c
   13d9c:	ldrd	r0, [r2]
   13da0:	strd	r0, [r3]
   13da4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13da8:	add	r3, r2, #1
   13dac:	str	r3, [fp, #-44]	; 0xffffffd4
   13db0:	sub	r3, fp, #36	; 0x24
   13db4:	add	r2, r3, r2
   13db8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13dbc:	strb	r3, [r2, #-540]	; 0xfffffde4
   13dc0:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   13dc4:	bl	13258 <get_char@@Base>
   13dc8:	mov	r3, r0
   13dcc:	strb	r3, [fp, #-49]	; 0xffffffcf
   13dd0:	ldr	r3, [pc, #1776]	; 144c8 <next@@Base+0x1040>
   13dd4:	add	r3, pc, r3
   13dd8:	add	r3, r3, #288	; 0x120
   13ddc:	ldrd	r2, [r3, #-8]
   13de0:	adds	r1, r2, #1
   13de4:	str	r1, [fp, #-852]	; 0xfffffcac
   13de8:	adc	r3, r3, #0
   13dec:	str	r3, [fp, #-848]	; 0xfffffcb0
   13df0:	ldr	r3, [pc, #1748]	; 144cc <next@@Base+0x1044>
   13df4:	add	r3, pc, r3
   13df8:	add	r3, r3, #288	; 0x120
   13dfc:	sub	r2, fp, #852	; 0x354
   13e00:	ldrd	r0, [r2]
   13e04:	strd	r0, [r3, #-8]
   13e08:	mov	r3, #4
   13e0c:	str	r3, [fp, #-48]	; 0xffffffd0
   13e10:	b	14a3c <next@@Base+0x15b4>
   13e14:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13e18:	cmp	r3, #33	; 0x21
   13e1c:	bne	14008 <next@@Base+0xb80>
   13e20:	ldr	r3, [pc, #1704]	; 144d0 <next@@Base+0x1048>
   13e24:	add	r3, pc, r3
   13e28:	add	r3, r3, #288	; 0x120
   13e2c:	ldrd	r2, [r3]
   13e30:	adds	r1, r2, #1
   13e34:	str	r1, [fp, #-860]	; 0xfffffca4
   13e38:	adc	r3, r3, #0
   13e3c:	str	r3, [fp, #-856]	; 0xfffffca8
   13e40:	ldr	r3, [pc, #1676]	; 144d4 <next@@Base+0x104c>
   13e44:	add	r3, pc, r3
   13e48:	add	r3, r3, #288	; 0x120
   13e4c:	sub	r2, fp, #860	; 0x35c
   13e50:	ldrd	r0, [r2]
   13e54:	strd	r0, [r3]
   13e58:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13e5c:	add	r2, r3, #1
   13e60:	str	r2, [fp, #-44]	; 0xffffffd4
   13e64:	sub	r2, fp, #36	; 0x24
   13e68:	add	r3, r2, r3
   13e6c:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   13e70:	strb	r2, [r3, #-540]	; 0xfffffde4
   13e74:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   13e78:	bl	13258 <get_char@@Base>
   13e7c:	mov	r3, r0
   13e80:	strb	r3, [fp, #-49]	; 0xffffffcf
   13e84:	ldr	r3, [pc, #1612]	; 144d8 <next@@Base+0x1050>
   13e88:	add	r3, pc, r3
   13e8c:	add	r3, r3, #304	; 0x130
   13e90:	ldrd	r2, [r3, #-8]
   13e94:	adds	r1, r2, #1
   13e98:	str	r1, [fp, #-868]	; 0xfffffc9c
   13e9c:	adc	r3, r3, #0
   13ea0:	str	r3, [fp, #-864]	; 0xfffffca0
   13ea4:	ldr	r3, [pc, #1584]	; 144dc <next@@Base+0x1054>
   13ea8:	add	r3, pc, r3
   13eac:	add	r3, r3, #304	; 0x130
   13eb0:	sub	r2, fp, #868	; 0x364
   13eb4:	ldrd	r0, [r2]
   13eb8:	strd	r0, [r3, #-8]
   13ebc:	mov	r0, #8
   13ec0:	bl	11918 <malloc@plt>
   13ec4:	mov	r3, r0
   13ec8:	str	r3, [fp, #-56]	; 0xffffffc8
   13ecc:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13ed0:	cmp	r3, #61	; 0x3d
   13ed4:	beq	13f48 <next@@Base+0xac0>
   13ed8:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   13edc:	bl	133f4 <push_back_one_char@@Base>
   13ee0:	ldr	r3, [pc, #1528]	; 144e0 <next@@Base+0x1058>
   13ee4:	add	r3, pc, r3
   13ee8:	add	r3, r3, #304	; 0x130
   13eec:	ldrd	r2, [r3]
   13ef0:	adds	r1, r2, #1
   13ef4:	str	r1, [fp, #-876]	; 0xfffffc94
   13ef8:	adc	r3, r3, #0
   13efc:	str	r3, [fp, #-872]	; 0xfffffc98
   13f00:	ldr	r3, [pc, #1500]	; 144e4 <next@@Base+0x105c>
   13f04:	add	r3, pc, r3
   13f08:	add	r3, r3, #304	; 0x130
   13f0c:	sub	r2, fp, #876	; 0x36c
   13f10:	ldrd	r0, [r2]
   13f14:	strd	r0, [r3]
   13f18:	mov	r0, #2
   13f1c:	bl	11918 <malloc@plt>
   13f20:	mov	r3, r0
   13f24:	str	r3, [fp, #-40]	; 0xffffffd8
   13f28:	ldrb	r2, [fp, #-576]	; 0xfffffdc0
   13f2c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13f30:	strb	r2, [r3]
   13f34:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13f38:	add	r3, r3, #1
   13f3c:	mov	r2, #0
   13f40:	strb	r2, [r3]
   13f44:	b	13fbc <next@@Base+0xb34>
   13f48:	mov	r0, #3
   13f4c:	bl	11918 <malloc@plt>
   13f50:	mov	r3, r0
   13f54:	str	r3, [fp, #-40]	; 0xffffffd8
   13f58:	ldrb	r2, [fp, #-576]	; 0xfffffdc0
   13f5c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13f60:	strb	r2, [r3]
   13f64:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13f68:	add	r3, r3, #1
   13f6c:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   13f70:	strb	r2, [r3]
   13f74:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13f78:	add	r3, r3, #2
   13f7c:	mov	r2, #0
   13f80:	strb	r2, [r3]
   13f84:	ldr	r3, [pc, #1372]	; 144e8 <next@@Base+0x1060>
   13f88:	add	r3, pc, r3
   13f8c:	add	r3, r3, #320	; 0x140
   13f90:	ldrd	r2, [r3, #-8]
   13f94:	adds	r1, r2, #1
   13f98:	str	r1, [fp, #-884]	; 0xfffffc8c
   13f9c:	adc	r3, r3, #0
   13fa0:	str	r3, [fp, #-880]	; 0xfffffc90
   13fa4:	ldr	r3, [pc, #1344]	; 144ec <next@@Base+0x1064>
   13fa8:	add	r3, pc, r3
   13fac:	add	r3, r3, #320	; 0x140
   13fb0:	sub	r2, fp, #884	; 0x374
   13fb4:	ldrd	r0, [r2]
   13fb8:	strd	r0, [r3, #-8]
   13fbc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   13fc0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13fc4:	bl	12a04 <init_token_boolean_op@@Base>
   13fc8:	ldr	r3, [pc, #1312]	; 144f0 <next@@Base+0x1068>
   13fcc:	add	r3, pc, r3
   13fd0:	add	r3, r3, #320	; 0x140
   13fd4:	ldrd	r2, [r3]
   13fd8:	adds	r1, r2, #1
   13fdc:	str	r1, [fp, #-892]	; 0xfffffc84
   13fe0:	adc	r3, r3, #0
   13fe4:	str	r3, [fp, #-888]	; 0xfffffc88
   13fe8:	ldr	r3, [pc, #1284]	; 144f4 <next@@Base+0x106c>
   13fec:	add	r3, pc, r3
   13ff0:	add	r3, r3, #320	; 0x140
   13ff4:	sub	r2, fp, #892	; 0x37c
   13ff8:	ldrd	r0, [r2]
   13ffc:	strd	r0, [r3]
   14000:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14004:	b	157c4 <next@@Base+0x233c>
   14008:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1400c:	cmp	r3, #60	; 0x3c
   14010:	beq	14058 <next@@Base+0xbd0>
   14014:	ldr	r3, [pc, #1244]	; 144f8 <next@@Base+0x1070>
   14018:	add	r3, pc, r3
   1401c:	add	r3, r3, #336	; 0x150
   14020:	ldrd	r2, [r3, #-8]
   14024:	adds	r1, r2, #1
   14028:	str	r1, [fp, #-900]	; 0xfffffc7c
   1402c:	adc	r3, r3, #0
   14030:	str	r3, [fp, #-896]	; 0xfffffc80
   14034:	ldr	r3, [pc, #1216]	; 144fc <next@@Base+0x1074>
   14038:	add	r3, pc, r3
   1403c:	add	r3, r3, #336	; 0x150
   14040:	sub	r2, fp, #900	; 0x384
   14044:	ldrd	r0, [r2]
   14048:	strd	r0, [r3, #-8]
   1404c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14050:	cmp	r3, #62	; 0x3e
   14054:	bne	14208 <next@@Base+0xd80>
   14058:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1405c:	add	r2, r3, #1
   14060:	str	r2, [fp, #-44]	; 0xffffffd4
   14064:	sub	r2, fp, #36	; 0x24
   14068:	add	r3, r2, r3
   1406c:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   14070:	strb	r2, [r3, #-540]	; 0xfffffde4
   14074:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   14078:	bl	13258 <get_char@@Base>
   1407c:	mov	r3, r0
   14080:	strb	r3, [fp, #-49]	; 0xffffffcf
   14084:	ldr	r3, [pc, #1140]	; 14500 <next@@Base+0x1078>
   14088:	add	r3, pc, r3
   1408c:	add	r3, r3, #352	; 0x160
   14090:	ldrd	r2, [r3, #-8]
   14094:	adds	r1, r2, #1
   14098:	str	r1, [fp, #-916]	; 0xfffffc6c
   1409c:	adc	r3, r3, #0
   140a0:	str	r3, [fp, #-912]	; 0xfffffc70
   140a4:	ldr	r3, [pc, #1112]	; 14504 <next@@Base+0x107c>
   140a8:	add	r3, pc, r3
   140ac:	add	r3, r3, #352	; 0x160
   140b0:	sub	r2, fp, #916	; 0x394
   140b4:	ldrd	r0, [r2]
   140b8:	strd	r0, [r3, #-8]
   140bc:	mov	r0, #8
   140c0:	bl	11918 <malloc@plt>
   140c4:	mov	r3, r0
   140c8:	str	r3, [fp, #-56]	; 0xffffffc8
   140cc:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   140d0:	cmp	r3, #61	; 0x3d
   140d4:	beq	14148 <next@@Base+0xcc0>
   140d8:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   140dc:	bl	133f4 <push_back_one_char@@Base>
   140e0:	ldr	r3, [pc, #1056]	; 14508 <next@@Base+0x1080>
   140e4:	add	r3, pc, r3
   140e8:	add	r3, r3, #352	; 0x160
   140ec:	ldrd	r2, [r3]
   140f0:	adds	r1, r2, #1
   140f4:	str	r1, [fp, #-924]	; 0xfffffc64
   140f8:	adc	r3, r3, #0
   140fc:	str	r3, [fp, #-920]	; 0xfffffc68
   14100:	ldr	r3, [pc, #1028]	; 1450c <next@@Base+0x1084>
   14104:	add	r3, pc, r3
   14108:	add	r3, r3, #352	; 0x160
   1410c:	sub	r2, fp, #924	; 0x39c
   14110:	ldrd	r0, [r2]
   14114:	strd	r0, [r3]
   14118:	mov	r0, #2
   1411c:	bl	11918 <malloc@plt>
   14120:	mov	r3, r0
   14124:	str	r3, [fp, #-40]	; 0xffffffd8
   14128:	ldrb	r2, [fp, #-576]	; 0xfffffdc0
   1412c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14130:	strb	r2, [r3]
   14134:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14138:	add	r3, r3, #1
   1413c:	mov	r2, #0
   14140:	strb	r2, [r3]
   14144:	b	141bc <next@@Base+0xd34>
   14148:	mov	r0, #3
   1414c:	bl	11918 <malloc@plt>
   14150:	mov	r3, r0
   14154:	str	r3, [fp, #-40]	; 0xffffffd8
   14158:	ldrb	r2, [fp, #-576]	; 0xfffffdc0
   1415c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14160:	strb	r2, [r3]
   14164:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14168:	add	r3, r3, #1
   1416c:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   14170:	strb	r2, [r3]
   14174:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14178:	add	r3, r3, #2
   1417c:	mov	r2, #0
   14180:	strb	r2, [r3]
   14184:	ldr	r3, [pc, #900]	; 14510 <next@@Base+0x1088>
   14188:	add	r3, pc, r3
   1418c:	add	r3, r3, #368	; 0x170
   14190:	ldrd	r2, [r3, #-8]
   14194:	adds	r1, r2, #1
   14198:	str	r1, [fp, #-932]	; 0xfffffc5c
   1419c:	adc	r3, r3, #0
   141a0:	str	r3, [fp, #-928]	; 0xfffffc60
   141a4:	ldr	r3, [pc, #872]	; 14514 <next@@Base+0x108c>
   141a8:	add	r3, pc, r3
   141ac:	add	r3, r3, #368	; 0x170
   141b0:	sub	r2, fp, #932	; 0x3a4
   141b4:	ldrd	r0, [r2]
   141b8:	strd	r0, [r3, #-8]
   141bc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   141c0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   141c4:	bl	12a04 <init_token_boolean_op@@Base>
   141c8:	ldr	r3, [pc, #840]	; 14518 <next@@Base+0x1090>
   141cc:	add	r3, pc, r3
   141d0:	add	r3, r3, #368	; 0x170
   141d4:	ldrd	r2, [r3]
   141d8:	adds	r1, r2, #1
   141dc:	str	r1, [fp, #-940]	; 0xfffffc54
   141e0:	adc	r3, r3, #0
   141e4:	str	r3, [fp, #-936]	; 0xfffffc58
   141e8:	ldr	r3, [pc, #812]	; 1451c <next@@Base+0x1094>
   141ec:	add	r3, pc, r3
   141f0:	add	r3, r3, #368	; 0x170
   141f4:	sub	r2, fp, #940	; 0x3ac
   141f8:	ldrd	r0, [r2]
   141fc:	strd	r0, [r3]
   14200:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14204:	b	157c4 <next@@Base+0x233c>
   14208:	ldr	r3, [pc, #784]	; 14520 <next@@Base+0x1098>
   1420c:	add	r3, pc, r3
   14210:	add	r3, r3, #336	; 0x150
   14214:	ldrd	r2, [r3]
   14218:	adds	r1, r2, #1
   1421c:	str	r1, [fp, #-908]	; 0xfffffc74
   14220:	adc	r3, r3, #0
   14224:	str	r3, [fp, #-904]	; 0xfffffc78
   14228:	ldr	r3, [pc, #756]	; 14524 <next@@Base+0x109c>
   1422c:	add	r3, pc, r3
   14230:	add	r3, r3, #336	; 0x150
   14234:	sub	r2, fp, #908	; 0x38c
   14238:	ldrd	r0, [r2]
   1423c:	strd	r0, [r3]
   14240:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14244:	cmp	r3, #61	; 0x3d
   14248:	bne	146b8 <next@@Base+0x1230>
   1424c:	ldr	r3, [pc, #724]	; 14528 <next@@Base+0x10a0>
   14250:	add	r3, pc, r3
   14254:	add	r3, r3, #384	; 0x180
   14258:	ldrd	r2, [r3, #-8]
   1425c:	adds	r1, r2, #1
   14260:	str	r1, [fp, #-948]	; 0xfffffc4c
   14264:	adc	r3, r3, #0
   14268:	str	r3, [fp, #-944]	; 0xfffffc50
   1426c:	ldr	r3, [pc, #696]	; 1452c <next@@Base+0x10a4>
   14270:	add	r3, pc, r3
   14274:	add	r3, r3, #384	; 0x180
   14278:	sub	r2, fp, #948	; 0x3b4
   1427c:	ldrd	r0, [r2]
   14280:	strd	r0, [r3, #-8]
   14284:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14288:	add	r2, r3, #1
   1428c:	str	r2, [fp, #-44]	; 0xffffffd4
   14290:	sub	r2, fp, #36	; 0x24
   14294:	add	r3, r2, r3
   14298:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   1429c:	strb	r2, [r3, #-540]	; 0xfffffde4
   142a0:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   142a4:	bl	13258 <get_char@@Base>
   142a8:	mov	r3, r0
   142ac:	strb	r3, [fp, #-49]	; 0xffffffcf
   142b0:	ldr	r3, [pc, #632]	; 14530 <next@@Base+0x10a8>
   142b4:	add	r3, pc, r3
   142b8:	add	r3, r3, #384	; 0x180
   142bc:	ldrd	r2, [r3]
   142c0:	adds	r1, r2, #1
   142c4:	str	r1, [fp, #-956]	; 0xfffffc44
   142c8:	adc	r3, r3, #0
   142cc:	str	r3, [fp, #-952]	; 0xfffffc48
   142d0:	ldr	r3, [pc, #604]	; 14534 <next@@Base+0x10ac>
   142d4:	add	r3, pc, r3
   142d8:	add	r3, r3, #384	; 0x180
   142dc:	sub	r2, fp, #956	; 0x3bc
   142e0:	ldrd	r0, [r2]
   142e4:	strd	r0, [r3]
   142e8:	mov	r0, #8
   142ec:	bl	11918 <malloc@plt>
   142f0:	mov	r3, r0
   142f4:	str	r3, [fp, #-56]	; 0xffffffc8
   142f8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   142fc:	cmp	r3, #61	; 0x3d
   14300:	beq	14344 <next@@Base+0xebc>
   14304:	ldr	r3, [pc, #556]	; 14538 <next@@Base+0x10b0>
   14308:	add	r3, pc, r3
   1430c:	add	r3, r3, #400	; 0x190
   14310:	ldrd	r2, [r3, #-8]
   14314:	adds	r1, r2, #1
   14318:	str	r1, [fp, #-964]	; 0xfffffc3c
   1431c:	adc	r3, r3, #0
   14320:	str	r3, [fp, #-960]	; 0xfffffc40
   14324:	ldr	r3, [pc, #528]	; 1453c <next@@Base+0x10b4>
   14328:	add	r3, pc, r3
   1432c:	add	r3, r3, #400	; 0x190
   14330:	sub	r2, fp, #964	; 0x3c4
   14334:	ldrd	r0, [r2]
   14338:	strd	r0, [r3, #-8]
   1433c:	mov	r0, #1
   14340:	bl	11948 <exit@plt>
   14344:	mov	r0, #3
   14348:	bl	11918 <malloc@plt>
   1434c:	mov	r3, r0
   14350:	str	r3, [fp, #-40]	; 0xffffffd8
   14354:	ldrb	r2, [fp, #-576]	; 0xfffffdc0
   14358:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1435c:	strb	r2, [r3]
   14360:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14364:	add	r3, r3, #1
   14368:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   1436c:	strb	r2, [r3]
   14370:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14374:	add	r3, r3, #2
   14378:	mov	r2, #0
   1437c:	strb	r2, [r3]
   14380:	ldr	r1, [fp, #-40]	; 0xffffffd8
   14384:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14388:	bl	12a04 <init_token_boolean_op@@Base>
   1438c:	ldr	r3, [pc, #428]	; 14540 <next@@Base+0x10b8>
   14390:	add	r3, pc, r3
   14394:	add	r3, r3, #400	; 0x190
   14398:	ldrd	r2, [r3]
   1439c:	adds	r1, r2, #1
   143a0:	str	r1, [fp, #-972]	; 0xfffffc34
   143a4:	adc	r3, r3, #0
   143a8:	str	r3, [fp, #-968]	; 0xfffffc38
   143ac:	ldr	r3, [pc, #400]	; 14544 <next@@Base+0x10bc>
   143b0:	add	r3, pc, r3
   143b4:	add	r3, r3, #400	; 0x190
   143b8:	sub	r2, fp, #972	; 0x3cc
   143bc:	ldrd	r0, [r2]
   143c0:	strd	r0, [r3]
   143c4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   143c8:	b	157c4 <next@@Base+0x233c>
   143cc:	andeq	sl, r1, r8, asr #22
   143d0:	andeq	fp, r1, r0, asr #15
   143d4:	andeq	fp, r1, ip, lsr #15
   143d8:	andeq	fp, r1, r8, ror #14
   143dc:	andeq	fp, r1, r4, asr r7
   143e0:	andeq	fp, r1, r8, lsl #14
   143e4:	strdeq	fp, [r1], -r4
   143e8:	andeq	fp, r1, ip, asr #13
   143ec:			; <UNDEFINED> instruction: 0x0001b6b0
   143f0:	muleq	r1, r8, r6
   143f4:	andeq	fp, r1, r8, ror r6
   143f8:	andeq	fp, r1, r4, lsr r6
   143fc:	andeq	fp, r1, r8, lsl r6
   14400:	strdeq	fp, [r1], -r8
   14404:	ldrdeq	fp, [r1], -ip
   14408:			; <UNDEFINED> instruction: 0x0001b5bc
   1440c:	andeq	fp, r1, r0, lsr #11
   14410:	andeq	fp, r1, ip, ror #10
   14414:	andeq	fp, r1, r0, asr r5
   14418:	andeq	fp, r1, r0, lsr r5
   1441c:	andeq	fp, r1, r4, lsl r5
   14420:	andeq	fp, r1, r4, ror #9
   14424:	andeq	fp, r1, r8, asr #9
   14428:	andeq	fp, r1, r0, lsr #9
   1442c:	andeq	fp, r1, r4, lsl #9
   14430:	andeq	fp, r1, r4, ror #8
   14434:	andeq	fp, r1, r8, asr #8
   14438:	andeq	fp, r1, r8, lsl #8
   1443c:	andeq	fp, r1, ip, ror #7
   14440:	andeq	fp, r1, r0, asr #7
   14444:	andeq	fp, r1, r4, lsr #7
   14448:	andeq	fp, r1, r8, ror r3
   1444c:	andeq	fp, r1, ip, asr r3
   14450:	andeq	fp, r1, r4, lsr r3
   14454:	andeq	fp, r1, r8, lsl r3
   14458:	andeq	fp, r1, ip, ror #5
   1445c:	ldrdeq	fp, [r1], -r0
   14460:	andeq	fp, r1, r8, lsr #5
   14464:	andeq	fp, r1, ip, lsl #5
   14468:	andeq	fp, r1, r0, ror #4
   1446c:	andeq	fp, r1, r4, asr #4
   14470:	andeq	fp, r1, ip, lsl r2
   14474:	andeq	fp, r1, r0, lsl #4
   14478:	ldrdeq	fp, [r1], -r4
   1447c:			; <UNDEFINED> instruction: 0x0001b1b8
   14480:	muleq	r1, r0, r1
   14484:	andeq	fp, r1, r4, ror r1
   14488:	andeq	fp, r1, r8, asr #2
   1448c:	andeq	fp, r1, ip, lsr #2
   14490:	andeq	fp, r1, r4, lsl #2
   14494:	andeq	fp, r1, r8, ror #1
   14498:	andeq	fp, r1, r8, lsr #1
   1449c:	andeq	fp, r1, ip, lsl #1
   144a0:	andeq	fp, r1, r0, rrx
   144a4:	andeq	fp, r1, r4, asr #32
   144a8:	andeq	fp, r1, r4
   144ac:	andeq	sl, r1, r8, ror #31
   144b0:			; <UNDEFINED> instruction: 0x0001afbc
   144b4:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   144b8:	andeq	sl, r1, r8, asr pc
   144bc:	andeq	sl, r1, r8, lsr pc
   144c0:	andeq	sl, r1, r8, lsl #30
   144c4:	andeq	sl, r1, r8, ror #29
   144c8:	andeq	sl, r1, r4, lsr #29
   144cc:	andeq	sl, r1, r4, lsl #29
   144d0:	andeq	sl, r1, r4, asr lr
   144d4:	andeq	sl, r1, r4, lsr lr
   144d8:	strdeq	sl, [r1], -r0
   144dc:	ldrdeq	sl, [r1], -r0
   144e0:	muleq	r1, r4, sp
   144e4:	andeq	sl, r1, r4, ror sp
   144e8:	strdeq	sl, [r1], -r0
   144ec:	ldrdeq	sl, [r1], -r0
   144f0:	andeq	sl, r1, ip, lsr #25
   144f4:	andeq	sl, r1, ip, lsl #25
   144f8:	andeq	sl, r1, r0, ror #24
   144fc:	andeq	sl, r1, r0, asr #24
   14500:	strdeq	sl, [r1], -r0
   14504:	ldrdeq	sl, [r1], -r0
   14508:	muleq	r1, r4, fp
   1450c:	andeq	sl, r1, r4, ror fp
   14510:	strdeq	sl, [r1], -r0
   14514:	ldrdeq	sl, [r1], -r0
   14518:	andeq	sl, r1, ip, lsr #21
   1451c:	andeq	sl, r1, ip, lsl #21
   14520:	andeq	sl, r1, ip, ror #20
   14524:	andeq	sl, r1, ip, asr #20
   14528:	andeq	sl, r1, r8, lsr #20
   1452c:	andeq	sl, r1, r8, lsl #20
   14530:	andeq	sl, r1, r4, asr #19
   14534:	andeq	sl, r1, r4, lsr #19
   14538:	andeq	sl, r1, r0, ror r9
   1453c:	andeq	sl, r1, r0, asr r9
   14540:	andeq	sl, r1, r8, ror #17
   14544:	andeq	sl, r1, r8, asr #17
   14548:			; <UNDEFINED> instruction: 0x0001a5b0
   1454c:	muleq	r1, r0, r5
   14550:	andeq	sl, r1, ip, asr #10
   14554:	andeq	sl, r1, ip, lsr #10
   14558:	strdeq	sl, [r1], -r8
   1455c:	ldrdeq	sl, [r1], -r8
   14560:	andeq	sl, r1, r0, ror r4
   14564:	andeq	sl, r1, r0, asr r4
   14568:	andeq	sl, r1, r4, lsr #8
   1456c:	andeq	sl, r1, r4, lsl #8
   14570:	andeq	sl, r1, r0, asr #7
   14574:	andeq	sl, r1, r0, lsr #7
   14578:	andeq	sl, r1, ip, ror #6
   1457c:	andeq	sl, r1, ip, asr #6
   14580:	andeq	sl, r1, r0, ror #5
   14584:	andeq	sl, r1, r0, asr #5
   14588:	andeq	r0, r0, r0, lsr #1
   1458c:	strheq	r8, [r0], -r8	; <UNPREDICTABLE>
   14590:	andeq	sl, r1, ip, ror r2
   14594:	andeq	sl, r1, ip, asr r2
   14598:	andeq	sl, r1, r8, lsr r2
   1459c:	andeq	sl, r1, r8, lsl r2
   145a0:	strdeq	sl, [r1], -r8
   145a4:	ldrdeq	sl, [r1], -ip
   145a8:	andeq	sl, r1, r4, asr #3
   145ac:	andeq	sl, r1, r4, lsr #3
   145b0:	andeq	sl, r1, ip, asr r1
   145b4:	andeq	sl, r1, ip, lsr r1
   145b8:	andeq	sl, r1, r4, lsl r1
   145bc:	strdeq	sl, [r1], -r4
   145c0:	andeq	sl, r1, r4, asr #1
   145c4:	andeq	sl, r1, r4, lsr #1
   145c8:	andeq	sl, r1, r0, asr #32
   145cc:	andeq	sl, r1, r4, lsr #32
   145d0:	strdeq	r9, [r1], -ip
   145d4:	ldrdeq	r9, [r1], -ip
   145d8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   145dc:	andeq	r9, r1, r4, ror pc
   145e0:	andeq	r9, r1, ip, asr #30
   145e4:	andeq	r9, r1, ip, lsr #30
   145e8:	strdeq	r9, [r1], -r0
   145ec:	ldrdeq	r9, [r1], -r0
   145f0:	andeq	r9, r1, ip, lsr #29
   145f4:	andeq	r9, r1, ip, lsl #29
   145f8:	andeq	r9, r1, r8, lsr #28
   145fc:	andeq	r9, r1, r8, lsl #28
   14600:	ldrdeq	r9, [r1], -ip
   14604:	andeq	r9, r1, r0, asr #27
   14608:	andeq	r9, r1, r0, lsr #27
   1460c:	andeq	r9, r1, r0, lsl #27
   14610:	andeq	r9, r1, r0, lsr sp
   14614:	andeq	r9, r1, r0, lsl sp
   14618:	andeq	r9, r1, r8, ror #25
   1461c:	andeq	r9, r1, r8, asr #25
   14620:	andeq	r9, r1, r8, ror ip
   14624:	andeq	r9, r1, r8, asr ip
   14628:	andeq	r9, r1, r0, lsr ip
   1462c:	andeq	r9, r1, r0, lsl ip
   14630:	andeq	r9, r1, r0, ror #22
   14634:	andeq	r9, r1, r0, asr #22
   14638:	andeq	r9, r1, ip, lsl fp
   1463c:	andeq	r9, r1, r0, lsl #22
   14640:	andeq	r9, r1, r0, ror #21
   14644:	andeq	r9, r1, r0, asr #21
   14648:	andeq	r9, r1, r0, ror sl
   1464c:	andeq	r9, r1, r0, asr sl
   14650:	andeq	r9, r1, r8, lsr #20
   14654:	andeq	r9, r1, r8, lsl #20
   14658:			; <UNDEFINED> instruction: 0x000199b8
   1465c:	muleq	r1, r8, r9
   14660:	andeq	r9, r1, r0, ror r9
   14664:	andeq	r9, r1, r0, asr r9
   14668:	andeq	r9, r1, r0, lsl #18
   1466c:	andeq	r9, r1, r0, ror #17
   14670:			; <UNDEFINED> instruction: 0x000198b8
   14674:	muleq	r1, r8, r8
   14678:	andeq	r9, r1, r8, asr #16
   1467c:	andeq	r9, r1, r8, lsr #16
   14680:	andeq	r9, r1, r0, lsl #16
   14684:	andeq	r9, r1, r0, ror #15
   14688:	andeq	r9, r1, r4, lsr #15
   1468c:	andeq	r9, r1, r4, lsl #15
   14690:	andeq	r9, r1, r0, ror #14
   14694:	andeq	r9, r1, r4, asr #14
   14698:	andeq	r9, r1, r4, lsr #14
   1469c:	andeq	r9, r1, r4, lsl #14
   146a0:			; <UNDEFINED> instruction: 0x000196b4
   146a4:	muleq	r1, r4, r6
   146a8:	andeq	r9, r1, ip, ror #12
   146ac:	andeq	r9, r1, ip, asr #12
   146b0:	strdeq	r9, [r1], -ip
   146b4:	ldrdeq	r9, [r1], -ip
   146b8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   146bc:	cmp	r3, #124	; 0x7c
   146c0:	bne	14844 <next@@Base+0x13bc>
   146c4:	ldr	r3, [pc, #-388]	; 14548 <next@@Base+0x10c0>
   146c8:	add	r3, pc, r3
   146cc:	add	r3, r3, #416	; 0x1a0
   146d0:	ldrd	r2, [r3, #-8]
   146d4:	adds	r1, r2, #1
   146d8:	str	r1, [fp, #-980]	; 0xfffffc2c
   146dc:	adc	r3, r3, #0
   146e0:	str	r3, [fp, #-976]	; 0xfffffc30
   146e4:	ldr	r3, [pc, #-416]	; 1454c <next@@Base+0x10c4>
   146e8:	add	r3, pc, r3
   146ec:	add	r3, r3, #416	; 0x1a0
   146f0:	sub	r2, fp, #980	; 0x3d4
   146f4:	ldrd	r0, [r2]
   146f8:	strd	r0, [r3, #-8]
   146fc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14700:	add	r2, r3, #1
   14704:	str	r2, [fp, #-44]	; 0xffffffd4
   14708:	sub	r2, fp, #36	; 0x24
   1470c:	add	r3, r2, r3
   14710:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   14714:	strb	r2, [r3, #-540]	; 0xfffffde4
   14718:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   1471c:	bl	13258 <get_char@@Base>
   14720:	mov	r3, r0
   14724:	strb	r3, [fp, #-49]	; 0xffffffcf
   14728:	ldr	r3, [pc, #-480]	; 14550 <next@@Base+0x10c8>
   1472c:	add	r3, pc, r3
   14730:	add	r3, r3, #416	; 0x1a0
   14734:	ldrd	r2, [r3]
   14738:	adds	r1, r2, #1
   1473c:	str	r1, [fp, #-988]	; 0xfffffc24
   14740:	adc	r3, r3, #0
   14744:	str	r3, [fp, #-984]	; 0xfffffc28
   14748:	ldr	r3, [pc, #-508]	; 14554 <next@@Base+0x10cc>
   1474c:	add	r3, pc, r3
   14750:	add	r3, r3, #416	; 0x1a0
   14754:	sub	r2, fp, #988	; 0x3dc
   14758:	ldrd	r0, [r2]
   1475c:	strd	r0, [r3]
   14760:	mov	r0, #8
   14764:	bl	11918 <malloc@plt>
   14768:	mov	r3, r0
   1476c:	str	r3, [fp, #-56]	; 0xffffffc8
   14770:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14774:	cmp	r3, #124	; 0x7c
   14778:	beq	147bc <next@@Base+0x1334>
   1477c:	ldr	r3, [pc, #-556]	; 14558 <next@@Base+0x10d0>
   14780:	add	r3, pc, r3
   14784:	add	r3, r3, #432	; 0x1b0
   14788:	ldrd	r2, [r3, #-8]
   1478c:	adds	r1, r2, #1
   14790:	str	r1, [fp, #-996]	; 0xfffffc1c
   14794:	adc	r3, r3, #0
   14798:	str	r3, [fp, #-992]	; 0xfffffc20
   1479c:	ldr	r3, [pc, #-584]	; 1455c <next@@Base+0x10d4>
   147a0:	add	r3, pc, r3
   147a4:	add	r3, r3, #432	; 0x1b0
   147a8:	sub	r2, fp, #996	; 0x3e4
   147ac:	ldrd	r0, [r2]
   147b0:	strd	r0, [r3, #-8]
   147b4:	mov	r0, #1
   147b8:	bl	11948 <exit@plt>
   147bc:	mov	r0, #3
   147c0:	bl	11918 <malloc@plt>
   147c4:	mov	r3, r0
   147c8:	str	r3, [fp, #-40]	; 0xffffffd8
   147cc:	ldrb	r2, [fp, #-576]	; 0xfffffdc0
   147d0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   147d4:	strb	r2, [r3]
   147d8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   147dc:	add	r3, r3, #1
   147e0:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   147e4:	strb	r2, [r3]
   147e8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   147ec:	add	r3, r3, #2
   147f0:	mov	r2, #0
   147f4:	strb	r2, [r3]
   147f8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   147fc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14800:	bl	12a04 <init_token_boolean_op@@Base>
   14804:	ldr	r3, [pc, #-684]	; 14560 <next@@Base+0x10d8>
   14808:	add	r3, pc, r3
   1480c:	add	r3, r3, #432	; 0x1b0
   14810:	ldrd	r2, [r3]
   14814:	adds	r1, r2, #1
   14818:	str	r1, [fp, #-1004]	; 0xfffffc14
   1481c:	adc	r3, r3, #0
   14820:	str	r3, [fp, #-1000]	; 0xfffffc18
   14824:	ldr	r3, [pc, #-712]	; 14564 <next@@Base+0x10dc>
   14828:	add	r3, pc, r3
   1482c:	add	r3, r3, #432	; 0x1b0
   14830:	sub	r2, fp, #1004	; 0x3ec
   14834:	ldrd	r0, [r2]
   14838:	strd	r0, [r3]
   1483c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14840:	b	157c4 <next@@Base+0x233c>
   14844:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14848:	cmp	r3, #38	; 0x26
   1484c:	bne	149d8 <next@@Base+0x1550>
   14850:	ldr	r3, [pc, #-752]	; 14568 <next@@Base+0x10e0>
   14854:	add	r3, pc, r3
   14858:	add	r3, r3, #448	; 0x1c0
   1485c:	ldrd	r2, [r3, #-8]
   14860:	adds	r1, r2, #1
   14864:	str	r1, [fp, #-1012]	; 0xfffffc0c
   14868:	adc	r3, r3, #0
   1486c:	str	r3, [fp, #-1008]	; 0xfffffc10
   14870:	ldr	r3, [pc, #-780]	; 1456c <next@@Base+0x10e4>
   14874:	add	r3, pc, r3
   14878:	add	r3, r3, #448	; 0x1c0
   1487c:	sub	r2, fp, #1012	; 0x3f4
   14880:	ldrd	r0, [r2]
   14884:	strd	r0, [r3, #-8]
   14888:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1488c:	add	r2, r3, #1
   14890:	str	r2, [fp, #-44]	; 0xffffffd4
   14894:	sub	r2, fp, #36	; 0x24
   14898:	add	r3, r2, r3
   1489c:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   148a0:	strb	r2, [r3, #-540]	; 0xfffffde4
   148a4:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   148a8:	bl	13258 <get_char@@Base>
   148ac:	mov	r3, r0
   148b0:	strb	r3, [fp, #-49]	; 0xffffffcf
   148b4:	ldr	r3, [pc, #-844]	; 14570 <next@@Base+0x10e8>
   148b8:	add	r3, pc, r3
   148bc:	add	r3, r3, #448	; 0x1c0
   148c0:	ldrd	r2, [r3]
   148c4:	adds	r1, r2, #1
   148c8:	str	r1, [fp, #-1020]	; 0xfffffc04
   148cc:	adc	r3, r3, #0
   148d0:	str	r3, [fp, #-1016]	; 0xfffffc08
   148d4:	ldr	r3, [pc, #-872]	; 14574 <next@@Base+0x10ec>
   148d8:	add	r3, pc, r3
   148dc:	add	r3, r3, #448	; 0x1c0
   148e0:	sub	r2, fp, #1020	; 0x3fc
   148e4:	ldrd	r0, [r2]
   148e8:	strd	r0, [r3]
   148ec:	mov	r0, #8
   148f0:	bl	11918 <malloc@plt>
   148f4:	mov	r3, r0
   148f8:	str	r3, [fp, #-56]	; 0xffffffc8
   148fc:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14900:	cmp	r3, #38	; 0x26
   14904:	beq	1494c <next@@Base+0x14c4>
   14908:	ldr	r3, [pc, #-920]	; 14578 <next@@Base+0x10f0>
   1490c:	add	r3, pc, r3
   14910:	add	r3, r3, #464	; 0x1d0
   14914:	ldrd	r2, [r3, #-8]
   14918:	adds	r1, r2, #1
   1491c:	str	r1, [fp, #-1028]	; 0xfffffbfc
   14920:	adc	r3, r3, #0
   14924:	str	r3, [fp, #-1024]	; 0xfffffc00
   14928:	ldr	r3, [pc, #-948]	; 1457c <next@@Base+0x10f4>
   1492c:	add	r3, pc, r3
   14930:	add	r3, r3, #464	; 0x1d0
   14934:	sub	r2, fp, #1024	; 0x400
   14938:	sub	r2, r2, #4
   1493c:	ldrd	r0, [r2]
   14940:	strd	r0, [r3, #-8]
   14944:	mov	r0, #1
   14948:	bl	11948 <exit@plt>
   1494c:	mov	r0, #3
   14950:	bl	11918 <malloc@plt>
   14954:	mov	r3, r0
   14958:	str	r3, [fp, #-40]	; 0xffffffd8
   1495c:	ldrb	r2, [fp, #-576]	; 0xfffffdc0
   14960:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14964:	strb	r2, [r3]
   14968:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1496c:	add	r3, r3, #1
   14970:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   14974:	strb	r2, [r3]
   14978:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1497c:	add	r3, r3, #2
   14980:	mov	r2, #0
   14984:	strb	r2, [r3]
   14988:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1498c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14990:	bl	12a04 <init_token_boolean_op@@Base>
   14994:	ldr	r3, [pc, #-1052]	; 14580 <next@@Base+0x10f8>
   14998:	add	r3, pc, r3
   1499c:	add	r3, r3, #464	; 0x1d0
   149a0:	ldrd	r2, [r3]
   149a4:	adds	r1, r2, #1
   149a8:	str	r1, [fp, #-1036]	; 0xfffffbf4
   149ac:	adc	r3, r3, #0
   149b0:	str	r3, [fp, #-1032]	; 0xfffffbf8
   149b4:	ldr	r3, [pc, #-1080]	; 14584 <next@@Base+0x10fc>
   149b8:	add	r3, pc, r3
   149bc:	add	r3, r3, #464	; 0x1d0
   149c0:	sub	r2, fp, #1024	; 0x400
   149c4:	sub	r2, r2, #12
   149c8:	ldrd	r0, [r2]
   149cc:	strd	r0, [r3]
   149d0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   149d4:	b	157c4 <next@@Base+0x233c>
   149d8:	ldr	r3, [pc, #-1112]	; 14588 <next@@Base+0x1100>
   149dc:	ldr	r3, [sl, r3]
   149e0:	ldr	r3, [r3]
   149e4:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   149e8:	ldr	r1, [pc, #-1124]	; 1458c <next@@Base+0x1104>
   149ec:	add	r1, pc, r1
   149f0:	mov	r0, r3
   149f4:	bl	1196c <fprintf@plt>
   149f8:	ldr	r3, [pc, #-1136]	; 14590 <next@@Base+0x1108>
   149fc:	add	r3, pc, r3
   14a00:	add	r3, r3, #480	; 0x1e0
   14a04:	ldrd	r2, [r3, #-8]
   14a08:	adds	r1, r2, #1
   14a0c:	str	r1, [fp, #-1044]	; 0xfffffbec
   14a10:	adc	r3, r3, #0
   14a14:	str	r3, [fp, #-1040]	; 0xfffffbf0
   14a18:	ldr	r3, [pc, #-1164]	; 14594 <next@@Base+0x110c>
   14a1c:	add	r3, pc, r3
   14a20:	add	r3, r3, #480	; 0x1e0
   14a24:	sub	r2, fp, #1040	; 0x410
   14a28:	sub	r2, r2, #4
   14a2c:	ldrd	r0, [r2]
   14a30:	strd	r0, [r3, #-8]
   14a34:	mov	r0, #1
   14a38:	bl	11948 <exit@plt>
   14a3c:	ldr	r3, [pc, #-1196]	; 14598 <next@@Base+0x1110>
   14a40:	add	r3, pc, r3
   14a44:	add	r3, r3, #480	; 0x1e0
   14a48:	ldrd	r2, [r3]
   14a4c:	adds	r1, r2, #1
   14a50:	str	r1, [fp, #-1052]	; 0xfffffbe4
   14a54:	adc	r3, r3, #0
   14a58:	str	r3, [fp, #-1048]	; 0xfffffbe8
   14a5c:	ldr	r3, [pc, #-1224]	; 1459c <next@@Base+0x1114>
   14a60:	add	r3, pc, r3
   14a64:	add	r3, r3, #480	; 0x1e0
   14a68:	sub	r2, fp, #1040	; 0x410
   14a6c:	sub	r2, r2, #12
   14a70:	ldrd	r0, [r2]
   14a74:	strd	r0, [r3]
   14a78:	b	15760 <next@@Base+0x22d8>
   14a7c:	ldr	r3, [pc, #-1252]	; 145a0 <next@@Base+0x1118>
   14a80:	add	r3, pc, r3
   14a84:	ldrd	r2, [r3, #40]	; 0x28
   14a88:	adds	r1, r2, #1
   14a8c:	str	r1, [fp, #-612]	; 0xfffffd9c
   14a90:	adc	r3, r3, #0
   14a94:	str	r3, [fp, #-608]	; 0xfffffda0
   14a98:	ldr	r3, [pc, #-1276]	; 145a4 <next@@Base+0x111c>
   14a9c:	add	r3, pc, r3
   14aa0:	sub	r2, fp, #612	; 0x264
   14aa4:	ldrd	r0, [r2]
   14aa8:	strd	r0, [r3, #40]	; 0x28
   14aac:	b	14b54 <next@@Base+0x16cc>
   14ab0:	ldr	r3, [pc, #-1296]	; 145a8 <next@@Base+0x1120>
   14ab4:	add	r3, pc, r3
   14ab8:	add	r3, r3, #512	; 0x200
   14abc:	ldrd	r2, [r3, #-8]
   14ac0:	adds	r1, r2, #1
   14ac4:	str	r1, [fp, #-1076]	; 0xfffffbcc
   14ac8:	adc	r3, r3, #0
   14acc:	str	r3, [fp, #-1072]	; 0xfffffbd0
   14ad0:	ldr	r3, [pc, #-1324]	; 145ac <next@@Base+0x1124>
   14ad4:	add	r3, pc, r3
   14ad8:	add	r3, r3, #512	; 0x200
   14adc:	sub	r2, fp, #1072	; 0x430
   14ae0:	sub	r2, r2, #4
   14ae4:	ldrd	r0, [r2]
   14ae8:	strd	r0, [r3, #-8]
   14aec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14af0:	add	r2, r3, #1
   14af4:	str	r2, [fp, #-44]	; 0xffffffd4
   14af8:	sub	r2, fp, #36	; 0x24
   14afc:	add	r3, r2, r3
   14b00:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   14b04:	strb	r2, [r3, #-540]	; 0xfffffde4
   14b08:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   14b0c:	bl	13258 <get_char@@Base>
   14b10:	mov	r3, r0
   14b14:	strb	r3, [fp, #-49]	; 0xffffffcf
   14b18:	ldr	r3, [pc, #-1392]	; 145b0 <next@@Base+0x1128>
   14b1c:	add	r3, pc, r3
   14b20:	add	r3, r3, #496	; 0x1f0
   14b24:	ldrd	r2, [r3, #-8]
   14b28:	adds	r1, r2, #1
   14b2c:	str	r1, [fp, #-1060]	; 0xfffffbdc
   14b30:	adc	r3, r3, #0
   14b34:	str	r3, [fp, #-1056]	; 0xfffffbe0
   14b38:	ldr	r3, [pc, #-1420]	; 145b4 <next@@Base+0x112c>
   14b3c:	add	r3, pc, r3
   14b40:	add	r3, r3, #496	; 0x1f0
   14b44:	sub	r2, fp, #1056	; 0x420
   14b48:	sub	r2, r2, #4
   14b4c:	ldrd	r0, [r2]
   14b50:	strd	r0, [r3, #-8]
   14b54:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14b58:	cmp	r3, #47	; 0x2f
   14b5c:	bls	14ba8 <next@@Base+0x1720>
   14b60:	ldr	r3, [pc, #-1456]	; 145b8 <next@@Base+0x1130>
   14b64:	add	r3, pc, r3
   14b68:	add	r3, r3, #496	; 0x1f0
   14b6c:	ldrd	r2, [r3]
   14b70:	adds	r1, r2, #1
   14b74:	str	r1, [fp, #-1068]	; 0xfffffbd4
   14b78:	adc	r3, r3, #0
   14b7c:	str	r3, [fp, #-1064]	; 0xfffffbd8
   14b80:	ldr	r3, [pc, #-1484]	; 145bc <next@@Base+0x1134>
   14b84:	add	r3, pc, r3
   14b88:	add	r3, r3, #496	; 0x1f0
   14b8c:	sub	r2, fp, #1056	; 0x420
   14b90:	sub	r2, r2, #12
   14b94:	ldrd	r0, [r2]
   14b98:	strd	r0, [r3]
   14b9c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14ba0:	cmp	r3, #57	; 0x39
   14ba4:	bls	14ab0 <next@@Base+0x1628>
   14ba8:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   14bac:	bl	133f4 <push_back_one_char@@Base>
   14bb0:	ldr	r3, [pc, #-1528]	; 145c0 <next@@Base+0x1138>
   14bb4:	add	r3, pc, r3
   14bb8:	add	r3, r3, #512	; 0x200
   14bbc:	ldrd	r2, [r3]
   14bc0:	adds	r1, r2, #1
   14bc4:	str	r1, [fp, #-1084]	; 0xfffffbc4
   14bc8:	adc	r3, r3, #0
   14bcc:	str	r3, [fp, #-1080]	; 0xfffffbc8
   14bd0:	ldr	r3, [pc, #-1556]	; 145c4 <next@@Base+0x113c>
   14bd4:	add	r3, pc, r3
   14bd8:	add	r3, r3, #512	; 0x200
   14bdc:	sub	r2, fp, #1072	; 0x430
   14be0:	sub	r2, r2, #12
   14be4:	ldrd	r0, [r2]
   14be8:	strd	r0, [r3]
   14bec:	sub	r2, fp, #576	; 0x240
   14bf0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14bf4:	add	r3, r2, r3
   14bf8:	mov	r2, #0
   14bfc:	strb	r2, [r3]
   14c00:	mov	r0, #8
   14c04:	bl	11918 <malloc@plt>
   14c08:	mov	r3, r0
   14c0c:	str	r3, [fp, #-56]	; 0xffffffc8
   14c10:	sub	r3, fp, #576	; 0x240
   14c14:	mov	r0, r3
   14c18:	bl	119f0 <atoi@plt>
   14c1c:	mov	r3, r0
   14c20:	mov	r1, r3
   14c24:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14c28:	bl	125c4 <init_token_int_value@@Base>
   14c2c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14c30:	b	157c4 <next@@Base+0x233c>
   14c34:	ldr	r3, [pc, #-1652]	; 145c8 <next@@Base+0x1140>
   14c38:	add	r3, pc, r3
   14c3c:	ldrd	r2, [r3, #48]	; 0x30
   14c40:	adds	r1, r2, #1
   14c44:	str	r1, [fp, #-620]	; 0xfffffd94
   14c48:	adc	r3, r3, #0
   14c4c:	str	r3, [fp, #-616]	; 0xfffffd98
   14c50:	ldr	r3, [pc, #-1676]	; 145cc <next@@Base+0x1144>
   14c54:	add	r3, pc, r3
   14c58:	sub	r2, fp, #620	; 0x26c
   14c5c:	ldrd	r0, [r2]
   14c60:	strd	r0, [r3, #48]	; 0x30
   14c64:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14c68:	cmp	r3, #102	; 0x66
   14c6c:	beq	14dc8 <next@@Base+0x1940>
   14c70:	cmp	r3, #110	; 0x6e
   14c74:	bne	14e90 <next@@Base+0x1a08>
   14c78:	ldr	r3, [pc, #-1712]	; 145d0 <next@@Base+0x1148>
   14c7c:	add	r3, pc, r3
   14c80:	add	r3, r3, #528	; 0x210
   14c84:	ldrd	r2, [r3]
   14c88:	adds	r1, r2, #1
   14c8c:	str	r1, [fp, #-1100]	; 0xfffffbb4
   14c90:	adc	r3, r3, #0
   14c94:	str	r3, [fp, #-1096]	; 0xfffffbb8
   14c98:	ldr	r3, [pc, #-1740]	; 145d4 <next@@Base+0x114c>
   14c9c:	add	r3, pc, r3
   14ca0:	add	r3, r3, #528	; 0x210
   14ca4:	sub	r2, fp, #1088	; 0x440
   14ca8:	sub	r2, r2, #12
   14cac:	ldrd	r0, [r2]
   14cb0:	strd	r0, [r3]
   14cb4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14cb8:	add	r2, r3, #1
   14cbc:	str	r2, [fp, #-44]	; 0xffffffd4
   14cc0:	sub	r2, fp, #36	; 0x24
   14cc4:	add	r3, r2, r3
   14cc8:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   14ccc:	strb	r2, [r3, #-540]	; 0xfffffde4
   14cd0:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   14cd4:	bl	13258 <get_char@@Base>
   14cd8:	mov	r3, r0
   14cdc:	strb	r3, [fp, #-49]	; 0xffffffcf
   14ce0:	ldr	r3, [pc, #-1808]	; 145d8 <next@@Base+0x1150>
   14ce4:	add	r3, pc, r3
   14ce8:	add	r3, r3, #544	; 0x220
   14cec:	ldrd	r2, [r3, #-8]
   14cf0:	adds	r1, r2, #1
   14cf4:	str	r1, [fp, #-1108]	; 0xfffffbac
   14cf8:	adc	r3, r3, #0
   14cfc:	str	r3, [fp, #-1104]	; 0xfffffbb0
   14d00:	ldr	r3, [pc, #-1836]	; 145dc <next@@Base+0x1154>
   14d04:	add	r3, pc, r3
   14d08:	add	r3, r3, #544	; 0x220
   14d0c:	sub	r2, fp, #1104	; 0x450
   14d10:	sub	r2, r2, #4
   14d14:	ldrd	r0, [r2]
   14d18:	strd	r0, [r3, #-8]
   14d1c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14d20:	cmp	r3, #116	; 0x74
   14d24:	beq	14d6c <next@@Base+0x18e4>
   14d28:	ldr	r3, [pc, #-1872]	; 145e0 <next@@Base+0x1158>
   14d2c:	add	r3, pc, r3
   14d30:	add	r3, r3, #544	; 0x220
   14d34:	ldrd	r2, [r3]
   14d38:	adds	r1, r2, #1
   14d3c:	str	r1, [fp, #-1116]	; 0xfffffba4
   14d40:	adc	r3, r3, #0
   14d44:	str	r3, [fp, #-1112]	; 0xfffffba8
   14d48:	ldr	r3, [pc, #-1900]	; 145e4 <next@@Base+0x115c>
   14d4c:	add	r3, pc, r3
   14d50:	add	r3, r3, #544	; 0x220
   14d54:	sub	r2, fp, #1104	; 0x450
   14d58:	sub	r2, r2, #12
   14d5c:	ldrd	r0, [r2]
   14d60:	strd	r0, [r3]
   14d64:	mov	r0, #1
   14d68:	bl	11948 <exit@plt>
   14d6c:	mov	r0, #4
   14d70:	bl	11918 <malloc@plt>
   14d74:	mov	r3, r0
   14d78:	str	r3, [fp, #-56]	; 0xffffffc8
   14d7c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14d80:	bl	12564 <init_token_int_type@@Base>
   14d84:	ldr	r3, [pc, #-1956]	; 145e8 <next@@Base+0x1160>
   14d88:	add	r3, pc, r3
   14d8c:	add	r3, r3, #560	; 0x230
   14d90:	ldrd	r2, [r3, #-8]
   14d94:	adds	r1, r2, #1
   14d98:	str	r1, [fp, #-1124]	; 0xfffffb9c
   14d9c:	adc	r3, r3, #0
   14da0:	str	r3, [fp, #-1120]	; 0xfffffba0
   14da4:	ldr	r3, [pc, #-1984]	; 145ec <next@@Base+0x1164>
   14da8:	add	r3, pc, r3
   14dac:	add	r3, r3, #560	; 0x230
   14db0:	sub	r2, fp, #1120	; 0x460
   14db4:	sub	r2, r2, #4
   14db8:	ldrd	r0, [r2]
   14dbc:	strd	r0, [r3, #-8]
   14dc0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14dc4:	b	157c4 <next@@Base+0x233c>
   14dc8:	ldr	r3, [pc, #-2016]	; 145f0 <next@@Base+0x1168>
   14dcc:	add	r3, pc, r3
   14dd0:	add	r3, r3, #528	; 0x210
   14dd4:	ldrd	r2, [r3, #-8]
   14dd8:	adds	r1, r2, #1
   14ddc:	str	r1, [fp, #-1092]	; 0xfffffbbc
   14de0:	adc	r3, r3, #0
   14de4:	str	r3, [fp, #-1088]	; 0xfffffbc0
   14de8:	ldr	r3, [pc, #-2044]	; 145f4 <next@@Base+0x116c>
   14dec:	add	r3, pc, r3
   14df0:	add	r3, r3, #528	; 0x210
   14df4:	sub	r2, fp, #1088	; 0x440
   14df8:	sub	r2, r2, #4
   14dfc:	ldrd	r0, [r2]
   14e00:	strd	r0, [r3, #-8]
   14e04:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14e08:	add	r2, r3, #1
   14e0c:	str	r2, [fp, #-44]	; 0xffffffd4
   14e10:	sub	r2, fp, #36	; 0x24
   14e14:	add	r3, r2, r3
   14e18:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   14e1c:	strb	r2, [r3, #-540]	; 0xfffffde4
   14e20:	sub	r2, fp, #576	; 0x240
   14e24:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14e28:	add	r3, r2, r3
   14e2c:	mov	r2, #0
   14e30:	strb	r2, [r3]
   14e34:	mov	r0, #4
   14e38:	bl	11918 <malloc@plt>
   14e3c:	mov	r3, r0
   14e40:	str	r3, [fp, #-56]	; 0xffffffc8
   14e44:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14e48:	bl	12944 <init_token_if@@Base>
   14e4c:	ldr	r3, [pc, #-2140]	; 145f8 <next@@Base+0x1170>
   14e50:	add	r3, pc, r3
   14e54:	add	r3, r3, #560	; 0x230
   14e58:	ldrd	r2, [r3]
   14e5c:	adds	r1, r2, #1
   14e60:	str	r1, [fp, #-1132]	; 0xfffffb94
   14e64:	adc	r3, r3, #0
   14e68:	str	r3, [fp, #-1128]	; 0xfffffb98
   14e6c:	ldr	r3, [pc, #-2168]	; 145fc <next@@Base+0x1174>
   14e70:	add	r3, pc, r3
   14e74:	add	r3, r3, #560	; 0x230
   14e78:	sub	r2, fp, #1120	; 0x460
   14e7c:	sub	r2, r2, #12
   14e80:	ldrd	r0, [r2]
   14e84:	strd	r0, [r3]
   14e88:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14e8c:	b	157c4 <next@@Base+0x233c>
   14e90:	mov	r0, #1
   14e94:	bl	11948 <exit@plt>
   14e98:	ldr	r3, [pc, #-2208]	; 14600 <next@@Base+0x1178>
   14e9c:	add	r3, pc, r3
   14ea0:	ldrd	r2, [r3, #56]	; 0x38
   14ea4:	adds	r1, r2, #1
   14ea8:	str	r1, [fp, #-628]	; 0xfffffd8c
   14eac:	adc	r3, r3, #0
   14eb0:	str	r3, [fp, #-624]	; 0xfffffd90
   14eb4:	ldr	r3, [pc, #-2232]	; 14604 <next@@Base+0x117c>
   14eb8:	add	r3, pc, r3
   14ebc:	sub	r2, fp, #628	; 0x274
   14ec0:	ldrd	r0, [r2]
   14ec4:	strd	r0, [r3, #56]	; 0x38
   14ec8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14ecc:	cmp	r3, #97	; 0x61
   14ed0:	beq	14f18 <next@@Base+0x1a90>
   14ed4:	ldr	r3, [pc, #-2260]	; 14608 <next@@Base+0x1180>
   14ed8:	add	r3, pc, r3
   14edc:	add	r3, r3, #576	; 0x240
   14ee0:	ldrd	r2, [r3, #-8]
   14ee4:	adds	r1, r2, #1
   14ee8:	str	r1, [fp, #-1140]	; 0xfffffb8c
   14eec:	adc	r3, r3, #0
   14ef0:	str	r3, [fp, #-1136]	; 0xfffffb90
   14ef4:	ldr	r3, [pc, #-2288]	; 1460c <next@@Base+0x1184>
   14ef8:	add	r3, pc, r3
   14efc:	add	r3, r3, #576	; 0x240
   14f00:	sub	r2, fp, #1136	; 0x470
   14f04:	sub	r2, r2, #4
   14f08:	ldrd	r0, [r2]
   14f0c:	strd	r0, [r3, #-8]
   14f10:	mov	r0, #1
   14f14:	bl	11948 <exit@plt>
   14f18:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f1c:	add	r2, r3, #1
   14f20:	str	r2, [fp, #-44]	; 0xffffffd4
   14f24:	sub	r2, fp, #36	; 0x24
   14f28:	add	r3, r2, r3
   14f2c:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   14f30:	strb	r2, [r3, #-540]	; 0xfffffde4
   14f34:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   14f38:	bl	13258 <get_char@@Base>
   14f3c:	mov	r3, r0
   14f40:	strb	r3, [fp, #-49]	; 0xffffffcf
   14f44:	ldr	r3, [pc, #-2364]	; 14610 <next@@Base+0x1188>
   14f48:	add	r3, pc, r3
   14f4c:	add	r3, r3, #576	; 0x240
   14f50:	ldrd	r2, [r3]
   14f54:	adds	r1, r2, #1
   14f58:	str	r1, [fp, #-1148]	; 0xfffffb84
   14f5c:	adc	r3, r3, #0
   14f60:	str	r3, [fp, #-1144]	; 0xfffffb88
   14f64:	ldr	r3, [pc, #-2392]	; 14614 <next@@Base+0x118c>
   14f68:	add	r3, pc, r3
   14f6c:	add	r3, r3, #576	; 0x240
   14f70:	sub	r2, fp, #1136	; 0x470
   14f74:	sub	r2, r2, #12
   14f78:	ldrd	r0, [r2]
   14f7c:	strd	r0, [r3]
   14f80:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14f84:	cmp	r3, #105	; 0x69
   14f88:	beq	14fd0 <next@@Base+0x1b48>
   14f8c:	ldr	r3, [pc, #-2428]	; 14618 <next@@Base+0x1190>
   14f90:	add	r3, pc, r3
   14f94:	add	r3, r3, #592	; 0x250
   14f98:	ldrd	r2, [r3, #-8]
   14f9c:	adds	r1, r2, #1
   14fa0:	str	r1, [fp, #-1156]	; 0xfffffb7c
   14fa4:	adc	r3, r3, #0
   14fa8:	str	r3, [fp, #-1152]	; 0xfffffb80
   14fac:	ldr	r3, [pc, #-2456]	; 1461c <next@@Base+0x1194>
   14fb0:	add	r3, pc, r3
   14fb4:	add	r3, r3, #592	; 0x250
   14fb8:	sub	r2, fp, #1152	; 0x480
   14fbc:	sub	r2, r2, #4
   14fc0:	ldrd	r0, [r2]
   14fc4:	strd	r0, [r3, #-8]
   14fc8:	mov	r0, #1
   14fcc:	bl	11948 <exit@plt>
   14fd0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14fd4:	add	r2, r3, #1
   14fd8:	str	r2, [fp, #-44]	; 0xffffffd4
   14fdc:	sub	r2, fp, #36	; 0x24
   14fe0:	add	r3, r2, r3
   14fe4:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   14fe8:	strb	r2, [r3, #-540]	; 0xfffffde4
   14fec:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   14ff0:	bl	13258 <get_char@@Base>
   14ff4:	mov	r3, r0
   14ff8:	strb	r3, [fp, #-49]	; 0xffffffcf
   14ffc:	ldr	r3, [pc, #-2532]	; 14620 <next@@Base+0x1198>
   15000:	add	r3, pc, r3
   15004:	add	r3, r3, #592	; 0x250
   15008:	ldrd	r2, [r3]
   1500c:	adds	r1, r2, #1
   15010:	str	r1, [fp, #-1164]	; 0xfffffb74
   15014:	adc	r3, r3, #0
   15018:	str	r3, [fp, #-1160]	; 0xfffffb78
   1501c:	ldr	r3, [pc, #-2560]	; 14624 <next@@Base+0x119c>
   15020:	add	r3, pc, r3
   15024:	add	r3, r3, #592	; 0x250
   15028:	sub	r2, fp, #1152	; 0x480
   1502c:	sub	r2, r2, #12
   15030:	ldrd	r0, [r2]
   15034:	strd	r0, [r3]
   15038:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1503c:	cmp	r3, #110	; 0x6e
   15040:	beq	15088 <next@@Base+0x1c00>
   15044:	ldr	r3, [pc, #-2596]	; 14628 <next@@Base+0x11a0>
   15048:	add	r3, pc, r3
   1504c:	add	r3, r3, #608	; 0x260
   15050:	ldrd	r2, [r3, #-8]
   15054:	adds	r1, r2, #1
   15058:	str	r1, [fp, #-1172]	; 0xfffffb6c
   1505c:	adc	r3, r3, #0
   15060:	str	r3, [fp, #-1168]	; 0xfffffb70
   15064:	ldr	r3, [pc, #-2624]	; 1462c <next@@Base+0x11a4>
   15068:	add	r3, pc, r3
   1506c:	add	r3, r3, #608	; 0x260
   15070:	sub	r2, fp, #1168	; 0x490
   15074:	sub	r2, r2, #4
   15078:	ldrd	r0, [r2]
   1507c:	strd	r0, [r3, #-8]
   15080:	mov	r0, #1
   15084:	bl	11948 <exit@plt>
   15088:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1508c:	add	r2, r3, #1
   15090:	str	r2, [fp, #-44]	; 0xffffffd4
   15094:	sub	r2, fp, #36	; 0x24
   15098:	add	r3, r2, r3
   1509c:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   150a0:	strb	r2, [r3, #-540]	; 0xfffffde4
   150a4:	sub	r2, fp, #576	; 0x240
   150a8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   150ac:	add	r3, r2, r3
   150b0:	mov	r2, #0
   150b4:	strb	r2, [r3]
   150b8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   150bc:	add	r3, r3, #1
   150c0:	mov	r0, r3
   150c4:	bl	11918 <malloc@plt>
   150c8:	mov	r3, r0
   150cc:	str	r3, [fp, #-40]	; 0xffffffd8
   150d0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   150d4:	sub	r3, fp, #576	; 0x240
   150d8:	mov	r1, r3
   150dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   150e0:	bl	1199c <strncpy@plt>
   150e4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   150e8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   150ec:	add	r3, r2, r3
   150f0:	mov	r2, #0
   150f4:	strb	r2, [r3]
   150f8:	mov	r0, #8
   150fc:	bl	11918 <malloc@plt>
   15100:	mov	r3, r0
   15104:	str	r3, [fp, #-56]	; 0xffffffc8
   15108:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1510c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15110:	bl	12634 <init_token_function@@Base>
   15114:	ldr	r3, [pc, #-2796]	; 14630 <next@@Base+0x11a8>
   15118:	add	r3, pc, r3
   1511c:	add	r3, r3, #608	; 0x260
   15120:	ldrd	r2, [r3]
   15124:	adds	r1, r2, #1
   15128:	str	r1, [fp, #-1180]	; 0xfffffb64
   1512c:	adc	r3, r3, #0
   15130:	str	r3, [fp, #-1176]	; 0xfffffb68
   15134:	ldr	r3, [pc, #-2824]	; 14634 <next@@Base+0x11ac>
   15138:	add	r3, pc, r3
   1513c:	add	r3, r3, #608	; 0x260
   15140:	sub	r2, fp, #1168	; 0x490
   15144:	sub	r2, r2, #12
   15148:	ldrd	r0, [r2]
   1514c:	strd	r0, [r3]
   15150:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15154:	b	157c4 <next@@Base+0x233c>
   15158:	ldr	r3, [pc, #-2856]	; 14638 <next@@Base+0x11b0>
   1515c:	add	r3, pc, r3
   15160:	ldrd	r2, [r3, #64]	; 0x40
   15164:	adds	r1, r2, #1
   15168:	str	r1, [fp, #-636]	; 0xfffffd84
   1516c:	adc	r3, r3, #0
   15170:	str	r3, [fp, #-632]	; 0xfffffd88
   15174:	ldr	r3, [pc, #-2880]	; 1463c <next@@Base+0x11b4>
   15178:	add	r3, pc, r3
   1517c:	sub	r2, fp, #636	; 0x27c
   15180:	ldrd	r0, [r2]
   15184:	strd	r0, [r3, #64]	; 0x40
   15188:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1518c:	cmp	r3, #101	; 0x65
   15190:	beq	151d8 <next@@Base+0x1d50>
   15194:	ldr	r3, [pc, #-2908]	; 14640 <next@@Base+0x11b8>
   15198:	add	r3, pc, r3
   1519c:	add	r3, r3, #624	; 0x270
   151a0:	ldrd	r2, [r3, #-8]
   151a4:	adds	r1, r2, #1
   151a8:	str	r1, [fp, #-1188]	; 0xfffffb5c
   151ac:	adc	r3, r3, #0
   151b0:	str	r3, [fp, #-1184]	; 0xfffffb60
   151b4:	ldr	r3, [pc, #-2936]	; 14644 <next@@Base+0x11bc>
   151b8:	add	r3, pc, r3
   151bc:	add	r3, r3, #624	; 0x270
   151c0:	sub	r2, fp, #1184	; 0x4a0
   151c4:	sub	r2, r2, #4
   151c8:	ldrd	r0, [r2]
   151cc:	strd	r0, [r3, #-8]
   151d0:	mov	r0, #1
   151d4:	bl	11948 <exit@plt>
   151d8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   151dc:	add	r3, r2, #1
   151e0:	str	r3, [fp, #-44]	; 0xffffffd4
   151e4:	sub	r3, fp, #36	; 0x24
   151e8:	add	r2, r3, r2
   151ec:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   151f0:	strb	r3, [r2, #-540]	; 0xfffffde4
   151f4:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   151f8:	bl	13258 <get_char@@Base>
   151fc:	mov	r3, r0
   15200:	strb	r3, [fp, #-49]	; 0xffffffcf
   15204:	ldr	r3, [pc, #-3012]	; 14648 <next@@Base+0x11c0>
   15208:	add	r3, pc, r3
   1520c:	add	r3, r3, #624	; 0x270
   15210:	ldrd	r2, [r3]
   15214:	adds	r1, r2, #1
   15218:	str	r1, [fp, #-1196]	; 0xfffffb54
   1521c:	adc	r3, r3, #0
   15220:	str	r3, [fp, #-1192]	; 0xfffffb58
   15224:	ldr	r3, [pc, #-3040]	; 1464c <next@@Base+0x11c4>
   15228:	add	r3, pc, r3
   1522c:	add	r3, r3, #624	; 0x270
   15230:	sub	r2, fp, #1184	; 0x4a0
   15234:	sub	r2, r2, #12
   15238:	ldrd	r0, [r2]
   1523c:	strd	r0, [r3]
   15240:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   15244:	cmp	r3, #116	; 0x74
   15248:	beq	15290 <next@@Base+0x1e08>
   1524c:	ldr	r3, [pc, #-3076]	; 14650 <next@@Base+0x11c8>
   15250:	add	r3, pc, r3
   15254:	add	r3, r3, #640	; 0x280
   15258:	ldrd	r2, [r3, #-8]
   1525c:	adds	r1, r2, #1
   15260:	str	r1, [fp, #-1204]	; 0xfffffb4c
   15264:	adc	r3, r3, #0
   15268:	str	r3, [fp, #-1200]	; 0xfffffb50
   1526c:	ldr	r3, [pc, #-3104]	; 14654 <next@@Base+0x11cc>
   15270:	add	r3, pc, r3
   15274:	add	r3, r3, #640	; 0x280
   15278:	sub	r2, fp, #1200	; 0x4b0
   1527c:	sub	r2, r2, #4
   15280:	ldrd	r0, [r2]
   15284:	strd	r0, [r3, #-8]
   15288:	mov	r0, #1
   1528c:	bl	11948 <exit@plt>
   15290:	ldr	r2, [fp, #-44]	; 0xffffffd4
   15294:	add	r3, r2, #1
   15298:	str	r3, [fp, #-44]	; 0xffffffd4
   1529c:	sub	r3, fp, #36	; 0x24
   152a0:	add	r2, r3, r2
   152a4:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   152a8:	strb	r3, [r2, #-540]	; 0xfffffde4
   152ac:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   152b0:	bl	13258 <get_char@@Base>
   152b4:	mov	r3, r0
   152b8:	strb	r3, [fp, #-49]	; 0xffffffcf
   152bc:	ldr	r3, [pc, #-3180]	; 14658 <next@@Base+0x11d0>
   152c0:	add	r3, pc, r3
   152c4:	add	r3, r3, #640	; 0x280
   152c8:	ldrd	r2, [r3]
   152cc:	adds	r1, r2, #1
   152d0:	str	r1, [fp, #-1212]	; 0xfffffb44
   152d4:	adc	r3, r3, #0
   152d8:	str	r3, [fp, #-1208]	; 0xfffffb48
   152dc:	ldr	r3, [pc, #-3208]	; 1465c <next@@Base+0x11d4>
   152e0:	add	r3, pc, r3
   152e4:	add	r3, r3, #640	; 0x280
   152e8:	sub	r2, fp, #1200	; 0x4b0
   152ec:	sub	r2, r2, #12
   152f0:	ldrd	r0, [r2]
   152f4:	strd	r0, [r3]
   152f8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   152fc:	cmp	r3, #117	; 0x75
   15300:	beq	15348 <next@@Base+0x1ec0>
   15304:	ldr	r3, [pc, #-3244]	; 14660 <next@@Base+0x11d8>
   15308:	add	r3, pc, r3
   1530c:	add	r3, r3, #656	; 0x290
   15310:	ldrd	r2, [r3, #-8]
   15314:	adds	r1, r2, #1
   15318:	str	r1, [fp, #-1220]	; 0xfffffb3c
   1531c:	adc	r3, r3, #0
   15320:	str	r3, [fp, #-1216]	; 0xfffffb40
   15324:	ldr	r3, [pc, #-3272]	; 14664 <next@@Base+0x11dc>
   15328:	add	r3, pc, r3
   1532c:	add	r3, r3, #656	; 0x290
   15330:	sub	r2, fp, #1216	; 0x4c0
   15334:	sub	r2, r2, #4
   15338:	ldrd	r0, [r2]
   1533c:	strd	r0, [r3, #-8]
   15340:	mov	r0, #1
   15344:	bl	11948 <exit@plt>
   15348:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1534c:	add	r2, r3, #1
   15350:	str	r2, [fp, #-44]	; 0xffffffd4
   15354:	sub	r2, fp, #36	; 0x24
   15358:	add	r3, r2, r3
   1535c:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   15360:	strb	r2, [r3, #-540]	; 0xfffffde4
   15364:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   15368:	bl	13258 <get_char@@Base>
   1536c:	mov	r3, r0
   15370:	strb	r3, [fp, #-49]	; 0xffffffcf
   15374:	ldr	r3, [pc, #-3348]	; 14668 <next@@Base+0x11e0>
   15378:	add	r3, pc, r3
   1537c:	add	r3, r3, #656	; 0x290
   15380:	ldrd	r2, [r3]
   15384:	adds	r1, r2, #1
   15388:	str	r1, [fp, #-1228]	; 0xfffffb34
   1538c:	adc	r3, r3, #0
   15390:	str	r3, [fp, #-1224]	; 0xfffffb38
   15394:	ldr	r3, [pc, #-3376]	; 1466c <next@@Base+0x11e4>
   15398:	add	r3, pc, r3
   1539c:	add	r3, r3, #656	; 0x290
   153a0:	sub	r2, fp, #1216	; 0x4c0
   153a4:	sub	r2, r2, #12
   153a8:	ldrd	r0, [r2]
   153ac:	strd	r0, [r3]
   153b0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   153b4:	cmp	r3, #114	; 0x72
   153b8:	beq	15400 <next@@Base+0x1f78>
   153bc:	ldr	r3, [pc, #-3412]	; 14670 <next@@Base+0x11e8>
   153c0:	add	r3, pc, r3
   153c4:	add	r3, r3, #672	; 0x2a0
   153c8:	ldrd	r2, [r3, #-8]
   153cc:	adds	r1, r2, #1
   153d0:	str	r1, [fp, #-1236]	; 0xfffffb2c
   153d4:	adc	r3, r3, #0
   153d8:	str	r3, [fp, #-1232]	; 0xfffffb30
   153dc:	ldr	r3, [pc, #-3440]	; 14674 <next@@Base+0x11ec>
   153e0:	add	r3, pc, r3
   153e4:	add	r3, r3, #672	; 0x2a0
   153e8:	sub	r2, fp, #1232	; 0x4d0
   153ec:	sub	r2, r2, #4
   153f0:	ldrd	r0, [r2]
   153f4:	strd	r0, [r3, #-8]
   153f8:	mov	r0, #1
   153fc:	bl	11948 <exit@plt>
   15400:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15404:	add	r2, r3, #1
   15408:	str	r2, [fp, #-44]	; 0xffffffd4
   1540c:	sub	r2, fp, #36	; 0x24
   15410:	add	r3, r2, r3
   15414:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   15418:	strb	r2, [r3, #-540]	; 0xfffffde4
   1541c:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   15420:	bl	13258 <get_char@@Base>
   15424:	mov	r3, r0
   15428:	strb	r3, [fp, #-49]	; 0xffffffcf
   1542c:	ldr	r3, [pc, #-3516]	; 14678 <next@@Base+0x11f0>
   15430:	add	r3, pc, r3
   15434:	add	r3, r3, #672	; 0x2a0
   15438:	ldrd	r2, [r3]
   1543c:	adds	r1, r2, #1
   15440:	str	r1, [fp, #-1244]	; 0xfffffb24
   15444:	adc	r3, r3, #0
   15448:	str	r3, [fp, #-1240]	; 0xfffffb28
   1544c:	ldr	r3, [pc, #-3544]	; 1467c <next@@Base+0x11f4>
   15450:	add	r3, pc, r3
   15454:	add	r3, r3, #672	; 0x2a0
   15458:	sub	r2, fp, #1232	; 0x4d0
   1545c:	sub	r2, r2, #12
   15460:	ldrd	r0, [r2]
   15464:	strd	r0, [r3]
   15468:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1546c:	cmp	r3, #110	; 0x6e
   15470:	beq	154b8 <next@@Base+0x2030>
   15474:	ldr	r3, [pc, #-3580]	; 14680 <next@@Base+0x11f8>
   15478:	add	r3, pc, r3
   1547c:	add	r3, r3, #688	; 0x2b0
   15480:	ldrd	r2, [r3, #-8]
   15484:	adds	r1, r2, #1
   15488:	str	r1, [fp, #-1252]	; 0xfffffb1c
   1548c:	adc	r3, r3, #0
   15490:	str	r3, [fp, #-1248]	; 0xfffffb20
   15494:	ldr	r3, [pc, #-3608]	; 14684 <next@@Base+0x11fc>
   15498:	add	r3, pc, r3
   1549c:	add	r3, r3, #688	; 0x2b0
   154a0:	sub	r2, fp, #1248	; 0x4e0
   154a4:	sub	r2, r2, #4
   154a8:	ldrd	r0, [r2]
   154ac:	strd	r0, [r3, #-8]
   154b0:	mov	r0, #1
   154b4:	bl	11948 <exit@plt>
   154b8:	mov	r0, #4
   154bc:	bl	11918 <malloc@plt>
   154c0:	mov	r3, r0
   154c4:	str	r3, [fp, #-56]	; 0xffffffc8
   154c8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   154cc:	bl	12824 <init_token_return@@Base>
   154d0:	ldr	r3, [pc, #-3664]	; 14688 <next@@Base+0x1200>
   154d4:	add	r3, pc, r3
   154d8:	add	r3, r3, #688	; 0x2b0
   154dc:	ldrd	r2, [r3]
   154e0:	adds	r1, r2, #1
   154e4:	str	r1, [fp, #-1260]	; 0xfffffb14
   154e8:	adc	r3, r3, #0
   154ec:	str	r3, [fp, #-1256]	; 0xfffffb18
   154f0:	ldr	r3, [pc, #-3692]	; 1468c <next@@Base+0x1204>
   154f4:	add	r3, pc, r3
   154f8:	add	r3, r3, #688	; 0x2b0
   154fc:	sub	r2, fp, #1248	; 0x4e0
   15500:	sub	r2, r2, #12
   15504:	ldrd	r0, [r2]
   15508:	strd	r0, [r3]
   1550c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15510:	b	157c4 <next@@Base+0x233c>
   15514:	ldr	r3, [pc, #-3724]	; 14690 <next@@Base+0x1208>
   15518:	add	r3, pc, r3
   1551c:	ldrd	r2, [r3, #72]	; 0x48
   15520:	adds	r1, r2, #1
   15524:	str	r1, [fp, #-644]	; 0xfffffd7c
   15528:	adc	r3, r3, #0
   1552c:	str	r3, [fp, #-640]	; 0xfffffd80
   15530:	ldr	r3, [pc, #-3748]	; 14694 <next@@Base+0x120c>
   15534:	add	r3, pc, r3
   15538:	sub	r2, fp, #644	; 0x284
   1553c:	ldrd	r0, [r2]
   15540:	strd	r0, [r3, #72]	; 0x48
   15544:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   15548:	cmp	r3, #108	; 0x6c
   1554c:	beq	15594 <next@@Base+0x210c>
   15550:	ldr	r3, [pc, #-3776]	; 14698 <next@@Base+0x1210>
   15554:	add	r3, pc, r3
   15558:	add	r3, r3, #704	; 0x2c0
   1555c:	ldrd	r2, [r3, #-8]
   15560:	adds	r1, r2, #1
   15564:	str	r1, [fp, #-1268]	; 0xfffffb0c
   15568:	adc	r3, r3, #0
   1556c:	str	r3, [fp, #-1264]	; 0xfffffb10
   15570:	ldr	r3, [pc, #-3804]	; 1469c <next@@Base+0x1214>
   15574:	add	r3, pc, r3
   15578:	add	r3, r3, #704	; 0x2c0
   1557c:	sub	r2, fp, #1264	; 0x4f0
   15580:	sub	r2, r2, #4
   15584:	ldrd	r0, [r2]
   15588:	strd	r0, [r3, #-8]
   1558c:	mov	r0, #1
   15590:	bl	11948 <exit@plt>
   15594:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15598:	add	r2, r3, #1
   1559c:	str	r2, [fp, #-44]	; 0xffffffd4
   155a0:	sub	r2, fp, #36	; 0x24
   155a4:	add	r3, r2, r3
   155a8:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   155ac:	strb	r2, [r3, #-540]	; 0xfffffde4
   155b0:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   155b4:	bl	13258 <get_char@@Base>
   155b8:	mov	r3, r0
   155bc:	strb	r3, [fp, #-49]	; 0xffffffcf
   155c0:	ldr	r3, [pc, #-3880]	; 146a0 <next@@Base+0x1218>
   155c4:	add	r3, pc, r3
   155c8:	add	r3, r3, #704	; 0x2c0
   155cc:	ldrd	r2, [r3]
   155d0:	adds	r1, r2, #1
   155d4:	str	r1, [fp, #-1276]	; 0xfffffb04
   155d8:	adc	r3, r3, #0
   155dc:	str	r3, [fp, #-1272]	; 0xfffffb08
   155e0:	ldr	r3, [pc, #-3908]	; 146a4 <next@@Base+0x121c>
   155e4:	add	r3, pc, r3
   155e8:	add	r3, r3, #704	; 0x2c0
   155ec:	sub	r2, fp, #1264	; 0x4f0
   155f0:	sub	r2, r2, #12
   155f4:	ldrd	r0, [r2]
   155f8:	strd	r0, [r3]
   155fc:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   15600:	cmp	r3, #115	; 0x73
   15604:	beq	1564c <next@@Base+0x21c4>
   15608:	ldr	r3, [pc, #-3944]	; 146a8 <next@@Base+0x1220>
   1560c:	add	r3, pc, r3
   15610:	add	r3, r3, #720	; 0x2d0
   15614:	ldrd	r2, [r3, #-8]
   15618:	adds	r1, r2, #1
   1561c:	str	r1, [fp, #-1284]	; 0xfffffafc
   15620:	adc	r3, r3, #0
   15624:	str	r3, [fp, #-1280]	; 0xfffffb00
   15628:	ldr	r3, [pc, #-3972]	; 146ac <next@@Base+0x1224>
   1562c:	add	r3, pc, r3
   15630:	add	r3, r3, #720	; 0x2d0
   15634:	sub	r2, fp, #1280	; 0x500
   15638:	sub	r2, r2, #4
   1563c:	ldrd	r0, [r2]
   15640:	strd	r0, [r3, #-8]
   15644:	mov	r0, #1
   15648:	bl	11948 <exit@plt>
   1564c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15650:	add	r2, r3, #1
   15654:	str	r2, [fp, #-44]	; 0xffffffd4
   15658:	sub	r2, fp, #36	; 0x24
   1565c:	add	r3, r2, r3
   15660:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   15664:	strb	r2, [r3, #-540]	; 0xfffffde4
   15668:	ldr	r0, [fp, #-584]	; 0xfffffdb8
   1566c:	bl	13258 <get_char@@Base>
   15670:	mov	r3, r0
   15674:	strb	r3, [fp, #-49]	; 0xffffffcf
   15678:	ldr	r3, [pc, #-4048]	; 146b0 <next@@Base+0x1228>
   1567c:	add	r3, pc, r3
   15680:	add	r3, r3, #720	; 0x2d0
   15684:	ldrd	r2, [r3]
   15688:	adds	r1, r2, #1
   1568c:	str	r1, [fp, #-1292]	; 0xfffffaf4
   15690:	adc	r3, r3, #0
   15694:	str	r3, [fp, #-1288]	; 0xfffffaf8
   15698:	ldr	r3, [pc, #-4076]	; 146b4 <next@@Base+0x122c>
   1569c:	add	r3, pc, r3
   156a0:	add	r3, r3, #720	; 0x2d0
   156a4:	sub	r2, fp, #1280	; 0x500
   156a8:	sub	r2, r2, #12
   156ac:	ldrd	r0, [r2]
   156b0:	strd	r0, [r3]
   156b4:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   156b8:	cmp	r3, #101	; 0x65
   156bc:	beq	15704 <next@@Base+0x227c>
   156c0:	ldr	r3, [pc, #344]	; 15820 <next@@Base+0x2398>
   156c4:	add	r3, pc, r3
   156c8:	add	r3, r3, #736	; 0x2e0
   156cc:	ldrd	r2, [r3, #-8]
   156d0:	adds	r1, r2, #1
   156d4:	str	r1, [fp, #-1300]	; 0xfffffaec
   156d8:	adc	r3, r3, #0
   156dc:	str	r3, [fp, #-1296]	; 0xfffffaf0
   156e0:	ldr	r3, [pc, #316]	; 15824 <next@@Base+0x239c>
   156e4:	add	r3, pc, r3
   156e8:	add	r3, r3, #736	; 0x2e0
   156ec:	sub	r2, fp, #1296	; 0x510
   156f0:	sub	r2, r2, #4
   156f4:	ldrd	r0, [r2]
   156f8:	strd	r0, [r3, #-8]
   156fc:	mov	r0, #1
   15700:	bl	11948 <exit@plt>
   15704:	mov	r0, #4
   15708:	bl	11918 <malloc@plt>
   1570c:	mov	r3, r0
   15710:	str	r3, [fp, #-56]	; 0xffffffc8
   15714:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15718:	bl	129a4 <init_token_else@@Base>
   1571c:	ldr	r3, [pc, #260]	; 15828 <next@@Base+0x23a0>
   15720:	add	r3, pc, r3
   15724:	add	r3, r3, #736	; 0x2e0
   15728:	ldrd	r2, [r3]
   1572c:	adds	r1, r2, #1
   15730:	str	r1, [fp, #-1308]	; 0xfffffae4
   15734:	adc	r3, r3, #0
   15738:	str	r3, [fp, #-1304]	; 0xfffffae8
   1573c:	ldr	r3, [pc, #232]	; 1582c <next@@Base+0x23a4>
   15740:	add	r3, pc, r3
   15744:	add	r3, r3, #736	; 0x2e0
   15748:	sub	r2, fp, #1296	; 0x510
   1574c:	sub	r2, r2, #12
   15750:	ldrd	r0, [r2]
   15754:	strd	r0, [r3]
   15758:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1575c:	b	157c4 <next@@Base+0x233c>
   15760:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   15764:	cmp	r3, #0
   15768:	bne	135dc <next@@Base+0x154>
   1576c:	mov	r0, #4
   15770:	bl	11918 <malloc@plt>
   15774:	mov	r3, r0
   15778:	str	r3, [fp, #-56]	; 0xffffffc8
   1577c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15780:	bl	128e4 <init_token_eof@@Base>
   15784:	ldr	r3, [pc, #164]	; 15830 <next@@Base+0x23a8>
   15788:	add	r3, pc, r3
   1578c:	add	r3, r3, #752	; 0x2f0
   15790:	ldrd	r2, [r3]
   15794:	adds	r1, r2, #1
   15798:	str	r1, [fp, #-1324]	; 0xfffffad4
   1579c:	adc	r3, r3, #0
   157a0:	str	r3, [fp, #-1320]	; 0xfffffad8
   157a4:	ldr	r3, [pc, #136]	; 15834 <next@@Base+0x23ac>
   157a8:	add	r3, pc, r3
   157ac:	add	r3, r3, #752	; 0x2f0
   157b0:	sub	r2, fp, #1312	; 0x520
   157b4:	sub	r2, r2, #12
   157b8:	ldrd	r0, [r2]
   157bc:	strd	r0, [r3]
   157c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   157c4:	ldr	r2, [pc, #108]	; 15838 <next@@Base+0x23b0>
   157c8:	add	r2, pc, r2
   157cc:	add	r2, r2, #768	; 0x300
   157d0:	ldrd	r0, [r2, #-8]
   157d4:	adds	r2, r0, #1
   157d8:	str	r2, [fp, #-1332]	; 0xfffffacc
   157dc:	adc	r2, r1, #0
   157e0:	str	r2, [fp, #-1328]	; 0xfffffad0
   157e4:	ldr	r2, [pc, #80]	; 1583c <next@@Base+0x23b4>
   157e8:	add	r2, pc, r2
   157ec:	add	r2, r2, #768	; 0x300
   157f0:	sub	r1, fp, #1328	; 0x530
   157f4:	sub	r1, r1, #4
   157f8:	ldrd	r0, [r1]
   157fc:	strd	r0, [r2, #-8]
   15800:	mov	r0, r3
   15804:	sub	sp, fp, #32
   15808:	ldrd	r4, [sp]
   1580c:	ldrd	r6, [sp, #8]
   15810:	ldrd	r8, [sp, #16]
   15814:	ldrd	sl, [sp, #24]
   15818:	add	sp, sp, #32
   1581c:	pop	{pc}		; (ldr pc, [sp], #4)
   15820:			; <UNDEFINED> instruction: 0x000195b4
   15824:	muleq	r1, r4, r5
   15828:	andeq	r9, r1, r8, asr r5
   1582c:	andeq	r9, r1, r8, lsr r5
   15830:	strdeq	r9, [r1], -r0
   15834:	ldrdeq	r9, [r1], -r0
   15838:			; <UNDEFINED> instruction: 0x000194b0
   1583c:	muleq	r1, r0, r4
   15840:	str	fp, [sp, #-8]!
   15844:	str	lr, [sp, #4]
   15848:	add	fp, sp, #4
   1584c:	ldr	r3, [pc, #24]	; 1586c <next@@Base+0x23e4>
   15850:	add	r3, pc, r3
   15854:	mov	r0, r3
   15858:	bl	1c574 <__gcov_sort_n_vals@@Base+0x4a0>
   1585c:	sub	sp, fp, #4
   15860:	ldr	fp, [sp]
   15864:	add	sp, sp, #4
   15868:	pop	{pc}		; (ldr pc, [sp], #4)
   1586c:	andeq	r8, r1, ip, ror #25
   15870:	str	fp, [sp, #-8]!
   15874:	str	lr, [sp, #4]
   15878:	add	fp, sp, #4
   1587c:	bl	1c504 <__gcov_sort_n_vals@@Base+0x430>
   15880:	sub	sp, fp, #4
   15884:	ldr	fp, [sp]
   15888:	add	sp, sp, #4
   1588c:	pop	{pc}		; (ldr pc, [sp], #4)

00015890 <init_ast_base@@Base>:
   15890:	strd	r4, [sp, #-12]!
   15894:	str	fp, [sp, #8]
   15898:	add	fp, sp, #8
   1589c:	sub	sp, sp, #20
   158a0:	str	r0, [fp, #-16]
   158a4:	str	r1, [fp, #-20]	; 0xffffffec
   158a8:	str	r2, [fp, #-24]	; 0xffffffe8
   158ac:	ldr	r3, [pc, #72]	; 158fc <init_ast_base@@Base+0x6c>
   158b0:	add	r3, pc, r3
   158b4:	ldrd	r2, [r3]
   158b8:	adds	r4, r2, #1
   158bc:	adc	r5, r3, #0
   158c0:	ldr	r3, [pc, #56]	; 15900 <init_ast_base@@Base+0x70>
   158c4:	add	r3, pc, r3
   158c8:	strd	r4, [r3]
   158cc:	ldr	r3, [fp, #-16]
   158d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   158d4:	str	r2, [r3]
   158d8:	ldr	r3, [fp, #-16]
   158dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   158e0:	str	r2, [r3, #4]
   158e4:	nop	{0}
   158e8:	sub	sp, fp, #8
   158ec:	ldrd	r4, [sp]
   158f0:	ldr	fp, [sp, #8]
   158f4:	add	sp, sp, #12
   158f8:	bx	lr
   158fc:	andeq	r9, r1, r8, lsr #18
   15900:	andeq	r9, r1, r4, lsl r9

00015904 <init_ast_base_single@@Base>:
   15904:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15908:	strd	r6, [sp, #8]
   1590c:	str	fp, [sp, #16]
   15910:	str	lr, [sp, #20]
   15914:	add	fp, sp, #20
   15918:	sub	sp, sp, #8
   1591c:	str	r0, [fp, #-24]	; 0xffffffe8
   15920:	str	r1, [fp, #-28]	; 0xffffffe4
   15924:	ldr	r3, [pc, #100]	; 15990 <init_ast_base_single@@Base+0x8c>
   15928:	add	r3, pc, r3
   1592c:	ldrd	r2, [r3]
   15930:	adds	r6, r2, #1
   15934:	adc	r7, r3, #0
   15938:	ldr	r3, [pc, #84]	; 15994 <init_ast_base_single@@Base+0x90>
   1593c:	add	r3, pc, r3
   15940:	strd	r6, [r3]
   15944:	mov	r2, #0
   15948:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1594c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15950:	bl	15890 <init_ast_base@@Base>
   15954:	ldr	r3, [pc, #60]	; 15998 <init_ast_base_single@@Base+0x94>
   15958:	add	r3, pc, r3
   1595c:	ldrd	r2, [r3, #8]
   15960:	adds	r4, r2, #1
   15964:	adc	r5, r3, #0
   15968:	ldr	r3, [pc, #44]	; 1599c <init_ast_base_single@@Base+0x98>
   1596c:	add	r3, pc, r3
   15970:	strd	r4, [r3, #8]
   15974:	nop	{0}
   15978:	sub	sp, fp, #20
   1597c:	ldrd	r4, [sp]
   15980:	ldrd	r6, [sp, #8]
   15984:	ldr	fp, [sp, #16]
   15988:	add	sp, sp, #20
   1598c:	pop	{pc}		; (ldr pc, [sp], #4)
   15990:	andeq	r9, r1, r0, lsr #17
   15994:	andeq	r9, r1, ip, lsl #17
   15998:	andeq	r9, r1, r0, ror r8
   1599c:	andeq	r9, r1, ip, asr r8

000159a0 <init_node_id@@Base>:
   159a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   159a4:	strd	r6, [sp, #8]
   159a8:	str	fp, [sp, #16]
   159ac:	str	lr, [sp, #20]
   159b0:	add	fp, sp, #20
   159b4:	sub	sp, sp, #8
   159b8:	str	r0, [fp, #-24]	; 0xffffffe8
   159bc:	str	r1, [fp, #-28]	; 0xffffffe4
   159c0:	ldr	r3, [pc, #112]	; 15a38 <init_node_id@@Base+0x98>
   159c4:	add	r3, pc, r3
   159c8:	ldrd	r2, [r3]
   159cc:	adds	r6, r2, #1
   159d0:	adc	r7, r3, #0
   159d4:	ldr	r3, [pc, #96]	; 15a3c <init_node_id@@Base+0x9c>
   159d8:	add	r3, pc, r3
   159dc:	strd	r6, [r3]
   159e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   159e4:	mov	r1, #0
   159e8:	mov	r0, r3
   159ec:	bl	15904 <init_ast_base_single@@Base>
   159f0:	ldr	r3, [pc, #72]	; 15a40 <init_node_id@@Base+0xa0>
   159f4:	add	r3, pc, r3
   159f8:	ldrd	r2, [r3, #8]
   159fc:	adds	r4, r2, #1
   15a00:	adc	r5, r3, #0
   15a04:	ldr	r3, [pc, #56]	; 15a44 <init_node_id@@Base+0xa4>
   15a08:	add	r3, pc, r3
   15a0c:	strd	r4, [r3, #8]
   15a10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15a14:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15a18:	str	r2, [r3, #8]
   15a1c:	nop	{0}
   15a20:	sub	sp, fp, #20
   15a24:	ldrd	r4, [sp]
   15a28:	ldrd	r6, [sp, #8]
   15a2c:	ldr	fp, [sp, #16]
   15a30:	add	sp, sp, #20
   15a34:	pop	{pc}		; (ldr pc, [sp], #4)
   15a38:	strdeq	r9, [r1], -r4
   15a3c:	andeq	r9, r1, r0, ror #15
   15a40:	andeq	r9, r1, r4, asr #15
   15a44:			; <UNDEFINED> instruction: 0x000197b0

00015a48 <init_node_int@@Base>:
   15a48:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15a4c:	strd	r6, [sp, #8]
   15a50:	str	fp, [sp, #16]
   15a54:	str	lr, [sp, #20]
   15a58:	add	fp, sp, #20
   15a5c:	sub	sp, sp, #8
   15a60:	str	r0, [fp, #-24]	; 0xffffffe8
   15a64:	str	r1, [fp, #-28]	; 0xffffffe4
   15a68:	ldr	r3, [pc, #112]	; 15ae0 <init_node_int@@Base+0x98>
   15a6c:	add	r3, pc, r3
   15a70:	ldrd	r2, [r3]
   15a74:	adds	r6, r2, #1
   15a78:	adc	r7, r3, #0
   15a7c:	ldr	r3, [pc, #96]	; 15ae4 <init_node_int@@Base+0x9c>
   15a80:	add	r3, pc, r3
   15a84:	strd	r6, [r3]
   15a88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15a8c:	mov	r1, #1
   15a90:	mov	r0, r3
   15a94:	bl	15904 <init_ast_base_single@@Base>
   15a98:	ldr	r3, [pc, #72]	; 15ae8 <init_node_int@@Base+0xa0>
   15a9c:	add	r3, pc, r3
   15aa0:	ldrd	r2, [r3, #8]
   15aa4:	adds	r4, r2, #1
   15aa8:	adc	r5, r3, #0
   15aac:	ldr	r3, [pc, #56]	; 15aec <init_node_int@@Base+0xa4>
   15ab0:	add	r3, pc, r3
   15ab4:	strd	r4, [r3, #8]
   15ab8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15abc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15ac0:	str	r2, [r3, #8]
   15ac4:	nop	{0}
   15ac8:	sub	sp, fp, #20
   15acc:	ldrd	r4, [sp]
   15ad0:	ldrd	r6, [sp, #8]
   15ad4:	ldr	fp, [sp, #16]
   15ad8:	add	sp, sp, #20
   15adc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ae0:	andeq	r9, r1, ip, lsr r7
   15ae4:	andeq	r9, r1, r8, lsr #14
   15ae8:	andeq	r9, r1, ip, lsl #14
   15aec:	strdeq	r9, [r1], -r8

00015af0 <init_node_function@@Base>:
   15af0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15af4:	strd	r6, [sp, #8]
   15af8:	str	fp, [sp, #16]
   15afc:	str	lr, [sp, #20]
   15b00:	add	fp, sp, #20
   15b04:	sub	sp, sp, #16
   15b08:	str	r0, [fp, #-24]	; 0xffffffe8
   15b0c:	str	r1, [fp, #-28]	; 0xffffffe4
   15b10:	str	r2, [fp, #-32]	; 0xffffffe0
   15b14:	ldr	r3, [pc, #124]	; 15b98 <init_node_function@@Base+0xa8>
   15b18:	add	r3, pc, r3
   15b1c:	ldrd	r2, [r3]
   15b20:	adds	r6, r2, #1
   15b24:	adc	r7, r3, #0
   15b28:	ldr	r3, [pc, #108]	; 15b9c <init_node_function@@Base+0xac>
   15b2c:	add	r3, pc, r3
   15b30:	strd	r6, [r3]
   15b34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15b38:	mov	r1, #2
   15b3c:	mov	r0, r3
   15b40:	bl	15904 <init_ast_base_single@@Base>
   15b44:	ldr	r3, [pc, #84]	; 15ba0 <init_node_function@@Base+0xb0>
   15b48:	add	r3, pc, r3
   15b4c:	ldrd	r2, [r3, #8]
   15b50:	adds	r4, r2, #1
   15b54:	adc	r5, r3, #0
   15b58:	ldr	r3, [pc, #68]	; 15ba4 <init_node_function@@Base+0xb4>
   15b5c:	add	r3, pc, r3
   15b60:	strd	r4, [r3, #8]
   15b64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15b68:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15b6c:	str	r2, [r3, #8]
   15b70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15b74:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15b78:	str	r2, [r3, #12]
   15b7c:	nop	{0}
   15b80:	sub	sp, fp, #20
   15b84:	ldrd	r4, [sp]
   15b88:	ldrd	r6, [sp, #8]
   15b8c:	ldr	fp, [sp, #16]
   15b90:	add	sp, sp, #20
   15b94:	pop	{pc}		; (ldr pc, [sp], #4)
   15b98:	andeq	r9, r1, r0, lsl #13
   15b9c:	andeq	r9, r1, ip, ror #12
   15ba0:	andeq	r9, r1, r0, asr r6
   15ba4:	andeq	r9, r1, ip, lsr r6

00015ba8 <init_node_return@@Base>:
   15ba8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15bac:	strd	r6, [sp, #8]
   15bb0:	str	fp, [sp, #16]
   15bb4:	str	lr, [sp, #20]
   15bb8:	add	fp, sp, #20
   15bbc:	sub	sp, sp, #8
   15bc0:	str	r0, [fp, #-24]	; 0xffffffe8
   15bc4:	str	r1, [fp, #-28]	; 0xffffffe4
   15bc8:	ldr	r3, [pc, #112]	; 15c40 <init_node_return@@Base+0x98>
   15bcc:	add	r3, pc, r3
   15bd0:	ldrd	r2, [r3]
   15bd4:	adds	r6, r2, #1
   15bd8:	adc	r7, r3, #0
   15bdc:	ldr	r3, [pc, #96]	; 15c44 <init_node_return@@Base+0x9c>
   15be0:	add	r3, pc, r3
   15be4:	strd	r6, [r3]
   15be8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15bec:	mov	r1, #3
   15bf0:	mov	r0, r3
   15bf4:	bl	15904 <init_ast_base_single@@Base>
   15bf8:	ldr	r3, [pc, #72]	; 15c48 <init_node_return@@Base+0xa0>
   15bfc:	add	r3, pc, r3
   15c00:	ldrd	r2, [r3, #8]
   15c04:	adds	r4, r2, #1
   15c08:	adc	r5, r3, #0
   15c0c:	ldr	r3, [pc, #56]	; 15c4c <init_node_return@@Base+0xa4>
   15c10:	add	r3, pc, r3
   15c14:	strd	r4, [r3, #8]
   15c18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15c1c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15c20:	str	r2, [r3, #8]
   15c24:	nop	{0}
   15c28:	sub	sp, fp, #20
   15c2c:	ldrd	r4, [sp]
   15c30:	ldrd	r6, [sp, #8]
   15c34:	ldr	fp, [sp, #16]
   15c38:	add	sp, sp, #20
   15c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c40:			; <UNDEFINED> instruction: 0x000195bc
   15c44:	andeq	r9, r1, r8, lsr #11
   15c48:	andeq	r9, r1, ip, lsl #11
   15c4c:	andeq	r9, r1, r8, ror r5

00015c50 <init_node_if@@Base>:
   15c50:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15c54:	strd	r6, [sp, #8]
   15c58:	str	fp, [sp, #16]
   15c5c:	str	lr, [sp, #20]
   15c60:	add	fp, sp, #20
   15c64:	sub	sp, sp, #16
   15c68:	str	r0, [fp, #-24]	; 0xffffffe8
   15c6c:	str	r1, [fp, #-28]	; 0xffffffe4
   15c70:	str	r2, [fp, #-32]	; 0xffffffe0
   15c74:	str	r3, [fp, #-36]	; 0xffffffdc
   15c78:	ldr	r3, [pc, #136]	; 15d08 <init_node_if@@Base+0xb8>
   15c7c:	add	r3, pc, r3
   15c80:	ldrd	r2, [r3]
   15c84:	adds	r6, r2, #1
   15c88:	adc	r7, r3, #0
   15c8c:	ldr	r3, [pc, #120]	; 15d0c <init_node_if@@Base+0xbc>
   15c90:	add	r3, pc, r3
   15c94:	strd	r6, [r3]
   15c98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15c9c:	mov	r1, #4
   15ca0:	mov	r0, r3
   15ca4:	bl	15904 <init_ast_base_single@@Base>
   15ca8:	ldr	r3, [pc, #96]	; 15d10 <init_node_if@@Base+0xc0>
   15cac:	add	r3, pc, r3
   15cb0:	ldrd	r2, [r3, #8]
   15cb4:	adds	r4, r2, #1
   15cb8:	adc	r5, r3, #0
   15cbc:	ldr	r3, [pc, #80]	; 15d14 <init_node_if@@Base+0xc4>
   15cc0:	add	r3, pc, r3
   15cc4:	strd	r4, [r3, #8]
   15cc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ccc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15cd0:	str	r2, [r3, #8]
   15cd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15cd8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15cdc:	str	r2, [r3, #12]
   15ce0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ce4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15ce8:	str	r2, [r3, #16]
   15cec:	nop	{0}
   15cf0:	sub	sp, fp, #20
   15cf4:	ldrd	r4, [sp]
   15cf8:	ldrd	r6, [sp, #8]
   15cfc:	ldr	fp, [sp, #16]
   15d00:	add	sp, sp, #20
   15d04:	pop	{pc}		; (ldr pc, [sp], #4)
   15d08:	strdeq	r9, [r1], -ip
   15d0c:	andeq	r9, r1, r8, ror #9
   15d10:	andeq	r9, r1, ip, asr #9
   15d14:			; <UNDEFINED> instruction: 0x000194b8

00015d18 <init_node_boolean_operator@@Base>:
   15d18:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15d1c:	strd	r6, [sp, #8]
   15d20:	str	fp, [sp, #16]
   15d24:	str	lr, [sp, #20]
   15d28:	add	fp, sp, #20
   15d2c:	sub	sp, sp, #16
   15d30:	str	r0, [fp, #-24]	; 0xffffffe8
   15d34:	str	r1, [fp, #-28]	; 0xffffffe4
   15d38:	str	r2, [fp, #-32]	; 0xffffffe0
   15d3c:	str	r3, [fp, #-36]	; 0xffffffdc
   15d40:	ldr	r3, [pc, #148]	; 15ddc <init_node_boolean_operator@@Base+0xc4>
   15d44:	add	r3, pc, r3
   15d48:	ldrd	r2, [r3]
   15d4c:	adds	r6, r2, #1
   15d50:	adc	r7, r3, #0
   15d54:	ldr	r3, [pc, #132]	; 15de0 <init_node_boolean_operator@@Base+0xc8>
   15d58:	add	r3, pc, r3
   15d5c:	strd	r6, [r3]
   15d60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15d64:	mov	r1, #0
   15d68:	mov	r0, r3
   15d6c:	bl	15904 <init_ast_base_single@@Base>
   15d70:	ldr	r3, [pc, #108]	; 15de4 <init_node_boolean_operator@@Base+0xcc>
   15d74:	add	r3, pc, r3
   15d78:	ldrd	r2, [r3, #8]
   15d7c:	adds	r4, r2, #1
   15d80:	adc	r5, r3, #0
   15d84:	ldr	r3, [pc, #92]	; 15de8 <init_node_boolean_operator@@Base+0xd0>
   15d88:	add	r3, pc, r3
   15d8c:	strd	r4, [r3, #8]
   15d90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15d94:	mov	r2, #5
   15d98:	str	r2, [r3]
   15d9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15da0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15da4:	str	r2, [r3, #16]
   15da8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15dac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15db0:	str	r2, [r3, #8]
   15db4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15db8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15dbc:	str	r2, [r3, #12]
   15dc0:	nop	{0}
   15dc4:	sub	sp, fp, #20
   15dc8:	ldrd	r4, [sp]
   15dcc:	ldrd	r6, [sp, #8]
   15dd0:	ldr	fp, [sp, #16]
   15dd4:	add	sp, sp, #20
   15dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   15ddc:	andeq	r9, r1, r4, lsr #8
   15de0:	andeq	r9, r1, r0, lsl r4
   15de4:	strdeq	r9, [r1], -r4
   15de8:	andeq	r9, r1, r0, ror #7

00015dec <free_node@@Base>:
   15dec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15df0:	strd	r6, [sp, #8]
   15df4:	strd	r8, [sp, #16]
   15df8:	str	fp, [sp, #24]
   15dfc:	str	lr, [sp, #28]
   15e00:	add	fp, sp, #28
   15e04:	sub	sp, sp, #96	; 0x60
   15e08:	str	r0, [fp, #-32]	; 0xffffffe0
   15e0c:	ldr	r1, [pc, #792]	; 1612c <free_node@@Base+0x340>
   15e10:	add	r1, pc, r1
   15e14:	ldr	r3, [pc, #788]	; 16130 <free_node@@Base+0x344>
   15e18:	add	r3, pc, r3
   15e1c:	ldrd	r2, [r3]
   15e20:	adds	r4, r2, #1
   15e24:	adc	r5, r3, #0
   15e28:	ldr	r3, [pc, #772]	; 16134 <free_node@@Base+0x348>
   15e2c:	add	r3, pc, r3
   15e30:	strd	r4, [r3]
   15e34:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15e38:	ldr	r3, [r3]
   15e3c:	cmp	r3, #5
   15e40:	addls	pc, pc, r3, lsl #2
   15e44:	b	160c4 <free_node@@Base+0x2d8>
   15e48:	b	15e60 <free_node@@Base+0x74>
   15e4c:	b	15ec8 <free_node@@Base+0xdc>
   15e50:	b	15f30 <free_node@@Base+0x144>
   15e54:	b	15f98 <free_node@@Base+0x1ac>
   15e58:	b	16000 <free_node@@Base+0x214>
   15e5c:	b	16068 <free_node@@Base+0x27c>
   15e60:	ldr	r3, [pc, #720]	; 16138 <free_node@@Base+0x34c>
   15e64:	add	r3, pc, r3
   15e68:	ldrd	r2, [r3, #8]
   15e6c:	adds	r1, r2, #1
   15e70:	str	r1, [fp, #-44]	; 0xffffffd4
   15e74:	adc	r3, r3, #0
   15e78:	str	r3, [fp, #-40]	; 0xffffffd8
   15e7c:	ldr	r3, [pc, #696]	; 1613c <free_node@@Base+0x350>
   15e80:	add	r3, pc, r3
   15e84:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   15e88:	strd	r0, [r3, #8]
   15e8c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15e90:	bl	161a8 <free_node_id@@Base>
   15e94:	nop	{0}
   15e98:	ldr	r3, [pc, #672]	; 16140 <free_node@@Base+0x354>
   15e9c:	add	r3, pc, r3
   15ea0:	ldrd	r2, [r3, #56]	; 0x38
   15ea4:	adds	r1, r2, #1
   15ea8:	str	r1, [fp, #-92]	; 0xffffffa4
   15eac:	adc	r3, r3, #0
   15eb0:	str	r3, [fp, #-88]	; 0xffffffa8
   15eb4:	ldr	r3, [pc, #648]	; 16144 <free_node@@Base+0x358>
   15eb8:	add	r3, pc, r3
   15ebc:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   15ec0:	strd	r0, [r3, #56]	; 0x38
   15ec4:	b	1610c <free_node@@Base+0x320>
   15ec8:	ldr	r3, [pc, #632]	; 16148 <free_node@@Base+0x35c>
   15ecc:	add	r3, pc, r3
   15ed0:	ldrd	r2, [r3, #16]
   15ed4:	adds	r1, r2, #1
   15ed8:	str	r1, [fp, #-52]	; 0xffffffcc
   15edc:	adc	r3, r3, #0
   15ee0:	str	r3, [fp, #-48]	; 0xffffffd0
   15ee4:	ldr	r3, [pc, #608]	; 1614c <free_node@@Base+0x360>
   15ee8:	add	r3, pc, r3
   15eec:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   15ef0:	strd	r0, [r3, #16]
   15ef4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15ef8:	bl	16288 <free_node_int@@Base>
   15efc:	nop	{0}
   15f00:	ldr	r3, [pc, #584]	; 16150 <free_node@@Base+0x364>
   15f04:	add	r3, pc, r3
   15f08:	ldrd	r2, [r3, #64]	; 0x40
   15f0c:	adds	r1, r2, #1
   15f10:	str	r1, [fp, #-100]	; 0xffffff9c
   15f14:	adc	r3, r3, #0
   15f18:	str	r3, [fp, #-96]	; 0xffffffa0
   15f1c:	ldr	r3, [pc, #560]	; 16154 <free_node@@Base+0x368>
   15f20:	add	r3, pc, r3
   15f24:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   15f28:	strd	r0, [r3, #64]	; 0x40
   15f2c:	b	1610c <free_node@@Base+0x320>
   15f30:	ldr	r3, [pc, #544]	; 16158 <free_node@@Base+0x36c>
   15f34:	add	r3, pc, r3
   15f38:	ldrd	r2, [r3, #24]
   15f3c:	adds	r1, r2, #1
   15f40:	str	r1, [fp, #-60]	; 0xffffffc4
   15f44:	adc	r3, r3, #0
   15f48:	str	r3, [fp, #-56]	; 0xffffffc8
   15f4c:	ldr	r3, [pc, #520]	; 1615c <free_node@@Base+0x370>
   15f50:	add	r3, pc, r3
   15f54:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   15f58:	strd	r0, [r3, #24]
   15f5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15f60:	bl	16368 <free_node_function@@Base>
   15f64:	nop	{0}
   15f68:	ldr	r3, [pc, #496]	; 16160 <free_node@@Base+0x374>
   15f6c:	add	r3, pc, r3
   15f70:	ldrd	r2, [r3, #72]	; 0x48
   15f74:	adds	r1, r2, #1
   15f78:	str	r1, [fp, #-108]	; 0xffffff94
   15f7c:	adc	r3, r3, #0
   15f80:	str	r3, [fp, #-104]	; 0xffffff98
   15f84:	ldr	r3, [pc, #472]	; 16164 <free_node@@Base+0x378>
   15f88:	add	r3, pc, r3
   15f8c:	ldrd	r0, [fp, #-108]	; 0xffffff94
   15f90:	strd	r0, [r3, #72]	; 0x48
   15f94:	b	1610c <free_node@@Base+0x320>
   15f98:	ldr	r3, [pc, #456]	; 16168 <free_node@@Base+0x37c>
   15f9c:	add	r3, pc, r3
   15fa0:	ldrd	r2, [r3, #32]
   15fa4:	adds	r1, r2, #1
   15fa8:	str	r1, [fp, #-68]	; 0xffffffbc
   15fac:	adc	r3, r3, #0
   15fb0:	str	r3, [fp, #-64]	; 0xffffffc0
   15fb4:	ldr	r3, [pc, #432]	; 1616c <free_node@@Base+0x380>
   15fb8:	add	r3, pc, r3
   15fbc:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   15fc0:	strd	r0, [r3, #32]
   15fc4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15fc8:	bl	16458 <free_node_return@@Base>
   15fcc:	nop	{0}
   15fd0:	ldr	r3, [pc, #408]	; 16170 <free_node@@Base+0x384>
   15fd4:	add	r3, pc, r3
   15fd8:	ldrd	r2, [r3, #80]	; 0x50
   15fdc:	adds	r1, r2, #1
   15fe0:	str	r1, [fp, #-116]	; 0xffffff8c
   15fe4:	adc	r3, r3, #0
   15fe8:	str	r3, [fp, #-112]	; 0xffffff90
   15fec:	ldr	r3, [pc, #384]	; 16174 <free_node@@Base+0x388>
   15ff0:	add	r3, pc, r3
   15ff4:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   15ff8:	strd	r0, [r3, #80]	; 0x50
   15ffc:	b	1610c <free_node@@Base+0x320>
   16000:	ldr	r3, [pc, #368]	; 16178 <free_node@@Base+0x38c>
   16004:	add	r3, pc, r3
   16008:	ldrd	r2, [r3, #40]	; 0x28
   1600c:	adds	r1, r2, #1
   16010:	str	r1, [fp, #-76]	; 0xffffffb4
   16014:	adc	r3, r3, #0
   16018:	str	r3, [fp, #-72]	; 0xffffffb8
   1601c:	ldr	r3, [pc, #344]	; 1617c <free_node@@Base+0x390>
   16020:	add	r3, pc, r3
   16024:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   16028:	strd	r0, [r3, #40]	; 0x28
   1602c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16030:	bl	16538 <free_node_if@@Base>
   16034:	nop	{0}
   16038:	ldr	r3, [pc, #320]	; 16180 <free_node@@Base+0x394>
   1603c:	add	r3, pc, r3
   16040:	ldrd	r2, [r3, #88]	; 0x58
   16044:	adds	r1, r2, #1
   16048:	str	r1, [fp, #-124]	; 0xffffff84
   1604c:	adc	r3, r3, #0
   16050:	str	r3, [fp, #-120]	; 0xffffff88
   16054:	ldr	r3, [pc, #296]	; 16184 <free_node@@Base+0x398>
   16058:	add	r3, pc, r3
   1605c:	ldrd	r0, [fp, #-124]	; 0xffffff84
   16060:	strd	r0, [r3, #88]	; 0x58
   16064:	b	1610c <free_node@@Base+0x320>
   16068:	ldr	r3, [pc, #280]	; 16188 <free_node@@Base+0x39c>
   1606c:	add	r3, pc, r3
   16070:	ldrd	r2, [r3, #48]	; 0x30
   16074:	adds	r1, r2, #1
   16078:	str	r1, [fp, #-84]	; 0xffffffac
   1607c:	adc	r3, r3, #0
   16080:	str	r3, [fp, #-80]	; 0xffffffb0
   16084:	ldr	r3, [pc, #256]	; 1618c <free_node@@Base+0x3a0>
   16088:	add	r3, pc, r3
   1608c:	ldrd	r0, [fp, #-84]	; 0xffffffac
   16090:	strd	r0, [r3, #48]	; 0x30
   16094:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16098:	bl	166e4 <free_node_boolean_operator@@Base>
   1609c:	nop	{0}
   160a0:	ldr	r3, [pc, #232]	; 16190 <free_node@@Base+0x3a4>
   160a4:	add	r3, pc, r3
   160a8:	ldrd	r2, [r3, #96]	; 0x60
   160ac:	adds	r8, r2, #1
   160b0:	adc	r9, r3, #0
   160b4:	ldr	r3, [pc, #216]	; 16194 <free_node@@Base+0x3a8>
   160b8:	add	r3, pc, r3
   160bc:	strd	r8, [r3, #96]	; 0x60
   160c0:	b	1610c <free_node@@Base+0x320>
   160c4:	ldr	r3, [pc, #204]	; 16198 <free_node@@Base+0x3ac>
   160c8:	ldr	r3, [r1, r3]
   160cc:	ldr	r3, [r3]
   160d0:	mov	r2, #31
   160d4:	mov	r1, #1
   160d8:	ldr	r0, [pc, #188]	; 1619c <free_node@@Base+0x3b0>
   160dc:	add	r0, pc, r0
   160e0:	bl	118dc <fwrite@plt>
   160e4:	ldr	r3, [pc, #180]	; 161a0 <free_node@@Base+0x3b4>
   160e8:	add	r3, pc, r3
   160ec:	ldrd	r2, [r3, #104]	; 0x68
   160f0:	adds	r6, r2, #1
   160f4:	adc	r7, r3, #0
   160f8:	ldr	r3, [pc, #164]	; 161a4 <free_node@@Base+0x3b8>
   160fc:	add	r3, pc, r3
   16100:	strd	r6, [r3, #104]	; 0x68
   16104:	mov	r0, #1
   16108:	bl	11948 <exit@plt>
   1610c:	nop	{0}
   16110:	sub	sp, fp, #28
   16114:	ldrd	r4, [sp]
   16118:	ldrd	r6, [sp, #8]
   1611c:	ldrd	r8, [sp, #16]
   16120:	ldr	fp, [sp, #24]
   16124:	add	sp, sp, #28
   16128:	pop	{pc}		; (ldr pc, [sp], #4)
   1612c:	andeq	r8, r1, r8, ror #3
   16130:	andeq	r9, r1, r0, ror #5
   16134:	andeq	r9, r1, ip, asr #5
   16138:	muleq	r1, r4, r2
   1613c:	andeq	r9, r1, r8, ror r2
   16140:	andeq	r9, r1, ip, asr r2
   16144:	andeq	r9, r1, r0, asr #4
   16148:	andeq	r9, r1, ip, lsr #4
   1614c:	andeq	r9, r1, r0, lsl r2
   16150:	strdeq	r9, [r1], -r4
   16154:	ldrdeq	r9, [r1], -r8
   16158:	andeq	r9, r1, r4, asr #3
   1615c:	andeq	r9, r1, r8, lsr #3
   16160:	andeq	r9, r1, ip, lsl #3
   16164:	andeq	r9, r1, r0, ror r1
   16168:	andeq	r9, r1, ip, asr r1
   1616c:	andeq	r9, r1, r0, asr #2
   16170:	andeq	r9, r1, r4, lsr #2
   16174:	andeq	r9, r1, r8, lsl #2
   16178:	strdeq	r9, [r1], -r4
   1617c:	ldrdeq	r9, [r1], -r8
   16180:	strheq	r9, [r1], -ip
   16184:	andeq	r9, r1, r0, lsr #1
   16188:	andeq	r9, r1, ip, lsl #1
   1618c:	andeq	r9, r1, r0, ror r0
   16190:	andeq	r9, r1, r4, asr r0
   16194:	andeq	r9, r1, r0, asr #32
   16198:	andeq	r0, r0, r0, lsr #1
   1619c:	andeq	r6, r0, r8, asr sl
   161a0:	andeq	r9, r1, r0, lsl r0
   161a4:	strdeq	r8, [r1], -ip

000161a8 <free_node_id@@Base>:
   161a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   161ac:	strd	r6, [sp, #8]
   161b0:	strd	r8, [sp, #16]
   161b4:	str	fp, [sp, #24]
   161b8:	str	lr, [sp, #28]
   161bc:	add	fp, sp, #28
   161c0:	sub	sp, sp, #8
   161c4:	str	r0, [fp, #-32]	; 0xffffffe0
   161c8:	ldr	r3, [pc, #160]	; 16270 <free_node_id@@Base+0xc8>
   161cc:	add	r3, pc, r3
   161d0:	ldrd	r2, [r3]
   161d4:	adds	r8, r2, #1
   161d8:	adc	r9, r3, #0
   161dc:	ldr	r3, [pc, #144]	; 16274 <free_node_id@@Base+0xcc>
   161e0:	add	r3, pc, r3
   161e4:	strd	r8, [r3]
   161e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   161ec:	ldr	r3, [r3, #4]
   161f0:	cmp	r3, #0
   161f4:	beq	16248 <free_node_id@@Base+0xa0>
   161f8:	ldr	r3, [pc, #120]	; 16278 <free_node_id@@Base+0xd0>
   161fc:	add	r3, pc, r3
   16200:	ldrd	r2, [r3, #8]
   16204:	adds	r6, r2, #1
   16208:	adc	r7, r3, #0
   1620c:	ldr	r3, [pc, #104]	; 1627c <free_node_id@@Base+0xd4>
   16210:	add	r3, pc, r3
   16214:	strd	r6, [r3, #8]
   16218:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1621c:	ldr	r3, [r3, #4]
   16220:	mov	r0, r3
   16224:	bl	15dec <free_node@@Base>
   16228:	ldr	r3, [pc, #80]	; 16280 <free_node_id@@Base+0xd8>
   1622c:	add	r3, pc, r3
   16230:	ldrd	r2, [r3, #16]
   16234:	adds	r4, r2, #1
   16238:	adc	r5, r3, #0
   1623c:	ldr	r3, [pc, #64]	; 16284 <free_node_id@@Base+0xdc>
   16240:	add	r3, pc, r3
   16244:	strd	r4, [r3, #16]
   16248:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1624c:	bl	118b8 <free@plt>
   16250:	nop	{0}
   16254:	sub	sp, fp, #28
   16258:	ldrd	r4, [sp]
   1625c:	ldrd	r6, [sp, #8]
   16260:	ldrd	r8, [sp, #16]
   16264:	ldr	fp, [sp, #24]
   16268:	add	sp, sp, #28
   1626c:	pop	{pc}		; (ldr pc, [sp], #4)
   16270:	andeq	r8, r1, r4, lsl pc
   16274:	andeq	r8, r1, r0, lsl #30
   16278:	andeq	r8, r1, r4, ror #29
   1627c:	ldrdeq	r8, [r1], -r0
   16280:			; <UNDEFINED> instruction: 0x00018eb4
   16284:	andeq	r8, r1, r0, lsr #29

00016288 <free_node_int@@Base>:
   16288:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1628c:	strd	r6, [sp, #8]
   16290:	strd	r8, [sp, #16]
   16294:	str	fp, [sp, #24]
   16298:	str	lr, [sp, #28]
   1629c:	add	fp, sp, #28
   162a0:	sub	sp, sp, #8
   162a4:	str	r0, [fp, #-32]	; 0xffffffe0
   162a8:	ldr	r3, [pc, #160]	; 16350 <free_node_int@@Base+0xc8>
   162ac:	add	r3, pc, r3
   162b0:	ldrd	r2, [r3]
   162b4:	adds	r8, r2, #1
   162b8:	adc	r9, r3, #0
   162bc:	ldr	r3, [pc, #144]	; 16354 <free_node_int@@Base+0xcc>
   162c0:	add	r3, pc, r3
   162c4:	strd	r8, [r3]
   162c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   162cc:	ldr	r3, [r3, #4]
   162d0:	cmp	r3, #0
   162d4:	beq	16328 <free_node_int@@Base+0xa0>
   162d8:	ldr	r3, [pc, #120]	; 16358 <free_node_int@@Base+0xd0>
   162dc:	add	r3, pc, r3
   162e0:	ldrd	r2, [r3, #8]
   162e4:	adds	r6, r2, #1
   162e8:	adc	r7, r3, #0
   162ec:	ldr	r3, [pc, #104]	; 1635c <free_node_int@@Base+0xd4>
   162f0:	add	r3, pc, r3
   162f4:	strd	r6, [r3, #8]
   162f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   162fc:	ldr	r3, [r3, #4]
   16300:	mov	r0, r3
   16304:	bl	15dec <free_node@@Base>
   16308:	ldr	r3, [pc, #80]	; 16360 <free_node_int@@Base+0xd8>
   1630c:	add	r3, pc, r3
   16310:	ldrd	r2, [r3, #16]
   16314:	adds	r4, r2, #1
   16318:	adc	r5, r3, #0
   1631c:	ldr	r3, [pc, #64]	; 16364 <free_node_int@@Base+0xdc>
   16320:	add	r3, pc, r3
   16324:	strd	r4, [r3, #16]
   16328:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1632c:	bl	118b8 <free@plt>
   16330:	nop	{0}
   16334:	sub	sp, fp, #28
   16338:	ldrd	r4, [sp]
   1633c:	ldrd	r6, [sp, #8]
   16340:	ldrd	r8, [sp, #16]
   16344:	ldr	fp, [sp, #24]
   16348:	add	sp, sp, #28
   1634c:	pop	{pc}		; (ldr pc, [sp], #4)
   16350:	andeq	r8, r1, ip, lsl lr
   16354:	andeq	r8, r1, r8, lsl #28
   16358:	andeq	r8, r1, ip, ror #27
   1635c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16360:			; <UNDEFINED> instruction: 0x00018dbc
   16364:	andeq	r8, r1, r8, lsr #27

00016368 <free_node_function@@Base>:
   16368:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1636c:	strd	r6, [sp, #8]
   16370:	strd	r8, [sp, #16]
   16374:	str	fp, [sp, #24]
   16378:	str	lr, [sp, #28]
   1637c:	add	fp, sp, #28
   16380:	sub	sp, sp, #8
   16384:	str	r0, [fp, #-32]	; 0xffffffe0
   16388:	ldr	r3, [pc, #176]	; 16440 <free_node_function@@Base+0xd8>
   1638c:	add	r3, pc, r3
   16390:	ldrd	r2, [r3]
   16394:	adds	r8, r2, #1
   16398:	adc	r9, r3, #0
   1639c:	ldr	r3, [pc, #160]	; 16444 <free_node_function@@Base+0xdc>
   163a0:	add	r3, pc, r3
   163a4:	strd	r8, [r3]
   163a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   163ac:	ldr	r3, [r3, #4]
   163b0:	cmp	r3, #0
   163b4:	beq	16408 <free_node_function@@Base+0xa0>
   163b8:	ldr	r3, [pc, #136]	; 16448 <free_node_function@@Base+0xe0>
   163bc:	add	r3, pc, r3
   163c0:	ldrd	r2, [r3, #8]
   163c4:	adds	r6, r2, #1
   163c8:	adc	r7, r3, #0
   163cc:	ldr	r3, [pc, #120]	; 1644c <free_node_function@@Base+0xe4>
   163d0:	add	r3, pc, r3
   163d4:	strd	r6, [r3, #8]
   163d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   163dc:	ldr	r3, [r3, #4]
   163e0:	mov	r0, r3
   163e4:	bl	15dec <free_node@@Base>
   163e8:	ldr	r3, [pc, #96]	; 16450 <free_node_function@@Base+0xe8>
   163ec:	add	r3, pc, r3
   163f0:	ldrd	r2, [r3, #16]
   163f4:	adds	r4, r2, #1
   163f8:	adc	r5, r3, #0
   163fc:	ldr	r3, [pc, #80]	; 16454 <free_node_function@@Base+0xec>
   16400:	add	r3, pc, r3
   16404:	strd	r4, [r3, #16]
   16408:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1640c:	ldr	r3, [r3, #8]
   16410:	mov	r0, r3
   16414:	bl	118b8 <free@plt>
   16418:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1641c:	bl	118b8 <free@plt>
   16420:	nop	{0}
   16424:	sub	sp, fp, #28
   16428:	ldrd	r4, [sp]
   1642c:	ldrd	r6, [sp, #8]
   16430:	ldrd	r8, [sp, #16]
   16434:	ldr	fp, [sp, #24]
   16438:	add	sp, sp, #28
   1643c:	pop	{pc}		; (ldr pc, [sp], #4)
   16440:	andeq	r8, r1, r4, lsr #26
   16444:	andeq	r8, r1, r0, lsl sp
   16448:	strdeq	r8, [r1], -r4
   1644c:	andeq	r8, r1, r0, ror #25
   16450:	andeq	r8, r1, r4, asr #25
   16454:			; <UNDEFINED> instruction: 0x00018cb0

00016458 <free_node_return@@Base>:
   16458:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1645c:	strd	r6, [sp, #8]
   16460:	strd	r8, [sp, #16]
   16464:	str	fp, [sp, #24]
   16468:	str	lr, [sp, #28]
   1646c:	add	fp, sp, #28
   16470:	sub	sp, sp, #8
   16474:	str	r0, [fp, #-32]	; 0xffffffe0
   16478:	ldr	r3, [pc, #160]	; 16520 <free_node_return@@Base+0xc8>
   1647c:	add	r3, pc, r3
   16480:	ldrd	r2, [r3]
   16484:	adds	r8, r2, #1
   16488:	adc	r9, r3, #0
   1648c:	ldr	r3, [pc, #144]	; 16524 <free_node_return@@Base+0xcc>
   16490:	add	r3, pc, r3
   16494:	strd	r8, [r3]
   16498:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1649c:	ldr	r3, [r3, #4]
   164a0:	cmp	r3, #0
   164a4:	beq	164f8 <free_node_return@@Base+0xa0>
   164a8:	ldr	r3, [pc, #120]	; 16528 <free_node_return@@Base+0xd0>
   164ac:	add	r3, pc, r3
   164b0:	ldrd	r2, [r3, #8]
   164b4:	adds	r6, r2, #1
   164b8:	adc	r7, r3, #0
   164bc:	ldr	r3, [pc, #104]	; 1652c <free_node_return@@Base+0xd4>
   164c0:	add	r3, pc, r3
   164c4:	strd	r6, [r3, #8]
   164c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   164cc:	ldr	r3, [r3, #4]
   164d0:	mov	r0, r3
   164d4:	bl	15dec <free_node@@Base>
   164d8:	ldr	r3, [pc, #80]	; 16530 <free_node_return@@Base+0xd8>
   164dc:	add	r3, pc, r3
   164e0:	ldrd	r2, [r3, #16]
   164e4:	adds	r4, r2, #1
   164e8:	adc	r5, r3, #0
   164ec:	ldr	r3, [pc, #64]	; 16534 <free_node_return@@Base+0xdc>
   164f0:	add	r3, pc, r3
   164f4:	strd	r4, [r3, #16]
   164f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   164fc:	bl	118b8 <free@plt>
   16500:	nop	{0}
   16504:	sub	sp, fp, #28
   16508:	ldrd	r4, [sp]
   1650c:	ldrd	r6, [sp, #8]
   16510:	ldrd	r8, [sp, #16]
   16514:	ldr	fp, [sp, #24]
   16518:	add	sp, sp, #28
   1651c:	pop	{pc}		; (ldr pc, [sp], #4)
   16520:	andeq	r8, r1, ip, lsl ip
   16524:	andeq	r8, r1, r8, lsl #24
   16528:	andeq	r8, r1, ip, ror #23
   1652c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16530:			; <UNDEFINED> instruction: 0x00018bbc
   16534:	andeq	r8, r1, r8, lsr #23

00016538 <free_node_if@@Base>:
   16538:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1653c:	strd	r6, [sp, #8]
   16540:	strd	r8, [sp, #16]
   16544:	str	fp, [sp, #24]
   16548:	str	lr, [sp, #28]
   1654c:	add	fp, sp, #28
   16550:	sub	sp, sp, #32
   16554:	str	r0, [fp, #-32]	; 0xffffffe0
   16558:	ldr	r3, [pc, #340]	; 166b4 <free_node_if@@Base+0x17c>
   1655c:	add	r3, pc, r3
   16560:	ldrd	r2, [r3]
   16564:	adds	r1, r2, #1
   16568:	str	r1, [fp, #-44]	; 0xffffffd4
   1656c:	adc	r3, r3, #0
   16570:	str	r3, [fp, #-40]	; 0xffffffd8
   16574:	ldr	r3, [pc, #316]	; 166b8 <free_node_if@@Base+0x180>
   16578:	add	r3, pc, r3
   1657c:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   16580:	strd	r0, [r3]
   16584:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16588:	ldr	r3, [r3, #4]
   1658c:	cmp	r3, #0
   16590:	beq	165fc <free_node_if@@Base+0xc4>
   16594:	ldr	r3, [pc, #288]	; 166bc <free_node_if@@Base+0x184>
   16598:	add	r3, pc, r3
   1659c:	ldrd	r2, [r3, #8]
   165a0:	adds	r1, r2, #1
   165a4:	str	r1, [fp, #-52]	; 0xffffffcc
   165a8:	adc	r3, r3, #0
   165ac:	str	r3, [fp, #-48]	; 0xffffffd0
   165b0:	ldr	r3, [pc, #264]	; 166c0 <free_node_if@@Base+0x188>
   165b4:	add	r3, pc, r3
   165b8:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   165bc:	strd	r0, [r3, #8]
   165c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   165c4:	ldr	r3, [r3, #4]
   165c8:	mov	r0, r3
   165cc:	bl	15dec <free_node@@Base>
   165d0:	ldr	r3, [pc, #236]	; 166c4 <free_node_if@@Base+0x18c>
   165d4:	add	r3, pc, r3
   165d8:	ldrd	r2, [r3, #16]
   165dc:	adds	r1, r2, #1
   165e0:	str	r1, [fp, #-60]	; 0xffffffc4
   165e4:	adc	r3, r3, #0
   165e8:	str	r3, [fp, #-56]	; 0xffffffc8
   165ec:	ldr	r3, [pc, #212]	; 166c8 <free_node_if@@Base+0x190>
   165f0:	add	r3, pc, r3
   165f4:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   165f8:	strd	r0, [r3, #16]
   165fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16600:	ldr	r3, [r3, #8]
   16604:	mov	r0, r3
   16608:	bl	15dec <free_node@@Base>
   1660c:	ldr	r3, [pc, #184]	; 166cc <free_node_if@@Base+0x194>
   16610:	add	r3, pc, r3
   16614:	ldrd	r2, [r3, #24]
   16618:	adds	r8, r2, #1
   1661c:	adc	r9, r3, #0
   16620:	ldr	r3, [pc, #168]	; 166d0 <free_node_if@@Base+0x198>
   16624:	add	r3, pc, r3
   16628:	strd	r8, [r3, #24]
   1662c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16630:	ldr	r3, [r3, #12]
   16634:	mov	r0, r3
   16638:	bl	15dec <free_node@@Base>
   1663c:	ldr	r3, [pc, #144]	; 166d4 <free_node_if@@Base+0x19c>
   16640:	add	r3, pc, r3
   16644:	ldrd	r2, [r3, #32]
   16648:	adds	r6, r2, #1
   1664c:	adc	r7, r3, #0
   16650:	ldr	r3, [pc, #128]	; 166d8 <free_node_if@@Base+0x1a0>
   16654:	add	r3, pc, r3
   16658:	strd	r6, [r3, #32]
   1665c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16660:	ldr	r3, [r3, #16]
   16664:	mov	r0, r3
   16668:	bl	15dec <free_node@@Base>
   1666c:	ldr	r3, [pc, #104]	; 166dc <free_node_if@@Base+0x1a4>
   16670:	add	r3, pc, r3
   16674:	ldrd	r2, [r3, #40]	; 0x28
   16678:	adds	r4, r2, #1
   1667c:	adc	r5, r3, #0
   16680:	ldr	r3, [pc, #88]	; 166e0 <free_node_if@@Base+0x1a8>
   16684:	add	r3, pc, r3
   16688:	strd	r4, [r3, #40]	; 0x28
   1668c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16690:	bl	118b8 <free@plt>
   16694:	nop	{0}
   16698:	sub	sp, fp, #28
   1669c:	ldrd	r4, [sp]
   166a0:	ldrd	r6, [sp, #8]
   166a4:	ldrd	r8, [sp, #16]
   166a8:	ldr	fp, [sp, #24]
   166ac:	add	sp, sp, #28
   166b0:	pop	{pc}		; (ldr pc, [sp], #4)
   166b4:	andeq	r8, r1, ip, lsl #22
   166b8:	strdeq	r8, [r1], -r0
   166bc:	ldrdeq	r8, [r1], -r0
   166c0:			; <UNDEFINED> instruction: 0x00018ab4
   166c4:	muleq	r1, r4, sl
   166c8:	andeq	r8, r1, r8, ror sl
   166cc:	andeq	r8, r1, r8, asr sl
   166d0:	andeq	r8, r1, r4, asr #20
   166d4:	andeq	r8, r1, r8, lsr #20
   166d8:	andeq	r8, r1, r4, lsl sl
   166dc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   166e0:	andeq	r8, r1, r4, ror #19

000166e4 <free_node_boolean_operator@@Base>:
   166e4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   166e8:	strd	r6, [sp, #8]
   166ec:	strd	r8, [sp, #16]
   166f0:	str	fp, [sp, #24]
   166f4:	str	lr, [sp, #28]
   166f8:	add	fp, sp, #28
   166fc:	sub	sp, sp, #24
   16700:	str	r0, [fp, #-32]	; 0xffffffe0
   16704:	ldr	r3, [pc, #280]	; 16824 <free_node_boolean_operator@@Base+0x140>
   16708:	add	r3, pc, r3
   1670c:	ldrd	r2, [r3]
   16710:	adds	r1, r2, #1
   16714:	str	r1, [fp, #-44]	; 0xffffffd4
   16718:	adc	r3, r3, #0
   1671c:	str	r3, [fp, #-40]	; 0xffffffd8
   16720:	ldr	r3, [pc, #256]	; 16828 <free_node_boolean_operator@@Base+0x144>
   16724:	add	r3, pc, r3
   16728:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   1672c:	strd	r0, [r3]
   16730:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16734:	ldr	r3, [r3, #4]
   16738:	cmp	r3, #0
   1673c:	beq	1679c <free_node_boolean_operator@@Base+0xb8>
   16740:	ldr	r3, [pc, #228]	; 1682c <free_node_boolean_operator@@Base+0x148>
   16744:	add	r3, pc, r3
   16748:	ldrd	r2, [r3, #8]
   1674c:	adds	r1, r2, #1
   16750:	str	r1, [fp, #-52]	; 0xffffffcc
   16754:	adc	r3, r3, #0
   16758:	str	r3, [fp, #-48]	; 0xffffffd0
   1675c:	ldr	r3, [pc, #204]	; 16830 <free_node_boolean_operator@@Base+0x14c>
   16760:	add	r3, pc, r3
   16764:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   16768:	strd	r0, [r3, #8]
   1676c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16770:	ldr	r3, [r3, #4]
   16774:	mov	r0, r3
   16778:	bl	15dec <free_node@@Base>
   1677c:	ldr	r3, [pc, #176]	; 16834 <free_node_boolean_operator@@Base+0x150>
   16780:	add	r3, pc, r3
   16784:	ldrd	r2, [r3, #16]
   16788:	adds	r8, r2, #1
   1678c:	adc	r9, r3, #0
   16790:	ldr	r3, [pc, #160]	; 16838 <free_node_boolean_operator@@Base+0x154>
   16794:	add	r3, pc, r3
   16798:	strd	r8, [r3, #16]
   1679c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   167a0:	ldr	r3, [r3, #8]
   167a4:	mov	r0, r3
   167a8:	bl	15dec <free_node@@Base>
   167ac:	ldr	r3, [pc, #136]	; 1683c <free_node_boolean_operator@@Base+0x158>
   167b0:	add	r3, pc, r3
   167b4:	ldrd	r2, [r3, #24]
   167b8:	adds	r6, r2, #1
   167bc:	adc	r7, r3, #0
   167c0:	ldr	r3, [pc, #120]	; 16840 <free_node_boolean_operator@@Base+0x15c>
   167c4:	add	r3, pc, r3
   167c8:	strd	r6, [r3, #24]
   167cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   167d0:	ldr	r3, [r3, #12]
   167d4:	mov	r0, r3
   167d8:	bl	15dec <free_node@@Base>
   167dc:	ldr	r3, [pc, #96]	; 16844 <free_node_boolean_operator@@Base+0x160>
   167e0:	add	r3, pc, r3
   167e4:	ldrd	r2, [r3, #32]
   167e8:	adds	r4, r2, #1
   167ec:	adc	r5, r3, #0
   167f0:	ldr	r3, [pc, #80]	; 16848 <free_node_boolean_operator@@Base+0x164>
   167f4:	add	r3, pc, r3
   167f8:	strd	r4, [r3, #32]
   167fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16800:	bl	118b8 <free@plt>
   16804:	nop	{0}
   16808:	sub	sp, fp, #28
   1680c:	ldrd	r4, [sp]
   16810:	ldrd	r6, [sp, #8]
   16814:	ldrd	r8, [sp, #16]
   16818:	ldr	fp, [sp, #24]
   1681c:	add	sp, sp, #28
   16820:	pop	{pc}		; (ldr pc, [sp], #4)
   16824:	andeq	r8, r1, r8, lsr r9
   16828:	andeq	r8, r1, ip, lsl r9
   1682c:	strdeq	r8, [r1], -ip
   16830:	andeq	r8, r1, r0, ror #17
   16834:	andeq	r8, r1, r0, asr #17
   16838:	andeq	r8, r1, ip, lsr #17
   1683c:	muleq	r1, r0, r8
   16840:	andeq	r8, r1, ip, ror r8
   16844:	andeq	r8, r1, r0, ror #16
   16848:	andeq	r8, r1, ip, asr #16

0001684c <get_boolean_op_value@@Base>:
   1684c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16850:	strd	r6, [sp, #8]
   16854:	strd	r8, [sp, #16]
   16858:	strd	sl, [sp, #24]
   1685c:	str	lr, [sp, #32]
   16860:	add	fp, sp, #32
   16864:	sub	sp, sp, #100	; 0x64
   16868:	str	r0, [fp, #-48]	; 0xffffffd0
   1686c:	ldr	sl, [pc, #1048]	; 16c8c <get_boolean_op_value@@Base+0x440>
   16870:	add	sl, pc, sl
   16874:	ldr	r3, [pc, #1044]	; 16c90 <get_boolean_op_value@@Base+0x444>
   16878:	add	r3, pc, r3
   1687c:	ldrd	r2, [r3]
   16880:	adds	r4, r2, #1
   16884:	adc	r5, r3, #0
   16888:	ldr	r3, [pc, #1028]	; 16c94 <get_boolean_op_value@@Base+0x448>
   1688c:	add	r3, pc, r3
   16890:	strd	r4, [r3]
   16894:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16898:	ldr	r3, [r3, #4]
   1689c:	mov	r1, #2
   168a0:	mov	r0, r3
   168a4:	bl	119c0 <strnlen@plt>
   168a8:	str	r0, [fp, #-40]	; 0xffffffd8
   168ac:	ldr	r3, [fp, #-40]	; 0xffffffd8
   168b0:	cmp	r3, #2
   168b4:	bne	16b68 <get_boolean_op_value@@Base+0x31c>
   168b8:	ldr	r3, [pc, #984]	; 16c98 <get_boolean_op_value@@Base+0x44c>
   168bc:	add	r3, pc, r3
   168c0:	ldrd	r2, [r3, #8]
   168c4:	adds	r1, r2, #1
   168c8:	str	r1, [fp, #-60]	; 0xffffffc4
   168cc:	adc	r3, r3, #0
   168d0:	str	r3, [fp, #-56]	; 0xffffffc8
   168d4:	ldr	r3, [pc, #960]	; 16c9c <get_boolean_op_value@@Base+0x450>
   168d8:	add	r3, pc, r3
   168dc:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   168e0:	strd	r0, [r3, #8]
   168e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   168e8:	ldr	r0, [r3, #4]
   168ec:	mov	r2, #2
   168f0:	ldr	r3, [pc, #936]	; 16ca0 <get_boolean_op_value@@Base+0x454>
   168f4:	add	r3, pc, r3
   168f8:	mov	r1, r3
   168fc:	bl	11a14 <strncmp@plt>
   16900:	mov	r3, r0
   16904:	cmp	r3, #0
   16908:	bne	16940 <get_boolean_op_value@@Base+0xf4>
   1690c:	ldr	r3, [pc, #912]	; 16ca4 <get_boolean_op_value@@Base+0x458>
   16910:	add	r3, pc, r3
   16914:	ldrd	r2, [r3, #16]
   16918:	adds	r1, r2, #1
   1691c:	str	r1, [fp, #-68]	; 0xffffffbc
   16920:	adc	r3, r3, #0
   16924:	str	r3, [fp, #-64]	; 0xffffffc0
   16928:	ldr	r3, [pc, #888]	; 16ca8 <get_boolean_op_value@@Base+0x45c>
   1692c:	add	r3, pc, r3
   16930:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   16934:	strd	r0, [r3, #16]
   16938:	mov	r3, #0
   1693c:	b	16c6c <get_boolean_op_value@@Base+0x420>
   16940:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16944:	ldr	r0, [r3, #4]
   16948:	mov	r2, #2
   1694c:	ldr	r3, [pc, #856]	; 16cac <get_boolean_op_value@@Base+0x460>
   16950:	add	r3, pc, r3
   16954:	mov	r1, r3
   16958:	bl	11a14 <strncmp@plt>
   1695c:	mov	r3, r0
   16960:	cmp	r3, #0
   16964:	bne	1699c <get_boolean_op_value@@Base+0x150>
   16968:	ldr	r3, [pc, #832]	; 16cb0 <get_boolean_op_value@@Base+0x464>
   1696c:	add	r3, pc, r3
   16970:	ldrd	r2, [r3, #24]
   16974:	adds	r1, r2, #1
   16978:	str	r1, [fp, #-76]	; 0xffffffb4
   1697c:	adc	r3, r3, #0
   16980:	str	r3, [fp, #-72]	; 0xffffffb8
   16984:	ldr	r3, [pc, #808]	; 16cb4 <get_boolean_op_value@@Base+0x468>
   16988:	add	r3, pc, r3
   1698c:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   16990:	strd	r0, [r3, #24]
   16994:	mov	r3, #1
   16998:	b	16c6c <get_boolean_op_value@@Base+0x420>
   1699c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   169a0:	ldr	r0, [r3, #4]
   169a4:	mov	r2, #2
   169a8:	ldr	r3, [pc, #776]	; 16cb8 <get_boolean_op_value@@Base+0x46c>
   169ac:	add	r3, pc, r3
   169b0:	mov	r1, r3
   169b4:	bl	11a14 <strncmp@plt>
   169b8:	mov	r3, r0
   169bc:	cmp	r3, #0
   169c0:	bne	169f8 <get_boolean_op_value@@Base+0x1ac>
   169c4:	ldr	r3, [pc, #752]	; 16cbc <get_boolean_op_value@@Base+0x470>
   169c8:	add	r3, pc, r3
   169cc:	ldrd	r2, [r3, #32]
   169d0:	adds	r1, r2, #1
   169d4:	str	r1, [fp, #-84]	; 0xffffffac
   169d8:	adc	r3, r3, #0
   169dc:	str	r3, [fp, #-80]	; 0xffffffb0
   169e0:	ldr	r3, [pc, #728]	; 16cc0 <get_boolean_op_value@@Base+0x474>
   169e4:	add	r3, pc, r3
   169e8:	ldrd	r0, [fp, #-84]	; 0xffffffac
   169ec:	strd	r0, [r3, #32]
   169f0:	mov	r3, #2
   169f4:	b	16c6c <get_boolean_op_value@@Base+0x420>
   169f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   169fc:	ldr	r3, [r3, #4]
   16a00:	mov	r2, #2
   16a04:	ldr	r1, [pc, #696]	; 16cc4 <get_boolean_op_value@@Base+0x478>
   16a08:	add	r1, pc, r1
   16a0c:	mov	r0, r3
   16a10:	bl	11a14 <strncmp@plt>
   16a14:	mov	r3, r0
   16a18:	cmp	r3, #0
   16a1c:	bne	16a54 <get_boolean_op_value@@Base+0x208>
   16a20:	ldr	r3, [pc, #672]	; 16cc8 <get_boolean_op_value@@Base+0x47c>
   16a24:	add	r3, pc, r3
   16a28:	ldrd	r2, [r3, #40]	; 0x28
   16a2c:	adds	r1, r2, #1
   16a30:	str	r1, [fp, #-92]	; 0xffffffa4
   16a34:	adc	r3, r3, #0
   16a38:	str	r3, [fp, #-88]	; 0xffffffa8
   16a3c:	ldr	r3, [pc, #648]	; 16ccc <get_boolean_op_value@@Base+0x480>
   16a40:	add	r3, pc, r3
   16a44:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   16a48:	strd	r0, [r3, #40]	; 0x28
   16a4c:	mov	r3, #3
   16a50:	b	16c6c <get_boolean_op_value@@Base+0x420>
   16a54:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16a58:	ldr	r3, [r3, #4]
   16a5c:	mov	r2, #2
   16a60:	ldr	r1, [pc, #616]	; 16cd0 <get_boolean_op_value@@Base+0x484>
   16a64:	add	r1, pc, r1
   16a68:	mov	r0, r3
   16a6c:	bl	11a14 <strncmp@plt>
   16a70:	mov	r3, r0
   16a74:	cmp	r3, #0
   16a78:	bne	16ab0 <get_boolean_op_value@@Base+0x264>
   16a7c:	ldr	r3, [pc, #592]	; 16cd4 <get_boolean_op_value@@Base+0x488>
   16a80:	add	r3, pc, r3
   16a84:	ldrd	r2, [r3, #48]	; 0x30
   16a88:	adds	r1, r2, #1
   16a8c:	str	r1, [fp, #-100]	; 0xffffff9c
   16a90:	adc	r3, r3, #0
   16a94:	str	r3, [fp, #-96]	; 0xffffffa0
   16a98:	ldr	r3, [pc, #568]	; 16cd8 <get_boolean_op_value@@Base+0x48c>
   16a9c:	add	r3, pc, r3
   16aa0:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   16aa4:	strd	r0, [r3, #48]	; 0x30
   16aa8:	mov	r3, #4
   16aac:	b	16c6c <get_boolean_op_value@@Base+0x420>
   16ab0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16ab4:	ldr	r3, [r3, #4]
   16ab8:	mov	r2, #2
   16abc:	ldr	r1, [pc, #536]	; 16cdc <get_boolean_op_value@@Base+0x490>
   16ac0:	add	r1, pc, r1
   16ac4:	mov	r0, r3
   16ac8:	bl	11a14 <strncmp@plt>
   16acc:	mov	r3, r0
   16ad0:	cmp	r3, #0
   16ad4:	bne	16b0c <get_boolean_op_value@@Base+0x2c0>
   16ad8:	ldr	r3, [pc, #512]	; 16ce0 <get_boolean_op_value@@Base+0x494>
   16adc:	add	r3, pc, r3
   16ae0:	ldrd	r2, [r3, #56]	; 0x38
   16ae4:	adds	r1, r2, #1
   16ae8:	str	r1, [fp, #-108]	; 0xffffff94
   16aec:	adc	r3, r3, #0
   16af0:	str	r3, [fp, #-104]	; 0xffffff98
   16af4:	ldr	r3, [pc, #488]	; 16ce4 <get_boolean_op_value@@Base+0x498>
   16af8:	add	r3, pc, r3
   16afc:	ldrd	r0, [fp, #-108]	; 0xffffff94
   16b00:	strd	r0, [r3, #56]	; 0x38
   16b04:	mov	r3, #5
   16b08:	b	16c6c <get_boolean_op_value@@Base+0x420>
   16b0c:	ldr	r3, [pc, #468]	; 16ce8 <get_boolean_op_value@@Base+0x49c>
   16b10:	ldr	r3, [sl, r3]
   16b14:	ldr	r0, [r3]
   16b18:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16b1c:	ldr	r3, [r3, #4]
   16b20:	mov	r2, r3
   16b24:	ldr	r3, [pc, #448]	; 16cec <get_boolean_op_value@@Base+0x4a0>
   16b28:	add	r3, pc, r3
   16b2c:	mov	r1, r3
   16b30:	bl	1196c <fprintf@plt>
   16b34:	ldr	r3, [pc, #436]	; 16cf0 <get_boolean_op_value@@Base+0x4a4>
   16b38:	add	r3, pc, r3
   16b3c:	ldrd	r2, [r3, #64]	; 0x40
   16b40:	adds	r1, r2, #1
   16b44:	str	r1, [fp, #-116]	; 0xffffff8c
   16b48:	adc	r3, r3, #0
   16b4c:	str	r3, [fp, #-112]	; 0xffffff90
   16b50:	ldr	r3, [pc, #412]	; 16cf4 <get_boolean_op_value@@Base+0x4a8>
   16b54:	add	r3, pc, r3
   16b58:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   16b5c:	strd	r0, [r3, #64]	; 0x40
   16b60:	mov	r0, #1
   16b64:	bl	11948 <exit@plt>
   16b68:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16b6c:	ldr	r3, [r3, #4]
   16b70:	ldrb	r3, [r3]
   16b74:	cmp	r3, #60	; 0x3c
   16b78:	beq	16bc0 <get_boolean_op_value@@Base+0x374>
   16b7c:	cmp	r3, #62	; 0x3e
   16b80:	beq	16bf4 <get_boolean_op_value@@Base+0x3a8>
   16b84:	cmp	r3, #33	; 0x21
   16b88:	bne	16c1c <get_boolean_op_value@@Base+0x3d0>
   16b8c:	ldr	r3, [pc, #356]	; 16cf8 <get_boolean_op_value@@Base+0x4ac>
   16b90:	add	r3, pc, r3
   16b94:	ldrd	r2, [r3, #72]	; 0x48
   16b98:	adds	r1, r2, #1
   16b9c:	str	r1, [fp, #-124]	; 0xffffff84
   16ba0:	adc	r3, r3, #0
   16ba4:	str	r3, [fp, #-120]	; 0xffffff88
   16ba8:	ldr	r3, [pc, #332]	; 16cfc <get_boolean_op_value@@Base+0x4b0>
   16bac:	add	r3, pc, r3
   16bb0:	ldrd	r0, [fp, #-124]	; 0xffffff84
   16bb4:	strd	r0, [r3, #72]	; 0x48
   16bb8:	mov	r3, #8
   16bbc:	b	16c6c <get_boolean_op_value@@Base+0x420>
   16bc0:	ldr	r3, [pc, #312]	; 16d00 <get_boolean_op_value@@Base+0x4b4>
   16bc4:	add	r3, pc, r3
   16bc8:	ldrd	r2, [r3, #80]	; 0x50
   16bcc:	adds	r1, r2, #1
   16bd0:	str	r1, [fp, #-132]	; 0xffffff7c
   16bd4:	adc	r3, r3, #0
   16bd8:	str	r3, [fp, #-128]	; 0xffffff80
   16bdc:	ldr	r3, [pc, #288]	; 16d04 <get_boolean_op_value@@Base+0x4b8>
   16be0:	add	r3, pc, r3
   16be4:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   16be8:	strd	r0, [r3, #80]	; 0x50
   16bec:	mov	r3, #6
   16bf0:	b	16c6c <get_boolean_op_value@@Base+0x420>
   16bf4:	ldr	r3, [pc, #268]	; 16d08 <get_boolean_op_value@@Base+0x4bc>
   16bf8:	add	r3, pc, r3
   16bfc:	ldrd	r2, [r3, #88]	; 0x58
   16c00:	adds	r8, r2, #1
   16c04:	adc	r9, r3, #0
   16c08:	ldr	r3, [pc, #252]	; 16d0c <get_boolean_op_value@@Base+0x4c0>
   16c0c:	add	r3, pc, r3
   16c10:	strd	r8, [r3, #88]	; 0x58
   16c14:	mov	r3, #7
   16c18:	b	16c6c <get_boolean_op_value@@Base+0x420>
   16c1c:	ldr	r3, [pc, #196]	; 16ce8 <get_boolean_op_value@@Base+0x49c>
   16c20:	ldr	r3, [sl, r3]
   16c24:	ldr	r0, [r3]
   16c28:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16c2c:	ldr	r3, [r3, #4]
   16c30:	mov	r2, r3
   16c34:	ldr	r3, [pc, #212]	; 16d10 <get_boolean_op_value@@Base+0x4c4>
   16c38:	add	r3, pc, r3
   16c3c:	mov	r1, r3
   16c40:	bl	1196c <fprintf@plt>
   16c44:	ldr	r3, [pc, #200]	; 16d14 <get_boolean_op_value@@Base+0x4c8>
   16c48:	add	r3, pc, r3
   16c4c:	ldrd	r2, [r3, #96]	; 0x60
   16c50:	adds	r6, r2, #1
   16c54:	adc	r7, r3, #0
   16c58:	ldr	r3, [pc, #184]	; 16d18 <get_boolean_op_value@@Base+0x4cc>
   16c5c:	add	r3, pc, r3
   16c60:	strd	r6, [r3, #96]	; 0x60
   16c64:	mov	r0, #1
   16c68:	bl	11948 <exit@plt>
   16c6c:	mov	r0, r3
   16c70:	sub	sp, fp, #32
   16c74:	ldrd	r4, [sp]
   16c78:	ldrd	r6, [sp, #8]
   16c7c:	ldrd	r8, [sp, #16]
   16c80:	ldrd	sl, [sp, #24]
   16c84:	add	sp, sp, #32
   16c88:	pop	{pc}		; (ldr pc, [sp], #4)
   16c8c:	andeq	r7, r1, r8, lsl #15
   16c90:	andeq	r8, r1, r0, ror #14
   16c94:	andeq	r8, r1, ip, asr #14
   16c98:	andeq	r8, r1, ip, lsl r7
   16c9c:	andeq	r8, r1, r0, lsl #14
   16ca0:	andeq	r6, r0, r0, ror #4
   16ca4:	andeq	r8, r1, r8, asr #13
   16ca8:	andeq	r8, r1, ip, lsr #13
   16cac:	andeq	r6, r0, r8, lsl #4
   16cb0:	andeq	r8, r1, ip, ror #12
   16cb4:	andeq	r8, r1, r0, asr r6
   16cb8:			; <UNDEFINED> instruction: 0x000061b0
   16cbc:	andeq	r8, r1, r0, lsl r6
   16cc0:	strdeq	r8, [r1], -r4
   16cc4:	andeq	r6, r0, r8, asr r1
   16cc8:			; <UNDEFINED> instruction: 0x000185b4
   16ccc:	muleq	r1, r8, r5
   16cd0:	andeq	r6, r0, r0, lsl #2
   16cd4:	andeq	r8, r1, r8, asr r5
   16cd8:	andeq	r8, r1, ip, lsr r5
   16cdc:	andeq	r6, r0, r8, lsr #1
   16ce0:	strdeq	r8, [r1], -ip
   16ce4:	andeq	r8, r1, r0, ror #9
   16ce8:	andeq	r0, r0, r0, lsr #1
   16cec:	andeq	r6, r0, r4, asr #32
   16cf0:	andeq	r8, r1, r0, lsr #9
   16cf4:	andeq	r8, r1, r4, lsl #9
   16cf8:	andeq	r8, r1, r8, asr #8
   16cfc:	andeq	r8, r1, ip, lsr #8
   16d00:	andeq	r8, r1, r4, lsl r4
   16d04:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16d08:	andeq	r8, r1, r0, ror #7
   16d0c:	andeq	r8, r1, ip, asr #7
   16d10:	andeq	r5, r0, r4, lsr pc
   16d14:	muleq	r1, r0, r3
   16d18:	andeq	r8, r1, ip, ror r3
   16d1c:	str	fp, [sp, #-8]!
   16d20:	str	lr, [sp, #4]
   16d24:	add	fp, sp, #4
   16d28:	ldr	r3, [pc, #24]	; 16d48 <get_boolean_op_value@@Base+0x4fc>
   16d2c:	add	r3, pc, r3
   16d30:	mov	r0, r3
   16d34:	bl	1c574 <__gcov_sort_n_vals@@Base+0x4a0>
   16d38:	sub	sp, fp, #4
   16d3c:	ldr	fp, [sp]
   16d40:	add	sp, sp, #4
   16d44:	pop	{pc}		; (ldr pc, [sp], #4)
   16d48:	andeq	r7, r1, ip, lsl #20
   16d4c:	str	fp, [sp, #-8]!
   16d50:	str	lr, [sp, #4]
   16d54:	add	fp, sp, #4
   16d58:	bl	1c504 <__gcov_sort_n_vals@@Base+0x430>
   16d5c:	sub	sp, fp, #4
   16d60:	ldr	fp, [sp]
   16d64:	add	sp, sp, #4
   16d68:	pop	{pc}		; (ldr pc, [sp], #4)

00016d6c <init_grammar@@Base>:
   16d6c:	strd	r4, [sp, #-12]!
   16d70:	str	fp, [sp, #8]
   16d74:	add	fp, sp, #8
   16d78:	sub	sp, sp, #12
   16d7c:	str	r0, [fp, #-16]
   16d80:	str	r1, [fp, #-20]	; 0xffffffec
   16d84:	ldr	r3, [pc, #60]	; 16dc8 <init_grammar@@Base+0x5c>
   16d88:	add	r3, pc, r3
   16d8c:	ldrd	r2, [r3]
   16d90:	adds	r4, r2, #1
   16d94:	adc	r5, r3, #0
   16d98:	ldr	r3, [pc, #44]	; 16dcc <init_grammar@@Base+0x60>
   16d9c:	add	r3, pc, r3
   16da0:	strd	r4, [r3]
   16da4:	ldr	r3, [fp, #-16]
   16da8:	ldr	r2, [fp, #-20]	; 0xffffffec
   16dac:	str	r2, [r3]
   16db0:	nop	{0}
   16db4:	sub	sp, fp, #8
   16db8:	ldrd	r4, [sp]
   16dbc:	ldr	fp, [sp, #8]
   16dc0:	add	sp, sp, #12
   16dc4:	bx	lr
   16dc8:	andeq	r8, r1, r8, lsr #15
   16dcc:	muleq	r1, r4, r7

00016dd0 <destroy_grammar@@Base>:
   16dd0:	strd	r4, [sp, #-12]!
   16dd4:	str	fp, [sp, #8]
   16dd8:	add	fp, sp, #8
   16ddc:	sub	sp, sp, #12
   16de0:	str	r0, [fp, #-16]
   16de4:	ldr	r3, [pc, #48]	; 16e1c <destroy_grammar@@Base+0x4c>
   16de8:	add	r3, pc, r3
   16dec:	ldrd	r2, [r3]
   16df0:	adds	r4, r2, #1
   16df4:	adc	r5, r3, #0
   16df8:	ldr	r3, [pc, #32]	; 16e20 <destroy_grammar@@Base+0x50>
   16dfc:	add	r3, pc, r3
   16e00:	strd	r4, [r3]
   16e04:	nop	{0}
   16e08:	sub	sp, fp, #8
   16e0c:	ldrd	r4, [sp]
   16e10:	ldr	fp, [sp, #8]
   16e14:	add	sp, sp, #12
   16e18:	bx	lr
   16e1c:	andeq	r8, r1, r0, asr #14
   16e20:	andeq	r8, r1, ip, lsr #14

00016e24 <build_ast@@Base>:
   16e24:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16e28:	strd	r6, [sp, #8]
   16e2c:	str	fp, [sp, #16]
   16e30:	str	lr, [sp, #20]
   16e34:	add	fp, sp, #20
   16e38:	sub	sp, sp, #8
   16e3c:	str	r0, [fp, #-24]	; 0xffffffe8
   16e40:	ldr	r3, [pc, #100]	; 16eac <build_ast@@Base+0x88>
   16e44:	add	r3, pc, r3
   16e48:	ldrd	r2, [r3]
   16e4c:	adds	r6, r2, #1
   16e50:	adc	r7, r3, #0
   16e54:	ldr	r3, [pc, #84]	; 16eb0 <build_ast@@Base+0x8c>
   16e58:	add	r3, pc, r3
   16e5c:	strd	r6, [r3]
   16e60:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16e64:	bl	16ebc <read_function_ast_node@@Base>
   16e68:	mov	r1, r0
   16e6c:	ldr	r3, [pc, #64]	; 16eb4 <build_ast@@Base+0x90>
   16e70:	add	r3, pc, r3
   16e74:	ldrd	r2, [r3, #8]
   16e78:	adds	r4, r2, #1
   16e7c:	adc	r5, r3, #0
   16e80:	ldr	r3, [pc, #48]	; 16eb8 <build_ast@@Base+0x94>
   16e84:	add	r3, pc, r3
   16e88:	strd	r4, [r3, #8]
   16e8c:	mov	r3, r1
   16e90:	mov	r0, r3
   16e94:	sub	sp, fp, #20
   16e98:	ldrd	r4, [sp]
   16e9c:	ldrd	r6, [sp, #8]
   16ea0:	ldr	fp, [sp, #16]
   16ea4:	add	sp, sp, #20
   16ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   16eac:	ldrdeq	r8, [r1], -r4
   16eb0:	andeq	r8, r1, r0, asr #13
   16eb4:	andeq	r8, r1, r8, lsr #13
   16eb8:	muleq	r1, r4, r6

00016ebc <read_function_ast_node@@Base>:
   16ebc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16ec0:	strd	r6, [sp, #8]
   16ec4:	strd	r8, [sp, #16]
   16ec8:	str	fp, [sp, #24]
   16ecc:	str	lr, [sp, #28]
   16ed0:	add	fp, sp, #28
   16ed4:	sub	sp, sp, #120	; 0x78
   16ed8:	str	r0, [fp, #-48]	; 0xffffffd0
   16edc:	ldr	r3, [pc, #956]	; 172a0 <read_function_ast_node@@Base+0x3e4>
   16ee0:	add	r3, pc, r3
   16ee4:	ldrd	r2, [r3]
   16ee8:	adds	r4, r2, #1
   16eec:	adc	r5, r3, #0
   16ef0:	ldr	r3, [pc, #940]	; 172a4 <read_function_ast_node@@Base+0x3e8>
   16ef4:	add	r3, pc, r3
   16ef8:	strd	r4, [r3]
   16efc:	mov	r3, #0
   16f00:	str	r3, [fp, #-32]	; 0xffffffe0
   16f04:	mov	r3, #0
   16f08:	str	r3, [fp, #-36]	; 0xffffffdc
   16f0c:	mov	r3, #0
   16f10:	str	r3, [fp, #-40]	; 0xffffffd8
   16f14:	mov	r3, #0
   16f18:	str	r3, [fp, #-44]	; 0xffffffd4
   16f1c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16f20:	ldr	r3, [r3]
   16f24:	mov	r0, r3
   16f28:	bl	13488 <next@@Base>
   16f2c:	str	r0, [fp, #-40]	; 0xffffffd8
   16f30:	ldr	r3, [pc, #880]	; 172a8 <read_function_ast_node@@Base+0x3ec>
   16f34:	add	r3, pc, r3
   16f38:	ldrd	r2, [r3, #8]
   16f3c:	adds	r6, r2, #1
   16f40:	adc	r7, r3, #0
   16f44:	ldr	r3, [pc, #864]	; 172ac <read_function_ast_node@@Base+0x3f0>
   16f48:	add	r3, pc, r3
   16f4c:	strd	r6, [r3, #8]
   16f50:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16f54:	ldr	r3, [r3]
   16f58:	cmp	r3, #0
   16f5c:	beq	16f88 <read_function_ast_node@@Base+0xcc>
   16f60:	mov	r1, #0
   16f64:	ldr	r3, [pc, #836]	; 172b0 <read_function_ast_node@@Base+0x3f4>
   16f68:	add	r3, pc, r3
   16f6c:	ldrd	r2, [r3, #16]
   16f70:	adds	r8, r2, #1
   16f74:	adc	r9, r3, #0
   16f78:	ldr	r3, [pc, #820]	; 172b4 <read_function_ast_node@@Base+0x3f8>
   16f7c:	add	r3, pc, r3
   16f80:	strd	r8, [r3, #16]
   16f84:	b	1727c <read_function_ast_node@@Base+0x3c0>
   16f88:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16f8c:	bl	12a74 <free_token_int_type@@Base>
   16f90:	ldr	r3, [pc, #800]	; 172b8 <read_function_ast_node@@Base+0x3fc>
   16f94:	add	r3, pc, r3
   16f98:	ldrd	r2, [r3, #24]
   16f9c:	adds	r1, r2, #1
   16fa0:	str	r1, [fp, #-60]	; 0xffffffc4
   16fa4:	adc	r3, r3, #0
   16fa8:	str	r3, [fp, #-56]	; 0xffffffc8
   16fac:	ldr	r3, [pc, #776]	; 172bc <read_function_ast_node@@Base+0x400>
   16fb0:	add	r3, pc, r3
   16fb4:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   16fb8:	strd	r0, [r3, #24]
   16fbc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16fc0:	ldr	r3, [r3]
   16fc4:	mov	r0, r3
   16fc8:	bl	13488 <next@@Base>
   16fcc:	str	r0, [fp, #-40]	; 0xffffffd8
   16fd0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16fd4:	ldr	r3, [r3]
   16fd8:	cmp	r3, #2
   16fdc:	beq	17014 <read_function_ast_node@@Base+0x158>
   16fe0:	mov	r1, #0
   16fe4:	ldr	r3, [pc, #724]	; 172c0 <read_function_ast_node@@Base+0x404>
   16fe8:	add	r3, pc, r3
   16fec:	ldrd	r2, [r3, #40]	; 0x28
   16ff0:	adds	r0, r2, #1
   16ff4:	str	r0, [fp, #-76]	; 0xffffffb4
   16ff8:	adc	r3, r3, #0
   16ffc:	str	r3, [fp, #-72]	; 0xffffffb8
   17000:	ldr	r3, [pc, #700]	; 172c4 <read_function_ast_node@@Base+0x408>
   17004:	add	r3, pc, r3
   17008:	ldrd	r4, [fp, #-76]	; 0xffffffb4
   1700c:	strd	r4, [r3, #40]	; 0x28
   17010:	b	1727c <read_function_ast_node@@Base+0x3c0>
   17014:	ldr	r3, [pc, #684]	; 172c8 <read_function_ast_node@@Base+0x40c>
   17018:	add	r3, pc, r3
   1701c:	ldrd	r2, [r3, #32]
   17020:	adds	r1, r2, #1
   17024:	str	r1, [fp, #-68]	; 0xffffffbc
   17028:	adc	r3, r3, #0
   1702c:	str	r3, [fp, #-64]	; 0xffffffc0
   17030:	ldr	r3, [pc, #660]	; 172cc <read_function_ast_node@@Base+0x410>
   17034:	add	r3, pc, r3
   17038:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   1703c:	strd	r0, [r3, #32]
   17040:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17044:	str	r3, [fp, #-44]	; 0xffffffd4
   17048:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1704c:	ldr	r3, [r3]
   17050:	mov	r0, r3
   17054:	bl	13488 <next@@Base>
   17058:	str	r0, [fp, #-40]	; 0xffffffd8
   1705c:	ldr	r3, [pc, #620]	; 172d0 <read_function_ast_node@@Base+0x414>
   17060:	add	r3, pc, r3
   17064:	ldrd	r2, [r3, #48]	; 0x30
   17068:	adds	r1, r2, #1
   1706c:	str	r1, [fp, #-84]	; 0xffffffac
   17070:	adc	r3, r3, #0
   17074:	str	r3, [fp, #-80]	; 0xffffffb0
   17078:	ldr	r3, [pc, #596]	; 172d4 <read_function_ast_node@@Base+0x418>
   1707c:	add	r3, pc, r3
   17080:	ldrd	r0, [fp, #-84]	; 0xffffffac
   17084:	strd	r0, [r3, #48]	; 0x30
   17088:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1708c:	ldr	r3, [r3]
   17090:	cmp	r3, #3
   17094:	beq	170cc <read_function_ast_node@@Base+0x210>
   17098:	mov	r1, #0
   1709c:	ldr	r3, [pc, #564]	; 172d8 <read_function_ast_node@@Base+0x41c>
   170a0:	add	r3, pc, r3
   170a4:	ldrd	r2, [r3, #56]	; 0x38
   170a8:	adds	r0, r2, #1
   170ac:	str	r0, [fp, #-92]	; 0xffffffa4
   170b0:	adc	r3, r3, #0
   170b4:	str	r3, [fp, #-88]	; 0xffffffa8
   170b8:	ldr	r3, [pc, #540]	; 172dc <read_function_ast_node@@Base+0x420>
   170bc:	add	r3, pc, r3
   170c0:	ldrd	r4, [fp, #-92]	; 0xffffffa4
   170c4:	strd	r4, [r3, #56]	; 0x38
   170c8:	b	1727c <read_function_ast_node@@Base+0x3c0>
   170cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   170d0:	bl	12b94 <free_token_opar@@Base>
   170d4:	ldr	r3, [pc, #516]	; 172e0 <read_function_ast_node@@Base+0x424>
   170d8:	add	r3, pc, r3
   170dc:	ldrd	r2, [r3, #64]	; 0x40
   170e0:	adds	r1, r2, #1
   170e4:	str	r1, [fp, #-100]	; 0xffffff9c
   170e8:	adc	r3, r3, #0
   170ec:	str	r3, [fp, #-96]	; 0xffffffa0
   170f0:	ldr	r3, [pc, #492]	; 172e4 <read_function_ast_node@@Base+0x428>
   170f4:	add	r3, pc, r3
   170f8:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   170fc:	strd	r0, [r3, #64]	; 0x40
   17100:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17104:	ldr	r3, [r3]
   17108:	mov	r0, r3
   1710c:	bl	13488 <next@@Base>
   17110:	str	r0, [fp, #-40]	; 0xffffffd8
   17114:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17118:	ldr	r3, [r3]
   1711c:	cmp	r3, #4
   17120:	beq	17158 <read_function_ast_node@@Base+0x29c>
   17124:	mov	r1, #0
   17128:	ldr	r3, [pc, #440]	; 172e8 <read_function_ast_node@@Base+0x42c>
   1712c:	add	r3, pc, r3
   17130:	ldrd	r2, [r3, #80]	; 0x50
   17134:	adds	r0, r2, #1
   17138:	str	r0, [fp, #-116]	; 0xffffff8c
   1713c:	adc	r3, r3, #0
   17140:	str	r3, [fp, #-112]	; 0xffffff90
   17144:	ldr	r3, [pc, #416]	; 172ec <read_function_ast_node@@Base+0x430>
   17148:	add	r3, pc, r3
   1714c:	ldrd	r4, [fp, #-116]	; 0xffffff8c
   17150:	strd	r4, [r3, #80]	; 0x50
   17154:	b	1727c <read_function_ast_node@@Base+0x3c0>
   17158:	ldr	r3, [pc, #400]	; 172f0 <read_function_ast_node@@Base+0x434>
   1715c:	add	r3, pc, r3
   17160:	ldrd	r2, [r3, #72]	; 0x48
   17164:	adds	r1, r2, #1
   17168:	str	r1, [fp, #-108]	; 0xffffff94
   1716c:	adc	r3, r3, #0
   17170:	str	r3, [fp, #-104]	; 0xffffff98
   17174:	ldr	r3, [pc, #376]	; 172f4 <read_function_ast_node@@Base+0x438>
   17178:	add	r3, pc, r3
   1717c:	ldrd	r0, [fp, #-108]	; 0xffffff94
   17180:	strd	r0, [r3, #72]	; 0x48
   17184:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17188:	bl	12bf4 <free_token_cpar@@Base>
   1718c:	ldr	r3, [pc, #356]	; 172f8 <read_function_ast_node@@Base+0x43c>
   17190:	add	r3, pc, r3
   17194:	ldrd	r2, [r3, #88]	; 0x58
   17198:	adds	r1, r2, #1
   1719c:	str	r1, [fp, #-124]	; 0xffffff84
   171a0:	adc	r3, r3, #0
   171a4:	str	r3, [fp, #-120]	; 0xffffff88
   171a8:	ldr	r3, [pc, #332]	; 172fc <read_function_ast_node@@Base+0x440>
   171ac:	add	r3, pc, r3
   171b0:	ldrd	r0, [fp, #-124]	; 0xffffff84
   171b4:	strd	r0, [r3, #88]	; 0x58
   171b8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   171bc:	bl	17318 <read_body@@Base>
   171c0:	str	r0, [fp, #-36]	; 0xffffffdc
   171c4:	ldr	r3, [pc, #308]	; 17300 <read_function_ast_node@@Base+0x444>
   171c8:	add	r3, pc, r3
   171cc:	ldrd	r2, [r3, #96]	; 0x60
   171d0:	adds	r1, r2, #1
   171d4:	str	r1, [fp, #-132]	; 0xffffff7c
   171d8:	adc	r3, r3, #0
   171dc:	str	r3, [fp, #-128]	; 0xffffff80
   171e0:	ldr	r3, [pc, #284]	; 17304 <read_function_ast_node@@Base+0x448>
   171e4:	add	r3, pc, r3
   171e8:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   171ec:	strd	r0, [r3, #96]	; 0x60
   171f0:	mov	r0, #16
   171f4:	bl	11918 <malloc@plt>
   171f8:	mov	r3, r0
   171fc:	str	r3, [fp, #-32]	; 0xffffffe0
   17200:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17204:	ldr	r3, [r3, #4]
   17208:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1720c:	mov	r1, r3
   17210:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17214:	bl	15af0 <init_node_function@@Base>
   17218:	ldr	r3, [pc, #232]	; 17308 <read_function_ast_node@@Base+0x44c>
   1721c:	add	r3, pc, r3
   17220:	ldrd	r2, [r3, #104]	; 0x68
   17224:	adds	r1, r2, #1
   17228:	str	r1, [fp, #-140]	; 0xffffff74
   1722c:	adc	r3, r3, #0
   17230:	str	r3, [fp, #-136]	; 0xffffff78
   17234:	ldr	r3, [pc, #208]	; 1730c <read_function_ast_node@@Base+0x450>
   17238:	add	r3, pc, r3
   1723c:	ldrd	r0, [fp, #-140]	; 0xffffff74
   17240:	strd	r0, [r3, #104]	; 0x68
   17244:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17248:	bl	12b34 <free_token_function@@Base>
   1724c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   17250:	ldr	r3, [pc, #184]	; 17310 <read_function_ast_node@@Base+0x454>
   17254:	add	r3, pc, r3
   17258:	ldrd	r2, [r3, #112]	; 0x70
   1725c:	adds	r0, r2, #1
   17260:	str	r0, [fp, #-148]	; 0xffffff6c
   17264:	adc	r3, r3, #0
   17268:	str	r3, [fp, #-144]	; 0xffffff70
   1726c:	ldr	r3, [pc, #160]	; 17314 <read_function_ast_node@@Base+0x458>
   17270:	add	r3, pc, r3
   17274:	ldrd	r4, [fp, #-148]	; 0xffffff6c
   17278:	strd	r4, [r3, #112]	; 0x70
   1727c:	mov	r3, r1
   17280:	mov	r0, r3
   17284:	sub	sp, fp, #28
   17288:	ldrd	r4, [sp]
   1728c:	ldrd	r6, [sp, #8]
   17290:	ldrd	r8, [sp, #16]
   17294:	ldr	fp, [sp, #24]
   17298:	add	sp, sp, #28
   1729c:	pop	{pc}		; (ldr pc, [sp], #4)
   172a0:	andeq	r8, r1, r0, asr #11
   172a4:	andeq	r8, r1, ip, lsr #11
   172a8:	andeq	r8, r1, ip, ror #10
   172ac:	andeq	r8, r1, r8, asr r5
   172b0:	andeq	r8, r1, r8, lsr r5
   172b4:	andeq	r8, r1, r4, lsr #10
   172b8:	andeq	r8, r1, ip, lsl #10
   172bc:	strdeq	r8, [r1], -r0
   172c0:			; <UNDEFINED> instruction: 0x000184b8
   172c4:	muleq	r1, ip, r4
   172c8:	andeq	r8, r1, r8, lsl #9
   172cc:	andeq	r8, r1, ip, ror #8
   172d0:	andeq	r8, r1, r0, asr #8
   172d4:	andeq	r8, r1, r4, lsr #8
   172d8:	andeq	r8, r1, r0, lsl #8
   172dc:	andeq	r8, r1, r4, ror #7
   172e0:	andeq	r8, r1, r8, asr #7
   172e4:	andeq	r8, r1, ip, lsr #7
   172e8:	andeq	r8, r1, r4, ror r3
   172ec:	andeq	r8, r1, r8, asr r3
   172f0:	andeq	r8, r1, r4, asr #6
   172f4:	andeq	r8, r1, r8, lsr #6
   172f8:	andeq	r8, r1, r0, lsl r3
   172fc:	strdeq	r8, [r1], -r4
   17300:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17304:			; <UNDEFINED> instruction: 0x000182bc
   17308:	andeq	r8, r1, r4, lsl #5
   1730c:	andeq	r8, r1, r8, ror #4
   17310:	andeq	r8, r1, ip, asr #4
   17314:	andeq	r8, r1, r0, lsr r2

00017318 <read_body@@Base>:
   17318:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1731c:	strd	r6, [sp, #8]
   17320:	strd	r8, [sp, #16]
   17324:	str	fp, [sp, #24]
   17328:	str	lr, [sp, #28]
   1732c:	add	fp, sp, #28
   17330:	sub	sp, sp, #128	; 0x80
   17334:	str	r0, [fp, #-48]	; 0xffffffd0
   17338:	ldr	r3, [pc, #1016]	; 17738 <read_body@@Base+0x420>
   1733c:	add	r3, pc, r3
   17340:	ldrd	r2, [r3]
   17344:	adds	r4, r2, #1
   17348:	adc	r5, r3, #0
   1734c:	ldr	r3, [pc, #1000]	; 1773c <read_body@@Base+0x424>
   17350:	add	r3, pc, r3
   17354:	strd	r4, [r3]
   17358:	mov	r3, #0
   1735c:	str	r3, [fp, #-32]	; 0xffffffe0
   17360:	mov	r3, #0
   17364:	str	r3, [fp, #-36]	; 0xffffffdc
   17368:	mov	r3, #0
   1736c:	str	r3, [fp, #-40]	; 0xffffffd8
   17370:	mov	r3, #0
   17374:	str	r3, [fp, #-44]	; 0xffffffd4
   17378:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1737c:	ldr	r3, [r3]
   17380:	mov	r0, r3
   17384:	bl	13488 <next@@Base>
   17388:	str	r0, [fp, #-44]	; 0xffffffd4
   1738c:	ldr	r3, [pc, #940]	; 17740 <read_body@@Base+0x428>
   17390:	add	r3, pc, r3
   17394:	ldrd	r2, [r3, #8]
   17398:	adds	r6, r2, #1
   1739c:	adc	r7, r3, #0
   173a0:	ldr	r3, [pc, #924]	; 17744 <read_body@@Base+0x42c>
   173a4:	add	r3, pc, r3
   173a8:	strd	r6, [r3, #8]
   173ac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   173b0:	ldr	r3, [r3]
   173b4:	cmp	r3, #5
   173b8:	beq	173e4 <read_body@@Base+0xcc>
   173bc:	mov	r1, #0
   173c0:	ldr	r3, [pc, #896]	; 17748 <read_body@@Base+0x430>
   173c4:	add	r3, pc, r3
   173c8:	ldrd	r2, [r3, #16]
   173cc:	adds	r8, r2, #1
   173d0:	adc	r9, r3, #0
   173d4:	ldr	r3, [pc, #880]	; 1774c <read_body@@Base+0x434>
   173d8:	add	r3, pc, r3
   173dc:	strd	r8, [r3, #16]
   173e0:	b	17714 <read_body@@Base+0x3fc>
   173e4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   173e8:	bl	12c54 <free_token_obra@@Base>
   173ec:	ldr	r3, [pc, #860]	; 17750 <read_body@@Base+0x438>
   173f0:	add	r3, pc, r3
   173f4:	ldrd	r2, [r3, #24]
   173f8:	adds	r1, r2, #1
   173fc:	str	r1, [fp, #-60]	; 0xffffffc4
   17400:	adc	r3, r3, #0
   17404:	str	r3, [fp, #-56]	; 0xffffffc8
   17408:	ldr	r3, [pc, #836]	; 17754 <read_body@@Base+0x43c>
   1740c:	add	r3, pc, r3
   17410:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   17414:	strd	r0, [r3, #24]
   17418:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1741c:	ldr	r3, [r3]
   17420:	mov	r0, r3
   17424:	bl	13488 <next@@Base>
   17428:	str	r0, [fp, #-44]	; 0xffffffd4
   1742c:	nop	{0}
   17430:	ldr	r3, [pc, #800]	; 17758 <read_body@@Base+0x440>
   17434:	add	r3, pc, r3
   17438:	ldrd	r2, [r3, #32]
   1743c:	adds	r1, r2, #1
   17440:	str	r1, [fp, #-68]	; 0xffffffbc
   17444:	adc	r3, r3, #0
   17448:	str	r3, [fp, #-64]	; 0xffffffc0
   1744c:	ldr	r3, [pc, #776]	; 1775c <read_body@@Base+0x444>
   17450:	add	r3, pc, r3
   17454:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   17458:	strd	r0, [r3, #32]
   1745c:	b	176a0 <read_body@@Base+0x388>
   17460:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17464:	ldr	r3, [r3]
   17468:	cmp	r3, #7
   1746c:	beq	1747c <read_body@@Base+0x164>
   17470:	cmp	r3, #10
   17474:	beq	1751c <read_body@@Base+0x204>
   17478:	b	1758c <read_body@@Base+0x274>
   1747c:	ldr	r3, [pc, #732]	; 17760 <read_body@@Base+0x448>
   17480:	add	r3, pc, r3
   17484:	ldrd	r2, [r3, #48]	; 0x30
   17488:	adds	r1, r2, #1
   1748c:	str	r1, [fp, #-84]	; 0xffffffac
   17490:	adc	r3, r3, #0
   17494:	str	r3, [fp, #-80]	; 0xffffffb0
   17498:	ldr	r3, [pc, #708]	; 17764 <read_body@@Base+0x44c>
   1749c:	add	r3, pc, r3
   174a0:	ldrd	r0, [fp, #-84]	; 0xffffffac
   174a4:	strd	r0, [r3, #48]	; 0x30
   174a8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   174ac:	bl	12d14 <free_token_return@@Base>
   174b0:	ldr	r3, [pc, #688]	; 17768 <read_body@@Base+0x450>
   174b4:	add	r3, pc, r3
   174b8:	ldrd	r2, [r3, #64]	; 0x40
   174bc:	adds	r1, r2, #1
   174c0:	str	r1, [fp, #-100]	; 0xffffff9c
   174c4:	adc	r3, r3, #0
   174c8:	str	r3, [fp, #-96]	; 0xffffffa0
   174cc:	ldr	r3, [pc, #664]	; 1776c <read_body@@Base+0x454>
   174d0:	add	r3, pc, r3
   174d4:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   174d8:	strd	r0, [r3, #64]	; 0x40
   174dc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   174e0:	bl	177b8 <read_return_expression@@Base>
   174e4:	str	r0, [fp, #-36]	; 0xffffffdc
   174e8:	nop	{0}
   174ec:	ldr	r3, [pc, #636]	; 17770 <read_body@@Base+0x458>
   174f0:	add	r3, pc, r3
   174f4:	ldrd	r2, [r3, #72]	; 0x48
   174f8:	adds	r1, r2, #1
   174fc:	str	r1, [fp, #-108]	; 0xffffff94
   17500:	adc	r3, r3, #0
   17504:	str	r3, [fp, #-104]	; 0xffffff98
   17508:	ldr	r3, [pc, #612]	; 17774 <read_body@@Base+0x45c>
   1750c:	add	r3, pc, r3
   17510:	ldrd	r0, [fp, #-108]	; 0xffffff94
   17514:	strd	r0, [r3, #72]	; 0x48
   17518:	b	17600 <read_body@@Base+0x2e8>
   1751c:	ldr	r3, [pc, #596]	; 17778 <read_body@@Base+0x460>
   17520:	add	r3, pc, r3
   17524:	ldrd	r2, [r3, #56]	; 0x38
   17528:	adds	r1, r2, #1
   1752c:	str	r1, [fp, #-92]	; 0xffffffa4
   17530:	adc	r3, r3, #0
   17534:	str	r3, [fp, #-88]	; 0xffffffa8
   17538:	ldr	r3, [pc, #572]	; 1777c <read_body@@Base+0x464>
   1753c:	add	r3, pc, r3
   17540:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   17544:	strd	r0, [r3, #56]	; 0x38
   17548:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1754c:	bl	12e34 <free_token_if@@Base>
   17550:	ldr	r3, [pc, #552]	; 17780 <read_body@@Base+0x468>
   17554:	add	r3, pc, r3
   17558:	ldrd	r2, [r3, #80]	; 0x50
   1755c:	adds	r1, r2, #1
   17560:	str	r1, [fp, #-116]	; 0xffffff8c
   17564:	adc	r3, r3, #0
   17568:	str	r3, [fp, #-112]	; 0xffffff90
   1756c:	ldr	r3, [pc, #528]	; 17784 <read_body@@Base+0x46c>
   17570:	add	r3, pc, r3
   17574:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   17578:	strd	r0, [r3, #80]	; 0x50
   1757c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17580:	bl	17a80 <read_if_statement@@Base>
   17584:	str	r0, [fp, #-36]	; 0xffffffdc
   17588:	b	17600 <read_body@@Base+0x2e8>
   1758c:	ldr	r3, [pc, #500]	; 17788 <read_body@@Base+0x470>
   17590:	add	r3, pc, r3
   17594:	ldrd	r2, [r3, #40]	; 0x28
   17598:	adds	r1, r2, #1
   1759c:	str	r1, [fp, #-76]	; 0xffffffb4
   175a0:	adc	r3, r3, #0
   175a4:	str	r3, [fp, #-72]	; 0xffffffb8
   175a8:	ldr	r3, [pc, #476]	; 1778c <read_body@@Base+0x474>
   175ac:	add	r3, pc, r3
   175b0:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   175b4:	strd	r0, [r3, #40]	; 0x28
   175b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   175bc:	ldr	r3, [r3]
   175c0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   175c4:	mov	r0, r3
   175c8:	bl	131c4 <push_back@@Base>
   175cc:	ldr	r3, [pc, #444]	; 17790 <read_body@@Base+0x478>
   175d0:	add	r3, pc, r3
   175d4:	ldrd	r2, [r3, #88]	; 0x58
   175d8:	adds	r1, r2, #1
   175dc:	str	r1, [fp, #-124]	; 0xffffff84
   175e0:	adc	r3, r3, #0
   175e4:	str	r3, [fp, #-120]	; 0xffffff88
   175e8:	ldr	r3, [pc, #420]	; 17794 <read_body@@Base+0x47c>
   175ec:	add	r3, pc, r3
   175f0:	ldrd	r0, [fp, #-124]	; 0xffffff84
   175f4:	strd	r0, [r3, #88]	; 0x58
   175f8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   175fc:	b	17714 <read_body@@Base+0x3fc>
   17600:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17604:	cmp	r3, #0
   17608:	beq	17650 <read_body@@Base+0x338>
   1760c:	ldr	r3, [pc, #388]	; 17798 <read_body@@Base+0x480>
   17610:	add	r3, pc, r3
   17614:	ldrd	r2, [r3, #96]	; 0x60
   17618:	adds	r1, r2, #1
   1761c:	str	r1, [fp, #-132]	; 0xffffff7c
   17620:	adc	r3, r3, #0
   17624:	str	r3, [fp, #-128]	; 0xffffff80
   17628:	ldr	r3, [pc, #364]	; 1779c <read_body@@Base+0x484>
   1762c:	add	r3, pc, r3
   17630:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   17634:	strd	r0, [r3, #96]	; 0x60
   17638:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1763c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17640:	str	r3, [r2, #4]
   17644:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17648:	str	r3, [fp, #-40]	; 0xffffffd8
   1764c:	b	1768c <read_body@@Base+0x374>
   17650:	ldr	r3, [pc, #328]	; 177a0 <read_body@@Base+0x488>
   17654:	add	r3, pc, r3
   17658:	ldrd	r2, [r3, #104]	; 0x68
   1765c:	adds	r1, r2, #1
   17660:	str	r1, [fp, #-140]	; 0xffffff74
   17664:	adc	r3, r3, #0
   17668:	str	r3, [fp, #-136]	; 0xffffff78
   1766c:	ldr	r3, [pc, #304]	; 177a4 <read_body@@Base+0x48c>
   17670:	add	r3, pc, r3
   17674:	ldrd	r0, [fp, #-140]	; 0xffffff74
   17678:	strd	r0, [r3, #104]	; 0x68
   1767c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17680:	str	r3, [fp, #-32]	; 0xffffffe0
   17684:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17688:	str	r3, [fp, #-40]	; 0xffffffd8
   1768c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17690:	ldr	r3, [r3]
   17694:	mov	r0, r3
   17698:	bl	13488 <next@@Base>
   1769c:	str	r0, [fp, #-44]	; 0xffffffd4
   176a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   176a4:	ldr	r3, [r3]
   176a8:	cmp	r3, #6
   176ac:	bne	17460 <read_body@@Base+0x148>
   176b0:	ldr	r3, [pc, #240]	; 177a8 <read_body@@Base+0x490>
   176b4:	add	r3, pc, r3
   176b8:	ldrd	r2, [r3, #112]	; 0x70
   176bc:	adds	r1, r2, #1
   176c0:	str	r1, [fp, #-148]	; 0xffffff6c
   176c4:	adc	r3, r3, #0
   176c8:	str	r3, [fp, #-144]	; 0xffffff70
   176cc:	ldr	r3, [pc, #216]	; 177ac <read_body@@Base+0x494>
   176d0:	add	r3, pc, r3
   176d4:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   176d8:	strd	r0, [r3, #112]	; 0x70
   176dc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   176e0:	bl	12cb4 <free_token_cbra@@Base>
   176e4:	ldr	r3, [pc, #196]	; 177b0 <read_body@@Base+0x498>
   176e8:	add	r3, pc, r3
   176ec:	ldrd	r2, [r3, #120]	; 0x78
   176f0:	adds	r1, r2, #1
   176f4:	str	r1, [fp, #-156]	; 0xffffff64
   176f8:	adc	r3, r3, #0
   176fc:	str	r3, [fp, #-152]	; 0xffffff68
   17700:	ldr	r3, [pc, #172]	; 177b4 <read_body@@Base+0x49c>
   17704:	add	r3, pc, r3
   17708:	ldrd	r0, [fp, #-156]	; 0xffffff64
   1770c:	strd	r0, [r3, #120]	; 0x78
   17710:	ldr	r1, [fp, #-32]	; 0xffffffe0
   17714:	mov	r3, r1
   17718:	mov	r0, r3
   1771c:	sub	sp, fp, #28
   17720:	ldrd	r4, [sp]
   17724:	ldrd	r6, [sp, #8]
   17728:	ldrd	r8, [sp, #16]
   1772c:	ldr	fp, [sp, #24]
   17730:	add	sp, sp, #28
   17734:	pop	{pc}		; (ldr pc, [sp], #4)
   17738:	andeq	r8, r1, r4, ror #1
   1773c:	ldrdeq	r8, [r1], -r0
   17740:	muleq	r1, r0, r0
   17744:	andeq	r8, r1, ip, ror r0
   17748:	andeq	r8, r1, ip, asr r0
   1774c:	andeq	r8, r1, r8, asr #32
   17750:	andeq	r8, r1, r0, lsr r0
   17754:	andeq	r8, r1, r4, lsl r0
   17758:	andeq	r7, r1, ip, ror #31
   1775c:	ldrdeq	r7, [r1], -r0
   17760:	andeq	r7, r1, r0, lsr #31
   17764:	andeq	r7, r1, r4, lsl #31
   17768:	andeq	r7, r1, ip, ror #30
   1776c:	andeq	r7, r1, r0, asr pc
   17770:	andeq	r7, r1, r0, lsr pc
   17774:	andeq	r7, r1, r4, lsl pc
   17778:	andeq	r7, r1, r0, lsl #30
   1777c:	andeq	r7, r1, r4, ror #29
   17780:	andeq	r7, r1, ip, asr #29
   17784:			; <UNDEFINED> instruction: 0x00017eb0
   17788:	muleq	r1, r0, lr
   1778c:	andeq	r7, r1, r4, ror lr
   17790:	andeq	r7, r1, r0, asr lr
   17794:	andeq	r7, r1, r4, lsr lr
   17798:	andeq	r7, r1, r0, lsl lr
   1779c:	strdeq	r7, [r1], -r4
   177a0:	andeq	r7, r1, ip, asr #27
   177a4:			; <UNDEFINED> instruction: 0x00017db0
   177a8:	andeq	r7, r1, ip, ror #26
   177ac:	andeq	r7, r1, r0, asr sp
   177b0:	andeq	r7, r1, r8, lsr sp
   177b4:	andeq	r7, r1, ip, lsl sp

000177b8 <read_return_expression@@Base>:
   177b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   177bc:	strd	r6, [sp, #8]
   177c0:	strd	r8, [sp, #16]
   177c4:	str	fp, [sp, #24]
   177c8:	str	lr, [sp, #28]
   177cc:	add	fp, sp, #28
   177d0:	sub	sp, sp, #72	; 0x48
   177d4:	str	r0, [fp, #-48]	; 0xffffffd0
   177d8:	ldr	r3, [pc, #600]	; 17a38 <read_return_expression@@Base+0x280>
   177dc:	add	r3, pc, r3
   177e0:	ldrd	r2, [r3]
   177e4:	adds	r4, r2, #1
   177e8:	adc	r5, r3, #0
   177ec:	ldr	r3, [pc, #584]	; 17a3c <read_return_expression@@Base+0x284>
   177f0:	add	r3, pc, r3
   177f4:	strd	r4, [r3]
   177f8:	mov	r3, #0
   177fc:	str	r3, [fp, #-32]	; 0xffffffe0
   17800:	mov	r3, #0
   17804:	str	r3, [fp, #-36]	; 0xffffffdc
   17808:	mov	r3, #0
   1780c:	str	r3, [fp, #-40]	; 0xffffffd8
   17810:	mov	r3, #0
   17814:	str	r3, [fp, #-44]	; 0xffffffd4
   17818:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1781c:	ldr	r3, [r3]
   17820:	mov	r0, r3
   17824:	bl	13488 <next@@Base>
   17828:	str	r0, [fp, #-40]	; 0xffffffd8
   1782c:	ldr	r3, [pc, #524]	; 17a40 <read_return_expression@@Base+0x288>
   17830:	add	r3, pc, r3
   17834:	ldrd	r2, [r3, #8]
   17838:	adds	r6, r2, #1
   1783c:	adc	r7, r3, #0
   17840:	ldr	r3, [pc, #508]	; 17a44 <read_return_expression@@Base+0x28c>
   17844:	add	r3, pc, r3
   17848:	strd	r6, [r3, #8]
   1784c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17850:	ldr	r3, [r3]
   17854:	cmp	r3, #1
   17858:	beq	17884 <read_return_expression@@Base+0xcc>
   1785c:	mov	r1, #0
   17860:	ldr	r3, [pc, #480]	; 17a48 <read_return_expression@@Base+0x290>
   17864:	add	r3, pc, r3
   17868:	ldrd	r2, [r3, #16]
   1786c:	adds	r8, r2, #1
   17870:	adc	r9, r3, #0
   17874:	ldr	r3, [pc, #464]	; 17a4c <read_return_expression@@Base+0x294>
   17878:	add	r3, pc, r3
   1787c:	strd	r8, [r3, #16]
   17880:	b	17a14 <read_return_expression@@Base+0x25c>
   17884:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17888:	str	r3, [fp, #-44]	; 0xffffffd4
   1788c:	mov	r0, #12
   17890:	bl	11918 <malloc@plt>
   17894:	mov	r3, r0
   17898:	str	r3, [fp, #-36]	; 0xffffffdc
   1789c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   178a0:	ldr	r3, [r3, #4]
   178a4:	mov	r1, r3
   178a8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   178ac:	bl	15a48 <init_node_int@@Base>
   178b0:	ldr	r3, [pc, #408]	; 17a50 <read_return_expression@@Base+0x298>
   178b4:	add	r3, pc, r3
   178b8:	ldrd	r2, [r3, #24]
   178bc:	adds	r1, r2, #1
   178c0:	str	r1, [fp, #-60]	; 0xffffffc4
   178c4:	adc	r3, r3, #0
   178c8:	str	r3, [fp, #-56]	; 0xffffffc8
   178cc:	ldr	r3, [pc, #384]	; 17a54 <read_return_expression@@Base+0x29c>
   178d0:	add	r3, pc, r3
   178d4:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   178d8:	strd	r0, [r3, #24]
   178dc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   178e0:	bl	12ad4 <free_token_int_value@@Base>
   178e4:	ldr	r3, [pc, #364]	; 17a58 <read_return_expression@@Base+0x2a0>
   178e8:	add	r3, pc, r3
   178ec:	ldrd	r2, [r3, #32]
   178f0:	adds	r1, r2, #1
   178f4:	str	r1, [fp, #-68]	; 0xffffffbc
   178f8:	adc	r3, r3, #0
   178fc:	str	r3, [fp, #-64]	; 0xffffffc0
   17900:	ldr	r3, [pc, #340]	; 17a5c <read_return_expression@@Base+0x2a4>
   17904:	add	r3, pc, r3
   17908:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   1790c:	strd	r0, [r3, #32]
   17910:	mov	r0, #12
   17914:	bl	11918 <malloc@plt>
   17918:	mov	r3, r0
   1791c:	str	r3, [fp, #-32]	; 0xffffffe0
   17920:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17924:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17928:	bl	15ba8 <init_node_return@@Base>
   1792c:	ldr	r3, [pc, #300]	; 17a60 <read_return_expression@@Base+0x2a8>
   17930:	add	r3, pc, r3
   17934:	ldrd	r2, [r3, #40]	; 0x28
   17938:	adds	r1, r2, #1
   1793c:	str	r1, [fp, #-76]	; 0xffffffb4
   17940:	adc	r3, r3, #0
   17944:	str	r3, [fp, #-72]	; 0xffffffb8
   17948:	ldr	r3, [pc, #276]	; 17a64 <read_return_expression@@Base+0x2ac>
   1794c:	add	r3, pc, r3
   17950:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   17954:	strd	r0, [r3, #40]	; 0x28
   17958:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1795c:	ldr	r3, [r3]
   17960:	mov	r0, r3
   17964:	bl	13488 <next@@Base>
   17968:	str	r0, [fp, #-40]	; 0xffffffd8
   1796c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17970:	ldr	r3, [r3]
   17974:	cmp	r3, #8
   17978:	beq	179b0 <read_return_expression@@Base+0x1f8>
   1797c:	mov	r1, #0
   17980:	ldr	r3, [pc, #224]	; 17a68 <read_return_expression@@Base+0x2b0>
   17984:	add	r3, pc, r3
   17988:	ldrd	r2, [r3, #56]	; 0x38
   1798c:	adds	r0, r2, #1
   17990:	str	r0, [fp, #-92]	; 0xffffffa4
   17994:	adc	r3, r3, #0
   17998:	str	r3, [fp, #-88]	; 0xffffffa8
   1799c:	ldr	r3, [pc, #200]	; 17a6c <read_return_expression@@Base+0x2b4>
   179a0:	add	r3, pc, r3
   179a4:	ldrd	r4, [fp, #-92]	; 0xffffffa4
   179a8:	strd	r4, [r3, #56]	; 0x38
   179ac:	b	17a14 <read_return_expression@@Base+0x25c>
   179b0:	ldr	r3, [pc, #184]	; 17a70 <read_return_expression@@Base+0x2b8>
   179b4:	add	r3, pc, r3
   179b8:	ldrd	r2, [r3, #48]	; 0x30
   179bc:	adds	r1, r2, #1
   179c0:	str	r1, [fp, #-84]	; 0xffffffac
   179c4:	adc	r3, r3, #0
   179c8:	str	r3, [fp, #-80]	; 0xffffffb0
   179cc:	ldr	r3, [pc, #160]	; 17a74 <read_return_expression@@Base+0x2bc>
   179d0:	add	r3, pc, r3
   179d4:	ldrd	r0, [fp, #-84]	; 0xffffffac
   179d8:	strd	r0, [r3, #48]	; 0x30
   179dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   179e0:	bl	12d74 <free_token_semicolon@@Base>
   179e4:	ldr	r3, [pc, #140]	; 17a78 <read_return_expression@@Base+0x2c0>
   179e8:	add	r3, pc, r3
   179ec:	ldrd	r2, [r3, #64]	; 0x40
   179f0:	adds	r1, r2, #1
   179f4:	str	r1, [fp, #-100]	; 0xffffff9c
   179f8:	adc	r3, r3, #0
   179fc:	str	r3, [fp, #-96]	; 0xffffffa0
   17a00:	ldr	r3, [pc, #116]	; 17a7c <read_return_expression@@Base+0x2c4>
   17a04:	add	r3, pc, r3
   17a08:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   17a0c:	strd	r0, [r3, #64]	; 0x40
   17a10:	ldr	r1, [fp, #-32]	; 0xffffffe0
   17a14:	mov	r3, r1
   17a18:	mov	r0, r3
   17a1c:	sub	sp, fp, #28
   17a20:	ldrd	r4, [sp]
   17a24:	ldrd	r6, [sp, #8]
   17a28:	ldrd	r8, [sp, #16]
   17a2c:	ldr	fp, [sp, #24]
   17a30:	add	sp, sp, #28
   17a34:	pop	{pc}		; (ldr pc, [sp], #4)
   17a38:	strdeq	r7, [r1], -ip
   17a3c:	andeq	r7, r1, r8, ror #23
   17a40:	andeq	r7, r1, r8, lsr #23
   17a44:	muleq	r1, r4, fp
   17a48:	andeq	r7, r1, r4, ror fp
   17a4c:	andeq	r7, r1, r0, ror #22
   17a50:	andeq	r7, r1, r4, lsr #22
   17a54:	andeq	r7, r1, r8, lsl #22
   17a58:	strdeq	r7, [r1], -r0
   17a5c:	ldrdeq	r7, [r1], -r4
   17a60:	andeq	r7, r1, r8, lsr #21
   17a64:	andeq	r7, r1, ip, lsl #21
   17a68:	andeq	r7, r1, r4, asr sl
   17a6c:	andeq	r7, r1, r8, lsr sl
   17a70:	andeq	r7, r1, r4, lsr #20
   17a74:	andeq	r7, r1, r8, lsl #20
   17a78:	strdeq	r7, [r1], -r0
   17a7c:	ldrdeq	r7, [r1], -r4

00017a80 <read_if_statement@@Base>:
   17a80:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17a84:	strd	r6, [sp, #8]
   17a88:	strd	r8, [sp, #16]
   17a8c:	str	fp, [sp, #24]
   17a90:	str	lr, [sp, #28]
   17a94:	add	fp, sp, #28
   17a98:	sub	sp, sp, #104	; 0x68
   17a9c:	str	r0, [fp, #-56]	; 0xffffffc8
   17aa0:	ldr	r3, [pc, #756]	; 17d9c <read_if_statement@@Base+0x31c>
   17aa4:	add	r3, pc, r3
   17aa8:	ldrd	r2, [r3]
   17aac:	adds	r4, r2, #1
   17ab0:	adc	r5, r3, #0
   17ab4:	ldr	r3, [pc, #740]	; 17da0 <read_if_statement@@Base+0x320>
   17ab8:	add	r3, pc, r3
   17abc:	strd	r4, [r3]
   17ac0:	mov	r3, #0
   17ac4:	str	r3, [fp, #-36]	; 0xffffffdc
   17ac8:	mov	r3, #0
   17acc:	str	r3, [fp, #-40]	; 0xffffffd8
   17ad0:	mov	r3, #0
   17ad4:	str	r3, [fp, #-44]	; 0xffffffd4
   17ad8:	mov	r3, #0
   17adc:	str	r3, [fp, #-32]	; 0xffffffe0
   17ae0:	mov	r3, #0
   17ae4:	str	r3, [fp, #-48]	; 0xffffffd0
   17ae8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17aec:	ldr	r3, [r3]
   17af0:	mov	r0, r3
   17af4:	bl	13488 <next@@Base>
   17af8:	str	r0, [fp, #-48]	; 0xffffffd0
   17afc:	ldr	r3, [pc, #672]	; 17da4 <read_if_statement@@Base+0x324>
   17b00:	add	r3, pc, r3
   17b04:	ldrd	r2, [r3, #8]
   17b08:	adds	r6, r2, #1
   17b0c:	adc	r7, r3, #0
   17b10:	ldr	r3, [pc, #656]	; 17da8 <read_if_statement@@Base+0x328>
   17b14:	add	r3, pc, r3
   17b18:	strd	r6, [r3, #8]
   17b1c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17b20:	ldr	r3, [r3]
   17b24:	cmp	r3, #3
   17b28:	beq	17b54 <read_if_statement@@Base+0xd4>
   17b2c:	mov	r1, #0
   17b30:	ldr	r3, [pc, #628]	; 17dac <read_if_statement@@Base+0x32c>
   17b34:	add	r3, pc, r3
   17b38:	ldrd	r2, [r3, #16]
   17b3c:	adds	r8, r2, #1
   17b40:	adc	r9, r3, #0
   17b44:	ldr	r3, [pc, #612]	; 17db0 <read_if_statement@@Base+0x330>
   17b48:	add	r3, pc, r3
   17b4c:	strd	r8, [r3, #16]
   17b50:	b	17d78 <read_if_statement@@Base+0x2f8>
   17b54:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17b58:	bl	12b94 <free_token_opar@@Base>
   17b5c:	ldr	r3, [pc, #592]	; 17db4 <read_if_statement@@Base+0x334>
   17b60:	add	r3, pc, r3
   17b64:	ldrd	r2, [r3, #24]
   17b68:	adds	r1, r2, #1
   17b6c:	str	r1, [fp, #-68]	; 0xffffffbc
   17b70:	adc	r3, r3, #0
   17b74:	str	r3, [fp, #-64]	; 0xffffffc0
   17b78:	ldr	r3, [pc, #568]	; 17db8 <read_if_statement@@Base+0x338>
   17b7c:	add	r3, pc, r3
   17b80:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   17b84:	strd	r0, [r3, #24]
   17b88:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17b8c:	bl	17dfc <read_boolean_expression@@Base>
   17b90:	str	r0, [fp, #-40]	; 0xffffffd8
   17b94:	ldr	r3, [pc, #544]	; 17dbc <read_if_statement@@Base+0x33c>
   17b98:	add	r3, pc, r3
   17b9c:	ldrd	r2, [r3, #32]
   17ba0:	adds	r1, r2, #1
   17ba4:	str	r1, [fp, #-76]	; 0xffffffb4
   17ba8:	adc	r3, r3, #0
   17bac:	str	r3, [fp, #-72]	; 0xffffffb8
   17bb0:	ldr	r3, [pc, #520]	; 17dc0 <read_if_statement@@Base+0x340>
   17bb4:	add	r3, pc, r3
   17bb8:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   17bbc:	strd	r0, [r3, #32]
   17bc0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17bc4:	bl	17318 <read_body@@Base>
   17bc8:	str	r0, [fp, #-44]	; 0xffffffd4
   17bcc:	ldr	r3, [pc, #496]	; 17dc4 <read_if_statement@@Base+0x344>
   17bd0:	add	r3, pc, r3
   17bd4:	ldrd	r2, [r3, #40]	; 0x28
   17bd8:	adds	r1, r2, #1
   17bdc:	str	r1, [fp, #-84]	; 0xffffffac
   17be0:	adc	r3, r3, #0
   17be4:	str	r3, [fp, #-80]	; 0xffffffb0
   17be8:	ldr	r3, [pc, #472]	; 17dc8 <read_if_statement@@Base+0x348>
   17bec:	add	r3, pc, r3
   17bf0:	ldrd	r0, [fp, #-84]	; 0xffffffac
   17bf4:	strd	r0, [r3, #40]	; 0x28
   17bf8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17bfc:	ldr	r3, [r3]
   17c00:	mov	r0, r3
   17c04:	bl	13488 <next@@Base>
   17c08:	str	r0, [fp, #-48]	; 0xffffffd0
   17c0c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17c10:	ldr	r3, [r3]
   17c14:	cmp	r3, #11
   17c18:	bne	17cb8 <read_if_statement@@Base+0x238>
   17c1c:	ldr	r3, [pc, #424]	; 17dcc <read_if_statement@@Base+0x34c>
   17c20:	add	r3, pc, r3
   17c24:	ldrd	r2, [r3, #48]	; 0x30
   17c28:	adds	r1, r2, #1
   17c2c:	str	r1, [fp, #-92]	; 0xffffffa4
   17c30:	adc	r3, r3, #0
   17c34:	str	r3, [fp, #-88]	; 0xffffffa8
   17c38:	ldr	r3, [pc, #400]	; 17dd0 <read_if_statement@@Base+0x350>
   17c3c:	add	r3, pc, r3
   17c40:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   17c44:	strd	r0, [r3, #48]	; 0x30
   17c48:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17c4c:	bl	12e94 <free_token_else@@Base>
   17c50:	ldr	r3, [pc, #380]	; 17dd4 <read_if_statement@@Base+0x354>
   17c54:	add	r3, pc, r3
   17c58:	ldrd	r2, [r3, #64]	; 0x40
   17c5c:	adds	r1, r2, #1
   17c60:	str	r1, [fp, #-108]	; 0xffffff94
   17c64:	adc	r3, r3, #0
   17c68:	str	r3, [fp, #-104]	; 0xffffff98
   17c6c:	ldr	r3, [pc, #356]	; 17dd8 <read_if_statement@@Base+0x358>
   17c70:	add	r3, pc, r3
   17c74:	ldrd	r0, [fp, #-108]	; 0xffffff94
   17c78:	strd	r0, [r3, #64]	; 0x40
   17c7c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17c80:	bl	17318 <read_body@@Base>
   17c84:	str	r0, [fp, #-32]	; 0xffffffe0
   17c88:	ldr	r3, [pc, #332]	; 17ddc <read_if_statement@@Base+0x35c>
   17c8c:	add	r3, pc, r3
   17c90:	ldrd	r2, [r3, #72]	; 0x48
   17c94:	adds	r1, r2, #1
   17c98:	str	r1, [fp, #-116]	; 0xffffff8c
   17c9c:	adc	r3, r3, #0
   17ca0:	str	r3, [fp, #-112]	; 0xffffff90
   17ca4:	ldr	r3, [pc, #308]	; 17de0 <read_if_statement@@Base+0x360>
   17ca8:	add	r3, pc, r3
   17cac:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   17cb0:	strd	r0, [r3, #72]	; 0x48
   17cb4:	b	17d24 <read_if_statement@@Base+0x2a4>
   17cb8:	ldr	r3, [pc, #292]	; 17de4 <read_if_statement@@Base+0x364>
   17cbc:	add	r3, pc, r3
   17cc0:	ldrd	r2, [r3, #56]	; 0x38
   17cc4:	adds	r1, r2, #1
   17cc8:	str	r1, [fp, #-100]	; 0xffffff9c
   17ccc:	adc	r3, r3, #0
   17cd0:	str	r3, [fp, #-96]	; 0xffffffa0
   17cd4:	ldr	r3, [pc, #268]	; 17de8 <read_if_statement@@Base+0x368>
   17cd8:	add	r3, pc, r3
   17cdc:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   17ce0:	strd	r0, [r3, #56]	; 0x38
   17ce4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17ce8:	ldr	r3, [r3]
   17cec:	ldr	r1, [fp, #-48]	; 0xffffffd0
   17cf0:	mov	r0, r3
   17cf4:	bl	131c4 <push_back@@Base>
   17cf8:	ldr	r3, [pc, #236]	; 17dec <read_if_statement@@Base+0x36c>
   17cfc:	add	r3, pc, r3
   17d00:	ldrd	r2, [r3, #80]	; 0x50
   17d04:	adds	r1, r2, #1
   17d08:	str	r1, [fp, #-124]	; 0xffffff84
   17d0c:	adc	r3, r3, #0
   17d10:	str	r3, [fp, #-120]	; 0xffffff88
   17d14:	ldr	r3, [pc, #212]	; 17df0 <read_if_statement@@Base+0x370>
   17d18:	add	r3, pc, r3
   17d1c:	ldrd	r0, [fp, #-124]	; 0xffffff84
   17d20:	strd	r0, [r3, #80]	; 0x50
   17d24:	mov	r0, #20
   17d28:	bl	11918 <malloc@plt>
   17d2c:	mov	r3, r0
   17d30:	str	r3, [fp, #-36]	; 0xffffffdc
   17d34:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d38:	ldr	r2, [fp, #-44]	; 0xffffffd4
   17d3c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   17d40:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17d44:	bl	15c50 <init_node_if@@Base>
   17d48:	ldr	r3, [pc, #164]	; 17df4 <read_if_statement@@Base+0x374>
   17d4c:	add	r3, pc, r3
   17d50:	ldrd	r2, [r3, #88]	; 0x58
   17d54:	adds	r1, r2, #1
   17d58:	str	r1, [fp, #-132]	; 0xffffff7c
   17d5c:	adc	r3, r3, #0
   17d60:	str	r3, [fp, #-128]	; 0xffffff80
   17d64:	ldr	r3, [pc, #140]	; 17df8 <read_if_statement@@Base+0x378>
   17d68:	add	r3, pc, r3
   17d6c:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   17d70:	strd	r0, [r3, #88]	; 0x58
   17d74:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17d78:	mov	r3, r1
   17d7c:	mov	r0, r3
   17d80:	sub	sp, fp, #28
   17d84:	ldrd	r4, [sp]
   17d88:	ldrd	r6, [sp, #8]
   17d8c:	ldrd	r8, [sp, #16]
   17d90:	ldr	fp, [sp, #24]
   17d94:	add	sp, sp, #28
   17d98:	pop	{pc}		; (ldr pc, [sp], #4)
   17d9c:	ldrdeq	r7, [r1], -r4
   17da0:	andeq	r7, r1, r0, asr #17
   17da4:	andeq	r7, r1, r8, ror r8
   17da8:	andeq	r7, r1, r4, ror #16
   17dac:	andeq	r7, r1, r4, asr #16
   17db0:	andeq	r7, r1, r0, lsr r8
   17db4:	andeq	r7, r1, r8, lsl r8
   17db8:	strdeq	r7, [r1], -ip
   17dbc:	andeq	r7, r1, r0, ror #15
   17dc0:	andeq	r7, r1, r4, asr #15
   17dc4:	andeq	r7, r1, r8, lsr #15
   17dc8:	andeq	r7, r1, ip, lsl #15
   17dcc:	andeq	r7, r1, r8, asr r7
   17dd0:	andeq	r7, r1, ip, lsr r7
   17dd4:	andeq	r7, r1, r4, lsr #14
   17dd8:	andeq	r7, r1, r8, lsl #14
   17ddc:	andeq	r7, r1, ip, ror #13
   17de0:	ldrdeq	r7, [r1], -r0
   17de4:			; <UNDEFINED> instruction: 0x000176bc
   17de8:	andeq	r7, r1, r0, lsr #13
   17dec:	andeq	r7, r1, ip, ror r6
   17df0:	andeq	r7, r1, r0, ror #12
   17df4:	andeq	r7, r1, ip, lsr #12
   17df8:	andeq	r7, r1, r0, lsl r6

00017dfc <read_boolean_expression@@Base>:
   17dfc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17e00:	strd	r6, [sp, #8]
   17e04:	strd	r8, [sp, #16]
   17e08:	strd	sl, [sp, #24]
   17e0c:	str	lr, [sp, #32]
   17e10:	add	fp, sp, #32
   17e14:	sub	sp, sp, #108	; 0x6c
   17e18:	str	r0, [fp, #-56]	; 0xffffffc8
   17e1c:	ldr	sl, [pc, #848]	; 18174 <read_boolean_expression@@Base+0x378>
   17e20:	add	sl, pc, sl
   17e24:	ldr	r3, [pc, #844]	; 18178 <read_boolean_expression@@Base+0x37c>
   17e28:	add	r3, pc, r3
   17e2c:	ldrd	r2, [r3]
   17e30:	adds	r4, r2, #1
   17e34:	adc	r5, r3, #0
   17e38:	ldr	r3, [pc, #828]	; 1817c <read_boolean_expression@@Base+0x380>
   17e3c:	add	r3, pc, r3
   17e40:	strd	r4, [r3]
   17e44:	mov	r3, #0
   17e48:	str	r3, [fp, #-40]	; 0xffffffd8
   17e4c:	mov	r3, #0
   17e50:	str	r3, [fp, #-44]	; 0xffffffd4
   17e54:	mov	r3, #0
   17e58:	str	r3, [fp, #-52]	; 0xffffffcc
   17e5c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17e60:	ldr	r3, [r3]
   17e64:	mov	r0, r3
   17e68:	bl	13488 <next@@Base>
   17e6c:	str	r0, [fp, #-44]	; 0xffffffd4
   17e70:	nop	{0}
   17e74:	ldr	r3, [pc, #772]	; 18180 <read_boolean_expression@@Base+0x384>
   17e78:	add	r3, pc, r3
   17e7c:	ldrd	r2, [r3, #8]
   17e80:	adds	r6, r2, #1
   17e84:	adc	r7, r3, #0
   17e88:	ldr	r3, [pc, #756]	; 18184 <read_boolean_expression@@Base+0x388>
   17e8c:	add	r3, pc, r3
   17e90:	strd	r6, [r3, #8]
   17e94:	b	180ec <read_boolean_expression@@Base+0x2f0>
   17e98:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17e9c:	ldr	r3, [r3]
   17ea0:	cmp	r3, #3
   17ea4:	beq	17fe0 <read_boolean_expression@@Base+0x1e4>
   17ea8:	cmp	r3, #12
   17eac:	beq	17f70 <read_boolean_expression@@Base+0x174>
   17eb0:	cmp	r3, #1
   17eb4:	bne	18058 <read_boolean_expression@@Base+0x25c>
   17eb8:	ldr	r3, [pc, #712]	; 18188 <read_boolean_expression@@Base+0x38c>
   17ebc:	add	r3, pc, r3
   17ec0:	ldrd	r2, [r3, #24]
   17ec4:	adds	r1, r2, #1
   17ec8:	str	r1, [fp, #-76]	; 0xffffffb4
   17ecc:	adc	r3, r3, #0
   17ed0:	str	r3, [fp, #-72]	; 0xffffffb8
   17ed4:	ldr	r3, [pc, #688]	; 1818c <read_boolean_expression@@Base+0x390>
   17ed8:	add	r3, pc, r3
   17edc:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   17ee0:	strd	r0, [r3, #24]
   17ee4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17ee8:	ldr	r3, [r3]
   17eec:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17ef0:	mov	r0, r3
   17ef4:	bl	131c4 <push_back@@Base>
   17ef8:	ldr	r3, [pc, #656]	; 18190 <read_boolean_expression@@Base+0x394>
   17efc:	add	r3, pc, r3
   17f00:	ldrd	r2, [r3, #48]	; 0x30
   17f04:	adds	r1, r2, #1
   17f08:	str	r1, [fp, #-100]	; 0xffffff9c
   17f0c:	adc	r3, r3, #0
   17f10:	str	r3, [fp, #-96]	; 0xffffffa0
   17f14:	ldr	r3, [pc, #632]	; 18194 <read_boolean_expression@@Base+0x398>
   17f18:	add	r3, pc, r3
   17f1c:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   17f20:	strd	r0, [r3, #48]	; 0x30
   17f24:	sub	r2, fp, #52	; 0x34
   17f28:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17f2c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   17f30:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17f34:	bl	181e8 <read_single_boolean_expression@@Base>
   17f38:	str	r0, [fp, #-40]	; 0xffffffd8
   17f3c:	nop	{0}
   17f40:	ldr	r3, [pc, #592]	; 18198 <read_boolean_expression@@Base+0x39c>
   17f44:	add	r3, pc, r3
   17f48:	ldrd	r2, [r3, #56]	; 0x38
   17f4c:	adds	r1, r2, #1
   17f50:	str	r1, [fp, #-108]	; 0xffffff94
   17f54:	adc	r3, r3, #0
   17f58:	str	r3, [fp, #-104]	; 0xffffff98
   17f5c:	ldr	r3, [pc, #568]	; 1819c <read_boolean_expression@@Base+0x3a0>
   17f60:	add	r3, pc, r3
   17f64:	ldrd	r0, [fp, #-108]	; 0xffffff94
   17f68:	strd	r0, [r3, #56]	; 0x38
   17f6c:	b	180d8 <read_boolean_expression@@Base+0x2dc>
   17f70:	ldr	r3, [pc, #552]	; 181a0 <read_boolean_expression@@Base+0x3a4>
   17f74:	add	r3, pc, r3
   17f78:	ldrd	r2, [r3, #40]	; 0x28
   17f7c:	adds	r1, r2, #1
   17f80:	str	r1, [fp, #-92]	; 0xffffffa4
   17f84:	adc	r3, r3, #0
   17f88:	str	r3, [fp, #-88]	; 0xffffffa8
   17f8c:	ldr	r3, [pc, #528]	; 181a4 <read_boolean_expression@@Base+0x3a8>
   17f90:	add	r3, pc, r3
   17f94:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   17f98:	strd	r0, [r3, #40]	; 0x28
   17f9c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17fa0:	bl	1684c <get_boolean_op_value@@Base>
   17fa4:	str	r0, [fp, #-48]	; 0xffffffd0
   17fa8:	ldr	r3, [pc, #504]	; 181a8 <read_boolean_expression@@Base+0x3ac>
   17fac:	add	r3, pc, r3
   17fb0:	ldrd	r2, [r3, #64]	; 0x40
   17fb4:	adds	r1, r2, #1
   17fb8:	str	r1, [fp, #-116]	; 0xffffff8c
   17fbc:	adc	r3, r3, #0
   17fc0:	str	r3, [fp, #-112]	; 0xffffff90
   17fc4:	ldr	r3, [pc, #480]	; 181ac <read_boolean_expression@@Base+0x3b0>
   17fc8:	add	r3, pc, r3
   17fcc:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   17fd0:	strd	r0, [r3, #64]	; 0x40
   17fd4:	mov	r3, #1
   17fd8:	str	r3, [fp, #-52]	; 0xffffffcc
   17fdc:	b	180d8 <read_boolean_expression@@Base+0x2dc>
   17fe0:	ldr	r3, [pc, #456]	; 181b0 <read_boolean_expression@@Base+0x3b4>
   17fe4:	add	r3, pc, r3
   17fe8:	ldrd	r2, [r3, #32]
   17fec:	adds	r1, r2, #1
   17ff0:	str	r1, [fp, #-84]	; 0xffffffac
   17ff4:	adc	r3, r3, #0
   17ff8:	str	r3, [fp, #-80]	; 0xffffffb0
   17ffc:	ldr	r3, [pc, #432]	; 181b4 <read_boolean_expression@@Base+0x3b8>
   18000:	add	r3, pc, r3
   18004:	ldrd	r0, [fp, #-84]	; 0xffffffac
   18008:	strd	r0, [r3, #32]
   1800c:	sub	r2, fp, #52	; 0x34
   18010:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18014:	ldr	r1, [fp, #-40]	; 0xffffffd8
   18018:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1801c:	bl	181e8 <read_single_boolean_expression@@Base>
   18020:	str	r0, [fp, #-40]	; 0xffffffd8
   18024:	nop	{0}
   18028:	ldr	r3, [pc, #392]	; 181b8 <read_boolean_expression@@Base+0x3bc>
   1802c:	add	r3, pc, r3
   18030:	ldrd	r2, [r3, #72]	; 0x48
   18034:	adds	r1, r2, #1
   18038:	str	r1, [fp, #-124]	; 0xffffff84
   1803c:	adc	r3, r3, #0
   18040:	str	r3, [fp, #-120]	; 0xffffff88
   18044:	ldr	r3, [pc, #368]	; 181bc <read_boolean_expression@@Base+0x3c0>
   18048:	add	r3, pc, r3
   1804c:	ldrd	r0, [fp, #-124]	; 0xffffff84
   18050:	strd	r0, [r3, #72]	; 0x48
   18054:	b	180d8 <read_boolean_expression@@Base+0x2dc>
   18058:	ldr	r3, [pc, #352]	; 181c0 <read_boolean_expression@@Base+0x3c4>
   1805c:	add	r3, pc, r3
   18060:	ldrd	r2, [r3, #16]
   18064:	adds	r1, r2, #1
   18068:	str	r1, [fp, #-68]	; 0xffffffbc
   1806c:	adc	r3, r3, #0
   18070:	str	r3, [fp, #-64]	; 0xffffffc0
   18074:	ldr	r3, [pc, #328]	; 181c4 <read_boolean_expression@@Base+0x3c8>
   18078:	add	r3, pc, r3
   1807c:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   18080:	strd	r0, [r3, #16]
   18084:	ldr	r3, [pc, #316]	; 181c8 <read_boolean_expression@@Base+0x3cc>
   18088:	ldr	r3, [sl, r3]
   1808c:	ldr	r3, [r3]
   18090:	mov	r2, #33	; 0x21
   18094:	mov	r1, #1
   18098:	ldr	r0, [pc, #300]	; 181cc <read_boolean_expression@@Base+0x3d0>
   1809c:	add	r0, pc, r0
   180a0:	bl	118dc <fwrite@plt>
   180a4:	ldr	r3, [pc, #292]	; 181d0 <read_boolean_expression@@Base+0x3d4>
   180a8:	add	r3, pc, r3
   180ac:	ldrd	r2, [r3, #80]	; 0x50
   180b0:	adds	r1, r2, #1
   180b4:	str	r1, [fp, #-132]	; 0xffffff7c
   180b8:	adc	r3, r3, #0
   180bc:	str	r3, [fp, #-128]	; 0xffffff80
   180c0:	ldr	r3, [pc, #268]	; 181d4 <read_boolean_expression@@Base+0x3d8>
   180c4:	add	r3, pc, r3
   180c8:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   180cc:	strd	r0, [r3, #80]	; 0x50
   180d0:	mov	r0, #1
   180d4:	bl	11948 <exit@plt>
   180d8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   180dc:	ldr	r3, [r3]
   180e0:	mov	r0, r3
   180e4:	bl	13488 <next@@Base>
   180e8:	str	r0, [fp, #-44]	; 0xffffffd4
   180ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   180f0:	ldr	r3, [r3]
   180f4:	cmp	r3, #4
   180f8:	bne	17e98 <read_boolean_expression@@Base+0x9c>
   180fc:	ldr	r3, [pc, #212]	; 181d8 <read_boolean_expression@@Base+0x3dc>
   18100:	add	r3, pc, r3
   18104:	ldrd	r2, [r3, #88]	; 0x58
   18108:	adds	r1, r2, #1
   1810c:	str	r1, [fp, #-140]	; 0xffffff74
   18110:	adc	r3, r3, #0
   18114:	str	r3, [fp, #-136]	; 0xffffff78
   18118:	ldr	r3, [pc, #188]	; 181dc <read_boolean_expression@@Base+0x3e0>
   1811c:	add	r3, pc, r3
   18120:	ldrd	r0, [fp, #-140]	; 0xffffff74
   18124:	strd	r0, [r3, #88]	; 0x58
   18128:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1812c:	bl	12bf4 <free_token_cpar@@Base>
   18130:	ldr	r3, [pc, #168]	; 181e0 <read_boolean_expression@@Base+0x3e4>
   18134:	add	r3, pc, r3
   18138:	ldrd	r2, [r3, #96]	; 0x60
   1813c:	adds	r8, r2, #1
   18140:	adc	r9, r3, #0
   18144:	ldr	r3, [pc, #152]	; 181e4 <read_boolean_expression@@Base+0x3e8>
   18148:	add	r3, pc, r3
   1814c:	strd	r8, [r3, #96]	; 0x60
   18150:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18154:	mov	r0, r3
   18158:	sub	sp, fp, #32
   1815c:	ldrd	r4, [sp]
   18160:	ldrd	r6, [sp, #8]
   18164:	ldrd	r8, [sp, #16]
   18168:	ldrd	sl, [sp, #24]
   1816c:	add	sp, sp, #32
   18170:	pop	{pc}		; (ldr pc, [sp], #4)
   18174:	ldrdeq	r6, [r1], -r8
   18178:	andeq	r7, r1, r8, ror #9
   1817c:	ldrdeq	r7, [r1], -r4
   18180:	muleq	r1, r8, r4
   18184:	andeq	r7, r1, r4, lsl #9
   18188:	andeq	r7, r1, r4, asr r4
   1818c:	andeq	r7, r1, r8, lsr r4
   18190:	andeq	r7, r1, r4, lsl r4
   18194:	strdeq	r7, [r1], -r8
   18198:	andeq	r7, r1, ip, asr #7
   1819c:			; <UNDEFINED> instruction: 0x000173b0
   181a0:	muleq	r1, ip, r3
   181a4:	andeq	r7, r1, r0, lsl #7
   181a8:	andeq	r7, r1, r4, ror #6
   181ac:	andeq	r7, r1, r8, asr #6
   181b0:	andeq	r7, r1, ip, lsr #6
   181b4:	andeq	r7, r1, r0, lsl r3
   181b8:	andeq	r7, r1, r4, ror #5
   181bc:	andeq	r7, r1, r8, asr #5
   181c0:			; <UNDEFINED> instruction: 0x000172b4
   181c4:	muleq	r1, r8, r2
   181c8:	andeq	r0, r0, r0, lsr #1
   181cc:	andeq	r4, r0, r0, ror fp
   181d0:	andeq	r7, r1, r8, ror #4
   181d4:	andeq	r7, r1, ip, asr #4
   181d8:	andeq	r7, r1, r0, lsl r2
   181dc:	strdeq	r7, [r1], -r4
   181e0:	ldrdeq	r7, [r1], -ip
   181e4:	andeq	r7, r1, r8, asr #3

000181e8 <read_single_boolean_expression@@Base>:
   181e8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   181ec:	strd	r6, [sp, #8]
   181f0:	strd	r8, [sp, #16]
   181f4:	str	fp, [sp, #24]
   181f8:	str	lr, [sp, #28]
   181fc:	add	fp, sp, #28
   18200:	sub	sp, sp, #72	; 0x48
   18204:	str	r0, [fp, #-56]	; 0xffffffc8
   18208:	str	r1, [fp, #-60]	; 0xffffffc4
   1820c:	str	r2, [fp, #-64]	; 0xffffffc0
   18210:	str	r3, [fp, #-68]	; 0xffffffbc
   18214:	ldr	r1, [pc, #524]	; 18428 <read_single_boolean_expression@@Base+0x240>
   18218:	add	r1, pc, r1
   1821c:	ldr	r3, [pc, #520]	; 1842c <read_single_boolean_expression@@Base+0x244>
   18220:	add	r3, pc, r3
   18224:	ldrd	r2, [r3]
   18228:	adds	r4, r2, #1
   1822c:	adc	r5, r3, #0
   18230:	ldr	r3, [pc, #504]	; 18430 <read_single_boolean_expression@@Base+0x248>
   18234:	add	r3, pc, r3
   18238:	strd	r4, [r3]
   1823c:	mov	r3, #0
   18240:	str	r3, [fp, #-36]	; 0xffffffdc
   18244:	mov	r3, #0
   18248:	str	r3, [fp, #-32]	; 0xffffffe0
   1824c:	mov	r3, #0
   18250:	str	r3, [fp, #-40]	; 0xffffffd8
   18254:	mov	r3, #0
   18258:	str	r3, [fp, #-44]	; 0xffffffd4
   1825c:	mov	r3, #0
   18260:	str	r3, [fp, #-48]	; 0xffffffd0
   18264:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18268:	cmp	r3, #0
   1826c:	bne	182ac <read_single_boolean_expression@@Base+0xc4>
   18270:	ldr	r3, [pc, #444]	; 18434 <read_single_boolean_expression@@Base+0x24c>
   18274:	add	r3, pc, r3
   18278:	ldrd	r2, [r3, #8]
   1827c:	adds	r1, r2, #1
   18280:	str	r1, [fp, #-76]	; 0xffffffb4
   18284:	adc	r3, r3, #0
   18288:	str	r3, [fp, #-72]	; 0xffffffb8
   1828c:	ldr	r3, [pc, #420]	; 18438 <read_single_boolean_expression@@Base+0x250>
   18290:	add	r3, pc, r3
   18294:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   18298:	strd	r0, [r3, #8]
   1829c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   182a0:	bl	1846c <read_boolean_binary_expression@@Base>
   182a4:	str	r0, [fp, #-32]	; 0xffffffe0
   182a8:	b	183e0 <read_single_boolean_expression@@Base+0x1f8>
   182ac:	ldr	r3, [fp, #-64]	; 0xffffffc0
   182b0:	ldr	r3, [r3]
   182b4:	cmp	r3, #0
   182b8:	beq	18390 <read_single_boolean_expression@@Base+0x1a8>
   182bc:	ldr	r3, [pc, #376]	; 1843c <read_single_boolean_expression@@Base+0x254>
   182c0:	add	r3, pc, r3
   182c4:	ldrd	r2, [r3, #16]
   182c8:	adds	r1, r2, #1
   182cc:	str	r1, [fp, #-84]	; 0xffffffac
   182d0:	adc	r3, r3, #0
   182d4:	str	r3, [fp, #-80]	; 0xffffffb0
   182d8:	ldr	r3, [pc, #352]	; 18440 <read_single_boolean_expression@@Base+0x258>
   182dc:	add	r3, pc, r3
   182e0:	ldrd	r0, [fp, #-84]	; 0xffffffac
   182e4:	strd	r0, [r3, #16]
   182e8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   182ec:	bl	1846c <read_boolean_binary_expression@@Base>
   182f0:	str	r0, [fp, #-40]	; 0xffffffd8
   182f4:	ldr	r3, [pc, #328]	; 18444 <read_single_boolean_expression@@Base+0x25c>
   182f8:	add	r3, pc, r3
   182fc:	ldrd	r2, [r3, #24]
   18300:	adds	r1, r2, #1
   18304:	str	r1, [fp, #-92]	; 0xffffffa4
   18308:	adc	r3, r3, #0
   1830c:	str	r3, [fp, #-88]	; 0xffffffa8
   18310:	ldr	r3, [pc, #304]	; 18448 <read_single_boolean_expression@@Base+0x260>
   18314:	add	r3, pc, r3
   18318:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   1831c:	strd	r0, [r3, #24]
   18320:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18324:	str	r3, [fp, #-44]	; 0xffffffd4
   18328:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1832c:	str	r3, [fp, #-48]	; 0xffffffd0
   18330:	mov	r0, #20
   18334:	bl	11918 <malloc@plt>
   18338:	mov	r3, r0
   1833c:	str	r3, [fp, #-32]	; 0xffffffe0
   18340:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18344:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18348:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1834c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18350:	bl	15d18 <init_node_boolean_operator@@Base>
   18354:	ldr	r3, [fp, #-64]	; 0xffffffc0
   18358:	mov	r2, #0
   1835c:	str	r2, [r3]
   18360:	ldr	r3, [pc, #228]	; 1844c <read_single_boolean_expression@@Base+0x264>
   18364:	add	r3, pc, r3
   18368:	ldrd	r2, [r3, #32]
   1836c:	adds	r1, r2, #1
   18370:	str	r1, [fp, #-100]	; 0xffffff9c
   18374:	adc	r3, r3, #0
   18378:	str	r3, [fp, #-96]	; 0xffffffa0
   1837c:	ldr	r3, [pc, #204]	; 18450 <read_single_boolean_expression@@Base+0x268>
   18380:	add	r3, pc, r3
   18384:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   18388:	strd	r0, [r3, #32]
   1838c:	b	183e0 <read_single_boolean_expression@@Base+0x1f8>
   18390:	ldr	r3, [pc, #188]	; 18454 <read_single_boolean_expression@@Base+0x26c>
   18394:	ldr	r3, [r1, r3]
   18398:	ldr	r0, [r3]
   1839c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   183a0:	ldr	r3, [r3, #4]
   183a4:	mov	r2, r3
   183a8:	ldr	r3, [pc, #168]	; 18458 <read_single_boolean_expression@@Base+0x270>
   183ac:	add	r3, pc, r3
   183b0:	mov	r1, r3
   183b4:	bl	1196c <fprintf@plt>
   183b8:	ldr	r3, [pc, #156]	; 1845c <read_single_boolean_expression@@Base+0x274>
   183bc:	add	r3, pc, r3
   183c0:	ldrd	r2, [r3, #40]	; 0x28
   183c4:	adds	r8, r2, #1
   183c8:	adc	r9, r3, #0
   183cc:	ldr	r3, [pc, #140]	; 18460 <read_single_boolean_expression@@Base+0x278>
   183d0:	add	r3, pc, r3
   183d4:	strd	r8, [r3, #40]	; 0x28
   183d8:	mov	r0, #1
   183dc:	bl	11948 <exit@plt>
   183e0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   183e4:	ldr	r3, [pc, #120]	; 18464 <read_single_boolean_expression@@Base+0x27c>
   183e8:	add	r3, pc, r3
   183ec:	ldrd	r2, [r3, #48]	; 0x30
   183f0:	adds	r6, r2, #1
   183f4:	adc	r7, r3, #0
   183f8:	ldr	r3, [pc, #104]	; 18468 <read_single_boolean_expression@@Base+0x280>
   183fc:	add	r3, pc, r3
   18400:	strd	r6, [r3, #48]	; 0x30
   18404:	mov	r3, r1
   18408:	mov	r0, r3
   1840c:	sub	sp, fp, #28
   18410:	ldrd	r4, [sp]
   18414:	ldrd	r6, [sp, #8]
   18418:	ldrd	r8, [sp, #16]
   1841c:	ldr	fp, [sp, #24]
   18420:	add	sp, sp, #28
   18424:	pop	{pc}		; (ldr pc, [sp], #4)
   18428:	andeq	r5, r1, r0, ror #27
   1842c:	strheq	r7, [r1], -r8
   18430:	andeq	r7, r1, r4, lsr #1
   18434:	andeq	r7, r1, r4, rrx
   18438:	andeq	r7, r1, r8, asr #32
   1843c:	andeq	r7, r1, r8, lsl r0
   18440:	strdeq	r6, [r1], -ip
   18444:	andeq	r6, r1, r0, ror #31
   18448:	andeq	r6, r1, r4, asr #31
   1844c:	andeq	r6, r1, r4, ror pc
   18450:	andeq	r6, r1, r8, asr pc
   18454:	andeq	r0, r0, r0, lsr #1
   18458:	andeq	r4, r0, r4, lsl #17
   1845c:	andeq	r6, r1, ip, lsl pc
   18460:	andeq	r6, r1, r8, lsl #30
   18464:	strdeq	r6, [r1], -r0
   18468:	ldrdeq	r6, [r1], -ip

0001846c <read_boolean_binary_expression@@Base>:
   1846c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18470:	strd	r6, [sp, #8]
   18474:	strd	r8, [sp, #16]
   18478:	str	fp, [sp, #24]
   1847c:	str	lr, [sp, #28]
   18480:	add	fp, sp, #28
   18484:	sub	sp, sp, #168	; 0xa8
   18488:	str	r0, [fp, #-64]	; 0xffffffc0
   1848c:	ldr	r3, [pc, #1272]	; 1898c <read_boolean_binary_expression@@Base+0x520>
   18490:	add	r3, pc, r3
   18494:	ldrd	r2, [r3]
   18498:	adds	r4, r2, #1
   1849c:	adc	r5, r3, #0
   184a0:	ldr	r3, [pc, #1256]	; 18990 <read_boolean_binary_expression@@Base+0x524>
   184a4:	add	r3, pc, r3
   184a8:	strd	r4, [r3]
   184ac:	mov	r3, #0
   184b0:	str	r3, [fp, #-32]	; 0xffffffe0
   184b4:	mov	r3, #0
   184b8:	str	r3, [fp, #-36]	; 0xffffffdc
   184bc:	mov	r3, #0
   184c0:	str	r3, [fp, #-40]	; 0xffffffd8
   184c4:	mov	r3, #0
   184c8:	str	r3, [fp, #-44]	; 0xffffffd4
   184cc:	mov	r3, #0
   184d0:	str	r3, [fp, #-48]	; 0xffffffd0
   184d4:	mov	r3, #0
   184d8:	str	r3, [fp, #-52]	; 0xffffffcc
   184dc:	mov	r3, #0
   184e0:	str	r3, [fp, #-56]	; 0xffffffc8
   184e4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   184e8:	ldr	r3, [r3]
   184ec:	mov	r0, r3
   184f0:	bl	13488 <next@@Base>
   184f4:	str	r0, [fp, #-48]	; 0xffffffd0
   184f8:	ldr	r3, [pc, #1172]	; 18994 <read_boolean_binary_expression@@Base+0x528>
   184fc:	add	r3, pc, r3
   18500:	ldrd	r2, [r3, #8]
   18504:	adds	r6, r2, #1
   18508:	adc	r7, r3, #0
   1850c:	ldr	r3, [pc, #1156]	; 18998 <read_boolean_binary_expression@@Base+0x52c>
   18510:	add	r3, pc, r3
   18514:	strd	r6, [r3, #8]
   18518:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1851c:	ldr	r3, [r3]
   18520:	cmp	r3, #1
   18524:	beq	18608 <read_boolean_binary_expression@@Base+0x19c>
   18528:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1852c:	ldr	r3, [r3]
   18530:	cmp	r3, #12
   18534:	bne	185e0 <read_boolean_binary_expression@@Base+0x174>
   18538:	ldr	r3, [pc, #1116]	; 1899c <read_boolean_binary_expression@@Base+0x530>
   1853c:	add	r3, pc, r3
   18540:	ldrd	r2, [r3, #16]
   18544:	adds	r1, r2, #1
   18548:	str	r1, [fp, #-76]	; 0xffffffb4
   1854c:	adc	r3, r3, #0
   18550:	str	r3, [fp, #-72]	; 0xffffffb8
   18554:	ldr	r3, [pc, #1092]	; 189a0 <read_boolean_binary_expression@@Base+0x534>
   18558:	add	r3, pc, r3
   1855c:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   18560:	strd	r0, [r3, #16]
   18564:	ldr	r3, [fp, #-64]	; 0xffffffc0
   18568:	ldr	r3, [r3]
   1856c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   18570:	mov	r0, r3
   18574:	bl	131c4 <push_back@@Base>
   18578:	ldr	r3, [pc, #1060]	; 189a4 <read_boolean_binary_expression@@Base+0x538>
   1857c:	add	r3, pc, r3
   18580:	ldrd	r2, [r3, #32]
   18584:	adds	r1, r2, #1
   18588:	str	r1, [fp, #-84]	; 0xffffffac
   1858c:	adc	r3, r3, #0
   18590:	str	r3, [fp, #-80]	; 0xffffffb0
   18594:	ldr	r3, [pc, #1036]	; 189a8 <read_boolean_binary_expression@@Base+0x53c>
   18598:	add	r3, pc, r3
   1859c:	ldrd	r0, [fp, #-84]	; 0xffffffac
   185a0:	strd	r0, [r3, #32]
   185a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   185a8:	bl	18a24 <read_boolean_unary_expression@@Base>
   185ac:	mov	r1, r0
   185b0:	ldr	r3, [pc, #1012]	; 189ac <read_boolean_binary_expression@@Base+0x540>
   185b4:	add	r3, pc, r3
   185b8:	ldrd	r2, [r3, #40]	; 0x28
   185bc:	adds	r0, r2, #1
   185c0:	str	r0, [fp, #-92]	; 0xffffffa4
   185c4:	adc	r3, r3, #0
   185c8:	str	r3, [fp, #-88]	; 0xffffffa8
   185cc:	ldr	r3, [pc, #988]	; 189b0 <read_boolean_binary_expression@@Base+0x544>
   185d0:	add	r3, pc, r3
   185d4:	ldrd	r4, [fp, #-92]	; 0xffffffa4
   185d8:	strd	r4, [r3, #40]	; 0x28
   185dc:	b	18968 <read_boolean_binary_expression@@Base+0x4fc>
   185e0:	ldr	r3, [pc, #972]	; 189b4 <read_boolean_binary_expression@@Base+0x548>
   185e4:	add	r3, pc, r3
   185e8:	ldrd	r2, [r3, #24]
   185ec:	adds	r8, r2, #1
   185f0:	adc	r9, r3, #0
   185f4:	ldr	r3, [pc, #956]	; 189b8 <read_boolean_binary_expression@@Base+0x54c>
   185f8:	add	r3, pc, r3
   185fc:	strd	r8, [r3, #24]
   18600:	mov	r1, #0
   18604:	b	18968 <read_boolean_binary_expression@@Base+0x4fc>
   18608:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1860c:	str	r3, [fp, #-52]	; 0xffffffcc
   18610:	mov	r0, #12
   18614:	bl	11918 <malloc@plt>
   18618:	mov	r3, r0
   1861c:	str	r3, [fp, #-36]	; 0xffffffdc
   18620:	ldr	r3, [fp, #-52]	; 0xffffffcc
   18624:	ldr	r3, [r3, #4]
   18628:	mov	r1, r3
   1862c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18630:	bl	15a48 <init_node_int@@Base>
   18634:	ldr	r3, [pc, #896]	; 189bc <read_boolean_binary_expression@@Base+0x550>
   18638:	add	r3, pc, r3
   1863c:	ldrd	r2, [r3, #48]	; 0x30
   18640:	adds	r1, r2, #1
   18644:	str	r1, [fp, #-100]	; 0xffffff9c
   18648:	adc	r3, r3, #0
   1864c:	str	r3, [fp, #-96]	; 0xffffffa0
   18650:	ldr	r3, [pc, #872]	; 189c0 <read_boolean_binary_expression@@Base+0x554>
   18654:	add	r3, pc, r3
   18658:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   1865c:	strd	r0, [r3, #48]	; 0x30
   18660:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18664:	bl	12ad4 <free_token_int_value@@Base>
   18668:	ldr	r3, [pc, #852]	; 189c4 <read_boolean_binary_expression@@Base+0x558>
   1866c:	add	r3, pc, r3
   18670:	ldrd	r2, [r3, #56]	; 0x38
   18674:	adds	r1, r2, #1
   18678:	str	r1, [fp, #-108]	; 0xffffff94
   1867c:	adc	r3, r3, #0
   18680:	str	r3, [fp, #-104]	; 0xffffff98
   18684:	ldr	r3, [pc, #828]	; 189c8 <read_boolean_binary_expression@@Base+0x55c>
   18688:	add	r3, pc, r3
   1868c:	ldrd	r0, [fp, #-108]	; 0xffffff94
   18690:	strd	r0, [r3, #56]	; 0x38
   18694:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18698:	str	r3, [fp, #-40]	; 0xffffffd8
   1869c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   186a0:	ldr	r3, [r3]
   186a4:	mov	r0, r3
   186a8:	bl	13488 <next@@Base>
   186ac:	str	r0, [fp, #-48]	; 0xffffffd0
   186b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   186b4:	ldr	r3, [r3]
   186b8:	cmp	r3, #12
   186bc:	beq	18728 <read_boolean_binary_expression@@Base+0x2bc>
   186c0:	ldr	r3, [pc, #772]	; 189cc <read_boolean_binary_expression@@Base+0x560>
   186c4:	add	r3, pc, r3
   186c8:	ldrd	r2, [r3, #64]	; 0x40
   186cc:	adds	r1, r2, #1
   186d0:	str	r1, [fp, #-116]	; 0xffffff8c
   186d4:	adc	r3, r3, #0
   186d8:	str	r3, [fp, #-112]	; 0xffffff90
   186dc:	ldr	r3, [pc, #748]	; 189d0 <read_boolean_binary_expression@@Base+0x564>
   186e0:	add	r3, pc, r3
   186e4:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   186e8:	strd	r0, [r3, #64]	; 0x40
   186ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
   186f0:	bl	15dec <free_node@@Base>
   186f4:	ldr	r3, [pc, #728]	; 189d4 <read_boolean_binary_expression@@Base+0x568>
   186f8:	add	r3, pc, r3
   186fc:	ldrd	r2, [r3, #80]	; 0x50
   18700:	adds	r1, r2, #1
   18704:	str	r1, [fp, #-132]	; 0xffffff7c
   18708:	adc	r3, r3, #0
   1870c:	str	r3, [fp, #-128]	; 0xffffff80
   18710:	ldr	r3, [pc, #704]	; 189d8 <read_boolean_binary_expression@@Base+0x56c>
   18714:	add	r3, pc, r3
   18718:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   1871c:	strd	r0, [r3, #80]	; 0x50
   18720:	mov	r1, #0
   18724:	b	18968 <read_boolean_binary_expression@@Base+0x4fc>
   18728:	ldr	r3, [pc, #684]	; 189dc <read_boolean_binary_expression@@Base+0x570>
   1872c:	add	r3, pc, r3
   18730:	ldrd	r2, [r3, #72]	; 0x48
   18734:	adds	r1, r2, #1
   18738:	str	r1, [fp, #-124]	; 0xffffff84
   1873c:	adc	r3, r3, #0
   18740:	str	r3, [fp, #-120]	; 0xffffff88
   18744:	ldr	r3, [pc, #660]	; 189e0 <read_boolean_binary_expression@@Base+0x574>
   18748:	add	r3, pc, r3
   1874c:	ldrd	r0, [fp, #-124]	; 0xffffff84
   18750:	strd	r0, [r3, #72]	; 0x48
   18754:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18758:	str	r3, [fp, #-56]	; 0xffffffc8
   1875c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18760:	bl	1684c <get_boolean_op_value@@Base>
   18764:	str	r0, [fp, #-60]	; 0xffffffc4
   18768:	ldr	r3, [pc, #628]	; 189e4 <read_boolean_binary_expression@@Base+0x578>
   1876c:	add	r3, pc, r3
   18770:	ldrd	r2, [r3, #88]	; 0x58
   18774:	adds	r1, r2, #1
   18778:	str	r1, [fp, #-140]	; 0xffffff74
   1877c:	adc	r3, r3, #0
   18780:	str	r3, [fp, #-136]	; 0xffffff78
   18784:	ldr	r3, [pc, #604]	; 189e8 <read_boolean_binary_expression@@Base+0x57c>
   18788:	add	r3, pc, r3
   1878c:	ldrd	r0, [fp, #-140]	; 0xffffff74
   18790:	strd	r0, [r3, #88]	; 0x58
   18794:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18798:	bl	12ef4 <free_token_boolean_op@@Base>
   1879c:	ldr	r3, [pc, #584]	; 189ec <read_boolean_binary_expression@@Base+0x580>
   187a0:	add	r3, pc, r3
   187a4:	ldrd	r2, [r3, #96]	; 0x60
   187a8:	adds	r1, r2, #1
   187ac:	str	r1, [fp, #-148]	; 0xffffff6c
   187b0:	adc	r3, r3, #0
   187b4:	str	r3, [fp, #-144]	; 0xffffff70
   187b8:	ldr	r3, [pc, #560]	; 189f0 <read_boolean_binary_expression@@Base+0x584>
   187bc:	add	r3, pc, r3
   187c0:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   187c4:	strd	r0, [r3, #96]	; 0x60
   187c8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   187cc:	ldr	r3, [r3]
   187d0:	mov	r0, r3
   187d4:	bl	13488 <next@@Base>
   187d8:	str	r0, [fp, #-48]	; 0xffffffd0
   187dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   187e0:	ldr	r3, [r3]
   187e4:	cmp	r3, #1
   187e8:	beq	18854 <read_boolean_binary_expression@@Base+0x3e8>
   187ec:	ldr	r3, [pc, #512]	; 189f4 <read_boolean_binary_expression@@Base+0x588>
   187f0:	add	r3, pc, r3
   187f4:	ldrd	r2, [r3, #104]	; 0x68
   187f8:	adds	r1, r2, #1
   187fc:	str	r1, [fp, #-156]	; 0xffffff64
   18800:	adc	r3, r3, #0
   18804:	str	r3, [fp, #-152]	; 0xffffff68
   18808:	ldr	r3, [pc, #488]	; 189f8 <read_boolean_binary_expression@@Base+0x58c>
   1880c:	add	r3, pc, r3
   18810:	ldrd	r0, [fp, #-156]	; 0xffffff64
   18814:	strd	r0, [r3, #104]	; 0x68
   18818:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1881c:	bl	15dec <free_node@@Base>
   18820:	ldr	r3, [pc, #468]	; 189fc <read_boolean_binary_expression@@Base+0x590>
   18824:	add	r3, pc, r3
   18828:	ldrd	r2, [r3, #120]	; 0x78
   1882c:	adds	r1, r2, #1
   18830:	str	r1, [fp, #-172]	; 0xffffff54
   18834:	adc	r3, r3, #0
   18838:	str	r3, [fp, #-168]	; 0xffffff58
   1883c:	ldr	r3, [pc, #444]	; 18a00 <read_boolean_binary_expression@@Base+0x594>
   18840:	add	r3, pc, r3
   18844:	ldrd	r0, [fp, #-172]	; 0xffffff54
   18848:	strd	r0, [r3, #120]	; 0x78
   1884c:	mov	r1, #0
   18850:	b	18968 <read_boolean_binary_expression@@Base+0x4fc>
   18854:	ldr	r3, [pc, #424]	; 18a04 <read_boolean_binary_expression@@Base+0x598>
   18858:	add	r3, pc, r3
   1885c:	ldrd	r2, [r3, #112]	; 0x70
   18860:	adds	r1, r2, #1
   18864:	str	r1, [fp, #-164]	; 0xffffff5c
   18868:	adc	r3, r3, #0
   1886c:	str	r3, [fp, #-160]	; 0xffffff60
   18870:	ldr	r3, [pc, #400]	; 18a08 <read_boolean_binary_expression@@Base+0x59c>
   18874:	add	r3, pc, r3
   18878:	ldrd	r0, [fp, #-164]	; 0xffffff5c
   1887c:	strd	r0, [r3, #112]	; 0x70
   18880:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18884:	str	r3, [fp, #-52]	; 0xffffffcc
   18888:	mov	r0, #12
   1888c:	bl	11918 <malloc@plt>
   18890:	mov	r3, r0
   18894:	str	r3, [fp, #-36]	; 0xffffffdc
   18898:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1889c:	ldr	r3, [r3, #4]
   188a0:	mov	r1, r3
   188a4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   188a8:	bl	15a48 <init_node_int@@Base>
   188ac:	ldr	r3, [pc, #344]	; 18a0c <read_boolean_binary_expression@@Base+0x5a0>
   188b0:	add	r3, pc, r3
   188b4:	ldrd	r2, [r3, #128]	; 0x80
   188b8:	adds	r1, r2, #1
   188bc:	str	r1, [fp, #-180]	; 0xffffff4c
   188c0:	adc	r3, r3, #0
   188c4:	str	r3, [fp, #-176]	; 0xffffff50
   188c8:	ldr	r3, [pc, #320]	; 18a10 <read_boolean_binary_expression@@Base+0x5a4>
   188cc:	add	r3, pc, r3
   188d0:	ldrd	r0, [fp, #-180]	; 0xffffff4c
   188d4:	strd	r0, [r3, #128]	; 0x80
   188d8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   188dc:	bl	12ad4 <free_token_int_value@@Base>
   188e0:	ldr	r3, [pc, #300]	; 18a14 <read_boolean_binary_expression@@Base+0x5a8>
   188e4:	add	r3, pc, r3
   188e8:	ldrd	r2, [r3, #136]	; 0x88
   188ec:	adds	r1, r2, #1
   188f0:	str	r1, [fp, #-188]	; 0xffffff44
   188f4:	adc	r3, r3, #0
   188f8:	str	r3, [fp, #-184]	; 0xffffff48
   188fc:	ldr	r3, [pc, #276]	; 18a18 <read_boolean_binary_expression@@Base+0x5ac>
   18900:	add	r3, pc, r3
   18904:	ldrd	r0, [fp, #-188]	; 0xffffff44
   18908:	strd	r0, [r3, #136]	; 0x88
   1890c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18910:	str	r3, [fp, #-44]	; 0xffffffd4
   18914:	mov	r0, #20
   18918:	bl	11918 <malloc@plt>
   1891c:	mov	r3, r0
   18920:	str	r3, [fp, #-32]	; 0xffffffe0
   18924:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18928:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1892c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18930:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18934:	bl	15d18 <init_node_boolean_operator@@Base>
   18938:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1893c:	ldr	r3, [pc, #216]	; 18a1c <read_boolean_binary_expression@@Base+0x5b0>
   18940:	add	r3, pc, r3
   18944:	ldrd	r2, [r3, #144]	; 0x90
   18948:	adds	r0, r2, #1
   1894c:	str	r0, [fp, #-196]	; 0xffffff3c
   18950:	adc	r3, r3, #0
   18954:	str	r3, [fp, #-192]	; 0xffffff40
   18958:	ldr	r3, [pc, #192]	; 18a20 <read_boolean_binary_expression@@Base+0x5b4>
   1895c:	add	r3, pc, r3
   18960:	ldrd	r4, [fp, #-196]	; 0xffffff3c
   18964:	strd	r4, [r3, #144]	; 0x90
   18968:	mov	r3, r1
   1896c:	mov	r0, r3
   18970:	sub	sp, fp, #28
   18974:	ldrd	r4, [sp]
   18978:	ldrd	r6, [sp, #8]
   1897c:	ldrd	r8, [sp, #16]
   18980:	ldr	fp, [sp, #24]
   18984:	add	sp, sp, #28
   18988:	pop	{pc}		; (ldr pc, [sp], #4)
   1898c:			; <UNDEFINED> instruction: 0x00016db0
   18990:	muleq	r1, ip, sp
   18994:	andeq	r6, r1, r4, asr #26
   18998:	andeq	r6, r1, r0, lsr sp
   1899c:	andeq	r6, r1, r4, lsl #26
   189a0:	andeq	r6, r1, r8, ror #25
   189a4:	andeq	r6, r1, r4, asr #25
   189a8:	andeq	r6, r1, r8, lsr #25
   189ac:	andeq	r6, r1, ip, lsl #25
   189b0:	andeq	r6, r1, r0, ror ip
   189b4:	andeq	r6, r1, ip, asr ip
   189b8:	andeq	r6, r1, r8, asr #24
   189bc:	andeq	r6, r1, r8, lsl #24
   189c0:	andeq	r6, r1, ip, ror #23
   189c4:	ldrdeq	r6, [r1], -r4
   189c8:			; <UNDEFINED> instruction: 0x00016bb8
   189cc:	andeq	r6, r1, ip, ror fp
   189d0:	andeq	r6, r1, r0, ror #22
   189d4:	andeq	r6, r1, r8, asr #22
   189d8:	andeq	r6, r1, ip, lsr #22
   189dc:	andeq	r6, r1, r4, lsl fp
   189e0:	strdeq	r6, [r1], -r8
   189e4:	ldrdeq	r6, [r1], -r4
   189e8:			; <UNDEFINED> instruction: 0x00016ab8
   189ec:	andeq	r6, r1, r0, lsr #21
   189f0:	andeq	r6, r1, r4, lsl #21
   189f4:	andeq	r6, r1, r0, asr sl
   189f8:	andeq	r6, r1, r4, lsr sl
   189fc:	andeq	r6, r1, ip, lsl sl
   18a00:	andeq	r6, r1, r0, lsl #20
   18a04:	andeq	r6, r1, r8, ror #19
   18a08:	andeq	r6, r1, ip, asr #19
   18a0c:	muleq	r1, r0, r9
   18a10:	andeq	r6, r1, r4, ror r9
   18a14:	andeq	r6, r1, ip, asr r9
   18a18:	andeq	r6, r1, r0, asr #18
   18a1c:	andeq	r6, r1, r0, lsl #18
   18a20:	andeq	r6, r1, r4, ror #17

00018a24 <read_boolean_unary_expression@@Base>:
   18a24:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18a28:	strd	r6, [sp, #8]
   18a2c:	strd	r8, [sp, #16]
   18a30:	str	fp, [sp, #24]
   18a34:	str	lr, [sp, #28]
   18a38:	add	fp, sp, #28
   18a3c:	sub	sp, sp, #104	; 0x68
   18a40:	str	r0, [fp, #-56]	; 0xffffffc8
   18a44:	ldr	r3, [pc, #784]	; 18d5c <read_boolean_unary_expression@@Base+0x338>
   18a48:	add	r3, pc, r3
   18a4c:	ldrd	r2, [r3]
   18a50:	adds	r4, r2, #1
   18a54:	adc	r5, r3, #0
   18a58:	ldr	r3, [pc, #768]	; 18d60 <read_boolean_unary_expression@@Base+0x33c>
   18a5c:	add	r3, pc, r3
   18a60:	strd	r4, [r3]
   18a64:	mov	r3, #0
   18a68:	str	r3, [fp, #-32]	; 0xffffffe0
   18a6c:	mov	r3, #0
   18a70:	str	r3, [fp, #-36]	; 0xffffffdc
   18a74:	mov	r3, #0
   18a78:	str	r3, [fp, #-40]	; 0xffffffd8
   18a7c:	mov	r3, #0
   18a80:	str	r3, [fp, #-44]	; 0xffffffd4
   18a84:	mov	r3, #0
   18a88:	str	r3, [fp, #-48]	; 0xffffffd0
   18a8c:	mov	r0, #20
   18a90:	bl	11918 <malloc@plt>
   18a94:	mov	r3, r0
   18a98:	str	r3, [fp, #-32]	; 0xffffffe0
   18a9c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18aa0:	ldr	r3, [r3]
   18aa4:	mov	r0, r3
   18aa8:	bl	13488 <next@@Base>
   18aac:	str	r0, [fp, #-44]	; 0xffffffd4
   18ab0:	ldr	r3, [pc, #684]	; 18d64 <read_boolean_unary_expression@@Base+0x340>
   18ab4:	add	r3, pc, r3
   18ab8:	ldrd	r2, [r3, #8]
   18abc:	adds	r6, r2, #1
   18ac0:	adc	r7, r3, #0
   18ac4:	ldr	r3, [pc, #668]	; 18d68 <read_boolean_unary_expression@@Base+0x344>
   18ac8:	add	r3, pc, r3
   18acc:	strd	r6, [r3, #8]
   18ad0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18ad4:	ldr	r3, [r3]
   18ad8:	cmp	r3, #12
   18adc:	beq	18b3c <read_boolean_unary_expression@@Base+0x118>
   18ae0:	ldr	r3, [pc, #644]	; 18d6c <read_boolean_unary_expression@@Base+0x348>
   18ae4:	add	r3, pc, r3
   18ae8:	ldrd	r2, [r3, #16]
   18aec:	adds	r1, r2, #1
   18af0:	str	r1, [fp, #-68]	; 0xffffffbc
   18af4:	adc	r3, r3, #0
   18af8:	str	r3, [fp, #-64]	; 0xffffffc0
   18afc:	ldr	r3, [pc, #620]	; 18d70 <read_boolean_unary_expression@@Base+0x34c>
   18b00:	add	r3, pc, r3
   18b04:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   18b08:	strd	r0, [r3, #16]
   18b0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18b10:	bl	166e4 <free_node_boolean_operator@@Base>
   18b14:	ldr	r3, [pc, #600]	; 18d74 <read_boolean_unary_expression@@Base+0x350>
   18b18:	add	r3, pc, r3
   18b1c:	ldrd	r2, [r3, #24]
   18b20:	adds	r8, r2, #1
   18b24:	adc	r9, r3, #0
   18b28:	ldr	r3, [pc, #584]	; 18d78 <read_boolean_unary_expression@@Base+0x354>
   18b2c:	add	r3, pc, r3
   18b30:	strd	r8, [r3, #24]
   18b34:	mov	r1, #0
   18b38:	b	18d38 <read_boolean_unary_expression@@Base+0x314>
   18b3c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18b40:	bl	1684c <get_boolean_op_value@@Base>
   18b44:	str	r0, [fp, #-52]	; 0xffffffcc
   18b48:	ldr	r3, [pc, #556]	; 18d7c <read_boolean_unary_expression@@Base+0x358>
   18b4c:	add	r3, pc, r3
   18b50:	ldrd	r2, [r3, #32]
   18b54:	adds	r1, r2, #1
   18b58:	str	r1, [fp, #-76]	; 0xffffffb4
   18b5c:	adc	r3, r3, #0
   18b60:	str	r3, [fp, #-72]	; 0xffffffb8
   18b64:	ldr	r3, [pc, #532]	; 18d80 <read_boolean_unary_expression@@Base+0x35c>
   18b68:	add	r3, pc, r3
   18b6c:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   18b70:	strd	r0, [r3, #32]
   18b74:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18b78:	bl	12ef4 <free_token_boolean_op@@Base>
   18b7c:	ldr	r3, [pc, #512]	; 18d84 <read_boolean_unary_expression@@Base+0x360>
   18b80:	add	r3, pc, r3
   18b84:	ldrd	r2, [r3, #40]	; 0x28
   18b88:	adds	r1, r2, #1
   18b8c:	str	r1, [fp, #-84]	; 0xffffffac
   18b90:	adc	r3, r3, #0
   18b94:	str	r3, [fp, #-80]	; 0xffffffb0
   18b98:	ldr	r3, [pc, #488]	; 18d88 <read_boolean_unary_expression@@Base+0x364>
   18b9c:	add	r3, pc, r3
   18ba0:	ldrd	r0, [fp, #-84]	; 0xffffffac
   18ba4:	strd	r0, [r3, #40]	; 0x28
   18ba8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18bac:	ldr	r3, [r3]
   18bb0:	mov	r0, r3
   18bb4:	bl	13488 <next@@Base>
   18bb8:	str	r0, [fp, #-44]	; 0xffffffd4
   18bbc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18bc0:	ldr	r3, [r3]
   18bc4:	cmp	r3, #1
   18bc8:	beq	18c34 <read_boolean_unary_expression@@Base+0x210>
   18bcc:	ldr	r3, [pc, #440]	; 18d8c <read_boolean_unary_expression@@Base+0x368>
   18bd0:	add	r3, pc, r3
   18bd4:	ldrd	r2, [r3, #48]	; 0x30
   18bd8:	adds	r1, r2, #1
   18bdc:	str	r1, [fp, #-92]	; 0xffffffa4
   18be0:	adc	r3, r3, #0
   18be4:	str	r3, [fp, #-88]	; 0xffffffa8
   18be8:	ldr	r3, [pc, #416]	; 18d90 <read_boolean_unary_expression@@Base+0x36c>
   18bec:	add	r3, pc, r3
   18bf0:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   18bf4:	strd	r0, [r3, #48]	; 0x30
   18bf8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18bfc:	bl	166e4 <free_node_boolean_operator@@Base>
   18c00:	ldr	r3, [pc, #396]	; 18d94 <read_boolean_unary_expression@@Base+0x370>
   18c04:	add	r3, pc, r3
   18c08:	ldrd	r2, [r3, #64]	; 0x40
   18c0c:	adds	r1, r2, #1
   18c10:	str	r1, [fp, #-108]	; 0xffffff94
   18c14:	adc	r3, r3, #0
   18c18:	str	r3, [fp, #-104]	; 0xffffff98
   18c1c:	ldr	r3, [pc, #372]	; 18d98 <read_boolean_unary_expression@@Base+0x374>
   18c20:	add	r3, pc, r3
   18c24:	ldrd	r0, [fp, #-108]	; 0xffffff94
   18c28:	strd	r0, [r3, #64]	; 0x40
   18c2c:	mov	r1, #0
   18c30:	b	18d38 <read_boolean_unary_expression@@Base+0x314>
   18c34:	ldr	r3, [pc, #352]	; 18d9c <read_boolean_unary_expression@@Base+0x378>
   18c38:	add	r3, pc, r3
   18c3c:	ldrd	r2, [r3, #56]	; 0x38
   18c40:	adds	r1, r2, #1
   18c44:	str	r1, [fp, #-100]	; 0xffffff9c
   18c48:	adc	r3, r3, #0
   18c4c:	str	r3, [fp, #-96]	; 0xffffffa0
   18c50:	ldr	r3, [pc, #328]	; 18da0 <read_boolean_unary_expression@@Base+0x37c>
   18c54:	add	r3, pc, r3
   18c58:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   18c5c:	strd	r0, [r3, #56]	; 0x38
   18c60:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18c64:	str	r3, [fp, #-48]	; 0xffffffd0
   18c68:	mov	r0, #12
   18c6c:	bl	11918 <malloc@plt>
   18c70:	mov	r3, r0
   18c74:	str	r3, [fp, #-36]	; 0xffffffdc
   18c78:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18c7c:	ldr	r3, [r3, #4]
   18c80:	mov	r1, r3
   18c84:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18c88:	bl	15a48 <init_node_int@@Base>
   18c8c:	ldr	r3, [pc, #272]	; 18da4 <read_boolean_unary_expression@@Base+0x380>
   18c90:	add	r3, pc, r3
   18c94:	ldrd	r2, [r3, #72]	; 0x48
   18c98:	adds	r1, r2, #1
   18c9c:	str	r1, [fp, #-116]	; 0xffffff8c
   18ca0:	adc	r3, r3, #0
   18ca4:	str	r3, [fp, #-112]	; 0xffffff90
   18ca8:	ldr	r3, [pc, #248]	; 18da8 <read_boolean_unary_expression@@Base+0x384>
   18cac:	add	r3, pc, r3
   18cb0:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   18cb4:	strd	r0, [r3, #72]	; 0x48
   18cb8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18cbc:	bl	12ad4 <free_token_int_value@@Base>
   18cc0:	ldr	r3, [pc, #228]	; 18dac <read_boolean_unary_expression@@Base+0x388>
   18cc4:	add	r3, pc, r3
   18cc8:	ldrd	r2, [r3, #80]	; 0x50
   18ccc:	adds	r1, r2, #1
   18cd0:	str	r1, [fp, #-124]	; 0xffffff84
   18cd4:	adc	r3, r3, #0
   18cd8:	str	r3, [fp, #-120]	; 0xffffff88
   18cdc:	ldr	r3, [pc, #204]	; 18db0 <read_boolean_unary_expression@@Base+0x38c>
   18ce0:	add	r3, pc, r3
   18ce4:	ldrd	r0, [fp, #-124]	; 0xffffff84
   18ce8:	strd	r0, [r3, #80]	; 0x50
   18cec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18cf0:	str	r3, [fp, #-40]	; 0xffffffd8
   18cf4:	mov	r3, #0
   18cf8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18cfc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18d00:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18d04:	bl	15d18 <init_node_boolean_operator@@Base>
   18d08:	ldr	r1, [fp, #-32]	; 0xffffffe0
   18d0c:	ldr	r3, [pc, #160]	; 18db4 <read_boolean_unary_expression@@Base+0x390>
   18d10:	add	r3, pc, r3
   18d14:	ldrd	r2, [r3, #88]	; 0x58
   18d18:	adds	r0, r2, #1
   18d1c:	str	r0, [fp, #-132]	; 0xffffff7c
   18d20:	adc	r3, r3, #0
   18d24:	str	r3, [fp, #-128]	; 0xffffff80
   18d28:	ldr	r3, [pc, #136]	; 18db8 <read_boolean_unary_expression@@Base+0x394>
   18d2c:	add	r3, pc, r3
   18d30:	ldrd	r4, [fp, #-132]	; 0xffffff7c
   18d34:	strd	r4, [r3, #88]	; 0x58
   18d38:	mov	r3, r1
   18d3c:	mov	r0, r3
   18d40:	sub	sp, fp, #28
   18d44:	ldrd	r4, [sp]
   18d48:	ldrd	r6, [sp, #8]
   18d4c:	ldrd	r8, [sp, #16]
   18d50:	ldr	fp, [sp, #24]
   18d54:	add	sp, sp, #28
   18d58:	pop	{pc}		; (ldr pc, [sp], #4)
   18d5c:	muleq	r1, r8, r7
   18d60:	andeq	r6, r1, r4, lsl #15
   18d64:	andeq	r6, r1, ip, lsr #14
   18d68:	andeq	r6, r1, r8, lsl r7
   18d6c:	strdeq	r6, [r1], -ip
   18d70:	andeq	r6, r1, r0, ror #13
   18d74:	andeq	r6, r1, r8, asr #13
   18d78:			; <UNDEFINED> instruction: 0x000166b4
   18d7c:	muleq	r1, r4, r6
   18d80:	andeq	r6, r1, r8, ror r6
   18d84:	andeq	r6, r1, r0, ror #12
   18d88:	andeq	r6, r1, r4, asr #12
   18d8c:	andeq	r6, r1, r0, lsl r6
   18d90:	strdeq	r6, [r1], -r4
   18d94:	ldrdeq	r6, [r1], -ip
   18d98:	andeq	r6, r1, r0, asr #11
   18d9c:	andeq	r6, r1, r8, lsr #11
   18da0:	andeq	r6, r1, ip, lsl #11
   18da4:	andeq	r6, r1, r0, asr r5
   18da8:	andeq	r6, r1, r4, lsr r5
   18dac:	andeq	r6, r1, ip, lsl r5
   18db0:	andeq	r6, r1, r0, lsl #10
   18db4:	ldrdeq	r6, [r1], -r0
   18db8:			; <UNDEFINED> instruction: 0x000164b4
   18dbc:	str	fp, [sp, #-8]!
   18dc0:	str	lr, [sp, #4]
   18dc4:	add	fp, sp, #4
   18dc8:	ldr	r3, [pc, #24]	; 18de8 <read_boolean_unary_expression@@Base+0x3c4>
   18dcc:	add	r3, pc, r3
   18dd0:	mov	r0, r3
   18dd4:	bl	1c574 <__gcov_sort_n_vals@@Base+0x4a0>
   18dd8:	sub	sp, fp, #4
   18ddc:	ldr	fp, [sp]
   18de0:	add	sp, sp, #4
   18de4:	pop	{pc}		; (ldr pc, [sp], #4)
   18de8:	ldrdeq	r5, [r1], -ip
   18dec:	str	fp, [sp, #-8]!
   18df0:	str	lr, [sp, #4]
   18df4:	add	fp, sp, #4
   18df8:	bl	1c504 <__gcov_sort_n_vals@@Base+0x430>
   18dfc:	sub	sp, fp, #4
   18e00:	ldr	fp, [sp]
   18e04:	add	sp, sp, #4
   18e08:	pop	{pc}		; (ldr pc, [sp], #4)

00018e0c <init_generator@@Base>:
   18e0c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18e10:	strd	r6, [sp, #8]
   18e14:	str	fp, [sp, #16]
   18e18:	str	lr, [sp, #20]
   18e1c:	add	fp, sp, #20
   18e20:	sub	sp, sp, #16
   18e24:	str	r0, [fp, #-24]	; 0xffffffe8
   18e28:	str	r1, [fp, #-28]	; 0xffffffe4
   18e2c:	str	r2, [fp, #-32]	; 0xffffffe0
   18e30:	ldr	r3, [pc, #144]	; 18ec8 <init_generator@@Base+0xbc>
   18e34:	add	r3, pc, r3
   18e38:	ldrd	r2, [r3]
   18e3c:	adds	r6, r2, #1
   18e40:	adc	r7, r3, #0
   18e44:	ldr	r3, [pc, #128]	; 18ecc <init_generator@@Base+0xc0>
   18e48:	add	r3, pc, r3
   18e4c:	strd	r6, [r3]
   18e50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18e54:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18e58:	str	r2, [r3]
   18e5c:	ldr	r3, [pc, #108]	; 18ed0 <init_generator@@Base+0xc4>
   18e60:	add	r3, pc, r3
   18e64:	mov	r1, r3
   18e68:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18e6c:	bl	118ac <fopen@plt>
   18e70:	mov	r1, r0
   18e74:	ldr	r3, [pc, #88]	; 18ed4 <init_generator@@Base+0xc8>
   18e78:	add	r3, pc, r3
   18e7c:	ldrd	r2, [r3, #8]
   18e80:	adds	r4, r2, #1
   18e84:	adc	r5, r3, #0
   18e88:	ldr	r3, [pc, #72]	; 18ed8 <init_generator@@Base+0xcc>
   18e8c:	add	r3, pc, r3
   18e90:	strd	r4, [r3, #8]
   18e94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18e98:	str	r1, [r3, #4]
   18e9c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18ea0:	mov	r2, #0
   18ea4:	mov	r3, #0
   18ea8:	strd	r2, [r1, #8]
   18eac:	nop	{0}
   18eb0:	sub	sp, fp, #20
   18eb4:	ldrd	r4, [sp]
   18eb8:	ldrd	r6, [sp, #8]
   18ebc:	ldr	fp, [sp, #16]
   18ec0:	add	sp, sp, #20
   18ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   18ec8:	andeq	r6, r1, ip, lsr r9
   18ecc:	andeq	r6, r1, r8, lsr #18
   18ed0:	andeq	r3, r0, r4, ror lr
   18ed4:	strdeq	r6, [r1], -r8
   18ed8:	andeq	r6, r1, r4, ror #17

00018edc <destroy_generator@@Base>:
   18edc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18ee0:	strd	r6, [sp, #8]
   18ee4:	str	fp, [sp, #16]
   18ee8:	str	lr, [sp, #20]
   18eec:	add	fp, sp, #20
   18ef0:	sub	sp, sp, #8
   18ef4:	str	r0, [fp, #-24]	; 0xffffffe8
   18ef8:	ldr	r3, [pc, #100]	; 18f64 <destroy_generator@@Base+0x88>
   18efc:	add	r3, pc, r3
   18f00:	ldrd	r2, [r3]
   18f04:	adds	r6, r2, #1
   18f08:	adc	r7, r3, #0
   18f0c:	ldr	r3, [pc, #84]	; 18f68 <destroy_generator@@Base+0x8c>
   18f10:	add	r3, pc, r3
   18f14:	strd	r6, [r3]
   18f18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18f1c:	ldr	r3, [r3, #4]
   18f20:	mov	r0, r3
   18f24:	bl	119b4 <fclose@plt>
   18f28:	ldr	r3, [pc, #60]	; 18f6c <destroy_generator@@Base+0x90>
   18f2c:	add	r3, pc, r3
   18f30:	ldrd	r2, [r3, #8]
   18f34:	adds	r4, r2, #1
   18f38:	adc	r5, r3, #0
   18f3c:	ldr	r3, [pc, #44]	; 18f70 <destroy_generator@@Base+0x94>
   18f40:	add	r3, pc, r3
   18f44:	strd	r4, [r3, #8]
   18f48:	nop	{0}
   18f4c:	sub	sp, fp, #20
   18f50:	ldrd	r4, [sp]
   18f54:	ldrd	r6, [sp, #8]
   18f58:	ldr	fp, [sp, #16]
   18f5c:	add	sp, sp, #20
   18f60:	pop	{pc}		; (ldr pc, [sp], #4)
   18f64:	andeq	r6, r1, r4, ror #16
   18f68:	andeq	r6, r1, r0, asr r8
   18f6c:	andeq	r6, r1, r4, lsr r8
   18f70:	andeq	r6, r1, r0, lsr #16

00018f74 <generate_code@@Base>:
   18f74:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18f78:	strd	r6, [sp, #8]
   18f7c:	strd	r8, [sp, #16]
   18f80:	str	fp, [sp, #24]
   18f84:	str	lr, [sp, #28]
   18f88:	add	fp, sp, #28
   18f8c:	sub	sp, sp, #24
   18f90:	str	r0, [fp, #-40]	; 0xffffffd8
   18f94:	ldr	r3, [pc, #212]	; 19070 <generate_code@@Base+0xfc>
   18f98:	add	r3, pc, r3
   18f9c:	ldrd	r2, [r3]
   18fa0:	adds	r1, r2, #1
   18fa4:	str	r1, [fp, #-52]	; 0xffffffcc
   18fa8:	adc	r3, r3, #0
   18fac:	str	r3, [fp, #-48]	; 0xffffffd0
   18fb0:	ldr	r3, [pc, #188]	; 19074 <generate_code@@Base+0x100>
   18fb4:	add	r3, pc, r3
   18fb8:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   18fbc:	strd	r0, [r3]
   18fc0:	mov	r3, #0
   18fc4:	str	r3, [fp, #-32]	; 0xffffffe0
   18fc8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18fcc:	ldr	r3, [r3]
   18fd0:	mov	r0, r3
   18fd4:	bl	16e24 <build_ast@@Base>
   18fd8:	str	r0, [fp, #-32]	; 0xffffffe0
   18fdc:	ldr	r3, [pc, #148]	; 19078 <generate_code@@Base+0x104>
   18fe0:	add	r3, pc, r3
   18fe4:	ldrd	r2, [r3, #8]
   18fe8:	adds	r8, r2, #1
   18fec:	adc	r9, r3, #0
   18ff0:	ldr	r3, [pc, #132]	; 1907c <generate_code@@Base+0x108>
   18ff4:	add	r3, pc, r3
   18ff8:	strd	r8, [r3, #8]
   18ffc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   19000:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19004:	bl	19090 <__generate_code@@Base>
   19008:	ldr	r3, [pc, #112]	; 19080 <generate_code@@Base+0x10c>
   1900c:	add	r3, pc, r3
   19010:	ldrd	r2, [r3, #16]
   19014:	adds	r6, r2, #1
   19018:	adc	r7, r3, #0
   1901c:	ldr	r3, [pc, #96]	; 19084 <generate_code@@Base+0x110>
   19020:	add	r3, pc, r3
   19024:	strd	r6, [r3, #16]
   19028:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1902c:	bl	15dec <free_node@@Base>
   19030:	ldr	r3, [pc, #80]	; 19088 <generate_code@@Base+0x114>
   19034:	add	r3, pc, r3
   19038:	ldrd	r2, [r3, #24]
   1903c:	adds	r4, r2, #1
   19040:	adc	r5, r3, #0
   19044:	ldr	r3, [pc, #64]	; 1908c <generate_code@@Base+0x118>
   19048:	add	r3, pc, r3
   1904c:	strd	r4, [r3, #24]
   19050:	nop	{0}
   19054:	sub	sp, fp, #28
   19058:	ldrd	r4, [sp]
   1905c:	ldrd	r6, [sp, #8]
   19060:	ldrd	r8, [sp, #16]
   19064:	ldr	fp, [sp, #24]
   19068:	add	sp, sp, #28
   1906c:	pop	{pc}		; (ldr pc, [sp], #4)
   19070:	andeq	r6, r1, r8, lsr #15
   19074:	andeq	r6, r1, ip, lsl #15
   19078:	andeq	r6, r1, r0, ror #14
   1907c:	andeq	r6, r1, ip, asr #14
   19080:	andeq	r6, r1, r4, lsr r7
   19084:	andeq	r6, r1, r0, lsr #14
   19088:	andeq	r6, r1, ip, lsl #14
   1908c:	strdeq	r6, [r1], -r8

00019090 <__generate_code@@Base>:
   19090:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19094:	strd	r6, [sp, #8]
   19098:	strd	r8, [sp, #16]
   1909c:	str	fp, [sp, #24]
   190a0:	str	lr, [sp, #28]
   190a4:	add	fp, sp, #28
   190a8:	sub	sp, sp, #8
   190ac:	str	r0, [fp, #-32]	; 0xffffffe0
   190b0:	str	r1, [fp, #-36]	; 0xffffffdc
   190b4:	ldr	r3, [pc, #160]	; 1915c <__generate_code@@Base+0xcc>
   190b8:	add	r3, pc, r3
   190bc:	ldrd	r2, [r3]
   190c0:	adds	r8, r2, #1
   190c4:	adc	r9, r3, #0
   190c8:	ldr	r3, [pc, #144]	; 19160 <__generate_code@@Base+0xd0>
   190cc:	add	r3, pc, r3
   190d0:	strd	r8, [r3]
   190d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   190d8:	ldr	r3, [r3, #4]
   190dc:	mov	r2, #21
   190e0:	mov	r1, #1
   190e4:	ldr	r0, [pc, #120]	; 19164 <__generate_code@@Base+0xd4>
   190e8:	add	r0, pc, r0
   190ec:	bl	118dc <fwrite@plt>
   190f0:	ldr	r3, [pc, #112]	; 19168 <__generate_code@@Base+0xd8>
   190f4:	add	r3, pc, r3
   190f8:	ldrd	r2, [r3, #8]
   190fc:	adds	r6, r2, #1
   19100:	adc	r7, r3, #0
   19104:	ldr	r3, [pc, #96]	; 1916c <__generate_code@@Base+0xdc>
   19108:	add	r3, pc, r3
   1910c:	strd	r6, [r3, #8]
   19110:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19114:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19118:	bl	19178 <__generate_code_for_main@@Base>
   1911c:	ldr	r3, [pc, #76]	; 19170 <__generate_code@@Base+0xe0>
   19120:	add	r3, pc, r3
   19124:	ldrd	r2, [r3, #16]
   19128:	adds	r4, r2, #1
   1912c:	adc	r5, r3, #0
   19130:	ldr	r3, [pc, #60]	; 19174 <__generate_code@@Base+0xe4>
   19134:	add	r3, pc, r3
   19138:	strd	r4, [r3, #16]
   1913c:	nop	{0}
   19140:	sub	sp, fp, #28
   19144:	ldrd	r4, [sp]
   19148:	ldrd	r6, [sp, #8]
   1914c:	ldrd	r8, [sp, #16]
   19150:	ldr	fp, [sp, #24]
   19154:	add	sp, sp, #28
   19158:	pop	{pc}		; (ldr pc, [sp], #4)
   1915c:	andeq	r6, r1, r0, ror r6
   19160:	andeq	r6, r1, ip, asr r6
   19164:	strdeq	r3, [r0], -r0
   19168:	andeq	r6, r1, r4, lsr r6
   1916c:	andeq	r6, r1, r0, lsr #12
   19170:	andeq	r6, r1, r8, lsl #12
   19174:	strdeq	r6, [r1], -r4

00019178 <__generate_code_for_main@@Base>:
   19178:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1917c:	strd	r6, [sp, #8]
   19180:	strd	r8, [sp, #16]
   19184:	str	fp, [sp, #24]
   19188:	str	lr, [sp, #28]
   1918c:	add	fp, sp, #28
   19190:	sub	sp, sp, #16
   19194:	str	r0, [fp, #-32]	; 0xffffffe0
   19198:	str	r1, [fp, #-36]	; 0xffffffdc
   1919c:	ldr	ip, [pc, #248]	; 1929c <__generate_code_for_main@@Base+0x124>
   191a0:	add	ip, pc, ip
   191a4:	ldr	r3, [pc, #244]	; 192a0 <__generate_code_for_main@@Base+0x128>
   191a8:	add	r3, pc, r3
   191ac:	ldrd	r2, [r3]
   191b0:	adds	r1, r2, #1
   191b4:	str	r1, [fp, #-44]	; 0xffffffd4
   191b8:	adc	r3, r3, #0
   191bc:	str	r3, [fp, #-40]	; 0xffffffd8
   191c0:	ldr	r3, [pc, #220]	; 192a4 <__generate_code_for_main@@Base+0x12c>
   191c4:	add	r3, pc, r3
   191c8:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   191cc:	strd	r0, [r3]
   191d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   191d4:	ldr	r3, [r3]
   191d8:	cmp	r3, #2
   191dc:	bne	19210 <__generate_code_for_main@@Base+0x98>
   191e0:	ldr	r3, [pc, #192]	; 192a8 <__generate_code_for_main@@Base+0x130>
   191e4:	add	r3, pc, r3
   191e8:	ldrd	r2, [r3, #8]
   191ec:	adds	r8, r2, #1
   191f0:	adc	r9, r3, #0
   191f4:	ldr	r3, [pc, #176]	; 192ac <__generate_code_for_main@@Base+0x134>
   191f8:	add	r3, pc, r3
   191fc:	strd	r8, [r3, #8]
   19200:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19204:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19208:	bl	192c8 <__generate_code_for_function@@Base>
   1920c:	b	19258 <__generate_code_for_main@@Base+0xe0>
   19210:	ldr	r3, [pc, #152]	; 192b0 <__generate_code_for_main@@Base+0x138>
   19214:	ldr	r3, [ip, r3]
   19218:	ldr	r3, [r3]
   1921c:	mov	r2, #46	; 0x2e
   19220:	mov	r1, #1
   19224:	ldr	r0, [pc, #136]	; 192b4 <__generate_code_for_main@@Base+0x13c>
   19228:	add	r0, pc, r0
   1922c:	bl	118dc <fwrite@plt>
   19230:	ldr	r3, [pc, #128]	; 192b8 <__generate_code_for_main@@Base+0x140>
   19234:	add	r3, pc, r3
   19238:	ldrd	r2, [r3, #24]
   1923c:	adds	r6, r2, #1
   19240:	adc	r7, r3, #0
   19244:	ldr	r3, [pc, #112]	; 192bc <__generate_code_for_main@@Base+0x144>
   19248:	add	r3, pc, r3
   1924c:	strd	r6, [r3, #24]
   19250:	mov	r0, #1
   19254:	bl	11948 <exit@plt>
   19258:	ldr	r3, [pc, #96]	; 192c0 <__generate_code_for_main@@Base+0x148>
   1925c:	add	r3, pc, r3
   19260:	ldrd	r2, [r3, #16]
   19264:	adds	r4, r2, #1
   19268:	adc	r5, r3, #0
   1926c:	ldr	r3, [pc, #80]	; 192c4 <__generate_code_for_main@@Base+0x14c>
   19270:	add	r3, pc, r3
   19274:	strd	r4, [r3, #16]
   19278:	nop	{0}
   1927c:	nop	{0}
   19280:	sub	sp, fp, #28
   19284:	ldrd	r4, [sp]
   19288:	ldrd	r6, [sp, #8]
   1928c:	ldrd	r8, [sp, #16]
   19290:	ldr	fp, [sp, #24]
   19294:	add	sp, sp, #28
   19298:	pop	{pc}		; (ldr pc, [sp], #4)
   1929c:	andeq	r4, r1, r8, asr lr
   192a0:	andeq	r6, r1, r0, ror #10
   192a4:	andeq	r6, r1, r4, asr #10
   192a8:	andeq	r6, r1, r4, lsr #10
   192ac:	andeq	r6, r1, r0, lsl r5
   192b0:	andeq	r0, r0, r0, lsr #1
   192b4:	andeq	r3, r0, r8, asr #21
   192b8:	ldrdeq	r6, [r1], -r4
   192bc:	andeq	r6, r1, r0, asr #9
   192c0:	andeq	r6, r1, ip, lsr #9
   192c4:	muleq	r1, r8, r4

000192c8 <__generate_code_for_function@@Base>:
   192c8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   192cc:	strd	r6, [sp, #8]
   192d0:	strd	r8, [sp, #16]
   192d4:	str	fp, [sp, #24]
   192d8:	str	lr, [sp, #28]
   192dc:	add	fp, sp, #28
   192e0:	sub	sp, sp, #8
   192e4:	str	r0, [fp, #-32]	; 0xffffffe0
   192e8:	str	r1, [fp, #-36]	; 0xffffffdc
   192ec:	ldr	r3, [pc, #176]	; 193a4 <__generate_code_for_function@@Base+0xdc>
   192f0:	add	r3, pc, r3
   192f4:	ldrd	r2, [r3]
   192f8:	adds	r8, r2, #1
   192fc:	adc	r9, r3, #0
   19300:	ldr	r3, [pc, #160]	; 193a8 <__generate_code_for_function@@Base+0xe0>
   19304:	add	r3, pc, r3
   19308:	strd	r8, [r3]
   1930c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19310:	ldr	r0, [r3, #4]
   19314:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19318:	ldr	r3, [r3, #8]
   1931c:	mov	r2, r3
   19320:	ldr	r3, [pc, #132]	; 193ac <__generate_code_for_function@@Base+0xe4>
   19324:	add	r3, pc, r3
   19328:	mov	r1, r3
   1932c:	bl	1196c <fprintf@plt>
   19330:	ldr	r3, [pc, #120]	; 193b0 <__generate_code_for_function@@Base+0xe8>
   19334:	add	r3, pc, r3
   19338:	ldrd	r2, [r3, #8]
   1933c:	adds	r6, r2, #1
   19340:	adc	r7, r3, #0
   19344:	ldr	r3, [pc, #104]	; 193b4 <__generate_code_for_function@@Base+0xec>
   19348:	add	r3, pc, r3
   1934c:	strd	r6, [r3, #8]
   19350:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19354:	ldr	r3, [r3, #12]
   19358:	mov	r1, r3
   1935c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19360:	bl	1a2cc <__generate_code_for_body@@Base>
   19364:	ldr	r3, [pc, #76]	; 193b8 <__generate_code_for_function@@Base+0xf0>
   19368:	add	r3, pc, r3
   1936c:	ldrd	r2, [r3, #16]
   19370:	adds	r4, r2, #1
   19374:	adc	r5, r3, #0
   19378:	ldr	r3, [pc, #60]	; 193bc <__generate_code_for_function@@Base+0xf4>
   1937c:	add	r3, pc, r3
   19380:	strd	r4, [r3, #16]
   19384:	nop	{0}
   19388:	sub	sp, fp, #28
   1938c:	ldrd	r4, [sp]
   19390:	ldrd	r6, [sp, #8]
   19394:	ldrd	r8, [sp, #16]
   19398:	ldr	fp, [sp, #24]
   1939c:	add	sp, sp, #28
   193a0:	pop	{pc}		; (ldr pc, [sp], #4)
   193a4:	andeq	r6, r1, r0, lsl #8
   193a8:	andeq	r6, r1, ip, ror #7
   193ac:	strdeq	r3, [r0], -ip
   193b0:			; <UNDEFINED> instruction: 0x000163bc
   193b4:	andeq	r6, r1, r8, lsr #7
   193b8:	andeq	r6, r1, r8, lsl #7
   193bc:	andeq	r6, r1, r4, ror r3

000193c0 <__generate_code_for_if@@Base>:
   193c0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   193c4:	strd	r6, [sp, #8]
   193c8:	strd	r8, [sp, #16]
   193cc:	str	fp, [sp, #24]
   193d0:	str	lr, [sp, #28]
   193d4:	add	fp, sp, #28
   193d8:	sub	sp, sp, #48	; 0x30
   193dc:	str	r0, [fp, #-40]	; 0xffffffd8
   193e0:	str	r1, [fp, #-44]	; 0xffffffd4
   193e4:	ldr	r3, [pc, #400]	; 1957c <__generate_code_for_if@@Base+0x1bc>
   193e8:	add	r3, pc, r3
   193ec:	ldrd	r2, [r3]
   193f0:	adds	r4, r2, #1
   193f4:	adc	r5, r3, #0
   193f8:	ldr	r3, [pc, #384]	; 19580 <__generate_code_for_if@@Base+0x1c0>
   193fc:	add	r3, pc, r3
   19400:	strd	r4, [r3]
   19404:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19408:	ldrd	r2, [r3, #8]
   1940c:	strd	r2, [fp, #-36]	; 0xffffffdc
   19410:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19414:	ldrd	r2, [r3, #8]
   19418:	adds	r6, r2, #1
   1941c:	adc	r7, r3, #0
   19420:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19424:	strd	r6, [r3, #8]
   19428:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1942c:	ldr	r1, [r3, #8]
   19430:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   19434:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19438:	bl	19868 <__generate_code_for_if_expression@@Base>
   1943c:	ldr	r3, [pc, #320]	; 19584 <__generate_code_for_if@@Base+0x1c4>
   19440:	add	r3, pc, r3
   19444:	ldrd	r2, [r3, #8]
   19448:	adds	r1, r2, #1
   1944c:	str	r1, [fp, #-52]	; 0xffffffcc
   19450:	adc	r3, r3, #0
   19454:	str	r3, [fp, #-48]	; 0xffffffd0
   19458:	ldr	r3, [pc, #296]	; 19588 <__generate_code_for_if@@Base+0x1c8>
   1945c:	add	r3, pc, r3
   19460:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   19464:	strd	r0, [r3, #8]
   19468:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1946c:	ldr	r3, [r3, #12]
   19470:	mov	r1, r3
   19474:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19478:	bl	1a2cc <__generate_code_for_body@@Base>
   1947c:	ldr	r3, [pc, #264]	; 1958c <__generate_code_for_if@@Base+0x1cc>
   19480:	add	r3, pc, r3
   19484:	ldrd	r2, [r3, #16]
   19488:	adds	r1, r2, #1
   1948c:	str	r1, [fp, #-60]	; 0xffffffc4
   19490:	adc	r3, r3, #0
   19494:	str	r3, [fp, #-56]	; 0xffffffc8
   19498:	ldr	r3, [pc, #240]	; 19590 <__generate_code_for_if@@Base+0x1d0>
   1949c:	add	r3, pc, r3
   194a0:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   194a4:	strd	r0, [r3, #16]
   194a8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   194ac:	ldr	r0, [r3, #4]
   194b0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   194b4:	ldr	r1, [pc, #216]	; 19594 <__generate_code_for_if@@Base+0x1d4>
   194b8:	add	r1, pc, r1
   194bc:	bl	1196c <fprintf@plt>
   194c0:	ldr	r3, [pc, #208]	; 19598 <__generate_code_for_if@@Base+0x1d8>
   194c4:	add	r3, pc, r3
   194c8:	ldrd	r2, [r3, #24]
   194cc:	adds	r1, r2, #1
   194d0:	str	r1, [fp, #-68]	; 0xffffffbc
   194d4:	adc	r3, r3, #0
   194d8:	str	r3, [fp, #-64]	; 0xffffffc0
   194dc:	ldr	r3, [pc, #184]	; 1959c <__generate_code_for_if@@Base+0x1dc>
   194e0:	add	r3, pc, r3
   194e4:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   194e8:	strd	r0, [r3, #24]
   194ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   194f0:	ldr	r3, [r3, #16]
   194f4:	cmp	r3, #0
   194f8:	beq	1955c <__generate_code_for_if@@Base+0x19c>
   194fc:	ldr	r3, [pc, #156]	; 195a0 <__generate_code_for_if@@Base+0x1e0>
   19500:	add	r3, pc, r3
   19504:	ldrd	r2, [r3, #32]
   19508:	adds	r1, r2, #1
   1950c:	str	r1, [fp, #-76]	; 0xffffffb4
   19510:	adc	r3, r3, #0
   19514:	str	r3, [fp, #-72]	; 0xffffffb8
   19518:	ldr	r3, [pc, #132]	; 195a4 <__generate_code_for_if@@Base+0x1e4>
   1951c:	add	r3, pc, r3
   19520:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   19524:	strd	r0, [r3, #32]
   19528:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1952c:	ldr	r3, [r3, #16]
   19530:	mov	r1, r3
   19534:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19538:	bl	1a2cc <__generate_code_for_body@@Base>
   1953c:	ldr	r3, [pc, #100]	; 195a8 <__generate_code_for_if@@Base+0x1e8>
   19540:	add	r3, pc, r3
   19544:	ldrd	r2, [r3, #40]	; 0x28
   19548:	adds	r8, r2, #1
   1954c:	adc	r9, r3, #0
   19550:	ldr	r3, [pc, #84]	; 195ac <__generate_code_for_if@@Base+0x1ec>
   19554:	add	r3, pc, r3
   19558:	strd	r8, [r3, #40]	; 0x28
   1955c:	nop	{0}
   19560:	sub	sp, fp, #28
   19564:	ldrd	r4, [sp]
   19568:	ldrd	r6, [sp, #8]
   1956c:	ldrd	r8, [sp, #16]
   19570:	ldr	fp, [sp, #24]
   19574:	add	sp, sp, #28
   19578:	pop	{pc}		; (ldr pc, [sp], #4)
   1957c:	ldrdeq	r6, [r1], -r8
   19580:	andeq	r6, r1, r4, asr #5
   19584:	andeq	r6, r1, r0, lsl #5
   19588:	andeq	r6, r1, r4, ror #4
   1958c:	andeq	r6, r1, r0, asr #4
   19590:	andeq	r6, r1, r4, lsr #4
   19594:	andeq	r3, r0, r0, ror r8
   19598:	strdeq	r6, [r1], -ip
   1959c:	andeq	r6, r1, r0, ror #3
   195a0:	andeq	r6, r1, r0, asr #3
   195a4:	andeq	r6, r1, r4, lsr #3
   195a8:	andeq	r6, r1, r0, lsl #3
   195ac:	andeq	r6, r1, ip, ror #2

000195b0 <__generate_code_for_return@@Base>:
   195b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   195b4:	strd	r6, [sp, #8]
   195b8:	strd	r8, [sp, #16]
   195bc:	strd	sl, [sp, #24]
   195c0:	str	lr, [sp, #32]
   195c4:	add	fp, sp, #32
   195c8:	sub	sp, sp, #44	; 0x2c
   195cc:	str	r0, [fp, #-48]	; 0xffffffd0
   195d0:	str	r1, [fp, #-52]	; 0xffffffcc
   195d4:	ldr	sl, [pc, #404]	; 19770 <__generate_code_for_return@@Base+0x1c0>
   195d8:	add	sl, pc, sl
   195dc:	ldr	r3, [pc, #400]	; 19774 <__generate_code_for_return@@Base+0x1c4>
   195e0:	add	r3, pc, r3
   195e4:	ldrd	r2, [r3]
   195e8:	adds	r4, r2, #1
   195ec:	adc	r5, r3, #0
   195f0:	ldr	r3, [pc, #384]	; 19778 <__generate_code_for_return@@Base+0x1c8>
   195f4:	add	r3, pc, r3
   195f8:	strd	r4, [r3]
   195fc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   19600:	ldr	r3, [r3, #8]
   19604:	str	r3, [fp, #-40]	; 0xffffffd8
   19608:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1960c:	ldr	r3, [r3, #4]
   19610:	mov	r2, #9
   19614:	mov	r1, #1
   19618:	ldr	r0, [pc, #348]	; 1977c <__generate_code_for_return@@Base+0x1cc>
   1961c:	add	r0, pc, r0
   19620:	bl	118dc <fwrite@plt>
   19624:	ldr	r3, [pc, #340]	; 19780 <__generate_code_for_return@@Base+0x1d0>
   19628:	add	r3, pc, r3
   1962c:	ldrd	r2, [r3, #8]
   19630:	adds	r1, r2, #1
   19634:	str	r1, [fp, #-60]	; 0xffffffc4
   19638:	adc	r3, r3, #0
   1963c:	str	r3, [fp, #-56]	; 0xffffffc8
   19640:	ldr	r3, [pc, #316]	; 19784 <__generate_code_for_return@@Base+0x1d4>
   19644:	add	r3, pc, r3
   19648:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   1964c:	strd	r0, [r3, #8]
   19650:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19654:	ldr	r3, [r3]
   19658:	cmp	r3, #1
   1965c:	bne	1969c <__generate_code_for_return@@Base+0xec>
   19660:	ldr	r3, [pc, #288]	; 19788 <__generate_code_for_return@@Base+0x1d8>
   19664:	add	r3, pc, r3
   19668:	ldrd	r2, [r3, #16]
   1966c:	adds	r1, r2, #1
   19670:	str	r1, [fp, #-68]	; 0xffffffbc
   19674:	adc	r3, r3, #0
   19678:	str	r3, [fp, #-64]	; 0xffffffc0
   1967c:	ldr	r3, [pc, #264]	; 1978c <__generate_code_for_return@@Base+0x1dc>
   19680:	add	r3, pc, r3
   19684:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   19688:	strd	r0, [r3, #16]
   1968c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   19690:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19694:	bl	197b4 <__generate_code_for_int@@Base>
   19698:	b	196f0 <__generate_code_for_return@@Base+0x140>
   1969c:	ldr	r3, [pc, #236]	; 19790 <__generate_code_for_return@@Base+0x1e0>
   196a0:	ldr	r3, [sl, r3]
   196a4:	ldr	r3, [r3]
   196a8:	mov	r2, #37	; 0x25
   196ac:	mov	r1, #1
   196b0:	ldr	r0, [pc, #220]	; 19794 <__generate_code_for_return@@Base+0x1e4>
   196b4:	add	r0, pc, r0
   196b8:	bl	118dc <fwrite@plt>
   196bc:	ldr	r3, [pc, #212]	; 19798 <__generate_code_for_return@@Base+0x1e8>
   196c0:	add	r3, pc, r3
   196c4:	ldrd	r2, [r3, #32]
   196c8:	adds	r1, r2, #1
   196cc:	str	r1, [fp, #-76]	; 0xffffffb4
   196d0:	adc	r3, r3, #0
   196d4:	str	r3, [fp, #-72]	; 0xffffffb8
   196d8:	ldr	r3, [pc, #188]	; 1979c <__generate_code_for_return@@Base+0x1ec>
   196dc:	add	r3, pc, r3
   196e0:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   196e4:	strd	r0, [r3, #32]
   196e8:	mov	r0, #1
   196ec:	bl	11948 <exit@plt>
   196f0:	ldr	r3, [pc, #168]	; 197a0 <__generate_code_for_return@@Base+0x1f0>
   196f4:	add	r3, pc, r3
   196f8:	ldrd	r2, [r3, #24]
   196fc:	adds	r8, r2, #1
   19700:	adc	r9, r3, #0
   19704:	ldr	r3, [pc, #152]	; 197a4 <__generate_code_for_return@@Base+0x1f4>
   19708:	add	r3, pc, r3
   1970c:	strd	r8, [r3, #24]
   19710:	nop	{0}
   19714:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19718:	ldr	r3, [r3, #4]
   1971c:	mov	r2, #8
   19720:	mov	r1, #1
   19724:	ldr	r0, [pc, #124]	; 197a8 <__generate_code_for_return@@Base+0x1f8>
   19728:	add	r0, pc, r0
   1972c:	bl	118dc <fwrite@plt>
   19730:	ldr	r3, [pc, #116]	; 197ac <__generate_code_for_return@@Base+0x1fc>
   19734:	add	r3, pc, r3
   19738:	ldrd	r2, [r3, #40]	; 0x28
   1973c:	adds	r6, r2, #1
   19740:	adc	r7, r3, #0
   19744:	ldr	r3, [pc, #100]	; 197b0 <__generate_code_for_return@@Base+0x200>
   19748:	add	r3, pc, r3
   1974c:	strd	r6, [r3, #40]	; 0x28
   19750:	nop	{0}
   19754:	sub	sp, fp, #32
   19758:	ldrd	r4, [sp]
   1975c:	ldrd	r6, [sp, #8]
   19760:	ldrd	r8, [sp, #16]
   19764:	ldrd	sl, [sp, #24]
   19768:	add	sp, sp, #32
   1976c:	pop	{pc}		; (ldr pc, [sp], #4)
   19770:	andeq	r4, r1, r0, lsr #20
   19774:	strheq	r6, [r1], -r0
   19778:	muleq	r1, ip, r0
   1977c:	andeq	r3, r0, ip, lsl r7
   19780:	andeq	r6, r1, r8, rrx
   19784:	andeq	r6, r1, ip, asr #32
   19788:	andeq	r6, r1, ip, lsr #32
   1978c:	andeq	r6, r1, r0, lsl r0
   19790:	andeq	r0, r0, r0, lsr #1
   19794:	muleq	r0, r0, r6
   19798:	ldrdeq	r5, [r1], -r0
   1979c:			; <UNDEFINED> instruction: 0x00015fb4
   197a0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   197a4:	andeq	r5, r1, r8, lsl #31
   197a8:	andeq	r3, r0, r4, asr #12
   197ac:	andeq	r5, r1, ip, asr pc
   197b0:	andeq	r5, r1, r8, asr #30

000197b4 <__generate_code_for_int@@Base>:
   197b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   197b8:	strd	r6, [sp, #8]
   197bc:	str	fp, [sp, #16]
   197c0:	str	lr, [sp, #20]
   197c4:	add	fp, sp, #20
   197c8:	sub	sp, sp, #8
   197cc:	str	r0, [fp, #-24]	; 0xffffffe8
   197d0:	str	r1, [fp, #-28]	; 0xffffffe4
   197d4:	ldr	r3, [pc, #120]	; 19854 <__generate_code_for_int@@Base+0xa0>
   197d8:	add	r3, pc, r3
   197dc:	ldrd	r2, [r3]
   197e0:	adds	r6, r2, #1
   197e4:	adc	r7, r3, #0
   197e8:	ldr	r3, [pc, #104]	; 19858 <__generate_code_for_int@@Base+0xa4>
   197ec:	add	r3, pc, r3
   197f0:	strd	r6, [r3]
   197f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   197f8:	ldr	r0, [r3, #4]
   197fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19800:	ldr	r3, [r3, #8]
   19804:	mov	r2, r3
   19808:	ldr	r3, [pc, #76]	; 1985c <__generate_code_for_int@@Base+0xa8>
   1980c:	add	r3, pc, r3
   19810:	mov	r1, r3
   19814:	bl	1196c <fprintf@plt>
   19818:	ldr	r3, [pc, #64]	; 19860 <__generate_code_for_int@@Base+0xac>
   1981c:	add	r3, pc, r3
   19820:	ldrd	r2, [r3, #8]
   19824:	adds	r4, r2, #1
   19828:	adc	r5, r3, #0
   1982c:	ldr	r3, [pc, #48]	; 19864 <__generate_code_for_int@@Base+0xb0>
   19830:	add	r3, pc, r3
   19834:	strd	r4, [r3, #8]
   19838:	nop	{0}
   1983c:	sub	sp, fp, #20
   19840:	ldrd	r4, [sp]
   19844:	ldrd	r6, [sp, #8]
   19848:	ldr	fp, [sp, #16]
   1984c:	add	sp, sp, #20
   19850:	pop	{pc}		; (ldr pc, [sp], #4)
   19854:	andeq	r5, r1, r8, lsr #29
   19858:	muleq	r1, r4, lr
   1985c:	andeq	r3, r0, ip, ror #10
   19860:	andeq	r5, r1, r4, ror #28
   19864:	andeq	r5, r1, r0, asr lr

00019868 <__generate_code_for_if_expression@@Base>:
   19868:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1986c:	strd	r6, [sp, #8]
   19870:	strd	r8, [sp, #16]
   19874:	str	fp, [sp, #24]
   19878:	str	lr, [sp, #28]
   1987c:	add	fp, sp, #28
   19880:	sub	sp, sp, #32
   19884:	str	r0, [fp, #-40]	; 0xffffffd8
   19888:	str	r1, [fp, #-44]	; 0xffffffd4
   1988c:	strd	r2, [fp, #-52]	; 0xffffffcc
   19890:	ldr	r3, [pc, #228]	; 1997c <__generate_code_for_if_expression@@Base+0x114>
   19894:	add	r3, pc, r3
   19898:	ldrd	r2, [r3]
   1989c:	adds	r1, r2, #1
   198a0:	str	r1, [fp, #-60]	; 0xffffffc4
   198a4:	adc	r3, r3, #0
   198a8:	str	r3, [fp, #-56]	; 0xffffffc8
   198ac:	ldr	r3, [pc, #204]	; 19980 <__generate_code_for_if_expression@@Base+0x118>
   198b0:	add	r3, pc, r3
   198b4:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   198b8:	strd	r0, [r3]
   198bc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   198c0:	str	r3, [fp, #-32]	; 0xffffffe0
   198c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   198c8:	ldr	r3, [r3, #16]
   198cc:	cmp	r3, #8
   198d0:	bne	1992c <__generate_code_for_if_expression@@Base+0xc4>
   198d4:	ldr	r3, [pc, #168]	; 19984 <__generate_code_for_if_expression@@Base+0x11c>
   198d8:	add	r3, pc, r3
   198dc:	ldrd	r2, [r3, #8]
   198e0:	adds	r8, r2, #1
   198e4:	adc	r9, r3, #0
   198e8:	ldr	r3, [pc, #152]	; 19988 <__generate_code_for_if_expression@@Base+0x120>
   198ec:	add	r3, pc, r3
   198f0:	strd	r8, [r3, #8]
   198f4:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   198f8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   198fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19900:	bl	1a074 <__generate_code_for_unary_boolean_expression@@Base>
   19904:	nop	{0}
   19908:	ldr	r3, [pc, #124]	; 1998c <__generate_code_for_if_expression@@Base+0x124>
   1990c:	add	r3, pc, r3
   19910:	ldrd	r2, [r3, #16]
   19914:	adds	r6, r2, #1
   19918:	adc	r7, r3, #0
   1991c:	ldr	r3, [pc, #108]	; 19990 <__generate_code_for_if_expression@@Base+0x128>
   19920:	add	r3, pc, r3
   19924:	strd	r6, [r3, #16]
   19928:	b	1995c <__generate_code_for_if_expression@@Base+0xf4>
   1992c:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   19930:	ldr	r1, [fp, #-32]	; 0xffffffe0
   19934:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19938:	bl	1999c <__generate_code_for_binary_boolean_expression@@Base>
   1993c:	ldr	r3, [pc, #80]	; 19994 <__generate_code_for_if_expression@@Base+0x12c>
   19940:	add	r3, pc, r3
   19944:	ldrd	r2, [r3, #24]
   19948:	adds	r4, r2, #1
   1994c:	adc	r5, r3, #0
   19950:	ldr	r3, [pc, #64]	; 19998 <__generate_code_for_if_expression@@Base+0x130>
   19954:	add	r3, pc, r3
   19958:	strd	r4, [r3, #24]
   1995c:	nop	{0}
   19960:	sub	sp, fp, #28
   19964:	ldrd	r4, [sp]
   19968:	ldrd	r6, [sp, #8]
   1996c:	ldrd	r8, [sp, #16]
   19970:	ldr	fp, [sp, #24]
   19974:	add	sp, sp, #28
   19978:	pop	{pc}		; (ldr pc, [sp], #4)
   1997c:	andeq	r5, r1, ip, asr #27
   19980:			; <UNDEFINED> instruction: 0x00015db0
   19984:	andeq	r5, r1, r8, lsl #27
   19988:	andeq	r5, r1, r4, ror sp
   1998c:	andeq	r5, r1, r4, asr sp
   19990:	andeq	r5, r1, r0, asr #26
   19994:	andeq	r5, r1, r0, lsr #26
   19998:	andeq	r5, r1, ip, lsl #26

0001999c <__generate_code_for_binary_boolean_expression@@Base>:
   1999c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   199a0:	strd	r6, [sp, #8]
   199a4:	strd	r8, [sp, #16]
   199a8:	strd	sl, [sp, #24]
   199ac:	str	lr, [sp, #32]
   199b0:	add	fp, sp, #32
   199b4:	sub	sp, sp, #188	; 0xbc
   199b8:	str	r0, [fp, #-48]	; 0xffffffd0
   199bc:	str	r1, [fp, #-52]	; 0xffffffcc
   199c0:	strd	r2, [fp, #-60]	; 0xffffffc4
   199c4:	ldr	sl, [pc, #1472]	; 19f8c <__generate_code_for_binary_boolean_expression@@Base+0x5f0>
   199c8:	add	sl, pc, sl
   199cc:	ldr	r3, [pc, #1468]	; 19f90 <__generate_code_for_binary_boolean_expression@@Base+0x5f4>
   199d0:	add	r3, pc, r3
   199d4:	ldrd	r2, [r3]
   199d8:	adds	r4, r2, #1
   199dc:	adc	r5, r3, #0
   199e0:	ldr	r3, [pc, #1452]	; 19f94 <__generate_code_for_binary_boolean_expression@@Base+0x5f8>
   199e4:	add	r3, pc, r3
   199e8:	strd	r4, [r3]
   199ec:	ldr	r3, [fp, #-52]	; 0xffffffcc
   199f0:	ldr	r3, [r3, #8]
   199f4:	str	r3, [fp, #-40]	; 0xffffffd8
   199f8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   199fc:	ldr	r3, [r3, #12]
   19a00:	str	r3, [fp, #-44]	; 0xffffffd4
   19a04:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19a08:	ldr	r3, [r3, #4]
   19a0c:	mov	r2, #9
   19a10:	mov	r1, #1
   19a14:	ldr	r0, [pc, #1404]	; 19f98 <__generate_code_for_binary_boolean_expression@@Base+0x5fc>
   19a18:	add	r0, pc, r0
   19a1c:	bl	118dc <fwrite@plt>
   19a20:	ldr	r3, [pc, #1396]	; 19f9c <__generate_code_for_binary_boolean_expression@@Base+0x600>
   19a24:	add	r3, pc, r3
   19a28:	ldrd	r2, [r3, #8]
   19a2c:	adds	r6, r2, #1
   19a30:	adc	r7, r3, #0
   19a34:	ldr	r3, [pc, #1380]	; 19fa0 <__generate_code_for_binary_boolean_expression@@Base+0x604>
   19a38:	add	r3, pc, r3
   19a3c:	strd	r6, [r3, #8]
   19a40:	ldr	r1, [fp, #-40]	; 0xffffffd8
   19a44:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19a48:	bl	197b4 <__generate_code_for_int@@Base>
   19a4c:	ldr	r3, [pc, #1360]	; 19fa4 <__generate_code_for_binary_boolean_expression@@Base+0x608>
   19a50:	add	r3, pc, r3
   19a54:	ldrd	r2, [r3, #16]
   19a58:	adds	r8, r2, #1
   19a5c:	adc	r9, r3, #0
   19a60:	ldr	r3, [pc, #1344]	; 19fa8 <__generate_code_for_binary_boolean_expression@@Base+0x60c>
   19a64:	add	r3, pc, r3
   19a68:	strd	r8, [r3, #16]
   19a6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19a70:	ldr	r3, [r3, #4]
   19a74:	mov	r1, r3
   19a78:	mov	r0, #10
   19a7c:	bl	119e4 <fputc@plt>
   19a80:	ldr	r3, [pc, #1316]	; 19fac <__generate_code_for_binary_boolean_expression@@Base+0x610>
   19a84:	add	r3, pc, r3
   19a88:	ldrd	r2, [r3, #24]
   19a8c:	adds	r1, r2, #1
   19a90:	str	r1, [fp, #-68]	; 0xffffffbc
   19a94:	adc	r3, r3, #0
   19a98:	str	r3, [fp, #-64]	; 0xffffffc0
   19a9c:	ldr	r3, [pc, #1292]	; 19fb0 <__generate_code_for_binary_boolean_expression@@Base+0x614>
   19aa0:	add	r3, pc, r3
   19aa4:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   19aa8:	strd	r0, [r3, #24]
   19aac:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19ab0:	ldr	r3, [r3, #4]
   19ab4:	mov	r2, #9
   19ab8:	mov	r1, #1
   19abc:	ldr	r0, [pc, #1264]	; 19fb4 <__generate_code_for_binary_boolean_expression@@Base+0x618>
   19ac0:	add	r0, pc, r0
   19ac4:	bl	118dc <fwrite@plt>
   19ac8:	ldr	r3, [pc, #1256]	; 19fb8 <__generate_code_for_binary_boolean_expression@@Base+0x61c>
   19acc:	add	r3, pc, r3
   19ad0:	ldrd	r2, [r3, #32]
   19ad4:	adds	r1, r2, #1
   19ad8:	str	r1, [fp, #-76]	; 0xffffffb4
   19adc:	adc	r3, r3, #0
   19ae0:	str	r3, [fp, #-72]	; 0xffffffb8
   19ae4:	ldr	r3, [pc, #1232]	; 19fbc <__generate_code_for_binary_boolean_expression@@Base+0x620>
   19ae8:	add	r3, pc, r3
   19aec:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   19af0:	strd	r0, [r3, #32]
   19af4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   19af8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19afc:	bl	197b4 <__generate_code_for_int@@Base>
   19b00:	ldr	r3, [pc, #1208]	; 19fc0 <__generate_code_for_binary_boolean_expression@@Base+0x624>
   19b04:	add	r3, pc, r3
   19b08:	ldrd	r2, [r3, #40]	; 0x28
   19b0c:	adds	r1, r2, #1
   19b10:	str	r1, [fp, #-84]	; 0xffffffac
   19b14:	adc	r3, r3, #0
   19b18:	str	r3, [fp, #-80]	; 0xffffffb0
   19b1c:	ldr	r3, [pc, #1184]	; 19fc4 <__generate_code_for_binary_boolean_expression@@Base+0x628>
   19b20:	add	r3, pc, r3
   19b24:	ldrd	r0, [fp, #-84]	; 0xffffffac
   19b28:	strd	r0, [r3, #40]	; 0x28
   19b2c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19b30:	ldr	r3, [r3, #4]
   19b34:	mov	r1, r3
   19b38:	mov	r0, #10
   19b3c:	bl	119e4 <fputc@plt>
   19b40:	ldr	r3, [pc, #1152]	; 19fc8 <__generate_code_for_binary_boolean_expression@@Base+0x62c>
   19b44:	add	r3, pc, r3
   19b48:	ldrd	r2, [r3, #48]	; 0x30
   19b4c:	adds	r1, r2, #1
   19b50:	str	r1, [fp, #-92]	; 0xffffffa4
   19b54:	adc	r3, r3, #0
   19b58:	str	r3, [fp, #-88]	; 0xffffffa8
   19b5c:	ldr	r3, [pc, #1128]	; 19fcc <__generate_code_for_binary_boolean_expression@@Base+0x630>
   19b60:	add	r3, pc, r3
   19b64:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   19b68:	strd	r0, [r3, #48]	; 0x30
   19b6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19b70:	ldr	r3, [r3, #4]
   19b74:	mov	r2, #12
   19b78:	mov	r1, #1
   19b7c:	ldr	r0, [pc, #1100]	; 19fd0 <__generate_code_for_binary_boolean_expression@@Base+0x634>
   19b80:	add	r0, pc, r0
   19b84:	bl	118dc <fwrite@plt>
   19b88:	ldr	r3, [fp, #-52]	; 0xffffffcc
   19b8c:	ldr	r3, [r3, #16]
   19b90:	cmp	r3, #7
   19b94:	addls	pc, pc, r3, lsl #2
   19b98:	b	19eec <__generate_code_for_binary_boolean_expression@@Base+0x550>
   19b9c:	b	19bbc <__generate_code_for_binary_boolean_expression@@Base+0x220>
   19ba0:	b	19c34 <__generate_code_for_binary_boolean_expression@@Base+0x298>
   19ba4:	b	19cac <__generate_code_for_binary_boolean_expression@@Base+0x310>
   19ba8:	b	19d24 <__generate_code_for_binary_boolean_expression@@Base+0x388>
   19bac:	b	19d9c <__generate_code_for_binary_boolean_expression@@Base+0x400>
   19bb0:	b	19dcc <__generate_code_for_binary_boolean_expression@@Base+0x430>
   19bb4:	b	19dfc <__generate_code_for_binary_boolean_expression@@Base+0x460>
   19bb8:	b	19e74 <__generate_code_for_binary_boolean_expression@@Base+0x4d8>
   19bbc:	ldr	r3, [pc, #1040]	; 19fd4 <__generate_code_for_binary_boolean_expression@@Base+0x638>
   19bc0:	add	r3, pc, r3
   19bc4:	ldrd	r2, [r3, #64]	; 0x40
   19bc8:	adds	r1, r2, #1
   19bcc:	str	r1, [fp, #-108]	; 0xffffff94
   19bd0:	adc	r3, r3, #0
   19bd4:	str	r3, [fp, #-104]	; 0xffffff98
   19bd8:	ldr	r3, [pc, #1016]	; 19fd8 <__generate_code_for_binary_boolean_expression@@Base+0x63c>
   19bdc:	add	r3, pc, r3
   19be0:	ldrd	r0, [fp, #-108]	; 0xffffff94
   19be4:	strd	r0, [r3, #64]	; 0x40
   19be8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19bec:	ldr	r0, [r3, #4]
   19bf0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   19bf4:	ldr	r1, [pc, #992]	; 19fdc <__generate_code_for_binary_boolean_expression@@Base+0x640>
   19bf8:	add	r1, pc, r1
   19bfc:	bl	1196c <fprintf@plt>
   19c00:	nop	{0}
   19c04:	ldr	r3, [pc, #980]	; 19fe0 <__generate_code_for_binary_boolean_expression@@Base+0x644>
   19c08:	add	r3, pc, r3
   19c0c:	ldrd	r2, [r3, #112]	; 0x70
   19c10:	adds	r1, r2, #1
   19c14:	str	r1, [fp, #-156]	; 0xffffff64
   19c18:	adc	r3, r3, #0
   19c1c:	str	r3, [fp, #-152]	; 0xffffff68
   19c20:	ldr	r3, [pc, #956]	; 19fe4 <__generate_code_for_binary_boolean_expression@@Base+0x648>
   19c24:	add	r3, pc, r3
   19c28:	ldrd	r0, [fp, #-156]	; 0xffffff64
   19c2c:	strd	r0, [r3, #112]	; 0x70
   19c30:	b	19f6c <__generate_code_for_binary_boolean_expression@@Base+0x5d0>
   19c34:	ldr	r3, [pc, #940]	; 19fe8 <__generate_code_for_binary_boolean_expression@@Base+0x64c>
   19c38:	add	r3, pc, r3
   19c3c:	ldrd	r2, [r3, #72]	; 0x48
   19c40:	adds	r1, r2, #1
   19c44:	str	r1, [fp, #-116]	; 0xffffff8c
   19c48:	adc	r3, r3, #0
   19c4c:	str	r3, [fp, #-112]	; 0xffffff90
   19c50:	ldr	r3, [pc, #916]	; 19fec <__generate_code_for_binary_boolean_expression@@Base+0x650>
   19c54:	add	r3, pc, r3
   19c58:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   19c5c:	strd	r0, [r3, #72]	; 0x48
   19c60:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19c64:	ldr	r0, [r3, #4]
   19c68:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   19c6c:	ldr	r1, [pc, #892]	; 19ff0 <__generate_code_for_binary_boolean_expression@@Base+0x654>
   19c70:	add	r1, pc, r1
   19c74:	bl	1196c <fprintf@plt>
   19c78:	nop	{0}
   19c7c:	ldr	r3, [pc, #880]	; 19ff4 <__generate_code_for_binary_boolean_expression@@Base+0x658>
   19c80:	add	r3, pc, r3
   19c84:	ldrd	r2, [r3, #120]	; 0x78
   19c88:	adds	r1, r2, #1
   19c8c:	str	r1, [fp, #-164]	; 0xffffff5c
   19c90:	adc	r3, r3, #0
   19c94:	str	r3, [fp, #-160]	; 0xffffff60
   19c98:	ldr	r3, [pc, #856]	; 19ff8 <__generate_code_for_binary_boolean_expression@@Base+0x65c>
   19c9c:	add	r3, pc, r3
   19ca0:	ldrd	r0, [fp, #-164]	; 0xffffff5c
   19ca4:	strd	r0, [r3, #120]	; 0x78
   19ca8:	b	19f6c <__generate_code_for_binary_boolean_expression@@Base+0x5d0>
   19cac:	ldr	r3, [pc, #840]	; 19ffc <__generate_code_for_binary_boolean_expression@@Base+0x660>
   19cb0:	add	r3, pc, r3
   19cb4:	ldrd	r2, [r3, #80]	; 0x50
   19cb8:	adds	r1, r2, #1
   19cbc:	str	r1, [fp, #-124]	; 0xffffff84
   19cc0:	adc	r3, r3, #0
   19cc4:	str	r3, [fp, #-120]	; 0xffffff88
   19cc8:	ldr	r3, [pc, #816]	; 1a000 <__generate_code_for_binary_boolean_expression@@Base+0x664>
   19ccc:	add	r3, pc, r3
   19cd0:	ldrd	r0, [fp, #-124]	; 0xffffff84
   19cd4:	strd	r0, [r3, #80]	; 0x50
   19cd8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19cdc:	ldr	r0, [r3, #4]
   19ce0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   19ce4:	ldr	r1, [pc, #792]	; 1a004 <__generate_code_for_binary_boolean_expression@@Base+0x668>
   19ce8:	add	r1, pc, r1
   19cec:	bl	1196c <fprintf@plt>
   19cf0:	nop	{0}
   19cf4:	ldr	r3, [pc, #780]	; 1a008 <__generate_code_for_binary_boolean_expression@@Base+0x66c>
   19cf8:	add	r3, pc, r3
   19cfc:	ldrd	r2, [r3, #128]	; 0x80
   19d00:	adds	r1, r2, #1
   19d04:	str	r1, [fp, #-172]	; 0xffffff54
   19d08:	adc	r3, r3, #0
   19d0c:	str	r3, [fp, #-168]	; 0xffffff58
   19d10:	ldr	r3, [pc, #756]	; 1a00c <__generate_code_for_binary_boolean_expression@@Base+0x670>
   19d14:	add	r3, pc, r3
   19d18:	ldrd	r0, [fp, #-172]	; 0xffffff54
   19d1c:	strd	r0, [r3, #128]	; 0x80
   19d20:	b	19f6c <__generate_code_for_binary_boolean_expression@@Base+0x5d0>
   19d24:	ldr	r3, [pc, #740]	; 1a010 <__generate_code_for_binary_boolean_expression@@Base+0x674>
   19d28:	add	r3, pc, r3
   19d2c:	ldrd	r2, [r3, #88]	; 0x58
   19d30:	adds	r1, r2, #1
   19d34:	str	r1, [fp, #-132]	; 0xffffff7c
   19d38:	adc	r3, r3, #0
   19d3c:	str	r3, [fp, #-128]	; 0xffffff80
   19d40:	ldr	r3, [pc, #716]	; 1a014 <__generate_code_for_binary_boolean_expression@@Base+0x678>
   19d44:	add	r3, pc, r3
   19d48:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   19d4c:	strd	r0, [r3, #88]	; 0x58
   19d50:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19d54:	ldr	r0, [r3, #4]
   19d58:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   19d5c:	ldr	r1, [pc, #692]	; 1a018 <__generate_code_for_binary_boolean_expression@@Base+0x67c>
   19d60:	add	r1, pc, r1
   19d64:	bl	1196c <fprintf@plt>
   19d68:	nop	{0}
   19d6c:	ldr	r3, [pc, #680]	; 1a01c <__generate_code_for_binary_boolean_expression@@Base+0x680>
   19d70:	add	r3, pc, r3
   19d74:	ldrd	r2, [r3, #136]	; 0x88
   19d78:	adds	r1, r2, #1
   19d7c:	str	r1, [fp, #-180]	; 0xffffff4c
   19d80:	adc	r3, r3, #0
   19d84:	str	r3, [fp, #-176]	; 0xffffff50
   19d88:	ldr	r3, [pc, #656]	; 1a020 <__generate_code_for_binary_boolean_expression@@Base+0x684>
   19d8c:	add	r3, pc, r3
   19d90:	ldrd	r0, [fp, #-180]	; 0xffffff4c
   19d94:	strd	r0, [r3, #136]	; 0x88
   19d98:	b	19f6c <__generate_code_for_binary_boolean_expression@@Base+0x5d0>
   19d9c:	ldr	r3, [pc, #640]	; 1a024 <__generate_code_for_binary_boolean_expression@@Base+0x688>
   19da0:	add	r3, pc, r3
   19da4:	ldrd	r2, [r3, #144]	; 0x90
   19da8:	adds	r1, r2, #1
   19dac:	str	r1, [fp, #-188]	; 0xffffff44
   19db0:	adc	r3, r3, #0
   19db4:	str	r3, [fp, #-184]	; 0xffffff48
   19db8:	ldr	r3, [pc, #616]	; 1a028 <__generate_code_for_binary_boolean_expression@@Base+0x68c>
   19dbc:	add	r3, pc, r3
   19dc0:	ldrd	r0, [fp, #-188]	; 0xffffff44
   19dc4:	strd	r0, [r3, #144]	; 0x90
   19dc8:	b	19f6c <__generate_code_for_binary_boolean_expression@@Base+0x5d0>
   19dcc:	ldr	r3, [pc, #600]	; 1a02c <__generate_code_for_binary_boolean_expression@@Base+0x690>
   19dd0:	add	r3, pc, r3
   19dd4:	ldrd	r2, [r3, #152]	; 0x98
   19dd8:	adds	r1, r2, #1
   19ddc:	str	r1, [fp, #-196]	; 0xffffff3c
   19de0:	adc	r3, r3, #0
   19de4:	str	r3, [fp, #-192]	; 0xffffff40
   19de8:	ldr	r3, [pc, #576]	; 1a030 <__generate_code_for_binary_boolean_expression@@Base+0x694>
   19dec:	add	r3, pc, r3
   19df0:	ldrd	r0, [fp, #-196]	; 0xffffff3c
   19df4:	strd	r0, [r3, #152]	; 0x98
   19df8:	b	19f6c <__generate_code_for_binary_boolean_expression@@Base+0x5d0>
   19dfc:	ldr	r3, [pc, #560]	; 1a034 <__generate_code_for_binary_boolean_expression@@Base+0x698>
   19e00:	add	r3, pc, r3
   19e04:	ldrd	r2, [r3, #96]	; 0x60
   19e08:	adds	r1, r2, #1
   19e0c:	str	r1, [fp, #-140]	; 0xffffff74
   19e10:	adc	r3, r3, #0
   19e14:	str	r3, [fp, #-136]	; 0xffffff78
   19e18:	ldr	r3, [pc, #536]	; 1a038 <__generate_code_for_binary_boolean_expression@@Base+0x69c>
   19e1c:	add	r3, pc, r3
   19e20:	ldrd	r0, [fp, #-140]	; 0xffffff74
   19e24:	strd	r0, [r3, #96]	; 0x60
   19e28:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19e2c:	ldr	r0, [r3, #4]
   19e30:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   19e34:	ldr	r1, [pc, #512]	; 1a03c <__generate_code_for_binary_boolean_expression@@Base+0x6a0>
   19e38:	add	r1, pc, r1
   19e3c:	bl	1196c <fprintf@plt>
   19e40:	nop	{0}
   19e44:	ldr	r3, [pc, #500]	; 1a040 <__generate_code_for_binary_boolean_expression@@Base+0x6a4>
   19e48:	add	r3, pc, r3
   19e4c:	ldrd	r2, [r3, #160]	; 0xa0
   19e50:	adds	r1, r2, #1
   19e54:	str	r1, [fp, #-204]	; 0xffffff34
   19e58:	adc	r3, r3, #0
   19e5c:	str	r3, [fp, #-200]	; 0xffffff38
   19e60:	ldr	r3, [pc, #476]	; 1a044 <__generate_code_for_binary_boolean_expression@@Base+0x6a8>
   19e64:	add	r3, pc, r3
   19e68:	ldrd	r0, [fp, #-204]	; 0xffffff34
   19e6c:	strd	r0, [r3, #160]	; 0xa0
   19e70:	b	19f6c <__generate_code_for_binary_boolean_expression@@Base+0x5d0>
   19e74:	ldr	r3, [pc, #460]	; 1a048 <__generate_code_for_binary_boolean_expression@@Base+0x6ac>
   19e78:	add	r3, pc, r3
   19e7c:	ldrd	r2, [r3, #104]	; 0x68
   19e80:	adds	r1, r2, #1
   19e84:	str	r1, [fp, #-148]	; 0xffffff6c
   19e88:	adc	r3, r3, #0
   19e8c:	str	r3, [fp, #-144]	; 0xffffff70
   19e90:	ldr	r3, [pc, #436]	; 1a04c <__generate_code_for_binary_boolean_expression@@Base+0x6b0>
   19e94:	add	r3, pc, r3
   19e98:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   19e9c:	strd	r0, [r3, #104]	; 0x68
   19ea0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19ea4:	ldr	r0, [r3, #4]
   19ea8:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   19eac:	ldr	r1, [pc, #412]	; 1a050 <__generate_code_for_binary_boolean_expression@@Base+0x6b4>
   19eb0:	add	r1, pc, r1
   19eb4:	bl	1196c <fprintf@plt>
   19eb8:	nop	{0}
   19ebc:	ldr	r3, [pc, #400]	; 1a054 <__generate_code_for_binary_boolean_expression@@Base+0x6b8>
   19ec0:	add	r3, pc, r3
   19ec4:	ldrd	r2, [r3, #168]	; 0xa8
   19ec8:	adds	r1, r2, #1
   19ecc:	str	r1, [fp, #-212]	; 0xffffff2c
   19ed0:	adc	r3, r3, #0
   19ed4:	str	r3, [fp, #-208]	; 0xffffff30
   19ed8:	ldr	r3, [pc, #376]	; 1a058 <__generate_code_for_binary_boolean_expression@@Base+0x6bc>
   19edc:	add	r3, pc, r3
   19ee0:	ldrd	r0, [fp, #-212]	; 0xffffff2c
   19ee4:	strd	r0, [r3, #168]	; 0xa8
   19ee8:	b	19f6c <__generate_code_for_binary_boolean_expression@@Base+0x5d0>
   19eec:	ldr	r3, [pc, #360]	; 1a05c <__generate_code_for_binary_boolean_expression@@Base+0x6c0>
   19ef0:	add	r3, pc, r3
   19ef4:	ldrd	r2, [r3, #56]	; 0x38
   19ef8:	adds	r1, r2, #1
   19efc:	str	r1, [fp, #-100]	; 0xffffff9c
   19f00:	adc	r3, r3, #0
   19f04:	str	r3, [fp, #-96]	; 0xffffffa0
   19f08:	ldr	r3, [pc, #336]	; 1a060 <__generate_code_for_binary_boolean_expression@@Base+0x6c4>
   19f0c:	add	r3, pc, r3
   19f10:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   19f14:	strd	r0, [r3, #56]	; 0x38
   19f18:	ldr	r3, [pc, #324]	; 1a064 <__generate_code_for_binary_boolean_expression@@Base+0x6c8>
   19f1c:	ldr	r3, [sl, r3]
   19f20:	ldr	r3, [r3]
   19f24:	mov	r2, #31
   19f28:	mov	r1, #1
   19f2c:	ldr	r0, [pc, #308]	; 1a068 <__generate_code_for_binary_boolean_expression@@Base+0x6cc>
   19f30:	add	r0, pc, r0
   19f34:	bl	118dc <fwrite@plt>
   19f38:	ldr	r3, [pc, #300]	; 1a06c <__generate_code_for_binary_boolean_expression@@Base+0x6d0>
   19f3c:	add	r3, pc, r3
   19f40:	ldrd	r2, [r3, #176]	; 0xb0
   19f44:	adds	r1, r2, #1
   19f48:	str	r1, [fp, #-220]	; 0xffffff24
   19f4c:	adc	r3, r3, #0
   19f50:	str	r3, [fp, #-216]	; 0xffffff28
   19f54:	ldr	r3, [pc, #276]	; 1a070 <__generate_code_for_binary_boolean_expression@@Base+0x6d4>
   19f58:	add	r3, pc, r3
   19f5c:	ldrd	r0, [fp, #-220]	; 0xffffff24
   19f60:	strd	r0, [r3, #176]	; 0xb0
   19f64:	mov	r0, #1
   19f68:	bl	11948 <exit@plt>
   19f6c:	nop	{0}
   19f70:	sub	sp, fp, #32
   19f74:	ldrd	r4, [sp]
   19f78:	ldrd	r6, [sp, #8]
   19f7c:	ldrd	r8, [sp, #16]
   19f80:	ldrd	sl, [sp, #24]
   19f84:	add	sp, sp, #32
   19f88:	pop	{pc}		; (ldr pc, [sp], #4)
   19f8c:	andeq	r4, r1, r0, lsr r6
   19f90:	ldrdeq	r5, [r1], -r8
   19f94:	andeq	r5, r1, r4, asr #23
   19f98:	andeq	r3, r0, r0, lsr #6
   19f9c:	andeq	r5, r1, r4, lsl #23
   19fa0:	andeq	r5, r1, r0, ror fp
   19fa4:	andeq	r5, r1, r8, asr fp
   19fa8:	andeq	r5, r1, r4, asr #22
   19fac:	andeq	r5, r1, r4, lsr #22
   19fb0:	andeq	r5, r1, r8, lsl #22
   19fb4:			; <UNDEFINED> instruction: 0x000032bc
   19fb8:	ldrdeq	r5, [r1], -ip
   19fbc:	andeq	r5, r1, r0, asr #21
   19fc0:	andeq	r5, r1, r4, lsr #21
   19fc4:	andeq	r5, r1, r8, lsl #21
   19fc8:	andeq	r5, r1, r4, ror #20
   19fcc:	andeq	r5, r1, r8, asr #20
   19fd0:	andeq	r3, r0, r8, lsl #4
   19fd4:	andeq	r5, r1, r8, ror #19
   19fd8:	andeq	r5, r1, ip, asr #19
   19fdc:	andeq	r3, r0, r0, lsr #3
   19fe0:	andeq	r5, r1, r0, lsr #19
   19fe4:	andeq	r5, r1, r4, lsl #19
   19fe8:	andeq	r5, r1, r0, ror r9
   19fec:	andeq	r5, r1, r4, asr r9
   19ff0:	andeq	r3, r0, ip, lsr r1
   19ff4:	andeq	r5, r1, r8, lsr #18
   19ff8:	andeq	r5, r1, ip, lsl #18
   19ffc:	strdeq	r5, [r1], -r8
   1a000:	ldrdeq	r5, [r1], -ip
   1a004:	ldrdeq	r3, [r0], -r8
   1a008:			; <UNDEFINED> instruction: 0x000158b0
   1a00c:	muleq	r1, r4, r8
   1a010:	andeq	r5, r1, r0, lsl #17
   1a014:	andeq	r5, r1, r4, ror #16
   1a018:	andeq	r3, r0, r4, ror r0
   1a01c:	andeq	r5, r1, r8, lsr r8
   1a020:	andeq	r5, r1, ip, lsl r8
   1a024:	andeq	r5, r1, r8, lsl #16
   1a028:	andeq	r5, r1, ip, ror #15
   1a02c:	ldrdeq	r5, [r1], -r8
   1a030:			; <UNDEFINED> instruction: 0x000157bc
   1a034:	andeq	r5, r1, r8, lsr #15
   1a038:	andeq	r5, r1, ip, lsl #15
   1a03c:			; <UNDEFINED> instruction: 0x00002fb0
   1a040:	andeq	r5, r1, r0, ror #14
   1a044:	andeq	r5, r1, r4, asr #14
   1a048:	andeq	r5, r1, r0, lsr r7
   1a04c:	andeq	r5, r1, r4, lsl r7
   1a050:	andeq	r2, r0, ip, asr #30
   1a054:	andeq	r5, r1, r8, ror #13
   1a058:	andeq	r5, r1, ip, asr #13
   1a05c:			; <UNDEFINED> instruction: 0x000156b8
   1a060:	muleq	r1, ip, r6
   1a064:	andeq	r0, r0, r0, lsr #1
   1a068:	andeq	r2, r0, r0, ror #29
   1a06c:	andeq	r5, r1, ip, ror #12
   1a070:	andeq	r5, r1, r0, asr r6

0001a074 <__generate_code_for_unary_boolean_expression@@Base>:
   1a074:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a078:	strd	r6, [sp, #8]
   1a07c:	strd	r8, [sp, #16]
   1a080:	strd	sl, [sp, #24]
   1a084:	str	lr, [sp, #32]
   1a088:	add	fp, sp, #32
   1a08c:	sub	sp, sp, #60	; 0x3c
   1a090:	str	r0, [fp, #-48]	; 0xffffffd0
   1a094:	str	r1, [fp, #-52]	; 0xffffffcc
   1a098:	strd	r2, [fp, #-60]	; 0xffffffc4
   1a09c:	ldr	sl, [pc, #472]	; 1a27c <__generate_code_for_unary_boolean_expression@@Base+0x208>
   1a0a0:	add	sl, pc, sl
   1a0a4:	ldr	r3, [pc, #468]	; 1a280 <__generate_code_for_unary_boolean_expression@@Base+0x20c>
   1a0a8:	add	r3, pc, r3
   1a0ac:	ldrd	r2, [r3]
   1a0b0:	adds	r4, r2, #1
   1a0b4:	adc	r5, r3, #0
   1a0b8:	ldr	r3, [pc, #452]	; 1a284 <__generate_code_for_unary_boolean_expression@@Base+0x210>
   1a0bc:	add	r3, pc, r3
   1a0c0:	strd	r4, [r3]
   1a0c4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1a0c8:	ldr	r3, [r3, #8]
   1a0cc:	str	r3, [fp, #-40]	; 0xffffffd8
   1a0d0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a0d4:	ldr	r3, [r3, #4]
   1a0d8:	mov	r2, #11
   1a0dc:	mov	r1, #1
   1a0e0:	ldr	r0, [pc, #416]	; 1a288 <__generate_code_for_unary_boolean_expression@@Base+0x214>
   1a0e4:	add	r0, pc, r0
   1a0e8:	bl	118dc <fwrite@plt>
   1a0ec:	ldr	r3, [pc, #408]	; 1a28c <__generate_code_for_unary_boolean_expression@@Base+0x218>
   1a0f0:	add	r3, pc, r3
   1a0f4:	ldrd	r2, [r3, #8]
   1a0f8:	adds	r6, r2, #1
   1a0fc:	adc	r7, r3, #0
   1a100:	ldr	r3, [pc, #392]	; 1a290 <__generate_code_for_unary_boolean_expression@@Base+0x21c>
   1a104:	add	r3, pc, r3
   1a108:	strd	r6, [r3, #8]
   1a10c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a110:	ldr	r3, [r3, #4]
   1a114:	mov	r2, #9
   1a118:	mov	r1, #1
   1a11c:	ldr	r0, [pc, #368]	; 1a294 <__generate_code_for_unary_boolean_expression@@Base+0x220>
   1a120:	add	r0, pc, r0
   1a124:	bl	118dc <fwrite@plt>
   1a128:	ldr	r3, [pc, #360]	; 1a298 <__generate_code_for_unary_boolean_expression@@Base+0x224>
   1a12c:	add	r3, pc, r3
   1a130:	ldrd	r2, [r3, #16]
   1a134:	adds	r1, r2, #1
   1a138:	str	r1, [fp, #-68]	; 0xffffffbc
   1a13c:	adc	r3, r3, #0
   1a140:	str	r3, [fp, #-64]	; 0xffffffc0
   1a144:	ldr	r3, [pc, #336]	; 1a29c <__generate_code_for_unary_boolean_expression@@Base+0x228>
   1a148:	add	r3, pc, r3
   1a14c:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   1a150:	strd	r0, [r3, #16]
   1a154:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1a158:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1a15c:	bl	197b4 <__generate_code_for_int@@Base>
   1a160:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1a164:	ldr	r3, [r3, #16]
   1a168:	cmp	r3, #8
   1a16c:	bne	1a1b8 <__generate_code_for_unary_boolean_expression@@Base+0x144>
   1a170:	ldr	r3, [pc, #296]	; 1a2a0 <__generate_code_for_unary_boolean_expression@@Base+0x22c>
   1a174:	add	r3, pc, r3
   1a178:	ldrd	r2, [r3, #32]
   1a17c:	adds	r1, r2, #1
   1a180:	str	r1, [fp, #-84]	; 0xffffffac
   1a184:	adc	r3, r3, #0
   1a188:	str	r3, [fp, #-80]	; 0xffffffb0
   1a18c:	ldr	r3, [pc, #272]	; 1a2a4 <__generate_code_for_unary_boolean_expression@@Base+0x230>
   1a190:	add	r3, pc, r3
   1a194:	ldrd	r0, [fp, #-84]	; 0xffffffac
   1a198:	strd	r0, [r3, #32]
   1a19c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a1a0:	ldr	r0, [r3, #4]
   1a1a4:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   1a1a8:	ldr	r1, [pc, #248]	; 1a2a8 <__generate_code_for_unary_boolean_expression@@Base+0x234>
   1a1ac:	add	r1, pc, r1
   1a1b0:	bl	1196c <fprintf@plt>
   1a1b4:	b	1a238 <__generate_code_for_unary_boolean_expression@@Base+0x1c4>
   1a1b8:	ldr	r3, [pc, #236]	; 1a2ac <__generate_code_for_unary_boolean_expression@@Base+0x238>
   1a1bc:	add	r3, pc, r3
   1a1c0:	ldrd	r2, [r3, #24]
   1a1c4:	adds	r1, r2, #1
   1a1c8:	str	r1, [fp, #-76]	; 0xffffffb4
   1a1cc:	adc	r3, r3, #0
   1a1d0:	str	r3, [fp, #-72]	; 0xffffffb8
   1a1d4:	ldr	r3, [pc, #212]	; 1a2b0 <__generate_code_for_unary_boolean_expression@@Base+0x23c>
   1a1d8:	add	r3, pc, r3
   1a1dc:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   1a1e0:	strd	r0, [r3, #24]
   1a1e4:	ldr	r3, [pc, #200]	; 1a2b4 <__generate_code_for_unary_boolean_expression@@Base+0x240>
   1a1e8:	ldr	r3, [sl, r3]
   1a1ec:	ldr	r3, [r3]
   1a1f0:	mov	r2, #31
   1a1f4:	mov	r1, #1
   1a1f8:	ldr	r0, [pc, #184]	; 1a2b8 <__generate_code_for_unary_boolean_expression@@Base+0x244>
   1a1fc:	add	r0, pc, r0
   1a200:	bl	118dc <fwrite@plt>
   1a204:	ldr	r3, [pc, #176]	; 1a2bc <__generate_code_for_unary_boolean_expression@@Base+0x248>
   1a208:	add	r3, pc, r3
   1a20c:	ldrd	r2, [r3, #48]	; 0x30
   1a210:	adds	r1, r2, #1
   1a214:	str	r1, [fp, #-92]	; 0xffffffa4
   1a218:	adc	r3, r3, #0
   1a21c:	str	r3, [fp, #-88]	; 0xffffffa8
   1a220:	ldr	r3, [pc, #152]	; 1a2c0 <__generate_code_for_unary_boolean_expression@@Base+0x24c>
   1a224:	add	r3, pc, r3
   1a228:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   1a22c:	strd	r0, [r3, #48]	; 0x30
   1a230:	mov	r0, #1
   1a234:	bl	11948 <exit@plt>
   1a238:	ldr	r3, [pc, #132]	; 1a2c4 <__generate_code_for_unary_boolean_expression@@Base+0x250>
   1a23c:	add	r3, pc, r3
   1a240:	ldrd	r2, [r3, #40]	; 0x28
   1a244:	adds	r8, r2, #1
   1a248:	adc	r9, r3, #0
   1a24c:	ldr	r3, [pc, #116]	; 1a2c8 <__generate_code_for_unary_boolean_expression@@Base+0x254>
   1a250:	add	r3, pc, r3
   1a254:	strd	r8, [r3, #40]	; 0x28
   1a258:	nop	{0}
   1a25c:	nop	{0}
   1a260:	sub	sp, fp, #32
   1a264:	ldrd	r4, [sp]
   1a268:	ldrd	r6, [sp, #8]
   1a26c:	ldrd	r8, [sp, #16]
   1a270:	ldrd	sl, [sp, #24]
   1a274:	add	sp, sp, #32
   1a278:	pop	{pc}		; (ldr pc, [sp], #4)
   1a27c:	andeq	r3, r1, r8, asr pc
   1a280:	andeq	r5, r1, r8, asr #9
   1a284:			; <UNDEFINED> instruction: 0x000154b4
   1a288:	andeq	r2, r0, ip, asr #26
   1a28c:	andeq	r5, r1, r0, lsl #9
   1a290:	andeq	r5, r1, ip, ror #8
   1a294:	andeq	r2, r0, ip, asr ip
   1a298:	andeq	r5, r1, r4, asr #8
   1a29c:	andeq	r5, r1, r8, lsr #8
   1a2a0:	strdeq	r5, [r1], -ip
   1a2a4:	andeq	r5, r1, r0, ror #7
   1a2a8:	andeq	r2, r0, r0, lsl #24
   1a2ac:			; <UNDEFINED> instruction: 0x000153b4
   1a2b0:	muleq	r1, r8, r3
   1a2b4:	andeq	r0, r0, r0, lsr #1
   1a2b8:	andeq	r2, r0, r4, lsl ip
   1a2bc:	andeq	r5, r1, r8, ror #6
   1a2c0:	andeq	r5, r1, ip, asr #6
   1a2c4:	andeq	r5, r1, r4, lsr r3
   1a2c8:	andeq	r5, r1, r0, lsr #6

0001a2cc <__generate_code_for_body@@Base>:
   1a2cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a2d0:	strd	r6, [sp, #8]
   1a2d4:	strd	r8, [sp, #16]
   1a2d8:	strd	sl, [sp, #24]
   1a2dc:	str	lr, [sp, #32]
   1a2e0:	add	fp, sp, #32
   1a2e4:	sub	sp, sp, #52	; 0x34
   1a2e8:	str	r0, [fp, #-48]	; 0xffffffd0
   1a2ec:	str	r1, [fp, #-52]	; 0xffffffcc
   1a2f0:	ldr	sl, [pc, #456]	; 1a4c0 <__generate_code_for_body@@Base+0x1f4>
   1a2f4:	add	sl, pc, sl
   1a2f8:	ldr	r3, [pc, #452]	; 1a4c4 <__generate_code_for_body@@Base+0x1f8>
   1a2fc:	add	r3, pc, r3
   1a300:	ldrd	r2, [r3]
   1a304:	adds	r4, r2, #1
   1a308:	adc	r5, r3, #0
   1a30c:	ldr	r3, [pc, #436]	; 1a4c8 <__generate_code_for_body@@Base+0x1fc>
   1a310:	add	r3, pc, r3
   1a314:	strd	r4, [r3]
   1a318:	mov	r3, #0
   1a31c:	str	r3, [fp, #-40]	; 0xffffffd8
   1a320:	b	1a494 <__generate_code_for_body@@Base+0x1c8>
   1a324:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1a328:	str	r3, [fp, #-40]	; 0xffffffd8
   1a32c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1a330:	ldr	r3, [r3, #4]
   1a334:	str	r3, [fp, #-52]	; 0xffffffcc
   1a338:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a33c:	ldr	r3, [r3]
   1a340:	cmp	r3, #3
   1a344:	beq	1a354 <__generate_code_for_body@@Base+0x88>
   1a348:	cmp	r3, #4
   1a34c:	beq	1a3b4 <__generate_code_for_body@@Base+0xe8>
   1a350:	b	1a420 <__generate_code_for_body@@Base+0x154>
   1a354:	ldr	r3, [pc, #368]	; 1a4cc <__generate_code_for_body@@Base+0x200>
   1a358:	add	r3, pc, r3
   1a35c:	ldrd	r2, [r3, #16]
   1a360:	adds	r8, r2, #1
   1a364:	adc	r9, r3, #0
   1a368:	ldr	r3, [pc, #352]	; 1a4d0 <__generate_code_for_body@@Base+0x204>
   1a36c:	add	r3, pc, r3
   1a370:	strd	r8, [r3, #16]
   1a374:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1a378:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1a37c:	bl	195b0 <__generate_code_for_return@@Base>
   1a380:	nop	{0}
   1a384:	ldr	r3, [pc, #328]	; 1a4d4 <__generate_code_for_body@@Base+0x208>
   1a388:	add	r3, pc, r3
   1a38c:	ldrd	r2, [r3, #32]
   1a390:	adds	r1, r2, #1
   1a394:	str	r1, [fp, #-68]	; 0xffffffbc
   1a398:	adc	r3, r3, #0
   1a39c:	str	r3, [fp, #-64]	; 0xffffffc0
   1a3a0:	ldr	r3, [pc, #304]	; 1a4d8 <__generate_code_for_body@@Base+0x20c>
   1a3a4:	add	r3, pc, r3
   1a3a8:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   1a3ac:	strd	r0, [r3, #32]
   1a3b0:	b	1a494 <__generate_code_for_body@@Base+0x1c8>
   1a3b4:	ldr	r3, [pc, #288]	; 1a4dc <__generate_code_for_body@@Base+0x210>
   1a3b8:	add	r3, pc, r3
   1a3bc:	ldrd	r2, [r3, #24]
   1a3c0:	adds	r1, r2, #1
   1a3c4:	str	r1, [fp, #-60]	; 0xffffffc4
   1a3c8:	adc	r3, r3, #0
   1a3cc:	str	r3, [fp, #-56]	; 0xffffffc8
   1a3d0:	ldr	r3, [pc, #264]	; 1a4e0 <__generate_code_for_body@@Base+0x214>
   1a3d4:	add	r3, pc, r3
   1a3d8:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   1a3dc:	strd	r0, [r3, #24]
   1a3e0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1a3e4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1a3e8:	bl	193c0 <__generate_code_for_if@@Base>
   1a3ec:	nop	{0}
   1a3f0:	ldr	r3, [pc, #236]	; 1a4e4 <__generate_code_for_body@@Base+0x218>
   1a3f4:	add	r3, pc, r3
   1a3f8:	ldrd	r2, [r3, #40]	; 0x28
   1a3fc:	adds	r1, r2, #1
   1a400:	str	r1, [fp, #-76]	; 0xffffffb4
   1a404:	adc	r3, r3, #0
   1a408:	str	r3, [fp, #-72]	; 0xffffffb8
   1a40c:	ldr	r3, [pc, #212]	; 1a4e8 <__generate_code_for_body@@Base+0x21c>
   1a410:	add	r3, pc, r3
   1a414:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   1a418:	strd	r0, [r3, #40]	; 0x28
   1a41c:	b	1a494 <__generate_code_for_body@@Base+0x1c8>
   1a420:	ldr	r3, [pc, #196]	; 1a4ec <__generate_code_for_body@@Base+0x220>
   1a424:	add	r3, pc, r3
   1a428:	ldrd	r2, [r3, #8]
   1a42c:	adds	r6, r2, #1
   1a430:	adc	r7, r3, #0
   1a434:	ldr	r3, [pc, #180]	; 1a4f0 <__generate_code_for_body@@Base+0x224>
   1a438:	add	r3, pc, r3
   1a43c:	strd	r6, [r3, #8]
   1a440:	ldr	r3, [pc, #172]	; 1a4f4 <__generate_code_for_body@@Base+0x228>
   1a444:	ldr	r3, [sl, r3]
   1a448:	ldr	r3, [r3]
   1a44c:	mov	r2, #52	; 0x34
   1a450:	mov	r1, #1
   1a454:	ldr	r0, [pc, #156]	; 1a4f8 <__generate_code_for_body@@Base+0x22c>
   1a458:	add	r0, pc, r0
   1a45c:	bl	118dc <fwrite@plt>
   1a460:	ldr	r3, [pc, #148]	; 1a4fc <__generate_code_for_body@@Base+0x230>
   1a464:	add	r3, pc, r3
   1a468:	ldrd	r2, [r3, #48]	; 0x30
   1a46c:	adds	r1, r2, #1
   1a470:	str	r1, [fp, #-84]	; 0xffffffac
   1a474:	adc	r3, r3, #0
   1a478:	str	r3, [fp, #-80]	; 0xffffffb0
   1a47c:	ldr	r3, [pc, #124]	; 1a500 <__generate_code_for_body@@Base+0x234>
   1a480:	add	r3, pc, r3
   1a484:	ldrd	r0, [fp, #-84]	; 0xffffffac
   1a488:	strd	r0, [r3, #48]	; 0x30
   1a48c:	mov	r0, #1
   1a490:	bl	11948 <exit@plt>
   1a494:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1a498:	cmp	r3, #0
   1a49c:	bne	1a324 <__generate_code_for_body@@Base+0x58>
   1a4a0:	nop	{0}
   1a4a4:	sub	sp, fp, #32
   1a4a8:	ldrd	r4, [sp]
   1a4ac:	ldrd	r6, [sp, #8]
   1a4b0:	ldrd	r8, [sp, #16]
   1a4b4:	ldrd	sl, [sp, #24]
   1a4b8:	add	sp, sp, #32
   1a4bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4c0:	andeq	r3, r1, r4, lsl #26
   1a4c4:	andeq	r5, r1, ip, lsr r2
   1a4c8:	andeq	r5, r1, r8, lsr #4
   1a4cc:	andeq	r5, r1, r0, ror #3
   1a4d0:	andeq	r5, r1, ip, asr #3
   1a4d4:			; <UNDEFINED> instruction: 0x000151b0
   1a4d8:	muleq	r1, r4, r1
   1a4dc:	andeq	r5, r1, r0, lsl #3
   1a4e0:	andeq	r5, r1, r4, ror #2
   1a4e4:	andeq	r5, r1, r4, asr #2
   1a4e8:	andeq	r5, r1, r8, lsr #2
   1a4ec:	andeq	r5, r1, r4, lsl r1
   1a4f0:	andeq	r5, r1, r0, lsl #2
   1a4f4:	andeq	r0, r0, r0, lsr #1
   1a4f8:	andeq	r2, r0, r4, ror #19
   1a4fc:	ldrdeq	r5, [r1], -r4
   1a500:	strheq	r5, [r1], -r8
   1a504:	str	fp, [sp, #-8]!
   1a508:	str	lr, [sp, #4]
   1a50c:	add	fp, sp, #4
   1a510:	ldr	r3, [pc, #24]	; 1a530 <__generate_code_for_body@@Base+0x264>
   1a514:	add	r3, pc, r3
   1a518:	mov	r0, r3
   1a51c:	bl	1c574 <__gcov_sort_n_vals@@Base+0x4a0>
   1a520:	sub	sp, fp, #4
   1a524:	ldr	fp, [sp]
   1a528:	add	sp, sp, #4
   1a52c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a530:	andeq	r4, r1, ip, lsr r5
   1a534:	str	fp, [sp, #-8]!
   1a538:	str	lr, [sp, #4]
   1a53c:	add	fp, sp, #4
   1a540:	bl	1c504 <__gcov_sort_n_vals@@Base+0x430>
   1a544:	sub	sp, fp, #4
   1a548:	ldr	fp, [sp]
   1a54c:	add	sp, sp, #4
   1a550:	pop	{pc}		; (ldr pc, [sp], #4)
   1a554:	b	1b7f8 <__generate_code_for_body@@Base+0x152c>
   1a558:	push	{r4, r5, r6, r7, r8, lr}
   1a55c:	subs	r5, r1, #0
   1a560:	popeq	{r4, r5, r6, r7, r8, pc}
   1a564:	mov	r4, r0
   1a568:	bl	1a554 <__generate_code_for_body@@Base+0x288>
   1a56c:	ldr	r3, [r4]
   1a570:	ldr	r2, [r4, #4]
   1a574:	adds	r6, r3, r0
   1a578:	adc	r7, r2, r1
   1a57c:	subs	r5, r5, #1
   1a580:	strd	r6, [r4], #8
   1a584:	bne	1a568 <__generate_code_for_body@@Base+0x29c>
   1a588:	pop	{r4, r5, r6, r7, r8, pc}
   1a58c:	ldr	r3, [pc, #20]	; 1a5a8 <__generate_code_for_body@@Base+0x2dc>
   1a590:	ldr	r2, [pc, #20]	; 1a5ac <__generate_code_for_body@@Base+0x2e0>
   1a594:	add	r3, pc, r3
   1a598:	ldr	r3, [r3, r2]
   1a59c:	ldmib	r3, {r0, r3}
   1a5a0:	add	r0, r0, r3
   1a5a4:	bx	lr
   1a5a8:	andeq	r3, r1, r4, ror #20
   1a5ac:	andeq	r0, r0, ip, lsr #1
   1a5b0:	ldr	r3, [pc, #28]	; 1a5d4 <__generate_code_for_body@@Base+0x308>
   1a5b4:	ldr	r2, [pc, #28]	; 1a5d8 <__generate_code_for_body@@Base+0x30c>
   1a5b8:	add	r3, pc, r3
   1a5bc:	ldr	r3, [r3, r2]
   1a5c0:	ldr	r2, [r3]
   1a5c4:	cmp	r2, #0
   1a5c8:	ldrne	r0, [r3, #20]
   1a5cc:	moveq	r0, #1
   1a5d0:	bx	lr
   1a5d4:	andeq	r3, r1, r0, asr #20
   1a5d8:	andeq	r0, r0, ip, lsr #1
   1a5dc:	bx	lr
   1a5e0:	ldr	ip, [pc, #32]	; 1a608 <__generate_code_for_body@@Base+0x33c>
   1a5e4:	mov	r3, #32
   1a5e8:	teq	r0, r1
   1a5ec:	movmi	r2, ip
   1a5f0:	movpl	r2, #0
   1a5f4:	subs	r3, r3, #1
   1a5f8:	lsl	r1, r1, #1
   1a5fc:	eor	r0, r2, r0, lsl #1
   1a600:	bne	1a5e8 <__generate_code_for_body@@Base+0x31c>
   1a604:	bx	lr
   1a608:	strbeq	r1, [r1], #3511	; 0xdb7
   1a60c:	ldr	r2, [pc, #60]	; 1a650 <__generate_code_for_body@@Base+0x384>
   1a610:	ldr	r3, [pc, #60]	; 1a654 <__generate_code_for_body@@Base+0x388>
   1a614:	add	r2, pc, r2
   1a618:	push	{r4, lr}
   1a61c:	ldr	r4, [r2, r3]
   1a620:	ldr	r0, [r4]
   1a624:	cmp	r0, #0
   1a628:	popeq	{r4, pc}
   1a62c:	ldr	r3, [pc, #36]	; 1a658 <__generate_code_for_body@@Base+0x38c>
   1a630:	ldr	r3, [r2, r3]
   1a634:	ldr	r3, [r3]
   1a638:	cmp	r0, r3
   1a63c:	popeq	{r4, pc}
   1a640:	bl	119b4 <fclose@plt>
   1a644:	mov	r3, #0
   1a648:	str	r3, [r4]
   1a64c:	pop	{r4, pc}
   1a650:	andeq	r3, r1, r4, ror #19
   1a654:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1a658:	andeq	r0, r0, r0, lsr #1
   1a65c:	ldr	r3, [pc, #76]	; 1a6b0 <__generate_code_for_body@@Base+0x3e4>
   1a660:	ldr	r1, [pc, #76]	; 1a6b4 <__generate_code_for_body@@Base+0x3e8>
   1a664:	add	r3, pc, r3
   1a668:	push	{r4, r5, r6, lr}
   1a66c:	mov	r5, r0
   1a670:	ldr	r4, [r3, r1]
   1a674:	lsl	r1, r0, #2
   1a678:	mov	r0, r4
   1a67c:	mov	r2, #1
   1a680:	ldr	r3, [r0], #28
   1a684:	bl	118dc <fwrite@plt>
   1a688:	cmp	r0, #1
   1a68c:	movne	r3, #1
   1a690:	ldr	r0, [r4, #8]
   1a694:	strne	r3, [r4, #20]
   1a698:	ldr	r3, [r4, #4]
   1a69c:	sub	r0, r0, r5
   1a6a0:	add	r3, r3, r5
   1a6a4:	str	r3, [r4, #4]
   1a6a8:	str	r0, [r4, #8]
   1a6ac:	pop	{r4, r5, r6, pc}
   1a6b0:	muleq	r1, r4, r9
   1a6b4:	andeq	r0, r0, ip, lsr #1
   1a6b8:	ldr	r3, [pc, #80]	; 1a710 <__generate_code_for_body@@Base+0x444>
   1a6bc:	ldr	r2, [pc, #80]	; 1a714 <__generate_code_for_body@@Base+0x448>
   1a6c0:	add	r3, pc, r3
   1a6c4:	push	{r4, r5, r6, lr}
   1a6c8:	mov	r5, r0
   1a6cc:	ldr	r4, [r3, r2]
   1a6d0:	ldr	r3, [r4, #8]
   1a6d4:	cmp	r3, #1024	; 0x400
   1a6d8:	bcs	1a6f0 <__generate_code_for_body@@Base+0x424>
   1a6dc:	add	r0, r3, #7
   1a6e0:	add	r3, r5, r3
   1a6e4:	str	r3, [r4, #8]
   1a6e8:	add	r0, r4, r0, lsl #2
   1a6ec:	pop	{r4, r5, r6, pc}
   1a6f0:	mov	r0, #1024	; 0x400
   1a6f4:	bl	1a65c <__generate_code_for_body@@Base+0x390>
   1a6f8:	ldr	r3, [r4, #8]
   1a6fc:	cmp	r3, #0
   1a700:	addne	r2, r4, #4096	; 0x1000
   1a704:	ldrne	r2, [r2, #28]
   1a708:	strne	r2, [r4, #28]
   1a70c:	b	1a6dc <__generate_code_for_body@@Base+0x410>
   1a710:	andeq	r3, r1, r8, lsr r9
   1a714:	andeq	r0, r0, ip, lsr #1
   1a718:	ldr	r3, [pc, #192]	; 1a7e0 <__generate_code_for_body@@Base+0x514>
   1a71c:	ldr	r2, [pc, #192]	; 1a7e4 <__generate_code_for_body@@Base+0x518>
   1a720:	add	r3, pc, r3
   1a724:	push	{r4, r5, r6, lr}
   1a728:	ldr	r4, [r3, r2]
   1a72c:	ldr	r2, [r4, #24]
   1a730:	ldr	r3, [r4, #8]
   1a734:	ldr	ip, [r4, #12]
   1a738:	cmp	r2, #0
   1a73c:	sub	ip, ip, r3
   1a740:	ble	1a7bc <__generate_code_for_body@@Base+0x4f0>
   1a744:	cmp	ip, r0
   1a748:	mov	r5, r0
   1a74c:	bcs	1a7a8 <__generate_code_for_body@@Base+0x4dc>
   1a750:	ldr	r2, [r4, #4]
   1a754:	cmp	ip, #0
   1a758:	add	r2, r2, r3
   1a75c:	str	r2, [r4, #4]
   1a760:	addne	r2, r4, #28
   1a764:	mov	r0, r4
   1a768:	ldrne	r3, [r2, r3, lsl #2]
   1a76c:	mov	r6, #0
   1a770:	strne	r3, [r4, #28]
   1a774:	ldr	r3, [r0], #28
   1a778:	mov	r2, #4096	; 0x1000
   1a77c:	add	r0, r0, ip, lsl #2
   1a780:	mov	r1, #1
   1a784:	str	ip, [r4, #12]
   1a788:	str	r6, [r4, #8]
   1a78c:	bl	118f4 <fread@plt>
   1a790:	ldr	r3, [r4, #12]
   1a794:	add	r0, r3, r0, lsr #2
   1a798:	cmp	r0, r5
   1a79c:	str	r0, [r4, #12]
   1a7a0:	bcc	1a7c4 <__generate_code_for_body@@Base+0x4f8>
   1a7a4:	ldr	r3, [r4, #8]
   1a7a8:	add	r0, r3, #7
   1a7ac:	add	r5, r5, r3
   1a7b0:	str	r5, [r4, #8]
   1a7b4:	add	r0, r4, r0, lsl #2
   1a7b8:	pop	{r4, r5, r6, pc}
   1a7bc:	mov	r0, #0
   1a7c0:	pop	{r4, r5, r6, pc}
   1a7c4:	ldr	r3, [r4, #16]
   1a7c8:	str	r6, [r4, #12]
   1a7cc:	add	r5, r5, r3
   1a7d0:	sub	r5, r5, r0
   1a7d4:	str	r5, [r4, #16]
   1a7d8:	mov	r0, r6
   1a7dc:	pop	{r4, r5, r6, pc}
   1a7e0:	ldrdeq	r3, [r1], -r8
   1a7e4:	andeq	r0, r0, ip, lsr #1
   1a7e8:	push	{r4, r5, r6, lr}
   1a7ec:	ldr	r4, [pc, #92]	; 1a850 <__generate_code_for_body@@Base+0x584>
   1a7f0:	ldr	r3, [pc, #92]	; 1a854 <__generate_code_for_body@@Base+0x588>
   1a7f4:	add	r4, pc, r4
   1a7f8:	ldr	r5, [r4, r3]
   1a7fc:	ldr	r0, [r5]
   1a800:	cmp	r0, #0
   1a804:	popne	{r4, r5, r6, pc}
   1a808:	ldr	r0, [pc, #72]	; 1a858 <__generate_code_for_body@@Base+0x58c>
   1a80c:	add	r0, pc, r0
   1a810:	bl	1190c <getenv@plt>
   1a814:	cmp	r0, #0
   1a818:	beq	1a848 <__generate_code_for_body@@Base+0x57c>
   1a81c:	ldr	r1, [pc, #56]	; 1a85c <__generate_code_for_body@@Base+0x590>
   1a820:	add	r1, pc, r1
   1a824:	bl	119fc <fopen64@plt>
   1a828:	str	r0, [r5]
   1a82c:	cmp	r0, #0
   1a830:	popne	{r4, r5, r6, pc}
   1a834:	ldr	r3, [pc, #36]	; 1a860 <__generate_code_for_body@@Base+0x594>
   1a838:	ldr	r3, [r4, r3]
   1a83c:	ldr	r0, [r3]
   1a840:	str	r0, [r5]
   1a844:	pop	{r4, r5, r6, pc}
   1a848:	ldr	r0, [r5]
   1a84c:	b	1a82c <__generate_code_for_body@@Base+0x560>
   1a850:	andeq	r3, r1, r4, lsl #16
   1a854:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1a858:	ldrdeq	r2, [r0], -r4
   1a85c:	ldrdeq	r2, [r0], -r0
   1a860:	andeq	r0, r0, r0, lsr #1
   1a864:	push	{r0, r1, r2, r3}
   1a868:	push	{lr}		; (str lr, [sp, #-4]!)
   1a86c:	sub	sp, sp, #12
   1a870:	add	r3, sp, #20
   1a874:	str	r3, [sp, #4]
   1a878:	bl	1a7e8 <__generate_code_for_body@@Base+0x51c>
   1a87c:	ldr	r1, [sp, #16]
   1a880:	ldr	r2, [sp, #4]
   1a884:	bl	119d8 <vfprintf@plt>
   1a888:	add	sp, sp, #12
   1a88c:	pop	{lr}		; (ldr lr, [sp], #4)
   1a890:	add	sp, sp, #16
   1a894:	bx	lr
   1a898:	push	{r4, r5, r6, r7, r8, lr}
   1a89c:	subs	r6, r1, #0
   1a8a0:	beq	1a8f4 <__generate_code_for_body@@Base+0x628>
   1a8a4:	cmp	r2, #0
   1a8a8:	ldr	r7, [r6]
   1a8ac:	beq	1a8e4 <__generate_code_for_body@@Base+0x618>
   1a8b0:	add	r4, r0, #12
   1a8b4:	add	r5, r4, r2, lsl #2
   1a8b8:	mov	r3, #0
   1a8bc:	ldr	r2, [r4, #4]!
   1a8c0:	add	r1, r6, r3, lsl #3
   1a8c4:	cmp	r2, #0
   1a8c8:	add	r8, r3, #1
   1a8cc:	beq	1a8dc <__generate_code_for_body@@Base+0x610>
   1a8d0:	ldr	r0, [r1, #28]
   1a8d4:	bl	118b8 <free@plt>
   1a8d8:	mov	r3, r8
   1a8dc:	cmp	r4, r5
   1a8e0:	bne	1a8bc <__generate_code_for_body@@Base+0x5f0>
   1a8e4:	mov	r0, r6
   1a8e8:	bl	118b8 <free@plt>
   1a8ec:	mov	r0, r7
   1a8f0:	pop	{r4, r5, r6, r7, r8, pc}
   1a8f4:	mov	r7, r6
   1a8f8:	b	1a8ec <__generate_code_for_body@@Base+0x620>
   1a8fc:	push	{r4, r5}
   1a900:	mov	r4, r0
   1a904:	mov	r5, r1
   1a908:	orrs	r3, r4, r5
   1a90c:	beq	1a950 <__generate_code_for_body@@Base+0x684>
   1a910:	cmp	r1, #0
   1a914:	clzeq	r2, r0
   1a918:	addeq	r2, r2, #32
   1a91c:	clzne	r2, r1
   1a920:	rsb	r3, r2, #63	; 0x3f
   1a924:	cmp	r3, #1
   1a928:	bls	1a950 <__generate_code_for_body@@Base+0x684>
   1a92c:	rsb	r1, r2, #61	; 0x3d
   1a930:	rsb	r0, r1, #32
   1a934:	lsr	r3, r4, r1
   1a938:	sub	r1, r1, #32
   1a93c:	orr	r3, r3, r5, lsl r0
   1a940:	orr	r3, r3, r5, lsr r1
   1a944:	rsb	r2, r2, #1073741886	; 0x4000003e
   1a948:	and	r0, r3, #3
   1a94c:	add	r0, r0, r2, lsl #2
   1a950:	pop	{r4, r5}
   1a954:	bx	lr
   1a958:	push	{r4, r5, r6, lr}
   1a95c:	mov	r1, r3
   1a960:	mov	r6, r0
   1a964:	mov	r0, r2
   1a968:	mov	r4, r2
   1a96c:	mov	r5, r3
   1a970:	bl	1a8fc <__generate_code_for_body@@Base+0x630>
   1a974:	add	r0, r0, r0, lsl #1
   1a978:	lsl	r0, r0, #3
   1a97c:	add	r3, r6, r0
   1a980:	ldr	r1, [r6, r0]
   1a984:	ldr	r2, [r3, #16]
   1a988:	add	r1, r1, #1
   1a98c:	str	r1, [r6, r0]
   1a990:	ldrd	r0, [r3, #8]
   1a994:	ldr	ip, [r3, #20]
   1a998:	adds	r2, r2, r4
   1a99c:	str	r2, [r3, #16]
   1a9a0:	adc	r2, ip, r5
   1a9a4:	cmp	r4, r0
   1a9a8:	sbcs	r1, r5, r1
   1a9ac:	str	r2, [r3, #20]
   1a9b0:	strdlt	r4, [r3, #8]
   1a9b4:	pop	{r4, r5, r6, pc}
   1a9b8:	ldr	r3, [r1, #8]
   1a9bc:	cmp	r3, #0
   1a9c0:	bxeq	lr
   1a9c4:	add	r2, r1, #6016	; 0x1780
   1a9c8:	push	{r4, r5, r6, r7, r8, lr}
   1a9cc:	mov	r3, r1
   1a9d0:	mov	r8, r1
   1a9d4:	mov	r7, r0
   1a9d8:	ldrd	r4, [r1, #24]
   1a9dc:	add	r2, r2, #32
   1a9e0:	mov	ip, #0
   1a9e4:	mov	r0, #0
   1a9e8:	mov	r1, #0
   1a9ec:	str	ip, [r3, #40]	; 0x28
   1a9f0:	strd	r4, [r3, #48]	; 0x30
   1a9f4:	strd	r0, [r3, #56]	; 0x38
   1a9f8:	add	r3, r3, #24
   1a9fc:	cmp	r3, r2
   1aa00:	bne	1a9ec <__generate_code_for_body@@Base+0x720>
   1aa04:	cmp	r7, #0
   1aa08:	popeq	{r4, r5, r6, r7, r8, pc}
   1aa0c:	add	r8, r8, #40	; 0x28
   1aa10:	ldr	r3, [r7, #16]
   1aa14:	cmp	r3, #0
   1aa18:	beq	1aaa0 <__generate_code_for_body@@Base+0x7d4>
   1aa1c:	ldr	r2, [r7, #52]	; 0x34
   1aa20:	cmp	r2, #0
   1aa24:	beq	1aaa0 <__generate_code_for_body@@Base+0x7d4>
   1aa28:	mov	r6, #0
   1aa2c:	b	1aa3c <__generate_code_for_body@@Base+0x770>
   1aa30:	add	r6, r6, #1
   1aa34:	cmp	r2, r6
   1aa38:	beq	1aaa0 <__generate_code_for_body@@Base+0x7d4>
   1aa3c:	ldr	r3, [r7, #56]	; 0x38
   1aa40:	ldr	r5, [r3, r6, lsl #2]
   1aa44:	cmp	r5, #0
   1aa48:	beq	1aa30 <__generate_code_for_body@@Base+0x764>
   1aa4c:	ldr	r3, [r5]
   1aa50:	cmp	r3, r7
   1aa54:	bne	1aa30 <__generate_code_for_body@@Base+0x764>
   1aa58:	ldr	r3, [r5, #16]
   1aa5c:	cmp	r3, #0
   1aa60:	beq	1aa30 <__generate_code_for_body@@Base+0x764>
   1aa64:	mov	r4, #0
   1aa68:	ldr	r2, [r5, #20]
   1aa6c:	lsl	r3, r4, #3
   1aa70:	add	r2, r2, r3
   1aa74:	mov	r0, r8
   1aa78:	ldrd	r2, [r2]
   1aa7c:	bl	1a958 <__generate_code_for_body@@Base+0x68c>
   1aa80:	ldr	r3, [r5, #16]
   1aa84:	add	r4, r4, #1
   1aa88:	cmp	r3, r4
   1aa8c:	bhi	1aa68 <__generate_code_for_body@@Base+0x79c>
   1aa90:	ldr	r2, [r7, #52]	; 0x34
   1aa94:	add	r6, r6, #1
   1aa98:	cmp	r2, r6
   1aa9c:	bne	1aa3c <__generate_code_for_body@@Base+0x770>
   1aaa0:	ldr	r7, [r7, #4]
   1aaa4:	cmp	r7, #0
   1aaa8:	bne	1aa10 <__generate_code_for_body@@Base+0x744>
   1aaac:	pop	{r4, r5, r6, r7, r8, pc}
   1aab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aab4:	sub	sp, sp, #12
   1aab8:	mov	r6, r0
   1aabc:	str	r0, [sp, #4]
   1aac0:	mov	r8, r2
   1aac4:	mov	r0, r1
   1aac8:	mov	r4, r1
   1aacc:	ldr	r2, [pc, #364]	; 1ac40 <__generate_code_for_body@@Base+0x974>
   1aad0:	mov	r1, #0
   1aad4:	bl	11990 <memset@plt>
   1aad8:	mov	r5, #0
   1aadc:	cmp	r6, #0
   1aae0:	str	r5, [r8]
   1aae4:	beq	1ac24 <__generate_code_for_body@@Base+0x958>
   1aae8:	mov	r9, r5
   1aaec:	ldr	r0, [r6, #12]
   1aaf0:	bl	11954 <strlen@plt>
   1aaf4:	cmp	r5, r0
   1aaf8:	strcc	r0, [r8]
   1aafc:	mov	r0, r9
   1ab00:	ldr	r1, [r6, #8]
   1ab04:	bl	1a5e0 <__generate_code_for_body@@Base+0x314>
   1ab08:	ldr	r7, [r6, #52]	; 0x34
   1ab0c:	mov	r1, r7
   1ab10:	bl	1a5e0 <__generate_code_for_body@@Base+0x314>
   1ab14:	cmp	r7, #0
   1ab18:	mov	r9, r0
   1ab1c:	beq	1ac10 <__generate_code_for_body@@Base+0x944>
   1ab20:	ldr	r5, [r6, #56]	; 0x38
   1ab24:	add	r7, r5, r7, lsl #2
   1ab28:	sub	r7, r7, #4
   1ab2c:	sub	r5, r5, #4
   1ab30:	b	1ab60 <__generate_code_for_body@@Base+0x894>
   1ab34:	ldr	r3, [sl]
   1ab38:	mov	r0, r9
   1ab3c:	cmp	r3, r6
   1ab40:	beq	1ab7c <__generate_code_for_body@@Base+0x8b0>
   1ab44:	mov	r1, #0
   1ab48:	bl	1a5e0 <__generate_code_for_body@@Base+0x314>
   1ab4c:	mov	r1, #0
   1ab50:	bl	1a5e0 <__generate_code_for_body@@Base+0x314>
   1ab54:	mov	r9, r0
   1ab58:	cmp	r5, r7
   1ab5c:	beq	1ac10 <__generate_code_for_body@@Base+0x944>
   1ab60:	ldr	sl, [r5, #4]!
   1ab64:	cmp	sl, #0
   1ab68:	bne	1ab34 <__generate_code_for_body@@Base+0x868>
   1ab6c:	mov	r1, sl
   1ab70:	mov	r0, r9
   1ab74:	bl	1a5e0 <__generate_code_for_body@@Base+0x314>
   1ab78:	b	1ab4c <__generate_code_for_body@@Base+0x880>
   1ab7c:	ldr	r1, [sl, #12]
   1ab80:	bl	1a5e0 <__generate_code_for_body@@Base+0x314>
   1ab84:	ldr	r1, [sl, #8]
   1ab88:	bl	1a5e0 <__generate_code_for_body@@Base+0x314>
   1ab8c:	ldr	r3, [r6, #16]
   1ab90:	cmp	r3, #0
   1ab94:	mov	r9, r0
   1ab98:	beq	1ab58 <__generate_code_for_body@@Base+0x88c>
   1ab9c:	ldr	fp, [sl, #16]
   1aba0:	ldr	r3, [r4, #8]
   1aba4:	mov	r1, fp
   1aba8:	add	r3, r3, fp
   1abac:	str	r3, [r4, #8]
   1abb0:	bl	1a5e0 <__generate_code_for_body@@Base+0x314>
   1abb4:	cmp	fp, #0
   1abb8:	mov	r9, r0
   1abbc:	beq	1ab58 <__generate_code_for_body@@Base+0x88c>
   1abc0:	ldr	r2, [sl, #20]
   1abc4:	ldr	r3, [r4, #16]
   1abc8:	add	lr, r2, fp, lsl #3
   1abcc:	ldr	ip, [r4, #20]
   1abd0:	sub	lr, lr, #8
   1abd4:	sub	r2, r2, #8
   1abd8:	ldrd	r0, [r2, #8]!
   1abdc:	ldrd	sl, [r4, #24]
   1abe0:	adds	r3, r3, r0
   1abe4:	adc	ip, ip, r1
   1abe8:	str	ip, [r4, #20]
   1abec:	str	r3, [r4, #16]
   1abf0:	ldrd	r0, [r2]
   1abf4:	cmp	sl, r0
   1abf8:	sbcs	sl, fp, r1
   1abfc:	strdlt	r0, [r4, #24]
   1ac00:	cmp	lr, r2
   1ac04:	bne	1abd8 <__generate_code_for_body@@Base+0x90c>
   1ac08:	cmp	r5, r7
   1ac0c:	bne	1ab60 <__generate_code_for_body@@Base+0x894>
   1ac10:	ldr	r6, [r6, #4]
   1ac14:	cmp	r6, #0
   1ac18:	beq	1ac28 <__generate_code_for_body@@Base+0x95c>
   1ac1c:	ldr	r5, [r8]
   1ac20:	b	1aaec <__generate_code_for_body@@Base+0x820>
   1ac24:	ldr	r9, [sp, #4]
   1ac28:	ldr	r0, [sp, #4]
   1ac2c:	mov	r1, r4
   1ac30:	bl	1a9b8 <__generate_code_for_body@@Base+0x6ec>
   1ac34:	mov	r0, r9
   1ac38:	add	sp, sp, #12
   1ac3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac40:	andeq	r1, r0, r8, asr #15
   1ac44:	push	{r4, r5, r6, lr}
   1ac48:	mov	r4, r0
   1ac4c:	ldr	r0, [pc, #192]	; 1ad14 <__generate_code_for_body@@Base+0xa48>
   1ac50:	add	r0, pc, r0
   1ac54:	bl	1190c <getenv@plt>
   1ac58:	subs	r3, r0, #0
   1ac5c:	beq	1ac68 <__generate_code_for_body@@Base+0x99c>
   1ac60:	bl	119f0 <atoi@plt>
   1ac64:	bic	r3, r0, r0, asr #31
   1ac68:	ldr	r0, [pc, #168]	; 1ad18 <__generate_code_for_body@@Base+0xa4c>
   1ac6c:	str	r3, [r4, #8]
   1ac70:	add	r0, pc, r0
   1ac74:	bl	1190c <getenv@plt>
   1ac78:	subs	r6, r0, #0
   1ac7c:	beq	1acec <__generate_code_for_body@@Base+0xa20>
   1ac80:	bl	11954 <strlen@plt>
   1ac84:	ldr	r3, [r4, #4]
   1ac88:	add	r3, r3, #2
   1ac8c:	cmp	r0, #0
   1ac90:	bne	1accc <__generate_code_for_body@@Base+0xa00>
   1ac94:	ldr	r2, [r4, #8]
   1ac98:	cmp	r2, #0
   1ac9c:	beq	1ad00 <__generate_code_for_body@@Base+0xa34>
   1aca0:	ldr	r6, [pc, #116]	; 1ad1c <__generate_code_for_body@@Base+0xa50>
   1aca4:	mov	r5, #1
   1aca8:	add	r6, pc, r6
   1acac:	str	r5, [r4, #12]
   1acb0:	add	r0, r3, r5
   1acb4:	bl	11918 <malloc@plt>
   1acb8:	mov	r2, r5
   1acbc:	mov	r1, r6
   1acc0:	str	r0, [r4]
   1acc4:	pop	{r4, r5, r6, lr}
   1acc8:	b	118c4 <memcpy@plt>
   1accc:	sub	r5, r0, #1
   1acd0:	ldrb	r2, [r6, r5]
   1acd4:	cmp	r2, #47	; 0x2f
   1acd8:	movne	r5, r0
   1acdc:	bne	1acac <__generate_code_for_body@@Base+0x9e0>
   1ace0:	cmp	r5, #0
   1ace4:	bne	1acac <__generate_code_for_body@@Base+0x9e0>
   1ace8:	b	1ac94 <__generate_code_for_body@@Base+0x9c8>
   1acec:	ldr	r2, [r4, #8]
   1acf0:	ldr	r3, [r4, #4]
   1acf4:	cmp	r2, #0
   1acf8:	add	r3, r3, #2
   1acfc:	bne	1aca0 <__generate_code_for_body@@Base+0x9d4>
   1ad00:	str	r2, [r4, #12]
   1ad04:	mov	r0, r3
   1ad08:	bl	11918 <malloc@plt>
   1ad0c:	str	r0, [r4]
   1ad10:	pop	{r4, r5, r6, pc}
   1ad14:	andeq	r2, r0, r8, lsr #5
   1ad18:	muleq	r0, ip, r2
   1ad1c:	andeq	r2, r0, ip, asr #4
   1ad20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad24:	sub	sp, sp, #6080	; 0x17c0
   1ad28:	sub	sp, sp, #36	; 0x24
   1ad2c:	mov	r3, r0
   1ad30:	str	r1, [sp, #40]	; 0x28
   1ad34:	mov	r1, #0
   1ad38:	mov	r4, r1
   1ad3c:	str	r0, [sp, #56]	; 0x38
   1ad40:	add	r7, r3, #6016	; 0x1780
   1ad44:	add	r0, sp, #64	; 0x40
   1ad48:	add	r6, sp, #2016	; 0x7e0
   1ad4c:	ldr	r2, [pc, #984]	; 1b12c <__generate_code_for_body@@Base+0xe60>
   1ad50:	mov	r5, #251	; 0xfb
   1ad54:	str	r0, [sp, #60]	; 0x3c
   1ad58:	str	r5, [sp, #52]	; 0x34
   1ad5c:	str	r6, [sp, #36]	; 0x24
   1ad60:	mov	r9, r4
   1ad64:	bl	11990 <memset@plt>
   1ad68:	mov	sl, r4
   1ad6c:	add	r3, r7, #8
   1ad70:	mov	r0, r4
   1ad74:	str	r3, [sp, #48]	; 0x30
   1ad78:	sub	r3, r6, #1952	; 0x7a0
   1ad7c:	str	r3, [sp, #44]	; 0x2c
   1ad80:	ldr	r3, [sp, #48]	; 0x30
   1ad84:	ldr	r2, [r3, #16]
   1ad88:	ldr	r7, [r3]
   1ad8c:	str	r2, [sp, #16]
   1ad90:	ldr	r2, [r3, #20]
   1ad94:	cmp	r7, #0
   1ad98:	str	r2, [sp, #20]
   1ad9c:	beq	1b0bc <__generate_code_for_body@@Base+0xdf0>
   1ada0:	ldrd	r2, [r3, #8]
   1ada4:	str	r9, [sp, #12]
   1ada8:	strd	r2, [sp, #24]
   1adac:	b	1ae8c <__generate_code_for_body@@Base+0xbc0>
   1adb0:	bls	1b120 <__generate_code_for_body@@Base+0xe54>
   1adb4:	ldr	r3, [sp, #12]
   1adb8:	mov	r2, r4
   1adbc:	umull	r0, r1, r7, r3
   1adc0:	mov	r3, #0
   1adc4:	mla	r1, r7, sl, r1
   1adc8:	bl	1c63c <__gcov_sort_n_vals@@Base+0x568>
   1adcc:	mov	r6, r0
   1add0:	mov	r8, r1
   1add4:	ldr	r3, [sp, #12]
   1add8:	sub	r4, r4, r7
   1addc:	subs	r3, r3, r6
   1ade0:	sbc	sl, sl, r8
   1ade4:	mov	fp, r7
   1ade8:	mov	r7, #0
   1adec:	str	r3, [sp, #12]
   1adf0:	ldr	r0, [sp, #16]
   1adf4:	ldr	r3, [sp, #20]
   1adf8:	str	r7, [sp, #16]
   1adfc:	str	r7, [sp, #20]
   1ae00:	adds	r6, r6, r0
   1ae04:	ldrd	r0, [sp]
   1ae08:	adc	r8, r8, r3
   1ae0c:	bl	1a8fc <__generate_code_for_body@@Base+0x630>
   1ae10:	ldr	r3, [sp, #44]	; 0x2c
   1ae14:	add	r1, r0, r0, lsl #1
   1ae18:	lsl	r1, r1, #3
   1ae1c:	add	ip, r3, r1
   1ae20:	ldr	r3, [sp, #36]	; 0x24
   1ae24:	ldr	lr, [ip, #16]
   1ae28:	add	r1, r3, r1
   1ae2c:	adds	r6, lr, r6
   1ae30:	ldr	lr, [ip, #20]
   1ae34:	ldrd	r2, [ip, #8]
   1ae38:	adc	lr, lr, r8
   1ae3c:	ldrd	r8, [sp]
   1ae40:	str	lr, [sp, #32]
   1ae44:	orrs	lr, r2, r3
   1ae48:	moveq	lr, #1
   1ae4c:	movne	lr, #0
   1ae50:	cmp	r8, r2
   1ae54:	sbcs	r3, r9, r3
   1ae58:	orrlt	lr, lr, #1
   1ae5c:	cmp	lr, #0
   1ae60:	str	r6, [ip, #16]
   1ae64:	ldr	r6, [r1, #-1952]	; 0xfffff860
   1ae68:	ldr	r3, [sp, #32]
   1ae6c:	strdne	r8, [ip, #8]
   1ae70:	cmp	r4, #0
   1ae74:	add	fp, r6, fp
   1ae78:	subeq	r5, r5, #1
   1ae7c:	cmp	r7, #0
   1ae80:	str	r3, [ip, #20]
   1ae84:	str	fp, [r1, #-1952]	; 0xfffff860
   1ae88:	beq	1b0b8 <__generate_code_for_body@@Base+0xdec>
   1ae8c:	cmp	r4, #0
   1ae90:	beq	1af14 <__generate_code_for_body@@Base+0xc48>
   1ae94:	add	r2, r5, r5, lsl #1
   1ae98:	ldr	r3, [sp, #40]	; 0x28
   1ae9c:	add	r2, r3, r2, lsl #3
   1aea0:	ldrd	r0, [sp, #24]
   1aea4:	ldr	r3, [r2, #8]
   1aea8:	ldr	r2, [r2, #12]
   1aeac:	adds	r3, r0, r3
   1aeb0:	str	r3, [sp]
   1aeb4:	adc	r3, r1, r2
   1aeb8:	cmp	r4, r7
   1aebc:	str	r3, [sp, #4]
   1aec0:	bcs	1adb0 <__generate_code_for_body@@Base+0xae4>
   1aec4:	ldr	r6, [sp, #16]
   1aec8:	ldr	r8, [sp, #20]
   1aecc:	mov	r2, r7
   1aed0:	umull	r0, r1, r4, r6
   1aed4:	mov	r3, #0
   1aed8:	mla	r1, r4, r8, r1
   1aedc:	bl	1c63c <__gcov_sort_n_vals@@Base+0x568>
   1aee0:	sub	r7, r7, r4
   1aee4:	mov	fp, r4
   1aee8:	mov	r4, #0
   1aeec:	subs	r2, r6, r0
   1aef0:	str	r2, [sp, #16]
   1aef4:	sbc	r2, r8, r1
   1aef8:	ldr	r6, [sp, #12]
   1aefc:	mov	r8, sl
   1af00:	mov	r3, r1
   1af04:	str	r2, [sp, #20]
   1af08:	str	r4, [sp, #12]
   1af0c:	mov	sl, r4
   1af10:	b	1ae00 <__generate_code_for_body@@Base+0xb34>
   1af14:	cmp	r5, #0
   1af18:	blt	1b118 <__generate_code_for_body@@Base+0xe4c>
   1af1c:	ldr	r3, [sp, #40]	; 0x28
   1af20:	add	r2, r5, r5, lsl #1
   1af24:	ldr	r4, [r3, r2, lsl #3]
   1af28:	add	r2, r3, r2, lsl #3
   1af2c:	cmp	r4, #0
   1af30:	bne	1b0a8 <__generate_code_for_body@@Base+0xddc>
   1af34:	mov	r3, r2
   1af38:	ldr	r9, [sp, #12]
   1af3c:	b	1af50 <__generate_code_for_body@@Base+0xc84>
   1af40:	ldr	r4, [r3]
   1af44:	mov	r2, r3
   1af48:	cmp	r4, #0
   1af4c:	bne	1b0a8 <__generate_code_for_body@@Base+0xddc>
   1af50:	subs	r5, r5, #1
   1af54:	sub	r3, r3, #24
   1af58:	bcs	1af40 <__generate_code_for_body@@Base+0xc74>
   1af5c:	ldr	r2, [sp, #52]	; 0x34
   1af60:	ldr	ip, [sp, #36]	; 0x24
   1af64:	ldr	r4, [sp, #16]
   1af68:	lsl	r3, r2, #1
   1af6c:	add	r1, r3, r2
   1af70:	sub	r2, ip, #1952	; 0x7a0
   1af74:	lsl	r1, r1, #3
   1af78:	add	r2, r2, r1
   1af7c:	add	r1, ip, r1
   1af80:	ldr	ip, [r2, #16]
   1af84:	ldr	lr, [r1, #-1952]	; 0xfffff860
   1af88:	adds	ip, ip, r4
   1af8c:	add	r7, lr, r7
   1af90:	ldrd	r4, [r2, #8]
   1af94:	ldr	lr, [r2, #20]
   1af98:	str	r7, [r1, #-1952]	; 0xfffff860
   1af9c:	ldr	r1, [sp, #20]
   1afa0:	str	ip, [r2, #16]
   1afa4:	adc	lr, lr, r1
   1afa8:	orrs	r1, r4, r5
   1afac:	str	lr, [r2, #20]
   1afb0:	beq	1b088 <__generate_code_for_body@@Base+0xdbc>
   1afb4:	ldrd	r6, [sp, #24]
   1afb8:	cmp	r6, r4
   1afbc:	sbcs	r2, r7, r5
   1afc0:	blt	1b088 <__generate_code_for_body@@Base+0xdbc>
   1afc4:	ldr	r2, [sp, #52]	; 0x34
   1afc8:	ldr	lr, [sp, #60]	; 0x3c
   1afcc:	add	ip, r3, r2
   1afd0:	ldr	r3, [sp, #56]	; 0x38
   1afd4:	lsl	ip, ip, #3
   1afd8:	add	r1, lr, ip
   1afdc:	add	ip, r3, ip
   1afe0:	b	1b03c <__generate_code_for_body@@Base+0xd70>
   1afe4:	ldr	r3, [r1, #-8]
   1afe8:	ldr	r6, [ip, #-8]
   1afec:	ldr	r7, [ip, #-4]
   1aff0:	ldr	r2, [r1, #-4]
   1aff4:	adds	r6, r3, r6
   1aff8:	ldrd	r4, [r1, #-16]
   1affc:	adc	r2, r2, r7
   1b000:	ldr	r3, [r1, #-24]	; 0xffffffe8
   1b004:	ldr	r7, [ip, #-24]	; 0xffffffe8
   1b008:	orrs	r8, r4, r5
   1b00c:	add	r3, r3, r7
   1b010:	str	r2, [r1, #-4]
   1b014:	str	r3, [r1, #-24]	; 0xffffffe8
   1b018:	str	r6, [r1, #-8]
   1b01c:	ldrd	r2, [ip, #-16]
   1b020:	sub	ip, ip, #24
   1b024:	beq	1b034 <__generate_code_for_body@@Base+0xd68>
   1b028:	cmp	r2, r4
   1b02c:	sbcs	r4, r3, r5
   1b030:	bge	1b038 <__generate_code_for_body@@Base+0xd6c>
   1b034:	strd	r2, [r1, #-16]
   1b038:	sub	r1, r1, #24
   1b03c:	cmp	r1, lr
   1b040:	bne	1afe4 <__generate_code_for_body@@Base+0xd18>
   1b044:	ldr	r3, [sp, #36]	; 0x24
   1b048:	add	r0, r0, r0, lsl #1
   1b04c:	sub	r3, r3, #1952	; 0x7a0
   1b050:	add	r3, r3, r0, lsl #3
   1b054:	ldr	r1, [sp, #60]	; 0x3c
   1b058:	ldr	r2, [r3, #16]
   1b05c:	ldr	ip, [r3, #20]
   1b060:	adds	r9, r2, r9
   1b064:	adc	sl, ip, sl
   1b068:	ldr	r0, [sp, #56]	; 0x38
   1b06c:	ldr	r2, [pc, #184]	; 1b12c <__generate_code_for_body@@Base+0xe60>
   1b070:	str	r9, [r3, #16]
   1b074:	str	sl, [r3, #20]
   1b078:	bl	118c4 <memcpy@plt>
   1b07c:	add	sp, sp, #6080	; 0x17c0
   1b080:	add	sp, sp, #36	; 0x24
   1b084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b088:	ldr	r2, [sp, #52]	; 0x34
   1b08c:	ldrd	r4, [sp, #24]
   1b090:	add	r1, r3, r2
   1b094:	ldr	r2, [sp, #36]	; 0x24
   1b098:	sub	r2, r2, #1952	; 0x7a0
   1b09c:	add	r2, r2, r1, lsl #3
   1b0a0:	strd	r4, [r2, #8]
   1b0a4:	b	1afc4 <__generate_code_for_body@@Base+0xcf8>
   1b0a8:	ldr	r3, [r2, #16]
   1b0ac:	ldr	sl, [r2, #20]
   1b0b0:	str	r3, [sp, #12]
   1b0b4:	b	1aea0 <__generate_code_for_body@@Base+0xbd4>
   1b0b8:	ldr	r9, [sp, #12]
   1b0bc:	ldr	r3, [sp, #52]	; 0x34
   1b0c0:	sub	r3, r3, #1
   1b0c4:	str	r3, [sp, #52]	; 0x34
   1b0c8:	cmn	r3, #1
   1b0cc:	ldr	r3, [sp, #48]	; 0x30
   1b0d0:	sub	r3, r3, #24
   1b0d4:	str	r3, [sp, #48]	; 0x30
   1b0d8:	bne	1ad80 <__generate_code_for_body@@Base+0xab4>
   1b0dc:	cmp	r4, #0
   1b0e0:	subne	r5, r5, #1
   1b0e4:	cmp	r5, #0
   1b0e8:	blt	1b044 <__generate_code_for_body@@Base+0xd78>
   1b0ec:	add	r5, r5, r5, lsl #1
   1b0f0:	ldr	ip, [sp, #40]	; 0x28
   1b0f4:	add	r3, ip, r5, lsl #3
   1b0f8:	ldr	r2, [r3, #16]
   1b0fc:	ldr	r1, [r3, #20]
   1b100:	adds	r9, r9, r2
   1b104:	adc	sl, sl, r1
   1b108:	cmp	ip, r3
   1b10c:	sub	r3, r3, #24
   1b110:	bne	1b0f8 <__generate_code_for_body@@Base+0xe2c>
   1b114:	b	1b044 <__generate_code_for_body@@Base+0xd78>
   1b118:	ldr	r9, [sp, #12]
   1b11c:	b	1af5c <__generate_code_for_body@@Base+0xc90>
   1b120:	ldr	r6, [sp, #12]
   1b124:	mov	r8, sl
   1b128:	b	1add4 <__generate_code_for_body@@Base+0xb08>
   1b12c:	andeq	r1, r0, r0, lsr #15
   1b130:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b134:	ldrb	r4, [r0]
   1b138:	cmp	r4, #47	; 0x2f
   1b13c:	addeq	r5, r0, #1
   1b140:	ldrbeq	r4, [r0, #1]
   1b144:	movne	r5, r0
   1b148:	cmp	r4, #0
   1b14c:	beq	1b1a0 <__generate_code_for_body@@Base+0xed4>
   1b150:	mov	r6, r0
   1b154:	mov	r7, #0
   1b158:	mov	r8, #47	; 0x2f
   1b15c:	ldr	sl, [pc, #136]	; 1b1ec <__generate_code_for_body@@Base+0xf20>
   1b160:	b	1b170 <__generate_code_for_body@@Base+0xea4>
   1b164:	ldrb	r4, [r5, #1]!
   1b168:	cmp	r4, #0
   1b16c:	beq	1b1a0 <__generate_code_for_body@@Base+0xed4>
   1b170:	cmp	r4, #47	; 0x2f
   1b174:	bne	1b164 <__generate_code_for_body@@Base+0xe98>
   1b178:	strb	r7, [r5]
   1b17c:	mov	r1, #0
   1b180:	mov	r0, r6
   1b184:	bl	119a8 <access@plt>
   1b188:	cmn	r0, #1
   1b18c:	beq	1b1ac <__generate_code_for_body@@Base+0xee0>
   1b190:	strb	r8, [r5]
   1b194:	ldrb	r4, [r5, #1]!
   1b198:	cmp	r4, #0
   1b19c:	bne	1b170 <__generate_code_for_body@@Base+0xea4>
   1b1a0:	mov	r9, #0
   1b1a4:	mov	r0, r9
   1b1a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b1ac:	mov	r1, sl
   1b1b0:	mov	r0, r6
   1b1b4:	bl	11984 <mkdir@plt>
   1b1b8:	cmn	r0, #1
   1b1bc:	mov	r9, r0
   1b1c0:	bne	1b190 <__generate_code_for_body@@Base+0xec4>
   1b1c4:	bl	11978 <__errno_location@plt>
   1b1c8:	ldr	r3, [r0]
   1b1cc:	cmp	r3, #17
   1b1d0:	beq	1b190 <__generate_code_for_body@@Base+0xec4>
   1b1d4:	ldr	r0, [pc, #20]	; 1b1f0 <__generate_code_for_body@@Base+0xf24>
   1b1d8:	mov	r1, r6
   1b1dc:	add	r0, pc, r0
   1b1e0:	bl	1a864 <__generate_code_for_body@@Base+0x598>
   1b1e4:	strb	r4, [r5]
   1b1e8:	b	1b1a4 <__generate_code_for_body@@Base+0xed8>
   1b1ec:	andeq	r0, r0, sp, ror #3
   1b1f0:	andeq	r1, r0, ip, lsr sp
   1b1f4:	ldr	r3, [pc, #76]	; 1b248 <__generate_code_for_body@@Base+0xf7c>
   1b1f8:	cmp	r1, r3
   1b1fc:	beq	1b240 <__generate_code_for_body@@Base+0xf74>
   1b200:	cmp	r2, #0
   1b204:	ldr	ip, [pc, #64]	; 1b24c <__generate_code_for_body@@Base+0xf80>
   1b208:	push	{lr}		; (str lr, [sp, #-4]!)
   1b20c:	rev	r3, r1
   1b210:	sub	sp, sp, #12
   1b214:	ldreq	r2, [r0]
   1b218:	ldr	r0, [pc, #48]	; 1b250 <__generate_code_for_body@@Base+0xf84>
   1b21c:	stm	sp, {r3, ip}
   1b220:	mov	r1, r2
   1b224:	mov	r3, sp
   1b228:	add	r2, sp, #4
   1b22c:	add	r0, pc, r0
   1b230:	bl	1a864 <__generate_code_for_body@@Base+0x598>
   1b234:	mov	r0, #0
   1b238:	add	sp, sp, #12
   1b23c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b240:	mov	r0, #1
   1b244:	bx	lr
   1b248:	teqmi	r8, sl, lsr #6
   1b24c:	bcs	ce9358 <__bss_end__@@Base+0xcb8b94>
   1b250:	andeq	r1, r0, r4, lsl sp
   1b254:	ldr	r2, [r2]
   1b258:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b25c:	cmp	r2, #0
   1b260:	mov	r4, r3
   1b264:	ldr	r2, [r3, #12]
   1b268:	ldr	r3, [sp, #32]
   1b26c:	beq	1b358 <__generate_code_for_body@@Base+0x108c>
   1b270:	cmp	r1, #0
   1b274:	addeq	r1, r2, #1
   1b278:	streq	r1, [r4, #12]
   1b27c:	cmp	r2, #0
   1b280:	ldr	r0, [r4, #16]
   1b284:	ldr	lr, [r4, #20]
   1b288:	ldrd	r6, [r4, #24]
   1b28c:	ldr	r2, [r4, #32]
   1b290:	ldr	r1, [r4, #36]	; 0x24
   1b294:	bne	1b304 <__generate_code_for_body@@Base+0x1038>
   1b298:	ldr	ip, [r3, #8]
   1b29c:	str	ip, [r4, #8]
   1b2a0:	ldr	ip, [r3, #16]
   1b2a4:	ldr	r5, [r3, #20]
   1b2a8:	adds	r0, ip, r0
   1b2ac:	adc	lr, r5, lr
   1b2b0:	str	r0, [r4, #16]
   1b2b4:	str	lr, [r4, #20]
   1b2b8:	ldrd	r8, [r3, #24]
   1b2bc:	cmp	r6, r8
   1b2c0:	sbcs	r0, r7, r9
   1b2c4:	bge	1b378 <__generate_code_for_body@@Base+0x10ac>
   1b2c8:	strd	r8, [r4, #24]
   1b2cc:	ldr	r0, [r3, #24]
   1b2d0:	ldr	ip, [r3, #28]
   1b2d4:	adds	r2, r0, r2
   1b2d8:	adc	r1, ip, r1
   1b2dc:	str	r1, [r4, #36]	; 0x24
   1b2e0:	str	r2, [r4, #32]
   1b2e4:	add	r1, r3, #40	; 0x28
   1b2e8:	ldr	r2, [pc, #176]	; 1b3a0 <__generate_code_for_body@@Base+0x10d4>
   1b2ec:	add	r0, r4, #40	; 0x28
   1b2f0:	bl	118c4 <memcpy@plt>
   1b2f4:	ldr	r3, [sp, #36]	; 0x24
   1b2f8:	mov	r0, #0
   1b2fc:	str	r3, [r4]
   1b300:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b304:	ldr	ip, [r3, #16]
   1b308:	ldr	r5, [r3, #20]
   1b30c:	adds	r0, ip, r0
   1b310:	adc	lr, r5, lr
   1b314:	str	r0, [r4, #16]
   1b318:	str	lr, [r4, #20]
   1b31c:	ldrd	r8, [r3, #24]
   1b320:	cmp	r6, r8
   1b324:	sbcs	r0, r7, r9
   1b328:	bge	1b38c <__generate_code_for_body@@Base+0x10c0>
   1b32c:	strd	r8, [r4, #24]
   1b330:	ldr	r0, [r3, #24]
   1b334:	ldr	ip, [r3, #28]
   1b338:	adds	r2, r0, r2
   1b33c:	adc	r1, ip, r1
   1b340:	str	r1, [r4, #36]	; 0x24
   1b344:	str	r2, [r4, #32]
   1b348:	add	r1, r3, #40	; 0x28
   1b34c:	add	r0, r4, #40	; 0x28
   1b350:	bl	1ad20 <__generate_code_for_body@@Base+0xa54>
   1b354:	b	1b2f4 <__generate_code_for_body@@Base+0x1028>
   1b358:	cmp	r2, #0
   1b35c:	beq	1b2f4 <__generate_code_for_body@@Base+0x1028>
   1b360:	mov	r1, r0
   1b364:	ldr	r0, [pc, #56]	; 1b3a4 <__generate_code_for_body@@Base+0x10d8>
   1b368:	add	r0, pc, r0
   1b36c:	bl	1a864 <__generate_code_for_body@@Base+0x598>
   1b370:	mvn	r0, #0
   1b374:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b378:	adds	r2, r2, r8
   1b37c:	adc	r1, r1, r9
   1b380:	str	r1, [r4, #36]	; 0x24
   1b384:	str	r2, [r4, #32]
   1b388:	b	1b2e4 <__generate_code_for_body@@Base+0x1018>
   1b38c:	adds	r2, r2, r8
   1b390:	adc	r1, r1, r9
   1b394:	str	r1, [r4, #36]	; 0x24
   1b398:	str	r2, [r4, #32]
   1b39c:	b	1b348 <__generate_code_for_body@@Base+0x107c>
   1b3a0:	andeq	r1, r0, r0, lsr #15
   1b3a4:	andeq	r1, r0, r0, lsl ip
   1b3a8:	ldr	r0, [pc, #52]	; 1b3e4 <__generate_code_for_body@@Base+0x1118>
   1b3ac:	ldr	r3, [pc, #52]	; 1b3e8 <__generate_code_for_body@@Base+0x111c>
   1b3b0:	add	r0, pc, r0
   1b3b4:	push	{lr}		; (str lr, [sp, #-4]!)
   1b3b8:	mov	ip, #0
   1b3bc:	ldr	r3, [r0, r3]
   1b3c0:	mvn	lr, #0
   1b3c4:	mov	r2, ip
   1b3c8:	str	lr, [r3, #24]
   1b3cc:	mov	r1, ip
   1b3d0:	ldr	r0, [r3]
   1b3d4:	pop	{lr}		; (ldr lr, [sp], #4)
   1b3d8:	str	ip, [r3, #4]
   1b3dc:	str	ip, [r3, #8]
   1b3e0:	b	11a08 <fseek@plt>
   1b3e4:	andeq	r2, r1, r8, asr #24
   1b3e8:	andeq	r0, r0, ip, lsr #1
   1b3ec:	push	{r4, r5, r6, r7, lr}
   1b3f0:	mov	r2, #0
   1b3f4:	sub	sp, sp, #36	; 0x24
   1b3f8:	mov	r3, #0
   1b3fc:	mov	r4, #0
   1b400:	mov	r6, r0
   1b404:	strd	r2, [sp, #8]
   1b408:	strd	r2, [sp, #16]
   1b40c:	strh	r4, [sp, #2]
   1b410:	bl	1193c <getpid@plt>
   1b414:	ldr	r3, [pc, #196]	; 1b4e0 <__generate_code_for_body@@Base+0x1214>
   1b418:	ldr	ip, [pc, #196]	; 1b4e4 <__generate_code_for_body@@Base+0x1218>
   1b41c:	add	r3, pc, r3
   1b420:	mvn	lr, #0
   1b424:	mov	r7, #1
   1b428:	ldr	r2, [pc, #184]	; 1b4e8 <__generate_code_for_body@@Base+0x121c>
   1b42c:	mov	r1, #66	; 0x42
   1b430:	str	r0, [sp, #24]
   1b434:	ldr	r5, [r3, ip]
   1b438:	mov	r0, r6
   1b43c:	strh	r7, [sp]
   1b440:	str	r4, [r5, #4]
   1b444:	str	r4, [r5, #12]
   1b448:	str	r4, [r5, #8]
   1b44c:	str	r4, [r5, #20]
   1b450:	str	lr, [r5, #16]
   1b454:	bl	11900 <open64@plt>
   1b458:	subs	r6, r0, #0
   1b45c:	movlt	r0, r4
   1b460:	blt	1b4c4 <__generate_code_for_body@@Base+0x11f8>
   1b464:	mov	r4, sp
   1b468:	mov	r2, r4
   1b46c:	mov	r1, #14
   1b470:	mov	r0, r6
   1b474:	bl	119cc <fcntl64@plt>
   1b478:	cmp	r0, #0
   1b47c:	beq	1b490 <__generate_code_for_body@@Base+0x11c4>
   1b480:	bl	11978 <__errno_location@plt>
   1b484:	ldr	r3, [r0]
   1b488:	cmp	r3, #4
   1b48c:	beq	1b468 <__generate_code_for_body@@Base+0x119c>
   1b490:	ldr	r1, [pc, #84]	; 1b4ec <__generate_code_for_body@@Base+0x1220>
   1b494:	mov	r0, r6
   1b498:	add	r1, pc, r1
   1b49c:	bl	11888 <fdopen@plt>
   1b4a0:	cmp	r0, #0
   1b4a4:	mov	r4, r0
   1b4a8:	str	r0, [r5]
   1b4ac:	beq	1b4cc <__generate_code_for_body@@Base+0x1200>
   1b4b0:	mov	r4, #1
   1b4b4:	mov	r1, #0
   1b4b8:	str	r4, [r5, #24]
   1b4bc:	bl	118a0 <setbuf@plt>
   1b4c0:	mov	r0, r4
   1b4c4:	add	sp, sp, #36	; 0x24
   1b4c8:	pop	{r4, r5, r6, r7, pc}
   1b4cc:	mov	r0, r6
   1b4d0:	bl	11a2c <close@plt>
   1b4d4:	mov	r0, r4
   1b4d8:	add	sp, sp, #36	; 0x24
   1b4dc:	pop	{r4, r5, r6, r7, pc}
   1b4e0:	ldrdeq	r2, [r1], -ip
   1b4e4:	andeq	r0, r0, ip, lsr #1
   1b4e8:			; <UNDEFINED> instruction: 0x000001b6
   1b4ec:	andeq	r1, r0, ip, lsl #22
   1b4f0:	push	{r4, r5, r6, lr}
   1b4f4:	mov	r4, r1
   1b4f8:	ldr	r5, [pc, #248]	; 1b5f8 <__generate_code_for_body@@Base+0x132c>
   1b4fc:	ldr	ip, [r4, #8]
   1b500:	ldr	lr, [r4, #12]
   1b504:	ldr	r6, [r4]
   1b508:	cmp	ip, #0
   1b50c:	mov	r1, r0
   1b510:	add	r5, pc, r5
   1b514:	add	r0, r6, lr
   1b518:	ble	1b554 <__generate_code_for_body@@Base+0x1288>
   1b51c:	ldrb	r3, [r1]
   1b520:	cmp	r3, #47	; 0x2f
   1b524:	addeq	r2, r1, #1
   1b528:	ldrbeq	r3, [r1, #1]
   1b52c:	movne	r2, r1
   1b530:	cmp	r3, #0
   1b534:	beq	1b554 <__generate_code_for_body@@Base+0x1288>
   1b538:	cmp	r3, #47	; 0x2f
   1b53c:	moveq	r1, r2
   1b540:	ldrb	r3, [r2, #1]!
   1b544:	subeq	ip, ip, #1
   1b548:	cmp	r3, #0
   1b54c:	cmpne	ip, #0
   1b550:	bne	1b538 <__generate_code_for_body@@Base+0x126c>
   1b554:	cmp	lr, #0
   1b558:	bne	1b578 <__generate_code_for_body@@Base+0x12ac>
   1b55c:	bl	118e8 <strcpy@plt>
   1b560:	ldr	r0, [r4]
   1b564:	bl	1b3ec <__generate_code_for_body@@Base+0x1120>
   1b568:	cmp	r0, #0
   1b56c:	beq	1b590 <__generate_code_for_body@@Base+0x12c4>
   1b570:	mov	r0, #0
   1b574:	pop	{r4, r5, r6, pc}
   1b578:	ldrb	r3, [r1]
   1b57c:	cmp	r3, #47	; 0x2f
   1b580:	movne	r3, #47	; 0x2f
   1b584:	addne	r0, r0, #1
   1b588:	strbne	r3, [r6, lr]
   1b58c:	b	1b55c <__generate_code_for_body@@Base+0x1290>
   1b590:	ldr	r0, [r4]
   1b594:	bl	1b130 <__generate_code_for_body@@Base+0xe64>
   1b598:	cmp	r0, #0
   1b59c:	bne	1b5d4 <__generate_code_for_body@@Base+0x1308>
   1b5a0:	ldr	r0, [r4]
   1b5a4:	bl	1b3ec <__generate_code_for_body@@Base+0x1120>
   1b5a8:	cmp	r0, #0
   1b5ac:	bne	1b570 <__generate_code_for_body@@Base+0x12a4>
   1b5b0:	ldr	r3, [pc, #68]	; 1b5fc <__generate_code_for_body@@Base+0x1330>
   1b5b4:	ldr	r1, [pc, #68]	; 1b600 <__generate_code_for_body@@Base+0x1334>
   1b5b8:	ldr	r2, [r4]
   1b5bc:	ldr	r3, [r5, r3]
   1b5c0:	add	r1, pc, r1
   1b5c4:	ldr	r0, [r3]
   1b5c8:	bl	1196c <fprintf@plt>
   1b5cc:	mvn	r0, #0
   1b5d0:	pop	{r4, r5, r6, pc}
   1b5d4:	ldr	r3, [pc, #32]	; 1b5fc <__generate_code_for_body@@Base+0x1330>
   1b5d8:	ldr	r1, [pc, #36]	; 1b604 <__generate_code_for_body@@Base+0x1338>
   1b5dc:	ldr	r2, [r4]
   1b5e0:	ldr	r3, [r5, r3]
   1b5e4:	add	r1, pc, r1
   1b5e8:	ldr	r0, [r3]
   1b5ec:	bl	1196c <fprintf@plt>
   1b5f0:	mvn	r0, #0
   1b5f4:	pop	{r4, r5, r6, pc}
   1b5f8:	andeq	r2, r1, r8, ror #21
   1b5fc:	andeq	r0, r0, r0, lsr #1
   1b600:	strdeq	r1, [r0], -ip
   1b604:	andeq	r1, r0, r4, asr #19
   1b608:	ldr	r3, [pc, #96]	; 1b670 <__generate_code_for_body@@Base+0x13a4>
   1b60c:	ldr	r2, [pc, #96]	; 1b674 <__generate_code_for_body@@Base+0x13a8>
   1b610:	add	r3, pc, r3
   1b614:	push	{r4, lr}
   1b618:	ldr	r4, [r3, r2]
   1b61c:	ldr	r0, [r4]
   1b620:	cmp	r0, #0
   1b624:	beq	1b644 <__generate_code_for_body@@Base+0x1378>
   1b628:	ldr	r3, [r4, #8]
   1b62c:	cmp	r3, #0
   1b630:	bne	1b654 <__generate_code_for_body@@Base+0x1388>
   1b634:	bl	119b4 <fclose@plt>
   1b638:	mov	r3, #0
   1b63c:	str	r3, [r4]
   1b640:	str	r3, [r4, #12]
   1b644:	mov	r3, #0
   1b648:	str	r3, [r4, #24]
   1b64c:	ldr	r0, [r4, #20]
   1b650:	pop	{r4, pc}
   1b654:	ldr	r2, [r4, #24]
   1b658:	cmp	r2, #0
   1b65c:	bge	1b634 <__generate_code_for_body@@Base+0x1368>
   1b660:	mov	r0, r3
   1b664:	bl	1a65c <__generate_code_for_body@@Base+0x390>
   1b668:	ldr	r0, [r4]
   1b66c:	b	1b634 <__generate_code_for_body@@Base+0x1368>
   1b670:	andeq	r2, r1, r8, ror #19
   1b674:	andeq	r0, r0, ip, lsr #1
   1b678:	push	{r4, lr}
   1b67c:	mov	r4, r0
   1b680:	mov	r0, #1
   1b684:	bl	1a6b8 <__generate_code_for_body@@Base+0x3ec>
   1b688:	str	r4, [r0]
   1b68c:	pop	{r4, pc}
   1b690:	push	{r4, r5, r6, lr}
   1b694:	mov	r5, r0
   1b698:	mov	r0, #2
   1b69c:	mov	r4, r1
   1b6a0:	bl	1a6b8 <__generate_code_for_body@@Base+0x3ec>
   1b6a4:	str	r5, [r0]
   1b6a8:	str	r4, [r0, #4]
   1b6ac:	pop	{r4, r5, r6, pc}
   1b6b0:	push	{r4, r5, r6, lr}
   1b6b4:	mov	r5, r0
   1b6b8:	mov	r0, #2
   1b6bc:	mov	r4, r1
   1b6c0:	bl	1a6b8 <__generate_code_for_body@@Base+0x3ec>
   1b6c4:	str	r5, [r0]
   1b6c8:	str	r4, [r0, #4]
   1b6cc:	pop	{r4, r5, r6, pc}
   1b6d0:	mov	r2, #0
   1b6d4:	push	{r4, r5, r6, r7, r8, lr}
   1b6d8:	mov	r3, r2
   1b6dc:	sub	sp, sp, #32
   1b6e0:	mov	r5, r1
   1b6e4:	mov	r7, r2
   1b6e8:	mov	r4, r1
   1b6ec:	mov	r8, #1
   1b6f0:	str	r2, [sp]
   1b6f4:	str	r2, [sp, #4]
   1b6f8:	str	r2, [sp, #8]
   1b6fc:	str	r2, [sp, #12]
   1b700:	str	r2, [sp, #16]
   1b704:	str	r2, [sp, #20]
   1b708:	str	r2, [sp, #24]
   1b70c:	str	r2, [sp, #28]
   1b710:	lsr	r2, r3, #5
   1b714:	ldr	lr, [r1, #40]	; 0x28
   1b718:	add	ip, sp, #32
   1b71c:	cmp	lr, #0
   1b720:	add	r2, ip, r2, lsl #2
   1b724:	and	r6, r3, #31
   1b728:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   1b72c:	add	r3, r3, #1
   1b730:	orrne	ip, ip, r8, lsl r6
   1b734:	addne	r7, r7, #1
   1b738:	strne	ip, [r2, #-32]	; 0xffffffe0
   1b73c:	cmp	r3, #252	; 0xfc
   1b740:	add	r1, r1, #24
   1b744:	bne	1b710 <__generate_code_for_body@@Base+0x1444>
   1b748:	add	r7, r7, r7, lsl #2
   1b74c:	add	r1, r7, #17
   1b750:	bl	1b6b0 <__generate_code_for_body@@Base+0x13e4>
   1b754:	ldr	r0, [r5]
   1b758:	bl	1b678 <__generate_code_for_body@@Base+0x13ac>
   1b75c:	ldr	r0, [r5, #8]
   1b760:	bl	1b678 <__generate_code_for_body@@Base+0x13ac>
   1b764:	ldr	r0, [r5, #12]
   1b768:	bl	1b678 <__generate_code_for_body@@Base+0x13ac>
   1b76c:	ldrd	r0, [r5, #16]
   1b770:	bl	1b690 <__generate_code_for_body@@Base+0x13c4>
   1b774:	ldrd	r0, [r5, #24]
   1b778:	bl	1b690 <__generate_code_for_body@@Base+0x13c4>
   1b77c:	ldrd	r0, [r5, #32]
   1b780:	bl	1b690 <__generate_code_for_body@@Base+0x13c4>
   1b784:	sub	r6, sp, #4
   1b788:	add	r7, sp, #28
   1b78c:	ldr	r0, [r6, #4]!
   1b790:	bl	1b678 <__generate_code_for_body@@Base+0x13ac>
   1b794:	cmp	r7, r6
   1b798:	bne	1b78c <__generate_code_for_body@@Base+0x14c0>
   1b79c:	add	r5, r5, #6016	; 0x1780
   1b7a0:	add	r5, r5, #32
   1b7a4:	ldr	r3, [r4, #40]	; 0x28
   1b7a8:	subs	r0, r3, #0
   1b7ac:	beq	1b7c4 <__generate_code_for_body@@Base+0x14f8>
   1b7b0:	bl	1b678 <__generate_code_for_body@@Base+0x13ac>
   1b7b4:	ldrd	r0, [r4, #48]	; 0x30
   1b7b8:	bl	1b690 <__generate_code_for_body@@Base+0x13c4>
   1b7bc:	ldrd	r0, [r4, #56]	; 0x38
   1b7c0:	bl	1b690 <__generate_code_for_body@@Base+0x13c4>
   1b7c4:	add	r4, r4, #24
   1b7c8:	cmp	r4, r5
   1b7cc:	bne	1b7a4 <__generate_code_for_body@@Base+0x14d8>
   1b7d0:	add	sp, sp, #32
   1b7d4:	pop	{r4, r5, r6, r7, r8, pc}
   1b7d8:	push	{r4, lr}
   1b7dc:	mov	r0, #1
   1b7e0:	bl	1a718 <__generate_code_for_body@@Base+0x44c>
   1b7e4:	subs	r3, r0, #0
   1b7e8:	popeq	{r4, pc}
   1b7ec:	ldr	r0, [r3]
   1b7f0:	pop	{r4, lr}
   1b7f4:	b	1a5dc <__generate_code_for_body@@Base+0x310>
   1b7f8:	push	{r4, lr}
   1b7fc:	mov	r0, #2
   1b800:	bl	1a718 <__generate_code_for_body@@Base+0x44c>
   1b804:	subs	r2, r0, #0
   1b808:	beq	1b82c <__generate_code_for_body@@Base+0x1560>
   1b80c:	ldr	r0, [r2]
   1b810:	bl	1a5dc <__generate_code_for_body@@Base+0x310>
   1b814:	mov	r3, r0
   1b818:	ldr	r0, [r2, #4]
   1b81c:	bl	1a5dc <__generate_code_for_body@@Base+0x310>
   1b820:	mov	r1, r0
   1b824:	mov	r0, r3
   1b828:	pop	{r4, pc}
   1b82c:	mov	r3, r2
   1b830:	mov	r1, r2
   1b834:	mov	r0, r3
   1b838:	pop	{r4, pc}
   1b83c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b840:	sub	sp, sp, #28
   1b844:	mov	r8, r1
   1b848:	str	r3, [sp, #12]
   1b84c:	mov	r4, #0
   1b850:	add	r3, r1, #52	; 0x34
   1b854:	add	r1, r1, #16
   1b858:	str	r0, [sp, #20]
   1b85c:	str	r2, [sp, #16]
   1b860:	ldr	r2, [r3, #-4]!
   1b864:	cmp	r2, #0
   1b868:	addne	r4, r4, #1
   1b86c:	cmp	r1, r3
   1b870:	bne	1b860 <__generate_code_for_body@@Base+0x1594>
   1b874:	add	r4, r4, #4
   1b878:	lsl	r4, r4, #3
   1b87c:	mov	r0, r4
   1b880:	bl	11918 <malloc@plt>
   1b884:	subs	r6, r0, #0
   1b888:	beq	1b95c <__generate_code_for_body@@Base+0x1690>
   1b88c:	ldr	r3, [sp, #12]
   1b890:	mov	r4, #0
   1b894:	str	r3, [r6, #4]
   1b898:	str	r4, [r6]
   1b89c:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1b8a0:	mov	r7, r4
   1b8a4:	add	r5, r8, #12
   1b8a8:	str	r0, [r6, #12]
   1b8ac:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1b8b0:	str	r0, [r6, #16]
   1b8b4:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1b8b8:	str	r0, [r6, #20]
   1b8bc:	b	1b8cc <__generate_code_for_body@@Base+0x1600>
   1b8c0:	add	r4, r4, #1
   1b8c4:	cmp	r4, #9
   1b8c8:	beq	1b948 <__generate_code_for_body@@Base+0x167c>
   1b8cc:	ldr	r3, [r5, #4]!
   1b8d0:	cmp	r3, #0
   1b8d4:	beq	1b8c0 <__generate_code_for_body@@Base+0x15f4>
   1b8d8:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1b8dc:	lsl	r3, r4, #17
   1b8e0:	add	r3, r3, #27262976	; 0x1a00000
   1b8e4:	add	r3, r3, #65536	; 0x10000
   1b8e8:	cmp	r0, r3
   1b8ec:	bne	1b9b0 <__generate_code_for_body@@Base+0x16e4>
   1b8f0:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1b8f4:	lsr	sl, r0, #1
   1b8f8:	lsl	fp, sl, #3
   1b8fc:	mov	r0, fp
   1b900:	bl	11918 <malloc@plt>
   1b904:	subs	r9, r0, #0
   1b908:	beq	1b9c0 <__generate_code_for_body@@Base+0x16f4>
   1b90c:	add	r1, r6, r7, lsl #3
   1b910:	cmp	sl, #0
   1b914:	str	sl, [r1, #24]
   1b918:	str	r9, [r1, #28]
   1b91c:	sub	fp, sl, #1
   1b920:	beq	1b938 <__generate_code_for_body@@Base+0x166c>
   1b924:	bl	1b7f8 <__generate_code_for_body@@Base+0x152c>
   1b928:	sub	fp, fp, #1
   1b92c:	cmn	fp, #1
   1b930:	strd	r0, [r9], #8
   1b934:	bne	1b924 <__generate_code_for_body@@Base+0x1658>
   1b938:	add	r4, r4, #1
   1b93c:	cmp	r4, #9
   1b940:	add	r7, r7, #1
   1b944:	bne	1b8cc <__generate_code_for_body@@Base+0x1600>
   1b948:	ldr	r3, [sp, #16]
   1b94c:	mov	r0, r6
   1b950:	str	r6, [r3]
   1b954:	add	sp, sp, #28
   1b958:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b95c:	mvn	r5, #0
   1b960:	cmp	r4, #0
   1b964:	bne	1b9a4 <__generate_code_for_body@@Base+0x16d8>
   1b968:	ldr	r3, [pc, #92]	; 1b9cc <__generate_code_for_body@@Base+0x1700>
   1b96c:	mov	r4, r5
   1b970:	add	r3, pc, r3
   1b974:	ldr	r0, [pc, #84]	; 1b9d0 <__generate_code_for_body@@Base+0x1704>
   1b978:	ldr	r2, [sp, #12]
   1b97c:	ldr	r1, [sp, #20]
   1b980:	str	r4, [sp]
   1b984:	add	r0, pc, r0
   1b988:	bl	1a864 <__generate_code_for_body@@Base+0x598>
   1b98c:	mov	r2, r5
   1b990:	mov	r1, r6
   1b994:	mov	r0, r8
   1b998:	add	sp, sp, #28
   1b99c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9a0:	b	1a898 <__generate_code_for_body@@Base+0x5cc>
   1b9a4:	ldr	r3, [pc, #40]	; 1b9d4 <__generate_code_for_body@@Base+0x1708>
   1b9a8:	add	r3, pc, r3
   1b9ac:	b	1b974 <__generate_code_for_body@@Base+0x16a8>
   1b9b0:	ldr	r3, [pc, #32]	; 1b9d8 <__generate_code_for_body@@Base+0x170c>
   1b9b4:	mov	r5, r4
   1b9b8:	add	r3, pc, r3
   1b9bc:	b	1b974 <__generate_code_for_body@@Base+0x16a8>
   1b9c0:	mov	r5, r4
   1b9c4:	mov	r4, fp
   1b9c8:	b	1b960 <__generate_code_for_body@@Base+0x1694>
   1b9cc:	andeq	r1, r0, r8, ror #12
   1b9d0:	andeq	r1, r0, r8, ror r6
   1b9d4:	andeq	r1, r0, r4, asr #12
   1b9d8:	andeq	r1, r0, r0, lsr #12
   1b9dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9e0:	sub	sp, sp, #36	; 0x24
   1b9e4:	mov	r9, r0
   1b9e8:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1b9ec:	mov	r7, #0
   1b9f0:	sub	r4, sp, #4
   1b9f4:	add	r5, sp, #28
   1b9f8:	str	r0, [r9]
   1b9fc:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1ba00:	str	r0, [r9, #8]
   1ba04:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1ba08:	str	r0, [r9, #12]
   1ba0c:	bl	1b7f8 <__generate_code_for_body@@Base+0x152c>
   1ba10:	strd	r0, [r9, #16]
   1ba14:	bl	1b7f8 <__generate_code_for_body@@Base+0x152c>
   1ba18:	strd	r0, [r9, #24]
   1ba1c:	bl	1b7f8 <__generate_code_for_body@@Base+0x152c>
   1ba20:	ldr	r2, [pc, #264]	; 1bb30 <__generate_code_for_body@@Base+0x1864>
   1ba24:	strd	r0, [r9, #32]
   1ba28:	add	r0, r9, #40	; 0x28
   1ba2c:	mov	r1, r7
   1ba30:	bl	11990 <memset@plt>
   1ba34:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1ba38:	str	r0, [r4, #4]!
   1ba3c:	bl	1c720 <__gcov_sort_n_vals@@Base+0x64c>
   1ba40:	cmp	r4, r5
   1ba44:	add	r7, r7, r0
   1ba48:	bne	1ba34 <__generate_code_for_body@@Base+0x1768>
   1ba4c:	cmp	r7, #0
   1ba50:	sub	r7, r7, #1
   1ba54:	beq	1bb1c <__generate_code_for_body@@Base+0x1850>
   1ba58:	ldr	r8, [pc, #212]	; 1bb34 <__generate_code_for_body@@Base+0x1868>
   1ba5c:	ldr	sl, [pc, #212]	; 1bb38 <__generate_code_for_body@@Base+0x186c>
   1ba60:	mov	r4, #0
   1ba64:	add	r8, pc, r8
   1ba68:	add	sl, pc, sl
   1ba6c:	mov	r5, r4
   1ba70:	mov	r6, r4
   1ba74:	cmp	r4, #0
   1ba78:	addeq	r3, sp, #32
   1ba7c:	addeq	r6, r3, r5, lsl #2
   1ba80:	subeq	r6, r6, #36	; 0x24
   1ba84:	beq	1baa0 <__generate_code_for_body@@Base+0x17d4>
   1ba88:	b	1bac8 <__generate_code_for_body@@Base+0x17fc>
   1ba8c:	ldr	r4, [r6, #4]!
   1ba90:	add	r3, r5, #1
   1ba94:	cmp	r4, #0
   1ba98:	bne	1bac0 <__generate_code_for_body@@Base+0x17f4>
   1ba9c:	mov	r5, r3
   1baa0:	cmp	r5, #7
   1baa4:	bls	1ba8c <__generate_code_for_body@@Base+0x17c0>
   1baa8:	mov	r0, r8
   1baac:	bl	1a864 <__generate_code_for_body@@Base+0x598>
   1bab0:	ldr	r4, [r6, #4]!
   1bab4:	add	r3, r5, #1
   1bab8:	cmp	r4, #0
   1babc:	beq	1ba9c <__generate_code_for_body@@Base+0x17d0>
   1bac0:	lsl	r6, r5, #5
   1bac4:	mov	r5, r3
   1bac8:	tst	r4, #1
   1bacc:	bne	1bae0 <__generate_code_for_body@@Base+0x1814>
   1bad0:	lsr	r4, r4, #1
   1bad4:	tst	r4, #1
   1bad8:	add	r6, r6, #1
   1badc:	beq	1bad0 <__generate_code_for_body@@Base+0x1804>
   1bae0:	cmp	r6, #251	; 0xfb
   1bae4:	bhi	1bb24 <__generate_code_for_body@@Base+0x1858>
   1bae8:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1baec:	add	fp, r6, r6, lsl #1
   1baf0:	sub	r7, r7, #1
   1baf4:	add	fp, r9, fp, lsl #3
   1baf8:	lsr	r4, r4, #1
   1bafc:	add	r6, r6, #1
   1bb00:	str	r0, [fp, #40]	; 0x28
   1bb04:	bl	1b7f8 <__generate_code_for_body@@Base+0x152c>
   1bb08:	strd	r0, [fp, #48]	; 0x30
   1bb0c:	bl	1b7f8 <__generate_code_for_body@@Base+0x152c>
   1bb10:	cmn	r7, #1
   1bb14:	strd	r0, [fp, #56]	; 0x38
   1bb18:	bne	1ba74 <__generate_code_for_body@@Base+0x17a8>
   1bb1c:	add	sp, sp, #36	; 0x24
   1bb20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb24:	mov	r0, sl
   1bb28:	bl	1a864 <__generate_code_for_body@@Base+0x598>
   1bb2c:	b	1bae8 <__generate_code_for_body@@Base+0x181c>
   1bb30:	andeq	r1, r0, r0, lsr #15
   1bb34:			; <UNDEFINED> instruction: 0x000015bc
   1bb38:	strdeq	r1, [r0], -r8
   1bb3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb40:	sub	sp, sp, #6080	; 0x17c0
   1bb44:	sub	sp, sp, #28
   1bb48:	mov	r4, r1
   1bb4c:	strd	r2, [sp, #4]
   1bb50:	add	r3, sp, #6144	; 0x1800
   1bb54:	mov	r9, r0
   1bb58:	ldr	r7, [r3]
   1bb5c:	add	r3, sp, #6144	; 0x1800
   1bb60:	add	r3, r3, #4
   1bb64:	ldr	r6, [r3]
   1bb68:	add	r3, sp, #6144	; 0x1800
   1bb6c:	add	r3, r3, #8
   1bb70:	ldr	sl, [r3]
   1bb74:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1bb78:	add	r3, r4, #12
   1bb7c:	mov	r2, r9
   1bb80:	str	r3, [sp, #12]
   1bb84:	mov	r1, r0
   1bb88:	mov	r0, r3
   1bb8c:	bl	1b1f4 <__generate_code_for_body@@Base+0xf28>
   1bb90:	cmp	r0, #0
   1bb94:	beq	1be1c <__generate_code_for_body@@Base+0x1b50>
   1bb98:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1bb9c:	ldr	r3, [r4, #8]
   1bba0:	cmp	r0, r3
   1bba4:	bne	1bc38 <__generate_code_for_body@@Base+0x196c>
   1bba8:	ldr	fp, [pc, #628]	; 1be24 <__generate_code_for_body@@Base+0x1b58>
   1bbac:	add	r5, sp, #16
   1bbb0:	add	fp, pc, fp
   1bbb4:	bl	1a58c <__generate_code_for_body@@Base+0x2c0>
   1bbb8:	str	r0, [r6]
   1bbbc:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1bbc0:	cmp	r0, #-1560281088	; 0xa3000000
   1bbc4:	bne	1bc7c <__generate_code_for_body@@Base+0x19b0>
   1bbc8:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1bbcc:	mov	r0, r5
   1bbd0:	bl	1b9dc <__generate_code_for_body@@Base+0x1710>
   1bbd4:	bl	1a5b0 <__generate_code_for_body@@Base+0x2e4>
   1bbd8:	add	r2, sp, #2000	; 0x7d0
   1bbdc:	add	r2, r2, #8
   1bbe0:	subs	r8, r0, #0
   1bbe4:	bne	1bdb0 <__generate_code_for_body@@Base+0x1ae4>
   1bbe8:	ldr	r3, [r7]
   1bbec:	cmp	r3, #0
   1bbf0:	bne	1bc48 <__generate_code_for_body@@Base+0x197c>
   1bbf4:	ldr	r3, [r2, #-1992]	; 0xfffff838
   1bbf8:	cmp	r3, sl
   1bbfc:	bne	1bbb4 <__generate_code_for_body@@Base+0x18e8>
   1bc00:	ldr	r3, [sp, #8]
   1bc04:	ldr	r2, [r2, #-1984]	; 0xfffff840
   1bc08:	ldr	r3, [r3]
   1bc0c:	cmp	r2, r3
   1bc10:	bne	1bbb4 <__generate_code_for_body@@Base+0x18e8>
   1bc14:	ldr	r2, [pc, #524]	; 1be28 <__generate_code_for_body@@Base+0x1b5c>
   1bc18:	mov	r1, r5
   1bc1c:	ldr	r0, [sp, #4]
   1bc20:	bl	118c4 <memcpy@plt>
   1bc24:	ldr	r3, [r6]
   1bc28:	str	r3, [r7]
   1bc2c:	b	1bbb4 <__generate_code_for_body@@Base+0x18e8>
   1bc30:	cmp	r0, #0
   1bc34:	bne	1bdf0 <__generate_code_for_body@@Base+0x1b24>
   1bc38:	mov	r0, #0
   1bc3c:	add	sp, sp, #6080	; 0x17c0
   1bc40:	add	sp, sp, #28
   1bc44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc48:	ldr	r0, [pc, #476]	; 1be2c <__generate_code_for_body@@Base+0x1b60>
   1bc4c:	bl	11918 <malloc@plt>
   1bc50:	ldr	r2, [pc, #464]	; 1be28 <__generate_code_for_body@@Base+0x1b5c>
   1bc54:	mov	r1, r5
   1bc58:	mov	r3, r0
   1bc5c:	str	r0, [fp]
   1bc60:	add	r0, r0, #8
   1bc64:	str	r3, [sp]
   1bc68:	bl	118c4 <memcpy@plt>
   1bc6c:	ldr	r3, [sp]
   1bc70:	str	r8, [r3]
   1bc74:	ldr	fp, [fp]
   1bc78:	b	1bbb4 <__generate_code_for_body@@Base+0x18e8>
   1bc7c:	ldr	r5, [r4, #52]	; 0x34
   1bc80:	cmp	r5, #0
   1bc84:	beq	1bc30 <__generate_code_for_body@@Base+0x1964>
   1bc88:	ldr	r3, [r4, #56]	; 0x38
   1bc8c:	cmp	r0, #16777216	; 0x1000000
   1bc90:	ldr	r8, [r3]
   1bc94:	bne	1bdec <__generate_code_for_body@@Base+0x1b20>
   1bc98:	ldr	r6, [pc, #400]	; 1be30 <__generate_code_for_body@@Base+0x1b64>
   1bc9c:	mov	r5, #0
   1bca0:	add	r6, pc, r6
   1bca4:	add	r6, r6, #4
   1bca8:	b	1bcec <__generate_code_for_body@@Base+0x1a20>
   1bcac:	mov	r2, r6
   1bcb0:	mov	r3, r5
   1bcb4:	mov	r1, r4
   1bcb8:	mov	r0, r9
   1bcbc:	bl	1b83c <__generate_code_for_body@@Base+0x1570>
   1bcc0:	subs	r6, r0, #0
   1bcc4:	beq	1bdf0 <__generate_code_for_body@@Base+0x1b24>
   1bcc8:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1bccc:	ldr	r3, [r4, #52]	; 0x34
   1bcd0:	add	r5, r5, #1
   1bcd4:	cmp	r3, r5
   1bcd8:	beq	1bc30 <__generate_code_for_body@@Base+0x1964>
   1bcdc:	ldr	r3, [r4, #56]	; 0x38
   1bce0:	cmp	r0, #16777216	; 0x1000000
   1bce4:	ldr	r8, [r3, r5, lsl #2]
   1bce8:	bne	1bdf0 <__generate_code_for_body@@Base+0x1b24>
   1bcec:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1bcf0:	cmp	r0, #0
   1bcf4:	beq	1bcc8 <__generate_code_for_body@@Base+0x19fc>
   1bcf8:	cmp	r0, #3
   1bcfc:	bne	1bdf0 <__generate_code_for_body@@Base+0x1b24>
   1bd00:	cmp	r8, #0
   1bd04:	beq	1bcac <__generate_code_for_body@@Base+0x19e0>
   1bd08:	ldr	r3, [r8]
   1bd0c:	cmp	r4, r3
   1bd10:	bne	1bcac <__generate_code_for_body@@Base+0x19e0>
   1bd14:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1bd18:	ldr	r3, [r8, #4]
   1bd1c:	cmp	r0, r3
   1bd20:	bne	1bdf0 <__generate_code_for_body@@Base+0x1b24>
   1bd24:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1bd28:	ldr	r3, [r8, #8]
   1bd2c:	cmp	r0, r3
   1bd30:	bne	1bdf0 <__generate_code_for_body@@Base+0x1b24>
   1bd34:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1bd38:	ldr	r3, [r8, #12]
   1bd3c:	cmp	r0, r3
   1bd40:	bne	1bdf0 <__generate_code_for_body@@Base+0x1b24>
   1bd44:	ldr	r7, [pc, #232]	; 1be34 <__generate_code_for_body@@Base+0x1b68>
   1bd48:	ldr	fp, [sp, #12]
   1bd4c:	add	r8, r8, #16
   1bd50:	ldr	sl, [fp, #4]!
   1bd54:	cmp	sl, #0
   1bd58:	beq	1bd90 <__generate_code_for_body@@Base+0x1ac4>
   1bd5c:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1bd60:	str	r0, [sp]
   1bd64:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1bd68:	ldr	r3, [sp]
   1bd6c:	cmp	r3, r7
   1bd70:	bne	1bdf0 <__generate_code_for_body@@Base+0x1b24>
   1bd74:	ldr	r3, [r8]
   1bd78:	mov	r1, r3
   1bd7c:	cmp	r0, r3, lsl #1
   1bd80:	bne	1bdf0 <__generate_code_for_body@@Base+0x1b24>
   1bd84:	ldr	r0, [r8, #4]
   1bd88:	blx	sl
   1bd8c:	add	r8, r8, #8
   1bd90:	ldr	r3, [pc, #160]	; 1be38 <__generate_code_for_body@@Base+0x1b6c>
   1bd94:	add	r7, r7, #131072	; 0x20000
   1bd98:	cmp	r7, r3
   1bd9c:	bne	1bd50 <__generate_code_for_body@@Base+0x1a84>
   1bda0:	bl	1a5b0 <__generate_code_for_body@@Base+0x2e4>
   1bda4:	cmp	r0, #0
   1bda8:	beq	1bcc8 <__generate_code_for_body@@Base+0x19fc>
   1bdac:	mov	r8, r0
   1bdb0:	cmp	r8, #0
   1bdb4:	blt	1bde0 <__generate_code_for_body@@Base+0x1b14>
   1bdb8:	ldr	r2, [pc, #124]	; 1be3c <__generate_code_for_body@@Base+0x1b70>
   1bdbc:	add	r2, pc, r2
   1bdc0:	ldr	r0, [pc, #120]	; 1be40 <__generate_code_for_body@@Base+0x1b74>
   1bdc4:	mov	r1, r9
   1bdc8:	add	r0, pc, r0
   1bdcc:	bl	1a864 <__generate_code_for_body@@Base+0x598>
   1bdd0:	mvn	r0, #0
   1bdd4:	add	sp, sp, #6080	; 0x17c0
   1bdd8:	add	sp, sp, #28
   1bddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bde0:	ldr	r2, [pc, #92]	; 1be44 <__generate_code_for_body@@Base+0x1b78>
   1bde4:	add	r2, pc, r2
   1bde8:	b	1bdc0 <__generate_code_for_body@@Base+0x1af4>
   1bdec:	mov	r5, #0
   1bdf0:	ldr	r2, [pc, #80]	; 1be48 <__generate_code_for_body@@Base+0x1b7c>
   1bdf4:	ldr	r0, [pc, #80]	; 1be4c <__generate_code_for_body@@Base+0x1b80>
   1bdf8:	mov	r3, r5
   1bdfc:	mov	r1, r9
   1be00:	add	r2, pc, r2
   1be04:	add	r0, pc, r0
   1be08:	bl	1a864 <__generate_code_for_body@@Base+0x598>
   1be0c:	mvn	r0, #0
   1be10:	add	sp, sp, #6080	; 0x17c0
   1be14:	add	sp, sp, #28
   1be18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be1c:	mvn	r0, #0
   1be20:	b	1bc3c <__generate_code_for_body@@Base+0x1970>
   1be24:	ldrdeq	r3, [r1], -r0
   1be28:	andeq	r1, r0, r8, asr #15
   1be2c:	ldrdeq	r1, [r0], -r0
   1be30:	andeq	r3, r1, r0, ror #21
   1be34:			; <UNDEFINED> instruction: 0x01a10000
   1be38:			; <UNDEFINED> instruction: 0x01b30000
   1be3c:	andeq	r1, r0, ip, ror #5
   1be40:	andeq	r1, r0, ip, lsl r3
   1be44:			; <UNDEFINED> instruction: 0x000012b8
   1be48:			; <UNDEFINED> instruction: 0x000012b0
   1be4c:			; <UNDEFINED> instruction: 0x000012b8
   1be50:	ldr	r3, [pc, #72]	; 1bea0 <__generate_code_for_body@@Base+0x1bd4>
   1be54:	ldr	r2, [pc, #72]	; 1bea4 <__generate_code_for_body@@Base+0x1bd8>
   1be58:	add	r3, pc, r3
   1be5c:	push	{r4, r5, r6, lr}
   1be60:	mov	r5, r0
   1be64:	ldr	r4, [r3, r2]
   1be68:	ldr	r0, [r4, #8]
   1be6c:	cmp	r0, #0
   1be70:	bne	1be98 <__generate_code_for_body@@Base+0x1bcc>
   1be74:	lsl	r1, r5, #2
   1be78:	mov	r2, #0
   1be7c:	ldr	r0, [r4]
   1be80:	bl	11a08 <fseek@plt>
   1be84:	ldr	r0, [r4]
   1be88:	bl	118d0 <ftell@plt>
   1be8c:	asr	r0, r0, #2
   1be90:	str	r0, [r4, #4]
   1be94:	pop	{r4, r5, r6, pc}
   1be98:	bl	1a65c <__generate_code_for_body@@Base+0x390>
   1be9c:	b	1be74 <__generate_code_for_body@@Base+0x1ba8>
   1bea0:	andeq	r2, r1, r0, lsr #3
   1bea4:	andeq	r0, r0, ip, lsr #1
   1bea8:	cmp	r2, #0
   1beac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1beb0:	mov	r8, r0
   1beb4:	sub	sp, sp, #20
   1beb8:	mov	r5, r1
   1bebc:	mov	r4, r3
   1bec0:	beq	1c090 <__generate_code_for_body@@Base+0x1dc4>
   1bec4:	cmp	r4, #0
   1bec8:	bne	1c0ac <__generate_code_for_body@@Base+0x1de0>
   1becc:	mov	r1, r5
   1bed0:	ldr	r5, [pc, #480]	; 1c0b8 <__generate_code_for_body@@Base+0x1dec>
   1bed4:	mov	r0, #-1560281088	; 0xa3000000
   1bed8:	add	r5, pc, r5
   1bedc:	bl	1b6d0 <__generate_code_for_body@@Base+0x1404>
   1bee0:	ldr	r4, [r5]
   1bee4:	cmp	r4, #0
   1bee8:	beq	1bf14 <__generate_code_for_body@@Base+0x1c48>
   1beec:	add	r1, r4, #8
   1bef0:	mov	r0, #-1560281088	; 0xa3000000
   1bef4:	bl	1b6d0 <__generate_code_for_body@@Base+0x1404>
   1bef8:	ldr	r3, [r5]
   1befc:	mov	r0, r3
   1bf00:	ldr	r4, [r3]
   1bf04:	bl	118b8 <free@plt>
   1bf08:	cmp	r4, #0
   1bf0c:	str	r4, [r5]
   1bf10:	bne	1beec <__generate_code_for_body@@Base+0x1c20>
   1bf14:	ldr	r3, [r8, #52]	; 0x34
   1bf18:	cmp	r3, #0
   1bf1c:	beq	1c068 <__generate_code_for_body@@Base+0x1d9c>
   1bf20:	ldr	r3, [pc, #404]	; 1c0bc <__generate_code_for_body@@Base+0x1df0>
   1bf24:	ldr	r9, [pc, #404]	; 1c0c0 <__generate_code_for_body@@Base+0x1df4>
   1bf28:	add	r3, pc, r3
   1bf2c:	str	r3, [sp, #4]
   1bf30:	ldr	r3, [pc, #396]	; 1c0c4 <__generate_code_for_body@@Base+0x1df8>
   1bf34:	mov	r7, #0
   1bf38:	add	r3, pc, r3
   1bf3c:	str	r3, [sp, #12]
   1bf40:	b	1bf7c <__generate_code_for_body@@Base+0x1cb0>
   1bf44:	ldr	r3, [r8, #56]	; 0x38
   1bf48:	ldr	r4, [r3, r7, lsl #2]
   1bf4c:	cmp	r4, #0
   1bf50:	beq	1bf60 <__generate_code_for_body@@Base+0x1c94>
   1bf54:	ldr	r3, [r4]
   1bf58:	cmp	r3, r8
   1bf5c:	beq	1c078 <__generate_code_for_body@@Base+0x1dac>
   1bf60:	mov	r1, #0
   1bf64:	mov	r0, #16777216	; 0x1000000
   1bf68:	bl	1b6b0 <__generate_code_for_body@@Base+0x13e4>
   1bf6c:	ldr	r3, [r8, #52]	; 0x34
   1bf70:	add	r7, r7, #1
   1bf74:	cmp	r3, r7
   1bf78:	beq	1c068 <__generate_code_for_body@@Base+0x1d9c>
   1bf7c:	ldr	r3, [sp, #4]
   1bf80:	ldr	r4, [r3, #4]
   1bf84:	cmp	r4, #0
   1bf88:	beq	1bf44 <__generate_code_for_body@@Base+0x1c78>
   1bf8c:	ldr	r3, [r4, #4]
   1bf90:	cmp	r3, r7
   1bf94:	bne	1bf44 <__generate_code_for_body@@Base+0x1c78>
   1bf98:	mov	r3, #1
   1bf9c:	mov	r1, #3
   1bfa0:	mov	r0, #16777216	; 0x1000000
   1bfa4:	add	r4, r4, #8
   1bfa8:	str	r3, [sp, #8]
   1bfac:	bl	1b6b0 <__generate_code_for_body@@Base+0x13e4>
   1bfb0:	ldr	r0, [r4, #4]
   1bfb4:	bl	1b678 <__generate_code_for_body@@Base+0x13ac>
   1bfb8:	ldr	r0, [r4, #8]
   1bfbc:	bl	1b678 <__generate_code_for_body@@Base+0x13ac>
   1bfc0:	ldr	r0, [r4, #12]
   1bfc4:	bl	1b678 <__generate_code_for_body@@Base+0x13ac>
   1bfc8:	ldr	r5, [pc, #248]	; 1c0c8 <__generate_code_for_body@@Base+0x1dfc>
   1bfcc:	add	r4, r4, #16
   1bfd0:	add	r6, r8, #12
   1bfd4:	b	1bfe4 <__generate_code_for_body@@Base+0x1d18>
   1bfd8:	add	r5, r5, #131072	; 0x20000
   1bfdc:	cmp	r5, r9
   1bfe0:	beq	1c034 <__generate_code_for_body@@Base+0x1d68>
   1bfe4:	ldr	r3, [r6, #4]!
   1bfe8:	cmp	r3, #0
   1bfec:	beq	1bfd8 <__generate_code_for_body@@Base+0x1d0c>
   1bff0:	ldr	fp, [r4]
   1bff4:	mov	r0, r5
   1bff8:	sub	sl, fp, #1
   1bffc:	lsl	r1, fp, #1
   1c000:	bl	1b6b0 <__generate_code_for_body@@Base+0x13e4>
   1c004:	cmp	fp, #0
   1c008:	ldr	fp, [r4, #4]
   1c00c:	beq	1c024 <__generate_code_for_body@@Base+0x1d58>
   1c010:	sub	sl, sl, #1
   1c014:	ldrd	r0, [fp], #8
   1c018:	bl	1b690 <__generate_code_for_body@@Base+0x13c4>
   1c01c:	cmn	sl, #1
   1c020:	bne	1c010 <__generate_code_for_body@@Base+0x1d44>
   1c024:	add	r5, r5, #131072	; 0x20000
   1c028:	cmp	r5, r9
   1c02c:	add	r4, r4, #8
   1c030:	bne	1bfe4 <__generate_code_for_body@@Base+0x1d18>
   1c034:	ldr	r3, [sp, #8]
   1c038:	cmp	r3, #0
   1c03c:	beq	1bf6c <__generate_code_for_body@@Base+0x1ca0>
   1c040:	ldr	r4, [sp, #12]
   1c044:	mov	r2, #9
   1c048:	mov	r0, r8
   1c04c:	ldr	r1, [r4, #4]
   1c050:	bl	1a898 <__generate_code_for_body@@Base+0x5cc>
   1c054:	ldr	r3, [r8, #52]	; 0x34
   1c058:	add	r7, r7, #1
   1c05c:	cmp	r3, r7
   1c060:	str	r0, [r4, #4]
   1c064:	bne	1bf7c <__generate_code_for_body@@Base+0x1cb0>
   1c068:	mov	r0, #0
   1c06c:	add	sp, sp, #20
   1c070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c074:	b	1b678 <__generate_code_for_body@@Base+0x13ac>
   1c078:	mov	r1, #3
   1c07c:	mov	r0, #16777216	; 0x1000000
   1c080:	bl	1b6b0 <__generate_code_for_body@@Base+0x13e4>
   1c084:	mov	r3, #0
   1c088:	str	r3, [sp, #8]
   1c08c:	b	1bfb0 <__generate_code_for_body@@Base+0x1ce4>
   1c090:	ldr	r1, [pc, #52]	; 1c0cc <__generate_code_for_body@@Base+0x1e00>
   1c094:	ldr	r0, [pc, #52]	; 1c0d0 <__generate_code_for_body@@Base+0x1e04>
   1c098:	bl	1b6b0 <__generate_code_for_body@@Base+0x13e4>
   1c09c:	ldr	r0, [r8, #8]
   1c0a0:	bl	1b678 <__generate_code_for_body@@Base+0x13ac>
   1c0a4:	cmp	r4, #0
   1c0a8:	beq	1becc <__generate_code_for_body@@Base+0x1c00>
   1c0ac:	mov	r0, r4
   1c0b0:	bl	1be50 <__generate_code_for_body@@Base+0x1b84>
   1c0b4:	b	1becc <__generate_code_for_body@@Base+0x1c00>
   1c0b8:	andeq	r3, r1, r8, lsr #17
   1c0bc:	andeq	r3, r1, r8, asr r8
   1c0c0:			; <UNDEFINED> instruction: 0x01b30000
   1c0c4:	andeq	r3, r1, r8, asr #16
   1c0c8:			; <UNDEFINED> instruction: 0x01a10000
   1c0cc:	teqmi	r8, sl, lsr #6
   1c0d0:	strbvs	r6, [r3, -r1, ror #8]!

0001c0d4 <__gcov_sort_n_vals@@Base>:
   1c0d4:	cmp	r1, #2
   1c0d8:	bxle	lr
   1c0dc:	sub	r1, r1, #3
   1c0e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0e4:	add	r2, r0, #8
   1c0e8:	sub	sp, sp, #20
   1c0ec:	mov	r6, r0
   1c0f0:	bic	r7, r1, #1
   1c0f4:	mvn	r8, #15
   1c0f8:	mov	lr, #0
   1c0fc:	ldrd	r0, [r2]
   1c100:	ldrd	r4, [r2, #16]
   1c104:	ldrd	sl, [r2, #8]
   1c108:	add	r9, r2, #16
   1c10c:	cmp	r0, r4
   1c110:	sbcs	r3, r1, r5
   1c114:	mov	ip, r9
   1c118:	sub	r1, r6, r8
   1c11c:	strd	sl, [sp]
   1c120:	mov	r3, lr
   1c124:	bge	1c18c <__gcov_sort_n_vals@@Base+0xb8>
   1c128:	add	sl, r8, #16
   1c12c:	mvn	fp, #1
   1c130:	add	sl, r2, sl
   1c134:	orr	fp, lr, fp
   1c138:	str	r7, [sp, #8]
   1c13c:	str	r6, [sp, #12]
   1c140:	b	1c158 <__gcov_sort_n_vals@@Base+0x84>
   1c144:	ldrd	r6, [ip, #-16]
   1c148:	sub	r2, r2, #16
   1c14c:	cmp	r6, r4
   1c150:	sbcs	r1, r7, r5
   1c154:	bge	1c1b4 <__gcov_sort_n_vals@@Base+0xe0>
   1c158:	ldrd	r6, [r2, #-8]
   1c15c:	lsl	r1, r3, #3
   1c160:	mov	r0, r3
   1c164:	strd	r6, [r2, #8]
   1c168:	ldrd	r6, [sl, r1]
   1c16c:	sub	r3, r3, #2
   1c170:	cmp	r3, fp
   1c174:	strd	r6, [r2, #16]
   1c178:	mov	ip, r2
   1c17c:	bne	1c144 <__gcov_sort_n_vals@@Base+0x70>
   1c180:	ldr	r6, [sp, #12]
   1c184:	ldr	r7, [sp, #8]
   1c188:	add	r1, r6, r1
   1c18c:	ldrd	r2, [sp]
   1c190:	cmp	lr, r7
   1c194:	sub	r8, r8, #16
   1c198:	strd	r2, [r1]
   1c19c:	add	lr, lr, #2
   1c1a0:	strd	r4, [ip]
   1c1a4:	mov	r2, r9
   1c1a8:	bne	1c0fc <__gcov_sort_n_vals@@Base+0x28>
   1c1ac:	add	sp, sp, #20
   1c1b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1b4:	ldr	r6, [sp, #12]
   1c1b8:	ldr	r7, [sp, #8]
   1c1bc:	add	r1, r6, r0, lsl #3
   1c1c0:	b	1c18c <__gcov_sort_n_vals@@Base+0xb8>
   1c1c4:	push	{r4, r5, r6, lr}
   1c1c8:	ldr	r4, [pc, #76]	; 1c21c <__gcov_sort_n_vals@@Base+0x148>
   1c1cc:	smull	r2, r3, r4, r0
   1c1d0:	asr	r4, r0, #31
   1c1d4:	rsb	r4, r4, r3, asr #1
   1c1d8:	add	r4, r4, r4, lsl #3
   1c1dc:	subs	r4, r0, r4
   1c1e0:	bne	1c218 <__gcov_sort_n_vals@@Base+0x144>
   1c1e4:	cmp	r0, #0
   1c1e8:	mov	r6, r0
   1c1ec:	ldr	r5, [r1]
   1c1f0:	pople	{r4, r5, r6, pc}
   1c1f4:	add	r5, r5, #8
   1c1f8:	mov	r0, r5
   1c1fc:	add	r4, r4, #9
   1c200:	mov	r1, #8
   1c204:	bl	1c0d4 <__gcov_sort_n_vals@@Base>
   1c208:	cmp	r6, r4
   1c20c:	add	r5, r5, #72	; 0x48
   1c210:	bgt	1c1f8 <__gcov_sort_n_vals@@Base+0x124>
   1c214:	pop	{r4, r5, r6, pc}
   1c218:	bl	11a20 <abort@plt>
   1c21c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   1c220:	ldr	r3, [r0, #48]	; 0x30
   1c224:	cmp	r3, #0
   1c228:	bxeq	lr
   1c22c:	push	{r4, r5, r6, lr}
   1c230:	ldr	lr, [r0, #52]	; 0x34
   1c234:	cmp	lr, #0
   1c238:	popeq	{r4, r5, r6, pc}
   1c23c:	mov	r5, r0
   1c240:	mov	r4, #0
   1c244:	add	r6, r0, #12
   1c248:	ldr	r1, [r5, #56]	; 0x38
   1c24c:	mov	r2, r6
   1c250:	mov	r3, #0
   1c254:	ldr	r1, [r1, r4, lsl #2]
   1c258:	add	r1, r1, #16
   1c25c:	ldr	ip, [r2, #4]!
   1c260:	cmp	ip, #0
   1c264:	beq	1c274 <__gcov_sort_n_vals@@Base+0x1a0>
   1c268:	cmp	r3, #8
   1c26c:	beq	1c290 <__gcov_sort_n_vals@@Base+0x1bc>
   1c270:	add	r1, r1, #8
   1c274:	add	r3, r3, #1
   1c278:	cmp	r3, #9
   1c27c:	bne	1c25c <__gcov_sort_n_vals@@Base+0x188>
   1c280:	add	r4, r4, #1
   1c284:	cmp	lr, r4
   1c288:	bne	1c248 <__gcov_sort_n_vals@@Base+0x174>
   1c28c:	pop	{r4, r5, r6, pc}
   1c290:	ldr	r0, [r1], #4
   1c294:	bl	1c1c4 <__gcov_sort_n_vals@@Base+0xf0>
   1c298:	ldr	lr, [r5, #52]	; 0x34
   1c29c:	b	1c280 <__gcov_sort_n_vals@@Base+0x1ac>
   1c2a0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c2a4:	sub	sp, sp, #6080	; 0x17c0
   1c2a8:	ldr	ip, [pc, #396]	; 1c43c <__gcov_sort_n_vals@@Base+0x368>
   1c2ac:	sub	sp, sp, #36	; 0x24
   1c2b0:	add	ip, pc, ip
   1c2b4:	add	r5, sp, #2016	; 0x7e0
   1c2b8:	mov	r4, r0
   1c2bc:	mov	r6, r1
   1c2c0:	mov	r1, #0
   1c2c4:	str	r1, [ip, #4]
   1c2c8:	str	r1, [ip]
   1c2cc:	mov	r8, r2
   1c2d0:	mov	r7, r3
   1c2d4:	str	r1, [r5, #-2000]	; 0xfffff830
   1c2d8:	str	r1, [r5, #-1996]	; 0xfffff834
   1c2dc:	bl	1c220 <__gcov_sort_n_vals@@Base+0x14c>
   1c2e0:	mov	r1, r6
   1c2e4:	ldr	r0, [r4, #12]
   1c2e8:	bl	1b4f0 <__generate_code_for_body@@Base+0x1224>
   1c2ec:	cmn	r0, #1
   1c2f0:	beq	1c36c <__gcov_sort_n_vals@@Base+0x298>
   1c2f4:	bl	1b7d8 <__generate_code_for_body@@Base+0x150c>
   1c2f8:	cmp	r0, #0
   1c2fc:	beq	1c378 <__gcov_sort_n_vals@@Base+0x2a4>
   1c300:	ldr	r2, [pc, #312]	; 1c440 <__gcov_sort_n_vals@@Base+0x36c>
   1c304:	ldr	r1, [r6]
   1c308:	cmp	r0, r2
   1c30c:	beq	1c3d0 <__gcov_sort_n_vals@@Base+0x2fc>
   1c310:	ldr	r0, [pc, #300]	; 1c444 <__gcov_sort_n_vals@@Base+0x370>
   1c314:	add	r0, pc, r0
   1c318:	bl	1a864 <__generate_code_for_body@@Base+0x598>
   1c31c:	ldr	r5, [pc, #292]	; 1c448 <__gcov_sort_n_vals@@Base+0x374>
   1c320:	add	r5, pc, r5
   1c324:	ldr	r1, [r5, #4]
   1c328:	cmp	r1, #0
   1c32c:	beq	1c34c <__gcov_sort_n_vals@@Base+0x278>
   1c330:	mov	r2, #9
   1c334:	mov	r0, r4
   1c338:	bl	1a898 <__generate_code_for_body@@Base+0x5cc>
   1c33c:	cmp	r0, #0
   1c340:	mov	r1, r0
   1c344:	str	r0, [r5, #4]
   1c348:	bne	1c330 <__gcov_sort_n_vals@@Base+0x25c>
   1c34c:	bl	1b608 <__generate_code_for_body@@Base+0x133c>
   1c350:	cmp	r0, #0
   1c354:	beq	1c36c <__gcov_sort_n_vals@@Base+0x298>
   1c358:	blt	1c430 <__gcov_sort_n_vals@@Base+0x35c>
   1c35c:	ldr	r0, [pc, #232]	; 1c44c <__gcov_sort_n_vals@@Base+0x378>
   1c360:	add	r0, pc, r0
   1c364:	ldr	r1, [r6]
   1c368:	bl	1a864 <__generate_code_for_body@@Base+0x598>
   1c36c:	add	sp, sp, #6080	; 0x17c0
   1c370:	add	sp, sp, #36	; 0x24
   1c374:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c378:	bl	1b3a8 <__generate_code_for_body@@Base+0x10dc>
   1c37c:	ldr	r1, [r5, #-2000]	; 0xfffff830
   1c380:	add	r9, sp, #24
   1c384:	cmp	r1, #0
   1c388:	beq	1c418 <__gcov_sort_n_vals@@Base+0x344>
   1c38c:	add	r3, sp, #6144	; 0x1800
   1c390:	str	r7, [sp, #4]
   1c394:	ldr	r3, [r3]
   1c398:	mov	r1, r8
   1c39c:	str	r3, [sp]
   1c3a0:	add	r2, r4, #16
   1c3a4:	mov	r3, r9
   1c3a8:	ldr	r0, [r6]
   1c3ac:	bl	1b254 <__generate_code_for_body@@Base+0xf88>
   1c3b0:	cmn	r0, #1
   1c3b4:	beq	1c31c <__gcov_sort_n_vals@@Base+0x248>
   1c3b8:	mov	r1, r9
   1c3bc:	ldr	r3, [r5, #-2000]	; 0xfffff830
   1c3c0:	ldr	r2, [r5, #-1996]	; 0xfffff834
   1c3c4:	mov	r0, r4
   1c3c8:	bl	1bea8 <__generate_code_for_body@@Base+0x1bdc>
   1c3cc:	b	1c31c <__gcov_sort_n_vals@@Base+0x248>
   1c3d0:	add	ip, sp, #20
   1c3d4:	add	r3, sp, #16
   1c3d8:	str	r7, [sp, #8]
   1c3dc:	stm	sp, {r3, ip}
   1c3e0:	add	r3, sp, #6144	; 0x1800
   1c3e4:	add	r9, sp, #24
   1c3e8:	ldr	r3, [r3]
   1c3ec:	mov	r0, r1
   1c3f0:	mov	r2, r9
   1c3f4:	add	r3, r3, #8
   1c3f8:	mov	r1, r4
   1c3fc:	bl	1bb3c <__generate_code_for_body@@Base+0x1870>
   1c400:	cmn	r0, #1
   1c404:	beq	1c31c <__gcov_sort_n_vals@@Base+0x248>
   1c408:	bl	1b3a8 <__generate_code_for_body@@Base+0x10dc>
   1c40c:	ldr	r1, [r5, #-2000]	; 0xfffff830
   1c410:	cmp	r1, #0
   1c414:	bne	1c38c <__gcov_sort_n_vals@@Base+0x2b8>
   1c418:	ldr	r2, [pc, #48]	; 1c450 <__gcov_sort_n_vals@@Base+0x37c>
   1c41c:	mov	r0, r9
   1c420:	bl	11990 <memset@plt>
   1c424:	ldr	r3, [r5, #-1996]	; 0xfffff834
   1c428:	str	r3, [r5, #-2000]	; 0xfffff830
   1c42c:	b	1c38c <__gcov_sort_n_vals@@Base+0x2b8>
   1c430:	ldr	r0, [pc, #28]	; 1c454 <__gcov_sort_n_vals@@Base+0x380>
   1c434:	add	r0, pc, r0
   1c438:	b	1c364 <__gcov_sort_n_vals@@Base+0x290>
   1c43c:	ldrdeq	r3, [r1], -r0
   1c440:	strbvs	r6, [r3, -r1, ror #8]!
   1c444:	andeq	r0, r0, r8, lsr #28
   1c448:	andeq	r3, r1, r0, ror #8
   1c44c:	andeq	r0, r0, r0, asr #27
   1c450:	andeq	r1, r0, r8, asr #15
   1c454:	andeq	r0, r0, ip, asr #25
   1c458:	push	{r4, r5, r6, r7, r8, lr}
   1c45c:	sub	sp, sp, #6080	; 0x17c0
   1c460:	sub	sp, sp, #32
   1c464:	add	r6, sp, #24
   1c468:	add	r2, sp, #12
   1c46c:	mov	r8, r1
   1c470:	mov	r1, r6
   1c474:	mov	r4, r0
   1c478:	bl	1aab0 <__generate_code_for_body@@Base+0x7e4>
   1c47c:	add	r5, sp, #8
   1c480:	mov	r7, r0
   1c484:	mov	r0, r5
   1c488:	bl	1ac44 <__generate_code_for_body@@Base+0x978>
   1c48c:	cmp	r4, #0
   1c490:	beq	1c4b8 <__gcov_sort_n_vals@@Base+0x3e4>
   1c494:	mov	r0, r4
   1c498:	str	r6, [sp]
   1c49c:	mov	r3, r7
   1c4a0:	mov	r2, r8
   1c4a4:	mov	r1, r5
   1c4a8:	bl	1c2a0 <__gcov_sort_n_vals@@Base+0x1cc>
   1c4ac:	ldr	r4, [r4, #4]
   1c4b0:	cmp	r4, #0
   1c4b4:	bne	1c494 <__gcov_sort_n_vals@@Base+0x3c0>
   1c4b8:	ldr	r0, [sp, #8]
   1c4bc:	bl	118b8 <free@plt>
   1c4c0:	add	sp, sp, #6080	; 0x17c0
   1c4c4:	add	sp, sp, #32
   1c4c8:	pop	{r4, r5, r6, r7, r8, pc}
   1c4cc:	ldrb	r1, [r0, #4]
   1c4d0:	tst	r1, #1
   1c4d4:	bxne	lr
   1c4d8:	push	{r4, lr}
   1c4dc:	lsr	r1, r1, #1
   1c4e0:	mov	r4, r0
   1c4e4:	and	r1, r1, #1
   1c4e8:	ldr	r0, [r0]
   1c4ec:	bl	1c458 <__gcov_sort_n_vals@@Base+0x384>
   1c4f0:	ldrb	r3, [r4, #4]
   1c4f4:	bic	r3, r3, #3
   1c4f8:	orr	r3, r3, #3
   1c4fc:	strb	r3, [r4, #4]
   1c500:	pop	{r4, pc}
   1c504:	push	{r4, r5, r6, lr}
   1c508:	ldr	r4, [pc, #84]	; 1c564 <__gcov_sort_n_vals@@Base+0x490>
   1c50c:	ldr	r5, [pc, #84]	; 1c568 <__gcov_sort_n_vals@@Base+0x494>
   1c510:	add	r4, pc, r4
   1c514:	mov	r0, r4
   1c518:	bl	1c4cc <__gcov_sort_n_vals@@Base+0x3f8>
   1c51c:	ldr	r3, [r4, #8]
   1c520:	add	r5, pc, r5
   1c524:	cmp	r3, #0
   1c528:	ldrne	r2, [r4, #12]
   1c52c:	strne	r2, [r3, #12]
   1c530:	ldr	r2, [pc, #52]	; 1c56c <__gcov_sort_n_vals@@Base+0x498>
   1c534:	add	r2, pc, r2
   1c538:	ldr	r2, [r2, #12]
   1c53c:	cmp	r2, #0
   1c540:	strne	r3, [r2, #8]
   1c544:	beq	1c550 <__gcov_sort_n_vals@@Base+0x47c>
   1c548:	pop	{r4, r5, r6, lr}
   1c54c:	b	1a60c <__generate_code_for_body@@Base+0x340>
   1c550:	ldr	r2, [pc, #24]	; 1c570 <__gcov_sort_n_vals@@Base+0x49c>
   1c554:	ldr	r2, [r5, r2]
   1c558:	pop	{r4, r5, r6, lr}
   1c55c:	str	r3, [r2, #4]
   1c560:	b	1a60c <__generate_code_for_body@@Base+0x340>
   1c564:	andeq	r3, r1, ip, ror r2
   1c568:	ldrdeq	r1, [r1], -r8
   1c56c:	andeq	r3, r1, r8, asr r2
   1c570:	andeq	r0, r0, r8, lsr #1
   1c574:	ldr	r1, [r0]
   1c578:	push	{r4, r5, r6, lr}
   1c57c:	cmp	r1, #0
   1c580:	ldr	r5, [pc, #156]	; 1c624 <__gcov_sort_n_vals@@Base+0x550>
   1c584:	add	r5, pc, r5
   1c588:	popeq	{r4, r5, r6, pc}
   1c58c:	ldr	r3, [r0, #52]	; 0x34
   1c590:	cmp	r3, #0
   1c594:	popeq	{r4, r5, r6, pc}
   1c598:	mov	r4, r0
   1c59c:	mov	r2, #0
   1c5a0:	add	r0, r0, #12
   1c5a4:	bl	1b1f4 <__generate_code_for_body@@Base+0xf28>
   1c5a8:	cmp	r0, #0
   1c5ac:	popeq	{r4, r5, r6, pc}
   1c5b0:	ldr	r6, [pc, #112]	; 1c628 <__gcov_sort_n_vals@@Base+0x554>
   1c5b4:	add	r6, pc, r6
   1c5b8:	ldr	r2, [r6]
   1c5bc:	cmp	r2, #0
   1c5c0:	beq	1c5d8 <__gcov_sort_n_vals@@Base+0x504>
   1c5c4:	ldr	r3, [pc, #96]	; 1c62c <__gcov_sort_n_vals@@Base+0x558>
   1c5c8:	str	r2, [r4, #4]
   1c5cc:	add	r3, pc, r3
   1c5d0:	str	r4, [r3]
   1c5d4:	pop	{r4, r5, r6, pc}
   1c5d8:	ldr	r3, [pc, #80]	; 1c630 <__gcov_sort_n_vals@@Base+0x55c>
   1c5dc:	ldr	r2, [pc, #80]	; 1c634 <__gcov_sort_n_vals@@Base+0x560>
   1c5e0:	mov	r0, #12
   1c5e4:	ldr	r5, [r5, r3]
   1c5e8:	add	r2, pc, r2
   1c5ec:	ldr	r1, [r5]
   1c5f0:	bl	1b1f4 <__generate_code_for_body@@Base+0xf28>
   1c5f4:	cmp	r0, #0
   1c5f8:	ldreq	r2, [r6]
   1c5fc:	beq	1c5c4 <__gcov_sort_n_vals@@Base+0x4f0>
   1c600:	ldr	r3, [r5, #4]
   1c604:	cmp	r3, #0
   1c608:	str	r3, [r6, #8]
   1c60c:	strne	r6, [r3, #12]
   1c610:	ldr	r3, [pc, #32]	; 1c638 <__gcov_sort_n_vals@@Base+0x564>
   1c614:	add	r3, pc, r3
   1c618:	str	r3, [r5, #4]
   1c61c:	ldr	r2, [r3]
   1c620:	b	1c5c4 <__gcov_sort_n_vals@@Base+0x4f0>
   1c624:	andeq	r1, r1, r4, ror sl
   1c628:	ldrdeq	r3, [r1], -r8
   1c62c:	andeq	r3, r1, r0, asr #3
   1c630:	andeq	r0, r0, r8, lsr #1
   1c634:	andeq	r0, r0, r8, ror fp
   1c638:	andeq	r3, r1, r8, ror r1
   1c63c:	cmp	r3, #0
   1c640:	cmpeq	r2, #0
   1c644:	bne	1c668 <__gcov_sort_n_vals@@Base+0x594>
   1c648:	cmp	r1, #0
   1c64c:	movlt	r1, #-2147483648	; 0x80000000
   1c650:	movlt	r0, #0
   1c654:	blt	1c664 <__gcov_sort_n_vals@@Base+0x590>
   1c658:	cmpeq	r0, #0
   1c65c:	mvnne	r1, #-2147483648	; 0x80000000
   1c660:	mvnne	r0, #0
   1c664:	b	1c710 <__gcov_sort_n_vals@@Base+0x63c>
   1c668:	sub	sp, sp, #8
   1c66c:	push	{sp, lr}
   1c670:	cmp	r1, #0
   1c674:	blt	1c694 <__gcov_sort_n_vals@@Base+0x5c0>
   1c678:	cmp	r3, #0
   1c67c:	blt	1c6c8 <__gcov_sort_n_vals@@Base+0x5f4>
   1c680:	bl	1c764 <__gcov_sort_n_vals@@Base+0x690>
   1c684:	ldr	lr, [sp, #4]
   1c688:	add	sp, sp, #8
   1c68c:	pop	{r2, r3}
   1c690:	bx	lr
   1c694:	rsbs	r0, r0, #0
   1c698:	sbc	r1, r1, r1, lsl #1
   1c69c:	cmp	r3, #0
   1c6a0:	blt	1c6ec <__gcov_sort_n_vals@@Base+0x618>
   1c6a4:	bl	1c764 <__gcov_sort_n_vals@@Base+0x690>
   1c6a8:	ldr	lr, [sp, #4]
   1c6ac:	add	sp, sp, #8
   1c6b0:	pop	{r2, r3}
   1c6b4:	rsbs	r0, r0, #0
   1c6b8:	sbc	r1, r1, r1, lsl #1
   1c6bc:	rsbs	r2, r2, #0
   1c6c0:	sbc	r3, r3, r3, lsl #1
   1c6c4:	bx	lr
   1c6c8:	rsbs	r2, r2, #0
   1c6cc:	sbc	r3, r3, r3, lsl #1
   1c6d0:	bl	1c764 <__gcov_sort_n_vals@@Base+0x690>
   1c6d4:	ldr	lr, [sp, #4]
   1c6d8:	add	sp, sp, #8
   1c6dc:	pop	{r2, r3}
   1c6e0:	rsbs	r0, r0, #0
   1c6e4:	sbc	r1, r1, r1, lsl #1
   1c6e8:	bx	lr
   1c6ec:	rsbs	r2, r2, #0
   1c6f0:	sbc	r3, r3, r3, lsl #1
   1c6f4:	bl	1c764 <__gcov_sort_n_vals@@Base+0x690>
   1c6f8:	ldr	lr, [sp, #4]
   1c6fc:	add	sp, sp, #8
   1c700:	pop	{r2, r3}
   1c704:	rsbs	r2, r2, #0
   1c708:	sbc	r3, r3, r3, lsl #1
   1c70c:	bx	lr
   1c710:	push	{r1, lr}
   1c714:	mov	r0, #8
   1c718:	bl	11894 <raise@plt>
   1c71c:	pop	{r1, pc}
   1c720:	ldr	r3, [pc, #48]	; 1c758 <__gcov_sort_n_vals@@Base+0x684>
   1c724:	ldr	r2, [pc, #48]	; 1c75c <__gcov_sort_n_vals@@Base+0x688>
   1c728:	and	r3, r3, r0, lsr #1
   1c72c:	sub	r0, r0, r3
   1c730:	and	r3, r0, r2
   1c734:	and	r0, r2, r0, lsr #2
   1c738:	add	r3, r3, r0
   1c73c:	ldr	r0, [pc, #28]	; 1c760 <__gcov_sort_n_vals@@Base+0x68c>
   1c740:	add	r3, r3, r3, lsr #4
   1c744:	and	r0, r0, r3
   1c748:	add	r0, r0, r0, lsl #8
   1c74c:	add	r0, r0, r0, lsl #16
   1c750:	lsr	r0, r0, #24
   1c754:	bx	lr
   1c758:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   1c75c:	teqcc	r3, #-872415232	; 0xcc000000
   1c760:	svceq	0x000f0f0f
   1c764:	cmp	r1, r3
   1c768:	cmpeq	r0, r2
   1c76c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c770:	mov	r4, r0
   1c774:	movcc	r0, #0
   1c778:	mov	r5, r1
   1c77c:	ldr	lr, [sp, #36]	; 0x24
   1c780:	movcc	r1, r0
   1c784:	bcc	1c880 <__gcov_sort_n_vals@@Base+0x7ac>
   1c788:	cmp	r3, #0
   1c78c:	clzeq	ip, r2
   1c790:	clzne	ip, r3
   1c794:	addeq	ip, ip, #32
   1c798:	cmp	r5, #0
   1c79c:	clzeq	r1, r4
   1c7a0:	addeq	r1, r1, #32
   1c7a4:	clzne	r1, r5
   1c7a8:	sub	ip, ip, r1
   1c7ac:	sub	sl, ip, #32
   1c7b0:	lsl	r9, r3, ip
   1c7b4:	rsb	fp, ip, #32
   1c7b8:	orr	r9, r9, r2, lsl sl
   1c7bc:	orr	r9, r9, r2, lsr fp
   1c7c0:	lsl	r8, r2, ip
   1c7c4:	cmp	r5, r9
   1c7c8:	cmpeq	r4, r8
   1c7cc:	movcc	r0, #0
   1c7d0:	movcc	r1, r0
   1c7d4:	bcc	1c7f0 <__gcov_sort_n_vals@@Base+0x71c>
   1c7d8:	mov	r0, #1
   1c7dc:	subs	r4, r4, r8
   1c7e0:	lsl	r1, r0, sl
   1c7e4:	orr	r1, r1, r0, lsr fp
   1c7e8:	lsl	r0, r0, ip
   1c7ec:	sbc	r5, r5, r9
   1c7f0:	cmp	ip, #0
   1c7f4:	beq	1c880 <__gcov_sort_n_vals@@Base+0x7ac>
   1c7f8:	lsr	r6, r8, #1
   1c7fc:	orr	r6, r6, r9, lsl #31
   1c800:	lsr	r7, r9, #1
   1c804:	mov	r2, ip
   1c808:	b	1c82c <__gcov_sort_n_vals@@Base+0x758>
   1c80c:	subs	r3, r4, r6
   1c810:	sbc	r8, r5, r7
   1c814:	adds	r3, r3, r3
   1c818:	adc	r8, r8, r8
   1c81c:	adds	r4, r3, #1
   1c820:	adc	r5, r8, #0
   1c824:	subs	r2, r2, #1
   1c828:	beq	1c848 <__gcov_sort_n_vals@@Base+0x774>
   1c82c:	cmp	r5, r7
   1c830:	cmpeq	r4, r6
   1c834:	bcs	1c80c <__gcov_sort_n_vals@@Base+0x738>
   1c838:	adds	r4, r4, r4
   1c83c:	adc	r5, r5, r5
   1c840:	subs	r2, r2, #1
   1c844:	bne	1c82c <__gcov_sort_n_vals@@Base+0x758>
   1c848:	lsr	r3, r4, ip
   1c84c:	orr	r3, r3, r5, lsl fp
   1c850:	lsr	r2, r5, ip
   1c854:	orr	r3, r3, r5, lsr sl
   1c858:	adds	r0, r0, r4
   1c85c:	mov	r4, r3
   1c860:	lsl	r3, r2, ip
   1c864:	orr	r3, r3, r4, lsl sl
   1c868:	lsl	ip, r4, ip
   1c86c:	orr	r3, r3, r4, lsr fp
   1c870:	adc	r1, r1, r5
   1c874:	subs	r0, r0, ip
   1c878:	mov	r5, r2
   1c87c:	sbc	r1, r1, r3
   1c880:	cmp	lr, #0
   1c884:	strdne	r4, [lr]
   1c888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c88c <__libc_csu_init@@Base>:
   1c88c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c890:	mov	r7, r0
   1c894:	ldr	r6, [pc, #72]	; 1c8e4 <__libc_csu_init@@Base+0x58>
   1c898:	ldr	r5, [pc, #72]	; 1c8e8 <__libc_csu_init@@Base+0x5c>
   1c89c:	add	r6, pc, r6
   1c8a0:	add	r5, pc, r5
   1c8a4:	sub	r6, r6, r5
   1c8a8:	mov	r8, r1
   1c8ac:	mov	r9, r2
   1c8b0:	bl	11868 <fdopen@plt-0x20>
   1c8b4:	asrs	r6, r6, #2
   1c8b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c8bc:	mov	r4, #0
   1c8c0:	add	r4, r4, #1
   1c8c4:	ldr	r3, [r5], #4
   1c8c8:	mov	r2, r9
   1c8cc:	mov	r1, r8
   1c8d0:	mov	r0, r7
   1c8d4:	blx	r3
   1c8d8:	cmp	r6, r4
   1c8dc:	bne	1c8c0 <__libc_csu_init@@Base+0x34>
   1c8e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c8e4:	andeq	r1, r1, r8, asr r6
   1c8e8:	andeq	r1, r1, r8, lsr r6

0001c8ec <__libc_csu_fini@@Base>:
   1c8ec:	bx	lr

Disassembly of section .fini:

0001c8f0 <.fini>:
   1c8f0:	push	{r3, lr}
   1c8f4:	pop	{r3, pc}
