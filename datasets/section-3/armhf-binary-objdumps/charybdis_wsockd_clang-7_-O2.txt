
../repos/charybdis/wsockd/.libs/wsockd:     file format elf32-littlearm


Disassembly of section .init:

00010d84 <.init>:
   10d84:	push	{r3, lr}
   10d88:	bl	1105c <rb_base64_encode@plt+0x54>
   10d8c:	pop	{r3, pc}

Disassembly of section .plt:

00010d90 <open@plt-0x14>:
   10d90:	push	{lr}		; (str lr, [sp, #-4]!)
   10d94:	ldr	lr, [pc, #4]	; 10da0 <open@plt-0x4>
   10d98:	add	lr, pc, lr
   10d9c:	ldr	pc, [lr, #8]!
   10da0:	andeq	r4, r1, r0, ror #4

00010da4 <open@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #20, 20	; 0x14000
   10dac:	ldr	pc, [ip, #608]!	; 0x260

00010db0 <sigemptyset@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #20, 20	; 0x14000
   10db8:	ldr	pc, [ip, #600]!	; 0x258

00010dbc <strerror@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #20, 20	; 0x14000
   10dc4:	ldr	pc, [ip, #592]!	; 0x250

00010dc8 <rb_get_type@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #20, 20	; 0x14000
   10dd0:	ldr	pc, [ip, #584]!	; 0x248

00010dd4 <abort@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #20, 20	; 0x14000
   10ddc:	ldr	pc, [ip, #576]!	; 0x240

00010de0 <rb_event_addish@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #20, 20	; 0x14000
   10de8:	ldr	pc, [ip, #568]!	; 0x238

00010dec <rb_ignore_errno@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #20, 20	; 0x14000
   10df4:	ldr	pc, [ip, #560]!	; 0x230

00010df8 <__libc_start_main@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #20, 20	; 0x14000
   10e00:	ldr	pc, [ip, #552]!	; 0x228

00010e04 <rb_setselect@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #20, 20	; 0x14000
   10e0c:	ldr	pc, [ip, #544]!	; 0x220

00010e10 <__gmon_start__@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #20, 20	; 0x14000
   10e18:	ldr	pc, [ip, #536]!	; 0x218

00010e1c <rb_send_fd_buf@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #20, 20	; 0x14000
   10e24:	ldr	pc, [ip, #528]!	; 0x210

00010e28 <vsnprintf@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #20, 20	; 0x14000
   10e30:	ldr	pc, [ip, #520]!	; 0x208

00010e34 <getenv@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #20, 20	; 0x14000
   10e3c:	ldr	pc, [ip, #512]!	; 0x200

00010e40 <calloc@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #20, 20	; 0x14000
   10e48:	ldr	pc, [ip, #504]!	; 0x1f8

00010e4c <rb_set_nb@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #20, 20	; 0x14000
   10e54:	ldr	pc, [ip, #496]!	; 0x1f0

00010e58 <memset@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #20, 20	; 0x14000
   10e60:	ldr	pc, [ip, #488]!	; 0x1e8

00010e64 <rb_linebuf_parse@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #20, 20	; 0x14000
   10e6c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e70 <rb_strlcpy@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #20, 20	; 0x14000
   10e78:	ldr	pc, [ip, #472]!	; 0x1d8

00010e7c <rb_init_rawbuffers@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #20, 20	; 0x14000
   10e84:	ldr	pc, [ip, #464]!	; 0x1d0

00010e88 <free@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #20, 20	; 0x14000
   10e90:	ldr	pc, [ip, #456]!	; 0x1c8

00010e94 <rb_lib_loop@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #20, 20	; 0x14000
   10e9c:	ldr	pc, [ip, #448]!	; 0x1c0

00010ea0 <rb_read@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #20, 20	; 0x14000
   10ea8:	ldr	pc, [ip, #440]!	; 0x1b8

00010eac <rb_set_type@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #20, 20	; 0x14000
   10eb4:	ldr	pc, [ip, #432]!	; 0x1b0

00010eb8 <rb_linebuf_get@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #20, 20	; 0x14000
   10ec0:	ldr	pc, [ip, #424]!	; 0x1a8

00010ec4 <rb_linebuf_flush@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #20, 20	; 0x14000
   10ecc:	ldr	pc, [ip, #416]!	; 0x1a0

00010ed0 <strlen@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #20, 20	; 0x14000
   10ed8:	ldr	pc, [ip, #408]!	; 0x198

00010edc <memcpy@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #20, 20	; 0x14000
   10ee4:	ldr	pc, [ip, #400]!	; 0x190

00010ee8 <rb_linebuf_donebuf@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #20, 20	; 0x14000
   10ef0:	ldr	pc, [ip, #392]!	; 0x188

00010ef4 <rb_strcasestr@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #20, 20	; 0x14000
   10efc:	ldr	pc, [ip, #384]!	; 0x180

00010f00 <rb_close@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #20, 20	; 0x14000
   10f08:	ldr	pc, [ip, #376]!	; 0x178

00010f0c <strtol@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #20, 20	; 0x14000
   10f14:	ldr	pc, [ip, #368]!	; 0x170

00010f18 <sigaddset@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #20, 20	; 0x14000
   10f20:	ldr	pc, [ip, #360]!	; 0x168

00010f24 <rb_rawbuf_length@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #20, 20	; 0x14000
   10f2c:	ldr	pc, [ip, #352]!	; 0x160

00010f30 <rb_free_rawbuffer@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #20, 20	; 0x14000
   10f38:	ldr	pc, [ip, #344]!	; 0x158

00010f3c <close@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #20, 20	; 0x14000
   10f44:	ldr	pc, [ip, #336]!	; 0x150

00010f48 <fwrite@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #20, 20	; 0x14000
   10f50:	ldr	pc, [ip, #328]!	; 0x148

00010f54 <rb_outofmemory@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #20, 20	; 0x14000
   10f5c:	ldr	pc, [ip, #320]!	; 0x140

00010f60 <rb_rawbuf_get@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #20, 20	; 0x14000
   10f68:	ldr	pc, [ip, #312]!	; 0x138

00010f6c <sigaction@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #20, 20	; 0x14000
   10f74:	ldr	pc, [ip, #304]!	; 0x130

00010f78 <rb_lib_init@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #20, 20	; 0x14000
   10f80:	ldr	pc, [ip, #296]!	; 0x128

00010f84 <rb_new_rawbuffer@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #20, 20	; 0x14000
   10f8c:	ldr	pc, [ip, #288]!	; 0x120

00010f90 <rb_open@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #20, 20	; 0x14000
   10f98:	ldr	pc, [ip, #280]!	; 0x118

00010f9c <rb_recv_fd_buf@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #20, 20	; 0x14000
   10fa4:	ldr	pc, [ip, #272]!	; 0x110

00010fa8 <dup2@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #20, 20	; 0x14000
   10fb0:	ldr	pc, [ip, #264]!	; 0x108

00010fb4 <rb_linebuf_newbuf@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #20, 20	; 0x14000
   10fbc:	ldr	pc, [ip, #256]!	; 0x100

00010fc0 <rb_linebuf_init@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #20, 20	; 0x14000
   10fc8:	ldr	pc, [ip, #248]!	; 0xf8

00010fcc <getrlimit@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #20, 20	; 0x14000
   10fd4:	ldr	pc, [ip, #240]!	; 0xf0

00010fd8 <rb_rawbuf_append@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #20, 20	; 0x14000
   10fe0:	ldr	pc, [ip, #232]!	; 0xe8

00010fe4 <rb_rawbuf_flush@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #20, 20	; 0x14000
   10fec:	ldr	pc, [ip, #224]!	; 0xe0

00010ff0 <exit@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #20, 20	; 0x14000
   10ff8:	ldr	pc, [ip, #216]!	; 0xd8

00010ffc <__errno_location@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #20, 20	; 0x14000
   11004:	ldr	pc, [ip, #208]!	; 0xd0

00011008 <rb_base64_encode@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #20, 20	; 0x14000
   11010:	ldr	pc, [ip, #200]!	; 0xc8

Disassembly of section .text:

00011020 <.text>:
   11020:	mov	fp, #0
   11024:	mov	lr, #0
   11028:	pop	{r1}		; (ldr r1, [sp], #4)
   1102c:	mov	r2, sp
   11030:	push	{r2}		; (str r2, [sp, #-4]!)
   11034:	push	{r0}		; (str r0, [sp, #-4]!)
   11038:	ldr	ip, [pc, #16]	; 11050 <rb_base64_encode@plt+0x48>
   1103c:	push	{ip}		; (str ip, [sp, #-4]!)
   11040:	ldr	r0, [pc, #12]	; 11054 <rb_base64_encode@plt+0x4c>
   11044:	ldr	r3, [pc, #12]	; 11058 <rb_base64_encode@plt+0x50>
   11048:	bl	10df8 <__libc_start_main@plt>
   1104c:	bl	10dd4 <abort@plt>
   11050:	andeq	r4, r1, ip, lsr #1
   11054:	andeq	r1, r1, r0, lsl r1
   11058:	andeq	r4, r1, ip, asr #32
   1105c:	ldr	r3, [pc, #20]	; 11078 <rb_base64_encode@plt+0x70>
   11060:	ldr	r2, [pc, #20]	; 1107c <rb_base64_encode@plt+0x74>
   11064:	add	r3, pc, r3
   11068:	ldr	r2, [r3, r2]
   1106c:	cmp	r2, #0
   11070:	bxeq	lr
   11074:	b	10e10 <__gmon_start__@plt>
   11078:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1107c:	ldrdeq	r0, [r0], -ip
   11080:	ldr	r0, [pc, #24]	; 110a0 <rb_base64_encode@plt+0x98>
   11084:	ldr	r3, [pc, #24]	; 110a4 <rb_base64_encode@plt+0x9c>
   11088:	cmp	r3, r0
   1108c:	bxeq	lr
   11090:	ldr	r3, [pc, #16]	; 110a8 <rb_base64_encode@plt+0xa0>
   11094:	cmp	r3, #0
   11098:	bxeq	lr
   1109c:	bx	r3
   110a0:	andeq	r5, r2, ip, ror #1
   110a4:	andeq	r5, r2, ip, ror #1
   110a8:	andeq	r0, r0, r0
   110ac:	ldr	r0, [pc, #36]	; 110d8 <rb_base64_encode@plt+0xd0>
   110b0:	ldr	r1, [pc, #36]	; 110dc <rb_base64_encode@plt+0xd4>
   110b4:	sub	r1, r1, r0
   110b8:	asr	r1, r1, #2
   110bc:	add	r1, r1, r1, lsr #31
   110c0:	asrs	r1, r1, #1
   110c4:	bxeq	lr
   110c8:	ldr	r3, [pc, #16]	; 110e0 <rb_base64_encode@plt+0xd8>
   110cc:	cmp	r3, #0
   110d0:	bxeq	lr
   110d4:	bx	r3
   110d8:	andeq	r5, r2, ip, ror #1
   110dc:	andeq	r5, r2, ip, ror #1
   110e0:	andeq	r0, r0, r0
   110e4:	push	{r4, lr}
   110e8:	ldr	r4, [pc, #24]	; 11108 <rb_base64_encode@plt+0x100>
   110ec:	ldrb	r3, [r4]
   110f0:	cmp	r3, #0
   110f4:	popne	{r4, pc}
   110f8:	bl	11080 <rb_base64_encode@plt+0x78>
   110fc:	mov	r3, #1
   11100:	strb	r3, [r4]
   11104:	pop	{r4, pc}
   11108:	andeq	r5, r2, ip, ror #1
   1110c:	b	110ac <rb_base64_encode@plt+0xa4>
   11110:	push	{fp, lr}
   11114:	mov	fp, sp
   11118:	sub	sp, sp, #24
   1111c:	sub	r1, fp, #8
   11120:	mov	r0, #7
   11124:	bl	10fcc <getrlimit@plt>
   11128:	ldr	r7, [fp, #-8]
   1112c:	cmp	r0, #0
   11130:	ldr	r0, [pc, #624]	; 113a8 <rb_base64_encode@plt+0x3a0>
   11134:	add	r0, pc, r0
   11138:	movwne	r7, #65535	; 0xffff
   1113c:	bl	10e34 <getenv@plt>
   11140:	mov	r5, r0
   11144:	ldr	r0, [pc, #608]	; 113ac <rb_base64_encode@plt+0x3a4>
   11148:	add	r0, pc, r0
   1114c:	bl	10e34 <getenv@plt>
   11150:	mov	r4, r0
   11154:	ldr	r0, [pc, #596]	; 113b0 <rb_base64_encode@plt+0x3a8>
   11158:	add	r0, pc, r0
   1115c:	bl	10e34 <getenv@plt>
   11160:	cmp	r5, #0
   11164:	beq	11178 <rb_base64_encode@plt+0x170>
   11168:	cmp	r4, #0
   1116c:	movne	r8, r0
   11170:	cmpne	r0, #0
   11174:	bne	111b8 <rb_base64_encode@plt+0x1b0>
   11178:	ldr	r4, [pc, #612]	; 113e4 <rb_base64_encode@plt+0x3dc>
   1117c:	mov	r1, #52	; 0x34
   11180:	mov	r2, #1
   11184:	ldr	r4, [pc, r4]
   11188:	ldr	r3, [r4]
   1118c:	ldr	r0, [pc, #596]	; 113e8 <rb_base64_encode@plt+0x3e0>
   11190:	add	r0, pc, r0
   11194:	bl	10f48 <fwrite@plt>
   11198:	ldr	r3, [r4]
   1119c:	ldr	r0, [pc, #584]	; 113ec <rb_base64_encode@plt+0x3e4>
   111a0:	mov	r1, #49	; 0x31
   111a4:	mov	r2, #1
   111a8:	add	r0, pc, r0
   111ac:	bl	10f48 <fwrite@plt>
   111b0:	mov	r0, #1
   111b4:	bl	10ff0 <exit@plt>
   111b8:	mov	r0, r5
   111bc:	mov	r1, #0
   111c0:	mov	r2, #10
   111c4:	mov	r6, #0
   111c8:	bl	10f0c <strtol@plt>
   111cc:	mov	r5, r0
   111d0:	mov	r0, r4
   111d4:	mov	r1, #0
   111d8:	mov	r2, #10
   111dc:	bl	10f0c <strtol@plt>
   111e0:	mov	r4, r0
   111e4:	mov	r0, r8
   111e8:	mov	r1, #0
   111ec:	mov	r2, #10
   111f0:	bl	10f0c <strtol@plt>
   111f4:	ldr	r1, [pc, #440]	; 113b4 <rb_base64_encode@plt+0x3ac>
   111f8:	cmp	r7, #1
   111fc:	add	r1, pc, r1
   11200:	str	r0, [r1]
   11204:	bge	11220 <rb_base64_encode@plt+0x218>
   11208:	b	11238 <rb_base64_encode@plt+0x230>
   1120c:	cmp	r6, #3
   11210:	bcc	1122c <rb_base64_encode@plt+0x224>
   11214:	mov	r0, r6
   11218:	bl	10f3c <close@plt>
   1121c:	b	1122c <rb_base64_encode@plt+0x224>
   11220:	cmp	r5, r6
   11224:	cmpne	r4, r6
   11228:	bne	1120c <rb_base64_encode@plt+0x204>
   1122c:	add	r6, r6, #1
   11230:	cmp	r7, r6
   11234:	bne	11220 <rb_base64_encode@plt+0x218>
   11238:	ldr	r0, [pc, #376]	; 113b8 <rb_base64_encode@plt+0x3b0>
   1123c:	mov	r1, #2
   11240:	add	r0, pc, r0
   11244:	bl	10da4 <open@plt>
   11248:	cmp	r0, #0
   1124c:	blt	112a0 <rb_base64_encode@plt+0x298>
   11250:	cmp	r5, #0
   11254:	mov	r6, r0
   11258:	cmpne	r4, #0
   1125c:	beq	1126c <rb_base64_encode@plt+0x264>
   11260:	mov	r0, r6
   11264:	mov	r1, #0
   11268:	bl	10fa8 <dup2@plt>
   1126c:	cmp	r5, #1
   11270:	cmpne	r4, #1
   11274:	beq	11284 <rb_base64_encode@plt+0x27c>
   11278:	mov	r0, r6
   1127c:	mov	r1, #1
   11280:	bl	10fa8 <dup2@plt>
   11284:	cmp	r5, #2
   11288:	cmpne	r4, #2
   1128c:	bne	11390 <rb_base64_encode@plt+0x388>
   11290:	cmp	r6, #3
   11294:	blt	112a0 <rb_base64_encode@plt+0x298>
   11298:	mov	r0, r6
   1129c:	bl	10f3c <close@plt>
   112a0:	bl	113f0 <rb_base64_encode@plt+0x3e8>
   112a4:	mov	r0, #4096	; 0x1000
   112a8:	mov	r1, #1024	; 0x400
   112ac:	mov	r2, #0
   112b0:	mov	r3, #0
   112b4:	str	r7, [sp]
   112b8:	str	r1, [sp, #4]
   112bc:	str	r0, [sp, #8]
   112c0:	mov	r0, #0
   112c4:	mov	r1, #0
   112c8:	bl	10f78 <rb_lib_init@plt>
   112cc:	mov	r0, #4096	; 0x1000
   112d0:	bl	10fc0 <rb_linebuf_init@plt>
   112d4:	mov	r0, #4096	; 0x1000
   112d8:	bl	10e7c <rb_init_rawbuffers@plt>
   112dc:	mov	r0, #48	; 0x30
   112e0:	bl	114a4 <rb_base64_encode@plt+0x49c>
   112e4:	ldr	r1, [pc, #208]	; 113bc <rb_base64_encode@plt+0x3b4>
   112e8:	add	r1, pc, r1
   112ec:	str	r0, [r1]
   112f0:	mov	r0, r5
   112f4:	mov	r1, #4
   112f8:	ldr	r2, [pc, #192]	; 113c0 <rb_base64_encode@plt+0x3b8>
   112fc:	add	r2, pc, r2
   11300:	bl	10f90 <rb_open@plt>
   11304:	ldr	r1, [pc, #184]	; 113c4 <rb_base64_encode@plt+0x3bc>
   11308:	ldr	r1, [pc, r1]
   1130c:	str	r0, [r1, #16]
   11310:	mov	r0, r4
   11314:	mov	r1, #8
   11318:	ldr	r2, [pc, #168]	; 113c8 <rb_base64_encode@plt+0x3c0>
   1131c:	add	r2, pc, r2
   11320:	bl	10f90 <rb_open@plt>
   11324:	ldr	r1, [pc, #160]	; 113cc <rb_base64_encode@plt+0x3c4>
   11328:	ldr	r1, [pc, r1]
   1132c:	str	r0, [r1, #20]
   11330:	ldr	r0, [r1, #16]
   11334:	bl	10e4c <rb_set_nb@plt>
   11338:	ldr	r0, [pc, #144]	; 113d0 <rb_base64_encode@plt+0x3c8>
   1133c:	ldr	r0, [pc, r0]
   11340:	ldr	r0, [r0, #20]
   11344:	bl	10e4c <rb_set_nb@plt>
   11348:	ldr	r0, [pc, #132]	; 113d4 <rb_base64_encode@plt+0x3cc>
   1134c:	ldr	r1, [pc, #132]	; 113d8 <rb_base64_encode@plt+0x3d0>
   11350:	mov	r2, #0
   11354:	mov	r3, #10
   11358:	add	r0, pc, r0
   1135c:	add	r1, pc, r1
   11360:	bl	10de0 <rb_event_addish@plt>
   11364:	ldr	r0, [pc, #112]	; 113dc <rb_base64_encode@plt+0x3d4>
   11368:	mov	r1, #0
   1136c:	ldr	r0, [pc, r0]
   11370:	ldr	r0, [r0, #20]
   11374:	bl	11544 <rb_base64_encode@plt+0x53c>
   11378:	ldr	r1, [pc, #96]	; 113e0 <rb_base64_encode@plt+0x3d8>
   1137c:	ldr	r1, [pc, r1]
   11380:	ldr	r0, [r1, #16]
   11384:	bl	115b4 <rb_base64_encode@plt+0x5ac>
   11388:	mov	r0, #0
   1138c:	bl	10e94 <rb_lib_loop@plt>
   11390:	mov	r0, r6
   11394:	mov	r1, #2
   11398:	bl	10fa8 <dup2@plt>
   1139c:	cmp	r6, #3
   113a0:	bge	11298 <rb_base64_encode@plt+0x290>
   113a4:	b	112a0 <rb_base64_encode@plt+0x298>
   113a8:	andeq	r2, r0, r0, lsl #31
   113ac:	andeq	r2, r0, r3, ror pc
   113b0:	andeq	r2, r0, ip, ror #30
   113b4:	andeq	r3, r1, ip, ror #29
   113b8:	strdeq	r2, [r0], -r4
   113bc:	andeq	r3, r1, r4, lsl #28
   113c0:	andeq	r2, r0, r2, asr #28
   113c4:	andeq	r3, r1, r4, ror #27
   113c8:	andeq	r2, r0, r6, lsr lr
   113cc:	andeq	r3, r1, r4, asr #27
   113d0:			; <UNDEFINED> instruction: 0x00013db0
   113d4:	andeq	r2, r0, r4, lsl #28
   113d8:	andeq	r0, r0, r0, ror #2
   113dc:	andeq	r3, r1, r0, lsl #27
   113e0:	andeq	r3, r1, r0, ror sp
   113e4:	andeq	r3, r1, r4, asr pc
   113e8:	andeq	r2, r0, sp, lsr pc
   113ec:	andeq	r2, r0, sl, asr pc
   113f0:	push	{r4, r5, fp, lr}
   113f4:	add	fp, sp, #8
   113f8:	sub	sp, sp, #144	; 0x90
   113fc:	mov	r0, #1
   11400:	add	r4, sp, #4
   11404:	str	r0, [sp, #4]
   11408:	mov	r0, #0
   1140c:	add	r5, r4, #4
   11410:	str	r0, [sp, #136]	; 0x88
   11414:	mov	r0, r5
   11418:	bl	10db0 <sigemptyset@plt>
   1141c:	mov	r0, r5
   11420:	mov	r1, #13
   11424:	bl	10f18 <sigaddset@plt>
   11428:	mov	r0, r5
   1142c:	mov	r1, #14
   11430:	bl	10f18 <sigaddset@plt>
   11434:	mov	r0, r5
   11438:	mov	r1, #5
   1143c:	bl	10f18 <sigaddset@plt>
   11440:	mov	r0, r5
   11444:	mov	r1, #28
   11448:	bl	10f18 <sigaddset@plt>
   1144c:	mov	r0, #28
   11450:	mov	r1, r4
   11454:	mov	r2, #0
   11458:	bl	10f6c <sigaction@plt>
   1145c:	mov	r0, #13
   11460:	mov	r1, r4
   11464:	mov	r2, #0
   11468:	bl	10f6c <sigaction@plt>
   1146c:	mov	r0, #5
   11470:	mov	r1, r4
   11474:	mov	r2, #0
   11478:	bl	10f6c <sigaction@plt>
   1147c:	ldr	r0, [pc, #28]	; 114a0 <rb_base64_encode@plt+0x498>
   11480:	mov	r1, r4
   11484:	mov	r2, #0
   11488:	add	r0, pc, r0
   1148c:	str	r0, [sp, #4]
   11490:	mov	r0, #14
   11494:	bl	10f6c <sigaction@plt>
   11498:	sub	sp, fp, #8
   1149c:	pop	{r4, r5, fp, pc}
   114a0:	andeq	r0, r0, ip, asr #9
   114a4:	push	{fp, lr}
   114a8:	mov	fp, sp
   114ac:	mov	r1, r0
   114b0:	mov	r0, #1
   114b4:	bl	10e40 <calloc@plt>
   114b8:	cmp	r0, #0
   114bc:	popne	{fp, pc}
   114c0:	bl	10f54 <rb_outofmemory@plt>
   114c4:	push	{r4, r5, fp, lr}
   114c8:	add	fp, sp, #8
   114cc:	ldr	r5, [pc, #104]	; 1153c <rb_base64_encode@plt+0x534>
   114d0:	ldr	r5, [pc, r5]
   114d4:	cmp	r5, #0
   114d8:	bne	114f0 <rb_base64_encode@plt+0x4e8>
   114dc:	b	11524 <rb_base64_encode@plt+0x51c>
   114e0:	mov	r0, r4
   114e4:	bl	10e88 <free@plt>
   114e8:	cmp	r5, #0
   114ec:	beq	11524 <rb_base64_encode@plt+0x51c>
   114f0:	ldr	r4, [r5]
   114f4:	ldr	r5, [r5, #8]
   114f8:	add	r0, r4, #52	; 0x34
   114fc:	bl	10ee8 <rb_linebuf_donebuf@plt>
   11500:	add	r0, r4, #24
   11504:	bl	10ee8 <rb_linebuf_donebuf@plt>
   11508:	ldr	r0, [r4, #20]
   1150c:	bl	10f30 <rb_free_rawbuffer@plt>
   11510:	ldr	r0, [r4, #16]
   11514:	bl	10f30 <rb_free_rawbuffer@plt>
   11518:	cmp	r4, #0
   1151c:	bne	114e0 <rb_base64_encode@plt+0x4d8>
   11520:	b	114e8 <rb_base64_encode@plt+0x4e0>
   11524:	ldr	r0, [pc, #20]	; 11540 <rb_base64_encode@plt+0x538>
   11528:	mov	r1, #0
   1152c:	add	r0, pc, r0
   11530:	str	r1, [r0]
   11534:	str	r1, [r0, #4]
   11538:	pop	{r4, r5, fp, pc}
   1153c:	andeq	r3, r1, r0, lsr #24
   11540:	andeq	r3, r1, r4, asr #23
   11544:	push	{r4, r5, r6, r7, fp, lr}
   11548:	add	fp, sp, #16
   1154c:	sub	sp, sp, #16384	; 0x4000
   11550:	mov	r4, r0
   11554:	mov	r5, sp
   11558:	mov	r0, r4
   1155c:	mov	r1, r5
   11560:	mov	r2, #16384	; 0x4000
   11564:	bl	10ea0 <rb_read@plt>
   11568:	cmp	r0, #0
   1156c:	bgt	11558 <rb_base64_encode@plt+0x550>
   11570:	beq	115a8 <rb_base64_encode@plt+0x5a0>
   11574:	bl	10ffc <__errno_location@plt>
   11578:	ldr	r0, [r0]
   1157c:	bl	10dec <rb_ignore_errno@plt>
   11580:	cmp	r0, #0
   11584:	beq	115a8 <rb_base64_encode@plt+0x5a0>
   11588:	ldr	r2, [pc, #32]	; 115b0 <rb_base64_encode@plt+0x5a8>
   1158c:	mov	r0, r4
   11590:	mov	r1, #1
   11594:	mov	r3, #0
   11598:	add	r2, pc, r2
   1159c:	bl	10e04 <rb_setselect@plt>
   115a0:	sub	sp, fp, #16
   115a4:	pop	{r4, r5, r6, r7, fp, pc}
   115a8:	mov	r0, #0
   115ac:	bl	10ff0 <exit@plt>
   115b0:			; <UNDEFINED> instruction: 0xffffffa4
   115b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115b8:	add	fp, sp, #28
   115bc:	sub	sp, sp, #12
   115c0:	mov	r4, r1
   115c4:	mov	r0, #1
   115c8:	mov	r1, #40	; 0x28
   115cc:	bl	10e40 <calloc@plt>
   115d0:	cmp	r0, #0
   115d4:	beq	11948 <rb_base64_encode@plt+0x940>
   115d8:	mov	r5, r0
   115dc:	add	r0, r4, #24
   115e0:	mov	r8, #16384	; 0x4000
   115e4:	mov	r7, #4
   115e8:	mov	r9, #0
   115ec:	str	r0, [sp, #8]
   115f0:	mov	r0, #1
   115f4:	mov	r1, #16384	; 0x4000
   115f8:	bl	10e40 <calloc@plt>
   115fc:	cmp	r0, #0
   11600:	beq	11948 <rb_base64_encode@plt+0x940>
   11604:	str	r0, [r5, #12]
   11608:	str	r8, [r5, #16]
   1160c:	mov	r1, r0
   11610:	add	r3, r5, #20
   11614:	mov	r2, #16384	; 0x4000
   11618:	ldr	r0, [r4, #16]
   1161c:	str	r7, [sp]
   11620:	bl	10f9c <rb_recv_fd_buf@plt>
   11624:	mov	r6, r0
   11628:	cmp	r0, #0
   1162c:	ble	116e8 <rb_base64_encode@plt+0x6e0>
   11630:	str	r6, [r5, #16]
   11634:	ldr	r0, [r4, #28]
   11638:	str	r5, [r5]
   1163c:	cmp	r0, #0
   11640:	stmib	r5, {r0, r9}
   11644:	beq	11654 <rb_base64_encode@plt+0x64c>
   11648:	add	r0, r0, #8
   1164c:	str	r5, [r0]
   11650:	b	11664 <rb_base64_encode@plt+0x65c>
   11654:	ldr	r0, [sp, #8]
   11658:	ldr	r0, [r0]
   1165c:	cmp	r0, #0
   11660:	beq	116e0 <rb_base64_encode@plt+0x6d8>
   11664:	str	r5, [r4, #28]
   11668:	ldr	r0, [r4, #32]
   1166c:	add	r0, r0, #1
   11670:	str	r0, [r4, #32]
   11674:	ldr	r0, [r5, #20]
   11678:	cmp	r0, #0
   1167c:	beq	116ac <rb_base64_encode@plt+0x6a4>
   11680:	ldr	r0, [r5, #24]
   11684:	cmp	r0, #0
   11688:	beq	116b4 <rb_base64_encode@plt+0x6ac>
   1168c:	ldr	r0, [r5, #28]
   11690:	cmp	r0, #0
   11694:	beq	116bc <rb_base64_encode@plt+0x6b4>
   11698:	ldr	r0, [r5, #32]
   1169c:	cmp	r0, #0
   116a0:	mov	r0, #4
   116a4:	movweq	r0, #3
   116a8:	b	116c0 <rb_base64_encode@plt+0x6b8>
   116ac:	mov	r0, #0
   116b0:	b	116c0 <rb_base64_encode@plt+0x6b8>
   116b4:	mov	r0, #1
   116b8:	b	116c0 <rb_base64_encode@plt+0x6b8>
   116bc:	mov	r0, #2
   116c0:	str	r0, [r5, #36]	; 0x24
   116c4:	mov	r0, #1
   116c8:	mov	r1, #40	; 0x28
   116cc:	bl	10e40 <calloc@plt>
   116d0:	mov	r5, r0
   116d4:	cmp	r0, #0
   116d8:	bne	115f0 <rb_base64_encode@plt+0x5e8>
   116dc:	b	11948 <rb_base64_encode@plt+0x940>
   116e0:	ldr	r0, [sp, #8]
   116e4:	b	1164c <rb_base64_encode@plt+0x644>
   116e8:	ldr	r0, [r5, #12]
   116ec:	cmp	r0, #0
   116f0:	beq	116f8 <rb_base64_encode@plt+0x6f0>
   116f4:	bl	10e88 <free@plt>
   116f8:	mov	r0, r5
   116fc:	bl	10e88 <free@plt>
   11700:	cmp	r6, #0
   11704:	beq	1194c <rb_base64_encode@plt+0x944>
   11708:	bl	10ffc <__errno_location@plt>
   1170c:	ldr	r0, [r0]
   11710:	bl	10dec <rb_ignore_errno@plt>
   11714:	cmp	r0, #0
   11718:	beq	1194c <rb_base64_encode@plt+0x944>
   1171c:	ldr	r0, [sp, #8]
   11720:	ldr	sl, [r0]
   11724:	cmp	sl, #0
   11728:	beq	11928 <rb_base64_encode@plt+0x920>
   1172c:	mov	r8, #0
   11730:	ldr	r5, [sl]
   11734:	ldr	r9, [sl, #8]
   11738:	ldr	r0, [r5, #12]
   1173c:	ldrb	r0, [r0]
   11740:	cmp	r0, #65	; 0x41
   11744:	bne	118c8 <rb_base64_encode@plt+0x8c0>
   11748:	ldr	r0, [r5, #36]	; 0x24
   1174c:	cmp	r0, #2
   11750:	bne	1181c <rb_base64_encode@plt+0x814>
   11754:	ldr	r0, [r5, #16]
   11758:	cmp	r0, #5
   1175c:	bne	11824 <rb_base64_encode@plt+0x81c>
   11760:	ldr	r7, [r5, #20]
   11764:	ldr	r8, [r5, #24]
   11768:	mov	r0, #1
   1176c:	mov	r1, #168	; 0xa8
   11770:	bl	10e40 <calloc@plt>
   11774:	cmp	r0, #0
   11778:	beq	11948 <rb_base64_encode@plt+0x940>
   1177c:	mov	r6, r0
   11780:	str	r4, [r0, #12]
   11784:	mvn	r0, #0
   11788:	add	r1, r6, #80	; 0x50
   1178c:	stm	r1, {r0, r7, r8}
   11790:	mov	r0, r7
   11794:	bl	10e4c <rb_set_nb@plt>
   11798:	mov	r0, r8
   1179c:	bl	10e4c <rb_set_nb@plt>
   117a0:	add	r0, r6, #52	; 0x34
   117a4:	bl	10fb4 <rb_linebuf_newbuf@plt>
   117a8:	add	r0, r6, #24
   117ac:	bl	10fb4 <rb_linebuf_newbuf@plt>
   117b0:	bl	10f84 <rb_new_rawbuffer@plt>
   117b4:	str	r0, [r6, #20]
   117b8:	bl	10f84 <rb_new_rawbuffer@plt>
   117bc:	str	r0, [r6, #16]
   117c0:	movw	r1, #19923	; 0x4dd3
   117c4:	mov	r8, #0
   117c8:	ldr	r0, [r5, #12]
   117cc:	movt	r1, #4194	; 0x1062
   117d0:	ldr	r0, [r0, #1]
   117d4:	str	r0, [r6, #80]	; 0x50
   117d8:	umull	r1, r2, r0, r1
   117dc:	ldr	r7, [pc, #368]	; 11954 <rb_base64_encode@plt+0x94c>
   117e0:	lsr	r1, r2, #7
   117e4:	mov	r2, #2000	; 0x7d0
   117e8:	str	r6, [r6]
   117ec:	str	r8, [r6, #4]
   117f0:	mls	r0, r1, r2, r0
   117f4:	add	r0, r0, r0, lsl #1
   117f8:	add	r7, pc, r7
   117fc:	mov	r1, r7
   11800:	ldr	r2, [r1, r0, lsl #2]!
   11804:	cmp	r2, #0
   11808:	str	r2, [r6, #8]
   1180c:	beq	11848 <rb_base64_encode@plt+0x840>
   11810:	add	r2, r2, #4
   11814:	str	r6, [r2]
   11818:	b	11858 <rb_base64_encode@plt+0x850>
   1181c:	cmp	r0, #1
   11820:	blt	118c8 <rb_base64_encode@plt+0x8c0>
   11824:	add	r6, r5, #20
   11828:	mov	r7, #0
   1182c:	ldr	r0, [r6, r7, lsl #2]
   11830:	bl	10f00 <rb_close@plt>
   11834:	ldr	r0, [r5, #36]	; 0x24
   11838:	add	r7, r7, #1
   1183c:	cmp	r7, r0
   11840:	blt	1182c <rb_base64_encode@plt+0x824>
   11844:	b	118c8 <rb_base64_encode@plt+0x8c0>
   11848:	add	r2, r7, r0, lsl #2
   1184c:	ldr	r3, [r2, #4]!
   11850:	cmp	r3, #0
   11854:	streq	r6, [r2]
   11858:	str	r6, [r1]
   1185c:	add	r0, r7, r0, lsl #2
   11860:	ldr	r1, [r0, #8]
   11864:	add	r1, r1, #1
   11868:	str	r1, [r0, #8]
   1186c:	ldrb	r0, [r6, #128]	; 0x80
   11870:	orr	r0, r0, #4
   11874:	strb	r0, [r6, #128]	; 0x80
   11878:	ldr	r0, [r6, #84]	; 0x54
   1187c:	bl	10dc8 <rb_get_type@plt>
   11880:	tst	r0, #64	; 0x40
   11884:	beq	11894 <rb_base64_encode@plt+0x88c>
   11888:	ldr	r0, [r6, #84]	; 0x54
   1188c:	mov	r1, #4
   11890:	bl	10eac <rb_set_type@plt>
   11894:	ldr	r0, [r6, #88]	; 0x58
   11898:	bl	10dc8 <rb_get_type@plt>
   1189c:	cmp	r0, #64	; 0x40
   118a0:	bne	118b0 <rb_base64_encode@plt+0x8a8>
   118a4:	ldr	r0, [r6, #88]	; 0x58
   118a8:	mov	r1, #4
   118ac:	bl	10eac <rb_set_type@plt>
   118b0:	ldr	r0, [r6, #84]	; 0x54
   118b4:	mov	r1, r6
   118b8:	bl	11960 <rb_base64_encode@plt+0x958>
   118bc:	ldr	r0, [r6, #88]	; 0x58
   118c0:	mov	r1, r6
   118c4:	bl	11aa0 <rb_base64_encode@plt+0xa98>
   118c8:	ldr	r0, [sl, #8]
   118cc:	ldr	r1, [sl, #4]
   118d0:	ldr	r2, [sp, #8]
   118d4:	cmp	r0, #0
   118d8:	streq	r1, [r4, #28]
   118dc:	strne	r1, [r0, #4]
   118e0:	ldrne	r1, [sl, #4]
   118e4:	cmp	r1, #0
   118e8:	addne	r2, r1, #8
   118ec:	str	r0, [r2]
   118f0:	str	r8, [sl, #4]
   118f4:	str	r8, [sl, #8]
   118f8:	ldr	r0, [r4, #32]
   118fc:	sub	r0, r0, #1
   11900:	str	r0, [r4, #32]
   11904:	ldr	r0, [r5, #12]
   11908:	cmp	r0, #0
   1190c:	beq	11914 <rb_base64_encode@plt+0x90c>
   11910:	bl	10e88 <free@plt>
   11914:	mov	r0, r5
   11918:	bl	10e88 <free@plt>
   1191c:	cmp	r9, #0
   11920:	mov	sl, r9
   11924:	bne	11730 <rb_base64_encode@plt+0x728>
   11928:	ldr	r0, [r4, #16]
   1192c:	ldr	r2, [pc, #36]	; 11958 <rb_base64_encode@plt+0x950>
   11930:	mov	r1, #1
   11934:	mov	r3, r4
   11938:	add	r2, pc, r2
   1193c:	sub	sp, fp, #28
   11940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11944:	b	10e04 <rb_setselect@plt>
   11948:	bl	10f54 <rb_outofmemory@plt>
   1194c:	mov	r0, #0
   11950:	bl	10ff0 <exit@plt>
   11954:	andeq	r3, r1, r4, lsl #18
   11958:			; <UNDEFINED> instruction: 0xfffffc74
   1195c:	bx	lr
   11960:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11964:	add	fp, sp, #24
   11968:	sub	sp, sp, #16384	; 0x4000
   1196c:	mov	r4, r1
   11970:	mov	r5, r0
   11974:	mov	r0, sp
   11978:	mov	r1, #0
   1197c:	mov	r2, #16384	; 0x4000
   11980:	bl	10e58 <memset@plt>
   11984:	cmp	r4, #0
   11988:	beq	11a10 <rb_base64_encode@plt+0xa08>
   1198c:	ldrb	r0, [r4, #128]	; 0x80
   11990:	tst	r0, #2
   11994:	bne	11a10 <rb_base64_encode@plt+0xa08>
   11998:	bne	11a10 <rb_base64_encode@plt+0xa08>
   1199c:	mov	r6, sp
   119a0:	mov	r0, r5
   119a4:	mov	r1, r6
   119a8:	mov	r2, #16384	; 0x4000
   119ac:	bl	10ea0 <rb_read@plt>
   119b0:	cmn	r0, #1
   119b4:	ble	11a18 <rb_base64_encode@plt+0xa10>
   119b8:	mov	r7, r0
   119bc:	cmp	r0, #0
   119c0:	beq	11a58 <rb_base64_encode@plt+0xa50>
   119c4:	ldr	r0, [r4, #20]
   119c8:	mov	r1, r6
   119cc:	mov	r2, r7
   119d0:	bl	10fd8 <rb_rawbuf_append@plt>
   119d4:	ldrb	r0, [r4, #128]	; 0x80
   119d8:	tst	r0, #8
   119dc:	bne	119f4 <rb_base64_encode@plt+0x9ec>
   119e0:	mov	r0, r4
   119e4:	bl	11f40 <rb_base64_encode@plt+0xf38>
   119e8:	cmp	r7, #16384	; 0x4000
   119ec:	bcs	11a04 <rb_base64_encode@plt+0x9fc>
   119f0:	b	11a74 <rb_base64_encode@plt+0xa6c>
   119f4:	mov	r0, r4
   119f8:	bl	1215c <rb_base64_encode@plt+0x1154>
   119fc:	cmp	r7, #16384	; 0x4000
   11a00:	bcc	11a74 <rb_base64_encode@plt+0xa6c>
   11a04:	ldrb	r0, [r4, #128]	; 0x80
   11a08:	tst	r0, #2
   11a0c:	beq	119a0 <rb_base64_encode@plt+0x998>
   11a10:	sub	sp, fp, #24
   11a14:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11a18:	bl	10ffc <__errno_location@plt>
   11a1c:	ldr	r0, [r0]
   11a20:	bl	10dec <rb_ignore_errno@plt>
   11a24:	cmp	r0, #0
   11a28:	beq	11a58 <rb_base64_encode@plt+0xa50>
   11a2c:	ldr	r2, [pc, #96]	; 11a94 <rb_base64_encode@plt+0xa8c>
   11a30:	mov	r0, r5
   11a34:	mov	r1, #1
   11a38:	mov	r3, r4
   11a3c:	add	r2, pc, r2
   11a40:	bl	10e04 <rb_setselect@plt>
   11a44:	ldr	r0, [r4, #88]	; 0x58
   11a48:	mov	r1, r4
   11a4c:	bl	11c0c <rb_base64_encode@plt+0xc04>
   11a50:	sub	sp, fp, #24
   11a54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11a58:	ldr	r2, [pc, #56]	; 11a98 <rb_base64_encode@plt+0xa90>
   11a5c:	mov	r0, r4
   11a60:	mov	r1, #0
   11a64:	add	r2, pc, r2
   11a68:	bl	11cd8 <rb_base64_encode@plt+0xcd0>
   11a6c:	sub	sp, fp, #24
   11a70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11a74:	ldr	r2, [pc, #32]	; 11a9c <rb_base64_encode@plt+0xa94>
   11a78:	mov	r0, r5
   11a7c:	mov	r1, #1
   11a80:	mov	r3, r4
   11a84:	add	r2, pc, r2
   11a88:	bl	10e04 <rb_setselect@plt>
   11a8c:	sub	sp, fp, #24
   11a90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11a94:			; <UNDEFINED> instruction: 0xffffff1c
   11a98:	andeq	r2, r0, r9, lsl #14
   11a9c:			; <UNDEFINED> instruction: 0xfffffed4
   11aa0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11aa4:	add	fp, sp, #24
   11aa8:	sub	sp, sp, #16384	; 0x4000
   11aac:	mov	r4, r1
   11ab0:	mov	r0, sp
   11ab4:	mov	r1, #0
   11ab8:	mov	r2, #16384	; 0x4000
   11abc:	bl	10e58 <memset@plt>
   11ac0:	cmp	r4, #0
   11ac4:	beq	11bd8 <rb_base64_encode@plt+0xbd0>
   11ac8:	ldrb	r0, [r4, #128]	; 0x80
   11acc:	tst	r0, #2
   11ad0:	bne	11bd8 <rb_base64_encode@plt+0xbd0>
   11ad4:	ldr	r0, [r4, #16]
   11ad8:	bl	10f24 <rb_rawbuf_length@plt>
   11adc:	cmp	r0, #4096	; 0x1000
   11ae0:	blt	11b24 <rb_base64_encode@plt+0xb1c>
   11ae4:	ldrb	r0, [r4, #128]	; 0x80
   11ae8:	mov	r1, #1
   11aec:	mov	r2, #0
   11af0:	mov	r3, #0
   11af4:	orr	r0, r0, #1
   11af8:	strb	r0, [r4, #128]	; 0x80
   11afc:	ldr	r0, [r4, #88]	; 0x58
   11b00:	bl	10e04 <rb_setselect@plt>
   11b04:	ldrb	r0, [r4, #128]	; 0x80
   11b08:	tst	r0, #8
   11b0c:	beq	11bd8 <rb_base64_encode@plt+0xbd0>
   11b10:	ldr	r0, [r4, #84]	; 0x54
   11b14:	mov	r1, r4
   11b18:	bl	12610 <rb_base64_encode@plt+0x1608>
   11b1c:	sub	sp, fp, #24
   11b20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11b24:	add	r5, r4, #52	; 0x34
   11b28:	add	r7, r4, #112	; 0x70
   11b2c:	mov	r6, sp
   11b30:	ldrb	r0, [r4, #128]	; 0x80
   11b34:	tst	r0, #2
   11b38:	bne	11bd8 <rb_base64_encode@plt+0xbd0>
   11b3c:	ldr	r0, [r4, #88]	; 0x58
   11b40:	mov	r1, r6
   11b44:	mov	r2, #16384	; 0x4000
   11b48:	bl	10ea0 <rb_read@plt>
   11b4c:	cmp	r0, #0
   11b50:	beq	11be0 <rb_base64_encode@plt+0xbd8>
   11b54:	mov	r2, r0
   11b58:	cmn	r0, #1
   11b5c:	ble	11ba0 <rb_base64_encode@plt+0xb98>
   11b60:	ldrd	r0, [r7]
   11b64:	mov	r3, #0
   11b68:	adds	r0, r0, r2
   11b6c:	adc	r1, r1, r2, asr #31
   11b70:	strd	r0, [r7]
   11b74:	mov	r0, r5
   11b78:	mov	r1, r6
   11b7c:	bl	10e64 <rb_linebuf_parse@plt>
   11b80:	ldrb	r0, [r4, #128]	; 0x80
   11b84:	tst	r0, #2
   11b88:	bne	11bd8 <rb_base64_encode@plt+0xbd0>
   11b8c:	ldr	r0, [r4, #16]
   11b90:	bl	10f24 <rb_rawbuf_length@plt>
   11b94:	cmp	r0, #4096	; 0x1000
   11b98:	blt	11b30 <rb_base64_encode@plt+0xb28>
   11b9c:	b	11ae4 <rb_base64_encode@plt+0xadc>
   11ba0:	bl	10ffc <__errno_location@plt>
   11ba4:	ldr	r0, [r0]
   11ba8:	bl	10dec <rb_ignore_errno@plt>
   11bac:	cmp	r0, #0
   11bb0:	beq	11be0 <rb_base64_encode@plt+0xbd8>
   11bb4:	ldr	r0, [r4, #88]	; 0x58
   11bb8:	ldr	r2, [pc, #72]	; 11c08 <rb_base64_encode@plt+0xc00>
   11bbc:	mov	r1, #1
   11bc0:	mov	r3, r4
   11bc4:	add	r2, pc, r2
   11bc8:	bl	10e04 <rb_setselect@plt>
   11bcc:	ldrb	r0, [r4, #128]	; 0x80
   11bd0:	tst	r0, #8
   11bd4:	bne	11bf8 <rb_base64_encode@plt+0xbf0>
   11bd8:	sub	sp, fp, #24
   11bdc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11be0:	mov	r0, r4
   11be4:	mov	r1, #0
   11be8:	mov	r2, #0
   11bec:	bl	11cd8 <rb_base64_encode@plt+0xcd0>
   11bf0:	sub	sp, fp, #24
   11bf4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11bf8:	mov	r0, r4
   11bfc:	bl	123ec <rb_base64_encode@plt+0x13e4>
   11c00:	sub	sp, fp, #24
   11c04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c08:			; <UNDEFINED> instruction: 0xfffffed4
   11c0c:	push	{r4, r5, r6, r7, fp, lr}
   11c10:	add	fp, sp, #16
   11c14:	mov	r5, r0
   11c18:	ldrb	r0, [r1, #128]	; 0x80
   11c1c:	tst	r0, #2
   11c20:	popne	{r4, r5, r6, r7, fp, pc}
   11c24:	add	r6, r1, #24
   11c28:	mov	r4, r1
   11c2c:	mov	r0, r5
   11c30:	mov	r1, r6
   11c34:	bl	10ec4 <rb_linebuf_flush@plt>
   11c38:	cmp	r0, #1
   11c3c:	blt	11c68 <rb_base64_encode@plt+0xc60>
   11c40:	add	r7, r4, #120	; 0x78
   11c44:	ldrd	r2, [r7]
   11c48:	mov	r1, r6
   11c4c:	adds	r2, r2, r0
   11c50:	adc	r3, r3, r0, asr #31
   11c54:	mov	r0, r5
   11c58:	strd	r2, [r7]
   11c5c:	bl	10ec4 <rb_linebuf_flush@plt>
   11c60:	cmp	r0, #0
   11c64:	bgt	11c44 <rb_base64_encode@plt+0xc3c>
   11c68:	cmp	r0, #0
   11c6c:	beq	11cac <rb_base64_encode@plt+0xca4>
   11c70:	bl	10ffc <__errno_location@plt>
   11c74:	ldr	r0, [r0]
   11c78:	bl	10dec <rb_ignore_errno@plt>
   11c7c:	cmp	r0, #0
   11c80:	beq	11cac <rb_base64_encode@plt+0xca4>
   11c84:	ldr	r1, [r4, #40]	; 0x28
   11c88:	ldr	r0, [r4, #88]	; 0x58
   11c8c:	cmp	r1, #1
   11c90:	blt	11cc0 <rb_base64_encode@plt+0xcb8>
   11c94:	ldr	r2, [pc, #56]	; 11cd4 <rb_base64_encode@plt+0xccc>
   11c98:	mov	r1, #2
   11c9c:	mov	r3, r4
   11ca0:	add	r2, pc, r2
   11ca4:	pop	{r4, r5, r6, r7, fp, lr}
   11ca8:	b	10e04 <rb_setselect@plt>
   11cac:	mov	r0, r4
   11cb0:	mov	r1, #0
   11cb4:	mov	r2, #0
   11cb8:	pop	{r4, r5, r6, r7, fp, lr}
   11cbc:	b	11cd8 <rb_base64_encode@plt+0xcd0>
   11cc0:	mov	r1, #2
   11cc4:	mov	r2, #0
   11cc8:	mov	r3, #0
   11ccc:	pop	{r4, r5, r6, r7, fp, lr}
   11cd0:	b	10e04 <rb_setselect@plt>
   11cd4:			; <UNDEFINED> instruction: 0xffffff64
   11cd8:	sub	sp, sp, #4
   11cdc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11ce0:	add	fp, sp, #24
   11ce4:	sub	sp, sp, #388	; 0x184
   11ce8:	str	r3, [fp, #8]
   11cec:	mov	r4, r0
   11cf0:	ldrb	r0, [r0, #128]	; 0x80
   11cf4:	tst	r0, #2
   11cf8:	bne	11f18 <rb_base64_encode@plt+0xf10>
   11cfc:	tst	r0, #8
   11d00:	mov	r5, r2
   11d04:	mov	r6, r1
   11d08:	movne	r0, r4
   11d0c:	blne	123ec <rb_base64_encode@plt+0x13e4>
   11d10:	ldr	r0, [r4, #16]
   11d14:	ldr	r1, [r4, #84]	; 0x54
   11d18:	bl	10fe4 <rb_rawbuf_flush@plt>
   11d1c:	ldr	r0, [r4, #88]	; 0x58
   11d20:	add	r1, r4, #24
   11d24:	bl	10ec4 <rb_linebuf_flush@plt>
   11d28:	ldr	r0, [r4, #84]	; 0x54
   11d2c:	bl	10f00 <rb_close@plt>
   11d30:	ldrb	r0, [r4, #128]	; 0x80
   11d34:	movw	r3, #19923	; 0x4dd3
   11d38:	movt	r3, #4194	; 0x1062
   11d3c:	orr	r0, r0, #2
   11d40:	strb	r0, [r4, #128]	; 0x80
   11d44:	ldr	r2, [r4, #80]	; 0x50
   11d48:	ldr	r0, [r4, #8]
   11d4c:	ldr	r1, [r4, #4]
   11d50:	umull	r3, r7, r2, r3
   11d54:	cmp	r0, #0
   11d58:	lsr	r3, r7, #7
   11d5c:	mov	r7, #2000	; 0x7d0
   11d60:	mls	r2, r3, r7, r2
   11d64:	ldr	r3, [pc, #448]	; 11f2c <rb_base64_encode@plt+0xf24>
   11d68:	mov	r7, #0
   11d6c:	add	r2, r2, r2, lsl #1
   11d70:	add	r3, pc, r3
   11d74:	add	r2, r3, r2, lsl #2
   11d78:	streq	r1, [r2, #4]
   11d7c:	strne	r1, [r0, #4]
   11d80:	mov	r3, r2
   11d84:	ldrne	r1, [r4, #4]
   11d88:	cmp	r1, #0
   11d8c:	addne	r3, r1, #8
   11d90:	cmp	r6, #0
   11d94:	str	r0, [r3]
   11d98:	str	r7, [r4, #4]
   11d9c:	str	r7, [r4, #8]
   11da0:	cmpne	r5, #0
   11da4:	ldr	r0, [r2, #8]
   11da8:	sub	r0, r0, #1
   11dac:	str	r0, [r2, #8]
   11db0:	ldr	r0, [r4, #88]	; 0x58
   11db4:	bne	11de0 <rb_base64_encode@plt+0xdd8>
   11db8:	bl	10f00 <rb_close@plt>
   11dbc:	stm	r4, {r4, r7}
   11dc0:	ldr	r0, [pc, #360]	; 11f30 <rb_base64_encode@plt+0xf28>
   11dc4:	ldr	r0, [pc, r0]
   11dc8:	cmp	r0, #0
   11dcc:	str	r0, [r4, #8]
   11dd0:	beq	11ebc <rb_base64_encode@plt+0xeb4>
   11dd4:	add	r0, r0, #4
   11dd8:	str	r4, [r0]
   11ddc:	b	11ed0 <rb_base64_encode@plt+0xec8>
   11de0:	ldr	r2, [pc, #340]	; 11f3c <rb_base64_encode@plt+0xf34>
   11de4:	mov	r1, #1
   11de8:	mov	r3, r4
   11dec:	add	r2, pc, r2
   11df0:	bl	10e04 <rb_setselect@plt>
   11df4:	ldr	r0, [r4, #88]	; 0x58
   11df8:	mov	r1, #2
   11dfc:	mov	r2, #0
   11e00:	mov	r3, #0
   11e04:	bl	10e04 <rb_setselect@plt>
   11e08:	sub	r6, fp, #156	; 0x9c
   11e0c:	add	r3, fp, #8
   11e10:	mov	r1, #128	; 0x80
   11e14:	mov	r2, r5
   11e18:	mov	r0, r6
   11e1c:	str	r3, [fp, #-28]	; 0xffffffe4
   11e20:	bl	10e28 <vsnprintf@plt>
   11e24:	mov	r0, #68	; 0x44
   11e28:	mov	r1, r6
   11e2c:	mov	r2, #251	; 0xfb
   11e30:	strb	r0, [sp]
   11e34:	ldr	r0, [r4, #80]	; 0x50
   11e38:	str	r0, [sp, #1]
   11e3c:	mov	r0, sp
   11e40:	orr	r0, r0, #5
   11e44:	bl	10e70 <rb_strlcpy@plt>
   11e48:	mov	r0, r6
   11e4c:	bl	10ed0 <strlen@plt>
   11e50:	ldr	r4, [r4, #12]
   11e54:	mov	r6, r0
   11e58:	mov	r0, #1
   11e5c:	mov	r1, #40	; 0x28
   11e60:	bl	10e40 <calloc@plt>
   11e64:	cmp	r0, #0
   11e68:	beq	11f28 <rb_base64_encode@plt+0xf20>
   11e6c:	add	r6, r6, #6
   11e70:	mov	r5, r0
   11e74:	mov	r0, #1
   11e78:	mov	r1, r6
   11e7c:	bl	10e40 <calloc@plt>
   11e80:	cmp	r0, #0
   11e84:	beq	11f28 <rb_base64_encode@plt+0xf20>
   11e88:	mov	r1, sp
   11e8c:	mov	r2, r6
   11e90:	str	r0, [r5, #12]
   11e94:	str	r6, [r5, #16]
   11e98:	bl	10edc <memcpy@plt>
   11e9c:	str	r5, [r5]
   11ea0:	ldr	r0, [r4, #40]	; 0x28
   11ea4:	cmp	r0, #0
   11ea8:	str	r0, [r5, #4]
   11eac:	beq	11eec <rb_base64_encode@plt+0xee4>
   11eb0:	add	r0, r0, #8
   11eb4:	str	r5, [r0]
   11eb8:	b	11efc <rb_base64_encode@plt+0xef4>
   11ebc:	ldr	r0, [pc, #112]	; 11f34 <rb_base64_encode@plt+0xf2c>
   11ec0:	add	r0, pc, r0
   11ec4:	ldr	r1, [r0, #4]!
   11ec8:	cmp	r1, #0
   11ecc:	streq	r4, [r0]
   11ed0:	ldr	r0, [pc, #96]	; 11f38 <rb_base64_encode@plt+0xf30>
   11ed4:	add	r0, pc, r0
   11ed8:	str	r4, [r0]
   11edc:	ldr	r1, [r0, #8]
   11ee0:	add	r1, r1, #1
   11ee4:	str	r1, [r0, #8]
   11ee8:	b	11f18 <rb_base64_encode@plt+0xf10>
   11eec:	mov	r0, r4
   11ef0:	ldr	r1, [r0, #36]!	; 0x24
   11ef4:	cmp	r1, #0
   11ef8:	streq	r5, [r0]
   11efc:	str	r5, [r4, #40]	; 0x28
   11f00:	ldr	r1, [r4, #44]	; 0x2c
   11f04:	ldr	r0, [r4, #16]
   11f08:	add	r1, r1, #1
   11f0c:	str	r1, [r4, #44]	; 0x2c
   11f10:	mov	r1, r4
   11f14:	bl	12758 <rb_base64_encode@plt+0x1750>
   11f18:	sub	sp, fp, #24
   11f1c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   11f20:	add	sp, sp, #4
   11f24:	bx	lr
   11f28:	bl	10f54 <rb_outofmemory@plt>
   11f2c:	andeq	r3, r1, ip, lsl #7
   11f30:	andeq	r3, r1, ip, lsr #6
   11f34:	andeq	r3, r1, r0, lsr r2
   11f38:	andeq	r3, r1, ip, lsl r2
   11f3c:	andeq	r0, r0, r4, lsr r7
   11f40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f44:	add	fp, sp, #28
   11f48:	sub	sp, sp, #124	; 0x7c
   11f4c:	sub	sp, sp, #16384	; 0x4000
   11f50:	add	r5, sp, #120	; 0x78
   11f54:	mov	sl, r0
   11f58:	mov	r1, #0
   11f5c:	mov	r2, #16384	; 0x4000
   11f60:	mov	r8, #0
   11f64:	mov	r0, r5
   11f68:	bl	10e58 <memset@plt>
   11f6c:	ldr	r0, [sl, #20]
   11f70:	mov	r1, r5
   11f74:	mov	r2, #16384	; 0x4000
   11f78:	bl	10f60 <rb_rawbuf_get@plt>
   11f7c:	add	r7, sl, #128	; 0x80
   11f80:	cmp	r0, #0
   11f84:	beq	12040 <rb_base64_encode@plt+0x1038>
   11f88:	ldr	r9, [pc, #444]	; 1214c <rb_base64_encode@plt+0x1144>
   11f8c:	add	r6, sl, #129	; 0x81
   11f90:	add	r4, r5, #16384	; 0x4000
   11f94:	add	r9, pc, r9
   11f98:	mov	r0, r5
   11f9c:	mov	r1, r9
   11fa0:	bl	10ef4 <rb_strcasestr@plt>
   11fa4:	cmp	r0, #0
   11fa8:	beq	12028 <rb_base64_encode@plt+0x1020>
   11fac:	add	r1, r0, #18
   11fb0:	cmp	r1, r4
   11fb4:	bcc	11fc8 <rb_base64_encode@plt+0xfc0>
   11fb8:	b	11fd8 <rb_base64_encode@plt+0xfd0>
   11fbc:	add	r1, r1, #1
   11fc0:	cmp	r1, r4
   11fc4:	bcs	11fd8 <rb_base64_encode@plt+0xfd0>
   11fc8:	ldrb	r0, [r1]
   11fcc:	cmp	r0, #32
   11fd0:	cmpne	r0, #9
   11fd4:	beq	11fbc <rb_base64_encode@plt+0xfb4>
   11fd8:	cmp	r1, r4
   11fdc:	bcs	12010 <rb_base64_encode@plt+0x1008>
   11fe0:	mov	r0, r1
   11fe4:	ldrb	r2, [r0]
   11fe8:	cmp	r2, #0
   11fec:	beq	12010 <rb_base64_encode@plt+0x1008>
   11ff0:	cmp	r2, #13
   11ff4:	cmpne	r2, #10
   11ff8:	beq	1200c <rb_base64_encode@plt+0x1004>
   11ffc:	add	r0, r0, #1
   12000:	cmp	r0, r4
   12004:	bcc	11fe4 <rb_base64_encode@plt+0xfdc>
   12008:	b	12010 <rb_base64_encode@plt+0x1008>
   1200c:	strb	r8, [r0]
   12010:	mov	r0, r6
   12014:	mov	r2, #37	; 0x25
   12018:	bl	10e70 <rb_strlcpy@plt>
   1201c:	ldrb	r0, [r7]
   12020:	orr	r0, r0, #8
   12024:	strb	r0, [r7]
   12028:	ldr	r0, [sl, #20]
   1202c:	mov	r1, r5
   12030:	mov	r2, #16384	; 0x4000
   12034:	bl	10f60 <rb_rawbuf_get@plt>
   12038:	cmp	r0, #0
   1203c:	bne	11f98 <rb_base64_encode@plt+0xf90>
   12040:	ldrb	r0, [r7]
   12044:	tst	r0, #8
   12048:	beq	120d4 <rb_base64_encode@plt+0x10cc>
   1204c:	add	r5, sp, #24
   12050:	mov	r0, r5
   12054:	bl	128c0 <rb_base64_encode@plt+0x18b8>
   12058:	add	r6, sl, #129	; 0x81
   1205c:	mov	r0, r6
   12060:	bl	10ed0 <strlen@plt>
   12064:	mov	r2, r0
   12068:	mov	r0, r5
   1206c:	mov	r1, r6
   12070:	bl	12900 <rb_base64_encode@plt+0x18f8>
   12074:	ldr	r1, [pc, #212]	; 12150 <rb_base64_encode@plt+0x1148>
   12078:	mov	r0, r5
   1207c:	mov	r2, #36	; 0x24
   12080:	add	r1, pc, r1
   12084:	bl	12900 <rb_base64_encode@plt+0x18f8>
   12088:	add	r6, sp, #4
   1208c:	mov	r0, r5
   12090:	mov	r1, r6
   12094:	bl	13e40 <rb_base64_encode@plt+0x2e38>
   12098:	mov	r0, r6
   1209c:	mov	r1, #20
   120a0:	bl	11008 <rb_base64_encode@plt>
   120a4:	mov	r5, r0
   120a8:	ldrb	r0, [sl, #128]	; 0x80
   120ac:	tst	r0, #2
   120b0:	beq	120e8 <rb_base64_encode@plt+0x10e0>
   120b4:	tst	r0, #2
   120b8:	beq	12108 <rb_base64_encode@plt+0x1100>
   120bc:	tst	r0, #2
   120c0:	beq	1212c <rb_base64_encode@plt+0x1124>
   120c4:	cmp	r5, #0
   120c8:	beq	120d4 <rb_base64_encode@plt+0x10cc>
   120cc:	mov	r0, r5
   120d0:	bl	10e88 <free@plt>
   120d4:	ldr	r0, [sl, #84]	; 0x54
   120d8:	mov	r1, sl
   120dc:	bl	12610 <rb_base64_encode@plt+0x1608>
   120e0:	sub	sp, fp, #28
   120e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120e8:	ldr	r0, [sl, #16]
   120ec:	ldr	r1, [pc, #96]	; 12154 <rb_base64_encode@plt+0x114c>
   120f0:	mov	r2, #129	; 0x81
   120f4:	add	r1, pc, r1
   120f8:	bl	10fd8 <rb_rawbuf_append@plt>
   120fc:	ldrb	r0, [sl, #128]	; 0x80
   12100:	tst	r0, #2
   12104:	bne	120bc <rb_base64_encode@plt+0x10b4>
   12108:	mov	r0, r5
   1210c:	bl	10ed0 <strlen@plt>
   12110:	mov	r2, r0
   12114:	ldr	r0, [sl, #16]
   12118:	mov	r1, r5
   1211c:	bl	10fd8 <rb_rawbuf_append@plt>
   12120:	ldrb	r0, [sl, #128]	; 0x80
   12124:	tst	r0, #2
   12128:	bne	120c4 <rb_base64_encode@plt+0x10bc>
   1212c:	ldr	r0, [sl, #16]
   12130:	ldr	r1, [pc, #32]	; 12158 <rb_base64_encode@plt+0x1150>
   12134:	mov	r2, #4
   12138:	add	r1, pc, r1
   1213c:	bl	10fd8 <rb_rawbuf_append@plt>
   12140:	cmp	r5, #0
   12144:	bne	120cc <rb_base64_encode@plt+0x10c4>
   12148:	b	120d4 <rb_base64_encode@plt+0x10cc>
   1214c:	andeq	r2, r0, sp, lsl r2
   12150:	andeq	r2, r0, r4, asr #2
   12154:	strdeq	r2, [r0], -r5
   12158:	andeq	r2, r0, r3, lsr r1
   1215c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12160:	add	fp, sp, #28
   12164:	sub	sp, sp, #12
   12168:	sub	sp, sp, #16384	; 0x4000
   1216c:	mov	r4, r0
   12170:	ldr	r0, [r0, #20]
   12174:	mov	r1, sp
   12178:	mov	r2, #2
   1217c:	bl	10f60 <rb_rawbuf_get@plt>
   12180:	cmp	r0, #2
   12184:	bne	123cc <rb_base64_encode@plt+0x13c4>
   12188:	add	sl, r4, #24
   1218c:	mov	r6, sp
   12190:	add	r7, sp, #8
   12194:	add	r8, sp, #6
   12198:	add	r5, sp, #2
   1219c:	b	121c4 <rb_base64_encode@plt+0x11bc>
   121a0:	and	r3, r0, #3
   121a4:	ldrb	r1, [r7, r0]
   121a8:	ldrb	r3, [r5, r3]
   121ac:	eor	r1, r3, r1
   121b0:	strb	r1, [r7, r0]
   121b4:	add	r0, r0, #1
   121b8:	cmp	r2, r0
   121bc:	bne	121a0 <rb_base64_encode@plt+0x1198>
   121c0:	b	123a4 <rb_base64_encode@plt+0x139c>
   121c4:	ldrb	r0, [sp, #1]
   121c8:	and	r2, r0, #127	; 0x7f
   121cc:	cmp	r2, #127	; 0x7f
   121d0:	strb	r2, [sp, #1]
   121d4:	beq	123b4 <rb_base64_encode@plt+0x13ac>
   121d8:	lsr	r9, r0, #7
   121dc:	cmp	r2, #126	; 0x7e
   121e0:	bne	12240 <rb_base64_encode@plt+0x1238>
   121e4:	mov	r0, r7
   121e8:	mov	r1, #0
   121ec:	mov	r2, #16384	; 0x4000
   121f0:	bl	10e58 <memset@plt>
   121f4:	ldr	r0, [r4, #20]
   121f8:	mov	r1, r8
   121fc:	mov	r2, #2
   12200:	bl	10f60 <rb_rawbuf_get@plt>
   12204:	cmp	r0, #0
   12208:	beq	122cc <rb_base64_encode@plt+0x12c4>
   1220c:	ldrh	r0, [sp, #6]
   12210:	cmp	r9, #0
   12214:	rev16	r1, r0
   12218:	strh	r1, [sp, #6]
   1221c:	beq	122fc <rb_base64_encode@plt+0x12f4>
   12220:	ldr	r0, [r4, #20]
   12224:	mov	r1, r5
   12228:	mov	r2, #4
   1222c:	bl	10f60 <rb_rawbuf_get@plt>
   12230:	cmp	r0, #0
   12234:	beq	122e4 <rb_base64_encode@plt+0x12dc>
   12238:	ldrh	r2, [sp, #6]
   1223c:	b	12304 <rb_base64_encode@plt+0x12fc>
   12240:	cmp	r9, #0
   12244:	beq	12264 <rb_base64_encode@plt+0x125c>
   12248:	ldr	r0, [r4, #20]
   1224c:	mov	r1, r5
   12250:	mov	r2, #4
   12254:	bl	10f60 <rb_rawbuf_get@plt>
   12258:	cmp	r0, #0
   1225c:	beq	122e4 <rb_base64_encode@plt+0x12dc>
   12260:	ldrb	r2, [sp, #1]
   12264:	ldr	r0, [r4, #20]
   12268:	mov	r1, r7
   1226c:	bl	10f60 <rb_rawbuf_get@plt>
   12270:	cmp	r0, #0
   12274:	beq	1236c <rb_base64_encode@plt+0x1364>
   12278:	mov	r2, r0
   1227c:	cmp	r9, #0
   12280:	beq	123a4 <rb_base64_encode@plt+0x139c>
   12284:	cmp	r2, #1
   12288:	blt	123a4 <rb_base64_encode@plt+0x139c>
   1228c:	mov	r0, #0
   12290:	cmp	r2, #16
   12294:	bcc	121a0 <rb_base64_encode@plt+0x1198>
   12298:	sub	r1, r2, #1
   1229c:	cmp	r1, #3
   122a0:	bhi	121a0 <rb_base64_encode@plt+0x1198>
   122a4:	vld1.8	{d16-d17}, [r5]
   122a8:	bic	r0, r2, #15
   122ac:	mov	r3, r7
   122b0:	mov	r1, r0
   122b4:	vld1.8	{d18-d19}, [r3]
   122b8:	subs	r1, r1, #16
   122bc:	veor	q9, q8, q9
   122c0:	vst1.8	{d18-d19}, [r3]!
   122c4:	bne	122b4 <rb_base64_encode@plt+0x12ac>
   122c8:	b	121b8 <rb_base64_encode@plt+0x11b0>
   122cc:	ldr	r2, [pc, #268]	; 123e0 <rb_base64_encode@plt+0x13d8>
   122d0:	mov	r0, r4
   122d4:	mov	r1, #1
   122d8:	add	r2, pc, r2
   122dc:	bl	11cd8 <rb_base64_encode@plt+0xcd0>
   122e0:	b	123b4 <rb_base64_encode@plt+0x13ac>
   122e4:	ldr	r2, [pc, #252]	; 123e8 <rb_base64_encode@plt+0x13e0>
   122e8:	mov	r0, r4
   122ec:	mov	r1, #1
   122f0:	add	r2, pc, r2
   122f4:	bl	11cd8 <rb_base64_encode@plt+0xcd0>
   122f8:	b	123b4 <rb_base64_encode@plt+0x13ac>
   122fc:	rev	r0, r0
   12300:	lsr	r2, r0, #16
   12304:	ldr	r0, [r4, #20]
   12308:	mov	r1, r7
   1230c:	bl	10f60 <rb_rawbuf_get@plt>
   12310:	cmp	r0, #0
   12314:	beq	1236c <rb_base64_encode@plt+0x1364>
   12318:	mov	r2, r0
   1231c:	cmp	r9, #0
   12320:	beq	123a4 <rb_base64_encode@plt+0x139c>
   12324:	cmp	r2, #1
   12328:	blt	123a4 <rb_base64_encode@plt+0x139c>
   1232c:	mov	r0, #0
   12330:	cmp	r2, #16
   12334:	bcc	12384 <rb_base64_encode@plt+0x137c>
   12338:	sub	r1, r2, #1
   1233c:	cmp	r1, #3
   12340:	bhi	12384 <rb_base64_encode@plt+0x137c>
   12344:	vld1.8	{d16-d17}, [r5]
   12348:	bic	r0, r2, #15
   1234c:	mov	r3, r7
   12350:	mov	r1, r0
   12354:	vld1.8	{d18-d19}, [r3]
   12358:	subs	r1, r1, #16
   1235c:	veor	q9, q8, q9
   12360:	vst1.8	{d18-d19}, [r3]!
   12364:	bne	12354 <rb_base64_encode@plt+0x134c>
   12368:	b	1239c <rb_base64_encode@plt+0x1394>
   1236c:	ldr	r2, [pc, #112]	; 123e4 <rb_base64_encode@plt+0x13dc>
   12370:	mov	r0, r4
   12374:	mov	r1, #1
   12378:	add	r2, pc, r2
   1237c:	bl	11cd8 <rb_base64_encode@plt+0xcd0>
   12380:	b	123b4 <rb_base64_encode@plt+0x13ac>
   12384:	and	r3, r0, #3
   12388:	ldrb	r1, [r7, r0]
   1238c:	ldrb	r3, [r5, r3]
   12390:	eor	r1, r3, r1
   12394:	strb	r1, [r7, r0]
   12398:	add	r0, r0, #1
   1239c:	cmp	r2, r0
   123a0:	bne	12384 <rb_base64_encode@plt+0x137c>
   123a4:	mov	r0, sl
   123a8:	mov	r1, r7
   123ac:	mov	r3, #1
   123b0:	bl	10e64 <rb_linebuf_parse@plt>
   123b4:	ldr	r0, [r4, #20]
   123b8:	mov	r1, r6
   123bc:	mov	r2, #2
   123c0:	bl	10f60 <rb_rawbuf_get@plt>
   123c4:	cmp	r0, #2
   123c8:	beq	121c4 <rb_base64_encode@plt+0x11bc>
   123cc:	ldr	r0, [r4, #88]	; 0x58
   123d0:	mov	r1, r4
   123d4:	bl	11c0c <rb_base64_encode@plt+0xc04>
   123d8:	sub	sp, fp, #28
   123dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123e0:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   123e4:	andeq	r1, r0, r2, asr pc
   123e8:	andeq	r1, r0, lr, lsr #31
   123ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123f0:	add	fp, sp, #28
   123f4:	sub	sp, sp, #20
   123f8:	sub	sp, sp, #16384	; 0x4000
   123fc:	add	r6, sp, #8
   12400:	mov	r4, r0
   12404:	mov	r1, #0
   12408:	mov	r2, #16384	; 0x4000
   1240c:	mov	sl, #0
   12410:	mov	r0, r6
   12414:	bl	10e58 <memset@plt>
   12418:	add	r5, r4, #52	; 0x34
   1241c:	mov	r1, r6
   12420:	mov	r2, #16384	; 0x4000
   12424:	mov	r3, #0
   12428:	str	sl, [sp]
   1242c:	mov	r0, r5
   12430:	bl	10eb8 <rb_linebuf_get@plt>
   12434:	mov	r6, r0
   12438:	ldrb	r0, [r4, #128]	; 0x80
   1243c:	cmp	r6, #0
   12440:	beq	12508 <rb_base64_encode@plt+0x1500>
   12444:	ldr	r8, [pc, #216]	; 12524 <rb_base64_encode@plt+0x151c>
   12448:	sub	r9, fp, #36	; 0x24
   1244c:	add	r7, sp, #8
   12450:	add	r8, pc, r8
   12454:	tst	r0, #2
   12458:	bne	124e0 <rb_base64_encode@plt+0x14d8>
   1245c:	cmp	r6, #122	; 0x7a
   12460:	bgt	12484 <rb_base64_encode@plt+0x147c>
   12464:	mov	r0, #129	; 0x81
   12468:	mov	r1, r9
   1246c:	mov	r2, #2
   12470:	strh	r0, [fp, #-36]	; 0xffffffdc
   12474:	add	r0, r6, #2
   12478:	and	r0, r0, #127	; 0x7f
   1247c:	strb	r0, [fp, #-35]	; 0xffffffdd
   12480:	b	124a0 <rb_base64_encode@plt+0x1498>
   12484:	movw	r0, #32385	; 0x7e81
   12488:	mov	r1, r9
   1248c:	mov	r2, #4
   12490:	str	r0, [fp, #-36]	; 0xffffffdc
   12494:	add	r0, r6, #2
   12498:	rev16	r0, r0
   1249c:	strh	r0, [fp, #-34]	; 0xffffffde
   124a0:	ldr	r0, [r4, #16]
   124a4:	bl	10fd8 <rb_rawbuf_append@plt>
   124a8:	ldrb	r0, [r4, #128]	; 0x80
   124ac:	tst	r0, #2
   124b0:	bne	124c8 <rb_base64_encode@plt+0x14c0>
   124b4:	ldr	r0, [r4, #16]
   124b8:	mov	r1, r7
   124bc:	mov	r2, r6
   124c0:	bl	10fd8 <rb_rawbuf_append@plt>
   124c4:	ldrb	r0, [r4, #128]	; 0x80
   124c8:	tst	r0, #2
   124cc:	bne	124e0 <rb_base64_encode@plt+0x14d8>
   124d0:	ldr	r0, [r4, #16]
   124d4:	mov	r1, r8
   124d8:	mov	r2, #2
   124dc:	bl	10fd8 <rb_rawbuf_append@plt>
   124e0:	mov	r0, r5
   124e4:	mov	r1, r7
   124e8:	mov	r2, #16384	; 0x4000
   124ec:	mov	r3, #0
   124f0:	str	sl, [sp]
   124f4:	bl	10eb8 <rb_linebuf_get@plt>
   124f8:	mov	r6, r0
   124fc:	ldrb	r0, [r4, #128]	; 0x80
   12500:	cmp	r6, #0
   12504:	bne	12454 <rb_base64_encode@plt+0x144c>
   12508:	tst	r0, #8
   1250c:	beq	1251c <rb_base64_encode@plt+0x1514>
   12510:	ldr	r0, [r4, #84]	; 0x54
   12514:	mov	r1, r4
   12518:	bl	12610 <rb_base64_encode@plt+0x1608>
   1251c:	sub	sp, fp, #28
   12520:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12524:	andeq	r1, r0, sp, lsl lr
   12528:	push	{r4, r5, r6, r7, fp, lr}
   1252c:	add	fp, sp, #16
   12530:	sub	sp, sp, #16384	; 0x4000
   12534:	cmp	r1, #0
   12538:	beq	12590 <rb_base64_encode@plt+0x1588>
   1253c:	mov	r4, r1
   12540:	mov	r5, sp
   12544:	ldr	r0, [r4, #88]	; 0x58
   12548:	mov	r1, r5
   1254c:	mov	r2, #16384	; 0x4000
   12550:	bl	10ea0 <rb_read@plt>
   12554:	cmp	r0, #0
   12558:	beq	12598 <rb_base64_encode@plt+0x1590>
   1255c:	cmn	r0, #1
   12560:	bgt	12544 <rb_base64_encode@plt+0x153c>
   12564:	bl	10ffc <__errno_location@plt>
   12568:	ldr	r0, [r0]
   1256c:	bl	10dec <rb_ignore_errno@plt>
   12570:	cmp	r0, #0
   12574:	beq	12598 <rb_base64_encode@plt+0x1590>
   12578:	ldr	r0, [r4, #88]	; 0x58
   1257c:	ldr	r2, [pc, #136]	; 1260c <rb_base64_encode@plt+0x1604>
   12580:	mov	r1, #1
   12584:	mov	r3, r4
   12588:	add	r2, pc, r2
   1258c:	bl	10e04 <rb_setselect@plt>
   12590:	sub	sp, fp, #16
   12594:	pop	{r4, r5, r6, r7, fp, pc}
   12598:	ldr	r0, [r4, #88]	; 0x58
   1259c:	bl	10f00 <rb_close@plt>
   125a0:	mov	r0, #0
   125a4:	str	r0, [r4, #4]
   125a8:	str	r4, [r4]
   125ac:	ldr	r0, [pc, #76]	; 12600 <rb_base64_encode@plt+0x15f8>
   125b0:	ldr	r0, [pc, r0]
   125b4:	cmp	r0, #0
   125b8:	str	r0, [r4, #8]
   125bc:	beq	125cc <rb_base64_encode@plt+0x15c4>
   125c0:	add	r0, r0, #4
   125c4:	str	r4, [r0]
   125c8:	b	125e0 <rb_base64_encode@plt+0x15d8>
   125cc:	ldr	r0, [pc, #48]	; 12604 <rb_base64_encode@plt+0x15fc>
   125d0:	add	r0, pc, r0
   125d4:	ldr	r1, [r0, #4]!
   125d8:	cmp	r1, #0
   125dc:	streq	r4, [r0]
   125e0:	ldr	r0, [pc, #32]	; 12608 <rb_base64_encode@plt+0x1600>
   125e4:	add	r0, pc, r0
   125e8:	str	r4, [r0]
   125ec:	ldr	r1, [r0, #8]
   125f0:	add	r1, r1, #1
   125f4:	str	r1, [r0, #8]
   125f8:	sub	sp, fp, #16
   125fc:	pop	{r4, r5, r6, r7, fp, pc}
   12600:	andeq	r2, r1, r0, asr #22
   12604:	andeq	r2, r1, r0, lsr #22
   12608:	andeq	r2, r1, ip, lsl #22
   1260c:			; <UNDEFINED> instruction: 0xffffff98
   12610:	push	{r4, r5, r6, sl, fp, lr}
   12614:	add	fp, sp, #16
   12618:	mov	r5, r0
   1261c:	ldrb	r0, [r1, #128]	; 0x80
   12620:	tst	r0, #2
   12624:	bne	12728 <rb_base64_encode@plt+0x1720>
   12628:	ldr	r0, [r1, #16]
   1262c:	mov	r4, r1
   12630:	mov	r1, r5
   12634:	bl	10fe4 <rb_rawbuf_flush@plt>
   12638:	cmp	r0, #1
   1263c:	blt	12668 <rb_base64_encode@plt+0x1660>
   12640:	add	r6, r4, #96	; 0x60
   12644:	ldrd	r2, [r6]
   12648:	mov	r1, r5
   1264c:	adds	r2, r2, r0
   12650:	adc	r3, r3, r0, asr #31
   12654:	strd	r2, [r6]
   12658:	ldr	r0, [r4, #16]
   1265c:	bl	10fe4 <rb_rawbuf_flush@plt>
   12660:	cmp	r0, #0
   12664:	bgt	12644 <rb_base64_encode@plt+0x163c>
   12668:	cmp	r0, #0
   1266c:	beq	126b4 <rb_base64_encode@plt+0x16ac>
   12670:	bl	10ffc <__errno_location@plt>
   12674:	mov	r5, r0
   12678:	ldr	r0, [r0]
   1267c:	bl	10dec <rb_ignore_errno@plt>
   12680:	cmp	r0, #0
   12684:	beq	126d8 <rb_base64_encode@plt+0x16d0>
   12688:	ldr	r0, [r4, #16]
   1268c:	bl	10f24 <rb_rawbuf_length@plt>
   12690:	mov	r1, r0
   12694:	ldr	r0, [r4, #84]	; 0x54
   12698:	cmp	r1, #1
   1269c:	blt	126fc <rb_base64_encode@plt+0x16f4>
   126a0:	ldr	r2, [pc, #160]	; 12748 <rb_base64_encode@plt+0x1740>
   126a4:	mov	r1, #2
   126a8:	mov	r3, r4
   126ac:	add	r2, pc, r2
   126b0:	b	12708 <rb_base64_encode@plt+0x1700>
   126b4:	ldr	r2, [pc, #144]	; 1274c <rb_base64_encode@plt+0x1744>
   126b8:	ldr	r3, [pc, #144]	; 12750 <rb_base64_encode@plt+0x1748>
   126bc:	mov	r0, r4
   126c0:	mov	r1, #1
   126c4:	add	r2, pc, r2
   126c8:	add	r3, pc, r3
   126cc:	bl	11cd8 <rb_base64_encode@plt+0xcd0>
   126d0:	bl	10ffc <__errno_location@plt>
   126d4:	mov	r5, r0
   126d8:	ldr	r0, [r5]
   126dc:	bl	10dbc <strerror@plt>
   126e0:	ldr	r2, [pc, #108]	; 12754 <rb_base64_encode@plt+0x174c>
   126e4:	mov	r3, r0
   126e8:	mov	r0, r4
   126ec:	mov	r1, #1
   126f0:	add	r2, pc, r2
   126f4:	pop	{r4, r5, r6, sl, fp, lr}
   126f8:	b	11cd8 <rb_base64_encode@plt+0xcd0>
   126fc:	mov	r1, #2
   12700:	mov	r2, #0
   12704:	mov	r3, #0
   12708:	bl	10e04 <rb_setselect@plt>
   1270c:	ldrb	r0, [r4, #128]	; 0x80
   12710:	tst	r0, #1
   12714:	popeq	{r4, r5, r6, sl, fp, pc}
   12718:	ldr	r0, [r4, #16]
   1271c:	bl	10f24 <rb_rawbuf_length@plt>
   12720:	cmp	r0, #0
   12724:	beq	1272c <rb_base64_encode@plt+0x1724>
   12728:	pop	{r4, r5, r6, sl, fp, pc}
   1272c:	ldrb	r0, [r4, #128]	; 0x80
   12730:	mov	r1, r4
   12734:	and	r0, r0, #254	; 0xfe
   12738:	strb	r0, [r4, #128]	; 0x80
   1273c:	ldr	r0, [r4, #88]	; 0x58
   12740:	pop	{r4, r5, r6, sl, fp, lr}
   12744:	b	11aa0 <rb_base64_encode@plt+0xa98>
   12748:			; <UNDEFINED> instruction: 0xffffff5c
   1274c:	andeq	r1, r0, r8, asr #21
   12750:	andeq	r1, r0, r7, asr #21
   12754:	andeq	r1, r0, pc, lsl #21
   12758:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1275c:	add	fp, sp, #28
   12760:	sub	sp, sp, #20
   12764:	mov	r0, r1
   12768:	mov	r4, r1
   1276c:	add	r8, r1, #44	; 0x2c
   12770:	ldr	sl, [r0, #36]!	; 0x24
   12774:	cmp	sl, #0
   12778:	str	r0, [sp, #16]
   1277c:	beq	12874 <rb_base64_encode@plt+0x186c>
   12780:	str	r4, [sp, #12]
   12784:	ldr	r5, [sl]
   12788:	ldr	r0, [r4, #16]
   1278c:	ldr	r9, [sl, #8]
   12790:	ldr	r3, [r5, #12]
   12794:	ldr	r1, [r5, #16]
   12798:	ldr	r2, [r5, #36]	; 0x24
   1279c:	ldr	r7, [pc, #264]	; 128ac <rb_base64_encode@plt+0x18a4>
   127a0:	ldr	r7, [pc, r7]
   127a4:	stm	sp, {r1, r7}
   127a8:	add	r7, r5, #20
   127ac:	mov	r1, r7
   127b0:	bl	10e1c <rb_send_fd_buf@plt>
   127b4:	mov	r6, r0
   127b8:	cmp	r0, #1
   127bc:	blt	12844 <rb_base64_encode@plt+0x183c>
   127c0:	ldr	r0, [sl, #8]
   127c4:	ldr	r1, [sl, #4]
   127c8:	ldr	r2, [sp, #16]
   127cc:	cmp	r0, #0
   127d0:	streq	r1, [r4, #40]	; 0x28
   127d4:	strne	r1, [r0, #4]
   127d8:	ldrne	r1, [sl, #4]
   127dc:	cmp	r1, #0
   127e0:	addne	r2, r1, #8
   127e4:	str	r0, [r2]
   127e8:	mov	r0, #0
   127ec:	str	r0, [sl, #4]
   127f0:	str	r0, [sl, #8]
   127f4:	ldr	r0, [r8]
   127f8:	sub	r0, r0, #1
   127fc:	str	r0, [r8]
   12800:	ldr	r0, [r5, #36]	; 0x24
   12804:	cmp	r0, #1
   12808:	blt	12828 <rb_base64_encode@plt+0x1820>
   1280c:	mov	r4, #0
   12810:	ldr	r0, [r7, r4, lsl #2]
   12814:	bl	10f00 <rb_close@plt>
   12818:	ldr	r0, [r5, #36]	; 0x24
   1281c:	add	r4, r4, #1
   12820:	cmp	r4, r0
   12824:	blt	12810 <rb_base64_encode@plt+0x1808>
   12828:	ldr	r0, [r5, #12]
   1282c:	cmp	r0, #0
   12830:	beq	12838 <rb_base64_encode@plt+0x1830>
   12834:	bl	10e88 <free@plt>
   12838:	mov	r0, r5
   1283c:	bl	10e88 <free@plt>
   12840:	ldr	r4, [sp, #12]
   12844:	cmp	r6, #0
   12848:	beq	128a4 <rb_base64_encode@plt+0x189c>
   1284c:	cmn	r6, #1
   12850:	bgt	12868 <rb_base64_encode@plt+0x1860>
   12854:	bl	10ffc <__errno_location@plt>
   12858:	ldr	r0, [r0]
   1285c:	bl	10dec <rb_ignore_errno@plt>
   12860:	cmp	r0, #0
   12864:	beq	128a4 <rb_base64_encode@plt+0x189c>
   12868:	cmp	r9, #0
   1286c:	mov	sl, r9
   12870:	bne	12784 <rb_base64_encode@plt+0x177c>
   12874:	ldr	r0, [r8]
   12878:	cmp	r0, #0
   1287c:	subeq	sp, fp, #28
   12880:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12884:	ldr	r0, [r4, #16]
   12888:	ldr	r2, [pc, #32]	; 128b0 <rb_base64_encode@plt+0x18a8>
   1288c:	mov	r1, #2
   12890:	mov	r3, r4
   12894:	add	r2, pc, r2
   12898:	sub	sp, fp, #28
   1289c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128a0:	b	10e04 <rb_setselect@plt>
   128a4:	mov	r0, #0
   128a8:	bl	10ff0 <exit@plt>
   128ac:	andeq	r2, r1, r8, asr #18
   128b0:			; <UNDEFINED> instruction: 0xfffffebc
	...
   128c0:	add	r2, pc, #40	; 0x28
   128c4:	movw	r1, #57840	; 0xe1f0
   128c8:	vld1.64	{d16-d17}, [r2 :128]
   128cc:	movt	r1, #50130	; 0xc3d2
   128d0:	str	r1, [r0, #16]
   128d4:	mov	r1, #24
   128d8:	vst1.32	{d16-d17}, [r0], r1
   128dc:	mov	r1, #0
   128e0:	str	r1, [r0]
   128e4:	str	r1, [r0, #4]
   128e8:	bx	lr
   128ec:	nop	{0}
   128f0:	strbvs	r2, [r5, -r1, lsl #6]
   128f4:	svc	0x00cdab89
   128f8:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   128fc:	eorsne	r5, r2, r6, ror r4
   12900:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12904:	add	fp, sp, #24
   12908:	mov	r5, r1
   1290c:	mov	r7, r0
   12910:	ldrd	r0, [r0, #24]
   12914:	mov	r4, r2
   12918:	adds	r2, r0, r2, lsl #3
   1291c:	adc	r3, r1, #0
   12920:	strd	r2, [r7, #24]
   12924:	ubfx	r9, r0, #3, #6
   12928:	add	r0, r9, r4
   1292c:	cmp	r0, #63	; 0x3f
   12930:	bls	1298c <rb_base64_encode@plt+0x1984>
   12934:	add	r8, r7, #32
   12938:	rsb	r6, r9, #64	; 0x40
   1293c:	mov	r1, r5
   12940:	add	r0, r8, r9
   12944:	mov	r2, r6
   12948:	bl	10edc <memcpy@plt>
   1294c:	mov	r0, r7
   12950:	mov	r1, r8
   12954:	bl	129ac <rb_base64_encode@plt+0x19a4>
   12958:	rsb	r0, r9, #127	; 0x7f
   1295c:	cmp	r0, r4
   12960:	bcs	12998 <rb_base64_encode@plt+0x1990>
   12964:	add	r1, r5, r6
   12968:	mov	r0, r7
   1296c:	bl	129ac <rb_base64_encode@plt+0x19a4>
   12970:	add	r1, r6, #127	; 0x7f
   12974:	add	r0, r6, #64	; 0x40
   12978:	cmp	r1, r4
   1297c:	mov	r6, r0
   12980:	bcc	12964 <rb_base64_encode@plt+0x195c>
   12984:	mov	r6, r0
   12988:	b	12998 <rb_base64_encode@plt+0x1990>
   1298c:	add	r0, r7, r9
   12990:	mov	r6, #0
   12994:	add	r8, r0, #32
   12998:	add	r1, r5, r6
   1299c:	sub	r2, r4, r6
   129a0:	mov	r0, r8
   129a4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   129a8:	b	10edc <memcpy@plt>
   129ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129b0:	add	fp, sp, #28
   129b4:	sub	sp, sp, #180	; 0xb4
   129b8:	ldr	r3, [r0, #8]
   129bc:	ldr	r4, [r0, #4]
   129c0:	ldr	r6, [r0]
   129c4:	ldr	r5, [r0, #12]
   129c8:	mov	ip, r0
   129cc:	str	r0, [sp, #76]	; 0x4c
   129d0:	ldr	r0, [r1, #4]
   129d4:	ldr	r7, [r1]
   129d8:	ldr	sl, [r1, #8]
   129dc:	ldr	r9, [r1, #12]
   129e0:	eor	r2, r3, r4, ror #2
   129e4:	str	r0, [fp, #-36]	; 0xffffffdc
   129e8:	rev	r0, r0
   129ec:	str	r7, [fp, #-40]	; 0xffffffd8
   129f0:	mov	r8, r3
   129f4:	str	r3, [sp, #80]	; 0x50
   129f8:	str	r5, [sp, #88]	; 0x58
   129fc:	str	r4, [sp, #92]	; 0x5c
   12a00:	str	r6, [sp, #84]	; 0x54
   12a04:	str	sl, [fp, #-68]	; 0xffffffbc
   12a08:	str	r9, [sp, #104]	; 0x68
   12a0c:	and	r2, r2, r6
   12a10:	add	r0, r0, r5
   12a14:	eor	r2, r2, r3
   12a18:	add	r0, r0, r2
   12a1c:	eor	r2, r5, r3
   12a20:	rev	r3, r7
   12a24:	ldr	r7, [ip, #16]
   12a28:	ldr	ip, [r1, #52]	; 0x34
   12a2c:	and	r2, r2, r4
   12a30:	add	r3, r3, r6, ror #27
   12a34:	eor	r2, r2, r5
   12a38:	add	r3, r3, r7
   12a3c:	str	r7, [sp, #72]	; 0x48
   12a40:	movw	r7, #31129	; 0x7999
   12a44:	str	ip, [fp, #-72]	; 0xffffffb8
   12a48:	movt	r7, #23170	; 0x5a82
   12a4c:	add	r2, r3, r2
   12a50:	add	r3, r2, r7
   12a54:	rev	r2, sl
   12a58:	mov	lr, r7
   12a5c:	ldr	sl, [r1, #60]	; 0x3c
   12a60:	add	r0, r0, r3, ror #27
   12a64:	add	r2, r2, r8
   12a68:	mov	r8, r6
   12a6c:	add	r5, r0, r7
   12a70:	ror	r0, r4, #2
   12a74:	mov	r7, r4
   12a78:	eor	r0, r0, r6, ror #2
   12a7c:	and	r0, r3, r0
   12a80:	str	sl, [fp, #-80]	; 0xffffffb0
   12a84:	eor	r0, r0, r4, ror #2
   12a88:	add	r0, r2, r0
   12a8c:	rev	r2, r9
   12a90:	ldr	r9, [r1, #56]	; 0x38
   12a94:	add	r0, r0, r5, ror #27
   12a98:	add	r2, r2, r7, ror #2
   12a9c:	ldr	r7, [r1, #16]
   12aa0:	add	r4, r0, lr
   12aa4:	ror	r0, r3, #2
   12aa8:	eor	r0, r0, r6, ror #2
   12aac:	and	r0, r5, r0
   12ab0:	str	r9, [fp, #-76]	; 0xffffffb4
   12ab4:	eor	r0, r0, r6, ror #2
   12ab8:	rev	r6, r7
   12abc:	str	r7, [fp, #-92]	; 0xffffffa4
   12ac0:	ldr	r7, [r1, #20]
   12ac4:	add	r0, r2, r0
   12ac8:	ror	r2, r5, #2
   12acc:	add	r6, r6, r8, ror #2
   12ad0:	eor	r2, r2, r3, ror #2
   12ad4:	add	r0, r0, r4, ror #27
   12ad8:	and	r2, r4, r2
   12adc:	add	r0, r0, lr
   12ae0:	eor	r2, r2, r3, ror #2
   12ae4:	str	r7, [fp, #-100]	; 0xffffff9c
   12ae8:	rev	r7, r7
   12aec:	add	r2, r6, r2
   12af0:	ror	r6, r4, #2
   12af4:	add	r3, r7, r3, ror #2
   12af8:	ldr	r7, [r1, #24]
   12afc:	eor	r6, r6, r5, ror #2
   12b00:	add	r2, r2, r0, ror #27
   12b04:	and	r6, r0, r6
   12b08:	add	r2, r2, lr
   12b0c:	eor	r8, r6, r5, ror #2
   12b10:	ror	r6, r0, #2
   12b14:	eor	r6, r6, r4, ror #2
   12b18:	add	r3, r3, r8
   12b1c:	str	r7, [fp, #-48]	; 0xffffffd0
   12b20:	rev	r7, r7
   12b24:	and	r6, r2, r6
   12b28:	add	r3, r3, r2, ror #27
   12b2c:	add	r5, r7, r5, ror #2
   12b30:	eor	r8, r6, r4, ror #2
   12b34:	ldr	r6, [r1, #28]
   12b38:	add	r3, r3, lr
   12b3c:	add	r5, r5, r8
   12b40:	add	r5, r5, r3, ror #27
   12b44:	add	r7, r5, lr
   12b48:	ror	r5, r2, #2
   12b4c:	eor	r5, r5, r0, ror #2
   12b50:	str	r6, [fp, #-96]	; 0xffffffa0
   12b54:	rev	r6, r6
   12b58:	and	r5, r3, r5
   12b5c:	add	r4, r6, r4, ror #2
   12b60:	ldr	r6, [r1, #32]
   12b64:	eor	r8, r5, r0, ror #2
   12b68:	add	r4, r4, r8
   12b6c:	add	r4, r4, r7, ror #27
   12b70:	add	r5, r4, lr
   12b74:	ror	r4, r3, #2
   12b78:	str	r6, [fp, #-32]	; 0xffffffe0
   12b7c:	rev	r6, r6
   12b80:	eor	r4, r4, r2, ror #2
   12b84:	add	r0, r6, r0, ror #2
   12b88:	ldr	r6, [r1, #36]	; 0x24
   12b8c:	and	r4, r7, r4
   12b90:	eor	r8, r4, r2, ror #2
   12b94:	ror	r4, r7, #2
   12b98:	eor	r4, r4, r3, ror #2
   12b9c:	add	r0, r0, r8
   12ba0:	and	r4, r5, r4
   12ba4:	str	r6, [fp, #-52]	; 0xffffffcc
   12ba8:	rev	r6, r6
   12bac:	add	r0, r0, r5, ror #27
   12bb0:	eor	r8, r4, r3, ror #2
   12bb4:	add	r2, r6, r2, ror #2
   12bb8:	add	r0, r0, lr
   12bbc:	add	r2, r2, r8
   12bc0:	add	r2, r2, r0, ror #27
   12bc4:	add	r6, r2, lr
   12bc8:	ror	r2, r5, #2
   12bcc:	eor	r2, r2, r7, ror #2
   12bd0:	and	r2, r0, r2
   12bd4:	eor	r8, r2, r7, ror #2
   12bd8:	ldr	r2, [r1, #40]	; 0x28
   12bdc:	rev	r4, r2
   12be0:	str	r2, [fp, #-84]	; 0xffffffac
   12be4:	add	r3, r4, r3, ror #2
   12be8:	add	r2, r3, r8
   12bec:	ldr	r3, [r1, #44]	; 0x2c
   12bf0:	add	r2, r2, r6, ror #27
   12bf4:	add	r8, r2, lr
   12bf8:	ror	r2, r0, #2
   12bfc:	eor	r2, r2, r5, ror #2
   12c00:	and	r2, r6, r2
   12c04:	str	r3, [fp, #-64]	; 0xffffffc0
   12c08:	rev	r3, r3
   12c0c:	add	r3, r3, r7, ror #2
   12c10:	eor	r2, r2, r5, ror #2
   12c14:	ldr	r7, [fp, #-40]	; 0xffffffd8
   12c18:	add	r2, r3, r2
   12c1c:	ldr	r3, [r1, #48]	; 0x30
   12c20:	rev	r1, sl
   12c24:	add	r2, r2, r8, ror #27
   12c28:	str	r1, [fp, #-88]	; 0xffffffa8
   12c2c:	add	r1, r1, r8, ror #2
   12c30:	add	r4, r2, lr
   12c34:	ror	r2, r6, #2
   12c38:	eor	r2, r2, r0, ror #2
   12c3c:	and	r2, r8, r2
   12c40:	str	r3, [fp, #-44]	; 0xffffffd4
   12c44:	rev	r3, r3
   12c48:	add	r3, r3, r5, ror #2
   12c4c:	eor	r2, r2, r0, ror #2
   12c50:	rev	r5, ip
   12c54:	add	r2, r3, r2
   12c58:	ror	r3, r8, #2
   12c5c:	add	r0, r5, r0, ror #2
   12c60:	rev	r5, r9
   12c64:	eor	r3, r3, r6, ror #2
   12c68:	add	r2, r2, r4, ror #27
   12c6c:	str	r5, [sp, #96]	; 0x60
   12c70:	add	r5, r5, r6, ror #2
   12c74:	and	r3, r4, r3
   12c78:	add	r2, r2, lr
   12c7c:	eor	r3, r3, r6, ror #2
   12c80:	add	r0, r0, r3
   12c84:	add	r0, r0, r2, ror #27
   12c88:	add	r3, r0, lr
   12c8c:	ror	r0, r4, #2
   12c90:	eor	r0, r0, r8, ror #2
   12c94:	and	r0, r2, r0
   12c98:	eor	r0, r0, r8, ror #2
   12c9c:	ldr	r8, [fp, #-68]	; 0xffffffbc
   12ca0:	add	r0, r5, r0
   12ca4:	ror	r5, r2, #2
   12ca8:	eor	r5, r5, r4, ror #2
   12cac:	add	r0, r0, r3, ror #27
   12cb0:	and	r5, r3, r5
   12cb4:	add	r0, r0, lr
   12cb8:	eor	r6, r8, r7
   12cbc:	ldr	r7, [fp, #-32]	; 0xffffffe0
   12cc0:	eor	r5, r5, r4, ror #2
   12cc4:	add	r1, r1, r5
   12cc8:	ror	r5, r3, #2
   12ccc:	eor	r5, r5, r2, ror #2
   12cd0:	add	r1, r1, r0, ror #27
   12cd4:	and	r5, r0, r5
   12cd8:	add	r1, r1, lr
   12cdc:	eor	r6, r6, r7
   12ce0:	eor	r5, r5, r2, ror #2
   12ce4:	eor	r6, r6, ip
   12ce8:	mov	ip, lr
   12cec:	rev	r7, r6
   12cf0:	ror	r6, r7, #31
   12cf4:	str	r7, [fp, #-56]	; 0xffffffc8
   12cf8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   12cfc:	add	r6, r6, r4, ror #2
   12d00:	add	r6, r6, r5
   12d04:	add	r6, r6, r1, ror #27
   12d08:	add	r4, r6, lr
   12d0c:	ldr	lr, [sp, #104]	; 0x68
   12d10:	ror	r6, r0, #2
   12d14:	eor	r6, r6, r3, ror #2
   12d18:	and	r6, r1, r6
   12d1c:	eor	r6, r6, r3, ror #2
   12d20:	eor	r5, lr, r7
   12d24:	ldr	r7, [fp, #-52]	; 0xffffffcc
   12d28:	eor	r5, r5, r7
   12d2c:	eor	r5, r5, r9
   12d30:	mov	r9, ip
   12d34:	rev	r5, r5
   12d38:	ror	r7, r5, #31
   12d3c:	str	r5, [fp, #-60]	; 0xffffffc4
   12d40:	ldr	r5, [fp, #-84]	; 0xffffffac
   12d44:	add	r2, r7, r2, ror #2
   12d48:	ldr	r7, [fp, #-92]	; 0xffffffa4
   12d4c:	add	r2, r2, r6
   12d50:	add	r2, r2, r4, ror #27
   12d54:	add	ip, r2, ip
   12d58:	ror	r2, r1, #2
   12d5c:	eor	r6, r7, r8
   12d60:	eor	r2, r2, r0, ror #2
   12d64:	eor	r6, r6, r5
   12d68:	ldr	r5, [fp, #-64]	; 0xffffffc0
   12d6c:	and	r2, r4, r2
   12d70:	eor	r6, r6, sl
   12d74:	ldr	sl, [fp, #-100]	; 0xffffff9c
   12d78:	eor	r2, r2, r0, ror #2
   12d7c:	rev	r8, r6
   12d80:	ror	r6, r8, #31
   12d84:	str	r8, [fp, #-68]	; 0xffffffbc
   12d88:	add	r3, r6, r3, ror #2
   12d8c:	str	r6, [sp, #68]	; 0x44
   12d90:	eor	r6, sl, lr
   12d94:	add	r2, r3, r2
   12d98:	ror	r3, r4, #2
   12d9c:	eor	r6, r6, r5
   12da0:	ldr	r5, [fp, #-56]	; 0xffffffc8
   12da4:	eor	r3, r3, r1, ror #2
   12da8:	add	r2, r2, ip, ror #27
   12dac:	rev	r6, r6
   12db0:	and	r3, ip, r3
   12db4:	add	r2, r2, r9
   12db8:	eor	r3, r3, r1, ror #2
   12dbc:	eor	r6, r6, r5, ror #31
   12dc0:	ror	r5, r6, #31
   12dc4:	str	r6, [fp, #-40]	; 0xffffffd8
   12dc8:	ldr	r6, [fp, #-48]	; 0xffffffd0
   12dcc:	add	r0, r5, r0, ror #2
   12dd0:	str	r5, [sp, #60]	; 0x3c
   12dd4:	ldr	r5, [fp, #-44]	; 0xffffffd4
   12dd8:	add	r0, r0, r3
   12ddc:	add	r0, r0, r2, ror #27
   12de0:	eor	r7, r6, r7
   12de4:	add	r3, r0, r9
   12de8:	ror	r0, ip, #2
   12dec:	eor	r7, r7, r5
   12df0:	ldr	r5, [fp, #-60]	; 0xffffffc4
   12df4:	eor	r0, r0, r4, ror #2
   12df8:	rev	r7, r7
   12dfc:	eor	r0, r0, r2
   12e00:	eor	r9, r7, r5, ror #31
   12e04:	ror	r5, r9, #31
   12e08:	str	r9, [fp, #-92]	; 0xffffffa4
   12e0c:	add	r1, r5, r1, ror #2
   12e10:	str	r5, [sp, #56]	; 0x38
   12e14:	ldr	r5, [fp, #-96]	; 0xffffffa0
   12e18:	add	r0, r1, r0
   12e1c:	movw	r1, #60321	; 0xeba1
   12e20:	add	r0, r0, r3, ror #27
   12e24:	movt	r1, #28377	; 0x6ed9
   12e28:	add	r0, r0, r1
   12e2c:	ror	r1, r2, #2
   12e30:	eor	r1, r1, ip, ror #2
   12e34:	eor	r7, r5, sl
   12e38:	eor	lr, r1, r3
   12e3c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12e40:	eor	r7, r7, r1
   12e44:	rev	r7, r7
   12e48:	eor	r7, r7, r8, ror #31
   12e4c:	ldr	r8, [fp, #-32]	; 0xffffffe0
   12e50:	ror	r1, r7, #31
   12e54:	mov	sl, r7
   12e58:	str	r7, [fp, #-100]	; 0xffffff9c
   12e5c:	add	r7, r1, r4, ror #2
   12e60:	str	r1, [sp, #52]	; 0x34
   12e64:	add	r1, r7, lr
   12e68:	movw	r7, #60321	; 0xeba1
   12e6c:	add	r1, r1, r0, ror #27
   12e70:	movt	r7, #28377	; 0x6ed9
   12e74:	eor	r4, r8, r6
   12e78:	ldr	r6, [fp, #-40]	; 0xffffffd8
   12e7c:	add	lr, r1, r7
   12e80:	ldr	r7, [fp, #-76]	; 0xffffffb4
   12e84:	ror	r1, r3, #2
   12e88:	eor	r1, r1, r2, ror #2
   12e8c:	eor	r1, r1, r0
   12e90:	eor	r4, r4, r7
   12e94:	rev	r4, r4
   12e98:	eor	r4, r4, r6, ror #31
   12e9c:	ror	r6, r4, #31
   12ea0:	str	r4, [fp, #-48]	; 0xffffffd0
   12ea4:	add	r7, r6, ip, ror #2
   12ea8:	str	r6, [sp, #44]	; 0x2c
   12eac:	movw	r6, #60321	; 0xeba1
   12eb0:	add	r1, r7, r1
   12eb4:	ldr	r7, [fp, #-52]	; 0xffffffcc
   12eb8:	movt	r6, #28377	; 0x6ed9
   12ebc:	add	r1, r1, lr, ror #27
   12ec0:	add	ip, r1, r6
   12ec4:	ror	r1, r0, #2
   12ec8:	eor	r1, r1, r3, ror #2
   12ecc:	eor	r4, r7, r5
   12ed0:	ldr	r5, [fp, #-80]	; 0xffffffb0
   12ed4:	eor	r1, r1, lr
   12ed8:	eor	r4, r4, r5
   12edc:	rev	r4, r4
   12ee0:	eor	r4, r4, r9, ror #31
   12ee4:	ldr	r9, [fp, #-84]	; 0xffffffac
   12ee8:	ror	r5, r4, #31
   12eec:	str	r4, [fp, #-36]	; 0xffffffdc
   12ef0:	add	r2, r5, r2, ror #2
   12ef4:	str	r5, [sp, #24]
   12ef8:	mov	r5, r6
   12efc:	add	r1, r2, r1
   12f00:	add	r1, r1, ip, ror #27
   12f04:	eor	r4, r9, r8
   12f08:	ldr	r8, [fp, #-44]	; 0xffffffd4
   12f0c:	add	r2, r1, r6
   12f10:	ldr	r6, [fp, #-56]	; 0xffffffc8
   12f14:	rev	r4, r4
   12f18:	ror	r1, lr, #2
   12f1c:	eor	r1, r1, r0, ror #2
   12f20:	eor	r1, r1, ip
   12f24:	eor	r4, r4, r6, ror #31
   12f28:	mov	r6, r5
   12f2c:	eor	r4, r4, sl, ror #31
   12f30:	str	r4, [fp, #-32]	; 0xffffffe0
   12f34:	ror	r4, r4, #31
   12f38:	add	r3, r4, r3, ror #2
   12f3c:	str	r4, [sp, #16]
   12f40:	ldr	r4, [fp, #-60]	; 0xffffffc4
   12f44:	add	r1, r3, r1
   12f48:	add	r1, r1, r2, ror #27
   12f4c:	add	r3, r1, r5
   12f50:	ldr	r5, [fp, #-64]	; 0xffffffc0
   12f54:	ror	r1, ip, #2
   12f58:	eor	r1, r1, lr, ror #2
   12f5c:	eor	r1, r1, r2
   12f60:	eor	r7, r5, r7
   12f64:	rev	r7, r7
   12f68:	eor	r7, r7, r4, ror #31
   12f6c:	ldr	r4, [fp, #-48]	; 0xffffffd0
   12f70:	eor	sl, r7, r4, ror #31
   12f74:	ldr	r4, [fp, #-68]	; 0xffffffbc
   12f78:	ror	r7, sl, #31
   12f7c:	str	sl, [sp, #100]	; 0x64
   12f80:	add	r0, r7, r0, ror #2
   12f84:	str	r7, [sp, #64]	; 0x40
   12f88:	eor	r7, r8, r9
   12f8c:	rev	r7, r7
   12f90:	add	r0, r0, r1
   12f94:	eor	r7, r7, r4, ror #31
   12f98:	ldr	r4, [fp, #-36]	; 0xffffffdc
   12f9c:	add	r0, r0, r3, ror #27
   12fa0:	add	r1, r0, r6
   12fa4:	ror	r0, r2, #2
   12fa8:	eor	r0, r0, ip, ror #2
   12fac:	eor	r0, r0, r3
   12fb0:	eor	r4, r7, r4, ror #31
   12fb4:	str	r4, [fp, #-52]	; 0xffffffcc
   12fb8:	ror	r4, r4, #31
   12fbc:	add	r7, r4, lr, ror #2
   12fc0:	str	r4, [sp]
   12fc4:	add	r0, r7, r0
   12fc8:	add	r0, r0, r1, ror #27
   12fcc:	add	lr, r0, r6
   12fd0:	ldr	r6, [fp, #-72]	; 0xffffffb8
   12fd4:	ror	r0, r3, #2
   12fd8:	eor	r0, r0, r2, ror #2
   12fdc:	eor	r4, r0, r1
   12fe0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12fe4:	eor	r7, r6, r5
   12fe8:	ldr	r5, [fp, #-32]	; 0xffffffe0
   12fec:	rev	r7, r7
   12ff0:	eor	r7, r7, r0, ror #31
   12ff4:	eor	r9, r7, r5, ror #31
   12ff8:	ldr	r5, [fp, #-76]	; 0xffffffb4
   12ffc:	ror	r0, r9, #31
   13000:	str	r9, [sp, #104]	; 0x68
   13004:	add	r7, r0, ip, ror #2
   13008:	str	r0, [sp, #12]
   1300c:	movw	ip, #60321	; 0xeba1
   13010:	add	r0, r7, r4
   13014:	movw	r7, #60321	; 0xeba1
   13018:	movt	ip, #28377	; 0x6ed9
   1301c:	eor	r4, r5, r8
   13020:	ldr	r5, [fp, #-92]	; 0xffffffa4
   13024:	add	r0, r0, lr, ror #27
   13028:	movt	r7, #28377	; 0x6ed9
   1302c:	rev	r4, r4
   13030:	add	r0, r0, r7
   13034:	ror	r7, r1, #2
   13038:	eor	r7, r7, r3, ror #2
   1303c:	eor	r7, r7, lr
   13040:	eor	r4, r4, r5, ror #31
   13044:	eor	r5, r4, sl, ror #31
   13048:	ldr	sl, [fp, #-56]	; 0xffffffc8
   1304c:	ror	r4, r5, #31
   13050:	str	r5, [fp, #-96]	; 0xffffffa0
   13054:	add	r2, r4, r2, ror #2
   13058:	str	r4, [sp, #8]
   1305c:	ror	r4, lr, #2
   13060:	add	r2, r2, r7
   13064:	ldr	r7, [fp, #-80]	; 0xffffffb0
   13068:	eor	r4, r4, r1, ror #2
   1306c:	eor	r4, r4, r0
   13070:	add	r2, r2, r0, ror #27
   13074:	add	r2, r2, ip
   13078:	eor	r7, r7, r6
   1307c:	ldr	r6, [fp, #-100]	; 0xffffff9c
   13080:	rev	r7, r7
   13084:	eor	r7, r7, r6, ror #31
   13088:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1308c:	eor	r6, r7, r6, ror #31
   13090:	ldr	r7, [sp, #96]	; 0x60
   13094:	str	r6, [fp, #-44]	; 0xffffffd4
   13098:	ror	r6, r6, #31
   1309c:	add	r3, r6, r3, ror #2
   130a0:	str	r6, [sp, #4]
   130a4:	ldr	r6, [fp, #-48]	; 0xffffffd0
   130a8:	add	r3, r3, r4
   130ac:	ror	r4, r0, #2
   130b0:	eor	r7, r7, sl, ror #31
   130b4:	eor	r4, r4, lr, ror #2
   130b8:	add	r3, r3, r2, ror #27
   130bc:	eor	r4, r4, r2
   130c0:	add	r3, r3, ip
   130c4:	eor	r7, r7, r6, ror #31
   130c8:	eor	r8, r7, r9, ror #31
   130cc:	ldr	r7, [fp, #-88]	; 0xffffffa8
   130d0:	ror	r6, r8, #31
   130d4:	str	r8, [fp, #-76]	; 0xffffffb4
   130d8:	add	r1, r6, r1, ror #2
   130dc:	str	r6, [sp, #20]
   130e0:	ldr	r6, [fp, #-36]	; 0xffffffdc
   130e4:	add	r1, r1, r4
   130e8:	ror	r4, r2, #2
   130ec:	add	r1, r1, r3, ror #27
   130f0:	eor	r4, r4, r0, ror #2
   130f4:	add	r1, r1, ip
   130f8:	ldr	ip, [fp, #-60]	; 0xffffffc4
   130fc:	eor	r4, r4, r3
   13100:	eor	r7, r7, ip, ror #31
   13104:	eor	r7, r7, r6, ror #31
   13108:	movw	r6, #60321	; 0xeba1
   1310c:	eor	r9, r7, r5, ror #31
   13110:	movt	r6, #28377	; 0x6ed9
   13114:	ror	r5, r9, #31
   13118:	str	r9, [fp, #-88]	; 0xffffffa8
   1311c:	add	r7, r5, lr, ror #2
   13120:	str	r5, [sp, #28]
   13124:	ldr	r5, [sp, #68]	; 0x44
   13128:	add	r7, r7, r4
   1312c:	ror	r4, r3, #2
   13130:	add	r7, r7, r1, ror #27
   13134:	eor	r4, r4, r2, ror #2
   13138:	add	r7, r7, r6
   1313c:	ldr	r6, [fp, #-32]	; 0xffffffe0
   13140:	eor	r4, r4, r1
   13144:	eor	r5, r5, sl, ror #31
   13148:	movw	sl, #60321	; 0xeba1
   1314c:	movt	sl, #28377	; 0x6ed9
   13150:	eor	r5, r5, r6, ror #31
   13154:	ldr	r6, [fp, #-44]	; 0xffffffd4
   13158:	eor	r6, r5, r6, ror #31
   1315c:	ror	r5, r6, #31
   13160:	str	r6, [sp, #96]	; 0x60
   13164:	ldr	r6, [sp, #60]	; 0x3c
   13168:	add	r0, r5, r0, ror #2
   1316c:	str	r5, [sp, #48]	; 0x30
   13170:	ror	r5, r1, #2
   13174:	add	r0, r0, r4
   13178:	eor	r5, r5, r3, ror #2
   1317c:	eor	r5, r5, r7
   13180:	add	r0, r0, r7, ror #27
   13184:	eor	r4, r6, ip, ror #31
   13188:	ldr	r6, [sp, #100]	; 0x64
   1318c:	add	r0, r0, sl
   13190:	eor	r4, r4, r6, ror #31
   13194:	eor	r4, r4, r8, ror #31
   13198:	ror	r6, r4, #31
   1319c:	mov	r8, r4
   131a0:	str	r4, [fp, #-80]	; 0xffffffb0
   131a4:	ldr	r4, [sp, #56]	; 0x38
   131a8:	add	r2, r6, r2, ror #2
   131ac:	str	r6, [sp, #32]
   131b0:	ldr	r6, [fp, #-68]	; 0xffffffbc
   131b4:	add	r2, r2, r5
   131b8:	ror	r5, r7, #2
   131bc:	eor	r5, r5, r1, ror #2
   131c0:	add	r2, r2, r0, ror #27
   131c4:	eor	lr, r5, r0
   131c8:	add	r2, r2, sl
   131cc:	eor	r4, r4, r6, ror #31
   131d0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   131d4:	eor	r4, r4, r6, ror #31
   131d8:	eor	r4, r4, r9, ror #31
   131dc:	mov	r9, sl
   131e0:	ror	r5, r4, #31
   131e4:	mov	r6, r4
   131e8:	str	r4, [fp, #-84]	; 0xffffffac
   131ec:	ldr	r4, [sp, #52]	; 0x34
   131f0:	add	r3, r5, r3, ror #2
   131f4:	str	r5, [sp, #36]	; 0x24
   131f8:	ldr	r5, [fp, #-40]	; 0xffffffd8
   131fc:	add	r3, r3, lr
   13200:	add	r3, r3, r2, ror #27
   13204:	add	lr, r3, sl
   13208:	ldr	sl, [sp, #96]	; 0x60
   1320c:	ror	r3, r0, #2
   13210:	eor	r4, r4, r5, ror #31
   13214:	ldr	r5, [sp, #104]	; 0x68
   13218:	eor	r3, r3, r7, ror #2
   1321c:	eor	r3, r3, r2
   13220:	eor	r4, r4, r5, ror #31
   13224:	eor	r5, r4, sl, ror #31
   13228:	ror	r4, r5, #31
   1322c:	mov	ip, r5
   13230:	str	r5, [fp, #-72]	; 0xffffffb8
   13234:	ldr	r5, [fp, #-92]	; 0xffffffa4
   13238:	add	r1, r4, r1, ror #2
   1323c:	str	r4, [sp, #40]	; 0x28
   13240:	ldr	r4, [sp, #44]	; 0x2c
   13244:	add	r1, r1, r3
   13248:	ror	r3, r2, #2
   1324c:	add	r1, r1, lr, ror #27
   13250:	eor	r3, r3, r0, ror #2
   13254:	add	r1, r1, r9
   13258:	eor	r3, r3, lr
   1325c:	eor	r4, r4, r5, ror #31
   13260:	ldr	r5, [fp, #-96]	; 0xffffffa0
   13264:	eor	r4, r4, r5, ror #31
   13268:	eor	r5, r4, r8, ror #31
   1326c:	movw	r8, #60321	; 0xeba1
   13270:	ror	r4, r5, #31
   13274:	mov	r9, r5
   13278:	str	r5, [fp, #-92]	; 0xffffffa4
   1327c:	ldr	r5, [sp, #24]
   13280:	movt	r8, #28377	; 0x6ed9
   13284:	str	r4, [sp, #44]	; 0x2c
   13288:	add	r4, r4, r7, ror #2
   1328c:	ldr	r7, [fp, #-100]	; 0xffffff9c
   13290:	add	r3, r4, r3
   13294:	movw	r4, #60321	; 0xeba1
   13298:	add	r3, r3, r1, ror #27
   1329c:	movt	r4, #28377	; 0x6ed9
   132a0:	add	r3, r3, r4
   132a4:	ror	r4, lr, #2
   132a8:	eor	r5, r5, r7, ror #31
   132ac:	ldr	r7, [fp, #-44]	; 0xffffffd4
   132b0:	eor	r4, r4, r2, ror #2
   132b4:	eor	r4, r4, r1
   132b8:	eor	r5, r5, r7, ror #31
   132bc:	eor	r7, r5, r6, ror #31
   132c0:	ror	r5, r7, #31
   132c4:	mov	r6, r7
   132c8:	str	r7, [fp, #-56]	; 0xffffffc8
   132cc:	ldr	r7, [fp, #-48]	; 0xffffffd0
   132d0:	add	r0, r5, r0, ror #2
   132d4:	str	r5, [sp, #52]	; 0x34
   132d8:	add	r0, r0, r4
   132dc:	ldr	r4, [sp, #16]
   132e0:	add	r0, r0, r3, ror #27
   132e4:	add	r5, r0, r8
   132e8:	ror	r0, r1, #2
   132ec:	eor	r0, r0, lr, ror #2
   132f0:	eor	r4, r4, r7, ror #31
   132f4:	ldr	r7, [fp, #-76]	; 0xffffffb4
   132f8:	eor	r0, r0, r3
   132fc:	eor	r4, r4, r7, ror #31
   13300:	ldr	r7, [sp]
   13304:	eor	ip, r4, ip, ror #31
   13308:	ror	r4, ip, #31
   1330c:	str	ip, [fp, #-64]	; 0xffffffc0
   13310:	add	r2, r4, r2, ror #2
   13314:	str	r4, [fp, #-48]	; 0xffffffd0
   13318:	add	r0, r2, r0
   1331c:	add	r0, r0, r5, ror #27
   13320:	add	r2, r0, r8
   13324:	orr	r0, r2, r5, ror #2
   13328:	and	r4, r2, r5, ror #2
   1332c:	and	r0, r0, r3, ror #2
   13330:	orr	r0, r0, r4
   13334:	ldr	r4, [fp, #-32]	; 0xffffffe0
   13338:	eor	r4, r7, r4, ror #31
   1333c:	movw	r7, #60321	; 0xeba1
   13340:	eor	r4, r4, sl, ror #31
   13344:	movt	r7, #28377	; 0x6ed9
   13348:	movw	sl, #48348	; 0xbcdc
   1334c:	eor	r8, r4, r6, ror #31
   13350:	movt	sl, #36635	; 0x8f1b
   13354:	ror	r6, r8, #31
   13358:	str	r8, [fp, #-60]	; 0xffffffc4
   1335c:	add	r4, r6, r1, ror #2
   13360:	str	r6, [sp, #68]	; 0x44
   13364:	ldr	r6, [fp, #-36]	; 0xffffffdc
   13368:	add	r0, r4, r0
   1336c:	ror	r4, r3, #2
   13370:	eor	r1, r4, r1, ror #2
   13374:	eor	r4, r1, r5
   13378:	ldr	r1, [sp, #64]	; 0x40
   1337c:	eor	r1, r1, r6, ror #31
   13380:	ldr	r6, [fp, #-88]	; 0xffffffa8
   13384:	eor	r1, r1, r6, ror #31
   13388:	eor	r9, r1, r9, ror #31
   1338c:	ror	r6, r9, #31
   13390:	str	r9, [sp, #16]
   13394:	add	r1, r6, lr, ror #2
   13398:	str	r6, [sp, #24]
   1339c:	add	r1, r1, r4
   133a0:	ldr	r4, [sp, #100]	; 0x64
   133a4:	add	r1, r1, r2, ror #27
   133a8:	add	r6, r1, r7
   133ac:	orr	r1, r6, r2, ror #2
   133b0:	and	r7, r6, r2, ror #2
   133b4:	add	r0, r0, r6, ror #27
   133b8:	and	r1, r1, r5, ror #2
   133bc:	add	r0, r0, sl
   133c0:	orr	r1, r1, r7
   133c4:	ldr	r7, [sp, #12]
   133c8:	eor	r7, r7, r4, ror #31
   133cc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   133d0:	eor	r7, r7, r4, ror #31
   133d4:	eor	r7, r7, ip, ror #31
   133d8:	ror	r4, r7, #31
   133dc:	mov	lr, r7
   133e0:	str	r7, [fp, #-68]	; 0xffffffbc
   133e4:	and	r7, r0, r6, ror #2
   133e8:	add	r3, r4, r3, ror #2
   133ec:	str	r4, [sp, #100]	; 0x64
   133f0:	ldr	r4, [fp, #-52]	; 0xffffffcc
   133f4:	add	r1, r3, r1
   133f8:	add	r1, r1, r0, ror #27
   133fc:	add	r3, r1, sl
   13400:	orr	r1, r0, r6, ror #2
   13404:	and	r1, r1, r2, ror #2
   13408:	orr	r1, r1, r7
   1340c:	ldr	r7, [sp, #8]
   13410:	eor	r7, r7, r4, ror #31
   13414:	ldr	r4, [fp, #-84]	; 0xffffffac
   13418:	eor	r7, r7, r4, ror #31
   1341c:	eor	ip, r7, r9, ror #31
   13420:	ror	r4, ip, #31
   13424:	str	ip, [sp, #12]
   13428:	add	r7, r4, r5, ror #2
   1342c:	str	r4, [sp, #64]	; 0x40
   13430:	ldr	r4, [sp, #4]
   13434:	add	r1, r7, r1
   13438:	and	r7, r3, r0, ror #2
   1343c:	add	r1, r1, r3, ror #27
   13440:	add	r5, r1, sl
   13444:	orr	r1, r3, r0, ror #2
   13448:	and	r1, r1, r6, ror #2
   1344c:	orr	r1, r1, r7
   13450:	ldr	r7, [sp, #104]	; 0x68
   13454:	eor	r7, r4, r7, ror #31
   13458:	ldr	r4, [fp, #-72]	; 0xffffffb8
   1345c:	eor	r7, r7, r4, ror #31
   13460:	eor	r4, r7, r8, ror #31
   13464:	and	r7, r5, r3, ror #2
   13468:	mov	r8, sl
   1346c:	str	r4, [fp, #-32]	; 0xffffffe0
   13470:	ror	r4, r4, #31
   13474:	add	r2, r4, r2, ror #2
   13478:	str	r4, [sp, #104]	; 0x68
   1347c:	ldr	r4, [sp, #20]
   13480:	add	r1, r2, r1
   13484:	add	r1, r1, r5, ror #27
   13488:	add	r2, r1, sl
   1348c:	orr	r1, r5, r3, ror #2
   13490:	and	r1, r1, r0, ror #2
   13494:	orr	r1, r1, r7
   13498:	ldr	r7, [fp, #-96]	; 0xffffffa0
   1349c:	eor	r7, r4, r7, ror #31
   134a0:	ldr	r4, [fp, #-92]	; 0xffffffa4
   134a4:	eor	r7, r7, r4, ror #31
   134a8:	eor	r7, r7, lr, ror #31
   134ac:	ror	r4, r7, #31
   134b0:	str	r7, [fp, #-96]	; 0xffffffa0
   134b4:	add	r7, r4, r6, ror #2
   134b8:	str	r4, [sp, #60]	; 0x3c
   134bc:	ldr	r4, [sp, #28]
   134c0:	ldr	r6, [fp, #-44]	; 0xffffffd4
   134c4:	add	r1, r7, r1
   134c8:	and	r7, r2, r5, ror #2
   134cc:	add	r1, r1, r2, ror #27
   134d0:	add	lr, r1, sl
   134d4:	orr	r1, r2, r5, ror #2
   134d8:	mov	sl, ip
   134dc:	and	r1, r1, r3, ror #2
   134e0:	orr	r1, r1, r7
   134e4:	eor	r7, r4, r6, ror #31
   134e8:	ldr	r4, [fp, #-56]	; 0xffffffc8
   134ec:	ldr	r6, [fp, #-88]	; 0xffffffa8
   134f0:	eor	r7, r7, r4, ror #31
   134f4:	ldr	r4, [fp, #-76]	; 0xffffffb4
   134f8:	eor	r7, r7, ip, ror #31
   134fc:	str	r7, [fp, #-100]	; 0xffffff9c
   13500:	ror	r7, r7, #31
   13504:	add	r0, r7, r0, ror #2
   13508:	str	r7, [sp, #56]	; 0x38
   1350c:	and	r7, lr, r2, ror #2
   13510:	add	r0, r0, r1
   13514:	orr	r1, lr, r2, ror #2
   13518:	add	r0, r0, lr, ror #27
   1351c:	and	r1, r1, r5, ror #2
   13520:	add	ip, r0, r8
   13524:	ldr	r0, [sp, #48]	; 0x30
   13528:	orr	r1, r1, r7
   1352c:	eor	r7, r0, r4, ror #31
   13530:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13534:	movw	r4, #48348	; 0xbcdc
   13538:	movt	r4, #36635	; 0x8f1b
   1353c:	eor	r7, r7, r0, ror #31
   13540:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13544:	eor	r8, r7, r0, ror #31
   13548:	and	r7, ip, lr, ror #2
   1354c:	ror	r0, r8, #31
   13550:	str	r8, [fp, #-76]	; 0xffffffb4
   13554:	add	r3, r0, r3, ror #2
   13558:	str	r0, [sp, #48]	; 0x30
   1355c:	ldr	r0, [sp, #32]
   13560:	add	r1, r3, r1
   13564:	add	r1, r1, ip, ror #27
   13568:	add	r3, r1, r4
   1356c:	orr	r1, ip, lr, ror #2
   13570:	and	r1, r1, r2, ror #2
   13574:	orr	r1, r1, r7
   13578:	eor	r7, r0, r6, ror #31
   1357c:	ldr	r6, [sp, #96]	; 0x60
   13580:	eor	r7, r7, r9, ror #31
   13584:	ldr	r9, [fp, #-96]	; 0xffffffa0
   13588:	eor	r0, r7, r9, ror #31
   1358c:	str	r0, [fp, #-36]	; 0xffffffdc
   13590:	ror	r0, r0, #31
   13594:	add	r7, r0, r5, ror #2
   13598:	str	r0, [fp, #-88]	; 0xffffffa8
   1359c:	ldr	r0, [sp, #36]	; 0x24
   135a0:	add	r1, r7, r1
   135a4:	and	r7, r3, ip, ror #2
   135a8:	add	r1, r1, r3, ror #27
   135ac:	add	r5, r1, r4
   135b0:	orr	r1, r3, ip, ror #2
   135b4:	and	r1, r1, lr, ror #2
   135b8:	orr	r1, r1, r7
   135bc:	eor	r7, r0, r6, ror #31
   135c0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   135c4:	ldr	r6, [fp, #-100]	; 0xffffff9c
   135c8:	eor	r7, r7, r0, ror #31
   135cc:	eor	r0, r7, r6, ror #31
   135d0:	and	r7, r5, r3, ror #2
   135d4:	str	r0, [fp, #-40]	; 0xffffffd8
   135d8:	ror	r0, r0, #31
   135dc:	add	r2, r0, r2, ror #2
   135e0:	str	r0, [sp, #96]	; 0x60
   135e4:	ldr	r0, [sp, #40]	; 0x28
   135e8:	add	r1, r2, r1
   135ec:	add	r1, r1, r5, ror #27
   135f0:	add	r2, r1, r4
   135f4:	orr	r1, r5, r3, ror #2
   135f8:	and	r1, r1, ip, ror #2
   135fc:	orr	r1, r1, r7
   13600:	ldr	r7, [fp, #-80]	; 0xffffffb0
   13604:	eor	r7, r0, r7, ror #31
   13608:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1360c:	eor	r7, r7, r0, ror #31
   13610:	eor	r0, r7, r8, ror #31
   13614:	mov	r8, r4
   13618:	str	r0, [fp, #-44]	; 0xffffffd4
   1361c:	ror	r0, r0, #31
   13620:	add	r7, r0, lr, ror #2
   13624:	str	r0, [sp, #40]	; 0x28
   13628:	ldr	r0, [sp, #44]	; 0x2c
   1362c:	add	r1, r7, r1
   13630:	and	r7, r2, r5, ror #2
   13634:	add	r1, r1, r2, ror #27
   13638:	add	lr, r1, r4
   1363c:	ldr	r4, [fp, #-84]	; 0xffffffac
   13640:	orr	r1, r2, r5, ror #2
   13644:	and	r1, r1, r3, ror #2
   13648:	orr	r1, r1, r7
   1364c:	eor	r7, r0, r4, ror #31
   13650:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13654:	ldr	r4, [fp, #-72]	; 0xffffffb8
   13658:	eor	r7, r7, sl, ror #31
   1365c:	eor	r0, r7, r0, ror #31
   13660:	and	r7, lr, r2, ror #2
   13664:	str	r0, [fp, #-80]	; 0xffffffb0
   13668:	ror	r0, r0, #31
   1366c:	str	r0, [sp, #44]	; 0x2c
   13670:	add	r0, r0, ip, ror #2
   13674:	mov	ip, r8
   13678:	add	r0, r0, r1
   1367c:	orr	r1, lr, r2, ror #2
   13680:	and	r1, r1, r5, ror #2
   13684:	add	r0, r0, lr, ror #27
   13688:	orr	sl, r1, r7
   1368c:	ldr	r7, [sp, #52]	; 0x34
   13690:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13694:	add	r0, r0, r8
   13698:	eor	r7, r7, r4, ror #31
   1369c:	ldr	r4, [fp, #-92]	; 0xffffffa4
   136a0:	eor	r7, r7, r1, ror #31
   136a4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   136a8:	eor	r8, r7, r1, ror #31
   136ac:	ror	r7, r8, #31
   136b0:	str	r8, [sp, #32]
   136b4:	add	r3, r7, r3, ror #2
   136b8:	str	r7, [sp, #52]	; 0x34
   136bc:	and	r7, r0, lr, ror #2
   136c0:	add	r1, r3, sl
   136c4:	add	r1, r1, r0, ror #27
   136c8:	add	r3, r1, ip
   136cc:	orr	r1, r0, lr, ror #2
   136d0:	and	r1, r1, r2, ror #2
   136d4:	orr	r1, r1, r7
   136d8:	ldr	r7, [fp, #-48]	; 0xffffffd0
   136dc:	eor	r7, r7, r4, ror #31
   136e0:	ldr	r4, [fp, #-44]	; 0xffffffd4
   136e4:	eor	r7, r7, r9, ror #31
   136e8:	ldr	r9, [fp, #-80]	; 0xffffffb0
   136ec:	eor	r4, r7, r4, ror #31
   136f0:	str	r4, [fp, #-48]	; 0xffffffd0
   136f4:	ror	r4, r4, #31
   136f8:	add	r7, r4, r5, ror #2
   136fc:	ldr	r5, [fp, #-56]	; 0xffffffc8
   13700:	str	r4, [fp, #-92]	; 0xffffffa4
   13704:	mov	r4, ip
   13708:	add	r1, r7, r1
   1370c:	and	r7, r3, r0, ror #2
   13710:	add	r1, r1, r3, ror #27
   13714:	add	sl, r1, ip
   13718:	orr	r1, r3, r0, ror #2
   1371c:	and	r1, r1, lr, ror #2
   13720:	orr	r1, r1, r7
   13724:	ldr	r7, [sp, #24]
   13728:	eor	r7, r7, r5, ror #31
   1372c:	ldr	r5, [sp, #68]	; 0x44
   13730:	eor	r7, r7, r6, ror #31
   13734:	ldr	r6, [fp, #-76]	; 0xffffffb4
   13738:	eor	r7, r7, r9, ror #31
   1373c:	str	r7, [fp, #-52]	; 0xffffffcc
   13740:	ror	r7, r7, #31
   13744:	add	r2, r7, r2, ror #2
   13748:	str	r7, [sp, #36]	; 0x24
   1374c:	and	r7, sl, r3, ror #2
   13750:	add	r1, r2, r1
   13754:	add	r1, r1, sl, ror #27
   13758:	add	r2, r1, ip
   1375c:	orr	r1, sl, r3, ror #2
   13760:	and	r1, r1, r0, ror #2
   13764:	orr	r1, r1, r7
   13768:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1376c:	eor	r7, r5, r7, ror #31
   13770:	ldr	r5, [sp, #16]
   13774:	eor	r7, r7, r6, ror #31
   13778:	eor	r6, r7, r8, ror #31
   1377c:	ror	r7, r6, #31
   13780:	mov	ip, r6
   13784:	str	r6, [fp, #-72]	; 0xffffffb8
   13788:	and	r6, r2, sl, ror #2
   1378c:	str	r7, [sp, #68]	; 0x44
   13790:	add	r7, r7, lr, ror #2
   13794:	add	r1, r7, r1
   13798:	orr	r7, r2, sl, ror #2
   1379c:	and	r7, r7, r3, ror #2
   137a0:	add	r1, r1, r2, ror #27
   137a4:	orr	r7, r7, r6
   137a8:	ldr	r6, [sp, #100]	; 0x64
   137ac:	add	r1, r1, r4
   137b0:	eor	r6, r6, r5, ror #31
   137b4:	ldr	r5, [fp, #-36]	; 0xffffffdc
   137b8:	eor	r6, r6, r5, ror #31
   137bc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   137c0:	eor	r6, r6, r5, ror #31
   137c4:	ror	r5, r6, #31
   137c8:	mov	lr, r6
   137cc:	and	r6, r1, r2, ror #2
   137d0:	add	r0, r5, r0, ror #2
   137d4:	str	r5, [sp, #100]	; 0x64
   137d8:	ldr	r5, [fp, #-60]	; 0xffffffc4
   137dc:	str	lr, [sp, #28]
   137e0:	add	r0, r0, r7
   137e4:	orr	r7, r1, r2, ror #2
   137e8:	and	r7, r7, sl, ror #2
   137ec:	add	r0, r0, r1, ror #27
   137f0:	orr	r7, r7, r6
   137f4:	ldr	r6, [sp, #64]	; 0x40
   137f8:	add	r0, r0, r4
   137fc:	eor	r6, r6, r5, ror #31
   13800:	ldr	r5, [fp, #-40]	; 0xffffffd8
   13804:	eor	r6, r6, r5, ror #31
   13808:	ldr	r5, [fp, #-52]	; 0xffffffcc
   1380c:	eor	r5, r6, r5, ror #31
   13810:	and	r6, r0, r1, ror #2
   13814:	str	r5, [fp, #-56]	; 0xffffffc8
   13818:	ror	r5, r5, #31
   1381c:	add	r3, r5, r3, ror #2
   13820:	str	r5, [sp, #64]	; 0x40
   13824:	ldr	r5, [fp, #-68]	; 0xffffffbc
   13828:	add	r3, r3, r7
   1382c:	orr	r7, r0, r1, ror #2
   13830:	and	r7, r7, r2, ror #2
   13834:	add	r3, r3, r0, ror #27
   13838:	orr	r7, r7, r6
   1383c:	ldr	r6, [sp, #104]	; 0x68
   13840:	add	r3, r3, r4
   13844:	eor	r6, r6, r5, ror #31
   13848:	ldr	r5, [fp, #-44]	; 0xffffffd4
   1384c:	eor	r6, r6, r5, ror #31
   13850:	eor	r6, r6, ip, ror #31
   13854:	ror	r5, r6, #31
   13858:	str	r6, [fp, #-68]	; 0xffffffbc
   1385c:	add	r6, r5, sl, ror #2
   13860:	str	r5, [sp, #104]	; 0x68
   13864:	ldr	r5, [sp, #60]	; 0x3c
   13868:	mov	sl, lr
   1386c:	add	r7, r6, r7
   13870:	and	r6, r3, r0, ror #2
   13874:	add	r7, r7, r3, ror #27
   13878:	add	ip, r7, r4
   1387c:	orr	r7, r3, r0, ror #2
   13880:	and	r7, r7, r1, ror #2
   13884:	orr	r7, r7, r6
   13888:	ldr	r6, [sp, #12]
   1388c:	eor	r6, r5, r6, ror #31
   13890:	eor	r6, r6, r9, ror #31
   13894:	eor	lr, r6, lr, ror #31
   13898:	ror	r6, lr, #31
   1389c:	str	lr, [fp, #-84]	; 0xffffffac
   138a0:	add	r2, r6, r2, ror #2
   138a4:	str	r6, [sp, #60]	; 0x3c
   138a8:	ldr	r6, [sp, #56]	; 0x38
   138ac:	add	r2, r2, r7
   138b0:	and	r7, ip, r3, ror #2
   138b4:	add	r2, r2, ip, ror #27
   138b8:	add	r5, r2, r4
   138bc:	orr	r2, ip, r3, ror #2
   138c0:	and	r2, r2, r0, ror #2
   138c4:	orr	r9, r2, r7
   138c8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   138cc:	eor	r7, r6, r2, ror #31
   138d0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   138d4:	eor	r7, r7, r8, ror #31
   138d8:	eor	r6, r7, r2, ror #31
   138dc:	ror	r2, r6, #31
   138e0:	mov	r7, r6
   138e4:	str	r6, [fp, #-64]	; 0xffffffc0
   138e8:	ldr	r6, [fp, #-96]	; 0xffffffa0
   138ec:	add	r1, r2, r1, ror #2
   138f0:	str	r2, [sp, #56]	; 0x38
   138f4:	ldr	r2, [sp, #48]	; 0x30
   138f8:	add	r1, r1, r9
   138fc:	ldr	r9, [fp, #-68]	; 0xffffffbc
   13900:	add	r1, r1, r5, ror #27
   13904:	add	r4, r1, r4
   13908:	ror	r1, ip, #2
   1390c:	eor	r2, r2, r6, ror #31
   13910:	ldr	r6, [fp, #-48]	; 0xffffffd0
   13914:	eor	r1, r1, r3, ror #2
   13918:	eor	r1, r1, r5
   1391c:	eor	r2, r2, r6, ror #31
   13920:	eor	r8, r2, r9, ror #31
   13924:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13928:	ror	r6, r8, #31
   1392c:	str	r8, [fp, #-60]	; 0xffffffc4
   13930:	add	r0, r6, r0, ror #2
   13934:	str	r6, [sp, #48]	; 0x30
   13938:	ldr	r6, [fp, #-100]	; 0xffffff9c
   1393c:	add	r0, r0, r1
   13940:	movw	r1, #49622	; 0xc1d6
   13944:	add	r0, r0, r4, ror #27
   13948:	movt	r1, #51810	; 0xca62
   1394c:	add	r0, r0, r1
   13950:	ror	r1, r5, #2
   13954:	eor	r2, r2, r6, ror #31
   13958:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1395c:	eor	r1, r1, ip, ror #2
   13960:	eor	r1, r1, r4
   13964:	eor	r2, r2, r6, ror #31
   13968:	eor	r2, r2, lr, ror #31
   1396c:	ror	r6, r2, #31
   13970:	str	r2, [fp, #-32]	; 0xffffffe0
   13974:	add	r2, r6, r3, ror #2
   13978:	str	r6, [fp, #-100]	; 0xffffff9c
   1397c:	ldr	r3, [sp, #96]	; 0x60
   13980:	ldr	r6, [fp, #-76]	; 0xffffffb4
   13984:	add	r1, r2, r1
   13988:	movw	r2, #49622	; 0xc1d6
   1398c:	add	r1, r1, r0, ror #27
   13990:	movt	r2, #51810	; 0xca62
   13994:	add	r1, r1, r2
   13998:	ror	r2, r4, #2
   1399c:	eor	r3, r3, r6, ror #31
   139a0:	ldr	r6, [fp, #-72]	; 0xffffffb8
   139a4:	eor	r2, r2, r5, ror #2
   139a8:	eor	r2, r2, r0
   139ac:	eor	r3, r3, r6, ror #31
   139b0:	eor	lr, r3, r7, ror #31
   139b4:	ldr	r7, [sp, #40]	; 0x28
   139b8:	ror	r6, lr, #31
   139bc:	str	lr, [sp, #96]	; 0x60
   139c0:	add	r3, r6, ip, ror #2
   139c4:	str	r6, [fp, #-96]	; 0xffffffa0
   139c8:	ldr	r6, [fp, #-36]	; 0xffffffdc
   139cc:	add	r2, r3, r2
   139d0:	movw	r3, #49622	; 0xc1d6
   139d4:	add	r2, r2, r1, ror #27
   139d8:	movt	r3, #51810	; 0xca62
   139dc:	add	r2, r2, r3
   139e0:	ror	r3, r0, #2
   139e4:	eor	r7, r7, r6, ror #31
   139e8:	eor	r3, r3, r4, ror #2
   139ec:	eor	r7, r7, sl, ror #31
   139f0:	eor	r3, r3, r1
   139f4:	eor	r7, r7, r8, ror #31
   139f8:	ror	r6, r7, #31
   139fc:	mov	ip, r7
   13a00:	str	r7, [fp, #-36]	; 0xffffffdc
   13a04:	add	r7, r6, r5, ror #2
   13a08:	movw	r5, #49622	; 0xc1d6
   13a0c:	str	r6, [fp, #-88]	; 0xffffffa8
   13a10:	add	r3, r7, r3
   13a14:	movt	r5, #51810	; 0xca62
   13a18:	add	r3, r3, r2, ror #27
   13a1c:	add	r7, r3, r5
   13a20:	ror	r3, r1, #2
   13a24:	ldr	r5, [sp, #44]	; 0x2c
   13a28:	eor	r3, r3, r0, ror #2
   13a2c:	eor	sl, r3, r2
   13a30:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13a34:	eor	r6, r5, r3, ror #31
   13a38:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13a3c:	ldr	r5, [fp, #-44]	; 0xffffffd4
   13a40:	eor	r6, r6, r3, ror #31
   13a44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13a48:	eor	r8, r6, r3, ror #31
   13a4c:	ror	r3, r8, #31
   13a50:	str	r8, [sp, #44]	; 0x2c
   13a54:	add	r6, r3, r4, ror #2
   13a58:	str	r3, [fp, #-76]	; 0xffffffb4
   13a5c:	add	r3, r6, sl
   13a60:	ldr	r6, [sp, #52]	; 0x34
   13a64:	movw	sl, #49622	; 0xc1d6
   13a68:	add	r3, r3, r7, ror #27
   13a6c:	movt	sl, #51810	; 0xca62
   13a70:	add	r4, r3, sl
   13a74:	ror	r3, r2, #2
   13a78:	eor	r3, r3, r1, ror #2
   13a7c:	eor	r6, r6, r5, ror #31
   13a80:	eor	r3, r3, r7
   13a84:	eor	r6, r6, r9, ror #31
   13a88:	eor	r5, r6, lr, ror #31
   13a8c:	ror	r6, r5, #31
   13a90:	mov	r9, r5
   13a94:	str	r5, [sp, #52]	; 0x34
   13a98:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13a9c:	add	r0, r6, r0, ror #2
   13aa0:	str	r6, [fp, #-44]	; 0xffffffd4
   13aa4:	ldr	r6, [fp, #-92]	; 0xffffffa4
   13aa8:	add	r0, r0, r3
   13aac:	ror	r3, r7, #2
   13ab0:	eor	r3, r3, r2, ror #2
   13ab4:	add	r0, r0, r4, ror #27
   13ab8:	eor	r3, r3, r4
   13abc:	add	r0, r0, sl
   13ac0:	eor	r6, r6, r5, ror #31
   13ac4:	ldr	r5, [fp, #-84]	; 0xffffffac
   13ac8:	eor	r6, r6, r5, ror #31
   13acc:	eor	r5, r6, ip, ror #31
   13ad0:	ror	r6, r5, #31
   13ad4:	mov	ip, r5
   13ad8:	str	r5, [fp, #-92]	; 0xffffffa4
   13adc:	ldr	r5, [sp, #32]
   13ae0:	add	r1, r6, r1, ror #2
   13ae4:	ldr	r6, [sp, #36]	; 0x24
   13ae8:	add	r1, r1, r3
   13aec:	ror	r3, r4, #2
   13af0:	eor	r3, r3, r7, ror #2
   13af4:	add	r1, r1, r0, ror #27
   13af8:	eor	r3, r3, r0
   13afc:	add	r1, r1, sl
   13b00:	eor	r6, r6, r5, ror #31
   13b04:	ldr	r5, [fp, #-64]	; 0xffffffc0
   13b08:	eor	r6, r6, r5, ror #31
   13b0c:	eor	r5, r6, r8, ror #31
   13b10:	ror	r6, r5, #31
   13b14:	mov	r8, r5
   13b18:	str	r5, [sp, #40]	; 0x28
   13b1c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13b20:	add	r2, r6, r2, ror #2
   13b24:	ldr	r6, [sp, #68]	; 0x44
   13b28:	add	r2, r2, r3
   13b2c:	ror	r3, r0, #2
   13b30:	eor	r3, r3, r4, ror #2
   13b34:	add	r2, r2, r1, ror #27
   13b38:	eor	r3, r3, r1
   13b3c:	add	r2, r2, sl
   13b40:	eor	r6, r6, r5, ror #31
   13b44:	ldr	r5, [fp, #-60]	; 0xffffffc4
   13b48:	eor	r6, r6, r5, ror #31
   13b4c:	ldr	r5, [fp, #-52]	; 0xffffffcc
   13b50:	eor	r9, r6, r9, ror #31
   13b54:	ror	r6, r9, #31
   13b58:	str	r9, [fp, #-80]	; 0xffffffb0
   13b5c:	add	r7, r6, r7, ror #2
   13b60:	add	r3, r7, r3
   13b64:	ror	r7, r1, #2
   13b68:	eor	r7, r7, r0, ror #2
   13b6c:	add	r3, r3, r2, ror #27
   13b70:	eor	r6, r7, r2
   13b74:	ldr	r7, [sp, #100]	; 0x64
   13b78:	add	r3, r3, sl
   13b7c:	eor	r7, r7, r5, ror #31
   13b80:	ldr	r5, [fp, #-32]	; 0xffffffe0
   13b84:	eor	r7, r7, r5, ror #31
   13b88:	ldr	r5, [sp, #28]
   13b8c:	eor	r7, r7, ip, ror #31
   13b90:	str	r7, [fp, #-40]	; 0xffffffd8
   13b94:	ror	r7, r7, #31
   13b98:	add	r7, r7, r4, ror #2
   13b9c:	ror	r4, r2, #2
   13ba0:	add	r7, r7, r6
   13ba4:	ldr	r6, [fp, #-72]	; 0xffffffb8
   13ba8:	eor	r4, r4, r1, ror #2
   13bac:	add	r7, r7, r3, ror #27
   13bb0:	eor	r4, r4, r3
   13bb4:	add	ip, r7, sl
   13bb8:	ldr	r7, [sp, #64]	; 0x40
   13bbc:	eor	r6, r7, r6, ror #31
   13bc0:	ldr	r7, [sp, #60]	; 0x3c
   13bc4:	eor	r6, r6, lr, ror #31
   13bc8:	eor	r8, r6, r8, ror #31
   13bcc:	ror	r6, r8, #31
   13bd0:	str	r8, [fp, #-52]	; 0xffffffcc
   13bd4:	add	r0, r6, r0, ror #2
   13bd8:	ldr	r6, [sp, #104]	; 0x68
   13bdc:	add	r0, r0, r4
   13be0:	ror	r4, r3, #2
   13be4:	eor	r4, r4, r2, ror #2
   13be8:	add	r0, r0, ip, ror #27
   13bec:	eor	r4, r4, ip
   13bf0:	add	r0, r0, sl
   13bf4:	eor	r6, r6, r5, ror #31
   13bf8:	ldr	r5, [fp, #-36]	; 0xffffffdc
   13bfc:	eor	r6, r6, r5, ror #31
   13c00:	eor	r5, r6, r9, ror #31
   13c04:	ror	r6, r5, #31
   13c08:	mov	r9, r5
   13c0c:	str	r5, [fp, #-48]	; 0xffffffd0
   13c10:	add	r1, r6, r1, ror #2
   13c14:	ldr	r6, [fp, #-56]	; 0xffffffc8
   13c18:	add	r1, r1, r4
   13c1c:	add	r1, r1, r0, ror #27
   13c20:	add	r4, r1, sl
   13c24:	ror	r1, ip, #2
   13c28:	eor	r6, r7, r6, ror #31
   13c2c:	ldr	r7, [sp, #44]	; 0x2c
   13c30:	eor	r1, r1, r3, ror #2
   13c34:	eor	r1, r1, r0
   13c38:	eor	r5, r6, r7, ror #31
   13c3c:	ldr	r7, [fp, #-40]	; 0xffffffd8
   13c40:	mov	r6, sl
   13c44:	eor	lr, r5, r7, ror #31
   13c48:	ldr	r7, [sp, #56]	; 0x38
   13c4c:	ror	r5, lr, #31
   13c50:	add	r2, r5, r2, ror #2
   13c54:	ldr	r5, [fp, #-68]	; 0xffffffbc
   13c58:	add	r1, r2, r1
   13c5c:	ror	r2, r0, #2
   13c60:	add	r1, r1, r4, ror #27
   13c64:	eor	r2, r2, ip, ror #2
   13c68:	add	r1, r1, sl
   13c6c:	eor	r2, r2, r4
   13c70:	eor	r5, r7, r5, ror #31
   13c74:	ldr	r7, [sp, #52]	; 0x34
   13c78:	eor	r7, r5, r7, ror #31
   13c7c:	eor	sl, r7, r8, ror #31
   13c80:	ror	r5, sl, #31
   13c84:	add	r3, r5, r3, ror #2
   13c88:	ldr	r5, [sp, #48]	; 0x30
   13c8c:	add	r2, r3, r2
   13c90:	ror	r3, r4, #2
   13c94:	add	r2, r2, r1, ror #27
   13c98:	eor	r3, r3, r0, ror #2
   13c9c:	add	r2, r2, r6
   13ca0:	ldr	r6, [fp, #-84]	; 0xffffffac
   13ca4:	eor	r3, r3, r1
   13ca8:	eor	r5, r5, r6, ror #31
   13cac:	ldr	r6, [fp, #-92]	; 0xffffffa4
   13cb0:	eor	r5, r5, r6, ror #31
   13cb4:	ldr	r6, [fp, #-64]	; 0xffffffc0
   13cb8:	eor	r8, r5, r9, ror #31
   13cbc:	ldr	r5, [fp, #-100]	; 0xffffff9c
   13cc0:	ror	r7, r8, #31
   13cc4:	add	r7, r7, ip, ror #2
   13cc8:	add	r3, r7, r3
   13ccc:	movw	r7, #49622	; 0xc1d6
   13cd0:	eor	r5, r5, r6, ror #31
   13cd4:	ldr	r6, [sp, #40]	; 0x28
   13cd8:	add	r3, r3, r2, ror #27
   13cdc:	movt	r7, #51810	; 0xca62
   13ce0:	add	r3, r3, r7
   13ce4:	ror	r7, r1, #2
   13ce8:	eor	r7, r7, r4, ror #2
   13cec:	eor	r7, r7, r2
   13cf0:	eor	r5, r5, r6, ror #31
   13cf4:	ldr	r6, [sp, #76]	; 0x4c
   13cf8:	eor	r9, r5, lr, ror #31
   13cfc:	movw	lr, #49622	; 0xc1d6
   13d00:	ror	r5, r9, #31
   13d04:	movt	lr, #51810	; 0xca62
   13d08:	add	r0, r5, r0, ror #2
   13d0c:	ldr	r5, [fp, #-60]	; 0xffffffc4
   13d10:	add	r0, r0, r7
   13d14:	ldr	r7, [sp, #72]	; 0x48
   13d18:	add	r0, r0, r3, ror #27
   13d1c:	add	r0, r0, lr
   13d20:	add	r7, r7, r0, ror #2
   13d24:	str	r7, [r6, #16]
   13d28:	ror	r7, r2, #2
   13d2c:	eor	r7, r7, r1, ror #2
   13d30:	eor	ip, r7, r3
   13d34:	ldr	r7, [fp, #-96]	; 0xffffffa0
   13d38:	eor	r7, r7, r5, ror #31
   13d3c:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13d40:	eor	r7, r7, r5, ror #31
   13d44:	ldr	r5, [sp, #88]	; 0x58
   13d48:	eor	sl, r7, sl, ror #31
   13d4c:	ror	r7, sl, #31
   13d50:	add	r7, r7, r4, ror #2
   13d54:	ldr	r4, [fp, #-88]	; 0xffffffa8
   13d58:	add	r7, r7, ip
   13d5c:	mov	ip, lr
   13d60:	add	r7, r7, r0, ror #27
   13d64:	add	r7, r7, lr
   13d68:	mov	lr, r6
   13d6c:	add	r5, r5, r7, ror #2
   13d70:	str	r5, [r6, #12]
   13d74:	ldr	r6, [fp, #-32]	; 0xffffffe0
   13d78:	ror	r5, r3, #2
   13d7c:	eor	r5, r5, r2, ror #2
   13d80:	eor	r5, r5, r0
   13d84:	eor	r4, r4, r6, ror #31
   13d88:	ldr	r6, [fp, #-40]	; 0xffffffd8
   13d8c:	eor	r4, r4, r6, ror #31
   13d90:	ldr	r6, [sp, #96]	; 0x60
   13d94:	eor	r4, r4, r8, ror #31
   13d98:	ror	r4, r4, #31
   13d9c:	add	r1, r4, r1, ror #2
   13da0:	ldr	r4, [sp, #80]	; 0x50
   13da4:	add	r1, r1, r5
   13da8:	add	r1, r1, r7, ror #27
   13dac:	add	r1, r1, ip
   13db0:	add	r5, r4, r1, ror #2
   13db4:	ldr	r4, [fp, #-76]	; 0xffffffb4
   13db8:	str	r5, [lr, #8]
   13dbc:	ror	r5, r0, #2
   13dc0:	eor	r5, r5, r3, ror #2
   13dc4:	eor	r5, r5, r7
   13dc8:	ror	r7, r7, #2
   13dcc:	eor	r4, r4, r6, ror #31
   13dd0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13dd4:	eor	r0, r7, r0, ror #2
   13dd8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13ddc:	eor	r0, r0, r1
   13de0:	eor	r4, r4, r6, ror #31
   13de4:	eor	r6, r4, r9, ror #31
   13de8:	ldr	r4, [sp, #92]	; 0x5c
   13dec:	ror	r6, r6, #31
   13df0:	add	r2, r6, r2, ror #2
   13df4:	add	r2, r2, r5
   13df8:	add	r2, r2, r1, ror #27
   13dfc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13e00:	add	r2, r2, ip
   13e04:	add	r6, r2, r4
   13e08:	str	r6, [lr, #4]
   13e0c:	eor	r1, r1, r7, ror #31
   13e10:	ldr	r7, [fp, #-48]	; 0xffffffd0
   13e14:	eor	r1, r1, r7, ror #31
   13e18:	ldr	r7, [sp, #84]	; 0x54
   13e1c:	eor	r1, r1, sl, ror #31
   13e20:	add	r1, r7, r1, ror #31
   13e24:	add	r1, r1, r3, ror #2
   13e28:	add	r0, r1, r0
   13e2c:	add	r0, r0, r2, ror #27
   13e30:	add	r0, r0, ip
   13e34:	str	r0, [lr]
   13e38:	sub	sp, fp, #28
   13e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e40:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13e44:	add	fp, sp, #24
   13e48:	sub	sp, sp, #8
   13e4c:	mov	r7, r0
   13e50:	mov	r4, r0
   13e54:	mov	r5, r1
   13e58:	ldr	r0, [r7, #24]!
   13e5c:	ldr	r1, [r7, #4]
   13e60:	lsr	r2, r0, #24
   13e64:	strb	r2, [sp, #4]
   13e68:	lsr	r2, r0, #16
   13e6c:	strb	r2, [sp, #5]
   13e70:	lsr	r2, r0, #8
   13e74:	strb	r2, [sp, #6]
   13e78:	strb	r0, [sp, #7]
   13e7c:	lsr	r2, r1, #16
   13e80:	strb	r1, [sp, #3]
   13e84:	strb	r2, [sp, #1]
   13e88:	lsr	r2, r1, #24
   13e8c:	strb	r2, [sp]
   13e90:	lsr	r2, r1, #8
   13e94:	strb	r2, [sp, #2]
   13e98:	adds	r2, r0, #8
   13e9c:	adc	r3, r1, #0
   13ea0:	strd	r2, [r7]
   13ea4:	ubfx	r0, r0, #3, #6
   13ea8:	cmp	r0, #63	; 0x3f
   13eac:	bne	13ed0 <rb_base64_encode@plt+0x2ec8>
   13eb0:	mov	r0, #128	; 0x80
   13eb4:	add	r6, r4, #32
   13eb8:	strb	r0, [r4, #95]	; 0x5f
   13ebc:	mov	r0, r4
   13ec0:	mov	r1, r6
   13ec4:	bl	129ac <rb_base64_encode@plt+0x19a4>
   13ec8:	mov	r0, #1
   13ecc:	b	13edc <rb_base64_encode@plt+0x2ed4>
   13ed0:	add	r0, r4, r0
   13ed4:	add	r6, r0, #32
   13ed8:	mov	r0, #0
   13edc:	ldr	r1, [pc, #352]	; 14044 <rb_base64_encode@plt+0x303c>
   13ee0:	eor	r2, r0, #1
   13ee4:	add	r1, pc, r1
   13ee8:	add	r1, r1, r0
   13eec:	mov	r0, r6
   13ef0:	bl	10edc <memcpy@plt>
   13ef4:	ldrd	r2, [r7]
   13ef8:	and	r0, r2, #504	; 0x1f8
   13efc:	ubfx	r1, r2, #3, #6
   13f00:	teq	r0, #448	; 0x1c0
   13f04:	beq	13f74 <rb_base64_encode@plt+0x2f6c>
   13f08:	ldr	r9, [pc, #312]	; 14048 <rb_base64_encode@plt+0x3040>
   13f0c:	add	r6, r4, #32
   13f10:	mov	r8, #0
   13f14:	add	r9, pc, r9
   13f18:	adds	r0, r2, #8
   13f1c:	adc	r3, r3, #0
   13f20:	cmp	r1, #63	; 0x3f
   13f24:	stm	r7, {r0, r3}
   13f28:	bne	13f48 <rb_base64_encode@plt+0x2f40>
   13f2c:	mov	r0, r4
   13f30:	mov	r1, r6
   13f34:	strb	r8, [r4, #95]	; 0x5f
   13f38:	bl	129ac <rb_base64_encode@plt+0x19a4>
   13f3c:	mov	r2, #1
   13f40:	mov	r0, r6
   13f44:	b	13f54 <rb_base64_encode@plt+0x2f4c>
   13f48:	add	r0, r4, r1
   13f4c:	mov	r2, #0
   13f50:	add	r0, r0, #32
   13f54:	add	r1, r9, r2
   13f58:	eor	r2, r2, #1
   13f5c:	bl	10edc <memcpy@plt>
   13f60:	ldrd	r2, [r7]
   13f64:	and	r0, r2, #504	; 0x1f8
   13f68:	ubfx	r1, r2, #3, #6
   13f6c:	teq	r0, #448	; 0x1c0
   13f70:	bne	13f18 <rb_base64_encode@plt+0x2f10>
   13f74:	adds	r0, r2, #64	; 0x40
   13f78:	adc	r3, r3, #0
   13f7c:	stm	r7, {r0, r3}
   13f80:	add	r0, r1, #8
   13f84:	cmp	r0, #63	; 0x3f
   13f88:	bls	13fc0 <rb_base64_encode@plt+0x2fb8>
   13f8c:	add	r6, r4, #32
   13f90:	rsb	r7, r1, #64	; 0x40
   13f94:	mov	r8, sp
   13f98:	add	r0, r6, r1
   13f9c:	mov	r1, r8
   13fa0:	mov	r2, r7
   13fa4:	bl	10edc <memcpy@plt>
   13fa8:	mov	r0, r4
   13fac:	mov	r1, r6
   13fb0:	bl	129ac <rb_base64_encode@plt+0x19a4>
   13fb4:	add	r1, r8, r7
   13fb8:	rsb	r2, r7, #8
   13fbc:	b	13fd0 <rb_base64_encode@plt+0x2fc8>
   13fc0:	add	r0, r4, r1
   13fc4:	mov	r2, #8
   13fc8:	mov	r1, sp
   13fcc:	add	r6, r0, #32
   13fd0:	mov	r0, r6
   13fd4:	bl	10edc <memcpy@plt>
   13fd8:	mov	r0, #0
   13fdc:	mov	r1, #24
   13fe0:	mov	r2, #0
   13fe4:	bic	r3, r2, #3
   13fe8:	bic	r7, r1, r0
   13fec:	add	r0, r0, #8
   13ff0:	ldr	r3, [r4, r3]
   13ff4:	lsr	r3, r3, r7
   13ff8:	strb	r3, [r5, r2]
   13ffc:	add	r2, r2, #1
   14000:	cmp	r2, #20
   14004:	bne	13fe4 <rb_base64_encode@plt+0x2fdc>
   14008:	vmov.i32	q8, #0	; 0x00000000
   1400c:	mov	r0, #80	; 0x50
   14010:	mov	r1, r4
   14014:	vst1.64	{d16-d17}, [r1], r0
   14018:	add	r0, r4, #64	; 0x40
   1401c:	vst1.64	{d16-d17}, [r0]
   14020:	add	r0, r4, #48	; 0x30
   14024:	vst1.64	{d16-d17}, [r1]
   14028:	vst1.64	{d16-d17}, [r0]
   1402c:	add	r0, r4, #32
   14030:	vst1.64	{d16-d17}, [r0]
   14034:	add	r0, r4, #16
   14038:	vst1.64	{d16-d17}, [r0]
   1403c:	sub	sp, fp, #24
   14040:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14044:	andeq	r0, r0, pc, lsl #8
   14048:	andeq	r0, r0, r1, ror #7
   1404c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14050:	mov	r7, r0
   14054:	ldr	r6, [pc, #72]	; 140a4 <rb_base64_encode@plt+0x309c>
   14058:	ldr	r5, [pc, #72]	; 140a8 <rb_base64_encode@plt+0x30a0>
   1405c:	add	r6, pc, r6
   14060:	add	r5, pc, r5
   14064:	sub	r6, r6, r5
   14068:	mov	r8, r1
   1406c:	mov	r9, r2
   14070:	bl	10d84 <open@plt-0x20>
   14074:	asrs	r6, r6, #2
   14078:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1407c:	mov	r4, #0
   14080:	add	r4, r4, #1
   14084:	ldr	r3, [r5], #4
   14088:	mov	r2, r9
   1408c:	mov	r1, r8
   14090:	mov	r0, r7
   14094:	blx	r3
   14098:	cmp	r6, r4
   1409c:	bne	14080 <rb_base64_encode@plt+0x3078>
   140a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   140a4:	muleq	r1, r0, lr
   140a8:	andeq	r0, r1, r8, lsl #29
   140ac:	bx	lr

Disassembly of section .fini:

000140b0 <.fini>:
   140b0:	push	{r3, lr}
   140b4:	pop	{r3, pc}
