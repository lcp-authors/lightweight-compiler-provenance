
../repos/stcorp-coda-3a25f25/CMakeFiles/TestEndianess.bin:     file format elf32-littlearm


Disassembly of section .init:

0001052c <.init>:
   1052c:	push	{r3, lr}
   10530:	bl	105e4 <_start@@Base+0x3c>
   10534:	pop	{r3, pc}

Disassembly of section .plt:

00010538 <__libc_start_main@plt-0x14>:
   10538:	push	{lr}		; (str lr, [sp, #-4]!)
   1053c:	ldr	lr, [pc, #4]	; 10548 <__libc_start_main@plt-0x4>
   10540:	add	lr, pc, lr
   10544:	ldr	pc, [lr, #8]!
   10548:			; <UNDEFINED> instruction: 0x00010ab8

0001054c <__libc_start_main@plt>:
   1054c:	add	ip, pc, #0, 12
   10550:	add	ip, ip, #16, 20	; 0x10000
   10554:	ldr	pc, [ip, #2744]!	; 0xab8

00010558 <__gmon_start__@plt>:
   10558:	add	ip, pc, #0, 12
   1055c:	add	ip, ip, #16, 20	; 0x10000
   10560:	ldr	pc, [ip, #2736]!	; 0xab0

00010564 <abort@plt>:
   10564:	add	ip, pc, #0, 12
   10568:	add	ip, ip, #16, 20	; 0x10000
   1056c:	ldr	pc, [ip, #2728]!	; 0xaa8

Disassembly of section .text:

00010570 <main@@Base>:
   10570:	ldr	r3, [pc, #36]	; 1059c <main@@Base+0x2c>
   10574:	lsl	r0, r0, #1
   10578:	ldr	r2, [pc, #32]	; 105a0 <main@@Base+0x30>
   1057c:	ldr	r1, [pc, #32]	; 105a4 <main@@Base+0x34>
   10580:	add	r3, pc, r3
   10584:	ldr	r1, [r3, r1]
   10588:	ldr	r3, [r3, r2]
   1058c:	ldrh	r2, [r1, r0]
   10590:	ldrh	r0, [r3, r0]
   10594:	add	r0, r2, r0
   10598:	bx	lr
   1059c:	andeq	r0, r1, r8, ror sl
   105a0:	andeq	r0, r0, r8, lsl r0
   105a4:	andeq	r0, r0, r0, lsr #32

000105a8 <_start@@Base>:
   105a8:	mov	fp, #0
   105ac:	mov	lr, #0
   105b0:	pop	{r1}		; (ldr r1, [sp], #4)
   105b4:	mov	r2, sp
   105b8:	push	{r2}		; (str r2, [sp, #-4]!)
   105bc:	push	{r0}		; (str r0, [sp, #-4]!)
   105c0:	ldr	ip, [pc, #16]	; 105d8 <_start@@Base+0x30>
   105c4:	push	{ip}		; (str ip, [sp, #-4]!)
   105c8:	ldr	r0, [pc, #12]	; 105dc <_start@@Base+0x34>
   105cc:	ldr	r3, [pc, #12]	; 105e0 <_start@@Base+0x38>
   105d0:	bl	1054c <__libc_start_main@plt>
   105d4:	bl	10564 <abort@plt>
   105d8:	strdeq	r0, [r1], -r8
   105dc:	andeq	r0, r1, r0, ror r5
   105e0:	muleq	r1, r8, r6
   105e4:	ldr	r3, [pc, #20]	; 10600 <_start@@Base+0x58>
   105e8:	ldr	r2, [pc, #20]	; 10604 <_start@@Base+0x5c>
   105ec:	add	r3, pc, r3
   105f0:	ldr	r2, [r3, r2]
   105f4:	cmp	r2, #0
   105f8:	bxeq	lr
   105fc:	b	10558 <__gmon_start__@plt>
   10600:	andeq	r0, r1, ip, lsl #20
   10604:	andeq	r0, r0, ip, lsl r0
   10608:	ldr	r0, [pc, #24]	; 10628 <_start@@Base+0x80>
   1060c:	ldr	r3, [pc, #24]	; 1062c <_start@@Base+0x84>
   10610:	cmp	r3, r0
   10614:	bxeq	lr
   10618:	ldr	r3, [pc, #16]	; 10630 <_start@@Base+0x88>
   1061c:	cmp	r3, #0
   10620:	bxeq	lr
   10624:	bx	r3
   10628:	andeq	r1, r2, ip, lsr #32
   1062c:	andeq	r1, r2, ip, lsr #32
   10630:	andeq	r0, r0, r0
   10634:	ldr	r0, [pc, #36]	; 10660 <_start@@Base+0xb8>
   10638:	ldr	r1, [pc, #36]	; 10664 <_start@@Base+0xbc>
   1063c:	sub	r1, r1, r0
   10640:	asr	r1, r1, #2
   10644:	add	r1, r1, r1, lsr #31
   10648:	asrs	r1, r1, #1
   1064c:	bxeq	lr
   10650:	ldr	r3, [pc, #16]	; 10668 <_start@@Base+0xc0>
   10654:	cmp	r3, #0
   10658:	bxeq	lr
   1065c:	bx	r3
   10660:	andeq	r1, r2, ip, lsr #32
   10664:	andeq	r1, r2, ip, lsr #32
   10668:	andeq	r0, r0, r0
   1066c:	push	{r4, lr}
   10670:	ldr	r4, [pc, #24]	; 10690 <_start@@Base+0xe8>
   10674:	ldrb	r3, [r4]
   10678:	cmp	r3, #0
   1067c:	popne	{r4, pc}
   10680:	bl	10608 <_start@@Base+0x60>
   10684:	mov	r3, #1
   10688:	strb	r3, [r4]
   1068c:	pop	{r4, pc}
   10690:	andeq	r1, r2, ip, lsr #32
   10694:	b	10634 <_start@@Base+0x8c>

00010698 <__libc_csu_init@@Base>:
   10698:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1069c:	mov	r7, r0
   106a0:	ldr	r6, [pc, #72]	; 106f0 <__libc_csu_init@@Base+0x58>
   106a4:	ldr	r5, [pc, #72]	; 106f4 <__libc_csu_init@@Base+0x5c>
   106a8:	add	r6, pc, r6
   106ac:	add	r5, pc, r5
   106b0:	sub	r6, r6, r5
   106b4:	mov	r8, r1
   106b8:	mov	r9, r2
   106bc:	bl	1052c <__libc_start_main@plt-0x20>
   106c0:	asrs	r6, r6, #2
   106c4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   106c8:	mov	r4, #0
   106cc:	add	r4, r4, #1
   106d0:	ldr	r3, [r5], #4
   106d4:	mov	r2, r9
   106d8:	mov	r1, r8
   106dc:	mov	r0, r7
   106e0:	blx	r3
   106e4:	cmp	r6, r4
   106e8:	bne	106cc <__libc_csu_init@@Base+0x34>
   106ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   106f0:	andeq	r0, r1, r4, ror #16
   106f4:	andeq	r0, r1, ip, asr r8

000106f8 <__libc_csu_fini@@Base>:
   106f8:	bx	lr

Disassembly of section .fini:

000106fc <.fini>:
   106fc:	push	{r3, lr}
   10700:	pop	{r3, pc}
