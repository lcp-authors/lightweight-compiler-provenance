
../repos/Snaipe-Mimick-1dc4659/sample/strdup/strdup_test:     file format elf32-littlearm


Disassembly of section .init:

000113e8 <.init>:
   113e8:	push	{r3, lr}
   113ec:	bl	11534 <_start@@Base+0x3c>
   113f0:	pop	{r3, pc}

Disassembly of section .plt:

000113f4 <strstr@plt-0x14>:
   113f4:	push	{lr}		; (str lr, [sp, #-4]!)
   113f8:	ldr	lr, [pc, #4]	; 11404 <strstr@plt-0x4>
   113fc:	add	lr, pc, lr
   11400:	ldr	pc, [lr, #8]!
   11404:	strdeq	r2, [r1], -ip

00011408 <strstr@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #73728	; 0x12000
   11410:	ldr	pc, [ip, #3068]!	; 0xbfc

00011414 <strcmp@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #73728	; 0x12000
   1141c:	ldr	pc, [ip, #3060]!	; 0xbf4

00011420 <mprotect@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #73728	; 0x12000
   11428:	ldr	pc, [ip, #3052]!	; 0xbec

0001142c <free@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #73728	; 0x12000
   11434:	ldr	pc, [ip, #3044]!	; 0xbe4

00011438 <memcpy@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #73728	; 0x12000
   11440:	ldr	pc, [ip, #3036]!	; 0xbdc

00011444 <realloc@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #73728	; 0x12000
   1144c:	ldr	pc, [ip, #3028]!	; 0xbd4

00011450 <malloc@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #73728	; 0x12000
   11458:	ldr	pc, [ip, #3020]!	; 0xbcc

0001145c <__libc_start_main@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #73728	; 0x12000
   11464:	ldr	pc, [ip, #3012]!	; 0xbc4

00011468 <__gmon_start__@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #73728	; 0x12000
   11470:	ldr	pc, [ip, #3004]!	; 0xbbc

00011474 <strlen@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #73728	; 0x12000
   1147c:	ldr	pc, [ip, #2996]!	; 0xbb4

00011480 <mmap@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #73728	; 0x12000
   11488:	ldr	pc, [ip, #2988]!	; 0xbac

0001148c <strchr@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #73728	; 0x12000
   11494:	ldr	pc, [ip, #2980]!	; 0xba4

00011498 <fprintf@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #73728	; 0x12000
   114a0:	ldr	pc, [ip, #2972]!	; 0xb9c

000114a4 <__errno_location@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #73728	; 0x12000
   114ac:	ldr	pc, [ip, #2964]!	; 0xb94

000114b0 <snprintf@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #73728	; 0x12000
   114b8:	ldr	pc, [ip, #2956]!	; 0xb8c

000114bc <munmap@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #73728	; 0x12000
   114c4:	ldr	pc, [ip, #2948]!	; 0xb84

000114c8 <my_strdup@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #73728	; 0x12000
   114d0:	ldr	pc, [ip, #2940]!	; 0xb7c

000114d4 <__tls_get_addr@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #73728	; 0x12000
   114dc:	ldr	pc, [ip, #2932]!	; 0xb74

000114e0 <strncmp@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #73728	; 0x12000
   114e8:	ldr	pc, [ip, #2924]!	; 0xb6c

000114ec <abort@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #73728	; 0x12000
   114f4:	ldr	pc, [ip, #2916]!	; 0xb64

Disassembly of section .text:

000114f8 <_start@@Base>:
   114f8:	mov	fp, #0
   114fc:	mov	lr, #0
   11500:	pop	{r1}		; (ldr r1, [sp], #4)
   11504:	mov	r2, sp
   11508:	push	{r2}		; (str r2, [sp, #-4]!)
   1150c:	push	{r0}		; (str r0, [sp, #-4]!)
   11510:	ldr	ip, [pc, #16]	; 11528 <_start@@Base+0x30>
   11514:	push	{ip}		; (str ip, [sp, #-4]!)
   11518:	ldr	r0, [pc, #12]	; 1152c <_start@@Base+0x34>
   1151c:	ldr	r3, [pc, #12]	; 11530 <_start@@Base+0x38>
   11520:	bl	1145c <__libc_start_main@plt>
   11524:	bl	114ec <abort@plt>
   11528:	andeq	r3, r1, r0, lsr #10
   1152c:	andeq	r1, r1, r0, lsl r9
   11530:	andeq	r3, r1, r0, asr #9
   11534:	ldr	r3, [pc, #20]	; 11550 <_start@@Base+0x58>
   11538:	ldr	r2, [pc, #20]	; 11554 <_start@@Base+0x5c>
   1153c:	add	r3, pc, r3
   11540:	ldr	r2, [r3, r2]
   11544:	cmp	r2, #0
   11548:	bxeq	lr
   1154c:	b	11468 <__gmon_start__@plt>
   11550:			; <UNDEFINED> instruction: 0x00012abc
   11554:	muleq	r0, ip, r0
   11558:	ldr	r0, [pc, #24]	; 11578 <_start@@Base+0x80>
   1155c:	ldr	r3, [pc, #24]	; 1157c <_start@@Base+0x84>
   11560:	cmp	r3, r0
   11564:	bxeq	lr
   11568:	ldr	r3, [pc, #16]	; 11580 <_start@@Base+0x88>
   1156c:	cmp	r3, #0
   11570:	bxeq	lr
   11574:	bx	r3
   11578:	andeq	r4, r2, r8, asr #1
   1157c:	andeq	r4, r2, r8, asr #1
   11580:	andeq	r0, r0, r0
   11584:	ldr	r0, [pc, #36]	; 115b0 <_start@@Base+0xb8>
   11588:	ldr	r1, [pc, #36]	; 115b4 <_start@@Base+0xbc>
   1158c:	sub	r1, r1, r0
   11590:	asr	r1, r1, #2
   11594:	add	r1, r1, r1, lsr #31
   11598:	asrs	r1, r1, #1
   1159c:	bxeq	lr
   115a0:	ldr	r3, [pc, #16]	; 115b8 <_start@@Base+0xc0>
   115a4:	cmp	r3, #0
   115a8:	bxeq	lr
   115ac:	bx	r3
   115b0:	andeq	r4, r2, r8, asr #1
   115b4:	andeq	r4, r2, r8, asr #1
   115b8:	andeq	r0, r0, r0
   115bc:	push	{r4, lr}
   115c0:	ldr	r4, [pc, #24]	; 115e0 <_start@@Base+0xe8>
   115c4:	ldrb	r3, [r4]
   115c8:	cmp	r3, #0
   115cc:	popne	{r4, pc}
   115d0:	bl	11558 <_start@@Base+0x60>
   115d4:	mov	r3, #1
   115d8:	strb	r3, [r4]
   115dc:	pop	{r4, pc}
   115e0:	andeq	r4, r2, r8, asr #1
   115e4:	b	11584 <_start@@Base+0x8c>

000115e8 <test_simple_case@@Base>:
   115e8:	push	{fp, lr}
   115ec:	mov	fp, sp
   115f0:	sub	sp, sp, #96	; 0x60
   115f4:	ldr	r0, [pc, #408]	; 11794 <test_simple_case@@Base+0x1ac>
   115f8:	add	r0, pc, r0
   115fc:	bl	117c0 <test_simple_case@@Base+0x1d8>
   11600:	movw	lr, #0
   11604:	str	r0, [sp, #28]
   11608:	mov	r0, lr
   1160c:	bl	12054 <mmk_matcher_init@@Base>
   11610:	sub	r0, fp, #6
   11614:	sub	lr, fp, #28
   11618:	mov	r1, lr
   1161c:	vmov.i32	q8, #0	; 0x00000000
   11620:	vst1.32	{d16-d17}, [r1]!
   11624:	mov	r2, #0
   11628:	str	r2, [r1]
   1162c:	str	r0, [fp, #-32]	; 0xffffffe0
   11630:	sub	r0, fp, #32
   11634:	str	r0, [fp, #-20]	; 0xffffffec
   11638:	mov	r0, lr
   1163c:	bl	133f4 <mmk_when_init@@Base>
   11640:	movw	r0, #6
   11644:	bl	11450 <malloc@plt>
   11648:	str	r0, [sp, #24]
   1164c:	bl	12094 <mmk_matcher_term@@Base>
   11650:	ldr	r0, [pc, #312]	; 11790 <test_simple_case@@Base+0x1a8>
   11654:	add	r0, pc, r0
   11658:	bl	114c8 <my_strdup@plt>
   1165c:	str	r0, [fp, #-36]	; 0xffffffdc
   11660:	movw	r0, #1
   11664:	bl	12054 <mmk_matcher_init@@Base>
   11668:	ldr	r0, [pc, #284]	; 1178c <test_simple_case@@Base+0x1a4>
   1166c:	movw	r1, #0
   11670:	bl	120d8 <mmk_matcher_add@@Base>
   11674:	movw	r0, #6
   11678:	bl	11450 <malloc@plt>
   1167c:	str	r0, [sp, #20]
   11680:	bl	12094 <mmk_matcher_term@@Base>
   11684:	movw	r0, #1
   11688:	str	r0, [sp, #32]
   1168c:	movw	r1, #0
   11690:	str	r1, [sp, #36]	; 0x24
   11694:	str	r1, [sp, #40]	; 0x28
   11698:	str	r1, [sp, #44]	; 0x2c
   1169c:	str	r0, [sp, #48]	; 0x30
   116a0:	str	r1, [sp, #52]	; 0x34
   116a4:	add	r0, sp, #32
   116a8:	bl	12db8 <mmk_verify_times@@Base>
   116ac:	str	r0, [fp, #-40]	; 0xffffffd8
   116b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   116b4:	cmp	r0, #0
   116b8:	bne	11700 <test_simple_case@@Base+0x118>
   116bc:	ldr	r0, [pc, #212]	; 11798 <test_simple_case@@Base+0x1b0>
   116c0:	add	r1, pc, r0
   116c4:	ldr	r0, [pc, #208]	; 1179c <test_simple_case@@Base+0x1b4>
   116c8:	add	r2, pc, r0
   116cc:	ldr	r0, [pc, #204]	; 117a0 <test_simple_case@@Base+0x1b8>
   116d0:	add	r0, pc, r0
   116d4:	ldr	r3, [pc, #200]	; 117a4 <test_simple_case@@Base+0x1bc>
   116d8:	ldr	r3, [pc, r3]
   116dc:	ldr	r3, [r3]
   116e0:	str	r0, [sp, #16]
   116e4:	mov	r0, r3
   116e8:	movw	r3, #23
   116ec:	ldr	ip, [sp, #16]
   116f0:	str	ip, [sp]
   116f4:	bl	11498 <fprintf@plt>
   116f8:	str	r0, [sp, #12]
   116fc:	bl	114ec <abort@plt>
   11700:	b	11704 <test_simple_case@@Base+0x11c>
   11704:	b	11708 <test_simple_case@@Base+0x120>
   11708:	sub	r0, fp, #6
   1170c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11710:	cmp	r1, r0
   11714:	bne	11730 <test_simple_case@@Base+0x148>
   11718:	sub	r1, fp, #6
   1171c:	ldr	r0, [pc, #152]	; 117bc <test_simple_case@@Base+0x1d4>
   11720:	add	r0, pc, r0
   11724:	bl	11414 <strcmp@plt>
   11728:	cmp	r0, #0
   1172c:	beq	11774 <test_simple_case@@Base+0x18c>
   11730:	ldr	r0, [pc, #116]	; 117ac <test_simple_case@@Base+0x1c4>
   11734:	add	r1, pc, r0
   11738:	ldr	r0, [pc, #112]	; 117b0 <test_simple_case@@Base+0x1c8>
   1173c:	add	r2, pc, r0
   11740:	ldr	r0, [pc, #108]	; 117b4 <test_simple_case@@Base+0x1cc>
   11744:	add	r0, pc, r0
   11748:	ldr	r3, [pc, #104]	; 117b8 <test_simple_case@@Base+0x1d0>
   1174c:	ldr	r3, [pc, r3]
   11750:	ldr	r3, [r3]
   11754:	str	r0, [sp, #8]
   11758:	mov	r0, r3
   1175c:	movw	r3, #24
   11760:	ldr	ip, [sp, #8]
   11764:	str	ip, [sp]
   11768:	bl	11498 <fprintf@plt>
   1176c:	str	r0, [sp, #4]
   11770:	bl	114ec <abort@plt>
   11774:	b	11778 <test_simple_case@@Base+0x190>
   11778:	ldr	r0, [pc, #40]	; 117a8 <test_simple_case@@Base+0x1c0>
   1177c:	ldr	r0, [pc, r0]
   11780:	bl	12034 <mmk_reset@@Base>
   11784:	mov	sp, fp
   11788:	pop	{fp, pc}
   1178c:	andhi	r0, r0, sl
   11790:	andeq	r1, r0, r6, ror #29
   11794:	andeq	r1, r0, r0, lsr pc
   11798:	andeq	r1, r0, r0, lsl #29
   1179c:	muleq	r0, r5, lr
   117a0:	andeq	r1, r0, r6, ror #29
   117a4:	andeq	r2, r1, r8, lsr #19
   117a8:	andeq	r2, r1, r4, lsl r9
   117ac:	andeq	r1, r0, ip, lsl #28
   117b0:	andeq	r1, r0, r1, lsr #28
   117b4:	andeq	r1, r0, r7, ror lr
   117b8:	andeq	r2, r1, r4, lsr r9
   117bc:	muleq	r1, r4, r9
   117c0:	push	{fp, lr}
   117c4:	mov	fp, sp
   117c8:	sub	sp, sp, #8
   117cc:	ldr	r1, [pc, #20]	; 117e8 <test_simple_case@@Base+0x200>
   117d0:	add	r1, pc, r1
   117d4:	str	r0, [sp, #4]
   117d8:	ldr	r0, [sp, #4]
   117dc:	bl	12148 <mmk_mock_create_internal@@Base>
   117e0:	mov	sp, fp
   117e4:	pop	{fp, pc}
   117e8:	andeq	r0, r0, r0, ror #2

000117ec <test_error_case@@Base>:
   117ec:	push	{fp, lr}
   117f0:	mov	fp, sp
   117f4:	sub	sp, sp, #56	; 0x38
   117f8:	ldr	r0, [pc, #252]	; 118fc <test_error_case@@Base+0x110>
   117fc:	add	r0, pc, r0
   11800:	bl	117c0 <test_simple_case@@Base+0x1d8>
   11804:	str	r0, [fp, #-4]
   11808:	movw	r0, #0
   1180c:	bl	12054 <mmk_matcher_init@@Base>
   11810:	movw	r0, #0
   11814:	str	r0, [fp, #-24]	; 0xffffffe8
   11818:	movw	lr, #12
   1181c:	str	lr, [fp, #-20]	; 0xffffffec
   11820:	str	r0, [sp, #28]
   11824:	add	lr, sp, #28
   11828:	str	lr, [fp, #-16]
   1182c:	str	r0, [fp, #-12]
   11830:	str	r0, [fp, #-8]
   11834:	sub	r0, fp, #24
   11838:	bl	133f4 <mmk_when_init@@Base>
   1183c:	ldr	r0, [fp, #-4]
   11840:	movw	lr, #0
   11844:	str	r0, [sp, #16]
   11848:	mov	r0, lr
   1184c:	movw	r1, #1
   11850:	bl	120d8 <mmk_matcher_add@@Base>
   11854:	movw	r0, #0
   11858:	str	r0, [sp, #24]
   1185c:	ldr	r0, [sp, #24]
   11860:	ldr	r1, [sp, #16]
   11864:	blx	r1
   11868:	str	r0, [sp, #12]
   1186c:	bl	12094 <mmk_matcher_term@@Base>
   11870:	ldr	r0, [pc, #128]	; 118f8 <test_error_case@@Base+0x10c>
   11874:	add	r0, pc, r0
   11878:	bl	114c8 <my_strdup@plt>
   1187c:	str	r0, [sp, #20]
   11880:	ldr	r0, [sp, #20]
   11884:	movw	r1, #0
   11888:	cmp	r0, r1
   1188c:	bne	118a0 <test_error_case@@Base+0xb4>
   11890:	bl	114a4 <__errno_location@plt>
   11894:	ldr	r0, [r0]
   11898:	cmp	r0, #12
   1189c:	beq	118e4 <test_error_case@@Base+0xf8>
   118a0:	ldr	r0, [pc, #88]	; 11900 <test_error_case@@Base+0x114>
   118a4:	add	r1, pc, r0
   118a8:	ldr	r0, [pc, #84]	; 11904 <test_error_case@@Base+0x118>
   118ac:	add	r2, pc, r0
   118b0:	ldr	r0, [pc, #80]	; 11908 <test_error_case@@Base+0x11c>
   118b4:	add	r0, pc, r0
   118b8:	ldr	r3, [pc, #76]	; 1190c <test_error_case@@Base+0x120>
   118bc:	ldr	r3, [pc, r3]
   118c0:	ldr	r3, [r3]
   118c4:	str	r0, [sp, #8]
   118c8:	mov	r0, r3
   118cc:	movw	r3, #39	; 0x27
   118d0:	ldr	ip, [sp, #8]
   118d4:	str	ip, [sp]
   118d8:	bl	11498 <fprintf@plt>
   118dc:	str	r0, [sp, #4]
   118e0:	bl	114ec <abort@plt>
   118e4:	b	118e8 <test_error_case@@Base+0xfc>
   118e8:	ldr	r0, [fp, #-4]
   118ec:	bl	12034 <mmk_reset@@Base>
   118f0:	mov	sp, fp
   118f4:	pop	{fp, pc}
   118f8:	andeq	r1, r0, r7, ror #26
   118fc:	andeq	r1, r0, ip, lsr #26
   11900:	muleq	r0, ip, ip
   11904:			; <UNDEFINED> instruction: 0x00001cb1
   11908:	andeq	r1, r0, fp, lsr #26
   1190c:	andeq	r2, r1, r4, asr #15

00011910 <main@@Base>:
   11910:	push	{fp, lr}
   11914:	mov	fp, sp
   11918:	sub	sp, sp, #8
   1191c:	movw	r0, #0
   11920:	str	r0, [sp, #4]
   11924:	bl	115e8 <test_simple_case@@Base>
   11928:	bl	117ec <test_error_case@@Base>
   1192c:	movw	r0, #0
   11930:	mov	sp, fp
   11934:	pop	{fp, pc}
   11938:	push	{fp, lr}
   1193c:	mov	fp, sp
   11940:	sub	sp, sp, #128	; 0x80
   11944:	str	r0, [fp, #-8]
   11948:	b	1194c <main@@Base+0x3c>
   1194c:	bl	120b8 <mmk_matcher_ctx@@Base>
   11950:	str	r0, [fp, #-12]
   11954:	ldr	r0, [fp, #-12]
   11958:	movw	lr, #0
   1195c:	cmp	r0, lr
   11960:	beq	11bec <main@@Base+0x2dc>
   11964:	bl	12b3c <mmk_ctx@@Base>
   11968:	bl	12994 <mmk_stub_context@@Base>
   1196c:	str	r0, [fp, #-16]
   11970:	ldr	r0, [fp, #-12]
   11974:	ldr	r0, [r0]
   11978:	cmp	r0, #0
   1197c:	bne	119d4 <main@@Base+0xc4>
   11980:	movw	r0, #44	; 0x2c
   11984:	bl	13240 <mmk_malloc@@Base>
   11988:	str	r0, [fp, #-20]	; 0xffffffec
   1198c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11990:	add	r0, r0, #8
   11994:	str	r0, [sp, #32]
   11998:	bl	13418 <mmk_when_get_result@@Base>
   1199c:	ldr	lr, [sp, #32]
   119a0:	str	r0, [sp, #28]
   119a4:	mov	r0, lr
   119a8:	ldr	r1, [sp, #28]
   119ac:	movw	r2, #20
   119b0:	bl	11438 <memcpy@plt>
   119b4:	ldr	r0, [fp, #-8]
   119b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   119bc:	str	r0, [r1, #40]	; 0x28
   119c0:	b	119c4 <main@@Base+0xb4>
   119c4:	ldr	r0, [fp, #-16]
   119c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   119cc:	bl	13438 <mmk_when_impl@@Base>
   119d0:	b	11bd0 <main@@Base+0x2c0>
   119d4:	ldr	r0, [fp, #-12]
   119d8:	ldr	r0, [r0]
   119dc:	cmp	r0, #1
   119e0:	bne	11bcc <main@@Base+0x2bc>
   119e4:	movw	r0, #0
   119e8:	str	r0, [fp, #-24]	; 0xffffffe8
   119ec:	ldr	r0, [fp, #-16]
   119f0:	bl	12344 <mmk_mock_params_begin@@Base>
   119f4:	str	r0, [fp, #-28]	; 0xffffffe4
   119f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   119fc:	movw	r1, #0
   11a00:	cmp	r0, r1
   11a04:	beq	11b8c <main@@Base+0x27c>
   11a08:	ldr	r0, [fp, #-12]
   11a0c:	str	r0, [fp, #-32]	; 0xffffffe0
   11a10:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11a14:	ldr	r0, [r0, #8]
   11a18:	movw	r1, #0
   11a1c:	cmp	r0, r1
   11a20:	beq	11b34 <main@@Base+0x224>
   11a24:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11a28:	ldr	r0, [r0, #8]
   11a2c:	str	r0, [fp, #-32]	; 0xffffffe0
   11a30:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11a34:	ldr	r0, [r0]
   11a38:	cmp	r0, #0
   11a3c:	bne	11a44 <main@@Base+0x134>
   11a40:	b	11b30 <main@@Base+0x220>
   11a44:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11a48:	ldr	r0, [r0]
   11a4c:	and	r0, r0, #-2147483648	; 0x80000000
   11a50:	cmp	r0, #0
   11a54:	beq	11ae0 <main@@Base+0x1d0>
   11a58:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11a5c:	add	r0, r0, #12
   11a60:	sub	r1, fp, #8
   11a64:	movw	r2, #4
   11a68:	bl	13010 <mmk_memcmp@@Base>
   11a6c:	str	r0, [fp, #-36]	; 0xffffffdc
   11a70:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11a74:	cmp	r0, #0
   11a78:	bne	11a94 <main@@Base+0x184>
   11a7c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11a80:	ldr	r0, [r0]
   11a84:	and	r0, r0, #2
   11a88:	cmp	r0, #0
   11a8c:	bne	11a94 <main@@Base+0x184>
   11a90:	b	11b74 <main@@Base+0x264>
   11a94:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11a98:	cmp	r0, #0
   11a9c:	bge	11ab8 <main@@Base+0x1a8>
   11aa0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11aa4:	ldr	r0, [r0]
   11aa8:	and	r0, r0, #4
   11aac:	cmp	r0, #0
   11ab0:	bne	11ab8 <main@@Base+0x1a8>
   11ab4:	b	11b74 <main@@Base+0x264>
   11ab8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11abc:	cmp	r0, #0
   11ac0:	ble	11adc <main@@Base+0x1cc>
   11ac4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11ac8:	ldr	r0, [r0]
   11acc:	and	r0, r0, #8
   11ad0:	cmp	r0, #0
   11ad4:	bne	11adc <main@@Base+0x1cc>
   11ad8:	b	11b74 <main@@Base+0x264>
   11adc:	b	11b2c <main@@Base+0x21c>
   11ae0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11ae4:	ldr	r0, [r0]
   11ae8:	cmp	r0, #1
   11aec:	bne	11b28 <main@@Base+0x218>
   11af0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11af4:	bl	12140 <mmk_matcher_get_predicate@@Base>
   11af8:	str	r0, [fp, #-40]	; 0xffffffd8
   11afc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11b00:	ldr	lr, [fp, #-28]	; 0xffffffe4
   11b04:	ldr	lr, [lr, #12]
   11b08:	str	r0, [sp, #24]
   11b0c:	mov	r0, lr
   11b10:	ldr	lr, [sp, #24]
   11b14:	blx	lr
   11b18:	cmp	r0, #0
   11b1c:	bne	11b24 <main@@Base+0x214>
   11b20:	b	11b74 <main@@Base+0x264>
   11b24:	b	11b28 <main@@Base+0x218>
   11b28:	b	11b2c <main@@Base+0x21c>
   11b2c:	b	11b30 <main@@Base+0x220>
   11b30:	b	11b58 <main@@Base+0x248>
   11b34:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11b38:	add	r0, r0, #12
   11b3c:	sub	r1, fp, #8
   11b40:	movw	r2, #4
   11b44:	bl	13010 <mmk_memcmp@@Base>
   11b48:	cmp	r0, #0
   11b4c:	beq	11b54 <main@@Base+0x244>
   11b50:	b	11b74 <main@@Base+0x264>
   11b54:	b	11b58 <main@@Base+0x248>
   11b58:	b	11b5c <main@@Base+0x24c>
   11b5c:	b	11b60 <main@@Base+0x250>
   11b60:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11b64:	ldr	r0, [r0]
   11b68:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11b6c:	add	r0, r1, r0
   11b70:	str	r0, [fp, #-24]	; 0xffffffe8
   11b74:	b	11b78 <main@@Base+0x268>
   11b78:	ldr	r0, [fp, #-16]
   11b7c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   11b80:	bl	12364 <mmk_mock_params_next@@Base>
   11b84:	str	r0, [fp, #-28]	; 0xffffffe4
   11b88:	b	119f8 <main@@Base+0xe8>
   11b8c:	ldr	r0, [fp, #-12]
   11b90:	str	r0, [fp, #-44]	; 0xffffffd4
   11b94:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11b98:	movw	r1, #0
   11b9c:	cmp	r0, r1
   11ba0:	beq	11bc4 <main@@Base+0x2b4>
   11ba4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11ba8:	ldr	r0, [r0, #8]
   11bac:	str	r0, [fp, #-48]	; 0xffffffd0
   11bb0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11bb4:	bl	13268 <mmk_free@@Base>
   11bb8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11bbc:	str	r0, [fp, #-44]	; 0xffffffd4
   11bc0:	b	11b94 <main@@Base+0x284>
   11bc4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11bc8:	bl	12d94 <mmk_verify_set_times@@Base>
   11bcc:	b	11bd0 <main@@Base+0x2c0>
   11bd0:	b	11bd4 <main@@Base+0x2c4>
   11bd4:	b	11bd8 <main@@Base+0x2c8>
   11bd8:	ldr	r0, [pc, #836]	; 11f24 <main@@Base+0x614>
   11bdc:	add	r0, pc, r0
   11be0:	ldr	r0, [r0]
   11be4:	str	r0, [fp, #-4]
   11be8:	b	11f10 <main@@Base+0x600>
   11bec:	movw	r0, #0
   11bf0:	str	r0, [sp, #60]	; 0x3c
   11bf4:	str	r0, [sp, #64]	; 0x40
   11bf8:	str	r0, [sp, #68]	; 0x44
   11bfc:	ldr	r0, [fp, #-8]
   11c00:	str	r0, [sp, #72]	; 0x48
   11c04:	add	r0, sp, #60	; 0x3c
   11c08:	str	r0, [fp, #-52]	; 0xffffffcc
   11c0c:	b	11c10 <main@@Base+0x300>
   11c10:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11c14:	movw	r1, #16
   11c18:	bl	12e48 <mmk_verify_register_call@@Base>
   11c1c:	bl	1238c <mmk_mock_get_params@@Base>
   11c20:	str	r0, [sp, #56]	; 0x38
   11c24:	ldr	r0, [sp, #56]	; 0x38
   11c28:	movw	r1, #0
   11c2c:	cmp	r0, r1
   11c30:	beq	11ef8 <main@@Base+0x5e8>
   11c34:	ldr	r0, [sp, #56]	; 0x38
   11c38:	str	r0, [sp, #52]	; 0x34
   11c3c:	ldr	r0, [sp, #56]	; 0x38
   11c40:	ldr	r0, [r0]
   11c44:	str	r0, [sp, #48]	; 0x30
   11c48:	ldr	r0, [sp, #48]	; 0x30
   11c4c:	ldr	r0, [r0, #8]
   11c50:	movw	r1, #0
   11c54:	cmp	r0, r1
   11c58:	beq	11d70 <main@@Base+0x460>
   11c5c:	ldr	r0, [sp, #48]	; 0x30
   11c60:	ldr	r0, [r0, #8]
   11c64:	str	r0, [sp, #48]	; 0x30
   11c68:	ldr	r0, [sp, #48]	; 0x30
   11c6c:	ldr	r0, [r0]
   11c70:	cmp	r0, #0
   11c74:	bne	11c7c <main@@Base+0x36c>
   11c78:	b	11d6c <main@@Base+0x45c>
   11c7c:	ldr	r0, [sp, #48]	; 0x30
   11c80:	ldr	r0, [r0]
   11c84:	and	r0, r0, #-2147483648	; 0x80000000
   11c88:	cmp	r0, #0
   11c8c:	beq	11d20 <main@@Base+0x410>
   11c90:	sub	r0, fp, #8
   11c94:	mov	r1, r0
   11c98:	str	r0, [sp, #20]
   11c9c:	mov	r0, r1
   11ca0:	ldr	r1, [sp, #20]
   11ca4:	movw	r2, #4
   11ca8:	bl	13010 <mmk_memcmp@@Base>
   11cac:	str	r0, [sp, #44]	; 0x2c
   11cb0:	ldr	r0, [sp, #44]	; 0x2c
   11cb4:	cmp	r0, #0
   11cb8:	bne	11cd4 <main@@Base+0x3c4>
   11cbc:	ldr	r0, [sp, #48]	; 0x30
   11cc0:	ldr	r0, [r0]
   11cc4:	and	r0, r0, #2
   11cc8:	cmp	r0, #0
   11ccc:	bne	11cd4 <main@@Base+0x3c4>
   11cd0:	b	11ee8 <main@@Base+0x5d8>
   11cd4:	ldr	r0, [sp, #44]	; 0x2c
   11cd8:	cmp	r0, #0
   11cdc:	bge	11cf8 <main@@Base+0x3e8>
   11ce0:	ldr	r0, [sp, #48]	; 0x30
   11ce4:	ldr	r0, [r0]
   11ce8:	and	r0, r0, #4
   11cec:	cmp	r0, #0
   11cf0:	bne	11cf8 <main@@Base+0x3e8>
   11cf4:	b	11ee8 <main@@Base+0x5d8>
   11cf8:	ldr	r0, [sp, #44]	; 0x2c
   11cfc:	cmp	r0, #0
   11d00:	ble	11d1c <main@@Base+0x40c>
   11d04:	ldr	r0, [sp, #48]	; 0x30
   11d08:	ldr	r0, [r0]
   11d0c:	and	r0, r0, #8
   11d10:	cmp	r0, #0
   11d14:	bne	11d1c <main@@Base+0x40c>
   11d18:	b	11ee8 <main@@Base+0x5d8>
   11d1c:	b	11d68 <main@@Base+0x458>
   11d20:	ldr	r0, [sp, #48]	; 0x30
   11d24:	ldr	r0, [r0]
   11d28:	cmp	r0, #1
   11d2c:	bne	11d64 <main@@Base+0x454>
   11d30:	ldr	r0, [sp, #48]	; 0x30
   11d34:	bl	12140 <mmk_matcher_get_predicate@@Base>
   11d38:	str	r0, [sp, #40]	; 0x28
   11d3c:	ldr	r0, [sp, #40]	; 0x28
   11d40:	ldr	lr, [fp, #-8]
   11d44:	str	r0, [sp, #16]
   11d48:	mov	r0, lr
   11d4c:	ldr	lr, [sp, #16]
   11d50:	blx	lr
   11d54:	cmp	r0, #0
   11d58:	bne	11d60 <main@@Base+0x450>
   11d5c:	b	11ee8 <main@@Base+0x5d8>
   11d60:	b	11d64 <main@@Base+0x454>
   11d64:	b	11d68 <main@@Base+0x458>
   11d68:	b	11d6c <main@@Base+0x45c>
   11d6c:	b	11d98 <main@@Base+0x488>
   11d70:	sub	r0, fp, #8
   11d74:	ldr	r1, [sp, #52]	; 0x34
   11d78:	add	r1, r1, #28
   11d7c:	add	r1, r1, #12
   11d80:	movw	r2, #4
   11d84:	bl	13010 <mmk_memcmp@@Base>
   11d88:	cmp	r0, #0
   11d8c:	beq	11d94 <main@@Base+0x484>
   11d90:	b	11ee8 <main@@Base+0x5d8>
   11d94:	b	11d98 <main@@Base+0x488>
   11d98:	ldr	r0, [sp, #52]	; 0x34
   11d9c:	ldr	r0, [r0, #12]
   11da0:	cmp	r0, #0
   11da4:	beq	11dc0 <main@@Base+0x4b0>
   11da8:	ldr	r0, [sp, #52]	; 0x34
   11dac:	ldr	r0, [r0, #12]
   11db0:	str	r0, [sp, #12]
   11db4:	bl	114a4 <__errno_location@plt>
   11db8:	ldr	lr, [sp, #12]
   11dbc:	str	lr, [r0]
   11dc0:	ldr	r0, [sp, #52]	; 0x34
   11dc4:	ldr	r0, [r0, #20]
   11dc8:	movw	r1, #0
   11dcc:	cmp	r0, r1
   11dd0:	beq	11e2c <main@@Base+0x51c>
   11dd4:	ldr	r0, [sp, #52]	; 0x34
   11dd8:	ldr	r0, [r0, #16]
   11ddc:	movw	r1, #0
   11de0:	cmp	r0, r1
   11de4:	bne	11e2c <main@@Base+0x51c>
   11de8:	b	11dec <main@@Base+0x4dc>
   11dec:	b	11df0 <main@@Base+0x4e0>
   11df0:	b	11df4 <main@@Base+0x4e4>
   11df4:	ldr	r0, [sp, #52]	; 0x34
   11df8:	ldr	r0, [r0, #20]
   11dfc:	ldr	r1, [fp, #-8]
   11e00:	str	r0, [sp, #8]
   11e04:	mov	r0, r1
   11e08:	ldr	r1, [sp, #8]
   11e0c:	blx	r1
   11e10:	str	r0, [sp, #36]	; 0x24
   11e14:	b	11e18 <main@@Base+0x508>
   11e18:	b	11e1c <main@@Base+0x50c>
   11e1c:	b	11e20 <main@@Base+0x510>
   11e20:	ldr	r0, [sp, #36]	; 0x24
   11e24:	str	r0, [fp, #-4]
   11e28:	b	11f10 <main@@Base+0x600>
   11e2c:	ldr	r0, [sp, #52]	; 0x34
   11e30:	ldr	r0, [r0, #20]
   11e34:	movw	r1, #0
   11e38:	cmp	r0, r1
   11e3c:	beq	11e9c <main@@Base+0x58c>
   11e40:	ldr	r0, [sp, #52]	; 0x34
   11e44:	ldr	r0, [r0, #16]
   11e48:	movw	r1, #0
   11e4c:	cmp	r0, r1
   11e50:	beq	11e9c <main@@Base+0x58c>
   11e54:	b	11e58 <main@@Base+0x548>
   11e58:	b	11e5c <main@@Base+0x54c>
   11e5c:	ldr	r0, [sp, #52]	; 0x34
   11e60:	ldr	r0, [r0, #20]
   11e64:	ldr	r1, [fp, #-8]
   11e68:	str	r0, [sp, #4]
   11e6c:	mov	r0, r1
   11e70:	ldr	r1, [sp, #4]
   11e74:	blx	r1
   11e78:	str	r0, [sp]
   11e7c:	b	11e80 <main@@Base+0x570>
   11e80:	b	11e84 <main@@Base+0x574>
   11e84:	b	11e88 <main@@Base+0x578>
   11e88:	ldr	r0, [sp, #52]	; 0x34
   11e8c:	ldr	r0, [r0, #16]
   11e90:	ldr	r0, [r0]
   11e94:	str	r0, [fp, #-4]
   11e98:	b	11f10 <main@@Base+0x600>
   11e9c:	ldr	r0, [sp, #52]	; 0x34
   11ea0:	ldr	r0, [r0, #16]
   11ea4:	movw	r1, #0
   11ea8:	cmp	r0, r1
   11eac:	beq	11ecc <main@@Base+0x5bc>
   11eb0:	b	11eb4 <main@@Base+0x5a4>
   11eb4:	b	11eb8 <main@@Base+0x5a8>
   11eb8:	ldr	r0, [sp, #52]	; 0x34
   11ebc:	ldr	r0, [r0, #16]
   11ec0:	ldr	r0, [r0]
   11ec4:	str	r0, [fp, #-4]
   11ec8:	b	11f10 <main@@Base+0x600>
   11ecc:	b	11ed0 <main@@Base+0x5c0>
   11ed0:	b	11ed4 <main@@Base+0x5c4>
   11ed4:	ldr	r0, [pc, #68]	; 11f20 <main@@Base+0x610>
   11ed8:	add	r0, pc, r0
   11edc:	ldr	r0, [r0]
   11ee0:	str	r0, [fp, #-4]
   11ee4:	b	11f10 <main@@Base+0x600>
   11ee8:	ldr	r0, [sp, #56]	; 0x38
   11eec:	ldr	r0, [r0, #4]
   11ef0:	str	r0, [sp, #56]	; 0x38
   11ef4:	b	11c24 <main@@Base+0x314>
   11ef8:	b	11efc <main@@Base+0x5ec>
   11efc:	b	11f00 <main@@Base+0x5f0>
   11f00:	ldr	r0, [pc, #20]	; 11f1c <main@@Base+0x60c>
   11f04:	add	r0, pc, r0
   11f08:	ldr	r0, [r0]
   11f0c:	str	r0, [fp, #-4]
   11f10:	ldr	r0, [fp, #-4]
   11f14:	mov	sp, fp
   11f18:	pop	{fp, pc}
   11f1c:	andeq	r2, r1, r0, asr #3
   11f20:	andeq	r2, r1, ip, ror #3
   11f24:	andeq	r2, r1, r8, ror #9

00011f28 <mmk_init@@Base>:
   11f28:	push	{r4, sl, fp, lr}
   11f2c:	add	fp, sp, #8
   11f30:	sub	sp, sp, #8
   11f34:	ldr	r4, [pc, #108]	; 11fa8 <mmk_init@@Base+0x80>
   11f38:	add	r4, pc, r4
   11f3c:	ldrb	r0, [r4]
   11f40:	cmp	r0, #0
   11f44:	bne	11f6c <mmk_init@@Base+0x44>
   11f48:	bl	123a4 <plt_init_ctx@@Base>
   11f4c:	ldr	r1, [pc, #88]	; 11fac <mmk_init@@Base+0x84>
   11f50:	cmn	r0, #1
   11f54:	add	r1, pc, r1
   11f58:	str	r0, [r1]
   11f5c:	beq	11f74 <mmk_init@@Base+0x4c>
   11f60:	bl	1327c <mmk_init_vital_functions@@Base>
   11f64:	mov	r0, #1
   11f68:	strb	r0, [r4]
   11f6c:	sub	sp, fp, #8
   11f70:	pop	{r4, sl, fp, pc}
   11f74:	ldr	r0, [pc, #52]	; 11fb0 <mmk_init@@Base+0x88>
   11f78:	mov	r3, #45	; 0x2d
   11f7c:	ldr	r0, [pc, r0]
   11f80:	ldr	r0, [r0]
   11f84:	ldr	r1, [pc, #40]	; 11fb4 <mmk_init@@Base+0x8c>
   11f88:	add	r1, pc, r1
   11f8c:	str	r1, [sp]
   11f90:	ldr	r1, [pc, #32]	; 11fb8 <mmk_init@@Base+0x90>
   11f94:	ldr	r2, [pc, #32]	; 11fbc <mmk_init@@Base+0x94>
   11f98:	add	r1, pc, r1
   11f9c:	add	r2, pc, r2
   11fa0:	bl	11498 <fprintf@plt>
   11fa4:	bl	114ec <abort@plt>
   11fa8:	muleq	r1, r0, r1
   11fac:	andeq	r2, r1, r8, ror r1
   11fb0:	andeq	r2, r1, r4, lsl #2
   11fb4:	andeq	r1, r0, r5, asr #13
   11fb8:	andeq	r1, r0, r8, lsr #11
   11fbc:	andeq	r1, r0, r2, ror #12

00011fc0 <mmk_plt_ctx@@Base>:
   11fc0:	ldr	r0, [pc, #84]	; 1201c <mmk_plt_ctx@@Base+0x5c>
   11fc4:	add	r0, pc, r0
   11fc8:	ldrb	r0, [r0]
   11fcc:	cmp	r0, #0
   11fd0:	ldrne	r0, [pc, #72]	; 12020 <mmk_plt_ctx@@Base+0x60>
   11fd4:	ldrne	r0, [pc, r0]
   11fd8:	bxne	lr
   11fdc:	push	{fp, lr}
   11fe0:	mov	fp, sp
   11fe4:	sub	sp, sp, #8
   11fe8:	ldr	r0, [pc, #52]	; 12024 <mmk_plt_ctx@@Base+0x64>
   11fec:	mov	r3, #54	; 0x36
   11ff0:	ldr	r0, [pc, r0]
   11ff4:	ldr	r0, [r0]
   11ff8:	ldr	r1, [pc, #40]	; 12028 <mmk_plt_ctx@@Base+0x68>
   11ffc:	add	r1, pc, r1
   12000:	str	r1, [sp]
   12004:	ldr	r1, [pc, #32]	; 1202c <mmk_plt_ctx@@Base+0x6c>
   12008:	ldr	r2, [pc, #32]	; 12030 <mmk_plt_ctx@@Base+0x70>
   1200c:	add	r1, pc, r1
   12010:	add	r2, pc, r2
   12014:	bl	11498 <fprintf@plt>
   12018:	bl	114ec <abort@plt>
   1201c:	andeq	r2, r1, r4, lsl #2
   12020:	strdeq	r2, [r1], -r8
   12024:	muleq	r1, r0, r0
   12028:	andeq	r1, r0, r8, ror #12
   1202c:	andeq	r1, r0, r4, lsr r5
   12030:	andeq	r1, r0, lr, ror #11

00012034 <mmk_reset@@Base>:
   12034:	cmp	r0, #0
   12038:	bxeq	lr
   1203c:	push	{fp, lr}
   12040:	mov	fp, sp
   12044:	bl	12c30 <mmk_ask_ctx@@Base>
   12048:	bl	12994 <mmk_stub_context@@Base>
   1204c:	pop	{fp, lr}
   12050:	b	122c4 <mmk_mock_destroy_internal@@Base>

00012054 <mmk_matcher_init@@Base>:
   12054:	push	{r4, r5, fp, lr}
   12058:	add	fp, sp, #8
   1205c:	mov	r4, r0
   12060:	mov	r0, #12
   12064:	bl	13240 <mmk_malloc@@Base>
   12068:	mov	r5, r0
   1206c:	mov	r0, #0
   12070:	str	r4, [r5]
   12074:	str	r0, [r5, #4]
   12078:	str	r0, [r5, #8]
   1207c:	ldr	r0, [pc, #12]	; 12090 <mmk_matcher_init@@Base+0x3c>
   12080:	add	r0, pc, r0
   12084:	bl	114d4 <__tls_get_addr@plt>
   12088:	str	r5, [r0]
   1208c:	pop	{r4, r5, fp, pc}
   12090:	ldrdeq	r1, [r1], -r4

00012094 <mmk_matcher_term@@Base>:
   12094:	push	{fp, lr}
   12098:	mov	fp, sp
   1209c:	ldr	r0, [pc, #16]	; 120b4 <mmk_matcher_term@@Base+0x20>
   120a0:	add	r0, pc, r0
   120a4:	bl	114d4 <__tls_get_addr@plt>
   120a8:	mov	r1, #0
   120ac:	str	r1, [r0]
   120b0:	pop	{fp, pc}
   120b4:			; <UNDEFINED> instruction: 0x00011fb4

000120b8 <mmk_matcher_ctx@@Base>:
   120b8:	push	{fp, lr}
   120bc:	mov	fp, sp
   120c0:	ldr	r0, [pc, #12]	; 120d4 <mmk_matcher_ctx@@Base+0x1c>
   120c4:	add	r0, pc, r0
   120c8:	bl	114d4 <__tls_get_addr@plt>
   120cc:	ldr	r0, [r0]
   120d0:	pop	{fp, pc}
   120d4:	muleq	r1, r0, pc	; <UNPREDICTABLE>

000120d8 <mmk_matcher_add@@Base>:
   120d8:	push	{r4, r5, r6, sl, fp, lr}
   120dc:	add	fp, sp, #16
   120e0:	mov	r6, r0
   120e4:	mov	r0, #12
   120e8:	mov	r4, r1
   120ec:	bl	13240 <mmk_malloc@@Base>
   120f0:	mov	r5, r0
   120f4:	ldr	r0, [pc, #64]	; 1213c <mmk_matcher_add@@Base+0x64>
   120f8:	add	r0, pc, r0
   120fc:	bl	114d4 <__tls_get_addr@plt>
   12100:	ldr	r0, [r0]
   12104:	mov	r1, #0
   12108:	str	r6, [r5]
   1210c:	str	r4, [r5, #4]
   12110:	str	r1, [r5, #8]
   12114:	mov	r1, r0
   12118:	ldr	r0, [r0, #8]
   1211c:	cmp	r0, #0
   12120:	beq	12130 <mmk_matcher_add@@Base+0x58>
   12124:	ldr	r2, [r0, #4]
   12128:	cmp	r2, r4
   1212c:	bcc	12114 <mmk_matcher_add@@Base+0x3c>
   12130:	str	r0, [r5, #8]
   12134:	str	r5, [r1, #8]
   12138:	pop	{r4, r5, r6, sl, fp, pc}
   1213c:	andeq	r1, r1, ip, asr pc

00012140 <mmk_matcher_get_predicate@@Base>:
   12140:	add	r0, r0, #12
   12144:	bx	lr

00012148 <mmk_mock_create_internal@@Base>:
   12148:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1214c:	add	fp, sp, #24
   12150:	sub	sp, sp, #8
   12154:	mov	r8, r1
   12158:	mov	r9, r0
   1215c:	bl	11f28 <mmk_init@@Base>
   12160:	mov	r0, #20
   12164:	bl	13240 <mmk_malloc@@Base>
   12168:	cmp	r0, #0
   1216c:	beq	12254 <mmk_mock_create_internal@@Base+0x10c>
   12170:	vmov.i32	q8, #0	; 0x00000000
   12174:	mov	r4, r0
   12178:	mov	r1, #0
   1217c:	vst1.32	{d16-d17}, [r0]!
   12180:	str	r1, [r0]
   12184:	mov	r0, r9
   12188:	mov	r1, #64	; 0x40
   1218c:	bl	1313c <mmk_strchr@@Base>
   12190:	mov	r5, r0
   12194:	cmp	r0, #0
   12198:	beq	121a4 <mmk_mock_create_internal@@Base+0x5c>
   1219c:	sub	r6, r5, r9
   121a0:	b	121b0 <mmk_mock_create_internal@@Base+0x68>
   121a4:	mov	r0, r9
   121a8:	bl	131d4 <mmk_strlen@@Base>
   121ac:	mov	r6, r0
   121b0:	add	r0, r6, #1
   121b4:	bl	13240 <mmk_malloc@@Base>
   121b8:	mov	r1, r9
   121bc:	mov	r2, r6
   121c0:	mov	r7, r0
   121c4:	bl	13198 <mmk_strncpy@@Base>
   121c8:	mov	r0, #0
   121cc:	cmp	r5, #0
   121d0:	strb	r0, [r7, r6]
   121d4:	beq	121fc <mmk_mock_create_internal@@Base+0xb4>
   121d8:	ldr	r1, [pc, #200]	; 122a8 <mmk_mock_create_internal@@Base+0x160>
   121dc:	add	r0, r5, #1
   121e0:	mov	r2, #4
   121e4:	add	r1, pc, r1
   121e8:	bl	130d8 <mmk_strneq@@Base>
   121ec:	mov	r5, r0
   121f0:	cmp	r0, #0
   121f4:	movwne	r5, #1
   121f8:	b	12200 <mmk_mock_create_internal@@Base+0xb8>
   121fc:	mov	r5, #1
   12200:	mov	r0, r9
   12204:	mov	r1, r8
   12208:	mov	r2, r4
   1220c:	bl	12b5c <mmk_stub_create@@Base>
   12210:	cmp	r0, #0
   12214:	str	r0, [r4, #4]
   12218:	beq	12288 <mmk_mock_create_internal@@Base+0x140>
   1221c:	cmp	r5, #0
   12220:	bne	1223c <mmk_mock_create_internal@@Base+0xf4>
   12224:	mov	r0, r7
   12228:	mov	r1, r8
   1222c:	mov	r2, r4
   12230:	bl	12b5c <mmk_stub_create@@Base>
   12234:	ldr	r1, [r4, #4]
   12238:	str	r0, [r1, #36]	; 0x24
   1223c:	mov	r0, r7
   12240:	bl	13268 <mmk_free@@Base>
   12244:	ldr	r0, [r4, #4]
   12248:	ldr	r0, [r0, #32]
   1224c:	sub	sp, fp, #24
   12250:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12254:	ldr	r0, [pc, #80]	; 122ac <mmk_mock_create_internal@@Base+0x164>
   12258:	mov	r3, #36	; 0x24
   1225c:	ldr	r0, [pc, r0]
   12260:	ldr	r0, [r0]
   12264:	ldr	r1, [pc, #68]	; 122b0 <mmk_mock_create_internal@@Base+0x168>
   12268:	add	r1, pc, r1
   1226c:	str	r1, [sp]
   12270:	ldr	r1, [pc, #60]	; 122b4 <mmk_mock_create_internal@@Base+0x16c>
   12274:	ldr	r2, [pc, #60]	; 122b8 <mmk_mock_create_internal@@Base+0x170>
   12278:	add	r1, pc, r1
   1227c:	add	r2, pc, r2
   12280:	bl	11498 <fprintf@plt>
   12284:	bl	114ec <abort@plt>
   12288:	ldr	r0, [pc, #44]	; 122bc <mmk_mock_create_internal@@Base+0x174>
   1228c:	mov	r2, r9
   12290:	ldr	r0, [pc, r0]
   12294:	ldr	r0, [r0]
   12298:	ldr	r1, [pc, #32]	; 122c0 <mmk_mock_create_internal@@Base+0x178>
   1229c:	add	r1, pc, r1
   122a0:	bl	11498 <fprintf@plt>
   122a4:	bl	114ec <abort@plt>
   122a8:	andeq	r1, r0, r4, ror #9
   122ac:	andeq	r1, r1, r4, lsr #28
   122b0:	andeq	r1, r0, ip, asr r4
   122b4:	andeq	r1, r0, r8, asr #5
   122b8:	strdeq	r1, [r0], -r9
   122bc:	strdeq	r1, [r1], -r0
   122c0:	andeq	r1, r0, r1, lsr r4

000122c4 <mmk_mock_destroy_internal@@Base>:
   122c4:	push	{r4, r5, r6, r7, fp, lr}
   122c8:	add	fp, sp, #16
   122cc:	mov	r4, r0
   122d0:	ldr	r0, [r0, #4]
   122d4:	cmp	r0, #0
   122d8:	beq	122f0 <mmk_mock_destroy_internal@@Base+0x2c>
   122dc:	ldr	r5, [r0, #36]	; 0x24
   122e0:	bl	12bf4 <mmk_stub_destroy@@Base>
   122e4:	cmp	r5, #0
   122e8:	mov	r0, r5
   122ec:	bne	122dc <mmk_mock_destroy_internal@@Base+0x18>
   122f0:	ldr	r0, [r4, #8]
   122f4:	bl	13268 <mmk_free@@Base>
   122f8:	ldr	r5, [r4]
   122fc:	cmp	r5, #0
   12300:	beq	12338 <mmk_mock_destroy_internal@@Base+0x74>
   12304:	ldm	r5, {r0, r6}
   12308:	cmp	r0, #0
   1230c:	beq	12324 <mmk_mock_destroy_internal@@Base+0x60>
   12310:	ldr	r7, [r0, #8]
   12314:	bl	13268 <mmk_free@@Base>
   12318:	cmp	r7, #0
   1231c:	mov	r0, r7
   12320:	bne	12310 <mmk_mock_destroy_internal@@Base+0x4c>
   12324:	mov	r0, r5
   12328:	bl	13268 <mmk_free@@Base>
   1232c:	cmp	r6, #0
   12330:	mov	r5, r6
   12334:	bne	12304 <mmk_mock_destroy_internal@@Base+0x40>
   12338:	mov	r0, r4
   1233c:	pop	{r4, r5, r6, r7, fp, lr}
   12340:	b	13268 <mmk_free@@Base>

00012344 <mmk_mock_params_begin@@Base>:
   12344:	ldr	r1, [r0, #8]
   12348:	cmp	r1, #0
   1234c:	moveq	r0, #0
   12350:	bxeq	lr
   12354:	ldr	r0, [r0, #12]
   12358:	cmp	r0, #0
   1235c:	addne	r0, r1, #4
   12360:	bx	lr

00012364 <mmk_mock_params_next@@Base>:
   12364:	ldr	r2, [r1, #-4]
   12368:	add	r1, r1, r2
   1236c:	ldr	r2, [r0, #8]
   12370:	ldr	r0, [r0, #12]
   12374:	add	r1, r1, #4
   12378:	add	r0, r2, r0
   1237c:	cmp	r1, r0
   12380:	movcs	r1, #0
   12384:	mov	r0, r1
   12388:	bx	lr

0001238c <mmk_mock_get_params@@Base>:
   1238c:	push	{fp, lr}
   12390:	mov	fp, sp
   12394:	bl	12b3c <mmk_ctx@@Base>
   12398:	bl	12994 <mmk_stub_context@@Base>
   1239c:	ldr	r0, [r0]
   123a0:	pop	{fp, pc}

000123a4 <plt_init_ctx@@Base>:
   123a4:	ldr	r0, [pc, #32]	; 123cc <plt_init_ctx@@Base+0x28>
   123a8:	ldr	r0, [pc, r0]
   123ac:	cmn	r0, #1
   123b0:	bxne	lr
   123b4:	ldr	r0, [pc, #20]	; 123d0 <plt_init_ctx@@Base+0x2c>
   123b8:	ldr	r0, [pc, r0]
   123bc:	ldr	r1, [pc, #16]	; 123d4 <plt_init_ctx@@Base+0x30>
   123c0:	add	r1, pc, r1
   123c4:	str	r0, [r1]
   123c8:	bx	lr
   123cc:	andeq	r1, r1, r4, lsl sp
   123d0:	andeq	r1, r1, ip, ror #25
   123d4:	strdeq	r1, [r1], -ip

000123d8 <plt_get_lib@@Base>:
   123d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123dc:	add	fp, sp, #28
   123e0:	sub	sp, sp, #20
   123e4:	ldr	sl, [pc, #604]	; 12648 <plt_get_lib@@Base+0x270>
   123e8:	cmp	r1, #0
   123ec:	mov	r7, r0
   123f0:	mov	r2, #4
   123f4:	add	sl, pc, sl
   123f8:	movne	sl, r1
   123fc:	ldr	r1, [pc, #584]	; 1264c <plt_get_lib@@Base+0x274>
   12400:	mov	r0, sl
   12404:	add	r1, pc, r1
   12408:	bl	114e0 <strncmp@plt>
   1240c:	cmp	r0, #0
   12410:	beq	12478 <plt_get_lib@@Base+0xa0>
   12414:	ldr	r1, [pc, #572]	; 12658 <plt_get_lib@@Base+0x280>
   12418:	mov	r0, sl
   1241c:	mov	r2, #5
   12420:	add	r1, pc, r1
   12424:	bl	114e0 <strncmp@plt>
   12428:	cmp	r0, #0
   1242c:	beq	12480 <plt_get_lib@@Base+0xa8>
   12430:	ldr	r1, [pc, #548]	; 1265c <plt_get_lib@@Base+0x284>
   12434:	mov	r0, sl
   12438:	mov	r2, #4
   1243c:	add	r1, pc, r1
   12440:	bl	114e0 <strncmp@plt>
   12444:	cmp	r0, #0
   12448:	beq	12488 <plt_get_lib@@Base+0xb0>
   1244c:	ldr	r1, [pc, #524]	; 12660 <plt_get_lib@@Base+0x288>
   12450:	mov	r0, sl
   12454:	add	r1, pc, r1
   12458:	bl	11414 <strcmp@plt>
   1245c:	cmp	r0, #0
   12460:	bne	125e8 <plt_get_lib@@Base+0x210>
   12464:	ldr	sl, [pc, #504]	; 12664 <plt_get_lib@@Base+0x28c>
   12468:	mov	r9, #0
   1246c:	add	sl, pc, sl
   12470:	mov	r8, sl
   12474:	b	1249c <plt_get_lib@@Base+0xc4>
   12478:	mov	r9, #1
   1247c:	b	1248c <plt_get_lib@@Base+0xb4>
   12480:	mov	r9, #2
   12484:	b	1248c <plt_get_lib@@Base+0xb4>
   12488:	mov	r9, #3
   1248c:	mov	r0, sl
   12490:	mov	r1, #58	; 0x3a
   12494:	bl	1148c <strchr@plt>
   12498:	add	r8, r0, #1
   1249c:	mov	r0, r8
   124a0:	bl	11474 <strlen@plt>
   124a4:	ldr	r1, [pc, #420]	; 12650 <plt_get_lib@@Base+0x278>
   124a8:	mov	r4, r0
   124ac:	mov	r0, r8
   124b0:	add	r1, pc, r1
   124b4:	bl	11414 <strcmp@plt>
   124b8:	ldr	r7, [r7, #4]
   124bc:	mov	r5, r0
   124c0:	mov	r0, #0
   124c4:	cmp	r7, #0
   124c8:	beq	125d4 <plt_get_lib@@Base+0x1fc>
   124cc:	add	r0, r4, #8
   124d0:	orr	r1, r9, #2
   124d4:	str	r0, [fp, #-40]	; 0xffffffd8
   124d8:	add	r0, r0, #7
   124dc:	str	r1, [fp, #-36]	; 0xffffffdc
   124e0:	bic	r0, r0, #7
   124e4:	str	r0, [fp, #-44]	; 0xffffffd4
   124e8:	cmp	r9, #1
   124ec:	bne	1253c <plt_get_lib@@Base+0x164>
   124f0:	cmp	r5, #0
   124f4:	beq	12580 <plt_get_lib@@Base+0x1a8>
   124f8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   124fc:	mov	r6, sp
   12500:	sub	r4, sp, r0
   12504:	mov	sp, r4
   12508:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1250c:	ldr	r2, [pc, #360]	; 1267c <plt_get_lib@@Base+0x2a4>
   12510:	mov	r0, r4
   12514:	mov	r3, r8
   12518:	add	r2, pc, r2
   1251c:	bl	114b0 <snprintf@plt>
   12520:	ldr	r0, [r7, #4]
   12524:	mov	r1, r4
   12528:	bl	11408 <strstr@plt>
   1252c:	mov	sp, r6
   12530:	cmp	r0, #0
   12534:	beq	125c4 <plt_get_lib@@Base+0x1ec>
   12538:	b	125dc <plt_get_lib@@Base+0x204>
   1253c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12540:	cmp	r0, #2
   12544:	bne	12560 <plt_get_lib@@Base+0x188>
   12548:	ldr	r1, [r7, #4]
   1254c:	mov	r0, sl
   12550:	bl	11414 <strcmp@plt>
   12554:	cmp	r0, #0
   12558:	bne	125c4 <plt_get_lib@@Base+0x1ec>
   1255c:	b	125dc <plt_get_lib@@Base+0x204>
   12560:	cmp	r9, #3
   12564:	bne	125c4 <plt_get_lib@@Base+0x1ec>
   12568:	mov	r0, r7
   1256c:	mov	r1, r8
   12570:	bl	12680 <plt_get_lib@@Base+0x2a8>
   12574:	cmp	r0, #0
   12578:	beq	125c4 <plt_get_lib@@Base+0x1ec>
   1257c:	b	125dc <plt_get_lib@@Base+0x204>
   12580:	mov	r4, r5
   12584:	mov	r5, sl
   12588:	ldr	sl, [r7, #4]
   1258c:	ldr	r1, [pc, #192]	; 12654 <plt_get_lib@@Base+0x27c>
   12590:	mov	r0, sl
   12594:	add	r1, pc, r1
   12598:	bl	11408 <strstr@plt>
   1259c:	cmp	r0, #0
   125a0:	bne	125dc <plt_get_lib@@Base+0x204>
   125a4:	ldr	r1, [pc, #204]	; 12678 <plt_get_lib@@Base+0x2a0>
   125a8:	mov	r0, sl
   125ac:	add	r1, pc, r1
   125b0:	bl	11408 <strstr@plt>
   125b4:	mov	sl, r5
   125b8:	cmp	r0, #0
   125bc:	mov	r5, r4
   125c0:	bne	125dc <plt_get_lib@@Base+0x204>
   125c4:	ldr	r7, [r7, #12]
   125c8:	cmp	r7, #0
   125cc:	bne	124e8 <plt_get_lib@@Base+0x110>
   125d0:	mov	r0, #0
   125d4:	sub	sp, fp, #28
   125d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125dc:	mov	r0, r7
   125e0:	sub	sp, fp, #28
   125e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125e8:	mov	r0, sl
   125ec:	mov	r1, #58	; 0x3a
   125f0:	mov	r4, sl
   125f4:	bl	1148c <strchr@plt>
   125f8:	cmp	r0, #0
   125fc:	bne	12620 <plt_get_lib@@Base+0x248>
   12600:	ldr	r0, [pc, #104]	; 12670 <plt_get_lib@@Base+0x298>
   12604:	mov	r2, r4
   12608:	ldr	r0, [pc, r0]
   1260c:	ldr	r0, [r0]
   12610:	ldr	r1, [pc, #92]	; 12674 <plt_get_lib@@Base+0x29c>
   12614:	add	r1, pc, r1
   12618:	bl	11498 <fprintf@plt>
   1261c:	bl	114ec <abort@plt>
   12620:	rsb	r1, r4, #1
   12624:	mov	r3, r4
   12628:	add	r2, r1, r0
   1262c:	ldr	r0, [pc, #52]	; 12668 <plt_get_lib@@Base+0x290>
   12630:	ldr	r0, [pc, r0]
   12634:	ldr	r0, [r0]
   12638:	ldr	r1, [pc, #44]	; 1266c <plt_get_lib@@Base+0x294>
   1263c:	add	r1, pc, r1
   12640:	bl	11498 <fprintf@plt>
   12644:	bl	114ec <abort@plt>
   12648:	ldrdeq	r1, [r0], -r4
   1264c:	strdeq	r1, [r0], -ip
   12650:	andeq	r1, r0, r4, lsl r3
   12654:	andeq	r1, r0, r1, asr #3
   12658:	andeq	r1, r0, r5, ror #5
   1265c:	andeq	r1, r0, pc, asr #5
   12660:	andeq	r1, r0, r4, ror r2
   12664:	andeq	r1, r0, r8, ror #5
   12668:	andeq	r1, r1, r0, asr sl
   1266c:	ldrdeq	r1, [r0], -r4
   12670:	andeq	r1, r1, r8, ror sl
   12674:	andeq	r1, r0, lr, lsl r1
   12678:			; <UNDEFINED> instruction: 0x000011b2
   1267c:	andeq	r1, r0, pc, asr #4
   12680:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12684:	add	fp, sp, #28
   12688:	sub	sp, sp, #12
   1268c:	str	r1, [sp, #8]
   12690:	ldr	r1, [r0, #8]
   12694:	ldr	ip, [r0]
   12698:	mov	r0, #0
   1269c:	ldr	r4, [r1]
   126a0:	cmp	r4, #0
   126a4:	beq	126d4 <plt_get_lib@@Base+0x2fc>
   126a8:	add	r2, r1, #4
   126ac:	mov	r3, r4
   126b0:	cmp	r3, #6
   126b4:	beq	126f0 <plt_get_lib@@Base+0x318>
   126b8:	ldr	r3, [r2, #4]
   126bc:	add	r7, r2, #8
   126c0:	mov	r2, r7
   126c4:	cmp	r3, #0
   126c8:	bne	126b0 <plt_get_lib@@Base+0x2d8>
   126cc:	mov	lr, #0
   126d0:	b	126fc <plt_get_lib@@Base+0x324>
   126d4:	mov	r6, #0
   126d8:	mov	r2, #0
   126dc:	mov	lr, #0
   126e0:	mov	r8, #0
   126e4:	mov	r3, #0
   126e8:	mov	r5, #0
   126ec:	b	127fc <plt_get_lib@@Base+0x424>
   126f0:	ldr	lr, [r2]
   126f4:	cmp	lr, ip
   126f8:	addcc	lr, ip, lr
   126fc:	add	r2, r1, #4
   12700:	mov	r3, r4
   12704:	cmp	r3, #5
   12708:	beq	12728 <plt_get_lib@@Base+0x350>
   1270c:	ldr	r3, [r2, #4]
   12710:	add	r7, r2, #8
   12714:	mov	r2, r7
   12718:	cmp	r3, #0
   1271c:	bne	12704 <plt_get_lib@@Base+0x32c>
   12720:	mov	r8, #0
   12724:	b	12734 <plt_get_lib@@Base+0x35c>
   12728:	ldr	r8, [r2]
   1272c:	cmp	r8, ip
   12730:	addcc	r8, ip, r8
   12734:	add	r2, r1, #4
   12738:	mov	r3, r4
   1273c:	cmp	r3, #20
   12740:	beq	12760 <plt_get_lib@@Base+0x388>
   12744:	ldr	r3, [r2, #4]
   12748:	add	r7, r2, #8
   1274c:	mov	r2, r7
   12750:	cmp	r3, #0
   12754:	bne	1273c <plt_get_lib@@Base+0x364>
   12758:	mov	r2, #0
   1275c:	b	12764 <plt_get_lib@@Base+0x38c>
   12760:	ldr	r2, [r2]
   12764:	add	r3, r1, #4
   12768:	mov	r7, r4
   1276c:	cmp	r7, #23
   12770:	beq	12790 <plt_get_lib@@Base+0x3b8>
   12774:	ldr	r7, [r3, #4]
   12778:	add	r6, r3, #8
   1277c:	mov	r3, r6
   12780:	cmp	r7, #0
   12784:	bne	1276c <plt_get_lib@@Base+0x394>
   12788:	mov	r3, #0
   1278c:	b	1279c <plt_get_lib@@Base+0x3c4>
   12790:	ldr	r3, [r3]
   12794:	cmp	r3, ip
   12798:	addcc	r3, ip, r3
   1279c:	add	r6, r1, #4
   127a0:	mov	r7, r4
   127a4:	cmp	r7, #2
   127a8:	beq	127c8 <plt_get_lib@@Base+0x3f0>
   127ac:	ldr	r7, [r6, #4]
   127b0:	add	r5, r6, #8
   127b4:	mov	r6, r5
   127b8:	cmp	r7, #0
   127bc:	bne	127a4 <plt_get_lib@@Base+0x3cc>
   127c0:	mov	r6, #0
   127c4:	b	127cc <plt_get_lib@@Base+0x3f4>
   127c8:	ldr	r6, [r6]
   127cc:	add	r1, r1, #4
   127d0:	add	r5, r2, #2
   127d4:	cmp	r4, r5
   127d8:	beq	127f8 <plt_get_lib@@Base+0x420>
   127dc:	ldr	r4, [r1, #4]
   127e0:	add	r7, r1, #8
   127e4:	mov	r1, r7
   127e8:	cmp	r4, #0
   127ec:	bne	127d4 <plt_get_lib@@Base+0x3fc>
   127f0:	mov	r5, #0
   127f4:	b	127fc <plt_get_lib@@Base+0x424>
   127f8:	ldr	r5, [r1]
   127fc:	cmp	r5, #0
   12800:	cmpne	r6, #0
   12804:	beq	12820 <plt_get_lib@@Base+0x448>
   12808:	cmp	r3, #0
   1280c:	cmpne	r2, #0
   12810:	beq	12820 <plt_get_lib@@Base+0x448>
   12814:	cmp	lr, #0
   12818:	cmpne	r8, #0
   1281c:	bne	12828 <plt_get_lib@@Base+0x450>
   12820:	sub	sp, fp, #28
   12824:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12828:	cmp	r5, r6
   1282c:	str	ip, [sp, #4]
   12830:	bhi	128a0 <plt_get_lib@@Base+0x4c8>
   12834:	mov	r4, r8
   12838:	add	r8, r3, #4
   1283c:	mov	r9, #0
   12840:	mvn	sl, #-268435441	; 0xf000000f
   12844:	udiv	r6, r6, r5
   12848:	ldr	r0, [r8]
   1284c:	ldr	r1, [sp, #8]
   12850:	mov	r7, lr
   12854:	and	r0, sl, r0, lsr #4
   12858:	ldr	r0, [lr, r0]
   1285c:	add	r0, r4, r0
   12860:	bl	11414 <strcmp@plt>
   12864:	cmp	r0, #0
   12868:	beq	12884 <plt_get_lib@@Base+0x4ac>
   1286c:	add	r9, r9, #1
   12870:	add	r8, r8, r5
   12874:	mov	lr, r7
   12878:	cmp	r9, r6
   1287c:	bcc	12848 <plt_get_lib@@Base+0x470>
   12880:	b	128a0 <plt_get_lib@@Base+0x4c8>
   12884:	ldr	r0, [r8, #-4]
   12888:	cmp	r0, #0
   1288c:	beq	128a0 <plt_get_lib@@Base+0x4c8>
   12890:	ldr	r1, [sp, #4]
   12894:	add	r0, r0, r1
   12898:	sub	sp, fp, #28
   1289c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128a0:	mov	r0, #0
   128a4:	sub	sp, fp, #28
   128a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000128ac <plt_get_offsets@@Base>:
   128ac:	push	{r4, r5, fp, lr}
   128b0:	add	fp, sp, #8
   128b4:	mov	r4, r2
   128b8:	bl	12680 <plt_get_lib@@Base+0x2a8>
   128bc:	cmp	r0, #0
   128c0:	moveq	r0, #0
   128c4:	popeq	{r4, r5, fp, pc}
   128c8:	mov	r5, r0
   128cc:	mov	r0, #8
   128d0:	bl	13240 <mmk_malloc@@Base>
   128d4:	mov	r1, #1
   128d8:	str	r1, [r4]
   128dc:	mov	r1, #0
   128e0:	str	r5, [r0]
   128e4:	str	r1, [r0, #4]
   128e8:	pop	{r4, r5, fp, pc}

000128ec <plt_set_offsets@@Base>:
   128ec:	cmp	r1, #0
   128f0:	bxeq	lr
   128f4:	add	r0, r0, #4
   128f8:	ldr	r3, [r0]
   128fc:	ldr	ip, [r0, #-4]
   12900:	cmp	r3, #0
   12904:	ldreq	r3, [ip]
   12908:	streq	r3, [r0]
   1290c:	subs	r1, r1, #1
   12910:	add	r0, r0, #8
   12914:	str	r2, [ip]
   12918:	bne	128f8 <plt_set_offsets@@Base+0xc>
   1291c:	bx	lr

00012920 <plt_reset_offsets@@Base>:
   12920:	cmp	r1, #0
   12924:	bxeq	lr
   12928:	add	r0, r0, #4
   1292c:	ldmda	r0, {r2, r3}
   12930:	add	r0, r0, #8
   12934:	subs	r1, r1, #1
   12938:	str	r3, [r2]
   1293c:	bne	1292c <plt_reset_offsets@@Base+0xc>
   12940:	bx	lr

00012944 <plt_get_real_fn@@Base>:
   12944:	push	{r4, r5, r6, sl, fp, lr}
   12948:	add	fp, sp, #16
   1294c:	ldr	r6, [r0, #4]
   12950:	mov	r4, #0
   12954:	cmp	r6, #0
   12958:	beq	12980 <plt_get_real_fn@@Base+0x3c>
   1295c:	mov	r5, r1
   12960:	mov	r0, r6
   12964:	mov	r1, r5
   12968:	bl	12680 <plt_get_lib@@Base+0x2a8>
   1296c:	cmp	r0, #0
   12970:	bne	12988 <plt_get_real_fn@@Base+0x44>
   12974:	ldr	r6, [r6, #12]
   12978:	cmp	r6, #0
   1297c:	bne	12960 <plt_get_real_fn@@Base+0x1c>
   12980:	mov	r0, r4
   12984:	pop	{r4, r5, r6, sl, fp, pc}
   12988:	ldr	r4, [r0]
   1298c:	mov	r0, r4
   12990:	pop	{r4, r5, r6, sl, fp, pc}

00012994 <mmk_stub_context@@Base>:
   12994:	cmp	r0, #0
   12998:	ldrne	r0, [r0, #12]
   1299c:	moveq	r0, #0
   129a0:	bx	lr

000129a4 <mmk_stub_create_static@@Base>:
   129a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129a8:	add	fp, sp, #28
   129ac:	sub	sp, sp, #4
   129b0:	mov	r4, r0
   129b4:	ldr	r0, [pc, #284]	; 12ad8 <mmk_stub_create_static@@Base+0x134>
   129b8:	mov	r9, r3
   129bc:	mov	r8, r2
   129c0:	mov	r6, r1
   129c4:	add	r0, pc, r0
   129c8:	bl	114d4 <__tls_get_addr@plt>
   129cc:	mov	r7, #0
   129d0:	str	r7, [r0]
   129d4:	ldr	r0, [pc, #256]	; 12adc <mmk_stub_create_static@@Base+0x138>
   129d8:	add	r0, pc, r0
   129dc:	bl	114d4 <__tls_get_addr@plt>
   129e0:	strb	r7, [r0]
   129e4:	mov	r0, r6
   129e8:	bl	131d4 <mmk_strlen@@Base>
   129ec:	add	r0, r0, #1
   129f0:	bl	13240 <mmk_malloc@@Base>
   129f4:	cmp	r0, #0
   129f8:	beq	12ac0 <mmk_stub_create_static@@Base+0x11c>
   129fc:	mov	r1, r6
   12a00:	mov	r5, r0
   12a04:	bl	1316c <mmk_strcpy@@Base>
   12a08:	mov	r0, r5
   12a0c:	mov	r1, #64	; 0x40
   12a10:	bl	1313c <mmk_strchr@@Base>
   12a14:	cmp	r0, #0
   12a18:	movne	r1, #0
   12a1c:	strbne	r1, [r0], #1
   12a20:	movne	r7, r0
   12a24:	bl	11fc0 <mmk_plt_ctx@@Base>
   12a28:	mov	r1, r7
   12a2c:	bl	123d8 <plt_get_lib@@Base>
   12a30:	cmp	r0, #0
   12a34:	beq	12ac8 <mmk_stub_create_static@@Base+0x124>
   12a38:	mov	r1, #0
   12a3c:	mov	r2, sp
   12a40:	str	r1, [sp]
   12a44:	mov	r1, r5
   12a48:	bl	128ac <plt_get_offsets@@Base>
   12a4c:	cmp	r0, #0
   12a50:	mvn	r6, #1
   12a54:	movne	sl, r0
   12a58:	ldrne	r0, [sp]
   12a5c:	cmpne	r0, #0
   12a60:	beq	12acc <mmk_stub_create_static@@Base+0x128>
   12a64:	mov	r6, #0
   12a68:	str	r6, [r4, #32]
   12a6c:	str	r6, [r4, #36]	; 0x24
   12a70:	ldr	r1, [pc, #104]	; 12ae0 <mmk_stub_create_static@@Base+0x13c>
   12a74:	ldr	r1, [pc, r1]
   12a78:	ldr	r2, [pc, #100]	; 12ae4 <mmk_stub_create_static@@Base+0x140>
   12a7c:	ldr	r2, [pc, r2]
   12a80:	ldr	r3, [pc, #96]	; 12ae8 <mmk_stub_create_static@@Base+0x144>
   12a84:	ldr	r3, [pc, r3]
   12a88:	str	r2, [r4]
   12a8c:	stmib	r4, {r1, r3, r9}
   12a90:	add	r1, r4, #16
   12a94:	stm	r1, {r5, r7, sl}
   12a98:	str	r0, [r4, #28]
   12a9c:	mov	r0, r4
   12aa0:	mov	r1, r8
   12aa4:	bl	12c60 <create_trampoline@@Base>
   12aa8:	str	r0, [r4, #32]
   12aac:	mov	r2, r0
   12ab0:	mov	r0, sl
   12ab4:	ldr	r1, [sp]
   12ab8:	bl	128ec <plt_set_offsets@@Base>
   12abc:	b	12acc <mmk_stub_create_static@@Base+0x128>
   12ac0:	mvn	r6, #11
   12ac4:	b	12acc <mmk_stub_create_static@@Base+0x128>
   12ac8:	mvn	r6, #1
   12acc:	mov	r0, r6
   12ad0:	sub	sp, fp, #28
   12ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ad8:	andeq	r1, r1, r0, lsr #13
   12adc:	andeq	r1, r1, r4, lsl #13
   12ae0:	andeq	r1, r1, r4, lsl r6
   12ae4:	andeq	r1, r1, ip, lsr #12
   12ae8:	andeq	r1, r1, r4, lsl r6

00012aec <mmk_ctx_asked@@Base>:
   12aec:	push	{fp, lr}
   12af0:	mov	fp, sp
   12af4:	ldr	r0, [pc, #24]	; 12b14 <mmk_ctx_asked@@Base+0x28>
   12af8:	add	r0, pc, r0
   12afc:	bl	114d4 <__tls_get_addr@plt>
   12b00:	ldrb	r1, [r0]
   12b04:	mov	r2, #0
   12b08:	strb	r2, [r0]
   12b0c:	mov	r0, r1
   12b10:	pop	{fp, pc}
   12b14:	andeq	r1, r1, r4, ror #10

00012b18 <mmk_set_ctx@@Base>:
   12b18:	push	{r4, sl, fp, lr}
   12b1c:	add	fp, sp, #8
   12b20:	mov	r4, r0
   12b24:	ldr	r0, [pc, #12]	; 12b38 <mmk_set_ctx@@Base+0x20>
   12b28:	add	r0, pc, r0
   12b2c:	bl	114d4 <__tls_get_addr@plt>
   12b30:	str	r4, [r0]
   12b34:	pop	{r4, sl, fp, pc}
   12b38:	andeq	r1, r1, ip, lsr r5

00012b3c <mmk_ctx@@Base>:
   12b3c:	push	{fp, lr}
   12b40:	mov	fp, sp
   12b44:	ldr	r0, [pc, #12]	; 12b58 <mmk_ctx@@Base+0x1c>
   12b48:	add	r0, pc, r0
   12b4c:	bl	114d4 <__tls_get_addr@plt>
   12b50:	ldr	r0, [r0]
   12b54:	pop	{fp, pc}
   12b58:	andeq	r1, r1, ip, lsl r5

00012b5c <mmk_stub_create@@Base>:
   12b5c:	push	{r4, r5, r6, r7, fp, lr}
   12b60:	add	fp, sp, #16
   12b64:	mov	r5, r2
   12b68:	mov	r6, r1
   12b6c:	mov	r7, r0
   12b70:	bl	11f28 <mmk_init@@Base>
   12b74:	mov	r0, #40	; 0x28
   12b78:	bl	13240 <mmk_malloc@@Base>
   12b7c:	mov	r1, r7
   12b80:	mov	r2, r6
   12b84:	mov	r3, r5
   12b88:	mov	r4, r0
   12b8c:	bl	129a4 <mmk_stub_create_static@@Base>
   12b90:	cmn	r0, #1
   12b94:	ble	12ba0 <mmk_stub_create@@Base+0x44>
   12b98:	mov	r0, r4
   12b9c:	pop	{r4, r5, r6, r7, fp, pc}
   12ba0:	mov	r5, r0
   12ba4:	mov	r0, r4
   12ba8:	bl	13268 <mmk_free@@Base>
   12bac:	bl	114a4 <__errno_location@plt>
   12bb0:	mov	r4, #0
   12bb4:	str	r5, [r0]
   12bb8:	mov	r0, r4
   12bbc:	pop	{r4, r5, r6, r7, fp, pc}

00012bc0 <mmk_stub_destroy_static@@Base>:
   12bc0:	push	{r4, sl, fp, lr}
   12bc4:	add	fp, sp, #8
   12bc8:	mov	r4, r0
   12bcc:	ldr	r0, [r0, #24]
   12bd0:	ldr	r1, [r4, #28]
   12bd4:	bl	12920 <plt_reset_offsets@@Base>
   12bd8:	ldr	r0, [r4, #24]
   12bdc:	bl	13268 <mmk_free@@Base>
   12be0:	ldr	r0, [r4, #32]
   12be4:	bl	12d88 <destroy_trampoline@@Base>
   12be8:	ldr	r0, [r4, #16]
   12bec:	pop	{r4, sl, fp, lr}
   12bf0:	b	13268 <mmk_free@@Base>

00012bf4 <mmk_stub_destroy@@Base>:
   12bf4:	push	{r4, sl, fp, lr}
   12bf8:	add	fp, sp, #8
   12bfc:	mov	r4, r0
   12c00:	ldr	r0, [r0, #24]
   12c04:	ldr	r1, [r4, #28]
   12c08:	bl	12920 <plt_reset_offsets@@Base>
   12c0c:	ldr	r0, [r4, #24]
   12c10:	bl	13268 <mmk_free@@Base>
   12c14:	ldr	r0, [r4, #32]
   12c18:	bl	12d88 <destroy_trampoline@@Base>
   12c1c:	ldr	r0, [r4, #16]
   12c20:	bl	13268 <mmk_free@@Base>
   12c24:	mov	r0, r4
   12c28:	pop	{r4, sl, fp, lr}
   12c2c:	b	13268 <mmk_free@@Base>

00012c30 <mmk_ask_ctx@@Base>:
   12c30:	push	{r4, sl, fp, lr}
   12c34:	add	fp, sp, #8
   12c38:	mov	r4, r0
   12c3c:	ldr	r0, [pc, #24]	; 12c5c <mmk_ask_ctx@@Base+0x2c>
   12c40:	add	r0, pc, r0
   12c44:	bl	114d4 <__tls_get_addr@plt>
   12c48:	mov	r1, #1
   12c4c:	strb	r1, [r0]
   12c50:	mov	r0, r4
   12c54:	pop	{r4, sl, fp, lr}
   12c58:	bx	r0
   12c5c:	andeq	r1, r1, ip, lsl r4

00012c60 <create_trampoline@@Base>:
   12c60:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12c64:	add	fp, sp, #24
   12c68:	sub	sp, sp, #8
   12c6c:	ldr	r8, [pc, #236]	; 12d60 <create_trampoline@@Base+0x100>
   12c70:	mov	r7, r0
   12c74:	ldr	r8, [pc, r8]
   12c78:	ldr	r0, [pc, #228]	; 12d64 <create_trampoline@@Base+0x104>
   12c7c:	ldr	r0, [pc, r0]
   12c80:	sub	r5, r0, r8
   12c84:	cmp	r5, #4096	; 0x1000
   12c88:	bcs	12cf8 <create_trampoline@@Base+0x98>
   12c8c:	mov	r6, r1
   12c90:	mov	r0, #0
   12c94:	mvn	r1, #0
   12c98:	mov	r2, #7
   12c9c:	mov	r3, #34	; 0x22
   12ca0:	str	r1, [sp]
   12ca4:	str	r0, [sp, #4]
   12ca8:	mov	r0, #0
   12cac:	mov	r1, #4096	; 0x1000
   12cb0:	bl	11480 <mmap@plt>
   12cb4:	cmn	r0, #1
   12cb8:	beq	12d2c <create_trampoline@@Base+0xcc>
   12cbc:	str	r7, [r0]
   12cc0:	str	r6, [r0, #4]
   12cc4:	add	r6, r0, #8
   12cc8:	mov	r4, r0
   12ccc:	mov	r1, r8
   12cd0:	mov	r2, r5
   12cd4:	mov	r0, r6
   12cd8:	bl	11438 <memcpy@plt>
   12cdc:	mov	r0, r4
   12ce0:	mov	r1, #4096	; 0x1000
   12ce4:	mov	r2, #5
   12ce8:	bl	11420 <mprotect@plt>
   12cec:	mov	r0, r6
   12cf0:	sub	sp, fp, #24
   12cf4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12cf8:	ldr	r0, [pc, #104]	; 12d68 <create_trampoline@@Base+0x108>
   12cfc:	mov	r3, #45	; 0x2d
   12d00:	ldr	r0, [pc, r0]
   12d04:	ldr	r0, [r0]
   12d08:	ldr	r1, [pc, #92]	; 12d6c <create_trampoline@@Base+0x10c>
   12d0c:	add	r1, pc, r1
   12d10:	str	r1, [sp]
   12d14:	ldr	r1, [pc, #84]	; 12d70 <create_trampoline@@Base+0x110>
   12d18:	ldr	r2, [pc, #84]	; 12d74 <create_trampoline@@Base+0x114>
   12d1c:	add	r1, pc, r1
   12d20:	add	r2, pc, r2
   12d24:	bl	11498 <fprintf@plt>
   12d28:	bl	114ec <abort@plt>
   12d2c:	ldr	r0, [pc, #68]	; 12d78 <create_trampoline@@Base+0x118>
   12d30:	mov	r3, #69	; 0x45
   12d34:	ldr	r0, [pc, r0]
   12d38:	ldr	r0, [r0]
   12d3c:	ldr	r1, [pc, #56]	; 12d7c <create_trampoline@@Base+0x11c>
   12d40:	add	r1, pc, r1
   12d44:	str	r1, [sp]
   12d48:	ldr	r1, [pc, #48]	; 12d80 <create_trampoline@@Base+0x120>
   12d4c:	ldr	r2, [pc, #48]	; 12d84 <create_trampoline@@Base+0x124>
   12d50:	add	r1, pc, r1
   12d54:	add	r2, pc, r2
   12d58:	bl	11498 <fprintf@plt>
   12d5c:	bl	114ec <abort@plt>
   12d60:	andeq	r1, r1, r0, lsl r4
   12d64:	andeq	r1, r1, r0, lsl #8
   12d68:	andeq	r1, r1, r0, lsl #7
   12d6c:			; <UNDEFINED> instruction: 0x00000aba
   12d70:	andeq	r0, r0, r4, lsr #16
   12d74:	andeq	r0, r0, r1, asr sl
   12d78:	andeq	r1, r1, ip, asr #6
   12d7c:	andeq	r0, r0, r0, lsr #21
   12d80:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   12d84:	andeq	r0, r0, sp, lsl sl

00012d88 <destroy_trampoline@@Base>:
   12d88:	sub	r0, r0, #8
   12d8c:	mov	r1, #4096	; 0x1000
   12d90:	b	114bc <munmap@plt>

00012d94 <mmk_verify_set_times@@Base>:
   12d94:	push	{r4, sl, fp, lr}
   12d98:	add	fp, sp, #8
   12d9c:	mov	r4, r0
   12da0:	ldr	r0, [pc, #12]	; 12db4 <mmk_verify_set_times@@Base+0x20>
   12da4:	add	r0, pc, r0
   12da8:	bl	114d4 <__tls_get_addr@plt>
   12dac:	str	r4, [r0]
   12db0:	pop	{r4, sl, fp, pc}
   12db4:	andeq	r1, r1, r8, asr #5

00012db8 <mmk_verify_times@@Base>:
   12db8:	push	{r4, sl, fp, lr}
   12dbc:	add	fp, sp, #8
   12dc0:	mov	r4, r0
   12dc4:	ldr	r0, [pc, #120]	; 12e44 <mmk_verify_times@@Base+0x8c>
   12dc8:	add	r0, pc, r0
   12dcc:	bl	114d4 <__tls_get_addr@plt>
   12dd0:	ldr	r1, [r4, #4]
   12dd4:	ldr	r0, [r0]
   12dd8:	cmp	r1, #0
   12ddc:	beq	12dec <mmk_verify_times@@Base+0x34>
   12de0:	clz	r0, r0
   12de4:	lsr	r0, r0, #5
   12de8:	pop	{r4, sl, fp, pc}
   12dec:	ldr	r2, [r4, #8]
   12df0:	ldr	r1, [r4, #12]
   12df4:	orrs	r3, r2, r1
   12df8:	beq	12e24 <mmk_verify_times@@Base+0x6c>
   12dfc:	cmp	r0, r2
   12e00:	mov	r2, #0
   12e04:	mov	r3, #0
   12e08:	movwcs	r2, #1
   12e0c:	cmp	r1, #0
   12e10:	moveq	r1, r0
   12e14:	cmp	r0, r1
   12e18:	movwls	r3, #1
   12e1c:	and	r0, r2, r3
   12e20:	pop	{r4, sl, fp, pc}
   12e24:	ldr	r1, [r4, #20]
   12e28:	cmp	r1, #0
   12e2c:	beq	12e38 <mmk_verify_times@@Base+0x80>
   12e30:	pop	{r4, sl, fp, lr}
   12e34:	bx	r1
   12e38:	ldr	r1, [r4, #16]
   12e3c:	sub	r0, r1, r0
   12e40:	b	12de0 <mmk_verify_times@@Base+0x28>
   12e44:	andeq	r1, r1, r4, lsr #5

00012e48 <mmk_verify_register_call@@Base>:
   12e48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12e4c:	add	fp, sp, #24
   12e50:	sub	sp, sp, #8
   12e54:	mov	r9, r1
   12e58:	mov	r8, r0
   12e5c:	str	r1, [sp, #4]
   12e60:	bl	12b3c <mmk_ctx@@Base>
   12e64:	bl	12994 <mmk_stub_context@@Base>
   12e68:	mov	r5, r0
   12e6c:	ldr	r0, [r0, #8]
   12e70:	cmp	r0, #0
   12e74:	bne	12e94 <mmk_verify_register_call@@Base+0x4c>
   12e78:	mov	r0, #4096	; 0x1000
   12e7c:	mov	r4, #4096	; 0x1000
   12e80:	bl	13240 <mmk_malloc@@Base>
   12e84:	cmp	r0, #0
   12e88:	str	r0, [r5, #8]
   12e8c:	beq	12f88 <mmk_verify_register_call@@Base+0x140>
   12e90:	str	r4, [r5, #16]
   12e94:	mov	r0, r5
   12e98:	bl	12344 <mmk_mock_params_begin@@Base>
   12e9c:	cmp	r0, #0
   12ea0:	beq	12ee0 <mmk_verify_register_call@@Base+0x98>
   12ea4:	mov	r6, r0
   12ea8:	sub	r4, r9, #4
   12eac:	add	r7, r8, #4
   12eb0:	add	r0, r6, #4
   12eb4:	mov	r1, r7
   12eb8:	mov	r2, r4
   12ebc:	bl	13010 <mmk_memcmp@@Base>
   12ec0:	cmp	r0, #0
   12ec4:	beq	12f70 <mmk_verify_register_call@@Base+0x128>
   12ec8:	mov	r0, r5
   12ecc:	mov	r1, r6
   12ed0:	bl	12364 <mmk_mock_params_next@@Base>
   12ed4:	mov	r6, r0
   12ed8:	cmp	r0, #0
   12edc:	bne	12eb0 <mmk_verify_register_call@@Base+0x68>
   12ee0:	mov	r6, r5
   12ee4:	ldr	r2, [r6, #12]!
   12ee8:	ldr	r1, [r6, #4]
   12eec:	add	r0, r2, r9
   12ef0:	add	r0, r0, #4
   12ef4:	cmp	r0, r1
   12ef8:	bcs	12f04 <mmk_verify_register_call@@Base+0xbc>
   12efc:	ldr	r0, [r5, #8]
   12f00:	b	12f2c <mmk_verify_register_call@@Base+0xe4>
   12f04:	add	r1, r1, #4096	; 0x1000
   12f08:	cmp	r0, r1
   12f0c:	bcs	12f04 <mmk_verify_register_call@@Base+0xbc>
   12f10:	str	r1, [r5, #16]
   12f14:	ldr	r0, [r5, #8]
   12f18:	bl	13254 <mmk_realloc@@Base>
   12f1c:	cmp	r0, #0
   12f20:	str	r0, [r5, #8]
   12f24:	beq	12fbc <mmk_verify_register_call@@Base+0x174>
   12f28:	ldr	r2, [r6]
   12f2c:	add	r0, r0, r2
   12f30:	add	r1, sp, #4
   12f34:	mov	r2, #4
   12f38:	bl	13058 <mmk_memcpy@@Base>
   12f3c:	ldr	r0, [r5, #8]
   12f40:	ldr	r1, [r5, #12]
   12f44:	ldr	r2, [sp, #4]
   12f48:	add	r0, r0, r1
   12f4c:	mov	r1, r8
   12f50:	add	r0, r0, #4
   12f54:	bl	13058 <mmk_memcpy@@Base>
   12f58:	mov	r1, #1
   12f5c:	str	r1, [r0]
   12f60:	ldr	r1, [sp, #4]
   12f64:	ldr	r0, [r5, #12]
   12f68:	add	r1, r1, #4
   12f6c:	b	12f78 <mmk_verify_register_call@@Base+0x130>
   12f70:	ldr	r1, [r6]
   12f74:	mov	r0, #1
   12f78:	add	r0, r1, r0
   12f7c:	str	r0, [r6]
   12f80:	sub	sp, fp, #24
   12f84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12f88:	ldr	r0, [pc, #96]	; 12ff0 <mmk_verify_register_call@@Base+0x1a8>
   12f8c:	mov	r3, #79	; 0x4f
   12f90:	ldr	r0, [pc, r0]
   12f94:	ldr	r0, [r0]
   12f98:	ldr	r1, [pc, #84]	; 12ff4 <mmk_verify_register_call@@Base+0x1ac>
   12f9c:	add	r1, pc, r1
   12fa0:	str	r1, [sp]
   12fa4:	ldr	r1, [pc, #76]	; 12ff8 <mmk_verify_register_call@@Base+0x1b0>
   12fa8:	ldr	r2, [pc, #76]	; 12ffc <mmk_verify_register_call@@Base+0x1b4>
   12fac:	add	r1, pc, r1
   12fb0:	add	r2, pc, r2
   12fb4:	bl	11498 <fprintf@plt>
   12fb8:	bl	114ec <abort@plt>
   12fbc:	ldr	r0, [pc, #60]	; 13000 <mmk_verify_register_call@@Base+0x1b8>
   12fc0:	mov	r3, #91	; 0x5b
   12fc4:	ldr	r0, [pc, r0]
   12fc8:	ldr	r0, [r0]
   12fcc:	ldr	r1, [pc, #48]	; 13004 <mmk_verify_register_call@@Base+0x1bc>
   12fd0:	add	r1, pc, r1
   12fd4:	str	r1, [sp]
   12fd8:	ldr	r1, [pc, #40]	; 13008 <mmk_verify_register_call@@Base+0x1c0>
   12fdc:	ldr	r2, [pc, #40]	; 1300c <mmk_verify_register_call@@Base+0x1c4>
   12fe0:	add	r1, pc, r1
   12fe4:	add	r2, pc, r2
   12fe8:	bl	11498 <fprintf@plt>
   12fec:	bl	114ec <abort@plt>
   12ff0:	strdeq	r1, [r1], -r0
   12ff4:	andeq	r0, r0, r7, lsr #17
   12ff8:	muleq	r0, r4, r5
   12ffc:	andeq	r0, r0, r2, asr #16
   13000:	strheq	r1, [r1], -ip
   13004:	andeq	r0, r0, r3, ror r8
   13008:	andeq	r0, r0, r0, ror #10
   1300c:	andeq	r0, r0, lr, lsl #16

00013010 <mmk_memcmp@@Base>:
   13010:	push	{fp, lr}
   13014:	mov	fp, sp
   13018:	mov	lr, r0
   1301c:	mov	r0, #0
   13020:	cmp	r2, #0
   13024:	popeq	{fp, pc}
   13028:	ldrb	ip, [r1]
   1302c:	ldrb	r3, [lr]
   13030:	cmp	r3, ip
   13034:	bne	1304c <mmk_memcmp@@Base+0x3c>
   13038:	subs	r2, r2, #1
   1303c:	add	r1, r1, #1
   13040:	add	lr, lr, #1
   13044:	bne	13028 <mmk_memcmp@@Base+0x18>
   13048:	pop	{fp, pc}
   1304c:	mov	r0, #1
   13050:	mvncc	r0, #0
   13054:	pop	{fp, pc}

00013058 <mmk_memcpy@@Base>:
   13058:	push	{r4, r5, r6, sl, fp, lr}
   1305c:	add	fp, sp, #16
   13060:	cmp	r2, #0
   13064:	beq	130d4 <mmk_memcpy@@Base+0x7c>
   13068:	cmp	r2, #15
   1306c:	bls	130b8 <mmk_memcpy@@Base+0x60>
   13070:	add	r3, r1, r2
   13074:	cmp	r3, r0
   13078:	addhi	r3, r0, r2
   1307c:	cmphi	r3, r1
   13080:	bhi	130b8 <mmk_memcpy@@Base+0x60>
   13084:	bic	r4, r2, #15
   13088:	mov	r6, r0
   1308c:	sub	r3, r2, r4
   13090:	add	lr, r1, r4
   13094:	add	ip, r0, r4
   13098:	mov	r5, r4
   1309c:	vld1.8	{d16-d17}, [r1]!
   130a0:	subs	r5, r5, #16
   130a4:	vst1.8	{d16-d17}, [r6]!
   130a8:	bne	1309c <mmk_memcpy@@Base+0x44>
   130ac:	cmp	r4, r2
   130b0:	popeq	{r4, r5, r6, sl, fp, pc}
   130b4:	b	130c4 <mmk_memcpy@@Base+0x6c>
   130b8:	mov	ip, r0
   130bc:	mov	lr, r1
   130c0:	mov	r3, r2
   130c4:	ldrb	r1, [lr], #1
   130c8:	subs	r3, r3, #1
   130cc:	strb	r1, [ip], #1
   130d0:	bne	130c4 <mmk_memcpy@@Base+0x6c>
   130d4:	pop	{r4, r5, r6, sl, fp, pc}

000130d8 <mmk_strneq@@Base>:
   130d8:	push	{fp, lr}
   130dc:	mov	fp, sp
   130e0:	ldrb	ip, [r0]
   130e4:	cmp	ip, #0
   130e8:	beq	13124 <mmk_strneq@@Base+0x4c>
   130ec:	add	lr, r0, #1
   130f0:	cmp	r2, #0
   130f4:	ldrbne	r3, [r1]
   130f8:	cmpne	r3, #0
   130fc:	beq	13124 <mmk_strneq@@Base+0x4c>
   13100:	uxtb	r0, ip
   13104:	cmp	r0, r3
   13108:	movne	r0, #0
   1310c:	popne	{fp, pc}
   13110:	ldrb	ip, [lr], #1
   13114:	sub	r2, r2, #1
   13118:	add	r1, r1, #1
   1311c:	cmp	ip, #0
   13120:	bne	130f0 <mmk_strneq@@Base+0x18>
   13124:	cmp	r2, #0
   13128:	moveq	r0, #1
   1312c:	ldrbne	r0, [r1]
   13130:	clzne	r0, r0
   13134:	lsrne	r0, r0, #5
   13138:	pop	{fp, pc}

0001313c <mmk_strchr@@Base>:
   1313c:	ldrb	r3, [r0]
   13140:	mov	r2, r0
   13144:	mov	r0, #0
   13148:	b	13150 <mmk_strchr@@Base+0x14>
   1314c:	ldrb	r3, [r2, #1]!
   13150:	cmp	r3, #0
   13154:	bxeq	lr
   13158:	uxtb	r3, r3
   1315c:	cmp	r3, r1
   13160:	bne	1314c <mmk_strchr@@Base+0x10>
   13164:	mov	r0, r2
   13168:	bx	lr

0001316c <mmk_strcpy@@Base>:
   1316c:	ldrb	r2, [r1]
   13170:	cmp	r2, #0
   13174:	beq	1318c <mmk_strcpy@@Base+0x20>
   13178:	add	r1, r1, #1
   1317c:	strb	r2, [r0], #1
   13180:	ldrb	r2, [r1], #1
   13184:	cmp	r2, #0
   13188:	bne	1317c <mmk_strcpy@@Base+0x10>
   1318c:	mov	r1, #0
   13190:	strb	r1, [r0]
   13194:	bx	lr

00013198 <mmk_strncpy@@Base>:
   13198:	cmp	r2, #0
   1319c:	ldrbne	r3, [r1]
   131a0:	cmpne	r3, #0
   131a4:	beq	131c8 <mmk_strncpy@@Base+0x30>
   131a8:	add	r1, r1, #1
   131ac:	rsb	r2, r2, #1
   131b0:	cmp	r2, #0
   131b4:	strb	r3, [r0], #1
   131b8:	ldrbne	r3, [r1], #1
   131bc:	addne	r2, r2, #1
   131c0:	cmpne	r3, #0
   131c4:	bne	131b0 <mmk_strncpy@@Base+0x18>
   131c8:	mov	r1, #0
   131cc:	strb	r1, [r0]
   131d0:	bx	lr

000131d4 <mmk_strlen@@Base>:
   131d4:	ldrb	r1, [r0]
   131d8:	cmp	r1, #0
   131dc:	moveq	r0, #0
   131e0:	bxeq	lr
   131e4:	add	r1, r0, #1
   131e8:	mov	r0, #0
   131ec:	ldrb	r2, [r1, r0]
   131f0:	add	r0, r0, #1
   131f4:	cmp	r2, #0
   131f8:	bne	131ec <mmk_strlen@@Base+0x18>
   131fc:	bx	lr

00013200 <mmk_isspace@@Base>:
   13200:	sub	r2, r0, #9
   13204:	cmp	r2, #23
   13208:	bhi	1322c <mmk_isspace@@Base+0x2c>
   1320c:	movw	r3, #17
   13210:	mov	ip, #1
   13214:	mov	r1, #1
   13218:	movt	r3, #128	; 0x80
   1321c:	tst	r3, ip, lsl r2
   13220:	beq	1322c <mmk_isspace@@Base+0x2c>
   13224:	mov	r0, r1
   13228:	bx	lr
   1322c:	sub	r0, r0, #10
   13230:	clz	r0, r0
   13234:	lsr	r1, r0, #5
   13238:	mov	r0, r1
   1323c:	bx	lr

00013240 <mmk_malloc@@Base>:
   13240:	ldr	r1, [pc, #8]	; 13250 <mmk_malloc@@Base+0x10>
   13244:	ldr	r1, [pc, r1]
   13248:	ldr	r1, [r1]
   1324c:	bx	r1
   13250:	andeq	r0, r1, ip, asr lr

00013254 <mmk_realloc@@Base>:
   13254:	ldr	r2, [pc, #8]	; 13264 <mmk_realloc@@Base+0x10>
   13258:	ldr	r2, [pc, r2]
   1325c:	ldr	r2, [r2]
   13260:	bx	r2
   13264:	andeq	r0, r1, r4, lsr lr

00013268 <mmk_free@@Base>:
   13268:	ldr	r1, [pc, #8]	; 13278 <mmk_free@@Base+0x10>
   1326c:	ldr	r1, [pc, r1]
   13270:	ldr	r1, [r1]
   13274:	bx	r1
   13278:	andeq	r0, r1, r0, lsr lr

0001327c <mmk_init_vital_functions@@Base>:
   1327c:	push	{r4, sl, fp, lr}
   13280:	add	fp, sp, #8
   13284:	sub	sp, sp, #8
   13288:	mov	r4, r0
   1328c:	mov	r0, #0
   13290:	bl	11450 <malloc@plt>
   13294:	mov	r1, #0
   13298:	bl	11444 <realloc@plt>
   1329c:	bl	1142c <free@plt>
   132a0:	ldr	r1, [pc, #260]	; 133ac <mmk_init_vital_functions@@Base+0x130>
   132a4:	mov	r0, r4
   132a8:	add	r1, pc, r1
   132ac:	bl	12944 <plt_get_real_fn@@Base>
   132b0:	ldr	r1, [pc, #248]	; 133b0 <mmk_init_vital_functions@@Base+0x134>
   132b4:	cmp	r0, #0
   132b8:	ldr	r1, [pc, r1]
   132bc:	str	r0, [r1]
   132c0:	beq	13344 <mmk_init_vital_functions@@Base+0xc8>
   132c4:	ldr	r1, [pc, #232]	; 133b4 <mmk_init_vital_functions@@Base+0x138>
   132c8:	mov	r0, r4
   132cc:	add	r1, pc, r1
   132d0:	bl	12944 <plt_get_real_fn@@Base>
   132d4:	ldr	r1, [pc, #220]	; 133b8 <mmk_init_vital_functions@@Base+0x13c>
   132d8:	cmp	r0, #0
   132dc:	ldr	r1, [pc, r1]
   132e0:	str	r0, [r1]
   132e4:	beq	13378 <mmk_init_vital_functions@@Base+0xfc>
   132e8:	ldr	r1, [pc, #204]	; 133bc <mmk_init_vital_functions@@Base+0x140>
   132ec:	mov	r0, r4
   132f0:	add	r1, pc, r1
   132f4:	bl	12944 <plt_get_real_fn@@Base>
   132f8:	ldr	r1, [pc, #192]	; 133c0 <mmk_init_vital_functions@@Base+0x144>
   132fc:	cmp	r0, #0
   13300:	ldr	r1, [pc, r1]
   13304:	str	r0, [r1]
   13308:	subne	sp, fp, #8
   1330c:	popne	{r4, sl, fp, pc}
   13310:	ldr	r0, [pc, #204]	; 133e4 <mmk_init_vital_functions@@Base+0x168>
   13314:	mov	r3, #90	; 0x5a
   13318:	ldr	r0, [pc, r0]
   1331c:	ldr	r0, [r0]
   13320:	ldr	r1, [pc, #192]	; 133e8 <mmk_init_vital_functions@@Base+0x16c>
   13324:	add	r1, pc, r1
   13328:	str	r1, [sp]
   1332c:	ldr	r1, [pc, #184]	; 133ec <mmk_init_vital_functions@@Base+0x170>
   13330:	ldr	r2, [pc, #184]	; 133f0 <mmk_init_vital_functions@@Base+0x174>
   13334:	add	r1, pc, r1
   13338:	add	r2, pc, r2
   1333c:	bl	11498 <fprintf@plt>
   13340:	bl	114ec <abort@plt>
   13344:	ldr	r0, [pc, #120]	; 133c4 <mmk_init_vital_functions@@Base+0x148>
   13348:	mov	r3, #88	; 0x58
   1334c:	ldr	r0, [pc, r0]
   13350:	ldr	r0, [r0]
   13354:	ldr	r1, [pc, #108]	; 133c8 <mmk_init_vital_functions@@Base+0x14c>
   13358:	add	r1, pc, r1
   1335c:	str	r1, [sp]
   13360:	ldr	r1, [pc, #100]	; 133cc <mmk_init_vital_functions@@Base+0x150>
   13364:	ldr	r2, [pc, #100]	; 133d0 <mmk_init_vital_functions@@Base+0x154>
   13368:	add	r1, pc, r1
   1336c:	add	r2, pc, r2
   13370:	bl	11498 <fprintf@plt>
   13374:	bl	114ec <abort@plt>
   13378:	ldr	r0, [pc, #84]	; 133d4 <mmk_init_vital_functions@@Base+0x158>
   1337c:	mov	r3, #89	; 0x59
   13380:	ldr	r0, [pc, r0]
   13384:	ldr	r0, [r0]
   13388:	ldr	r1, [pc, #72]	; 133d8 <mmk_init_vital_functions@@Base+0x15c>
   1338c:	add	r1, pc, r1
   13390:	str	r1, [sp]
   13394:	ldr	r1, [pc, #64]	; 133dc <mmk_init_vital_functions@@Base+0x160>
   13398:	ldr	r2, [pc, #64]	; 133e0 <mmk_init_vital_functions@@Base+0x164>
   1339c:	add	r1, pc, r1
   133a0:	add	r2, pc, r2
   133a4:	bl	11498 <fprintf@plt>
   133a8:	bl	114ec <abort@plt>
   133ac:	andeq	r0, r0, fp, lsr #11
   133b0:	andeq	r0, r1, r8, ror #27
   133b4:	andeq	r0, r0, r5, lsl r6
   133b8:			; <UNDEFINED> instruction: 0x00010db0
   133bc:	andeq	r0, r0, r1, lsr r6
   133c0:	muleq	r1, ip, sp
   133c4:	andeq	r0, r1, r4, lsr sp
   133c8:	andeq	r0, r0, r3, asr r5
   133cc:	ldrdeq	r0, [r0], -r8
   133d0:	andeq	r0, r0, lr, ror #9
   133d4:	andeq	r0, r1, r0, lsl #26
   133d8:	andeq	r0, r0, sp, asr r5
   133dc:	andeq	r0, r0, r4, lsr #3
   133e0:			; <UNDEFINED> instruction: 0x000004ba
   133e4:	andeq	r0, r1, r8, ror #26
   133e8:	andeq	r0, r0, r2, lsl #12
   133ec:	andeq	r0, r0, ip, lsl #4
   133f0:	andeq	r0, r0, r2, lsr #10

000133f4 <mmk_when_init@@Base>:
   133f4:	push	{r4, sl, fp, lr}
   133f8:	add	fp, sp, #8
   133fc:	mov	r4, r0
   13400:	ldr	r0, [pc, #12]	; 13414 <mmk_when_init@@Base+0x20>
   13404:	add	r0, pc, r0
   13408:	bl	114d4 <__tls_get_addr@plt>
   1340c:	str	r4, [r0]
   13410:	pop	{r4, sl, fp, pc}
   13414:	andeq	r0, r1, r0, ror ip

00013418 <mmk_when_get_result@@Base>:
   13418:	push	{fp, lr}
   1341c:	mov	fp, sp
   13420:	ldr	r0, [pc, #12]	; 13434 <mmk_when_get_result@@Base+0x1c>
   13424:	add	r0, pc, r0
   13428:	bl	114d4 <__tls_get_addr@plt>
   1342c:	ldr	r0, [r0]
   13430:	pop	{fp, pc}
   13434:	andeq	r0, r1, r0, asr ip

00013438 <mmk_when_impl@@Base>:
   13438:	push	{r4, r5, fp, lr}
   1343c:	add	fp, sp, #8
   13440:	mov	r4, r1
   13444:	mov	r5, r0
   13448:	bl	120b8 <mmk_matcher_ctx@@Base>
   1344c:	str	r0, [r4]
   13450:	ldr	r0, [r5]
   13454:	str	r0, [r4, #4]
   13458:	str	r4, [r5]
   1345c:	pop	{r4, r5, fp, pc}

00013460 <mmk_trampoline@@Base>:
   13460:	sub	ip, pc, #8
   13464:	push	{r0, r1, r2, r3}
   13468:	push	{ip, lr}
   1346c:	ldr	r0, [ip, #-8]
   13470:	ldr	ip, [r0, #4]
   13474:	blx	ip
   13478:	pop	{ip, lr}
   1347c:	push	{ip, lr}
   13480:	ldr	ip, [ip, #-8]
   13484:	ldr	ip, [ip]
   13488:	blx	ip
   1348c:	cmp	r0, #0
   13490:	bne	134a0 <mmk_trampoline@@Base+0x40>
   13494:	pop	{ip, lr}
   13498:	pop	{r0, r1, r2, r3}
   1349c:	ldr	pc, [ip, #-4]
   134a0:	pop	{ip, lr}
   134a4:	pop	{r0, r1, r2, r3}
   134a8:	push	{ip, lr}
   134ac:	ldr	ip, [ip, #-8]
   134b0:	ldr	ip, [ip, #8]
   134b4:	blx	ip
   134b8:	pop	{ip, pc}

000134bc <mmk_trampoline_end@@Base>:
   134bc:	nop	{0}

000134c0 <__libc_csu_init@@Base>:
   134c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   134c4:	mov	r7, r0
   134c8:	ldr	r6, [pc, #72]	; 13518 <__libc_csu_init@@Base+0x58>
   134cc:	ldr	r5, [pc, #72]	; 1351c <__libc_csu_init@@Base+0x5c>
   134d0:	add	r6, pc, r6
   134d4:	add	r5, pc, r5
   134d8:	sub	r6, r6, r5
   134dc:	mov	r8, r1
   134e0:	mov	r9, r2
   134e4:	bl	113e8 <strstr@plt-0x20>
   134e8:	asrs	r6, r6, #2
   134ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   134f0:	mov	r4, #0
   134f4:	add	r4, r4, #1
   134f8:	ldr	r3, [r5], #4
   134fc:	mov	r2, r9
   13500:	mov	r1, r8
   13504:	mov	r0, r7
   13508:	blx	r3
   1350c:	cmp	r6, r4
   13510:	bne	134f4 <__libc_csu_init@@Base+0x34>
   13514:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13518:	andeq	r0, r1, ip, lsl sl
   1351c:	andeq	r0, r1, r4, lsl sl

00013520 <__libc_csu_fini@@Base>:
   13520:	bx	lr

Disassembly of section .fini:

00013524 <.fini>:
   13524:	push	{r3, lr}
   13528:	pop	{r3, pc}
