
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

000117f0 <.init>:
   117f0:	push	{r3, lr}
   117f4:	bl	119fc <_start@@Base+0x3c>
   117f8:	pop	{r3, pc}

Disassembly of section .plt:

000117fc <fdopen@plt-0x14>:
   117fc:	push	{lr}		; (str lr, [sp, #-4]!)
   11800:	ldr	lr, [pc, #4]	; 1180c <fdopen@plt-0x4>
   11804:	add	lr, pc, lr
   11808:	ldr	pc, [lr, #8]!
   1180c:	strdeq	sp, [r1], -r4

00011810 <fdopen@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #118784	; 0x1d000
   11818:	ldr	pc, [ip, #2036]!	; 0x7f4

0001181c <raise@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #118784	; 0x1d000
   11824:	ldr	pc, [ip, #2028]!	; 0x7ec

00011828 <setbuf@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #118784	; 0x1d000
   11830:	ldr	pc, [ip, #2020]!	; 0x7e4

00011834 <printf@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #118784	; 0x1d000
   1183c:	ldr	pc, [ip, #2012]!	; 0x7dc

00011840 <fflush@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #118784	; 0x1d000
   11848:	ldr	pc, [ip, #2004]!	; 0x7d4

0001184c <free@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #118784	; 0x1d000
   11854:	ldr	pc, [ip, #1996]!	; 0x7cc

00011858 <memcpy@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #118784	; 0x1d000
   11860:	ldr	pc, [ip, #1988]!	; 0x7c4

00011864 <ftell@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #118784	; 0x1d000
   1186c:	ldr	pc, [ip, #1980]!	; 0x7bc

00011870 <fwrite@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #118784	; 0x1d000
   11878:	ldr	pc, [ip, #1972]!	; 0x7b4

0001187c <strcpy@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #118784	; 0x1d000
   11884:	ldr	pc, [ip, #1964]!	; 0x7ac

00011888 <fread@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #118784	; 0x1d000
   11890:	ldr	pc, [ip, #1956]!	; 0x7a4

00011894 <open64@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #118784	; 0x1d000
   1189c:	ldr	pc, [ip, #1948]!	; 0x79c

000118a0 <getenv@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #118784	; 0x1d000
   118a8:	ldr	pc, [ip, #1940]!	; 0x794

000118ac <puts@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #118784	; 0x1d000
   118b4:	ldr	pc, [ip, #1932]!	; 0x78c

000118b8 <malloc@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #118784	; 0x1d000
   118c0:	ldr	pc, [ip, #1924]!	; 0x784

000118c4 <__libc_start_main@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #118784	; 0x1d000
   118cc:	ldr	pc, [ip, #1916]!	; 0x77c

000118d0 <__gmon_start__@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #118784	; 0x1d000
   118d8:	ldr	pc, [ip, #1908]!	; 0x774

000118dc <getpid@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #118784	; 0x1d000
   118e4:	ldr	pc, [ip, #1900]!	; 0x76c

000118e8 <exit@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #118784	; 0x1d000
   118f0:	ldr	pc, [ip, #1892]!	; 0x764

000118f4 <strlen@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #118784	; 0x1d000
   118fc:	ldr	pc, [ip, #1884]!	; 0x75c

00011900 <fprintf@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #118784	; 0x1d000
   11908:	ldr	pc, [ip, #1876]!	; 0x754

0001190c <__errno_location@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #118784	; 0x1d000
   11914:	ldr	pc, [ip, #1868]!	; 0x74c

00011918 <mkdir@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #118784	; 0x1d000
   11920:	ldr	pc, [ip, #1860]!	; 0x744

00011924 <memset@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #118784	; 0x1d000
   1192c:	ldr	pc, [ip, #1852]!	; 0x73c

00011930 <access@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #118784	; 0x1d000
   11938:	ldr	pc, [ip, #1844]!	; 0x734

0001193c <fclose@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #118784	; 0x1d000
   11944:	ldr	pc, [ip, #1836]!	; 0x72c

00011948 <strnlen@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #118784	; 0x1d000
   11950:	ldr	pc, [ip, #1828]!	; 0x724

00011954 <fcntl64@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #118784	; 0x1d000
   1195c:	ldr	pc, [ip, #1820]!	; 0x71c

00011960 <vfprintf@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #118784	; 0x1d000
   11968:	ldr	pc, [ip, #1812]!	; 0x714

0001196c <atoi@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #118784	; 0x1d000
   11974:	ldr	pc, [ip, #1804]!	; 0x70c

00011978 <fopen64@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #118784	; 0x1d000
   11980:	ldr	pc, [ip, #1796]!	; 0x704

00011984 <fseek@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #118784	; 0x1d000
   1198c:	ldr	pc, [ip, #1788]!	; 0x6fc

00011990 <strncmp@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #118784	; 0x1d000
   11998:	ldr	pc, [ip, #1780]!	; 0x6f4

0001199c <abort@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #118784	; 0x1d000
   119a4:	ldr	pc, [ip, #1772]!	; 0x6ec

000119a8 <close@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #118784	; 0x1d000
   119b0:	ldr	pc, [ip, #1764]!	; 0x6e4

000119b4 <__assert_fail@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #118784	; 0x1d000
   119bc:	ldr	pc, [ip, #1756]!	; 0x6dc

Disassembly of section .text:

000119c0 <_start@@Base>:
   119c0:	mov	fp, #0
   119c4:	mov	lr, #0
   119c8:	pop	{r1}		; (ldr r1, [sp], #4)
   119cc:	mov	r2, sp
   119d0:	push	{r2}		; (str r2, [sp, #-4]!)
   119d4:	push	{r0}		; (str r0, [sp, #-4]!)
   119d8:	ldr	ip, [pc, #16]	; 119f0 <_start@@Base+0x30>
   119dc:	push	{ip}		; (str ip, [sp, #-4]!)
   119e0:	ldr	r0, [pc, #12]	; 119f4 <_start@@Base+0x34>
   119e4:	ldr	r3, [pc, #12]	; 119f8 <_start@@Base+0x38>
   119e8:	bl	118c4 <__libc_start_main@plt>
   119ec:	bl	1199c <abort@plt>
   119f0:	andeq	sp, r1, r4, lsl #27
   119f4:	andeq	r6, r1, r4, lsl r8
   119f8:	andeq	sp, r1, r4, lsr #26
   119fc:	ldr	r3, [pc, #20]	; 11a18 <_start@@Base+0x58>
   11a00:	ldr	r2, [pc, #20]	; 11a1c <_start@@Base+0x5c>
   11a04:	add	r3, pc, r3
   11a08:	ldr	r2, [r3, r2]
   11a0c:	cmp	r2, #0
   11a10:	bxeq	lr
   11a14:	b	118d0 <__gmon_start__@plt>
   11a18:	strdeq	sp, [r1], -r4
   11a1c:	andeq	r0, r0, r8, lsr #1
   11a20:	ldr	r0, [pc, #24]	; 11a40 <_start@@Base+0x80>
   11a24:	ldr	r3, [pc, #24]	; 11a44 <_start@@Base+0x84>
   11a28:	cmp	r3, r0
   11a2c:	bxeq	lr
   11a30:	ldr	r3, [pc, #16]	; 11a48 <_start@@Base+0x88>
   11a34:	cmp	r3, #0
   11a38:	bxeq	lr
   11a3c:	bx	r3
   11a40:	andeq	pc, r2, ip, lsl #19
   11a44:	andeq	pc, r2, ip, lsl #19
   11a48:	andeq	r0, r0, r0
   11a4c:	ldr	r0, [pc, #36]	; 11a78 <_start@@Base+0xb8>
   11a50:	ldr	r1, [pc, #36]	; 11a7c <_start@@Base+0xbc>
   11a54:	sub	r1, r1, r0
   11a58:	asr	r1, r1, #2
   11a5c:	add	r1, r1, r1, lsr #31
   11a60:	asrs	r1, r1, #1
   11a64:	bxeq	lr
   11a68:	ldr	r3, [pc, #16]	; 11a80 <_start@@Base+0xc0>
   11a6c:	cmp	r3, #0
   11a70:	bxeq	lr
   11a74:	bx	r3
   11a78:	andeq	pc, r2, ip, lsl #19
   11a7c:	andeq	pc, r2, ip, lsl #19
   11a80:	andeq	r0, r0, r0
   11a84:	push	{r4, lr}
   11a88:	ldr	r4, [pc, #24]	; 11aa8 <_start@@Base+0xe8>
   11a8c:	ldrb	r3, [r4]
   11a90:	cmp	r3, #0
   11a94:	popne	{r4, pc}
   11a98:	bl	11a20 <_start@@Base+0x60>
   11a9c:	mov	r3, #1
   11aa0:	strb	r3, [r4]
   11aa4:	pop	{r4, pc}
   11aa8:	muleq	r2, r0, r9
   11aac:	b	11a4c <_start@@Base+0x8c>

00011ab0 <next@@Base>:
   11ab0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11ab4:	strd	r6, [sp, #8]
   11ab8:	strd	r8, [sp, #16]
   11abc:	str	fp, [sp, #24]
   11ac0:	str	lr, [sp, #28]
   11ac4:	add	fp, sp, #28
   11ac8:	sub	sp, sp, #40	; 0x28
   11acc:	str	r0, [fp, #-32]	; 0xffffffe0
   11ad0:	ldr	ip, [pc, #728]	; 11db0 <next@@Base+0x300>
   11ad4:	add	ip, pc, ip
   11ad8:	ldr	r3, [pc, #724]	; 11db4 <next@@Base+0x304>
   11adc:	add	r3, pc, r3
   11ae0:	ldrd	r2, [r3]
   11ae4:	adds	r4, r2, #1
   11ae8:	adc	r5, r3, #0
   11aec:	ldr	r3, [pc, #708]	; 11db8 <next@@Base+0x308>
   11af0:	add	r3, pc, r3
   11af4:	strd	r4, [r3]
   11af8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11afc:	ldr	r3, [pc, #696]	; 11dbc <next@@Base+0x30c>
   11b00:	ldr	r3, [ip, r3]
   11b04:	str	r2, [r3]
   11b08:	ldr	r3, [pc, #684]	; 11dbc <next@@Base+0x30c>
   11b0c:	ldr	r3, [ip, r3]
   11b10:	ldr	r3, [r3, #204]	; 0xcc
   11b14:	cmp	r3, #49	; 0x31
   11b18:	bhi	11b74 <next@@Base+0xc4>
   11b1c:	ldr	r3, [pc, #668]	; 11dc0 <next@@Base+0x310>
   11b20:	add	r3, pc, r3
   11b24:	ldrd	r2, [r3, #8]
   11b28:	adds	r1, r2, #1
   11b2c:	str	r1, [fp, #-44]	; 0xffffffd4
   11b30:	adc	r3, r3, #0
   11b34:	str	r3, [fp, #-40]	; 0xffffffd8
   11b38:	ldr	r3, [pc, #644]	; 11dc4 <next@@Base+0x314>
   11b3c:	add	r3, pc, r3
   11b40:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   11b44:	strd	r0, [r3, #8]
   11b48:	ldr	r3, [pc, #620]	; 11dbc <next@@Base+0x30c>
   11b4c:	ldr	r3, [ip, r3]
   11b50:	ldr	r3, [r3, #204]	; 0xcc
   11b54:	lsl	r3, r3, #2
   11b58:	ldr	r2, [pc, #604]	; 11dbc <next@@Base+0x30c>
   11b5c:	ldr	r2, [ip, r2]
   11b60:	add	r3, r3, r2
   11b64:	add	r3, r3, #4
   11b68:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11b6c:	str	r2, [r3]
   11b70:	b	11b90 <next@@Base+0xe0>
   11b74:	ldr	r3, [pc, #576]	; 11dbc <next@@Base+0x30c>
   11b78:	ldr	r3, [ip, r3]
   11b7c:	ldr	r3, [r3, #212]	; 0xd4
   11b80:	add	r2, r3, #1
   11b84:	ldr	r3, [pc, #560]	; 11dbc <next@@Base+0x30c>
   11b88:	ldr	r3, [ip, r3]
   11b8c:	str	r2, [r3, #212]	; 0xd4
   11b90:	ldr	r3, [pc, #548]	; 11dbc <next@@Base+0x30c>
   11b94:	ldr	r3, [ip, r3]
   11b98:	ldr	r3, [r3, #204]	; 0xcc
   11b9c:	add	r2, r3, #1
   11ba0:	ldr	r3, [pc, #532]	; 11dbc <next@@Base+0x30c>
   11ba4:	ldr	r3, [ip, r3]
   11ba8:	str	r2, [r3, #204]	; 0xcc
   11bac:	ldr	r3, [pc, #532]	; 11dc8 <next@@Base+0x318>
   11bb0:	ldr	r3, [ip, r3]
   11bb4:	ldr	r3, [r3, #200]	; 0xc8
   11bb8:	cmp	r3, #49	; 0x31
   11bbc:	bhi	11c1c <next@@Base+0x16c>
   11bc0:	ldr	r3, [pc, #516]	; 11dcc <next@@Base+0x31c>
   11bc4:	add	r3, pc, r3
   11bc8:	ldrd	r2, [r3, #16]
   11bcc:	adds	r1, r2, #1
   11bd0:	str	r1, [fp, #-52]	; 0xffffffcc
   11bd4:	adc	r3, r3, #0
   11bd8:	str	r3, [fp, #-48]	; 0xffffffd0
   11bdc:	ldr	r3, [pc, #492]	; 11dd0 <next@@Base+0x320>
   11be0:	add	r3, pc, r3
   11be4:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   11be8:	strd	r0, [r3, #16]
   11bec:	ldr	r3, [pc, #468]	; 11dc8 <next@@Base+0x318>
   11bf0:	ldr	r3, [ip, r3]
   11bf4:	ldr	r3, [r3, #200]	; 0xc8
   11bf8:	add	r1, r3, #1
   11bfc:	ldr	r2, [pc, #452]	; 11dc8 <next@@Base+0x318>
   11c00:	ldr	r2, [ip, r2]
   11c04:	str	r1, [r2, #200]	; 0xc8
   11c08:	ldr	r2, [pc, #440]	; 11dc8 <next@@Base+0x318>
   11c0c:	ldr	r2, [ip, r2]
   11c10:	ldr	r1, [pc, #444]	; 11dd4 <next@@Base+0x324>
   11c14:	ldr	r1, [ip, r1]
   11c18:	str	r1, [r2, r3, lsl #2]
   11c1c:	ldr	r3, [pc, #408]	; 11dbc <next@@Base+0x30c>
   11c20:	ldr	r3, [ip, r3]
   11c24:	ldr	r3, [r3, #232]	; 0xe8
   11c28:	cmp	r3, #0
   11c2c:	beq	11ca8 <next@@Base+0x1f8>
   11c30:	ldr	r3, [pc, #416]	; 11dd8 <next@@Base+0x328>
   11c34:	add	r3, pc, r3
   11c38:	ldrd	r2, [r3, #24]
   11c3c:	adds	r1, r2, #1
   11c40:	str	r1, [fp, #-60]	; 0xffffffc4
   11c44:	adc	r3, r3, #0
   11c48:	str	r3, [fp, #-56]	; 0xffffffc8
   11c4c:	ldr	r3, [pc, #392]	; 11ddc <next@@Base+0x32c>
   11c50:	add	r3, pc, r3
   11c54:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   11c58:	strd	r0, [r3, #24]
   11c5c:	ldr	r3, [pc, #344]	; 11dbc <next@@Base+0x30c>
   11c60:	ldr	r3, [ip, r3]
   11c64:	ldr	r3, [r3, #232]	; 0xe8
   11c68:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11c6c:	mov	r0, r2
   11c70:	blx	r3
   11c74:	mov	r1, r0
   11c78:	ldr	r3, [pc, #352]	; 11de0 <next@@Base+0x330>
   11c7c:	add	r3, pc, r3
   11c80:	ldrd	r2, [r3, #32]
   11c84:	adds	r0, r2, #1
   11c88:	str	r0, [fp, #-68]	; 0xffffffbc
   11c8c:	adc	r3, r3, #0
   11c90:	str	r3, [fp, #-64]	; 0xffffffc0
   11c94:	ldr	r3, [pc, #328]	; 11de4 <next@@Base+0x334>
   11c98:	add	r3, pc, r3
   11c9c:	ldrd	r4, [fp, #-68]	; 0xffffffbc
   11ca0:	strd	r4, [r3, #32]
   11ca4:	b	11d8c <next@@Base+0x2dc>
   11ca8:	ldr	r3, [pc, #268]	; 11dbc <next@@Base+0x30c>
   11cac:	ldr	r3, [ip, r3]
   11cb0:	ldr	r3, [r3, #220]	; 0xdc
   11cb4:	cmp	r3, #0
   11cb8:	beq	11d80 <next@@Base+0x2d0>
   11cbc:	ldr	r3, [pc, #292]	; 11de8 <next@@Base+0x338>
   11cc0:	add	r3, pc, r3
   11cc4:	ldrd	r2, [r3, #40]	; 0x28
   11cc8:	adds	r8, r2, #1
   11ccc:	adc	r9, r3, #0
   11cd0:	ldr	r3, [pc, #276]	; 11dec <next@@Base+0x33c>
   11cd4:	add	r3, pc, r3
   11cd8:	strd	r8, [r3, #40]	; 0x28
   11cdc:	ldr	r3, [pc, #216]	; 11dbc <next@@Base+0x30c>
   11ce0:	ldr	r3, [ip, r3]
   11ce4:	ldr	r2, [r3, #224]	; 0xe0
   11ce8:	ldr	r3, [pc, #204]	; 11dbc <next@@Base+0x30c>
   11cec:	ldr	r3, [ip, r3]
   11cf0:	ldr	r3, [r3, #220]	; 0xdc
   11cf4:	cmp	r2, r3
   11cf8:	bge	11d54 <next@@Base+0x2a4>
   11cfc:	ldr	r3, [pc, #236]	; 11df0 <next@@Base+0x340>
   11d00:	add	r3, pc, r3
   11d04:	ldrd	r2, [r3, #48]	; 0x30
   11d08:	adds	r6, r2, #1
   11d0c:	adc	r7, r3, #0
   11d10:	ldr	r3, [pc, #220]	; 11df4 <next@@Base+0x344>
   11d14:	add	r3, pc, r3
   11d18:	strd	r6, [r3, #48]	; 0x30
   11d1c:	ldr	r3, [pc, #152]	; 11dbc <next@@Base+0x30c>
   11d20:	ldr	r3, [ip, r3]
   11d24:	ldr	r2, [r3, #228]	; 0xe4
   11d28:	ldr	r3, [pc, #140]	; 11dbc <next@@Base+0x30c>
   11d2c:	ldr	r3, [ip, r3]
   11d30:	ldr	r3, [r3, #224]	; 0xe0
   11d34:	add	r0, r3, #1
   11d38:	ldr	r1, [pc, #124]	; 11dbc <next@@Base+0x30c>
   11d3c:	ldr	r1, [ip, r1]
   11d40:	str	r0, [r1, #224]	; 0xe0
   11d44:	lsl	r3, r3, #2
   11d48:	add	r3, r2, r3
   11d4c:	ldr	r1, [r3]
   11d50:	b	11d8c <next@@Base+0x2dc>
   11d54:	ldr	r3, [pc, #96]	; 11dbc <next@@Base+0x30c>
   11d58:	ldr	r3, [ip, r3]
   11d5c:	ldr	r2, [r3, #228]	; 0xe4
   11d60:	ldr	r3, [pc, #84]	; 11dbc <next@@Base+0x30c>
   11d64:	ldr	r3, [ip, r3]
   11d68:	ldr	r3, [r3, #220]	; 0xdc
   11d6c:	sub	r3, r3, #-1073741823	; 0xc0000001
   11d70:	lsl	r3, r3, #2
   11d74:	add	r3, r2, r3
   11d78:	ldr	r1, [r3]
   11d7c:	b	11d8c <next@@Base+0x2dc>
   11d80:	ldr	r3, [pc, #52]	; 11dbc <next@@Base+0x30c>
   11d84:	ldr	r3, [ip, r3]
   11d88:	ldr	r1, [r3, #216]	; 0xd8
   11d8c:	mov	r3, r1
   11d90:	mov	r0, r3
   11d94:	sub	sp, fp, #28
   11d98:	ldrd	r4, [sp]
   11d9c:	ldrd	r6, [sp, #8]
   11da0:	ldrd	r8, [sp, #16]
   11da4:	ldr	fp, [sp, #24]
   11da8:	add	sp, sp, #28
   11dac:	pop	{pc}		; (ldr pc, [sp], #4)
   11db0:	andeq	sp, r1, r4, lsr #10
   11db4:	andeq	lr, r1, ip, lsr #12
   11db8:	andeq	lr, r1, r8, lsl r6
   11dbc:	andeq	r0, r0, ip, lsr #1
   11dc0:	andeq	lr, r1, r8, ror #11
   11dc4:	andeq	lr, r1, ip, asr #11
   11dc8:	andeq	r0, r0, r4, asr #1
   11dcc:	andeq	lr, r1, r4, asr #10
   11dd0:	andeq	lr, r1, r8, lsr #10
   11dd4:	andeq	r0, r0, r4, lsr #1
   11dd8:	ldrdeq	lr, [r1], -r4
   11ddc:			; <UNDEFINED> instruction: 0x0001e4b8
   11de0:	andeq	lr, r1, ip, lsl #9
   11de4:	andeq	lr, r1, r0, ror r4
   11de8:	andeq	lr, r1, r8, asr #8
   11dec:	andeq	lr, r1, r4, lsr r4
   11df0:	andeq	lr, r1, r8, lsl #8
   11df4:	strdeq	lr, [r1], -r4

00011df8 <next_reset@@Base>:
   11df8:	strd	r4, [sp, #-16]!
   11dfc:	str	fp, [sp, #8]
   11e00:	str	lr, [sp, #12]
   11e04:	add	fp, sp, #12
   11e08:	ldr	r4, [pc, #96]	; 11e70 <next_reset@@Base+0x78>
   11e0c:	add	r4, pc, r4
   11e10:	ldr	r3, [pc, #92]	; 11e74 <next_reset@@Base+0x7c>
   11e14:	add	r3, pc, r3
   11e18:	ldrd	r2, [r3]
   11e1c:	adds	r0, r2, #1
   11e20:	adc	r1, r3, #0
   11e24:	ldr	r3, [pc, #76]	; 11e78 <next_reset@@Base+0x80>
   11e28:	add	r3, pc, r3
   11e2c:	strd	r0, [r3]
   11e30:	mov	r2, #236	; 0xec
   11e34:	mov	r1, #0
   11e38:	ldr	r3, [pc, #60]	; 11e7c <next_reset@@Base+0x84>
   11e3c:	ldr	r3, [r4, r3]
   11e40:	mov	r0, r3
   11e44:	bl	11924 <memset@plt>
   11e48:	ldr	r3, [pc, #44]	; 11e7c <next_reset@@Base+0x84>
   11e4c:	ldr	r3, [r4, r3]
   11e50:	mov	r2, #50	; 0x32
   11e54:	str	r2, [r3, #208]	; 0xd0
   11e58:	nop	{0}
   11e5c:	sub	sp, fp, #12
   11e60:	ldrd	r4, [sp]
   11e64:	ldr	fp, [sp, #8]
   11e68:	add	sp, sp, #12
   11e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   11e70:	andeq	sp, r1, ip, ror #3
   11e74:	andeq	lr, r1, ip, ror #5
   11e78:	ldrdeq	lr, [r1], -r8
   11e7c:	andeq	r0, r0, ip, lsr #1

00011e80 <push_back@@Base>:
   11e80:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11e84:	strd	r6, [sp, #8]
   11e88:	strd	r8, [sp, #16]
   11e8c:	str	fp, [sp, #24]
   11e90:	str	lr, [sp, #28]
   11e94:	add	fp, sp, #28
   11e98:	sub	sp, sp, #24
   11e9c:	str	r0, [fp, #-32]	; 0xffffffe0
   11ea0:	str	r1, [fp, #-36]	; 0xffffffdc
   11ea4:	ldr	r3, [pc, #524]	; 120b8 <push_back@@Base+0x238>
   11ea8:	add	r3, pc, r3
   11eac:	ldr	r2, [pc, #520]	; 120bc <push_back@@Base+0x23c>
   11eb0:	add	r2, pc, r2
   11eb4:	ldrd	r0, [r2]
   11eb8:	adds	r2, r0, #1
   11ebc:	str	r2, [fp, #-44]	; 0xffffffd4
   11ec0:	adc	r2, r1, #0
   11ec4:	str	r2, [fp, #-40]	; 0xffffffd8
   11ec8:	ldr	r2, [pc, #496]	; 120c0 <push_back@@Base+0x240>
   11ecc:	add	r2, pc, r2
   11ed0:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   11ed4:	strd	r0, [r2]
   11ed8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11edc:	ldr	r2, [pc, #480]	; 120c4 <push_back@@Base+0x244>
   11ee0:	ldr	r2, [r3, r2]
   11ee4:	str	r1, [r2]
   11ee8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11eec:	ldr	r2, [pc, #464]	; 120c4 <push_back@@Base+0x244>
   11ef0:	ldr	r2, [r3, r2]
   11ef4:	str	r1, [r2, #204]	; 0xcc
   11ef8:	ldr	r2, [pc, #452]	; 120c4 <push_back@@Base+0x244>
   11efc:	ldr	r2, [r3, r2]
   11f00:	ldr	r2, [r2, #408]	; 0x198
   11f04:	cmp	r2, #49	; 0x31
   11f08:	bhi	11f8c <push_back@@Base+0x10c>
   11f0c:	ldr	r2, [pc, #436]	; 120c8 <push_back@@Base+0x248>
   11f10:	add	r2, pc, r2
   11f14:	ldrd	r0, [r2, #8]
   11f18:	adds	r2, r0, #1
   11f1c:	str	r2, [fp, #-52]	; 0xffffffcc
   11f20:	adc	r2, r1, #0
   11f24:	str	r2, [fp, #-48]	; 0xffffffd0
   11f28:	ldr	r2, [pc, #412]	; 120cc <push_back@@Base+0x24c>
   11f2c:	add	r2, pc, r2
   11f30:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   11f34:	strd	r0, [r2, #8]
   11f38:	ldr	r2, [pc, #388]	; 120c4 <push_back@@Base+0x244>
   11f3c:	ldr	r2, [r3, r2]
   11f40:	ldr	r2, [r2, #408]	; 0x198
   11f44:	lsl	r2, r2, #2
   11f48:	ldr	r1, [pc, #372]	; 120c4 <push_back@@Base+0x244>
   11f4c:	ldr	r1, [r3, r1]
   11f50:	add	r2, r2, r1
   11f54:	add	r2, r2, #4
   11f58:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11f5c:	str	r1, [r2]
   11f60:	ldr	r2, [pc, #348]	; 120c4 <push_back@@Base+0x244>
   11f64:	ldr	r2, [r3, r2]
   11f68:	ldr	r2, [r2, #408]	; 0x198
   11f6c:	add	r2, r2, #52	; 0x34
   11f70:	lsl	r2, r2, #2
   11f74:	ldr	r1, [pc, #328]	; 120c4 <push_back@@Base+0x244>
   11f78:	ldr	r1, [r3, r1]
   11f7c:	add	r2, r2, r1
   11f80:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11f84:	str	r1, [r2]
   11f88:	b	11fa8 <push_back@@Base+0x128>
   11f8c:	ldr	r2, [pc, #304]	; 120c4 <push_back@@Base+0x244>
   11f90:	ldr	r2, [r3, r2]
   11f94:	ldr	r2, [r2, #416]	; 0x1a0
   11f98:	add	r1, r2, #1
   11f9c:	ldr	r2, [pc, #288]	; 120c4 <push_back@@Base+0x244>
   11fa0:	ldr	r2, [r3, r2]
   11fa4:	str	r1, [r2, #416]	; 0x1a0
   11fa8:	ldr	r2, [pc, #276]	; 120c4 <push_back@@Base+0x244>
   11fac:	ldr	r2, [r3, r2]
   11fb0:	ldr	r2, [r2, #408]	; 0x198
   11fb4:	add	r1, r2, #1
   11fb8:	ldr	r2, [pc, #260]	; 120c4 <push_back@@Base+0x244>
   11fbc:	ldr	r2, [r3, r2]
   11fc0:	str	r1, [r2, #408]	; 0x198
   11fc4:	ldr	r2, [pc, #260]	; 120d0 <push_back@@Base+0x250>
   11fc8:	ldr	r2, [r3, r2]
   11fcc:	ldr	r2, [r2, #200]	; 0xc8
   11fd0:	cmp	r2, #49	; 0x31
   11fd4:	bhi	12028 <push_back@@Base+0x1a8>
   11fd8:	ldr	r2, [pc, #244]	; 120d4 <push_back@@Base+0x254>
   11fdc:	add	r2, pc, r2
   11fe0:	ldrd	r0, [r2, #16]
   11fe4:	adds	r8, r0, #1
   11fe8:	adc	r9, r1, #0
   11fec:	ldr	r2, [pc, #228]	; 120d8 <push_back@@Base+0x258>
   11ff0:	add	r2, pc, r2
   11ff4:	strd	r8, [r2, #16]
   11ff8:	ldr	r2, [pc, #208]	; 120d0 <push_back@@Base+0x250>
   11ffc:	ldr	r2, [r3, r2]
   12000:	ldr	r2, [r2, #200]	; 0xc8
   12004:	add	r0, r2, #1
   12008:	ldr	r1, [pc, #192]	; 120d0 <push_back@@Base+0x250>
   1200c:	ldr	r1, [r3, r1]
   12010:	str	r0, [r1, #200]	; 0xc8
   12014:	ldr	r1, [pc, #180]	; 120d0 <push_back@@Base+0x250>
   12018:	ldr	r1, [r3, r1]
   1201c:	ldr	r0, [pc, #184]	; 120dc <push_back@@Base+0x25c>
   12020:	ldr	r0, [r3, r0]
   12024:	str	r0, [r1, r2, lsl #2]
   12028:	ldr	r2, [pc, #148]	; 120c4 <push_back@@Base+0x244>
   1202c:	ldr	r2, [r3, r2]
   12030:	ldr	r2, [r2, #420]	; 0x1a4
   12034:	cmp	r2, #0
   12038:	beq	12098 <push_back@@Base+0x218>
   1203c:	ldr	r2, [pc, #156]	; 120e0 <push_back@@Base+0x260>
   12040:	add	r2, pc, r2
   12044:	ldrd	r0, [r2, #24]
   12048:	adds	r6, r0, #1
   1204c:	adc	r7, r1, #0
   12050:	ldr	r2, [pc, #140]	; 120e4 <push_back@@Base+0x264>
   12054:	add	r2, pc, r2
   12058:	strd	r6, [r2, #24]
   1205c:	ldr	r2, [pc, #96]	; 120c4 <push_back@@Base+0x244>
   12060:	ldr	r3, [r3, r2]
   12064:	ldr	r3, [r3, #420]	; 0x1a4
   12068:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1206c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   12070:	mov	r0, r2
   12074:	blx	r3
   12078:	ldr	r3, [pc, #104]	; 120e8 <push_back@@Base+0x268>
   1207c:	add	r3, pc, r3
   12080:	ldrd	r2, [r3, #32]
   12084:	adds	r4, r2, #1
   12088:	adc	r5, r3, #0
   1208c:	ldr	r3, [pc, #88]	; 120ec <push_back@@Base+0x26c>
   12090:	add	r3, pc, r3
   12094:	strd	r4, [r3, #32]
   12098:	nop	{0}
   1209c:	sub	sp, fp, #28
   120a0:	ldrd	r4, [sp]
   120a4:	ldrd	r6, [sp, #8]
   120a8:	ldrd	r8, [sp, #16]
   120ac:	ldr	fp, [sp, #24]
   120b0:	add	sp, sp, #28
   120b4:	pop	{pc}		; (ldr pc, [sp], #4)
   120b8:	andeq	sp, r1, r0, asr r1
   120bc:	andeq	lr, r1, r8, lsr #4
   120c0:	andeq	lr, r1, ip, lsl #4
   120c4:	muleq	r0, ip, r0
   120c8:	andeq	lr, r1, r8, asr #3
   120cc:	andeq	lr, r1, ip, lsr #3
   120d0:	andeq	r0, r0, r4, asr #1
   120d4:	strdeq	lr, [r1], -ip
   120d8:	andeq	lr, r1, r8, ror #1
   120dc:	andeq	r0, r0, r0, asr #1
   120e0:	muleq	r1, r8, r0
   120e4:	andeq	lr, r1, r4, lsl #1
   120e8:	andeq	lr, r1, ip, asr r0
   120ec:	andeq	lr, r1, r8, asr #32

000120f0 <push_back_reset@@Base>:
   120f0:	strd	r4, [sp, #-16]!
   120f4:	str	fp, [sp, #8]
   120f8:	str	lr, [sp, #12]
   120fc:	add	fp, sp, #12
   12100:	ldr	r4, [pc, #96]	; 12168 <push_back_reset@@Base+0x78>
   12104:	add	r4, pc, r4
   12108:	ldr	r3, [pc, #92]	; 1216c <push_back_reset@@Base+0x7c>
   1210c:	add	r3, pc, r3
   12110:	ldrd	r2, [r3]
   12114:	adds	r0, r2, #1
   12118:	adc	r1, r3, #0
   1211c:	ldr	r3, [pc, #76]	; 12170 <push_back_reset@@Base+0x80>
   12120:	add	r3, pc, r3
   12124:	strd	r0, [r3]
   12128:	mov	r2, #424	; 0x1a8
   1212c:	mov	r1, #0
   12130:	ldr	r3, [pc, #60]	; 12174 <push_back_reset@@Base+0x84>
   12134:	ldr	r3, [r4, r3]
   12138:	mov	r0, r3
   1213c:	bl	11924 <memset@plt>
   12140:	ldr	r3, [pc, #44]	; 12174 <push_back_reset@@Base+0x84>
   12144:	ldr	r3, [r4, r3]
   12148:	mov	r2, #50	; 0x32
   1214c:	str	r2, [r3, #412]	; 0x19c
   12150:	nop	{0}
   12154:	sub	sp, fp, #12
   12158:	ldrd	r4, [sp]
   1215c:	ldr	fp, [sp, #8]
   12160:	add	sp, sp, #12
   12164:	pop	{pc}		; (ldr pc, [sp], #4)
   12168:	strdeq	ip, [r1], -r4
   1216c:	andeq	sp, r1, r4, asr #31
   12170:			; <UNDEFINED> instruction: 0x0001dfb0
   12174:	muleq	r0, ip, r0

00012178 <setup@@Base>:
   12178:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1217c:	strd	r6, [sp, #8]
   12180:	str	fp, [sp, #16]
   12184:	str	lr, [sp, #20]
   12188:	add	fp, sp, #20
   1218c:	ldr	r3, [pc, #124]	; 12210 <setup@@Base+0x98>
   12190:	add	r3, pc, r3
   12194:	ldrd	r2, [r3]
   12198:	adds	r0, r2, #1
   1219c:	adc	r1, r3, #0
   121a0:	ldr	r3, [pc, #108]	; 12214 <setup@@Base+0x9c>
   121a4:	add	r3, pc, r3
   121a8:	strd	r0, [r3]
   121ac:	bl	11df8 <next_reset@@Base>
   121b0:	ldr	r3, [pc, #96]	; 12218 <setup@@Base+0xa0>
   121b4:	add	r3, pc, r3
   121b8:	ldrd	r2, [r3, #8]
   121bc:	adds	r6, r2, #1
   121c0:	adc	r7, r3, #0
   121c4:	ldr	r3, [pc, #80]	; 1221c <setup@@Base+0xa4>
   121c8:	add	r3, pc, r3
   121cc:	strd	r6, [r3, #8]
   121d0:	bl	120f0 <push_back_reset@@Base>
   121d4:	ldr	r3, [pc, #68]	; 12220 <setup@@Base+0xa8>
   121d8:	add	r3, pc, r3
   121dc:	ldrd	r2, [r3, #16]
   121e0:	adds	r4, r2, #1
   121e4:	adc	r5, r3, #0
   121e8:	ldr	r3, [pc, #52]	; 12224 <setup@@Base+0xac>
   121ec:	add	r3, pc, r3
   121f0:	strd	r4, [r3, #16]
   121f4:	nop	{0}
   121f8:	sub	sp, fp, #20
   121fc:	ldrd	r4, [sp]
   12200:	ldrd	r6, [sp, #8]
   12204:	ldr	fp, [sp, #16]
   12208:	add	sp, sp, #20
   1220c:	pop	{pc}		; (ldr pc, [sp], #4)
   12210:	andeq	sp, r1, r8, lsr #30
   12214:	andeq	sp, r1, r4, lsl pc
   12218:	andeq	sp, r1, r4, lsl #30
   1221c:	strdeq	sp, [r1], -r0
   12220:	andeq	sp, r1, r0, ror #29
   12224:	andeq	sp, r1, ip, asr #29

00012228 <no_int_as_first_stuff@@Base>:
   12228:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1222c:	strd	r6, [sp, #8]
   12230:	strd	r8, [sp, #16]
   12234:	strd	sl, [sp, #24]
   12238:	str	lr, [sp, #32]
   1223c:	add	fp, sp, #32
   12240:	sub	sp, sp, #44	; 0x2c
   12244:	ldr	sl, [pc, #428]	; 123f8 <no_int_as_first_stuff@@Base+0x1d0>
   12248:	add	sl, pc, sl
   1224c:	ldr	r3, [pc, #424]	; 123fc <no_int_as_first_stuff@@Base+0x1d4>
   12250:	add	r3, pc, r3
   12254:	ldrd	r2, [r3]
   12258:	adds	r0, r2, #1
   1225c:	adc	r1, r3, #0
   12260:	ldr	r3, [pc, #408]	; 12400 <no_int_as_first_stuff@@Base+0x1d8>
   12264:	add	r3, pc, r3
   12268:	strd	r0, [r3]
   1226c:	sub	r2, fp, #56	; 0x38
   12270:	sub	r3, fp, #60	; 0x3c
   12274:	mov	r1, r2
   12278:	mov	r0, r3
   1227c:	bl	1994c <init_grammar@@Base>
   12280:	ldr	r3, [pc, #380]	; 12404 <no_int_as_first_stuff@@Base+0x1dc>
   12284:	add	r3, pc, r3
   12288:	ldrd	r2, [r3, #8]
   1228c:	adds	r1, r2, #1
   12290:	str	r1, [fp, #-68]	; 0xffffffbc
   12294:	adc	r3, r3, #0
   12298:	str	r3, [fp, #-64]	; 0xffffffc0
   1229c:	ldr	r3, [pc, #356]	; 12408 <no_int_as_first_stuff@@Base+0x1e0>
   122a0:	add	r3, pc, r3
   122a4:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   122a8:	strd	r0, [r3, #8]
   122ac:	mov	r3, #0
   122b0:	str	r3, [fp, #-40]	; 0xffffffd8
   122b4:	mov	r0, #4
   122b8:	bl	118b8 <malloc@plt>
   122bc:	mov	r3, r0
   122c0:	str	r3, [fp, #-44]	; 0xffffffd4
   122c4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   122c8:	bl	17b20 <init_token_opar@@Base>
   122cc:	ldr	r3, [pc, #312]	; 1240c <no_int_as_first_stuff@@Base+0x1e4>
   122d0:	add	r3, pc, r3
   122d4:	ldrd	r2, [r3, #16]
   122d8:	adds	r1, r2, #1
   122dc:	str	r1, [fp, #-76]	; 0xffffffb4
   122e0:	adc	r3, r3, #0
   122e4:	str	r3, [fp, #-72]	; 0xffffffb8
   122e8:	ldr	r3, [pc, #288]	; 12410 <no_int_as_first_stuff@@Base+0x1e8>
   122ec:	add	r3, pc, r3
   122f0:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   122f4:	strd	r0, [r3, #16]
   122f8:	ldr	r3, [pc, #276]	; 12414 <no_int_as_first_stuff@@Base+0x1ec>
   122fc:	ldr	r3, [sl, r3]
   12300:	ldr	r2, [fp, #-44]	; 0xffffffd4
   12304:	str	r2, [r3, #216]	; 0xd8
   12308:	sub	r3, fp, #60	; 0x3c
   1230c:	mov	r0, r3
   12310:	bl	19a9c <read_function_ast_node@@Base>
   12314:	str	r0, [fp, #-40]	; 0xffffffd8
   12318:	ldr	r3, [pc, #244]	; 12414 <no_int_as_first_stuff@@Base+0x1ec>
   1231c:	ldr	r3, [sl, r3]
   12320:	ldr	r3, [r3, #204]	; 0xcc
   12324:	cmp	r3, #1
   12328:	beq	1236c <no_int_as_first_stuff@@Base+0x144>
   1232c:	ldr	r3, [pc, #228]	; 12418 <no_int_as_first_stuff@@Base+0x1f0>
   12330:	add	r3, pc, r3
   12334:	ldrd	r2, [r3, #24]
   12338:	adds	r8, r2, #1
   1233c:	adc	r9, r3, #0
   12340:	ldr	r3, [pc, #212]	; 1241c <no_int_as_first_stuff@@Base+0x1f4>
   12344:	add	r3, pc, r3
   12348:	strd	r8, [r3, #24]
   1234c:	ldr	r3, [pc, #204]	; 12420 <no_int_as_first_stuff@@Base+0x1f8>
   12350:	add	r3, pc, r3
   12354:	mov	r2, #41	; 0x29
   12358:	ldr	r1, [pc, #196]	; 12424 <no_int_as_first_stuff@@Base+0x1fc>
   1235c:	add	r1, pc, r1
   12360:	ldr	r0, [pc, #192]	; 12428 <no_int_as_first_stuff@@Base+0x200>
   12364:	add	r0, pc, r0
   12368:	bl	119b4 <__assert_fail@plt>
   1236c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12370:	cmp	r3, #0
   12374:	beq	123b8 <no_int_as_first_stuff@@Base+0x190>
   12378:	ldr	r3, [pc, #172]	; 1242c <no_int_as_first_stuff@@Base+0x204>
   1237c:	add	r3, pc, r3
   12380:	ldrd	r2, [r3, #40]	; 0x28
   12384:	adds	r6, r2, #1
   12388:	adc	r7, r3, #0
   1238c:	ldr	r3, [pc, #156]	; 12430 <no_int_as_first_stuff@@Base+0x208>
   12390:	add	r3, pc, r3
   12394:	strd	r6, [r3, #40]	; 0x28
   12398:	ldr	r3, [pc, #148]	; 12434 <no_int_as_first_stuff@@Base+0x20c>
   1239c:	add	r3, pc, r3
   123a0:	mov	r2, #42	; 0x2a
   123a4:	ldr	r1, [pc, #140]	; 12438 <no_int_as_first_stuff@@Base+0x210>
   123a8:	add	r1, pc, r1
   123ac:	ldr	r0, [pc, #136]	; 1243c <no_int_as_first_stuff@@Base+0x214>
   123b0:	add	r0, pc, r0
   123b4:	bl	119b4 <__assert_fail@plt>
   123b8:	ldr	r3, [pc, #128]	; 12440 <no_int_as_first_stuff@@Base+0x218>
   123bc:	add	r3, pc, r3
   123c0:	ldrd	r2, [r3, #32]
   123c4:	adds	r4, r2, #1
   123c8:	adc	r5, r3, #0
   123cc:	ldr	r3, [pc, #112]	; 12444 <no_int_as_first_stuff@@Base+0x21c>
   123d0:	add	r3, pc, r3
   123d4:	strd	r4, [r3, #32]
   123d8:	nop	{0}
   123dc:	sub	sp, fp, #32
   123e0:	ldrd	r4, [sp]
   123e4:	ldrd	r6, [sp, #8]
   123e8:	ldrd	r8, [sp, #16]
   123ec:	ldrd	sl, [sp, #24]
   123f0:	add	sp, sp, #32
   123f4:	pop	{pc}		; (ldr pc, [sp], #4)
   123f8:			; <UNDEFINED> instruction: 0x0001cdb0
   123fc:	andeq	sp, r1, r8, lsr lr
   12400:	andeq	sp, r1, r4, lsr #28
   12404:	andeq	sp, r1, r4, lsl #28
   12408:	andeq	sp, r1, r8, ror #27
   1240c:			; <UNDEFINED> instruction: 0x0001ddb8
   12410:	muleq	r1, ip, sp
   12414:	andeq	r0, r0, ip, lsr #1
   12418:	andeq	sp, r1, r8, asr sp
   1241c:	andeq	sp, r1, r4, asr #26
   12420:	andeq	fp, r0, r4, ror #29
   12424:	andeq	fp, r0, r0, lsr sl
   12428:	andeq	fp, r0, r4, lsl #21
   1242c:	andeq	sp, r1, ip, lsl #26
   12430:	strdeq	sp, [r1], -r8
   12434:	muleq	r0, r8, lr
   12438:	andeq	fp, r0, r4, ror #19
   1243c:	andeq	fp, r0, r4, asr sl
   12440:	andeq	sp, r1, ip, asr #25
   12444:			; <UNDEFINED> instruction: 0x0001dcb8

00012448 <int_but_not_followed_by_function@@Base>:
   12448:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1244c:	str	r6, [sp, #8]
   12450:	strd	r8, [sp, #12]
   12454:	str	fp, [sp, #20]
   12458:	str	lr, [sp, #24]
   1245c:	add	fp, sp, #24
   12460:	sub	sp, sp, #60	; 0x3c
   12464:	ldr	r6, [pc, #576]	; 126ac <int_but_not_followed_by_function@@Base+0x264>
   12468:	add	r6, pc, r6
   1246c:	ldr	r3, [pc, #572]	; 126b0 <int_but_not_followed_by_function@@Base+0x268>
   12470:	add	r3, pc, r3
   12474:	ldrd	r2, [r3]
   12478:	adds	r0, r2, #1
   1247c:	adc	r1, r3, #0
   12480:	ldr	r3, [pc, #556]	; 126b4 <int_but_not_followed_by_function@@Base+0x26c>
   12484:	add	r3, pc, r3
   12488:	strd	r0, [r3]
   1248c:	mov	r3, #0
   12490:	str	r3, [fp, #-32]	; 0xffffffe0
   12494:	sub	r2, fp, #48	; 0x30
   12498:	sub	r3, fp, #52	; 0x34
   1249c:	mov	r1, r2
   124a0:	mov	r0, r3
   124a4:	bl	1994c <init_grammar@@Base>
   124a8:	ldr	r3, [pc, #520]	; 126b8 <int_but_not_followed_by_function@@Base+0x270>
   124ac:	add	r3, pc, r3
   124b0:	ldrd	r2, [r3, #8]
   124b4:	adds	r4, r2, #1
   124b8:	adc	r5, r3, #0
   124bc:	ldr	r3, [pc, #504]	; 126bc <int_but_not_followed_by_function@@Base+0x274>
   124c0:	add	r3, pc, r3
   124c4:	strd	r4, [r3, #8]
   124c8:	mov	r0, #8
   124cc:	bl	118b8 <malloc@plt>
   124d0:	mov	r3, r0
   124d4:	str	r3, [fp, #-36]	; 0xffffffdc
   124d8:	mov	r0, #4
   124dc:	bl	118b8 <malloc@plt>
   124e0:	mov	r3, r0
   124e4:	mov	r2, r3
   124e8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   124ec:	str	r2, [r3]
   124f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   124f4:	ldr	r3, [r3]
   124f8:	mov	r0, r3
   124fc:	bl	179e0 <init_token_int_type@@Base>
   12500:	ldr	r3, [pc, #440]	; 126c0 <int_but_not_followed_by_function@@Base+0x278>
   12504:	add	r3, pc, r3
   12508:	ldrd	r2, [r3, #16]
   1250c:	adds	r1, r2, #1
   12510:	str	r1, [fp, #-60]	; 0xffffffc4
   12514:	adc	r3, r3, #0
   12518:	str	r3, [fp, #-56]	; 0xffffffc8
   1251c:	ldr	r3, [pc, #416]	; 126c4 <int_but_not_followed_by_function@@Base+0x27c>
   12520:	add	r3, pc, r3
   12524:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   12528:	strd	r0, [r3, #16]
   1252c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12530:	add	r4, r3, #4
   12534:	mov	r0, #4
   12538:	bl	118b8 <malloc@plt>
   1253c:	mov	r3, r0
   12540:	str	r3, [r4]
   12544:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12548:	add	r3, r3, #4
   1254c:	ldr	r3, [r3]
   12550:	mov	r0, r3
   12554:	bl	17b20 <init_token_opar@@Base>
   12558:	ldr	r3, [pc, #360]	; 126c8 <int_but_not_followed_by_function@@Base+0x280>
   1255c:	add	r3, pc, r3
   12560:	ldrd	r2, [r3, #24]
   12564:	adds	r1, r2, #1
   12568:	str	r1, [fp, #-68]	; 0xffffffbc
   1256c:	adc	r3, r3, #0
   12570:	str	r3, [fp, #-64]	; 0xffffffc0
   12574:	ldr	r3, [pc, #336]	; 126cc <int_but_not_followed_by_function@@Base+0x284>
   12578:	add	r3, pc, r3
   1257c:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   12580:	strd	r0, [r3, #24]
   12584:	ldr	r3, [pc, #324]	; 126d0 <int_but_not_followed_by_function@@Base+0x288>
   12588:	ldr	r3, [r6, r3]
   1258c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12590:	str	r2, [r3, #228]	; 0xe4
   12594:	ldr	r3, [pc, #308]	; 126d0 <int_but_not_followed_by_function@@Base+0x288>
   12598:	ldr	r3, [r6, r3]
   1259c:	mov	r2, #2
   125a0:	str	r2, [r3, #220]	; 0xdc
   125a4:	sub	r3, fp, #52	; 0x34
   125a8:	mov	r0, r3
   125ac:	bl	19a9c <read_function_ast_node@@Base>
   125b0:	str	r0, [fp, #-32]	; 0xffffffe0
   125b4:	ldr	r3, [pc, #276]	; 126d0 <int_but_not_followed_by_function@@Base+0x288>
   125b8:	ldr	r3, [r6, r3]
   125bc:	ldr	r3, [r3, #204]	; 0xcc
   125c0:	cmp	r3, #2
   125c4:	beq	12614 <int_but_not_followed_by_function@@Base+0x1cc>
   125c8:	ldr	r3, [pc, #260]	; 126d4 <int_but_not_followed_by_function@@Base+0x28c>
   125cc:	add	r3, pc, r3
   125d0:	ldrd	r2, [r3, #32]
   125d4:	adds	r1, r2, #1
   125d8:	str	r1, [fp, #-76]	; 0xffffffb4
   125dc:	adc	r3, r3, #0
   125e0:	str	r3, [fp, #-72]	; 0xffffffb8
   125e4:	ldr	r3, [pc, #236]	; 126d8 <int_but_not_followed_by_function@@Base+0x290>
   125e8:	add	r3, pc, r3
   125ec:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   125f0:	strd	r0, [r3, #32]
   125f4:	ldr	r3, [pc, #224]	; 126dc <int_but_not_followed_by_function@@Base+0x294>
   125f8:	add	r3, pc, r3
   125fc:	mov	r2, #67	; 0x43
   12600:	ldr	r1, [pc, #216]	; 126e0 <int_but_not_followed_by_function@@Base+0x298>
   12604:	add	r1, pc, r1
   12608:	ldr	r0, [pc, #212]	; 126e4 <int_but_not_followed_by_function@@Base+0x29c>
   1260c:	add	r0, pc, r0
   12610:	bl	119b4 <__assert_fail@plt>
   12614:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12618:	cmp	r3, #0
   1261c:	beq	1266c <int_but_not_followed_by_function@@Base+0x224>
   12620:	ldr	r3, [pc, #192]	; 126e8 <int_but_not_followed_by_function@@Base+0x2a0>
   12624:	add	r3, pc, r3
   12628:	ldrd	r2, [r3, #48]	; 0x30
   1262c:	adds	r1, r2, #1
   12630:	str	r1, [fp, #-84]	; 0xffffffac
   12634:	adc	r3, r3, #0
   12638:	str	r3, [fp, #-80]	; 0xffffffb0
   1263c:	ldr	r3, [pc, #168]	; 126ec <int_but_not_followed_by_function@@Base+0x2a4>
   12640:	add	r3, pc, r3
   12644:	ldrd	r0, [fp, #-84]	; 0xffffffac
   12648:	strd	r0, [r3, #48]	; 0x30
   1264c:	ldr	r3, [pc, #156]	; 126f0 <int_but_not_followed_by_function@@Base+0x2a8>
   12650:	add	r3, pc, r3
   12654:	mov	r2, #68	; 0x44
   12658:	ldr	r1, [pc, #148]	; 126f4 <int_but_not_followed_by_function@@Base+0x2ac>
   1265c:	add	r1, pc, r1
   12660:	ldr	r0, [pc, #144]	; 126f8 <int_but_not_followed_by_function@@Base+0x2b0>
   12664:	add	r0, pc, r0
   12668:	bl	119b4 <__assert_fail@plt>
   1266c:	ldr	r3, [pc, #136]	; 126fc <int_but_not_followed_by_function@@Base+0x2b4>
   12670:	add	r3, pc, r3
   12674:	ldrd	r2, [r3, #40]	; 0x28
   12678:	adds	r8, r2, #1
   1267c:	adc	r9, r3, #0
   12680:	ldr	r3, [pc, #120]	; 12700 <int_but_not_followed_by_function@@Base+0x2b8>
   12684:	add	r3, pc, r3
   12688:	strd	r8, [r3, #40]	; 0x28
   1268c:	nop	{0}
   12690:	sub	sp, fp, #24
   12694:	ldrd	r4, [sp]
   12698:	ldr	r6, [sp, #8]
   1269c:	ldrd	r8, [sp, #12]
   126a0:	ldr	fp, [sp, #20]
   126a4:	add	sp, sp, #24
   126a8:	pop	{pc}		; (ldr pc, [sp], #4)
   126ac:	muleq	r1, r0, fp
   126b0:	andeq	sp, r1, r0, ror #23
   126b4:	andeq	sp, r1, ip, asr #23
   126b8:	andeq	sp, r1, r4, lsr #23
   126bc:	muleq	r1, r0, fp
   126c0:	andeq	sp, r1, ip, asr #22
   126c4:	andeq	sp, r1, r0, lsr fp
   126c8:	strdeq	sp, [r1], -r4
   126cc:	ldrdeq	sp, [r1], -r8
   126d0:	andeq	r0, r0, ip, lsr #1
   126d4:	andeq	sp, r1, r4, lsl #21
   126d8:	andeq	sp, r1, r8, ror #20
   126dc:	andeq	fp, r0, r4, asr ip
   126e0:	andeq	fp, r0, r8, lsl #15
   126e4:	andeq	fp, r0, r4, lsl #16
   126e8:	andeq	sp, r1, ip, lsr #20
   126ec:	andeq	sp, r1, r0, lsl sl
   126f0:	strdeq	fp, [r0], -ip
   126f4:	andeq	fp, r0, r0, lsr r7
   126f8:	andeq	fp, r0, r0, lsr #15
   126fc:	andeq	sp, r1, r0, ror #19
   12700:	andeq	sp, r1, ip, asr #19

00012704 <boolean_expression_is_read_properly@@Base>:
   12704:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12708:	strd	r6, [sp, #8]
   1270c:	strd	r8, [sp, #16]
   12710:	strd	sl, [sp, #24]
   12714:	str	lr, [sp, #32]
   12718:	add	fp, sp, #32
   1271c:	sub	sp, sp, #92	; 0x5c
   12720:	ldr	sl, [pc, #1012]	; 12b1c <boolean_expression_is_read_properly@@Base+0x418>
   12724:	add	sl, pc, sl
   12728:	ldr	r3, [pc, #1008]	; 12b20 <boolean_expression_is_read_properly@@Base+0x41c>
   1272c:	add	r3, pc, r3
   12730:	ldrd	r2, [r3]
   12734:	adds	r0, r2, #1
   12738:	adc	r1, r3, #0
   1273c:	ldr	r3, [pc, #992]	; 12b24 <boolean_expression_is_read_properly@@Base+0x420>
   12740:	add	r3, pc, r3
   12744:	strd	r0, [r3]
   12748:	mov	r3, #0
   1274c:	str	r3, [fp, #-40]	; 0xffffffd8
   12750:	mov	r3, #0
   12754:	str	r3, [fp, #-44]	; 0xffffffd4
   12758:	mov	r0, #3
   1275c:	bl	118b8 <malloc@plt>
   12760:	mov	r3, r0
   12764:	str	r3, [fp, #-48]	; 0xffffffd0
   12768:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1276c:	mov	r3, #33	; 0x21
   12770:	strb	r3, [r2]
   12774:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12778:	add	r2, r3, #1
   1277c:	mov	r3, #61	; 0x3d
   12780:	strb	r3, [r2]
   12784:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12788:	add	r2, r3, #2
   1278c:	mov	r3, #0
   12790:	strb	r3, [r2]
   12794:	sub	r2, fp, #64	; 0x40
   12798:	sub	r3, fp, #68	; 0x44
   1279c:	mov	r1, r2
   127a0:	mov	r0, r3
   127a4:	bl	1994c <init_grammar@@Base>
   127a8:	ldr	r3, [pc, #888]	; 12b28 <boolean_expression_is_read_properly@@Base+0x424>
   127ac:	add	r3, pc, r3
   127b0:	ldrd	r2, [r3, #8]
   127b4:	adds	r4, r2, #1
   127b8:	adc	r5, r3, #0
   127bc:	ldr	r3, [pc, #872]	; 12b2c <boolean_expression_is_read_properly@@Base+0x428>
   127c0:	add	r3, pc, r3
   127c4:	strd	r4, [r3, #8]
   127c8:	mov	r0, #20
   127cc:	bl	118b8 <malloc@plt>
   127d0:	mov	r3, r0
   127d4:	str	r3, [fp, #-52]	; 0xffffffcc
   127d8:	mov	r0, #8
   127dc:	bl	118b8 <malloc@plt>
   127e0:	mov	r3, r0
   127e4:	mov	r2, r3
   127e8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   127ec:	str	r2, [r3]
   127f0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   127f4:	ldr	r3, [r3]
   127f8:	mov	r1, #2
   127fc:	mov	r0, r3
   12800:	bl	17a40 <init_token_int_value@@Base>
   12804:	ldr	r3, [pc, #804]	; 12b30 <boolean_expression_is_read_properly@@Base+0x42c>
   12808:	add	r3, pc, r3
   1280c:	ldrd	r2, [r3, #16]
   12810:	adds	r6, r2, #1
   12814:	adc	r7, r3, #0
   12818:	ldr	r3, [pc, #788]	; 12b34 <boolean_expression_is_read_properly@@Base+0x430>
   1281c:	add	r3, pc, r3
   12820:	strd	r6, [r3, #16]
   12824:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12828:	add	r4, r3, #4
   1282c:	mov	r0, #8
   12830:	bl	118b8 <malloc@plt>
   12834:	mov	r3, r0
   12838:	str	r3, [r4]
   1283c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12840:	add	r3, r3, #4
   12844:	ldr	r3, [r3]
   12848:	mov	r1, #2
   1284c:	mov	r0, r3
   12850:	bl	17a40 <init_token_int_value@@Base>
   12854:	ldr	r3, [pc, #732]	; 12b38 <boolean_expression_is_read_properly@@Base+0x434>
   12858:	add	r3, pc, r3
   1285c:	ldrd	r2, [r3, #24]
   12860:	adds	r8, r2, #1
   12864:	adc	r9, r3, #0
   12868:	ldr	r3, [pc, #716]	; 12b3c <boolean_expression_is_read_properly@@Base+0x438>
   1286c:	add	r3, pc, r3
   12870:	strd	r8, [r3, #24]
   12874:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12878:	add	r4, r3, #8
   1287c:	mov	r0, #8
   12880:	bl	118b8 <malloc@plt>
   12884:	mov	r3, r0
   12888:	str	r3, [r4]
   1288c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12890:	add	r3, r3, #8
   12894:	ldr	r3, [r3]
   12898:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1289c:	mov	r0, r3
   128a0:	bl	17e80 <init_token_boolean_op@@Base>
   128a4:	ldr	r3, [pc, #660]	; 12b40 <boolean_expression_is_read_properly@@Base+0x43c>
   128a8:	add	r3, pc, r3
   128ac:	ldrd	r2, [r3, #32]
   128b0:	adds	r1, r2, #1
   128b4:	str	r1, [fp, #-76]	; 0xffffffb4
   128b8:	adc	r3, r3, #0
   128bc:	str	r3, [fp, #-72]	; 0xffffffb8
   128c0:	ldr	r3, [pc, #636]	; 12b44 <boolean_expression_is_read_properly@@Base+0x440>
   128c4:	add	r3, pc, r3
   128c8:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   128cc:	strd	r0, [r3, #32]
   128d0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   128d4:	add	r4, r3, #12
   128d8:	mov	r0, #8
   128dc:	bl	118b8 <malloc@plt>
   128e0:	mov	r3, r0
   128e4:	str	r3, [r4]
   128e8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   128ec:	add	r3, r3, #12
   128f0:	ldr	r3, [r3]
   128f4:	mov	r1, #1
   128f8:	mov	r0, r3
   128fc:	bl	17a40 <init_token_int_value@@Base>
   12900:	ldr	r3, [pc, #576]	; 12b48 <boolean_expression_is_read_properly@@Base+0x444>
   12904:	add	r3, pc, r3
   12908:	ldrd	r2, [r3, #40]	; 0x28
   1290c:	adds	r1, r2, #1
   12910:	str	r1, [fp, #-84]	; 0xffffffac
   12914:	adc	r3, r3, #0
   12918:	str	r3, [fp, #-80]	; 0xffffffb0
   1291c:	ldr	r3, [pc, #552]	; 12b4c <boolean_expression_is_read_properly@@Base+0x448>
   12920:	add	r3, pc, r3
   12924:	ldrd	r0, [fp, #-84]	; 0xffffffac
   12928:	strd	r0, [r3, #40]	; 0x28
   1292c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12930:	add	r4, r3, #16
   12934:	mov	r0, #4
   12938:	bl	118b8 <malloc@plt>
   1293c:	mov	r3, r0
   12940:	str	r3, [r4]
   12944:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12948:	add	r3, r3, #16
   1294c:	ldr	r3, [r3]
   12950:	mov	r0, r3
   12954:	bl	17b80 <init_token_cpar@@Base>
   12958:	ldr	r3, [pc, #496]	; 12b50 <boolean_expression_is_read_properly@@Base+0x44c>
   1295c:	add	r3, pc, r3
   12960:	ldrd	r2, [r3, #48]	; 0x30
   12964:	adds	r1, r2, #1
   12968:	str	r1, [fp, #-92]	; 0xffffffa4
   1296c:	adc	r3, r3, #0
   12970:	str	r3, [fp, #-88]	; 0xffffffa8
   12974:	ldr	r3, [pc, #472]	; 12b54 <boolean_expression_is_read_properly@@Base+0x450>
   12978:	add	r3, pc, r3
   1297c:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   12980:	strd	r0, [r3, #48]	; 0x30
   12984:	ldr	r3, [pc, #460]	; 12b58 <boolean_expression_is_read_properly@@Base+0x454>
   12988:	ldr	r3, [sl, r3]
   1298c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12990:	str	r2, [r3, #228]	; 0xe4
   12994:	ldr	r3, [pc, #444]	; 12b58 <boolean_expression_is_read_properly@@Base+0x454>
   12998:	ldr	r3, [sl, r3]
   1299c:	mov	r2, #5
   129a0:	str	r2, [r3, #220]	; 0xdc
   129a4:	sub	r3, fp, #68	; 0x44
   129a8:	mov	r0, r3
   129ac:	bl	1a9dc <read_boolean_expression@@Base>
   129b0:	str	r0, [fp, #-40]	; 0xffffffd8
   129b4:	ldr	r3, [pc, #412]	; 12b58 <boolean_expression_is_read_properly@@Base+0x454>
   129b8:	ldr	r3, [sl, r3]
   129bc:	ldr	r3, [r3, #204]	; 0xcc
   129c0:	cmp	r3, #5
   129c4:	beq	12a14 <boolean_expression_is_read_properly@@Base+0x310>
   129c8:	ldr	r3, [pc, #396]	; 12b5c <boolean_expression_is_read_properly@@Base+0x458>
   129cc:	add	r3, pc, r3
   129d0:	ldrd	r2, [r3, #56]	; 0x38
   129d4:	adds	r1, r2, #1
   129d8:	str	r1, [fp, #-100]	; 0xffffff9c
   129dc:	adc	r3, r3, #0
   129e0:	str	r3, [fp, #-96]	; 0xffffffa0
   129e4:	ldr	r3, [pc, #372]	; 12b60 <boolean_expression_is_read_properly@@Base+0x45c>
   129e8:	add	r3, pc, r3
   129ec:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   129f0:	strd	r0, [r3, #56]	; 0x38
   129f4:	ldr	r3, [pc, #360]	; 12b64 <boolean_expression_is_read_properly@@Base+0x460>
   129f8:	add	r3, pc, r3
   129fc:	mov	r2, #105	; 0x69
   12a00:	ldr	r1, [pc, #352]	; 12b68 <boolean_expression_is_read_properly@@Base+0x464>
   12a04:	add	r1, pc, r1
   12a08:	ldr	r0, [pc, #348]	; 12b6c <boolean_expression_is_read_properly@@Base+0x468>
   12a0c:	add	r0, pc, r0
   12a10:	bl	119b4 <__assert_fail@plt>
   12a14:	ldr	r3, [pc, #340]	; 12b70 <boolean_expression_is_read_properly@@Base+0x46c>
   12a18:	ldr	r3, [sl, r3]
   12a1c:	ldr	r3, [r3, #408]	; 0x198
   12a20:	cmp	r3, #1
   12a24:	beq	12a74 <boolean_expression_is_read_properly@@Base+0x370>
   12a28:	ldr	r3, [pc, #324]	; 12b74 <boolean_expression_is_read_properly@@Base+0x470>
   12a2c:	add	r3, pc, r3
   12a30:	ldrd	r2, [r3, #72]	; 0x48
   12a34:	adds	r1, r2, #1
   12a38:	str	r1, [fp, #-116]	; 0xffffff8c
   12a3c:	adc	r3, r3, #0
   12a40:	str	r3, [fp, #-112]	; 0xffffff90
   12a44:	ldr	r3, [pc, #300]	; 12b78 <boolean_expression_is_read_properly@@Base+0x474>
   12a48:	add	r3, pc, r3
   12a4c:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   12a50:	strd	r0, [r3, #72]	; 0x48
   12a54:	ldr	r3, [pc, #288]	; 12b7c <boolean_expression_is_read_properly@@Base+0x478>
   12a58:	add	r3, pc, r3
   12a5c:	mov	r2, #106	; 0x6a
   12a60:	ldr	r1, [pc, #280]	; 12b80 <boolean_expression_is_read_properly@@Base+0x47c>
   12a64:	add	r1, pc, r1
   12a68:	ldr	r0, [pc, #276]	; 12b84 <boolean_expression_is_read_properly@@Base+0x480>
   12a6c:	add	r0, pc, r0
   12a70:	bl	119b4 <__assert_fail@plt>
   12a74:	ldr	r3, [pc, #268]	; 12b88 <boolean_expression_is_read_properly@@Base+0x484>
   12a78:	add	r3, pc, r3
   12a7c:	ldrd	r2, [r3, #64]	; 0x40
   12a80:	adds	r1, r2, #1
   12a84:	str	r1, [fp, #-108]	; 0xffffff94
   12a88:	adc	r3, r3, #0
   12a8c:	str	r3, [fp, #-104]	; 0xffffff98
   12a90:	ldr	r3, [pc, #244]	; 12b8c <boolean_expression_is_read_properly@@Base+0x488>
   12a94:	add	r3, pc, r3
   12a98:	ldrd	r0, [fp, #-108]	; 0xffffff94
   12a9c:	strd	r0, [r3, #64]	; 0x40
   12aa0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12aa4:	ldr	r3, [r3]
   12aa8:	cmp	r3, #5
   12aac:	beq	12afc <boolean_expression_is_read_properly@@Base+0x3f8>
   12ab0:	ldr	r3, [pc, #216]	; 12b90 <boolean_expression_is_read_properly@@Base+0x48c>
   12ab4:	add	r3, pc, r3
   12ab8:	ldrd	r2, [r3, #80]	; 0x50
   12abc:	adds	r1, r2, #1
   12ac0:	str	r1, [fp, #-124]	; 0xffffff84
   12ac4:	adc	r3, r3, #0
   12ac8:	str	r3, [fp, #-120]	; 0xffffff88
   12acc:	ldr	r3, [pc, #192]	; 12b94 <boolean_expression_is_read_properly@@Base+0x490>
   12ad0:	add	r3, pc, r3
   12ad4:	ldrd	r0, [fp, #-124]	; 0xffffff84
   12ad8:	strd	r0, [r3, #80]	; 0x50
   12adc:	ldr	r3, [pc, #180]	; 12b98 <boolean_expression_is_read_properly@@Base+0x494>
   12ae0:	add	r3, pc, r3
   12ae4:	mov	r2, #107	; 0x6b
   12ae8:	ldr	r1, [pc, #172]	; 12b9c <boolean_expression_is_read_properly@@Base+0x498>
   12aec:	add	r1, pc, r1
   12af0:	ldr	r0, [pc, #168]	; 12ba0 <boolean_expression_is_read_properly@@Base+0x49c>
   12af4:	add	r0, pc, r0
   12af8:	bl	119b4 <__assert_fail@plt>
   12afc:	nop	{0}
   12b00:	sub	sp, fp, #32
   12b04:	ldrd	r4, [sp]
   12b08:	ldrd	r6, [sp, #8]
   12b0c:	ldrd	r8, [sp, #16]
   12b10:	ldrd	sl, [sp, #24]
   12b14:	add	sp, sp, #32
   12b18:	pop	{pc}		; (ldr pc, [sp], #4)
   12b1c:	ldrdeq	ip, [r1], -r4
   12b20:	andeq	sp, r1, ip, asr #17
   12b24:			; <UNDEFINED> instruction: 0x0001d8b8
   12b28:	andeq	sp, r1, ip, asr #16
   12b2c:	andeq	sp, r1, r8, lsr r8
   12b30:	strdeq	sp, [r1], -r0
   12b34:	ldrdeq	sp, [r1], -ip
   12b38:	andeq	sp, r1, r0, lsr #15
   12b3c:	andeq	sp, r1, ip, lsl #15
   12b40:	andeq	sp, r1, r0, asr r7
   12b44:	andeq	sp, r1, r4, lsr r7
   12b48:	strdeq	sp, [r1], -r4
   12b4c:	ldrdeq	sp, [r1], -r8
   12b50:	muleq	r1, ip, r6
   12b54:	andeq	sp, r1, r0, lsl #13
   12b58:	andeq	r0, r0, ip, lsr #1
   12b5c:	andeq	sp, r1, ip, lsr #12
   12b60:	andeq	sp, r1, r0, lsl r6
   12b64:	andeq	fp, r0, r8, ror r8
   12b68:	andeq	fp, r0, r8, lsl #7
   12b6c:	andeq	fp, r0, r0, lsr #8
   12b70:	muleq	r0, ip, r0
   12b74:	andeq	sp, r1, ip, asr #11
   12b78:			; <UNDEFINED> instruction: 0x0001d5b0
   12b7c:	andeq	fp, r0, r8, lsl r8
   12b80:	andeq	fp, r0, r8, lsr #6
   12b84:	ldrdeq	fp, [r0], -ip
   12b88:	andeq	sp, r1, r0, lsl #11
   12b8c:	andeq	sp, r1, r4, ror #10
   12b90:	andeq	sp, r1, r4, asr #10
   12b94:	andeq	sp, r1, r8, lsr #10
   12b98:	muleq	r0, r0, r7
   12b9c:	andeq	fp, r0, r0, lsr #5
   12ba0:	andeq	fp, r0, r4, ror r3

00012ba4 <boolean_expression_complex@@Base>:
   12ba4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12ba8:	strd	r6, [sp, #8]
   12bac:	strd	r8, [sp, #16]
   12bb0:	strd	sl, [sp, #24]
   12bb4:	str	lr, [sp, #32]
   12bb8:	add	fp, sp, #32
   12bbc:	sub	sp, sp, #132	; 0x84
   12bc0:	ldr	sl, [pc, #1496]	; 131a0 <boolean_expression_complex@@Base+0x5fc>
   12bc4:	add	sl, pc, sl
   12bc8:	ldr	r3, [pc, #1492]	; 131a4 <boolean_expression_complex@@Base+0x600>
   12bcc:	add	r3, pc, r3
   12bd0:	ldrd	r2, [r3]
   12bd4:	adds	r0, r2, #1
   12bd8:	adc	r1, r3, #0
   12bdc:	ldr	r3, [pc, #1476]	; 131a8 <boolean_expression_complex@@Base+0x604>
   12be0:	add	r3, pc, r3
   12be4:	strd	r0, [r3]
   12be8:	mov	r3, #0
   12bec:	str	r3, [fp, #-40]	; 0xffffffd8
   12bf0:	mov	r3, #0
   12bf4:	str	r3, [fp, #-44]	; 0xffffffd4
   12bf8:	mov	r0, #3
   12bfc:	bl	118b8 <malloc@plt>
   12c00:	mov	r3, r0
   12c04:	str	r3, [fp, #-48]	; 0xffffffd0
   12c08:	mov	r0, #3
   12c0c:	bl	118b8 <malloc@plt>
   12c10:	mov	r3, r0
   12c14:	str	r3, [fp, #-52]	; 0xffffffcc
   12c18:	mov	r0, #3
   12c1c:	bl	118b8 <malloc@plt>
   12c20:	mov	r3, r0
   12c24:	str	r3, [fp, #-56]	; 0xffffffc8
   12c28:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12c2c:	mov	r3, #60	; 0x3c
   12c30:	strb	r3, [r2]
   12c34:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c38:	add	r2, r3, #1
   12c3c:	mov	r3, #61	; 0x3d
   12c40:	strb	r3, [r2]
   12c44:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c48:	add	r2, r3, #2
   12c4c:	mov	r3, #0
   12c50:	strb	r3, [r2]
   12c54:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12c58:	mov	r3, #38	; 0x26
   12c5c:	strb	r3, [r2]
   12c60:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12c64:	add	r2, r3, #1
   12c68:	mov	r3, #38	; 0x26
   12c6c:	strb	r3, [r2]
   12c70:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12c74:	add	r2, r3, #2
   12c78:	mov	r3, #0
   12c7c:	strb	r3, [r2]
   12c80:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12c84:	mov	r3, #61	; 0x3d
   12c88:	strb	r3, [r2]
   12c8c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12c90:	add	r2, r3, #1
   12c94:	mov	r3, #61	; 0x3d
   12c98:	strb	r3, [r2]
   12c9c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12ca0:	add	r2, r3, #2
   12ca4:	mov	r3, #0
   12ca8:	strb	r3, [r2]
   12cac:	sub	r2, fp, #72	; 0x48
   12cb0:	sub	r3, fp, #76	; 0x4c
   12cb4:	mov	r1, r2
   12cb8:	mov	r0, r3
   12cbc:	bl	1994c <init_grammar@@Base>
   12cc0:	ldr	r3, [pc, #1252]	; 131ac <boolean_expression_complex@@Base+0x608>
   12cc4:	add	r3, pc, r3
   12cc8:	ldrd	r2, [r3, #8]
   12ccc:	adds	r4, r2, #1
   12cd0:	adc	r5, r3, #0
   12cd4:	ldr	r3, [pc, #1236]	; 131b0 <boolean_expression_complex@@Base+0x60c>
   12cd8:	add	r3, pc, r3
   12cdc:	strd	r4, [r3, #8]
   12ce0:	mov	r0, #40	; 0x28
   12ce4:	bl	118b8 <malloc@plt>
   12ce8:	mov	r3, r0
   12cec:	str	r3, [fp, #-60]	; 0xffffffc4
   12cf0:	mov	r0, #8
   12cf4:	bl	118b8 <malloc@plt>
   12cf8:	mov	r3, r0
   12cfc:	mov	r2, r3
   12d00:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12d04:	str	r2, [r3]
   12d08:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12d0c:	ldr	r3, [r3]
   12d10:	mov	r1, #2
   12d14:	mov	r0, r3
   12d18:	bl	17a40 <init_token_int_value@@Base>
   12d1c:	ldr	r3, [pc, #1168]	; 131b4 <boolean_expression_complex@@Base+0x610>
   12d20:	add	r3, pc, r3
   12d24:	ldrd	r2, [r3, #16]
   12d28:	adds	r6, r2, #1
   12d2c:	adc	r7, r3, #0
   12d30:	ldr	r3, [pc, #1152]	; 131b8 <boolean_expression_complex@@Base+0x614>
   12d34:	add	r3, pc, r3
   12d38:	strd	r6, [r3, #16]
   12d3c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12d40:	add	r4, r3, #4
   12d44:	mov	r0, #8
   12d48:	bl	118b8 <malloc@plt>
   12d4c:	mov	r3, r0
   12d50:	str	r3, [r4]
   12d54:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12d58:	add	r3, r3, #4
   12d5c:	ldr	r3, [r3]
   12d60:	mov	r1, #2
   12d64:	mov	r0, r3
   12d68:	bl	17a40 <init_token_int_value@@Base>
   12d6c:	ldr	r3, [pc, #1096]	; 131bc <boolean_expression_complex@@Base+0x618>
   12d70:	add	r3, pc, r3
   12d74:	ldrd	r2, [r3, #24]
   12d78:	adds	r8, r2, #1
   12d7c:	adc	r9, r3, #0
   12d80:	ldr	r3, [pc, #1080]	; 131c0 <boolean_expression_complex@@Base+0x61c>
   12d84:	add	r3, pc, r3
   12d88:	strd	r8, [r3, #24]
   12d8c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12d90:	add	r4, r3, #8
   12d94:	mov	r0, #8
   12d98:	bl	118b8 <malloc@plt>
   12d9c:	mov	r3, r0
   12da0:	str	r3, [r4]
   12da4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12da8:	add	r3, r3, #8
   12dac:	ldr	r3, [r3]
   12db0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12db4:	mov	r0, r3
   12db8:	bl	17e80 <init_token_boolean_op@@Base>
   12dbc:	ldr	r3, [pc, #1024]	; 131c4 <boolean_expression_complex@@Base+0x620>
   12dc0:	add	r3, pc, r3
   12dc4:	ldrd	r2, [r3, #32]
   12dc8:	adds	r1, r2, #1
   12dcc:	str	r1, [fp, #-84]	; 0xffffffac
   12dd0:	adc	r3, r3, #0
   12dd4:	str	r3, [fp, #-80]	; 0xffffffb0
   12dd8:	ldr	r3, [pc, #1000]	; 131c8 <boolean_expression_complex@@Base+0x624>
   12ddc:	add	r3, pc, r3
   12de0:	ldrd	r0, [fp, #-84]	; 0xffffffac
   12de4:	strd	r0, [r3, #32]
   12de8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12dec:	add	r4, r3, #12
   12df0:	mov	r0, #8
   12df4:	bl	118b8 <malloc@plt>
   12df8:	mov	r3, r0
   12dfc:	str	r3, [r4]
   12e00:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12e04:	add	r3, r3, #12
   12e08:	ldr	r3, [r3]
   12e0c:	mov	r1, #1
   12e10:	mov	r0, r3
   12e14:	bl	17a40 <init_token_int_value@@Base>
   12e18:	ldr	r3, [pc, #940]	; 131cc <boolean_expression_complex@@Base+0x628>
   12e1c:	add	r3, pc, r3
   12e20:	ldrd	r2, [r3, #40]	; 0x28
   12e24:	adds	r1, r2, #1
   12e28:	str	r1, [fp, #-92]	; 0xffffffa4
   12e2c:	adc	r3, r3, #0
   12e30:	str	r3, [fp, #-88]	; 0xffffffa8
   12e34:	ldr	r3, [pc, #916]	; 131d0 <boolean_expression_complex@@Base+0x62c>
   12e38:	add	r3, pc, r3
   12e3c:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   12e40:	strd	r0, [r3, #40]	; 0x28
   12e44:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12e48:	add	r4, r3, #16
   12e4c:	mov	r0, #8
   12e50:	bl	118b8 <malloc@plt>
   12e54:	mov	r3, r0
   12e58:	str	r3, [r4]
   12e5c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12e60:	add	r3, r3, #16
   12e64:	ldr	r3, [r3]
   12e68:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12e6c:	mov	r0, r3
   12e70:	bl	17e80 <init_token_boolean_op@@Base>
   12e74:	ldr	r3, [pc, #856]	; 131d4 <boolean_expression_complex@@Base+0x630>
   12e78:	add	r3, pc, r3
   12e7c:	ldrd	r2, [r3, #48]	; 0x30
   12e80:	adds	r1, r2, #1
   12e84:	str	r1, [fp, #-100]	; 0xffffff9c
   12e88:	adc	r3, r3, #0
   12e8c:	str	r3, [fp, #-96]	; 0xffffffa0
   12e90:	ldr	r3, [pc, #832]	; 131d8 <boolean_expression_complex@@Base+0x634>
   12e94:	add	r3, pc, r3
   12e98:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   12e9c:	strd	r0, [r3, #48]	; 0x30
   12ea0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12ea4:	add	r4, r3, #20
   12ea8:	mov	r0, #8
   12eac:	bl	118b8 <malloc@plt>
   12eb0:	mov	r3, r0
   12eb4:	str	r3, [r4]
   12eb8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12ebc:	add	r3, r3, #20
   12ec0:	ldr	r3, [r3]
   12ec4:	mov	r1, #4
   12ec8:	mov	r0, r3
   12ecc:	bl	17a40 <init_token_int_value@@Base>
   12ed0:	ldr	r3, [pc, #772]	; 131dc <boolean_expression_complex@@Base+0x638>
   12ed4:	add	r3, pc, r3
   12ed8:	ldrd	r2, [r3, #56]	; 0x38
   12edc:	adds	r1, r2, #1
   12ee0:	str	r1, [fp, #-108]	; 0xffffff94
   12ee4:	adc	r3, r3, #0
   12ee8:	str	r3, [fp, #-104]	; 0xffffff98
   12eec:	ldr	r3, [pc, #748]	; 131e0 <boolean_expression_complex@@Base+0x63c>
   12ef0:	add	r3, pc, r3
   12ef4:	ldrd	r0, [fp, #-108]	; 0xffffff94
   12ef8:	strd	r0, [r3, #56]	; 0x38
   12efc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12f00:	add	r4, r3, #24
   12f04:	mov	r0, #8
   12f08:	bl	118b8 <malloc@plt>
   12f0c:	mov	r3, r0
   12f10:	str	r3, [r4]
   12f14:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12f18:	add	r3, r3, #24
   12f1c:	ldr	r3, [r3]
   12f20:	mov	r1, #4
   12f24:	mov	r0, r3
   12f28:	bl	17a40 <init_token_int_value@@Base>
   12f2c:	ldr	r3, [pc, #688]	; 131e4 <boolean_expression_complex@@Base+0x640>
   12f30:	add	r3, pc, r3
   12f34:	ldrd	r2, [r3, #64]	; 0x40
   12f38:	adds	r1, r2, #1
   12f3c:	str	r1, [fp, #-116]	; 0xffffff8c
   12f40:	adc	r3, r3, #0
   12f44:	str	r3, [fp, #-112]	; 0xffffff90
   12f48:	ldr	r3, [pc, #664]	; 131e8 <boolean_expression_complex@@Base+0x644>
   12f4c:	add	r3, pc, r3
   12f50:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   12f54:	strd	r0, [r3, #64]	; 0x40
   12f58:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12f5c:	add	r4, r3, #28
   12f60:	mov	r0, #8
   12f64:	bl	118b8 <malloc@plt>
   12f68:	mov	r3, r0
   12f6c:	str	r3, [r4]
   12f70:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12f74:	add	r3, r3, #28
   12f78:	ldr	r3, [r3]
   12f7c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12f80:	mov	r0, r3
   12f84:	bl	17e80 <init_token_boolean_op@@Base>
   12f88:	ldr	r3, [pc, #604]	; 131ec <boolean_expression_complex@@Base+0x648>
   12f8c:	add	r3, pc, r3
   12f90:	ldrd	r2, [r3, #72]	; 0x48
   12f94:	adds	r1, r2, #1
   12f98:	str	r1, [fp, #-124]	; 0xffffff84
   12f9c:	adc	r3, r3, #0
   12fa0:	str	r3, [fp, #-120]	; 0xffffff88
   12fa4:	ldr	r3, [pc, #580]	; 131f0 <boolean_expression_complex@@Base+0x64c>
   12fa8:	add	r3, pc, r3
   12fac:	ldrd	r0, [fp, #-124]	; 0xffffff84
   12fb0:	strd	r0, [r3, #72]	; 0x48
   12fb4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12fb8:	add	r4, r3, #32
   12fbc:	mov	r0, #8
   12fc0:	bl	118b8 <malloc@plt>
   12fc4:	mov	r3, r0
   12fc8:	str	r3, [r4]
   12fcc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12fd0:	add	r3, r3, #32
   12fd4:	ldr	r3, [r3]
   12fd8:	mov	r1, #4
   12fdc:	mov	r0, r3
   12fe0:	bl	17a40 <init_token_int_value@@Base>
   12fe4:	ldr	r3, [pc, #520]	; 131f4 <boolean_expression_complex@@Base+0x650>
   12fe8:	add	r3, pc, r3
   12fec:	ldrd	r2, [r3, #80]	; 0x50
   12ff0:	adds	r1, r2, #1
   12ff4:	str	r1, [fp, #-132]	; 0xffffff7c
   12ff8:	adc	r3, r3, #0
   12ffc:	str	r3, [fp, #-128]	; 0xffffff80
   13000:	ldr	r3, [pc, #496]	; 131f8 <boolean_expression_complex@@Base+0x654>
   13004:	add	r3, pc, r3
   13008:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   1300c:	strd	r0, [r3, #80]	; 0x50
   13010:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13014:	add	r4, r3, #36	; 0x24
   13018:	mov	r0, #4
   1301c:	bl	118b8 <malloc@plt>
   13020:	mov	r3, r0
   13024:	str	r3, [r4]
   13028:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1302c:	add	r3, r3, #36	; 0x24
   13030:	ldr	r3, [r3]
   13034:	mov	r0, r3
   13038:	bl	17b80 <init_token_cpar@@Base>
   1303c:	ldr	r3, [pc, #440]	; 131fc <boolean_expression_complex@@Base+0x658>
   13040:	add	r3, pc, r3
   13044:	ldrd	r2, [r3, #88]	; 0x58
   13048:	adds	r1, r2, #1
   1304c:	str	r1, [fp, #-140]	; 0xffffff74
   13050:	adc	r3, r3, #0
   13054:	str	r3, [fp, #-136]	; 0xffffff78
   13058:	ldr	r3, [pc, #416]	; 13200 <boolean_expression_complex@@Base+0x65c>
   1305c:	add	r3, pc, r3
   13060:	ldrd	r0, [fp, #-140]	; 0xffffff74
   13064:	strd	r0, [r3, #88]	; 0x58
   13068:	ldr	r3, [pc, #404]	; 13204 <boolean_expression_complex@@Base+0x660>
   1306c:	ldr	r3, [sl, r3]
   13070:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13074:	str	r2, [r3, #228]	; 0xe4
   13078:	ldr	r3, [pc, #388]	; 13204 <boolean_expression_complex@@Base+0x660>
   1307c:	ldr	r3, [sl, r3]
   13080:	mov	r2, #10
   13084:	str	r2, [r3, #220]	; 0xdc
   13088:	sub	r3, fp, #76	; 0x4c
   1308c:	mov	r0, r3
   13090:	bl	1a9dc <read_boolean_expression@@Base>
   13094:	str	r0, [fp, #-40]	; 0xffffffd8
   13098:	ldr	r3, [pc, #356]	; 13204 <boolean_expression_complex@@Base+0x660>
   1309c:	ldr	r3, [sl, r3]
   130a0:	ldr	r3, [r3, #204]	; 0xcc
   130a4:	cmp	r3, #10
   130a8:	beq	130f8 <boolean_expression_complex@@Base+0x554>
   130ac:	ldr	r3, [pc, #340]	; 13208 <boolean_expression_complex@@Base+0x664>
   130b0:	add	r3, pc, r3
   130b4:	ldrd	r2, [r3, #96]	; 0x60
   130b8:	adds	r1, r2, #1
   130bc:	str	r1, [fp, #-148]	; 0xffffff6c
   130c0:	adc	r3, r3, #0
   130c4:	str	r3, [fp, #-144]	; 0xffffff70
   130c8:	ldr	r3, [pc, #316]	; 1320c <boolean_expression_complex@@Base+0x668>
   130cc:	add	r3, pc, r3
   130d0:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   130d4:	strd	r0, [r3, #96]	; 0x60
   130d8:	ldr	r3, [pc, #304]	; 13210 <boolean_expression_complex@@Base+0x66c>
   130dc:	add	r3, pc, r3
   130e0:	mov	r2, #166	; 0xa6
   130e4:	ldr	r1, [pc, #296]	; 13214 <boolean_expression_complex@@Base+0x670>
   130e8:	add	r1, pc, r1
   130ec:	ldr	r0, [pc, #292]	; 13218 <boolean_expression_complex@@Base+0x674>
   130f0:	add	r0, pc, r0
   130f4:	bl	119b4 <__assert_fail@plt>
   130f8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   130fc:	ldr	r3, [r3]
   13100:	cmp	r3, #5
   13104:	beq	13154 <boolean_expression_complex@@Base+0x5b0>
   13108:	ldr	r3, [pc, #268]	; 1321c <boolean_expression_complex@@Base+0x678>
   1310c:	add	r3, pc, r3
   13110:	ldrd	r2, [r3, #112]	; 0x70
   13114:	adds	r1, r2, #1
   13118:	str	r1, [fp, #-164]	; 0xffffff5c
   1311c:	adc	r3, r3, #0
   13120:	str	r3, [fp, #-160]	; 0xffffff60
   13124:	ldr	r3, [pc, #244]	; 13220 <boolean_expression_complex@@Base+0x67c>
   13128:	add	r3, pc, r3
   1312c:	ldrd	r0, [fp, #-164]	; 0xffffff5c
   13130:	strd	r0, [r3, #112]	; 0x70
   13134:	ldr	r3, [pc, #232]	; 13224 <boolean_expression_complex@@Base+0x680>
   13138:	add	r3, pc, r3
   1313c:	mov	r2, #167	; 0xa7
   13140:	ldr	r1, [pc, #224]	; 13228 <boolean_expression_complex@@Base+0x684>
   13144:	add	r1, pc, r1
   13148:	ldr	r0, [pc, #220]	; 1322c <boolean_expression_complex@@Base+0x688>
   1314c:	add	r0, pc, r0
   13150:	bl	119b4 <__assert_fail@plt>
   13154:	ldr	r3, [pc, #212]	; 13230 <boolean_expression_complex@@Base+0x68c>
   13158:	add	r3, pc, r3
   1315c:	ldrd	r2, [r3, #104]	; 0x68
   13160:	adds	r1, r2, #1
   13164:	str	r1, [fp, #-156]	; 0xffffff64
   13168:	adc	r3, r3, #0
   1316c:	str	r3, [fp, #-152]	; 0xffffff68
   13170:	ldr	r3, [pc, #188]	; 13234 <boolean_expression_complex@@Base+0x690>
   13174:	add	r3, pc, r3
   13178:	ldrd	r0, [fp, #-156]	; 0xffffff64
   1317c:	strd	r0, [r3, #104]	; 0x68
   13180:	nop	{0}
   13184:	sub	sp, fp, #32
   13188:	ldrd	r4, [sp]
   1318c:	ldrd	r6, [sp, #8]
   13190:	ldrd	r8, [sp, #16]
   13194:	ldrd	sl, [sp, #24]
   13198:	add	sp, sp, #32
   1319c:	pop	{pc}		; (ldr pc, [sp], #4)
   131a0:	andeq	ip, r1, r4, lsr r4
   131a4:			; <UNDEFINED> instruction: 0x0001d3b4
   131a8:	andeq	sp, r1, r0, lsr #7
   131ac:			; <UNDEFINED> instruction: 0x0001d2bc
   131b0:	andeq	sp, r1, r8, lsr #5
   131b4:	andeq	sp, r1, r0, ror #4
   131b8:	andeq	sp, r1, ip, asr #4
   131bc:	andeq	sp, r1, r0, lsl r2
   131c0:	strdeq	sp, [r1], -ip
   131c4:	andeq	sp, r1, r0, asr #3
   131c8:	andeq	sp, r1, r4, lsr #3
   131cc:	andeq	sp, r1, r4, ror #2
   131d0:	andeq	sp, r1, r8, asr #2
   131d4:	andeq	sp, r1, r8, lsl #2
   131d8:	andeq	sp, r1, ip, ror #1
   131dc:	andeq	sp, r1, ip, lsr #1
   131e0:	muleq	r1, r0, r0
   131e4:	andeq	sp, r1, r0, asr r0
   131e8:	andeq	sp, r1, r4, lsr r0
   131ec:	strdeq	ip, [r1], -r4
   131f0:	ldrdeq	ip, [r1], -r8
   131f4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   131f8:	andeq	ip, r1, ip, ror pc
   131fc:	andeq	ip, r1, r0, asr #30
   13200:	andeq	ip, r1, r4, lsr #30
   13204:	andeq	r0, r0, ip, lsr #1
   13208:	ldrdeq	ip, [r1], -r0
   1320c:			; <UNDEFINED> instruction: 0x0001ceb4
   13210:			; <UNDEFINED> instruction: 0x0000b1b8
   13214:	andeq	sl, r0, r4, lsr #25
   13218:	muleq	r0, r8, sp
   1321c:	andeq	ip, r1, r4, ror lr
   13220:	andeq	ip, r1, r8, asr lr
   13224:	andeq	fp, r0, ip, asr r1
   13228:	andeq	sl, r0, r8, asr #24
   1322c:	andeq	sl, r0, ip, lsl sp
   13230:	andeq	ip, r1, r8, lsr #28
   13234:	andeq	ip, r1, ip, lsl #28

00013238 <boolean_binary_operator_is_read_properly@@Base>:
   13238:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1323c:	strd	r6, [sp, #8]
   13240:	strd	r8, [sp, #16]
   13244:	strd	sl, [sp, #24]
   13248:	str	lr, [sp, #32]
   1324c:	add	fp, sp, #32
   13250:	sub	sp, sp, #92	; 0x5c
   13254:	ldr	sl, [pc, #1028]	; 13660 <boolean_binary_operator_is_read_properly@@Base+0x428>
   13258:	add	sl, pc, sl
   1325c:	ldr	r3, [pc, #1024]	; 13664 <boolean_binary_operator_is_read_properly@@Base+0x42c>
   13260:	add	r3, pc, r3
   13264:	ldrd	r2, [r3]
   13268:	adds	r0, r2, #1
   1326c:	adc	r1, r3, #0
   13270:	ldr	r3, [pc, #1008]	; 13668 <boolean_binary_operator_is_read_properly@@Base+0x430>
   13274:	add	r3, pc, r3
   13278:	strd	r0, [r3]
   1327c:	mov	r3, #0
   13280:	str	r3, [fp, #-40]	; 0xffffffd8
   13284:	mov	r3, #0
   13288:	str	r3, [fp, #-44]	; 0xffffffd4
   1328c:	mov	r0, #3
   13290:	bl	118b8 <malloc@plt>
   13294:	mov	r3, r0
   13298:	str	r3, [fp, #-48]	; 0xffffffd0
   1329c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   132a0:	mov	r3, #33	; 0x21
   132a4:	strb	r3, [r2]
   132a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   132ac:	add	r2, r3, #1
   132b0:	mov	r3, #61	; 0x3d
   132b4:	strb	r3, [r2]
   132b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   132bc:	add	r2, r3, #2
   132c0:	mov	r3, #0
   132c4:	strb	r3, [r2]
   132c8:	sub	r2, fp, #64	; 0x40
   132cc:	sub	r3, fp, #68	; 0x44
   132d0:	mov	r1, r2
   132d4:	mov	r0, r3
   132d8:	bl	1994c <init_grammar@@Base>
   132dc:	ldr	r3, [pc, #904]	; 1366c <boolean_binary_operator_is_read_properly@@Base+0x434>
   132e0:	add	r3, pc, r3
   132e4:	ldrd	r2, [r3, #8]
   132e8:	adds	r4, r2, #1
   132ec:	adc	r5, r3, #0
   132f0:	ldr	r3, [pc, #888]	; 13670 <boolean_binary_operator_is_read_properly@@Base+0x438>
   132f4:	add	r3, pc, r3
   132f8:	strd	r4, [r3, #8]
   132fc:	mov	r0, #12
   13300:	bl	118b8 <malloc@plt>
   13304:	mov	r3, r0
   13308:	str	r3, [fp, #-52]	; 0xffffffcc
   1330c:	mov	r0, #8
   13310:	bl	118b8 <malloc@plt>
   13314:	mov	r3, r0
   13318:	mov	r2, r3
   1331c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13320:	str	r2, [r3]
   13324:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13328:	ldr	r3, [r3]
   1332c:	mov	r1, #2
   13330:	mov	r0, r3
   13334:	bl	17a40 <init_token_int_value@@Base>
   13338:	ldr	r3, [pc, #820]	; 13674 <boolean_binary_operator_is_read_properly@@Base+0x43c>
   1333c:	add	r3, pc, r3
   13340:	ldrd	r2, [r3, #16]
   13344:	adds	r6, r2, #1
   13348:	adc	r7, r3, #0
   1334c:	ldr	r3, [pc, #804]	; 13678 <boolean_binary_operator_is_read_properly@@Base+0x440>
   13350:	add	r3, pc, r3
   13354:	strd	r6, [r3, #16]
   13358:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1335c:	add	r4, r3, #4
   13360:	mov	r0, #8
   13364:	bl	118b8 <malloc@plt>
   13368:	mov	r3, r0
   1336c:	str	r3, [r4]
   13370:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13374:	add	r3, r3, #4
   13378:	ldr	r3, [r3]
   1337c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13380:	mov	r0, r3
   13384:	bl	17e80 <init_token_boolean_op@@Base>
   13388:	ldr	r3, [pc, #748]	; 1367c <boolean_binary_operator_is_read_properly@@Base+0x444>
   1338c:	add	r3, pc, r3
   13390:	ldrd	r2, [r3, #24]
   13394:	adds	r8, r2, #1
   13398:	adc	r9, r3, #0
   1339c:	ldr	r3, [pc, #732]	; 13680 <boolean_binary_operator_is_read_properly@@Base+0x448>
   133a0:	add	r3, pc, r3
   133a4:	strd	r8, [r3, #24]
   133a8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   133ac:	add	r4, r3, #8
   133b0:	mov	r0, #8
   133b4:	bl	118b8 <malloc@plt>
   133b8:	mov	r3, r0
   133bc:	str	r3, [r4]
   133c0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   133c4:	add	r3, r3, #8
   133c8:	ldr	r3, [r3]
   133cc:	mov	r1, #1
   133d0:	mov	r0, r3
   133d4:	bl	17a40 <init_token_int_value@@Base>
   133d8:	ldr	r3, [pc, #676]	; 13684 <boolean_binary_operator_is_read_properly@@Base+0x44c>
   133dc:	add	r3, pc, r3
   133e0:	ldrd	r2, [r3, #32]
   133e4:	adds	r1, r2, #1
   133e8:	str	r1, [fp, #-76]	; 0xffffffb4
   133ec:	adc	r3, r3, #0
   133f0:	str	r3, [fp, #-72]	; 0xffffffb8
   133f4:	ldr	r3, [pc, #652]	; 13688 <boolean_binary_operator_is_read_properly@@Base+0x450>
   133f8:	add	r3, pc, r3
   133fc:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   13400:	strd	r0, [r3, #32]
   13404:	ldr	r3, [pc, #640]	; 1368c <boolean_binary_operator_is_read_properly@@Base+0x454>
   13408:	ldr	r2, [sl, r3]
   1340c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13410:	str	r3, [r2, #228]	; 0xe4
   13414:	ldr	r3, [pc, #624]	; 1368c <boolean_binary_operator_is_read_properly@@Base+0x454>
   13418:	ldr	r2, [sl, r3]
   1341c:	mov	r3, #3
   13420:	str	r3, [r2, #220]	; 0xdc
   13424:	sub	r3, fp, #68	; 0x44
   13428:	mov	r0, r3
   1342c:	bl	1b04c <read_boolean_binary_expression@@Base>
   13430:	str	r0, [fp, #-40]	; 0xffffffd8
   13434:	ldr	r3, [pc, #592]	; 1368c <boolean_binary_operator_is_read_properly@@Base+0x454>
   13438:	ldr	r3, [sl, r3]
   1343c:	ldr	r3, [r3, #204]	; 0xcc
   13440:	cmp	r3, #3
   13444:	beq	13494 <boolean_binary_operator_is_read_properly@@Base+0x25c>
   13448:	ldr	r3, [pc, #576]	; 13690 <boolean_binary_operator_is_read_properly@@Base+0x458>
   1344c:	add	r3, pc, r3
   13450:	ldrd	r2, [r3, #40]	; 0x28
   13454:	adds	r1, r2, #1
   13458:	str	r1, [fp, #-84]	; 0xffffffac
   1345c:	adc	r3, r3, #0
   13460:	str	r3, [fp, #-80]	; 0xffffffb0
   13464:	ldr	r3, [pc, #552]	; 13694 <boolean_binary_operator_is_read_properly@@Base+0x45c>
   13468:	add	r3, pc, r3
   1346c:	ldrd	r0, [fp, #-84]	; 0xffffffac
   13470:	strd	r0, [r3, #40]	; 0x28
   13474:	ldr	r3, [pc, #540]	; 13698 <boolean_binary_operator_is_read_properly@@Base+0x460>
   13478:	add	r3, pc, r3
   1347c:	mov	r2, #200	; 0xc8
   13480:	ldr	r1, [pc, #532]	; 1369c <boolean_binary_operator_is_read_properly@@Base+0x464>
   13484:	add	r1, pc, r1
   13488:	ldr	r0, [pc, #528]	; 136a0 <boolean_binary_operator_is_read_properly@@Base+0x468>
   1348c:	add	r0, pc, r0
   13490:	bl	119b4 <__assert_fail@plt>
   13494:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13498:	ldr	r3, [r3]
   1349c:	cmp	r3, #5
   134a0:	beq	134f0 <boolean_binary_operator_is_read_properly@@Base+0x2b8>
   134a4:	ldr	r3, [pc, #504]	; 136a4 <boolean_binary_operator_is_read_properly@@Base+0x46c>
   134a8:	add	r3, pc, r3
   134ac:	ldrd	r2, [r3, #56]	; 0x38
   134b0:	adds	r1, r2, #1
   134b4:	str	r1, [fp, #-100]	; 0xffffff9c
   134b8:	adc	r3, r3, #0
   134bc:	str	r3, [fp, #-96]	; 0xffffffa0
   134c0:	ldr	r3, [pc, #480]	; 136a8 <boolean_binary_operator_is_read_properly@@Base+0x470>
   134c4:	add	r3, pc, r3
   134c8:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   134cc:	strd	r0, [r3, #56]	; 0x38
   134d0:	ldr	r3, [pc, #468]	; 136ac <boolean_binary_operator_is_read_properly@@Base+0x474>
   134d4:	add	r3, pc, r3
   134d8:	mov	r2, #201	; 0xc9
   134dc:	ldr	r1, [pc, #460]	; 136b0 <boolean_binary_operator_is_read_properly@@Base+0x478>
   134e0:	add	r1, pc, r1
   134e4:	ldr	r0, [pc, #456]	; 136b4 <boolean_binary_operator_is_read_properly@@Base+0x47c>
   134e8:	add	r0, pc, r0
   134ec:	bl	119b4 <__assert_fail@plt>
   134f0:	ldr	r3, [pc, #448]	; 136b8 <boolean_binary_operator_is_read_properly@@Base+0x480>
   134f4:	add	r3, pc, r3
   134f8:	ldrd	r2, [r3, #48]	; 0x30
   134fc:	adds	r1, r2, #1
   13500:	str	r1, [fp, #-92]	; 0xffffffa4
   13504:	adc	r3, r3, #0
   13508:	str	r3, [fp, #-88]	; 0xffffffa8
   1350c:	ldr	r3, [pc, #424]	; 136bc <boolean_binary_operator_is_read_properly@@Base+0x484>
   13510:	add	r3, pc, r3
   13514:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   13518:	strd	r0, [r3, #48]	; 0x30
   1351c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13520:	str	r3, [fp, #-44]	; 0xffffffd4
   13524:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13528:	ldr	r3, [r3, #8]
   1352c:	ldr	r3, [r3]
   13530:	cmp	r3, #1
   13534:	beq	13584 <boolean_binary_operator_is_read_properly@@Base+0x34c>
   13538:	ldr	r3, [pc, #384]	; 136c0 <boolean_binary_operator_is_read_properly@@Base+0x488>
   1353c:	add	r3, pc, r3
   13540:	ldrd	r2, [r3, #64]	; 0x40
   13544:	adds	r1, r2, #1
   13548:	str	r1, [fp, #-108]	; 0xffffff94
   1354c:	adc	r3, r3, #0
   13550:	str	r3, [fp, #-104]	; 0xffffff98
   13554:	ldr	r3, [pc, #360]	; 136c4 <boolean_binary_operator_is_read_properly@@Base+0x48c>
   13558:	add	r3, pc, r3
   1355c:	ldrd	r0, [fp, #-108]	; 0xffffff94
   13560:	strd	r0, [r3, #64]	; 0x40
   13564:	ldr	r3, [pc, #348]	; 136c8 <boolean_binary_operator_is_read_properly@@Base+0x490>
   13568:	add	r3, pc, r3
   1356c:	mov	r2, #203	; 0xcb
   13570:	ldr	r1, [pc, #340]	; 136cc <boolean_binary_operator_is_read_properly@@Base+0x494>
   13574:	add	r1, pc, r1
   13578:	ldr	r0, [pc, #336]	; 136d0 <boolean_binary_operator_is_read_properly@@Base+0x498>
   1357c:	add	r0, pc, r0
   13580:	bl	119b4 <__assert_fail@plt>
   13584:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13588:	ldr	r3, [r3, #16]
   1358c:	cmp	r3, #1
   13590:	beq	135e0 <boolean_binary_operator_is_read_properly@@Base+0x3a8>
   13594:	ldr	r3, [pc, #312]	; 136d4 <boolean_binary_operator_is_read_properly@@Base+0x49c>
   13598:	add	r3, pc, r3
   1359c:	ldrd	r2, [r3, #72]	; 0x48
   135a0:	adds	r1, r2, #1
   135a4:	str	r1, [fp, #-116]	; 0xffffff8c
   135a8:	adc	r3, r3, #0
   135ac:	str	r3, [fp, #-112]	; 0xffffff90
   135b0:	ldr	r3, [pc, #288]	; 136d8 <boolean_binary_operator_is_read_properly@@Base+0x4a0>
   135b4:	add	r3, pc, r3
   135b8:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   135bc:	strd	r0, [r3, #72]	; 0x48
   135c0:	ldr	r3, [pc, #276]	; 136dc <boolean_binary_operator_is_read_properly@@Base+0x4a4>
   135c4:	add	r3, pc, r3
   135c8:	mov	r2, #204	; 0xcc
   135cc:	ldr	r1, [pc, #268]	; 136e0 <boolean_binary_operator_is_read_properly@@Base+0x4a8>
   135d0:	add	r1, pc, r1
   135d4:	ldr	r0, [pc, #264]	; 136e4 <boolean_binary_operator_is_read_properly@@Base+0x4ac>
   135d8:	add	r0, pc, r0
   135dc:	bl	119b4 <__assert_fail@plt>
   135e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   135e4:	ldr	r3, [r3, #12]
   135e8:	ldr	r3, [r3]
   135ec:	cmp	r3, #1
   135f0:	beq	13640 <boolean_binary_operator_is_read_properly@@Base+0x408>
   135f4:	ldr	r3, [pc, #236]	; 136e8 <boolean_binary_operator_is_read_properly@@Base+0x4b0>
   135f8:	add	r3, pc, r3
   135fc:	ldrd	r2, [r3, #80]	; 0x50
   13600:	adds	r1, r2, #1
   13604:	str	r1, [fp, #-124]	; 0xffffff84
   13608:	adc	r3, r3, #0
   1360c:	str	r3, [fp, #-120]	; 0xffffff88
   13610:	ldr	r3, [pc, #212]	; 136ec <boolean_binary_operator_is_read_properly@@Base+0x4b4>
   13614:	add	r3, pc, r3
   13618:	ldrd	r0, [fp, #-124]	; 0xffffff84
   1361c:	strd	r0, [r3, #80]	; 0x50
   13620:	ldr	r3, [pc, #200]	; 136f0 <boolean_binary_operator_is_read_properly@@Base+0x4b8>
   13624:	add	r3, pc, r3
   13628:	mov	r2, #205	; 0xcd
   1362c:	ldr	r1, [pc, #192]	; 136f4 <boolean_binary_operator_is_read_properly@@Base+0x4bc>
   13630:	add	r1, pc, r1
   13634:	ldr	r0, [pc, #188]	; 136f8 <boolean_binary_operator_is_read_properly@@Base+0x4c0>
   13638:	add	r0, pc, r0
   1363c:	bl	119b4 <__assert_fail@plt>
   13640:	nop	{0}
   13644:	sub	sp, fp, #32
   13648:	ldrd	r4, [sp]
   1364c:	ldrd	r6, [sp, #8]
   13650:	ldrd	r8, [sp, #16]
   13654:	ldrd	sl, [sp, #24]
   13658:	add	sp, sp, #32
   1365c:	pop	{pc}		; (ldr pc, [sp], #4)
   13660:	andeq	fp, r1, r0, lsr #27
   13664:	andeq	ip, r1, r8, asr #25
   13668:			; <UNDEFINED> instruction: 0x0001ccb4
   1366c:	andeq	ip, r1, r8, asr #24
   13670:	andeq	ip, r1, r4, lsr ip
   13674:	andeq	ip, r1, ip, ror #23
   13678:	ldrdeq	ip, [r1], -r8
   1367c:	muleq	r1, ip, fp
   13680:	andeq	ip, r1, r8, lsl #23
   13684:	andeq	ip, r1, ip, asr #22
   13688:	andeq	ip, r1, r0, lsr fp
   1368c:	andeq	r0, r0, ip, lsr #1
   13690:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   13694:	andeq	ip, r1, r0, asr #21
   13698:	andeq	sl, r0, r8, lsr lr
   1369c:	andeq	sl, r0, r8, lsl #18
   136a0:	andeq	sl, r0, r8, lsl sl
   136a4:	andeq	ip, r1, r0, lsl #21
   136a8:	andeq	ip, r1, r4, ror #20
   136ac:	ldrdeq	sl, [r0], -ip
   136b0:	andeq	sl, r0, ip, lsr #17
   136b4:	andeq	sl, r0, r0, lsl #19
   136b8:	andeq	ip, r1, r4, lsr sl
   136bc:	andeq	ip, r1, r8, lsl sl
   136c0:	andeq	ip, r1, ip, ror #19
   136c4:	ldrdeq	ip, [r1], -r0
   136c8:	andeq	sl, r0, r8, asr #26
   136cc:	andeq	sl, r0, r8, lsl r8
   136d0:	andeq	sl, r0, r4, asr #18
   136d4:	muleq	r1, r0, r9
   136d8:	andeq	ip, r1, r4, ror r9
   136dc:	andeq	sl, r0, ip, ror #25
   136e0:			; <UNDEFINED> instruction: 0x0000a7bc
   136e4:	andeq	sl, r0, r4, lsl #18
   136e8:	andeq	ip, r1, r0, lsr r9
   136ec:	andeq	ip, r1, r4, lsl r9
   136f0:	andeq	sl, r0, ip, lsl #25
   136f4:	andeq	sl, r0, ip, asr r7
   136f8:	andeq	sl, r0, r0, asr #17

000136fc <boolean_unary_operator_is_read_properly@@Base>:
   136fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13700:	strd	r6, [sp, #8]
   13704:	strd	r8, [sp, #16]
   13708:	strd	sl, [sp, #24]
   1370c:	str	lr, [sp, #32]
   13710:	add	fp, sp, #32
   13714:	sub	sp, sp, #84	; 0x54
   13718:	ldr	sl, [pc, #916]	; 13ab4 <boolean_unary_operator_is_read_properly@@Base+0x3b8>
   1371c:	add	sl, pc, sl
   13720:	ldr	r3, [pc, #912]	; 13ab8 <boolean_unary_operator_is_read_properly@@Base+0x3bc>
   13724:	add	r3, pc, r3
   13728:	ldrd	r2, [r3]
   1372c:	adds	r0, r2, #1
   13730:	adc	r1, r3, #0
   13734:	ldr	r3, [pc, #896]	; 13abc <boolean_unary_operator_is_read_properly@@Base+0x3c0>
   13738:	add	r3, pc, r3
   1373c:	strd	r0, [r3]
   13740:	mov	r3, #0
   13744:	str	r3, [fp, #-40]	; 0xffffffd8
   13748:	mov	r3, #0
   1374c:	str	r3, [fp, #-44]	; 0xffffffd4
   13750:	mov	r0, #2
   13754:	bl	118b8 <malloc@plt>
   13758:	mov	r3, r0
   1375c:	str	r3, [fp, #-48]	; 0xffffffd0
   13760:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13764:	mov	r3, #33	; 0x21
   13768:	strb	r3, [r2]
   1376c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13770:	add	r2, r3, #1
   13774:	mov	r3, #0
   13778:	strb	r3, [r2]
   1377c:	sub	r2, fp, #64	; 0x40
   13780:	sub	r3, fp, #68	; 0x44
   13784:	mov	r1, r2
   13788:	mov	r0, r3
   1378c:	bl	1994c <init_grammar@@Base>
   13790:	ldr	r3, [pc, #808]	; 13ac0 <boolean_unary_operator_is_read_properly@@Base+0x3c4>
   13794:	add	r3, pc, r3
   13798:	ldrd	r2, [r3, #8]
   1379c:	adds	r4, r2, #1
   137a0:	adc	r5, r3, #0
   137a4:	ldr	r3, [pc, #792]	; 13ac4 <boolean_unary_operator_is_read_properly@@Base+0x3c8>
   137a8:	add	r3, pc, r3
   137ac:	strd	r4, [r3, #8]
   137b0:	mov	r0, #8
   137b4:	bl	118b8 <malloc@plt>
   137b8:	mov	r3, r0
   137bc:	str	r3, [fp, #-52]	; 0xffffffcc
   137c0:	mov	r0, #8
   137c4:	bl	118b8 <malloc@plt>
   137c8:	mov	r3, r0
   137cc:	mov	r2, r3
   137d0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   137d4:	str	r2, [r3]
   137d8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   137dc:	ldr	r3, [r3]
   137e0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   137e4:	mov	r0, r3
   137e8:	bl	17e80 <init_token_boolean_op@@Base>
   137ec:	ldr	r3, [pc, #724]	; 13ac8 <boolean_unary_operator_is_read_properly@@Base+0x3cc>
   137f0:	add	r3, pc, r3
   137f4:	ldrd	r2, [r3, #16]
   137f8:	adds	r6, r2, #1
   137fc:	adc	r7, r3, #0
   13800:	ldr	r3, [pc, #708]	; 13acc <boolean_unary_operator_is_read_properly@@Base+0x3d0>
   13804:	add	r3, pc, r3
   13808:	strd	r6, [r3, #16]
   1380c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13810:	add	r4, r3, #4
   13814:	mov	r0, #8
   13818:	bl	118b8 <malloc@plt>
   1381c:	mov	r3, r0
   13820:	str	r3, [r4]
   13824:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13828:	add	r3, r3, #4
   1382c:	ldr	r3, [r3]
   13830:	mov	r1, #1
   13834:	mov	r0, r3
   13838:	bl	17a40 <init_token_int_value@@Base>
   1383c:	ldr	r3, [pc, #652]	; 13ad0 <boolean_unary_operator_is_read_properly@@Base+0x3d4>
   13840:	add	r3, pc, r3
   13844:	ldrd	r2, [r3, #24]
   13848:	adds	r8, r2, #1
   1384c:	adc	r9, r3, #0
   13850:	ldr	r3, [pc, #636]	; 13ad4 <boolean_unary_operator_is_read_properly@@Base+0x3d8>
   13854:	add	r3, pc, r3
   13858:	strd	r8, [r3, #24]
   1385c:	ldr	r3, [pc, #628]	; 13ad8 <boolean_unary_operator_is_read_properly@@Base+0x3dc>
   13860:	ldr	r2, [sl, r3]
   13864:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13868:	str	r3, [r2, #228]	; 0xe4
   1386c:	ldr	r3, [pc, #612]	; 13ad8 <boolean_unary_operator_is_read_properly@@Base+0x3dc>
   13870:	ldr	r2, [sl, r3]
   13874:	mov	r3, #2
   13878:	str	r3, [r2, #220]	; 0xdc
   1387c:	sub	r3, fp, #68	; 0x44
   13880:	mov	r0, r3
   13884:	bl	1b604 <read_boolean_unary_expression@@Base>
   13888:	str	r0, [fp, #-40]	; 0xffffffd8
   1388c:	ldr	r3, [pc, #580]	; 13ad8 <boolean_unary_operator_is_read_properly@@Base+0x3dc>
   13890:	ldr	r3, [sl, r3]
   13894:	ldr	r3, [r3, #204]	; 0xcc
   13898:	cmp	r3, #2
   1389c:	beq	138ec <boolean_unary_operator_is_read_properly@@Base+0x1f0>
   138a0:	ldr	r3, [pc, #564]	; 13adc <boolean_unary_operator_is_read_properly@@Base+0x3e0>
   138a4:	add	r3, pc, r3
   138a8:	ldrd	r2, [r3, #32]
   138ac:	adds	r1, r2, #1
   138b0:	str	r1, [fp, #-76]	; 0xffffffb4
   138b4:	adc	r3, r3, #0
   138b8:	str	r3, [fp, #-72]	; 0xffffffb8
   138bc:	ldr	r3, [pc, #540]	; 13ae0 <boolean_unary_operator_is_read_properly@@Base+0x3e4>
   138c0:	add	r3, pc, r3
   138c4:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   138c8:	strd	r0, [r3, #32]
   138cc:	ldr	r3, [pc, #528]	; 13ae4 <boolean_unary_operator_is_read_properly@@Base+0x3e8>
   138d0:	add	r3, pc, r3
   138d4:	mov	r2, #235	; 0xeb
   138d8:	ldr	r1, [pc, #520]	; 13ae8 <boolean_unary_operator_is_read_properly@@Base+0x3ec>
   138dc:	add	r1, pc, r1
   138e0:	ldr	r0, [pc, #516]	; 13aec <boolean_unary_operator_is_read_properly@@Base+0x3f0>
   138e4:	add	r0, pc, r0
   138e8:	bl	119b4 <__assert_fail@plt>
   138ec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   138f0:	ldr	r3, [r3]
   138f4:	cmp	r3, #5
   138f8:	beq	13948 <boolean_unary_operator_is_read_properly@@Base+0x24c>
   138fc:	ldr	r3, [pc, #492]	; 13af0 <boolean_unary_operator_is_read_properly@@Base+0x3f4>
   13900:	add	r3, pc, r3
   13904:	ldrd	r2, [r3, #48]	; 0x30
   13908:	adds	r1, r2, #1
   1390c:	str	r1, [fp, #-92]	; 0xffffffa4
   13910:	adc	r3, r3, #0
   13914:	str	r3, [fp, #-88]	; 0xffffffa8
   13918:	ldr	r3, [pc, #468]	; 13af4 <boolean_unary_operator_is_read_properly@@Base+0x3f8>
   1391c:	add	r3, pc, r3
   13920:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   13924:	strd	r0, [r3, #48]	; 0x30
   13928:	ldr	r3, [pc, #456]	; 13af8 <boolean_unary_operator_is_read_properly@@Base+0x3fc>
   1392c:	add	r3, pc, r3
   13930:	mov	r2, #236	; 0xec
   13934:	ldr	r1, [pc, #448]	; 13afc <boolean_unary_operator_is_read_properly@@Base+0x400>
   13938:	add	r1, pc, r1
   1393c:	ldr	r0, [pc, #444]	; 13b00 <boolean_unary_operator_is_read_properly@@Base+0x404>
   13940:	add	r0, pc, r0
   13944:	bl	119b4 <__assert_fail@plt>
   13948:	ldr	r3, [pc, #436]	; 13b04 <boolean_unary_operator_is_read_properly@@Base+0x408>
   1394c:	add	r3, pc, r3
   13950:	ldrd	r2, [r3, #40]	; 0x28
   13954:	adds	r1, r2, #1
   13958:	str	r1, [fp, #-84]	; 0xffffffac
   1395c:	adc	r3, r3, #0
   13960:	str	r3, [fp, #-80]	; 0xffffffb0
   13964:	ldr	r3, [pc, #412]	; 13b08 <boolean_unary_operator_is_read_properly@@Base+0x40c>
   13968:	add	r3, pc, r3
   1396c:	ldrd	r0, [fp, #-84]	; 0xffffffac
   13970:	strd	r0, [r3, #40]	; 0x28
   13974:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13978:	str	r3, [fp, #-44]	; 0xffffffd4
   1397c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13980:	ldr	r3, [r3, #8]
   13984:	ldr	r3, [r3]
   13988:	cmp	r3, #1
   1398c:	beq	139dc <boolean_unary_operator_is_read_properly@@Base+0x2e0>
   13990:	ldr	r3, [pc, #372]	; 13b0c <boolean_unary_operator_is_read_properly@@Base+0x410>
   13994:	add	r3, pc, r3
   13998:	ldrd	r2, [r3, #56]	; 0x38
   1399c:	adds	r1, r2, #1
   139a0:	str	r1, [fp, #-100]	; 0xffffff9c
   139a4:	adc	r3, r3, #0
   139a8:	str	r3, [fp, #-96]	; 0xffffffa0
   139ac:	ldr	r3, [pc, #348]	; 13b10 <boolean_unary_operator_is_read_properly@@Base+0x414>
   139b0:	add	r3, pc, r3
   139b4:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   139b8:	strd	r0, [r3, #56]	; 0x38
   139bc:	ldr	r3, [pc, #336]	; 13b14 <boolean_unary_operator_is_read_properly@@Base+0x418>
   139c0:	add	r3, pc, r3
   139c4:	mov	r2, #238	; 0xee
   139c8:	ldr	r1, [pc, #328]	; 13b18 <boolean_unary_operator_is_read_properly@@Base+0x41c>
   139cc:	add	r1, pc, r1
   139d0:	ldr	r0, [pc, #324]	; 13b1c <boolean_unary_operator_is_read_properly@@Base+0x420>
   139d4:	add	r0, pc, r0
   139d8:	bl	119b4 <__assert_fail@plt>
   139dc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   139e0:	ldr	r3, [r3, #16]
   139e4:	cmp	r3, #8
   139e8:	beq	13a38 <boolean_unary_operator_is_read_properly@@Base+0x33c>
   139ec:	ldr	r3, [pc, #300]	; 13b20 <boolean_unary_operator_is_read_properly@@Base+0x424>
   139f0:	add	r3, pc, r3
   139f4:	ldrd	r2, [r3, #64]	; 0x40
   139f8:	adds	r1, r2, #1
   139fc:	str	r1, [fp, #-108]	; 0xffffff94
   13a00:	adc	r3, r3, #0
   13a04:	str	r3, [fp, #-104]	; 0xffffff98
   13a08:	ldr	r3, [pc, #276]	; 13b24 <boolean_unary_operator_is_read_properly@@Base+0x428>
   13a0c:	add	r3, pc, r3
   13a10:	ldrd	r0, [fp, #-108]	; 0xffffff94
   13a14:	strd	r0, [r3, #64]	; 0x40
   13a18:	ldr	r3, [pc, #264]	; 13b28 <boolean_unary_operator_is_read_properly@@Base+0x42c>
   13a1c:	add	r3, pc, r3
   13a20:	mov	r2, #239	; 0xef
   13a24:	ldr	r1, [pc, #256]	; 13b2c <boolean_unary_operator_is_read_properly@@Base+0x430>
   13a28:	add	r1, pc, r1
   13a2c:	ldr	r0, [pc, #252]	; 13b30 <boolean_unary_operator_is_read_properly@@Base+0x434>
   13a30:	add	r0, pc, r0
   13a34:	bl	119b4 <__assert_fail@plt>
   13a38:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13a3c:	ldr	r3, [r3, #12]
   13a40:	cmp	r3, #0
   13a44:	beq	13a94 <boolean_unary_operator_is_read_properly@@Base+0x398>
   13a48:	ldr	r3, [pc, #228]	; 13b34 <boolean_unary_operator_is_read_properly@@Base+0x438>
   13a4c:	add	r3, pc, r3
   13a50:	ldrd	r2, [r3, #72]	; 0x48
   13a54:	adds	r1, r2, #1
   13a58:	str	r1, [fp, #-116]	; 0xffffff8c
   13a5c:	adc	r3, r3, #0
   13a60:	str	r3, [fp, #-112]	; 0xffffff90
   13a64:	ldr	r3, [pc, #204]	; 13b38 <boolean_unary_operator_is_read_properly@@Base+0x43c>
   13a68:	add	r3, pc, r3
   13a6c:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   13a70:	strd	r0, [r3, #72]	; 0x48
   13a74:	ldr	r3, [pc, #192]	; 13b3c <boolean_unary_operator_is_read_properly@@Base+0x440>
   13a78:	add	r3, pc, r3
   13a7c:	mov	r2, #240	; 0xf0
   13a80:	ldr	r1, [pc, #184]	; 13b40 <boolean_unary_operator_is_read_properly@@Base+0x444>
   13a84:	add	r1, pc, r1
   13a88:	ldr	r0, [pc, #180]	; 13b44 <boolean_unary_operator_is_read_properly@@Base+0x448>
   13a8c:	add	r0, pc, r0
   13a90:	bl	119b4 <__assert_fail@plt>
   13a94:	nop	{0}
   13a98:	sub	sp, fp, #32
   13a9c:	ldrd	r4, [sp]
   13aa0:	ldrd	r6, [sp, #8]
   13aa4:	ldrd	r8, [sp, #16]
   13aa8:	ldrd	sl, [sp, #24]
   13aac:	add	sp, sp, #32
   13ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ab4:	ldrdeq	fp, [r1], -ip
   13ab8:			; <UNDEFINED> instruction: 0x0001c7b4
   13abc:	andeq	ip, r1, r0, lsr #15
   13ac0:	andeq	ip, r1, r4, asr #14
   13ac4:	andeq	ip, r1, r0, lsr r7
   13ac8:	andeq	ip, r1, r8, ror #13
   13acc:	ldrdeq	ip, [r1], -r4
   13ad0:	muleq	r1, r8, r6
   13ad4:	andeq	ip, r1, r4, lsl #13
   13ad8:	andeq	r0, r0, ip, lsr #1
   13adc:	andeq	ip, r1, r4, lsr r6
   13ae0:	andeq	ip, r1, r8, lsl r6
   13ae4:	andeq	sl, r0, ip, lsl #20
   13ae8:			; <UNDEFINED> instruction: 0x0000a4b0
   13aec:	andeq	sl, r0, ip, lsr #10
   13af0:	ldrdeq	ip, [r1], -r8
   13af4:			; <UNDEFINED> instruction: 0x0001c5bc
   13af8:			; <UNDEFINED> instruction: 0x0000a9b0
   13afc:	andeq	sl, r0, r4, asr r4
   13b00:	andeq	sl, r0, r8, lsr #10
   13b04:	andeq	ip, r1, ip, lsl #11
   13b08:	andeq	ip, r1, r0, ror r5
   13b0c:	andeq	ip, r1, r4, asr #10
   13b10:	andeq	ip, r1, r8, lsr #10
   13b14:	andeq	sl, r0, ip, lsl r9
   13b18:	andeq	sl, r0, r0, asr #7
   13b1c:	andeq	sl, r0, ip, ror #9
   13b20:	andeq	ip, r1, r8, ror #9
   13b24:	andeq	ip, r1, ip, asr #9
   13b28:	andeq	sl, r0, r0, asr #17
   13b2c:	andeq	sl, r0, r4, ror #6
   13b30:	andeq	sl, r0, r4, ror #9
   13b34:	andeq	ip, r1, ip, lsl #9
   13b38:	andeq	ip, r1, r0, ror r4
   13b3c:	andeq	sl, r0, r4, ror #16
   13b40:	andeq	sl, r0, r8, lsl #6
   13b44:	muleq	r0, ip, r4

00013b48 <if_statement_only@@Base>:
   13b48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13b4c:	strd	r6, [sp, #8]
   13b50:	strd	r8, [sp, #16]
   13b54:	strd	sl, [sp, #24]
   13b58:	str	lr, [sp, #32]
   13b5c:	add	fp, sp, #32
   13b60:	sub	sp, sp, #124	; 0x7c
   13b64:	ldr	sl, [pc, #1348]	; 140b0 <if_statement_only@@Base+0x568>
   13b68:	add	sl, pc, sl
   13b6c:	ldr	r3, [pc, #1344]	; 140b4 <if_statement_only@@Base+0x56c>
   13b70:	add	r3, pc, r3
   13b74:	ldrd	r2, [r3]
   13b78:	adds	r0, r2, #1
   13b7c:	adc	r1, r3, #0
   13b80:	ldr	r3, [pc, #1328]	; 140b8 <if_statement_only@@Base+0x570>
   13b84:	add	r3, pc, r3
   13b88:	strd	r0, [r3]
   13b8c:	mov	r3, #0
   13b90:	str	r3, [fp, #-40]	; 0xffffffd8
   13b94:	sub	r2, fp, #60	; 0x3c
   13b98:	sub	r3, fp, #64	; 0x40
   13b9c:	mov	r1, r2
   13ba0:	mov	r0, r3
   13ba4:	bl	1994c <init_grammar@@Base>
   13ba8:	ldr	r3, [pc, #1292]	; 140bc <if_statement_only@@Base+0x574>
   13bac:	add	r3, pc, r3
   13bb0:	ldrd	r2, [r3, #8]
   13bb4:	adds	r4, r2, #1
   13bb8:	adc	r5, r3, #0
   13bbc:	ldr	r3, [pc, #1276]	; 140c0 <if_statement_only@@Base+0x578>
   13bc0:	add	r3, pc, r3
   13bc4:	strd	r4, [r3, #8]
   13bc8:	mov	r0, #3
   13bcc:	bl	118b8 <malloc@plt>
   13bd0:	mov	r3, r0
   13bd4:	str	r3, [fp, #-44]	; 0xffffffd4
   13bd8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13bdc:	mov	r3, #33	; 0x21
   13be0:	strb	r3, [r2]
   13be4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13be8:	add	r2, r3, #1
   13bec:	mov	r3, #61	; 0x3d
   13bf0:	strb	r3, [r2]
   13bf4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13bf8:	add	r2, r3, #2
   13bfc:	mov	r3, #0
   13c00:	strb	r3, [r2]
   13c04:	mov	r0, #36	; 0x24
   13c08:	bl	118b8 <malloc@plt>
   13c0c:	mov	r3, r0
   13c10:	str	r3, [fp, #-48]	; 0xffffffd0
   13c14:	mov	r0, #4
   13c18:	bl	118b8 <malloc@plt>
   13c1c:	mov	r3, r0
   13c20:	mov	r2, r3
   13c24:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13c28:	str	r2, [r3]
   13c2c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13c30:	ldr	r3, [r3]
   13c34:	mov	r0, r3
   13c38:	bl	17b20 <init_token_opar@@Base>
   13c3c:	ldr	r3, [pc, #1152]	; 140c4 <if_statement_only@@Base+0x57c>
   13c40:	add	r3, pc, r3
   13c44:	ldrd	r2, [r3, #16]
   13c48:	adds	r6, r2, #1
   13c4c:	adc	r7, r3, #0
   13c50:	ldr	r3, [pc, #1136]	; 140c8 <if_statement_only@@Base+0x580>
   13c54:	add	r3, pc, r3
   13c58:	strd	r6, [r3, #16]
   13c5c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13c60:	add	r4, r3, #4
   13c64:	mov	r0, #8
   13c68:	bl	118b8 <malloc@plt>
   13c6c:	mov	r3, r0
   13c70:	str	r3, [r4]
   13c74:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13c78:	add	r3, r3, #4
   13c7c:	ldr	r3, [r3]
   13c80:	mov	r1, #1
   13c84:	mov	r0, r3
   13c88:	bl	17a40 <init_token_int_value@@Base>
   13c8c:	ldr	r3, [pc, #1080]	; 140cc <if_statement_only@@Base+0x584>
   13c90:	add	r3, pc, r3
   13c94:	ldrd	r2, [r3, #24]
   13c98:	adds	r8, r2, #1
   13c9c:	adc	r9, r3, #0
   13ca0:	ldr	r3, [pc, #1064]	; 140d0 <if_statement_only@@Base+0x588>
   13ca4:	add	r3, pc, r3
   13ca8:	strd	r8, [r3, #24]
   13cac:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13cb0:	add	r4, r3, #8
   13cb4:	mov	r0, #8
   13cb8:	bl	118b8 <malloc@plt>
   13cbc:	mov	r3, r0
   13cc0:	str	r3, [r4]
   13cc4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13cc8:	add	r3, r3, #8
   13ccc:	ldr	r3, [r3]
   13cd0:	mov	r1, #1
   13cd4:	mov	r0, r3
   13cd8:	bl	17a40 <init_token_int_value@@Base>
   13cdc:	ldr	r3, [pc, #1008]	; 140d4 <if_statement_only@@Base+0x58c>
   13ce0:	add	r3, pc, r3
   13ce4:	ldrd	r2, [r3, #32]
   13ce8:	adds	r1, r2, #1
   13cec:	str	r1, [fp, #-76]	; 0xffffffb4
   13cf0:	adc	r3, r3, #0
   13cf4:	str	r3, [fp, #-72]	; 0xffffffb8
   13cf8:	ldr	r3, [pc, #984]	; 140d8 <if_statement_only@@Base+0x590>
   13cfc:	add	r3, pc, r3
   13d00:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   13d04:	strd	r0, [r3, #32]
   13d08:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d0c:	add	r4, r3, #12
   13d10:	mov	r0, #8
   13d14:	bl	118b8 <malloc@plt>
   13d18:	mov	r3, r0
   13d1c:	str	r3, [r4]
   13d20:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d24:	add	r3, r3, #12
   13d28:	ldr	r3, [r3]
   13d2c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13d30:	mov	r0, r3
   13d34:	bl	17e80 <init_token_boolean_op@@Base>
   13d38:	ldr	r3, [pc, #924]	; 140dc <if_statement_only@@Base+0x594>
   13d3c:	add	r3, pc, r3
   13d40:	ldrd	r2, [r3, #40]	; 0x28
   13d44:	adds	r1, r2, #1
   13d48:	str	r1, [fp, #-84]	; 0xffffffac
   13d4c:	adc	r3, r3, #0
   13d50:	str	r3, [fp, #-80]	; 0xffffffb0
   13d54:	ldr	r3, [pc, #900]	; 140e0 <if_statement_only@@Base+0x598>
   13d58:	add	r3, pc, r3
   13d5c:	ldrd	r0, [fp, #-84]	; 0xffffffac
   13d60:	strd	r0, [r3, #40]	; 0x28
   13d64:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d68:	add	r4, r3, #16
   13d6c:	mov	r0, #8
   13d70:	bl	118b8 <malloc@plt>
   13d74:	mov	r3, r0
   13d78:	str	r3, [r4]
   13d7c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d80:	add	r3, r3, #16
   13d84:	ldr	r3, [r3]
   13d88:	mov	r1, #1
   13d8c:	mov	r0, r3
   13d90:	bl	17a40 <init_token_int_value@@Base>
   13d94:	ldr	r3, [pc, #840]	; 140e4 <if_statement_only@@Base+0x59c>
   13d98:	add	r3, pc, r3
   13d9c:	ldrd	r2, [r3, #48]	; 0x30
   13da0:	adds	r1, r2, #1
   13da4:	str	r1, [fp, #-92]	; 0xffffffa4
   13da8:	adc	r3, r3, #0
   13dac:	str	r3, [fp, #-88]	; 0xffffffa8
   13db0:	ldr	r3, [pc, #816]	; 140e8 <if_statement_only@@Base+0x5a0>
   13db4:	add	r3, pc, r3
   13db8:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   13dbc:	strd	r0, [r3, #48]	; 0x30
   13dc0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13dc4:	add	r4, r3, #20
   13dc8:	mov	r0, #4
   13dcc:	bl	118b8 <malloc@plt>
   13dd0:	mov	r3, r0
   13dd4:	str	r3, [r4]
   13dd8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13ddc:	add	r3, r3, #20
   13de0:	ldr	r3, [r3]
   13de4:	mov	r0, r3
   13de8:	bl	17b80 <init_token_cpar@@Base>
   13dec:	ldr	r3, [pc, #760]	; 140ec <if_statement_only@@Base+0x5a4>
   13df0:	add	r3, pc, r3
   13df4:	ldrd	r2, [r3, #56]	; 0x38
   13df8:	adds	r1, r2, #1
   13dfc:	str	r1, [fp, #-100]	; 0xffffff9c
   13e00:	adc	r3, r3, #0
   13e04:	str	r3, [fp, #-96]	; 0xffffffa0
   13e08:	ldr	r3, [pc, #736]	; 140f0 <if_statement_only@@Base+0x5a8>
   13e0c:	add	r3, pc, r3
   13e10:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   13e14:	strd	r0, [r3, #56]	; 0x38
   13e18:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13e1c:	add	r4, r3, #24
   13e20:	mov	r0, #4
   13e24:	bl	118b8 <malloc@plt>
   13e28:	mov	r3, r0
   13e2c:	str	r3, [r4]
   13e30:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13e34:	add	r3, r3, #24
   13e38:	ldr	r3, [r3]
   13e3c:	mov	r0, r3
   13e40:	bl	17be0 <init_token_obra@@Base>
   13e44:	ldr	r3, [pc, #680]	; 140f4 <if_statement_only@@Base+0x5ac>
   13e48:	add	r3, pc, r3
   13e4c:	ldrd	r2, [r3, #64]	; 0x40
   13e50:	adds	r1, r2, #1
   13e54:	str	r1, [fp, #-108]	; 0xffffff94
   13e58:	adc	r3, r3, #0
   13e5c:	str	r3, [fp, #-104]	; 0xffffff98
   13e60:	ldr	r3, [pc, #656]	; 140f8 <if_statement_only@@Base+0x5b0>
   13e64:	add	r3, pc, r3
   13e68:	ldrd	r0, [fp, #-108]	; 0xffffff94
   13e6c:	strd	r0, [r3, #64]	; 0x40
   13e70:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13e74:	add	r4, r3, #28
   13e78:	mov	r0, #4
   13e7c:	bl	118b8 <malloc@plt>
   13e80:	mov	r3, r0
   13e84:	str	r3, [r4]
   13e88:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13e8c:	add	r3, r3, #28
   13e90:	ldr	r3, [r3]
   13e94:	mov	r0, r3
   13e98:	bl	17c40 <init_token_cbra@@Base>
   13e9c:	ldr	r3, [pc, #600]	; 140fc <if_statement_only@@Base+0x5b4>
   13ea0:	add	r3, pc, r3
   13ea4:	ldrd	r2, [r3, #72]	; 0x48
   13ea8:	adds	r1, r2, #1
   13eac:	str	r1, [fp, #-116]	; 0xffffff8c
   13eb0:	adc	r3, r3, #0
   13eb4:	str	r3, [fp, #-112]	; 0xffffff90
   13eb8:	ldr	r3, [pc, #576]	; 14100 <if_statement_only@@Base+0x5b8>
   13ebc:	add	r3, pc, r3
   13ec0:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   13ec4:	strd	r0, [r3, #72]	; 0x48
   13ec8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13ecc:	add	r4, r3, #32
   13ed0:	mov	r0, #4
   13ed4:	bl	118b8 <malloc@plt>
   13ed8:	mov	r3, r0
   13edc:	str	r3, [r4]
   13ee0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13ee4:	add	r3, r3, #32
   13ee8:	ldr	r3, [r3]
   13eec:	mov	r0, r3
   13ef0:	bl	17d60 <init_token_eof@@Base>
   13ef4:	ldr	r3, [pc, #520]	; 14104 <if_statement_only@@Base+0x5bc>
   13ef8:	add	r3, pc, r3
   13efc:	ldrd	r2, [r3, #80]	; 0x50
   13f00:	adds	r1, r2, #1
   13f04:	str	r1, [fp, #-124]	; 0xffffff84
   13f08:	adc	r3, r3, #0
   13f0c:	str	r3, [fp, #-120]	; 0xffffff88
   13f10:	ldr	r3, [pc, #496]	; 14108 <if_statement_only@@Base+0x5c0>
   13f14:	add	r3, pc, r3
   13f18:	ldrd	r0, [fp, #-124]	; 0xffffff84
   13f1c:	strd	r0, [r3, #80]	; 0x50
   13f20:	ldr	r3, [pc, #484]	; 1410c <if_statement_only@@Base+0x5c4>
   13f24:	ldr	r3, [sl, r3]
   13f28:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13f2c:	str	r2, [r3, #228]	; 0xe4
   13f30:	ldr	r3, [pc, #468]	; 1410c <if_statement_only@@Base+0x5c4>
   13f34:	ldr	r3, [sl, r3]
   13f38:	mov	r2, #9
   13f3c:	str	r2, [r3, #220]	; 0xdc
   13f40:	sub	r3, fp, #64	; 0x40
   13f44:	mov	r0, r3
   13f48:	bl	1a660 <read_if_statement@@Base>
   13f4c:	str	r0, [fp, #-40]	; 0xffffffd8
   13f50:	ldr	r3, [pc, #436]	; 1410c <if_statement_only@@Base+0x5c4>
   13f54:	ldr	r3, [sl, r3]
   13f58:	ldr	r3, [r3, #204]	; 0xcc
   13f5c:	cmp	r3, #9
   13f60:	beq	13fb0 <if_statement_only@@Base+0x468>
   13f64:	ldr	r3, [pc, #420]	; 14110 <if_statement_only@@Base+0x5c8>
   13f68:	add	r3, pc, r3
   13f6c:	ldrd	r2, [r3, #88]	; 0x58
   13f70:	adds	r1, r2, #1
   13f74:	str	r1, [fp, #-132]	; 0xffffff7c
   13f78:	adc	r3, r3, #0
   13f7c:	str	r3, [fp, #-128]	; 0xffffff80
   13f80:	ldr	r3, [pc, #396]	; 14114 <if_statement_only@@Base+0x5cc>
   13f84:	add	r3, pc, r3
   13f88:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   13f8c:	strd	r0, [r3, #88]	; 0x58
   13f90:	ldr	r3, [pc, #384]	; 14118 <if_statement_only@@Base+0x5d0>
   13f94:	add	r3, pc, r3
   13f98:	movw	r2, #283	; 0x11b
   13f9c:	ldr	r1, [pc, #376]	; 1411c <if_statement_only@@Base+0x5d4>
   13fa0:	add	r1, pc, r1
   13fa4:	ldr	r0, [pc, #372]	; 14120 <if_statement_only@@Base+0x5d8>
   13fa8:	add	r0, pc, r0
   13fac:	bl	119b4 <__assert_fail@plt>
   13fb0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13fb4:	cmp	r3, #0
   13fb8:	bne	14008 <if_statement_only@@Base+0x4c0>
   13fbc:	ldr	r3, [pc, #352]	; 14124 <if_statement_only@@Base+0x5dc>
   13fc0:	add	r3, pc, r3
   13fc4:	ldrd	r2, [r3, #104]	; 0x68
   13fc8:	adds	r1, r2, #1
   13fcc:	str	r1, [fp, #-148]	; 0xffffff6c
   13fd0:	adc	r3, r3, #0
   13fd4:	str	r3, [fp, #-144]	; 0xffffff70
   13fd8:	ldr	r3, [pc, #328]	; 14128 <if_statement_only@@Base+0x5e0>
   13fdc:	add	r3, pc, r3
   13fe0:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   13fe4:	strd	r0, [r3, #104]	; 0x68
   13fe8:	ldr	r3, [pc, #316]	; 1412c <if_statement_only@@Base+0x5e4>
   13fec:	add	r3, pc, r3
   13ff0:	mov	r2, #284	; 0x11c
   13ff4:	ldr	r1, [pc, #308]	; 14130 <if_statement_only@@Base+0x5e8>
   13ff8:	add	r1, pc, r1
   13ffc:	ldr	r0, [pc, #304]	; 14134 <if_statement_only@@Base+0x5ec>
   14000:	add	r0, pc, r0
   14004:	bl	119b4 <__assert_fail@plt>
   14008:	ldr	r3, [pc, #296]	; 14138 <if_statement_only@@Base+0x5f0>
   1400c:	add	r3, pc, r3
   14010:	ldrd	r2, [r3, #96]	; 0x60
   14014:	adds	r1, r2, #1
   14018:	str	r1, [fp, #-140]	; 0xffffff74
   1401c:	adc	r3, r3, #0
   14020:	str	r3, [fp, #-136]	; 0xffffff78
   14024:	ldr	r3, [pc, #272]	; 1413c <if_statement_only@@Base+0x5f4>
   14028:	add	r3, pc, r3
   1402c:	ldrd	r0, [fp, #-140]	; 0xffffff74
   14030:	strd	r0, [r3, #96]	; 0x60
   14034:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14038:	ldr	r3, [r3]
   1403c:	cmp	r3, #4
   14040:	beq	14090 <if_statement_only@@Base+0x548>
   14044:	ldr	r3, [pc, #244]	; 14140 <if_statement_only@@Base+0x5f8>
   14048:	add	r3, pc, r3
   1404c:	ldrd	r2, [r3, #112]	; 0x70
   14050:	adds	r1, r2, #1
   14054:	str	r1, [fp, #-156]	; 0xffffff64
   14058:	adc	r3, r3, #0
   1405c:	str	r3, [fp, #-152]	; 0xffffff68
   14060:	ldr	r3, [pc, #220]	; 14144 <if_statement_only@@Base+0x5fc>
   14064:	add	r3, pc, r3
   14068:	ldrd	r0, [fp, #-156]	; 0xffffff64
   1406c:	strd	r0, [r3, #112]	; 0x70
   14070:	ldr	r3, [pc, #208]	; 14148 <if_statement_only@@Base+0x600>
   14074:	add	r3, pc, r3
   14078:	movw	r2, #285	; 0x11d
   1407c:	ldr	r1, [pc, #200]	; 1414c <if_statement_only@@Base+0x604>
   14080:	add	r1, pc, r1
   14084:	ldr	r0, [pc, #196]	; 14150 <if_statement_only@@Base+0x608>
   14088:	add	r0, pc, r0
   1408c:	bl	119b4 <__assert_fail@plt>
   14090:	nop	{0}
   14094:	sub	sp, fp, #32
   14098:	ldrd	r4, [sp]
   1409c:	ldrd	r6, [sp, #8]
   140a0:	ldrd	r8, [sp, #16]
   140a4:	ldrd	sl, [sp, #24]
   140a8:	add	sp, sp, #32
   140ac:	pop	{pc}		; (ldr pc, [sp], #4)
   140b0:	muleq	r1, r0, r4
   140b4:	strdeq	ip, [r1], -r0
   140b8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   140bc:			; <UNDEFINED> instruction: 0x0001c2b4
   140c0:	andeq	ip, r1, r0, lsr #5
   140c4:	andeq	ip, r1, r0, lsr #4
   140c8:	andeq	ip, r1, ip, lsl #4
   140cc:	ldrdeq	ip, [r1], -r0
   140d0:			; <UNDEFINED> instruction: 0x0001c1bc
   140d4:	andeq	ip, r1, r0, lsl #3
   140d8:	andeq	ip, r1, r4, ror #2
   140dc:	andeq	ip, r1, r4, lsr #2
   140e0:	andeq	ip, r1, r8, lsl #2
   140e4:	andeq	ip, r1, r8, asr #1
   140e8:	andeq	ip, r1, ip, lsr #1
   140ec:	andeq	ip, r1, r0, ror r0
   140f0:	andeq	ip, r1, r4, asr r0
   140f4:	andeq	ip, r1, r8, lsl r0
   140f8:	strdeq	fp, [r1], -ip
   140fc:	andeq	fp, r1, r0, asr #31
   14100:	andeq	fp, r1, r4, lsr #31
   14104:	andeq	fp, r1, r8, ror #30
   14108:	andeq	fp, r1, ip, asr #30
   1410c:	andeq	r0, r0, ip, lsr #1
   14110:	strdeq	fp, [r1], -r8
   14114:	ldrdeq	fp, [r1], -ip
   14118:	andeq	sl, r0, r0, ror r3
   1411c:	andeq	r9, r0, ip, ror #27
   14120:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   14124:	andeq	fp, r1, r0, lsr #29
   14128:	andeq	fp, r1, r4, lsl #29
   1412c:	andeq	sl, r0, r8, lsl r3
   14130:	muleq	r0, r4, sp
   14134:	andeq	r9, r0, ip, asr pc
   14138:	andeq	fp, r1, r4, asr lr
   1413c:	andeq	fp, r1, r8, lsr lr
   14140:	andeq	fp, r1, r8, lsl lr
   14144:	strdeq	fp, [r1], -ip
   14148:	muleq	r0, r0, r2
   1414c:	andeq	r9, r0, ip, lsl #26
   14150:	andeq	r9, r0, r0, ror #29

00014154 <if_else_statements@@Base>:
   14154:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14158:	strd	r6, [sp, #8]
   1415c:	strd	r8, [sp, #16]
   14160:	strd	sl, [sp, #24]
   14164:	str	lr, [sp, #32]
   14168:	add	fp, sp, #32
   1416c:	sub	sp, sp, #140	; 0x8c
   14170:	ldr	sl, [pc, #1524]	; 1476c <if_else_statements@@Base+0x618>
   14174:	add	sl, pc, sl
   14178:	ldr	r3, [pc, #1520]	; 14770 <if_else_statements@@Base+0x61c>
   1417c:	add	r3, pc, r3
   14180:	ldrd	r2, [r3]
   14184:	adds	r0, r2, #1
   14188:	adc	r1, r3, #0
   1418c:	ldr	r3, [pc, #1504]	; 14774 <if_else_statements@@Base+0x620>
   14190:	add	r3, pc, r3
   14194:	strd	r0, [r3]
   14198:	mov	r3, #0
   1419c:	str	r3, [fp, #-40]	; 0xffffffd8
   141a0:	sub	r2, fp, #60	; 0x3c
   141a4:	sub	r3, fp, #64	; 0x40
   141a8:	mov	r1, r2
   141ac:	mov	r0, r3
   141b0:	bl	1994c <init_grammar@@Base>
   141b4:	ldr	r3, [pc, #1468]	; 14778 <if_else_statements@@Base+0x624>
   141b8:	add	r3, pc, r3
   141bc:	ldrd	r2, [r3, #8]
   141c0:	adds	r4, r2, #1
   141c4:	adc	r5, r3, #0
   141c8:	ldr	r3, [pc, #1452]	; 1477c <if_else_statements@@Base+0x628>
   141cc:	add	r3, pc, r3
   141d0:	strd	r4, [r3, #8]
   141d4:	mov	r0, #3
   141d8:	bl	118b8 <malloc@plt>
   141dc:	mov	r3, r0
   141e0:	str	r3, [fp, #-44]	; 0xffffffd4
   141e4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   141e8:	mov	r3, #33	; 0x21
   141ec:	strb	r3, [r2]
   141f0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   141f4:	add	r2, r3, #1
   141f8:	mov	r3, #61	; 0x3d
   141fc:	strb	r3, [r2]
   14200:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14204:	add	r2, r3, #2
   14208:	mov	r3, #0
   1420c:	strb	r3, [r2]
   14210:	mov	r0, #44	; 0x2c
   14214:	bl	118b8 <malloc@plt>
   14218:	mov	r3, r0
   1421c:	str	r3, [fp, #-48]	; 0xffffffd0
   14220:	mov	r0, #4
   14224:	bl	118b8 <malloc@plt>
   14228:	mov	r3, r0
   1422c:	mov	r2, r3
   14230:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14234:	str	r2, [r3]
   14238:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1423c:	ldr	r3, [r3]
   14240:	mov	r0, r3
   14244:	bl	17b20 <init_token_opar@@Base>
   14248:	ldr	r3, [pc, #1328]	; 14780 <if_else_statements@@Base+0x62c>
   1424c:	add	r3, pc, r3
   14250:	ldrd	r2, [r3, #16]
   14254:	adds	r6, r2, #1
   14258:	adc	r7, r3, #0
   1425c:	ldr	r3, [pc, #1312]	; 14784 <if_else_statements@@Base+0x630>
   14260:	add	r3, pc, r3
   14264:	strd	r6, [r3, #16]
   14268:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1426c:	add	r4, r3, #4
   14270:	mov	r0, #8
   14274:	bl	118b8 <malloc@plt>
   14278:	mov	r3, r0
   1427c:	str	r3, [r4]
   14280:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14284:	add	r3, r3, #4
   14288:	ldr	r3, [r3]
   1428c:	mov	r1, #1
   14290:	mov	r0, r3
   14294:	bl	17a40 <init_token_int_value@@Base>
   14298:	ldr	r3, [pc, #1256]	; 14788 <if_else_statements@@Base+0x634>
   1429c:	add	r3, pc, r3
   142a0:	ldrd	r2, [r3, #24]
   142a4:	adds	r8, r2, #1
   142a8:	adc	r9, r3, #0
   142ac:	ldr	r3, [pc, #1240]	; 1478c <if_else_statements@@Base+0x638>
   142b0:	add	r3, pc, r3
   142b4:	strd	r8, [r3, #24]
   142b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   142bc:	add	r4, r3, #8
   142c0:	mov	r0, #8
   142c4:	bl	118b8 <malloc@plt>
   142c8:	mov	r3, r0
   142cc:	str	r3, [r4]
   142d0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   142d4:	add	r3, r3, #8
   142d8:	ldr	r3, [r3]
   142dc:	mov	r1, #1
   142e0:	mov	r0, r3
   142e4:	bl	17a40 <init_token_int_value@@Base>
   142e8:	ldr	r3, [pc, #1184]	; 14790 <if_else_statements@@Base+0x63c>
   142ec:	add	r3, pc, r3
   142f0:	ldrd	r2, [r3, #32]
   142f4:	adds	r1, r2, #1
   142f8:	str	r1, [fp, #-76]	; 0xffffffb4
   142fc:	adc	r3, r3, #0
   14300:	str	r3, [fp, #-72]	; 0xffffffb8
   14304:	ldr	r3, [pc, #1160]	; 14794 <if_else_statements@@Base+0x640>
   14308:	add	r3, pc, r3
   1430c:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   14310:	strd	r0, [r3, #32]
   14314:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14318:	add	r4, r3, #12
   1431c:	mov	r0, #8
   14320:	bl	118b8 <malloc@plt>
   14324:	mov	r3, r0
   14328:	str	r3, [r4]
   1432c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14330:	add	r3, r3, #12
   14334:	ldr	r3, [r3]
   14338:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1433c:	mov	r0, r3
   14340:	bl	17e80 <init_token_boolean_op@@Base>
   14344:	ldr	r3, [pc, #1100]	; 14798 <if_else_statements@@Base+0x644>
   14348:	add	r3, pc, r3
   1434c:	ldrd	r2, [r3, #40]	; 0x28
   14350:	adds	r1, r2, #1
   14354:	str	r1, [fp, #-84]	; 0xffffffac
   14358:	adc	r3, r3, #0
   1435c:	str	r3, [fp, #-80]	; 0xffffffb0
   14360:	ldr	r3, [pc, #1076]	; 1479c <if_else_statements@@Base+0x648>
   14364:	add	r3, pc, r3
   14368:	ldrd	r0, [fp, #-84]	; 0xffffffac
   1436c:	strd	r0, [r3, #40]	; 0x28
   14370:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14374:	add	r4, r3, #16
   14378:	mov	r0, #8
   1437c:	bl	118b8 <malloc@plt>
   14380:	mov	r3, r0
   14384:	str	r3, [r4]
   14388:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1438c:	add	r3, r3, #16
   14390:	ldr	r3, [r3]
   14394:	mov	r1, #1
   14398:	mov	r0, r3
   1439c:	bl	17a40 <init_token_int_value@@Base>
   143a0:	ldr	r3, [pc, #1016]	; 147a0 <if_else_statements@@Base+0x64c>
   143a4:	add	r3, pc, r3
   143a8:	ldrd	r2, [r3, #48]	; 0x30
   143ac:	adds	r1, r2, #1
   143b0:	str	r1, [fp, #-92]	; 0xffffffa4
   143b4:	adc	r3, r3, #0
   143b8:	str	r3, [fp, #-88]	; 0xffffffa8
   143bc:	ldr	r3, [pc, #992]	; 147a4 <if_else_statements@@Base+0x650>
   143c0:	add	r3, pc, r3
   143c4:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   143c8:	strd	r0, [r3, #48]	; 0x30
   143cc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   143d0:	add	r4, r3, #20
   143d4:	mov	r0, #4
   143d8:	bl	118b8 <malloc@plt>
   143dc:	mov	r3, r0
   143e0:	str	r3, [r4]
   143e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   143e8:	add	r3, r3, #20
   143ec:	ldr	r3, [r3]
   143f0:	mov	r0, r3
   143f4:	bl	17b80 <init_token_cpar@@Base>
   143f8:	ldr	r3, [pc, #936]	; 147a8 <if_else_statements@@Base+0x654>
   143fc:	add	r3, pc, r3
   14400:	ldrd	r2, [r3, #56]	; 0x38
   14404:	adds	r1, r2, #1
   14408:	str	r1, [fp, #-100]	; 0xffffff9c
   1440c:	adc	r3, r3, #0
   14410:	str	r3, [fp, #-96]	; 0xffffffa0
   14414:	ldr	r3, [pc, #912]	; 147ac <if_else_statements@@Base+0x658>
   14418:	add	r3, pc, r3
   1441c:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   14420:	strd	r0, [r3, #56]	; 0x38
   14424:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14428:	add	r4, r3, #24
   1442c:	mov	r0, #4
   14430:	bl	118b8 <malloc@plt>
   14434:	mov	r3, r0
   14438:	str	r3, [r4]
   1443c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14440:	add	r3, r3, #24
   14444:	ldr	r3, [r3]
   14448:	mov	r0, r3
   1444c:	bl	17be0 <init_token_obra@@Base>
   14450:	ldr	r3, [pc, #856]	; 147b0 <if_else_statements@@Base+0x65c>
   14454:	add	r3, pc, r3
   14458:	ldrd	r2, [r3, #64]	; 0x40
   1445c:	adds	r1, r2, #1
   14460:	str	r1, [fp, #-108]	; 0xffffff94
   14464:	adc	r3, r3, #0
   14468:	str	r3, [fp, #-104]	; 0xffffff98
   1446c:	ldr	r3, [pc, #832]	; 147b4 <if_else_statements@@Base+0x660>
   14470:	add	r3, pc, r3
   14474:	ldrd	r0, [fp, #-108]	; 0xffffff94
   14478:	strd	r0, [r3, #64]	; 0x40
   1447c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14480:	add	r4, r3, #28
   14484:	mov	r0, #4
   14488:	bl	118b8 <malloc@plt>
   1448c:	mov	r3, r0
   14490:	str	r3, [r4]
   14494:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14498:	add	r3, r3, #28
   1449c:	ldr	r3, [r3]
   144a0:	mov	r0, r3
   144a4:	bl	17c40 <init_token_cbra@@Base>
   144a8:	ldr	r3, [pc, #776]	; 147b8 <if_else_statements@@Base+0x664>
   144ac:	add	r3, pc, r3
   144b0:	ldrd	r2, [r3, #72]	; 0x48
   144b4:	adds	r1, r2, #1
   144b8:	str	r1, [fp, #-116]	; 0xffffff8c
   144bc:	adc	r3, r3, #0
   144c0:	str	r3, [fp, #-112]	; 0xffffff90
   144c4:	ldr	r3, [pc, #752]	; 147bc <if_else_statements@@Base+0x668>
   144c8:	add	r3, pc, r3
   144cc:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   144d0:	strd	r0, [r3, #72]	; 0x48
   144d4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   144d8:	add	r4, r3, #32
   144dc:	mov	r0, #4
   144e0:	bl	118b8 <malloc@plt>
   144e4:	mov	r3, r0
   144e8:	str	r3, [r4]
   144ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   144f0:	add	r3, r3, #32
   144f4:	ldr	r3, [r3]
   144f8:	mov	r0, r3
   144fc:	bl	17e20 <init_token_else@@Base>
   14500:	ldr	r3, [pc, #696]	; 147c0 <if_else_statements@@Base+0x66c>
   14504:	add	r3, pc, r3
   14508:	ldrd	r2, [r3, #80]	; 0x50
   1450c:	adds	r1, r2, #1
   14510:	str	r1, [fp, #-124]	; 0xffffff84
   14514:	adc	r3, r3, #0
   14518:	str	r3, [fp, #-120]	; 0xffffff88
   1451c:	ldr	r3, [pc, #672]	; 147c4 <if_else_statements@@Base+0x670>
   14520:	add	r3, pc, r3
   14524:	ldrd	r0, [fp, #-124]	; 0xffffff84
   14528:	strd	r0, [r3, #80]	; 0x50
   1452c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14530:	add	r4, r3, #36	; 0x24
   14534:	mov	r0, #4
   14538:	bl	118b8 <malloc@plt>
   1453c:	mov	r3, r0
   14540:	str	r3, [r4]
   14544:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14548:	add	r3, r3, #36	; 0x24
   1454c:	ldr	r3, [r3]
   14550:	mov	r0, r3
   14554:	bl	17be0 <init_token_obra@@Base>
   14558:	ldr	r3, [pc, #616]	; 147c8 <if_else_statements@@Base+0x674>
   1455c:	add	r3, pc, r3
   14560:	ldrd	r2, [r3, #88]	; 0x58
   14564:	adds	r1, r2, #1
   14568:	str	r1, [fp, #-132]	; 0xffffff7c
   1456c:	adc	r3, r3, #0
   14570:	str	r3, [fp, #-128]	; 0xffffff80
   14574:	ldr	r3, [pc, #592]	; 147cc <if_else_statements@@Base+0x678>
   14578:	add	r3, pc, r3
   1457c:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   14580:	strd	r0, [r3, #88]	; 0x58
   14584:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14588:	add	r4, r3, #40	; 0x28
   1458c:	mov	r0, #4
   14590:	bl	118b8 <malloc@plt>
   14594:	mov	r3, r0
   14598:	str	r3, [r4]
   1459c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   145a0:	add	r3, r3, #40	; 0x28
   145a4:	ldr	r3, [r3]
   145a8:	mov	r0, r3
   145ac:	bl	17c40 <init_token_cbra@@Base>
   145b0:	ldr	r3, [pc, #536]	; 147d0 <if_else_statements@@Base+0x67c>
   145b4:	add	r3, pc, r3
   145b8:	ldrd	r2, [r3, #96]	; 0x60
   145bc:	adds	r1, r2, #1
   145c0:	str	r1, [fp, #-140]	; 0xffffff74
   145c4:	adc	r3, r3, #0
   145c8:	str	r3, [fp, #-136]	; 0xffffff78
   145cc:	ldr	r3, [pc, #512]	; 147d4 <if_else_statements@@Base+0x680>
   145d0:	add	r3, pc, r3
   145d4:	ldrd	r0, [fp, #-140]	; 0xffffff74
   145d8:	strd	r0, [r3, #96]	; 0x60
   145dc:	ldr	r3, [pc, #500]	; 147d8 <if_else_statements@@Base+0x684>
   145e0:	ldr	r3, [sl, r3]
   145e4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   145e8:	str	r2, [r3, #228]	; 0xe4
   145ec:	ldr	r3, [pc, #484]	; 147d8 <if_else_statements@@Base+0x684>
   145f0:	ldr	r3, [sl, r3]
   145f4:	mov	r2, #11
   145f8:	str	r2, [r3, #220]	; 0xdc
   145fc:	sub	r3, fp, #64	; 0x40
   14600:	mov	r0, r3
   14604:	bl	1a660 <read_if_statement@@Base>
   14608:	str	r0, [fp, #-40]	; 0xffffffd8
   1460c:	ldr	r3, [pc, #452]	; 147d8 <if_else_statements@@Base+0x684>
   14610:	ldr	r3, [sl, r3]
   14614:	ldr	r3, [r3, #204]	; 0xcc
   14618:	cmp	r3, #11
   1461c:	beq	1466c <if_else_statements@@Base+0x518>
   14620:	ldr	r3, [pc, #436]	; 147dc <if_else_statements@@Base+0x688>
   14624:	add	r3, pc, r3
   14628:	ldrd	r2, [r3, #104]	; 0x68
   1462c:	adds	r1, r2, #1
   14630:	str	r1, [fp, #-148]	; 0xffffff6c
   14634:	adc	r3, r3, #0
   14638:	str	r3, [fp, #-144]	; 0xffffff70
   1463c:	ldr	r3, [pc, #412]	; 147e0 <if_else_statements@@Base+0x68c>
   14640:	add	r3, pc, r3
   14644:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   14648:	strd	r0, [r3, #104]	; 0x68
   1464c:	ldr	r3, [pc, #400]	; 147e4 <if_else_statements@@Base+0x690>
   14650:	add	r3, pc, r3
   14654:	mov	r2, #332	; 0x14c
   14658:	ldr	r1, [pc, #392]	; 147e8 <if_else_statements@@Base+0x694>
   1465c:	add	r1, pc, r1
   14660:	ldr	r0, [pc, #388]	; 147ec <if_else_statements@@Base+0x698>
   14664:	add	r0, pc, r0
   14668:	bl	119b4 <__assert_fail@plt>
   1466c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14670:	cmp	r3, #0
   14674:	bne	146c4 <if_else_statements@@Base+0x570>
   14678:	ldr	r3, [pc, #368]	; 147f0 <if_else_statements@@Base+0x69c>
   1467c:	add	r3, pc, r3
   14680:	ldrd	r2, [r3, #120]	; 0x78
   14684:	adds	r1, r2, #1
   14688:	str	r1, [fp, #-164]	; 0xffffff5c
   1468c:	adc	r3, r3, #0
   14690:	str	r3, [fp, #-160]	; 0xffffff60
   14694:	ldr	r3, [pc, #344]	; 147f4 <if_else_statements@@Base+0x6a0>
   14698:	add	r3, pc, r3
   1469c:	ldrd	r0, [fp, #-164]	; 0xffffff5c
   146a0:	strd	r0, [r3, #120]	; 0x78
   146a4:	ldr	r3, [pc, #332]	; 147f8 <if_else_statements@@Base+0x6a4>
   146a8:	add	r3, pc, r3
   146ac:	movw	r2, #333	; 0x14d
   146b0:	ldr	r1, [pc, #324]	; 147fc <if_else_statements@@Base+0x6a8>
   146b4:	add	r1, pc, r1
   146b8:	ldr	r0, [pc, #320]	; 14800 <if_else_statements@@Base+0x6ac>
   146bc:	add	r0, pc, r0
   146c0:	bl	119b4 <__assert_fail@plt>
   146c4:	ldr	r3, [pc, #312]	; 14804 <if_else_statements@@Base+0x6b0>
   146c8:	add	r3, pc, r3
   146cc:	ldrd	r2, [r3, #112]	; 0x70
   146d0:	adds	r1, r2, #1
   146d4:	str	r1, [fp, #-156]	; 0xffffff64
   146d8:	adc	r3, r3, #0
   146dc:	str	r3, [fp, #-152]	; 0xffffff68
   146e0:	ldr	r3, [pc, #288]	; 14808 <if_else_statements@@Base+0x6b4>
   146e4:	add	r3, pc, r3
   146e8:	ldrd	r0, [fp, #-156]	; 0xffffff64
   146ec:	strd	r0, [r3, #112]	; 0x70
   146f0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   146f4:	ldr	r3, [r3]
   146f8:	cmp	r3, #4
   146fc:	beq	1474c <if_else_statements@@Base+0x5f8>
   14700:	ldr	r3, [pc, #260]	; 1480c <if_else_statements@@Base+0x6b8>
   14704:	add	r3, pc, r3
   14708:	ldrd	r2, [r3, #128]	; 0x80
   1470c:	adds	r1, r2, #1
   14710:	str	r1, [fp, #-172]	; 0xffffff54
   14714:	adc	r3, r3, #0
   14718:	str	r3, [fp, #-168]	; 0xffffff58
   1471c:	ldr	r3, [pc, #236]	; 14810 <if_else_statements@@Base+0x6bc>
   14720:	add	r3, pc, r3
   14724:	ldrd	r0, [fp, #-172]	; 0xffffff54
   14728:	strd	r0, [r3, #128]	; 0x80
   1472c:	ldr	r3, [pc, #224]	; 14814 <if_else_statements@@Base+0x6c0>
   14730:	add	r3, pc, r3
   14734:	movw	r2, #334	; 0x14e
   14738:	ldr	r1, [pc, #216]	; 14818 <if_else_statements@@Base+0x6c4>
   1473c:	add	r1, pc, r1
   14740:	ldr	r0, [pc, #212]	; 1481c <if_else_statements@@Base+0x6c8>
   14744:	add	r0, pc, r0
   14748:	bl	119b4 <__assert_fail@plt>
   1474c:	nop	{0}
   14750:	sub	sp, fp, #32
   14754:	ldrd	r4, [sp]
   14758:	ldrd	r6, [sp, #8]
   1475c:	ldrd	r8, [sp, #16]
   14760:	ldrd	sl, [sp, #24]
   14764:	add	sp, sp, #32
   14768:	pop	{pc}		; (ldr pc, [sp], #4)
   1476c:	andeq	sl, r1, r4, lsl #29
   14770:	andeq	fp, r1, ip, asr ip
   14774:	andeq	fp, r1, r8, asr #24
   14778:	andeq	fp, r1, r0, lsr #24
   1477c:	andeq	fp, r1, ip, lsl #24
   14780:	andeq	fp, r1, ip, lsl #23
   14784:	andeq	fp, r1, r8, ror fp
   14788:	andeq	fp, r1, ip, lsr fp
   1478c:	andeq	fp, r1, r8, lsr #22
   14790:	andeq	fp, r1, ip, ror #21
   14794:	ldrdeq	fp, [r1], -r0
   14798:	muleq	r1, r0, sl
   1479c:	andeq	fp, r1, r4, ror sl
   147a0:	andeq	fp, r1, r4, lsr sl
   147a4:	andeq	fp, r1, r8, lsl sl
   147a8:	ldrdeq	fp, [r1], -ip
   147ac:	andeq	fp, r1, r0, asr #19
   147b0:	andeq	fp, r1, r4, lsl #19
   147b4:	andeq	fp, r1, r8, ror #18
   147b8:	andeq	fp, r1, ip, lsr #18
   147bc:	andeq	fp, r1, r0, lsl r9
   147c0:	ldrdeq	fp, [r1], -r4
   147c4:			; <UNDEFINED> instruction: 0x0001b8b8
   147c8:	andeq	fp, r1, ip, ror r8
   147cc:	andeq	fp, r1, r0, ror #16
   147d0:	andeq	fp, r1, r4, lsr #16
   147d4:	andeq	fp, r1, r8, lsl #16
   147d8:	andeq	r0, r0, ip, lsr #1
   147dc:			; <UNDEFINED> instruction: 0x0001b7b4
   147e0:	muleq	r1, r8, r7
   147e4:	andeq	r9, r0, r8, asr #25
   147e8:	andeq	r9, r0, r0, lsr r7
   147ec:	andeq	r9, r0, r8, lsl r9
   147f0:	andeq	fp, r1, ip, asr r7
   147f4:	andeq	fp, r1, r0, asr #14
   147f8:	andeq	r9, r0, r0, ror ip
   147fc:	ldrdeq	r9, [r0], -r8
   14800:	andeq	r9, r0, r0, lsr #17
   14804:	andeq	fp, r1, r0, lsl r7
   14808:	strdeq	fp, [r1], -r4
   1480c:	ldrdeq	fp, [r1], -r4
   14810:			; <UNDEFINED> instruction: 0x0001b6b8
   14814:	andeq	r9, r0, r8, ror #23
   14818:	andeq	r9, r0, r0, asr r6
   1481c:	andeq	r9, r0, r4, lsr #16

00014820 <body_with_two_returns@@Base>:
   14820:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14824:	strd	r6, [sp, #8]
   14828:	strd	r8, [sp, #16]
   1482c:	strd	sl, [sp, #24]
   14830:	str	lr, [sp, #32]
   14834:	add	fp, sp, #32
   14838:	sub	sp, sp, #124	; 0x7c
   1483c:	ldr	sl, [pc, #1384]	; 14dac <body_with_two_returns@@Base+0x58c>
   14840:	add	sl, pc, sl
   14844:	ldr	r3, [pc, #1380]	; 14db0 <body_with_two_returns@@Base+0x590>
   14848:	add	r3, pc, r3
   1484c:	ldrd	r2, [r3]
   14850:	adds	r0, r2, #1
   14854:	adc	r1, r3, #0
   14858:	ldr	r3, [pc, #1364]	; 14db4 <body_with_two_returns@@Base+0x594>
   1485c:	add	r3, pc, r3
   14860:	strd	r0, [r3]
   14864:	mov	r3, #0
   14868:	str	r3, [fp, #-40]	; 0xffffffd8
   1486c:	sub	r2, fp, #56	; 0x38
   14870:	sub	r3, fp, #60	; 0x3c
   14874:	mov	r1, r2
   14878:	mov	r0, r3
   1487c:	bl	1994c <init_grammar@@Base>
   14880:	ldr	r3, [pc, #1328]	; 14db8 <body_with_two_returns@@Base+0x598>
   14884:	add	r3, pc, r3
   14888:	ldrd	r2, [r3, #8]
   1488c:	adds	r4, r2, #1
   14890:	adc	r5, r3, #0
   14894:	ldr	r3, [pc, #1312]	; 14dbc <body_with_two_returns@@Base+0x59c>
   14898:	add	r3, pc, r3
   1489c:	strd	r4, [r3, #8]
   148a0:	mov	r0, #32
   148a4:	bl	118b8 <malloc@plt>
   148a8:	mov	r3, r0
   148ac:	str	r3, [fp, #-44]	; 0xffffffd4
   148b0:	mov	r0, #4
   148b4:	bl	118b8 <malloc@plt>
   148b8:	mov	r3, r0
   148bc:	mov	r2, r3
   148c0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   148c4:	str	r2, [r3]
   148c8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   148cc:	ldr	r3, [r3]
   148d0:	mov	r0, r3
   148d4:	bl	17be0 <init_token_obra@@Base>
   148d8:	ldr	r3, [pc, #1248]	; 14dc0 <body_with_two_returns@@Base+0x5a0>
   148dc:	add	r3, pc, r3
   148e0:	ldrd	r2, [r3, #16]
   148e4:	adds	r6, r2, #1
   148e8:	adc	r7, r3, #0
   148ec:	ldr	r3, [pc, #1232]	; 14dc4 <body_with_two_returns@@Base+0x5a4>
   148f0:	add	r3, pc, r3
   148f4:	strd	r6, [r3, #16]
   148f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   148fc:	add	r4, r3, #4
   14900:	mov	r0, #4
   14904:	bl	118b8 <malloc@plt>
   14908:	mov	r3, r0
   1490c:	str	r3, [r4]
   14910:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14914:	add	r3, r3, #4
   14918:	ldr	r3, [r3]
   1491c:	mov	r0, r3
   14920:	bl	17ca0 <init_token_return@@Base>
   14924:	ldr	r3, [pc, #1180]	; 14dc8 <body_with_two_returns@@Base+0x5a8>
   14928:	add	r3, pc, r3
   1492c:	ldrd	r2, [r3, #24]
   14930:	adds	r8, r2, #1
   14934:	adc	r9, r3, #0
   14938:	ldr	r3, [pc, #1164]	; 14dcc <body_with_two_returns@@Base+0x5ac>
   1493c:	add	r3, pc, r3
   14940:	strd	r8, [r3, #24]
   14944:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14948:	add	r4, r3, #8
   1494c:	mov	r0, #8
   14950:	bl	118b8 <malloc@plt>
   14954:	mov	r3, r0
   14958:	str	r3, [r4]
   1495c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14960:	add	r3, r3, #8
   14964:	ldr	r3, [r3]
   14968:	mov	r1, #1
   1496c:	mov	r0, r3
   14970:	bl	17a40 <init_token_int_value@@Base>
   14974:	ldr	r3, [pc, #1108]	; 14dd0 <body_with_two_returns@@Base+0x5b0>
   14978:	add	r3, pc, r3
   1497c:	ldrd	r2, [r3, #32]
   14980:	adds	r1, r2, #1
   14984:	str	r1, [fp, #-68]	; 0xffffffbc
   14988:	adc	r3, r3, #0
   1498c:	str	r3, [fp, #-64]	; 0xffffffc0
   14990:	ldr	r3, [pc, #1084]	; 14dd4 <body_with_two_returns@@Base+0x5b4>
   14994:	add	r3, pc, r3
   14998:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   1499c:	strd	r0, [r3, #32]
   149a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   149a4:	add	r4, r3, #12
   149a8:	mov	r0, #4
   149ac:	bl	118b8 <malloc@plt>
   149b0:	mov	r3, r0
   149b4:	str	r3, [r4]
   149b8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   149bc:	add	r3, r3, #12
   149c0:	ldr	r3, [r3]
   149c4:	mov	r0, r3
   149c8:	bl	17d00 <init_token_semicolon@@Base>
   149cc:	ldr	r3, [pc, #1028]	; 14dd8 <body_with_two_returns@@Base+0x5b8>
   149d0:	add	r3, pc, r3
   149d4:	ldrd	r2, [r3, #40]	; 0x28
   149d8:	adds	r1, r2, #1
   149dc:	str	r1, [fp, #-76]	; 0xffffffb4
   149e0:	adc	r3, r3, #0
   149e4:	str	r3, [fp, #-72]	; 0xffffffb8
   149e8:	ldr	r3, [pc, #1004]	; 14ddc <body_with_two_returns@@Base+0x5bc>
   149ec:	add	r3, pc, r3
   149f0:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   149f4:	strd	r0, [r3, #40]	; 0x28
   149f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   149fc:	add	r4, r3, #16
   14a00:	mov	r0, #4
   14a04:	bl	118b8 <malloc@plt>
   14a08:	mov	r3, r0
   14a0c:	str	r3, [r4]
   14a10:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14a14:	add	r3, r3, #16
   14a18:	ldr	r3, [r3]
   14a1c:	mov	r0, r3
   14a20:	bl	17ca0 <init_token_return@@Base>
   14a24:	ldr	r3, [pc, #948]	; 14de0 <body_with_two_returns@@Base+0x5c0>
   14a28:	add	r3, pc, r3
   14a2c:	ldrd	r2, [r3, #48]	; 0x30
   14a30:	adds	r1, r2, #1
   14a34:	str	r1, [fp, #-84]	; 0xffffffac
   14a38:	adc	r3, r3, #0
   14a3c:	str	r3, [fp, #-80]	; 0xffffffb0
   14a40:	ldr	r3, [pc, #924]	; 14de4 <body_with_two_returns@@Base+0x5c4>
   14a44:	add	r3, pc, r3
   14a48:	ldrd	r0, [fp, #-84]	; 0xffffffac
   14a4c:	strd	r0, [r3, #48]	; 0x30
   14a50:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14a54:	add	r4, r3, #20
   14a58:	mov	r0, #8
   14a5c:	bl	118b8 <malloc@plt>
   14a60:	mov	r3, r0
   14a64:	str	r3, [r4]
   14a68:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14a6c:	add	r3, r3, #20
   14a70:	ldr	r3, [r3]
   14a74:	mov	r1, #1
   14a78:	mov	r0, r3
   14a7c:	bl	17a40 <init_token_int_value@@Base>
   14a80:	ldr	r3, [pc, #864]	; 14de8 <body_with_two_returns@@Base+0x5c8>
   14a84:	add	r3, pc, r3
   14a88:	ldrd	r2, [r3, #56]	; 0x38
   14a8c:	adds	r1, r2, #1
   14a90:	str	r1, [fp, #-92]	; 0xffffffa4
   14a94:	adc	r3, r3, #0
   14a98:	str	r3, [fp, #-88]	; 0xffffffa8
   14a9c:	ldr	r3, [pc, #840]	; 14dec <body_with_two_returns@@Base+0x5cc>
   14aa0:	add	r3, pc, r3
   14aa4:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   14aa8:	strd	r0, [r3, #56]	; 0x38
   14aac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14ab0:	add	r4, r3, #24
   14ab4:	mov	r0, #4
   14ab8:	bl	118b8 <malloc@plt>
   14abc:	mov	r3, r0
   14ac0:	str	r3, [r4]
   14ac4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14ac8:	add	r3, r3, #24
   14acc:	ldr	r3, [r3]
   14ad0:	mov	r0, r3
   14ad4:	bl	17d00 <init_token_semicolon@@Base>
   14ad8:	ldr	r3, [pc, #784]	; 14df0 <body_with_two_returns@@Base+0x5d0>
   14adc:	add	r3, pc, r3
   14ae0:	ldrd	r2, [r3, #64]	; 0x40
   14ae4:	adds	r1, r2, #1
   14ae8:	str	r1, [fp, #-100]	; 0xffffff9c
   14aec:	adc	r3, r3, #0
   14af0:	str	r3, [fp, #-96]	; 0xffffffa0
   14af4:	ldr	r3, [pc, #760]	; 14df4 <body_with_two_returns@@Base+0x5d4>
   14af8:	add	r3, pc, r3
   14afc:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   14b00:	strd	r0, [r3, #64]	; 0x40
   14b04:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14b08:	add	r4, r3, #28
   14b0c:	mov	r0, #4
   14b10:	bl	118b8 <malloc@plt>
   14b14:	mov	r3, r0
   14b18:	str	r3, [r4]
   14b1c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14b20:	add	r3, r3, #28
   14b24:	ldr	r3, [r3]
   14b28:	mov	r0, r3
   14b2c:	bl	17c40 <init_token_cbra@@Base>
   14b30:	ldr	r3, [pc, #704]	; 14df8 <body_with_two_returns@@Base+0x5d8>
   14b34:	add	r3, pc, r3
   14b38:	ldrd	r2, [r3, #72]	; 0x48
   14b3c:	adds	r1, r2, #1
   14b40:	str	r1, [fp, #-108]	; 0xffffff94
   14b44:	adc	r3, r3, #0
   14b48:	str	r3, [fp, #-104]	; 0xffffff98
   14b4c:	ldr	r3, [pc, #680]	; 14dfc <body_with_two_returns@@Base+0x5dc>
   14b50:	add	r3, pc, r3
   14b54:	ldrd	r0, [fp, #-108]	; 0xffffff94
   14b58:	strd	r0, [r3, #72]	; 0x48
   14b5c:	ldr	r3, [pc, #668]	; 14e00 <body_with_two_returns@@Base+0x5e0>
   14b60:	ldr	r2, [sl, r3]
   14b64:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14b68:	str	r3, [r2, #228]	; 0xe4
   14b6c:	ldr	r3, [pc, #652]	; 14e00 <body_with_two_returns@@Base+0x5e0>
   14b70:	ldr	r2, [sl, r3]
   14b74:	mov	r3, #8
   14b78:	str	r3, [r2, #220]	; 0xdc
   14b7c:	sub	r3, fp, #60	; 0x3c
   14b80:	mov	r0, r3
   14b84:	bl	19ef8 <read_body@@Base>
   14b88:	str	r0, [fp, #-40]	; 0xffffffd8
   14b8c:	ldr	r3, [pc, #620]	; 14e00 <body_with_two_returns@@Base+0x5e0>
   14b90:	ldr	r3, [sl, r3]
   14b94:	ldr	r3, [r3, #204]	; 0xcc
   14b98:	cmp	r3, #8
   14b9c:	beq	14bec <body_with_two_returns@@Base+0x3cc>
   14ba0:	ldr	r3, [pc, #604]	; 14e04 <body_with_two_returns@@Base+0x5e4>
   14ba4:	add	r3, pc, r3
   14ba8:	ldrd	r2, [r3, #80]	; 0x50
   14bac:	adds	r1, r2, #1
   14bb0:	str	r1, [fp, #-116]	; 0xffffff8c
   14bb4:	adc	r3, r3, #0
   14bb8:	str	r3, [fp, #-112]	; 0xffffff90
   14bbc:	ldr	r3, [pc, #580]	; 14e08 <body_with_two_returns@@Base+0x5e8>
   14bc0:	add	r3, pc, r3
   14bc4:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   14bc8:	strd	r0, [r3, #80]	; 0x50
   14bcc:	ldr	r3, [pc, #568]	; 14e0c <body_with_two_returns@@Base+0x5ec>
   14bd0:	add	r3, pc, r3
   14bd4:	movw	r2, #371	; 0x173
   14bd8:	ldr	r1, [pc, #560]	; 14e10 <body_with_two_returns@@Base+0x5f0>
   14bdc:	add	r1, pc, r1
   14be0:	ldr	r0, [pc, #556]	; 14e14 <body_with_two_returns@@Base+0x5f4>
   14be4:	add	r0, pc, r0
   14be8:	bl	119b4 <__assert_fail@plt>
   14bec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14bf0:	cmp	r3, #0
   14bf4:	bne	14c44 <body_with_two_returns@@Base+0x424>
   14bf8:	ldr	r3, [pc, #536]	; 14e18 <body_with_two_returns@@Base+0x5f8>
   14bfc:	add	r3, pc, r3
   14c00:	ldrd	r2, [r3, #96]	; 0x60
   14c04:	adds	r1, r2, #1
   14c08:	str	r1, [fp, #-132]	; 0xffffff7c
   14c0c:	adc	r3, r3, #0
   14c10:	str	r3, [fp, #-128]	; 0xffffff80
   14c14:	ldr	r3, [pc, #512]	; 14e1c <body_with_two_returns@@Base+0x5fc>
   14c18:	add	r3, pc, r3
   14c1c:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   14c20:	strd	r0, [r3, #96]	; 0x60
   14c24:	ldr	r3, [pc, #500]	; 14e20 <body_with_two_returns@@Base+0x600>
   14c28:	add	r3, pc, r3
   14c2c:	mov	r2, #372	; 0x174
   14c30:	ldr	r1, [pc, #492]	; 14e24 <body_with_two_returns@@Base+0x604>
   14c34:	add	r1, pc, r1
   14c38:	ldr	r0, [pc, #488]	; 14e28 <body_with_two_returns@@Base+0x608>
   14c3c:	add	r0, pc, r0
   14c40:	bl	119b4 <__assert_fail@plt>
   14c44:	ldr	r3, [pc, #480]	; 14e2c <body_with_two_returns@@Base+0x60c>
   14c48:	add	r3, pc, r3
   14c4c:	ldrd	r2, [r3, #88]	; 0x58
   14c50:	adds	r1, r2, #1
   14c54:	str	r1, [fp, #-124]	; 0xffffff84
   14c58:	adc	r3, r3, #0
   14c5c:	str	r3, [fp, #-120]	; 0xffffff88
   14c60:	ldr	r3, [pc, #456]	; 14e30 <body_with_two_returns@@Base+0x610>
   14c64:	add	r3, pc, r3
   14c68:	ldrd	r0, [fp, #-124]	; 0xffffff84
   14c6c:	strd	r0, [r3, #88]	; 0x58
   14c70:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14c74:	ldr	r3, [r3]
   14c78:	cmp	r3, #3
   14c7c:	beq	14ccc <body_with_two_returns@@Base+0x4ac>
   14c80:	ldr	r3, [pc, #428]	; 14e34 <body_with_two_returns@@Base+0x614>
   14c84:	add	r3, pc, r3
   14c88:	ldrd	r2, [r3, #104]	; 0x68
   14c8c:	adds	r1, r2, #1
   14c90:	str	r1, [fp, #-140]	; 0xffffff74
   14c94:	adc	r3, r3, #0
   14c98:	str	r3, [fp, #-136]	; 0xffffff78
   14c9c:	ldr	r3, [pc, #404]	; 14e38 <body_with_two_returns@@Base+0x618>
   14ca0:	add	r3, pc, r3
   14ca4:	ldrd	r0, [fp, #-140]	; 0xffffff74
   14ca8:	strd	r0, [r3, #104]	; 0x68
   14cac:	ldr	r3, [pc, #392]	; 14e3c <body_with_two_returns@@Base+0x61c>
   14cb0:	add	r3, pc, r3
   14cb4:	movw	r2, #373	; 0x175
   14cb8:	ldr	r1, [pc, #384]	; 14e40 <body_with_two_returns@@Base+0x620>
   14cbc:	add	r1, pc, r1
   14cc0:	ldr	r0, [pc, #380]	; 14e44 <body_with_two_returns@@Base+0x624>
   14cc4:	add	r0, pc, r0
   14cc8:	bl	119b4 <__assert_fail@plt>
   14ccc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14cd0:	ldr	r3, [r3, #4]
   14cd4:	ldr	r3, [r3]
   14cd8:	cmp	r3, #3
   14cdc:	beq	14d2c <body_with_two_returns@@Base+0x50c>
   14ce0:	ldr	r3, [pc, #352]	; 14e48 <body_with_two_returns@@Base+0x628>
   14ce4:	add	r3, pc, r3
   14ce8:	ldrd	r2, [r3, #112]	; 0x70
   14cec:	adds	r1, r2, #1
   14cf0:	str	r1, [fp, #-148]	; 0xffffff6c
   14cf4:	adc	r3, r3, #0
   14cf8:	str	r3, [fp, #-144]	; 0xffffff70
   14cfc:	ldr	r3, [pc, #328]	; 14e4c <body_with_two_returns@@Base+0x62c>
   14d00:	add	r3, pc, r3
   14d04:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   14d08:	strd	r0, [r3, #112]	; 0x70
   14d0c:	ldr	r3, [pc, #316]	; 14e50 <body_with_two_returns@@Base+0x630>
   14d10:	add	r3, pc, r3
   14d14:	movw	r2, #374	; 0x176
   14d18:	ldr	r1, [pc, #308]	; 14e54 <body_with_two_returns@@Base+0x634>
   14d1c:	add	r1, pc, r1
   14d20:	ldr	r0, [pc, #304]	; 14e58 <body_with_two_returns@@Base+0x638>
   14d24:	add	r0, pc, r0
   14d28:	bl	119b4 <__assert_fail@plt>
   14d2c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14d30:	ldr	r3, [r3, #4]
   14d34:	ldr	r3, [r3, #4]
   14d38:	cmp	r3, #0
   14d3c:	beq	14d8c <body_with_two_returns@@Base+0x56c>
   14d40:	ldr	r3, [pc, #276]	; 14e5c <body_with_two_returns@@Base+0x63c>
   14d44:	add	r3, pc, r3
   14d48:	ldrd	r2, [r3, #120]	; 0x78
   14d4c:	adds	r1, r2, #1
   14d50:	str	r1, [fp, #-156]	; 0xffffff64
   14d54:	adc	r3, r3, #0
   14d58:	str	r3, [fp, #-152]	; 0xffffff68
   14d5c:	ldr	r3, [pc, #252]	; 14e60 <body_with_two_returns@@Base+0x640>
   14d60:	add	r3, pc, r3
   14d64:	ldrd	r0, [fp, #-156]	; 0xffffff64
   14d68:	strd	r0, [r3, #120]	; 0x78
   14d6c:	ldr	r3, [pc, #240]	; 14e64 <body_with_two_returns@@Base+0x644>
   14d70:	add	r3, pc, r3
   14d74:	movw	r2, #375	; 0x177
   14d78:	ldr	r1, [pc, #232]	; 14e68 <body_with_two_returns@@Base+0x648>
   14d7c:	add	r1, pc, r1
   14d80:	ldr	r0, [pc, #228]	; 14e6c <body_with_two_returns@@Base+0x64c>
   14d84:	add	r0, pc, r0
   14d88:	bl	119b4 <__assert_fail@plt>
   14d8c:	nop	{0}
   14d90:	sub	sp, fp, #32
   14d94:	ldrd	r4, [sp]
   14d98:	ldrd	r6, [sp, #8]
   14d9c:	ldrd	r8, [sp, #16]
   14da0:	ldrd	sl, [sp, #24]
   14da4:	add	sp, sp, #32
   14da8:	pop	{pc}		; (ldr pc, [sp], #4)
   14dac:			; <UNDEFINED> instruction: 0x0001a7b8
   14db0:	andeq	fp, r1, r0, lsl r5
   14db4:	strdeq	fp, [r1], -ip
   14db8:	ldrdeq	fp, [r1], -r4
   14dbc:	andeq	fp, r1, r0, asr #9
   14dc0:	andeq	fp, r1, ip, ror r4
   14dc4:	andeq	fp, r1, r8, ror #8
   14dc8:	andeq	fp, r1, r0, lsr r4
   14dcc:	andeq	fp, r1, ip, lsl r4
   14dd0:	andeq	fp, r1, r0, ror #7
   14dd4:	andeq	fp, r1, r4, asr #7
   14dd8:	andeq	fp, r1, r8, lsl #7
   14ddc:	andeq	fp, r1, ip, ror #6
   14de0:	andeq	fp, r1, r0, lsr r3
   14de4:	andeq	fp, r1, r4, lsl r3
   14de8:	ldrdeq	fp, [r1], -r4
   14dec:			; <UNDEFINED> instruction: 0x0001b2b8
   14df0:	andeq	fp, r1, ip, ror r2
   14df4:	andeq	fp, r1, r0, ror #4
   14df8:	andeq	fp, r1, r4, lsr #4
   14dfc:	andeq	fp, r1, r8, lsl #4
   14e00:	andeq	r0, r0, ip, lsr #1
   14e04:			; <UNDEFINED> instruction: 0x0001b1b4
   14e08:	muleq	r1, r8, r1
   14e0c:	andeq	r9, r0, ip, asr r7
   14e10:			; <UNDEFINED> instruction: 0x000091b0
   14e14:			; <UNDEFINED> instruction: 0x000093b4
   14e18:	andeq	fp, r1, ip, asr r1
   14e1c:	andeq	fp, r1, r0, asr #2
   14e20:	andeq	r9, r0, r4, lsl #14
   14e24:	andeq	r9, r0, r8, asr r1
   14e28:	andeq	r9, r0, r0, lsr #6
   14e2c:	andeq	fp, r1, r0, lsl r1
   14e30:	strdeq	fp, [r1], -r4
   14e34:	ldrdeq	fp, [r1], -r4
   14e38:	strheq	fp, [r1], -r8
   14e3c:	andeq	r9, r0, ip, ror r6
   14e40:	ldrdeq	r9, [r0], -r0
   14e44:	strdeq	r9, [r0], -r0
   14e48:	andeq	fp, r1, r4, ror r0
   14e4c:	andeq	fp, r1, r8, asr r0
   14e50:	andeq	r9, r0, ip, lsl r6
   14e54:	andeq	r9, r0, r0, ror r0
   14e58:	andeq	r9, r0, r8, lsr #5
   14e5c:	andeq	fp, r1, r4, lsl r0
   14e60:	strdeq	sl, [r1], -r8
   14e64:			; <UNDEFINED> instruction: 0x000095bc
   14e68:	andeq	r9, r0, r0, lsl r0
   14e6c:	andeq	r9, r0, r4, ror #4

00014e70 <body_with_one_return@@Base>:
   14e70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e74:	strd	r6, [sp, #8]
   14e78:	strd	r8, [sp, #16]
   14e7c:	strd	sl, [sp, #24]
   14e80:	str	lr, [sp, #32]
   14e84:	add	fp, sp, #32
   14e88:	sub	sp, sp, #92	; 0x5c
   14e8c:	ldr	sl, [pc, #1016]	; 1528c <body_with_one_return@@Base+0x41c>
   14e90:	add	sl, pc, sl
   14e94:	ldr	r3, [pc, #1012]	; 15290 <body_with_one_return@@Base+0x420>
   14e98:	add	r3, pc, r3
   14e9c:	ldrd	r2, [r3]
   14ea0:	adds	r0, r2, #1
   14ea4:	adc	r1, r3, #0
   14ea8:	ldr	r3, [pc, #996]	; 15294 <body_with_one_return@@Base+0x424>
   14eac:	add	r3, pc, r3
   14eb0:	strd	r0, [r3]
   14eb4:	mov	r3, #0
   14eb8:	str	r3, [fp, #-40]	; 0xffffffd8
   14ebc:	sub	r2, fp, #56	; 0x38
   14ec0:	sub	r3, fp, #60	; 0x3c
   14ec4:	mov	r1, r2
   14ec8:	mov	r0, r3
   14ecc:	bl	1994c <init_grammar@@Base>
   14ed0:	ldr	r3, [pc, #960]	; 15298 <body_with_one_return@@Base+0x428>
   14ed4:	add	r3, pc, r3
   14ed8:	ldrd	r2, [r3, #8]
   14edc:	adds	r4, r2, #1
   14ee0:	adc	r5, r3, #0
   14ee4:	ldr	r3, [pc, #944]	; 1529c <body_with_one_return@@Base+0x42c>
   14ee8:	add	r3, pc, r3
   14eec:	strd	r4, [r3, #8]
   14ef0:	mov	r0, #20
   14ef4:	bl	118b8 <malloc@plt>
   14ef8:	mov	r3, r0
   14efc:	str	r3, [fp, #-44]	; 0xffffffd4
   14f00:	mov	r0, #4
   14f04:	bl	118b8 <malloc@plt>
   14f08:	mov	r3, r0
   14f0c:	mov	r2, r3
   14f10:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f14:	str	r2, [r3]
   14f18:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f1c:	ldr	r3, [r3]
   14f20:	mov	r0, r3
   14f24:	bl	17be0 <init_token_obra@@Base>
   14f28:	ldr	r3, [pc, #880]	; 152a0 <body_with_one_return@@Base+0x430>
   14f2c:	add	r3, pc, r3
   14f30:	ldrd	r2, [r3, #16]
   14f34:	adds	r6, r2, #1
   14f38:	adc	r7, r3, #0
   14f3c:	ldr	r3, [pc, #864]	; 152a4 <body_with_one_return@@Base+0x434>
   14f40:	add	r3, pc, r3
   14f44:	strd	r6, [r3, #16]
   14f48:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f4c:	add	r4, r3, #4
   14f50:	mov	r0, #4
   14f54:	bl	118b8 <malloc@plt>
   14f58:	mov	r3, r0
   14f5c:	str	r3, [r4]
   14f60:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f64:	add	r3, r3, #4
   14f68:	ldr	r3, [r3]
   14f6c:	mov	r0, r3
   14f70:	bl	17ca0 <init_token_return@@Base>
   14f74:	ldr	r3, [pc, #812]	; 152a8 <body_with_one_return@@Base+0x438>
   14f78:	add	r3, pc, r3
   14f7c:	ldrd	r2, [r3, #24]
   14f80:	adds	r8, r2, #1
   14f84:	adc	r9, r3, #0
   14f88:	ldr	r3, [pc, #796]	; 152ac <body_with_one_return@@Base+0x43c>
   14f8c:	add	r3, pc, r3
   14f90:	strd	r8, [r3, #24]
   14f94:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f98:	add	r4, r3, #8
   14f9c:	mov	r0, #8
   14fa0:	bl	118b8 <malloc@plt>
   14fa4:	mov	r3, r0
   14fa8:	str	r3, [r4]
   14fac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14fb0:	add	r3, r3, #8
   14fb4:	ldr	r3, [r3]
   14fb8:	mov	r1, #1
   14fbc:	mov	r0, r3
   14fc0:	bl	17a40 <init_token_int_value@@Base>
   14fc4:	ldr	r3, [pc, #740]	; 152b0 <body_with_one_return@@Base+0x440>
   14fc8:	add	r3, pc, r3
   14fcc:	ldrd	r2, [r3, #32]
   14fd0:	adds	r1, r2, #1
   14fd4:	str	r1, [fp, #-68]	; 0xffffffbc
   14fd8:	adc	r3, r3, #0
   14fdc:	str	r3, [fp, #-64]	; 0xffffffc0
   14fe0:	ldr	r3, [pc, #716]	; 152b4 <body_with_one_return@@Base+0x444>
   14fe4:	add	r3, pc, r3
   14fe8:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   14fec:	strd	r0, [r3, #32]
   14ff0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14ff4:	add	r4, r3, #12
   14ff8:	mov	r0, #4
   14ffc:	bl	118b8 <malloc@plt>
   15000:	mov	r3, r0
   15004:	str	r3, [r4]
   15008:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1500c:	add	r3, r3, #12
   15010:	ldr	r3, [r3]
   15014:	mov	r0, r3
   15018:	bl	17d00 <init_token_semicolon@@Base>
   1501c:	ldr	r3, [pc, #660]	; 152b8 <body_with_one_return@@Base+0x448>
   15020:	add	r3, pc, r3
   15024:	ldrd	r2, [r3, #40]	; 0x28
   15028:	adds	r1, r2, #1
   1502c:	str	r1, [fp, #-76]	; 0xffffffb4
   15030:	adc	r3, r3, #0
   15034:	str	r3, [fp, #-72]	; 0xffffffb8
   15038:	ldr	r3, [pc, #636]	; 152bc <body_with_one_return@@Base+0x44c>
   1503c:	add	r3, pc, r3
   15040:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   15044:	strd	r0, [r3, #40]	; 0x28
   15048:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1504c:	add	r4, r3, #16
   15050:	mov	r0, #4
   15054:	bl	118b8 <malloc@plt>
   15058:	mov	r3, r0
   1505c:	str	r3, [r4]
   15060:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15064:	add	r3, r3, #16
   15068:	ldr	r3, [r3]
   1506c:	mov	r0, r3
   15070:	bl	17c40 <init_token_cbra@@Base>
   15074:	ldr	r3, [pc, #580]	; 152c0 <body_with_one_return@@Base+0x450>
   15078:	add	r3, pc, r3
   1507c:	ldrd	r2, [r3, #48]	; 0x30
   15080:	adds	r1, r2, #1
   15084:	str	r1, [fp, #-84]	; 0xffffffac
   15088:	adc	r3, r3, #0
   1508c:	str	r3, [fp, #-80]	; 0xffffffb0
   15090:	ldr	r3, [pc, #556]	; 152c4 <body_with_one_return@@Base+0x454>
   15094:	add	r3, pc, r3
   15098:	ldrd	r0, [fp, #-84]	; 0xffffffac
   1509c:	strd	r0, [r3, #48]	; 0x30
   150a0:	ldr	r3, [pc, #544]	; 152c8 <body_with_one_return@@Base+0x458>
   150a4:	ldr	r3, [sl, r3]
   150a8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   150ac:	str	r2, [r3, #228]	; 0xe4
   150b0:	ldr	r3, [pc, #528]	; 152c8 <body_with_one_return@@Base+0x458>
   150b4:	ldr	r3, [sl, r3]
   150b8:	mov	r2, #5
   150bc:	str	r2, [r3, #220]	; 0xdc
   150c0:	sub	r3, fp, #60	; 0x3c
   150c4:	mov	r0, r3
   150c8:	bl	19ef8 <read_body@@Base>
   150cc:	str	r0, [fp, #-40]	; 0xffffffd8
   150d0:	ldr	r3, [pc, #496]	; 152c8 <body_with_one_return@@Base+0x458>
   150d4:	ldr	r3, [sl, r3]
   150d8:	ldr	r3, [r3, #204]	; 0xcc
   150dc:	cmp	r3, #5
   150e0:	beq	15130 <body_with_one_return@@Base+0x2c0>
   150e4:	ldr	r3, [pc, #480]	; 152cc <body_with_one_return@@Base+0x45c>
   150e8:	add	r3, pc, r3
   150ec:	ldrd	r2, [r3, #56]	; 0x38
   150f0:	adds	r1, r2, #1
   150f4:	str	r1, [fp, #-92]	; 0xffffffa4
   150f8:	adc	r3, r3, #0
   150fc:	str	r3, [fp, #-88]	; 0xffffffa8
   15100:	ldr	r3, [pc, #456]	; 152d0 <body_with_one_return@@Base+0x460>
   15104:	add	r3, pc, r3
   15108:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   1510c:	strd	r0, [r3, #56]	; 0x38
   15110:	ldr	r3, [pc, #444]	; 152d4 <body_with_one_return@@Base+0x464>
   15114:	add	r3, pc, r3
   15118:	movw	r2, #406	; 0x196
   1511c:	ldr	r1, [pc, #436]	; 152d8 <body_with_one_return@@Base+0x468>
   15120:	add	r1, pc, r1
   15124:	ldr	r0, [pc, #432]	; 152dc <body_with_one_return@@Base+0x46c>
   15128:	add	r0, pc, r0
   1512c:	bl	119b4 <__assert_fail@plt>
   15130:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15134:	cmp	r3, #0
   15138:	bne	15188 <body_with_one_return@@Base+0x318>
   1513c:	ldr	r3, [pc, #412]	; 152e0 <body_with_one_return@@Base+0x470>
   15140:	add	r3, pc, r3
   15144:	ldrd	r2, [r3, #72]	; 0x48
   15148:	adds	r1, r2, #1
   1514c:	str	r1, [fp, #-108]	; 0xffffff94
   15150:	adc	r3, r3, #0
   15154:	str	r3, [fp, #-104]	; 0xffffff98
   15158:	ldr	r3, [pc, #388]	; 152e4 <body_with_one_return@@Base+0x474>
   1515c:	add	r3, pc, r3
   15160:	ldrd	r0, [fp, #-108]	; 0xffffff94
   15164:	strd	r0, [r3, #72]	; 0x48
   15168:	ldr	r3, [pc, #376]	; 152e8 <body_with_one_return@@Base+0x478>
   1516c:	add	r3, pc, r3
   15170:	movw	r2, #407	; 0x197
   15174:	ldr	r1, [pc, #368]	; 152ec <body_with_one_return@@Base+0x47c>
   15178:	add	r1, pc, r1
   1517c:	ldr	r0, [pc, #364]	; 152f0 <body_with_one_return@@Base+0x480>
   15180:	add	r0, pc, r0
   15184:	bl	119b4 <__assert_fail@plt>
   15188:	ldr	r3, [pc, #356]	; 152f4 <body_with_one_return@@Base+0x484>
   1518c:	add	r3, pc, r3
   15190:	ldrd	r2, [r3, #64]	; 0x40
   15194:	adds	r1, r2, #1
   15198:	str	r1, [fp, #-100]	; 0xffffff9c
   1519c:	adc	r3, r3, #0
   151a0:	str	r3, [fp, #-96]	; 0xffffffa0
   151a4:	ldr	r3, [pc, #332]	; 152f8 <body_with_one_return@@Base+0x488>
   151a8:	add	r3, pc, r3
   151ac:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   151b0:	strd	r0, [r3, #64]	; 0x40
   151b4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   151b8:	ldr	r3, [r3]
   151bc:	cmp	r3, #3
   151c0:	beq	15210 <body_with_one_return@@Base+0x3a0>
   151c4:	ldr	r3, [pc, #304]	; 152fc <body_with_one_return@@Base+0x48c>
   151c8:	add	r3, pc, r3
   151cc:	ldrd	r2, [r3, #80]	; 0x50
   151d0:	adds	r1, r2, #1
   151d4:	str	r1, [fp, #-116]	; 0xffffff8c
   151d8:	adc	r3, r3, #0
   151dc:	str	r3, [fp, #-112]	; 0xffffff90
   151e0:	ldr	r3, [pc, #280]	; 15300 <body_with_one_return@@Base+0x490>
   151e4:	add	r3, pc, r3
   151e8:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   151ec:	strd	r0, [r3, #80]	; 0x50
   151f0:	ldr	r3, [pc, #268]	; 15304 <body_with_one_return@@Base+0x494>
   151f4:	add	r3, pc, r3
   151f8:	mov	r2, #408	; 0x198
   151fc:	ldr	r1, [pc, #260]	; 15308 <body_with_one_return@@Base+0x498>
   15200:	add	r1, pc, r1
   15204:	ldr	r0, [pc, #256]	; 1530c <body_with_one_return@@Base+0x49c>
   15208:	add	r0, pc, r0
   1520c:	bl	119b4 <__assert_fail@plt>
   15210:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15214:	ldr	r3, [r3, #4]
   15218:	cmp	r3, #0
   1521c:	beq	1526c <body_with_one_return@@Base+0x3fc>
   15220:	ldr	r3, [pc, #232]	; 15310 <body_with_one_return@@Base+0x4a0>
   15224:	add	r3, pc, r3
   15228:	ldrd	r2, [r3, #88]	; 0x58
   1522c:	adds	r1, r2, #1
   15230:	str	r1, [fp, #-124]	; 0xffffff84
   15234:	adc	r3, r3, #0
   15238:	str	r3, [fp, #-120]	; 0xffffff88
   1523c:	ldr	r3, [pc, #208]	; 15314 <body_with_one_return@@Base+0x4a4>
   15240:	add	r3, pc, r3
   15244:	ldrd	r0, [fp, #-124]	; 0xffffff84
   15248:	strd	r0, [r3, #88]	; 0x58
   1524c:	ldr	r3, [pc, #196]	; 15318 <body_with_one_return@@Base+0x4a8>
   15250:	add	r3, pc, r3
   15254:	movw	r2, #409	; 0x199
   15258:	ldr	r1, [pc, #188]	; 1531c <body_with_one_return@@Base+0x4ac>
   1525c:	add	r1, pc, r1
   15260:	ldr	r0, [pc, #184]	; 15320 <body_with_one_return@@Base+0x4b0>
   15264:	add	r0, pc, r0
   15268:	bl	119b4 <__assert_fail@plt>
   1526c:	nop	{0}
   15270:	sub	sp, fp, #32
   15274:	ldrd	r4, [sp]
   15278:	ldrd	r6, [sp, #8]
   1527c:	ldrd	r8, [sp, #16]
   15280:	ldrd	sl, [sp, #24]
   15284:	add	sp, sp, #32
   15288:	pop	{pc}		; (ldr pc, [sp], #4)
   1528c:	andeq	sl, r1, r8, ror #2
   15290:	andeq	sl, r1, r0, ror #28
   15294:	andeq	sl, r1, ip, asr #28
   15298:	andeq	sl, r1, r4, lsr #28
   1529c:	andeq	sl, r1, r0, lsl lr
   152a0:	andeq	sl, r1, ip, asr #27
   152a4:			; <UNDEFINED> instruction: 0x0001adb8
   152a8:	andeq	sl, r1, r0, lsl #27
   152ac:	andeq	sl, r1, ip, ror #26
   152b0:	andeq	sl, r1, r0, lsr sp
   152b4:	andeq	sl, r1, r4, lsl sp
   152b8:	ldrdeq	sl, [r1], -r8
   152bc:			; <UNDEFINED> instruction: 0x0001acbc
   152c0:	andeq	sl, r1, r0, lsl #25
   152c4:	andeq	sl, r1, r4, ror #24
   152c8:	andeq	r0, r0, ip, lsr #1
   152cc:	andeq	sl, r1, r0, lsl ip
   152d0:	strdeq	sl, [r1], -r4
   152d4:	andeq	r9, r0, r0, lsr r2
   152d8:	andeq	r8, r0, ip, ror #24
   152dc:	andeq	r8, r0, r4, lsl #26
   152e0:			; <UNDEFINED> instruction: 0x0001abb8
   152e4:	muleq	r1, ip, fp
   152e8:	ldrdeq	r9, [r0], -r8
   152ec:	andeq	r8, r0, r4, lsl ip
   152f0:	ldrdeq	r8, [r0], -ip
   152f4:	andeq	sl, r1, ip, ror #22
   152f8:	andeq	sl, r1, r0, asr fp
   152fc:	andeq	sl, r1, r0, lsr fp
   15300:	andeq	sl, r1, r4, lsl fp
   15304:	andeq	r9, r0, r0, asr r1
   15308:	andeq	r8, r0, ip, lsl #23
   1530c:	andeq	r8, r0, ip, lsr #27
   15310:	ldrdeq	sl, [r1], -r4
   15314:			; <UNDEFINED> instruction: 0x0001aab8
   15318:	strdeq	r9, [r0], -r4
   1531c:	andeq	r8, r0, r0, lsr fp
   15320:	muleq	r0, ip, sp

00015324 <if_statement_inside_if_statement@@Base>:
   15324:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15328:	strd	r6, [sp, #8]
   1532c:	strd	r8, [sp, #16]
   15330:	strd	sl, [sp, #24]
   15334:	str	lr, [sp, #32]
   15338:	add	fp, sp, #32
   1533c:	sub	sp, sp, #204	; 0xcc
   15340:	ldr	sl, [pc, #2304]	; 15c48 <if_statement_inside_if_statement@@Base+0x924>
   15344:	add	sl, pc, sl
   15348:	ldr	r3, [pc, #2300]	; 15c4c <if_statement_inside_if_statement@@Base+0x928>
   1534c:	add	r3, pc, r3
   15350:	ldrd	r2, [r3]
   15354:	adds	r0, r2, #1
   15358:	adc	r1, r3, #0
   1535c:	ldr	r3, [pc, #2284]	; 15c50 <if_statement_inside_if_statement@@Base+0x92c>
   15360:	add	r3, pc, r3
   15364:	strd	r0, [r3]
   15368:	mov	r3, #0
   1536c:	str	r3, [fp, #-40]	; 0xffffffd8
   15370:	sub	r2, fp, #64	; 0x40
   15374:	sub	r3, fp, #68	; 0x44
   15378:	mov	r1, r2
   1537c:	mov	r0, r3
   15380:	bl	1994c <init_grammar@@Base>
   15384:	ldr	r3, [pc, #2248]	; 15c54 <if_statement_inside_if_statement@@Base+0x930>
   15388:	add	r3, pc, r3
   1538c:	ldrd	r2, [r3, #8]
   15390:	adds	r4, r2, #1
   15394:	adc	r5, r3, #0
   15398:	ldr	r3, [pc, #2232]	; 15c58 <if_statement_inside_if_statement@@Base+0x934>
   1539c:	add	r3, pc, r3
   153a0:	strd	r4, [r3, #8]
   153a4:	mov	r0, #3
   153a8:	bl	118b8 <malloc@plt>
   153ac:	mov	r3, r0
   153b0:	str	r3, [fp, #-44]	; 0xffffffd4
   153b4:	mov	r0, #3
   153b8:	bl	118b8 <malloc@plt>
   153bc:	mov	r3, r0
   153c0:	str	r3, [fp, #-48]	; 0xffffffd0
   153c4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   153c8:	mov	r3, #33	; 0x21
   153cc:	strb	r3, [r2]
   153d0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   153d4:	add	r2, r3, #1
   153d8:	mov	r3, #61	; 0x3d
   153dc:	strb	r3, [r2]
   153e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   153e4:	add	r2, r3, #2
   153e8:	mov	r3, #0
   153ec:	strb	r3, [r2]
   153f0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   153f4:	mov	r3, #33	; 0x21
   153f8:	strb	r3, [r2]
   153fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15400:	add	r2, r3, #1
   15404:	mov	r3, #61	; 0x3d
   15408:	strb	r3, [r2]
   1540c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15410:	add	r2, r3, #2
   15414:	mov	r3, #0
   15418:	strb	r3, [r2]
   1541c:	mov	r0, #76	; 0x4c
   15420:	bl	118b8 <malloc@plt>
   15424:	mov	r3, r0
   15428:	str	r3, [fp, #-52]	; 0xffffffcc
   1542c:	mov	r0, #4
   15430:	bl	118b8 <malloc@plt>
   15434:	mov	r3, r0
   15438:	mov	r2, r3
   1543c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15440:	str	r2, [r3]
   15444:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15448:	ldr	r3, [r3]
   1544c:	mov	r0, r3
   15450:	bl	17b20 <init_token_opar@@Base>
   15454:	ldr	r3, [pc, #2048]	; 15c5c <if_statement_inside_if_statement@@Base+0x938>
   15458:	add	r3, pc, r3
   1545c:	ldrd	r2, [r3, #16]
   15460:	adds	r6, r2, #1
   15464:	adc	r7, r3, #0
   15468:	ldr	r3, [pc, #2032]	; 15c60 <if_statement_inside_if_statement@@Base+0x93c>
   1546c:	add	r3, pc, r3
   15470:	strd	r6, [r3, #16]
   15474:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15478:	add	r4, r3, #4
   1547c:	mov	r0, #8
   15480:	bl	118b8 <malloc@plt>
   15484:	mov	r3, r0
   15488:	str	r3, [r4]
   1548c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15490:	add	r3, r3, #4
   15494:	ldr	r3, [r3]
   15498:	mov	r1, #1
   1549c:	mov	r0, r3
   154a0:	bl	17a40 <init_token_int_value@@Base>
   154a4:	ldr	r3, [pc, #1976]	; 15c64 <if_statement_inside_if_statement@@Base+0x940>
   154a8:	add	r3, pc, r3
   154ac:	ldrd	r2, [r3, #24]
   154b0:	adds	r8, r2, #1
   154b4:	adc	r9, r3, #0
   154b8:	ldr	r3, [pc, #1960]	; 15c68 <if_statement_inside_if_statement@@Base+0x944>
   154bc:	add	r3, pc, r3
   154c0:	strd	r8, [r3, #24]
   154c4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   154c8:	add	r4, r3, #8
   154cc:	mov	r0, #8
   154d0:	bl	118b8 <malloc@plt>
   154d4:	mov	r3, r0
   154d8:	str	r3, [r4]
   154dc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   154e0:	add	r3, r3, #8
   154e4:	ldr	r3, [r3]
   154e8:	mov	r1, #1
   154ec:	mov	r0, r3
   154f0:	bl	17a40 <init_token_int_value@@Base>
   154f4:	ldr	r3, [pc, #1904]	; 15c6c <if_statement_inside_if_statement@@Base+0x948>
   154f8:	add	r3, pc, r3
   154fc:	ldrd	r2, [r3, #32]
   15500:	adds	r1, r2, #1
   15504:	str	r1, [fp, #-76]	; 0xffffffb4
   15508:	adc	r3, r3, #0
   1550c:	str	r3, [fp, #-72]	; 0xffffffb8
   15510:	ldr	r3, [pc, #1880]	; 15c70 <if_statement_inside_if_statement@@Base+0x94c>
   15514:	add	r3, pc, r3
   15518:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   1551c:	strd	r0, [r3, #32]
   15520:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15524:	add	r4, r3, #12
   15528:	mov	r0, #8
   1552c:	bl	118b8 <malloc@plt>
   15530:	mov	r3, r0
   15534:	str	r3, [r4]
   15538:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1553c:	add	r3, r3, #12
   15540:	ldr	r3, [r3]
   15544:	ldr	r1, [fp, #-44]	; 0xffffffd4
   15548:	mov	r0, r3
   1554c:	bl	17e80 <init_token_boolean_op@@Base>
   15550:	ldr	r3, [pc, #1820]	; 15c74 <if_statement_inside_if_statement@@Base+0x950>
   15554:	add	r3, pc, r3
   15558:	ldrd	r2, [r3, #40]	; 0x28
   1555c:	adds	r1, r2, #1
   15560:	str	r1, [fp, #-84]	; 0xffffffac
   15564:	adc	r3, r3, #0
   15568:	str	r3, [fp, #-80]	; 0xffffffb0
   1556c:	ldr	r3, [pc, #1796]	; 15c78 <if_statement_inside_if_statement@@Base+0x954>
   15570:	add	r3, pc, r3
   15574:	ldrd	r0, [fp, #-84]	; 0xffffffac
   15578:	strd	r0, [r3, #40]	; 0x28
   1557c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15580:	add	r4, r3, #16
   15584:	mov	r0, #8
   15588:	bl	118b8 <malloc@plt>
   1558c:	mov	r3, r0
   15590:	str	r3, [r4]
   15594:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15598:	add	r3, r3, #16
   1559c:	ldr	r3, [r3]
   155a0:	mov	r1, #1
   155a4:	mov	r0, r3
   155a8:	bl	17a40 <init_token_int_value@@Base>
   155ac:	ldr	r3, [pc, #1736]	; 15c7c <if_statement_inside_if_statement@@Base+0x958>
   155b0:	add	r3, pc, r3
   155b4:	ldrd	r2, [r3, #48]	; 0x30
   155b8:	adds	r1, r2, #1
   155bc:	str	r1, [fp, #-92]	; 0xffffffa4
   155c0:	adc	r3, r3, #0
   155c4:	str	r3, [fp, #-88]	; 0xffffffa8
   155c8:	ldr	r3, [pc, #1712]	; 15c80 <if_statement_inside_if_statement@@Base+0x95c>
   155cc:	add	r3, pc, r3
   155d0:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   155d4:	strd	r0, [r3, #48]	; 0x30
   155d8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   155dc:	add	r4, r3, #20
   155e0:	mov	r0, #4
   155e4:	bl	118b8 <malloc@plt>
   155e8:	mov	r3, r0
   155ec:	str	r3, [r4]
   155f0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   155f4:	add	r3, r3, #20
   155f8:	ldr	r3, [r3]
   155fc:	mov	r0, r3
   15600:	bl	17b80 <init_token_cpar@@Base>
   15604:	ldr	r3, [pc, #1656]	; 15c84 <if_statement_inside_if_statement@@Base+0x960>
   15608:	add	r3, pc, r3
   1560c:	ldrd	r2, [r3, #56]	; 0x38
   15610:	adds	r1, r2, #1
   15614:	str	r1, [fp, #-100]	; 0xffffff9c
   15618:	adc	r3, r3, #0
   1561c:	str	r3, [fp, #-96]	; 0xffffffa0
   15620:	ldr	r3, [pc, #1632]	; 15c88 <if_statement_inside_if_statement@@Base+0x964>
   15624:	add	r3, pc, r3
   15628:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   1562c:	strd	r0, [r3, #56]	; 0x38
   15630:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15634:	add	r4, r3, #24
   15638:	mov	r0, #4
   1563c:	bl	118b8 <malloc@plt>
   15640:	mov	r3, r0
   15644:	str	r3, [r4]
   15648:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1564c:	add	r3, r3, #24
   15650:	ldr	r3, [r3]
   15654:	mov	r0, r3
   15658:	bl	17be0 <init_token_obra@@Base>
   1565c:	ldr	r3, [pc, #1576]	; 15c8c <if_statement_inside_if_statement@@Base+0x968>
   15660:	add	r3, pc, r3
   15664:	ldrd	r2, [r3, #64]	; 0x40
   15668:	adds	r1, r2, #1
   1566c:	str	r1, [fp, #-108]	; 0xffffff94
   15670:	adc	r3, r3, #0
   15674:	str	r3, [fp, #-104]	; 0xffffff98
   15678:	ldr	r3, [pc, #1552]	; 15c90 <if_statement_inside_if_statement@@Base+0x96c>
   1567c:	add	r3, pc, r3
   15680:	ldrd	r0, [fp, #-108]	; 0xffffff94
   15684:	strd	r0, [r3, #64]	; 0x40
   15688:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1568c:	add	r4, r3, #28
   15690:	mov	r0, #4
   15694:	bl	118b8 <malloc@plt>
   15698:	mov	r3, r0
   1569c:	str	r3, [r4]
   156a0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   156a4:	add	r3, r3, #28
   156a8:	ldr	r3, [r3]
   156ac:	mov	r0, r3
   156b0:	bl	17dc0 <init_token_if@@Base>
   156b4:	ldr	r3, [pc, #1496]	; 15c94 <if_statement_inside_if_statement@@Base+0x970>
   156b8:	add	r3, pc, r3
   156bc:	ldrd	r2, [r3, #72]	; 0x48
   156c0:	adds	r1, r2, #1
   156c4:	str	r1, [fp, #-116]	; 0xffffff8c
   156c8:	adc	r3, r3, #0
   156cc:	str	r3, [fp, #-112]	; 0xffffff90
   156d0:	ldr	r3, [pc, #1472]	; 15c98 <if_statement_inside_if_statement@@Base+0x974>
   156d4:	add	r3, pc, r3
   156d8:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   156dc:	strd	r0, [r3, #72]	; 0x48
   156e0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   156e4:	add	r4, r3, #32
   156e8:	mov	r0, #4
   156ec:	bl	118b8 <malloc@plt>
   156f0:	mov	r3, r0
   156f4:	str	r3, [r4]
   156f8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   156fc:	add	r3, r3, #32
   15700:	ldr	r3, [r3]
   15704:	mov	r0, r3
   15708:	bl	17b20 <init_token_opar@@Base>
   1570c:	ldr	r3, [pc, #1416]	; 15c9c <if_statement_inside_if_statement@@Base+0x978>
   15710:	add	r3, pc, r3
   15714:	ldrd	r2, [r3, #80]	; 0x50
   15718:	adds	r1, r2, #1
   1571c:	str	r1, [fp, #-124]	; 0xffffff84
   15720:	adc	r3, r3, #0
   15724:	str	r3, [fp, #-120]	; 0xffffff88
   15728:	ldr	r3, [pc, #1392]	; 15ca0 <if_statement_inside_if_statement@@Base+0x97c>
   1572c:	add	r3, pc, r3
   15730:	ldrd	r0, [fp, #-124]	; 0xffffff84
   15734:	strd	r0, [r3, #80]	; 0x50
   15738:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1573c:	add	r4, r3, #36	; 0x24
   15740:	mov	r0, #8
   15744:	bl	118b8 <malloc@plt>
   15748:	mov	r3, r0
   1574c:	str	r3, [r4]
   15750:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15754:	add	r3, r3, #36	; 0x24
   15758:	ldr	r3, [r3]
   1575c:	mov	r1, #1
   15760:	mov	r0, r3
   15764:	bl	17a40 <init_token_int_value@@Base>
   15768:	ldr	r3, [pc, #1332]	; 15ca4 <if_statement_inside_if_statement@@Base+0x980>
   1576c:	add	r3, pc, r3
   15770:	ldrd	r2, [r3, #88]	; 0x58
   15774:	adds	r1, r2, #1
   15778:	str	r1, [fp, #-132]	; 0xffffff7c
   1577c:	adc	r3, r3, #0
   15780:	str	r3, [fp, #-128]	; 0xffffff80
   15784:	ldr	r3, [pc, #1308]	; 15ca8 <if_statement_inside_if_statement@@Base+0x984>
   15788:	add	r3, pc, r3
   1578c:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   15790:	strd	r0, [r3, #88]	; 0x58
   15794:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15798:	add	r4, r3, #40	; 0x28
   1579c:	mov	r0, #8
   157a0:	bl	118b8 <malloc@plt>
   157a4:	mov	r3, r0
   157a8:	str	r3, [r4]
   157ac:	ldr	r3, [fp, #-52]	; 0xffffffcc
   157b0:	add	r3, r3, #40	; 0x28
   157b4:	ldr	r3, [r3]
   157b8:	mov	r1, #1
   157bc:	mov	r0, r3
   157c0:	bl	17a40 <init_token_int_value@@Base>
   157c4:	ldr	r3, [pc, #1248]	; 15cac <if_statement_inside_if_statement@@Base+0x988>
   157c8:	add	r3, pc, r3
   157cc:	ldrd	r2, [r3, #96]	; 0x60
   157d0:	adds	r1, r2, #1
   157d4:	str	r1, [fp, #-140]	; 0xffffff74
   157d8:	adc	r3, r3, #0
   157dc:	str	r3, [fp, #-136]	; 0xffffff78
   157e0:	ldr	r3, [pc, #1224]	; 15cb0 <if_statement_inside_if_statement@@Base+0x98c>
   157e4:	add	r3, pc, r3
   157e8:	ldrd	r0, [fp, #-140]	; 0xffffff74
   157ec:	strd	r0, [r3, #96]	; 0x60
   157f0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   157f4:	add	r4, r3, #44	; 0x2c
   157f8:	mov	r0, #8
   157fc:	bl	118b8 <malloc@plt>
   15800:	mov	r3, r0
   15804:	str	r3, [r4]
   15808:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1580c:	add	r3, r3, #44	; 0x2c
   15810:	ldr	r3, [r3]
   15814:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15818:	mov	r0, r3
   1581c:	bl	17e80 <init_token_boolean_op@@Base>
   15820:	ldr	r3, [pc, #1164]	; 15cb4 <if_statement_inside_if_statement@@Base+0x990>
   15824:	add	r3, pc, r3
   15828:	ldrd	r2, [r3, #104]	; 0x68
   1582c:	adds	r1, r2, #1
   15830:	str	r1, [fp, #-148]	; 0xffffff6c
   15834:	adc	r3, r3, #0
   15838:	str	r3, [fp, #-144]	; 0xffffff70
   1583c:	ldr	r3, [pc, #1140]	; 15cb8 <if_statement_inside_if_statement@@Base+0x994>
   15840:	add	r3, pc, r3
   15844:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   15848:	strd	r0, [r3, #104]	; 0x68
   1584c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15850:	add	r4, r3, #48	; 0x30
   15854:	mov	r0, #8
   15858:	bl	118b8 <malloc@plt>
   1585c:	mov	r3, r0
   15860:	str	r3, [r4]
   15864:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15868:	add	r3, r3, #48	; 0x30
   1586c:	ldr	r3, [r3]
   15870:	mov	r1, #1
   15874:	mov	r0, r3
   15878:	bl	17a40 <init_token_int_value@@Base>
   1587c:	ldr	r3, [pc, #1080]	; 15cbc <if_statement_inside_if_statement@@Base+0x998>
   15880:	add	r3, pc, r3
   15884:	ldrd	r2, [r3, #112]	; 0x70
   15888:	adds	r1, r2, #1
   1588c:	str	r1, [fp, #-156]	; 0xffffff64
   15890:	adc	r3, r3, #0
   15894:	str	r3, [fp, #-152]	; 0xffffff68
   15898:	ldr	r3, [pc, #1056]	; 15cc0 <if_statement_inside_if_statement@@Base+0x99c>
   1589c:	add	r3, pc, r3
   158a0:	ldrd	r0, [fp, #-156]	; 0xffffff64
   158a4:	strd	r0, [r3, #112]	; 0x70
   158a8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   158ac:	add	r4, r3, #52	; 0x34
   158b0:	mov	r0, #4
   158b4:	bl	118b8 <malloc@plt>
   158b8:	mov	r3, r0
   158bc:	str	r3, [r4]
   158c0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   158c4:	add	r3, r3, #52	; 0x34
   158c8:	ldr	r3, [r3]
   158cc:	mov	r0, r3
   158d0:	bl	17b80 <init_token_cpar@@Base>
   158d4:	ldr	r3, [pc, #1000]	; 15cc4 <if_statement_inside_if_statement@@Base+0x9a0>
   158d8:	add	r3, pc, r3
   158dc:	ldrd	r2, [r3, #120]	; 0x78
   158e0:	adds	r1, r2, #1
   158e4:	str	r1, [fp, #-164]	; 0xffffff5c
   158e8:	adc	r3, r3, #0
   158ec:	str	r3, [fp, #-160]	; 0xffffff60
   158f0:	ldr	r3, [pc, #976]	; 15cc8 <if_statement_inside_if_statement@@Base+0x9a4>
   158f4:	add	r3, pc, r3
   158f8:	ldrd	r0, [fp, #-164]	; 0xffffff5c
   158fc:	strd	r0, [r3, #120]	; 0x78
   15900:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15904:	add	r4, r3, #56	; 0x38
   15908:	mov	r0, #4
   1590c:	bl	118b8 <malloc@plt>
   15910:	mov	r3, r0
   15914:	str	r3, [r4]
   15918:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1591c:	add	r3, r3, #56	; 0x38
   15920:	ldr	r3, [r3]
   15924:	mov	r0, r3
   15928:	bl	17be0 <init_token_obra@@Base>
   1592c:	ldr	r3, [pc, #920]	; 15ccc <if_statement_inside_if_statement@@Base+0x9a8>
   15930:	add	r3, pc, r3
   15934:	ldrd	r2, [r3, #128]	; 0x80
   15938:	adds	r1, r2, #1
   1593c:	str	r1, [fp, #-172]	; 0xffffff54
   15940:	adc	r3, r3, #0
   15944:	str	r3, [fp, #-168]	; 0xffffff58
   15948:	ldr	r3, [pc, #896]	; 15cd0 <if_statement_inside_if_statement@@Base+0x9ac>
   1594c:	add	r3, pc, r3
   15950:	ldrd	r0, [fp, #-172]	; 0xffffff54
   15954:	strd	r0, [r3, #128]	; 0x80
   15958:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1595c:	add	r4, r3, #60	; 0x3c
   15960:	mov	r0, #4
   15964:	bl	118b8 <malloc@plt>
   15968:	mov	r3, r0
   1596c:	str	r3, [r4]
   15970:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15974:	add	r3, r3, #60	; 0x3c
   15978:	ldr	r3, [r3]
   1597c:	mov	r0, r3
   15980:	bl	17c40 <init_token_cbra@@Base>
   15984:	ldr	r3, [pc, #840]	; 15cd4 <if_statement_inside_if_statement@@Base+0x9b0>
   15988:	add	r3, pc, r3
   1598c:	ldrd	r2, [r3, #136]	; 0x88
   15990:	adds	r1, r2, #1
   15994:	str	r1, [fp, #-180]	; 0xffffff4c
   15998:	adc	r3, r3, #0
   1599c:	str	r3, [fp, #-176]	; 0xffffff50
   159a0:	ldr	r3, [pc, #816]	; 15cd8 <if_statement_inside_if_statement@@Base+0x9b4>
   159a4:	add	r3, pc, r3
   159a8:	ldrd	r0, [fp, #-180]	; 0xffffff4c
   159ac:	strd	r0, [r3, #136]	; 0x88
   159b0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   159b4:	add	r4, r3, #64	; 0x40
   159b8:	mov	r0, #4
   159bc:	bl	118b8 <malloc@plt>
   159c0:	mov	r3, r0
   159c4:	str	r3, [r4]
   159c8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   159cc:	add	r3, r3, #64	; 0x40
   159d0:	ldr	r3, [r3]
   159d4:	mov	r0, r3
   159d8:	bl	17c40 <init_token_cbra@@Base>
   159dc:	ldr	r3, [pc, #760]	; 15cdc <if_statement_inside_if_statement@@Base+0x9b8>
   159e0:	add	r3, pc, r3
   159e4:	ldrd	r2, [r3, #144]	; 0x90
   159e8:	adds	r1, r2, #1
   159ec:	str	r1, [fp, #-188]	; 0xffffff44
   159f0:	adc	r3, r3, #0
   159f4:	str	r3, [fp, #-184]	; 0xffffff48
   159f8:	ldr	r3, [pc, #736]	; 15ce0 <if_statement_inside_if_statement@@Base+0x9bc>
   159fc:	add	r3, pc, r3
   15a00:	ldrd	r0, [fp, #-188]	; 0xffffff44
   15a04:	strd	r0, [r3, #144]	; 0x90
   15a08:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15a0c:	add	r4, r3, #68	; 0x44
   15a10:	mov	r0, #4
   15a14:	bl	118b8 <malloc@plt>
   15a18:	mov	r3, r0
   15a1c:	str	r3, [r4]
   15a20:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15a24:	add	r3, r3, #68	; 0x44
   15a28:	ldr	r3, [r3]
   15a2c:	mov	r0, r3
   15a30:	bl	17c40 <init_token_cbra@@Base>
   15a34:	ldr	r3, [pc, #680]	; 15ce4 <if_statement_inside_if_statement@@Base+0x9c0>
   15a38:	add	r3, pc, r3
   15a3c:	ldrd	r2, [r3, #152]	; 0x98
   15a40:	adds	r1, r2, #1
   15a44:	str	r1, [fp, #-196]	; 0xffffff3c
   15a48:	adc	r3, r3, #0
   15a4c:	str	r3, [fp, #-192]	; 0xffffff40
   15a50:	ldr	r3, [pc, #656]	; 15ce8 <if_statement_inside_if_statement@@Base+0x9c4>
   15a54:	add	r3, pc, r3
   15a58:	ldrd	r0, [fp, #-196]	; 0xffffff3c
   15a5c:	strd	r0, [r3, #152]	; 0x98
   15a60:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15a64:	add	r4, r3, #72	; 0x48
   15a68:	mov	r0, #4
   15a6c:	bl	118b8 <malloc@plt>
   15a70:	mov	r3, r0
   15a74:	str	r3, [r4]
   15a78:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15a7c:	add	r3, r3, #72	; 0x48
   15a80:	ldr	r3, [r3]
   15a84:	mov	r0, r3
   15a88:	bl	17d60 <init_token_eof@@Base>
   15a8c:	ldr	r3, [pc, #600]	; 15cec <if_statement_inside_if_statement@@Base+0x9c8>
   15a90:	add	r3, pc, r3
   15a94:	ldrd	r2, [r3, #160]	; 0xa0
   15a98:	adds	r1, r2, #1
   15a9c:	str	r1, [fp, #-204]	; 0xffffff34
   15aa0:	adc	r3, r3, #0
   15aa4:	str	r3, [fp, #-200]	; 0xffffff38
   15aa8:	ldr	r3, [pc, #576]	; 15cf0 <if_statement_inside_if_statement@@Base+0x9cc>
   15aac:	add	r3, pc, r3
   15ab0:	ldrd	r0, [fp, #-204]	; 0xffffff34
   15ab4:	strd	r0, [r3, #160]	; 0xa0
   15ab8:	ldr	r3, [pc, #564]	; 15cf4 <if_statement_inside_if_statement@@Base+0x9d0>
   15abc:	ldr	r3, [sl, r3]
   15ac0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15ac4:	str	r2, [r3, #228]	; 0xe4
   15ac8:	ldr	r3, [pc, #548]	; 15cf4 <if_statement_inside_if_statement@@Base+0x9d0>
   15acc:	ldr	r3, [sl, r3]
   15ad0:	mov	r2, #19
   15ad4:	str	r2, [r3, #220]	; 0xdc
   15ad8:	sub	r3, fp, #68	; 0x44
   15adc:	mov	r0, r3
   15ae0:	bl	1a660 <read_if_statement@@Base>
   15ae4:	str	r0, [fp, #-40]	; 0xffffffd8
   15ae8:	ldr	r3, [pc, #516]	; 15cf4 <if_statement_inside_if_statement@@Base+0x9d0>
   15aec:	ldr	r3, [sl, r3]
   15af0:	ldr	r3, [r3, #204]	; 0xcc
   15af4:	cmp	r3, #19
   15af8:	beq	15b48 <if_statement_inside_if_statement@@Base+0x824>
   15afc:	ldr	r3, [pc, #500]	; 15cf8 <if_statement_inside_if_statement@@Base+0x9d4>
   15b00:	add	r3, pc, r3
   15b04:	ldrd	r2, [r3, #168]	; 0xa8
   15b08:	adds	r1, r2, #1
   15b0c:	str	r1, [fp, #-212]	; 0xffffff2c
   15b10:	adc	r3, r3, #0
   15b14:	str	r3, [fp, #-208]	; 0xffffff30
   15b18:	ldr	r3, [pc, #476]	; 15cfc <if_statement_inside_if_statement@@Base+0x9d8>
   15b1c:	add	r3, pc, r3
   15b20:	ldrd	r0, [fp, #-212]	; 0xffffff2c
   15b24:	strd	r0, [r3, #168]	; 0xa8
   15b28:	ldr	r3, [pc, #464]	; 15d00 <if_statement_inside_if_statement@@Base+0x9dc>
   15b2c:	add	r3, pc, r3
   15b30:	mov	r2, #480	; 0x1e0
   15b34:	ldr	r1, [pc, #456]	; 15d04 <if_statement_inside_if_statement@@Base+0x9e0>
   15b38:	add	r1, pc, r1
   15b3c:	ldr	r0, [pc, #452]	; 15d08 <if_statement_inside_if_statement@@Base+0x9e4>
   15b40:	add	r0, pc, r0
   15b44:	bl	119b4 <__assert_fail@plt>
   15b48:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15b4c:	cmp	r3, #0
   15b50:	bne	15ba0 <if_statement_inside_if_statement@@Base+0x87c>
   15b54:	ldr	r3, [pc, #432]	; 15d0c <if_statement_inside_if_statement@@Base+0x9e8>
   15b58:	add	r3, pc, r3
   15b5c:	ldrd	r2, [r3, #184]	; 0xb8
   15b60:	adds	r1, r2, #1
   15b64:	str	r1, [fp, #-228]	; 0xffffff1c
   15b68:	adc	r3, r3, #0
   15b6c:	str	r3, [fp, #-224]	; 0xffffff20
   15b70:	ldr	r3, [pc, #408]	; 15d10 <if_statement_inside_if_statement@@Base+0x9ec>
   15b74:	add	r3, pc, r3
   15b78:	ldrd	r0, [fp, #-228]	; 0xffffff1c
   15b7c:	strd	r0, [r3, #184]	; 0xb8
   15b80:	ldr	r3, [pc, #396]	; 15d14 <if_statement_inside_if_statement@@Base+0x9f0>
   15b84:	add	r3, pc, r3
   15b88:	movw	r2, #481	; 0x1e1
   15b8c:	ldr	r1, [pc, #388]	; 15d18 <if_statement_inside_if_statement@@Base+0x9f4>
   15b90:	add	r1, pc, r1
   15b94:	ldr	r0, [pc, #384]	; 15d1c <if_statement_inside_if_statement@@Base+0x9f8>
   15b98:	add	r0, pc, r0
   15b9c:	bl	119b4 <__assert_fail@plt>
   15ba0:	ldr	r3, [pc, #376]	; 15d20 <if_statement_inside_if_statement@@Base+0x9fc>
   15ba4:	add	r3, pc, r3
   15ba8:	ldrd	r2, [r3, #176]	; 0xb0
   15bac:	adds	r1, r2, #1
   15bb0:	str	r1, [fp, #-220]	; 0xffffff24
   15bb4:	adc	r3, r3, #0
   15bb8:	str	r3, [fp, #-216]	; 0xffffff28
   15bbc:	ldr	r3, [pc, #352]	; 15d24 <if_statement_inside_if_statement@@Base+0xa00>
   15bc0:	add	r3, pc, r3
   15bc4:	ldrd	r0, [fp, #-220]	; 0xffffff24
   15bc8:	strd	r0, [r3, #176]	; 0xb0
   15bcc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15bd0:	ldr	r3, [r3]
   15bd4:	cmp	r3, #4
   15bd8:	beq	15c28 <if_statement_inside_if_statement@@Base+0x904>
   15bdc:	ldr	r3, [pc, #324]	; 15d28 <if_statement_inside_if_statement@@Base+0xa04>
   15be0:	add	r3, pc, r3
   15be4:	ldrd	r2, [r3, #192]	; 0xc0
   15be8:	adds	r1, r2, #1
   15bec:	str	r1, [fp, #-236]	; 0xffffff14
   15bf0:	adc	r3, r3, #0
   15bf4:	str	r3, [fp, #-232]	; 0xffffff18
   15bf8:	ldr	r3, [pc, #300]	; 15d2c <if_statement_inside_if_statement@@Base+0xa08>
   15bfc:	add	r3, pc, r3
   15c00:	ldrd	r0, [fp, #-236]	; 0xffffff14
   15c04:	strd	r0, [r3, #192]	; 0xc0
   15c08:	ldr	r3, [pc, #288]	; 15d30 <if_statement_inside_if_statement@@Base+0xa0c>
   15c0c:	add	r3, pc, r3
   15c10:	movw	r2, #482	; 0x1e2
   15c14:	ldr	r1, [pc, #280]	; 15d34 <if_statement_inside_if_statement@@Base+0xa10>
   15c18:	add	r1, pc, r1
   15c1c:	ldr	r0, [pc, #276]	; 15d38 <if_statement_inside_if_statement@@Base+0xa14>
   15c20:	add	r0, pc, r0
   15c24:	bl	119b4 <__assert_fail@plt>
   15c28:	nop	{0}
   15c2c:	sub	sp, fp, #32
   15c30:	ldrd	r4, [sp]
   15c34:	ldrd	r6, [sp, #8]
   15c38:	ldrd	r8, [sp, #16]
   15c3c:	ldrd	sl, [sp, #24]
   15c40:	add	sp, sp, #32
   15c44:	pop	{pc}		; (ldr pc, [sp], #4)
   15c48:			; <UNDEFINED> instruction: 0x00019cb4
   15c4c:	andeq	sl, r1, r4, ror #17
   15c50:	ldrdeq	sl, [r1], -r0
   15c54:	andeq	sl, r1, r8, lsr #17
   15c58:	muleq	r1, r4, r8
   15c5c:	ldrdeq	sl, [r1], -r8
   15c60:	andeq	sl, r1, r4, asr #15
   15c64:	andeq	sl, r1, r8, lsl #15
   15c68:	andeq	sl, r1, r4, ror r7
   15c6c:	andeq	sl, r1, r8, lsr r7
   15c70:	andeq	sl, r1, ip, lsl r7
   15c74:	ldrdeq	sl, [r1], -ip
   15c78:	andeq	sl, r1, r0, asr #13
   15c7c:	andeq	sl, r1, r0, lsl #13
   15c80:	andeq	sl, r1, r4, ror #12
   15c84:	andeq	sl, r1, r8, lsr #12
   15c88:	andeq	sl, r1, ip, lsl #12
   15c8c:	ldrdeq	sl, [r1], -r0
   15c90:			; <UNDEFINED> instruction: 0x0001a5b4
   15c94:	andeq	sl, r1, r8, ror r5
   15c98:	andeq	sl, r1, ip, asr r5
   15c9c:	andeq	sl, r1, r0, lsr #10
   15ca0:	andeq	sl, r1, r4, lsl #10
   15ca4:	andeq	sl, r1, r4, asr #9
   15ca8:	andeq	sl, r1, r8, lsr #9
   15cac:	andeq	sl, r1, r8, ror #8
   15cb0:	andeq	sl, r1, ip, asr #8
   15cb4:	andeq	sl, r1, ip, lsl #8
   15cb8:	strdeq	sl, [r1], -r0
   15cbc:			; <UNDEFINED> instruction: 0x0001a3b0
   15cc0:	muleq	r1, r4, r3
   15cc4:	andeq	sl, r1, r8, asr r3
   15cc8:	andeq	sl, r1, ip, lsr r3
   15ccc:	andeq	sl, r1, r0, lsl #6
   15cd0:	andeq	sl, r1, r4, ror #5
   15cd4:	andeq	sl, r1, r8, lsr #5
   15cd8:	andeq	sl, r1, ip, lsl #5
   15cdc:	andeq	sl, r1, r0, asr r2
   15ce0:	andeq	sl, r1, r4, lsr r2
   15ce4:	strdeq	sl, [r1], -r8
   15ce8:	ldrdeq	sl, [r1], -ip
   15cec:	andeq	sl, r1, r0, lsr #3
   15cf0:	andeq	sl, r1, r4, lsl #3
   15cf4:	andeq	r0, r0, ip, lsr #1
   15cf8:	andeq	sl, r1, r0, lsr r1
   15cfc:	andeq	sl, r1, r4, lsl r1
   15d00:	andeq	r8, r0, r0, lsr r8
   15d04:	andeq	r8, r0, r4, asr r2
   15d08:	ldrdeq	r8, [r0], -r4
   15d0c:	ldrdeq	sl, [r1], -r8
   15d10:	strheq	sl, [r1], -ip
   15d14:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   15d18:	strdeq	r8, [r0], -ip
   15d1c:	andeq	r8, r0, r4, asr #7
   15d20:	andeq	sl, r1, ip, lsl #1
   15d24:	andeq	sl, r1, r0, ror r0
   15d28:	andeq	sl, r1, r0, asr r0
   15d2c:	andeq	sl, r1, r4, lsr r0
   15d30:	andeq	r8, r0, r0, asr r7
   15d34:	andeq	r8, r0, r4, ror r1
   15d38:	andeq	r8, r0, r8, asr #6

00015d3c <if_statement_inside_else_statement@@Base>:
   15d3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15d40:	strd	r6, [sp, #8]
   15d44:	strd	r8, [sp, #16]
   15d48:	strd	sl, [sp, #24]
   15d4c:	str	lr, [sp, #32]
   15d50:	add	fp, sp, #32
   15d54:	sub	sp, sp, #220	; 0xdc
   15d58:	ldr	sl, [pc, #2480]	; 16710 <if_statement_inside_else_statement@@Base+0x9d4>
   15d5c:	add	sl, pc, sl
   15d60:	ldr	r3, [pc, #2476]	; 16714 <if_statement_inside_else_statement@@Base+0x9d8>
   15d64:	add	r3, pc, r3
   15d68:	ldrd	r2, [r3]
   15d6c:	adds	r0, r2, #1
   15d70:	adc	r1, r3, #0
   15d74:	ldr	r3, [pc, #2460]	; 16718 <if_statement_inside_else_statement@@Base+0x9dc>
   15d78:	add	r3, pc, r3
   15d7c:	strd	r0, [r3]
   15d80:	mov	r3, #0
   15d84:	str	r3, [fp, #-40]	; 0xffffffd8
   15d88:	sub	r2, fp, #64	; 0x40
   15d8c:	sub	r3, fp, #68	; 0x44
   15d90:	mov	r1, r2
   15d94:	mov	r0, r3
   15d98:	bl	1994c <init_grammar@@Base>
   15d9c:	ldr	r3, [pc, #2424]	; 1671c <if_statement_inside_else_statement@@Base+0x9e0>
   15da0:	add	r3, pc, r3
   15da4:	ldrd	r2, [r3, #8]
   15da8:	adds	r4, r2, #1
   15dac:	adc	r5, r3, #0
   15db0:	ldr	r3, [pc, #2408]	; 16720 <if_statement_inside_else_statement@@Base+0x9e4>
   15db4:	add	r3, pc, r3
   15db8:	strd	r4, [r3, #8]
   15dbc:	mov	r0, #3
   15dc0:	bl	118b8 <malloc@plt>
   15dc4:	mov	r3, r0
   15dc8:	str	r3, [fp, #-44]	; 0xffffffd4
   15dcc:	mov	r0, #3
   15dd0:	bl	118b8 <malloc@plt>
   15dd4:	mov	r3, r0
   15dd8:	str	r3, [fp, #-48]	; 0xffffffd0
   15ddc:	ldr	r2, [fp, #-44]	; 0xffffffd4
   15de0:	mov	r3, #33	; 0x21
   15de4:	strb	r3, [r2]
   15de8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15dec:	add	r2, r3, #1
   15df0:	mov	r3, #61	; 0x3d
   15df4:	strb	r3, [r2]
   15df8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15dfc:	add	r2, r3, #2
   15e00:	mov	r3, #0
   15e04:	strb	r3, [r2]
   15e08:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15e0c:	mov	r3, #33	; 0x21
   15e10:	strb	r3, [r2]
   15e14:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15e18:	add	r2, r3, #1
   15e1c:	mov	r3, #61	; 0x3d
   15e20:	strb	r3, [r2]
   15e24:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15e28:	add	r2, r3, #2
   15e2c:	mov	r3, #0
   15e30:	strb	r3, [r2]
   15e34:	mov	r0, #84	; 0x54
   15e38:	bl	118b8 <malloc@plt>
   15e3c:	mov	r3, r0
   15e40:	str	r3, [fp, #-52]	; 0xffffffcc
   15e44:	mov	r0, #4
   15e48:	bl	118b8 <malloc@plt>
   15e4c:	mov	r3, r0
   15e50:	mov	r2, r3
   15e54:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15e58:	str	r2, [r3]
   15e5c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15e60:	ldr	r3, [r3]
   15e64:	mov	r0, r3
   15e68:	bl	17b20 <init_token_opar@@Base>
   15e6c:	ldr	r3, [pc, #2224]	; 16724 <if_statement_inside_else_statement@@Base+0x9e8>
   15e70:	add	r3, pc, r3
   15e74:	ldrd	r2, [r3, #16]
   15e78:	adds	r6, r2, #1
   15e7c:	adc	r7, r3, #0
   15e80:	ldr	r3, [pc, #2208]	; 16728 <if_statement_inside_else_statement@@Base+0x9ec>
   15e84:	add	r3, pc, r3
   15e88:	strd	r6, [r3, #16]
   15e8c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15e90:	add	r4, r3, #4
   15e94:	mov	r0, #8
   15e98:	bl	118b8 <malloc@plt>
   15e9c:	mov	r3, r0
   15ea0:	str	r3, [r4]
   15ea4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15ea8:	add	r3, r3, #4
   15eac:	ldr	r3, [r3]
   15eb0:	mov	r1, #1
   15eb4:	mov	r0, r3
   15eb8:	bl	17a40 <init_token_int_value@@Base>
   15ebc:	ldr	r3, [pc, #2152]	; 1672c <if_statement_inside_else_statement@@Base+0x9f0>
   15ec0:	add	r3, pc, r3
   15ec4:	ldrd	r2, [r3, #24]
   15ec8:	adds	r8, r2, #1
   15ecc:	adc	r9, r3, #0
   15ed0:	ldr	r3, [pc, #2136]	; 16730 <if_statement_inside_else_statement@@Base+0x9f4>
   15ed4:	add	r3, pc, r3
   15ed8:	strd	r8, [r3, #24]
   15edc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15ee0:	add	r4, r3, #8
   15ee4:	mov	r0, #8
   15ee8:	bl	118b8 <malloc@plt>
   15eec:	mov	r3, r0
   15ef0:	str	r3, [r4]
   15ef4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15ef8:	add	r3, r3, #8
   15efc:	ldr	r3, [r3]
   15f00:	mov	r1, #1
   15f04:	mov	r0, r3
   15f08:	bl	17a40 <init_token_int_value@@Base>
   15f0c:	ldr	r3, [pc, #2080]	; 16734 <if_statement_inside_else_statement@@Base+0x9f8>
   15f10:	add	r3, pc, r3
   15f14:	ldrd	r2, [r3, #32]
   15f18:	adds	r1, r2, #1
   15f1c:	str	r1, [fp, #-76]	; 0xffffffb4
   15f20:	adc	r3, r3, #0
   15f24:	str	r3, [fp, #-72]	; 0xffffffb8
   15f28:	ldr	r3, [pc, #2056]	; 16738 <if_statement_inside_else_statement@@Base+0x9fc>
   15f2c:	add	r3, pc, r3
   15f30:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   15f34:	strd	r0, [r3, #32]
   15f38:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15f3c:	add	r4, r3, #12
   15f40:	mov	r0, #8
   15f44:	bl	118b8 <malloc@plt>
   15f48:	mov	r3, r0
   15f4c:	str	r3, [r4]
   15f50:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15f54:	add	r3, r3, #12
   15f58:	ldr	r3, [r3]
   15f5c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   15f60:	mov	r0, r3
   15f64:	bl	17e80 <init_token_boolean_op@@Base>
   15f68:	ldr	r3, [pc, #1996]	; 1673c <if_statement_inside_else_statement@@Base+0xa00>
   15f6c:	add	r3, pc, r3
   15f70:	ldrd	r2, [r3, #40]	; 0x28
   15f74:	adds	r1, r2, #1
   15f78:	str	r1, [fp, #-84]	; 0xffffffac
   15f7c:	adc	r3, r3, #0
   15f80:	str	r3, [fp, #-80]	; 0xffffffb0
   15f84:	ldr	r3, [pc, #1972]	; 16740 <if_statement_inside_else_statement@@Base+0xa04>
   15f88:	add	r3, pc, r3
   15f8c:	ldrd	r0, [fp, #-84]	; 0xffffffac
   15f90:	strd	r0, [r3, #40]	; 0x28
   15f94:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15f98:	add	r4, r3, #16
   15f9c:	mov	r0, #8
   15fa0:	bl	118b8 <malloc@plt>
   15fa4:	mov	r3, r0
   15fa8:	str	r3, [r4]
   15fac:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15fb0:	add	r3, r3, #16
   15fb4:	ldr	r3, [r3]
   15fb8:	mov	r1, #1
   15fbc:	mov	r0, r3
   15fc0:	bl	17a40 <init_token_int_value@@Base>
   15fc4:	ldr	r3, [pc, #1912]	; 16744 <if_statement_inside_else_statement@@Base+0xa08>
   15fc8:	add	r3, pc, r3
   15fcc:	ldrd	r2, [r3, #48]	; 0x30
   15fd0:	adds	r1, r2, #1
   15fd4:	str	r1, [fp, #-92]	; 0xffffffa4
   15fd8:	adc	r3, r3, #0
   15fdc:	str	r3, [fp, #-88]	; 0xffffffa8
   15fe0:	ldr	r3, [pc, #1888]	; 16748 <if_statement_inside_else_statement@@Base+0xa0c>
   15fe4:	add	r3, pc, r3
   15fe8:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   15fec:	strd	r0, [r3, #48]	; 0x30
   15ff0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15ff4:	add	r4, r3, #20
   15ff8:	mov	r0, #4
   15ffc:	bl	118b8 <malloc@plt>
   16000:	mov	r3, r0
   16004:	str	r3, [r4]
   16008:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1600c:	add	r3, r3, #20
   16010:	ldr	r3, [r3]
   16014:	mov	r0, r3
   16018:	bl	17b80 <init_token_cpar@@Base>
   1601c:	ldr	r3, [pc, #1832]	; 1674c <if_statement_inside_else_statement@@Base+0xa10>
   16020:	add	r3, pc, r3
   16024:	ldrd	r2, [r3, #56]	; 0x38
   16028:	adds	r1, r2, #1
   1602c:	str	r1, [fp, #-100]	; 0xffffff9c
   16030:	adc	r3, r3, #0
   16034:	str	r3, [fp, #-96]	; 0xffffffa0
   16038:	ldr	r3, [pc, #1808]	; 16750 <if_statement_inside_else_statement@@Base+0xa14>
   1603c:	add	r3, pc, r3
   16040:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   16044:	strd	r0, [r3, #56]	; 0x38
   16048:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1604c:	add	r4, r3, #24
   16050:	mov	r0, #4
   16054:	bl	118b8 <malloc@plt>
   16058:	mov	r3, r0
   1605c:	str	r3, [r4]
   16060:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16064:	add	r3, r3, #24
   16068:	ldr	r3, [r3]
   1606c:	mov	r0, r3
   16070:	bl	17be0 <init_token_obra@@Base>
   16074:	ldr	r3, [pc, #1752]	; 16754 <if_statement_inside_else_statement@@Base+0xa18>
   16078:	add	r3, pc, r3
   1607c:	ldrd	r2, [r3, #64]	; 0x40
   16080:	adds	r1, r2, #1
   16084:	str	r1, [fp, #-108]	; 0xffffff94
   16088:	adc	r3, r3, #0
   1608c:	str	r3, [fp, #-104]	; 0xffffff98
   16090:	ldr	r3, [pc, #1728]	; 16758 <if_statement_inside_else_statement@@Base+0xa1c>
   16094:	add	r3, pc, r3
   16098:	ldrd	r0, [fp, #-108]	; 0xffffff94
   1609c:	strd	r0, [r3, #64]	; 0x40
   160a0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   160a4:	add	r4, r3, #28
   160a8:	mov	r0, #4
   160ac:	bl	118b8 <malloc@plt>
   160b0:	mov	r3, r0
   160b4:	str	r3, [r4]
   160b8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   160bc:	add	r3, r3, #28
   160c0:	ldr	r3, [r3]
   160c4:	mov	r0, r3
   160c8:	bl	17c40 <init_token_cbra@@Base>
   160cc:	ldr	r3, [pc, #1672]	; 1675c <if_statement_inside_else_statement@@Base+0xa20>
   160d0:	add	r3, pc, r3
   160d4:	ldrd	r2, [r3, #72]	; 0x48
   160d8:	adds	r1, r2, #1
   160dc:	str	r1, [fp, #-116]	; 0xffffff8c
   160e0:	adc	r3, r3, #0
   160e4:	str	r3, [fp, #-112]	; 0xffffff90
   160e8:	ldr	r3, [pc, #1648]	; 16760 <if_statement_inside_else_statement@@Base+0xa24>
   160ec:	add	r3, pc, r3
   160f0:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   160f4:	strd	r0, [r3, #72]	; 0x48
   160f8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   160fc:	add	r4, r3, #32
   16100:	mov	r0, #4
   16104:	bl	118b8 <malloc@plt>
   16108:	mov	r3, r0
   1610c:	str	r3, [r4]
   16110:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16114:	add	r3, r3, #32
   16118:	ldr	r3, [r3]
   1611c:	mov	r0, r3
   16120:	bl	17e20 <init_token_else@@Base>
   16124:	ldr	r3, [pc, #1592]	; 16764 <if_statement_inside_else_statement@@Base+0xa28>
   16128:	add	r3, pc, r3
   1612c:	ldrd	r2, [r3, #80]	; 0x50
   16130:	adds	r1, r2, #1
   16134:	str	r1, [fp, #-124]	; 0xffffff84
   16138:	adc	r3, r3, #0
   1613c:	str	r3, [fp, #-120]	; 0xffffff88
   16140:	ldr	r3, [pc, #1568]	; 16768 <if_statement_inside_else_statement@@Base+0xa2c>
   16144:	add	r3, pc, r3
   16148:	ldrd	r0, [fp, #-124]	; 0xffffff84
   1614c:	strd	r0, [r3, #80]	; 0x50
   16150:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16154:	add	r4, r3, #36	; 0x24
   16158:	mov	r0, #4
   1615c:	bl	118b8 <malloc@plt>
   16160:	mov	r3, r0
   16164:	str	r3, [r4]
   16168:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1616c:	add	r3, r3, #36	; 0x24
   16170:	ldr	r3, [r3]
   16174:	mov	r0, r3
   16178:	bl	17be0 <init_token_obra@@Base>
   1617c:	ldr	r3, [pc, #1512]	; 1676c <if_statement_inside_else_statement@@Base+0xa30>
   16180:	add	r3, pc, r3
   16184:	ldrd	r2, [r3, #88]	; 0x58
   16188:	adds	r1, r2, #1
   1618c:	str	r1, [fp, #-132]	; 0xffffff7c
   16190:	adc	r3, r3, #0
   16194:	str	r3, [fp, #-128]	; 0xffffff80
   16198:	ldr	r3, [pc, #1488]	; 16770 <if_statement_inside_else_statement@@Base+0xa34>
   1619c:	add	r3, pc, r3
   161a0:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   161a4:	strd	r0, [r3, #88]	; 0x58
   161a8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   161ac:	add	r4, r3, #40	; 0x28
   161b0:	mov	r0, #4
   161b4:	bl	118b8 <malloc@plt>
   161b8:	mov	r3, r0
   161bc:	str	r3, [r4]
   161c0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   161c4:	add	r3, r3, #40	; 0x28
   161c8:	ldr	r3, [r3]
   161cc:	mov	r0, r3
   161d0:	bl	17dc0 <init_token_if@@Base>
   161d4:	ldr	r3, [pc, #1432]	; 16774 <if_statement_inside_else_statement@@Base+0xa38>
   161d8:	add	r3, pc, r3
   161dc:	ldrd	r2, [r3, #96]	; 0x60
   161e0:	adds	r1, r2, #1
   161e4:	str	r1, [fp, #-140]	; 0xffffff74
   161e8:	adc	r3, r3, #0
   161ec:	str	r3, [fp, #-136]	; 0xffffff78
   161f0:	ldr	r3, [pc, #1408]	; 16778 <if_statement_inside_else_statement@@Base+0xa3c>
   161f4:	add	r3, pc, r3
   161f8:	ldrd	r0, [fp, #-140]	; 0xffffff74
   161fc:	strd	r0, [r3, #96]	; 0x60
   16200:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16204:	add	r4, r3, #44	; 0x2c
   16208:	mov	r0, #4
   1620c:	bl	118b8 <malloc@plt>
   16210:	mov	r3, r0
   16214:	str	r3, [r4]
   16218:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1621c:	add	r3, r3, #44	; 0x2c
   16220:	ldr	r3, [r3]
   16224:	mov	r0, r3
   16228:	bl	17b20 <init_token_opar@@Base>
   1622c:	ldr	r3, [pc, #1352]	; 1677c <if_statement_inside_else_statement@@Base+0xa40>
   16230:	add	r3, pc, r3
   16234:	ldrd	r2, [r3, #104]	; 0x68
   16238:	adds	r1, r2, #1
   1623c:	str	r1, [fp, #-148]	; 0xffffff6c
   16240:	adc	r3, r3, #0
   16244:	str	r3, [fp, #-144]	; 0xffffff70
   16248:	ldr	r3, [pc, #1328]	; 16780 <if_statement_inside_else_statement@@Base+0xa44>
   1624c:	add	r3, pc, r3
   16250:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   16254:	strd	r0, [r3, #104]	; 0x68
   16258:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1625c:	add	r4, r3, #48	; 0x30
   16260:	mov	r0, #8
   16264:	bl	118b8 <malloc@plt>
   16268:	mov	r3, r0
   1626c:	str	r3, [r4]
   16270:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16274:	add	r3, r3, #48	; 0x30
   16278:	ldr	r3, [r3]
   1627c:	mov	r1, #1
   16280:	mov	r0, r3
   16284:	bl	17a40 <init_token_int_value@@Base>
   16288:	ldr	r3, [pc, #1268]	; 16784 <if_statement_inside_else_statement@@Base+0xa48>
   1628c:	add	r3, pc, r3
   16290:	ldrd	r2, [r3, #112]	; 0x70
   16294:	adds	r1, r2, #1
   16298:	str	r1, [fp, #-156]	; 0xffffff64
   1629c:	adc	r3, r3, #0
   162a0:	str	r3, [fp, #-152]	; 0xffffff68
   162a4:	ldr	r3, [pc, #1244]	; 16788 <if_statement_inside_else_statement@@Base+0xa4c>
   162a8:	add	r3, pc, r3
   162ac:	ldrd	r0, [fp, #-156]	; 0xffffff64
   162b0:	strd	r0, [r3, #112]	; 0x70
   162b4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   162b8:	add	r4, r3, #52	; 0x34
   162bc:	mov	r0, #8
   162c0:	bl	118b8 <malloc@plt>
   162c4:	mov	r3, r0
   162c8:	str	r3, [r4]
   162cc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   162d0:	add	r3, r3, #52	; 0x34
   162d4:	ldr	r3, [r3]
   162d8:	mov	r1, #1
   162dc:	mov	r0, r3
   162e0:	bl	17a40 <init_token_int_value@@Base>
   162e4:	ldr	r3, [pc, #1184]	; 1678c <if_statement_inside_else_statement@@Base+0xa50>
   162e8:	add	r3, pc, r3
   162ec:	ldrd	r2, [r3, #120]	; 0x78
   162f0:	adds	r1, r2, #1
   162f4:	str	r1, [fp, #-164]	; 0xffffff5c
   162f8:	adc	r3, r3, #0
   162fc:	str	r3, [fp, #-160]	; 0xffffff60
   16300:	ldr	r3, [pc, #1160]	; 16790 <if_statement_inside_else_statement@@Base+0xa54>
   16304:	add	r3, pc, r3
   16308:	ldrd	r0, [fp, #-164]	; 0xffffff5c
   1630c:	strd	r0, [r3, #120]	; 0x78
   16310:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16314:	add	r4, r3, #56	; 0x38
   16318:	mov	r0, #8
   1631c:	bl	118b8 <malloc@plt>
   16320:	mov	r3, r0
   16324:	str	r3, [r4]
   16328:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1632c:	add	r3, r3, #56	; 0x38
   16330:	ldr	r3, [r3]
   16334:	ldr	r1, [fp, #-48]	; 0xffffffd0
   16338:	mov	r0, r3
   1633c:	bl	17e80 <init_token_boolean_op@@Base>
   16340:	ldr	r3, [pc, #1100]	; 16794 <if_statement_inside_else_statement@@Base+0xa58>
   16344:	add	r3, pc, r3
   16348:	ldrd	r2, [r3, #128]	; 0x80
   1634c:	adds	r1, r2, #1
   16350:	str	r1, [fp, #-172]	; 0xffffff54
   16354:	adc	r3, r3, #0
   16358:	str	r3, [fp, #-168]	; 0xffffff58
   1635c:	ldr	r3, [pc, #1076]	; 16798 <if_statement_inside_else_statement@@Base+0xa5c>
   16360:	add	r3, pc, r3
   16364:	ldrd	r0, [fp, #-172]	; 0xffffff54
   16368:	strd	r0, [r3, #128]	; 0x80
   1636c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16370:	add	r4, r3, #60	; 0x3c
   16374:	mov	r0, #8
   16378:	bl	118b8 <malloc@plt>
   1637c:	mov	r3, r0
   16380:	str	r3, [r4]
   16384:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16388:	add	r3, r3, #60	; 0x3c
   1638c:	ldr	r3, [r3]
   16390:	mov	r1, #1
   16394:	mov	r0, r3
   16398:	bl	17a40 <init_token_int_value@@Base>
   1639c:	ldr	r3, [pc, #1016]	; 1679c <if_statement_inside_else_statement@@Base+0xa60>
   163a0:	add	r3, pc, r3
   163a4:	ldrd	r2, [r3, #136]	; 0x88
   163a8:	adds	r1, r2, #1
   163ac:	str	r1, [fp, #-180]	; 0xffffff4c
   163b0:	adc	r3, r3, #0
   163b4:	str	r3, [fp, #-176]	; 0xffffff50
   163b8:	ldr	r3, [pc, #992]	; 167a0 <if_statement_inside_else_statement@@Base+0xa64>
   163bc:	add	r3, pc, r3
   163c0:	ldrd	r0, [fp, #-180]	; 0xffffff4c
   163c4:	strd	r0, [r3, #136]	; 0x88
   163c8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   163cc:	add	r4, r3, #64	; 0x40
   163d0:	mov	r0, #4
   163d4:	bl	118b8 <malloc@plt>
   163d8:	mov	r3, r0
   163dc:	str	r3, [r4]
   163e0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   163e4:	add	r3, r3, #64	; 0x40
   163e8:	ldr	r3, [r3]
   163ec:	mov	r0, r3
   163f0:	bl	17b80 <init_token_cpar@@Base>
   163f4:	ldr	r3, [pc, #936]	; 167a4 <if_statement_inside_else_statement@@Base+0xa68>
   163f8:	add	r3, pc, r3
   163fc:	ldrd	r2, [r3, #144]	; 0x90
   16400:	adds	r1, r2, #1
   16404:	str	r1, [fp, #-188]	; 0xffffff44
   16408:	adc	r3, r3, #0
   1640c:	str	r3, [fp, #-184]	; 0xffffff48
   16410:	ldr	r3, [pc, #912]	; 167a8 <if_statement_inside_else_statement@@Base+0xa6c>
   16414:	add	r3, pc, r3
   16418:	ldrd	r0, [fp, #-188]	; 0xffffff44
   1641c:	strd	r0, [r3, #144]	; 0x90
   16420:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16424:	add	r4, r3, #68	; 0x44
   16428:	mov	r0, #4
   1642c:	bl	118b8 <malloc@plt>
   16430:	mov	r3, r0
   16434:	str	r3, [r4]
   16438:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1643c:	add	r3, r3, #68	; 0x44
   16440:	ldr	r3, [r3]
   16444:	mov	r0, r3
   16448:	bl	17be0 <init_token_obra@@Base>
   1644c:	ldr	r3, [pc, #856]	; 167ac <if_statement_inside_else_statement@@Base+0xa70>
   16450:	add	r3, pc, r3
   16454:	ldrd	r2, [r3, #152]	; 0x98
   16458:	adds	r1, r2, #1
   1645c:	str	r1, [fp, #-196]	; 0xffffff3c
   16460:	adc	r3, r3, #0
   16464:	str	r3, [fp, #-192]	; 0xffffff40
   16468:	ldr	r3, [pc, #832]	; 167b0 <if_statement_inside_else_statement@@Base+0xa74>
   1646c:	add	r3, pc, r3
   16470:	ldrd	r0, [fp, #-196]	; 0xffffff3c
   16474:	strd	r0, [r3, #152]	; 0x98
   16478:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1647c:	add	r4, r3, #72	; 0x48
   16480:	mov	r0, #4
   16484:	bl	118b8 <malloc@plt>
   16488:	mov	r3, r0
   1648c:	str	r3, [r4]
   16490:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16494:	add	r3, r3, #72	; 0x48
   16498:	ldr	r3, [r3]
   1649c:	mov	r0, r3
   164a0:	bl	17c40 <init_token_cbra@@Base>
   164a4:	ldr	r3, [pc, #776]	; 167b4 <if_statement_inside_else_statement@@Base+0xa78>
   164a8:	add	r3, pc, r3
   164ac:	ldrd	r2, [r3, #160]	; 0xa0
   164b0:	adds	r1, r2, #1
   164b4:	str	r1, [fp, #-204]	; 0xffffff34
   164b8:	adc	r3, r3, #0
   164bc:	str	r3, [fp, #-200]	; 0xffffff38
   164c0:	ldr	r3, [pc, #752]	; 167b8 <if_statement_inside_else_statement@@Base+0xa7c>
   164c4:	add	r3, pc, r3
   164c8:	ldrd	r0, [fp, #-204]	; 0xffffff34
   164cc:	strd	r0, [r3, #160]	; 0xa0
   164d0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   164d4:	add	r4, r3, #76	; 0x4c
   164d8:	mov	r0, #4
   164dc:	bl	118b8 <malloc@plt>
   164e0:	mov	r3, r0
   164e4:	str	r3, [r4]
   164e8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   164ec:	add	r3, r3, #76	; 0x4c
   164f0:	ldr	r3, [r3]
   164f4:	mov	r0, r3
   164f8:	bl	17c40 <init_token_cbra@@Base>
   164fc:	ldr	r3, [pc, #696]	; 167bc <if_statement_inside_else_statement@@Base+0xa80>
   16500:	add	r3, pc, r3
   16504:	ldrd	r2, [r3, #168]	; 0xa8
   16508:	adds	r1, r2, #1
   1650c:	str	r1, [fp, #-212]	; 0xffffff2c
   16510:	adc	r3, r3, #0
   16514:	str	r3, [fp, #-208]	; 0xffffff30
   16518:	ldr	r3, [pc, #672]	; 167c0 <if_statement_inside_else_statement@@Base+0xa84>
   1651c:	add	r3, pc, r3
   16520:	ldrd	r0, [fp, #-212]	; 0xffffff2c
   16524:	strd	r0, [r3, #168]	; 0xa8
   16528:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1652c:	add	r4, r3, #80	; 0x50
   16530:	mov	r0, #4
   16534:	bl	118b8 <malloc@plt>
   16538:	mov	r3, r0
   1653c:	str	r3, [r4]
   16540:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16544:	add	r3, r3, #80	; 0x50
   16548:	ldr	r3, [r3]
   1654c:	mov	r0, r3
   16550:	bl	17c40 <init_token_cbra@@Base>
   16554:	ldr	r3, [pc, #616]	; 167c4 <if_statement_inside_else_statement@@Base+0xa88>
   16558:	add	r3, pc, r3
   1655c:	ldrd	r2, [r3, #176]	; 0xb0
   16560:	adds	r1, r2, #1
   16564:	str	r1, [fp, #-220]	; 0xffffff24
   16568:	adc	r3, r3, #0
   1656c:	str	r3, [fp, #-216]	; 0xffffff28
   16570:	ldr	r3, [pc, #592]	; 167c8 <if_statement_inside_else_statement@@Base+0xa8c>
   16574:	add	r3, pc, r3
   16578:	ldrd	r0, [fp, #-220]	; 0xffffff24
   1657c:	strd	r0, [r3, #176]	; 0xb0
   16580:	ldr	r3, [pc, #580]	; 167cc <if_statement_inside_else_statement@@Base+0xa90>
   16584:	ldr	r3, [sl, r3]
   16588:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1658c:	str	r2, [r3, #228]	; 0xe4
   16590:	ldr	r3, [pc, #564]	; 167cc <if_statement_inside_else_statement@@Base+0xa90>
   16594:	ldr	r3, [sl, r3]
   16598:	mov	r2, #21
   1659c:	str	r2, [r3, #220]	; 0xdc
   165a0:	sub	r3, fp, #68	; 0x44
   165a4:	mov	r0, r3
   165a8:	bl	1a660 <read_if_statement@@Base>
   165ac:	str	r0, [fp, #-40]	; 0xffffffd8
   165b0:	ldr	r3, [pc, #532]	; 167cc <if_statement_inside_else_statement@@Base+0xa90>
   165b4:	ldr	r3, [sl, r3]
   165b8:	ldr	r3, [r3, #204]	; 0xcc
   165bc:	cmp	r3, #21
   165c0:	beq	16610 <if_statement_inside_else_statement@@Base+0x8d4>
   165c4:	ldr	r3, [pc, #516]	; 167d0 <if_statement_inside_else_statement@@Base+0xa94>
   165c8:	add	r3, pc, r3
   165cc:	ldrd	r2, [r3, #184]	; 0xb8
   165d0:	adds	r1, r2, #1
   165d4:	str	r1, [fp, #-228]	; 0xffffff1c
   165d8:	adc	r3, r3, #0
   165dc:	str	r3, [fp, #-224]	; 0xffffff20
   165e0:	ldr	r3, [pc, #492]	; 167d4 <if_statement_inside_else_statement@@Base+0xa98>
   165e4:	add	r3, pc, r3
   165e8:	ldrd	r0, [fp, #-228]	; 0xffffff1c
   165ec:	strd	r0, [r3, #184]	; 0xb8
   165f0:	ldr	r3, [pc, #480]	; 167d8 <if_statement_inside_else_statement@@Base+0xa9c>
   165f4:	add	r3, pc, r3
   165f8:	movw	r2, #558	; 0x22e
   165fc:	ldr	r1, [pc, #472]	; 167dc <if_statement_inside_else_statement@@Base+0xaa0>
   16600:	add	r1, pc, r1
   16604:	ldr	r0, [pc, #468]	; 167e0 <if_statement_inside_else_statement@@Base+0xaa4>
   16608:	add	r0, pc, r0
   1660c:	bl	119b4 <__assert_fail@plt>
   16610:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16614:	cmp	r3, #0
   16618:	bne	16668 <if_statement_inside_else_statement@@Base+0x92c>
   1661c:	ldr	r3, [pc, #448]	; 167e4 <if_statement_inside_else_statement@@Base+0xaa8>
   16620:	add	r3, pc, r3
   16624:	ldrd	r2, [r3, #200]	; 0xc8
   16628:	adds	r1, r2, #1
   1662c:	str	r1, [fp, #-244]	; 0xffffff0c
   16630:	adc	r3, r3, #0
   16634:	str	r3, [fp, #-240]	; 0xffffff10
   16638:	ldr	r3, [pc, #424]	; 167e8 <if_statement_inside_else_statement@@Base+0xaac>
   1663c:	add	r3, pc, r3
   16640:	ldrd	r0, [fp, #-244]	; 0xffffff0c
   16644:	strd	r0, [r3, #200]	; 0xc8
   16648:	ldr	r3, [pc, #412]	; 167ec <if_statement_inside_else_statement@@Base+0xab0>
   1664c:	add	r3, pc, r3
   16650:	movw	r2, #559	; 0x22f
   16654:	ldr	r1, [pc, #404]	; 167f0 <if_statement_inside_else_statement@@Base+0xab4>
   16658:	add	r1, pc, r1
   1665c:	ldr	r0, [pc, #400]	; 167f4 <if_statement_inside_else_statement@@Base+0xab8>
   16660:	add	r0, pc, r0
   16664:	bl	119b4 <__assert_fail@plt>
   16668:	ldr	r3, [pc, #392]	; 167f8 <if_statement_inside_else_statement@@Base+0xabc>
   1666c:	add	r3, pc, r3
   16670:	ldrd	r2, [r3, #192]	; 0xc0
   16674:	adds	r1, r2, #1
   16678:	str	r1, [fp, #-236]	; 0xffffff14
   1667c:	adc	r3, r3, #0
   16680:	str	r3, [fp, #-232]	; 0xffffff18
   16684:	ldr	r3, [pc, #368]	; 167fc <if_statement_inside_else_statement@@Base+0xac0>
   16688:	add	r3, pc, r3
   1668c:	ldrd	r0, [fp, #-236]	; 0xffffff14
   16690:	strd	r0, [r3, #192]	; 0xc0
   16694:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16698:	ldr	r3, [r3]
   1669c:	cmp	r3, #4
   166a0:	beq	166f0 <if_statement_inside_else_statement@@Base+0x9b4>
   166a4:	ldr	r3, [pc, #340]	; 16800 <if_statement_inside_else_statement@@Base+0xac4>
   166a8:	add	r3, pc, r3
   166ac:	ldrd	r2, [r3, #208]	; 0xd0
   166b0:	adds	r1, r2, #1
   166b4:	str	r1, [fp, #-252]	; 0xffffff04
   166b8:	adc	r3, r3, #0
   166bc:	str	r3, [fp, #-248]	; 0xffffff08
   166c0:	ldr	r3, [pc, #316]	; 16804 <if_statement_inside_else_statement@@Base+0xac8>
   166c4:	add	r3, pc, r3
   166c8:	ldrd	r0, [fp, #-252]	; 0xffffff04
   166cc:	strd	r0, [r3, #208]	; 0xd0
   166d0:	ldr	r3, [pc, #304]	; 16808 <if_statement_inside_else_statement@@Base+0xacc>
   166d4:	add	r3, pc, r3
   166d8:	mov	r2, #560	; 0x230
   166dc:	ldr	r1, [pc, #296]	; 1680c <if_statement_inside_else_statement@@Base+0xad0>
   166e0:	add	r1, pc, r1
   166e4:	ldr	r0, [pc, #292]	; 16810 <if_statement_inside_else_statement@@Base+0xad4>
   166e8:	add	r0, pc, r0
   166ec:	bl	119b4 <__assert_fail@plt>
   166f0:	nop	{0}
   166f4:	sub	sp, fp, #32
   166f8:	ldrd	r4, [sp]
   166fc:	ldrd	r6, [sp, #8]
   16700:	ldrd	r8, [sp, #16]
   16704:	ldrd	sl, [sp, #24]
   16708:	add	sp, sp, #32
   1670c:	pop	{pc}		; (ldr pc, [sp], #4)
   16710:	muleq	r1, ip, r2
   16714:	strdeq	r9, [r1], -r4
   16718:	andeq	r9, r1, r0, ror #27
   1671c:			; <UNDEFINED> instruction: 0x00019db8
   16720:	andeq	r9, r1, r4, lsr #27
   16724:	andeq	r9, r1, r8, ror #25
   16728:	ldrdeq	r9, [r1], -r4
   1672c:	muleq	r1, r8, ip
   16730:	andeq	r9, r1, r4, lsl #25
   16734:	andeq	r9, r1, r8, asr #24
   16738:	andeq	r9, r1, ip, lsr #24
   1673c:	andeq	r9, r1, ip, ror #23
   16740:	ldrdeq	r9, [r1], -r0
   16744:	muleq	r1, r0, fp
   16748:	andeq	r9, r1, r4, ror fp
   1674c:	andeq	r9, r1, r8, lsr fp
   16750:	andeq	r9, r1, ip, lsl fp
   16754:	andeq	r9, r1, r0, ror #21
   16758:	andeq	r9, r1, r4, asr #21
   1675c:	andeq	r9, r1, r8, lsl #21
   16760:	andeq	r9, r1, ip, ror #20
   16764:	andeq	r9, r1, r0, lsr sl
   16768:	andeq	r9, r1, r4, lsl sl
   1676c:	ldrdeq	r9, [r1], -r8
   16770:			; <UNDEFINED> instruction: 0x000199bc
   16774:	andeq	r9, r1, r0, lsl #19
   16778:	andeq	r9, r1, r4, ror #18
   1677c:	andeq	r9, r1, r8, lsr #18
   16780:	andeq	r9, r1, ip, lsl #18
   16784:	andeq	r9, r1, ip, asr #17
   16788:			; <UNDEFINED> instruction: 0x000198b0
   1678c:	andeq	r9, r1, r0, ror r8
   16790:	andeq	r9, r1, r4, asr r8
   16794:	andeq	r9, r1, r4, lsl r8
   16798:	strdeq	r9, [r1], -r8
   1679c:			; <UNDEFINED> instruction: 0x000197b8
   167a0:	muleq	r1, ip, r7
   167a4:	andeq	r9, r1, r0, ror #14
   167a8:	andeq	r9, r1, r4, asr #14
   167ac:	andeq	r9, r1, r8, lsl #14
   167b0:	andeq	r9, r1, ip, ror #13
   167b4:			; <UNDEFINED> instruction: 0x000196b0
   167b8:	muleq	r1, r4, r6
   167bc:	andeq	r9, r1, r8, asr r6
   167c0:	andeq	r9, r1, ip, lsr r6
   167c4:	andeq	r9, r1, r0, lsl #12
   167c8:	andeq	r9, r1, r4, ror #11
   167cc:	andeq	r0, r0, ip, lsr #1
   167d0:	muleq	r1, r0, r5
   167d4:	andeq	r9, r1, r4, ror r5
   167d8:	andeq	r7, r0, ip, lsl #27
   167dc:	andeq	r7, r0, ip, lsl #15
   167e0:	andeq	r7, r0, r8, lsr #20
   167e4:	andeq	r9, r1, r8, lsr r5
   167e8:	andeq	r9, r1, ip, lsl r5
   167ec:	andeq	r7, r0, r4, lsr sp
   167f0:	andeq	r7, r0, r4, lsr r7
   167f4:	strdeq	r7, [r0], -ip
   167f8:	andeq	r9, r1, ip, ror #9
   167fc:	ldrdeq	r9, [r1], -r0
   16800:			; <UNDEFINED> instruction: 0x000194b0
   16804:	muleq	r1, r4, r4
   16808:	andeq	r7, r0, ip, lsr #25
   1680c:	andeq	r7, r0, ip, lsr #13
   16810:	andeq	r7, r0, r0, lsl #17

00016814 <main@@Base>:
   16814:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16818:	strd	r6, [sp, #8]
   1681c:	str	r8, [sp, #16]
   16820:	str	fp, [sp, #20]
   16824:	str	lr, [sp, #24]
   16828:	add	fp, sp, #24
   1682c:	sub	sp, sp, #436	; 0x1b4
   16830:	ldr	r8, [pc, #3760]	; 176e8 <main@@Base+0xed4>
   16834:	add	r8, pc, r8
   16838:	ldr	r3, [pc, #3756]	; 176ec <main@@Base+0xed8>
   1683c:	add	r3, pc, r3
   16840:	ldrd	r2, [r3]
   16844:	adds	r0, r2, #1
   16848:	adc	r1, r3, #0
   1684c:	ldr	r3, [pc, #3740]	; 176f0 <main@@Base+0xedc>
   16850:	add	r3, pc, r3
   16854:	strd	r0, [r3]
   16858:	ldr	r3, [pc, #3732]	; 176f4 <main@@Base+0xee0>
   1685c:	ldr	r3, [r8, r3]
   16860:	ldr	r3, [r3]
   16864:	mov	r1, #0
   16868:	mov	r0, r3
   1686c:	bl	11828 <setbuf@plt>
   16870:	ldr	r3, [pc, #3712]	; 176f8 <main@@Base+0xee4>
   16874:	add	r3, pc, r3
   16878:	ldrd	r2, [r3, #8]
   1687c:	adds	r4, r2, #1
   16880:	adc	r5, r3, #0
   16884:	ldr	r3, [pc, #3696]	; 176fc <main@@Base+0xee8>
   16888:	add	r3, pc, r3
   1688c:	strd	r4, [r3, #8]
   16890:	ldr	r3, [pc, #3676]	; 176f4 <main@@Base+0xee0>
   16894:	ldr	r3, [r8, r3]
   16898:	ldr	r3, [r3]
   1689c:	mov	r2, #14
   168a0:	mov	r1, #1
   168a4:	ldr	r0, [pc, #3668]	; 17700 <main@@Base+0xeec>
   168a8:	add	r0, pc, r0
   168ac:	bl	11870 <fwrite@plt>
   168b0:	ldr	r3, [pc, #3660]	; 17704 <main@@Base+0xef0>
   168b4:	add	r3, pc, r3
   168b8:	ldrd	r2, [r3, #16]
   168bc:	adds	r6, r2, #1
   168c0:	adc	r7, r3, #0
   168c4:	ldr	r3, [pc, #3644]	; 17708 <main@@Base+0xef4>
   168c8:	add	r3, pc, r3
   168cc:	strd	r6, [r3, #16]
   168d0:	ldr	r3, [pc, #3612]	; 176f4 <main@@Base+0xee0>
   168d4:	ldr	r3, [r8, r3]
   168d8:	ldr	r3, [r3]
   168dc:	mov	r2, #14
   168e0:	mov	r1, #1
   168e4:	ldr	r0, [pc, #3616]	; 1770c <main@@Base+0xef8>
   168e8:	add	r0, pc, r0
   168ec:	bl	11870 <fwrite@plt>
   168f0:	ldr	r3, [pc, #3608]	; 17710 <main@@Base+0xefc>
   168f4:	add	r3, pc, r3
   168f8:	ldrd	r2, [r3, #24]
   168fc:	adds	r1, r2, #1
   16900:	str	r1, [fp, #-36]	; 0xffffffdc
   16904:	adc	r3, r3, #0
   16908:	str	r3, [fp, #-32]	; 0xffffffe0
   1690c:	ldr	r3, [pc, #3584]	; 17714 <main@@Base+0xf00>
   16910:	add	r3, pc, r3
   16914:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   16918:	strd	r0, [r3, #24]
   1691c:	ldr	r3, [pc, #3536]	; 176f4 <main@@Base+0xee0>
   16920:	ldr	r3, [r8, r3]
   16924:	ldr	r3, [r3]
   16928:	mov	r2, #15
   1692c:	mov	r1, #1
   16930:	ldr	r0, [pc, #3552]	; 17718 <main@@Base+0xf04>
   16934:	add	r0, pc, r0
   16938:	bl	11870 <fwrite@plt>
   1693c:	ldr	r3, [pc, #3544]	; 1771c <main@@Base+0xf08>
   16940:	add	r3, pc, r3
   16944:	ldrd	r2, [r3, #32]
   16948:	adds	r1, r2, #1
   1694c:	str	r1, [fp, #-44]	; 0xffffffd4
   16950:	adc	r3, r3, #0
   16954:	str	r3, [fp, #-40]	; 0xffffffd8
   16958:	ldr	r3, [pc, #3520]	; 17720 <main@@Base+0xf0c>
   1695c:	add	r3, pc, r3
   16960:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   16964:	strd	r0, [r3, #32]
   16968:	mov	r0, #0
   1696c:	bl	11840 <fflush@plt>
   16970:	ldr	r3, [pc, #3500]	; 17724 <main@@Base+0xf10>
   16974:	add	r3, pc, r3
   16978:	ldrd	r2, [r3, #40]	; 0x28
   1697c:	adds	r1, r2, #1
   16980:	str	r1, [fp, #-52]	; 0xffffffcc
   16984:	adc	r3, r3, #0
   16988:	str	r3, [fp, #-48]	; 0xffffffd0
   1698c:	ldr	r3, [pc, #3476]	; 17728 <main@@Base+0xf14>
   16990:	add	r3, pc, r3
   16994:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   16998:	strd	r0, [r3, #40]	; 0x28
   1699c:	ldr	r3, [pc, #3464]	; 1772c <main@@Base+0xf18>
   169a0:	add	r3, pc, r3
   169a4:	mov	r2, r3
   169a8:	ldr	r3, [pc, #3456]	; 17730 <main@@Base+0xf1c>
   169ac:	add	r3, pc, r3
   169b0:	mov	r1, r3
   169b4:	ldr	r3, [pc, #3448]	; 17734 <main@@Base+0xf20>
   169b8:	add	r3, pc, r3
   169bc:	mov	r0, r3
   169c0:	bl	11834 <printf@plt>
   169c4:	ldr	r3, [pc, #3436]	; 17738 <main@@Base+0xf24>
   169c8:	add	r3, pc, r3
   169cc:	ldrd	r2, [r3, #48]	; 0x30
   169d0:	adds	r1, r2, #1
   169d4:	str	r1, [fp, #-60]	; 0xffffffc4
   169d8:	adc	r3, r3, #0
   169dc:	str	r3, [fp, #-56]	; 0xffffffc8
   169e0:	ldr	r3, [pc, #3412]	; 1773c <main@@Base+0xf28>
   169e4:	add	r3, pc, r3
   169e8:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   169ec:	strd	r0, [r3, #48]	; 0x30
   169f0:	bl	12178 <setup@@Base>
   169f4:	ldr	r3, [pc, #3396]	; 17740 <main@@Base+0xf2c>
   169f8:	add	r3, pc, r3
   169fc:	ldrd	r2, [r3, #56]	; 0x38
   16a00:	adds	r1, r2, #1
   16a04:	str	r1, [fp, #-68]	; 0xffffffbc
   16a08:	adc	r3, r3, #0
   16a0c:	str	r3, [fp, #-64]	; 0xffffffc0
   16a10:	ldr	r3, [pc, #3372]	; 17744 <main@@Base+0xf30>
   16a14:	add	r3, pc, r3
   16a18:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   16a1c:	strd	r0, [r3, #56]	; 0x38
   16a20:	bl	12228 <no_int_as_first_stuff@@Base>
   16a24:	ldr	r3, [pc, #3356]	; 17748 <main@@Base+0xf34>
   16a28:	add	r3, pc, r3
   16a2c:	ldrd	r2, [r3, #64]	; 0x40
   16a30:	adds	r1, r2, #1
   16a34:	str	r1, [fp, #-76]	; 0xffffffb4
   16a38:	adc	r3, r3, #0
   16a3c:	str	r3, [fp, #-72]	; 0xffffffb8
   16a40:	ldr	r3, [pc, #3332]	; 1774c <main@@Base+0xf38>
   16a44:	add	r3, pc, r3
   16a48:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   16a4c:	strd	r0, [r3, #64]	; 0x40
   16a50:	ldr	r3, [pc, #3320]	; 17750 <main@@Base+0xf3c>
   16a54:	add	r3, pc, r3
   16a58:	mov	r0, r3
   16a5c:	bl	118ac <puts@plt>
   16a60:	ldr	r3, [pc, #3308]	; 17754 <main@@Base+0xf40>
   16a64:	add	r3, pc, r3
   16a68:	ldrd	r2, [r3, #72]	; 0x48
   16a6c:	adds	r1, r2, #1
   16a70:	str	r1, [fp, #-84]	; 0xffffffac
   16a74:	adc	r3, r3, #0
   16a78:	str	r3, [fp, #-80]	; 0xffffffb0
   16a7c:	ldr	r3, [pc, #3284]	; 17758 <main@@Base+0xf44>
   16a80:	add	r3, pc, r3
   16a84:	ldrd	r0, [fp, #-84]	; 0xffffffac
   16a88:	strd	r0, [r3, #72]	; 0x48
   16a8c:	ldr	r3, [pc, #3272]	; 1775c <main@@Base+0xf48>
   16a90:	add	r3, pc, r3
   16a94:	mov	r2, r3
   16a98:	ldr	r3, [pc, #3264]	; 17760 <main@@Base+0xf4c>
   16a9c:	add	r3, pc, r3
   16aa0:	mov	r1, r3
   16aa4:	ldr	r3, [pc, #3256]	; 17764 <main@@Base+0xf50>
   16aa8:	add	r3, pc, r3
   16aac:	mov	r0, r3
   16ab0:	bl	11834 <printf@plt>
   16ab4:	ldr	r3, [pc, #3244]	; 17768 <main@@Base+0xf54>
   16ab8:	add	r3, pc, r3
   16abc:	ldrd	r2, [r3, #80]	; 0x50
   16ac0:	adds	r1, r2, #1
   16ac4:	str	r1, [fp, #-92]	; 0xffffffa4
   16ac8:	adc	r3, r3, #0
   16acc:	str	r3, [fp, #-88]	; 0xffffffa8
   16ad0:	ldr	r3, [pc, #3220]	; 1776c <main@@Base+0xf58>
   16ad4:	add	r3, pc, r3
   16ad8:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   16adc:	strd	r0, [r3, #80]	; 0x50
   16ae0:	bl	12178 <setup@@Base>
   16ae4:	ldr	r3, [pc, #3204]	; 17770 <main@@Base+0xf5c>
   16ae8:	add	r3, pc, r3
   16aec:	ldrd	r2, [r3, #88]	; 0x58
   16af0:	adds	r1, r2, #1
   16af4:	str	r1, [fp, #-100]	; 0xffffff9c
   16af8:	adc	r3, r3, #0
   16afc:	str	r3, [fp, #-96]	; 0xffffffa0
   16b00:	ldr	r3, [pc, #3180]	; 17774 <main@@Base+0xf60>
   16b04:	add	r3, pc, r3
   16b08:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   16b0c:	strd	r0, [r3, #88]	; 0x58
   16b10:	bl	12448 <int_but_not_followed_by_function@@Base>
   16b14:	ldr	r3, [pc, #3164]	; 17778 <main@@Base+0xf64>
   16b18:	add	r3, pc, r3
   16b1c:	ldrd	r2, [r3, #96]	; 0x60
   16b20:	adds	r1, r2, #1
   16b24:	str	r1, [fp, #-108]	; 0xffffff94
   16b28:	adc	r3, r3, #0
   16b2c:	str	r3, [fp, #-104]	; 0xffffff98
   16b30:	ldr	r3, [pc, #3140]	; 1777c <main@@Base+0xf68>
   16b34:	add	r3, pc, r3
   16b38:	ldrd	r0, [fp, #-108]	; 0xffffff94
   16b3c:	strd	r0, [r3, #96]	; 0x60
   16b40:	ldr	r3, [pc, #3128]	; 17780 <main@@Base+0xf6c>
   16b44:	add	r3, pc, r3
   16b48:	mov	r0, r3
   16b4c:	bl	118ac <puts@plt>
   16b50:	ldr	r3, [pc, #3116]	; 17784 <main@@Base+0xf70>
   16b54:	add	r3, pc, r3
   16b58:	ldrd	r2, [r3, #104]	; 0x68
   16b5c:	adds	r1, r2, #1
   16b60:	str	r1, [fp, #-116]	; 0xffffff8c
   16b64:	adc	r3, r3, #0
   16b68:	str	r3, [fp, #-112]	; 0xffffff90
   16b6c:	ldr	r3, [pc, #3092]	; 17788 <main@@Base+0xf74>
   16b70:	add	r3, pc, r3
   16b74:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   16b78:	strd	r0, [r3, #104]	; 0x68
   16b7c:	ldr	r3, [pc, #3080]	; 1778c <main@@Base+0xf78>
   16b80:	add	r3, pc, r3
   16b84:	mov	r2, r3
   16b88:	ldr	r3, [pc, #3072]	; 17790 <main@@Base+0xf7c>
   16b8c:	add	r3, pc, r3
   16b90:	mov	r1, r3
   16b94:	ldr	r3, [pc, #3064]	; 17794 <main@@Base+0xf80>
   16b98:	add	r3, pc, r3
   16b9c:	mov	r0, r3
   16ba0:	bl	11834 <printf@plt>
   16ba4:	ldr	r3, [pc, #3052]	; 17798 <main@@Base+0xf84>
   16ba8:	add	r3, pc, r3
   16bac:	ldrd	r2, [r3, #112]	; 0x70
   16bb0:	adds	r1, r2, #1
   16bb4:	str	r1, [fp, #-124]	; 0xffffff84
   16bb8:	adc	r3, r3, #0
   16bbc:	str	r3, [fp, #-120]	; 0xffffff88
   16bc0:	ldr	r3, [pc, #3028]	; 1779c <main@@Base+0xf88>
   16bc4:	add	r3, pc, r3
   16bc8:	ldrd	r0, [fp, #-124]	; 0xffffff84
   16bcc:	strd	r0, [r3, #112]	; 0x70
   16bd0:	bl	12178 <setup@@Base>
   16bd4:	ldr	r3, [pc, #3012]	; 177a0 <main@@Base+0xf8c>
   16bd8:	add	r3, pc, r3
   16bdc:	ldrd	r2, [r3, #120]	; 0x78
   16be0:	adds	r1, r2, #1
   16be4:	str	r1, [fp, #-132]	; 0xffffff7c
   16be8:	adc	r3, r3, #0
   16bec:	str	r3, [fp, #-128]	; 0xffffff80
   16bf0:	ldr	r3, [pc, #2988]	; 177a4 <main@@Base+0xf90>
   16bf4:	add	r3, pc, r3
   16bf8:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   16bfc:	strd	r0, [r3, #120]	; 0x78
   16c00:	bl	136fc <boolean_unary_operator_is_read_properly@@Base>
   16c04:	ldr	r3, [pc, #2972]	; 177a8 <main@@Base+0xf94>
   16c08:	add	r3, pc, r3
   16c0c:	ldrd	r2, [r3, #128]	; 0x80
   16c10:	adds	r1, r2, #1
   16c14:	str	r1, [fp, #-140]	; 0xffffff74
   16c18:	adc	r3, r3, #0
   16c1c:	str	r3, [fp, #-136]	; 0xffffff78
   16c20:	ldr	r3, [pc, #2948]	; 177ac <main@@Base+0xf98>
   16c24:	add	r3, pc, r3
   16c28:	ldrd	r0, [fp, #-140]	; 0xffffff74
   16c2c:	strd	r0, [r3, #128]	; 0x80
   16c30:	ldr	r3, [pc, #2936]	; 177b0 <main@@Base+0xf9c>
   16c34:	add	r3, pc, r3
   16c38:	mov	r0, r3
   16c3c:	bl	118ac <puts@plt>
   16c40:	ldr	r3, [pc, #2924]	; 177b4 <main@@Base+0xfa0>
   16c44:	add	r3, pc, r3
   16c48:	ldrd	r2, [r3, #136]	; 0x88
   16c4c:	adds	r1, r2, #1
   16c50:	str	r1, [fp, #-148]	; 0xffffff6c
   16c54:	adc	r3, r3, #0
   16c58:	str	r3, [fp, #-144]	; 0xffffff70
   16c5c:	ldr	r3, [pc, #2900]	; 177b8 <main@@Base+0xfa4>
   16c60:	add	r3, pc, r3
   16c64:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   16c68:	strd	r0, [r3, #136]	; 0x88
   16c6c:	ldr	r3, [pc, #2888]	; 177bc <main@@Base+0xfa8>
   16c70:	add	r3, pc, r3
   16c74:	mov	r2, r3
   16c78:	ldr	r3, [pc, #2880]	; 177c0 <main@@Base+0xfac>
   16c7c:	add	r3, pc, r3
   16c80:	mov	r1, r3
   16c84:	ldr	r3, [pc, #2872]	; 177c4 <main@@Base+0xfb0>
   16c88:	add	r3, pc, r3
   16c8c:	mov	r0, r3
   16c90:	bl	11834 <printf@plt>
   16c94:	ldr	r3, [pc, #2860]	; 177c8 <main@@Base+0xfb4>
   16c98:	add	r3, pc, r3
   16c9c:	ldrd	r2, [r3, #144]	; 0x90
   16ca0:	adds	r1, r2, #1
   16ca4:	str	r1, [fp, #-156]	; 0xffffff64
   16ca8:	adc	r3, r3, #0
   16cac:	str	r3, [fp, #-152]	; 0xffffff68
   16cb0:	ldr	r3, [pc, #2836]	; 177cc <main@@Base+0xfb8>
   16cb4:	add	r3, pc, r3
   16cb8:	ldrd	r0, [fp, #-156]	; 0xffffff64
   16cbc:	strd	r0, [r3, #144]	; 0x90
   16cc0:	bl	12178 <setup@@Base>
   16cc4:	ldr	r3, [pc, #2820]	; 177d0 <main@@Base+0xfbc>
   16cc8:	add	r3, pc, r3
   16ccc:	ldrd	r2, [r3, #152]	; 0x98
   16cd0:	adds	r1, r2, #1
   16cd4:	str	r1, [fp, #-164]	; 0xffffff5c
   16cd8:	adc	r3, r3, #0
   16cdc:	str	r3, [fp, #-160]	; 0xffffff60
   16ce0:	ldr	r3, [pc, #2796]	; 177d4 <main@@Base+0xfc0>
   16ce4:	add	r3, pc, r3
   16ce8:	ldrd	r0, [fp, #-164]	; 0xffffff5c
   16cec:	strd	r0, [r3, #152]	; 0x98
   16cf0:	bl	13238 <boolean_binary_operator_is_read_properly@@Base>
   16cf4:	ldr	r3, [pc, #2780]	; 177d8 <main@@Base+0xfc4>
   16cf8:	add	r3, pc, r3
   16cfc:	ldrd	r2, [r3, #160]	; 0xa0
   16d00:	adds	r1, r2, #1
   16d04:	str	r1, [fp, #-172]	; 0xffffff54
   16d08:	adc	r3, r3, #0
   16d0c:	str	r3, [fp, #-168]	; 0xffffff58
   16d10:	ldr	r3, [pc, #2756]	; 177dc <main@@Base+0xfc8>
   16d14:	add	r3, pc, r3
   16d18:	ldrd	r0, [fp, #-172]	; 0xffffff54
   16d1c:	strd	r0, [r3, #160]	; 0xa0
   16d20:	ldr	r3, [pc, #2744]	; 177e0 <main@@Base+0xfcc>
   16d24:	add	r3, pc, r3
   16d28:	mov	r0, r3
   16d2c:	bl	118ac <puts@plt>
   16d30:	ldr	r3, [pc, #2732]	; 177e4 <main@@Base+0xfd0>
   16d34:	add	r3, pc, r3
   16d38:	ldrd	r2, [r3, #168]	; 0xa8
   16d3c:	adds	r1, r2, #1
   16d40:	str	r1, [fp, #-180]	; 0xffffff4c
   16d44:	adc	r3, r3, #0
   16d48:	str	r3, [fp, #-176]	; 0xffffff50
   16d4c:	ldr	r3, [pc, #2708]	; 177e8 <main@@Base+0xfd4>
   16d50:	add	r3, pc, r3
   16d54:	ldrd	r0, [fp, #-180]	; 0xffffff4c
   16d58:	strd	r0, [r3, #168]	; 0xa8
   16d5c:	ldr	r3, [pc, #2696]	; 177ec <main@@Base+0xfd8>
   16d60:	add	r3, pc, r3
   16d64:	mov	r2, r3
   16d68:	ldr	r3, [pc, #2688]	; 177f0 <main@@Base+0xfdc>
   16d6c:	add	r3, pc, r3
   16d70:	mov	r1, r3
   16d74:	ldr	r3, [pc, #2680]	; 177f4 <main@@Base+0xfe0>
   16d78:	add	r3, pc, r3
   16d7c:	mov	r0, r3
   16d80:	bl	11834 <printf@plt>
   16d84:	ldr	r3, [pc, #2668]	; 177f8 <main@@Base+0xfe4>
   16d88:	add	r3, pc, r3
   16d8c:	ldrd	r2, [r3, #176]	; 0xb0
   16d90:	adds	r1, r2, #1
   16d94:	str	r1, [fp, #-188]	; 0xffffff44
   16d98:	adc	r3, r3, #0
   16d9c:	str	r3, [fp, #-184]	; 0xffffff48
   16da0:	ldr	r3, [pc, #2644]	; 177fc <main@@Base+0xfe8>
   16da4:	add	r3, pc, r3
   16da8:	ldrd	r0, [fp, #-188]	; 0xffffff44
   16dac:	strd	r0, [r3, #176]	; 0xb0
   16db0:	bl	12178 <setup@@Base>
   16db4:	ldr	r3, [pc, #2628]	; 17800 <main@@Base+0xfec>
   16db8:	add	r3, pc, r3
   16dbc:	ldrd	r2, [r3, #184]	; 0xb8
   16dc0:	adds	r1, r2, #1
   16dc4:	str	r1, [fp, #-196]	; 0xffffff3c
   16dc8:	adc	r3, r3, #0
   16dcc:	str	r3, [fp, #-192]	; 0xffffff40
   16dd0:	ldr	r3, [pc, #2604]	; 17804 <main@@Base+0xff0>
   16dd4:	add	r3, pc, r3
   16dd8:	ldrd	r0, [fp, #-196]	; 0xffffff3c
   16ddc:	strd	r0, [r3, #184]	; 0xb8
   16de0:	bl	12704 <boolean_expression_is_read_properly@@Base>
   16de4:	ldr	r3, [pc, #2588]	; 17808 <main@@Base+0xff4>
   16de8:	add	r3, pc, r3
   16dec:	ldrd	r2, [r3, #192]	; 0xc0
   16df0:	adds	r1, r2, #1
   16df4:	str	r1, [fp, #-204]	; 0xffffff34
   16df8:	adc	r3, r3, #0
   16dfc:	str	r3, [fp, #-200]	; 0xffffff38
   16e00:	ldr	r3, [pc, #2564]	; 1780c <main@@Base+0xff8>
   16e04:	add	r3, pc, r3
   16e08:	ldrd	r0, [fp, #-204]	; 0xffffff34
   16e0c:	strd	r0, [r3, #192]	; 0xc0
   16e10:	ldr	r3, [pc, #2552]	; 17810 <main@@Base+0xffc>
   16e14:	add	r3, pc, r3
   16e18:	mov	r0, r3
   16e1c:	bl	118ac <puts@plt>
   16e20:	ldr	r3, [pc, #2540]	; 17814 <main@@Base+0x1000>
   16e24:	add	r3, pc, r3
   16e28:	ldrd	r2, [r3, #200]	; 0xc8
   16e2c:	adds	r1, r2, #1
   16e30:	str	r1, [fp, #-212]	; 0xffffff2c
   16e34:	adc	r3, r3, #0
   16e38:	str	r3, [fp, #-208]	; 0xffffff30
   16e3c:	ldr	r3, [pc, #2516]	; 17818 <main@@Base+0x1004>
   16e40:	add	r3, pc, r3
   16e44:	ldrd	r0, [fp, #-212]	; 0xffffff2c
   16e48:	strd	r0, [r3, #200]	; 0xc8
   16e4c:	ldr	r3, [pc, #2504]	; 1781c <main@@Base+0x1008>
   16e50:	add	r3, pc, r3
   16e54:	mov	r2, r3
   16e58:	ldr	r3, [pc, #2496]	; 17820 <main@@Base+0x100c>
   16e5c:	add	r3, pc, r3
   16e60:	mov	r1, r3
   16e64:	ldr	r3, [pc, #2488]	; 17824 <main@@Base+0x1010>
   16e68:	add	r3, pc, r3
   16e6c:	mov	r0, r3
   16e70:	bl	11834 <printf@plt>
   16e74:	ldr	r3, [pc, #2476]	; 17828 <main@@Base+0x1014>
   16e78:	add	r3, pc, r3
   16e7c:	ldrd	r2, [r3, #208]	; 0xd0
   16e80:	adds	r1, r2, #1
   16e84:	str	r1, [fp, #-220]	; 0xffffff24
   16e88:	adc	r3, r3, #0
   16e8c:	str	r3, [fp, #-216]	; 0xffffff28
   16e90:	ldr	r3, [pc, #2452]	; 1782c <main@@Base+0x1018>
   16e94:	add	r3, pc, r3
   16e98:	ldrd	r0, [fp, #-220]	; 0xffffff24
   16e9c:	strd	r0, [r3, #208]	; 0xd0
   16ea0:	bl	12178 <setup@@Base>
   16ea4:	ldr	r3, [pc, #2436]	; 17830 <main@@Base+0x101c>
   16ea8:	add	r3, pc, r3
   16eac:	ldrd	r2, [r3, #216]	; 0xd8
   16eb0:	adds	r1, r2, #1
   16eb4:	str	r1, [fp, #-228]	; 0xffffff1c
   16eb8:	adc	r3, r3, #0
   16ebc:	str	r3, [fp, #-224]	; 0xffffff20
   16ec0:	ldr	r3, [pc, #2412]	; 17834 <main@@Base+0x1020>
   16ec4:	add	r3, pc, r3
   16ec8:	ldrd	r0, [fp, #-228]	; 0xffffff1c
   16ecc:	strd	r0, [r3, #216]	; 0xd8
   16ed0:	bl	12ba4 <boolean_expression_complex@@Base>
   16ed4:	ldr	r3, [pc, #2396]	; 17838 <main@@Base+0x1024>
   16ed8:	add	r3, pc, r3
   16edc:	ldrd	r2, [r3, #224]	; 0xe0
   16ee0:	adds	r1, r2, #1
   16ee4:	str	r1, [fp, #-236]	; 0xffffff14
   16ee8:	adc	r3, r3, #0
   16eec:	str	r3, [fp, #-232]	; 0xffffff18
   16ef0:	ldr	r3, [pc, #2372]	; 1783c <main@@Base+0x1028>
   16ef4:	add	r3, pc, r3
   16ef8:	ldrd	r0, [fp, #-236]	; 0xffffff14
   16efc:	strd	r0, [r3, #224]	; 0xe0
   16f00:	ldr	r3, [pc, #2360]	; 17840 <main@@Base+0x102c>
   16f04:	add	r3, pc, r3
   16f08:	mov	r0, r3
   16f0c:	bl	118ac <puts@plt>
   16f10:	ldr	r3, [pc, #2348]	; 17844 <main@@Base+0x1030>
   16f14:	add	r3, pc, r3
   16f18:	ldrd	r2, [r3, #232]	; 0xe8
   16f1c:	adds	r1, r2, #1
   16f20:	str	r1, [fp, #-244]	; 0xffffff0c
   16f24:	adc	r3, r3, #0
   16f28:	str	r3, [fp, #-240]	; 0xffffff10
   16f2c:	ldr	r3, [pc, #2324]	; 17848 <main@@Base+0x1034>
   16f30:	add	r3, pc, r3
   16f34:	ldrd	r0, [fp, #-244]	; 0xffffff0c
   16f38:	strd	r0, [r3, #232]	; 0xe8
   16f3c:	ldr	r3, [pc, #2312]	; 1784c <main@@Base+0x1038>
   16f40:	add	r3, pc, r3
   16f44:	mov	r2, r3
   16f48:	ldr	r3, [pc, #2304]	; 17850 <main@@Base+0x103c>
   16f4c:	add	r3, pc, r3
   16f50:	mov	r1, r3
   16f54:	ldr	r3, [pc, #2296]	; 17854 <main@@Base+0x1040>
   16f58:	add	r3, pc, r3
   16f5c:	mov	r0, r3
   16f60:	bl	11834 <printf@plt>
   16f64:	ldr	r3, [pc, #2284]	; 17858 <main@@Base+0x1044>
   16f68:	add	r3, pc, r3
   16f6c:	ldrd	r2, [r3, #240]	; 0xf0
   16f70:	adds	r1, r2, #1
   16f74:	str	r1, [fp, #-252]	; 0xffffff04
   16f78:	adc	r3, r3, #0
   16f7c:	str	r3, [fp, #-248]	; 0xffffff08
   16f80:	ldr	r3, [pc, #2260]	; 1785c <main@@Base+0x1048>
   16f84:	add	r3, pc, r3
   16f88:	ldrd	r0, [fp, #-252]	; 0xffffff04
   16f8c:	strd	r0, [r3, #240]	; 0xf0
   16f90:	bl	12178 <setup@@Base>
   16f94:	ldr	r3, [pc, #2244]	; 17860 <main@@Base+0x104c>
   16f98:	add	r3, pc, r3
   16f9c:	ldrd	r2, [r3, #248]	; 0xf8
   16fa0:	adds	r1, r2, #1
   16fa4:	str	r1, [fp, #-260]	; 0xfffffefc
   16fa8:	adc	r3, r3, #0
   16fac:	str	r3, [fp, #-256]	; 0xffffff00
   16fb0:	ldr	r3, [pc, #2220]	; 17864 <main@@Base+0x1050>
   16fb4:	add	r3, pc, r3
   16fb8:	sub	r2, fp, #260	; 0x104
   16fbc:	ldrd	r0, [r2]
   16fc0:	strd	r0, [r3, #248]	; 0xf8
   16fc4:	bl	13b48 <if_statement_only@@Base>
   16fc8:	ldr	r3, [pc, #2200]	; 17868 <main@@Base+0x1054>
   16fcc:	add	r3, pc, r3
   16fd0:	add	r3, r3, #256	; 0x100
   16fd4:	ldrd	r2, [r3]
   16fd8:	adds	r1, r2, #1
   16fdc:	str	r1, [fp, #-268]	; 0xfffffef4
   16fe0:	adc	r3, r3, #0
   16fe4:	str	r3, [fp, #-264]	; 0xfffffef8
   16fe8:	ldr	r3, [pc, #2172]	; 1786c <main@@Base+0x1058>
   16fec:	add	r3, pc, r3
   16ff0:	add	r3, r3, #256	; 0x100
   16ff4:	sub	r2, fp, #268	; 0x10c
   16ff8:	ldrd	r0, [r2]
   16ffc:	strd	r0, [r3]
   17000:	ldr	r3, [pc, #2152]	; 17870 <main@@Base+0x105c>
   17004:	add	r3, pc, r3
   17008:	mov	r0, r3
   1700c:	bl	118ac <puts@plt>
   17010:	ldr	r3, [pc, #2140]	; 17874 <main@@Base+0x1060>
   17014:	add	r3, pc, r3
   17018:	add	r3, r3, #272	; 0x110
   1701c:	ldrd	r2, [r3, #-8]
   17020:	adds	r1, r2, #1
   17024:	str	r1, [fp, #-276]	; 0xfffffeec
   17028:	adc	r3, r3, #0
   1702c:	str	r3, [fp, #-272]	; 0xfffffef0
   17030:	ldr	r3, [pc, #2112]	; 17878 <main@@Base+0x1064>
   17034:	add	r3, pc, r3
   17038:	add	r3, r3, #272	; 0x110
   1703c:	sub	r2, fp, #276	; 0x114
   17040:	ldrd	r0, [r2]
   17044:	strd	r0, [r3, #-8]
   17048:	ldr	r3, [pc, #2092]	; 1787c <main@@Base+0x1068>
   1704c:	add	r3, pc, r3
   17050:	mov	r2, r3
   17054:	ldr	r3, [pc, #2084]	; 17880 <main@@Base+0x106c>
   17058:	add	r3, pc, r3
   1705c:	mov	r1, r3
   17060:	ldr	r3, [pc, #2076]	; 17884 <main@@Base+0x1070>
   17064:	add	r3, pc, r3
   17068:	mov	r0, r3
   1706c:	bl	11834 <printf@plt>
   17070:	ldr	r3, [pc, #2064]	; 17888 <main@@Base+0x1074>
   17074:	add	r3, pc, r3
   17078:	add	r3, r3, #272	; 0x110
   1707c:	ldrd	r2, [r3]
   17080:	adds	r1, r2, #1
   17084:	str	r1, [fp, #-284]	; 0xfffffee4
   17088:	adc	r3, r3, #0
   1708c:	str	r3, [fp, #-280]	; 0xfffffee8
   17090:	ldr	r3, [pc, #2036]	; 1788c <main@@Base+0x1078>
   17094:	add	r3, pc, r3
   17098:	add	r3, r3, #272	; 0x110
   1709c:	sub	r2, fp, #284	; 0x11c
   170a0:	ldrd	r0, [r2]
   170a4:	strd	r0, [r3]
   170a8:	bl	12178 <setup@@Base>
   170ac:	ldr	r3, [pc, #2012]	; 17890 <main@@Base+0x107c>
   170b0:	add	r3, pc, r3
   170b4:	add	r3, r3, #288	; 0x120
   170b8:	ldrd	r2, [r3, #-8]
   170bc:	adds	r1, r2, #1
   170c0:	str	r1, [fp, #-292]	; 0xfffffedc
   170c4:	adc	r3, r3, #0
   170c8:	str	r3, [fp, #-288]	; 0xfffffee0
   170cc:	ldr	r3, [pc, #1984]	; 17894 <main@@Base+0x1080>
   170d0:	add	r3, pc, r3
   170d4:	add	r3, r3, #288	; 0x120
   170d8:	sub	r2, fp, #292	; 0x124
   170dc:	ldrd	r0, [r2]
   170e0:	strd	r0, [r3, #-8]
   170e4:	bl	14154 <if_else_statements@@Base>
   170e8:	ldr	r3, [pc, #1960]	; 17898 <main@@Base+0x1084>
   170ec:	add	r3, pc, r3
   170f0:	add	r3, r3, #288	; 0x120
   170f4:	ldrd	r2, [r3]
   170f8:	adds	r1, r2, #1
   170fc:	str	r1, [fp, #-300]	; 0xfffffed4
   17100:	adc	r3, r3, #0
   17104:	str	r3, [fp, #-296]	; 0xfffffed8
   17108:	ldr	r3, [pc, #1932]	; 1789c <main@@Base+0x1088>
   1710c:	add	r3, pc, r3
   17110:	add	r3, r3, #288	; 0x120
   17114:	sub	r2, fp, #300	; 0x12c
   17118:	ldrd	r0, [r2]
   1711c:	strd	r0, [r3]
   17120:	ldr	r3, [pc, #1912]	; 178a0 <main@@Base+0x108c>
   17124:	add	r3, pc, r3
   17128:	mov	r0, r3
   1712c:	bl	118ac <puts@plt>
   17130:	ldr	r3, [pc, #1900]	; 178a4 <main@@Base+0x1090>
   17134:	add	r3, pc, r3
   17138:	add	r3, r3, #304	; 0x130
   1713c:	ldrd	r2, [r3, #-8]
   17140:	adds	r1, r2, #1
   17144:	str	r1, [fp, #-308]	; 0xfffffecc
   17148:	adc	r3, r3, #0
   1714c:	str	r3, [fp, #-304]	; 0xfffffed0
   17150:	ldr	r3, [pc, #1872]	; 178a8 <main@@Base+0x1094>
   17154:	add	r3, pc, r3
   17158:	add	r3, r3, #304	; 0x130
   1715c:	sub	r2, fp, #308	; 0x134
   17160:	ldrd	r0, [r2]
   17164:	strd	r0, [r3, #-8]
   17168:	ldr	r3, [pc, #1852]	; 178ac <main@@Base+0x1098>
   1716c:	add	r3, pc, r3
   17170:	mov	r2, r3
   17174:	ldr	r3, [pc, #1844]	; 178b0 <main@@Base+0x109c>
   17178:	add	r3, pc, r3
   1717c:	mov	r1, r3
   17180:	ldr	r3, [pc, #1836]	; 178b4 <main@@Base+0x10a0>
   17184:	add	r3, pc, r3
   17188:	mov	r0, r3
   1718c:	bl	11834 <printf@plt>
   17190:	ldr	r3, [pc, #1824]	; 178b8 <main@@Base+0x10a4>
   17194:	add	r3, pc, r3
   17198:	add	r3, r3, #304	; 0x130
   1719c:	ldrd	r2, [r3]
   171a0:	adds	r1, r2, #1
   171a4:	str	r1, [fp, #-316]	; 0xfffffec4
   171a8:	adc	r3, r3, #0
   171ac:	str	r3, [fp, #-312]	; 0xfffffec8
   171b0:	ldr	r3, [pc, #1796]	; 178bc <main@@Base+0x10a8>
   171b4:	add	r3, pc, r3
   171b8:	add	r3, r3, #304	; 0x130
   171bc:	sub	r2, fp, #316	; 0x13c
   171c0:	ldrd	r0, [r2]
   171c4:	strd	r0, [r3]
   171c8:	bl	12178 <setup@@Base>
   171cc:	ldr	r3, [pc, #1772]	; 178c0 <main@@Base+0x10ac>
   171d0:	add	r3, pc, r3
   171d4:	add	r3, r3, #320	; 0x140
   171d8:	ldrd	r2, [r3, #-8]
   171dc:	adds	r1, r2, #1
   171e0:	str	r1, [fp, #-324]	; 0xfffffebc
   171e4:	adc	r3, r3, #0
   171e8:	str	r3, [fp, #-320]	; 0xfffffec0
   171ec:	ldr	r3, [pc, #1744]	; 178c4 <main@@Base+0x10b0>
   171f0:	add	r3, pc, r3
   171f4:	add	r3, r3, #320	; 0x140
   171f8:	sub	r2, fp, #324	; 0x144
   171fc:	ldrd	r0, [r2]
   17200:	strd	r0, [r3, #-8]
   17204:	bl	15324 <if_statement_inside_if_statement@@Base>
   17208:	ldr	r3, [pc, #1720]	; 178c8 <main@@Base+0x10b4>
   1720c:	add	r3, pc, r3
   17210:	add	r3, r3, #320	; 0x140
   17214:	ldrd	r2, [r3]
   17218:	adds	r1, r2, #1
   1721c:	str	r1, [fp, #-332]	; 0xfffffeb4
   17220:	adc	r3, r3, #0
   17224:	str	r3, [fp, #-328]	; 0xfffffeb8
   17228:	ldr	r3, [pc, #1692]	; 178cc <main@@Base+0x10b8>
   1722c:	add	r3, pc, r3
   17230:	add	r3, r3, #320	; 0x140
   17234:	sub	r2, fp, #332	; 0x14c
   17238:	ldrd	r0, [r2]
   1723c:	strd	r0, [r3]
   17240:	ldr	r3, [pc, #1672]	; 178d0 <main@@Base+0x10bc>
   17244:	add	r3, pc, r3
   17248:	mov	r0, r3
   1724c:	bl	118ac <puts@plt>
   17250:	ldr	r3, [pc, #1660]	; 178d4 <main@@Base+0x10c0>
   17254:	add	r3, pc, r3
   17258:	add	r3, r3, #336	; 0x150
   1725c:	ldrd	r2, [r3, #-8]
   17260:	adds	r1, r2, #1
   17264:	str	r1, [fp, #-340]	; 0xfffffeac
   17268:	adc	r3, r3, #0
   1726c:	str	r3, [fp, #-336]	; 0xfffffeb0
   17270:	ldr	r3, [pc, #1632]	; 178d8 <main@@Base+0x10c4>
   17274:	add	r3, pc, r3
   17278:	add	r3, r3, #336	; 0x150
   1727c:	sub	r2, fp, #340	; 0x154
   17280:	ldrd	r0, [r2]
   17284:	strd	r0, [r3, #-8]
   17288:	ldr	r3, [pc, #1612]	; 178dc <main@@Base+0x10c8>
   1728c:	add	r3, pc, r3
   17290:	mov	r2, r3
   17294:	ldr	r3, [pc, #1604]	; 178e0 <main@@Base+0x10cc>
   17298:	add	r3, pc, r3
   1729c:	mov	r1, r3
   172a0:	ldr	r3, [pc, #1596]	; 178e4 <main@@Base+0x10d0>
   172a4:	add	r3, pc, r3
   172a8:	mov	r0, r3
   172ac:	bl	11834 <printf@plt>
   172b0:	ldr	r3, [pc, #1584]	; 178e8 <main@@Base+0x10d4>
   172b4:	add	r3, pc, r3
   172b8:	add	r3, r3, #336	; 0x150
   172bc:	ldrd	r2, [r3]
   172c0:	adds	r1, r2, #1
   172c4:	str	r1, [fp, #-348]	; 0xfffffea4
   172c8:	adc	r3, r3, #0
   172cc:	str	r3, [fp, #-344]	; 0xfffffea8
   172d0:	ldr	r3, [pc, #1556]	; 178ec <main@@Base+0x10d8>
   172d4:	add	r3, pc, r3
   172d8:	add	r3, r3, #336	; 0x150
   172dc:	sub	r2, fp, #348	; 0x15c
   172e0:	ldrd	r0, [r2]
   172e4:	strd	r0, [r3]
   172e8:	bl	12178 <setup@@Base>
   172ec:	ldr	r3, [pc, #1532]	; 178f0 <main@@Base+0x10dc>
   172f0:	add	r3, pc, r3
   172f4:	add	r3, r3, #352	; 0x160
   172f8:	ldrd	r2, [r3, #-8]
   172fc:	adds	r1, r2, #1
   17300:	str	r1, [fp, #-356]	; 0xfffffe9c
   17304:	adc	r3, r3, #0
   17308:	str	r3, [fp, #-352]	; 0xfffffea0
   1730c:	ldr	r3, [pc, #1504]	; 178f4 <main@@Base+0x10e0>
   17310:	add	r3, pc, r3
   17314:	add	r3, r3, #352	; 0x160
   17318:	sub	r2, fp, #356	; 0x164
   1731c:	ldrd	r0, [r2]
   17320:	strd	r0, [r3, #-8]
   17324:	bl	15d3c <if_statement_inside_else_statement@@Base>
   17328:	ldr	r3, [pc, #1480]	; 178f8 <main@@Base+0x10e4>
   1732c:	add	r3, pc, r3
   17330:	add	r3, r3, #352	; 0x160
   17334:	ldrd	r2, [r3]
   17338:	adds	r1, r2, #1
   1733c:	str	r1, [fp, #-364]	; 0xfffffe94
   17340:	adc	r3, r3, #0
   17344:	str	r3, [fp, #-360]	; 0xfffffe98
   17348:	ldr	r3, [pc, #1452]	; 178fc <main@@Base+0x10e8>
   1734c:	add	r3, pc, r3
   17350:	add	r3, r3, #352	; 0x160
   17354:	sub	r2, fp, #364	; 0x16c
   17358:	ldrd	r0, [r2]
   1735c:	strd	r0, [r3]
   17360:	ldr	r3, [pc, #1432]	; 17900 <main@@Base+0x10ec>
   17364:	add	r3, pc, r3
   17368:	mov	r0, r3
   1736c:	bl	118ac <puts@plt>
   17370:	ldr	r3, [pc, #1420]	; 17904 <main@@Base+0x10f0>
   17374:	add	r3, pc, r3
   17378:	add	r3, r3, #368	; 0x170
   1737c:	ldrd	r2, [r3, #-8]
   17380:	adds	r1, r2, #1
   17384:	str	r1, [fp, #-372]	; 0xfffffe8c
   17388:	adc	r3, r3, #0
   1738c:	str	r3, [fp, #-368]	; 0xfffffe90
   17390:	ldr	r3, [pc, #1392]	; 17908 <main@@Base+0x10f4>
   17394:	add	r3, pc, r3
   17398:	add	r3, r3, #368	; 0x170
   1739c:	sub	r2, fp, #372	; 0x174
   173a0:	ldrd	r0, [r2]
   173a4:	strd	r0, [r3, #-8]
   173a8:	ldr	r3, [pc, #1372]	; 1790c <main@@Base+0x10f8>
   173ac:	add	r3, pc, r3
   173b0:	mov	r2, r3
   173b4:	ldr	r3, [pc, #1364]	; 17910 <main@@Base+0x10fc>
   173b8:	add	r3, pc, r3
   173bc:	mov	r1, r3
   173c0:	ldr	r3, [pc, #1356]	; 17914 <main@@Base+0x1100>
   173c4:	add	r3, pc, r3
   173c8:	mov	r0, r3
   173cc:	bl	11834 <printf@plt>
   173d0:	ldr	r3, [pc, #1344]	; 17918 <main@@Base+0x1104>
   173d4:	add	r3, pc, r3
   173d8:	add	r3, r3, #368	; 0x170
   173dc:	ldrd	r2, [r3]
   173e0:	adds	r1, r2, #1
   173e4:	str	r1, [fp, #-380]	; 0xfffffe84
   173e8:	adc	r3, r3, #0
   173ec:	str	r3, [fp, #-376]	; 0xfffffe88
   173f0:	ldr	r3, [pc, #1316]	; 1791c <main@@Base+0x1108>
   173f4:	add	r3, pc, r3
   173f8:	add	r3, r3, #368	; 0x170
   173fc:	sub	r2, fp, #380	; 0x17c
   17400:	ldrd	r0, [r2]
   17404:	strd	r0, [r3]
   17408:	bl	12178 <setup@@Base>
   1740c:	ldr	r3, [pc, #1292]	; 17920 <main@@Base+0x110c>
   17410:	add	r3, pc, r3
   17414:	add	r3, r3, #384	; 0x180
   17418:	ldrd	r2, [r3, #-8]
   1741c:	adds	r1, r2, #1
   17420:	str	r1, [fp, #-388]	; 0xfffffe7c
   17424:	adc	r3, r3, #0
   17428:	str	r3, [fp, #-384]	; 0xfffffe80
   1742c:	ldr	r3, [pc, #1264]	; 17924 <main@@Base+0x1110>
   17430:	add	r3, pc, r3
   17434:	add	r3, r3, #384	; 0x180
   17438:	sub	r2, fp, #388	; 0x184
   1743c:	ldrd	r0, [r2]
   17440:	strd	r0, [r3, #-8]
   17444:	bl	14e70 <body_with_one_return@@Base>
   17448:	ldr	r3, [pc, #1240]	; 17928 <main@@Base+0x1114>
   1744c:	add	r3, pc, r3
   17450:	add	r3, r3, #384	; 0x180
   17454:	ldrd	r2, [r3]
   17458:	adds	r1, r2, #1
   1745c:	str	r1, [fp, #-396]	; 0xfffffe74
   17460:	adc	r3, r3, #0
   17464:	str	r3, [fp, #-392]	; 0xfffffe78
   17468:	ldr	r3, [pc, #1212]	; 1792c <main@@Base+0x1118>
   1746c:	add	r3, pc, r3
   17470:	add	r3, r3, #384	; 0x180
   17474:	sub	r2, fp, #396	; 0x18c
   17478:	ldrd	r0, [r2]
   1747c:	strd	r0, [r3]
   17480:	ldr	r3, [pc, #1192]	; 17930 <main@@Base+0x111c>
   17484:	add	r3, pc, r3
   17488:	mov	r0, r3
   1748c:	bl	118ac <puts@plt>
   17490:	ldr	r3, [pc, #1180]	; 17934 <main@@Base+0x1120>
   17494:	add	r3, pc, r3
   17498:	add	r3, r3, #400	; 0x190
   1749c:	ldrd	r2, [r3, #-8]
   174a0:	adds	r1, r2, #1
   174a4:	str	r1, [fp, #-404]	; 0xfffffe6c
   174a8:	adc	r3, r3, #0
   174ac:	str	r3, [fp, #-400]	; 0xfffffe70
   174b0:	ldr	r3, [pc, #1152]	; 17938 <main@@Base+0x1124>
   174b4:	add	r3, pc, r3
   174b8:	add	r3, r3, #400	; 0x190
   174bc:	sub	r2, fp, #404	; 0x194
   174c0:	ldrd	r0, [r2]
   174c4:	strd	r0, [r3, #-8]
   174c8:	ldr	r3, [pc, #1132]	; 1793c <main@@Base+0x1128>
   174cc:	add	r3, pc, r3
   174d0:	mov	r2, r3
   174d4:	ldr	r3, [pc, #1124]	; 17940 <main@@Base+0x112c>
   174d8:	add	r3, pc, r3
   174dc:	mov	r1, r3
   174e0:	ldr	r3, [pc, #1116]	; 17944 <main@@Base+0x1130>
   174e4:	add	r3, pc, r3
   174e8:	mov	r0, r3
   174ec:	bl	11834 <printf@plt>
   174f0:	ldr	r3, [pc, #1104]	; 17948 <main@@Base+0x1134>
   174f4:	add	r3, pc, r3
   174f8:	add	r3, r3, #400	; 0x190
   174fc:	ldrd	r2, [r3]
   17500:	adds	r1, r2, #1
   17504:	str	r1, [fp, #-412]	; 0xfffffe64
   17508:	adc	r3, r3, #0
   1750c:	str	r3, [fp, #-408]	; 0xfffffe68
   17510:	ldr	r3, [pc, #1076]	; 1794c <main@@Base+0x1138>
   17514:	add	r3, pc, r3
   17518:	add	r3, r3, #400	; 0x190
   1751c:	sub	r2, fp, #412	; 0x19c
   17520:	ldrd	r0, [r2]
   17524:	strd	r0, [r3]
   17528:	bl	12178 <setup@@Base>
   1752c:	ldr	r3, [pc, #1052]	; 17950 <main@@Base+0x113c>
   17530:	add	r3, pc, r3
   17534:	add	r3, r3, #416	; 0x1a0
   17538:	ldrd	r2, [r3, #-8]
   1753c:	adds	r1, r2, #1
   17540:	str	r1, [fp, #-420]	; 0xfffffe5c
   17544:	adc	r3, r3, #0
   17548:	str	r3, [fp, #-416]	; 0xfffffe60
   1754c:	ldr	r3, [pc, #1024]	; 17954 <main@@Base+0x1140>
   17550:	add	r3, pc, r3
   17554:	add	r3, r3, #416	; 0x1a0
   17558:	sub	r2, fp, #420	; 0x1a4
   1755c:	ldrd	r0, [r2]
   17560:	strd	r0, [r3, #-8]
   17564:	bl	14820 <body_with_two_returns@@Base>
   17568:	ldr	r3, [pc, #1000]	; 17958 <main@@Base+0x1144>
   1756c:	add	r3, pc, r3
   17570:	add	r3, r3, #416	; 0x1a0
   17574:	ldrd	r2, [r3]
   17578:	adds	r1, r2, #1
   1757c:	str	r1, [fp, #-428]	; 0xfffffe54
   17580:	adc	r3, r3, #0
   17584:	str	r3, [fp, #-424]	; 0xfffffe58
   17588:	ldr	r3, [pc, #972]	; 1795c <main@@Base+0x1148>
   1758c:	add	r3, pc, r3
   17590:	add	r3, r3, #416	; 0x1a0
   17594:	sub	r2, fp, #428	; 0x1ac
   17598:	ldrd	r0, [r2]
   1759c:	strd	r0, [r3]
   175a0:	ldr	r3, [pc, #952]	; 17960 <main@@Base+0x114c>
   175a4:	add	r3, pc, r3
   175a8:	mov	r0, r3
   175ac:	bl	118ac <puts@plt>
   175b0:	ldr	r3, [pc, #940]	; 17964 <main@@Base+0x1150>
   175b4:	add	r3, pc, r3
   175b8:	add	r3, r3, #432	; 0x1b0
   175bc:	ldrd	r2, [r3, #-8]
   175c0:	adds	r1, r2, #1
   175c4:	str	r1, [fp, #-436]	; 0xfffffe4c
   175c8:	adc	r3, r3, #0
   175cc:	str	r3, [fp, #-432]	; 0xfffffe50
   175d0:	ldr	r3, [pc, #912]	; 17968 <main@@Base+0x1154>
   175d4:	add	r3, pc, r3
   175d8:	add	r3, r3, #432	; 0x1b0
   175dc:	sub	r2, fp, #436	; 0x1b4
   175e0:	ldrd	r0, [r2]
   175e4:	strd	r0, [r3, #-8]
   175e8:	ldr	r3, [pc, #892]	; 1796c <main@@Base+0x1158>
   175ec:	add	r3, pc, r3
   175f0:	mov	r0, r3
   175f4:	bl	118ac <puts@plt>
   175f8:	ldr	r3, [pc, #880]	; 17970 <main@@Base+0x115c>
   175fc:	add	r3, pc, r3
   17600:	add	r3, r3, #432	; 0x1b0
   17604:	ldrd	r2, [r3]
   17608:	adds	r1, r2, #1
   1760c:	str	r1, [fp, #-444]	; 0xfffffe44
   17610:	adc	r3, r3, #0
   17614:	str	r3, [fp, #-440]	; 0xfffffe48
   17618:	ldr	r3, [pc, #852]	; 17974 <main@@Base+0x1160>
   1761c:	add	r3, pc, r3
   17620:	add	r3, r3, #432	; 0x1b0
   17624:	sub	r2, fp, #444	; 0x1bc
   17628:	ldrd	r0, [r2]
   1762c:	strd	r0, [r3]
   17630:	ldr	r3, [pc, #832]	; 17978 <main@@Base+0x1164>
   17634:	add	r3, pc, r3
   17638:	mov	r0, r3
   1763c:	bl	118ac <puts@plt>
   17640:	ldr	r3, [pc, #820]	; 1797c <main@@Base+0x1168>
   17644:	add	r3, pc, r3
   17648:	add	r3, r3, #448	; 0x1c0
   1764c:	ldrd	r2, [r3, #-8]
   17650:	adds	r1, r2, #1
   17654:	str	r1, [fp, #-452]	; 0xfffffe3c
   17658:	adc	r3, r3, #0
   1765c:	str	r3, [fp, #-448]	; 0xfffffe40
   17660:	ldr	r3, [pc, #792]	; 17980 <main@@Base+0x116c>
   17664:	add	r3, pc, r3
   17668:	add	r3, r3, #448	; 0x1c0
   1766c:	sub	r2, fp, #452	; 0x1c4
   17670:	ldrd	r0, [r2]
   17674:	strd	r0, [r3, #-8]
   17678:	ldr	r3, [pc, #772]	; 17984 <main@@Base+0x1170>
   1767c:	add	r3, pc, r3
   17680:	mov	r0, r3
   17684:	bl	118ac <puts@plt>
   17688:	mov	r1, #0
   1768c:	ldr	r3, [pc, #756]	; 17988 <main@@Base+0x1174>
   17690:	add	r3, pc, r3
   17694:	add	r3, r3, #448	; 0x1c0
   17698:	ldrd	r2, [r3]
   1769c:	adds	r0, r2, #1
   176a0:	str	r0, [fp, #-460]	; 0xfffffe34
   176a4:	adc	r3, r3, #0
   176a8:	str	r3, [fp, #-456]	; 0xfffffe38
   176ac:	ldr	r3, [pc, #728]	; 1798c <main@@Base+0x1178>
   176b0:	add	r3, pc, r3
   176b4:	add	r3, r3, #448	; 0x1c0
   176b8:	sub	r2, fp, #460	; 0x1cc
   176bc:	ldrd	r4, [r2]
   176c0:	strd	r4, [r3]
   176c4:	mov	r3, r1
   176c8:	mov	r0, r3
   176cc:	sub	sp, fp, #24
   176d0:	ldrd	r4, [sp]
   176d4:	ldrd	r6, [sp, #8]
   176d8:	ldr	r8, [sp, #16]
   176dc:	ldr	fp, [sp, #20]
   176e0:	add	sp, sp, #24
   176e4:	pop	{pc}		; (ldr pc, [sp], #4)
   176e8:	andeq	r8, r1, r4, asr #15
   176ec:	andeq	r9, r1, r4, asr r1
   176f0:	andeq	r9, r1, r0, asr #2
   176f4:	strheq	r0, [r0], -ip
   176f8:	andeq	r9, r1, ip, lsl r1
   176fc:	andeq	r9, r1, r8, lsl #2
   17700:	andeq	r7, r0, r4, lsr #15
   17704:	ldrdeq	r9, [r1], -ip
   17708:	andeq	r9, r1, r8, asr #1
   1770c:	andeq	r7, r0, r4, ror r7
   17710:	muleq	r1, ip, r0
   17714:	andeq	r9, r1, r0, lsl #1
   17718:	andeq	r7, r0, r8, lsr r7
   1771c:	andeq	r9, r1, r0, asr r0
   17720:	andeq	r9, r1, r4, lsr r0
   17724:	andeq	r9, r1, ip, lsl r0
   17728:	andeq	r9, r1, r0
   1772c:	ldrdeq	r7, [r0], -ip
   17730:	andeq	r7, r0, r8, ror #13
   17734:	andeq	r7, r0, r8, ror #13
   17738:	andeq	r8, r1, r8, asr #31
   1773c:	andeq	r8, r1, ip, lsr #31
   17740:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17744:	andeq	r8, r1, ip, ror pc
   17748:	andeq	r8, r1, r8, ror #30
   1774c:	andeq	r8, r1, ip, asr #30
   17750:	andeq	r7, r0, r0, ror #12
   17754:	andeq	r8, r1, ip, lsr #30
   17758:	andeq	r8, r1, r0, lsl pc
   1775c:	andeq	r7, r0, r0, lsr r6
   17760:	strdeq	r7, [r0], -r8
   17764:	strdeq	r7, [r0], -r8
   17768:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1776c:			; <UNDEFINED> instruction: 0x00018ebc
   17770:	andeq	r8, r1, r8, lsr #29
   17774:	andeq	r8, r1, ip, lsl #29
   17778:	andeq	r8, r1, r8, ror lr
   1777c:	andeq	r8, r1, ip, asr lr
   17780:	andeq	r7, r0, r0, ror r5
   17784:	andeq	r8, r1, ip, lsr lr
   17788:	andeq	r8, r1, r0, lsr #28
   1778c:	andeq	r7, r0, r4, ror #10
   17790:	andeq	r7, r0, r8, lsl #10
   17794:	andeq	r7, r0, r8, lsl #10
   17798:	andeq	r8, r1, r8, ror #27
   1779c:	andeq	r8, r1, ip, asr #27
   177a0:			; <UNDEFINED> instruction: 0x00018db8
   177a4:	muleq	r1, ip, sp
   177a8:	andeq	r8, r1, r8, lsl #27
   177ac:	andeq	r8, r1, ip, ror #26
   177b0:	andeq	r7, r0, r0, lsl #9
   177b4:	andeq	r8, r1, ip, asr #26
   177b8:	andeq	r8, r1, r0, lsr sp
   177bc:	muleq	r0, ip, r4
   177c0:	andeq	r7, r0, r8, lsl r4
   177c4:	andeq	r7, r0, r8, lsl r4
   177c8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   177cc:	ldrdeq	r8, [r1], -ip
   177d0:	andeq	r8, r1, r8, asr #25
   177d4:	andeq	r8, r1, ip, lsr #25
   177d8:	muleq	r1, r8, ip
   177dc:	andeq	r8, r1, ip, ror ip
   177e0:	muleq	r0, r0, r3
   177e4:	andeq	r8, r1, ip, asr ip
   177e8:	andeq	r8, r1, r0, asr #24
   177ec:	ldrdeq	r7, [r0], -r8
   177f0:	andeq	r7, r0, r8, lsr #6
   177f4:	andeq	r7, r0, r8, lsr #6
   177f8:	andeq	r8, r1, r8, lsl #24
   177fc:	andeq	r8, r1, ip, ror #23
   17800:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17804:			; <UNDEFINED> instruction: 0x00018bbc
   17808:	andeq	r8, r1, r8, lsr #23
   1780c:	andeq	r8, r1, ip, lsl #23
   17810:	andeq	r7, r0, r0, lsr #5
   17814:	andeq	r8, r1, ip, ror #22
   17818:	andeq	r8, r1, r0, asr fp
   1781c:	andeq	r7, r0, ip, lsl #6
   17820:	andeq	r7, r0, r8, lsr r2
   17824:	andeq	r7, r0, r8, lsr r2
   17828:	andeq	r8, r1, r8, lsl fp
   1782c:	strdeq	r8, [r1], -ip
   17830:	andeq	r8, r1, r8, ror #21
   17834:	andeq	r8, r1, ip, asr #21
   17838:			; <UNDEFINED> instruction: 0x00018ab8
   1783c:	muleq	r1, ip, sl
   17840:			; <UNDEFINED> instruction: 0x000071b0
   17844:	andeq	r8, r1, ip, ror sl
   17848:	andeq	r8, r1, r0, ror #20
   1784c:	andeq	r7, r0, r8, lsr r2
   17850:	andeq	r7, r0, r8, asr #2
   17854:	andeq	r7, r0, r8, asr #2
   17858:	andeq	r8, r1, r8, lsr #20
   1785c:	andeq	r8, r1, ip, lsl #20
   17860:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17864:	ldrdeq	r8, [r1], -ip
   17868:	andeq	r8, r1, r4, asr #19
   1786c:	andeq	r8, r1, r4, lsr #19
   17870:	strheq	r7, [r0], -r0
   17874:	andeq	r8, r1, ip, ror r9
   17878:	andeq	r8, r1, ip, asr r9
   1787c:	andeq	r7, r0, r0, asr #2
   17880:	andeq	r7, r0, ip, lsr r0
   17884:	andeq	r7, r0, ip, lsr r0
   17888:	andeq	r8, r1, ip, lsl r9
   1788c:	strdeq	r8, [r1], -ip
   17890:	andeq	r8, r1, r0, ror #17
   17894:	andeq	r8, r1, r0, asr #17
   17898:	andeq	r8, r1, r4, lsr #17
   1789c:	andeq	r8, r1, r4, lsl #17
   178a0:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   178a4:	andeq	r8, r1, ip, asr r8
   178a8:	andeq	r8, r1, ip, lsr r8
   178ac:	andeq	r7, r0, r4, lsr r0
   178b0:	andeq	r6, r0, ip, lsl pc
   178b4:	andeq	r6, r0, ip, lsl pc
   178b8:	strdeq	r8, [r1], -ip
   178bc:	ldrdeq	r8, [r1], -ip
   178c0:	andeq	r8, r1, r0, asr #15
   178c4:	andeq	r8, r1, r0, lsr #15
   178c8:	andeq	r8, r1, r4, lsl #15
   178cc:	andeq	r8, r1, r4, ror #14
   178d0:	andeq	r6, r0, r0, ror lr
   178d4:	andeq	r8, r1, ip, lsr r7
   178d8:	andeq	r8, r1, ip, lsl r7
   178dc:	andeq	r6, r0, r8, lsr pc
   178e0:	strdeq	r6, [r0], -ip
   178e4:	strdeq	r6, [r0], -ip
   178e8:	ldrdeq	r8, [r1], -ip
   178ec:			; <UNDEFINED> instruction: 0x000186bc
   178f0:	andeq	r8, r1, r0, lsr #13
   178f4:	andeq	r8, r1, r0, lsl #13
   178f8:	andeq	r8, r1, r4, ror #12
   178fc:	andeq	r8, r1, r4, asr #12
   17900:	andeq	r6, r0, r0, asr sp
   17904:	andeq	r8, r1, ip, lsl r6
   17908:	strdeq	r8, [r1], -ip
   1790c:	andeq	r6, r0, ip, lsr lr
   17910:	ldrdeq	r6, [r0], -ip
   17914:	ldrdeq	r6, [r0], -ip
   17918:			; <UNDEFINED> instruction: 0x000185bc
   1791c:	muleq	r1, ip, r5
   17920:	andeq	r8, r1, r0, lsl #11
   17924:	andeq	r8, r1, r0, ror #10
   17928:	andeq	r8, r1, r4, asr #10
   1792c:	andeq	r8, r1, r4, lsr #10
   17930:	andeq	r6, r0, r0, lsr ip
   17934:	strdeq	r8, [r1], -ip
   17938:	ldrdeq	r8, [r1], -ip
   1793c:	andeq	r6, r0, r4, lsr sp
   17940:			; <UNDEFINED> instruction: 0x00006bbc
   17944:			; <UNDEFINED> instruction: 0x00006bbc
   17948:	muleq	r1, ip, r4
   1794c:	andeq	r8, r1, ip, ror r4
   17950:	andeq	r8, r1, r0, ror #8
   17954:	andeq	r8, r1, r0, asr #8
   17958:	andeq	r8, r1, r4, lsr #8
   1795c:	andeq	r8, r1, r4, lsl #8
   17960:	andeq	r6, r0, r0, lsl fp
   17964:	ldrdeq	r8, [r1], -ip
   17968:			; <UNDEFINED> instruction: 0x000183bc
   1796c:	andeq	r6, r0, ip, lsr #24
   17970:	muleq	r1, r4, r3
   17974:	andeq	r8, r1, r4, ror r3
   17978:	strdeq	r6, [r0], -r4
   1797c:	andeq	r8, r1, ip, asr #6
   17980:	andeq	r8, r1, ip, lsr #6
   17984:	ldrdeq	r6, [r0], -r0
   17988:	andeq	r8, r1, r0, lsl #6
   1798c:	andeq	r8, r1, r0, ror #5
   17990:	str	fp, [sp, #-8]!
   17994:	str	lr, [sp, #4]
   17998:	add	fp, sp, #4
   1799c:	ldr	r3, [pc, #24]	; 179bc <main@@Base+0x11a8>
   179a0:	add	r3, pc, r3
   179a4:	mov	r0, r3
   179a8:	bl	1da0c <__gcov_sort_n_vals@@Base+0x4a0>
   179ac:	sub	sp, fp, #4
   179b0:	ldr	fp, [sp]
   179b4:	add	sp, sp, #4
   179b8:	pop	{pc}		; (ldr pc, [sp], #4)
   179bc:	andeq	r7, r1, r0, lsr #18
   179c0:	str	fp, [sp, #-8]!
   179c4:	str	lr, [sp, #4]
   179c8:	add	fp, sp, #4
   179cc:	bl	1d99c <__gcov_sort_n_vals@@Base+0x430>
   179d0:	sub	sp, fp, #4
   179d4:	ldr	fp, [sp]
   179d8:	add	sp, sp, #4
   179dc:	pop	{pc}		; (ldr pc, [sp], #4)

000179e0 <init_token_int_type@@Base>:
   179e0:	strd	r4, [sp, #-12]!
   179e4:	str	fp, [sp, #8]
   179e8:	add	fp, sp, #8
   179ec:	sub	sp, sp, #12
   179f0:	str	r0, [fp, #-16]
   179f4:	ldr	r3, [pc, #60]	; 17a38 <init_token_int_type@@Base+0x58>
   179f8:	add	r3, pc, r3
   179fc:	ldrd	r2, [r3]
   17a00:	adds	r4, r2, #1
   17a04:	adc	r5, r3, #0
   17a08:	ldr	r3, [pc, #44]	; 17a3c <init_token_int_type@@Base+0x5c>
   17a0c:	add	r3, pc, r3
   17a10:	strd	r4, [r3]
   17a14:	ldr	r3, [fp, #-16]
   17a18:	mov	r2, #0
   17a1c:	str	r2, [r3]
   17a20:	nop	{0}
   17a24:	sub	sp, fp, #8
   17a28:	ldrd	r4, [sp]
   17a2c:	ldr	fp, [sp, #8]
   17a30:	add	sp, sp, #12
   17a34:	bx	lr
   17a38:	andeq	r8, r1, r8, lsl r8
   17a3c:	andeq	r8, r1, r4, lsl #16

00017a40 <init_token_int_value@@Base>:
   17a40:	strd	r4, [sp, #-12]!
   17a44:	str	fp, [sp, #8]
   17a48:	add	fp, sp, #8
   17a4c:	sub	sp, sp, #12
   17a50:	str	r0, [fp, #-16]
   17a54:	str	r1, [fp, #-20]	; 0xffffffec
   17a58:	ldr	r3, [pc, #72]	; 17aa8 <init_token_int_value@@Base+0x68>
   17a5c:	add	r3, pc, r3
   17a60:	ldrd	r2, [r3]
   17a64:	adds	r4, r2, #1
   17a68:	adc	r5, r3, #0
   17a6c:	ldr	r3, [pc, #56]	; 17aac <init_token_int_value@@Base+0x6c>
   17a70:	add	r3, pc, r3
   17a74:	strd	r4, [r3]
   17a78:	ldr	r3, [fp, #-16]
   17a7c:	mov	r2, #1
   17a80:	str	r2, [r3]
   17a84:	ldr	r3, [fp, #-16]
   17a88:	ldr	r2, [fp, #-20]	; 0xffffffec
   17a8c:	str	r2, [r3, #4]
   17a90:	nop	{0}
   17a94:	sub	sp, fp, #8
   17a98:	ldrd	r4, [sp]
   17a9c:	ldr	fp, [sp, #8]
   17aa0:	add	sp, sp, #12
   17aa4:	bx	lr
   17aa8:	andeq	r8, r1, ip, lsr #15
   17aac:	muleq	r1, r8, r7

00017ab0 <init_token_function@@Base>:
   17ab0:	strd	r4, [sp, #-12]!
   17ab4:	str	fp, [sp, #8]
   17ab8:	add	fp, sp, #8
   17abc:	sub	sp, sp, #12
   17ac0:	str	r0, [fp, #-16]
   17ac4:	str	r1, [fp, #-20]	; 0xffffffec
   17ac8:	ldr	r3, [pc, #72]	; 17b18 <init_token_function@@Base+0x68>
   17acc:	add	r3, pc, r3
   17ad0:	ldrd	r2, [r3]
   17ad4:	adds	r4, r2, #1
   17ad8:	adc	r5, r3, #0
   17adc:	ldr	r3, [pc, #56]	; 17b1c <init_token_function@@Base+0x6c>
   17ae0:	add	r3, pc, r3
   17ae4:	strd	r4, [r3]
   17ae8:	ldr	r3, [fp, #-16]
   17aec:	mov	r2, #2
   17af0:	str	r2, [r3]
   17af4:	ldr	r3, [fp, #-16]
   17af8:	ldr	r2, [fp, #-20]	; 0xffffffec
   17afc:	str	r2, [r3, #4]
   17b00:	nop	{0}
   17b04:	sub	sp, fp, #8
   17b08:	ldrd	r4, [sp]
   17b0c:	ldr	fp, [sp, #8]
   17b10:	add	sp, sp, #12
   17b14:	bx	lr
   17b18:	andeq	r8, r1, r4, lsr r7
   17b1c:	andeq	r8, r1, r0, lsr #14

00017b20 <init_token_opar@@Base>:
   17b20:	strd	r4, [sp, #-12]!
   17b24:	str	fp, [sp, #8]
   17b28:	add	fp, sp, #8
   17b2c:	sub	sp, sp, #12
   17b30:	str	r0, [fp, #-16]
   17b34:	ldr	r3, [pc, #60]	; 17b78 <init_token_opar@@Base+0x58>
   17b38:	add	r3, pc, r3
   17b3c:	ldrd	r2, [r3]
   17b40:	adds	r4, r2, #1
   17b44:	adc	r5, r3, #0
   17b48:	ldr	r3, [pc, #44]	; 17b7c <init_token_opar@@Base+0x5c>
   17b4c:	add	r3, pc, r3
   17b50:	strd	r4, [r3]
   17b54:	ldr	r3, [fp, #-16]
   17b58:	mov	r2, #3
   17b5c:	str	r2, [r3]
   17b60:	nop	{0}
   17b64:	sub	sp, fp, #8
   17b68:	ldrd	r4, [sp]
   17b6c:	ldr	fp, [sp, #8]
   17b70:	add	sp, sp, #12
   17b74:	bx	lr
   17b78:	andeq	r8, r1, r0, asr #13
   17b7c:	andeq	r8, r1, ip, lsr #13

00017b80 <init_token_cpar@@Base>:
   17b80:	strd	r4, [sp, #-12]!
   17b84:	str	fp, [sp, #8]
   17b88:	add	fp, sp, #8
   17b8c:	sub	sp, sp, #12
   17b90:	str	r0, [fp, #-16]
   17b94:	ldr	r3, [pc, #60]	; 17bd8 <init_token_cpar@@Base+0x58>
   17b98:	add	r3, pc, r3
   17b9c:	ldrd	r2, [r3]
   17ba0:	adds	r4, r2, #1
   17ba4:	adc	r5, r3, #0
   17ba8:	ldr	r3, [pc, #44]	; 17bdc <init_token_cpar@@Base+0x5c>
   17bac:	add	r3, pc, r3
   17bb0:	strd	r4, [r3]
   17bb4:	ldr	r3, [fp, #-16]
   17bb8:	mov	r2, #4
   17bbc:	str	r2, [r3]
   17bc0:	nop	{0}
   17bc4:	sub	sp, fp, #8
   17bc8:	ldrd	r4, [sp]
   17bcc:	ldr	fp, [sp, #8]
   17bd0:	add	sp, sp, #12
   17bd4:	bx	lr
   17bd8:	andeq	r8, r1, r8, asr r6
   17bdc:	andeq	r8, r1, r4, asr #12

00017be0 <init_token_obra@@Base>:
   17be0:	strd	r4, [sp, #-12]!
   17be4:	str	fp, [sp, #8]
   17be8:	add	fp, sp, #8
   17bec:	sub	sp, sp, #12
   17bf0:	str	r0, [fp, #-16]
   17bf4:	ldr	r3, [pc, #60]	; 17c38 <init_token_obra@@Base+0x58>
   17bf8:	add	r3, pc, r3
   17bfc:	ldrd	r2, [r3]
   17c00:	adds	r4, r2, #1
   17c04:	adc	r5, r3, #0
   17c08:	ldr	r3, [pc, #44]	; 17c3c <init_token_obra@@Base+0x5c>
   17c0c:	add	r3, pc, r3
   17c10:	strd	r4, [r3]
   17c14:	ldr	r3, [fp, #-16]
   17c18:	mov	r2, #5
   17c1c:	str	r2, [r3]
   17c20:	nop	{0}
   17c24:	sub	sp, fp, #8
   17c28:	ldrd	r4, [sp]
   17c2c:	ldr	fp, [sp, #8]
   17c30:	add	sp, sp, #12
   17c34:	bx	lr
   17c38:	strdeq	r8, [r1], -r0
   17c3c:	ldrdeq	r8, [r1], -ip

00017c40 <init_token_cbra@@Base>:
   17c40:	strd	r4, [sp, #-12]!
   17c44:	str	fp, [sp, #8]
   17c48:	add	fp, sp, #8
   17c4c:	sub	sp, sp, #12
   17c50:	str	r0, [fp, #-16]
   17c54:	ldr	r3, [pc, #60]	; 17c98 <init_token_cbra@@Base+0x58>
   17c58:	add	r3, pc, r3
   17c5c:	ldrd	r2, [r3]
   17c60:	adds	r4, r2, #1
   17c64:	adc	r5, r3, #0
   17c68:	ldr	r3, [pc, #44]	; 17c9c <init_token_cbra@@Base+0x5c>
   17c6c:	add	r3, pc, r3
   17c70:	strd	r4, [r3]
   17c74:	ldr	r3, [fp, #-16]
   17c78:	mov	r2, #6
   17c7c:	str	r2, [r3]
   17c80:	nop	{0}
   17c84:	sub	sp, fp, #8
   17c88:	ldrd	r4, [sp]
   17c8c:	ldr	fp, [sp, #8]
   17c90:	add	sp, sp, #12
   17c94:	bx	lr
   17c98:	andeq	r8, r1, r8, lsl #11
   17c9c:	andeq	r8, r1, r4, ror r5

00017ca0 <init_token_return@@Base>:
   17ca0:	strd	r4, [sp, #-12]!
   17ca4:	str	fp, [sp, #8]
   17ca8:	add	fp, sp, #8
   17cac:	sub	sp, sp, #12
   17cb0:	str	r0, [fp, #-16]
   17cb4:	ldr	r3, [pc, #60]	; 17cf8 <init_token_return@@Base+0x58>
   17cb8:	add	r3, pc, r3
   17cbc:	ldrd	r2, [r3]
   17cc0:	adds	r4, r2, #1
   17cc4:	adc	r5, r3, #0
   17cc8:	ldr	r3, [pc, #44]	; 17cfc <init_token_return@@Base+0x5c>
   17ccc:	add	r3, pc, r3
   17cd0:	strd	r4, [r3]
   17cd4:	ldr	r3, [fp, #-16]
   17cd8:	mov	r2, #7
   17cdc:	str	r2, [r3]
   17ce0:	nop	{0}
   17ce4:	sub	sp, fp, #8
   17ce8:	ldrd	r4, [sp]
   17cec:	ldr	fp, [sp, #8]
   17cf0:	add	sp, sp, #12
   17cf4:	bx	lr
   17cf8:	andeq	r8, r1, r0, lsr #10
   17cfc:	andeq	r8, r1, ip, lsl #10

00017d00 <init_token_semicolon@@Base>:
   17d00:	strd	r4, [sp, #-12]!
   17d04:	str	fp, [sp, #8]
   17d08:	add	fp, sp, #8
   17d0c:	sub	sp, sp, #12
   17d10:	str	r0, [fp, #-16]
   17d14:	ldr	r3, [pc, #60]	; 17d58 <init_token_semicolon@@Base+0x58>
   17d18:	add	r3, pc, r3
   17d1c:	ldrd	r2, [r3]
   17d20:	adds	r4, r2, #1
   17d24:	adc	r5, r3, #0
   17d28:	ldr	r3, [pc, #44]	; 17d5c <init_token_semicolon@@Base+0x5c>
   17d2c:	add	r3, pc, r3
   17d30:	strd	r4, [r3]
   17d34:	ldr	r3, [fp, #-16]
   17d38:	mov	r2, #8
   17d3c:	str	r2, [r3]
   17d40:	nop	{0}
   17d44:	sub	sp, fp, #8
   17d48:	ldrd	r4, [sp]
   17d4c:	ldr	fp, [sp, #8]
   17d50:	add	sp, sp, #12
   17d54:	bx	lr
   17d58:			; <UNDEFINED> instruction: 0x000184b8
   17d5c:	andeq	r8, r1, r4, lsr #9

00017d60 <init_token_eof@@Base>:
   17d60:	strd	r4, [sp, #-12]!
   17d64:	str	fp, [sp, #8]
   17d68:	add	fp, sp, #8
   17d6c:	sub	sp, sp, #12
   17d70:	str	r0, [fp, #-16]
   17d74:	ldr	r3, [pc, #60]	; 17db8 <init_token_eof@@Base+0x58>
   17d78:	add	r3, pc, r3
   17d7c:	ldrd	r2, [r3]
   17d80:	adds	r4, r2, #1
   17d84:	adc	r5, r3, #0
   17d88:	ldr	r3, [pc, #44]	; 17dbc <init_token_eof@@Base+0x5c>
   17d8c:	add	r3, pc, r3
   17d90:	strd	r4, [r3]
   17d94:	ldr	r3, [fp, #-16]
   17d98:	mov	r2, #9
   17d9c:	str	r2, [r3]
   17da0:	nop	{0}
   17da4:	sub	sp, fp, #8
   17da8:	ldrd	r4, [sp]
   17dac:	ldr	fp, [sp, #8]
   17db0:	add	sp, sp, #12
   17db4:	bx	lr
   17db8:	andeq	r8, r1, r0, asr r4
   17dbc:	andeq	r8, r1, ip, lsr r4

00017dc0 <init_token_if@@Base>:
   17dc0:	strd	r4, [sp, #-12]!
   17dc4:	str	fp, [sp, #8]
   17dc8:	add	fp, sp, #8
   17dcc:	sub	sp, sp, #12
   17dd0:	str	r0, [fp, #-16]
   17dd4:	ldr	r3, [pc, #60]	; 17e18 <init_token_if@@Base+0x58>
   17dd8:	add	r3, pc, r3
   17ddc:	ldrd	r2, [r3]
   17de0:	adds	r4, r2, #1
   17de4:	adc	r5, r3, #0
   17de8:	ldr	r3, [pc, #44]	; 17e1c <init_token_if@@Base+0x5c>
   17dec:	add	r3, pc, r3
   17df0:	strd	r4, [r3]
   17df4:	ldr	r3, [fp, #-16]
   17df8:	mov	r2, #10
   17dfc:	str	r2, [r3]
   17e00:	nop	{0}
   17e04:	sub	sp, fp, #8
   17e08:	ldrd	r4, [sp]
   17e0c:	ldr	fp, [sp, #8]
   17e10:	add	sp, sp, #12
   17e14:	bx	lr
   17e18:	andeq	r8, r1, r8, ror #7
   17e1c:	ldrdeq	r8, [r1], -r4

00017e20 <init_token_else@@Base>:
   17e20:	strd	r4, [sp, #-12]!
   17e24:	str	fp, [sp, #8]
   17e28:	add	fp, sp, #8
   17e2c:	sub	sp, sp, #12
   17e30:	str	r0, [fp, #-16]
   17e34:	ldr	r3, [pc, #60]	; 17e78 <init_token_else@@Base+0x58>
   17e38:	add	r3, pc, r3
   17e3c:	ldrd	r2, [r3]
   17e40:	adds	r4, r2, #1
   17e44:	adc	r5, r3, #0
   17e48:	ldr	r3, [pc, #44]	; 17e7c <init_token_else@@Base+0x5c>
   17e4c:	add	r3, pc, r3
   17e50:	strd	r4, [r3]
   17e54:	ldr	r3, [fp, #-16]
   17e58:	mov	r2, #11
   17e5c:	str	r2, [r3]
   17e60:	nop	{0}
   17e64:	sub	sp, fp, #8
   17e68:	ldrd	r4, [sp]
   17e6c:	ldr	fp, [sp, #8]
   17e70:	add	sp, sp, #12
   17e74:	bx	lr
   17e78:	andeq	r8, r1, r0, lsl #7
   17e7c:	andeq	r8, r1, ip, ror #6

00017e80 <init_token_boolean_op@@Base>:
   17e80:	strd	r4, [sp, #-12]!
   17e84:	str	fp, [sp, #8]
   17e88:	add	fp, sp, #8
   17e8c:	sub	sp, sp, #12
   17e90:	str	r0, [fp, #-16]
   17e94:	str	r1, [fp, #-20]	; 0xffffffec
   17e98:	ldr	r3, [pc, #72]	; 17ee8 <init_token_boolean_op@@Base+0x68>
   17e9c:	add	r3, pc, r3
   17ea0:	ldrd	r2, [r3]
   17ea4:	adds	r4, r2, #1
   17ea8:	adc	r5, r3, #0
   17eac:	ldr	r3, [pc, #56]	; 17eec <init_token_boolean_op@@Base+0x6c>
   17eb0:	add	r3, pc, r3
   17eb4:	strd	r4, [r3]
   17eb8:	ldr	r3, [fp, #-16]
   17ebc:	mov	r2, #12
   17ec0:	str	r2, [r3]
   17ec4:	ldr	r3, [fp, #-16]
   17ec8:	ldr	r2, [fp, #-20]	; 0xffffffec
   17ecc:	str	r2, [r3, #4]
   17ed0:	nop	{0}
   17ed4:	sub	sp, fp, #8
   17ed8:	ldrd	r4, [sp]
   17edc:	ldr	fp, [sp, #8]
   17ee0:	add	sp, sp, #12
   17ee4:	bx	lr
   17ee8:	andeq	r8, r1, r4, lsl r3
   17eec:	andeq	r8, r1, r0, lsl #6

00017ef0 <free_token_int_type@@Base>:
   17ef0:	strd	r4, [sp, #-16]!
   17ef4:	str	fp, [sp, #8]
   17ef8:	str	lr, [sp, #12]
   17efc:	add	fp, sp, #12
   17f00:	sub	sp, sp, #8
   17f04:	str	r0, [fp, #-16]
   17f08:	ldr	r3, [pc, #56]	; 17f48 <free_token_int_type@@Base+0x58>
   17f0c:	add	r3, pc, r3
   17f10:	ldrd	r2, [r3]
   17f14:	adds	r4, r2, #1
   17f18:	adc	r5, r3, #0
   17f1c:	ldr	r3, [pc, #40]	; 17f4c <free_token_int_type@@Base+0x5c>
   17f20:	add	r3, pc, r3
   17f24:	strd	r4, [r3]
   17f28:	ldr	r0, [fp, #-16]
   17f2c:	bl	1184c <free@plt>
   17f30:	nop	{0}
   17f34:	sub	sp, fp, #12
   17f38:	ldrd	r4, [sp]
   17f3c:	ldr	fp, [sp, #8]
   17f40:	add	sp, sp, #12
   17f44:	pop	{pc}		; (ldr pc, [sp], #4)
   17f48:	muleq	r1, ip, r2
   17f4c:	andeq	r8, r1, r8, lsl #5

00017f50 <free_token_int_value@@Base>:
   17f50:	strd	r4, [sp, #-16]!
   17f54:	str	fp, [sp, #8]
   17f58:	str	lr, [sp, #12]
   17f5c:	add	fp, sp, #12
   17f60:	sub	sp, sp, #8
   17f64:	str	r0, [fp, #-16]
   17f68:	ldr	r3, [pc, #56]	; 17fa8 <free_token_int_value@@Base+0x58>
   17f6c:	add	r3, pc, r3
   17f70:	ldrd	r2, [r3]
   17f74:	adds	r4, r2, #1
   17f78:	adc	r5, r3, #0
   17f7c:	ldr	r3, [pc, #40]	; 17fac <free_token_int_value@@Base+0x5c>
   17f80:	add	r3, pc, r3
   17f84:	strd	r4, [r3]
   17f88:	ldr	r0, [fp, #-16]
   17f8c:	bl	1184c <free@plt>
   17f90:	nop	{0}
   17f94:	sub	sp, fp, #12
   17f98:	ldrd	r4, [sp]
   17f9c:	ldr	fp, [sp, #8]
   17fa0:	add	sp, sp, #12
   17fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   17fa8:	andeq	r8, r1, r4, lsr r2
   17fac:	andeq	r8, r1, r0, lsr #4

00017fb0 <free_token_function@@Base>:
   17fb0:	strd	r4, [sp, #-16]!
   17fb4:	str	fp, [sp, #8]
   17fb8:	str	lr, [sp, #12]
   17fbc:	add	fp, sp, #12
   17fc0:	sub	sp, sp, #8
   17fc4:	str	r0, [fp, #-16]
   17fc8:	ldr	r3, [pc, #56]	; 18008 <free_token_function@@Base+0x58>
   17fcc:	add	r3, pc, r3
   17fd0:	ldrd	r2, [r3]
   17fd4:	adds	r4, r2, #1
   17fd8:	adc	r5, r3, #0
   17fdc:	ldr	r3, [pc, #40]	; 1800c <free_token_function@@Base+0x5c>
   17fe0:	add	r3, pc, r3
   17fe4:	strd	r4, [r3]
   17fe8:	ldr	r0, [fp, #-16]
   17fec:	bl	1184c <free@plt>
   17ff0:	nop	{0}
   17ff4:	sub	sp, fp, #12
   17ff8:	ldrd	r4, [sp]
   17ffc:	ldr	fp, [sp, #8]
   18000:	add	sp, sp, #12
   18004:	pop	{pc}		; (ldr pc, [sp], #4)
   18008:	andeq	r8, r1, ip, asr #3
   1800c:			; <UNDEFINED> instruction: 0x000181b8

00018010 <free_token_opar@@Base>:
   18010:	strd	r4, [sp, #-16]!
   18014:	str	fp, [sp, #8]
   18018:	str	lr, [sp, #12]
   1801c:	add	fp, sp, #12
   18020:	sub	sp, sp, #8
   18024:	str	r0, [fp, #-16]
   18028:	ldr	r3, [pc, #56]	; 18068 <free_token_opar@@Base+0x58>
   1802c:	add	r3, pc, r3
   18030:	ldrd	r2, [r3]
   18034:	adds	r4, r2, #1
   18038:	adc	r5, r3, #0
   1803c:	ldr	r3, [pc, #40]	; 1806c <free_token_opar@@Base+0x5c>
   18040:	add	r3, pc, r3
   18044:	strd	r4, [r3]
   18048:	ldr	r0, [fp, #-16]
   1804c:	bl	1184c <free@plt>
   18050:	nop	{0}
   18054:	sub	sp, fp, #12
   18058:	ldrd	r4, [sp]
   1805c:	ldr	fp, [sp, #8]
   18060:	add	sp, sp, #12
   18064:	pop	{pc}		; (ldr pc, [sp], #4)
   18068:	andeq	r8, r1, r4, ror #2
   1806c:	andeq	r8, r1, r0, asr r1

00018070 <free_token_cpar@@Base>:
   18070:	strd	r4, [sp, #-16]!
   18074:	str	fp, [sp, #8]
   18078:	str	lr, [sp, #12]
   1807c:	add	fp, sp, #12
   18080:	sub	sp, sp, #8
   18084:	str	r0, [fp, #-16]
   18088:	ldr	r3, [pc, #56]	; 180c8 <free_token_cpar@@Base+0x58>
   1808c:	add	r3, pc, r3
   18090:	ldrd	r2, [r3]
   18094:	adds	r4, r2, #1
   18098:	adc	r5, r3, #0
   1809c:	ldr	r3, [pc, #40]	; 180cc <free_token_cpar@@Base+0x5c>
   180a0:	add	r3, pc, r3
   180a4:	strd	r4, [r3]
   180a8:	ldr	r0, [fp, #-16]
   180ac:	bl	1184c <free@plt>
   180b0:	nop	{0}
   180b4:	sub	sp, fp, #12
   180b8:	ldrd	r4, [sp]
   180bc:	ldr	fp, [sp, #8]
   180c0:	add	sp, sp, #12
   180c4:	pop	{pc}		; (ldr pc, [sp], #4)
   180c8:	strdeq	r8, [r1], -ip
   180cc:	andeq	r8, r1, r8, ror #1

000180d0 <free_token_obra@@Base>:
   180d0:	strd	r4, [sp, #-16]!
   180d4:	str	fp, [sp, #8]
   180d8:	str	lr, [sp, #12]
   180dc:	add	fp, sp, #12
   180e0:	sub	sp, sp, #8
   180e4:	str	r0, [fp, #-16]
   180e8:	ldr	r3, [pc, #56]	; 18128 <free_token_obra@@Base+0x58>
   180ec:	add	r3, pc, r3
   180f0:	ldrd	r2, [r3]
   180f4:	adds	r4, r2, #1
   180f8:	adc	r5, r3, #0
   180fc:	ldr	r3, [pc, #40]	; 1812c <free_token_obra@@Base+0x5c>
   18100:	add	r3, pc, r3
   18104:	strd	r4, [r3]
   18108:	ldr	r0, [fp, #-16]
   1810c:	bl	1184c <free@plt>
   18110:	nop	{0}
   18114:	sub	sp, fp, #12
   18118:	ldrd	r4, [sp]
   1811c:	ldr	fp, [sp, #8]
   18120:	add	sp, sp, #12
   18124:	pop	{pc}		; (ldr pc, [sp], #4)
   18128:	muleq	r1, r4, r0
   1812c:	andeq	r8, r1, r0, lsl #1

00018130 <free_token_cbra@@Base>:
   18130:	strd	r4, [sp, #-16]!
   18134:	str	fp, [sp, #8]
   18138:	str	lr, [sp, #12]
   1813c:	add	fp, sp, #12
   18140:	sub	sp, sp, #8
   18144:	str	r0, [fp, #-16]
   18148:	ldr	r3, [pc, #56]	; 18188 <free_token_cbra@@Base+0x58>
   1814c:	add	r3, pc, r3
   18150:	ldrd	r2, [r3]
   18154:	adds	r4, r2, #1
   18158:	adc	r5, r3, #0
   1815c:	ldr	r3, [pc, #40]	; 1818c <free_token_cbra@@Base+0x5c>
   18160:	add	r3, pc, r3
   18164:	strd	r4, [r3]
   18168:	ldr	r0, [fp, #-16]
   1816c:	bl	1184c <free@plt>
   18170:	nop	{0}
   18174:	sub	sp, fp, #12
   18178:	ldrd	r4, [sp]
   1817c:	ldr	fp, [sp, #8]
   18180:	add	sp, sp, #12
   18184:	pop	{pc}		; (ldr pc, [sp], #4)
   18188:	andeq	r8, r1, ip, lsr #32
   1818c:	andeq	r8, r1, r8, lsl r0

00018190 <free_token_return@@Base>:
   18190:	strd	r4, [sp, #-16]!
   18194:	str	fp, [sp, #8]
   18198:	str	lr, [sp, #12]
   1819c:	add	fp, sp, #12
   181a0:	sub	sp, sp, #8
   181a4:	str	r0, [fp, #-16]
   181a8:	ldr	r3, [pc, #56]	; 181e8 <free_token_return@@Base+0x58>
   181ac:	add	r3, pc, r3
   181b0:	ldrd	r2, [r3]
   181b4:	adds	r4, r2, #1
   181b8:	adc	r5, r3, #0
   181bc:	ldr	r3, [pc, #40]	; 181ec <free_token_return@@Base+0x5c>
   181c0:	add	r3, pc, r3
   181c4:	strd	r4, [r3]
   181c8:	ldr	r0, [fp, #-16]
   181cc:	bl	1184c <free@plt>
   181d0:	nop	{0}
   181d4:	sub	sp, fp, #12
   181d8:	ldrd	r4, [sp]
   181dc:	ldr	fp, [sp, #8]
   181e0:	add	sp, sp, #12
   181e4:	pop	{pc}		; (ldr pc, [sp], #4)
   181e8:	andeq	r7, r1, r4, asr #31
   181ec:			; <UNDEFINED> instruction: 0x00017fb0

000181f0 <free_token_semicolon@@Base>:
   181f0:	strd	r4, [sp, #-16]!
   181f4:	str	fp, [sp, #8]
   181f8:	str	lr, [sp, #12]
   181fc:	add	fp, sp, #12
   18200:	sub	sp, sp, #8
   18204:	str	r0, [fp, #-16]
   18208:	ldr	r3, [pc, #56]	; 18248 <free_token_semicolon@@Base+0x58>
   1820c:	add	r3, pc, r3
   18210:	ldrd	r2, [r3]
   18214:	adds	r4, r2, #1
   18218:	adc	r5, r3, #0
   1821c:	ldr	r3, [pc, #40]	; 1824c <free_token_semicolon@@Base+0x5c>
   18220:	add	r3, pc, r3
   18224:	strd	r4, [r3]
   18228:	ldr	r0, [fp, #-16]
   1822c:	bl	1184c <free@plt>
   18230:	nop	{0}
   18234:	sub	sp, fp, #12
   18238:	ldrd	r4, [sp]
   1823c:	ldr	fp, [sp, #8]
   18240:	add	sp, sp, #12
   18244:	pop	{pc}		; (ldr pc, [sp], #4)
   18248:	andeq	r7, r1, ip, asr pc
   1824c:	andeq	r7, r1, r8, asr #30

00018250 <free_token_eof@@Base>:
   18250:	strd	r4, [sp, #-16]!
   18254:	str	fp, [sp, #8]
   18258:	str	lr, [sp, #12]
   1825c:	add	fp, sp, #12
   18260:	sub	sp, sp, #8
   18264:	str	r0, [fp, #-16]
   18268:	ldr	r3, [pc, #56]	; 182a8 <free_token_eof@@Base+0x58>
   1826c:	add	r3, pc, r3
   18270:	ldrd	r2, [r3]
   18274:	adds	r4, r2, #1
   18278:	adc	r5, r3, #0
   1827c:	ldr	r3, [pc, #40]	; 182ac <free_token_eof@@Base+0x5c>
   18280:	add	r3, pc, r3
   18284:	strd	r4, [r3]
   18288:	ldr	r0, [fp, #-16]
   1828c:	bl	1184c <free@plt>
   18290:	nop	{0}
   18294:	sub	sp, fp, #12
   18298:	ldrd	r4, [sp]
   1829c:	ldr	fp, [sp, #8]
   182a0:	add	sp, sp, #12
   182a4:	pop	{pc}		; (ldr pc, [sp], #4)
   182a8:	strdeq	r7, [r1], -r4
   182ac:	andeq	r7, r1, r0, ror #29

000182b0 <free_token_if@@Base>:
   182b0:	strd	r4, [sp, #-16]!
   182b4:	str	fp, [sp, #8]
   182b8:	str	lr, [sp, #12]
   182bc:	add	fp, sp, #12
   182c0:	sub	sp, sp, #8
   182c4:	str	r0, [fp, #-16]
   182c8:	ldr	r3, [pc, #56]	; 18308 <free_token_if@@Base+0x58>
   182cc:	add	r3, pc, r3
   182d0:	ldrd	r2, [r3]
   182d4:	adds	r4, r2, #1
   182d8:	adc	r5, r3, #0
   182dc:	ldr	r3, [pc, #40]	; 1830c <free_token_if@@Base+0x5c>
   182e0:	add	r3, pc, r3
   182e4:	strd	r4, [r3]
   182e8:	ldr	r0, [fp, #-16]
   182ec:	bl	1184c <free@plt>
   182f0:	nop	{0}
   182f4:	sub	sp, fp, #12
   182f8:	ldrd	r4, [sp]
   182fc:	ldr	fp, [sp, #8]
   18300:	add	sp, sp, #12
   18304:	pop	{pc}		; (ldr pc, [sp], #4)
   18308:	andeq	r7, r1, ip, lsl #29
   1830c:	andeq	r7, r1, r8, ror lr

00018310 <free_token_else@@Base>:
   18310:	strd	r4, [sp, #-16]!
   18314:	str	fp, [sp, #8]
   18318:	str	lr, [sp, #12]
   1831c:	add	fp, sp, #12
   18320:	sub	sp, sp, #8
   18324:	str	r0, [fp, #-16]
   18328:	ldr	r3, [pc, #56]	; 18368 <free_token_else@@Base+0x58>
   1832c:	add	r3, pc, r3
   18330:	ldrd	r2, [r3]
   18334:	adds	r4, r2, #1
   18338:	adc	r5, r3, #0
   1833c:	ldr	r3, [pc, #40]	; 1836c <free_token_else@@Base+0x5c>
   18340:	add	r3, pc, r3
   18344:	strd	r4, [r3]
   18348:	ldr	r0, [fp, #-16]
   1834c:	bl	1184c <free@plt>
   18350:	nop	{0}
   18354:	sub	sp, fp, #12
   18358:	ldrd	r4, [sp]
   1835c:	ldr	fp, [sp, #8]
   18360:	add	sp, sp, #12
   18364:	pop	{pc}		; (ldr pc, [sp], #4)
   18368:	andeq	r7, r1, r4, lsr #28
   1836c:	andeq	r7, r1, r0, lsl lr

00018370 <free_token_boolean_op@@Base>:
   18370:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18374:	strd	r6, [sp, #8]
   18378:	str	fp, [sp, #16]
   1837c:	str	lr, [sp, #20]
   18380:	add	fp, sp, #20
   18384:	sub	sp, sp, #8
   18388:	str	r0, [fp, #-24]	; 0xffffffe8
   1838c:	ldr	r3, [pc, #124]	; 18410 <free_token_boolean_op@@Base+0xa0>
   18390:	add	r3, pc, r3
   18394:	ldrd	r2, [r3]
   18398:	adds	r6, r2, #1
   1839c:	adc	r7, r3, #0
   183a0:	ldr	r3, [pc, #108]	; 18414 <free_token_boolean_op@@Base+0xa4>
   183a4:	add	r3, pc, r3
   183a8:	strd	r6, [r3]
   183ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   183b0:	ldr	r3, [r3, #4]
   183b4:	cmp	r3, #0
   183b8:	beq	183ec <free_token_boolean_op@@Base+0x7c>
   183bc:	ldr	r3, [pc, #84]	; 18418 <free_token_boolean_op@@Base+0xa8>
   183c0:	add	r3, pc, r3
   183c4:	ldrd	r2, [r3, #8]
   183c8:	adds	r4, r2, #1
   183cc:	adc	r5, r3, #0
   183d0:	ldr	r3, [pc, #68]	; 1841c <free_token_boolean_op@@Base+0xac>
   183d4:	add	r3, pc, r3
   183d8:	strd	r4, [r3, #8]
   183dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   183e0:	ldr	r3, [r3, #4]
   183e4:	mov	r0, r3
   183e8:	bl	1184c <free@plt>
   183ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   183f0:	bl	1184c <free@plt>
   183f4:	nop	{0}
   183f8:	sub	sp, fp, #20
   183fc:	ldrd	r4, [sp]
   18400:	ldrd	r6, [sp, #8]
   18404:	ldr	fp, [sp, #16]
   18408:	add	sp, sp, #20
   1840c:	pop	{pc}		; (ldr pc, [sp], #4)
   18410:			; <UNDEFINED> instruction: 0x00017db0
   18414:	muleq	r1, ip, sp
   18418:	andeq	r7, r1, r0, lsl #27
   1841c:	andeq	r7, r1, ip, ror #26
   18420:	str	fp, [sp, #-8]!
   18424:	str	lr, [sp, #4]
   18428:	add	fp, sp, #4
   1842c:	ldr	r3, [pc, #24]	; 1844c <free_token_boolean_op@@Base+0xdc>
   18430:	add	r3, pc, r3
   18434:	mov	r0, r3
   18438:	bl	1da0c <__gcov_sort_n_vals@@Base+0x4a0>
   1843c:	sub	sp, fp, #4
   18440:	ldr	fp, [sp]
   18444:	add	sp, sp, #4
   18448:	pop	{pc}		; (ldr pc, [sp], #4)
   1844c:	andeq	r7, r1, r4, lsr #3
   18450:	str	fp, [sp, #-8]!
   18454:	str	lr, [sp, #4]
   18458:	add	fp, sp, #4
   1845c:	bl	1d99c <__gcov_sort_n_vals@@Base+0x430>
   18460:	sub	sp, fp, #4
   18464:	ldr	fp, [sp]
   18468:	add	sp, sp, #4
   1846c:	pop	{pc}		; (ldr pc, [sp], #4)

00018470 <init_ast_base@@Base>:
   18470:	strd	r4, [sp, #-12]!
   18474:	str	fp, [sp, #8]
   18478:	add	fp, sp, #8
   1847c:	sub	sp, sp, #20
   18480:	str	r0, [fp, #-16]
   18484:	str	r1, [fp, #-20]	; 0xffffffec
   18488:	str	r2, [fp, #-24]	; 0xffffffe8
   1848c:	ldr	r3, [pc, #72]	; 184dc <init_ast_base@@Base+0x6c>
   18490:	add	r3, pc, r3
   18494:	ldrd	r2, [r3]
   18498:	adds	r4, r2, #1
   1849c:	adc	r5, r3, #0
   184a0:	ldr	r3, [pc, #56]	; 184e0 <init_ast_base@@Base+0x70>
   184a4:	add	r3, pc, r3
   184a8:	strd	r4, [r3]
   184ac:	ldr	r3, [fp, #-16]
   184b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   184b4:	str	r2, [r3]
   184b8:	ldr	r3, [fp, #-16]
   184bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   184c0:	str	r2, [r3, #4]
   184c4:	nop	{0}
   184c8:	sub	sp, fp, #8
   184cc:	ldrd	r4, [sp]
   184d0:	ldr	fp, [sp, #8]
   184d4:	add	sp, sp, #12
   184d8:	bx	lr
   184dc:	andeq	r7, r1, r8, lsl #31
   184e0:	andeq	r7, r1, r4, ror pc

000184e4 <init_ast_base_single@@Base>:
   184e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   184e8:	strd	r6, [sp, #8]
   184ec:	str	fp, [sp, #16]
   184f0:	str	lr, [sp, #20]
   184f4:	add	fp, sp, #20
   184f8:	sub	sp, sp, #8
   184fc:	str	r0, [fp, #-24]	; 0xffffffe8
   18500:	str	r1, [fp, #-28]	; 0xffffffe4
   18504:	ldr	r3, [pc, #100]	; 18570 <init_ast_base_single@@Base+0x8c>
   18508:	add	r3, pc, r3
   1850c:	ldrd	r2, [r3]
   18510:	adds	r6, r2, #1
   18514:	adc	r7, r3, #0
   18518:	ldr	r3, [pc, #84]	; 18574 <init_ast_base_single@@Base+0x90>
   1851c:	add	r3, pc, r3
   18520:	strd	r6, [r3]
   18524:	mov	r2, #0
   18528:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1852c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18530:	bl	18470 <init_ast_base@@Base>
   18534:	ldr	r3, [pc, #60]	; 18578 <init_ast_base_single@@Base+0x94>
   18538:	add	r3, pc, r3
   1853c:	ldrd	r2, [r3, #8]
   18540:	adds	r4, r2, #1
   18544:	adc	r5, r3, #0
   18548:	ldr	r3, [pc, #44]	; 1857c <init_ast_base_single@@Base+0x98>
   1854c:	add	r3, pc, r3
   18550:	strd	r4, [r3, #8]
   18554:	nop	{0}
   18558:	sub	sp, fp, #20
   1855c:	ldrd	r4, [sp]
   18560:	ldrd	r6, [sp, #8]
   18564:	ldr	fp, [sp, #16]
   18568:	add	sp, sp, #20
   1856c:	pop	{pc}		; (ldr pc, [sp], #4)
   18570:	andeq	r7, r1, r0, lsl #30
   18574:	andeq	r7, r1, ip, ror #29
   18578:	ldrdeq	r7, [r1], -r0
   1857c:			; <UNDEFINED> instruction: 0x00017ebc

00018580 <init_node_id@@Base>:
   18580:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18584:	strd	r6, [sp, #8]
   18588:	str	fp, [sp, #16]
   1858c:	str	lr, [sp, #20]
   18590:	add	fp, sp, #20
   18594:	sub	sp, sp, #8
   18598:	str	r0, [fp, #-24]	; 0xffffffe8
   1859c:	str	r1, [fp, #-28]	; 0xffffffe4
   185a0:	ldr	r3, [pc, #112]	; 18618 <init_node_id@@Base+0x98>
   185a4:	add	r3, pc, r3
   185a8:	ldrd	r2, [r3]
   185ac:	adds	r6, r2, #1
   185b0:	adc	r7, r3, #0
   185b4:	ldr	r3, [pc, #96]	; 1861c <init_node_id@@Base+0x9c>
   185b8:	add	r3, pc, r3
   185bc:	strd	r6, [r3]
   185c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   185c4:	mov	r1, #0
   185c8:	mov	r0, r3
   185cc:	bl	184e4 <init_ast_base_single@@Base>
   185d0:	ldr	r3, [pc, #72]	; 18620 <init_node_id@@Base+0xa0>
   185d4:	add	r3, pc, r3
   185d8:	ldrd	r2, [r3, #8]
   185dc:	adds	r4, r2, #1
   185e0:	adc	r5, r3, #0
   185e4:	ldr	r3, [pc, #56]	; 18624 <init_node_id@@Base+0xa4>
   185e8:	add	r3, pc, r3
   185ec:	strd	r4, [r3, #8]
   185f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   185f4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   185f8:	str	r2, [r3, #8]
   185fc:	nop	{0}
   18600:	sub	sp, fp, #20
   18604:	ldrd	r4, [sp]
   18608:	ldrd	r6, [sp, #8]
   1860c:	ldr	fp, [sp, #16]
   18610:	add	sp, sp, #20
   18614:	pop	{pc}		; (ldr pc, [sp], #4)
   18618:	andeq	r7, r1, r4, asr lr
   1861c:	andeq	r7, r1, r0, asr #28
   18620:	andeq	r7, r1, r4, lsr #28
   18624:	andeq	r7, r1, r0, lsl lr

00018628 <init_node_int@@Base>:
   18628:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1862c:	strd	r6, [sp, #8]
   18630:	str	fp, [sp, #16]
   18634:	str	lr, [sp, #20]
   18638:	add	fp, sp, #20
   1863c:	sub	sp, sp, #8
   18640:	str	r0, [fp, #-24]	; 0xffffffe8
   18644:	str	r1, [fp, #-28]	; 0xffffffe4
   18648:	ldr	r3, [pc, #112]	; 186c0 <init_node_int@@Base+0x98>
   1864c:	add	r3, pc, r3
   18650:	ldrd	r2, [r3]
   18654:	adds	r6, r2, #1
   18658:	adc	r7, r3, #0
   1865c:	ldr	r3, [pc, #96]	; 186c4 <init_node_int@@Base+0x9c>
   18660:	add	r3, pc, r3
   18664:	strd	r6, [r3]
   18668:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1866c:	mov	r1, #1
   18670:	mov	r0, r3
   18674:	bl	184e4 <init_ast_base_single@@Base>
   18678:	ldr	r3, [pc, #72]	; 186c8 <init_node_int@@Base+0xa0>
   1867c:	add	r3, pc, r3
   18680:	ldrd	r2, [r3, #8]
   18684:	adds	r4, r2, #1
   18688:	adc	r5, r3, #0
   1868c:	ldr	r3, [pc, #56]	; 186cc <init_node_int@@Base+0xa4>
   18690:	add	r3, pc, r3
   18694:	strd	r4, [r3, #8]
   18698:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1869c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   186a0:	str	r2, [r3, #8]
   186a4:	nop	{0}
   186a8:	sub	sp, fp, #20
   186ac:	ldrd	r4, [sp]
   186b0:	ldrd	r6, [sp, #8]
   186b4:	ldr	fp, [sp, #16]
   186b8:	add	sp, sp, #20
   186bc:	pop	{pc}		; (ldr pc, [sp], #4)
   186c0:	muleq	r1, ip, sp
   186c4:	andeq	r7, r1, r8, lsl #27
   186c8:	andeq	r7, r1, ip, ror #26
   186cc:	andeq	r7, r1, r8, asr sp

000186d0 <init_node_function@@Base>:
   186d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   186d4:	strd	r6, [sp, #8]
   186d8:	str	fp, [sp, #16]
   186dc:	str	lr, [sp, #20]
   186e0:	add	fp, sp, #20
   186e4:	sub	sp, sp, #16
   186e8:	str	r0, [fp, #-24]	; 0xffffffe8
   186ec:	str	r1, [fp, #-28]	; 0xffffffe4
   186f0:	str	r2, [fp, #-32]	; 0xffffffe0
   186f4:	ldr	r3, [pc, #124]	; 18778 <init_node_function@@Base+0xa8>
   186f8:	add	r3, pc, r3
   186fc:	ldrd	r2, [r3]
   18700:	adds	r6, r2, #1
   18704:	adc	r7, r3, #0
   18708:	ldr	r3, [pc, #108]	; 1877c <init_node_function@@Base+0xac>
   1870c:	add	r3, pc, r3
   18710:	strd	r6, [r3]
   18714:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18718:	mov	r1, #2
   1871c:	mov	r0, r3
   18720:	bl	184e4 <init_ast_base_single@@Base>
   18724:	ldr	r3, [pc, #84]	; 18780 <init_node_function@@Base+0xb0>
   18728:	add	r3, pc, r3
   1872c:	ldrd	r2, [r3, #8]
   18730:	adds	r4, r2, #1
   18734:	adc	r5, r3, #0
   18738:	ldr	r3, [pc, #68]	; 18784 <init_node_function@@Base+0xb4>
   1873c:	add	r3, pc, r3
   18740:	strd	r4, [r3, #8]
   18744:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18748:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1874c:	str	r2, [r3, #8]
   18750:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18754:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18758:	str	r2, [r3, #12]
   1875c:	nop	{0}
   18760:	sub	sp, fp, #20
   18764:	ldrd	r4, [sp]
   18768:	ldrd	r6, [sp, #8]
   1876c:	ldr	fp, [sp, #16]
   18770:	add	sp, sp, #20
   18774:	pop	{pc}		; (ldr pc, [sp], #4)
   18778:	andeq	r7, r1, r0, ror #25
   1877c:	andeq	r7, r1, ip, asr #25
   18780:			; <UNDEFINED> instruction: 0x00017cb0
   18784:	muleq	r1, ip, ip

00018788 <init_node_return@@Base>:
   18788:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1878c:	strd	r6, [sp, #8]
   18790:	str	fp, [sp, #16]
   18794:	str	lr, [sp, #20]
   18798:	add	fp, sp, #20
   1879c:	sub	sp, sp, #8
   187a0:	str	r0, [fp, #-24]	; 0xffffffe8
   187a4:	str	r1, [fp, #-28]	; 0xffffffe4
   187a8:	ldr	r3, [pc, #112]	; 18820 <init_node_return@@Base+0x98>
   187ac:	add	r3, pc, r3
   187b0:	ldrd	r2, [r3]
   187b4:	adds	r6, r2, #1
   187b8:	adc	r7, r3, #0
   187bc:	ldr	r3, [pc, #96]	; 18824 <init_node_return@@Base+0x9c>
   187c0:	add	r3, pc, r3
   187c4:	strd	r6, [r3]
   187c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   187cc:	mov	r1, #3
   187d0:	mov	r0, r3
   187d4:	bl	184e4 <init_ast_base_single@@Base>
   187d8:	ldr	r3, [pc, #72]	; 18828 <init_node_return@@Base+0xa0>
   187dc:	add	r3, pc, r3
   187e0:	ldrd	r2, [r3, #8]
   187e4:	adds	r4, r2, #1
   187e8:	adc	r5, r3, #0
   187ec:	ldr	r3, [pc, #56]	; 1882c <init_node_return@@Base+0xa4>
   187f0:	add	r3, pc, r3
   187f4:	strd	r4, [r3, #8]
   187f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   187fc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18800:	str	r2, [r3, #8]
   18804:	nop	{0}
   18808:	sub	sp, fp, #20
   1880c:	ldrd	r4, [sp]
   18810:	ldrd	r6, [sp, #8]
   18814:	ldr	fp, [sp, #16]
   18818:	add	sp, sp, #20
   1881c:	pop	{pc}		; (ldr pc, [sp], #4)
   18820:	andeq	r7, r1, ip, lsl ip
   18824:	andeq	r7, r1, r8, lsl #24
   18828:	andeq	r7, r1, ip, ror #23
   1882c:	ldrdeq	r7, [r1], -r8

00018830 <init_node_if@@Base>:
   18830:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18834:	strd	r6, [sp, #8]
   18838:	str	fp, [sp, #16]
   1883c:	str	lr, [sp, #20]
   18840:	add	fp, sp, #20
   18844:	sub	sp, sp, #16
   18848:	str	r0, [fp, #-24]	; 0xffffffe8
   1884c:	str	r1, [fp, #-28]	; 0xffffffe4
   18850:	str	r2, [fp, #-32]	; 0xffffffe0
   18854:	str	r3, [fp, #-36]	; 0xffffffdc
   18858:	ldr	r3, [pc, #136]	; 188e8 <init_node_if@@Base+0xb8>
   1885c:	add	r3, pc, r3
   18860:	ldrd	r2, [r3]
   18864:	adds	r6, r2, #1
   18868:	adc	r7, r3, #0
   1886c:	ldr	r3, [pc, #120]	; 188ec <init_node_if@@Base+0xbc>
   18870:	add	r3, pc, r3
   18874:	strd	r6, [r3]
   18878:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1887c:	mov	r1, #4
   18880:	mov	r0, r3
   18884:	bl	184e4 <init_ast_base_single@@Base>
   18888:	ldr	r3, [pc, #96]	; 188f0 <init_node_if@@Base+0xc0>
   1888c:	add	r3, pc, r3
   18890:	ldrd	r2, [r3, #8]
   18894:	adds	r4, r2, #1
   18898:	adc	r5, r3, #0
   1889c:	ldr	r3, [pc, #80]	; 188f4 <init_node_if@@Base+0xc4>
   188a0:	add	r3, pc, r3
   188a4:	strd	r4, [r3, #8]
   188a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   188ac:	ldr	r2, [fp, #-28]	; 0xffffffe4
   188b0:	str	r2, [r3, #8]
   188b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   188b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   188bc:	str	r2, [r3, #12]
   188c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   188c4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   188c8:	str	r2, [r3, #16]
   188cc:	nop	{0}
   188d0:	sub	sp, fp, #20
   188d4:	ldrd	r4, [sp]
   188d8:	ldrd	r6, [sp, #8]
   188dc:	ldr	fp, [sp, #16]
   188e0:	add	sp, sp, #20
   188e4:	pop	{pc}		; (ldr pc, [sp], #4)
   188e8:	andeq	r7, r1, ip, asr fp
   188ec:	andeq	r7, r1, r8, asr #22
   188f0:	andeq	r7, r1, ip, lsr #22
   188f4:	andeq	r7, r1, r8, lsl fp

000188f8 <init_node_boolean_operator@@Base>:
   188f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   188fc:	strd	r6, [sp, #8]
   18900:	str	fp, [sp, #16]
   18904:	str	lr, [sp, #20]
   18908:	add	fp, sp, #20
   1890c:	sub	sp, sp, #16
   18910:	str	r0, [fp, #-24]	; 0xffffffe8
   18914:	str	r1, [fp, #-28]	; 0xffffffe4
   18918:	str	r2, [fp, #-32]	; 0xffffffe0
   1891c:	str	r3, [fp, #-36]	; 0xffffffdc
   18920:	ldr	r3, [pc, #148]	; 189bc <init_node_boolean_operator@@Base+0xc4>
   18924:	add	r3, pc, r3
   18928:	ldrd	r2, [r3]
   1892c:	adds	r6, r2, #1
   18930:	adc	r7, r3, #0
   18934:	ldr	r3, [pc, #132]	; 189c0 <init_node_boolean_operator@@Base+0xc8>
   18938:	add	r3, pc, r3
   1893c:	strd	r6, [r3]
   18940:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18944:	mov	r1, #0
   18948:	mov	r0, r3
   1894c:	bl	184e4 <init_ast_base_single@@Base>
   18950:	ldr	r3, [pc, #108]	; 189c4 <init_node_boolean_operator@@Base+0xcc>
   18954:	add	r3, pc, r3
   18958:	ldrd	r2, [r3, #8]
   1895c:	adds	r4, r2, #1
   18960:	adc	r5, r3, #0
   18964:	ldr	r3, [pc, #92]	; 189c8 <init_node_boolean_operator@@Base+0xd0>
   18968:	add	r3, pc, r3
   1896c:	strd	r4, [r3, #8]
   18970:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18974:	mov	r2, #5
   18978:	str	r2, [r3]
   1897c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18980:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18984:	str	r2, [r3, #16]
   18988:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1898c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18990:	str	r2, [r3, #8]
   18994:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18998:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1899c:	str	r2, [r3, #12]
   189a0:	nop	{0}
   189a4:	sub	sp, fp, #20
   189a8:	ldrd	r4, [sp]
   189ac:	ldrd	r6, [sp, #8]
   189b0:	ldr	fp, [sp, #16]
   189b4:	add	sp, sp, #20
   189b8:	pop	{pc}		; (ldr pc, [sp], #4)
   189bc:	andeq	r7, r1, r4, lsl #21
   189c0:	andeq	r7, r1, r0, ror sl
   189c4:	andeq	r7, r1, r4, asr sl
   189c8:	andeq	r7, r1, r0, asr #20

000189cc <free_node@@Base>:
   189cc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   189d0:	strd	r6, [sp, #8]
   189d4:	strd	r8, [sp, #16]
   189d8:	str	fp, [sp, #24]
   189dc:	str	lr, [sp, #28]
   189e0:	add	fp, sp, #28
   189e4:	sub	sp, sp, #96	; 0x60
   189e8:	str	r0, [fp, #-32]	; 0xffffffe0
   189ec:	ldr	r1, [pc, #792]	; 18d0c <free_node@@Base+0x340>
   189f0:	add	r1, pc, r1
   189f4:	ldr	r3, [pc, #788]	; 18d10 <free_node@@Base+0x344>
   189f8:	add	r3, pc, r3
   189fc:	ldrd	r2, [r3]
   18a00:	adds	r4, r2, #1
   18a04:	adc	r5, r3, #0
   18a08:	ldr	r3, [pc, #772]	; 18d14 <free_node@@Base+0x348>
   18a0c:	add	r3, pc, r3
   18a10:	strd	r4, [r3]
   18a14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18a18:	ldr	r3, [r3]
   18a1c:	cmp	r3, #5
   18a20:	addls	pc, pc, r3, lsl #2
   18a24:	b	18ca4 <free_node@@Base+0x2d8>
   18a28:	b	18a40 <free_node@@Base+0x74>
   18a2c:	b	18aa8 <free_node@@Base+0xdc>
   18a30:	b	18b10 <free_node@@Base+0x144>
   18a34:	b	18b78 <free_node@@Base+0x1ac>
   18a38:	b	18be0 <free_node@@Base+0x214>
   18a3c:	b	18c48 <free_node@@Base+0x27c>
   18a40:	ldr	r3, [pc, #720]	; 18d18 <free_node@@Base+0x34c>
   18a44:	add	r3, pc, r3
   18a48:	ldrd	r2, [r3, #8]
   18a4c:	adds	r1, r2, #1
   18a50:	str	r1, [fp, #-44]	; 0xffffffd4
   18a54:	adc	r3, r3, #0
   18a58:	str	r3, [fp, #-40]	; 0xffffffd8
   18a5c:	ldr	r3, [pc, #696]	; 18d1c <free_node@@Base+0x350>
   18a60:	add	r3, pc, r3
   18a64:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   18a68:	strd	r0, [r3, #8]
   18a6c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18a70:	bl	18d88 <free_node_id@@Base>
   18a74:	nop	{0}
   18a78:	ldr	r3, [pc, #672]	; 18d20 <free_node@@Base+0x354>
   18a7c:	add	r3, pc, r3
   18a80:	ldrd	r2, [r3, #56]	; 0x38
   18a84:	adds	r1, r2, #1
   18a88:	str	r1, [fp, #-92]	; 0xffffffa4
   18a8c:	adc	r3, r3, #0
   18a90:	str	r3, [fp, #-88]	; 0xffffffa8
   18a94:	ldr	r3, [pc, #648]	; 18d24 <free_node@@Base+0x358>
   18a98:	add	r3, pc, r3
   18a9c:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   18aa0:	strd	r0, [r3, #56]	; 0x38
   18aa4:	b	18cec <free_node@@Base+0x320>
   18aa8:	ldr	r3, [pc, #632]	; 18d28 <free_node@@Base+0x35c>
   18aac:	add	r3, pc, r3
   18ab0:	ldrd	r2, [r3, #16]
   18ab4:	adds	r1, r2, #1
   18ab8:	str	r1, [fp, #-52]	; 0xffffffcc
   18abc:	adc	r3, r3, #0
   18ac0:	str	r3, [fp, #-48]	; 0xffffffd0
   18ac4:	ldr	r3, [pc, #608]	; 18d2c <free_node@@Base+0x360>
   18ac8:	add	r3, pc, r3
   18acc:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   18ad0:	strd	r0, [r3, #16]
   18ad4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18ad8:	bl	18e68 <free_node_int@@Base>
   18adc:	nop	{0}
   18ae0:	ldr	r3, [pc, #584]	; 18d30 <free_node@@Base+0x364>
   18ae4:	add	r3, pc, r3
   18ae8:	ldrd	r2, [r3, #64]	; 0x40
   18aec:	adds	r1, r2, #1
   18af0:	str	r1, [fp, #-100]	; 0xffffff9c
   18af4:	adc	r3, r3, #0
   18af8:	str	r3, [fp, #-96]	; 0xffffffa0
   18afc:	ldr	r3, [pc, #560]	; 18d34 <free_node@@Base+0x368>
   18b00:	add	r3, pc, r3
   18b04:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   18b08:	strd	r0, [r3, #64]	; 0x40
   18b0c:	b	18cec <free_node@@Base+0x320>
   18b10:	ldr	r3, [pc, #544]	; 18d38 <free_node@@Base+0x36c>
   18b14:	add	r3, pc, r3
   18b18:	ldrd	r2, [r3, #24]
   18b1c:	adds	r1, r2, #1
   18b20:	str	r1, [fp, #-60]	; 0xffffffc4
   18b24:	adc	r3, r3, #0
   18b28:	str	r3, [fp, #-56]	; 0xffffffc8
   18b2c:	ldr	r3, [pc, #520]	; 18d3c <free_node@@Base+0x370>
   18b30:	add	r3, pc, r3
   18b34:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   18b38:	strd	r0, [r3, #24]
   18b3c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18b40:	bl	18f48 <free_node_function@@Base>
   18b44:	nop	{0}
   18b48:	ldr	r3, [pc, #496]	; 18d40 <free_node@@Base+0x374>
   18b4c:	add	r3, pc, r3
   18b50:	ldrd	r2, [r3, #72]	; 0x48
   18b54:	adds	r1, r2, #1
   18b58:	str	r1, [fp, #-108]	; 0xffffff94
   18b5c:	adc	r3, r3, #0
   18b60:	str	r3, [fp, #-104]	; 0xffffff98
   18b64:	ldr	r3, [pc, #472]	; 18d44 <free_node@@Base+0x378>
   18b68:	add	r3, pc, r3
   18b6c:	ldrd	r0, [fp, #-108]	; 0xffffff94
   18b70:	strd	r0, [r3, #72]	; 0x48
   18b74:	b	18cec <free_node@@Base+0x320>
   18b78:	ldr	r3, [pc, #456]	; 18d48 <free_node@@Base+0x37c>
   18b7c:	add	r3, pc, r3
   18b80:	ldrd	r2, [r3, #32]
   18b84:	adds	r1, r2, #1
   18b88:	str	r1, [fp, #-68]	; 0xffffffbc
   18b8c:	adc	r3, r3, #0
   18b90:	str	r3, [fp, #-64]	; 0xffffffc0
   18b94:	ldr	r3, [pc, #432]	; 18d4c <free_node@@Base+0x380>
   18b98:	add	r3, pc, r3
   18b9c:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   18ba0:	strd	r0, [r3, #32]
   18ba4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18ba8:	bl	19038 <free_node_return@@Base>
   18bac:	nop	{0}
   18bb0:	ldr	r3, [pc, #408]	; 18d50 <free_node@@Base+0x384>
   18bb4:	add	r3, pc, r3
   18bb8:	ldrd	r2, [r3, #80]	; 0x50
   18bbc:	adds	r1, r2, #1
   18bc0:	str	r1, [fp, #-116]	; 0xffffff8c
   18bc4:	adc	r3, r3, #0
   18bc8:	str	r3, [fp, #-112]	; 0xffffff90
   18bcc:	ldr	r3, [pc, #384]	; 18d54 <free_node@@Base+0x388>
   18bd0:	add	r3, pc, r3
   18bd4:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   18bd8:	strd	r0, [r3, #80]	; 0x50
   18bdc:	b	18cec <free_node@@Base+0x320>
   18be0:	ldr	r3, [pc, #368]	; 18d58 <free_node@@Base+0x38c>
   18be4:	add	r3, pc, r3
   18be8:	ldrd	r2, [r3, #40]	; 0x28
   18bec:	adds	r1, r2, #1
   18bf0:	str	r1, [fp, #-76]	; 0xffffffb4
   18bf4:	adc	r3, r3, #0
   18bf8:	str	r3, [fp, #-72]	; 0xffffffb8
   18bfc:	ldr	r3, [pc, #344]	; 18d5c <free_node@@Base+0x390>
   18c00:	add	r3, pc, r3
   18c04:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   18c08:	strd	r0, [r3, #40]	; 0x28
   18c0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18c10:	bl	19118 <free_node_if@@Base>
   18c14:	nop	{0}
   18c18:	ldr	r3, [pc, #320]	; 18d60 <free_node@@Base+0x394>
   18c1c:	add	r3, pc, r3
   18c20:	ldrd	r2, [r3, #88]	; 0x58
   18c24:	adds	r1, r2, #1
   18c28:	str	r1, [fp, #-124]	; 0xffffff84
   18c2c:	adc	r3, r3, #0
   18c30:	str	r3, [fp, #-120]	; 0xffffff88
   18c34:	ldr	r3, [pc, #296]	; 18d64 <free_node@@Base+0x398>
   18c38:	add	r3, pc, r3
   18c3c:	ldrd	r0, [fp, #-124]	; 0xffffff84
   18c40:	strd	r0, [r3, #88]	; 0x58
   18c44:	b	18cec <free_node@@Base+0x320>
   18c48:	ldr	r3, [pc, #280]	; 18d68 <free_node@@Base+0x39c>
   18c4c:	add	r3, pc, r3
   18c50:	ldrd	r2, [r3, #48]	; 0x30
   18c54:	adds	r1, r2, #1
   18c58:	str	r1, [fp, #-84]	; 0xffffffac
   18c5c:	adc	r3, r3, #0
   18c60:	str	r3, [fp, #-80]	; 0xffffffb0
   18c64:	ldr	r3, [pc, #256]	; 18d6c <free_node@@Base+0x3a0>
   18c68:	add	r3, pc, r3
   18c6c:	ldrd	r0, [fp, #-84]	; 0xffffffac
   18c70:	strd	r0, [r3, #48]	; 0x30
   18c74:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18c78:	bl	192c4 <free_node_boolean_operator@@Base>
   18c7c:	nop	{0}
   18c80:	ldr	r3, [pc, #232]	; 18d70 <free_node@@Base+0x3a4>
   18c84:	add	r3, pc, r3
   18c88:	ldrd	r2, [r3, #96]	; 0x60
   18c8c:	adds	r8, r2, #1
   18c90:	adc	r9, r3, #0
   18c94:	ldr	r3, [pc, #216]	; 18d74 <free_node@@Base+0x3a8>
   18c98:	add	r3, pc, r3
   18c9c:	strd	r8, [r3, #96]	; 0x60
   18ca0:	b	18cec <free_node@@Base+0x320>
   18ca4:	ldr	r3, [pc, #204]	; 18d78 <free_node@@Base+0x3ac>
   18ca8:	ldr	r3, [r1, r3]
   18cac:	ldr	r3, [r3]
   18cb0:	mov	r2, #31
   18cb4:	mov	r1, #1
   18cb8:	ldr	r0, [pc, #188]	; 18d7c <free_node@@Base+0x3b0>
   18cbc:	add	r0, pc, r0
   18cc0:	bl	11870 <fwrite@plt>
   18cc4:	ldr	r3, [pc, #180]	; 18d80 <free_node@@Base+0x3b4>
   18cc8:	add	r3, pc, r3
   18ccc:	ldrd	r2, [r3, #104]	; 0x68
   18cd0:	adds	r6, r2, #1
   18cd4:	adc	r7, r3, #0
   18cd8:	ldr	r3, [pc, #164]	; 18d84 <free_node@@Base+0x3b8>
   18cdc:	add	r3, pc, r3
   18ce0:	strd	r6, [r3, #104]	; 0x68
   18ce4:	mov	r0, #1
   18ce8:	bl	118e8 <exit@plt>
   18cec:	nop	{0}
   18cf0:	sub	sp, fp, #28
   18cf4:	ldrd	r4, [sp]
   18cf8:	ldrd	r6, [sp, #8]
   18cfc:	ldrd	r8, [sp, #16]
   18d00:	ldr	fp, [sp, #24]
   18d04:	add	sp, sp, #28
   18d08:	pop	{pc}		; (ldr pc, [sp], #4)
   18d0c:	andeq	r6, r1, r8, lsl #12
   18d10:	andeq	r7, r1, r0, asr #18
   18d14:	andeq	r7, r1, ip, lsr #18
   18d18:	strdeq	r7, [r1], -r4
   18d1c:	ldrdeq	r7, [r1], -r8
   18d20:			; <UNDEFINED> instruction: 0x000178bc
   18d24:	andeq	r7, r1, r0, lsr #17
   18d28:	andeq	r7, r1, ip, lsl #17
   18d2c:	andeq	r7, r1, r0, ror r8
   18d30:	andeq	r7, r1, r4, asr r8
   18d34:	andeq	r7, r1, r8, lsr r8
   18d38:	andeq	r7, r1, r4, lsr #16
   18d3c:	andeq	r7, r1, r8, lsl #16
   18d40:	andeq	r7, r1, ip, ror #15
   18d44:	ldrdeq	r7, [r1], -r0
   18d48:			; <UNDEFINED> instruction: 0x000177bc
   18d4c:	andeq	r7, r1, r0, lsr #15
   18d50:	andeq	r7, r1, r4, lsl #15
   18d54:	andeq	r7, r1, r8, ror #14
   18d58:	andeq	r7, r1, r4, asr r7
   18d5c:	andeq	r7, r1, r8, lsr r7
   18d60:	andeq	r7, r1, ip, lsl r7
   18d64:	andeq	r7, r1, r0, lsl #14
   18d68:	andeq	r7, r1, ip, ror #13
   18d6c:	ldrdeq	r7, [r1], -r0
   18d70:			; <UNDEFINED> instruction: 0x000176b4
   18d74:	andeq	r7, r1, r0, lsr #13
   18d78:	andeq	r0, r0, r0, lsr #1
   18d7c:	ldrdeq	r5, [r0], -ip
   18d80:	andeq	r7, r1, r0, ror r6
   18d84:	andeq	r7, r1, ip, asr r6

00018d88 <free_node_id@@Base>:
   18d88:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18d8c:	strd	r6, [sp, #8]
   18d90:	strd	r8, [sp, #16]
   18d94:	str	fp, [sp, #24]
   18d98:	str	lr, [sp, #28]
   18d9c:	add	fp, sp, #28
   18da0:	sub	sp, sp, #8
   18da4:	str	r0, [fp, #-32]	; 0xffffffe0
   18da8:	ldr	r3, [pc, #160]	; 18e50 <free_node_id@@Base+0xc8>
   18dac:	add	r3, pc, r3
   18db0:	ldrd	r2, [r3]
   18db4:	adds	r8, r2, #1
   18db8:	adc	r9, r3, #0
   18dbc:	ldr	r3, [pc, #144]	; 18e54 <free_node_id@@Base+0xcc>
   18dc0:	add	r3, pc, r3
   18dc4:	strd	r8, [r3]
   18dc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18dcc:	ldr	r3, [r3, #4]
   18dd0:	cmp	r3, #0
   18dd4:	beq	18e28 <free_node_id@@Base+0xa0>
   18dd8:	ldr	r3, [pc, #120]	; 18e58 <free_node_id@@Base+0xd0>
   18ddc:	add	r3, pc, r3
   18de0:	ldrd	r2, [r3, #8]
   18de4:	adds	r6, r2, #1
   18de8:	adc	r7, r3, #0
   18dec:	ldr	r3, [pc, #104]	; 18e5c <free_node_id@@Base+0xd4>
   18df0:	add	r3, pc, r3
   18df4:	strd	r6, [r3, #8]
   18df8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18dfc:	ldr	r3, [r3, #4]
   18e00:	mov	r0, r3
   18e04:	bl	189cc <free_node@@Base>
   18e08:	ldr	r3, [pc, #80]	; 18e60 <free_node_id@@Base+0xd8>
   18e0c:	add	r3, pc, r3
   18e10:	ldrd	r2, [r3, #16]
   18e14:	adds	r4, r2, #1
   18e18:	adc	r5, r3, #0
   18e1c:	ldr	r3, [pc, #64]	; 18e64 <free_node_id@@Base+0xdc>
   18e20:	add	r3, pc, r3
   18e24:	strd	r4, [r3, #16]
   18e28:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18e2c:	bl	1184c <free@plt>
   18e30:	nop	{0}
   18e34:	sub	sp, fp, #28
   18e38:	ldrd	r4, [sp]
   18e3c:	ldrd	r6, [sp, #8]
   18e40:	ldrd	r8, [sp, #16]
   18e44:	ldr	fp, [sp, #24]
   18e48:	add	sp, sp, #28
   18e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   18e50:	andeq	r7, r1, r4, ror r5
   18e54:	andeq	r7, r1, r0, ror #10
   18e58:	andeq	r7, r1, r4, asr #10
   18e5c:	andeq	r7, r1, r0, lsr r5
   18e60:	andeq	r7, r1, r4, lsl r5
   18e64:	andeq	r7, r1, r0, lsl #10

00018e68 <free_node_int@@Base>:
   18e68:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18e6c:	strd	r6, [sp, #8]
   18e70:	strd	r8, [sp, #16]
   18e74:	str	fp, [sp, #24]
   18e78:	str	lr, [sp, #28]
   18e7c:	add	fp, sp, #28
   18e80:	sub	sp, sp, #8
   18e84:	str	r0, [fp, #-32]	; 0xffffffe0
   18e88:	ldr	r3, [pc, #160]	; 18f30 <free_node_int@@Base+0xc8>
   18e8c:	add	r3, pc, r3
   18e90:	ldrd	r2, [r3]
   18e94:	adds	r8, r2, #1
   18e98:	adc	r9, r3, #0
   18e9c:	ldr	r3, [pc, #144]	; 18f34 <free_node_int@@Base+0xcc>
   18ea0:	add	r3, pc, r3
   18ea4:	strd	r8, [r3]
   18ea8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18eac:	ldr	r3, [r3, #4]
   18eb0:	cmp	r3, #0
   18eb4:	beq	18f08 <free_node_int@@Base+0xa0>
   18eb8:	ldr	r3, [pc, #120]	; 18f38 <free_node_int@@Base+0xd0>
   18ebc:	add	r3, pc, r3
   18ec0:	ldrd	r2, [r3, #8]
   18ec4:	adds	r6, r2, #1
   18ec8:	adc	r7, r3, #0
   18ecc:	ldr	r3, [pc, #104]	; 18f3c <free_node_int@@Base+0xd4>
   18ed0:	add	r3, pc, r3
   18ed4:	strd	r6, [r3, #8]
   18ed8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18edc:	ldr	r3, [r3, #4]
   18ee0:	mov	r0, r3
   18ee4:	bl	189cc <free_node@@Base>
   18ee8:	ldr	r3, [pc, #80]	; 18f40 <free_node_int@@Base+0xd8>
   18eec:	add	r3, pc, r3
   18ef0:	ldrd	r2, [r3, #16]
   18ef4:	adds	r4, r2, #1
   18ef8:	adc	r5, r3, #0
   18efc:	ldr	r3, [pc, #64]	; 18f44 <free_node_int@@Base+0xdc>
   18f00:	add	r3, pc, r3
   18f04:	strd	r4, [r3, #16]
   18f08:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18f0c:	bl	1184c <free@plt>
   18f10:	nop	{0}
   18f14:	sub	sp, fp, #28
   18f18:	ldrd	r4, [sp]
   18f1c:	ldrd	r6, [sp, #8]
   18f20:	ldrd	r8, [sp, #16]
   18f24:	ldr	fp, [sp, #24]
   18f28:	add	sp, sp, #28
   18f2c:	pop	{pc}		; (ldr pc, [sp], #4)
   18f30:	andeq	r7, r1, ip, ror r4
   18f34:	andeq	r7, r1, r8, ror #8
   18f38:	andeq	r7, r1, ip, asr #8
   18f3c:	andeq	r7, r1, r8, lsr r4
   18f40:	andeq	r7, r1, ip, lsl r4
   18f44:	andeq	r7, r1, r8, lsl #8

00018f48 <free_node_function@@Base>:
   18f48:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18f4c:	strd	r6, [sp, #8]
   18f50:	strd	r8, [sp, #16]
   18f54:	str	fp, [sp, #24]
   18f58:	str	lr, [sp, #28]
   18f5c:	add	fp, sp, #28
   18f60:	sub	sp, sp, #8
   18f64:	str	r0, [fp, #-32]	; 0xffffffe0
   18f68:	ldr	r3, [pc, #176]	; 19020 <free_node_function@@Base+0xd8>
   18f6c:	add	r3, pc, r3
   18f70:	ldrd	r2, [r3]
   18f74:	adds	r8, r2, #1
   18f78:	adc	r9, r3, #0
   18f7c:	ldr	r3, [pc, #160]	; 19024 <free_node_function@@Base+0xdc>
   18f80:	add	r3, pc, r3
   18f84:	strd	r8, [r3]
   18f88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18f8c:	ldr	r3, [r3, #4]
   18f90:	cmp	r3, #0
   18f94:	beq	18fe8 <free_node_function@@Base+0xa0>
   18f98:	ldr	r3, [pc, #136]	; 19028 <free_node_function@@Base+0xe0>
   18f9c:	add	r3, pc, r3
   18fa0:	ldrd	r2, [r3, #8]
   18fa4:	adds	r6, r2, #1
   18fa8:	adc	r7, r3, #0
   18fac:	ldr	r3, [pc, #120]	; 1902c <free_node_function@@Base+0xe4>
   18fb0:	add	r3, pc, r3
   18fb4:	strd	r6, [r3, #8]
   18fb8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18fbc:	ldr	r3, [r3, #4]
   18fc0:	mov	r0, r3
   18fc4:	bl	189cc <free_node@@Base>
   18fc8:	ldr	r3, [pc, #96]	; 19030 <free_node_function@@Base+0xe8>
   18fcc:	add	r3, pc, r3
   18fd0:	ldrd	r2, [r3, #16]
   18fd4:	adds	r4, r2, #1
   18fd8:	adc	r5, r3, #0
   18fdc:	ldr	r3, [pc, #80]	; 19034 <free_node_function@@Base+0xec>
   18fe0:	add	r3, pc, r3
   18fe4:	strd	r4, [r3, #16]
   18fe8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18fec:	ldr	r3, [r3, #8]
   18ff0:	mov	r0, r3
   18ff4:	bl	1184c <free@plt>
   18ff8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18ffc:	bl	1184c <free@plt>
   19000:	nop	{0}
   19004:	sub	sp, fp, #28
   19008:	ldrd	r4, [sp]
   1900c:	ldrd	r6, [sp, #8]
   19010:	ldrd	r8, [sp, #16]
   19014:	ldr	fp, [sp, #24]
   19018:	add	sp, sp, #28
   1901c:	pop	{pc}		; (ldr pc, [sp], #4)
   19020:	andeq	r7, r1, r4, lsl #7
   19024:	andeq	r7, r1, r0, ror r3
   19028:	andeq	r7, r1, r4, asr r3
   1902c:	andeq	r7, r1, r0, asr #6
   19030:	andeq	r7, r1, r4, lsr #6
   19034:	andeq	r7, r1, r0, lsl r3

00019038 <free_node_return@@Base>:
   19038:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1903c:	strd	r6, [sp, #8]
   19040:	strd	r8, [sp, #16]
   19044:	str	fp, [sp, #24]
   19048:	str	lr, [sp, #28]
   1904c:	add	fp, sp, #28
   19050:	sub	sp, sp, #8
   19054:	str	r0, [fp, #-32]	; 0xffffffe0
   19058:	ldr	r3, [pc, #160]	; 19100 <free_node_return@@Base+0xc8>
   1905c:	add	r3, pc, r3
   19060:	ldrd	r2, [r3]
   19064:	adds	r8, r2, #1
   19068:	adc	r9, r3, #0
   1906c:	ldr	r3, [pc, #144]	; 19104 <free_node_return@@Base+0xcc>
   19070:	add	r3, pc, r3
   19074:	strd	r8, [r3]
   19078:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1907c:	ldr	r3, [r3, #4]
   19080:	cmp	r3, #0
   19084:	beq	190d8 <free_node_return@@Base+0xa0>
   19088:	ldr	r3, [pc, #120]	; 19108 <free_node_return@@Base+0xd0>
   1908c:	add	r3, pc, r3
   19090:	ldrd	r2, [r3, #8]
   19094:	adds	r6, r2, #1
   19098:	adc	r7, r3, #0
   1909c:	ldr	r3, [pc, #104]	; 1910c <free_node_return@@Base+0xd4>
   190a0:	add	r3, pc, r3
   190a4:	strd	r6, [r3, #8]
   190a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   190ac:	ldr	r3, [r3, #4]
   190b0:	mov	r0, r3
   190b4:	bl	189cc <free_node@@Base>
   190b8:	ldr	r3, [pc, #80]	; 19110 <free_node_return@@Base+0xd8>
   190bc:	add	r3, pc, r3
   190c0:	ldrd	r2, [r3, #16]
   190c4:	adds	r4, r2, #1
   190c8:	adc	r5, r3, #0
   190cc:	ldr	r3, [pc, #64]	; 19114 <free_node_return@@Base+0xdc>
   190d0:	add	r3, pc, r3
   190d4:	strd	r4, [r3, #16]
   190d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   190dc:	bl	1184c <free@plt>
   190e0:	nop	{0}
   190e4:	sub	sp, fp, #28
   190e8:	ldrd	r4, [sp]
   190ec:	ldrd	r6, [sp, #8]
   190f0:	ldrd	r8, [sp, #16]
   190f4:	ldr	fp, [sp, #24]
   190f8:	add	sp, sp, #28
   190fc:	pop	{pc}		; (ldr pc, [sp], #4)
   19100:	andeq	r7, r1, ip, ror r2
   19104:	andeq	r7, r1, r8, ror #4
   19108:	andeq	r7, r1, ip, asr #4
   1910c:	andeq	r7, r1, r8, lsr r2
   19110:	andeq	r7, r1, ip, lsl r2
   19114:	andeq	r7, r1, r8, lsl #4

00019118 <free_node_if@@Base>:
   19118:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1911c:	strd	r6, [sp, #8]
   19120:	strd	r8, [sp, #16]
   19124:	str	fp, [sp, #24]
   19128:	str	lr, [sp, #28]
   1912c:	add	fp, sp, #28
   19130:	sub	sp, sp, #32
   19134:	str	r0, [fp, #-32]	; 0xffffffe0
   19138:	ldr	r3, [pc, #340]	; 19294 <free_node_if@@Base+0x17c>
   1913c:	add	r3, pc, r3
   19140:	ldrd	r2, [r3]
   19144:	adds	r1, r2, #1
   19148:	str	r1, [fp, #-44]	; 0xffffffd4
   1914c:	adc	r3, r3, #0
   19150:	str	r3, [fp, #-40]	; 0xffffffd8
   19154:	ldr	r3, [pc, #316]	; 19298 <free_node_if@@Base+0x180>
   19158:	add	r3, pc, r3
   1915c:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   19160:	strd	r0, [r3]
   19164:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19168:	ldr	r3, [r3, #4]
   1916c:	cmp	r3, #0
   19170:	beq	191dc <free_node_if@@Base+0xc4>
   19174:	ldr	r3, [pc, #288]	; 1929c <free_node_if@@Base+0x184>
   19178:	add	r3, pc, r3
   1917c:	ldrd	r2, [r3, #8]
   19180:	adds	r1, r2, #1
   19184:	str	r1, [fp, #-52]	; 0xffffffcc
   19188:	adc	r3, r3, #0
   1918c:	str	r3, [fp, #-48]	; 0xffffffd0
   19190:	ldr	r3, [pc, #264]	; 192a0 <free_node_if@@Base+0x188>
   19194:	add	r3, pc, r3
   19198:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   1919c:	strd	r0, [r3, #8]
   191a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   191a4:	ldr	r3, [r3, #4]
   191a8:	mov	r0, r3
   191ac:	bl	189cc <free_node@@Base>
   191b0:	ldr	r3, [pc, #236]	; 192a4 <free_node_if@@Base+0x18c>
   191b4:	add	r3, pc, r3
   191b8:	ldrd	r2, [r3, #16]
   191bc:	adds	r1, r2, #1
   191c0:	str	r1, [fp, #-60]	; 0xffffffc4
   191c4:	adc	r3, r3, #0
   191c8:	str	r3, [fp, #-56]	; 0xffffffc8
   191cc:	ldr	r3, [pc, #212]	; 192a8 <free_node_if@@Base+0x190>
   191d0:	add	r3, pc, r3
   191d4:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   191d8:	strd	r0, [r3, #16]
   191dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   191e0:	ldr	r3, [r3, #8]
   191e4:	mov	r0, r3
   191e8:	bl	189cc <free_node@@Base>
   191ec:	ldr	r3, [pc, #184]	; 192ac <free_node_if@@Base+0x194>
   191f0:	add	r3, pc, r3
   191f4:	ldrd	r2, [r3, #24]
   191f8:	adds	r8, r2, #1
   191fc:	adc	r9, r3, #0
   19200:	ldr	r3, [pc, #168]	; 192b0 <free_node_if@@Base+0x198>
   19204:	add	r3, pc, r3
   19208:	strd	r8, [r3, #24]
   1920c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19210:	ldr	r3, [r3, #12]
   19214:	mov	r0, r3
   19218:	bl	189cc <free_node@@Base>
   1921c:	ldr	r3, [pc, #144]	; 192b4 <free_node_if@@Base+0x19c>
   19220:	add	r3, pc, r3
   19224:	ldrd	r2, [r3, #32]
   19228:	adds	r6, r2, #1
   1922c:	adc	r7, r3, #0
   19230:	ldr	r3, [pc, #128]	; 192b8 <free_node_if@@Base+0x1a0>
   19234:	add	r3, pc, r3
   19238:	strd	r6, [r3, #32]
   1923c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19240:	ldr	r3, [r3, #16]
   19244:	mov	r0, r3
   19248:	bl	189cc <free_node@@Base>
   1924c:	ldr	r3, [pc, #104]	; 192bc <free_node_if@@Base+0x1a4>
   19250:	add	r3, pc, r3
   19254:	ldrd	r2, [r3, #40]	; 0x28
   19258:	adds	r4, r2, #1
   1925c:	adc	r5, r3, #0
   19260:	ldr	r3, [pc, #88]	; 192c0 <free_node_if@@Base+0x1a8>
   19264:	add	r3, pc, r3
   19268:	strd	r4, [r3, #40]	; 0x28
   1926c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19270:	bl	1184c <free@plt>
   19274:	nop	{0}
   19278:	sub	sp, fp, #28
   1927c:	ldrd	r4, [sp]
   19280:	ldrd	r6, [sp, #8]
   19284:	ldrd	r8, [sp, #16]
   19288:	ldr	fp, [sp, #24]
   1928c:	add	sp, sp, #28
   19290:	pop	{pc}		; (ldr pc, [sp], #4)
   19294:	andeq	r7, r1, ip, ror #2
   19298:	andeq	r7, r1, r0, asr r1
   1929c:	andeq	r7, r1, r0, lsr r1
   192a0:	andeq	r7, r1, r4, lsl r1
   192a4:	strdeq	r7, [r1], -r4
   192a8:	ldrdeq	r7, [r1], -r8
   192ac:	strheq	r7, [r1], -r8
   192b0:	andeq	r7, r1, r4, lsr #1
   192b4:	andeq	r7, r1, r8, lsl #1
   192b8:	andeq	r7, r1, r4, ror r0
   192bc:	andeq	r7, r1, r8, asr r0
   192c0:	andeq	r7, r1, r4, asr #32

000192c4 <free_node_boolean_operator@@Base>:
   192c4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   192c8:	strd	r6, [sp, #8]
   192cc:	strd	r8, [sp, #16]
   192d0:	str	fp, [sp, #24]
   192d4:	str	lr, [sp, #28]
   192d8:	add	fp, sp, #28
   192dc:	sub	sp, sp, #24
   192e0:	str	r0, [fp, #-32]	; 0xffffffe0
   192e4:	ldr	r3, [pc, #280]	; 19404 <free_node_boolean_operator@@Base+0x140>
   192e8:	add	r3, pc, r3
   192ec:	ldrd	r2, [r3]
   192f0:	adds	r1, r2, #1
   192f4:	str	r1, [fp, #-44]	; 0xffffffd4
   192f8:	adc	r3, r3, #0
   192fc:	str	r3, [fp, #-40]	; 0xffffffd8
   19300:	ldr	r3, [pc, #256]	; 19408 <free_node_boolean_operator@@Base+0x144>
   19304:	add	r3, pc, r3
   19308:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   1930c:	strd	r0, [r3]
   19310:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19314:	ldr	r3, [r3, #4]
   19318:	cmp	r3, #0
   1931c:	beq	1937c <free_node_boolean_operator@@Base+0xb8>
   19320:	ldr	r3, [pc, #228]	; 1940c <free_node_boolean_operator@@Base+0x148>
   19324:	add	r3, pc, r3
   19328:	ldrd	r2, [r3, #8]
   1932c:	adds	r1, r2, #1
   19330:	str	r1, [fp, #-52]	; 0xffffffcc
   19334:	adc	r3, r3, #0
   19338:	str	r3, [fp, #-48]	; 0xffffffd0
   1933c:	ldr	r3, [pc, #204]	; 19410 <free_node_boolean_operator@@Base+0x14c>
   19340:	add	r3, pc, r3
   19344:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   19348:	strd	r0, [r3, #8]
   1934c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19350:	ldr	r3, [r3, #4]
   19354:	mov	r0, r3
   19358:	bl	189cc <free_node@@Base>
   1935c:	ldr	r3, [pc, #176]	; 19414 <free_node_boolean_operator@@Base+0x150>
   19360:	add	r3, pc, r3
   19364:	ldrd	r2, [r3, #16]
   19368:	adds	r8, r2, #1
   1936c:	adc	r9, r3, #0
   19370:	ldr	r3, [pc, #160]	; 19418 <free_node_boolean_operator@@Base+0x154>
   19374:	add	r3, pc, r3
   19378:	strd	r8, [r3, #16]
   1937c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19380:	ldr	r3, [r3, #8]
   19384:	mov	r0, r3
   19388:	bl	189cc <free_node@@Base>
   1938c:	ldr	r3, [pc, #136]	; 1941c <free_node_boolean_operator@@Base+0x158>
   19390:	add	r3, pc, r3
   19394:	ldrd	r2, [r3, #24]
   19398:	adds	r6, r2, #1
   1939c:	adc	r7, r3, #0
   193a0:	ldr	r3, [pc, #120]	; 19420 <free_node_boolean_operator@@Base+0x15c>
   193a4:	add	r3, pc, r3
   193a8:	strd	r6, [r3, #24]
   193ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   193b0:	ldr	r3, [r3, #12]
   193b4:	mov	r0, r3
   193b8:	bl	189cc <free_node@@Base>
   193bc:	ldr	r3, [pc, #96]	; 19424 <free_node_boolean_operator@@Base+0x160>
   193c0:	add	r3, pc, r3
   193c4:	ldrd	r2, [r3, #32]
   193c8:	adds	r4, r2, #1
   193cc:	adc	r5, r3, #0
   193d0:	ldr	r3, [pc, #80]	; 19428 <free_node_boolean_operator@@Base+0x164>
   193d4:	add	r3, pc, r3
   193d8:	strd	r4, [r3, #32]
   193dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   193e0:	bl	1184c <free@plt>
   193e4:	nop	{0}
   193e8:	sub	sp, fp, #28
   193ec:	ldrd	r4, [sp]
   193f0:	ldrd	r6, [sp, #8]
   193f4:	ldrd	r8, [sp, #16]
   193f8:	ldr	fp, [sp, #24]
   193fc:	add	sp, sp, #28
   19400:	pop	{pc}		; (ldr pc, [sp], #4)
   19404:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   19408:	andeq	r6, r1, ip, ror pc
   1940c:	andeq	r6, r1, ip, asr pc
   19410:	andeq	r6, r1, r0, asr #30
   19414:	andeq	r6, r1, r0, lsr #30
   19418:	andeq	r6, r1, ip, lsl #30
   1941c:	strdeq	r6, [r1], -r0
   19420:	ldrdeq	r6, [r1], -ip
   19424:	andeq	r6, r1, r0, asr #29
   19428:	andeq	r6, r1, ip, lsr #29

0001942c <get_boolean_op_value@@Base>:
   1942c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19430:	strd	r6, [sp, #8]
   19434:	strd	r8, [sp, #16]
   19438:	strd	sl, [sp, #24]
   1943c:	str	lr, [sp, #32]
   19440:	add	fp, sp, #32
   19444:	sub	sp, sp, #100	; 0x64
   19448:	str	r0, [fp, #-48]	; 0xffffffd0
   1944c:	ldr	sl, [pc, #1048]	; 1986c <get_boolean_op_value@@Base+0x440>
   19450:	add	sl, pc, sl
   19454:	ldr	r3, [pc, #1044]	; 19870 <get_boolean_op_value@@Base+0x444>
   19458:	add	r3, pc, r3
   1945c:	ldrd	r2, [r3]
   19460:	adds	r4, r2, #1
   19464:	adc	r5, r3, #0
   19468:	ldr	r3, [pc, #1028]	; 19874 <get_boolean_op_value@@Base+0x448>
   1946c:	add	r3, pc, r3
   19470:	strd	r4, [r3]
   19474:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19478:	ldr	r3, [r3, #4]
   1947c:	mov	r1, #2
   19480:	mov	r0, r3
   19484:	bl	11948 <strnlen@plt>
   19488:	str	r0, [fp, #-40]	; 0xffffffd8
   1948c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19490:	cmp	r3, #2
   19494:	bne	19748 <get_boolean_op_value@@Base+0x31c>
   19498:	ldr	r3, [pc, #984]	; 19878 <get_boolean_op_value@@Base+0x44c>
   1949c:	add	r3, pc, r3
   194a0:	ldrd	r2, [r3, #8]
   194a4:	adds	r1, r2, #1
   194a8:	str	r1, [fp, #-60]	; 0xffffffc4
   194ac:	adc	r3, r3, #0
   194b0:	str	r3, [fp, #-56]	; 0xffffffc8
   194b4:	ldr	r3, [pc, #960]	; 1987c <get_boolean_op_value@@Base+0x450>
   194b8:	add	r3, pc, r3
   194bc:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   194c0:	strd	r0, [r3, #8]
   194c4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   194c8:	ldr	r0, [r3, #4]
   194cc:	mov	r2, #2
   194d0:	ldr	r3, [pc, #936]	; 19880 <get_boolean_op_value@@Base+0x454>
   194d4:	add	r3, pc, r3
   194d8:	mov	r1, r3
   194dc:	bl	11990 <strncmp@plt>
   194e0:	mov	r3, r0
   194e4:	cmp	r3, #0
   194e8:	bne	19520 <get_boolean_op_value@@Base+0xf4>
   194ec:	ldr	r3, [pc, #912]	; 19884 <get_boolean_op_value@@Base+0x458>
   194f0:	add	r3, pc, r3
   194f4:	ldrd	r2, [r3, #16]
   194f8:	adds	r1, r2, #1
   194fc:	str	r1, [fp, #-68]	; 0xffffffbc
   19500:	adc	r3, r3, #0
   19504:	str	r3, [fp, #-64]	; 0xffffffc0
   19508:	ldr	r3, [pc, #888]	; 19888 <get_boolean_op_value@@Base+0x45c>
   1950c:	add	r3, pc, r3
   19510:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   19514:	strd	r0, [r3, #16]
   19518:	mov	r3, #0
   1951c:	b	1984c <get_boolean_op_value@@Base+0x420>
   19520:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19524:	ldr	r0, [r3, #4]
   19528:	mov	r2, #2
   1952c:	ldr	r3, [pc, #856]	; 1988c <get_boolean_op_value@@Base+0x460>
   19530:	add	r3, pc, r3
   19534:	mov	r1, r3
   19538:	bl	11990 <strncmp@plt>
   1953c:	mov	r3, r0
   19540:	cmp	r3, #0
   19544:	bne	1957c <get_boolean_op_value@@Base+0x150>
   19548:	ldr	r3, [pc, #832]	; 19890 <get_boolean_op_value@@Base+0x464>
   1954c:	add	r3, pc, r3
   19550:	ldrd	r2, [r3, #24]
   19554:	adds	r1, r2, #1
   19558:	str	r1, [fp, #-76]	; 0xffffffb4
   1955c:	adc	r3, r3, #0
   19560:	str	r3, [fp, #-72]	; 0xffffffb8
   19564:	ldr	r3, [pc, #808]	; 19894 <get_boolean_op_value@@Base+0x468>
   19568:	add	r3, pc, r3
   1956c:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   19570:	strd	r0, [r3, #24]
   19574:	mov	r3, #1
   19578:	b	1984c <get_boolean_op_value@@Base+0x420>
   1957c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19580:	ldr	r0, [r3, #4]
   19584:	mov	r2, #2
   19588:	ldr	r3, [pc, #776]	; 19898 <get_boolean_op_value@@Base+0x46c>
   1958c:	add	r3, pc, r3
   19590:	mov	r1, r3
   19594:	bl	11990 <strncmp@plt>
   19598:	mov	r3, r0
   1959c:	cmp	r3, #0
   195a0:	bne	195d8 <get_boolean_op_value@@Base+0x1ac>
   195a4:	ldr	r3, [pc, #752]	; 1989c <get_boolean_op_value@@Base+0x470>
   195a8:	add	r3, pc, r3
   195ac:	ldrd	r2, [r3, #32]
   195b0:	adds	r1, r2, #1
   195b4:	str	r1, [fp, #-84]	; 0xffffffac
   195b8:	adc	r3, r3, #0
   195bc:	str	r3, [fp, #-80]	; 0xffffffb0
   195c0:	ldr	r3, [pc, #728]	; 198a0 <get_boolean_op_value@@Base+0x474>
   195c4:	add	r3, pc, r3
   195c8:	ldrd	r0, [fp, #-84]	; 0xffffffac
   195cc:	strd	r0, [r3, #32]
   195d0:	mov	r3, #2
   195d4:	b	1984c <get_boolean_op_value@@Base+0x420>
   195d8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   195dc:	ldr	r3, [r3, #4]
   195e0:	mov	r2, #2
   195e4:	ldr	r1, [pc, #696]	; 198a4 <get_boolean_op_value@@Base+0x478>
   195e8:	add	r1, pc, r1
   195ec:	mov	r0, r3
   195f0:	bl	11990 <strncmp@plt>
   195f4:	mov	r3, r0
   195f8:	cmp	r3, #0
   195fc:	bne	19634 <get_boolean_op_value@@Base+0x208>
   19600:	ldr	r3, [pc, #672]	; 198a8 <get_boolean_op_value@@Base+0x47c>
   19604:	add	r3, pc, r3
   19608:	ldrd	r2, [r3, #40]	; 0x28
   1960c:	adds	r1, r2, #1
   19610:	str	r1, [fp, #-92]	; 0xffffffa4
   19614:	adc	r3, r3, #0
   19618:	str	r3, [fp, #-88]	; 0xffffffa8
   1961c:	ldr	r3, [pc, #648]	; 198ac <get_boolean_op_value@@Base+0x480>
   19620:	add	r3, pc, r3
   19624:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   19628:	strd	r0, [r3, #40]	; 0x28
   1962c:	mov	r3, #3
   19630:	b	1984c <get_boolean_op_value@@Base+0x420>
   19634:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19638:	ldr	r3, [r3, #4]
   1963c:	mov	r2, #2
   19640:	ldr	r1, [pc, #616]	; 198b0 <get_boolean_op_value@@Base+0x484>
   19644:	add	r1, pc, r1
   19648:	mov	r0, r3
   1964c:	bl	11990 <strncmp@plt>
   19650:	mov	r3, r0
   19654:	cmp	r3, #0
   19658:	bne	19690 <get_boolean_op_value@@Base+0x264>
   1965c:	ldr	r3, [pc, #592]	; 198b4 <get_boolean_op_value@@Base+0x488>
   19660:	add	r3, pc, r3
   19664:	ldrd	r2, [r3, #48]	; 0x30
   19668:	adds	r1, r2, #1
   1966c:	str	r1, [fp, #-100]	; 0xffffff9c
   19670:	adc	r3, r3, #0
   19674:	str	r3, [fp, #-96]	; 0xffffffa0
   19678:	ldr	r3, [pc, #568]	; 198b8 <get_boolean_op_value@@Base+0x48c>
   1967c:	add	r3, pc, r3
   19680:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   19684:	strd	r0, [r3, #48]	; 0x30
   19688:	mov	r3, #4
   1968c:	b	1984c <get_boolean_op_value@@Base+0x420>
   19690:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19694:	ldr	r3, [r3, #4]
   19698:	mov	r2, #2
   1969c:	ldr	r1, [pc, #536]	; 198bc <get_boolean_op_value@@Base+0x490>
   196a0:	add	r1, pc, r1
   196a4:	mov	r0, r3
   196a8:	bl	11990 <strncmp@plt>
   196ac:	mov	r3, r0
   196b0:	cmp	r3, #0
   196b4:	bne	196ec <get_boolean_op_value@@Base+0x2c0>
   196b8:	ldr	r3, [pc, #512]	; 198c0 <get_boolean_op_value@@Base+0x494>
   196bc:	add	r3, pc, r3
   196c0:	ldrd	r2, [r3, #56]	; 0x38
   196c4:	adds	r1, r2, #1
   196c8:	str	r1, [fp, #-108]	; 0xffffff94
   196cc:	adc	r3, r3, #0
   196d0:	str	r3, [fp, #-104]	; 0xffffff98
   196d4:	ldr	r3, [pc, #488]	; 198c4 <get_boolean_op_value@@Base+0x498>
   196d8:	add	r3, pc, r3
   196dc:	ldrd	r0, [fp, #-108]	; 0xffffff94
   196e0:	strd	r0, [r3, #56]	; 0x38
   196e4:	mov	r3, #5
   196e8:	b	1984c <get_boolean_op_value@@Base+0x420>
   196ec:	ldr	r3, [pc, #468]	; 198c8 <get_boolean_op_value@@Base+0x49c>
   196f0:	ldr	r3, [sl, r3]
   196f4:	ldr	r0, [r3]
   196f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   196fc:	ldr	r3, [r3, #4]
   19700:	mov	r2, r3
   19704:	ldr	r3, [pc, #448]	; 198cc <get_boolean_op_value@@Base+0x4a0>
   19708:	add	r3, pc, r3
   1970c:	mov	r1, r3
   19710:	bl	11900 <fprintf@plt>
   19714:	ldr	r3, [pc, #436]	; 198d0 <get_boolean_op_value@@Base+0x4a4>
   19718:	add	r3, pc, r3
   1971c:	ldrd	r2, [r3, #64]	; 0x40
   19720:	adds	r1, r2, #1
   19724:	str	r1, [fp, #-116]	; 0xffffff8c
   19728:	adc	r3, r3, #0
   1972c:	str	r3, [fp, #-112]	; 0xffffff90
   19730:	ldr	r3, [pc, #412]	; 198d4 <get_boolean_op_value@@Base+0x4a8>
   19734:	add	r3, pc, r3
   19738:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   1973c:	strd	r0, [r3, #64]	; 0x40
   19740:	mov	r0, #1
   19744:	bl	118e8 <exit@plt>
   19748:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1974c:	ldr	r3, [r3, #4]
   19750:	ldrb	r3, [r3]
   19754:	cmp	r3, #60	; 0x3c
   19758:	beq	197a0 <get_boolean_op_value@@Base+0x374>
   1975c:	cmp	r3, #62	; 0x3e
   19760:	beq	197d4 <get_boolean_op_value@@Base+0x3a8>
   19764:	cmp	r3, #33	; 0x21
   19768:	bne	197fc <get_boolean_op_value@@Base+0x3d0>
   1976c:	ldr	r3, [pc, #356]	; 198d8 <get_boolean_op_value@@Base+0x4ac>
   19770:	add	r3, pc, r3
   19774:	ldrd	r2, [r3, #72]	; 0x48
   19778:	adds	r1, r2, #1
   1977c:	str	r1, [fp, #-124]	; 0xffffff84
   19780:	adc	r3, r3, #0
   19784:	str	r3, [fp, #-120]	; 0xffffff88
   19788:	ldr	r3, [pc, #332]	; 198dc <get_boolean_op_value@@Base+0x4b0>
   1978c:	add	r3, pc, r3
   19790:	ldrd	r0, [fp, #-124]	; 0xffffff84
   19794:	strd	r0, [r3, #72]	; 0x48
   19798:	mov	r3, #8
   1979c:	b	1984c <get_boolean_op_value@@Base+0x420>
   197a0:	ldr	r3, [pc, #312]	; 198e0 <get_boolean_op_value@@Base+0x4b4>
   197a4:	add	r3, pc, r3
   197a8:	ldrd	r2, [r3, #80]	; 0x50
   197ac:	adds	r1, r2, #1
   197b0:	str	r1, [fp, #-132]	; 0xffffff7c
   197b4:	adc	r3, r3, #0
   197b8:	str	r3, [fp, #-128]	; 0xffffff80
   197bc:	ldr	r3, [pc, #288]	; 198e4 <get_boolean_op_value@@Base+0x4b8>
   197c0:	add	r3, pc, r3
   197c4:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   197c8:	strd	r0, [r3, #80]	; 0x50
   197cc:	mov	r3, #6
   197d0:	b	1984c <get_boolean_op_value@@Base+0x420>
   197d4:	ldr	r3, [pc, #268]	; 198e8 <get_boolean_op_value@@Base+0x4bc>
   197d8:	add	r3, pc, r3
   197dc:	ldrd	r2, [r3, #88]	; 0x58
   197e0:	adds	r8, r2, #1
   197e4:	adc	r9, r3, #0
   197e8:	ldr	r3, [pc, #252]	; 198ec <get_boolean_op_value@@Base+0x4c0>
   197ec:	add	r3, pc, r3
   197f0:	strd	r8, [r3, #88]	; 0x58
   197f4:	mov	r3, #7
   197f8:	b	1984c <get_boolean_op_value@@Base+0x420>
   197fc:	ldr	r3, [pc, #196]	; 198c8 <get_boolean_op_value@@Base+0x49c>
   19800:	ldr	r3, [sl, r3]
   19804:	ldr	r0, [r3]
   19808:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1980c:	ldr	r3, [r3, #4]
   19810:	mov	r2, r3
   19814:	ldr	r3, [pc, #212]	; 198f0 <get_boolean_op_value@@Base+0x4c4>
   19818:	add	r3, pc, r3
   1981c:	mov	r1, r3
   19820:	bl	11900 <fprintf@plt>
   19824:	ldr	r3, [pc, #200]	; 198f4 <get_boolean_op_value@@Base+0x4c8>
   19828:	add	r3, pc, r3
   1982c:	ldrd	r2, [r3, #96]	; 0x60
   19830:	adds	r6, r2, #1
   19834:	adc	r7, r3, #0
   19838:	ldr	r3, [pc, #184]	; 198f8 <get_boolean_op_value@@Base+0x4cc>
   1983c:	add	r3, pc, r3
   19840:	strd	r6, [r3, #96]	; 0x60
   19844:	mov	r0, #1
   19848:	bl	118e8 <exit@plt>
   1984c:	mov	r0, r3
   19850:	sub	sp, fp, #32
   19854:	ldrd	r4, [sp]
   19858:	ldrd	r6, [sp, #8]
   1985c:	ldrd	r8, [sp, #16]
   19860:	ldrd	sl, [sp, #24]
   19864:	add	sp, sp, #32
   19868:	pop	{pc}		; (ldr pc, [sp], #4)
   1986c:	andeq	r5, r1, r8, lsr #23
   19870:	andeq	r6, r1, r0, asr #27
   19874:	andeq	r6, r1, ip, lsr #27
   19878:	andeq	r6, r1, ip, ror sp
   1987c:	andeq	r6, r1, r0, ror #26
   19880:	andeq	r4, r0, r4, ror #31
   19884:	andeq	r6, r1, r8, lsr #26
   19888:	andeq	r6, r1, ip, lsl #26
   1988c:	andeq	r4, r0, ip, lsl #31
   19890:	andeq	r6, r1, ip, asr #25
   19894:			; <UNDEFINED> instruction: 0x00016cb0
   19898:	andeq	r4, r0, r4, lsr pc
   1989c:	andeq	r6, r1, r0, ror ip
   198a0:	andeq	r6, r1, r4, asr ip
   198a4:	ldrdeq	r4, [r0], -ip
   198a8:	andeq	r6, r1, r4, lsl ip
   198ac:	strdeq	r6, [r1], -r8
   198b0:	andeq	r4, r0, r4, lsl #29
   198b4:			; <UNDEFINED> instruction: 0x00016bb8
   198b8:	muleq	r1, ip, fp
   198bc:	andeq	r4, r0, ip, lsr #28
   198c0:	andeq	r6, r1, ip, asr fp
   198c4:	andeq	r6, r1, r0, asr #22
   198c8:	andeq	r0, r0, r0, lsr #1
   198cc:	andeq	r4, r0, r8, asr #27
   198d0:	andeq	r6, r1, r0, lsl #22
   198d4:	andeq	r6, r1, r4, ror #21
   198d8:	andeq	r6, r1, r8, lsr #21
   198dc:	andeq	r6, r1, ip, lsl #21
   198e0:	andeq	r6, r1, r4, ror sl
   198e4:	andeq	r6, r1, r8, asr sl
   198e8:	andeq	r6, r1, r0, asr #20
   198ec:	andeq	r6, r1, ip, lsr #20
   198f0:			; <UNDEFINED> instruction: 0x00004cb8
   198f4:	strdeq	r6, [r1], -r0
   198f8:	ldrdeq	r6, [r1], -ip
   198fc:	str	fp, [sp, #-8]!
   19900:	str	lr, [sp, #4]
   19904:	add	fp, sp, #4
   19908:	ldr	r3, [pc, #24]	; 19928 <get_boolean_op_value@@Base+0x4fc>
   1990c:	add	r3, pc, r3
   19910:	mov	r0, r3
   19914:	bl	1da0c <__gcov_sort_n_vals@@Base+0x4a0>
   19918:	sub	sp, fp, #4
   1991c:	ldr	fp, [sp]
   19920:	add	sp, sp, #4
   19924:	pop	{pc}		; (ldr pc, [sp], #4)
   19928:	andeq	r5, r1, r4, asr #29
   1992c:	str	fp, [sp, #-8]!
   19930:	str	lr, [sp, #4]
   19934:	add	fp, sp, #4
   19938:	bl	1d99c <__gcov_sort_n_vals@@Base+0x430>
   1993c:	sub	sp, fp, #4
   19940:	ldr	fp, [sp]
   19944:	add	sp, sp, #4
   19948:	pop	{pc}		; (ldr pc, [sp], #4)

0001994c <init_grammar@@Base>:
   1994c:	strd	r4, [sp, #-12]!
   19950:	str	fp, [sp, #8]
   19954:	add	fp, sp, #8
   19958:	sub	sp, sp, #12
   1995c:	str	r0, [fp, #-16]
   19960:	str	r1, [fp, #-20]	; 0xffffffec
   19964:	ldr	r3, [pc, #60]	; 199a8 <init_grammar@@Base+0x5c>
   19968:	add	r3, pc, r3
   1996c:	ldrd	r2, [r3]
   19970:	adds	r4, r2, #1
   19974:	adc	r5, r3, #0
   19978:	ldr	r3, [pc, #44]	; 199ac <init_grammar@@Base+0x60>
   1997c:	add	r3, pc, r3
   19980:	strd	r4, [r3]
   19984:	ldr	r3, [fp, #-16]
   19988:	ldr	r2, [fp, #-20]	; 0xffffffec
   1998c:	str	r2, [r3]
   19990:	nop	{0}
   19994:	sub	sp, fp, #8
   19998:	ldrd	r4, [sp]
   1999c:	ldr	fp, [sp, #8]
   199a0:	add	sp, sp, #12
   199a4:	bx	lr
   199a8:	andeq	r6, r1, r8, lsl #28
   199ac:	strdeq	r6, [r1], -r4

000199b0 <destroy_grammar@@Base>:
   199b0:	strd	r4, [sp, #-12]!
   199b4:	str	fp, [sp, #8]
   199b8:	add	fp, sp, #8
   199bc:	sub	sp, sp, #12
   199c0:	str	r0, [fp, #-16]
   199c4:	ldr	r3, [pc, #48]	; 199fc <destroy_grammar@@Base+0x4c>
   199c8:	add	r3, pc, r3
   199cc:	ldrd	r2, [r3]
   199d0:	adds	r4, r2, #1
   199d4:	adc	r5, r3, #0
   199d8:	ldr	r3, [pc, #32]	; 19a00 <destroy_grammar@@Base+0x50>
   199dc:	add	r3, pc, r3
   199e0:	strd	r4, [r3]
   199e4:	nop	{0}
   199e8:	sub	sp, fp, #8
   199ec:	ldrd	r4, [sp]
   199f0:	ldr	fp, [sp, #8]
   199f4:	add	sp, sp, #12
   199f8:	bx	lr
   199fc:	andeq	r6, r1, r0, lsr #27
   19a00:	andeq	r6, r1, ip, lsl #27

00019a04 <build_ast@@Base>:
   19a04:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19a08:	strd	r6, [sp, #8]
   19a0c:	str	fp, [sp, #16]
   19a10:	str	lr, [sp, #20]
   19a14:	add	fp, sp, #20
   19a18:	sub	sp, sp, #8
   19a1c:	str	r0, [fp, #-24]	; 0xffffffe8
   19a20:	ldr	r3, [pc, #100]	; 19a8c <build_ast@@Base+0x88>
   19a24:	add	r3, pc, r3
   19a28:	ldrd	r2, [r3]
   19a2c:	adds	r6, r2, #1
   19a30:	adc	r7, r3, #0
   19a34:	ldr	r3, [pc, #84]	; 19a90 <build_ast@@Base+0x8c>
   19a38:	add	r3, pc, r3
   19a3c:	strd	r6, [r3]
   19a40:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19a44:	bl	19a9c <read_function_ast_node@@Base>
   19a48:	mov	r1, r0
   19a4c:	ldr	r3, [pc, #64]	; 19a94 <build_ast@@Base+0x90>
   19a50:	add	r3, pc, r3
   19a54:	ldrd	r2, [r3, #8]
   19a58:	adds	r4, r2, #1
   19a5c:	adc	r5, r3, #0
   19a60:	ldr	r3, [pc, #48]	; 19a98 <build_ast@@Base+0x94>
   19a64:	add	r3, pc, r3
   19a68:	strd	r4, [r3, #8]
   19a6c:	mov	r3, r1
   19a70:	mov	r0, r3
   19a74:	sub	sp, fp, #20
   19a78:	ldrd	r4, [sp]
   19a7c:	ldrd	r6, [sp, #8]
   19a80:	ldr	fp, [sp, #16]
   19a84:	add	sp, sp, #20
   19a88:	pop	{pc}		; (ldr pc, [sp], #4)
   19a8c:	andeq	r6, r1, r4, lsr sp
   19a90:	andeq	r6, r1, r0, lsr #26
   19a94:	andeq	r6, r1, r8, lsl #26
   19a98:	strdeq	r6, [r1], -r4

00019a9c <read_function_ast_node@@Base>:
   19a9c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19aa0:	strd	r6, [sp, #8]
   19aa4:	strd	r8, [sp, #16]
   19aa8:	str	fp, [sp, #24]
   19aac:	str	lr, [sp, #28]
   19ab0:	add	fp, sp, #28
   19ab4:	sub	sp, sp, #120	; 0x78
   19ab8:	str	r0, [fp, #-48]	; 0xffffffd0
   19abc:	ldr	r3, [pc, #956]	; 19e80 <read_function_ast_node@@Base+0x3e4>
   19ac0:	add	r3, pc, r3
   19ac4:	ldrd	r2, [r3]
   19ac8:	adds	r4, r2, #1
   19acc:	adc	r5, r3, #0
   19ad0:	ldr	r3, [pc, #940]	; 19e84 <read_function_ast_node@@Base+0x3e8>
   19ad4:	add	r3, pc, r3
   19ad8:	strd	r4, [r3]
   19adc:	mov	r3, #0
   19ae0:	str	r3, [fp, #-32]	; 0xffffffe0
   19ae4:	mov	r3, #0
   19ae8:	str	r3, [fp, #-36]	; 0xffffffdc
   19aec:	mov	r3, #0
   19af0:	str	r3, [fp, #-40]	; 0xffffffd8
   19af4:	mov	r3, #0
   19af8:	str	r3, [fp, #-44]	; 0xffffffd4
   19afc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19b00:	ldr	r3, [r3]
   19b04:	mov	r0, r3
   19b08:	bl	11ab0 <next@@Base>
   19b0c:	str	r0, [fp, #-40]	; 0xffffffd8
   19b10:	ldr	r3, [pc, #880]	; 19e88 <read_function_ast_node@@Base+0x3ec>
   19b14:	add	r3, pc, r3
   19b18:	ldrd	r2, [r3, #8]
   19b1c:	adds	r6, r2, #1
   19b20:	adc	r7, r3, #0
   19b24:	ldr	r3, [pc, #864]	; 19e8c <read_function_ast_node@@Base+0x3f0>
   19b28:	add	r3, pc, r3
   19b2c:	strd	r6, [r3, #8]
   19b30:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19b34:	ldr	r3, [r3]
   19b38:	cmp	r3, #0
   19b3c:	beq	19b68 <read_function_ast_node@@Base+0xcc>
   19b40:	mov	r1, #0
   19b44:	ldr	r3, [pc, #836]	; 19e90 <read_function_ast_node@@Base+0x3f4>
   19b48:	add	r3, pc, r3
   19b4c:	ldrd	r2, [r3, #16]
   19b50:	adds	r8, r2, #1
   19b54:	adc	r9, r3, #0
   19b58:	ldr	r3, [pc, #820]	; 19e94 <read_function_ast_node@@Base+0x3f8>
   19b5c:	add	r3, pc, r3
   19b60:	strd	r8, [r3, #16]
   19b64:	b	19e5c <read_function_ast_node@@Base+0x3c0>
   19b68:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19b6c:	bl	17ef0 <free_token_int_type@@Base>
   19b70:	ldr	r3, [pc, #800]	; 19e98 <read_function_ast_node@@Base+0x3fc>
   19b74:	add	r3, pc, r3
   19b78:	ldrd	r2, [r3, #24]
   19b7c:	adds	r1, r2, #1
   19b80:	str	r1, [fp, #-60]	; 0xffffffc4
   19b84:	adc	r3, r3, #0
   19b88:	str	r3, [fp, #-56]	; 0xffffffc8
   19b8c:	ldr	r3, [pc, #776]	; 19e9c <read_function_ast_node@@Base+0x400>
   19b90:	add	r3, pc, r3
   19b94:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   19b98:	strd	r0, [r3, #24]
   19b9c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19ba0:	ldr	r3, [r3]
   19ba4:	mov	r0, r3
   19ba8:	bl	11ab0 <next@@Base>
   19bac:	str	r0, [fp, #-40]	; 0xffffffd8
   19bb0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19bb4:	ldr	r3, [r3]
   19bb8:	cmp	r3, #2
   19bbc:	beq	19bf4 <read_function_ast_node@@Base+0x158>
   19bc0:	mov	r1, #0
   19bc4:	ldr	r3, [pc, #724]	; 19ea0 <read_function_ast_node@@Base+0x404>
   19bc8:	add	r3, pc, r3
   19bcc:	ldrd	r2, [r3, #40]	; 0x28
   19bd0:	adds	r0, r2, #1
   19bd4:	str	r0, [fp, #-76]	; 0xffffffb4
   19bd8:	adc	r3, r3, #0
   19bdc:	str	r3, [fp, #-72]	; 0xffffffb8
   19be0:	ldr	r3, [pc, #700]	; 19ea4 <read_function_ast_node@@Base+0x408>
   19be4:	add	r3, pc, r3
   19be8:	ldrd	r4, [fp, #-76]	; 0xffffffb4
   19bec:	strd	r4, [r3, #40]	; 0x28
   19bf0:	b	19e5c <read_function_ast_node@@Base+0x3c0>
   19bf4:	ldr	r3, [pc, #684]	; 19ea8 <read_function_ast_node@@Base+0x40c>
   19bf8:	add	r3, pc, r3
   19bfc:	ldrd	r2, [r3, #32]
   19c00:	adds	r1, r2, #1
   19c04:	str	r1, [fp, #-68]	; 0xffffffbc
   19c08:	adc	r3, r3, #0
   19c0c:	str	r3, [fp, #-64]	; 0xffffffc0
   19c10:	ldr	r3, [pc, #660]	; 19eac <read_function_ast_node@@Base+0x410>
   19c14:	add	r3, pc, r3
   19c18:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   19c1c:	strd	r0, [r3, #32]
   19c20:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19c24:	str	r3, [fp, #-44]	; 0xffffffd4
   19c28:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19c2c:	ldr	r3, [r3]
   19c30:	mov	r0, r3
   19c34:	bl	11ab0 <next@@Base>
   19c38:	str	r0, [fp, #-40]	; 0xffffffd8
   19c3c:	ldr	r3, [pc, #620]	; 19eb0 <read_function_ast_node@@Base+0x414>
   19c40:	add	r3, pc, r3
   19c44:	ldrd	r2, [r3, #48]	; 0x30
   19c48:	adds	r1, r2, #1
   19c4c:	str	r1, [fp, #-84]	; 0xffffffac
   19c50:	adc	r3, r3, #0
   19c54:	str	r3, [fp, #-80]	; 0xffffffb0
   19c58:	ldr	r3, [pc, #596]	; 19eb4 <read_function_ast_node@@Base+0x418>
   19c5c:	add	r3, pc, r3
   19c60:	ldrd	r0, [fp, #-84]	; 0xffffffac
   19c64:	strd	r0, [r3, #48]	; 0x30
   19c68:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19c6c:	ldr	r3, [r3]
   19c70:	cmp	r3, #3
   19c74:	beq	19cac <read_function_ast_node@@Base+0x210>
   19c78:	mov	r1, #0
   19c7c:	ldr	r3, [pc, #564]	; 19eb8 <read_function_ast_node@@Base+0x41c>
   19c80:	add	r3, pc, r3
   19c84:	ldrd	r2, [r3, #56]	; 0x38
   19c88:	adds	r0, r2, #1
   19c8c:	str	r0, [fp, #-92]	; 0xffffffa4
   19c90:	adc	r3, r3, #0
   19c94:	str	r3, [fp, #-88]	; 0xffffffa8
   19c98:	ldr	r3, [pc, #540]	; 19ebc <read_function_ast_node@@Base+0x420>
   19c9c:	add	r3, pc, r3
   19ca0:	ldrd	r4, [fp, #-92]	; 0xffffffa4
   19ca4:	strd	r4, [r3, #56]	; 0x38
   19ca8:	b	19e5c <read_function_ast_node@@Base+0x3c0>
   19cac:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19cb0:	bl	18010 <free_token_opar@@Base>
   19cb4:	ldr	r3, [pc, #516]	; 19ec0 <read_function_ast_node@@Base+0x424>
   19cb8:	add	r3, pc, r3
   19cbc:	ldrd	r2, [r3, #64]	; 0x40
   19cc0:	adds	r1, r2, #1
   19cc4:	str	r1, [fp, #-100]	; 0xffffff9c
   19cc8:	adc	r3, r3, #0
   19ccc:	str	r3, [fp, #-96]	; 0xffffffa0
   19cd0:	ldr	r3, [pc, #492]	; 19ec4 <read_function_ast_node@@Base+0x428>
   19cd4:	add	r3, pc, r3
   19cd8:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   19cdc:	strd	r0, [r3, #64]	; 0x40
   19ce0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19ce4:	ldr	r3, [r3]
   19ce8:	mov	r0, r3
   19cec:	bl	11ab0 <next@@Base>
   19cf0:	str	r0, [fp, #-40]	; 0xffffffd8
   19cf4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19cf8:	ldr	r3, [r3]
   19cfc:	cmp	r3, #4
   19d00:	beq	19d38 <read_function_ast_node@@Base+0x29c>
   19d04:	mov	r1, #0
   19d08:	ldr	r3, [pc, #440]	; 19ec8 <read_function_ast_node@@Base+0x42c>
   19d0c:	add	r3, pc, r3
   19d10:	ldrd	r2, [r3, #80]	; 0x50
   19d14:	adds	r0, r2, #1
   19d18:	str	r0, [fp, #-116]	; 0xffffff8c
   19d1c:	adc	r3, r3, #0
   19d20:	str	r3, [fp, #-112]	; 0xffffff90
   19d24:	ldr	r3, [pc, #416]	; 19ecc <read_function_ast_node@@Base+0x430>
   19d28:	add	r3, pc, r3
   19d2c:	ldrd	r4, [fp, #-116]	; 0xffffff8c
   19d30:	strd	r4, [r3, #80]	; 0x50
   19d34:	b	19e5c <read_function_ast_node@@Base+0x3c0>
   19d38:	ldr	r3, [pc, #400]	; 19ed0 <read_function_ast_node@@Base+0x434>
   19d3c:	add	r3, pc, r3
   19d40:	ldrd	r2, [r3, #72]	; 0x48
   19d44:	adds	r1, r2, #1
   19d48:	str	r1, [fp, #-108]	; 0xffffff94
   19d4c:	adc	r3, r3, #0
   19d50:	str	r3, [fp, #-104]	; 0xffffff98
   19d54:	ldr	r3, [pc, #376]	; 19ed4 <read_function_ast_node@@Base+0x438>
   19d58:	add	r3, pc, r3
   19d5c:	ldrd	r0, [fp, #-108]	; 0xffffff94
   19d60:	strd	r0, [r3, #72]	; 0x48
   19d64:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19d68:	bl	18070 <free_token_cpar@@Base>
   19d6c:	ldr	r3, [pc, #356]	; 19ed8 <read_function_ast_node@@Base+0x43c>
   19d70:	add	r3, pc, r3
   19d74:	ldrd	r2, [r3, #88]	; 0x58
   19d78:	adds	r1, r2, #1
   19d7c:	str	r1, [fp, #-124]	; 0xffffff84
   19d80:	adc	r3, r3, #0
   19d84:	str	r3, [fp, #-120]	; 0xffffff88
   19d88:	ldr	r3, [pc, #332]	; 19edc <read_function_ast_node@@Base+0x440>
   19d8c:	add	r3, pc, r3
   19d90:	ldrd	r0, [fp, #-124]	; 0xffffff84
   19d94:	strd	r0, [r3, #88]	; 0x58
   19d98:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19d9c:	bl	19ef8 <read_body@@Base>
   19da0:	str	r0, [fp, #-36]	; 0xffffffdc
   19da4:	ldr	r3, [pc, #308]	; 19ee0 <read_function_ast_node@@Base+0x444>
   19da8:	add	r3, pc, r3
   19dac:	ldrd	r2, [r3, #96]	; 0x60
   19db0:	adds	r1, r2, #1
   19db4:	str	r1, [fp, #-132]	; 0xffffff7c
   19db8:	adc	r3, r3, #0
   19dbc:	str	r3, [fp, #-128]	; 0xffffff80
   19dc0:	ldr	r3, [pc, #284]	; 19ee4 <read_function_ast_node@@Base+0x448>
   19dc4:	add	r3, pc, r3
   19dc8:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   19dcc:	strd	r0, [r3, #96]	; 0x60
   19dd0:	mov	r0, #16
   19dd4:	bl	118b8 <malloc@plt>
   19dd8:	mov	r3, r0
   19ddc:	str	r3, [fp, #-32]	; 0xffffffe0
   19de0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   19de4:	ldr	r3, [r3, #4]
   19de8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   19dec:	mov	r1, r3
   19df0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19df4:	bl	186d0 <init_node_function@@Base>
   19df8:	ldr	r3, [pc, #232]	; 19ee8 <read_function_ast_node@@Base+0x44c>
   19dfc:	add	r3, pc, r3
   19e00:	ldrd	r2, [r3, #104]	; 0x68
   19e04:	adds	r1, r2, #1
   19e08:	str	r1, [fp, #-140]	; 0xffffff74
   19e0c:	adc	r3, r3, #0
   19e10:	str	r3, [fp, #-136]	; 0xffffff78
   19e14:	ldr	r3, [pc, #208]	; 19eec <read_function_ast_node@@Base+0x450>
   19e18:	add	r3, pc, r3
   19e1c:	ldrd	r0, [fp, #-140]	; 0xffffff74
   19e20:	strd	r0, [r3, #104]	; 0x68
   19e24:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19e28:	bl	17fb0 <free_token_function@@Base>
   19e2c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   19e30:	ldr	r3, [pc, #184]	; 19ef0 <read_function_ast_node@@Base+0x454>
   19e34:	add	r3, pc, r3
   19e38:	ldrd	r2, [r3, #112]	; 0x70
   19e3c:	adds	r0, r2, #1
   19e40:	str	r0, [fp, #-148]	; 0xffffff6c
   19e44:	adc	r3, r3, #0
   19e48:	str	r3, [fp, #-144]	; 0xffffff70
   19e4c:	ldr	r3, [pc, #160]	; 19ef4 <read_function_ast_node@@Base+0x458>
   19e50:	add	r3, pc, r3
   19e54:	ldrd	r4, [fp, #-148]	; 0xffffff6c
   19e58:	strd	r4, [r3, #112]	; 0x70
   19e5c:	mov	r3, r1
   19e60:	mov	r0, r3
   19e64:	sub	sp, fp, #28
   19e68:	ldrd	r4, [sp]
   19e6c:	ldrd	r6, [sp, #8]
   19e70:	ldrd	r8, [sp, #16]
   19e74:	ldr	fp, [sp, #24]
   19e78:	add	sp, sp, #28
   19e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   19e80:	andeq	r6, r1, r0, lsr #24
   19e84:	andeq	r6, r1, ip, lsl #24
   19e88:	andeq	r6, r1, ip, asr #23
   19e8c:			; <UNDEFINED> instruction: 0x00016bb8
   19e90:	muleq	r1, r8, fp
   19e94:	andeq	r6, r1, r4, lsl #23
   19e98:	andeq	r6, r1, ip, ror #22
   19e9c:	andeq	r6, r1, r0, asr fp
   19ea0:	andeq	r6, r1, r8, lsl fp
   19ea4:	strdeq	r6, [r1], -ip
   19ea8:	andeq	r6, r1, r8, ror #21
   19eac:	andeq	r6, r1, ip, asr #21
   19eb0:	andeq	r6, r1, r0, lsr #21
   19eb4:	andeq	r6, r1, r4, lsl #21
   19eb8:	andeq	r6, r1, r0, ror #20
   19ebc:	andeq	r6, r1, r4, asr #20
   19ec0:	andeq	r6, r1, r8, lsr #20
   19ec4:	andeq	r6, r1, ip, lsl #20
   19ec8:	ldrdeq	r6, [r1], -r4
   19ecc:			; <UNDEFINED> instruction: 0x000169b8
   19ed0:	andeq	r6, r1, r4, lsr #19
   19ed4:	andeq	r6, r1, r8, lsl #19
   19ed8:	andeq	r6, r1, r0, ror r9
   19edc:	andeq	r6, r1, r4, asr r9
   19ee0:	andeq	r6, r1, r8, lsr r9
   19ee4:	andeq	r6, r1, ip, lsl r9
   19ee8:	andeq	r6, r1, r4, ror #17
   19eec:	andeq	r6, r1, r8, asr #17
   19ef0:	andeq	r6, r1, ip, lsr #17
   19ef4:	muleq	r1, r0, r8

00019ef8 <read_body@@Base>:
   19ef8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19efc:	strd	r6, [sp, #8]
   19f00:	strd	r8, [sp, #16]
   19f04:	str	fp, [sp, #24]
   19f08:	str	lr, [sp, #28]
   19f0c:	add	fp, sp, #28
   19f10:	sub	sp, sp, #128	; 0x80
   19f14:	str	r0, [fp, #-48]	; 0xffffffd0
   19f18:	ldr	r3, [pc, #1016]	; 1a318 <read_body@@Base+0x420>
   19f1c:	add	r3, pc, r3
   19f20:	ldrd	r2, [r3]
   19f24:	adds	r4, r2, #1
   19f28:	adc	r5, r3, #0
   19f2c:	ldr	r3, [pc, #1000]	; 1a31c <read_body@@Base+0x424>
   19f30:	add	r3, pc, r3
   19f34:	strd	r4, [r3]
   19f38:	mov	r3, #0
   19f3c:	str	r3, [fp, #-32]	; 0xffffffe0
   19f40:	mov	r3, #0
   19f44:	str	r3, [fp, #-36]	; 0xffffffdc
   19f48:	mov	r3, #0
   19f4c:	str	r3, [fp, #-40]	; 0xffffffd8
   19f50:	mov	r3, #0
   19f54:	str	r3, [fp, #-44]	; 0xffffffd4
   19f58:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19f5c:	ldr	r3, [r3]
   19f60:	mov	r0, r3
   19f64:	bl	11ab0 <next@@Base>
   19f68:	str	r0, [fp, #-44]	; 0xffffffd4
   19f6c:	ldr	r3, [pc, #940]	; 1a320 <read_body@@Base+0x428>
   19f70:	add	r3, pc, r3
   19f74:	ldrd	r2, [r3, #8]
   19f78:	adds	r6, r2, #1
   19f7c:	adc	r7, r3, #0
   19f80:	ldr	r3, [pc, #924]	; 1a324 <read_body@@Base+0x42c>
   19f84:	add	r3, pc, r3
   19f88:	strd	r6, [r3, #8]
   19f8c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   19f90:	ldr	r3, [r3]
   19f94:	cmp	r3, #5
   19f98:	beq	19fc4 <read_body@@Base+0xcc>
   19f9c:	mov	r1, #0
   19fa0:	ldr	r3, [pc, #896]	; 1a328 <read_body@@Base+0x430>
   19fa4:	add	r3, pc, r3
   19fa8:	ldrd	r2, [r3, #16]
   19fac:	adds	r8, r2, #1
   19fb0:	adc	r9, r3, #0
   19fb4:	ldr	r3, [pc, #880]	; 1a32c <read_body@@Base+0x434>
   19fb8:	add	r3, pc, r3
   19fbc:	strd	r8, [r3, #16]
   19fc0:	b	1a2f4 <read_body@@Base+0x3fc>
   19fc4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19fc8:	bl	180d0 <free_token_obra@@Base>
   19fcc:	ldr	r3, [pc, #860]	; 1a330 <read_body@@Base+0x438>
   19fd0:	add	r3, pc, r3
   19fd4:	ldrd	r2, [r3, #24]
   19fd8:	adds	r1, r2, #1
   19fdc:	str	r1, [fp, #-60]	; 0xffffffc4
   19fe0:	adc	r3, r3, #0
   19fe4:	str	r3, [fp, #-56]	; 0xffffffc8
   19fe8:	ldr	r3, [pc, #836]	; 1a334 <read_body@@Base+0x43c>
   19fec:	add	r3, pc, r3
   19ff0:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   19ff4:	strd	r0, [r3, #24]
   19ff8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19ffc:	ldr	r3, [r3]
   1a000:	mov	r0, r3
   1a004:	bl	11ab0 <next@@Base>
   1a008:	str	r0, [fp, #-44]	; 0xffffffd4
   1a00c:	nop	{0}
   1a010:	ldr	r3, [pc, #800]	; 1a338 <read_body@@Base+0x440>
   1a014:	add	r3, pc, r3
   1a018:	ldrd	r2, [r3, #32]
   1a01c:	adds	r1, r2, #1
   1a020:	str	r1, [fp, #-68]	; 0xffffffbc
   1a024:	adc	r3, r3, #0
   1a028:	str	r3, [fp, #-64]	; 0xffffffc0
   1a02c:	ldr	r3, [pc, #776]	; 1a33c <read_body@@Base+0x444>
   1a030:	add	r3, pc, r3
   1a034:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   1a038:	strd	r0, [r3, #32]
   1a03c:	b	1a280 <read_body@@Base+0x388>
   1a040:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a044:	ldr	r3, [r3]
   1a048:	cmp	r3, #7
   1a04c:	beq	1a05c <read_body@@Base+0x164>
   1a050:	cmp	r3, #10
   1a054:	beq	1a0fc <read_body@@Base+0x204>
   1a058:	b	1a16c <read_body@@Base+0x274>
   1a05c:	ldr	r3, [pc, #732]	; 1a340 <read_body@@Base+0x448>
   1a060:	add	r3, pc, r3
   1a064:	ldrd	r2, [r3, #48]	; 0x30
   1a068:	adds	r1, r2, #1
   1a06c:	str	r1, [fp, #-84]	; 0xffffffac
   1a070:	adc	r3, r3, #0
   1a074:	str	r3, [fp, #-80]	; 0xffffffb0
   1a078:	ldr	r3, [pc, #708]	; 1a344 <read_body@@Base+0x44c>
   1a07c:	add	r3, pc, r3
   1a080:	ldrd	r0, [fp, #-84]	; 0xffffffac
   1a084:	strd	r0, [r3, #48]	; 0x30
   1a088:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a08c:	bl	18190 <free_token_return@@Base>
   1a090:	ldr	r3, [pc, #688]	; 1a348 <read_body@@Base+0x450>
   1a094:	add	r3, pc, r3
   1a098:	ldrd	r2, [r3, #64]	; 0x40
   1a09c:	adds	r1, r2, #1
   1a0a0:	str	r1, [fp, #-100]	; 0xffffff9c
   1a0a4:	adc	r3, r3, #0
   1a0a8:	str	r3, [fp, #-96]	; 0xffffffa0
   1a0ac:	ldr	r3, [pc, #664]	; 1a34c <read_body@@Base+0x454>
   1a0b0:	add	r3, pc, r3
   1a0b4:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   1a0b8:	strd	r0, [r3, #64]	; 0x40
   1a0bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1a0c0:	bl	1a398 <read_return_expression@@Base>
   1a0c4:	str	r0, [fp, #-36]	; 0xffffffdc
   1a0c8:	nop	{0}
   1a0cc:	ldr	r3, [pc, #636]	; 1a350 <read_body@@Base+0x458>
   1a0d0:	add	r3, pc, r3
   1a0d4:	ldrd	r2, [r3, #72]	; 0x48
   1a0d8:	adds	r1, r2, #1
   1a0dc:	str	r1, [fp, #-108]	; 0xffffff94
   1a0e0:	adc	r3, r3, #0
   1a0e4:	str	r3, [fp, #-104]	; 0xffffff98
   1a0e8:	ldr	r3, [pc, #612]	; 1a354 <read_body@@Base+0x45c>
   1a0ec:	add	r3, pc, r3
   1a0f0:	ldrd	r0, [fp, #-108]	; 0xffffff94
   1a0f4:	strd	r0, [r3, #72]	; 0x48
   1a0f8:	b	1a1e0 <read_body@@Base+0x2e8>
   1a0fc:	ldr	r3, [pc, #596]	; 1a358 <read_body@@Base+0x460>
   1a100:	add	r3, pc, r3
   1a104:	ldrd	r2, [r3, #56]	; 0x38
   1a108:	adds	r1, r2, #1
   1a10c:	str	r1, [fp, #-92]	; 0xffffffa4
   1a110:	adc	r3, r3, #0
   1a114:	str	r3, [fp, #-88]	; 0xffffffa8
   1a118:	ldr	r3, [pc, #572]	; 1a35c <read_body@@Base+0x464>
   1a11c:	add	r3, pc, r3
   1a120:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   1a124:	strd	r0, [r3, #56]	; 0x38
   1a128:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a12c:	bl	182b0 <free_token_if@@Base>
   1a130:	ldr	r3, [pc, #552]	; 1a360 <read_body@@Base+0x468>
   1a134:	add	r3, pc, r3
   1a138:	ldrd	r2, [r3, #80]	; 0x50
   1a13c:	adds	r1, r2, #1
   1a140:	str	r1, [fp, #-116]	; 0xffffff8c
   1a144:	adc	r3, r3, #0
   1a148:	str	r3, [fp, #-112]	; 0xffffff90
   1a14c:	ldr	r3, [pc, #528]	; 1a364 <read_body@@Base+0x46c>
   1a150:	add	r3, pc, r3
   1a154:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   1a158:	strd	r0, [r3, #80]	; 0x50
   1a15c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1a160:	bl	1a660 <read_if_statement@@Base>
   1a164:	str	r0, [fp, #-36]	; 0xffffffdc
   1a168:	b	1a1e0 <read_body@@Base+0x2e8>
   1a16c:	ldr	r3, [pc, #500]	; 1a368 <read_body@@Base+0x470>
   1a170:	add	r3, pc, r3
   1a174:	ldrd	r2, [r3, #40]	; 0x28
   1a178:	adds	r1, r2, #1
   1a17c:	str	r1, [fp, #-76]	; 0xffffffb4
   1a180:	adc	r3, r3, #0
   1a184:	str	r3, [fp, #-72]	; 0xffffffb8
   1a188:	ldr	r3, [pc, #476]	; 1a36c <read_body@@Base+0x474>
   1a18c:	add	r3, pc, r3
   1a190:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   1a194:	strd	r0, [r3, #40]	; 0x28
   1a198:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a19c:	ldr	r3, [r3]
   1a1a0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1a1a4:	mov	r0, r3
   1a1a8:	bl	11e80 <push_back@@Base>
   1a1ac:	ldr	r3, [pc, #444]	; 1a370 <read_body@@Base+0x478>
   1a1b0:	add	r3, pc, r3
   1a1b4:	ldrd	r2, [r3, #88]	; 0x58
   1a1b8:	adds	r1, r2, #1
   1a1bc:	str	r1, [fp, #-124]	; 0xffffff84
   1a1c0:	adc	r3, r3, #0
   1a1c4:	str	r3, [fp, #-120]	; 0xffffff88
   1a1c8:	ldr	r3, [pc, #420]	; 1a374 <read_body@@Base+0x47c>
   1a1cc:	add	r3, pc, r3
   1a1d0:	ldrd	r0, [fp, #-124]	; 0xffffff84
   1a1d4:	strd	r0, [r3, #88]	; 0x58
   1a1d8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1a1dc:	b	1a2f4 <read_body@@Base+0x3fc>
   1a1e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a1e4:	cmp	r3, #0
   1a1e8:	beq	1a230 <read_body@@Base+0x338>
   1a1ec:	ldr	r3, [pc, #388]	; 1a378 <read_body@@Base+0x480>
   1a1f0:	add	r3, pc, r3
   1a1f4:	ldrd	r2, [r3, #96]	; 0x60
   1a1f8:	adds	r1, r2, #1
   1a1fc:	str	r1, [fp, #-132]	; 0xffffff7c
   1a200:	adc	r3, r3, #0
   1a204:	str	r3, [fp, #-128]	; 0xffffff80
   1a208:	ldr	r3, [pc, #364]	; 1a37c <read_body@@Base+0x484>
   1a20c:	add	r3, pc, r3
   1a210:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   1a214:	strd	r0, [r3, #96]	; 0x60
   1a218:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a21c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a220:	str	r3, [r2, #4]
   1a224:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a228:	str	r3, [fp, #-40]	; 0xffffffd8
   1a22c:	b	1a26c <read_body@@Base+0x374>
   1a230:	ldr	r3, [pc, #328]	; 1a380 <read_body@@Base+0x488>
   1a234:	add	r3, pc, r3
   1a238:	ldrd	r2, [r3, #104]	; 0x68
   1a23c:	adds	r1, r2, #1
   1a240:	str	r1, [fp, #-140]	; 0xffffff74
   1a244:	adc	r3, r3, #0
   1a248:	str	r3, [fp, #-136]	; 0xffffff78
   1a24c:	ldr	r3, [pc, #304]	; 1a384 <read_body@@Base+0x48c>
   1a250:	add	r3, pc, r3
   1a254:	ldrd	r0, [fp, #-140]	; 0xffffff74
   1a258:	strd	r0, [r3, #104]	; 0x68
   1a25c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a260:	str	r3, [fp, #-32]	; 0xffffffe0
   1a264:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a268:	str	r3, [fp, #-40]	; 0xffffffd8
   1a26c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a270:	ldr	r3, [r3]
   1a274:	mov	r0, r3
   1a278:	bl	11ab0 <next@@Base>
   1a27c:	str	r0, [fp, #-44]	; 0xffffffd4
   1a280:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a284:	ldr	r3, [r3]
   1a288:	cmp	r3, #6
   1a28c:	bne	1a040 <read_body@@Base+0x148>
   1a290:	ldr	r3, [pc, #240]	; 1a388 <read_body@@Base+0x490>
   1a294:	add	r3, pc, r3
   1a298:	ldrd	r2, [r3, #112]	; 0x70
   1a29c:	adds	r1, r2, #1
   1a2a0:	str	r1, [fp, #-148]	; 0xffffff6c
   1a2a4:	adc	r3, r3, #0
   1a2a8:	str	r3, [fp, #-144]	; 0xffffff70
   1a2ac:	ldr	r3, [pc, #216]	; 1a38c <read_body@@Base+0x494>
   1a2b0:	add	r3, pc, r3
   1a2b4:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   1a2b8:	strd	r0, [r3, #112]	; 0x70
   1a2bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a2c0:	bl	18130 <free_token_cbra@@Base>
   1a2c4:	ldr	r3, [pc, #196]	; 1a390 <read_body@@Base+0x498>
   1a2c8:	add	r3, pc, r3
   1a2cc:	ldrd	r2, [r3, #120]	; 0x78
   1a2d0:	adds	r1, r2, #1
   1a2d4:	str	r1, [fp, #-156]	; 0xffffff64
   1a2d8:	adc	r3, r3, #0
   1a2dc:	str	r3, [fp, #-152]	; 0xffffff68
   1a2e0:	ldr	r3, [pc, #172]	; 1a394 <read_body@@Base+0x49c>
   1a2e4:	add	r3, pc, r3
   1a2e8:	ldrd	r0, [fp, #-156]	; 0xffffff64
   1a2ec:	strd	r0, [r3, #120]	; 0x78
   1a2f0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1a2f4:	mov	r3, r1
   1a2f8:	mov	r0, r3
   1a2fc:	sub	sp, fp, #28
   1a300:	ldrd	r4, [sp]
   1a304:	ldrd	r6, [sp, #8]
   1a308:	ldrd	r8, [sp, #16]
   1a30c:	ldr	fp, [sp, #24]
   1a310:	add	sp, sp, #28
   1a314:	pop	{pc}		; (ldr pc, [sp], #4)
   1a318:	andeq	r6, r1, r4, asr #14
   1a31c:	andeq	r6, r1, r0, lsr r7
   1a320:	strdeq	r6, [r1], -r0
   1a324:	ldrdeq	r6, [r1], -ip
   1a328:			; <UNDEFINED> instruction: 0x000166bc
   1a32c:	andeq	r6, r1, r8, lsr #13
   1a330:	muleq	r1, r0, r6
   1a334:	andeq	r6, r1, r4, ror r6
   1a338:	andeq	r6, r1, ip, asr #12
   1a33c:	andeq	r6, r1, r0, lsr r6
   1a340:	andeq	r6, r1, r0, lsl #12
   1a344:	andeq	r6, r1, r4, ror #11
   1a348:	andeq	r6, r1, ip, asr #11
   1a34c:			; <UNDEFINED> instruction: 0x000165b0
   1a350:	muleq	r1, r0, r5
   1a354:	andeq	r6, r1, r4, ror r5
   1a358:	andeq	r6, r1, r0, ror #10
   1a35c:	andeq	r6, r1, r4, asr #10
   1a360:	andeq	r6, r1, ip, lsr #10
   1a364:	andeq	r6, r1, r0, lsl r5
   1a368:	strdeq	r6, [r1], -r0
   1a36c:	ldrdeq	r6, [r1], -r4
   1a370:			; <UNDEFINED> instruction: 0x000164b0
   1a374:	muleq	r1, r4, r4
   1a378:	andeq	r6, r1, r0, ror r4
   1a37c:	andeq	r6, r1, r4, asr r4
   1a380:	andeq	r6, r1, ip, lsr #8
   1a384:	andeq	r6, r1, r0, lsl r4
   1a388:	andeq	r6, r1, ip, asr #7
   1a38c:			; <UNDEFINED> instruction: 0x000163b0
   1a390:	muleq	r1, r8, r3
   1a394:	andeq	r6, r1, ip, ror r3

0001a398 <read_return_expression@@Base>:
   1a398:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a39c:	strd	r6, [sp, #8]
   1a3a0:	strd	r8, [sp, #16]
   1a3a4:	str	fp, [sp, #24]
   1a3a8:	str	lr, [sp, #28]
   1a3ac:	add	fp, sp, #28
   1a3b0:	sub	sp, sp, #72	; 0x48
   1a3b4:	str	r0, [fp, #-48]	; 0xffffffd0
   1a3b8:	ldr	r3, [pc, #600]	; 1a618 <read_return_expression@@Base+0x280>
   1a3bc:	add	r3, pc, r3
   1a3c0:	ldrd	r2, [r3]
   1a3c4:	adds	r4, r2, #1
   1a3c8:	adc	r5, r3, #0
   1a3cc:	ldr	r3, [pc, #584]	; 1a61c <read_return_expression@@Base+0x284>
   1a3d0:	add	r3, pc, r3
   1a3d4:	strd	r4, [r3]
   1a3d8:	mov	r3, #0
   1a3dc:	str	r3, [fp, #-32]	; 0xffffffe0
   1a3e0:	mov	r3, #0
   1a3e4:	str	r3, [fp, #-36]	; 0xffffffdc
   1a3e8:	mov	r3, #0
   1a3ec:	str	r3, [fp, #-40]	; 0xffffffd8
   1a3f0:	mov	r3, #0
   1a3f4:	str	r3, [fp, #-44]	; 0xffffffd4
   1a3f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a3fc:	ldr	r3, [r3]
   1a400:	mov	r0, r3
   1a404:	bl	11ab0 <next@@Base>
   1a408:	str	r0, [fp, #-40]	; 0xffffffd8
   1a40c:	ldr	r3, [pc, #524]	; 1a620 <read_return_expression@@Base+0x288>
   1a410:	add	r3, pc, r3
   1a414:	ldrd	r2, [r3, #8]
   1a418:	adds	r6, r2, #1
   1a41c:	adc	r7, r3, #0
   1a420:	ldr	r3, [pc, #508]	; 1a624 <read_return_expression@@Base+0x28c>
   1a424:	add	r3, pc, r3
   1a428:	strd	r6, [r3, #8]
   1a42c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a430:	ldr	r3, [r3]
   1a434:	cmp	r3, #1
   1a438:	beq	1a464 <read_return_expression@@Base+0xcc>
   1a43c:	mov	r1, #0
   1a440:	ldr	r3, [pc, #480]	; 1a628 <read_return_expression@@Base+0x290>
   1a444:	add	r3, pc, r3
   1a448:	ldrd	r2, [r3, #16]
   1a44c:	adds	r8, r2, #1
   1a450:	adc	r9, r3, #0
   1a454:	ldr	r3, [pc, #464]	; 1a62c <read_return_expression@@Base+0x294>
   1a458:	add	r3, pc, r3
   1a45c:	strd	r8, [r3, #16]
   1a460:	b	1a5f4 <read_return_expression@@Base+0x25c>
   1a464:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a468:	str	r3, [fp, #-44]	; 0xffffffd4
   1a46c:	mov	r0, #12
   1a470:	bl	118b8 <malloc@plt>
   1a474:	mov	r3, r0
   1a478:	str	r3, [fp, #-36]	; 0xffffffdc
   1a47c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a480:	ldr	r3, [r3, #4]
   1a484:	mov	r1, r3
   1a488:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a48c:	bl	18628 <init_node_int@@Base>
   1a490:	ldr	r3, [pc, #408]	; 1a630 <read_return_expression@@Base+0x298>
   1a494:	add	r3, pc, r3
   1a498:	ldrd	r2, [r3, #24]
   1a49c:	adds	r1, r2, #1
   1a4a0:	str	r1, [fp, #-60]	; 0xffffffc4
   1a4a4:	adc	r3, r3, #0
   1a4a8:	str	r3, [fp, #-56]	; 0xffffffc8
   1a4ac:	ldr	r3, [pc, #384]	; 1a634 <read_return_expression@@Base+0x29c>
   1a4b0:	add	r3, pc, r3
   1a4b4:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   1a4b8:	strd	r0, [r3, #24]
   1a4bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a4c0:	bl	17f50 <free_token_int_value@@Base>
   1a4c4:	ldr	r3, [pc, #364]	; 1a638 <read_return_expression@@Base+0x2a0>
   1a4c8:	add	r3, pc, r3
   1a4cc:	ldrd	r2, [r3, #32]
   1a4d0:	adds	r1, r2, #1
   1a4d4:	str	r1, [fp, #-68]	; 0xffffffbc
   1a4d8:	adc	r3, r3, #0
   1a4dc:	str	r3, [fp, #-64]	; 0xffffffc0
   1a4e0:	ldr	r3, [pc, #340]	; 1a63c <read_return_expression@@Base+0x2a4>
   1a4e4:	add	r3, pc, r3
   1a4e8:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   1a4ec:	strd	r0, [r3, #32]
   1a4f0:	mov	r0, #12
   1a4f4:	bl	118b8 <malloc@plt>
   1a4f8:	mov	r3, r0
   1a4fc:	str	r3, [fp, #-32]	; 0xffffffe0
   1a500:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a504:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a508:	bl	18788 <init_node_return@@Base>
   1a50c:	ldr	r3, [pc, #300]	; 1a640 <read_return_expression@@Base+0x2a8>
   1a510:	add	r3, pc, r3
   1a514:	ldrd	r2, [r3, #40]	; 0x28
   1a518:	adds	r1, r2, #1
   1a51c:	str	r1, [fp, #-76]	; 0xffffffb4
   1a520:	adc	r3, r3, #0
   1a524:	str	r3, [fp, #-72]	; 0xffffffb8
   1a528:	ldr	r3, [pc, #276]	; 1a644 <read_return_expression@@Base+0x2ac>
   1a52c:	add	r3, pc, r3
   1a530:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   1a534:	strd	r0, [r3, #40]	; 0x28
   1a538:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a53c:	ldr	r3, [r3]
   1a540:	mov	r0, r3
   1a544:	bl	11ab0 <next@@Base>
   1a548:	str	r0, [fp, #-40]	; 0xffffffd8
   1a54c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a550:	ldr	r3, [r3]
   1a554:	cmp	r3, #8
   1a558:	beq	1a590 <read_return_expression@@Base+0x1f8>
   1a55c:	mov	r1, #0
   1a560:	ldr	r3, [pc, #224]	; 1a648 <read_return_expression@@Base+0x2b0>
   1a564:	add	r3, pc, r3
   1a568:	ldrd	r2, [r3, #56]	; 0x38
   1a56c:	adds	r0, r2, #1
   1a570:	str	r0, [fp, #-92]	; 0xffffffa4
   1a574:	adc	r3, r3, #0
   1a578:	str	r3, [fp, #-88]	; 0xffffffa8
   1a57c:	ldr	r3, [pc, #200]	; 1a64c <read_return_expression@@Base+0x2b4>
   1a580:	add	r3, pc, r3
   1a584:	ldrd	r4, [fp, #-92]	; 0xffffffa4
   1a588:	strd	r4, [r3, #56]	; 0x38
   1a58c:	b	1a5f4 <read_return_expression@@Base+0x25c>
   1a590:	ldr	r3, [pc, #184]	; 1a650 <read_return_expression@@Base+0x2b8>
   1a594:	add	r3, pc, r3
   1a598:	ldrd	r2, [r3, #48]	; 0x30
   1a59c:	adds	r1, r2, #1
   1a5a0:	str	r1, [fp, #-84]	; 0xffffffac
   1a5a4:	adc	r3, r3, #0
   1a5a8:	str	r3, [fp, #-80]	; 0xffffffb0
   1a5ac:	ldr	r3, [pc, #160]	; 1a654 <read_return_expression@@Base+0x2bc>
   1a5b0:	add	r3, pc, r3
   1a5b4:	ldrd	r0, [fp, #-84]	; 0xffffffac
   1a5b8:	strd	r0, [r3, #48]	; 0x30
   1a5bc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1a5c0:	bl	181f0 <free_token_semicolon@@Base>
   1a5c4:	ldr	r3, [pc, #140]	; 1a658 <read_return_expression@@Base+0x2c0>
   1a5c8:	add	r3, pc, r3
   1a5cc:	ldrd	r2, [r3, #64]	; 0x40
   1a5d0:	adds	r1, r2, #1
   1a5d4:	str	r1, [fp, #-100]	; 0xffffff9c
   1a5d8:	adc	r3, r3, #0
   1a5dc:	str	r3, [fp, #-96]	; 0xffffffa0
   1a5e0:	ldr	r3, [pc, #116]	; 1a65c <read_return_expression@@Base+0x2c4>
   1a5e4:	add	r3, pc, r3
   1a5e8:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   1a5ec:	strd	r0, [r3, #64]	; 0x40
   1a5f0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1a5f4:	mov	r3, r1
   1a5f8:	mov	r0, r3
   1a5fc:	sub	sp, fp, #28
   1a600:	ldrd	r4, [sp]
   1a604:	ldrd	r6, [sp, #8]
   1a608:	ldrd	r8, [sp, #16]
   1a60c:	ldr	fp, [sp, #24]
   1a610:	add	sp, sp, #28
   1a614:	pop	{pc}		; (ldr pc, [sp], #4)
   1a618:	andeq	r6, r1, ip, asr r2
   1a61c:	andeq	r6, r1, r8, asr #4
   1a620:	andeq	r6, r1, r8, lsl #4
   1a624:	strdeq	r6, [r1], -r4
   1a628:	ldrdeq	r6, [r1], -r4
   1a62c:	andeq	r6, r1, r0, asr #3
   1a630:	andeq	r6, r1, r4, lsl #3
   1a634:	andeq	r6, r1, r8, ror #2
   1a638:	andeq	r6, r1, r0, asr r1
   1a63c:	andeq	r6, r1, r4, lsr r1
   1a640:	andeq	r6, r1, r8, lsl #2
   1a644:	andeq	r6, r1, ip, ror #1
   1a648:	strheq	r6, [r1], -r4
   1a64c:	muleq	r1, r8, r0
   1a650:	andeq	r6, r1, r4, lsl #1
   1a654:	andeq	r6, r1, r8, rrx
   1a658:	andeq	r6, r1, r0, asr r0
   1a65c:	andeq	r6, r1, r4, lsr r0

0001a660 <read_if_statement@@Base>:
   1a660:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a664:	strd	r6, [sp, #8]
   1a668:	strd	r8, [sp, #16]
   1a66c:	str	fp, [sp, #24]
   1a670:	str	lr, [sp, #28]
   1a674:	add	fp, sp, #28
   1a678:	sub	sp, sp, #104	; 0x68
   1a67c:	str	r0, [fp, #-56]	; 0xffffffc8
   1a680:	ldr	r3, [pc, #756]	; 1a97c <read_if_statement@@Base+0x31c>
   1a684:	add	r3, pc, r3
   1a688:	ldrd	r2, [r3]
   1a68c:	adds	r4, r2, #1
   1a690:	adc	r5, r3, #0
   1a694:	ldr	r3, [pc, #740]	; 1a980 <read_if_statement@@Base+0x320>
   1a698:	add	r3, pc, r3
   1a69c:	strd	r4, [r3]
   1a6a0:	mov	r3, #0
   1a6a4:	str	r3, [fp, #-36]	; 0xffffffdc
   1a6a8:	mov	r3, #0
   1a6ac:	str	r3, [fp, #-40]	; 0xffffffd8
   1a6b0:	mov	r3, #0
   1a6b4:	str	r3, [fp, #-44]	; 0xffffffd4
   1a6b8:	mov	r3, #0
   1a6bc:	str	r3, [fp, #-32]	; 0xffffffe0
   1a6c0:	mov	r3, #0
   1a6c4:	str	r3, [fp, #-48]	; 0xffffffd0
   1a6c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a6cc:	ldr	r3, [r3]
   1a6d0:	mov	r0, r3
   1a6d4:	bl	11ab0 <next@@Base>
   1a6d8:	str	r0, [fp, #-48]	; 0xffffffd0
   1a6dc:	ldr	r3, [pc, #672]	; 1a984 <read_if_statement@@Base+0x324>
   1a6e0:	add	r3, pc, r3
   1a6e4:	ldrd	r2, [r3, #8]
   1a6e8:	adds	r6, r2, #1
   1a6ec:	adc	r7, r3, #0
   1a6f0:	ldr	r3, [pc, #656]	; 1a988 <read_if_statement@@Base+0x328>
   1a6f4:	add	r3, pc, r3
   1a6f8:	strd	r6, [r3, #8]
   1a6fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a700:	ldr	r3, [r3]
   1a704:	cmp	r3, #3
   1a708:	beq	1a734 <read_if_statement@@Base+0xd4>
   1a70c:	mov	r1, #0
   1a710:	ldr	r3, [pc, #628]	; 1a98c <read_if_statement@@Base+0x32c>
   1a714:	add	r3, pc, r3
   1a718:	ldrd	r2, [r3, #16]
   1a71c:	adds	r8, r2, #1
   1a720:	adc	r9, r3, #0
   1a724:	ldr	r3, [pc, #612]	; 1a990 <read_if_statement@@Base+0x330>
   1a728:	add	r3, pc, r3
   1a72c:	strd	r8, [r3, #16]
   1a730:	b	1a958 <read_if_statement@@Base+0x2f8>
   1a734:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1a738:	bl	18010 <free_token_opar@@Base>
   1a73c:	ldr	r3, [pc, #592]	; 1a994 <read_if_statement@@Base+0x334>
   1a740:	add	r3, pc, r3
   1a744:	ldrd	r2, [r3, #24]
   1a748:	adds	r1, r2, #1
   1a74c:	str	r1, [fp, #-68]	; 0xffffffbc
   1a750:	adc	r3, r3, #0
   1a754:	str	r3, [fp, #-64]	; 0xffffffc0
   1a758:	ldr	r3, [pc, #568]	; 1a998 <read_if_statement@@Base+0x338>
   1a75c:	add	r3, pc, r3
   1a760:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   1a764:	strd	r0, [r3, #24]
   1a768:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1a76c:	bl	1a9dc <read_boolean_expression@@Base>
   1a770:	str	r0, [fp, #-40]	; 0xffffffd8
   1a774:	ldr	r3, [pc, #544]	; 1a99c <read_if_statement@@Base+0x33c>
   1a778:	add	r3, pc, r3
   1a77c:	ldrd	r2, [r3, #32]
   1a780:	adds	r1, r2, #1
   1a784:	str	r1, [fp, #-76]	; 0xffffffb4
   1a788:	adc	r3, r3, #0
   1a78c:	str	r3, [fp, #-72]	; 0xffffffb8
   1a790:	ldr	r3, [pc, #520]	; 1a9a0 <read_if_statement@@Base+0x340>
   1a794:	add	r3, pc, r3
   1a798:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   1a79c:	strd	r0, [r3, #32]
   1a7a0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1a7a4:	bl	19ef8 <read_body@@Base>
   1a7a8:	str	r0, [fp, #-44]	; 0xffffffd4
   1a7ac:	ldr	r3, [pc, #496]	; 1a9a4 <read_if_statement@@Base+0x344>
   1a7b0:	add	r3, pc, r3
   1a7b4:	ldrd	r2, [r3, #40]	; 0x28
   1a7b8:	adds	r1, r2, #1
   1a7bc:	str	r1, [fp, #-84]	; 0xffffffac
   1a7c0:	adc	r3, r3, #0
   1a7c4:	str	r3, [fp, #-80]	; 0xffffffb0
   1a7c8:	ldr	r3, [pc, #472]	; 1a9a8 <read_if_statement@@Base+0x348>
   1a7cc:	add	r3, pc, r3
   1a7d0:	ldrd	r0, [fp, #-84]	; 0xffffffac
   1a7d4:	strd	r0, [r3, #40]	; 0x28
   1a7d8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a7dc:	ldr	r3, [r3]
   1a7e0:	mov	r0, r3
   1a7e4:	bl	11ab0 <next@@Base>
   1a7e8:	str	r0, [fp, #-48]	; 0xffffffd0
   1a7ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a7f0:	ldr	r3, [r3]
   1a7f4:	cmp	r3, #11
   1a7f8:	bne	1a898 <read_if_statement@@Base+0x238>
   1a7fc:	ldr	r3, [pc, #424]	; 1a9ac <read_if_statement@@Base+0x34c>
   1a800:	add	r3, pc, r3
   1a804:	ldrd	r2, [r3, #48]	; 0x30
   1a808:	adds	r1, r2, #1
   1a80c:	str	r1, [fp, #-92]	; 0xffffffa4
   1a810:	adc	r3, r3, #0
   1a814:	str	r3, [fp, #-88]	; 0xffffffa8
   1a818:	ldr	r3, [pc, #400]	; 1a9b0 <read_if_statement@@Base+0x350>
   1a81c:	add	r3, pc, r3
   1a820:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   1a824:	strd	r0, [r3, #48]	; 0x30
   1a828:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1a82c:	bl	18310 <free_token_else@@Base>
   1a830:	ldr	r3, [pc, #380]	; 1a9b4 <read_if_statement@@Base+0x354>
   1a834:	add	r3, pc, r3
   1a838:	ldrd	r2, [r3, #64]	; 0x40
   1a83c:	adds	r1, r2, #1
   1a840:	str	r1, [fp, #-108]	; 0xffffff94
   1a844:	adc	r3, r3, #0
   1a848:	str	r3, [fp, #-104]	; 0xffffff98
   1a84c:	ldr	r3, [pc, #356]	; 1a9b8 <read_if_statement@@Base+0x358>
   1a850:	add	r3, pc, r3
   1a854:	ldrd	r0, [fp, #-108]	; 0xffffff94
   1a858:	strd	r0, [r3, #64]	; 0x40
   1a85c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1a860:	bl	19ef8 <read_body@@Base>
   1a864:	str	r0, [fp, #-32]	; 0xffffffe0
   1a868:	ldr	r3, [pc, #332]	; 1a9bc <read_if_statement@@Base+0x35c>
   1a86c:	add	r3, pc, r3
   1a870:	ldrd	r2, [r3, #72]	; 0x48
   1a874:	adds	r1, r2, #1
   1a878:	str	r1, [fp, #-116]	; 0xffffff8c
   1a87c:	adc	r3, r3, #0
   1a880:	str	r3, [fp, #-112]	; 0xffffff90
   1a884:	ldr	r3, [pc, #308]	; 1a9c0 <read_if_statement@@Base+0x360>
   1a888:	add	r3, pc, r3
   1a88c:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   1a890:	strd	r0, [r3, #72]	; 0x48
   1a894:	b	1a904 <read_if_statement@@Base+0x2a4>
   1a898:	ldr	r3, [pc, #292]	; 1a9c4 <read_if_statement@@Base+0x364>
   1a89c:	add	r3, pc, r3
   1a8a0:	ldrd	r2, [r3, #56]	; 0x38
   1a8a4:	adds	r1, r2, #1
   1a8a8:	str	r1, [fp, #-100]	; 0xffffff9c
   1a8ac:	adc	r3, r3, #0
   1a8b0:	str	r3, [fp, #-96]	; 0xffffffa0
   1a8b4:	ldr	r3, [pc, #268]	; 1a9c8 <read_if_statement@@Base+0x368>
   1a8b8:	add	r3, pc, r3
   1a8bc:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   1a8c0:	strd	r0, [r3, #56]	; 0x38
   1a8c4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a8c8:	ldr	r3, [r3]
   1a8cc:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1a8d0:	mov	r0, r3
   1a8d4:	bl	11e80 <push_back@@Base>
   1a8d8:	ldr	r3, [pc, #236]	; 1a9cc <read_if_statement@@Base+0x36c>
   1a8dc:	add	r3, pc, r3
   1a8e0:	ldrd	r2, [r3, #80]	; 0x50
   1a8e4:	adds	r1, r2, #1
   1a8e8:	str	r1, [fp, #-124]	; 0xffffff84
   1a8ec:	adc	r3, r3, #0
   1a8f0:	str	r3, [fp, #-120]	; 0xffffff88
   1a8f4:	ldr	r3, [pc, #212]	; 1a9d0 <read_if_statement@@Base+0x370>
   1a8f8:	add	r3, pc, r3
   1a8fc:	ldrd	r0, [fp, #-124]	; 0xffffff84
   1a900:	strd	r0, [r3, #80]	; 0x50
   1a904:	mov	r0, #20
   1a908:	bl	118b8 <malloc@plt>
   1a90c:	mov	r3, r0
   1a910:	str	r3, [fp, #-36]	; 0xffffffdc
   1a914:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a918:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1a91c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1a920:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a924:	bl	18830 <init_node_if@@Base>
   1a928:	ldr	r3, [pc, #164]	; 1a9d4 <read_if_statement@@Base+0x374>
   1a92c:	add	r3, pc, r3
   1a930:	ldrd	r2, [r3, #88]	; 0x58
   1a934:	adds	r1, r2, #1
   1a938:	str	r1, [fp, #-132]	; 0xffffff7c
   1a93c:	adc	r3, r3, #0
   1a940:	str	r3, [fp, #-128]	; 0xffffff80
   1a944:	ldr	r3, [pc, #140]	; 1a9d8 <read_if_statement@@Base+0x378>
   1a948:	add	r3, pc, r3
   1a94c:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   1a950:	strd	r0, [r3, #88]	; 0x58
   1a954:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a958:	mov	r3, r1
   1a95c:	mov	r0, r3
   1a960:	sub	sp, fp, #28
   1a964:	ldrd	r4, [sp]
   1a968:	ldrd	r6, [sp, #8]
   1a96c:	ldrd	r8, [sp, #16]
   1a970:	ldr	fp, [sp, #24]
   1a974:	add	sp, sp, #28
   1a978:	pop	{pc}		; (ldr pc, [sp], #4)
   1a97c:	andeq	r5, r1, r4, lsr pc
   1a980:	andeq	r5, r1, r0, lsr #30
   1a984:	ldrdeq	r5, [r1], -r8
   1a988:	andeq	r5, r1, r4, asr #29
   1a98c:	andeq	r5, r1, r4, lsr #29
   1a990:	muleq	r1, r0, lr
   1a994:	andeq	r5, r1, r8, ror lr
   1a998:	andeq	r5, r1, ip, asr lr
   1a99c:	andeq	r5, r1, r0, asr #28
   1a9a0:	andeq	r5, r1, r4, lsr #28
   1a9a4:	andeq	r5, r1, r8, lsl #28
   1a9a8:	andeq	r5, r1, ip, ror #27
   1a9ac:			; <UNDEFINED> instruction: 0x00015db8
   1a9b0:	muleq	r1, ip, sp
   1a9b4:	andeq	r5, r1, r4, lsl #27
   1a9b8:	andeq	r5, r1, r8, ror #26
   1a9bc:	andeq	r5, r1, ip, asr #26
   1a9c0:	andeq	r5, r1, r0, lsr sp
   1a9c4:	andeq	r5, r1, ip, lsl sp
   1a9c8:	andeq	r5, r1, r0, lsl #26
   1a9cc:	ldrdeq	r5, [r1], -ip
   1a9d0:	andeq	r5, r1, r0, asr #25
   1a9d4:	andeq	r5, r1, ip, lsl #25
   1a9d8:	andeq	r5, r1, r0, ror ip

0001a9dc <read_boolean_expression@@Base>:
   1a9dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a9e0:	strd	r6, [sp, #8]
   1a9e4:	strd	r8, [sp, #16]
   1a9e8:	strd	sl, [sp, #24]
   1a9ec:	str	lr, [sp, #32]
   1a9f0:	add	fp, sp, #32
   1a9f4:	sub	sp, sp, #108	; 0x6c
   1a9f8:	str	r0, [fp, #-56]	; 0xffffffc8
   1a9fc:	ldr	sl, [pc, #848]	; 1ad54 <read_boolean_expression@@Base+0x378>
   1aa00:	add	sl, pc, sl
   1aa04:	ldr	r3, [pc, #844]	; 1ad58 <read_boolean_expression@@Base+0x37c>
   1aa08:	add	r3, pc, r3
   1aa0c:	ldrd	r2, [r3]
   1aa10:	adds	r4, r2, #1
   1aa14:	adc	r5, r3, #0
   1aa18:	ldr	r3, [pc, #828]	; 1ad5c <read_boolean_expression@@Base+0x380>
   1aa1c:	add	r3, pc, r3
   1aa20:	strd	r4, [r3]
   1aa24:	mov	r3, #0
   1aa28:	str	r3, [fp, #-40]	; 0xffffffd8
   1aa2c:	mov	r3, #0
   1aa30:	str	r3, [fp, #-44]	; 0xffffffd4
   1aa34:	mov	r3, #0
   1aa38:	str	r3, [fp, #-52]	; 0xffffffcc
   1aa3c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1aa40:	ldr	r3, [r3]
   1aa44:	mov	r0, r3
   1aa48:	bl	11ab0 <next@@Base>
   1aa4c:	str	r0, [fp, #-44]	; 0xffffffd4
   1aa50:	nop	{0}
   1aa54:	ldr	r3, [pc, #772]	; 1ad60 <read_boolean_expression@@Base+0x384>
   1aa58:	add	r3, pc, r3
   1aa5c:	ldrd	r2, [r3, #8]
   1aa60:	adds	r6, r2, #1
   1aa64:	adc	r7, r3, #0
   1aa68:	ldr	r3, [pc, #756]	; 1ad64 <read_boolean_expression@@Base+0x388>
   1aa6c:	add	r3, pc, r3
   1aa70:	strd	r6, [r3, #8]
   1aa74:	b	1accc <read_boolean_expression@@Base+0x2f0>
   1aa78:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1aa7c:	ldr	r3, [r3]
   1aa80:	cmp	r3, #3
   1aa84:	beq	1abc0 <read_boolean_expression@@Base+0x1e4>
   1aa88:	cmp	r3, #12
   1aa8c:	beq	1ab50 <read_boolean_expression@@Base+0x174>
   1aa90:	cmp	r3, #1
   1aa94:	bne	1ac38 <read_boolean_expression@@Base+0x25c>
   1aa98:	ldr	r3, [pc, #712]	; 1ad68 <read_boolean_expression@@Base+0x38c>
   1aa9c:	add	r3, pc, r3
   1aaa0:	ldrd	r2, [r3, #24]
   1aaa4:	adds	r1, r2, #1
   1aaa8:	str	r1, [fp, #-76]	; 0xffffffb4
   1aaac:	adc	r3, r3, #0
   1aab0:	str	r3, [fp, #-72]	; 0xffffffb8
   1aab4:	ldr	r3, [pc, #688]	; 1ad6c <read_boolean_expression@@Base+0x390>
   1aab8:	add	r3, pc, r3
   1aabc:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   1aac0:	strd	r0, [r3, #24]
   1aac4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1aac8:	ldr	r3, [r3]
   1aacc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1aad0:	mov	r0, r3
   1aad4:	bl	11e80 <push_back@@Base>
   1aad8:	ldr	r3, [pc, #656]	; 1ad70 <read_boolean_expression@@Base+0x394>
   1aadc:	add	r3, pc, r3
   1aae0:	ldrd	r2, [r3, #48]	; 0x30
   1aae4:	adds	r1, r2, #1
   1aae8:	str	r1, [fp, #-100]	; 0xffffff9c
   1aaec:	adc	r3, r3, #0
   1aaf0:	str	r3, [fp, #-96]	; 0xffffffa0
   1aaf4:	ldr	r3, [pc, #632]	; 1ad74 <read_boolean_expression@@Base+0x398>
   1aaf8:	add	r3, pc, r3
   1aafc:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   1ab00:	strd	r0, [r3, #48]	; 0x30
   1ab04:	sub	r2, fp, #52	; 0x34
   1ab08:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1ab0c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1ab10:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ab14:	bl	1adc8 <read_single_boolean_expression@@Base>
   1ab18:	str	r0, [fp, #-40]	; 0xffffffd8
   1ab1c:	nop	{0}
   1ab20:	ldr	r3, [pc, #592]	; 1ad78 <read_boolean_expression@@Base+0x39c>
   1ab24:	add	r3, pc, r3
   1ab28:	ldrd	r2, [r3, #56]	; 0x38
   1ab2c:	adds	r1, r2, #1
   1ab30:	str	r1, [fp, #-108]	; 0xffffff94
   1ab34:	adc	r3, r3, #0
   1ab38:	str	r3, [fp, #-104]	; 0xffffff98
   1ab3c:	ldr	r3, [pc, #568]	; 1ad7c <read_boolean_expression@@Base+0x3a0>
   1ab40:	add	r3, pc, r3
   1ab44:	ldrd	r0, [fp, #-108]	; 0xffffff94
   1ab48:	strd	r0, [r3, #56]	; 0x38
   1ab4c:	b	1acb8 <read_boolean_expression@@Base+0x2dc>
   1ab50:	ldr	r3, [pc, #552]	; 1ad80 <read_boolean_expression@@Base+0x3a4>
   1ab54:	add	r3, pc, r3
   1ab58:	ldrd	r2, [r3, #40]	; 0x28
   1ab5c:	adds	r1, r2, #1
   1ab60:	str	r1, [fp, #-92]	; 0xffffffa4
   1ab64:	adc	r3, r3, #0
   1ab68:	str	r3, [fp, #-88]	; 0xffffffa8
   1ab6c:	ldr	r3, [pc, #528]	; 1ad84 <read_boolean_expression@@Base+0x3a8>
   1ab70:	add	r3, pc, r3
   1ab74:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   1ab78:	strd	r0, [r3, #40]	; 0x28
   1ab7c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1ab80:	bl	1942c <get_boolean_op_value@@Base>
   1ab84:	str	r0, [fp, #-48]	; 0xffffffd0
   1ab88:	ldr	r3, [pc, #504]	; 1ad88 <read_boolean_expression@@Base+0x3ac>
   1ab8c:	add	r3, pc, r3
   1ab90:	ldrd	r2, [r3, #64]	; 0x40
   1ab94:	adds	r1, r2, #1
   1ab98:	str	r1, [fp, #-116]	; 0xffffff8c
   1ab9c:	adc	r3, r3, #0
   1aba0:	str	r3, [fp, #-112]	; 0xffffff90
   1aba4:	ldr	r3, [pc, #480]	; 1ad8c <read_boolean_expression@@Base+0x3b0>
   1aba8:	add	r3, pc, r3
   1abac:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   1abb0:	strd	r0, [r3, #64]	; 0x40
   1abb4:	mov	r3, #1
   1abb8:	str	r3, [fp, #-52]	; 0xffffffcc
   1abbc:	b	1acb8 <read_boolean_expression@@Base+0x2dc>
   1abc0:	ldr	r3, [pc, #456]	; 1ad90 <read_boolean_expression@@Base+0x3b4>
   1abc4:	add	r3, pc, r3
   1abc8:	ldrd	r2, [r3, #32]
   1abcc:	adds	r1, r2, #1
   1abd0:	str	r1, [fp, #-84]	; 0xffffffac
   1abd4:	adc	r3, r3, #0
   1abd8:	str	r3, [fp, #-80]	; 0xffffffb0
   1abdc:	ldr	r3, [pc, #432]	; 1ad94 <read_boolean_expression@@Base+0x3b8>
   1abe0:	add	r3, pc, r3
   1abe4:	ldrd	r0, [fp, #-84]	; 0xffffffac
   1abe8:	strd	r0, [r3, #32]
   1abec:	sub	r2, fp, #52	; 0x34
   1abf0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1abf4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1abf8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1abfc:	bl	1adc8 <read_single_boolean_expression@@Base>
   1ac00:	str	r0, [fp, #-40]	; 0xffffffd8
   1ac04:	nop	{0}
   1ac08:	ldr	r3, [pc, #392]	; 1ad98 <read_boolean_expression@@Base+0x3bc>
   1ac0c:	add	r3, pc, r3
   1ac10:	ldrd	r2, [r3, #72]	; 0x48
   1ac14:	adds	r1, r2, #1
   1ac18:	str	r1, [fp, #-124]	; 0xffffff84
   1ac1c:	adc	r3, r3, #0
   1ac20:	str	r3, [fp, #-120]	; 0xffffff88
   1ac24:	ldr	r3, [pc, #368]	; 1ad9c <read_boolean_expression@@Base+0x3c0>
   1ac28:	add	r3, pc, r3
   1ac2c:	ldrd	r0, [fp, #-124]	; 0xffffff84
   1ac30:	strd	r0, [r3, #72]	; 0x48
   1ac34:	b	1acb8 <read_boolean_expression@@Base+0x2dc>
   1ac38:	ldr	r3, [pc, #352]	; 1ada0 <read_boolean_expression@@Base+0x3c4>
   1ac3c:	add	r3, pc, r3
   1ac40:	ldrd	r2, [r3, #16]
   1ac44:	adds	r1, r2, #1
   1ac48:	str	r1, [fp, #-68]	; 0xffffffbc
   1ac4c:	adc	r3, r3, #0
   1ac50:	str	r3, [fp, #-64]	; 0xffffffc0
   1ac54:	ldr	r3, [pc, #328]	; 1ada4 <read_boolean_expression@@Base+0x3c8>
   1ac58:	add	r3, pc, r3
   1ac5c:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   1ac60:	strd	r0, [r3, #16]
   1ac64:	ldr	r3, [pc, #316]	; 1ada8 <read_boolean_expression@@Base+0x3cc>
   1ac68:	ldr	r3, [sl, r3]
   1ac6c:	ldr	r3, [r3]
   1ac70:	mov	r2, #33	; 0x21
   1ac74:	mov	r1, #1
   1ac78:	ldr	r0, [pc, #300]	; 1adac <read_boolean_expression@@Base+0x3d0>
   1ac7c:	add	r0, pc, r0
   1ac80:	bl	11870 <fwrite@plt>
   1ac84:	ldr	r3, [pc, #292]	; 1adb0 <read_boolean_expression@@Base+0x3d4>
   1ac88:	add	r3, pc, r3
   1ac8c:	ldrd	r2, [r3, #80]	; 0x50
   1ac90:	adds	r1, r2, #1
   1ac94:	str	r1, [fp, #-132]	; 0xffffff7c
   1ac98:	adc	r3, r3, #0
   1ac9c:	str	r3, [fp, #-128]	; 0xffffff80
   1aca0:	ldr	r3, [pc, #268]	; 1adb4 <read_boolean_expression@@Base+0x3d8>
   1aca4:	add	r3, pc, r3
   1aca8:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   1acac:	strd	r0, [r3, #80]	; 0x50
   1acb0:	mov	r0, #1
   1acb4:	bl	118e8 <exit@plt>
   1acb8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1acbc:	ldr	r3, [r3]
   1acc0:	mov	r0, r3
   1acc4:	bl	11ab0 <next@@Base>
   1acc8:	str	r0, [fp, #-44]	; 0xffffffd4
   1accc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1acd0:	ldr	r3, [r3]
   1acd4:	cmp	r3, #4
   1acd8:	bne	1aa78 <read_boolean_expression@@Base+0x9c>
   1acdc:	ldr	r3, [pc, #212]	; 1adb8 <read_boolean_expression@@Base+0x3dc>
   1ace0:	add	r3, pc, r3
   1ace4:	ldrd	r2, [r3, #88]	; 0x58
   1ace8:	adds	r1, r2, #1
   1acec:	str	r1, [fp, #-140]	; 0xffffff74
   1acf0:	adc	r3, r3, #0
   1acf4:	str	r3, [fp, #-136]	; 0xffffff78
   1acf8:	ldr	r3, [pc, #188]	; 1adbc <read_boolean_expression@@Base+0x3e0>
   1acfc:	add	r3, pc, r3
   1ad00:	ldrd	r0, [fp, #-140]	; 0xffffff74
   1ad04:	strd	r0, [r3, #88]	; 0x58
   1ad08:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1ad0c:	bl	18070 <free_token_cpar@@Base>
   1ad10:	ldr	r3, [pc, #168]	; 1adc0 <read_boolean_expression@@Base+0x3e4>
   1ad14:	add	r3, pc, r3
   1ad18:	ldrd	r2, [r3, #96]	; 0x60
   1ad1c:	adds	r8, r2, #1
   1ad20:	adc	r9, r3, #0
   1ad24:	ldr	r3, [pc, #152]	; 1adc4 <read_boolean_expression@@Base+0x3e8>
   1ad28:	add	r3, pc, r3
   1ad2c:	strd	r8, [r3, #96]	; 0x60
   1ad30:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1ad34:	mov	r0, r3
   1ad38:	sub	sp, fp, #32
   1ad3c:	ldrd	r4, [sp]
   1ad40:	ldrd	r6, [sp, #8]
   1ad44:	ldrd	r8, [sp, #16]
   1ad48:	ldrd	sl, [sp, #24]
   1ad4c:	add	sp, sp, #32
   1ad50:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad54:	strdeq	r4, [r1], -r8
   1ad58:	andeq	r5, r1, r8, asr #22
   1ad5c:	andeq	r5, r1, r4, lsr fp
   1ad60:	strdeq	r5, [r1], -r8
   1ad64:	andeq	r5, r1, r4, ror #21
   1ad68:			; <UNDEFINED> instruction: 0x00015ab4
   1ad6c:	muleq	r1, r8, sl
   1ad70:	andeq	r5, r1, r4, ror sl
   1ad74:	andeq	r5, r1, r8, asr sl
   1ad78:	andeq	r5, r1, ip, lsr #20
   1ad7c:	andeq	r5, r1, r0, lsl sl
   1ad80:	strdeq	r5, [r1], -ip
   1ad84:	andeq	r5, r1, r0, ror #19
   1ad88:	andeq	r5, r1, r4, asr #19
   1ad8c:	andeq	r5, r1, r8, lsr #19
   1ad90:	andeq	r5, r1, ip, lsl #19
   1ad94:	andeq	r5, r1, r0, ror r9
   1ad98:	andeq	r5, r1, r4, asr #18
   1ad9c:	andeq	r5, r1, r8, lsr #18
   1ada0:	andeq	r5, r1, r4, lsl r9
   1ada4:	strdeq	r5, [r1], -r8
   1ada8:	andeq	r0, r0, r0, lsr #1
   1adac:	strdeq	r3, [r0], -ip
   1adb0:	andeq	r5, r1, r8, asr #17
   1adb4:	andeq	r5, r1, ip, lsr #17
   1adb8:	andeq	r5, r1, r0, ror r8
   1adbc:	andeq	r5, r1, r4, asr r8
   1adc0:	andeq	r5, r1, ip, lsr r8
   1adc4:	andeq	r5, r1, r8, lsr #16

0001adc8 <read_single_boolean_expression@@Base>:
   1adc8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1adcc:	strd	r6, [sp, #8]
   1add0:	strd	r8, [sp, #16]
   1add4:	str	fp, [sp, #24]
   1add8:	str	lr, [sp, #28]
   1addc:	add	fp, sp, #28
   1ade0:	sub	sp, sp, #72	; 0x48
   1ade4:	str	r0, [fp, #-56]	; 0xffffffc8
   1ade8:	str	r1, [fp, #-60]	; 0xffffffc4
   1adec:	str	r2, [fp, #-64]	; 0xffffffc0
   1adf0:	str	r3, [fp, #-68]	; 0xffffffbc
   1adf4:	ldr	r1, [pc, #524]	; 1b008 <read_single_boolean_expression@@Base+0x240>
   1adf8:	add	r1, pc, r1
   1adfc:	ldr	r3, [pc, #520]	; 1b00c <read_single_boolean_expression@@Base+0x244>
   1ae00:	add	r3, pc, r3
   1ae04:	ldrd	r2, [r3]
   1ae08:	adds	r4, r2, #1
   1ae0c:	adc	r5, r3, #0
   1ae10:	ldr	r3, [pc, #504]	; 1b010 <read_single_boolean_expression@@Base+0x248>
   1ae14:	add	r3, pc, r3
   1ae18:	strd	r4, [r3]
   1ae1c:	mov	r3, #0
   1ae20:	str	r3, [fp, #-36]	; 0xffffffdc
   1ae24:	mov	r3, #0
   1ae28:	str	r3, [fp, #-32]	; 0xffffffe0
   1ae2c:	mov	r3, #0
   1ae30:	str	r3, [fp, #-40]	; 0xffffffd8
   1ae34:	mov	r3, #0
   1ae38:	str	r3, [fp, #-44]	; 0xffffffd4
   1ae3c:	mov	r3, #0
   1ae40:	str	r3, [fp, #-48]	; 0xffffffd0
   1ae44:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1ae48:	cmp	r3, #0
   1ae4c:	bne	1ae8c <read_single_boolean_expression@@Base+0xc4>
   1ae50:	ldr	r3, [pc, #444]	; 1b014 <read_single_boolean_expression@@Base+0x24c>
   1ae54:	add	r3, pc, r3
   1ae58:	ldrd	r2, [r3, #8]
   1ae5c:	adds	r1, r2, #1
   1ae60:	str	r1, [fp, #-76]	; 0xffffffb4
   1ae64:	adc	r3, r3, #0
   1ae68:	str	r3, [fp, #-72]	; 0xffffffb8
   1ae6c:	ldr	r3, [pc, #420]	; 1b018 <read_single_boolean_expression@@Base+0x250>
   1ae70:	add	r3, pc, r3
   1ae74:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   1ae78:	strd	r0, [r3, #8]
   1ae7c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ae80:	bl	1b04c <read_boolean_binary_expression@@Base>
   1ae84:	str	r0, [fp, #-32]	; 0xffffffe0
   1ae88:	b	1afc0 <read_single_boolean_expression@@Base+0x1f8>
   1ae8c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1ae90:	ldr	r3, [r3]
   1ae94:	cmp	r3, #0
   1ae98:	beq	1af70 <read_single_boolean_expression@@Base+0x1a8>
   1ae9c:	ldr	r3, [pc, #376]	; 1b01c <read_single_boolean_expression@@Base+0x254>
   1aea0:	add	r3, pc, r3
   1aea4:	ldrd	r2, [r3, #16]
   1aea8:	adds	r1, r2, #1
   1aeac:	str	r1, [fp, #-84]	; 0xffffffac
   1aeb0:	adc	r3, r3, #0
   1aeb4:	str	r3, [fp, #-80]	; 0xffffffb0
   1aeb8:	ldr	r3, [pc, #352]	; 1b020 <read_single_boolean_expression@@Base+0x258>
   1aebc:	add	r3, pc, r3
   1aec0:	ldrd	r0, [fp, #-84]	; 0xffffffac
   1aec4:	strd	r0, [r3, #16]
   1aec8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1aecc:	bl	1b04c <read_boolean_binary_expression@@Base>
   1aed0:	str	r0, [fp, #-40]	; 0xffffffd8
   1aed4:	ldr	r3, [pc, #328]	; 1b024 <read_single_boolean_expression@@Base+0x25c>
   1aed8:	add	r3, pc, r3
   1aedc:	ldrd	r2, [r3, #24]
   1aee0:	adds	r1, r2, #1
   1aee4:	str	r1, [fp, #-92]	; 0xffffffa4
   1aee8:	adc	r3, r3, #0
   1aeec:	str	r3, [fp, #-88]	; 0xffffffa8
   1aef0:	ldr	r3, [pc, #304]	; 1b028 <read_single_boolean_expression@@Base+0x260>
   1aef4:	add	r3, pc, r3
   1aef8:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   1aefc:	strd	r0, [r3, #24]
   1af00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1af04:	str	r3, [fp, #-44]	; 0xffffffd4
   1af08:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1af0c:	str	r3, [fp, #-48]	; 0xffffffd0
   1af10:	mov	r0, #20
   1af14:	bl	118b8 <malloc@plt>
   1af18:	mov	r3, r0
   1af1c:	str	r3, [fp, #-32]	; 0xffffffe0
   1af20:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1af24:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1af28:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1af2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1af30:	bl	188f8 <init_node_boolean_operator@@Base>
   1af34:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1af38:	mov	r2, #0
   1af3c:	str	r2, [r3]
   1af40:	ldr	r3, [pc, #228]	; 1b02c <read_single_boolean_expression@@Base+0x264>
   1af44:	add	r3, pc, r3
   1af48:	ldrd	r2, [r3, #32]
   1af4c:	adds	r1, r2, #1
   1af50:	str	r1, [fp, #-100]	; 0xffffff9c
   1af54:	adc	r3, r3, #0
   1af58:	str	r3, [fp, #-96]	; 0xffffffa0
   1af5c:	ldr	r3, [pc, #204]	; 1b030 <read_single_boolean_expression@@Base+0x268>
   1af60:	add	r3, pc, r3
   1af64:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   1af68:	strd	r0, [r3, #32]
   1af6c:	b	1afc0 <read_single_boolean_expression@@Base+0x1f8>
   1af70:	ldr	r3, [pc, #188]	; 1b034 <read_single_boolean_expression@@Base+0x26c>
   1af74:	ldr	r3, [r1, r3]
   1af78:	ldr	r0, [r3]
   1af7c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1af80:	ldr	r3, [r3, #4]
   1af84:	mov	r2, r3
   1af88:	ldr	r3, [pc, #168]	; 1b038 <read_single_boolean_expression@@Base+0x270>
   1af8c:	add	r3, pc, r3
   1af90:	mov	r1, r3
   1af94:	bl	11900 <fprintf@plt>
   1af98:	ldr	r3, [pc, #156]	; 1b03c <read_single_boolean_expression@@Base+0x274>
   1af9c:	add	r3, pc, r3
   1afa0:	ldrd	r2, [r3, #40]	; 0x28
   1afa4:	adds	r8, r2, #1
   1afa8:	adc	r9, r3, #0
   1afac:	ldr	r3, [pc, #140]	; 1b040 <read_single_boolean_expression@@Base+0x278>
   1afb0:	add	r3, pc, r3
   1afb4:	strd	r8, [r3, #40]	; 0x28
   1afb8:	mov	r0, #1
   1afbc:	bl	118e8 <exit@plt>
   1afc0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1afc4:	ldr	r3, [pc, #120]	; 1b044 <read_single_boolean_expression@@Base+0x27c>
   1afc8:	add	r3, pc, r3
   1afcc:	ldrd	r2, [r3, #48]	; 0x30
   1afd0:	adds	r6, r2, #1
   1afd4:	adc	r7, r3, #0
   1afd8:	ldr	r3, [pc, #104]	; 1b048 <read_single_boolean_expression@@Base+0x280>
   1afdc:	add	r3, pc, r3
   1afe0:	strd	r6, [r3, #48]	; 0x30
   1afe4:	mov	r3, r1
   1afe8:	mov	r0, r3
   1afec:	sub	sp, fp, #28
   1aff0:	ldrd	r4, [sp]
   1aff4:	ldrd	r6, [sp, #8]
   1aff8:	ldrd	r8, [sp, #16]
   1affc:	ldr	fp, [sp, #24]
   1b000:	add	sp, sp, #28
   1b004:	pop	{pc}		; (ldr pc, [sp], #4)
   1b008:	andeq	r4, r1, r0, lsl #4
   1b00c:	andeq	r5, r1, r8, lsl r7
   1b010:	andeq	r5, r1, r4, lsl #14
   1b014:	andeq	r5, r1, r4, asr #13
   1b018:	andeq	r5, r1, r8, lsr #13
   1b01c:	andeq	r5, r1, r8, ror r6
   1b020:	andeq	r5, r1, ip, asr r6
   1b024:	andeq	r5, r1, r0, asr #12
   1b028:	andeq	r5, r1, r4, lsr #12
   1b02c:	ldrdeq	r5, [r1], -r4
   1b030:			; <UNDEFINED> instruction: 0x000155b8
   1b034:	andeq	r0, r0, r0, lsr #1
   1b038:	andeq	r3, r0, r0, lsl r6
   1b03c:	andeq	r5, r1, ip, ror r5
   1b040:	andeq	r5, r1, r8, ror #10
   1b044:	andeq	r5, r1, r0, asr r5
   1b048:	andeq	r5, r1, ip, lsr r5

0001b04c <read_boolean_binary_expression@@Base>:
   1b04c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1b050:	strd	r6, [sp, #8]
   1b054:	strd	r8, [sp, #16]
   1b058:	str	fp, [sp, #24]
   1b05c:	str	lr, [sp, #28]
   1b060:	add	fp, sp, #28
   1b064:	sub	sp, sp, #168	; 0xa8
   1b068:	str	r0, [fp, #-64]	; 0xffffffc0
   1b06c:	ldr	r3, [pc, #1272]	; 1b56c <read_boolean_binary_expression@@Base+0x520>
   1b070:	add	r3, pc, r3
   1b074:	ldrd	r2, [r3]
   1b078:	adds	r4, r2, #1
   1b07c:	adc	r5, r3, #0
   1b080:	ldr	r3, [pc, #1256]	; 1b570 <read_boolean_binary_expression@@Base+0x524>
   1b084:	add	r3, pc, r3
   1b088:	strd	r4, [r3]
   1b08c:	mov	r3, #0
   1b090:	str	r3, [fp, #-32]	; 0xffffffe0
   1b094:	mov	r3, #0
   1b098:	str	r3, [fp, #-36]	; 0xffffffdc
   1b09c:	mov	r3, #0
   1b0a0:	str	r3, [fp, #-40]	; 0xffffffd8
   1b0a4:	mov	r3, #0
   1b0a8:	str	r3, [fp, #-44]	; 0xffffffd4
   1b0ac:	mov	r3, #0
   1b0b0:	str	r3, [fp, #-48]	; 0xffffffd0
   1b0b4:	mov	r3, #0
   1b0b8:	str	r3, [fp, #-52]	; 0xffffffcc
   1b0bc:	mov	r3, #0
   1b0c0:	str	r3, [fp, #-56]	; 0xffffffc8
   1b0c4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1b0c8:	ldr	r3, [r3]
   1b0cc:	mov	r0, r3
   1b0d0:	bl	11ab0 <next@@Base>
   1b0d4:	str	r0, [fp, #-48]	; 0xffffffd0
   1b0d8:	ldr	r3, [pc, #1172]	; 1b574 <read_boolean_binary_expression@@Base+0x528>
   1b0dc:	add	r3, pc, r3
   1b0e0:	ldrd	r2, [r3, #8]
   1b0e4:	adds	r6, r2, #1
   1b0e8:	adc	r7, r3, #0
   1b0ec:	ldr	r3, [pc, #1156]	; 1b578 <read_boolean_binary_expression@@Base+0x52c>
   1b0f0:	add	r3, pc, r3
   1b0f4:	strd	r6, [r3, #8]
   1b0f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b0fc:	ldr	r3, [r3]
   1b100:	cmp	r3, #1
   1b104:	beq	1b1e8 <read_boolean_binary_expression@@Base+0x19c>
   1b108:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b10c:	ldr	r3, [r3]
   1b110:	cmp	r3, #12
   1b114:	bne	1b1c0 <read_boolean_binary_expression@@Base+0x174>
   1b118:	ldr	r3, [pc, #1116]	; 1b57c <read_boolean_binary_expression@@Base+0x530>
   1b11c:	add	r3, pc, r3
   1b120:	ldrd	r2, [r3, #16]
   1b124:	adds	r1, r2, #1
   1b128:	str	r1, [fp, #-76]	; 0xffffffb4
   1b12c:	adc	r3, r3, #0
   1b130:	str	r3, [fp, #-72]	; 0xffffffb8
   1b134:	ldr	r3, [pc, #1092]	; 1b580 <read_boolean_binary_expression@@Base+0x534>
   1b138:	add	r3, pc, r3
   1b13c:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   1b140:	strd	r0, [r3, #16]
   1b144:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1b148:	ldr	r3, [r3]
   1b14c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1b150:	mov	r0, r3
   1b154:	bl	11e80 <push_back@@Base>
   1b158:	ldr	r3, [pc, #1060]	; 1b584 <read_boolean_binary_expression@@Base+0x538>
   1b15c:	add	r3, pc, r3
   1b160:	ldrd	r2, [r3, #32]
   1b164:	adds	r1, r2, #1
   1b168:	str	r1, [fp, #-84]	; 0xffffffac
   1b16c:	adc	r3, r3, #0
   1b170:	str	r3, [fp, #-80]	; 0xffffffb0
   1b174:	ldr	r3, [pc, #1036]	; 1b588 <read_boolean_binary_expression@@Base+0x53c>
   1b178:	add	r3, pc, r3
   1b17c:	ldrd	r0, [fp, #-84]	; 0xffffffac
   1b180:	strd	r0, [r3, #32]
   1b184:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1b188:	bl	1b604 <read_boolean_unary_expression@@Base>
   1b18c:	mov	r1, r0
   1b190:	ldr	r3, [pc, #1012]	; 1b58c <read_boolean_binary_expression@@Base+0x540>
   1b194:	add	r3, pc, r3
   1b198:	ldrd	r2, [r3, #40]	; 0x28
   1b19c:	adds	r0, r2, #1
   1b1a0:	str	r0, [fp, #-92]	; 0xffffffa4
   1b1a4:	adc	r3, r3, #0
   1b1a8:	str	r3, [fp, #-88]	; 0xffffffa8
   1b1ac:	ldr	r3, [pc, #988]	; 1b590 <read_boolean_binary_expression@@Base+0x544>
   1b1b0:	add	r3, pc, r3
   1b1b4:	ldrd	r4, [fp, #-92]	; 0xffffffa4
   1b1b8:	strd	r4, [r3, #40]	; 0x28
   1b1bc:	b	1b548 <read_boolean_binary_expression@@Base+0x4fc>
   1b1c0:	ldr	r3, [pc, #972]	; 1b594 <read_boolean_binary_expression@@Base+0x548>
   1b1c4:	add	r3, pc, r3
   1b1c8:	ldrd	r2, [r3, #24]
   1b1cc:	adds	r8, r2, #1
   1b1d0:	adc	r9, r3, #0
   1b1d4:	ldr	r3, [pc, #956]	; 1b598 <read_boolean_binary_expression@@Base+0x54c>
   1b1d8:	add	r3, pc, r3
   1b1dc:	strd	r8, [r3, #24]
   1b1e0:	mov	r1, #0
   1b1e4:	b	1b548 <read_boolean_binary_expression@@Base+0x4fc>
   1b1e8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b1ec:	str	r3, [fp, #-52]	; 0xffffffcc
   1b1f0:	mov	r0, #12
   1b1f4:	bl	118b8 <malloc@plt>
   1b1f8:	mov	r3, r0
   1b1fc:	str	r3, [fp, #-36]	; 0xffffffdc
   1b200:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1b204:	ldr	r3, [r3, #4]
   1b208:	mov	r1, r3
   1b20c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b210:	bl	18628 <init_node_int@@Base>
   1b214:	ldr	r3, [pc, #896]	; 1b59c <read_boolean_binary_expression@@Base+0x550>
   1b218:	add	r3, pc, r3
   1b21c:	ldrd	r2, [r3, #48]	; 0x30
   1b220:	adds	r1, r2, #1
   1b224:	str	r1, [fp, #-100]	; 0xffffff9c
   1b228:	adc	r3, r3, #0
   1b22c:	str	r3, [fp, #-96]	; 0xffffffa0
   1b230:	ldr	r3, [pc, #872]	; 1b5a0 <read_boolean_binary_expression@@Base+0x554>
   1b234:	add	r3, pc, r3
   1b238:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   1b23c:	strd	r0, [r3, #48]	; 0x30
   1b240:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1b244:	bl	17f50 <free_token_int_value@@Base>
   1b248:	ldr	r3, [pc, #852]	; 1b5a4 <read_boolean_binary_expression@@Base+0x558>
   1b24c:	add	r3, pc, r3
   1b250:	ldrd	r2, [r3, #56]	; 0x38
   1b254:	adds	r1, r2, #1
   1b258:	str	r1, [fp, #-108]	; 0xffffff94
   1b25c:	adc	r3, r3, #0
   1b260:	str	r3, [fp, #-104]	; 0xffffff98
   1b264:	ldr	r3, [pc, #828]	; 1b5a8 <read_boolean_binary_expression@@Base+0x55c>
   1b268:	add	r3, pc, r3
   1b26c:	ldrd	r0, [fp, #-108]	; 0xffffff94
   1b270:	strd	r0, [r3, #56]	; 0x38
   1b274:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b278:	str	r3, [fp, #-40]	; 0xffffffd8
   1b27c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1b280:	ldr	r3, [r3]
   1b284:	mov	r0, r3
   1b288:	bl	11ab0 <next@@Base>
   1b28c:	str	r0, [fp, #-48]	; 0xffffffd0
   1b290:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b294:	ldr	r3, [r3]
   1b298:	cmp	r3, #12
   1b29c:	beq	1b308 <read_boolean_binary_expression@@Base+0x2bc>
   1b2a0:	ldr	r3, [pc, #772]	; 1b5ac <read_boolean_binary_expression@@Base+0x560>
   1b2a4:	add	r3, pc, r3
   1b2a8:	ldrd	r2, [r3, #64]	; 0x40
   1b2ac:	adds	r1, r2, #1
   1b2b0:	str	r1, [fp, #-116]	; 0xffffff8c
   1b2b4:	adc	r3, r3, #0
   1b2b8:	str	r3, [fp, #-112]	; 0xffffff90
   1b2bc:	ldr	r3, [pc, #748]	; 1b5b0 <read_boolean_binary_expression@@Base+0x564>
   1b2c0:	add	r3, pc, r3
   1b2c4:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   1b2c8:	strd	r0, [r3, #64]	; 0x40
   1b2cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1b2d0:	bl	189cc <free_node@@Base>
   1b2d4:	ldr	r3, [pc, #728]	; 1b5b4 <read_boolean_binary_expression@@Base+0x568>
   1b2d8:	add	r3, pc, r3
   1b2dc:	ldrd	r2, [r3, #80]	; 0x50
   1b2e0:	adds	r1, r2, #1
   1b2e4:	str	r1, [fp, #-132]	; 0xffffff7c
   1b2e8:	adc	r3, r3, #0
   1b2ec:	str	r3, [fp, #-128]	; 0xffffff80
   1b2f0:	ldr	r3, [pc, #704]	; 1b5b8 <read_boolean_binary_expression@@Base+0x56c>
   1b2f4:	add	r3, pc, r3
   1b2f8:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   1b2fc:	strd	r0, [r3, #80]	; 0x50
   1b300:	mov	r1, #0
   1b304:	b	1b548 <read_boolean_binary_expression@@Base+0x4fc>
   1b308:	ldr	r3, [pc, #684]	; 1b5bc <read_boolean_binary_expression@@Base+0x570>
   1b30c:	add	r3, pc, r3
   1b310:	ldrd	r2, [r3, #72]	; 0x48
   1b314:	adds	r1, r2, #1
   1b318:	str	r1, [fp, #-124]	; 0xffffff84
   1b31c:	adc	r3, r3, #0
   1b320:	str	r3, [fp, #-120]	; 0xffffff88
   1b324:	ldr	r3, [pc, #660]	; 1b5c0 <read_boolean_binary_expression@@Base+0x574>
   1b328:	add	r3, pc, r3
   1b32c:	ldrd	r0, [fp, #-124]	; 0xffffff84
   1b330:	strd	r0, [r3, #72]	; 0x48
   1b334:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b338:	str	r3, [fp, #-56]	; 0xffffffc8
   1b33c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1b340:	bl	1942c <get_boolean_op_value@@Base>
   1b344:	str	r0, [fp, #-60]	; 0xffffffc4
   1b348:	ldr	r3, [pc, #628]	; 1b5c4 <read_boolean_binary_expression@@Base+0x578>
   1b34c:	add	r3, pc, r3
   1b350:	ldrd	r2, [r3, #88]	; 0x58
   1b354:	adds	r1, r2, #1
   1b358:	str	r1, [fp, #-140]	; 0xffffff74
   1b35c:	adc	r3, r3, #0
   1b360:	str	r3, [fp, #-136]	; 0xffffff78
   1b364:	ldr	r3, [pc, #604]	; 1b5c8 <read_boolean_binary_expression@@Base+0x57c>
   1b368:	add	r3, pc, r3
   1b36c:	ldrd	r0, [fp, #-140]	; 0xffffff74
   1b370:	strd	r0, [r3, #88]	; 0x58
   1b374:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1b378:	bl	18370 <free_token_boolean_op@@Base>
   1b37c:	ldr	r3, [pc, #584]	; 1b5cc <read_boolean_binary_expression@@Base+0x580>
   1b380:	add	r3, pc, r3
   1b384:	ldrd	r2, [r3, #96]	; 0x60
   1b388:	adds	r1, r2, #1
   1b38c:	str	r1, [fp, #-148]	; 0xffffff6c
   1b390:	adc	r3, r3, #0
   1b394:	str	r3, [fp, #-144]	; 0xffffff70
   1b398:	ldr	r3, [pc, #560]	; 1b5d0 <read_boolean_binary_expression@@Base+0x584>
   1b39c:	add	r3, pc, r3
   1b3a0:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   1b3a4:	strd	r0, [r3, #96]	; 0x60
   1b3a8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1b3ac:	ldr	r3, [r3]
   1b3b0:	mov	r0, r3
   1b3b4:	bl	11ab0 <next@@Base>
   1b3b8:	str	r0, [fp, #-48]	; 0xffffffd0
   1b3bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b3c0:	ldr	r3, [r3]
   1b3c4:	cmp	r3, #1
   1b3c8:	beq	1b434 <read_boolean_binary_expression@@Base+0x3e8>
   1b3cc:	ldr	r3, [pc, #512]	; 1b5d4 <read_boolean_binary_expression@@Base+0x588>
   1b3d0:	add	r3, pc, r3
   1b3d4:	ldrd	r2, [r3, #104]	; 0x68
   1b3d8:	adds	r1, r2, #1
   1b3dc:	str	r1, [fp, #-156]	; 0xffffff64
   1b3e0:	adc	r3, r3, #0
   1b3e4:	str	r3, [fp, #-152]	; 0xffffff68
   1b3e8:	ldr	r3, [pc, #488]	; 1b5d8 <read_boolean_binary_expression@@Base+0x58c>
   1b3ec:	add	r3, pc, r3
   1b3f0:	ldrd	r0, [fp, #-156]	; 0xffffff64
   1b3f4:	strd	r0, [r3, #104]	; 0x68
   1b3f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1b3fc:	bl	189cc <free_node@@Base>
   1b400:	ldr	r3, [pc, #468]	; 1b5dc <read_boolean_binary_expression@@Base+0x590>
   1b404:	add	r3, pc, r3
   1b408:	ldrd	r2, [r3, #120]	; 0x78
   1b40c:	adds	r1, r2, #1
   1b410:	str	r1, [fp, #-172]	; 0xffffff54
   1b414:	adc	r3, r3, #0
   1b418:	str	r3, [fp, #-168]	; 0xffffff58
   1b41c:	ldr	r3, [pc, #444]	; 1b5e0 <read_boolean_binary_expression@@Base+0x594>
   1b420:	add	r3, pc, r3
   1b424:	ldrd	r0, [fp, #-172]	; 0xffffff54
   1b428:	strd	r0, [r3, #120]	; 0x78
   1b42c:	mov	r1, #0
   1b430:	b	1b548 <read_boolean_binary_expression@@Base+0x4fc>
   1b434:	ldr	r3, [pc, #424]	; 1b5e4 <read_boolean_binary_expression@@Base+0x598>
   1b438:	add	r3, pc, r3
   1b43c:	ldrd	r2, [r3, #112]	; 0x70
   1b440:	adds	r1, r2, #1
   1b444:	str	r1, [fp, #-164]	; 0xffffff5c
   1b448:	adc	r3, r3, #0
   1b44c:	str	r3, [fp, #-160]	; 0xffffff60
   1b450:	ldr	r3, [pc, #400]	; 1b5e8 <read_boolean_binary_expression@@Base+0x59c>
   1b454:	add	r3, pc, r3
   1b458:	ldrd	r0, [fp, #-164]	; 0xffffff5c
   1b45c:	strd	r0, [r3, #112]	; 0x70
   1b460:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b464:	str	r3, [fp, #-52]	; 0xffffffcc
   1b468:	mov	r0, #12
   1b46c:	bl	118b8 <malloc@plt>
   1b470:	mov	r3, r0
   1b474:	str	r3, [fp, #-36]	; 0xffffffdc
   1b478:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1b47c:	ldr	r3, [r3, #4]
   1b480:	mov	r1, r3
   1b484:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b488:	bl	18628 <init_node_int@@Base>
   1b48c:	ldr	r3, [pc, #344]	; 1b5ec <read_boolean_binary_expression@@Base+0x5a0>
   1b490:	add	r3, pc, r3
   1b494:	ldrd	r2, [r3, #128]	; 0x80
   1b498:	adds	r1, r2, #1
   1b49c:	str	r1, [fp, #-180]	; 0xffffff4c
   1b4a0:	adc	r3, r3, #0
   1b4a4:	str	r3, [fp, #-176]	; 0xffffff50
   1b4a8:	ldr	r3, [pc, #320]	; 1b5f0 <read_boolean_binary_expression@@Base+0x5a4>
   1b4ac:	add	r3, pc, r3
   1b4b0:	ldrd	r0, [fp, #-180]	; 0xffffff4c
   1b4b4:	strd	r0, [r3, #128]	; 0x80
   1b4b8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1b4bc:	bl	17f50 <free_token_int_value@@Base>
   1b4c0:	ldr	r3, [pc, #300]	; 1b5f4 <read_boolean_binary_expression@@Base+0x5a8>
   1b4c4:	add	r3, pc, r3
   1b4c8:	ldrd	r2, [r3, #136]	; 0x88
   1b4cc:	adds	r1, r2, #1
   1b4d0:	str	r1, [fp, #-188]	; 0xffffff44
   1b4d4:	adc	r3, r3, #0
   1b4d8:	str	r3, [fp, #-184]	; 0xffffff48
   1b4dc:	ldr	r3, [pc, #276]	; 1b5f8 <read_boolean_binary_expression@@Base+0x5ac>
   1b4e0:	add	r3, pc, r3
   1b4e4:	ldrd	r0, [fp, #-188]	; 0xffffff44
   1b4e8:	strd	r0, [r3, #136]	; 0x88
   1b4ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b4f0:	str	r3, [fp, #-44]	; 0xffffffd4
   1b4f4:	mov	r0, #20
   1b4f8:	bl	118b8 <malloc@plt>
   1b4fc:	mov	r3, r0
   1b500:	str	r3, [fp, #-32]	; 0xffffffe0
   1b504:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b508:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1b50c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1b510:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b514:	bl	188f8 <init_node_boolean_operator@@Base>
   1b518:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b51c:	ldr	r3, [pc, #216]	; 1b5fc <read_boolean_binary_expression@@Base+0x5b0>
   1b520:	add	r3, pc, r3
   1b524:	ldrd	r2, [r3, #144]	; 0x90
   1b528:	adds	r0, r2, #1
   1b52c:	str	r0, [fp, #-196]	; 0xffffff3c
   1b530:	adc	r3, r3, #0
   1b534:	str	r3, [fp, #-192]	; 0xffffff40
   1b538:	ldr	r3, [pc, #192]	; 1b600 <read_boolean_binary_expression@@Base+0x5b4>
   1b53c:	add	r3, pc, r3
   1b540:	ldrd	r4, [fp, #-196]	; 0xffffff3c
   1b544:	strd	r4, [r3, #144]	; 0x90
   1b548:	mov	r3, r1
   1b54c:	mov	r0, r3
   1b550:	sub	sp, fp, #28
   1b554:	ldrd	r4, [sp]
   1b558:	ldrd	r6, [sp, #8]
   1b55c:	ldrd	r8, [sp, #16]
   1b560:	ldr	fp, [sp, #24]
   1b564:	add	sp, sp, #28
   1b568:	pop	{pc}		; (ldr pc, [sp], #4)
   1b56c:	andeq	r5, r1, r0, lsl r4
   1b570:	strdeq	r5, [r1], -ip
   1b574:	andeq	r5, r1, r4, lsr #7
   1b578:	muleq	r1, r0, r3
   1b57c:	andeq	r5, r1, r4, ror #6
   1b580:	andeq	r5, r1, r8, asr #6
   1b584:	andeq	r5, r1, r4, lsr #6
   1b588:	andeq	r5, r1, r8, lsl #6
   1b58c:	andeq	r5, r1, ip, ror #5
   1b590:	ldrdeq	r5, [r1], -r0
   1b594:			; <UNDEFINED> instruction: 0x000152bc
   1b598:	andeq	r5, r1, r8, lsr #5
   1b59c:	andeq	r5, r1, r8, ror #4
   1b5a0:	andeq	r5, r1, ip, asr #4
   1b5a4:	andeq	r5, r1, r4, lsr r2
   1b5a8:	andeq	r5, r1, r8, lsl r2
   1b5ac:	ldrdeq	r5, [r1], -ip
   1b5b0:	andeq	r5, r1, r0, asr #3
   1b5b4:	andeq	r5, r1, r8, lsr #3
   1b5b8:	andeq	r5, r1, ip, lsl #3
   1b5bc:	andeq	r5, r1, r4, ror r1
   1b5c0:	andeq	r5, r1, r8, asr r1
   1b5c4:	andeq	r5, r1, r4, lsr r1
   1b5c8:	andeq	r5, r1, r8, lsl r1
   1b5cc:	andeq	r5, r1, r0, lsl #2
   1b5d0:	andeq	r5, r1, r4, ror #1
   1b5d4:	strheq	r5, [r1], -r0
   1b5d8:	muleq	r1, r4, r0
   1b5dc:	andeq	r5, r1, ip, ror r0
   1b5e0:	andeq	r5, r1, r0, rrx
   1b5e4:	andeq	r5, r1, r8, asr #32
   1b5e8:	andeq	r5, r1, ip, lsr #32
   1b5ec:	strdeq	r4, [r1], -r0
   1b5f0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1b5f4:			; <UNDEFINED> instruction: 0x00014fbc
   1b5f8:	andeq	r4, r1, r0, lsr #31
   1b5fc:	andeq	r4, r1, r0, ror #30
   1b600:	andeq	r4, r1, r4, asr #30

0001b604 <read_boolean_unary_expression@@Base>:
   1b604:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1b608:	strd	r6, [sp, #8]
   1b60c:	strd	r8, [sp, #16]
   1b610:	str	fp, [sp, #24]
   1b614:	str	lr, [sp, #28]
   1b618:	add	fp, sp, #28
   1b61c:	sub	sp, sp, #104	; 0x68
   1b620:	str	r0, [fp, #-56]	; 0xffffffc8
   1b624:	ldr	r3, [pc, #784]	; 1b93c <read_boolean_unary_expression@@Base+0x338>
   1b628:	add	r3, pc, r3
   1b62c:	ldrd	r2, [r3]
   1b630:	adds	r4, r2, #1
   1b634:	adc	r5, r3, #0
   1b638:	ldr	r3, [pc, #768]	; 1b940 <read_boolean_unary_expression@@Base+0x33c>
   1b63c:	add	r3, pc, r3
   1b640:	strd	r4, [r3]
   1b644:	mov	r3, #0
   1b648:	str	r3, [fp, #-32]	; 0xffffffe0
   1b64c:	mov	r3, #0
   1b650:	str	r3, [fp, #-36]	; 0xffffffdc
   1b654:	mov	r3, #0
   1b658:	str	r3, [fp, #-40]	; 0xffffffd8
   1b65c:	mov	r3, #0
   1b660:	str	r3, [fp, #-44]	; 0xffffffd4
   1b664:	mov	r3, #0
   1b668:	str	r3, [fp, #-48]	; 0xffffffd0
   1b66c:	mov	r0, #20
   1b670:	bl	118b8 <malloc@plt>
   1b674:	mov	r3, r0
   1b678:	str	r3, [fp, #-32]	; 0xffffffe0
   1b67c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1b680:	ldr	r3, [r3]
   1b684:	mov	r0, r3
   1b688:	bl	11ab0 <next@@Base>
   1b68c:	str	r0, [fp, #-44]	; 0xffffffd4
   1b690:	ldr	r3, [pc, #684]	; 1b944 <read_boolean_unary_expression@@Base+0x340>
   1b694:	add	r3, pc, r3
   1b698:	ldrd	r2, [r3, #8]
   1b69c:	adds	r6, r2, #1
   1b6a0:	adc	r7, r3, #0
   1b6a4:	ldr	r3, [pc, #668]	; 1b948 <read_boolean_unary_expression@@Base+0x344>
   1b6a8:	add	r3, pc, r3
   1b6ac:	strd	r6, [r3, #8]
   1b6b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b6b4:	ldr	r3, [r3]
   1b6b8:	cmp	r3, #12
   1b6bc:	beq	1b71c <read_boolean_unary_expression@@Base+0x118>
   1b6c0:	ldr	r3, [pc, #644]	; 1b94c <read_boolean_unary_expression@@Base+0x348>
   1b6c4:	add	r3, pc, r3
   1b6c8:	ldrd	r2, [r3, #16]
   1b6cc:	adds	r1, r2, #1
   1b6d0:	str	r1, [fp, #-68]	; 0xffffffbc
   1b6d4:	adc	r3, r3, #0
   1b6d8:	str	r3, [fp, #-64]	; 0xffffffc0
   1b6dc:	ldr	r3, [pc, #620]	; 1b950 <read_boolean_unary_expression@@Base+0x34c>
   1b6e0:	add	r3, pc, r3
   1b6e4:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   1b6e8:	strd	r0, [r3, #16]
   1b6ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b6f0:	bl	192c4 <free_node_boolean_operator@@Base>
   1b6f4:	ldr	r3, [pc, #600]	; 1b954 <read_boolean_unary_expression@@Base+0x350>
   1b6f8:	add	r3, pc, r3
   1b6fc:	ldrd	r2, [r3, #24]
   1b700:	adds	r8, r2, #1
   1b704:	adc	r9, r3, #0
   1b708:	ldr	r3, [pc, #584]	; 1b958 <read_boolean_unary_expression@@Base+0x354>
   1b70c:	add	r3, pc, r3
   1b710:	strd	r8, [r3, #24]
   1b714:	mov	r1, #0
   1b718:	b	1b918 <read_boolean_unary_expression@@Base+0x314>
   1b71c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1b720:	bl	1942c <get_boolean_op_value@@Base>
   1b724:	str	r0, [fp, #-52]	; 0xffffffcc
   1b728:	ldr	r3, [pc, #556]	; 1b95c <read_boolean_unary_expression@@Base+0x358>
   1b72c:	add	r3, pc, r3
   1b730:	ldrd	r2, [r3, #32]
   1b734:	adds	r1, r2, #1
   1b738:	str	r1, [fp, #-76]	; 0xffffffb4
   1b73c:	adc	r3, r3, #0
   1b740:	str	r3, [fp, #-72]	; 0xffffffb8
   1b744:	ldr	r3, [pc, #532]	; 1b960 <read_boolean_unary_expression@@Base+0x35c>
   1b748:	add	r3, pc, r3
   1b74c:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   1b750:	strd	r0, [r3, #32]
   1b754:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1b758:	bl	18370 <free_token_boolean_op@@Base>
   1b75c:	ldr	r3, [pc, #512]	; 1b964 <read_boolean_unary_expression@@Base+0x360>
   1b760:	add	r3, pc, r3
   1b764:	ldrd	r2, [r3, #40]	; 0x28
   1b768:	adds	r1, r2, #1
   1b76c:	str	r1, [fp, #-84]	; 0xffffffac
   1b770:	adc	r3, r3, #0
   1b774:	str	r3, [fp, #-80]	; 0xffffffb0
   1b778:	ldr	r3, [pc, #488]	; 1b968 <read_boolean_unary_expression@@Base+0x364>
   1b77c:	add	r3, pc, r3
   1b780:	ldrd	r0, [fp, #-84]	; 0xffffffac
   1b784:	strd	r0, [r3, #40]	; 0x28
   1b788:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1b78c:	ldr	r3, [r3]
   1b790:	mov	r0, r3
   1b794:	bl	11ab0 <next@@Base>
   1b798:	str	r0, [fp, #-44]	; 0xffffffd4
   1b79c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b7a0:	ldr	r3, [r3]
   1b7a4:	cmp	r3, #1
   1b7a8:	beq	1b814 <read_boolean_unary_expression@@Base+0x210>
   1b7ac:	ldr	r3, [pc, #440]	; 1b96c <read_boolean_unary_expression@@Base+0x368>
   1b7b0:	add	r3, pc, r3
   1b7b4:	ldrd	r2, [r3, #48]	; 0x30
   1b7b8:	adds	r1, r2, #1
   1b7bc:	str	r1, [fp, #-92]	; 0xffffffa4
   1b7c0:	adc	r3, r3, #0
   1b7c4:	str	r3, [fp, #-88]	; 0xffffffa8
   1b7c8:	ldr	r3, [pc, #416]	; 1b970 <read_boolean_unary_expression@@Base+0x36c>
   1b7cc:	add	r3, pc, r3
   1b7d0:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   1b7d4:	strd	r0, [r3, #48]	; 0x30
   1b7d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b7dc:	bl	192c4 <free_node_boolean_operator@@Base>
   1b7e0:	ldr	r3, [pc, #396]	; 1b974 <read_boolean_unary_expression@@Base+0x370>
   1b7e4:	add	r3, pc, r3
   1b7e8:	ldrd	r2, [r3, #64]	; 0x40
   1b7ec:	adds	r1, r2, #1
   1b7f0:	str	r1, [fp, #-108]	; 0xffffff94
   1b7f4:	adc	r3, r3, #0
   1b7f8:	str	r3, [fp, #-104]	; 0xffffff98
   1b7fc:	ldr	r3, [pc, #372]	; 1b978 <read_boolean_unary_expression@@Base+0x374>
   1b800:	add	r3, pc, r3
   1b804:	ldrd	r0, [fp, #-108]	; 0xffffff94
   1b808:	strd	r0, [r3, #64]	; 0x40
   1b80c:	mov	r1, #0
   1b810:	b	1b918 <read_boolean_unary_expression@@Base+0x314>
   1b814:	ldr	r3, [pc, #352]	; 1b97c <read_boolean_unary_expression@@Base+0x378>
   1b818:	add	r3, pc, r3
   1b81c:	ldrd	r2, [r3, #56]	; 0x38
   1b820:	adds	r1, r2, #1
   1b824:	str	r1, [fp, #-100]	; 0xffffff9c
   1b828:	adc	r3, r3, #0
   1b82c:	str	r3, [fp, #-96]	; 0xffffffa0
   1b830:	ldr	r3, [pc, #328]	; 1b980 <read_boolean_unary_expression@@Base+0x37c>
   1b834:	add	r3, pc, r3
   1b838:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   1b83c:	strd	r0, [r3, #56]	; 0x38
   1b840:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b844:	str	r3, [fp, #-48]	; 0xffffffd0
   1b848:	mov	r0, #12
   1b84c:	bl	118b8 <malloc@plt>
   1b850:	mov	r3, r0
   1b854:	str	r3, [fp, #-36]	; 0xffffffdc
   1b858:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b85c:	ldr	r3, [r3, #4]
   1b860:	mov	r1, r3
   1b864:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b868:	bl	18628 <init_node_int@@Base>
   1b86c:	ldr	r3, [pc, #272]	; 1b984 <read_boolean_unary_expression@@Base+0x380>
   1b870:	add	r3, pc, r3
   1b874:	ldrd	r2, [r3, #72]	; 0x48
   1b878:	adds	r1, r2, #1
   1b87c:	str	r1, [fp, #-116]	; 0xffffff8c
   1b880:	adc	r3, r3, #0
   1b884:	str	r3, [fp, #-112]	; 0xffffff90
   1b888:	ldr	r3, [pc, #248]	; 1b988 <read_boolean_unary_expression@@Base+0x384>
   1b88c:	add	r3, pc, r3
   1b890:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   1b894:	strd	r0, [r3, #72]	; 0x48
   1b898:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1b89c:	bl	17f50 <free_token_int_value@@Base>
   1b8a0:	ldr	r3, [pc, #228]	; 1b98c <read_boolean_unary_expression@@Base+0x388>
   1b8a4:	add	r3, pc, r3
   1b8a8:	ldrd	r2, [r3, #80]	; 0x50
   1b8ac:	adds	r1, r2, #1
   1b8b0:	str	r1, [fp, #-124]	; 0xffffff84
   1b8b4:	adc	r3, r3, #0
   1b8b8:	str	r3, [fp, #-120]	; 0xffffff88
   1b8bc:	ldr	r3, [pc, #204]	; 1b990 <read_boolean_unary_expression@@Base+0x38c>
   1b8c0:	add	r3, pc, r3
   1b8c4:	ldrd	r0, [fp, #-124]	; 0xffffff84
   1b8c8:	strd	r0, [r3, #80]	; 0x50
   1b8cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b8d0:	str	r3, [fp, #-40]	; 0xffffffd8
   1b8d4:	mov	r3, #0
   1b8d8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1b8dc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1b8e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b8e4:	bl	188f8 <init_node_boolean_operator@@Base>
   1b8e8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b8ec:	ldr	r3, [pc, #160]	; 1b994 <read_boolean_unary_expression@@Base+0x390>
   1b8f0:	add	r3, pc, r3
   1b8f4:	ldrd	r2, [r3, #88]	; 0x58
   1b8f8:	adds	r0, r2, #1
   1b8fc:	str	r0, [fp, #-132]	; 0xffffff7c
   1b900:	adc	r3, r3, #0
   1b904:	str	r3, [fp, #-128]	; 0xffffff80
   1b908:	ldr	r3, [pc, #136]	; 1b998 <read_boolean_unary_expression@@Base+0x394>
   1b90c:	add	r3, pc, r3
   1b910:	ldrd	r4, [fp, #-132]	; 0xffffff7c
   1b914:	strd	r4, [r3, #88]	; 0x58
   1b918:	mov	r3, r1
   1b91c:	mov	r0, r3
   1b920:	sub	sp, fp, #28
   1b924:	ldrd	r4, [sp]
   1b928:	ldrd	r6, [sp, #8]
   1b92c:	ldrd	r8, [sp, #16]
   1b930:	ldr	fp, [sp, #24]
   1b934:	add	sp, sp, #28
   1b938:	pop	{pc}		; (ldr pc, [sp], #4)
   1b93c:	strdeq	r4, [r1], -r8
   1b940:	andeq	r4, r1, r4, ror #27
   1b944:	andeq	r4, r1, ip, lsl #27
   1b948:	andeq	r4, r1, r8, ror sp
   1b94c:	andeq	r4, r1, ip, asr sp
   1b950:	andeq	r4, r1, r0, asr #26
   1b954:	andeq	r4, r1, r8, lsr #26
   1b958:	andeq	r4, r1, r4, lsl sp
   1b95c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1b960:	ldrdeq	r4, [r1], -r8
   1b964:	andeq	r4, r1, r0, asr #25
   1b968:	andeq	r4, r1, r4, lsr #25
   1b96c:	andeq	r4, r1, r0, ror ip
   1b970:	andeq	r4, r1, r4, asr ip
   1b974:	andeq	r4, r1, ip, lsr ip
   1b978:	andeq	r4, r1, r0, lsr #24
   1b97c:	andeq	r4, r1, r8, lsl #24
   1b980:	andeq	r4, r1, ip, ror #23
   1b984:			; <UNDEFINED> instruction: 0x00014bb0
   1b988:	muleq	r1, r4, fp
   1b98c:	andeq	r4, r1, ip, ror fp
   1b990:	andeq	r4, r1, r0, ror #22
   1b994:	andeq	r4, r1, r0, lsr fp
   1b998:	andeq	r4, r1, r4, lsl fp
   1b99c:	str	fp, [sp, #-8]!
   1b9a0:	str	lr, [sp, #4]
   1b9a4:	add	fp, sp, #4
   1b9a8:	ldr	r3, [pc, #24]	; 1b9c8 <read_boolean_unary_expression@@Base+0x3c4>
   1b9ac:	add	r3, pc, r3
   1b9b0:	mov	r0, r3
   1b9b4:	bl	1da0c <__gcov_sort_n_vals@@Base+0x4a0>
   1b9b8:	sub	sp, fp, #4
   1b9bc:	ldr	fp, [sp]
   1b9c0:	add	sp, sp, #4
   1b9c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9c8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1b9cc:	str	fp, [sp, #-8]!
   1b9d0:	str	lr, [sp, #4]
   1b9d4:	add	fp, sp, #4
   1b9d8:	bl	1d99c <__gcov_sort_n_vals@@Base+0x430>
   1b9dc:	sub	sp, fp, #4
   1b9e0:	ldr	fp, [sp]
   1b9e4:	add	sp, sp, #4
   1b9e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9ec:	b	1cc90 <read_boolean_unary_expression@@Base+0x168c>
   1b9f0:	push	{r4, r5, r6, r7, r8, lr}
   1b9f4:	subs	r5, r1, #0
   1b9f8:	popeq	{r4, r5, r6, r7, r8, pc}
   1b9fc:	mov	r4, r0
   1ba00:	bl	1b9ec <read_boolean_unary_expression@@Base+0x3e8>
   1ba04:	ldr	r3, [r4]
   1ba08:	ldr	r2, [r4, #4]
   1ba0c:	adds	r6, r3, r0
   1ba10:	adc	r7, r2, r1
   1ba14:	subs	r5, r5, #1
   1ba18:	strd	r6, [r4], #8
   1ba1c:	bne	1ba00 <read_boolean_unary_expression@@Base+0x3fc>
   1ba20:	pop	{r4, r5, r6, r7, r8, pc}
   1ba24:	ldr	r3, [pc, #20]	; 1ba40 <read_boolean_unary_expression@@Base+0x43c>
   1ba28:	ldr	r2, [pc, #20]	; 1ba44 <read_boolean_unary_expression@@Base+0x440>
   1ba2c:	add	r3, pc, r3
   1ba30:	ldr	r3, [r3, r2]
   1ba34:	ldmib	r3, {r0, r3}
   1ba38:	add	r0, r0, r3
   1ba3c:	bx	lr
   1ba40:	andeq	r3, r1, ip, asr #11
   1ba44:	strheq	r0, [r0], -r4
   1ba48:	ldr	r3, [pc, #28]	; 1ba6c <read_boolean_unary_expression@@Base+0x468>
   1ba4c:	ldr	r2, [pc, #28]	; 1ba70 <read_boolean_unary_expression@@Base+0x46c>
   1ba50:	add	r3, pc, r3
   1ba54:	ldr	r3, [r3, r2]
   1ba58:	ldr	r2, [r3]
   1ba5c:	cmp	r2, #0
   1ba60:	ldrne	r0, [r3, #20]
   1ba64:	moveq	r0, #1
   1ba68:	bx	lr
   1ba6c:	andeq	r3, r1, r8, lsr #11
   1ba70:	strheq	r0, [r0], -r4
   1ba74:	bx	lr
   1ba78:	ldr	ip, [pc, #32]	; 1baa0 <read_boolean_unary_expression@@Base+0x49c>
   1ba7c:	mov	r3, #32
   1ba80:	teq	r0, r1
   1ba84:	movmi	r2, ip
   1ba88:	movpl	r2, #0
   1ba8c:	subs	r3, r3, #1
   1ba90:	lsl	r1, r1, #1
   1ba94:	eor	r0, r2, r0, lsl #1
   1ba98:	bne	1ba80 <read_boolean_unary_expression@@Base+0x47c>
   1ba9c:	bx	lr
   1baa0:	strbeq	r1, [r1], #3511	; 0xdb7
   1baa4:	ldr	r2, [pc, #60]	; 1bae8 <read_boolean_unary_expression@@Base+0x4e4>
   1baa8:	ldr	r3, [pc, #60]	; 1baec <read_boolean_unary_expression@@Base+0x4e8>
   1baac:	add	r2, pc, r2
   1bab0:	push	{r4, lr}
   1bab4:	ldr	r4, [r2, r3]
   1bab8:	ldr	r0, [r4]
   1babc:	cmp	r0, #0
   1bac0:	popeq	{r4, pc}
   1bac4:	ldr	r3, [pc, #36]	; 1baf0 <read_boolean_unary_expression@@Base+0x4ec>
   1bac8:	ldr	r3, [r2, r3]
   1bacc:	ldr	r3, [r3]
   1bad0:	cmp	r0, r3
   1bad4:	popeq	{r4, pc}
   1bad8:	bl	1193c <fclose@plt>
   1badc:	mov	r3, #0
   1bae0:	str	r3, [r4]
   1bae4:	pop	{r4, pc}
   1bae8:	andeq	r3, r1, ip, asr #10
   1baec:	strheq	r0, [r0], -r8
   1baf0:	andeq	r0, r0, r0, lsr #1
   1baf4:	ldr	r3, [pc, #76]	; 1bb48 <read_boolean_unary_expression@@Base+0x544>
   1baf8:	ldr	r1, [pc, #76]	; 1bb4c <read_boolean_unary_expression@@Base+0x548>
   1bafc:	add	r3, pc, r3
   1bb00:	push	{r4, r5, r6, lr}
   1bb04:	mov	r5, r0
   1bb08:	ldr	r4, [r3, r1]
   1bb0c:	lsl	r1, r0, #2
   1bb10:	mov	r0, r4
   1bb14:	mov	r2, #1
   1bb18:	ldr	r3, [r0], #28
   1bb1c:	bl	11870 <fwrite@plt>
   1bb20:	cmp	r0, #1
   1bb24:	movne	r3, #1
   1bb28:	ldr	r0, [r4, #8]
   1bb2c:	strne	r3, [r4, #20]
   1bb30:	ldr	r3, [r4, #4]
   1bb34:	sub	r0, r0, r5
   1bb38:	add	r3, r3, r5
   1bb3c:	str	r3, [r4, #4]
   1bb40:	str	r0, [r4, #8]
   1bb44:	pop	{r4, r5, r6, pc}
   1bb48:	strdeq	r3, [r1], -ip
   1bb4c:	strheq	r0, [r0], -r4
   1bb50:	ldr	r3, [pc, #80]	; 1bba8 <read_boolean_unary_expression@@Base+0x5a4>
   1bb54:	ldr	r2, [pc, #80]	; 1bbac <read_boolean_unary_expression@@Base+0x5a8>
   1bb58:	add	r3, pc, r3
   1bb5c:	push	{r4, r5, r6, lr}
   1bb60:	mov	r5, r0
   1bb64:	ldr	r4, [r3, r2]
   1bb68:	ldr	r3, [r4, #8]
   1bb6c:	cmp	r3, #1024	; 0x400
   1bb70:	bcs	1bb88 <read_boolean_unary_expression@@Base+0x584>
   1bb74:	add	r0, r3, #7
   1bb78:	add	r3, r5, r3
   1bb7c:	str	r3, [r4, #8]
   1bb80:	add	r0, r4, r0, lsl #2
   1bb84:	pop	{r4, r5, r6, pc}
   1bb88:	mov	r0, #1024	; 0x400
   1bb8c:	bl	1baf4 <read_boolean_unary_expression@@Base+0x4f0>
   1bb90:	ldr	r3, [r4, #8]
   1bb94:	cmp	r3, #0
   1bb98:	addne	r2, r4, #4096	; 0x1000
   1bb9c:	ldrne	r2, [r2, #28]
   1bba0:	strne	r2, [r4, #28]
   1bba4:	b	1bb74 <read_boolean_unary_expression@@Base+0x570>
   1bba8:	andeq	r3, r1, r0, lsr #9
   1bbac:	strheq	r0, [r0], -r4
   1bbb0:	ldr	r3, [pc, #192]	; 1bc78 <read_boolean_unary_expression@@Base+0x674>
   1bbb4:	ldr	r2, [pc, #192]	; 1bc7c <read_boolean_unary_expression@@Base+0x678>
   1bbb8:	add	r3, pc, r3
   1bbbc:	push	{r4, r5, r6, lr}
   1bbc0:	ldr	r4, [r3, r2]
   1bbc4:	ldr	r2, [r4, #24]
   1bbc8:	ldr	r3, [r4, #8]
   1bbcc:	ldr	ip, [r4, #12]
   1bbd0:	cmp	r2, #0
   1bbd4:	sub	ip, ip, r3
   1bbd8:	ble	1bc54 <read_boolean_unary_expression@@Base+0x650>
   1bbdc:	cmp	ip, r0
   1bbe0:	mov	r5, r0
   1bbe4:	bcs	1bc40 <read_boolean_unary_expression@@Base+0x63c>
   1bbe8:	ldr	r2, [r4, #4]
   1bbec:	cmp	ip, #0
   1bbf0:	add	r2, r2, r3
   1bbf4:	str	r2, [r4, #4]
   1bbf8:	addne	r2, r4, #28
   1bbfc:	mov	r0, r4
   1bc00:	ldrne	r3, [r2, r3, lsl #2]
   1bc04:	mov	r6, #0
   1bc08:	strne	r3, [r4, #28]
   1bc0c:	ldr	r3, [r0], #28
   1bc10:	mov	r2, #4096	; 0x1000
   1bc14:	add	r0, r0, ip, lsl #2
   1bc18:	mov	r1, #1
   1bc1c:	str	ip, [r4, #12]
   1bc20:	str	r6, [r4, #8]
   1bc24:	bl	11888 <fread@plt>
   1bc28:	ldr	r3, [r4, #12]
   1bc2c:	add	r0, r3, r0, lsr #2
   1bc30:	cmp	r0, r5
   1bc34:	str	r0, [r4, #12]
   1bc38:	bcc	1bc5c <read_boolean_unary_expression@@Base+0x658>
   1bc3c:	ldr	r3, [r4, #8]
   1bc40:	add	r0, r3, #7
   1bc44:	add	r5, r5, r3
   1bc48:	str	r5, [r4, #8]
   1bc4c:	add	r0, r4, r0, lsl #2
   1bc50:	pop	{r4, r5, r6, pc}
   1bc54:	mov	r0, #0
   1bc58:	pop	{r4, r5, r6, pc}
   1bc5c:	ldr	r3, [r4, #16]
   1bc60:	str	r6, [r4, #12]
   1bc64:	add	r5, r5, r3
   1bc68:	sub	r5, r5, r0
   1bc6c:	str	r5, [r4, #16]
   1bc70:	mov	r0, r6
   1bc74:	pop	{r4, r5, r6, pc}
   1bc78:	andeq	r3, r1, r0, asr #8
   1bc7c:	strheq	r0, [r0], -r4
   1bc80:	push	{r4, r5, r6, lr}
   1bc84:	ldr	r4, [pc, #92]	; 1bce8 <read_boolean_unary_expression@@Base+0x6e4>
   1bc88:	ldr	r3, [pc, #92]	; 1bcec <read_boolean_unary_expression@@Base+0x6e8>
   1bc8c:	add	r4, pc, r4
   1bc90:	ldr	r5, [r4, r3]
   1bc94:	ldr	r0, [r5]
   1bc98:	cmp	r0, #0
   1bc9c:	popne	{r4, r5, r6, pc}
   1bca0:	ldr	r0, [pc, #72]	; 1bcf0 <read_boolean_unary_expression@@Base+0x6ec>
   1bca4:	add	r0, pc, r0
   1bca8:	bl	118a0 <getenv@plt>
   1bcac:	cmp	r0, #0
   1bcb0:	beq	1bce0 <read_boolean_unary_expression@@Base+0x6dc>
   1bcb4:	ldr	r1, [pc, #56]	; 1bcf4 <read_boolean_unary_expression@@Base+0x6f0>
   1bcb8:	add	r1, pc, r1
   1bcbc:	bl	11978 <fopen64@plt>
   1bcc0:	str	r0, [r5]
   1bcc4:	cmp	r0, #0
   1bcc8:	popne	{r4, r5, r6, pc}
   1bccc:	ldr	r3, [pc, #36]	; 1bcf8 <read_boolean_unary_expression@@Base+0x6f4>
   1bcd0:	ldr	r3, [r4, r3]
   1bcd4:	ldr	r0, [r3]
   1bcd8:	str	r0, [r5]
   1bcdc:	pop	{r4, r5, r6, pc}
   1bce0:	ldr	r0, [r5]
   1bce4:	b	1bcc4 <read_boolean_unary_expression@@Base+0x6c0>
   1bce8:	andeq	r3, r1, ip, ror #6
   1bcec:	strheq	r0, [r0], -r8
   1bcf0:	andeq	r2, r0, r4, lsr #19
   1bcf4:	andeq	r2, r0, r0, lsr #19
   1bcf8:	andeq	r0, r0, r0, lsr #1
   1bcfc:	push	{r0, r1, r2, r3}
   1bd00:	push	{lr}		; (str lr, [sp, #-4]!)
   1bd04:	sub	sp, sp, #12
   1bd08:	add	r3, sp, #20
   1bd0c:	str	r3, [sp, #4]
   1bd10:	bl	1bc80 <read_boolean_unary_expression@@Base+0x67c>
   1bd14:	ldr	r1, [sp, #16]
   1bd18:	ldr	r2, [sp, #4]
   1bd1c:	bl	11960 <vfprintf@plt>
   1bd20:	add	sp, sp, #12
   1bd24:	pop	{lr}		; (ldr lr, [sp], #4)
   1bd28:	add	sp, sp, #16
   1bd2c:	bx	lr
   1bd30:	push	{r4, r5, r6, r7, r8, lr}
   1bd34:	subs	r6, r1, #0
   1bd38:	beq	1bd8c <read_boolean_unary_expression@@Base+0x788>
   1bd3c:	cmp	r2, #0
   1bd40:	ldr	r7, [r6]
   1bd44:	beq	1bd7c <read_boolean_unary_expression@@Base+0x778>
   1bd48:	add	r4, r0, #12
   1bd4c:	add	r5, r4, r2, lsl #2
   1bd50:	mov	r3, #0
   1bd54:	ldr	r2, [r4, #4]!
   1bd58:	add	r1, r6, r3, lsl #3
   1bd5c:	cmp	r2, #0
   1bd60:	add	r8, r3, #1
   1bd64:	beq	1bd74 <read_boolean_unary_expression@@Base+0x770>
   1bd68:	ldr	r0, [r1, #28]
   1bd6c:	bl	1184c <free@plt>
   1bd70:	mov	r3, r8
   1bd74:	cmp	r4, r5
   1bd78:	bne	1bd54 <read_boolean_unary_expression@@Base+0x750>
   1bd7c:	mov	r0, r6
   1bd80:	bl	1184c <free@plt>
   1bd84:	mov	r0, r7
   1bd88:	pop	{r4, r5, r6, r7, r8, pc}
   1bd8c:	mov	r7, r6
   1bd90:	b	1bd84 <read_boolean_unary_expression@@Base+0x780>
   1bd94:	push	{r4, r5}
   1bd98:	mov	r4, r0
   1bd9c:	mov	r5, r1
   1bda0:	orrs	r3, r4, r5
   1bda4:	beq	1bde8 <read_boolean_unary_expression@@Base+0x7e4>
   1bda8:	cmp	r1, #0
   1bdac:	clzeq	r2, r0
   1bdb0:	addeq	r2, r2, #32
   1bdb4:	clzne	r2, r1
   1bdb8:	rsb	r3, r2, #63	; 0x3f
   1bdbc:	cmp	r3, #1
   1bdc0:	bls	1bde8 <read_boolean_unary_expression@@Base+0x7e4>
   1bdc4:	rsb	r1, r2, #61	; 0x3d
   1bdc8:	rsb	r0, r1, #32
   1bdcc:	lsr	r3, r4, r1
   1bdd0:	sub	r1, r1, #32
   1bdd4:	orr	r3, r3, r5, lsl r0
   1bdd8:	orr	r3, r3, r5, lsr r1
   1bddc:	rsb	r2, r2, #1073741886	; 0x4000003e
   1bde0:	and	r0, r3, #3
   1bde4:	add	r0, r0, r2, lsl #2
   1bde8:	pop	{r4, r5}
   1bdec:	bx	lr
   1bdf0:	push	{r4, r5, r6, lr}
   1bdf4:	mov	r1, r3
   1bdf8:	mov	r6, r0
   1bdfc:	mov	r0, r2
   1be00:	mov	r4, r2
   1be04:	mov	r5, r3
   1be08:	bl	1bd94 <read_boolean_unary_expression@@Base+0x790>
   1be0c:	add	r0, r0, r0, lsl #1
   1be10:	lsl	r0, r0, #3
   1be14:	add	r3, r6, r0
   1be18:	ldr	r1, [r6, r0]
   1be1c:	ldr	r2, [r3, #16]
   1be20:	add	r1, r1, #1
   1be24:	str	r1, [r6, r0]
   1be28:	ldrd	r0, [r3, #8]
   1be2c:	ldr	ip, [r3, #20]
   1be30:	adds	r2, r2, r4
   1be34:	str	r2, [r3, #16]
   1be38:	adc	r2, ip, r5
   1be3c:	cmp	r4, r0
   1be40:	sbcs	r1, r5, r1
   1be44:	str	r2, [r3, #20]
   1be48:	strdlt	r4, [r3, #8]
   1be4c:	pop	{r4, r5, r6, pc}
   1be50:	ldr	r3, [r1, #8]
   1be54:	cmp	r3, #0
   1be58:	bxeq	lr
   1be5c:	add	r2, r1, #6016	; 0x1780
   1be60:	push	{r4, r5, r6, r7, r8, lr}
   1be64:	mov	r3, r1
   1be68:	mov	r8, r1
   1be6c:	mov	r7, r0
   1be70:	ldrd	r4, [r1, #24]
   1be74:	add	r2, r2, #32
   1be78:	mov	ip, #0
   1be7c:	mov	r0, #0
   1be80:	mov	r1, #0
   1be84:	str	ip, [r3, #40]	; 0x28
   1be88:	strd	r4, [r3, #48]	; 0x30
   1be8c:	strd	r0, [r3, #56]	; 0x38
   1be90:	add	r3, r3, #24
   1be94:	cmp	r3, r2
   1be98:	bne	1be84 <read_boolean_unary_expression@@Base+0x880>
   1be9c:	cmp	r7, #0
   1bea0:	popeq	{r4, r5, r6, r7, r8, pc}
   1bea4:	add	r8, r8, #40	; 0x28
   1bea8:	ldr	r3, [r7, #16]
   1beac:	cmp	r3, #0
   1beb0:	beq	1bf38 <read_boolean_unary_expression@@Base+0x934>
   1beb4:	ldr	r2, [r7, #52]	; 0x34
   1beb8:	cmp	r2, #0
   1bebc:	beq	1bf38 <read_boolean_unary_expression@@Base+0x934>
   1bec0:	mov	r6, #0
   1bec4:	b	1bed4 <read_boolean_unary_expression@@Base+0x8d0>
   1bec8:	add	r6, r6, #1
   1becc:	cmp	r2, r6
   1bed0:	beq	1bf38 <read_boolean_unary_expression@@Base+0x934>
   1bed4:	ldr	r3, [r7, #56]	; 0x38
   1bed8:	ldr	r5, [r3, r6, lsl #2]
   1bedc:	cmp	r5, #0
   1bee0:	beq	1bec8 <read_boolean_unary_expression@@Base+0x8c4>
   1bee4:	ldr	r3, [r5]
   1bee8:	cmp	r3, r7
   1beec:	bne	1bec8 <read_boolean_unary_expression@@Base+0x8c4>
   1bef0:	ldr	r3, [r5, #16]
   1bef4:	cmp	r3, #0
   1bef8:	beq	1bec8 <read_boolean_unary_expression@@Base+0x8c4>
   1befc:	mov	r4, #0
   1bf00:	ldr	r2, [r5, #20]
   1bf04:	lsl	r3, r4, #3
   1bf08:	add	r2, r2, r3
   1bf0c:	mov	r0, r8
   1bf10:	ldrd	r2, [r2]
   1bf14:	bl	1bdf0 <read_boolean_unary_expression@@Base+0x7ec>
   1bf18:	ldr	r3, [r5, #16]
   1bf1c:	add	r4, r4, #1
   1bf20:	cmp	r3, r4
   1bf24:	bhi	1bf00 <read_boolean_unary_expression@@Base+0x8fc>
   1bf28:	ldr	r2, [r7, #52]	; 0x34
   1bf2c:	add	r6, r6, #1
   1bf30:	cmp	r2, r6
   1bf34:	bne	1bed4 <read_boolean_unary_expression@@Base+0x8d0>
   1bf38:	ldr	r7, [r7, #4]
   1bf3c:	cmp	r7, #0
   1bf40:	bne	1bea8 <read_boolean_unary_expression@@Base+0x8a4>
   1bf44:	pop	{r4, r5, r6, r7, r8, pc}
   1bf48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf4c:	sub	sp, sp, #12
   1bf50:	mov	r6, r0
   1bf54:	str	r0, [sp, #4]
   1bf58:	mov	r8, r2
   1bf5c:	mov	r0, r1
   1bf60:	mov	r4, r1
   1bf64:	ldr	r2, [pc, #364]	; 1c0d8 <read_boolean_unary_expression@@Base+0xad4>
   1bf68:	mov	r1, #0
   1bf6c:	bl	11924 <memset@plt>
   1bf70:	mov	r5, #0
   1bf74:	cmp	r6, #0
   1bf78:	str	r5, [r8]
   1bf7c:	beq	1c0bc <read_boolean_unary_expression@@Base+0xab8>
   1bf80:	mov	r9, r5
   1bf84:	ldr	r0, [r6, #12]
   1bf88:	bl	118f4 <strlen@plt>
   1bf8c:	cmp	r5, r0
   1bf90:	strcc	r0, [r8]
   1bf94:	mov	r0, r9
   1bf98:	ldr	r1, [r6, #8]
   1bf9c:	bl	1ba78 <read_boolean_unary_expression@@Base+0x474>
   1bfa0:	ldr	r7, [r6, #52]	; 0x34
   1bfa4:	mov	r1, r7
   1bfa8:	bl	1ba78 <read_boolean_unary_expression@@Base+0x474>
   1bfac:	cmp	r7, #0
   1bfb0:	mov	r9, r0
   1bfb4:	beq	1c0a8 <read_boolean_unary_expression@@Base+0xaa4>
   1bfb8:	ldr	r5, [r6, #56]	; 0x38
   1bfbc:	add	r7, r5, r7, lsl #2
   1bfc0:	sub	r7, r7, #4
   1bfc4:	sub	r5, r5, #4
   1bfc8:	b	1bff8 <read_boolean_unary_expression@@Base+0x9f4>
   1bfcc:	ldr	r3, [sl]
   1bfd0:	mov	r0, r9
   1bfd4:	cmp	r3, r6
   1bfd8:	beq	1c014 <read_boolean_unary_expression@@Base+0xa10>
   1bfdc:	mov	r1, #0
   1bfe0:	bl	1ba78 <read_boolean_unary_expression@@Base+0x474>
   1bfe4:	mov	r1, #0
   1bfe8:	bl	1ba78 <read_boolean_unary_expression@@Base+0x474>
   1bfec:	mov	r9, r0
   1bff0:	cmp	r5, r7
   1bff4:	beq	1c0a8 <read_boolean_unary_expression@@Base+0xaa4>
   1bff8:	ldr	sl, [r5, #4]!
   1bffc:	cmp	sl, #0
   1c000:	bne	1bfcc <read_boolean_unary_expression@@Base+0x9c8>
   1c004:	mov	r1, sl
   1c008:	mov	r0, r9
   1c00c:	bl	1ba78 <read_boolean_unary_expression@@Base+0x474>
   1c010:	b	1bfe4 <read_boolean_unary_expression@@Base+0x9e0>
   1c014:	ldr	r1, [sl, #12]
   1c018:	bl	1ba78 <read_boolean_unary_expression@@Base+0x474>
   1c01c:	ldr	r1, [sl, #8]
   1c020:	bl	1ba78 <read_boolean_unary_expression@@Base+0x474>
   1c024:	ldr	r3, [r6, #16]
   1c028:	cmp	r3, #0
   1c02c:	mov	r9, r0
   1c030:	beq	1bff0 <read_boolean_unary_expression@@Base+0x9ec>
   1c034:	ldr	fp, [sl, #16]
   1c038:	ldr	r3, [r4, #8]
   1c03c:	mov	r1, fp
   1c040:	add	r3, r3, fp
   1c044:	str	r3, [r4, #8]
   1c048:	bl	1ba78 <read_boolean_unary_expression@@Base+0x474>
   1c04c:	cmp	fp, #0
   1c050:	mov	r9, r0
   1c054:	beq	1bff0 <read_boolean_unary_expression@@Base+0x9ec>
   1c058:	ldr	r2, [sl, #20]
   1c05c:	ldr	r3, [r4, #16]
   1c060:	add	lr, r2, fp, lsl #3
   1c064:	ldr	ip, [r4, #20]
   1c068:	sub	lr, lr, #8
   1c06c:	sub	r2, r2, #8
   1c070:	ldrd	r0, [r2, #8]!
   1c074:	ldrd	sl, [r4, #24]
   1c078:	adds	r3, r3, r0
   1c07c:	adc	ip, ip, r1
   1c080:	str	ip, [r4, #20]
   1c084:	str	r3, [r4, #16]
   1c088:	ldrd	r0, [r2]
   1c08c:	cmp	sl, r0
   1c090:	sbcs	sl, fp, r1
   1c094:	strdlt	r0, [r4, #24]
   1c098:	cmp	lr, r2
   1c09c:	bne	1c070 <read_boolean_unary_expression@@Base+0xa6c>
   1c0a0:	cmp	r5, r7
   1c0a4:	bne	1bff8 <read_boolean_unary_expression@@Base+0x9f4>
   1c0a8:	ldr	r6, [r6, #4]
   1c0ac:	cmp	r6, #0
   1c0b0:	beq	1c0c0 <read_boolean_unary_expression@@Base+0xabc>
   1c0b4:	ldr	r5, [r8]
   1c0b8:	b	1bf84 <read_boolean_unary_expression@@Base+0x980>
   1c0bc:	ldr	r9, [sp, #4]
   1c0c0:	ldr	r0, [sp, #4]
   1c0c4:	mov	r1, r4
   1c0c8:	bl	1be50 <read_boolean_unary_expression@@Base+0x84c>
   1c0cc:	mov	r0, r9
   1c0d0:	add	sp, sp, #12
   1c0d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0d8:	andeq	r1, r0, r8, asr #15
   1c0dc:	push	{r4, r5, r6, lr}
   1c0e0:	mov	r4, r0
   1c0e4:	ldr	r0, [pc, #192]	; 1c1ac <read_boolean_unary_expression@@Base+0xba8>
   1c0e8:	add	r0, pc, r0
   1c0ec:	bl	118a0 <getenv@plt>
   1c0f0:	subs	r3, r0, #0
   1c0f4:	beq	1c100 <read_boolean_unary_expression@@Base+0xafc>
   1c0f8:	bl	1196c <atoi@plt>
   1c0fc:	bic	r3, r0, r0, asr #31
   1c100:	ldr	r0, [pc, #168]	; 1c1b0 <read_boolean_unary_expression@@Base+0xbac>
   1c104:	str	r3, [r4, #8]
   1c108:	add	r0, pc, r0
   1c10c:	bl	118a0 <getenv@plt>
   1c110:	subs	r6, r0, #0
   1c114:	beq	1c184 <read_boolean_unary_expression@@Base+0xb80>
   1c118:	bl	118f4 <strlen@plt>
   1c11c:	ldr	r3, [r4, #4]
   1c120:	add	r3, r3, #2
   1c124:	cmp	r0, #0
   1c128:	bne	1c164 <read_boolean_unary_expression@@Base+0xb60>
   1c12c:	ldr	r2, [r4, #8]
   1c130:	cmp	r2, #0
   1c134:	beq	1c198 <read_boolean_unary_expression@@Base+0xb94>
   1c138:	ldr	r6, [pc, #116]	; 1c1b4 <read_boolean_unary_expression@@Base+0xbb0>
   1c13c:	mov	r5, #1
   1c140:	add	r6, pc, r6
   1c144:	str	r5, [r4, #12]
   1c148:	add	r0, r3, r5
   1c14c:	bl	118b8 <malloc@plt>
   1c150:	mov	r2, r5
   1c154:	mov	r1, r6
   1c158:	str	r0, [r4]
   1c15c:	pop	{r4, r5, r6, lr}
   1c160:	b	11858 <memcpy@plt>
   1c164:	sub	r5, r0, #1
   1c168:	ldrb	r2, [r6, r5]
   1c16c:	cmp	r2, #47	; 0x2f
   1c170:	movne	r5, r0
   1c174:	bne	1c144 <read_boolean_unary_expression@@Base+0xb40>
   1c178:	cmp	r5, #0
   1c17c:	bne	1c144 <read_boolean_unary_expression@@Base+0xb40>
   1c180:	b	1c12c <read_boolean_unary_expression@@Base+0xb28>
   1c184:	ldr	r2, [r4, #8]
   1c188:	ldr	r3, [r4, #4]
   1c18c:	cmp	r2, #0
   1c190:	add	r3, r3, #2
   1c194:	bne	1c138 <read_boolean_unary_expression@@Base+0xb34>
   1c198:	str	r2, [r4, #12]
   1c19c:	mov	r0, r3
   1c1a0:	bl	118b8 <malloc@plt>
   1c1a4:	str	r0, [r4]
   1c1a8:	pop	{r4, r5, r6, pc}
   1c1ac:	andeq	r2, r0, r8, ror r5
   1c1b0:	andeq	r2, r0, ip, ror #10
   1c1b4:	andeq	r2, r0, ip, lsl r5
   1c1b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1bc:	sub	sp, sp, #6080	; 0x17c0
   1c1c0:	sub	sp, sp, #36	; 0x24
   1c1c4:	mov	r3, r0
   1c1c8:	str	r1, [sp, #40]	; 0x28
   1c1cc:	mov	r1, #0
   1c1d0:	mov	r4, r1
   1c1d4:	str	r0, [sp, #56]	; 0x38
   1c1d8:	add	r7, r3, #6016	; 0x1780
   1c1dc:	add	r0, sp, #64	; 0x40
   1c1e0:	add	r6, sp, #2016	; 0x7e0
   1c1e4:	ldr	r2, [pc, #984]	; 1c5c4 <read_boolean_unary_expression@@Base+0xfc0>
   1c1e8:	mov	r5, #251	; 0xfb
   1c1ec:	str	r0, [sp, #60]	; 0x3c
   1c1f0:	str	r5, [sp, #52]	; 0x34
   1c1f4:	str	r6, [sp, #36]	; 0x24
   1c1f8:	mov	r9, r4
   1c1fc:	bl	11924 <memset@plt>
   1c200:	mov	sl, r4
   1c204:	add	r3, r7, #8
   1c208:	mov	r0, r4
   1c20c:	str	r3, [sp, #48]	; 0x30
   1c210:	sub	r3, r6, #1952	; 0x7a0
   1c214:	str	r3, [sp, #44]	; 0x2c
   1c218:	ldr	r3, [sp, #48]	; 0x30
   1c21c:	ldr	r2, [r3, #16]
   1c220:	ldr	r7, [r3]
   1c224:	str	r2, [sp, #16]
   1c228:	ldr	r2, [r3, #20]
   1c22c:	cmp	r7, #0
   1c230:	str	r2, [sp, #20]
   1c234:	beq	1c554 <read_boolean_unary_expression@@Base+0xf50>
   1c238:	ldrd	r2, [r3, #8]
   1c23c:	str	r9, [sp, #12]
   1c240:	strd	r2, [sp, #24]
   1c244:	b	1c324 <read_boolean_unary_expression@@Base+0xd20>
   1c248:	bls	1c5b8 <read_boolean_unary_expression@@Base+0xfb4>
   1c24c:	ldr	r3, [sp, #12]
   1c250:	mov	r2, r4
   1c254:	umull	r0, r1, r7, r3
   1c258:	mov	r3, #0
   1c25c:	mla	r1, r7, sl, r1
   1c260:	bl	1dad4 <__gcov_sort_n_vals@@Base+0x568>
   1c264:	mov	r6, r0
   1c268:	mov	r8, r1
   1c26c:	ldr	r3, [sp, #12]
   1c270:	sub	r4, r4, r7
   1c274:	subs	r3, r3, r6
   1c278:	sbc	sl, sl, r8
   1c27c:	mov	fp, r7
   1c280:	mov	r7, #0
   1c284:	str	r3, [sp, #12]
   1c288:	ldr	r0, [sp, #16]
   1c28c:	ldr	r3, [sp, #20]
   1c290:	str	r7, [sp, #16]
   1c294:	str	r7, [sp, #20]
   1c298:	adds	r6, r6, r0
   1c29c:	ldrd	r0, [sp]
   1c2a0:	adc	r8, r8, r3
   1c2a4:	bl	1bd94 <read_boolean_unary_expression@@Base+0x790>
   1c2a8:	ldr	r3, [sp, #44]	; 0x2c
   1c2ac:	add	r1, r0, r0, lsl #1
   1c2b0:	lsl	r1, r1, #3
   1c2b4:	add	ip, r3, r1
   1c2b8:	ldr	r3, [sp, #36]	; 0x24
   1c2bc:	ldr	lr, [ip, #16]
   1c2c0:	add	r1, r3, r1
   1c2c4:	adds	r6, lr, r6
   1c2c8:	ldr	lr, [ip, #20]
   1c2cc:	ldrd	r2, [ip, #8]
   1c2d0:	adc	lr, lr, r8
   1c2d4:	ldrd	r8, [sp]
   1c2d8:	str	lr, [sp, #32]
   1c2dc:	orrs	lr, r2, r3
   1c2e0:	moveq	lr, #1
   1c2e4:	movne	lr, #0
   1c2e8:	cmp	r8, r2
   1c2ec:	sbcs	r3, r9, r3
   1c2f0:	orrlt	lr, lr, #1
   1c2f4:	cmp	lr, #0
   1c2f8:	str	r6, [ip, #16]
   1c2fc:	ldr	r6, [r1, #-1952]	; 0xfffff860
   1c300:	ldr	r3, [sp, #32]
   1c304:	strdne	r8, [ip, #8]
   1c308:	cmp	r4, #0
   1c30c:	add	fp, r6, fp
   1c310:	subeq	r5, r5, #1
   1c314:	cmp	r7, #0
   1c318:	str	r3, [ip, #20]
   1c31c:	str	fp, [r1, #-1952]	; 0xfffff860
   1c320:	beq	1c550 <read_boolean_unary_expression@@Base+0xf4c>
   1c324:	cmp	r4, #0
   1c328:	beq	1c3ac <read_boolean_unary_expression@@Base+0xda8>
   1c32c:	add	r2, r5, r5, lsl #1
   1c330:	ldr	r3, [sp, #40]	; 0x28
   1c334:	add	r2, r3, r2, lsl #3
   1c338:	ldrd	r0, [sp, #24]
   1c33c:	ldr	r3, [r2, #8]
   1c340:	ldr	r2, [r2, #12]
   1c344:	adds	r3, r0, r3
   1c348:	str	r3, [sp]
   1c34c:	adc	r3, r1, r2
   1c350:	cmp	r4, r7
   1c354:	str	r3, [sp, #4]
   1c358:	bcs	1c248 <read_boolean_unary_expression@@Base+0xc44>
   1c35c:	ldr	r6, [sp, #16]
   1c360:	ldr	r8, [sp, #20]
   1c364:	mov	r2, r7
   1c368:	umull	r0, r1, r4, r6
   1c36c:	mov	r3, #0
   1c370:	mla	r1, r4, r8, r1
   1c374:	bl	1dad4 <__gcov_sort_n_vals@@Base+0x568>
   1c378:	sub	r7, r7, r4
   1c37c:	mov	fp, r4
   1c380:	mov	r4, #0
   1c384:	subs	r2, r6, r0
   1c388:	str	r2, [sp, #16]
   1c38c:	sbc	r2, r8, r1
   1c390:	ldr	r6, [sp, #12]
   1c394:	mov	r8, sl
   1c398:	mov	r3, r1
   1c39c:	str	r2, [sp, #20]
   1c3a0:	str	r4, [sp, #12]
   1c3a4:	mov	sl, r4
   1c3a8:	b	1c298 <read_boolean_unary_expression@@Base+0xc94>
   1c3ac:	cmp	r5, #0
   1c3b0:	blt	1c5b0 <read_boolean_unary_expression@@Base+0xfac>
   1c3b4:	ldr	r3, [sp, #40]	; 0x28
   1c3b8:	add	r2, r5, r5, lsl #1
   1c3bc:	ldr	r4, [r3, r2, lsl #3]
   1c3c0:	add	r2, r3, r2, lsl #3
   1c3c4:	cmp	r4, #0
   1c3c8:	bne	1c540 <read_boolean_unary_expression@@Base+0xf3c>
   1c3cc:	mov	r3, r2
   1c3d0:	ldr	r9, [sp, #12]
   1c3d4:	b	1c3e8 <read_boolean_unary_expression@@Base+0xde4>
   1c3d8:	ldr	r4, [r3]
   1c3dc:	mov	r2, r3
   1c3e0:	cmp	r4, #0
   1c3e4:	bne	1c540 <read_boolean_unary_expression@@Base+0xf3c>
   1c3e8:	subs	r5, r5, #1
   1c3ec:	sub	r3, r3, #24
   1c3f0:	bcs	1c3d8 <read_boolean_unary_expression@@Base+0xdd4>
   1c3f4:	ldr	r2, [sp, #52]	; 0x34
   1c3f8:	ldr	ip, [sp, #36]	; 0x24
   1c3fc:	ldr	r4, [sp, #16]
   1c400:	lsl	r3, r2, #1
   1c404:	add	r1, r3, r2
   1c408:	sub	r2, ip, #1952	; 0x7a0
   1c40c:	lsl	r1, r1, #3
   1c410:	add	r2, r2, r1
   1c414:	add	r1, ip, r1
   1c418:	ldr	ip, [r2, #16]
   1c41c:	ldr	lr, [r1, #-1952]	; 0xfffff860
   1c420:	adds	ip, ip, r4
   1c424:	add	r7, lr, r7
   1c428:	ldrd	r4, [r2, #8]
   1c42c:	ldr	lr, [r2, #20]
   1c430:	str	r7, [r1, #-1952]	; 0xfffff860
   1c434:	ldr	r1, [sp, #20]
   1c438:	str	ip, [r2, #16]
   1c43c:	adc	lr, lr, r1
   1c440:	orrs	r1, r4, r5
   1c444:	str	lr, [r2, #20]
   1c448:	beq	1c520 <read_boolean_unary_expression@@Base+0xf1c>
   1c44c:	ldrd	r6, [sp, #24]
   1c450:	cmp	r6, r4
   1c454:	sbcs	r2, r7, r5
   1c458:	blt	1c520 <read_boolean_unary_expression@@Base+0xf1c>
   1c45c:	ldr	r2, [sp, #52]	; 0x34
   1c460:	ldr	lr, [sp, #60]	; 0x3c
   1c464:	add	ip, r3, r2
   1c468:	ldr	r3, [sp, #56]	; 0x38
   1c46c:	lsl	ip, ip, #3
   1c470:	add	r1, lr, ip
   1c474:	add	ip, r3, ip
   1c478:	b	1c4d4 <read_boolean_unary_expression@@Base+0xed0>
   1c47c:	ldr	r3, [r1, #-8]
   1c480:	ldr	r6, [ip, #-8]
   1c484:	ldr	r7, [ip, #-4]
   1c488:	ldr	r2, [r1, #-4]
   1c48c:	adds	r6, r3, r6
   1c490:	ldrd	r4, [r1, #-16]
   1c494:	adc	r2, r2, r7
   1c498:	ldr	r3, [r1, #-24]	; 0xffffffe8
   1c49c:	ldr	r7, [ip, #-24]	; 0xffffffe8
   1c4a0:	orrs	r8, r4, r5
   1c4a4:	add	r3, r3, r7
   1c4a8:	str	r2, [r1, #-4]
   1c4ac:	str	r3, [r1, #-24]	; 0xffffffe8
   1c4b0:	str	r6, [r1, #-8]
   1c4b4:	ldrd	r2, [ip, #-16]
   1c4b8:	sub	ip, ip, #24
   1c4bc:	beq	1c4cc <read_boolean_unary_expression@@Base+0xec8>
   1c4c0:	cmp	r2, r4
   1c4c4:	sbcs	r4, r3, r5
   1c4c8:	bge	1c4d0 <read_boolean_unary_expression@@Base+0xecc>
   1c4cc:	strd	r2, [r1, #-16]
   1c4d0:	sub	r1, r1, #24
   1c4d4:	cmp	r1, lr
   1c4d8:	bne	1c47c <read_boolean_unary_expression@@Base+0xe78>
   1c4dc:	ldr	r3, [sp, #36]	; 0x24
   1c4e0:	add	r0, r0, r0, lsl #1
   1c4e4:	sub	r3, r3, #1952	; 0x7a0
   1c4e8:	add	r3, r3, r0, lsl #3
   1c4ec:	ldr	r1, [sp, #60]	; 0x3c
   1c4f0:	ldr	r2, [r3, #16]
   1c4f4:	ldr	ip, [r3, #20]
   1c4f8:	adds	r9, r2, r9
   1c4fc:	adc	sl, ip, sl
   1c500:	ldr	r0, [sp, #56]	; 0x38
   1c504:	ldr	r2, [pc, #184]	; 1c5c4 <read_boolean_unary_expression@@Base+0xfc0>
   1c508:	str	r9, [r3, #16]
   1c50c:	str	sl, [r3, #20]
   1c510:	bl	11858 <memcpy@plt>
   1c514:	add	sp, sp, #6080	; 0x17c0
   1c518:	add	sp, sp, #36	; 0x24
   1c51c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c520:	ldr	r2, [sp, #52]	; 0x34
   1c524:	ldrd	r4, [sp, #24]
   1c528:	add	r1, r3, r2
   1c52c:	ldr	r2, [sp, #36]	; 0x24
   1c530:	sub	r2, r2, #1952	; 0x7a0
   1c534:	add	r2, r2, r1, lsl #3
   1c538:	strd	r4, [r2, #8]
   1c53c:	b	1c45c <read_boolean_unary_expression@@Base+0xe58>
   1c540:	ldr	r3, [r2, #16]
   1c544:	ldr	sl, [r2, #20]
   1c548:	str	r3, [sp, #12]
   1c54c:	b	1c338 <read_boolean_unary_expression@@Base+0xd34>
   1c550:	ldr	r9, [sp, #12]
   1c554:	ldr	r3, [sp, #52]	; 0x34
   1c558:	sub	r3, r3, #1
   1c55c:	str	r3, [sp, #52]	; 0x34
   1c560:	cmn	r3, #1
   1c564:	ldr	r3, [sp, #48]	; 0x30
   1c568:	sub	r3, r3, #24
   1c56c:	str	r3, [sp, #48]	; 0x30
   1c570:	bne	1c218 <read_boolean_unary_expression@@Base+0xc14>
   1c574:	cmp	r4, #0
   1c578:	subne	r5, r5, #1
   1c57c:	cmp	r5, #0
   1c580:	blt	1c4dc <read_boolean_unary_expression@@Base+0xed8>
   1c584:	add	r5, r5, r5, lsl #1
   1c588:	ldr	ip, [sp, #40]	; 0x28
   1c58c:	add	r3, ip, r5, lsl #3
   1c590:	ldr	r2, [r3, #16]
   1c594:	ldr	r1, [r3, #20]
   1c598:	adds	r9, r9, r2
   1c59c:	adc	sl, sl, r1
   1c5a0:	cmp	ip, r3
   1c5a4:	sub	r3, r3, #24
   1c5a8:	bne	1c590 <read_boolean_unary_expression@@Base+0xf8c>
   1c5ac:	b	1c4dc <read_boolean_unary_expression@@Base+0xed8>
   1c5b0:	ldr	r9, [sp, #12]
   1c5b4:	b	1c3f4 <read_boolean_unary_expression@@Base+0xdf0>
   1c5b8:	ldr	r6, [sp, #12]
   1c5bc:	mov	r8, sl
   1c5c0:	b	1c26c <read_boolean_unary_expression@@Base+0xc68>
   1c5c4:	andeq	r1, r0, r0, lsr #15
   1c5c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c5cc:	ldrb	r4, [r0]
   1c5d0:	cmp	r4, #47	; 0x2f
   1c5d4:	addeq	r5, r0, #1
   1c5d8:	ldrbeq	r4, [r0, #1]
   1c5dc:	movne	r5, r0
   1c5e0:	cmp	r4, #0
   1c5e4:	beq	1c638 <read_boolean_unary_expression@@Base+0x1034>
   1c5e8:	mov	r6, r0
   1c5ec:	mov	r7, #0
   1c5f0:	mov	r8, #47	; 0x2f
   1c5f4:	ldr	sl, [pc, #136]	; 1c684 <read_boolean_unary_expression@@Base+0x1080>
   1c5f8:	b	1c608 <read_boolean_unary_expression@@Base+0x1004>
   1c5fc:	ldrb	r4, [r5, #1]!
   1c600:	cmp	r4, #0
   1c604:	beq	1c638 <read_boolean_unary_expression@@Base+0x1034>
   1c608:	cmp	r4, #47	; 0x2f
   1c60c:	bne	1c5fc <read_boolean_unary_expression@@Base+0xff8>
   1c610:	strb	r7, [r5]
   1c614:	mov	r1, #0
   1c618:	mov	r0, r6
   1c61c:	bl	11930 <access@plt>
   1c620:	cmn	r0, #1
   1c624:	beq	1c644 <read_boolean_unary_expression@@Base+0x1040>
   1c628:	strb	r8, [r5]
   1c62c:	ldrb	r4, [r5, #1]!
   1c630:	cmp	r4, #0
   1c634:	bne	1c608 <read_boolean_unary_expression@@Base+0x1004>
   1c638:	mov	r9, #0
   1c63c:	mov	r0, r9
   1c640:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c644:	mov	r1, sl
   1c648:	mov	r0, r6
   1c64c:	bl	11918 <mkdir@plt>
   1c650:	cmn	r0, #1
   1c654:	mov	r9, r0
   1c658:	bne	1c628 <read_boolean_unary_expression@@Base+0x1024>
   1c65c:	bl	1190c <__errno_location@plt>
   1c660:	ldr	r3, [r0]
   1c664:	cmp	r3, #17
   1c668:	beq	1c628 <read_boolean_unary_expression@@Base+0x1024>
   1c66c:	ldr	r0, [pc, #20]	; 1c688 <read_boolean_unary_expression@@Base+0x1084>
   1c670:	mov	r1, r6
   1c674:	add	r0, pc, r0
   1c678:	bl	1bcfc <read_boolean_unary_expression@@Base+0x6f8>
   1c67c:	strb	r4, [r5]
   1c680:	b	1c63c <read_boolean_unary_expression@@Base+0x1038>
   1c684:	andeq	r0, r0, sp, ror #3
   1c688:	andeq	r2, r0, ip
   1c68c:	ldr	r3, [pc, #76]	; 1c6e0 <read_boolean_unary_expression@@Base+0x10dc>
   1c690:	cmp	r1, r3
   1c694:	beq	1c6d8 <read_boolean_unary_expression@@Base+0x10d4>
   1c698:	cmp	r2, #0
   1c69c:	ldr	ip, [pc, #64]	; 1c6e4 <read_boolean_unary_expression@@Base+0x10e0>
   1c6a0:	push	{lr}		; (str lr, [sp, #-4]!)
   1c6a4:	rev	r3, r1
   1c6a8:	sub	sp, sp, #12
   1c6ac:	ldreq	r2, [r0]
   1c6b0:	ldr	r0, [pc, #48]	; 1c6e8 <read_boolean_unary_expression@@Base+0x10e4>
   1c6b4:	stm	sp, {r3, ip}
   1c6b8:	mov	r1, r2
   1c6bc:	mov	r3, sp
   1c6c0:	add	r2, sp, #4
   1c6c4:	add	r0, pc, r0
   1c6c8:	bl	1bcfc <read_boolean_unary_expression@@Base+0x6f8>
   1c6cc:	mov	r0, #0
   1c6d0:	add	sp, sp, #12
   1c6d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6d8:	mov	r0, #1
   1c6dc:	bx	lr
   1c6e0:	teqmi	r8, sl, lsr #6
   1c6e4:	bcs	cea7f0 <__bss_end__@@Base+0xcb8cd4>
   1c6e8:	andeq	r1, r0, r4, ror #31
   1c6ec:	ldr	r2, [r2]
   1c6f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c6f4:	cmp	r2, #0
   1c6f8:	mov	r4, r3
   1c6fc:	ldr	r2, [r3, #12]
   1c700:	ldr	r3, [sp, #32]
   1c704:	beq	1c7f0 <read_boolean_unary_expression@@Base+0x11ec>
   1c708:	cmp	r1, #0
   1c70c:	addeq	r1, r2, #1
   1c710:	streq	r1, [r4, #12]
   1c714:	cmp	r2, #0
   1c718:	ldr	r0, [r4, #16]
   1c71c:	ldr	lr, [r4, #20]
   1c720:	ldrd	r6, [r4, #24]
   1c724:	ldr	r2, [r4, #32]
   1c728:	ldr	r1, [r4, #36]	; 0x24
   1c72c:	bne	1c79c <read_boolean_unary_expression@@Base+0x1198>
   1c730:	ldr	ip, [r3, #8]
   1c734:	str	ip, [r4, #8]
   1c738:	ldr	ip, [r3, #16]
   1c73c:	ldr	r5, [r3, #20]
   1c740:	adds	r0, ip, r0
   1c744:	adc	lr, r5, lr
   1c748:	str	r0, [r4, #16]
   1c74c:	str	lr, [r4, #20]
   1c750:	ldrd	r8, [r3, #24]
   1c754:	cmp	r6, r8
   1c758:	sbcs	r0, r7, r9
   1c75c:	bge	1c810 <read_boolean_unary_expression@@Base+0x120c>
   1c760:	strd	r8, [r4, #24]
   1c764:	ldr	r0, [r3, #24]
   1c768:	ldr	ip, [r3, #28]
   1c76c:	adds	r2, r0, r2
   1c770:	adc	r1, ip, r1
   1c774:	str	r1, [r4, #36]	; 0x24
   1c778:	str	r2, [r4, #32]
   1c77c:	add	r1, r3, #40	; 0x28
   1c780:	ldr	r2, [pc, #176]	; 1c838 <read_boolean_unary_expression@@Base+0x1234>
   1c784:	add	r0, r4, #40	; 0x28
   1c788:	bl	11858 <memcpy@plt>
   1c78c:	ldr	r3, [sp, #36]	; 0x24
   1c790:	mov	r0, #0
   1c794:	str	r3, [r4]
   1c798:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c79c:	ldr	ip, [r3, #16]
   1c7a0:	ldr	r5, [r3, #20]
   1c7a4:	adds	r0, ip, r0
   1c7a8:	adc	lr, r5, lr
   1c7ac:	str	r0, [r4, #16]
   1c7b0:	str	lr, [r4, #20]
   1c7b4:	ldrd	r8, [r3, #24]
   1c7b8:	cmp	r6, r8
   1c7bc:	sbcs	r0, r7, r9
   1c7c0:	bge	1c824 <read_boolean_unary_expression@@Base+0x1220>
   1c7c4:	strd	r8, [r4, #24]
   1c7c8:	ldr	r0, [r3, #24]
   1c7cc:	ldr	ip, [r3, #28]
   1c7d0:	adds	r2, r0, r2
   1c7d4:	adc	r1, ip, r1
   1c7d8:	str	r1, [r4, #36]	; 0x24
   1c7dc:	str	r2, [r4, #32]
   1c7e0:	add	r1, r3, #40	; 0x28
   1c7e4:	add	r0, r4, #40	; 0x28
   1c7e8:	bl	1c1b8 <read_boolean_unary_expression@@Base+0xbb4>
   1c7ec:	b	1c78c <read_boolean_unary_expression@@Base+0x1188>
   1c7f0:	cmp	r2, #0
   1c7f4:	beq	1c78c <read_boolean_unary_expression@@Base+0x1188>
   1c7f8:	mov	r1, r0
   1c7fc:	ldr	r0, [pc, #56]	; 1c83c <read_boolean_unary_expression@@Base+0x1238>
   1c800:	add	r0, pc, r0
   1c804:	bl	1bcfc <read_boolean_unary_expression@@Base+0x6f8>
   1c808:	mvn	r0, #0
   1c80c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c810:	adds	r2, r2, r8
   1c814:	adc	r1, r1, r9
   1c818:	str	r1, [r4, #36]	; 0x24
   1c81c:	str	r2, [r4, #32]
   1c820:	b	1c77c <read_boolean_unary_expression@@Base+0x1178>
   1c824:	adds	r2, r2, r8
   1c828:	adc	r1, r1, r9
   1c82c:	str	r1, [r4, #36]	; 0x24
   1c830:	str	r2, [r4, #32]
   1c834:	b	1c7e0 <read_boolean_unary_expression@@Base+0x11dc>
   1c838:	andeq	r1, r0, r0, lsr #15
   1c83c:	andeq	r1, r0, r0, ror #29
   1c840:	ldr	r0, [pc, #52]	; 1c87c <read_boolean_unary_expression@@Base+0x1278>
   1c844:	ldr	r3, [pc, #52]	; 1c880 <read_boolean_unary_expression@@Base+0x127c>
   1c848:	add	r0, pc, r0
   1c84c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c850:	mov	ip, #0
   1c854:	ldr	r3, [r0, r3]
   1c858:	mvn	lr, #0
   1c85c:	mov	r2, ip
   1c860:	str	lr, [r3, #24]
   1c864:	mov	r1, ip
   1c868:	ldr	r0, [r3]
   1c86c:	pop	{lr}		; (ldr lr, [sp], #4)
   1c870:	str	ip, [r3, #4]
   1c874:	str	ip, [r3, #8]
   1c878:	b	11984 <fseek@plt>
   1c87c:			; <UNDEFINED> instruction: 0x000127b0
   1c880:	strheq	r0, [r0], -r4
   1c884:	push	{r4, r5, r6, r7, lr}
   1c888:	mov	r2, #0
   1c88c:	sub	sp, sp, #36	; 0x24
   1c890:	mov	r3, #0
   1c894:	mov	r4, #0
   1c898:	mov	r6, r0
   1c89c:	strd	r2, [sp, #8]
   1c8a0:	strd	r2, [sp, #16]
   1c8a4:	strh	r4, [sp, #2]
   1c8a8:	bl	118dc <getpid@plt>
   1c8ac:	ldr	r3, [pc, #196]	; 1c978 <read_boolean_unary_expression@@Base+0x1374>
   1c8b0:	ldr	ip, [pc, #196]	; 1c97c <read_boolean_unary_expression@@Base+0x1378>
   1c8b4:	add	r3, pc, r3
   1c8b8:	mvn	lr, #0
   1c8bc:	mov	r7, #1
   1c8c0:	ldr	r2, [pc, #184]	; 1c980 <read_boolean_unary_expression@@Base+0x137c>
   1c8c4:	mov	r1, #66	; 0x42
   1c8c8:	str	r0, [sp, #24]
   1c8cc:	ldr	r5, [r3, ip]
   1c8d0:	mov	r0, r6
   1c8d4:	strh	r7, [sp]
   1c8d8:	str	r4, [r5, #4]
   1c8dc:	str	r4, [r5, #12]
   1c8e0:	str	r4, [r5, #8]
   1c8e4:	str	r4, [r5, #20]
   1c8e8:	str	lr, [r5, #16]
   1c8ec:	bl	11894 <open64@plt>
   1c8f0:	subs	r6, r0, #0
   1c8f4:	movlt	r0, r4
   1c8f8:	blt	1c95c <read_boolean_unary_expression@@Base+0x1358>
   1c8fc:	mov	r4, sp
   1c900:	mov	r2, r4
   1c904:	mov	r1, #14
   1c908:	mov	r0, r6
   1c90c:	bl	11954 <fcntl64@plt>
   1c910:	cmp	r0, #0
   1c914:	beq	1c928 <read_boolean_unary_expression@@Base+0x1324>
   1c918:	bl	1190c <__errno_location@plt>
   1c91c:	ldr	r3, [r0]
   1c920:	cmp	r3, #4
   1c924:	beq	1c900 <read_boolean_unary_expression@@Base+0x12fc>
   1c928:	ldr	r1, [pc, #84]	; 1c984 <read_boolean_unary_expression@@Base+0x1380>
   1c92c:	mov	r0, r6
   1c930:	add	r1, pc, r1
   1c934:	bl	11810 <fdopen@plt>
   1c938:	cmp	r0, #0
   1c93c:	mov	r4, r0
   1c940:	str	r0, [r5]
   1c944:	beq	1c964 <read_boolean_unary_expression@@Base+0x1360>
   1c948:	mov	r4, #1
   1c94c:	mov	r1, #0
   1c950:	str	r4, [r5, #24]
   1c954:	bl	11828 <setbuf@plt>
   1c958:	mov	r0, r4
   1c95c:	add	sp, sp, #36	; 0x24
   1c960:	pop	{r4, r5, r6, r7, pc}
   1c964:	mov	r0, r6
   1c968:	bl	119a8 <close@plt>
   1c96c:	mov	r0, r4
   1c970:	add	sp, sp, #36	; 0x24
   1c974:	pop	{r4, r5, r6, r7, pc}
   1c978:	andeq	r2, r1, r4, asr #14
   1c97c:	strheq	r0, [r0], -r4
   1c980:			; <UNDEFINED> instruction: 0x000001b6
   1c984:	ldrdeq	r1, [r0], -ip
   1c988:	push	{r4, r5, r6, lr}
   1c98c:	mov	r4, r1
   1c990:	ldr	r5, [pc, #248]	; 1ca90 <read_boolean_unary_expression@@Base+0x148c>
   1c994:	ldr	ip, [r4, #8]
   1c998:	ldr	lr, [r4, #12]
   1c99c:	ldr	r6, [r4]
   1c9a0:	cmp	ip, #0
   1c9a4:	mov	r1, r0
   1c9a8:	add	r5, pc, r5
   1c9ac:	add	r0, r6, lr
   1c9b0:	ble	1c9ec <read_boolean_unary_expression@@Base+0x13e8>
   1c9b4:	ldrb	r3, [r1]
   1c9b8:	cmp	r3, #47	; 0x2f
   1c9bc:	addeq	r2, r1, #1
   1c9c0:	ldrbeq	r3, [r1, #1]
   1c9c4:	movne	r2, r1
   1c9c8:	cmp	r3, #0
   1c9cc:	beq	1c9ec <read_boolean_unary_expression@@Base+0x13e8>
   1c9d0:	cmp	r3, #47	; 0x2f
   1c9d4:	moveq	r1, r2
   1c9d8:	ldrb	r3, [r2, #1]!
   1c9dc:	subeq	ip, ip, #1
   1c9e0:	cmp	r3, #0
   1c9e4:	cmpne	ip, #0
   1c9e8:	bne	1c9d0 <read_boolean_unary_expression@@Base+0x13cc>
   1c9ec:	cmp	lr, #0
   1c9f0:	bne	1ca10 <read_boolean_unary_expression@@Base+0x140c>
   1c9f4:	bl	1187c <strcpy@plt>
   1c9f8:	ldr	r0, [r4]
   1c9fc:	bl	1c884 <read_boolean_unary_expression@@Base+0x1280>
   1ca00:	cmp	r0, #0
   1ca04:	beq	1ca28 <read_boolean_unary_expression@@Base+0x1424>
   1ca08:	mov	r0, #0
   1ca0c:	pop	{r4, r5, r6, pc}
   1ca10:	ldrb	r3, [r1]
   1ca14:	cmp	r3, #47	; 0x2f
   1ca18:	movne	r3, #47	; 0x2f
   1ca1c:	addne	r0, r0, #1
   1ca20:	strbne	r3, [r6, lr]
   1ca24:	b	1c9f4 <read_boolean_unary_expression@@Base+0x13f0>
   1ca28:	ldr	r0, [r4]
   1ca2c:	bl	1c5c8 <read_boolean_unary_expression@@Base+0xfc4>
   1ca30:	cmp	r0, #0
   1ca34:	bne	1ca6c <read_boolean_unary_expression@@Base+0x1468>
   1ca38:	ldr	r0, [r4]
   1ca3c:	bl	1c884 <read_boolean_unary_expression@@Base+0x1280>
   1ca40:	cmp	r0, #0
   1ca44:	bne	1ca08 <read_boolean_unary_expression@@Base+0x1404>
   1ca48:	ldr	r3, [pc, #68]	; 1ca94 <read_boolean_unary_expression@@Base+0x1490>
   1ca4c:	ldr	r1, [pc, #68]	; 1ca98 <read_boolean_unary_expression@@Base+0x1494>
   1ca50:	ldr	r2, [r4]
   1ca54:	ldr	r3, [r5, r3]
   1ca58:	add	r1, pc, r1
   1ca5c:	ldr	r0, [r3]
   1ca60:	bl	11900 <fprintf@plt>
   1ca64:	mvn	r0, #0
   1ca68:	pop	{r4, r5, r6, pc}
   1ca6c:	ldr	r3, [pc, #32]	; 1ca94 <read_boolean_unary_expression@@Base+0x1490>
   1ca70:	ldr	r1, [pc, #36]	; 1ca9c <read_boolean_unary_expression@@Base+0x1498>
   1ca74:	ldr	r2, [r4]
   1ca78:	ldr	r3, [r5, r3]
   1ca7c:	add	r1, pc, r1
   1ca80:	ldr	r0, [r3]
   1ca84:	bl	11900 <fprintf@plt>
   1ca88:	mvn	r0, #0
   1ca8c:	pop	{r4, r5, r6, pc}
   1ca90:	andeq	r2, r1, r0, asr r6
   1ca94:	andeq	r0, r0, r0, lsr #1
   1ca98:	andeq	r1, r0, ip, asr #25
   1ca9c:	muleq	r0, r4, ip
   1caa0:	ldr	r3, [pc, #96]	; 1cb08 <read_boolean_unary_expression@@Base+0x1504>
   1caa4:	ldr	r2, [pc, #96]	; 1cb0c <read_boolean_unary_expression@@Base+0x1508>
   1caa8:	add	r3, pc, r3
   1caac:	push	{r4, lr}
   1cab0:	ldr	r4, [r3, r2]
   1cab4:	ldr	r0, [r4]
   1cab8:	cmp	r0, #0
   1cabc:	beq	1cadc <read_boolean_unary_expression@@Base+0x14d8>
   1cac0:	ldr	r3, [r4, #8]
   1cac4:	cmp	r3, #0
   1cac8:	bne	1caec <read_boolean_unary_expression@@Base+0x14e8>
   1cacc:	bl	1193c <fclose@plt>
   1cad0:	mov	r3, #0
   1cad4:	str	r3, [r4]
   1cad8:	str	r3, [r4, #12]
   1cadc:	mov	r3, #0
   1cae0:	str	r3, [r4, #24]
   1cae4:	ldr	r0, [r4, #20]
   1cae8:	pop	{r4, pc}
   1caec:	ldr	r2, [r4, #24]
   1caf0:	cmp	r2, #0
   1caf4:	bge	1cacc <read_boolean_unary_expression@@Base+0x14c8>
   1caf8:	mov	r0, r3
   1cafc:	bl	1baf4 <read_boolean_unary_expression@@Base+0x4f0>
   1cb00:	ldr	r0, [r4]
   1cb04:	b	1cacc <read_boolean_unary_expression@@Base+0x14c8>
   1cb08:	andeq	r2, r1, r0, asr r5
   1cb0c:	strheq	r0, [r0], -r4
   1cb10:	push	{r4, lr}
   1cb14:	mov	r4, r0
   1cb18:	mov	r0, #1
   1cb1c:	bl	1bb50 <read_boolean_unary_expression@@Base+0x54c>
   1cb20:	str	r4, [r0]
   1cb24:	pop	{r4, pc}
   1cb28:	push	{r4, r5, r6, lr}
   1cb2c:	mov	r5, r0
   1cb30:	mov	r0, #2
   1cb34:	mov	r4, r1
   1cb38:	bl	1bb50 <read_boolean_unary_expression@@Base+0x54c>
   1cb3c:	str	r5, [r0]
   1cb40:	str	r4, [r0, #4]
   1cb44:	pop	{r4, r5, r6, pc}
   1cb48:	push	{r4, r5, r6, lr}
   1cb4c:	mov	r5, r0
   1cb50:	mov	r0, #2
   1cb54:	mov	r4, r1
   1cb58:	bl	1bb50 <read_boolean_unary_expression@@Base+0x54c>
   1cb5c:	str	r5, [r0]
   1cb60:	str	r4, [r0, #4]
   1cb64:	pop	{r4, r5, r6, pc}
   1cb68:	mov	r2, #0
   1cb6c:	push	{r4, r5, r6, r7, r8, lr}
   1cb70:	mov	r3, r2
   1cb74:	sub	sp, sp, #32
   1cb78:	mov	r5, r1
   1cb7c:	mov	r7, r2
   1cb80:	mov	r4, r1
   1cb84:	mov	r8, #1
   1cb88:	str	r2, [sp]
   1cb8c:	str	r2, [sp, #4]
   1cb90:	str	r2, [sp, #8]
   1cb94:	str	r2, [sp, #12]
   1cb98:	str	r2, [sp, #16]
   1cb9c:	str	r2, [sp, #20]
   1cba0:	str	r2, [sp, #24]
   1cba4:	str	r2, [sp, #28]
   1cba8:	lsr	r2, r3, #5
   1cbac:	ldr	lr, [r1, #40]	; 0x28
   1cbb0:	add	ip, sp, #32
   1cbb4:	cmp	lr, #0
   1cbb8:	add	r2, ip, r2, lsl #2
   1cbbc:	and	r6, r3, #31
   1cbc0:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   1cbc4:	add	r3, r3, #1
   1cbc8:	orrne	ip, ip, r8, lsl r6
   1cbcc:	addne	r7, r7, #1
   1cbd0:	strne	ip, [r2, #-32]	; 0xffffffe0
   1cbd4:	cmp	r3, #252	; 0xfc
   1cbd8:	add	r1, r1, #24
   1cbdc:	bne	1cba8 <read_boolean_unary_expression@@Base+0x15a4>
   1cbe0:	add	r7, r7, r7, lsl #2
   1cbe4:	add	r1, r7, #17
   1cbe8:	bl	1cb48 <read_boolean_unary_expression@@Base+0x1544>
   1cbec:	ldr	r0, [r5]
   1cbf0:	bl	1cb10 <read_boolean_unary_expression@@Base+0x150c>
   1cbf4:	ldr	r0, [r5, #8]
   1cbf8:	bl	1cb10 <read_boolean_unary_expression@@Base+0x150c>
   1cbfc:	ldr	r0, [r5, #12]
   1cc00:	bl	1cb10 <read_boolean_unary_expression@@Base+0x150c>
   1cc04:	ldrd	r0, [r5, #16]
   1cc08:	bl	1cb28 <read_boolean_unary_expression@@Base+0x1524>
   1cc0c:	ldrd	r0, [r5, #24]
   1cc10:	bl	1cb28 <read_boolean_unary_expression@@Base+0x1524>
   1cc14:	ldrd	r0, [r5, #32]
   1cc18:	bl	1cb28 <read_boolean_unary_expression@@Base+0x1524>
   1cc1c:	sub	r6, sp, #4
   1cc20:	add	r7, sp, #28
   1cc24:	ldr	r0, [r6, #4]!
   1cc28:	bl	1cb10 <read_boolean_unary_expression@@Base+0x150c>
   1cc2c:	cmp	r7, r6
   1cc30:	bne	1cc24 <read_boolean_unary_expression@@Base+0x1620>
   1cc34:	add	r5, r5, #6016	; 0x1780
   1cc38:	add	r5, r5, #32
   1cc3c:	ldr	r3, [r4, #40]	; 0x28
   1cc40:	subs	r0, r3, #0
   1cc44:	beq	1cc5c <read_boolean_unary_expression@@Base+0x1658>
   1cc48:	bl	1cb10 <read_boolean_unary_expression@@Base+0x150c>
   1cc4c:	ldrd	r0, [r4, #48]	; 0x30
   1cc50:	bl	1cb28 <read_boolean_unary_expression@@Base+0x1524>
   1cc54:	ldrd	r0, [r4, #56]	; 0x38
   1cc58:	bl	1cb28 <read_boolean_unary_expression@@Base+0x1524>
   1cc5c:	add	r4, r4, #24
   1cc60:	cmp	r4, r5
   1cc64:	bne	1cc3c <read_boolean_unary_expression@@Base+0x1638>
   1cc68:	add	sp, sp, #32
   1cc6c:	pop	{r4, r5, r6, r7, r8, pc}
   1cc70:	push	{r4, lr}
   1cc74:	mov	r0, #1
   1cc78:	bl	1bbb0 <read_boolean_unary_expression@@Base+0x5ac>
   1cc7c:	subs	r3, r0, #0
   1cc80:	popeq	{r4, pc}
   1cc84:	ldr	r0, [r3]
   1cc88:	pop	{r4, lr}
   1cc8c:	b	1ba74 <read_boolean_unary_expression@@Base+0x470>
   1cc90:	push	{r4, lr}
   1cc94:	mov	r0, #2
   1cc98:	bl	1bbb0 <read_boolean_unary_expression@@Base+0x5ac>
   1cc9c:	subs	r2, r0, #0
   1cca0:	beq	1ccc4 <read_boolean_unary_expression@@Base+0x16c0>
   1cca4:	ldr	r0, [r2]
   1cca8:	bl	1ba74 <read_boolean_unary_expression@@Base+0x470>
   1ccac:	mov	r3, r0
   1ccb0:	ldr	r0, [r2, #4]
   1ccb4:	bl	1ba74 <read_boolean_unary_expression@@Base+0x470>
   1ccb8:	mov	r1, r0
   1ccbc:	mov	r0, r3
   1ccc0:	pop	{r4, pc}
   1ccc4:	mov	r3, r2
   1ccc8:	mov	r1, r2
   1cccc:	mov	r0, r3
   1ccd0:	pop	{r4, pc}
   1ccd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ccd8:	sub	sp, sp, #28
   1ccdc:	mov	r8, r1
   1cce0:	str	r3, [sp, #12]
   1cce4:	mov	r4, #0
   1cce8:	add	r3, r1, #52	; 0x34
   1ccec:	add	r1, r1, #16
   1ccf0:	str	r0, [sp, #20]
   1ccf4:	str	r2, [sp, #16]
   1ccf8:	ldr	r2, [r3, #-4]!
   1ccfc:	cmp	r2, #0
   1cd00:	addne	r4, r4, #1
   1cd04:	cmp	r1, r3
   1cd08:	bne	1ccf8 <read_boolean_unary_expression@@Base+0x16f4>
   1cd0c:	add	r4, r4, #4
   1cd10:	lsl	r4, r4, #3
   1cd14:	mov	r0, r4
   1cd18:	bl	118b8 <malloc@plt>
   1cd1c:	subs	r6, r0, #0
   1cd20:	beq	1cdf4 <read_boolean_unary_expression@@Base+0x17f0>
   1cd24:	ldr	r3, [sp, #12]
   1cd28:	mov	r4, #0
   1cd2c:	str	r3, [r6, #4]
   1cd30:	str	r4, [r6]
   1cd34:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1cd38:	mov	r7, r4
   1cd3c:	add	r5, r8, #12
   1cd40:	str	r0, [r6, #12]
   1cd44:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1cd48:	str	r0, [r6, #16]
   1cd4c:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1cd50:	str	r0, [r6, #20]
   1cd54:	b	1cd64 <read_boolean_unary_expression@@Base+0x1760>
   1cd58:	add	r4, r4, #1
   1cd5c:	cmp	r4, #9
   1cd60:	beq	1cde0 <read_boolean_unary_expression@@Base+0x17dc>
   1cd64:	ldr	r3, [r5, #4]!
   1cd68:	cmp	r3, #0
   1cd6c:	beq	1cd58 <read_boolean_unary_expression@@Base+0x1754>
   1cd70:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1cd74:	lsl	r3, r4, #17
   1cd78:	add	r3, r3, #27262976	; 0x1a00000
   1cd7c:	add	r3, r3, #65536	; 0x10000
   1cd80:	cmp	r0, r3
   1cd84:	bne	1ce48 <read_boolean_unary_expression@@Base+0x1844>
   1cd88:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1cd8c:	lsr	sl, r0, #1
   1cd90:	lsl	fp, sl, #3
   1cd94:	mov	r0, fp
   1cd98:	bl	118b8 <malloc@plt>
   1cd9c:	subs	r9, r0, #0
   1cda0:	beq	1ce58 <read_boolean_unary_expression@@Base+0x1854>
   1cda4:	add	r1, r6, r7, lsl #3
   1cda8:	cmp	sl, #0
   1cdac:	str	sl, [r1, #24]
   1cdb0:	str	r9, [r1, #28]
   1cdb4:	sub	fp, sl, #1
   1cdb8:	beq	1cdd0 <read_boolean_unary_expression@@Base+0x17cc>
   1cdbc:	bl	1cc90 <read_boolean_unary_expression@@Base+0x168c>
   1cdc0:	sub	fp, fp, #1
   1cdc4:	cmn	fp, #1
   1cdc8:	strd	r0, [r9], #8
   1cdcc:	bne	1cdbc <read_boolean_unary_expression@@Base+0x17b8>
   1cdd0:	add	r4, r4, #1
   1cdd4:	cmp	r4, #9
   1cdd8:	add	r7, r7, #1
   1cddc:	bne	1cd64 <read_boolean_unary_expression@@Base+0x1760>
   1cde0:	ldr	r3, [sp, #16]
   1cde4:	mov	r0, r6
   1cde8:	str	r6, [r3]
   1cdec:	add	sp, sp, #28
   1cdf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cdf4:	mvn	r5, #0
   1cdf8:	cmp	r4, #0
   1cdfc:	bne	1ce3c <read_boolean_unary_expression@@Base+0x1838>
   1ce00:	ldr	r3, [pc, #92]	; 1ce64 <read_boolean_unary_expression@@Base+0x1860>
   1ce04:	mov	r4, r5
   1ce08:	add	r3, pc, r3
   1ce0c:	ldr	r0, [pc, #84]	; 1ce68 <read_boolean_unary_expression@@Base+0x1864>
   1ce10:	ldr	r2, [sp, #12]
   1ce14:	ldr	r1, [sp, #20]
   1ce18:	str	r4, [sp]
   1ce1c:	add	r0, pc, r0
   1ce20:	bl	1bcfc <read_boolean_unary_expression@@Base+0x6f8>
   1ce24:	mov	r2, r5
   1ce28:	mov	r1, r6
   1ce2c:	mov	r0, r8
   1ce30:	add	sp, sp, #28
   1ce34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce38:	b	1bd30 <read_boolean_unary_expression@@Base+0x72c>
   1ce3c:	ldr	r3, [pc, #40]	; 1ce6c <read_boolean_unary_expression@@Base+0x1868>
   1ce40:	add	r3, pc, r3
   1ce44:	b	1ce0c <read_boolean_unary_expression@@Base+0x1808>
   1ce48:	ldr	r3, [pc, #32]	; 1ce70 <read_boolean_unary_expression@@Base+0x186c>
   1ce4c:	mov	r5, r4
   1ce50:	add	r3, pc, r3
   1ce54:	b	1ce0c <read_boolean_unary_expression@@Base+0x1808>
   1ce58:	mov	r5, r4
   1ce5c:	mov	r4, fp
   1ce60:	b	1cdf8 <read_boolean_unary_expression@@Base+0x17f4>
   1ce64:	andeq	r1, r0, r8, lsr r9
   1ce68:	andeq	r1, r0, r8, asr #18
   1ce6c:	andeq	r1, r0, r4, lsl r9
   1ce70:	strdeq	r1, [r0], -r0
   1ce74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce78:	sub	sp, sp, #36	; 0x24
   1ce7c:	mov	r9, r0
   1ce80:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1ce84:	mov	r7, #0
   1ce88:	sub	r4, sp, #4
   1ce8c:	add	r5, sp, #28
   1ce90:	str	r0, [r9]
   1ce94:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1ce98:	str	r0, [r9, #8]
   1ce9c:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1cea0:	str	r0, [r9, #12]
   1cea4:	bl	1cc90 <read_boolean_unary_expression@@Base+0x168c>
   1cea8:	strd	r0, [r9, #16]
   1ceac:	bl	1cc90 <read_boolean_unary_expression@@Base+0x168c>
   1ceb0:	strd	r0, [r9, #24]
   1ceb4:	bl	1cc90 <read_boolean_unary_expression@@Base+0x168c>
   1ceb8:	ldr	r2, [pc, #264]	; 1cfc8 <read_boolean_unary_expression@@Base+0x19c4>
   1cebc:	strd	r0, [r9, #32]
   1cec0:	add	r0, r9, #40	; 0x28
   1cec4:	mov	r1, r7
   1cec8:	bl	11924 <memset@plt>
   1cecc:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1ced0:	str	r0, [r4, #4]!
   1ced4:	bl	1dbb8 <__gcov_sort_n_vals@@Base+0x64c>
   1ced8:	cmp	r4, r5
   1cedc:	add	r7, r7, r0
   1cee0:	bne	1cecc <read_boolean_unary_expression@@Base+0x18c8>
   1cee4:	cmp	r7, #0
   1cee8:	sub	r7, r7, #1
   1ceec:	beq	1cfb4 <read_boolean_unary_expression@@Base+0x19b0>
   1cef0:	ldr	r8, [pc, #212]	; 1cfcc <read_boolean_unary_expression@@Base+0x19c8>
   1cef4:	ldr	sl, [pc, #212]	; 1cfd0 <read_boolean_unary_expression@@Base+0x19cc>
   1cef8:	mov	r4, #0
   1cefc:	add	r8, pc, r8
   1cf00:	add	sl, pc, sl
   1cf04:	mov	r5, r4
   1cf08:	mov	r6, r4
   1cf0c:	cmp	r4, #0
   1cf10:	addeq	r3, sp, #32
   1cf14:	addeq	r6, r3, r5, lsl #2
   1cf18:	subeq	r6, r6, #36	; 0x24
   1cf1c:	beq	1cf38 <read_boolean_unary_expression@@Base+0x1934>
   1cf20:	b	1cf60 <read_boolean_unary_expression@@Base+0x195c>
   1cf24:	ldr	r4, [r6, #4]!
   1cf28:	add	r3, r5, #1
   1cf2c:	cmp	r4, #0
   1cf30:	bne	1cf58 <read_boolean_unary_expression@@Base+0x1954>
   1cf34:	mov	r5, r3
   1cf38:	cmp	r5, #7
   1cf3c:	bls	1cf24 <read_boolean_unary_expression@@Base+0x1920>
   1cf40:	mov	r0, r8
   1cf44:	bl	1bcfc <read_boolean_unary_expression@@Base+0x6f8>
   1cf48:	ldr	r4, [r6, #4]!
   1cf4c:	add	r3, r5, #1
   1cf50:	cmp	r4, #0
   1cf54:	beq	1cf34 <read_boolean_unary_expression@@Base+0x1930>
   1cf58:	lsl	r6, r5, #5
   1cf5c:	mov	r5, r3
   1cf60:	tst	r4, #1
   1cf64:	bne	1cf78 <read_boolean_unary_expression@@Base+0x1974>
   1cf68:	lsr	r4, r4, #1
   1cf6c:	tst	r4, #1
   1cf70:	add	r6, r6, #1
   1cf74:	beq	1cf68 <read_boolean_unary_expression@@Base+0x1964>
   1cf78:	cmp	r6, #251	; 0xfb
   1cf7c:	bhi	1cfbc <read_boolean_unary_expression@@Base+0x19b8>
   1cf80:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1cf84:	add	fp, r6, r6, lsl #1
   1cf88:	sub	r7, r7, #1
   1cf8c:	add	fp, r9, fp, lsl #3
   1cf90:	lsr	r4, r4, #1
   1cf94:	add	r6, r6, #1
   1cf98:	str	r0, [fp, #40]	; 0x28
   1cf9c:	bl	1cc90 <read_boolean_unary_expression@@Base+0x168c>
   1cfa0:	strd	r0, [fp, #48]	; 0x30
   1cfa4:	bl	1cc90 <read_boolean_unary_expression@@Base+0x168c>
   1cfa8:	cmn	r7, #1
   1cfac:	strd	r0, [fp, #56]	; 0x38
   1cfb0:	bne	1cf0c <read_boolean_unary_expression@@Base+0x1908>
   1cfb4:	add	sp, sp, #36	; 0x24
   1cfb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cfbc:	mov	r0, sl
   1cfc0:	bl	1bcfc <read_boolean_unary_expression@@Base+0x6f8>
   1cfc4:	b	1cf80 <read_boolean_unary_expression@@Base+0x197c>
   1cfc8:	andeq	r1, r0, r0, lsr #15
   1cfcc:	andeq	r1, r0, ip, lsl #17
   1cfd0:	andeq	r1, r0, r8, asr #17
   1cfd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cfd8:	sub	sp, sp, #6080	; 0x17c0
   1cfdc:	sub	sp, sp, #28
   1cfe0:	mov	r4, r1
   1cfe4:	strd	r2, [sp, #4]
   1cfe8:	add	r3, sp, #6144	; 0x1800
   1cfec:	mov	r9, r0
   1cff0:	ldr	r7, [r3]
   1cff4:	add	r3, sp, #6144	; 0x1800
   1cff8:	add	r3, r3, #4
   1cffc:	ldr	r6, [r3]
   1d000:	add	r3, sp, #6144	; 0x1800
   1d004:	add	r3, r3, #8
   1d008:	ldr	sl, [r3]
   1d00c:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1d010:	add	r3, r4, #12
   1d014:	mov	r2, r9
   1d018:	str	r3, [sp, #12]
   1d01c:	mov	r1, r0
   1d020:	mov	r0, r3
   1d024:	bl	1c68c <read_boolean_unary_expression@@Base+0x1088>
   1d028:	cmp	r0, #0
   1d02c:	beq	1d2b4 <read_boolean_unary_expression@@Base+0x1cb0>
   1d030:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1d034:	ldr	r3, [r4, #8]
   1d038:	cmp	r0, r3
   1d03c:	bne	1d0d0 <read_boolean_unary_expression@@Base+0x1acc>
   1d040:	ldr	fp, [pc, #628]	; 1d2bc <read_boolean_unary_expression@@Base+0x1cb8>
   1d044:	add	r5, sp, #16
   1d048:	add	fp, pc, fp
   1d04c:	bl	1ba24 <read_boolean_unary_expression@@Base+0x420>
   1d050:	str	r0, [r6]
   1d054:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1d058:	cmp	r0, #-1560281088	; 0xa3000000
   1d05c:	bne	1d114 <read_boolean_unary_expression@@Base+0x1b10>
   1d060:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1d064:	mov	r0, r5
   1d068:	bl	1ce74 <read_boolean_unary_expression@@Base+0x1870>
   1d06c:	bl	1ba48 <read_boolean_unary_expression@@Base+0x444>
   1d070:	add	r2, sp, #2000	; 0x7d0
   1d074:	add	r2, r2, #8
   1d078:	subs	r8, r0, #0
   1d07c:	bne	1d248 <read_boolean_unary_expression@@Base+0x1c44>
   1d080:	ldr	r3, [r7]
   1d084:	cmp	r3, #0
   1d088:	bne	1d0e0 <read_boolean_unary_expression@@Base+0x1adc>
   1d08c:	ldr	r3, [r2, #-1992]	; 0xfffff838
   1d090:	cmp	r3, sl
   1d094:	bne	1d04c <read_boolean_unary_expression@@Base+0x1a48>
   1d098:	ldr	r3, [sp, #8]
   1d09c:	ldr	r2, [r2, #-1984]	; 0xfffff840
   1d0a0:	ldr	r3, [r3]
   1d0a4:	cmp	r2, r3
   1d0a8:	bne	1d04c <read_boolean_unary_expression@@Base+0x1a48>
   1d0ac:	ldr	r2, [pc, #524]	; 1d2c0 <read_boolean_unary_expression@@Base+0x1cbc>
   1d0b0:	mov	r1, r5
   1d0b4:	ldr	r0, [sp, #4]
   1d0b8:	bl	11858 <memcpy@plt>
   1d0bc:	ldr	r3, [r6]
   1d0c0:	str	r3, [r7]
   1d0c4:	b	1d04c <read_boolean_unary_expression@@Base+0x1a48>
   1d0c8:	cmp	r0, #0
   1d0cc:	bne	1d288 <read_boolean_unary_expression@@Base+0x1c84>
   1d0d0:	mov	r0, #0
   1d0d4:	add	sp, sp, #6080	; 0x17c0
   1d0d8:	add	sp, sp, #28
   1d0dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0e0:	ldr	r0, [pc, #476]	; 1d2c4 <read_boolean_unary_expression@@Base+0x1cc0>
   1d0e4:	bl	118b8 <malloc@plt>
   1d0e8:	ldr	r2, [pc, #464]	; 1d2c0 <read_boolean_unary_expression@@Base+0x1cbc>
   1d0ec:	mov	r1, r5
   1d0f0:	mov	r3, r0
   1d0f4:	str	r0, [fp]
   1d0f8:	add	r0, r0, #8
   1d0fc:	str	r3, [sp]
   1d100:	bl	11858 <memcpy@plt>
   1d104:	ldr	r3, [sp]
   1d108:	str	r8, [r3]
   1d10c:	ldr	fp, [fp]
   1d110:	b	1d04c <read_boolean_unary_expression@@Base+0x1a48>
   1d114:	ldr	r5, [r4, #52]	; 0x34
   1d118:	cmp	r5, #0
   1d11c:	beq	1d0c8 <read_boolean_unary_expression@@Base+0x1ac4>
   1d120:	ldr	r3, [r4, #56]	; 0x38
   1d124:	cmp	r0, #16777216	; 0x1000000
   1d128:	ldr	r8, [r3]
   1d12c:	bne	1d284 <read_boolean_unary_expression@@Base+0x1c80>
   1d130:	ldr	r6, [pc, #400]	; 1d2c8 <read_boolean_unary_expression@@Base+0x1cc4>
   1d134:	mov	r5, #0
   1d138:	add	r6, pc, r6
   1d13c:	add	r6, r6, #4
   1d140:	b	1d184 <read_boolean_unary_expression@@Base+0x1b80>
   1d144:	mov	r2, r6
   1d148:	mov	r3, r5
   1d14c:	mov	r1, r4
   1d150:	mov	r0, r9
   1d154:	bl	1ccd4 <read_boolean_unary_expression@@Base+0x16d0>
   1d158:	subs	r6, r0, #0
   1d15c:	beq	1d288 <read_boolean_unary_expression@@Base+0x1c84>
   1d160:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1d164:	ldr	r3, [r4, #52]	; 0x34
   1d168:	add	r5, r5, #1
   1d16c:	cmp	r3, r5
   1d170:	beq	1d0c8 <read_boolean_unary_expression@@Base+0x1ac4>
   1d174:	ldr	r3, [r4, #56]	; 0x38
   1d178:	cmp	r0, #16777216	; 0x1000000
   1d17c:	ldr	r8, [r3, r5, lsl #2]
   1d180:	bne	1d288 <read_boolean_unary_expression@@Base+0x1c84>
   1d184:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1d188:	cmp	r0, #0
   1d18c:	beq	1d160 <read_boolean_unary_expression@@Base+0x1b5c>
   1d190:	cmp	r0, #3
   1d194:	bne	1d288 <read_boolean_unary_expression@@Base+0x1c84>
   1d198:	cmp	r8, #0
   1d19c:	beq	1d144 <read_boolean_unary_expression@@Base+0x1b40>
   1d1a0:	ldr	r3, [r8]
   1d1a4:	cmp	r4, r3
   1d1a8:	bne	1d144 <read_boolean_unary_expression@@Base+0x1b40>
   1d1ac:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1d1b0:	ldr	r3, [r8, #4]
   1d1b4:	cmp	r0, r3
   1d1b8:	bne	1d288 <read_boolean_unary_expression@@Base+0x1c84>
   1d1bc:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1d1c0:	ldr	r3, [r8, #8]
   1d1c4:	cmp	r0, r3
   1d1c8:	bne	1d288 <read_boolean_unary_expression@@Base+0x1c84>
   1d1cc:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1d1d0:	ldr	r3, [r8, #12]
   1d1d4:	cmp	r0, r3
   1d1d8:	bne	1d288 <read_boolean_unary_expression@@Base+0x1c84>
   1d1dc:	ldr	r7, [pc, #232]	; 1d2cc <read_boolean_unary_expression@@Base+0x1cc8>
   1d1e0:	ldr	fp, [sp, #12]
   1d1e4:	add	r8, r8, #16
   1d1e8:	ldr	sl, [fp, #4]!
   1d1ec:	cmp	sl, #0
   1d1f0:	beq	1d228 <read_boolean_unary_expression@@Base+0x1c24>
   1d1f4:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1d1f8:	str	r0, [sp]
   1d1fc:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1d200:	ldr	r3, [sp]
   1d204:	cmp	r3, r7
   1d208:	bne	1d288 <read_boolean_unary_expression@@Base+0x1c84>
   1d20c:	ldr	r3, [r8]
   1d210:	mov	r1, r3
   1d214:	cmp	r0, r3, lsl #1
   1d218:	bne	1d288 <read_boolean_unary_expression@@Base+0x1c84>
   1d21c:	ldr	r0, [r8, #4]
   1d220:	blx	sl
   1d224:	add	r8, r8, #8
   1d228:	ldr	r3, [pc, #160]	; 1d2d0 <read_boolean_unary_expression@@Base+0x1ccc>
   1d22c:	add	r7, r7, #131072	; 0x20000
   1d230:	cmp	r7, r3
   1d234:	bne	1d1e8 <read_boolean_unary_expression@@Base+0x1be4>
   1d238:	bl	1ba48 <read_boolean_unary_expression@@Base+0x444>
   1d23c:	cmp	r0, #0
   1d240:	beq	1d160 <read_boolean_unary_expression@@Base+0x1b5c>
   1d244:	mov	r8, r0
   1d248:	cmp	r8, #0
   1d24c:	blt	1d278 <read_boolean_unary_expression@@Base+0x1c74>
   1d250:	ldr	r2, [pc, #124]	; 1d2d4 <read_boolean_unary_expression@@Base+0x1cd0>
   1d254:	add	r2, pc, r2
   1d258:	ldr	r0, [pc, #120]	; 1d2d8 <read_boolean_unary_expression@@Base+0x1cd4>
   1d25c:	mov	r1, r9
   1d260:	add	r0, pc, r0
   1d264:	bl	1bcfc <read_boolean_unary_expression@@Base+0x6f8>
   1d268:	mvn	r0, #0
   1d26c:	add	sp, sp, #6080	; 0x17c0
   1d270:	add	sp, sp, #28
   1d274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d278:	ldr	r2, [pc, #92]	; 1d2dc <read_boolean_unary_expression@@Base+0x1cd8>
   1d27c:	add	r2, pc, r2
   1d280:	b	1d258 <read_boolean_unary_expression@@Base+0x1c54>
   1d284:	mov	r5, #0
   1d288:	ldr	r2, [pc, #80]	; 1d2e0 <read_boolean_unary_expression@@Base+0x1cdc>
   1d28c:	ldr	r0, [pc, #80]	; 1d2e4 <read_boolean_unary_expression@@Base+0x1ce0>
   1d290:	mov	r3, r5
   1d294:	mov	r1, r9
   1d298:	add	r2, pc, r2
   1d29c:	add	r0, pc, r0
   1d2a0:	bl	1bcfc <read_boolean_unary_expression@@Base+0x6f8>
   1d2a4:	mvn	r0, #0
   1d2a8:	add	sp, sp, #6080	; 0x17c0
   1d2ac:	add	sp, sp, #28
   1d2b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2b4:	mvn	r0, #0
   1d2b8:	b	1d0d4 <read_boolean_unary_expression@@Base+0x1ad0>
   1d2bc:	andeq	r3, r1, r0, lsr r7
   1d2c0:	andeq	r1, r0, r8, asr #15
   1d2c4:	ldrdeq	r1, [r0], -r0
   1d2c8:	andeq	r3, r1, r0, asr #12
   1d2cc:			; <UNDEFINED> instruction: 0x01a10000
   1d2d0:			; <UNDEFINED> instruction: 0x01b30000
   1d2d4:			; <UNDEFINED> instruction: 0x000015bc
   1d2d8:	andeq	r1, r0, ip, ror #11
   1d2dc:	andeq	r1, r0, r8, lsl #11
   1d2e0:	andeq	r1, r0, r0, lsl #11
   1d2e4:	andeq	r1, r0, r8, lsl #11
   1d2e8:	ldr	r3, [pc, #72]	; 1d338 <read_boolean_unary_expression@@Base+0x1d34>
   1d2ec:	ldr	r2, [pc, #72]	; 1d33c <read_boolean_unary_expression@@Base+0x1d38>
   1d2f0:	add	r3, pc, r3
   1d2f4:	push	{r4, r5, r6, lr}
   1d2f8:	mov	r5, r0
   1d2fc:	ldr	r4, [r3, r2]
   1d300:	ldr	r0, [r4, #8]
   1d304:	cmp	r0, #0
   1d308:	bne	1d330 <read_boolean_unary_expression@@Base+0x1d2c>
   1d30c:	lsl	r1, r5, #2
   1d310:	mov	r2, #0
   1d314:	ldr	r0, [r4]
   1d318:	bl	11984 <fseek@plt>
   1d31c:	ldr	r0, [r4]
   1d320:	bl	11864 <ftell@plt>
   1d324:	asr	r0, r0, #2
   1d328:	str	r0, [r4, #4]
   1d32c:	pop	{r4, r5, r6, pc}
   1d330:	bl	1baf4 <read_boolean_unary_expression@@Base+0x4f0>
   1d334:	b	1d30c <read_boolean_unary_expression@@Base+0x1d08>
   1d338:	andeq	r1, r1, r8, lsl #26
   1d33c:	strheq	r0, [r0], -r4
   1d340:	cmp	r2, #0
   1d344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d348:	mov	r8, r0
   1d34c:	sub	sp, sp, #20
   1d350:	mov	r5, r1
   1d354:	mov	r4, r3
   1d358:	beq	1d528 <read_boolean_unary_expression@@Base+0x1f24>
   1d35c:	cmp	r4, #0
   1d360:	bne	1d544 <read_boolean_unary_expression@@Base+0x1f40>
   1d364:	mov	r1, r5
   1d368:	ldr	r5, [pc, #480]	; 1d550 <read_boolean_unary_expression@@Base+0x1f4c>
   1d36c:	mov	r0, #-1560281088	; 0xa3000000
   1d370:	add	r5, pc, r5
   1d374:	bl	1cb68 <read_boolean_unary_expression@@Base+0x1564>
   1d378:	ldr	r4, [r5]
   1d37c:	cmp	r4, #0
   1d380:	beq	1d3ac <read_boolean_unary_expression@@Base+0x1da8>
   1d384:	add	r1, r4, #8
   1d388:	mov	r0, #-1560281088	; 0xa3000000
   1d38c:	bl	1cb68 <read_boolean_unary_expression@@Base+0x1564>
   1d390:	ldr	r3, [r5]
   1d394:	mov	r0, r3
   1d398:	ldr	r4, [r3]
   1d39c:	bl	1184c <free@plt>
   1d3a0:	cmp	r4, #0
   1d3a4:	str	r4, [r5]
   1d3a8:	bne	1d384 <read_boolean_unary_expression@@Base+0x1d80>
   1d3ac:	ldr	r3, [r8, #52]	; 0x34
   1d3b0:	cmp	r3, #0
   1d3b4:	beq	1d500 <read_boolean_unary_expression@@Base+0x1efc>
   1d3b8:	ldr	r3, [pc, #404]	; 1d554 <read_boolean_unary_expression@@Base+0x1f50>
   1d3bc:	ldr	r9, [pc, #404]	; 1d558 <read_boolean_unary_expression@@Base+0x1f54>
   1d3c0:	add	r3, pc, r3
   1d3c4:	str	r3, [sp, #4]
   1d3c8:	ldr	r3, [pc, #396]	; 1d55c <read_boolean_unary_expression@@Base+0x1f58>
   1d3cc:	mov	r7, #0
   1d3d0:	add	r3, pc, r3
   1d3d4:	str	r3, [sp, #12]
   1d3d8:	b	1d414 <read_boolean_unary_expression@@Base+0x1e10>
   1d3dc:	ldr	r3, [r8, #56]	; 0x38
   1d3e0:	ldr	r4, [r3, r7, lsl #2]
   1d3e4:	cmp	r4, #0
   1d3e8:	beq	1d3f8 <read_boolean_unary_expression@@Base+0x1df4>
   1d3ec:	ldr	r3, [r4]
   1d3f0:	cmp	r3, r8
   1d3f4:	beq	1d510 <read_boolean_unary_expression@@Base+0x1f0c>
   1d3f8:	mov	r1, #0
   1d3fc:	mov	r0, #16777216	; 0x1000000
   1d400:	bl	1cb48 <read_boolean_unary_expression@@Base+0x1544>
   1d404:	ldr	r3, [r8, #52]	; 0x34
   1d408:	add	r7, r7, #1
   1d40c:	cmp	r3, r7
   1d410:	beq	1d500 <read_boolean_unary_expression@@Base+0x1efc>
   1d414:	ldr	r3, [sp, #4]
   1d418:	ldr	r4, [r3, #4]
   1d41c:	cmp	r4, #0
   1d420:	beq	1d3dc <read_boolean_unary_expression@@Base+0x1dd8>
   1d424:	ldr	r3, [r4, #4]
   1d428:	cmp	r3, r7
   1d42c:	bne	1d3dc <read_boolean_unary_expression@@Base+0x1dd8>
   1d430:	mov	r3, #1
   1d434:	mov	r1, #3
   1d438:	mov	r0, #16777216	; 0x1000000
   1d43c:	add	r4, r4, #8
   1d440:	str	r3, [sp, #8]
   1d444:	bl	1cb48 <read_boolean_unary_expression@@Base+0x1544>
   1d448:	ldr	r0, [r4, #4]
   1d44c:	bl	1cb10 <read_boolean_unary_expression@@Base+0x150c>
   1d450:	ldr	r0, [r4, #8]
   1d454:	bl	1cb10 <read_boolean_unary_expression@@Base+0x150c>
   1d458:	ldr	r0, [r4, #12]
   1d45c:	bl	1cb10 <read_boolean_unary_expression@@Base+0x150c>
   1d460:	ldr	r5, [pc, #248]	; 1d560 <read_boolean_unary_expression@@Base+0x1f5c>
   1d464:	add	r4, r4, #16
   1d468:	add	r6, r8, #12
   1d46c:	b	1d47c <read_boolean_unary_expression@@Base+0x1e78>
   1d470:	add	r5, r5, #131072	; 0x20000
   1d474:	cmp	r5, r9
   1d478:	beq	1d4cc <read_boolean_unary_expression@@Base+0x1ec8>
   1d47c:	ldr	r3, [r6, #4]!
   1d480:	cmp	r3, #0
   1d484:	beq	1d470 <read_boolean_unary_expression@@Base+0x1e6c>
   1d488:	ldr	fp, [r4]
   1d48c:	mov	r0, r5
   1d490:	sub	sl, fp, #1
   1d494:	lsl	r1, fp, #1
   1d498:	bl	1cb48 <read_boolean_unary_expression@@Base+0x1544>
   1d49c:	cmp	fp, #0
   1d4a0:	ldr	fp, [r4, #4]
   1d4a4:	beq	1d4bc <read_boolean_unary_expression@@Base+0x1eb8>
   1d4a8:	sub	sl, sl, #1
   1d4ac:	ldrd	r0, [fp], #8
   1d4b0:	bl	1cb28 <read_boolean_unary_expression@@Base+0x1524>
   1d4b4:	cmn	sl, #1
   1d4b8:	bne	1d4a8 <read_boolean_unary_expression@@Base+0x1ea4>
   1d4bc:	add	r5, r5, #131072	; 0x20000
   1d4c0:	cmp	r5, r9
   1d4c4:	add	r4, r4, #8
   1d4c8:	bne	1d47c <read_boolean_unary_expression@@Base+0x1e78>
   1d4cc:	ldr	r3, [sp, #8]
   1d4d0:	cmp	r3, #0
   1d4d4:	beq	1d404 <read_boolean_unary_expression@@Base+0x1e00>
   1d4d8:	ldr	r4, [sp, #12]
   1d4dc:	mov	r2, #9
   1d4e0:	mov	r0, r8
   1d4e4:	ldr	r1, [r4, #4]
   1d4e8:	bl	1bd30 <read_boolean_unary_expression@@Base+0x72c>
   1d4ec:	ldr	r3, [r8, #52]	; 0x34
   1d4f0:	add	r7, r7, #1
   1d4f4:	cmp	r3, r7
   1d4f8:	str	r0, [r4, #4]
   1d4fc:	bne	1d414 <read_boolean_unary_expression@@Base+0x1e10>
   1d500:	mov	r0, #0
   1d504:	add	sp, sp, #20
   1d508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d50c:	b	1cb10 <read_boolean_unary_expression@@Base+0x150c>
   1d510:	mov	r1, #3
   1d514:	mov	r0, #16777216	; 0x1000000
   1d518:	bl	1cb48 <read_boolean_unary_expression@@Base+0x1544>
   1d51c:	mov	r3, #0
   1d520:	str	r3, [sp, #8]
   1d524:	b	1d448 <read_boolean_unary_expression@@Base+0x1e44>
   1d528:	ldr	r1, [pc, #52]	; 1d564 <read_boolean_unary_expression@@Base+0x1f60>
   1d52c:	ldr	r0, [pc, #52]	; 1d568 <read_boolean_unary_expression@@Base+0x1f64>
   1d530:	bl	1cb48 <read_boolean_unary_expression@@Base+0x1544>
   1d534:	ldr	r0, [r8, #8]
   1d538:	bl	1cb10 <read_boolean_unary_expression@@Base+0x150c>
   1d53c:	cmp	r4, #0
   1d540:	beq	1d364 <read_boolean_unary_expression@@Base+0x1d60>
   1d544:	mov	r0, r4
   1d548:	bl	1d2e8 <read_boolean_unary_expression@@Base+0x1ce4>
   1d54c:	b	1d364 <read_boolean_unary_expression@@Base+0x1d60>
   1d550:	andeq	r3, r1, r8, lsl #8
   1d554:			; <UNDEFINED> instruction: 0x000133b8
   1d558:			; <UNDEFINED> instruction: 0x01b30000
   1d55c:	andeq	r3, r1, r8, lsr #7
   1d560:			; <UNDEFINED> instruction: 0x01a10000
   1d564:	teqmi	r8, sl, lsr #6
   1d568:	strbvs	r6, [r3, -r1, ror #8]!

0001d56c <__gcov_sort_n_vals@@Base>:
   1d56c:	cmp	r1, #2
   1d570:	bxle	lr
   1d574:	sub	r1, r1, #3
   1d578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d57c:	add	r2, r0, #8
   1d580:	sub	sp, sp, #20
   1d584:	mov	r6, r0
   1d588:	bic	r7, r1, #1
   1d58c:	mvn	r8, #15
   1d590:	mov	lr, #0
   1d594:	ldrd	r0, [r2]
   1d598:	ldrd	r4, [r2, #16]
   1d59c:	ldrd	sl, [r2, #8]
   1d5a0:	add	r9, r2, #16
   1d5a4:	cmp	r0, r4
   1d5a8:	sbcs	r3, r1, r5
   1d5ac:	mov	ip, r9
   1d5b0:	sub	r1, r6, r8
   1d5b4:	strd	sl, [sp]
   1d5b8:	mov	r3, lr
   1d5bc:	bge	1d624 <__gcov_sort_n_vals@@Base+0xb8>
   1d5c0:	add	sl, r8, #16
   1d5c4:	mvn	fp, #1
   1d5c8:	add	sl, r2, sl
   1d5cc:	orr	fp, lr, fp
   1d5d0:	str	r7, [sp, #8]
   1d5d4:	str	r6, [sp, #12]
   1d5d8:	b	1d5f0 <__gcov_sort_n_vals@@Base+0x84>
   1d5dc:	ldrd	r6, [ip, #-16]
   1d5e0:	sub	r2, r2, #16
   1d5e4:	cmp	r6, r4
   1d5e8:	sbcs	r1, r7, r5
   1d5ec:	bge	1d64c <__gcov_sort_n_vals@@Base+0xe0>
   1d5f0:	ldrd	r6, [r2, #-8]
   1d5f4:	lsl	r1, r3, #3
   1d5f8:	mov	r0, r3
   1d5fc:	strd	r6, [r2, #8]
   1d600:	ldrd	r6, [sl, r1]
   1d604:	sub	r3, r3, #2
   1d608:	cmp	r3, fp
   1d60c:	strd	r6, [r2, #16]
   1d610:	mov	ip, r2
   1d614:	bne	1d5dc <__gcov_sort_n_vals@@Base+0x70>
   1d618:	ldr	r6, [sp, #12]
   1d61c:	ldr	r7, [sp, #8]
   1d620:	add	r1, r6, r1
   1d624:	ldrd	r2, [sp]
   1d628:	cmp	lr, r7
   1d62c:	sub	r8, r8, #16
   1d630:	strd	r2, [r1]
   1d634:	add	lr, lr, #2
   1d638:	strd	r4, [ip]
   1d63c:	mov	r2, r9
   1d640:	bne	1d594 <__gcov_sort_n_vals@@Base+0x28>
   1d644:	add	sp, sp, #20
   1d648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d64c:	ldr	r6, [sp, #12]
   1d650:	ldr	r7, [sp, #8]
   1d654:	add	r1, r6, r0, lsl #3
   1d658:	b	1d624 <__gcov_sort_n_vals@@Base+0xb8>
   1d65c:	push	{r4, r5, r6, lr}
   1d660:	ldr	r4, [pc, #76]	; 1d6b4 <__gcov_sort_n_vals@@Base+0x148>
   1d664:	smull	r2, r3, r4, r0
   1d668:	asr	r4, r0, #31
   1d66c:	rsb	r4, r4, r3, asr #1
   1d670:	add	r4, r4, r4, lsl #3
   1d674:	subs	r4, r0, r4
   1d678:	bne	1d6b0 <__gcov_sort_n_vals@@Base+0x144>
   1d67c:	cmp	r0, #0
   1d680:	mov	r6, r0
   1d684:	ldr	r5, [r1]
   1d688:	pople	{r4, r5, r6, pc}
   1d68c:	add	r5, r5, #8
   1d690:	mov	r0, r5
   1d694:	add	r4, r4, #9
   1d698:	mov	r1, #8
   1d69c:	bl	1d56c <__gcov_sort_n_vals@@Base>
   1d6a0:	cmp	r6, r4
   1d6a4:	add	r5, r5, #72	; 0x48
   1d6a8:	bgt	1d690 <__gcov_sort_n_vals@@Base+0x124>
   1d6ac:	pop	{r4, r5, r6, pc}
   1d6b0:	bl	1199c <abort@plt>
   1d6b4:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   1d6b8:	ldr	r3, [r0, #48]	; 0x30
   1d6bc:	cmp	r3, #0
   1d6c0:	bxeq	lr
   1d6c4:	push	{r4, r5, r6, lr}
   1d6c8:	ldr	lr, [r0, #52]	; 0x34
   1d6cc:	cmp	lr, #0
   1d6d0:	popeq	{r4, r5, r6, pc}
   1d6d4:	mov	r5, r0
   1d6d8:	mov	r4, #0
   1d6dc:	add	r6, r0, #12
   1d6e0:	ldr	r1, [r5, #56]	; 0x38
   1d6e4:	mov	r2, r6
   1d6e8:	mov	r3, #0
   1d6ec:	ldr	r1, [r1, r4, lsl #2]
   1d6f0:	add	r1, r1, #16
   1d6f4:	ldr	ip, [r2, #4]!
   1d6f8:	cmp	ip, #0
   1d6fc:	beq	1d70c <__gcov_sort_n_vals@@Base+0x1a0>
   1d700:	cmp	r3, #8
   1d704:	beq	1d728 <__gcov_sort_n_vals@@Base+0x1bc>
   1d708:	add	r1, r1, #8
   1d70c:	add	r3, r3, #1
   1d710:	cmp	r3, #9
   1d714:	bne	1d6f4 <__gcov_sort_n_vals@@Base+0x188>
   1d718:	add	r4, r4, #1
   1d71c:	cmp	lr, r4
   1d720:	bne	1d6e0 <__gcov_sort_n_vals@@Base+0x174>
   1d724:	pop	{r4, r5, r6, pc}
   1d728:	ldr	r0, [r1], #4
   1d72c:	bl	1d65c <__gcov_sort_n_vals@@Base+0xf0>
   1d730:	ldr	lr, [r5, #52]	; 0x34
   1d734:	b	1d718 <__gcov_sort_n_vals@@Base+0x1ac>
   1d738:	push	{r4, r5, r6, r7, r8, r9, lr}
   1d73c:	sub	sp, sp, #6080	; 0x17c0
   1d740:	ldr	ip, [pc, #396]	; 1d8d4 <__gcov_sort_n_vals@@Base+0x368>
   1d744:	sub	sp, sp, #36	; 0x24
   1d748:	add	ip, pc, ip
   1d74c:	add	r5, sp, #2016	; 0x7e0
   1d750:	mov	r4, r0
   1d754:	mov	r6, r1
   1d758:	mov	r1, #0
   1d75c:	str	r1, [ip, #4]
   1d760:	str	r1, [ip]
   1d764:	mov	r8, r2
   1d768:	mov	r7, r3
   1d76c:	str	r1, [r5, #-2000]	; 0xfffff830
   1d770:	str	r1, [r5, #-1996]	; 0xfffff834
   1d774:	bl	1d6b8 <__gcov_sort_n_vals@@Base+0x14c>
   1d778:	mov	r1, r6
   1d77c:	ldr	r0, [r4, #12]
   1d780:	bl	1c988 <read_boolean_unary_expression@@Base+0x1384>
   1d784:	cmn	r0, #1
   1d788:	beq	1d804 <__gcov_sort_n_vals@@Base+0x298>
   1d78c:	bl	1cc70 <read_boolean_unary_expression@@Base+0x166c>
   1d790:	cmp	r0, #0
   1d794:	beq	1d810 <__gcov_sort_n_vals@@Base+0x2a4>
   1d798:	ldr	r2, [pc, #312]	; 1d8d8 <__gcov_sort_n_vals@@Base+0x36c>
   1d79c:	ldr	r1, [r6]
   1d7a0:	cmp	r0, r2
   1d7a4:	beq	1d868 <__gcov_sort_n_vals@@Base+0x2fc>
   1d7a8:	ldr	r0, [pc, #300]	; 1d8dc <__gcov_sort_n_vals@@Base+0x370>
   1d7ac:	add	r0, pc, r0
   1d7b0:	bl	1bcfc <read_boolean_unary_expression@@Base+0x6f8>
   1d7b4:	ldr	r5, [pc, #292]	; 1d8e0 <__gcov_sort_n_vals@@Base+0x374>
   1d7b8:	add	r5, pc, r5
   1d7bc:	ldr	r1, [r5, #4]
   1d7c0:	cmp	r1, #0
   1d7c4:	beq	1d7e4 <__gcov_sort_n_vals@@Base+0x278>
   1d7c8:	mov	r2, #9
   1d7cc:	mov	r0, r4
   1d7d0:	bl	1bd30 <read_boolean_unary_expression@@Base+0x72c>
   1d7d4:	cmp	r0, #0
   1d7d8:	mov	r1, r0
   1d7dc:	str	r0, [r5, #4]
   1d7e0:	bne	1d7c8 <__gcov_sort_n_vals@@Base+0x25c>
   1d7e4:	bl	1caa0 <read_boolean_unary_expression@@Base+0x149c>
   1d7e8:	cmp	r0, #0
   1d7ec:	beq	1d804 <__gcov_sort_n_vals@@Base+0x298>
   1d7f0:	blt	1d8c8 <__gcov_sort_n_vals@@Base+0x35c>
   1d7f4:	ldr	r0, [pc, #232]	; 1d8e4 <__gcov_sort_n_vals@@Base+0x378>
   1d7f8:	add	r0, pc, r0
   1d7fc:	ldr	r1, [r6]
   1d800:	bl	1bcfc <read_boolean_unary_expression@@Base+0x6f8>
   1d804:	add	sp, sp, #6080	; 0x17c0
   1d808:	add	sp, sp, #36	; 0x24
   1d80c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d810:	bl	1c840 <read_boolean_unary_expression@@Base+0x123c>
   1d814:	ldr	r1, [r5, #-2000]	; 0xfffff830
   1d818:	add	r9, sp, #24
   1d81c:	cmp	r1, #0
   1d820:	beq	1d8b0 <__gcov_sort_n_vals@@Base+0x344>
   1d824:	add	r3, sp, #6144	; 0x1800
   1d828:	str	r7, [sp, #4]
   1d82c:	ldr	r3, [r3]
   1d830:	mov	r1, r8
   1d834:	str	r3, [sp]
   1d838:	add	r2, r4, #16
   1d83c:	mov	r3, r9
   1d840:	ldr	r0, [r6]
   1d844:	bl	1c6ec <read_boolean_unary_expression@@Base+0x10e8>
   1d848:	cmn	r0, #1
   1d84c:	beq	1d7b4 <__gcov_sort_n_vals@@Base+0x248>
   1d850:	mov	r1, r9
   1d854:	ldr	r3, [r5, #-2000]	; 0xfffff830
   1d858:	ldr	r2, [r5, #-1996]	; 0xfffff834
   1d85c:	mov	r0, r4
   1d860:	bl	1d340 <read_boolean_unary_expression@@Base+0x1d3c>
   1d864:	b	1d7b4 <__gcov_sort_n_vals@@Base+0x248>
   1d868:	add	ip, sp, #20
   1d86c:	add	r3, sp, #16
   1d870:	str	r7, [sp, #8]
   1d874:	stm	sp, {r3, ip}
   1d878:	add	r3, sp, #6144	; 0x1800
   1d87c:	add	r9, sp, #24
   1d880:	ldr	r3, [r3]
   1d884:	mov	r0, r1
   1d888:	mov	r2, r9
   1d88c:	add	r3, r3, #8
   1d890:	mov	r1, r4
   1d894:	bl	1cfd4 <read_boolean_unary_expression@@Base+0x19d0>
   1d898:	cmn	r0, #1
   1d89c:	beq	1d7b4 <__gcov_sort_n_vals@@Base+0x248>
   1d8a0:	bl	1c840 <read_boolean_unary_expression@@Base+0x123c>
   1d8a4:	ldr	r1, [r5, #-2000]	; 0xfffff830
   1d8a8:	cmp	r1, #0
   1d8ac:	bne	1d824 <__gcov_sort_n_vals@@Base+0x2b8>
   1d8b0:	ldr	r2, [pc, #48]	; 1d8e8 <__gcov_sort_n_vals@@Base+0x37c>
   1d8b4:	mov	r0, r9
   1d8b8:	bl	11924 <memset@plt>
   1d8bc:	ldr	r3, [r5, #-1996]	; 0xfffff834
   1d8c0:	str	r3, [r5, #-2000]	; 0xfffff830
   1d8c4:	b	1d824 <__gcov_sort_n_vals@@Base+0x2b8>
   1d8c8:	ldr	r0, [pc, #28]	; 1d8ec <__gcov_sort_n_vals@@Base+0x380>
   1d8cc:	add	r0, pc, r0
   1d8d0:	b	1d7fc <__gcov_sort_n_vals@@Base+0x290>
   1d8d4:	andeq	r3, r1, r0, lsr r0
   1d8d8:	strbvs	r6, [r3, -r1, ror #8]!
   1d8dc:	strdeq	r1, [r0], -r8
   1d8e0:	andeq	r2, r1, r0, asr #31
   1d8e4:	muleq	r0, r0, r0
   1d8e8:	andeq	r1, r0, r8, asr #15
   1d8ec:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   1d8f0:	push	{r4, r5, r6, r7, r8, lr}
   1d8f4:	sub	sp, sp, #6080	; 0x17c0
   1d8f8:	sub	sp, sp, #32
   1d8fc:	add	r6, sp, #24
   1d900:	add	r2, sp, #12
   1d904:	mov	r8, r1
   1d908:	mov	r1, r6
   1d90c:	mov	r4, r0
   1d910:	bl	1bf48 <read_boolean_unary_expression@@Base+0x944>
   1d914:	add	r5, sp, #8
   1d918:	mov	r7, r0
   1d91c:	mov	r0, r5
   1d920:	bl	1c0dc <read_boolean_unary_expression@@Base+0xad8>
   1d924:	cmp	r4, #0
   1d928:	beq	1d950 <__gcov_sort_n_vals@@Base+0x3e4>
   1d92c:	mov	r0, r4
   1d930:	str	r6, [sp]
   1d934:	mov	r3, r7
   1d938:	mov	r2, r8
   1d93c:	mov	r1, r5
   1d940:	bl	1d738 <__gcov_sort_n_vals@@Base+0x1cc>
   1d944:	ldr	r4, [r4, #4]
   1d948:	cmp	r4, #0
   1d94c:	bne	1d92c <__gcov_sort_n_vals@@Base+0x3c0>
   1d950:	ldr	r0, [sp, #8]
   1d954:	bl	1184c <free@plt>
   1d958:	add	sp, sp, #6080	; 0x17c0
   1d95c:	add	sp, sp, #32
   1d960:	pop	{r4, r5, r6, r7, r8, pc}
   1d964:	ldrb	r1, [r0, #4]
   1d968:	tst	r1, #1
   1d96c:	bxne	lr
   1d970:	push	{r4, lr}
   1d974:	lsr	r1, r1, #1
   1d978:	mov	r4, r0
   1d97c:	and	r1, r1, #1
   1d980:	ldr	r0, [r0]
   1d984:	bl	1d8f0 <__gcov_sort_n_vals@@Base+0x384>
   1d988:	ldrb	r3, [r4, #4]
   1d98c:	bic	r3, r3, #3
   1d990:	orr	r3, r3, #3
   1d994:	strb	r3, [r4, #4]
   1d998:	pop	{r4, pc}
   1d99c:	push	{r4, r5, r6, lr}
   1d9a0:	ldr	r4, [pc, #84]	; 1d9fc <__gcov_sort_n_vals@@Base+0x490>
   1d9a4:	ldr	r5, [pc, #84]	; 1da00 <__gcov_sort_n_vals@@Base+0x494>
   1d9a8:	add	r4, pc, r4
   1d9ac:	mov	r0, r4
   1d9b0:	bl	1d964 <__gcov_sort_n_vals@@Base+0x3f8>
   1d9b4:	ldr	r3, [r4, #8]
   1d9b8:	add	r5, pc, r5
   1d9bc:	cmp	r3, #0
   1d9c0:	ldrne	r2, [r4, #12]
   1d9c4:	strne	r2, [r3, #12]
   1d9c8:	ldr	r2, [pc, #52]	; 1da04 <__gcov_sort_n_vals@@Base+0x498>
   1d9cc:	add	r2, pc, r2
   1d9d0:	ldr	r2, [r2, #12]
   1d9d4:	cmp	r2, #0
   1d9d8:	strne	r3, [r2, #8]
   1d9dc:	beq	1d9e8 <__gcov_sort_n_vals@@Base+0x47c>
   1d9e0:	pop	{r4, r5, r6, lr}
   1d9e4:	b	1baa4 <read_boolean_unary_expression@@Base+0x4a0>
   1d9e8:	ldr	r2, [pc, #24]	; 1da08 <__gcov_sort_n_vals@@Base+0x49c>
   1d9ec:	ldr	r2, [r5, r2]
   1d9f0:	pop	{r4, r5, r6, lr}
   1d9f4:	str	r3, [r2, #4]
   1d9f8:	b	1baa4 <read_boolean_unary_expression@@Base+0x4a0>
   1d9fc:	andeq	r3, r1, ip, lsr r1
   1da00:	andeq	r1, r1, r0, asr #12
   1da04:	andeq	r3, r1, r8, lsl r1
   1da08:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1da0c:	ldr	r1, [r0]
   1da10:	push	{r4, r5, r6, lr}
   1da14:	cmp	r1, #0
   1da18:	ldr	r5, [pc, #156]	; 1dabc <__gcov_sort_n_vals@@Base+0x550>
   1da1c:	add	r5, pc, r5
   1da20:	popeq	{r4, r5, r6, pc}
   1da24:	ldr	r3, [r0, #52]	; 0x34
   1da28:	cmp	r3, #0
   1da2c:	popeq	{r4, r5, r6, pc}
   1da30:	mov	r4, r0
   1da34:	mov	r2, #0
   1da38:	add	r0, r0, #12
   1da3c:	bl	1c68c <read_boolean_unary_expression@@Base+0x1088>
   1da40:	cmp	r0, #0
   1da44:	popeq	{r4, r5, r6, pc}
   1da48:	ldr	r6, [pc, #112]	; 1dac0 <__gcov_sort_n_vals@@Base+0x554>
   1da4c:	add	r6, pc, r6
   1da50:	ldr	r2, [r6]
   1da54:	cmp	r2, #0
   1da58:	beq	1da70 <__gcov_sort_n_vals@@Base+0x504>
   1da5c:	ldr	r3, [pc, #96]	; 1dac4 <__gcov_sort_n_vals@@Base+0x558>
   1da60:	str	r2, [r4, #4]
   1da64:	add	r3, pc, r3
   1da68:	str	r4, [r3]
   1da6c:	pop	{r4, r5, r6, pc}
   1da70:	ldr	r3, [pc, #80]	; 1dac8 <__gcov_sort_n_vals@@Base+0x55c>
   1da74:	ldr	r2, [pc, #80]	; 1dacc <__gcov_sort_n_vals@@Base+0x560>
   1da78:	mov	r0, #12
   1da7c:	ldr	r5, [r5, r3]
   1da80:	add	r2, pc, r2
   1da84:	ldr	r1, [r5]
   1da88:	bl	1c68c <read_boolean_unary_expression@@Base+0x1088>
   1da8c:	cmp	r0, #0
   1da90:	ldreq	r2, [r6]
   1da94:	beq	1da5c <__gcov_sort_n_vals@@Base+0x4f0>
   1da98:	ldr	r3, [r5, #4]
   1da9c:	cmp	r3, #0
   1daa0:	str	r3, [r6, #8]
   1daa4:	strne	r6, [r3, #12]
   1daa8:	ldr	r3, [pc, #32]	; 1dad0 <__gcov_sort_n_vals@@Base+0x564>
   1daac:	add	r3, pc, r3
   1dab0:	str	r3, [r5, #4]
   1dab4:	ldr	r2, [r3]
   1dab8:	b	1da5c <__gcov_sort_n_vals@@Base+0x4f0>
   1dabc:	ldrdeq	r1, [r1], -ip
   1dac0:	muleq	r1, r8, r0
   1dac4:	andeq	r3, r1, r0, lsl #1
   1dac8:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1dacc:	andeq	r0, r0, r8, asr #28
   1dad0:	andeq	r3, r1, r8, lsr r0
   1dad4:	cmp	r3, #0
   1dad8:	cmpeq	r2, #0
   1dadc:	bne	1db00 <__gcov_sort_n_vals@@Base+0x594>
   1dae0:	cmp	r1, #0
   1dae4:	movlt	r1, #-2147483648	; 0x80000000
   1dae8:	movlt	r0, #0
   1daec:	blt	1dafc <__gcov_sort_n_vals@@Base+0x590>
   1daf0:	cmpeq	r0, #0
   1daf4:	mvnne	r1, #-2147483648	; 0x80000000
   1daf8:	mvnne	r0, #0
   1dafc:	b	1dba8 <__gcov_sort_n_vals@@Base+0x63c>
   1db00:	sub	sp, sp, #8
   1db04:	push	{sp, lr}
   1db08:	cmp	r1, #0
   1db0c:	blt	1db2c <__gcov_sort_n_vals@@Base+0x5c0>
   1db10:	cmp	r3, #0
   1db14:	blt	1db60 <__gcov_sort_n_vals@@Base+0x5f4>
   1db18:	bl	1dbfc <__gcov_sort_n_vals@@Base+0x690>
   1db1c:	ldr	lr, [sp, #4]
   1db20:	add	sp, sp, #8
   1db24:	pop	{r2, r3}
   1db28:	bx	lr
   1db2c:	rsbs	r0, r0, #0
   1db30:	sbc	r1, r1, r1, lsl #1
   1db34:	cmp	r3, #0
   1db38:	blt	1db84 <__gcov_sort_n_vals@@Base+0x618>
   1db3c:	bl	1dbfc <__gcov_sort_n_vals@@Base+0x690>
   1db40:	ldr	lr, [sp, #4]
   1db44:	add	sp, sp, #8
   1db48:	pop	{r2, r3}
   1db4c:	rsbs	r0, r0, #0
   1db50:	sbc	r1, r1, r1, lsl #1
   1db54:	rsbs	r2, r2, #0
   1db58:	sbc	r3, r3, r3, lsl #1
   1db5c:	bx	lr
   1db60:	rsbs	r2, r2, #0
   1db64:	sbc	r3, r3, r3, lsl #1
   1db68:	bl	1dbfc <__gcov_sort_n_vals@@Base+0x690>
   1db6c:	ldr	lr, [sp, #4]
   1db70:	add	sp, sp, #8
   1db74:	pop	{r2, r3}
   1db78:	rsbs	r0, r0, #0
   1db7c:	sbc	r1, r1, r1, lsl #1
   1db80:	bx	lr
   1db84:	rsbs	r2, r2, #0
   1db88:	sbc	r3, r3, r3, lsl #1
   1db8c:	bl	1dbfc <__gcov_sort_n_vals@@Base+0x690>
   1db90:	ldr	lr, [sp, #4]
   1db94:	add	sp, sp, #8
   1db98:	pop	{r2, r3}
   1db9c:	rsbs	r2, r2, #0
   1dba0:	sbc	r3, r3, r3, lsl #1
   1dba4:	bx	lr
   1dba8:	push	{r1, lr}
   1dbac:	mov	r0, #8
   1dbb0:	bl	1181c <raise@plt>
   1dbb4:	pop	{r1, pc}
   1dbb8:	ldr	r3, [pc, #48]	; 1dbf0 <__gcov_sort_n_vals@@Base+0x684>
   1dbbc:	ldr	r2, [pc, #48]	; 1dbf4 <__gcov_sort_n_vals@@Base+0x688>
   1dbc0:	and	r3, r3, r0, lsr #1
   1dbc4:	sub	r0, r0, r3
   1dbc8:	and	r3, r0, r2
   1dbcc:	and	r0, r2, r0, lsr #2
   1dbd0:	add	r3, r3, r0
   1dbd4:	ldr	r0, [pc, #28]	; 1dbf8 <__gcov_sort_n_vals@@Base+0x68c>
   1dbd8:	add	r3, r3, r3, lsr #4
   1dbdc:	and	r0, r0, r3
   1dbe0:	add	r0, r0, r0, lsl #8
   1dbe4:	add	r0, r0, r0, lsl #16
   1dbe8:	lsr	r0, r0, #24
   1dbec:	bx	lr
   1dbf0:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   1dbf4:	teqcc	r3, #-872415232	; 0xcc000000
   1dbf8:	svceq	0x000f0f0f
   1dbfc:	cmp	r1, r3
   1dc00:	cmpeq	r0, r2
   1dc04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc08:	mov	r4, r0
   1dc0c:	movcc	r0, #0
   1dc10:	mov	r5, r1
   1dc14:	ldr	lr, [sp, #36]	; 0x24
   1dc18:	movcc	r1, r0
   1dc1c:	bcc	1dd18 <__gcov_sort_n_vals@@Base+0x7ac>
   1dc20:	cmp	r3, #0
   1dc24:	clzeq	ip, r2
   1dc28:	clzne	ip, r3
   1dc2c:	addeq	ip, ip, #32
   1dc30:	cmp	r5, #0
   1dc34:	clzeq	r1, r4
   1dc38:	addeq	r1, r1, #32
   1dc3c:	clzne	r1, r5
   1dc40:	sub	ip, ip, r1
   1dc44:	sub	sl, ip, #32
   1dc48:	lsl	r9, r3, ip
   1dc4c:	rsb	fp, ip, #32
   1dc50:	orr	r9, r9, r2, lsl sl
   1dc54:	orr	r9, r9, r2, lsr fp
   1dc58:	lsl	r8, r2, ip
   1dc5c:	cmp	r5, r9
   1dc60:	cmpeq	r4, r8
   1dc64:	movcc	r0, #0
   1dc68:	movcc	r1, r0
   1dc6c:	bcc	1dc88 <__gcov_sort_n_vals@@Base+0x71c>
   1dc70:	mov	r0, #1
   1dc74:	subs	r4, r4, r8
   1dc78:	lsl	r1, r0, sl
   1dc7c:	orr	r1, r1, r0, lsr fp
   1dc80:	lsl	r0, r0, ip
   1dc84:	sbc	r5, r5, r9
   1dc88:	cmp	ip, #0
   1dc8c:	beq	1dd18 <__gcov_sort_n_vals@@Base+0x7ac>
   1dc90:	lsr	r6, r8, #1
   1dc94:	orr	r6, r6, r9, lsl #31
   1dc98:	lsr	r7, r9, #1
   1dc9c:	mov	r2, ip
   1dca0:	b	1dcc4 <__gcov_sort_n_vals@@Base+0x758>
   1dca4:	subs	r3, r4, r6
   1dca8:	sbc	r8, r5, r7
   1dcac:	adds	r3, r3, r3
   1dcb0:	adc	r8, r8, r8
   1dcb4:	adds	r4, r3, #1
   1dcb8:	adc	r5, r8, #0
   1dcbc:	subs	r2, r2, #1
   1dcc0:	beq	1dce0 <__gcov_sort_n_vals@@Base+0x774>
   1dcc4:	cmp	r5, r7
   1dcc8:	cmpeq	r4, r6
   1dccc:	bcs	1dca4 <__gcov_sort_n_vals@@Base+0x738>
   1dcd0:	adds	r4, r4, r4
   1dcd4:	adc	r5, r5, r5
   1dcd8:	subs	r2, r2, #1
   1dcdc:	bne	1dcc4 <__gcov_sort_n_vals@@Base+0x758>
   1dce0:	lsr	r3, r4, ip
   1dce4:	orr	r3, r3, r5, lsl fp
   1dce8:	lsr	r2, r5, ip
   1dcec:	orr	r3, r3, r5, lsr sl
   1dcf0:	adds	r0, r0, r4
   1dcf4:	mov	r4, r3
   1dcf8:	lsl	r3, r2, ip
   1dcfc:	orr	r3, r3, r4, lsl sl
   1dd00:	lsl	ip, r4, ip
   1dd04:	orr	r3, r3, r4, lsr fp
   1dd08:	adc	r1, r1, r5
   1dd0c:	subs	r0, r0, ip
   1dd10:	mov	r5, r2
   1dd14:	sbc	r1, r1, r3
   1dd18:	cmp	lr, #0
   1dd1c:	strdne	r4, [lr]
   1dd20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001dd24 <__libc_csu_init@@Base>:
   1dd24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1dd28:	mov	r7, r0
   1dd2c:	ldr	r6, [pc, #72]	; 1dd7c <__libc_csu_init@@Base+0x58>
   1dd30:	ldr	r5, [pc, #72]	; 1dd80 <__libc_csu_init@@Base+0x5c>
   1dd34:	add	r6, pc, r6
   1dd38:	add	r5, pc, r5
   1dd3c:	sub	r6, r6, r5
   1dd40:	mov	r8, r1
   1dd44:	mov	r9, r2
   1dd48:	bl	117f0 <fdopen@plt-0x20>
   1dd4c:	asrs	r6, r6, #2
   1dd50:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dd54:	mov	r4, #0
   1dd58:	add	r4, r4, #1
   1dd5c:	ldr	r3, [r5], #4
   1dd60:	mov	r2, r9
   1dd64:	mov	r1, r8
   1dd68:	mov	r0, r7
   1dd6c:	blx	r3
   1dd70:	cmp	r6, r4
   1dd74:	bne	1dd58 <__libc_csu_init@@Base+0x34>
   1dd78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dd7c:	andeq	r1, r1, r8, asr #3
   1dd80:			; <UNDEFINED> instruction: 0x000111b0

0001dd84 <__libc_csu_fini@@Base>:
   1dd84:	bx	lr

Disassembly of section .fini:

0001dd88 <.fini>:
   1dd88:	push	{r3, lr}
   1dd8c:	pop	{r3, pc}
