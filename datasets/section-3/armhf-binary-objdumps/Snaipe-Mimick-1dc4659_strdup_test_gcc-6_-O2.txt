
../repos/Snaipe-Mimick-1dc4659/sample/strdup/strdup_test:     file format elf32-littlearm


Disassembly of section .init:

000111cc <.init>:
   111cc:	push	{r3, lr}
   111d0:	bl	11330 <_start@@Base+0x3c>
   111d4:	pop	{r3, pc}

Disassembly of section .plt:

000111d8 <strstr@plt-0x14>:
   111d8:	push	{lr}		; (str lr, [sp, #-4]!)
   111dc:	ldr	lr, [pc, #4]	; 111e8 <strstr@plt-0x4>
   111e0:	add	lr, pc, lr
   111e4:	ldr	pc, [lr, #8]!
   111e8:	andeq	r3, r1, r8, lsl lr

000111ec <strstr@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #77824	; 0x13000
   111f4:	ldr	pc, [ip, #3608]!	; 0xe18

000111f8 <raise@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #77824	; 0x13000
   11200:	ldr	pc, [ip, #3600]!	; 0xe10

00011204 <strcmp@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #77824	; 0x13000
   1120c:	ldr	pc, [ip, #3592]!	; 0xe08

00011210 <mprotect@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #77824	; 0x13000
   11218:	ldr	pc, [ip, #3584]!	; 0xe00

0001121c <free@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #77824	; 0x13000
   11224:	ldr	pc, [ip, #3576]!	; 0xdf8

00011228 <memcpy@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #77824	; 0x13000
   11230:	ldr	pc, [ip, #3568]!	; 0xdf0

00011234 <realloc@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #77824	; 0x13000
   1123c:	ldr	pc, [ip, #3560]!	; 0xde8

00011240 <malloc@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #77824	; 0x13000
   11248:	ldr	pc, [ip, #3552]!	; 0xde0

0001124c <__libc_start_main@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #77824	; 0x13000
   11254:	ldr	pc, [ip, #3544]!	; 0xdd8

00011258 <__gmon_start__@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #77824	; 0x13000
   11260:	ldr	pc, [ip, #3536]!	; 0xdd0

00011264 <strlen@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #77824	; 0x13000
   1126c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011270 <mmap@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #77824	; 0x13000
   11278:	ldr	pc, [ip, #3520]!	; 0xdc0

0001127c <strchr@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #77824	; 0x13000
   11284:	ldr	pc, [ip, #3512]!	; 0xdb8

00011288 <fprintf@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #77824	; 0x13000
   11290:	ldr	pc, [ip, #3504]!	; 0xdb0

00011294 <__errno_location@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #77824	; 0x13000
   1129c:	ldr	pc, [ip, #3496]!	; 0xda8

000112a0 <snprintf@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #77824	; 0x13000
   112a8:	ldr	pc, [ip, #3488]!	; 0xda0

000112ac <memset@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #77824	; 0x13000
   112b4:	ldr	pc, [ip, #3480]!	; 0xd98

000112b8 <munmap@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #77824	; 0x13000
   112c0:	ldr	pc, [ip, #3472]!	; 0xd90

000112c4 <my_strdup@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #77824	; 0x13000
   112cc:	ldr	pc, [ip, #3464]!	; 0xd88

000112d0 <__tls_get_addr@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #77824	; 0x13000
   112d8:	ldr	pc, [ip, #3456]!	; 0xd80

000112dc <strncmp@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #77824	; 0x13000
   112e4:	ldr	pc, [ip, #3448]!	; 0xd78

000112e8 <abort@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #77824	; 0x13000
   112f0:	ldr	pc, [ip, #3440]!	; 0xd70

Disassembly of section .text:

000112f4 <_start@@Base>:
   112f4:	mov	fp, #0
   112f8:	mov	lr, #0
   112fc:	pop	{r1}		; (ldr r1, [sp], #4)
   11300:	mov	r2, sp
   11304:	push	{r2}		; (str r2, [sp, #-4]!)
   11308:	push	{r0}		; (str r0, [sp, #-4]!)
   1130c:	ldr	ip, [pc, #16]	; 11324 <_start@@Base+0x30>
   11310:	push	{ip}		; (str ip, [sp, #-4]!)
   11314:	ldr	r0, [pc, #12]	; 11328 <_start@@Base+0x34>
   11318:	ldr	r3, [pc, #12]	; 1132c <_start@@Base+0x38>
   1131c:	bl	1124c <__libc_start_main@plt>
   11320:	bl	112e8 <abort@plt>
   11324:	andeq	r3, r1, r8, ror #21
   11328:	andeq	r1, r1, r4, asr ip
   1132c:	andeq	r3, r1, r8, lsl #21
   11330:	ldr	r3, [pc, #20]	; 1134c <_start@@Base+0x58>
   11334:	ldr	r2, [pc, #20]	; 11350 <_start@@Base+0x5c>
   11338:	add	r3, pc, r3
   1133c:	ldr	r2, [r3, r2]
   11340:	cmp	r2, #0
   11344:	bxeq	lr
   11348:	b	11258 <__gmon_start__@plt>
   1134c:	andeq	r3, r1, r0, asr #25
   11350:	andeq	r0, r0, r4, lsl #1
   11354:	ldr	r3, [pc, #28]	; 11378 <_start@@Base+0x84>
   11358:	ldr	r0, [pc, #28]	; 1137c <_start@@Base+0x88>
   1135c:	sub	r3, r3, r0
   11360:	cmp	r3, #6
   11364:	bxls	lr
   11368:	ldr	r3, [pc, #16]	; 11380 <_start@@Base+0x8c>
   1136c:	cmp	r3, #0
   11370:	bxeq	lr
   11374:	bx	r3
   11378:	strheq	r5, [r2], -r3
   1137c:	strheq	r5, [r2], -r0
   11380:	andeq	r0, r0, r0
   11384:	ldr	r1, [pc, #36]	; 113b0 <_start@@Base+0xbc>
   11388:	ldr	r0, [pc, #36]	; 113b4 <_start@@Base+0xc0>
   1138c:	sub	r1, r1, r0
   11390:	asr	r1, r1, #2
   11394:	add	r1, r1, r1, lsr #31
   11398:	asrs	r1, r1, #1
   1139c:	bxeq	lr
   113a0:	ldr	r3, [pc, #16]	; 113b8 <_start@@Base+0xc4>
   113a4:	cmp	r3, #0
   113a8:	bxeq	lr
   113ac:	bx	r3
   113b0:	strheq	r5, [r2], -r0
   113b4:	strheq	r5, [r2], -r0
   113b8:	andeq	r0, r0, r0
   113bc:	push	{r4, lr}
   113c0:	ldr	r4, [pc, #24]	; 113e0 <_start@@Base+0xec>
   113c4:	ldrb	r3, [r4]
   113c8:	cmp	r3, #0
   113cc:	popne	{r4, pc}
   113d0:	bl	11354 <_start@@Base+0x60>
   113d4:	mov	r3, #1
   113d8:	strb	r3, [r4]
   113dc:	pop	{r4, pc}
   113e0:	strheq	r5, [r2], -r0
   113e4:	ldr	r0, [pc, #40]	; 11414 <_start@@Base+0x120>
   113e8:	ldr	r3, [r0]
   113ec:	cmp	r3, #0
   113f0:	bne	113f8 <_start@@Base+0x104>
   113f4:	b	11384 <_start@@Base+0x90>
   113f8:	ldr	r3, [pc, #24]	; 11418 <_start@@Base+0x124>
   113fc:	cmp	r3, #0
   11400:	beq	113f4 <_start@@Base+0x100>
   11404:	push	{r4, lr}
   11408:	blx	r3
   1140c:	pop	{r4, lr}
   11410:	b	11384 <_start@@Base+0x90>
   11414:	strdeq	r4, [r2], -ip
   11418:	andeq	r0, r0, r0
   1141c:	push	{fp, lr}
   11420:	add	fp, sp, #4
   11424:	sub	sp, sp, #96	; 0x60
   11428:	str	r0, [fp, #-96]	; 0xffffffa0
   1142c:	bl	11e98 <mmk_matcher_ctx@@Base>
   11430:	str	r0, [fp, #-24]	; 0xffffffe8
   11434:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11438:	cmp	r3, #0
   1143c:	beq	11694 <_start@@Base+0x3a0>
   11440:	bl	12d30 <mmk_ctx@@Base>
   11444:	mov	r3, r0
   11448:	mov	r0, r3
   1144c:	bl	12900 <mmk_stub_context@@Base>
   11450:	str	r0, [fp, #-28]	; 0xffffffe4
   11454:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11458:	ldr	r3, [r3]
   1145c:	cmp	r3, #0
   11460:	bne	114b0 <_start@@Base+0x1bc>
   11464:	mov	r0, #44	; 0x2c
   11468:	bl	13564 <mmk_malloc@@Base>
   1146c:	str	r0, [fp, #-32]	; 0xffffffe0
   11470:	bl	13784 <mmk_when_get_result@@Base>
   11474:	mov	r2, r0
   11478:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1147c:	add	ip, r3, #8
   11480:	mov	lr, r2
   11484:	ldm	lr!, {r0, r1, r2, r3}
   11488:	stmia	ip!, {r0, r1, r2, r3}
   1148c:	ldr	r3, [lr]
   11490:	str	r3, [ip]
   11494:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11498:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1149c:	str	r2, [r3, #40]	; 0x28
   114a0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   114a4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   114a8:	bl	137b8 <mmk_when_impl@@Base>
   114ac:	b	11684 <_start@@Base+0x390>
   114b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   114b4:	ldr	r3, [r3]
   114b8:	cmp	r3, #1
   114bc:	bne	11684 <_start@@Base+0x390>
   114c0:	mov	r3, #0
   114c4:	str	r3, [fp, #-8]
   114c8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   114cc:	bl	12218 <mmk_mock_params_begin@@Base>
   114d0:	str	r0, [fp, #-12]
   114d4:	b	1163c <_start@@Base+0x348>
   114d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   114dc:	str	r3, [fp, #-36]	; 0xffffffdc
   114e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114e4:	ldr	r3, [r3, #8]
   114e8:	cmp	r3, #0
   114ec:	beq	115dc <_start@@Base+0x2e8>
   114f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114f4:	ldr	r3, [r3, #8]
   114f8:	str	r3, [fp, #-36]	; 0xffffffdc
   114fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11500:	ldr	r3, [r3]
   11504:	cmp	r3, #0
   11508:	beq	11600 <_start@@Base+0x30c>
   1150c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11510:	ldr	r3, [r3]
   11514:	cmp	r3, #0
   11518:	bge	1159c <_start@@Base+0x2a8>
   1151c:	ldr	r3, [fp, #-12]
   11520:	add	r3, r3, #12
   11524:	sub	r1, fp, #96	; 0x60
   11528:	mov	r2, #4
   1152c:	mov	r0, r3
   11530:	bl	13334 <mmk_memcmp@@Base>
   11534:	str	r0, [fp, #-40]	; 0xffffffd8
   11538:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1153c:	cmp	r3, #0
   11540:	bne	11558 <_start@@Base+0x264>
   11544:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11548:	ldr	r3, [r3]
   1154c:	and	r3, r3, #2
   11550:	cmp	r3, #0
   11554:	beq	11618 <_start@@Base+0x324>
   11558:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1155c:	cmp	r3, #0
   11560:	bge	11578 <_start@@Base+0x284>
   11564:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11568:	ldr	r3, [r3]
   1156c:	and	r3, r3, #4
   11570:	cmp	r3, #0
   11574:	beq	11620 <_start@@Base+0x32c>
   11578:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1157c:	cmp	r3, #0
   11580:	ble	11600 <_start@@Base+0x30c>
   11584:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11588:	ldr	r3, [r3]
   1158c:	and	r3, r3, #8
   11590:	cmp	r3, #0
   11594:	bne	11600 <_start@@Base+0x30c>
   11598:	b	1162c <_start@@Base+0x338>
   1159c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   115a0:	ldr	r3, [r3]
   115a4:	cmp	r3, #1
   115a8:	bne	11600 <_start@@Base+0x30c>
   115ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
   115b0:	bl	11f38 <mmk_matcher_get_predicate@@Base>
   115b4:	str	r0, [fp, #-44]	; 0xffffffd4
   115b8:	ldr	r3, [fp, #-12]
   115bc:	ldr	r2, [r3, #12]
   115c0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   115c4:	mov	r0, r2
   115c8:	blx	r3
   115cc:	mov	r3, r0
   115d0:	cmp	r3, #0
   115d4:	bne	11600 <_start@@Base+0x30c>
   115d8:	b	1162c <_start@@Base+0x338>
   115dc:	ldr	r3, [fp, #-12]
   115e0:	add	r3, r3, #12
   115e4:	sub	r1, fp, #96	; 0x60
   115e8:	mov	r2, #4
   115ec:	mov	r0, r3
   115f0:	bl	13334 <mmk_memcmp@@Base>
   115f4:	mov	r3, r0
   115f8:	cmp	r3, #0
   115fc:	bne	11628 <_start@@Base+0x334>
   11600:	ldr	r3, [fp, #-12]
   11604:	ldr	r3, [r3]
   11608:	ldr	r2, [fp, #-8]
   1160c:	add	r3, r2, r3
   11610:	str	r3, [fp, #-8]
   11614:	b	1162c <_start@@Base+0x338>
   11618:	nop			; (mov r0, r0)
   1161c:	b	1162c <_start@@Base+0x338>
   11620:	nop			; (mov r0, r0)
   11624:	b	1162c <_start@@Base+0x338>
   11628:	nop			; (mov r0, r0)
   1162c:	ldr	r1, [fp, #-12]
   11630:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11634:	bl	1226c <mmk_mock_params_next@@Base>
   11638:	str	r0, [fp, #-12]
   1163c:	ldr	r3, [fp, #-12]
   11640:	cmp	r3, #0
   11644:	bne	114d8 <_start@@Base+0x1e4>
   11648:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1164c:	str	r3, [fp, #-16]
   11650:	b	11670 <_start@@Base+0x37c>
   11654:	ldr	r3, [fp, #-16]
   11658:	ldr	r3, [r3, #8]
   1165c:	str	r3, [fp, #-48]	; 0xffffffd0
   11660:	ldr	r0, [fp, #-16]
   11664:	bl	135a4 <mmk_free@@Base>
   11668:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1166c:	str	r3, [fp, #-16]
   11670:	ldr	r3, [fp, #-16]
   11674:	cmp	r3, #0
   11678:	bne	11654 <_start@@Base+0x360>
   1167c:	ldr	r0, [fp, #-8]
   11680:	bl	12ed8 <mmk_verify_set_times@@Base>
   11684:	ldr	r3, [pc, #648]	; 11914 <_start@@Base+0x620>
   11688:	add	r3, pc, r3
   1168c:	ldr	r3, [r3]
   11690:	b	11908 <_start@@Base+0x614>
   11694:	sub	r3, fp, #88	; 0x58
   11698:	mov	r2, #0
   1169c:	str	r2, [r3]
   116a0:	str	r2, [r3, #4]
   116a4:	str	r2, [r3, #8]
   116a8:	str	r2, [r3, #12]
   116ac:	ldr	r3, [fp, #-96]	; 0xffffffa0
   116b0:	str	r3, [fp, #-76]	; 0xffffffb4
   116b4:	sub	r3, fp, #88	; 0x58
   116b8:	str	r3, [fp, #-52]	; 0xffffffcc
   116bc:	mov	r1, #16
   116c0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   116c4:	bl	130fc <mmk_verify_register_call@@Base>
   116c8:	bl	122e4 <mmk_mock_get_params@@Base>
   116cc:	str	r0, [fp, #-20]	; 0xffffffec
   116d0:	b	118f0 <_start@@Base+0x5fc>
   116d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   116d8:	str	r3, [fp, #-56]	; 0xffffffc8
   116dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   116e0:	ldr	r3, [r3]
   116e4:	str	r3, [fp, #-60]	; 0xffffffc4
   116e8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116ec:	ldr	r3, [r3, #8]
   116f0:	cmp	r3, #0
   116f4:	beq	117dc <_start@@Base+0x4e8>
   116f8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116fc:	ldr	r3, [r3, #8]
   11700:	str	r3, [fp, #-60]	; 0xffffffc4
   11704:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11708:	ldr	r3, [r3]
   1170c:	cmp	r3, #0
   11710:	beq	11800 <_start@@Base+0x50c>
   11714:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11718:	ldr	r3, [r3]
   1171c:	cmp	r3, #0
   11720:	bge	117a0 <_start@@Base+0x4ac>
   11724:	sub	r1, fp, #96	; 0x60
   11728:	sub	r3, fp, #96	; 0x60
   1172c:	mov	r2, #4
   11730:	mov	r0, r3
   11734:	bl	13334 <mmk_memcmp@@Base>
   11738:	str	r0, [fp, #-64]	; 0xffffffc0
   1173c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11740:	cmp	r3, #0
   11744:	bne	1175c <_start@@Base+0x468>
   11748:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1174c:	ldr	r3, [r3]
   11750:	and	r3, r3, #2
   11754:	cmp	r3, #0
   11758:	beq	118d8 <_start@@Base+0x5e4>
   1175c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11760:	cmp	r3, #0
   11764:	bge	1177c <_start@@Base+0x488>
   11768:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1176c:	ldr	r3, [r3]
   11770:	and	r3, r3, #4
   11774:	cmp	r3, #0
   11778:	beq	118d8 <_start@@Base+0x5e4>
   1177c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11780:	cmp	r3, #0
   11784:	ble	11800 <_start@@Base+0x50c>
   11788:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1178c:	ldr	r3, [r3]
   11790:	and	r3, r3, #8
   11794:	cmp	r3, #0
   11798:	bne	11800 <_start@@Base+0x50c>
   1179c:	b	118d8 <_start@@Base+0x5e4>
   117a0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   117a4:	ldr	r3, [r3]
   117a8:	cmp	r3, #1
   117ac:	bne	11800 <_start@@Base+0x50c>
   117b0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   117b4:	bl	11f38 <mmk_matcher_get_predicate@@Base>
   117b8:	str	r0, [fp, #-68]	; 0xffffffbc
   117bc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   117c0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   117c4:	mov	r0, r2
   117c8:	blx	r3
   117cc:	mov	r3, r0
   117d0:	cmp	r3, #0
   117d4:	bne	11800 <_start@@Base+0x50c>
   117d8:	b	118e4 <_start@@Base+0x5f0>
   117dc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117e0:	add	r1, r3, #40	; 0x28
   117e4:	sub	r3, fp, #96	; 0x60
   117e8:	mov	r2, #4
   117ec:	mov	r0, r3
   117f0:	bl	13334 <mmk_memcmp@@Base>
   117f4:	mov	r3, r0
   117f8:	cmp	r3, #0
   117fc:	bne	118e0 <_start@@Base+0x5ec>
   11800:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11804:	ldr	r3, [r3, #12]
   11808:	cmp	r3, #0
   1180c:	beq	11824 <_start@@Base+0x530>
   11810:	bl	11294 <__errno_location@plt>
   11814:	mov	r2, r0
   11818:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1181c:	ldr	r3, [r3, #12]
   11820:	str	r3, [r2]
   11824:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11828:	ldr	r3, [r3, #20]
   1182c:	cmp	r3, #0
   11830:	beq	11864 <_start@@Base+0x570>
   11834:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11838:	ldr	r3, [r3, #16]
   1183c:	cmp	r3, #0
   11840:	bne	11864 <_start@@Base+0x570>
   11844:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11848:	ldr	r3, [r3, #20]
   1184c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11850:	mov	r0, r2
   11854:	blx	r3
   11858:	str	r0, [fp, #-72]	; 0xffffffb8
   1185c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11860:	b	11908 <_start@@Base+0x614>
   11864:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11868:	ldr	r3, [r3, #20]
   1186c:	cmp	r3, #0
   11870:	beq	118a8 <_start@@Base+0x5b4>
   11874:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11878:	ldr	r3, [r3, #16]
   1187c:	cmp	r3, #0
   11880:	beq	118a8 <_start@@Base+0x5b4>
   11884:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11888:	ldr	r3, [r3, #20]
   1188c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11890:	mov	r0, r2
   11894:	blx	r3
   11898:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1189c:	ldr	r3, [r3, #16]
   118a0:	ldr	r3, [r3]
   118a4:	b	11908 <_start@@Base+0x614>
   118a8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   118ac:	ldr	r3, [r3, #16]
   118b0:	cmp	r3, #0
   118b4:	beq	118c8 <_start@@Base+0x5d4>
   118b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   118bc:	ldr	r3, [r3, #16]
   118c0:	ldr	r3, [r3]
   118c4:	b	11908 <_start@@Base+0x614>
   118c8:	ldr	r3, [pc, #72]	; 11918 <_start@@Base+0x624>
   118cc:	add	r3, pc, r3
   118d0:	ldr	r3, [r3]
   118d4:	b	11908 <_start@@Base+0x614>
   118d8:	nop			; (mov r0, r0)
   118dc:	b	118e4 <_start@@Base+0x5f0>
   118e0:	nop			; (mov r0, r0)
   118e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   118e8:	ldr	r3, [r3, #4]
   118ec:	str	r3, [fp, #-20]	; 0xffffffec
   118f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   118f4:	cmp	r3, #0
   118f8:	bne	116d4 <_start@@Base+0x3e0>
   118fc:	ldr	r3, [pc, #24]	; 1191c <_start@@Base+0x628>
   11900:	add	r3, pc, r3
   11904:	ldr	r3, [r3]
   11908:	mov	r0, r3
   1190c:	sub	sp, fp, #4
   11910:	pop	{fp, pc}
   11914:	andeq	r3, r1, r4, lsr #20
   11918:	andeq	r3, r1, r0, ror #15
   1191c:	andeq	r3, r1, ip, lsr #15
   11920:	push	{fp, lr}
   11924:	add	fp, sp, #4
   11928:	sub	sp, sp, #8
   1192c:	str	r0, [fp, #-8]
   11930:	ldr	r3, [pc, #28]	; 11954 <_start@@Base+0x660>
   11934:	add	r3, pc, r3
   11938:	mov	r1, r3
   1193c:	ldr	r0, [fp, #-8]
   11940:	bl	11f40 <mmk_mock_create_internal@@Base>
   11944:	mov	r3, r0
   11948:	mov	r0, r3
   1194c:	sub	sp, fp, #4
   11950:	pop	{fp, pc}
   11954:			; <UNDEFINED> instruction: 0xfffffae0

00011958 <test_simple_case@@Base>:
   11958:	push	{r4, fp, lr}
   1195c:	add	fp, sp, #8
   11960:	sub	sp, sp, #76	; 0x4c
   11964:	ldr	r4, [pc, #404]	; 11b00 <test_simple_case@@Base+0x1a8>
   11968:	add	r4, pc, r4
   1196c:	ldr	r3, [pc, #400]	; 11b04 <test_simple_case@@Base+0x1ac>
   11970:	add	r3, pc, r3
   11974:	mov	r0, r3
   11978:	bl	11920 <_start@@Base+0x62c>
   1197c:	mov	r0, #0
   11980:	bl	11e2c <mmk_matcher_init@@Base>
   11984:	sub	r3, fp, #68	; 0x44
   11988:	mov	r2, #0
   1198c:	str	r2, [r3]
   11990:	str	r2, [r3, #4]
   11994:	str	r2, [r3, #8]
   11998:	str	r2, [r3, #12]
   1199c:	str	r2, [r3, #16]
   119a0:	sub	r3, fp, #76	; 0x4c
   119a4:	str	r3, [fp, #-48]	; 0xffffffd0
   119a8:	sub	r3, fp, #48	; 0x30
   119ac:	str	r3, [fp, #-60]	; 0xffffffc4
   119b0:	sub	r3, fp, #68	; 0x44
   119b4:	mov	r0, r3
   119b8:	bl	13740 <mmk_when_init@@Base>
   119bc:	mov	r0, #6
   119c0:	bl	11240 <malloc@plt>
   119c4:	bl	11e70 <mmk_matcher_term@@Base>
   119c8:	ldr	r3, [pc, #312]	; 11b08 <test_simple_case@@Base+0x1b0>
   119cc:	add	r3, pc, r3
   119d0:	mov	r0, r3
   119d4:	bl	112c4 <my_strdup@plt>
   119d8:	str	r0, [fp, #-16]
   119dc:	mov	r0, #1
   119e0:	bl	11e2c <mmk_matcher_init@@Base>
   119e4:	mov	r1, #0
   119e8:	mov	r0, #-2147483638	; 0x8000000a
   119ec:	bl	11ebc <mmk_matcher_add@@Base>
   119f0:	mov	r0, #6
   119f4:	bl	11240 <malloc@plt>
   119f8:	bl	11e70 <mmk_matcher_term@@Base>
   119fc:	sub	r3, fp, #44	; 0x2c
   11a00:	mov	r2, #0
   11a04:	str	r2, [r3]
   11a08:	str	r2, [r3, #4]
   11a0c:	str	r2, [r3, #8]
   11a10:	str	r2, [r3, #12]
   11a14:	str	r2, [r3, #16]
   11a18:	str	r2, [r3, #20]
   11a1c:	mov	r3, #1
   11a20:	str	r3, [fp, #-44]	; 0xffffffd4
   11a24:	mov	r3, #1
   11a28:	str	r3, [fp, #-28]	; 0xffffffe4
   11a2c:	sub	r3, fp, #44	; 0x2c
   11a30:	mov	r0, r3
   11a34:	bl	12f1c <mmk_verify_times@@Base>
   11a38:	str	r0, [fp, #-20]	; 0xffffffec
   11a3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11a40:	cmp	r3, #0
   11a44:	bne	11a7c <test_simple_case@@Base+0x124>
   11a48:	ldr	r3, [pc, #188]	; 11b0c <test_simple_case@@Base+0x1b4>
   11a4c:	ldr	r3, [r4, r3]
   11a50:	ldr	r0, [r3]
   11a54:	ldr	r3, [pc, #180]	; 11b10 <test_simple_case@@Base+0x1b8>
   11a58:	add	r3, pc, r3
   11a5c:	str	r3, [sp]
   11a60:	mov	r3, #23
   11a64:	ldr	r2, [pc, #168]	; 11b14 <test_simple_case@@Base+0x1bc>
   11a68:	add	r2, pc, r2
   11a6c:	ldr	r1, [pc, #164]	; 11b18 <test_simple_case@@Base+0x1c0>
   11a70:	add	r1, pc, r1
   11a74:	bl	11288 <fprintf@plt>
   11a78:	bl	112e8 <abort@plt>
   11a7c:	sub	r3, fp, #76	; 0x4c
   11a80:	ldr	r2, [fp, #-16]
   11a84:	cmp	r2, r3
   11a88:	bne	11ab0 <test_simple_case@@Base+0x158>
   11a8c:	sub	r3, fp, #76	; 0x4c
   11a90:	mov	r1, r3
   11a94:	ldr	r3, [pc, #128]	; 11b1c <test_simple_case@@Base+0x1c4>
   11a98:	add	r3, pc, r3
   11a9c:	mov	r0, r3
   11aa0:	bl	11204 <strcmp@plt>
   11aa4:	mov	r3, r0
   11aa8:	cmp	r3, #0
   11aac:	beq	11ae4 <test_simple_case@@Base+0x18c>
   11ab0:	ldr	r3, [pc, #84]	; 11b0c <test_simple_case@@Base+0x1b4>
   11ab4:	ldr	r3, [r4, r3]
   11ab8:	ldr	r0, [r3]
   11abc:	ldr	r3, [pc, #92]	; 11b20 <test_simple_case@@Base+0x1c8>
   11ac0:	add	r3, pc, r3
   11ac4:	str	r3, [sp]
   11ac8:	mov	r3, #24
   11acc:	ldr	r2, [pc, #80]	; 11b24 <test_simple_case@@Base+0x1cc>
   11ad0:	add	r2, pc, r2
   11ad4:	ldr	r1, [pc, #76]	; 11b28 <test_simple_case@@Base+0x1d0>
   11ad8:	add	r1, pc, r1
   11adc:	bl	11288 <fprintf@plt>
   11ae0:	bl	112e8 <abort@plt>
   11ae4:	ldr	r3, [pc, #64]	; 11b2c <test_simple_case@@Base+0x1d4>
   11ae8:	ldr	r3, [r4, r3]
   11aec:	mov	r0, r3
   11af0:	bl	11de0 <mmk_reset@@Base>
   11af4:	nop			; (mov r0, r0)
   11af8:	sub	sp, fp, #8
   11afc:	pop	{r4, fp, pc}
   11b00:	muleq	r1, r0, r6
   11b04:	andeq	r2, r0, r0, lsl #3
   11b08:	andeq	r2, r0, r8, lsr r1
   11b0c:	andeq	r0, r0, r0, ror r0
   11b10:	andeq	r2, r0, r0, lsr r1
   11b14:	andeq	r2, r0, r4, lsr #1
   11b18:	strdeq	r2, [r0], -r8
   11b1c:	andeq	r3, r1, r4, lsl #12
   11b20:	ldrdeq	r2, [r0], -r0
   11b24:	andeq	r2, r0, ip, lsr r0
   11b28:	muleq	r0, r0, r0
   11b2c:	andeq	r0, r0, r0, lsl #1

00011b30 <test_error_case@@Base>:
   11b30:	push	{r4, fp, lr}
   11b34:	add	fp, sp, #8
   11b38:	sub	sp, sp, #44	; 0x2c
   11b3c:	ldr	r4, [pc, #244]	; 11c38 <test_error_case@@Base+0x108>
   11b40:	add	r4, pc, r4
   11b44:	ldr	r3, [pc, #240]	; 11c3c <test_error_case@@Base+0x10c>
   11b48:	add	r3, pc, r3
   11b4c:	mov	r0, r3
   11b50:	bl	11920 <_start@@Base+0x62c>
   11b54:	str	r0, [fp, #-16]
   11b58:	mov	r0, #0
   11b5c:	bl	11e2c <mmk_matcher_init@@Base>
   11b60:	sub	r3, fp, #44	; 0x2c
   11b64:	mov	r2, #0
   11b68:	str	r2, [r3]
   11b6c:	str	r2, [r3, #4]
   11b70:	str	r2, [r3, #8]
   11b74:	str	r2, [r3, #12]
   11b78:	str	r2, [r3, #16]
   11b7c:	mov	r3, #12
   11b80:	str	r3, [fp, #-40]	; 0xffffffd8
   11b84:	mov	r3, #0
   11b88:	str	r3, [fp, #-24]	; 0xffffffe8
   11b8c:	sub	r3, fp, #24
   11b90:	str	r3, [fp, #-36]	; 0xffffffdc
   11b94:	sub	r3, fp, #44	; 0x2c
   11b98:	mov	r0, r3
   11b9c:	bl	13740 <mmk_when_init@@Base>
   11ba0:	mov	r1, #1
   11ba4:	mov	r0, #0
   11ba8:	bl	11ebc <mmk_matcher_add@@Base>
   11bac:	ldr	r3, [fp, #-16]
   11bb0:	mov	r0, #0
   11bb4:	blx	r3
   11bb8:	bl	11e70 <mmk_matcher_term@@Base>
   11bbc:	ldr	r3, [pc, #124]	; 11c40 <test_error_case@@Base+0x110>
   11bc0:	add	r3, pc, r3
   11bc4:	mov	r0, r3
   11bc8:	bl	112c4 <my_strdup@plt>
   11bcc:	str	r0, [fp, #-20]	; 0xffffffec
   11bd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   11bd4:	cmp	r3, #0
   11bd8:	bne	11bf0 <test_error_case@@Base+0xc0>
   11bdc:	bl	11294 <__errno_location@plt>
   11be0:	mov	r3, r0
   11be4:	ldr	r3, [r3]
   11be8:	cmp	r3, #12
   11bec:	beq	11c24 <test_error_case@@Base+0xf4>
   11bf0:	ldr	r3, [pc, #76]	; 11c44 <test_error_case@@Base+0x114>
   11bf4:	ldr	r3, [r4, r3]
   11bf8:	ldr	r0, [r3]
   11bfc:	ldr	r3, [pc, #68]	; 11c48 <test_error_case@@Base+0x118>
   11c00:	add	r3, pc, r3
   11c04:	str	r3, [sp]
   11c08:	mov	r3, #39	; 0x27
   11c0c:	ldr	r2, [pc, #56]	; 11c4c <test_error_case@@Base+0x11c>
   11c10:	add	r2, pc, r2
   11c14:	ldr	r1, [pc, #52]	; 11c50 <test_error_case@@Base+0x120>
   11c18:	add	r1, pc, r1
   11c1c:	bl	11288 <fprintf@plt>
   11c20:	bl	112e8 <abort@plt>
   11c24:	ldr	r0, [fp, #-16]
   11c28:	bl	11de0 <mmk_reset@@Base>
   11c2c:	nop			; (mov r0, r0)
   11c30:	sub	sp, fp, #8
   11c34:	pop	{r4, fp, pc}
   11c38:			; <UNDEFINED> instruction: 0x000134b8
   11c3c:	andeq	r1, r0, r8, lsr #31
   11c40:	strdeq	r1, [r0], -r0
   11c44:	andeq	r0, r0, r0, ror r0
   11c48:			; <UNDEFINED> instruction: 0x00001fb4
   11c4c:	strdeq	r1, [r0], -ip
   11c50:	andeq	r1, r0, r0, asr pc

00011c54 <main@@Base>:
   11c54:	push	{fp, lr}
   11c58:	add	fp, sp, #4
   11c5c:	bl	11958 <test_simple_case@@Base>
   11c60:	bl	11b30 <test_error_case@@Base>
   11c64:	mov	r3, #0
   11c68:	mov	r0, r3
   11c6c:	pop	{fp, pc}

00011c70 <mmk_init@@Base>:
   11c70:	push	{r4, fp, lr}
   11c74:	add	fp, sp, #8
   11c78:	sub	sp, sp, #12
   11c7c:	ldr	r4, [pc, #164]	; 11d28 <mmk_init@@Base+0xb8>
   11c80:	add	r4, pc, r4
   11c84:	ldr	r3, [pc, #160]	; 11d2c <mmk_init@@Base+0xbc>
   11c88:	add	r3, pc, r3
   11c8c:	ldr	r3, [r3]
   11c90:	cmp	r3, #0
   11c94:	bne	11d1c <mmk_init@@Base+0xac>
   11c98:	bl	1251c <plt_init_ctx@@Base>
   11c9c:	mov	r2, r0
   11ca0:	ldr	r3, [pc, #136]	; 11d30 <mmk_init@@Base+0xc0>
   11ca4:	add	r3, pc, r3
   11ca8:	str	r2, [r3, #4]
   11cac:	ldr	r3, [pc, #128]	; 11d34 <mmk_init@@Base+0xc4>
   11cb0:	add	r3, pc, r3
   11cb4:	ldr	r3, [r3, #4]
   11cb8:	cmn	r3, #1
   11cbc:	bne	11cf4 <mmk_init@@Base+0x84>
   11cc0:	ldr	r3, [pc, #112]	; 11d38 <mmk_init@@Base+0xc8>
   11cc4:	ldr	r3, [r4, r3]
   11cc8:	ldr	r0, [r3]
   11ccc:	ldr	r3, [pc, #104]	; 11d3c <mmk_init@@Base+0xcc>
   11cd0:	add	r3, pc, r3
   11cd4:	str	r3, [sp]
   11cd8:	mov	r3, #45	; 0x2d
   11cdc:	ldr	r2, [pc, #92]	; 11d40 <mmk_init@@Base+0xd0>
   11ce0:	add	r2, pc, r2
   11ce4:	ldr	r1, [pc, #88]	; 11d44 <mmk_init@@Base+0xd4>
   11ce8:	add	r1, pc, r1
   11cec:	bl	11288 <fprintf@plt>
   11cf0:	bl	112e8 <abort@plt>
   11cf4:	ldr	r3, [pc, #76]	; 11d48 <mmk_init@@Base+0xd8>
   11cf8:	add	r3, pc, r3
   11cfc:	ldr	r3, [r3, #4]
   11d00:	mov	r0, r3
   11d04:	bl	135c4 <mmk_init_vital_functions@@Base>
   11d08:	ldr	r3, [pc, #60]	; 11d4c <mmk_init@@Base+0xdc>
   11d0c:	add	r3, pc, r3
   11d10:	mov	r2, #1
   11d14:	str	r2, [r3]
   11d18:	b	11d20 <mmk_init@@Base+0xb0>
   11d1c:	nop			; (mov r0, r0)
   11d20:	sub	sp, fp, #8
   11d24:	pop	{r4, fp, pc}
   11d28:	andeq	r3, r1, r8, ror r3
   11d2c:	andeq	r3, r1, r8, lsr #8
   11d30:	andeq	r3, r1, ip, lsl #8
   11d34:	andeq	r3, r1, r0, lsl #8
   11d38:	andeq	r0, r0, r0, ror r0
   11d3c:	andeq	r1, r0, r4, ror pc
   11d40:	strdeq	r1, [r0], -r4
   11d44:	andeq	r1, r0, ip, lsr pc
   11d48:			; <UNDEFINED> instruction: 0x000133b8
   11d4c:	andeq	r3, r1, r4, lsr #7

00011d50 <mmk_plt_ctx@@Base>:
   11d50:	push	{fp, lr}
   11d54:	add	fp, sp, #4
   11d58:	sub	sp, sp, #8
   11d5c:	ldr	r2, [pc, #96]	; 11dc4 <mmk_plt_ctx@@Base+0x74>
   11d60:	add	r2, pc, r2
   11d64:	ldr	r3, [pc, #92]	; 11dc8 <mmk_plt_ctx@@Base+0x78>
   11d68:	add	r3, pc, r3
   11d6c:	ldr	r3, [r3]
   11d70:	cmp	r3, #0
   11d74:	bne	11dac <mmk_plt_ctx@@Base+0x5c>
   11d78:	ldr	r3, [pc, #76]	; 11dcc <mmk_plt_ctx@@Base+0x7c>
   11d7c:	ldr	r3, [r2, r3]
   11d80:	ldr	r0, [r3]
   11d84:	ldr	r3, [pc, #68]	; 11dd0 <mmk_plt_ctx@@Base+0x80>
   11d88:	add	r3, pc, r3
   11d8c:	str	r3, [sp]
   11d90:	mov	r3, #54	; 0x36
   11d94:	ldr	r2, [pc, #56]	; 11dd4 <mmk_plt_ctx@@Base+0x84>
   11d98:	add	r2, pc, r2
   11d9c:	ldr	r1, [pc, #52]	; 11dd8 <mmk_plt_ctx@@Base+0x88>
   11da0:	add	r1, pc, r1
   11da4:	bl	11288 <fprintf@plt>
   11da8:	bl	112e8 <abort@plt>
   11dac:	ldr	r3, [pc, #40]	; 11ddc <mmk_plt_ctx@@Base+0x8c>
   11db0:	add	r3, pc, r3
   11db4:	ldr	r3, [r3, #4]
   11db8:	mov	r0, r3
   11dbc:	sub	sp, fp, #4
   11dc0:	pop	{fp, pc}
   11dc4:	muleq	r1, r8, r2
   11dc8:	andeq	r3, r1, r8, asr #6
   11dcc:	andeq	r0, r0, r0, ror r0
   11dd0:	ldrdeq	r1, [r0], -r4
   11dd4:	andeq	r1, r0, ip, lsr lr
   11dd8:	andeq	r1, r0, r4, lsl #29
   11ddc:	andeq	r3, r1, r0, lsl #6

00011de0 <mmk_reset@@Base>:
   11de0:	push	{fp, lr}
   11de4:	add	fp, sp, #4
   11de8:	sub	sp, sp, #16
   11dec:	str	r0, [fp, #-16]
   11df0:	ldr	r3, [fp, #-16]
   11df4:	cmp	r3, #0
   11df8:	beq	11e20 <mmk_reset@@Base+0x40>
   11dfc:	ldr	r0, [fp, #-16]
   11e00:	bl	12c78 <mmk_ask_ctx@@Base>
   11e04:	str	r0, [fp, #-8]
   11e08:	ldr	r0, [fp, #-8]
   11e0c:	bl	12900 <mmk_stub_context@@Base>
   11e10:	str	r0, [fp, #-12]
   11e14:	ldr	r0, [fp, #-12]
   11e18:	bl	1213c <mmk_mock_destroy_internal@@Base>
   11e1c:	b	11e24 <mmk_reset@@Base+0x44>
   11e20:	nop			; (mov r0, r0)
   11e24:	sub	sp, fp, #4
   11e28:	pop	{fp, pc}

00011e2c <mmk_matcher_init@@Base>:
   11e2c:	push	{r4, r5, r6, lr}
   11e30:	mov	r5, r0
   11e34:	mov	r0, #12
   11e38:	bl	13564 <mmk_malloc@@Base>
   11e3c:	mov	r3, #0
   11e40:	mov	r4, r0
   11e44:	ldr	r0, [pc, #28]	; 11e68 <mmk_matcher_init@@Base+0x3c>
   11e48:	str	r3, [r4, #4]
   11e4c:	str	r3, [r4, #8]
   11e50:	str	r5, [r4]
   11e54:	add	r0, pc, r0
   11e58:	bl	112d0 <__tls_get_addr@plt>
   11e5c:	ldr	r3, [pc, #8]	; 11e6c <mmk_matcher_init@@Base+0x40>
   11e60:	str	r4, [r3, r0]
   11e64:	pop	{r4, r5, r6, pc}
   11e68:	andeq	r3, r1, r8, lsl #4
   11e6c:	andeq	r0, r0, r0

00011e70 <mmk_matcher_term@@Base>:
   11e70:	ldr	r0, [pc, #24]	; 11e90 <mmk_matcher_term@@Base+0x20>
   11e74:	push	{r4, lr}
   11e78:	add	r0, pc, r0
   11e7c:	bl	112d0 <__tls_get_addr@plt>
   11e80:	ldr	r3, [pc, #12]	; 11e94 <mmk_matcher_term@@Base+0x24>
   11e84:	mov	r2, #0
   11e88:	str	r2, [r0, r3]
   11e8c:	pop	{r4, pc}
   11e90:	andeq	r3, r1, r4, ror #3
   11e94:	andeq	r0, r0, r0

00011e98 <mmk_matcher_ctx@@Base>:
   11e98:	ldr	r0, [pc, #20]	; 11eb4 <mmk_matcher_ctx@@Base+0x1c>
   11e9c:	push	{r4, lr}
   11ea0:	add	r0, pc, r0
   11ea4:	bl	112d0 <__tls_get_addr@plt>
   11ea8:	ldr	r3, [pc, #8]	; 11eb8 <mmk_matcher_ctx@@Base+0x20>
   11eac:	ldr	r0, [r3, r0]
   11eb0:	pop	{r4, pc}
   11eb4:			; <UNDEFINED> instruction: 0x000131bc
   11eb8:	andeq	r0, r0, r0

00011ebc <mmk_matcher_add@@Base>:
   11ebc:	push	{r4, r5, r6, lr}
   11ec0:	mov	r6, r0
   11ec4:	mov	r0, #12
   11ec8:	mov	r5, r1
   11ecc:	bl	13564 <mmk_malloc@@Base>
   11ed0:	mov	r4, r0
   11ed4:	ldr	r0, [pc, #84]	; 11f30 <mmk_matcher_add@@Base+0x74>
   11ed8:	add	r0, pc, r0
   11edc:	bl	112d0 <__tls_get_addr@plt>
   11ee0:	ldr	r3, [pc, #76]	; 11f34 <mmk_matcher_add@@Base+0x78>
   11ee4:	mov	r2, #0
   11ee8:	str	r2, [r4, #8]
   11eec:	str	r6, [r4]
   11ef0:	str	r5, [r4, #4]
   11ef4:	ldr	r2, [r3, r0]
   11ef8:	ldr	r3, [r2, #8]
   11efc:	cmp	r3, #0
   11f00:	beq	11f10 <mmk_matcher_add@@Base+0x54>
   11f04:	ldr	r1, [r3, #4]
   11f08:	cmp	r5, r1
   11f0c:	bhi	11f1c <mmk_matcher_add@@Base+0x60>
   11f10:	str	r3, [r4, #8]
   11f14:	str	r4, [r2, #8]
   11f18:	pop	{r4, r5, r6, pc}
   11f1c:	mov	r2, r3
   11f20:	ldr	r3, [r3, #8]
   11f24:	cmp	r3, #0
   11f28:	bne	11f04 <mmk_matcher_add@@Base+0x48>
   11f2c:	b	11f10 <mmk_matcher_add@@Base+0x54>
   11f30:	andeq	r3, r1, r4, lsl #3
   11f34:	andeq	r0, r0, r0

00011f38 <mmk_matcher_get_predicate@@Base>:
   11f38:	add	r0, r0, #12
   11f3c:	bx	lr

00011f40 <mmk_mock_create_internal@@Base>:
   11f40:	push	{r4, fp, lr}
   11f44:	add	fp, sp, #8
   11f48:	sub	sp, sp, #44	; 0x2c
   11f4c:	str	r0, [fp, #-40]	; 0xffffffd8
   11f50:	str	r1, [fp, #-44]	; 0xffffffd4
   11f54:	ldr	r4, [pc, #452]	; 12120 <mmk_mock_create_internal@@Base+0x1e0>
   11f58:	add	r4, pc, r4
   11f5c:	bl	11c70 <mmk_init@@Base>
   11f60:	mov	r0, #20
   11f64:	bl	13564 <mmk_malloc@@Base>
   11f68:	str	r0, [fp, #-20]	; 0xffffffec
   11f6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f70:	cmp	r3, #0
   11f74:	bne	11fac <mmk_mock_create_internal@@Base+0x6c>
   11f78:	ldr	r3, [pc, #420]	; 12124 <mmk_mock_create_internal@@Base+0x1e4>
   11f7c:	ldr	r3, [r4, r3]
   11f80:	ldr	r0, [r3]
   11f84:	ldr	r3, [pc, #412]	; 12128 <mmk_mock_create_internal@@Base+0x1e8>
   11f88:	add	r3, pc, r3
   11f8c:	str	r3, [sp]
   11f90:	mov	r3, #36	; 0x24
   11f94:	ldr	r2, [pc, #400]	; 1212c <mmk_mock_create_internal@@Base+0x1ec>
   11f98:	add	r2, pc, r2
   11f9c:	ldr	r1, [pc, #396]	; 12130 <mmk_mock_create_internal@@Base+0x1f0>
   11fa0:	add	r1, pc, r1
   11fa4:	bl	11288 <fprintf@plt>
   11fa8:	bl	112e8 <abort@plt>
   11fac:	ldr	r3, [fp, #-20]	; 0xffffffec
   11fb0:	mov	r2, r3
   11fb4:	mov	r3, #0
   11fb8:	str	r3, [r2]
   11fbc:	str	r3, [r2, #4]
   11fc0:	str	r3, [r2, #8]
   11fc4:	str	r3, [r2, #12]
   11fc8:	str	r3, [r2, #16]
   11fcc:	mov	r1, #64	; 0x40
   11fd0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11fd4:	bl	13464 <mmk_strchr@@Base>
   11fd8:	str	r0, [fp, #-24]	; 0xffffffe8
   11fdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11fe0:	cmp	r3, #0
   11fe4:	bne	11ff8 <mmk_mock_create_internal@@Base+0xb8>
   11fe8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11fec:	bl	13510 <mmk_strlen@@Base>
   11ff0:	str	r0, [fp, #-16]
   11ff4:	b	12008 <mmk_mock_create_internal@@Base+0xc8>
   11ff8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11ffc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12000:	sub	r3, r2, r3
   12004:	str	r3, [fp, #-16]
   12008:	ldr	r3, [fp, #-16]
   1200c:	add	r3, r3, #1
   12010:	mov	r0, r3
   12014:	bl	13564 <mmk_malloc@@Base>
   12018:	str	r0, [fp, #-28]	; 0xffffffe4
   1201c:	ldr	r2, [fp, #-16]
   12020:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12024:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12028:	bl	134cc <mmk_strncpy@@Base>
   1202c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12030:	ldr	r3, [fp, #-16]
   12034:	add	r3, r2, r3
   12038:	mov	r2, #0
   1203c:	strb	r2, [r3]
   12040:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12044:	cmp	r3, #0
   12048:	beq	12074 <mmk_mock_create_internal@@Base+0x134>
   1204c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12050:	add	r3, r3, #1
   12054:	mov	r2, #4
   12058:	ldr	r1, [pc, #212]	; 12134 <mmk_mock_create_internal@@Base+0x1f4>
   1205c:	add	r1, pc, r1
   12060:	mov	r0, r3
   12064:	bl	133b0 <mmk_strneq@@Base>
   12068:	mov	r3, r0
   1206c:	cmp	r3, #0
   12070:	beq	1207c <mmk_mock_create_internal@@Base+0x13c>
   12074:	mov	r3, #1
   12078:	b	12080 <mmk_mock_create_internal@@Base+0x140>
   1207c:	mov	r3, #0
   12080:	str	r3, [fp, #-32]	; 0xffffffe0
   12084:	ldr	r2, [fp, #-20]	; 0xffffffec
   12088:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1208c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12090:	bl	12b68 <mmk_stub_create@@Base>
   12094:	mov	r2, r0
   12098:	ldr	r3, [fp, #-20]	; 0xffffffec
   1209c:	str	r2, [r3, #4]
   120a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   120a4:	ldr	r3, [r3, #4]
   120a8:	cmp	r3, #0
   120ac:	bne	120d4 <mmk_mock_create_internal@@Base+0x194>
   120b0:	ldr	r3, [pc, #108]	; 12124 <mmk_mock_create_internal@@Base+0x1e4>
   120b4:	ldr	r3, [r4, r3]
   120b8:	ldr	r3, [r3]
   120bc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   120c0:	ldr	r1, [pc, #112]	; 12138 <mmk_mock_create_internal@@Base+0x1f8>
   120c4:	add	r1, pc, r1
   120c8:	mov	r0, r3
   120cc:	bl	11288 <fprintf@plt>
   120d0:	bl	112e8 <abort@plt>
   120d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   120d8:	cmp	r3, #0
   120dc:	bne	12100 <mmk_mock_create_internal@@Base+0x1c0>
   120e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   120e4:	ldr	r4, [r3, #4]
   120e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   120ec:	ldr	r1, [fp, #-44]	; 0xffffffd4
   120f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   120f4:	bl	12b68 <mmk_stub_create@@Base>
   120f8:	mov	r3, r0
   120fc:	str	r3, [r4, #36]	; 0x24
   12100:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12104:	bl	135a4 <mmk_free@@Base>
   12108:	ldr	r3, [fp, #-20]	; 0xffffffec
   1210c:	ldr	r3, [r3, #4]
   12110:	ldr	r3, [r3, #32]
   12114:	mov	r0, r3
   12118:	sub	sp, fp, #8
   1211c:	pop	{r4, fp, pc}
   12120:	andeq	r3, r1, r0, lsr #1
   12124:	andeq	r0, r0, r0, ror r0
   12128:	andeq	r1, r0, r8, asr sp
   1212c:	ldrdeq	r1, [r0], -r8
   12130:	andeq	r1, r0, r0, lsr #26
   12134:	andeq	r1, r0, r8, lsl #25
   12138:	andeq	r1, r0, r8, lsr #24

0001213c <mmk_mock_destroy_internal@@Base>:
   1213c:	push	{fp, lr}
   12140:	add	fp, sp, #4
   12144:	sub	sp, sp, #32
   12148:	str	r0, [fp, #-32]	; 0xffffffe0
   1214c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12150:	ldr	r3, [r3, #4]
   12154:	str	r3, [fp, #-8]
   12158:	b	12178 <mmk_mock_destroy_internal@@Base+0x3c>
   1215c:	ldr	r3, [fp, #-8]
   12160:	ldr	r3, [r3, #36]	; 0x24
   12164:	str	r3, [fp, #-20]	; 0xffffffec
   12168:	ldr	r0, [fp, #-8]
   1216c:	bl	12c4c <mmk_stub_destroy@@Base>
   12170:	ldr	r3, [fp, #-20]	; 0xffffffec
   12174:	str	r3, [fp, #-8]
   12178:	ldr	r3, [fp, #-8]
   1217c:	cmp	r3, #0
   12180:	bne	1215c <mmk_mock_destroy_internal@@Base+0x20>
   12184:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12188:	ldr	r3, [r3, #8]
   1218c:	mov	r0, r3
   12190:	bl	135a4 <mmk_free@@Base>
   12194:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12198:	ldr	r3, [r3]
   1219c:	str	r3, [fp, #-12]
   121a0:	b	121f8 <mmk_mock_destroy_internal@@Base+0xbc>
   121a4:	ldr	r3, [fp, #-12]
   121a8:	ldr	r3, [r3, #4]
   121ac:	str	r3, [fp, #-24]	; 0xffffffe8
   121b0:	ldr	r3, [fp, #-12]
   121b4:	ldr	r3, [r3]
   121b8:	str	r3, [fp, #-16]
   121bc:	b	121dc <mmk_mock_destroy_internal@@Base+0xa0>
   121c0:	ldr	r3, [fp, #-16]
   121c4:	ldr	r3, [r3, #8]
   121c8:	str	r3, [fp, #-28]	; 0xffffffe4
   121cc:	ldr	r0, [fp, #-16]
   121d0:	bl	135a4 <mmk_free@@Base>
   121d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   121d8:	str	r3, [fp, #-16]
   121dc:	ldr	r3, [fp, #-16]
   121e0:	cmp	r3, #0
   121e4:	bne	121c0 <mmk_mock_destroy_internal@@Base+0x84>
   121e8:	ldr	r0, [fp, #-12]
   121ec:	bl	135a4 <mmk_free@@Base>
   121f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   121f4:	str	r3, [fp, #-12]
   121f8:	ldr	r3, [fp, #-12]
   121fc:	cmp	r3, #0
   12200:	bne	121a4 <mmk_mock_destroy_internal@@Base+0x68>
   12204:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12208:	bl	135a4 <mmk_free@@Base>
   1220c:	nop			; (mov r0, r0)
   12210:	sub	sp, fp, #4
   12214:	pop	{fp, pc}

00012218 <mmk_mock_params_begin@@Base>:
   12218:	push	{fp}		; (str fp, [sp, #-4]!)
   1221c:	add	fp, sp, #0
   12220:	sub	sp, sp, #12
   12224:	str	r0, [fp, #-8]
   12228:	ldr	r3, [fp, #-8]
   1222c:	ldr	r3, [r3, #8]
   12230:	cmp	r3, #0
   12234:	beq	12248 <mmk_mock_params_begin@@Base+0x30>
   12238:	ldr	r3, [fp, #-8]
   1223c:	ldr	r3, [r3, #12]
   12240:	cmp	r3, #0
   12244:	bne	12250 <mmk_mock_params_begin@@Base+0x38>
   12248:	mov	r3, #0
   1224c:	b	1225c <mmk_mock_params_begin@@Base+0x44>
   12250:	ldr	r3, [fp, #-8]
   12254:	ldr	r3, [r3, #8]
   12258:	add	r3, r3, #4
   1225c:	mov	r0, r3
   12260:	add	sp, fp, #0
   12264:	pop	{fp}		; (ldr fp, [sp], #4)
   12268:	bx	lr

0001226c <mmk_mock_params_next@@Base>:
   1226c:	push	{fp}		; (str fp, [sp, #-4]!)
   12270:	add	fp, sp, #0
   12274:	sub	sp, sp, #20
   12278:	str	r0, [fp, #-16]
   1227c:	str	r1, [fp, #-20]	; 0xffffffec
   12280:	ldr	r3, [fp, #-20]	; 0xffffffec
   12284:	str	r3, [fp, #-8]
   12288:	ldr	r3, [fp, #-8]
   1228c:	ldr	r3, [r3, #-4]
   12290:	str	r3, [fp, #-12]
   12294:	ldr	r3, [fp, #-12]
   12298:	add	r3, r3, #4
   1229c:	ldr	r2, [fp, #-8]
   122a0:	add	r3, r2, r3
   122a4:	str	r3, [fp, #-8]
   122a8:	ldr	r3, [fp, #-16]
   122ac:	ldr	r2, [r3, #8]
   122b0:	ldr	r3, [fp, #-16]
   122b4:	ldr	r3, [r3, #12]
   122b8:	add	r2, r2, r3
   122bc:	ldr	r3, [fp, #-8]
   122c0:	cmp	r2, r3
   122c4:	bhi	122d0 <mmk_mock_params_next@@Base+0x64>
   122c8:	mov	r3, #0
   122cc:	b	122d4 <mmk_mock_params_next@@Base+0x68>
   122d0:	ldr	r3, [fp, #-8]
   122d4:	mov	r0, r3
   122d8:	add	sp, fp, #0
   122dc:	pop	{fp}		; (ldr fp, [sp], #4)
   122e0:	bx	lr

000122e4 <mmk_mock_get_params@@Base>:
   122e4:	push	{fp, lr}
   122e8:	add	fp, sp, #4
   122ec:	sub	sp, sp, #8
   122f0:	bl	12d30 <mmk_ctx@@Base>
   122f4:	mov	r3, r0
   122f8:	mov	r0, r3
   122fc:	bl	12900 <mmk_stub_context@@Base>
   12300:	str	r0, [fp, #-8]
   12304:	ldr	r3, [fp, #-8]
   12308:	ldr	r3, [r3]
   1230c:	mov	r0, r3
   12310:	sub	sp, fp, #4
   12314:	pop	{fp, pc}
   12318:	ldr	ip, [r0, #8]
   1231c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12320:	ldr	lr, [ip]
   12324:	ldr	r7, [r0]
   12328:	cmp	lr, #0
   1232c:	beq	12498 <mmk_mock_get_params@@Base+0x1b4>
   12330:	cmp	lr, #6
   12334:	mov	r3, ip
   12338:	bne	12348 <mmk_mock_get_params@@Base+0x64>
   1233c:	b	124e8 <mmk_mock_get_params@@Base+0x204>
   12340:	cmp	r5, #6
   12344:	beq	124e8 <mmk_mock_get_params@@Base+0x204>
   12348:	ldr	r5, [r3, #8]!
   1234c:	cmp	r5, #0
   12350:	bne	12340 <mmk_mock_get_params@@Base+0x5c>
   12354:	mov	r9, #1
   12358:	cmp	lr, #5
   1235c:	mov	r3, ip
   12360:	bne	12370 <mmk_mock_get_params@@Base+0x8c>
   12364:	b	124d0 <mmk_mock_get_params@@Base+0x1ec>
   12368:	cmp	r6, #5
   1236c:	beq	124d0 <mmk_mock_get_params@@Base+0x1ec>
   12370:	ldr	r6, [r3, #8]!
   12374:	cmp	r6, #0
   12378:	bne	12368 <mmk_mock_get_params@@Base+0x84>
   1237c:	mov	r9, #1
   12380:	cmp	lr, #20
   12384:	mov	r2, ip
   12388:	bne	12398 <mmk_mock_get_params@@Base+0xb4>
   1238c:	b	124c4 <mmk_mock_get_params@@Base+0x1e0>
   12390:	cmp	r3, #20
   12394:	beq	124c4 <mmk_mock_get_params@@Base+0x1e0>
   12398:	ldr	r3, [r2, #8]!
   1239c:	cmp	r3, #0
   123a0:	bne	12390 <mmk_mock_get_params@@Base+0xac>
   123a4:	mov	r2, r3
   123a8:	mov	r8, #2
   123ac:	cmp	lr, #23
   123b0:	mov	r0, ip
   123b4:	bne	123c4 <mmk_mock_get_params@@Base+0xe0>
   123b8:	b	124b0 <mmk_mock_get_params@@Base+0x1cc>
   123bc:	cmp	r3, #23
   123c0:	beq	124b0 <mmk_mock_get_params@@Base+0x1cc>
   123c4:	ldr	r3, [r0, #8]!
   123c8:	cmp	r3, #0
   123cc:	bne	123bc <mmk_mock_get_params@@Base+0xd8>
   123d0:	mov	r4, r3
   123d4:	cmp	lr, #2
   123d8:	mov	r3, ip
   123dc:	bne	123ec <mmk_mock_get_params@@Base+0x108>
   123e0:	b	124a8 <mmk_mock_get_params@@Base+0x1c4>
   123e4:	cmp	r0, #2
   123e8:	beq	124a8 <mmk_mock_get_params@@Base+0x1c4>
   123ec:	ldr	r0, [r3, #8]!
   123f0:	cmp	r0, #0
   123f4:	bne	123e4 <mmk_mock_get_params@@Base+0x100>
   123f8:	cmp	lr, r8
   123fc:	bne	1240c <mmk_mock_get_params@@Base+0x128>
   12400:	b	124a0 <mmk_mock_get_params@@Base+0x1bc>
   12404:	cmp	r3, r8
   12408:	beq	124a0 <mmk_mock_get_params@@Base+0x1bc>
   1240c:	ldr	r3, [ip, #8]!
   12410:	cmp	r3, #0
   12414:	bne	12404 <mmk_mock_get_params@@Base+0x120>
   12418:	mov	r8, r3
   1241c:	cmp	r9, #0
   12420:	bne	12498 <mmk_mock_get_params@@Base+0x1b4>
   12424:	cmp	r4, #0
   12428:	cmpne	r2, #0
   1242c:	beq	12498 <mmk_mock_get_params@@Base+0x1b4>
   12430:	cmp	r8, #0
   12434:	cmpne	r0, #0
   12438:	beq	12498 <mmk_mock_get_params@@Base+0x1b4>
   1243c:	mov	sl, r1
   12440:	mov	r1, r8
   12444:	bl	1386c <mmk_trampoline_end@@Base+0x4>
   12448:	subs	fp, r0, #0
   1244c:	bne	12460 <mmk_mock_get_params@@Base+0x17c>
   12450:	b	12498 <mmk_mock_get_params@@Base+0x1b4>
   12454:	cmp	r9, fp
   12458:	add	r4, r4, r8
   1245c:	beq	12498 <mmk_mock_get_params@@Base+0x1b4>
   12460:	ldr	r2, [r4, #4]
   12464:	mov	r1, sl
   12468:	add	r9, r9, #1
   1246c:	lsr	r2, r2, #8
   12470:	ldr	r0, [r5, r2, lsl #4]
   12474:	add	r0, r6, r0
   12478:	bl	11204 <strcmp@plt>
   1247c:	cmp	r0, #0
   12480:	bne	12454 <mmk_mock_get_params@@Base+0x170>
   12484:	ldr	r9, [r4]
   12488:	cmp	r9, #0
   1248c:	beq	12498 <mmk_mock_get_params@@Base+0x1b4>
   12490:	add	r0, r7, r9
   12494:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12498:	mov	r0, #0
   1249c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124a0:	ldr	r8, [ip, #4]
   124a4:	b	1241c <mmk_mock_get_params@@Base+0x138>
   124a8:	ldr	r0, [r3, #4]
   124ac:	b	123f8 <mmk_mock_get_params@@Base+0x114>
   124b0:	ldr	r3, [r0, #4]
   124b4:	cmp	r7, r3
   124b8:	addhi	r4, r7, r3
   124bc:	bhi	123d4 <mmk_mock_get_params@@Base+0xf0>
   124c0:	b	123d0 <mmk_mock_get_params@@Base+0xec>
   124c4:	ldr	r2, [r2, #4]
   124c8:	add	r8, r2, #2
   124cc:	b	123ac <mmk_mock_get_params@@Base+0xc8>
   124d0:	ldr	r6, [r3, #4]
   124d4:	cmp	r7, r6
   124d8:	bhi	12500 <mmk_mock_get_params@@Base+0x21c>
   124dc:	cmp	r6, #0
   124e0:	orreq	r9, r9, #1
   124e4:	b	12380 <mmk_mock_get_params@@Base+0x9c>
   124e8:	ldr	r5, [r3, #4]
   124ec:	cmp	r7, r5
   124f0:	bhi	1250c <mmk_mock_get_params@@Base+0x228>
   124f4:	clz	r9, r5
   124f8:	lsr	r9, r9, #5
   124fc:	b	12358 <mmk_mock_get_params@@Base+0x74>
   12500:	adds	r6, r7, r6
   12504:	orreq	r9, r9, #1
   12508:	b	12380 <mmk_mock_get_params@@Base+0x9c>
   1250c:	adds	r5, r7, r5
   12510:	moveq	r9, #1
   12514:	movne	r9, #0
   12518:	b	12358 <mmk_mock_get_params@@Base+0x74>

0001251c <plt_init_ctx@@Base>:
   1251c:	ldr	r3, [pc, #40]	; 1254c <plt_init_ctx@@Base+0x30>
   12520:	ldr	r2, [pc, #40]	; 12550 <plt_init_ctx@@Base+0x34>
   12524:	add	r3, pc, r3
   12528:	add	r2, pc, r2
   1252c:	ldr	r0, [r3]
   12530:	cmn	r0, #1
   12534:	bxne	lr
   12538:	ldr	r1, [pc, #20]	; 12554 <plt_init_ctx@@Base+0x38>
   1253c:	ldr	r2, [r2, r1]
   12540:	mov	r0, r2
   12544:	str	r2, [r3]
   12548:	bx	lr
   1254c:	andeq	r2, r1, r0, lsl #23
   12550:	ldrdeq	r2, [r1], -r0
   12554:	muleq	r0, r4, r0

00012558 <plt_get_lib@@Base>:
   12558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1255c:	subs	r6, r1, #0
   12560:	ldr	r4, [pc, #632]	; 127e0 <plt_get_lib@@Base+0x288>
   12564:	add	fp, sp, #32
   12568:	mov	r8, r0
   1256c:	sub	sp, sp, #20
   12570:	add	r4, pc, r4
   12574:	beq	12784 <plt_get_lib@@Base+0x22c>
   12578:	ldr	r1, [pc, #612]	; 127e4 <plt_get_lib@@Base+0x28c>
   1257c:	mov	r2, #4
   12580:	add	r1, pc, r1
   12584:	mov	r0, r6
   12588:	bl	112dc <strncmp@plt>
   1258c:	cmp	r0, #0
   12590:	moveq	r5, #1
   12594:	bne	126f0 <plt_get_lib@@Base+0x198>
   12598:	mov	r1, #58	; 0x3a
   1259c:	mov	r0, r6
   125a0:	bl	1127c <strchr@plt>
   125a4:	add	r9, r0, #1
   125a8:	mov	r0, r9
   125ac:	bl	11264 <strlen@plt>
   125b0:	ldr	r1, [pc, #560]	; 127e8 <plt_get_lib@@Base+0x290>
   125b4:	add	r1, pc, r1
   125b8:	str	r0, [fp, #-44]	; 0xffffffd4
   125bc:	mov	r0, r9
   125c0:	bl	11204 <strcmp@plt>
   125c4:	mov	r7, r0
   125c8:	ldr	r4, [r8, #4]
   125cc:	cmp	r4, #0
   125d0:	beq	126a0 <plt_get_lib@@Base+0x148>
   125d4:	ldr	r2, [pc, #528]	; 127ec <plt_get_lib@@Base+0x294>
   125d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   125dc:	add	r2, pc, r2
   125e0:	str	r2, [fp, #-52]	; 0xffffffcc
   125e4:	ldr	r2, [pc, #516]	; 127f0 <plt_get_lib@@Base+0x298>
   125e8:	add	r3, r3, #15
   125ec:	ldr	r8, [pc, #512]	; 127f4 <plt_get_lib@@Base+0x29c>
   125f0:	add	r2, pc, r2
   125f4:	bic	r3, r3, #7
   125f8:	add	r8, pc, r8
   125fc:	str	r2, [fp, #-40]	; 0xffffffd8
   12600:	str	r3, [fp, #-48]	; 0xffffffd0
   12604:	b	12628 <plt_get_lib@@Base+0xd0>
   12608:	ldr	r1, [r4, #4]
   1260c:	mov	r0, r6
   12610:	bl	11204 <strcmp@plt>
   12614:	cmp	r0, #0
   12618:	beq	12654 <plt_get_lib@@Base+0xfc>
   1261c:	ldr	r4, [r4, #12]
   12620:	cmp	r4, #0
   12624:	beq	126a0 <plt_get_lib@@Base+0x148>
   12628:	cmp	r5, #1
   1262c:	beq	12660 <plt_get_lib@@Base+0x108>
   12630:	tst	r5, #1
   12634:	beq	12608 <plt_get_lib@@Base+0xb0>
   12638:	cmp	r5, #3
   1263c:	bne	1261c <plt_get_lib@@Base+0xc4>
   12640:	mov	r1, r9
   12644:	mov	r0, r4
   12648:	bl	12318 <mmk_mock_get_params@@Base+0x34>
   1264c:	cmp	r0, #0
   12650:	beq	1261c <plt_get_lib@@Base+0xc4>
   12654:	mov	r0, r4
   12658:	sub	sp, fp, #32
   1265c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12660:	cmp	r7, #0
   12664:	bne	126b0 <plt_get_lib@@Base+0x158>
   12668:	ldr	sl, [r4, #4]
   1266c:	mov	r1, r8
   12670:	mov	r0, sl
   12674:	bl	111ec <strstr@plt>
   12678:	cmp	r0, #0
   1267c:	bne	12654 <plt_get_lib@@Base+0xfc>
   12680:	mov	r0, sl
   12684:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12688:	bl	111ec <strstr@plt>
   1268c:	cmp	r0, #0
   12690:	bne	12654 <plt_get_lib@@Base+0xfc>
   12694:	ldr	r4, [r4, #12]
   12698:	cmp	r4, #0
   1269c:	bne	12628 <plt_get_lib@@Base+0xd0>
   126a0:	mov	r4, #0
   126a4:	mov	r0, r4
   126a8:	sub	sp, fp, #32
   126ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   126b4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   126b8:	mov	sl, sp
   126bc:	sub	sp, sp, r3
   126c0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   126c4:	mov	r3, r9
   126c8:	add	r1, r1, #8
   126cc:	mov	r0, sp
   126d0:	bl	112a0 <snprintf@plt>
   126d4:	ldr	r0, [r4, #4]
   126d8:	mov	r1, sp
   126dc:	bl	111ec <strstr@plt>
   126e0:	cmp	r0, #0
   126e4:	bne	127a0 <plt_get_lib@@Base+0x248>
   126e8:	mov	sp, sl
   126ec:	b	1261c <plt_get_lib@@Base+0xc4>
   126f0:	ldr	r1, [pc, #256]	; 127f8 <plt_get_lib@@Base+0x2a0>
   126f4:	mov	r2, #5
   126f8:	add	r1, pc, r1
   126fc:	mov	r0, r6
   12700:	bl	112dc <strncmp@plt>
   12704:	cmp	r0, #0
   12708:	moveq	r5, #2
   1270c:	beq	12598 <plt_get_lib@@Base+0x40>
   12710:	ldr	r1, [pc, #228]	; 127fc <plt_get_lib@@Base+0x2a4>
   12714:	mov	r2, #4
   12718:	add	r1, pc, r1
   1271c:	mov	r0, r6
   12720:	bl	112dc <strncmp@plt>
   12724:	cmp	r0, #0
   12728:	moveq	r5, #3
   1272c:	beq	12598 <plt_get_lib@@Base+0x40>
   12730:	ldr	r1, [pc, #200]	; 12800 <plt_get_lib@@Base+0x2a8>
   12734:	mov	r0, r6
   12738:	add	r1, pc, r1
   1273c:	bl	11204 <strcmp@plt>
   12740:	cmp	r0, #0
   12744:	beq	127a8 <plt_get_lib@@Base+0x250>
   12748:	mov	r1, #58	; 0x3a
   1274c:	mov	r0, r6
   12750:	bl	1127c <strchr@plt>
   12754:	ldr	r3, [pc, #168]	; 12804 <plt_get_lib@@Base+0x2ac>
   12758:	subs	r2, r0, #0
   1275c:	beq	127c4 <plt_get_lib@@Base+0x26c>
   12760:	ldr	r0, [r4, r3]
   12764:	ldr	r1, [pc, #156]	; 12808 <plt_get_lib@@Base+0x2b0>
   12768:	sub	r2, r2, r6
   1276c:	add	r2, r2, #1
   12770:	mov	r3, r6
   12774:	add	r1, pc, r1
   12778:	ldr	r0, [r0]
   1277c:	bl	11288 <fprintf@plt>
   12780:	bl	112e8 <abort@plt>
   12784:	mov	r5, r6
   12788:	str	r6, [fp, #-44]	; 0xffffffd4
   1278c:	ldr	r6, [pc, #120]	; 1280c <plt_get_lib@@Base+0x2b4>
   12790:	mvn	r7, #0
   12794:	add	r6, pc, r6
   12798:	mov	r9, r6
   1279c:	b	125c8 <plt_get_lib@@Base+0x70>
   127a0:	mov	sp, sl
   127a4:	b	12654 <plt_get_lib@@Base+0xfc>
   127a8:	ldr	r6, [pc, #96]	; 12810 <plt_get_lib@@Base+0x2b8>
   127ac:	str	r0, [fp, #-44]	; 0xffffffd4
   127b0:	add	r6, pc, r6
   127b4:	mov	r5, r0
   127b8:	mov	r9, r6
   127bc:	mvn	r7, #0
   127c0:	b	125c8 <plt_get_lib@@Base+0x70>
   127c4:	ldr	r3, [r4, r3]
   127c8:	ldr	r1, [pc, #68]	; 12814 <plt_get_lib@@Base+0x2bc>
   127cc:	mov	r2, r6
   127d0:	add	r1, pc, r1
   127d4:	ldr	r0, [r3]
   127d8:	bl	11288 <fprintf@plt>
   127dc:	b	12780 <plt_get_lib@@Base+0x228>
   127e0:	andeq	r2, r1, r8, lsl #21
   127e4:	andeq	r1, r0, r0, lsr #15
   127e8:	strdeq	r1, [r0], -r8
   127ec:	andeq	r1, r0, r4, asr #15
   127f0:	andeq	r1, r0, r4, lsr #15
   127f4:	muleq	r0, r0, r7
   127f8:	andeq	r1, r0, r0, lsr r6
   127fc:	andeq	r1, r0, r8, lsl r6
   12800:	andeq	r1, r0, r0, lsl #12
   12804:	andeq	r0, r0, r0, ror r0
   12808:	andeq	r1, r0, ip, asr #11
   1280c:	muleq	r0, r0, r6
   12810:	andeq	r1, r0, r4, ror r6
   12814:	muleq	r0, r4, r5

00012818 <plt_get_offsets@@Base>:
   12818:	push	{r4, r5, r6, lr}
   1281c:	mov	r5, r2
   12820:	bl	12318 <mmk_mock_get_params@@Base+0x34>
   12824:	subs	r4, r0, #0
   12828:	beq	1284c <plt_get_offsets@@Base+0x34>
   1282c:	mov	r0, #8
   12830:	bl	13564 <mmk_malloc@@Base>
   12834:	mov	r2, #1
   12838:	mov	r3, #0
   1283c:	str	r2, [r5]
   12840:	str	r4, [r0]
   12844:	str	r3, [r0, #4]
   12848:	pop	{r4, r5, r6, pc}
   1284c:	mov	r0, r4
   12850:	pop	{r4, r5, r6, pc}

00012854 <plt_set_offsets@@Base>:
   12854:	cmp	r1, #0
   12858:	bxeq	lr
   1285c:	add	r1, r0, r1, lsl #3
   12860:	add	r3, r0, #4
   12864:	push	{lr}		; (str lr, [sp, #-4]!)
   12868:	add	r0, r0, #8
   1286c:	ldr	ip, [r0, #-4]
   12870:	add	r3, r3, #8
   12874:	cmp	ip, #0
   12878:	ldr	ip, [r3, #-12]
   1287c:	ldreq	lr, [ip]
   12880:	streq	lr, [r0, #-4]
   12884:	cmp	r0, r1
   12888:	str	r2, [ip]
   1288c:	bne	12868 <plt_set_offsets@@Base+0x14>
   12890:	pop	{pc}		; (ldr pc, [sp], #4)

00012894 <plt_reset_offsets@@Base>:
   12894:	cmp	r1, #0
   12898:	bxeq	lr
   1289c:	add	r1, r0, r1, lsl #3
   128a0:	ldr	r2, [r0, #4]
   128a4:	ldr	r3, [r0], #8
   128a8:	cmp	r0, r1
   128ac:	str	r2, [r3]
   128b0:	bne	128a0 <plt_reset_offsets@@Base+0xc>
   128b4:	bx	lr

000128b8 <plt_get_real_fn@@Base>:
   128b8:	push	{r4, r5, r6, lr}
   128bc:	ldr	r4, [r0, #4]
   128c0:	cmp	r4, #0
   128c4:	beq	128f8 <plt_get_real_fn@@Base+0x40>
   128c8:	mov	r5, r1
   128cc:	b	128dc <plt_get_real_fn@@Base+0x24>
   128d0:	ldr	r4, [r4, #12]
   128d4:	cmp	r4, #0
   128d8:	beq	128f8 <plt_get_real_fn@@Base+0x40>
   128dc:	mov	r1, r5
   128e0:	mov	r0, r4
   128e4:	bl	12318 <mmk_mock_get_params@@Base+0x34>
   128e8:	cmp	r0, #0
   128ec:	beq	128d0 <plt_get_real_fn@@Base+0x18>
   128f0:	ldr	r0, [r0]
   128f4:	pop	{r4, r5, r6, pc}
   128f8:	mov	r0, r4
   128fc:	pop	{r4, r5, r6, pc}

00012900 <mmk_stub_context@@Base>:
   12900:	push	{fp}		; (str fp, [sp, #-4]!)
   12904:	add	fp, sp, #0
   12908:	sub	sp, sp, #12
   1290c:	str	r0, [fp, #-8]
   12910:	ldr	r3, [fp, #-8]
   12914:	cmp	r3, #0
   12918:	bne	12924 <mmk_stub_context@@Base+0x24>
   1291c:	mov	r3, #0
   12920:	b	1292c <mmk_stub_context@@Base+0x2c>
   12924:	ldr	r3, [fp, #-8]
   12928:	ldr	r3, [r3, #12]
   1292c:	mov	r0, r3
   12930:	add	sp, fp, #0
   12934:	pop	{fp}		; (ldr fp, [sp], #4)
   12938:	bx	lr

0001293c <mmk_stub_create_static@@Base>:
   1293c:	push	{r4, r5, fp, lr}
   12940:	add	fp, sp, #12
   12944:	sub	sp, sp, #40	; 0x28
   12948:	str	r0, [fp, #-40]	; 0xffffffd8
   1294c:	str	r1, [fp, #-44]	; 0xffffffd4
   12950:	str	r2, [fp, #-48]	; 0xffffffd0
   12954:	str	r3, [fp, #-52]	; 0xffffffcc
   12958:	ldr	r4, [pc, #488]	; 12b48 <mmk_stub_create_static@@Base+0x20c>
   1295c:	add	r4, pc, r4
   12960:	ldr	r3, [pc, #484]	; 12b4c <mmk_stub_create_static@@Base+0x210>
   12964:	add	r3, pc, r3
   12968:	mov	r0, r3
   1296c:	bl	112d0 <__tls_get_addr@plt>
   12970:	mov	r1, r0
   12974:	ldr	r3, [pc, #468]	; 12b50 <mmk_stub_create_static@@Base+0x214>
   12978:	mov	r2, #0
   1297c:	str	r2, [r1, r3]
   12980:	ldr	r3, [pc, #460]	; 12b54 <mmk_stub_create_static@@Base+0x218>
   12984:	add	r3, pc, r3
   12988:	mov	r0, r3
   1298c:	bl	112d0 <__tls_get_addr@plt>
   12990:	mov	r1, r0
   12994:	ldr	r3, [pc, #444]	; 12b58 <mmk_stub_create_static@@Base+0x21c>
   12998:	mov	r2, #0
   1299c:	str	r2, [r1, r3]
   129a0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   129a4:	bl	13510 <mmk_strlen@@Base>
   129a8:	mov	r3, r0
   129ac:	add	r3, r3, #1
   129b0:	mov	r0, r3
   129b4:	bl	13564 <mmk_malloc@@Base>
   129b8:	str	r0, [fp, #-20]	; 0xffffffec
   129bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   129c0:	cmp	r3, #0
   129c4:	bne	129d0 <mmk_stub_create_static@@Base+0x94>
   129c8:	mvn	r3, #11
   129cc:	b	12b3c <mmk_stub_create_static@@Base+0x200>
   129d0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   129d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   129d8:	bl	134a4 <mmk_strcpy@@Base>
   129dc:	mov	r3, #0
   129e0:	str	r3, [fp, #-16]
   129e4:	mov	r1, #64	; 0x40
   129e8:	ldr	r0, [fp, #-20]	; 0xffffffec
   129ec:	bl	13464 <mmk_strchr@@Base>
   129f0:	str	r0, [fp, #-24]	; 0xffffffe8
   129f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129f8:	cmp	r3, #0
   129fc:	beq	12a18 <mmk_stub_create_static@@Base+0xdc>
   12a00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a04:	mov	r2, #0
   12a08:	strb	r2, [r3]
   12a0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a10:	add	r3, r3, #1
   12a14:	str	r3, [fp, #-16]
   12a18:	bl	11d50 <mmk_plt_ctx@@Base>
   12a1c:	mov	r3, r0
   12a20:	ldr	r1, [fp, #-16]
   12a24:	mov	r0, r3
   12a28:	bl	12558 <plt_get_lib@@Base>
   12a2c:	str	r0, [fp, #-28]	; 0xffffffe4
   12a30:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12a34:	cmp	r3, #0
   12a38:	bne	12a44 <mmk_stub_create_static@@Base+0x108>
   12a3c:	mvn	r3, #1
   12a40:	b	12b3c <mmk_stub_create_static@@Base+0x200>
   12a44:	mov	r3, #0
   12a48:	str	r3, [fp, #-36]	; 0xffffffdc
   12a4c:	sub	r3, fp, #36	; 0x24
   12a50:	mov	r2, r3
   12a54:	ldr	r1, [fp, #-20]	; 0xffffffec
   12a58:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12a5c:	bl	12818 <plt_get_offsets@@Base>
   12a60:	str	r0, [fp, #-32]	; 0xffffffe0
   12a64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12a68:	cmp	r3, #0
   12a6c:	beq	12a7c <mmk_stub_create_static@@Base+0x140>
   12a70:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12a74:	cmp	r3, #0
   12a78:	bne	12a84 <mmk_stub_create_static@@Base+0x148>
   12a7c:	mvn	r3, #1
   12a80:	b	12b3c <mmk_stub_create_static@@Base+0x200>
   12a84:	ldr	r5, [fp, #-36]	; 0xffffffdc
   12a88:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12a8c:	mov	r0, r3
   12a90:	mov	r3, #40	; 0x28
   12a94:	mov	r2, r3
   12a98:	mov	r1, #0
   12a9c:	bl	112ac <memset@plt>
   12aa0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12aa4:	ldr	r2, [pc, #176]	; 12b5c <mmk_stub_create_static@@Base+0x220>
   12aa8:	ldr	r2, [r4, r2]
   12aac:	str	r2, [r3]
   12ab0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12ab4:	ldr	r2, [pc, #164]	; 12b60 <mmk_stub_create_static@@Base+0x224>
   12ab8:	ldr	r2, [r4, r2]
   12abc:	str	r2, [r3, #4]
   12ac0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12ac4:	ldr	r2, [pc, #152]	; 12b64 <mmk_stub_create_static@@Base+0x228>
   12ac8:	ldr	r2, [r4, r2]
   12acc:	str	r2, [r3, #8]
   12ad0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12ad4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12ad8:	str	r2, [r3, #12]
   12adc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12ae0:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ae4:	str	r2, [r3, #16]
   12ae8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12aec:	ldr	r2, [fp, #-16]
   12af0:	str	r2, [r3, #20]
   12af4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12af8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12afc:	str	r2, [r3, #24]
   12b00:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12b04:	str	r5, [r3, #28]
   12b08:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12b0c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12b10:	bl	12da8 <create_trampoline@@Base>
   12b14:	mov	r2, r0
   12b18:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12b1c:	str	r2, [r3, #32]
   12b20:	ldr	r1, [fp, #-36]	; 0xffffffdc
   12b24:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12b28:	ldr	r3, [r3, #32]
   12b2c:	mov	r2, r3
   12b30:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12b34:	bl	12854 <plt_set_offsets@@Base>
   12b38:	mov	r3, #0
   12b3c:	mov	r0, r3
   12b40:	sub	sp, fp, #12
   12b44:	pop	{r4, r5, fp, pc}
   12b48:	muleq	r1, ip, r6
   12b4c:	strdeq	r2, [r1], -r8
   12b50:	andeq	r0, r0, r4
   12b54:	ldrdeq	r2, [r1], -r8
   12b58:	andeq	r0, r0, r8
   12b5c:	muleq	r0, r8, r0
   12b60:	andeq	r0, r0, r8, ror r0
   12b64:	andeq	r0, r0, r8, lsl #1

00012b68 <mmk_stub_create@@Base>:
   12b68:	push	{fp, lr}
   12b6c:	add	fp, sp, #4
   12b70:	sub	sp, sp, #24
   12b74:	str	r0, [fp, #-16]
   12b78:	str	r1, [fp, #-20]	; 0xffffffec
   12b7c:	str	r2, [fp, #-24]	; 0xffffffe8
   12b80:	bl	11c70 <mmk_init@@Base>
   12b84:	mov	r0, #40	; 0x28
   12b88:	bl	13564 <mmk_malloc@@Base>
   12b8c:	str	r0, [fp, #-8]
   12b90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12b94:	ldr	r2, [fp, #-20]	; 0xffffffec
   12b98:	ldr	r1, [fp, #-16]
   12b9c:	ldr	r0, [fp, #-8]
   12ba0:	bl	1293c <mmk_stub_create_static@@Base>
   12ba4:	str	r0, [fp, #-12]
   12ba8:	ldr	r3, [fp, #-12]
   12bac:	cmp	r3, #0
   12bb0:	bge	12bd4 <mmk_stub_create@@Base+0x6c>
   12bb4:	ldr	r0, [fp, #-8]
   12bb8:	bl	135a4 <mmk_free@@Base>
   12bbc:	bl	11294 <__errno_location@plt>
   12bc0:	mov	r2, r0
   12bc4:	ldr	r3, [fp, #-12]
   12bc8:	str	r3, [r2]
   12bcc:	mov	r3, #0
   12bd0:	str	r3, [fp, #-8]
   12bd4:	ldr	r3, [fp, #-8]
   12bd8:	mov	r0, r3
   12bdc:	sub	sp, fp, #4
   12be0:	pop	{fp, pc}

00012be4 <mmk_stub_destroy_static@@Base>:
   12be4:	push	{fp, lr}
   12be8:	add	fp, sp, #4
   12bec:	sub	sp, sp, #8
   12bf0:	str	r0, [fp, #-8]
   12bf4:	ldr	r3, [fp, #-8]
   12bf8:	ldr	r2, [r3, #24]
   12bfc:	ldr	r3, [fp, #-8]
   12c00:	ldr	r3, [r3, #28]
   12c04:	mov	r1, r3
   12c08:	mov	r0, r2
   12c0c:	bl	12894 <plt_reset_offsets@@Base>
   12c10:	ldr	r3, [fp, #-8]
   12c14:	ldr	r3, [r3, #24]
   12c18:	mov	r0, r3
   12c1c:	bl	135a4 <mmk_free@@Base>
   12c20:	ldr	r3, [fp, #-8]
   12c24:	ldr	r3, [r3, #32]
   12c28:	mov	r0, r3
   12c2c:	bl	12ecc <destroy_trampoline@@Base>
   12c30:	ldr	r3, [fp, #-8]
   12c34:	ldr	r3, [r3, #16]
   12c38:	mov	r0, r3
   12c3c:	bl	135a4 <mmk_free@@Base>
   12c40:	nop			; (mov r0, r0)
   12c44:	sub	sp, fp, #4
   12c48:	pop	{fp, pc}

00012c4c <mmk_stub_destroy@@Base>:
   12c4c:	push	{fp, lr}
   12c50:	add	fp, sp, #4
   12c54:	sub	sp, sp, #8
   12c58:	str	r0, [fp, #-8]
   12c5c:	ldr	r0, [fp, #-8]
   12c60:	bl	12be4 <mmk_stub_destroy_static@@Base>
   12c64:	ldr	r0, [fp, #-8]
   12c68:	bl	135a4 <mmk_free@@Base>
   12c6c:	nop			; (mov r0, r0)
   12c70:	sub	sp, fp, #4
   12c74:	pop	{fp, pc}

00012c78 <mmk_ask_ctx@@Base>:
   12c78:	push	{fp, lr}
   12c7c:	add	fp, sp, #4
   12c80:	sub	sp, sp, #8
   12c84:	str	r0, [fp, #-8]
   12c88:	ldr	r3, [pc, #48]	; 12cc0 <mmk_ask_ctx@@Base+0x48>
   12c8c:	add	r3, pc, r3
   12c90:	mov	r0, r3
   12c94:	bl	112d0 <__tls_get_addr@plt>
   12c98:	mov	r1, r0
   12c9c:	ldr	r3, [pc, #32]	; 12cc4 <mmk_ask_ctx@@Base+0x4c>
   12ca0:	mov	r2, #1
   12ca4:	str	r2, [r1, r3]
   12ca8:	ldr	r3, [fp, #-8]
   12cac:	blx	r3
   12cb0:	mov	r3, r0
   12cb4:	mov	r0, r3
   12cb8:	sub	sp, fp, #4
   12cbc:	pop	{fp, pc}
   12cc0:	ldrdeq	r2, [r1], -r0
   12cc4:	andeq	r0, r0, r4

00012cc8 <mmk_ctx_asked@@Base>:
   12cc8:	push	{fp, lr}
   12ccc:	add	fp, sp, #4
   12cd0:	sub	sp, sp, #8
   12cd4:	ldr	r3, [pc, #72]	; 12d24 <mmk_ctx_asked@@Base+0x5c>
   12cd8:	add	r3, pc, r3
   12cdc:	mov	r0, r3
   12ce0:	bl	112d0 <__tls_get_addr@plt>
   12ce4:	mov	r2, r0
   12ce8:	ldr	r3, [pc, #56]	; 12d28 <mmk_ctx_asked@@Base+0x60>
   12cec:	ldr	r3, [r2, r3]
   12cf0:	str	r3, [fp, #-8]
   12cf4:	ldr	r3, [pc, #48]	; 12d2c <mmk_ctx_asked@@Base+0x64>
   12cf8:	add	r3, pc, r3
   12cfc:	mov	r0, r3
   12d00:	bl	112d0 <__tls_get_addr@plt>
   12d04:	mov	r1, r0
   12d08:	ldr	r3, [pc, #24]	; 12d28 <mmk_ctx_asked@@Base+0x60>
   12d0c:	mov	r2, #0
   12d10:	str	r2, [r1, r3]
   12d14:	ldr	r3, [fp, #-8]
   12d18:	mov	r0, r3
   12d1c:	sub	sp, fp, #4
   12d20:	pop	{fp, pc}
   12d24:	andeq	r2, r1, r4, lsl #7
   12d28:	andeq	r0, r0, r4
   12d2c:	andeq	r2, r1, r4, ror #6

00012d30 <mmk_ctx@@Base>:
   12d30:	push	{fp, lr}
   12d34:	add	fp, sp, #4
   12d38:	ldr	r3, [pc, #28]	; 12d5c <mmk_ctx@@Base+0x2c>
   12d3c:	add	r3, pc, r3
   12d40:	mov	r0, r3
   12d44:	bl	112d0 <__tls_get_addr@plt>
   12d48:	mov	r2, r0
   12d4c:	ldr	r3, [pc, #12]	; 12d60 <mmk_ctx@@Base+0x30>
   12d50:	ldr	r3, [r2, r3]
   12d54:	mov	r0, r3
   12d58:	pop	{fp, pc}
   12d5c:	andeq	r2, r1, r0, lsr #6
   12d60:	andeq	r0, r0, r8

00012d64 <mmk_set_ctx@@Base>:
   12d64:	push	{fp, lr}
   12d68:	add	fp, sp, #4
   12d6c:	sub	sp, sp, #8
   12d70:	str	r0, [fp, #-8]
   12d74:	ldr	r3, [pc, #36]	; 12da0 <mmk_set_ctx@@Base+0x3c>
   12d78:	add	r3, pc, r3
   12d7c:	mov	r0, r3
   12d80:	bl	112d0 <__tls_get_addr@plt>
   12d84:	mov	r1, r0
   12d88:	ldr	r2, [pc, #20]	; 12da4 <mmk_set_ctx@@Base+0x40>
   12d8c:	ldr	r3, [fp, #-8]
   12d90:	str	r3, [r1, r2]
   12d94:	nop			; (mov r0, r0)
   12d98:	sub	sp, fp, #4
   12d9c:	pop	{fp, pc}
   12da0:	andeq	r2, r1, r4, ror #5
   12da4:	andeq	r0, r0, r8

00012da8 <create_trampoline@@Base>:
   12da8:	push	{r4, r5, r6, r7, r8, r9, lr}
   12dac:	sub	sp, sp, #12
   12db0:	ldr	r6, [pc, #236]	; 12ea4 <create_trampoline@@Base+0xfc>
   12db4:	ldr	r2, [pc, #236]	; 12ea8 <create_trampoline@@Base+0x100>
   12db8:	ldr	r3, [pc, #236]	; 12eac <create_trampoline@@Base+0x104>
   12dbc:	add	r6, pc, r6
   12dc0:	ldr	r5, [r6, r2]
   12dc4:	ldr	r8, [r6, r3]
   12dc8:	sub	r5, r5, r8
   12dcc:	cmp	r5, #4096	; 0x1000
   12dd0:	bcs	12e3c <create_trampoline@@Base+0x94>
   12dd4:	mvn	r3, #0
   12dd8:	mov	r7, r0
   12ddc:	mov	r0, #0
   12de0:	str	r3, [sp]
   12de4:	mov	r9, r1
   12de8:	str	r0, [sp, #4]
   12dec:	mov	r3, #34	; 0x22
   12df0:	mov	r2, #7
   12df4:	mov	r1, #4096	; 0x1000
   12df8:	bl	11270 <mmap@plt>
   12dfc:	cmn	r0, #1
   12e00:	mov	r4, r0
   12e04:	beq	12e70 <create_trampoline@@Base+0xc8>
   12e08:	add	r6, r0, #8
   12e0c:	stm	r0, {r7, r9}
   12e10:	mov	r2, r5
   12e14:	mov	r1, r8
   12e18:	mov	r0, r6
   12e1c:	bl	11228 <memcpy@plt>
   12e20:	mov	r0, r4
   12e24:	mov	r2, #5
   12e28:	mov	r1, #4096	; 0x1000
   12e2c:	bl	11210 <mprotect@plt>
   12e30:	mov	r0, r6
   12e34:	add	sp, sp, #12
   12e38:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12e3c:	ldr	r2, [pc, #108]	; 12eb0 <create_trampoline@@Base+0x108>
   12e40:	ldr	r1, [pc, #108]	; 12eb4 <create_trampoline@@Base+0x10c>
   12e44:	mov	r3, #45	; 0x2d
   12e48:	ldr	r0, [r6, r2]
   12e4c:	add	r1, pc, r1
   12e50:	str	r1, [sp]
   12e54:	ldr	r2, [pc, #92]	; 12eb8 <create_trampoline@@Base+0x110>
   12e58:	ldr	r1, [pc, #92]	; 12ebc <create_trampoline@@Base+0x114>
   12e5c:	add	r2, pc, r2
   12e60:	add	r1, pc, r1
   12e64:	ldr	r0, [r0]
   12e68:	bl	11288 <fprintf@plt>
   12e6c:	bl	112e8 <abort@plt>
   12e70:	ldr	r2, [pc, #56]	; 12eb0 <create_trampoline@@Base+0x108>
   12e74:	ldr	r1, [pc, #68]	; 12ec0 <create_trampoline@@Base+0x118>
   12e78:	mov	r3, #69	; 0x45
   12e7c:	ldr	r0, [r6, r2]
   12e80:	add	r1, pc, r1
   12e84:	str	r1, [sp]
   12e88:	ldr	r2, [pc, #52]	; 12ec4 <create_trampoline@@Base+0x11c>
   12e8c:	ldr	r1, [pc, #52]	; 12ec8 <create_trampoline@@Base+0x120>
   12e90:	add	r2, pc, r2
   12e94:	add	r1, pc, r1
   12e98:	ldr	r0, [r0]
   12e9c:	bl	11288 <fprintf@plt>
   12ea0:	bl	112e8 <abort@plt>
   12ea4:	andeq	r2, r1, ip, lsr r2
   12ea8:	andeq	r0, r0, ip, rrx
   12eac:	andeq	r0, r0, r4, ror r0
   12eb0:	andeq	r0, r0, r0, ror r0
   12eb4:	ldrdeq	r0, [r0], -ip
   12eb8:	andeq	r0, r0, r4, asr pc
   12ebc:	andeq	r0, r0, r8, lsr #31
   12ec0:	andeq	r0, r0, r4, asr #31
   12ec4:	andeq	r0, r0, r0, lsr #30
   12ec8:	andeq	r0, r0, r4, ror pc

00012ecc <destroy_trampoline@@Base>:
   12ecc:	sub	r0, r0, #8
   12ed0:	mov	r1, #4096	; 0x1000
   12ed4:	b	112b8 <munmap@plt>

00012ed8 <mmk_verify_set_times@@Base>:
   12ed8:	push	{fp, lr}
   12edc:	add	fp, sp, #4
   12ee0:	sub	sp, sp, #8
   12ee4:	str	r0, [fp, #-8]
   12ee8:	ldr	r3, [pc, #36]	; 12f14 <mmk_verify_set_times@@Base+0x3c>
   12eec:	add	r3, pc, r3
   12ef0:	mov	r0, r3
   12ef4:	bl	112d0 <__tls_get_addr@plt>
   12ef8:	mov	r1, r0
   12efc:	ldr	r2, [pc, #20]	; 12f18 <mmk_verify_set_times@@Base+0x40>
   12f00:	ldr	r3, [fp, #-8]
   12f04:	str	r3, [r1, r2]
   12f08:	nop			; (mov r0, r0)
   12f0c:	sub	sp, fp, #4
   12f10:	pop	{fp, pc}
   12f14:	andeq	r2, r1, r0, ror r1
   12f18:	andeq	r0, r0, ip

00012f1c <mmk_verify_times@@Base>:
   12f1c:	push	{fp, lr}
   12f20:	add	fp, sp, #4
   12f24:	sub	sp, sp, #16
   12f28:	str	r0, [fp, #-16]
   12f2c:	ldr	r3, [pc, #264]	; 1303c <mmk_verify_times@@Base+0x120>
   12f30:	add	r3, pc, r3
   12f34:	mov	r0, r3
   12f38:	bl	112d0 <__tls_get_addr@plt>
   12f3c:	mov	r2, r0
   12f40:	ldr	r3, [pc, #248]	; 13040 <mmk_verify_times@@Base+0x124>
   12f44:	ldr	r3, [r2, r3]
   12f48:	str	r3, [fp, #-8]
   12f4c:	ldr	r3, [fp, #-16]
   12f50:	ldr	r3, [r3, #4]
   12f54:	cmp	r3, #0
   12f58:	beq	12f74 <mmk_verify_times@@Base+0x58>
   12f5c:	ldr	r3, [fp, #-8]
   12f60:	cmp	r3, #0
   12f64:	moveq	r3, #1
   12f68:	movne	r3, #0
   12f6c:	uxtb	r3, r3
   12f70:	b	13030 <mmk_verify_times@@Base+0x114>
   12f74:	ldr	r3, [fp, #-16]
   12f78:	ldr	r3, [r3, #8]
   12f7c:	cmp	r3, #0
   12f80:	bne	12f94 <mmk_verify_times@@Base+0x78>
   12f84:	ldr	r3, [fp, #-16]
   12f88:	ldr	r3, [r3, #12]
   12f8c:	cmp	r3, #0
   12f90:	beq	12fec <mmk_verify_times@@Base+0xd0>
   12f94:	ldr	r3, [fp, #-16]
   12f98:	ldr	r3, [r3, #12]
   12f9c:	cmp	r3, #0
   12fa0:	beq	12fb0 <mmk_verify_times@@Base+0x94>
   12fa4:	ldr	r3, [fp, #-16]
   12fa8:	ldr	r3, [r3, #12]
   12fac:	b	12fb4 <mmk_verify_times@@Base+0x98>
   12fb0:	ldr	r3, [fp, #-8]
   12fb4:	str	r3, [fp, #-12]
   12fb8:	ldr	r3, [fp, #-16]
   12fbc:	ldr	r2, [r3, #8]
   12fc0:	ldr	r3, [fp, #-8]
   12fc4:	cmp	r2, r3
   12fc8:	bhi	12fe4 <mmk_verify_times@@Base+0xc8>
   12fcc:	ldr	r2, [fp, #-8]
   12fd0:	ldr	r3, [fp, #-12]
   12fd4:	cmp	r2, r3
   12fd8:	bhi	12fe4 <mmk_verify_times@@Base+0xc8>
   12fdc:	mov	r3, #1
   12fe0:	b	13030 <mmk_verify_times@@Base+0x114>
   12fe4:	mov	r3, #0
   12fe8:	b	13030 <mmk_verify_times@@Base+0x114>
   12fec:	ldr	r3, [fp, #-16]
   12ff0:	ldr	r3, [r3, #20]
   12ff4:	cmp	r3, #0
   12ff8:	beq	13014 <mmk_verify_times@@Base+0xf8>
   12ffc:	ldr	r3, [fp, #-16]
   13000:	ldr	r3, [r3, #20]
   13004:	ldr	r0, [fp, #-8]
   13008:	blx	r3
   1300c:	mov	r3, r0
   13010:	b	13030 <mmk_verify_times@@Base+0x114>
   13014:	ldr	r3, [fp, #-16]
   13018:	ldr	r2, [r3, #16]
   1301c:	ldr	r3, [fp, #-8]
   13020:	cmp	r2, r3
   13024:	moveq	r3, #1
   13028:	movne	r3, #0
   1302c:	uxtb	r3, r3
   13030:	mov	r0, r3
   13034:	sub	sp, fp, #4
   13038:	pop	{fp, pc}
   1303c:	andeq	r2, r1, ip, lsr #2
   13040:	andeq	r0, r0, ip
   13044:	push	{fp, lr}
   13048:	add	fp, sp, #4
   1304c:	sub	sp, sp, #32
   13050:	str	r0, [fp, #-24]	; 0xffffffe8
   13054:	str	r1, [fp, #-28]	; 0xffffffe4
   13058:	str	r2, [fp, #-32]	; 0xffffffe0
   1305c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13060:	add	r3, r3, #4
   13064:	str	r3, [fp, #-28]	; 0xffffffe4
   13068:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1306c:	sub	r3, r3, #4
   13070:	str	r3, [fp, #-32]	; 0xffffffe0
   13074:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13078:	bl	12218 <mmk_mock_params_begin@@Base>
   1307c:	str	r0, [fp, #-8]
   13080:	b	130e0 <mmk_verify_times@@Base+0x1c4>
   13084:	ldr	r3, [fp, #-8]
   13088:	add	r3, r3, #4
   1308c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13090:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13094:	mov	r0, r3
   13098:	bl	13334 <mmk_memcmp@@Base>
   1309c:	str	r0, [fp, #-12]
   130a0:	ldr	r3, [fp, #-12]
   130a4:	cmp	r3, #0
   130a8:	bne	130d0 <mmk_verify_times@@Base+0x1b4>
   130ac:	ldr	r3, [fp, #-8]
   130b0:	str	r3, [fp, #-16]
   130b4:	ldr	r3, [fp, #-16]
   130b8:	ldr	r3, [r3]
   130bc:	add	r2, r3, #1
   130c0:	ldr	r3, [fp, #-16]
   130c4:	str	r2, [r3]
   130c8:	mov	r3, #1
   130cc:	b	130f0 <mmk_verify_times@@Base+0x1d4>
   130d0:	ldr	r1, [fp, #-8]
   130d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   130d8:	bl	1226c <mmk_mock_params_next@@Base>
   130dc:	str	r0, [fp, #-8]
   130e0:	ldr	r3, [fp, #-8]
   130e4:	cmp	r3, #0
   130e8:	bne	13084 <mmk_verify_times@@Base+0x168>
   130ec:	mov	r3, #0
   130f0:	mov	r0, r3
   130f4:	sub	sp, fp, #4
   130f8:	pop	{fp, pc}

000130fc <mmk_verify_register_call@@Base>:
   130fc:	push	{r4, fp, lr}
   13100:	add	fp, sp, #8
   13104:	sub	sp, sp, #28
   13108:	str	r0, [fp, #-24]	; 0xffffffe8
   1310c:	str	r1, [fp, #-28]	; 0xffffffe4
   13110:	ldr	r4, [pc, #508]	; 13314 <mmk_verify_register_call@@Base+0x218>
   13114:	add	r4, pc, r4
   13118:	bl	12d30 <mmk_ctx@@Base>
   1311c:	mov	r3, r0
   13120:	mov	r0, r3
   13124:	bl	12900 <mmk_stub_context@@Base>
   13128:	str	r0, [fp, #-16]
   1312c:	ldr	r3, [fp, #-16]
   13130:	ldr	r3, [r3, #8]
   13134:	cmp	r3, #0
   13138:	bne	131a0 <mmk_verify_register_call@@Base+0xa4>
   1313c:	mov	r0, #4096	; 0x1000
   13140:	bl	13564 <mmk_malloc@@Base>
   13144:	mov	r2, r0
   13148:	ldr	r3, [fp, #-16]
   1314c:	str	r2, [r3, #8]
   13150:	ldr	r3, [fp, #-16]
   13154:	ldr	r3, [r3, #8]
   13158:	cmp	r3, #0
   1315c:	bne	13194 <mmk_verify_register_call@@Base+0x98>
   13160:	ldr	r3, [pc, #432]	; 13318 <mmk_verify_register_call@@Base+0x21c>
   13164:	ldr	r3, [r4, r3]
   13168:	ldr	r0, [r3]
   1316c:	ldr	r3, [pc, #424]	; 1331c <mmk_verify_register_call@@Base+0x220>
   13170:	add	r3, pc, r3
   13174:	str	r3, [sp]
   13178:	mov	r3, #79	; 0x4f
   1317c:	ldr	r2, [pc, #412]	; 13320 <mmk_verify_register_call@@Base+0x224>
   13180:	add	r2, pc, r2
   13184:	ldr	r1, [pc, #408]	; 13324 <mmk_verify_register_call@@Base+0x228>
   13188:	add	r1, pc, r1
   1318c:	bl	11288 <fprintf@plt>
   13190:	bl	112e8 <abort@plt>
   13194:	ldr	r3, [fp, #-16]
   13198:	mov	r2, #4096	; 0x1000
   1319c:	str	r2, [r3, #16]
   131a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   131a4:	mov	r2, r3
   131a8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   131ac:	ldr	r0, [fp, #-16]
   131b0:	bl	13044 <mmk_verify_times@@Base+0x128>
   131b4:	mov	r3, r0
   131b8:	cmp	r3, #0
   131bc:	bne	13308 <mmk_verify_register_call@@Base+0x20c>
   131c0:	ldr	r3, [fp, #-16]
   131c4:	ldr	r2, [r3, #12]
   131c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   131cc:	add	r3, r2, r3
   131d0:	add	r2, r3, #4
   131d4:	ldr	r3, [fp, #-16]
   131d8:	ldr	r3, [r3, #16]
   131dc:	cmp	r2, r3
   131e0:	bcc	1328c <mmk_verify_register_call@@Base+0x190>
   131e4:	b	131fc <mmk_verify_register_call@@Base+0x100>
   131e8:	ldr	r3, [fp, #-16]
   131ec:	ldr	r3, [r3, #16]
   131f0:	add	r2, r3, #4096	; 0x1000
   131f4:	ldr	r3, [fp, #-16]
   131f8:	str	r2, [r3, #16]
   131fc:	ldr	r3, [fp, #-16]
   13200:	ldr	r2, [r3, #12]
   13204:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13208:	add	r3, r2, r3
   1320c:	add	r2, r3, #4
   13210:	ldr	r3, [fp, #-16]
   13214:	ldr	r3, [r3, #16]
   13218:	cmp	r2, r3
   1321c:	bcs	131e8 <mmk_verify_register_call@@Base+0xec>
   13220:	ldr	r3, [fp, #-16]
   13224:	ldr	r2, [r3, #8]
   13228:	ldr	r3, [fp, #-16]
   1322c:	ldr	r3, [r3, #16]
   13230:	mov	r1, r3
   13234:	mov	r0, r2
   13238:	bl	13584 <mmk_realloc@@Base>
   1323c:	mov	r2, r0
   13240:	ldr	r3, [fp, #-16]
   13244:	str	r2, [r3, #8]
   13248:	ldr	r3, [fp, #-16]
   1324c:	ldr	r3, [r3, #8]
   13250:	cmp	r3, #0
   13254:	bne	1328c <mmk_verify_register_call@@Base+0x190>
   13258:	ldr	r3, [pc, #184]	; 13318 <mmk_verify_register_call@@Base+0x21c>
   1325c:	ldr	r3, [r4, r3]
   13260:	ldr	r0, [r3]
   13264:	ldr	r3, [pc, #188]	; 13328 <mmk_verify_register_call@@Base+0x22c>
   13268:	add	r3, pc, r3
   1326c:	str	r3, [sp]
   13270:	mov	r3, #91	; 0x5b
   13274:	ldr	r2, [pc, #176]	; 1332c <mmk_verify_register_call@@Base+0x230>
   13278:	add	r2, pc, r2
   1327c:	ldr	r1, [pc, #172]	; 13330 <mmk_verify_register_call@@Base+0x234>
   13280:	add	r1, pc, r1
   13284:	bl	11288 <fprintf@plt>
   13288:	bl	112e8 <abort@plt>
   1328c:	ldr	r3, [fp, #-16]
   13290:	ldr	r2, [r3, #8]
   13294:	ldr	r3, [fp, #-16]
   13298:	ldr	r3, [r3, #12]
   1329c:	add	r3, r2, r3
   132a0:	sub	r1, fp, #28
   132a4:	mov	r2, #4
   132a8:	mov	r0, r3
   132ac:	bl	13388 <mmk_memcpy@@Base>
   132b0:	ldr	r3, [fp, #-16]
   132b4:	ldr	r2, [r3, #8]
   132b8:	ldr	r3, [fp, #-16]
   132bc:	ldr	r3, [r3, #12]
   132c0:	add	r3, r3, #4
   132c4:	add	r3, r2, r3
   132c8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   132cc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   132d0:	mov	r0, r3
   132d4:	bl	13388 <mmk_memcpy@@Base>
   132d8:	str	r0, [fp, #-20]	; 0xffffffec
   132dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   132e0:	mov	r2, #1
   132e4:	str	r2, [r3]
   132e8:	ldr	r3, [fp, #-16]
   132ec:	ldr	r2, [r3, #12]
   132f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   132f4:	add	r3, r2, r3
   132f8:	add	r2, r3, #4
   132fc:	ldr	r3, [fp, #-16]
   13300:	str	r2, [r3, #12]
   13304:	b	1330c <mmk_verify_register_call@@Base+0x210>
   13308:	nop			; (mov r0, r0)
   1330c:	sub	sp, fp, #8
   13310:	pop	{r4, fp, pc}
   13314:	andeq	r1, r1, r4, ror #29
   13318:	andeq	r0, r0, r0, ror r0
   1331c:	andeq	r0, r0, ip, asr sp
   13320:	ldrdeq	r0, [r0], -r8
   13324:	andeq	r0, r0, r4, lsr #26
   13328:	andeq	r0, r0, r4, ror #24
   1332c:	andeq	r0, r0, r0, ror #23
   13330:	andeq	r0, r0, ip, lsr #24

00013334 <mmk_memcmp@@Base>:
   13334:	cmp	r2, #0
   13338:	beq	13370 <mmk_memcmp@@Base+0x3c>
   1333c:	ldrb	ip, [r0]
   13340:	ldrb	r3, [r1]
   13344:	cmp	r3, ip
   13348:	addeq	r2, r0, r2
   1334c:	addeq	r0, r0, #1
   13350:	beq	13368 <mmk_memcmp@@Base+0x34>
   13354:	b	13378 <mmk_memcmp@@Base+0x44>
   13358:	ldrb	ip, [r0], #1
   1335c:	ldrb	r3, [r1, #1]!
   13360:	cmp	ip, r3
   13364:	bne	13378 <mmk_memcmp@@Base+0x44>
   13368:	cmp	r0, r2
   1336c:	bne	13358 <mmk_memcmp@@Base+0x24>
   13370:	mov	r0, #0
   13374:	bx	lr
   13378:	cmp	ip, r3
   1337c:	mvncc	r0, #0
   13380:	movcs	r0, #1
   13384:	bx	lr

00013388 <mmk_memcpy@@Base>:
   13388:	cmp	r2, #0
   1338c:	bxeq	lr
   13390:	sub	r1, r1, #1
   13394:	add	r2, r0, r2
   13398:	mov	r3, r0
   1339c:	ldrb	ip, [r1, #1]!
   133a0:	strb	ip, [r3], #1
   133a4:	cmp	r3, r2
   133a8:	bne	1339c <mmk_memcpy@@Base+0x14>
   133ac:	bx	lr

000133b0 <mmk_strneq@@Base>:
   133b0:	ldrb	r3, [r0]
   133b4:	cmp	r3, #0
   133b8:	beq	1344c <mmk_strneq@@Base+0x9c>
   133bc:	ldrb	ip, [r1]
   133c0:	cmp	ip, #0
   133c4:	beq	1344c <mmk_strneq@@Base+0x9c>
   133c8:	cmp	r2, #0
   133cc:	beq	1343c <mmk_strneq@@Base+0x8c>
   133d0:	cmp	ip, r3
   133d4:	bne	13444 <mmk_strneq@@Base+0x94>
   133d8:	push	{lr}		; (str lr, [sp, #-4]!)
   133dc:	add	r3, r1, #1
   133e0:	b	13400 <mmk_strneq@@Base+0x50>
   133e4:	ldrb	lr, [r3], #1
   133e8:	cmp	lr, #0
   133ec:	beq	13414 <mmk_strneq@@Base+0x64>
   133f0:	cmp	r2, #0
   133f4:	beq	1342c <mmk_strneq@@Base+0x7c>
   133f8:	cmp	ip, lr
   133fc:	bne	13434 <mmk_strneq@@Base+0x84>
   13400:	ldrb	ip, [r0, #1]!
   13404:	sub	r2, r2, #1
   13408:	mov	r1, r3
   1340c:	cmp	ip, #0
   13410:	bne	133e4 <mmk_strneq@@Base+0x34>
   13414:	cmp	r2, #0
   13418:	beq	1342c <mmk_strneq@@Base+0x7c>
   1341c:	ldrb	r0, [r1]
   13420:	clz	r0, r0
   13424:	lsr	r0, r0, #5
   13428:	pop	{pc}		; (ldr pc, [sp], #4)
   1342c:	mov	r0, #1
   13430:	pop	{pc}		; (ldr pc, [sp], #4)
   13434:	mov	r0, #0
   13438:	pop	{pc}		; (ldr pc, [sp], #4)
   1343c:	mov	r0, #1
   13440:	bx	lr
   13444:	mov	r0, #0
   13448:	bx	lr
   1344c:	cmp	r2, #0
   13450:	beq	1343c <mmk_strneq@@Base+0x8c>
   13454:	ldrb	r0, [r1]
   13458:	clz	r0, r0
   1345c:	lsr	r0, r0, #5
   13460:	bx	lr

00013464 <mmk_strchr@@Base>:
   13464:	ldrb	r2, [r0]
   13468:	cmp	r2, #0
   1346c:	beq	13498 <mmk_strchr@@Base+0x34>
   13470:	cmp	r1, r2
   13474:	bne	13484 <mmk_strchr@@Base+0x20>
   13478:	b	134a0 <mmk_strchr@@Base+0x3c>
   1347c:	cmp	r3, r1
   13480:	bxeq	lr
   13484:	ldrb	r3, [r0, #1]!
   13488:	cmp	r3, #0
   1348c:	bne	1347c <mmk_strchr@@Base+0x18>
   13490:	mov	r0, r3
   13494:	bx	lr
   13498:	mov	r0, r2
   1349c:	bx	lr
   134a0:	bx	lr

000134a4 <mmk_strcpy@@Base>:
   134a4:	ldrb	r3, [r1]
   134a8:	cmp	r3, #0
   134ac:	beq	134c0 <mmk_strcpy@@Base+0x1c>
   134b0:	strb	r3, [r0], #1
   134b4:	ldrb	r3, [r1, #1]!
   134b8:	cmp	r3, #0
   134bc:	bne	134b0 <mmk_strcpy@@Base+0xc>
   134c0:	mov	r3, #0
   134c4:	strb	r3, [r0]
   134c8:	bx	lr

000134cc <mmk_strncpy@@Base>:
   134cc:	ldrb	ip, [r1]
   134d0:	cmp	r2, #0
   134d4:	cmpne	ip, #0
   134d8:	beq	13504 <mmk_strncpy@@Base+0x38>
   134dc:	strb	ip, [r0], #1
   134e0:	ldrb	ip, [r1, #1]!
   134e4:	subs	r2, r2, #1
   134e8:	movne	r3, #1
   134ec:	moveq	r3, #0
   134f0:	cmp	ip, #0
   134f4:	moveq	r3, #0
   134f8:	andne	r3, r3, #1
   134fc:	cmp	r3, #0
   13500:	bne	134dc <mmk_strncpy@@Base+0x10>
   13504:	mov	r3, #0
   13508:	strb	r3, [r0]
   1350c:	bx	lr

00013510 <mmk_strlen@@Base>:
   13510:	ldrb	r3, [r0]
   13514:	cmp	r3, #0
   13518:	beq	13530 <mmk_strlen@@Base+0x20>
   1351c:	mov	r3, #0
   13520:	ldrb	r2, [r0, #1]!
   13524:	add	r3, r3, #1
   13528:	cmp	r2, #0
   1352c:	bne	13520 <mmk_strlen@@Base+0x10>
   13530:	mov	r0, r3
   13534:	bx	lr

00013538 <mmk_isspace@@Base>:
   13538:	cmp	r0, #9
   1353c:	cmpne	r0, #32
   13540:	mov	r3, r0
   13544:	moveq	r0, #1
   13548:	movne	r0, #0
   1354c:	bxeq	lr
   13550:	cmp	r3, #10
   13554:	cmpne	r3, #13
   13558:	moveq	r0, #1
   1355c:	movne	r0, #0
   13560:	bx	lr

00013564 <mmk_malloc@@Base>:
   13564:	ldr	r3, [pc, #16]	; 1357c <mmk_malloc@@Base+0x18>
   13568:	ldr	r2, [pc, #16]	; 13580 <mmk_malloc@@Base+0x1c>
   1356c:	add	r3, pc, r3
   13570:	ldr	r3, [r3, r2]
   13574:	ldr	r3, [r3]
   13578:	bx	r3
   1357c:	andeq	r1, r1, ip, lsl #21
   13580:	muleq	r0, r0, r0

00013584 <mmk_realloc@@Base>:
   13584:	ldr	r3, [pc, #16]	; 1359c <mmk_realloc@@Base+0x18>
   13588:	ldr	r2, [pc, #16]	; 135a0 <mmk_realloc@@Base+0x1c>
   1358c:	add	r3, pc, r3
   13590:	ldr	r3, [r3, r2]
   13594:	ldr	r3, [r3]
   13598:	bx	r3
   1359c:	andeq	r1, r1, ip, ror #20
   135a0:	andeq	r0, r0, ip, ror r0

000135a4 <mmk_free@@Base>:
   135a4:	ldr	r3, [pc, #16]	; 135bc <mmk_free@@Base+0x18>
   135a8:	ldr	r2, [pc, #16]	; 135c0 <mmk_free@@Base+0x1c>
   135ac:	add	r3, pc, r3
   135b0:	ldr	r3, [r3, r2]
   135b4:	ldr	r3, [r3]
   135b8:	bx	r3
   135bc:	andeq	r1, r1, ip, asr #20
   135c0:	andeq	r0, r0, ip, lsl #1

000135c4 <mmk_init_vital_functions@@Base>:
   135c4:	push	{r4, r5, lr}
   135c8:	mov	r5, r0
   135cc:	sub	sp, sp, #12
   135d0:	mov	r0, #0
   135d4:	bl	11240 <malloc@plt>
   135d8:	mov	r1, #0
   135dc:	bl	11234 <realloc@plt>
   135e0:	bl	1121c <free@plt>
   135e4:	ldr	r1, [pc, #272]	; 136fc <mmk_init_vital_functions@@Base+0x138>
   135e8:	mov	r0, r5
   135ec:	add	r1, pc, r1
   135f0:	bl	128b8 <plt_get_real_fn@@Base>
   135f4:	ldr	r4, [pc, #260]	; 13700 <mmk_init_vital_functions@@Base+0x13c>
   135f8:	ldr	r3, [pc, #260]	; 13704 <mmk_init_vital_functions@@Base+0x140>
   135fc:	add	r4, pc, r4
   13600:	ldr	r3, [r4, r3]
   13604:	cmp	r0, #0
   13608:	str	r0, [r3]
   1360c:	beq	13660 <mmk_init_vital_functions@@Base+0x9c>
   13610:	ldr	r1, [pc, #240]	; 13708 <mmk_init_vital_functions@@Base+0x144>
   13614:	mov	r0, r5
   13618:	add	r1, pc, r1
   1361c:	bl	128b8 <plt_get_real_fn@@Base>
   13620:	ldr	r3, [pc, #228]	; 1370c <mmk_init_vital_functions@@Base+0x148>
   13624:	ldr	r3, [r4, r3]
   13628:	cmp	r0, #0
   1362c:	str	r0, [r3]
   13630:	beq	136c8 <mmk_init_vital_functions@@Base+0x104>
   13634:	ldr	r1, [pc, #212]	; 13710 <mmk_init_vital_functions@@Base+0x14c>
   13638:	mov	r0, r5
   1363c:	add	r1, pc, r1
   13640:	bl	128b8 <plt_get_real_fn@@Base>
   13644:	ldr	r3, [pc, #200]	; 13714 <mmk_init_vital_functions@@Base+0x150>
   13648:	ldr	r3, [r4, r3]
   1364c:	cmp	r0, #0
   13650:	str	r0, [r3]
   13654:	beq	13694 <mmk_init_vital_functions@@Base+0xd0>
   13658:	add	sp, sp, #12
   1365c:	pop	{r4, r5, pc}
   13660:	ldr	r2, [pc, #176]	; 13718 <mmk_init_vital_functions@@Base+0x154>
   13664:	ldr	r1, [pc, #176]	; 1371c <mmk_init_vital_functions@@Base+0x158>
   13668:	mov	r3, #88	; 0x58
   1366c:	ldr	r0, [r4, r2]
   13670:	add	r1, pc, r1
   13674:	str	r1, [sp]
   13678:	ldr	r2, [pc, #160]	; 13720 <mmk_init_vital_functions@@Base+0x15c>
   1367c:	ldr	r1, [pc, #160]	; 13724 <mmk_init_vital_functions@@Base+0x160>
   13680:	add	r2, pc, r2
   13684:	add	r1, pc, r1
   13688:	ldr	r0, [r0]
   1368c:	bl	11288 <fprintf@plt>
   13690:	bl	112e8 <abort@plt>
   13694:	ldr	r2, [pc, #124]	; 13718 <mmk_init_vital_functions@@Base+0x154>
   13698:	ldr	r1, [pc, #136]	; 13728 <mmk_init_vital_functions@@Base+0x164>
   1369c:	mov	r3, #90	; 0x5a
   136a0:	ldr	r0, [r4, r2]
   136a4:	add	r1, pc, r1
   136a8:	str	r1, [sp]
   136ac:	ldr	r2, [pc, #120]	; 1372c <mmk_init_vital_functions@@Base+0x168>
   136b0:	ldr	r1, [pc, #120]	; 13730 <mmk_init_vital_functions@@Base+0x16c>
   136b4:	add	r2, pc, r2
   136b8:	add	r1, pc, r1
   136bc:	ldr	r0, [r0]
   136c0:	bl	11288 <fprintf@plt>
   136c4:	bl	112e8 <abort@plt>
   136c8:	ldr	r2, [pc, #72]	; 13718 <mmk_init_vital_functions@@Base+0x154>
   136cc:	ldr	r1, [pc, #96]	; 13734 <mmk_init_vital_functions@@Base+0x170>
   136d0:	mov	r3, #89	; 0x59
   136d4:	ldr	r0, [r4, r2]
   136d8:	add	r1, pc, r1
   136dc:	str	r1, [sp]
   136e0:	ldr	r2, [pc, #80]	; 13738 <mmk_init_vital_functions@@Base+0x174>
   136e4:	ldr	r1, [pc, #80]	; 1373c <mmk_init_vital_functions@@Base+0x178>
   136e8:	add	r2, pc, r2
   136ec:	add	r1, pc, r1
   136f0:	ldr	r0, [r0]
   136f4:	bl	11288 <fprintf@plt>
   136f8:	bl	112e8 <abort@plt>
   136fc:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13700:	strdeq	r1, [r1], -ip
   13704:	muleq	r0, r0, r0
   13708:	andeq	r0, r0, r8, asr r9
   1370c:	andeq	r0, r0, ip, ror r0
   13710:	andeq	r0, r0, r4, ror r9
   13714:	andeq	r0, r0, ip, lsl #1
   13718:	andeq	r0, r0, r0, ror r0
   1371c:	andeq	r0, r0, r8, asr #17
   13720:	andeq	r0, r0, r4, ror #16
   13724:	andeq	r0, r0, r4, lsl #15
   13728:	andeq	r0, r0, r4, lsl r9
   1372c:	andeq	r0, r0, r0, lsr r8
   13730:	andeq	r0, r0, r0, asr r7
   13734:	andeq	r0, r0, r0, lsr #17
   13738:	strdeq	r0, [r0], -ip
   1373c:	andeq	r0, r0, ip, lsl r7

00013740 <mmk_when_init@@Base>:
   13740:	push	{fp, lr}
   13744:	add	fp, sp, #4
   13748:	sub	sp, sp, #8
   1374c:	str	r0, [fp, #-8]
   13750:	ldr	r3, [pc, #36]	; 1377c <mmk_when_init@@Base+0x3c>
   13754:	add	r3, pc, r3
   13758:	mov	r0, r3
   1375c:	bl	112d0 <__tls_get_addr@plt>
   13760:	mov	r1, r0
   13764:	ldr	r2, [pc, #20]	; 13780 <mmk_when_init@@Base+0x40>
   13768:	ldr	r3, [fp, #-8]
   1376c:	str	r3, [r1, r2]
   13770:	nop			; (mov r0, r0)
   13774:	sub	sp, fp, #4
   13778:	pop	{fp, pc}
   1377c:	andeq	r1, r1, r8, lsl #18
   13780:	andeq	r0, r0, r0, lsl r0

00013784 <mmk_when_get_result@@Base>:
   13784:	push	{fp, lr}
   13788:	add	fp, sp, #4
   1378c:	ldr	r3, [pc, #28]	; 137b0 <mmk_when_get_result@@Base+0x2c>
   13790:	add	r3, pc, r3
   13794:	mov	r0, r3
   13798:	bl	112d0 <__tls_get_addr@plt>
   1379c:	mov	r2, r0
   137a0:	ldr	r3, [pc, #12]	; 137b4 <mmk_when_get_result@@Base+0x30>
   137a4:	ldr	r3, [r2, r3]
   137a8:	mov	r0, r3
   137ac:	pop	{fp, pc}
   137b0:	andeq	r1, r1, ip, asr #17
   137b4:	andeq	r0, r0, r0, lsl r0

000137b8 <mmk_when_impl@@Base>:
   137b8:	push	{fp, lr}
   137bc:	add	fp, sp, #4
   137c0:	sub	sp, sp, #16
   137c4:	str	r0, [fp, #-16]
   137c8:	str	r1, [fp, #-20]	; 0xffffffec
   137cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   137d0:	str	r3, [fp, #-8]
   137d4:	bl	11e98 <mmk_matcher_ctx@@Base>
   137d8:	mov	r2, r0
   137dc:	ldr	r3, [fp, #-8]
   137e0:	str	r2, [r3]
   137e4:	ldr	r3, [fp, #-16]
   137e8:	ldr	r2, [r3]
   137ec:	ldr	r3, [fp, #-8]
   137f0:	str	r2, [r3, #4]
   137f4:	ldr	r3, [fp, #-16]
   137f8:	ldr	r2, [fp, #-8]
   137fc:	str	r2, [r3]
   13800:	nop			; (mov r0, r0)
   13804:	sub	sp, fp, #4
   13808:	pop	{fp, pc}

0001380c <mmk_trampoline@@Base>:
   1380c:	sub	ip, pc, #8
   13810:	push	{r0, r1, r2, r3}
   13814:	push	{ip, lr}
   13818:	ldr	r0, [ip, #-8]
   1381c:	ldr	ip, [r0, #4]
   13820:	blx	ip
   13824:	pop	{ip, lr}
   13828:	push	{ip, lr}
   1382c:	ldr	ip, [ip, #-8]
   13830:	ldr	ip, [ip]
   13834:	blx	ip
   13838:	cmp	r0, #0
   1383c:	bne	1384c <mmk_trampoline@@Base+0x40>
   13840:	pop	{ip, lr}
   13844:	pop	{r0, r1, r2, r3}
   13848:	ldr	pc, [ip, #-4]
   1384c:	pop	{ip, lr}
   13850:	pop	{r0, r1, r2, r3}
   13854:	push	{ip, lr}
   13858:	ldr	ip, [ip, #-8]
   1385c:	ldr	ip, [ip, #8]
   13860:	blx	ip
   13864:	pop	{ip, pc}

00013868 <mmk_trampoline_end@@Base>:
   13868:	nop			; (mov r0, r0)
   1386c:	subs	r2, r1, #1
   13870:	bxeq	lr
   13874:	bcc	13a4c <mmk_trampoline_end@@Base+0x1e4>
   13878:	cmp	r0, r1
   1387c:	bls	13a30 <mmk_trampoline_end@@Base+0x1c8>
   13880:	tst	r1, r2
   13884:	beq	13a3c <mmk_trampoline_end@@Base+0x1d4>
   13888:	clz	r3, r0
   1388c:	clz	r2, r1
   13890:	sub	r3, r2, r3
   13894:	rsbs	r3, r3, #31
   13898:	addne	r3, r3, r3, lsl #1
   1389c:	mov	r2, #0
   138a0:	addne	pc, pc, r3, lsl #2
   138a4:	nop			; (mov r0, r0)
   138a8:	cmp	r0, r1, lsl #31
   138ac:	adc	r2, r2, r2
   138b0:	subcs	r0, r0, r1, lsl #31
   138b4:	cmp	r0, r1, lsl #30
   138b8:	adc	r2, r2, r2
   138bc:	subcs	r0, r0, r1, lsl #30
   138c0:	cmp	r0, r1, lsl #29
   138c4:	adc	r2, r2, r2
   138c8:	subcs	r0, r0, r1, lsl #29
   138cc:	cmp	r0, r1, lsl #28
   138d0:	adc	r2, r2, r2
   138d4:	subcs	r0, r0, r1, lsl #28
   138d8:	cmp	r0, r1, lsl #27
   138dc:	adc	r2, r2, r2
   138e0:	subcs	r0, r0, r1, lsl #27
   138e4:	cmp	r0, r1, lsl #26
   138e8:	adc	r2, r2, r2
   138ec:	subcs	r0, r0, r1, lsl #26
   138f0:	cmp	r0, r1, lsl #25
   138f4:	adc	r2, r2, r2
   138f8:	subcs	r0, r0, r1, lsl #25
   138fc:	cmp	r0, r1, lsl #24
   13900:	adc	r2, r2, r2
   13904:	subcs	r0, r0, r1, lsl #24
   13908:	cmp	r0, r1, lsl #23
   1390c:	adc	r2, r2, r2
   13910:	subcs	r0, r0, r1, lsl #23
   13914:	cmp	r0, r1, lsl #22
   13918:	adc	r2, r2, r2
   1391c:	subcs	r0, r0, r1, lsl #22
   13920:	cmp	r0, r1, lsl #21
   13924:	adc	r2, r2, r2
   13928:	subcs	r0, r0, r1, lsl #21
   1392c:	cmp	r0, r1, lsl #20
   13930:	adc	r2, r2, r2
   13934:	subcs	r0, r0, r1, lsl #20
   13938:	cmp	r0, r1, lsl #19
   1393c:	adc	r2, r2, r2
   13940:	subcs	r0, r0, r1, lsl #19
   13944:	cmp	r0, r1, lsl #18
   13948:	adc	r2, r2, r2
   1394c:	subcs	r0, r0, r1, lsl #18
   13950:	cmp	r0, r1, lsl #17
   13954:	adc	r2, r2, r2
   13958:	subcs	r0, r0, r1, lsl #17
   1395c:	cmp	r0, r1, lsl #16
   13960:	adc	r2, r2, r2
   13964:	subcs	r0, r0, r1, lsl #16
   13968:	cmp	r0, r1, lsl #15
   1396c:	adc	r2, r2, r2
   13970:	subcs	r0, r0, r1, lsl #15
   13974:	cmp	r0, r1, lsl #14
   13978:	adc	r2, r2, r2
   1397c:	subcs	r0, r0, r1, lsl #14
   13980:	cmp	r0, r1, lsl #13
   13984:	adc	r2, r2, r2
   13988:	subcs	r0, r0, r1, lsl #13
   1398c:	cmp	r0, r1, lsl #12
   13990:	adc	r2, r2, r2
   13994:	subcs	r0, r0, r1, lsl #12
   13998:	cmp	r0, r1, lsl #11
   1399c:	adc	r2, r2, r2
   139a0:	subcs	r0, r0, r1, lsl #11
   139a4:	cmp	r0, r1, lsl #10
   139a8:	adc	r2, r2, r2
   139ac:	subcs	r0, r0, r1, lsl #10
   139b0:	cmp	r0, r1, lsl #9
   139b4:	adc	r2, r2, r2
   139b8:	subcs	r0, r0, r1, lsl #9
   139bc:	cmp	r0, r1, lsl #8
   139c0:	adc	r2, r2, r2
   139c4:	subcs	r0, r0, r1, lsl #8
   139c8:	cmp	r0, r1, lsl #7
   139cc:	adc	r2, r2, r2
   139d0:	subcs	r0, r0, r1, lsl #7
   139d4:	cmp	r0, r1, lsl #6
   139d8:	adc	r2, r2, r2
   139dc:	subcs	r0, r0, r1, lsl #6
   139e0:	cmp	r0, r1, lsl #5
   139e4:	adc	r2, r2, r2
   139e8:	subcs	r0, r0, r1, lsl #5
   139ec:	cmp	r0, r1, lsl #4
   139f0:	adc	r2, r2, r2
   139f4:	subcs	r0, r0, r1, lsl #4
   139f8:	cmp	r0, r1, lsl #3
   139fc:	adc	r2, r2, r2
   13a00:	subcs	r0, r0, r1, lsl #3
   13a04:	cmp	r0, r1, lsl #2
   13a08:	adc	r2, r2, r2
   13a0c:	subcs	r0, r0, r1, lsl #2
   13a10:	cmp	r0, r1, lsl #1
   13a14:	adc	r2, r2, r2
   13a18:	subcs	r0, r0, r1, lsl #1
   13a1c:	cmp	r0, r1
   13a20:	adc	r2, r2, r2
   13a24:	subcs	r0, r0, r1
   13a28:	mov	r0, r2
   13a2c:	bx	lr
   13a30:	moveq	r0, #1
   13a34:	movne	r0, #0
   13a38:	bx	lr
   13a3c:	clz	r2, r1
   13a40:	rsb	r2, r2, #31
   13a44:	lsr	r0, r0, r2
   13a48:	bx	lr
   13a4c:	cmp	r0, #0
   13a50:	mvnne	r0, #0
   13a54:	b	13a78 <mmk_trampoline_end@@Base+0x210>
   13a58:	cmp	r1, #0
   13a5c:	beq	13a4c <mmk_trampoline_end@@Base+0x1e4>
   13a60:	push	{r0, r1, lr}
   13a64:	bl	1386c <mmk_trampoline_end@@Base+0x4>
   13a68:	pop	{r1, r2, lr}
   13a6c:	mul	r3, r2, r0
   13a70:	sub	r1, r1, r3
   13a74:	bx	lr
   13a78:	push	{r1, lr}
   13a7c:	mov	r0, #8
   13a80:	bl	111f8 <raise@plt>
   13a84:	pop	{r1, pc}

00013a88 <__libc_csu_init@@Base>:
   13a88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13a8c:	mov	r7, r0
   13a90:	ldr	r6, [pc, #72]	; 13ae0 <__libc_csu_init@@Base+0x58>
   13a94:	ldr	r5, [pc, #72]	; 13ae4 <__libc_csu_init@@Base+0x5c>
   13a98:	add	r6, pc, r6
   13a9c:	add	r5, pc, r5
   13aa0:	sub	r6, r6, r5
   13aa4:	mov	r8, r1
   13aa8:	mov	r9, r2
   13aac:	bl	111cc <strstr@plt-0x20>
   13ab0:	asrs	r6, r6, #2
   13ab4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13ab8:	mov	r4, #0
   13abc:	add	r4, r4, #1
   13ac0:	ldr	r3, [r5], #4
   13ac4:	mov	r2, r9
   13ac8:	mov	r1, r8
   13acc:	mov	r0, r7
   13ad0:	blx	r3
   13ad4:	cmp	r6, r4
   13ad8:	bne	13abc <__libc_csu_init@@Base+0x34>
   13adc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13ae0:	andeq	r1, r1, r8, asr r4
   13ae4:	andeq	r1, r1, r0, asr r4

00013ae8 <__libc_csu_fini@@Base>:
   13ae8:	bx	lr

Disassembly of section .fini:

00013aec <.fini>:
   13aec:	push	{r3, lr}
   13af0:	pop	{r3, pc}
