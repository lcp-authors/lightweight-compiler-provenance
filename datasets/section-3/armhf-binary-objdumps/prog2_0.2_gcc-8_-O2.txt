
../repos/prog2/0.2:     file format elf32-littlearm


Disassembly of section .init:

000105a0 <.init>:
   105a0:	push	{r3, lr}
   105a4:	bl	107c0 <_start@@Base+0x3c>
   105a8:	pop	{r3, pc}

Disassembly of section .plt:

000105ac <printf@plt-0x14>:
   105ac:	push	{lr}		; (str lr, [sp, #-4]!)
   105b0:	ldr	lr, [pc, #4]	; 105bc <printf@plt-0x4>
   105b4:	add	lr, pc, lr
   105b8:	ldr	pc, [lr, #8]!
   105bc:	andeq	r0, r1, r4, asr #20

000105c0 <printf@plt>:
   105c0:	add	ip, pc, #0, 12
   105c4:	add	ip, ip, #16, 20	; 0x10000
   105c8:	ldr	pc, [ip, #2628]!	; 0xa44

000105cc <puts@plt>:
   105cc:	add	ip, pc, #0, 12
   105d0:	add	ip, ip, #16, 20	; 0x10000
   105d4:	ldr	pc, [ip, #2620]!	; 0xa3c

000105d8 <__libc_start_main@plt>:
   105d8:	add	ip, pc, #0, 12
   105dc:	add	ip, ip, #16, 20	; 0x10000
   105e0:	ldr	pc, [ip, #2612]!	; 0xa34

000105e4 <__gmon_start__@plt>:
   105e4:	add	ip, pc, #0, 12
   105e8:	add	ip, ip, #16, 20	; 0x10000
   105ec:	ldr	pc, [ip, #2604]!	; 0xa2c

000105f0 <putchar@plt>:
   105f0:	add	ip, pc, #0, 12
   105f4:	add	ip, ip, #16, 20	; 0x10000
   105f8:	ldr	pc, [ip, #2596]!	; 0xa24

000105fc <__isoc99_scanf@plt>:
   105fc:	add	ip, pc, #0, 12
   10600:	add	ip, ip, #16, 20	; 0x10000
   10604:	ldr	pc, [ip, #2588]!	; 0xa1c

00010608 <abort@plt>:
   10608:	add	ip, pc, #0, 12
   1060c:	add	ip, ip, #16, 20	; 0x10000
   10610:	ldr	pc, [ip, #2580]!	; 0xa14

Disassembly of section .text:

00010614 <main@@Base>:
   10614:	ldr	r0, [pc, #336]	; 1076c <main@@Base+0x158>
   10618:	mov	r3, #0
   1061c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   10620:	mov	r4, r3
   10624:	strd	r6, [sp, #8]
   10628:	strd	r8, [sp, #16]
   1062c:	ldr	r9, [pc, #316]	; 10770 <main@@Base+0x15c>
   10630:	str	sl, [sp, #24]
   10634:	add	r0, pc, r0
   10638:	ldr	sl, [pc, #308]	; 10774 <main@@Base+0x160>
   1063c:	str	lr, [sp, #28]
   10640:	sub	sp, sp, #40	; 0x28
   10644:	mov	r8, sp
   10648:	add	r7, sp, #20
   1064c:	add	r9, pc, r9
   10650:	mov	r5, r8
   10654:	str	r3, [sp]
   10658:	mov	r6, r8
   1065c:	str	r3, [r7, #4]
   10660:	add	sl, pc, sl
   10664:	str	r3, [r8, #4]
   10668:	str	r3, [r7, #8]
   1066c:	str	r3, [r8, #8]
   10670:	str	r3, [r7, #12]
   10674:	str	r3, [r8, #12]
   10678:	str	r3, [r7, #16]
   1067c:	str	r3, [r8, #16]
   10680:	str	r3, [sp, #20]
   10684:	bl	105cc <puts@plt>
   10688:	add	r4, r4, #1
   1068c:	mov	r0, sl
   10690:	mov	r1, r4
   10694:	bl	105c0 <printf@plt>
   10698:	mov	r1, r6
   1069c:	mov	r0, r9
   106a0:	bl	105fc <__isoc99_scanf@plt>
   106a4:	cmp	r4, #5
   106a8:	add	r6, r6, #4
   106ac:	bne	10688 <main@@Base+0x74>
   106b0:	ldr	r0, [pc, #192]	; 10778 <main@@Base+0x164>
   106b4:	mov	r6, r7
   106b8:	mov	r4, #0
   106bc:	add	r0, pc, r0
   106c0:	bl	105cc <puts@plt>
   106c4:	add	r4, r4, #1
   106c8:	mov	r0, sl
   106cc:	mov	r1, r4
   106d0:	bl	105c0 <printf@plt>
   106d4:	mov	r1, r6
   106d8:	mov	r0, r9
   106dc:	bl	105fc <__isoc99_scanf@plt>
   106e0:	cmp	r4, #5
   106e4:	add	r6, r6, #4
   106e8:	bne	106c4 <main@@Base+0xb0>
   106ec:	mov	r0, #10
   106f0:	ldr	r9, [pc, #132]	; 1077c <main@@Base+0x168>
   106f4:	add	r8, r8, #20
   106f8:	bl	105f0 <putchar@plt>
   106fc:	ldr	r0, [pc, #124]	; 10780 <main@@Base+0x16c>
   10700:	add	r6, r7, #20
   10704:	add	r9, pc, r9
   10708:	add	r0, pc, r0
   1070c:	bl	105c0 <printf@plt>
   10710:	mov	r4, r7
   10714:	ldr	r3, [r4], #4
   10718:	ldr	r1, [r5]
   1071c:	cmp	r1, r3
   10720:	beq	10760 <main@@Base+0x14c>
   10724:	cmp	r6, r4
   10728:	bne	10714 <main@@Base+0x100>
   1072c:	add	r5, r5, #4
   10730:	cmp	r5, r8
   10734:	bne	10710 <main@@Base+0xfc>
   10738:	mov	r0, #10
   1073c:	bl	105f0 <putchar@plt>
   10740:	mov	r0, #0
   10744:	add	sp, sp, #40	; 0x28
   10748:	ldrd	r4, [sp]
   1074c:	ldrd	r6, [sp, #8]
   10750:	ldrd	r8, [sp, #16]
   10754:	ldr	sl, [sp, #24]
   10758:	add	sp, sp, #28
   1075c:	pop	{pc}		; (ldr pc, [sp], #4)
   10760:	mov	r0, r9
   10764:	bl	105c0 <printf@plt>
   10768:	b	10724 <main@@Base+0x110>
   1076c:	andeq	r0, r0, r8, lsr #5
   10770:			; <UNDEFINED> instruction: 0x000002b4
   10774:	andeq	r0, r0, r8, lsl #5
   10778:	andeq	r0, r0, r8, asr #4
   1077c:	andeq	r0, r0, r4, lsl r2
   10780:	andeq	r0, r0, r8, lsl #4

00010784 <_start@@Base>:
   10784:	mov	fp, #0
   10788:	mov	lr, #0
   1078c:	pop	{r1}		; (ldr r1, [sp], #4)
   10790:	mov	r2, sp
   10794:	push	{r2}		; (str r2, [sp, #-4]!)
   10798:	push	{r0}		; (str r0, [sp, #-4]!)
   1079c:	ldr	ip, [pc, #16]	; 107b4 <_start@@Base+0x30>
   107a0:	push	{ip}		; (str ip, [sp, #-4]!)
   107a4:	ldr	r0, [pc, #12]	; 107b8 <_start@@Base+0x34>
   107a8:	ldr	r3, [pc, #12]	; 107bc <_start@@Base+0x38>
   107ac:	bl	105d8 <__libc_start_main@plt>
   107b0:	bl	10608 <abort@plt>
   107b4:	ldrdeq	r0, [r1], -r4
   107b8:	andeq	r0, r1, r4, lsl r6
   107bc:	andeq	r0, r1, r4, ror r8
   107c0:	ldr	r3, [pc, #20]	; 107dc <_start@@Base+0x58>
   107c4:	ldr	r2, [pc, #20]	; 107e0 <_start@@Base+0x5c>
   107c8:	add	r3, pc, r3
   107cc:	ldr	r2, [r3, r2]
   107d0:	cmp	r2, #0
   107d4:	bxeq	lr
   107d8:	b	105e4 <__gmon_start__@plt>
   107dc:	andeq	r0, r1, r0, lsr r8
   107e0:	andeq	r0, r0, r8, lsr #32
   107e4:	ldr	r0, [pc, #24]	; 10804 <_start@@Base+0x80>
   107e8:	ldr	r3, [pc, #24]	; 10808 <_start@@Base+0x84>
   107ec:	cmp	r3, r0
   107f0:	bxeq	lr
   107f4:	ldr	r3, [pc, #16]	; 1080c <_start@@Base+0x88>
   107f8:	cmp	r3, #0
   107fc:	bxeq	lr
   10800:	bx	r3
   10804:	andeq	r1, r2, r4, lsr r0
   10808:	andeq	r1, r2, r4, lsr r0
   1080c:	andeq	r0, r0, r0
   10810:	ldr	r0, [pc, #36]	; 1083c <_start@@Base+0xb8>
   10814:	ldr	r1, [pc, #36]	; 10840 <_start@@Base+0xbc>
   10818:	sub	r1, r1, r0
   1081c:	asr	r1, r1, #2
   10820:	add	r1, r1, r1, lsr #31
   10824:	asrs	r1, r1, #1
   10828:	bxeq	lr
   1082c:	ldr	r3, [pc, #16]	; 10844 <_start@@Base+0xc0>
   10830:	cmp	r3, #0
   10834:	bxeq	lr
   10838:	bx	r3
   1083c:	andeq	r1, r2, r4, lsr r0
   10840:	andeq	r1, r2, r4, lsr r0
   10844:	andeq	r0, r0, r0
   10848:	push	{r4, lr}
   1084c:	ldr	r4, [pc, #24]	; 1086c <_start@@Base+0xe8>
   10850:	ldrb	r3, [r4]
   10854:	cmp	r3, #0
   10858:	popne	{r4, pc}
   1085c:	bl	107e4 <_start@@Base+0x60>
   10860:	mov	r3, #1
   10864:	strb	r3, [r4]
   10868:	pop	{r4, pc}
   1086c:	andeq	r1, r2, r4, lsr r0
   10870:	b	10810 <_start@@Base+0x8c>

00010874 <__libc_csu_init@@Base>:
   10874:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10878:	mov	r7, r0
   1087c:	ldr	r6, [pc, #72]	; 108cc <__libc_csu_init@@Base+0x58>
   10880:	ldr	r5, [pc, #72]	; 108d0 <__libc_csu_init@@Base+0x5c>
   10884:	add	r6, pc, r6
   10888:	add	r5, pc, r5
   1088c:	sub	r6, r6, r5
   10890:	mov	r8, r1
   10894:	mov	r9, r2
   10898:	bl	105a0 <printf@plt-0x20>
   1089c:	asrs	r6, r6, #2
   108a0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   108a4:	mov	r4, #0
   108a8:	add	r4, r4, #1
   108ac:	ldr	r3, [r5], #4
   108b0:	mov	r2, r9
   108b4:	mov	r1, r8
   108b8:	mov	r0, r7
   108bc:	blx	r3
   108c0:	cmp	r6, r4
   108c4:	bne	108a8 <__libc_csu_init@@Base+0x34>
   108c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108cc:	andeq	r0, r1, r8, lsl #13
   108d0:	andeq	r0, r1, r0, lsl #13

000108d4 <__libc_csu_fini@@Base>:
   108d4:	bx	lr

Disassembly of section .fini:

000108d8 <.fini>:
   108d8:	push	{r3, lr}
   108dc:	pop	{r3, pc}
