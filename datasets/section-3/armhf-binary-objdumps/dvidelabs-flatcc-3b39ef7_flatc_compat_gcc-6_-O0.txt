
../repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/flatc_compat:     file format elf32-littlearm


Disassembly of section .init:

00010cbc <.init>:
   10cbc:	push	{r3, lr}
   10cc0:	bl	10e24 <_start@@Base+0x3c>
   10cc4:	pop	{r3, pc}

Disassembly of section .plt:

00010cc8 <strcmp@plt-0x14>:
   10cc8:	push	{lr}		; (str lr, [sp, #-4]!)
   10ccc:	ldr	lr, [pc, #4]	; 10cd8 <strcmp@plt-0x4>
   10cd0:	add	lr, pc, lr
   10cd4:	ldr	pc, [lr, #8]!
   10cd8:	andeq	r8, r1, r8, lsr #6

00010cdc <strcmp@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #24, 20	; 0x18000
   10ce4:	ldr	pc, [ip, #808]!	; 0x328

00010ce8 <printf@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #24, 20	; 0x18000
   10cf0:	ldr	pc, [ip, #800]!	; 0x320

00010cf4 <fopen@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #24, 20	; 0x18000
   10cfc:	ldr	pc, [ip, #792]!	; 0x318

00010d00 <free@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #24, 20	; 0x18000
   10d08:	ldr	pc, [ip, #784]!	; 0x310

00010d0c <memcpy@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #24, 20	; 0x18000
   10d14:	ldr	pc, [ip, #776]!	; 0x308

00010d18 <ftell@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #24, 20	; 0x18000
   10d20:	ldr	pc, [ip, #768]!	; 0x300

00010d24 <rewind@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #24, 20	; 0x18000
   10d2c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d30 <fwrite@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #24, 20	; 0x18000
   10d38:	ldr	pc, [ip, #752]!	; 0x2f0

00010d3c <fread@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #24, 20	; 0x18000
   10d44:	ldr	pc, [ip, #744]!	; 0x2e8

00010d48 <puts@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #24, 20	; 0x18000
   10d50:	ldr	pc, [ip, #736]!	; 0x2e0

00010d54 <malloc@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #24, 20	; 0x18000
   10d5c:	ldr	pc, [ip, #728]!	; 0x2d8

00010d60 <__libc_start_main@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #24, 20	; 0x18000
   10d68:	ldr	pc, [ip, #720]!	; 0x2d0

00010d6c <__gmon_start__@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #24, 20	; 0x18000
   10d74:	ldr	pc, [ip, #712]!	; 0x2c8

00010d78 <exit@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #24, 20	; 0x18000
   10d80:	ldr	pc, [ip, #704]!	; 0x2c0

00010d84 <fprintf@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #24, 20	; 0x18000
   10d8c:	ldr	pc, [ip, #696]!	; 0x2b8

00010d90 <posix_memalign@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #24, 20	; 0x18000
   10d98:	ldr	pc, [ip, #688]!	; 0x2b0

00010d9c <strncpy@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #24, 20	; 0x18000
   10da4:	ldr	pc, [ip, #680]!	; 0x2a8

00010da8 <fclose@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #24, 20	; 0x18000
   10db0:	ldr	pc, [ip, #672]!	; 0x2a0

00010db4 <fputc@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #24, 20	; 0x18000
   10dbc:	ldr	pc, [ip, #664]!	; 0x298

00010dc0 <fseek@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #24, 20	; 0x18000
   10dc8:	ldr	pc, [ip, #656]!	; 0x290

00010dcc <abort@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #24, 20	; 0x18000
   10dd4:	ldr	pc, [ip, #648]!	; 0x288

00010dd8 <__assert_fail@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #24, 20	; 0x18000
   10de0:	ldr	pc, [ip, #640]!	; 0x280

Disassembly of section .text:

00010de8 <_start@@Base>:
   10de8:	mov	fp, #0
   10dec:	mov	lr, #0
   10df0:	pop	{r1}		; (ldr r1, [sp], #4)
   10df4:	mov	r2, sp
   10df8:	push	{r2}		; (str r2, [sp, #-4]!)
   10dfc:	push	{r0}		; (str r0, [sp, #-4]!)
   10e00:	ldr	ip, [pc, #16]	; 10e18 <_start@@Base+0x30>
   10e04:	push	{ip}		; (str ip, [sp, #-4]!)
   10e08:	ldr	r0, [pc, #12]	; 10e1c <_start@@Base+0x34>
   10e0c:	ldr	r3, [pc, #12]	; 10e20 <_start@@Base+0x38>
   10e10:	bl	10d60 <__libc_start_main@plt>
   10e14:	bl	10dcc <abort@plt>
   10e18:	ldrdeq	r7, [r1], -r0
   10e1c:	andeq	r4, r1, r4, asr #25
   10e20:	andeq	r7, r1, r0, ror r3
   10e24:	ldr	r3, [pc, #20]	; 10e40 <_start@@Base+0x58>
   10e28:	ldr	r2, [pc, #20]	; 10e44 <_start@@Base+0x5c>
   10e2c:	add	r3, pc, r3
   10e30:	ldr	r2, [r3, r2]
   10e34:	cmp	r2, #0
   10e38:	bxeq	lr
   10e3c:	b	10d6c <__gmon_start__@plt>
   10e40:	andeq	r8, r1, ip, asr #3
   10e44:	andeq	r0, r0, r8, rrx
   10e48:	ldr	r3, [pc, #28]	; 10e6c <_start@@Base+0x84>
   10e4c:	ldr	r0, [pc, #28]	; 10e70 <_start@@Base+0x88>
   10e50:	sub	r3, r3, r0
   10e54:	cmp	r3, #6
   10e58:	bxls	lr
   10e5c:	ldr	r3, [pc, #16]	; 10e74 <_start@@Base+0x8c>
   10e60:	cmp	r3, #0
   10e64:	bxeq	lr
   10e68:	bx	r3
   10e6c:	andeq	r9, r2, r7, lsl #1
   10e70:	andeq	r9, r2, r4, lsl #1
   10e74:	andeq	r0, r0, r0
   10e78:	ldr	r1, [pc, #36]	; 10ea4 <_start@@Base+0xbc>
   10e7c:	ldr	r0, [pc, #36]	; 10ea8 <_start@@Base+0xc0>
   10e80:	sub	r1, r1, r0
   10e84:	asr	r1, r1, #2
   10e88:	add	r1, r1, r1, lsr #31
   10e8c:	asrs	r1, r1, #1
   10e90:	bxeq	lr
   10e94:	ldr	r3, [pc, #16]	; 10eac <_start@@Base+0xc4>
   10e98:	cmp	r3, #0
   10e9c:	bxeq	lr
   10ea0:	bx	r3
   10ea4:	andeq	r9, r2, r4, lsl #1
   10ea8:	andeq	r9, r2, r4, lsl #1
   10eac:	andeq	r0, r0, r0
   10eb0:	push	{r4, lr}
   10eb4:	ldr	r4, [pc, #24]	; 10ed4 <_start@@Base+0xec>
   10eb8:	ldrb	r3, [r4]
   10ebc:	cmp	r3, #0
   10ec0:	popne	{r4, pc}
   10ec4:	bl	10e48 <_start@@Base+0x60>
   10ec8:	mov	r3, #1
   10ecc:	strb	r3, [r4]
   10ed0:	pop	{r4, pc}
   10ed4:	andeq	r9, r2, r4, lsl #1
   10ed8:	ldr	r0, [pc, #40]	; 10f08 <_start@@Base+0x120>
   10edc:	ldr	r3, [r0]
   10ee0:	cmp	r3, #0
   10ee4:	bne	10eec <_start@@Base+0x104>
   10ee8:	b	10e78 <_start@@Base+0x90>
   10eec:	ldr	r3, [pc, #24]	; 10f0c <_start@@Base+0x124>
   10ef0:	cmp	r3, #0
   10ef4:	beq	10ee8 <_start@@Base+0x100>
   10ef8:	push	{r4, lr}
   10efc:	blx	r3
   10f00:	pop	{r4, lr}
   10f04:	b	10e78 <_start@@Base+0x90>
   10f08:	andeq	r8, r2, r4, lsl pc
   10f0c:	andeq	r0, r0, r0
   10f10:	push	{fp, lr}
   10f14:	add	fp, sp, #4
   10f18:	sub	sp, sp, #16
   10f1c:	str	r0, [fp, #-16]
   10f20:	str	r1, [fp, #-20]	; 0xffffffec
   10f24:	mov	r3, #0
   10f28:	str	r3, [fp, #-12]
   10f2c:	ldr	r3, [fp, #-16]
   10f30:	cmp	r3, #3
   10f34:	bhi	10f40 <_start@@Base+0x158>
   10f38:	mov	r3, #4
   10f3c:	str	r3, [fp, #-16]
   10f40:	sub	r3, fp, #12
   10f44:	ldr	r2, [fp, #-20]	; 0xffffffec
   10f48:	ldr	r1, [fp, #-16]
   10f4c:	mov	r0, r3
   10f50:	bl	10d90 <posix_memalign@plt>
   10f54:	str	r0, [fp, #-8]
   10f58:	ldr	r3, [fp, #-8]
   10f5c:	cmp	r3, #0
   10f60:	beq	10f84 <_start@@Base+0x19c>
   10f64:	ldr	r3, [fp, #-12]
   10f68:	cmp	r3, #0
   10f6c:	beq	10f84 <_start@@Base+0x19c>
   10f70:	ldr	r3, [fp, #-12]
   10f74:	mov	r0, r3
   10f78:	bl	10d00 <free@plt>
   10f7c:	mov	r3, #0
   10f80:	str	r3, [fp, #-12]
   10f84:	ldr	r3, [fp, #-12]
   10f88:	mov	r0, r3
   10f8c:	sub	sp, fp, #4
   10f90:	pop	{fp, pc}
   10f94:	push	{fp}		; (str fp, [sp, #-4]!)
   10f98:	add	fp, sp, #0
   10f9c:	sub	sp, sp, #12
   10fa0:	mov	r3, r0
   10fa4:	strb	r3, [fp, #-5]
   10fa8:	ldrb	r3, [fp, #-5]
   10fac:	mov	r0, r3
   10fb0:	add	sp, fp, #0
   10fb4:	pop	{fp}		; (ldr fp, [sp], #4)
   10fb8:	bx	lr
   10fbc:	push	{fp, lr}
   10fc0:	add	fp, sp, #4
   10fc4:	sub	sp, sp, #8
   10fc8:	str	r0, [fp, #-8]
   10fcc:	ldr	r3, [fp, #-8]
   10fd0:	ldrb	r3, [r3]
   10fd4:	mov	r0, r3
   10fd8:	bl	10f94 <_start@@Base+0x1ac>
   10fdc:	mov	r3, r0
   10fe0:	mov	r0, r3
   10fe4:	sub	sp, fp, #4
   10fe8:	pop	{fp, pc}
   10fec:	push	{fp}		; (str fp, [sp, #-4]!)
   10ff0:	add	fp, sp, #0
   10ff4:	sub	sp, sp, #12
   10ff8:	str	r0, [fp, #-8]
   10ffc:	ldr	r3, [fp, #-8]
   11000:	mov	r0, r3
   11004:	add	sp, fp, #0
   11008:	pop	{fp}		; (ldr fp, [sp], #4)
   1100c:	bx	lr
   11010:	push	{fp, lr}
   11014:	add	fp, sp, #4
   11018:	sub	sp, sp, #8
   1101c:	str	r0, [fp, #-8]
   11020:	ldr	r3, [fp, #-8]
   11024:	ldr	r3, [r3]
   11028:	mov	r0, r3
   1102c:	bl	10fec <_start@@Base+0x204>
   11030:	mov	r3, r0
   11034:	mov	r0, r3
   11038:	sub	sp, fp, #4
   1103c:	pop	{fp, pc}
   11040:	push	{fp}		; (str fp, [sp, #-4]!)
   11044:	add	fp, sp, #0
   11048:	sub	sp, sp, #12
   1104c:	strd	r0, [fp, #-12]
   11050:	ldrd	r2, [fp, #-12]
   11054:	mov	r0, r2
   11058:	mov	r1, r3
   1105c:	add	sp, fp, #0
   11060:	pop	{fp}		; (ldr fp, [sp], #4)
   11064:	bx	lr
   11068:	push	{fp, lr}
   1106c:	add	fp, sp, #4
   11070:	sub	sp, sp, #8
   11074:	str	r0, [fp, #-8]
   11078:	ldr	r3, [fp, #-8]
   1107c:	ldrd	r2, [r3]
   11080:	mov	r0, r2
   11084:	mov	r1, r3
   11088:	bl	11040 <_start@@Base+0x258>
   1108c:	mov	r2, r0
   11090:	mov	r3, r1
   11094:	mov	r0, r2
   11098:	mov	r1, r3
   1109c:	sub	sp, fp, #4
   110a0:	pop	{fp, pc}
   110a4:	push	{fp}		; (str fp, [sp, #-4]!)
   110a8:	add	fp, sp, #0
   110ac:	sub	sp, sp, #12
   110b0:	mov	r3, r0
   110b4:	strb	r3, [fp, #-5]
   110b8:	ldrsb	r3, [fp, #-5]
   110bc:	mov	r0, r3
   110c0:	add	sp, fp, #0
   110c4:	pop	{fp}		; (ldr fp, [sp], #4)
   110c8:	bx	lr
   110cc:	push	{fp, lr}
   110d0:	add	fp, sp, #4
   110d4:	sub	sp, sp, #8
   110d8:	str	r0, [fp, #-8]
   110dc:	ldr	r3, [fp, #-8]
   110e0:	ldrsb	r3, [r3]
   110e4:	mov	r0, r3
   110e8:	bl	110a4 <_start@@Base+0x2bc>
   110ec:	mov	r3, r0
   110f0:	mov	r0, r3
   110f4:	sub	sp, fp, #4
   110f8:	pop	{fp, pc}
   110fc:	push	{fp}		; (str fp, [sp, #-4]!)
   11100:	add	fp, sp, #0
   11104:	sub	sp, sp, #12
   11108:	mov	r3, r0
   1110c:	strh	r3, [fp, #-6]
   11110:	ldrsh	r3, [fp, #-6]
   11114:	mov	r0, r3
   11118:	add	sp, fp, #0
   1111c:	pop	{fp}		; (ldr fp, [sp], #4)
   11120:	bx	lr
   11124:	push	{fp, lr}
   11128:	add	fp, sp, #4
   1112c:	sub	sp, sp, #8
   11130:	str	r0, [fp, #-8]
   11134:	ldr	r3, [fp, #-8]
   11138:	ldrsh	r3, [r3]
   1113c:	mov	r0, r3
   11140:	bl	110fc <_start@@Base+0x314>
   11144:	mov	r3, r0
   11148:	mov	r0, r3
   1114c:	sub	sp, fp, #4
   11150:	pop	{fp, pc}
   11154:	push	{fp}		; (str fp, [sp, #-4]!)
   11158:	add	fp, sp, #0
   1115c:	sub	sp, sp, #12
   11160:	str	r0, [fp, #-8]
   11164:	ldr	r3, [fp, #-8]
   11168:	mov	r0, r3
   1116c:	add	sp, fp, #0
   11170:	pop	{fp}		; (ldr fp, [sp], #4)
   11174:	bx	lr
   11178:	push	{fp, lr}
   1117c:	add	fp, sp, #4
   11180:	sub	sp, sp, #8
   11184:	str	r0, [fp, #-8]
   11188:	ldr	r3, [fp, #-8]
   1118c:	ldr	r3, [r3]
   11190:	mov	r0, r3
   11194:	bl	11154 <_start@@Base+0x36c>
   11198:	mov	r3, r0
   1119c:	mov	r0, r3
   111a0:	sub	sp, fp, #4
   111a4:	pop	{fp, pc}
   111a8:	push	{fp}		; (str fp, [sp, #-4]!)
   111ac:	add	fp, sp, #0
   111b0:	sub	sp, sp, #12
   111b4:	strd	r0, [fp, #-12]
   111b8:	ldrd	r2, [fp, #-12]
   111bc:	mov	r0, r2
   111c0:	mov	r1, r3
   111c4:	add	sp, fp, #0
   111c8:	pop	{fp}		; (ldr fp, [sp], #4)
   111cc:	bx	lr
   111d0:	push	{fp, lr}
   111d4:	add	fp, sp, #4
   111d8:	sub	sp, sp, #8
   111dc:	str	r0, [fp, #-8]
   111e0:	ldr	r3, [fp, #-8]
   111e4:	ldrd	r2, [r3]
   111e8:	mov	r0, r2
   111ec:	mov	r1, r3
   111f0:	bl	111a8 <_start@@Base+0x3c0>
   111f4:	mov	r2, r0
   111f8:	mov	r3, r1
   111fc:	mov	r0, r2
   11200:	mov	r1, r3
   11204:	sub	sp, fp, #4
   11208:	pop	{fp, pc}
   1120c:	push	{fp}		; (str fp, [sp, #-4]!)
   11210:	add	fp, sp, #0
   11214:	sub	sp, sp, #20
   11218:	vstr	s0, [fp, #-16]
   1121c:	ldr	r3, [fp, #-16]
   11220:	str	r3, [fp, #-8]
   11224:	ldr	r3, [fp, #-8]
   11228:	str	r3, [fp, #-8]
   1122c:	ldr	r3, [fp, #-8]
   11230:	vmov	s15, r3
   11234:	vmov.f32	s0, s15
   11238:	add	sp, fp, #0
   1123c:	pop	{fp}		; (ldr fp, [sp], #4)
   11240:	bx	lr
   11244:	push	{fp, lr}
   11248:	add	fp, sp, #4
   1124c:	sub	sp, sp, #8
   11250:	str	r0, [fp, #-8]
   11254:	ldr	r3, [fp, #-8]
   11258:	vldr	s15, [r3]
   1125c:	vmov.f32	s0, s15
   11260:	bl	1120c <_start@@Base+0x424>
   11264:	vmov.f32	s15, s0
   11268:	vmov.f32	s0, s15
   1126c:	sub	sp, fp, #4
   11270:	pop	{fp, pc}
   11274:	push	{fp}		; (str fp, [sp, #-4]!)
   11278:	add	fp, sp, #0
   1127c:	sub	sp, sp, #20
   11280:	vstr	d0, [fp, #-20]	; 0xffffffec
   11284:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11288:	strd	r2, [fp, #-12]
   1128c:	ldrd	r2, [fp, #-12]
   11290:	strd	r2, [fp, #-12]
   11294:	ldrd	r2, [fp, #-12]
   11298:	vmov	d7, r2, r3
   1129c:	vmov.f64	d0, d7
   112a0:	add	sp, fp, #0
   112a4:	pop	{fp}		; (ldr fp, [sp], #4)
   112a8:	bx	lr
   112ac:	push	{fp, lr}
   112b0:	add	fp, sp, #4
   112b4:	sub	sp, sp, #8
   112b8:	str	r0, [fp, #-8]
   112bc:	ldr	r3, [fp, #-8]
   112c0:	vldr	d7, [r3]
   112c4:	vmov.f64	d0, d7
   112c8:	bl	11274 <_start@@Base+0x48c>
   112cc:	vmov.f64	d7, d0
   112d0:	vmov.f64	d0, d7
   112d4:	sub	sp, fp, #4
   112d8:	pop	{fp, pc}
   112dc:	push	{fp}		; (str fp, [sp, #-4]!)
   112e0:	add	fp, sp, #0
   112e4:	sub	sp, sp, #12
   112e8:	str	r0, [fp, #-8]
   112ec:	ldr	r3, [fp, #-8]
   112f0:	mov	r0, r3
   112f4:	add	sp, fp, #0
   112f8:	pop	{fp}		; (ldr fp, [sp], #4)
   112fc:	bx	lr
   11300:	push	{fp, lr}
   11304:	add	fp, sp, #4
   11308:	sub	sp, sp, #8
   1130c:	str	r0, [fp, #-8]
   11310:	ldr	r3, [fp, #-8]
   11314:	ldr	r3, [r3]
   11318:	mov	r0, r3
   1131c:	bl	112dc <_start@@Base+0x4f4>
   11320:	mov	r3, r0
   11324:	mov	r0, r3
   11328:	sub	sp, fp, #4
   1132c:	pop	{fp, pc}
   11330:	push	{fp}		; (str fp, [sp, #-4]!)
   11334:	add	fp, sp, #0
   11338:	sub	sp, sp, #12
   1133c:	str	r0, [fp, #-8]
   11340:	ldr	r3, [fp, #-8]
   11344:	mov	r0, r3
   11348:	add	sp, fp, #0
   1134c:	pop	{fp}		; (ldr fp, [sp], #4)
   11350:	bx	lr
   11354:	push	{fp, lr}
   11358:	add	fp, sp, #4
   1135c:	sub	sp, sp, #8
   11360:	str	r0, [fp, #-8]
   11364:	ldr	r3, [fp, #-8]
   11368:	ldr	r3, [r3]
   1136c:	mov	r0, r3
   11370:	bl	11330 <_start@@Base+0x548>
   11374:	mov	r3, r0
   11378:	mov	r0, r3
   1137c:	sub	sp, fp, #4
   11380:	pop	{fp, pc}
   11384:	push	{fp}		; (str fp, [sp, #-4]!)
   11388:	add	fp, sp, #0
   1138c:	sub	sp, sp, #12
   11390:	mov	r3, r0
   11394:	strh	r3, [fp, #-6]
   11398:	ldrh	r3, [fp, #-6]
   1139c:	mov	r0, r3
   113a0:	add	sp, fp, #0
   113a4:	pop	{fp}		; (ldr fp, [sp], #4)
   113a8:	bx	lr
   113ac:	push	{fp, lr}
   113b0:	add	fp, sp, #4
   113b4:	sub	sp, sp, #8
   113b8:	str	r0, [fp, #-8]
   113bc:	ldr	r3, [fp, #-8]
   113c0:	ldrh	r3, [r3]
   113c4:	mov	r0, r3
   113c8:	bl	11384 <_start@@Base+0x59c>
   113cc:	mov	r3, r0
   113d0:	mov	r0, r3
   113d4:	sub	sp, fp, #4
   113d8:	pop	{fp, pc}
   113dc:	push	{fp}		; (str fp, [sp, #-4]!)
   113e0:	add	fp, sp, #0
   113e4:	sub	sp, sp, #12
   113e8:	mov	r3, r0
   113ec:	strb	r3, [fp, #-5]
   113f0:	ldrb	r3, [fp, #-5]
   113f4:	mov	r0, r3
   113f8:	add	sp, fp, #0
   113fc:	pop	{fp}		; (ldr fp, [sp], #4)
   11400:	bx	lr
   11404:	push	{fp, lr}
   11408:	add	fp, sp, #4
   1140c:	sub	sp, sp, #8
   11410:	str	r0, [fp, #-8]
   11414:	ldr	r3, [fp, #-8]
   11418:	ldrb	r3, [r3]
   1141c:	mov	r0, r3
   11420:	bl	113dc <_start@@Base+0x5f4>
   11424:	mov	r3, r0
   11428:	mov	r0, r3
   1142c:	sub	sp, fp, #4
   11430:	pop	{fp, pc}
   11434:	push	{fp}		; (str fp, [sp, #-4]!)
   11438:	add	fp, sp, #0
   1143c:	sub	sp, sp, #12
   11440:	str	r0, [fp, #-8]
   11444:	ldr	r3, [fp, #-8]
   11448:	mov	r0, r3
   1144c:	add	sp, fp, #0
   11450:	pop	{fp}		; (ldr fp, [sp], #4)
   11454:	bx	lr
   11458:	push	{fp}		; (str fp, [sp, #-4]!)
   1145c:	add	fp, sp, #0
   11460:	sub	sp, sp, #12
   11464:	str	r0, [fp, #-8]
   11468:	ldr	r3, [fp, #-8]
   1146c:	mov	r0, r3
   11470:	add	sp, fp, #0
   11474:	pop	{fp}		; (ldr fp, [sp], #4)
   11478:	bx	lr
   1147c:	push	{fp, lr}
   11480:	add	fp, sp, #4
   11484:	sub	sp, sp, #8
   11488:	str	r0, [fp, #-8]
   1148c:	ldr	r3, [fp, #-8]
   11490:	ldr	r3, [r3]
   11494:	mov	r0, r3
   11498:	bl	11434 <_start@@Base+0x64c>
   1149c:	mov	r3, r0
   114a0:	mov	r0, r3
   114a4:	sub	sp, fp, #4
   114a8:	pop	{fp, pc}
   114ac:	push	{fp, lr}
   114b0:	add	fp, sp, #4
   114b4:	sub	sp, sp, #8
   114b8:	str	r0, [fp, #-8]
   114bc:	ldr	r3, [fp, #-8]
   114c0:	cmp	r3, #0
   114c4:	beq	114e0 <_start@@Base+0x6f8>
   114c8:	ldr	r3, [fp, #-8]
   114cc:	sub	r3, r3, #4
   114d0:	mov	r0, r3
   114d4:	bl	11300 <_start@@Base+0x518>
   114d8:	mov	r3, r0
   114dc:	b	114e4 <_start@@Base+0x6fc>
   114e0:	mov	r3, #0
   114e4:	mov	r0, r3
   114e8:	sub	sp, fp, #4
   114ec:	pop	{fp, pc}
   114f0:	push	{fp, lr}
   114f4:	add	fp, sp, #4
   114f8:	sub	sp, sp, #8
   114fc:	str	r0, [fp, #-8]
   11500:	ldr	r3, [fp, #-8]
   11504:	cmp	r3, #0
   11508:	beq	11524 <_start@@Base+0x73c>
   1150c:	ldr	r3, [fp, #-8]
   11510:	sub	r3, r3, #4
   11514:	mov	r0, r3
   11518:	bl	11300 <_start@@Base+0x518>
   1151c:	mov	r3, r0
   11520:	b	11528 <_start@@Base+0x740>
   11524:	mov	r3, #0
   11528:	mov	r0, r3
   1152c:	sub	sp, fp, #4
   11530:	pop	{fp, pc}
   11534:	push	{fp, lr}
   11538:	add	fp, sp, #4
   1153c:	sub	sp, sp, #8
   11540:	str	r0, [fp, #-8]
   11544:	ldr	r3, [fp, #-8]
   11548:	cmp	r3, #0
   1154c:	beq	11568 <_start@@Base+0x780>
   11550:	ldr	r3, [fp, #-8]
   11554:	sub	r3, r3, #4
   11558:	mov	r0, r3
   1155c:	bl	11300 <_start@@Base+0x518>
   11560:	mov	r3, r0
   11564:	b	1156c <_start@@Base+0x784>
   11568:	mov	r3, #0
   1156c:	mov	r0, r3
   11570:	sub	sp, fp, #4
   11574:	pop	{fp, pc}
   11578:	push	{fp, lr}
   1157c:	add	fp, sp, #4
   11580:	sub	sp, sp, #16
   11584:	str	r0, [fp, #-16]
   11588:	str	r1, [fp, #-20]	; 0xffffffec
   1158c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11590:	lsl	r3, r3, #2
   11594:	ldr	r2, [fp, #-16]
   11598:	add	r3, r2, r3
   1159c:	str	r3, [fp, #-8]
   115a0:	ldr	r0, [fp, #-16]
   115a4:	bl	114ac <_start@@Base+0x6c4>
   115a8:	mov	r2, r0
   115ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   115b0:	cmp	r2, r3
   115b4:	bhi	115d8 <_start@@Base+0x7f0>
   115b8:	ldr	r3, [pc, #60]	; 115fc <_start@@Base+0x814>
   115bc:	add	r3, pc, r3
   115c0:	mov	r2, #108	; 0x6c
   115c4:	ldr	r1, [pc, #52]	; 11600 <_start@@Base+0x818>
   115c8:	add	r1, pc, r1
   115cc:	ldr	r0, [pc, #48]	; 11604 <_start@@Base+0x81c>
   115d0:	add	r0, pc, r0
   115d4:	bl	10dd8 <__assert_fail@plt>
   115d8:	ldr	r0, [fp, #-8]
   115dc:	bl	11300 <_start@@Base+0x518>
   115e0:	mov	r3, r0
   115e4:	add	r3, r3, #4
   115e8:	ldr	r2, [fp, #-8]
   115ec:	add	r3, r2, r3
   115f0:	mov	r0, r3
   115f4:	sub	sp, fp, #4
   115f8:	pop	{fp, pc}
   115fc:	andeq	r6, r0, r0, asr #13
   11600:	andeq	r5, r0, r4, lsl lr
   11604:	andeq	r5, r0, ip, lsl #29
   11608:	push	{fp, lr}
   1160c:	add	fp, sp, #4
   11610:	sub	sp, sp, #8
   11614:	str	r0, [fp, #-8]
   11618:	ldr	r0, [fp, #-8]
   1161c:	bl	114ac <_start@@Base+0x6c4>
   11620:	mov	r3, r0
   11624:	mov	r0, r3
   11628:	sub	sp, fp, #4
   1162c:	pop	{fp, pc}
   11630:	push	{fp, lr}
   11634:	add	fp, sp, #4
   11638:	sub	sp, sp, #8
   1163c:	str	r0, [fp, #-8]
   11640:	str	r1, [fp, #-12]
   11644:	ldr	r0, [fp, #-8]
   11648:	bl	114ac <_start@@Base+0x6c4>
   1164c:	mov	r2, r0
   11650:	ldr	r3, [fp, #-12]
   11654:	cmp	r2, r3
   11658:	bhi	1167c <_start@@Base+0x894>
   1165c:	ldr	r3, [pc, #60]	; 116a0 <_start@@Base+0x8b8>
   11660:	add	r3, pc, r3
   11664:	ldr	r2, [pc, #56]	; 116a4 <_start@@Base+0x8bc>
   11668:	ldr	r1, [pc, #56]	; 116a8 <_start@@Base+0x8c0>
   1166c:	add	r1, pc, r1
   11670:	ldr	r0, [pc, #52]	; 116ac <_start@@Base+0x8c4>
   11674:	add	r0, pc, r0
   11678:	bl	10dd8 <__assert_fail@plt>
   1167c:	ldr	r2, [fp, #-8]
   11680:	ldr	r3, [fp, #-12]
   11684:	add	r3, r2, r3
   11688:	mov	r0, r3
   1168c:	bl	10fbc <_start@@Base+0x1d4>
   11690:	mov	r3, r0
   11694:	mov	r0, r3
   11698:	sub	sp, fp, #4
   1169c:	pop	{fp, pc}
   116a0:	ldrdeq	r6, [r0], -r4
   116a4:	andeq	r0, r0, fp, lsl #3
   116a8:	andeq	r5, r0, r0, ror sp
   116ac:	andeq	r5, r0, r8, ror #27
   116b0:	push	{fp, lr}
   116b4:	add	fp, sp, #4
   116b8:	sub	sp, sp, #16
   116bc:	str	r0, [fp, #-16]
   116c0:	str	r1, [fp, #-20]	; 0xffffffec
   116c4:	mov	r3, #0
   116c8:	str	r3, [fp, #-12]
   116cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   116d0:	cmp	r3, #0
   116d4:	bne	116e0 <_start@@Base+0x8f8>
   116d8:	mov	r3, #1
   116dc:	b	11744 <_start@@Base+0x95c>
   116e0:	sub	r3, fp, #12
   116e4:	mov	r2, #4
   116e8:	ldr	r1, [fp, #-20]	; 0xffffffec
   116ec:	mov	r0, r3
   116f0:	bl	10d9c <strncpy@plt>
   116f4:	ldr	r3, [fp, #-12]
   116f8:	mov	r0, r3
   116fc:	bl	11458 <_start@@Base+0x670>
   11700:	mov	r3, r0
   11704:	str	r3, [fp, #-12]
   11708:	ldr	r3, [fp, #-16]
   1170c:	add	r3, r3, #4
   11710:	mov	r0, r3
   11714:	bl	1147c <_start@@Base+0x694>
   11718:	str	r0, [fp, #-8]
   1171c:	ldr	r3, [fp, #-12]
   11720:	cmp	r3, #0
   11724:	beq	11738 <_start@@Base+0x950>
   11728:	ldr	r3, [fp, #-12]
   1172c:	ldr	r2, [fp, #-8]
   11730:	cmp	r2, r3
   11734:	bne	11740 <_start@@Base+0x958>
   11738:	mov	r3, #1
   1173c:	b	11744 <_start@@Base+0x95c>
   11740:	mov	r3, #0
   11744:	mov	r0, r3
   11748:	sub	sp, fp, #4
   1174c:	pop	{fp, pc}
   11750:	push	{fp}		; (str fp, [sp, #-4]!)
   11754:	add	fp, sp, #0
   11758:	sub	sp, sp, #12
   1175c:	mov	r3, r0
   11760:	strb	r3, [fp, #-5]
   11764:	ldrsb	r3, [fp, #-5]
   11768:	mov	r0, r3
   1176c:	add	sp, fp, #0
   11770:	pop	{fp}		; (ldr fp, [sp], #4)
   11774:	bx	lr
   11778:	push	{fp, lr}
   1177c:	add	fp, sp, #4
   11780:	sub	sp, sp, #8
   11784:	str	r0, [fp, #-8]
   11788:	ldr	r3, [fp, #-8]
   1178c:	ldrsb	r3, [r3]
   11790:	mov	r0, r3
   11794:	bl	11750 <_start@@Base+0x968>
   11798:	mov	r3, r0
   1179c:	mov	r0, r3
   117a0:	sub	sp, fp, #4
   117a4:	pop	{fp, pc}
   117a8:	push	{fp, lr}
   117ac:	add	fp, sp, #4
   117b0:	sub	sp, sp, #8
   117b4:	str	r0, [fp, #-8]
   117b8:	str	r1, [fp, #-12]
   117bc:	ldr	r0, [fp, #-8]
   117c0:	bl	114ac <_start@@Base+0x6c4>
   117c4:	mov	r2, r0
   117c8:	ldr	r3, [fp, #-12]
   117cc:	cmp	r2, r3
   117d0:	bhi	117f4 <_start@@Base+0xa0c>
   117d4:	ldr	r3, [pc, #52]	; 11810 <_start@@Base+0xa28>
   117d8:	add	r3, pc, r3
   117dc:	mov	r2, #380	; 0x17c
   117e0:	ldr	r1, [pc, #44]	; 11814 <_start@@Base+0xa2c>
   117e4:	add	r1, pc, r1
   117e8:	ldr	r0, [pc, #40]	; 11818 <_start@@Base+0xa30>
   117ec:	add	r0, pc, r0
   117f0:	bl	10dd8 <__assert_fail@plt>
   117f4:	ldr	r3, [fp, #-12]
   117f8:	lsl	r3, r3, #2
   117fc:	ldr	r2, [fp, #-8]
   11800:	add	r3, r2, r3
   11804:	mov	r0, r3
   11808:	sub	sp, fp, #4
   1180c:	pop	{fp, pc}
   11810:	andeq	r6, r0, ip, lsr r5
   11814:			; <UNDEFINED> instruction: 0x00005cb0
   11818:	andeq	r5, r0, r0, ror ip
   1181c:	push	{fp, lr}
   11820:	add	fp, sp, #4
   11824:	sub	sp, sp, #8
   11828:	str	r0, [fp, #-8]
   1182c:	ldr	r3, [fp, #-8]
   11830:	cmp	r3, #0
   11834:	beq	11850 <_start@@Base+0xa68>
   11838:	ldr	r3, [fp, #-8]
   1183c:	sub	r3, r3, #4
   11840:	mov	r0, r3
   11844:	bl	11300 <_start@@Base+0x518>
   11848:	mov	r3, r0
   1184c:	b	11854 <_start@@Base+0xa6c>
   11850:	mov	r3, #0
   11854:	mov	r0, r3
   11858:	sub	sp, fp, #4
   1185c:	pop	{fp, pc}
   11860:	push	{fp, lr}
   11864:	add	fp, sp, #4
   11868:	sub	sp, sp, #8
   1186c:	str	r0, [fp, #-8]
   11870:	ldr	r3, [fp, #-8]
   11874:	cmp	r3, #0
   11878:	beq	11890 <_start@@Base+0xaa8>
   1187c:	ldr	r3, [fp, #-8]
   11880:	mov	r0, r3
   11884:	bl	11124 <_start@@Base+0x33c>
   11888:	mov	r3, r0
   1188c:	b	11894 <_start@@Base+0xaac>
   11890:	mov	r3, #0
   11894:	mov	r0, r3
   11898:	sub	sp, fp, #4
   1189c:	pop	{fp, pc}
   118a0:	push	{fp, lr}
   118a4:	add	fp, sp, #4
   118a8:	sub	sp, sp, #8
   118ac:	str	r0, [fp, #-8]
   118b0:	ldr	r3, [fp, #-8]
   118b4:	cmp	r3, #0
   118b8:	beq	118d4 <_start@@Base+0xaec>
   118bc:	ldr	r3, [fp, #-8]
   118c0:	add	r3, r3, #2
   118c4:	mov	r0, r3
   118c8:	bl	110cc <_start@@Base+0x2e4>
   118cc:	mov	r3, r0
   118d0:	b	118d8 <_start@@Base+0xaf0>
   118d4:	mov	r3, #0
   118d8:	mov	r0, r3
   118dc:	sub	sp, fp, #4
   118e0:	pop	{fp, pc}
   118e4:	push	{fp, lr}
   118e8:	add	fp, sp, #4
   118ec:	sub	sp, sp, #8
   118f0:	str	r0, [fp, #-8]
   118f4:	ldr	r3, [fp, #-8]
   118f8:	cmp	r3, #0
   118fc:	beq	11914 <_start@@Base+0xb2c>
   11900:	ldr	r3, [fp, #-8]
   11904:	mov	r0, r3
   11908:	bl	11244 <_start@@Base+0x45c>
   1190c:	vmov.f32	s15, s0
   11910:	b	11918 <_start@@Base+0xb30>
   11914:	vldr	s15, [pc, #8]	; 11924 <_start@@Base+0xb3c>
   11918:	vmov.f32	s0, s15
   1191c:	sub	sp, fp, #4
   11920:	pop	{fp, pc}
   11924:	andeq	r0, r0, r0
   11928:	push	{fp, lr}
   1192c:	add	fp, sp, #4
   11930:	sub	sp, sp, #8
   11934:	str	r0, [fp, #-8]
   11938:	ldr	r3, [fp, #-8]
   1193c:	cmp	r3, #0
   11940:	beq	1195c <_start@@Base+0xb74>
   11944:	ldr	r3, [fp, #-8]
   11948:	add	r3, r3, #4
   1194c:	mov	r0, r3
   11950:	bl	11244 <_start@@Base+0x45c>
   11954:	vmov.f32	s15, s0
   11958:	b	11960 <_start@@Base+0xb78>
   1195c:	vldr	s15, [pc, #8]	; 1196c <_start@@Base+0xb84>
   11960:	vmov.f32	s0, s15
   11964:	sub	sp, fp, #4
   11968:	pop	{fp, pc}
   1196c:	andeq	r0, r0, r0
   11970:	push	{fp, lr}
   11974:	add	fp, sp, #4
   11978:	sub	sp, sp, #8
   1197c:	str	r0, [fp, #-8]
   11980:	ldr	r3, [fp, #-8]
   11984:	cmp	r3, #0
   11988:	beq	119a4 <_start@@Base+0xbbc>
   1198c:	ldr	r3, [fp, #-8]
   11990:	add	r3, r3, #8
   11994:	mov	r0, r3
   11998:	bl	11244 <_start@@Base+0x45c>
   1199c:	vmov.f32	s15, s0
   119a0:	b	119a8 <_start@@Base+0xbc0>
   119a4:	vldr	s15, [pc, #8]	; 119b4 <_start@@Base+0xbcc>
   119a8:	vmov.f32	s0, s15
   119ac:	sub	sp, fp, #4
   119b0:	pop	{fp, pc}
   119b4:	andeq	r0, r0, r0
   119b8:	push	{fp, lr}
   119bc:	add	fp, sp, #4
   119c0:	sub	sp, sp, #8
   119c4:	str	r0, [fp, #-8]
   119c8:	ldr	r3, [fp, #-8]
   119cc:	cmp	r3, #0
   119d0:	beq	119ec <_start@@Base+0xc04>
   119d4:	ldr	r3, [fp, #-8]
   119d8:	add	r3, r3, #16
   119dc:	mov	r0, r3
   119e0:	bl	112ac <_start@@Base+0x4c4>
   119e4:	vmov.f64	d7, d0
   119e8:	b	119f0 <_start@@Base+0xc08>
   119ec:	vldr	d7, [pc, #12]	; 11a00 <_start@@Base+0xc18>
   119f0:	vmov.f64	d0, d7
   119f4:	sub	sp, fp, #4
   119f8:	pop	{fp, pc}
   119fc:	nop			; (mov r0, r0)
	...
   11a08:	push	{fp, lr}
   11a0c:	add	fp, sp, #4
   11a10:	sub	sp, sp, #8
   11a14:	str	r0, [fp, #-8]
   11a18:	ldr	r3, [fp, #-8]
   11a1c:	cmp	r3, #0
   11a20:	beq	11a3c <_start@@Base+0xc54>
   11a24:	ldr	r3, [fp, #-8]
   11a28:	add	r3, r3, #24
   11a2c:	mov	r0, r3
   11a30:	bl	11778 <_start@@Base+0x990>
   11a34:	mov	r3, r0
   11a38:	b	11a40 <_start@@Base+0xc58>
   11a3c:	mov	r3, #0
   11a40:	mov	r0, r3
   11a44:	sub	sp, fp, #4
   11a48:	pop	{fp, pc}
   11a4c:	push	{fp}		; (str fp, [sp, #-4]!)
   11a50:	add	fp, sp, #0
   11a54:	sub	sp, sp, #12
   11a58:	str	r0, [fp, #-8]
   11a5c:	ldr	r3, [fp, #-8]
   11a60:	cmp	r3, #0
   11a64:	beq	11a74 <_start@@Base+0xc8c>
   11a68:	ldr	r3, [fp, #-8]
   11a6c:	add	r3, r3, #26
   11a70:	b	11a78 <_start@@Base+0xc90>
   11a74:	mov	r3, #0
   11a78:	mov	r0, r3
   11a7c:	add	sp, fp, #0
   11a80:	pop	{fp}		; (ldr fp, [sp], #4)
   11a84:	bx	lr
   11a88:	push	{fp, lr}
   11a8c:	add	fp, sp, #4
   11a90:	sub	sp, sp, #16
   11a94:	str	r0, [fp, #-16]
   11a98:	ldr	r3, [pc, #80]	; 11af0 <_start@@Base+0xd08>
   11a9c:	add	r3, pc, r3
   11aa0:	str	r3, [fp, #-8]
   11aa4:	ldr	r3, [fp, #-16]
   11aa8:	cmp	r3, #0
   11aac:	beq	11ae0 <_start@@Base+0xcf8>
   11ab0:	ldr	r1, [fp, #-8]
   11ab4:	ldr	r0, [fp, #-16]
   11ab8:	bl	116b0 <_start@@Base+0x8c8>
   11abc:	mov	r3, r0
   11ac0:	cmp	r3, #0
   11ac4:	beq	11ae0 <_start@@Base+0xcf8>
   11ac8:	ldr	r0, [fp, #-16]
   11acc:	bl	11300 <_start@@Base+0x518>
   11ad0:	mov	r2, r0
   11ad4:	ldr	r3, [fp, #-16]
   11ad8:	add	r3, r3, r2
   11adc:	b	11ae4 <_start@@Base+0xcfc>
   11ae0:	mov	r3, #0
   11ae4:	mov	r0, r3
   11ae8:	sub	sp, fp, #4
   11aec:	pop	{fp, pc}
   11af0:	andeq	r5, r0, r4, ror sl
   11af4:	push	{fp, lr}
   11af8:	add	fp, sp, #4
   11afc:	sub	sp, sp, #16
   11b00:	str	r0, [fp, #-16]
   11b04:	mov	r3, #0
   11b08:	strh	r3, [fp, #-6]
   11b0c:	ldr	r3, [fp, #-16]
   11b10:	cmp	r3, #0
   11b14:	bne	11b38 <_start@@Base+0xd50>
   11b18:	ldr	r3, [pc, #176]	; 11bd0 <_start@@Base+0xde8>
   11b1c:	add	r3, pc, r3
   11b20:	mov	r2, #696	; 0x2b8
   11b24:	ldr	r1, [pc, #168]	; 11bd4 <_start@@Base+0xdec>
   11b28:	add	r1, pc, r1
   11b2c:	ldr	r0, [pc, #164]	; 11bd8 <_start@@Base+0xdf0>
   11b30:	add	r0, pc, r0
   11b34:	bl	10dd8 <__assert_fail@plt>
   11b38:	mov	r3, #0
   11b3c:	strh	r3, [fp, #-8]
   11b40:	ldr	r0, [fp, #-16]
   11b44:	bl	11354 <_start@@Base+0x56c>
   11b48:	mov	r3, r0
   11b4c:	rsb	r3, r3, #0
   11b50:	ldr	r2, [fp, #-16]
   11b54:	add	r3, r2, r3
   11b58:	str	r3, [fp, #-12]
   11b5c:	ldr	r0, [fp, #-12]
   11b60:	bl	113ac <_start@@Base+0x5c4>
   11b64:	mov	r3, r0
   11b68:	mov	r2, r3
   11b6c:	ldrh	r3, [fp, #-8]
   11b70:	add	r3, r3, #3
   11b74:	lsl	r3, r3, #1
   11b78:	cmp	r2, r3
   11b7c:	bcc	11ba4 <_start@@Base+0xdbc>
   11b80:	ldrh	r3, [fp, #-8]
   11b84:	add	r3, r3, #2
   11b88:	lsl	r3, r3, #1
   11b8c:	ldr	r2, [fp, #-12]
   11b90:	add	r3, r2, r3
   11b94:	mov	r0, r3
   11b98:	bl	113ac <_start@@Base+0x5c4>
   11b9c:	mov	r3, r0
   11ba0:	strh	r3, [fp, #-6]
   11ba4:	ldrh	r3, [fp, #-6]
   11ba8:	cmp	r3, #0
   11bac:	beq	11bc0 <_start@@Base+0xdd8>
   11bb0:	ldrh	r3, [fp, #-6]
   11bb4:	ldr	r2, [fp, #-16]
   11bb8:	add	r3, r2, r3
   11bbc:	b	11bc4 <_start@@Base+0xddc>
   11bc0:	mov	r3, #0
   11bc4:	mov	r0, r3
   11bc8:	sub	sp, fp, #4
   11bcc:	pop	{fp, pc}
   11bd0:	ldrdeq	r6, [r0], -r8
   11bd4:	andeq	r5, r0, ip, ror #18
   11bd8:	andeq	r5, r0, r8, ror #19
   11bdc:	push	{fp, lr}
   11be0:	add	fp, sp, #4
   11be4:	sub	sp, sp, #16
   11be8:	str	r0, [fp, #-16]
   11bec:	mov	r3, #0
   11bf0:	strh	r3, [fp, #-6]
   11bf4:	ldr	r3, [fp, #-16]
   11bf8:	cmp	r3, #0
   11bfc:	bne	11c20 <_start@@Base+0xe38>
   11c00:	ldr	r3, [pc, #188]	; 11cc4 <_start@@Base+0xedc>
   11c04:	add	r3, pc, r3
   11c08:	ldr	r2, [pc, #184]	; 11cc8 <_start@@Base+0xee0>
   11c0c:	ldr	r1, [pc, #184]	; 11ccc <_start@@Base+0xee4>
   11c10:	add	r1, pc, r1
   11c14:	ldr	r0, [pc, #180]	; 11cd0 <_start@@Base+0xee8>
   11c18:	add	r0, pc, r0
   11c1c:	bl	10dd8 <__assert_fail@plt>
   11c20:	mov	r3, #2
   11c24:	strh	r3, [fp, #-8]
   11c28:	ldr	r0, [fp, #-16]
   11c2c:	bl	11354 <_start@@Base+0x56c>
   11c30:	mov	r3, r0
   11c34:	rsb	r3, r3, #0
   11c38:	ldr	r2, [fp, #-16]
   11c3c:	add	r3, r2, r3
   11c40:	str	r3, [fp, #-12]
   11c44:	ldr	r0, [fp, #-12]
   11c48:	bl	113ac <_start@@Base+0x5c4>
   11c4c:	mov	r3, r0
   11c50:	mov	r2, r3
   11c54:	ldrh	r3, [fp, #-8]
   11c58:	add	r3, r3, #3
   11c5c:	lsl	r3, r3, #1
   11c60:	cmp	r2, r3
   11c64:	bcc	11c8c <_start@@Base+0xea4>
   11c68:	ldrh	r3, [fp, #-8]
   11c6c:	add	r3, r3, #2
   11c70:	lsl	r3, r3, #1
   11c74:	ldr	r2, [fp, #-12]
   11c78:	add	r3, r2, r3
   11c7c:	mov	r0, r3
   11c80:	bl	113ac <_start@@Base+0x5c4>
   11c84:	mov	r3, r0
   11c88:	strh	r3, [fp, #-6]
   11c8c:	ldrh	r3, [fp, #-6]
   11c90:	cmp	r3, #0
   11c94:	beq	11cb4 <_start@@Base+0xecc>
   11c98:	ldrh	r3, [fp, #-6]
   11c9c:	ldr	r2, [fp, #-16]
   11ca0:	add	r3, r2, r3
   11ca4:	mov	r0, r3
   11ca8:	bl	11124 <_start@@Base+0x33c>
   11cac:	mov	r3, r0
   11cb0:	b	11cb8 <_start@@Base+0xed0>
   11cb4:	mov	r3, #100	; 0x64
   11cb8:	mov	r0, r3
   11cbc:	sub	sp, fp, #4
   11cc0:	pop	{fp, pc}
   11cc4:	ldrdeq	r5, [r0], -r4
   11cc8:			; <UNDEFINED> instruction: 0x000002b9
   11ccc:	andeq	r5, r0, r4, lsl #17
   11cd0:	andeq	r5, r0, r0, lsl #18
   11cd4:	push	{fp, lr}
   11cd8:	add	fp, sp, #4
   11cdc:	sub	sp, sp, #24
   11ce0:	str	r0, [fp, #-24]	; 0xffffffe8
   11ce4:	mov	r3, #0
   11ce8:	strh	r3, [fp, #-6]
   11cec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11cf0:	cmp	r3, #0
   11cf4:	bne	11d18 <_start@@Base+0xf30>
   11cf8:	ldr	r3, [pc, #232]	; 11de8 <_start@@Base+0x1000>
   11cfc:	add	r3, pc, r3
   11d00:	ldr	r2, [pc, #228]	; 11dec <_start@@Base+0x1004>
   11d04:	ldr	r1, [pc, #228]	; 11df0 <_start@@Base+0x1008>
   11d08:	add	r1, pc, r1
   11d0c:	ldr	r0, [pc, #224]	; 11df4 <_start@@Base+0x100c>
   11d10:	add	r0, pc, r0
   11d14:	bl	10dd8 <__assert_fail@plt>
   11d18:	mov	r3, #3
   11d1c:	strh	r3, [fp, #-8]
   11d20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11d24:	bl	11354 <_start@@Base+0x56c>
   11d28:	mov	r3, r0
   11d2c:	rsb	r3, r3, #0
   11d30:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11d34:	add	r3, r2, r3
   11d38:	str	r3, [fp, #-12]
   11d3c:	ldr	r0, [fp, #-12]
   11d40:	bl	113ac <_start@@Base+0x5c4>
   11d44:	mov	r3, r0
   11d48:	mov	r2, r3
   11d4c:	ldrh	r3, [fp, #-8]
   11d50:	add	r3, r3, #3
   11d54:	lsl	r3, r3, #1
   11d58:	cmp	r2, r3
   11d5c:	bcc	11d84 <_start@@Base+0xf9c>
   11d60:	ldrh	r3, [fp, #-8]
   11d64:	add	r3, r3, #2
   11d68:	lsl	r3, r3, #1
   11d6c:	ldr	r2, [fp, #-12]
   11d70:	add	r3, r2, r3
   11d74:	mov	r0, r3
   11d78:	bl	113ac <_start@@Base+0x5c4>
   11d7c:	mov	r3, r0
   11d80:	strh	r3, [fp, #-6]
   11d84:	ldrh	r3, [fp, #-6]
   11d88:	cmp	r3, #0
   11d8c:	beq	11dbc <_start@@Base+0xfd4>
   11d90:	ldrh	r3, [fp, #-6]
   11d94:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11d98:	add	r3, r2, r3
   11d9c:	str	r3, [fp, #-16]
   11da0:	ldr	r0, [fp, #-16]
   11da4:	bl	11300 <_start@@Base+0x518>
   11da8:	mov	r3, r0
   11dac:	add	r3, r3, #4
   11db0:	ldr	r2, [fp, #-16]
   11db4:	add	r3, r2, r3
   11db8:	b	11ddc <_start@@Base+0xff4>
   11dbc:	ldr	r3, [pc, #52]	; 11df8 <_start@@Base+0x1010>
   11dc0:	add	r3, pc, r3
   11dc4:	ldr	r2, [pc, #32]	; 11dec <_start@@Base+0x1004>
   11dc8:	ldr	r1, [pc, #44]	; 11dfc <_start@@Base+0x1014>
   11dcc:	add	r1, pc, r1
   11dd0:	ldr	r0, [pc, #40]	; 11e00 <_start@@Base+0x1018>
   11dd4:	add	r0, pc, r0
   11dd8:	bl	10dd8 <__assert_fail@plt>
   11ddc:	mov	r0, r3
   11de0:	sub	sp, fp, #4
   11de4:	pop	{fp, pc}
   11de8:	ldrdeq	r5, [r0], -ip
   11dec:			; <UNDEFINED> instruction: 0x000002bb
   11df0:	andeq	r5, r0, ip, lsl #15
   11df4:	andeq	r5, r0, r8, lsl #16
   11df8:	andeq	r5, r0, r8, lsl pc
   11dfc:	andeq	r5, r0, r8, asr #13
   11e00:	andeq	r5, r0, ip, ror #14
   11e04:	push	{fp, lr}
   11e08:	add	fp, sp, #4
   11e0c:	sub	sp, sp, #24
   11e10:	str	r0, [fp, #-24]	; 0xffffffe8
   11e14:	mov	r3, #0
   11e18:	strh	r3, [fp, #-6]
   11e1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e20:	cmp	r3, #0
   11e24:	bne	11e48 <_start@@Base+0x1060>
   11e28:	ldr	r3, [pc, #204]	; 11efc <_start@@Base+0x1114>
   11e2c:	add	r3, pc, r3
   11e30:	ldr	r2, [pc, #200]	; 11f00 <_start@@Base+0x1118>
   11e34:	ldr	r1, [pc, #200]	; 11f04 <_start@@Base+0x111c>
   11e38:	add	r1, pc, r1
   11e3c:	ldr	r0, [pc, #196]	; 11f08 <_start@@Base+0x1120>
   11e40:	add	r0, pc, r0
   11e44:	bl	10dd8 <__assert_fail@plt>
   11e48:	mov	r3, #5
   11e4c:	strh	r3, [fp, #-8]
   11e50:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11e54:	bl	11354 <_start@@Base+0x56c>
   11e58:	mov	r3, r0
   11e5c:	rsb	r3, r3, #0
   11e60:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11e64:	add	r3, r2, r3
   11e68:	str	r3, [fp, #-12]
   11e6c:	ldr	r0, [fp, #-12]
   11e70:	bl	113ac <_start@@Base+0x5c4>
   11e74:	mov	r3, r0
   11e78:	mov	r2, r3
   11e7c:	ldrh	r3, [fp, #-8]
   11e80:	add	r3, r3, #3
   11e84:	lsl	r3, r3, #1
   11e88:	cmp	r2, r3
   11e8c:	bcc	11eb4 <_start@@Base+0x10cc>
   11e90:	ldrh	r3, [fp, #-8]
   11e94:	add	r3, r3, #2
   11e98:	lsl	r3, r3, #1
   11e9c:	ldr	r2, [fp, #-12]
   11ea0:	add	r3, r2, r3
   11ea4:	mov	r0, r3
   11ea8:	bl	113ac <_start@@Base+0x5c4>
   11eac:	mov	r3, r0
   11eb0:	strh	r3, [fp, #-6]
   11eb4:	ldrh	r3, [fp, #-6]
   11eb8:	cmp	r3, #0
   11ebc:	beq	11eec <_start@@Base+0x1104>
   11ec0:	ldrh	r3, [fp, #-6]
   11ec4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11ec8:	add	r3, r2, r3
   11ecc:	str	r3, [fp, #-16]
   11ed0:	ldr	r0, [fp, #-16]
   11ed4:	bl	11300 <_start@@Base+0x518>
   11ed8:	mov	r3, r0
   11edc:	add	r3, r3, #4
   11ee0:	ldr	r2, [fp, #-16]
   11ee4:	add	r3, r2, r3
   11ee8:	b	11ef0 <_start@@Base+0x1108>
   11eec:	mov	r3, #0
   11ef0:	mov	r0, r3
   11ef4:	sub	sp, fp, #4
   11ef8:	pop	{fp, pc}
   11efc:	andeq	r5, r0, r4, ror #27
   11f00:	andeq	r0, r0, r2, asr #5
   11f04:	andeq	r5, r0, ip, asr r6
   11f08:	ldrdeq	r5, [r0], -r8
   11f0c:	push	{fp, lr}
   11f10:	add	fp, sp, #4
   11f14:	sub	sp, sp, #24
   11f18:	str	r0, [fp, #-24]	; 0xffffffe8
   11f1c:	mov	r3, #0
   11f20:	strh	r3, [fp, #-6]
   11f24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f28:	cmp	r3, #0
   11f2c:	bne	11f50 <_start@@Base+0x1168>
   11f30:	ldr	r3, [pc, #204]	; 12004 <_start@@Base+0x121c>
   11f34:	add	r3, pc, r3
   11f38:	mov	r2, #712	; 0x2c8
   11f3c:	ldr	r1, [pc, #196]	; 12008 <_start@@Base+0x1220>
   11f40:	add	r1, pc, r1
   11f44:	ldr	r0, [pc, #192]	; 1200c <_start@@Base+0x1224>
   11f48:	add	r0, pc, r0
   11f4c:	bl	10dd8 <__assert_fail@plt>
   11f50:	mov	r3, #10
   11f54:	strh	r3, [fp, #-8]
   11f58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11f5c:	bl	11354 <_start@@Base+0x56c>
   11f60:	mov	r3, r0
   11f64:	rsb	r3, r3, #0
   11f68:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11f6c:	add	r3, r2, r3
   11f70:	str	r3, [fp, #-12]
   11f74:	ldr	r0, [fp, #-12]
   11f78:	bl	113ac <_start@@Base+0x5c4>
   11f7c:	mov	r3, r0
   11f80:	mov	r2, r3
   11f84:	ldrh	r3, [fp, #-8]
   11f88:	add	r3, r3, #3
   11f8c:	lsl	r3, r3, #1
   11f90:	cmp	r2, r3
   11f94:	bcc	11fbc <_start@@Base+0x11d4>
   11f98:	ldrh	r3, [fp, #-8]
   11f9c:	add	r3, r3, #2
   11fa0:	lsl	r3, r3, #1
   11fa4:	ldr	r2, [fp, #-12]
   11fa8:	add	r3, r2, r3
   11fac:	mov	r0, r3
   11fb0:	bl	113ac <_start@@Base+0x5c4>
   11fb4:	mov	r3, r0
   11fb8:	strh	r3, [fp, #-6]
   11fbc:	ldrh	r3, [fp, #-6]
   11fc0:	cmp	r3, #0
   11fc4:	beq	11ff4 <_start@@Base+0x120c>
   11fc8:	ldrh	r3, [fp, #-6]
   11fcc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11fd0:	add	r3, r2, r3
   11fd4:	str	r3, [fp, #-16]
   11fd8:	ldr	r0, [fp, #-16]
   11fdc:	bl	11300 <_start@@Base+0x518>
   11fe0:	mov	r3, r0
   11fe4:	add	r3, r3, #4
   11fe8:	ldr	r2, [fp, #-16]
   11fec:	add	r3, r2, r3
   11ff0:	b	11ff8 <_start@@Base+0x1210>
   11ff4:	mov	r3, #0
   11ff8:	mov	r0, r3
   11ffc:	sub	sp, fp, #4
   12000:	pop	{fp, pc}
   12004:	andeq	r5, r0, ip, lsl sp
   12008:	andeq	r5, r0, r4, asr r5
   1200c:	ldrdeq	r5, [r0], -r0
   12010:	push	{fp, lr}
   12014:	add	fp, sp, #4
   12018:	sub	sp, sp, #16
   1201c:	str	r0, [fp, #-16]
   12020:	mov	r3, #0
   12024:	strh	r3, [fp, #-6]
   12028:	ldr	r3, [fp, #-16]
   1202c:	cmp	r3, #0
   12030:	bne	12054 <_start@@Base+0x126c>
   12034:	ldr	r3, [pc, #188]	; 120f8 <_start@@Base+0x1310>
   12038:	add	r3, pc, r3
   1203c:	ldr	r2, [pc, #184]	; 120fc <_start@@Base+0x1314>
   12040:	ldr	r1, [pc, #184]	; 12100 <_start@@Base+0x1318>
   12044:	add	r1, pc, r1
   12048:	ldr	r0, [pc, #180]	; 12104 <_start@@Base+0x131c>
   1204c:	add	r0, pc, r0
   12050:	bl	10dd8 <__assert_fail@plt>
   12054:	mov	r3, #7
   12058:	strh	r3, [fp, #-8]
   1205c:	ldr	r0, [fp, #-16]
   12060:	bl	11354 <_start@@Base+0x56c>
   12064:	mov	r3, r0
   12068:	rsb	r3, r3, #0
   1206c:	ldr	r2, [fp, #-16]
   12070:	add	r3, r2, r3
   12074:	str	r3, [fp, #-12]
   12078:	ldr	r0, [fp, #-12]
   1207c:	bl	113ac <_start@@Base+0x5c4>
   12080:	mov	r3, r0
   12084:	mov	r2, r3
   12088:	ldrh	r3, [fp, #-8]
   1208c:	add	r3, r3, #3
   12090:	lsl	r3, r3, #1
   12094:	cmp	r2, r3
   12098:	bcc	120c0 <_start@@Base+0x12d8>
   1209c:	ldrh	r3, [fp, #-8]
   120a0:	add	r3, r3, #2
   120a4:	lsl	r3, r3, #1
   120a8:	ldr	r2, [fp, #-12]
   120ac:	add	r3, r2, r3
   120b0:	mov	r0, r3
   120b4:	bl	113ac <_start@@Base+0x5c4>
   120b8:	mov	r3, r0
   120bc:	strh	r3, [fp, #-6]
   120c0:	ldrh	r3, [fp, #-6]
   120c4:	cmp	r3, #0
   120c8:	beq	120e8 <_start@@Base+0x1300>
   120cc:	ldrh	r3, [fp, #-6]
   120d0:	ldr	r2, [fp, #-16]
   120d4:	add	r3, r2, r3
   120d8:	mov	r0, r3
   120dc:	bl	11404 <_start@@Base+0x61c>
   120e0:	mov	r3, r0
   120e4:	b	120ec <_start@@Base+0x1304>
   120e8:	mov	r3, #0
   120ec:	mov	r0, r3
   120f0:	sub	sp, fp, #4
   120f4:	pop	{fp, pc}
   120f8:	andeq	r5, r0, r0, ror #24
   120fc:	andeq	r0, r0, sp, asr #5
   12100:	andeq	r5, r0, r0, asr r4
   12104:	andeq	r5, r0, ip, asr #9
   12108:	push	{fp, lr}
   1210c:	add	fp, sp, #4
   12110:	sub	sp, sp, #24
   12114:	str	r0, [fp, #-24]	; 0xffffffe8
   12118:	mov	r3, #0
   1211c:	strh	r3, [fp, #-6]
   12120:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12124:	cmp	r3, #0
   12128:	bne	1214c <_start@@Base+0x1364>
   1212c:	ldr	r3, [pc, #200]	; 121fc <_start@@Base+0x1414>
   12130:	add	r3, pc, r3
   12134:	ldr	r2, [pc, #196]	; 12200 <_start@@Base+0x1418>
   12138:	ldr	r1, [pc, #196]	; 12204 <_start@@Base+0x141c>
   1213c:	add	r1, pc, r1
   12140:	ldr	r0, [pc, #192]	; 12208 <_start@@Base+0x1420>
   12144:	add	r0, pc, r0
   12148:	bl	10dd8 <__assert_fail@plt>
   1214c:	mov	r3, #8
   12150:	strh	r3, [fp, #-8]
   12154:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12158:	bl	11354 <_start@@Base+0x56c>
   1215c:	mov	r3, r0
   12160:	rsb	r3, r3, #0
   12164:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12168:	add	r3, r2, r3
   1216c:	str	r3, [fp, #-12]
   12170:	ldr	r0, [fp, #-12]
   12174:	bl	113ac <_start@@Base+0x5c4>
   12178:	mov	r3, r0
   1217c:	mov	r2, r3
   12180:	ldrh	r3, [fp, #-8]
   12184:	add	r3, r3, #3
   12188:	lsl	r3, r3, #1
   1218c:	cmp	r2, r3
   12190:	bcc	121b8 <_start@@Base+0x13d0>
   12194:	ldrh	r3, [fp, #-8]
   12198:	add	r3, r3, #2
   1219c:	lsl	r3, r3, #1
   121a0:	ldr	r2, [fp, #-12]
   121a4:	add	r3, r2, r3
   121a8:	mov	r0, r3
   121ac:	bl	113ac <_start@@Base+0x5c4>
   121b0:	mov	r3, r0
   121b4:	strh	r3, [fp, #-6]
   121b8:	ldrh	r3, [fp, #-6]
   121bc:	cmp	r3, #0
   121c0:	beq	121ec <_start@@Base+0x1404>
   121c4:	ldrh	r3, [fp, #-6]
   121c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   121cc:	add	r3, r2, r3
   121d0:	str	r3, [fp, #-16]
   121d4:	ldr	r0, [fp, #-16]
   121d8:	bl	11300 <_start@@Base+0x518>
   121dc:	mov	r2, r0
   121e0:	ldr	r3, [fp, #-16]
   121e4:	add	r3, r3, r2
   121e8:	b	121f0 <_start@@Base+0x1408>
   121ec:	mov	r3, #0
   121f0:	mov	r0, r3
   121f4:	sub	sp, fp, #4
   121f8:	pop	{fp, pc}
   121fc:	andeq	r5, r0, ip, lsl #23
   12200:	andeq	r0, r0, sp, asr #5
   12204:	andeq	r5, r0, r8, asr r3
   12208:	ldrdeq	r5, [r0], -r4
   1220c:	push	{fp, lr}
   12210:	add	fp, sp, #4
   12214:	sub	sp, sp, #24
   12218:	str	r0, [fp, #-24]	; 0xffffffe8
   1221c:	mov	r3, #0
   12220:	strh	r3, [fp, #-6]
   12224:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12228:	cmp	r3, #0
   1222c:	bne	12250 <_start@@Base+0x1468>
   12230:	ldr	r3, [pc, #204]	; 12304 <_start@@Base+0x151c>
   12234:	add	r3, pc, r3
   12238:	ldr	r2, [pc, #200]	; 12308 <_start@@Base+0x1520>
   1223c:	ldr	r1, [pc, #200]	; 1230c <_start@@Base+0x1524>
   12240:	add	r1, pc, r1
   12244:	ldr	r0, [pc, #196]	; 12310 <_start@@Base+0x1528>
   12248:	add	r0, pc, r0
   1224c:	bl	10dd8 <__assert_fail@plt>
   12250:	mov	r3, #9
   12254:	strh	r3, [fp, #-8]
   12258:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1225c:	bl	11354 <_start@@Base+0x56c>
   12260:	mov	r3, r0
   12264:	rsb	r3, r3, #0
   12268:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1226c:	add	r3, r2, r3
   12270:	str	r3, [fp, #-12]
   12274:	ldr	r0, [fp, #-12]
   12278:	bl	113ac <_start@@Base+0x5c4>
   1227c:	mov	r3, r0
   12280:	mov	r2, r3
   12284:	ldrh	r3, [fp, #-8]
   12288:	add	r3, r3, #3
   1228c:	lsl	r3, r3, #1
   12290:	cmp	r2, r3
   12294:	bcc	122bc <_start@@Base+0x14d4>
   12298:	ldrh	r3, [fp, #-8]
   1229c:	add	r3, r3, #2
   122a0:	lsl	r3, r3, #1
   122a4:	ldr	r2, [fp, #-12]
   122a8:	add	r3, r2, r3
   122ac:	mov	r0, r3
   122b0:	bl	113ac <_start@@Base+0x5c4>
   122b4:	mov	r3, r0
   122b8:	strh	r3, [fp, #-6]
   122bc:	ldrh	r3, [fp, #-6]
   122c0:	cmp	r3, #0
   122c4:	beq	122f4 <_start@@Base+0x150c>
   122c8:	ldrh	r3, [fp, #-6]
   122cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   122d0:	add	r3, r2, r3
   122d4:	str	r3, [fp, #-16]
   122d8:	ldr	r0, [fp, #-16]
   122dc:	bl	11300 <_start@@Base+0x518>
   122e0:	mov	r3, r0
   122e4:	add	r3, r3, #4
   122e8:	ldr	r2, [fp, #-16]
   122ec:	add	r3, r2, r3
   122f0:	b	122f8 <_start@@Base+0x1510>
   122f4:	mov	r3, #0
   122f8:	mov	r0, r3
   122fc:	sub	sp, fp, #4
   12300:	pop	{fp, pc}
   12304:	andeq	r5, r0, r0, asr #21
   12308:	andeq	r0, r0, lr, asr #5
   1230c:	andeq	r5, r0, r4, asr r2
   12310:	ldrdeq	r5, [r0], -r0
   12314:	push	{fp, lr}
   12318:	add	fp, sp, #4
   1231c:	sub	sp, sp, #16
   12320:	str	r0, [fp, #-16]
   12324:	mov	r3, #0
   12328:	strh	r3, [fp, #-6]
   1232c:	ldr	r3, [fp, #-16]
   12330:	cmp	r3, #0
   12334:	bne	12358 <_start@@Base+0x1570>
   12338:	ldr	r3, [pc, #188]	; 123fc <_start@@Base+0x1614>
   1233c:	add	r3, pc, r3
   12340:	mov	r2, #724	; 0x2d4
   12344:	ldr	r1, [pc, #180]	; 12400 <_start@@Base+0x1618>
   12348:	add	r1, pc, r1
   1234c:	ldr	r0, [pc, #176]	; 12404 <_start@@Base+0x161c>
   12350:	add	r0, pc, r0
   12354:	bl	10dd8 <__assert_fail@plt>
   12358:	mov	r3, #16
   1235c:	strh	r3, [fp, #-8]
   12360:	ldr	r0, [fp, #-16]
   12364:	bl	11354 <_start@@Base+0x56c>
   12368:	mov	r3, r0
   1236c:	rsb	r3, r3, #0
   12370:	ldr	r2, [fp, #-16]
   12374:	add	r3, r2, r3
   12378:	str	r3, [fp, #-12]
   1237c:	ldr	r0, [fp, #-12]
   12380:	bl	113ac <_start@@Base+0x5c4>
   12384:	mov	r3, r0
   12388:	mov	r2, r3
   1238c:	ldrh	r3, [fp, #-8]
   12390:	add	r3, r3, #3
   12394:	lsl	r3, r3, #1
   12398:	cmp	r2, r3
   1239c:	bcc	123c4 <_start@@Base+0x15dc>
   123a0:	ldrh	r3, [fp, #-8]
   123a4:	add	r3, r3, #2
   123a8:	lsl	r3, r3, #1
   123ac:	ldr	r2, [fp, #-12]
   123b0:	add	r3, r2, r3
   123b4:	mov	r0, r3
   123b8:	bl	113ac <_start@@Base+0x5c4>
   123bc:	mov	r3, r0
   123c0:	strh	r3, [fp, #-6]
   123c4:	ldrh	r3, [fp, #-6]
   123c8:	cmp	r3, #0
   123cc:	beq	123ec <_start@@Base+0x1604>
   123d0:	ldrh	r3, [fp, #-6]
   123d4:	ldr	r2, [fp, #-16]
   123d8:	add	r3, r2, r3
   123dc:	mov	r0, r3
   123e0:	bl	11178 <_start@@Base+0x390>
   123e4:	mov	r3, r0
   123e8:	b	123f0 <_start@@Base+0x1608>
   123ec:	mov	r3, #0
   123f0:	mov	r0, r3
   123f4:	sub	sp, fp, #4
   123f8:	pop	{fp, pc}
   123fc:	strdeq	r5, [r0], -r4
   12400:	andeq	r5, r0, ip, asr #2
   12404:	andeq	r5, r0, r8, asr #3
   12408:	push	{fp, lr}
   1240c:	add	fp, sp, #4
   12410:	sub	sp, sp, #16
   12414:	str	r0, [fp, #-16]
   12418:	mov	r3, #0
   1241c:	strh	r3, [fp, #-6]
   12420:	ldr	r3, [fp, #-16]
   12424:	cmp	r3, #0
   12428:	bne	1244c <_start@@Base+0x1664>
   1242c:	ldr	r3, [pc, #188]	; 124f0 <_start@@Base+0x1708>
   12430:	add	r3, pc, r3
   12434:	ldr	r2, [pc, #184]	; 124f4 <_start@@Base+0x170c>
   12438:	ldr	r1, [pc, #184]	; 124f8 <_start@@Base+0x1710>
   1243c:	add	r1, pc, r1
   12440:	ldr	r0, [pc, #180]	; 124fc <_start@@Base+0x1714>
   12444:	add	r0, pc, r0
   12448:	bl	10dd8 <__assert_fail@plt>
   1244c:	mov	r3, #17
   12450:	strh	r3, [fp, #-8]
   12454:	ldr	r0, [fp, #-16]
   12458:	bl	11354 <_start@@Base+0x56c>
   1245c:	mov	r3, r0
   12460:	rsb	r3, r3, #0
   12464:	ldr	r2, [fp, #-16]
   12468:	add	r3, r2, r3
   1246c:	str	r3, [fp, #-12]
   12470:	ldr	r0, [fp, #-12]
   12474:	bl	113ac <_start@@Base+0x5c4>
   12478:	mov	r3, r0
   1247c:	mov	r2, r3
   12480:	ldrh	r3, [fp, #-8]
   12484:	add	r3, r3, #3
   12488:	lsl	r3, r3, #1
   1248c:	cmp	r2, r3
   12490:	bcc	124b8 <_start@@Base+0x16d0>
   12494:	ldrh	r3, [fp, #-8]
   12498:	add	r3, r3, #2
   1249c:	lsl	r3, r3, #1
   124a0:	ldr	r2, [fp, #-12]
   124a4:	add	r3, r2, r3
   124a8:	mov	r0, r3
   124ac:	bl	113ac <_start@@Base+0x5c4>
   124b0:	mov	r3, r0
   124b4:	strh	r3, [fp, #-6]
   124b8:	ldrh	r3, [fp, #-6]
   124bc:	cmp	r3, #0
   124c0:	beq	124e0 <_start@@Base+0x16f8>
   124c4:	ldrh	r3, [fp, #-6]
   124c8:	ldr	r2, [fp, #-16]
   124cc:	add	r3, r2, r3
   124d0:	mov	r0, r3
   124d4:	bl	11010 <_start@@Base+0x228>
   124d8:	mov	r3, r0
   124dc:	b	124e4 <_start@@Base+0x16fc>
   124e0:	mov	r3, #0
   124e4:	mov	r0, r3
   124e8:	sub	sp, fp, #4
   124ec:	pop	{fp, pc}
   124f0:	andeq	r5, r0, r8, lsr #18
   124f4:	ldrdeq	r0, [r0], -r5
   124f8:	andeq	r5, r0, r8, asr r0
   124fc:	ldrdeq	r5, [r0], -r4
   12500:	push	{fp, lr}
   12504:	add	fp, sp, #4
   12508:	sub	sp, sp, #16
   1250c:	str	r0, [fp, #-16]
   12510:	mov	r3, #0
   12514:	strh	r3, [fp, #-6]
   12518:	ldr	r3, [fp, #-16]
   1251c:	cmp	r3, #0
   12520:	bne	12544 <_start@@Base+0x175c>
   12524:	ldr	r3, [pc, #200]	; 125f4 <_start@@Base+0x180c>
   12528:	add	r3, pc, r3
   1252c:	ldr	r2, [pc, #196]	; 125f8 <_start@@Base+0x1810>
   12530:	ldr	r1, [pc, #196]	; 125fc <_start@@Base+0x1814>
   12534:	add	r1, pc, r1
   12538:	ldr	r0, [pc, #192]	; 12600 <_start@@Base+0x1818>
   1253c:	add	r0, pc, r0
   12540:	bl	10dd8 <__assert_fail@plt>
   12544:	mov	r3, #18
   12548:	strh	r3, [fp, #-8]
   1254c:	ldr	r0, [fp, #-16]
   12550:	bl	11354 <_start@@Base+0x56c>
   12554:	mov	r3, r0
   12558:	rsb	r3, r3, #0
   1255c:	ldr	r2, [fp, #-16]
   12560:	add	r3, r2, r3
   12564:	str	r3, [fp, #-12]
   12568:	ldr	r0, [fp, #-12]
   1256c:	bl	113ac <_start@@Base+0x5c4>
   12570:	mov	r3, r0
   12574:	mov	r2, r3
   12578:	ldrh	r3, [fp, #-8]
   1257c:	add	r3, r3, #3
   12580:	lsl	r3, r3, #1
   12584:	cmp	r2, r3
   12588:	bcc	125b0 <_start@@Base+0x17c8>
   1258c:	ldrh	r3, [fp, #-8]
   12590:	add	r3, r3, #2
   12594:	lsl	r3, r3, #1
   12598:	ldr	r2, [fp, #-12]
   1259c:	add	r3, r2, r3
   125a0:	mov	r0, r3
   125a4:	bl	113ac <_start@@Base+0x5c4>
   125a8:	mov	r3, r0
   125ac:	strh	r3, [fp, #-6]
   125b0:	ldrh	r3, [fp, #-6]
   125b4:	cmp	r3, #0
   125b8:	beq	125dc <_start@@Base+0x17f4>
   125bc:	ldrh	r3, [fp, #-6]
   125c0:	ldr	r2, [fp, #-16]
   125c4:	add	r3, r2, r3
   125c8:	mov	r0, r3
   125cc:	bl	111d0 <_start@@Base+0x3e8>
   125d0:	mov	r2, r0
   125d4:	mov	r3, r1
   125d8:	b	125e4 <_start@@Base+0x17fc>
   125dc:	mov	r2, #0
   125e0:	mov	r3, #0
   125e4:	mov	r0, r2
   125e8:	mov	r1, r3
   125ec:	sub	sp, fp, #4
   125f0:	pop	{fp, pc}
   125f4:	andeq	r5, r0, r8, asr r8
   125f8:	ldrdeq	r0, [r0], -r6
   125fc:	andeq	r4, r0, r0, ror #30
   12600:	ldrdeq	r4, [r0], -ip
   12604:	push	{fp, lr}
   12608:	add	fp, sp, #4
   1260c:	sub	sp, sp, #16
   12610:	str	r0, [fp, #-16]
   12614:	mov	r3, #0
   12618:	strh	r3, [fp, #-6]
   1261c:	ldr	r3, [fp, #-16]
   12620:	cmp	r3, #0
   12624:	bne	12648 <_start@@Base+0x1860>
   12628:	ldr	r3, [pc, #200]	; 126f8 <_start@@Base+0x1910>
   1262c:	add	r3, pc, r3
   12630:	ldr	r2, [pc, #196]	; 126fc <_start@@Base+0x1914>
   12634:	ldr	r1, [pc, #196]	; 12700 <_start@@Base+0x1918>
   12638:	add	r1, pc, r1
   1263c:	ldr	r0, [pc, #192]	; 12704 <_start@@Base+0x191c>
   12640:	add	r0, pc, r0
   12644:	bl	10dd8 <__assert_fail@plt>
   12648:	mov	r3, #19
   1264c:	strh	r3, [fp, #-8]
   12650:	ldr	r0, [fp, #-16]
   12654:	bl	11354 <_start@@Base+0x56c>
   12658:	mov	r3, r0
   1265c:	rsb	r3, r3, #0
   12660:	ldr	r2, [fp, #-16]
   12664:	add	r3, r2, r3
   12668:	str	r3, [fp, #-12]
   1266c:	ldr	r0, [fp, #-12]
   12670:	bl	113ac <_start@@Base+0x5c4>
   12674:	mov	r3, r0
   12678:	mov	r2, r3
   1267c:	ldrh	r3, [fp, #-8]
   12680:	add	r3, r3, #3
   12684:	lsl	r3, r3, #1
   12688:	cmp	r2, r3
   1268c:	bcc	126b4 <_start@@Base+0x18cc>
   12690:	ldrh	r3, [fp, #-8]
   12694:	add	r3, r3, #2
   12698:	lsl	r3, r3, #1
   1269c:	ldr	r2, [fp, #-12]
   126a0:	add	r3, r2, r3
   126a4:	mov	r0, r3
   126a8:	bl	113ac <_start@@Base+0x5c4>
   126ac:	mov	r3, r0
   126b0:	strh	r3, [fp, #-6]
   126b4:	ldrh	r3, [fp, #-6]
   126b8:	cmp	r3, #0
   126bc:	beq	126e0 <_start@@Base+0x18f8>
   126c0:	ldrh	r3, [fp, #-6]
   126c4:	ldr	r2, [fp, #-16]
   126c8:	add	r3, r2, r3
   126cc:	mov	r0, r3
   126d0:	bl	11068 <_start@@Base+0x280>
   126d4:	mov	r2, r0
   126d8:	mov	r3, r1
   126dc:	b	126e8 <_start@@Base+0x1900>
   126e0:	mov	r2, #0
   126e4:	mov	r3, #0
   126e8:	mov	r0, r2
   126ec:	mov	r1, r3
   126f0:	sub	sp, fp, #4
   126f4:	pop	{fp, pc}
   126f8:	andeq	r5, r0, ip, ror r7
   126fc:	ldrdeq	r0, [r0], -r7
   12700:	andeq	r4, r0, ip, asr lr
   12704:	ldrdeq	r4, [r0], -r8
   12708:	push	{fp, lr}
   1270c:	add	fp, sp, #4
   12710:	sub	sp, sp, #16
   12714:	str	r0, [fp, #-16]
   12718:	mov	r3, #0
   1271c:	strh	r3, [fp, #-6]
   12720:	ldr	r3, [fp, #-16]
   12724:	cmp	r3, #0
   12728:	bne	1274c <_start@@Base+0x1964>
   1272c:	ldr	r3, [pc, #188]	; 127f0 <_start@@Base+0x1a08>
   12730:	add	r3, pc, r3
   12734:	mov	r2, #728	; 0x2d8
   12738:	ldr	r1, [pc, #180]	; 127f4 <_start@@Base+0x1a0c>
   1273c:	add	r1, pc, r1
   12740:	ldr	r0, [pc, #176]	; 127f8 <_start@@Base+0x1a10>
   12744:	add	r0, pc, r0
   12748:	bl	10dd8 <__assert_fail@plt>
   1274c:	mov	r3, #20
   12750:	strh	r3, [fp, #-8]
   12754:	ldr	r0, [fp, #-16]
   12758:	bl	11354 <_start@@Base+0x56c>
   1275c:	mov	r3, r0
   12760:	rsb	r3, r3, #0
   12764:	ldr	r2, [fp, #-16]
   12768:	add	r3, r2, r3
   1276c:	str	r3, [fp, #-12]
   12770:	ldr	r0, [fp, #-12]
   12774:	bl	113ac <_start@@Base+0x5c4>
   12778:	mov	r3, r0
   1277c:	mov	r2, r3
   12780:	ldrh	r3, [fp, #-8]
   12784:	add	r3, r3, #3
   12788:	lsl	r3, r3, #1
   1278c:	cmp	r2, r3
   12790:	bcc	127b8 <_start@@Base+0x19d0>
   12794:	ldrh	r3, [fp, #-8]
   12798:	add	r3, r3, #2
   1279c:	lsl	r3, r3, #1
   127a0:	ldr	r2, [fp, #-12]
   127a4:	add	r3, r2, r3
   127a8:	mov	r0, r3
   127ac:	bl	113ac <_start@@Base+0x5c4>
   127b0:	mov	r3, r0
   127b4:	strh	r3, [fp, #-6]
   127b8:	ldrh	r3, [fp, #-6]
   127bc:	cmp	r3, #0
   127c0:	beq	127e0 <_start@@Base+0x19f8>
   127c4:	ldrh	r3, [fp, #-6]
   127c8:	ldr	r2, [fp, #-16]
   127cc:	add	r3, r2, r3
   127d0:	mov	r0, r3
   127d4:	bl	11178 <_start@@Base+0x390>
   127d8:	mov	r3, r0
   127dc:	b	127e4 <_start@@Base+0x19fc>
   127e0:	mov	r3, #0
   127e4:	mov	r0, r3
   127e8:	sub	sp, fp, #4
   127ec:	pop	{fp, pc}
   127f0:	andeq	r5, r0, r0, lsr #13
   127f4:	andeq	r4, r0, r8, asr sp
   127f8:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   127fc:	push	{fp, lr}
   12800:	add	fp, sp, #4
   12804:	sub	sp, sp, #16
   12808:	str	r0, [fp, #-16]
   1280c:	mov	r3, #0
   12810:	strh	r3, [fp, #-6]
   12814:	ldr	r3, [fp, #-16]
   12818:	cmp	r3, #0
   1281c:	bne	12840 <_start@@Base+0x1a58>
   12820:	ldr	r3, [pc, #188]	; 128e4 <_start@@Base+0x1afc>
   12824:	add	r3, pc, r3
   12828:	ldr	r2, [pc, #184]	; 128e8 <_start@@Base+0x1b00>
   1282c:	ldr	r1, [pc, #184]	; 128ec <_start@@Base+0x1b04>
   12830:	add	r1, pc, r1
   12834:	ldr	r0, [pc, #180]	; 128f0 <_start@@Base+0x1b08>
   12838:	add	r0, pc, r0
   1283c:	bl	10dd8 <__assert_fail@plt>
   12840:	mov	r3, #21
   12844:	strh	r3, [fp, #-8]
   12848:	ldr	r0, [fp, #-16]
   1284c:	bl	11354 <_start@@Base+0x56c>
   12850:	mov	r3, r0
   12854:	rsb	r3, r3, #0
   12858:	ldr	r2, [fp, #-16]
   1285c:	add	r3, r2, r3
   12860:	str	r3, [fp, #-12]
   12864:	ldr	r0, [fp, #-12]
   12868:	bl	113ac <_start@@Base+0x5c4>
   1286c:	mov	r3, r0
   12870:	mov	r2, r3
   12874:	ldrh	r3, [fp, #-8]
   12878:	add	r3, r3, #3
   1287c:	lsl	r3, r3, #1
   12880:	cmp	r2, r3
   12884:	bcc	128ac <_start@@Base+0x1ac4>
   12888:	ldrh	r3, [fp, #-8]
   1288c:	add	r3, r3, #2
   12890:	lsl	r3, r3, #1
   12894:	ldr	r2, [fp, #-12]
   12898:	add	r3, r2, r3
   1289c:	mov	r0, r3
   128a0:	bl	113ac <_start@@Base+0x5c4>
   128a4:	mov	r3, r0
   128a8:	strh	r3, [fp, #-6]
   128ac:	ldrh	r3, [fp, #-6]
   128b0:	cmp	r3, #0
   128b4:	beq	128d4 <_start@@Base+0x1aec>
   128b8:	ldrh	r3, [fp, #-6]
   128bc:	ldr	r2, [fp, #-16]
   128c0:	add	r3, r2, r3
   128c4:	mov	r0, r3
   128c8:	bl	11010 <_start@@Base+0x228>
   128cc:	mov	r3, r0
   128d0:	b	128d8 <_start@@Base+0x1af0>
   128d4:	mov	r3, #0
   128d8:	mov	r0, r3
   128dc:	sub	sp, fp, #4
   128e0:	pop	{fp, pc}
   128e4:	ldrdeq	r5, [r0], -r8
   128e8:	ldrdeq	r0, [r0], -r9
   128ec:	andeq	r4, r0, r4, ror #24
   128f0:	andeq	r4, r0, r0, ror #25
   128f4:	push	{fp, lr}
   128f8:	add	fp, sp, #4
   128fc:	sub	sp, sp, #16
   12900:	str	r0, [fp, #-16]
   12904:	mov	r3, #0
   12908:	strh	r3, [fp, #-6]
   1290c:	ldr	r3, [fp, #-16]
   12910:	cmp	r3, #0
   12914:	bne	12938 <_start@@Base+0x1b50>
   12918:	ldr	r3, [pc, #200]	; 129e8 <_start@@Base+0x1c00>
   1291c:	add	r3, pc, r3
   12920:	ldr	r2, [pc, #196]	; 129ec <_start@@Base+0x1c04>
   12924:	ldr	r1, [pc, #196]	; 129f0 <_start@@Base+0x1c08>
   12928:	add	r1, pc, r1
   1292c:	ldr	r0, [pc, #192]	; 129f4 <_start@@Base+0x1c0c>
   12930:	add	r0, pc, r0
   12934:	bl	10dd8 <__assert_fail@plt>
   12938:	mov	r3, #22
   1293c:	strh	r3, [fp, #-8]
   12940:	ldr	r0, [fp, #-16]
   12944:	bl	11354 <_start@@Base+0x56c>
   12948:	mov	r3, r0
   1294c:	rsb	r3, r3, #0
   12950:	ldr	r2, [fp, #-16]
   12954:	add	r3, r2, r3
   12958:	str	r3, [fp, #-12]
   1295c:	ldr	r0, [fp, #-12]
   12960:	bl	113ac <_start@@Base+0x5c4>
   12964:	mov	r3, r0
   12968:	mov	r2, r3
   1296c:	ldrh	r3, [fp, #-8]
   12970:	add	r3, r3, #3
   12974:	lsl	r3, r3, #1
   12978:	cmp	r2, r3
   1297c:	bcc	129a4 <_start@@Base+0x1bbc>
   12980:	ldrh	r3, [fp, #-8]
   12984:	add	r3, r3, #2
   12988:	lsl	r3, r3, #1
   1298c:	ldr	r2, [fp, #-12]
   12990:	add	r3, r2, r3
   12994:	mov	r0, r3
   12998:	bl	113ac <_start@@Base+0x5c4>
   1299c:	mov	r3, r0
   129a0:	strh	r3, [fp, #-6]
   129a4:	ldrh	r3, [fp, #-6]
   129a8:	cmp	r3, #0
   129ac:	beq	129d0 <_start@@Base+0x1be8>
   129b0:	ldrh	r3, [fp, #-6]
   129b4:	ldr	r2, [fp, #-16]
   129b8:	add	r3, r2, r3
   129bc:	mov	r0, r3
   129c0:	bl	111d0 <_start@@Base+0x3e8>
   129c4:	mov	r2, r0
   129c8:	mov	r3, r1
   129cc:	b	129d8 <_start@@Base+0x1bf0>
   129d0:	mov	r2, #0
   129d4:	mov	r3, #0
   129d8:	mov	r0, r2
   129dc:	mov	r1, r3
   129e0:	sub	sp, fp, #4
   129e4:	pop	{fp, pc}
   129e8:	andeq	r5, r0, ip, lsl #10
   129ec:	ldrdeq	r0, [r0], -sl
   129f0:	andeq	r4, r0, ip, ror #22
   129f4:	andeq	r4, r0, r8, ror #23
   129f8:	push	{fp, lr}
   129fc:	add	fp, sp, #4
   12a00:	sub	sp, sp, #16
   12a04:	str	r0, [fp, #-16]
   12a08:	mov	r3, #0
   12a0c:	strh	r3, [fp, #-6]
   12a10:	ldr	r3, [fp, #-16]
   12a14:	cmp	r3, #0
   12a18:	bne	12a3c <_start@@Base+0x1c54>
   12a1c:	ldr	r3, [pc, #200]	; 12aec <_start@@Base+0x1d04>
   12a20:	add	r3, pc, r3
   12a24:	ldr	r2, [pc, #196]	; 12af0 <_start@@Base+0x1d08>
   12a28:	ldr	r1, [pc, #196]	; 12af4 <_start@@Base+0x1d0c>
   12a2c:	add	r1, pc, r1
   12a30:	ldr	r0, [pc, #192]	; 12af8 <_start@@Base+0x1d10>
   12a34:	add	r0, pc, r0
   12a38:	bl	10dd8 <__assert_fail@plt>
   12a3c:	mov	r3, #23
   12a40:	strh	r3, [fp, #-8]
   12a44:	ldr	r0, [fp, #-16]
   12a48:	bl	11354 <_start@@Base+0x56c>
   12a4c:	mov	r3, r0
   12a50:	rsb	r3, r3, #0
   12a54:	ldr	r2, [fp, #-16]
   12a58:	add	r3, r2, r3
   12a5c:	str	r3, [fp, #-12]
   12a60:	ldr	r0, [fp, #-12]
   12a64:	bl	113ac <_start@@Base+0x5c4>
   12a68:	mov	r3, r0
   12a6c:	mov	r2, r3
   12a70:	ldrh	r3, [fp, #-8]
   12a74:	add	r3, r3, #3
   12a78:	lsl	r3, r3, #1
   12a7c:	cmp	r2, r3
   12a80:	bcc	12aa8 <_start@@Base+0x1cc0>
   12a84:	ldrh	r3, [fp, #-8]
   12a88:	add	r3, r3, #2
   12a8c:	lsl	r3, r3, #1
   12a90:	ldr	r2, [fp, #-12]
   12a94:	add	r3, r2, r3
   12a98:	mov	r0, r3
   12a9c:	bl	113ac <_start@@Base+0x5c4>
   12aa0:	mov	r3, r0
   12aa4:	strh	r3, [fp, #-6]
   12aa8:	ldrh	r3, [fp, #-6]
   12aac:	cmp	r3, #0
   12ab0:	beq	12ad4 <_start@@Base+0x1cec>
   12ab4:	ldrh	r3, [fp, #-6]
   12ab8:	ldr	r2, [fp, #-16]
   12abc:	add	r3, r2, r3
   12ac0:	mov	r0, r3
   12ac4:	bl	11068 <_start@@Base+0x280>
   12ac8:	mov	r2, r0
   12acc:	mov	r3, r1
   12ad0:	b	12adc <_start@@Base+0x1cf4>
   12ad4:	mov	r2, #0
   12ad8:	mov	r3, #0
   12adc:	mov	r0, r2
   12ae0:	mov	r1, r3
   12ae4:	sub	sp, fp, #4
   12ae8:	pop	{fp, pc}
   12aec:	andeq	r5, r0, r4, lsr r4
   12af0:	ldrdeq	r0, [r0], -fp
   12af4:	andeq	r4, r0, r8, ror #20
   12af8:	andeq	r4, r0, r4, ror #21
   12afc:	push	{fp, lr}
   12b00:	add	fp, sp, #4
   12b04:	sub	sp, sp, #8
   12b08:	str	r0, [fp, #-8]
   12b0c:	ldr	r3, [fp, #-8]
   12b10:	ldrb	r3, [r3, #12]
   12b14:	cmp	r3, #1
   12b18:	bne	12b38 <_start@@Base+0x1d50>
   12b1c:	ldr	r3, [pc, #36]	; 12b48 <_start@@Base+0x1d60>
   12b20:	add	r3, pc, r3
   12b24:	mov	r1, r3
   12b28:	ldr	r0, [fp, #-8]
   12b2c:	bl	16728 <flatcc_verify_union_table@@Base>
   12b30:	mov	r3, r0
   12b34:	b	12b3c <_start@@Base+0x1d54>
   12b38:	mov	r3, #0
   12b3c:	mov	r0, r3
   12b40:	sub	sp, fp, #4
   12b44:	pop	{fp, pc}
   12b48:	ldrdeq	r0, [r0], -ip
   12b4c:	push	{fp, lr}
   12b50:	add	fp, sp, #4
   12b54:	sub	sp, sp, #8
   12b58:	str	r0, [fp, #-8]
   12b5c:	ldr	r3, [fp, #-8]
   12b60:	ldrb	r3, [r3, #12]
   12b64:	sub	r3, r3, #1
   12b68:	cmp	r3, #3
   12b6c:	addls	pc, pc, r3, lsl #2
   12b70:	b	12bf4 <_start@@Base+0x1e0c>
   12b74:	b	12b84 <_start@@Base+0x1d9c>
   12b78:	b	12ba0 <_start@@Base+0x1db8>
   12b7c:	b	12bbc <_start@@Base+0x1dd4>
   12b80:	b	12bd8 <_start@@Base+0x1df0>
   12b84:	ldr	r3, [pc, #120]	; 12c04 <_start@@Base+0x1e1c>
   12b88:	add	r3, pc, r3
   12b8c:	mov	r1, r3
   12b90:	ldr	r0, [fp, #-8]
   12b94:	bl	16728 <flatcc_verify_union_table@@Base>
   12b98:	mov	r3, r0
   12b9c:	b	12bf8 <_start@@Base+0x1e10>
   12ba0:	ldr	r3, [pc, #96]	; 12c08 <_start@@Base+0x1e20>
   12ba4:	add	r3, pc, r3
   12ba8:	mov	r1, r3
   12bac:	ldr	r0, [fp, #-8]
   12bb0:	bl	16728 <flatcc_verify_union_table@@Base>
   12bb4:	mov	r3, r0
   12bb8:	b	12bf8 <_start@@Base+0x1e10>
   12bbc:	ldr	r3, [pc, #72]	; 12c0c <_start@@Base+0x1e24>
   12bc0:	add	r3, pc, r3
   12bc4:	mov	r1, r3
   12bc8:	ldr	r0, [fp, #-8]
   12bcc:	bl	16728 <flatcc_verify_union_table@@Base>
   12bd0:	mov	r3, r0
   12bd4:	b	12bf8 <_start@@Base+0x1e10>
   12bd8:	ldr	r3, [pc, #48]	; 12c10 <_start@@Base+0x1e28>
   12bdc:	add	r3, pc, r3
   12be0:	mov	r1, r3
   12be4:	ldr	r0, [fp, #-8]
   12be8:	bl	16728 <flatcc_verify_union_table@@Base>
   12bec:	mov	r3, r0
   12bf0:	b	12bf8 <_start@@Base+0x1e10>
   12bf4:	mov	r3, #0
   12bf8:	mov	r0, r3
   12bfc:	sub	sp, fp, #4
   12c00:	pop	{fp, pc}
   12c04:	andeq	r0, r0, r8, lsr #19
   12c08:	andeq	r0, r0, r0, lsl r2
   12c0c:	andeq	r0, r0, r0, ror #2
   12c10:	andeq	r0, r0, r0, ror r4
   12c14:	push	{fp, lr}
   12c18:	add	fp, sp, #4
   12c1c:	sub	sp, sp, #8
   12c20:	str	r0, [fp, #-8]
   12c24:	ldr	r3, [fp, #-8]
   12c28:	ldrb	r3, [r3, #12]
   12c2c:	cmp	r3, #9
   12c30:	beq	12ca0 <_start@@Base+0x1eb8>
   12c34:	cmp	r3, #9
   12c38:	bgt	12c50 <_start@@Base+0x1e68>
   12c3c:	cmp	r3, #2
   12c40:	beq	12c6c <_start@@Base+0x1e84>
   12c44:	cmp	r3, #8
   12c48:	beq	12c88 <_start@@Base+0x1ea0>
   12c4c:	b	12cf0 <_start@@Base+0x1f08>
   12c50:	cmp	r3, #11
   12c54:	beq	12cd0 <_start@@Base+0x1ee8>
   12c58:	cmp	r3, #11
   12c5c:	blt	12cb8 <_start@@Base+0x1ed0>
   12c60:	cmp	r3, #255	; 0xff
   12c64:	beq	12ce0 <_start@@Base+0x1ef8>
   12c68:	b	12cf0 <_start@@Base+0x1f08>
   12c6c:	ldr	r3, [pc, #140]	; 12d00 <_start@@Base+0x1f18>
   12c70:	add	r3, pc, r3
   12c74:	mov	r1, r3
   12c78:	ldr	r0, [fp, #-8]
   12c7c:	bl	16728 <flatcc_verify_union_table@@Base>
   12c80:	mov	r3, r0
   12c84:	b	12cf4 <_start@@Base+0x1f0c>
   12c88:	mov	r2, #2
   12c8c:	mov	r1, #2
   12c90:	ldr	r0, [fp, #-8]
   12c94:	bl	1678c <flatcc_verify_union_struct@@Base>
   12c98:	mov	r3, r0
   12c9c:	b	12cf4 <_start@@Base+0x1f0c>
   12ca0:	mov	r2, #4
   12ca4:	mov	r1, #4
   12ca8:	ldr	r0, [fp, #-8]
   12cac:	bl	1678c <flatcc_verify_union_struct@@Base>
   12cb0:	mov	r3, r0
   12cb4:	b	12cf4 <_start@@Base+0x1f0c>
   12cb8:	mov	r2, #4
   12cbc:	mov	r1, #4
   12cc0:	ldr	r0, [fp, #-8]
   12cc4:	bl	1678c <flatcc_verify_union_struct@@Base>
   12cc8:	mov	r3, r0
   12ccc:	b	12cf4 <_start@@Base+0x1f0c>
   12cd0:	ldr	r0, [fp, #-8]
   12cd4:	bl	167e0 <flatcc_verify_union_string@@Base>
   12cd8:	mov	r3, r0
   12cdc:	b	12cf4 <_start@@Base+0x1f0c>
   12ce0:	ldr	r0, [fp, #-8]
   12ce4:	bl	167e0 <flatcc_verify_union_string@@Base>
   12ce8:	mov	r3, r0
   12cec:	b	12cf4 <_start@@Base+0x1f0c>
   12cf0:	mov	r3, #0
   12cf4:	mov	r0, r3
   12cf8:	sub	sp, fp, #4
   12cfc:	pop	{fp, pc}
   12d00:	andeq	r1, r0, r0, asr r2
   12d04:	push	{fp}		; (str fp, [sp, #-4]!)
   12d08:	add	fp, sp, #0
   12d0c:	sub	sp, sp, #12
   12d10:	str	r0, [fp, #-8]
   12d14:	mov	r3, #0
   12d18:	mov	r0, r3
   12d1c:	add	sp, fp, #0
   12d20:	pop	{fp}		; (ldr fp, [sp], #4)
   12d24:	bx	lr
   12d28:	push	{fp}		; (str fp, [sp, #-4]!)
   12d2c:	add	fp, sp, #0
   12d30:	sub	sp, sp, #12
   12d34:	str	r0, [fp, #-8]
   12d38:	mov	r3, #0
   12d3c:	mov	r0, r3
   12d40:	add	sp, fp, #0
   12d44:	pop	{fp}		; (ldr fp, [sp], #4)
   12d48:	bx	lr
   12d4c:	push	{fp}		; (str fp, [sp, #-4]!)
   12d50:	add	fp, sp, #0
   12d54:	sub	sp, sp, #12
   12d58:	str	r0, [fp, #-8]
   12d5c:	mov	r3, #0
   12d60:	mov	r0, r3
   12d64:	add	sp, fp, #0
   12d68:	pop	{fp}		; (ldr fp, [sp], #4)
   12d6c:	bx	lr
   12d70:	push	{fp, lr}
   12d74:	add	fp, sp, #4
   12d78:	sub	sp, sp, #16
   12d7c:	str	r0, [fp, #-16]
   12d80:	mov	r3, #1
   12d84:	mov	r2, #0
   12d88:	mov	r1, #0
   12d8c:	ldr	r0, [fp, #-16]
   12d90:	bl	16330 <flatcc_verify_field@@Base>
   12d94:	str	r0, [fp, #-8]
   12d98:	ldr	r3, [fp, #-8]
   12d9c:	cmp	r3, #0
   12da0:	beq	12dac <_start@@Base+0x1fc4>
   12da4:	ldr	r3, [fp, #-8]
   12da8:	b	12db0 <_start@@Base+0x1fc8>
   12dac:	mov	r3, #0
   12db0:	mov	r0, r3
   12db4:	sub	sp, fp, #4
   12db8:	pop	{fp, pc}
   12dbc:	push	{fp, lr}
   12dc0:	add	fp, sp, #4
   12dc4:	sub	sp, sp, #16
   12dc8:	str	r0, [fp, #-16]
   12dcc:	mov	r3, #1
   12dd0:	mov	r2, #1
   12dd4:	mov	r1, #0
   12dd8:	ldr	r0, [fp, #-16]
   12ddc:	bl	16330 <flatcc_verify_field@@Base>
   12de0:	str	r0, [fp, #-8]
   12de4:	ldr	r3, [fp, #-8]
   12de8:	cmp	r3, #0
   12dec:	beq	12df8 <_start@@Base+0x2010>
   12df0:	ldr	r3, [fp, #-8]
   12df4:	b	12e80 <_start@@Base+0x2098>
   12df8:	mov	r3, #1
   12dfc:	mov	r2, #1
   12e00:	mov	r1, #1
   12e04:	ldr	r0, [fp, #-16]
   12e08:	bl	16330 <flatcc_verify_field@@Base>
   12e0c:	str	r0, [fp, #-8]
   12e10:	ldr	r3, [fp, #-8]
   12e14:	cmp	r3, #0
   12e18:	beq	12e24 <_start@@Base+0x203c>
   12e1c:	ldr	r3, [fp, #-8]
   12e20:	b	12e80 <_start@@Base+0x2098>
   12e24:	mov	r3, #1
   12e28:	mov	r2, #1
   12e2c:	mov	r1, #2
   12e30:	ldr	r0, [fp, #-16]
   12e34:	bl	16330 <flatcc_verify_field@@Base>
   12e38:	str	r0, [fp, #-8]
   12e3c:	ldr	r3, [fp, #-8]
   12e40:	cmp	r3, #0
   12e44:	beq	12e50 <_start@@Base+0x2068>
   12e48:	ldr	r3, [fp, #-8]
   12e4c:	b	12e80 <_start@@Base+0x2098>
   12e50:	mov	r3, #1
   12e54:	mov	r2, #1
   12e58:	mov	r1, #3
   12e5c:	ldr	r0, [fp, #-16]
   12e60:	bl	16330 <flatcc_verify_field@@Base>
   12e64:	str	r0, [fp, #-8]
   12e68:	ldr	r3, [fp, #-8]
   12e6c:	cmp	r3, #0
   12e70:	beq	12e7c <_start@@Base+0x2094>
   12e74:	ldr	r3, [fp, #-8]
   12e78:	b	12e80 <_start@@Base+0x2098>
   12e7c:	mov	r3, #0
   12e80:	mov	r0, r3
   12e84:	sub	sp, fp, #4
   12e88:	pop	{fp, pc}
   12e8c:	push	{fp, lr}
   12e90:	add	fp, sp, #4
   12e94:	sub	sp, sp, #16
   12e98:	str	r0, [fp, #-16]
   12e9c:	mov	r3, #1
   12ea0:	mov	r2, #0
   12ea4:	mov	r1, #0
   12ea8:	ldr	r0, [fp, #-16]
   12eac:	bl	16330 <flatcc_verify_field@@Base>
   12eb0:	str	r0, [fp, #-8]
   12eb4:	ldr	r3, [fp, #-8]
   12eb8:	cmp	r3, #0
   12ebc:	beq	12ec8 <_start@@Base+0x20e0>
   12ec0:	ldr	r3, [fp, #-8]
   12ec4:	b	12fa8 <_start@@Base+0x21c0>
   12ec8:	mov	r3, #8
   12ecc:	mov	r2, #8
   12ed0:	mov	r1, #1
   12ed4:	ldr	r0, [fp, #-16]
   12ed8:	bl	16330 <flatcc_verify_field@@Base>
   12edc:	str	r0, [fp, #-8]
   12ee0:	ldr	r3, [fp, #-8]
   12ee4:	cmp	r3, #0
   12ee8:	beq	12ef4 <_start@@Base+0x210c>
   12eec:	ldr	r3, [fp, #-8]
   12ef0:	b	12fa8 <_start@@Base+0x21c0>
   12ef4:	mov	r3, #8
   12ef8:	mov	r2, #8
   12efc:	mov	r1, #2
   12f00:	ldr	r0, [fp, #-16]
   12f04:	bl	16330 <flatcc_verify_field@@Base>
   12f08:	str	r0, [fp, #-8]
   12f0c:	ldr	r3, [fp, #-8]
   12f10:	cmp	r3, #0
   12f14:	beq	12f20 <_start@@Base+0x2138>
   12f18:	ldr	r3, [fp, #-8]
   12f1c:	b	12fa8 <_start@@Base+0x21c0>
   12f20:	mov	r3, #4
   12f24:	mov	r2, #4
   12f28:	mov	r1, #3
   12f2c:	ldr	r0, [fp, #-16]
   12f30:	bl	16330 <flatcc_verify_field@@Base>
   12f34:	str	r0, [fp, #-8]
   12f38:	ldr	r3, [fp, #-8]
   12f3c:	cmp	r3, #0
   12f40:	beq	12f4c <_start@@Base+0x2164>
   12f44:	ldr	r3, [fp, #-8]
   12f48:	b	12fa8 <_start@@Base+0x21c0>
   12f4c:	mov	r3, #8
   12f50:	mov	r2, #8
   12f54:	mov	r1, #4
   12f58:	ldr	r0, [fp, #-16]
   12f5c:	bl	16330 <flatcc_verify_field@@Base>
   12f60:	str	r0, [fp, #-8]
   12f64:	ldr	r3, [fp, #-8]
   12f68:	cmp	r3, #0
   12f6c:	beq	12f78 <_start@@Base+0x2190>
   12f70:	ldr	r3, [fp, #-8]
   12f74:	b	12fa8 <_start@@Base+0x21c0>
   12f78:	mov	r3, #8
   12f7c:	mov	r2, #8
   12f80:	mov	r1, #5
   12f84:	ldr	r0, [fp, #-16]
   12f88:	bl	16330 <flatcc_verify_field@@Base>
   12f8c:	str	r0, [fp, #-8]
   12f90:	ldr	r3, [fp, #-8]
   12f94:	cmp	r3, #0
   12f98:	beq	12fa4 <_start@@Base+0x21bc>
   12f9c:	ldr	r3, [fp, #-8]
   12fa0:	b	12fa8 <_start@@Base+0x21c0>
   12fa4:	mov	r3, #0
   12fa8:	mov	r0, r3
   12fac:	sub	sp, fp, #4
   12fb0:	pop	{fp, pc}
   12fb4:	push	{fp, lr}
   12fb8:	add	fp, sp, #4
   12fbc:	sub	sp, sp, #16
   12fc0:	str	r0, [fp, #-16]
   12fc4:	mov	r2, #0
   12fc8:	mov	r1, #0
   12fcc:	ldr	r0, [fp, #-16]
   12fd0:	bl	163a8 <flatcc_verify_string_field@@Base>
   12fd4:	str	r0, [fp, #-8]
   12fd8:	ldr	r3, [fp, #-8]
   12fdc:	cmp	r3, #0
   12fe0:	beq	12fec <_start@@Base+0x2204>
   12fe4:	ldr	r3, [fp, #-8]
   12fe8:	b	13048 <_start@@Base+0x2260>
   12fec:	mov	r3, #8
   12ff0:	mov	r2, #8
   12ff4:	mov	r1, #1
   12ff8:	ldr	r0, [fp, #-16]
   12ffc:	bl	16330 <flatcc_verify_field@@Base>
   13000:	str	r0, [fp, #-8]
   13004:	ldr	r3, [fp, #-8]
   13008:	cmp	r3, #0
   1300c:	beq	13018 <_start@@Base+0x2230>
   13010:	ldr	r3, [fp, #-8]
   13014:	b	13048 <_start@@Base+0x2260>
   13018:	mov	r3, #2
   1301c:	mov	r2, #2
   13020:	mov	r1, #2
   13024:	ldr	r0, [fp, #-16]
   13028:	bl	16330 <flatcc_verify_field@@Base>
   1302c:	str	r0, [fp, #-8]
   13030:	ldr	r3, [fp, #-8]
   13034:	cmp	r3, #0
   13038:	beq	13044 <_start@@Base+0x225c>
   1303c:	ldr	r3, [fp, #-8]
   13040:	b	13048 <_start@@Base+0x2260>
   13044:	mov	r3, #0
   13048:	mov	r0, r3
   1304c:	sub	sp, fp, #4
   13050:	pop	{fp, pc}
   13054:	push	{fp, lr}
   13058:	add	fp, sp, #4
   1305c:	sub	sp, sp, #16
   13060:	str	r0, [fp, #-16]
   13064:	ldr	r3, [pc, #152]	; 13104 <_start@@Base+0x231c>
   13068:	add	r3, pc, r3
   1306c:	mov	r2, #0
   13070:	mov	r1, #0
   13074:	ldr	r0, [fp, #-16]
   13078:	bl	165b0 <flatcc_verify_table_field@@Base>
   1307c:	str	r0, [fp, #-8]
   13080:	ldr	r3, [fp, #-8]
   13084:	cmp	r3, #0
   13088:	beq	13094 <_start@@Base+0x22ac>
   1308c:	ldr	r3, [fp, #-8]
   13090:	b	130f8 <_start@@Base+0x2310>
   13094:	ldr	r3, [pc, #108]	; 13108 <_start@@Base+0x2320>
   13098:	add	r3, pc, r3
   1309c:	mov	r2, #0
   130a0:	mov	r1, #1
   130a4:	ldr	r0, [fp, #-16]
   130a8:	bl	165b0 <flatcc_verify_table_field@@Base>
   130ac:	str	r0, [fp, #-8]
   130b0:	ldr	r3, [fp, #-8]
   130b4:	cmp	r3, #0
   130b8:	beq	130c4 <_start@@Base+0x22dc>
   130bc:	ldr	r3, [fp, #-8]
   130c0:	b	130f8 <_start@@Base+0x2310>
   130c4:	ldr	r3, [pc, #64]	; 1310c <_start@@Base+0x2324>
   130c8:	add	r3, pc, r3
   130cc:	mov	r2, #0
   130d0:	mov	r1, #3
   130d4:	ldr	r0, [fp, #-16]
   130d8:	bl	1714c <flatcc_verify_union_vector_field@@Base>
   130dc:	str	r0, [fp, #-8]
   130e0:	ldr	r3, [fp, #-8]
   130e4:	cmp	r3, #0
   130e8:	beq	130f4 <_start@@Base+0x230c>
   130ec:	ldr	r3, [fp, #-8]
   130f0:	b	130f8 <_start@@Base+0x2310>
   130f4:	mov	r3, #0
   130f8:	mov	r0, r3
   130fc:	sub	sp, fp, #4
   13100:	pop	{fp, pc}
   13104:	andeq	r0, r0, r0, lsr #1
   13108:	andeq	r0, r0, r4, ror lr
   1310c:			; <UNDEFINED> instruction: 0xfffffa7c
   13110:	push	{fp, lr}
   13114:	add	fp, sp, #4
   13118:	sub	sp, sp, #16
   1311c:	str	r0, [fp, #-16]
   13120:	ldr	r3, [pc, #152]	; 131c0 <_start@@Base+0x23d8>
   13124:	add	r3, pc, r3
   13128:	mov	r2, #0
   1312c:	mov	r1, #0
   13130:	ldr	r0, [fp, #-16]
   13134:	bl	165b0 <flatcc_verify_table_field@@Base>
   13138:	str	r0, [fp, #-8]
   1313c:	ldr	r3, [fp, #-8]
   13140:	cmp	r3, #0
   13144:	beq	13150 <_start@@Base+0x2368>
   13148:	ldr	r3, [fp, #-8]
   1314c:	b	131b4 <_start@@Base+0x23cc>
   13150:	ldr	r3, [pc, #108]	; 131c4 <_start@@Base+0x23dc>
   13154:	add	r3, pc, r3
   13158:	mov	r2, #0
   1315c:	mov	r1, #1
   13160:	ldr	r0, [fp, #-16]
   13164:	bl	165b0 <flatcc_verify_table_field@@Base>
   13168:	str	r0, [fp, #-8]
   1316c:	ldr	r3, [fp, #-8]
   13170:	cmp	r3, #0
   13174:	beq	13180 <_start@@Base+0x2398>
   13178:	ldr	r3, [fp, #-8]
   1317c:	b	131b4 <_start@@Base+0x23cc>
   13180:	ldr	r3, [pc, #64]	; 131c8 <_start@@Base+0x23e0>
   13184:	add	r3, pc, r3
   13188:	mov	r2, #0
   1318c:	mov	r1, #2
   13190:	ldr	r0, [fp, #-16]
   13194:	bl	165b0 <flatcc_verify_table_field@@Base>
   13198:	str	r0, [fp, #-8]
   1319c:	ldr	r3, [fp, #-8]
   131a0:	cmp	r3, #0
   131a4:	beq	131b0 <_start@@Base+0x23c8>
   131a8:	ldr	r3, [fp, #-8]
   131ac:	b	131b4 <_start@@Base+0x23cc>
   131b0:	mov	r3, #0
   131b4:	mov	r0, r3
   131b8:	sub	sp, fp, #4
   131bc:	pop	{fp, pc}
   131c0:	andeq	r0, r0, r0, lsr #1
   131c4:	andeq	r0, r0, r0, lsl r2
   131c8:	andeq	r0, r0, r8, asr r2
   131cc:	push	{fp, lr}
   131d0:	add	fp, sp, #4
   131d4:	sub	sp, sp, #16
   131d8:	str	r0, [fp, #-16]
   131dc:	mov	r2, #0
   131e0:	mov	r1, #0
   131e4:	ldr	r0, [fp, #-16]
   131e8:	bl	163a8 <flatcc_verify_string_field@@Base>
   131ec:	str	r0, [fp, #-8]
   131f0:	ldr	r3, [fp, #-8]
   131f4:	cmp	r3, #0
   131f8:	beq	13204 <_start@@Base+0x241c>
   131fc:	ldr	r3, [fp, #-8]
   13200:	b	13360 <_start@@Base+0x2578>
   13204:	mov	r3, #4
   13208:	mov	r2, #4
   1320c:	mov	r1, #1
   13210:	ldr	r0, [fp, #-16]
   13214:	bl	16330 <flatcc_verify_field@@Base>
   13218:	str	r0, [fp, #-8]
   1321c:	ldr	r3, [fp, #-8]
   13220:	cmp	r3, #0
   13224:	beq	13230 <_start@@Base+0x2448>
   13228:	ldr	r3, [fp, #-8]
   1322c:	b	13360 <_start@@Base+0x2578>
   13230:	mov	r2, #0
   13234:	mov	r1, #2
   13238:	ldr	r0, [fp, #-16]
   1323c:	bl	163a8 <flatcc_verify_string_field@@Base>
   13240:	str	r0, [fp, #-8]
   13244:	ldr	r3, [fp, #-8]
   13248:	cmp	r3, #0
   1324c:	beq	13258 <_start@@Base+0x2470>
   13250:	ldr	r3, [fp, #-8]
   13254:	b	13360 <_start@@Base+0x2578>
   13258:	mov	r3, #8
   1325c:	mov	r2, #8
   13260:	mov	r1, #3
   13264:	ldr	r0, [fp, #-16]
   13268:	bl	16330 <flatcc_verify_field@@Base>
   1326c:	str	r0, [fp, #-8]
   13270:	ldr	r3, [fp, #-8]
   13274:	cmp	r3, #0
   13278:	beq	13284 <_start@@Base+0x249c>
   1327c:	ldr	r3, [fp, #-8]
   13280:	b	13360 <_start@@Base+0x2578>
   13284:	mov	r2, #0
   13288:	mov	r1, #4
   1328c:	ldr	r0, [fp, #-16]
   13290:	bl	163a8 <flatcc_verify_string_field@@Base>
   13294:	str	r0, [fp, #-8]
   13298:	ldr	r3, [fp, #-8]
   1329c:	cmp	r3, #0
   132a0:	beq	132ac <_start@@Base+0x24c4>
   132a4:	ldr	r3, [fp, #-8]
   132a8:	b	13360 <_start@@Base+0x2578>
   132ac:	mov	r3, #8
   132b0:	mov	r2, #8
   132b4:	mov	r1, #5
   132b8:	ldr	r0, [fp, #-16]
   132bc:	bl	16330 <flatcc_verify_field@@Base>
   132c0:	str	r0, [fp, #-8]
   132c4:	ldr	r3, [fp, #-8]
   132c8:	cmp	r3, #0
   132cc:	beq	132d8 <_start@@Base+0x24f0>
   132d0:	ldr	r3, [fp, #-8]
   132d4:	b	13360 <_start@@Base+0x2578>
   132d8:	mov	r3, #4
   132dc:	mov	r2, #4
   132e0:	mov	r1, #6
   132e4:	ldr	r0, [fp, #-16]
   132e8:	bl	16330 <flatcc_verify_field@@Base>
   132ec:	str	r0, [fp, #-8]
   132f0:	ldr	r3, [fp, #-8]
   132f4:	cmp	r3, #0
   132f8:	beq	13304 <_start@@Base+0x251c>
   132fc:	ldr	r3, [fp, #-8]
   13300:	b	13360 <_start@@Base+0x2578>
   13304:	mov	r3, #8
   13308:	mov	r2, #8
   1330c:	mov	r1, #7
   13310:	ldr	r0, [fp, #-16]
   13314:	bl	16330 <flatcc_verify_field@@Base>
   13318:	str	r0, [fp, #-8]
   1331c:	ldr	r3, [fp, #-8]
   13320:	cmp	r3, #0
   13324:	beq	13330 <_start@@Base+0x2548>
   13328:	ldr	r3, [fp, #-8]
   1332c:	b	13360 <_start@@Base+0x2578>
   13330:	mov	r3, #4
   13334:	mov	r2, #4
   13338:	mov	r1, #8
   1333c:	ldr	r0, [fp, #-16]
   13340:	bl	16330 <flatcc_verify_field@@Base>
   13344:	str	r0, [fp, #-8]
   13348:	ldr	r3, [fp, #-8]
   1334c:	cmp	r3, #0
   13350:	beq	1335c <_start@@Base+0x2574>
   13354:	ldr	r3, [fp, #-8]
   13358:	b	13360 <_start@@Base+0x2578>
   1335c:	mov	r3, #0
   13360:	mov	r0, r3
   13364:	sub	sp, fp, #4
   13368:	pop	{fp, pc}
   1336c:	push	{fp, lr}
   13370:	add	fp, sp, #4
   13374:	sub	sp, sp, #16
   13378:	str	r0, [fp, #-16]
   1337c:	mov	r3, #8
   13380:	mov	r2, #8
   13384:	mov	r1, #0
   13388:	ldr	r0, [fp, #-16]
   1338c:	bl	16330 <flatcc_verify_field@@Base>
   13390:	str	r0, [fp, #-8]
   13394:	ldr	r3, [fp, #-8]
   13398:	cmp	r3, #0
   1339c:	beq	133a8 <_start@@Base+0x25c0>
   133a0:	ldr	r3, [fp, #-8]
   133a4:	b	133d8 <_start@@Base+0x25f0>
   133a8:	mov	r3, #4
   133ac:	mov	r2, #4
   133b0:	mov	r1, #1
   133b4:	ldr	r0, [fp, #-16]
   133b8:	bl	16330 <flatcc_verify_field@@Base>
   133bc:	str	r0, [fp, #-8]
   133c0:	ldr	r3, [fp, #-8]
   133c4:	cmp	r3, #0
   133c8:	beq	133d4 <_start@@Base+0x25ec>
   133cc:	ldr	r3, [fp, #-8]
   133d0:	b	133d8 <_start@@Base+0x25f0>
   133d4:	mov	r3, #0
   133d8:	mov	r0, r3
   133dc:	sub	sp, fp, #4
   133e0:	pop	{fp, pc}
   133e4:	push	{fp, lr}
   133e8:	add	fp, sp, #4
   133ec:	sub	sp, sp, #16
   133f0:	str	r0, [fp, #-16]
   133f4:	mov	r3, #8
   133f8:	mov	r2, #8
   133fc:	mov	r1, #0
   13400:	ldr	r0, [fp, #-16]
   13404:	bl	16330 <flatcc_verify_field@@Base>
   13408:	str	r0, [fp, #-8]
   1340c:	ldr	r3, [fp, #-8]
   13410:	cmp	r3, #0
   13414:	beq	13420 <_start@@Base+0x2638>
   13418:	ldr	r3, [fp, #-8]
   1341c:	b	13450 <_start@@Base+0x2668>
   13420:	mov	r3, #4
   13424:	mov	r2, #4
   13428:	mov	r1, #1
   1342c:	ldr	r0, [fp, #-16]
   13430:	bl	16330 <flatcc_verify_field@@Base>
   13434:	str	r0, [fp, #-8]
   13438:	ldr	r3, [fp, #-8]
   1343c:	cmp	r3, #0
   13440:	beq	1344c <_start@@Base+0x2664>
   13444:	ldr	r3, [fp, #-8]
   13448:	b	13450 <_start@@Base+0x2668>
   1344c:	mov	r3, #0
   13450:	mov	r0, r3
   13454:	sub	sp, fp, #4
   13458:	pop	{fp, pc}
   1345c:	push	{fp, lr}
   13460:	add	fp, sp, #4
   13464:	sub	sp, sp, #24
   13468:	str	r0, [fp, #-16]
   1346c:	mvn	r3, #0
   13470:	str	r3, [sp, #4]
   13474:	mov	r3, #1
   13478:	str	r3, [sp]
   1347c:	mov	r3, #1
   13480:	mov	r2, #0
   13484:	mov	r1, #0
   13488:	ldr	r0, [fp, #-16]
   1348c:	bl	1644c <flatcc_verify_vector_field@@Base>
   13490:	str	r0, [fp, #-8]
   13494:	ldr	r3, [fp, #-8]
   13498:	cmp	r3, #0
   1349c:	beq	134a8 <_start@@Base+0x26c0>
   134a0:	ldr	r3, [fp, #-8]
   134a4:	b	13528 <_start@@Base+0x2740>
   134a8:	mvn	r3, #0
   134ac:	str	r3, [sp, #4]
   134b0:	mov	r3, #1
   134b4:	str	r3, [sp]
   134b8:	mov	r3, #1
   134bc:	mov	r2, #0
   134c0:	mov	r1, #1
   134c4:	ldr	r0, [fp, #-16]
   134c8:	bl	1644c <flatcc_verify_vector_field@@Base>
   134cc:	str	r0, [fp, #-8]
   134d0:	ldr	r3, [fp, #-8]
   134d4:	cmp	r3, #0
   134d8:	beq	134e4 <_start@@Base+0x26fc>
   134dc:	ldr	r3, [fp, #-8]
   134e0:	b	13528 <_start@@Base+0x2740>
   134e4:	ldr	r3, [pc, #72]	; 13534 <_start@@Base+0x274c>
   134e8:	add	r3, pc, r3
   134ec:	str	r3, [sp, #4]
   134f0:	mov	r3, #1
   134f4:	str	r3, [sp]
   134f8:	mov	r3, #0
   134fc:	mov	r2, #0
   13500:	mov	r1, #2
   13504:	ldr	r0, [fp, #-16]
   13508:	bl	16d94 <flatcc_verify_table_as_nested_root@@Base>
   1350c:	str	r0, [fp, #-8]
   13510:	ldr	r3, [fp, #-8]
   13514:	cmp	r3, #0
   13518:	beq	13524 <_start@@Base+0x273c>
   1351c:	ldr	r3, [fp, #-8]
   13520:	b	13528 <_start@@Base+0x2740>
   13524:	mov	r3, #0
   13528:	mov	r0, r3
   1352c:	sub	sp, fp, #4
   13530:	pop	{fp, pc}
   13534:	andeq	r0, r0, r8, asr #32
   13538:	push	{fp, lr}
   1353c:	add	fp, sp, #4
   13540:	sub	sp, sp, #24
   13544:	str	r0, [fp, #-16]
   13548:	mov	r3, #16
   1354c:	mov	r2, #32
   13550:	mov	r1, #0
   13554:	ldr	r0, [fp, #-16]
   13558:	bl	16330 <flatcc_verify_field@@Base>
   1355c:	str	r0, [fp, #-8]
   13560:	ldr	r3, [fp, #-8]
   13564:	cmp	r3, #0
   13568:	beq	13574 <_start@@Base+0x278c>
   1356c:	ldr	r3, [fp, #-8]
   13570:	b	13bc4 <_start@@Base+0x2ddc>
   13574:	mov	r3, #2
   13578:	mov	r2, #2
   1357c:	mov	r1, #2
   13580:	ldr	r0, [fp, #-16]
   13584:	bl	16330 <flatcc_verify_field@@Base>
   13588:	str	r0, [fp, #-8]
   1358c:	ldr	r3, [fp, #-8]
   13590:	cmp	r3, #0
   13594:	beq	135a0 <_start@@Base+0x27b8>
   13598:	ldr	r3, [fp, #-8]
   1359c:	b	13bc4 <_start@@Base+0x2ddc>
   135a0:	mov	r3, #2
   135a4:	mov	r2, #2
   135a8:	mov	r1, #1
   135ac:	ldr	r0, [fp, #-16]
   135b0:	bl	16330 <flatcc_verify_field@@Base>
   135b4:	str	r0, [fp, #-8]
   135b8:	ldr	r3, [fp, #-8]
   135bc:	cmp	r3, #0
   135c0:	beq	135cc <_start@@Base+0x27e4>
   135c4:	ldr	r3, [fp, #-8]
   135c8:	b	13bc4 <_start@@Base+0x2ddc>
   135cc:	mov	r2, #1
   135d0:	mov	r1, #3
   135d4:	ldr	r0, [fp, #-16]
   135d8:	bl	163a8 <flatcc_verify_string_field@@Base>
   135dc:	str	r0, [fp, #-8]
   135e0:	ldr	r3, [fp, #-8]
   135e4:	cmp	r3, #0
   135e8:	beq	135f4 <_start@@Base+0x280c>
   135ec:	ldr	r3, [fp, #-8]
   135f0:	b	13bc4 <_start@@Base+0x2ddc>
   135f4:	mov	r3, #1
   135f8:	mov	r2, #1
   135fc:	mov	r1, #6
   13600:	ldr	r0, [fp, #-16]
   13604:	bl	16330 <flatcc_verify_field@@Base>
   13608:	str	r0, [fp, #-8]
   1360c:	ldr	r3, [fp, #-8]
   13610:	cmp	r3, #0
   13614:	beq	13620 <_start@@Base+0x2838>
   13618:	ldr	r3, [fp, #-8]
   1361c:	b	13bc4 <_start@@Base+0x2ddc>
   13620:	mvn	r3, #0
   13624:	str	r3, [sp, #4]
   13628:	mov	r3, #1
   1362c:	str	r3, [sp]
   13630:	mov	r3, #1
   13634:	mov	r2, #0
   13638:	mov	r1, #5
   1363c:	ldr	r0, [fp, #-16]
   13640:	bl	1644c <flatcc_verify_vector_field@@Base>
   13644:	str	r0, [fp, #-8]
   13648:	ldr	r3, [fp, #-8]
   1364c:	cmp	r3, #0
   13650:	beq	1365c <_start@@Base+0x2874>
   13654:	ldr	r3, [fp, #-8]
   13658:	b	13bc4 <_start@@Base+0x2ddc>
   1365c:	ldr	r3, [pc, #1388]	; 13bd0 <_start@@Base+0x2de8>
   13660:	add	r3, pc, r3
   13664:	mov	r2, #0
   13668:	mov	r1, #11
   1366c:	ldr	r0, [fp, #-16]
   13670:	bl	1666c <flatcc_verify_table_vector_field@@Base>
   13674:	str	r0, [fp, #-8]
   13678:	ldr	r3, [fp, #-8]
   1367c:	cmp	r3, #0
   13680:	beq	1368c <_start@@Base+0x28a4>
   13684:	ldr	r3, [fp, #-8]
   13688:	b	13bc4 <_start@@Base+0x2ddc>
   1368c:	mov	r2, #0
   13690:	mov	r1, #10
   13694:	ldr	r0, [fp, #-16]
   13698:	bl	1650c <flatcc_verify_string_vector_field@@Base>
   1369c:	str	r0, [fp, #-8]
   136a0:	ldr	r3, [fp, #-8]
   136a4:	cmp	r3, #0
   136a8:	beq	136b4 <_start@@Base+0x28cc>
   136ac:	ldr	r3, [fp, #-8]
   136b0:	b	13bc4 <_start@@Base+0x2ddc>
   136b4:	mov	r2, #0
   136b8:	mov	r1, #28
   136bc:	ldr	r0, [fp, #-16]
   136c0:	bl	1650c <flatcc_verify_string_vector_field@@Base>
   136c4:	str	r0, [fp, #-8]
   136c8:	ldr	r3, [fp, #-8]
   136cc:	cmp	r3, #0
   136d0:	beq	136dc <_start@@Base+0x28f4>
   136d4:	ldr	r3, [fp, #-8]
   136d8:	b	13bc4 <_start@@Base+0x2ddc>
   136dc:	mvn	r3, #0
   136e0:	str	r3, [sp, #4]
   136e4:	mov	r3, #1
   136e8:	str	r3, [sp]
   136ec:	mov	r3, #1
   136f0:	mov	r2, #0
   136f4:	mov	r1, #24
   136f8:	ldr	r0, [fp, #-16]
   136fc:	bl	1644c <flatcc_verify_vector_field@@Base>
   13700:	str	r0, [fp, #-8]
   13704:	ldr	r3, [fp, #-8]
   13708:	cmp	r3, #0
   1370c:	beq	13718 <_start@@Base+0x2930>
   13710:	ldr	r3, [fp, #-8]
   13714:	b	13bc4 <_start@@Base+0x2ddc>
   13718:	mvn	r3, #-536870912	; 0xe0000000
   1371c:	str	r3, [sp, #4]
   13720:	mov	r3, #4
   13724:	str	r3, [sp]
   13728:	mov	r3, #8
   1372c:	mov	r2, #0
   13730:	mov	r1, #29
   13734:	ldr	r0, [fp, #-16]
   13738:	bl	1644c <flatcc_verify_vector_field@@Base>
   1373c:	str	r0, [fp, #-8]
   13740:	ldr	r3, [fp, #-8]
   13744:	cmp	r3, #0
   13748:	beq	13754 <_start@@Base+0x296c>
   1374c:	ldr	r3, [fp, #-8]
   13750:	b	13bc4 <_start@@Base+0x2ddc>
   13754:	ldr	r3, [pc, #1144]	; 13bd4 <_start@@Base+0x2dec>
   13758:	add	r3, pc, r3
   1375c:	mov	r2, #0
   13760:	mov	r1, #12
   13764:	ldr	r0, [fp, #-16]
   13768:	bl	165b0 <flatcc_verify_table_field@@Base>
   1376c:	str	r0, [fp, #-8]
   13770:	ldr	r3, [fp, #-8]
   13774:	cmp	r3, #0
   13778:	beq	13784 <_start@@Base+0x299c>
   1377c:	ldr	r3, [fp, #-8]
   13780:	b	13bc4 <_start@@Base+0x2ddc>
   13784:	ldr	r3, [pc, #1100]	; 13bd8 <_start@@Base+0x2df0>
   13788:	add	r3, pc, r3
   1378c:	mov	r2, #0
   13790:	mov	r1, #8
   13794:	ldr	r0, [fp, #-16]
   13798:	bl	16ef0 <flatcc_verify_union_field@@Base>
   1379c:	str	r0, [fp, #-8]
   137a0:	ldr	r3, [fp, #-8]
   137a4:	cmp	r3, #0
   137a8:	beq	137b4 <_start@@Base+0x29cc>
   137ac:	ldr	r3, [fp, #-8]
   137b0:	b	13bc4 <_start@@Base+0x2ddc>
   137b4:	mvn	r3, #-1073741824	; 0xc0000000
   137b8:	str	r3, [sp, #4]
   137bc:	mov	r3, #2
   137c0:	str	r3, [sp]
   137c4:	mov	r3, #4
   137c8:	mov	r2, #0
   137cc:	mov	r1, #9
   137d0:	ldr	r0, [fp, #-16]
   137d4:	bl	1644c <flatcc_verify_vector_field@@Base>
   137d8:	str	r0, [fp, #-8]
   137dc:	ldr	r3, [fp, #-8]
   137e0:	cmp	r3, #0
   137e4:	beq	137f0 <_start@@Base+0x2a08>
   137e8:	ldr	r3, [fp, #-8]
   137ec:	b	13bc4 <_start@@Base+0x2ddc>
   137f0:	mvn	r3, #-1073741824	; 0xc0000000
   137f4:	str	r3, [sp, #4]
   137f8:	mov	r3, #2
   137fc:	str	r3, [sp]
   13800:	mov	r3, #4
   13804:	mov	r2, #0
   13808:	mov	r1, #31
   1380c:	ldr	r0, [fp, #-16]
   13810:	bl	1644c <flatcc_verify_vector_field@@Base>
   13814:	str	r0, [fp, #-8]
   13818:	ldr	r3, [fp, #-8]
   1381c:	cmp	r3, #0
   13820:	beq	1382c <_start@@Base+0x2a44>
   13824:	ldr	r3, [fp, #-8]
   13828:	b	13bc4 <_start@@Base+0x2ddc>
   1382c:	ldr	r3, [pc, #936]	; 13bdc <_start@@Base+0x2df4>
   13830:	add	r3, pc, r3
   13834:	str	r3, [sp, #4]
   13838:	mov	r3, #1
   1383c:	str	r3, [sp]
   13840:	mov	r3, #0
   13844:	mov	r2, #0
   13848:	mov	r1, #13
   1384c:	ldr	r0, [fp, #-16]
   13850:	bl	16d94 <flatcc_verify_table_as_nested_root@@Base>
   13854:	str	r0, [fp, #-8]
   13858:	ldr	r3, [fp, #-8]
   1385c:	cmp	r3, #0
   13860:	beq	1386c <_start@@Base+0x2a84>
   13864:	ldr	r3, [fp, #-8]
   13868:	b	13bc4 <_start@@Base+0x2ddc>
   1386c:	ldr	r3, [pc, #876]	; 13be0 <_start@@Base+0x2df8>
   13870:	add	r3, pc, r3
   13874:	mov	r2, #0
   13878:	mov	r1, #14
   1387c:	ldr	r0, [fp, #-16]
   13880:	bl	165b0 <flatcc_verify_table_field@@Base>
   13884:	str	r0, [fp, #-8]
   13888:	ldr	r3, [fp, #-8]
   1388c:	cmp	r3, #0
   13890:	beq	1389c <_start@@Base+0x2ab4>
   13894:	ldr	r3, [fp, #-8]
   13898:	b	13bc4 <_start@@Base+0x2ddc>
   1389c:	mov	r3, #1
   138a0:	mov	r2, #1
   138a4:	mov	r1, #15
   138a8:	ldr	r0, [fp, #-16]
   138ac:	bl	16330 <flatcc_verify_field@@Base>
   138b0:	str	r0, [fp, #-8]
   138b4:	ldr	r3, [fp, #-8]
   138b8:	cmp	r3, #0
   138bc:	beq	138c8 <_start@@Base+0x2ae0>
   138c0:	ldr	r3, [fp, #-8]
   138c4:	b	13bc4 <_start@@Base+0x2ddc>
   138c8:	mov	r3, #4
   138cc:	mov	r2, #4
   138d0:	mov	r1, #16
   138d4:	ldr	r0, [fp, #-16]
   138d8:	bl	16330 <flatcc_verify_field@@Base>
   138dc:	str	r0, [fp, #-8]
   138e0:	ldr	r3, [fp, #-8]
   138e4:	cmp	r3, #0
   138e8:	beq	138f4 <_start@@Base+0x2b0c>
   138ec:	ldr	r3, [fp, #-8]
   138f0:	b	13bc4 <_start@@Base+0x2ddc>
   138f4:	mov	r3, #4
   138f8:	mov	r2, #4
   138fc:	mov	r1, #17
   13900:	ldr	r0, [fp, #-16]
   13904:	bl	16330 <flatcc_verify_field@@Base>
   13908:	str	r0, [fp, #-8]
   1390c:	ldr	r3, [fp, #-8]
   13910:	cmp	r3, #0
   13914:	beq	13920 <_start@@Base+0x2b38>
   13918:	ldr	r3, [fp, #-8]
   1391c:	b	13bc4 <_start@@Base+0x2ddc>
   13920:	mov	r3, #8
   13924:	mov	r2, #8
   13928:	mov	r1, #18
   1392c:	ldr	r0, [fp, #-16]
   13930:	bl	16330 <flatcc_verify_field@@Base>
   13934:	str	r0, [fp, #-8]
   13938:	ldr	r3, [fp, #-8]
   1393c:	cmp	r3, #0
   13940:	beq	1394c <_start@@Base+0x2b64>
   13944:	ldr	r3, [fp, #-8]
   13948:	b	13bc4 <_start@@Base+0x2ddc>
   1394c:	mov	r3, #8
   13950:	mov	r2, #8
   13954:	mov	r1, #19
   13958:	ldr	r0, [fp, #-16]
   1395c:	bl	16330 <flatcc_verify_field@@Base>
   13960:	str	r0, [fp, #-8]
   13964:	ldr	r3, [fp, #-8]
   13968:	cmp	r3, #0
   1396c:	beq	13978 <_start@@Base+0x2b90>
   13970:	ldr	r3, [fp, #-8]
   13974:	b	13bc4 <_start@@Base+0x2ddc>
   13978:	mov	r3, #4
   1397c:	mov	r2, #4
   13980:	mov	r1, #20
   13984:	ldr	r0, [fp, #-16]
   13988:	bl	16330 <flatcc_verify_field@@Base>
   1398c:	str	r0, [fp, #-8]
   13990:	ldr	r3, [fp, #-8]
   13994:	cmp	r3, #0
   13998:	beq	139a4 <_start@@Base+0x2bbc>
   1399c:	ldr	r3, [fp, #-8]
   139a0:	b	13bc4 <_start@@Base+0x2ddc>
   139a4:	mov	r3, #4
   139a8:	mov	r2, #4
   139ac:	mov	r1, #21
   139b0:	ldr	r0, [fp, #-16]
   139b4:	bl	16330 <flatcc_verify_field@@Base>
   139b8:	str	r0, [fp, #-8]
   139bc:	ldr	r3, [fp, #-8]
   139c0:	cmp	r3, #0
   139c4:	beq	139d0 <_start@@Base+0x2be8>
   139c8:	ldr	r3, [fp, #-8]
   139cc:	b	13bc4 <_start@@Base+0x2ddc>
   139d0:	mov	r3, #8
   139d4:	mov	r2, #8
   139d8:	mov	r1, #22
   139dc:	ldr	r0, [fp, #-16]
   139e0:	bl	16330 <flatcc_verify_field@@Base>
   139e4:	str	r0, [fp, #-8]
   139e8:	ldr	r3, [fp, #-8]
   139ec:	cmp	r3, #0
   139f0:	beq	139fc <_start@@Base+0x2c14>
   139f4:	ldr	r3, [fp, #-8]
   139f8:	b	13bc4 <_start@@Base+0x2ddc>
   139fc:	mov	r3, #8
   13a00:	mov	r2, #8
   13a04:	mov	r1, #23
   13a08:	ldr	r0, [fp, #-16]
   13a0c:	bl	16330 <flatcc_verify_field@@Base>
   13a10:	str	r0, [fp, #-8]
   13a14:	ldr	r3, [fp, #-8]
   13a18:	cmp	r3, #0
   13a1c:	beq	13a28 <_start@@Base+0x2c40>
   13a20:	ldr	r3, [fp, #-8]
   13a24:	b	13bc4 <_start@@Base+0x2ddc>
   13a28:	mov	r3, #4
   13a2c:	mov	r2, #4
   13a30:	mov	r1, #25
   13a34:	ldr	r0, [fp, #-16]
   13a38:	bl	16330 <flatcc_verify_field@@Base>
   13a3c:	str	r0, [fp, #-8]
   13a40:	ldr	r3, [fp, #-8]
   13a44:	cmp	r3, #0
   13a48:	beq	13a54 <_start@@Base+0x2c6c>
   13a4c:	ldr	r3, [fp, #-8]
   13a50:	b	13bc4 <_start@@Base+0x2ddc>
   13a54:	mov	r3, #4
   13a58:	mov	r2, #4
   13a5c:	mov	r1, #26
   13a60:	ldr	r0, [fp, #-16]
   13a64:	bl	16330 <flatcc_verify_field@@Base>
   13a68:	str	r0, [fp, #-8]
   13a6c:	ldr	r3, [fp, #-8]
   13a70:	cmp	r3, #0
   13a74:	beq	13a80 <_start@@Base+0x2c98>
   13a78:	ldr	r3, [fp, #-8]
   13a7c:	b	13bc4 <_start@@Base+0x2ddc>
   13a80:	mov	r3, #4
   13a84:	mov	r2, #4
   13a88:	mov	r1, #27
   13a8c:	ldr	r0, [fp, #-16]
   13a90:	bl	16330 <flatcc_verify_field@@Base>
   13a94:	str	r0, [fp, #-8]
   13a98:	ldr	r3, [fp, #-8]
   13a9c:	cmp	r3, #0
   13aa0:	beq	13aac <_start@@Base+0x2cc4>
   13aa4:	ldr	r3, [fp, #-8]
   13aa8:	b	13bc4 <_start@@Base+0x2ddc>
   13aac:	mvn	r3, #0
   13ab0:	str	r3, [sp, #4]
   13ab4:	mov	r3, #1
   13ab8:	str	r3, [sp]
   13abc:	mov	r3, #1
   13ac0:	mov	r2, #0
   13ac4:	mov	r1, #30
   13ac8:	ldr	r0, [fp, #-16]
   13acc:	bl	1644c <flatcc_verify_vector_field@@Base>
   13ad0:	str	r0, [fp, #-8]
   13ad4:	ldr	r3, [fp, #-8]
   13ad8:	cmp	r3, #0
   13adc:	beq	13ae8 <_start@@Base+0x2d00>
   13ae0:	ldr	r3, [fp, #-8]
   13ae4:	b	13bc4 <_start@@Base+0x2ddc>
   13ae8:	mvn	r3, #-536870912	; 0xe0000000
   13aec:	str	r3, [sp, #4]
   13af0:	mov	r3, #8
   13af4:	str	r3, [sp]
   13af8:	mov	r3, #8
   13afc:	mov	r2, #0
   13b00:	mov	r1, #32
   13b04:	ldr	r0, [fp, #-16]
   13b08:	bl	1644c <flatcc_verify_vector_field@@Base>
   13b0c:	str	r0, [fp, #-8]
   13b10:	ldr	r3, [fp, #-8]
   13b14:	cmp	r3, #0
   13b18:	beq	13b24 <_start@@Base+0x2d3c>
   13b1c:	ldr	r3, [fp, #-8]
   13b20:	b	13bc4 <_start@@Base+0x2ddc>
   13b24:	mvn	r3, #-536870912	; 0xe0000000
   13b28:	str	r3, [sp, #4]
   13b2c:	mov	r3, #8
   13b30:	str	r3, [sp]
   13b34:	mov	r3, #8
   13b38:	mov	r2, #0
   13b3c:	mov	r1, #33	; 0x21
   13b40:	ldr	r0, [fp, #-16]
   13b44:	bl	1644c <flatcc_verify_vector_field@@Base>
   13b48:	str	r0, [fp, #-8]
   13b4c:	ldr	r3, [fp, #-8]
   13b50:	cmp	r3, #0
   13b54:	beq	13b60 <_start@@Base+0x2d78>
   13b58:	ldr	r3, [fp, #-8]
   13b5c:	b	13bc4 <_start@@Base+0x2ddc>
   13b60:	ldr	r3, [pc, #124]	; 13be4 <_start@@Base+0x2dfc>
   13b64:	add	r3, pc, r3
   13b68:	mov	r2, #0
   13b6c:	mov	r1, #34	; 0x22
   13b70:	ldr	r0, [fp, #-16]
   13b74:	bl	165b0 <flatcc_verify_table_field@@Base>
   13b78:	str	r0, [fp, #-8]
   13b7c:	ldr	r3, [fp, #-8]
   13b80:	cmp	r3, #0
   13b84:	beq	13b90 <_start@@Base+0x2da8>
   13b88:	ldr	r3, [fp, #-8]
   13b8c:	b	13bc4 <_start@@Base+0x2ddc>
   13b90:	ldr	r3, [pc, #80]	; 13be8 <_start@@Base+0x2e00>
   13b94:	add	r3, pc, r3
   13b98:	mov	r2, #0
   13b9c:	mov	r1, #35	; 0x23
   13ba0:	ldr	r0, [fp, #-16]
   13ba4:	bl	165b0 <flatcc_verify_table_field@@Base>
   13ba8:	str	r0, [fp, #-8]
   13bac:	ldr	r3, [fp, #-8]
   13bb0:	cmp	r3, #0
   13bb4:	beq	13bc0 <_start@@Base+0x2dd8>
   13bb8:	ldr	r3, [fp, #-8]
   13bbc:	b	13bc4 <_start@@Base+0x2ddc>
   13bc0:	mov	r3, #0
   13bc4:	mov	r0, r3
   13bc8:	sub	sp, fp, #4
   13bcc:	pop	{fp, pc}
   13bd0:			; <UNDEFINED> instruction: 0xfffffed0
   13bd4:			; <UNDEFINED> instruction: 0xfffffdd8
   13bd8:			; <UNDEFINED> instruction: 0xfffff3bc
   13bdc:			; <UNDEFINED> instruction: 0xfffffd00
   13be0:			; <UNDEFINED> instruction: 0xfffff73c
   13be4:			; <UNDEFINED> instruction: 0xfffff198
   13be8:			; <UNDEFINED> instruction: 0xfffff8c0
   13bec:	push	{fp, lr}
   13bf0:	add	fp, sp, #4
   13bf4:	sub	sp, sp, #8
   13bf8:	str	r0, [fp, #-8]
   13bfc:	str	r1, [fp, #-12]
   13c00:	ldr	r3, [pc, #36]	; 13c2c <_start@@Base+0x2e44>
   13c04:	add	r3, pc, r3
   13c08:	ldr	r2, [pc, #32]	; 13c30 <_start@@Base+0x2e48>
   13c0c:	add	r2, pc, r2
   13c10:	ldr	r1, [fp, #-12]
   13c14:	ldr	r0, [fp, #-8]
   13c18:	bl	16b60 <flatcc_verify_table_as_root@@Base>
   13c1c:	mov	r3, r0
   13c20:	mov	r0, r3
   13c24:	sub	sp, fp, #4
   13c28:	pop	{fp, pc}
   13c2c:			; <UNDEFINED> instruction: 0xfffff92c
   13c30:	andeq	r3, r0, r4, lsl #18
   13c34:	push	{fp, lr}
   13c38:	add	fp, sp, #4
   13c3c:	sub	sp, sp, #16
   13c40:	str	r0, [fp, #-8]
   13c44:	str	r1, [fp, #-12]
   13c48:	str	r2, [fp, #-16]
   13c4c:	ldr	r3, [pc, #32]	; 13c74 <_start@@Base+0x2e8c>
   13c50:	add	r3, pc, r3
   13c54:	ldr	r2, [fp, #-16]
   13c58:	ldr	r1, [fp, #-12]
   13c5c:	ldr	r0, [fp, #-8]
   13c60:	bl	16b60 <flatcc_verify_table_as_root@@Base>
   13c64:	mov	r3, r0
   13c68:	mov	r0, r3
   13c6c:	sub	sp, fp, #4
   13c70:	pop	{fp, pc}
   13c74:			; <UNDEFINED> instruction: 0xfffff8e0
   13c78:	push	{fp, lr}
   13c7c:	add	fp, sp, #4
   13c80:	sub	sp, sp, #24
   13c84:	str	r0, [fp, #-16]
   13c88:	mov	r3, #1
   13c8c:	mov	r2, #1
   13c90:	mov	r1, #0
   13c94:	ldr	r0, [fp, #-16]
   13c98:	bl	16330 <flatcc_verify_field@@Base>
   13c9c:	str	r0, [fp, #-8]
   13ca0:	ldr	r3, [fp, #-8]
   13ca4:	cmp	r3, #0
   13ca8:	beq	13cb4 <_start@@Base+0x2ecc>
   13cac:	ldr	r3, [fp, #-8]
   13cb0:	b	13ebc <_start@@Base+0x30d4>
   13cb4:	mov	r3, #1
   13cb8:	mov	r2, #1
   13cbc:	mov	r1, #1
   13cc0:	ldr	r0, [fp, #-16]
   13cc4:	bl	16330 <flatcc_verify_field@@Base>
   13cc8:	str	r0, [fp, #-8]
   13ccc:	ldr	r3, [fp, #-8]
   13cd0:	cmp	r3, #0
   13cd4:	beq	13ce0 <_start@@Base+0x2ef8>
   13cd8:	ldr	r3, [fp, #-8]
   13cdc:	b	13ebc <_start@@Base+0x30d4>
   13ce0:	mov	r3, #2
   13ce4:	mov	r2, #2
   13ce8:	mov	r1, #2
   13cec:	ldr	r0, [fp, #-16]
   13cf0:	bl	16330 <flatcc_verify_field@@Base>
   13cf4:	str	r0, [fp, #-8]
   13cf8:	ldr	r3, [fp, #-8]
   13cfc:	cmp	r3, #0
   13d00:	beq	13d0c <_start@@Base+0x2f24>
   13d04:	ldr	r3, [fp, #-8]
   13d08:	b	13ebc <_start@@Base+0x30d4>
   13d0c:	mov	r3, #2
   13d10:	mov	r2, #2
   13d14:	mov	r1, #3
   13d18:	ldr	r0, [fp, #-16]
   13d1c:	bl	16330 <flatcc_verify_field@@Base>
   13d20:	str	r0, [fp, #-8]
   13d24:	ldr	r3, [fp, #-8]
   13d28:	cmp	r3, #0
   13d2c:	beq	13d38 <_start@@Base+0x2f50>
   13d30:	ldr	r3, [fp, #-8]
   13d34:	b	13ebc <_start@@Base+0x30d4>
   13d38:	mov	r3, #4
   13d3c:	mov	r2, #4
   13d40:	mov	r1, #4
   13d44:	ldr	r0, [fp, #-16]
   13d48:	bl	16330 <flatcc_verify_field@@Base>
   13d4c:	str	r0, [fp, #-8]
   13d50:	ldr	r3, [fp, #-8]
   13d54:	cmp	r3, #0
   13d58:	beq	13d64 <_start@@Base+0x2f7c>
   13d5c:	ldr	r3, [fp, #-8]
   13d60:	b	13ebc <_start@@Base+0x30d4>
   13d64:	mov	r3, #4
   13d68:	mov	r2, #4
   13d6c:	mov	r1, #5
   13d70:	ldr	r0, [fp, #-16]
   13d74:	bl	16330 <flatcc_verify_field@@Base>
   13d78:	str	r0, [fp, #-8]
   13d7c:	ldr	r3, [fp, #-8]
   13d80:	cmp	r3, #0
   13d84:	beq	13d90 <_start@@Base+0x2fa8>
   13d88:	ldr	r3, [fp, #-8]
   13d8c:	b	13ebc <_start@@Base+0x30d4>
   13d90:	mov	r3, #8
   13d94:	mov	r2, #8
   13d98:	mov	r1, #6
   13d9c:	ldr	r0, [fp, #-16]
   13da0:	bl	16330 <flatcc_verify_field@@Base>
   13da4:	str	r0, [fp, #-8]
   13da8:	ldr	r3, [fp, #-8]
   13dac:	cmp	r3, #0
   13db0:	beq	13dbc <_start@@Base+0x2fd4>
   13db4:	ldr	r3, [fp, #-8]
   13db8:	b	13ebc <_start@@Base+0x30d4>
   13dbc:	mov	r3, #8
   13dc0:	mov	r2, #8
   13dc4:	mov	r1, #7
   13dc8:	ldr	r0, [fp, #-16]
   13dcc:	bl	16330 <flatcc_verify_field@@Base>
   13dd0:	str	r0, [fp, #-8]
   13dd4:	ldr	r3, [fp, #-8]
   13dd8:	cmp	r3, #0
   13ddc:	beq	13de8 <_start@@Base+0x3000>
   13de0:	ldr	r3, [fp, #-8]
   13de4:	b	13ebc <_start@@Base+0x30d4>
   13de8:	mov	r3, #4
   13dec:	mov	r2, #4
   13df0:	mov	r1, #8
   13df4:	ldr	r0, [fp, #-16]
   13df8:	bl	16330 <flatcc_verify_field@@Base>
   13dfc:	str	r0, [fp, #-8]
   13e00:	ldr	r3, [fp, #-8]
   13e04:	cmp	r3, #0
   13e08:	beq	13e14 <_start@@Base+0x302c>
   13e0c:	ldr	r3, [fp, #-8]
   13e10:	b	13ebc <_start@@Base+0x30d4>
   13e14:	mov	r3, #8
   13e18:	mov	r2, #8
   13e1c:	mov	r1, #9
   13e20:	ldr	r0, [fp, #-16]
   13e24:	bl	16330 <flatcc_verify_field@@Base>
   13e28:	str	r0, [fp, #-8]
   13e2c:	ldr	r3, [fp, #-8]
   13e30:	cmp	r3, #0
   13e34:	beq	13e40 <_start@@Base+0x3058>
   13e38:	ldr	r3, [fp, #-8]
   13e3c:	b	13ebc <_start@@Base+0x30d4>
   13e40:	mvn	r3, #0
   13e44:	str	r3, [sp, #4]
   13e48:	mov	r3, #1
   13e4c:	str	r3, [sp]
   13e50:	mov	r3, #1
   13e54:	mov	r2, #0
   13e58:	mov	r1, #10
   13e5c:	ldr	r0, [fp, #-16]
   13e60:	bl	1644c <flatcc_verify_vector_field@@Base>
   13e64:	str	r0, [fp, #-8]
   13e68:	ldr	r3, [fp, #-8]
   13e6c:	cmp	r3, #0
   13e70:	beq	13e7c <_start@@Base+0x3094>
   13e74:	ldr	r3, [fp, #-8]
   13e78:	b	13ebc <_start@@Base+0x30d4>
   13e7c:	mvn	r3, #-536870912	; 0xe0000000
   13e80:	str	r3, [sp, #4]
   13e84:	mov	r3, #8
   13e88:	str	r3, [sp]
   13e8c:	mov	r3, #8
   13e90:	mov	r2, #0
   13e94:	mov	r1, #11
   13e98:	ldr	r0, [fp, #-16]
   13e9c:	bl	1644c <flatcc_verify_vector_field@@Base>
   13ea0:	str	r0, [fp, #-8]
   13ea4:	ldr	r3, [fp, #-8]
   13ea8:	cmp	r3, #0
   13eac:	beq	13eb8 <_start@@Base+0x30d0>
   13eb0:	ldr	r3, [fp, #-8]
   13eb4:	b	13ebc <_start@@Base+0x30d4>
   13eb8:	mov	r3, #0
   13ebc:	mov	r0, r3
   13ec0:	sub	sp, fp, #4
   13ec4:	pop	{fp, pc}
   13ec8:	push	{fp, lr}
   13ecc:	add	fp, sp, #4
   13ed0:	sub	sp, sp, #16
   13ed4:	str	r0, [fp, #-16]
   13ed8:	mov	r3, #4
   13edc:	mov	r2, #4
   13ee0:	mov	r1, #0
   13ee4:	ldr	r0, [fp, #-16]
   13ee8:	bl	16330 <flatcc_verify_field@@Base>
   13eec:	str	r0, [fp, #-8]
   13ef0:	ldr	r3, [fp, #-8]
   13ef4:	cmp	r3, #0
   13ef8:	beq	13f04 <_start@@Base+0x311c>
   13efc:	ldr	r3, [fp, #-8]
   13f00:	b	13f08 <_start@@Base+0x3120>
   13f04:	mov	r3, #0
   13f08:	mov	r0, r3
   13f0c:	sub	sp, fp, #4
   13f10:	pop	{fp, pc}
   13f14:	push	{fp, lr}
   13f18:	add	fp, sp, #4
   13f1c:	sub	sp, sp, #16
   13f20:	str	r0, [fp, #-16]
   13f24:	ldr	r3, [pc, #248]	; 14024 <_start@@Base+0x323c>
   13f28:	add	r3, pc, r3
   13f2c:	mov	r2, #0
   13f30:	mov	r1, #1
   13f34:	ldr	r0, [fp, #-16]
   13f38:	bl	16ef0 <flatcc_verify_union_field@@Base>
   13f3c:	str	r0, [fp, #-8]
   13f40:	ldr	r3, [fp, #-8]
   13f44:	cmp	r3, #0
   13f48:	beq	13f54 <_start@@Base+0x316c>
   13f4c:	ldr	r3, [fp, #-8]
   13f50:	b	14018 <_start@@Base+0x3230>
   13f54:	ldr	r3, [pc, #204]	; 14028 <_start@@Base+0x3240>
   13f58:	add	r3, pc, r3
   13f5c:	mov	r2, #0
   13f60:	mov	r1, #3
   13f64:	ldr	r0, [fp, #-16]
   13f68:	bl	16ef0 <flatcc_verify_union_field@@Base>
   13f6c:	str	r0, [fp, #-8]
   13f70:	ldr	r3, [fp, #-8]
   13f74:	cmp	r3, #0
   13f78:	beq	13f84 <_start@@Base+0x319c>
   13f7c:	ldr	r3, [fp, #-8]
   13f80:	b	14018 <_start@@Base+0x3230>
   13f84:	ldr	r3, [pc, #160]	; 1402c <_start@@Base+0x3244>
   13f88:	add	r3, pc, r3
   13f8c:	mov	r2, #0
   13f90:	mov	r1, #5
   13f94:	ldr	r0, [fp, #-16]
   13f98:	bl	16ef0 <flatcc_verify_union_field@@Base>
   13f9c:	str	r0, [fp, #-8]
   13fa0:	ldr	r3, [fp, #-8]
   13fa4:	cmp	r3, #0
   13fa8:	beq	13fb4 <_start@@Base+0x31cc>
   13fac:	ldr	r3, [fp, #-8]
   13fb0:	b	14018 <_start@@Base+0x3230>
   13fb4:	ldr	r3, [pc, #116]	; 14030 <_start@@Base+0x3248>
   13fb8:	add	r3, pc, r3
   13fbc:	mov	r2, #0
   13fc0:	mov	r1, #7
   13fc4:	ldr	r0, [fp, #-16]
   13fc8:	bl	16ef0 <flatcc_verify_union_field@@Base>
   13fcc:	str	r0, [fp, #-8]
   13fd0:	ldr	r3, [fp, #-8]
   13fd4:	cmp	r3, #0
   13fd8:	beq	13fe4 <_start@@Base+0x31fc>
   13fdc:	ldr	r3, [fp, #-8]
   13fe0:	b	14018 <_start@@Base+0x3230>
   13fe4:	ldr	r3, [pc, #72]	; 14034 <_start@@Base+0x324c>
   13fe8:	add	r3, pc, r3
   13fec:	mov	r2, #0
   13ff0:	mov	r1, #9
   13ff4:	ldr	r0, [fp, #-16]
   13ff8:	bl	1714c <flatcc_verify_union_vector_field@@Base>
   13ffc:	str	r0, [fp, #-8]
   14000:	ldr	r3, [fp, #-8]
   14004:	cmp	r3, #0
   14008:	beq	14014 <_start@@Base+0x322c>
   1400c:	ldr	r3, [fp, #-8]
   14010:	b	14018 <_start@@Base+0x3230>
   14014:	mov	r3, #0
   14018:	mov	r0, r3
   1401c:	sub	sp, fp, #4
   14020:	pop	{fp, pc}
   14024:			; <UNDEFINED> instruction: 0xffffece4
   14028:			; <UNDEFINED> instruction: 0xffffecb4
   1402c:			; <UNDEFINED> instruction: 0xffffec84
   14030:			; <UNDEFINED> instruction: 0xffffec54
   14034:			; <UNDEFINED> instruction: 0xffffec24
   14038:	push	{fp, lr}
   1403c:	add	fp, sp, #4
   14040:	sub	sp, sp, #40	; 0x28
   14044:	str	r0, [fp, #-32]	; 0xffffffe0
   14048:	str	r1, [fp, #-36]	; 0xffffffdc
   1404c:	str	r2, [fp, #-40]	; 0xffffffd8
   14050:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14054:	cmp	r3, #0
   14058:	bne	14064 <_start@@Base+0x327c>
   1405c:	sub	r3, fp, #28
   14060:	b	14068 <_start@@Base+0x3280>
   14064:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14068:	str	r3, [fp, #-40]	; 0xffffffd8
   1406c:	ldr	r3, [pc, #396]	; 14200 <_start@@Base+0x3418>
   14070:	add	r3, pc, r3
   14074:	mov	r1, r3
   14078:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1407c:	bl	10cf4 <fopen@plt>
   14080:	str	r0, [fp, #-20]	; 0xffffffec
   14084:	mov	r3, #0
   14088:	str	r3, [fp, #-8]
   1408c:	mov	r3, #0
   14090:	str	r3, [fp, #-16]
   14094:	ldr	r3, [fp, #-20]	; 0xffffffec
   14098:	cmp	r3, #0
   1409c:	beq	141a0 <_start@@Base+0x33b8>
   140a0:	mov	r2, #2
   140a4:	mov	r1, #0
   140a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   140ac:	bl	10dc0 <fseek@plt>
   140b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   140b4:	bl	10d18 <ftell@plt>
   140b8:	mov	r3, r0
   140bc:	str	r3, [fp, #-8]
   140c0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   140c4:	ldr	r2, [fp, #-8]
   140c8:	str	r2, [r3]
   140cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   140d0:	cmp	r3, #0
   140d4:	beq	140e8 <_start@@Base+0x3300>
   140d8:	ldr	r2, [fp, #-8]
   140dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   140e0:	cmp	r2, r3
   140e4:	bhi	141a8 <_start@@Base+0x33c0>
   140e8:	ldr	r0, [fp, #-20]	; 0xffffffec
   140ec:	bl	10d24 <rewind@plt>
   140f0:	ldr	r3, [fp, #-8]
   140f4:	cmp	r3, #0
   140f8:	beq	14104 <_start@@Base+0x331c>
   140fc:	ldr	r3, [fp, #-8]
   14100:	b	14108 <_start@@Base+0x3320>
   14104:	mov	r3, #1
   14108:	mov	r0, r3
   1410c:	bl	10d54 <malloc@plt>
   14110:	mov	r3, r0
   14114:	str	r3, [fp, #-16]
   14118:	ldr	r3, [fp, #-16]
   1411c:	cmp	r3, #0
   14120:	beq	141b0 <_start@@Base+0x33c8>
   14124:	mov	r3, #0
   14128:	str	r3, [fp, #-12]
   1412c:	b	14140 <_start@@Base+0x3358>
   14130:	ldr	r2, [fp, #-12]
   14134:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14138:	add	r3, r2, r3
   1413c:	str	r3, [fp, #-12]
   14140:	ldr	r2, [fp, #-16]
   14144:	ldr	r3, [fp, #-12]
   14148:	add	r0, r2, r3
   1414c:	ldr	r2, [fp, #-8]
   14150:	ldr	r3, [fp, #-12]
   14154:	sub	r2, r2, r3
   14158:	ldr	r3, [fp, #-20]	; 0xffffffec
   1415c:	mov	r1, #1
   14160:	bl	10d3c <fread@plt>
   14164:	str	r0, [fp, #-24]	; 0xffffffe8
   14168:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1416c:	cmp	r3, #0
   14170:	bne	14130 <_start@@Base+0x3348>
   14174:	ldr	r2, [fp, #-12]
   14178:	ldr	r3, [fp, #-8]
   1417c:	cmp	r2, r3
   14180:	bne	141b8 <_start@@Base+0x33d0>
   14184:	ldr	r0, [fp, #-20]	; 0xffffffec
   14188:	bl	10da8 <fclose@plt>
   1418c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14190:	ldr	r2, [fp, #-8]
   14194:	str	r2, [r3]
   14198:	ldr	r3, [fp, #-16]
   1419c:	b	141f4 <_start@@Base+0x340c>
   141a0:	nop			; (mov r0, r0)
   141a4:	b	141bc <_start@@Base+0x33d4>
   141a8:	nop			; (mov r0, r0)
   141ac:	b	141bc <_start@@Base+0x33d4>
   141b0:	nop			; (mov r0, r0)
   141b4:	b	141bc <_start@@Base+0x33d4>
   141b8:	nop			; (mov r0, r0)
   141bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   141c0:	cmp	r3, #0
   141c4:	beq	141d0 <_start@@Base+0x33e8>
   141c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   141cc:	bl	10da8 <fclose@plt>
   141d0:	ldr	r3, [fp, #-16]
   141d4:	cmp	r3, #0
   141d8:	beq	141e4 <_start@@Base+0x33fc>
   141dc:	ldr	r0, [fp, #-16]
   141e0:	bl	10d00 <free@plt>
   141e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   141e8:	ldr	r2, [fp, #-8]
   141ec:	str	r2, [r3]
   141f0:	mov	r3, #0
   141f4:	mov	r0, r3
   141f8:	sub	sp, fp, #4
   141fc:	pop	{fp, pc}
   14200:	strdeq	r3, [r0], -r4
   14204:	push	{fp, lr}
   14208:	add	fp, sp, #4
   1420c:	sub	sp, sp, #48	; 0x30
   14210:	str	r0, [fp, #-40]	; 0xffffffd8
   14214:	str	r1, [fp, #-44]	; 0xffffffd4
   14218:	str	r2, [fp, #-48]	; 0xffffffd0
   1421c:	str	r3, [fp, #-52]	; 0xffffffcc
   14220:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14224:	str	r3, [fp, #-12]
   14228:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1422c:	cmp	r3, #0
   14230:	beq	1424c <_start@@Base+0x3464>
   14234:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14238:	ldr	r3, [pc, #440]	; 143f8 <_start@@Base+0x3610>
   1423c:	add	r3, pc, r3
   14240:	mov	r1, r3
   14244:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14248:	bl	10d84 <fprintf@plt>
   1424c:	mov	r3, #0
   14250:	str	r3, [fp, #-8]
   14254:	b	14388 <_start@@Base+0x35a0>
   14258:	ldr	r3, [fp, #-8]
   1425c:	and	r3, r3, #15
   14260:	cmp	r3, #0
   14264:	bne	142ac <_start@@Base+0x34c4>
   14268:	ldr	r3, [fp, #-8]
   1426c:	cmp	r3, #0
   14270:	beq	14290 <_start@@Base+0x34a8>
   14274:	sub	r3, fp, #32
   14278:	mov	r2, r3
   1427c:	ldr	r3, [pc, #376]	; 143fc <_start@@Base+0x3614>
   14280:	add	r3, pc, r3
   14284:	mov	r1, r3
   14288:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1428c:	bl	10d84 <fprintf@plt>
   14290:	ldr	r2, [fp, #-8]
   14294:	ldr	r3, [pc, #356]	; 14400 <_start@@Base+0x3618>
   14298:	add	r3, pc, r3
   1429c:	mov	r1, r3
   142a0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   142a4:	bl	10d84 <fprintf@plt>
   142a8:	b	142c8 <_start@@Base+0x34e0>
   142ac:	ldr	r3, [fp, #-8]
   142b0:	and	r3, r3, #7
   142b4:	cmp	r3, #0
   142b8:	bne	142c8 <_start@@Base+0x34e0>
   142bc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   142c0:	mov	r0, #32
   142c4:	bl	10db4 <fputc@plt>
   142c8:	ldr	r2, [fp, #-12]
   142cc:	ldr	r3, [fp, #-8]
   142d0:	add	r3, r2, r3
   142d4:	ldrb	r3, [r3]
   142d8:	mov	r2, r3
   142dc:	ldr	r3, [pc, #288]	; 14404 <_start@@Base+0x361c>
   142e0:	add	r3, pc, r3
   142e4:	mov	r1, r3
   142e8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   142ec:	bl	10d84 <fprintf@plt>
   142f0:	ldr	r2, [fp, #-12]
   142f4:	ldr	r3, [fp, #-8]
   142f8:	add	r3, r2, r3
   142fc:	ldrb	r3, [r3]
   14300:	cmp	r3, #31
   14304:	bls	14320 <_start@@Base+0x3538>
   14308:	ldr	r2, [fp, #-12]
   1430c:	ldr	r3, [fp, #-8]
   14310:	add	r3, r2, r3
   14314:	ldrb	r3, [r3]
   14318:	cmp	r3, #126	; 0x7e
   1431c:	bls	1433c <_start@@Base+0x3554>
   14320:	ldr	r3, [fp, #-8]
   14324:	and	r3, r3, #15
   14328:	sub	r2, fp, #4
   1432c:	add	r3, r2, r3
   14330:	mov	r2, #46	; 0x2e
   14334:	strb	r2, [r3, #-28]	; 0xffffffe4
   14338:	b	14360 <_start@@Base+0x3578>
   1433c:	ldr	r3, [fp, #-8]
   14340:	and	r3, r3, #15
   14344:	ldr	r1, [fp, #-12]
   14348:	ldr	r2, [fp, #-8]
   1434c:	add	r2, r1, r2
   14350:	ldrb	r2, [r2]
   14354:	sub	r1, fp, #4
   14358:	add	r3, r1, r3
   1435c:	strb	r2, [r3, #-28]	; 0xffffffe4
   14360:	ldr	r3, [fp, #-8]
   14364:	and	r3, r3, #15
   14368:	add	r3, r3, #1
   1436c:	sub	r2, fp, #4
   14370:	add	r3, r2, r3
   14374:	mov	r2, #0
   14378:	strb	r2, [r3, #-28]	; 0xffffffe4
   1437c:	ldr	r3, [fp, #-8]
   14380:	add	r3, r3, #1
   14384:	str	r3, [fp, #-8]
   14388:	ldr	r2, [fp, #-8]
   1438c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14390:	cmp	r2, r3
   14394:	bcc	14258 <_start@@Base+0x3470>
   14398:	b	143c0 <_start@@Base+0x35d8>
   1439c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   143a0:	mov	r2, #3
   143a4:	mov	r1, #1
   143a8:	ldr	r0, [pc, #88]	; 14408 <_start@@Base+0x3620>
   143ac:	add	r0, pc, r0
   143b0:	bl	10d30 <fwrite@plt>
   143b4:	ldr	r3, [fp, #-8]
   143b8:	add	r3, r3, #1
   143bc:	str	r3, [fp, #-8]
   143c0:	ldr	r3, [fp, #-8]
   143c4:	and	r3, r3, #15
   143c8:	cmp	r3, #0
   143cc:	bne	1439c <_start@@Base+0x35b4>
   143d0:	sub	r3, fp, #32
   143d4:	mov	r2, r3
   143d8:	ldr	r3, [pc, #44]	; 1440c <_start@@Base+0x3624>
   143dc:	add	r3, pc, r3
   143e0:	mov	r1, r3
   143e4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   143e8:	bl	10d84 <fprintf@plt>
   143ec:	nop			; (mov r0, r0)
   143f0:	sub	sp, fp, #4
   143f4:	pop	{fp, pc}
   143f8:	andeq	r3, r0, ip, lsr #6
   143fc:	strdeq	r3, [r0], -r0
   14400:	andeq	r3, r0, r0, ror #5
   14404:	andeq	r3, r0, r0, lsr #5
   14408:	ldrdeq	r3, [r0], -ip
   1440c:	muleq	r0, r4, r1

00014410 <verify_monster@@Base>:
   14410:	push	{fp, lr}
   14414:	add	fp, sp, #4
   14418:	sub	sp, sp, #56	; 0x38
   1441c:	str	r0, [fp, #-56]	; 0xffffffc8
   14420:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14424:	bl	11a88 <_start@@Base+0xca0>
   14428:	str	r0, [fp, #-12]
   1442c:	ldr	r3, [fp, #-12]
   14430:	cmp	r3, #0
   14434:	bne	14450 <verify_monster@@Base+0x40>
   14438:	ldr	r3, [pc, #1196]	; 148ec <verify_monster@@Base+0x4dc>
   1443c:	add	r3, pc, r3
   14440:	mov	r0, r3
   14444:	bl	10d48 <puts@plt>
   14448:	mvn	r3, #0
   1444c:	b	14c5c <verify_monster@@Base+0x84c>
   14450:	ldr	r0, [fp, #-12]
   14454:	bl	11bdc <_start@@Base+0xdf4>
   14458:	mov	r3, r0
   1445c:	cmp	r3, #80	; 0x50
   14460:	beq	1447c <verify_monster@@Base+0x6c>
   14464:	ldr	r3, [pc, #1156]	; 148f0 <verify_monster@@Base+0x4e0>
   14468:	add	r3, pc, r3
   1446c:	mov	r0, r3
   14470:	bl	10d48 <puts@plt>
   14474:	mvn	r3, #0
   14478:	b	14c5c <verify_monster@@Base+0x84c>
   1447c:	ldr	r0, [fp, #-12]
   14480:	bl	11af4 <_start@@Base+0xd0c>
   14484:	str	r0, [fp, #-16]
   14488:	ldr	r3, [fp, #-16]
   1448c:	cmp	r3, #0
   14490:	bne	144ac <verify_monster@@Base+0x9c>
   14494:	ldr	r3, [pc, #1112]	; 148f4 <verify_monster@@Base+0x4e4>
   14498:	add	r3, pc, r3
   1449c:	mov	r0, r3
   144a0:	bl	10d48 <puts@plt>
   144a4:	mvn	r3, #0
   144a8:	b	14c5c <verify_monster@@Base+0x84c>
   144ac:	ldr	r2, [fp, #-16]
   144b0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   144b4:	sub	r3, r2, r3
   144b8:	str	r3, [fp, #-20]	; 0xffffffec
   144bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   144c0:	and	r3, r3, #15
   144c4:	cmp	r3, #0
   144c8:	beq	144e4 <verify_monster@@Base+0xd4>
   144cc:	ldr	r3, [pc, #1060]	; 148f8 <verify_monster@@Base+0x4e8>
   144d0:	add	r3, pc, r3
   144d4:	mov	r0, r3
   144d8:	bl	10d48 <puts@plt>
   144dc:	mvn	r3, #0
   144e0:	b	14c5c <verify_monster@@Base+0x84c>
   144e4:	ldr	r0, [fp, #-16]
   144e8:	bl	118e4 <_start@@Base+0xafc>
   144ec:	vmov.f32	s14, s0
   144f0:	vldr	s15, [pc, #1000]	; 148e0 <verify_monster@@Base+0x4d0>
   144f4:	vcmp.f32	s14, s15
   144f8:	vmrs	APSR_nzcv, fpscr
   144fc:	beq	14518 <verify_monster@@Base+0x108>
   14500:	ldr	r3, [pc, #1012]	; 148fc <verify_monster@@Base+0x4ec>
   14504:	add	r3, pc, r3
   14508:	mov	r0, r3
   1450c:	bl	10d48 <puts@plt>
   14510:	mvn	r3, #0
   14514:	b	14c5c <verify_monster@@Base+0x84c>
   14518:	ldr	r0, [fp, #-16]
   1451c:	bl	11928 <_start@@Base+0xb40>
   14520:	vmov.f32	s14, s0
   14524:	vldr	s15, [pc, #952]	; 148e4 <verify_monster@@Base+0x4d4>
   14528:	vcmp.f32	s14, s15
   1452c:	vmrs	APSR_nzcv, fpscr
   14530:	beq	1454c <verify_monster@@Base+0x13c>
   14534:	ldr	r3, [pc, #964]	; 14900 <verify_monster@@Base+0x4f0>
   14538:	add	r3, pc, r3
   1453c:	mov	r0, r3
   14540:	bl	10d48 <puts@plt>
   14544:	mvn	r3, #0
   14548:	b	14c5c <verify_monster@@Base+0x84c>
   1454c:	ldr	r0, [fp, #-16]
   14550:	bl	11970 <_start@@Base+0xb88>
   14554:	vmov.f32	s14, s0
   14558:	vldr	s15, [pc, #904]	; 148e8 <verify_monster@@Base+0x4d8>
   1455c:	vcmp.f32	s14, s15
   14560:	vmrs	APSR_nzcv, fpscr
   14564:	beq	14580 <verify_monster@@Base+0x170>
   14568:	ldr	r3, [pc, #916]	; 14904 <verify_monster@@Base+0x4f4>
   1456c:	add	r3, pc, r3
   14570:	mov	r0, r3
   14574:	bl	10d48 <puts@plt>
   14578:	mvn	r3, #0
   1457c:	b	14c5c <verify_monster@@Base+0x84c>
   14580:	ldr	r0, [fp, #-16]
   14584:	bl	119b8 <_start@@Base+0xbd0>
   14588:	vmov.f64	d6, d0
   1458c:	vldr	d7, [pc, #836]	; 148d8 <verify_monster@@Base+0x4c8>
   14590:	vcmp.f64	d6, d7
   14594:	vmrs	APSR_nzcv, fpscr
   14598:	beq	145b4 <verify_monster@@Base+0x1a4>
   1459c:	ldr	r3, [pc, #868]	; 14908 <verify_monster@@Base+0x4f8>
   145a0:	add	r3, pc, r3
   145a4:	mov	r0, r3
   145a8:	bl	10d48 <puts@plt>
   145ac:	mvn	r3, #0
   145b0:	b	14c5c <verify_monster@@Base+0x84c>
   145b4:	ldr	r0, [fp, #-16]
   145b8:	bl	11a08 <_start@@Base+0xc20>
   145bc:	mov	r3, r0
   145c0:	cmp	r3, #2
   145c4:	beq	145e0 <verify_monster@@Base+0x1d0>
   145c8:	ldr	r3, [pc, #828]	; 1490c <verify_monster@@Base+0x4fc>
   145cc:	add	r3, pc, r3
   145d0:	mov	r0, r3
   145d4:	bl	10d48 <puts@plt>
   145d8:	mvn	r3, #0
   145dc:	b	14c5c <verify_monster@@Base+0x84c>
   145e0:	ldr	r0, [fp, #-16]
   145e4:	bl	11a4c <_start@@Base+0xc64>
   145e8:	str	r0, [fp, #-24]	; 0xffffffe8
   145ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   145f0:	bl	11860 <_start@@Base+0xa78>
   145f4:	mov	r3, r0
   145f8:	cmp	r3, #5
   145fc:	bne	14614 <verify_monster@@Base+0x204>
   14600:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14604:	bl	118a0 <_start@@Base+0xab8>
   14608:	mov	r3, r0
   1460c:	cmp	r3, #6
   14610:	beq	1462c <verify_monster@@Base+0x21c>
   14614:	ldr	r3, [pc, #756]	; 14910 <verify_monster@@Base+0x500>
   14618:	add	r3, pc, r3
   1461c:	mov	r0, r3
   14620:	bl	10d48 <puts@plt>
   14624:	mvn	r3, #0
   14628:	b	14c5c <verify_monster@@Base+0x84c>
   1462c:	ldr	r0, [fp, #-12]
   14630:	bl	11cd4 <_start@@Base+0xeec>
   14634:	str	r0, [fp, #-28]	; 0xffffffe4
   14638:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1463c:	bl	114f0 <_start@@Base+0x708>
   14640:	mov	r3, r0
   14644:	cmp	r3, #9
   14648:	beq	14664 <verify_monster@@Base+0x254>
   1464c:	ldr	r3, [pc, #704]	; 14914 <verify_monster@@Base+0x504>
   14650:	add	r3, pc, r3
   14654:	mov	r0, r3
   14658:	bl	10d48 <puts@plt>
   1465c:	mvn	r3, #0
   14660:	b	14c5c <verify_monster@@Base+0x84c>
   14664:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14668:	cmp	r3, #0
   1466c:	beq	14690 <verify_monster@@Base+0x280>
   14670:	ldr	r3, [pc, #672]	; 14918 <verify_monster@@Base+0x508>
   14674:	add	r3, pc, r3
   14678:	mov	r1, r3
   1467c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14680:	bl	10cdc <strcmp@plt>
   14684:	mov	r3, r0
   14688:	cmp	r3, #0
   1468c:	beq	146a8 <verify_monster@@Base+0x298>
   14690:	ldr	r3, [pc, #644]	; 1491c <verify_monster@@Base+0x50c>
   14694:	add	r3, pc, r3
   14698:	mov	r0, r3
   1469c:	bl	10d48 <puts@plt>
   146a0:	mvn	r3, #0
   146a4:	b	14c5c <verify_monster@@Base+0x84c>
   146a8:	ldr	r0, [fp, #-12]
   146ac:	bl	11e04 <_start@@Base+0x101c>
   146b0:	str	r0, [fp, #-32]	; 0xffffffe0
   146b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   146b8:	bl	11608 <_start@@Base+0x820>
   146bc:	mov	r3, r0
   146c0:	cmp	r3, #5
   146c4:	beq	146e0 <verify_monster@@Base+0x2d0>
   146c8:	ldr	r3, [pc, #592]	; 14920 <verify_monster@@Base+0x510>
   146cc:	add	r3, pc, r3
   146d0:	mov	r0, r3
   146d4:	bl	10d48 <puts@plt>
   146d8:	mvn	r3, #0
   146dc:	b	14c5c <verify_monster@@Base+0x84c>
   146e0:	mov	r3, #0
   146e4:	str	r3, [fp, #-8]
   146e8:	b	14738 <verify_monster@@Base+0x328>
   146ec:	ldr	r3, [fp, #-8]
   146f0:	mov	r1, r3
   146f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   146f8:	bl	11630 <_start@@Base+0x848>
   146fc:	mov	r3, r0
   14700:	mov	r2, r3
   14704:	ldr	r3, [fp, #-8]
   14708:	cmp	r2, r3
   1470c:	beq	1472c <verify_monster@@Base+0x31c>
   14710:	ldr	r1, [fp, #-8]
   14714:	ldr	r3, [pc, #520]	; 14924 <verify_monster@@Base+0x514>
   14718:	add	r3, pc, r3
   1471c:	mov	r0, r3
   14720:	bl	10ce8 <printf@plt>
   14724:	mvn	r3, #0
   14728:	b	14c5c <verify_monster@@Base+0x84c>
   1472c:	ldr	r3, [fp, #-8]
   14730:	add	r3, r3, #1
   14734:	str	r3, [fp, #-8]
   14738:	ldr	r3, [fp, #-8]
   1473c:	cmp	r3, #4
   14740:	ble	146ec <verify_monster@@Base+0x2dc>
   14744:	ldr	r0, [fp, #-12]
   14748:	bl	11f0c <_start@@Base+0x1124>
   1474c:	str	r0, [fp, #-36]	; 0xffffffdc
   14750:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14754:	cmp	r3, #0
   14758:	bne	14774 <verify_monster@@Base+0x364>
   1475c:	ldr	r3, [pc, #452]	; 14928 <verify_monster@@Base+0x518>
   14760:	add	r3, pc, r3
   14764:	mov	r0, r3
   14768:	bl	10d48 <puts@plt>
   1476c:	mvn	r3, #0
   14770:	b	14c5c <verify_monster@@Base+0x84c>
   14774:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14778:	bl	11534 <_start@@Base+0x74c>
   1477c:	mov	r3, r0
   14780:	cmp	r3, #2
   14784:	beq	147a0 <verify_monster@@Base+0x390>
   14788:	ldr	r3, [pc, #412]	; 1492c <verify_monster@@Base+0x51c>
   1478c:	add	r3, pc, r3
   14790:	mov	r0, r3
   14794:	bl	10d48 <puts@plt>
   14798:	mvn	r3, #0
   1479c:	b	14c5c <verify_monster@@Base+0x84c>
   147a0:	mov	r1, #0
   147a4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   147a8:	bl	11578 <_start@@Base+0x790>
   147ac:	str	r0, [fp, #-40]	; 0xffffffd8
   147b0:	ldr	r3, [pc, #376]	; 14930 <verify_monster@@Base+0x520>
   147b4:	add	r3, pc, r3
   147b8:	mov	r1, r3
   147bc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   147c0:	bl	10cdc <strcmp@plt>
   147c4:	mov	r3, r0
   147c8:	cmp	r3, #0
   147cc:	beq	147e8 <verify_monster@@Base+0x3d8>
   147d0:	ldr	r3, [pc, #348]	; 14934 <verify_monster@@Base+0x524>
   147d4:	add	r3, pc, r3
   147d8:	mov	r0, r3
   147dc:	bl	10d48 <puts@plt>
   147e0:	mvn	r3, #0
   147e4:	b	14c5c <verify_monster@@Base+0x84c>
   147e8:	mov	r1, #1
   147ec:	ldr	r0, [fp, #-36]	; 0xffffffdc
   147f0:	bl	11578 <_start@@Base+0x790>
   147f4:	str	r0, [fp, #-40]	; 0xffffffd8
   147f8:	ldr	r3, [pc, #312]	; 14938 <verify_monster@@Base+0x528>
   147fc:	add	r3, pc, r3
   14800:	mov	r1, r3
   14804:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14808:	bl	10cdc <strcmp@plt>
   1480c:	mov	r3, r0
   14810:	cmp	r3, #0
   14814:	beq	14830 <verify_monster@@Base+0x420>
   14818:	ldr	r3, [pc, #284]	; 1493c <verify_monster@@Base+0x52c>
   1481c:	add	r3, pc, r3
   14820:	mov	r0, r3
   14824:	bl	10d48 <puts@plt>
   14828:	mvn	r3, #0
   1482c:	b	14c5c <verify_monster@@Base+0x84c>
   14830:	ldr	r0, [fp, #-12]
   14834:	bl	12010 <_start@@Base+0x1228>
   14838:	mov	r3, r0
   1483c:	strb	r3, [fp, #-41]	; 0xffffffd7
   14840:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14844:	cmp	r3, #1
   14848:	beq	14864 <verify_monster@@Base+0x454>
   1484c:	ldr	r3, [pc, #236]	; 14940 <verify_monster@@Base+0x530>
   14850:	add	r3, pc, r3
   14854:	mov	r0, r3
   14858:	bl	10d48 <puts@plt>
   1485c:	mvn	r3, #0
   14860:	b	14c5c <verify_monster@@Base+0x84c>
   14864:	ldr	r0, [fp, #-12]
   14868:	bl	12108 <_start@@Base+0x1320>
   1486c:	str	r0, [fp, #-48]	; 0xffffffd0
   14870:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14874:	cmp	r3, #0
   14878:	bne	14894 <verify_monster@@Base+0x484>
   1487c:	ldr	r3, [pc, #192]	; 14944 <verify_monster@@Base+0x534>
   14880:	add	r3, pc, r3
   14884:	mov	r0, r3
   14888:	bl	10d48 <puts@plt>
   1488c:	mvn	r3, #0
   14890:	b	14c5c <verify_monster@@Base+0x84c>
   14894:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14898:	bl	11cd4 <_start@@Base+0xeec>
   1489c:	mov	r2, r0
   148a0:	ldr	r3, [pc, #160]	; 14948 <verify_monster@@Base+0x538>
   148a4:	add	r3, pc, r3
   148a8:	mov	r1, r3
   148ac:	mov	r0, r2
   148b0:	bl	10cdc <strcmp@plt>
   148b4:	mov	r3, r0
   148b8:	cmp	r3, #0
   148bc:	beq	14980 <verify_monster@@Base+0x570>
   148c0:	ldr	r3, [pc, #132]	; 1494c <verify_monster@@Base+0x53c>
   148c4:	add	r3, pc, r3
   148c8:	mov	r0, r3
   148cc:	bl	10d48 <puts@plt>
   148d0:	mvn	r3, #0
   148d4:	b	14c5c <verify_monster@@Base+0x84c>
   148d8:	andeq	r0, r0, r0
   148dc:	andmi	r0, r8, r0
   148e0:	svccc	0x00800000
   148e4:	andmi	r0, r0, r0
   148e8:	submi	r0, r0, r0
   148ec:	andeq	r3, r0, r8, ror #2
   148f0:	andeq	r3, r0, r4, asr r1
   148f4:	andeq	r3, r0, r8, asr #2
   148f8:	andeq	r3, r0, r4, lsr #2
   148fc:	andeq	r3, r0, r8, lsl r1
   14900:	andeq	r3, r0, r8, lsl #2
   14904:	strdeq	r3, [r0], -r8
   14908:	andeq	r3, r0, r8, ror #1
   1490c:	ldrdeq	r3, [r0], -r0
   14910:	muleq	r0, ip, r0
   14914:	andeq	r3, r0, ip, ror r0
   14918:	andeq	r3, r0, r4, ror r0
   1491c:	andeq	r3, r0, r0, rrx
   14920:	andeq	r3, r0, ip, lsr r0
   14924:	andeq	r3, r0, ip
   14928:	andeq	r2, r0, r4, ror #31
   1492c:	ldrdeq	r2, [r0], -r4
   14930:	ldrdeq	r2, [r0], -r4
   14934:			; <UNDEFINED> instruction: 0x00002fbc
   14938:			; <UNDEFINED> instruction: 0x00002fb8
   1493c:	andeq	r2, r0, r0, lsr #31
   14940:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   14944:	andeq	r2, r0, r4, ror pc
   14948:	andeq	r2, r0, r8, ror #30
   1494c:	andeq	r2, r0, r0, asr pc
   14950:	andeq	r2, r0, r8, lsl #29
   14954:	andeq	r2, r0, r0, ror lr
   14958:	andeq	r2, r0, ip, asr lr
   1495c:	andeq	r2, r0, r8, lsr lr
   14960:	andeq	r2, r0, r4, lsr #28
   14964:	andeq	r3, r0, r4, lsr #2
   14968:	andeq	r2, r0, r0, lsl #28
   1496c:	andeq	r2, r0, r0, ror #28
   14970:			; <UNDEFINED> instruction: 0xdd79c941
   14974:	andeq	r3, r0, ip, ror #1
   14978:	andeq	r2, r0, r8, asr #27
   1497c:	andeq	r2, r0, r0, ror #28
   14980:	ldr	r0, [fp, #-12]
   14984:	bl	1220c <_start@@Base+0x1424>
   14988:	str	r0, [fp, #-52]	; 0xffffffcc
   1498c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14990:	bl	1181c <_start@@Base+0xa34>
   14994:	mov	r3, r0
   14998:	cmp	r3, #2
   1499c:	beq	149b8 <verify_monster@@Base+0x5a8>
   149a0:	ldr	r3, [pc, #-88]	; 14950 <verify_monster@@Base+0x540>
   149a4:	add	r3, pc, r3
   149a8:	mov	r0, r3
   149ac:	bl	10d48 <puts@plt>
   149b0:	mvn	r3, #0
   149b4:	b	14c5c <verify_monster@@Base+0x84c>
   149b8:	mov	r1, #0
   149bc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   149c0:	bl	117a8 <_start@@Base+0x9c0>
   149c4:	str	r0, [fp, #-24]	; 0xffffffe8
   149c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   149cc:	bl	11860 <_start@@Base+0xa78>
   149d0:	mov	r3, r0
   149d4:	cmp	r3, #10
   149d8:	beq	149f4 <verify_monster@@Base+0x5e4>
   149dc:	ldr	r3, [pc, #-144]	; 14954 <verify_monster@@Base+0x544>
   149e0:	add	r3, pc, r3
   149e4:	mov	r0, r3
   149e8:	bl	10d48 <puts@plt>
   149ec:	mvn	r3, #0
   149f0:	b	14c5c <verify_monster@@Base+0x84c>
   149f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   149f8:	bl	118a0 <_start@@Base+0xab8>
   149fc:	mov	r3, r0
   14a00:	cmp	r3, #20
   14a04:	beq	14a20 <verify_monster@@Base+0x610>
   14a08:	ldr	r3, [pc, #-184]	; 14958 <verify_monster@@Base+0x548>
   14a0c:	add	r3, pc, r3
   14a10:	mov	r0, r3
   14a14:	bl	10d48 <puts@plt>
   14a18:	mvn	r3, #0
   14a1c:	b	14c5c <verify_monster@@Base+0x84c>
   14a20:	mov	r1, #1
   14a24:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14a28:	bl	117a8 <_start@@Base+0x9c0>
   14a2c:	str	r0, [fp, #-24]	; 0xffffffe8
   14a30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14a34:	bl	11860 <_start@@Base+0xa78>
   14a38:	mov	r3, r0
   14a3c:	cmp	r3, #30
   14a40:	beq	14a5c <verify_monster@@Base+0x64c>
   14a44:	ldr	r3, [pc, #-240]	; 1495c <verify_monster@@Base+0x54c>
   14a48:	add	r3, pc, r3
   14a4c:	mov	r0, r3
   14a50:	bl	10d48 <puts@plt>
   14a54:	mvn	r3, #0
   14a58:	b	14c5c <verify_monster@@Base+0x84c>
   14a5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14a60:	bl	118a0 <_start@@Base+0xab8>
   14a64:	mov	r3, r0
   14a68:	cmp	r3, #40	; 0x28
   14a6c:	beq	14a88 <verify_monster@@Base+0x678>
   14a70:	ldr	r3, [pc, #-280]	; 14960 <verify_monster@@Base+0x550>
   14a74:	add	r3, pc, r3
   14a78:	mov	r0, r3
   14a7c:	bl	10d48 <puts@plt>
   14a80:	mvn	r3, #0
   14a84:	b	14c5c <verify_monster@@Base+0x84c>
   14a88:	ldr	r0, [fp, #-12]
   14a8c:	bl	12314 <_start@@Base+0x152c>
   14a90:	mov	r2, r0
   14a94:	ldr	r3, [pc, #-300]	; 14970 <verify_monster@@Base+0x560>
   14a98:	cmp	r2, r3
   14a9c:	beq	14ac0 <verify_monster@@Base+0x6b0>
   14aa0:	ldr	r3, [pc, #-324]	; 14964 <verify_monster@@Base+0x554>
   14aa4:	add	r3, pc, r3
   14aa8:	mov	r2, #148	; 0x94
   14aac:	ldr	r1, [pc, #-332]	; 14968 <verify_monster@@Base+0x558>
   14ab0:	add	r1, pc, r1
   14ab4:	ldr	r0, [pc, #-336]	; 1496c <verify_monster@@Base+0x55c>
   14ab8:	add	r0, pc, r0
   14abc:	bl	10dd8 <__assert_fail@plt>
   14ac0:	ldr	r0, [fp, #-12]
   14ac4:	bl	12408 <_start@@Base+0x1620>
   14ac8:	mov	r2, r0
   14acc:	ldr	r3, [pc, #-356]	; 14970 <verify_monster@@Base+0x560>
   14ad0:	cmp	r2, r3
   14ad4:	beq	14af8 <verify_monster@@Base+0x6e8>
   14ad8:	ldr	r3, [pc, #-364]	; 14974 <verify_monster@@Base+0x564>
   14adc:	add	r3, pc, r3
   14ae0:	mov	r2, #149	; 0x95
   14ae4:	ldr	r1, [pc, #-372]	; 14978 <verify_monster@@Base+0x568>
   14ae8:	add	r1, pc, r1
   14aec:	ldr	r0, [pc, #-376]	; 1497c <verify_monster@@Base+0x56c>
   14af0:	add	r0, pc, r0
   14af4:	bl	10dd8 <__assert_fail@plt>
   14af8:	ldr	r0, [fp, #-12]
   14afc:	bl	12500 <_start@@Base+0x1718>
   14b00:	add	r3, pc, #352	; 0x160
   14b04:	ldrd	r2, [r3]
   14b08:	cmp	r1, r3
   14b0c:	cmpeq	r0, r2
   14b10:	beq	14b34 <verify_monster@@Base+0x724>
   14b14:	ldr	r3, [pc, #348]	; 14c78 <verify_monster@@Base+0x868>
   14b18:	add	r3, pc, r3
   14b1c:	mov	r2, #150	; 0x96
   14b20:	ldr	r1, [pc, #340]	; 14c7c <verify_monster@@Base+0x86c>
   14b24:	add	r1, pc, r1
   14b28:	ldr	r0, [pc, #336]	; 14c80 <verify_monster@@Base+0x870>
   14b2c:	add	r0, pc, r0
   14b30:	bl	10dd8 <__assert_fail@plt>
   14b34:	ldr	r0, [fp, #-12]
   14b38:	bl	12604 <_start@@Base+0x181c>
   14b3c:	add	r3, pc, #292	; 0x124
   14b40:	ldrd	r2, [r3]
   14b44:	cmp	r1, r3
   14b48:	cmpeq	r0, r2
   14b4c:	beq	14b70 <verify_monster@@Base+0x760>
   14b50:	ldr	r3, [pc, #300]	; 14c84 <verify_monster@@Base+0x874>
   14b54:	add	r3, pc, r3
   14b58:	mov	r2, #151	; 0x97
   14b5c:	ldr	r1, [pc, #292]	; 14c88 <verify_monster@@Base+0x878>
   14b60:	add	r1, pc, r1
   14b64:	ldr	r0, [pc, #288]	; 14c8c <verify_monster@@Base+0x87c>
   14b68:	add	r0, pc, r0
   14b6c:	bl	10dd8 <__assert_fail@plt>
   14b70:	ldr	r0, [fp, #-12]
   14b74:	bl	12708 <_start@@Base+0x1920>
   14b78:	mov	r2, r0
   14b7c:	ldr	r3, [pc, #268]	; 14c90 <verify_monster@@Base+0x880>
   14b80:	cmp	r2, r3
   14b84:	beq	14ba8 <verify_monster@@Base+0x798>
   14b88:	ldr	r3, [pc, #260]	; 14c94 <verify_monster@@Base+0x884>
   14b8c:	add	r3, pc, r3
   14b90:	mov	r2, #152	; 0x98
   14b94:	ldr	r1, [pc, #252]	; 14c98 <verify_monster@@Base+0x888>
   14b98:	add	r1, pc, r1
   14b9c:	ldr	r0, [pc, #248]	; 14c9c <verify_monster@@Base+0x88c>
   14ba0:	add	r0, pc, r0
   14ba4:	bl	10dd8 <__assert_fail@plt>
   14ba8:	ldr	r0, [fp, #-12]
   14bac:	bl	127fc <_start@@Base+0x1a14>
   14bb0:	mov	r2, r0
   14bb4:	ldr	r3, [pc, #212]	; 14c90 <verify_monster@@Base+0x880>
   14bb8:	cmp	r2, r3
   14bbc:	beq	14be0 <verify_monster@@Base+0x7d0>
   14bc0:	ldr	r3, [pc, #216]	; 14ca0 <verify_monster@@Base+0x890>
   14bc4:	add	r3, pc, r3
   14bc8:	mov	r2, #153	; 0x99
   14bcc:	ldr	r1, [pc, #208]	; 14ca4 <verify_monster@@Base+0x894>
   14bd0:	add	r1, pc, r1
   14bd4:	ldr	r0, [pc, #204]	; 14ca8 <verify_monster@@Base+0x898>
   14bd8:	add	r0, pc, r0
   14bdc:	bl	10dd8 <__assert_fail@plt>
   14be0:	ldr	r0, [fp, #-12]
   14be4:	bl	128f4 <_start@@Base+0x1b0c>
   14be8:	add	r3, pc, #128	; 0x80
   14bec:	ldrd	r2, [r3]
   14bf0:	cmp	r1, r3
   14bf4:	cmpeq	r0, r2
   14bf8:	beq	14c1c <verify_monster@@Base+0x80c>
   14bfc:	ldr	r3, [pc, #168]	; 14cac <verify_monster@@Base+0x89c>
   14c00:	add	r3, pc, r3
   14c04:	mov	r2, #154	; 0x9a
   14c08:	ldr	r1, [pc, #160]	; 14cb0 <verify_monster@@Base+0x8a0>
   14c0c:	add	r1, pc, r1
   14c10:	ldr	r0, [pc, #156]	; 14cb4 <verify_monster@@Base+0x8a4>
   14c14:	add	r0, pc, r0
   14c18:	bl	10dd8 <__assert_fail@plt>
   14c1c:	ldr	r0, [fp, #-12]
   14c20:	bl	129f8 <_start@@Base+0x1c10>
   14c24:	add	r3, pc, #68	; 0x44
   14c28:	ldrd	r2, [r3]
   14c2c:	cmp	r1, r3
   14c30:	cmpeq	r0, r2
   14c34:	beq	14c58 <verify_monster@@Base+0x848>
   14c38:	ldr	r3, [pc, #120]	; 14cb8 <verify_monster@@Base+0x8a8>
   14c3c:	add	r3, pc, r3
   14c40:	mov	r2, #155	; 0x9b
   14c44:	ldr	r1, [pc, #112]	; 14cbc <verify_monster@@Base+0x8ac>
   14c48:	add	r1, pc, r1
   14c4c:	ldr	r0, [pc, #108]	; 14cc0 <verify_monster@@Base+0x8b0>
   14c50:	add	r0, pc, r0
   14c54:	bl	10dd8 <__assert_fail@plt>
   14c58:	mov	r3, #0
   14c5c:	mov	r0, r3
   14c60:	sub	sp, fp, #4
   14c64:	pop	{fp, pc}
   14c68:	vrhadd.s<illegal width 64>	d25, d27, d1
   14c6c:	cdpvs	0, 0, cr8, cr15, cr13, {6}
   14c70:			; <UNDEFINED> instruction: 0xc767ddf1
   14c74:	mvnsmi	r4, #220, 16	; 0xdc0000
   14c78:	strheq	r3, [r0], -r0
   14c7c:	andeq	r2, r0, ip, lsl #27
   14c80:	andeq	r2, r0, ip, asr lr
   14c84:	andeq	r3, r0, r4, ror r0
   14c88:	andeq	r2, r0, r0, asr sp
   14c8c:	andeq	r2, r0, r0, ror #28
   14c90:	mcrhi	4, 4, sl, cr1, cr1, {3}
   14c94:	andeq	r3, r0, ip, lsr r0
   14c98:	andeq	r2, r0, r8, lsl sp
   14c9c:	andeq	r2, r0, r8, ror #28
   14ca0:	andeq	r3, r0, r4
   14ca4:	andeq	r2, r0, r0, ror #25
   14ca8:	andeq	r2, r0, r8, ror #28
   14cac:	andeq	r2, r0, r8, asr #31
   14cb0:	andeq	r2, r0, r4, lsr #25
   14cb4:	andeq	r2, r0, r4, ror #28
   14cb8:	andeq	r2, r0, ip, lsl #31
   14cbc:	andeq	r2, r0, r8, ror #24
   14cc0:	andeq	r2, r0, r8, ror #28

00014cc4 <main@@Base>:
   14cc4:	push	{r4, fp, lr}
   14cc8:	add	fp, sp, #8
   14ccc:	sub	sp, sp, #28
   14cd0:	str	r0, [fp, #-32]	; 0xffffffe0
   14cd4:	str	r1, [fp, #-36]	; 0xffffffdc
   14cd8:	ldr	r4, [pc, #468]	; 14eb4 <main@@Base+0x1f0>
   14cdc:	add	r4, pc, r4
   14ce0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14ce4:	cmp	r3, #1
   14ce8:	beq	14d20 <main@@Base+0x5c>
   14cec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14cf0:	cmp	r3, #2
   14cf4:	beq	14d20 <main@@Base+0x5c>
   14cf8:	ldr	r3, [pc, #440]	; 14eb8 <main@@Base+0x1f4>
   14cfc:	ldr	r3, [r4, r3]
   14d00:	ldr	r3, [r3]
   14d04:	mov	r2, #63	; 0x3f
   14d08:	mov	r1, #1
   14d0c:	ldr	r0, [pc, #424]	; 14ebc <main@@Base+0x1f8>
   14d10:	add	r0, pc, r0
   14d14:	bl	10d30 <fwrite@plt>
   14d18:	mov	r0, #1
   14d1c:	bl	10d78 <exit@plt>
   14d20:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14d24:	cmp	r3, #2
   14d28:	bne	14d40 <main@@Base+0x7c>
   14d2c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14d30:	ldr	r2, [r3, #4]
   14d34:	ldr	r3, [pc, #388]	; 14ec0 <main@@Base+0x1fc>
   14d38:	ldr	r3, [r4, r3]
   14d3c:	str	r2, [r3]
   14d40:	ldr	r3, [pc, #376]	; 14ec0 <main@@Base+0x1fc>
   14d44:	ldr	r3, [r4, r3]
   14d48:	ldr	r3, [r3]
   14d4c:	sub	r2, fp, #28
   14d50:	mov	r1, #1024	; 0x400
   14d54:	mov	r0, r3
   14d58:	bl	14038 <_start@@Base+0x3250>
   14d5c:	str	r0, [fp, #-20]	; 0xffffffec
   14d60:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14d64:	add	r3, r3, #255	; 0xff
   14d68:	bic	r3, r3, #255	; 0xff
   14d6c:	mov	r1, r3
   14d70:	mov	r0, #256	; 0x100
   14d74:	bl	10f10 <_start@@Base+0x128>
   14d78:	str	r0, [fp, #-24]	; 0xffffffe8
   14d7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14d80:	mov	r2, r3
   14d84:	ldr	r1, [fp, #-20]	; 0xffffffec
   14d88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14d8c:	bl	10d0c <memcpy@plt>
   14d90:	ldr	r0, [fp, #-20]	; 0xffffffec
   14d94:	bl	10d00 <free@plt>
   14d98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d9c:	cmp	r3, #0
   14da0:	bne	14dd8 <main@@Base+0x114>
   14da4:	ldr	r3, [pc, #268]	; 14eb8 <main@@Base+0x1f4>
   14da8:	ldr	r3, [r4, r3]
   14dac:	ldr	r0, [r3]
   14db0:	ldr	r3, [pc, #264]	; 14ec0 <main@@Base+0x1fc>
   14db4:	ldr	r3, [r4, r3]
   14db8:	ldr	r3, [r3]
   14dbc:	mov	r2, r3
   14dc0:	ldr	r3, [pc, #252]	; 14ec4 <main@@Base+0x200>
   14dc4:	add	r3, pc, r3
   14dc8:	mov	r1, r3
   14dcc:	bl	10d84 <fprintf@plt>
   14dd0:	mvn	r3, #0
   14dd4:	b	14ea8 <main@@Base+0x1e4>
   14dd8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14ddc:	ldr	r3, [pc, #212]	; 14eb8 <main@@Base+0x1f4>
   14de0:	ldr	r3, [r4, r3]
   14de4:	ldr	r3, [r3]
   14de8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14dec:	ldr	r0, [pc, #212]	; 14ec8 <main@@Base+0x204>
   14df0:	add	r0, pc, r0
   14df4:	bl	14204 <_start@@Base+0x341c>
   14df8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14dfc:	ldr	r2, [pc, #200]	; 14ecc <main@@Base+0x208>
   14e00:	add	r2, pc, r2
   14e04:	mov	r1, r3
   14e08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14e0c:	bl	13c34 <_start@@Base+0x2e4c>
   14e10:	mov	r3, r0
   14e14:	cmp	r3, #0
   14e18:	beq	14e48 <main@@Base+0x184>
   14e1c:	ldr	r3, [pc, #148]	; 14eb8 <main@@Base+0x1f4>
   14e20:	ldr	r3, [r4, r3]
   14e24:	ldr	r3, [r3]
   14e28:	mov	r2, #38	; 0x26
   14e2c:	mov	r1, #1
   14e30:	ldr	r0, [pc, #152]	; 14ed0 <main@@Base+0x20c>
   14e34:	add	r0, pc, r0
   14e38:	bl	10d30 <fwrite@plt>
   14e3c:	mvn	r3, #0
   14e40:	str	r3, [fp, #-16]
   14e44:	b	14e9c <main@@Base+0x1d8>
   14e48:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14e4c:	mov	r1, r3
   14e50:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14e54:	bl	13bec <_start@@Base+0x2e04>
   14e58:	mov	r3, r0
   14e5c:	cmp	r3, #0
   14e60:	beq	14e90 <main@@Base+0x1cc>
   14e64:	ldr	r3, [pc, #76]	; 14eb8 <main@@Base+0x1f4>
   14e68:	ldr	r3, [r4, r3]
   14e6c:	ldr	r3, [r3]
   14e70:	mov	r2, #62	; 0x3e
   14e74:	mov	r1, #1
   14e78:	ldr	r0, [pc, #84]	; 14ed4 <main@@Base+0x210>
   14e7c:	add	r0, pc, r0
   14e80:	bl	10d30 <fwrite@plt>
   14e84:	mvn	r3, #0
   14e88:	str	r3, [fp, #-16]
   14e8c:	b	14e9c <main@@Base+0x1d8>
   14e90:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14e94:	bl	14410 <verify_monster@@Base>
   14e98:	str	r0, [fp, #-16]
   14e9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14ea0:	bl	10d00 <free@plt>
   14ea4:	ldr	r3, [fp, #-16]
   14ea8:	mov	r0, r3
   14eac:	sub	sp, fp, #8
   14eb0:	pop	{r4, fp, pc}
   14eb4:	andeq	r4, r1, ip, lsl r3
   14eb8:	andeq	r0, r0, r4, rrx
   14ebc:	andeq	r2, r0, r8, ror #27
   14ec0:	andeq	r0, r0, ip, rrx
   14ec4:	andeq	r2, r0, r4, ror sp
   14ec8:	muleq	r0, ip, r7
   14ecc:	andeq	r2, r0, r0, lsl r7
   14ed0:	andeq	r2, r0, ip, lsr #26
   14ed4:	andeq	r2, r0, ip, lsl #26
   14ed8:	push	{fp}		; (str fp, [sp, #-4]!)
   14edc:	add	fp, sp, #0
   14ee0:	sub	sp, sp, #12
   14ee4:	str	r0, [fp, #-8]
   14ee8:	ldr	r3, [fp, #-8]
   14eec:	mov	r0, r3
   14ef0:	add	sp, fp, #0
   14ef4:	pop	{fp}		; (ldr fp, [sp], #4)
   14ef8:	bx	lr
   14efc:	push	{fp, lr}
   14f00:	add	fp, sp, #4
   14f04:	sub	sp, sp, #8
   14f08:	str	r0, [fp, #-8]
   14f0c:	ldr	r3, [fp, #-8]
   14f10:	ldr	r3, [r3]
   14f14:	mov	r0, r3
   14f18:	bl	14ed8 <main@@Base+0x214>
   14f1c:	mov	r3, r0
   14f20:	mov	r0, r3
   14f24:	sub	sp, fp, #4
   14f28:	pop	{fp, pc}
   14f2c:	push	{fp}		; (str fp, [sp, #-4]!)
   14f30:	add	fp, sp, #0
   14f34:	sub	sp, sp, #12
   14f38:	mov	r3, r0
   14f3c:	strh	r3, [fp, #-6]
   14f40:	ldrh	r3, [fp, #-6]
   14f44:	mov	r0, r3
   14f48:	add	sp, fp, #0
   14f4c:	pop	{fp}		; (ldr fp, [sp], #4)
   14f50:	bx	lr
   14f54:	push	{fp, lr}
   14f58:	add	fp, sp, #4
   14f5c:	sub	sp, sp, #8
   14f60:	str	r0, [fp, #-8]
   14f64:	ldr	r3, [fp, #-8]
   14f68:	ldrh	r3, [r3]
   14f6c:	mov	r0, r3
   14f70:	bl	14f2c <main@@Base+0x268>
   14f74:	mov	r3, r0
   14f78:	mov	r0, r3
   14f7c:	sub	sp, fp, #4
   14f80:	pop	{fp, pc}
   14f84:	push	{fp}		; (str fp, [sp, #-4]!)
   14f88:	add	fp, sp, #0
   14f8c:	sub	sp, sp, #12
   14f90:	str	r0, [fp, #-8]
   14f94:	ldr	r3, [fp, #-8]
   14f98:	mov	r0, r3
   14f9c:	add	sp, fp, #0
   14fa0:	pop	{fp}		; (ldr fp, [sp], #4)
   14fa4:	bx	lr
   14fa8:	push	{fp}		; (str fp, [sp, #-4]!)
   14fac:	add	fp, sp, #0
   14fb0:	sub	sp, sp, #12
   14fb4:	str	r0, [fp, #-8]
   14fb8:	ldr	r3, [fp, #-8]
   14fbc:	mov	r0, r3
   14fc0:	add	sp, fp, #0
   14fc4:	pop	{fp}		; (ldr fp, [sp], #4)
   14fc8:	bx	lr
   14fcc:	push	{fp, lr}
   14fd0:	add	fp, sp, #4
   14fd4:	sub	sp, sp, #8
   14fd8:	str	r0, [fp, #-8]
   14fdc:	ldr	r3, [fp, #-8]
   14fe0:	ldr	r3, [r3]
   14fe4:	mov	r0, r3
   14fe8:	bl	14f84 <main@@Base+0x2c0>
   14fec:	mov	r3, r0
   14ff0:	mov	r0, r3
   14ff4:	sub	sp, fp, #4
   14ff8:	pop	{fp, pc}

00014ffc <flatcc_verify_error_string@@Base>:
   14ffc:	push	{fp}		; (str fp, [sp, #-4]!)
   15000:	add	fp, sp, #0
   15004:	sub	sp, sp, #12
   15008:	str	r0, [fp, #-8]
   1500c:	ldr	r3, [fp, #-8]
   15010:	cmp	r3, #36	; 0x24
   15014:	addls	pc, pc, r3, lsl #2
   15018:	b	1526c <flatcc_verify_error_string@@Base+0x270>
   1501c:	b	150b0 <flatcc_verify_error_string@@Base+0xb4>
   15020:	b	150bc <flatcc_verify_error_string@@Base+0xc0>
   15024:	b	150c8 <flatcc_verify_error_string@@Base+0xcc>
   15028:	b	150d4 <flatcc_verify_error_string@@Base+0xd8>
   1502c:	b	150e0 <flatcc_verify_error_string@@Base+0xe4>
   15030:	b	150ec <flatcc_verify_error_string@@Base+0xf0>
   15034:	b	150f8 <flatcc_verify_error_string@@Base+0xfc>
   15038:	b	15104 <flatcc_verify_error_string@@Base+0x108>
   1503c:	b	15110 <flatcc_verify_error_string@@Base+0x114>
   15040:	b	1511c <flatcc_verify_error_string@@Base+0x120>
   15044:	b	15128 <flatcc_verify_error_string@@Base+0x12c>
   15048:	b	15134 <flatcc_verify_error_string@@Base+0x138>
   1504c:	b	15140 <flatcc_verify_error_string@@Base+0x144>
   15050:	b	1514c <flatcc_verify_error_string@@Base+0x150>
   15054:	b	15158 <flatcc_verify_error_string@@Base+0x15c>
   15058:	b	15164 <flatcc_verify_error_string@@Base+0x168>
   1505c:	b	15170 <flatcc_verify_error_string@@Base+0x174>
   15060:	b	1517c <flatcc_verify_error_string@@Base+0x180>
   15064:	b	15188 <flatcc_verify_error_string@@Base+0x18c>
   15068:	b	15194 <flatcc_verify_error_string@@Base+0x198>
   1506c:	b	151a0 <flatcc_verify_error_string@@Base+0x1a4>
   15070:	b	151ac <flatcc_verify_error_string@@Base+0x1b0>
   15074:	b	151b8 <flatcc_verify_error_string@@Base+0x1bc>
   15078:	b	151c4 <flatcc_verify_error_string@@Base+0x1c8>
   1507c:	b	151d0 <flatcc_verify_error_string@@Base+0x1d4>
   15080:	b	151dc <flatcc_verify_error_string@@Base+0x1e0>
   15084:	b	151e8 <flatcc_verify_error_string@@Base+0x1ec>
   15088:	b	151f4 <flatcc_verify_error_string@@Base+0x1f8>
   1508c:	b	15200 <flatcc_verify_error_string@@Base+0x204>
   15090:	b	1520c <flatcc_verify_error_string@@Base+0x210>
   15094:	b	15218 <flatcc_verify_error_string@@Base+0x21c>
   15098:	b	15224 <flatcc_verify_error_string@@Base+0x228>
   1509c:	b	15230 <flatcc_verify_error_string@@Base+0x234>
   150a0:	b	1523c <flatcc_verify_error_string@@Base+0x240>
   150a4:	b	15248 <flatcc_verify_error_string@@Base+0x24c>
   150a8:	b	15254 <flatcc_verify_error_string@@Base+0x258>
   150ac:	b	15260 <flatcc_verify_error_string@@Base+0x264>
   150b0:	ldr	r3, [pc, #460]	; 15284 <flatcc_verify_error_string@@Base+0x288>
   150b4:	add	r3, pc, r3
   150b8:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   150bc:	ldr	r3, [pc, #452]	; 15288 <flatcc_verify_error_string@@Base+0x28c>
   150c0:	add	r3, pc, r3
   150c4:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   150c8:	ldr	r3, [pc, #444]	; 1528c <flatcc_verify_error_string@@Base+0x290>
   150cc:	add	r3, pc, r3
   150d0:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   150d4:	ldr	r3, [pc, #436]	; 15290 <flatcc_verify_error_string@@Base+0x294>
   150d8:	add	r3, pc, r3
   150dc:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   150e0:	ldr	r3, [pc, #428]	; 15294 <flatcc_verify_error_string@@Base+0x298>
   150e4:	add	r3, pc, r3
   150e8:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   150ec:	ldr	r3, [pc, #420]	; 15298 <flatcc_verify_error_string@@Base+0x29c>
   150f0:	add	r3, pc, r3
   150f4:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   150f8:	ldr	r3, [pc, #412]	; 1529c <flatcc_verify_error_string@@Base+0x2a0>
   150fc:	add	r3, pc, r3
   15100:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   15104:	ldr	r3, [pc, #404]	; 152a0 <flatcc_verify_error_string@@Base+0x2a4>
   15108:	add	r3, pc, r3
   1510c:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   15110:	ldr	r3, [pc, #396]	; 152a4 <flatcc_verify_error_string@@Base+0x2a8>
   15114:	add	r3, pc, r3
   15118:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   1511c:	ldr	r3, [pc, #388]	; 152a8 <flatcc_verify_error_string@@Base+0x2ac>
   15120:	add	r3, pc, r3
   15124:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   15128:	ldr	r3, [pc, #380]	; 152ac <flatcc_verify_error_string@@Base+0x2b0>
   1512c:	add	r3, pc, r3
   15130:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   15134:	ldr	r3, [pc, #372]	; 152b0 <flatcc_verify_error_string@@Base+0x2b4>
   15138:	add	r3, pc, r3
   1513c:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   15140:	ldr	r3, [pc, #364]	; 152b4 <flatcc_verify_error_string@@Base+0x2b8>
   15144:	add	r3, pc, r3
   15148:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   1514c:	ldr	r3, [pc, #356]	; 152b8 <flatcc_verify_error_string@@Base+0x2bc>
   15150:	add	r3, pc, r3
   15154:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   15158:	ldr	r3, [pc, #348]	; 152bc <flatcc_verify_error_string@@Base+0x2c0>
   1515c:	add	r3, pc, r3
   15160:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   15164:	ldr	r3, [pc, #340]	; 152c0 <flatcc_verify_error_string@@Base+0x2c4>
   15168:	add	r3, pc, r3
   1516c:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   15170:	ldr	r3, [pc, #332]	; 152c4 <flatcc_verify_error_string@@Base+0x2c8>
   15174:	add	r3, pc, r3
   15178:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   1517c:	ldr	r3, [pc, #324]	; 152c8 <flatcc_verify_error_string@@Base+0x2cc>
   15180:	add	r3, pc, r3
   15184:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   15188:	ldr	r3, [pc, #316]	; 152cc <flatcc_verify_error_string@@Base+0x2d0>
   1518c:	add	r3, pc, r3
   15190:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   15194:	ldr	r3, [pc, #308]	; 152d0 <flatcc_verify_error_string@@Base+0x2d4>
   15198:	add	r3, pc, r3
   1519c:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   151a0:	ldr	r3, [pc, #300]	; 152d4 <flatcc_verify_error_string@@Base+0x2d8>
   151a4:	add	r3, pc, r3
   151a8:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   151ac:	ldr	r3, [pc, #292]	; 152d8 <flatcc_verify_error_string@@Base+0x2dc>
   151b0:	add	r3, pc, r3
   151b4:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   151b8:	ldr	r3, [pc, #284]	; 152dc <flatcc_verify_error_string@@Base+0x2e0>
   151bc:	add	r3, pc, r3
   151c0:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   151c4:	ldr	r3, [pc, #276]	; 152e0 <flatcc_verify_error_string@@Base+0x2e4>
   151c8:	add	r3, pc, r3
   151cc:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   151d0:	ldr	r3, [pc, #268]	; 152e4 <flatcc_verify_error_string@@Base+0x2e8>
   151d4:	add	r3, pc, r3
   151d8:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   151dc:	ldr	r3, [pc, #260]	; 152e8 <flatcc_verify_error_string@@Base+0x2ec>
   151e0:	add	r3, pc, r3
   151e4:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   151e8:	ldr	r3, [pc, #252]	; 152ec <flatcc_verify_error_string@@Base+0x2f0>
   151ec:	add	r3, pc, r3
   151f0:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   151f4:	ldr	r3, [pc, #244]	; 152f0 <flatcc_verify_error_string@@Base+0x2f4>
   151f8:	add	r3, pc, r3
   151fc:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   15200:	ldr	r3, [pc, #236]	; 152f4 <flatcc_verify_error_string@@Base+0x2f8>
   15204:	add	r3, pc, r3
   15208:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   1520c:	ldr	r3, [pc, #228]	; 152f8 <flatcc_verify_error_string@@Base+0x2fc>
   15210:	add	r3, pc, r3
   15214:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   15218:	ldr	r3, [pc, #220]	; 152fc <flatcc_verify_error_string@@Base+0x300>
   1521c:	add	r3, pc, r3
   15220:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   15224:	ldr	r3, [pc, #212]	; 15300 <flatcc_verify_error_string@@Base+0x304>
   15228:	add	r3, pc, r3
   1522c:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   15230:	ldr	r3, [pc, #204]	; 15304 <flatcc_verify_error_string@@Base+0x308>
   15234:	add	r3, pc, r3
   15238:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   1523c:	ldr	r3, [pc, #196]	; 15308 <flatcc_verify_error_string@@Base+0x30c>
   15240:	add	r3, pc, r3
   15244:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   15248:	ldr	r3, [pc, #188]	; 1530c <flatcc_verify_error_string@@Base+0x310>
   1524c:	add	r3, pc, r3
   15250:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   15254:	ldr	r3, [pc, #180]	; 15310 <flatcc_verify_error_string@@Base+0x314>
   15258:	add	r3, pc, r3
   1525c:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   15260:	ldr	r3, [pc, #172]	; 15314 <flatcc_verify_error_string@@Base+0x318>
   15264:	add	r3, pc, r3
   15268:	b	15274 <flatcc_verify_error_string@@Base+0x278>
   1526c:	ldr	r3, [pc, #164]	; 15318 <flatcc_verify_error_string@@Base+0x31c>
   15270:	add	r3, pc, r3
   15274:	mov	r0, r3
   15278:	add	sp, fp, #0
   1527c:	pop	{fp}		; (ldr fp, [sp], #4)
   15280:	bx	lr
   15284:	ldrdeq	r2, [r0], -r0
   15288:	andeq	r2, r0, r8, asr #27
   1528c:	ldrdeq	r2, [r0], -r4
   15290:	ldrdeq	r2, [r0], -ip
   15294:	andeq	r2, r0, ip, ror #27
   15298:	strdeq	r2, [r0], -r8
   1529c:	andeq	r2, r0, r0, lsl lr
   152a0:	andeq	r2, r0, r4, lsr #28
   152a4:	andeq	r2, r0, r4, lsr lr
   152a8:	andeq	r2, r0, ip, lsr lr
   152ac:	andeq	r2, r0, r4, asr #28
   152b0:	andeq	r2, r0, r0, asr lr
   152b4:	andeq	r2, r0, r8, asr lr
   152b8:	andeq	r2, r0, r4, ror #28
   152bc:	andeq	r2, r0, r4, ror lr
   152c0:	andeq	r2, r0, r4, lsl #29
   152c4:	andeq	r2, r0, r0, lsr #29
   152c8:			; <UNDEFINED> instruction: 0x00002ebc
   152cc:	ldrdeq	r2, [r0], -r8
   152d0:	andeq	r2, r0, r0, ror #29
   152d4:	strdeq	r2, [r0], -ip
   152d8:	andeq	r2, r0, r8, lsl #30
   152dc:	andeq	r2, r0, r8, lsr #30
   152e0:	andeq	r2, r0, r0, asr pc
   152e4:	andeq	r2, r0, r0, ror pc
   152e8:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   152ec:			; <UNDEFINED> instruction: 0x00002fb4
   152f0:			; <UNDEFINED> instruction: 0x00002fbc
   152f4:	andeq	r2, r0, ip, asr #31
   152f8:	ldrdeq	r2, [r0], -r8
   152fc:	strdeq	r2, [r0], -r4
   15300:	andeq	r3, r0, r0, lsl r0
   15304:	andeq	r3, r0, ip, lsl r0
   15308:	andeq	r3, r0, r8, lsr r0
   1530c:	andeq	r3, r0, r4, asr r0
   15310:	andeq	r3, r0, ip, ror r0
   15314:	muleq	r0, r8, r0
   15318:	muleq	r0, ip, r0
   1531c:	push	{fp, lr}
   15320:	add	fp, sp, #4
   15324:	sub	sp, sp, #8
   15328:	str	r0, [fp, #-8]
   1532c:	str	r1, [fp, #-12]
   15330:	ldr	r2, [fp, #-8]
   15334:	ldr	r3, [fp, #-12]
   15338:	add	r3, r2, r3
   1533c:	mov	r0, r3
   15340:	bl	14efc <main@@Base+0x238>
   15344:	mov	r3, r0
   15348:	mov	r0, r3
   1534c:	sub	sp, fp, #4
   15350:	pop	{fp, pc}
   15354:	push	{fp, lr}
   15358:	add	fp, sp, #4
   1535c:	sub	sp, sp, #16
   15360:	str	r0, [fp, #-16]
   15364:	mov	r3, #0
   15368:	str	r3, [fp, #-8]
   1536c:	sub	r3, fp, #8
   15370:	mov	r2, #4
   15374:	ldr	r1, [fp, #-16]
   15378:	mov	r0, r3
   1537c:	bl	10d9c <strncpy@plt>
   15380:	ldr	r3, [fp, #-8]
   15384:	mov	r0, r3
   15388:	bl	14fa8 <main@@Base+0x2e4>
   1538c:	mov	r3, r0
   15390:	mov	r0, r3
   15394:	sub	sp, fp, #4
   15398:	pop	{fp, pc}
   1539c:	push	{fp, lr}
   153a0:	add	fp, sp, #4
   153a4:	sub	sp, sp, #8
   153a8:	str	r0, [fp, #-8]
   153ac:	str	r1, [fp, #-12]
   153b0:	ldr	r2, [fp, #-8]
   153b4:	ldr	r3, [fp, #-12]
   153b8:	add	r3, r2, r3
   153bc:	mov	r0, r3
   153c0:	bl	14fcc <main@@Base+0x308>
   153c4:	mov	r3, r0
   153c8:	mov	r0, r3
   153cc:	sub	sp, fp, #4
   153d0:	pop	{fp, pc}
   153d4:	push	{fp, lr}
   153d8:	add	fp, sp, #4
   153dc:	sub	sp, sp, #8
   153e0:	str	r0, [fp, #-8]
   153e4:	str	r1, [fp, #-12]
   153e8:	ldr	r2, [fp, #-8]
   153ec:	ldr	r3, [fp, #-12]
   153f0:	add	r3, r2, r3
   153f4:	mov	r0, r3
   153f8:	bl	14f54 <main@@Base+0x290>
   153fc:	mov	r3, r0
   15400:	mov	r0, r3
   15404:	sub	sp, fp, #4
   15408:	pop	{fp, pc}
   1540c:	push	{fp}		; (str fp, [sp, #-4]!)
   15410:	add	fp, sp, #0
   15414:	sub	sp, sp, #28
   15418:	str	r0, [fp, #-16]
   1541c:	str	r1, [fp, #-20]	; 0xffffffec
   15420:	str	r2, [fp, #-24]	; 0xffffffe8
   15424:	ldr	r2, [fp, #-20]	; 0xffffffec
   15428:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1542c:	add	r3, r2, r3
   15430:	str	r3, [fp, #-8]
   15434:	ldr	r2, [fp, #-8]
   15438:	ldr	r3, [fp, #-20]	; 0xffffffec
   1543c:	cmp	r2, r3
   15440:	bls	15470 <flatcc_verify_error_string@@Base+0x474>
   15444:	ldr	r3, [fp, #-8]
   15448:	add	r2, r3, #4
   1544c:	ldr	r3, [fp, #-16]
   15450:	cmp	r2, r3
   15454:	bhi	15470 <flatcc_verify_error_string@@Base+0x474>
   15458:	ldr	r3, [fp, #-8]
   1545c:	and	r3, r3, #3
   15460:	cmp	r3, #0
   15464:	bne	15470 <flatcc_verify_error_string@@Base+0x474>
   15468:	mov	r3, #1
   1546c:	b	15474 <flatcc_verify_error_string@@Base+0x478>
   15470:	mov	r3, #0
   15474:	mov	r0, r3
   15478:	add	sp, fp, #0
   1547c:	pop	{fp}		; (ldr fp, [sp], #4)
   15480:	bx	lr
   15484:	push	{fp}		; (str fp, [sp, #-4]!)
   15488:	add	fp, sp, #0
   1548c:	sub	sp, sp, #28
   15490:	str	r0, [fp, #-16]
   15494:	str	r1, [fp, #-20]	; 0xffffffec
   15498:	str	r2, [fp, #-24]	; 0xffffffe8
   1549c:	strh	r3, [fp, #-26]	; 0xffffffe6
   154a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   154a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   154a8:	add	r3, r2, r3
   154ac:	str	r3, [fp, #-8]
   154b0:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   154b4:	cmp	r3, #4
   154b8:	movcs	r3, r3
   154bc:	movcc	r3, #4
   154c0:	strh	r3, [fp, #-26]	; 0xffffffe6
   154c4:	ldr	r2, [fp, #-8]
   154c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   154cc:	cmp	r2, r3
   154d0:	bls	15510 <flatcc_verify_error_string@@Base+0x514>
   154d4:	ldr	r3, [fp, #-8]
   154d8:	add	r2, r3, #4
   154dc:	ldr	r3, [fp, #-16]
   154e0:	cmp	r2, r3
   154e4:	bhi	15510 <flatcc_verify_error_string@@Base+0x514>
   154e8:	ldr	r3, [fp, #-8]
   154ec:	add	r2, r3, #4
   154f0:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   154f4:	sub	r3, r3, #1
   154f8:	orr	r3, r3, #3
   154fc:	and	r3, r3, r2
   15500:	cmp	r3, #0
   15504:	bne	15510 <flatcc_verify_error_string@@Base+0x514>
   15508:	mov	r3, #1
   1550c:	b	15514 <flatcc_verify_error_string@@Base+0x518>
   15510:	mov	r3, #0
   15514:	mov	r0, r3
   15518:	add	sp, fp, #0
   1551c:	pop	{fp}		; (ldr fp, [sp], #4)
   15520:	bx	lr
   15524:	push	{fp}		; (str fp, [sp, #-4]!)
   15528:	add	fp, sp, #0
   1552c:	sub	sp, sp, #36	; 0x24
   15530:	str	r0, [fp, #-24]	; 0xffffffe8
   15534:	str	r1, [fp, #-28]	; 0xffffffe4
   15538:	str	r2, [fp, #-32]	; 0xffffffe0
   1553c:	str	r3, [fp, #-36]	; 0xffffffdc
   15540:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15544:	cmp	r3, #0
   15548:	beq	15564 <flatcc_verify_error_string@@Base+0x568>
   1554c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15550:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15554:	add	r2, r2, r3
   15558:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1555c:	cmp	r2, r3
   15560:	bls	1556c <flatcc_verify_error_string@@Base+0x570>
   15564:	mov	r3, #18
   15568:	b	1562c <flatcc_verify_error_string@@Base+0x630>
   1556c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15570:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15574:	add	r3, r2, r3
   15578:	str	r3, [fp, #-28]	; 0xffffffe4
   1557c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15580:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15584:	add	r2, r2, r3
   15588:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1558c:	cmp	r2, r3
   15590:	movcs	r3, #1
   15594:	movcc	r3, #0
   15598:	uxtb	r3, r3
   1559c:	str	r3, [fp, #-8]
   155a0:	ldr	r3, [fp, #-8]
   155a4:	cmp	r3, #0
   155a8:	bne	155b4 <flatcc_verify_error_string@@Base+0x5b8>
   155ac:	mov	r3, #10
   155b0:	b	1562c <flatcc_verify_error_string@@Base+0x630>
   155b4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   155b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   155bc:	add	r2, r2, r3
   155c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   155c4:	cmp	r2, r3
   155c8:	movls	r3, #1
   155cc:	movhi	r3, #0
   155d0:	uxtb	r3, r3
   155d4:	str	r3, [fp, #-12]
   155d8:	ldr	r3, [fp, #-12]
   155dc:	cmp	r3, #0
   155e0:	bne	155ec <flatcc_verify_error_string@@Base+0x5f0>
   155e4:	mov	r3, #9
   155e8:	b	1562c <flatcc_verify_error_string@@Base+0x630>
   155ec:	ldrh	r3, [fp, #4]
   155f0:	sub	r3, r3, #1
   155f4:	mov	r2, r3
   155f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   155fc:	and	r3, r3, r2
   15600:	cmp	r3, #0
   15604:	moveq	r3, #1
   15608:	movne	r3, #0
   1560c:	uxtb	r3, r3
   15610:	str	r3, [fp, #-16]
   15614:	ldr	r3, [fp, #-16]
   15618:	cmp	r3, #0
   1561c:	bne	15628 <flatcc_verify_error_string@@Base+0x62c>
   15620:	mov	r3, #11
   15624:	b	1562c <flatcc_verify_error_string@@Base+0x630>
   15628:	mov	r3, #0
   1562c:	mov	r0, r3
   15630:	add	sp, fp, #0
   15634:	pop	{fp}		; (ldr fp, [sp], #4)
   15638:	bx	lr
   1563c:	push	{fp, lr}
   15640:	add	fp, sp, #4
   15644:	sub	sp, sp, #16
   15648:	str	r0, [fp, #-16]
   1564c:	mov	r3, r1
   15650:	strh	r3, [fp, #-18]	; 0xffffffee
   15654:	ldrh	r3, [fp, #-18]	; 0xffffffee
   15658:	add	r3, r3, #2
   1565c:	uxth	r3, r3
   15660:	lsl	r3, r3, #1
   15664:	strh	r3, [fp, #-6]
   15668:	ldr	r3, [fp, #-16]
   1566c:	ldrh	r3, [r3, #22]
   15670:	ldrh	r2, [fp, #-6]
   15674:	cmp	r2, r3
   15678:	bcc	15684 <flatcc_verify_error_string@@Base+0x688>
   1567c:	mov	r3, #0
   15680:	b	156a0 <flatcc_verify_error_string@@Base+0x6a4>
   15684:	ldr	r3, [fp, #-16]
   15688:	ldr	r3, [r3, #12]
   1568c:	ldrh	r2, [fp, #-6]
   15690:	mov	r1, r2
   15694:	mov	r0, r3
   15698:	bl	153d4 <flatcc_verify_error_string@@Base+0x3d8>
   1569c:	mov	r3, r0
   156a0:	mov	r0, r3
   156a4:	sub	sp, fp, #4
   156a8:	pop	{fp, pc}
   156ac:	push	{fp, lr}
   156b0:	add	fp, sp, #4
   156b4:	sub	sp, sp, #16
   156b8:	str	r0, [fp, #-16]
   156bc:	mov	r3, r1
   156c0:	strh	r3, [fp, #-18]	; 0xffffffee
   156c4:	ldrh	r3, [fp, #-18]	; 0xffffffee
   156c8:	mov	r1, r3
   156cc:	ldr	r0, [fp, #-16]
   156d0:	bl	1563c <flatcc_verify_error_string@@Base+0x640>
   156d4:	mov	r3, r0
   156d8:	strh	r3, [fp, #-6]
   156dc:	ldrh	r3, [fp, #-6]
   156e0:	cmp	r3, #0
   156e4:	beq	15708 <flatcc_verify_error_string@@Base+0x70c>
   156e8:	ldr	r3, [fp, #-16]
   156ec:	ldr	r2, [r3]
   156f0:	ldr	r3, [fp, #-16]
   156f4:	ldr	r1, [r3, #16]
   156f8:	ldrh	r3, [fp, #-6]
   156fc:	add	r3, r1, r3
   15700:	add	r3, r2, r3
   15704:	b	1570c <flatcc_verify_error_string@@Base+0x710>
   15708:	mov	r3, #0
   1570c:	mov	r0, r3
   15710:	sub	sp, fp, #4
   15714:	pop	{fp, pc}
   15718:	push	{fp, lr}
   1571c:	add	fp, sp, #4
   15720:	sub	sp, sp, #48	; 0x30
   15724:	str	r0, [fp, #-40]	; 0xffffffd8
   15728:	str	r2, [fp, #-48]	; 0xffffffd0
   1572c:	str	r3, [fp, #-52]	; 0xffffffcc
   15730:	strh	r1, [fp, #-42]	; 0xffffffd6
   15734:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15738:	ldr	r3, [r3]
   1573c:	str	r3, [fp, #-8]
   15740:	ldrh	r3, [fp, #-42]	; 0xffffffd6
   15744:	mov	r1, r3
   15748:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1574c:	bl	1563c <flatcc_verify_error_string@@Base+0x640>
   15750:	mov	r3, r0
   15754:	strh	r3, [fp, #-10]
   15758:	ldrh	r3, [fp, #-10]
   1575c:	cmp	r3, #0
   15760:	bne	15798 <flatcc_verify_error_string@@Base+0x79c>
   15764:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15768:	cmp	r3, #0
   1576c:	moveq	r3, #1
   15770:	movne	r3, #0
   15774:	uxtb	r3, r3
   15778:	str	r3, [fp, #-16]
   1577c:	ldr	r3, [fp, #-16]
   15780:	cmp	r3, #0
   15784:	bne	15790 <flatcc_verify_error_string@@Base+0x794>
   15788:	mov	r3, #4
   1578c:	b	15860 <flatcc_verify_error_string@@Base+0x864>
   15790:	mov	r3, #0
   15794:	b	15860 <flatcc_verify_error_string@@Base+0x864>
   15798:	ldrh	r3, [fp, #-10]
   1579c:	str	r3, [fp, #-20]	; 0xffffffec
   157a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   157a4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   157a8:	add	r3, r2, r3
   157ac:	str	r3, [fp, #-24]	; 0xffffffe8
   157b0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   157b4:	ldrh	r3, [r3, #20]
   157b8:	mov	r2, r3
   157bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   157c0:	cmp	r2, r3
   157c4:	movcs	r3, #1
   157c8:	movcc	r3, #0
   157cc:	uxtb	r3, r3
   157d0:	str	r3, [fp, #-28]	; 0xffffffe4
   157d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   157d8:	cmp	r3, #0
   157dc:	bne	157e8 <flatcc_verify_error_string@@Base+0x7ec>
   157e0:	mov	r3, #13
   157e4:	b	15860 <flatcc_verify_error_string@@Base+0x864>
   157e8:	mov	r3, #1
   157ec:	str	r3, [fp, #-32]	; 0xffffffe0
   157f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   157f4:	cmp	r3, #0
   157f8:	bne	15804 <flatcc_verify_error_string@@Base+0x808>
   157fc:	mov	r3, #14
   15800:	b	15860 <flatcc_verify_error_string@@Base+0x864>
   15804:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15808:	ldr	r2, [r3, #16]
   1580c:	ldr	r3, [fp, #-8]
   15810:	add	r3, r2, r3
   15814:	ldr	r2, [fp, #-20]	; 0xffffffec
   15818:	add	r3, r2, r3
   1581c:	str	r3, [fp, #-20]	; 0xffffffec
   15820:	ldrh	r3, [fp, #4]
   15824:	sub	r3, r3, #1
   15828:	mov	r2, r3
   1582c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15830:	and	r3, r3, r2
   15834:	cmp	r3, #0
   15838:	moveq	r3, #1
   1583c:	movne	r3, #0
   15840:	uxtb	r3, r3
   15844:	str	r3, [fp, #-36]	; 0xffffffdc
   15848:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1584c:	cmp	r3, #0
   15850:	bne	1585c <flatcc_verify_error_string@@Base+0x860>
   15854:	mov	r3, #12
   15858:	b	15860 <flatcc_verify_error_string@@Base+0x864>
   1585c:	mov	r3, #0
   15860:	mov	r0, r3
   15864:	sub	sp, fp, #4
   15868:	pop	{fp, pc}
   1586c:	push	{fp, lr}
   15870:	add	fp, sp, #4
   15874:	sub	sp, sp, #40	; 0x28
   15878:	str	r0, [fp, #-32]	; 0xffffffe0
   1587c:	str	r2, [fp, #-40]	; 0xffffffd8
   15880:	str	r3, [fp, #-44]	; 0xffffffd4
   15884:	strh	r1, [fp, #-34]	; 0xffffffde
   15888:	ldrh	r3, [fp, #-34]	; 0xffffffde
   1588c:	mov	r1, r3
   15890:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15894:	bl	1563c <flatcc_verify_error_string@@Base+0x640>
   15898:	mov	r3, r0
   1589c:	strh	r3, [fp, #-6]
   158a0:	ldrh	r3, [fp, #-6]
   158a4:	cmp	r3, #0
   158a8:	bne	158d4 <flatcc_verify_error_string@@Base+0x8d8>
   158ac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   158b0:	mov	r2, #0
   158b4:	str	r2, [r3]
   158b8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   158bc:	cmp	r3, #0
   158c0:	beq	158cc <flatcc_verify_error_string@@Base+0x8d0>
   158c4:	mov	r3, #4
   158c8:	b	15990 <flatcc_verify_error_string@@Base+0x994>
   158cc:	mov	r3, #0
   158d0:	b	15990 <flatcc_verify_error_string@@Base+0x994>
   158d4:	ldrh	r3, [fp, #-6]
   158d8:	str	r3, [fp, #-12]
   158dc:	ldr	r3, [fp, #-12]
   158e0:	add	r3, r3, #4
   158e4:	str	r3, [fp, #-16]
   158e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   158ec:	ldrh	r3, [r3, #20]
   158f0:	mov	r2, r3
   158f4:	ldr	r3, [fp, #-16]
   158f8:	cmp	r2, r3
   158fc:	movcs	r3, #1
   15900:	movcc	r3, #0
   15904:	uxtb	r3, r3
   15908:	str	r3, [fp, #-20]	; 0xffffffec
   1590c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15910:	cmp	r3, #0
   15914:	bne	15920 <flatcc_verify_error_string@@Base+0x924>
   15918:	mov	r3, #13
   1591c:	b	15990 <flatcc_verify_error_string@@Base+0x994>
   15920:	mov	r3, #1
   15924:	str	r3, [fp, #-24]	; 0xffffffe8
   15928:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1592c:	cmp	r3, #0
   15930:	bne	1593c <flatcc_verify_error_string@@Base+0x940>
   15934:	mov	r3, #14
   15938:	b	15990 <flatcc_verify_error_string@@Base+0x994>
   1593c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15940:	ldr	r3, [r3, #16]
   15944:	ldr	r2, [fp, #-12]
   15948:	add	r3, r2, r3
   1594c:	str	r3, [fp, #-12]
   15950:	ldr	r3, [fp, #-12]
   15954:	and	r3, r3, #3
   15958:	cmp	r3, #0
   1595c:	moveq	r3, #1
   15960:	movne	r3, #0
   15964:	uxtb	r3, r3
   15968:	str	r3, [fp, #-28]	; 0xffffffe4
   1596c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15970:	cmp	r3, #0
   15974:	bne	15980 <flatcc_verify_error_string@@Base+0x984>
   15978:	mov	r3, #12
   1597c:	b	15990 <flatcc_verify_error_string@@Base+0x994>
   15980:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15984:	ldr	r2, [fp, #-12]
   15988:	str	r2, [r3]
   1598c:	mov	r3, #0
   15990:	mov	r0, r3
   15994:	sub	sp, fp, #4
   15998:	pop	{fp, pc}
   1599c:	push	{fp, lr}
   159a0:	add	fp, sp, #4
   159a4:	sub	sp, sp, #32
   159a8:	str	r0, [fp, #-24]	; 0xffffffe8
   159ac:	str	r1, [fp, #-28]	; 0xffffffe4
   159b0:	str	r2, [fp, #-32]	; 0xffffffe0
   159b4:	str	r3, [fp, #-36]	; 0xffffffdc
   159b8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   159bc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   159c0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   159c4:	bl	1540c <flatcc_verify_error_string@@Base+0x410>
   159c8:	str	r0, [fp, #-8]
   159cc:	ldr	r3, [fp, #-8]
   159d0:	cmp	r3, #0
   159d4:	bne	159e0 <flatcc_verify_error_string@@Base+0x9e4>
   159d8:	mov	r3, #17
   159dc:	b	15a8c <flatcc_verify_error_string@@Base+0xa90>
   159e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   159e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   159e8:	add	r3, r2, r3
   159ec:	str	r3, [fp, #-32]	; 0xffffffe0
   159f0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   159f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   159f8:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   159fc:	str	r0, [fp, #-12]
   15a00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15a04:	add	r3, r3, #4
   15a08:	str	r3, [fp, #-32]	; 0xffffffe0
   15a0c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15a10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15a14:	sub	r2, r2, r3
   15a18:	ldr	r3, [fp, #-12]
   15a1c:	add	r3, r3, #1
   15a20:	cmp	r2, r3
   15a24:	movcs	r3, #1
   15a28:	movcc	r3, #0
   15a2c:	uxtb	r3, r3
   15a30:	str	r3, [fp, #-16]
   15a34:	ldr	r3, [fp, #-16]
   15a38:	cmp	r3, #0
   15a3c:	bne	15a48 <flatcc_verify_error_string@@Base+0xa4c>
   15a40:	mov	r3, #8
   15a44:	b	15a8c <flatcc_verify_error_string@@Base+0xa90>
   15a48:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15a4c:	ldr	r3, [fp, #-12]
   15a50:	add	r3, r2, r3
   15a54:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15a58:	add	r3, r2, r3
   15a5c:	ldrb	r3, [r3]
   15a60:	cmp	r3, #0
   15a64:	moveq	r3, #1
   15a68:	movne	r3, #0
   15a6c:	uxtb	r3, r3
   15a70:	str	r3, [fp, #-20]	; 0xffffffec
   15a74:	ldr	r3, [fp, #-20]	; 0xffffffec
   15a78:	cmp	r3, #0
   15a7c:	bne	15a88 <flatcc_verify_error_string@@Base+0xa8c>
   15a80:	mov	r3, #7
   15a84:	b	15a8c <flatcc_verify_error_string@@Base+0xa90>
   15a88:	mov	r3, #0
   15a8c:	mov	r0, r3
   15a90:	sub	sp, fp, #4
   15a94:	pop	{fp, pc}
   15a98:	push	{fp, lr}
   15a9c:	add	fp, sp, #4
   15aa0:	sub	sp, sp, #32
   15aa4:	str	r0, [fp, #-24]	; 0xffffffe8
   15aa8:	str	r1, [fp, #-28]	; 0xffffffe4
   15aac:	str	r2, [fp, #-32]	; 0xffffffe0
   15ab0:	str	r3, [fp, #-36]	; 0xffffffdc
   15ab4:	ldrh	r3, [fp, #8]
   15ab8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15abc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15ac0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15ac4:	bl	15484 <flatcc_verify_error_string@@Base+0x488>
   15ac8:	str	r0, [fp, #-8]
   15acc:	ldr	r3, [fp, #-8]
   15ad0:	cmp	r3, #0
   15ad4:	bne	15ae0 <flatcc_verify_error_string@@Base+0xae4>
   15ad8:	mov	r3, #16
   15adc:	b	15b80 <flatcc_verify_error_string@@Base+0xb84>
   15ae0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15ae4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15ae8:	add	r3, r2, r3
   15aec:	str	r3, [fp, #-32]	; 0xffffffe0
   15af0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15af4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15af8:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   15afc:	str	r0, [fp, #-12]
   15b00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15b04:	add	r3, r3, #4
   15b08:	str	r3, [fp, #-32]	; 0xffffffe0
   15b0c:	ldr	r2, [fp, #-12]
   15b10:	ldr	r3, [fp, #12]
   15b14:	cmp	r2, r3
   15b18:	movls	r3, #1
   15b1c:	movhi	r3, #0
   15b20:	uxtb	r3, r3
   15b24:	str	r3, [fp, #-16]
   15b28:	ldr	r3, [fp, #-16]
   15b2c:	cmp	r3, #0
   15b30:	bne	15b3c <flatcc_verify_error_string@@Base+0xb40>
   15b34:	mov	r3, #25
   15b38:	b	15b80 <flatcc_verify_error_string@@Base+0xb84>
   15b3c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15b40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15b44:	sub	r2, r2, r3
   15b48:	ldr	r3, [fp, #-12]
   15b4c:	ldr	r1, [fp, #4]
   15b50:	mul	r3, r1, r3
   15b54:	cmp	r2, r3
   15b58:	movcs	r3, #1
   15b5c:	movcc	r3, #0
   15b60:	uxtb	r3, r3
   15b64:	str	r3, [fp, #-20]	; 0xffffffec
   15b68:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b6c:	cmp	r3, #0
   15b70:	bne	15b7c <flatcc_verify_error_string@@Base+0xb80>
   15b74:	mov	r3, #26
   15b78:	b	15b80 <flatcc_verify_error_string@@Base+0xb84>
   15b7c:	mov	r3, #0
   15b80:	mov	r0, r3
   15b84:	sub	sp, fp, #4
   15b88:	pop	{fp, pc}
   15b8c:	push	{fp, lr}
   15b90:	add	fp, sp, #4
   15b94:	sub	sp, sp, #40	; 0x28
   15b98:	str	r0, [fp, #-16]
   15b9c:	str	r1, [fp, #-20]	; 0xffffffec
   15ba0:	str	r2, [fp, #-24]	; 0xffffffe8
   15ba4:	str	r3, [fp, #-28]	; 0xffffffe4
   15ba8:	mvn	r3, #-1073741824	; 0xc0000000
   15bac:	str	r3, [sp, #8]
   15bb0:	mov	r3, #4
   15bb4:	str	r3, [sp, #4]
   15bb8:	mov	r3, #4
   15bbc:	str	r3, [sp]
   15bc0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15bc4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15bc8:	ldr	r1, [fp, #-20]	; 0xffffffec
   15bcc:	ldr	r0, [fp, #-16]
   15bd0:	bl	15a98 <flatcc_verify_error_string@@Base+0xa9c>
   15bd4:	mov	r3, r0
   15bd8:	cmp	r3, #0
   15bdc:	beq	15c14 <flatcc_verify_error_string@@Base+0xc18>
   15be0:	mvn	r3, #-1073741824	; 0xc0000000
   15be4:	str	r3, [sp, #8]
   15be8:	mov	r3, #4
   15bec:	str	r3, [sp, #4]
   15bf0:	mov	r3, #4
   15bf4:	str	r3, [sp]
   15bf8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15bfc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15c00:	ldr	r1, [fp, #-20]	; 0xffffffec
   15c04:	ldr	r0, [fp, #-16]
   15c08:	bl	15a98 <flatcc_verify_error_string@@Base+0xa9c>
   15c0c:	mov	r3, r0
   15c10:	b	15ccc <flatcc_verify_error_string@@Base+0xcd0>
   15c14:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15c18:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15c1c:	add	r3, r2, r3
   15c20:	str	r3, [fp, #-24]	; 0xffffffe8
   15c24:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15c28:	ldr	r0, [fp, #-16]
   15c2c:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   15c30:	str	r0, [fp, #-12]
   15c34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15c38:	add	r3, r3, #4
   15c3c:	str	r3, [fp, #-24]	; 0xffffffe8
   15c40:	mov	r3, #0
   15c44:	str	r3, [fp, #-8]
   15c48:	b	15cb8 <flatcc_verify_error_string@@Base+0xcbc>
   15c4c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15c50:	ldr	r0, [fp, #-16]
   15c54:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   15c58:	mov	r3, r0
   15c5c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15c60:	ldr	r1, [fp, #-20]	; 0xffffffec
   15c64:	ldr	r0, [fp, #-16]
   15c68:	bl	1599c <flatcc_verify_error_string@@Base+0x9a0>
   15c6c:	mov	r3, r0
   15c70:	cmp	r3, #0
   15c74:	beq	15ca0 <flatcc_verify_error_string@@Base+0xca4>
   15c78:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15c7c:	ldr	r0, [fp, #-16]
   15c80:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   15c84:	mov	r3, r0
   15c88:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15c8c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15c90:	ldr	r0, [fp, #-16]
   15c94:	bl	1599c <flatcc_verify_error_string@@Base+0x9a0>
   15c98:	mov	r3, r0
   15c9c:	b	15ccc <flatcc_verify_error_string@@Base+0xcd0>
   15ca0:	ldr	r3, [fp, #-8]
   15ca4:	add	r3, r3, #1
   15ca8:	str	r3, [fp, #-8]
   15cac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15cb0:	add	r3, r3, #4
   15cb4:	str	r3, [fp, #-24]	; 0xffffffe8
   15cb8:	ldr	r2, [fp, #-8]
   15cbc:	ldr	r3, [fp, #-12]
   15cc0:	cmp	r2, r3
   15cc4:	bcc	15c4c <flatcc_verify_error_string@@Base+0xc50>
   15cc8:	mov	r3, #0
   15ccc:	mov	r0, r3
   15cd0:	sub	sp, fp, #4
   15cd4:	pop	{fp, pc}
   15cd8:	push	{r4, fp, lr}
   15cdc:	add	fp, sp, #8
   15ce0:	sub	sp, sp, #84	; 0x54
   15ce4:	str	r0, [fp, #-80]	; 0xffffffb0
   15ce8:	str	r1, [fp, #-84]	; 0xffffffac
   15cec:	str	r2, [fp, #-88]	; 0xffffffa8
   15cf0:	str	r3, [fp, #-92]	; 0xffffffa4
   15cf4:	ldr	r3, [fp, #4]
   15cf8:	sub	r3, r3, #1
   15cfc:	str	r3, [fp, #-68]	; 0xffffffbc
   15d00:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15d04:	str	r3, [fp, #-16]
   15d08:	ldr	r3, [fp, #-16]
   15d0c:	cmp	r3, #0
   15d10:	bne	15d1c <flatcc_verify_error_string@@Base+0xd20>
   15d14:	mov	r3, #3
   15d18:	b	15f24 <flatcc_verify_error_string@@Base+0xf28>
   15d1c:	ldr	r2, [fp, #-92]	; 0xffffffa4
   15d20:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15d24:	ldr	r0, [fp, #-84]	; 0xffffffac
   15d28:	bl	1540c <flatcc_verify_error_string@@Base+0x410>
   15d2c:	str	r0, [fp, #-20]	; 0xffffffec
   15d30:	ldr	r3, [fp, #-20]	; 0xffffffec
   15d34:	cmp	r3, #0
   15d38:	bne	15d44 <flatcc_verify_error_string@@Base+0xd48>
   15d3c:	mov	r3, #15
   15d40:	b	15f24 <flatcc_verify_error_string@@Base+0xf28>
   15d44:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15d48:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15d4c:	add	r3, r2, r3
   15d50:	str	r3, [fp, #-60]	; 0xffffffc4
   15d54:	ldr	r4, [fp, #-60]	; 0xffffffc4
   15d58:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15d5c:	mov	r1, r3
   15d60:	ldr	r0, [fp, #-80]	; 0xffffffb0
   15d64:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   15d68:	mov	r3, r0
   15d6c:	sub	r3, r4, r3
   15d70:	str	r3, [fp, #-24]	; 0xffffffe8
   15d74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15d78:	cmp	r3, #0
   15d7c:	blt	15d98 <flatcc_verify_error_string@@Base+0xd9c>
   15d80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15d84:	and	r3, r3, #1
   15d88:	cmp	r3, #0
   15d8c:	bne	15d98 <flatcc_verify_error_string@@Base+0xd9c>
   15d90:	mov	r3, #1
   15d94:	b	15d9c <flatcc_verify_error_string@@Base+0xda0>
   15d98:	mov	r3, #0
   15d9c:	str	r3, [fp, #-28]	; 0xffffffe4
   15da0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15da4:	cmp	r3, #0
   15da8:	bne	15db4 <flatcc_verify_error_string@@Base+0xdb8>
   15dac:	mov	r3, #29
   15db0:	b	15f24 <flatcc_verify_error_string@@Base+0xf28>
   15db4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15db8:	add	r2, r3, #2
   15dbc:	ldr	r3, [fp, #-84]	; 0xffffffac
   15dc0:	cmp	r2, r3
   15dc4:	movls	r3, #1
   15dc8:	movhi	r3, #0
   15dcc:	uxtb	r3, r3
   15dd0:	str	r3, [fp, #-32]	; 0xffffffe0
   15dd4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15dd8:	cmp	r3, #0
   15ddc:	bne	15de8 <flatcc_verify_error_string@@Base+0xdec>
   15de0:	mov	r3, #27
   15de4:	b	15f24 <flatcc_verify_error_string@@Base+0xf28>
   15de8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15dec:	ldr	r0, [fp, #-80]	; 0xffffffb0
   15df0:	bl	153d4 <flatcc_verify_error_string@@Base+0x3d8>
   15df4:	mov	r3, r0
   15df8:	strh	r3, [fp, #-54]	; 0xffffffca
   15dfc:	ldrh	r3, [fp, #-54]	; 0xffffffca
   15e00:	mov	r2, r3
   15e04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15e08:	add	r3, r2, r3
   15e0c:	str	r3, [fp, #-36]	; 0xffffffdc
   15e10:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15e14:	ldr	r3, [fp, #-84]	; 0xffffffac
   15e18:	cmp	r2, r3
   15e1c:	bhi	15e38 <flatcc_verify_error_string@@Base+0xe3c>
   15e20:	ldrh	r3, [fp, #-54]	; 0xffffffca
   15e24:	and	r3, r3, #1
   15e28:	cmp	r3, #0
   15e2c:	bne	15e38 <flatcc_verify_error_string@@Base+0xe3c>
   15e30:	mov	r3, #1
   15e34:	b	15e3c <flatcc_verify_error_string@@Base+0xe40>
   15e38:	mov	r3, #0
   15e3c:	str	r3, [fp, #-40]	; 0xffffffd8
   15e40:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15e44:	cmp	r3, #0
   15e48:	bne	15e54 <flatcc_verify_error_string@@Base+0xe58>
   15e4c:	mov	r3, #30
   15e50:	b	15f24 <flatcc_verify_error_string@@Base+0xf28>
   15e54:	mov	r3, #1
   15e58:	str	r3, [fp, #-44]	; 0xffffffd4
   15e5c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15e60:	cmp	r3, #0
   15e64:	bne	15e70 <flatcc_verify_error_string@@Base+0xe74>
   15e68:	mov	r3, #31
   15e6c:	b	15f24 <flatcc_verify_error_string@@Base+0xf28>
   15e70:	ldrh	r3, [fp, #-54]	; 0xffffffca
   15e74:	cmp	r3, #3
   15e78:	movhi	r3, #1
   15e7c:	movls	r3, #0
   15e80:	uxtb	r3, r3
   15e84:	str	r3, [fp, #-48]	; 0xffffffd0
   15e88:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15e8c:	cmp	r3, #0
   15e90:	bne	15e9c <flatcc_verify_error_string@@Base+0xea0>
   15e94:	mov	r3, #28
   15e98:	b	15f24 <flatcc_verify_error_string@@Base+0xf28>
   15e9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ea0:	add	r3, r3, #2
   15ea4:	mov	r1, r3
   15ea8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   15eac:	bl	153d4 <flatcc_verify_error_string@@Base+0x3d8>
   15eb0:	mov	r3, r0
   15eb4:	strh	r3, [fp, #-56]	; 0xffffffc8
   15eb8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15ebc:	ldr	r2, [fp, #-84]	; 0xffffffac
   15ec0:	sub	r3, r2, r3
   15ec4:	ldrh	r2, [fp, #-56]	; 0xffffffc8
   15ec8:	cmp	r3, r2
   15ecc:	movcs	r3, #1
   15ed0:	movcc	r3, #0
   15ed4:	uxtb	r3, r3
   15ed8:	str	r3, [fp, #-52]	; 0xffffffcc
   15edc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15ee0:	cmp	r3, #0
   15ee4:	bne	15ef0 <flatcc_verify_error_string@@Base+0xef4>
   15ee8:	mov	r3, #20
   15eec:	b	15f24 <flatcc_verify_error_string@@Base+0xf28>
   15ef0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   15ef4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ef8:	add	r3, r2, r3
   15efc:	str	r3, [fp, #-64]	; 0xffffffc0
   15f00:	ldr	r3, [fp, #-80]	; 0xffffffb0
   15f04:	str	r3, [fp, #-76]	; 0xffffffb4
   15f08:	ldr	r3, [fp, #-84]	; 0xffffffac
   15f0c:	str	r3, [fp, #-72]	; 0xffffffb8
   15f10:	sub	r2, fp, #76	; 0x4c
   15f14:	ldr	r3, [fp, #8]
   15f18:	mov	r0, r2
   15f1c:	blx	r3
   15f20:	mov	r3, r0
   15f24:	mov	r0, r3
   15f28:	sub	sp, fp, #8
   15f2c:	pop	{r4, fp, pc}
   15f30:	push	{fp, lr}
   15f34:	add	fp, sp, #4
   15f38:	sub	sp, sp, #48	; 0x30
   15f3c:	str	r0, [fp, #-24]	; 0xffffffe8
   15f40:	str	r1, [fp, #-28]	; 0xffffffe4
   15f44:	str	r2, [fp, #-32]	; 0xffffffe0
   15f48:	str	r3, [fp, #-36]	; 0xffffffdc
   15f4c:	ldr	r3, [fp, #4]
   15f50:	sub	r2, r3, #1
   15f54:	str	r2, [fp, #4]
   15f58:	cmp	r3, #0
   15f5c:	movgt	r3, #1
   15f60:	movle	r3, #0
   15f64:	uxtb	r3, r3
   15f68:	str	r3, [fp, #-12]
   15f6c:	ldr	r3, [fp, #-12]
   15f70:	cmp	r3, #0
   15f74:	bne	15f80 <flatcc_verify_error_string@@Base+0xf84>
   15f78:	mov	r3, #3
   15f7c:	b	160cc <flatcc_verify_error_string@@Base+0x10d0>
   15f80:	mvn	r3, #-1073741824	; 0xc0000000
   15f84:	str	r3, [sp, #8]
   15f88:	mov	r3, #4
   15f8c:	str	r3, [sp, #4]
   15f90:	mov	r3, #4
   15f94:	str	r3, [sp]
   15f98:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15f9c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15fa0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15fa4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15fa8:	bl	15a98 <flatcc_verify_error_string@@Base+0xa9c>
   15fac:	mov	r3, r0
   15fb0:	cmp	r3, #0
   15fb4:	beq	15fec <flatcc_verify_error_string@@Base+0xff0>
   15fb8:	mvn	r3, #-1073741824	; 0xc0000000
   15fbc:	str	r3, [sp, #8]
   15fc0:	mov	r3, #4
   15fc4:	str	r3, [sp, #4]
   15fc8:	mov	r3, #4
   15fcc:	str	r3, [sp]
   15fd0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15fd4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15fd8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15fdc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15fe0:	bl	15a98 <flatcc_verify_error_string@@Base+0xa9c>
   15fe4:	mov	r3, r0
   15fe8:	b	160cc <flatcc_verify_error_string@@Base+0x10d0>
   15fec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15ff0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15ff4:	add	r3, r2, r3
   15ff8:	str	r3, [fp, #-32]	; 0xffffffe0
   15ffc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16000:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16004:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   16008:	str	r0, [fp, #-16]
   1600c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16010:	add	r3, r3, #4
   16014:	str	r3, [fp, #-32]	; 0xffffffe0
   16018:	mov	r3, #0
   1601c:	str	r3, [fp, #-8]
   16020:	b	160b8 <flatcc_verify_error_string@@Base+0x10bc>
   16024:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16028:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1602c:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   16030:	mov	r2, r0
   16034:	ldr	r3, [fp, #8]
   16038:	str	r3, [sp, #4]
   1603c:	ldr	r3, [fp, #4]
   16040:	str	r3, [sp]
   16044:	mov	r3, r2
   16048:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1604c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16050:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16054:	bl	15cd8 <flatcc_verify_error_string@@Base+0xcdc>
   16058:	mov	r3, r0
   1605c:	cmp	r3, #0
   16060:	beq	160a0 <flatcc_verify_error_string@@Base+0x10a4>
   16064:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16068:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1606c:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   16070:	mov	r2, r0
   16074:	ldr	r3, [fp, #8]
   16078:	str	r3, [sp, #4]
   1607c:	ldr	r3, [fp, #4]
   16080:	str	r3, [sp]
   16084:	mov	r3, r2
   16088:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1608c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16090:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16094:	bl	15cd8 <flatcc_verify_error_string@@Base+0xcdc>
   16098:	mov	r3, r0
   1609c:	b	160cc <flatcc_verify_error_string@@Base+0x10d0>
   160a0:	ldr	r3, [fp, #-8]
   160a4:	add	r3, r3, #1
   160a8:	str	r3, [fp, #-8]
   160ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   160b0:	add	r3, r3, #4
   160b4:	str	r3, [fp, #-32]	; 0xffffffe0
   160b8:	ldr	r2, [fp, #-8]
   160bc:	ldr	r3, [fp, #-16]
   160c0:	cmp	r2, r3
   160c4:	bcc	16024 <flatcc_verify_error_string@@Base+0x1028>
   160c8:	mov	r3, #0
   160cc:	mov	r0, r3
   160d0:	sub	sp, fp, #4
   160d4:	pop	{fp, pc}
   160d8:	push	{fp, lr}
   160dc:	add	fp, sp, #4
   160e0:	sub	sp, sp, #88	; 0x58
   160e4:	str	r0, [fp, #-64]	; 0xffffffc0
   160e8:	str	r1, [fp, #-68]	; 0xffffffbc
   160ec:	str	r2, [fp, #-72]	; 0xffffffb8
   160f0:	str	r3, [fp, #-76]	; 0xffffffb4
   160f4:	ldr	r3, [fp, #12]
   160f8:	sub	r2, r3, #1
   160fc:	str	r2, [fp, #12]
   16100:	cmp	r3, #0
   16104:	movgt	r3, #1
   16108:	movle	r3, #0
   1610c:	uxtb	r3, r3
   16110:	str	r3, [fp, #-12]
   16114:	ldr	r3, [fp, #-12]
   16118:	cmp	r3, #0
   1611c:	bne	16128 <flatcc_verify_error_string@@Base+0x112c>
   16120:	mov	r3, #3
   16124:	b	16324 <flatcc_verify_error_string@@Base+0x1328>
   16128:	mvn	r3, #-1073741824	; 0xc0000000
   1612c:	str	r3, [sp, #8]
   16130:	mov	r3, #4
   16134:	str	r3, [sp, #4]
   16138:	mov	r3, #4
   1613c:	str	r3, [sp]
   16140:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16144:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16148:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1614c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16150:	bl	15a98 <flatcc_verify_error_string@@Base+0xa9c>
   16154:	mov	r3, r0
   16158:	cmp	r3, #0
   1615c:	beq	16194 <flatcc_verify_error_string@@Base+0x1198>
   16160:	mvn	r3, #-1073741824	; 0xc0000000
   16164:	str	r3, [sp, #8]
   16168:	mov	r3, #4
   1616c:	str	r3, [sp, #4]
   16170:	mov	r3, #4
   16174:	str	r3, [sp]
   16178:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1617c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16180:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16184:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16188:	bl	15a98 <flatcc_verify_error_string@@Base+0xa9c>
   1618c:	mov	r3, r0
   16190:	b	16324 <flatcc_verify_error_string@@Base+0x1328>
   16194:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16198:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1619c:	add	r3, r2, r3
   161a0:	str	r3, [fp, #-72]	; 0xffffffb8
   161a4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   161a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   161ac:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   161b0:	str	r0, [fp, #-16]
   161b4:	ldr	r2, [fp, #-16]
   161b8:	ldr	r3, [fp, #4]
   161bc:	cmp	r2, r3
   161c0:	moveq	r3, #1
   161c4:	movne	r3, #0
   161c8:	uxtb	r3, r3
   161cc:	str	r3, [fp, #-20]	; 0xffffffec
   161d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   161d4:	cmp	r3, #0
   161d8:	bne	161e4 <flatcc_verify_error_string@@Base+0x11e8>
   161dc:	mov	r3, #34	; 0x22
   161e0:	b	16324 <flatcc_verify_error_string@@Base+0x1328>
   161e4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   161e8:	add	r3, r3, #4
   161ec:	str	r3, [fp, #-72]	; 0xffffffb8
   161f0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   161f4:	str	r3, [fp, #-56]	; 0xffffffc8
   161f8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   161fc:	str	r3, [fp, #-52]	; 0xffffffcc
   16200:	ldr	r3, [fp, #12]
   16204:	str	r3, [fp, #-48]	; 0xffffffd0
   16208:	mov	r3, #0
   1620c:	str	r3, [fp, #-8]
   16210:	b	16310 <flatcc_verify_error_string@@Base+0x1314>
   16214:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16218:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1621c:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   16220:	str	r0, [fp, #-24]	; 0xffffffe8
   16224:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16228:	cmp	r3, #0
   1622c:	bne	16268 <flatcc_verify_error_string@@Base+0x126c>
   16230:	ldr	r2, [fp, #8]
   16234:	ldr	r3, [fp, #-8]
   16238:	add	r3, r2, r3
   1623c:	ldrb	r3, [r3]
   16240:	cmp	r3, #0
   16244:	moveq	r3, #1
   16248:	movne	r3, #0
   1624c:	uxtb	r3, r3
   16250:	str	r3, [fp, #-32]	; 0xffffffe0
   16254:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16258:	cmp	r3, #0
   1625c:	bne	162f8 <flatcc_verify_error_string@@Base+0x12fc>
   16260:	mov	r3, #32
   16264:	b	16324 <flatcc_verify_error_string@@Base+0x1328>
   16268:	ldr	r2, [fp, #8]
   1626c:	ldr	r3, [fp, #-8]
   16270:	add	r3, r2, r3
   16274:	ldrb	r3, [r3]
   16278:	cmp	r3, #0
   1627c:	movne	r3, #1
   16280:	moveq	r3, #0
   16284:	uxtb	r3, r3
   16288:	str	r3, [fp, #-28]	; 0xffffffe4
   1628c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16290:	cmp	r3, #0
   16294:	bne	162a0 <flatcc_verify_error_string@@Base+0x12a4>
   16298:	mov	r3, #33	; 0x21
   1629c:	b	16324 <flatcc_verify_error_string@@Base+0x1328>
   162a0:	ldr	r2, [fp, #8]
   162a4:	ldr	r3, [fp, #-8]
   162a8:	add	r3, r2, r3
   162ac:	ldrb	r3, [r3]
   162b0:	strb	r3, [fp, #-44]	; 0xffffffd4
   162b4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   162b8:	str	r3, [fp, #-40]	; 0xffffffd8
   162bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   162c0:	str	r3, [fp, #-36]	; 0xffffffdc
   162c4:	sub	r2, fp, #56	; 0x38
   162c8:	ldr	r3, [fp, #16]
   162cc:	mov	r0, r2
   162d0:	blx	r3
   162d4:	mov	r3, r0
   162d8:	cmp	r3, #0
   162dc:	beq	162f8 <flatcc_verify_error_string@@Base+0x12fc>
   162e0:	sub	r2, fp, #56	; 0x38
   162e4:	ldr	r3, [fp, #16]
   162e8:	mov	r0, r2
   162ec:	blx	r3
   162f0:	mov	r3, r0
   162f4:	b	16324 <flatcc_verify_error_string@@Base+0x1328>
   162f8:	ldr	r3, [fp, #-8]
   162fc:	add	r3, r3, #1
   16300:	str	r3, [fp, #-8]
   16304:	ldr	r3, [fp, #-72]	; 0xffffffb8
   16308:	add	r3, r3, #4
   1630c:	str	r3, [fp, #-72]	; 0xffffffb8
   16310:	ldr	r2, [fp, #-8]
   16314:	ldr	r3, [fp, #-16]
   16318:	cmp	r2, r3
   1631c:	bcc	16214 <flatcc_verify_error_string@@Base+0x1218>
   16320:	mov	r3, #0
   16324:	mov	r0, r3
   16328:	sub	sp, fp, #4
   1632c:	pop	{fp, pc}

00016330 <flatcc_verify_field@@Base>:
   16330:	push	{fp, lr}
   16334:	add	fp, sp, #4
   16338:	sub	sp, sp, #24
   1633c:	str	r0, [fp, #-8]
   16340:	str	r2, [fp, #-16]
   16344:	strh	r1, [fp, #-10]
   16348:	strh	r3, [fp, #-12]
   1634c:	ldrh	r1, [fp, #-10]
   16350:	ldrh	r3, [fp, #-12]
   16354:	str	r3, [sp]
   16358:	ldr	r3, [fp, #-16]
   1635c:	mov	r2, #0
   16360:	ldr	r0, [fp, #-8]
   16364:	bl	15718 <flatcc_verify_error_string@@Base+0x71c>
   16368:	mov	r3, r0
   1636c:	cmp	r3, #0
   16370:	beq	16398 <flatcc_verify_field@@Base+0x68>
   16374:	ldrh	r1, [fp, #-10]
   16378:	ldrh	r3, [fp, #-12]
   1637c:	str	r3, [sp]
   16380:	ldr	r3, [fp, #-16]
   16384:	mov	r2, #0
   16388:	ldr	r0, [fp, #-8]
   1638c:	bl	15718 <flatcc_verify_error_string@@Base+0x71c>
   16390:	mov	r3, r0
   16394:	b	1639c <flatcc_verify_field@@Base+0x6c>
   16398:	mov	r3, #0
   1639c:	mov	r0, r3
   163a0:	sub	sp, fp, #4
   163a4:	pop	{fp, pc}

000163a8 <flatcc_verify_string_field@@Base>:
   163a8:	push	{r4, r5, r6, fp, lr}
   163ac:	add	fp, sp, #16
   163b0:	sub	sp, sp, #28
   163b4:	str	r0, [fp, #-32]	; 0xffffffe0
   163b8:	mov	r3, r1
   163bc:	str	r2, [fp, #-40]	; 0xffffffd8
   163c0:	strh	r3, [fp, #-34]	; 0xffffffde
   163c4:	sub	r3, fp, #28
   163c8:	ldrh	r1, [fp, #-34]	; 0xffffffde
   163cc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   163d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   163d4:	bl	1586c <flatcc_verify_error_string@@Base+0x870>
   163d8:	str	r0, [fp, #-24]	; 0xffffffe8
   163dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   163e0:	cmp	r3, #0
   163e4:	bne	163f4 <flatcc_verify_string_field@@Base+0x4c>
   163e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   163ec:	cmp	r3, #0
   163f0:	bne	163fc <flatcc_verify_string_field@@Base+0x54>
   163f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   163f8:	b	16440 <flatcc_verify_string_field@@Base+0x98>
   163fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16400:	ldr	r4, [r3]
   16404:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16408:	ldr	r5, [r3, #4]
   1640c:	ldr	r6, [fp, #-28]	; 0xffffffe4
   16410:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16414:	ldr	r3, [r3]
   16418:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1641c:	mov	r1, r2
   16420:	mov	r0, r3
   16424:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   16428:	mov	r3, r0
   1642c:	mov	r2, r6
   16430:	mov	r1, r5
   16434:	mov	r0, r4
   16438:	bl	1599c <flatcc_verify_error_string@@Base+0x9a0>
   1643c:	mov	r3, r0
   16440:	mov	r0, r3
   16444:	sub	sp, fp, #16
   16448:	pop	{r4, r5, r6, fp, pc}

0001644c <flatcc_verify_vector_field@@Base>:
   1644c:	push	{r4, r5, r6, fp, lr}
   16450:	add	fp, sp, #16
   16454:	sub	sp, sp, #44	; 0x2c
   16458:	str	r0, [fp, #-32]	; 0xffffffe0
   1645c:	str	r2, [fp, #-40]	; 0xffffffd8
   16460:	str	r3, [fp, #-44]	; 0xffffffd4
   16464:	strh	r1, [fp, #-34]	; 0xffffffde
   16468:	sub	r3, fp, #28
   1646c:	ldrh	r1, [fp, #-34]	; 0xffffffde
   16470:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16474:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16478:	bl	1586c <flatcc_verify_error_string@@Base+0x870>
   1647c:	str	r0, [fp, #-24]	; 0xffffffe8
   16480:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16484:	cmp	r3, #0
   16488:	bne	16498 <flatcc_verify_vector_field@@Base+0x4c>
   1648c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16490:	cmp	r3, #0
   16494:	bne	164a0 <flatcc_verify_vector_field@@Base+0x54>
   16498:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1649c:	b	16500 <flatcc_verify_vector_field@@Base+0xb4>
   164a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   164a4:	ldr	r4, [r3]
   164a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   164ac:	ldr	r5, [r3, #4]
   164b0:	ldr	r6, [fp, #-28]	; 0xffffffe4
   164b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   164b8:	ldr	r3, [r3]
   164bc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   164c0:	mov	r1, r2
   164c4:	mov	r0, r3
   164c8:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   164cc:	mov	r2, r0
   164d0:	ldr	r3, [fp, #8]
   164d4:	str	r3, [sp, #8]
   164d8:	ldrh	r3, [fp, #4]
   164dc:	str	r3, [sp, #4]
   164e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   164e4:	str	r3, [sp]
   164e8:	mov	r3, r2
   164ec:	mov	r2, r6
   164f0:	mov	r1, r5
   164f4:	mov	r0, r4
   164f8:	bl	15a98 <flatcc_verify_error_string@@Base+0xa9c>
   164fc:	mov	r3, r0
   16500:	mov	r0, r3
   16504:	sub	sp, fp, #16
   16508:	pop	{r4, r5, r6, fp, pc}

0001650c <flatcc_verify_string_vector_field@@Base>:
   1650c:	push	{r4, r5, r6, fp, lr}
   16510:	add	fp, sp, #16
   16514:	sub	sp, sp, #28
   16518:	str	r0, [fp, #-32]	; 0xffffffe0
   1651c:	mov	r3, r1
   16520:	str	r2, [fp, #-40]	; 0xffffffd8
   16524:	strh	r3, [fp, #-34]	; 0xffffffde
   16528:	sub	r3, fp, #28
   1652c:	ldrh	r1, [fp, #-34]	; 0xffffffde
   16530:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16534:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16538:	bl	1586c <flatcc_verify_error_string@@Base+0x870>
   1653c:	str	r0, [fp, #-24]	; 0xffffffe8
   16540:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16544:	cmp	r3, #0
   16548:	bne	16558 <flatcc_verify_string_vector_field@@Base+0x4c>
   1654c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16550:	cmp	r3, #0
   16554:	bne	16560 <flatcc_verify_string_vector_field@@Base+0x54>
   16558:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1655c:	b	165a4 <flatcc_verify_string_vector_field@@Base+0x98>
   16560:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16564:	ldr	r4, [r3]
   16568:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1656c:	ldr	r5, [r3, #4]
   16570:	ldr	r6, [fp, #-28]	; 0xffffffe4
   16574:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16578:	ldr	r3, [r3]
   1657c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16580:	mov	r1, r2
   16584:	mov	r0, r3
   16588:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   1658c:	mov	r3, r0
   16590:	mov	r2, r6
   16594:	mov	r1, r5
   16598:	mov	r0, r4
   1659c:	bl	15b8c <flatcc_verify_error_string@@Base+0xb90>
   165a0:	mov	r3, r0
   165a4:	mov	r0, r3
   165a8:	sub	sp, fp, #16
   165ac:	pop	{r4, r5, r6, fp, pc}

000165b0 <flatcc_verify_table_field@@Base>:
   165b0:	push	{r4, r5, r6, fp, lr}
   165b4:	add	fp, sp, #16
   165b8:	sub	sp, sp, #36	; 0x24
   165bc:	str	r0, [fp, #-32]	; 0xffffffe0
   165c0:	str	r2, [fp, #-40]	; 0xffffffd8
   165c4:	str	r3, [fp, #-44]	; 0xffffffd4
   165c8:	strh	r1, [fp, #-34]	; 0xffffffde
   165cc:	sub	r3, fp, #28
   165d0:	ldrh	r1, [fp, #-34]	; 0xffffffde
   165d4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   165d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   165dc:	bl	1586c <flatcc_verify_error_string@@Base+0x870>
   165e0:	str	r0, [fp, #-24]	; 0xffffffe8
   165e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   165e8:	cmp	r3, #0
   165ec:	bne	165fc <flatcc_verify_table_field@@Base+0x4c>
   165f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   165f4:	cmp	r3, #0
   165f8:	bne	16604 <flatcc_verify_table_field@@Base+0x54>
   165fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16600:	b	16660 <flatcc_verify_table_field@@Base+0xb0>
   16604:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16608:	ldr	r4, [r3]
   1660c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16610:	ldr	r5, [r3, #4]
   16614:	ldr	r6, [fp, #-28]	; 0xffffffe4
   16618:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1661c:	ldr	r3, [r3]
   16620:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16624:	mov	r1, r2
   16628:	mov	r0, r3
   1662c:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   16630:	mov	r1, r0
   16634:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16638:	ldr	r3, [r3, #8]
   1663c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   16640:	str	r2, [sp, #4]
   16644:	str	r3, [sp]
   16648:	mov	r3, r1
   1664c:	mov	r2, r6
   16650:	mov	r1, r5
   16654:	mov	r0, r4
   16658:	bl	15cd8 <flatcc_verify_error_string@@Base+0xcdc>
   1665c:	mov	r3, r0
   16660:	mov	r0, r3
   16664:	sub	sp, fp, #16
   16668:	pop	{r4, r5, r6, fp, pc}

0001666c <flatcc_verify_table_vector_field@@Base>:
   1666c:	push	{r4, r5, r6, fp, lr}
   16670:	add	fp, sp, #16
   16674:	sub	sp, sp, #36	; 0x24
   16678:	str	r0, [fp, #-32]	; 0xffffffe0
   1667c:	str	r2, [fp, #-40]	; 0xffffffd8
   16680:	str	r3, [fp, #-44]	; 0xffffffd4
   16684:	strh	r1, [fp, #-34]	; 0xffffffde
   16688:	sub	r3, fp, #28
   1668c:	ldrh	r1, [fp, #-34]	; 0xffffffde
   16690:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16694:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16698:	bl	1586c <flatcc_verify_error_string@@Base+0x870>
   1669c:	str	r0, [fp, #-24]	; 0xffffffe8
   166a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166a4:	cmp	r3, #0
   166a8:	bne	166b8 <flatcc_verify_table_vector_field@@Base+0x4c>
   166ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   166b0:	cmp	r3, #0
   166b4:	bne	166c0 <flatcc_verify_table_vector_field@@Base+0x54>
   166b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166bc:	b	1671c <flatcc_verify_table_vector_field@@Base+0xb0>
   166c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   166c4:	ldr	r4, [r3]
   166c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   166cc:	ldr	r5, [r3, #4]
   166d0:	ldr	r6, [fp, #-28]	; 0xffffffe4
   166d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   166d8:	ldr	r3, [r3]
   166dc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   166e0:	mov	r1, r2
   166e4:	mov	r0, r3
   166e8:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   166ec:	mov	r1, r0
   166f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   166f4:	ldr	r3, [r3, #8]
   166f8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   166fc:	str	r2, [sp, #4]
   16700:	str	r3, [sp]
   16704:	mov	r3, r1
   16708:	mov	r2, r6
   1670c:	mov	r1, r5
   16710:	mov	r0, r4
   16714:	bl	15f30 <flatcc_verify_error_string@@Base+0xf34>
   16718:	mov	r3, r0
   1671c:	mov	r0, r3
   16720:	sub	sp, fp, #16
   16724:	pop	{r4, r5, r6, fp, pc}

00016728 <flatcc_verify_union_table@@Base>:
   16728:	push	{fp, lr}
   1672c:	add	fp, sp, #4
   16730:	sub	sp, sp, #16
   16734:	str	r0, [fp, #-8]
   16738:	str	r1, [fp, #-12]
   1673c:	ldr	r3, [fp, #-8]
   16740:	ldr	r0, [r3]
   16744:	ldr	r3, [fp, #-8]
   16748:	ldr	r1, [r3, #4]
   1674c:	ldr	r3, [fp, #-8]
   16750:	ldr	ip, [r3, #16]
   16754:	ldr	r3, [fp, #-8]
   16758:	ldr	lr, [r3, #20]
   1675c:	ldr	r3, [fp, #-8]
   16760:	ldr	r3, [r3, #8]
   16764:	ldr	r2, [fp, #-12]
   16768:	str	r2, [sp, #4]
   1676c:	str	r3, [sp]
   16770:	mov	r3, lr
   16774:	mov	r2, ip
   16778:	bl	15cd8 <flatcc_verify_error_string@@Base+0xcdc>
   1677c:	mov	r3, r0
   16780:	mov	r0, r3
   16784:	sub	sp, fp, #4
   16788:	pop	{fp, pc}

0001678c <flatcc_verify_union_struct@@Base>:
   1678c:	push	{fp, lr}
   16790:	add	fp, sp, #4
   16794:	sub	sp, sp, #24
   16798:	str	r0, [fp, #-8]
   1679c:	str	r1, [fp, #-12]
   167a0:	mov	r3, r2
   167a4:	strh	r3, [fp, #-14]
   167a8:	ldr	r3, [fp, #-8]
   167ac:	ldr	r0, [r3, #4]
   167b0:	ldr	r3, [fp, #-8]
   167b4:	ldr	r1, [r3, #16]
   167b8:	ldr	r3, [fp, #-8]
   167bc:	ldr	r2, [r3, #20]
   167c0:	ldrh	r3, [fp, #-14]
   167c4:	str	r3, [sp]
   167c8:	ldr	r3, [fp, #-12]
   167cc:	bl	15524 <flatcc_verify_error_string@@Base+0x528>
   167d0:	mov	r3, r0
   167d4:	mov	r0, r3
   167d8:	sub	sp, fp, #4
   167dc:	pop	{fp, pc}

000167e0 <flatcc_verify_union_string@@Base>:
   167e0:	push	{fp, lr}
   167e4:	add	fp, sp, #4
   167e8:	sub	sp, sp, #8
   167ec:	str	r0, [fp, #-8]
   167f0:	ldr	r3, [fp, #-8]
   167f4:	ldr	r0, [r3]
   167f8:	ldr	r3, [fp, #-8]
   167fc:	ldr	r1, [r3, #4]
   16800:	ldr	r3, [fp, #-8]
   16804:	ldr	r2, [r3, #16]
   16808:	ldr	r3, [fp, #-8]
   1680c:	ldr	r3, [r3, #20]
   16810:	bl	1599c <flatcc_verify_error_string@@Base+0x9a0>
   16814:	mov	r3, r0
   16818:	mov	r0, r3
   1681c:	sub	sp, fp, #4
   16820:	pop	{fp, pc}

00016824 <flatcc_verify_buffer_header@@Base>:
   16824:	push	{fp, lr}
   16828:	add	fp, sp, #4
   1682c:	sub	sp, sp, #40	; 0x28
   16830:	str	r0, [fp, #-32]	; 0xffffffe0
   16834:	str	r1, [fp, #-36]	; 0xffffffdc
   16838:	str	r2, [fp, #-40]	; 0xffffffd8
   1683c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16840:	and	r3, r3, #3
   16844:	cmp	r3, #0
   16848:	moveq	r3, #1
   1684c:	movne	r3, #0
   16850:	uxtb	r3, r3
   16854:	str	r3, [fp, #-8]
   16858:	ldr	r3, [fp, #-8]
   1685c:	cmp	r3, #0
   16860:	bne	1686c <flatcc_verify_buffer_header@@Base+0x48>
   16864:	mov	r3, #5
   16868:	b	16930 <flatcc_verify_buffer_header@@Base+0x10c>
   1686c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16870:	cmn	r3, #9
   16874:	movls	r3, #1
   16878:	movhi	r3, #0
   1687c:	uxtb	r3, r3
   16880:	str	r3, [fp, #-12]
   16884:	ldr	r3, [fp, #-12]
   16888:	cmp	r3, #0
   1688c:	bne	16898 <flatcc_verify_buffer_header@@Base+0x74>
   16890:	mov	r3, #6
   16894:	b	16930 <flatcc_verify_buffer_header@@Base+0x10c>
   16898:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1689c:	cmp	r3, #7
   168a0:	movhi	r3, #1
   168a4:	movls	r3, #0
   168a8:	uxtb	r3, r3
   168ac:	str	r3, [fp, #-16]
   168b0:	ldr	r3, [fp, #-16]
   168b4:	cmp	r3, #0
   168b8:	bne	168c4 <flatcc_verify_buffer_header@@Base+0xa0>
   168bc:	mov	r3, #1
   168c0:	b	16930 <flatcc_verify_buffer_header@@Base+0x10c>
   168c4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   168c8:	cmp	r3, #0
   168cc:	beq	1692c <flatcc_verify_buffer_header@@Base+0x108>
   168d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   168d4:	bl	15354 <flatcc_verify_error_string@@Base+0x358>
   168d8:	str	r0, [fp, #-20]	; 0xffffffec
   168dc:	mov	r1, #4
   168e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   168e4:	bl	1539c <flatcc_verify_error_string@@Base+0x3a0>
   168e8:	str	r0, [fp, #-24]	; 0xffffffe8
   168ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   168f0:	cmp	r3, #0
   168f4:	beq	16908 <flatcc_verify_buffer_header@@Base+0xe4>
   168f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   168fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   16900:	cmp	r2, r3
   16904:	bne	16910 <flatcc_verify_buffer_header@@Base+0xec>
   16908:	mov	r3, #1
   1690c:	b	16914 <flatcc_verify_buffer_header@@Base+0xf0>
   16910:	mov	r3, #0
   16914:	str	r3, [fp, #-28]	; 0xffffffe4
   16918:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1691c:	cmp	r3, #0
   16920:	bne	1692c <flatcc_verify_buffer_header@@Base+0x108>
   16924:	mov	r3, #2
   16928:	b	16930 <flatcc_verify_buffer_header@@Base+0x10c>
   1692c:	mov	r3, #0
   16930:	mov	r0, r3
   16934:	sub	sp, fp, #4
   16938:	pop	{fp, pc}

0001693c <flatcc_verify_typed_buffer_header@@Base>:
   1693c:	push	{fp, lr}
   16940:	add	fp, sp, #4
   16944:	sub	sp, sp, #40	; 0x28
   16948:	str	r0, [fp, #-32]	; 0xffffffe0
   1694c:	str	r1, [fp, #-36]	; 0xffffffdc
   16950:	str	r2, [fp, #-40]	; 0xffffffd8
   16954:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16958:	and	r3, r3, #3
   1695c:	cmp	r3, #0
   16960:	moveq	r3, #1
   16964:	movne	r3, #0
   16968:	uxtb	r3, r3
   1696c:	str	r3, [fp, #-8]
   16970:	ldr	r3, [fp, #-8]
   16974:	cmp	r3, #0
   16978:	bne	16984 <flatcc_verify_typed_buffer_header@@Base+0x48>
   1697c:	mov	r3, #5
   16980:	b	16a44 <flatcc_verify_typed_buffer_header@@Base+0x108>
   16984:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16988:	cmn	r3, #9
   1698c:	movls	r3, #1
   16990:	movhi	r3, #0
   16994:	uxtb	r3, r3
   16998:	str	r3, [fp, #-12]
   1699c:	ldr	r3, [fp, #-12]
   169a0:	cmp	r3, #0
   169a4:	bne	169b0 <flatcc_verify_typed_buffer_header@@Base+0x74>
   169a8:	mov	r3, #6
   169ac:	b	16a44 <flatcc_verify_typed_buffer_header@@Base+0x108>
   169b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   169b4:	cmp	r3, #7
   169b8:	movhi	r3, #1
   169bc:	movls	r3, #0
   169c0:	uxtb	r3, r3
   169c4:	str	r3, [fp, #-16]
   169c8:	ldr	r3, [fp, #-16]
   169cc:	cmp	r3, #0
   169d0:	bne	169dc <flatcc_verify_typed_buffer_header@@Base+0xa0>
   169d4:	mov	r3, #1
   169d8:	b	16a44 <flatcc_verify_typed_buffer_header@@Base+0x108>
   169dc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   169e0:	cmp	r3, #0
   169e4:	beq	16a40 <flatcc_verify_typed_buffer_header@@Base+0x104>
   169e8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   169ec:	str	r3, [fp, #-20]	; 0xffffffec
   169f0:	mov	r1, #4
   169f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   169f8:	bl	1539c <flatcc_verify_error_string@@Base+0x3a0>
   169fc:	str	r0, [fp, #-24]	; 0xffffffe8
   16a00:	ldr	r3, [fp, #-20]	; 0xffffffec
   16a04:	cmp	r3, #0
   16a08:	beq	16a1c <flatcc_verify_typed_buffer_header@@Base+0xe0>
   16a0c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16a10:	ldr	r3, [fp, #-20]	; 0xffffffec
   16a14:	cmp	r2, r3
   16a18:	bne	16a24 <flatcc_verify_typed_buffer_header@@Base+0xe8>
   16a1c:	mov	r3, #1
   16a20:	b	16a28 <flatcc_verify_typed_buffer_header@@Base+0xec>
   16a24:	mov	r3, #0
   16a28:	str	r3, [fp, #-28]	; 0xffffffe4
   16a2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16a30:	cmp	r3, #0
   16a34:	bne	16a40 <flatcc_verify_typed_buffer_header@@Base+0x104>
   16a38:	mov	r3, #2
   16a3c:	b	16a44 <flatcc_verify_typed_buffer_header@@Base+0x108>
   16a40:	mov	r3, #0
   16a44:	mov	r0, r3
   16a48:	sub	sp, fp, #4
   16a4c:	pop	{fp, pc}

00016a50 <flatcc_verify_struct_as_root@@Base>:
   16a50:	push	{fp, lr}
   16a54:	add	fp, sp, #4
   16a58:	sub	sp, sp, #24
   16a5c:	str	r0, [fp, #-8]
   16a60:	str	r1, [fp, #-12]
   16a64:	str	r2, [fp, #-16]
   16a68:	str	r3, [fp, #-20]	; 0xffffffec
   16a6c:	ldr	r2, [fp, #-16]
   16a70:	ldr	r1, [fp, #-12]
   16a74:	ldr	r0, [fp, #-8]
   16a78:	bl	16824 <flatcc_verify_buffer_header@@Base>
   16a7c:	mov	r3, r0
   16a80:	cmp	r3, #0
   16a84:	beq	16aa0 <flatcc_verify_struct_as_root@@Base+0x50>
   16a88:	ldr	r2, [fp, #-16]
   16a8c:	ldr	r1, [fp, #-12]
   16a90:	ldr	r0, [fp, #-8]
   16a94:	bl	16824 <flatcc_verify_buffer_header@@Base>
   16a98:	mov	r3, r0
   16a9c:	b	16acc <flatcc_verify_struct_as_root@@Base+0x7c>
   16aa0:	mov	r1, #0
   16aa4:	ldr	r0, [fp, #-8]
   16aa8:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   16aac:	mov	r2, r0
   16ab0:	ldrh	r3, [fp, #4]
   16ab4:	str	r3, [sp]
   16ab8:	ldr	r3, [fp, #-20]	; 0xffffffec
   16abc:	mov	r1, #0
   16ac0:	ldr	r0, [fp, #-12]
   16ac4:	bl	15524 <flatcc_verify_error_string@@Base+0x528>
   16ac8:	mov	r3, r0
   16acc:	mov	r0, r3
   16ad0:	sub	sp, fp, #4
   16ad4:	pop	{fp, pc}

00016ad8 <flatcc_verify_struct_as_typed_root@@Base>:
   16ad8:	push	{fp, lr}
   16adc:	add	fp, sp, #4
   16ae0:	sub	sp, sp, #24
   16ae4:	str	r0, [fp, #-8]
   16ae8:	str	r1, [fp, #-12]
   16aec:	str	r2, [fp, #-16]
   16af0:	str	r3, [fp, #-20]	; 0xffffffec
   16af4:	ldr	r2, [fp, #-16]
   16af8:	ldr	r1, [fp, #-12]
   16afc:	ldr	r0, [fp, #-8]
   16b00:	bl	1693c <flatcc_verify_typed_buffer_header@@Base>
   16b04:	mov	r3, r0
   16b08:	cmp	r3, #0
   16b0c:	beq	16b28 <flatcc_verify_struct_as_typed_root@@Base+0x50>
   16b10:	ldr	r2, [fp, #-16]
   16b14:	ldr	r1, [fp, #-12]
   16b18:	ldr	r0, [fp, #-8]
   16b1c:	bl	1693c <flatcc_verify_typed_buffer_header@@Base>
   16b20:	mov	r3, r0
   16b24:	b	16b54 <flatcc_verify_struct_as_typed_root@@Base+0x7c>
   16b28:	mov	r1, #0
   16b2c:	ldr	r0, [fp, #-8]
   16b30:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   16b34:	mov	r2, r0
   16b38:	ldrh	r3, [fp, #4]
   16b3c:	str	r3, [sp]
   16b40:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b44:	mov	r1, #0
   16b48:	ldr	r0, [fp, #-12]
   16b4c:	bl	15524 <flatcc_verify_error_string@@Base+0x528>
   16b50:	mov	r3, r0
   16b54:	mov	r0, r3
   16b58:	sub	sp, fp, #4
   16b5c:	pop	{fp, pc}

00016b60 <flatcc_verify_table_as_root@@Base>:
   16b60:	push	{fp, lr}
   16b64:	add	fp, sp, #4
   16b68:	sub	sp, sp, #24
   16b6c:	str	r0, [fp, #-8]
   16b70:	str	r1, [fp, #-12]
   16b74:	str	r2, [fp, #-16]
   16b78:	str	r3, [fp, #-20]	; 0xffffffec
   16b7c:	ldr	r2, [fp, #-16]
   16b80:	ldr	r1, [fp, #-12]
   16b84:	ldr	r0, [fp, #-8]
   16b88:	bl	16824 <flatcc_verify_buffer_header@@Base>
   16b8c:	mov	r3, r0
   16b90:	cmp	r3, #0
   16b94:	beq	16bb0 <flatcc_verify_table_as_root@@Base+0x50>
   16b98:	ldr	r2, [fp, #-16]
   16b9c:	ldr	r1, [fp, #-12]
   16ba0:	ldr	r0, [fp, #-8]
   16ba4:	bl	16824 <flatcc_verify_buffer_header@@Base>
   16ba8:	mov	r3, r0
   16bac:	b	16be8 <flatcc_verify_table_as_root@@Base+0x88>
   16bb0:	mov	r1, #0
   16bb4:	ldr	r0, [fp, #-8]
   16bb8:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   16bbc:	mov	r2, r0
   16bc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16bc4:	str	r3, [sp, #4]
   16bc8:	mov	r3, #100	; 0x64
   16bcc:	str	r3, [sp]
   16bd0:	mov	r3, r2
   16bd4:	mov	r2, #0
   16bd8:	ldr	r1, [fp, #-12]
   16bdc:	ldr	r0, [fp, #-8]
   16be0:	bl	15cd8 <flatcc_verify_error_string@@Base+0xcdc>
   16be4:	mov	r3, r0
   16be8:	mov	r0, r3
   16bec:	sub	sp, fp, #4
   16bf0:	pop	{fp, pc}

00016bf4 <flatcc_verify_table_as_typed_root@@Base>:
   16bf4:	push	{fp, lr}
   16bf8:	add	fp, sp, #4
   16bfc:	sub	sp, sp, #24
   16c00:	str	r0, [fp, #-8]
   16c04:	str	r1, [fp, #-12]
   16c08:	str	r2, [fp, #-16]
   16c0c:	str	r3, [fp, #-20]	; 0xffffffec
   16c10:	ldr	r2, [fp, #-16]
   16c14:	ldr	r1, [fp, #-12]
   16c18:	ldr	r0, [fp, #-8]
   16c1c:	bl	1693c <flatcc_verify_typed_buffer_header@@Base>
   16c20:	mov	r3, r0
   16c24:	cmp	r3, #0
   16c28:	beq	16c44 <flatcc_verify_table_as_typed_root@@Base+0x50>
   16c2c:	ldr	r2, [fp, #-16]
   16c30:	ldr	r1, [fp, #-12]
   16c34:	ldr	r0, [fp, #-8]
   16c38:	bl	1693c <flatcc_verify_typed_buffer_header@@Base>
   16c3c:	mov	r3, r0
   16c40:	b	16c7c <flatcc_verify_table_as_typed_root@@Base+0x88>
   16c44:	mov	r1, #0
   16c48:	ldr	r0, [fp, #-8]
   16c4c:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   16c50:	mov	r2, r0
   16c54:	ldr	r3, [fp, #-20]	; 0xffffffec
   16c58:	str	r3, [sp, #4]
   16c5c:	mov	r3, #100	; 0x64
   16c60:	str	r3, [sp]
   16c64:	mov	r3, r2
   16c68:	mov	r2, #0
   16c6c:	ldr	r1, [fp, #-12]
   16c70:	ldr	r0, [fp, #-8]
   16c74:	bl	15cd8 <flatcc_verify_error_string@@Base+0xcdc>
   16c78:	mov	r3, r0
   16c7c:	mov	r0, r3
   16c80:	sub	sp, fp, #4
   16c84:	pop	{fp, pc}

00016c88 <flatcc_verify_struct_as_nested_root@@Base>:
   16c88:	push	{fp, lr}
   16c8c:	add	fp, sp, #4
   16c90:	sub	sp, sp, #32
   16c94:	str	r0, [fp, #-16]
   16c98:	str	r2, [fp, #-24]	; 0xffffffe8
   16c9c:	str	r3, [fp, #-28]	; 0xffffffe4
   16ca0:	strh	r1, [fp, #-18]	; 0xffffffee
   16ca4:	ldrh	r2, [fp, #8]
   16ca8:	ldrh	r1, [fp, #-18]	; 0xffffffee
   16cac:	mvn	r3, #0
   16cb0:	str	r3, [sp, #4]
   16cb4:	mov	r3, #1
   16cb8:	str	r3, [sp]
   16cbc:	mov	r3, r2
   16cc0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16cc4:	ldr	r0, [fp, #-16]
   16cc8:	bl	1644c <flatcc_verify_vector_field@@Base>
   16ccc:	mov	r3, r0
   16cd0:	cmp	r3, #0
   16cd4:	beq	16d08 <flatcc_verify_struct_as_nested_root@@Base+0x80>
   16cd8:	ldrh	r2, [fp, #8]
   16cdc:	ldrh	r1, [fp, #-18]	; 0xffffffee
   16ce0:	mvn	r3, #0
   16ce4:	str	r3, [sp, #4]
   16ce8:	mov	r3, #1
   16cec:	str	r3, [sp]
   16cf0:	mov	r3, r2
   16cf4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16cf8:	ldr	r0, [fp, #-16]
   16cfc:	bl	1644c <flatcc_verify_vector_field@@Base>
   16d00:	mov	r3, r0
   16d04:	b	16d88 <flatcc_verify_struct_as_nested_root@@Base+0x100>
   16d08:	ldrh	r3, [fp, #-18]	; 0xffffffee
   16d0c:	mov	r1, r3
   16d10:	ldr	r0, [fp, #-16]
   16d14:	bl	156ac <flatcc_verify_error_string@@Base+0x6b0>
   16d18:	str	r0, [fp, #-8]
   16d1c:	ldr	r3, [fp, #-8]
   16d20:	cmp	r3, #0
   16d24:	bne	16d30 <flatcc_verify_struct_as_nested_root@@Base+0xa8>
   16d28:	mov	r3, #0
   16d2c:	b	16d88 <flatcc_verify_struct_as_nested_root@@Base+0x100>
   16d30:	mov	r1, #0
   16d34:	ldr	r0, [fp, #-8]
   16d38:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   16d3c:	mov	r2, r0
   16d40:	ldr	r3, [fp, #-8]
   16d44:	add	r3, r2, r3
   16d48:	str	r3, [fp, #-8]
   16d4c:	mov	r1, #0
   16d50:	ldr	r0, [fp, #-8]
   16d54:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   16d58:	str	r0, [fp, #-12]
   16d5c:	ldr	r3, [fp, #-8]
   16d60:	add	r3, r3, #4
   16d64:	str	r3, [fp, #-8]
   16d68:	ldrh	r3, [fp, #8]
   16d6c:	str	r3, [sp]
   16d70:	ldr	r3, [fp, #4]
   16d74:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16d78:	ldr	r1, [fp, #-12]
   16d7c:	ldr	r0, [fp, #-8]
   16d80:	bl	16a50 <flatcc_verify_struct_as_root@@Base>
   16d84:	mov	r3, r0
   16d88:	mov	r0, r3
   16d8c:	sub	sp, fp, #4
   16d90:	pop	{fp, pc}

00016d94 <flatcc_verify_table_as_nested_root@@Base>:
   16d94:	push	{fp, lr}
   16d98:	add	fp, sp, #4
   16d9c:	sub	sp, sp, #32
   16da0:	str	r0, [fp, #-16]
   16da4:	str	r2, [fp, #-24]	; 0xffffffe8
   16da8:	str	r3, [fp, #-28]	; 0xffffffe4
   16dac:	strh	r1, [fp, #-18]	; 0xffffffee
   16db0:	ldrh	r2, [fp, #4]
   16db4:	ldrh	r1, [fp, #-18]	; 0xffffffee
   16db8:	mvn	r3, #0
   16dbc:	str	r3, [sp, #4]
   16dc0:	mov	r3, #1
   16dc4:	str	r3, [sp]
   16dc8:	mov	r3, r2
   16dcc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16dd0:	ldr	r0, [fp, #-16]
   16dd4:	bl	1644c <flatcc_verify_vector_field@@Base>
   16dd8:	mov	r3, r0
   16ddc:	cmp	r3, #0
   16de0:	beq	16e14 <flatcc_verify_table_as_nested_root@@Base+0x80>
   16de4:	ldrh	r2, [fp, #4]
   16de8:	ldrh	r1, [fp, #-18]	; 0xffffffee
   16dec:	mvn	r3, #0
   16df0:	str	r3, [sp, #4]
   16df4:	mov	r3, #1
   16df8:	str	r3, [sp]
   16dfc:	mov	r3, r2
   16e00:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16e04:	ldr	r0, [fp, #-16]
   16e08:	bl	1644c <flatcc_verify_vector_field@@Base>
   16e0c:	mov	r3, r0
   16e10:	b	16ee4 <flatcc_verify_table_as_nested_root@@Base+0x150>
   16e14:	ldrh	r3, [fp, #-18]	; 0xffffffee
   16e18:	mov	r1, r3
   16e1c:	ldr	r0, [fp, #-16]
   16e20:	bl	156ac <flatcc_verify_error_string@@Base+0x6b0>
   16e24:	str	r0, [fp, #-8]
   16e28:	ldr	r3, [fp, #-8]
   16e2c:	cmp	r3, #0
   16e30:	bne	16e3c <flatcc_verify_table_as_nested_root@@Base+0xa8>
   16e34:	mov	r3, #0
   16e38:	b	16ee4 <flatcc_verify_table_as_nested_root@@Base+0x150>
   16e3c:	mov	r1, #0
   16e40:	ldr	r0, [fp, #-8]
   16e44:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   16e48:	mov	r2, r0
   16e4c:	ldr	r3, [fp, #-8]
   16e50:	add	r3, r2, r3
   16e54:	str	r3, [fp, #-8]
   16e58:	mov	r1, #0
   16e5c:	ldr	r0, [fp, #-8]
   16e60:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   16e64:	str	r0, [fp, #-12]
   16e68:	ldr	r3, [fp, #-8]
   16e6c:	add	r3, r3, #4
   16e70:	str	r3, [fp, #-8]
   16e74:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16e78:	ldr	r1, [fp, #-12]
   16e7c:	ldr	r0, [fp, #-8]
   16e80:	bl	16824 <flatcc_verify_buffer_header@@Base>
   16e84:	mov	r3, r0
   16e88:	cmp	r3, #0
   16e8c:	beq	16ea8 <flatcc_verify_table_as_nested_root@@Base+0x114>
   16e90:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16e94:	ldr	r1, [fp, #-12]
   16e98:	ldr	r0, [fp, #-8]
   16e9c:	bl	16824 <flatcc_verify_buffer_header@@Base>
   16ea0:	mov	r3, r0
   16ea4:	b	16ee4 <flatcc_verify_table_as_nested_root@@Base+0x150>
   16ea8:	mov	r1, #0
   16eac:	ldr	r0, [fp, #-8]
   16eb0:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   16eb4:	mov	r1, r0
   16eb8:	ldr	r3, [fp, #-16]
   16ebc:	ldr	r3, [r3, #8]
   16ec0:	ldr	r2, [fp, #8]
   16ec4:	str	r2, [sp, #4]
   16ec8:	str	r3, [sp]
   16ecc:	mov	r3, r1
   16ed0:	mov	r2, #0
   16ed4:	ldr	r1, [fp, #-12]
   16ed8:	ldr	r0, [fp, #-8]
   16edc:	bl	15cd8 <flatcc_verify_error_string@@Base+0xcdc>
   16ee0:	mov	r3, r0
   16ee4:	mov	r0, r3
   16ee8:	sub	sp, fp, #4
   16eec:	pop	{fp, pc}

00016ef0 <flatcc_verify_union_field@@Base>:
   16ef0:	push	{fp, lr}
   16ef4:	add	fp, sp, #4
   16ef8:	sub	sp, sp, #80	; 0x50
   16efc:	str	r0, [fp, #-64]	; 0xffffffc0
   16f00:	str	r2, [fp, #-72]	; 0xffffffb8
   16f04:	str	r3, [fp, #-76]	; 0xffffffb4
   16f08:	strh	r1, [fp, #-66]	; 0xffffffbe
   16f0c:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   16f10:	sub	r3, r3, #1
   16f14:	uxth	r3, r3
   16f18:	mov	r1, r3
   16f1c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16f20:	bl	1563c <flatcc_verify_error_string@@Base+0x640>
   16f24:	mov	r3, r0
   16f28:	strh	r3, [fp, #-6]
   16f2c:	ldrh	r3, [fp, #-6]
   16f30:	cmp	r3, #0
   16f34:	bne	16fb0 <flatcc_verify_union_field@@Base+0xc0>
   16f38:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   16f3c:	mov	r1, r3
   16f40:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16f44:	bl	1563c <flatcc_verify_error_string@@Base+0x640>
   16f48:	mov	r3, r0
   16f4c:	strh	r3, [fp, #-8]
   16f50:	ldrh	r3, [fp, #-8]
   16f54:	cmp	r3, #0
   16f58:	moveq	r3, #1
   16f5c:	movne	r3, #0
   16f60:	uxtb	r3, r3
   16f64:	str	r3, [fp, #-12]
   16f68:	ldr	r3, [fp, #-12]
   16f6c:	cmp	r3, #0
   16f70:	bne	16f7c <flatcc_verify_union_field@@Base+0x8c>
   16f74:	mov	r3, #23
   16f78:	b	17140 <flatcc_verify_union_field@@Base+0x250>
   16f7c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   16f80:	cmp	r3, #0
   16f84:	moveq	r3, #1
   16f88:	movne	r3, #0
   16f8c:	uxtb	r3, r3
   16f90:	str	r3, [fp, #-16]
   16f94:	ldr	r3, [fp, #-16]
   16f98:	cmp	r3, #0
   16f9c:	bne	16fa8 <flatcc_verify_union_field@@Base+0xb8>
   16fa0:	mov	r3, #21
   16fa4:	b	17140 <flatcc_verify_union_field@@Base+0x250>
   16fa8:	mov	r3, #0
   16fac:	b	17140 <flatcc_verify_union_field@@Base+0x250>
   16fb0:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   16fb4:	sub	r3, r3, #1
   16fb8:	uxth	r1, r3
   16fbc:	mov	r3, #1
   16fc0:	str	r3, [sp]
   16fc4:	mov	r3, #1
   16fc8:	mov	r2, #0
   16fcc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16fd0:	bl	15718 <flatcc_verify_error_string@@Base+0x71c>
   16fd4:	mov	r3, r0
   16fd8:	cmp	r3, #0
   16fdc:	beq	1700c <flatcc_verify_union_field@@Base+0x11c>
   16fe0:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   16fe4:	sub	r3, r3, #1
   16fe8:	uxth	r1, r3
   16fec:	mov	r3, #1
   16ff0:	str	r3, [sp]
   16ff4:	mov	r3, #1
   16ff8:	mov	r2, #0
   16ffc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17000:	bl	15718 <flatcc_verify_error_string@@Base+0x71c>
   17004:	mov	r3, r0
   17008:	b	17140 <flatcc_verify_union_field@@Base+0x250>
   1700c:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   17010:	mov	r1, r3
   17014:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17018:	bl	1563c <flatcc_verify_error_string@@Base+0x640>
   1701c:	mov	r3, r0
   17020:	strh	r3, [fp, #-8]
   17024:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17028:	ldr	r2, [r3]
   1702c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17030:	ldr	r1, [r3, #16]
   17034:	ldrh	r3, [fp, #-6]
   17038:	add	r3, r1, r3
   1703c:	add	r3, r2, r3
   17040:	str	r3, [fp, #-20]	; 0xffffffec
   17044:	ldr	r3, [fp, #-20]	; 0xffffffec
   17048:	ldrb	r3, [r3]
   1704c:	cmp	r3, #0
   17050:	bne	17060 <flatcc_verify_union_field@@Base+0x170>
   17054:	ldrh	r3, [fp, #-8]
   17058:	cmp	r3, #0
   1705c:	bne	17068 <flatcc_verify_union_field@@Base+0x178>
   17060:	mov	r3, #1
   17064:	b	1706c <flatcc_verify_union_field@@Base+0x17c>
   17068:	mov	r3, #0
   1706c:	str	r3, [fp, #-24]	; 0xffffffe8
   17070:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17074:	cmp	r3, #0
   17078:	bne	17084 <flatcc_verify_union_field@@Base+0x194>
   1707c:	mov	r3, #24
   17080:	b	17140 <flatcc_verify_union_field@@Base+0x250>
   17084:	ldr	r3, [fp, #-20]	; 0xffffffec
   17088:	ldrb	r3, [r3]
   1708c:	cmp	r3, #0
   17090:	bne	1709c <flatcc_verify_union_field@@Base+0x1ac>
   17094:	mov	r3, #0
   17098:	b	17140 <flatcc_verify_union_field@@Base+0x250>
   1709c:	sub	r3, fp, #32
   170a0:	ldrh	r1, [fp, #-66]	; 0xffffffbe
   170a4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   170a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   170ac:	bl	1586c <flatcc_verify_error_string@@Base+0x870>
   170b0:	str	r0, [fp, #-28]	; 0xffffffe4
   170b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   170b8:	cmp	r3, #0
   170bc:	bne	170cc <flatcc_verify_union_field@@Base+0x1dc>
   170c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   170c4:	cmp	r3, #0
   170c8:	bne	170d4 <flatcc_verify_union_field@@Base+0x1e4>
   170cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   170d0:	b	17140 <flatcc_verify_union_field@@Base+0x250>
   170d4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   170d8:	ldr	r3, [r3]
   170dc:	str	r3, [fp, #-56]	; 0xffffffc8
   170e0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   170e4:	ldr	r3, [r3, #4]
   170e8:	str	r3, [fp, #-52]	; 0xffffffcc
   170ec:	ldr	r3, [fp, #-64]	; 0xffffffc0
   170f0:	ldr	r3, [r3, #8]
   170f4:	str	r3, [fp, #-48]	; 0xffffffd0
   170f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   170fc:	str	r3, [fp, #-40]	; 0xffffffd8
   17100:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17104:	ldr	r3, [r3]
   17108:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1710c:	mov	r1, r2
   17110:	mov	r0, r3
   17114:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   17118:	mov	r3, r0
   1711c:	str	r3, [fp, #-36]	; 0xffffffdc
   17120:	ldr	r3, [fp, #-20]	; 0xffffffec
   17124:	ldrb	r3, [r3]
   17128:	strb	r3, [fp, #-44]	; 0xffffffd4
   1712c:	sub	r2, fp, #56	; 0x38
   17130:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17134:	mov	r0, r2
   17138:	blx	r3
   1713c:	mov	r3, r0
   17140:	mov	r0, r3
   17144:	sub	sp, fp, #4
   17148:	pop	{fp, pc}

0001714c <flatcc_verify_union_vector_field@@Base>:
   1714c:	push	{r4, r5, r6, fp, lr}
   17150:	add	fp, sp, #16
   17154:	sub	sp, sp, #68	; 0x44
   17158:	str	r0, [fp, #-56]	; 0xffffffc8
   1715c:	str	r2, [fp, #-64]	; 0xffffffc0
   17160:	str	r3, [fp, #-68]	; 0xffffffbc
   17164:	strh	r1, [fp, #-58]	; 0xffffffc6
   17168:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   1716c:	sub	r3, r3, #1
   17170:	uxth	r3, r3
   17174:	mov	r1, r3
   17178:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1717c:	bl	1563c <flatcc_verify_error_string@@Base+0x640>
   17180:	mov	r3, r0
   17184:	strh	r3, [fp, #-22]	; 0xffffffea
   17188:	ldrh	r3, [fp, #-22]	; 0xffffffea
   1718c:	cmp	r3, #0
   17190:	bne	171e4 <flatcc_verify_union_vector_field@@Base+0x98>
   17194:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   17198:	mov	r1, r3
   1719c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   171a0:	bl	1563c <flatcc_verify_error_string@@Base+0x640>
   171a4:	mov	r3, r0
   171a8:	strh	r3, [fp, #-24]	; 0xffffffe8
   171ac:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   171b0:	cmp	r3, #0
   171b4:	bne	171e4 <flatcc_verify_union_vector_field@@Base+0x98>
   171b8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   171bc:	cmp	r3, #0
   171c0:	moveq	r3, #1
   171c4:	movne	r3, #0
   171c8:	uxtb	r3, r3
   171cc:	str	r3, [fp, #-28]	; 0xffffffe4
   171d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   171d4:	cmp	r3, #0
   171d8:	bne	171e4 <flatcc_verify_union_vector_field@@Base+0x98>
   171dc:	mov	r3, #22
   171e0:	b	17364 <flatcc_verify_union_vector_field@@Base+0x218>
   171e4:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   171e8:	sub	r3, r3, #1
   171ec:	uxth	r1, r3
   171f0:	mvn	r3, #0
   171f4:	str	r3, [sp, #4]
   171f8:	mov	r3, #1
   171fc:	str	r3, [sp]
   17200:	mov	r3, #1
   17204:	ldr	r2, [fp, #-64]	; 0xffffffc0
   17208:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1720c:	bl	1644c <flatcc_verify_vector_field@@Base>
   17210:	mov	r3, r0
   17214:	cmp	r3, #0
   17218:	beq	17250 <flatcc_verify_union_vector_field@@Base+0x104>
   1721c:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   17220:	sub	r3, r3, #1
   17224:	uxth	r1, r3
   17228:	mvn	r3, #0
   1722c:	str	r3, [sp, #4]
   17230:	mov	r3, #1
   17234:	str	r3, [sp]
   17238:	mov	r3, #1
   1723c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   17240:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17244:	bl	1644c <flatcc_verify_vector_field@@Base>
   17248:	mov	r3, r0
   1724c:	b	17364 <flatcc_verify_union_vector_field@@Base+0x218>
   17250:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   17254:	sub	r3, r3, #1
   17258:	uxth	r3, r3
   1725c:	mov	r1, r3
   17260:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17264:	bl	156ac <flatcc_verify_error_string@@Base+0x6b0>
   17268:	str	r0, [fp, #-32]	; 0xffffffe0
   1726c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17270:	cmp	r3, #0
   17274:	bne	17280 <flatcc_verify_union_vector_field@@Base+0x134>
   17278:	mov	r3, #0
   1727c:	b	17364 <flatcc_verify_union_vector_field@@Base+0x218>
   17280:	mov	r1, #0
   17284:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17288:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   1728c:	mov	r2, r0
   17290:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17294:	add	r3, r2, r3
   17298:	str	r3, [fp, #-32]	; 0xffffffe0
   1729c:	mov	r1, #0
   172a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   172a4:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   172a8:	str	r0, [fp, #-36]	; 0xffffffdc
   172ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   172b0:	add	r3, r3, #4
   172b4:	str	r3, [fp, #-32]	; 0xffffffe0
   172b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   172bc:	str	r3, [fp, #-40]	; 0xffffffd8
   172c0:	sub	r3, fp, #48	; 0x30
   172c4:	ldrh	r1, [fp, #-58]	; 0xffffffc6
   172c8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   172cc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   172d0:	bl	1586c <flatcc_verify_error_string@@Base+0x870>
   172d4:	str	r0, [fp, #-44]	; 0xffffffd4
   172d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   172dc:	cmp	r3, #0
   172e0:	bne	172f0 <flatcc_verify_union_vector_field@@Base+0x1a4>
   172e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   172e8:	cmp	r3, #0
   172ec:	bne	172f8 <flatcc_verify_union_vector_field@@Base+0x1ac>
   172f0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   172f4:	b	17364 <flatcc_verify_union_vector_field@@Base+0x218>
   172f8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   172fc:	ldr	r4, [r3]
   17300:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17304:	ldr	r5, [r3, #4]
   17308:	ldr	r6, [fp, #-48]	; 0xffffffd0
   1730c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17310:	ldr	r3, [r3]
   17314:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17318:	mov	r1, r2
   1731c:	mov	r0, r3
   17320:	bl	1531c <flatcc_verify_error_string@@Base+0x320>
   17324:	mov	r1, r0
   17328:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1732c:	ldr	r3, [r3, #8]
   17330:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17334:	str	r2, [sp, #12]
   17338:	str	r3, [sp, #8]
   1733c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17340:	str	r3, [sp, #4]
   17344:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17348:	str	r3, [sp]
   1734c:	mov	r3, r1
   17350:	mov	r2, r6
   17354:	mov	r1, r5
   17358:	mov	r0, r4
   1735c:	bl	160d8 <flatcc_verify_error_string@@Base+0x10dc>
   17360:	mov	r3, r0
   17364:	mov	r0, r3
   17368:	sub	sp, fp, #16
   1736c:	pop	{r4, r5, r6, fp, pc}

00017370 <__libc_csu_init@@Base>:
   17370:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17374:	mov	r7, r0
   17378:	ldr	r6, [pc, #72]	; 173c8 <__libc_csu_init@@Base+0x58>
   1737c:	ldr	r5, [pc, #72]	; 173cc <__libc_csu_init@@Base+0x5c>
   17380:	add	r6, pc, r6
   17384:	add	r5, pc, r5
   17388:	sub	r6, r6, r5
   1738c:	mov	r8, r1
   17390:	mov	r9, r2
   17394:	bl	10cbc <strcmp@plt-0x20>
   17398:	asrs	r6, r6, #2
   1739c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   173a0:	mov	r4, #0
   173a4:	add	r4, r4, #1
   173a8:	ldr	r3, [r5], #4
   173ac:	mov	r2, r9
   173b0:	mov	r1, r8
   173b4:	mov	r0, r7
   173b8:	blx	r3
   173bc:	cmp	r6, r4
   173c0:	bne	173a4 <__libc_csu_init@@Base+0x34>
   173c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   173c8:	andeq	r1, r1, r8, lsl #23
   173cc:	andeq	r1, r1, r0, lsl #23

000173d0 <__libc_csu_fini@@Base>:
   173d0:	bx	lr

Disassembly of section .fini:

000173d4 <.fini>:
   173d4:	push	{r3, lr}
   173d8:	pop	{r3, pc}
