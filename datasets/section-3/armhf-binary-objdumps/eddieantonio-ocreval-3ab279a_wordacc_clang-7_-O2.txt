
../repos/eddieantonio-ocreval-3ab279a/wordacc/wordacc:     file format elf32-littlearm


Disassembly of section .init:

00010aa4 <.init>:
   10aa4:	push	{r3, lr}
   10aa8:	bl	10cb4 <__assert_fail@plt+0x4c>
   10aac:	pop	{r3, pc}

Disassembly of section .plt:

00010ab0 <calloc@plt-0x14>:
   10ab0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ab4:	ldr	lr, [pc, #4]	; 10ac0 <calloc@plt-0x4>
   10ab8:	add	lr, pc, lr
   10abc:	ldr	pc, [lr, #8]!
   10ac0:	andeq	r8, r1, r0, asr #10

00010ac4 <calloc@plt>:
   10ac4:	add	ip, pc, #0, 12
   10ac8:	add	ip, ip, #24, 20	; 0x18000
   10acc:	ldr	pc, [ip, #1344]!	; 0x540

00010ad0 <strcmp@plt>:
   10ad0:	add	ip, pc, #0, 12
   10ad4:	add	ip, ip, #24, 20	; 0x18000
   10ad8:	ldr	pc, [ip, #1336]!	; 0x538

00010adc <strtol@plt>:
   10adc:	add	ip, pc, #0, 12
   10ae0:	add	ip, ip, #24, 20	; 0x18000
   10ae4:	ldr	pc, [ip, #1328]!	; 0x530

00010ae8 <fopen@plt>:
   10ae8:	add	ip, pc, #0, 12
   10aec:	add	ip, ip, #24, 20	; 0x18000
   10af0:	ldr	pc, [ip, #1320]!	; 0x528

00010af4 <free@plt>:
   10af4:	add	ip, pc, #0, 12
   10af8:	add	ip, ip, #24, 20	; 0x18000
   10afc:	ldr	pc, [ip, #1312]!	; 0x520

00010b00 <utf8proc_get_property@plt>:
   10b00:	add	ip, pc, #0, 12
   10b04:	add	ip, ip, #24, 20	; 0x18000
   10b08:	ldr	pc, [ip, #1304]!	; 0x518

00010b0c <fgets@plt>:
   10b0c:	add	ip, pc, #0, 12
   10b10:	add	ip, ip, #24, 20	; 0x18000
   10b14:	ldr	pc, [ip, #1296]!	; 0x510

00010b18 <utf8proc_encode_char@plt>:
   10b18:	add	ip, pc, #0, 12
   10b1c:	add	ip, ip, #24, 20	; 0x18000
   10b20:	ldr	pc, [ip, #1288]!	; 0x508

00010b24 <strdup@plt>:
   10b24:	add	ip, pc, #0, 12
   10b28:	add	ip, ip, #24, 20	; 0x18000
   10b2c:	ldr	pc, [ip, #1280]!	; 0x500

00010b30 <rewind@plt>:
   10b30:	add	ip, pc, #0, 12
   10b34:	add	ip, ip, #24, 20	; 0x18000
   10b38:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b3c <unlink@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #24, 20	; 0x18000
   10b44:	ldr	pc, [ip, #1264]!	; 0x4f0

00010b48 <utf8proc_tolower@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #24, 20	; 0x18000
   10b50:	ldr	pc, [ip, #1256]!	; 0x4e8

00010b54 <__xstat@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #24, 20	; 0x18000
   10b5c:	ldr	pc, [ip, #1248]!	; 0x4e0

00010b60 <fwrite@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #24, 20	; 0x18000
   10b68:	ldr	pc, [ip, #1240]!	; 0x4d8

00010b6c <fread@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #24, 20	; 0x18000
   10b74:	ldr	pc, [ip, #1232]!	; 0x4d0

00010b78 <utf8proc_iterate@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #24, 20	; 0x18000
   10b80:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b84 <malloc@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #24, 20	; 0x18000
   10b8c:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b90 <__libc_start_main@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #24, 20	; 0x18000
   10b98:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b9c <__sysv_signal@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #24, 20	; 0x18000
   10ba4:	ldr	pc, [ip, #1200]!	; 0x4b0

00010ba8 <__gmon_start__@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #24, 20	; 0x18000
   10bb0:	ldr	pc, [ip, #1192]!	; 0x4a8

00010bb4 <getpid@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #24, 20	; 0x18000
   10bbc:	ldr	pc, [ip, #1184]!	; 0x4a0

00010bc0 <exit@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #24, 20	; 0x18000
   10bc8:	ldr	pc, [ip, #1176]!	; 0x498

00010bcc <utf8proc_category@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #24, 20	; 0x18000
   10bd4:	ldr	pc, [ip, #1168]!	; 0x490

00010bd8 <strlen@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #24, 20	; 0x18000
   10be0:	ldr	pc, [ip, #1160]!	; 0x488

00010be4 <fprintf@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #24, 20	; 0x18000
   10bec:	ldr	pc, [ip, #1152]!	; 0x480

00010bf0 <__isoc99_sscanf@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #24, 20	; 0x18000
   10bf8:	ldr	pc, [ip, #1144]!	; 0x478

00010bfc <fclose@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #24, 20	; 0x18000
   10c04:	ldr	pc, [ip, #1136]!	; 0x470

00010c08 <utf8proc_NFC@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #24, 20	; 0x18000
   10c10:	ldr	pc, [ip, #1128]!	; 0x468

00010c14 <fputc@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #24, 20	; 0x18000
   10c1c:	ldr	pc, [ip, #1120]!	; 0x460

00010c20 <sprintf@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #24, 20	; 0x18000
   10c28:	ldr	pc, [ip, #1112]!	; 0x458

00010c2c <utf8proc_errmsg@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #24, 20	; 0x18000
   10c34:	ldr	pc, [ip, #1104]!	; 0x450

00010c38 <fputs@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #24, 20	; 0x18000
   10c40:	ldr	pc, [ip, #1096]!	; 0x448

00010c44 <strncmp@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #24, 20	; 0x18000
   10c4c:	ldr	pc, [ip, #1088]!	; 0x440

00010c50 <abort@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #24, 20	; 0x18000
   10c58:	ldr	pc, [ip, #1080]!	; 0x438

00010c5c <getc@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #24, 20	; 0x18000
   10c64:	ldr	pc, [ip, #1072]!	; 0x430

00010c68 <__assert_fail@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #24, 20	; 0x18000
   10c70:	ldr	pc, [ip, #1064]!	; 0x428

Disassembly of section .text:

00010c78 <error@@Base-0x1c60>:
   10c78:	mov	fp, #0
   10c7c:	mov	lr, #0
   10c80:	pop	{r1}		; (ldr r1, [sp], #4)
   10c84:	mov	r2, sp
   10c88:	push	{r2}		; (str r2, [sp, #-4]!)
   10c8c:	push	{r0}		; (str r0, [sp, #-4]!)
   10c90:	ldr	ip, [pc, #16]	; 10ca8 <__assert_fail@plt+0x40>
   10c94:	push	{ip}		; (str ip, [sp, #-4]!)
   10c98:	ldr	r0, [pc, #12]	; 10cac <__assert_fail@plt+0x44>
   10c9c:	ldr	r3, [pc, #12]	; 10cb0 <__assert_fail@plt+0x48>
   10ca0:	bl	10b90 <__libc_start_main@plt>
   10ca4:	bl	10c50 <abort@plt>
   10ca8:	andeq	r4, r1, r0, lsr r8
   10cac:	andeq	r1, r1, r0, lsr sl
   10cb0:	ldrdeq	r4, [r1], -r0
   10cb4:	ldr	r3, [pc, #20]	; 10cd0 <__assert_fail@plt+0x68>
   10cb8:	ldr	r2, [pc, #20]	; 10cd4 <__assert_fail@plt+0x6c>
   10cbc:	add	r3, pc, r3
   10cc0:	ldr	r2, [r3, r2]
   10cc4:	cmp	r2, #0
   10cc8:	bxeq	lr
   10ccc:	b	10ba8 <__gmon_start__@plt>
   10cd0:	andeq	r8, r1, ip, lsr r3
   10cd4:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10cd8:	ldr	r0, [pc, #24]	; 10cf8 <__assert_fail@plt+0x90>
   10cdc:	ldr	r3, [pc, #24]	; 10cfc <__assert_fail@plt+0x94>
   10ce0:	cmp	r3, r0
   10ce4:	bxeq	lr
   10ce8:	ldr	r3, [pc, #16]	; 10d00 <__assert_fail@plt+0x98>
   10cec:	cmp	r3, #0
   10cf0:	bxeq	lr
   10cf4:	bx	r3
   10cf8:	andeq	r9, r2, r4, asr #2
   10cfc:	andeq	r9, r2, r4, asr #2
   10d00:	andeq	r0, r0, r0
   10d04:	ldr	r0, [pc, #36]	; 10d30 <__assert_fail@plt+0xc8>
   10d08:	ldr	r1, [pc, #36]	; 10d34 <__assert_fail@plt+0xcc>
   10d0c:	sub	r1, r1, r0
   10d10:	asr	r1, r1, #2
   10d14:	add	r1, r1, r1, lsr #31
   10d18:	asrs	r1, r1, #1
   10d1c:	bxeq	lr
   10d20:	ldr	r3, [pc, #16]	; 10d38 <__assert_fail@plt+0xd0>
   10d24:	cmp	r3, #0
   10d28:	bxeq	lr
   10d2c:	bx	r3
   10d30:	andeq	r9, r2, r4, asr #2
   10d34:	andeq	r9, r2, r4, asr #2
   10d38:	andeq	r0, r0, r0
   10d3c:	push	{r4, lr}
   10d40:	ldr	r4, [pc, #24]	; 10d60 <__assert_fail@plt+0xf8>
   10d44:	ldrb	r3, [r4]
   10d48:	cmp	r3, #0
   10d4c:	popne	{r4, pc}
   10d50:	bl	10cd8 <__assert_fail@plt+0x70>
   10d54:	mov	r3, #1
   10d58:	strb	r3, [r4]
   10d5c:	pop	{r4, pc}
   10d60:	andeq	r9, r2, r4, asr #2
   10d64:	b	10d04 <__assert_fail@plt+0x9c>
   10d68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10d6c:	add	fp, sp, #24
   10d70:	mov	r9, r0
   10d74:	ldr	r0, [pc, #120]	; 10df4 <__assert_fail@plt+0x18c>
   10d78:	mov	r8, r1
   10d7c:	mov	r1, #4
   10d80:	ldr	r0, [pc, r0]
   10d84:	add	r4, r0, r9, lsl #4
   10d88:	ldr	r0, [r4, #12]
   10d8c:	add	r0, r0, #1
   10d90:	bl	12418 <__assert_fail@plt+0x17b0>
   10d94:	ldr	r1, [r4, #12]
   10d98:	cmp	r1, #1
   10d9c:	movlt	r2, #0
   10da0:	strlt	r2, [r8]
   10da4:	poplt	{r4, r5, r6, r7, r8, r9, fp, pc}
   10da8:	ldr	ip, [pc, #72]	; 10df8 <__assert_fail@plt+0x190>
   10dac:	rsb	r3, r9, #1
   10db0:	mov	r4, #0
   10db4:	mov	r2, #0
   10db8:	mov	r7, #0
   10dbc:	ldr	ip, [pc, ip]
   10dc0:	ldr	r6, [ip, r9, lsl #2]
   10dc4:	add	r7, r7, #1
   10dc8:	ldr	r5, [r6, r4]!
   10dcc:	add	r4, r4, #8
   10dd0:	add	r5, r5, r3
   10dd4:	ldrb	r5, [r5, #12]
   10dd8:	cmp	r5, #0
   10ddc:	strne	r6, [r0, r2, lsl #2]
   10de0:	addne	r2, r2, #1
   10de4:	cmp	r7, r1
   10de8:	strge	r2, [r8]
   10dec:	popge	{r4, r5, r6, r7, r8, r9, fp, pc}
   10df0:	b	10dc0 <__assert_fail@plt+0x158>
   10df4:	andeq	r8, r1, r4, lsr r3
   10df8:	andeq	r8, r1, ip, lsr r3
   10dfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e00:	add	fp, sp, #28
   10e04:	sub	sp, sp, #4
   10e08:	mov	sl, r0
   10e0c:	ldr	r1, [r0]
   10e10:	ldr	r0, [pc, #652]	; 110a4 <__assert_fail@plt+0x43c>
   10e14:	ldr	r0, [pc, r0]
   10e18:	ldr	r4, [pc, #648]	; 110a8 <__assert_fail@plt+0x440>
   10e1c:	ldr	r4, [pc, r4]
   10e20:	mov	r2, r4
   10e24:	bl	14010 <error@@Base+0x1738>
   10e28:	ldrb	r0, [r4, #11]
   10e2c:	cmp	r0, #0
   10e30:	bne	11098 <__assert_fail@plt+0x430>
   10e34:	ldr	r4, [pc, #624]	; 110ac <__assert_fail@plt+0x444>
   10e38:	ldr	r4, [pc, r4]
   10e3c:	ldr	r1, [pc, #620]	; 110b0 <__assert_fail@plt+0x448>
   10e40:	ldr	r1, [pc, r1]
   10e44:	mov	r0, r4
   10e48:	bl	137b8 <error@@Base+0xee0>
   10e4c:	ldr	r0, [r4, #12]
   10e50:	mov	r1, #8
   10e54:	add	r0, r0, #1
   10e58:	bl	12418 <__assert_fail@plt+0x17b0>
   10e5c:	ldr	r9, [pc, #592]	; 110b4 <__assert_fail@plt+0x44c>
   10e60:	ldr	r9, [pc, r9]
   10e64:	ldr	r5, [r4]
   10e68:	cmp	r5, #0
   10e6c:	str	r0, [r9]
   10e70:	beq	10edc <__assert_fail@plt+0x274>
   10e74:	ldr	r7, [pc, #572]	; 110b8 <__assert_fail@plt+0x450>
   10e78:	mov	r8, #0
   10e7c:	mov	r4, #1
   10e80:	ldr	r7, [pc, r7]
   10e84:	ldr	r1, [r5, #8]
   10e88:	mov	r0, r7
   10e8c:	bl	1218c <__assert_fail@plt+0x1524>
   10e90:	mov	r6, r0
   10e94:	cmp	r0, #0
   10e98:	bne	10ec0 <__assert_fail@plt+0x258>
   10e9c:	mov	r0, #1
   10ea0:	mov	r1, #16
   10ea4:	bl	12418 <__assert_fail@plt+0x17b0>
   10ea8:	mov	r6, r0
   10eac:	ldr	r0, [r5, #8]
   10eb0:	mov	r1, r6
   10eb4:	str	r0, [r6, #8]
   10eb8:	mov	r0, r7
   10ebc:	bl	1221c <__assert_fail@plt+0x15b4>
   10ec0:	strb	r4, [r6, #12]
   10ec4:	ldr	r0, [r9]
   10ec8:	str	r6, [r0, r8]
   10ecc:	add	r8, r8, #8
   10ed0:	ldr	r5, [r5, #4]
   10ed4:	cmp	r5, #0
   10ed8:	bne	10e84 <__assert_fail@plt+0x21c>
   10edc:	ldr	r1, [sl, #4]
   10ee0:	ldr	r0, [pc, #468]	; 110bc <__assert_fail@plt+0x454>
   10ee4:	ldr	r0, [pc, r0]
   10ee8:	ldr	r2, [pc, #464]	; 110c0 <__assert_fail@plt+0x458>
   10eec:	ldr	r2, [pc, r2]
   10ef0:	add	r5, r0, #16
   10ef4:	mov	r0, r5
   10ef8:	bl	14010 <error@@Base+0x1738>
   10efc:	ldr	sl, [pc, #448]	; 110c4 <__assert_fail@plt+0x45c>
   10f00:	mov	r1, r5
   10f04:	ldr	sl, [pc, sl]
   10f08:	add	r0, sl, #16
   10f0c:	bl	137b8 <error@@Base+0xee0>
   10f10:	ldr	r0, [sl, #28]
   10f14:	mov	r1, #8
   10f18:	add	r0, r0, #1
   10f1c:	bl	12418 <__assert_fail@plt+0x17b0>
   10f20:	ldr	r7, [sl, #16]
   10f24:	str	r0, [r9, #4]
   10f28:	cmp	r7, #0
   10f2c:	beq	10f98 <__assert_fail@plt+0x330>
   10f30:	ldr	r5, [pc, #400]	; 110c8 <__assert_fail@plt+0x460>
   10f34:	mov	r4, #0
   10f38:	mov	r8, #1
   10f3c:	ldr	r5, [pc, r5]
   10f40:	ldr	r1, [r7, #8]
   10f44:	mov	r0, r5
   10f48:	bl	1218c <__assert_fail@plt+0x1524>
   10f4c:	mov	r6, r0
   10f50:	cmp	r0, #0
   10f54:	bne	10f7c <__assert_fail@plt+0x314>
   10f58:	mov	r0, #1
   10f5c:	mov	r1, #16
   10f60:	bl	12418 <__assert_fail@plt+0x17b0>
   10f64:	mov	r6, r0
   10f68:	ldr	r0, [r7, #8]
   10f6c:	mov	r1, r6
   10f70:	str	r0, [r6, #8]
   10f74:	mov	r0, r5
   10f78:	bl	1221c <__assert_fail@plt+0x15b4>
   10f7c:	strb	r8, [r6, #13]
   10f80:	ldr	r0, [r9, #4]
   10f84:	str	r6, [r0, r4]
   10f88:	add	r4, r4, #8
   10f8c:	ldr	r7, [r7, #4]
   10f90:	cmp	r7, #0
   10f94:	bne	10f40 <__assert_fail@plt+0x2d8>
   10f98:	ldr	r0, [sl, #12]
   10f9c:	mov	r1, #4
   10fa0:	add	r0, r0, #1
   10fa4:	bl	12418 <__assert_fail@plt+0x17b0>
   10fa8:	ldr	r1, [sl, #12]
   10fac:	cmp	r1, #1
   10fb0:	blt	1100c <__assert_fail@plt+0x3a4>
   10fb4:	mov	r3, #0
   10fb8:	mov	r2, #0
   10fbc:	ldr	r7, [r9]
   10fc0:	ldr	r6, [r7, r3]!
   10fc4:	add	r3, r3, #8
   10fc8:	ldrb	r6, [r6, #13]
   10fcc:	cmp	r6, #0
   10fd0:	strne	r7, [r0, r2, lsl #2]
   10fd4:	addne	r2, r2, #1
   10fd8:	subs	r1, r1, #1
   10fdc:	bne	10fbc <__assert_fail@plt+0x354>
   10fe0:	ldr	r1, [pc, #228]	; 110cc <__assert_fail@plt+0x464>
   10fe4:	cmp	r2, #65536	; 0x10000
   10fe8:	ldr	r1, [pc, r1]
   10fec:	str	r0, [r1]
   10ff0:	ldr	r0, [pc, #216]	; 110d0 <__assert_fail@plt+0x468>
   10ff4:	ldr	r0, [pc, r0]
   10ff8:	str	r2, [r0]
   10ffc:	blt	11028 <__assert_fail@plt+0x3c0>
   11000:	ldr	r0, [pc, #204]	; 110d4 <__assert_fail@plt+0x46c>
   11004:	add	r0, pc, r0
   11008:	bl	128d8 <error@@Base>
   1100c:	ldr	r1, [pc, #196]	; 110d8 <__assert_fail@plt+0x470>
   11010:	ldr	r1, [pc, r1]
   11014:	str	r0, [r1]
   11018:	mov	r1, #0
   1101c:	ldr	r0, [pc, #184]	; 110dc <__assert_fail@plt+0x474>
   11020:	ldr	r0, [pc, r0]
   11024:	str	r1, [r0]
   11028:	ldr	r0, [sl, #28]
   1102c:	mov	r1, #4
   11030:	add	r0, r0, #1
   11034:	bl	12418 <__assert_fail@plt+0x17b0>
   11038:	ldr	r1, [sl, #28]
   1103c:	cmp	r1, #1
   11040:	blt	11074 <__assert_fail@plt+0x40c>
   11044:	mov	r3, #0
   11048:	mov	r2, #0
   1104c:	ldr	r7, [r9, #4]
   11050:	ldr	r6, [r7, r3]!
   11054:	add	r3, r3, #8
   11058:	ldrb	r6, [r6, #12]
   1105c:	cmp	r6, #0
   11060:	strne	r7, [r0, r2, lsl #2]
   11064:	addne	r2, r2, #1
   11068:	subs	r1, r1, #1
   1106c:	bne	1104c <__assert_fail@plt+0x3e4>
   11070:	b	11078 <__assert_fail@plt+0x410>
   11074:	mov	r2, #0
   11078:	ldr	r1, [pc, #96]	; 110e0 <__assert_fail@plt+0x478>
   1107c:	ldr	r1, [pc, r1]
   11080:	str	r0, [r1]
   11084:	ldr	r0, [pc, #88]	; 110e4 <__assert_fail@plt+0x47c>
   11088:	ldr	r0, [pc, r0]
   1108c:	str	r2, [r0]
   11090:	sub	sp, fp, #28
   11094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11098:	ldr	r0, [pc, #72]	; 110e8 <__assert_fail@plt+0x480>
   1109c:	add	r0, pc, r0
   110a0:	bl	128d8 <error@@Base>
   110a4:	andeq	r8, r1, r0, lsl #5
   110a8:	muleq	r1, r4, r2
   110ac:	andeq	r8, r1, ip, ror r2
   110b0:	andeq	r8, r1, r4, asr r2
   110b4:	muleq	r1, r8, r2
   110b8:	andeq	r8, r1, r0, asr #4
   110bc:			; <UNDEFINED> instruction: 0x000181b0
   110c0:	andeq	r8, r1, r4, asr #3
   110c4:			; <UNDEFINED> instruction: 0x000181b0
   110c8:	andeq	r8, r1, r4, lsl #3
   110cc:	strdeq	r8, [r1], -ip
   110d0:	strdeq	r8, [r1], -r4
   110d4:	andeq	r3, r0, lr, asr #16
   110d8:	ldrdeq	r8, [r1], -r4
   110dc:	andeq	r8, r1, r8, asr #1
   110e0:	andeq	r8, r1, r4, lsr #32
   110e4:	andeq	r8, r1, ip, lsl r0
   110e8:	muleq	r0, ip, r7
   110ec:	cmp	r1, #0
   110f0:	moveq	r0, #0
   110f4:	bxeq	lr
   110f8:	push	{fp, lr}
   110fc:	mov	fp, sp
   11100:	ldr	r3, [r1, #8]
   11104:	mov	ip, r0
   11108:	mov	r0, #0
   1110c:	rsb	lr, r3, #0
   11110:	cmp	lr, ip
   11114:	bge	11138 <__assert_fail@plt+0x4d0>
   11118:	sub	lr, ip, #1
   1111c:	add	r0, r3, lr
   11120:	ldr	r3, [r1, #12]
   11124:	bic	r0, r0, #1
   11128:	add	r0, r3, r0
   1112c:	ldrh	r0, [r0]
   11130:	str	lr, [r2]
   11134:	ldr	r3, [r1, #8]
   11138:	cmp	r3, ip
   1113c:	pop	{fp, lr}
   11140:	bxle	lr
   11144:	ldr	r1, [r1, #12]
   11148:	add	ip, ip, #1
   1114c:	add	r3, r3, ip
   11150:	bic	r3, r3, #1
   11154:	add	r1, r1, r3
   11158:	ldrh	r1, [r1]
   1115c:	add	r1, r1, #1
   11160:	cmp	r1, r0
   11164:	movcs	r0, r1
   11168:	strcs	ip, [r2]
   1116c:	bx	lr
   11170:	push	{r4, r5, r6, sl, fp, lr}
   11174:	add	fp, sp, #16
   11178:	ldr	r2, [r1]
   1117c:	cmp	r2, #0
   11180:	beq	111c8 <__assert_fail@plt+0x560>
   11184:	ldr	r5, [r2, #8]
   11188:	mov	r3, #0
   1118c:	rsb	r4, r5, #0
   11190:	cmp	r4, r0
   11194:	blt	111d0 <__assert_fail@plt+0x568>
   11198:	cmp	r5, r0
   1119c:	ble	111f0 <__assert_fail@plt+0x588>
   111a0:	ldr	r2, [r2, #12]
   111a4:	add	r5, r0, r5
   111a8:	add	r5, r5, #1
   111ac:	bic	r5, r5, #1
   111b0:	add	r2, r2, r5
   111b4:	ldrh	r2, [r2]
   111b8:	add	r2, r2, #1
   111bc:	cmp	r2, r3
   111c0:	movcc	r2, r3
   111c4:	b	111f4 <__assert_fail@plt+0x58c>
   111c8:	mov	r2, #0
   111cc:	b	111f4 <__assert_fail@plt+0x58c>
   111d0:	ldr	r4, [r2, #12]
   111d4:	add	r3, r0, r5
   111d8:	sub	r3, r3, #1
   111dc:	bic	r3, r3, #1
   111e0:	add	r3, r4, r3
   111e4:	ldrh	r3, [r3]
   111e8:	cmp	r5, r0
   111ec:	bgt	111a0 <__assert_fail@plt+0x538>
   111f0:	mov	r2, r3
   111f4:	ldr	r3, [pc, #204]	; 112c8 <__assert_fail@plt+0x660>
   111f8:	add	r4, r2, r0
   111fc:	ldr	r3, [pc, r3]
   11200:	ldr	ip, [r3]
   11204:	ldr	r3, [pc, #192]	; 112cc <__assert_fail@plt+0x664>
   11208:	ldr	r3, [pc, r3]
   1120c:	ldr	lr, [r3]
   11210:	cmp	r2, lr
   11214:	cmplt	r4, ip
   11218:	blt	11264 <__assert_fail@plt+0x5fc>
   1121c:	mov	r3, r2
   11220:	cmp	r3, lr
   11224:	ldreq	r6, [pc, #172]	; 112d8 <__assert_fail@plt+0x670>
   11228:	addeq	r2, r0, #1
   1122c:	ldreq	r6, [pc, r6]
   11230:	streq	r2, [r6]
   11234:	cmp	r4, ip
   11238:	ldreq	r6, [pc, #156]	; 112dc <__assert_fail@plt+0x674>
   1123c:	subeq	r2, r0, #1
   11240:	ldreq	r6, [pc, r6]
   11244:	streq	r2, [r6]
   11248:	ldr	r2, [r1, #8]
   1124c:	ldr	r1, [r1, #12]
   11250:	add	r0, r2, r0
   11254:	bic	r0, r0, #1
   11258:	add	r0, r1, r0
   1125c:	strh	r3, [r0]
   11260:	pop	{r4, r5, r6, sl, fp, pc}
   11264:	ldr	r3, [pc, #100]	; 112d0 <__assert_fail@plt+0x668>
   11268:	ldr	r3, [pc, r3]
   1126c:	ldr	r3, [r3]
   11270:	add	r4, r3, r0, lsl #2
   11274:	ldr	r3, [pc, #88]	; 112d4 <__assert_fail@plt+0x66c>
   11278:	ldr	r3, [pc, r3]
   1127c:	ldr	r5, [r3]
   11280:	ldr	r3, [r4, r2, lsl #2]
   11284:	ldr	r6, [r5, r2, lsl #2]
   11288:	ldr	r3, [r3]
   1128c:	ldr	r6, [r6]
   11290:	cmp	r6, r3
   11294:	bne	112c0 <__assert_fail@plt+0x658>
   11298:	add	r3, r2, #1
   1129c:	cmp	r3, lr
   112a0:	bge	112b8 <__assert_fail@plt+0x650>
   112a4:	add	r2, r0, r2
   112a8:	add	r2, r2, #1
   112ac:	cmp	r2, ip
   112b0:	mov	r2, r3
   112b4:	blt	11280 <__assert_fail@plt+0x618>
   112b8:	add	r4, r0, r3
   112bc:	b	11220 <__assert_fail@plt+0x5b8>
   112c0:	add	r4, r0, r2
   112c4:	b	1121c <__assert_fail@plt+0x5b4>
   112c8:	andeq	r7, r1, r8, lsr #29
   112cc:	andeq	r7, r1, r0, ror #29
   112d0:	andeq	r7, r1, r8, lsr lr
   112d4:	andeq	r7, r1, ip, ror #28
   112d8:	andeq	r7, r1, r4, asr #29
   112dc:	andeq	r7, r1, r0, lsr #29
   112e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112e4:	add	fp, sp, #28
   112e8:	sub	sp, sp, #4
   112ec:	ldr	r0, [pc, #224]	; 113d4 <__assert_fail@plt+0x76c>
   112f0:	ldr	r0, [pc, r0]
   112f4:	ldr	r0, [r0]
   112f8:	ldr	r7, [pc, #216]	; 113d8 <__assert_fail@plt+0x770>
   112fc:	ldr	r7, [pc, r7]
   11300:	str	r0, [r7]
   11304:	ldr	r9, [pc, #208]	; 113dc <__assert_fail@plt+0x774>
   11308:	ldr	r9, [pc, r9]
   1130c:	ldr	r1, [r9]
   11310:	ldr	r4, [pc, #200]	; 113e0 <__assert_fail@plt+0x778>
   11314:	ldr	r4, [pc, r4]
   11318:	rsb	r2, r1, #0
   1131c:	sub	r0, r0, r1
   11320:	cmp	r0, r2
   11324:	str	r2, [r4]
   11328:	blt	113cc <__assert_fail@plt+0x764>
   1132c:	ldr	sl, [pc, #176]	; 113e4 <__assert_fail@plt+0x77c>
   11330:	mvn	r8, #0
   11334:	ldr	sl, [pc, sl]
   11338:	mov	r0, #1
   1133c:	mov	r1, #16
   11340:	mov	r6, r8
   11344:	bl	12418 <__assert_fail@plt+0x17b0>
   11348:	add	r8, r8, #1
   1134c:	mov	r5, r0
   11350:	mov	r1, #2
   11354:	str	r8, [r0, #8]
   11358:	add	r0, r6, #2
   1135c:	bl	12418 <__assert_fail@plt+0x17b0>
   11360:	str	r0, [r5, #12]
   11364:	mov	r0, sl
   11368:	mov	r1, r5
   1136c:	bl	11d30 <__assert_fail@plt+0x10c8>
   11370:	mvn	r6, r6
   11374:	cmp	r8, r6
   11378:	blt	113ac <__assert_fail@plt+0x744>
   1137c:	ldr	r0, [r4]
   11380:	cmp	r6, r0
   11384:	blt	113a0 <__assert_fail@plt+0x738>
   11388:	ldr	r0, [r7]
   1138c:	cmp	r6, r0
   11390:	bgt	113a0 <__assert_fail@plt+0x738>
   11394:	mov	r0, r6
   11398:	mov	r1, r5
   1139c:	bl	11170 <__assert_fail@plt+0x508>
   113a0:	add	r6, r6, #2
   113a4:	cmp	r6, r8
   113a8:	ble	1137c <__assert_fail@plt+0x714>
   113ac:	ldr	r0, [r9]
   113b0:	ldr	r1, [pc, #48]	; 113e8 <__assert_fail@plt+0x780>
   113b4:	ldr	r1, [pc, r1]
   113b8:	ldr	r1, [r1]
   113bc:	sub	r0, r1, r0
   113c0:	ldr	r1, [r4]
   113c4:	cmp	r1, r0
   113c8:	ble	11338 <__assert_fail@plt+0x6d0>
   113cc:	sub	sp, fp, #28
   113d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113d4:			; <UNDEFINED> instruction: 0x00017db4
   113d8:	andeq	r7, r1, r4, ror #27
   113dc:	andeq	r7, r1, r0, ror #27
   113e0:	ldrdeq	r7, [r1], -ip
   113e4:	andeq	r7, r1, r8, lsl #27
   113e8:	strdeq	r7, [r1], -r0
   113ec:	push	{r4, r5, r6, r7, fp, lr}
   113f0:	add	fp, sp, #16
   113f4:	ldr	r0, [pc, #288]	; 1151c <__assert_fail@plt+0x8b4>
   113f8:	ldr	r0, [pc, r0]
   113fc:	ldr	r2, [r0, #4]
   11400:	cmp	r2, #0
   11404:	beq	11518 <__assert_fail@plt+0x8b0>
   11408:	ldr	r0, [pc, #272]	; 11520 <__assert_fail@plt+0x8b8>
   1140c:	ldr	r0, [pc, r0]
   11410:	ldr	r0, [r0]
   11414:	ldr	r1, [pc, #264]	; 11524 <__assert_fail@plt+0x8bc>
   11418:	ldr	r1, [pc, r1]
   1141c:	ldr	r1, [r1]
   11420:	sub	ip, r1, r0
   11424:	ldr	r0, [pc, #252]	; 11528 <__assert_fail@plt+0x8c0>
   11428:	mov	r1, #1
   1142c:	ldr	r0, [pc, r0]
   11430:	ldr	r0, [r0]
   11434:	sub	r0, r0, #4
   11438:	b	11444 <__assert_fail@plt+0x7dc>
   1143c:	cmp	r2, #0
   11440:	popeq	{r4, r5, r6, r7, fp, pc}
   11444:	mov	lr, r2
   11448:	ldr	r2, [r2]
   1144c:	ldr	r3, [lr, #8]
   11450:	ldr	r4, [lr, #12]
   11454:	cmp	r2, #0
   11458:	add	r3, r3, ip
   1145c:	bic	r3, r3, #1
   11460:	add	r3, r4, r3
   11464:	ldrh	r3, [r3]
   11468:	beq	114dc <__assert_fail@plt+0x874>
   1146c:	ldr	r4, [r2, #8]
   11470:	mov	r6, #0
   11474:	rsb	r5, r4, #0
   11478:	cmp	ip, r5
   1147c:	mov	r5, ip
   11480:	ble	1149c <__assert_fail@plt+0x834>
   11484:	ldr	r7, [r2, #12]
   11488:	sub	r5, ip, #1
   1148c:	add	r6, r4, r5
   11490:	bic	r6, r6, #1
   11494:	add	r6, r7, r6
   11498:	ldrh	r6, [r6]
   1149c:	cmp	r4, ip
   114a0:	ble	114ec <__assert_fail@plt+0x884>
   114a4:	add	r7, ip, #1
   114a8:	add	r4, r4, r7
   114ac:	bic	ip, r4, #1
   114b0:	ldr	r4, [r2, #12]
   114b4:	add	r4, r4, ip
   114b8:	ldrh	r4, [r4]
   114bc:	add	r4, r4, #1
   114c0:	cmp	r4, r6
   114c4:	movcs	r5, r7
   114c8:	movcc	r4, r6
   114cc:	mov	ip, r5
   114d0:	cmp	r4, r3
   114d4:	blt	114fc <__assert_fail@plt+0x894>
   114d8:	b	1143c <__assert_fail@plt+0x7d4>
   114dc:	mov	r4, #0
   114e0:	cmp	r4, r3
   114e4:	blt	114fc <__assert_fail@plt+0x894>
   114e8:	b	1143c <__assert_fail@plt+0x7d4>
   114ec:	mov	ip, r5
   114f0:	mov	r4, r6
   114f4:	cmp	r4, r3
   114f8:	bge	1143c <__assert_fail@plt+0x7d4>
   114fc:	ldr	r2, [r0, r3, lsl #2]
   11500:	sub	r3, r3, #1
   11504:	cmp	r3, r4
   11508:	strb	r1, [r2, #4]
   1150c:	bgt	114fc <__assert_fail@plt+0x894>
   11510:	ldr	r2, [lr]
   11514:	b	1143c <__assert_fail@plt+0x7d4>
   11518:	pop	{r4, r5, r6, r7, fp, pc}
   1151c:	andeq	r7, r1, r4, asr #25
   11520:	ldrdeq	r7, [r1], -ip
   11524:	andeq	r7, r1, ip, lsl #25
   11528:			; <UNDEFINED> instruction: 0x00017cb8
   1152c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11530:	add	fp, sp, #28
   11534:	sub	sp, sp, #4
   11538:	mov	r4, r2
   1153c:	mov	sl, r1
   11540:	mov	r6, r0
   11544:	bl	1233c <__assert_fail@plt+0x16d4>
   11548:	movw	r0, #8052	; 0x1f74
   1154c:	mov	r9, r6
   11550:	ldr	r0, [r9, r0]!
   11554:	cmp	r0, #1
   11558:	blt	11608 <__assert_fail@plt+0x9a0>
   1155c:	movw	r0, #8048	; 0x1f70
   11560:	mov	r8, #0
   11564:	add	r5, r6, r0
   11568:	ldr	r0, [r5]
   1156c:	ldr	r0, [r0, r8, lsl #2]
   11570:	ldr	r7, [r0, #12]
   11574:	ldr	r6, [r0, #16]
   11578:	ldr	r0, [pc, #144]	; 11610 <__assert_fail@plt+0x9a8>
   1157c:	ldr	r0, [pc, r0]
   11580:	mov	r1, r7
   11584:	mov	r2, r6
   11588:	bl	12b00 <error@@Base+0x228>
   1158c:	mov	r0, sl
   11590:	mov	r1, r7
   11594:	mov	r2, r6
   11598:	bl	12b00 <error@@Base+0x228>
   1159c:	ldr	r0, [r5]
   115a0:	ldr	r0, [r0, r8, lsl #2]
   115a4:	ldr	r0, [r0, #8]
   115a8:	bl	10bd8 <strlen@plt>
   115ac:	add	r0, sl, r0, lsl #3
   115b0:	mov	r1, r7
   115b4:	mov	r2, r6
   115b8:	bl	12b00 <error@@Base+0x228>
   115bc:	cmp	r4, #0
   115c0:	beq	115f8 <__assert_fail@plt+0x990>
   115c4:	sub	r0, r7, r6
   115c8:	mov	r1, #1
   115cc:	clz	r0, r0
   115d0:	lsr	r6, r0, #5
   115d4:	mov	r0, r4
   115d8:	mov	r2, r6
   115dc:	bl	12b00 <error@@Base+0x228>
   115e0:	cmp	r7, #11
   115e4:	mov	r1, #1
   115e8:	mov	r2, r6
   115ec:	movge	r7, #11
   115f0:	add	r0, r4, r7, lsl #3
   115f4:	bl	12b00 <error@@Base+0x228>
   115f8:	ldr	r0, [r9]
   115fc:	add	r8, r8, #1
   11600:	cmp	r8, r0
   11604:	blt	11568 <__assert_fail@plt+0x900>
   11608:	sub	sp, fp, #28
   1160c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11610:	andeq	r7, r1, r4, asr fp
   11614:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11618:	add	fp, sp, #28
   1161c:	sub	sp, sp, #12
   11620:	ldr	r7, [pc, #504]	; 11820 <__assert_fail@plt+0xbb8>
   11624:	ldr	r7, [pc, r7]
   11628:	ldr	r0, [r7, #12]
   1162c:	cmp	r0, #1
   11630:	blt	11818 <__assert_fail@plt+0xbb0>
   11634:	ldr	r6, [pc, #488]	; 11824 <__assert_fail@plt+0xbbc>
   11638:	mov	r8, #0
   1163c:	ldr	r6, [pc, r6]
   11640:	ldr	r9, [pc, #480]	; 11828 <__assert_fail@plt+0xbc0>
   11644:	ldr	r9, [pc, r9]
   11648:	add	r1, r9, #936	; 0x3a8
   1164c:	add	r4, r9, #928	; 0x3a0
   11650:	str	r1, [sp, #8]
   11654:	add	r1, r9, #944	; 0x3b0
   11658:	str	r1, [sp, #4]
   1165c:	add	r1, r9, #952	; 0x3b8
   11660:	str	r1, [sp]
   11664:	cmp	r8, r0
   11668:	bge	117fc <__assert_fail@plt+0xb94>
   1166c:	ldr	r0, [r6]
   11670:	mov	r1, #1
   11674:	add	r0, r0, r8, lsl #3
   11678:	ldrb	r0, [r0, #4]
   1167c:	and	r5, r0, #1
   11680:	mov	r0, r4
   11684:	eor	r2, r5, #1
   11688:	bl	12b00 <error@@Base+0x228>
   1168c:	ldr	r0, [r7, #12]
   11690:	add	sl, r8, #1
   11694:	cmp	sl, r0
   11698:	bge	1180c <__assert_fail@plt+0xba4>
   1169c:	ldr	r0, [r6]
   116a0:	mov	r1, #1
   116a4:	add	r0, r0, sl, lsl #3
   116a8:	ldrb	r0, [r0, #4]
   116ac:	and	r5, r5, r0
   116b0:	ldr	r0, [sp, #8]
   116b4:	eor	r2, r5, #1
   116b8:	bl	12b00 <error@@Base+0x228>
   116bc:	ldr	r0, [r7, #12]
   116c0:	add	r1, r8, #2
   116c4:	cmp	r1, r0
   116c8:	bge	1180c <__assert_fail@plt+0xba4>
   116cc:	ldr	r0, [r6]
   116d0:	add	r0, r0, r1, lsl #3
   116d4:	mov	r1, #1
   116d8:	ldrb	r0, [r0, #4]
   116dc:	and	r5, r5, r0
   116e0:	ldr	r0, [sp, #4]
   116e4:	eor	r2, r5, #1
   116e8:	bl	12b00 <error@@Base+0x228>
   116ec:	ldr	r0, [r7, #12]
   116f0:	add	r1, r8, #3
   116f4:	cmp	r1, r0
   116f8:	bge	1180c <__assert_fail@plt+0xba4>
   116fc:	ldr	r0, [r6]
   11700:	add	r0, r0, r1, lsl #3
   11704:	mov	r1, #1
   11708:	ldrb	r0, [r0, #4]
   1170c:	and	r5, r5, r0
   11710:	ldr	r0, [sp]
   11714:	eor	r2, r5, #1
   11718:	bl	12b00 <error@@Base+0x228>
   1171c:	ldr	r0, [r7, #12]
   11720:	add	r1, r8, #4
   11724:	cmp	r1, r0
   11728:	bge	1180c <__assert_fail@plt+0xba4>
   1172c:	ldr	r0, [r6]
   11730:	add	r0, r0, r1, lsl #3
   11734:	mov	r1, r9
   11738:	ldrb	r0, [r0, #4]
   1173c:	and	r9, r5, r0
   11740:	mov	r5, r1
   11744:	add	r0, r1, #960	; 0x3c0
   11748:	mov	r1, #1
   1174c:	eor	r2, r9, #1
   11750:	bl	12b00 <error@@Base+0x228>
   11754:	ldr	r0, [r7, #12]
   11758:	add	r1, r8, #5
   1175c:	cmp	r1, r0
   11760:	bge	117e8 <__assert_fail@plt+0xb80>
   11764:	ldr	r0, [r6]
   11768:	add	r0, r0, r1, lsl #3
   1176c:	mov	r1, #1
   11770:	ldrb	r0, [r0, #4]
   11774:	and	r9, r9, r0
   11778:	add	r0, r5, #968	; 0x3c8
   1177c:	eor	r2, r9, #1
   11780:	bl	12b00 <error@@Base+0x228>
   11784:	ldr	r0, [r7, #12]
   11788:	add	r1, r8, #6
   1178c:	cmp	r1, r0
   11790:	bge	117e8 <__assert_fail@plt+0xb80>
   11794:	ldr	r0, [r6]
   11798:	add	r0, r0, r1, lsl #3
   1179c:	mov	r1, #1
   117a0:	ldrb	r0, [r0, #4]
   117a4:	and	r9, r9, r0
   117a8:	add	r0, r5, #976	; 0x3d0
   117ac:	eor	r2, r9, #1
   117b0:	bl	12b00 <error@@Base+0x228>
   117b4:	ldr	r0, [r7, #12]
   117b8:	add	r1, r8, #7
   117bc:	cmp	r1, r0
   117c0:	bge	117e8 <__assert_fail@plt+0xb80>
   117c4:	ldr	r0, [r6]
   117c8:	add	r0, r0, r1, lsl #3
   117cc:	mov	r1, #1
   117d0:	ldrb	r0, [r0, #4]
   117d4:	and	r0, r9, r0
   117d8:	eor	r2, r0, #1
   117dc:	add	r0, r5, #984	; 0x3d8
   117e0:	bl	12b00 <error@@Base+0x228>
   117e4:	ldr	r0, [r7, #12]
   117e8:	mov	r8, sl
   117ec:	mov	r9, r5
   117f0:	cmp	r8, r0
   117f4:	blt	11664 <__assert_fail@plt+0x9fc>
   117f8:	b	11818 <__assert_fail@plt+0xbb0>
   117fc:	add	r8, r8, #1
   11800:	cmp	r8, r0
   11804:	blt	11664 <__assert_fail@plt+0x9fc>
   11808:	b	11818 <__assert_fail@plt+0xbb0>
   1180c:	mov	r8, sl
   11810:	cmp	r8, r0
   11814:	blt	11664 <__assert_fail@plt+0x9fc>
   11818:	sub	sp, fp, #28
   1181c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11820:	muleq	r1, r0, sl
   11824:			; <UNDEFINED> instruction: 0x00017abc
   11828:	andeq	r7, r1, ip, lsl #21
   1182c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11830:	add	fp, sp, #28
   11834:	sub	sp, sp, #4
   11838:	ldr	r8, [pc, #480]	; 11a20 <__assert_fail@plt+0xdb8>
   1183c:	ldr	r8, [pc, r8]
   11840:	ldr	r0, [r8, #12]
   11844:	cmp	r0, #1
   11848:	blt	118b4 <__assert_fail@plt+0xc4c>
   1184c:	ldr	r6, [pc, #464]	; 11a24 <__assert_fail@plt+0xdbc>
   11850:	mov	r5, #0
   11854:	movw	r9, #9048	; 0x2358
   11858:	ldr	r6, [pc, r6]
   1185c:	ldr	r7, [pc, #452]	; 11a28 <__assert_fail@plt+0xdc0>
   11860:	ldr	r7, [pc, r7]
   11864:	add	r4, r7, #992	; 0x3e0
   11868:	ldr	r0, [r6]
   1186c:	ldr	r0, [r0, r5, lsl #3]
   11870:	ldr	r0, [r0, #8]
   11874:	bl	120fc <__assert_fail@plt+0x1494>
   11878:	ldr	r2, [r6]
   1187c:	cmp	r0, #0
   11880:	mov	r0, r4
   11884:	addeq	r0, r7, r9
   11888:	ldr	r1, [r2, r5, lsl #3]!
   1188c:	ldrb	r2, [r2, #4]
   11890:	ldr	r1, [r1, #8]
   11894:	clz	r2, r2
   11898:	lsr	r3, r2, #5
   1189c:	mov	r2, #1
   118a0:	bl	12b14 <error@@Base+0x23c>
   118a4:	ldr	r0, [r8, #12]
   118a8:	add	r5, r5, #1
   118ac:	cmp	r5, r0
   118b0:	blt	11868 <__assert_fail@plt+0xc00>
   118b4:	ldr	r9, [pc, #368]	; 11a2c <__assert_fail@plt+0xdc4>
   118b8:	ldr	r9, [pc, r9]
   118bc:	add	r0, r9, #992	; 0x3e0
   118c0:	bl	1233c <__assert_fail@plt+0x16d4>
   118c4:	movw	r0, #9044	; 0x2354
   118c8:	ldr	r0, [r9, r0]
   118cc:	cmp	r0, #1
   118d0:	blt	11948 <__assert_fail@plt+0xce0>
   118d4:	mov	r4, #0
   118d8:	movw	sl, #9040	; 0x2350
   118dc:	add	r5, r9, #8
   118e0:	mov	r8, r9
   118e4:	ldr	r0, [r8, sl]!
   118e8:	ldr	r0, [r0, r4, lsl #2]
   118ec:	ldr	r6, [r0, #12]
   118f0:	ldr	r7, [r0, #16]
   118f4:	mov	r0, r9
   118f8:	mov	r1, r6
   118fc:	mov	r2, r7
   11900:	bl	12b00 <error@@Base+0x228>
   11904:	mov	r0, r5
   11908:	mov	r1, r6
   1190c:	mov	r2, r7
   11910:	bl	12b00 <error@@Base+0x228>
   11914:	ldr	r0, [r8]
   11918:	ldr	r0, [r0, r4, lsl #2]
   1191c:	ldr	r0, [r0, #8]
   11920:	bl	10bd8 <strlen@plt>
   11924:	add	r0, r5, r0, lsl #3
   11928:	mov	r1, r6
   1192c:	mov	r2, r7
   11930:	bl	12b00 <error@@Base+0x228>
   11934:	movw	r0, #9044	; 0x2354
   11938:	add	r4, r4, #1
   1193c:	ldr	r0, [r9, r0]
   11940:	cmp	r4, r0
   11944:	blt	118e0 <__assert_fail@plt+0xc78>
   11948:	movw	r0, #9048	; 0x2358
   1194c:	add	r0, r9, r0
   11950:	bl	1233c <__assert_fail@plt+0x16d4>
   11954:	movw	r0, #17100	; 0x42cc
   11958:	ldr	r0, [r9, r0]
   1195c:	cmp	r0, #1
   11960:	blt	11a14 <__assert_fail@plt+0xdac>
   11964:	mov	r5, #0
   11968:	add	sl, r9, #416	; 0x1a0
   1196c:	add	r6, r9, #824	; 0x338
   11970:	movw	r0, #17096	; 0x42c8
   11974:	mov	r8, r9
   11978:	ldr	r0, [r9, r0]!
   1197c:	ldr	r0, [r0, r5, lsl #2]
   11980:	ldr	r7, [r0, #12]
   11984:	ldr	r4, [r0, #16]
   11988:	mov	r0, r8
   1198c:	mov	r1, r7
   11990:	mov	r2, r4
   11994:	bl	12b00 <error@@Base+0x228>
   11998:	mov	r0, sl
   1199c:	mov	r1, r7
   119a0:	mov	r2, r4
   119a4:	bl	12b00 <error@@Base+0x228>
   119a8:	ldr	r0, [r9]
   119ac:	mov	r9, r8
   119b0:	ldr	r0, [r0, r5, lsl #2]
   119b4:	ldr	r0, [r0, #8]
   119b8:	bl	10bd8 <strlen@plt>
   119bc:	add	r0, sl, r0, lsl #3
   119c0:	mov	r1, r7
   119c4:	mov	r2, r4
   119c8:	bl	12b00 <error@@Base+0x228>
   119cc:	sub	r0, r7, r4
   119d0:	mov	r1, #1
   119d4:	clz	r0, r0
   119d8:	lsr	r4, r0, #5
   119dc:	mov	r0, r6
   119e0:	mov	r2, r4
   119e4:	bl	12b00 <error@@Base+0x228>
   119e8:	cmp	r7, #11
   119ec:	mov	r1, #1
   119f0:	mov	r2, r4
   119f4:	movge	r7, #11
   119f8:	add	r0, r6, r7, lsl #3
   119fc:	bl	12b00 <error@@Base+0x228>
   11a00:	movw	r0, #17100	; 0x42cc
   11a04:	add	r5, r5, #1
   11a08:	ldr	r0, [r8, r0]
   11a0c:	cmp	r5, r0
   11a10:	blt	11970 <__assert_fail@plt+0xd08>
   11a14:	sub	sp, fp, #28
   11a18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a1c:	b	11614 <__assert_fail@plt+0x9ac>
   11a20:	andeq	r7, r1, r8, ror r8
   11a24:	andeq	r7, r1, r0, lsr #17
   11a28:	andeq	r7, r1, r0, ror r8
   11a2c:	andeq	r7, r1, r8, lsl r8
   11a30:	push	{fp, lr}
   11a34:	mov	fp, sp
   11a38:	sub	sp, sp, #8
   11a3c:	str	r0, [sp, #4]
   11a40:	add	r0, sp, #4
   11a44:	mov	r4, r1
   11a48:	ldr	r3, [pc, #592]	; 11ca0 <__assert_fail@plt+0x1038>
   11a4c:	ldr	r3, [pc, r3]
   11a50:	ldr	r2, [pc, #588]	; 11ca4 <__assert_fail@plt+0x103c>
   11a54:	add	r2, pc, r2
   11a58:	bl	12650 <__assert_fail@plt+0x19e8>
   11a5c:	ldr	r0, [sp, #4]
   11a60:	bic	r0, r0, #1
   11a64:	cmp	r0, #2
   11a68:	bne	11c94 <__assert_fail@plt+0x102c>
   11a6c:	ldr	r0, [pc, #564]	; 11ca8 <__assert_fail@plt+0x1040>
   11a70:	ldr	r0, [pc, r0]
   11a74:	ldr	r0, [r0]
   11a78:	bl	11f74 <__assert_fail@plt+0x130c>
   11a7c:	mov	r0, r4
   11a80:	str	r4, [sp]
   11a84:	bl	10dfc <__assert_fail@plt+0x194>
   11a88:	ldr	r0, [pc, #540]	; 11cac <__assert_fail@plt+0x1044>
   11a8c:	ldr	r0, [pc, r0]
   11a90:	ldr	r1, [r0]
   11a94:	ldr	r4, [pc, #532]	; 11cb0 <__assert_fail@plt+0x1048>
   11a98:	ldr	r4, [pc, r4]
   11a9c:	str	r1, [r4]
   11aa0:	ldr	sl, [pc, #524]	; 11cb4 <__assert_fail@plt+0x104c>
   11aa4:	ldr	sl, [pc, sl]
   11aa8:	ldr	r2, [sl]
   11aac:	ldr	r8, [pc, #516]	; 11cb8 <__assert_fail@plt+0x1050>
   11ab0:	ldr	r8, [pc, r8]
   11ab4:	rsb	r0, r2, #0
   11ab8:	sub	r3, r1, r2
   11abc:	cmp	r3, r0
   11ac0:	str	r0, [r8]
   11ac4:	blt	11b68 <__assert_fail@plt+0xf00>
   11ac8:	ldr	r5, [pc, #492]	; 11cbc <__assert_fail@plt+0x1054>
   11acc:	mvn	r9, #0
   11ad0:	ldr	r5, [pc, r5]
   11ad4:	mov	r0, #1
   11ad8:	mov	r1, #16
   11adc:	mov	r7, r9
   11ae0:	bl	12418 <__assert_fail@plt+0x17b0>
   11ae4:	add	r9, r9, #1
   11ae8:	mov	r6, r0
   11aec:	mov	r1, #2
   11af0:	str	r9, [r0, #8]
   11af4:	add	r0, r7, #2
   11af8:	bl	12418 <__assert_fail@plt+0x17b0>
   11afc:	str	r0, [r6, #12]
   11b00:	mov	r0, r5
   11b04:	mov	r1, r6
   11b08:	bl	11d30 <__assert_fail@plt+0x10c8>
   11b0c:	mvn	r7, r7
   11b10:	cmp	r9, r7
   11b14:	blt	11b48 <__assert_fail@plt+0xee0>
   11b18:	ldr	r0, [r8]
   11b1c:	cmp	r7, r0
   11b20:	blt	11b3c <__assert_fail@plt+0xed4>
   11b24:	ldr	r0, [r4]
   11b28:	cmp	r7, r0
   11b2c:	bgt	11b3c <__assert_fail@plt+0xed4>
   11b30:	mov	r0, r7
   11b34:	mov	r1, r6
   11b38:	bl	11170 <__assert_fail@plt+0x508>
   11b3c:	add	r7, r7, #2
   11b40:	cmp	r7, r9
   11b44:	ble	11b18 <__assert_fail@plt+0xeb0>
   11b48:	ldr	r2, [sl]
   11b4c:	ldr	r0, [pc, #364]	; 11cc0 <__assert_fail@plt+0x1058>
   11b50:	ldr	r0, [pc, r0]
   11b54:	ldr	r3, [r8]
   11b58:	ldr	r1, [r0]
   11b5c:	sub	r0, r1, r2
   11b60:	cmp	r3, r0
   11b64:	ble	11ad4 <__assert_fail@plt+0xe6c>
   11b68:	ldr	r0, [pc, #340]	; 11cc4 <__assert_fail@plt+0x105c>
   11b6c:	ldr	r0, [pc, r0]
   11b70:	ldr	r0, [r0, #4]
   11b74:	cmp	r0, #0
   11b78:	beq	11c6c <__assert_fail@plt+0x1004>
   11b7c:	sub	r6, r1, r2
   11b80:	ldr	r1, [pc, #320]	; 11cc8 <__assert_fail@plt+0x1060>
   11b84:	mov	r2, #1
   11b88:	ldr	r1, [pc, r1]
   11b8c:	ldr	r1, [r1]
   11b90:	sub	r1, r1, #4
   11b94:	b	11bac <__assert_fail@plt+0xf44>
   11b98:	mov	r6, r3
   11b9c:	mov	r5, r4
   11ba0:	cmp	r5, r7
   11ba4:	blt	11c50 <__assert_fail@plt+0xfe8>
   11ba8:	b	11c64 <__assert_fail@plt+0xffc>
   11bac:	mov	r3, r0
   11bb0:	ldr	r0, [r0]
   11bb4:	ldr	r7, [r3, #8]
   11bb8:	ldr	r3, [r3, #12]
   11bbc:	cmp	r0, #0
   11bc0:	add	r7, r7, r6
   11bc4:	bic	r7, r7, #1
   11bc8:	add	r3, r3, r7
   11bcc:	ldrh	r7, [r3]
   11bd0:	beq	11c44 <__assert_fail@plt+0xfdc>
   11bd4:	ldr	r5, [r0, #8]
   11bd8:	mov	r4, #0
   11bdc:	rsb	r3, r5, #0
   11be0:	cmp	r6, r3
   11be4:	mov	r3, r6
   11be8:	ble	11c04 <__assert_fail@plt+0xf9c>
   11bec:	sub	r3, r6, #1
   11bf0:	add	r4, r5, r3
   11bf4:	bic	ip, r4, #1
   11bf8:	ldr	r4, [r0, #12]
   11bfc:	add	r4, r4, ip
   11c00:	ldrh	r4, [r4]
   11c04:	cmp	r5, r6
   11c08:	ble	11b98 <__assert_fail@plt+0xf30>
   11c0c:	add	r6, r6, #1
   11c10:	add	r5, r5, r6
   11c14:	bic	ip, r5, #1
   11c18:	ldr	r5, [r0, #12]
   11c1c:	add	r5, r5, ip
   11c20:	ldrh	r5, [r5]
   11c24:	add	r5, r5, #1
   11c28:	cmp	r5, r4
   11c2c:	movcs	r3, r6
   11c30:	movcc	r5, r4
   11c34:	mov	r6, r3
   11c38:	cmp	r5, r7
   11c3c:	blt	11c50 <__assert_fail@plt+0xfe8>
   11c40:	b	11c64 <__assert_fail@plt+0xffc>
   11c44:	mov	r5, #0
   11c48:	cmp	r5, r7
   11c4c:	bge	11c64 <__assert_fail@plt+0xffc>
   11c50:	ldr	r3, [r1, r7, lsl #2]
   11c54:	sub	r7, r7, #1
   11c58:	cmp	r7, r5
   11c5c:	strb	r2, [r3, #4]
   11c60:	bgt	11c50 <__assert_fail@plt+0xfe8>
   11c64:	cmp	r0, #0
   11c68:	bne	11bac <__assert_fail@plt+0xf44>
   11c6c:	bl	1182c <__assert_fail@plt+0xbc4>
   11c70:	ldr	r0, [sp, #4]
   11c74:	mov	r1, #0
   11c78:	cmp	r0, #3
   11c7c:	ldr	r0, [sp]
   11c80:	ldreq	r1, [r0, #8]
   11c84:	ldr	r0, [pc, #64]	; 11ccc <__assert_fail@plt+0x1064>
   11c88:	ldr	r0, [pc, r0]
   11c8c:	bl	13030 <error@@Base+0x758>
   11c90:	bl	12894 <__assert_fail@plt+0x1c2c>
   11c94:	ldr	r0, [pc, #52]	; 11cd0 <__assert_fail@plt+0x1068>
   11c98:	add	r0, pc, r0
   11c9c:	bl	128d8 <error@@Base>
   11ca0:	andeq	r7, r1, r8, ror r6
   11ca4:	andeq	r2, r0, r6, lsl lr
   11ca8:	andeq	r7, r1, r8, lsr r6
   11cac:	andeq	r7, r1, r8, lsl r6
   11cb0:	andeq	r7, r1, r8, asr #12
   11cb4:	andeq	r7, r1, r4, asr #12
   11cb8:	andeq	r7, r1, r0, asr #12
   11cbc:	andeq	r7, r1, ip, ror #11
   11cc0:	andeq	r7, r1, r4, asr r5
   11cc4:	andeq	r7, r1, r0, asr r5
   11cc8:	andeq	r7, r1, ip, asr r5
   11ccc:	andeq	r7, r1, r8, asr #8
   11cd0:	andeq	r2, r0, pc, lsl #24
   11cd4:	vmov.i32	q8, #0	; 0x00000000
   11cd8:	vst1.32	{d16-d17}, [r0]
   11cdc:	bx	lr
   11ce0:	push	{r4, r5, fp, lr}
   11ce4:	add	fp, sp, #8
   11ce8:	mov	r4, r0
   11cec:	ldr	r0, [r0]
   11cf0:	mov	r5, #0
   11cf4:	str	r5, [r1]
   11cf8:	cmp	r0, #0
   11cfc:	str	r0, [r1, #4]
   11d00:	str	r1, [r4]
   11d04:	addeq	r0, r4, #4
   11d08:	str	r1, [r0]
   11d0c:	ldr	r0, [r4, #8]
   11d10:	cmp	r0, #0
   11d14:	beq	11d20 <__assert_fail@plt+0x10b8>
   11d18:	bl	10af4 <free@plt>
   11d1c:	str	r5, [r4, #8]
   11d20:	ldr	r0, [r4, #12]
   11d24:	add	r0, r0, #1
   11d28:	str	r0, [r4, #12]
   11d2c:	pop	{r4, r5, fp, pc}
   11d30:	push	{r4, r5, fp, lr}
   11d34:	add	fp, sp, #8
   11d38:	mov	r4, r0
   11d3c:	ldr	r0, [r0, #4]
   11d40:	mov	r5, #0
   11d44:	mov	r2, r4
   11d48:	cmp	r0, #0
   11d4c:	stm	r1, {r0, r5}
   11d50:	addne	r2, r0, #4
   11d54:	str	r1, [r2]
   11d58:	str	r1, [r4, #4]
   11d5c:	ldr	r0, [r4, #8]
   11d60:	cmp	r0, #0
   11d64:	beq	11d70 <__assert_fail@plt+0x1108>
   11d68:	bl	10af4 <free@plt>
   11d6c:	str	r5, [r4, #8]
   11d70:	ldr	r0, [r4, #12]
   11d74:	add	r0, r0, #1
   11d78:	str	r0, [r4, #12]
   11d7c:	pop	{r4, r5, fp, pc}
   11d80:	push	{r4, sl, fp, lr}
   11d84:	add	fp, sp, #8
   11d88:	mov	r4, r0
   11d8c:	ldr	r0, [r2]
   11d90:	mov	r3, r4
   11d94:	cmp	r0, #0
   11d98:	stm	r1, {r0, r2}
   11d9c:	addne	r3, r0, #4
   11da0:	str	r1, [r3]
   11da4:	str	r1, [r2]
   11da8:	ldr	r0, [r4, #8]
   11dac:	cmp	r0, #0
   11db0:	beq	11dc0 <__assert_fail@plt+0x1158>
   11db4:	bl	10af4 <free@plt>
   11db8:	mov	r0, #0
   11dbc:	str	r0, [r4, #8]
   11dc0:	ldr	r0, [r4, #12]
   11dc4:	add	r0, r0, #1
   11dc8:	str	r0, [r4, #12]
   11dcc:	pop	{r4, sl, fp, pc}
   11dd0:	push	{r4, sl, fp, lr}
   11dd4:	add	fp, sp, #8
   11dd8:	mov	r4, r0
   11ddc:	mov	r0, r1
   11de0:	cmp	r1, #0
   11de4:	ldr	r3, [r0, #4]!
   11de8:	moveq	r0, r4
   11dec:	cmp	r3, #0
   11df0:	stm	r2, {r1, r3}
   11df4:	addeq	r3, r4, #4
   11df8:	str	r2, [r0]
   11dfc:	str	r2, [r3]
   11e00:	ldr	r0, [r4, #8]
   11e04:	cmp	r0, #0
   11e08:	beq	11e18 <__assert_fail@plt+0x11b0>
   11e0c:	bl	10af4 <free@plt>
   11e10:	mov	r0, #0
   11e14:	str	r0, [r4, #8]
   11e18:	ldr	r0, [r4, #12]
   11e1c:	add	r0, r0, #1
   11e20:	str	r0, [r4, #12]
   11e24:	pop	{r4, sl, fp, pc}
   11e28:	push	{r4, r5, fp, lr}
   11e2c:	add	fp, sp, #8
   11e30:	mov	r4, r0
   11e34:	ldm	r1, {r0, r2}
   11e38:	mov	r5, #0
   11e3c:	cmp	r0, #0
   11e40:	streq	r2, [r4]
   11e44:	strne	r2, [r0, #4]
   11e48:	ldrne	r2, [r1, #4]
   11e4c:	cmp	r2, #0
   11e50:	addeq	r2, r4, #4
   11e54:	str	r0, [r2]
   11e58:	str	r5, [r1]
   11e5c:	str	r5, [r1, #4]
   11e60:	ldr	r0, [r4, #8]
   11e64:	cmp	r0, #0
   11e68:	beq	11e74 <__assert_fail@plt+0x120c>
   11e6c:	bl	10af4 <free@plt>
   11e70:	str	r5, [r4, #8]
   11e74:	ldr	r0, [r4, #12]
   11e78:	sub	r0, r0, #1
   11e7c:	str	r0, [r4, #12]
   11e80:	pop	{r4, r5, fp, pc}
   11e84:	push	{r4, sl, fp, lr}
   11e88:	add	fp, sp, #8
   11e8c:	mov	r4, r0
   11e90:	ldr	r0, [r0, #8]
   11e94:	cmp	r0, #0
   11e98:	beq	11ea0 <__assert_fail@plt+0x1238>
   11e9c:	pop	{r4, sl, fp, pc}
   11ea0:	ldr	r0, [r4, #12]
   11ea4:	cmp	r0, #0
   11ea8:	beq	11e9c <__assert_fail@plt+0x1234>
   11eac:	mov	r1, #4
   11eb0:	bl	12418 <__assert_fail@plt+0x17b0>
   11eb4:	str	r0, [r4, #8]
   11eb8:	ldr	r1, [r4]
   11ebc:	cmp	r1, #0
   11ec0:	beq	11e9c <__assert_fail@plt+0x1234>
   11ec4:	str	r1, [r0]
   11ec8:	ldr	r0, [r1, #4]
   11ecc:	cmp	r0, #0
   11ed0:	popeq	{r4, sl, fp, pc}
   11ed4:	mov	r1, #4
   11ed8:	ldr	r2, [r4, #8]
   11edc:	str	r0, [r2, r1]
   11ee0:	add	r1, r1, #4
   11ee4:	ldr	r0, [r0, #4]
   11ee8:	cmp	r0, #0
   11eec:	bne	11ed8 <__assert_fail@plt+0x1270>
   11ef0:	b	11e9c <__assert_fail@plt+0x1234>
   11ef4:	push	{r4, r5, r6, r7, fp, lr}
   11ef8:	add	fp, sp, #16
   11efc:	ldr	r6, [r0]
   11f00:	cmp	r6, #0
   11f04:	popeq	{r4, r5, r6, r7, fp, pc}
   11f08:	mov	r4, r1
   11f0c:	mov	r5, r0
   11f10:	mov	r7, #0
   11f14:	ldm	r6, {r0, r1}
   11f18:	cmp	r0, #0
   11f1c:	streq	r1, [r5]
   11f20:	strne	r1, [r0, #4]
   11f24:	ldrne	r1, [r6, #4]
   11f28:	cmp	r1, #0
   11f2c:	addeq	r1, r5, #4
   11f30:	str	r0, [r1]
   11f34:	str	r7, [r6]
   11f38:	str	r7, [r6, #4]
   11f3c:	ldr	r0, [r5, #8]
   11f40:	cmp	r0, #0
   11f44:	beq	11f50 <__assert_fail@plt+0x12e8>
   11f48:	bl	10af4 <free@plt>
   11f4c:	str	r7, [r5, #8]
   11f50:	ldr	r0, [r5, #12]
   11f54:	sub	r0, r0, #1
   11f58:	str	r0, [r5, #12]
   11f5c:	mov	r0, r6
   11f60:	blx	r4
   11f64:	ldr	r6, [r5]
   11f68:	cmp	r6, #0
   11f6c:	bne	11f14 <__assert_fail@plt+0x12ac>
   11f70:	pop	{r4, r5, r6, r7, fp, pc}
   11f74:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11f78:	add	fp, sp, #24
   11f7c:	ldr	r8, [pc, #328]	; 120cc <__assert_fail@plt+0x1464>
   11f80:	mov	r1, r0
   11f84:	add	r8, pc, r8
   11f88:	ldrb	r0, [r8]
   11f8c:	cmp	r0, #1
   11f90:	beq	120c0 <__assert_fail@plt+0x1458>
   11f94:	cmp	r1, #0
   11f98:	beq	12048 <__assert_fail@plt+0x13e0>
   11f9c:	ldr	r4, [pc, #312]	; 120dc <__assert_fail@plt+0x1474>
   11fa0:	ldr	r2, [pc, #312]	; 120e0 <__assert_fail@plt+0x1478>
   11fa4:	add	r4, pc, r4
   11fa8:	add	r2, pc, r2
   11fac:	mov	r0, r4
   11fb0:	bl	14010 <error@@Base+0x1738>
   11fb4:	ldr	r0, [pc, #296]	; 120e4 <__assert_fail@plt+0x147c>
   11fb8:	mov	r1, r4
   11fbc:	add	r0, pc, r0
   11fc0:	bl	137b8 <error@@Base+0xee0>
   11fc4:	ldr	r1, [pc, #284]	; 120e8 <__assert_fail@plt+0x1480>
   11fc8:	mov	r0, r4
   11fcc:	ldr	r1, [pc, r1]
   11fd0:	bl	11ef4 <__assert_fail@plt+0x128c>
   11fd4:	ldr	r7, [pc, #272]	; 120ec <__assert_fail@plt+0x1484>
   11fd8:	ldr	r7, [pc, r7]
   11fdc:	cmp	r7, #0
   11fe0:	beq	120b4 <__assert_fail@plt+0x144c>
   11fe4:	ldr	r4, [pc, #260]	; 120f0 <__assert_fail@plt+0x1488>
   11fe8:	ldr	r5, [pc, #260]	; 120f4 <__assert_fail@plt+0x148c>
   11fec:	add	r4, pc, r4
   11ff0:	add	r5, pc, r5
   11ff4:	ldr	r6, [r7, #8]
   11ff8:	mov	r0, r4
   11ffc:	mov	r1, r6
   12000:	bl	1218c <__assert_fail@plt+0x1524>
   12004:	cmp	r0, #0
   12008:	beq	1201c <__assert_fail@plt+0x13b4>
   1200c:	mov	r0, r5
   12010:	mov	r1, r6
   12014:	bl	12980 <error@@Base+0xa8>
   12018:	b	12038 <__assert_fail@plt+0x13d0>
   1201c:	mov	r0, #1
   12020:	mov	r1, #12
   12024:	bl	12418 <__assert_fail@plt+0x17b0>
   12028:	mov	r1, r0
   1202c:	str	r6, [r0, #8]
   12030:	mov	r0, r4
   12034:	bl	1221c <__assert_fail@plt+0x15b4>
   12038:	ldr	r7, [r7, #4]
   1203c:	cmp	r7, #0
   12040:	bne	11ff4 <__assert_fail@plt+0x138c>
   12044:	b	120b4 <__assert_fail@plt+0x144c>
   12048:	ldr	r5, [pc, #128]	; 120d0 <__assert_fail@plt+0x1468>
   1204c:	ldr	r4, [pc, #128]	; 120d4 <__assert_fail@plt+0x146c>
   12050:	ldr	r9, [pc, #128]	; 120d8 <__assert_fail@plt+0x1470>
   12054:	mov	r7, #0
   12058:	add	r5, pc, r5
   1205c:	add	r4, pc, r4
   12060:	add	r9, pc, r9
   12064:	ldr	r6, [r5, r7, lsl #2]
   12068:	mov	r0, r4
   1206c:	mov	r1, r6
   12070:	bl	1218c <__assert_fail@plt+0x1524>
   12074:	cmp	r0, #0
   12078:	beq	1208c <__assert_fail@plt+0x1424>
   1207c:	mov	r0, r9
   12080:	mov	r1, r6
   12084:	bl	12980 <error@@Base+0xa8>
   12088:	b	120a8 <__assert_fail@plt+0x1440>
   1208c:	mov	r0, #1
   12090:	mov	r1, #12
   12094:	bl	12418 <__assert_fail@plt+0x17b0>
   12098:	mov	r1, r0
   1209c:	str	r6, [r0, #8]
   120a0:	mov	r0, r4
   120a4:	bl	1221c <__assert_fail@plt+0x15b4>
   120a8:	add	r7, r7, #1
   120ac:	cmp	r7, #110	; 0x6e
   120b0:	bne	12064 <__assert_fail@plt+0x13fc>
   120b4:	mov	r0, #1
   120b8:	strb	r0, [r8]
   120bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   120c0:	ldr	r0, [pc, #48]	; 120f8 <__assert_fail@plt+0x1490>
   120c4:	add	r0, pc, r0
   120c8:	bl	128d8 <error@@Base>
   120cc:			; <UNDEFINED> instruction: 0x000171bc
   120d0:	andeq	r6, r1, r8, ror #25
   120d4:	andeq	r7, r1, r8, lsl #2
   120d8:	muleq	r0, r7, r8
   120dc:	andeq	r7, r1, r0, lsr #3
   120e0:	andeq	r7, r1, r0, lsl #3
   120e4:	muleq	r1, r8, r1
   120e8:	ldrdeq	r7, [r1], -r0
   120ec:	andeq	r7, r1, ip, ror r1
   120f0:	andeq	r7, r1, r8, ror r1
   120f4:	andeq	r2, r0, r7, lsl #18
   120f8:	strdeq	r2, [r0], -fp
   120fc:	push	{fp, lr}
   12100:	mov	fp, sp
   12104:	mov	r1, r0
   12108:	ldr	r0, [pc, #48]	; 12140 <__assert_fail@plt+0x14d8>
   1210c:	add	r0, pc, r0
   12110:	ldrb	r0, [r0]
   12114:	cmp	r0, #0
   12118:	beq	12134 <__assert_fail@plt+0x14cc>
   1211c:	ldr	r0, [pc, #32]	; 12144 <__assert_fail@plt+0x14dc>
   12120:	add	r0, pc, r0
   12124:	bl	1218c <__assert_fail@plt+0x1524>
   12128:	cmp	r0, #0
   1212c:	movwne	r0, #1
   12130:	pop	{fp, pc}
   12134:	ldr	r0, [pc, #12]	; 12148 <__assert_fail@plt+0x14e0>
   12138:	add	r0, pc, r0
   1213c:	bl	128d8 <error@@Base>
   12140:	andeq	r7, r1, r4, lsr r0
   12144:	andeq	r7, r1, r4, asr #32
   12148:	andeq	r2, r0, r5, lsr #15
   1214c:	push	{r4, r5, r6, sl, fp, lr}
   12150:	add	fp, sp, #16
   12154:	mov	r4, r0
   12158:	movw	r6, #503	; 0x1f7
   1215c:	mov	r5, r0
   12160:	mov	r0, r5
   12164:	bl	11cd4 <__assert_fail@plt+0x106c>
   12168:	subs	r6, r6, #1
   1216c:	add	r5, r5, #16
   12170:	bne	12160 <__assert_fail@plt+0x14f8>
   12174:	movw	r0, #8052	; 0x1f74
   12178:	mov	r1, #0
   1217c:	str	r1, [r4, r0]
   12180:	movw	r0, #8048	; 0x1f70
   12184:	str	r1, [r4, r0]
   12188:	pop	{r4, r5, r6, sl, fp, pc}
   1218c:	push	{r4, r5, r6, sl, fp, lr}
   12190:	add	fp, sp, #16
   12194:	mov	r5, r1
   12198:	ldrb	r1, [r1]
   1219c:	mov	r4, #0
   121a0:	mov	r2, #0
   121a4:	cmp	r1, #0
   121a8:	beq	121dc <__assert_fail@plt+0x1574>
   121ac:	add	r3, r5, #1
   121b0:	mov	r2, #0
   121b4:	uxtab	r2, r2, r1
   121b8:	ldrb	r1, [r3], #1
   121bc:	cmp	r1, #0
   121c0:	bne	121b4 <__assert_fail@plt+0x154c>
   121c4:	movw	r1, #20065	; 0x4e61
   121c8:	movt	r1, #33354	; 0x824a
   121cc:	umull	r1, r3, r2, r1
   121d0:	lsr	r1, r3, #8
   121d4:	movw	r3, #503	; 0x1f7
   121d8:	mls	r2, r1, r3, r2
   121dc:	ldr	r6, [r0, r2, lsl #4]
   121e0:	cmp	r6, #0
   121e4:	bne	121fc <__assert_fail@plt+0x1594>
   121e8:	mov	r0, r4
   121ec:	pop	{r4, r5, r6, sl, fp, pc}
   121f0:	ldr	r6, [r6, #4]
   121f4:	cmp	r6, #0
   121f8:	beq	121e8 <__assert_fail@plt+0x1580>
   121fc:	ldr	r1, [r6, #8]
   12200:	mov	r0, r5
   12204:	bl	10ad0 <strcmp@plt>
   12208:	cmp	r0, #0
   1220c:	bne	121f0 <__assert_fail@plt+0x1588>
   12210:	mov	r4, r6
   12214:	mov	r0, r4
   12218:	pop	{r4, r5, r6, sl, fp, pc}
   1221c:	push	{r4, r5, fp, lr}
   12220:	add	fp, sp, #8
   12224:	mov	r4, r0
   12228:	ldr	r0, [r1, #8]
   1222c:	ldrb	r2, [r0]
   12230:	cmp	r2, #0
   12234:	beq	1226c <__assert_fail@plt+0x1604>
   12238:	add	r3, r0, #1
   1223c:	mov	r0, #0
   12240:	uxtab	r0, r0, r2
   12244:	ldrb	r2, [r3], #1
   12248:	cmp	r2, #0
   1224c:	bne	12240 <__assert_fail@plt+0x15d8>
   12250:	movw	r2, #20065	; 0x4e61
   12254:	movt	r2, #33354	; 0x824a
   12258:	umull	r2, r3, r0, r2
   1225c:	lsr	r2, r3, #8
   12260:	movw	r3, #503	; 0x1f7
   12264:	mls	r0, r2, r3, r0
   12268:	b	12270 <__assert_fail@plt+0x1608>
   1226c:	mov	r0, #0
   12270:	add	r0, r4, r0, lsl #4
   12274:	bl	11ce0 <__assert_fail@plt+0x1078>
   12278:	movw	r0, #8048	; 0x1f70
   1227c:	mov	r5, r4
   12280:	ldr	r0, [r5, r0]!
   12284:	cmp	r0, #0
   12288:	beq	12298 <__assert_fail@plt+0x1630>
   1228c:	bl	10af4 <free@plt>
   12290:	mov	r0, #0
   12294:	str	r0, [r5]
   12298:	movw	r0, #8052	; 0x1f74
   1229c:	ldr	r0, [r4, r0]!
   122a0:	add	r0, r0, #1
   122a4:	str	r0, [r4]
   122a8:	pop	{r4, r5, fp, pc}
   122ac:	push	{r4, r5, fp, lr}
   122b0:	add	fp, sp, #8
   122b4:	mov	r4, r0
   122b8:	ldr	r0, [r1, #8]
   122bc:	ldrb	r2, [r0]
   122c0:	cmp	r2, #0
   122c4:	beq	122fc <__assert_fail@plt+0x1694>
   122c8:	add	r3, r0, #1
   122cc:	mov	r0, #0
   122d0:	uxtab	r0, r0, r2
   122d4:	ldrb	r2, [r3], #1
   122d8:	cmp	r2, #0
   122dc:	bne	122d0 <__assert_fail@plt+0x1668>
   122e0:	movw	r2, #20065	; 0x4e61
   122e4:	movt	r2, #33354	; 0x824a
   122e8:	umull	r2, r3, r0, r2
   122ec:	lsr	r2, r3, #8
   122f0:	movw	r3, #503	; 0x1f7
   122f4:	mls	r0, r2, r3, r0
   122f8:	b	12300 <__assert_fail@plt+0x1698>
   122fc:	mov	r0, #0
   12300:	add	r0, r4, r0, lsl #4
   12304:	bl	11e28 <__assert_fail@plt+0x11c0>
   12308:	movw	r0, #8048	; 0x1f70
   1230c:	mov	r5, r4
   12310:	ldr	r0, [r5, r0]!
   12314:	cmp	r0, #0
   12318:	beq	12328 <__assert_fail@plt+0x16c0>
   1231c:	bl	10af4 <free@plt>
   12320:	mov	r0, #0
   12324:	str	r0, [r5]
   12328:	movw	r0, #8052	; 0x1f74
   1232c:	ldr	r0, [r4, r0]!
   12330:	sub	r0, r0, #1
   12334:	str	r0, [r4]
   12338:	pop	{r4, r5, fp, pc}
   1233c:	push	{r4, r5, fp, lr}
   12340:	add	fp, sp, #8
   12344:	mov	r4, r0
   12348:	movw	r0, #8048	; 0x1f70
   1234c:	mov	r5, r4
   12350:	ldr	r0, [r5, r0]!
   12354:	cmp	r0, #0
   12358:	bne	123b4 <__assert_fail@plt+0x174c>
   1235c:	movw	r0, #8052	; 0x1f74
   12360:	ldr	r0, [r4, r0]
   12364:	cmp	r0, #0
   12368:	popeq	{r4, r5, fp, pc}
   1236c:	mov	r1, #4
   12370:	bl	12418 <__assert_fail@plt+0x17b0>
   12374:	str	r0, [r5]
   12378:	mov	r0, #0
   1237c:	movw	ip, #503	; 0x1f7
   12380:	mov	r2, #0
   12384:	ldr	r3, [r4, r2, lsl #4]
   12388:	cmp	r3, #0
   1238c:	beq	123a8 <__assert_fail@plt+0x1740>
   12390:	ldr	r1, [r5]
   12394:	str	r3, [r1, r0, lsl #2]
   12398:	add	r0, r0, #1
   1239c:	ldr	r3, [r3, #4]
   123a0:	cmp	r3, #0
   123a4:	bne	12390 <__assert_fail@plt+0x1728>
   123a8:	add	r2, r2, #1
   123ac:	cmp	r2, ip
   123b0:	bne	12384 <__assert_fail@plt+0x171c>
   123b4:	pop	{r4, r5, fp, pc}
   123b8:	push	{r4, r5, r6, r7, fp, lr}
   123bc:	add	fp, sp, #16
   123c0:	mov	r5, r1
   123c4:	mov	r4, r0
   123c8:	movw	r7, #503	; 0x1f7
   123cc:	mov	r6, r0
   123d0:	mov	r0, r6
   123d4:	mov	r1, r5
   123d8:	bl	11ef4 <__assert_fail@plt+0x128c>
   123dc:	subs	r7, r7, #1
   123e0:	add	r6, r6, #16
   123e4:	bne	123d0 <__assert_fail@plt+0x1768>
   123e8:	movw	r0, #8048	; 0x1f70
   123ec:	mov	r5, r4
   123f0:	ldr	r0, [r5, r0]!
   123f4:	cmp	r0, #0
   123f8:	beq	12408 <__assert_fail@plt+0x17a0>
   123fc:	bl	10af4 <free@plt>
   12400:	mov	r0, #0
   12404:	str	r0, [r5]
   12408:	movw	r0, #8052	; 0x1f74
   1240c:	mov	r1, #0
   12410:	str	r1, [r4, r0]
   12414:	pop	{r4, r5, r6, r7, fp, pc}
   12418:	push	{fp, lr}
   1241c:	mov	fp, sp
   12420:	bl	10ac4 <calloc@plt>
   12424:	cmp	r0, #0
   12428:	popne	{fp, pc}
   1242c:	ldr	r0, [pc, #4]	; 12438 <__assert_fail@plt+0x17d0>
   12430:	add	r0, pc, r0
   12434:	bl	128d8 <error@@Base>
   12438:	andeq	r2, r0, fp, ror r6
   1243c:	push	{r4, r5, r6, sl, fp, lr}
   12440:	add	fp, sp, #16
   12444:	ldrb	r3, [r0]
   12448:	ldrb	ip, [r1]
   1244c:	mov	r2, r0
   12450:	mov	r0, #0
   12454:	cmp	r3, #0
   12458:	beq	12490 <__assert_fail@plt+0x1828>
   1245c:	add	r6, r2, #1
   12460:	add	lr, r1, #1
   12464:	mov	r2, #0
   12468:	uxtb	r4, ip
   1246c:	uxtb	r5, r3
   12470:	cmp	r5, r4
   12474:	bne	124a0 <__assert_fail@plt+0x1838>
   12478:	ldrb	r3, [r6, r2]
   1247c:	ldrb	ip, [lr, r2]
   12480:	add	r2, r2, #1
   12484:	cmp	r3, #0
   12488:	bne	12468 <__assert_fail@plt+0x1800>
   1248c:	b	12494 <__assert_fail@plt+0x182c>
   12490:	mov	r2, #0
   12494:	cmp	ip, #0
   12498:	popeq	{r4, r5, r6, sl, fp, pc}
   1249c:	mov	r3, #0
   124a0:	ldrb	r1, [r1, r2]
   124a4:	uxtb	r2, r3
   124a8:	mov	r0, #1
   124ac:	cmp	r2, r1
   124b0:	mvncc	r0, #0
   124b4:	pop	{r4, r5, r6, sl, fp, pc}
   124b8:	push	{r4, r5, fp, lr}
   124bc:	add	fp, sp, #8
   124c0:	mov	r5, r1
   124c4:	cmp	r0, #0
   124c8:	beq	124fc <__assert_fail@plt+0x1894>
   124cc:	mov	r1, r5
   124d0:	mov	r4, r0
   124d4:	bl	10ae8 <fopen@plt>
   124d8:	cmp	r0, #0
   124dc:	popne	{r4, r5, fp, pc}
   124e0:	ldrb	r0, [r5]
   124e4:	cmp	r0, #119	; 0x77
   124e8:	bne	12520 <__assert_fail@plt+0x18b8>
   124ec:	ldr	r0, [pc, #72]	; 1253c <__assert_fail@plt+0x18d4>
   124f0:	mov	r1, r4
   124f4:	add	r0, pc, r0
   124f8:	bl	12928 <error@@Base+0x50>
   124fc:	ldrb	r0, [r5]
   12500:	ldr	r1, [pc, #40]	; 12530 <__assert_fail@plt+0x18c8>
   12504:	ldr	r1, [pc, r1]
   12508:	ldr	r2, [pc, #36]	; 12534 <__assert_fail@plt+0x18cc>
   1250c:	cmp	r0, #114	; 0x72
   12510:	ldr	r2, [pc, r2]
   12514:	moveq	r2, r1
   12518:	ldr	r0, [r2]
   1251c:	pop	{r4, r5, fp, pc}
   12520:	ldr	r0, [pc, #16]	; 12538 <__assert_fail@plt+0x18d0>
   12524:	mov	r1, r4
   12528:	add	r0, pc, r0
   1252c:	bl	12928 <error@@Base+0x50>
   12530:	ldrdeq	r6, [r1], -r8
   12534:	ldrdeq	r6, [r1], -ip
   12538:			; <UNDEFINED> instruction: 0x000025b3
   1253c:	ldrdeq	r2, [r0], -r1
   12540:	ldr	r1, [pc, #32]	; 12568 <__assert_fail@plt+0x1900>
   12544:	ldr	r1, [pc, r1]
   12548:	ldr	r1, [r1]
   1254c:	cmp	r1, r0
   12550:	ldrne	r1, [pc, #20]	; 1256c <__assert_fail@plt+0x1904>
   12554:	ldrne	r1, [pc, r1]
   12558:	ldrne	r1, [r1]
   1255c:	cmpne	r1, r0
   12560:	bxeq	lr
   12564:	b	10bfc <fclose@plt>
   12568:	muleq	r1, r8, fp
   1256c:	muleq	r1, r8, fp
   12570:	push	{fp, lr}
   12574:	mov	fp, sp
   12578:	sub	sp, sp, #88	; 0x58
   1257c:	mov	r1, r0
   12580:	mov	r2, sp
   12584:	mov	r0, #3
   12588:	bl	10b54 <__xstat@plt>
   1258c:	clz	r0, r0
   12590:	lsr	r0, r0, #5
   12594:	mov	sp, fp
   12598:	pop	{fp, pc}
   1259c:	push	{r4, r5, fp, lr}
   125a0:	add	fp, sp, #8
   125a4:	sub	sp, sp, #104	; 0x68
   125a8:	ldr	r0, [pc, #92]	; 1260c <__assert_fail@plt+0x19a4>
   125ac:	add	r0, pc, r0
   125b0:	ldrh	r1, [r0]
   125b4:	add	r5, r1, #1
   125b8:	strh	r5, [r0]
   125bc:	ldr	r0, [pc, #76]	; 12610 <__assert_fail@plt+0x19a8>
   125c0:	ldr	r0, [pc, r0]
   125c4:	ldr	r4, [r0]
   125c8:	bl	10bb4 <getpid@plt>
   125cc:	mov	r3, r0
   125d0:	sxth	r0, r5
   125d4:	add	r5, sp, #4
   125d8:	mov	r2, r4
   125dc:	str	r0, [sp]
   125e0:	mov	r0, r5
   125e4:	ldr	r1, [pc, #40]	; 12614 <__assert_fail@plt+0x19ac>
   125e8:	add	r1, pc, r1
   125ec:	bl	10c20 <sprintf@plt>
   125f0:	mov	r0, r5
   125f4:	bl	10b24 <strdup@plt>
   125f8:	mov	r4, r0
   125fc:	bl	10b3c <unlink@plt>
   12600:	mov	r0, r4
   12604:	sub	sp, fp, #8
   12608:	pop	{r4, r5, fp, pc}
   1260c:	andeq	r8, r1, r0, lsr fp
   12610:	andeq	r6, r1, ip, lsl #22
   12614:	andeq	r2, r0, ip, lsl r5
   12618:	push	{r4, sl, fp, lr}
   1261c:	add	fp, sp, #8
   12620:	mov	r4, r0
   12624:	bl	10bd8 <strlen@plt>
   12628:	sub	r0, r0, #1
   1262c:	sxth	r0, r0
   12630:	cmp	r0, #0
   12634:	blt	12644 <__assert_fail@plt+0x19dc>
   12638:	ldrb	r1, [r4, r0]
   1263c:	cmp	r1, #47	; 0x2f
   12640:	bne	12628 <__assert_fail@plt+0x19c0>
   12644:	add	r0, r4, r0
   12648:	add	r0, r0, #1
   1264c:	pop	{r4, sl, fp, pc}
   12650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12654:	add	fp, sp, #28
   12658:	sub	sp, sp, #12
   1265c:	str	r2, [sp]
   12660:	stmib	sp, {r0, r1}
   12664:	mov	r6, r3
   12668:	ldr	r4, [r1]
   1266c:	mov	r0, r4
   12670:	bl	10bd8 <strlen@plt>
   12674:	sub	r0, r0, #1
   12678:	sxth	r0, r0
   1267c:	cmp	r0, #0
   12680:	blt	12690 <__assert_fail@plt+0x1a28>
   12684:	ldrb	r1, [r4, r0]
   12688:	cmp	r1, #47	; 0x2f
   1268c:	bne	12674 <__assert_fail@plt+0x1a0c>
   12690:	ldr	r1, [pc, #484]	; 1287c <__assert_fail@plt+0x1c14>
   12694:	add	r0, r4, r0
   12698:	add	r0, r0, #1
   1269c:	ldr	r1, [pc, r1]
   126a0:	str	r0, [r1]
   126a4:	mov	r0, #2
   126a8:	ldr	r4, [pc, #464]	; 12880 <__assert_fail@plt+0x1c18>
   126ac:	add	r4, pc, r4
   126b0:	mov	r1, r4
   126b4:	bl	10b9c <__sysv_signal@plt>
   126b8:	mov	r0, #15
   126bc:	mov	r1, r4
   126c0:	bl	10b9c <__sysv_signal@plt>
   126c4:	ldr	r0, [sp, #4]
   126c8:	ldr	r5, [r0]
   126cc:	cmp	r5, #1
   126d0:	bne	126e8 <__assert_fail@plt+0x1a80>
   126d4:	ldr	r0, [pc, #424]	; 12884 <__assert_fail@plt+0x1c1c>
   126d8:	ldr	r0, [pc, r0]
   126dc:	ldrb	r0, [r0]
   126e0:	cmp	r0, #0
   126e4:	bne	12864 <__assert_fail@plt+0x1bfc>
   126e8:	ldr	ip, [sp, #8]
   126ec:	mov	r8, #0
   126f0:	cmp	r5, #2
   126f4:	blt	12840 <__assert_fail@plt+0x1bd8>
   126f8:	mov	r8, #0
   126fc:	mov	r7, #1
   12700:	mov	r9, #1
   12704:	ldr	r4, [ip, r7, lsl #2]
   12708:	ldrb	r0, [r4]
   1270c:	cmp	r0, #45	; 0x2d
   12710:	bne	127e8 <__assert_fail@plt+0x1b80>
   12714:	ldrb	sl, [r4, #1]
   12718:	cmp	sl, #0
   1271c:	beq	127e8 <__assert_fail@plt+0x1b80>
   12720:	mov	r0, r4
   12724:	bl	10bd8 <strlen@plt>
   12728:	mov	r2, r0
   1272c:	ldr	r0, [pc, #340]	; 12888 <__assert_fail@plt+0x1c20>
   12730:	mov	r1, r4
   12734:	add	r0, pc, r0
   12738:	bl	10c44 <strncmp@plt>
   1273c:	cmp	r0, #0
   12740:	beq	12864 <__assert_fail@plt+0x1bfc>
   12744:	ldr	ip, [sp, #8]
   12748:	add	r1, r7, #1
   1274c:	mov	r0, #0
   12750:	cmp	r1, r5
   12754:	ldrlt	r0, [ip, r1, lsl #2]
   12758:	cmp	r6, #0
   1275c:	ldrbne	r2, [r6]
   12760:	cmpne	r2, #0
   12764:	beq	12854 <__assert_fail@plt+0x1bec>
   12768:	mov	r1, #0
   1276c:	cmp	sl, r2
   12770:	beq	12798 <__assert_fail@plt+0x1b30>
   12774:	mov	r2, #1
   12778:	sxth	r1, r2
   1277c:	add	r3, r1, r1, lsl #1
   12780:	ldrb	r3, [r6, r3, lsl #2]
   12784:	cmp	r3, #0
   12788:	beq	12854 <__assert_fail@plt+0x1bec>
   1278c:	add	r2, r2, #1
   12790:	cmp	sl, r3
   12794:	bne	12778 <__assert_fail@plt+0x1b10>
   12798:	add	r1, r1, r1, lsl #1
   1279c:	add	r3, r6, r1, lsl #2
   127a0:	ldr	r1, [r3, #4]
   127a4:	cmp	r1, #0
   127a8:	beq	12808 <__assert_fail@plt+0x1ba0>
   127ac:	mov	r2, r4
   127b0:	cmp	r0, #0
   127b4:	ldrb	r7, [r2, #2]!
   127b8:	cmpeq	r7, #0
   127bc:	beq	12808 <__assert_fail@plt+0x1ba0>
   127c0:	ldr	r3, [r1]
   127c4:	cmp	r3, #0
   127c8:	bne	1286c <__assert_fail@plt+0x1c04>
   127cc:	cmp	r7, #0
   127d0:	movne	r0, r2
   127d4:	str	r0, [r1]
   127d8:	ldrb	r0, [r2]
   127dc:	cmp	r0, #0
   127e0:	addeq	r9, r9, #1
   127e4:	b	127f4 <__assert_fail@plt+0x1b8c>
   127e8:	sxth	r0, r8
   127ec:	add	r8, r8, #1
   127f0:	str	r4, [ip, r0, lsl #2]
   127f4:	add	r9, r9, #1
   127f8:	sxth	r7, r9
   127fc:	cmp	r5, r7
   12800:	bgt	12704 <__assert_fail@plt+0x1a9c>
   12804:	b	12840 <__assert_fail@plt+0x1bd8>
   12808:	ldr	r0, [r3, #8]
   1280c:	cmp	r0, #0
   12810:	beq	12854 <__assert_fail@plt+0x1bec>
   12814:	ldrb	r1, [r4, #2]
   12818:	cmp	r1, #0
   1281c:	bne	12854 <__assert_fail@plt+0x1bec>
   12820:	ldrb	r1, [r0]
   12824:	cmp	r1, #0
   12828:	bne	1286c <__assert_fail@plt+0x1c04>
   1282c:	mov	r1, #1
   12830:	strb	r1, [r0]
   12834:	ldr	r0, [sp, #4]
   12838:	ldr	r5, [r0]
   1283c:	b	127f4 <__assert_fail@plt+0x1b8c>
   12840:	ldr	r1, [sp, #4]
   12844:	sxth	r0, r8
   12848:	str	r0, [r1]
   1284c:	sub	sp, fp, #28
   12850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12854:	ldr	r0, [pc, #52]	; 12890 <__assert_fail@plt+0x1c28>
   12858:	mov	r1, r4
   1285c:	add	r0, pc, r0
   12860:	bl	12928 <error@@Base+0x50>
   12864:	ldr	r0, [sp]
   12868:	bl	12a04 <error@@Base+0x12c>
   1286c:	ldr	r0, [pc, #24]	; 1288c <__assert_fail@plt+0x1c24>
   12870:	mov	r1, r4
   12874:	add	r0, pc, r0
   12878:	bl	12928 <error@@Base+0x50>
   1287c:	andeq	r6, r1, r0, lsr sl
   12880:	andeq	r0, r0, r8, lsl r3
   12884:	andeq	r6, r1, r0, asr #19
   12888:	andeq	r2, r0, sp, ror #7
   1288c:	ldrdeq	r2, [r0], -r1
   12890:	ldrdeq	r2, [r0], -sl
   12894:	push	{fp, lr}
   12898:	mov	fp, sp
   1289c:	mov	r0, #0
   128a0:	bl	128a4 <__assert_fail@plt+0x1c3c>
   128a4:	push	{fp, lr}
   128a8:	mov	fp, sp
   128ac:	mov	r4, r0
   128b0:	ldr	r0, [pc, #28]	; 128d4 <__assert_fail@plt+0x1c6c>
   128b4:	ldr	r0, [pc, r0]
   128b8:	ldr	r0, [r0]
   128bc:	cmp	r0, #0
   128c0:	beq	128c8 <__assert_fail@plt+0x1c60>
   128c4:	blx	r0
   128c8:	bl	12a64 <error@@Base+0x18c>
   128cc:	mov	r0, r4
   128d0:	bl	10bc0 <exit@plt>
   128d4:	andeq	r6, r1, r0, lsr #16

000128d8 <error@@Base>:
   128d8:	push	{fp, lr}
   128dc:	mov	fp, sp
   128e0:	mov	r3, r0
   128e4:	ldr	r0, [pc, #44]	; 12918 <error@@Base+0x40>
   128e8:	ldr	r0, [pc, r0]
   128ec:	ldr	r2, [r0]
   128f0:	ldr	r0, [pc, #36]	; 1291c <error@@Base+0x44>
   128f4:	ldr	r0, [pc, r0]
   128f8:	ldr	r0, [r0]
   128fc:	ldr	r1, [pc, #28]	; 12920 <error@@Base+0x48>
   12900:	add	r1, pc, r1
   12904:	bl	10be4 <fprintf@plt>
   12908:	ldr	r0, [pc, #20]	; 12924 <error@@Base+0x4c>
   1290c:	ldr	r0, [pc, r0]
   12910:	ldr	r0, [r0]
   12914:	bl	128a4 <__assert_fail@plt+0x1c3c>
   12918:	andeq	r6, r1, r4, ror #15
   1291c:	andeq	r6, r1, r4, asr #15
   12920:	andeq	r2, r0, pc, ror #3
   12924:	andeq	r6, r1, r8, ror #15
   12928:	push	{fp, lr}
   1292c:	mov	fp, sp
   12930:	sub	sp, sp, #8
   12934:	mov	r3, r0
   12938:	ldr	r0, [pc, #48]	; 12970 <error@@Base+0x98>
   1293c:	ldr	r0, [pc, r0]
   12940:	ldr	r2, [r0]
   12944:	ldr	r0, [pc, #40]	; 12974 <error@@Base+0x9c>
   12948:	ldr	r0, [pc, r0]
   1294c:	str	r1, [sp]
   12950:	ldr	r0, [r0]
   12954:	ldr	r1, [pc, #28]	; 12978 <error@@Base+0xa0>
   12958:	add	r1, pc, r1
   1295c:	bl	10be4 <fprintf@plt>
   12960:	ldr	r0, [pc, #20]	; 1297c <error@@Base+0xa4>
   12964:	ldr	r0, [pc, r0]
   12968:	ldr	r0, [r0]
   1296c:	bl	128a4 <__assert_fail@plt+0x1c3c>
   12970:	muleq	r1, r0, r7
   12974:	andeq	r6, r1, r0, ror r7
   12978:	muleq	r0, pc, r1	; <UNPREDICTABLE>
   1297c:	muleq	r1, r0, r7
   12980:	push	{fp, lr}
   12984:	mov	fp, sp
   12988:	sub	sp, sp, #8
   1298c:	mov	r3, r0
   12990:	ldr	r0, [pc, #40]	; 129c0 <error@@Base+0xe8>
   12994:	ldr	r0, [pc, r0]
   12998:	ldr	r2, [r0]
   1299c:	ldr	r0, [pc, #32]	; 129c4 <error@@Base+0xec>
   129a0:	ldr	r0, [pc, r0]
   129a4:	str	r1, [sp]
   129a8:	ldr	r0, [r0]
   129ac:	ldr	r1, [pc, #20]	; 129c8 <error@@Base+0xf0>
   129b0:	add	r1, pc, r1
   129b4:	bl	10be4 <fprintf@plt>
   129b8:	mov	sp, fp
   129bc:	pop	{fp, pc}
   129c0:	andeq	r6, r1, r8, lsr r7
   129c4:	andeq	r6, r1, r8, lsl r7
   129c8:	andeq	r2, r0, r7, asr #2
   129cc:	ldr	r0, [pc, #40]	; 129fc <error@@Base+0x124>
   129d0:	add	r0, pc, r0
   129d4:	ldrb	r1, [r0]
   129d8:	cmp	r1, #1
   129dc:	bxeq	lr
   129e0:	push	{fp, lr}
   129e4:	mov	fp, sp
   129e8:	mov	r1, #1
   129ec:	strb	r1, [r0]
   129f0:	ldr	r0, [pc, #8]	; 12a00 <error@@Base+0x128>
   129f4:	add	r0, pc, r0
   129f8:	bl	128d8 <error@@Base>
   129fc:	andeq	r8, r1, lr, lsl #14
   12a00:	andeq	r2, r0, lr, lsl r1
   12a04:	push	{fp, lr}
   12a08:	mov	fp, sp
   12a0c:	mov	r3, r0
   12a10:	ldr	r0, [pc, #60]	; 12a54 <error@@Base+0x17c>
   12a14:	ldr	r0, [pc, r0]
   12a18:	ldr	r0, [r0]
   12a1c:	cmp	r0, #0
   12a20:	bne	12a4c <error@@Base+0x174>
   12a24:	ldr	r0, [pc, #44]	; 12a58 <error@@Base+0x180>
   12a28:	ldr	r0, [pc, r0]
   12a2c:	ldr	r2, [r0]
   12a30:	ldr	r0, [pc, #36]	; 12a5c <error@@Base+0x184>
   12a34:	ldr	r0, [pc, r0]
   12a38:	ldr	r0, [r0]
   12a3c:	ldr	r1, [pc, #28]	; 12a60 <error@@Base+0x188>
   12a40:	add	r1, pc, r1
   12a44:	bl	10be4 <fprintf@plt>
   12a48:	bl	12894 <__assert_fail@plt+0x1c2c>
   12a4c:	blx	r0
   12a50:	bl	12894 <__assert_fail@plt+0x1c2c>
   12a54:	muleq	r1, r8, r6
   12a58:	andeq	r6, r1, r4, lsr #13
   12a5c:	andeq	r6, r1, r4, lsl #13
   12a60:	andeq	r2, r0, r7, ror #1
   12a64:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12a68:	add	fp, sp, #24
   12a6c:	sub	sp, sp, #104	; 0x68
   12a70:	ldr	r8, [pc, #124]	; 12af4 <error@@Base+0x21c>
   12a74:	add	r8, pc, r8
   12a78:	ldrsh	r0, [r8]
   12a7c:	cmp	r0, #1
   12a80:	blt	12aec <error@@Base+0x214>
   12a84:	ldr	r9, [pc, #108]	; 12af8 <error@@Base+0x220>
   12a88:	mov	r7, #1
   12a8c:	add	r4, sp, #4
   12a90:	ldr	r9, [pc, r9]
   12a94:	ldr	r5, [pc, #96]	; 12afc <error@@Base+0x224>
   12a98:	add	r5, pc, r5
   12a9c:	ldr	r6, [r9]
   12aa0:	bl	10bb4 <getpid@plt>
   12aa4:	mov	r3, r0
   12aa8:	sxth	r0, r7
   12aac:	mov	r1, r5
   12ab0:	mov	r2, r6
   12ab4:	str	r0, [sp]
   12ab8:	mov	r0, r4
   12abc:	bl	10c20 <sprintf@plt>
   12ac0:	mov	r0, r4
   12ac4:	bl	10b24 <strdup@plt>
   12ac8:	mov	r6, r0
   12acc:	bl	10b3c <unlink@plt>
   12ad0:	mov	r0, r6
   12ad4:	bl	10af4 <free@plt>
   12ad8:	add	r0, r7, #1
   12adc:	sxth	r7, r0
   12ae0:	ldrsh	r0, [r8]
   12ae4:	cmp	r7, r0
   12ae8:	ble	12a9c <error@@Base+0x1c4>
   12aec:	sub	sp, fp, #24
   12af0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12af4:	andeq	r8, r1, r8, ror #12
   12af8:	andeq	r6, r1, ip, lsr r6
   12afc:	andeq	r2, r0, ip, rrx
   12b00:	ldm	r0, {r3, ip}
   12b04:	add	r1, r3, r1
   12b08:	add	r2, ip, r2
   12b0c:	stm	r0, {r1, r2}
   12b10:	bx	lr
   12b14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12b18:	add	fp, sp, #24
   12b1c:	mov	r8, r3
   12b20:	mov	r5, r2
   12b24:	mov	r4, r1
   12b28:	mov	r6, r0
   12b2c:	bl	1218c <__assert_fail@plt+0x1524>
   12b30:	mov	r7, r0
   12b34:	cmp	r0, #0
   12b38:	bne	12b64 <error@@Base+0x28c>
   12b3c:	mov	r0, #1
   12b40:	mov	r1, #20
   12b44:	bl	12418 <__assert_fail@plt+0x17b0>
   12b48:	mov	r7, r0
   12b4c:	mov	r0, r4
   12b50:	bl	10b24 <strdup@plt>
   12b54:	str	r0, [r7, #8]
   12b58:	mov	r0, r6
   12b5c:	mov	r1, r7
   12b60:	bl	1221c <__assert_fail@plt+0x15b4>
   12b64:	ldr	r0, [r7, #12]
   12b68:	ldr	r1, [r7, #16]
   12b6c:	add	r0, r0, r5
   12b70:	add	r1, r1, r8
   12b74:	str	r0, [r7, #12]
   12b78:	str	r1, [r7, #16]
   12b7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12b80:	push	{r4, r5, r6, r7, fp, lr}
   12b84:	add	fp, sp, #16
   12b88:	sub	sp, sp, #8
   12b8c:	mov	r6, r1
   12b90:	ldr	r1, [pc, #488]	; 12d80 <error@@Base+0x4a8>
   12b94:	mov	r5, r0
   12b98:	mov	r0, r6
   12b9c:	add	r1, pc, r1
   12ba0:	bl	124b8 <__assert_fail@plt+0x1850>
   12ba4:	mov	r4, r0
   12ba8:	ldr	r0, [pc, #468]	; 12d84 <error@@Base+0x4ac>
   12bac:	mov	r1, #99	; 0x63
   12bb0:	mov	r2, r4
   12bb4:	add	r0, pc, r0
   12bb8:	bl	10b0c <fgets@plt>
   12bbc:	cmp	r0, #0
   12bc0:	beq	12d64 <error@@Base+0x48c>
   12bc4:	ldr	r0, [pc, #444]	; 12d88 <error@@Base+0x4b0>
   12bc8:	ldr	r1, [pc, #444]	; 12d8c <error@@Base+0x4b4>
   12bcc:	mov	r2, #45	; 0x2d
   12bd0:	add	r0, pc, r0
   12bd4:	add	r1, pc, r1
   12bd8:	bl	10c44 <strncmp@plt>
   12bdc:	cmp	r0, #0
   12be0:	bne	12d64 <error@@Base+0x48c>
   12be4:	ldr	r0, [pc, #420]	; 12d90 <error@@Base+0x4b8>
   12be8:	mov	r1, #99	; 0x63
   12bec:	mov	r2, r4
   12bf0:	add	r0, pc, r0
   12bf4:	bl	10b0c <fgets@plt>
   12bf8:	cmp	r0, #0
   12bfc:	beq	12d64 <error@@Base+0x48c>
   12c00:	ldr	r0, [pc, #396]	; 12d94 <error@@Base+0x4bc>
   12c04:	ldr	r1, [pc, #396]	; 12d98 <error@@Base+0x4c0>
   12c08:	add	r0, pc, r0
   12c0c:	add	r1, pc, r1
   12c10:	bl	10ad0 <strcmp@plt>
   12c14:	cmp	r0, #0
   12c18:	bne	12d64 <error@@Base+0x48c>
   12c1c:	ldr	r0, [pc, #376]	; 12d9c <error@@Base+0x4c4>
   12c20:	mov	r1, #99	; 0x63
   12c24:	mov	r2, r4
   12c28:	add	r0, pc, r0
   12c2c:	bl	10b0c <fgets@plt>
   12c30:	cmp	r0, #0
   12c34:	beq	12d64 <error@@Base+0x48c>
   12c38:	ldr	r0, [pc, #352]	; 12da0 <error@@Base+0x4c8>
   12c3c:	ldr	r1, [pc, #352]	; 12da4 <error@@Base+0x4cc>
   12c40:	add	r2, sp, #4
   12c44:	add	r0, pc, r0
   12c48:	add	r1, pc, r1
   12c4c:	bl	10bf0 <__isoc99_sscanf@plt>
   12c50:	cmp	r0, #1
   12c54:	bne	12d64 <error@@Base+0x48c>
   12c58:	ldr	r0, [pc, #328]	; 12da8 <error@@Base+0x4d0>
   12c5c:	mov	r1, #99	; 0x63
   12c60:	mov	r2, r4
   12c64:	add	r0, pc, r0
   12c68:	bl	10b0c <fgets@plt>
   12c6c:	cmp	r0, #0
   12c70:	beq	12d64 <error@@Base+0x48c>
   12c74:	ldr	r0, [pc, #304]	; 12dac <error@@Base+0x4d4>
   12c78:	ldr	r1, [pc, #304]	; 12db0 <error@@Base+0x4d8>
   12c7c:	mov	r2, sp
   12c80:	add	r0, pc, r0
   12c84:	add	r1, pc, r1
   12c88:	bl	10bf0 <__isoc99_sscanf@plt>
   12c8c:	cmp	r0, #1
   12c90:	bne	12d64 <error@@Base+0x48c>
   12c94:	ldr	r0, [pc, #280]	; 12db4 <error@@Base+0x4dc>
   12c98:	mov	r1, #99	; 0x63
   12c9c:	mov	r2, r4
   12ca0:	add	r0, pc, r0
   12ca4:	bl	10b0c <fgets@plt>
   12ca8:	cmp	r0, #0
   12cac:	beq	12d64 <error@@Base+0x48c>
   12cb0:	ldr	r0, [pc, #256]	; 12db8 <error@@Base+0x4e0>
   12cb4:	mov	r1, #99	; 0x63
   12cb8:	mov	r2, r4
   12cbc:	add	r0, pc, r0
   12cc0:	bl	10b0c <fgets@plt>
   12cc4:	cmp	r0, #0
   12cc8:	beq	12d64 <error@@Base+0x48c>
   12ccc:	ldm	r5, {r0, r1}
   12cd0:	ldr	r2, [sp, #4]
   12cd4:	add	r0, r0, r2
   12cd8:	ldr	r2, [sp]
   12cdc:	add	r1, r1, r2
   12ce0:	stm	r5, {r0, r1}
   12ce4:	add	r1, r5, #8
   12ce8:	mov	r0, r4
   12cec:	bl	12dc4 <error@@Base+0x4ec>
   12cf0:	mov	r7, r0
   12cf4:	add	r1, r5, #416	; 0x1a0
   12cf8:	mov	r0, r4
   12cfc:	bl	12dc4 <error@@Base+0x4ec>
   12d00:	mov	r6, r0
   12d04:	add	r1, r5, #824	; 0x338
   12d08:	mov	r0, r4
   12d0c:	bl	12dc4 <error@@Base+0x4ec>
   12d10:	ldr	r0, [sp, #4]
   12d14:	cmp	r0, #1
   12d18:	blt	12d54 <error@@Base+0x47c>
   12d1c:	add	r1, r5, #920	; 0x398
   12d20:	mov	r0, r4
   12d24:	bl	12dc4 <error@@Base+0x4ec>
   12d28:	cmp	r7, #1
   12d2c:	blt	12d3c <error@@Base+0x464>
   12d30:	add	r1, r5, #992	; 0x3e0
   12d34:	mov	r0, r4
   12d38:	bl	12efc <error@@Base+0x624>
   12d3c:	cmp	r6, #1
   12d40:	blt	12d54 <error@@Base+0x47c>
   12d44:	movw	r0, #9048	; 0x2358
   12d48:	add	r1, r5, r0
   12d4c:	mov	r0, r4
   12d50:	bl	12efc <error@@Base+0x624>
   12d54:	mov	r0, r4
   12d58:	bl	12540 <__assert_fail@plt+0x18d8>
   12d5c:	sub	sp, fp, #16
   12d60:	pop	{r4, r5, r6, r7, fp, pc}
   12d64:	ldr	r1, [pc, #80]	; 12dbc <error@@Base+0x4e4>
   12d68:	ldr	r0, [pc, #80]	; 12dc0 <error@@Base+0x4e8>
   12d6c:	cmp	r6, #0
   12d70:	add	r1, pc, r1
   12d74:	add	r0, pc, r0
   12d78:	movne	r1, r6
   12d7c:	bl	12928 <error@@Base+0x50>
   12d80:	andeq	r1, r0, r8, asr lr
   12d84:	andeq	r8, r1, fp, lsr #10
   12d88:	andeq	r8, r1, pc, lsl #10
   12d8c:	andeq	r1, r0, r2, lsl #31
   12d90:	andeq	r8, r1, pc, ror #9
   12d94:	ldrdeq	r8, [r1], -r7
   12d98:	andeq	r5, r0, ip, ror r4
   12d9c:			; <UNDEFINED> instruction: 0x000184b7
   12da0:	muleq	r1, fp, r4
   12da4:	andeq	r1, r0, r1, asr #31
   12da8:	andeq	r8, r1, fp, ror r4
   12dac:	andeq	r8, r1, pc, asr r4
   12db0:	andeq	r1, r0, r5, lsl #31
   12db4:	andeq	r8, r1, pc, lsr r4
   12db8:	andeq	r8, r1, r3, lsr #8
   12dbc:	andeq	r1, r0, r8, lsr #28
   12dc0:	andeq	r1, r0, r2, lsl lr
   12dc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dc8:	add	fp, sp, #28
   12dcc:	sub	sp, sp, #12
   12dd0:	mov	r5, r0
   12dd4:	ldr	r0, [pc, #268]	; 12ee8 <error@@Base+0x610>
   12dd8:	mov	r4, r1
   12ddc:	mov	r1, #99	; 0x63
   12de0:	mov	r2, r5
   12de4:	add	r0, pc, r0
   12de8:	bl	10b0c <fgets@plt>
   12dec:	mov	r6, #0
   12df0:	cmp	r0, #0
   12df4:	beq	12edc <error@@Base+0x604>
   12df8:	ldr	r0, [pc, #236]	; 12eec <error@@Base+0x614>
   12dfc:	mov	r1, #99	; 0x63
   12e00:	mov	r2, r5
   12e04:	add	r0, pc, r0
   12e08:	bl	10b0c <fgets@plt>
   12e0c:	cmp	r0, #0
   12e10:	beq	12edc <error@@Base+0x604>
   12e14:	ldr	r7, [pc, #212]	; 12ef0 <error@@Base+0x618>
   12e18:	mov	r1, #99	; 0x63
   12e1c:	mov	r2, r5
   12e20:	add	r7, pc, r7
   12e24:	mov	r0, r7
   12e28:	bl	10b0c <fgets@plt>
   12e2c:	cmp	r0, #0
   12e30:	beq	12edc <error@@Base+0x604>
   12e34:	mov	r6, #0
   12e38:	add	r9, sp, #8
   12e3c:	add	sl, sp, #4
   12e40:	add	r8, r7, #29
   12e44:	ldr	r1, [pc, #168]	; 12ef4 <error@@Base+0x61c>
   12e48:	mov	r0, r7
   12e4c:	mov	r2, r9
   12e50:	mov	r3, sl
   12e54:	add	r1, pc, r1
   12e58:	bl	10bf0 <__isoc99_sscanf@plt>
   12e5c:	cmp	r0, #2
   12e60:	bne	12edc <error@@Base+0x604>
   12e64:	mov	r0, r8
   12e68:	mov	r1, #0
   12e6c:	mov	r2, #10
   12e70:	bl	10adc <strtol@plt>
   12e74:	cmp	r0, #0
   12e78:	beq	12e84 <error@@Base+0x5ac>
   12e7c:	ldr	r1, [sp, #8]
   12e80:	b	12ea4 <error@@Base+0x5cc>
   12e84:	ldr	r1, [pc, #108]	; 12ef8 <error@@Base+0x620>
   12e88:	mov	r0, r8
   12e8c:	add	r1, pc, r1
   12e90:	bl	10ad0 <strcmp@plt>
   12e94:	ldr	r1, [sp, #8]
   12e98:	cmp	r0, #0
   12e9c:	movwne	r0, #11
   12ea0:	moveq	r6, r1
   12ea4:	mov	r2, r4
   12ea8:	ldr	r0, [r2, r0, lsl #3]!
   12eac:	add	r0, r0, r1
   12eb0:	ldr	r1, [sp, #4]
   12eb4:	str	r0, [r2]
   12eb8:	ldr	r0, [r2, #4]
   12ebc:	add	r0, r0, r1
   12ec0:	mov	r1, #99	; 0x63
   12ec4:	str	r0, [r2, #4]
   12ec8:	mov	r0, r7
   12ecc:	mov	r2, r5
   12ed0:	bl	10b0c <fgets@plt>
   12ed4:	cmp	r0, #0
   12ed8:	bne	12e44 <error@@Base+0x56c>
   12edc:	mov	r0, r6
   12ee0:	sub	sp, fp, #28
   12ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ee8:	strdeq	r8, [r1], -fp
   12eec:	ldrdeq	r8, [r1], -fp
   12ef0:			; <UNDEFINED> instruction: 0x000182bf
   12ef4:			; <UNDEFINED> instruction: 0x00001db1
   12ef8:	andeq	r1, r0, r1, ror sp
   12efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f00:	add	fp, sp, #28
   12f04:	sub	sp, sp, #12
   12f08:	mov	r5, r0
   12f0c:	ldr	r0, [pc, #268]	; 13020 <error@@Base+0x748>
   12f10:	mov	r4, r1
   12f14:	mov	r1, #99	; 0x63
   12f18:	mov	r2, r5
   12f1c:	add	r0, pc, r0
   12f20:	bl	10b0c <fgets@plt>
   12f24:	cmp	r0, #0
   12f28:	beq	13018 <error@@Base+0x740>
   12f2c:	ldr	r0, [pc, #240]	; 13024 <error@@Base+0x74c>
   12f30:	mov	r1, #99	; 0x63
   12f34:	mov	r2, r5
   12f38:	add	r0, pc, r0
   12f3c:	bl	10b0c <fgets@plt>
   12f40:	cmp	r0, #0
   12f44:	beq	13018 <error@@Base+0x740>
   12f48:	ldr	r6, [pc, #216]	; 13028 <error@@Base+0x750>
   12f4c:	mov	r1, #99	; 0x63
   12f50:	mov	r2, r5
   12f54:	add	r6, pc, r6
   12f58:	mov	r0, r6
   12f5c:	bl	10b0c <fgets@plt>
   12f60:	cmp	r0, #0
   12f64:	beq	13018 <error@@Base+0x740>
   12f68:	add	r7, r6, #29
   12f6c:	ldr	r1, [pc, #184]	; 1302c <error@@Base+0x754>
   12f70:	mov	r0, r6
   12f74:	add	r2, sp, #8
   12f78:	add	r3, sp, #4
   12f7c:	add	r1, pc, r1
   12f80:	bl	10bf0 <__isoc99_sscanf@plt>
   12f84:	cmp	r0, #2
   12f88:	bne	13018 <error@@Base+0x740>
   12f8c:	mov	r0, r6
   12f90:	bl	10bd8 <strlen@plt>
   12f94:	ldr	r9, [sp, #8]
   12f98:	ldr	sl, [sp, #4]
   12f9c:	add	r0, r6, r0
   12fa0:	mov	r1, #0
   12fa4:	strb	r1, [r0, #-1]
   12fa8:	mov	r0, r4
   12fac:	mov	r1, r7
   12fb0:	bl	1218c <__assert_fail@plt+0x1524>
   12fb4:	mov	r8, r0
   12fb8:	cmp	r0, #0
   12fbc:	bne	12fe8 <error@@Base+0x710>
   12fc0:	mov	r0, #1
   12fc4:	mov	r1, #20
   12fc8:	bl	12418 <__assert_fail@plt+0x17b0>
   12fcc:	mov	r8, r0
   12fd0:	mov	r0, r7
   12fd4:	bl	10b24 <strdup@plt>
   12fd8:	str	r0, [r8, #8]
   12fdc:	mov	r0, r4
   12fe0:	mov	r1, r8
   12fe4:	bl	1221c <__assert_fail@plt+0x15b4>
   12fe8:	ldr	r0, [r8, #12]
   12fec:	ldr	r1, [r8, #16]
   12ff0:	mov	r2, r5
   12ff4:	add	r0, r0, r9
   12ff8:	add	r1, r1, sl
   12ffc:	str	r0, [r8, #12]
   13000:	str	r1, [r8, #16]
   13004:	mov	r0, r6
   13008:	mov	r1, #99	; 0x63
   1300c:	bl	10b0c <fgets@plt>
   13010:	cmp	r0, #0
   13014:	bne	12f6c <error@@Base+0x694>
   13018:	sub	sp, fp, #28
   1301c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13020:	andeq	r8, r1, r3, asr #3
   13024:	andeq	r8, r1, r7, lsr #3
   13028:	andeq	r8, r1, fp, lsl #3
   1302c:	andeq	r1, r0, r9, lsl #25
   13030:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13034:	add	fp, sp, #24
   13038:	sub	sp, sp, #8
   1303c:	mov	r2, r1
   13040:	ldr	r1, [pc, #448]	; 13208 <error@@Base+0x930>
   13044:	mov	r5, r0
   13048:	mov	r0, r2
   1304c:	add	r1, pc, r1
   13050:	bl	124b8 <__assert_fail@plt+0x1850>
   13054:	ldr	r1, [pc, #432]	; 1320c <error@@Base+0x934>
   13058:	ldr	r2, [pc, #432]	; 13210 <error@@Base+0x938>
   1305c:	ldr	r3, [pc, #432]	; 13214 <error@@Base+0x93c>
   13060:	mov	r4, r0
   13064:	add	r1, pc, r1
   13068:	add	r2, pc, r2
   1306c:	add	r3, pc, r3
   13070:	bl	10be4 <fprintf@plt>
   13074:	ldr	r2, [r5]
   13078:	ldr	r1, [pc, #408]	; 13218 <error@@Base+0x940>
   1307c:	mov	r0, r4
   13080:	add	r1, pc, r1
   13084:	bl	10be4 <fprintf@plt>
   13088:	ldr	r2, [r5, #4]
   1308c:	ldr	r1, [pc, #392]	; 1321c <error@@Base+0x944>
   13090:	mov	r0, r4
   13094:	add	r1, pc, r1
   13098:	bl	10be4 <fprintf@plt>
   1309c:	ldr	r0, [r5]
   130a0:	cmp	r0, #0
   130a4:	beq	130e4 <error@@Base+0x80c>
   130a8:	ldr	r1, [r5, #4]
   130ac:	vldr	d16, [pc, #332]	; 13200 <error@@Base+0x928>
   130b0:	vmov	s2, r0
   130b4:	sub	r1, r0, r1
   130b8:	mov	r0, r4
   130bc:	vmov	s0, r1
   130c0:	vcvt.f64.s32	d17, s0
   130c4:	vcvt.f64.s32	d18, s2
   130c8:	ldr	r1, [pc, #340]	; 13224 <error@@Base+0x94c>
   130cc:	vmul.f64	d16, d17, d16
   130d0:	vdiv.f64	d16, d16, d18
   130d4:	vmov	r2, r3, d16
   130d8:	add	r1, pc, r1
   130dc:	bl	10be4 <fprintf@plt>
   130e0:	b	130fc <error@@Base+0x824>
   130e4:	ldr	r0, [pc, #308]	; 13220 <error@@Base+0x948>
   130e8:	mov	r1, #8
   130ec:	mov	r2, #1
   130f0:	mov	r3, r4
   130f4:	add	r0, pc, r0
   130f8:	bl	10b60 <fwrite@plt>
   130fc:	ldr	r0, [pc, #292]	; 13228 <error@@Base+0x950>
   13100:	mov	r1, #12
   13104:	mov	r2, #1
   13108:	mov	r3, r4
   1310c:	mov	r7, #1
   13110:	add	r0, pc, r0
   13114:	bl	10b60 <fwrite@plt>
   13118:	mov	r8, #0
   1311c:	str	r7, [sp, #4]
   13120:	add	r1, r5, #8
   13124:	mov	r0, r4
   13128:	mov	r2, #50	; 0x32
   1312c:	str	r8, [sp]
   13130:	ldr	r3, [pc, #244]	; 1322c <error@@Base+0x954>
   13134:	add	r3, pc, r3
   13138:	bl	13248 <error@@Base+0x970>
   1313c:	str	r8, [sp]
   13140:	str	r7, [sp, #4]
   13144:	add	r6, r5, #416	; 0x1a0
   13148:	mov	r0, r4
   1314c:	mov	r2, #50	; 0x32
   13150:	ldr	r3, [pc, #216]	; 13230 <error@@Base+0x958>
   13154:	mov	r1, r6
   13158:	add	r3, pc, r3
   1315c:	bl	13248 <error@@Base+0x970>
   13160:	str	r7, [sp]
   13164:	str	r7, [sp, #4]
   13168:	add	r1, r5, #824	; 0x338
   1316c:	mov	r0, r4
   13170:	mov	r2, #10
   13174:	ldr	r3, [pc, #184]	; 13234 <error@@Base+0x95c>
   13178:	add	r3, pc, r3
   1317c:	bl	13248 <error@@Base+0x970>
   13180:	ldr	r0, [r5]
   13184:	cmp	r0, #1
   13188:	blt	131f0 <error@@Base+0x918>
   1318c:	str	r8, [sp]
   13190:	str	r8, [sp, #4]
   13194:	add	r1, r5, #920	; 0x398
   13198:	mov	r0, r4
   1319c:	mov	r2, #8
   131a0:	ldr	r3, [pc, #144]	; 13238 <error@@Base+0x960>
   131a4:	add	r3, pc, r3
   131a8:	bl	13248 <error@@Base+0x970>
   131ac:	ldr	r0, [r5, #8]
   131b0:	cmp	r0, #1
   131b4:	blt	131cc <error@@Base+0x8f4>
   131b8:	ldr	r2, [pc, #124]	; 1323c <error@@Base+0x964>
   131bc:	add	r1, r5, #992	; 0x3e0
   131c0:	mov	r0, r4
   131c4:	add	r2, pc, r2
   131c8:	bl	13608 <error@@Base+0xd30>
   131cc:	ldr	r0, [r6]
   131d0:	cmp	r0, #1
   131d4:	blt	131f0 <error@@Base+0x918>
   131d8:	ldr	r2, [pc, #96]	; 13240 <error@@Base+0x968>
   131dc:	movw	r0, #9048	; 0x2358
   131e0:	add	r1, r5, r0
   131e4:	mov	r0, r4
   131e8:	add	r2, pc, r2
   131ec:	bl	13608 <error@@Base+0xd30>
   131f0:	mov	r0, r4
   131f4:	sub	sp, fp, #24
   131f8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   131fc:	b	12540 <__assert_fail@plt+0x18d8>
   13200:	andeq	r0, r0, r0
   13204:	subsmi	r0, r9, r0
   13208:	andeq	r1, r0, pc, lsl #19
   1320c:	andeq	r1, r0, sl, lsr fp
   13210:	andeq	r1, r0, lr, ror #21
   13214:	andeq	r5, r0, ip, lsl r0
   13218:	andeq	r1, r0, r3, lsr #22
   1321c:	andeq	r1, r0, sp, lsl fp
   13220:	andeq	r1, r0, r9, lsl fp
   13224:	andeq	r1, r0, lr, lsr fp
   13228:			; <UNDEFINED> instruction: 0x00001ab7
   1322c:	andeq	r1, r0, r0, lsr #21
   13230:	andeq	r1, r0, pc, lsl #21
   13234:	andeq	r1, r0, r6, ror #20
   13238:	andeq	r1, r0, r1, asr sl
   1323c:	andeq	r1, r0, r0, lsl sl
   13240:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   13244:	nop	{0}
   13248:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1324c:	add	fp, sp, #28
   13250:	sub	sp, sp, #4
   13254:	vpush	{d8}
   13258:	sub	sp, sp, #8
   1325c:	mov	r5, r1
   13260:	ldr	r1, [pc, #832]	; 135a8 <error@@Base+0xcd0>
   13264:	mov	r8, r2
   13268:	mov	r2, r3
   1326c:	mov	r4, r0
   13270:	add	r1, pc, r1
   13274:	bl	10be4 <fprintf@plt>
   13278:	ldr	r0, [pc, #812]	; 135ac <error@@Base+0xcd4>
   1327c:	mov	r1, #26
   13280:	mov	r2, #1
   13284:	mov	r3, r4
   13288:	mov	r7, #1
   1328c:	add	r0, pc, r0
   13290:	bl	10b60 <fwrite@plt>
   13294:	ldr	r0, [pc, #788]	; 135b0 <error@@Base+0xcd8>
   13298:	mov	r1, #3
   1329c:	mov	r2, #1
   132a0:	mov	r3, r4
   132a4:	add	r0, pc, r0
   132a8:	bl	10b60 <fwrite@plt>
   132ac:	ldrb	r1, [fp, #8]
   132b0:	ldr	r0, [pc, #764]	; 135b4 <error@@Base+0xcdc>
   132b4:	ldr	r2, [pc, #764]	; 135b8 <error@@Base+0xce0>
   132b8:	str	r1, [sp]
   132bc:	cmp	r1, #0
   132c0:	add	r0, pc, r0
   132c4:	add	r2, pc, r2
   132c8:	ldr	r1, [pc, #748]	; 135bc <error@@Base+0xce4>
   132cc:	movne	r2, r0
   132d0:	mov	r0, r4
   132d4:	add	r1, pc, r1
   132d8:	bl	10be4 <fprintf@plt>
   132dc:	ldr	r1, [fp, #12]
   132e0:	lsl	r0, r8, #16
   132e4:	sxth	r6, r8
   132e8:	cmp	r0, #65536	; 0x10000
   132ec:	str	r1, [sp, #4]
   132f0:	blt	133d8 <error@@Base+0xb00>
   132f4:	ldr	sl, [pc, #708]	; 135c0 <error@@Base+0xce8>
   132f8:	vldr	d8, [pc, #672]	; 135a0 <error@@Base+0xcc8>
   132fc:	mov	r8, #1
   13300:	add	sl, pc, sl
   13304:	mov	r0, r5
   13308:	ldr	r2, [r0, r7, lsl #3]!
   1330c:	cmp	r2, #1
   13310:	blt	133c8 <error@@Base+0xaf0>
   13314:	cmp	r0, #0
   13318:	beq	13378 <error@@Base+0xaa0>
   1331c:	add	r9, r5, r7, lsl #3
   13320:	mov	r0, r4
   13324:	ldr	r3, [r9, #4]!
   13328:	ldr	r1, [pc, #660]	; 135c4 <error@@Base+0xcec>
   1332c:	add	r1, pc, r1
   13330:	bl	10be4 <fprintf@plt>
   13334:	ldr	r0, [r5, r7, lsl #3]
   13338:	cmp	r0, #0
   1333c:	beq	13388 <error@@Base+0xab0>
   13340:	ldr	r1, [r9]
   13344:	vmov	s2, r0
   13348:	sub	r1, r0, r1
   1334c:	mov	r0, r4
   13350:	vmov	s0, r1
   13354:	vcvt.f64.s32	d16, s0
   13358:	vcvt.f64.s32	d17, s2
   1335c:	ldr	r1, [pc, #616]	; 135cc <error@@Base+0xcf4>
   13360:	vmul.f64	d16, d16, d8
   13364:	vdiv.f64	d16, d16, d17
   13368:	vmov	r2, r3, d16
   1336c:	add	r1, pc, r1
   13370:	bl	10be4 <fprintf@plt>
   13374:	b	133a0 <error@@Base+0xac8>
   13378:	ldr	r0, [pc, #592]	; 135d0 <error@@Base+0xcf8>
   1337c:	mov	r1, #26
   13380:	add	r0, pc, r0
   13384:	b	13394 <error@@Base+0xabc>
   13388:	ldr	r0, [pc, #568]	; 135c8 <error@@Base+0xcf0>
   1338c:	mov	r1, #8
   13390:	add	r0, pc, r0
   13394:	mov	r2, #1
   13398:	mov	r3, r4
   1339c:	bl	10b60 <fwrite@plt>
   133a0:	ldr	r0, [pc, #556]	; 135d4 <error@@Base+0xcfc>
   133a4:	mov	r1, #3
   133a8:	mov	r2, #1
   133ac:	mov	r3, r4
   133b0:	add	r0, pc, r0
   133b4:	bl	10b60 <fwrite@plt>
   133b8:	mov	r0, r4
   133bc:	mov	r1, sl
   133c0:	mov	r2, r7
   133c4:	bl	10be4 <fprintf@plt>
   133c8:	add	r8, r8, #1
   133cc:	sxth	r7, r8
   133d0:	cmp	r6, r7
   133d4:	bge	13304 <error@@Base+0xa2c>
   133d8:	ldr	r0, [sp]
   133dc:	cmp	r0, #0
   133e0:	beq	134b4 <error@@Base+0xbdc>
   133e4:	add	r7, r6, #1
   133e8:	mov	r0, r5
   133ec:	ldr	r2, [r0, r7, lsl #3]!
   133f0:	cmp	r2, #1
   133f4:	blt	134b4 <error@@Base+0xbdc>
   133f8:	cmp	r0, #0
   133fc:	beq	13460 <error@@Base+0xb88>
   13400:	add	r8, r5, r7, lsl #3
   13404:	mov	r0, r4
   13408:	ldr	r3, [r8, #4]!
   1340c:	ldr	r1, [pc, #452]	; 135d8 <error@@Base+0xd00>
   13410:	add	r1, pc, r1
   13414:	bl	10be4 <fprintf@plt>
   13418:	ldr	r0, [r5, r7, lsl #3]
   1341c:	cmp	r0, #0
   13420:	beq	13470 <error@@Base+0xb98>
   13424:	ldr	r1, [r8]
   13428:	vldr	d16, [pc, #368]	; 135a0 <error@@Base+0xcc8>
   1342c:	vmov	s2, r0
   13430:	sub	r1, r0, r1
   13434:	mov	r0, r4
   13438:	vmov	s0, r1
   1343c:	vcvt.f64.s32	d17, s0
   13440:	vcvt.f64.s32	d18, s2
   13444:	ldr	r1, [pc, #404]	; 135e0 <error@@Base+0xd08>
   13448:	vmul.f64	d16, d17, d16
   1344c:	vdiv.f64	d16, d16, d18
   13450:	vmov	r2, r3, d16
   13454:	add	r1, pc, r1
   13458:	bl	10be4 <fprintf@plt>
   1345c:	b	13488 <error@@Base+0xbb0>
   13460:	ldr	r0, [pc, #380]	; 135e4 <error@@Base+0xd0c>
   13464:	mov	r1, #26
   13468:	add	r0, pc, r0
   1346c:	b	1347c <error@@Base+0xba4>
   13470:	ldr	r0, [pc, #356]	; 135dc <error@@Base+0xd04>
   13474:	mov	r1, #8
   13478:	add	r0, pc, r0
   1347c:	mov	r2, #1
   13480:	mov	r3, r4
   13484:	bl	10b60 <fwrite@plt>
   13488:	ldr	r0, [pc, #344]	; 135e8 <error@@Base+0xd10>
   1348c:	mov	r1, #3
   13490:	mov	r2, #1
   13494:	mov	r3, r4
   13498:	add	r0, pc, r0
   1349c:	bl	10b60 <fwrite@plt>
   134a0:	ldr	r1, [pc, #324]	; 135ec <error@@Base+0xd14>
   134a4:	mov	r0, r4
   134a8:	mov	r2, r6
   134ac:	add	r1, pc, r1
   134b0:	bl	10be4 <fprintf@plt>
   134b4:	ldr	r0, [sp, #4]
   134b8:	tst	r0, #255	; 0xff
   134bc:	beq	13524 <error@@Base+0xc4c>
   134c0:	cmp	r5, #0
   134c4:	beq	13534 <error@@Base+0xc5c>
   134c8:	ldm	r5, {r2, r3}
   134cc:	ldr	r1, [pc, #284]	; 135f0 <error@@Base+0xd18>
   134d0:	mov	r0, r4
   134d4:	add	r1, pc, r1
   134d8:	bl	10be4 <fprintf@plt>
   134dc:	ldr	r0, [r5]
   134e0:	cmp	r0, #0
   134e4:	beq	13544 <error@@Base+0xc6c>
   134e8:	ldr	r1, [r5, #4]
   134ec:	vldr	d16, [pc, #172]	; 135a0 <error@@Base+0xcc8>
   134f0:	vmov	s2, r0
   134f4:	sub	r1, r0, r1
   134f8:	mov	r0, r4
   134fc:	vmov	s0, r1
   13500:	vcvt.f64.s32	d17, s0
   13504:	vcvt.f64.s32	d18, s2
   13508:	ldr	r1, [pc, #232]	; 135f8 <error@@Base+0xd20>
   1350c:	vmul.f64	d16, d17, d16
   13510:	vdiv.f64	d16, d16, d18
   13514:	vmov	r2, r3, d16
   13518:	add	r1, pc, r1
   1351c:	bl	10be4 <fprintf@plt>
   13520:	b	1355c <error@@Base+0xc84>
   13524:	sub	sp, fp, #40	; 0x28
   13528:	vpop	{d8}
   1352c:	add	sp, sp, #4
   13530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13534:	ldr	r0, [pc, #192]	; 135fc <error@@Base+0xd24>
   13538:	mov	r1, #26
   1353c:	add	r0, pc, r0
   13540:	b	13550 <error@@Base+0xc78>
   13544:	ldr	r0, [pc, #168]	; 135f4 <error@@Base+0xd1c>
   13548:	mov	r1, #8
   1354c:	add	r0, pc, r0
   13550:	mov	r2, #1
   13554:	mov	r3, r4
   13558:	bl	10b60 <fwrite@plt>
   1355c:	ldr	r0, [pc, #156]	; 13600 <error@@Base+0xd28>
   13560:	mov	r1, #3
   13564:	mov	r2, #1
   13568:	mov	r3, r4
   1356c:	add	r0, pc, r0
   13570:	bl	10b60 <fwrite@plt>
   13574:	ldr	r0, [pc, #136]	; 13604 <error@@Base+0xd2c>
   13578:	mov	r1, #7
   1357c:	mov	r2, #1
   13580:	mov	r3, r4
   13584:	add	r0, pc, r0
   13588:	sub	sp, fp, #40	; 0x28
   1358c:	vpop	{d8}
   13590:	add	sp, sp, #4
   13594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13598:	b	10b60 <fwrite@plt>
   1359c:	nop	{0}
   135a0:	andeq	r0, r0, r0
   135a4:	subsmi	r0, r9, r0
   135a8:	andeq	r1, r0, ip, lsr #19
   135ac:	andeq	r1, r0, r0, asr #19
   135b0:	andeq	r1, r0, r3, asr #19
   135b4:	andeq	r1, r0, r1, ror #18
   135b8:	andeq	r1, r0, r4, ror #18
   135bc:	andeq	r1, r0, r9, asr #18
   135c0:	andeq	r1, r0, pc, lsr #18
   135c4:	andeq	r1, r0, r5, lsl r9
   135c8:	andeq	r1, r0, sp, ror r8
   135cc:	andeq	r1, r0, sl, lsr #17
   135d0:	andeq	r1, r0, ip, asr #17
   135d4:			; <UNDEFINED> instruction: 0x000018b7
   135d8:	andeq	r1, r0, r1, lsr r8
   135dc:	muleq	r0, r5, r7
   135e0:	andeq	r1, r0, r2, asr #15
   135e4:	andeq	r1, r0, r4, ror #15
   135e8:	andeq	r1, r0, pc, asr #15
   135ec:	andeq	r1, r0, ip, lsl #15
   135f0:	andeq	r1, r0, sp, ror #14
   135f4:	andeq	r1, r0, r1, asr #13
   135f8:	strdeq	r1, [r0], -lr
   135fc:	andeq	r1, r0, r0, lsl r7
   13600:	strdeq	r1, [r0], -fp
   13604:	andeq	r1, r0, r9, ror r6
   13608:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1360c:	add	fp, sp, #28
   13610:	sub	sp, sp, #4
   13614:	vpush	{d8}
   13618:	mov	r5, r0
   1361c:	mov	r0, r1
   13620:	mov	r6, r2
   13624:	mov	r8, r1
   13628:	bl	1233c <__assert_fail@plt+0x16d4>
   1362c:	movw	r0, #8052	; 0x1f74
   13630:	ldr	r0, [r8, r0]!
   13634:	mov	r4, r8
   13638:	ldr	r1, [r4, #-4]!
   1363c:	ldr	r2, [pc, #324]	; 13788 <error@@Base+0xeb0>
   13640:	add	r2, pc, r2
   13644:	bl	14664 <error@@Base+0x1d8c>
   13648:	ldr	r1, [pc, #316]	; 1378c <error@@Base+0xeb4>
   1364c:	mov	r0, r5
   13650:	mov	r2, r6
   13654:	add	r1, pc, r1
   13658:	bl	10be4 <fprintf@plt>
   1365c:	ldr	r0, [pc, #300]	; 13790 <error@@Base+0xeb8>
   13660:	mov	r1, #26
   13664:	mov	r2, #1
   13668:	mov	r3, r5
   1366c:	add	r0, pc, r0
   13670:	bl	10b60 <fwrite@plt>
   13674:	ldr	r0, [pc, #280]	; 13794 <error@@Base+0xebc>
   13678:	mov	r1, #3
   1367c:	mov	r2, #1
   13680:	mov	r3, r5
   13684:	add	r0, pc, r0
   13688:	bl	10b60 <fwrite@plt>
   1368c:	mov	r0, #10
   13690:	mov	r1, r5
   13694:	bl	10c14 <fputc@plt>
   13698:	ldr	r0, [r8]
   1369c:	cmp	r0, #1
   136a0:	blt	13774 <error@@Base+0xe9c>
   136a4:	ldr	r7, [pc, #236]	; 13798 <error@@Base+0xec0>
   136a8:	ldr	r6, [pc, #236]	; 1379c <error@@Base+0xec4>
   136ac:	vldr	d8, [pc, #204]	; 13780 <error@@Base+0xea8>
   136b0:	mov	sl, #0
   136b4:	add	r7, pc, r7
   136b8:	add	r6, pc, r6
   136bc:	ldr	r0, [r4]
   136c0:	ldr	r9, [r0, sl, lsl #2]
   136c4:	mov	r0, r5
   136c8:	ldr	r2, [r9, #12]
   136cc:	ldr	r3, [r9, #16]
   136d0:	ldr	r1, [pc, #200]	; 137a0 <error@@Base+0xec8>
   136d4:	add	r1, pc, r1
   136d8:	bl	10be4 <fprintf@plt>
   136dc:	ldr	r0, [r9, #12]
   136e0:	cmp	r0, #0
   136e4:	beq	13720 <error@@Base+0xe48>
   136e8:	ldr	r1, [r9, #16]
   136ec:	vmov	s2, r0
   136f0:	sub	r1, r0, r1
   136f4:	mov	r0, r5
   136f8:	vmov	s0, r1
   136fc:	vcvt.f64.s32	d16, s0
   13700:	vcvt.f64.s32	d17, s2
   13704:	ldr	r1, [pc, #156]	; 137a8 <error@@Base+0xed0>
   13708:	vmul.f64	d16, d16, d8
   1370c:	vdiv.f64	d16, d16, d17
   13710:	vmov	r2, r3, d16
   13714:	add	r1, pc, r1
   13718:	bl	10be4 <fprintf@plt>
   1371c:	b	13738 <error@@Base+0xe60>
   13720:	ldr	r0, [pc, #124]	; 137a4 <error@@Base+0xecc>
   13724:	mov	r1, #8
   13728:	mov	r2, #1
   1372c:	mov	r3, r5
   13730:	add	r0, pc, r0
   13734:	bl	10b60 <fwrite@plt>
   13738:	mov	r0, r7
   1373c:	mov	r1, #3
   13740:	mov	r2, #1
   13744:	mov	r3, r5
   13748:	bl	10b60 <fwrite@plt>
   1374c:	ldr	r0, [r4]
   13750:	mov	r1, r6
   13754:	ldr	r0, [r0, sl, lsl #2]
   13758:	ldr	r2, [r0, #8]
   1375c:	mov	r0, r5
   13760:	bl	10be4 <fprintf@plt>
   13764:	ldr	r0, [r8]
   13768:	add	sl, sl, #1
   1376c:	cmp	sl, r0
   13770:	blt	136bc <error@@Base+0xde4>
   13774:	vpop	{d8}
   13778:	add	sp, sp, #4
   1377c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13780:	andeq	r0, r0, r0
   13784:	subsmi	r0, r9, r0
   13788:	andeq	r0, r0, r4, ror #2
   1378c:	andeq	r1, r0, r8, asr #11
   13790:	andeq	r1, r0, r0, ror #11
   13794:	andeq	r1, r0, r3, ror #11
   13798:			; <UNDEFINED> instruction: 0x000015b3
   1379c:	andeq	r1, r0, r5, ror #10
   137a0:	andeq	r1, r0, sp, ror #10
   137a4:	ldrdeq	r1, [r0], -sp
   137a8:	andeq	r1, r0, r2, lsl #10
   137ac:	ldr	r1, [r1, #8]
   137b0:	ldr	r0, [r0, #8]
   137b4:	b	1243c <__assert_fail@plt+0x17d4>
   137b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137bc:	add	fp, sp, #28
   137c0:	sub	sp, sp, #28
   137c4:	ldr	r8, [r1]
   137c8:	str	r0, [sp, #4]
   137cc:	cmp	r8, #0
   137d0:	str	r8, [sp, #16]
   137d4:	beq	13f28 <error@@Base+0x1650>
   137d8:	ldr	sl, [pc, #1968]	; 13f90 <error@@Base+0x16b8>
   137dc:	add	r9, sp, #12
   137e0:	add	sl, pc, sl
   137e4:	mov	r0, #17
   137e8:	mov	r1, r8
   137ec:	mov	r5, r9
   137f0:	mov	lr, r0
   137f4:	mov	r9, #18
   137f8:	cmp	r5, #0
   137fc:	beq	13968 <error@@Base+0x1090>
   13800:	mov	r5, r1
   13804:	ldr	r0, [r5, #12]
   13808:	mov	r2, #0
   1380c:	movw	r1, #1092	; 0x444
   13810:	sub	r3, r1, r2
   13814:	add	r3, r2, r3, lsr #1
   13818:	add	r7, r3, r3, lsl #1
   1381c:	ldr	r6, [sl, r7, lsl #2]
   13820:	cmp	r6, r0
   13824:	bls	13838 <error@@Base+0xf60>
   13828:	sub	r1, r3, #1
   1382c:	cmp	r1, r2
   13830:	bcs	13810 <error@@Base+0xf38>
   13834:	b	13884 <error@@Base+0xfac>
   13838:	add	r2, sl, r7, lsl #2
   1383c:	ldr	r7, [r2, #4]
   13840:	cmp	r7, r0
   13844:	bcs	13858 <error@@Base+0xf80>
   13848:	add	r2, r3, #1
   1384c:	cmp	r1, r2
   13850:	bcs	13810 <error@@Base+0xf38>
   13854:	b	13884 <error@@Base+0xfac>
   13858:	ldr	r1, [r2, #8]
   1385c:	orr	r1, r1, #2
   13860:	cmp	r1, #6
   13864:	bne	13884 <error@@Base+0xfac>
   13868:	ldr	r5, [r5, #4]
   1386c:	cmp	r5, #0
   13870:	bne	13804 <error@@Base+0xf2c>
   13874:	mov	r2, #18
   13878:	mov	ip, #18
   1387c:	mov	r5, #0
   13880:	b	13b68 <error@@Base+0x1290>
   13884:	cmp	r5, #0
   13888:	beq	13968 <error@@Base+0x1090>
   1388c:	mov	r2, #0
   13890:	movw	r1, #1092	; 0x444
   13894:	sub	r3, r1, r2
   13898:	add	r3, r2, r3, lsr #1
   1389c:	add	r7, r3, r3, lsl #1
   138a0:	ldr	r6, [sl, r7, lsl #2]
   138a4:	cmp	r6, r0
   138a8:	bls	138bc <error@@Base+0xfe4>
   138ac:	sub	r1, r3, #1
   138b0:	cmp	r1, r2
   138b4:	bcs	13894 <error@@Base+0xfbc>
   138b8:	b	138d8 <error@@Base+0x1000>
   138bc:	add	r2, sl, r7, lsl #2
   138c0:	ldr	r7, [r2, #4]
   138c4:	cmp	r7, r0
   138c8:	bcs	13cbc <error@@Base+0x13e4>
   138cc:	add	r2, r3, #1
   138d0:	cmp	r1, r2
   138d4:	bcs	13894 <error@@Base+0xfbc>
   138d8:	mov	ip, #0
   138dc:	ldr	r6, [r5, #4]
   138e0:	cmp	r6, #0
   138e4:	beq	139d4 <error@@Base+0x10fc>
   138e8:	mov	r2, r6
   138ec:	str	r5, [sp, #8]
   138f0:	ldr	r0, [r2, #12]
   138f4:	mov	r4, #0
   138f8:	movw	r3, #1092	; 0x444
   138fc:	sub	r7, r3, r4
   13900:	add	r7, r4, r7, lsr #1
   13904:	add	r5, r7, r7, lsl #1
   13908:	ldr	r1, [sl, r5, lsl #2]
   1390c:	cmp	r1, r0
   13910:	bls	13924 <error@@Base+0x104c>
   13914:	sub	r3, r7, #1
   13918:	cmp	r3, r4
   1391c:	bcs	138fc <error@@Base+0x1024>
   13920:	b	13978 <error@@Base+0x10a0>
   13924:	add	r5, sl, r5, lsl #2
   13928:	ldr	r1, [r5, #4]
   1392c:	cmp	r1, r0
   13930:	bcs	13944 <error@@Base+0x106c>
   13934:	add	r4, r7, #1
   13938:	cmp	r3, r4
   1393c:	bcs	138fc <error@@Base+0x1024>
   13940:	b	13978 <error@@Base+0x10a0>
   13944:	ldr	r1, [r5, #8]
   13948:	orr	r1, r1, #2
   1394c:	cmp	r1, #6
   13950:	bne	13978 <error@@Base+0x10a0>
   13954:	ldr	r2, [r2, #4]
   13958:	cmp	r2, #0
   1395c:	bne	138f0 <error@@Base+0x1018>
   13960:	mov	r2, #18
   13964:	b	139e8 <error@@Base+0x1110>
   13968:	mov	r5, #0
   1396c:	mov	r2, #18
   13970:	mov	ip, #18
   13974:	b	13b68 <error@@Base+0x1290>
   13978:	cmp	r2, #0
   1397c:	beq	139e4 <error@@Base+0x110c>
   13980:	mov	r3, #0
   13984:	movw	r2, #1092	; 0x444
   13988:	sub	r1, r2, r3
   1398c:	add	r7, r3, r1, lsr #1
   13990:	add	r5, r7, r7, lsl #1
   13994:	ldr	r1, [sl, r5, lsl #2]
   13998:	cmp	r1, r0
   1399c:	bls	139b0 <error@@Base+0x10d8>
   139a0:	sub	r2, r7, #1
   139a4:	cmp	r2, r3
   139a8:	bcs	13988 <error@@Base+0x10b0>
   139ac:	b	139dc <error@@Base+0x1104>
   139b0:	add	r3, sl, r5, lsl #2
   139b4:	ldr	r1, [r3, #4]
   139b8:	cmp	r1, r0
   139bc:	bcs	13cc4 <error@@Base+0x13ec>
   139c0:	add	r3, r7, #1
   139c4:	cmp	r2, r3
   139c8:	bcs	13988 <error@@Base+0x10b0>
   139cc:	mov	r2, #0
   139d0:	b	139e8 <error@@Base+0x1110>
   139d4:	mov	r2, #18
   139d8:	b	13b68 <error@@Base+0x1290>
   139dc:	mov	r2, #0
   139e0:	b	139e8 <error@@Base+0x1110>
   139e4:	mov	r2, #18
   139e8:	ldr	r0, [r6, #12]
   139ec:	mov	r4, #0
   139f0:	movw	r3, #1092	; 0x444
   139f4:	sub	r1, r3, r4
   139f8:	add	r7, r4, r1, lsr #1
   139fc:	add	r5, r7, r7, lsl #1
   13a00:	ldr	r1, [sl, r5, lsl #2]
   13a04:	cmp	r1, r0
   13a08:	bls	13a1c <error@@Base+0x1144>
   13a0c:	sub	r3, r7, #1
   13a10:	cmp	r3, r4
   13a14:	bcs	139f4 <error@@Base+0x111c>
   13a18:	b	13a64 <error@@Base+0x118c>
   13a1c:	add	r5, sl, r5, lsl #2
   13a20:	ldr	r1, [r5, #4]
   13a24:	cmp	r1, r0
   13a28:	bcs	13a3c <error@@Base+0x1164>
   13a2c:	add	r4, r7, #1
   13a30:	cmp	r3, r4
   13a34:	bcs	139f4 <error@@Base+0x111c>
   13a38:	b	13a64 <error@@Base+0x118c>
   13a3c:	ldr	r0, [r5, #8]
   13a40:	orr	r0, r0, #2
   13a44:	cmp	r0, #6
   13a48:	bne	13a64 <error@@Base+0x118c>
   13a4c:	ldr	r6, [r6, #4]
   13a50:	cmp	r6, #0
   13a54:	bne	139e8 <error@@Base+0x1110>
   13a58:	ldr	r5, [sp, #8]
   13a5c:	mov	r9, #18
   13a60:	b	13b58 <error@@Base+0x1280>
   13a64:	mov	r9, #18
   13a68:	cmp	r6, #0
   13a6c:	beq	13aec <error@@Base+0x1214>
   13a70:	ldr	r6, [r6, #4]
   13a74:	cmp	r6, #0
   13a78:	beq	13aec <error@@Base+0x1214>
   13a7c:	ldr	r0, [r6, #12]
   13a80:	mov	r3, #0
   13a84:	movw	r4, #1092	; 0x444
   13a88:	sub	r1, r4, r3
   13a8c:	add	r7, r3, r1, lsr #1
   13a90:	add	r5, r7, r7, lsl #1
   13a94:	ldr	r1, [sl, r5, lsl #2]
   13a98:	cmp	r1, r0
   13a9c:	bls	13ab0 <error@@Base+0x11d8>
   13aa0:	sub	r4, r7, #1
   13aa4:	cmp	r4, r3
   13aa8:	bcs	13a88 <error@@Base+0x11b0>
   13aac:	b	13af4 <error@@Base+0x121c>
   13ab0:	add	r3, sl, r5, lsl #2
   13ab4:	ldr	r1, [r3, #4]
   13ab8:	cmp	r1, r0
   13abc:	bcs	13ad0 <error@@Base+0x11f8>
   13ac0:	add	r3, r7, #1
   13ac4:	cmp	r4, r3
   13ac8:	bcs	13a88 <error@@Base+0x11b0>
   13acc:	b	13af4 <error@@Base+0x121c>
   13ad0:	ldr	r1, [r3, #8]
   13ad4:	orr	r1, r1, #2
   13ad8:	cmp	r1, #6
   13adc:	bne	13af4 <error@@Base+0x121c>
   13ae0:	ldr	r6, [r6, #4]
   13ae4:	cmp	r6, #0
   13ae8:	bne	13a7c <error@@Base+0x11a4>
   13aec:	ldr	r5, [sp, #8]
   13af0:	b	13b58 <error@@Base+0x1280>
   13af4:	ldr	r5, [sp, #8]
   13af8:	cmp	r6, #0
   13afc:	beq	13b58 <error@@Base+0x1280>
   13b00:	mov	r4, #0
   13b04:	movw	r6, #1092	; 0x444
   13b08:	sub	r1, r6, r4
   13b0c:	add	r3, r4, r1, lsr #1
   13b10:	add	r7, r3, r3, lsl #1
   13b14:	ldr	r1, [sl, r7, lsl #2]
   13b18:	cmp	r1, r0
   13b1c:	bls	13b30 <error@@Base+0x1258>
   13b20:	sub	r6, r3, #1
   13b24:	cmp	r6, r4
   13b28:	bcs	13b08 <error@@Base+0x1230>
   13b2c:	b	13b54 <error@@Base+0x127c>
   13b30:	add	r7, sl, r7, lsl #2
   13b34:	ldr	r1, [r7, #4]
   13b38:	cmp	r1, r0
   13b3c:	bcs	13d60 <error@@Base+0x1488>
   13b40:	add	r4, r3, #1
   13b44:	mov	r9, #0
   13b48:	cmp	r6, r4
   13b4c:	bcs	13b08 <error@@Base+0x1230>
   13b50:	b	13b58 <error@@Base+0x1280>
   13b54:	mov	r9, #0
   13b58:	cmp	ip, #1
   13b5c:	moveq	r0, #1
   13b60:	cmpeq	r2, #2
   13b64:	beq	13c3c <error@@Base+0x1364>
   13b68:	sub	r0, r2, #1
   13b6c:	cmp	r0, #3
   13b70:	subcs	r0, ip, #1
   13b74:	cmpcs	r0, #3
   13b78:	bcc	13d78 <error@@Base+0x14a0>
   13b7c:	orr	r6, r2, #1
   13b80:	orr	r4, ip, #1
   13b84:	cmp	r6, #9
   13b88:	cmpeq	r4, #9
   13b8c:	beq	13c38 <error@@Base+0x1360>
   13b90:	cmp	r4, #9
   13b94:	bne	13bbc <error@@Base+0x12e4>
   13b98:	cmp	r2, #13
   13b9c:	bhi	13bbc <error@@Base+0x12e4>
   13ba0:	mov	r0, #1
   13ba4:	mov	r1, #13312	; 0x3400
   13ba8:	tst	r1, r0, lsl r2
   13bac:	beq	13bbc <error@@Base+0x12e4>
   13bb0:	orr	r0, r9, #1
   13bb4:	cmp	r0, #9
   13bb8:	beq	13c38 <error@@Base+0x1360>
   13bbc:	orr	r0, lr, #1
   13bc0:	cmp	r0, #9
   13bc4:	bne	13be8 <error@@Base+0x1310>
   13bc8:	cmp	ip, #13
   13bcc:	bhi	13be8 <error@@Base+0x1310>
   13bd0:	mov	r0, #1
   13bd4:	mov	r1, #13312	; 0x3400
   13bd8:	tst	r1, r0, lsl ip
   13bdc:	beq	13be8 <error@@Base+0x1310>
   13be0:	cmp	r6, #9
   13be4:	beq	13c38 <error@@Base+0x1360>
   13be8:	cmp	r2, #10
   13bec:	mov	r0, #8
   13bf0:	cmpeq	ip, #8
   13bf4:	beq	13c3c <error@@Base+0x1364>
   13bf8:	cmp	r9, #8
   13bfc:	cmpeq	r2, #11
   13c00:	beq	13c4c <error@@Base+0x1374>
   13c04:	cmp	r2, #8
   13c08:	cmpeq	lr, #8
   13c0c:	beq	13c58 <error@@Base+0x1380>
   13c10:	sub	r0, r4, #9
   13c14:	cmp	r2, #15
   13c18:	clz	r0, r0
   13c1c:	lsr	r1, r0, #5
   13c20:	bne	13c68 <error@@Base+0x1390>
   13c24:	sub	r0, ip, #15
   13c28:	clz	r0, r0
   13c2c:	lsr	r0, r0, #5
   13c30:	orrs	r0, r0, r1
   13c34:	beq	13c68 <error@@Base+0x1390>
   13c38:	mov	r0, ip
   13c3c:	ldr	r1, [r5, #4]
   13c40:	cmp	r1, #0
   13c44:	bne	137f0 <error@@Base+0xf18>
   13c48:	b	13d78 <error@@Base+0x14a0>
   13c4c:	cmp	ip, #8
   13c50:	beq	13c3c <error@@Base+0x1364>
   13c54:	b	13c04 <error@@Base+0x132c>
   13c58:	mov	r0, #11
   13c5c:	cmp	ip, #11
   13c60:	beq	13c3c <error@@Base+0x1364>
   13c64:	b	13c10 <error@@Base+0x1338>
   13c68:	cmp	ip, #15
   13c6c:	mov	r0, #15
   13c70:	cmpeq	r6, #9
   13c74:	beq	13c3c <error@@Base+0x1364>
   13c78:	cmp	lr, #15
   13c7c:	cmpeq	r2, #15
   13c80:	beq	13d38 <error@@Base+0x1460>
   13c84:	cmp	ip, #15
   13c88:	bne	13ccc <error@@Base+0x13f4>
   13c8c:	cmp	r9, #15
   13c90:	bne	13cdc <error@@Base+0x1404>
   13c94:	orr	r7, r2, #2
   13c98:	sub	r3, r2, #10
   13c9c:	sub	r7, r7, #14
   13ca0:	clz	r3, r3
   13ca4:	clz	r7, r7
   13ca8:	lsr	r3, r3, #5
   13cac:	lsr	r7, r7, #5
   13cb0:	orrs	r3, r3, r7
   13cb4:	bne	13c3c <error@@Base+0x1364>
   13cb8:	b	13cdc <error@@Base+0x1404>
   13cbc:	ldr	ip, [r2, #8]
   13cc0:	b	138dc <error@@Base+0x1004>
   13cc4:	ldr	r2, [r3, #8]
   13cc8:	b	139e8 <error@@Base+0x1110>
   13ccc:	cmp	r2, #7
   13cd0:	moveq	r0, #7
   13cd4:	cmpeq	ip, #7
   13cd8:	beq	13c3c <error@@Base+0x1364>
   13cdc:	cmp	r2, #16
   13ce0:	bne	13d0c <error@@Base+0x1434>
   13ce4:	orr	r0, ip, #8
   13ce8:	sub	r0, r0, #15
   13cec:	clz	r0, r0
   13cf0:	lsr	r0, r0, #5
   13cf4:	orr	r0, r0, r1
   13cf8:	sub	r1, ip, #16
   13cfc:	clz	r1, r1
   13d00:	lsr	r1, r1, #5
   13d04:	orrs	r0, r1, r0
   13d08:	bne	13c38 <error@@Base+0x1360>
   13d0c:	cmp	ip, #16
   13d10:	bne	13d68 <error@@Base+0x1490>
   13d14:	cmp	r2, #16
   13d18:	bhi	13d78 <error@@Base+0x14a0>
   13d1c:	movw	r3, #33664	; 0x8380
   13d20:	mov	r1, #1
   13d24:	mov	r0, #16
   13d28:	movt	r3, #1
   13d2c:	tst	r3, r1, lsl r2
   13d30:	bne	13c3c <error@@Base+0x1364>
   13d34:	b	13d78 <error@@Base+0x14a0>
   13d38:	orr	r7, ip, #2
   13d3c:	sub	r3, ip, #10
   13d40:	sub	r7, r7, #14
   13d44:	clz	r3, r3
   13d48:	clz	r7, r7
   13d4c:	lsr	r3, r3, #5
   13d50:	lsr	r7, r7, #5
   13d54:	orrs	r3, r3, r7
   13d58:	bne	13c38 <error@@Base+0x1360>
   13d5c:	b	13c84 <error@@Base+0x13ac>
   13d60:	ldr	r9, [r7, #8]
   13d64:	b	13b58 <error@@Base+0x1280>
   13d68:	cmp	r2, #5
   13d6c:	moveq	r0, #5
   13d70:	cmpeq	ip, #5
   13d74:	beq	13c3c <error@@Base+0x1364>
   13d78:	cmp	r5, #0
   13d7c:	add	r9, sp, #12
   13d80:	beq	13f28 <error@@Base+0x1650>
   13d84:	ldr	r1, [r5, #4]
   13d88:	cmp	r1, #0
   13d8c:	beq	13e20 <error@@Base+0x1548>
   13d90:	mov	r0, r1
   13d94:	ldr	r1, [r1, #12]
   13d98:	mov	r4, r5
   13d9c:	mov	r3, #0
   13da0:	movw	r2, #1092	; 0x444
   13da4:	sub	r7, r2, r3
   13da8:	add	r7, r3, r7, lsr #1
   13dac:	add	r6, r7, r7, lsl #1
   13db0:	ldr	r5, [sl, r6, lsl #2]
   13db4:	cmp	r5, r1
   13db8:	bls	13dcc <error@@Base+0x14f4>
   13dbc:	sub	r2, r7, #1
   13dc0:	cmp	r2, r3
   13dc4:	bcs	13da4 <error@@Base+0x14cc>
   13dc8:	b	13e10 <error@@Base+0x1538>
   13dcc:	add	r3, sl, r6, lsl #2
   13dd0:	ldr	r6, [r3, #4]
   13dd4:	cmp	r6, r1
   13dd8:	bcs	13dec <error@@Base+0x1514>
   13ddc:	add	r3, r7, #1
   13de0:	cmp	r2, r3
   13de4:	bcs	13da4 <error@@Base+0x14cc>
   13de8:	b	13e10 <error@@Base+0x1538>
   13dec:	ldr	r1, [r3, #8]
   13df0:	orr	r1, r1, #2
   13df4:	cmp	r1, #6
   13df8:	bne	13e10 <error@@Base+0x1538>
   13dfc:	ldr	r1, [r0, #4]
   13e00:	mov	r5, r0
   13e04:	cmp	r1, #0
   13e08:	bne	13d90 <error@@Base+0x14b8>
   13e0c:	b	13e24 <error@@Base+0x154c>
   13e10:	mov	r5, r4
   13e14:	cmp	r4, #0
   13e18:	bne	13e28 <error@@Base+0x1550>
   13e1c:	b	13f28 <error@@Base+0x1650>
   13e20:	mov	r0, r5
   13e24:	mov	r5, r0
   13e28:	ldr	r0, [r8, #12]
   13e2c:	bl	10b00 <utf8proc_get_property@plt>
   13e30:	ldrsh	r0, [r0]
   13e34:	sub	r1, r0, #1
   13e38:	cmp	r1, #12
   13e3c:	bcs	13f18 <error@@Base+0x1640>
   13e40:	ldr	r4, [r5, #4]!
   13e44:	cmp	r4, r8
   13e48:	beq	13eb8 <error@@Base+0x15e0>
   13e4c:	mov	r6, #0
   13e50:	mov	r7, r8
   13e54:	cmp	r7, #0
   13e58:	beq	13f30 <error@@Base+0x1658>
   13e5c:	ldr	r0, [r7, #12]
   13e60:	mov	r1, r9
   13e64:	bl	10b18 <utf8proc_encode_char@plt>
   13e68:	cmp	r0, #0
   13e6c:	beq	13f50 <error@@Base+0x1678>
   13e70:	ldr	r7, [r7, #4]
   13e74:	add	r6, r0, r6
   13e78:	cmp	r7, r4
   13e7c:	bne	13e54 <error@@Base+0x157c>
   13e80:	add	r0, r6, #1
   13e84:	bl	10b84 <malloc@plt>
   13e88:	mov	r6, r0
   13e8c:	mov	r9, #0
   13e90:	cmp	r8, #0
   13e94:	beq	13f70 <error@@Base+0x1698>
   13e98:	ldr	r0, [r8, #12]
   13e9c:	add	r1, r6, r9
   13ea0:	bl	10b18 <utf8proc_encode_char@plt>
   13ea4:	ldr	r8, [r8, #4]
   13ea8:	add	r9, r0, r9
   13eac:	cmp	r8, r4
   13eb0:	bne	13e90 <error@@Base+0x15b8>
   13eb4:	b	13ec8 <error@@Base+0x15f0>
   13eb8:	mov	r0, #1
   13ebc:	bl	10b84 <malloc@plt>
   13ec0:	mov	r6, r0
   13ec4:	mov	r9, #0
   13ec8:	mov	r0, #0
   13ecc:	mov	r1, #12
   13ed0:	strb	r0, [r6, r9]
   13ed4:	mov	r0, #1
   13ed8:	bl	12418 <__assert_fail@plt+0x17b0>
   13edc:	mov	r7, r0
   13ee0:	mov	r0, r6
   13ee4:	bl	10c08 <utf8proc_NFC@plt>
   13ee8:	str	r0, [r7, #8]
   13eec:	ldr	r0, [sp, #4]
   13ef0:	mov	r1, r7
   13ef4:	bl	11d30 <__assert_fail@plt+0x10c8>
   13ef8:	mov	r0, r6
   13efc:	bl	10af4 <free@plt>
   13f00:	add	r9, sp, #12
   13f04:	ldr	r8, [r5]
   13f08:	cmp	r8, #0
   13f0c:	str	r8, [sp, #16]
   13f10:	bne	137e4 <error@@Base+0xf0c>
   13f14:	b	13f28 <error@@Base+0x1650>
   13f18:	cmp	r0, #29
   13f1c:	beq	13e40 <error@@Base+0x1568>
   13f20:	add	r5, r5, #4
   13f24:	b	13f04 <error@@Base+0x162c>
   13f28:	sub	sp, fp, #28
   13f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f30:	ldr	r0, [pc, #92]	; 13f94 <error@@Base+0x16bc>
   13f34:	ldr	r1, [pc, #92]	; 13f98 <error@@Base+0x16c0>
   13f38:	ldr	r3, [pc, #92]	; 13f9c <error@@Base+0x16c4>
   13f3c:	mov	r2, #249	; 0xf9
   13f40:	add	r0, pc, r0
   13f44:	add	r1, pc, r1
   13f48:	add	r3, pc, r3
   13f4c:	bl	10c68 <__assert_fail@plt>
   13f50:	ldr	r0, [pc, #72]	; 13fa0 <error@@Base+0x16c8>
   13f54:	ldr	r1, [pc, #72]	; 13fa4 <error@@Base+0x16cc>
   13f58:	ldr	r3, [pc, #72]	; 13fa8 <error@@Base+0x16d0>
   13f5c:	mov	r2, #253	; 0xfd
   13f60:	add	r0, pc, r0
   13f64:	add	r1, pc, r1
   13f68:	add	r3, pc, r3
   13f6c:	bl	10c68 <__assert_fail@plt>
   13f70:	ldr	r0, [pc, #52]	; 13fac <error@@Base+0x16d4>
   13f74:	ldr	r1, [pc, #52]	; 13fb0 <error@@Base+0x16d8>
   13f78:	ldr	r3, [pc, #52]	; 13fb4 <error@@Base+0x16dc>
   13f7c:	movw	r2, #269	; 0x10d
   13f80:	add	r0, pc, r0
   13f84:	add	r1, pc, r1
   13f88:	add	r3, pc, r3
   13f8c:	bl	10c68 <__assert_fail@plt>
   13f90:	andeq	r1, r0, ip, lsl #9
   13f94:	andeq	r4, r0, pc, rrx
   13f98:	andeq	r4, r0, r4, rrx
   13f9c:	andeq	r4, r0, r7, ror r0
   13fa0:	andeq	r4, r0, r9, ror r0
   13fa4:	andeq	r4, r0, r4, asr #32
   13fa8:	andeq	r4, r0, r7, asr r0
   13fac:	andeq	r4, r0, pc, lsr #32
   13fb0:	andeq	r4, r0, r4, lsr #32
   13fb4:	andeq	r4, r0, r4, rrx
   13fb8:	push	{r4, sl, fp, lr}
   13fbc:	add	fp, sp, #8
   13fc0:	mov	r4, r0
   13fc4:	ldr	r0, [r0, #8]
   13fc8:	bl	10af4 <free@plt>
   13fcc:	mov	r0, r4
   13fd0:	pop	{r4, sl, fp, lr}
   13fd4:	b	10af4 <free@plt>
   13fd8:	push	{r4, r5, r6, sl, fp, lr}
   13fdc:	add	fp, sp, #16
   13fe0:	mov	r5, r1
   13fe4:	mov	r6, r0
   13fe8:	mov	r0, #1
   13fec:	mov	r1, #16
   13ff0:	mov	r4, r2
   13ff4:	bl	12418 <__assert_fail@plt+0x17b0>
   13ff8:	strb	r5, [r0, #8]
   13ffc:	mov	r1, r0
   14000:	str	r4, [r0, #12]
   14004:	mov	r0, r6
   14008:	pop	{r4, r5, r6, sl, fp, lr}
   1400c:	b	11d30 <__assert_fail@plt+0x10c8>
   14010:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14014:	add	fp, sp, #28
   14018:	sub	sp, sp, #124	; 0x7c
   1401c:	mov	r4, r2
   14020:	mov	r2, r1
   14024:	cmp	r1, #0
   14028:	str	r0, [sp, #16]
   1402c:	bne	1403c <error@@Base+0x1764>
   14030:	ldrb	r0, [r4]
   14034:	cmp	r0, #0
   14038:	bne	14368 <error@@Base+0x1a90>
   1403c:	ldr	r0, [sp, #16]
   14040:	ldr	r0, [r0, #4]
   14044:	str	r0, [sp, #4]
   14048:	mov	r0, r2
   1404c:	ldr	r1, [pc, #808]	; 1437c <error@@Base+0x1aa4>
   14050:	add	r1, pc, r1
   14054:	bl	124b8 <__assert_fail@plt+0x1850>
   14058:	mov	r6, r0
   1405c:	ldrb	r0, [r4]
   14060:	cmp	r0, #0
   14064:	beq	140ac <error@@Base+0x17d4>
   14068:	add	r0, sp, #20
   1406c:	mov	r1, #99	; 0x63
   14070:	mov	r2, r6
   14074:	bl	10b0c <fgets@plt>
   14078:	cmp	r0, #0
   1407c:	beq	1409c <error@@Base+0x17c4>
   14080:	ldr	r1, [pc, #760]	; 14380 <error@@Base+0x1aa8>
   14084:	add	r0, sp, #20
   14088:	mov	r2, #51	; 0x33
   1408c:	add	r1, pc, r1
   14090:	bl	10c44 <strncmp@plt>
   14094:	cmp	r0, #0
   14098:	beq	142f8 <error@@Base+0x1a20>
   1409c:	mov	r0, r6
   140a0:	bl	10b30 <rewind@plt>
   140a4:	mov	r5, #0
   140a8:	strb	r5, [r4, #11]
   140ac:	ldr	r9, [r4, #4]
   140b0:	ldrb	r8, [r4, #1]
   140b4:	mov	r0, r6
   140b8:	str	r4, [sp, #8]
   140bc:	cmp	r9, #0
   140c0:	movweq	r9, #94	; 0x5e
   140c4:	bl	10c5c <getc@plt>
   140c8:	cmn	r0, #1
   140cc:	beq	14190 <error@@Base+0x18b8>
   140d0:	add	r1, sp, #20
   140d4:	mov	sl, #0
   140d8:	sub	r4, fp, #32
   140dc:	add	r1, r1, #1
   140e0:	str	r1, [sp, #12]
   140e4:	ldr	r1, [pc, #668]	; 14388 <error@@Base+0x1ab0>
   140e8:	ldr	r1, [pc, r1]
   140ec:	add	r1, r1, r0
   140f0:	ldrsb	r5, [r1]
   140f4:	cmp	r5, #0
   140f8:	ble	14348 <error@@Base+0x1a70>
   140fc:	cmp	r5, #1
   14100:	strb	r0, [sp, #20]
   14104:	beq	14128 <error@@Base+0x1850>
   14108:	ldr	r0, [sp, #12]
   1410c:	sub	r7, r5, #1
   14110:	mov	r1, #1
   14114:	mov	r3, r6
   14118:	mov	r2, r7
   1411c:	bl	10b6c <fread@plt>
   14120:	cmp	r0, r7
   14124:	bne	1435c <error@@Base+0x1a84>
   14128:	add	r0, sp, #20
   1412c:	mov	r1, #4
   14130:	mov	r2, r4
   14134:	bl	10b78 <utf8proc_iterate@plt>
   14138:	cmp	r0, r5
   1413c:	bne	14354 <error@@Base+0x1a7c>
   14140:	ldr	r5, [fp, #-32]	; 0xffffffe0
   14144:	cmp	r8, #0
   14148:	beq	14158 <error@@Base+0x1880>
   1414c:	mov	r7, #1
   14150:	cmp	r5, r9
   14154:	beq	1417c <error@@Base+0x18a4>
   14158:	mov	r0, #1
   1415c:	mov	r1, #16
   14160:	bl	12418 <__assert_fail@plt+0x17b0>
   14164:	strb	sl, [r0, #8]
   14168:	mov	r1, r0
   1416c:	str	r5, [r0, #12]
   14170:	ldr	r0, [sp, #16]
   14174:	bl	11d30 <__assert_fail@plt+0x10c8>
   14178:	mov	r7, #0
   1417c:	mov	r0, r6
   14180:	bl	10c5c <getc@plt>
   14184:	cmn	r0, #1
   14188:	mov	sl, r7
   1418c:	bne	140e4 <error@@Base+0x180c>
   14190:	mov	r0, r6
   14194:	bl	12540 <__assert_fail@plt+0x18d8>
   14198:	ldr	r8, [sp, #8]
   1419c:	ldr	r9, [sp, #4]
   141a0:	ldrb	r0, [r8, #9]
   141a4:	cmp	r0, #0
   141a8:	beq	142b4 <error@@Base+0x19dc>
   141ac:	ldr	r0, [sp, #16]
   141b0:	cmp	r9, #0
   141b4:	addne	r0, r9, #4
   141b8:	ldr	r6, [r0]
   141bc:	cmp	r6, #0
   141c0:	beq	142b4 <error@@Base+0x19dc>
   141c4:	mov	r5, #32
   141c8:	mov	r7, r6
   141cc:	ldr	r4, [r7, #12]
   141d0:	mov	r0, r4
   141d4:	bl	10b00 <utf8proc_get_property@plt>
   141d8:	cmp	r4, #10
   141dc:	ble	141f8 <error@@Base+0x1920>
   141e0:	sub	r1, r4, #11
   141e4:	cmp	r1, #3
   141e8:	bcc	1421c <error@@Base+0x1944>
   141ec:	cmp	r4, #160	; 0xa0
   141f0:	beq	1421c <error@@Base+0x1944>
   141f4:	b	14208 <error@@Base+0x1930>
   141f8:	cmp	r4, #9
   141fc:	beq	1421c <error@@Base+0x1944>
   14200:	cmp	r4, #10
   14204:	beq	14220 <error@@Base+0x1948>
   14208:	ldrsh	r0, [r0]
   1420c:	sub	r0, r0, #23
   14210:	cmp	r0, #2
   14214:	strls	r5, [r7, #12]
   14218:	b	14220 <error@@Base+0x1948>
   1421c:	str	r5, [r7, #12]
   14220:	ldr	r7, [r7, #4]
   14224:	cmp	r7, #0
   14228:	bne	141cc <error@@Base+0x18f4>
   1422c:	mov	r4, #0
   14230:	ldr	r1, [r6, #12]
   14234:	ldr	r5, [r6, #4]
   14238:	cmp	r1, #32
   1423c:	bne	14278 <error@@Base+0x19a0>
   14240:	tst	r4, #255	; 0xff
   14244:	beq	14294 <error@@Base+0x19bc>
   14248:	cmp	r5, #0
   1424c:	ldrne	r1, [r5, #12]
   14250:	cmpne	r1, #10
   14254:	beq	14294 <error@@Base+0x19bc>
   14258:	mov	r0, #1
   1425c:	cmp	r1, #32
   14260:	bne	1428c <error@@Base+0x19b4>
   14264:	ldrb	r0, [r6, #8]
   14268:	ldrb	r1, [r5, #8]
   1426c:	orr	r0, r1, r0
   14270:	strb	r0, [r5, #8]
   14274:	b	14294 <error@@Base+0x19bc>
   14278:	subs	r0, r1, #10
   1427c:	movwne	r0, #1
   14280:	tst	r4, #255	; 0xff
   14284:	cmpeq	r1, #10
   14288:	beq	14294 <error@@Base+0x19bc>
   1428c:	mov	r4, r0
   14290:	b	142a8 <error@@Base+0x19d0>
   14294:	ldr	r0, [sp, #16]
   14298:	mov	r1, r6
   1429c:	bl	11e28 <__assert_fail@plt+0x11c0>
   142a0:	mov	r0, r6
   142a4:	bl	10af4 <free@plt>
   142a8:	cmp	r5, #0
   142ac:	mov	r6, r5
   142b0:	bne	14230 <error@@Base+0x1958>
   142b4:	ldrb	r0, [r8, #10]
   142b8:	cmp	r0, #0
   142bc:	beq	142f0 <error@@Base+0x1a18>
   142c0:	ldr	r0, [sp, #16]
   142c4:	cmp	r9, #0
   142c8:	addne	r0, r9, #4
   142cc:	ldr	r4, [r0]
   142d0:	cmp	r4, #0
   142d4:	beq	142f0 <error@@Base+0x1a18>
   142d8:	ldr	r0, [r4, #12]
   142dc:	bl	10b48 <utf8proc_tolower@plt>
   142e0:	str	r0, [r4, #12]
   142e4:	ldr	r4, [r4, #4]
   142e8:	cmp	r4, #0
   142ec:	bne	142d8 <error@@Base+0x1a00>
   142f0:	sub	sp, fp, #28
   142f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142f8:	ldr	r8, [pc, #132]	; 14384 <error@@Base+0x1aac>
   142fc:	mov	r7, #0
   14300:	add	r9, sp, #20
   14304:	mov	r5, #1
   14308:	add	r8, pc, r8
   1430c:	mov	r0, r9
   14310:	mov	r1, #99	; 0x63
   14314:	mov	r2, r6
   14318:	bl	10b0c <fgets@plt>
   1431c:	cmp	r0, #0
   14320:	beq	140a8 <error@@Base+0x17d0>
   14324:	mov	r0, r9
   14328:	mov	r1, r8
   1432c:	bl	10ad0 <strcmp@plt>
   14330:	cmp	r0, #0
   14334:	addeq	r7, r7, #1
   14338:	sxth	r7, r7
   1433c:	cmp	r7, #2
   14340:	blt	1430c <error@@Base+0x1a34>
   14344:	b	140a8 <error@@Base+0x17d0>
   14348:	ldr	r0, [pc, #68]	; 14394 <error@@Base+0x1abc>
   1434c:	add	r0, pc, r0
   14350:	bl	128d8 <error@@Base>
   14354:	bl	10c2c <utf8proc_errmsg@plt>
   14358:	bl	128d8 <error@@Base>
   1435c:	ldr	r0, [pc, #52]	; 14398 <error@@Base+0x1ac0>
   14360:	add	r0, pc, r0
   14364:	bl	128d8 <error@@Base>
   14368:	ldr	r0, [pc, #28]	; 1438c <error@@Base+0x1ab4>
   1436c:	ldr	r1, [pc, #28]	; 14390 <error@@Base+0x1ab8>
   14370:	add	r0, pc, r0
   14374:	add	r1, pc, r1
   14378:	bl	12928 <error@@Base+0x50>
   1437c:	andeq	r0, r0, r4, lsr #19
   14380:			; <UNDEFINED> instruction: 0x00003fbc
   14384:	andeq	r3, r0, r8, ror sp
   14388:	strdeq	r4, [r1], -r0
   1438c:	muleq	r0, r4, ip
   14390:	andeq	r3, r0, r0, lsr #25
   14394:	andeq	r3, r0, ip, ror #26
   14398:	andeq	r3, r0, r0, ror sp
   1439c:	push	{fp, lr}
   143a0:	mov	fp, sp
   143a4:	bl	10b18 <utf8proc_encode_char@plt>
   143a8:	cmp	r0, #0
   143ac:	sxtbgt	r0, r0
   143b0:	popgt	{fp, pc}
   143b4:	ldr	r0, [pc, #4]	; 143c0 <error@@Base+0x1ae8>
   143b8:	add	r0, pc, r0
   143bc:	bl	128d8 <error@@Base>
   143c0:	andeq	r3, r0, r6, ror #24
   143c4:	push	{r4, r5, r6, r7, fp, lr}
   143c8:	add	fp, sp, #16
   143cc:	mov	r6, r3
   143d0:	mov	r4, r2
   143d4:	mov	r5, r1
   143d8:	tst	r0, #255	; 0xff
   143dc:	beq	14424 <error@@Base+0x1b4c>
   143e0:	mov	r0, #94	; 0x5e
   143e4:	mov	r1, r4
   143e8:	bl	10b18 <utf8proc_encode_char@plt>
   143ec:	cmp	r0, #0
   143f0:	ble	1449c <error@@Base+0x1bc4>
   143f4:	sxtb	r7, r0
   143f8:	cmp	r5, #10
   143fc:	bne	14430 <error@@Base+0x1b58>
   14400:	ldr	r0, [pc, #224]	; 144e8 <error@@Base+0x1c10>
   14404:	ldr	r1, [pc, #224]	; 144ec <error@@Base+0x1c14>
   14408:	tst	r6, #255	; 0xff
   1440c:	add	r0, pc, r0
   14410:	add	r1, pc, r1
   14414:	moveq	r1, r0
   14418:	add	r0, r4, r7
   1441c:	pop	{r4, r5, r6, r7, fp, lr}
   14420:	b	10c20 <sprintf@plt>
   14424:	mov	r7, #0
   14428:	cmp	r5, #10
   1442c:	beq	14400 <error@@Base+0x1b28>
   14430:	mov	r0, r5
   14434:	bl	10b00 <utf8proc_get_property@plt>
   14438:	cmp	r5, #32
   1443c:	beq	14450 <error@@Base+0x1b78>
   14440:	ldrsh	r0, [r0]
   14444:	sub	r1, r0, #1
   14448:	cmp	r1, #22
   1444c:	bcs	144a8 <error@@Base+0x1bd0>
   14450:	mov	r0, r5
   14454:	bl	10bcc <utf8proc_category@plt>
   14458:	sub	r0, r0, #6
   1445c:	cmp	r0, #2
   14460:	bhi	1447c <error@@Base+0x1ba4>
   14464:	add	r1, r4, r7
   14468:	movw	r0, #9676	; 0x25cc
   1446c:	bl	10b18 <utf8proc_encode_char@plt>
   14470:	cmp	r0, #0
   14474:	ble	1449c <error@@Base+0x1bc4>
   14478:	sxtab	r7, r7, r0
   1447c:	add	r1, r4, r7
   14480:	mov	r0, r5
   14484:	bl	10b18 <utf8proc_encode_char@plt>
   14488:	cmp	r0, #0
   1448c:	sxtabgt	r0, r7, r0
   14490:	movgt	r1, #0
   14494:	strbgt	r1, [r4, r0]
   14498:	popgt	{r4, r5, r6, r7, fp, pc}
   1449c:	ldr	r0, [pc, #64]	; 144e4 <error@@Base+0x1c0c>
   144a0:	add	r0, pc, r0
   144a4:	bl	128d8 <error@@Base>
   144a8:	cmp	r0, #29
   144ac:	beq	14450 <error@@Base+0x1b78>
   144b0:	add	r0, r4, r7
   144b4:	cmp	r5, #255	; 0xff
   144b8:	bhi	144c8 <error@@Base+0x1bf0>
   144bc:	ldr	r1, [pc, #24]	; 144dc <error@@Base+0x1c04>
   144c0:	add	r1, pc, r1
   144c4:	b	144d0 <error@@Base+0x1bf8>
   144c8:	ldr	r1, [pc, #16]	; 144e0 <error@@Base+0x1c08>
   144cc:	add	r1, pc, r1
   144d0:	mov	r2, r5
   144d4:	pop	{r4, r5, r6, r7, fp, lr}
   144d8:	b	10c20 <sprintf@plt>
   144dc:	andeq	r3, r0, sl, ror fp
   144e0:	andeq	r3, r0, r5, ror fp
   144e4:	andeq	r3, r0, lr, ror fp
   144e8:	strdeq	r0, [r0], -r6
   144ec:	andeq	r3, r0, r5, lsr #24
   144f0:	push	{r4, r5, r6, r7, fp, lr}
   144f4:	add	fp, sp, #16
   144f8:	sub	sp, sp, #16
   144fc:	mov	r6, r2
   14500:	mov	r2, r1
   14504:	ldr	r1, [pc, #180]	; 145c0 <error@@Base+0x1ce8>
   14508:	mov	r5, r0
   1450c:	mov	r0, r2
   14510:	add	r1, pc, r1
   14514:	bl	124b8 <__assert_fail@plt+0x1850>
   14518:	mov	r4, r0
   1451c:	cmp	r6, #0
   14520:	beq	14574 <error@@Base+0x1c9c>
   14524:	ldr	r0, [pc, #152]	; 145c4 <error@@Base+0x1cec>
   14528:	mov	r1, #55	; 0x37
   1452c:	mov	r2, #1
   14530:	mov	r3, r4
   14534:	add	r0, pc, r0
   14538:	bl	10b60 <fwrite@plt>
   1453c:	ldr	r7, [pc, #132]	; 145c8 <error@@Base+0x1cf0>
   14540:	mov	r1, #55	; 0x37
   14544:	mov	r2, #1
   14548:	mov	r3, r4
   1454c:	add	r7, pc, r7
   14550:	mov	r0, r7
   14554:	bl	10b60 <fwrite@plt>
   14558:	mov	r0, r4
   1455c:	blx	r6
   14560:	mov	r0, r7
   14564:	mov	r1, #55	; 0x37
   14568:	mov	r2, #1
   1456c:	mov	r3, r4
   14570:	bl	10b60 <fwrite@plt>
   14574:	ldr	r6, [r5]
   14578:	cmp	r6, #0
   1457c:	beq	145b0 <error@@Base+0x1cd8>
   14580:	add	r5, sp, #7
   14584:	ldr	r1, [r6, #12]
   14588:	ldrb	r0, [r6, #8]
   1458c:	mov	r2, r5
   14590:	mov	r3, #0
   14594:	bl	143c4 <error@@Base+0x1aec>
   14598:	mov	r0, r5
   1459c:	mov	r1, r4
   145a0:	bl	10c38 <fputs@plt>
   145a4:	ldr	r6, [r6, #4]
   145a8:	cmp	r6, #0
   145ac:	bne	14584 <error@@Base+0x1cac>
   145b0:	mov	r0, r4
   145b4:	bl	12540 <__assert_fail@plt+0x18d8>
   145b8:	sub	sp, fp, #16
   145bc:	pop	{r4, r5, r6, r7, fp, pc}
   145c0:	andeq	r0, r0, fp, asr #9
   145c4:	andeq	r3, r0, r4, lsl fp
   145c8:	andeq	r3, r0, r4, lsr fp
   145cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145d0:	add	fp, sp, #28
   145d4:	sub	sp, sp, #4
   145d8:	mov	r9, #0
   145dc:	mov	sl, r0
   145e0:	str	r9, [sp]
   145e4:	ldrb	r0, [r1]
   145e8:	cmp	r0, #0
   145ec:	beq	1464c <error@@Base+0x1d74>
   145f0:	mov	r4, r1
   145f4:	mov	r8, sp
   145f8:	mov	r7, #1
   145fc:	mov	r0, r4
   14600:	mvn	r1, #0
   14604:	mov	r2, r8
   14608:	bl	10b78 <utf8proc_iterate@plt>
   1460c:	cmp	r0, #1
   14610:	blt	14654 <error@@Base+0x1d7c>
   14614:	ldr	r5, [sp]
   14618:	mov	r6, r0
   1461c:	mov	r0, #1
   14620:	mov	r1, #16
   14624:	bl	12418 <__assert_fail@plt+0x17b0>
   14628:	strb	r9, [r0, #8]
   1462c:	mov	r1, r0
   14630:	str	r5, [r0, #12]
   14634:	mov	r0, sl
   14638:	bl	11d30 <__assert_fail@plt+0x10c8>
   1463c:	ldrb	r0, [r4, r6]!
   14640:	cmp	r0, #0
   14644:	bne	145fc <error@@Base+0x1d24>
   14648:	b	14658 <error@@Base+0x1d80>
   1464c:	mov	r7, #1
   14650:	b	14658 <error@@Base+0x1d80>
   14654:	mov	r7, #0
   14658:	mov	r0, r7
   1465c:	sub	sp, fp, #28
   14660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14664:	cmp	r0, #2
   14668:	bxlt	lr
   1466c:	ldr	r3, [pc, #28]	; 14690 <error@@Base+0x1db8>
   14670:	add	r3, pc, r3
   14674:	str	r2, [r3]
   14678:	ldr	r2, [pc, #20]	; 14694 <error@@Base+0x1dbc>
   1467c:	add	r2, pc, r2
   14680:	str	r1, [r2]
   14684:	sub	r1, r0, #1
   14688:	mov	r0, #0
   1468c:	b	14698 <error@@Base+0x1dc0>
   14690:	ldrdeq	r6, [r1], -r8
   14694:	andeq	r6, r1, r8, asr #21
   14698:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1469c:	add	fp, sp, #24
   146a0:	mov	r8, r1
   146a4:	mov	r5, r0
   146a8:	b	146cc <error@@Base+0x1df4>
   146ac:	sub	r1, r4, #1
   146b0:	str	r6, [r0, r4, lsl #2]
   146b4:	cmp	r1, r5
   146b8:	movgt	r0, r5
   146bc:	blgt	14698 <error@@Base+0x1dc0>
   146c0:	add	r5, r7, #1
   146c4:	cmp	r5, r8
   146c8:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   146cc:	ldr	r0, [pc, #220]	; 147b0 <error@@Base+0x1ed8>
   146d0:	cmp	r5, r8
   146d4:	mov	r4, r8
   146d8:	mov	r7, r5
   146dc:	ldr	r0, [pc, r0]
   146e0:	ldr	r6, [r0, r5, lsl #2]
   146e4:	bge	146ac <error@@Base+0x1dd4>
   146e8:	mov	r7, r5
   146ec:	mov	r4, r8
   146f0:	cmp	r7, r4
   146f4:	blt	14708 <error@@Base+0x1e30>
   146f8:	b	1472c <error@@Base+0x1e54>
   146fc:	sub	r4, r4, #1
   14700:	cmp	r7, r4
   14704:	bge	1472c <error@@Base+0x1e54>
   14708:	ldr	r0, [pc, #164]	; 147b4 <error@@Base+0x1edc>
   1470c:	ldr	r0, [pc, r0]
   14710:	ldr	r1, [r0, r4, lsl #2]
   14714:	ldr	r2, [pc, #156]	; 147b8 <error@@Base+0x1ee0>
   14718:	mov	r0, r6
   1471c:	ldr	r2, [pc, r2]
   14720:	blx	r2
   14724:	cmn	r0, #1
   14728:	ble	146fc <error@@Base+0x1e24>
   1472c:	cmp	r7, r4
   14730:	beq	14748 <error@@Base+0x1e70>
   14734:	ldr	r0, [pc, #128]	; 147bc <error@@Base+0x1ee4>
   14738:	ldr	r0, [pc, r0]
   1473c:	ldr	r1, [r0, r4, lsl #2]
   14740:	str	r1, [r0, r7, lsl #2]
   14744:	add	r7, r7, #1
   14748:	cmp	r7, r4
   1474c:	bge	14774 <error@@Base+0x1e9c>
   14750:	ldr	r0, [pc, #104]	; 147c0 <error@@Base+0x1ee8>
   14754:	ldr	r0, [pc, r0]
   14758:	ldr	r1, [r0, r7, lsl #2]
   1475c:	ldr	r2, [pc, #96]	; 147c4 <error@@Base+0x1eec>
   14760:	mov	r0, r6
   14764:	ldr	r2, [pc, r2]
   14768:	blx	r2
   1476c:	cmp	r0, #1
   14770:	bge	14744 <error@@Base+0x1e6c>
   14774:	cmp	r7, r4
   14778:	bne	14788 <error@@Base+0x1eb0>
   1477c:	cmp	r7, r4
   14780:	blt	14700 <error@@Base+0x1e28>
   14784:	b	147a4 <error@@Base+0x1ecc>
   14788:	ldr	r0, [pc, #56]	; 147c8 <error@@Base+0x1ef0>
   1478c:	ldr	r0, [pc, r0]
   14790:	ldr	r1, [r0, r7, lsl #2]
   14794:	str	r1, [r0, r4, lsl #2]
   14798:	sub	r4, r4, #1
   1479c:	cmp	r7, r4
   147a0:	blt	14700 <error@@Base+0x1e28>
   147a4:	ldr	r0, [pc, #32]	; 147cc <error@@Base+0x1ef4>
   147a8:	ldr	r0, [pc, r0]
   147ac:	b	146ac <error@@Base+0x1dd4>
   147b0:	andeq	r6, r1, r8, ror #20
   147b4:	andeq	r6, r1, r8, lsr sl
   147b8:	andeq	r6, r1, ip, lsr #20
   147bc:	andeq	r6, r1, ip, lsl #20
   147c0:	strdeq	r6, [r1], -r0
   147c4:	andeq	r6, r1, r4, ror #19
   147c8:			; <UNDEFINED> instruction: 0x000169b8
   147cc:	muleq	r1, ip, r9
   147d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   147d4:	mov	r7, r0
   147d8:	ldr	r6, [pc, #72]	; 14828 <error@@Base+0x1f50>
   147dc:	ldr	r5, [pc, #72]	; 1482c <error@@Base+0x1f54>
   147e0:	add	r6, pc, r6
   147e4:	add	r5, pc, r5
   147e8:	sub	r6, r6, r5
   147ec:	mov	r8, r1
   147f0:	mov	r9, r2
   147f4:	bl	10aa4 <calloc@plt-0x20>
   147f8:	asrs	r6, r6, #2
   147fc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14800:	mov	r4, #0
   14804:	add	r4, r4, #1
   14808:	ldr	r3, [r5], #4
   1480c:	mov	r2, r9
   14810:	mov	r1, r8
   14814:	mov	r0, r7
   14818:	blx	r3
   1481c:	cmp	r6, r4
   14820:	bne	14804 <error@@Base+0x1f2c>
   14824:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14828:	andeq	r4, r1, ip, asr r5
   1482c:	andeq	r4, r1, r4, asr r5
   14830:	bx	lr

Disassembly of section .fini:

00014834 <.fini>:
   14834:	push	{r3, lr}
   14838:	pop	{r3, pc}
