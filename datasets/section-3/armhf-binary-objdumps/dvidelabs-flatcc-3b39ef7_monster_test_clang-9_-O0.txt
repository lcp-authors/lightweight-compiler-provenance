
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

00012d70 <.init>:
   12d70:	push	{r3, lr}
   12d74:	bl	12eb4 <_start@@Base+0x3c>
   12d78:	pop	{r3, pc}

Disassembly of section .plt:

00012d7c <strcmp@plt-0x14>:
   12d7c:	push	{lr}		; (str lr, [sp, #-4]!)
   12d80:	ldr	lr, [pc, #4]	; 12d8c <strcmp@plt-0x4>
   12d84:	add	lr, pc, lr
   12d88:	ldr	pc, [lr, #8]!
   12d8c:	andeq	r5, r3, r4, ror r2

00012d90 <strcmp@plt>:
   12d90:	add	ip, pc, #0, 12
   12d94:	add	ip, ip, #217088	; 0x35000
   12d98:	ldr	pc, [ip, #628]!	; 0x274

00012d9c <printf@plt>:
   12d9c:	add	ip, pc, #0, 12
   12da0:	add	ip, ip, #217088	; 0x35000
   12da4:	ldr	pc, [ip, #620]!	; 0x26c

00012da8 <free@plt>:
   12da8:	add	ip, pc, #0, 12
   12dac:	add	ip, ip, #217088	; 0x35000
   12db0:	ldr	pc, [ip, #612]!	; 0x264

00012db4 <memcpy@plt>:
   12db4:	add	ip, pc, #0, 12
   12db8:	add	ip, ip, #217088	; 0x35000
   12dbc:	ldr	pc, [ip, #604]!	; 0x25c

00012dc0 <memcmp@plt>:
   12dc0:	add	ip, pc, #0, 12
   12dc4:	add	ip, ip, #217088	; 0x35000
   12dc8:	ldr	pc, [ip, #596]!	; 0x254

00012dcc <realloc@plt>:
   12dcc:	add	ip, pc, #0, 12
   12dd0:	add	ip, ip, #217088	; 0x35000
   12dd4:	ldr	pc, [ip, #588]!	; 0x24c

00012dd8 <gettimeofday@plt>:
   12dd8:	add	ip, pc, #0, 12
   12ddc:	add	ip, ip, #217088	; 0x35000
   12de0:	ldr	pc, [ip, #580]!	; 0x244

00012de4 <malloc@plt>:
   12de4:	add	ip, pc, #0, 12
   12de8:	add	ip, ip, #217088	; 0x35000
   12dec:	ldr	pc, [ip, #572]!	; 0x23c

00012df0 <__libc_start_main@plt>:
   12df0:	add	ip, pc, #0, 12
   12df4:	add	ip, ip, #217088	; 0x35000
   12df8:	ldr	pc, [ip, #564]!	; 0x234

00012dfc <__gmon_start__@plt>:
   12dfc:	add	ip, pc, #0, 12
   12e00:	add	ip, ip, #217088	; 0x35000
   12e04:	ldr	pc, [ip, #556]!	; 0x22c

00012e08 <strlen@plt>:
   12e08:	add	ip, pc, #0, 12
   12e0c:	add	ip, ip, #217088	; 0x35000
   12e10:	ldr	pc, [ip, #548]!	; 0x224

00012e14 <fprintf@plt>:
   12e14:	add	ip, pc, #0, 12
   12e18:	add	ip, ip, #217088	; 0x35000
   12e1c:	ldr	pc, [ip, #540]!	; 0x21c

00012e20 <posix_memalign@plt>:
   12e20:	add	ip, pc, #0, 12
   12e24:	add	ip, ip, #217088	; 0x35000
   12e28:	ldr	pc, [ip, #532]!	; 0x214

00012e2c <memset@plt>:
   12e2c:	add	ip, pc, #0, 12
   12e30:	add	ip, ip, #217088	; 0x35000
   12e34:	ldr	pc, [ip, #524]!	; 0x20c

00012e38 <strncpy@plt>:
   12e38:	add	ip, pc, #0, 12
   12e3c:	add	ip, ip, #217088	; 0x35000
   12e40:	ldr	pc, [ip, #516]!	; 0x204

00012e44 <memchr@plt>:
   12e44:	add	ip, pc, #0, 12
   12e48:	add	ip, ip, #217088	; 0x35000
   12e4c:	ldr	pc, [ip, #508]!	; 0x1fc

00012e50 <strncmp@plt>:
   12e50:	add	ip, pc, #0, 12
   12e54:	add	ip, ip, #217088	; 0x35000
   12e58:	ldr	pc, [ip, #500]!	; 0x1f4

00012e5c <abort@plt>:
   12e5c:	add	ip, pc, #0, 12
   12e60:	add	ip, ip, #217088	; 0x35000
   12e64:	ldr	pc, [ip, #492]!	; 0x1ec

00012e68 <__assert_fail@plt>:
   12e68:	add	ip, pc, #0, 12
   12e6c:	add	ip, ip, #217088	; 0x35000
   12e70:	ldr	pc, [ip, #484]!	; 0x1e4

Disassembly of section .text:

00012e78 <_start@@Base>:
   12e78:	mov	fp, #0
   12e7c:	mov	lr, #0
   12e80:	pop	{r1}		; (ldr r1, [sp], #4)
   12e84:	mov	r2, sp
   12e88:	push	{r2}		; (str r2, [sp, #-4]!)
   12e8c:	push	{r0}		; (str r0, [sp, #-4]!)
   12e90:	ldr	ip, [pc, #16]	; 12ea8 <_start@@Base+0x30>
   12e94:	push	{ip}		; (str ip, [sp, #-4]!)
   12e98:	ldr	r0, [pc, #12]	; 12eac <_start@@Base+0x34>
   12e9c:	ldr	r3, [pc, #12]	; 12eb0 <_start@@Base+0x38>
   12ea0:	bl	12df0 <__libc_start_main@plt>
   12ea4:	bl	12e5c <abort@plt>
   12ea8:	ldrdeq	r1, [r3], -r0
   12eac:			; <UNDEFINED> instruction: 0x00022fb8
   12eb0:	andeq	r1, r3, r0, ror r6
   12eb4:	ldr	r3, [pc, #20]	; 12ed0 <_start@@Base+0x58>
   12eb8:	ldr	r2, [pc, #20]	; 12ed4 <_start@@Base+0x5c>
   12ebc:	add	r3, pc, r3
   12ec0:	ldr	r2, [r3, r2]
   12ec4:	cmp	r2, #0
   12ec8:	bxeq	lr
   12ecc:	b	12dfc <__gmon_start__@plt>
   12ed0:	andeq	r5, r3, ip, lsr r1
   12ed4:	andeq	r0, r0, r0, rrx
   12ed8:	ldr	r0, [pc, #24]	; 12ef8 <_start@@Base+0x80>
   12edc:	ldr	r3, [pc, #24]	; 12efc <_start@@Base+0x84>
   12ee0:	cmp	r3, r0
   12ee4:	bxeq	lr
   12ee8:	ldr	r3, [pc, #16]	; 12f00 <_start@@Base+0x88>
   12eec:	cmp	r3, #0
   12ef0:	bxeq	lr
   12ef4:	bx	r3
   12ef8:	andeq	r8, r4, ip, ror r0
   12efc:	andeq	r8, r4, ip, ror r0
   12f00:	andeq	r0, r0, r0
   12f04:	ldr	r0, [pc, #36]	; 12f30 <_start@@Base+0xb8>
   12f08:	ldr	r1, [pc, #36]	; 12f34 <_start@@Base+0xbc>
   12f0c:	sub	r1, r1, r0
   12f10:	asr	r1, r1, #2
   12f14:	add	r1, r1, r1, lsr #31
   12f18:	asrs	r1, r1, #1
   12f1c:	bxeq	lr
   12f20:	ldr	r3, [pc, #16]	; 12f38 <_start@@Base+0xc0>
   12f24:	cmp	r3, #0
   12f28:	bxeq	lr
   12f2c:	bx	r3
   12f30:	andeq	r8, r4, ip, ror r0
   12f34:	andeq	r8, r4, ip, ror r0
   12f38:	andeq	r0, r0, r0
   12f3c:	push	{r4, lr}
   12f40:	ldr	r4, [pc, #24]	; 12f60 <_start@@Base+0xe8>
   12f44:	ldrb	r3, [r4]
   12f48:	cmp	r3, #0
   12f4c:	popne	{r4, pc}
   12f50:	bl	12ed8 <_start@@Base+0x60>
   12f54:	mov	r3, #1
   12f58:	strb	r3, [r4]
   12f5c:	pop	{r4, pc}
   12f60:	andeq	r8, r4, ip, ror r0
   12f64:	b	12f04 <_start@@Base+0x8c>

00012f68 <verify_empty_monster@@Base>:
   12f68:	push	{fp, lr}
   12f6c:	mov	fp, sp
   12f70:	sub	sp, sp, #32
   12f74:	ldr	r1, [pc, #480]	; 1315c <verify_empty_monster@@Base+0x1f4>
   12f78:	add	r1, pc, r1
   12f7c:	str	r0, [fp, #-8]
   12f80:	ldr	r0, [fp, #-8]
   12f84:	bl	13184 <verify_empty_monster@@Base+0x21c>
   12f88:	ldr	r1, [pc, #456]	; 13158 <verify_empty_monster@@Base+0x1f0>
   12f8c:	add	r1, pc, r1
   12f90:	str	r0, [fp, #-12]
   12f94:	ldr	r0, [fp, #-8]
   12f98:	bl	13184 <verify_empty_monster@@Base+0x21c>
   12f9c:	str	r0, [sp, #16]
   12fa0:	ldr	r0, [fp, #-8]
   12fa4:	movw	r1, #0
   12fa8:	bl	13184 <verify_empty_monster@@Base+0x21c>
   12fac:	ldr	r1, [pc, #416]	; 13154 <verify_empty_monster@@Base+0x1ec>
   12fb0:	add	r1, pc, r1
   12fb4:	str	r0, [sp, #12]
   12fb8:	ldr	r0, [fp, #-8]
   12fbc:	bl	13184 <verify_empty_monster@@Base+0x21c>
   12fc0:	str	r0, [sp, #8]
   12fc4:	ldr	r0, [fp, #-8]
   12fc8:	bl	131f4 <verify_empty_monster@@Base+0x28c>
   12fcc:	str	r0, [sp, #4]
   12fd0:	ldr	r0, [fp, #-12]
   12fd4:	movw	r1, #0
   12fd8:	cmp	r0, r1
   12fdc:	bne	12ff8 <verify_empty_monster@@Base+0x90>
   12fe0:	ldr	r0, [pc, #376]	; 13160 <verify_empty_monster@@Base+0x1f8>
   12fe4:	add	r0, pc, r0
   12fe8:	bl	12d9c <printf@plt>
   12fec:	mvn	r1, #0
   12ff0:	str	r1, [fp, #-4]
   12ff4:	b	13148 <verify_empty_monster@@Base+0x1e0>
   12ff8:	ldr	r0, [sp, #16]
   12ffc:	movw	r1, #0
   13000:	cmp	r0, r1
   13004:	beq	13020 <verify_empty_monster@@Base+0xb8>
   13008:	ldr	r0, [pc, #368]	; 13180 <verify_empty_monster@@Base+0x218>
   1300c:	add	r0, pc, r0
   13010:	bl	12d9c <printf@plt>
   13014:	mvn	r1, #0
   13018:	str	r1, [fp, #-4]
   1301c:	b	13148 <verify_empty_monster@@Base+0x1e0>
   13020:	ldr	r0, [sp, #12]
   13024:	ldr	r1, [fp, #-12]
   13028:	cmp	r0, r1
   1302c:	beq	13048 <verify_empty_monster@@Base+0xe0>
   13030:	ldr	r0, [pc, #324]	; 1317c <verify_empty_monster@@Base+0x214>
   13034:	add	r0, pc, r0
   13038:	bl	12d9c <printf@plt>
   1303c:	mvn	r1, #0
   13040:	str	r1, [fp, #-4]
   13044:	b	13148 <verify_empty_monster@@Base+0x1e0>
   13048:	ldr	r0, [sp, #8]
   1304c:	ldr	r1, [fp, #-12]
   13050:	cmp	r0, r1
   13054:	beq	13070 <verify_empty_monster@@Base+0x108>
   13058:	ldr	r0, [pc, #280]	; 13178 <verify_empty_monster@@Base+0x210>
   1305c:	add	r0, pc, r0
   13060:	bl	12d9c <printf@plt>
   13064:	mvn	r1, #0
   13068:	str	r1, [fp, #-4]
   1306c:	b	13148 <verify_empty_monster@@Base+0x1e0>
   13070:	ldr	r0, [sp, #4]
   13074:	ldr	r1, [fp, #-12]
   13078:	cmp	r0, r1
   1307c:	beq	13098 <verify_empty_monster@@Base+0x130>
   13080:	ldr	r0, [pc, #236]	; 13174 <verify_empty_monster@@Base+0x20c>
   13084:	add	r0, pc, r0
   13088:	bl	12d9c <printf@plt>
   1308c:	mvn	r1, #0
   13090:	str	r1, [fp, #-4]
   13094:	b	13148 <verify_empty_monster@@Base+0x1e0>
   13098:	ldr	r0, [fp, #-12]
   1309c:	bl	13270 <verify_empty_monster@@Base+0x308>
   130a0:	sxth	r0, r0
   130a4:	cmp	r0, #100	; 0x64
   130a8:	beq	130c4 <verify_empty_monster@@Base+0x15c>
   130ac:	ldr	r0, [pc, #188]	; 13170 <verify_empty_monster@@Base+0x208>
   130b0:	add	r0, pc, r0
   130b4:	bl	12d9c <printf@plt>
   130b8:	mvn	r1, #0
   130bc:	str	r1, [fp, #-4]
   130c0:	b	13148 <verify_empty_monster@@Base+0x1e0>
   130c4:	ldr	r0, [fp, #-12]
   130c8:	bl	13364 <verify_empty_monster@@Base+0x3fc>
   130cc:	cmp	r0, #0
   130d0:	beq	130ec <verify_empty_monster@@Base+0x184>
   130d4:	ldr	r0, [pc, #144]	; 1316c <verify_empty_monster@@Base+0x204>
   130d8:	add	r0, pc, r0
   130dc:	bl	12d9c <printf@plt>
   130e0:	mvn	r1, #0
   130e4:	str	r1, [fp, #-4]
   130e8:	b	13148 <verify_empty_monster@@Base+0x1e0>
   130ec:	ldr	r0, [fp, #-12]
   130f0:	bl	13430 <verify_empty_monster@@Base+0x4c8>
   130f4:	cmp	r0, #0
   130f8:	beq	13114 <verify_empty_monster@@Base+0x1ac>
   130fc:	ldr	r0, [pc, #100]	; 13168 <verify_empty_monster@@Base+0x200>
   13100:	add	r0, pc, r0
   13104:	bl	12d9c <printf@plt>
   13108:	mvn	r1, #0
   1310c:	str	r1, [fp, #-4]
   13110:	b	13148 <verify_empty_monster@@Base+0x1e0>
   13114:	ldr	r0, [fp, #-12]
   13118:	bl	134fc <verify_empty_monster@@Base+0x594>
   1311c:	movw	r1, #0
   13120:	cmp	r0, r1
   13124:	beq	13140 <verify_empty_monster@@Base+0x1d8>
   13128:	ldr	r0, [pc, #52]	; 13164 <verify_empty_monster@@Base+0x1fc>
   1312c:	add	r0, pc, r0
   13130:	bl	12d9c <printf@plt>
   13134:	mvn	r1, #0
   13138:	str	r1, [fp, #-4]
   1313c:	b	13148 <verify_empty_monster@@Base+0x1e0>
   13140:	movw	r0, #0
   13144:	str	r0, [fp, #-4]
   13148:	ldr	r0, [fp, #-4]
   1314c:	mov	sp, fp
   13150:	pop	{fp, pc}
   13154:	andeq	lr, r1, r2, lsr r7
   13158:	andeq	lr, r1, r1, asr r7
   1315c:	andeq	lr, r1, r0, ror #14
   13160:	andeq	lr, r1, r4, lsl #14
   13164:	strdeq	lr, [r1], -r3
   13168:	andeq	lr, r1, r3, lsl #14
   1316c:	andeq	lr, r1, sp, lsl #14
   13170:	andeq	lr, r1, r2, lsl r7
   13174:	andeq	lr, r1, r3, lsl r7
   13178:	andeq	lr, r1, r8, lsl #14
   1317c:	strdeq	lr, [r1], -r9
   13180:	strdeq	lr, [r1], -r3
   13184:	push	{fp, lr}
   13188:	mov	fp, sp
   1318c:	sub	sp, sp, #16
   13190:	str	r0, [fp, #-4]
   13194:	str	r1, [sp, #8]
   13198:	ldr	r0, [fp, #-4]
   1319c:	movw	r1, #0
   131a0:	cmp	r0, r1
   131a4:	beq	131bc <verify_empty_monster@@Base+0x254>
   131a8:	ldr	r0, [fp, #-4]
   131ac:	ldr	r1, [sp, #8]
   131b0:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   131b4:	cmp	r0, #0
   131b8:	bne	131c8 <verify_empty_monster@@Base+0x260>
   131bc:	movw	r0, #0
   131c0:	str	r0, [sp, #4]
   131c4:	b	131e8 <verify_empty_monster@@Base+0x280>
   131c8:	ldr	r0, [fp, #-4]
   131cc:	ldr	r1, [fp, #-4]
   131d0:	str	r0, [sp]
   131d4:	mov	r0, r1
   131d8:	bl	23414 <main@@Base+0x45c>
   131dc:	ldr	r1, [sp]
   131e0:	add	r0, r1, r0
   131e4:	str	r0, [sp, #4]
   131e8:	ldr	r0, [sp, #4]
   131ec:	mov	sp, fp
   131f0:	pop	{fp, pc}
   131f4:	push	{fp, lr}
   131f8:	mov	fp, sp
   131fc:	sub	sp, sp, #16
   13200:	ldr	r1, [pc, #100]	; 1326c <verify_empty_monster@@Base+0x304>
   13204:	add	r1, pc, r1
   13208:	str	r0, [fp, #-4]
   1320c:	str	r1, [sp, #8]
   13210:	ldr	r0, [fp, #-4]
   13214:	movw	r1, #0
   13218:	cmp	r0, r1
   1321c:	beq	13234 <verify_empty_monster@@Base+0x2cc>
   13220:	ldr	r0, [fp, #-4]
   13224:	ldr	r1, [sp, #8]
   13228:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   1322c:	cmp	r0, #0
   13230:	bne	13240 <verify_empty_monster@@Base+0x2d8>
   13234:	movw	r0, #0
   13238:	str	r0, [sp, #4]
   1323c:	b	13260 <verify_empty_monster@@Base+0x2f8>
   13240:	ldr	r0, [fp, #-4]
   13244:	ldr	r1, [fp, #-4]
   13248:	str	r0, [sp]
   1324c:	mov	r0, r1
   13250:	bl	23414 <main@@Base+0x45c>
   13254:	ldr	r1, [sp]
   13258:	add	r0, r1, r0
   1325c:	str	r0, [sp, #4]
   13260:	ldr	r0, [sp, #4]
   13264:	mov	sp, fp
   13268:	pop	{fp, pc}
   1326c:	ldrdeq	lr, [r1], -r4
   13270:	push	{fp, lr}
   13274:	mov	fp, sp
   13278:	sub	sp, sp, #24
   1327c:	str	r0, [fp, #-4]
   13280:	movw	r0, #0
   13284:	strh	r0, [fp, #-6]
   13288:	ldr	r0, [fp, #-4]
   1328c:	movw	r1, #0
   13290:	cmp	r0, r1
   13294:	beq	132a0 <verify_empty_monster@@Base+0x338>
   13298:	b	1329c <verify_empty_monster@@Base+0x334>
   1329c:	b	132c0 <verify_empty_monster@@Base+0x358>
   132a0:	ldr	r0, [pc, #176]	; 13358 <verify_empty_monster@@Base+0x3f0>
   132a4:	add	r0, pc, r0
   132a8:	ldr	r1, [pc, #172]	; 1335c <verify_empty_monster@@Base+0x3f4>
   132ac:	add	r1, pc, r1
   132b0:	ldr	r2, [pc, #168]	; 13360 <verify_empty_monster@@Base+0x3f8>
   132b4:	add	r3, pc, r2
   132b8:	movw	r2, #697	; 0x2b9
   132bc:	bl	12e68 <__assert_fail@plt>
   132c0:	mov	r0, #2
   132c4:	strh	r0, [fp, #-8]
   132c8:	ldr	r0, [fp, #-4]
   132cc:	str	r0, [sp, #8]
   132d0:	bl	2344c <main@@Base+0x494>
   132d4:	ldr	r1, [sp, #8]
   132d8:	sub	r0, r1, r0
   132dc:	str	r0, [sp, #12]
   132e0:	ldr	r0, [sp, #12]
   132e4:	bl	23470 <main@@Base+0x4b8>
   132e8:	ldrh	r1, [fp, #-8]
   132ec:	add	r1, r1, #3
   132f0:	lsl	r1, r1, #1
   132f4:	cmp	r0, r1
   132f8:	bcc	13314 <verify_empty_monster@@Base+0x3ac>
   132fc:	ldr	r0, [sp, #12]
   13300:	ldrh	r1, [fp, #-8]
   13304:	add	r0, r0, r1, lsl #1
   13308:	add	r0, r0, #4
   1330c:	bl	23470 <main@@Base+0x4b8>
   13310:	strh	r0, [fp, #-6]
   13314:	ldrh	r0, [fp, #-6]
   13318:	cmp	r0, #0
   1331c:	beq	1333c <verify_empty_monster@@Base+0x3d4>
   13320:	ldr	r0, [fp, #-4]
   13324:	ldrh	r1, [fp, #-6]
   13328:	add	r0, r0, r1
   1332c:	bl	23498 <main@@Base+0x4e0>
   13330:	sxth	r0, r0
   13334:	str	r0, [sp, #4]
   13338:	b	13348 <verify_empty_monster@@Base+0x3e0>
   1333c:	movw	r0, #100	; 0x64
   13340:	str	r0, [sp, #4]
   13344:	b	13348 <verify_empty_monster@@Base+0x3e0>
   13348:	ldr	r0, [sp, #4]
   1334c:	sxth	r0, r0
   13350:	mov	sp, fp
   13354:	pop	{fp, pc}
   13358:	andeq	r0, r2, r9, asr #26
   1335c:	andeq	r0, r2, r7, ror #26
   13360:	ldrdeq	r0, [r2], -r8
   13364:	push	{fp, lr}
   13368:	mov	fp, sp
   1336c:	sub	sp, sp, #16
   13370:	str	r0, [fp, #-4]
   13374:	movw	r0, #0
   13378:	strh	r0, [fp, #-6]
   1337c:	ldr	r0, [fp, #-4]
   13380:	movw	r1, #0
   13384:	cmp	r0, r1
   13388:	beq	13394 <verify_empty_monster@@Base+0x42c>
   1338c:	b	13390 <verify_empty_monster@@Base+0x428>
   13390:	b	133b4 <verify_empty_monster@@Base+0x44c>
   13394:	ldr	r0, [pc, #136]	; 13424 <verify_empty_monster@@Base+0x4bc>
   13398:	add	r0, pc, r0
   1339c:	ldr	r1, [pc, #132]	; 13428 <verify_empty_monster@@Base+0x4c0>
   133a0:	add	r1, pc, r1
   133a4:	ldr	r2, [pc, #128]	; 1342c <verify_empty_monster@@Base+0x4c4>
   133a8:	add	r3, pc, r2
   133ac:	movw	r2, #697	; 0x2b9
   133b0:	bl	12e68 <__assert_fail@plt>
   133b4:	mov	r0, #2
   133b8:	strh	r0, [sp, #8]
   133bc:	ldr	r0, [fp, #-4]
   133c0:	str	r0, [sp]
   133c4:	bl	2344c <main@@Base+0x494>
   133c8:	ldr	r1, [sp]
   133cc:	sub	r0, r1, r0
   133d0:	str	r0, [sp, #4]
   133d4:	ldr	r0, [sp, #4]
   133d8:	bl	23470 <main@@Base+0x4b8>
   133dc:	ldrh	r1, [sp, #8]
   133e0:	add	r1, r1, #3
   133e4:	lsl	r1, r1, #1
   133e8:	cmp	r0, r1
   133ec:	bcc	13408 <verify_empty_monster@@Base+0x4a0>
   133f0:	ldr	r0, [sp, #4]
   133f4:	ldrh	r1, [sp, #8]
   133f8:	add	r0, r0, r1, lsl #1
   133fc:	add	r0, r0, #4
   13400:	bl	23470 <main@@Base+0x4b8>
   13404:	strh	r0, [fp, #-6]
   13408:	ldrh	r0, [fp, #-6]
   1340c:	cmp	r0, #0
   13410:	movw	r0, #0
   13414:	movne	r0, #1
   13418:	and	r0, r0, #1
   1341c:	mov	sp, fp
   13420:	pop	{fp, pc}
   13424:	andeq	r0, r2, r5, asr ip
   13428:	andeq	r0, r2, r3, ror ip
   1342c:	andeq	r0, r2, r6, lsr #26
   13430:	push	{fp, lr}
   13434:	mov	fp, sp
   13438:	sub	sp, sp, #16
   1343c:	str	r0, [fp, #-4]
   13440:	movw	r0, #0
   13444:	strh	r0, [fp, #-6]
   13448:	ldr	r0, [fp, #-4]
   1344c:	movw	r1, #0
   13450:	cmp	r0, r1
   13454:	beq	13460 <verify_empty_monster@@Base+0x4f8>
   13458:	b	1345c <verify_empty_monster@@Base+0x4f4>
   1345c:	b	13480 <verify_empty_monster@@Base+0x518>
   13460:	ldr	r0, [pc, #136]	; 134f0 <verify_empty_monster@@Base+0x588>
   13464:	add	r0, pc, r0
   13468:	ldr	r1, [pc, #132]	; 134f4 <verify_empty_monster@@Base+0x58c>
   1346c:	add	r1, pc, r1
   13470:	ldr	r2, [pc, #128]	; 134f8 <verify_empty_monster@@Base+0x590>
   13474:	add	r3, pc, r2
   13478:	movw	r2, #696	; 0x2b8
   1347c:	bl	12e68 <__assert_fail@plt>
   13480:	mov	r0, #0
   13484:	strh	r0, [sp, #8]
   13488:	ldr	r0, [fp, #-4]
   1348c:	str	r0, [sp]
   13490:	bl	2344c <main@@Base+0x494>
   13494:	ldr	r1, [sp]
   13498:	sub	r0, r1, r0
   1349c:	str	r0, [sp, #4]
   134a0:	ldr	r0, [sp, #4]
   134a4:	bl	23470 <main@@Base+0x4b8>
   134a8:	ldrh	r1, [sp, #8]
   134ac:	add	r1, r1, #3
   134b0:	lsl	r1, r1, #1
   134b4:	cmp	r0, r1
   134b8:	bcc	134d4 <verify_empty_monster@@Base+0x56c>
   134bc:	ldr	r0, [sp, #4]
   134c0:	ldrh	r1, [sp, #8]
   134c4:	add	r0, r0, r1, lsl #1
   134c8:	add	r0, r0, #4
   134cc:	bl	23470 <main@@Base+0x4b8>
   134d0:	strh	r0, [fp, #-6]
   134d4:	ldrh	r0, [fp, #-6]
   134d8:	cmp	r0, #0
   134dc:	movw	r0, #0
   134e0:	movne	r0, #1
   134e4:	and	r0, r0, #1
   134e8:	mov	sp, fp
   134ec:	pop	{fp, pc}
   134f0:	andeq	r0, r2, r9, lsl #23
   134f4:	andeq	r0, r2, r7, lsr #23
   134f8:	andeq	r0, r2, r3, lsr #25
   134fc:	push	{fp, lr}
   13500:	mov	fp, sp
   13504:	sub	sp, sp, #24
   13508:	str	r0, [fp, #-8]
   1350c:	movw	r0, #0
   13510:	strh	r0, [fp, #-10]
   13514:	ldr	r0, [fp, #-8]
   13518:	movw	r1, #0
   1351c:	cmp	r0, r1
   13520:	beq	1352c <verify_empty_monster@@Base+0x5c4>
   13524:	b	13528 <verify_empty_monster@@Base+0x5c0>
   13528:	b	1354c <verify_empty_monster@@Base+0x5e4>
   1352c:	ldr	r0, [pc, #160]	; 135d4 <verify_empty_monster@@Base+0x66c>
   13530:	add	r0, pc, r0
   13534:	ldr	r1, [pc, #156]	; 135d8 <verify_empty_monster@@Base+0x670>
   13538:	add	r1, pc, r1
   1353c:	ldr	r2, [pc, #152]	; 135dc <verify_empty_monster@@Base+0x674>
   13540:	add	r3, pc, r2
   13544:	movw	r2, #696	; 0x2b8
   13548:	bl	12e68 <__assert_fail@plt>
   1354c:	mov	r0, #0
   13550:	strh	r0, [sp, #12]
   13554:	ldr	r0, [fp, #-8]
   13558:	str	r0, [sp, #4]
   1355c:	bl	2344c <main@@Base+0x494>
   13560:	ldr	r1, [sp, #4]
   13564:	sub	r0, r1, r0
   13568:	str	r0, [sp, #8]
   1356c:	ldr	r0, [sp, #8]
   13570:	bl	23470 <main@@Base+0x4b8>
   13574:	ldrh	r1, [sp, #12]
   13578:	add	r1, r1, #3
   1357c:	lsl	r1, r1, #1
   13580:	cmp	r0, r1
   13584:	bcc	135a0 <verify_empty_monster@@Base+0x638>
   13588:	ldr	r0, [sp, #8]
   1358c:	ldrh	r1, [sp, #12]
   13590:	add	r0, r0, r1, lsl #1
   13594:	add	r0, r0, #4
   13598:	bl	23470 <main@@Base+0x4b8>
   1359c:	strh	r0, [fp, #-10]
   135a0:	ldrsh	r0, [fp, #-10]
   135a4:	cmp	r0, #0
   135a8:	beq	135c0 <verify_empty_monster@@Base+0x658>
   135ac:	ldr	r0, [fp, #-8]
   135b0:	ldrh	r1, [fp, #-10]
   135b4:	add	r0, r0, r1
   135b8:	str	r0, [fp, #-4]
   135bc:	b	135c8 <verify_empty_monster@@Base+0x660>
   135c0:	movw	r0, #0
   135c4:	str	r0, [fp, #-4]
   135c8:	ldr	r0, [fp, #-4]
   135cc:	mov	sp, fp
   135d0:	pop	{fp, pc}
   135d4:			; <UNDEFINED> instruction: 0x00020abd
   135d8:	ldrdeq	r0, [r2], -fp
   135dc:	andeq	r0, r2, r1, lsr #24

000135e0 <test_enums@@Base>:
   135e0:	sub	sp, sp, #4
   135e4:	str	r0, [sp]
   135e8:	movw	r0, #0
   135ec:	add	sp, sp, #4
   135f0:	bx	lr
   135f4:	nop	{0}

000135f8 <test_type_aliases@@Base>:
   135f8:	push	{fp, lr}
   135fc:	mov	fp, sp
   13600:	sub	sp, sp, #96	; 0x60
   13604:	str	r0, [fp, #-4]
   13608:	movw	r0, #0
   1360c:	str	r0, [fp, #-8]
   13610:	str	r0, [fp, #-12]
   13614:	ldr	r0, [fp, #-4]
   13618:	bl	286d4 <flatcc_builder_reset@@Base>
   1361c:	ldr	r1, [fp, #-4]
   13620:	str	r0, [fp, #-32]	; 0xffffffe0
   13624:	mov	r0, r1
   13628:	movw	r1, #0
   1362c:	str	r1, [fp, #-36]	; 0xffffffdc
   13630:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13634:	bl	138a8 <test_type_aliases@@Base+0x2b0>
   13638:	str	r0, [fp, #-24]	; 0xffffffe8
   1363c:	ldr	r0, [fp, #-4]
   13640:	movw	r1, #0
   13644:	str	r1, [fp, #-40]	; 0xffffffd8
   13648:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1364c:	bl	138f0 <test_type_aliases@@Base+0x2f8>
   13650:	ldr	r1, [pc, #568]	; 13890 <test_type_aliases@@Base+0x298>
   13654:	str	r0, [fp, #-28]	; 0xffffffe4
   13658:	ldr	r0, [fp, #-4]
   1365c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13660:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13664:	mov	ip, sp
   13668:	str	r3, [ip, #36]	; 0x24
   1366c:	str	r2, [ip, #32]
   13670:	mvn	r2, #0
   13674:	str	r2, [ip, #28]
   13678:	str	r2, [ip, #24]
   1367c:	mov	r3, #-2147483648	; 0x80000000
   13680:	str	r3, [ip, #20]
   13684:	mov	lr, #0
   13688:	str	lr, [ip, #16]
   1368c:	str	r2, [ip, #8]
   13690:	str	r3, [ip, #4]
   13694:	movw	r2, #65535	; 0xffff
   13698:	str	r2, [ip]
   1369c:	mvn	r2, #127	; 0x7f
   136a0:	mov	r3, #255	; 0xff
   136a4:	movw	ip, #32768	; 0x8000
   136a8:	movt	ip, #65535	; 0xffff
   136ac:	vldr	s0, [pc, #480]	; 13894 <test_type_aliases@@Base+0x29c>
   136b0:	vldr	d1, [pc, #464]	; 13888 <test_type_aliases@@Base+0x290>
   136b4:	str	r1, [fp, #-44]	; 0xffffffd4
   136b8:	mov	r1, r2
   136bc:	mov	r2, r3
   136c0:	mov	r3, ip
   136c4:	bl	13948 <test_type_aliases@@Base+0x350>
   136c8:	ldr	r1, [fp, #-4]
   136cc:	str	r0, [sp, #48]	; 0x30
   136d0:	mov	r0, r1
   136d4:	sub	r1, fp, #16
   136d8:	bl	2db44 <flatcc_builder_finalize_aligned_buffer@@Base>
   136dc:	str	r0, [fp, #-12]
   136e0:	ldr	r0, [fp, #-12]
   136e4:	ldr	r1, [fp, #-16]
   136e8:	bl	13aa8 <test_type_aliases@@Base+0x4b0>
   136ec:	str	r0, [fp, #-8]
   136f0:	cmp	r0, #0
   136f4:	beq	1374c <test_type_aliases@@Base+0x154>
   136f8:	ldr	r0, [pc, #416]	; 138a0 <test_type_aliases@@Base+0x2a8>
   136fc:	add	r0, pc, r0
   13700:	ldr	r1, [pc, #412]	; 138a4 <test_type_aliases@@Base+0x2ac>
   13704:	ldr	r1, [pc, r1]
   13708:	ldr	r2, [fp, #-12]
   1370c:	ldr	r3, [fp, #-16]
   13710:	ldr	r1, [r1]
   13714:	str	r1, [sp, #44]	; 0x2c
   13718:	mov	r1, r2
   1371c:	mov	r2, r3
   13720:	ldr	r3, [sp, #44]	; 0x2c
   13724:	bl	13ae8 <test_type_aliases@@Base+0x4f0>
   13728:	ldr	r0, [fp, #-8]
   1372c:	bl	2ebb4 <flatcc_verify_error_string@@Base>
   13730:	ldr	r1, [pc, #356]	; 1389c <test_type_aliases@@Base+0x2a4>
   13734:	add	r1, pc, r1
   13738:	str	r0, [sp, #40]	; 0x28
   1373c:	mov	r0, r1
   13740:	ldr	r1, [sp, #40]	; 0x28
   13744:	bl	12d9c <printf@plt>
   13748:	b	1385c <test_type_aliases@@Base+0x264>
   1374c:	ldr	r0, [fp, #-12]
   13750:	bl	13cdc <test_type_aliases@@Base+0x6e4>
   13754:	str	r0, [fp, #-20]	; 0xffffffec
   13758:	ldr	r0, [fp, #-20]	; 0xffffffec
   1375c:	bl	13d58 <test_type_aliases@@Base+0x760>
   13760:	sxtb	r0, r0
   13764:	cmn	r0, #128	; 0x80
   13768:	beq	13770 <test_type_aliases@@Base+0x178>
   1376c:	b	13870 <test_type_aliases@@Base+0x278>
   13770:	ldr	r0, [fp, #-20]	; 0xffffffec
   13774:	bl	13e4c <test_type_aliases@@Base+0x854>
   13778:	sxth	r0, r0
   1377c:	cmn	r0, #32768	; 0x8000
   13780:	beq	13788 <test_type_aliases@@Base+0x190>
   13784:	b	13870 <test_type_aliases@@Base+0x278>
   13788:	ldr	r0, [fp, #-20]	; 0xffffffec
   1378c:	bl	13f40 <test_type_aliases@@Base+0x948>
   13790:	cmp	r0, #-2147483648	; 0x80000000
   13794:	beq	1379c <test_type_aliases@@Base+0x1a4>
   13798:	b	13870 <test_type_aliases@@Base+0x278>
   1379c:	ldr	r0, [fp, #-20]	; 0xffffffec
   137a0:	bl	1402c <test_type_aliases@@Base+0xa34>
   137a4:	eor	r1, r1, #-2147483648	; 0x80000000
   137a8:	orr	r0, r0, r1
   137ac:	cmp	r0, #0
   137b0:	beq	137bc <test_type_aliases@@Base+0x1c4>
   137b4:	b	137b8 <test_type_aliases@@Base+0x1c0>
   137b8:	b	13870 <test_type_aliases@@Base+0x278>
   137bc:	ldr	r0, [fp, #-20]	; 0xffffffec
   137c0:	bl	14134 <test_type_aliases@@Base+0xb3c>
   137c4:	and	r0, r0, #255	; 0xff
   137c8:	cmp	r0, #255	; 0xff
   137cc:	beq	137d4 <test_type_aliases@@Base+0x1dc>
   137d0:	b	13870 <test_type_aliases@@Base+0x278>
   137d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   137d8:	bl	14228 <test_type_aliases@@Base+0xc30>
   137dc:	uxth	r0, r0
   137e0:	movw	r1, #65535	; 0xffff
   137e4:	cmp	r0, r1
   137e8:	beq	137f0 <test_type_aliases@@Base+0x1f8>
   137ec:	b	13870 <test_type_aliases@@Base+0x278>
   137f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   137f4:	bl	1431c <test_type_aliases@@Base+0xd24>
   137f8:	cmn	r0, #1
   137fc:	beq	13804 <test_type_aliases@@Base+0x20c>
   13800:	b	13870 <test_type_aliases@@Base+0x278>
   13804:	ldr	r0, [fp, #-20]	; 0xffffffec
   13808:	bl	14408 <test_type_aliases@@Base+0xe10>
   1380c:	and	r0, r0, r1
   13810:	cmn	r0, #1
   13814:	beq	13820 <test_type_aliases@@Base+0x228>
   13818:	b	1381c <test_type_aliases@@Base+0x224>
   1381c:	b	13870 <test_type_aliases@@Base+0x278>
   13820:	ldr	r0, [fp, #-20]	; 0xffffffec
   13824:	bl	14510 <test_type_aliases@@Base+0xf18>
   13828:	vldr	s2, [pc, #100]	; 13894 <test_type_aliases@@Base+0x29c>
   1382c:	vcmp.f32	s0, s2
   13830:	vmrs	APSR_nzcv, fpscr
   13834:	beq	1383c <test_type_aliases@@Base+0x244>
   13838:	b	13870 <test_type_aliases@@Base+0x278>
   1383c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13840:	bl	14600 <test_type_aliases@@Base+0x1008>
   13844:	vldr	d16, [pc, #60]	; 13888 <test_type_aliases@@Base+0x290>
   13848:	vcmp.f64	d0, d16
   1384c:	vmrs	APSR_nzcv, fpscr
   13850:	beq	13858 <test_type_aliases@@Base+0x260>
   13854:	b	13870 <test_type_aliases@@Base+0x278>
   13858:	b	1385c <test_type_aliases@@Base+0x264>
   1385c:	ldr	r0, [fp, #-12]
   13860:	bl	2dcec <flatcc_builder_aligned_free@@Base>
   13864:	ldr	r0, [fp, #-8]
   13868:	mov	sp, fp
   1386c:	pop	{fp, pc}
   13870:	ldr	r0, [pc, #32]	; 13898 <test_type_aliases@@Base+0x2a0>
   13874:	add	r0, pc, r0
   13878:	mvn	r1, #0
   1387c:	str	r1, [fp, #-8]
   13880:	bl	12d9c <printf@plt>
   13884:	b	1385c <test_type_aliases@@Base+0x264>
   13888:	strbtvs	r6, [r6], -r6, ror #12
   1388c:	andmi	r6, r2, r6, ror #12
   13890:	andhi	r0, r0, r0
   13894:	andsmi	r3, r3, r3, lsr r3
   13898:	andeq	lr, r1, fp
   1389c:	andeq	lr, r1, pc, lsl r1
   138a0:	andeq	lr, r1, r4, asr #2
   138a4:	andeq	r4, r3, r0, asr r9
   138a8:	push	{fp, lr}
   138ac:	mov	fp, sp
   138b0:	sub	sp, sp, #24
   138b4:	str	r0, [fp, #-4]
   138b8:	str	r1, [fp, #-8]
   138bc:	str	r2, [sp, #12]
   138c0:	ldr	r0, [fp, #-4]
   138c4:	ldr	r1, [fp, #-8]
   138c8:	ldr	r2, [sp, #12]
   138cc:	movw	r3, #1
   138d0:	movw	ip, #1
   138d4:	uxth	ip, ip
   138d8:	str	ip, [sp]
   138dc:	mvn	ip, #0
   138e0:	str	ip, [sp, #4]
   138e4:	bl	2bb54 <flatcc_builder_create_vector@@Base>
   138e8:	mov	sp, fp
   138ec:	pop	{fp, pc}
   138f0:	push	{fp, lr}
   138f4:	mov	fp, sp
   138f8:	sub	sp, sp, #24
   138fc:	ldr	r3, [pc, #64]	; 13944 <test_type_aliases@@Base+0x34c>
   13900:	str	r0, [fp, #-4]
   13904:	str	r1, [fp, #-8]
   13908:	str	r2, [sp, #12]
   1390c:	ldr	r0, [fp, #-4]
   13910:	ldr	r1, [fp, #-8]
   13914:	ldr	r2, [sp, #12]
   13918:	movw	ip, #8
   1391c:	str	r3, [sp, #8]
   13920:	mov	r3, ip
   13924:	movw	ip, #8
   13928:	uxth	ip, ip
   1392c:	str	ip, [sp]
   13930:	ldr	ip, [sp, #8]
   13934:	str	ip, [sp, #4]
   13938:	bl	2bb54 <flatcc_builder_create_vector@@Base>
   1393c:	mov	sp, fp
   13940:	pop	{fp, pc}
   13944:	svcne	0x00ffffff
   13948:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1394c:	add	fp, sp, #28
   13950:	sub	sp, sp, #140	; 0x8c
   13954:	ldr	ip, [fp, #36]	; 0x24
   13958:	ldr	lr, [fp, #32]
   1395c:	ldr	r4, [fp, #28]
   13960:	ldr	r5, [fp, #24]
   13964:	ldr	r6, [fp, #44]	; 0x2c
   13968:	ldr	r7, [fp, #40]	; 0x28
   1396c:	ldr	r8, [fp, #16]
   13970:	ldr	r9, [fp, #12]
   13974:	ldr	sl, [fp, #8]
   13978:	str	r0, [sp, #84]	; 0x54
   1397c:	ldr	r0, [pc, #288]	; 13aa4 <test_type_aliases@@Base+0x4ac>
   13980:	add	r0, pc, r0
   13984:	str	r0, [sp, #80]	; 0x50
   13988:	ldr	r0, [sp, #84]	; 0x54
   1398c:	str	r0, [fp, #-36]	; 0xffffffdc
   13990:	strb	r1, [fp, #-37]	; 0xffffffdb
   13994:	strb	r2, [fp, #-38]	; 0xffffffda
   13998:	strh	r3, [fp, #-40]	; 0xffffffd8
   1399c:	strh	sl, [fp, #-42]	; 0xffffffd6
   139a0:	str	r4, [fp, #-52]	; 0xffffffcc
   139a4:	str	r5, [fp, #-56]	; 0xffffffc8
   139a8:	str	ip, [fp, #-60]	; 0xffffffc4
   139ac:	str	lr, [fp, #-64]	; 0xffffffc0
   139b0:	vstr	s0, [fp, #-68]	; 0xffffffbc
   139b4:	vstr	d1, [fp, #-80]	; 0xffffffb0
   139b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   139bc:	ldr	r1, [sp, #80]	; 0x50
   139c0:	str	r6, [sp, #76]	; 0x4c
   139c4:	str	r7, [sp, #72]	; 0x48
   139c8:	str	r8, [sp, #68]	; 0x44
   139cc:	str	r9, [sp, #64]	; 0x40
   139d0:	bl	14898 <test_empty_monster@@Base+0x19c>
   139d4:	cmp	r0, #0
   139d8:	beq	139e8 <test_type_aliases@@Base+0x3f0>
   139dc:	movw	r0, #0
   139e0:	str	r0, [fp, #-32]	; 0xffffffe0
   139e4:	b	13a98 <test_type_aliases@@Base+0x4a0>
   139e8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   139ec:	mov	r1, r0
   139f0:	ldrb	r2, [fp, #-37]	; 0xffffffdb
   139f4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   139f8:	ldrh	ip, [fp, #-40]	; 0xffffffd8
   139fc:	ldrh	lr, [fp, #-42]	; 0xffffffd6
   13a00:	ldr	r4, [fp, #12]
   13a04:	ldr	r5, [fp, #16]
   13a08:	ldr	r6, [fp, #-56]	; 0xffffffc8
   13a0c:	ldr	r7, [fp, #-52]	; 0xffffffcc
   13a10:	ldr	r8, [fp, #-64]	; 0xffffffc0
   13a14:	ldr	r9, [fp, #-60]	; 0xffffffc4
   13a18:	vldr	s0, [fp, #-68]	; 0xffffffbc
   13a1c:	vldr	d1, [fp, #-80]	; 0xffffffb0
   13a20:	ldr	sl, [fp, #40]	; 0x28
   13a24:	str	r0, [sp, #60]	; 0x3c
   13a28:	ldr	r0, [fp, #44]	; 0x2c
   13a2c:	str	r0, [sp, #56]	; 0x38
   13a30:	mov	r0, sp
   13a34:	str	r0, [sp, #52]	; 0x34
   13a38:	ldr	r0, [sp, #56]	; 0x38
   13a3c:	str	r1, [sp, #48]	; 0x30
   13a40:	ldr	r1, [sp, #52]	; 0x34
   13a44:	str	r0, [r1, #36]	; 0x24
   13a48:	str	sl, [r1, #32]
   13a4c:	str	r9, [r1, #28]
   13a50:	str	r8, [r1, #24]
   13a54:	str	r7, [r1, #20]
   13a58:	str	r6, [r1, #16]
   13a5c:	str	r5, [r1, #8]
   13a60:	str	r4, [r1, #4]
   13a64:	uxth	lr, lr
   13a68:	str	lr, [r1]
   13a6c:	sxtb	r1, r2
   13a70:	uxtb	r2, r3
   13a74:	sxth	r3, ip
   13a78:	ldr	r0, [sp, #60]	; 0x3c
   13a7c:	bl	234fc <main@@Base+0x544>
   13a80:	ldr	r1, [sp, #48]	; 0x30
   13a84:	str	r0, [sp, #44]	; 0x2c
   13a88:	mov	r0, r1
   13a8c:	ldr	r1, [sp, #44]	; 0x2c
   13a90:	bl	149ac <test_empty_monster@@Base+0x2b0>
   13a94:	str	r0, [fp, #-32]	; 0xffffffe0
   13a98:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13a9c:	sub	sp, fp, #28
   13aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13aa4:	andeq	sp, r1, r8, asr sp
   13aa8:	push	{fp, lr}
   13aac:	mov	fp, sp
   13ab0:	sub	sp, sp, #8
   13ab4:	ldr	r2, [pc, #36]	; 13ae0 <test_type_aliases@@Base+0x4e8>
   13ab8:	add	r2, pc, r2
   13abc:	ldr	r3, [pc, #32]	; 13ae4 <test_type_aliases@@Base+0x4ec>
   13ac0:	add	r3, pc, r3
   13ac4:	str	r0, [sp, #4]
   13ac8:	str	r1, [sp]
   13acc:	ldr	r0, [sp, #4]
   13ad0:	ldr	r1, [sp]
   13ad4:	bl	3072c <flatcc_verify_table_as_root@@Base>
   13ad8:	mov	sp, fp
   13adc:	pop	{fp, pc}
   13ae0:	andeq	sp, r1, r0, lsr #24
   13ae4:	andeq	r0, r1, ip, asr r5
   13ae8:	push	{fp, lr}
   13aec:	mov	fp, sp
   13af0:	sub	sp, sp, #48	; 0x30
   13af4:	str	r0, [fp, #-4]
   13af8:	str	r1, [fp, #-8]
   13afc:	str	r2, [fp, #-12]
   13b00:	str	r3, [fp, #-16]
   13b04:	ldr	r0, [fp, #-8]
   13b08:	str	r0, [sp, #4]
   13b0c:	ldr	r0, [fp, #-4]
   13b10:	movw	r1, #0
   13b14:	cmp	r0, r1
   13b18:	beq	13b30 <test_type_aliases@@Base+0x538>
   13b1c:	ldr	r0, [pc, #412]	; 13cc0 <test_type_aliases@@Base+0x6c8>
   13b20:	add	r1, pc, r0
   13b24:	ldr	r0, [fp, #-16]
   13b28:	ldr	r2, [fp, #-4]
   13b2c:	bl	12e14 <fprintf@plt>
   13b30:	movw	r0, #0
   13b34:	str	r0, [fp, #-20]	; 0xffffffec
   13b38:	ldr	r0, [fp, #-20]	; 0xffffffec
   13b3c:	ldr	r1, [fp, #-12]
   13b40:	cmp	r0, r1
   13b44:	bcs	13c70 <test_type_aliases@@Base+0x678>
   13b48:	ldr	r0, [fp, #-20]	; 0xffffffec
   13b4c:	and	r0, r0, #15
   13b50:	cmp	r0, #0
   13b54:	bne	13b90 <test_type_aliases@@Base+0x598>
   13b58:	ldr	r0, [fp, #-20]	; 0xffffffec
   13b5c:	cmp	r0, #0
   13b60:	beq	13b78 <test_type_aliases@@Base+0x580>
   13b64:	ldr	r0, [pc, #356]	; 13cd0 <test_type_aliases@@Base+0x6d8>
   13b68:	add	r1, pc, r0
   13b6c:	add	r2, sp, #11
   13b70:	ldr	r0, [fp, #-16]
   13b74:	bl	12e14 <fprintf@plt>
   13b78:	ldr	r0, [pc, #340]	; 13cd4 <test_type_aliases@@Base+0x6dc>
   13b7c:	add	r1, pc, r0
   13b80:	ldr	r0, [fp, #-16]
   13b84:	ldr	r2, [fp, #-20]	; 0xffffffec
   13b88:	bl	12e14 <fprintf@plt>
   13b8c:	b	13bb4 <test_type_aliases@@Base+0x5bc>
   13b90:	ldr	r0, [fp, #-20]	; 0xffffffec
   13b94:	and	r0, r0, #7
   13b98:	cmp	r0, #0
   13b9c:	bne	13bb0 <test_type_aliases@@Base+0x5b8>
   13ba0:	ldr	r0, [pc, #292]	; 13ccc <test_type_aliases@@Base+0x6d4>
   13ba4:	add	r1, pc, r0
   13ba8:	ldr	r0, [fp, #-16]
   13bac:	bl	12e14 <fprintf@plt>
   13bb0:	b	13bb4 <test_type_aliases@@Base+0x5bc>
   13bb4:	ldr	r0, [pc, #284]	; 13cd8 <test_type_aliases@@Base+0x6e0>
   13bb8:	add	r1, pc, r0
   13bbc:	ldr	r0, [fp, #-16]
   13bc0:	ldr	r2, [sp, #4]
   13bc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bc8:	add	r2, r2, r3
   13bcc:	ldrb	r2, [r2]
   13bd0:	bl	12e14 <fprintf@plt>
   13bd4:	ldr	r1, [sp, #4]
   13bd8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13bdc:	add	r1, r1, r2
   13be0:	ldrb	r1, [r1]
   13be4:	cmp	r1, #32
   13be8:	blt	13c04 <test_type_aliases@@Base+0x60c>
   13bec:	ldr	r0, [sp, #4]
   13bf0:	ldr	r1, [fp, #-20]	; 0xffffffec
   13bf4:	add	r0, r0, r1
   13bf8:	ldrb	r0, [r0]
   13bfc:	cmp	r0, #126	; 0x7e
   13c00:	ble	13c20 <test_type_aliases@@Base+0x628>
   13c04:	ldr	r0, [fp, #-20]	; 0xffffffec
   13c08:	and	r0, r0, #15
   13c0c:	add	r1, sp, #11
   13c10:	add	r0, r1, r0
   13c14:	movw	r1, #46	; 0x2e
   13c18:	strb	r1, [r0]
   13c1c:	b	13c44 <test_type_aliases@@Base+0x64c>
   13c20:	ldr	r0, [sp, #4]
   13c24:	ldr	r1, [fp, #-20]	; 0xffffffec
   13c28:	add	r0, r0, r1
   13c2c:	ldrb	r0, [r0]
   13c30:	ldr	r1, [fp, #-20]	; 0xffffffec
   13c34:	and	r1, r1, #15
   13c38:	add	r2, sp, #11
   13c3c:	add	r1, r2, r1
   13c40:	strb	r0, [r1]
   13c44:	ldr	r0, [fp, #-20]	; 0xffffffec
   13c48:	and	r0, r0, #15
   13c4c:	add	r0, r0, #1
   13c50:	add	r1, sp, #11
   13c54:	add	r0, r1, r0
   13c58:	movw	r1, #0
   13c5c:	strb	r1, [r0]
   13c60:	ldr	r0, [fp, #-20]	; 0xffffffec
   13c64:	add	r0, r0, #1
   13c68:	str	r0, [fp, #-20]	; 0xffffffec
   13c6c:	b	13b38 <test_type_aliases@@Base+0x540>
   13c70:	b	13c74 <test_type_aliases@@Base+0x67c>
   13c74:	ldr	r0, [fp, #-20]	; 0xffffffec
   13c78:	and	r0, r0, #15
   13c7c:	cmp	r0, #0
   13c80:	beq	13ca4 <test_type_aliases@@Base+0x6ac>
   13c84:	ldr	r0, [pc, #60]	; 13cc8 <test_type_aliases@@Base+0x6d0>
   13c88:	add	r1, pc, r0
   13c8c:	ldr	r0, [fp, #-16]
   13c90:	bl	12e14 <fprintf@plt>
   13c94:	ldr	r1, [fp, #-20]	; 0xffffffec
   13c98:	add	r1, r1, #1
   13c9c:	str	r1, [fp, #-20]	; 0xffffffec
   13ca0:	b	13c74 <test_type_aliases@@Base+0x67c>
   13ca4:	ldr	r0, [pc, #24]	; 13cc4 <test_type_aliases@@Base+0x6cc>
   13ca8:	add	r1, pc, r0
   13cac:	add	r2, sp, #11
   13cb0:	ldr	r0, [fp, #-16]
   13cb4:	bl	12e14 <fprintf@plt>
   13cb8:	mov	sp, fp
   13cbc:	pop	{fp, pc}
   13cc0:	andeq	r0, r2, sl, lsl r8
   13cc4:	muleq	r2, r7, r6
   13cc8:	andeq	r0, r2, fp, asr #13
   13ccc:			; <UNDEFINED> instruction: 0x000207b1
   13cd0:	ldrdeq	r0, [r2], -r7
   13cd4:	andeq	r0, r2, r9, asr #15
   13cd8:	muleq	r2, r5, r7
   13cdc:	push	{fp, lr}
   13ce0:	mov	fp, sp
   13ce4:	sub	sp, sp, #16
   13ce8:	ldr	r1, [pc, #100]	; 13d54 <test_type_aliases@@Base+0x75c>
   13cec:	add	r1, pc, r1
   13cf0:	str	r0, [fp, #-4]
   13cf4:	str	r1, [sp, #8]
   13cf8:	ldr	r0, [fp, #-4]
   13cfc:	movw	r1, #0
   13d00:	cmp	r0, r1
   13d04:	beq	13d1c <test_type_aliases@@Base+0x724>
   13d08:	ldr	r0, [fp, #-4]
   13d0c:	ldr	r1, [sp, #8]
   13d10:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   13d14:	cmp	r0, #0
   13d18:	bne	13d28 <test_type_aliases@@Base+0x730>
   13d1c:	movw	r0, #0
   13d20:	str	r0, [sp, #4]
   13d24:	b	13d48 <test_type_aliases@@Base+0x750>
   13d28:	ldr	r0, [fp, #-4]
   13d2c:	ldr	r1, [fp, #-4]
   13d30:	str	r0, [sp]
   13d34:	mov	r0, r1
   13d38:	bl	23414 <main@@Base+0x45c>
   13d3c:	ldr	r1, [sp]
   13d40:	add	r0, r1, r0
   13d44:	str	r0, [sp, #4]
   13d48:	ldr	r0, [sp, #4]
   13d4c:	mov	sp, fp
   13d50:	pop	{fp, pc}
   13d54:	andeq	sp, r1, ip, ror #19
   13d58:	push	{fp, lr}
   13d5c:	mov	fp, sp
   13d60:	sub	sp, sp, #24
   13d64:	str	r0, [fp, #-4]
   13d68:	movw	r0, #0
   13d6c:	strh	r0, [fp, #-6]
   13d70:	ldr	r0, [fp, #-4]
   13d74:	movw	r1, #0
   13d78:	cmp	r0, r1
   13d7c:	beq	13d88 <test_type_aliases@@Base+0x790>
   13d80:	b	13d84 <test_type_aliases@@Base+0x78c>
   13d84:	b	13da8 <test_type_aliases@@Base+0x7b0>
   13d88:	ldr	r0, [pc, #176]	; 13e40 <test_type_aliases@@Base+0x848>
   13d8c:	add	r0, pc, r0
   13d90:	ldr	r1, [pc, #172]	; 13e44 <test_type_aliases@@Base+0x84c>
   13d94:	add	r1, pc, r1
   13d98:	ldr	r2, [pc, #168]	; 13e48 <test_type_aliases@@Base+0x850>
   13d9c:	add	r3, pc, r2
   13da0:	movw	r2, #749	; 0x2ed
   13da4:	bl	12e68 <__assert_fail@plt>
   13da8:	mov	r0, #0
   13dac:	strh	r0, [fp, #-8]
   13db0:	ldr	r0, [fp, #-4]
   13db4:	str	r0, [sp, #8]
   13db8:	bl	2344c <main@@Base+0x494>
   13dbc:	ldr	r1, [sp, #8]
   13dc0:	sub	r0, r1, r0
   13dc4:	str	r0, [sp, #12]
   13dc8:	ldr	r0, [sp, #12]
   13dcc:	bl	23470 <main@@Base+0x4b8>
   13dd0:	ldrh	r1, [fp, #-8]
   13dd4:	add	r1, r1, #3
   13dd8:	lsl	r1, r1, #1
   13ddc:	cmp	r0, r1
   13de0:	bcc	13dfc <test_type_aliases@@Base+0x804>
   13de4:	ldr	r0, [sp, #12]
   13de8:	ldrh	r1, [fp, #-8]
   13dec:	add	r0, r0, r1, lsl #1
   13df0:	add	r0, r0, #4
   13df4:	bl	23470 <main@@Base+0x4b8>
   13df8:	strh	r0, [fp, #-6]
   13dfc:	ldrh	r0, [fp, #-6]
   13e00:	cmp	r0, #0
   13e04:	beq	13e24 <test_type_aliases@@Base+0x82c>
   13e08:	ldr	r0, [fp, #-4]
   13e0c:	ldrh	r1, [fp, #-6]
   13e10:	add	r0, r0, r1
   13e14:	bl	24300 <main@@Base+0x1348>
   13e18:	sxtb	r0, r0
   13e1c:	str	r0, [sp, #4]
   13e20:	b	13e30 <test_type_aliases@@Base+0x838>
   13e24:	movw	r0, #0
   13e28:	str	r0, [sp, #4]
   13e2c:	b	13e30 <test_type_aliases@@Base+0x838>
   13e30:	ldr	r0, [sp, #4]
   13e34:	sxtb	r0, r0
   13e38:	mov	sp, fp
   13e3c:	pop	{fp, pc}
   13e40:	andeq	r0, r2, r1, ror #4
   13e44:	andeq	r0, r2, pc, ror r2
   13e48:			; <UNDEFINED> instruction: 0x000205bb
   13e4c:	push	{fp, lr}
   13e50:	mov	fp, sp
   13e54:	sub	sp, sp, #24
   13e58:	str	r0, [fp, #-4]
   13e5c:	movw	r0, #0
   13e60:	strh	r0, [fp, #-6]
   13e64:	ldr	r0, [fp, #-4]
   13e68:	movw	r1, #0
   13e6c:	cmp	r0, r1
   13e70:	beq	13e7c <test_type_aliases@@Base+0x884>
   13e74:	b	13e78 <test_type_aliases@@Base+0x880>
   13e78:	b	13e9c <test_type_aliases@@Base+0x8a4>
   13e7c:	ldr	r0, [pc, #176]	; 13f34 <test_type_aliases@@Base+0x93c>
   13e80:	add	r0, pc, r0
   13e84:	ldr	r1, [pc, #172]	; 13f38 <test_type_aliases@@Base+0x940>
   13e88:	add	r1, pc, r1
   13e8c:	ldr	r2, [pc, #168]	; 13f3c <test_type_aliases@@Base+0x944>
   13e90:	add	r3, pc, r2
   13e94:	movw	r2, #751	; 0x2ef
   13e98:	bl	12e68 <__assert_fail@plt>
   13e9c:	mov	r0, #2
   13ea0:	strh	r0, [fp, #-8]
   13ea4:	ldr	r0, [fp, #-4]
   13ea8:	str	r0, [sp, #8]
   13eac:	bl	2344c <main@@Base+0x494>
   13eb0:	ldr	r1, [sp, #8]
   13eb4:	sub	r0, r1, r0
   13eb8:	str	r0, [sp, #12]
   13ebc:	ldr	r0, [sp, #12]
   13ec0:	bl	23470 <main@@Base+0x4b8>
   13ec4:	ldrh	r1, [fp, #-8]
   13ec8:	add	r1, r1, #3
   13ecc:	lsl	r1, r1, #1
   13ed0:	cmp	r0, r1
   13ed4:	bcc	13ef0 <test_type_aliases@@Base+0x8f8>
   13ed8:	ldr	r0, [sp, #12]
   13edc:	ldrh	r1, [fp, #-8]
   13ee0:	add	r0, r0, r1, lsl #1
   13ee4:	add	r0, r0, #4
   13ee8:	bl	23470 <main@@Base+0x4b8>
   13eec:	strh	r0, [fp, #-6]
   13ef0:	ldrh	r0, [fp, #-6]
   13ef4:	cmp	r0, #0
   13ef8:	beq	13f18 <test_type_aliases@@Base+0x920>
   13efc:	ldr	r0, [fp, #-4]
   13f00:	ldrh	r1, [fp, #-6]
   13f04:	add	r0, r0, r1
   13f08:	bl	23498 <main@@Base+0x4e0>
   13f0c:	sxth	r0, r0
   13f10:	str	r0, [sp, #4]
   13f14:	b	13f24 <test_type_aliases@@Base+0x92c>
   13f18:	movw	r0, #0
   13f1c:	str	r0, [sp, #4]
   13f20:	b	13f24 <test_type_aliases@@Base+0x92c>
   13f24:	ldr	r0, [sp, #4]
   13f28:	sxth	r0, r0
   13f2c:	mov	sp, fp
   13f30:	pop	{fp, pc}
   13f34:	andeq	r0, r2, sp, ror #2
   13f38:	andeq	r0, r2, fp, lsl #3
   13f3c:	andeq	r0, r2, r0, lsl r5
   13f40:	push	{fp, lr}
   13f44:	mov	fp, sp
   13f48:	sub	sp, sp, #24
   13f4c:	str	r0, [fp, #-4]
   13f50:	movw	r0, #0
   13f54:	strh	r0, [fp, #-6]
   13f58:	ldr	r0, [fp, #-4]
   13f5c:	movw	r1, #0
   13f60:	cmp	r0, r1
   13f64:	beq	13f70 <test_type_aliases@@Base+0x978>
   13f68:	b	13f6c <test_type_aliases@@Base+0x974>
   13f6c:	b	13f90 <test_type_aliases@@Base+0x998>
   13f70:	ldr	r0, [pc, #168]	; 14020 <test_type_aliases@@Base+0xa28>
   13f74:	add	r0, pc, r0
   13f78:	ldr	r1, [pc, #164]	; 14024 <test_type_aliases@@Base+0xa2c>
   13f7c:	add	r1, pc, r1
   13f80:	ldr	r2, [pc, #160]	; 14028 <test_type_aliases@@Base+0xa30>
   13f84:	add	r3, pc, r2
   13f88:	movw	r2, #753	; 0x2f1
   13f8c:	bl	12e68 <__assert_fail@plt>
   13f90:	mov	r0, #4
   13f94:	strh	r0, [fp, #-8]
   13f98:	ldr	r0, [fp, #-4]
   13f9c:	str	r0, [sp, #8]
   13fa0:	bl	2344c <main@@Base+0x494>
   13fa4:	ldr	r1, [sp, #8]
   13fa8:	sub	r0, r1, r0
   13fac:	str	r0, [sp, #12]
   13fb0:	ldr	r0, [sp, #12]
   13fb4:	bl	23470 <main@@Base+0x4b8>
   13fb8:	ldrh	r1, [fp, #-8]
   13fbc:	add	r1, r1, #3
   13fc0:	lsl	r1, r1, #1
   13fc4:	cmp	r0, r1
   13fc8:	bcc	13fe4 <test_type_aliases@@Base+0x9ec>
   13fcc:	ldr	r0, [sp, #12]
   13fd0:	ldrh	r1, [fp, #-8]
   13fd4:	add	r0, r0, r1, lsl #1
   13fd8:	add	r0, r0, #4
   13fdc:	bl	23470 <main@@Base+0x4b8>
   13fe0:	strh	r0, [fp, #-6]
   13fe4:	ldrh	r0, [fp, #-6]
   13fe8:	cmp	r0, #0
   13fec:	beq	14008 <test_type_aliases@@Base+0xa10>
   13ff0:	ldr	r0, [fp, #-4]
   13ff4:	ldrh	r1, [fp, #-6]
   13ff8:	add	r0, r0, r1
   13ffc:	bl	2433c <main@@Base+0x1384>
   14000:	str	r0, [sp, #4]
   14004:	b	14014 <test_type_aliases@@Base+0xa1c>
   14008:	movw	r0, #0
   1400c:	str	r0, [sp, #4]
   14010:	b	14014 <test_type_aliases@@Base+0xa1c>
   14014:	ldr	r0, [sp, #4]
   14018:	mov	sp, fp
   1401c:	pop	{fp, pc}
   14020:	andeq	r0, r2, r9, ror r0
   14024:	muleq	r2, r7, r0
   14028:	andeq	r0, r2, r7, ror #8
   1402c:	push	{fp, lr}
   14030:	mov	fp, sp
   14034:	sub	sp, sp, #32
   14038:	str	r0, [fp, #-4]
   1403c:	movw	r0, #0
   14040:	strh	r0, [fp, #-6]
   14044:	ldr	r0, [fp, #-4]
   14048:	movw	r1, #0
   1404c:	cmp	r0, r1
   14050:	beq	1405c <test_type_aliases@@Base+0xa64>
   14054:	b	14058 <test_type_aliases@@Base+0xa60>
   14058:	b	1407c <test_type_aliases@@Base+0xa84>
   1405c:	ldr	r0, [pc, #196]	; 14128 <test_type_aliases@@Base+0xb30>
   14060:	add	r0, pc, r0
   14064:	ldr	r1, [pc, #192]	; 1412c <test_type_aliases@@Base+0xb34>
   14068:	add	r1, pc, r1
   1406c:	ldr	r2, [pc, #188]	; 14130 <test_type_aliases@@Base+0xb38>
   14070:	add	r3, pc, r2
   14074:	movw	r2, #755	; 0x2f3
   14078:	bl	12e68 <__assert_fail@plt>
   1407c:	mov	r0, #6
   14080:	strh	r0, [fp, #-8]
   14084:	ldr	r0, [fp, #-4]
   14088:	str	r0, [sp, #16]
   1408c:	bl	2344c <main@@Base+0x494>
   14090:	ldr	r1, [sp, #16]
   14094:	sub	r0, r1, r0
   14098:	str	r0, [fp, #-12]
   1409c:	ldr	r0, [fp, #-12]
   140a0:	bl	23470 <main@@Base+0x4b8>
   140a4:	ldrh	r1, [fp, #-8]
   140a8:	add	r1, r1, #3
   140ac:	lsl	r1, r1, #1
   140b0:	cmp	r0, r1
   140b4:	bcc	140d0 <test_type_aliases@@Base+0xad8>
   140b8:	ldr	r0, [fp, #-12]
   140bc:	ldrh	r1, [fp, #-8]
   140c0:	add	r0, r0, r1, lsl #1
   140c4:	add	r0, r0, #4
   140c8:	bl	23470 <main@@Base+0x4b8>
   140cc:	strh	r0, [fp, #-6]
   140d0:	ldrh	r0, [fp, #-6]
   140d4:	cmp	r0, #0
   140d8:	beq	140f8 <test_type_aliases@@Base+0xb00>
   140dc:	ldr	r0, [fp, #-4]
   140e0:	ldrh	r1, [fp, #-6]
   140e4:	add	r0, r0, r1
   140e8:	bl	24374 <main@@Base+0x13bc>
   140ec:	str	r0, [sp, #12]
   140f0:	str	r1, [sp, #8]
   140f4:	b	1410c <test_type_aliases@@Base+0xb14>
   140f8:	mov	r0, #0
   140fc:	mov	r1, r0
   14100:	str	r1, [sp, #12]
   14104:	str	r0, [sp, #8]
   14108:	b	1410c <test_type_aliases@@Base+0xb14>
   1410c:	ldr	r0, [sp, #8]
   14110:	ldr	r1, [sp, #12]
   14114:	str	r0, [sp, #4]
   14118:	mov	r0, r1
   1411c:	ldr	r1, [sp, #4]
   14120:	mov	sp, fp
   14124:	pop	{fp, pc}
   14128:	andeq	pc, r1, sp, lsl #31
   1412c:	andeq	pc, r1, fp, lsr #31
   14130:	andeq	r0, r2, r6, asr #7
   14134:	push	{fp, lr}
   14138:	mov	fp, sp
   1413c:	sub	sp, sp, #24
   14140:	str	r0, [fp, #-4]
   14144:	movw	r0, #0
   14148:	strh	r0, [fp, #-6]
   1414c:	ldr	r0, [fp, #-4]
   14150:	movw	r1, #0
   14154:	cmp	r0, r1
   14158:	beq	14164 <test_type_aliases@@Base+0xb6c>
   1415c:	b	14160 <test_type_aliases@@Base+0xb68>
   14160:	b	14184 <test_type_aliases@@Base+0xb8c>
   14164:	ldr	r0, [pc, #176]	; 1421c <test_type_aliases@@Base+0xc24>
   14168:	add	r0, pc, r0
   1416c:	ldr	r1, [pc, #172]	; 14220 <test_type_aliases@@Base+0xc28>
   14170:	add	r1, pc, r1
   14174:	ldr	r2, [pc, #168]	; 14224 <test_type_aliases@@Base+0xc2c>
   14178:	add	r3, pc, r2
   1417c:	movw	r2, #750	; 0x2ee
   14180:	bl	12e68 <__assert_fail@plt>
   14184:	mov	r0, #1
   14188:	strh	r0, [fp, #-8]
   1418c:	ldr	r0, [fp, #-4]
   14190:	str	r0, [sp, #8]
   14194:	bl	2344c <main@@Base+0x494>
   14198:	ldr	r1, [sp, #8]
   1419c:	sub	r0, r1, r0
   141a0:	str	r0, [sp, #12]
   141a4:	ldr	r0, [sp, #12]
   141a8:	bl	23470 <main@@Base+0x4b8>
   141ac:	ldrh	r1, [fp, #-8]
   141b0:	add	r1, r1, #3
   141b4:	lsl	r1, r1, #1
   141b8:	cmp	r0, r1
   141bc:	bcc	141d8 <test_type_aliases@@Base+0xbe0>
   141c0:	ldr	r0, [sp, #12]
   141c4:	ldrh	r1, [fp, #-8]
   141c8:	add	r0, r0, r1, lsl #1
   141cc:	add	r0, r0, #4
   141d0:	bl	23470 <main@@Base+0x4b8>
   141d4:	strh	r0, [fp, #-6]
   141d8:	ldrh	r0, [fp, #-6]
   141dc:	cmp	r0, #0
   141e0:	beq	14200 <test_type_aliases@@Base+0xc08>
   141e4:	ldr	r0, [fp, #-4]
   141e8:	ldrh	r1, [fp, #-6]
   141ec:	add	r0, r0, r1
   141f0:	bl	243c4 <main@@Base+0x140c>
   141f4:	and	r0, r0, #255	; 0xff
   141f8:	str	r0, [sp, #4]
   141fc:	b	1420c <test_type_aliases@@Base+0xc14>
   14200:	movw	r0, #0
   14204:	str	r0, [sp, #4]
   14208:	b	1420c <test_type_aliases@@Base+0xc14>
   1420c:	ldr	r0, [sp, #4]
   14210:	and	r0, r0, #255	; 0xff
   14214:	mov	sp, fp
   14218:	pop	{fp, pc}
   1421c:	andeq	pc, r1, r5, lsl #29
   14220:	andeq	pc, r1, r3, lsr #29
   14224:	andeq	r0, r2, r9, lsl #6
   14228:	push	{fp, lr}
   1422c:	mov	fp, sp
   14230:	sub	sp, sp, #24
   14234:	str	r0, [fp, #-4]
   14238:	movw	r0, #0
   1423c:	strh	r0, [fp, #-6]
   14240:	ldr	r0, [fp, #-4]
   14244:	movw	r1, #0
   14248:	cmp	r0, r1
   1424c:	beq	14258 <test_type_aliases@@Base+0xc60>
   14250:	b	14254 <test_type_aliases@@Base+0xc5c>
   14254:	b	14278 <test_type_aliases@@Base+0xc80>
   14258:	ldr	r0, [pc, #176]	; 14310 <test_type_aliases@@Base+0xd18>
   1425c:	add	r0, pc, r0
   14260:	ldr	r1, [pc, #172]	; 14314 <test_type_aliases@@Base+0xd1c>
   14264:	add	r1, pc, r1
   14268:	ldr	r2, [pc, #168]	; 14318 <test_type_aliases@@Base+0xd20>
   1426c:	add	r3, pc, r2
   14270:	movw	r2, #752	; 0x2f0
   14274:	bl	12e68 <__assert_fail@plt>
   14278:	mov	r0, #3
   1427c:	strh	r0, [fp, #-8]
   14280:	ldr	r0, [fp, #-4]
   14284:	str	r0, [sp, #8]
   14288:	bl	2344c <main@@Base+0x494>
   1428c:	ldr	r1, [sp, #8]
   14290:	sub	r0, r1, r0
   14294:	str	r0, [sp, #12]
   14298:	ldr	r0, [sp, #12]
   1429c:	bl	23470 <main@@Base+0x4b8>
   142a0:	ldrh	r1, [fp, #-8]
   142a4:	add	r1, r1, #3
   142a8:	lsl	r1, r1, #1
   142ac:	cmp	r0, r1
   142b0:	bcc	142cc <test_type_aliases@@Base+0xcd4>
   142b4:	ldr	r0, [sp, #12]
   142b8:	ldrh	r1, [fp, #-8]
   142bc:	add	r0, r0, r1, lsl #1
   142c0:	add	r0, r0, #4
   142c4:	bl	23470 <main@@Base+0x4b8>
   142c8:	strh	r0, [fp, #-6]
   142cc:	ldrh	r0, [fp, #-6]
   142d0:	cmp	r0, #0
   142d4:	beq	142f4 <test_type_aliases@@Base+0xcfc>
   142d8:	ldr	r0, [fp, #-4]
   142dc:	ldrh	r1, [fp, #-6]
   142e0:	add	r0, r0, r1
   142e4:	bl	24400 <main@@Base+0x1448>
   142e8:	uxth	r0, r0
   142ec:	str	r0, [sp, #4]
   142f0:	b	14300 <test_type_aliases@@Base+0xd08>
   142f4:	movw	r0, #0
   142f8:	str	r0, [sp, #4]
   142fc:	b	14300 <test_type_aliases@@Base+0xd08>
   14300:	ldr	r0, [sp, #4]
   14304:	uxth	r0, r0
   14308:	mov	sp, fp
   1430c:	pop	{fp, pc}
   14310:	muleq	r1, r1, sp
   14314:	andeq	pc, r1, pc, lsr #27
   14318:	andeq	r0, r2, pc, asr r2
   1431c:	push	{fp, lr}
   14320:	mov	fp, sp
   14324:	sub	sp, sp, #24
   14328:	str	r0, [fp, #-4]
   1432c:	movw	r0, #0
   14330:	strh	r0, [fp, #-6]
   14334:	ldr	r0, [fp, #-4]
   14338:	movw	r1, #0
   1433c:	cmp	r0, r1
   14340:	beq	1434c <test_type_aliases@@Base+0xd54>
   14344:	b	14348 <test_type_aliases@@Base+0xd50>
   14348:	b	1436c <test_type_aliases@@Base+0xd74>
   1434c:	ldr	r0, [pc, #168]	; 143fc <test_type_aliases@@Base+0xe04>
   14350:	add	r0, pc, r0
   14354:	ldr	r1, [pc, #164]	; 14400 <test_type_aliases@@Base+0xe08>
   14358:	add	r1, pc, r1
   1435c:	ldr	r2, [pc, #160]	; 14404 <test_type_aliases@@Base+0xe0c>
   14360:	add	r3, pc, r2
   14364:	movw	r2, #754	; 0x2f2
   14368:	bl	12e68 <__assert_fail@plt>
   1436c:	mov	r0, #5
   14370:	strh	r0, [fp, #-8]
   14374:	ldr	r0, [fp, #-4]
   14378:	str	r0, [sp, #8]
   1437c:	bl	2344c <main@@Base+0x494>
   14380:	ldr	r1, [sp, #8]
   14384:	sub	r0, r1, r0
   14388:	str	r0, [sp, #12]
   1438c:	ldr	r0, [sp, #12]
   14390:	bl	23470 <main@@Base+0x4b8>
   14394:	ldrh	r1, [fp, #-8]
   14398:	add	r1, r1, #3
   1439c:	lsl	r1, r1, #1
   143a0:	cmp	r0, r1
   143a4:	bcc	143c0 <test_type_aliases@@Base+0xdc8>
   143a8:	ldr	r0, [sp, #12]
   143ac:	ldrh	r1, [fp, #-8]
   143b0:	add	r0, r0, r1, lsl #1
   143b4:	add	r0, r0, #4
   143b8:	bl	23470 <main@@Base+0x4b8>
   143bc:	strh	r0, [fp, #-6]
   143c0:	ldrh	r0, [fp, #-6]
   143c4:	cmp	r0, #0
   143c8:	beq	143e4 <test_type_aliases@@Base+0xdec>
   143cc:	ldr	r0, [fp, #-4]
   143d0:	ldrh	r1, [fp, #-6]
   143d4:	add	r0, r0, r1
   143d8:	bl	2443c <main@@Base+0x1484>
   143dc:	str	r0, [sp, #4]
   143e0:	b	143f0 <test_type_aliases@@Base+0xdf8>
   143e4:	movw	r0, #0
   143e8:	str	r0, [sp, #4]
   143ec:	b	143f0 <test_type_aliases@@Base+0xdf8>
   143f0:	ldr	r0, [sp, #4]
   143f4:	mov	sp, fp
   143f8:	pop	{fp, pc}
   143fc:	muleq	r1, sp, ip
   14400:			; <UNDEFINED> instruction: 0x0001fcbb
   14404:			; <UNDEFINED> instruction: 0x000201b7
   14408:	push	{fp, lr}
   1440c:	mov	fp, sp
   14410:	sub	sp, sp, #32
   14414:	str	r0, [fp, #-4]
   14418:	movw	r0, #0
   1441c:	strh	r0, [fp, #-6]
   14420:	ldr	r0, [fp, #-4]
   14424:	movw	r1, #0
   14428:	cmp	r0, r1
   1442c:	beq	14438 <test_type_aliases@@Base+0xe40>
   14430:	b	14434 <test_type_aliases@@Base+0xe3c>
   14434:	b	14458 <test_type_aliases@@Base+0xe60>
   14438:	ldr	r0, [pc, #196]	; 14504 <test_type_aliases@@Base+0xf0c>
   1443c:	add	r0, pc, r0
   14440:	ldr	r1, [pc, #192]	; 14508 <test_type_aliases@@Base+0xf10>
   14444:	add	r1, pc, r1
   14448:	ldr	r2, [pc, #188]	; 1450c <test_type_aliases@@Base+0xf14>
   1444c:	add	r3, pc, r2
   14450:	movw	r2, #756	; 0x2f4
   14454:	bl	12e68 <__assert_fail@plt>
   14458:	mov	r0, #7
   1445c:	strh	r0, [fp, #-8]
   14460:	ldr	r0, [fp, #-4]
   14464:	str	r0, [sp, #16]
   14468:	bl	2344c <main@@Base+0x494>
   1446c:	ldr	r1, [sp, #16]
   14470:	sub	r0, r1, r0
   14474:	str	r0, [fp, #-12]
   14478:	ldr	r0, [fp, #-12]
   1447c:	bl	23470 <main@@Base+0x4b8>
   14480:	ldrh	r1, [fp, #-8]
   14484:	add	r1, r1, #3
   14488:	lsl	r1, r1, #1
   1448c:	cmp	r0, r1
   14490:	bcc	144ac <test_type_aliases@@Base+0xeb4>
   14494:	ldr	r0, [fp, #-12]
   14498:	ldrh	r1, [fp, #-8]
   1449c:	add	r0, r0, r1, lsl #1
   144a0:	add	r0, r0, #4
   144a4:	bl	23470 <main@@Base+0x4b8>
   144a8:	strh	r0, [fp, #-6]
   144ac:	ldrh	r0, [fp, #-6]
   144b0:	cmp	r0, #0
   144b4:	beq	144d4 <test_type_aliases@@Base+0xedc>
   144b8:	ldr	r0, [fp, #-4]
   144bc:	ldrh	r1, [fp, #-6]
   144c0:	add	r0, r0, r1
   144c4:	bl	24474 <main@@Base+0x14bc>
   144c8:	str	r0, [sp, #12]
   144cc:	str	r1, [sp, #8]
   144d0:	b	144e8 <test_type_aliases@@Base+0xef0>
   144d4:	mov	r0, #0
   144d8:	mov	r1, r0
   144dc:	str	r1, [sp, #12]
   144e0:	str	r0, [sp, #8]
   144e4:	b	144e8 <test_type_aliases@@Base+0xef0>
   144e8:	ldr	r0, [sp, #8]
   144ec:	ldr	r1, [sp, #12]
   144f0:	str	r0, [sp, #4]
   144f4:	mov	r0, r1
   144f8:	ldr	r1, [sp, #4]
   144fc:	mov	sp, fp
   14500:	pop	{fp, pc}
   14504:			; <UNDEFINED> instruction: 0x0001fbb1
   14508:	andeq	pc, r1, pc, asr #23
   1450c:	andeq	r0, r2, r7, lsl r1
   14510:	push	{fp, lr}
   14514:	mov	fp, sp
   14518:	sub	sp, sp, #24
   1451c:	str	r0, [fp, #-4]
   14520:	movw	r0, #0
   14524:	strh	r0, [fp, #-6]
   14528:	ldr	r0, [fp, #-4]
   1452c:	movw	r1, #0
   14530:	cmp	r0, r1
   14534:	beq	14540 <test_type_aliases@@Base+0xf48>
   14538:	b	1453c <test_type_aliases@@Base+0xf44>
   1453c:	b	14560 <test_type_aliases@@Base+0xf68>
   14540:	ldr	r0, [pc, #168]	; 145f0 <test_type_aliases@@Base+0xff8>
   14544:	add	r0, pc, r0
   14548:	ldr	r1, [pc, #164]	; 145f4 <test_type_aliases@@Base+0xffc>
   1454c:	add	r1, pc, r1
   14550:	ldr	r2, [pc, #160]	; 145f8 <test_type_aliases@@Base+0x1000>
   14554:	add	r3, pc, r2
   14558:	movw	r2, #757	; 0x2f5
   1455c:	bl	12e68 <__assert_fail@plt>
   14560:	mov	r0, #8
   14564:	strh	r0, [fp, #-8]
   14568:	ldr	r0, [fp, #-4]
   1456c:	str	r0, [sp, #8]
   14570:	bl	2344c <main@@Base+0x494>
   14574:	ldr	r1, [sp, #8]
   14578:	sub	r0, r1, r0
   1457c:	str	r0, [sp, #12]
   14580:	ldr	r0, [sp, #12]
   14584:	bl	23470 <main@@Base+0x4b8>
   14588:	ldrh	r1, [fp, #-8]
   1458c:	add	r1, r1, #3
   14590:	lsl	r1, r1, #1
   14594:	cmp	r0, r1
   14598:	bcc	145b4 <test_type_aliases@@Base+0xfbc>
   1459c:	ldr	r0, [sp, #12]
   145a0:	ldrh	r1, [fp, #-8]
   145a4:	add	r0, r0, r1, lsl #1
   145a8:	add	r0, r0, #4
   145ac:	bl	23470 <main@@Base+0x4b8>
   145b0:	strh	r0, [fp, #-6]
   145b4:	ldrh	r0, [fp, #-6]
   145b8:	cmp	r0, #0
   145bc:	beq	145d8 <test_type_aliases@@Base+0xfe0>
   145c0:	ldr	r0, [fp, #-4]
   145c4:	ldrh	r1, [fp, #-6]
   145c8:	add	r0, r0, r1
   145cc:	bl	244c4 <main@@Base+0x150c>
   145d0:	vstr	s0, [sp, #4]
   145d4:	b	145e4 <test_type_aliases@@Base+0xfec>
   145d8:	vldr	s0, [pc, #28]	; 145fc <test_type_aliases@@Base+0x1004>
   145dc:	vstr	s0, [sp, #4]
   145e0:	b	145e4 <test_type_aliases@@Base+0xfec>
   145e4:	vldr	s0, [sp, #4]
   145e8:	mov	sp, fp
   145ec:	pop	{fp, pc}
   145f0:	andeq	pc, r1, r9, lsr #21
   145f4:	andeq	pc, r1, r7, asr #21
   145f8:	andeq	r0, r2, fp, asr r0
   145fc:	andeq	r0, r0, r0
   14600:	push	{fp, lr}
   14604:	mov	fp, sp
   14608:	sub	sp, sp, #24
   1460c:	str	r0, [fp, #-4]
   14610:	movw	r0, #0
   14614:	strh	r0, [fp, #-6]
   14618:	ldr	r0, [fp, #-4]
   1461c:	movw	r1, #0
   14620:	cmp	r0, r1
   14624:	beq	14630 <test_type_aliases@@Base+0x1038>
   14628:	b	1462c <test_type_aliases@@Base+0x1034>
   1462c:	b	14650 <test_type_aliases@@Base+0x1058>
   14630:	ldr	r0, [pc, #184]	; 146f0 <test_type_aliases@@Base+0x10f8>
   14634:	add	r0, pc, r0
   14638:	ldr	r1, [pc, #180]	; 146f4 <test_type_aliases@@Base+0x10fc>
   1463c:	add	r1, pc, r1
   14640:	ldr	r2, [pc, #176]	; 146f8 <test_type_aliases@@Base+0x1100>
   14644:	add	r3, pc, r2
   14648:	movw	r2, #758	; 0x2f6
   1464c:	bl	12e68 <__assert_fail@plt>
   14650:	mov	r0, #9
   14654:	strh	r0, [fp, #-8]
   14658:	ldr	r0, [fp, #-4]
   1465c:	str	r0, [sp, #8]
   14660:	bl	2344c <main@@Base+0x494>
   14664:	ldr	r1, [sp, #8]
   14668:	sub	r0, r1, r0
   1466c:	str	r0, [sp, #12]
   14670:	ldr	r0, [sp, #12]
   14674:	bl	23470 <main@@Base+0x4b8>
   14678:	ldrh	r1, [fp, #-8]
   1467c:	add	r1, r1, #3
   14680:	lsl	r1, r1, #1
   14684:	cmp	r0, r1
   14688:	bcc	146a4 <test_type_aliases@@Base+0x10ac>
   1468c:	ldr	r0, [sp, #12]
   14690:	ldrh	r1, [fp, #-8]
   14694:	add	r0, r0, r1, lsl #1
   14698:	add	r0, r0, #4
   1469c:	bl	23470 <main@@Base+0x4b8>
   146a0:	strh	r0, [fp, #-6]
   146a4:	ldrh	r0, [fp, #-6]
   146a8:	cmp	r0, #0
   146ac:	beq	146c8 <test_type_aliases@@Base+0x10d0>
   146b0:	ldr	r0, [fp, #-4]
   146b4:	ldrh	r1, [fp, #-6]
   146b8:	add	r0, r0, r1
   146bc:	bl	2450c <main@@Base+0x1554>
   146c0:	vstr	d0, [sp]
   146c4:	b	146d4 <test_type_aliases@@Base+0x10dc>
   146c8:	vldr	d16, [pc, #24]	; 146e8 <test_type_aliases@@Base+0x10f0>
   146cc:	vstr	d16, [sp]
   146d0:	b	146d4 <test_type_aliases@@Base+0x10dc>
   146d4:	vldr	d16, [sp]
   146d8:	vmov.f64	d0, d16
   146dc:	mov	sp, fp
   146e0:	pop	{fp, pc}
   146e4:	nop	{0}
	...
   146f0:			; <UNDEFINED> instruction: 0x0001f9b9
   146f4:	ldrdeq	pc, [r1], -r7
   146f8:			; <UNDEFINED> instruction: 0x0001ffb4

000146fc <test_empty_monster@@Base>:
   146fc:	push	{fp, lr}
   14700:	mov	fp, sp
   14704:	sub	sp, sp, #56	; 0x38
   14708:	str	r0, [fp, #-8]
   1470c:	ldr	r0, [fp, #-8]
   14710:	bl	286d4 <flatcc_builder_reset@@Base>
   14714:	ldr	r1, [pc, #364]	; 14888 <test_empty_monster@@Base+0x18c>
   14718:	add	r1, pc, r1
   1471c:	ldr	r2, [fp, #-8]
   14720:	str	r0, [sp, #28]
   14724:	mov	r0, r2
   14728:	bl	14898 <test_empty_monster@@Base+0x19c>
   1472c:	ldr	r1, [fp, #-8]
   14730:	str	r0, [sp, #24]
   14734:	mov	r0, r1
   14738:	bl	148cc <test_empty_monster@@Base+0x1d0>
   1473c:	ldr	r1, [pc, #320]	; 14884 <test_empty_monster@@Base+0x188>
   14740:	add	r1, pc, r1
   14744:	ldr	r2, [fp, #-8]
   14748:	str	r0, [sp, #20]
   1474c:	mov	r0, r2
   14750:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   14754:	ldr	r1, [fp, #-8]
   14758:	str	r0, [sp, #16]
   1475c:	mov	r0, r1
   14760:	bl	1493c <test_empty_monster@@Base+0x240>
   14764:	str	r0, [fp, #-16]
   14768:	ldr	r0, [fp, #-8]
   1476c:	ldr	r1, [fp, #-16]
   14770:	bl	149ac <test_empty_monster@@Base+0x2b0>
   14774:	ldr	r1, [fp, #-8]
   14778:	str	r0, [sp, #12]
   1477c:	mov	r0, r1
   14780:	sub	r1, fp, #24
   14784:	bl	2db44 <flatcc_builder_finalize_aligned_buffer@@Base>
   14788:	ldr	r1, [pc, #236]	; 1487c <test_empty_monster@@Base+0x180>
   1478c:	add	r1, pc, r1
   14790:	ldr	r2, [pc, #232]	; 14880 <test_empty_monster@@Base+0x184>
   14794:	ldr	r2, [pc, r2]
   14798:	str	r0, [fp, #-20]	; 0xffffffec
   1479c:	ldr	r0, [fp, #-20]	; 0xffffffec
   147a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147a4:	ldr	r2, [r2]
   147a8:	str	r0, [sp, #8]
   147ac:	mov	r0, r1
   147b0:	ldr	r1, [sp, #8]
   147b4:	str	r2, [sp, #4]
   147b8:	mov	r2, r3
   147bc:	ldr	r3, [sp, #4]
   147c0:	bl	13ae8 <test_type_aliases@@Base+0x4f0>
   147c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   147c8:	bl	12f68 <verify_empty_monster@@Base>
   147cc:	str	r0, [fp, #-12]
   147d0:	cmp	r0, #0
   147d4:	beq	147dc <test_empty_monster@@Base+0xe0>
   147d8:	b	14860 <test_empty_monster@@Base+0x164>
   147dc:	ldr	r0, [pc, #168]	; 1488c <test_empty_monster@@Base+0x190>
   147e0:	add	r2, pc, r0
   147e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   147e8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   147ec:	bl	149d4 <test_empty_monster@@Base+0x2d8>
   147f0:	str	r0, [fp, #-12]
   147f4:	cmp	r0, #0
   147f8:	beq	14828 <test_empty_monster@@Base+0x12c>
   147fc:	ldr	r0, [fp, #-12]
   14800:	bl	2ebb4 <flatcc_verify_error_string@@Base>
   14804:	ldr	r1, [pc, #136]	; 14894 <test_empty_monster@@Base+0x198>
   14808:	add	r1, pc, r1
   1480c:	str	r0, [sp]
   14810:	mov	r0, r1
   14814:	ldr	r1, [sp]
   14818:	bl	12d9c <printf@plt>
   1481c:	mvn	r1, #0
   14820:	str	r1, [fp, #-4]
   14824:	b	14870 <test_empty_monster@@Base+0x174>
   14828:	ldr	r0, [fp, #-20]	; 0xffffffec
   1482c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14830:	sub	r1, r1, #1
   14834:	bl	14a10 <test_empty_monster@@Base+0x314>
   14838:	movw	r1, #0
   1483c:	cmp	r1, r0
   14840:	bne	1485c <test_empty_monster@@Base+0x160>
   14844:	ldr	r0, [pc, #68]	; 14890 <test_empty_monster@@Base+0x194>
   14848:	add	r0, pc, r0
   1484c:	bl	12d9c <printf@plt>
   14850:	mvn	r1, #0
   14854:	str	r1, [fp, #-4]
   14858:	b	14870 <test_empty_monster@@Base+0x174>
   1485c:	b	14860 <test_empty_monster@@Base+0x164>
   14860:	ldr	r0, [fp, #-20]	; 0xffffffec
   14864:	bl	2dcec <flatcc_builder_aligned_free@@Base>
   14868:	ldr	r0, [fp, #-12]
   1486c:	str	r0, [fp, #-4]
   14870:	ldr	r0, [fp, #-4]
   14874:	mov	sp, fp
   14878:	pop	{fp, pc}
   1487c:	andeq	sp, r1, sp, lsr #2
   14880:	andeq	r3, r3, r0, asr #17
   14884:	andeq	sp, r1, pc, ror #2
   14888:	andeq	ip, r1, r0, asr #31
   1488c:	strdeq	ip, [r1], -r8
   14890:	andeq	sp, r1, sp, lsr #1
   14894:	andeq	sp, r1, r5, asr #1
   14898:	push	{fp, lr}
   1489c:	mov	fp, sp
   148a0:	sub	sp, sp, #8
   148a4:	str	r0, [sp, #4]
   148a8:	str	r1, [sp]
   148ac:	ldr	r0, [sp, #4]
   148b0:	ldr	r1, [sp]
   148b4:	movw	r2, #0
   148b8:	uxth	r2, r2
   148bc:	movw	r3, #0
   148c0:	bl	29590 <flatcc_builder_start_buffer@@Base>
   148c4:	mov	sp, fp
   148c8:	pop	{fp, pc}
   148cc:	push	{fp, lr}
   148d0:	mov	fp, sp
   148d4:	sub	sp, sp, #8
   148d8:	str	r0, [sp, #4]
   148dc:	ldr	r0, [sp, #4]
   148e0:	movw	r1, #36	; 0x24
   148e4:	bl	2acb8 <flatcc_builder_start_table@@Base>
   148e8:	mov	sp, fp
   148ec:	pop	{fp, pc}
   148f0:	push	{fp, lr}
   148f4:	mov	fp, sp
   148f8:	sub	sp, sp, #16
   148fc:	str	r0, [fp, #-4]
   14900:	str	r1, [sp, #8]
   14904:	ldr	r0, [fp, #-4]
   14908:	ldr	r1, [fp, #-4]
   1490c:	ldr	r2, [sp, #8]
   14910:	str	r0, [sp, #4]
   14914:	mov	r0, r1
   14918:	mov	r1, r2
   1491c:	bl	2d138 <flatcc_builder_create_string_str@@Base>
   14920:	ldr	r1, [sp, #4]
   14924:	str	r0, [sp]
   14928:	mov	r0, r1
   1492c:	ldr	r1, [sp]
   14930:	bl	19154 <gen_monster@@Base+0xcf8>
   14934:	mov	sp, fp
   14938:	pop	{fp, pc}
   1493c:	push	{fp, lr}
   14940:	mov	fp, sp
   14944:	sub	sp, sp, #8
   14948:	ldr	r1, [pc, #76]	; 1499c <test_empty_monster@@Base+0x2a0>
   1494c:	add	r1, pc, r1
   14950:	str	r0, [sp, #4]
   14954:	ldr	r0, [sp, #4]
   14958:	movw	r2, #1
   1495c:	bl	2b830 <flatcc_builder_check_required@@Base>
   14960:	cmp	r0, #0
   14964:	beq	1496c <test_empty_monster@@Base+0x270>
   14968:	b	1498c <test_empty_monster@@Base+0x290>
   1496c:	ldr	r0, [pc, #44]	; 149a0 <test_empty_monster@@Base+0x2a4>
   14970:	add	r0, pc, r0
   14974:	ldr	r1, [pc, #40]	; 149a4 <test_empty_monster@@Base+0x2a8>
   14978:	add	r1, pc, r1
   1497c:	ldr	r2, [pc, #36]	; 149a8 <test_empty_monster@@Base+0x2ac>
   14980:	add	r3, pc, r2
   14984:	movw	r2, #235	; 0xeb
   14988:	bl	12e68 <__assert_fail@plt>
   1498c:	ldr	r0, [sp, #4]
   14990:	bl	2b920 <flatcc_builder_end_table@@Base>
   14994:	mov	sp, fp
   14998:	pop	{fp, pc}
   1499c:	andeq	r1, r2, r0, lsr r8
   149a0:	ldrdeq	pc, [r1], -r2
   149a4:	andeq	pc, r1, pc, ror #17
   149a8:	andeq	pc, r1, r4, ror #26
   149ac:	push	{fp, lr}
   149b0:	mov	fp, sp
   149b4:	sub	sp, sp, #8
   149b8:	str	r0, [sp, #4]
   149bc:	str	r1, [sp]
   149c0:	ldr	r0, [sp, #4]
   149c4:	ldr	r1, [sp]
   149c8:	bl	298d4 <flatcc_builder_end_buffer@@Base>
   149cc:	mov	sp, fp
   149d0:	pop	{fp, pc}
   149d4:	push	{fp, lr}
   149d8:	mov	fp, sp
   149dc:	sub	sp, sp, #16
   149e0:	ldr	r3, [pc, #36]	; 14a0c <test_empty_monster@@Base+0x310>
   149e4:	add	r3, pc, r3
   149e8:	str	r0, [fp, #-4]
   149ec:	str	r1, [sp, #8]
   149f0:	str	r2, [sp, #4]
   149f4:	ldr	r0, [fp, #-4]
   149f8:	ldr	r1, [sp, #8]
   149fc:	ldr	r2, [sp, #4]
   14a00:	bl	3072c <flatcc_verify_table_as_root@@Base>
   14a04:	mov	sp, fp
   14a08:	pop	{fp, pc}
   14a0c:	andeq	pc, r0, r0, ror #22
   14a10:	push	{fp, lr}
   14a14:	mov	fp, sp
   14a18:	sub	sp, sp, #8
   14a1c:	ldr	r2, [pc, #36]	; 14a48 <test_empty_monster@@Base+0x34c>
   14a20:	add	r2, pc, r2
   14a24:	ldr	r3, [pc, #32]	; 14a4c <test_empty_monster@@Base+0x350>
   14a28:	add	r3, pc, r3
   14a2c:	str	r0, [sp, #4]
   14a30:	str	r1, [sp]
   14a34:	ldr	r0, [sp, #4]
   14a38:	ldr	r1, [sp]
   14a3c:	bl	3072c <flatcc_verify_table_as_root@@Base>
   14a40:	mov	sp, fp
   14a44:	pop	{fp, pc}
   14a48:			; <UNDEFINED> instruction: 0x0001ccb8
   14a4c:	andeq	pc, r0, ip, lsl fp	; <UNPREDICTABLE>

00014a50 <test_typed_empty_monster@@Base>:
   14a50:	push	{fp, lr}
   14a54:	mov	fp, sp
   14a58:	sub	sp, sp, #96	; 0x60
   14a5c:	str	r0, [fp, #-4]
   14a60:	mvn	r0, #0
   14a64:	str	r0, [fp, #-8]
   14a68:	sub	r0, fp, #24
   14a6c:	movw	r1, #0
   14a70:	and	r1, r1, #255	; 0xff
   14a74:	movw	r2, #4
   14a78:	bl	12e2c <memset@plt>
   14a7c:	ldr	r0, [fp, #-4]
   14a80:	bl	286d4 <flatcc_builder_reset@@Base>
   14a84:	ldr	r1, [pc, #796]	; 14da8 <test_typed_empty_monster@@Base+0x358>
   14a88:	add	r1, pc, r1
   14a8c:	ldr	r2, [fp, #-4]
   14a90:	str	r0, [fp, #-28]	; 0xffffffe4
   14a94:	mov	r0, r2
   14a98:	bl	14898 <test_empty_monster@@Base+0x19c>
   14a9c:	ldr	r1, [fp, #-4]
   14aa0:	str	r0, [fp, #-32]	; 0xffffffe0
   14aa4:	mov	r0, r1
   14aa8:	bl	148cc <test_empty_monster@@Base+0x1d0>
   14aac:	ldr	r1, [pc, #752]	; 14da4 <test_typed_empty_monster@@Base+0x354>
   14ab0:	add	r1, pc, r1
   14ab4:	ldr	r2, [fp, #-4]
   14ab8:	str	r0, [fp, #-36]	; 0xffffffdc
   14abc:	mov	r0, r2
   14ac0:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   14ac4:	ldr	r1, [fp, #-4]
   14ac8:	str	r0, [fp, #-40]	; 0xffffffd8
   14acc:	mov	r0, r1
   14ad0:	bl	1493c <test_empty_monster@@Base+0x240>
   14ad4:	str	r0, [fp, #-12]
   14ad8:	ldr	r0, [fp, #-4]
   14adc:	ldr	r1, [fp, #-12]
   14ae0:	bl	149ac <test_empty_monster@@Base+0x2b0>
   14ae4:	ldr	r1, [fp, #-4]
   14ae8:	str	r0, [fp, #-44]	; 0xffffffd4
   14aec:	mov	r0, r1
   14af0:	sub	r1, fp, #20
   14af4:	bl	2db44 <flatcc_builder_finalize_aligned_buffer@@Base>
   14af8:	ldr	r1, [pc, #668]	; 14d9c <test_typed_empty_monster@@Base+0x34c>
   14afc:	add	r1, pc, r1
   14b00:	ldr	r2, [pc, #664]	; 14da0 <test_typed_empty_monster@@Base+0x350>
   14b04:	ldr	r2, [pc, r2]
   14b08:	str	r0, [fp, #-16]
   14b0c:	ldr	r0, [fp, #-16]
   14b10:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b14:	ldr	r2, [r2]
   14b18:	str	r0, [sp, #48]	; 0x30
   14b1c:	mov	r0, r1
   14b20:	ldr	r1, [sp, #48]	; 0x30
   14b24:	str	r2, [sp, #44]	; 0x2c
   14b28:	mov	r2, r3
   14b2c:	ldr	r3, [sp, #44]	; 0x2c
   14b30:	bl	13ae8 <test_type_aliases@@Base+0x4f0>
   14b34:	ldr	r0, [fp, #-16]
   14b38:	bl	14de0 <test_typed_empty_monster@@Base+0x390>
   14b3c:	ldr	r1, [pc, #596]	; 14d98 <test_typed_empty_monster@@Base+0x348>
   14b40:	add	r1, pc, r1
   14b44:	str	r0, [sp, #40]	; 0x28
   14b48:	mov	r0, r1
   14b4c:	bl	14e04 <test_typed_empty_monster@@Base+0x3b4>
   14b50:	ldr	r1, [sp, #40]	; 0x28
   14b54:	cmp	r1, r0
   14b58:	beq	14b80 <test_typed_empty_monster@@Base+0x130>
   14b5c:	ldr	r0, [fp, #-16]
   14b60:	bl	14de0 <test_typed_empty_monster@@Base+0x390>
   14b64:	ldr	r1, [pc, #624]	; 14ddc <test_typed_empty_monster@@Base+0x38c>
   14b68:	add	r1, pc, r1
   14b6c:	str	r0, [sp, #36]	; 0x24
   14b70:	mov	r0, r1
   14b74:	ldr	r1, [sp, #36]	; 0x24
   14b78:	bl	12d9c <printf@plt>
   14b7c:	b	14d84 <test_typed_empty_monster@@Base+0x334>
   14b80:	ldr	r1, [pc, #548]	; 14dac <test_typed_empty_monster@@Base+0x35c>
   14b84:	ldr	r0, [fp, #-16]
   14b88:	bl	14e80 <test_typed_empty_monster@@Base+0x430>
   14b8c:	cmp	r0, #0
   14b90:	bne	14ba4 <test_typed_empty_monster@@Base+0x154>
   14b94:	ldr	r0, [pc, #532]	; 14db0 <test_typed_empty_monster@@Base+0x360>
   14b98:	add	r0, pc, r0
   14b9c:	bl	12d9c <printf@plt>
   14ba0:	b	14d84 <test_typed_empty_monster@@Base+0x334>
   14ba4:	ldr	r1, [pc, #512]	; 14dac <test_typed_empty_monster@@Base+0x35c>
   14ba8:	ldr	r0, [fp, #-16]
   14bac:	bl	14e80 <test_typed_empty_monster@@Base+0x430>
   14bb0:	cmp	r0, #0
   14bb4:	bne	14bc8 <test_typed_empty_monster@@Base+0x178>
   14bb8:	ldr	r0, [pc, #500]	; 14db4 <test_typed_empty_monster@@Base+0x364>
   14bbc:	add	r0, pc, r0
   14bc0:	bl	12d9c <printf@plt>
   14bc4:	b	14d84 <test_typed_empty_monster@@Base+0x334>
   14bc8:	ldr	r0, [fp, #-16]
   14bcc:	bl	12f68 <verify_empty_monster@@Base>
   14bd0:	cmp	r0, #0
   14bd4:	bne	14be8 <test_typed_empty_monster@@Base+0x198>
   14bd8:	ldr	r0, [pc, #472]	; 14db8 <test_typed_empty_monster@@Base+0x368>
   14bdc:	add	r0, pc, r0
   14be0:	bl	12d9c <printf@plt>
   14be4:	b	14d84 <test_typed_empty_monster@@Base+0x334>
   14be8:	ldr	r0, [pc, #460]	; 14dbc <test_typed_empty_monster@@Base+0x36c>
   14bec:	add	r2, pc, r0
   14bf0:	ldr	r0, [fp, #-16]
   14bf4:	ldr	r1, [fp, #-20]	; 0xffffffec
   14bf8:	bl	149d4 <test_empty_monster@@Base+0x2d8>
   14bfc:	str	r0, [fp, #-8]
   14c00:	cmp	r0, #0
   14c04:	beq	14c2c <test_typed_empty_monster@@Base+0x1dc>
   14c08:	ldr	r0, [fp, #-8]
   14c0c:	bl	2ebb4 <flatcc_verify_error_string@@Base>
   14c10:	ldr	r1, [pc, #448]	; 14dd8 <test_typed_empty_monster@@Base+0x388>
   14c14:	add	r1, pc, r1
   14c18:	str	r0, [sp, #32]
   14c1c:	mov	r0, r1
   14c20:	ldr	r1, [sp, #32]
   14c24:	bl	12d9c <printf@plt>
   14c28:	b	14d84 <test_typed_empty_monster@@Base+0x334>
   14c2c:	ldr	r0, [fp, #-16]
   14c30:	ldr	r1, [fp, #-20]	; 0xffffffec
   14c34:	bl	14ed8 <test_typed_empty_monster@@Base+0x488>
   14c38:	str	r0, [fp, #-8]
   14c3c:	cmp	r0, #0
   14c40:	beq	14c68 <test_typed_empty_monster@@Base+0x218>
   14c44:	ldr	r0, [fp, #-8]
   14c48:	bl	2ebb4 <flatcc_verify_error_string@@Base>
   14c4c:	ldr	r1, [pc, #384]	; 14dd4 <test_typed_empty_monster@@Base+0x384>
   14c50:	add	r1, pc, r1
   14c54:	str	r0, [sp, #28]
   14c58:	mov	r0, r1
   14c5c:	ldr	r1, [sp, #28]
   14c60:	bl	12d9c <printf@plt>
   14c64:	b	14d84 <test_typed_empty_monster@@Base+0x334>
   14c68:	ldr	r2, [pc, #316]	; 14dac <test_typed_empty_monster@@Base+0x35c>
   14c6c:	ldr	r0, [fp, #-16]
   14c70:	ldr	r1, [fp, #-20]	; 0xffffffec
   14c74:	bl	14f18 <test_typed_empty_monster@@Base+0x4c8>
   14c78:	str	r0, [fp, #-8]
   14c7c:	cmp	r0, #0
   14c80:	beq	14ca8 <test_typed_empty_monster@@Base+0x258>
   14c84:	ldr	r0, [fp, #-8]
   14c88:	bl	2ebb4 <flatcc_verify_error_string@@Base>
   14c8c:	ldr	r1, [pc, #316]	; 14dd0 <test_typed_empty_monster@@Base+0x380>
   14c90:	add	r1, pc, r1
   14c94:	str	r0, [sp, #24]
   14c98:	mov	r0, r1
   14c9c:	ldr	r1, [sp, #24]
   14ca0:	bl	12d9c <printf@plt>
   14ca4:	b	14d84 <test_typed_empty_monster@@Base+0x334>
   14ca8:	ldr	r0, [pc, #272]	; 14dc0 <test_typed_empty_monster@@Base+0x370>
   14cac:	add	r0, pc, r0
   14cb0:	ldr	r1, [fp, #-16]
   14cb4:	ldr	r2, [fp, #-20]	; 0xffffffec
   14cb8:	str	r1, [sp, #20]
   14cbc:	str	r2, [sp, #16]
   14cc0:	bl	14e04 <test_typed_empty_monster@@Base+0x3b4>
   14cc4:	ldr	r1, [sp, #20]
   14cc8:	str	r0, [sp, #12]
   14ccc:	mov	r0, r1
   14cd0:	ldr	r1, [sp, #16]
   14cd4:	ldr	r2, [sp, #12]
   14cd8:	bl	14f18 <test_typed_empty_monster@@Base+0x4c8>
   14cdc:	str	r0, [fp, #-8]
   14ce0:	cmp	r0, #0
   14ce4:	beq	14d0c <test_typed_empty_monster@@Base+0x2bc>
   14ce8:	ldr	r0, [fp, #-8]
   14cec:	bl	2ebb4 <flatcc_verify_error_string@@Base>
   14cf0:	ldr	r1, [pc, #212]	; 14dcc <test_typed_empty_monster@@Base+0x37c>
   14cf4:	add	r1, pc, r1
   14cf8:	str	r0, [sp, #8]
   14cfc:	mov	r0, r1
   14d00:	ldr	r1, [sp, #8]
   14d04:	bl	12d9c <printf@plt>
   14d08:	b	14d84 <test_typed_empty_monster@@Base+0x334>
   14d0c:	ldr	r0, [pc, #152]	; 14dac <test_typed_empty_monster@@Base+0x35c>
   14d10:	sub	r1, fp, #24
   14d14:	bl	14f54 <test_typed_empty_monster@@Base+0x504>
   14d18:	sub	r2, fp, #24
   14d1c:	ldr	r0, [fp, #-16]
   14d20:	ldr	r1, [fp, #-20]	; 0xffffffec
   14d24:	bl	149d4 <test_empty_monster@@Base+0x2d8>
   14d28:	str	r0, [fp, #-8]
   14d2c:	cmp	r0, #0
   14d30:	beq	14d58 <test_typed_empty_monster@@Base+0x308>
   14d34:	ldr	r0, [fp, #-8]
   14d38:	bl	2ebb4 <flatcc_verify_error_string@@Base>
   14d3c:	ldr	r1, [pc, #132]	; 14dc8 <test_typed_empty_monster@@Base+0x378>
   14d40:	add	r1, pc, r1
   14d44:	str	r0, [sp, #4]
   14d48:	mov	r0, r1
   14d4c:	ldr	r1, [sp, #4]
   14d50:	bl	12d9c <printf@plt>
   14d54:	b	14d84 <test_typed_empty_monster@@Base+0x334>
   14d58:	ldr	r0, [fp, #-16]
   14d5c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14d60:	bl	14a10 <test_empty_monster@@Base+0x314>
   14d64:	cmp	r0, #0
   14d68:	bne	14d7c <test_typed_empty_monster@@Base+0x32c>
   14d6c:	ldr	r0, [pc, #80]	; 14dc4 <test_typed_empty_monster@@Base+0x374>
   14d70:	add	r0, pc, r0
   14d74:	bl	12d9c <printf@plt>
   14d78:	b	14d84 <test_typed_empty_monster@@Base+0x334>
   14d7c:	movw	r0, #0
   14d80:	str	r0, [fp, #-8]
   14d84:	ldr	r0, [fp, #-16]
   14d88:	bl	2dcec <flatcc_builder_aligned_free@@Base>
   14d8c:	ldr	r0, [fp, #-8]
   14d90:	mov	sp, fp
   14d94:	pop	{fp, pc}
   14d98:	andeq	ip, r1, r2, lsl #28
   14d9c:	andeq	ip, r1, ip, lsr #28
   14da0:	andeq	r3, r3, r0, asr r5
   14da4:	strdeq	ip, [r1], -pc	; <UNPREDICTABLE>
   14da8:	muleq	r1, fp, lr
   14dac:	movwcc	pc, #58497	; 0xe481	; <UNPREDICTABLE>
   14db0:	strdeq	ip, [r1], -r3
   14db4:	andeq	ip, r1, pc, asr #27
   14db8:	ldrdeq	ip, [r1], -r8
   14dbc:	andeq	ip, r1, r7, lsr sp
   14dc0:	muleq	r1, r6, ip
   14dc4:	andeq	ip, r1, r8, lsr #26
   14dc8:			; <UNDEFINED> instruction: 0x0001ccb3
   14dcc:	andeq	ip, r1, r4, ror #26
   14dd0:	muleq	r1, r1, sp
   14dd4:	andeq	ip, r1, r3, lsr #27
   14dd8:	ldrdeq	ip, [r1], -pc	; <UNPREDICTABLE>
   14ddc:	strdeq	ip, [r1], -r1
   14de0:	push	{fp, lr}
   14de4:	mov	fp, sp
   14de8:	sub	sp, sp, #8
   14dec:	str	r0, [sp, #4]
   14df0:	ldr	r0, [sp, #4]
   14df4:	add	r0, r0, #4
   14df8:	bl	25850 <main@@Base+0x2898>
   14dfc:	mov	sp, fp
   14e00:	pop	{fp, pc}
   14e04:	sub	sp, sp, #8
   14e08:	ldr	r1, [pc, #104]	; 14e78 <test_typed_empty_monster@@Base+0x428>
   14e0c:	str	r0, [sp, #4]
   14e10:	str	r1, [sp]
   14e14:	ldr	r0, [sp, #4]
   14e18:	ldrsb	r0, [r0]
   14e1c:	cmp	r0, #0
   14e20:	beq	14e58 <test_typed_empty_monster@@Base+0x408>
   14e24:	ldr	r0, [pc, #80]	; 14e7c <test_typed_empty_monster@@Base+0x42c>
   14e28:	ldr	r1, [sp, #4]
   14e2c:	ldrb	r1, [r1]
   14e30:	ldr	r2, [sp]
   14e34:	eor	r1, r2, r1
   14e38:	str	r1, [sp]
   14e3c:	ldr	r1, [sp]
   14e40:	mul	r0, r1, r0
   14e44:	str	r0, [sp]
   14e48:	ldr	r0, [sp, #4]
   14e4c:	add	r0, r0, #1
   14e50:	str	r0, [sp, #4]
   14e54:	b	14e14 <test_typed_empty_monster@@Base+0x3c4>
   14e58:	ldr	r0, [sp]
   14e5c:	cmp	r0, #0
   14e60:	bne	14e6c <test_typed_empty_monster@@Base+0x41c>
   14e64:	ldr	r0, [pc, #12]	; 14e78 <test_typed_empty_monster@@Base+0x428>
   14e68:	str	r0, [sp]
   14e6c:	ldr	r0, [sp]
   14e70:	add	sp, sp, #8
   14e74:	bx	lr
   14e78:	tsthi	ip, r5, asr #27
   14e7c:			; <UNDEFINED> instruction: 0x01000193
   14e80:	push	{fp, lr}
   14e84:	mov	fp, sp
   14e88:	sub	sp, sp, #16
   14e8c:	str	r0, [fp, #-4]
   14e90:	str	r1, [sp, #8]
   14e94:	ldr	r0, [sp, #8]
   14e98:	cmp	r0, #0
   14e9c:	movw	r0, #1
   14ea0:	str	r0, [sp, #4]
   14ea4:	beq	14ec8 <test_typed_empty_monster@@Base+0x478>
   14ea8:	ldr	r0, [fp, #-4]
   14eac:	add	r0, r0, #4
   14eb0:	bl	25850 <main@@Base+0x2898>
   14eb4:	ldr	r1, [sp, #8]
   14eb8:	cmp	r0, r1
   14ebc:	movw	r0, #0
   14ec0:	moveq	r0, #1
   14ec4:	str	r0, [sp, #4]
   14ec8:	ldr	r0, [sp, #4]
   14ecc:	and	r0, r0, #1
   14ed0:	mov	sp, fp
   14ed4:	pop	{fp, pc}
   14ed8:	push	{fp, lr}
   14edc:	mov	fp, sp
   14ee0:	sub	sp, sp, #8
   14ee4:	ldr	r2, [pc, #36]	; 14f10 <test_typed_empty_monster@@Base+0x4c0>
   14ee8:	add	r2, pc, r2
   14eec:	ldr	r3, [pc, #32]	; 14f14 <test_typed_empty_monster@@Base+0x4c4>
   14ef0:	add	r3, pc, r3
   14ef4:	str	r0, [sp, #4]
   14ef8:	str	r1, [sp]
   14efc:	ldr	r0, [sp, #4]
   14f00:	ldr	r1, [sp]
   14f04:	bl	3072c <flatcc_verify_table_as_root@@Base>
   14f08:	mov	sp, fp
   14f0c:	pop	{fp, pc}
   14f10:	andeq	ip, r1, fp, lsr sl
   14f14:	andeq	pc, r0, r4, asr r6	; <UNPREDICTABLE>
   14f18:	push	{fp, lr}
   14f1c:	mov	fp, sp
   14f20:	sub	sp, sp, #16
   14f24:	ldr	r3, [pc, #36]	; 14f50 <test_typed_empty_monster@@Base+0x500>
   14f28:	add	r3, pc, r3
   14f2c:	str	r0, [fp, #-4]
   14f30:	str	r1, [sp, #8]
   14f34:	str	r2, [sp, #4]
   14f38:	ldr	r0, [fp, #-4]
   14f3c:	ldr	r1, [sp, #8]
   14f40:	ldr	r2, [sp, #4]
   14f44:	bl	307e4 <flatcc_verify_table_as_typed_root@@Base>
   14f48:	mov	sp, fp
   14f4c:	pop	{fp, pc}
   14f50:	andeq	pc, r0, ip, lsl r6	; <UNPREDICTABLE>
   14f54:	sub	sp, sp, #8
   14f58:	str	r0, [sp, #4]
   14f5c:	str	r1, [sp]
   14f60:	ldr	r0, [sp, #4]
   14f64:	and	r0, r0, #255	; 0xff
   14f68:	ldr	r1, [sp]
   14f6c:	strb	r0, [r1]
   14f70:	ldr	r0, [sp, #4]
   14f74:	lsr	r0, r0, #8
   14f78:	str	r0, [sp, #4]
   14f7c:	ldr	r0, [sp, #4]
   14f80:	and	r0, r0, #255	; 0xff
   14f84:	ldr	r1, [sp]
   14f88:	strb	r0, [r1, #1]
   14f8c:	ldr	r0, [sp, #4]
   14f90:	lsr	r0, r0, #8
   14f94:	str	r0, [sp, #4]
   14f98:	ldr	r0, [sp, #4]
   14f9c:	and	r0, r0, #255	; 0xff
   14fa0:	ldr	r1, [sp]
   14fa4:	strb	r0, [r1, #2]
   14fa8:	ldr	r0, [sp, #4]
   14fac:	lsr	r0, r0, #8
   14fb0:	str	r0, [sp, #4]
   14fb4:	ldr	r0, [sp, #4]
   14fb8:	and	r0, r0, #255	; 0xff
   14fbc:	ldr	r1, [sp]
   14fc0:	strb	r0, [r1, #3]
   14fc4:	add	sp, sp, #8
   14fc8:	bx	lr

00014fcc <verify_table_with_emptystruct@@Base>:
   14fcc:	push	{fp, lr}
   14fd0:	mov	fp, sp
   14fd4:	sub	sp, sp, #16
   14fd8:	str	r0, [sp, #8]
   14fdc:	ldr	r0, [sp, #8]
   14fe0:	bl	15088 <verify_table_with_emptystruct@@Base+0xbc>
   14fe4:	str	r0, [sp, #4]
   14fe8:	ldr	r0, [sp, #4]
   14fec:	movw	r1, #0
   14ff0:	cmp	r0, r1
   14ff4:	bne	15010 <verify_table_with_emptystruct@@Base+0x44>
   14ff8:	ldr	r0, [pc, #124]	; 1507c <verify_table_with_emptystruct@@Base+0xb0>
   14ffc:	add	r0, pc, r0
   15000:	bl	12d9c <printf@plt>
   15004:	mvn	r1, #0
   15008:	str	r1, [fp, #-4]
   1500c:	b	15070 <verify_table_with_emptystruct@@Base+0xa4>
   15010:	ldr	r0, [sp, #4]
   15014:	bl	15104 <verify_table_with_emptystruct@@Base+0x138>
   15018:	str	r0, [sp]
   1501c:	ldr	r0, [sp]
   15020:	movw	r1, #0
   15024:	cmp	r0, r1
   15028:	bne	15044 <verify_table_with_emptystruct@@Base+0x78>
   1502c:	ldr	r0, [pc, #76]	; 15080 <verify_table_with_emptystruct@@Base+0xb4>
   15030:	add	r0, pc, r0
   15034:	bl	12d9c <printf@plt>
   15038:	mvn	r1, #0
   1503c:	str	r1, [fp, #-4]
   15040:	b	15070 <verify_table_with_emptystruct@@Base+0xa4>
   15044:	bl	25888 <main@@Base+0x28d0>
   15048:	cmp	r0, #0
   1504c:	beq	15068 <verify_table_with_emptystruct@@Base+0x9c>
   15050:	ldr	r0, [pc, #44]	; 15084 <verify_table_with_emptystruct@@Base+0xb8>
   15054:	add	r0, pc, r0
   15058:	bl	12d9c <printf@plt>
   1505c:	mvn	r1, #0
   15060:	str	r1, [fp, #-4]
   15064:	b	15070 <verify_table_with_emptystruct@@Base+0xa4>
   15068:	movw	r0, #0
   1506c:	str	r0, [fp, #-4]
   15070:	ldr	r0, [fp, #-4]
   15074:	mov	sp, fp
   15078:	pop	{fp, pc}
   1507c:	andeq	ip, r1, r6, ror #21
   15080:	ldrdeq	ip, [r1], -r8
   15084:	ldrdeq	ip, [r1], -r0
   15088:	push	{fp, lr}
   1508c:	mov	fp, sp
   15090:	sub	sp, sp, #16
   15094:	ldr	r1, [pc, #100]	; 15100 <verify_table_with_emptystruct@@Base+0x134>
   15098:	add	r1, pc, r1
   1509c:	str	r0, [fp, #-4]
   150a0:	str	r1, [sp, #8]
   150a4:	ldr	r0, [fp, #-4]
   150a8:	movw	r1, #0
   150ac:	cmp	r0, r1
   150b0:	beq	150c8 <verify_table_with_emptystruct@@Base+0xfc>
   150b4:	ldr	r0, [fp, #-4]
   150b8:	ldr	r1, [sp, #8]
   150bc:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   150c0:	cmp	r0, #0
   150c4:	bne	150d4 <verify_table_with_emptystruct@@Base+0x108>
   150c8:	movw	r0, #0
   150cc:	str	r0, [sp, #4]
   150d0:	b	150f4 <verify_table_with_emptystruct@@Base+0x128>
   150d4:	ldr	r0, [fp, #-4]
   150d8:	ldr	r1, [fp, #-4]
   150dc:	str	r0, [sp]
   150e0:	mov	r0, r1
   150e4:	bl	23414 <main@@Base+0x45c>
   150e8:	ldr	r1, [sp]
   150ec:	add	r0, r1, r0
   150f0:	str	r0, [sp, #4]
   150f4:	ldr	r0, [sp, #4]
   150f8:	mov	sp, fp
   150fc:	pop	{fp, pc}
   15100:	andeq	ip, r1, r0, asr #12
   15104:	push	{fp, lr}
   15108:	mov	fp, sp
   1510c:	sub	sp, sp, #24
   15110:	str	r0, [fp, #-8]
   15114:	movw	r0, #0
   15118:	strh	r0, [fp, #-10]
   1511c:	ldr	r0, [fp, #-8]
   15120:	movw	r1, #0
   15124:	cmp	r0, r1
   15128:	beq	15134 <verify_table_with_emptystruct@@Base+0x168>
   1512c:	b	15130 <verify_table_with_emptystruct@@Base+0x164>
   15130:	b	15154 <verify_table_with_emptystruct@@Base+0x188>
   15134:	ldr	r0, [pc, #160]	; 151dc <verify_table_with_emptystruct@@Base+0x210>
   15138:	add	r0, pc, r0
   1513c:	ldr	r1, [pc, #156]	; 151e0 <verify_table_with_emptystruct@@Base+0x214>
   15140:	add	r1, pc, r1
   15144:	ldr	r2, [pc, #152]	; 151e4 <verify_table_with_emptystruct@@Base+0x218>
   15148:	add	r3, pc, r2
   1514c:	movw	r2, #569	; 0x239
   15150:	bl	12e68 <__assert_fail@plt>
   15154:	mov	r0, #0
   15158:	strh	r0, [sp, #12]
   1515c:	ldr	r0, [fp, #-8]
   15160:	str	r0, [sp, #4]
   15164:	bl	2344c <main@@Base+0x494>
   15168:	ldr	r1, [sp, #4]
   1516c:	sub	r0, r1, r0
   15170:	str	r0, [sp, #8]
   15174:	ldr	r0, [sp, #8]
   15178:	bl	23470 <main@@Base+0x4b8>
   1517c:	ldrh	r1, [sp, #12]
   15180:	add	r1, r1, #3
   15184:	lsl	r1, r1, #1
   15188:	cmp	r0, r1
   1518c:	bcc	151a8 <verify_table_with_emptystruct@@Base+0x1dc>
   15190:	ldr	r0, [sp, #8]
   15194:	ldrh	r1, [sp, #12]
   15198:	add	r0, r0, r1, lsl #1
   1519c:	add	r0, r0, #4
   151a0:	bl	23470 <main@@Base+0x4b8>
   151a4:	strh	r0, [fp, #-10]
   151a8:	ldrsh	r0, [fp, #-10]
   151ac:	cmp	r0, #0
   151b0:	beq	151c8 <verify_table_with_emptystruct@@Base+0x1fc>
   151b4:	ldr	r0, [fp, #-8]
   151b8:	ldrh	r1, [fp, #-10]
   151bc:	add	r0, r0, r1
   151c0:	str	r0, [fp, #-4]
   151c4:	b	151d0 <verify_table_with_emptystruct@@Base+0x204>
   151c8:	movw	r0, #0
   151cc:	str	r0, [fp, #-4]
   151d0:	ldr	r0, [fp, #-4]
   151d4:	mov	sp, fp
   151d8:	pop	{fp, pc}
   151dc:			; <UNDEFINED> instruction: 0x0001eeb5
   151e0:	ldrdeq	lr, [r1], -r3
   151e4:	andeq	pc, r1, sp, ror #11

000151e8 <test_table_with_emptystruct@@Base>:
   151e8:	push	{fp, lr}
   151ec:	mov	fp, sp
   151f0:	sub	sp, sp, #40	; 0x28
   151f4:	str	r0, [fp, #-4]
   151f8:	movw	r0, #0
   151fc:	str	r0, [fp, #-12]
   15200:	ldr	r0, [fp, #-4]
   15204:	bl	286d4 <flatcc_builder_reset@@Base>
   15208:	ldr	r1, [fp, #-4]
   1520c:	ldr	r2, [fp, #-12]
   15210:	str	r0, [sp, #16]
   15214:	mov	r0, r1
   15218:	mov	r1, r2
   1521c:	bl	15298 <test_table_with_emptystruct@@Base+0xb0>
   15220:	ldr	r1, [fp, #-4]
   15224:	str	r0, [sp, #12]
   15228:	mov	r0, r1
   1522c:	add	r1, sp, #20
   15230:	bl	2db44 <flatcc_builder_finalize_aligned_buffer@@Base>
   15234:	ldr	r1, [pc, #84]	; 15290 <test_table_with_emptystruct@@Base+0xa8>
   15238:	add	r1, pc, r1
   1523c:	ldr	r2, [pc, #80]	; 15294 <test_table_with_emptystruct@@Base+0xac>
   15240:	ldr	r2, [pc, r2]
   15244:	str	r0, [fp, #-16]
   15248:	ldr	r0, [fp, #-16]
   1524c:	ldr	r3, [sp, #20]
   15250:	ldr	r2, [r2]
   15254:	str	r0, [sp, #8]
   15258:	mov	r0, r1
   1525c:	ldr	r1, [sp, #8]
   15260:	str	r2, [sp, #4]
   15264:	mov	r2, r3
   15268:	ldr	r3, [sp, #4]
   1526c:	bl	13ae8 <test_type_aliases@@Base+0x4f0>
   15270:	ldr	r0, [fp, #-16]
   15274:	bl	14fcc <verify_table_with_emptystruct@@Base>
   15278:	str	r0, [fp, #-8]
   1527c:	ldr	r0, [fp, #-16]
   15280:	bl	2dcec <flatcc_builder_aligned_free@@Base>
   15284:	ldr	r0, [fp, #-8]
   15288:	mov	sp, fp
   1528c:	pop	{fp, pc}
   15290:	andeq	ip, r1, ip, lsl #18
   15294:	andeq	r2, r3, r4, lsl lr
   15298:	push	{fp, lr}
   1529c:	mov	fp, sp
   152a0:	sub	sp, sp, #24
   152a4:	ldr	r2, [pc, #104]	; 15314 <test_table_with_emptystruct@@Base+0x12c>
   152a8:	add	r2, pc, r2
   152ac:	str	r0, [fp, #-8]
   152b0:	str	r1, [sp, #12]
   152b4:	ldr	r0, [fp, #-8]
   152b8:	mov	r1, r2
   152bc:	bl	14898 <test_empty_monster@@Base+0x19c>
   152c0:	cmp	r0, #0
   152c4:	beq	152d4 <test_table_with_emptystruct@@Base+0xec>
   152c8:	movw	r0, #0
   152cc:	str	r0, [fp, #-4]
   152d0:	b	15308 <test_table_with_emptystruct@@Base+0x120>
   152d4:	ldr	r0, [fp, #-8]
   152d8:	ldr	r1, [fp, #-8]
   152dc:	ldr	r2, [sp, #12]
   152e0:	str	r0, [sp, #8]
   152e4:	mov	r0, r1
   152e8:	mov	r1, r2
   152ec:	bl	25890 <main@@Base+0x28d8>
   152f0:	ldr	r1, [sp, #8]
   152f4:	str	r0, [sp, #4]
   152f8:	mov	r0, r1
   152fc:	ldr	r1, [sp, #4]
   15300:	bl	149ac <test_empty_monster@@Base+0x2b0>
   15304:	str	r0, [fp, #-4]
   15308:	ldr	r0, [fp, #-4]
   1530c:	mov	sp, fp
   15310:	pop	{fp, pc}
   15314:	andeq	ip, r1, r0, lsr r4

00015318 <test_typed_table_with_emptystruct@@Base>:
   15318:	push	{fp, lr}
   1531c:	mov	fp, sp
   15320:	sub	sp, sp, #40	; 0x28
   15324:	str	r0, [fp, #-8]
   15328:	movw	r0, #0
   1532c:	str	r0, [fp, #-12]
   15330:	str	r0, [fp, #-16]
   15334:	ldr	r0, [fp, #-8]
   15338:	bl	286d4 <flatcc_builder_reset@@Base>
   1533c:	ldr	r1, [fp, #-8]
   15340:	ldr	r2, [fp, #-16]
   15344:	str	r0, [sp, #12]
   15348:	mov	r0, r1
   1534c:	mov	r1, r2
   15350:	bl	15698 <test_typed_table_with_emptystruct@@Base+0x380>
   15354:	ldr	r1, [fp, #-8]
   15358:	str	r0, [sp, #8]
   1535c:	mov	r0, r1
   15360:	add	r1, sp, #16
   15364:	bl	2d8a8 <flatcc_builder_get_direct_buffer@@Base>
   15368:	ldr	r1, [pc, #732]	; 1564c <test_typed_table_with_emptystruct@@Base+0x334>
   1536c:	add	r1, pc, r1
   15370:	ldr	r2, [pc, #728]	; 15650 <test_typed_table_with_emptystruct@@Base+0x338>
   15374:	ldr	r2, [pc, r2]
   15378:	str	r0, [sp, #20]
   1537c:	ldr	r0, [sp, #20]
   15380:	ldr	r3, [sp, #16]
   15384:	ldr	r2, [r2]
   15388:	str	r0, [sp, #4]
   1538c:	mov	r0, r1
   15390:	ldr	r1, [sp, #4]
   15394:	str	r2, [sp]
   15398:	mov	r2, r3
   1539c:	ldr	r3, [sp]
   153a0:	bl	13ae8 <test_type_aliases@@Base+0x4f0>
   153a4:	ldr	r0, [pc, #668]	; 15648 <test_typed_table_with_emptystruct@@Base+0x330>
   153a8:	add	r2, pc, r0
   153ac:	ldr	r0, [sp, #20]
   153b0:	ldr	r1, [sp, #16]
   153b4:	bl	15718 <test_typed_table_with_emptystruct@@Base+0x400>
   153b8:	movw	r1, #0
   153bc:	cmp	r1, r0
   153c0:	beq	153dc <test_typed_table_with_emptystruct@@Base+0xc4>
   153c4:	ldr	r0, [pc, #712]	; 15694 <test_typed_table_with_emptystruct@@Base+0x37c>
   153c8:	add	r0, pc, r0
   153cc:	bl	12d9c <printf@plt>
   153d0:	mvn	r1, #0
   153d4:	str	r1, [fp, #-4]
   153d8:	b	1563c <test_typed_table_with_emptystruct@@Base+0x324>
   153dc:	ldr	r0, [sp, #20]
   153e0:	ldr	r1, [sp, #16]
   153e4:	bl	15754 <test_typed_table_with_emptystruct@@Base+0x43c>
   153e8:	movw	r1, #0
   153ec:	cmp	r1, r0
   153f0:	beq	1540c <test_typed_table_with_emptystruct@@Base+0xf4>
   153f4:	ldr	r0, [pc, #660]	; 15690 <test_typed_table_with_emptystruct@@Base+0x378>
   153f8:	add	r0, pc, r0
   153fc:	bl	12d9c <printf@plt>
   15400:	mvn	r1, #0
   15404:	str	r1, [fp, #-4]
   15408:	b	1563c <test_typed_table_with_emptystruct@@Base+0x324>
   1540c:	ldr	r2, [pc, #576]	; 15654 <test_typed_table_with_emptystruct@@Base+0x33c>
   15410:	ldr	r0, [sp, #20]
   15414:	ldr	r1, [sp, #16]
   15418:	bl	15794 <test_typed_table_with_emptystruct@@Base+0x47c>
   1541c:	movw	r1, #0
   15420:	cmp	r1, r0
   15424:	beq	15440 <test_typed_table_with_emptystruct@@Base+0x128>
   15428:	ldr	r0, [pc, #604]	; 1568c <test_typed_table_with_emptystruct@@Base+0x374>
   1542c:	add	r0, pc, r0
   15430:	bl	12d9c <printf@plt>
   15434:	mvn	r1, #0
   15438:	str	r1, [fp, #-4]
   1543c:	b	1563c <test_typed_table_with_emptystruct@@Base+0x324>
   15440:	ldr	r0, [sp, #20]
   15444:	movw	r1, #0
   15448:	cmp	r0, r1
   1544c:	bne	15468 <test_typed_table_with_emptystruct@@Base+0x150>
   15450:	ldr	r0, [pc, #512]	; 15658 <test_typed_table_with_emptystruct@@Base+0x340>
   15454:	add	r0, pc, r0
   15458:	bl	12d9c <printf@plt>
   1545c:	mvn	r1, #0
   15460:	str	r1, [fp, #-4]
   15464:	b	1563c <test_typed_table_with_emptystruct@@Base+0x324>
   15468:	ldr	r1, [pc, #484]	; 15654 <test_typed_table_with_emptystruct@@Base+0x33c>
   1546c:	ldr	r0, [sp, #20]
   15470:	bl	14e80 <test_typed_empty_monster@@Base+0x430>
   15474:	cmp	r0, #0
   15478:	bne	15494 <test_typed_table_with_emptystruct@@Base+0x17c>
   1547c:	ldr	r0, [pc, #472]	; 1565c <test_typed_table_with_emptystruct@@Base+0x344>
   15480:	add	r0, pc, r0
   15484:	bl	12d9c <printf@plt>
   15488:	mvn	r1, #0
   1548c:	str	r1, [fp, #-4]
   15490:	b	1563c <test_typed_table_with_emptystruct@@Base+0x324>
   15494:	ldr	r0, [sp, #20]
   15498:	movw	r1, #0
   1549c:	bl	14e80 <test_typed_empty_monster@@Base+0x430>
   154a0:	cmp	r0, #0
   154a4:	bne	154c0 <test_typed_table_with_emptystruct@@Base+0x1a8>
   154a8:	ldr	r0, [pc, #432]	; 15660 <test_typed_table_with_emptystruct@@Base+0x348>
   154ac:	add	r0, pc, r0
   154b0:	bl	12d9c <printf@plt>
   154b4:	mvn	r1, #0
   154b8:	str	r1, [fp, #-4]
   154bc:	b	1563c <test_typed_table_with_emptystruct@@Base+0x324>
   154c0:	ldr	r0, [sp, #20]
   154c4:	movw	r1, #1
   154c8:	bl	14e80 <test_typed_empty_monster@@Base+0x430>
   154cc:	cmp	r0, #0
   154d0:	beq	154ec <test_typed_table_with_emptystruct@@Base+0x1d4>
   154d4:	ldr	r0, [pc, #428]	; 15688 <test_typed_table_with_emptystruct@@Base+0x370>
   154d8:	add	r0, pc, r0
   154dc:	bl	12d9c <printf@plt>
   154e0:	mvn	r1, #0
   154e4:	str	r1, [fp, #-4]
   154e8:	b	1563c <test_typed_table_with_emptystruct@@Base+0x324>
   154ec:	ldr	r0, [sp, #20]
   154f0:	movw	r1, #0
   154f4:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   154f8:	cmp	r0, #0
   154fc:	bne	15518 <test_typed_table_with_emptystruct@@Base+0x200>
   15500:	ldr	r0, [pc, #348]	; 15664 <test_typed_table_with_emptystruct@@Base+0x34c>
   15504:	add	r0, pc, r0
   15508:	bl	12d9c <printf@plt>
   1550c:	mvn	r1, #0
   15510:	str	r1, [fp, #-4]
   15514:	b	1563c <test_typed_table_with_emptystruct@@Base+0x324>
   15518:	ldr	r0, [pc, #328]	; 15668 <test_typed_table_with_emptystruct@@Base+0x350>
   1551c:	add	r1, pc, r0
   15520:	ldr	r0, [sp, #20]
   15524:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   15528:	cmp	r0, #0
   1552c:	bne	15548 <test_typed_table_with_emptystruct@@Base+0x230>
   15530:	ldr	r0, [pc, #308]	; 1566c <test_typed_table_with_emptystruct@@Base+0x354>
   15534:	add	r0, pc, r0
   15538:	bl	12d9c <printf@plt>
   1553c:	mvn	r1, #0
   15540:	str	r1, [fp, #-4]
   15544:	b	1563c <test_typed_table_with_emptystruct@@Base+0x324>
   15548:	ldr	r0, [sp, #20]
   1554c:	bl	15088 <verify_table_with_emptystruct@@Base+0xbc>
   15550:	movw	r1, #0
   15554:	cmp	r0, r1
   15558:	beq	15574 <test_typed_table_with_emptystruct@@Base+0x25c>
   1555c:	ldr	r0, [pc, #288]	; 15684 <test_typed_table_with_emptystruct@@Base+0x36c>
   15560:	add	r0, pc, r0
   15564:	bl	12d9c <printf@plt>
   15568:	mvn	r1, #0
   1556c:	str	r1, [fp, #-4]
   15570:	b	1563c <test_typed_table_with_emptystruct@@Base+0x324>
   15574:	ldr	r0, [sp, #20]
   15578:	movw	r1, #1
   1557c:	bl	1587c <test_typed_table_with_emptystruct@@Base+0x564>
   15580:	movw	r1, #0
   15584:	cmp	r0, r1
   15588:	beq	155a4 <test_typed_table_with_emptystruct@@Base+0x28c>
   1558c:	ldr	r0, [pc, #236]	; 15680 <test_typed_table_with_emptystruct@@Base+0x368>
   15590:	add	r0, pc, r0
   15594:	bl	12d9c <printf@plt>
   15598:	mvn	r1, #0
   1559c:	str	r1, [fp, #-4]
   155a0:	b	1563c <test_typed_table_with_emptystruct@@Base+0x324>
   155a4:	ldr	r0, [pc, #196]	; 15670 <test_typed_table_with_emptystruct@@Base+0x358>
   155a8:	add	r1, pc, r0
   155ac:	ldr	r0, [sp, #20]
   155b0:	bl	158ec <test_typed_table_with_emptystruct@@Base+0x5d4>
   155b4:	movw	r1, #0
   155b8:	cmp	r0, r1
   155bc:	bne	155d8 <test_typed_table_with_emptystruct@@Base+0x2c0>
   155c0:	ldr	r0, [pc, #172]	; 15674 <test_typed_table_with_emptystruct@@Base+0x35c>
   155c4:	add	r0, pc, r0
   155c8:	bl	12d9c <printf@plt>
   155cc:	mvn	r1, #0
   155d0:	str	r1, [fp, #-4]
   155d4:	b	1563c <test_typed_table_with_emptystruct@@Base+0x324>
   155d8:	ldr	r0, [sp, #20]
   155dc:	bl	1595c <test_typed_table_with_emptystruct@@Base+0x644>
   155e0:	movw	r1, #0
   155e4:	cmp	r0, r1
   155e8:	bne	15604 <test_typed_table_with_emptystruct@@Base+0x2ec>
   155ec:	ldr	r0, [pc, #132]	; 15678 <test_typed_table_with_emptystruct@@Base+0x360>
   155f0:	add	r0, pc, r0
   155f4:	bl	12d9c <printf@plt>
   155f8:	mvn	r1, #0
   155fc:	str	r1, [fp, #-4]
   15600:	b	1563c <test_typed_table_with_emptystruct@@Base+0x324>
   15604:	ldr	r0, [sp, #20]
   15608:	movw	r1, #0
   1560c:	bl	1587c <test_typed_table_with_emptystruct@@Base+0x564>
   15610:	movw	r1, #0
   15614:	cmp	r0, r1
   15618:	bne	15634 <test_typed_table_with_emptystruct@@Base+0x31c>
   1561c:	ldr	r0, [pc, #88]	; 1567c <test_typed_table_with_emptystruct@@Base+0x364>
   15620:	add	r0, pc, r0
   15624:	bl	12d9c <printf@plt>
   15628:	mvn	r1, #0
   1562c:	str	r1, [fp, #-4]
   15630:	b	1563c <test_typed_table_with_emptystruct@@Base+0x324>
   15634:	ldr	r0, [fp, #-12]
   15638:	str	r0, [fp, #-4]
   1563c:	ldr	r0, [fp, #-4]
   15640:	mov	sp, fp
   15644:	pop	{fp, pc}
   15648:			; <UNDEFINED> instruction: 0x0001c7b4
   1564c:	ldrdeq	ip, [r1], -r2
   15650:	andeq	r2, r3, r0, ror #25
   15654:	ldrhlt	r3, [sp], #118	; 0x76
   15658:	andeq	ip, r1, r0, ror r7
   1565c:	andeq	ip, r1, sp, asr r7
   15660:	andeq	ip, r1, r2, asr #14
   15664:	andeq	ip, r1, r0, lsr #14
   15668:	andeq	ip, r1, r0, asr #12
   1566c:	andeq	ip, r1, r3, lsl r7
   15670:			; <UNDEFINED> instruction: 0x0001c5b4
   15674:	strdeq	ip, [r1], -r3
   15678:	andeq	ip, r1, r0, lsl #14
   1567c:	andeq	ip, r1, r6, ror #13
   15680:	andeq	ip, r1, r1, lsl #14
   15684:	andeq	ip, r1, r2, lsl r7
   15688:	andeq	ip, r1, r8, lsr #14
   1568c:	andeq	ip, r1, r2, ror r7
   15690:	andeq	ip, r1, r9, lsl #15
   15694:	muleq	r1, r9, r7
   15698:	push	{fp, lr}
   1569c:	mov	fp, sp
   156a0:	sub	sp, sp, #24
   156a4:	ldr	r2, [pc, #104]	; 15714 <test_typed_table_with_emptystruct@@Base+0x3fc>
   156a8:	add	r2, pc, r2
   156ac:	str	r0, [fp, #-8]
   156b0:	str	r1, [sp, #12]
   156b4:	ldr	r0, [fp, #-8]
   156b8:	mov	r1, r2
   156bc:	bl	14898 <test_empty_monster@@Base+0x19c>
   156c0:	cmp	r0, #0
   156c4:	beq	156d4 <test_typed_table_with_emptystruct@@Base+0x3bc>
   156c8:	movw	r0, #0
   156cc:	str	r0, [fp, #-4]
   156d0:	b	15708 <test_typed_table_with_emptystruct@@Base+0x3f0>
   156d4:	ldr	r0, [fp, #-8]
   156d8:	ldr	r1, [fp, #-8]
   156dc:	ldr	r2, [sp, #12]
   156e0:	str	r0, [sp, #8]
   156e4:	mov	r0, r1
   156e8:	mov	r1, r2
   156ec:	bl	25890 <main@@Base+0x28d8>
   156f0:	ldr	r1, [sp, #8]
   156f4:	str	r0, [sp, #4]
   156f8:	mov	r0, r1
   156fc:	ldr	r1, [sp, #4]
   15700:	bl	149ac <test_empty_monster@@Base+0x2b0>
   15704:	str	r0, [fp, #-4]
   15708:	ldr	r0, [fp, #-4]
   1570c:	mov	sp, fp
   15710:	pop	{fp, pc}
   15714:			; <UNDEFINED> instruction: 0x0001c4b4
   15718:	push	{fp, lr}
   1571c:	mov	fp, sp
   15720:	sub	sp, sp, #16
   15724:	ldr	r3, [pc, #36]	; 15750 <test_typed_table_with_emptystruct@@Base+0x438>
   15728:	add	r3, pc, r3
   1572c:	str	r0, [fp, #-4]
   15730:	str	r1, [sp, #8]
   15734:	str	r2, [sp, #4]
   15738:	ldr	r0, [fp, #-4]
   1573c:	ldr	r1, [sp, #8]
   15740:	ldr	r2, [sp, #4]
   15744:	bl	3072c <flatcc_verify_table_as_root@@Base>
   15748:	mov	sp, fp
   1574c:	pop	{fp, pc}
   15750:	strdeq	r0, [r1], -r8
   15754:	push	{fp, lr}
   15758:	mov	fp, sp
   1575c:	sub	sp, sp, #8
   15760:	ldr	r2, [pc, #36]	; 1578c <test_typed_table_with_emptystruct@@Base+0x474>
   15764:	add	r2, pc, r2
   15768:	ldr	r3, [pc, #32]	; 15790 <test_typed_table_with_emptystruct@@Base+0x478>
   1576c:	add	r3, pc, r3
   15770:	str	r0, [sp, #4]
   15774:	str	r1, [sp]
   15778:	ldr	r0, [sp, #4]
   1577c:	ldr	r1, [sp]
   15780:	bl	3072c <flatcc_verify_table_as_root@@Base>
   15784:	mov	sp, fp
   15788:	pop	{fp, pc}
   1578c:	strdeq	ip, [r1], -r8
   15790:			; <UNDEFINED> instruction: 0x000102b4
   15794:	push	{fp, lr}
   15798:	mov	fp, sp
   1579c:	sub	sp, sp, #16
   157a0:	ldr	r3, [pc, #36]	; 157cc <test_typed_table_with_emptystruct@@Base+0x4b4>
   157a4:	add	r3, pc, r3
   157a8:	str	r0, [fp, #-4]
   157ac:	str	r1, [sp, #8]
   157b0:	str	r2, [sp, #4]
   157b4:	ldr	r0, [fp, #-4]
   157b8:	ldr	r1, [sp, #8]
   157bc:	ldr	r2, [sp, #4]
   157c0:	bl	307e4 <flatcc_verify_table_as_typed_root@@Base>
   157c4:	mov	sp, fp
   157c8:	pop	{fp, pc}
   157cc:	andeq	r0, r1, ip, ror r2
   157d0:	push	{fp, lr}
   157d4:	mov	fp, sp
   157d8:	sub	sp, sp, #32
   157dc:	str	r0, [fp, #-8]
   157e0:	str	r1, [fp, #-12]
   157e4:	movw	r0, #0
   157e8:	str	r0, [sp, #12]
   157ec:	ldr	r1, [fp, #-12]
   157f0:	cmp	r1, r0
   157f4:	bne	15804 <test_typed_table_with_emptystruct@@Base+0x4ec>
   157f8:	movw	r0, #1
   157fc:	str	r0, [fp, #-4]
   15800:	b	15870 <test_typed_table_with_emptystruct@@Base+0x558>
   15804:	add	r0, sp, #12
   15808:	ldr	r1, [fp, #-12]
   1580c:	movw	r2, #4
   15810:	bl	12e38 <strncpy@plt>
   15814:	ldr	r1, [sp, #12]
   15818:	str	r0, [sp, #8]
   1581c:	mov	r0, r1
   15820:	bl	25a80 <main@@Base+0x2ac8>
   15824:	str	r0, [sp, #12]
   15828:	ldr	r0, [fp, #-8]
   1582c:	add	r0, r0, #4
   15830:	bl	25850 <main@@Base+0x2898>
   15834:	str	r0, [sp, #16]
   15838:	ldr	r0, [sp, #12]
   1583c:	cmp	r0, #0
   15840:	movw	r0, #1
   15844:	str	r0, [sp, #4]
   15848:	beq	15864 <test_typed_table_with_emptystruct@@Base+0x54c>
   1584c:	ldr	r0, [sp, #16]
   15850:	ldr	r1, [sp, #12]
   15854:	cmp	r0, r1
   15858:	movw	r0, #0
   1585c:	moveq	r0, #1
   15860:	str	r0, [sp, #4]
   15864:	ldr	r0, [sp, #4]
   15868:	and	r0, r0, #1
   1586c:	str	r0, [fp, #-4]
   15870:	ldr	r0, [fp, #-4]
   15874:	mov	sp, fp
   15878:	pop	{fp, pc}
   1587c:	push	{fp, lr}
   15880:	mov	fp, sp
   15884:	sub	sp, sp, #16
   15888:	str	r0, [fp, #-4]
   1588c:	str	r1, [sp, #8]
   15890:	ldr	r0, [fp, #-4]
   15894:	movw	r1, #0
   15898:	cmp	r0, r1
   1589c:	beq	158b4 <test_typed_table_with_emptystruct@@Base+0x59c>
   158a0:	ldr	r0, [fp, #-4]
   158a4:	ldr	r1, [sp, #8]
   158a8:	bl	14e80 <test_typed_empty_monster@@Base+0x430>
   158ac:	cmp	r0, #0
   158b0:	bne	158c0 <test_typed_table_with_emptystruct@@Base+0x5a8>
   158b4:	movw	r0, #0
   158b8:	str	r0, [sp, #4]
   158bc:	b	158e0 <test_typed_table_with_emptystruct@@Base+0x5c8>
   158c0:	ldr	r0, [fp, #-4]
   158c4:	ldr	r1, [fp, #-4]
   158c8:	str	r0, [sp]
   158cc:	mov	r0, r1
   158d0:	bl	23414 <main@@Base+0x45c>
   158d4:	ldr	r1, [sp]
   158d8:	add	r0, r1, r0
   158dc:	str	r0, [sp, #4]
   158e0:	ldr	r0, [sp, #4]
   158e4:	mov	sp, fp
   158e8:	pop	{fp, pc}
   158ec:	push	{fp, lr}
   158f0:	mov	fp, sp
   158f4:	sub	sp, sp, #16
   158f8:	str	r0, [fp, #-4]
   158fc:	str	r1, [sp, #8]
   15900:	ldr	r0, [fp, #-4]
   15904:	movw	r1, #0
   15908:	cmp	r0, r1
   1590c:	beq	15924 <test_typed_table_with_emptystruct@@Base+0x60c>
   15910:	ldr	r0, [fp, #-4]
   15914:	ldr	r1, [sp, #8]
   15918:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   1591c:	cmp	r0, #0
   15920:	bne	15930 <test_typed_table_with_emptystruct@@Base+0x618>
   15924:	movw	r0, #0
   15928:	str	r0, [sp, #4]
   1592c:	b	15950 <test_typed_table_with_emptystruct@@Base+0x638>
   15930:	ldr	r0, [fp, #-4]
   15934:	ldr	r1, [fp, #-4]
   15938:	str	r0, [sp]
   1593c:	mov	r0, r1
   15940:	bl	23414 <main@@Base+0x45c>
   15944:	ldr	r1, [sp]
   15948:	add	r0, r1, r0
   1594c:	str	r0, [sp, #4]
   15950:	ldr	r0, [sp, #4]
   15954:	mov	sp, fp
   15958:	pop	{fp, pc}
   1595c:	push	{fp, lr}
   15960:	mov	fp, sp
   15964:	sub	sp, sp, #16
   15968:	str	r0, [fp, #-4]
   1596c:	ldr	r0, [fp, #-4]
   15970:	movw	r1, #0
   15974:	cmp	r0, r1
   15978:	beq	15990 <test_typed_table_with_emptystruct@@Base+0x678>
   1597c:	ldr	r1, [pc, #68]	; 159c8 <test_typed_table_with_emptystruct@@Base+0x6b0>
   15980:	ldr	r0, [fp, #-4]
   15984:	bl	14e80 <test_typed_empty_monster@@Base+0x430>
   15988:	cmp	r0, #0
   1598c:	bne	1599c <test_typed_table_with_emptystruct@@Base+0x684>
   15990:	movw	r0, #0
   15994:	str	r0, [sp, #8]
   15998:	b	159bc <test_typed_table_with_emptystruct@@Base+0x6a4>
   1599c:	ldr	r0, [fp, #-4]
   159a0:	ldr	r1, [fp, #-4]
   159a4:	str	r0, [sp, #4]
   159a8:	mov	r0, r1
   159ac:	bl	23414 <main@@Base+0x45c>
   159b0:	ldr	r1, [sp, #4]
   159b4:	add	r0, r1, r0
   159b8:	str	r0, [sp, #8]
   159bc:	ldr	r0, [sp, #8]
   159c0:	mov	sp, fp
   159c4:	pop	{fp, pc}
   159c8:	ldrhlt	r3, [sp], #118	; 0x76

000159cc <verify_monster@@Base>:
   159cc:	push	{fp, lr}
   159d0:	mov	fp, sp
   159d4:	sub	sp, sp, #200	; 0xc8
   159d8:	bfc	sp, #0, #4
   159dc:	ldr	r1, [pc, #3896]	; 1691c <verify_monster@@Base+0xf50>
   159e0:	add	r1, pc, r1
   159e4:	ldr	r2, [pc, #3892]	; 16920 <verify_monster@@Base+0xf54>
   159e8:	add	r2, pc, r2
   159ec:	str	r0, [sp, #192]	; 0xc0
   159f0:	add	r0, sp, #88	; 0x58
   159f4:	str	r1, [sp, #32]
   159f8:	mov	r1, r2
   159fc:	movw	r2, #20
   15a00:	bl	12db4 <memcpy@plt>
   15a04:	ldr	r0, [sp, #32]
   15a08:	ldr	r1, [r0]
   15a0c:	str	r1, [sp, #52]	; 0x34
   15a10:	ldr	r1, [r0, #4]
   15a14:	str	r1, [sp, #56]	; 0x38
   15a18:	ldr	r1, [r0, #8]
   15a1c:	str	r1, [sp, #60]	; 0x3c
   15a20:	ldr	r1, [r0, #12]
   15a24:	str	r1, [sp, #64]	; 0x40
   15a28:	ldr	r0, [sp, #192]	; 0xc0
   15a2c:	movw	r1, #0
   15a30:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   15a34:	cmp	r0, #0
   15a38:	bne	15a54 <verify_monster@@Base+0x88>
   15a3c:	ldr	r0, [pc, #3808]	; 16924 <verify_monster@@Base+0xf58>
   15a40:	add	r0, pc, r0
   15a44:	bl	12d9c <printf@plt>
   15a48:	mvn	r1, #0
   15a4c:	str	r1, [sp, #196]	; 0xc4
   15a50:	b	16910 <verify_monster@@Base+0xf44>
   15a54:	ldr	r0, [pc, #3788]	; 16928 <verify_monster@@Base+0xf5c>
   15a58:	add	r1, pc, r0
   15a5c:	ldr	r0, [sp, #192]	; 0xc0
   15a60:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   15a64:	cmp	r0, #0
   15a68:	bne	15a84 <verify_monster@@Base+0xb8>
   15a6c:	ldr	r0, [pc, #3768]	; 1692c <verify_monster@@Base+0xf60>
   15a70:	add	r0, pc, r0
   15a74:	bl	12d9c <printf@plt>
   15a78:	mvn	r1, #0
   15a7c:	str	r1, [sp, #196]	; 0xc4
   15a80:	b	16910 <verify_monster@@Base+0xf44>
   15a84:	ldr	r0, [pc, #3748]	; 16930 <verify_monster@@Base+0xf64>
   15a88:	add	r1, pc, r0
   15a8c:	ldr	r0, [sp, #192]	; 0xc0
   15a90:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   15a94:	cmp	r0, #0
   15a98:	bne	15ab4 <verify_monster@@Base+0xe8>
   15a9c:	ldr	r0, [pc, #3728]	; 16934 <verify_monster@@Base+0xf68>
   15aa0:	add	r0, pc, r0
   15aa4:	bl	12d9c <printf@plt>
   15aa8:	mvn	r1, #0
   15aac:	str	r1, [sp, #196]	; 0xc4
   15ab0:	b	16910 <verify_monster@@Base+0xf44>
   15ab4:	ldr	r0, [pc, #3708]	; 16938 <verify_monster@@Base+0xf6c>
   15ab8:	add	r1, pc, r0
   15abc:	ldr	r0, [sp, #192]	; 0xc0
   15ac0:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   15ac4:	cmp	r0, #0
   15ac8:	beq	15ae4 <verify_monster@@Base+0x118>
   15acc:	ldr	r0, [pc, #3936]	; 16a34 <verify_monster@@Base+0x1068>
   15ad0:	add	r0, pc, r0
   15ad4:	bl	12d9c <printf@plt>
   15ad8:	mvn	r1, #0
   15adc:	str	r1, [sp, #196]	; 0xc4
   15ae0:	b	16910 <verify_monster@@Base+0xf44>
   15ae4:	ldr	r0, [pc, #3664]	; 1693c <verify_monster@@Base+0xf70>
   15ae8:	add	r1, pc, r0
   15aec:	ldr	r0, [sp, #192]	; 0xc0
   15af0:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   15af4:	cmp	r0, #0
   15af8:	bne	15b14 <verify_monster@@Base+0x148>
   15afc:	ldr	r0, [pc, #3644]	; 16940 <verify_monster@@Base+0xf74>
   15b00:	add	r0, pc, r0
   15b04:	bl	12d9c <printf@plt>
   15b08:	mvn	r1, #0
   15b0c:	str	r1, [sp, #196]	; 0xc4
   15b10:	b	16910 <verify_monster@@Base+0xf44>
   15b14:	ldr	r0, [sp, #192]	; 0xc0
   15b18:	bl	131f4 <verify_empty_monster@@Base+0x28c>
   15b1c:	str	r0, [sp, #188]	; 0xbc
   15b20:	movw	r1, #0
   15b24:	cmp	r0, r1
   15b28:	bne	15b44 <verify_monster@@Base+0x178>
   15b2c:	ldr	r0, [pc, #3600]	; 16944 <verify_monster@@Base+0xf78>
   15b30:	add	r0, pc, r0
   15b34:	bl	12d9c <printf@plt>
   15b38:	mvn	r1, #0
   15b3c:	str	r1, [sp, #196]	; 0xc4
   15b40:	b	16910 <verify_monster@@Base+0xf44>
   15b44:	ldr	r0, [sp, #188]	; 0xbc
   15b48:	bl	13270 <verify_empty_monster@@Base+0x308>
   15b4c:	sxth	r0, r0
   15b50:	cmp	r0, #80	; 0x50
   15b54:	beq	15b70 <verify_monster@@Base+0x1a4>
   15b58:	ldr	r0, [pc, #3792]	; 16a30 <verify_monster@@Base+0x1064>
   15b5c:	add	r0, pc, r0
   15b60:	bl	12d9c <printf@plt>
   15b64:	mvn	r1, #0
   15b68:	str	r1, [sp, #196]	; 0xc4
   15b6c:	b	16910 <verify_monster@@Base+0xf44>
   15b70:	ldr	r0, [sp, #188]	; 0xbc
   15b74:	bl	134fc <verify_empty_monster@@Base+0x594>
   15b78:	str	r0, [sp, #160]	; 0xa0
   15b7c:	movw	r1, #0
   15b80:	cmp	r0, r1
   15b84:	bne	15ba0 <verify_monster@@Base+0x1d4>
   15b88:	ldr	r0, [pc, #3512]	; 16948 <verify_monster@@Base+0xf7c>
   15b8c:	add	r0, pc, r0
   15b90:	bl	12d9c <printf@plt>
   15b94:	mvn	r1, #0
   15b98:	str	r1, [sp, #196]	; 0xc4
   15b9c:	b	16910 <verify_monster@@Base+0xf44>
   15ba0:	ldr	r0, [sp, #160]	; 0xa0
   15ba4:	and	r0, r0, #15
   15ba8:	cmp	r0, #0
   15bac:	beq	15bbc <verify_monster@@Base+0x1f0>
   15bb0:	ldr	r0, [pc, #3476]	; 1694c <verify_monster@@Base+0xf80>
   15bb4:	add	r0, pc, r0
   15bb8:	bl	12d9c <printf@plt>
   15bbc:	ldr	r0, [sp, #160]	; 0xa0
   15bc0:	bl	16a74 <verify_monster@@Base+0x10a8>
   15bc4:	vldr	s2, [pc, #936]	; 15f74 <verify_monster@@Base+0x5a8>
   15bc8:	vcmp.f32	s0, s2
   15bcc:	vmrs	APSR_nzcv, fpscr
   15bd0:	beq	15bec <verify_monster@@Base+0x220>
   15bd4:	ldr	r0, [pc, #3664]	; 16a2c <verify_monster@@Base+0x1060>
   15bd8:	add	r0, pc, r0
   15bdc:	bl	12d9c <printf@plt>
   15be0:	mvn	r1, #0
   15be4:	str	r1, [sp, #196]	; 0xc4
   15be8:	b	16910 <verify_monster@@Base+0xf44>
   15bec:	ldr	r0, [sp, #160]	; 0xa0
   15bf0:	vldr	s0, [r0]
   15bf4:	vmov.f32	s2, #112	; 0x3f800000  1.0
   15bf8:	vcmp.f32	s0, s2
   15bfc:	vmrs	APSR_nzcv, fpscr
   15c00:	bne	15c34 <verify_monster@@Base+0x268>
   15c04:	ldr	r0, [sp, #160]	; 0xa0
   15c08:	vldr	s0, [r0, #4]
   15c0c:	vmov.f32	s2, #0	; 0x40000000  2.0
   15c10:	vcmp.f32	s0, s2
   15c14:	vmrs	APSR_nzcv, fpscr
   15c18:	bne	15c34 <verify_monster@@Base+0x268>
   15c1c:	vldr	s0, [pc, #848]	; 15f74 <verify_monster@@Base+0x5a8>
   15c20:	ldr	r0, [sp, #160]	; 0xa0
   15c24:	vldr	s2, [r0, #8]
   15c28:	vcmp.f32	s2, s0
   15c2c:	vmrs	APSR_nzcv, fpscr
   15c30:	beq	15c4c <verify_monster@@Base+0x280>
   15c34:	ldr	r0, [pc, #3564]	; 16a28 <verify_monster@@Base+0x105c>
   15c38:	add	r0, pc, r0
   15c3c:	bl	12d9c <printf@plt>
   15c40:	mvn	r1, #0
   15c44:	str	r1, [sp, #196]	; 0xc4
   15c48:	b	16910 <verify_monster@@Base+0xf44>
   15c4c:	add	r0, sp, #112	; 0x70
   15c50:	bl	16ac4 <verify_monster@@Base+0x10f8>
   15c54:	ldr	r1, [sp, #160]	; 0xa0
   15c58:	add	r2, sp, #112	; 0x70
   15c5c:	str	r0, [sp, #28]
   15c60:	mov	r0, r2
   15c64:	bl	16b08 <verify_monster@@Base+0x113c>
   15c68:	vldr	s0, [sp, #112]	; 0x70
   15c6c:	vmov.f32	s2, #112	; 0x3f800000  1.0
   15c70:	vcmp.f32	s0, s2
   15c74:	vmrs	APSR_nzcv, fpscr
   15c78:	bne	15ca4 <verify_monster@@Base+0x2d8>
   15c7c:	vldr	s0, [sp, #116]	; 0x74
   15c80:	vmov.f32	s2, #0	; 0x40000000  2.0
   15c84:	vcmp.f32	s0, s2
   15c88:	vmrs	APSR_nzcv, fpscr
   15c8c:	bne	15ca4 <verify_monster@@Base+0x2d8>
   15c90:	vldr	s0, [pc, #732]	; 15f74 <verify_monster@@Base+0x5a8>
   15c94:	vldr	s2, [sp, #120]	; 0x78
   15c98:	vcmp.f32	s2, s0
   15c9c:	vmrs	APSR_nzcv, fpscr
   15ca0:	beq	15cbc <verify_monster@@Base+0x2f0>
   15ca4:	ldr	r0, [pc, #3448]	; 16a24 <verify_monster@@Base+0x1058>
   15ca8:	add	r0, pc, r0
   15cac:	bl	12d9c <printf@plt>
   15cb0:	mvn	r1, #0
   15cb4:	str	r1, [sp, #196]	; 0xc4
   15cb8:	b	16910 <verify_monster@@Base+0xf44>
   15cbc:	ldr	r0, [sp, #160]	; 0xa0
   15cc0:	vldr	d16, [r0, #16]
   15cc4:	vcmp.f64	d16, #0.0
   15cc8:	vmrs	APSR_nzcv, fpscr
   15ccc:	bne	15d00 <verify_monster@@Base+0x334>
   15cd0:	ldr	r0, [sp, #160]	; 0xa0
   15cd4:	vldr	d16, [r0, #16]
   15cd8:	vcmp.f64	d16, #0.0
   15cdc:	vmrs	APSR_nzcv, fpscr
   15ce0:	bne	15d00 <verify_monster@@Base+0x334>
   15ce4:	ldr	r0, [sp, #160]	; 0xa0
   15ce8:	add	r0, r0, #26
   15cec:	ldr	r0, [r0]
   15cf0:	cmp	r0, #0
   15cf4:	movwne	r0, #1
   15cf8:	cmp	r0, #0
   15cfc:	beq	15d18 <verify_monster@@Base+0x34c>
   15d00:	ldr	r0, [pc, #3352]	; 16a20 <verify_monster@@Base+0x1054>
   15d04:	add	r0, pc, r0
   15d08:	bl	12d9c <printf@plt>
   15d0c:	mvn	r1, #0
   15d10:	str	r1, [sp, #196]	; 0xc4
   15d14:	b	16910 <verify_monster@@Base+0xf44>
   15d18:	ldr	r0, [sp, #188]	; 0xbc
   15d1c:	bl	16bcc <verify_monster@@Base+0x1200>
   15d20:	str	r0, [sp, #156]	; 0x9c
   15d24:	ldr	r0, [sp, #156]	; 0x9c
   15d28:	movw	r1, #0
   15d2c:	cmp	r0, r1
   15d30:	beq	15d4c <verify_monster@@Base+0x380>
   15d34:	ldr	r0, [sp, #156]	; 0x9c
   15d38:	ldr	r1, [pc, #3320]	; 16a38 <verify_monster@@Base+0x106c>
   15d3c:	add	r1, pc, r1
   15d40:	bl	12d90 <strcmp@plt>
   15d44:	cmp	r0, #0
   15d48:	beq	15d64 <verify_monster@@Base+0x398>
   15d4c:	ldr	r0, [pc, #3272]	; 16a1c <verify_monster@@Base+0x1050>
   15d50:	add	r0, pc, r0
   15d54:	bl	12d9c <printf@plt>
   15d58:	mvn	r1, #0
   15d5c:	str	r1, [sp, #196]	; 0xc4
   15d60:	b	16910 <verify_monster@@Base+0xf44>
   15d64:	ldr	r0, [sp, #188]	; 0xbc
   15d68:	bl	16bcc <verify_monster@@Base+0x1200>
   15d6c:	str	r0, [sp, #152]	; 0x98
   15d70:	ldr	r0, [sp, #156]	; 0x9c
   15d74:	bl	16cec <verify_monster@@Base+0x1320>
   15d78:	cmp	r0, #9
   15d7c:	bne	15d90 <verify_monster@@Base+0x3c4>
   15d80:	ldr	r0, [sp, #152]	; 0x98
   15d84:	bl	16cec <verify_monster@@Base+0x1320>
   15d88:	cmp	r0, #9
   15d8c:	beq	15da8 <verify_monster@@Base+0x3dc>
   15d90:	ldr	r0, [pc, #3200]	; 16a18 <verify_monster@@Base+0x104c>
   15d94:	add	r0, pc, r0
   15d98:	bl	12d9c <printf@plt>
   15d9c:	mvn	r1, #0
   15da0:	str	r1, [sp, #196]	; 0xc4
   15da4:	b	16910 <verify_monster@@Base+0xf44>
   15da8:	ldr	r0, [sp, #188]	; 0xbc
   15dac:	bl	16d3c <verify_monster@@Base+0x1370>
   15db0:	sxtb	r0, r0
   15db4:	cmp	r0, #2
   15db8:	beq	15dd4 <verify_monster@@Base+0x408>
   15dbc:	ldr	r0, [pc, #3152]	; 16a14 <verify_monster@@Base+0x1048>
   15dc0:	add	r0, pc, r0
   15dc4:	bl	12d9c <printf@plt>
   15dc8:	mvn	r1, #0
   15dcc:	str	r1, [sp, #196]	; 0xc4
   15dd0:	b	16910 <verify_monster@@Base+0xf44>
   15dd4:	movw	r0, #2
   15dd8:	sxtb	r0, r0
   15ddc:	bl	16e30 <verify_monster@@Base+0x1464>
   15de0:	ldr	r1, [pc, #3156]	; 16a3c <verify_monster@@Base+0x1070>
   15de4:	add	r1, pc, r1
   15de8:	bl	12d90 <strcmp@plt>
   15dec:	cmp	r0, #0
   15df0:	beq	15e0c <verify_monster@@Base+0x440>
   15df4:	ldr	r0, [pc, #3092]	; 16a10 <verify_monster@@Base+0x1044>
   15df8:	add	r0, pc, r0
   15dfc:	bl	12d9c <printf@plt>
   15e00:	mvn	r1, #0
   15e04:	str	r1, [sp, #196]	; 0xc4
   15e08:	b	16910 <verify_monster@@Base+0xf44>
   15e0c:	movw	r0, #2
   15e10:	sxtb	r0, r0
   15e14:	bl	16ec4 <verify_monster@@Base+0x14f8>
   15e18:	cmp	r0, #0
   15e1c:	bne	15e38 <verify_monster@@Base+0x46c>
   15e20:	ldr	r0, [pc, #2856]	; 16950 <verify_monster@@Base+0xf84>
   15e24:	add	r0, pc, r0
   15e28:	bl	12d9c <printf@plt>
   15e2c:	mvn	r1, #0
   15e30:	str	r1, [sp, #196]	; 0xc4
   15e34:	b	16910 <verify_monster@@Base+0xf44>
   15e38:	movw	r0, #1
   15e3c:	sxtb	r0, r0
   15e40:	bl	16ec4 <verify_monster@@Base+0x14f8>
   15e44:	cmp	r0, #0
   15e48:	bne	15e64 <verify_monster@@Base+0x498>
   15e4c:	ldr	r0, [pc, #2816]	; 16954 <verify_monster@@Base+0xf88>
   15e50:	add	r0, pc, r0
   15e54:	bl	12d9c <printf@plt>
   15e58:	mvn	r1, #0
   15e5c:	str	r1, [sp, #196]	; 0xc4
   15e60:	b	16910 <verify_monster@@Base+0xf44>
   15e64:	movw	r0, #4
   15e68:	sxtb	r0, r0
   15e6c:	bl	16ec4 <verify_monster@@Base+0x14f8>
   15e70:	cmp	r0, #0
   15e74:	beq	15e90 <verify_monster@@Base+0x4c4>
   15e78:	ldr	r0, [pc, #2956]	; 16a0c <verify_monster@@Base+0x1040>
   15e7c:	add	r0, pc, r0
   15e80:	bl	12d9c <printf@plt>
   15e84:	mvn	r1, #0
   15e88:	str	r1, [sp, #196]	; 0xc4
   15e8c:	b	16910 <verify_monster@@Base+0xf44>
   15e90:	movw	r0, #8
   15e94:	sxtb	r0, r0
   15e98:	bl	16ec4 <verify_monster@@Base+0x14f8>
   15e9c:	cmp	r0, #0
   15ea0:	bne	15ebc <verify_monster@@Base+0x4f0>
   15ea4:	ldr	r0, [pc, #2732]	; 16958 <verify_monster@@Base+0xf8c>
   15ea8:	add	r0, pc, r0
   15eac:	bl	12d9c <printf@plt>
   15eb0:	mvn	r1, #0
   15eb4:	str	r1, [sp, #196]	; 0xc4
   15eb8:	b	16910 <verify_monster@@Base+0xf44>
   15ebc:	movw	r0, #9
   15ec0:	sxtb	r0, r0
   15ec4:	bl	16ec4 <verify_monster@@Base+0x14f8>
   15ec8:	cmp	r0, #0
   15ecc:	beq	15ee8 <verify_monster@@Base+0x51c>
   15ed0:	ldr	r0, [pc, #2864]	; 16a08 <verify_monster@@Base+0x103c>
   15ed4:	add	r0, pc, r0
   15ed8:	bl	12d9c <printf@plt>
   15edc:	mvn	r1, #0
   15ee0:	str	r1, [sp, #196]	; 0xc4
   15ee4:	b	16910 <verify_monster@@Base+0xf44>
   15ee8:	movw	r0, #1
   15eec:	and	r0, r0, #255	; 0xff
   15ef0:	bl	16f38 <verify_monster@@Base+0x156c>
   15ef4:	cmp	r0, #0
   15ef8:	bne	15f14 <verify_monster@@Base+0x548>
   15efc:	ldr	r0, [pc, #2648]	; 1695c <verify_monster@@Base+0xf90>
   15f00:	add	r0, pc, r0
   15f04:	bl	12d9c <printf@plt>
   15f08:	mvn	r1, #0
   15f0c:	str	r1, [sp, #196]	; 0xc4
   15f10:	b	16910 <verify_monster@@Base+0xf44>
   15f14:	movw	r0, #42	; 0x2a
   15f18:	and	r0, r0, #255	; 0xff
   15f1c:	bl	16f38 <verify_monster@@Base+0x156c>
   15f20:	cmp	r0, #0
   15f24:	beq	15f40 <verify_monster@@Base+0x574>
   15f28:	ldr	r0, [pc, #2772]	; 16a04 <verify_monster@@Base+0x1038>
   15f2c:	add	r0, pc, r0
   15f30:	bl	12d9c <printf@plt>
   15f34:	mvn	r1, #0
   15f38:	str	r1, [sp, #196]	; 0xc4
   15f3c:	b	16910 <verify_monster@@Base+0xf44>
   15f40:	ldr	r0, [sp, #188]	; 0xbc
   15f44:	bl	16fc8 <verify_monster@@Base+0x15fc>
   15f48:	str	r0, [sp, #48]	; 0x30
   15f4c:	ldr	r0, [sp, #48]	; 0x30
   15f50:	bl	170d0 <verify_monster@@Base+0x1704>
   15f54:	cmp	r0, #10
   15f58:	beq	15f78 <verify_monster@@Base+0x5ac>
   15f5c:	ldr	r0, [pc, #2716]	; 16a00 <verify_monster@@Base+0x1034>
   15f60:	add	r0, pc, r0
   15f64:	bl	12d9c <printf@plt>
   15f68:	mvn	r1, #0
   15f6c:	str	r1, [sp, #196]	; 0xc4
   15f70:	b	16910 <verify_monster@@Base+0xf44>
   15f74:	subgt	ip, ip, sp, asr #25
   15f78:	movw	r0, #0
   15f7c:	str	r0, [sp, #44]	; 0x2c
   15f80:	ldr	r0, [sp, #44]	; 0x2c
   15f84:	ldr	r1, [sp, #48]	; 0x30
   15f88:	str	r0, [sp, #24]
   15f8c:	mov	r0, r1
   15f90:	bl	170d0 <verify_monster@@Base+0x1704>
   15f94:	ldr	r1, [sp, #24]
   15f98:	cmp	r1, r0
   15f9c:	bcs	15fec <verify_monster@@Base+0x620>
   15fa0:	ldr	r0, [sp, #48]	; 0x30
   15fa4:	ldr	r1, [sp, #44]	; 0x2c
   15fa8:	bl	170f0 <verify_monster@@Base+0x1724>
   15fac:	and	r0, r0, #255	; 0xff
   15fb0:	ldr	r1, [sp, #44]	; 0x2c
   15fb4:	cmp	r0, r1
   15fb8:	beq	15fd8 <verify_monster@@Base+0x60c>
   15fbc:	ldr	r0, [pc, #2616]	; 169fc <verify_monster@@Base+0x1030>
   15fc0:	add	r0, pc, r0
   15fc4:	ldr	r1, [sp, #44]	; 0x2c
   15fc8:	bl	12d9c <printf@plt>
   15fcc:	mvn	r1, #0
   15fd0:	str	r1, [sp, #196]	; 0xc4
   15fd4:	b	16910 <verify_monster@@Base+0xf44>
   15fd8:	b	15fdc <verify_monster@@Base+0x610>
   15fdc:	ldr	r0, [sp, #44]	; 0x2c
   15fe0:	add	r0, r0, #1
   15fe4:	str	r0, [sp, #44]	; 0x2c
   15fe8:	b	15f80 <verify_monster@@Base+0x5b4>
   15fec:	ldr	r0, [sp, #188]	; 0xbc
   15ff0:	bl	17168 <verify_monster@@Base+0x179c>
   15ff4:	sxth	r0, r0
   15ff8:	cmp	r0, #150	; 0x96
   15ffc:	beq	16018 <verify_monster@@Base+0x64c>
   16000:	ldr	r0, [pc, #2544]	; 169f8 <verify_monster@@Base+0x102c>
   16004:	add	r0, pc, r0
   16008:	bl	12d9c <printf@plt>
   1600c:	mvn	r1, #0
   16010:	str	r1, [sp, #196]	; 0xc4
   16014:	b	16910 <verify_monster@@Base+0xf44>
   16018:	ldr	r0, [sp, #188]	; 0xbc
   1601c:	bl	1725c <verify_monster@@Base+0x1890>
   16020:	cmp	r0, #0
   16024:	beq	16040 <verify_monster@@Base+0x674>
   16028:	ldr	r0, [pc, #2500]	; 169f4 <verify_monster@@Base+0x1028>
   1602c:	add	r0, pc, r0
   16030:	bl	12d9c <printf@plt>
   16034:	mvn	r1, #0
   16038:	str	r1, [sp, #196]	; 0xc4
   1603c:	b	16910 <verify_monster@@Base+0xf44>
   16040:	ldr	r0, [sp, #188]	; 0xbc
   16044:	bl	13364 <verify_empty_monster@@Base+0x3fc>
   16048:	cmp	r0, #0
   1604c:	bne	16068 <verify_monster@@Base+0x69c>
   16050:	ldr	r0, [pc, #2312]	; 16960 <verify_monster@@Base+0xf94>
   16054:	add	r0, pc, r0
   16058:	bl	12d9c <printf@plt>
   1605c:	mvn	r1, #0
   16060:	str	r1, [sp, #196]	; 0xc4
   16064:	b	16910 <verify_monster@@Base+0xf44>
   16068:	ldr	r0, [sp, #188]	; 0xbc
   1606c:	bl	13430 <verify_empty_monster@@Base+0x4c8>
   16070:	cmp	r0, #0
   16074:	bne	16090 <verify_monster@@Base+0x6c4>
   16078:	ldr	r0, [pc, #2276]	; 16964 <verify_monster@@Base+0xf98>
   1607c:	add	r0, pc, r0
   16080:	bl	12d9c <printf@plt>
   16084:	mvn	r1, #0
   16088:	str	r1, [sp, #196]	; 0xc4
   1608c:	b	16910 <verify_monster@@Base+0xf44>
   16090:	ldr	r0, [sp, #188]	; 0xbc
   16094:	bl	17328 <verify_monster@@Base+0x195c>
   16098:	str	r0, [sp, #108]	; 0x6c
   1609c:	ldr	r0, [sp, #108]	; 0x6c
   160a0:	bl	17430 <verify_monster@@Base+0x1a64>
   160a4:	cmp	r0, #5
   160a8:	beq	160c4 <verify_monster@@Base+0x6f8>
   160ac:	ldr	r0, [pc, #2364]	; 169f0 <verify_monster@@Base+0x1024>
   160b0:	add	r0, pc, r0
   160b4:	bl	12d9c <printf@plt>
   160b8:	mvn	r1, #0
   160bc:	str	r1, [sp, #196]	; 0xc4
   160c0:	b	16910 <verify_monster@@Base+0xf44>
   160c4:	movw	r0, #0
   160c8:	str	r0, [sp, #44]	; 0x2c
   160cc:	ldr	r0, [sp, #44]	; 0x2c
   160d0:	cmp	r0, #5
   160d4:	bcs	16194 <verify_monster@@Base+0x7c8>
   160d8:	ldr	r0, [sp, #108]	; 0x6c
   160dc:	ldr	r1, [sp, #44]	; 0x2c
   160e0:	bl	17480 <verify_monster@@Base+0x1ab4>
   160e4:	str	r0, [sp, #84]	; 0x54
   160e8:	ldr	r0, [sp, #44]	; 0x2c
   160ec:	add	r1, sp, #88	; 0x58
   160f0:	add	r0, r1, r0, lsl #2
   160f4:	ldrsh	r0, [r0]
   160f8:	ldr	r1, [sp, #84]	; 0x54
   160fc:	str	r0, [sp, #20]
   16100:	mov	r0, r1
   16104:	bl	174f0 <verify_monster@@Base+0x1b24>
   16108:	sxth	r0, r0
   1610c:	ldr	r1, [sp, #20]
   16110:	cmp	r1, r0
   16114:	beq	16134 <verify_monster@@Base+0x768>
   16118:	ldr	r0, [pc, #2252]	; 169ec <verify_monster@@Base+0x1020>
   1611c:	add	r0, pc, r0
   16120:	ldr	r1, [sp, #44]	; 0x2c
   16124:	bl	12d9c <printf@plt>
   16128:	mvn	r1, #0
   1612c:	str	r1, [sp, #196]	; 0xc4
   16130:	b	16910 <verify_monster@@Base+0xf44>
   16134:	ldr	r0, [sp, #44]	; 0x2c
   16138:	add	r1, sp, #88	; 0x58
   1613c:	add	r0, r1, r0, lsl #2
   16140:	ldrsb	r0, [r0, #2]
   16144:	ldr	r1, [sp, #84]	; 0x54
   16148:	str	r0, [sp, #16]
   1614c:	mov	r0, r1
   16150:	bl	17540 <verify_monster@@Base+0x1b74>
   16154:	sxtb	r0, r0
   16158:	ldr	r1, [sp, #16]
   1615c:	cmp	r1, r0
   16160:	beq	16180 <verify_monster@@Base+0x7b4>
   16164:	ldr	r0, [pc, #2172]	; 169e8 <verify_monster@@Base+0x101c>
   16168:	add	r0, pc, r0
   1616c:	ldr	r1, [sp, #44]	; 0x2c
   16170:	bl	12d9c <printf@plt>
   16174:	mvn	r1, #0
   16178:	str	r1, [sp, #196]	; 0xc4
   1617c:	b	16910 <verify_monster@@Base+0xf44>
   16180:	b	16184 <verify_monster@@Base+0x7b8>
   16184:	ldr	r0, [sp, #44]	; 0x2c
   16188:	add	r0, r0, #1
   1618c:	str	r0, [sp, #44]	; 0x2c
   16190:	b	160cc <verify_monster@@Base+0x700>
   16194:	ldr	r0, [sp, #188]	; 0xbc
   16198:	bl	17594 <verify_monster@@Base+0x1bc8>
   1619c:	str	r0, [sp, #176]	; 0xb0
   161a0:	ldr	r0, [sp, #176]	; 0xb0
   161a4:	bl	1769c <verify_monster@@Base+0x1cd0>
   161a8:	cmp	r0, #8
   161ac:	beq	161c8 <verify_monster@@Base+0x7fc>
   161b0:	ldr	r0, [pc, #2092]	; 169e4 <verify_monster@@Base+0x1018>
   161b4:	add	r0, pc, r0
   161b8:	bl	12d9c <printf@plt>
   161bc:	mvn	r1, #0
   161c0:	str	r1, [sp, #196]	; 0xc4
   161c4:	b	16910 <verify_monster@@Base+0xf44>
   161c8:	ldr	r0, [sp, #176]	; 0xb0
   161cc:	movw	r1, #5
   161d0:	bl	176ec <verify_monster@@Base+0x1d20>
   161d4:	str	r0, [sp, #184]	; 0xb8
   161d8:	ldr	r0, [sp, #184]	; 0xb8
   161dc:	movw	r1, #0
   161e0:	cmp	r0, r1
   161e4:	beq	161ec <verify_monster@@Base+0x820>
   161e8:	b	1620c <verify_monster@@Base+0x840>
   161ec:	ldr	r0, [pc, #1908]	; 16968 <verify_monster@@Base+0xf9c>
   161f0:	add	r0, pc, r0
   161f4:	ldr	r1, [pc, #1904]	; 1696c <verify_monster@@Base+0xfa0>
   161f8:	add	r1, pc, r1
   161fc:	ldr	r2, [pc, #1900]	; 16970 <verify_monster@@Base+0xfa4>
   16200:	add	r3, pc, r2
   16204:	movw	r2, #662	; 0x296
   16208:	bl	12e68 <__assert_fail@plt>
   1620c:	ldr	r0, [sp, #184]	; 0xb8
   16210:	bl	16bcc <verify_monster@@Base+0x1200>
   16214:	str	r0, [sp, #156]	; 0x9c
   16218:	ldr	r0, [sp, #156]	; 0x9c
   1621c:	ldr	r1, [pc, #2076]	; 16a40 <verify_monster@@Base+0x1074>
   16220:	add	r1, pc, r1
   16224:	bl	12d90 <strcmp@plt>
   16228:	cmp	r0, #0
   1622c:	beq	16248 <verify_monster@@Base+0x87c>
   16230:	ldr	r0, [pc, #1960]	; 169e0 <verify_monster@@Base+0x1014>
   16234:	add	r0, pc, r0
   16238:	bl	12d9c <printf@plt>
   1623c:	mvn	r1, #0
   16240:	str	r1, [sp, #196]	; 0xc4
   16244:	b	16910 <verify_monster@@Base+0xf44>
   16248:	ldr	r0, [sp, #176]	; 0xb0
   1624c:	movw	r1, #1
   16250:	bl	176ec <verify_monster@@Base+0x1d20>
   16254:	str	r0, [sp, #180]	; 0xb4
   16258:	ldr	r0, [sp, #180]	; 0xb4
   1625c:	ldr	r1, [sp, #184]	; 0xb8
   16260:	cmp	r0, r1
   16264:	beq	16280 <verify_monster@@Base+0x8b4>
   16268:	ldr	r0, [pc, #1900]	; 169dc <verify_monster@@Base+0x1010>
   1626c:	add	r0, pc, r0
   16270:	bl	12d9c <printf@plt>
   16274:	mvn	r1, #0
   16278:	str	r1, [sp, #196]	; 0xc4
   1627c:	b	16910 <verify_monster@@Base+0xf44>
   16280:	ldr	r0, [sp, #180]	; 0xb4
   16284:	bl	16bcc <verify_monster@@Base+0x1200>
   16288:	str	r0, [sp, #156]	; 0x9c
   1628c:	ldr	r0, [sp, #156]	; 0x9c
   16290:	ldr	r1, [pc, #1964]	; 16a44 <verify_monster@@Base+0x1078>
   16294:	add	r1, pc, r1
   16298:	bl	12d90 <strcmp@plt>
   1629c:	cmp	r0, #0
   162a0:	beq	162c0 <verify_monster@@Base+0x8f4>
   162a4:	ldr	r0, [pc, #1836]	; 169d8 <verify_monster@@Base+0x100c>
   162a8:	add	r0, pc, r0
   162ac:	ldr	r1, [sp, #156]	; 0x9c
   162b0:	bl	12d9c <printf@plt>
   162b4:	mvn	r1, #0
   162b8:	str	r1, [sp, #196]	; 0xc4
   162bc:	b	16910 <verify_monster@@Base+0xf44>
   162c0:	ldr	r0, [sp, #176]	; 0xb0
   162c4:	movw	r1, #2
   162c8:	bl	176ec <verify_monster@@Base+0x1d20>
   162cc:	str	r0, [sp, #184]	; 0xb8
   162d0:	ldr	r0, [sp, #184]	; 0xb8
   162d4:	bl	16bcc <verify_monster@@Base+0x1200>
   162d8:	str	r0, [sp, #156]	; 0x9c
   162dc:	ldr	r0, [sp, #156]	; 0x9c
   162e0:	ldr	r1, [pc, #1888]	; 16a48 <verify_monster@@Base+0x107c>
   162e4:	add	r1, pc, r1
   162e8:	bl	12d90 <strcmp@plt>
   162ec:	cmp	r0, #0
   162f0:	beq	16310 <verify_monster@@Base+0x944>
   162f4:	ldr	r0, [pc, #1752]	; 169d4 <verify_monster@@Base+0x1008>
   162f8:	add	r0, pc, r0
   162fc:	ldr	r1, [sp, #156]	; 0x9c
   16300:	bl	12d9c <printf@plt>
   16304:	mvn	r1, #0
   16308:	str	r1, [sp, #196]	; 0xc4
   1630c:	b	16910 <verify_monster@@Base+0xf44>
   16310:	ldr	r0, [sp, #176]	; 0xb0
   16314:	movw	r1, #0
   16318:	bl	176ec <verify_monster@@Base+0x1d20>
   1631c:	str	r0, [sp, #184]	; 0xb8
   16320:	ldr	r0, [sp, #184]	; 0xb8
   16324:	bl	16bcc <verify_monster@@Base+0x1200>
   16328:	str	r0, [sp, #156]	; 0x9c
   1632c:	ldr	r0, [sp, #156]	; 0x9c
   16330:	ldr	r1, [pc, #1812]	; 16a4c <verify_monster@@Base+0x1080>
   16334:	add	r1, pc, r1
   16338:	bl	12d90 <strcmp@plt>
   1633c:	cmp	r0, #0
   16340:	beq	16360 <verify_monster@@Base+0x994>
   16344:	ldr	r0, [pc, #1668]	; 169d0 <verify_monster@@Base+0x1004>
   16348:	add	r0, pc, r0
   1634c:	ldr	r1, [sp, #156]	; 0x9c
   16350:	bl	12d9c <printf@plt>
   16354:	mvn	r1, #0
   16358:	str	r1, [sp, #196]	; 0xc4
   1635c:	b	16910 <verify_monster@@Base+0xf44>
   16360:	ldr	r0, [sp, #176]	; 0xb0
   16364:	movw	r1, #3
   16368:	bl	176ec <verify_monster@@Base+0x1d20>
   1636c:	str	r0, [sp, #184]	; 0xb8
   16370:	ldr	r0, [sp, #184]	; 0xb8
   16374:	bl	16bcc <verify_monster@@Base+0x1200>
   16378:	str	r0, [sp, #156]	; 0x9c
   1637c:	ldr	r0, [sp, #156]	; 0x9c
   16380:	ldr	r1, [pc, #1736]	; 16a50 <verify_monster@@Base+0x1084>
   16384:	add	r1, pc, r1
   16388:	bl	12d90 <strcmp@plt>
   1638c:	cmp	r0, #0
   16390:	beq	163b0 <verify_monster@@Base+0x9e4>
   16394:	ldr	r0, [pc, #1584]	; 169cc <verify_monster@@Base+0x1000>
   16398:	add	r0, pc, r0
   1639c:	ldr	r1, [sp, #156]	; 0x9c
   163a0:	bl	12d9c <printf@plt>
   163a4:	mvn	r1, #0
   163a8:	str	r1, [sp, #196]	; 0xc4
   163ac:	b	16910 <verify_monster@@Base+0xf44>
   163b0:	ldr	r0, [sp, #176]	; 0xb0
   163b4:	movw	r1, #4
   163b8:	bl	176ec <verify_monster@@Base+0x1d20>
   163bc:	str	r0, [sp, #184]	; 0xb8
   163c0:	ldr	r0, [sp, #184]	; 0xb8
   163c4:	bl	16bcc <verify_monster@@Base+0x1200>
   163c8:	str	r0, [sp, #156]	; 0x9c
   163cc:	ldr	r0, [sp, #156]	; 0x9c
   163d0:	ldr	r1, [pc, #1660]	; 16a54 <verify_monster@@Base+0x1088>
   163d4:	add	r1, pc, r1
   163d8:	bl	12d90 <strcmp@plt>
   163dc:	cmp	r0, #0
   163e0:	beq	16400 <verify_monster@@Base+0xa34>
   163e4:	ldr	r0, [pc, #1500]	; 169c8 <verify_monster@@Base+0xffc>
   163e8:	add	r0, pc, r0
   163ec:	ldr	r1, [sp, #156]	; 0x9c
   163f0:	bl	12d9c <printf@plt>
   163f4:	mvn	r1, #0
   163f8:	str	r1, [sp, #196]	; 0xc4
   163fc:	b	16910 <verify_monster@@Base+0xf44>
   16400:	ldr	r0, [sp, #176]	; 0xb0
   16404:	movw	r1, #6
   16408:	bl	176ec <verify_monster@@Base+0x1d20>
   1640c:	str	r0, [sp, #184]	; 0xb8
   16410:	ldr	r0, [sp, #184]	; 0xb8
   16414:	bl	16bcc <verify_monster@@Base+0x1200>
   16418:	str	r0, [sp, #156]	; 0x9c
   1641c:	ldr	r0, [sp, #156]	; 0x9c
   16420:	ldr	r1, [pc, #1584]	; 16a58 <verify_monster@@Base+0x108c>
   16424:	add	r1, pc, r1
   16428:	bl	12d90 <strcmp@plt>
   1642c:	cmp	r0, #0
   16430:	beq	16450 <verify_monster@@Base+0xa84>
   16434:	ldr	r0, [pc, #1416]	; 169c4 <verify_monster@@Base+0xff8>
   16438:	add	r0, pc, r0
   1643c:	ldr	r1, [sp, #156]	; 0x9c
   16440:	bl	12d9c <printf@plt>
   16444:	mvn	r1, #0
   16448:	str	r1, [sp, #196]	; 0xc4
   1644c:	b	16910 <verify_monster@@Base+0xf44>
   16450:	ldr	r0, [sp, #176]	; 0xb0
   16454:	movw	r1, #7
   16458:	bl	176ec <verify_monster@@Base+0x1d20>
   1645c:	str	r0, [sp, #184]	; 0xb8
   16460:	ldr	r0, [sp, #184]	; 0xb8
   16464:	bl	16bcc <verify_monster@@Base+0x1200>
   16468:	str	r0, [sp, #156]	; 0x9c
   1646c:	ldr	r0, [sp, #156]	; 0x9c
   16470:	ldr	r1, [pc, #1508]	; 16a5c <verify_monster@@Base+0x1090>
   16474:	add	r1, pc, r1
   16478:	bl	12d90 <strcmp@plt>
   1647c:	cmp	r0, #0
   16480:	beq	164a0 <verify_monster@@Base+0xad4>
   16484:	ldr	r0, [pc, #1332]	; 169c0 <verify_monster@@Base+0xff4>
   16488:	add	r0, pc, r0
   1648c:	ldr	r1, [sp, #156]	; 0x9c
   16490:	bl	12d9c <printf@plt>
   16494:	mvn	r1, #0
   16498:	str	r1, [sp, #196]	; 0xc4
   1649c:	b	16910 <verify_monster@@Base+0xf44>
   164a0:	ldr	r0, [sp, #188]	; 0xbc
   164a4:	bl	1777c <verify_monster@@Base+0x1db0>
   164a8:	str	r0, [sp, #80]	; 0x50
   164ac:	ldr	r0, [sp, #80]	; 0x50
   164b0:	bl	17884 <verify_monster@@Base+0x1eb8>
   164b4:	cmp	r0, #3
   164b8:	beq	164d4 <verify_monster@@Base+0xb08>
   164bc:	ldr	r0, [pc, #1272]	; 169bc <verify_monster@@Base+0xff0>
   164c0:	add	r0, pc, r0
   164c4:	bl	12d9c <printf@plt>
   164c8:	mvn	r1, #0
   164cc:	str	r1, [sp, #196]	; 0xc4
   164d0:	b	16910 <verify_monster@@Base+0xf44>
   164d4:	ldr	r0, [sp, #80]	; 0x50
   164d8:	movw	r1, #0
   164dc:	bl	178d4 <verify_monster@@Base+0x1f08>
   164e0:	ldr	r1, [pc, #1400]	; 16a60 <verify_monster@@Base+0x1094>
   164e4:	add	r1, pc, r1
   164e8:	bl	12d90 <strcmp@plt>
   164ec:	cmp	r0, #0
   164f0:	beq	1650c <verify_monster@@Base+0xb40>
   164f4:	ldr	r0, [pc, #1212]	; 169b8 <verify_monster@@Base+0xfec>
   164f8:	add	r0, pc, r0
   164fc:	bl	12d9c <printf@plt>
   16500:	mvn	r1, #0
   16504:	str	r1, [sp, #196]	; 0xc4
   16508:	b	16910 <verify_monster@@Base+0xf44>
   1650c:	ldr	r0, [sp, #80]	; 0x50
   16510:	movw	r1, #1
   16514:	bl	178d4 <verify_monster@@Base+0x1f08>
   16518:	str	r0, [sp, #76]	; 0x4c
   1651c:	ldr	r0, [sp, #76]	; 0x4c
   16520:	bl	16cec <verify_monster@@Base+0x1320>
   16524:	cmp	r0, #2
   16528:	beq	16544 <verify_monster@@Base+0xb78>
   1652c:	ldr	r0, [pc, #1152]	; 169b4 <verify_monster@@Base+0xfe8>
   16530:	add	r0, pc, r0
   16534:	bl	12d9c <printf@plt>
   16538:	mvn	r1, #0
   1653c:	str	r1, [sp, #196]	; 0xc4
   16540:	b	16910 <verify_monster@@Base+0xf44>
   16544:	ldr	r0, [sp, #76]	; 0x4c
   16548:	ldrh	r0, [r0]
   1654c:	subs	r0, r0, #44	; 0x2c
   16550:	movwne	r0, #1
   16554:	cmp	r0, #0
   16558:	beq	16574 <verify_monster@@Base+0xba8>
   1655c:	ldr	r0, [pc, #1100]	; 169b0 <verify_monster@@Base+0xfe4>
   16560:	add	r0, pc, r0
   16564:	bl	12d9c <printf@plt>
   16568:	mvn	r1, #0
   1656c:	str	r1, [sp, #196]	; 0xc4
   16570:	b	16910 <verify_monster@@Base+0xf44>
   16574:	ldr	r0, [sp, #80]	; 0x50
   16578:	movw	r1, #2
   1657c:	bl	178d4 <verify_monster@@Base+0x1f08>
   16580:	ldr	r1, [pc, #1244]	; 16a64 <verify_monster@@Base+0x1098>
   16584:	add	r1, pc, r1
   16588:	bl	12d90 <strcmp@plt>
   1658c:	cmp	r0, #0
   16590:	beq	165ac <verify_monster@@Base+0xbe0>
   16594:	ldr	r0, [pc, #1040]	; 169ac <verify_monster@@Base+0xfe0>
   16598:	add	r0, pc, r0
   1659c:	bl	12d9c <printf@plt>
   165a0:	mvn	r1, #0
   165a4:	str	r1, [sp, #196]	; 0xc4
   165a8:	b	16910 <verify_monster@@Base+0xf44>
   165ac:	ldr	r0, [sp, #188]	; 0xbc
   165b0:	bl	17968 <verify_monster@@Base+0x1f9c>
   165b4:	cmp	r0, #0
   165b8:	bne	165d4 <verify_monster@@Base+0xc08>
   165bc:	ldr	r0, [pc, #944]	; 16974 <verify_monster@@Base+0xfa8>
   165c0:	add	r0, pc, r0
   165c4:	bl	12d9c <printf@plt>
   165c8:	mvn	r1, #0
   165cc:	str	r1, [sp, #196]	; 0xc4
   165d0:	b	16910 <verify_monster@@Base+0xf44>
   165d4:	ldr	r0, [sp, #188]	; 0xbc
   165d8:	bl	17a34 <verify_monster@@Base+0x2068>
   165dc:	str	r0, [sp, #72]	; 0x48
   165e0:	ldr	r0, [sp, #72]	; 0x48
   165e4:	bl	17b3c <verify_monster@@Base+0x2170>
   165e8:	cmp	r0, #4
   165ec:	beq	16608 <verify_monster@@Base+0xc3c>
   165f0:	ldr	r0, [pc, #944]	; 169a8 <verify_monster@@Base+0xfdc>
   165f4:	add	r0, pc, r0
   165f8:	bl	12d9c <printf@plt>
   165fc:	mvn	r1, #0
   16600:	str	r1, [sp, #196]	; 0xc4
   16604:	b	16910 <verify_monster@@Base+0xf44>
   16608:	movw	r0, #0
   1660c:	str	r0, [sp, #44]	; 0x2c
   16610:	ldr	r0, [sp, #44]	; 0x2c
   16614:	cmp	r0, #4
   16618:	bcs	16670 <verify_monster@@Base+0xca4>
   1661c:	ldr	r0, [sp, #72]	; 0x48
   16620:	ldr	r1, [sp, #44]	; 0x2c
   16624:	bl	17b5c <verify_monster@@Base+0x2190>
   16628:	ldr	r1, [sp, #44]	; 0x2c
   1662c:	add	r2, sp, #52	; 0x34
   16630:	add	r1, r2, r1, lsl #2
   16634:	ldr	r1, [r1]
   16638:	cmp	r0, r1
   1663c:	beq	1665c <verify_monster@@Base+0xc90>
   16640:	ldr	r0, [pc, #860]	; 169a4 <verify_monster@@Base+0xfd8>
   16644:	add	r0, pc, r0
   16648:	ldr	r1, [sp, #44]	; 0x2c
   1664c:	bl	12d9c <printf@plt>
   16650:	mvn	r1, #0
   16654:	str	r1, [sp, #196]	; 0xc4
   16658:	b	16910 <verify_monster@@Base+0xf44>
   1665c:	b	16660 <verify_monster@@Base+0xc94>
   16660:	ldr	r0, [sp, #44]	; 0x2c
   16664:	add	r0, r0, #1
   16668:	str	r0, [sp, #44]	; 0x2c
   1666c:	b	16610 <verify_monster@@Base+0xc44>
   16670:	ldr	r0, [sp, #188]	; 0xbc
   16674:	bl	17bd4 <verify_monster@@Base+0x2208>
   16678:	strb	r0, [sp, #175]	; 0xaf
   1667c:	ldrb	r0, [sp, #175]	; 0xaf
   16680:	cmp	r0, #1
   16684:	beq	166a0 <verify_monster@@Base+0xcd4>
   16688:	ldr	r0, [pc, #784]	; 169a0 <verify_monster@@Base+0xfd4>
   1668c:	add	r0, pc, r0
   16690:	bl	12d9c <printf@plt>
   16694:	mvn	r1, #0
   16698:	str	r1, [sp, #196]	; 0xc4
   1669c:	b	16910 <verify_monster@@Base+0xf44>
   166a0:	ldr	r0, [sp, #188]	; 0xbc
   166a4:	bl	17cc8 <verify_monster@@Base+0x22fc>
   166a8:	str	r0, [sp, #184]	; 0xb8
   166ac:	ldr	r0, [sp, #184]	; 0xb8
   166b0:	bl	16bcc <verify_monster@@Base+0x1200>
   166b4:	ldr	r1, [pc, #940]	; 16a68 <verify_monster@@Base+0x109c>
   166b8:	add	r1, pc, r1
   166bc:	bl	12d90 <strcmp@plt>
   166c0:	cmp	r0, #0
   166c4:	beq	166e0 <verify_monster@@Base+0xd14>
   166c8:	ldr	r0, [pc, #716]	; 1699c <verify_monster@@Base+0xfd0>
   166cc:	add	r0, pc, r0
   166d0:	bl	12d9c <printf@plt>
   166d4:	mvn	r1, #0
   166d8:	str	r1, [sp, #196]	; 0xc4
   166dc:	b	16910 <verify_monster@@Base+0xf44>
   166e0:	ldr	r0, [sp, #188]	; 0xbc
   166e4:	bl	17dcc <verify_monster@@Base+0x2400>
   166e8:	str	r0, [sp, #184]	; 0xb8
   166ec:	ldr	r0, [sp, #184]	; 0xb8
   166f0:	bl	16bcc <verify_monster@@Base+0x1200>
   166f4:	ldr	r1, [pc, #880]	; 16a6c <verify_monster@@Base+0x10a0>
   166f8:	add	r1, pc, r1
   166fc:	bl	12d90 <strcmp@plt>
   16700:	cmp	r0, #0
   16704:	beq	16720 <verify_monster@@Base+0xd54>
   16708:	ldr	r0, [pc, #648]	; 16998 <verify_monster@@Base+0xfcc>
   1670c:	add	r0, pc, r0
   16710:	bl	12d9c <printf@plt>
   16714:	mvn	r1, #0
   16718:	str	r1, [sp, #196]	; 0xc4
   1671c:	b	16910 <verify_monster@@Base+0xf44>
   16720:	ldr	r0, [sp, #184]	; 0xb8
   16724:	bl	17bd4 <verify_monster@@Base+0x2208>
   16728:	and	r0, r0, #255	; 0xff
   1672c:	cmp	r0, #0
   16730:	beq	1674c <verify_monster@@Base+0xd80>
   16734:	ldr	r0, [pc, #600]	; 16994 <verify_monster@@Base+0xfc8>
   16738:	add	r0, pc, r0
   1673c:	bl	12d9c <printf@plt>
   16740:	mvn	r1, #0
   16744:	str	r1, [sp, #196]	; 0xc4
   16748:	b	16910 <verify_monster@@Base+0xf44>
   1674c:	ldr	r1, [sp, #188]	; 0xbc
   16750:	add	r0, sp, #36	; 0x24
   16754:	bl	17ed0 <verify_monster@@Base+0x2504>
   16758:	ldr	r0, [sp, #36]	; 0x24
   1675c:	str	r0, [sp, #164]	; 0xa4
   16760:	ldr	r0, [sp, #40]	; 0x28
   16764:	str	r0, [sp, #168]	; 0xa8
   16768:	ldrb	r0, [sp, #164]	; 0xa4
   1676c:	ldrb	r1, [sp, #175]	; 0xaf
   16770:	cmp	r0, r1
   16774:	beq	16790 <verify_monster@@Base+0xdc4>
   16778:	ldr	r0, [pc, #528]	; 16990 <verify_monster@@Base+0xfc4>
   1677c:	add	r0, pc, r0
   16780:	bl	12d9c <printf@plt>
   16784:	mvn	r1, #0
   16788:	str	r1, [sp, #196]	; 0xc4
   1678c:	b	16910 <verify_monster@@Base+0xf44>
   16790:	ldr	r0, [sp, #168]	; 0xa8
   16794:	ldr	r1, [sp, #188]	; 0xbc
   16798:	str	r0, [sp, #12]
   1679c:	mov	r0, r1
   167a0:	bl	17cc8 <verify_monster@@Base+0x22fc>
   167a4:	ldr	r1, [sp, #12]
   167a8:	cmp	r1, r0
   167ac:	beq	167c8 <verify_monster@@Base+0xdfc>
   167b0:	ldr	r0, [pc, #468]	; 1698c <verify_monster@@Base+0xfc0>
   167b4:	add	r0, pc, r0
   167b8:	bl	12d9c <printf@plt>
   167bc:	mvn	r1, #0
   167c0:	str	r1, [sp, #196]	; 0xc4
   167c4:	b	16910 <verify_monster@@Base+0xf44>
   167c8:	ldr	r0, [sp, #184]	; 0xb8
   167cc:	bl	17594 <verify_monster@@Base+0x1bc8>
   167d0:	str	r0, [sp, #176]	; 0xb0
   167d4:	ldr	r0, [sp, #176]	; 0xb0
   167d8:	bl	1769c <verify_monster@@Base+0x1cd0>
   167dc:	str	r0, [sp, #44]	; 0x2c
   167e0:	ldr	r0, [sp, #176]	; 0xb0
   167e4:	ldr	r1, [sp, #44]	; 0x2c
   167e8:	sub	r1, r1, #1
   167ec:	bl	176ec <verify_monster@@Base+0x1d20>
   167f0:	str	r0, [sp, #184]	; 0xb8
   167f4:	ldr	r0, [sp, #184]	; 0xb8
   167f8:	bl	17bd4 <verify_monster@@Base+0x2208>
   167fc:	and	r0, r0, #255	; 0xff
   16800:	cmp	r0, #1
   16804:	beq	16820 <verify_monster@@Base+0xe54>
   16808:	ldr	r0, [pc, #376]	; 16988 <verify_monster@@Base+0xfbc>
   1680c:	add	r0, pc, r0
   16810:	bl	12d9c <printf@plt>
   16814:	mvn	r1, #0
   16818:	str	r1, [sp, #196]	; 0xc4
   1681c:	b	16910 <verify_monster@@Base+0xf44>
   16820:	ldr	r0, [sp, #184]	; 0xb8
   16824:	bl	17cc8 <verify_monster@@Base+0x22fc>
   16828:	str	r0, [sp, #184]	; 0xb8
   1682c:	ldr	r0, [sp, #184]	; 0xb8
   16830:	bl	16bcc <verify_monster@@Base+0x1200>
   16834:	ldr	r1, [pc, #564]	; 16a70 <verify_monster@@Base+0x10a4>
   16838:	add	r1, pc, r1
   1683c:	bl	12d90 <strcmp@plt>
   16840:	cmp	r0, #0
   16844:	beq	16860 <verify_monster@@Base+0xe94>
   16848:	ldr	r0, [pc, #308]	; 16984 <verify_monster@@Base+0xfb8>
   1684c:	add	r0, pc, r0
   16850:	bl	12d9c <printf@plt>
   16854:	mvn	r1, #0
   16858:	str	r1, [sp, #196]	; 0xc4
   1685c:	b	16910 <verify_monster@@Base+0xf44>
   16860:	ldr	r0, [sp, #188]	; 0xbc
   16864:	bl	17f34 <verify_monster@@Base+0x2568>
   16868:	sxtb	r0, r0
   1686c:	cmp	r0, #0
   16870:	beq	1688c <verify_monster@@Base+0xec0>
   16874:	ldr	r0, [pc, #260]	; 16980 <verify_monster@@Base+0xfb4>
   16878:	add	r0, pc, r0
   1687c:	bl	12d9c <printf@plt>
   16880:	mvn	r1, #0
   16884:	str	r1, [sp, #196]	; 0xc4
   16888:	b	16910 <verify_monster@@Base+0xf44>
   1688c:	ldr	r0, [sp, #188]	; 0xbc
   16890:	bl	18028 <verify_monster@@Base+0x265c>
   16894:	cmp	r0, #0
   16898:	bne	168b4 <verify_monster@@Base+0xee8>
   1689c:	ldr	r0, [pc, #212]	; 16978 <verify_monster@@Base+0xfac>
   168a0:	add	r0, pc, r0
   168a4:	bl	12d9c <printf@plt>
   168a8:	mvn	r1, #0
   168ac:	str	r1, [sp, #196]	; 0xc4
   168b0:	b	16910 <verify_monster@@Base+0xf44>
   168b4:	ldr	r0, [sp, #188]	; 0xbc
   168b8:	bl	180f4 <verify_monster@@Base+0x2728>
   168bc:	str	r0, [sp, #68]	; 0x44
   168c0:	ldr	r0, [sp, #68]	; 0x44
   168c4:	bl	181f8 <verify_monster@@Base+0x282c>
   168c8:	cmp	r0, #0
   168cc:	bne	168f0 <verify_monster@@Base+0xf24>
   168d0:	ldr	r0, [sp, #68]	; 0x44
   168d4:	bl	182c4 <verify_monster@@Base+0x28f8>
   168d8:	cmp	r0, #0
   168dc:	bne	168f0 <verify_monster@@Base+0xf24>
   168e0:	ldr	r0, [sp, #68]	; 0x44
   168e4:	bl	18390 <verify_monster@@Base+0x29c4>
   168e8:	cmp	r0, #0
   168ec:	beq	16908 <verify_monster@@Base+0xf3c>
   168f0:	ldr	r0, [pc, #132]	; 1697c <verify_monster@@Base+0xfb0>
   168f4:	add	r0, pc, r0
   168f8:	bl	12d9c <printf@plt>
   168fc:	mvn	r1, #0
   16900:	str	r1, [sp, #196]	; 0xc4
   16904:	b	16910 <verify_monster@@Base+0xf44>
   16908:	movw	r0, #0
   1690c:	str	r0, [sp, #196]	; 0xc4
   16910:	ldr	r0, [sp, #196]	; 0xc4
   16914:	mov	sp, fp
   16918:	pop	{fp, pc}
   1691c:	andeq	r0, r2, ip, lsr #15
   16920:	andeq	r0, r2, r6, ror #13
   16924:	andeq	ip, r1, r0, ror #5
   16928:	andeq	fp, r1, r0, lsl #25
   1692c:	andeq	ip, r1, r2, lsr #6
   16930:	andeq	ip, r1, r2, asr #5
   16934:			; <UNDEFINED> instruction: 0x0001c2b2
   16938:	andeq	ip, r1, ip, asr #5
   1693c:	strdeq	fp, [r1], -r0
   16940:			; <UNDEFINED> instruction: 0x0001c2bc
   16944:			; <UNDEFINED> instruction: 0x0001bbb8
   16948:	andeq	ip, r1, r3, ror #4
   1694c:	andeq	ip, r1, pc, asr #4
   16950:	andeq	ip, r1, fp, lsl #2
   16954:	andeq	ip, r1, sl, lsl r1
   16958:	andeq	ip, r1, r7, lsr #2
   1695c:	andeq	ip, r1, r9, lsl #2
   16960:	andeq	ip, r1, sp, asr r0
   16964:	andeq	fp, r1, r7, lsl #15
   16968:	andeq	fp, r1, r3, asr pc
   1696c:	andeq	fp, r1, pc, asr #30
   16970:	andeq	fp, r1, pc, lsr #31
   16974:	andeq	fp, r1, r3, lsl #28
   16978:	strdeq	fp, [r1], -r8
   1697c:	andeq	fp, r1, r3, asr #25
   16980:	andeq	fp, r1, fp, lsl #26
   16984:	strdeq	fp, [r1], -sp
   16988:	strdeq	fp, [r1], -sl
   1698c:	andeq	fp, r1, r1, lsr sp
   16990:	andeq	fp, r1, r9, lsr sp
   16994:	andeq	fp, r1, r8, asr sp
   16998:	andeq	fp, r1, r6, ror #26
   1699c:	andeq	fp, r1, fp, ror sp
   169a0:	muleq	r1, r1, sp
   169a4:			; <UNDEFINED> instruction: 0x0001bdba
   169a8:	andeq	fp, r1, sl, ror #27
   169ac:	andeq	fp, r1, r3, lsl lr
   169b0:	andeq	fp, r1, r3, lsr #28
   169b4:	andeq	fp, r1, r9, lsr lr
   169b8:	andeq	fp, r1, r9, asr lr
   169bc:	andeq	fp, r1, r0, ror #28
   169c0:	andeq	fp, r1, r3, ror lr
   169c4:	muleq	r1, lr, lr
   169c8:	andeq	fp, r1, ip, asr #29
   169cc:	strdeq	fp, [r1], -r8
   169d0:	andeq	fp, r1, r3, lsr #30
   169d4:	andeq	fp, r1, r8, asr #30
   169d8:	andeq	fp, r1, r0, ror pc
   169dc:	andeq	fp, r1, r6, ror pc
   169e0:	muleq	r1, r6, pc	; <UNPREDICTABLE>
   169e4:	andeq	fp, r1, sp, ror #30
   169e8:	muleq	r1, r1, pc	; <UNPREDICTABLE>
   169ec:	ldrdeq	fp, [r1], -sp
   169f0:	andeq	ip, r1, r2, lsr #32
   169f4:	andeq	ip, r1, r0, ror r0
   169f8:	andeq	ip, r1, r6, lsl #1
   169fc:	andeq	ip, r1, sp, lsr #1
   16a00:	strdeq	ip, [r1], -r0
   16a04:	strdeq	ip, [r1], -pc	; <UNPREDICTABLE>
   16a08:	andeq	ip, r1, pc, asr #1
   16a0c:	andeq	ip, r1, r7, lsr #2
   16a10:	andeq	ip, r1, r9, lsl #2
   16a14:	andeq	ip, r1, ip, lsl r1
   16a18:	andeq	ip, r1, ip, lsr #2
   16a1c:	andeq	ip, r1, fp, asr r1
   16a20:	andeq	ip, r1, r2, lsl #3
   16a24:			; <UNDEFINED> instruction: 0x0001c1bc
   16a28:	andeq	ip, r1, r5, lsl r2
   16a2c:	andeq	ip, r1, r3, asr r2
   16a30:	andeq	fp, r1, r6, ror #24
   16a34:			; <UNDEFINED> instruction: 0x0001c2b9
   16a38:	andeq	fp, r1, r3, ror fp
   16a3c:	andeq	ip, r1, r7, lsl r1
   16a40:			; <UNDEFINED> instruction: 0x0001bfba
   16a44:	andeq	fp, r1, r6, asr #30
   16a48:	andeq	fp, r1, r6, asr pc
   16a4c:	andeq	fp, r1, lr, lsr #30
   16a50:	andeq	fp, r1, r6, asr lr
   16a54:	andeq	fp, r1, r6, ror #28
   16a58:	andeq	fp, r1, lr, lsr lr
   16a5c:	andeq	fp, r1, r6, asr #27
   16a60:	andeq	fp, r1, r7, ror #28
   16a64:	andeq	fp, r1, r0, lsr #28
   16a68:	andeq	fp, r1, r2, lsr #22
   16a6c:	andeq	fp, r1, r0, ror sp
   16a70:	andeq	fp, r1, r2, lsr #19
   16a74:	push	{fp, lr}
   16a78:	mov	fp, sp
   16a7c:	sub	sp, sp, #8
   16a80:	str	r0, [sp, #4]
   16a84:	ldr	r0, [sp, #4]
   16a88:	movw	r1, #0
   16a8c:	cmp	r0, r1
   16a90:	beq	16aa8 <verify_monster@@Base+0x10dc>
   16a94:	ldr	r0, [sp, #4]
   16a98:	add	r0, r0, #8
   16a9c:	bl	244c4 <main@@Base+0x150c>
   16aa0:	vstr	s0, [sp]
   16aa4:	b	16ab4 <verify_monster@@Base+0x10e8>
   16aa8:	vldr	s0, [pc, #16]	; 16ac0 <verify_monster@@Base+0x10f4>
   16aac:	vstr	s0, [sp]
   16ab0:	b	16ab4 <verify_monster@@Base+0x10e8>
   16ab4:	vldr	s0, [sp]
   16ab8:	mov	sp, fp
   16abc:	pop	{fp, pc}
   16ac0:	andeq	r0, r0, r0
   16ac4:	push	{fp, lr}
   16ac8:	mov	fp, sp
   16acc:	sub	sp, sp, #16
   16ad0:	str	r0, [fp, #-4]
   16ad4:	ldr	r0, [fp, #-4]
   16ad8:	str	r0, [sp, #8]
   16adc:	bl	25a94 <main@@Base+0x2adc>
   16ae0:	ldr	r1, [sp, #8]
   16ae4:	str	r0, [sp, #4]
   16ae8:	mov	r0, r1
   16aec:	movw	r2, #0
   16af0:	and	r1, r2, #255	; 0xff
   16af4:	ldr	r2, [sp, #4]
   16af8:	bl	12e2c <memset@plt>
   16afc:	ldr	r0, [sp, #8]
   16b00:	mov	sp, fp
   16b04:	pop	{fp, pc}
   16b08:	push	{fp, lr}
   16b0c:	mov	fp, sp
   16b10:	sub	sp, sp, #32
   16b14:	str	r0, [fp, #-4]
   16b18:	str	r1, [fp, #-8]
   16b1c:	ldr	r0, [fp, #-4]
   16b20:	ldr	r1, [fp, #-8]
   16b24:	bl	25a9c <main@@Base+0x2ae4>
   16b28:	ldr	r1, [fp, #-4]
   16b2c:	add	r1, r1, #4
   16b30:	ldr	r2, [fp, #-8]
   16b34:	add	r2, r2, #4
   16b38:	str	r0, [fp, #-12]
   16b3c:	mov	r0, r1
   16b40:	mov	r1, r2
   16b44:	bl	25a9c <main@@Base+0x2ae4>
   16b48:	ldr	r1, [fp, #-4]
   16b4c:	add	r1, r1, #8
   16b50:	ldr	r2, [fp, #-8]
   16b54:	add	r2, r2, #8
   16b58:	str	r0, [sp, #16]
   16b5c:	mov	r0, r1
   16b60:	mov	r1, r2
   16b64:	bl	25a9c <main@@Base+0x2ae4>
   16b68:	ldr	r1, [fp, #-4]
   16b6c:	add	r1, r1, #16
   16b70:	ldr	r2, [fp, #-8]
   16b74:	add	r2, r2, #16
   16b78:	str	r0, [sp, #12]
   16b7c:	mov	r0, r1
   16b80:	mov	r1, r2
   16b84:	bl	25ad0 <main@@Base+0x2b18>
   16b88:	ldr	r1, [fp, #-8]
   16b8c:	ldrb	r1, [r1, #24]
   16b90:	ldr	r2, [fp, #-4]
   16b94:	strb	r1, [r2, #24]
   16b98:	ldr	r1, [fp, #-4]
   16b9c:	add	r1, r1, #26
   16ba0:	ldr	r2, [fp, #-8]
   16ba4:	add	r2, r2, #26
   16ba8:	str	r0, [sp, #8]
   16bac:	mov	r0, r1
   16bb0:	mov	r1, r2
   16bb4:	bl	25b04 <main@@Base+0x2b4c>
   16bb8:	ldr	r1, [fp, #-4]
   16bbc:	str	r0, [sp, #4]
   16bc0:	mov	r0, r1
   16bc4:	mov	sp, fp
   16bc8:	pop	{fp, pc}
   16bcc:	push	{fp, lr}
   16bd0:	mov	fp, sp
   16bd4:	sub	sp, sp, #24
   16bd8:	str	r0, [fp, #-4]
   16bdc:	movw	r0, #0
   16be0:	strh	r0, [fp, #-10]
   16be4:	ldr	r0, [fp, #-4]
   16be8:	movw	r1, #0
   16bec:	cmp	r0, r1
   16bf0:	beq	16bfc <verify_monster@@Base+0x1230>
   16bf4:	b	16bf8 <verify_monster@@Base+0x122c>
   16bf8:	b	16c1c <verify_monster@@Base+0x1250>
   16bfc:	ldr	r0, [pc, #208]	; 16cd4 <verify_monster@@Base+0x1308>
   16c00:	add	r0, pc, r0
   16c04:	ldr	r1, [pc, #204]	; 16cd8 <verify_monster@@Base+0x130c>
   16c08:	add	r1, pc, r1
   16c0c:	ldr	r2, [pc, #200]	; 16cdc <verify_monster@@Base+0x1310>
   16c10:	add	r3, pc, r2
   16c14:	movw	r2, #699	; 0x2bb
   16c18:	bl	12e68 <__assert_fail@plt>
   16c1c:	mov	r0, #3
   16c20:	strh	r0, [sp, #12]
   16c24:	ldr	r0, [fp, #-4]
   16c28:	str	r0, [sp, #4]
   16c2c:	bl	2344c <main@@Base+0x494>
   16c30:	ldr	r1, [sp, #4]
   16c34:	sub	r0, r1, r0
   16c38:	str	r0, [sp, #8]
   16c3c:	ldr	r0, [sp, #8]
   16c40:	bl	23470 <main@@Base+0x4b8>
   16c44:	ldrh	r1, [sp, #12]
   16c48:	add	r1, r1, #3
   16c4c:	lsl	r1, r1, #1
   16c50:	cmp	r0, r1
   16c54:	bcc	16c70 <verify_monster@@Base+0x12a4>
   16c58:	ldr	r0, [sp, #8]
   16c5c:	ldrh	r1, [sp, #12]
   16c60:	add	r0, r0, r1, lsl #1
   16c64:	add	r0, r0, #4
   16c68:	bl	23470 <main@@Base+0x4b8>
   16c6c:	strh	r0, [fp, #-10]
   16c70:	ldrsh	r0, [fp, #-10]
   16c74:	cmp	r0, #0
   16c78:	beq	16cb4 <verify_monster@@Base+0x12e8>
   16c7c:	ldr	r0, [fp, #-4]
   16c80:	ldrh	r1, [fp, #-10]
   16c84:	add	r0, r0, r1
   16c88:	str	r0, [fp, #-8]
   16c8c:	ldr	r0, [fp, #-8]
   16c90:	add	r0, r0, #4
   16c94:	ldr	r1, [fp, #-8]
   16c98:	str	r0, [sp]
   16c9c:	mov	r0, r1
   16ca0:	bl	23414 <main@@Base+0x45c>
   16ca4:	ldr	r1, [sp]
   16ca8:	add	r0, r1, r0
   16cac:	mov	sp, fp
   16cb0:	pop	{fp, pc}
   16cb4:	ldr	r0, [pc, #36]	; 16ce0 <verify_monster@@Base+0x1314>
   16cb8:	add	r0, pc, r0
   16cbc:	ldr	r1, [pc, #32]	; 16ce4 <verify_monster@@Base+0x1318>
   16cc0:	add	r1, pc, r1
   16cc4:	ldr	r2, [pc, #28]	; 16ce8 <verify_monster@@Base+0x131c>
   16cc8:	add	r3, pc, r2
   16ccc:	movw	r2, #699	; 0x2bb
   16cd0:	bl	12e68 <__assert_fail@plt>
   16cd4:	andeq	sp, r1, sp, ror #7
   16cd8:	andeq	sp, r1, fp, lsl #8
   16cdc:			; <UNDEFINED> instruction: 0x0001dcb8
   16ce0:	andeq	sp, r1, r1, ror #24
   16ce4:	andeq	sp, r1, r3, asr r3
   16ce8:	andeq	sp, r1, r0, lsl #24
   16cec:	push	{fp, lr}
   16cf0:	mov	fp, sp
   16cf4:	sub	sp, sp, #8
   16cf8:	str	r0, [sp, #4]
   16cfc:	ldr	r0, [sp, #4]
   16d00:	movw	r1, #0
   16d04:	cmp	r0, r1
   16d08:	beq	16d24 <verify_monster@@Base+0x1358>
   16d0c:	ldr	r0, [sp, #4]
   16d10:	mvn	r1, #3
   16d14:	add	r0, r0, r1
   16d18:	bl	23414 <main@@Base+0x45c>
   16d1c:	str	r0, [sp]
   16d20:	b	16d30 <verify_monster@@Base+0x1364>
   16d24:	movw	r0, #0
   16d28:	str	r0, [sp]
   16d2c:	b	16d30 <verify_monster@@Base+0x1364>
   16d30:	ldr	r0, [sp]
   16d34:	mov	sp, fp
   16d38:	pop	{fp, pc}
   16d3c:	push	{fp, lr}
   16d40:	mov	fp, sp
   16d44:	sub	sp, sp, #24
   16d48:	str	r0, [fp, #-4]
   16d4c:	movw	r0, #0
   16d50:	strh	r0, [fp, #-6]
   16d54:	ldr	r0, [fp, #-4]
   16d58:	movw	r1, #0
   16d5c:	cmp	r0, r1
   16d60:	beq	16d6c <verify_monster@@Base+0x13a0>
   16d64:	b	16d68 <verify_monster@@Base+0x139c>
   16d68:	b	16d8c <verify_monster@@Base+0x13c0>
   16d6c:	ldr	r0, [pc, #176]	; 16e24 <verify_monster@@Base+0x1458>
   16d70:	add	r0, pc, r0
   16d74:	ldr	r1, [pc, #172]	; 16e28 <verify_monster@@Base+0x145c>
   16d78:	add	r1, pc, r1
   16d7c:	ldr	r2, [pc, #168]	; 16e2c <verify_monster@@Base+0x1460>
   16d80:	add	r3, pc, r2
   16d84:	movw	r2, #705	; 0x2c1
   16d88:	bl	12e68 <__assert_fail@plt>
   16d8c:	mov	r0, #6
   16d90:	strh	r0, [fp, #-8]
   16d94:	ldr	r0, [fp, #-4]
   16d98:	str	r0, [sp, #8]
   16d9c:	bl	2344c <main@@Base+0x494>
   16da0:	ldr	r1, [sp, #8]
   16da4:	sub	r0, r1, r0
   16da8:	str	r0, [sp, #12]
   16dac:	ldr	r0, [sp, #12]
   16db0:	bl	23470 <main@@Base+0x4b8>
   16db4:	ldrh	r1, [fp, #-8]
   16db8:	add	r1, r1, #3
   16dbc:	lsl	r1, r1, #1
   16dc0:	cmp	r0, r1
   16dc4:	bcc	16de0 <verify_monster@@Base+0x1414>
   16dc8:	ldr	r0, [sp, #12]
   16dcc:	ldrh	r1, [fp, #-8]
   16dd0:	add	r0, r0, r1, lsl #1
   16dd4:	add	r0, r0, #4
   16dd8:	bl	23470 <main@@Base+0x4b8>
   16ddc:	strh	r0, [fp, #-6]
   16de0:	ldrh	r0, [fp, #-6]
   16de4:	cmp	r0, #0
   16de8:	beq	16e08 <verify_monster@@Base+0x143c>
   16dec:	ldr	r0, [fp, #-4]
   16df0:	ldrh	r1, [fp, #-6]
   16df4:	add	r0, r0, r1
   16df8:	bl	25b7c <main@@Base+0x2bc4>
   16dfc:	sxtb	r0, r0
   16e00:	str	r0, [sp, #4]
   16e04:	b	16e14 <verify_monster@@Base+0x1448>
   16e08:	movw	r0, #8
   16e0c:	str	r0, [sp, #4]
   16e10:	b	16e14 <verify_monster@@Base+0x1448>
   16e14:	ldr	r0, [sp, #4]
   16e18:	sxtb	r0, r0
   16e1c:	mov	sp, fp
   16e20:	pop	{fp, pc}
   16e24:	andeq	sp, r1, sp, ror r2
   16e28:	muleq	r1, fp, r2
   16e2c:			; <UNDEFINED> instruction: 0x0001dbba
   16e30:	sub	sp, sp, #12
   16e34:	strb	r0, [sp, #7]
   16e38:	ldrsb	r0, [sp, #7]
   16e3c:	cmp	r0, #1
   16e40:	str	r0, [sp]
   16e44:	beq	16e6c <verify_monster@@Base+0x14a0>
   16e48:	b	16e4c <verify_monster@@Base+0x1480>
   16e4c:	ldr	r0, [sp]
   16e50:	cmp	r0, #2
   16e54:	beq	16e7c <verify_monster@@Base+0x14b0>
   16e58:	b	16e5c <verify_monster@@Base+0x1490>
   16e5c:	ldr	r0, [sp]
   16e60:	cmp	r0, #8
   16e64:	beq	16e8c <verify_monster@@Base+0x14c0>
   16e68:	b	16e9c <verify_monster@@Base+0x14d0>
   16e6c:	ldr	r0, [pc, #72]	; 16ebc <verify_monster@@Base+0x14f0>
   16e70:	add	r0, pc, r0
   16e74:	str	r0, [sp, #8]
   16e78:	b	16ea8 <verify_monster@@Base+0x14dc>
   16e7c:	ldr	r0, [pc, #52]	; 16eb8 <verify_monster@@Base+0x14ec>
   16e80:	add	r0, pc, r0
   16e84:	str	r0, [sp, #8]
   16e88:	b	16ea8 <verify_monster@@Base+0x14dc>
   16e8c:	ldr	r0, [pc, #32]	; 16eb4 <verify_monster@@Base+0x14e8>
   16e90:	add	r0, pc, r0
   16e94:	str	r0, [sp, #8]
   16e98:	b	16ea8 <verify_monster@@Base+0x14dc>
   16e9c:	ldr	r0, [pc, #28]	; 16ec0 <verify_monster@@Base+0x14f4>
   16ea0:	add	r0, pc, r0
   16ea4:	str	r0, [sp, #8]
   16ea8:	ldr	r0, [sp, #8]
   16eac:	add	sp, sp, #12
   16eb0:	bx	lr
   16eb4:	andeq	sp, r1, r7, lsl #22
   16eb8:	andeq	fp, r1, fp, ror r0
   16ebc:	andeq	sp, r1, r3, lsr #22
   16ec0:	andeq	ip, r1, r8, asr sl
   16ec4:	sub	sp, sp, #12
   16ec8:	strb	r0, [sp, #7]
   16ecc:	ldrsb	r0, [sp, #7]
   16ed0:	cmp	r0, #1
   16ed4:	str	r0, [sp]
   16ed8:	beq	16f00 <verify_monster@@Base+0x1534>
   16edc:	b	16ee0 <verify_monster@@Base+0x1514>
   16ee0:	ldr	r0, [sp]
   16ee4:	cmp	r0, #2
   16ee8:	beq	16f0c <verify_monster@@Base+0x1540>
   16eec:	b	16ef0 <verify_monster@@Base+0x1524>
   16ef0:	ldr	r0, [sp]
   16ef4:	cmp	r0, #8
   16ef8:	beq	16f18 <verify_monster@@Base+0x154c>
   16efc:	b	16f24 <verify_monster@@Base+0x1558>
   16f00:	movw	r0, #1
   16f04:	str	r0, [sp, #8]
   16f08:	b	16f2c <verify_monster@@Base+0x1560>
   16f0c:	movw	r0, #1
   16f10:	str	r0, [sp, #8]
   16f14:	b	16f2c <verify_monster@@Base+0x1560>
   16f18:	movw	r0, #1
   16f1c:	str	r0, [sp, #8]
   16f20:	b	16f2c <verify_monster@@Base+0x1560>
   16f24:	movw	r0, #0
   16f28:	str	r0, [sp, #8]
   16f2c:	ldr	r0, [sp, #8]
   16f30:	add	sp, sp, #12
   16f34:	bx	lr
   16f38:	sub	sp, sp, #12
   16f3c:	strb	r0, [sp, #7]
   16f40:	ldrb	r0, [sp, #7]
   16f44:	mov	r1, r0
   16f48:	cmp	r0, #4
   16f4c:	str	r1, [sp]
   16f50:	bhi	16fb4 <verify_monster@@Base+0x15e8>
   16f54:	add	r0, pc, #8
   16f58:	ldr	r1, [sp]
   16f5c:	ldr	r2, [r0, r1, lsl #2]
   16f60:	add	pc, r0, r2
   16f64:	andeq	r0, r0, r4, lsl r0
   16f68:	andeq	r0, r0, r0, lsr #32
   16f6c:	andeq	r0, r0, ip, lsr #32
   16f70:	andeq	r0, r0, r8, lsr r0
   16f74:	andeq	r0, r0, r4, asr #32
   16f78:	movw	r0, #1
   16f7c:	str	r0, [sp, #8]
   16f80:	b	16fbc <verify_monster@@Base+0x15f0>
   16f84:	movw	r0, #1
   16f88:	str	r0, [sp, #8]
   16f8c:	b	16fbc <verify_monster@@Base+0x15f0>
   16f90:	movw	r0, #1
   16f94:	str	r0, [sp, #8]
   16f98:	b	16fbc <verify_monster@@Base+0x15f0>
   16f9c:	movw	r0, #1
   16fa0:	str	r0, [sp, #8]
   16fa4:	b	16fbc <verify_monster@@Base+0x15f0>
   16fa8:	movw	r0, #1
   16fac:	str	r0, [sp, #8]
   16fb0:	b	16fbc <verify_monster@@Base+0x15f0>
   16fb4:	movw	r0, #0
   16fb8:	str	r0, [sp, #8]
   16fbc:	ldr	r0, [sp, #8]
   16fc0:	add	sp, sp, #12
   16fc4:	bx	lr
   16fc8:	push	{fp, lr}
   16fcc:	mov	fp, sp
   16fd0:	sub	sp, sp, #32
   16fd4:	str	r0, [fp, #-8]
   16fd8:	movw	r0, #0
   16fdc:	strh	r0, [fp, #-14]
   16fe0:	ldr	r0, [fp, #-8]
   16fe4:	movw	r1, #0
   16fe8:	cmp	r0, r1
   16fec:	beq	16ff8 <verify_monster@@Base+0x162c>
   16ff0:	b	16ff4 <verify_monster@@Base+0x1628>
   16ff4:	b	17018 <verify_monster@@Base+0x164c>
   16ff8:	ldr	r0, [pc, #196]	; 170c4 <verify_monster@@Base+0x16f8>
   16ffc:	add	r0, pc, r0
   17000:	ldr	r1, [pc, #192]	; 170c8 <verify_monster@@Base+0x16fc>
   17004:	add	r1, pc, r1
   17008:	ldr	r2, [pc, #188]	; 170cc <verify_monster@@Base+0x1700>
   1700c:	add	r3, pc, r2
   17010:	movw	r2, #706	; 0x2c2
   17014:	bl	12e68 <__assert_fail@plt>
   17018:	mov	r0, #5
   1701c:	strh	r0, [sp, #16]
   17020:	ldr	r0, [fp, #-8]
   17024:	str	r0, [sp, #8]
   17028:	bl	2344c <main@@Base+0x494>
   1702c:	ldr	r1, [sp, #8]
   17030:	sub	r0, r1, r0
   17034:	str	r0, [sp, #12]
   17038:	ldr	r0, [sp, #12]
   1703c:	bl	23470 <main@@Base+0x4b8>
   17040:	ldrh	r1, [sp, #16]
   17044:	add	r1, r1, #3
   17048:	lsl	r1, r1, #1
   1704c:	cmp	r0, r1
   17050:	bcc	1706c <verify_monster@@Base+0x16a0>
   17054:	ldr	r0, [sp, #12]
   17058:	ldrh	r1, [sp, #16]
   1705c:	add	r0, r0, r1, lsl #1
   17060:	add	r0, r0, #4
   17064:	bl	23470 <main@@Base+0x4b8>
   17068:	strh	r0, [fp, #-14]
   1706c:	ldrsh	r0, [fp, #-14]
   17070:	cmp	r0, #0
   17074:	beq	170b0 <verify_monster@@Base+0x16e4>
   17078:	ldr	r0, [fp, #-8]
   1707c:	ldrh	r1, [fp, #-14]
   17080:	add	r0, r0, r1
   17084:	str	r0, [fp, #-12]
   17088:	ldr	r0, [fp, #-12]
   1708c:	add	r0, r0, #4
   17090:	ldr	r1, [fp, #-12]
   17094:	str	r0, [sp, #4]
   17098:	mov	r0, r1
   1709c:	bl	23414 <main@@Base+0x45c>
   170a0:	ldr	r1, [sp, #4]
   170a4:	add	r0, r1, r0
   170a8:	str	r0, [fp, #-4]
   170ac:	b	170b8 <verify_monster@@Base+0x16ec>
   170b0:	movw	r0, #0
   170b4:	str	r0, [fp, #-4]
   170b8:	ldr	r0, [fp, #-4]
   170bc:	mov	sp, fp
   170c0:	pop	{fp, pc}
   170c4:	strdeq	ip, [r1], -r1
   170c8:	andeq	sp, r1, pc
   170cc:	muleq	r1, r0, r9
   170d0:	push	{fp, lr}
   170d4:	mov	fp, sp
   170d8:	sub	sp, sp, #8
   170dc:	str	r0, [sp, #4]
   170e0:	ldr	r0, [sp, #4]
   170e4:	bl	25bb8 <main@@Base+0x2c00>
   170e8:	mov	sp, fp
   170ec:	pop	{fp, pc}
   170f0:	push	{fp, lr}
   170f4:	mov	fp, sp
   170f8:	sub	sp, sp, #8
   170fc:	str	r0, [sp, #4]
   17100:	str	r1, [sp]
   17104:	ldr	r0, [sp, #4]
   17108:	bl	25bb8 <main@@Base+0x2c00>
   1710c:	ldr	r1, [sp]
   17110:	cmp	r0, r1
   17114:	bls	17120 <verify_monster@@Base+0x1754>
   17118:	b	1711c <verify_monster@@Base+0x1750>
   1711c:	b	17140 <verify_monster@@Base+0x1774>
   17120:	ldr	r0, [pc, #52]	; 1715c <verify_monster@@Base+0x1790>
   17124:	add	r0, pc, r0
   17128:	ldr	r1, [pc, #48]	; 17160 <verify_monster@@Base+0x1794>
   1712c:	add	r1, pc, r1
   17130:	ldr	r2, [pc, #44]	; 17164 <verify_monster@@Base+0x1798>
   17134:	add	r3, pc, r2
   17138:	movw	r2, #395	; 0x18b
   1713c:	bl	12e68 <__assert_fail@plt>
   17140:	ldr	r0, [sp, #4]
   17144:	ldr	r1, [sp]
   17148:	add	r0, r0, r1
   1714c:	bl	243c4 <main@@Base+0x140c>
   17150:	and	r0, r0, #255	; 0xff
   17154:	mov	sp, fp
   17158:	pop	{fp, pc}
   1715c:	andeq	sp, r1, r4, ror #17
   17160:	andeq	sp, r1, r3, lsl r9
   17164:	andeq	sp, r1, sl, lsl #19
   17168:	push	{fp, lr}
   1716c:	mov	fp, sp
   17170:	sub	sp, sp, #24
   17174:	str	r0, [fp, #-4]
   17178:	movw	r0, #0
   1717c:	strh	r0, [fp, #-6]
   17180:	ldr	r0, [fp, #-4]
   17184:	movw	r1, #0
   17188:	cmp	r0, r1
   1718c:	beq	17198 <verify_monster@@Base+0x17cc>
   17190:	b	17194 <verify_monster@@Base+0x17c8>
   17194:	b	171b8 <verify_monster@@Base+0x17ec>
   17198:	ldr	r0, [pc, #176]	; 17250 <verify_monster@@Base+0x1884>
   1719c:	add	r0, pc, r0
   171a0:	ldr	r1, [pc, #172]	; 17254 <verify_monster@@Base+0x1888>
   171a4:	add	r1, pc, r1
   171a8:	ldr	r2, [pc, #168]	; 17258 <verify_monster@@Base+0x188c>
   171ac:	add	r3, pc, r2
   171b0:	movw	r2, #698	; 0x2ba
   171b4:	bl	12e68 <__assert_fail@plt>
   171b8:	mov	r0, #1
   171bc:	strh	r0, [fp, #-8]
   171c0:	ldr	r0, [fp, #-4]
   171c4:	str	r0, [sp, #8]
   171c8:	bl	2344c <main@@Base+0x494>
   171cc:	ldr	r1, [sp, #8]
   171d0:	sub	r0, r1, r0
   171d4:	str	r0, [sp, #12]
   171d8:	ldr	r0, [sp, #12]
   171dc:	bl	23470 <main@@Base+0x4b8>
   171e0:	ldrh	r1, [fp, #-8]
   171e4:	add	r1, r1, #3
   171e8:	lsl	r1, r1, #1
   171ec:	cmp	r0, r1
   171f0:	bcc	1720c <verify_monster@@Base+0x1840>
   171f4:	ldr	r0, [sp, #12]
   171f8:	ldrh	r1, [fp, #-8]
   171fc:	add	r0, r0, r1, lsl #1
   17200:	add	r0, r0, #4
   17204:	bl	23470 <main@@Base+0x4b8>
   17208:	strh	r0, [fp, #-6]
   1720c:	ldrh	r0, [fp, #-6]
   17210:	cmp	r0, #0
   17214:	beq	17234 <verify_monster@@Base+0x1868>
   17218:	ldr	r0, [fp, #-4]
   1721c:	ldrh	r1, [fp, #-6]
   17220:	add	r0, r0, r1
   17224:	bl	23498 <main@@Base+0x4e0>
   17228:	sxth	r0, r0
   1722c:	str	r0, [sp, #4]
   17230:	b	17240 <verify_monster@@Base+0x1874>
   17234:	movw	r0, #150	; 0x96
   17238:	str	r0, [sp, #4]
   1723c:	b	17240 <verify_monster@@Base+0x1874>
   17240:	ldr	r0, [sp, #4]
   17244:	sxth	r0, r0
   17248:	mov	sp, fp
   1724c:	pop	{fp, pc}
   17250:	andeq	ip, r1, r1, asr lr
   17254:	andeq	ip, r1, pc, ror #28
   17258:	andeq	sp, r1, r4, asr r9
   1725c:	push	{fp, lr}
   17260:	mov	fp, sp
   17264:	sub	sp, sp, #16
   17268:	str	r0, [fp, #-4]
   1726c:	movw	r0, #0
   17270:	strh	r0, [fp, #-6]
   17274:	ldr	r0, [fp, #-4]
   17278:	movw	r1, #0
   1727c:	cmp	r0, r1
   17280:	beq	1728c <verify_monster@@Base+0x18c0>
   17284:	b	17288 <verify_monster@@Base+0x18bc>
   17288:	b	172ac <verify_monster@@Base+0x18e0>
   1728c:	ldr	r0, [pc, #136]	; 1731c <verify_monster@@Base+0x1950>
   17290:	add	r0, pc, r0
   17294:	ldr	r1, [pc, #132]	; 17320 <verify_monster@@Base+0x1954>
   17298:	add	r1, pc, r1
   1729c:	ldr	r2, [pc, #128]	; 17324 <verify_monster@@Base+0x1958>
   172a0:	add	r3, pc, r2
   172a4:	movw	r2, #698	; 0x2ba
   172a8:	bl	12e68 <__assert_fail@plt>
   172ac:	mov	r0, #1
   172b0:	strh	r0, [sp, #8]
   172b4:	ldr	r0, [fp, #-4]
   172b8:	str	r0, [sp]
   172bc:	bl	2344c <main@@Base+0x494>
   172c0:	ldr	r1, [sp]
   172c4:	sub	r0, r1, r0
   172c8:	str	r0, [sp, #4]
   172cc:	ldr	r0, [sp, #4]
   172d0:	bl	23470 <main@@Base+0x4b8>
   172d4:	ldrh	r1, [sp, #8]
   172d8:	add	r1, r1, #3
   172dc:	lsl	r1, r1, #1
   172e0:	cmp	r0, r1
   172e4:	bcc	17300 <verify_monster@@Base+0x1934>
   172e8:	ldr	r0, [sp, #4]
   172ec:	ldrh	r1, [sp, #8]
   172f0:	add	r0, r0, r1, lsl #1
   172f4:	add	r0, r0, #4
   172f8:	bl	23470 <main@@Base+0x4b8>
   172fc:	strh	r0, [fp, #-6]
   17300:	ldrh	r0, [fp, #-6]
   17304:	cmp	r0, #0
   17308:	movw	r0, #0
   1730c:	movne	r0, #1
   17310:	and	r0, r0, #1
   17314:	mov	sp, fp
   17318:	pop	{fp, pc}
   1731c:	andeq	ip, r1, sp, asr sp
   17320:	andeq	ip, r1, fp, ror sp
   17324:	andeq	sp, r1, r4, lsr #17
   17328:	push	{fp, lr}
   1732c:	mov	fp, sp
   17330:	sub	sp, sp, #32
   17334:	str	r0, [fp, #-8]
   17338:	movw	r0, #0
   1733c:	strh	r0, [fp, #-14]
   17340:	ldr	r0, [fp, #-8]
   17344:	movw	r1, #0
   17348:	cmp	r0, r1
   1734c:	beq	17358 <verify_monster@@Base+0x198c>
   17350:	b	17354 <verify_monster@@Base+0x1988>
   17354:	b	17378 <verify_monster@@Base+0x19ac>
   17358:	ldr	r0, [pc, #196]	; 17424 <verify_monster@@Base+0x1a58>
   1735c:	add	r0, pc, r0
   17360:	ldr	r1, [pc, #192]	; 17428 <verify_monster@@Base+0x1a5c>
   17364:	add	r1, pc, r1
   17368:	ldr	r2, [pc, #188]	; 1742c <verify_monster@@Base+0x1a60>
   1736c:	add	r3, pc, r2
   17370:	movw	r2, #718	; 0x2ce
   17374:	bl	12e68 <__assert_fail@plt>
   17378:	mov	r0, #9
   1737c:	strh	r0, [sp, #16]
   17380:	ldr	r0, [fp, #-8]
   17384:	str	r0, [sp, #8]
   17388:	bl	2344c <main@@Base+0x494>
   1738c:	ldr	r1, [sp, #8]
   17390:	sub	r0, r1, r0
   17394:	str	r0, [sp, #12]
   17398:	ldr	r0, [sp, #12]
   1739c:	bl	23470 <main@@Base+0x4b8>
   173a0:	ldrh	r1, [sp, #16]
   173a4:	add	r1, r1, #3
   173a8:	lsl	r1, r1, #1
   173ac:	cmp	r0, r1
   173b0:	bcc	173cc <verify_monster@@Base+0x1a00>
   173b4:	ldr	r0, [sp, #12]
   173b8:	ldrh	r1, [sp, #16]
   173bc:	add	r0, r0, r1, lsl #1
   173c0:	add	r0, r0, #4
   173c4:	bl	23470 <main@@Base+0x4b8>
   173c8:	strh	r0, [fp, #-14]
   173cc:	ldrsh	r0, [fp, #-14]
   173d0:	cmp	r0, #0
   173d4:	beq	17410 <verify_monster@@Base+0x1a44>
   173d8:	ldr	r0, [fp, #-8]
   173dc:	ldrh	r1, [fp, #-14]
   173e0:	add	r0, r0, r1
   173e4:	str	r0, [fp, #-12]
   173e8:	ldr	r0, [fp, #-12]
   173ec:	add	r0, r0, #4
   173f0:	ldr	r1, [fp, #-12]
   173f4:	str	r0, [sp, #4]
   173f8:	mov	r0, r1
   173fc:	bl	23414 <main@@Base+0x45c>
   17400:	ldr	r1, [sp, #4]
   17404:	add	r0, r1, r0
   17408:	str	r0, [fp, #-4]
   1740c:	b	17418 <verify_monster@@Base+0x1a4c>
   17410:	movw	r0, #0
   17414:	str	r0, [fp, #-4]
   17418:	ldr	r0, [fp, #-4]
   1741c:	mov	sp, fp
   17420:	pop	{fp, pc}
   17424:	muleq	r1, r1, ip
   17428:	andeq	ip, r1, pc, lsr #25
   1742c:	andeq	sp, r1, r3, lsr #16
   17430:	push	{fp, lr}
   17434:	mov	fp, sp
   17438:	sub	sp, sp, #8
   1743c:	str	r0, [sp, #4]
   17440:	ldr	r0, [sp, #4]
   17444:	movw	r1, #0
   17448:	cmp	r0, r1
   1744c:	beq	17468 <verify_monster@@Base+0x1a9c>
   17450:	ldr	r0, [sp, #4]
   17454:	mvn	r1, #3
   17458:	add	r0, r0, r1
   1745c:	bl	23414 <main@@Base+0x45c>
   17460:	str	r0, [sp]
   17464:	b	17474 <verify_monster@@Base+0x1aa8>
   17468:	movw	r0, #0
   1746c:	str	r0, [sp]
   17470:	b	17474 <verify_monster@@Base+0x1aa8>
   17474:	ldr	r0, [sp]
   17478:	mov	sp, fp
   1747c:	pop	{fp, pc}
   17480:	push	{fp, lr}
   17484:	mov	fp, sp
   17488:	sub	sp, sp, #8
   1748c:	str	r0, [sp, #4]
   17490:	str	r1, [sp]
   17494:	ldr	r0, [sp, #4]
   17498:	bl	25bb8 <main@@Base+0x2c00>
   1749c:	ldr	r1, [sp]
   174a0:	cmp	r0, r1
   174a4:	bls	174b0 <verify_monster@@Base+0x1ae4>
   174a8:	b	174ac <verify_monster@@Base+0x1ae0>
   174ac:	b	174d0 <verify_monster@@Base+0x1b04>
   174b0:	ldr	r0, [pc, #44]	; 174e4 <verify_monster@@Base+0x1b18>
   174b4:	add	r0, pc, r0
   174b8:	ldr	r1, [pc, #40]	; 174e8 <verify_monster@@Base+0x1b1c>
   174bc:	add	r1, pc, r1
   174c0:	ldr	r2, [pc, #36]	; 174ec <verify_monster@@Base+0x1b20>
   174c4:	add	r3, pc, r2
   174c8:	movw	r2, #380	; 0x17c
   174cc:	bl	12e68 <__assert_fail@plt>
   174d0:	ldr	r0, [sp, #4]
   174d4:	ldr	r1, [sp]
   174d8:	add	r0, r0, r1, lsl #2
   174dc:	mov	sp, fp
   174e0:	pop	{fp, pc}
   174e4:	andeq	sp, r1, r4, asr r5
   174e8:	andeq	ip, r1, r7, asr fp
   174ec:	andeq	sp, r1, r2, lsr #14
   174f0:	push	{fp, lr}
   174f4:	mov	fp, sp
   174f8:	sub	sp, sp, #8
   174fc:	str	r0, [sp, #4]
   17500:	ldr	r0, [sp, #4]
   17504:	movw	r1, #0
   17508:	cmp	r0, r1
   1750c:	beq	17524 <verify_monster@@Base+0x1b58>
   17510:	ldr	r0, [sp, #4]
   17514:	bl	23498 <main@@Base+0x4e0>
   17518:	sxth	r0, r0
   1751c:	str	r0, [sp]
   17520:	b	17530 <verify_monster@@Base+0x1b64>
   17524:	movw	r0, #0
   17528:	str	r0, [sp]
   1752c:	b	17530 <verify_monster@@Base+0x1b64>
   17530:	ldr	r0, [sp]
   17534:	sxth	r0, r0
   17538:	mov	sp, fp
   1753c:	pop	{fp, pc}
   17540:	push	{fp, lr}
   17544:	mov	fp, sp
   17548:	sub	sp, sp, #8
   1754c:	str	r0, [sp, #4]
   17550:	ldr	r0, [sp, #4]
   17554:	movw	r1, #0
   17558:	cmp	r0, r1
   1755c:	beq	17578 <verify_monster@@Base+0x1bac>
   17560:	ldr	r0, [sp, #4]
   17564:	add	r0, r0, #2
   17568:	bl	24300 <main@@Base+0x1348>
   1756c:	sxtb	r0, r0
   17570:	str	r0, [sp]
   17574:	b	17584 <verify_monster@@Base+0x1bb8>
   17578:	movw	r0, #0
   1757c:	str	r0, [sp]
   17580:	b	17584 <verify_monster@@Base+0x1bb8>
   17584:	ldr	r0, [sp]
   17588:	sxtb	r0, r0
   1758c:	mov	sp, fp
   17590:	pop	{fp, pc}
   17594:	push	{fp, lr}
   17598:	mov	fp, sp
   1759c:	sub	sp, sp, #32
   175a0:	str	r0, [fp, #-8]
   175a4:	movw	r0, #0
   175a8:	strh	r0, [fp, #-14]
   175ac:	ldr	r0, [fp, #-8]
   175b0:	movw	r1, #0
   175b4:	cmp	r0, r1
   175b8:	beq	175c4 <verify_monster@@Base+0x1bf8>
   175bc:	b	175c0 <verify_monster@@Base+0x1bf4>
   175c0:	b	175e4 <verify_monster@@Base+0x1c18>
   175c4:	ldr	r0, [pc, #196]	; 17690 <verify_monster@@Base+0x1cc4>
   175c8:	add	r0, pc, r0
   175cc:	ldr	r1, [pc, #192]	; 17694 <verify_monster@@Base+0x1cc8>
   175d0:	add	r1, pc, r1
   175d4:	ldr	r2, [pc, #188]	; 17698 <verify_monster@@Base+0x1ccc>
   175d8:	add	r3, pc, r2
   175dc:	movw	r2, #711	; 0x2c7
   175e0:	bl	12e68 <__assert_fail@plt>
   175e4:	mov	r0, #11
   175e8:	strh	r0, [sp, #16]
   175ec:	ldr	r0, [fp, #-8]
   175f0:	str	r0, [sp, #8]
   175f4:	bl	2344c <main@@Base+0x494>
   175f8:	ldr	r1, [sp, #8]
   175fc:	sub	r0, r1, r0
   17600:	str	r0, [sp, #12]
   17604:	ldr	r0, [sp, #12]
   17608:	bl	23470 <main@@Base+0x4b8>
   1760c:	ldrh	r1, [sp, #16]
   17610:	add	r1, r1, #3
   17614:	lsl	r1, r1, #1
   17618:	cmp	r0, r1
   1761c:	bcc	17638 <verify_monster@@Base+0x1c6c>
   17620:	ldr	r0, [sp, #12]
   17624:	ldrh	r1, [sp, #16]
   17628:	add	r0, r0, r1, lsl #1
   1762c:	add	r0, r0, #4
   17630:	bl	23470 <main@@Base+0x4b8>
   17634:	strh	r0, [fp, #-14]
   17638:	ldrsh	r0, [fp, #-14]
   1763c:	cmp	r0, #0
   17640:	beq	1767c <verify_monster@@Base+0x1cb0>
   17644:	ldr	r0, [fp, #-8]
   17648:	ldrh	r1, [fp, #-14]
   1764c:	add	r0, r0, r1
   17650:	str	r0, [fp, #-12]
   17654:	ldr	r0, [fp, #-12]
   17658:	add	r0, r0, #4
   1765c:	ldr	r1, [fp, #-12]
   17660:	str	r0, [sp, #4]
   17664:	mov	r0, r1
   17668:	bl	23414 <main@@Base+0x45c>
   1766c:	ldr	r1, [sp, #4]
   17670:	add	r0, r1, r0
   17674:	str	r0, [fp, #-4]
   17678:	b	17684 <verify_monster@@Base+0x1cb8>
   1767c:	movw	r0, #0
   17680:	str	r0, [fp, #-4]
   17684:	ldr	r0, [fp, #-4]
   17688:	mov	sp, fp
   1768c:	pop	{fp, pc}
   17690:	andeq	ip, r1, r5, lsr #20
   17694:	andeq	ip, r1, r3, asr #20
   17698:	andeq	sp, r1, r9, ror #12
   1769c:	push	{fp, lr}
   176a0:	mov	fp, sp
   176a4:	sub	sp, sp, #8
   176a8:	str	r0, [sp, #4]
   176ac:	ldr	r0, [sp, #4]
   176b0:	movw	r1, #0
   176b4:	cmp	r0, r1
   176b8:	beq	176d4 <verify_monster@@Base+0x1d08>
   176bc:	ldr	r0, [sp, #4]
   176c0:	mvn	r1, #3
   176c4:	add	r0, r0, r1
   176c8:	bl	23414 <main@@Base+0x45c>
   176cc:	str	r0, [sp]
   176d0:	b	176e0 <verify_monster@@Base+0x1d14>
   176d4:	movw	r0, #0
   176d8:	str	r0, [sp]
   176dc:	b	176e0 <verify_monster@@Base+0x1d14>
   176e0:	ldr	r0, [sp]
   176e4:	mov	sp, fp
   176e8:	pop	{fp, pc}
   176ec:	push	{fp, lr}
   176f0:	mov	fp, sp
   176f4:	sub	sp, sp, #16
   176f8:	str	r0, [fp, #-4]
   176fc:	str	r1, [sp, #8]
   17700:	ldr	r0, [fp, #-4]
   17704:	ldr	r1, [sp, #8]
   17708:	add	r0, r0, r1, lsl #2
   1770c:	str	r0, [sp, #4]
   17710:	ldr	r0, [fp, #-4]
   17714:	bl	25bb8 <main@@Base+0x2c00>
   17718:	ldr	r1, [sp, #8]
   1771c:	cmp	r0, r1
   17720:	bls	1772c <verify_monster@@Base+0x1d60>
   17724:	b	17728 <verify_monster@@Base+0x1d5c>
   17728:	b	1774c <verify_monster@@Base+0x1d80>
   1772c:	ldr	r0, [pc, #60]	; 17770 <verify_monster@@Base+0x1da4>
   17730:	add	r0, pc, r0
   17734:	ldr	r1, [pc, #56]	; 17774 <verify_monster@@Base+0x1da8>
   17738:	add	r1, pc, r1
   1773c:	ldr	r2, [pc, #52]	; 17778 <verify_monster@@Base+0x1dac>
   17740:	add	r3, pc, r2
   17744:	movw	r2, #693	; 0x2b5
   17748:	bl	12e68 <__assert_fail@plt>
   1774c:	ldr	r0, [sp, #4]
   17750:	ldr	r1, [sp, #4]
   17754:	str	r0, [sp]
   17758:	mov	r0, r1
   1775c:	bl	23414 <main@@Base+0x45c>
   17760:	ldr	r1, [sp]
   17764:	add	r0, r1, r0
   17768:	mov	sp, fp
   1776c:	pop	{fp, pc}
   17770:	ldrdeq	sp, [r1], -r8
   17774:	ldrdeq	ip, [r1], -fp
   17778:	andeq	sp, r1, r7, ror #10
   1777c:	push	{fp, lr}
   17780:	mov	fp, sp
   17784:	sub	sp, sp, #32
   17788:	str	r0, [fp, #-8]
   1778c:	movw	r0, #0
   17790:	strh	r0, [fp, #-14]
   17794:	ldr	r0, [fp, #-8]
   17798:	movw	r1, #0
   1779c:	cmp	r0, r1
   177a0:	beq	177ac <verify_monster@@Base+0x1de0>
   177a4:	b	177a8 <verify_monster@@Base+0x1ddc>
   177a8:	b	177cc <verify_monster@@Base+0x1e00>
   177ac:	ldr	r0, [pc, #196]	; 17878 <verify_monster@@Base+0x1eac>
   177b0:	add	r0, pc, r0
   177b4:	ldr	r1, [pc, #192]	; 1787c <verify_monster@@Base+0x1eb0>
   177b8:	add	r1, pc, r1
   177bc:	ldr	r2, [pc, #188]	; 17880 <verify_monster@@Base+0x1eb4>
   177c0:	add	r3, pc, r2
   177c4:	movw	r2, #712	; 0x2c8
   177c8:	bl	12e68 <__assert_fail@plt>
   177cc:	mov	r0, #10
   177d0:	strh	r0, [sp, #16]
   177d4:	ldr	r0, [fp, #-8]
   177d8:	str	r0, [sp, #8]
   177dc:	bl	2344c <main@@Base+0x494>
   177e0:	ldr	r1, [sp, #8]
   177e4:	sub	r0, r1, r0
   177e8:	str	r0, [sp, #12]
   177ec:	ldr	r0, [sp, #12]
   177f0:	bl	23470 <main@@Base+0x4b8>
   177f4:	ldrh	r1, [sp, #16]
   177f8:	add	r1, r1, #3
   177fc:	lsl	r1, r1, #1
   17800:	cmp	r0, r1
   17804:	bcc	17820 <verify_monster@@Base+0x1e54>
   17808:	ldr	r0, [sp, #12]
   1780c:	ldrh	r1, [sp, #16]
   17810:	add	r0, r0, r1, lsl #1
   17814:	add	r0, r0, #4
   17818:	bl	23470 <main@@Base+0x4b8>
   1781c:	strh	r0, [fp, #-14]
   17820:	ldrsh	r0, [fp, #-14]
   17824:	cmp	r0, #0
   17828:	beq	17864 <verify_monster@@Base+0x1e98>
   1782c:	ldr	r0, [fp, #-8]
   17830:	ldrh	r1, [fp, #-14]
   17834:	add	r0, r0, r1
   17838:	str	r0, [fp, #-12]
   1783c:	ldr	r0, [fp, #-12]
   17840:	add	r0, r0, #4
   17844:	ldr	r1, [fp, #-12]
   17848:	str	r0, [sp, #4]
   1784c:	mov	r0, r1
   17850:	bl	23414 <main@@Base+0x45c>
   17854:	ldr	r1, [sp, #4]
   17858:	add	r0, r1, r0
   1785c:	str	r0, [fp, #-4]
   17860:	b	1786c <verify_monster@@Base+0x1ea0>
   17864:	movw	r0, #0
   17868:	str	r0, [fp, #-4]
   1786c:	ldr	r0, [fp, #-4]
   17870:	mov	sp, fp
   17874:	pop	{fp, pc}
   17878:	andeq	ip, r1, sp, lsr r8
   1787c:	andeq	ip, r1, fp, asr r8
   17880:	andeq	sp, r1, sl, asr #10
   17884:	push	{fp, lr}
   17888:	mov	fp, sp
   1788c:	sub	sp, sp, #8
   17890:	str	r0, [sp, #4]
   17894:	ldr	r0, [sp, #4]
   17898:	movw	r1, #0
   1789c:	cmp	r0, r1
   178a0:	beq	178bc <verify_monster@@Base+0x1ef0>
   178a4:	ldr	r0, [sp, #4]
   178a8:	mvn	r1, #3
   178ac:	add	r0, r0, r1
   178b0:	bl	23414 <main@@Base+0x45c>
   178b4:	str	r0, [sp]
   178b8:	b	178c8 <verify_monster@@Base+0x1efc>
   178bc:	movw	r0, #0
   178c0:	str	r0, [sp]
   178c4:	b	178c8 <verify_monster@@Base+0x1efc>
   178c8:	ldr	r0, [sp]
   178cc:	mov	sp, fp
   178d0:	pop	{fp, pc}
   178d4:	push	{fp, lr}
   178d8:	mov	fp, sp
   178dc:	sub	sp, sp, #16
   178e0:	str	r0, [fp, #-4]
   178e4:	str	r1, [sp, #8]
   178e8:	ldr	r0, [fp, #-4]
   178ec:	ldr	r1, [sp, #8]
   178f0:	add	r0, r0, r1, lsl #2
   178f4:	str	r0, [sp, #4]
   178f8:	ldr	r0, [fp, #-4]
   178fc:	bl	25bb8 <main@@Base+0x2c00>
   17900:	ldr	r1, [sp, #8]
   17904:	cmp	r0, r1
   17908:	bls	17914 <verify_monster@@Base+0x1f48>
   1790c:	b	17910 <verify_monster@@Base+0x1f44>
   17910:	b	17934 <verify_monster@@Base+0x1f68>
   17914:	ldr	r0, [pc, #64]	; 1795c <verify_monster@@Base+0x1f90>
   17918:	add	r0, pc, r0
   1791c:	ldr	r1, [pc, #60]	; 17960 <verify_monster@@Base+0x1f94>
   17920:	add	r1, pc, r1
   17924:	ldr	r2, [pc, #56]	; 17964 <verify_monster@@Base+0x1f98>
   17928:	add	r3, pc, r2
   1792c:	movw	r2, #108	; 0x6c
   17930:	bl	12e68 <__assert_fail@plt>
   17934:	ldr	r0, [sp, #4]
   17938:	ldr	r1, [sp, #4]
   1793c:	str	r0, [sp]
   17940:	mov	r0, r1
   17944:	bl	23414 <main@@Base+0x45c>
   17948:	ldr	r1, [sp]
   1794c:	add	r0, r1, r0
   17950:	add	r0, r0, #4
   17954:	mov	sp, fp
   17958:	pop	{fp, pc}
   1795c:	strdeq	sp, [r1], -r0
   17960:	andeq	sp, r1, pc, lsl r1
   17964:	andeq	sp, r1, r4, asr #8
   17968:	push	{fp, lr}
   1796c:	mov	fp, sp
   17970:	sub	sp, sp, #16
   17974:	str	r0, [fp, #-4]
   17978:	movw	r0, #0
   1797c:	strh	r0, [fp, #-6]
   17980:	ldr	r0, [fp, #-4]
   17984:	movw	r1, #0
   17988:	cmp	r0, r1
   1798c:	beq	17998 <verify_monster@@Base+0x1fcc>
   17990:	b	17994 <verify_monster@@Base+0x1fc8>
   17994:	b	179b8 <verify_monster@@Base+0x1fec>
   17998:	ldr	r0, [pc, #136]	; 17a28 <verify_monster@@Base+0x205c>
   1799c:	add	r0, pc, r0
   179a0:	ldr	r1, [pc, #132]	; 17a2c <verify_monster@@Base+0x2060>
   179a4:	add	r1, pc, r1
   179a8:	ldr	r2, [pc, #128]	; 17a30 <verify_monster@@Base+0x2064>
   179ac:	add	r3, pc, r2
   179b0:	movw	r2, #714	; 0x2ca
   179b4:	bl	12e68 <__assert_fail@plt>
   179b8:	mov	r0, #24
   179bc:	strh	r0, [sp, #8]
   179c0:	ldr	r0, [fp, #-4]
   179c4:	str	r0, [sp]
   179c8:	bl	2344c <main@@Base+0x494>
   179cc:	ldr	r1, [sp]
   179d0:	sub	r0, r1, r0
   179d4:	str	r0, [sp, #4]
   179d8:	ldr	r0, [sp, #4]
   179dc:	bl	23470 <main@@Base+0x4b8>
   179e0:	ldrh	r1, [sp, #8]
   179e4:	add	r1, r1, #3
   179e8:	lsl	r1, r1, #1
   179ec:	cmp	r0, r1
   179f0:	bcc	17a0c <verify_monster@@Base+0x2040>
   179f4:	ldr	r0, [sp, #4]
   179f8:	ldrh	r1, [sp, #8]
   179fc:	add	r0, r0, r1, lsl #1
   17a00:	add	r0, r0, #4
   17a04:	bl	23470 <main@@Base+0x4b8>
   17a08:	strh	r0, [fp, #-6]
   17a0c:	ldrh	r0, [fp, #-6]
   17a10:	cmp	r0, #0
   17a14:	movw	r0, #0
   17a18:	movne	r0, #1
   17a1c:	and	r0, r0, #1
   17a20:	mov	sp, fp
   17a24:	pop	{fp, pc}
   17a28:	andeq	ip, r1, r1, asr r6
   17a2c:	andeq	ip, r1, pc, ror #12
   17a30:	andeq	sp, r1, r1, lsl r4
   17a34:	push	{fp, lr}
   17a38:	mov	fp, sp
   17a3c:	sub	sp, sp, #32
   17a40:	str	r0, [fp, #-8]
   17a44:	movw	r0, #0
   17a48:	strh	r0, [fp, #-14]
   17a4c:	ldr	r0, [fp, #-8]
   17a50:	movw	r1, #0
   17a54:	cmp	r0, r1
   17a58:	beq	17a64 <verify_monster@@Base+0x2098>
   17a5c:	b	17a60 <verify_monster@@Base+0x2094>
   17a60:	b	17a84 <verify_monster@@Base+0x20b8>
   17a64:	ldr	r0, [pc, #196]	; 17b30 <verify_monster@@Base+0x2164>
   17a68:	add	r0, pc, r0
   17a6c:	ldr	r1, [pc, #192]	; 17b34 <verify_monster@@Base+0x2168>
   17a70:	add	r1, pc, r1
   17a74:	ldr	r2, [pc, #188]	; 17b38 <verify_monster@@Base+0x216c>
   17a78:	add	r3, pc, r2
   17a7c:	movw	r2, #714	; 0x2ca
   17a80:	bl	12e68 <__assert_fail@plt>
   17a84:	mov	r0, #24
   17a88:	strh	r0, [sp, #16]
   17a8c:	ldr	r0, [fp, #-8]
   17a90:	str	r0, [sp, #8]
   17a94:	bl	2344c <main@@Base+0x494>
   17a98:	ldr	r1, [sp, #8]
   17a9c:	sub	r0, r1, r0
   17aa0:	str	r0, [sp, #12]
   17aa4:	ldr	r0, [sp, #12]
   17aa8:	bl	23470 <main@@Base+0x4b8>
   17aac:	ldrh	r1, [sp, #16]
   17ab0:	add	r1, r1, #3
   17ab4:	lsl	r1, r1, #1
   17ab8:	cmp	r0, r1
   17abc:	bcc	17ad8 <verify_monster@@Base+0x210c>
   17ac0:	ldr	r0, [sp, #12]
   17ac4:	ldrh	r1, [sp, #16]
   17ac8:	add	r0, r0, r1, lsl #1
   17acc:	add	r0, r0, #4
   17ad0:	bl	23470 <main@@Base+0x4b8>
   17ad4:	strh	r0, [fp, #-14]
   17ad8:	ldrsh	r0, [fp, #-14]
   17adc:	cmp	r0, #0
   17ae0:	beq	17b1c <verify_monster@@Base+0x2150>
   17ae4:	ldr	r0, [fp, #-8]
   17ae8:	ldrh	r1, [fp, #-14]
   17aec:	add	r0, r0, r1
   17af0:	str	r0, [fp, #-12]
   17af4:	ldr	r0, [fp, #-12]
   17af8:	add	r0, r0, #4
   17afc:	ldr	r1, [fp, #-12]
   17b00:	str	r0, [sp, #4]
   17b04:	mov	r0, r1
   17b08:	bl	23414 <main@@Base+0x45c>
   17b0c:	ldr	r1, [sp, #4]
   17b10:	add	r0, r1, r0
   17b14:	str	r0, [fp, #-4]
   17b18:	b	17b24 <verify_monster@@Base+0x2158>
   17b1c:	movw	r0, #0
   17b20:	str	r0, [fp, #-4]
   17b24:	ldr	r0, [fp, #-4]
   17b28:	mov	sp, fp
   17b2c:	pop	{fp, pc}
   17b30:	andeq	ip, r1, r5, lsl #11
   17b34:	andeq	ip, r1, r3, lsr #11
   17b38:	muleq	r1, ip, r3
   17b3c:	push	{fp, lr}
   17b40:	mov	fp, sp
   17b44:	sub	sp, sp, #8
   17b48:	str	r0, [sp, #4]
   17b4c:	ldr	r0, [sp, #4]
   17b50:	bl	25bb8 <main@@Base+0x2c00>
   17b54:	mov	sp, fp
   17b58:	pop	{fp, pc}
   17b5c:	push	{fp, lr}
   17b60:	mov	fp, sp
   17b64:	sub	sp, sp, #8
   17b68:	str	r0, [sp, #4]
   17b6c:	str	r1, [sp]
   17b70:	ldr	r0, [sp, #4]
   17b74:	bl	25bb8 <main@@Base+0x2c00>
   17b78:	ldr	r1, [sp]
   17b7c:	cmp	r0, r1
   17b80:	bls	17b8c <verify_monster@@Base+0x21c0>
   17b84:	b	17b88 <verify_monster@@Base+0x21bc>
   17b88:	b	17bac <verify_monster@@Base+0x21e0>
   17b8c:	ldr	r0, [pc, #52]	; 17bc8 <verify_monster@@Base+0x21fc>
   17b90:	add	r0, pc, r0
   17b94:	ldr	r1, [pc, #48]	; 17bcc <verify_monster@@Base+0x2200>
   17b98:	add	r1, pc, r1
   17b9c:	ldr	r2, [pc, #44]	; 17bd0 <verify_monster@@Base+0x2204>
   17ba0:	add	r3, pc, r2
   17ba4:	movw	r2, #394	; 0x18a
   17ba8:	bl	12e68 <__assert_fail@plt>
   17bac:	ldr	r0, [sp, #4]
   17bb0:	ldr	r1, [sp]
   17bb4:	add	r0, r0, r1
   17bb8:	bl	25c08 <main@@Base+0x2c50>
   17bbc:	and	r0, r0, #255	; 0xff
   17bc0:	mov	sp, fp
   17bc4:	pop	{fp, pc}
   17bc8:	andeq	ip, r1, r8, ror lr
   17bcc:	andeq	ip, r1, r7, lsr #29
   17bd0:	ldrdeq	sp, [r1], -r4
   17bd4:	push	{fp, lr}
   17bd8:	mov	fp, sp
   17bdc:	sub	sp, sp, #24
   17be0:	str	r0, [fp, #-4]
   17be4:	movw	r0, #0
   17be8:	strh	r0, [fp, #-6]
   17bec:	ldr	r0, [fp, #-4]
   17bf0:	movw	r1, #0
   17bf4:	cmp	r0, r1
   17bf8:	beq	17c04 <verify_monster@@Base+0x2238>
   17bfc:	b	17c00 <verify_monster@@Base+0x2234>
   17c00:	b	17c24 <verify_monster@@Base+0x2258>
   17c04:	ldr	r0, [pc, #176]	; 17cbc <verify_monster@@Base+0x22f0>
   17c08:	add	r0, pc, r0
   17c0c:	ldr	r1, [pc, #172]	; 17cc0 <verify_monster@@Base+0x22f4>
   17c10:	add	r1, pc, r1
   17c14:	ldr	r2, [pc, #168]	; 17cc4 <verify_monster@@Base+0x22f8>
   17c18:	add	r3, pc, r2
   17c1c:	movw	r2, #717	; 0x2cd
   17c20:	bl	12e68 <__assert_fail@plt>
   17c24:	mov	r0, #7
   17c28:	strh	r0, [fp, #-8]
   17c2c:	ldr	r0, [fp, #-4]
   17c30:	str	r0, [sp, #8]
   17c34:	bl	2344c <main@@Base+0x494>
   17c38:	ldr	r1, [sp, #8]
   17c3c:	sub	r0, r1, r0
   17c40:	str	r0, [sp, #12]
   17c44:	ldr	r0, [sp, #12]
   17c48:	bl	23470 <main@@Base+0x4b8>
   17c4c:	ldrh	r1, [fp, #-8]
   17c50:	add	r1, r1, #3
   17c54:	lsl	r1, r1, #1
   17c58:	cmp	r0, r1
   17c5c:	bcc	17c78 <verify_monster@@Base+0x22ac>
   17c60:	ldr	r0, [sp, #12]
   17c64:	ldrh	r1, [fp, #-8]
   17c68:	add	r0, r0, r1, lsl #1
   17c6c:	add	r0, r0, #4
   17c70:	bl	23470 <main@@Base+0x4b8>
   17c74:	strh	r0, [fp, #-6]
   17c78:	ldrh	r0, [fp, #-6]
   17c7c:	cmp	r0, #0
   17c80:	beq	17ca0 <verify_monster@@Base+0x22d4>
   17c84:	ldr	r0, [fp, #-4]
   17c88:	ldrh	r1, [fp, #-6]
   17c8c:	add	r0, r0, r1
   17c90:	bl	25c44 <main@@Base+0x2c8c>
   17c94:	and	r0, r0, #255	; 0xff
   17c98:	str	r0, [sp, #4]
   17c9c:	b	17cac <verify_monster@@Base+0x22e0>
   17ca0:	movw	r0, #0
   17ca4:	str	r0, [sp, #4]
   17ca8:	b	17cac <verify_monster@@Base+0x22e0>
   17cac:	ldr	r0, [sp, #4]
   17cb0:	and	r0, r0, #255	; 0xff
   17cb4:	mov	sp, fp
   17cb8:	pop	{fp, pc}
   17cbc:	andeq	ip, r1, r5, ror #7
   17cc0:	andeq	ip, r1, r3, lsl #8
   17cc4:	andeq	sp, r1, r7, lsr #5
   17cc8:	push	{fp, lr}
   17ccc:	mov	fp, sp
   17cd0:	sub	sp, sp, #32
   17cd4:	str	r0, [fp, #-8]
   17cd8:	movw	r0, #0
   17cdc:	strh	r0, [fp, #-14]
   17ce0:	ldr	r0, [fp, #-8]
   17ce4:	movw	r1, #0
   17ce8:	cmp	r0, r1
   17cec:	beq	17cf8 <verify_monster@@Base+0x232c>
   17cf0:	b	17cf4 <verify_monster@@Base+0x2328>
   17cf4:	b	17d18 <verify_monster@@Base+0x234c>
   17cf8:	ldr	r0, [pc, #192]	; 17dc0 <verify_monster@@Base+0x23f4>
   17cfc:	add	r0, pc, r0
   17d00:	ldr	r1, [pc, #188]	; 17dc4 <verify_monster@@Base+0x23f8>
   17d04:	add	r1, pc, r1
   17d08:	ldr	r2, [pc, #184]	; 17dc8 <verify_monster@@Base+0x23fc>
   17d0c:	add	r3, pc, r2
   17d10:	movw	r2, #717	; 0x2cd
   17d14:	bl	12e68 <__assert_fail@plt>
   17d18:	mov	r0, #8
   17d1c:	strh	r0, [sp, #16]
   17d20:	ldr	r0, [fp, #-8]
   17d24:	str	r0, [sp, #8]
   17d28:	bl	2344c <main@@Base+0x494>
   17d2c:	ldr	r1, [sp, #8]
   17d30:	sub	r0, r1, r0
   17d34:	str	r0, [sp, #12]
   17d38:	ldr	r0, [sp, #12]
   17d3c:	bl	23470 <main@@Base+0x4b8>
   17d40:	ldrh	r1, [sp, #16]
   17d44:	add	r1, r1, #3
   17d48:	lsl	r1, r1, #1
   17d4c:	cmp	r0, r1
   17d50:	bcc	17d6c <verify_monster@@Base+0x23a0>
   17d54:	ldr	r0, [sp, #12]
   17d58:	ldrh	r1, [sp, #16]
   17d5c:	add	r0, r0, r1, lsl #1
   17d60:	add	r0, r0, #4
   17d64:	bl	23470 <main@@Base+0x4b8>
   17d68:	strh	r0, [fp, #-14]
   17d6c:	ldrsh	r0, [fp, #-14]
   17d70:	cmp	r0, #0
   17d74:	beq	17dac <verify_monster@@Base+0x23e0>
   17d78:	ldr	r0, [fp, #-8]
   17d7c:	ldrh	r1, [fp, #-14]
   17d80:	add	r0, r0, r1
   17d84:	str	r0, [fp, #-12]
   17d88:	ldr	r0, [fp, #-12]
   17d8c:	ldr	r1, [fp, #-12]
   17d90:	str	r0, [sp, #4]
   17d94:	mov	r0, r1
   17d98:	bl	23414 <main@@Base+0x45c>
   17d9c:	ldr	r1, [sp, #4]
   17da0:	add	r0, r1, r0
   17da4:	str	r0, [fp, #-4]
   17da8:	b	17db4 <verify_monster@@Base+0x23e8>
   17dac:	movw	r0, #0
   17db0:	str	r0, [fp, #-4]
   17db4:	ldr	r0, [fp, #-4]
   17db8:	mov	sp, fp
   17dbc:	pop	{fp, pc}
   17dc0:	strdeq	ip, [r1], -r1
   17dc4:	andeq	ip, r1, pc, lsl #6
   17dc8:	andeq	sp, r1, r4, lsl r2
   17dcc:	push	{fp, lr}
   17dd0:	mov	fp, sp
   17dd4:	sub	sp, sp, #32
   17dd8:	str	r0, [fp, #-8]
   17ddc:	movw	r0, #0
   17de0:	strh	r0, [fp, #-14]
   17de4:	ldr	r0, [fp, #-8]
   17de8:	movw	r1, #0
   17dec:	cmp	r0, r1
   17df0:	beq	17dfc <verify_monster@@Base+0x2430>
   17df4:	b	17df8 <verify_monster@@Base+0x242c>
   17df8:	b	17e1c <verify_monster@@Base+0x2450>
   17dfc:	ldr	r0, [pc, #192]	; 17ec4 <verify_monster@@Base+0x24f8>
   17e00:	add	r0, pc, r0
   17e04:	ldr	r1, [pc, #188]	; 17ec8 <verify_monster@@Base+0x24fc>
   17e08:	add	r1, pc, r1
   17e0c:	ldr	r2, [pc, #184]	; 17ecc <verify_monster@@Base+0x2500>
   17e10:	add	r3, pc, r2
   17e14:	movw	r2, #716	; 0x2cc
   17e18:	bl	12e68 <__assert_fail@plt>
   17e1c:	mov	r0, #12
   17e20:	strh	r0, [sp, #16]
   17e24:	ldr	r0, [fp, #-8]
   17e28:	str	r0, [sp, #8]
   17e2c:	bl	2344c <main@@Base+0x494>
   17e30:	ldr	r1, [sp, #8]
   17e34:	sub	r0, r1, r0
   17e38:	str	r0, [sp, #12]
   17e3c:	ldr	r0, [sp, #12]
   17e40:	bl	23470 <main@@Base+0x4b8>
   17e44:	ldrh	r1, [sp, #16]
   17e48:	add	r1, r1, #3
   17e4c:	lsl	r1, r1, #1
   17e50:	cmp	r0, r1
   17e54:	bcc	17e70 <verify_monster@@Base+0x24a4>
   17e58:	ldr	r0, [sp, #12]
   17e5c:	ldrh	r1, [sp, #16]
   17e60:	add	r0, r0, r1, lsl #1
   17e64:	add	r0, r0, #4
   17e68:	bl	23470 <main@@Base+0x4b8>
   17e6c:	strh	r0, [fp, #-14]
   17e70:	ldrsh	r0, [fp, #-14]
   17e74:	cmp	r0, #0
   17e78:	beq	17eb0 <verify_monster@@Base+0x24e4>
   17e7c:	ldr	r0, [fp, #-8]
   17e80:	ldrh	r1, [fp, #-14]
   17e84:	add	r0, r0, r1
   17e88:	str	r0, [fp, #-12]
   17e8c:	ldr	r0, [fp, #-12]
   17e90:	ldr	r1, [fp, #-12]
   17e94:	str	r0, [sp, #4]
   17e98:	mov	r0, r1
   17e9c:	bl	23414 <main@@Base+0x45c>
   17ea0:	ldr	r1, [sp, #4]
   17ea4:	add	r0, r1, r0
   17ea8:	str	r0, [fp, #-4]
   17eac:	b	17eb8 <verify_monster@@Base+0x24ec>
   17eb0:	movw	r0, #0
   17eb4:	str	r0, [fp, #-4]
   17eb8:	ldr	r0, [fp, #-4]
   17ebc:	mov	sp, fp
   17ec0:	pop	{fp, pc}
   17ec4:	andeq	ip, r1, sp, ror #3
   17ec8:	andeq	ip, r1, fp, lsl #4
   17ecc:	andeq	sp, r1, r2, ror #2
   17ed0:	push	{fp, lr}
   17ed4:	mov	fp, sp
   17ed8:	sub	sp, sp, #8
   17edc:	str	r1, [sp, #4]
   17ee0:	mov	r1, r0
   17ee4:	str	r0, [sp]
   17ee8:	mov	r0, r1
   17eec:	movw	r1, #0
   17ef0:	and	r1, r1, #255	; 0xff
   17ef4:	movw	r2, #8
   17ef8:	bl	12e2c <memset@plt>
   17efc:	ldr	r0, [sp, #4]
   17f00:	bl	17bd4 <verify_monster@@Base+0x2208>
   17f04:	ldr	r1, [sp]
   17f08:	strb	r0, [r1]
   17f0c:	ldrb	r0, [r1]
   17f10:	cmp	r0, #0
   17f14:	bne	17f1c <verify_monster@@Base+0x2550>
   17f18:	b	17f2c <verify_monster@@Base+0x2560>
   17f1c:	ldr	r0, [sp, #4]
   17f20:	bl	17cc8 <verify_monster@@Base+0x22fc>
   17f24:	ldr	r1, [sp]
   17f28:	str	r0, [r1, #4]
   17f2c:	mov	sp, fp
   17f30:	pop	{fp, pc}
   17f34:	push	{fp, lr}
   17f38:	mov	fp, sp
   17f3c:	sub	sp, sp, #24
   17f40:	str	r0, [fp, #-4]
   17f44:	movw	r0, #0
   17f48:	strh	r0, [fp, #-6]
   17f4c:	ldr	r0, [fp, #-4]
   17f50:	movw	r1, #0
   17f54:	cmp	r0, r1
   17f58:	beq	17f64 <verify_monster@@Base+0x2598>
   17f5c:	b	17f60 <verify_monster@@Base+0x2594>
   17f60:	b	17f84 <verify_monster@@Base+0x25b8>
   17f64:	ldr	r0, [pc, #176]	; 1801c <verify_monster@@Base+0x2650>
   17f68:	add	r0, pc, r0
   17f6c:	ldr	r1, [pc, #172]	; 18020 <verify_monster@@Base+0x2654>
   17f70:	add	r1, pc, r1
   17f74:	ldr	r2, [pc, #168]	; 18024 <verify_monster@@Base+0x2658>
   17f78:	add	r3, pc, r2
   17f7c:	movw	r2, #723	; 0x2d3
   17f80:	bl	12e68 <__assert_fail@plt>
   17f84:	mov	r0, #15
   17f88:	strh	r0, [fp, #-8]
   17f8c:	ldr	r0, [fp, #-4]
   17f90:	str	r0, [sp, #8]
   17f94:	bl	2344c <main@@Base+0x494>
   17f98:	ldr	r1, [sp, #8]
   17f9c:	sub	r0, r1, r0
   17fa0:	str	r0, [sp, #12]
   17fa4:	ldr	r0, [sp, #12]
   17fa8:	bl	23470 <main@@Base+0x4b8>
   17fac:	ldrh	r1, [fp, #-8]
   17fb0:	add	r1, r1, #3
   17fb4:	lsl	r1, r1, #1
   17fb8:	cmp	r0, r1
   17fbc:	bcc	17fd8 <verify_monster@@Base+0x260c>
   17fc0:	ldr	r0, [sp, #12]
   17fc4:	ldrh	r1, [fp, #-8]
   17fc8:	add	r0, r0, r1, lsl #1
   17fcc:	add	r0, r0, #4
   17fd0:	bl	23470 <main@@Base+0x4b8>
   17fd4:	strh	r0, [fp, #-6]
   17fd8:	ldrh	r0, [fp, #-6]
   17fdc:	cmp	r0, #0
   17fe0:	beq	18000 <verify_monster@@Base+0x2634>
   17fe4:	ldr	r0, [fp, #-4]
   17fe8:	ldrh	r1, [fp, #-6]
   17fec:	add	r0, r0, r1
   17ff0:	bl	25c08 <main@@Base+0x2c50>
   17ff4:	and	r0, r0, #255	; 0xff
   17ff8:	str	r0, [sp, #4]
   17ffc:	b	1800c <verify_monster@@Base+0x2640>
   18000:	movw	r0, #1
   18004:	str	r0, [sp, #4]
   18008:	b	1800c <verify_monster@@Base+0x2640>
   1800c:	ldr	r0, [sp, #4]
   18010:	and	r0, r0, #255	; 0xff
   18014:	mov	sp, fp
   18018:	pop	{fp, pc}
   1801c:	andeq	ip, r1, r5, lsl #1
   18020:	andeq	ip, r1, r3, lsr #1
   18024:	andeq	sp, r1, r6, asr r0
   18028:	push	{fp, lr}
   1802c:	mov	fp, sp
   18030:	sub	sp, sp, #16
   18034:	str	r0, [fp, #-4]
   18038:	movw	r0, #0
   1803c:	strh	r0, [fp, #-6]
   18040:	ldr	r0, [fp, #-4]
   18044:	movw	r1, #0
   18048:	cmp	r0, r1
   1804c:	beq	18058 <verify_monster@@Base+0x268c>
   18050:	b	18054 <verify_monster@@Base+0x2688>
   18054:	b	18078 <verify_monster@@Base+0x26ac>
   18058:	ldr	r0, [pc, #136]	; 180e8 <verify_monster@@Base+0x271c>
   1805c:	add	r0, pc, r0
   18060:	ldr	r1, [pc, #132]	; 180ec <verify_monster@@Base+0x2720>
   18064:	add	r1, pc, r1
   18068:	ldr	r2, [pc, #128]	; 180f0 <verify_monster@@Base+0x2724>
   1806c:	add	r3, pc, r2
   18070:	movw	r2, #722	; 0x2d2
   18074:	bl	12e68 <__assert_fail@plt>
   18078:	mov	r0, #14
   1807c:	strh	r0, [sp, #8]
   18080:	ldr	r0, [fp, #-4]
   18084:	str	r0, [sp]
   18088:	bl	2344c <main@@Base+0x494>
   1808c:	ldr	r1, [sp]
   18090:	sub	r0, r1, r0
   18094:	str	r0, [sp, #4]
   18098:	ldr	r0, [sp, #4]
   1809c:	bl	23470 <main@@Base+0x4b8>
   180a0:	ldrh	r1, [sp, #8]
   180a4:	add	r1, r1, #3
   180a8:	lsl	r1, r1, #1
   180ac:	cmp	r0, r1
   180b0:	bcc	180cc <verify_monster@@Base+0x2700>
   180b4:	ldr	r0, [sp, #4]
   180b8:	ldrh	r1, [sp, #8]
   180bc:	add	r0, r0, r1, lsl #1
   180c0:	add	r0, r0, #4
   180c4:	bl	23470 <main@@Base+0x4b8>
   180c8:	strh	r0, [fp, #-6]
   180cc:	ldrh	r0, [fp, #-6]
   180d0:	cmp	r0, #0
   180d4:	movw	r0, #0
   180d8:	movne	r0, #1
   180dc:	and	r0, r0, #1
   180e0:	mov	sp, fp
   180e4:	pop	{fp, pc}
   180e8:	muleq	r1, r1, pc	; <UNPREDICTABLE>
   180ec:	andeq	fp, r1, pc, lsr #31
   180f0:			; <UNDEFINED> instruction: 0x0001cfb5
   180f4:	push	{fp, lr}
   180f8:	mov	fp, sp
   180fc:	sub	sp, sp, #32
   18100:	str	r0, [fp, #-8]
   18104:	movw	r0, #0
   18108:	strh	r0, [fp, #-14]
   1810c:	ldr	r0, [fp, #-8]
   18110:	movw	r1, #0
   18114:	cmp	r0, r1
   18118:	beq	18124 <verify_monster@@Base+0x2758>
   1811c:	b	18120 <verify_monster@@Base+0x2754>
   18120:	b	18144 <verify_monster@@Base+0x2778>
   18124:	ldr	r0, [pc, #192]	; 181ec <verify_monster@@Base+0x2820>
   18128:	add	r0, pc, r0
   1812c:	ldr	r1, [pc, #188]	; 181f0 <verify_monster@@Base+0x2824>
   18130:	add	r1, pc, r1
   18134:	ldr	r2, [pc, #184]	; 181f4 <verify_monster@@Base+0x2828>
   18138:	add	r3, pc, r2
   1813c:	movw	r2, #722	; 0x2d2
   18140:	bl	12e68 <__assert_fail@plt>
   18144:	mov	r0, #14
   18148:	strh	r0, [sp, #16]
   1814c:	ldr	r0, [fp, #-8]
   18150:	str	r0, [sp, #8]
   18154:	bl	2344c <main@@Base+0x494>
   18158:	ldr	r1, [sp, #8]
   1815c:	sub	r0, r1, r0
   18160:	str	r0, [sp, #12]
   18164:	ldr	r0, [sp, #12]
   18168:	bl	23470 <main@@Base+0x4b8>
   1816c:	ldrh	r1, [sp, #16]
   18170:	add	r1, r1, #3
   18174:	lsl	r1, r1, #1
   18178:	cmp	r0, r1
   1817c:	bcc	18198 <verify_monster@@Base+0x27cc>
   18180:	ldr	r0, [sp, #12]
   18184:	ldrh	r1, [sp, #16]
   18188:	add	r0, r0, r1, lsl #1
   1818c:	add	r0, r0, #4
   18190:	bl	23470 <main@@Base+0x4b8>
   18194:	strh	r0, [fp, #-14]
   18198:	ldrsh	r0, [fp, #-14]
   1819c:	cmp	r0, #0
   181a0:	beq	181d8 <verify_monster@@Base+0x280c>
   181a4:	ldr	r0, [fp, #-8]
   181a8:	ldrh	r1, [fp, #-14]
   181ac:	add	r0, r0, r1
   181b0:	str	r0, [fp, #-12]
   181b4:	ldr	r0, [fp, #-12]
   181b8:	ldr	r1, [fp, #-12]
   181bc:	str	r0, [sp, #4]
   181c0:	mov	r0, r1
   181c4:	bl	23414 <main@@Base+0x45c>
   181c8:	ldr	r1, [sp, #4]
   181cc:	add	r0, r1, r0
   181d0:	str	r0, [fp, #-4]
   181d4:	b	181e0 <verify_monster@@Base+0x2814>
   181d8:	movw	r0, #0
   181dc:	str	r0, [fp, #-4]
   181e0:	ldr	r0, [fp, #-4]
   181e4:	mov	sp, fp
   181e8:	pop	{fp, pc}
   181ec:	andeq	fp, r1, r5, asr #29
   181f0:	andeq	fp, r1, r3, ror #29
   181f4:	andeq	ip, r1, r9, lsr pc
   181f8:	push	{fp, lr}
   181fc:	mov	fp, sp
   18200:	sub	sp, sp, #16
   18204:	str	r0, [fp, #-4]
   18208:	movw	r0, #0
   1820c:	strh	r0, [fp, #-6]
   18210:	ldr	r0, [fp, #-4]
   18214:	movw	r1, #0
   18218:	cmp	r0, r1
   1821c:	beq	18228 <verify_monster@@Base+0x285c>
   18220:	b	18224 <verify_monster@@Base+0x2858>
   18224:	b	18248 <verify_monster@@Base+0x287c>
   18228:	ldr	r0, [pc, #136]	; 182b8 <verify_monster@@Base+0x28ec>
   1822c:	add	r0, pc, r0
   18230:	ldr	r1, [pc, #132]	; 182bc <verify_monster@@Base+0x28f0>
   18234:	add	r1, pc, r1
   18238:	ldr	r2, [pc, #128]	; 182c0 <verify_monster@@Base+0x28f4>
   1823c:	add	r3, pc, r2
   18240:	movw	r2, #607	; 0x25f
   18244:	bl	12e68 <__assert_fail@plt>
   18248:	mov	r0, #0
   1824c:	strh	r0, [sp, #8]
   18250:	ldr	r0, [fp, #-4]
   18254:	str	r0, [sp]
   18258:	bl	2344c <main@@Base+0x494>
   1825c:	ldr	r1, [sp]
   18260:	sub	r0, r1, r0
   18264:	str	r0, [sp, #4]
   18268:	ldr	r0, [sp, #4]
   1826c:	bl	23470 <main@@Base+0x4b8>
   18270:	ldrh	r1, [sp, #8]
   18274:	add	r1, r1, #3
   18278:	lsl	r1, r1, #1
   1827c:	cmp	r0, r1
   18280:	bcc	1829c <verify_monster@@Base+0x28d0>
   18284:	ldr	r0, [sp, #4]
   18288:	ldrh	r1, [sp, #8]
   1828c:	add	r0, r0, r1, lsl #1
   18290:	add	r0, r0, #4
   18294:	bl	23470 <main@@Base+0x4b8>
   18298:	strh	r0, [fp, #-6]
   1829c:	ldrh	r0, [fp, #-6]
   182a0:	cmp	r0, #0
   182a4:	movw	r0, #0
   182a8:	movne	r0, #1
   182ac:	and	r0, r0, #1
   182b0:	mov	sp, fp
   182b4:	pop	{fp, pc}
   182b8:	andeq	fp, r1, r1, asr #27
   182bc:	ldrdeq	fp, [r1], -pc	; <UNPREDICTABLE>
   182c0:	muleq	r1, r2, lr
   182c4:	push	{fp, lr}
   182c8:	mov	fp, sp
   182cc:	sub	sp, sp, #16
   182d0:	str	r0, [fp, #-4]
   182d4:	movw	r0, #0
   182d8:	strh	r0, [fp, #-6]
   182dc:	ldr	r0, [fp, #-4]
   182e0:	movw	r1, #0
   182e4:	cmp	r0, r1
   182e8:	beq	182f4 <verify_monster@@Base+0x2928>
   182ec:	b	182f0 <verify_monster@@Base+0x2924>
   182f0:	b	18314 <verify_monster@@Base+0x2948>
   182f4:	ldr	r0, [pc, #136]	; 18384 <verify_monster@@Base+0x29b8>
   182f8:	add	r0, pc, r0
   182fc:	ldr	r1, [pc, #132]	; 18388 <verify_monster@@Base+0x29bc>
   18300:	add	r1, pc, r1
   18304:	ldr	r2, [pc, #128]	; 1838c <verify_monster@@Base+0x29c0>
   18308:	add	r3, pc, r2
   1830c:	movw	r2, #608	; 0x260
   18310:	bl	12e68 <__assert_fail@plt>
   18314:	mov	r0, #1
   18318:	strh	r0, [sp, #8]
   1831c:	ldr	r0, [fp, #-4]
   18320:	str	r0, [sp]
   18324:	bl	2344c <main@@Base+0x494>
   18328:	ldr	r1, [sp]
   1832c:	sub	r0, r1, r0
   18330:	str	r0, [sp, #4]
   18334:	ldr	r0, [sp, #4]
   18338:	bl	23470 <main@@Base+0x4b8>
   1833c:	ldrh	r1, [sp, #8]
   18340:	add	r1, r1, #3
   18344:	lsl	r1, r1, #1
   18348:	cmp	r0, r1
   1834c:	bcc	18368 <verify_monster@@Base+0x299c>
   18350:	ldr	r0, [sp, #4]
   18354:	ldrh	r1, [sp, #8]
   18358:	add	r0, r0, r1, lsl #1
   1835c:	add	r0, r0, #4
   18360:	bl	23470 <main@@Base+0x4b8>
   18364:	strh	r0, [fp, #-6]
   18368:	ldrh	r0, [fp, #-6]
   1836c:	cmp	r0, #0
   18370:	movw	r0, #0
   18374:	movne	r0, #1
   18378:	and	r0, r0, #1
   1837c:	mov	sp, fp
   18380:	pop	{fp, pc}
   18384:	strdeq	fp, [r1], -r5
   18388:	andeq	fp, r1, r3, lsl sp
   1838c:	andeq	ip, r1, r9, lsl #28
   18390:	push	{fp, lr}
   18394:	mov	fp, sp
   18398:	sub	sp, sp, #16
   1839c:	str	r0, [fp, #-4]
   183a0:	movw	r0, #0
   183a4:	strh	r0, [fp, #-6]
   183a8:	ldr	r0, [fp, #-4]
   183ac:	movw	r1, #0
   183b0:	cmp	r0, r1
   183b4:	beq	183c0 <verify_monster@@Base+0x29f4>
   183b8:	b	183bc <verify_monster@@Base+0x29f0>
   183bc:	b	183e0 <verify_monster@@Base+0x2a14>
   183c0:	ldr	r0, [pc, #136]	; 18450 <verify_monster@@Base+0x2a84>
   183c4:	add	r0, pc, r0
   183c8:	ldr	r1, [pc, #132]	; 18454 <verify_monster@@Base+0x2a88>
   183cc:	add	r1, pc, r1
   183d0:	ldr	r2, [pc, #128]	; 18458 <verify_monster@@Base+0x2a8c>
   183d4:	add	r3, pc, r2
   183d8:	movw	r2, #609	; 0x261
   183dc:	bl	12e68 <__assert_fail@plt>
   183e0:	mov	r0, #2
   183e4:	strh	r0, [sp, #8]
   183e8:	ldr	r0, [fp, #-4]
   183ec:	str	r0, [sp]
   183f0:	bl	2344c <main@@Base+0x494>
   183f4:	ldr	r1, [sp]
   183f8:	sub	r0, r1, r0
   183fc:	str	r0, [sp, #4]
   18400:	ldr	r0, [sp, #4]
   18404:	bl	23470 <main@@Base+0x4b8>
   18408:	ldrh	r1, [sp, #8]
   1840c:	add	r1, r1, #3
   18410:	lsl	r1, r1, #1
   18414:	cmp	r0, r1
   18418:	bcc	18434 <verify_monster@@Base+0x2a68>
   1841c:	ldr	r0, [sp, #4]
   18420:	ldrh	r1, [sp, #8]
   18424:	add	r0, r0, r1, lsl #1
   18428:	add	r0, r0, #4
   1842c:	bl	23470 <main@@Base+0x4b8>
   18430:	strh	r0, [fp, #-6]
   18434:	ldrh	r0, [fp, #-6]
   18438:	cmp	r0, #0
   1843c:	movw	r0, #0
   18440:	movne	r0, #1
   18444:	and	r0, r0, #1
   18448:	mov	sp, fp
   1844c:	pop	{fp, pc}
   18450:	andeq	fp, r1, r9, lsr #24
   18454:	andeq	fp, r1, r7, asr #24
   18458:	andeq	ip, r1, r1, lsl #27

0001845c <gen_monster@@Base>:
   1845c:	push	{r4, r5, fp, lr}
   18460:	add	fp, sp, #8
   18464:	sub	sp, sp, #328	; 0x148
   18468:	ldr	r2, [pc, #1980]	; 18c2c <gen_monster@@Base+0x7d0>
   1846c:	add	r2, pc, r2
   18470:	ldr	r3, [pc, #1976]	; 18c30 <gen_monster@@Base+0x7d4>
   18474:	add	r3, pc, r3
   18478:	str	r0, [fp, #-12]
   1847c:	str	r1, [fp, #-16]
   18480:	ldrb	r0, [r3]
   18484:	strb	r0, [fp, #-26]	; 0xffffffe6
   18488:	ldrb	r0, [r3, #1]
   1848c:	strb	r0, [fp, #-25]	; 0xffffffe7
   18490:	ldrb	r0, [r3, #2]
   18494:	strb	r0, [fp, #-24]	; 0xffffffe8
   18498:	ldrb	r0, [r3, #3]
   1849c:	strb	r0, [fp, #-23]	; 0xffffffe9
   184a0:	ldrb	r0, [r3, #4]
   184a4:	strb	r0, [fp, #-22]	; 0xffffffea
   184a8:	ldrb	r0, [r3, #5]
   184ac:	strb	r0, [fp, #-21]	; 0xffffffeb
   184b0:	ldrb	r0, [r3, #6]
   184b4:	strb	r0, [fp, #-20]	; 0xffffffec
   184b8:	ldrb	r0, [r3, #7]
   184bc:	strb	r0, [fp, #-19]	; 0xffffffed
   184c0:	ldrb	r0, [r3, #8]
   184c4:	strb	r0, [fp, #-18]	; 0xffffffee
   184c8:	ldrb	r0, [r3, #9]
   184cc:	strb	r0, [fp, #-17]	; 0xffffffef
   184d0:	ldrb	r0, [r2]
   184d4:	strb	r0, [fp, #-80]	; 0xffffffb0
   184d8:	ldrb	r0, [r2, #1]
   184dc:	strb	r0, [fp, #-79]	; 0xffffffb1
   184e0:	ldrb	r0, [r2, #2]
   184e4:	strb	r0, [fp, #-78]	; 0xffffffb2
   184e8:	ldrb	r0, [r2, #3]
   184ec:	strb	r0, [fp, #-77]	; 0xffffffb3
   184f0:	ldr	r0, [fp, #-12]
   184f4:	bl	286d4 <flatcc_builder_reset@@Base>
   184f8:	ldr	r1, [fp, #-16]
   184fc:	cmp	r1, #0
   18500:	beq	18510 <gen_monster@@Base+0xb4>
   18504:	ldr	r0, [fp, #-12]
   18508:	bl	18c8c <gen_monster@@Base+0x830>
   1850c:	b	18518 <gen_monster@@Base+0xbc>
   18510:	ldr	r0, [fp, #-12]
   18514:	bl	18cdc <gen_monster@@Base+0x880>
   18518:	ldr	r0, [fp, #-12]
   1851c:	movw	r1, #80	; 0x50
   18520:	sxth	r1, r1
   18524:	bl	18d2c <gen_monster@@Base+0x8d0>
   18528:	ldr	r1, [fp, #-12]
   1852c:	str	r0, [fp, #-108]	; 0xffffff94
   18530:	mov	r0, r1
   18534:	bl	18db0 <gen_monster@@Base+0x954>
   18538:	vldr	s0, [pc, #928]	; 188e0 <gen_monster@@Base+0x484>
   1853c:	str	r0, [fp, #-32]	; 0xffffffe0
   18540:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18544:	vmov.f32	s2, #112	; 0x3f800000  1.0
   18548:	vstr	s2, [r0]
   1854c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18550:	vmov.f32	s2, #0	; 0x40000000  2.0
   18554:	vstr	s2, [r0, #4]
   18558:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1855c:	vstr	s0, [r0, #8]
   18560:	ldr	r0, [fp, #-12]
   18564:	bl	18de0 <gen_monster@@Base+0x984>
   18568:	ldr	r1, [pc, #1732]	; 18c34 <gen_monster@@Base+0x7d8>
   1856c:	add	r1, pc, r1
   18570:	ldr	r2, [fp, #-12]
   18574:	str	r0, [fp, #-112]	; 0xffffff90
   18578:	mov	r0, r2
   1857c:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   18580:	ldr	r1, [fp, #-12]
   18584:	str	r0, [fp, #-116]	; 0xffffff8c
   18588:	mov	r0, r1
   1858c:	movw	r1, #2
   18590:	sxtb	r1, r1
   18594:	bl	18df4 <gen_monster@@Base+0x998>
   18598:	sub	r1, fp, #26
   1859c:	ldr	r2, [fp, #-12]
   185a0:	str	r0, [fp, #-120]	; 0xffffff88
   185a4:	mov	r0, r2
   185a8:	movw	r2, #10
   185ac:	bl	18e74 <gen_monster@@Base+0xa18>
   185b0:	ldr	r1, [fp, #-12]
   185b4:	str	r0, [fp, #-124]	; 0xffffff84
   185b8:	mov	r0, r1
   185bc:	bl	18ecc <gen_monster@@Base+0xa70>
   185c0:	ldr	r1, [fp, #-12]
   185c4:	str	r0, [fp, #-128]	; 0xffffff80
   185c8:	mov	r0, r1
   185cc:	movw	r1, #1
   185d0:	bl	18eec <gen_monster@@Base+0xa90>
   185d4:	str	r0, [fp, #-36]	; 0xffffffdc
   185d8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   185dc:	movw	r1, #16
   185e0:	strh	r1, [r0]
   185e4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   185e8:	movw	r1, #32
   185ec:	strb	r1, [r0, #2]
   185f0:	ldr	r0, [fp, #-12]
   185f4:	movw	r1, #2
   185f8:	bl	18eec <gen_monster@@Base+0xa90>
   185fc:	str	r0, [fp, #-36]	; 0xffffffdc
   18600:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18604:	movw	r1, #48	; 0x30
   18608:	strh	r1, [r0]
   1860c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18610:	movw	r1, #64	; 0x40
   18614:	strb	r1, [r0, #2]
   18618:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1861c:	movw	r1, #80	; 0x50
   18620:	strh	r1, [r0, #4]
   18624:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18628:	movw	r1, #96	; 0x60
   1862c:	strb	r1, [r0, #6]
   18630:	ldr	r0, [fp, #-12]
   18634:	movw	r1, #112	; 0x70
   18638:	sxth	r1, r1
   1863c:	movw	r2, #128	; 0x80
   18640:	sxtb	r2, r2
   18644:	bl	18f14 <gen_monster@@Base+0xab8>
   18648:	movw	r1, #400	; 0x190
   1864c:	strh	r1, [fp, #-40]	; 0xffffffd8
   18650:	movw	r1, #145	; 0x91
   18654:	strb	r1, [fp, #-38]	; 0xffffffda
   18658:	ldr	r1, [fp, #-12]
   1865c:	str	r0, [fp, #-132]	; 0xffffff7c
   18660:	mov	r0, r1
   18664:	sub	r1, fp, #40	; 0x28
   18668:	bl	18f7c <gen_monster@@Base+0xb20>
   1866c:	ldr	r1, [fp, #-12]
   18670:	str	r0, [fp, #-136]	; 0xffffff78
   18674:	mov	r0, r1
   18678:	sub	r1, fp, #40	; 0x28
   1867c:	bl	18f7c <gen_monster@@Base+0xb20>
   18680:	ldr	r1, [fp, #-12]
   18684:	str	r0, [fp, #-140]	; 0xffffff74
   18688:	mov	r0, r1
   1868c:	sub	r1, fp, #40	; 0x28
   18690:	bl	18ffc <gen_monster@@Base+0xba0>
   18694:	ldr	r1, [fp, #-12]
   18698:	str	r0, [fp, #-144]	; 0xffffff70
   1869c:	mov	r0, r1
   186a0:	bl	1907c <gen_monster@@Base+0xc20>
   186a4:	cmp	r0, #7
   186a8:	bne	186b0 <gen_monster@@Base+0x254>
   186ac:	b	186d0 <gen_monster@@Base+0x274>
   186b0:	ldr	r0, [pc, #1408]	; 18c38 <gen_monster@@Base+0x7dc>
   186b4:	add	r0, pc, r0
   186b8:	ldr	r1, [pc, #1404]	; 18c3c <gen_monster@@Base+0x7e0>
   186bc:	add	r1, pc, r1
   186c0:	ldr	r2, [pc, #1400]	; 18c40 <gen_monster@@Base+0x7e4>
   186c4:	add	r3, pc, r2
   186c8:	movw	r2, #881	; 0x371
   186cc:	bl	12e68 <__assert_fail@plt>
   186d0:	ldr	r0, [fp, #-12]
   186d4:	movw	r1, #2
   186d8:	bl	1909c <gen_monster@@Base+0xc40>
   186dc:	ldr	r1, [fp, #-12]
   186e0:	str	r0, [fp, #-148]	; 0xffffff6c
   186e4:	mov	r0, r1
   186e8:	bl	1907c <gen_monster@@Base+0xc20>
   186ec:	cmp	r0, #5
   186f0:	bne	186f8 <gen_monster@@Base+0x29c>
   186f4:	b	18718 <gen_monster@@Base+0x2bc>
   186f8:	ldr	r0, [pc, #1348]	; 18c44 <gen_monster@@Base+0x7e8>
   186fc:	add	r0, pc, r0
   18700:	ldr	r1, [pc, #1344]	; 18c48 <gen_monster@@Base+0x7ec>
   18704:	add	r1, pc, r1
   18708:	ldr	r2, [pc, #1340]	; 18c4c <gen_monster@@Base+0x7f0>
   1870c:	add	r3, pc, r2
   18710:	movw	r2, #883	; 0x373
   18714:	bl	12e68 <__assert_fail@plt>
   18718:	ldr	r0, [fp, #-12]
   1871c:	bl	190c4 <gen_monster@@Base+0xc68>
   18720:	str	r0, [fp, #-36]	; 0xffffffdc
   18724:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18728:	ldrsh	r1, [r0, #16]
   1872c:	add	r1, r1, #1
   18730:	strh	r1, [r0, #16]
   18734:	ldr	r0, [fp, #-12]
   18738:	bl	190e4 <gen_monster@@Base+0xc88>
   1873c:	ldr	r1, [fp, #-12]
   18740:	str	r0, [fp, #-152]	; 0xffffff68
   18744:	mov	r0, r1
   18748:	bl	148cc <test_empty_monster@@Base+0x1d0>
   1874c:	ldr	r1, [pc, #1280]	; 18c54 <gen_monster@@Base+0x7f8>
   18750:	add	r1, pc, r1
   18754:	ldr	r2, [fp, #-12]
   18758:	str	r0, [fp, #-156]	; 0xffffff64
   1875c:	mov	r0, r2
   18760:	movw	r2, #7
   18764:	bl	19124 <gen_monster@@Base+0xcc8>
   18768:	str	r0, [fp, #-64]	; 0xffffffc0
   1876c:	ldr	r0, [fp, #-12]
   18770:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18774:	bl	19154 <gen_monster@@Base+0xcf8>
   18778:	ldr	r1, [fp, #-12]
   1877c:	str	r0, [fp, #-160]	; 0xffffff60
   18780:	mov	r0, r1
   18784:	bl	1493c <test_empty_monster@@Base+0x240>
   18788:	str	r0, [fp, #-44]	; 0xffffffd4
   1878c:	ldr	r0, [fp, #-12]
   18790:	bl	191c0 <gen_monster@@Base+0xd64>
   18794:	ldr	r1, [fp, #-12]
   18798:	str	r0, [fp, #-164]	; 0xffffff5c
   1879c:	mov	r0, r1
   187a0:	movw	r1, #2
   187a4:	bl	191e0 <gen_monster@@Base+0xd84>
   187a8:	str	r0, [fp, #-60]	; 0xffffffc4
   187ac:	ldr	r0, [fp, #-44]	; 0xffffffd4
   187b0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   187b4:	str	r0, [r1]
   187b8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   187bc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   187c0:	str	r0, [r1, #4]
   187c4:	ldr	r0, [fp, #-12]
   187c8:	bl	19208 <gen_monster@@Base+0xdac>
   187cc:	ldr	r1, [pc, #1148]	; 18c50 <gen_monster@@Base+0x7f4>
   187d0:	add	r1, pc, r1
   187d4:	ldr	r2, [fp, #-12]
   187d8:	str	r0, [sp, #168]	; 0xa8
   187dc:	mov	r0, r2
   187e0:	movw	r2, #30
   187e4:	bl	19228 <gen_monster@@Base+0xdcc>
   187e8:	ldr	r1, [fp, #-12]
   187ec:	str	r0, [sp, #164]	; 0xa4
   187f0:	mov	r0, r1
   187f4:	bl	19280 <gen_monster@@Base+0xe24>
   187f8:	ldr	r0, [r0]
   187fc:	str	r0, [fp, #-48]	; 0xffffffd0
   18800:	ldr	r0, [fp, #-12]
   18804:	movw	r1, #3
   18808:	bl	191e0 <gen_monster@@Base+0xd84>
   1880c:	str	r0, [fp, #-60]	; 0xffffffc4
   18810:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18814:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18818:	str	r0, [r1]
   1881c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18820:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18824:	str	r0, [r1, #4]
   18828:	ldr	r0, [fp, #-12]
   1882c:	movw	r1, #1
   18830:	bl	192c0 <gen_monster@@Base+0xe64>
   18834:	ldr	r1, [fp, #-12]
   18838:	str	r0, [sp, #160]	; 0xa0
   1883c:	mov	r0, r1
   18840:	bl	192e8 <gen_monster@@Base+0xe8c>
   18844:	cmp	r0, #5
   18848:	bne	18850 <gen_monster@@Base+0x3f4>
   1884c:	b	18870 <gen_monster@@Base+0x414>
   18850:	ldr	r0, [pc, #1024]	; 18c58 <gen_monster@@Base+0x7fc>
   18854:	add	r0, pc, r0
   18858:	ldr	r1, [pc, #1020]	; 18c5c <gen_monster@@Base+0x800>
   1885c:	add	r1, pc, r1
   18860:	ldr	r2, [pc, #1016]	; 18c60 <gen_monster@@Base+0x804>
   18864:	add	r3, pc, r2
   18868:	movw	r2, #923	; 0x39b
   1886c:	bl	12e68 <__assert_fail@plt>
   18870:	ldr	r0, [fp, #-12]
   18874:	bl	19208 <gen_monster@@Base+0xdac>
   18878:	ldr	r1, [pc, #996]	; 18c64 <gen_monster@@Base+0x808>
   1887c:	add	r1, pc, r1
   18880:	ldr	r2, [fp, #-12]
   18884:	str	r0, [sp, #156]	; 0x9c
   18888:	mov	r0, r2
   1888c:	movw	r2, #8
   18890:	bl	19228 <gen_monster@@Base+0xdcc>
   18894:	ldr	r1, [fp, #-12]
   18898:	str	r0, [sp, #152]	; 0x98
   1889c:	mov	r0, r1
   188a0:	bl	19280 <gen_monster@@Base+0xe24>
   188a4:	ldr	r0, [r0]
   188a8:	str	r0, [fp, #-56]	; 0xffffffc8
   188ac:	ldr	r0, [fp, #-12]
   188b0:	bl	192e8 <gen_monster@@Base+0xe8c>
   188b4:	cmp	r0, #6
   188b8:	bne	188c0 <gen_monster@@Base+0x464>
   188bc:	b	188e4 <gen_monster@@Base+0x488>
   188c0:	ldr	r0, [pc, #928]	; 18c68 <gen_monster@@Base+0x80c>
   188c4:	add	r0, pc, r0
   188c8:	ldr	r1, [pc, #924]	; 18c6c <gen_monster@@Base+0x810>
   188cc:	add	r1, pc, r1
   188d0:	ldr	r2, [pc, #920]	; 18c70 <gen_monster@@Base+0x814>
   188d4:	add	r3, pc, r2
   188d8:	movw	r2, #929	; 0x3a1
   188dc:	bl	12e68 <__assert_fail@plt>
   188e0:	subgt	ip, ip, sp, asr #25
   188e4:	ldr	r0, [fp, #-12]
   188e8:	bl	19308 <gen_monster@@Base+0xeac>
   188ec:	str	r0, [fp, #-60]	; 0xffffffc4
   188f0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   188f4:	ldr	r0, [r0, #20]
   188f8:	str	r0, [fp, #-48]	; 0xffffffd0
   188fc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   18900:	ldr	r0, [r0, #8]
   18904:	str	r0, [fp, #-52]	; 0xffffffcc
   18908:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1890c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18910:	str	r0, [r1, #20]
   18914:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18918:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1891c:	str	r0, [r1]
   18920:	ldr	r0, [fp, #-12]
   18924:	sub	r1, fp, #56	; 0x38
   18928:	mov	r2, #2
   1892c:	str	r2, [sp, #148]	; 0x94
   18930:	bl	19328 <gen_monster@@Base+0xecc>
   18934:	ldr	r1, [fp, #-12]
   18938:	str	r0, [sp, #144]	; 0x90
   1893c:	mov	r0, r1
   18940:	bl	19358 <gen_monster@@Base+0xefc>
   18944:	ldr	r1, [fp, #-12]
   18948:	ldr	r2, [pc, #808]	; 18c78 <gen_monster@@Base+0x81c>
   1894c:	add	r2, pc, r2
   18950:	str	r0, [sp, #140]	; 0x8c
   18954:	mov	r0, r1
   18958:	mov	r1, r2
   1895c:	bl	19398 <gen_monster@@Base+0xf3c>
   18960:	str	r0, [fp, #-76]	; 0xffffffb4
   18964:	ldr	r0, [fp, #-12]
   18968:	ldr	r1, [pc, #780]	; 18c7c <gen_monster@@Base+0x820>
   1896c:	add	r1, pc, r1
   18970:	ldr	r2, [sp, #148]	; 0x94
   18974:	bl	19124 <gen_monster@@Base+0xcc8>
   18978:	str	r0, [fp, #-72]	; 0xffffffb8
   1897c:	ldr	r0, [fp, #-12]
   18980:	ldr	r1, [pc, #760]	; 18c80 <gen_monster@@Base+0x824>
   18984:	add	r1, pc, r1
   18988:	bl	19398 <gen_monster@@Base+0xf3c>
   1898c:	str	r0, [fp, #-68]	; 0xffffffbc
   18990:	ldr	r0, [fp, #-12]
   18994:	sub	r1, fp, #76	; 0x4c
   18998:	mov	r2, #3
   1899c:	str	r2, [sp, #136]	; 0x88
   189a0:	bl	193c0 <gen_monster@@Base+0xf64>
   189a4:	ldr	r1, [fp, #-12]
   189a8:	str	r0, [sp, #132]	; 0x84
   189ac:	mov	r0, r1
   189b0:	bl	19418 <gen_monster@@Base+0xfbc>
   189b4:	ldr	r1, [fp, #-12]
   189b8:	sub	r2, fp, #80	; 0x50
   189bc:	mov	r3, #1
   189c0:	str	r0, [sp, #128]	; 0x80
   189c4:	mov	r0, r1
   189c8:	mov	r1, r2
   189cc:	str	r2, [sp, #124]	; 0x7c
   189d0:	mov	r2, r3
   189d4:	bl	19438 <gen_monster@@Base+0xfdc>
   189d8:	ldr	r1, [fp, #-12]
   189dc:	ldr	r2, [sp, #124]	; 0x7c
   189e0:	add	r3, r2, #1
   189e4:	str	r0, [sp, #120]	; 0x78
   189e8:	mov	r0, r1
   189ec:	mov	r1, r3
   189f0:	ldr	r2, [sp, #136]	; 0x88
   189f4:	bl	19438 <gen_monster@@Base+0xfdc>
   189f8:	ldr	r1, [fp, #-12]
   189fc:	str	r0, [sp, #116]	; 0x74
   18a00:	mov	r0, r1
   18a04:	bl	19468 <gen_monster@@Base+0x100c>
   18a08:	ldr	r1, [fp, #-12]
   18a0c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18a10:	sub	r3, fp, #88	; 0x58
   18a14:	str	r0, [sp, #112]	; 0x70
   18a18:	mov	r0, r3
   18a1c:	str	r1, [sp, #108]	; 0x6c
   18a20:	mov	r1, r2
   18a24:	bl	1956c <gen_monster@@Base+0x1110>
   18a28:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18a2c:	ldr	r2, [fp, #-84]	; 0xffffffac
   18a30:	ldr	r0, [sp, #108]	; 0x6c
   18a34:	bl	194a8 <gen_monster@@Base+0x104c>
   18a38:	ldr	r1, [fp, #-12]
   18a3c:	str	r0, [sp, #104]	; 0x68
   18a40:	mov	r0, r1
   18a44:	bl	1958c <gen_monster@@Base+0x1130>
   18a48:	ldr	r1, [fp, #-12]
   18a4c:	ldr	r2, [pc, #560]	; 18c84 <gen_monster@@Base+0x828>
   18a50:	add	r2, pc, r2
   18a54:	str	r0, [sp, #100]	; 0x64
   18a58:	mov	r0, r1
   18a5c:	mov	r1, r2
   18a60:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   18a64:	ldr	r1, [fp, #-12]
   18a68:	str	r0, [sp, #96]	; 0x60
   18a6c:	mov	r0, r1
   18a70:	bl	191c0 <gen_monster@@Base+0xd64>
   18a74:	ldr	r1, [fp, #-12]
   18a78:	str	r0, [sp, #92]	; 0x5c
   18a7c:	mov	r0, r1
   18a80:	bl	195ac <gen_monster@@Base+0x1150>
   18a84:	ldr	r1, [fp, #-12]
   18a88:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18a8c:	sub	r3, fp, #96	; 0x60
   18a90:	str	r0, [sp, #88]	; 0x58
   18a94:	mov	r0, r3
   18a98:	str	r1, [sp, #84]	; 0x54
   18a9c:	mov	r1, r2
   18aa0:	bl	1956c <gen_monster@@Base+0x1110>
   18aa4:	ldr	r1, [fp, #-96]	; 0xffffffa0
   18aa8:	ldr	r2, [fp, #-92]	; 0xffffffa4
   18aac:	ldr	r0, [sp, #84]	; 0x54
   18ab0:	bl	194a8 <gen_monster@@Base+0x104c>
   18ab4:	ldr	r1, [fp, #-12]
   18ab8:	ldr	r2, [pc, #456]	; 18c88 <gen_monster@@Base+0x82c>
   18abc:	add	r2, pc, r2
   18ac0:	str	r0, [sp, #80]	; 0x50
   18ac4:	mov	r0, r1
   18ac8:	mov	r1, r2
   18acc:	str	r2, [sp, #76]	; 0x4c
   18ad0:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   18ad4:	ldr	r1, [fp, #-12]
   18ad8:	str	r0, [sp, #72]	; 0x48
   18adc:	mov	r0, r1
   18ae0:	bl	19280 <gen_monster@@Base+0xe24>
   18ae4:	ldr	r1, [fp, #-12]
   18ae8:	str	r0, [sp, #68]	; 0x44
   18aec:	mov	r0, r1
   18af0:	bl	19208 <gen_monster@@Base+0xdac>
   18af4:	ldr	r1, [fp, #-12]
   18af8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18afc:	str	r0, [sp, #64]	; 0x40
   18b00:	mov	r0, r1
   18b04:	mov	r1, r2
   18b08:	bl	195cc <gen_monster@@Base+0x1170>
   18b0c:	ldr	r1, [fp, #-12]
   18b10:	str	r0, [sp, #60]	; 0x3c
   18b14:	mov	r0, r1
   18b18:	ldr	r1, [sp, #76]	; 0x4c
   18b1c:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   18b20:	ldr	r1, [fp, #-12]
   18b24:	str	r0, [sp, #56]	; 0x38
   18b28:	mov	r0, r1
   18b2c:	bl	19610 <gen_monster@@Base+0x11b4>
   18b30:	ldr	r1, [fp, #-12]
   18b34:	str	r0, [sp, #52]	; 0x34
   18b38:	mov	r0, r1
   18b3c:	bl	19208 <gen_monster@@Base+0xdac>
   18b40:	ldr	r1, [fp, #-12]
   18b44:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18b48:	sub	r3, fp, #104	; 0x68
   18b4c:	str	r0, [sp, #48]	; 0x30
   18b50:	mov	r0, r3
   18b54:	str	r1, [sp, #44]	; 0x2c
   18b58:	mov	r1, r2
   18b5c:	bl	1956c <gen_monster@@Base+0x1110>
   18b60:	ldr	r1, [fp, #-104]	; 0xffffff98
   18b64:	ldr	r2, [fp, #-100]	; 0xffffff9c
   18b68:	ldr	r0, [sp, #44]	; 0x2c
   18b6c:	bl	19650 <gen_monster@@Base+0x11f4>
   18b70:	ldr	r1, [pc, #252]	; 18c74 <gen_monster@@Base+0x818>
   18b74:	add	r1, pc, r1
   18b78:	ldr	r2, [fp, #-12]
   18b7c:	str	r0, [sp, #40]	; 0x28
   18b80:	mov	r0, r2
   18b84:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   18b88:	ldr	r1, [fp, #-12]
   18b8c:	str	r0, [sp, #36]	; 0x24
   18b90:	mov	r0, r1
   18b94:	movw	r1, #1
   18b98:	and	r1, r1, #255	; 0xff
   18b9c:	bl	196d4 <gen_monster@@Base+0x1278>
   18ba0:	ldr	r1, [fp, #-12]
   18ba4:	str	r0, [sp, #32]
   18ba8:	mov	r0, r1
   18bac:	bl	19280 <gen_monster@@Base+0xe24>
   18bb0:	ldr	r1, [fp, #-12]
   18bb4:	str	r0, [sp, #28]
   18bb8:	mov	r0, r1
   18bbc:	bl	19358 <gen_monster@@Base+0xefc>
   18bc0:	ldr	r1, [fp, #-12]
   18bc4:	str	r0, [sp, #24]
   18bc8:	mov	r0, r1
   18bcc:	bl	19760 <gen_monster@@Base+0x1304>
   18bd0:	ldr	r1, [fp, #-12]
   18bd4:	str	r0, [sp, #20]
   18bd8:	mov	r0, r1
   18bdc:	movw	r1, #0
   18be0:	and	r1, r1, #255	; 0xff
   18be4:	bl	197a0 <gen_monster@@Base+0x1344>
   18be8:	ldr	r1, [fp, #-12]
   18bec:	str	r0, [sp, #16]
   18bf0:	mov	r0, r1
   18bf4:	bl	19820 <gen_monster@@Base+0x13c4>
   18bf8:	ldr	r1, [fp, #-12]
   18bfc:	str	r0, [sp, #12]
   18c00:	mov	r0, r1
   18c04:	bl	19840 <gen_monster@@Base+0x13e4>
   18c08:	ldr	r1, [fp, #-12]
   18c0c:	str	r0, [sp, #8]
   18c10:	mov	r0, r1
   18c14:	bl	19880 <gen_monster@@Base+0x1424>
   18c18:	movw	r1, #0
   18c1c:	str	r0, [sp, #4]
   18c20:	mov	r0, r1
   18c24:	sub	sp, fp, #8
   18c28:	pop	{r4, r5, fp, pc}
   18c2c:	andeq	sp, r1, r0, lsr sp
   18c30:	ldrdeq	sp, [r1], -r5
   18c34:	andeq	r9, r1, r3, asr #6
   18c38:	andeq	r9, r1, ip, lsl pc
   18c3c:	andeq	r9, r1, fp, lsl #21
   18c40:	andeq	r9, r1, r3, lsr pc
   18c44:	andeq	r9, r1, r4, lsr #30
   18c48:	andeq	r9, r1, r3, asr #20
   18c4c:	andeq	r9, r1, fp, ror #29
   18c50:	andeq	r9, r1, sl, ror #20
   18c54:	andeq	r9, r1, sl, lsl #21
   18c58:	strdeq	r9, [r1], -r3
   18c5c:	andeq	r9, r1, fp, ror #17
   18c60:	muleq	r1, r3, sp
   18c64:	strdeq	r9, [r1], -lr
   18c68:	ldrdeq	r9, [r1], -r2
   18c6c:	andeq	r9, r1, fp, ror r8
   18c70:	andeq	r9, r1, r3, lsr #26
   18c74:	andeq	r9, r1, r5, asr fp
   18c78:	strdeq	r9, [r1], -pc	; <UNPREDICTABLE>
   18c7c:	ldrdeq	sp, [r1], -sl
   18c80:	andeq	r9, r1, r0, lsr #20
   18c84:	andeq	r9, r1, r8, lsl sl
   18c88:	andeq	r9, r1, sp, lsl #24
   18c8c:	push	{fp, lr}
   18c90:	mov	fp, sp
   18c94:	sub	sp, sp, #8
   18c98:	ldr	r1, [pc, #56]	; 18cd8 <gen_monster@@Base+0x87c>
   18c9c:	add	r1, pc, r1
   18ca0:	str	r0, [sp, #4]
   18ca4:	ldr	r0, [sp, #4]
   18ca8:	bl	25c80 <main@@Base+0x2cc8>
   18cac:	cmp	r0, #0
   18cb0:	beq	18cc0 <gen_monster@@Base+0x864>
   18cb4:	mvn	r0, #0
   18cb8:	str	r0, [sp]
   18cbc:	b	18ccc <gen_monster@@Base+0x870>
   18cc0:	ldr	r0, [sp, #4]
   18cc4:	bl	148cc <test_empty_monster@@Base+0x1d0>
   18cc8:	str	r0, [sp]
   18ccc:	ldr	r0, [sp]
   18cd0:	mov	sp, fp
   18cd4:	pop	{fp, pc}
   18cd8:	andeq	r8, r1, ip, lsr sl
   18cdc:	push	{fp, lr}
   18ce0:	mov	fp, sp
   18ce4:	sub	sp, sp, #8
   18ce8:	ldr	r1, [pc, #56]	; 18d28 <gen_monster@@Base+0x8cc>
   18cec:	add	r1, pc, r1
   18cf0:	str	r0, [sp, #4]
   18cf4:	ldr	r0, [sp, #4]
   18cf8:	bl	14898 <test_empty_monster@@Base+0x19c>
   18cfc:	cmp	r0, #0
   18d00:	beq	18d10 <gen_monster@@Base+0x8b4>
   18d04:	mvn	r0, #0
   18d08:	str	r0, [sp]
   18d0c:	b	18d1c <gen_monster@@Base+0x8c0>
   18d10:	ldr	r0, [sp, #4]
   18d14:	bl	148cc <test_empty_monster@@Base+0x1d0>
   18d18:	str	r0, [sp]
   18d1c:	ldr	r0, [sp]
   18d20:	mov	sp, fp
   18d24:	pop	{fp, pc}
   18d28:	andeq	r8, r1, ip, ror #19
   18d2c:	push	{fp, lr}
   18d30:	mov	fp, sp
   18d34:	sub	sp, sp, #24
   18d38:	str	r0, [fp, #-8]
   18d3c:	strh	r1, [fp, #-10]
   18d40:	ldrsh	r0, [fp, #-10]
   18d44:	cmp	r0, #100	; 0x64
   18d48:	bne	18d58 <gen_monster@@Base+0x8fc>
   18d4c:	movw	r0, #0
   18d50:	str	r0, [fp, #-4]
   18d54:	b	18da4 <gen_monster@@Base+0x948>
   18d58:	ldr	r0, [fp, #-8]
   18d5c:	movw	r1, #2
   18d60:	str	r1, [sp, #4]
   18d64:	ldr	r2, [sp, #4]
   18d68:	movw	r3, #2
   18d6c:	uxth	r3, r3
   18d70:	bl	2c55c <flatcc_builder_table_add@@Base>
   18d74:	str	r0, [sp, #8]
   18d78:	movw	r1, #0
   18d7c:	cmp	r0, r1
   18d80:	bne	18d90 <gen_monster@@Base+0x934>
   18d84:	mvn	r0, #0
   18d88:	str	r0, [fp, #-4]
   18d8c:	b	18da4 <gen_monster@@Base+0x948>
   18d90:	ldr	r0, [sp, #8]
   18d94:	ldrsh	r1, [fp, #-10]
   18d98:	bl	23f14 <main@@Base+0xf5c>
   18d9c:	movw	r1, #0
   18da0:	str	r1, [fp, #-4]
   18da4:	ldr	r0, [fp, #-4]
   18da8:	mov	sp, fp
   18dac:	pop	{fp, pc}
   18db0:	push	{fp, lr}
   18db4:	mov	fp, sp
   18db8:	sub	sp, sp, #8
   18dbc:	str	r0, [sp, #4]
   18dc0:	ldr	r0, [sp, #4]
   18dc4:	movw	r1, #0
   18dc8:	movw	r2, #32
   18dcc:	movw	r3, #16
   18dd0:	uxth	r3, r3
   18dd4:	bl	2c55c <flatcc_builder_table_add@@Base>
   18dd8:	mov	sp, fp
   18ddc:	pop	{fp, pc}
   18de0:	sub	sp, sp, #4
   18de4:	str	r0, [sp]
   18de8:	movw	r0, #0
   18dec:	add	sp, sp, #4
   18df0:	bx	lr
   18df4:	push	{fp, lr}
   18df8:	mov	fp, sp
   18dfc:	sub	sp, sp, #16
   18e00:	str	r0, [sp, #8]
   18e04:	strb	r1, [sp, #7]
   18e08:	ldrsb	r0, [sp, #7]
   18e0c:	cmp	r0, #8
   18e10:	bne	18e20 <gen_monster@@Base+0x9c4>
   18e14:	movw	r0, #0
   18e18:	str	r0, [fp, #-4]
   18e1c:	b	18e68 <gen_monster@@Base+0xa0c>
   18e20:	ldr	r0, [sp, #8]
   18e24:	movw	r1, #6
   18e28:	movw	r2, #1
   18e2c:	movw	r3, #1
   18e30:	uxth	r3, r3
   18e34:	bl	2c55c <flatcc_builder_table_add@@Base>
   18e38:	str	r0, [sp]
   18e3c:	movw	r1, #0
   18e40:	cmp	r0, r1
   18e44:	bne	18e54 <gen_monster@@Base+0x9f8>
   18e48:	mvn	r0, #0
   18e4c:	str	r0, [fp, #-4]
   18e50:	b	18e68 <gen_monster@@Base+0xa0c>
   18e54:	ldr	r0, [sp]
   18e58:	ldrsb	r1, [sp, #7]
   18e5c:	bl	25cb4 <main@@Base+0x2cfc>
   18e60:	movw	r1, #0
   18e64:	str	r1, [fp, #-4]
   18e68:	ldr	r0, [fp, #-4]
   18e6c:	mov	sp, fp
   18e70:	pop	{fp, pc}
   18e74:	push	{fp, lr}
   18e78:	mov	fp, sp
   18e7c:	sub	sp, sp, #24
   18e80:	str	r0, [fp, #-4]
   18e84:	str	r1, [fp, #-8]
   18e88:	str	r2, [sp, #12]
   18e8c:	ldr	r0, [fp, #-4]
   18e90:	ldr	r1, [fp, #-4]
   18e94:	ldr	r2, [fp, #-8]
   18e98:	ldr	r3, [sp, #12]
   18e9c:	str	r0, [sp, #8]
   18ea0:	mov	r0, r1
   18ea4:	mov	r1, r2
   18ea8:	mov	r2, r3
   18eac:	bl	138a8 <test_type_aliases@@Base+0x2b0>
   18eb0:	ldr	r1, [sp, #8]
   18eb4:	str	r0, [sp, #4]
   18eb8:	mov	r0, r1
   18ebc:	ldr	r1, [sp, #4]
   18ec0:	bl	25cf8 <main@@Base+0x2d40>
   18ec4:	mov	sp, fp
   18ec8:	pop	{fp, pc}
   18ecc:	push	{fp, lr}
   18ed0:	mov	fp, sp
   18ed4:	sub	sp, sp, #8
   18ed8:	str	r0, [sp, #4]
   18edc:	ldr	r0, [sp, #4]
   18ee0:	bl	25d64 <main@@Base+0x2dac>
   18ee4:	mov	sp, fp
   18ee8:	pop	{fp, pc}
   18eec:	push	{fp, lr}
   18ef0:	mov	fp, sp
   18ef4:	sub	sp, sp, #8
   18ef8:	str	r0, [sp, #4]
   18efc:	str	r1, [sp]
   18f00:	ldr	r0, [sp, #4]
   18f04:	ldr	r1, [sp]
   18f08:	bl	29d48 <flatcc_builder_extend_vector@@Base>
   18f0c:	mov	sp, fp
   18f10:	pop	{fp, pc}
   18f14:	push	{fp, lr}
   18f18:	mov	fp, sp
   18f1c:	sub	sp, sp, #16
   18f20:	str	r0, [fp, #-4]
   18f24:	strh	r1, [fp, #-6]
   18f28:	strb	r2, [fp, #-7]
   18f2c:	ldr	r0, [fp, #-4]
   18f30:	movw	r1, #1
   18f34:	bl	29d48 <flatcc_builder_extend_vector@@Base>
   18f38:	str	r0, [sp, #4]
   18f3c:	movw	r1, #0
   18f40:	cmp	r0, r1
   18f44:	beq	18f64 <gen_monster@@Base+0xb08>
   18f48:	ldr	r0, [sp, #4]
   18f4c:	ldrh	r1, [fp, #-6]
   18f50:	sxth	r1, r1
   18f54:	ldrsb	r2, [fp, #-7]
   18f58:	bl	25d98 <main@@Base+0x2de0>
   18f5c:	str	r0, [sp]
   18f60:	b	18f70 <gen_monster@@Base+0xb14>
   18f64:	movw	r0, #0
   18f68:	str	r0, [sp]
   18f6c:	b	18f70 <gen_monster@@Base+0xb14>
   18f70:	ldr	r0, [sp]
   18f74:	mov	sp, fp
   18f78:	pop	{fp, pc}
   18f7c:	push	{fp, lr}
   18f80:	mov	fp, sp
   18f84:	sub	sp, sp, #32
   18f88:	str	r0, [fp, #-4]
   18f8c:	str	r1, [fp, #-8]
   18f90:	ldr	r0, [fp, #-4]
   18f94:	movw	r1, #1
   18f98:	bl	29d48 <flatcc_builder_extend_vector@@Base>
   18f9c:	str	r0, [fp, #-12]
   18fa0:	movw	r1, #0
   18fa4:	cmp	r0, r1
   18fa8:	beq	18fe4 <gen_monster@@Base+0xb88>
   18fac:	ldr	r0, [fp, #-12]
   18fb0:	ldr	r1, [fp, #-8]
   18fb4:	str	r0, [sp, #16]
   18fb8:	str	r1, [sp, #12]
   18fbc:	bl	25dcc <main@@Base+0x2e14>
   18fc0:	ldr	r1, [sp, #16]
   18fc4:	str	r0, [sp, #8]
   18fc8:	mov	r0, r1
   18fcc:	ldr	r1, [sp, #12]
   18fd0:	ldr	r2, [sp, #8]
   18fd4:	bl	12db4 <memcpy@plt>
   18fd8:	ldr	r0, [fp, #-12]
   18fdc:	str	r0, [sp, #4]
   18fe0:	b	18ff0 <gen_monster@@Base+0xb94>
   18fe4:	movw	r0, #0
   18fe8:	str	r0, [sp, #4]
   18fec:	b	18ff0 <gen_monster@@Base+0xb94>
   18ff0:	ldr	r0, [sp, #4]
   18ff4:	mov	sp, fp
   18ff8:	pop	{fp, pc}
   18ffc:	push	{fp, lr}
   19000:	mov	fp, sp
   19004:	sub	sp, sp, #32
   19008:	str	r0, [fp, #-4]
   1900c:	str	r1, [fp, #-8]
   19010:	ldr	r0, [fp, #-4]
   19014:	movw	r1, #1
   19018:	bl	29d48 <flatcc_builder_extend_vector@@Base>
   1901c:	str	r0, [fp, #-12]
   19020:	movw	r1, #0
   19024:	cmp	r0, r1
   19028:	beq	19064 <gen_monster@@Base+0xc08>
   1902c:	ldr	r0, [fp, #-12]
   19030:	ldr	r1, [fp, #-8]
   19034:	str	r0, [sp, #16]
   19038:	str	r1, [sp, #12]
   1903c:	bl	25dcc <main@@Base+0x2e14>
   19040:	ldr	r1, [sp, #16]
   19044:	str	r0, [sp, #8]
   19048:	mov	r0, r1
   1904c:	ldr	r1, [sp, #12]
   19050:	ldr	r2, [sp, #8]
   19054:	bl	12db4 <memcpy@plt>
   19058:	ldr	r0, [fp, #-12]
   1905c:	str	r0, [sp, #4]
   19060:	b	19070 <gen_monster@@Base+0xc14>
   19064:	movw	r0, #0
   19068:	str	r0, [sp, #4]
   1906c:	b	19070 <gen_monster@@Base+0xc14>
   19070:	ldr	r0, [sp, #4]
   19074:	mov	sp, fp
   19078:	pop	{fp, pc}
   1907c:	push	{fp, lr}
   19080:	mov	fp, sp
   19084:	sub	sp, sp, #8
   19088:	str	r0, [sp, #4]
   1908c:	ldr	r0, [sp, #4]
   19090:	bl	2bdf8 <flatcc_builder_vector_count@@Base>
   19094:	mov	sp, fp
   19098:	pop	{fp, pc}
   1909c:	push	{fp, lr}
   190a0:	mov	fp, sp
   190a4:	sub	sp, sp, #8
   190a8:	str	r0, [sp, #4]
   190ac:	str	r1, [sp]
   190b0:	ldr	r0, [sp, #4]
   190b4:	ldr	r1, [sp]
   190b8:	bl	2a4dc <flatcc_builder_truncate_vector@@Base>
   190bc:	mov	sp, fp
   190c0:	pop	{fp, pc}
   190c4:	push	{fp, lr}
   190c8:	mov	fp, sp
   190cc:	sub	sp, sp, #8
   190d0:	str	r0, [sp, #4]
   190d4:	ldr	r0, [sp, #4]
   190d8:	bl	2be14 <flatcc_builder_vector_edit@@Base>
   190dc:	mov	sp, fp
   190e0:	pop	{fp, pc}
   190e4:	push	{fp, lr}
   190e8:	mov	fp, sp
   190ec:	sub	sp, sp, #16
   190f0:	str	r0, [fp, #-4]
   190f4:	ldr	r0, [fp, #-4]
   190f8:	ldr	r1, [fp, #-4]
   190fc:	str	r0, [sp, #8]
   19100:	mov	r0, r1
   19104:	bl	25e40 <main@@Base+0x2e88>
   19108:	ldr	r1, [sp, #8]
   1910c:	str	r0, [sp, #4]
   19110:	mov	r0, r1
   19114:	ldr	r1, [sp, #4]
   19118:	bl	25dd4 <main@@Base+0x2e1c>
   1911c:	mov	sp, fp
   19120:	pop	{fp, pc}
   19124:	push	{fp, lr}
   19128:	mov	fp, sp
   1912c:	sub	sp, sp, #16
   19130:	str	r0, [fp, #-4]
   19134:	str	r1, [sp, #8]
   19138:	str	r2, [sp, #4]
   1913c:	ldr	r0, [fp, #-4]
   19140:	ldr	r1, [sp, #8]
   19144:	ldr	r2, [sp, #4]
   19148:	bl	2cfdc <flatcc_builder_create_string@@Base>
   1914c:	mov	sp, fp
   19150:	pop	{fp, pc}
   19154:	push	{fp, lr}
   19158:	mov	fp, sp
   1915c:	sub	sp, sp, #16
   19160:	str	r0, [fp, #-4]
   19164:	str	r1, [sp, #8]
   19168:	ldr	r0, [sp, #8]
   1916c:	cmp	r0, #0
   19170:	beq	191a8 <gen_monster@@Base+0xd4c>
   19174:	ldr	r0, [fp, #-4]
   19178:	movw	r1, #3
   1917c:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   19180:	str	r0, [sp, #4]
   19184:	movw	r1, #0
   19188:	cmp	r0, r1
   1918c:	beq	191a8 <gen_monster@@Base+0xd4c>
   19190:	ldr	r0, [sp, #8]
   19194:	ldr	r1, [sp, #4]
   19198:	str	r0, [r1]
   1919c:	movw	r0, #0
   191a0:	str	r0, [sp]
   191a4:	b	191b4 <gen_monster@@Base+0xd58>
   191a8:	mvn	r0, #0
   191ac:	str	r0, [sp]
   191b0:	b	191b4 <gen_monster@@Base+0xd58>
   191b4:	ldr	r0, [sp]
   191b8:	mov	sp, fp
   191bc:	pop	{fp, pc}
   191c0:	push	{fp, lr}
   191c4:	mov	fp, sp
   191c8:	sub	sp, sp, #8
   191cc:	str	r0, [sp, #4]
   191d0:	ldr	r0, [sp, #4]
   191d4:	bl	2a924 <flatcc_builder_start_offset_vector@@Base>
   191d8:	mov	sp, fp
   191dc:	pop	{fp, pc}
   191e0:	push	{fp, lr}
   191e4:	mov	fp, sp
   191e8:	sub	sp, sp, #8
   191ec:	str	r0, [sp, #4]
   191f0:	str	r1, [sp]
   191f4:	ldr	r0, [sp, #4]
   191f8:	ldr	r1, [sp]
   191fc:	bl	2a0b8 <flatcc_builder_extend_offset_vector@@Base>
   19200:	mov	sp, fp
   19204:	pop	{fp, pc}
   19208:	push	{fp, lr}
   1920c:	mov	fp, sp
   19210:	sub	sp, sp, #8
   19214:	str	r0, [sp, #4]
   19218:	ldr	r0, [sp, #4]
   1921c:	bl	148cc <test_empty_monster@@Base+0x1d0>
   19220:	mov	sp, fp
   19224:	pop	{fp, pc}
   19228:	push	{fp, lr}
   1922c:	mov	fp, sp
   19230:	sub	sp, sp, #24
   19234:	str	r0, [fp, #-4]
   19238:	str	r1, [fp, #-8]
   1923c:	str	r2, [sp, #12]
   19240:	ldr	r0, [fp, #-4]
   19244:	ldr	r1, [fp, #-4]
   19248:	ldr	r2, [fp, #-8]
   1924c:	ldr	r3, [sp, #12]
   19250:	str	r0, [sp, #8]
   19254:	mov	r0, r1
   19258:	mov	r1, r2
   1925c:	mov	r2, r3
   19260:	bl	2d188 <flatcc_builder_create_string_strn@@Base>
   19264:	ldr	r1, [sp, #8]
   19268:	str	r0, [sp, #4]
   1926c:	mov	r0, r1
   19270:	ldr	r1, [sp, #4]
   19274:	bl	19154 <gen_monster@@Base+0xcf8>
   19278:	mov	sp, fp
   1927c:	pop	{fp, pc}
   19280:	push	{fp, lr}
   19284:	mov	fp, sp
   19288:	sub	sp, sp, #16
   1928c:	str	r0, [fp, #-4]
   19290:	ldr	r0, [fp, #-4]
   19294:	ldr	r1, [fp, #-4]
   19298:	str	r0, [sp, #8]
   1929c:	mov	r0, r1
   192a0:	bl	1493c <test_empty_monster@@Base+0x240>
   192a4:	ldr	r1, [sp, #8]
   192a8:	str	r0, [sp, #4]
   192ac:	mov	r0, r1
   192b0:	ldr	r1, [sp, #4]
   192b4:	bl	25e60 <main@@Base+0x2ea8>
   192b8:	mov	sp, fp
   192bc:	pop	{fp, pc}
   192c0:	push	{fp, lr}
   192c4:	mov	fp, sp
   192c8:	sub	sp, sp, #8
   192cc:	str	r0, [sp, #4]
   192d0:	str	r1, [sp]
   192d4:	ldr	r0, [sp, #4]
   192d8:	ldr	r1, [sp]
   192dc:	bl	2a63c <flatcc_builder_truncate_offset_vector@@Base>
   192e0:	mov	sp, fp
   192e4:	pop	{fp, pc}
   192e8:	push	{fp, lr}
   192ec:	mov	fp, sp
   192f0:	sub	sp, sp, #8
   192f4:	str	r0, [sp, #4]
   192f8:	ldr	r0, [sp, #4]
   192fc:	bl	2c220 <flatcc_builder_offset_vector_count@@Base>
   19300:	mov	sp, fp
   19304:	pop	{fp, pc}
   19308:	push	{fp, lr}
   1930c:	mov	fp, sp
   19310:	sub	sp, sp, #8
   19314:	str	r0, [sp, #4]
   19318:	ldr	r0, [sp, #4]
   1931c:	bl	2c208 <flatcc_builder_offset_vector_edit@@Base>
   19320:	mov	sp, fp
   19324:	pop	{fp, pc}
   19328:	push	{fp, lr}
   1932c:	mov	fp, sp
   19330:	sub	sp, sp, #16
   19334:	str	r0, [fp, #-4]
   19338:	str	r1, [sp, #8]
   1933c:	str	r2, [sp, #4]
   19340:	ldr	r0, [fp, #-4]
   19344:	ldr	r1, [sp, #8]
   19348:	ldr	r2, [sp, #4]
   1934c:	bl	2a1f0 <flatcc_builder_append_offset_vector@@Base>
   19350:	mov	sp, fp
   19354:	pop	{fp, pc}
   19358:	push	{fp, lr}
   1935c:	mov	fp, sp
   19360:	sub	sp, sp, #16
   19364:	str	r0, [fp, #-4]
   19368:	ldr	r0, [fp, #-4]
   1936c:	ldr	r1, [fp, #-4]
   19370:	str	r0, [sp, #8]
   19374:	mov	r0, r1
   19378:	bl	2aa30 <flatcc_builder_end_offset_vector@@Base>
   1937c:	ldr	r1, [sp, #8]
   19380:	str	r0, [sp, #4]
   19384:	mov	r0, r1
   19388:	ldr	r1, [sp, #4]
   1938c:	bl	25eac <main@@Base+0x2ef4>
   19390:	mov	sp, fp
   19394:	pop	{fp, pc}
   19398:	push	{fp, lr}
   1939c:	mov	fp, sp
   193a0:	sub	sp, sp, #8
   193a4:	str	r0, [sp, #4]
   193a8:	str	r1, [sp]
   193ac:	ldr	r0, [sp, #4]
   193b0:	ldr	r1, [sp]
   193b4:	bl	2d138 <flatcc_builder_create_string_str@@Base>
   193b8:	mov	sp, fp
   193bc:	pop	{fp, pc}
   193c0:	push	{fp, lr}
   193c4:	mov	fp, sp
   193c8:	sub	sp, sp, #24
   193cc:	str	r0, [fp, #-4]
   193d0:	str	r1, [fp, #-8]
   193d4:	str	r2, [sp, #12]
   193d8:	ldr	r0, [fp, #-4]
   193dc:	ldr	r1, [fp, #-4]
   193e0:	ldr	r2, [fp, #-8]
   193e4:	ldr	r3, [sp, #12]
   193e8:	str	r0, [sp, #8]
   193ec:	mov	r0, r1
   193f0:	mov	r1, r2
   193f4:	mov	r2, r3
   193f8:	bl	2a9a8 <flatcc_builder_create_offset_vector@@Base>
   193fc:	ldr	r1, [sp, #8]
   19400:	str	r0, [sp, #4]
   19404:	mov	r0, r1
   19408:	ldr	r1, [sp, #4]
   1940c:	bl	25f18 <main@@Base+0x2f60>
   19410:	mov	sp, fp
   19414:	pop	{fp, pc}
   19418:	push	{fp, lr}
   1941c:	mov	fp, sp
   19420:	sub	sp, sp, #8
   19424:	str	r0, [sp, #4]
   19428:	ldr	r0, [sp, #4]
   1942c:	bl	25f84 <main@@Base+0x2fcc>
   19430:	mov	sp, fp
   19434:	pop	{fp, pc}
   19438:	push	{fp, lr}
   1943c:	mov	fp, sp
   19440:	sub	sp, sp, #16
   19444:	str	r0, [fp, #-4]
   19448:	str	r1, [sp, #8]
   1944c:	str	r2, [sp, #4]
   19450:	ldr	r0, [fp, #-4]
   19454:	ldr	r1, [sp, #8]
   19458:	ldr	r2, [sp, #4]
   1945c:	bl	2a000 <flatcc_builder_append_vector@@Base>
   19460:	mov	sp, fp
   19464:	pop	{fp, pc}
   19468:	push	{fp, lr}
   1946c:	mov	fp, sp
   19470:	sub	sp, sp, #16
   19474:	str	r0, [fp, #-4]
   19478:	ldr	r0, [fp, #-4]
   1947c:	ldr	r1, [fp, #-4]
   19480:	str	r0, [sp, #8]
   19484:	mov	r0, r1
   19488:	bl	26020 <main@@Base+0x3068>
   1948c:	ldr	r1, [sp, #8]
   19490:	str	r0, [sp, #4]
   19494:	mov	r0, r1
   19498:	ldr	r1, [sp, #4]
   1949c:	bl	25fb4 <main@@Base+0x2ffc>
   194a0:	mov	sp, fp
   194a4:	pop	{fp, pc}
   194a8:	push	{fp, lr}
   194ac:	mov	fp, sp
   194b0:	sub	sp, sp, #24
   194b4:	str	r1, [sp, #12]
   194b8:	str	r2, [sp, #16]
   194bc:	str	r0, [sp, #8]
   194c0:	ldrb	r0, [sp, #12]
   194c4:	cmp	r0, #0
   194c8:	bne	194d8 <gen_monster@@Base+0x107c>
   194cc:	movw	r0, #0
   194d0:	str	r0, [fp, #-4]
   194d4:	b	19560 <gen_monster@@Base+0x1104>
   194d8:	ldr	r0, [sp, #16]
   194dc:	cmp	r0, #0
   194e0:	bne	194f0 <gen_monster@@Base+0x1094>
   194e4:	mvn	r0, #0
   194e8:	str	r0, [fp, #-4]
   194ec:	b	19560 <gen_monster@@Base+0x1104>
   194f0:	ldr	r0, [sp, #8]
   194f4:	movw	r1, #7
   194f8:	movw	r2, #1
   194fc:	movw	r3, #1
   19500:	uxth	r3, r3
   19504:	bl	2c55c <flatcc_builder_table_add@@Base>
   19508:	str	r0, [sp]
   1950c:	movw	r1, #0
   19510:	cmp	r0, r1
   19514:	beq	19534 <gen_monster@@Base+0x10d8>
   19518:	ldr	r0, [sp, #8]
   1951c:	movw	r1, #8
   19520:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   19524:	str	r0, [sp, #4]
   19528:	movw	r1, #0
   1952c:	cmp	r0, r1
   19530:	bne	19540 <gen_monster@@Base+0x10e4>
   19534:	mvn	r0, #0
   19538:	str	r0, [fp, #-4]
   1953c:	b	19560 <gen_monster@@Base+0x1104>
   19540:	ldrb	r0, [sp, #12]
   19544:	ldr	r1, [sp]
   19548:	strb	r0, [r1]
   1954c:	ldr	r0, [sp, #16]
   19550:	ldr	r1, [sp, #4]
   19554:	str	r0, [r1]
   19558:	movw	r0, #0
   1955c:	str	r0, [fp, #-4]
   19560:	ldr	r0, [fp, #-4]
   19564:	mov	sp, fp
   19568:	pop	{fp, pc}
   1956c:	sub	sp, sp, #4
   19570:	str	r1, [sp]
   19574:	movw	r1, #1
   19578:	strb	r1, [r0]
   1957c:	ldr	r1, [sp]
   19580:	str	r1, [r0, #4]
   19584:	add	sp, sp, #4
   19588:	bx	lr
   1958c:	push	{fp, lr}
   19590:	mov	fp, sp
   19594:	sub	sp, sp, #8
   19598:	str	r0, [sp, #4]
   1959c:	ldr	r0, [sp, #4]
   195a0:	bl	148cc <test_empty_monster@@Base+0x1d0>
   195a4:	mov	sp, fp
   195a8:	pop	{fp, pc}
   195ac:	push	{fp, lr}
   195b0:	mov	fp, sp
   195b4:	sub	sp, sp, #8
   195b8:	str	r0, [sp, #4]
   195bc:	ldr	r0, [sp, #4]
   195c0:	bl	148cc <test_empty_monster@@Base+0x1d0>
   195c4:	mov	sp, fp
   195c8:	pop	{fp, pc}
   195cc:	push	{fp, lr}
   195d0:	mov	fp, sp
   195d4:	sub	sp, sp, #24
   195d8:	str	r0, [fp, #-4]
   195dc:	str	r1, [fp, #-8]
   195e0:	ldr	r0, [fp, #-4]
   195e4:	ldr	r1, [fp, #-8]
   195e8:	add	r2, sp, #8
   195ec:	str	r0, [sp, #4]
   195f0:	mov	r0, r2
   195f4:	bl	1956c <gen_monster@@Base+0x1110>
   195f8:	ldr	r1, [sp, #8]
   195fc:	ldr	r2, [sp, #12]
   19600:	ldr	r0, [sp, #4]
   19604:	bl	194a8 <gen_monster@@Base+0x104c>
   19608:	mov	sp, fp
   1960c:	pop	{fp, pc}
   19610:	push	{fp, lr}
   19614:	mov	fp, sp
   19618:	sub	sp, sp, #16
   1961c:	str	r0, [fp, #-4]
   19620:	ldr	r0, [fp, #-4]
   19624:	ldr	r1, [fp, #-4]
   19628:	str	r0, [sp, #8]
   1962c:	mov	r0, r1
   19630:	bl	1493c <test_empty_monster@@Base+0x240>
   19634:	ldr	r1, [sp, #8]
   19638:	str	r0, [sp, #4]
   1963c:	mov	r0, r1
   19640:	ldr	r1, [sp, #4]
   19644:	bl	26040 <main@@Base+0x3088>
   19648:	mov	sp, fp
   1964c:	pop	{fp, pc}
   19650:	push	{fp, lr}
   19654:	mov	fp, sp
   19658:	sub	sp, sp, #24
   1965c:	str	r1, [sp, #12]
   19660:	str	r2, [sp, #16]
   19664:	str	r0, [sp, #8]
   19668:	ldrb	r0, [sp, #12]
   1966c:	cmp	r0, #0
   19670:	bne	19680 <gen_monster@@Base+0x1224>
   19674:	movw	r0, #0
   19678:	str	r0, [fp, #-4]
   1967c:	b	196c8 <gen_monster@@Base+0x126c>
   19680:	ldr	r0, [sp, #8]
   19684:	movw	r1, #8
   19688:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   1968c:	str	r0, [sp, #4]
   19690:	movw	r1, #0
   19694:	cmp	r0, r1
   19698:	beq	196b4 <gen_monster@@Base+0x1258>
   1969c:	ldr	r0, [sp, #16]
   196a0:	ldr	r1, [sp, #4]
   196a4:	str	r0, [r1]
   196a8:	movw	r0, #0
   196ac:	str	r0, [sp]
   196b0:	b	196c0 <gen_monster@@Base+0x1264>
   196b4:	mvn	r0, #0
   196b8:	str	r0, [sp]
   196bc:	b	196c0 <gen_monster@@Base+0x1264>
   196c0:	ldr	r0, [sp]
   196c4:	str	r0, [fp, #-4]
   196c8:	ldr	r0, [fp, #-4]
   196cc:	mov	sp, fp
   196d0:	pop	{fp, pc}
   196d4:	push	{fp, lr}
   196d8:	mov	fp, sp
   196dc:	sub	sp, sp, #24
   196e0:	str	r0, [fp, #-8]
   196e4:	strb	r1, [fp, #-9]
   196e8:	ldrb	r0, [fp, #-9]
   196ec:	cmp	r0, #0
   196f0:	bne	19700 <gen_monster@@Base+0x12a4>
   196f4:	movw	r0, #0
   196f8:	str	r0, [fp, #-4]
   196fc:	b	19754 <gen_monster@@Base+0x12f8>
   19700:	ldr	r0, [fp, #-8]
   19704:	movw	r1, #7
   19708:	movw	r2, #1
   1970c:	movw	r3, #1
   19710:	uxth	r3, r3
   19714:	bl	2c55c <flatcc_builder_table_add@@Base>
   19718:	str	r0, [sp, #8]
   1971c:	movw	r1, #0
   19720:	cmp	r0, r1
   19724:	beq	19740 <gen_monster@@Base+0x12e4>
   19728:	ldrb	r0, [fp, #-9]
   1972c:	ldr	r1, [sp, #8]
   19730:	strb	r0, [r1]
   19734:	movw	r0, #0
   19738:	str	r0, [sp, #4]
   1973c:	b	1974c <gen_monster@@Base+0x12f0>
   19740:	mvn	r0, #0
   19744:	str	r0, [sp, #4]
   19748:	b	1974c <gen_monster@@Base+0x12f0>
   1974c:	ldr	r0, [sp, #4]
   19750:	str	r0, [fp, #-4]
   19754:	ldr	r0, [fp, #-4]
   19758:	mov	sp, fp
   1975c:	pop	{fp, pc}
   19760:	push	{fp, lr}
   19764:	mov	fp, sp
   19768:	sub	sp, sp, #16
   1976c:	str	r0, [fp, #-4]
   19770:	ldr	r0, [fp, #-4]
   19774:	ldr	r1, [fp, #-4]
   19778:	str	r0, [sp, #8]
   1977c:	mov	r0, r1
   19780:	bl	1493c <test_empty_monster@@Base+0x240>
   19784:	ldr	r1, [sp, #8]
   19788:	str	r0, [sp, #4]
   1978c:	mov	r0, r1
   19790:	ldr	r1, [sp, #4]
   19794:	bl	1e188 <test_create_add_field@@Base+0x1dc>
   19798:	mov	sp, fp
   1979c:	pop	{fp, pc}
   197a0:	push	{fp, lr}
   197a4:	mov	fp, sp
   197a8:	sub	sp, sp, #16
   197ac:	str	r0, [sp, #8]
   197b0:	strb	r1, [sp, #7]
   197b4:	ldrb	r0, [sp, #7]
   197b8:	cmp	r0, #1
   197bc:	bne	197cc <gen_monster@@Base+0x1370>
   197c0:	movw	r0, #0
   197c4:	str	r0, [fp, #-4]
   197c8:	b	19814 <gen_monster@@Base+0x13b8>
   197cc:	ldr	r0, [sp, #8]
   197d0:	movw	r1, #15
   197d4:	movw	r2, #1
   197d8:	movw	r3, #1
   197dc:	uxth	r3, r3
   197e0:	bl	2c55c <flatcc_builder_table_add@@Base>
   197e4:	str	r0, [sp]
   197e8:	movw	r1, #0
   197ec:	cmp	r0, r1
   197f0:	bne	19800 <gen_monster@@Base+0x13a4>
   197f4:	mvn	r0, #0
   197f8:	str	r0, [fp, #-4]
   197fc:	b	19814 <gen_monster@@Base+0x13b8>
   19800:	ldr	r0, [sp]
   19804:	ldrb	r1, [sp, #7]
   19808:	bl	2608c <main@@Base+0x30d4>
   1980c:	movw	r1, #0
   19810:	str	r1, [fp, #-4]
   19814:	ldr	r0, [fp, #-4]
   19818:	mov	sp, fp
   1981c:	pop	{fp, pc}
   19820:	push	{fp, lr}
   19824:	mov	fp, sp
   19828:	sub	sp, sp, #8
   1982c:	str	r0, [sp, #4]
   19830:	ldr	r0, [sp, #4]
   19834:	bl	260d0 <main@@Base+0x3118>
   19838:	mov	sp, fp
   1983c:	pop	{fp, pc}
   19840:	push	{fp, lr}
   19844:	mov	fp, sp
   19848:	sub	sp, sp, #16
   1984c:	str	r0, [fp, #-4]
   19850:	ldr	r0, [fp, #-4]
   19854:	ldr	r1, [fp, #-4]
   19858:	str	r0, [sp, #8]
   1985c:	mov	r0, r1
   19860:	bl	26160 <main@@Base+0x31a8>
   19864:	ldr	r1, [sp, #8]
   19868:	str	r0, [sp, #4]
   1986c:	mov	r0, r1
   19870:	ldr	r1, [sp, #4]
   19874:	bl	260f4 <main@@Base+0x313c>
   19878:	mov	sp, fp
   1987c:	pop	{fp, pc}
   19880:	push	{fp, lr}
   19884:	mov	fp, sp
   19888:	sub	sp, sp, #16
   1988c:	str	r0, [fp, #-4]
   19890:	ldr	r0, [fp, #-4]
   19894:	ldr	r1, [fp, #-4]
   19898:	str	r0, [sp, #8]
   1989c:	mov	r0, r1
   198a0:	bl	1493c <test_empty_monster@@Base+0x240>
   198a4:	ldr	r1, [sp, #8]
   198a8:	str	r0, [sp, #4]
   198ac:	mov	r0, r1
   198b0:	ldr	r1, [sp, #4]
   198b4:	bl	149ac <test_empty_monster@@Base+0x2b0>
   198b8:	mov	sp, fp
   198bc:	pop	{fp, pc}

000198c0 <test_monster@@Base>:
   198c0:	push	{fp, lr}
   198c4:	mov	fp, sp
   198c8:	sub	sp, sp, #40	; 0x28
   198cc:	str	r0, [fp, #-8]
   198d0:	ldr	r0, [fp, #-8]
   198d4:	movw	r1, #0
   198d8:	bl	1845c <gen_monster@@Base>
   198dc:	ldr	r1, [fp, #-8]
   198e0:	str	r0, [sp, #16]
   198e4:	mov	r0, r1
   198e8:	sub	r1, fp, #16
   198ec:	bl	2db44 <flatcc_builder_finalize_aligned_buffer@@Base>
   198f0:	ldr	r1, [pc, #160]	; 19998 <test_monster@@Base+0xd8>
   198f4:	add	r1, pc, r1
   198f8:	ldr	r2, [pc, #156]	; 1999c <test_monster@@Base+0xdc>
   198fc:	ldr	r2, [pc, r2]
   19900:	str	r0, [fp, #-12]
   19904:	ldr	r0, [fp, #-12]
   19908:	ldr	r3, [fp, #-16]
   1990c:	ldr	r2, [r2]
   19910:	str	r0, [sp, #12]
   19914:	mov	r0, r1
   19918:	ldr	r1, [sp, #12]
   1991c:	str	r2, [sp, #8]
   19920:	mov	r2, r3
   19924:	ldr	r3, [sp, #8]
   19928:	bl	13ae8 <test_type_aliases@@Base+0x4f0>
   1992c:	ldr	r0, [fp, #-12]
   19930:	ldr	r1, [fp, #-16]
   19934:	bl	14a10 <test_empty_monster@@Base+0x314>
   19938:	str	r0, [sp, #20]
   1993c:	cmp	r0, #0
   19940:	beq	19970 <test_monster@@Base+0xb0>
   19944:	ldr	r0, [sp, #20]
   19948:	bl	2ebb4 <flatcc_verify_error_string@@Base>
   1994c:	ldr	r1, [pc, #76]	; 199a0 <test_monster@@Base+0xe0>
   19950:	add	r1, pc, r1
   19954:	str	r0, [sp, #4]
   19958:	mov	r0, r1
   1995c:	ldr	r1, [sp, #4]
   19960:	bl	12d9c <printf@plt>
   19964:	mvn	r1, #0
   19968:	str	r1, [fp, #-4]
   1996c:	b	1998c <test_monster@@Base+0xcc>
   19970:	ldr	r0, [fp, #-12]
   19974:	bl	159cc <verify_monster@@Base>
   19978:	str	r0, [sp, #20]
   1997c:	ldr	r0, [fp, #-12]
   19980:	bl	2dcec <flatcc_builder_aligned_free@@Base>
   19984:	ldr	r0, [sp, #20]
   19988:	str	r0, [fp, #-4]
   1998c:	ldr	r0, [fp, #-4]
   19990:	mov	sp, fp
   19994:	pop	{fp, pc}
   19998:	andeq	r8, r1, r0, asr #32
   1999c:	andeq	lr, r2, r8, asr r7
   199a0:	andeq	r8, r1, r2, lsl #27

000199a4 <test_monster_with_size@@Base>:
   199a4:	push	{fp, lr}
   199a8:	mov	fp, sp
   199ac:	sub	sp, sp, #56	; 0x38
   199b0:	str	r0, [fp, #-8]
   199b4:	ldr	r0, [fp, #-8]
   199b8:	movw	r1, #1
   199bc:	bl	1845c <gen_monster@@Base>
   199c0:	ldr	r1, [fp, #-8]
   199c4:	str	r0, [sp, #20]
   199c8:	mov	r0, r1
   199cc:	sub	r1, fp, #20
   199d0:	bl	2db44 <flatcc_builder_finalize_aligned_buffer@@Base>
   199d4:	ldr	r1, [pc, #304]	; 19b0c <test_monster_with_size@@Base+0x168>
   199d8:	add	r1, pc, r1
   199dc:	ldr	r2, [pc, #300]	; 19b10 <test_monster_with_size@@Base+0x16c>
   199e0:	ldr	r2, [pc, r2]
   199e4:	str	r0, [fp, #-16]
   199e8:	ldr	r0, [fp, #-16]
   199ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   199f0:	ldr	r2, [r2]
   199f4:	str	r0, [sp, #16]
   199f8:	mov	r0, r1
   199fc:	ldr	r1, [sp, #16]
   19a00:	str	r2, [sp, #12]
   19a04:	mov	r2, r3
   19a08:	ldr	r3, [sp, #12]
   19a0c:	bl	13ae8 <test_type_aliases@@Base+0x4f0>
   19a10:	ldr	r0, [fp, #-16]
   19a14:	and	r0, r0, #15
   19a18:	cmp	r0, #0
   19a1c:	beq	19a54 <test_monster_with_size@@Base+0xb0>
   19a20:	ldr	r0, [pc, #248]	; 19b20 <test_monster_with_size@@Base+0x17c>
   19a24:	add	r0, pc, r0
   19a28:	bl	12d9c <printf@plt>
   19a2c:	ldr	r1, [pc, #232]	; 19b1c <test_monster_with_size@@Base+0x178>
   19a30:	add	r1, pc, r1
   19a34:	ldr	r2, [fp, #-16]
   19a38:	str	r0, [sp, #8]
   19a3c:	mov	r0, r1
   19a40:	mov	r1, r2
   19a44:	bl	12d9c <printf@plt>
   19a48:	mvn	r1, #0
   19a4c:	str	r1, [fp, #-4]
   19a50:	b	19b00 <test_monster_with_size@@Base+0x15c>
   19a54:	ldr	r0, [fp, #-16]
   19a58:	sub	r1, fp, #24
   19a5c:	bl	19b24 <test_monster_with_size@@Base+0x180>
   19a60:	str	r0, [fp, #-12]
   19a64:	ldr	r0, [fp, #-20]	; 0xffffffec
   19a68:	sub	r0, r0, #4
   19a6c:	str	r0, [sp, #28]
   19a70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19a74:	ldr	r1, [sp, #28]
   19a78:	cmp	r0, r1
   19a7c:	beq	19aa0 <test_monster_with_size@@Base+0xfc>
   19a80:	ldr	r0, [pc, #144]	; 19b18 <test_monster_with_size@@Base+0x174>
   19a84:	add	r0, pc, r0
   19a88:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19a8c:	ldr	r2, [sp, #28]
   19a90:	bl	12d9c <printf@plt>
   19a94:	mvn	r1, #0
   19a98:	str	r1, [fp, #-4]
   19a9c:	b	19b00 <test_monster_with_size@@Base+0x15c>
   19aa0:	ldr	r0, [fp, #-12]
   19aa4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19aa8:	bl	14a10 <test_empty_monster@@Base+0x314>
   19aac:	str	r0, [sp, #24]
   19ab0:	cmp	r0, #0
   19ab4:	beq	19ae4 <test_monster_with_size@@Base+0x140>
   19ab8:	ldr	r0, [sp, #24]
   19abc:	bl	2ebb4 <flatcc_verify_error_string@@Base>
   19ac0:	ldr	r1, [pc, #76]	; 19b14 <test_monster_with_size@@Base+0x170>
   19ac4:	add	r1, pc, r1
   19ac8:	str	r0, [sp, #4]
   19acc:	mov	r0, r1
   19ad0:	ldr	r1, [sp, #4]
   19ad4:	bl	12d9c <printf@plt>
   19ad8:	mvn	r1, #0
   19adc:	str	r1, [fp, #-4]
   19ae0:	b	19b00 <test_monster_with_size@@Base+0x15c>
   19ae4:	ldr	r0, [fp, #-12]
   19ae8:	bl	159cc <verify_monster@@Base>
   19aec:	str	r0, [sp, #24]
   19af0:	ldr	r0, [fp, #-16]
   19af4:	bl	2dcec <flatcc_builder_aligned_free@@Base>
   19af8:	ldr	r0, [sp, #24]
   19afc:	str	r0, [fp, #-4]
   19b00:	ldr	r0, [fp, #-4]
   19b04:	mov	sp, fp
   19b08:	pop	{fp, pc}
   19b0c:	andeq	r8, r1, r4, lsr #26
   19b10:	andeq	lr, r2, r4, ror r6
   19b14:	andeq	r8, r1, fp, ror #25
   19b18:	strdeq	r8, [r1], -r5
   19b1c:	andeq	r8, r1, r5, lsr sp
   19b20:	strdeq	r8, [r1], -r0
   19b24:	push	{fp, lr}
   19b28:	mov	fp, sp
   19b2c:	sub	sp, sp, #8
   19b30:	str	r0, [sp, #4]
   19b34:	str	r1, [sp]
   19b38:	ldr	r0, [sp]
   19b3c:	movw	r1, #0
   19b40:	cmp	r0, r1
   19b44:	beq	19b58 <test_monster_with_size@@Base+0x1b4>
   19b48:	ldr	r0, [sp, #4]
   19b4c:	bl	23414 <main@@Base+0x45c>
   19b50:	ldr	r1, [sp]
   19b54:	str	r0, [r1]
   19b58:	ldr	r0, [sp, #4]
   19b5c:	add	r0, r0, #4
   19b60:	mov	sp, fp
   19b64:	pop	{fp, pc}

00019b68 <test_string@@Base>:
   19b68:	push	{fp, lr}
   19b6c:	mov	fp, sp
   19b70:	sub	sp, sp, #56	; 0x38
   19b74:	str	r0, [fp, #-8]
   19b78:	ldr	r0, [fp, #-8]
   19b7c:	bl	286d4 <flatcc_builder_reset@@Base>
   19b80:	ldr	r1, [fp, #-8]
   19b84:	str	r0, [fp, #-24]	; 0xffffffe8
   19b88:	mov	r0, r1
   19b8c:	bl	18cdc <gen_monster@@Base+0x880>
   19b90:	ldr	r1, [fp, #-8]
   19b94:	str	r0, [sp, #28]
   19b98:	mov	r0, r1
   19b9c:	bl	19e30 <test_string@@Base+0x2c8>
   19ba0:	ldr	r1, [fp, #-8]
   19ba4:	str	r0, [sp, #24]
   19ba8:	mov	r0, r1
   19bac:	movw	r1, #3
   19bb0:	bl	19e50 <test_string@@Base+0x2e8>
   19bb4:	ldr	r1, [pc, #548]	; 19de0 <test_string@@Base+0x278>
   19bb8:	add	r1, pc, r1
   19bbc:	str	r0, [fp, #-20]	; 0xffffffec
   19bc0:	ldr	r0, [fp, #-20]	; 0xffffffec
   19bc4:	movw	r2, #49	; 0x31
   19bc8:	strb	r2, [r0]
   19bcc:	ldr	r0, [fp, #-20]	; 0xffffffec
   19bd0:	movw	r2, #50	; 0x32
   19bd4:	strb	r2, [r0, #1]
   19bd8:	ldr	r0, [fp, #-20]	; 0xffffffec
   19bdc:	movw	r2, #51	; 0x33
   19be0:	strb	r2, [r0, #2]
   19be4:	ldr	r0, [fp, #-8]
   19be8:	bl	19e78 <test_string@@Base+0x310>
   19bec:	ldr	r1, [fp, #-8]
   19bf0:	str	r0, [sp, #20]
   19bf4:	mov	r0, r1
   19bf8:	bl	19ea0 <test_string@@Base+0x338>
   19bfc:	cmp	r0, #4
   19c00:	bne	19c08 <test_string@@Base+0xa0>
   19c04:	b	19c28 <test_string@@Base+0xc0>
   19c08:	ldr	r0, [pc, #468]	; 19de4 <test_string@@Base+0x27c>
   19c0c:	add	r0, pc, r0
   19c10:	ldr	r1, [pc, #464]	; 19de8 <test_string@@Base+0x280>
   19c14:	add	r1, pc, r1
   19c18:	ldr	r2, [pc, #460]	; 19dec <test_string@@Base+0x284>
   19c1c:	add	r3, pc, r2
   19c20:	movw	r2, #1080	; 0x438
   19c24:	bl	12e68 <__assert_fail@plt>
   19c28:	ldr	r0, [pc, #448]	; 19df0 <test_string@@Base+0x288>
   19c2c:	add	r1, pc, r0
   19c30:	ldr	r0, [fp, #-8]
   19c34:	movw	r2, #30
   19c38:	bl	19ec0 <test_string@@Base+0x358>
   19c3c:	ldr	r1, [fp, #-8]
   19c40:	str	r0, [sp, #16]
   19c44:	mov	r0, r1
   19c48:	bl	19ea0 <test_string@@Base+0x338>
   19c4c:	cmp	r0, #8
   19c50:	bne	19c58 <test_string@@Base+0xf0>
   19c54:	b	19c78 <test_string@@Base+0x110>
   19c58:	ldr	r0, [pc, #404]	; 19df4 <test_string@@Base+0x28c>
   19c5c:	add	r0, pc, r0
   19c60:	ldr	r1, [pc, #400]	; 19df8 <test_string@@Base+0x290>
   19c64:	add	r1, pc, r1
   19c68:	ldr	r2, [pc, #396]	; 19dfc <test_string@@Base+0x294>
   19c6c:	add	r3, pc, r2
   19c70:	movw	r2, #1082	; 0x43a
   19c74:	bl	12e68 <__assert_fail@plt>
   19c78:	ldr	r0, [pc, #384]	; 19e00 <test_string@@Base+0x298>
   19c7c:	add	r1, pc, r0
   19c80:	ldr	r0, [fp, #-8]
   19c84:	movw	r2, #2
   19c88:	bl	19ef0 <test_string@@Base+0x388>
   19c8c:	ldr	r1, [fp, #-8]
   19c90:	str	r0, [sp, #12]
   19c94:	mov	r0, r1
   19c98:	bl	19ea0 <test_string@@Base+0x338>
   19c9c:	cmp	r0, #10
   19ca0:	bne	19ca8 <test_string@@Base+0x140>
   19ca4:	b	19cc8 <test_string@@Base+0x160>
   19ca8:	ldr	r0, [pc, #340]	; 19e04 <test_string@@Base+0x29c>
   19cac:	add	r0, pc, r0
   19cb0:	ldr	r1, [pc, #336]	; 19e08 <test_string@@Base+0x2a0>
   19cb4:	add	r1, pc, r1
   19cb8:	ldr	r2, [pc, #332]	; 19e0c <test_string@@Base+0x2a4>
   19cbc:	add	r3, pc, r2
   19cc0:	movw	r2, #1084	; 0x43c
   19cc4:	bl	12e68 <__assert_fail@plt>
   19cc8:	ldr	r0, [fp, #-8]
   19ccc:	movw	r1, #3
   19cd0:	bl	19f20 <test_string@@Base+0x3b8>
   19cd4:	ldr	r1, [fp, #-8]
   19cd8:	str	r0, [sp, #8]
   19cdc:	mov	r0, r1
   19ce0:	bl	19ea0 <test_string@@Base+0x338>
   19ce4:	cmp	r0, #7
   19ce8:	bne	19cf0 <test_string@@Base+0x188>
   19cec:	b	19d10 <test_string@@Base+0x1a8>
   19cf0:	ldr	r0, [pc, #280]	; 19e10 <test_string@@Base+0x2a8>
   19cf4:	add	r0, pc, r0
   19cf8:	ldr	r1, [pc, #276]	; 19e14 <test_string@@Base+0x2ac>
   19cfc:	add	r1, pc, r1
   19d00:	ldr	r2, [pc, #272]	; 19e18 <test_string@@Base+0x2b0>
   19d04:	add	r3, pc, r2
   19d08:	movw	r2, #1086	; 0x43e
   19d0c:	bl	12e68 <__assert_fail@plt>
   19d10:	ldr	r0, [fp, #-8]
   19d14:	bl	19f48 <test_string@@Base+0x3e0>
   19d18:	str	r0, [fp, #-20]	; 0xffffffec
   19d1c:	ldr	r0, [fp, #-20]	; 0xffffffec
   19d20:	movw	r1, #46	; 0x2e
   19d24:	strb	r1, [r0, #4]
   19d28:	ldr	r0, [fp, #-8]
   19d2c:	bl	19f68 <test_string@@Base+0x400>
   19d30:	ldr	r1, [fp, #-8]
   19d34:	str	r0, [sp, #4]
   19d38:	mov	r0, r1
   19d3c:	bl	19880 <gen_monster@@Base+0x1424>
   19d40:	ldr	r1, [fp, #-8]
   19d44:	str	r0, [sp]
   19d48:	mov	r0, r1
   19d4c:	movw	r1, #0
   19d50:	bl	2d8a8 <flatcc_builder_get_direct_buffer@@Base>
   19d54:	str	r0, [fp, #-16]
   19d58:	ldr	r0, [fp, #-16]
   19d5c:	movw	r1, #0
   19d60:	cmp	r0, r1
   19d64:	beq	19d6c <test_string@@Base+0x204>
   19d68:	b	19d8c <test_string@@Base+0x224>
   19d6c:	ldr	r0, [pc, #168]	; 19e1c <test_string@@Base+0x2b4>
   19d70:	add	r0, pc, r0
   19d74:	ldr	r1, [pc, #164]	; 19e20 <test_string@@Base+0x2b8>
   19d78:	add	r1, pc, r1
   19d7c:	ldr	r2, [pc, #160]	; 19e24 <test_string@@Base+0x2bc>
   19d80:	add	r3, pc, r2
   19d84:	movw	r2, #1093	; 0x445
   19d88:	bl	12e68 <__assert_fail@plt>
   19d8c:	ldr	r0, [fp, #-16]
   19d90:	bl	131f4 <verify_empty_monster@@Base+0x28c>
   19d94:	str	r0, [fp, #-12]
   19d98:	ldr	r0, [fp, #-12]
   19d9c:	bl	16bcc <verify_monster@@Base+0x1200>
   19da0:	ldr	r1, [pc, #132]	; 19e2c <test_string@@Base+0x2c4>
   19da4:	add	r1, pc, r1
   19da8:	bl	12d90 <strcmp@plt>
   19dac:	cmp	r0, #0
   19db0:	beq	19dcc <test_string@@Base+0x264>
   19db4:	ldr	r0, [pc, #108]	; 19e28 <test_string@@Base+0x2c0>
   19db8:	add	r0, pc, r0
   19dbc:	bl	12d9c <printf@plt>
   19dc0:	mvn	r1, #0
   19dc4:	str	r1, [fp, #-4]
   19dc8:	b	19dd4 <test_string@@Base+0x26c>
   19dcc:	movw	r0, #0
   19dd0:	str	r0, [fp, #-4]
   19dd4:	ldr	r0, [fp, #-4]
   19dd8:	mov	sp, fp
   19ddc:	pop	{fp, pc}
   19de0:	andeq	r8, r1, r6, asr ip
   19de4:	ldrdeq	r8, [r1], -lr
   19de8:	andeq	r8, r1, r3, lsr r5
   19dec:	strdeq	r8, [r1], -r4
   19df0:	andeq	r8, r1, r8, lsl #24
   19df4:	ldrdeq	r8, [r1], -sp
   19df8:	andeq	r8, r1, r3, ror #9
   19dfc:	andeq	r8, r1, r4, lsr #23
   19e00:	andeq	r8, r1, r3, ror #23
   19e04:			; <UNDEFINED> instruction: 0x00018bb6
   19e08:	muleq	r1, r3, r4
   19e0c:	andeq	r8, r1, r4, asr fp
   19e10:	muleq	r1, r5, fp
   19e14:	andeq	r8, r1, fp, asr #8
   19e18:	andeq	r8, r1, ip, lsl #22
   19e1c:	andeq	r9, r1, ip, asr #6
   19e20:	andeq	r8, r1, pc, asr #7
   19e24:	muleq	r1, r0, sl
   19e28:	strdeq	r8, [r1], -pc	; <UNPREDICTABLE>
   19e2c:	andeq	r8, r1, fp, lsl #22
   19e30:	push	{fp, lr}
   19e34:	mov	fp, sp
   19e38:	sub	sp, sp, #8
   19e3c:	str	r0, [sp, #4]
   19e40:	ldr	r0, [sp, #4]
   19e44:	bl	2aad8 <flatcc_builder_start_string@@Base>
   19e48:	mov	sp, fp
   19e4c:	pop	{fp, pc}
   19e50:	push	{fp, lr}
   19e54:	mov	fp, sp
   19e58:	sub	sp, sp, #8
   19e5c:	str	r0, [sp, #4]
   19e60:	str	r1, [sp]
   19e64:	ldr	r0, [sp, #4]
   19e68:	ldr	r1, [sp]
   19e6c:	bl	2a298 <flatcc_builder_extend_string@@Base>
   19e70:	mov	sp, fp
   19e74:	pop	{fp, pc}
   19e78:	push	{fp, lr}
   19e7c:	mov	fp, sp
   19e80:	sub	sp, sp, #8
   19e84:	str	r0, [sp, #4]
   19e88:	str	r1, [sp]
   19e8c:	ldr	r0, [sp, #4]
   19e90:	ldr	r1, [sp]
   19e94:	bl	2a3d0 <flatcc_builder_append_string_str@@Base>
   19e98:	mov	sp, fp
   19e9c:	pop	{fp, pc}
   19ea0:	push	{fp, lr}
   19ea4:	mov	fp, sp
   19ea8:	sub	sp, sp, #8
   19eac:	str	r0, [sp, #4]
   19eb0:	ldr	r0, [sp, #4]
   19eb4:	bl	2d2ec <flatcc_builder_string_len@@Base>
   19eb8:	mov	sp, fp
   19ebc:	pop	{fp, pc}
   19ec0:	push	{fp, lr}
   19ec4:	mov	fp, sp
   19ec8:	sub	sp, sp, #16
   19ecc:	str	r0, [fp, #-4]
   19ed0:	str	r1, [sp, #8]
   19ed4:	str	r2, [sp, #4]
   19ed8:	ldr	r0, [fp, #-4]
   19edc:	ldr	r1, [sp, #8]
   19ee0:	ldr	r2, [sp, #4]
   19ee4:	bl	2a420 <flatcc_builder_append_string_strn@@Base>
   19ee8:	mov	sp, fp
   19eec:	pop	{fp, pc}
   19ef0:	push	{fp, lr}
   19ef4:	mov	fp, sp
   19ef8:	sub	sp, sp, #16
   19efc:	str	r0, [fp, #-4]
   19f00:	str	r1, [sp, #8]
   19f04:	str	r2, [sp, #4]
   19f08:	ldr	r0, [fp, #-4]
   19f0c:	ldr	r1, [sp, #8]
   19f10:	ldr	r2, [sp, #4]
   19f14:	bl	2a330 <flatcc_builder_append_string@@Base>
   19f18:	mov	sp, fp
   19f1c:	pop	{fp, pc}
   19f20:	push	{fp, lr}
   19f24:	mov	fp, sp
   19f28:	sub	sp, sp, #8
   19f2c:	str	r0, [sp, #4]
   19f30:	str	r1, [sp]
   19f34:	ldr	r0, [sp, #4]
   19f38:	ldr	r1, [sp]
   19f3c:	bl	2a748 <flatcc_builder_truncate_string@@Base>
   19f40:	mov	sp, fp
   19f44:	pop	{fp, pc}
   19f48:	push	{fp, lr}
   19f4c:	mov	fp, sp
   19f50:	sub	sp, sp, #8
   19f54:	str	r0, [sp, #4]
   19f58:	ldr	r0, [sp, #4]
   19f5c:	bl	2d2d4 <flatcc_builder_string_edit@@Base>
   19f60:	mov	sp, fp
   19f64:	pop	{fp, pc}
   19f68:	push	{fp, lr}
   19f6c:	mov	fp, sp
   19f70:	sub	sp, sp, #16
   19f74:	str	r0, [fp, #-4]
   19f78:	ldr	r0, [fp, #-4]
   19f7c:	ldr	r1, [fp, #-4]
   19f80:	str	r0, [sp, #8]
   19f84:	mov	r0, r1
   19f88:	bl	2d1e4 <flatcc_builder_end_string@@Base>
   19f8c:	ldr	r1, [sp, #8]
   19f90:	str	r0, [sp, #4]
   19f94:	mov	r0, r1
   19f98:	ldr	r1, [sp, #4]
   19f9c:	bl	19154 <gen_monster@@Base+0xcf8>
   19fa0:	mov	sp, fp
   19fa4:	pop	{fp, pc}

00019fa8 <test_sort_find@@Base>:
   19fa8:	push	{fp, lr}
   19fac:	mov	fp, sp
   19fb0:	sub	sp, sp, #144	; 0x90
   19fb4:	str	r0, [fp, #-4]
   19fb8:	mvn	r0, #0
   19fbc:	str	r0, [fp, #-32]	; 0xffffffe0
   19fc0:	ldr	r0, [fp, #-4]
   19fc4:	bl	286d4 <flatcc_builder_reset@@Base>
   19fc8:	ldr	r1, [fp, #-4]
   19fcc:	str	r0, [fp, #-36]	; 0xffffffdc
   19fd0:	mov	r0, r1
   19fd4:	bl	18cdc <gen_monster@@Base+0x880>
   19fd8:	ldr	r1, [pc, #1424]	; 1a570 <test_sort_find@@Base+0x5c8>
   19fdc:	add	r1, pc, r1
   19fe0:	ldr	r2, [fp, #-4]
   19fe4:	str	r0, [fp, #-40]	; 0xffffffd8
   19fe8:	mov	r0, r2
   19fec:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   19ff0:	ldr	r1, [fp, #-4]
   19ff4:	str	r0, [fp, #-44]	; 0xffffffd4
   19ff8:	mov	r0, r1
   19ffc:	bl	191c0 <gen_monster@@Base+0xd64>
   1a000:	ldr	r1, [fp, #-4]
   1a004:	str	r0, [fp, #-48]	; 0xffffffd0
   1a008:	mov	r0, r1
   1a00c:	bl	19208 <gen_monster@@Base+0xdac>
   1a010:	ldr	r1, [pc, #1364]	; 1a56c <test_sort_find@@Base+0x5c4>
   1a014:	add	r1, pc, r1
   1a018:	ldr	r2, [fp, #-4]
   1a01c:	str	r0, [fp, #-52]	; 0xffffffcc
   1a020:	mov	r0, r2
   1a024:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   1a028:	ldr	r1, [fp, #-4]
   1a02c:	str	r0, [fp, #-56]	; 0xffffffc8
   1a030:	mov	r0, r1
   1a034:	bl	19280 <gen_monster@@Base+0xe24>
   1a038:	ldr	r1, [fp, #-4]
   1a03c:	str	r0, [fp, #-60]	; 0xffffffc4
   1a040:	mov	r0, r1
   1a044:	bl	19208 <gen_monster@@Base+0xdac>
   1a048:	ldr	r1, [pc, #1304]	; 1a568 <test_sort_find@@Base+0x5c0>
   1a04c:	add	r1, pc, r1
   1a050:	ldr	r2, [fp, #-4]
   1a054:	str	r0, [fp, #-64]	; 0xffffffc0
   1a058:	mov	r0, r2
   1a05c:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   1a060:	ldr	r1, [fp, #-4]
   1a064:	str	r0, [fp, #-68]	; 0xffffffbc
   1a068:	mov	r0, r1
   1a06c:	bl	19280 <gen_monster@@Base+0xe24>
   1a070:	ldr	r1, [fp, #-4]
   1a074:	str	r0, [sp, #72]	; 0x48
   1a078:	mov	r0, r1
   1a07c:	bl	19208 <gen_monster@@Base+0xdac>
   1a080:	ldr	r1, [pc, #1244]	; 1a564 <test_sort_find@@Base+0x5bc>
   1a084:	add	r1, pc, r1
   1a088:	ldr	r2, [fp, #-4]
   1a08c:	str	r0, [sp, #68]	; 0x44
   1a090:	mov	r0, r2
   1a094:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   1a098:	ldr	r1, [fp, #-4]
   1a09c:	str	r0, [sp, #64]	; 0x40
   1a0a0:	mov	r0, r1
   1a0a4:	bl	19280 <gen_monster@@Base+0xe24>
   1a0a8:	ldr	r1, [fp, #-4]
   1a0ac:	str	r0, [sp, #60]	; 0x3c
   1a0b0:	mov	r0, r1
   1a0b4:	bl	19208 <gen_monster@@Base+0xdac>
   1a0b8:	ldr	r1, [pc, #1184]	; 1a560 <test_sort_find@@Base+0x5b8>
   1a0bc:	add	r1, pc, r1
   1a0c0:	ldr	r2, [fp, #-4]
   1a0c4:	str	r0, [sp, #56]	; 0x38
   1a0c8:	mov	r0, r2
   1a0cc:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   1a0d0:	ldr	r1, [fp, #-4]
   1a0d4:	str	r0, [sp, #52]	; 0x34
   1a0d8:	mov	r0, r1
   1a0dc:	bl	19280 <gen_monster@@Base+0xe24>
   1a0e0:	ldr	r1, [fp, #-4]
   1a0e4:	str	r0, [sp, #48]	; 0x30
   1a0e8:	mov	r0, r1
   1a0ec:	bl	19208 <gen_monster@@Base+0xdac>
   1a0f0:	ldr	r1, [pc, #1124]	; 1a55c <test_sort_find@@Base+0x5b4>
   1a0f4:	add	r1, pc, r1
   1a0f8:	ldr	r2, [fp, #-4]
   1a0fc:	str	r0, [sp, #44]	; 0x2c
   1a100:	mov	r0, r2
   1a104:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   1a108:	ldr	r1, [fp, #-4]
   1a10c:	str	r0, [sp, #40]	; 0x28
   1a110:	mov	r0, r1
   1a114:	bl	19280 <gen_monster@@Base+0xe24>
   1a118:	ldr	r1, [fp, #-4]
   1a11c:	str	r0, [sp, #36]	; 0x24
   1a120:	mov	r0, r1
   1a124:	bl	19358 <gen_monster@@Base+0xefc>
   1a128:	ldr	r1, [fp, #-4]
   1a12c:	str	r0, [sp, #32]
   1a130:	mov	r0, r1
   1a134:	bl	19880 <gen_monster@@Base+0x1424>
   1a138:	ldr	r1, [fp, #-4]
   1a13c:	str	r0, [sp, #28]
   1a140:	mov	r0, r1
   1a144:	sub	r1, fp, #28
   1a148:	bl	2db44 <flatcc_builder_finalize_aligned_buffer@@Base>
   1a14c:	ldr	r1, [pc, #1024]	; 1a554 <test_sort_find@@Base+0x5ac>
   1a150:	add	r1, pc, r1
   1a154:	ldr	r2, [pc, #1020]	; 1a558 <test_sort_find@@Base+0x5b0>
   1a158:	ldr	r2, [pc, r2]
   1a15c:	str	r0, [fp, #-24]	; 0xffffffe8
   1a160:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a164:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a168:	ldr	r2, [r2]
   1a16c:	str	r0, [sp, #24]
   1a170:	mov	r0, r1
   1a174:	ldr	r1, [sp, #24]
   1a178:	str	r2, [sp, #20]
   1a17c:	mov	r2, r3
   1a180:	ldr	r3, [sp, #20]
   1a184:	bl	13ae8 <test_type_aliases@@Base+0x4f0>
   1a188:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a18c:	bl	131f4 <verify_empty_monster@@Base+0x28c>
   1a190:	str	r0, [fp, #-12]
   1a194:	ldr	r0, [fp, #-12]
   1a198:	bl	17594 <verify_monster@@Base+0x1bc8>
   1a19c:	str	r0, [fp, #-16]
   1a1a0:	ldr	r0, [fp, #-16]
   1a1a4:	movw	r1, #0
   1a1a8:	cmp	r0, r1
   1a1ac:	beq	1a1b4 <test_sort_find@@Base+0x20c>
   1a1b0:	b	1a1d4 <test_sort_find@@Base+0x22c>
   1a1b4:	ldr	r0, [pc, #952]	; 1a574 <test_sort_find@@Base+0x5cc>
   1a1b8:	add	r0, pc, r0
   1a1bc:	ldr	r1, [pc, #948]	; 1a578 <test_sort_find@@Base+0x5d0>
   1a1c0:	add	r1, pc, r1
   1a1c4:	ldr	r2, [pc, #944]	; 1a57c <test_sort_find@@Base+0x5d4>
   1a1c8:	add	r3, pc, r2
   1a1cc:	movw	r2, #1147	; 0x47b
   1a1d0:	bl	12e68 <__assert_fail@plt>
   1a1d4:	ldr	r0, [fp, #-16]
   1a1d8:	str	r0, [fp, #-20]	; 0xffffffec
   1a1dc:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a1e0:	bl	1a604 <test_sort_find@@Base+0x65c>
   1a1e4:	ldr	r0, [pc, #916]	; 1a580 <test_sort_find@@Base+0x5d8>
   1a1e8:	add	r0, pc, r0
   1a1ec:	ldr	r1, [pc, #912]	; 1a584 <test_sort_find@@Base+0x5dc>
   1a1f0:	ldr	r1, [pc, r1]
   1a1f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a1f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a1fc:	ldr	r1, [r1]
   1a200:	str	r1, [sp, #16]
   1a204:	mov	r1, r2
   1a208:	mov	r2, r3
   1a20c:	ldr	r3, [sp, #16]
   1a210:	bl	13ae8 <test_type_aliases@@Base+0x4f0>
   1a214:	ldr	r0, [fp, #-16]
   1a218:	bl	1769c <verify_monster@@Base+0x1cd0>
   1a21c:	cmp	r0, #5
   1a220:	beq	1a234 <test_sort_find@@Base+0x28c>
   1a224:	ldr	r0, [pc, #960]	; 1a5ec <test_sort_find@@Base+0x644>
   1a228:	add	r0, pc, r0
   1a22c:	bl	12d9c <printf@plt>
   1a230:	b	1a540 <test_sort_find@@Base+0x598>
   1a234:	ldr	r0, [fp, #-16]
   1a238:	movw	r1, #0
   1a23c:	bl	176ec <verify_monster@@Base+0x1d20>
   1a240:	bl	16bcc <verify_monster@@Base+0x1200>
   1a244:	ldr	r1, [pc, #932]	; 1a5f0 <test_sort_find@@Base+0x648>
   1a248:	add	r1, pc, r1
   1a24c:	bl	12d90 <strcmp@plt>
   1a250:	cmp	r0, #0
   1a254:	beq	1a268 <test_sort_find@@Base+0x2c0>
   1a258:	ldr	r0, [pc, #904]	; 1a5e8 <test_sort_find@@Base+0x640>
   1a25c:	add	r0, pc, r0
   1a260:	bl	12d9c <printf@plt>
   1a264:	b	1a540 <test_sort_find@@Base+0x598>
   1a268:	ldr	r0, [fp, #-16]
   1a26c:	movw	r1, #1
   1a270:	bl	176ec <verify_monster@@Base+0x1d20>
   1a274:	bl	16bcc <verify_monster@@Base+0x1200>
   1a278:	ldr	r1, [pc, #884]	; 1a5f4 <test_sort_find@@Base+0x64c>
   1a27c:	add	r1, pc, r1
   1a280:	bl	12d90 <strcmp@plt>
   1a284:	cmp	r0, #0
   1a288:	beq	1a29c <test_sort_find@@Base+0x2f4>
   1a28c:	ldr	r0, [pc, #848]	; 1a5e4 <test_sort_find@@Base+0x63c>
   1a290:	add	r0, pc, r0
   1a294:	bl	12d9c <printf@plt>
   1a298:	b	1a540 <test_sort_find@@Base+0x598>
   1a29c:	ldr	r0, [fp, #-16]
   1a2a0:	movw	r1, #2
   1a2a4:	bl	176ec <verify_monster@@Base+0x1d20>
   1a2a8:	bl	16bcc <verify_monster@@Base+0x1200>
   1a2ac:	ldr	r1, [pc, #836]	; 1a5f8 <test_sort_find@@Base+0x650>
   1a2b0:	add	r1, pc, r1
   1a2b4:	bl	12d90 <strcmp@plt>
   1a2b8:	cmp	r0, #0
   1a2bc:	beq	1a2d0 <test_sort_find@@Base+0x328>
   1a2c0:	ldr	r0, [pc, #792]	; 1a5e0 <test_sort_find@@Base+0x638>
   1a2c4:	add	r0, pc, r0
   1a2c8:	bl	12d9c <printf@plt>
   1a2cc:	b	1a540 <test_sort_find@@Base+0x598>
   1a2d0:	ldr	r0, [fp, #-16]
   1a2d4:	movw	r1, #3
   1a2d8:	bl	176ec <verify_monster@@Base+0x1d20>
   1a2dc:	bl	16bcc <verify_monster@@Base+0x1200>
   1a2e0:	ldr	r1, [pc, #788]	; 1a5fc <test_sort_find@@Base+0x654>
   1a2e4:	add	r1, pc, r1
   1a2e8:	bl	12d90 <strcmp@plt>
   1a2ec:	cmp	r0, #0
   1a2f0:	beq	1a304 <test_sort_find@@Base+0x35c>
   1a2f4:	ldr	r0, [pc, #736]	; 1a5dc <test_sort_find@@Base+0x634>
   1a2f8:	add	r0, pc, r0
   1a2fc:	bl	12d9c <printf@plt>
   1a300:	b	1a540 <test_sort_find@@Base+0x598>
   1a304:	ldr	r0, [fp, #-16]
   1a308:	movw	r1, #4
   1a30c:	bl	176ec <verify_monster@@Base+0x1d20>
   1a310:	bl	16bcc <verify_monster@@Base+0x1200>
   1a314:	ldr	r1, [pc, #740]	; 1a600 <test_sort_find@@Base+0x658>
   1a318:	add	r1, pc, r1
   1a31c:	bl	12d90 <strcmp@plt>
   1a320:	cmp	r0, #0
   1a324:	beq	1a338 <test_sort_find@@Base+0x390>
   1a328:	ldr	r0, [pc, #680]	; 1a5d8 <test_sort_find@@Base+0x630>
   1a32c:	add	r0, pc, r0
   1a330:	bl	12d9c <printf@plt>
   1a334:	b	1a540 <test_sort_find@@Base+0x598>
   1a338:	ldr	r0, [fp, #-16]
   1a33c:	movw	r1, #1
   1a340:	bl	176ec <verify_monster@@Base+0x1d20>
   1a344:	ldr	r1, [fp, #-16]
   1a348:	str	r0, [sp, #12]
   1a34c:	mov	r0, r1
   1a350:	movw	r1, #2
   1a354:	bl	176ec <verify_monster@@Base+0x1d20>
   1a358:	ldr	r1, [sp, #12]
   1a35c:	cmp	r1, r0
   1a360:	bne	1a374 <test_sort_find@@Base+0x3cc>
   1a364:	ldr	r0, [pc, #616]	; 1a5d4 <test_sort_find@@Base+0x62c>
   1a368:	add	r0, pc, r0
   1a36c:	bl	12d9c <printf@plt>
   1a370:	b	1a540 <test_sort_find@@Base+0x598>
   1a374:	ldr	r0, [pc, #524]	; 1a588 <test_sort_find@@Base+0x5e0>
   1a378:	add	r1, pc, r0
   1a37c:	ldr	r0, [fp, #-16]
   1a380:	bl	1a624 <test_sort_find@@Base+0x67c>
   1a384:	movw	r1, #3
   1a388:	cmp	r1, r0
   1a38c:	beq	1a3a0 <test_sort_find@@Base+0x3f8>
   1a390:	ldr	r0, [pc, #568]	; 1a5d0 <test_sort_find@@Base+0x628>
   1a394:	add	r0, pc, r0
   1a398:	bl	12d9c <printf@plt>
   1a39c:	b	1a540 <test_sort_find@@Base+0x598>
   1a3a0:	ldr	r0, [pc, #484]	; 1a58c <test_sort_find@@Base+0x5e4>
   1a3a4:	add	r1, pc, r0
   1a3a8:	ldr	r0, [fp, #-16]
   1a3ac:	movw	r2, #5
   1a3b0:	bl	1a64c <test_sort_find@@Base+0x6a4>
   1a3b4:	movw	r1, #3
   1a3b8:	cmp	r1, r0
   1a3bc:	beq	1a3d0 <test_sort_find@@Base+0x428>
   1a3c0:	ldr	r0, [pc, #516]	; 1a5cc <test_sort_find@@Base+0x624>
   1a3c4:	add	r0, pc, r0
   1a3c8:	bl	12d9c <printf@plt>
   1a3cc:	b	1a540 <test_sort_find@@Base+0x598>
   1a3d0:	ldr	r0, [pc, #440]	; 1a590 <test_sort_find@@Base+0x5e8>
   1a3d4:	add	r1, pc, r0
   1a3d8:	ldr	r0, [fp, #-16]
   1a3dc:	bl	1a67c <test_sort_find@@Base+0x6d4>
   1a3e0:	movw	r1, #3
   1a3e4:	cmp	r1, r0
   1a3e8:	beq	1a3fc <test_sort_find@@Base+0x454>
   1a3ec:	ldr	r0, [pc, #468]	; 1a5c8 <test_sort_find@@Base+0x620>
   1a3f0:	add	r0, pc, r0
   1a3f4:	bl	12d9c <printf@plt>
   1a3f8:	b	1a540 <test_sort_find@@Base+0x598>
   1a3fc:	ldr	r0, [pc, #400]	; 1a594 <test_sort_find@@Base+0x5ec>
   1a400:	add	r1, pc, r0
   1a404:	ldr	r0, [fp, #-16]
   1a408:	movw	r2, #5
   1a40c:	bl	1a7b4 <test_sort_find@@Base+0x80c>
   1a410:	movw	r1, #3
   1a414:	cmp	r1, r0
   1a418:	beq	1a42c <test_sort_find@@Base+0x484>
   1a41c:	ldr	r0, [pc, #416]	; 1a5c4 <test_sort_find@@Base+0x61c>
   1a420:	add	r0, pc, r0
   1a424:	bl	12d9c <printf@plt>
   1a428:	b	1a540 <test_sort_find@@Base+0x598>
   1a42c:	ldr	r0, [pc, #356]	; 1a598 <test_sort_find@@Base+0x5f0>
   1a430:	add	r1, pc, r0
   1a434:	ldr	r0, [pc, #352]	; 1a59c <test_sort_find@@Base+0x5f4>
   1a438:	add	r0, pc, r0
   1a43c:	ldr	r0, [r0]
   1a440:	ldr	r2, [fp, #-16]
   1a444:	str	r0, [sp, #8]
   1a448:	mov	r0, r2
   1a44c:	bl	1a67c <test_sort_find@@Base+0x6d4>
   1a450:	ldr	r1, [sp, #8]
   1a454:	cmp	r1, r0
   1a458:	beq	1a46c <test_sort_find@@Base+0x4c4>
   1a45c:	ldr	r0, [pc, #348]	; 1a5c0 <test_sort_find@@Base+0x618>
   1a460:	add	r0, pc, r0
   1a464:	bl	12d9c <printf@plt>
   1a468:	b	1a540 <test_sort_find@@Base+0x598>
   1a46c:	ldr	r0, [pc, #300]	; 1a5a0 <test_sort_find@@Base+0x5f8>
   1a470:	add	r1, pc, r0
   1a474:	ldr	r0, [fp, #-16]
   1a478:	bl	1a67c <test_sort_find@@Base+0x6d4>
   1a47c:	movw	r1, #0
   1a480:	cmp	r1, r0
   1a484:	beq	1a498 <test_sort_find@@Base+0x4f0>
   1a488:	ldr	r0, [pc, #300]	; 1a5bc <test_sort_find@@Base+0x614>
   1a48c:	add	r0, pc, r0
   1a490:	bl	12d9c <printf@plt>
   1a494:	b	1a540 <test_sort_find@@Base+0x598>
   1a498:	ldr	r0, [pc, #260]	; 1a5a4 <test_sort_find@@Base+0x5fc>
   1a49c:	add	r1, pc, r0
   1a4a0:	ldr	r0, [fp, #-16]
   1a4a4:	bl	1a67c <test_sort_find@@Base+0x6d4>
   1a4a8:	str	r0, [fp, #-8]
   1a4ac:	movw	r1, #1
   1a4b0:	cmp	r1, r0
   1a4b4:	beq	1a4e4 <test_sort_find@@Base+0x53c>
   1a4b8:	ldr	r0, [pc, #248]	; 1a5b8 <test_sort_find@@Base+0x610>
   1a4bc:	add	r0, pc, r0
   1a4c0:	bl	12d9c <printf@plt>
   1a4c4:	ldr	r1, [pc, #232]	; 1a5b4 <test_sort_find@@Base+0x60c>
   1a4c8:	add	r1, pc, r1
   1a4cc:	ldr	r2, [fp, #-8]
   1a4d0:	str	r0, [sp, #4]
   1a4d4:	mov	r0, r1
   1a4d8:	mov	r1, r2
   1a4dc:	bl	12d9c <printf@plt>
   1a4e0:	b	1a540 <test_sort_find@@Base+0x598>
   1a4e4:	ldr	r0, [pc, #188]	; 1a5a8 <test_sort_find@@Base+0x600>
   1a4e8:	add	r1, pc, r0
   1a4ec:	ldr	r0, [fp, #-16]
   1a4f0:	bl	1a67c <test_sort_find@@Base+0x6d4>
   1a4f4:	str	r0, [fp, #-8]
   1a4f8:	movw	r1, #4
   1a4fc:	cmp	r1, r0
   1a500:	beq	1a530 <test_sort_find@@Base+0x588>
   1a504:	ldr	r0, [pc, #164]	; 1a5b0 <test_sort_find@@Base+0x608>
   1a508:	add	r0, pc, r0
   1a50c:	bl	12d9c <printf@plt>
   1a510:	ldr	r1, [pc, #148]	; 1a5ac <test_sort_find@@Base+0x604>
   1a514:	add	r1, pc, r1
   1a518:	ldr	r2, [fp, #-8]
   1a51c:	str	r0, [sp]
   1a520:	mov	r0, r1
   1a524:	mov	r1, r2
   1a528:	bl	12d9c <printf@plt>
   1a52c:	b	1a540 <test_sort_find@@Base+0x598>
   1a530:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a534:	bl	1a604 <test_sort_find@@Base+0x65c>
   1a538:	movw	r0, #0
   1a53c:	str	r0, [fp, #-32]	; 0xffffffe0
   1a540:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a544:	bl	2dcec <flatcc_builder_aligned_free@@Base>
   1a548:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a54c:	mov	sp, fp
   1a550:	pop	{fp, pc}
   1a554:	andeq	r8, r1, r1, lsl #15
   1a558:	strdeq	sp, [r2], -ip
   1a55c:	andeq	r8, r1, lr, ror #2
   1a560:	andeq	r8, r1, pc, lsl #16
   1a564:	ldrdeq	r8, [r1], -lr
   1a568:	andeq	r8, r1, lr, ror #3
   1a56c:	andeq	r8, r1, r6, asr #3
   1a570:	ldrdeq	r7, [r1], -r3
   1a574:	andeq	r8, r1, r1, lsr r7
   1a578:	andeq	r7, r1, r7, lsl #31
   1a57c:	andeq	r8, r1, sl, lsr #14
   1a580:	andeq	r8, r1, fp, ror #13
   1a584:	andeq	sp, r2, r4, ror #28
   1a588:	andeq	r7, r1, r2, asr #29
   1a58c:	andeq	r8, r1, r7, lsr #13
   1a590:	andeq	r7, r1, r6, ror #28
   1a594:	andeq	r8, r1, r2, lsr #13
   1a598:	muleq	r1, sp, r6
   1a59c:	andeq	sp, r2, r4, lsr ip
   1a5a0:	andeq	r8, r1, fp, asr r4
   1a5a4:	andeq	r7, r1, r6, asr #27
   1a5a8:	strdeq	r7, [r1], -r2
   1a5ac:	andeq	r8, r1, r8, ror #11
   1a5b0:	strdeq	r8, [r1], -ip
   1a5b4:	andeq	r8, r1, r4, lsr r6
   1a5b8:	andeq	r8, r1, r6, asr r7
   1a5bc:	andeq	r8, r1, pc, asr r6
   1a5c0:	andeq	r8, r1, r4, ror r6
   1a5c4:	andeq	r8, r1, r9, lsl #13
   1a5c8:	muleq	r1, r5, r6
   1a5cc:	andeq	r8, r1, lr, lsl #13
   1a5d0:	andeq	r8, r1, fp, lsl #13
   1a5d4:	andeq	r8, r1, pc, ror #12
   1a5d8:	andeq	r8, r1, sp, lsl #13
   1a5dc:	andeq	r8, r1, r3, lsr #13
   1a5e0:			; <UNDEFINED> instruction: 0x000186b9
   1a5e4:	andeq	r8, r1, pc, asr #13
   1a5e8:	andeq	r8, r1, r5, ror #13
   1a5ec:	strdeq	r8, [r1], -r1
   1a5f0:	andeq	r8, r1, r3, lsl #13
   1a5f4:	andeq	r7, r1, r6, ror #31
   1a5f8:			; <UNDEFINED> instruction: 0x00017fb2
   1a5fc:	andeq	r7, r1, r6, asr pc
   1a600:	andeq	r7, r1, r2, asr #29
   1a604:	push	{fp, lr}
   1a608:	mov	fp, sp
   1a60c:	sub	sp, sp, #8
   1a610:	str	r0, [sp, #4]
   1a614:	ldr	r0, [sp, #4]
   1a618:	bl	261d0 <main@@Base+0x3218>
   1a61c:	mov	sp, fp
   1a620:	pop	{fp, pc}
   1a624:	push	{fp, lr}
   1a628:	mov	fp, sp
   1a62c:	sub	sp, sp, #8
   1a630:	str	r0, [sp, #4]
   1a634:	str	r1, [sp]
   1a638:	ldr	r0, [sp, #4]
   1a63c:	ldr	r1, [sp]
   1a640:	bl	1a67c <test_sort_find@@Base+0x6d4>
   1a644:	mov	sp, fp
   1a648:	pop	{fp, pc}
   1a64c:	push	{fp, lr}
   1a650:	mov	fp, sp
   1a654:	sub	sp, sp, #16
   1a658:	str	r0, [fp, #-4]
   1a65c:	str	r1, [sp, #8]
   1a660:	str	r2, [sp, #4]
   1a664:	ldr	r0, [fp, #-4]
   1a668:	ldr	r1, [sp, #8]
   1a66c:	ldr	r2, [sp, #4]
   1a670:	bl	1a7b4 <test_sort_find@@Base+0x80c>
   1a674:	mov	sp, fp
   1a678:	pop	{fp, pc}
   1a67c:	push	{fp, lr}
   1a680:	mov	fp, sp
   1a684:	sub	sp, sp, #32
   1a688:	str	r0, [fp, #-8]
   1a68c:	str	r1, [fp, #-12]
   1a690:	movw	r0, #0
   1a694:	str	r0, [sp, #12]
   1a698:	ldr	r0, [fp, #-8]
   1a69c:	bl	1769c <verify_monster@@Base+0x1cd0>
   1a6a0:	str	r0, [sp, #8]
   1a6a4:	cmp	r0, #0
   1a6a8:	bne	1a6c0 <test_sort_find@@Base+0x718>
   1a6ac:	ldr	r0, [pc, #248]	; 1a7ac <test_sort_find@@Base+0x804>
   1a6b0:	add	r0, pc, r0
   1a6b4:	ldr	r0, [r0]
   1a6b8:	str	r0, [fp, #-4]
   1a6bc:	b	1a7a0 <test_sort_find@@Base+0x7f8>
   1a6c0:	ldr	r0, [sp, #8]
   1a6c4:	mvn	r1, #0
   1a6c8:	add	r0, r0, r1
   1a6cc:	str	r0, [sp, #8]
   1a6d0:	ldr	r0, [sp, #12]
   1a6d4:	ldr	r1, [sp, #8]
   1a6d8:	cmp	r0, r1
   1a6dc:	bcs	1a744 <test_sort_find@@Base+0x79c>
   1a6e0:	ldr	r0, [sp, #12]
   1a6e4:	ldr	r1, [sp, #8]
   1a6e8:	ldr	r2, [sp, #12]
   1a6ec:	sub	r1, r1, r2
   1a6f0:	lsr	r1, r1, #1
   1a6f4:	add	r0, r0, r1
   1a6f8:	str	r0, [sp, #4]
   1a6fc:	ldr	r0, [fp, #-8]
   1a700:	ldr	r1, [sp, #4]
   1a704:	bl	176ec <verify_monster@@Base+0x1d20>
   1a708:	bl	16bcc <verify_monster@@Base+0x1200>
   1a70c:	str	r0, [sp, #16]
   1a710:	ldr	r0, [sp, #16]
   1a714:	ldr	r1, [fp, #-12]
   1a718:	movw	r2, #0
   1a71c:	bl	265b8 <main@@Base+0x3600>
   1a720:	cmp	r0, #0
   1a724:	bge	1a738 <test_sort_find@@Base+0x790>
   1a728:	ldr	r0, [sp, #4]
   1a72c:	add	r0, r0, #1
   1a730:	str	r0, [sp, #12]
   1a734:	b	1a740 <test_sort_find@@Base+0x798>
   1a738:	ldr	r0, [sp, #4]
   1a73c:	str	r0, [sp, #8]
   1a740:	b	1a6d0 <test_sort_find@@Base+0x728>
   1a744:	ldr	r0, [sp, #12]
   1a748:	ldr	r1, [sp, #8]
   1a74c:	cmp	r0, r1
   1a750:	bne	1a790 <test_sort_find@@Base+0x7e8>
   1a754:	ldr	r0, [fp, #-8]
   1a758:	ldr	r1, [sp, #12]
   1a75c:	bl	176ec <verify_monster@@Base+0x1d20>
   1a760:	bl	16bcc <verify_monster@@Base+0x1200>
   1a764:	str	r0, [sp, #16]
   1a768:	ldr	r0, [sp, #16]
   1a76c:	ldr	r1, [fp, #-12]
   1a770:	movw	r2, #0
   1a774:	bl	265b8 <main@@Base+0x3600>
   1a778:	cmp	r0, #0
   1a77c:	bne	1a78c <test_sort_find@@Base+0x7e4>
   1a780:	ldr	r0, [sp, #12]
   1a784:	str	r0, [fp, #-4]
   1a788:	b	1a7a0 <test_sort_find@@Base+0x7f8>
   1a78c:	b	1a790 <test_sort_find@@Base+0x7e8>
   1a790:	ldr	r0, [pc, #24]	; 1a7b0 <test_sort_find@@Base+0x808>
   1a794:	add	r0, pc, r0
   1a798:	ldr	r0, [r0]
   1a79c:	str	r0, [fp, #-4]
   1a7a0:	ldr	r0, [fp, #-4]
   1a7a4:	mov	sp, fp
   1a7a8:	pop	{fp, pc}
   1a7ac:			; <UNDEFINED> instruction: 0x0002d9bc
   1a7b0:	ldrdeq	sp, [r2], -r8
   1a7b4:	push	{fp, lr}
   1a7b8:	mov	fp, sp
   1a7bc:	sub	sp, sp, #32
   1a7c0:	str	r0, [fp, #-8]
   1a7c4:	str	r1, [fp, #-12]
   1a7c8:	str	r2, [sp, #16]
   1a7cc:	movw	r0, #0
   1a7d0:	str	r0, [sp, #8]
   1a7d4:	ldr	r0, [fp, #-8]
   1a7d8:	bl	1769c <verify_monster@@Base+0x1cd0>
   1a7dc:	str	r0, [sp, #4]
   1a7e0:	cmp	r0, #0
   1a7e4:	bne	1a7fc <test_sort_find@@Base+0x854>
   1a7e8:	ldr	r0, [pc, #248]	; 1a8e8 <test_sort_find@@Base+0x940>
   1a7ec:	add	r0, pc, r0
   1a7f0:	ldr	r0, [r0]
   1a7f4:	str	r0, [fp, #-4]
   1a7f8:	b	1a8dc <test_sort_find@@Base+0x934>
   1a7fc:	ldr	r0, [sp, #4]
   1a800:	mvn	r1, #0
   1a804:	add	r0, r0, r1
   1a808:	str	r0, [sp, #4]
   1a80c:	ldr	r0, [sp, #8]
   1a810:	ldr	r1, [sp, #4]
   1a814:	cmp	r0, r1
   1a818:	bcs	1a880 <test_sort_find@@Base+0x8d8>
   1a81c:	ldr	r0, [sp, #8]
   1a820:	ldr	r1, [sp, #4]
   1a824:	ldr	r2, [sp, #8]
   1a828:	sub	r1, r1, r2
   1a82c:	lsr	r1, r1, #1
   1a830:	add	r0, r0, r1
   1a834:	str	r0, [sp]
   1a838:	ldr	r0, [fp, #-8]
   1a83c:	ldr	r1, [sp]
   1a840:	bl	176ec <verify_monster@@Base+0x1d20>
   1a844:	bl	16bcc <verify_monster@@Base+0x1200>
   1a848:	str	r0, [sp, #12]
   1a84c:	ldr	r0, [sp, #12]
   1a850:	ldr	r1, [fp, #-12]
   1a854:	ldr	r2, [sp, #16]
   1a858:	bl	264c8 <main@@Base+0x3510>
   1a85c:	cmp	r0, #0
   1a860:	bge	1a874 <test_sort_find@@Base+0x8cc>
   1a864:	ldr	r0, [sp]
   1a868:	add	r0, r0, #1
   1a86c:	str	r0, [sp, #8]
   1a870:	b	1a87c <test_sort_find@@Base+0x8d4>
   1a874:	ldr	r0, [sp]
   1a878:	str	r0, [sp, #4]
   1a87c:	b	1a80c <test_sort_find@@Base+0x864>
   1a880:	ldr	r0, [sp, #8]
   1a884:	ldr	r1, [sp, #4]
   1a888:	cmp	r0, r1
   1a88c:	bne	1a8cc <test_sort_find@@Base+0x924>
   1a890:	ldr	r0, [fp, #-8]
   1a894:	ldr	r1, [sp, #8]
   1a898:	bl	176ec <verify_monster@@Base+0x1d20>
   1a89c:	bl	16bcc <verify_monster@@Base+0x1200>
   1a8a0:	str	r0, [sp, #12]
   1a8a4:	ldr	r0, [sp, #12]
   1a8a8:	ldr	r1, [fp, #-12]
   1a8ac:	ldr	r2, [sp, #16]
   1a8b0:	bl	264c8 <main@@Base+0x3510>
   1a8b4:	cmp	r0, #0
   1a8b8:	bne	1a8c8 <test_sort_find@@Base+0x920>
   1a8bc:	ldr	r0, [sp, #8]
   1a8c0:	str	r0, [fp, #-4]
   1a8c4:	b	1a8dc <test_sort_find@@Base+0x934>
   1a8c8:	b	1a8cc <test_sort_find@@Base+0x924>
   1a8cc:	ldr	r0, [pc, #24]	; 1a8ec <test_sort_find@@Base+0x944>
   1a8d0:	add	r0, pc, r0
   1a8d4:	ldr	r0, [r0]
   1a8d8:	str	r0, [fp, #-4]
   1a8dc:	ldr	r0, [fp, #-4]
   1a8e0:	mov	sp, fp
   1a8e4:	pop	{fp, pc}
   1a8e8:	andeq	sp, r2, r0, lsl #17
   1a8ec:	muleq	r2, ip, r7

0001a8f0 <test_scan@@Base>:
   1a8f0:	push	{r4, r5, fp, lr}
   1a8f4:	add	fp, sp, #8
   1a8f8:	sub	sp, sp, #328	; 0x148
   1a8fc:	ldr	r1, [pc, #4088]	; 1b8fc <test_scan@@Base+0x100c>
   1a900:	add	r1, pc, r1
   1a904:	str	r0, [fp, #-12]
   1a908:	ldrb	r0, [r1]
   1a90c:	strb	r0, [fp, #-47]	; 0xffffffd1
   1a910:	ldrb	r0, [r1, #1]
   1a914:	strb	r0, [fp, #-46]	; 0xffffffd2
   1a918:	ldrb	r0, [r1, #2]
   1a91c:	strb	r0, [fp, #-45]	; 0xffffffd3
   1a920:	ldrb	r0, [r1, #3]
   1a924:	strb	r0, [fp, #-44]	; 0xffffffd4
   1a928:	ldrb	r0, [r1, #4]
   1a92c:	strb	r0, [fp, #-43]	; 0xffffffd5
   1a930:	ldrb	r0, [r1, #5]
   1a934:	strb	r0, [fp, #-42]	; 0xffffffd6
   1a938:	ldrb	r0, [r1, #6]
   1a93c:	strb	r0, [fp, #-41]	; 0xffffffd7
   1a940:	mvn	r0, #0
   1a944:	str	r0, [fp, #-52]	; 0xffffffcc
   1a948:	ldr	r0, [fp, #-12]
   1a94c:	bl	286d4 <flatcc_builder_reset@@Base>
   1a950:	ldr	r1, [fp, #-12]
   1a954:	str	r0, [fp, #-56]	; 0xffffffc8
   1a958:	mov	r0, r1
   1a95c:	bl	18cdc <gen_monster@@Base+0x880>
   1a960:	ldr	r1, [pc, #3984]	; 1b8f8 <test_scan@@Base+0x1008>
   1a964:	add	r1, pc, r1
   1a968:	ldr	r2, [fp, #-12]
   1a96c:	str	r0, [fp, #-60]	; 0xffffffc4
   1a970:	mov	r0, r2
   1a974:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   1a978:	sub	r1, fp, #47	; 0x2f
   1a97c:	ldr	r2, [fp, #-12]
   1a980:	str	r0, [fp, #-64]	; 0xffffffc0
   1a984:	mov	r0, r2
   1a988:	movw	r2, #7
   1a98c:	bl	18e74 <gen_monster@@Base+0xa18>
   1a990:	ldr	r1, [fp, #-12]
   1a994:	str	r0, [fp, #-68]	; 0xffffffbc
   1a998:	mov	r0, r1
   1a99c:	bl	1bb0c <test_scan@@Base+0x121c>
   1a9a0:	ldr	r1, [fp, #-12]
   1a9a4:	str	r0, [fp, #-72]	; 0xffffffb8
   1a9a8:	mov	r0, r1
   1a9ac:	bl	1bb2c <test_scan@@Base+0x123c>
   1a9b0:	ldr	r1, [fp, #-12]
   1a9b4:	str	r0, [fp, #-76]	; 0xffffffb4
   1a9b8:	mov	r0, r1
   1a9bc:	bl	191c0 <gen_monster@@Base+0xd64>
   1a9c0:	ldr	r1, [fp, #-12]
   1a9c4:	str	r0, [fp, #-80]	; 0xffffffb0
   1a9c8:	mov	r0, r1
   1a9cc:	bl	19208 <gen_monster@@Base+0xdac>
   1a9d0:	ldr	r1, [pc, #3868]	; 1b8f4 <test_scan@@Base+0x1004>
   1a9d4:	add	r1, pc, r1
   1a9d8:	ldr	r2, [fp, #-12]
   1a9dc:	str	r0, [fp, #-84]	; 0xffffffac
   1a9e0:	mov	r0, r2
   1a9e4:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   1a9e8:	ldr	r1, [fp, #-12]
   1a9ec:	str	r0, [fp, #-88]	; 0xffffffa8
   1a9f0:	mov	r0, r1
   1a9f4:	bl	19280 <gen_monster@@Base+0xe24>
   1a9f8:	ldr	r1, [fp, #-12]
   1a9fc:	str	r0, [fp, #-92]	; 0xffffffa4
   1aa00:	mov	r0, r1
   1aa04:	bl	19208 <gen_monster@@Base+0xdac>
   1aa08:	ldr	r1, [pc, #3808]	; 1b8f0 <test_scan@@Base+0x1000>
   1aa0c:	add	r1, pc, r1
   1aa10:	ldr	r2, [fp, #-12]
   1aa14:	str	r0, [fp, #-96]	; 0xffffffa0
   1aa18:	mov	r0, r2
   1aa1c:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   1aa20:	ldr	r1, [fp, #-12]
   1aa24:	str	r0, [fp, #-100]	; 0xffffff9c
   1aa28:	mov	r0, r1
   1aa2c:	bl	19280 <gen_monster@@Base+0xe24>
   1aa30:	ldr	r1, [fp, #-12]
   1aa34:	str	r0, [fp, #-104]	; 0xffffff98
   1aa38:	mov	r0, r1
   1aa3c:	bl	19208 <gen_monster@@Base+0xdac>
   1aa40:	ldr	r1, [pc, #3748]	; 1b8ec <test_scan@@Base+0xffc>
   1aa44:	add	r1, pc, r1
   1aa48:	ldr	r2, [fp, #-12]
   1aa4c:	str	r0, [fp, #-108]	; 0xffffff94
   1aa50:	mov	r0, r2
   1aa54:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   1aa58:	ldr	r1, [fp, #-12]
   1aa5c:	str	r0, [fp, #-112]	; 0xffffff90
   1aa60:	mov	r0, r1
   1aa64:	bl	19280 <gen_monster@@Base+0xe24>
   1aa68:	ldr	r1, [fp, #-12]
   1aa6c:	str	r0, [fp, #-116]	; 0xffffff8c
   1aa70:	mov	r0, r1
   1aa74:	bl	19208 <gen_monster@@Base+0xdac>
   1aa78:	ldr	r1, [pc, #3688]	; 1b8e8 <test_scan@@Base+0xff8>
   1aa7c:	add	r1, pc, r1
   1aa80:	ldr	r2, [fp, #-12]
   1aa84:	str	r0, [fp, #-120]	; 0xffffff88
   1aa88:	mov	r0, r2
   1aa8c:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   1aa90:	ldr	r1, [fp, #-12]
   1aa94:	str	r0, [fp, #-124]	; 0xffffff84
   1aa98:	mov	r0, r1
   1aa9c:	bl	19280 <gen_monster@@Base+0xe24>
   1aaa0:	ldr	r1, [fp, #-12]
   1aaa4:	str	r0, [fp, #-128]	; 0xffffff80
   1aaa8:	mov	r0, r1
   1aaac:	bl	19208 <gen_monster@@Base+0xdac>
   1aab0:	ldr	r1, [pc, #3628]	; 1b8e4 <test_scan@@Base+0xff4>
   1aab4:	add	r1, pc, r1
   1aab8:	ldr	r2, [fp, #-12]
   1aabc:	str	r0, [fp, #-132]	; 0xffffff7c
   1aac0:	mov	r0, r2
   1aac4:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   1aac8:	ldr	r1, [fp, #-12]
   1aacc:	str	r0, [fp, #-136]	; 0xffffff78
   1aad0:	mov	r0, r1
   1aad4:	bl	19280 <gen_monster@@Base+0xe24>
   1aad8:	ldr	r1, [fp, #-12]
   1aadc:	str	r0, [fp, #-140]	; 0xffffff74
   1aae0:	mov	r0, r1
   1aae4:	bl	19358 <gen_monster@@Base+0xefc>
   1aae8:	ldr	r1, [fp, #-12]
   1aaec:	str	r0, [fp, #-144]	; 0xffffff70
   1aaf0:	mov	r0, r1
   1aaf4:	bl	19880 <gen_monster@@Base+0x1424>
   1aaf8:	ldr	r1, [fp, #-12]
   1aafc:	str	r0, [fp, #-148]	; 0xffffff6c
   1ab00:	mov	r0, r1
   1ab04:	sub	r1, fp, #40	; 0x28
   1ab08:	bl	2db44 <flatcc_builder_finalize_aligned_buffer@@Base>
   1ab0c:	str	r0, [fp, #-36]	; 0xffffffdc
   1ab10:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ab14:	bl	131f4 <verify_empty_monster@@Base+0x28c>
   1ab18:	str	r0, [fp, #-20]	; 0xffffffec
   1ab1c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1ab20:	bl	17594 <verify_monster@@Base+0x1bc8>
   1ab24:	str	r0, [fp, #-24]	; 0xffffffe8
   1ab28:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ab2c:	movw	r1, #0
   1ab30:	cmp	r0, r1
   1ab34:	beq	1ab3c <test_scan@@Base+0x24c>
   1ab38:	b	1ab5c <test_scan@@Base+0x26c>
   1ab3c:	ldr	r0, [pc, #3516]	; 1b900 <test_scan@@Base+0x1010>
   1ab40:	add	r0, pc, r0
   1ab44:	ldr	r1, [pc, #3512]	; 1b904 <test_scan@@Base+0x1014>
   1ab48:	add	r1, pc, r1
   1ab4c:	ldr	r2, [pc, #3508]	; 1b908 <test_scan@@Base+0x1018>
   1ab50:	add	r3, pc, r2
   1ab54:	movw	r2, #1305	; 0x519
   1ab58:	bl	12e68 <__assert_fail@plt>
   1ab5c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1ab60:	bl	16fc8 <verify_monster@@Base+0x15fc>
   1ab64:	str	r0, [fp, #-28]	; 0xffffffe4
   1ab68:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1ab6c:	movw	r1, #0
   1ab70:	cmp	r0, r1
   1ab74:	beq	1ab7c <test_scan@@Base+0x28c>
   1ab78:	b	1ab9c <test_scan@@Base+0x2ac>
   1ab7c:	ldr	r0, [pc, #3464]	; 1b90c <test_scan@@Base+0x101c>
   1ab80:	add	r0, pc, r0
   1ab84:	ldr	r1, [pc, #3460]	; 1b910 <test_scan@@Base+0x1020>
   1ab88:	add	r1, pc, r1
   1ab8c:	ldr	r2, [pc, #3456]	; 1b914 <test_scan@@Base+0x1024>
   1ab90:	add	r3, pc, r2
   1ab94:	movw	r2, #1307	; 0x51b
   1ab98:	bl	12e68 <__assert_fail@plt>
   1ab9c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1aba0:	bl	1777c <verify_monster@@Base+0x1db0>
   1aba4:	str	r0, [fp, #-32]	; 0xffffffe0
   1aba8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1abac:	movw	r1, #0
   1abb0:	cmp	r0, r1
   1abb4:	beq	1abbc <test_scan@@Base+0x2cc>
   1abb8:	b	1abdc <test_scan@@Base+0x2ec>
   1abbc:	ldr	r0, [pc, #3412]	; 1b918 <test_scan@@Base+0x1028>
   1abc0:	add	r0, pc, r0
   1abc4:	ldr	r1, [pc, #3408]	; 1b91c <test_scan@@Base+0x102c>
   1abc8:	add	r1, pc, r1
   1abcc:	ldr	r2, [pc, #3404]	; 1b920 <test_scan@@Base+0x1030>
   1abd0:	add	r3, pc, r2
   1abd4:	movw	r2, #1309	; 0x51d
   1abd8:	bl	12e68 <__assert_fail@plt>
   1abdc:	ldr	r0, [pc, #3392]	; 1b924 <test_scan@@Base+0x1034>
   1abe0:	add	r1, pc, r0
   1abe4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1abe8:	bl	1bb6c <test_scan@@Base+0x127c>
   1abec:	movw	r1, #1
   1abf0:	cmp	r1, r0
   1abf4:	beq	1ac08 <test_scan@@Base+0x318>
   1abf8:	ldr	r0, [pc, #3848]	; 1bb08 <test_scan@@Base+0x1218>
   1abfc:	add	r0, pc, r0
   1ac00:	bl	12d9c <printf@plt>
   1ac04:	b	1b8d0 <test_scan@@Base+0xfe0>
   1ac08:	ldr	r0, [pc, #3352]	; 1b928 <test_scan@@Base+0x1038>
   1ac0c:	add	r1, pc, r0
   1ac10:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ac14:	bl	1bb94 <test_scan@@Base+0x12a4>
   1ac18:	movw	r1, #1
   1ac1c:	cmp	r1, r0
   1ac20:	beq	1ac34 <test_scan@@Base+0x344>
   1ac24:	ldr	r0, [pc, #3800]	; 1bb04 <test_scan@@Base+0x1214>
   1ac28:	add	r0, pc, r0
   1ac2c:	bl	12d9c <printf@plt>
   1ac30:	b	1b8d0 <test_scan@@Base+0xfe0>
   1ac34:	ldr	r0, [pc, #3312]	; 1b92c <test_scan@@Base+0x103c>
   1ac38:	add	r1, pc, r0
   1ac3c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ac40:	movw	r2, #5
   1ac44:	bl	1bbbc <test_scan@@Base+0x12cc>
   1ac48:	movw	r1, #1
   1ac4c:	cmp	r1, r0
   1ac50:	beq	1ac64 <test_scan@@Base+0x374>
   1ac54:	ldr	r0, [pc, #3748]	; 1bb00 <test_scan@@Base+0x1210>
   1ac58:	add	r0, pc, r0
   1ac5c:	bl	12d9c <printf@plt>
   1ac60:	b	1b8d0 <test_scan@@Base+0xfe0>
   1ac64:	ldr	r0, [pc, #3268]	; 1b930 <test_scan@@Base+0x1040>
   1ac68:	add	r1, pc, r0
   1ac6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ac70:	movw	r2, #5
   1ac74:	bl	1bbec <test_scan@@Base+0x12fc>
   1ac78:	movw	r1, #1
   1ac7c:	cmp	r1, r0
   1ac80:	beq	1ac94 <test_scan@@Base+0x3a4>
   1ac84:	ldr	r0, [pc, #3696]	; 1bafc <test_scan@@Base+0x120c>
   1ac88:	add	r0, pc, r0
   1ac8c:	bl	12d9c <printf@plt>
   1ac90:	b	1b8d0 <test_scan@@Base+0xfe0>
   1ac94:	ldr	r0, [pc, #3224]	; 1b934 <test_scan@@Base+0x1044>
   1ac98:	add	r3, pc, r0
   1ac9c:	ldr	r0, [pc, #3220]	; 1b938 <test_scan@@Base+0x1048>
   1aca0:	add	r0, pc, r0
   1aca4:	ldr	r1, [pc, #3216]	; 1b93c <test_scan@@Base+0x104c>
   1aca8:	add	r1, pc, r1
   1acac:	ldr	r1, [r1]
   1acb0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1acb4:	ldr	r0, [r0]
   1acb8:	str	r0, [fp, #-152]	; 0xffffff68
   1acbc:	mov	r0, r2
   1acc0:	movw	r2, #2
   1acc4:	str	r1, [fp, #-156]	; 0xffffff64
   1acc8:	mov	r1, r2
   1accc:	ldr	r2, [fp, #-152]	; 0xffffff68
   1acd0:	bl	1bc1c <test_scan@@Base+0x132c>
   1acd4:	ldr	r1, [fp, #-156]	; 0xffffff64
   1acd8:	cmp	r1, r0
   1acdc:	beq	1acf0 <test_scan@@Base+0x400>
   1ace0:	ldr	r0, [pc, #3600]	; 1baf8 <test_scan@@Base+0x1208>
   1ace4:	add	r0, pc, r0
   1ace8:	bl	12d9c <printf@plt>
   1acec:	b	1b8d0 <test_scan@@Base+0xfe0>
   1acf0:	ldr	r0, [pc, #3144]	; 1b940 <test_scan@@Base+0x1050>
   1acf4:	add	r1, pc, r0
   1acf8:	ldr	r0, [pc, #3140]	; 1b944 <test_scan@@Base+0x1054>
   1acfc:	add	r0, pc, r0
   1ad00:	ldr	r0, [r0]
   1ad04:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ad08:	str	r0, [fp, #-160]	; 0xffffff60
   1ad0c:	mov	r0, r2
   1ad10:	bl	1bb6c <test_scan@@Base+0x127c>
   1ad14:	ldr	r1, [fp, #-160]	; 0xffffff60
   1ad18:	cmp	r1, r0
   1ad1c:	beq	1ad30 <test_scan@@Base+0x440>
   1ad20:	ldr	r0, [pc, #3532]	; 1baf4 <test_scan@@Base+0x1204>
   1ad24:	add	r0, pc, r0
   1ad28:	bl	12d9c <printf@plt>
   1ad2c:	b	1b8d0 <test_scan@@Base+0xfe0>
   1ad30:	ldr	r0, [pc, #3088]	; 1b948 <test_scan@@Base+0x1058>
   1ad34:	add	r1, pc, r0
   1ad38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ad3c:	bl	1bb6c <test_scan@@Base+0x127c>
   1ad40:	movw	r1, #0
   1ad44:	cmp	r1, r0
   1ad48:	beq	1ad5c <test_scan@@Base+0x46c>
   1ad4c:	ldr	r0, [pc, #3484]	; 1baf0 <test_scan@@Base+0x1200>
   1ad50:	add	r0, pc, r0
   1ad54:	bl	12d9c <printf@plt>
   1ad58:	b	1b8d0 <test_scan@@Base+0xfe0>
   1ad5c:	ldr	r0, [pc, #3048]	; 1b94c <test_scan@@Base+0x105c>
   1ad60:	add	r1, pc, r0
   1ad64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ad68:	bl	1bc54 <test_scan@@Base+0x1364>
   1ad6c:	movw	r1, #2
   1ad70:	cmp	r1, r0
   1ad74:	beq	1ad88 <test_scan@@Base+0x498>
   1ad78:	ldr	r0, [pc, #3436]	; 1baec <test_scan@@Base+0x11fc>
   1ad7c:	add	r0, pc, r0
   1ad80:	bl	12d9c <printf@plt>
   1ad84:	b	1b8d0 <test_scan@@Base+0xfe0>
   1ad88:	ldr	r0, [pc, #3008]	; 1b950 <test_scan@@Base+0x1060>
   1ad8c:	add	r1, pc, r0
   1ad90:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ad94:	bl	1bcfc <test_scan@@Base+0x140c>
   1ad98:	movw	r1, #4
   1ad9c:	cmp	r1, r0
   1ada0:	beq	1adb4 <test_scan@@Base+0x4c4>
   1ada4:	ldr	r0, [pc, #3388]	; 1bae8 <test_scan@@Base+0x11f8>
   1ada8:	add	r0, pc, r0
   1adac:	bl	12d9c <printf@plt>
   1adb0:	b	1b8d0 <test_scan@@Base+0xfe0>
   1adb4:	ldr	r0, [pc, #2968]	; 1b954 <test_scan@@Base+0x1064>
   1adb8:	add	r1, pc, r0
   1adbc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1adc0:	movw	r2, #8
   1adc4:	bl	1bd90 <test_scan@@Base+0x14a0>
   1adc8:	movw	r1, #4
   1adcc:	cmp	r1, r0
   1add0:	beq	1ade4 <test_scan@@Base+0x4f4>
   1add4:	ldr	r0, [pc, #3336]	; 1bae4 <test_scan@@Base+0x11f4>
   1add8:	add	r0, pc, r0
   1addc:	bl	12d9c <printf@plt>
   1ade0:	b	1b8d0 <test_scan@@Base+0xfe0>
   1ade4:	ldr	r0, [pc, #2924]	; 1b958 <test_scan@@Base+0x1068>
   1ade8:	add	r3, pc, r0
   1adec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1adf0:	movw	r1, #1
   1adf4:	movw	r2, #3
   1adf8:	movw	ip, #8
   1adfc:	str	ip, [sp]
   1ae00:	bl	1be28 <test_scan@@Base+0x1538>
   1ae04:	movw	r1, #2
   1ae08:	cmp	r1, r0
   1ae0c:	beq	1ae20 <test_scan@@Base+0x530>
   1ae10:	ldr	r0, [pc, #3272]	; 1bae0 <test_scan@@Base+0x11f0>
   1ae14:	add	r0, pc, r0
   1ae18:	bl	12d9c <printf@plt>
   1ae1c:	b	1b8d0 <test_scan@@Base+0xfe0>
   1ae20:	ldr	r0, [pc, #2868]	; 1b95c <test_scan@@Base+0x106c>
   1ae24:	add	r3, pc, r0
   1ae28:	ldr	r0, [pc, #2864]	; 1b960 <test_scan@@Base+0x1070>
   1ae2c:	add	r0, pc, r0
   1ae30:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ae34:	ldr	r2, [r0]
   1ae38:	mov	r0, r1
   1ae3c:	movw	r1, #2
   1ae40:	bl	1bf04 <test_scan@@Base+0x1614>
   1ae44:	movw	r1, #2
   1ae48:	cmp	r1, r0
   1ae4c:	beq	1ae60 <test_scan@@Base+0x570>
   1ae50:	ldr	r0, [pc, #3204]	; 1badc <test_scan@@Base+0x11ec>
   1ae54:	add	r0, pc, r0
   1ae58:	bl	12d9c <printf@plt>
   1ae5c:	b	1b8d0 <test_scan@@Base+0xfe0>
   1ae60:	ldr	r0, [pc, #2812]	; 1b964 <test_scan@@Base+0x1074>
   1ae64:	add	r3, pc, r0
   1ae68:	ldr	r0, [pc, #2808]	; 1b968 <test_scan@@Base+0x1078>
   1ae6c:	add	r0, pc, r0
   1ae70:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ae74:	ldr	r2, [r0]
   1ae78:	mov	r0, r1
   1ae7c:	movw	r1, #2
   1ae80:	movw	ip, #8
   1ae84:	str	ip, [sp]
   1ae88:	bl	1bfe4 <test_scan@@Base+0x16f4>
   1ae8c:	movw	r1, #2
   1ae90:	cmp	r1, r0
   1ae94:	beq	1aea8 <test_scan@@Base+0x5b8>
   1ae98:	ldr	r0, [pc, #3128]	; 1bad8 <test_scan@@Base+0x11e8>
   1ae9c:	add	r0, pc, r0
   1aea0:	bl	12d9c <printf@plt>
   1aea4:	b	1b8d0 <test_scan@@Base+0xfe0>
   1aea8:	ldr	r0, [pc, #2748]	; 1b96c <test_scan@@Base+0x107c>
   1aeac:	add	r3, pc, r0
   1aeb0:	ldr	r0, [pc, #2744]	; 1b970 <test_scan@@Base+0x1080>
   1aeb4:	add	r0, pc, r0
   1aeb8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1aebc:	ldr	r2, [r0]
   1aec0:	mov	r0, r1
   1aec4:	movw	r1, #3
   1aec8:	bl	1bf04 <test_scan@@Base+0x1614>
   1aecc:	movw	r1, #4
   1aed0:	cmp	r1, r0
   1aed4:	beq	1aee8 <test_scan@@Base+0x5f8>
   1aed8:	ldr	r0, [pc, #3060]	; 1bad4 <test_scan@@Base+0x11e4>
   1aedc:	add	r0, pc, r0
   1aee0:	bl	12d9c <printf@plt>
   1aee4:	b	1b8d0 <test_scan@@Base+0xfe0>
   1aee8:	ldr	r0, [pc, #2692]	; 1b974 <test_scan@@Base+0x1084>
   1aeec:	add	r3, pc, r0
   1aef0:	ldr	r0, [pc, #2688]	; 1b978 <test_scan@@Base+0x1088>
   1aef4:	add	r0, pc, r0
   1aef8:	ldr	r0, [r0]
   1aefc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1af00:	str	r0, [fp, #-164]	; 0xffffff5c
   1af04:	mov	r0, r1
   1af08:	movw	r1, #1
   1af0c:	movw	r2, #3
   1af10:	bl	1bc1c <test_scan@@Base+0x132c>
   1af14:	ldr	r1, [fp, #-164]	; 0xffffff5c
   1af18:	cmp	r1, r0
   1af1c:	beq	1af30 <test_scan@@Base+0x640>
   1af20:	ldr	r0, [pc, #2984]	; 1bad0 <test_scan@@Base+0x11e0>
   1af24:	add	r0, pc, r0
   1af28:	bl	12d9c <printf@plt>
   1af2c:	b	1b8d0 <test_scan@@Base+0xfe0>
   1af30:	ldr	r0, [pc, #2628]	; 1b97c <test_scan@@Base+0x108c>
   1af34:	add	r3, pc, r0
   1af38:	ldr	r0, [pc, #2624]	; 1b980 <test_scan@@Base+0x1090>
   1af3c:	add	r0, pc, r0
   1af40:	ldr	r0, [r0]
   1af44:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1af48:	str	r0, [sp, #168]	; 0xa8
   1af4c:	mov	r0, r1
   1af50:	movw	r1, #1
   1af54:	movw	r2, #3
   1af58:	bl	1bc1c <test_scan@@Base+0x132c>
   1af5c:	ldr	r1, [sp, #168]	; 0xa8
   1af60:	cmp	r1, r0
   1af64:	beq	1af78 <test_scan@@Base+0x688>
   1af68:	ldr	r0, [pc, #2908]	; 1bacc <test_scan@@Base+0x11dc>
   1af6c:	add	r0, pc, r0
   1af70:	bl	12d9c <printf@plt>
   1af74:	b	1b8d0 <test_scan@@Base+0xfe0>
   1af78:	ldr	r0, [pc, #2564]	; 1b984 <test_scan@@Base+0x1094>
   1af7c:	add	r3, pc, r0
   1af80:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1af84:	movw	r1, #1
   1af88:	movw	r2, #3
   1af8c:	bl	1bc1c <test_scan@@Base+0x132c>
   1af90:	movw	r1, #1
   1af94:	cmp	r1, r0
   1af98:	beq	1afac <test_scan@@Base+0x6bc>
   1af9c:	ldr	r0, [pc, #2852]	; 1bac8 <test_scan@@Base+0x11d8>
   1afa0:	add	r0, pc, r0
   1afa4:	bl	12d9c <printf@plt>
   1afa8:	b	1b8d0 <test_scan@@Base+0xfe0>
   1afac:	ldr	r0, [pc, #2516]	; 1b988 <test_scan@@Base+0x1098>
   1afb0:	add	r3, pc, r0
   1afb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1afb8:	movw	r1, #1
   1afbc:	movw	r2, #3
   1afc0:	bl	1bf04 <test_scan@@Base+0x1614>
   1afc4:	movw	r1, #2
   1afc8:	cmp	r1, r0
   1afcc:	beq	1afe0 <test_scan@@Base+0x6f0>
   1afd0:	ldr	r0, [pc, #2796]	; 1bac4 <test_scan@@Base+0x11d4>
   1afd4:	add	r0, pc, r0
   1afd8:	bl	12d9c <printf@plt>
   1afdc:	b	1b8d0 <test_scan@@Base+0xfe0>
   1afe0:	ldr	r0, [pc, #2468]	; 1b98c <test_scan@@Base+0x109c>
   1afe4:	add	r3, pc, r0
   1afe8:	ldr	r0, [pc, #2464]	; 1b990 <test_scan@@Base+0x10a0>
   1afec:	add	r0, pc, r0
   1aff0:	ldr	r0, [r0]
   1aff4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1aff8:	str	r0, [sp, #164]	; 0xa4
   1affc:	mov	r0, r1
   1b000:	movw	r1, #1
   1b004:	movw	r2, #3
   1b008:	bl	1bf04 <test_scan@@Base+0x1614>
   1b00c:	ldr	r1, [sp, #164]	; 0xa4
   1b010:	cmp	r1, r0
   1b014:	beq	1b028 <test_scan@@Base+0x738>
   1b018:	ldr	r0, [pc, #2720]	; 1bac0 <test_scan@@Base+0x11d0>
   1b01c:	add	r0, pc, r0
   1b020:	bl	12d9c <printf@plt>
   1b024:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b028:	ldr	r0, [pc, #2404]	; 1b994 <test_scan@@Base+0x10a4>
   1b02c:	add	r3, pc, r0
   1b030:	ldr	r0, [pc, #2400]	; 1b998 <test_scan@@Base+0x10a8>
   1b034:	add	r0, pc, r0
   1b038:	ldr	r0, [r0]
   1b03c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b040:	str	r0, [sp, #160]	; 0xa0
   1b044:	mov	r0, r1
   1b048:	movw	r1, #1
   1b04c:	movw	r2, #3
   1b050:	bl	1c0c8 <test_scan@@Base+0x17d8>
   1b054:	ldr	r1, [sp, #160]	; 0xa0
   1b058:	cmp	r1, r0
   1b05c:	beq	1b070 <test_scan@@Base+0x780>
   1b060:	ldr	r0, [pc, #2644]	; 1babc <test_scan@@Base+0x11cc>
   1b064:	add	r0, pc, r0
   1b068:	bl	12d9c <printf@plt>
   1b06c:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b070:	ldr	r0, [pc, #2340]	; 1b99c <test_scan@@Base+0x10ac>
   1b074:	add	r3, pc, r0
   1b078:	ldr	r0, [pc, #2336]	; 1b9a0 <test_scan@@Base+0x10b0>
   1b07c:	add	r0, pc, r0
   1b080:	ldr	r0, [r0]
   1b084:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b088:	str	r0, [sp, #156]	; 0x9c
   1b08c:	mov	r0, r1
   1b090:	movw	r1, #1
   1b094:	movw	r2, #3
   1b098:	bl	1c0c8 <test_scan@@Base+0x17d8>
   1b09c:	ldr	r1, [sp, #156]	; 0x9c
   1b0a0:	cmp	r1, r0
   1b0a4:	beq	1b0b8 <test_scan@@Base+0x7c8>
   1b0a8:	ldr	r0, [pc, #2568]	; 1bab8 <test_scan@@Base+0x11c8>
   1b0ac:	add	r0, pc, r0
   1b0b0:	bl	12d9c <printf@plt>
   1b0b4:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b0b8:	ldr	r0, [pc, #2276]	; 1b9a4 <test_scan@@Base+0x10b4>
   1b0bc:	add	r3, pc, r0
   1b0c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b0c4:	movw	r1, #1
   1b0c8:	movw	r2, #3
   1b0cc:	bl	1c0c8 <test_scan@@Base+0x17d8>
   1b0d0:	movw	r1, #1
   1b0d4:	cmp	r1, r0
   1b0d8:	beq	1b0ec <test_scan@@Base+0x7fc>
   1b0dc:	ldr	r0, [pc, #2512]	; 1bab4 <test_scan@@Base+0x11c4>
   1b0e0:	add	r0, pc, r0
   1b0e4:	bl	12d9c <printf@plt>
   1b0e8:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b0ec:	ldr	r0, [pc, #2228]	; 1b9a8 <test_scan@@Base+0x10b8>
   1b0f0:	add	r3, pc, r0
   1b0f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b0f8:	movw	r1, #1
   1b0fc:	movw	r2, #3
   1b100:	bl	1c100 <test_scan@@Base+0x1810>
   1b104:	movw	r1, #2
   1b108:	cmp	r1, r0
   1b10c:	beq	1b120 <test_scan@@Base+0x830>
   1b110:	ldr	r0, [pc, #2456]	; 1bab0 <test_scan@@Base+0x11c0>
   1b114:	add	r0, pc, r0
   1b118:	bl	12d9c <printf@plt>
   1b11c:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b120:	ldr	r0, [pc, #2180]	; 1b9ac <test_scan@@Base+0x10bc>
   1b124:	add	r3, pc, r0
   1b128:	ldr	r0, [pc, #2176]	; 1b9b0 <test_scan@@Base+0x10c0>
   1b12c:	add	r0, pc, r0
   1b130:	ldr	r0, [r0]
   1b134:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b138:	str	r0, [sp, #152]	; 0x98
   1b13c:	mov	r0, r1
   1b140:	movw	r1, #1
   1b144:	movw	r2, #3
   1b148:	bl	1c100 <test_scan@@Base+0x1810>
   1b14c:	ldr	r1, [sp, #152]	; 0x98
   1b150:	cmp	r1, r0
   1b154:	beq	1b168 <test_scan@@Base+0x878>
   1b158:	ldr	r0, [pc, #2380]	; 1baac <test_scan@@Base+0x11bc>
   1b15c:	add	r0, pc, r0
   1b160:	bl	12d9c <printf@plt>
   1b164:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b168:	ldr	r0, [pc, #2116]	; 1b9b4 <test_scan@@Base+0x10c4>
   1b16c:	add	r3, pc, r0
   1b170:	ldr	r0, [pc, #2112]	; 1b9b8 <test_scan@@Base+0x10c8>
   1b174:	add	r0, pc, r0
   1b178:	ldr	r0, [r0]
   1b17c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b180:	str	r0, [sp, #148]	; 0x94
   1b184:	mov	r0, r1
   1b188:	movw	r1, #0
   1b18c:	str	r1, [sp, #144]	; 0x90
   1b190:	ldr	r2, [sp, #144]	; 0x90
   1b194:	bl	1bc1c <test_scan@@Base+0x132c>
   1b198:	ldr	r1, [sp, #148]	; 0x94
   1b19c:	cmp	r1, r0
   1b1a0:	beq	1b1b4 <test_scan@@Base+0x8c4>
   1b1a4:	ldr	r0, [pc, #2300]	; 1baa8 <test_scan@@Base+0x11b8>
   1b1a8:	add	r0, pc, r0
   1b1ac:	bl	12d9c <printf@plt>
   1b1b0:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b1b4:	ldr	r0, [pc, #2048]	; 1b9bc <test_scan@@Base+0x10cc>
   1b1b8:	add	r3, pc, r0
   1b1bc:	ldr	r0, [pc, #2044]	; 1b9c0 <test_scan@@Base+0x10d0>
   1b1c0:	add	r0, pc, r0
   1b1c4:	ldr	r0, [r0]
   1b1c8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b1cc:	str	r0, [sp, #140]	; 0x8c
   1b1d0:	mov	r0, r1
   1b1d4:	movw	r1, #0
   1b1d8:	str	r1, [sp, #136]	; 0x88
   1b1dc:	ldr	r2, [sp, #136]	; 0x88
   1b1e0:	bl	1bc1c <test_scan@@Base+0x132c>
   1b1e4:	ldr	r1, [sp, #140]	; 0x8c
   1b1e8:	cmp	r1, r0
   1b1ec:	beq	1b200 <test_scan@@Base+0x910>
   1b1f0:	ldr	r0, [pc, #2220]	; 1baa4 <test_scan@@Base+0x11b4>
   1b1f4:	add	r0, pc, r0
   1b1f8:	bl	12d9c <printf@plt>
   1b1fc:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b200:	ldr	r0, [pc, #1980]	; 1b9c4 <test_scan@@Base+0x10d4>
   1b204:	add	r3, pc, r0
   1b208:	ldr	r0, [pc, #1976]	; 1b9c8 <test_scan@@Base+0x10d8>
   1b20c:	add	r0, pc, r0
   1b210:	ldr	r0, [r0]
   1b214:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b218:	str	r0, [sp, #132]	; 0x84
   1b21c:	mov	r0, r1
   1b220:	movw	r1, #1
   1b224:	str	r1, [sp, #128]	; 0x80
   1b228:	ldr	r2, [sp, #128]	; 0x80
   1b22c:	bl	1bc1c <test_scan@@Base+0x132c>
   1b230:	ldr	r1, [sp, #132]	; 0x84
   1b234:	cmp	r1, r0
   1b238:	beq	1b24c <test_scan@@Base+0x95c>
   1b23c:	ldr	r0, [pc, #2140]	; 1baa0 <test_scan@@Base+0x11b0>
   1b240:	add	r0, pc, r0
   1b244:	bl	12d9c <printf@plt>
   1b248:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b24c:	ldr	r0, [pc, #1920]	; 1b9d4 <test_scan@@Base+0x10e4>
   1b250:	add	r0, pc, r0
   1b254:	ldr	r0, [r0]
   1b258:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b25c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b260:	str	r0, [sp, #124]	; 0x7c
   1b264:	mov	r0, r2
   1b268:	str	r1, [sp, #120]	; 0x78
   1b26c:	bl	1769c <verify_monster@@Base+0x1cd0>
   1b270:	ldr	r1, [pc, #1876]	; 1b9cc <test_scan@@Base+0x10dc>
   1b274:	add	r3, pc, r1
   1b278:	ldr	r1, [pc, #1872]	; 1b9d0 <test_scan@@Base+0x10e0>
   1b27c:	add	r1, pc, r1
   1b280:	ldr	r2, [r1]
   1b284:	ldr	r1, [sp, #120]	; 0x78
   1b288:	str	r0, [sp, #116]	; 0x74
   1b28c:	mov	r0, r1
   1b290:	ldr	r1, [sp, #116]	; 0x74
   1b294:	bl	1bc1c <test_scan@@Base+0x132c>
   1b298:	ldr	r1, [sp, #124]	; 0x7c
   1b29c:	cmp	r1, r0
   1b2a0:	beq	1b2b4 <test_scan@@Base+0x9c4>
   1b2a4:	ldr	r0, [pc, #2032]	; 1ba9c <test_scan@@Base+0x11ac>
   1b2a8:	add	r0, pc, r0
   1b2ac:	bl	12d9c <printf@plt>
   1b2b0:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b2b4:	ldr	r0, [pc, #1820]	; 1b9d8 <test_scan@@Base+0x10e8>
   1b2b8:	add	r3, pc, r0
   1b2bc:	ldr	r0, [pc, #1816]	; 1b9dc <test_scan@@Base+0x10ec>
   1b2c0:	add	r0, pc, r0
   1b2c4:	ldr	r0, [r0]
   1b2c8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b2cc:	str	r0, [sp, #112]	; 0x70
   1b2d0:	mov	r0, r1
   1b2d4:	movw	r1, #0
   1b2d8:	str	r1, [sp, #108]	; 0x6c
   1b2dc:	ldr	r2, [sp, #108]	; 0x6c
   1b2e0:	bl	1c0c8 <test_scan@@Base+0x17d8>
   1b2e4:	ldr	r1, [sp, #112]	; 0x70
   1b2e8:	cmp	r1, r0
   1b2ec:	beq	1b300 <test_scan@@Base+0xa10>
   1b2f0:	ldr	r0, [pc, #1952]	; 1ba98 <test_scan@@Base+0x11a8>
   1b2f4:	add	r0, pc, r0
   1b2f8:	bl	12d9c <printf@plt>
   1b2fc:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b300:	ldr	r0, [pc, #1752]	; 1b9e0 <test_scan@@Base+0x10f0>
   1b304:	add	r3, pc, r0
   1b308:	ldr	r0, [pc, #1748]	; 1b9e4 <test_scan@@Base+0x10f4>
   1b30c:	add	r0, pc, r0
   1b310:	ldr	r0, [r0]
   1b314:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b318:	str	r0, [sp, #104]	; 0x68
   1b31c:	mov	r0, r1
   1b320:	movw	r1, #0
   1b324:	str	r1, [sp, #100]	; 0x64
   1b328:	ldr	r2, [sp, #100]	; 0x64
   1b32c:	bl	1c0c8 <test_scan@@Base+0x17d8>
   1b330:	ldr	r1, [sp, #104]	; 0x68
   1b334:	cmp	r1, r0
   1b338:	beq	1b34c <test_scan@@Base+0xa5c>
   1b33c:	ldr	r0, [pc, #1872]	; 1ba94 <test_scan@@Base+0x11a4>
   1b340:	add	r0, pc, r0
   1b344:	bl	12d9c <printf@plt>
   1b348:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b34c:	ldr	r0, [pc, #1684]	; 1b9e8 <test_scan@@Base+0x10f8>
   1b350:	add	r3, pc, r0
   1b354:	ldr	r0, [pc, #1680]	; 1b9ec <test_scan@@Base+0x10fc>
   1b358:	add	r0, pc, r0
   1b35c:	ldr	r0, [r0]
   1b360:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b364:	str	r0, [sp, #96]	; 0x60
   1b368:	mov	r0, r1
   1b36c:	movw	r1, #1
   1b370:	str	r1, [sp, #92]	; 0x5c
   1b374:	ldr	r2, [sp, #92]	; 0x5c
   1b378:	bl	1c0c8 <test_scan@@Base+0x17d8>
   1b37c:	ldr	r1, [sp, #96]	; 0x60
   1b380:	cmp	r1, r0
   1b384:	beq	1b398 <test_scan@@Base+0xaa8>
   1b388:	ldr	r0, [pc, #1792]	; 1ba90 <test_scan@@Base+0x11a0>
   1b38c:	add	r0, pc, r0
   1b390:	bl	12d9c <printf@plt>
   1b394:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b398:	ldr	r0, [pc, #1624]	; 1b9f8 <test_scan@@Base+0x1108>
   1b39c:	add	r0, pc, r0
   1b3a0:	ldr	r0, [r0]
   1b3a4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b3a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b3ac:	str	r0, [sp, #88]	; 0x58
   1b3b0:	mov	r0, r2
   1b3b4:	str	r1, [sp, #84]	; 0x54
   1b3b8:	bl	1769c <verify_monster@@Base+0x1cd0>
   1b3bc:	ldr	r1, [pc, #1580]	; 1b9f0 <test_scan@@Base+0x1100>
   1b3c0:	add	r3, pc, r1
   1b3c4:	ldr	r1, [pc, #1576]	; 1b9f4 <test_scan@@Base+0x1104>
   1b3c8:	add	r1, pc, r1
   1b3cc:	ldr	r2, [r1]
   1b3d0:	ldr	r1, [sp, #84]	; 0x54
   1b3d4:	str	r0, [sp, #80]	; 0x50
   1b3d8:	mov	r0, r1
   1b3dc:	ldr	r1, [sp, #80]	; 0x50
   1b3e0:	bl	1c0c8 <test_scan@@Base+0x17d8>
   1b3e4:	ldr	r1, [sp, #88]	; 0x58
   1b3e8:	cmp	r1, r0
   1b3ec:	beq	1b400 <test_scan@@Base+0xb10>
   1b3f0:	ldr	r0, [pc, #1684]	; 1ba8c <test_scan@@Base+0x119c>
   1b3f4:	add	r0, pc, r0
   1b3f8:	bl	12d9c <printf@plt>
   1b3fc:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b400:	ldr	r0, [pc, #1524]	; 1b9fc <test_scan@@Base+0x110c>
   1b404:	add	r1, pc, r0
   1b408:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b40c:	bl	1c1d4 <test_scan@@Base+0x18e4>
   1b410:	movw	r1, #1
   1b414:	cmp	r1, r0
   1b418:	beq	1b42c <test_scan@@Base+0xb3c>
   1b41c:	ldr	r0, [pc, #1636]	; 1ba88 <test_scan@@Base+0x1198>
   1b420:	add	r0, pc, r0
   1b424:	bl	12d9c <printf@plt>
   1b428:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b42c:	ldr	r0, [pc, #1484]	; 1ba00 <test_scan@@Base+0x1110>
   1b430:	add	r1, pc, r0
   1b434:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b438:	bl	1c1d4 <test_scan@@Base+0x18e4>
   1b43c:	movw	r1, #0
   1b440:	cmp	r1, r0
   1b444:	beq	1b458 <test_scan@@Base+0xb68>
   1b448:	ldr	r0, [pc, #1588]	; 1ba84 <test_scan@@Base+0x1194>
   1b44c:	add	r0, pc, r0
   1b450:	bl	12d9c <printf@plt>
   1b454:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b458:	ldr	r0, [pc, #1444]	; 1ba04 <test_scan@@Base+0x1114>
   1b45c:	add	r1, pc, r0
   1b460:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b464:	bl	1c1d4 <test_scan@@Base+0x18e4>
   1b468:	movw	r1, #1
   1b46c:	cmp	r1, r0
   1b470:	beq	1b484 <test_scan@@Base+0xb94>
   1b474:	ldr	r0, [pc, #1540]	; 1ba80 <test_scan@@Base+0x1190>
   1b478:	add	r0, pc, r0
   1b47c:	bl	12d9c <printf@plt>
   1b480:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b484:	ldr	r0, [pc, #1404]	; 1ba08 <test_scan@@Base+0x1118>
   1b488:	add	r1, pc, r0
   1b48c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b490:	bl	1c1d4 <test_scan@@Base+0x18e4>
   1b494:	movw	r1, #2
   1b498:	cmp	r1, r0
   1b49c:	beq	1b4b0 <test_scan@@Base+0xbc0>
   1b4a0:	ldr	r0, [pc, #1492]	; 1ba7c <test_scan@@Base+0x118c>
   1b4a4:	add	r0, pc, r0
   1b4a8:	bl	12d9c <printf@plt>
   1b4ac:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b4b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b4b4:	movw	r1, #6
   1b4b8:	and	r1, r1, #255	; 0xff
   1b4bc:	bl	1c270 <test_scan@@Base+0x1980>
   1b4c0:	str	r0, [fp, #-16]
   1b4c4:	movw	r1, #0
   1b4c8:	cmp	r1, r0
   1b4cc:	beq	1b4e0 <test_scan@@Base+0xbf0>
   1b4d0:	ldr	r0, [pc, #1440]	; 1ba78 <test_scan@@Base+0x1188>
   1b4d4:	add	r0, pc, r0
   1b4d8:	bl	12d9c <printf@plt>
   1b4dc:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b4e0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b4e4:	movw	r1, #1
   1b4e8:	and	r1, r1, #255	; 0xff
   1b4ec:	bl	1c270 <test_scan@@Base+0x1980>
   1b4f0:	str	r0, [fp, #-16]
   1b4f4:	movw	r1, #2
   1b4f8:	cmp	r1, r0
   1b4fc:	beq	1b510 <test_scan@@Base+0xc20>
   1b500:	ldr	r0, [pc, #1388]	; 1ba74 <test_scan@@Base+0x1184>
   1b504:	add	r0, pc, r0
   1b508:	bl	12d9c <printf@plt>
   1b50c:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b510:	ldr	r0, [pc, #1268]	; 1ba0c <test_scan@@Base+0x111c>
   1b514:	add	r0, pc, r0
   1b518:	ldr	r1, [pc, #1264]	; 1ba10 <test_scan@@Base+0x1120>
   1b51c:	add	r1, pc, r1
   1b520:	ldr	r1, [r1]
   1b524:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b528:	ldr	r0, [r0]
   1b52c:	str	r0, [sp, #76]	; 0x4c
   1b530:	mov	r0, r2
   1b534:	movw	r2, #3
   1b538:	str	r1, [sp, #72]	; 0x48
   1b53c:	mov	r1, r2
   1b540:	ldr	r2, [sp, #76]	; 0x4c
   1b544:	movw	r3, #1
   1b548:	and	r3, r3, #255	; 0xff
   1b54c:	bl	1c340 <test_scan@@Base+0x1a50>
   1b550:	str	r0, [fp, #-16]
   1b554:	ldr	r1, [sp, #72]	; 0x48
   1b558:	cmp	r1, r0
   1b55c:	beq	1b570 <test_scan@@Base+0xc80>
   1b560:	ldr	r0, [pc, #1288]	; 1ba70 <test_scan@@Base+0x1180>
   1b564:	add	r0, pc, r0
   1b568:	bl	12d9c <printf@plt>
   1b56c:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b570:	ldr	r0, [pc, #1180]	; 1ba14 <test_scan@@Base+0x1124>
   1b574:	add	r0, pc, r0
   1b578:	ldr	r0, [r0]
   1b57c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b580:	str	r0, [sp, #68]	; 0x44
   1b584:	mov	r0, r1
   1b588:	movw	r1, #5
   1b58c:	and	r1, r1, #255	; 0xff
   1b590:	bl	1c270 <test_scan@@Base+0x1980>
   1b594:	str	r0, [fp, #-16]
   1b598:	ldr	r1, [sp, #68]	; 0x44
   1b59c:	cmp	r1, r0
   1b5a0:	beq	1b5b4 <test_scan@@Base+0xcc4>
   1b5a4:	ldr	r0, [pc, #1216]	; 1ba6c <test_scan@@Base+0x117c>
   1b5a8:	add	r0, pc, r0
   1b5ac:	bl	12d9c <printf@plt>
   1b5b0:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b5b4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b5b8:	movw	r1, #2
   1b5bc:	and	r1, r1, #255	; 0xff
   1b5c0:	bl	1c270 <test_scan@@Base+0x1980>
   1b5c4:	str	r0, [fp, #-16]
   1b5c8:	movw	r1, #6
   1b5cc:	cmp	r1, r0
   1b5d0:	beq	1b5e4 <test_scan@@Base+0xcf4>
   1b5d4:	ldr	r0, [pc, #1164]	; 1ba68 <test_scan@@Base+0x1178>
   1b5d8:	add	r0, pc, r0
   1b5dc:	bl	12d9c <printf@plt>
   1b5e0:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b5e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b5e8:	movw	r1, #3
   1b5ec:	and	r1, r1, #255	; 0xff
   1b5f0:	bl	1c270 <test_scan@@Base+0x1980>
   1b5f4:	str	r0, [fp, #-16]
   1b5f8:	movw	r1, #3
   1b5fc:	cmp	r1, r0
   1b600:	beq	1b614 <test_scan@@Base+0xd24>
   1b604:	ldr	r0, [pc, #1112]	; 1ba64 <test_scan@@Base+0x1174>
   1b608:	add	r0, pc, r0
   1b60c:	bl	12d9c <printf@plt>
   1b610:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b614:	ldr	r0, [pc, #1020]	; 1ba18 <test_scan@@Base+0x1128>
   1b618:	add	r0, pc, r0
   1b61c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b620:	ldr	r2, [r0]
   1b624:	mov	r0, r1
   1b628:	movw	r1, #3
   1b62c:	movw	r3, #3
   1b630:	and	r3, r3, #255	; 0xff
   1b634:	bl	1c340 <test_scan@@Base+0x1a50>
   1b638:	str	r0, [fp, #-16]
   1b63c:	movw	r1, #3
   1b640:	cmp	r1, r0
   1b644:	beq	1b658 <test_scan@@Base+0xd68>
   1b648:	ldr	r0, [pc, #1040]	; 1ba60 <test_scan@@Base+0x1170>
   1b64c:	add	r0, pc, r0
   1b650:	bl	12d9c <printf@plt>
   1b654:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b658:	ldr	r0, [pc, #956]	; 1ba1c <test_scan@@Base+0x112c>
   1b65c:	add	r0, pc, r0
   1b660:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b664:	ldr	r2, [r0]
   1b668:	mov	r0, r1
   1b66c:	movw	r1, #4
   1b670:	movw	r3, #3
   1b674:	and	r3, r3, #255	; 0xff
   1b678:	bl	1c340 <test_scan@@Base+0x1a50>
   1b67c:	str	r0, [fp, #-16]
   1b680:	movw	r1, #5
   1b684:	cmp	r1, r0
   1b688:	beq	1b69c <test_scan@@Base+0xdac>
   1b68c:	ldr	r0, [pc, #968]	; 1ba5c <test_scan@@Base+0x116c>
   1b690:	add	r0, pc, r0
   1b694:	bl	12d9c <printf@plt>
   1b698:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b69c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b6a0:	movw	r1, #3
   1b6a4:	and	r1, r1, #255	; 0xff
   1b6a8:	bl	1c448 <test_scan@@Base+0x1b58>
   1b6ac:	str	r0, [fp, #-16]
   1b6b0:	movw	r1, #5
   1b6b4:	cmp	r1, r0
   1b6b8:	beq	1b6cc <test_scan@@Base+0xddc>
   1b6bc:	ldr	r0, [pc, #916]	; 1ba58 <test_scan@@Base+0x1168>
   1b6c0:	add	r0, pc, r0
   1b6c4:	bl	12d9c <printf@plt>
   1b6c8:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b6cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b6d0:	movw	r1, #1
   1b6d4:	movw	r2, #4
   1b6d8:	movw	r3, #3
   1b6dc:	and	r3, r3, #255	; 0xff
   1b6e0:	bl	1c504 <test_scan@@Base+0x1c14>
   1b6e4:	str	r0, [fp, #-16]
   1b6e8:	movw	r1, #3
   1b6ec:	cmp	r1, r0
   1b6f0:	beq	1b704 <test_scan@@Base+0xe14>
   1b6f4:	ldr	r0, [pc, #856]	; 1ba54 <test_scan@@Base+0x1164>
   1b6f8:	add	r0, pc, r0
   1b6fc:	bl	12d9c <printf@plt>
   1b700:	b	1b8d0 <test_scan@@Base+0xfe0>
   1b704:	ldr	r0, [pc, #836]	; 1ba50 <test_scan@@Base+0x1160>
   1b708:	add	r1, pc, r0
   1b70c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b710:	bl	1c600 <test_scan@@Base+0x1d10>
   1b714:	ldr	r1, [pc, #812]	; 1ba48 <test_scan@@Base+0x1158>
   1b718:	add	r3, pc, r1
   1b71c:	ldr	r1, [pc, #808]	; 1ba4c <test_scan@@Base+0x115c>
   1b720:	add	r1, pc, r1
   1b724:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b728:	ldr	r1, [r1]
   1b72c:	str	r0, [sp, #64]	; 0x40
   1b730:	mov	r0, r2
   1b734:	movw	r2, #0
   1b738:	str	r1, [sp, #60]	; 0x3c
   1b73c:	mov	r1, r2
   1b740:	ldr	r2, [sp, #60]	; 0x3c
   1b744:	bl	1c6a4 <test_scan@@Base+0x1db4>
   1b748:	ldr	r1, [pc, #756]	; 1ba44 <test_scan@@Base+0x1154>
   1b74c:	add	r1, pc, r1
   1b750:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b754:	str	r0, [sp, #56]	; 0x38
   1b758:	mov	r0, r2
   1b75c:	movw	r2, #4
   1b760:	bl	1c780 <test_scan@@Base+0x1e90>
   1b764:	ldr	r1, [pc, #720]	; 1ba3c <test_scan@@Base+0x114c>
   1b768:	add	r3, pc, r1
   1b76c:	ldr	r1, [pc, #716]	; 1ba40 <test_scan@@Base+0x1150>
   1b770:	add	r1, pc, r1
   1b774:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b778:	ldr	r1, [r1]
   1b77c:	str	r0, [sp, #52]	; 0x34
   1b780:	mov	r0, r2
   1b784:	movw	r2, #0
   1b788:	str	r1, [sp, #48]	; 0x30
   1b78c:	mov	r1, r2
   1b790:	ldr	r2, [sp, #48]	; 0x30
   1b794:	movw	ip, #4
   1b798:	str	ip, [sp]
   1b79c:	bl	1c828 <test_scan@@Base+0x1f38>
   1b7a0:	ldr	r1, [pc, #656]	; 1ba38 <test_scan@@Base+0x1148>
   1b7a4:	add	r1, pc, r1
   1b7a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b7ac:	str	r0, [sp, #44]	; 0x2c
   1b7b0:	mov	r0, r2
   1b7b4:	bl	1c908 <test_scan@@Base+0x2018>
   1b7b8:	ldr	r1, [pc, #624]	; 1ba30 <test_scan@@Base+0x1140>
   1b7bc:	add	r3, pc, r1
   1b7c0:	ldr	r1, [pc, #620]	; 1ba34 <test_scan@@Base+0x1144>
   1b7c4:	add	r1, pc, r1
   1b7c8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b7cc:	ldr	r1, [r1]
   1b7d0:	str	r0, [sp, #40]	; 0x28
   1b7d4:	mov	r0, r2
   1b7d8:	movw	r2, #0
   1b7dc:	str	r1, [sp, #36]	; 0x24
   1b7e0:	mov	r1, r2
   1b7e4:	ldr	r2, [sp, #36]	; 0x24
   1b7e8:	bl	1c998 <test_scan@@Base+0x20a8>
   1b7ec:	ldr	r1, [pc, #568]	; 1ba2c <test_scan@@Base+0x113c>
   1b7f0:	add	r1, pc, r1
   1b7f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b7f8:	str	r0, [sp, #32]
   1b7fc:	mov	r0, r2
   1b800:	movw	r2, #4
   1b804:	bl	1ca68 <test_scan@@Base+0x2178>
   1b808:	ldr	r1, [pc, #532]	; 1ba24 <test_scan@@Base+0x1134>
   1b80c:	add	r3, pc, r1
   1b810:	ldr	r1, [pc, #528]	; 1ba28 <test_scan@@Base+0x1138>
   1b814:	add	r1, pc, r1
   1b818:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b81c:	ldr	r1, [r1]
   1b820:	str	r0, [sp, #28]
   1b824:	mov	r0, r2
   1b828:	movw	r2, #0
   1b82c:	str	r1, [sp, #24]
   1b830:	mov	r1, r2
   1b834:	ldr	r2, [sp, #24]
   1b838:	movw	ip, #4
   1b83c:	str	ip, [sp]
   1b840:	bl	1cafc <test_scan@@Base+0x220c>
   1b844:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b848:	str	r0, [sp, #20]
   1b84c:	mov	r0, r1
   1b850:	movw	r1, #13
   1b854:	sxth	r1, r1
   1b858:	bl	1cbd4 <test_scan@@Base+0x22e4>
   1b85c:	ldr	r1, [pc, #444]	; 1ba20 <test_scan@@Base+0x1130>
   1b860:	add	r1, pc, r1
   1b864:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b868:	ldr	r1, [r1]
   1b86c:	str	r0, [sp, #16]
   1b870:	mov	r0, r2
   1b874:	movw	r2, #1
   1b878:	str	r1, [sp, #12]
   1b87c:	mov	r1, r2
   1b880:	ldr	r2, [sp, #12]
   1b884:	movw	r3, #42	; 0x2a
   1b888:	sxth	r3, r3
   1b88c:	bl	1cca8 <test_scan@@Base+0x23b8>
   1b890:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b894:	str	r0, [sp, #8]
   1b898:	mov	r0, r1
   1b89c:	movw	r1, #1
   1b8a0:	sxth	r1, r1
   1b8a4:	bl	1cdb4 <test_scan@@Base+0x24c4>
   1b8a8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b8ac:	str	r0, [sp, #4]
   1b8b0:	mov	r0, r1
   1b8b4:	movw	r1, #0
   1b8b8:	movw	r2, #2
   1b8bc:	movw	r3, #42	; 0x2a
   1b8c0:	sxth	r3, r3
   1b8c4:	bl	1ce74 <test_scan@@Base+0x2584>
   1b8c8:	movw	r1, #0
   1b8cc:	str	r1, [fp, #-52]	; 0xffffffcc
   1b8d0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b8d4:	bl	2dcec <flatcc_builder_aligned_free@@Base>
   1b8d8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1b8dc:	sub	sp, fp, #8
   1b8e0:	pop	{r4, r5, fp, pc}
   1b8e4:	andeq	r7, r1, lr, lsr #15
   1b8e8:	andeq	r7, r1, pc, asr #28
   1b8ec:	andeq	r7, r1, lr, lsl r8
   1b8f0:	andeq	r7, r1, lr, lsr #16
   1b8f4:	andeq	r7, r1, r6, lsl #16
   1b8f8:	andeq	r6, r1, fp, asr #30
   1b8fc:	andeq	fp, r1, r3, asr r8
   1b900:	andeq	r7, r1, r9, lsr #27
   1b904:	strdeq	r7, [r1], -pc	; <UNPREDICTABLE>
   1b908:	andeq	r7, r1, r7, asr #31
   1b90c:			; <UNDEFINED> instruction: 0x00017fb9
   1b910:			; <UNDEFINED> instruction: 0x000175bf
   1b914:	andeq	r7, r1, r7, lsl #31
   1b918:	andeq	r7, r1, sp, ror pc
   1b91c:	andeq	r7, r1, pc, ror r5
   1b920:	andeq	r7, r1, r7, asr #30
   1b924:	andeq	r7, r1, sl, asr r6
   1b928:	andeq	r7, r1, lr, lsr #12
   1b92c:	andeq	r7, r1, sl, ror #28
   1b930:	andeq	r7, r1, sl, lsr lr
   1b934:	andeq	r7, r1, r2, lsr #11
   1b938:	ldrdeq	sp, [r2], -r0
   1b93c:	andeq	sp, r2, r4, asr #7
   1b940:	ldrdeq	r7, [r1], -r9
   1b944:	andeq	sp, r2, r0, ror r3
   1b948:	andeq	r7, r1, r6, lsr #9
   1b94c:	andeq	r7, r1, r2, lsl #10
   1b950:	ldrdeq	r7, [r1], -r6
   1b954:	andeq	r7, r1, r1, lsl #28
   1b958:	ldrdeq	r7, [r1], -r1
   1b95c:	andeq	r7, r1, lr, lsr r4
   1b960:	andeq	sp, r2, r4, asr #4
   1b964:	andeq	r7, r1, r5, asr sp
   1b968:	andeq	sp, r2, r4, lsl #4
   1b96c:			; <UNDEFINED> instruction: 0x000173b6
   1b970:			; <UNDEFINED> instruction: 0x0002d1bc
   1b974:	andeq	r7, r1, r1, ror #23
   1b978:	andeq	sp, r2, r8, ror r1
   1b97c:	andeq	r7, r1, r6, lsr #5
   1b980:	andeq	sp, r2, r0, lsr r1
   1b984:			; <UNDEFINED> instruction: 0x000172be
   1b988:			; <UNDEFINED> instruction: 0x000172b2
   1b98c:	andeq	r7, r1, r7, ror #17
   1b990:	andeq	sp, r2, r0, lsl #1
   1b994:	andeq	r7, r1, r1, lsr #21
   1b998:	andeq	sp, r2, r8, lsr r0
   1b99c:	andeq	r7, r1, r6, ror #2
   1b9a0:	strdeq	ip, [r2], -r0
   1b9a4:	andeq	r7, r1, lr, ror r1
   1b9a8:	andeq	r7, r1, r2, ror r1
   1b9ac:	andeq	r7, r1, r7, lsr #15
   1b9b0:	andeq	ip, r2, r0, asr #30
   1b9b4:	andeq	r7, r1, lr, rrx
   1b9b8:	strdeq	ip, [r2], -r8
   1b9bc:	andeq	r7, r1, r2, lsl #1
   1b9c0:	andeq	ip, r2, ip, lsr #29
   1b9c4:	andeq	r7, r1, r6, lsr r0
   1b9c8:	andeq	ip, r2, r0, ror #28
   1b9cc:	andeq	r6, r1, r6, ror #30
   1b9d0:	strdeq	ip, [r2], -r4
   1b9d4:	andeq	ip, r2, ip, lsl lr
   1b9d8:	andeq	r6, r1, r2, lsr #30
   1b9dc:	andeq	ip, r2, ip, lsr #27
   1b9e0:	andeq	r6, r1, r6, lsr pc
   1b9e4:	andeq	ip, r2, r0, ror #26
   1b9e8:	andeq	r6, r1, sl, ror #29
   1b9ec:	andeq	ip, r2, r4, lsl sp
   1b9f0:	andeq	r6, r1, sl, lsl lr
   1b9f4:	andeq	ip, r2, r8, lsr #25
   1b9f8:	ldrdeq	ip, [r2], -r0
   1b9fc:	andeq	r6, r1, r6, lsr lr
   1ba00:	muleq	r1, sp, r6
   1ba04:	andeq	r6, r1, lr, ror sp
   1ba08:	ldrdeq	r6, [r1], -sl
   1ba0c:	andeq	ip, r2, ip, asr fp
   1ba10:	andeq	ip, r2, r0, asr fp
   1ba14:	strdeq	ip, [r2], -r8
   1ba18:	andeq	ip, r2, r8, asr sl
   1ba1c:	andeq	ip, r2, r4, lsl sl
   1ba20:	andeq	ip, r2, r0, lsl r8
   1ba24:	andeq	r6, r1, pc, lsr fp
   1ba28:	andeq	ip, r2, ip, asr r8
   1ba2c:	andeq	r6, r1, fp, asr fp
   1ba30:	andeq	r6, r1, pc, lsl #23
   1ba34:	andeq	ip, r2, ip, lsr #17
   1ba38:	andeq	r6, r1, r7, lsr #23
   1ba3c:	andeq	r6, r1, r3, ror #23
   1ba40:	andeq	ip, r2, r0, lsl #18
   1ba44:	strdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   1ba48:	andeq	r6, r1, r3, lsr ip
   1ba4c:	andeq	ip, r2, r0, asr r9
   1ba50:	andeq	r6, r1, r3, asr #24
   1ba54:	andeq	r7, r1, r5, ror #17
   1ba58:	andeq	r7, r1, sl, ror #17
   1ba5c:	ldrdeq	r7, [r1], -sp
   1ba60:	andeq	r7, r1, r6, ror #17
   1ba64:	andeq	r7, r1, r3, lsr #19
   1ba68:	andeq	r7, r1, lr, lsr #18
   1ba6c:	andeq	r7, r1, r3, lsl #20
   1ba70:	andeq	r7, r1, r9, ror #18
   1ba74:	muleq	r1, fp, r9
   1ba78:	muleq	r1, lr, r9
   1ba7c:			; <UNDEFINED> instruction: 0x000179b0
   1ba80:	andeq	r7, r1, r0, asr #19
   1ba84:	ldrdeq	r7, [r1], -r0
   1ba88:	andeq	r7, r1, r1, ror #19
   1ba8c:	andeq	r7, r1, r1, ror #19
   1ba90:	andeq	r7, r1, r2, lsr #20
   1ba94:	andeq	r7, r1, pc, asr #20
   1ba98:	andeq	r7, r1, sl, ror sl
   1ba9c:	andeq	r7, r1, sp, lsr #22
   1baa0:	andeq	r7, r1, lr, ror #22
   1baa4:	muleq	r1, fp, fp
   1baa8:	andeq	r7, r1, r6, asr #23
   1baac:	andeq	r7, r1, r5, ror #23
   1bab0:	andeq	r7, r1, r4, lsl #24
   1bab4:	andeq	r7, r1, r2, lsl ip
   1bab8:	andeq	r7, r1, r9, lsl ip
   1babc:	andeq	r7, r1, r3, lsr ip
   1bac0:	andeq	r7, r1, pc, asr #24
   1bac4:	andeq	r7, r1, r5, asr #26
   1bac8:	andeq	r7, r1, r3, asr sp
   1bacc:	ldrdeq	r7, [r1], -sp
   1bad0:	andeq	r7, r1, r2, lsl #26
   1bad4:	andeq	r7, r1, lr, lsr #26
   1bad8:	andeq	r7, r1, r3, asr #26
   1badc:	andeq	r7, r1, fp, lsl #27
   1bae0:			; <UNDEFINED> instruction: 0x00017db0
   1bae4:	andeq	r7, r1, ip, ror #27
   1bae8:	andeq	r7, r1, sl, ror #28
   1baec:	muleq	r1, r6, lr
   1baf0:			; <UNDEFINED> instruction: 0x00017db4
   1baf4:			; <UNDEFINED> instruction: 0x00017db0
   1baf8:	andeq	r7, r1, r9, lsr #29
   1bafc:	ldrdeq	r7, [r1], -lr
   1bb00:	andeq	r7, r1, lr, lsl #30
   1bb04:	andeq	r7, r1, sp, lsl pc
   1bb08:	andeq	r7, r1, sl, asr #30
   1bb0c:	push	{fp, lr}
   1bb10:	mov	fp, sp
   1bb14:	sub	sp, sp, #8
   1bb18:	str	r0, [sp, #4]
   1bb1c:	ldr	r0, [sp, #4]
   1bb20:	bl	2a924 <flatcc_builder_start_offset_vector@@Base>
   1bb24:	mov	sp, fp
   1bb28:	pop	{fp, pc}
   1bb2c:	push	{fp, lr}
   1bb30:	mov	fp, sp
   1bb34:	sub	sp, sp, #16
   1bb38:	str	r0, [fp, #-4]
   1bb3c:	ldr	r0, [fp, #-4]
   1bb40:	ldr	r1, [fp, #-4]
   1bb44:	str	r0, [sp, #8]
   1bb48:	mov	r0, r1
   1bb4c:	bl	2aa30 <flatcc_builder_end_offset_vector@@Base>
   1bb50:	ldr	r1, [sp, #8]
   1bb54:	str	r0, [sp, #4]
   1bb58:	mov	r0, r1
   1bb5c:	ldr	r1, [sp, #4]
   1bb60:	bl	25f18 <main@@Base+0x2f60>
   1bb64:	mov	sp, fp
   1bb68:	pop	{fp, pc}
   1bb6c:	push	{fp, lr}
   1bb70:	mov	fp, sp
   1bb74:	sub	sp, sp, #8
   1bb78:	str	r0, [sp, #4]
   1bb7c:	str	r1, [sp]
   1bb80:	ldr	r0, [sp, #4]
   1bb84:	ldr	r1, [sp]
   1bb88:	bl	1bc54 <test_scan@@Base+0x1364>
   1bb8c:	mov	sp, fp
   1bb90:	pop	{fp, pc}
   1bb94:	push	{fp, lr}
   1bb98:	mov	fp, sp
   1bb9c:	sub	sp, sp, #8
   1bba0:	str	r0, [sp, #4]
   1bba4:	str	r1, [sp]
   1bba8:	ldr	r0, [sp, #4]
   1bbac:	ldr	r1, [sp]
   1bbb0:	bl	1bcfc <test_scan@@Base+0x140c>
   1bbb4:	mov	sp, fp
   1bbb8:	pop	{fp, pc}
   1bbbc:	push	{fp, lr}
   1bbc0:	mov	fp, sp
   1bbc4:	sub	sp, sp, #16
   1bbc8:	str	r0, [fp, #-4]
   1bbcc:	str	r1, [sp, #8]
   1bbd0:	str	r2, [sp, #4]
   1bbd4:	ldr	r0, [fp, #-4]
   1bbd8:	ldr	r1, [sp, #8]
   1bbdc:	ldr	r2, [sp, #4]
   1bbe0:	bl	265e4 <main@@Base+0x362c>
   1bbe4:	mov	sp, fp
   1bbe8:	pop	{fp, pc}
   1bbec:	push	{fp, lr}
   1bbf0:	mov	fp, sp
   1bbf4:	sub	sp, sp, #16
   1bbf8:	str	r0, [fp, #-4]
   1bbfc:	str	r1, [sp, #8]
   1bc00:	str	r2, [sp, #4]
   1bc04:	ldr	r0, [fp, #-4]
   1bc08:	ldr	r1, [sp, #8]
   1bc0c:	ldr	r2, [sp, #4]
   1bc10:	bl	1bd90 <test_scan@@Base+0x14a0>
   1bc14:	mov	sp, fp
   1bc18:	pop	{fp, pc}
   1bc1c:	push	{fp, lr}
   1bc20:	mov	fp, sp
   1bc24:	sub	sp, sp, #16
   1bc28:	str	r0, [fp, #-4]
   1bc2c:	str	r1, [sp, #8]
   1bc30:	str	r2, [sp, #4]
   1bc34:	str	r3, [sp]
   1bc38:	ldr	r0, [fp, #-4]
   1bc3c:	ldr	r1, [sp, #8]
   1bc40:	ldr	r2, [sp, #4]
   1bc44:	ldr	r3, [sp]
   1bc48:	bl	1bf04 <test_scan@@Base+0x1614>
   1bc4c:	mov	sp, fp
   1bc50:	pop	{fp, pc}
   1bc54:	push	{fp, lr}
   1bc58:	mov	fp, sp
   1bc5c:	sub	sp, sp, #24
   1bc60:	str	r0, [fp, #-8]
   1bc64:	str	r1, [sp, #12]
   1bc68:	movw	r0, #0
   1bc6c:	str	r0, [sp, #4]
   1bc70:	ldr	r0, [sp, #4]
   1bc74:	ldr	r1, [fp, #-8]
   1bc78:	str	r0, [sp]
   1bc7c:	mov	r0, r1
   1bc80:	bl	1769c <verify_monster@@Base+0x1cd0>
   1bc84:	ldr	r1, [sp]
   1bc88:	cmp	r1, r0
   1bc8c:	bcs	1bcdc <test_scan@@Base+0x13ec>
   1bc90:	ldr	r0, [fp, #-8]
   1bc94:	ldr	r1, [sp, #4]
   1bc98:	bl	176ec <verify_monster@@Base+0x1d20>
   1bc9c:	bl	16bcc <verify_monster@@Base+0x1200>
   1bca0:	str	r0, [sp, #8]
   1bca4:	ldr	r0, [sp, #8]
   1bca8:	ldr	r1, [sp, #12]
   1bcac:	movw	r2, #0
   1bcb0:	bl	265b8 <main@@Base+0x3600>
   1bcb4:	cmp	r0, #0
   1bcb8:	bne	1bcc8 <test_scan@@Base+0x13d8>
   1bcbc:	ldr	r0, [sp, #4]
   1bcc0:	str	r0, [fp, #-4]
   1bcc4:	b	1bcec <test_scan@@Base+0x13fc>
   1bcc8:	b	1bccc <test_scan@@Base+0x13dc>
   1bccc:	ldr	r0, [sp, #4]
   1bcd0:	add	r0, r0, #1
   1bcd4:	str	r0, [sp, #4]
   1bcd8:	b	1bc70 <test_scan@@Base+0x1380>
   1bcdc:	ldr	r0, [pc, #20]	; 1bcf8 <test_scan@@Base+0x1408>
   1bce0:	add	r0, pc, r0
   1bce4:	ldr	r0, [r0]
   1bce8:	str	r0, [fp, #-4]
   1bcec:	ldr	r0, [fp, #-4]
   1bcf0:	mov	sp, fp
   1bcf4:	pop	{fp, pc}
   1bcf8:	andeq	ip, r2, ip, lsl #7
   1bcfc:	push	{fp, lr}
   1bd00:	mov	fp, sp
   1bd04:	sub	sp, sp, #24
   1bd08:	str	r0, [fp, #-8]
   1bd0c:	str	r1, [sp, #12]
   1bd10:	ldr	r0, [fp, #-8]
   1bd14:	bl	1769c <verify_monster@@Base+0x1cd0>
   1bd18:	str	r0, [sp, #4]
   1bd1c:	ldr	r0, [sp, #4]
   1bd20:	mvn	r1, #0
   1bd24:	add	r1, r0, r1
   1bd28:	str	r1, [sp, #4]
   1bd2c:	cmp	r0, #0
   1bd30:	bls	1bd70 <test_scan@@Base+0x1480>
   1bd34:	ldr	r0, [fp, #-8]
   1bd38:	ldr	r1, [sp, #4]
   1bd3c:	bl	176ec <verify_monster@@Base+0x1d20>
   1bd40:	bl	16bcc <verify_monster@@Base+0x1200>
   1bd44:	str	r0, [sp, #8]
   1bd48:	ldr	r0, [sp, #8]
   1bd4c:	ldr	r1, [sp, #12]
   1bd50:	movw	r2, #0
   1bd54:	bl	265b8 <main@@Base+0x3600>
   1bd58:	cmp	r0, #0
   1bd5c:	bne	1bd6c <test_scan@@Base+0x147c>
   1bd60:	ldr	r0, [sp, #4]
   1bd64:	str	r0, [fp, #-4]
   1bd68:	b	1bd80 <test_scan@@Base+0x1490>
   1bd6c:	b	1bd1c <test_scan@@Base+0x142c>
   1bd70:	ldr	r0, [pc, #20]	; 1bd8c <test_scan@@Base+0x149c>
   1bd74:	add	r0, pc, r0
   1bd78:	ldr	r0, [r0]
   1bd7c:	str	r0, [fp, #-4]
   1bd80:	ldr	r0, [fp, #-4]
   1bd84:	mov	sp, fp
   1bd88:	pop	{fp, pc}
   1bd8c:	strdeq	ip, [r2], -r8
   1bd90:	push	{fp, lr}
   1bd94:	mov	fp, sp
   1bd98:	sub	sp, sp, #24
   1bd9c:	str	r0, [fp, #-8]
   1bda0:	str	r1, [sp, #12]
   1bda4:	str	r2, [sp, #8]
   1bda8:	ldr	r0, [fp, #-8]
   1bdac:	bl	1769c <verify_monster@@Base+0x1cd0>
   1bdb0:	str	r0, [sp]
   1bdb4:	ldr	r0, [sp]
   1bdb8:	mvn	r1, #0
   1bdbc:	add	r1, r0, r1
   1bdc0:	str	r1, [sp]
   1bdc4:	cmp	r0, #0
   1bdc8:	bls	1be08 <test_scan@@Base+0x1518>
   1bdcc:	ldr	r0, [fp, #-8]
   1bdd0:	ldr	r1, [sp]
   1bdd4:	bl	176ec <verify_monster@@Base+0x1d20>
   1bdd8:	bl	16bcc <verify_monster@@Base+0x1200>
   1bddc:	str	r0, [sp, #4]
   1bde0:	ldr	r0, [sp, #4]
   1bde4:	ldr	r1, [sp, #12]
   1bde8:	ldr	r2, [sp, #8]
   1bdec:	bl	264c8 <main@@Base+0x3510>
   1bdf0:	cmp	r0, #0
   1bdf4:	bne	1be04 <test_scan@@Base+0x1514>
   1bdf8:	ldr	r0, [sp]
   1bdfc:	str	r0, [fp, #-4]
   1be00:	b	1be18 <test_scan@@Base+0x1528>
   1be04:	b	1bdb4 <test_scan@@Base+0x14c4>
   1be08:	ldr	r0, [pc, #20]	; 1be24 <test_scan@@Base+0x1534>
   1be0c:	add	r0, pc, r0
   1be10:	ldr	r0, [r0]
   1be14:	str	r0, [fp, #-4]
   1be18:	ldr	r0, [fp, #-4]
   1be1c:	mov	sp, fp
   1be20:	pop	{fp, pc}
   1be24:	andeq	ip, r2, r0, ror #4
   1be28:	push	{fp, lr}
   1be2c:	mov	fp, sp
   1be30:	sub	sp, sp, #40	; 0x28
   1be34:	ldr	ip, [fp, #8]
   1be38:	str	r0, [fp, #-8]
   1be3c:	str	r1, [fp, #-12]
   1be40:	str	r2, [fp, #-16]
   1be44:	str	r3, [sp, #20]
   1be48:	ldr	r0, [fp, #-16]
   1be4c:	ldr	r1, [fp, #-8]
   1be50:	str	r0, [sp, #8]
   1be54:	mov	r0, r1
   1be58:	str	ip, [sp, #4]
   1be5c:	bl	1769c <verify_monster@@Base+0x1cd0>
   1be60:	ldr	r1, [sp, #8]
   1be64:	cmp	r1, r0
   1be68:	bcs	1be78 <test_scan@@Base+0x1588>
   1be6c:	ldr	r0, [fp, #-16]
   1be70:	str	r0, [sp]
   1be74:	b	1be84 <test_scan@@Base+0x1594>
   1be78:	ldr	r0, [fp, #-8]
   1be7c:	bl	1769c <verify_monster@@Base+0x1cd0>
   1be80:	str	r0, [sp]
   1be84:	ldr	r0, [sp]
   1be88:	str	r0, [sp, #12]
   1be8c:	ldr	r0, [sp, #12]
   1be90:	mvn	r1, #0
   1be94:	add	r1, r0, r1
   1be98:	str	r1, [sp, #12]
   1be9c:	ldr	r1, [fp, #-12]
   1bea0:	cmp	r0, r1
   1bea4:	bls	1bee4 <test_scan@@Base+0x15f4>
   1bea8:	ldr	r0, [fp, #-8]
   1beac:	ldr	r1, [sp, #12]
   1beb0:	bl	176ec <verify_monster@@Base+0x1d20>
   1beb4:	bl	16bcc <verify_monster@@Base+0x1200>
   1beb8:	str	r0, [sp, #16]
   1bebc:	ldr	r0, [sp, #16]
   1bec0:	ldr	r1, [sp, #20]
   1bec4:	ldr	r2, [fp, #8]
   1bec8:	bl	264c8 <main@@Base+0x3510>
   1becc:	cmp	r0, #0
   1bed0:	bne	1bee0 <test_scan@@Base+0x15f0>
   1bed4:	ldr	r0, [sp, #12]
   1bed8:	str	r0, [fp, #-4]
   1bedc:	b	1bef4 <test_scan@@Base+0x1604>
   1bee0:	b	1be8c <test_scan@@Base+0x159c>
   1bee4:	ldr	r0, [pc, #20]	; 1bf00 <test_scan@@Base+0x1610>
   1bee8:	add	r0, pc, r0
   1beec:	ldr	r0, [r0]
   1bef0:	str	r0, [fp, #-4]
   1bef4:	ldr	r0, [fp, #-4]
   1bef8:	mov	sp, fp
   1befc:	pop	{fp, pc}
   1bf00:	andeq	ip, r2, r4, lsl #3
   1bf04:	push	{fp, lr}
   1bf08:	mov	fp, sp
   1bf0c:	sub	sp, sp, #40	; 0x28
   1bf10:	str	r0, [fp, #-8]
   1bf14:	str	r1, [fp, #-12]
   1bf18:	str	r2, [fp, #-16]
   1bf1c:	str	r3, [sp, #20]
   1bf20:	ldr	r0, [fp, #-12]
   1bf24:	str	r0, [sp, #12]
   1bf28:	ldr	r0, [sp, #12]
   1bf2c:	ldr	r1, [fp, #-16]
   1bf30:	ldr	r2, [fp, #-8]
   1bf34:	str	r0, [sp, #8]
   1bf38:	mov	r0, r2
   1bf3c:	str	r1, [sp, #4]
   1bf40:	bl	1769c <verify_monster@@Base+0x1cd0>
   1bf44:	ldr	r1, [sp, #4]
   1bf48:	cmp	r1, r0
   1bf4c:	bcs	1bf5c <test_scan@@Base+0x166c>
   1bf50:	ldr	r0, [fp, #-16]
   1bf54:	str	r0, [sp]
   1bf58:	b	1bf68 <test_scan@@Base+0x1678>
   1bf5c:	ldr	r0, [fp, #-8]
   1bf60:	bl	1769c <verify_monster@@Base+0x1cd0>
   1bf64:	str	r0, [sp]
   1bf68:	ldr	r0, [sp]
   1bf6c:	ldr	r1, [sp, #8]
   1bf70:	cmp	r1, r0
   1bf74:	bcs	1bfc4 <test_scan@@Base+0x16d4>
   1bf78:	ldr	r0, [fp, #-8]
   1bf7c:	ldr	r1, [sp, #12]
   1bf80:	bl	176ec <verify_monster@@Base+0x1d20>
   1bf84:	bl	16bcc <verify_monster@@Base+0x1200>
   1bf88:	str	r0, [sp, #16]
   1bf8c:	ldr	r0, [sp, #16]
   1bf90:	ldr	r1, [sp, #20]
   1bf94:	movw	r2, #0
   1bf98:	bl	265b8 <main@@Base+0x3600>
   1bf9c:	cmp	r0, #0
   1bfa0:	bne	1bfb0 <test_scan@@Base+0x16c0>
   1bfa4:	ldr	r0, [sp, #12]
   1bfa8:	str	r0, [fp, #-4]
   1bfac:	b	1bfd4 <test_scan@@Base+0x16e4>
   1bfb0:	b	1bfb4 <test_scan@@Base+0x16c4>
   1bfb4:	ldr	r0, [sp, #12]
   1bfb8:	add	r0, r0, #1
   1bfbc:	str	r0, [sp, #12]
   1bfc0:	b	1bf28 <test_scan@@Base+0x1638>
   1bfc4:	ldr	r0, [pc, #20]	; 1bfe0 <test_scan@@Base+0x16f0>
   1bfc8:	add	r0, pc, r0
   1bfcc:	ldr	r0, [r0]
   1bfd0:	str	r0, [fp, #-4]
   1bfd4:	ldr	r0, [fp, #-4]
   1bfd8:	mov	sp, fp
   1bfdc:	pop	{fp, pc}
   1bfe0:	andeq	ip, r2, r4, lsr #1
   1bfe4:	push	{fp, lr}
   1bfe8:	mov	fp, sp
   1bfec:	sub	sp, sp, #40	; 0x28
   1bff0:	ldr	ip, [fp, #8]
   1bff4:	str	r0, [fp, #-8]
   1bff8:	str	r1, [fp, #-12]
   1bffc:	str	r2, [fp, #-16]
   1c000:	str	r3, [sp, #20]
   1c004:	ldr	r0, [fp, #-12]
   1c008:	str	r0, [sp, #12]
   1c00c:	ldr	r0, [sp, #12]
   1c010:	ldr	r1, [fp, #-16]
   1c014:	ldr	r2, [fp, #-8]
   1c018:	str	r0, [sp, #8]
   1c01c:	mov	r0, r2
   1c020:	str	r1, [sp, #4]
   1c024:	bl	1769c <verify_monster@@Base+0x1cd0>
   1c028:	ldr	r1, [sp, #4]
   1c02c:	cmp	r1, r0
   1c030:	bcs	1c040 <test_scan@@Base+0x1750>
   1c034:	ldr	r0, [fp, #-16]
   1c038:	str	r0, [sp]
   1c03c:	b	1c04c <test_scan@@Base+0x175c>
   1c040:	ldr	r0, [fp, #-8]
   1c044:	bl	1769c <verify_monster@@Base+0x1cd0>
   1c048:	str	r0, [sp]
   1c04c:	ldr	r0, [sp]
   1c050:	ldr	r1, [sp, #8]
   1c054:	cmp	r1, r0
   1c058:	bcs	1c0a8 <test_scan@@Base+0x17b8>
   1c05c:	ldr	r0, [fp, #-8]
   1c060:	ldr	r1, [sp, #12]
   1c064:	bl	176ec <verify_monster@@Base+0x1d20>
   1c068:	bl	16bcc <verify_monster@@Base+0x1200>
   1c06c:	str	r0, [sp, #16]
   1c070:	ldr	r0, [sp, #16]
   1c074:	ldr	r1, [sp, #20]
   1c078:	ldr	r2, [fp, #8]
   1c07c:	bl	264c8 <main@@Base+0x3510>
   1c080:	cmp	r0, #0
   1c084:	bne	1c094 <test_scan@@Base+0x17a4>
   1c088:	ldr	r0, [sp, #12]
   1c08c:	str	r0, [fp, #-4]
   1c090:	b	1c0b8 <test_scan@@Base+0x17c8>
   1c094:	b	1c098 <test_scan@@Base+0x17a8>
   1c098:	ldr	r0, [sp, #12]
   1c09c:	add	r0, r0, #1
   1c0a0:	str	r0, [sp, #12]
   1c0a4:	b	1c00c <test_scan@@Base+0x171c>
   1c0a8:	ldr	r0, [pc, #20]	; 1c0c4 <test_scan@@Base+0x17d4>
   1c0ac:	add	r0, pc, r0
   1c0b0:	ldr	r0, [r0]
   1c0b4:	str	r0, [fp, #-4]
   1c0b8:	ldr	r0, [fp, #-4]
   1c0bc:	mov	sp, fp
   1c0c0:	pop	{fp, pc}
   1c0c4:	andeq	fp, r2, r0, asr #31
   1c0c8:	push	{fp, lr}
   1c0cc:	mov	fp, sp
   1c0d0:	sub	sp, sp, #16
   1c0d4:	str	r0, [fp, #-4]
   1c0d8:	str	r1, [sp, #8]
   1c0dc:	str	r2, [sp, #4]
   1c0e0:	str	r3, [sp]
   1c0e4:	ldr	r0, [fp, #-4]
   1c0e8:	ldr	r1, [sp, #8]
   1c0ec:	ldr	r2, [sp, #4]
   1c0f0:	ldr	r3, [sp]
   1c0f4:	bl	1c100 <test_scan@@Base+0x1810>
   1c0f8:	mov	sp, fp
   1c0fc:	pop	{fp, pc}
   1c100:	push	{fp, lr}
   1c104:	mov	fp, sp
   1c108:	sub	sp, sp, #40	; 0x28
   1c10c:	str	r0, [fp, #-8]
   1c110:	str	r1, [fp, #-12]
   1c114:	str	r2, [fp, #-16]
   1c118:	str	r3, [sp, #20]
   1c11c:	ldr	r0, [fp, #-16]
   1c120:	ldr	r1, [fp, #-8]
   1c124:	str	r0, [sp, #8]
   1c128:	mov	r0, r1
   1c12c:	bl	1769c <verify_monster@@Base+0x1cd0>
   1c130:	ldr	r1, [sp, #8]
   1c134:	cmp	r1, r0
   1c138:	bcs	1c148 <test_scan@@Base+0x1858>
   1c13c:	ldr	r0, [fp, #-16]
   1c140:	str	r0, [sp, #4]
   1c144:	b	1c154 <test_scan@@Base+0x1864>
   1c148:	ldr	r0, [fp, #-8]
   1c14c:	bl	1769c <verify_monster@@Base+0x1cd0>
   1c150:	str	r0, [sp, #4]
   1c154:	ldr	r0, [sp, #4]
   1c158:	str	r0, [sp, #12]
   1c15c:	ldr	r0, [sp, #12]
   1c160:	mvn	r1, #0
   1c164:	add	r1, r0, r1
   1c168:	str	r1, [sp, #12]
   1c16c:	ldr	r1, [fp, #-12]
   1c170:	cmp	r0, r1
   1c174:	bls	1c1b4 <test_scan@@Base+0x18c4>
   1c178:	ldr	r0, [fp, #-8]
   1c17c:	ldr	r1, [sp, #12]
   1c180:	bl	176ec <verify_monster@@Base+0x1d20>
   1c184:	bl	16bcc <verify_monster@@Base+0x1200>
   1c188:	str	r0, [sp, #16]
   1c18c:	ldr	r0, [sp, #16]
   1c190:	ldr	r1, [sp, #20]
   1c194:	movw	r2, #0
   1c198:	bl	265b8 <main@@Base+0x3600>
   1c19c:	cmp	r0, #0
   1c1a0:	bne	1c1b0 <test_scan@@Base+0x18c0>
   1c1a4:	ldr	r0, [sp, #12]
   1c1a8:	str	r0, [fp, #-4]
   1c1ac:	b	1c1c4 <test_scan@@Base+0x18d4>
   1c1b0:	b	1c15c <test_scan@@Base+0x186c>
   1c1b4:	ldr	r0, [pc, #20]	; 1c1d0 <test_scan@@Base+0x18e0>
   1c1b8:	add	r0, pc, r0
   1c1bc:	ldr	r0, [r0]
   1c1c0:	str	r0, [fp, #-4]
   1c1c4:	ldr	r0, [fp, #-4]
   1c1c8:	mov	sp, fp
   1c1cc:	pop	{fp, pc}
   1c1d0:			; <UNDEFINED> instruction: 0x0002beb4
   1c1d4:	push	{fp, lr}
   1c1d8:	mov	fp, sp
   1c1dc:	sub	sp, sp, #24
   1c1e0:	str	r0, [fp, #-4]
   1c1e4:	str	r1, [fp, #-8]
   1c1e8:	movw	r0, #0
   1c1ec:	str	r0, [sp, #8]
   1c1f0:	ldr	r0, [fp, #-4]
   1c1f4:	ldr	r1, [fp, #-8]
   1c1f8:	bl	1bb6c <test_scan@@Base+0x127c>
   1c1fc:	str	r0, [sp, #12]
   1c200:	ldr	r0, [pc, #96]	; 1c268 <test_scan@@Base+0x1978>
   1c204:	add	r0, pc, r0
   1c208:	ldr	r1, [sp, #12]
   1c20c:	ldr	r0, [r0]
   1c210:	cmp	r1, r0
   1c214:	beq	1c25c <test_scan@@Base+0x196c>
   1c218:	ldr	r0, [sp, #8]
   1c21c:	add	r0, r0, #1
   1c220:	str	r0, [sp, #8]
   1c224:	ldr	r0, [pc, #64]	; 1c26c <test_scan@@Base+0x197c>
   1c228:	add	r0, pc, r0
   1c22c:	ldr	r1, [fp, #-4]
   1c230:	ldr	r2, [sp, #12]
   1c234:	add	r2, r2, #1
   1c238:	ldr	r0, [r0]
   1c23c:	ldr	r3, [fp, #-8]
   1c240:	str	r0, [sp, #4]
   1c244:	mov	r0, r1
   1c248:	mov	r1, r2
   1c24c:	ldr	r2, [sp, #4]
   1c250:	bl	1bc1c <test_scan@@Base+0x132c>
   1c254:	str	r0, [sp, #12]
   1c258:	b	1c200 <test_scan@@Base+0x1910>
   1c25c:	ldr	r0, [sp, #8]
   1c260:	mov	sp, fp
   1c264:	pop	{fp, pc}
   1c268:	andeq	fp, r2, r8, ror #28
   1c26c:	andeq	fp, r2, r8, asr #28
   1c270:	push	{fp, lr}
   1c274:	mov	fp, sp
   1c278:	sub	sp, sp, #24
   1c27c:	str	r0, [fp, #-8]
   1c280:	strb	r1, [fp, #-9]
   1c284:	movw	r0, #0
   1c288:	str	r0, [sp, #8]
   1c28c:	ldr	r0, [sp, #8]
   1c290:	ldr	r1, [fp, #-8]
   1c294:	str	r0, [sp, #4]
   1c298:	mov	r0, r1
   1c29c:	bl	170d0 <verify_monster@@Base+0x1704>
   1c2a0:	ldr	r1, [sp, #4]
   1c2a4:	cmp	r1, r0
   1c2a8:	bcs	1c320 <test_scan@@Base+0x1a30>
   1c2ac:	ldr	r0, [fp, #-8]
   1c2b0:	ldr	r1, [sp, #8]
   1c2b4:	bl	170f0 <verify_monster@@Base+0x1724>
   1c2b8:	strb	r0, [fp, #-10]
   1c2bc:	ldrb	r0, [fp, #-10]
   1c2c0:	ldrb	r1, [fp, #-9]
   1c2c4:	cmp	r0, r1
   1c2c8:	bge	1c2d8 <test_scan@@Base+0x19e8>
   1c2cc:	mvn	r0, #0
   1c2d0:	str	r0, [sp]
   1c2d4:	b	1c2f4 <test_scan@@Base+0x1a04>
   1c2d8:	ldrb	r0, [fp, #-10]
   1c2dc:	ldrb	r1, [fp, #-9]
   1c2e0:	cmp	r0, r1
   1c2e4:	movw	r0, #0
   1c2e8:	movgt	r0, #1
   1c2ec:	and	r0, r0, #1
   1c2f0:	str	r0, [sp]
   1c2f4:	ldr	r0, [sp]
   1c2f8:	cmp	r0, #0
   1c2fc:	bne	1c30c <test_scan@@Base+0x1a1c>
   1c300:	ldr	r0, [sp, #8]
   1c304:	str	r0, [fp, #-4]
   1c308:	b	1c330 <test_scan@@Base+0x1a40>
   1c30c:	b	1c310 <test_scan@@Base+0x1a20>
   1c310:	ldr	r0, [sp, #8]
   1c314:	add	r0, r0, #1
   1c318:	str	r0, [sp, #8]
   1c31c:	b	1c28c <test_scan@@Base+0x199c>
   1c320:	ldr	r0, [pc, #20]	; 1c33c <test_scan@@Base+0x1a4c>
   1c324:	add	r0, pc, r0
   1c328:	ldr	r0, [r0]
   1c32c:	str	r0, [fp, #-4]
   1c330:	ldr	r0, [fp, #-4]
   1c334:	mov	sp, fp
   1c338:	pop	{fp, pc}
   1c33c:	andeq	fp, r2, r8, asr #26
   1c340:	push	{fp, lr}
   1c344:	mov	fp, sp
   1c348:	sub	sp, sp, #40	; 0x28
   1c34c:	str	r0, [fp, #-8]
   1c350:	str	r1, [fp, #-12]
   1c354:	str	r2, [fp, #-16]
   1c358:	strb	r3, [fp, #-17]	; 0xffffffef
   1c35c:	ldr	r0, [fp, #-12]
   1c360:	str	r0, [sp, #16]
   1c364:	ldr	r0, [sp, #16]
   1c368:	ldr	r1, [fp, #-16]
   1c36c:	ldr	r2, [fp, #-8]
   1c370:	str	r0, [sp, #12]
   1c374:	mov	r0, r2
   1c378:	str	r1, [sp, #8]
   1c37c:	bl	170d0 <verify_monster@@Base+0x1704>
   1c380:	ldr	r1, [sp, #8]
   1c384:	cmp	r1, r0
   1c388:	bcs	1c398 <test_scan@@Base+0x1aa8>
   1c38c:	ldr	r0, [fp, #-16]
   1c390:	str	r0, [sp, #4]
   1c394:	b	1c3a4 <test_scan@@Base+0x1ab4>
   1c398:	ldr	r0, [fp, #-8]
   1c39c:	bl	170d0 <verify_monster@@Base+0x1704>
   1c3a0:	str	r0, [sp, #4]
   1c3a4:	ldr	r0, [sp, #4]
   1c3a8:	ldr	r1, [sp, #12]
   1c3ac:	cmp	r1, r0
   1c3b0:	bcs	1c428 <test_scan@@Base+0x1b38>
   1c3b4:	ldr	r0, [fp, #-8]
   1c3b8:	ldr	r1, [sp, #16]
   1c3bc:	bl	170f0 <verify_monster@@Base+0x1724>
   1c3c0:	strb	r0, [fp, #-18]	; 0xffffffee
   1c3c4:	ldrb	r0, [fp, #-18]	; 0xffffffee
   1c3c8:	ldrb	r1, [fp, #-17]	; 0xffffffef
   1c3cc:	cmp	r0, r1
   1c3d0:	bge	1c3e0 <test_scan@@Base+0x1af0>
   1c3d4:	mvn	r0, #0
   1c3d8:	str	r0, [sp]
   1c3dc:	b	1c3fc <test_scan@@Base+0x1b0c>
   1c3e0:	ldrb	r0, [fp, #-18]	; 0xffffffee
   1c3e4:	ldrb	r1, [fp, #-17]	; 0xffffffef
   1c3e8:	cmp	r0, r1
   1c3ec:	movw	r0, #0
   1c3f0:	movgt	r0, #1
   1c3f4:	and	r0, r0, #1
   1c3f8:	str	r0, [sp]
   1c3fc:	ldr	r0, [sp]
   1c400:	cmp	r0, #0
   1c404:	bne	1c414 <test_scan@@Base+0x1b24>
   1c408:	ldr	r0, [sp, #16]
   1c40c:	str	r0, [fp, #-4]
   1c410:	b	1c438 <test_scan@@Base+0x1b48>
   1c414:	b	1c418 <test_scan@@Base+0x1b28>
   1c418:	ldr	r0, [sp, #16]
   1c41c:	add	r0, r0, #1
   1c420:	str	r0, [sp, #16]
   1c424:	b	1c364 <test_scan@@Base+0x1a74>
   1c428:	ldr	r0, [pc, #20]	; 1c444 <test_scan@@Base+0x1b54>
   1c42c:	add	r0, pc, r0
   1c430:	ldr	r0, [r0]
   1c434:	str	r0, [fp, #-4]
   1c438:	ldr	r0, [fp, #-4]
   1c43c:	mov	sp, fp
   1c440:	pop	{fp, pc}
   1c444:	andeq	fp, r2, r0, asr #24
   1c448:	push	{fp, lr}
   1c44c:	mov	fp, sp
   1c450:	sub	sp, sp, #24
   1c454:	str	r0, [fp, #-8]
   1c458:	strb	r1, [fp, #-9]
   1c45c:	ldr	r0, [fp, #-8]
   1c460:	bl	170d0 <verify_monster@@Base+0x1704>
   1c464:	str	r0, [sp, #8]
   1c468:	ldr	r0, [sp, #8]
   1c46c:	mvn	r1, #0
   1c470:	add	r1, r0, r1
   1c474:	str	r1, [sp, #8]
   1c478:	cmp	r0, #0
   1c47c:	bls	1c4e4 <test_scan@@Base+0x1bf4>
   1c480:	ldr	r0, [fp, #-8]
   1c484:	ldr	r1, [sp, #8]
   1c488:	bl	170f0 <verify_monster@@Base+0x1724>
   1c48c:	strb	r0, [fp, #-10]
   1c490:	ldrb	r0, [fp, #-10]
   1c494:	ldrb	r1, [fp, #-9]
   1c498:	cmp	r0, r1
   1c49c:	bge	1c4ac <test_scan@@Base+0x1bbc>
   1c4a0:	mvn	r0, #0
   1c4a4:	str	r0, [sp, #4]
   1c4a8:	b	1c4c8 <test_scan@@Base+0x1bd8>
   1c4ac:	ldrb	r0, [fp, #-10]
   1c4b0:	ldrb	r1, [fp, #-9]
   1c4b4:	cmp	r0, r1
   1c4b8:	movw	r0, #0
   1c4bc:	movgt	r0, #1
   1c4c0:	and	r0, r0, #1
   1c4c4:	str	r0, [sp, #4]
   1c4c8:	ldr	r0, [sp, #4]
   1c4cc:	cmp	r0, #0
   1c4d0:	bne	1c4e0 <test_scan@@Base+0x1bf0>
   1c4d4:	ldr	r0, [sp, #8]
   1c4d8:	str	r0, [fp, #-4]
   1c4dc:	b	1c4f4 <test_scan@@Base+0x1c04>
   1c4e0:	b	1c468 <test_scan@@Base+0x1b78>
   1c4e4:	ldr	r0, [pc, #20]	; 1c500 <test_scan@@Base+0x1c10>
   1c4e8:	add	r0, pc, r0
   1c4ec:	ldr	r0, [r0]
   1c4f0:	str	r0, [fp, #-4]
   1c4f4:	ldr	r0, [fp, #-4]
   1c4f8:	mov	sp, fp
   1c4fc:	pop	{fp, pc}
   1c500:	andeq	fp, r2, r4, lsl #23
   1c504:	push	{fp, lr}
   1c508:	mov	fp, sp
   1c50c:	sub	sp, sp, #40	; 0x28
   1c510:	str	r0, [fp, #-8]
   1c514:	str	r1, [fp, #-12]
   1c518:	str	r2, [fp, #-16]
   1c51c:	strb	r3, [fp, #-17]	; 0xffffffef
   1c520:	ldr	r0, [fp, #-16]
   1c524:	ldr	r1, [fp, #-8]
   1c528:	str	r0, [sp, #12]
   1c52c:	mov	r0, r1
   1c530:	bl	170d0 <verify_monster@@Base+0x1704>
   1c534:	ldr	r1, [sp, #12]
   1c538:	cmp	r1, r0
   1c53c:	bcs	1c54c <test_scan@@Base+0x1c5c>
   1c540:	ldr	r0, [fp, #-16]
   1c544:	str	r0, [sp, #8]
   1c548:	b	1c558 <test_scan@@Base+0x1c68>
   1c54c:	ldr	r0, [fp, #-8]
   1c550:	bl	170d0 <verify_monster@@Base+0x1704>
   1c554:	str	r0, [sp, #8]
   1c558:	ldr	r0, [sp, #8]
   1c55c:	str	r0, [sp, #16]
   1c560:	ldr	r0, [sp, #16]
   1c564:	mvn	r1, #0
   1c568:	add	r1, r0, r1
   1c56c:	str	r1, [sp, #16]
   1c570:	ldr	r1, [fp, #-12]
   1c574:	cmp	r0, r1
   1c578:	bls	1c5e0 <test_scan@@Base+0x1cf0>
   1c57c:	ldr	r0, [fp, #-8]
   1c580:	ldr	r1, [sp, #16]
   1c584:	bl	170f0 <verify_monster@@Base+0x1724>
   1c588:	strb	r0, [fp, #-18]	; 0xffffffee
   1c58c:	ldrb	r0, [fp, #-18]	; 0xffffffee
   1c590:	ldrb	r1, [fp, #-17]	; 0xffffffef
   1c594:	cmp	r0, r1
   1c598:	bge	1c5a8 <test_scan@@Base+0x1cb8>
   1c59c:	mvn	r0, #0
   1c5a0:	str	r0, [sp, #4]
   1c5a4:	b	1c5c4 <test_scan@@Base+0x1cd4>
   1c5a8:	ldrb	r0, [fp, #-18]	; 0xffffffee
   1c5ac:	ldrb	r1, [fp, #-17]	; 0xffffffef
   1c5b0:	cmp	r0, r1
   1c5b4:	movw	r0, #0
   1c5b8:	movgt	r0, #1
   1c5bc:	and	r0, r0, #1
   1c5c0:	str	r0, [sp, #4]
   1c5c4:	ldr	r0, [sp, #4]
   1c5c8:	cmp	r0, #0
   1c5cc:	bne	1c5dc <test_scan@@Base+0x1cec>
   1c5d0:	ldr	r0, [sp, #16]
   1c5d4:	str	r0, [fp, #-4]
   1c5d8:	b	1c5f0 <test_scan@@Base+0x1d00>
   1c5dc:	b	1c560 <test_scan@@Base+0x1c70>
   1c5e0:	ldr	r0, [pc, #20]	; 1c5fc <test_scan@@Base+0x1d0c>
   1c5e4:	add	r0, pc, r0
   1c5e8:	ldr	r0, [r0]
   1c5ec:	str	r0, [fp, #-4]
   1c5f0:	ldr	r0, [fp, #-4]
   1c5f4:	mov	sp, fp
   1c5f8:	pop	{fp, pc}
   1c5fc:	andeq	fp, r2, r8, lsl #21
   1c600:	push	{fp, lr}
   1c604:	mov	fp, sp
   1c608:	sub	sp, sp, #24
   1c60c:	str	r0, [fp, #-8]
   1c610:	str	r1, [sp, #12]
   1c614:	movw	r0, #0
   1c618:	str	r0, [sp, #4]
   1c61c:	ldr	r0, [sp, #4]
   1c620:	ldr	r1, [fp, #-8]
   1c624:	str	r0, [sp]
   1c628:	mov	r0, r1
   1c62c:	bl	17884 <verify_monster@@Base+0x1eb8>
   1c630:	ldr	r1, [sp]
   1c634:	cmp	r1, r0
   1c638:	bcs	1c684 <test_scan@@Base+0x1d94>
   1c63c:	ldr	r0, [fp, #-8]
   1c640:	ldr	r1, [sp, #4]
   1c644:	bl	178d4 <verify_monster@@Base+0x1f08>
   1c648:	str	r0, [sp, #8]
   1c64c:	ldr	r0, [sp, #8]
   1c650:	ldr	r1, [sp, #12]
   1c654:	movw	r2, #0
   1c658:	bl	265b8 <main@@Base+0x3600>
   1c65c:	cmp	r0, #0
   1c660:	bne	1c670 <test_scan@@Base+0x1d80>
   1c664:	ldr	r0, [sp, #4]
   1c668:	str	r0, [fp, #-4]
   1c66c:	b	1c694 <test_scan@@Base+0x1da4>
   1c670:	b	1c674 <test_scan@@Base+0x1d84>
   1c674:	ldr	r0, [sp, #4]
   1c678:	add	r0, r0, #1
   1c67c:	str	r0, [sp, #4]
   1c680:	b	1c61c <test_scan@@Base+0x1d2c>
   1c684:	ldr	r0, [pc, #20]	; 1c6a0 <test_scan@@Base+0x1db0>
   1c688:	add	r0, pc, r0
   1c68c:	ldr	r0, [r0]
   1c690:	str	r0, [fp, #-4]
   1c694:	ldr	r0, [fp, #-4]
   1c698:	mov	sp, fp
   1c69c:	pop	{fp, pc}
   1c6a0:	andeq	fp, r2, r4, ror #19
   1c6a4:	push	{fp, lr}
   1c6a8:	mov	fp, sp
   1c6ac:	sub	sp, sp, #40	; 0x28
   1c6b0:	str	r0, [fp, #-8]
   1c6b4:	str	r1, [fp, #-12]
   1c6b8:	str	r2, [fp, #-16]
   1c6bc:	str	r3, [sp, #20]
   1c6c0:	ldr	r0, [fp, #-12]
   1c6c4:	str	r0, [sp, #12]
   1c6c8:	ldr	r0, [sp, #12]
   1c6cc:	ldr	r1, [fp, #-16]
   1c6d0:	ldr	r2, [fp, #-8]
   1c6d4:	str	r0, [sp, #8]
   1c6d8:	mov	r0, r2
   1c6dc:	str	r1, [sp, #4]
   1c6e0:	bl	17884 <verify_monster@@Base+0x1eb8>
   1c6e4:	ldr	r1, [sp, #4]
   1c6e8:	cmp	r1, r0
   1c6ec:	bcs	1c6fc <test_scan@@Base+0x1e0c>
   1c6f0:	ldr	r0, [fp, #-16]
   1c6f4:	str	r0, [sp]
   1c6f8:	b	1c708 <test_scan@@Base+0x1e18>
   1c6fc:	ldr	r0, [fp, #-8]
   1c700:	bl	17884 <verify_monster@@Base+0x1eb8>
   1c704:	str	r0, [sp]
   1c708:	ldr	r0, [sp]
   1c70c:	ldr	r1, [sp, #8]
   1c710:	cmp	r1, r0
   1c714:	bcs	1c760 <test_scan@@Base+0x1e70>
   1c718:	ldr	r0, [fp, #-8]
   1c71c:	ldr	r1, [sp, #12]
   1c720:	bl	178d4 <verify_monster@@Base+0x1f08>
   1c724:	str	r0, [sp, #16]
   1c728:	ldr	r0, [sp, #16]
   1c72c:	ldr	r1, [sp, #20]
   1c730:	movw	r2, #0
   1c734:	bl	265b8 <main@@Base+0x3600>
   1c738:	cmp	r0, #0
   1c73c:	bne	1c74c <test_scan@@Base+0x1e5c>
   1c740:	ldr	r0, [sp, #12]
   1c744:	str	r0, [fp, #-4]
   1c748:	b	1c770 <test_scan@@Base+0x1e80>
   1c74c:	b	1c750 <test_scan@@Base+0x1e60>
   1c750:	ldr	r0, [sp, #12]
   1c754:	add	r0, r0, #1
   1c758:	str	r0, [sp, #12]
   1c75c:	b	1c6c8 <test_scan@@Base+0x1dd8>
   1c760:	ldr	r0, [pc, #20]	; 1c77c <test_scan@@Base+0x1e8c>
   1c764:	add	r0, pc, r0
   1c768:	ldr	r0, [r0]
   1c76c:	str	r0, [fp, #-4]
   1c770:	ldr	r0, [fp, #-4]
   1c774:	mov	sp, fp
   1c778:	pop	{fp, pc}
   1c77c:	andeq	fp, r2, r8, lsl #18
   1c780:	push	{fp, lr}
   1c784:	mov	fp, sp
   1c788:	sub	sp, sp, #32
   1c78c:	str	r0, [fp, #-8]
   1c790:	str	r1, [fp, #-12]
   1c794:	str	r2, [sp, #16]
   1c798:	movw	r0, #0
   1c79c:	str	r0, [sp, #8]
   1c7a0:	ldr	r0, [sp, #8]
   1c7a4:	ldr	r1, [fp, #-8]
   1c7a8:	str	r0, [sp, #4]
   1c7ac:	mov	r0, r1
   1c7b0:	bl	17884 <verify_monster@@Base+0x1eb8>
   1c7b4:	ldr	r1, [sp, #4]
   1c7b8:	cmp	r1, r0
   1c7bc:	bcs	1c808 <test_scan@@Base+0x1f18>
   1c7c0:	ldr	r0, [fp, #-8]
   1c7c4:	ldr	r1, [sp, #8]
   1c7c8:	bl	178d4 <verify_monster@@Base+0x1f08>
   1c7cc:	str	r0, [sp, #12]
   1c7d0:	ldr	r0, [sp, #12]
   1c7d4:	ldr	r1, [fp, #-12]
   1c7d8:	ldr	r2, [sp, #16]
   1c7dc:	bl	264c8 <main@@Base+0x3510>
   1c7e0:	cmp	r0, #0
   1c7e4:	bne	1c7f4 <test_scan@@Base+0x1f04>
   1c7e8:	ldr	r0, [sp, #8]
   1c7ec:	str	r0, [fp, #-4]
   1c7f0:	b	1c818 <test_scan@@Base+0x1f28>
   1c7f4:	b	1c7f8 <test_scan@@Base+0x1f08>
   1c7f8:	ldr	r0, [sp, #8]
   1c7fc:	add	r0, r0, #1
   1c800:	str	r0, [sp, #8]
   1c804:	b	1c7a0 <test_scan@@Base+0x1eb0>
   1c808:	ldr	r0, [pc, #20]	; 1c824 <test_scan@@Base+0x1f34>
   1c80c:	add	r0, pc, r0
   1c810:	ldr	r0, [r0]
   1c814:	str	r0, [fp, #-4]
   1c818:	ldr	r0, [fp, #-4]
   1c81c:	mov	sp, fp
   1c820:	pop	{fp, pc}
   1c824:	andeq	fp, r2, r0, ror #16
   1c828:	push	{fp, lr}
   1c82c:	mov	fp, sp
   1c830:	sub	sp, sp, #40	; 0x28
   1c834:	ldr	ip, [fp, #8]
   1c838:	str	r0, [fp, #-8]
   1c83c:	str	r1, [fp, #-12]
   1c840:	str	r2, [fp, #-16]
   1c844:	str	r3, [sp, #20]
   1c848:	ldr	r0, [fp, #-12]
   1c84c:	str	r0, [sp, #12]
   1c850:	ldr	r0, [sp, #12]
   1c854:	ldr	r1, [fp, #-16]
   1c858:	ldr	r2, [fp, #-8]
   1c85c:	str	r0, [sp, #8]
   1c860:	mov	r0, r2
   1c864:	str	r1, [sp, #4]
   1c868:	bl	17884 <verify_monster@@Base+0x1eb8>
   1c86c:	ldr	r1, [sp, #4]
   1c870:	cmp	r1, r0
   1c874:	bcs	1c884 <test_scan@@Base+0x1f94>
   1c878:	ldr	r0, [fp, #-16]
   1c87c:	str	r0, [sp]
   1c880:	b	1c890 <test_scan@@Base+0x1fa0>
   1c884:	ldr	r0, [fp, #-8]
   1c888:	bl	17884 <verify_monster@@Base+0x1eb8>
   1c88c:	str	r0, [sp]
   1c890:	ldr	r0, [sp]
   1c894:	ldr	r1, [sp, #8]
   1c898:	cmp	r1, r0
   1c89c:	bcs	1c8e8 <test_scan@@Base+0x1ff8>
   1c8a0:	ldr	r0, [fp, #-8]
   1c8a4:	ldr	r1, [sp, #12]
   1c8a8:	bl	178d4 <verify_monster@@Base+0x1f08>
   1c8ac:	str	r0, [sp, #16]
   1c8b0:	ldr	r0, [sp, #16]
   1c8b4:	ldr	r1, [sp, #20]
   1c8b8:	ldr	r2, [fp, #8]
   1c8bc:	bl	264c8 <main@@Base+0x3510>
   1c8c0:	cmp	r0, #0
   1c8c4:	bne	1c8d4 <test_scan@@Base+0x1fe4>
   1c8c8:	ldr	r0, [sp, #12]
   1c8cc:	str	r0, [fp, #-4]
   1c8d0:	b	1c8f8 <test_scan@@Base+0x2008>
   1c8d4:	b	1c8d8 <test_scan@@Base+0x1fe8>
   1c8d8:	ldr	r0, [sp, #12]
   1c8dc:	add	r0, r0, #1
   1c8e0:	str	r0, [sp, #12]
   1c8e4:	b	1c850 <test_scan@@Base+0x1f60>
   1c8e8:	ldr	r0, [pc, #20]	; 1c904 <test_scan@@Base+0x2014>
   1c8ec:	add	r0, pc, r0
   1c8f0:	ldr	r0, [r0]
   1c8f4:	str	r0, [fp, #-4]
   1c8f8:	ldr	r0, [fp, #-4]
   1c8fc:	mov	sp, fp
   1c900:	pop	{fp, pc}
   1c904:	andeq	fp, r2, r0, lsl #15
   1c908:	push	{fp, lr}
   1c90c:	mov	fp, sp
   1c910:	sub	sp, sp, #24
   1c914:	str	r0, [fp, #-8]
   1c918:	str	r1, [sp, #12]
   1c91c:	ldr	r0, [fp, #-8]
   1c920:	bl	17884 <verify_monster@@Base+0x1eb8>
   1c924:	str	r0, [sp, #4]
   1c928:	ldr	r0, [sp, #4]
   1c92c:	mvn	r1, #0
   1c930:	add	r1, r0, r1
   1c934:	str	r1, [sp, #4]
   1c938:	cmp	r0, #0
   1c93c:	bls	1c978 <test_scan@@Base+0x2088>
   1c940:	ldr	r0, [fp, #-8]
   1c944:	ldr	r1, [sp, #4]
   1c948:	bl	178d4 <verify_monster@@Base+0x1f08>
   1c94c:	str	r0, [sp, #8]
   1c950:	ldr	r0, [sp, #8]
   1c954:	ldr	r1, [sp, #12]
   1c958:	movw	r2, #0
   1c95c:	bl	265b8 <main@@Base+0x3600>
   1c960:	cmp	r0, #0
   1c964:	bne	1c974 <test_scan@@Base+0x2084>
   1c968:	ldr	r0, [sp, #4]
   1c96c:	str	r0, [fp, #-4]
   1c970:	b	1c988 <test_scan@@Base+0x2098>
   1c974:	b	1c928 <test_scan@@Base+0x2038>
   1c978:	ldr	r0, [pc, #20]	; 1c994 <test_scan@@Base+0x20a4>
   1c97c:	add	r0, pc, r0
   1c980:	ldr	r0, [r0]
   1c984:	str	r0, [fp, #-4]
   1c988:	ldr	r0, [fp, #-4]
   1c98c:	mov	sp, fp
   1c990:	pop	{fp, pc}
   1c994:	strdeq	fp, [r2], -r0
   1c998:	push	{fp, lr}
   1c99c:	mov	fp, sp
   1c9a0:	sub	sp, sp, #40	; 0x28
   1c9a4:	str	r0, [fp, #-8]
   1c9a8:	str	r1, [fp, #-12]
   1c9ac:	str	r2, [fp, #-16]
   1c9b0:	str	r3, [sp, #20]
   1c9b4:	ldr	r0, [fp, #-16]
   1c9b8:	ldr	r1, [fp, #-8]
   1c9bc:	str	r0, [sp, #8]
   1c9c0:	mov	r0, r1
   1c9c4:	bl	17884 <verify_monster@@Base+0x1eb8>
   1c9c8:	ldr	r1, [sp, #8]
   1c9cc:	cmp	r1, r0
   1c9d0:	bcs	1c9e0 <test_scan@@Base+0x20f0>
   1c9d4:	ldr	r0, [fp, #-16]
   1c9d8:	str	r0, [sp, #4]
   1c9dc:	b	1c9ec <test_scan@@Base+0x20fc>
   1c9e0:	ldr	r0, [fp, #-8]
   1c9e4:	bl	17884 <verify_monster@@Base+0x1eb8>
   1c9e8:	str	r0, [sp, #4]
   1c9ec:	ldr	r0, [sp, #4]
   1c9f0:	str	r0, [sp, #12]
   1c9f4:	ldr	r0, [sp, #12]
   1c9f8:	mvn	r1, #0
   1c9fc:	add	r1, r0, r1
   1ca00:	str	r1, [sp, #12]
   1ca04:	ldr	r1, [fp, #-12]
   1ca08:	cmp	r0, r1
   1ca0c:	bls	1ca48 <test_scan@@Base+0x2158>
   1ca10:	ldr	r0, [fp, #-8]
   1ca14:	ldr	r1, [sp, #12]
   1ca18:	bl	178d4 <verify_monster@@Base+0x1f08>
   1ca1c:	str	r0, [sp, #16]
   1ca20:	ldr	r0, [sp, #16]
   1ca24:	ldr	r1, [sp, #20]
   1ca28:	movw	r2, #0
   1ca2c:	bl	265b8 <main@@Base+0x3600>
   1ca30:	cmp	r0, #0
   1ca34:	bne	1ca44 <test_scan@@Base+0x2154>
   1ca38:	ldr	r0, [sp, #12]
   1ca3c:	str	r0, [fp, #-4]
   1ca40:	b	1ca58 <test_scan@@Base+0x2168>
   1ca44:	b	1c9f4 <test_scan@@Base+0x2104>
   1ca48:	ldr	r0, [pc, #20]	; 1ca64 <test_scan@@Base+0x2174>
   1ca4c:	add	r0, pc, r0
   1ca50:	ldr	r0, [r0]
   1ca54:	str	r0, [fp, #-4]
   1ca58:	ldr	r0, [fp, #-4]
   1ca5c:	mov	sp, fp
   1ca60:	pop	{fp, pc}
   1ca64:	andeq	fp, r2, r0, lsr #12
   1ca68:	push	{fp, lr}
   1ca6c:	mov	fp, sp
   1ca70:	sub	sp, sp, #24
   1ca74:	str	r0, [fp, #-8]
   1ca78:	str	r1, [sp, #12]
   1ca7c:	str	r2, [sp, #8]
   1ca80:	ldr	r0, [fp, #-8]
   1ca84:	bl	17884 <verify_monster@@Base+0x1eb8>
   1ca88:	str	r0, [sp]
   1ca8c:	ldr	r0, [sp]
   1ca90:	mvn	r1, #0
   1ca94:	add	r1, r0, r1
   1ca98:	str	r1, [sp]
   1ca9c:	cmp	r0, #0
   1caa0:	bls	1cadc <test_scan@@Base+0x21ec>
   1caa4:	ldr	r0, [fp, #-8]
   1caa8:	ldr	r1, [sp]
   1caac:	bl	178d4 <verify_monster@@Base+0x1f08>
   1cab0:	str	r0, [sp, #4]
   1cab4:	ldr	r0, [sp, #4]
   1cab8:	ldr	r1, [sp, #12]
   1cabc:	ldr	r2, [sp, #8]
   1cac0:	bl	264c8 <main@@Base+0x3510>
   1cac4:	cmp	r0, #0
   1cac8:	bne	1cad8 <test_scan@@Base+0x21e8>
   1cacc:	ldr	r0, [sp]
   1cad0:	str	r0, [fp, #-4]
   1cad4:	b	1caec <test_scan@@Base+0x21fc>
   1cad8:	b	1ca8c <test_scan@@Base+0x219c>
   1cadc:	ldr	r0, [pc, #20]	; 1caf8 <test_scan@@Base+0x2208>
   1cae0:	add	r0, pc, r0
   1cae4:	ldr	r0, [r0]
   1cae8:	str	r0, [fp, #-4]
   1caec:	ldr	r0, [fp, #-4]
   1caf0:	mov	sp, fp
   1caf4:	pop	{fp, pc}
   1caf8:	andeq	fp, r2, ip, lsl #11
   1cafc:	push	{fp, lr}
   1cb00:	mov	fp, sp
   1cb04:	sub	sp, sp, #40	; 0x28
   1cb08:	ldr	ip, [fp, #8]
   1cb0c:	str	r0, [fp, #-8]
   1cb10:	str	r1, [fp, #-12]
   1cb14:	str	r2, [fp, #-16]
   1cb18:	str	r3, [sp, #20]
   1cb1c:	ldr	r0, [fp, #-16]
   1cb20:	ldr	r1, [fp, #-8]
   1cb24:	str	r0, [sp, #8]
   1cb28:	mov	r0, r1
   1cb2c:	str	ip, [sp, #4]
   1cb30:	bl	17884 <verify_monster@@Base+0x1eb8>
   1cb34:	ldr	r1, [sp, #8]
   1cb38:	cmp	r1, r0
   1cb3c:	bcs	1cb4c <test_scan@@Base+0x225c>
   1cb40:	ldr	r0, [fp, #-16]
   1cb44:	str	r0, [sp]
   1cb48:	b	1cb58 <test_scan@@Base+0x2268>
   1cb4c:	ldr	r0, [fp, #-8]
   1cb50:	bl	17884 <verify_monster@@Base+0x1eb8>
   1cb54:	str	r0, [sp]
   1cb58:	ldr	r0, [sp]
   1cb5c:	str	r0, [sp, #12]
   1cb60:	ldr	r0, [sp, #12]
   1cb64:	mvn	r1, #0
   1cb68:	add	r1, r0, r1
   1cb6c:	str	r1, [sp, #12]
   1cb70:	ldr	r1, [fp, #-12]
   1cb74:	cmp	r0, r1
   1cb78:	bls	1cbb4 <test_scan@@Base+0x22c4>
   1cb7c:	ldr	r0, [fp, #-8]
   1cb80:	ldr	r1, [sp, #12]
   1cb84:	bl	178d4 <verify_monster@@Base+0x1f08>
   1cb88:	str	r0, [sp, #16]
   1cb8c:	ldr	r0, [sp, #16]
   1cb90:	ldr	r1, [sp, #20]
   1cb94:	ldr	r2, [fp, #8]
   1cb98:	bl	264c8 <main@@Base+0x3510>
   1cb9c:	cmp	r0, #0
   1cba0:	bne	1cbb0 <test_scan@@Base+0x22c0>
   1cba4:	ldr	r0, [sp, #12]
   1cba8:	str	r0, [fp, #-4]
   1cbac:	b	1cbc4 <test_scan@@Base+0x22d4>
   1cbb0:	b	1cb60 <test_scan@@Base+0x2270>
   1cbb4:	ldr	r0, [pc, #20]	; 1cbd0 <test_scan@@Base+0x22e0>
   1cbb8:	add	r0, pc, r0
   1cbbc:	ldr	r0, [r0]
   1cbc0:	str	r0, [fp, #-4]
   1cbc4:	ldr	r0, [fp, #-4]
   1cbc8:	mov	sp, fp
   1cbcc:	pop	{fp, pc}
   1cbd0:			; <UNDEFINED> instruction: 0x0002b4b4
   1cbd4:	push	{fp, lr}
   1cbd8:	mov	fp, sp
   1cbdc:	sub	sp, sp, #24
   1cbe0:	str	r0, [fp, #-8]
   1cbe4:	strh	r1, [fp, #-10]
   1cbe8:	movw	r0, #0
   1cbec:	str	r0, [sp, #8]
   1cbf0:	ldr	r0, [sp, #8]
   1cbf4:	ldr	r1, [fp, #-8]
   1cbf8:	str	r0, [sp, #4]
   1cbfc:	mov	r0, r1
   1cc00:	bl	1769c <verify_monster@@Base+0x1cd0>
   1cc04:	ldr	r1, [sp, #4]
   1cc08:	cmp	r1, r0
   1cc0c:	bcs	1cc88 <test_scan@@Base+0x2398>
   1cc10:	ldr	r0, [fp, #-8]
   1cc14:	ldr	r1, [sp, #8]
   1cc18:	bl	176ec <verify_monster@@Base+0x1d20>
   1cc1c:	bl	13270 <verify_empty_monster@@Base+0x308>
   1cc20:	strh	r0, [sp, #12]
   1cc24:	ldrsh	r0, [sp, #12]
   1cc28:	ldrsh	r1, [fp, #-10]
   1cc2c:	cmp	r0, r1
   1cc30:	bge	1cc40 <test_scan@@Base+0x2350>
   1cc34:	mvn	r0, #0
   1cc38:	str	r0, [sp]
   1cc3c:	b	1cc5c <test_scan@@Base+0x236c>
   1cc40:	ldrsh	r0, [sp, #12]
   1cc44:	ldrsh	r1, [fp, #-10]
   1cc48:	cmp	r0, r1
   1cc4c:	movw	r0, #0
   1cc50:	movgt	r0, #1
   1cc54:	and	r0, r0, #1
   1cc58:	str	r0, [sp]
   1cc5c:	ldr	r0, [sp]
   1cc60:	cmp	r0, #0
   1cc64:	bne	1cc74 <test_scan@@Base+0x2384>
   1cc68:	ldr	r0, [sp, #8]
   1cc6c:	str	r0, [fp, #-4]
   1cc70:	b	1cc98 <test_scan@@Base+0x23a8>
   1cc74:	b	1cc78 <test_scan@@Base+0x2388>
   1cc78:	ldr	r0, [sp, #8]
   1cc7c:	add	r0, r0, #1
   1cc80:	str	r0, [sp, #8]
   1cc84:	b	1cbf0 <test_scan@@Base+0x2300>
   1cc88:	ldr	r0, [pc, #20]	; 1cca4 <test_scan@@Base+0x23b4>
   1cc8c:	add	r0, pc, r0
   1cc90:	ldr	r0, [r0]
   1cc94:	str	r0, [fp, #-4]
   1cc98:	ldr	r0, [fp, #-4]
   1cc9c:	mov	sp, fp
   1cca0:	pop	{fp, pc}
   1cca4:	andeq	fp, r2, r0, ror #7
   1cca8:	push	{fp, lr}
   1ccac:	mov	fp, sp
   1ccb0:	sub	sp, sp, #40	; 0x28
   1ccb4:	str	r0, [fp, #-8]
   1ccb8:	str	r1, [fp, #-12]
   1ccbc:	str	r2, [fp, #-16]
   1ccc0:	strh	r3, [fp, #-18]	; 0xffffffee
   1ccc4:	ldr	r0, [fp, #-12]
   1ccc8:	str	r0, [sp, #16]
   1cccc:	ldr	r0, [sp, #16]
   1ccd0:	ldr	r1, [fp, #-16]
   1ccd4:	ldr	r2, [fp, #-8]
   1ccd8:	str	r0, [sp, #12]
   1ccdc:	mov	r0, r2
   1cce0:	str	r1, [sp, #8]
   1cce4:	bl	1769c <verify_monster@@Base+0x1cd0>
   1cce8:	ldr	r1, [sp, #8]
   1ccec:	cmp	r1, r0
   1ccf0:	bcs	1cd00 <test_scan@@Base+0x2410>
   1ccf4:	ldr	r0, [fp, #-16]
   1ccf8:	str	r0, [sp, #4]
   1ccfc:	b	1cd0c <test_scan@@Base+0x241c>
   1cd00:	ldr	r0, [fp, #-8]
   1cd04:	bl	1769c <verify_monster@@Base+0x1cd0>
   1cd08:	str	r0, [sp, #4]
   1cd0c:	ldr	r0, [sp, #4]
   1cd10:	ldr	r1, [sp, #12]
   1cd14:	cmp	r1, r0
   1cd18:	bcs	1cd94 <test_scan@@Base+0x24a4>
   1cd1c:	ldr	r0, [fp, #-8]
   1cd20:	ldr	r1, [sp, #16]
   1cd24:	bl	176ec <verify_monster@@Base+0x1d20>
   1cd28:	bl	13270 <verify_empty_monster@@Base+0x308>
   1cd2c:	strh	r0, [sp, #20]
   1cd30:	ldrsh	r0, [sp, #20]
   1cd34:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   1cd38:	cmp	r0, r1
   1cd3c:	bge	1cd4c <test_scan@@Base+0x245c>
   1cd40:	mvn	r0, #0
   1cd44:	str	r0, [sp]
   1cd48:	b	1cd68 <test_scan@@Base+0x2478>
   1cd4c:	ldrsh	r0, [sp, #20]
   1cd50:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   1cd54:	cmp	r0, r1
   1cd58:	movw	r0, #0
   1cd5c:	movgt	r0, #1
   1cd60:	and	r0, r0, #1
   1cd64:	str	r0, [sp]
   1cd68:	ldr	r0, [sp]
   1cd6c:	cmp	r0, #0
   1cd70:	bne	1cd80 <test_scan@@Base+0x2490>
   1cd74:	ldr	r0, [sp, #16]
   1cd78:	str	r0, [fp, #-4]
   1cd7c:	b	1cda4 <test_scan@@Base+0x24b4>
   1cd80:	b	1cd84 <test_scan@@Base+0x2494>
   1cd84:	ldr	r0, [sp, #16]
   1cd88:	add	r0, r0, #1
   1cd8c:	str	r0, [sp, #16]
   1cd90:	b	1cccc <test_scan@@Base+0x23dc>
   1cd94:	ldr	r0, [pc, #20]	; 1cdb0 <test_scan@@Base+0x24c0>
   1cd98:	add	r0, pc, r0
   1cd9c:	ldr	r0, [r0]
   1cda0:	str	r0, [fp, #-4]
   1cda4:	ldr	r0, [fp, #-4]
   1cda8:	mov	sp, fp
   1cdac:	pop	{fp, pc}
   1cdb0:	ldrdeq	fp, [r2], -r4
   1cdb4:	push	{fp, lr}
   1cdb8:	mov	fp, sp
   1cdbc:	sub	sp, sp, #24
   1cdc0:	str	r0, [fp, #-8]
   1cdc4:	strh	r1, [fp, #-10]
   1cdc8:	ldr	r0, [fp, #-8]
   1cdcc:	bl	1769c <verify_monster@@Base+0x1cd0>
   1cdd0:	str	r0, [sp, #8]
   1cdd4:	ldr	r0, [sp, #8]
   1cdd8:	mvn	r1, #0
   1cddc:	add	r1, r0, r1
   1cde0:	str	r1, [sp, #8]
   1cde4:	cmp	r0, #0
   1cde8:	bls	1ce54 <test_scan@@Base+0x2564>
   1cdec:	ldr	r0, [fp, #-8]
   1cdf0:	ldr	r1, [sp, #8]
   1cdf4:	bl	176ec <verify_monster@@Base+0x1d20>
   1cdf8:	bl	13270 <verify_empty_monster@@Base+0x308>
   1cdfc:	strh	r0, [sp, #12]
   1ce00:	ldrsh	r0, [sp, #12]
   1ce04:	ldrsh	r1, [fp, #-10]
   1ce08:	cmp	r0, r1
   1ce0c:	bge	1ce1c <test_scan@@Base+0x252c>
   1ce10:	mvn	r0, #0
   1ce14:	str	r0, [sp, #4]
   1ce18:	b	1ce38 <test_scan@@Base+0x2548>
   1ce1c:	ldrsh	r0, [sp, #12]
   1ce20:	ldrsh	r1, [fp, #-10]
   1ce24:	cmp	r0, r1
   1ce28:	movw	r0, #0
   1ce2c:	movgt	r0, #1
   1ce30:	and	r0, r0, #1
   1ce34:	str	r0, [sp, #4]
   1ce38:	ldr	r0, [sp, #4]
   1ce3c:	cmp	r0, #0
   1ce40:	bne	1ce50 <test_scan@@Base+0x2560>
   1ce44:	ldr	r0, [sp, #8]
   1ce48:	str	r0, [fp, #-4]
   1ce4c:	b	1ce64 <test_scan@@Base+0x2574>
   1ce50:	b	1cdd4 <test_scan@@Base+0x24e4>
   1ce54:	ldr	r0, [pc, #20]	; 1ce70 <test_scan@@Base+0x2580>
   1ce58:	add	r0, pc, r0
   1ce5c:	ldr	r0, [r0]
   1ce60:	str	r0, [fp, #-4]
   1ce64:	ldr	r0, [fp, #-4]
   1ce68:	mov	sp, fp
   1ce6c:	pop	{fp, pc}
   1ce70:	andeq	fp, r2, r4, lsl r2
   1ce74:	push	{fp, lr}
   1ce78:	mov	fp, sp
   1ce7c:	sub	sp, sp, #40	; 0x28
   1ce80:	str	r0, [fp, #-8]
   1ce84:	str	r1, [fp, #-12]
   1ce88:	str	r2, [fp, #-16]
   1ce8c:	strh	r3, [fp, #-18]	; 0xffffffee
   1ce90:	ldr	r0, [fp, #-16]
   1ce94:	ldr	r1, [fp, #-8]
   1ce98:	str	r0, [sp, #12]
   1ce9c:	mov	r0, r1
   1cea0:	bl	1769c <verify_monster@@Base+0x1cd0>
   1cea4:	ldr	r1, [sp, #12]
   1cea8:	cmp	r1, r0
   1ceac:	bcs	1cebc <test_scan@@Base+0x25cc>
   1ceb0:	ldr	r0, [fp, #-16]
   1ceb4:	str	r0, [sp, #8]
   1ceb8:	b	1cec8 <test_scan@@Base+0x25d8>
   1cebc:	ldr	r0, [fp, #-8]
   1cec0:	bl	1769c <verify_monster@@Base+0x1cd0>
   1cec4:	str	r0, [sp, #8]
   1cec8:	ldr	r0, [sp, #8]
   1cecc:	str	r0, [sp, #16]
   1ced0:	ldr	r0, [sp, #16]
   1ced4:	mvn	r1, #0
   1ced8:	add	r1, r0, r1
   1cedc:	str	r1, [sp, #16]
   1cee0:	ldr	r1, [fp, #-12]
   1cee4:	cmp	r0, r1
   1cee8:	bls	1cf54 <test_scan@@Base+0x2664>
   1ceec:	ldr	r0, [fp, #-8]
   1cef0:	ldr	r1, [sp, #16]
   1cef4:	bl	176ec <verify_monster@@Base+0x1d20>
   1cef8:	bl	13270 <verify_empty_monster@@Base+0x308>
   1cefc:	strh	r0, [sp, #20]
   1cf00:	ldrsh	r0, [sp, #20]
   1cf04:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   1cf08:	cmp	r0, r1
   1cf0c:	bge	1cf1c <test_scan@@Base+0x262c>
   1cf10:	mvn	r0, #0
   1cf14:	str	r0, [sp, #4]
   1cf18:	b	1cf38 <test_scan@@Base+0x2648>
   1cf1c:	ldrsh	r0, [sp, #20]
   1cf20:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   1cf24:	cmp	r0, r1
   1cf28:	movw	r0, #0
   1cf2c:	movgt	r0, #1
   1cf30:	and	r0, r0, #1
   1cf34:	str	r0, [sp, #4]
   1cf38:	ldr	r0, [sp, #4]
   1cf3c:	cmp	r0, #0
   1cf40:	bne	1cf50 <test_scan@@Base+0x2660>
   1cf44:	ldr	r0, [sp, #16]
   1cf48:	str	r0, [fp, #-4]
   1cf4c:	b	1cf64 <test_scan@@Base+0x2674>
   1cf50:	b	1ced0 <test_scan@@Base+0x25e0>
   1cf54:	ldr	r0, [pc, #20]	; 1cf70 <test_scan@@Base+0x2680>
   1cf58:	add	r0, pc, r0
   1cf5c:	ldr	r0, [r0]
   1cf60:	str	r0, [fp, #-4]
   1cf64:	ldr	r0, [fp, #-4]
   1cf68:	mov	sp, fp
   1cf6c:	pop	{fp, pc}
   1cf70:	andeq	fp, r2, r4, lsl r1

0001cf74 <test_basic_sort@@Base>:
   1cf74:	push	{fp, lr}
   1cf78:	mov	fp, sp
   1cf7c:	sub	sp, sp, #80	; 0x50
   1cf80:	ldr	r1, [pc, #572]	; 1d1c4 <test_basic_sort@@Base+0x250>
   1cf84:	add	r1, pc, r1
   1cf88:	ldr	r2, [pc, #568]	; 1d1c8 <test_basic_sort@@Base+0x254>
   1cf8c:	add	r2, pc, r2
   1cf90:	str	r0, [fp, #-8]
   1cf94:	ldrb	r0, [r2]
   1cf98:	strb	r0, [fp, #-35]	; 0xffffffdd
   1cf9c:	ldrb	r0, [r2, #1]
   1cfa0:	strb	r0, [fp, #-34]	; 0xffffffde
   1cfa4:	ldrb	r0, [r2, #2]
   1cfa8:	strb	r0, [fp, #-33]	; 0xffffffdf
   1cfac:	ldrb	r0, [r2, #3]
   1cfb0:	strb	r0, [fp, #-32]	; 0xffffffe0
   1cfb4:	ldrb	r0, [r2, #4]
   1cfb8:	strb	r0, [fp, #-31]	; 0xffffffe1
   1cfbc:	ldrb	r0, [r2, #5]
   1cfc0:	strb	r0, [fp, #-30]	; 0xffffffe2
   1cfc4:	ldrb	r0, [r2, #6]
   1cfc8:	strb	r0, [fp, #-29]	; 0xffffffe3
   1cfcc:	ldrb	r0, [r1]
   1cfd0:	strb	r0, [sp, #38]	; 0x26
   1cfd4:	ldrb	r0, [r1, #1]
   1cfd8:	strb	r0, [sp, #39]	; 0x27
   1cfdc:	ldrb	r0, [r1, #2]
   1cfe0:	strb	r0, [sp, #40]	; 0x28
   1cfe4:	ldrb	r0, [r1, #3]
   1cfe8:	strb	r0, [sp, #41]	; 0x29
   1cfec:	ldrb	r0, [r1, #4]
   1cff0:	strb	r0, [sp, #42]	; 0x2a
   1cff4:	ldrb	r0, [r1, #5]
   1cff8:	strb	r0, [sp, #43]	; 0x2b
   1cffc:	ldrb	r0, [r1, #6]
   1d000:	strb	r0, [sp, #44]	; 0x2c
   1d004:	ldr	r0, [fp, #-8]
   1d008:	bl	286d4 <flatcc_builder_reset@@Base>
   1d00c:	ldr	r1, [fp, #-8]
   1d010:	str	r0, [sp, #32]
   1d014:	mov	r0, r1
   1d018:	bl	18cdc <gen_monster@@Base+0x880>
   1d01c:	ldr	r1, [pc, #412]	; 1d1c0 <test_basic_sort@@Base+0x24c>
   1d020:	add	r1, pc, r1
   1d024:	ldr	r2, [fp, #-8]
   1d028:	str	r0, [sp, #28]
   1d02c:	mov	r0, r2
   1d030:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   1d034:	sub	r1, fp, #35	; 0x23
   1d038:	ldr	r2, [fp, #-8]
   1d03c:	str	r0, [sp, #24]
   1d040:	mov	r0, r2
   1d044:	movw	r2, #7
   1d048:	bl	18e74 <gen_monster@@Base+0xa18>
   1d04c:	ldr	r1, [fp, #-8]
   1d050:	str	r0, [sp, #20]
   1d054:	mov	r0, r1
   1d058:	bl	19880 <gen_monster@@Base+0x1424>
   1d05c:	ldr	r1, [fp, #-8]
   1d060:	str	r0, [sp, #16]
   1d064:	mov	r0, r1
   1d068:	sub	r1, fp, #28
   1d06c:	bl	2d8a8 <flatcc_builder_get_direct_buffer@@Base>
   1d070:	str	r0, [fp, #-24]	; 0xffffffe8
   1d074:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d078:	bl	131f4 <verify_empty_monster@@Base+0x28c>
   1d07c:	str	r0, [fp, #-12]
   1d080:	ldr	r0, [fp, #-12]
   1d084:	bl	16fc8 <verify_monster@@Base+0x15fc>
   1d088:	str	r0, [fp, #-16]
   1d08c:	ldr	r0, [fp, #-16]
   1d090:	str	r0, [fp, #-20]	; 0xffffffec
   1d094:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d098:	bl	1d1e0 <test_basic_sort@@Base+0x26c>
   1d09c:	ldr	r0, [fp, #-16]
   1d0a0:	bl	170d0 <verify_monster@@Base+0x1704>
   1d0a4:	cmp	r0, #7
   1d0a8:	bne	1d0b0 <test_basic_sort@@Base+0x13c>
   1d0ac:	b	1d0d0 <test_basic_sort@@Base+0x15c>
   1d0b0:	ldr	r0, [pc, #276]	; 1d1cc <test_basic_sort@@Base+0x258>
   1d0b4:	add	r0, pc, r0
   1d0b8:	ldr	r1, [pc, #272]	; 1d1d0 <test_basic_sort@@Base+0x25c>
   1d0bc:	add	r1, pc, r1
   1d0c0:	ldr	r2, [pc, #268]	; 1d1d4 <test_basic_sort@@Base+0x260>
   1d0c4:	add	r3, pc, r2
   1d0c8:	movw	r2, #1552	; 0x610
   1d0cc:	bl	12e68 <__assert_fail@plt>
   1d0d0:	movw	r0, #0
   1d0d4:	strb	r0, [sp, #36]	; 0x24
   1d0d8:	ldrb	r0, [sp, #36]	; 0x24
   1d0dc:	ldr	r1, [fp, #-16]
   1d0e0:	str	r0, [sp, #12]
   1d0e4:	mov	r0, r1
   1d0e8:	bl	170d0 <verify_monster@@Base+0x1704>
   1d0ec:	ldr	r1, [sp, #12]
   1d0f0:	cmp	r1, r0
   1d0f4:	bcs	1d1ac <test_basic_sort@@Base+0x238>
   1d0f8:	ldr	r0, [fp, #-16]
   1d0fc:	ldrb	r1, [sp, #36]	; 0x24
   1d100:	bl	170f0 <verify_monster@@Base+0x1724>
   1d104:	strb	r0, [sp, #37]	; 0x25
   1d108:	ldrb	r0, [sp, #37]	; 0x25
   1d10c:	ldrb	r1, [sp, #36]	; 0x24
   1d110:	add	r2, sp, #38	; 0x26
   1d114:	add	r1, r2, r1
   1d118:	ldrb	r1, [r1]
   1d11c:	cmp	r0, r1
   1d120:	beq	1d13c <test_basic_sort@@Base+0x1c8>
   1d124:	ldr	r0, [pc, #176]	; 1d1dc <test_basic_sort@@Base+0x268>
   1d128:	add	r0, pc, r0
   1d12c:	bl	12d9c <printf@plt>
   1d130:	mvn	r1, #0
   1d134:	str	r1, [fp, #-4]
   1d138:	b	1d1b4 <test_basic_sort@@Base+0x240>
   1d13c:	ldr	r0, [fp, #-16]
   1d140:	ldrb	r1, [sp, #37]	; 0x25
   1d144:	bl	1d200 <test_basic_sort@@Base+0x28c>
   1d148:	ldrb	r1, [sp, #36]	; 0x24
   1d14c:	cmp	r1, #3
   1d150:	str	r0, [sp, #8]
   1d154:	bne	1d164 <test_basic_sort@@Base+0x1f0>
   1d158:	movw	r0, #2
   1d15c:	str	r0, [sp, #4]
   1d160:	b	1d16c <test_basic_sort@@Base+0x1f8>
   1d164:	ldrb	r0, [sp, #36]	; 0x24
   1d168:	str	r0, [sp, #4]
   1d16c:	ldr	r0, [sp, #4]
   1d170:	ldr	r1, [sp, #8]
   1d174:	cmp	r1, r0
   1d178:	beq	1d194 <test_basic_sort@@Base+0x220>
   1d17c:	ldr	r0, [pc, #84]	; 1d1d8 <test_basic_sort@@Base+0x264>
   1d180:	add	r0, pc, r0
   1d184:	bl	12d9c <printf@plt>
   1d188:	mvn	r1, #0
   1d18c:	str	r1, [fp, #-4]
   1d190:	b	1d1b4 <test_basic_sort@@Base+0x240>
   1d194:	b	1d198 <test_basic_sort@@Base+0x224>
   1d198:	ldrb	r0, [sp, #36]	; 0x24
   1d19c:	movw	r1, #1
   1d1a0:	add	r0, r0, r1
   1d1a4:	strb	r0, [sp, #36]	; 0x24
   1d1a8:	b	1d0d8 <test_basic_sort@@Base+0x164>
   1d1ac:	movw	r0, #0
   1d1b0:	str	r0, [fp, #-4]
   1d1b4:	ldr	r0, [fp, #-4]
   1d1b8:	mov	sp, fp
   1d1bc:	pop	{fp, pc}
   1d1c0:	andeq	r4, r1, pc, lsl #17
   1d1c4:	ldrdeq	r9, [r1], -sp
   1d1c8:	andeq	r9, r1, lr, asr #3
   1d1cc:	andeq	r5, r1, pc, asr pc
   1d1d0:	andeq	r5, r1, fp, lsl #1
   1d1d4:	andeq	r5, r1, sp, ror pc
   1d1d8:	strdeq	r5, [r1], -pc	; <UNPREDICTABLE>
   1d1dc:	andeq	r5, r1, r1, asr #30
   1d1e0:	push	{fp, lr}
   1d1e4:	mov	fp, sp
   1d1e8:	sub	sp, sp, #8
   1d1ec:	str	r0, [sp, #4]
   1d1f0:	ldr	r0, [sp, #4]
   1d1f4:	bl	26690 <main@@Base+0x36d8>
   1d1f8:	mov	sp, fp
   1d1fc:	pop	{fp, pc}
   1d200:	push	{fp, lr}
   1d204:	mov	fp, sp
   1d208:	sub	sp, sp, #32
   1d20c:	str	r0, [fp, #-8]
   1d210:	strb	r1, [fp, #-9]
   1d214:	movw	r0, #0
   1d218:	str	r0, [sp, #16]
   1d21c:	ldr	r0, [fp, #-8]
   1d220:	bl	170d0 <verify_monster@@Base+0x1704>
   1d224:	str	r0, [sp, #12]
   1d228:	cmp	r0, #0
   1d22c:	bne	1d244 <test_basic_sort@@Base+0x2d0>
   1d230:	ldr	r0, [pc, #328]	; 1d380 <test_basic_sort@@Base+0x40c>
   1d234:	add	r0, pc, r0
   1d238:	ldr	r0, [r0]
   1d23c:	str	r0, [fp, #-4]
   1d240:	b	1d374 <test_basic_sort@@Base+0x400>
   1d244:	ldr	r0, [sp, #12]
   1d248:	mvn	r1, #0
   1d24c:	add	r0, r0, r1
   1d250:	str	r0, [sp, #12]
   1d254:	ldr	r0, [sp, #16]
   1d258:	ldr	r1, [sp, #12]
   1d25c:	cmp	r0, r1
   1d260:	bcs	1d2f0 <test_basic_sort@@Base+0x37c>
   1d264:	ldr	r0, [sp, #16]
   1d268:	ldr	r1, [sp, #12]
   1d26c:	ldr	r2, [sp, #16]
   1d270:	sub	r1, r1, r2
   1d274:	lsr	r1, r1, #1
   1d278:	add	r0, r0, r1
   1d27c:	str	r0, [sp, #8]
   1d280:	ldr	r0, [fp, #-8]
   1d284:	ldr	r1, [sp, #8]
   1d288:	bl	170f0 <verify_monster@@Base+0x1724>
   1d28c:	strb	r0, [fp, #-10]
   1d290:	ldrb	r0, [fp, #-10]
   1d294:	ldrb	r1, [fp, #-9]
   1d298:	cmp	r0, r1
   1d29c:	bge	1d2ac <test_basic_sort@@Base+0x338>
   1d2a0:	mvn	r0, #0
   1d2a4:	str	r0, [sp, #4]
   1d2a8:	b	1d2c8 <test_basic_sort@@Base+0x354>
   1d2ac:	ldrb	r0, [fp, #-10]
   1d2b0:	ldrb	r1, [fp, #-9]
   1d2b4:	cmp	r0, r1
   1d2b8:	movw	r0, #0
   1d2bc:	movgt	r0, #1
   1d2c0:	and	r0, r0, #1
   1d2c4:	str	r0, [sp, #4]
   1d2c8:	ldr	r0, [sp, #4]
   1d2cc:	cmp	r0, #0
   1d2d0:	bge	1d2e4 <test_basic_sort@@Base+0x370>
   1d2d4:	ldr	r0, [sp, #8]
   1d2d8:	add	r0, r0, #1
   1d2dc:	str	r0, [sp, #16]
   1d2e0:	b	1d2ec <test_basic_sort@@Base+0x378>
   1d2e4:	ldr	r0, [sp, #8]
   1d2e8:	str	r0, [sp, #12]
   1d2ec:	b	1d254 <test_basic_sort@@Base+0x2e0>
   1d2f0:	ldr	r0, [sp, #16]
   1d2f4:	ldr	r1, [sp, #12]
   1d2f8:	cmp	r0, r1
   1d2fc:	bne	1d364 <test_basic_sort@@Base+0x3f0>
   1d300:	ldr	r0, [fp, #-8]
   1d304:	ldr	r1, [sp, #16]
   1d308:	bl	170f0 <verify_monster@@Base+0x1724>
   1d30c:	strb	r0, [fp, #-10]
   1d310:	ldrb	r0, [fp, #-10]
   1d314:	ldrb	r1, [fp, #-9]
   1d318:	cmp	r0, r1
   1d31c:	bge	1d32c <test_basic_sort@@Base+0x3b8>
   1d320:	mvn	r0, #0
   1d324:	str	r0, [sp]
   1d328:	b	1d348 <test_basic_sort@@Base+0x3d4>
   1d32c:	ldrb	r0, [fp, #-10]
   1d330:	ldrb	r1, [fp, #-9]
   1d334:	cmp	r0, r1
   1d338:	movw	r0, #0
   1d33c:	movgt	r0, #1
   1d340:	and	r0, r0, #1
   1d344:	str	r0, [sp]
   1d348:	ldr	r0, [sp]
   1d34c:	cmp	r0, #0
   1d350:	bne	1d360 <test_basic_sort@@Base+0x3ec>
   1d354:	ldr	r0, [sp, #16]
   1d358:	str	r0, [fp, #-4]
   1d35c:	b	1d374 <test_basic_sort@@Base+0x400>
   1d360:	b	1d364 <test_basic_sort@@Base+0x3f0>
   1d364:	ldr	r0, [pc, #24]	; 1d384 <test_basic_sort@@Base+0x410>
   1d368:	add	r0, pc, r0
   1d36c:	ldr	r0, [r0]
   1d370:	str	r0, [fp, #-4]
   1d374:	ldr	r0, [fp, #-4]
   1d378:	mov	sp, fp
   1d37c:	pop	{fp, pc}
   1d380:	andeq	sl, r2, r8, lsr lr
   1d384:	andeq	sl, r2, r4, lsl #26

0001d388 <test_clone_slice@@Base>:
   1d388:	push	{fp, lr}
   1d38c:	mov	fp, sp
   1d390:	sub	sp, sp, #208	; 0xd0
   1d394:	ldr	r1, [pc, #2044]	; 1db98 <test_clone_slice@@Base+0x810>
   1d398:	add	r1, pc, r1
   1d39c:	str	r0, [fp, #-4]
   1d3a0:	mvn	r0, #0
   1d3a4:	str	r0, [fp, #-56]	; 0xffffffc8
   1d3a8:	ldrb	r0, [r1]
   1d3ac:	strb	r0, [fp, #-63]	; 0xffffffc1
   1d3b0:	ldrb	r0, [r1, #1]
   1d3b4:	strb	r0, [fp, #-62]	; 0xffffffc2
   1d3b8:	ldrb	r0, [r1, #2]
   1d3bc:	strb	r0, [fp, #-61]	; 0xffffffc3
   1d3c0:	ldrb	r0, [r1, #3]
   1d3c4:	strb	r0, [fp, #-60]	; 0xffffffc4
   1d3c8:	ldrb	r0, [r1, #4]
   1d3cc:	strb	r0, [fp, #-59]	; 0xffffffc5
   1d3d0:	ldrb	r0, [r1, #5]
   1d3d4:	strb	r0, [fp, #-58]	; 0xffffffc6
   1d3d8:	ldrb	r0, [r1, #6]
   1d3dc:	strb	r0, [fp, #-57]	; 0xffffffc7
   1d3e0:	ldr	r0, [fp, #-4]
   1d3e4:	bl	286d4 <flatcc_builder_reset@@Base>
   1d3e8:	ldr	r1, [fp, #-4]
   1d3ec:	str	r0, [fp, #-76]	; 0xffffffb4
   1d3f0:	mov	r0, r1
   1d3f4:	bl	18cdc <gen_monster@@Base+0x880>
   1d3f8:	ldr	r1, [pc, #1940]	; 1db94 <test_clone_slice@@Base+0x80c>
   1d3fc:	add	r1, pc, r1
   1d400:	ldr	r2, [fp, #-4]
   1d404:	str	r0, [fp, #-80]	; 0xffffffb0
   1d408:	mov	r0, r2
   1d40c:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   1d410:	sub	r1, fp, #63	; 0x3f
   1d414:	ldr	r2, [fp, #-4]
   1d418:	str	r0, [fp, #-84]	; 0xffffffac
   1d41c:	mov	r0, r2
   1d420:	movw	r2, #7
   1d424:	bl	1dc30 <test_clone_slice@@Base+0x8a8>
   1d428:	ldr	r1, [fp, #-4]
   1d42c:	str	r0, [fp, #-88]	; 0xffffffa8
   1d430:	mov	r0, r1
   1d434:	bl	18ecc <gen_monster@@Base+0xa70>
   1d438:	ldr	r1, [fp, #-4]
   1d43c:	str	r0, [fp, #-92]	; 0xffffffa4
   1d440:	mov	r0, r1
   1d444:	movw	r1, #2
   1d448:	bl	18eec <gen_monster@@Base+0xa90>
   1d44c:	str	r0, [fp, #-32]	; 0xffffffe0
   1d450:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d454:	movw	r1, #22
   1d458:	strh	r1, [r0]
   1d45c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d460:	movw	r1, #44	; 0x2c
   1d464:	strh	r1, [r0, #4]
   1d468:	ldr	r0, [fp, #-4]
   1d46c:	bl	190e4 <gen_monster@@Base+0xc88>
   1d470:	ldr	r1, [fp, #-4]
   1d474:	str	r0, [fp, #-96]	; 0xffffffa0
   1d478:	mov	r0, r1
   1d47c:	bl	18db0 <gen_monster@@Base+0x954>
   1d480:	vldr	s0, [pc, #1008]	; 1d878 <test_clone_slice@@Base+0x4f0>
   1d484:	vstr	s0, [r0]
   1d488:	ldr	r0, [fp, #-4]
   1d48c:	bl	19880 <gen_monster@@Base+0x1424>
   1d490:	ldr	r1, [fp, #-4]
   1d494:	str	r0, [fp, #-100]	; 0xffffff9c
   1d498:	mov	r0, r1
   1d49c:	sub	r1, fp, #52	; 0x34
   1d4a0:	bl	2db44 <flatcc_builder_finalize_aligned_buffer@@Base>
   1d4a4:	ldr	r1, [pc, #1756]	; 1db88 <test_clone_slice@@Base+0x800>
   1d4a8:	add	r1, pc, r1
   1d4ac:	ldr	r2, [pc, #1752]	; 1db8c <test_clone_slice@@Base+0x804>
   1d4b0:	ldr	r2, [pc, r2]
   1d4b4:	str	r0, [fp, #-44]	; 0xffffffd4
   1d4b8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1d4bc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1d4c0:	ldr	r2, [r2]
   1d4c4:	str	r0, [sp, #104]	; 0x68
   1d4c8:	mov	r0, r1
   1d4cc:	ldr	r1, [sp, #104]	; 0x68
   1d4d0:	str	r2, [sp, #100]	; 0x64
   1d4d4:	mov	r2, r3
   1d4d8:	ldr	r3, [sp, #100]	; 0x64
   1d4dc:	bl	13ae8 <test_type_aliases@@Base+0x4f0>
   1d4e0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1d4e4:	bl	131f4 <verify_empty_monster@@Base+0x28c>
   1d4e8:	str	r0, [fp, #-8]
   1d4ec:	ldr	r0, [fp, #-4]
   1d4f0:	bl	286d4 <flatcc_builder_reset@@Base>
   1d4f4:	ldr	r1, [fp, #-4]
   1d4f8:	str	r0, [sp, #96]	; 0x60
   1d4fc:	mov	r0, r1
   1d500:	bl	18cdc <gen_monster@@Base+0x880>
   1d504:	ldr	r1, [fp, #-8]
   1d508:	str	r0, [sp, #92]	; 0x5c
   1d50c:	mov	r0, r1
   1d510:	bl	16bcc <verify_monster@@Base+0x1200>
   1d514:	str	r0, [fp, #-24]	; 0xffffffe8
   1d518:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d51c:	movw	r1, #0
   1d520:	cmp	r0, r1
   1d524:	beq	1d52c <test_clone_slice@@Base+0x1a4>
   1d528:	b	1d54c <test_clone_slice@@Base+0x1c4>
   1d52c:	ldr	r0, [pc, #1640]	; 1db9c <test_clone_slice@@Base+0x814>
   1d530:	add	r0, pc, r0
   1d534:	ldr	r1, [pc, #1636]	; 1dba0 <test_clone_slice@@Base+0x818>
   1d538:	add	r1, pc, r1
   1d53c:	ldr	r2, [pc, #1632]	; 1dba4 <test_clone_slice@@Base+0x81c>
   1d540:	add	r3, pc, r2
   1d544:	movw	r2, #1604	; 0x644
   1d548:	bl	12e68 <__assert_fail@plt>
   1d54c:	ldr	r0, [fp, #-8]
   1d550:	bl	17a34 <verify_monster@@Base+0x2068>
   1d554:	str	r0, [fp, #-20]	; 0xffffffec
   1d558:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d55c:	movw	r1, #0
   1d560:	cmp	r0, r1
   1d564:	beq	1d56c <test_clone_slice@@Base+0x1e4>
   1d568:	b	1d58c <test_clone_slice@@Base+0x204>
   1d56c:	ldr	r0, [pc, #1588]	; 1dba8 <test_clone_slice@@Base+0x820>
   1d570:	add	r0, pc, r0
   1d574:	ldr	r1, [pc, #1584]	; 1dbac <test_clone_slice@@Base+0x824>
   1d578:	add	r1, pc, r1
   1d57c:	ldr	r2, [pc, #1580]	; 1dbb0 <test_clone_slice@@Base+0x828>
   1d580:	add	r3, pc, r2
   1d584:	movw	r2, #1606	; 0x646
   1d588:	bl	12e68 <__assert_fail@plt>
   1d58c:	ldr	r0, [fp, #-8]
   1d590:	bl	17328 <verify_monster@@Base+0x195c>
   1d594:	str	r0, [fp, #-36]	; 0xffffffdc
   1d598:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d59c:	movw	r1, #0
   1d5a0:	cmp	r0, r1
   1d5a4:	beq	1d5ac <test_clone_slice@@Base+0x224>
   1d5a8:	b	1d5cc <test_clone_slice@@Base+0x244>
   1d5ac:	ldr	r0, [pc, #1536]	; 1dbb4 <test_clone_slice@@Base+0x82c>
   1d5b0:	add	r0, pc, r0
   1d5b4:	ldr	r1, [pc, #1532]	; 1dbb8 <test_clone_slice@@Base+0x830>
   1d5b8:	add	r1, pc, r1
   1d5bc:	ldr	r2, [pc, #1528]	; 1dbbc <test_clone_slice@@Base+0x834>
   1d5c0:	add	r3, pc, r2
   1d5c4:	movw	r2, #1608	; 0x648
   1d5c8:	bl	12e68 <__assert_fail@plt>
   1d5cc:	ldr	r0, [fp, #-4]
   1d5d0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d5d4:	bl	1dc88 <test_clone_slice@@Base+0x900>
   1d5d8:	ldr	r1, [fp, #-4]
   1d5dc:	str	r0, [sp, #88]	; 0x58
   1d5e0:	mov	r0, r1
   1d5e4:	bl	1bb0c <test_scan@@Base+0x121c>
   1d5e8:	ldr	r1, [fp, #-4]
   1d5ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d5f0:	str	r0, [sp, #84]	; 0x54
   1d5f4:	mov	r0, r1
   1d5f8:	mov	r1, r2
   1d5fc:	bl	1dcd4 <test_clone_slice@@Base+0x94c>
   1d600:	ldr	r1, [fp, #-4]
   1d604:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d608:	mov	r3, #4
   1d60c:	mov	ip, #20
   1d610:	str	r0, [sp, #80]	; 0x50
   1d614:	mov	r0, r1
   1d618:	mov	r1, r2
   1d61c:	mov	r2, r3
   1d620:	mov	r3, ip
   1d624:	str	ip, [sp, #76]	; 0x4c
   1d628:	bl	1dd20 <test_clone_slice@@Base+0x998>
   1d62c:	ldr	r1, [fp, #-4]
   1d630:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d634:	mov	r3, #0
   1d638:	mov	ip, #3
   1d63c:	str	r0, [sp, #72]	; 0x48
   1d640:	mov	r0, r1
   1d644:	mov	r1, r2
   1d648:	mov	r2, r3
   1d64c:	mov	r3, ip
   1d650:	bl	1dd20 <test_clone_slice@@Base+0x998>
   1d654:	ldr	r1, [fp, #-4]
   1d658:	str	r0, [sp, #68]	; 0x44
   1d65c:	mov	r0, r1
   1d660:	bl	1bb2c <test_scan@@Base+0x123c>
   1d664:	ldr	r1, [fp, #-4]
   1d668:	str	r0, [sp, #64]	; 0x40
   1d66c:	mov	r0, r1
   1d670:	bl	148cc <test_empty_monster@@Base+0x1d0>
   1d674:	ldr	r1, [fp, #-4]
   1d678:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d67c:	mov	r3, #2
   1d680:	str	r0, [sp, #60]	; 0x3c
   1d684:	mov	r0, r1
   1d688:	mov	r1, r2
   1d68c:	mov	r2, r3
   1d690:	ldr	ip, [sp, #76]	; 0x4c
   1d694:	str	r3, [sp, #56]	; 0x38
   1d698:	mov	r3, ip
   1d69c:	bl	1dd84 <test_clone_slice@@Base+0x9fc>
   1d6a0:	ldr	r1, [fp, #-4]
   1d6a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d6a8:	str	r0, [sp, #52]	; 0x34
   1d6ac:	mov	r0, r1
   1d6b0:	mov	r1, r2
   1d6b4:	bl	1dde8 <test_clone_slice@@Base+0xa60>
   1d6b8:	ldr	r1, [fp, #-4]
   1d6bc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1d6c0:	mov	r3, #1
   1d6c4:	str	r0, [sp, #48]	; 0x30
   1d6c8:	mov	r0, r1
   1d6cc:	mov	r1, r2
   1d6d0:	mov	r2, r3
   1d6d4:	ldr	r3, [sp, #56]	; 0x38
   1d6d8:	bl	1de34 <test_clone_slice@@Base+0xaac>
   1d6dc:	ldr	r1, [fp, #-4]
   1d6e0:	str	r0, [sp, #44]	; 0x2c
   1d6e4:	mov	r0, r1
   1d6e8:	bl	1493c <test_empty_monster@@Base+0x240>
   1d6ec:	str	r0, [fp, #-28]	; 0xffffffe4
   1d6f0:	ldr	r0, [fp, #-4]
   1d6f4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1d6f8:	sub	r2, fp, #72	; 0x48
   1d6fc:	str	r0, [sp, #40]	; 0x28
   1d700:	mov	r0, r2
   1d704:	bl	1956c <gen_monster@@Base+0x1110>
   1d708:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1d70c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1d710:	ldr	r0, [sp, #40]	; 0x28
   1d714:	bl	194a8 <gen_monster@@Base+0x104c>
   1d718:	ldr	r1, [fp, #-4]
   1d71c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d720:	str	r0, [sp, #36]	; 0x24
   1d724:	mov	r0, r1
   1d728:	mov	r1, r2
   1d72c:	movw	r2, #3
   1d730:	mvn	r3, #0
   1d734:	bl	1de98 <test_clone_slice@@Base+0xb10>
   1d738:	ldr	r1, [fp, #-4]
   1d73c:	ldr	r2, [fp, #-8]
   1d740:	str	r0, [sp, #32]
   1d744:	mov	r0, r2
   1d748:	str	r1, [sp, #28]
   1d74c:	bl	134fc <verify_empty_monster@@Base+0x594>
   1d750:	ldr	r1, [sp, #28]
   1d754:	str	r0, [sp, #24]
   1d758:	mov	r0, r1
   1d75c:	ldr	r1, [sp, #24]
   1d760:	bl	1defc <test_clone_slice@@Base+0xb74>
   1d764:	ldr	r1, [fp, #-4]
   1d768:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1d76c:	str	r0, [sp, #20]
   1d770:	mov	r0, r1
   1d774:	mov	r1, r2
   1d778:	bl	1df60 <test_clone_slice@@Base+0xbd8>
   1d77c:	ldr	r1, [fp, #-4]
   1d780:	str	r0, [sp, #16]
   1d784:	mov	r0, r1
   1d788:	bl	19880 <gen_monster@@Base+0x1424>
   1d78c:	ldr	r1, [fp, #-4]
   1d790:	str	r0, [sp, #12]
   1d794:	mov	r0, r1
   1d798:	sub	r1, fp, #52	; 0x34
   1d79c:	bl	2d8a8 <flatcc_builder_get_direct_buffer@@Base>
   1d7a0:	ldr	r1, [pc, #1048]	; 1dbc0 <test_clone_slice@@Base+0x838>
   1d7a4:	add	r1, pc, r1
   1d7a8:	ldr	r2, [pc, #1044]	; 1dbc4 <test_clone_slice@@Base+0x83c>
   1d7ac:	ldr	r2, [pc, r2]
   1d7b0:	str	r0, [fp, #-48]	; 0xffffffd0
   1d7b4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1d7b8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1d7bc:	ldr	r2, [r2]
   1d7c0:	str	r0, [sp, #8]
   1d7c4:	mov	r0, r1
   1d7c8:	ldr	r1, [sp, #8]
   1d7cc:	str	r2, [sp, #4]
   1d7d0:	mov	r2, r3
   1d7d4:	ldr	r3, [sp, #4]
   1d7d8:	bl	13ae8 <test_type_aliases@@Base+0x4f0>
   1d7dc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1d7e0:	bl	131f4 <verify_empty_monster@@Base+0x28c>
   1d7e4:	str	r0, [fp, #-12]
   1d7e8:	ldr	r0, [fp, #-12]
   1d7ec:	bl	16bcc <verify_monster@@Base+0x1200>
   1d7f0:	ldr	r1, [pc, #1060]	; 1dc1c <test_clone_slice@@Base+0x894>
   1d7f4:	add	r1, pc, r1
   1d7f8:	bl	12d90 <strcmp@plt>
   1d7fc:	cmp	r0, #0
   1d800:	beq	1d814 <test_clone_slice@@Base+0x48c>
   1d804:	ldr	r0, [pc, #1036]	; 1dc18 <test_clone_slice@@Base+0x890>
   1d808:	add	r0, pc, r0
   1d80c:	bl	12d9c <printf@plt>
   1d810:	b	1db74 <test_clone_slice@@Base+0x7ec>
   1d814:	ldr	r0, [fp, #-12]
   1d818:	bl	1777c <verify_monster@@Base+0x1db0>
   1d81c:	str	r0, [fp, #-16]
   1d820:	ldr	r0, [fp, #-16]
   1d824:	movw	r1, #0
   1d828:	bl	178d4 <verify_monster@@Base+0x1f08>
   1d82c:	ldr	r1, [pc, #1004]	; 1dc20 <test_clone_slice@@Base+0x898>
   1d830:	add	r1, pc, r1
   1d834:	bl	12d90 <strcmp@plt>
   1d838:	cmp	r0, #0
   1d83c:	beq	1d850 <test_clone_slice@@Base+0x4c8>
   1d840:	ldr	r0, [pc, #972]	; 1dc14 <test_clone_slice@@Base+0x88c>
   1d844:	add	r0, pc, r0
   1d848:	bl	12d9c <printf@plt>
   1d84c:	b	1db74 <test_clone_slice@@Base+0x7ec>
   1d850:	ldr	r0, [fp, #-16]
   1d854:	movw	r1, #1
   1d858:	bl	178d4 <verify_monster@@Base+0x1f08>
   1d85c:	bl	16cec <verify_monster@@Base+0x1320>
   1d860:	cmp	r0, #6
   1d864:	beq	1d87c <test_clone_slice@@Base+0x4f4>
   1d868:	ldr	r0, [pc, #928]	; 1dc10 <test_clone_slice@@Base+0x888>
   1d86c:	add	r0, pc, r0
   1d870:	bl	12d9c <printf@plt>
   1d874:	b	1db74 <test_clone_slice@@Base+0x7ec>
   1d878:	eorgt	r3, r9, #-872415232	; 0xcc000000
   1d87c:	ldr	r0, [fp, #-16]
   1d880:	movw	r1, #1
   1d884:	bl	178d4 <verify_monster@@Base+0x1f08>
   1d888:	ldr	r1, [pc, #916]	; 1dc24 <test_clone_slice@@Base+0x89c>
   1d88c:	add	r1, pc, r1
   1d890:	bl	12d90 <strcmp@plt>
   1d894:	cmp	r0, #0
   1d898:	beq	1d8ac <test_clone_slice@@Base+0x524>
   1d89c:	ldr	r0, [pc, #872]	; 1dc0c <test_clone_slice@@Base+0x884>
   1d8a0:	add	r0, pc, r0
   1d8a4:	bl	12d9c <printf@plt>
   1d8a8:	b	1db74 <test_clone_slice@@Base+0x7ec>
   1d8ac:	ldr	r0, [fp, #-16]
   1d8b0:	movw	r1, #2
   1d8b4:	bl	178d4 <verify_monster@@Base+0x1f08>
   1d8b8:	bl	16cec <verify_monster@@Base+0x1320>
   1d8bc:	cmp	r0, #3
   1d8c0:	beq	1d8d4 <test_clone_slice@@Base+0x54c>
   1d8c4:	ldr	r0, [pc, #828]	; 1dc08 <test_clone_slice@@Base+0x880>
   1d8c8:	add	r0, pc, r0
   1d8cc:	bl	12d9c <printf@plt>
   1d8d0:	b	1db74 <test_clone_slice@@Base+0x7ec>
   1d8d4:	ldr	r0, [fp, #-16]
   1d8d8:	movw	r1, #2
   1d8dc:	bl	178d4 <verify_monster@@Base+0x1f08>
   1d8e0:	ldr	r1, [pc, #832]	; 1dc28 <test_clone_slice@@Base+0x8a0>
   1d8e4:	add	r1, pc, r1
   1d8e8:	bl	12d90 <strcmp@plt>
   1d8ec:	cmp	r0, #0
   1d8f0:	beq	1d904 <test_clone_slice@@Base+0x57c>
   1d8f4:	ldr	r0, [pc, #776]	; 1dc04 <test_clone_slice@@Base+0x87c>
   1d8f8:	add	r0, pc, r0
   1d8fc:	bl	12d9c <printf@plt>
   1d900:	b	1db74 <test_clone_slice@@Base+0x7ec>
   1d904:	ldr	r0, [fp, #-12]
   1d908:	bl	17cc8 <verify_monster@@Base+0x22fc>
   1d90c:	str	r0, [fp, #-8]
   1d910:	ldr	r0, [fp, #-8]
   1d914:	movw	r1, #0
   1d918:	cmp	r0, r1
   1d91c:	beq	1d924 <test_clone_slice@@Base+0x59c>
   1d920:	b	1d944 <test_clone_slice@@Base+0x5bc>
   1d924:	ldr	r0, [pc, #668]	; 1dbc8 <test_clone_slice@@Base+0x840>
   1d928:	add	r0, pc, r0
   1d92c:	ldr	r1, [pc, #664]	; 1dbcc <test_clone_slice@@Base+0x844>
   1d930:	add	r1, pc, r1
   1d934:	ldr	r2, [pc, #660]	; 1dbd0 <test_clone_slice@@Base+0x848>
   1d938:	add	r3, pc, r2
   1d93c:	movw	r2, #1664	; 0x680
   1d940:	bl	12e68 <__assert_fail@plt>
   1d944:	ldr	r0, [fp, #-8]
   1d948:	bl	16bcc <verify_monster@@Base+0x1200>
   1d94c:	ldr	r1, [pc, #728]	; 1dc2c <test_clone_slice@@Base+0x8a4>
   1d950:	add	r1, pc, r1
   1d954:	bl	12d90 <strcmp@plt>
   1d958:	cmp	r0, #0
   1d95c:	beq	1d970 <test_clone_slice@@Base+0x5e8>
   1d960:	ldr	r0, [pc, #664]	; 1dc00 <test_clone_slice@@Base+0x878>
   1d964:	add	r0, pc, r0
   1d968:	bl	12d9c <printf@plt>
   1d96c:	b	1db74 <test_clone_slice@@Base+0x7ec>
   1d970:	ldr	r0, [fp, #-8]
   1d974:	bl	17a34 <verify_monster@@Base+0x2068>
   1d978:	str	r0, [fp, #-20]	; 0xffffffec
   1d97c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d980:	bl	17b3c <verify_monster@@Base+0x2170>
   1d984:	cmp	r0, #7
   1d988:	beq	1d99c <test_clone_slice@@Base+0x614>
   1d98c:	ldr	r0, [pc, #616]	; 1dbfc <test_clone_slice@@Base+0x874>
   1d990:	add	r0, pc, r0
   1d994:	bl	12d9c <printf@plt>
   1d998:	b	1db74 <test_clone_slice@@Base+0x7ec>
   1d99c:	sub	r1, fp, #63	; 0x3f
   1d9a0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d9a4:	mov	r2, #7
   1d9a8:	bl	12dc0 <memcmp@plt>
   1d9ac:	cmp	r0, #0
   1d9b0:	beq	1d9c4 <test_clone_slice@@Base+0x63c>
   1d9b4:	ldr	r0, [pc, #572]	; 1dbf8 <test_clone_slice@@Base+0x870>
   1d9b8:	add	r0, pc, r0
   1d9bc:	bl	12d9c <printf@plt>
   1d9c0:	b	1db74 <test_clone_slice@@Base+0x7ec>
   1d9c4:	ldr	r0, [fp, #-12]
   1d9c8:	bl	17a34 <verify_monster@@Base+0x2068>
   1d9cc:	str	r0, [fp, #-20]	; 0xffffffec
   1d9d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d9d4:	bl	17b3c <verify_monster@@Base+0x2170>
   1d9d8:	cmp	r0, #4
   1d9dc:	beq	1d9f0 <test_clone_slice@@Base+0x668>
   1d9e0:	ldr	r0, [pc, #524]	; 1dbf4 <test_clone_slice@@Base+0x86c>
   1d9e4:	add	r0, pc, r0
   1d9e8:	bl	12d9c <printf@plt>
   1d9ec:	b	1db74 <test_clone_slice@@Base+0x7ec>
   1d9f0:	sub	r0, fp, #63	; 0x3f
   1d9f4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d9f8:	add	r0, r0, #3
   1d9fc:	ldr	r0, [r0]
   1da00:	ldr	r1, [r1]
   1da04:	subs	r0, r1, r0
   1da08:	movwne	r0, #1
   1da0c:	cmp	r0, #0
   1da10:	beq	1da24 <test_clone_slice@@Base+0x69c>
   1da14:	ldr	r0, [pc, #468]	; 1dbf0 <test_clone_slice@@Base+0x868>
   1da18:	add	r0, pc, r0
   1da1c:	bl	12d9c <printf@plt>
   1da20:	b	1db74 <test_clone_slice@@Base+0x7ec>
   1da24:	ldr	r0, [fp, #-12]
   1da28:	bl	134fc <verify_empty_monster@@Base+0x594>
   1da2c:	vldr	s0, [pc, #348]	; 1db90 <test_clone_slice@@Base+0x808>
   1da30:	vldr	s2, [r0]
   1da34:	vcmp.f32	s2, s0
   1da38:	vmrs	APSR_nzcv, fpscr
   1da3c:	beq	1da50 <test_clone_slice@@Base+0x6c8>
   1da40:	ldr	r0, [pc, #420]	; 1dbec <test_clone_slice@@Base+0x864>
   1da44:	add	r0, pc, r0
   1da48:	bl	12d9c <printf@plt>
   1da4c:	b	1db74 <test_clone_slice@@Base+0x7ec>
   1da50:	ldr	r0, [fp, #-12]
   1da54:	bl	17328 <verify_monster@@Base+0x195c>
   1da58:	str	r0, [fp, #-36]	; 0xffffffdc
   1da5c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1da60:	bl	17430 <verify_monster@@Base+0x1a64>
   1da64:	cmp	r0, #2
   1da68:	beq	1da7c <test_clone_slice@@Base+0x6f4>
   1da6c:	ldr	r0, [pc, #372]	; 1dbe8 <test_clone_slice@@Base+0x860>
   1da70:	add	r0, pc, r0
   1da74:	bl	12d9c <printf@plt>
   1da78:	b	1db74 <test_clone_slice@@Base+0x7ec>
   1da7c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1da80:	movw	r1, #0
   1da84:	bl	17480 <verify_monster@@Base+0x1ab4>
   1da88:	str	r0, [fp, #-40]	; 0xffffffd8
   1da8c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1da90:	bl	174f0 <verify_monster@@Base+0x1b24>
   1da94:	sxth	r0, r0
   1da98:	cmp	r0, #22
   1da9c:	beq	1dab0 <test_clone_slice@@Base+0x728>
   1daa0:	ldr	r0, [pc, #316]	; 1dbe4 <test_clone_slice@@Base+0x85c>
   1daa4:	add	r0, pc, r0
   1daa8:	bl	12d9c <printf@plt>
   1daac:	b	1db74 <test_clone_slice@@Base+0x7ec>
   1dab0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1dab4:	movw	r1, #0
   1dab8:	bl	17480 <verify_monster@@Base+0x1ab4>
   1dabc:	ldrsh	r0, [r0]
   1dac0:	cmp	r0, #22
   1dac4:	beq	1dad8 <test_clone_slice@@Base+0x750>
   1dac8:	ldr	r0, [pc, #272]	; 1dbe0 <test_clone_slice@@Base+0x858>
   1dacc:	add	r0, pc, r0
   1dad0:	bl	12d9c <printf@plt>
   1dad4:	b	1db74 <test_clone_slice@@Base+0x7ec>
   1dad8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1dadc:	movw	r1, #1
   1dae0:	bl	17480 <verify_monster@@Base+0x1ab4>
   1dae4:	str	r0, [fp, #-40]	; 0xffffffd8
   1dae8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1daec:	bl	174f0 <verify_monster@@Base+0x1b24>
   1daf0:	sxth	r0, r0
   1daf4:	cmp	r0, #44	; 0x2c
   1daf8:	beq	1db0c <test_clone_slice@@Base+0x784>
   1dafc:	ldr	r0, [pc, #216]	; 1dbdc <test_clone_slice@@Base+0x854>
   1db00:	add	r0, pc, r0
   1db04:	bl	12d9c <printf@plt>
   1db08:	b	1db74 <test_clone_slice@@Base+0x7ec>
   1db0c:	ldr	r0, [fp, #-8]
   1db10:	bl	17328 <verify_monster@@Base+0x195c>
   1db14:	str	r0, [fp, #-36]	; 0xffffffdc
   1db18:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1db1c:	bl	17430 <verify_monster@@Base+0x1a64>
   1db20:	cmp	r0, #1
   1db24:	beq	1db38 <test_clone_slice@@Base+0x7b0>
   1db28:	ldr	r0, [pc, #168]	; 1dbd8 <test_clone_slice@@Base+0x850>
   1db2c:	add	r0, pc, r0
   1db30:	bl	12d9c <printf@plt>
   1db34:	b	1db74 <test_clone_slice@@Base+0x7ec>
   1db38:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1db3c:	movw	r1, #0
   1db40:	bl	17480 <verify_monster@@Base+0x1ab4>
   1db44:	str	r0, [fp, #-40]	; 0xffffffd8
   1db48:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1db4c:	bl	174f0 <verify_monster@@Base+0x1b24>
   1db50:	sxth	r0, r0
   1db54:	cmp	r0, #44	; 0x2c
   1db58:	beq	1db6c <test_clone_slice@@Base+0x7e4>
   1db5c:	ldr	r0, [pc, #112]	; 1dbd4 <test_clone_slice@@Base+0x84c>
   1db60:	add	r0, pc, r0
   1db64:	bl	12d9c <printf@plt>
   1db68:	b	1db74 <test_clone_slice@@Base+0x7ec>
   1db6c:	movw	r0, #0
   1db70:	str	r0, [fp, #-56]	; 0xffffffc8
   1db74:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1db78:	bl	2dcec <flatcc_builder_aligned_free@@Base>
   1db7c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1db80:	mov	sp, fp
   1db84:	pop	{fp, pc}
   1db88:	andeq	r5, r1, r1, lsl #24
   1db8c:	andeq	sl, r2, r4, lsr #23
   1db90:	eorgt	r3, r9, #-872415232	; 0xcc000000
   1db94:	andeq	r5, r1, r2, lsr #25
   1db98:	ldrdeq	r8, [r1], -r0
   1db9c:	muleq	r1, sp, r1
   1dba0:	andeq	r4, r1, pc, lsl #24
   1dba4:	andeq	r5, r1, r3, lsl #23
   1dba8:	andeq	r5, r1, ip, ror fp
   1dbac:	andeq	r4, r1, pc, asr #23
   1dbb0:	andeq	r5, r1, r3, asr #22
   1dbb4:	andeq	r5, r1, r2, asr #22
   1dbb8:	andeq	r4, r1, pc, lsl #23
   1dbbc:	andeq	r5, r1, r3, lsl #22
   1dbc0:	andeq	r5, r1, r4, asr r9
   1dbc4:	andeq	sl, r2, r8, lsr #17
   1dbc8:	andeq	r4, r1, fp, lsl r8
   1dbcc:	andeq	r4, r1, r7, lsl r8
   1dbd0:	andeq	r5, r1, fp, lsl #15
   1dbd4:	ldrdeq	r5, [r1], -sl
   1dbd8:	strdeq	r5, [r1], -r0
   1dbdc:	andeq	r5, r1, r0, lsl #16
   1dbe0:	andeq	r5, r1, r9, lsl #16
   1dbe4:	andeq	r5, r1, r5, lsl r8
   1dbe8:	andeq	r5, r1, r5, lsl r8
   1dbec:	andeq	r5, r1, r7, lsr #16
   1dbf0:	andeq	r5, r1, r4, lsr r8
   1dbf4:	andeq	r5, r1, fp, asr #16
   1dbf8:	andeq	r5, r1, r8, asr r8
   1dbfc:	andeq	r5, r1, r3, ror #16
   1dc00:	andeq	r5, r1, pc, asr r8
   1dc04:			; <UNDEFINED> instruction: 0x000158b4
   1dc08:			; <UNDEFINED> instruction: 0x000158bf
   1dc0c:	andeq	r5, r1, sp, asr #17
   1dc10:	ldrdeq	r5, [r1], -ip
   1dc14:	andeq	r5, r1, r6, ror #17
   1dc18:	andeq	r5, r1, r7, lsl #18
   1dc1c:	andeq	r5, r1, sl, lsr #17
   1dc20:	andeq	r5, r1, lr, ror #16
   1dc24:	andeq	r5, r1, r6, lsl r8
   1dc28:	andeq	r5, r1, r4, asr #17
   1dc2c:	andeq	r5, r1, r0, asr r7
   1dc30:	push	{fp, lr}
   1dc34:	mov	fp, sp
   1dc38:	sub	sp, sp, #24
   1dc3c:	str	r0, [fp, #-4]
   1dc40:	str	r1, [fp, #-8]
   1dc44:	str	r2, [sp, #12]
   1dc48:	ldr	r0, [fp, #-4]
   1dc4c:	ldr	r1, [fp, #-4]
   1dc50:	ldr	r2, [fp, #-8]
   1dc54:	ldr	r3, [sp, #12]
   1dc58:	str	r0, [sp, #8]
   1dc5c:	mov	r0, r1
   1dc60:	mov	r1, r2
   1dc64:	mov	r2, r3
   1dc68:	bl	26908 <main@@Base+0x3950>
   1dc6c:	ldr	r1, [sp, #8]
   1dc70:	str	r0, [sp, #4]
   1dc74:	mov	r0, r1
   1dc78:	ldr	r1, [sp, #4]
   1dc7c:	bl	25fb4 <main@@Base+0x2ffc>
   1dc80:	mov	sp, fp
   1dc84:	pop	{fp, pc}
   1dc88:	push	{fp, lr}
   1dc8c:	mov	fp, sp
   1dc90:	sub	sp, sp, #16
   1dc94:	str	r0, [fp, #-4]
   1dc98:	str	r1, [sp, #8]
   1dc9c:	ldr	r0, [fp, #-4]
   1dca0:	ldr	r1, [fp, #-4]
   1dca4:	ldr	r2, [sp, #8]
   1dca8:	str	r0, [sp, #4]
   1dcac:	mov	r0, r1
   1dcb0:	mov	r1, r2
   1dcb4:	bl	26950 <main@@Base+0x3998>
   1dcb8:	ldr	r1, [sp, #4]
   1dcbc:	str	r0, [sp]
   1dcc0:	mov	r0, r1
   1dcc4:	ldr	r1, [sp]
   1dcc8:	bl	19154 <gen_monster@@Base+0xcf8>
   1dccc:	mov	sp, fp
   1dcd0:	pop	{fp, pc}
   1dcd4:	push	{fp, lr}
   1dcd8:	mov	fp, sp
   1dcdc:	sub	sp, sp, #16
   1dce0:	str	r0, [fp, #-4]
   1dce4:	str	r1, [sp, #8]
   1dce8:	ldr	r0, [fp, #-4]
   1dcec:	ldr	r1, [fp, #-4]
   1dcf0:	ldr	r2, [sp, #8]
   1dcf4:	str	r0, [sp, #4]
   1dcf8:	mov	r0, r1
   1dcfc:	mov	r1, r2
   1dd00:	bl	26950 <main@@Base+0x3998>
   1dd04:	ldr	r1, [sp, #4]
   1dd08:	str	r0, [sp]
   1dd0c:	mov	r0, r1
   1dd10:	ldr	r1, [sp]
   1dd14:	bl	269a0 <main@@Base+0x39e8>
   1dd18:	mov	sp, fp
   1dd1c:	pop	{fp, pc}
   1dd20:	push	{fp, lr}
   1dd24:	mov	fp, sp
   1dd28:	sub	sp, sp, #24
   1dd2c:	str	r0, [fp, #-4]
   1dd30:	str	r1, [fp, #-8]
   1dd34:	str	r2, [sp, #12]
   1dd38:	str	r3, [sp, #8]
   1dd3c:	ldr	r0, [fp, #-4]
   1dd40:	ldr	r1, [fp, #-4]
   1dd44:	ldr	r2, [fp, #-8]
   1dd48:	ldr	r3, [sp, #12]
   1dd4c:	ldr	ip, [sp, #8]
   1dd50:	str	r0, [sp, #4]
   1dd54:	mov	r0, r1
   1dd58:	mov	r1, r2
   1dd5c:	mov	r2, r3
   1dd60:	mov	r3, ip
   1dd64:	bl	269ec <main@@Base+0x3a34>
   1dd68:	ldr	r1, [sp, #4]
   1dd6c:	str	r0, [sp]
   1dd70:	mov	r0, r1
   1dd74:	ldr	r1, [sp]
   1dd78:	bl	269a0 <main@@Base+0x39e8>
   1dd7c:	mov	sp, fp
   1dd80:	pop	{fp, pc}
   1dd84:	push	{fp, lr}
   1dd88:	mov	fp, sp
   1dd8c:	sub	sp, sp, #24
   1dd90:	str	r0, [fp, #-4]
   1dd94:	str	r1, [fp, #-8]
   1dd98:	str	r2, [sp, #12]
   1dd9c:	str	r3, [sp, #8]
   1dda0:	ldr	r0, [fp, #-4]
   1dda4:	ldr	r1, [fp, #-4]
   1dda8:	ldr	r2, [fp, #-8]
   1ddac:	ldr	r3, [sp, #12]
   1ddb0:	ldr	ip, [sp, #8]
   1ddb4:	str	r0, [sp, #4]
   1ddb8:	mov	r0, r1
   1ddbc:	mov	r1, r2
   1ddc0:	mov	r2, r3
   1ddc4:	mov	r3, ip
   1ddc8:	bl	269ec <main@@Base+0x3a34>
   1ddcc:	ldr	r1, [sp, #4]
   1ddd0:	str	r0, [sp]
   1ddd4:	mov	r0, r1
   1ddd8:	ldr	r1, [sp]
   1dddc:	bl	19154 <gen_monster@@Base+0xcf8>
   1dde0:	mov	sp, fp
   1dde4:	pop	{fp, pc}
   1dde8:	push	{fp, lr}
   1ddec:	mov	fp, sp
   1ddf0:	sub	sp, sp, #16
   1ddf4:	str	r0, [fp, #-4]
   1ddf8:	str	r1, [sp, #8]
   1ddfc:	ldr	r0, [fp, #-4]
   1de00:	ldr	r1, [fp, #-4]
   1de04:	ldr	r2, [sp, #8]
   1de08:	str	r0, [sp, #4]
   1de0c:	mov	r0, r1
   1de10:	mov	r1, r2
   1de14:	bl	26a74 <main@@Base+0x3abc>
   1de18:	ldr	r1, [sp, #4]
   1de1c:	str	r0, [sp]
   1de20:	mov	r0, r1
   1de24:	ldr	r1, [sp]
   1de28:	bl	25fb4 <main@@Base+0x2ffc>
   1de2c:	mov	sp, fp
   1de30:	pop	{fp, pc}
   1de34:	push	{fp, lr}
   1de38:	mov	fp, sp
   1de3c:	sub	sp, sp, #24
   1de40:	str	r0, [fp, #-4]
   1de44:	str	r1, [fp, #-8]
   1de48:	str	r2, [sp, #12]
   1de4c:	str	r3, [sp, #8]
   1de50:	ldr	r0, [fp, #-4]
   1de54:	ldr	r1, [fp, #-4]
   1de58:	ldr	r2, [fp, #-8]
   1de5c:	ldr	r3, [sp, #12]
   1de60:	ldr	ip, [sp, #8]
   1de64:	str	r0, [sp, #4]
   1de68:	mov	r0, r1
   1de6c:	mov	r1, r2
   1de70:	mov	r2, r3
   1de74:	mov	r3, ip
   1de78:	bl	26adc <main@@Base+0x3b24>
   1de7c:	ldr	r1, [sp, #4]
   1de80:	str	r0, [sp]
   1de84:	mov	r0, r1
   1de88:	ldr	r1, [sp]
   1de8c:	bl	25dd4 <main@@Base+0x2e1c>
   1de90:	mov	sp, fp
   1de94:	pop	{fp, pc}
   1de98:	push	{fp, lr}
   1de9c:	mov	fp, sp
   1dea0:	sub	sp, sp, #24
   1dea4:	str	r0, [fp, #-4]
   1dea8:	str	r1, [fp, #-8]
   1deac:	str	r2, [sp, #12]
   1deb0:	str	r3, [sp, #8]
   1deb4:	ldr	r0, [fp, #-4]
   1deb8:	ldr	r1, [fp, #-4]
   1debc:	ldr	r2, [fp, #-8]
   1dec0:	ldr	r3, [sp, #12]
   1dec4:	ldr	ip, [sp, #8]
   1dec8:	str	r0, [sp, #4]
   1decc:	mov	r0, r1
   1ded0:	mov	r1, r2
   1ded4:	mov	r2, r3
   1ded8:	mov	r3, ip
   1dedc:	bl	26bc8 <main@@Base+0x3c10>
   1dee0:	ldr	r1, [sp, #4]
   1dee4:	str	r0, [sp]
   1dee8:	mov	r0, r1
   1deec:	ldr	r1, [sp]
   1def0:	bl	25fb4 <main@@Base+0x2ffc>
   1def4:	mov	sp, fp
   1def8:	pop	{fp, pc}
   1defc:	push	{fp, lr}
   1df00:	mov	fp, sp
   1df04:	sub	sp, sp, #16
   1df08:	str	r0, [fp, #-4]
   1df0c:	str	r1, [sp, #8]
   1df10:	ldr	r0, [fp, #-4]
   1df14:	ldr	r1, [sp, #8]
   1df18:	movw	r2, #0
   1df1c:	str	r1, [sp, #4]
   1df20:	mov	r1, r2
   1df24:	ldr	r2, [sp, #4]
   1df28:	movw	r3, #32
   1df2c:	movw	ip, #16
   1df30:	uxth	ip, ip
   1df34:	str	ip, [sp]
   1df38:	bl	2d488 <flatcc_builder_table_add_copy@@Base>
   1df3c:	movw	r1, #0
   1df40:	cmp	r1, r0
   1df44:	movw	r0, #0
   1df48:	moveq	r0, #1
   1df4c:	tst	r0, #1
   1df50:	mvn	r0, #0
   1df54:	moveq	r0, #0
   1df58:	mov	sp, fp
   1df5c:	pop	{fp, pc}
   1df60:	push	{fp, lr}
   1df64:	mov	fp, sp
   1df68:	sub	sp, sp, #16
   1df6c:	str	r0, [fp, #-4]
   1df70:	str	r1, [sp, #8]
   1df74:	ldr	r0, [fp, #-4]
   1df78:	ldr	r1, [fp, #-4]
   1df7c:	ldr	r2, [sp, #8]
   1df80:	str	r0, [sp, #4]
   1df84:	mov	r0, r1
   1df88:	mov	r1, r2
   1df8c:	bl	26ca4 <main@@Base+0x3cec>
   1df90:	ldr	r1, [sp, #4]
   1df94:	str	r0, [sp]
   1df98:	mov	r0, r1
   1df9c:	ldr	r1, [sp]
   1dfa0:	bl	25dd4 <main@@Base+0x2e1c>
   1dfa4:	mov	sp, fp
   1dfa8:	pop	{fp, pc}

0001dfac <test_create_add_field@@Base>:
   1dfac:	push	{fp, lr}
   1dfb0:	mov	fp, sp
   1dfb4:	sub	sp, sp, #64	; 0x40
   1dfb8:	str	r0, [fp, #-4]
   1dfbc:	mvn	r0, #0
   1dfc0:	str	r0, [fp, #-16]
   1dfc4:	ldr	r0, [fp, #-4]
   1dfc8:	bl	286d4 <flatcc_builder_reset@@Base>
   1dfcc:	ldr	r1, [fp, #-4]
   1dfd0:	str	r0, [fp, #-28]	; 0xffffffe4
   1dfd4:	mov	r0, r1
   1dfd8:	bl	18cdc <gen_monster@@Base+0x880>
   1dfdc:	ldr	r1, [pc, #288]	; 1e104 <test_create_add_field@@Base+0x158>
   1dfe0:	add	r1, pc, r1
   1dfe4:	ldr	r2, [fp, #-4]
   1dfe8:	str	r0, [sp, #32]
   1dfec:	mov	r0, r2
   1dff0:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   1dff4:	ldr	r1, [pc, #260]	; 1e100 <test_create_add_field@@Base+0x154>
   1dff8:	add	r1, pc, r1
   1dffc:	ldr	r2, [fp, #-4]
   1e000:	ldr	r3, [fp, #-4]
   1e004:	str	r0, [sp, #28]
   1e008:	mov	r0, r3
   1e00c:	str	r2, [sp, #24]
   1e010:	bl	19398 <gen_monster@@Base+0xf3c>
   1e014:	mov	r1, sp
   1e018:	mov	r2, #2
   1e01c:	str	r2, [r1]
   1e020:	mvn	r2, #99	; 0x63
   1e024:	mvn	r3, #0
   1e028:	ldr	r1, [sp, #24]
   1e02c:	str	r0, [sp, #20]
   1e030:	mov	r0, r1
   1e034:	ldr	r1, [sp, #20]
   1e038:	bl	1e110 <test_create_add_field@@Base+0x164>
   1e03c:	ldr	r1, [fp, #-4]
   1e040:	str	r0, [sp, #16]
   1e044:	mov	r0, r1
   1e048:	movw	r1, #0
   1e04c:	bl	1e188 <test_create_add_field@@Base+0x1dc>
   1e050:	ldr	r1, [fp, #-4]
   1e054:	str	r0, [sp, #12]
   1e058:	mov	r0, r1
   1e05c:	bl	19880 <gen_monster@@Base+0x1424>
   1e060:	ldr	r1, [fp, #-4]
   1e064:	str	r0, [sp, #8]
   1e068:	mov	r0, r1
   1e06c:	sub	r1, fp, #12
   1e070:	bl	2db44 <flatcc_builder_finalize_aligned_buffer@@Base>
   1e074:	str	r0, [fp, #-8]
   1e078:	ldr	r0, [fp, #-8]
   1e07c:	bl	131f4 <verify_empty_monster@@Base+0x28c>
   1e080:	str	r0, [fp, #-20]	; 0xffffffec
   1e084:	ldr	r0, [fp, #-20]	; 0xffffffec
   1e088:	bl	1e1f4 <test_create_add_field@@Base+0x248>
   1e08c:	cmp	r0, #0
   1e090:	beq	1e0a4 <test_create_add_field@@Base+0xf8>
   1e094:	ldr	r0, [pc, #112]	; 1e10c <test_create_add_field@@Base+0x160>
   1e098:	add	r0, pc, r0
   1e09c:	bl	12d9c <printf@plt>
   1e0a0:	b	1e0ec <test_create_add_field@@Base+0x140>
   1e0a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   1e0a8:	bl	180f4 <verify_monster@@Base+0x2728>
   1e0ac:	str	r0, [fp, #-24]	; 0xffffffe8
   1e0b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1e0b4:	bl	1e2c0 <test_create_add_field@@Base+0x314>
   1e0b8:	mvn	r2, #99	; 0x63
   1e0bc:	eor	r0, r0, r2
   1e0c0:	mvn	r1, r1
   1e0c4:	orr	r0, r0, r1
   1e0c8:	cmp	r0, #0
   1e0cc:	beq	1e0e4 <test_create_add_field@@Base+0x138>
   1e0d0:	b	1e0d4 <test_create_add_field@@Base+0x128>
   1e0d4:	ldr	r0, [pc, #44]	; 1e108 <test_create_add_field@@Base+0x15c>
   1e0d8:	add	r0, pc, r0
   1e0dc:	bl	12d9c <printf@plt>
   1e0e0:	b	1e0ec <test_create_add_field@@Base+0x140>
   1e0e4:	movw	r0, #0
   1e0e8:	str	r0, [fp, #-16]
   1e0ec:	ldr	r0, [fp, #-8]
   1e0f0:	bl	2dcec <flatcc_builder_aligned_free@@Base>
   1e0f4:	ldr	r0, [fp, #-16]
   1e0f8:	mov	sp, fp
   1e0fc:	pop	{fp, pc}
   1e100:	andeq	r5, r1, r7, ror #6
   1e104:	andeq	r3, r1, pc, asr #17
   1e108:			; <UNDEFINED> instruction: 0x000152bb
   1e10c:	andeq	r5, r1, sp, asr #5
   1e110:	push	{r4, sl, fp, lr}
   1e114:	add	fp, sp, #8
   1e118:	sub	sp, sp, #32
   1e11c:	ldr	ip, [fp, #8]
   1e120:	str	r0, [fp, #-12]
   1e124:	str	r1, [fp, #-16]
   1e128:	str	r3, [sp, #20]
   1e12c:	str	r2, [sp, #16]
   1e130:	strh	ip, [sp, #14]
   1e134:	ldr	r0, [fp, #-12]
   1e138:	mov	r1, r0
   1e13c:	ldr	r2, [fp, #-16]
   1e140:	ldr	r3, [sp, #16]
   1e144:	ldr	ip, [sp, #20]
   1e148:	ldrh	lr, [sp, #14]
   1e14c:	uxth	lr, lr
   1e150:	mov	r4, sp
   1e154:	str	lr, [r4]
   1e158:	str	r1, [sp, #8]
   1e15c:	mov	r1, r2
   1e160:	mov	r2, r3
   1e164:	mov	r3, ip
   1e168:	bl	26d1c <main@@Base+0x3d64>
   1e16c:	ldr	r1, [sp, #8]
   1e170:	str	r0, [sp, #4]
   1e174:	mov	r0, r1
   1e178:	ldr	r1, [sp, #4]
   1e17c:	bl	260f4 <main@@Base+0x313c>
   1e180:	sub	sp, fp, #8
   1e184:	pop	{r4, sl, fp, pc}
   1e188:	push	{fp, lr}
   1e18c:	mov	fp, sp
   1e190:	sub	sp, sp, #16
   1e194:	str	r0, [fp, #-4]
   1e198:	str	r1, [sp, #8]
   1e19c:	ldr	r0, [sp, #8]
   1e1a0:	cmp	r0, #0
   1e1a4:	beq	1e1dc <test_create_add_field@@Base+0x230>
   1e1a8:	ldr	r0, [fp, #-4]
   1e1ac:	movw	r1, #12
   1e1b0:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   1e1b4:	str	r0, [sp, #4]
   1e1b8:	movw	r1, #0
   1e1bc:	cmp	r0, r1
   1e1c0:	beq	1e1dc <test_create_add_field@@Base+0x230>
   1e1c4:	ldr	r0, [sp, #8]
   1e1c8:	ldr	r1, [sp, #4]
   1e1cc:	str	r0, [r1]
   1e1d0:	movw	r0, #0
   1e1d4:	str	r0, [sp]
   1e1d8:	b	1e1e8 <test_create_add_field@@Base+0x23c>
   1e1dc:	mvn	r0, #0
   1e1e0:	str	r0, [sp]
   1e1e4:	b	1e1e8 <test_create_add_field@@Base+0x23c>
   1e1e8:	ldr	r0, [sp]
   1e1ec:	mov	sp, fp
   1e1f0:	pop	{fp, pc}
   1e1f4:	push	{fp, lr}
   1e1f8:	mov	fp, sp
   1e1fc:	sub	sp, sp, #16
   1e200:	str	r0, [fp, #-4]
   1e204:	movw	r0, #0
   1e208:	strh	r0, [fp, #-6]
   1e20c:	ldr	r0, [fp, #-4]
   1e210:	movw	r1, #0
   1e214:	cmp	r0, r1
   1e218:	beq	1e224 <test_create_add_field@@Base+0x278>
   1e21c:	b	1e220 <test_create_add_field@@Base+0x274>
   1e220:	b	1e244 <test_create_add_field@@Base+0x298>
   1e224:	ldr	r0, [pc, #136]	; 1e2b4 <test_create_add_field@@Base+0x308>
   1e228:	add	r0, pc, r0
   1e22c:	ldr	r1, [pc, #132]	; 1e2b8 <test_create_add_field@@Base+0x30c>
   1e230:	add	r1, pc, r1
   1e234:	ldr	r2, [pc, #128]	; 1e2bc <test_create_add_field@@Base+0x310>
   1e238:	add	r3, pc, r2
   1e23c:	movw	r2, #716	; 0x2cc
   1e240:	bl	12e68 <__assert_fail@plt>
   1e244:	mov	r0, #12
   1e248:	strh	r0, [sp, #8]
   1e24c:	ldr	r0, [fp, #-4]
   1e250:	str	r0, [sp]
   1e254:	bl	2344c <main@@Base+0x494>
   1e258:	ldr	r1, [sp]
   1e25c:	sub	r0, r1, r0
   1e260:	str	r0, [sp, #4]
   1e264:	ldr	r0, [sp, #4]
   1e268:	bl	23470 <main@@Base+0x4b8>
   1e26c:	ldrh	r1, [sp, #8]
   1e270:	add	r1, r1, #3
   1e274:	lsl	r1, r1, #1
   1e278:	cmp	r0, r1
   1e27c:	bcc	1e298 <test_create_add_field@@Base+0x2ec>
   1e280:	ldr	r0, [sp, #4]
   1e284:	ldrh	r1, [sp, #8]
   1e288:	add	r0, r0, r1, lsl #1
   1e28c:	add	r0, r0, #4
   1e290:	bl	23470 <main@@Base+0x4b8>
   1e294:	strh	r0, [fp, #-6]
   1e298:	ldrh	r0, [fp, #-6]
   1e29c:	cmp	r0, #0
   1e2a0:	movw	r0, #0
   1e2a4:	movne	r0, #1
   1e2a8:	and	r0, r0, #1
   1e2ac:	mov	sp, fp
   1e2b0:	pop	{fp, pc}
   1e2b4:	andeq	r5, r1, r5, asr #27
   1e2b8:	andeq	r5, r1, r3, ror #27
   1e2bc:	andeq	r7, r1, r7, asr #32
   1e2c0:	push	{fp, lr}
   1e2c4:	mov	fp, sp
   1e2c8:	sub	sp, sp, #32
   1e2cc:	str	r0, [fp, #-4]
   1e2d0:	movw	r0, #0
   1e2d4:	strh	r0, [fp, #-6]
   1e2d8:	ldr	r0, [fp, #-4]
   1e2dc:	movw	r1, #0
   1e2e0:	cmp	r0, r1
   1e2e4:	beq	1e2f0 <test_create_add_field@@Base+0x344>
   1e2e8:	b	1e2ec <test_create_add_field@@Base+0x340>
   1e2ec:	b	1e310 <test_create_add_field@@Base+0x364>
   1e2f0:	ldr	r0, [pc, #196]	; 1e3bc <test_create_add_field@@Base+0x410>
   1e2f4:	add	r0, pc, r0
   1e2f8:	ldr	r1, [pc, #192]	; 1e3c0 <test_create_add_field@@Base+0x414>
   1e2fc:	add	r1, pc, r1
   1e300:	ldr	r2, [pc, #188]	; 1e3c4 <test_create_add_field@@Base+0x418>
   1e304:	add	r3, pc, r2
   1e308:	movw	r2, #608	; 0x260
   1e30c:	bl	12e68 <__assert_fail@plt>
   1e310:	mov	r0, #1
   1e314:	strh	r0, [fp, #-8]
   1e318:	ldr	r0, [fp, #-4]
   1e31c:	str	r0, [sp, #16]
   1e320:	bl	2344c <main@@Base+0x494>
   1e324:	ldr	r1, [sp, #16]
   1e328:	sub	r0, r1, r0
   1e32c:	str	r0, [fp, #-12]
   1e330:	ldr	r0, [fp, #-12]
   1e334:	bl	23470 <main@@Base+0x4b8>
   1e338:	ldrh	r1, [fp, #-8]
   1e33c:	add	r1, r1, #3
   1e340:	lsl	r1, r1, #1
   1e344:	cmp	r0, r1
   1e348:	bcc	1e364 <test_create_add_field@@Base+0x3b8>
   1e34c:	ldr	r0, [fp, #-12]
   1e350:	ldrh	r1, [fp, #-8]
   1e354:	add	r0, r0, r1, lsl #1
   1e358:	add	r0, r0, #4
   1e35c:	bl	23470 <main@@Base+0x4b8>
   1e360:	strh	r0, [fp, #-6]
   1e364:	ldrh	r0, [fp, #-6]
   1e368:	cmp	r0, #0
   1e36c:	beq	1e38c <test_create_add_field@@Base+0x3e0>
   1e370:	ldr	r0, [fp, #-4]
   1e374:	ldrh	r1, [fp, #-6]
   1e378:	add	r0, r0, r1
   1e37c:	bl	24374 <main@@Base+0x13bc>
   1e380:	str	r0, [sp, #12]
   1e384:	str	r1, [sp, #8]
   1e388:	b	1e3a0 <test_create_add_field@@Base+0x3f4>
   1e38c:	mov	r0, #0
   1e390:	mov	r1, r0
   1e394:	str	r1, [sp, #12]
   1e398:	str	r0, [sp, #8]
   1e39c:	b	1e3a0 <test_create_add_field@@Base+0x3f4>
   1e3a0:	ldr	r0, [sp, #8]
   1e3a4:	ldr	r1, [sp, #12]
   1e3a8:	str	r0, [sp, #4]
   1e3ac:	mov	r0, r1
   1e3b0:	ldr	r1, [sp, #4]
   1e3b4:	mov	sp, fp
   1e3b8:	pop	{fp, pc}
   1e3bc:	strdeq	r5, [r1], -r9
   1e3c0:	andeq	r5, r1, r7, lsl sp
   1e3c4:	andeq	r6, r1, r7, asr #31

0001e3c8 <test_union_vector@@Base>:
   1e3c8:	push	{fp, lr}
   1e3cc:	mov	fp, sp
   1e3d0:	sub	sp, sp, #168	; 0xa8
   1e3d4:	str	r0, [fp, #-8]
   1e3d8:	mvn	r0, #0
   1e3dc:	str	r0, [fp, #-28]	; 0xffffffe4
   1e3e0:	ldr	r0, [fp, #-8]
   1e3e4:	bl	286d4 <flatcc_builder_reset@@Base>
   1e3e8:	ldr	r1, [fp, #-8]
   1e3ec:	str	r0, [sp, #48]	; 0x30
   1e3f0:	mov	r0, r1
   1e3f4:	bl	18cdc <gen_monster@@Base+0x880>
   1e3f8:	ldr	r1, [fp, #-8]
   1e3fc:	ldr	r2, [pc, #868]	; 1e768 <test_union_vector@@Base+0x3a0>
   1e400:	add	r2, pc, r2
   1e404:	str	r0, [sp, #44]	; 0x2c
   1e408:	mov	r0, r1
   1e40c:	mov	r1, r2
   1e410:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   1e414:	ldr	r1, [fp, #-8]
   1e418:	mov	r2, sp
   1e41c:	mov	r3, #2
   1e420:	str	r3, [r2]
   1e424:	str	r0, [sp, #40]	; 0x28
   1e428:	mov	r0, r1
   1e42c:	mov	r1, r3
   1e430:	mov	r2, r3
   1e434:	bl	1e76c <test_union_vector@@Base+0x3a4>
   1e438:	str	r0, [fp, #-52]	; 0xffffffcc
   1e43c:	ldr	r0, [fp, #-8]
   1e440:	bl	1e814 <test_union_vector@@Base+0x44c>
   1e444:	ldr	r1, [fp, #-8]
   1e448:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1e44c:	add	r3, sp, #76	; 0x4c
   1e450:	str	r0, [sp, #36]	; 0x24
   1e454:	mov	r0, r3
   1e458:	str	r1, [sp, #32]
   1e45c:	mov	r1, r2
   1e460:	bl	1e864 <test_union_vector@@Base+0x49c>
   1e464:	ldr	r1, [sp, #76]	; 0x4c
   1e468:	ldr	r2, [sp, #80]	; 0x50
   1e46c:	ldr	r0, [sp, #32]
   1e470:	bl	1e834 <test_union_vector@@Base+0x46c>
   1e474:	ldr	r1, [fp, #-8]
   1e478:	add	r2, sp, #68	; 0x44
   1e47c:	str	r0, [sp, #28]
   1e480:	mov	r0, r2
   1e484:	bl	1e884 <test_union_vector@@Base+0x4bc>
   1e488:	vldr	d16, [sp, #68]	; 0x44
   1e48c:	vstr	d16, [fp, #-48]	; 0xffffffd0
   1e490:	ldr	r0, [fp, #-8]
   1e494:	bl	1e8a4 <test_union_vector@@Base+0x4dc>
   1e498:	ldr	r1, [fp, #-8]
   1e49c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1e4a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1e4a4:	str	r0, [sp, #24]
   1e4a8:	mov	r0, r1
   1e4ac:	mov	r1, r2
   1e4b0:	mov	r2, r3
   1e4b4:	bl	1e8c4 <test_union_vector@@Base+0x4fc>
   1e4b8:	ldr	r1, [fp, #-8]
   1e4bc:	str	r0, [sp, #20]
   1e4c0:	mov	r0, r1
   1e4c4:	bl	1e998 <test_union_vector@@Base+0x5d0>
   1e4c8:	ldr	r1, [fp, #-8]
   1e4cc:	str	r0, [sp, #16]
   1e4d0:	mov	r0, r1
   1e4d4:	bl	19880 <gen_monster@@Base+0x1424>
   1e4d8:	ldr	r1, [fp, #-8]
   1e4dc:	str	r0, [sp, #12]
   1e4e0:	mov	r0, r1
   1e4e4:	sub	r1, fp, #16
   1e4e8:	bl	2db44 <flatcc_builder_finalize_aligned_buffer@@Base>
   1e4ec:	str	r0, [fp, #-12]
   1e4f0:	ldr	r0, [fp, #-12]
   1e4f4:	ldr	r1, [fp, #-16]
   1e4f8:	bl	14a10 <test_empty_monster@@Base+0x314>
   1e4fc:	str	r0, [fp, #-28]	; 0xffffffe4
   1e500:	cmp	r0, #0
   1e504:	beq	1e534 <test_union_vector@@Base+0x16c>
   1e508:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1e50c:	bl	2ebb4 <flatcc_verify_error_string@@Base>
   1e510:	ldr	r1, [pc, #588]	; 1e764 <test_union_vector@@Base+0x39c>
   1e514:	add	r1, pc, r1
   1e518:	str	r0, [sp, #8]
   1e51c:	mov	r0, r1
   1e520:	ldr	r1, [sp, #8]
   1e524:	bl	12d9c <printf@plt>
   1e528:	mvn	r1, #0
   1e52c:	str	r1, [fp, #-4]
   1e530:	b	1e734 <test_union_vector@@Base+0x36c>
   1e534:	ldr	r0, [fp, #-12]
   1e538:	bl	131f4 <verify_empty_monster@@Base+0x28c>
   1e53c:	str	r0, [fp, #-32]	; 0xffffffe0
   1e540:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e544:	bl	17bd4 <verify_monster@@Base+0x2208>
   1e548:	and	r0, r0, #255	; 0xff
   1e54c:	cmp	r0, #4
   1e550:	beq	1e564 <test_union_vector@@Base+0x19c>
   1e554:	ldr	r0, [pc, #516]	; 1e760 <test_union_vector@@Base+0x398>
   1e558:	add	r0, pc, r0
   1e55c:	bl	12d9c <printf@plt>
   1e560:	b	1e724 <test_union_vector@@Base+0x35c>
   1e564:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e568:	bl	17cc8 <verify_monster@@Base+0x22fc>
   1e56c:	str	r0, [sp, #84]	; 0x54
   1e570:	ldr	r0, [sp, #84]	; 0x54
   1e574:	movw	r1, #0
   1e578:	cmp	r0, r1
   1e57c:	beq	1e590 <test_union_vector@@Base+0x1c8>
   1e580:	ldr	r0, [sp, #84]	; 0x54
   1e584:	bl	1e9ec <test_union_vector@@Base+0x624>
   1e588:	cmp	r0, #0
   1e58c:	beq	1e5a0 <test_union_vector@@Base+0x1d8>
   1e590:	ldr	r0, [pc, #452]	; 1e75c <test_union_vector@@Base+0x394>
   1e594:	add	r0, pc, r0
   1e598:	bl	12d9c <printf@plt>
   1e59c:	b	1e724 <test_union_vector@@Base+0x35c>
   1e5a0:	ldr	r0, [sp, #84]	; 0x54
   1e5a4:	bl	1eab8 <test_union_vector@@Base+0x6f0>
   1e5a8:	str	r0, [fp, #-64]	; 0xffffffc0
   1e5ac:	ldr	r0, [sp, #84]	; 0x54
   1e5b0:	bl	1ebc0 <test_union_vector@@Base+0x7f8>
   1e5b4:	str	r0, [fp, #-60]	; 0xffffffc4
   1e5b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1e5bc:	bl	1ecc8 <test_union_vector@@Base+0x900>
   1e5c0:	str	r0, [fp, #-20]	; 0xffffffec
   1e5c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   1e5c8:	cmp	r0, #1
   1e5cc:	beq	1e5e0 <test_union_vector@@Base+0x218>
   1e5d0:	ldr	r0, [pc, #384]	; 1e758 <test_union_vector@@Base+0x390>
   1e5d4:	add	r0, pc, r0
   1e5d8:	bl	12d9c <printf@plt>
   1e5dc:	b	1e724 <test_union_vector@@Base+0x35c>
   1e5e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1e5e4:	movw	r1, #0
   1e5e8:	bl	1ece8 <test_union_vector@@Base+0x920>
   1e5ec:	and	r0, r0, #255	; 0xff
   1e5f0:	cmp	r0, #2
   1e5f4:	beq	1e608 <test_union_vector@@Base+0x240>
   1e5f8:	ldr	r0, [pc, #340]	; 1e754 <test_union_vector@@Base+0x38c>
   1e5fc:	add	r0, pc, r0
   1e600:	bl	12d9c <printf@plt>
   1e604:	b	1e724 <test_union_vector@@Base+0x35c>
   1e608:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1e60c:	movw	r1, #0
   1e610:	bl	1ed60 <test_union_vector@@Base+0x998>
   1e614:	str	r0, [fp, #-56]	; 0xffffffc8
   1e618:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1e61c:	movw	r1, #0
   1e620:	cmp	r0, r1
   1e624:	bne	1e638 <test_union_vector@@Base+0x270>
   1e628:	ldr	r0, [pc, #272]	; 1e740 <test_union_vector@@Base+0x378>
   1e62c:	add	r0, pc, r0
   1e630:	bl	12d9c <printf@plt>
   1e634:	b	1e724 <test_union_vector@@Base+0x35c>
   1e638:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1e63c:	bl	1edf0 <test_union_vector@@Base+0xa28>
   1e640:	sxtb	r0, r0
   1e644:	str	r0, [fp, #-24]	; 0xffffffe8
   1e648:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1e64c:	cmp	r0, #2
   1e650:	beq	1e668 <test_union_vector@@Base+0x2a0>
   1e654:	ldr	r0, [pc, #244]	; 1e750 <test_union_vector@@Base+0x388>
   1e658:	add	r0, pc, r0
   1e65c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1e660:	bl	12d9c <printf@plt>
   1e664:	b	1e724 <test_union_vector@@Base+0x35c>
   1e668:	ldr	r1, [sp, #84]	; 0x54
   1e66c:	add	r0, sp, #60	; 0x3c
   1e670:	bl	1eee4 <test_union_vector@@Base+0xb1c>
   1e674:	vldr	d16, [sp, #60]	; 0x3c
   1e678:	vstr	d16, [fp, #-72]	; 0xffffffb8
   1e67c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1e680:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1e684:	bl	1ef80 <test_union_vector@@Base+0xbb8>
   1e688:	cmp	r0, #1
   1e68c:	beq	1e6a0 <test_union_vector@@Base+0x2d8>
   1e690:	ldr	r0, [pc, #180]	; 1e74c <test_union_vector@@Base+0x384>
   1e694:	add	r0, pc, r0
   1e698:	bl	12d9c <printf@plt>
   1e69c:	b	1e724 <test_union_vector@@Base+0x35c>
   1e6a0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1e6a4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1e6a8:	add	r0, sp, #52	; 0x34
   1e6ac:	mov	r3, #0
   1e6b0:	bl	1efa4 <test_union_vector@@Base+0xbdc>
   1e6b4:	ldr	r0, [sp, #52]	; 0x34
   1e6b8:	str	r0, [fp, #-80]	; 0xffffffb0
   1e6bc:	ldr	r0, [sp, #56]	; 0x38
   1e6c0:	str	r0, [fp, #-76]	; 0xffffffb4
   1e6c4:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1e6c8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1e6cc:	str	r0, [sp, #4]
   1e6d0:	mov	r0, r1
   1e6d4:	movw	r1, #0
   1e6d8:	bl	1ece8 <test_union_vector@@Base+0x920>
   1e6dc:	and	r0, r0, #255	; 0xff
   1e6e0:	ldr	r1, [sp, #4]
   1e6e4:	cmp	r1, r0
   1e6e8:	beq	1e6fc <test_union_vector@@Base+0x334>
   1e6ec:	ldr	r0, [pc, #84]	; 1e748 <test_union_vector@@Base+0x380>
   1e6f0:	add	r0, pc, r0
   1e6f4:	bl	12d9c <printf@plt>
   1e6f8:	b	1e724 <test_union_vector@@Base+0x35c>
   1e6fc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1e700:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1e704:	cmp	r0, r1
   1e708:	beq	1e71c <test_union_vector@@Base+0x354>
   1e70c:	ldr	r0, [pc, #48]	; 1e744 <test_union_vector@@Base+0x37c>
   1e710:	add	r0, pc, r0
   1e714:	bl	12d9c <printf@plt>
   1e718:	b	1e724 <test_union_vector@@Base+0x35c>
   1e71c:	movw	r0, #0
   1e720:	str	r0, [fp, #-28]	; 0xffffffe4
   1e724:	ldr	r0, [fp, #-12]
   1e728:	bl	2dcec <flatcc_builder_aligned_free@@Base>
   1e72c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1e730:	str	r0, [fp, #-4]
   1e734:	ldr	r0, [fp, #-4]
   1e738:	mov	sp, fp
   1e73c:	pop	{fp, pc}
   1e740:	andeq	r4, r1, pc, asr lr
   1e744:	andeq	r4, r1, r8, lsl #28
   1e748:	andeq	r4, r1, lr, lsl #28
   1e74c:	andeq	r4, r1, r5, lsr #28
   1e750:	andeq	r4, r1, r4, asr #28
   1e754:	andeq	r4, r1, r1, ror #28
   1e758:	andeq	r4, r1, r1, ror #28
   1e75c:	andeq	r4, r1, r8, ror lr
   1e760:	muleq	r1, r2, lr
   1e764:	muleq	r1, sl, lr
   1e768:	andeq	r4, r1, r7, lsr #31
   1e76c:	push	{fp, lr}
   1e770:	mov	fp, sp
   1e774:	sub	sp, sp, #16
   1e778:	ldr	ip, [fp, #8]
   1e77c:	str	r0, [sp, #8]
   1e780:	strb	r1, [sp, #7]
   1e784:	strb	r2, [sp, #6]
   1e788:	strb	r3, [sp, #5]
   1e78c:	strb	ip, [sp, #4]
   1e790:	ldr	r0, [sp, #8]
   1e794:	bl	26f38 <main@@Base+0x3f80>
   1e798:	cmp	r0, #0
   1e79c:	bne	1e7f0 <test_union_vector@@Base+0x428>
   1e7a0:	ldr	r0, [sp, #8]
   1e7a4:	ldrsb	r1, [sp, #7]
   1e7a8:	bl	26f5c <main@@Base+0x3fa4>
   1e7ac:	cmp	r0, #0
   1e7b0:	bne	1e7f0 <test_union_vector@@Base+0x428>
   1e7b4:	ldr	r0, [sp, #8]
   1e7b8:	ldrsb	r1, [sp, #6]
   1e7bc:	bl	26fdc <main@@Base+0x4024>
   1e7c0:	cmp	r0, #0
   1e7c4:	bne	1e7f0 <test_union_vector@@Base+0x428>
   1e7c8:	ldr	r0, [sp, #8]
   1e7cc:	ldrb	r1, [sp, #5]
   1e7d0:	bl	27060 <main@@Base+0x40a8>
   1e7d4:	cmp	r0, #0
   1e7d8:	bne	1e7f0 <test_union_vector@@Base+0x428>
   1e7dc:	ldr	r0, [sp, #8]
   1e7e0:	ldrb	r1, [sp, #4]
   1e7e4:	bl	270e0 <main@@Base+0x4128>
   1e7e8:	cmp	r0, #0
   1e7ec:	beq	1e7fc <test_union_vector@@Base+0x434>
   1e7f0:	movw	r0, #0
   1e7f4:	str	r0, [fp, #-4]
   1e7f8:	b	1e808 <test_union_vector@@Base+0x440>
   1e7fc:	ldr	r0, [sp, #8]
   1e800:	bl	27160 <main@@Base+0x41a8>
   1e804:	str	r0, [fp, #-4]
   1e808:	ldr	r0, [fp, #-4]
   1e80c:	mov	sp, fp
   1e810:	pop	{fp, pc}
   1e814:	push	{fp, lr}
   1e818:	mov	fp, sp
   1e81c:	sub	sp, sp, #8
   1e820:	str	r0, [sp, #4]
   1e824:	ldr	r0, [sp, #4]
   1e828:	bl	2cad0 <flatcc_builder_start_union_vector@@Base>
   1e82c:	mov	sp, fp
   1e830:	pop	{fp, pc}
   1e834:	push	{fp, lr}
   1e838:	mov	fp, sp
   1e83c:	sub	sp, sp, #16
   1e840:	str	r1, [sp, #8]
   1e844:	str	r2, [sp, #12]
   1e848:	str	r0, [sp, #4]
   1e84c:	ldr	r0, [sp, #4]
   1e850:	ldr	r1, [sp, #8]
   1e854:	ldr	r2, [sp, #12]
   1e858:	bl	2ce4c <flatcc_builder_union_vector_push@@Base>
   1e85c:	mov	sp, fp
   1e860:	pop	{fp, pc}
   1e864:	sub	sp, sp, #4
   1e868:	str	r1, [sp]
   1e86c:	movw	r1, #2
   1e870:	strb	r1, [r0]
   1e874:	ldr	r1, [sp]
   1e878:	str	r1, [r0, #4]
   1e87c:	add	sp, sp, #4
   1e880:	bx	lr
   1e884:	push	{fp, lr}
   1e888:	mov	fp, sp
   1e88c:	sub	sp, sp, #8
   1e890:	str	r1, [sp, #4]
   1e894:	ldr	r1, [sp, #4]
   1e898:	bl	2cb54 <flatcc_builder_end_union_vector@@Base>
   1e89c:	mov	sp, fp
   1e8a0:	pop	{fp, pc}
   1e8a4:	push	{fp, lr}
   1e8a8:	mov	fp, sp
   1e8ac:	sub	sp, sp, #8
   1e8b0:	str	r0, [sp, #4]
   1e8b4:	ldr	r0, [sp, #4]
   1e8b8:	bl	271d0 <main@@Base+0x4218>
   1e8bc:	mov	sp, fp
   1e8c0:	pop	{fp, pc}
   1e8c4:	push	{fp, lr}
   1e8c8:	mov	fp, sp
   1e8cc:	sub	sp, sp, #24
   1e8d0:	str	r1, [sp, #12]
   1e8d4:	str	r2, [sp, #16]
   1e8d8:	str	r0, [sp, #8]
   1e8dc:	ldr	r0, [sp, #12]
   1e8e0:	cmp	r0, #0
   1e8e4:	beq	1e8f4 <test_union_vector@@Base+0x52c>
   1e8e8:	ldr	r0, [sp, #16]
   1e8ec:	cmp	r0, #0
   1e8f0:	bne	1e91c <test_union_vector@@Base+0x554>
   1e8f4:	ldr	r0, [sp, #12]
   1e8f8:	ldr	r1, [sp, #16]
   1e8fc:	cmp	r0, r1
   1e900:	movw	r0, #0
   1e904:	moveq	r0, #1
   1e908:	tst	r0, #1
   1e90c:	movw	r0, #0
   1e910:	mvneq	r0, #0
   1e914:	str	r0, [fp, #-4]
   1e918:	b	1e98c <test_union_vector@@Base+0x5c4>
   1e91c:	ldr	r0, [sp, #8]
   1e920:	movw	r1, #2
   1e924:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   1e928:	str	r0, [sp, #4]
   1e92c:	movw	r1, #0
   1e930:	cmp	r0, r1
   1e934:	bne	1e944 <test_union_vector@@Base+0x57c>
   1e938:	mvn	r0, #0
   1e93c:	str	r0, [fp, #-4]
   1e940:	b	1e98c <test_union_vector@@Base+0x5c4>
   1e944:	ldr	r0, [sp, #12]
   1e948:	ldr	r1, [sp, #4]
   1e94c:	str	r0, [r1]
   1e950:	ldr	r0, [sp, #8]
   1e954:	movw	r1, #3
   1e958:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   1e95c:	str	r0, [sp, #4]
   1e960:	movw	r1, #0
   1e964:	cmp	r0, r1
   1e968:	bne	1e978 <test_union_vector@@Base+0x5b0>
   1e96c:	mvn	r0, #0
   1e970:	str	r0, [fp, #-4]
   1e974:	b	1e98c <test_union_vector@@Base+0x5c4>
   1e978:	ldr	r0, [sp, #16]
   1e97c:	ldr	r1, [sp, #4]
   1e980:	str	r0, [r1]
   1e984:	movw	r0, #0
   1e988:	str	r0, [fp, #-4]
   1e98c:	ldr	r0, [fp, #-4]
   1e990:	mov	sp, fp
   1e994:	pop	{fp, pc}
   1e998:	push	{fp, lr}
   1e99c:	mov	fp, sp
   1e9a0:	sub	sp, sp, #16
   1e9a4:	str	r0, [fp, #-4]
   1e9a8:	ldr	r0, [fp, #-4]
   1e9ac:	bl	271f4 <main@@Base+0x423c>
   1e9b0:	str	r0, [sp, #8]
   1e9b4:	ldr	r0, [sp, #8]
   1e9b8:	cmp	r0, #0
   1e9bc:	beq	1e9d4 <test_union_vector@@Base+0x60c>
   1e9c0:	ldr	r0, [fp, #-4]
   1e9c4:	ldr	r1, [sp, #8]
   1e9c8:	bl	27264 <main@@Base+0x42ac>
   1e9cc:	str	r0, [sp, #4]
   1e9d0:	b	1e9e0 <test_union_vector@@Base+0x618>
   1e9d4:	mvn	r0, #0
   1e9d8:	str	r0, [sp, #4]
   1e9dc:	b	1e9e0 <test_union_vector@@Base+0x618>
   1e9e0:	ldr	r0, [sp, #4]
   1e9e4:	mov	sp, fp
   1e9e8:	pop	{fp, pc}
   1e9ec:	push	{fp, lr}
   1e9f0:	mov	fp, sp
   1e9f4:	sub	sp, sp, #16
   1e9f8:	str	r0, [fp, #-4]
   1e9fc:	movw	r0, #0
   1ea00:	strh	r0, [fp, #-6]
   1ea04:	ldr	r0, [fp, #-4]
   1ea08:	movw	r1, #0
   1ea0c:	cmp	r0, r1
   1ea10:	beq	1ea1c <test_union_vector@@Base+0x654>
   1ea14:	b	1ea18 <test_union_vector@@Base+0x650>
   1ea18:	b	1ea3c <test_union_vector@@Base+0x674>
   1ea1c:	ldr	r0, [pc, #136]	; 1eaac <test_union_vector@@Base+0x6e4>
   1ea20:	add	r0, pc, r0
   1ea24:	ldr	r1, [pc, #132]	; 1eab0 <test_union_vector@@Base+0x6e8>
   1ea28:	add	r1, pc, r1
   1ea2c:	ldr	r2, [pc, #128]	; 1eab4 <test_union_vector@@Base+0x6ec>
   1ea30:	add	r3, pc, r2
   1ea34:	movw	r2, #621	; 0x26d
   1ea38:	bl	12e68 <__assert_fail@plt>
   1ea3c:	mov	r0, #3
   1ea40:	strh	r0, [sp, #8]
   1ea44:	ldr	r0, [fp, #-4]
   1ea48:	str	r0, [sp]
   1ea4c:	bl	2344c <main@@Base+0x494>
   1ea50:	ldr	r1, [sp]
   1ea54:	sub	r0, r1, r0
   1ea58:	str	r0, [sp, #4]
   1ea5c:	ldr	r0, [sp, #4]
   1ea60:	bl	23470 <main@@Base+0x4b8>
   1ea64:	ldrh	r1, [sp, #8]
   1ea68:	add	r1, r1, #3
   1ea6c:	lsl	r1, r1, #1
   1ea70:	cmp	r0, r1
   1ea74:	bcc	1ea90 <test_union_vector@@Base+0x6c8>
   1ea78:	ldr	r0, [sp, #4]
   1ea7c:	ldrh	r1, [sp, #8]
   1ea80:	add	r0, r0, r1, lsl #1
   1ea84:	add	r0, r0, #4
   1ea88:	bl	23470 <main@@Base+0x4b8>
   1ea8c:	strh	r0, [fp, #-6]
   1ea90:	ldrh	r0, [fp, #-6]
   1ea94:	cmp	r0, #0
   1ea98:	movw	r0, #0
   1ea9c:	movne	r0, #1
   1eaa0:	and	r0, r0, #1
   1eaa4:	mov	sp, fp
   1eaa8:	pop	{fp, pc}
   1eaac:	andeq	r5, r1, sp, asr #11
   1eab0:	andeq	r5, r1, fp, ror #11
   1eab4:	strdeq	r6, [r1], -sl
   1eab8:	push	{fp, lr}
   1eabc:	mov	fp, sp
   1eac0:	sub	sp, sp, #32
   1eac4:	str	r0, [fp, #-8]
   1eac8:	movw	r0, #0
   1eacc:	strh	r0, [fp, #-14]
   1ead0:	ldr	r0, [fp, #-8]
   1ead4:	movw	r1, #0
   1ead8:	cmp	r0, r1
   1eadc:	beq	1eae8 <test_union_vector@@Base+0x720>
   1eae0:	b	1eae4 <test_union_vector@@Base+0x71c>
   1eae4:	b	1eb08 <test_union_vector@@Base+0x740>
   1eae8:	ldr	r0, [pc, #196]	; 1ebb4 <test_union_vector@@Base+0x7ec>
   1eaec:	add	r0, pc, r0
   1eaf0:	ldr	r1, [pc, #192]	; 1ebb8 <test_union_vector@@Base+0x7f0>
   1eaf4:	add	r1, pc, r1
   1eaf8:	ldr	r2, [pc, #188]	; 1ebbc <test_union_vector@@Base+0x7f4>
   1eafc:	add	r3, pc, r2
   1eb00:	movw	r2, #621	; 0x26d
   1eb04:	bl	12e68 <__assert_fail@plt>
   1eb08:	mov	r0, #2
   1eb0c:	strh	r0, [sp, #16]
   1eb10:	ldr	r0, [fp, #-8]
   1eb14:	str	r0, [sp, #8]
   1eb18:	bl	2344c <main@@Base+0x494>
   1eb1c:	ldr	r1, [sp, #8]
   1eb20:	sub	r0, r1, r0
   1eb24:	str	r0, [sp, #12]
   1eb28:	ldr	r0, [sp, #12]
   1eb2c:	bl	23470 <main@@Base+0x4b8>
   1eb30:	ldrh	r1, [sp, #16]
   1eb34:	add	r1, r1, #3
   1eb38:	lsl	r1, r1, #1
   1eb3c:	cmp	r0, r1
   1eb40:	bcc	1eb5c <test_union_vector@@Base+0x794>
   1eb44:	ldr	r0, [sp, #12]
   1eb48:	ldrh	r1, [sp, #16]
   1eb4c:	add	r0, r0, r1, lsl #1
   1eb50:	add	r0, r0, #4
   1eb54:	bl	23470 <main@@Base+0x4b8>
   1eb58:	strh	r0, [fp, #-14]
   1eb5c:	ldrsh	r0, [fp, #-14]
   1eb60:	cmp	r0, #0
   1eb64:	beq	1eba0 <test_union_vector@@Base+0x7d8>
   1eb68:	ldr	r0, [fp, #-8]
   1eb6c:	ldrh	r1, [fp, #-14]
   1eb70:	add	r0, r0, r1
   1eb74:	str	r0, [fp, #-12]
   1eb78:	ldr	r0, [fp, #-12]
   1eb7c:	add	r0, r0, #4
   1eb80:	ldr	r1, [fp, #-12]
   1eb84:	str	r0, [sp, #4]
   1eb88:	mov	r0, r1
   1eb8c:	bl	23414 <main@@Base+0x45c>
   1eb90:	ldr	r1, [sp, #4]
   1eb94:	add	r0, r1, r0
   1eb98:	str	r0, [fp, #-4]
   1eb9c:	b	1eba8 <test_union_vector@@Base+0x7e0>
   1eba0:	movw	r0, #0
   1eba4:	str	r0, [fp, #-4]
   1eba8:	ldr	r0, [fp, #-4]
   1ebac:	mov	sp, fp
   1ebb0:	pop	{fp, pc}
   1ebb4:	andeq	r5, r1, r1, lsl #10
   1ebb8:	andeq	r5, r1, pc, lsl r5
   1ebbc:	andeq	r6, r1, r4, ror sl
   1ebc0:	push	{fp, lr}
   1ebc4:	mov	fp, sp
   1ebc8:	sub	sp, sp, #32
   1ebcc:	str	r0, [fp, #-8]
   1ebd0:	movw	r0, #0
   1ebd4:	strh	r0, [fp, #-14]
   1ebd8:	ldr	r0, [fp, #-8]
   1ebdc:	movw	r1, #0
   1ebe0:	cmp	r0, r1
   1ebe4:	beq	1ebf0 <test_union_vector@@Base+0x828>
   1ebe8:	b	1ebec <test_union_vector@@Base+0x824>
   1ebec:	b	1ec10 <test_union_vector@@Base+0x848>
   1ebf0:	ldr	r0, [pc, #196]	; 1ecbc <test_union_vector@@Base+0x8f4>
   1ebf4:	add	r0, pc, r0
   1ebf8:	ldr	r1, [pc, #192]	; 1ecc0 <test_union_vector@@Base+0x8f8>
   1ebfc:	add	r1, pc, r1
   1ec00:	ldr	r2, [pc, #188]	; 1ecc4 <test_union_vector@@Base+0x8fc>
   1ec04:	add	r3, pc, r2
   1ec08:	movw	r2, #621	; 0x26d
   1ec0c:	bl	12e68 <__assert_fail@plt>
   1ec10:	mov	r0, #3
   1ec14:	strh	r0, [sp, #16]
   1ec18:	ldr	r0, [fp, #-8]
   1ec1c:	str	r0, [sp, #8]
   1ec20:	bl	2344c <main@@Base+0x494>
   1ec24:	ldr	r1, [sp, #8]
   1ec28:	sub	r0, r1, r0
   1ec2c:	str	r0, [sp, #12]
   1ec30:	ldr	r0, [sp, #12]
   1ec34:	bl	23470 <main@@Base+0x4b8>
   1ec38:	ldrh	r1, [sp, #16]
   1ec3c:	add	r1, r1, #3
   1ec40:	lsl	r1, r1, #1
   1ec44:	cmp	r0, r1
   1ec48:	bcc	1ec64 <test_union_vector@@Base+0x89c>
   1ec4c:	ldr	r0, [sp, #12]
   1ec50:	ldrh	r1, [sp, #16]
   1ec54:	add	r0, r0, r1, lsl #1
   1ec58:	add	r0, r0, #4
   1ec5c:	bl	23470 <main@@Base+0x4b8>
   1ec60:	strh	r0, [fp, #-14]
   1ec64:	ldrsh	r0, [fp, #-14]
   1ec68:	cmp	r0, #0
   1ec6c:	beq	1eca8 <test_union_vector@@Base+0x8e0>
   1ec70:	ldr	r0, [fp, #-8]
   1ec74:	ldrh	r1, [fp, #-14]
   1ec78:	add	r0, r0, r1
   1ec7c:	str	r0, [fp, #-12]
   1ec80:	ldr	r0, [fp, #-12]
   1ec84:	add	r0, r0, #4
   1ec88:	ldr	r1, [fp, #-12]
   1ec8c:	str	r0, [sp, #4]
   1ec90:	mov	r0, r1
   1ec94:	bl	23414 <main@@Base+0x45c>
   1ec98:	ldr	r1, [sp, #4]
   1ec9c:	add	r0, r1, r0
   1eca0:	str	r0, [fp, #-4]
   1eca4:	b	1ecb0 <test_union_vector@@Base+0x8e8>
   1eca8:	movw	r0, #0
   1ecac:	str	r0, [fp, #-4]
   1ecb0:	ldr	r0, [fp, #-4]
   1ecb4:	mov	sp, fp
   1ecb8:	pop	{fp, pc}
   1ecbc:	strdeq	r5, [r1], -r9
   1ecc0:	andeq	r5, r1, r7, lsl r4
   1ecc4:	andeq	r6, r1, r1, asr #19
   1ecc8:	push	{fp, lr}
   1eccc:	mov	fp, sp
   1ecd0:	sub	sp, sp, #8
   1ecd4:	str	r0, [sp, #4]
   1ecd8:	ldr	r0, [sp, #4]
   1ecdc:	bl	25bb8 <main@@Base+0x2c00>
   1ece0:	mov	sp, fp
   1ece4:	pop	{fp, pc}
   1ece8:	push	{fp, lr}
   1ecec:	mov	fp, sp
   1ecf0:	sub	sp, sp, #8
   1ecf4:	str	r0, [sp, #4]
   1ecf8:	str	r1, [sp]
   1ecfc:	ldr	r0, [sp, #4]
   1ed00:	bl	25bb8 <main@@Base+0x2c00>
   1ed04:	ldr	r1, [sp]
   1ed08:	cmp	r0, r1
   1ed0c:	bls	1ed18 <test_union_vector@@Base+0x950>
   1ed10:	b	1ed14 <test_union_vector@@Base+0x94c>
   1ed14:	b	1ed38 <test_union_vector@@Base+0x970>
   1ed18:	ldr	r0, [pc, #52]	; 1ed54 <test_union_vector@@Base+0x98c>
   1ed1c:	add	r0, pc, r0
   1ed20:	ldr	r1, [pc, #48]	; 1ed58 <test_union_vector@@Base+0x990>
   1ed24:	add	r1, pc, r1
   1ed28:	ldr	r2, [pc, #44]	; 1ed5c <test_union_vector@@Base+0x994>
   1ed2c:	add	r3, pc, r2
   1ed30:	movw	r2, #405	; 0x195
   1ed34:	bl	12e68 <__assert_fail@plt>
   1ed38:	ldr	r0, [sp, #4]
   1ed3c:	ldr	r1, [sp]
   1ed40:	add	r0, r0, r1
   1ed44:	bl	272c8 <main@@Base+0x4310>
   1ed48:	and	r0, r0, #255	; 0xff
   1ed4c:	mov	sp, fp
   1ed50:	pop	{fp, pc}
   1ed54:	andeq	r5, r1, ip, ror #25
   1ed58:	andeq	r5, r1, fp, lsl sp
   1ed5c:	andeq	r6, r1, sl, ror #17
   1ed60:	push	{fp, lr}
   1ed64:	mov	fp, sp
   1ed68:	sub	sp, sp, #16
   1ed6c:	str	r0, [fp, #-4]
   1ed70:	str	r1, [sp, #8]
   1ed74:	ldr	r0, [fp, #-4]
   1ed78:	ldr	r1, [sp, #8]
   1ed7c:	add	r0, r0, r1, lsl #2
   1ed80:	str	r0, [sp, #4]
   1ed84:	ldr	r0, [fp, #-4]
   1ed88:	bl	25bb8 <main@@Base+0x2c00>
   1ed8c:	ldr	r1, [sp, #8]
   1ed90:	cmp	r0, r1
   1ed94:	bls	1eda0 <test_union_vector@@Base+0x9d8>
   1ed98:	b	1ed9c <test_union_vector@@Base+0x9d4>
   1ed9c:	b	1edc0 <test_union_vector@@Base+0x9f8>
   1eda0:	ldr	r0, [pc, #60]	; 1ede4 <test_union_vector@@Base+0xa1c>
   1eda4:	add	r0, pc, r0
   1eda8:	ldr	r1, [pc, #56]	; 1ede8 <test_union_vector@@Base+0xa20>
   1edac:	add	r1, pc, r1
   1edb0:	ldr	r2, [pc, #52]	; 1edec <test_union_vector@@Base+0xa24>
   1edb4:	add	r3, pc, r2
   1edb8:	movw	r2, #117	; 0x75
   1edbc:	bl	12e68 <__assert_fail@plt>
   1edc0:	ldr	r0, [sp, #4]
   1edc4:	ldr	r1, [sp, #4]
   1edc8:	str	r0, [sp]
   1edcc:	mov	r0, r1
   1edd0:	bl	23414 <main@@Base+0x45c>
   1edd4:	ldr	r1, [sp]
   1edd8:	add	r0, r1, r0
   1eddc:	mov	sp, fp
   1ede0:	pop	{fp, pc}
   1ede4:	andeq	r5, r1, r4, ror #24
   1ede8:	muleq	r1, r3, ip
   1edec:			; <UNDEFINED> instruction: 0x000168bf
   1edf0:	push	{fp, lr}
   1edf4:	mov	fp, sp
   1edf8:	sub	sp, sp, #24
   1edfc:	str	r0, [fp, #-4]
   1ee00:	movw	r0, #0
   1ee04:	strh	r0, [fp, #-6]
   1ee08:	ldr	r0, [fp, #-4]
   1ee0c:	movw	r1, #0
   1ee10:	cmp	r0, r1
   1ee14:	beq	1ee20 <test_union_vector@@Base+0xa58>
   1ee18:	b	1ee1c <test_union_vector@@Base+0xa54>
   1ee1c:	b	1ee40 <test_union_vector@@Base+0xa78>
   1ee20:	ldr	r0, [pc, #176]	; 1eed8 <test_union_vector@@Base+0xb10>
   1ee24:	add	r0, pc, r0
   1ee28:	ldr	r1, [pc, #172]	; 1eedc <test_union_vector@@Base+0xb14>
   1ee2c:	add	r1, pc, r1
   1ee30:	ldr	r2, [pc, #168]	; 1eee0 <test_union_vector@@Base+0xb18>
   1ee34:	add	r3, pc, r2
   1ee38:	movw	r2, #579	; 0x243
   1ee3c:	bl	12e68 <__assert_fail@plt>
   1ee40:	mov	r0, #0
   1ee44:	strh	r0, [fp, #-8]
   1ee48:	ldr	r0, [fp, #-4]
   1ee4c:	str	r0, [sp, #8]
   1ee50:	bl	2344c <main@@Base+0x494>
   1ee54:	ldr	r1, [sp, #8]
   1ee58:	sub	r0, r1, r0
   1ee5c:	str	r0, [sp, #12]
   1ee60:	ldr	r0, [sp, #12]
   1ee64:	bl	23470 <main@@Base+0x4b8>
   1ee68:	ldrh	r1, [fp, #-8]
   1ee6c:	add	r1, r1, #3
   1ee70:	lsl	r1, r1, #1
   1ee74:	cmp	r0, r1
   1ee78:	bcc	1ee94 <test_union_vector@@Base+0xacc>
   1ee7c:	ldr	r0, [sp, #12]
   1ee80:	ldrh	r1, [fp, #-8]
   1ee84:	add	r0, r0, r1, lsl #1
   1ee88:	add	r0, r0, #4
   1ee8c:	bl	23470 <main@@Base+0x4b8>
   1ee90:	strh	r0, [fp, #-6]
   1ee94:	ldrh	r0, [fp, #-6]
   1ee98:	cmp	r0, #0
   1ee9c:	beq	1eebc <test_union_vector@@Base+0xaf4>
   1eea0:	ldr	r0, [fp, #-4]
   1eea4:	ldrh	r1, [fp, #-6]
   1eea8:	add	r0, r0, r1
   1eeac:	bl	25b7c <main@@Base+0x2bc4>
   1eeb0:	sxtb	r0, r0
   1eeb4:	str	r0, [sp, #4]
   1eeb8:	b	1eec8 <test_union_vector@@Base+0xb00>
   1eebc:	movw	r0, #2
   1eec0:	str	r0, [sp, #4]
   1eec4:	b	1eec8 <test_union_vector@@Base+0xb00>
   1eec8:	ldr	r0, [sp, #4]
   1eecc:	sxtb	r0, r0
   1eed0:	mov	sp, fp
   1eed4:	pop	{fp, pc}
   1eed8:	andeq	r5, r1, r9, asr #3
   1eedc:	andeq	r5, r1, r7, ror #3
   1eee0:	muleq	r1, r3, r8
   1eee4:	push	{fp, lr}
   1eee8:	mov	fp, sp
   1eeec:	sub	sp, sp, #16
   1eef0:	str	r1, [fp, #-4]
   1eef4:	ldr	r1, [fp, #-4]
   1eef8:	str	r0, [sp, #8]
   1eefc:	mov	r0, r1
   1ef00:	bl	1eab8 <test_union_vector@@Base+0x6f0>
   1ef04:	ldr	r1, [sp, #8]
   1ef08:	str	r0, [r1]
   1ef0c:	ldr	r0, [fp, #-4]
   1ef10:	bl	1ebc0 <test_union_vector@@Base+0x7f8>
   1ef14:	ldr	r1, [sp, #8]
   1ef18:	str	r0, [r1, #4]
   1ef1c:	ldr	r0, [r1]
   1ef20:	bl	25bb8 <main@@Base+0x2c00>
   1ef24:	ldr	r1, [sp, #8]
   1ef28:	ldr	r2, [r1, #4]
   1ef2c:	str	r0, [sp, #4]
   1ef30:	mov	r0, r2
   1ef34:	bl	25bb8 <main@@Base+0x2c00>
   1ef38:	ldr	r1, [sp, #4]
   1ef3c:	cmp	r1, r0
   1ef40:	bne	1ef4c <test_union_vector@@Base+0xb84>
   1ef44:	b	1ef48 <test_union_vector@@Base+0xb80>
   1ef48:	b	1ef6c <test_union_vector@@Base+0xba4>
   1ef4c:	ldr	r0, [pc, #32]	; 1ef74 <test_union_vector@@Base+0xbac>
   1ef50:	add	r0, pc, r0
   1ef54:	ldr	r1, [pc, #28]	; 1ef78 <test_union_vector@@Base+0xbb0>
   1ef58:	add	r1, pc, r1
   1ef5c:	ldr	r2, [pc, #24]	; 1ef7c <test_union_vector@@Base+0xbb4>
   1ef60:	add	r3, pc, r2
   1ef64:	movw	r2, #621	; 0x26d
   1ef68:	bl	12e68 <__assert_fail@plt>
   1ef6c:	mov	sp, fp
   1ef70:	pop	{fp, pc}
   1ef74:	andeq	r6, r1, r2, lsl r8
   1ef78:	strheq	r5, [r1], -fp
   1ef7c:	andeq	r6, r1, r7, ror #16
   1ef80:	push	{fp, lr}
   1ef84:	mov	fp, sp
   1ef88:	sub	sp, sp, #8
   1ef8c:	str	r0, [sp]
   1ef90:	str	r1, [sp, #4]
   1ef94:	ldr	r0, [sp]
   1ef98:	bl	25bb8 <main@@Base+0x2c00>
   1ef9c:	mov	sp, fp
   1efa0:	pop	{fp, pc}
   1efa4:	push	{fp, lr}
   1efa8:	mov	fp, sp
   1efac:	sub	sp, sp, #24
   1efb0:	str	r1, [fp, #-8]
   1efb4:	str	r2, [fp, #-4]
   1efb8:	str	r3, [sp, #12]
   1efbc:	mov	r1, r0
   1efc0:	str	r0, [sp, #4]
   1efc4:	mov	r0, r1
   1efc8:	movw	r1, #0
   1efcc:	and	r1, r1, #255	; 0xff
   1efd0:	movw	r2, #8
   1efd4:	bl	12e2c <memset@plt>
   1efd8:	ldr	r0, [fp, #-8]
   1efdc:	bl	25bb8 <main@@Base+0x2c00>
   1efe0:	str	r0, [sp, #8]
   1efe4:	ldr	r0, [sp, #8]
   1efe8:	ldr	r1, [sp, #12]
   1efec:	cmp	r0, r1
   1eff0:	bls	1effc <test_union_vector@@Base+0xc34>
   1eff4:	b	1eff8 <test_union_vector@@Base+0xc30>
   1eff8:	b	1f01c <test_union_vector@@Base+0xc54>
   1effc:	ldr	r0, [pc, #92]	; 1f060 <test_union_vector@@Base+0xc98>
   1f000:	add	r0, pc, r0
   1f004:	ldr	r1, [pc, #88]	; 1f064 <test_union_vector@@Base+0xc9c>
   1f008:	add	r1, pc, r1
   1f00c:	ldr	r2, [pc, #84]	; 1f068 <test_union_vector@@Base+0xca0>
   1f010:	add	r3, pc, r2
   1f014:	movw	r2, #520	; 0x208
   1f018:	bl	12e68 <__assert_fail@plt>
   1f01c:	ldr	r0, [fp, #-8]
   1f020:	ldr	r1, [sp, #12]
   1f024:	add	r0, r0, r1
   1f028:	ldrb	r0, [r0]
   1f02c:	ldr	r1, [sp, #4]
   1f030:	strb	r0, [r1]
   1f034:	ldrb	r0, [r1]
   1f038:	cmp	r0, #0
   1f03c:	bne	1f044 <test_union_vector@@Base+0xc7c>
   1f040:	b	1f058 <test_union_vector@@Base+0xc90>
   1f044:	ldr	r0, [fp, #-4]
   1f048:	ldr	r1, [sp, #12]
   1f04c:	bl	1ed60 <test_union_vector@@Base+0x998>
   1f050:	ldr	r1, [sp, #4]
   1f054:	str	r0, [r1, #4]
   1f058:	mov	sp, fp
   1f05c:	pop	{fp, pc}
   1f060:	andeq	r6, r1, r3, lsr #16
   1f064:	andeq	r5, r1, fp
   1f068:	andeq	r6, r1, r3, lsr r8

0001f06c <test_mixed_type_union@@Base>:
   1f06c:	push	{r4, r5, fp, lr}
   1f070:	add	fp, sp, #8
   1f074:	sub	sp, sp, #320	; 0x140
   1f078:	str	r0, [fp, #-16]
   1f07c:	mvn	r0, #0
   1f080:	str	r0, [fp, #-32]	; 0xffffffe0
   1f084:	ldr	r0, [fp, #-16]
   1f088:	bl	286d4 <flatcc_builder_reset@@Base>
   1f08c:	ldr	r1, [fp, #-16]
   1f090:	str	r0, [sp, #112]	; 0x70
   1f094:	mov	r0, r1
   1f098:	bl	1fb04 <test_mixed_type_union@@Base+0xa98>
   1f09c:	ldr	r1, [fp, #-16]
   1f0a0:	mov	r2, #10
   1f0a4:	str	r0, [sp, #108]	; 0x6c
   1f0a8:	mov	r0, r1
   1f0ac:	mov	r1, r2
   1f0b0:	bl	1fb54 <test_mixed_type_union@@Base+0xae8>
   1f0b4:	str	r0, [fp, #-52]	; 0xffffffcc
   1f0b8:	ldr	r0, [fp, #-16]
   1f0bc:	mov	r1, #22
   1f0c0:	bl	1fbbc <test_mixed_type_union@@Base+0xb50>
   1f0c4:	str	r0, [fp, #-44]	; 0xffffffd4
   1f0c8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1f0cc:	sub	r0, fp, #100	; 0x64
   1f0d0:	bl	1fc24 <test_mixed_type_union@@Base+0xbb8>
   1f0d4:	vldr	d16, [fp, #-100]	; 0xffffff9c
   1f0d8:	vstr	d16, [fp, #-40]	; 0xffffffd8
   1f0dc:	ldr	r0, [fp, #-16]
   1f0e0:	mov	r1, #19
   1f0e4:	bl	1fc44 <test_mixed_type_union@@Base+0xbd8>
   1f0e8:	ldr	r1, [fp, #-16]
   1f0ec:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1f0f0:	str	r0, [sp, #104]	; 0x68
   1f0f4:	mov	r0, r1
   1f0f8:	mov	r1, r2
   1f0fc:	bl	1fcbc <test_mixed_type_union@@Base+0xc50>
   1f100:	ldr	r1, [fp, #-16]
   1f104:	mov	r2, #42	; 0x2a
   1f108:	str	r0, [sp, #100]	; 0x64
   1f10c:	mov	r0, r1
   1f110:	mov	r1, r2
   1f114:	bl	1fd00 <test_mixed_type_union@@Base+0xc94>
   1f118:	str	r0, [fp, #-48]	; 0xffffffd0
   1f11c:	ldr	r0, [fp, #-16]
   1f120:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1f124:	bl	1fd5c <test_mixed_type_union@@Base+0xcf0>
   1f128:	ldr	r1, [fp, #-16]
   1f12c:	ldr	r2, [pc, #2484]	; 1fae8 <test_mixed_type_union@@Base+0xa7c>
   1f130:	add	r2, pc, r2
   1f134:	str	r0, [sp, #96]	; 0x60
   1f138:	mov	r0, r1
   1f13c:	mov	r1, r2
   1f140:	bl	1fda0 <test_mixed_type_union@@Base+0xd34>
   1f144:	ldr	r1, [fp, #-16]
   1f148:	str	r0, [sp, #92]	; 0x5c
   1f14c:	mov	r0, r1
   1f150:	bl	1fdec <test_mixed_type_union@@Base+0xd80>
   1f154:	ldr	r1, [fp, #-16]
   1f158:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1f15c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1f160:	str	r0, [sp, #88]	; 0x58
   1f164:	mov	r0, r1
   1f168:	mov	r1, r2
   1f16c:	mov	r2, r3
   1f170:	bl	1fe0c <test_mixed_type_union@@Base+0xda0>
   1f174:	ldr	r1, [fp, #-16]
   1f178:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1f17c:	str	r0, [sp, #84]	; 0x54
   1f180:	mov	r0, r1
   1f184:	mov	r1, r2
   1f188:	bl	1fe3c <test_mixed_type_union@@Base+0xdd0>
   1f18c:	ldr	r1, [fp, #-16]
   1f190:	mov	r2, #1
   1f194:	str	r0, [sp, #80]	; 0x50
   1f198:	mov	r0, r1
   1f19c:	mov	r1, r2
   1f1a0:	bl	1fe80 <test_mixed_type_union@@Base+0xe14>
   1f1a4:	ldr	r1, [fp, #-16]
   1f1a8:	ldr	r2, [pc, #2364]	; 1faec <test_mixed_type_union@@Base+0xa80>
   1f1ac:	add	r2, pc, r2
   1f1b0:	str	r0, [sp, #76]	; 0x4c
   1f1b4:	mov	r0, r1
   1f1b8:	str	r1, [sp, #72]	; 0x48
   1f1bc:	mov	r1, r2
   1f1c0:	bl	19398 <gen_monster@@Base+0xf3c>
   1f1c4:	sub	r1, fp, #108	; 0x6c
   1f1c8:	str	r0, [sp, #68]	; 0x44
   1f1cc:	mov	r0, r1
   1f1d0:	ldr	r1, [sp, #68]	; 0x44
   1f1d4:	bl	1ff00 <test_mixed_type_union@@Base+0xe94>
   1f1d8:	ldr	r1, [fp, #-108]	; 0xffffff94
   1f1dc:	ldr	r2, [fp, #-104]	; 0xffffff98
   1f1e0:	ldr	r0, [sp, #72]	; 0x48
   1f1e4:	bl	1fed0 <test_mixed_type_union@@Base+0xe64>
   1f1e8:	ldr	r1, [fp, #-16]
   1f1ec:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f1f0:	str	r0, [sp, #64]	; 0x40
   1f1f4:	mov	r0, r1
   1f1f8:	mov	r1, r2
   1f1fc:	bl	1ff20 <test_mixed_type_union@@Base+0xeb4>
   1f200:	ldr	r1, [fp, #-16]
   1f204:	str	r0, [sp, #60]	; 0x3c
   1f208:	mov	r0, r1
   1f20c:	bl	1ff64 <test_mixed_type_union@@Base+0xef8>
   1f210:	str	r0, [fp, #-56]	; 0xffffffc8
   1f214:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1f218:	movw	r1, #3
   1f21c:	str	r1, [r0]
   1f220:	ldr	r0, [fp, #-16]
   1f224:	bl	1ff84 <test_mixed_type_union@@Base+0xf18>
   1f228:	ldr	r1, [fp, #-16]
   1f22c:	ldr	r2, [fp, #-16]
   1f230:	str	r0, [sp, #56]	; 0x38
   1f234:	mov	r0, r2
   1f238:	movw	r2, #1
   1f23c:	str	r1, [sp, #52]	; 0x34
   1f240:	mov	r1, r2
   1f244:	bl	1fb54 <test_mixed_type_union@@Base+0xae8>
   1f248:	ldr	r1, [sp, #52]	; 0x34
   1f24c:	str	r0, [sp, #48]	; 0x30
   1f250:	mov	r0, r1
   1f254:	ldr	r1, [sp, #48]	; 0x30
   1f258:	bl	1ff20 <test_mixed_type_union@@Base+0xeb4>
   1f25c:	ldr	r1, [fp, #-16]
   1f260:	str	r0, [sp, #44]	; 0x2c
   1f264:	mov	r0, r1
   1f268:	movw	r1, #2
   1f26c:	bl	1ffcc <test_mixed_type_union@@Base+0xf60>
   1f270:	ldr	r1, [pc, #2020]	; 1fa5c <test_mixed_type_union@@Base+0x9f0>
   1f274:	add	r1, pc, r1
   1f278:	ldr	r2, [fp, #-16]
   1f27c:	ldr	r3, [fp, #-16]
   1f280:	str	r0, [sp, #40]	; 0x28
   1f284:	mov	r0, r3
   1f288:	str	r2, [sp, #36]	; 0x24
   1f28c:	bl	19398 <gen_monster@@Base+0xf3c>
   1f290:	ldr	r1, [sp, #36]	; 0x24
   1f294:	str	r0, [sp, #32]
   1f298:	mov	r0, r1
   1f29c:	ldr	r1, [sp, #32]
   1f2a0:	bl	2001c <test_mixed_type_union@@Base+0xfb0>
   1f2a4:	ldr	r1, [pc, #1964]	; 1fa58 <test_mixed_type_union@@Base+0x9ec>
   1f2a8:	add	r1, pc, r1
   1f2ac:	ldr	r2, [fp, #-16]
   1f2b0:	str	r0, [sp, #28]
   1f2b4:	mov	r0, r2
   1f2b8:	bl	20060 <test_mixed_type_union@@Base+0xff4>
   1f2bc:	ldr	r1, [fp, #-16]
   1f2c0:	str	r0, [sp, #24]
   1f2c4:	mov	r0, r1
   1f2c8:	bl	200b0 <test_mixed_type_union@@Base+0x1044>
   1f2cc:	ldr	r1, [fp, #-16]
   1f2d0:	str	r0, [sp, #20]
   1f2d4:	mov	r0, r1
   1f2d8:	bl	200f0 <test_mixed_type_union@@Base+0x1084>
   1f2dc:	ldr	r1, [fp, #-16]
   1f2e0:	str	r0, [sp, #16]
   1f2e4:	mov	r0, r1
   1f2e8:	sub	r1, fp, #24
   1f2ec:	bl	2db44 <flatcc_builder_finalize_aligned_buffer@@Base>
   1f2f0:	ldr	r1, [pc, #1880]	; 1fa50 <test_mixed_type_union@@Base+0x9e4>
   1f2f4:	add	r1, pc, r1
   1f2f8:	ldr	r2, [pc, #1876]	; 1fa54 <test_mixed_type_union@@Base+0x9e8>
   1f2fc:	ldr	r2, [pc, r2]
   1f300:	str	r0, [fp, #-20]	; 0xffffffec
   1f304:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f308:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f30c:	ldr	r2, [r2]
   1f310:	str	r0, [sp, #12]
   1f314:	mov	r0, r1
   1f318:	ldr	r1, [sp, #12]
   1f31c:	str	r2, [sp, #8]
   1f320:	mov	r2, r3
   1f324:	ldr	r3, [sp, #8]
   1f328:	bl	13ae8 <test_type_aliases@@Base+0x4f0>
   1f32c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f330:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1f334:	bl	20130 <test_mixed_type_union@@Base+0x10c4>
   1f338:	str	r0, [fp, #-32]	; 0xffffffe0
   1f33c:	cmp	r0, #0
   1f340:	beq	1f370 <test_mixed_type_union@@Base+0x304>
   1f344:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1f348:	bl	2ebb4 <flatcc_verify_error_string@@Base>
   1f34c:	ldr	r1, [pc, #1936]	; 1fae4 <test_mixed_type_union@@Base+0xa78>
   1f350:	add	r1, pc, r1
   1f354:	str	r0, [sp, #4]
   1f358:	mov	r0, r1
   1f35c:	ldr	r1, [sp, #4]
   1f360:	bl	12d9c <printf@plt>
   1f364:	mvn	r1, #0
   1f368:	str	r1, [fp, #-12]
   1f36c:	b	1fa44 <test_mixed_type_union@@Base+0x9d8>
   1f370:	mvn	r0, #0
   1f374:	str	r0, [fp, #-32]	; 0xffffffe0
   1f378:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f37c:	bl	20170 <test_mixed_type_union@@Base+0x1104>
   1f380:	str	r0, [fp, #-60]	; 0xffffffc4
   1f384:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f388:	bl	201ec <test_mixed_type_union@@Base+0x1180>
   1f38c:	cmp	r0, #0
   1f390:	bne	1f3a4 <test_mixed_type_union@@Base+0x338>
   1f394:	ldr	r0, [pc, #1732]	; 1fa60 <test_mixed_type_union@@Base+0x9f4>
   1f398:	add	r0, pc, r0
   1f39c:	bl	12d9c <printf@plt>
   1f3a0:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f3a4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f3a8:	bl	202b8 <test_mixed_type_union@@Base+0x124c>
   1f3ac:	cmp	r0, #0
   1f3b0:	bne	1f3c4 <test_mixed_type_union@@Base+0x358>
   1f3b4:	ldr	r0, [pc, #1704]	; 1fa64 <test_mixed_type_union@@Base+0x9f8>
   1f3b8:	add	r0, pc, r0
   1f3bc:	bl	12d9c <printf@plt>
   1f3c0:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f3c4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1f3c8:	sub	r0, fp, #116	; 0x74
   1f3cc:	bl	20384 <test_mixed_type_union@@Base+0x1318>
   1f3d0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1f3d4:	str	r0, [fp, #-80]	; 0xffffffb0
   1f3d8:	ldr	r0, [fp, #-112]	; 0xffffff90
   1f3dc:	str	r0, [fp, #-76]	; 0xffffffb4
   1f3e0:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1f3e4:	cmp	r0, #8
   1f3e8:	beq	1f3fc <test_mixed_type_union@@Base+0x390>
   1f3ec:	ldr	r0, [pc, #1772]	; 1fae0 <test_mixed_type_union@@Base+0xa74>
   1f3f0:	add	r0, pc, r0
   1f3f4:	bl	12d9c <printf@plt>
   1f3f8:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f3fc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1f400:	str	r0, [fp, #-84]	; 0xffffffac
   1f404:	ldr	r0, [fp, #-84]	; 0xffffffac
   1f408:	movw	r1, #0
   1f40c:	cmp	r0, r1
   1f410:	bne	1f420 <test_mixed_type_union@@Base+0x3b4>
   1f414:	ldr	r0, [pc, #1612]	; 1fa68 <test_mixed_type_union@@Base+0x9fc>
   1f418:	add	r0, pc, r0
   1f41c:	bl	12d9c <printf@plt>
   1f420:	ldr	r0, [fp, #-84]	; 0xffffffac
   1f424:	bl	203e8 <test_mixed_type_union@@Base+0x137c>
   1f428:	uxth	r0, r0
   1f42c:	cmp	r0, #19
   1f430:	ble	1f444 <test_mixed_type_union@@Base+0x3d8>
   1f434:	ldr	r0, [pc, #1696]	; 1fadc <test_mixed_type_union@@Base+0xa70>
   1f438:	add	r0, pc, r0
   1f43c:	bl	12d9c <printf@plt>
   1f440:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f444:	ldr	r0, [fp, #-84]	; 0xffffffac
   1f448:	bl	203e8 <test_mixed_type_union@@Base+0x137c>
   1f44c:	uxth	r0, r0
   1f450:	cmp	r0, #19
   1f454:	bge	1f468 <test_mixed_type_union@@Base+0x3fc>
   1f458:	ldr	r0, [pc, #1656]	; 1fad8 <test_mixed_type_union@@Base+0xa6c>
   1f45c:	add	r0, pc, r0
   1f460:	bl	12d9c <printf@plt>
   1f464:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f468:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f46c:	bl	20438 <test_mixed_type_union@@Base+0x13cc>
   1f470:	and	r0, r0, #255	; 0xff
   1f474:	cmp	r0, #8
   1f478:	beq	1f48c <test_mixed_type_union@@Base+0x420>
   1f47c:	ldr	r0, [pc, #1616]	; 1fad4 <test_mixed_type_union@@Base+0xa68>
   1f480:	add	r0, pc, r0
   1f484:	bl	12d9c <printf@plt>
   1f488:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f48c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f490:	bl	2052c <test_mixed_type_union@@Base+0x14c0>
   1f494:	str	r0, [fp, #-84]	; 0xffffffac
   1f498:	ldr	r0, [fp, #-84]	; 0xffffffac
   1f49c:	movw	r1, #0
   1f4a0:	cmp	r0, r1
   1f4a4:	bne	1f4b8 <test_mixed_type_union@@Base+0x44c>
   1f4a8:	ldr	r0, [pc, #1468]	; 1fa6c <test_mixed_type_union@@Base+0xa00>
   1f4ac:	add	r0, pc, r0
   1f4b0:	bl	12d9c <printf@plt>
   1f4b4:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f4b8:	ldr	r0, [fp, #-84]	; 0xffffffac
   1f4bc:	bl	203e8 <test_mixed_type_union@@Base+0x137c>
   1f4c0:	uxth	r0, r0
   1f4c4:	cmp	r0, #22
   1f4c8:	beq	1f4dc <test_mixed_type_union@@Base+0x470>
   1f4cc:	ldr	r0, [pc, #1532]	; 1fad0 <test_mixed_type_union@@Base+0xa64>
   1f4d0:	add	r0, pc, r0
   1f4d4:	bl	12d9c <printf@plt>
   1f4d8:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f4dc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f4e0:	bl	20630 <test_mixed_type_union@@Base+0x15c4>
   1f4e4:	and	r0, r0, #255	; 0xff
   1f4e8:	cmp	r0, #2
   1f4ec:	beq	1f500 <test_mixed_type_union@@Base+0x494>
   1f4f0:	ldr	r0, [pc, #1492]	; 1facc <test_mixed_type_union@@Base+0xa60>
   1f4f4:	add	r0, pc, r0
   1f4f8:	bl	12d9c <printf@plt>
   1f4fc:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f500:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f504:	bl	20724 <test_mixed_type_union@@Base+0x16b8>
   1f508:	str	r0, [fp, #-88]	; 0xffffffa8
   1f50c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1f510:	movw	r1, #0
   1f514:	cmp	r0, r1
   1f518:	beq	1f52c <test_mixed_type_union@@Base+0x4c0>
   1f51c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1f520:	bl	20828 <test_mixed_type_union@@Base+0x17bc>
   1f524:	cmp	r0, #42	; 0x2a
   1f528:	beq	1f53c <test_mixed_type_union@@Base+0x4d0>
   1f52c:	ldr	r0, [pc, #1428]	; 1fac8 <test_mixed_type_union@@Base+0xa5c>
   1f530:	add	r0, pc, r0
   1f534:	bl	12d9c <printf@plt>
   1f538:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f53c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f540:	bl	20914 <test_mixed_type_union@@Base+0x18a8>
   1f544:	and	r0, r0, #255	; 0xff
   1f548:	cmp	r0, #11
   1f54c:	beq	1f560 <test_mixed_type_union@@Base+0x4f4>
   1f550:	ldr	r0, [pc, #1388]	; 1fac4 <test_mixed_type_union@@Base+0xa58>
   1f554:	add	r0, pc, r0
   1f558:	bl	12d9c <printf@plt>
   1f55c:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f560:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f564:	bl	20a5c <test_mixed_type_union@@Base+0x19f0>
   1f568:	bl	20a08 <test_mixed_type_union@@Base+0x199c>
   1f56c:	str	r0, [fp, #-92]	; 0xffffffa4
   1f570:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1f574:	movw	r1, #0
   1f578:	cmp	r0, r1
   1f57c:	bne	1f590 <test_mixed_type_union@@Base+0x524>
   1f580:	ldr	r0, [pc, #1256]	; 1fa70 <test_mixed_type_union@@Base+0xa04>
   1f584:	add	r0, pc, r0
   1f588:	bl	12d9c <printf@plt>
   1f58c:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f590:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1f594:	ldr	r1, [pc, #1364]	; 1faf0 <test_mixed_type_union@@Base+0xa84>
   1f598:	add	r1, pc, r1
   1f59c:	bl	12d90 <strcmp@plt>
   1f5a0:	cmp	r0, #0
   1f5a4:	beq	1f5bc <test_mixed_type_union@@Base+0x550>
   1f5a8:	ldr	r0, [pc, #1296]	; 1fac0 <test_mixed_type_union@@Base+0xa54>
   1f5ac:	add	r0, pc, r0
   1f5b0:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1f5b4:	bl	12d9c <printf@plt>
   1f5b8:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f5bc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f5c0:	bl	20b60 <test_mixed_type_union@@Base+0x1af4>
   1f5c4:	str	r0, [fp, #-92]	; 0xffffffa4
   1f5c8:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1f5cc:	movw	r1, #0
   1f5d0:	cmp	r0, r1
   1f5d4:	bne	1f5e8 <test_mixed_type_union@@Base+0x57c>
   1f5d8:	ldr	r0, [pc, #1172]	; 1fa74 <test_mixed_type_union@@Base+0xa08>
   1f5dc:	add	r0, pc, r0
   1f5e0:	bl	12d9c <printf@plt>
   1f5e4:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f5e8:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1f5ec:	ldr	r1, [pc, #1280]	; 1faf4 <test_mixed_type_union@@Base+0xa88>
   1f5f0:	add	r1, pc, r1
   1f5f4:	bl	12d90 <strcmp@plt>
   1f5f8:	cmp	r0, #0
   1f5fc:	beq	1f614 <test_mixed_type_union@@Base+0x5a8>
   1f600:	ldr	r0, [pc, #1204]	; 1fabc <test_mixed_type_union@@Base+0xa50>
   1f604:	add	r0, pc, r0
   1f608:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1f60c:	bl	12d9c <printf@plt>
   1f610:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f614:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1f618:	sub	r0, fp, #124	; 0x7c
   1f61c:	bl	20b84 <test_mixed_type_union@@Base+0x1b18>
   1f620:	vldr	d16, [fp, #-124]	; 0xffffff84
   1f624:	vstr	d16, [fp, #-80]	; 0xffffffb0
   1f628:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1f62c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1f630:	bl	20be8 <test_mixed_type_union@@Base+0x1b7c>
   1f634:	str	r0, [fp, #-92]	; 0xffffffa4
   1f638:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1f63c:	ldr	r1, [pc, #1204]	; 1faf8 <test_mixed_type_union@@Base+0xa8c>
   1f640:	add	r1, pc, r1
   1f644:	bl	12d90 <strcmp@plt>
   1f648:	cmp	r0, #0
   1f64c:	beq	1f664 <test_mixed_type_union@@Base+0x5f8>
   1f650:	ldr	r0, [pc, #1120]	; 1fab8 <test_mixed_type_union@@Base+0xa4c>
   1f654:	add	r0, pc, r0
   1f658:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1f65c:	bl	12d9c <printf@plt>
   1f660:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f664:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1f668:	sub	r0, fp, #132	; 0x84
   1f66c:	bl	20c0c <test_mixed_type_union@@Base+0x1ba0>
   1f670:	vldr	d16, [fp, #-132]	; 0xffffff7c
   1f674:	vstr	d16, [fp, #-72]	; 0xffffffb8
   1f678:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1f67c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1f680:	sub	r0, fp, #140	; 0x8c
   1f684:	mov	r3, #0
   1f688:	bl	20ca8 <test_mixed_type_union@@Base+0x1c3c>
   1f68c:	ldr	r0, [fp, #-140]	; 0xffffff74
   1f690:	str	r0, [fp, #-80]	; 0xffffffb0
   1f694:	ldr	r0, [fp, #-136]	; 0xffffff78
   1f698:	str	r0, [fp, #-76]	; 0xffffffb4
   1f69c:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1f6a0:	cmp	r0, #8
   1f6a4:	beq	1f6b8 <test_mixed_type_union@@Base+0x64c>
   1f6a8:	ldr	r0, [pc, #1028]	; 1fab4 <test_mixed_type_union@@Base+0xa48>
   1f6ac:	add	r0, pc, r0
   1f6b0:	bl	12d9c <printf@plt>
   1f6b4:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f6b8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1f6bc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1f6c0:	sub	r0, fp, #148	; 0x94
   1f6c4:	mov	r3, #1
   1f6c8:	bl	20ca8 <test_mixed_type_union@@Base+0x1c3c>
   1f6cc:	ldr	r0, [fp, #-148]	; 0xffffff6c
   1f6d0:	str	r0, [fp, #-80]	; 0xffffffb0
   1f6d4:	ldr	r0, [fp, #-144]	; 0xffffff70
   1f6d8:	str	r0, [fp, #-76]	; 0xffffffb4
   1f6dc:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1f6e0:	cmp	r0, #2
   1f6e4:	beq	1f6f8 <test_mixed_type_union@@Base+0x68c>
   1f6e8:	ldr	r0, [pc, #960]	; 1fab0 <test_mixed_type_union@@Base+0xa44>
   1f6ec:	add	r0, pc, r0
   1f6f0:	bl	12d9c <printf@plt>
   1f6f4:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f6f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1f6fc:	str	r0, [fp, #-88]	; 0xffffffa8
   1f700:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1f704:	bl	20828 <test_mixed_type_union@@Base+0x17bc>
   1f708:	cmp	r0, #42	; 0x2a
   1f70c:	beq	1f720 <test_mixed_type_union@@Base+0x6b4>
   1f710:	ldr	r0, [pc, #916]	; 1faac <test_mixed_type_union@@Base+0xa40>
   1f714:	add	r0, pc, r0
   1f718:	bl	12d9c <printf@plt>
   1f71c:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f720:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1f724:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1f728:	sub	r0, fp, #156	; 0x9c
   1f72c:	mov	r3, #2
   1f730:	bl	20ca8 <test_mixed_type_union@@Base+0x1c3c>
   1f734:	ldr	r0, [fp, #-156]	; 0xffffff64
   1f738:	str	r0, [fp, #-80]	; 0xffffffb0
   1f73c:	ldr	r0, [fp, #-152]	; 0xffffff68
   1f740:	str	r0, [fp, #-76]	; 0xffffffb4
   1f744:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1f748:	cmp	r0, #2
   1f74c:	beq	1f760 <test_mixed_type_union@@Base+0x6f4>
   1f750:	ldr	r0, [pc, #848]	; 1faa8 <test_mixed_type_union@@Base+0xa3c>
   1f754:	add	r0, pc, r0
   1f758:	bl	12d9c <printf@plt>
   1f75c:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f760:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1f764:	str	r0, [fp, #-88]	; 0xffffffa8
   1f768:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1f76c:	bl	20828 <test_mixed_type_union@@Base+0x17bc>
   1f770:	cmp	r0, #1
   1f774:	beq	1f788 <test_mixed_type_union@@Base+0x71c>
   1f778:	ldr	r0, [pc, #804]	; 1faa4 <test_mixed_type_union@@Base+0xa38>
   1f77c:	add	r0, pc, r0
   1f780:	bl	12d9c <printf@plt>
   1f784:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f788:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f78c:	bl	20d70 <test_mixed_type_union@@Base+0x1d04>
   1f790:	movw	r1, #3
   1f794:	bl	1ece8 <test_union_vector@@Base+0x920>
   1f798:	and	r0, r0, #255	; 0xff
   1f79c:	cmp	r0, #11
   1f7a0:	beq	1f7b4 <test_mixed_type_union@@Base+0x748>
   1f7a4:	ldr	r0, [pc, #756]	; 1faa0 <test_mixed_type_union@@Base+0xa34>
   1f7a8:	add	r0, pc, r0
   1f7ac:	bl	12d9c <printf@plt>
   1f7b0:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f7b4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1f7b8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1f7bc:	mov	r2, #3
   1f7c0:	bl	20e78 <test_mixed_type_union@@Base+0x1e0c>
   1f7c4:	str	r0, [fp, #-92]	; 0xffffffa4
   1f7c8:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1f7cc:	movw	r1, #0
   1f7d0:	cmp	r0, r1
   1f7d4:	beq	1f7f0 <test_mixed_type_union@@Base+0x784>
   1f7d8:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1f7dc:	ldr	r1, [pc, #792]	; 1fafc <test_mixed_type_union@@Base+0xa90>
   1f7e0:	add	r1, pc, r1
   1f7e4:	bl	12d90 <strcmp@plt>
   1f7e8:	cmp	r0, #0
   1f7ec:	beq	1f800 <test_mixed_type_union@@Base+0x794>
   1f7f0:	ldr	r0, [pc, #676]	; 1fa9c <test_mixed_type_union@@Base+0xa30>
   1f7f4:	add	r0, pc, r0
   1f7f8:	bl	12d9c <printf@plt>
   1f7fc:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f800:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1f804:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1f808:	add	r0, sp, #164	; 0xa4
   1f80c:	mov	r3, #3
   1f810:	bl	20ca8 <test_mixed_type_union@@Base+0x1c3c>
   1f814:	ldr	r0, [sp, #164]	; 0xa4
   1f818:	str	r0, [fp, #-80]	; 0xffffffb0
   1f81c:	ldr	r0, [sp, #168]	; 0xa8
   1f820:	str	r0, [fp, #-76]	; 0xffffffb4
   1f824:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1f828:	cmp	r0, #11
   1f82c:	beq	1f840 <test_mixed_type_union@@Base+0x7d4>
   1f830:	ldr	r0, [pc, #608]	; 1fa98 <test_mixed_type_union@@Base+0xa2c>
   1f834:	add	r0, pc, r0
   1f838:	bl	12d9c <printf@plt>
   1f83c:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f840:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1f844:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1f848:	bl	20be8 <test_mixed_type_union@@Base+0x1b7c>
   1f84c:	str	r0, [fp, #-92]	; 0xffffffa4
   1f850:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1f854:	movw	r1, #0
   1f858:	cmp	r0, r1
   1f85c:	beq	1f878 <test_mixed_type_union@@Base+0x80c>
   1f860:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1f864:	ldr	r1, [pc, #660]	; 1fb00 <test_mixed_type_union@@Base+0xa94>
   1f868:	add	r1, pc, r1
   1f86c:	bl	12d90 <strcmp@plt>
   1f870:	cmp	r0, #0
   1f874:	beq	1f888 <test_mixed_type_union@@Base+0x81c>
   1f878:	ldr	r0, [pc, #532]	; 1fa94 <test_mixed_type_union@@Base+0xa28>
   1f87c:	add	r0, pc, r0
   1f880:	bl	12d9c <printf@plt>
   1f884:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f888:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1f88c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1f890:	add	r0, sp, #156	; 0x9c
   1f894:	mov	r3, #4
   1f898:	bl	20ca8 <test_mixed_type_union@@Base+0x1c3c>
   1f89c:	ldr	r0, [sp, #156]	; 0x9c
   1f8a0:	str	r0, [fp, #-80]	; 0xffffffb0
   1f8a4:	ldr	r0, [sp, #160]	; 0xa0
   1f8a8:	str	r0, [fp, #-76]	; 0xffffffb4
   1f8ac:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1f8b0:	cmp	r0, #9
   1f8b4:	beq	1f8c8 <test_mixed_type_union@@Base+0x85c>
   1f8b8:	ldr	r0, [pc, #464]	; 1fa90 <test_mixed_type_union@@Base+0xa24>
   1f8bc:	add	r0, pc, r0
   1f8c0:	bl	12d9c <printf@plt>
   1f8c4:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f8c8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1f8cc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1f8d0:	add	r0, sp, #148	; 0x94
   1f8d4:	mov	r3, #5
   1f8d8:	bl	20ca8 <test_mixed_type_union@@Base+0x1c3c>
   1f8dc:	ldr	r0, [sp, #148]	; 0x94
   1f8e0:	str	r0, [fp, #-80]	; 0xffffffb0
   1f8e4:	ldr	r0, [sp, #152]	; 0x98
   1f8e8:	str	r0, [fp, #-76]	; 0xffffffb4
   1f8ec:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1f8f0:	cmp	r0, #9
   1f8f4:	beq	1f908 <test_mixed_type_union@@Base+0x89c>
   1f8f8:	ldr	r0, [pc, #396]	; 1fa8c <test_mixed_type_union@@Base+0xa20>
   1f8fc:	add	r0, pc, r0
   1f900:	bl	12d9c <printf@plt>
   1f904:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f908:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1f90c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1f910:	add	r0, sp, #140	; 0x8c
   1f914:	mov	r3, #6
   1f918:	bl	20ca8 <test_mixed_type_union@@Base+0x1c3c>
   1f91c:	ldr	r0, [sp, #140]	; 0x8c
   1f920:	str	r0, [fp, #-80]	; 0xffffffb0
   1f924:	ldr	r0, [sp, #144]	; 0x90
   1f928:	str	r0, [fp, #-76]	; 0xffffffb4
   1f92c:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1f930:	cmp	r0, #9
   1f934:	beq	1f948 <test_mixed_type_union@@Base+0x8dc>
   1f938:	ldr	r0, [pc, #328]	; 1fa88 <test_mixed_type_union@@Base+0xa1c>
   1f93c:	add	r0, pc, r0
   1f940:	bl	12d9c <printf@plt>
   1f944:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f948:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1f94c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1f950:	add	r0, sp, #132	; 0x84
   1f954:	mov	r3, #7
   1f958:	bl	20ca8 <test_mixed_type_union@@Base+0x1c3c>
   1f95c:	ldr	r0, [sp, #132]	; 0x84
   1f960:	str	r0, [fp, #-80]	; 0xffffffb0
   1f964:	ldr	r0, [sp, #136]	; 0x88
   1f968:	str	r0, [fp, #-76]	; 0xffffffb4
   1f96c:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1f970:	cmp	r0, #9
   1f974:	beq	1f988 <test_mixed_type_union@@Base+0x91c>
   1f978:	ldr	r0, [pc, #260]	; 1fa84 <test_mixed_type_union@@Base+0xa18>
   1f97c:	add	r0, pc, r0
   1f980:	bl	12d9c <printf@plt>
   1f984:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f988:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1f98c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1f990:	add	r0, sp, #124	; 0x7c
   1f994:	mov	r3, #8
   1f998:	bl	20ca8 <test_mixed_type_union@@Base+0x1c3c>
   1f99c:	ldr	r0, [sp, #124]	; 0x7c
   1f9a0:	str	r0, [fp, #-80]	; 0xffffffb0
   1f9a4:	ldr	r0, [sp, #128]	; 0x80
   1f9a8:	str	r0, [fp, #-76]	; 0xffffffb4
   1f9ac:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1f9b0:	cmp	r0, #11
   1f9b4:	beq	1f9c8 <test_mixed_type_union@@Base+0x95c>
   1f9b8:	ldr	r0, [pc, #192]	; 1fa80 <test_mixed_type_union@@Base+0xa14>
   1f9bc:	add	r0, pc, r0
   1f9c0:	bl	12d9c <printf@plt>
   1f9c4:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1f9c8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1f9cc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1f9d0:	add	r0, sp, #116	; 0x74
   1f9d4:	mov	r3, #9
   1f9d8:	bl	20ca8 <test_mixed_type_union@@Base+0x1c3c>
   1f9dc:	ldr	r0, [sp, #116]	; 0x74
   1f9e0:	str	r0, [fp, #-80]	; 0xffffffb0
   1f9e4:	ldr	r0, [sp, #120]	; 0x78
   1f9e8:	str	r0, [fp, #-76]	; 0xffffffb4
   1f9ec:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1f9f0:	cmp	r0, #11
   1f9f4:	beq	1fa08 <test_mixed_type_union@@Base+0x99c>
   1f9f8:	ldr	r0, [pc, #124]	; 1fa7c <test_mixed_type_union@@Base+0xa10>
   1f9fc:	add	r0, pc, r0
   1fa00:	bl	12d9c <printf@plt>
   1fa04:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1fa08:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1fa0c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1fa10:	bl	20ea4 <test_mixed_type_union@@Base+0x1e38>
   1fa14:	cmp	r0, #10
   1fa18:	beq	1fa2c <test_mixed_type_union@@Base+0x9c0>
   1fa1c:	ldr	r0, [pc, #84]	; 1fa78 <test_mixed_type_union@@Base+0xa0c>
   1fa20:	add	r0, pc, r0
   1fa24:	bl	12d9c <printf@plt>
   1fa28:	b	1fa34 <test_mixed_type_union@@Base+0x9c8>
   1fa2c:	movw	r0, #0
   1fa30:	str	r0, [fp, #-32]	; 0xffffffe0
   1fa34:	ldr	r0, [fp, #-20]	; 0xffffffec
   1fa38:	bl	2dcec <flatcc_builder_aligned_free@@Base>
   1fa3c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1fa40:	str	r0, [fp, #-12]
   1fa44:	ldr	r0, [fp, #-12]
   1fa48:	sub	sp, fp, #8
   1fa4c:	pop	{r4, r5, fp, pc}
   1fa50:	andeq	r4, r1, ip, asr #4
   1fa54:	andeq	r8, r2, r8, asr sp
   1fa58:	andeq	r4, r1, ip, lsl #5
   1fa5c:	andeq	r4, r1, r4, asr #5
   1fa60:	andeq	r4, r1, r4, lsl #4
   1fa64:	andeq	r4, r1, lr, lsl #4
   1fa68:	strdeq	r4, [r1], -r6
   1fa6c:	andeq	r4, r1, r6, lsl #4
   1fa70:	andeq	r4, r1, r0, ror #3
   1fa74:	andeq	r4, r1, r8, lsl #3
   1fa78:	andeq	r4, r1, fp, lsr r0
   1fa7c:	andeq	r4, r1, r3, lsr r0
   1fa80:	andeq	r4, r1, r3, ror r0
   1fa84:	muleq	r1, r0, r0
   1fa88:	andeq	r4, r1, ip, lsr #1
   1fa8c:	andeq	r4, r1, sl, asr #1
   1fa90:	andeq	r4, r1, r8, ror #1
   1fa94:	andeq	r4, r1, r9, ror #1
   1fa98:	strdeq	r4, [r1], -r9
   1fa9c:	andeq	r4, r1, r5, lsl #2
   1faa0:	andeq	r4, r1, r2, lsr #2
   1faa4:	andeq	r4, r1, sp, lsl r1
   1faa8:	andeq	r4, r1, r3, lsr #2
   1faac:	andeq	r4, r1, r1, lsr r1
   1fab0:	andeq	r4, r1, r6, lsr r1
   1fab4:	andeq	r4, r1, r1, asr r1
   1fab8:	andeq	r4, r1, ip, ror r1
   1fabc:	muleq	r1, pc, r1	; <UNPREDICTABLE>
   1fac0:	ldrdeq	r4, [r1], -r3
   1fac4:	strdeq	r4, [r1], -r9
   1fac8:	strdeq	r4, [r1], -sl
   1facc:	andeq	r4, r1, lr, lsl r2
   1fad0:	andeq	r4, r1, r2, lsl r2
   1fad4:	strdeq	r4, [r1], -sp
   1fad8:	strdeq	r4, [r1], -r2
   1fadc:	andeq	r4, r1, lr, ror #3
   1fae0:	andeq	r4, r1, r2, lsl #4
   1fae4:	strdeq	r4, [r1], -sp
   1fae8:	strdeq	r4, [r1], -pc	; <UNPREDICTABLE>
   1faec:	andeq	r4, r1, lr, lsl #7
   1faf0:	muleq	r1, r7, pc	; <UNPREDICTABLE>
   1faf4:	andeq	r3, r1, pc, lsr pc
   1faf8:	andeq	r3, r1, pc, ror #29
   1fafc:	andeq	r3, r1, sl, asr sp
   1fb00:	ldrdeq	r3, [r1], -r2
   1fb04:	push	{fp, lr}
   1fb08:	mov	fp, sp
   1fb0c:	sub	sp, sp, #8
   1fb10:	ldr	r1, [pc, #56]	; 1fb50 <test_mixed_type_union@@Base+0xae4>
   1fb14:	add	r1, pc, r1
   1fb18:	str	r0, [sp, #4]
   1fb1c:	ldr	r0, [sp, #4]
   1fb20:	bl	14898 <test_empty_monster@@Base+0x19c>
   1fb24:	cmp	r0, #0
   1fb28:	beq	1fb38 <test_mixed_type_union@@Base+0xacc>
   1fb2c:	mvn	r0, #0
   1fb30:	str	r0, [sp]
   1fb34:	b	1fb44 <test_mixed_type_union@@Base+0xad8>
   1fb38:	ldr	r0, [sp, #4]
   1fb3c:	bl	27304 <main@@Base+0x434c>
   1fb40:	str	r0, [sp]
   1fb44:	ldr	r0, [sp]
   1fb48:	mov	sp, fp
   1fb4c:	pop	{fp, pc}
   1fb50:	andeq	r1, r1, r4, asr #23
   1fb54:	push	{fp, lr}
   1fb58:	mov	fp, sp
   1fb5c:	sub	sp, sp, #24
   1fb60:	str	r0, [fp, #-8]
   1fb64:	str	r1, [sp, #12]
   1fb68:	ldr	r0, [fp, #-8]
   1fb6c:	bl	27328 <main@@Base+0x4370>
   1fb70:	str	r0, [sp, #8]
   1fb74:	ldr	r0, [sp, #8]
   1fb78:	movw	r1, #0
   1fb7c:	cmp	r0, r1
   1fb80:	bne	1fb90 <test_mixed_type_union@@Base+0xb24>
   1fb84:	movw	r0, #0
   1fb88:	str	r0, [fp, #-4]
   1fb8c:	b	1fbb0 <test_mixed_type_union@@Base+0xb44>
   1fb90:	ldr	r0, [sp, #8]
   1fb94:	ldr	r1, [sp, #12]
   1fb98:	bl	27354 <main@@Base+0x439c>
   1fb9c:	ldr	r1, [fp, #-8]
   1fba0:	str	r0, [sp, #4]
   1fba4:	mov	r0, r1
   1fba8:	bl	27388 <main@@Base+0x43d0>
   1fbac:	str	r0, [fp, #-4]
   1fbb0:	ldr	r0, [fp, #-4]
   1fbb4:	mov	sp, fp
   1fbb8:	pop	{fp, pc}
   1fbbc:	push	{fp, lr}
   1fbc0:	mov	fp, sp
   1fbc4:	sub	sp, sp, #24
   1fbc8:	str	r0, [fp, #-8]
   1fbcc:	strh	r1, [fp, #-10]
   1fbd0:	ldr	r0, [fp, #-8]
   1fbd4:	bl	273a8 <main@@Base+0x43f0>
   1fbd8:	str	r0, [sp, #8]
   1fbdc:	ldr	r0, [sp, #8]
   1fbe0:	movw	r1, #0
   1fbe4:	cmp	r0, r1
   1fbe8:	bne	1fbf8 <test_mixed_type_union@@Base+0xb8c>
   1fbec:	movw	r0, #0
   1fbf0:	str	r0, [fp, #-4]
   1fbf4:	b	1fc18 <test_mixed_type_union@@Base+0xbac>
   1fbf8:	ldr	r0, [sp, #8]
   1fbfc:	ldrh	r1, [fp, #-10]
   1fc00:	bl	273d4 <main@@Base+0x441c>
   1fc04:	ldr	r1, [fp, #-8]
   1fc08:	str	r0, [sp, #4]
   1fc0c:	mov	r0, r1
   1fc10:	bl	27408 <main@@Base+0x4450>
   1fc14:	str	r0, [fp, #-4]
   1fc18:	ldr	r0, [fp, #-4]
   1fc1c:	mov	sp, fp
   1fc20:	pop	{fp, pc}
   1fc24:	sub	sp, sp, #4
   1fc28:	str	r1, [sp]
   1fc2c:	movw	r1, #8
   1fc30:	strb	r1, [r0]
   1fc34:	ldr	r1, [sp]
   1fc38:	str	r1, [r0, #4]
   1fc3c:	add	sp, sp, #4
   1fc40:	bx	lr
   1fc44:	push	{fp, lr}
   1fc48:	mov	fp, sp
   1fc4c:	sub	sp, sp, #32
   1fc50:	str	r0, [fp, #-4]
   1fc54:	strh	r1, [fp, #-6]
   1fc58:	ldr	r0, [fp, #-4]
   1fc5c:	ldrh	r1, [fp, #-6]
   1fc60:	bl	1fbbc <test_mixed_type_union@@Base+0xb50>
   1fc64:	str	r0, [fp, #-12]
   1fc68:	ldr	r0, [fp, #-12]
   1fc6c:	cmp	r0, #0
   1fc70:	beq	1fca4 <test_mixed_type_union@@Base+0xc38>
   1fc74:	ldr	r0, [fp, #-4]
   1fc78:	ldr	r1, [fp, #-12]
   1fc7c:	add	r2, sp, #12
   1fc80:	str	r0, [sp, #8]
   1fc84:	mov	r0, r2
   1fc88:	bl	1fc24 <test_mixed_type_union@@Base+0xbb8>
   1fc8c:	ldr	r1, [sp, #12]
   1fc90:	ldr	r2, [sp, #16]
   1fc94:	ldr	r0, [sp, #8]
   1fc98:	bl	27428 <main@@Base+0x4470>
   1fc9c:	str	r0, [sp, #4]
   1fca0:	b	1fcb0 <test_mixed_type_union@@Base+0xc44>
   1fca4:	mvn	r0, #0
   1fca8:	str	r0, [sp, #4]
   1fcac:	b	1fcb0 <test_mixed_type_union@@Base+0xc44>
   1fcb0:	ldr	r0, [sp, #4]
   1fcb4:	mov	sp, fp
   1fcb8:	pop	{fp, pc}
   1fcbc:	push	{fp, lr}
   1fcc0:	mov	fp, sp
   1fcc4:	sub	sp, sp, #24
   1fcc8:	str	r0, [fp, #-4]
   1fccc:	str	r1, [fp, #-8]
   1fcd0:	ldr	r0, [fp, #-4]
   1fcd4:	ldr	r1, [fp, #-8]
   1fcd8:	add	r2, sp, #8
   1fcdc:	str	r0, [sp, #4]
   1fce0:	mov	r0, r2
   1fce4:	bl	1fc24 <test_mixed_type_union@@Base+0xbb8>
   1fce8:	ldr	r1, [sp, #8]
   1fcec:	ldr	r2, [sp, #12]
   1fcf0:	ldr	r0, [sp, #4]
   1fcf4:	bl	274ec <main@@Base+0x4534>
   1fcf8:	mov	sp, fp
   1fcfc:	pop	{fp, pc}
   1fd00:	push	{fp, lr}
   1fd04:	mov	fp, sp
   1fd08:	sub	sp, sp, #16
   1fd0c:	str	r0, [sp, #8]
   1fd10:	str	r1, [sp, #4]
   1fd14:	ldr	r0, [sp, #8]
   1fd18:	bl	275b0 <main@@Base+0x45f8>
   1fd1c:	cmp	r0, #0
   1fd20:	bne	1fd38 <test_mixed_type_union@@Base+0xccc>
   1fd24:	ldr	r0, [sp, #8]
   1fd28:	ldr	r1, [sp, #4]
   1fd2c:	bl	275d4 <main@@Base+0x461c>
   1fd30:	cmp	r0, #0
   1fd34:	beq	1fd44 <test_mixed_type_union@@Base+0xcd8>
   1fd38:	movw	r0, #0
   1fd3c:	str	r0, [fp, #-4]
   1fd40:	b	1fd50 <test_mixed_type_union@@Base+0xce4>
   1fd44:	ldr	r0, [sp, #8]
   1fd48:	bl	27654 <main@@Base+0x469c>
   1fd4c:	str	r0, [fp, #-4]
   1fd50:	ldr	r0, [fp, #-4]
   1fd54:	mov	sp, fp
   1fd58:	pop	{fp, pc}
   1fd5c:	push	{fp, lr}
   1fd60:	mov	fp, sp
   1fd64:	sub	sp, sp, #24
   1fd68:	str	r0, [fp, #-4]
   1fd6c:	str	r1, [fp, #-8]
   1fd70:	ldr	r0, [fp, #-4]
   1fd74:	ldr	r1, [fp, #-8]
   1fd78:	add	r2, sp, #8
   1fd7c:	str	r0, [sp, #4]
   1fd80:	mov	r0, r2
   1fd84:	bl	27788 <main@@Base+0x47d0>
   1fd88:	ldr	r1, [sp, #8]
   1fd8c:	ldr	r2, [sp, #12]
   1fd90:	ldr	r0, [sp, #4]
   1fd94:	bl	276c4 <main@@Base+0x470c>
   1fd98:	mov	sp, fp
   1fd9c:	pop	{fp, pc}
   1fda0:	push	{fp, lr}
   1fda4:	mov	fp, sp
   1fda8:	sub	sp, sp, #16
   1fdac:	str	r0, [fp, #-4]
   1fdb0:	str	r1, [sp, #8]
   1fdb4:	ldr	r0, [fp, #-4]
   1fdb8:	ldr	r1, [fp, #-4]
   1fdbc:	ldr	r2, [sp, #8]
   1fdc0:	str	r0, [sp, #4]
   1fdc4:	mov	r0, r1
   1fdc8:	mov	r1, r2
   1fdcc:	bl	2d138 <flatcc_builder_create_string_str@@Base>
   1fdd0:	ldr	r1, [sp, #4]
   1fdd4:	str	r0, [sp]
   1fdd8:	mov	r0, r1
   1fddc:	ldr	r1, [sp]
   1fde0:	bl	277a8 <main@@Base+0x47f0>
   1fde4:	mov	sp, fp
   1fde8:	pop	{fp, pc}
   1fdec:	push	{fp, lr}
   1fdf0:	mov	fp, sp
   1fdf4:	sub	sp, sp, #8
   1fdf8:	str	r0, [sp, #4]
   1fdfc:	ldr	r0, [sp, #4]
   1fe00:	bl	2cad0 <flatcc_builder_start_union_vector@@Base>
   1fe04:	mov	sp, fp
   1fe08:	pop	{fp, pc}
   1fe0c:	push	{fp, lr}
   1fe10:	mov	fp, sp
   1fe14:	sub	sp, sp, #16
   1fe18:	str	r1, [sp, #8]
   1fe1c:	str	r2, [sp, #12]
   1fe20:	str	r0, [sp, #4]
   1fe24:	ldr	r0, [sp, #4]
   1fe28:	ldr	r1, [sp, #8]
   1fe2c:	ldr	r2, [sp, #12]
   1fe30:	bl	2ce4c <flatcc_builder_union_vector_push@@Base>
   1fe34:	mov	sp, fp
   1fe38:	pop	{fp, pc}
   1fe3c:	push	{fp, lr}
   1fe40:	mov	fp, sp
   1fe44:	sub	sp, sp, #24
   1fe48:	str	r0, [fp, #-4]
   1fe4c:	str	r1, [fp, #-8]
   1fe50:	ldr	r0, [fp, #-4]
   1fe54:	ldr	r1, [fp, #-8]
   1fe58:	add	r2, sp, #8
   1fe5c:	str	r0, [sp, #4]
   1fe60:	mov	r0, r2
   1fe64:	bl	27788 <main@@Base+0x47d0>
   1fe68:	ldr	r1, [sp, #8]
   1fe6c:	ldr	r2, [sp, #12]
   1fe70:	ldr	r0, [sp, #4]
   1fe74:	bl	1fed0 <test_mixed_type_union@@Base+0xe64>
   1fe78:	mov	sp, fp
   1fe7c:	pop	{fp, pc}
   1fe80:	push	{fp, lr}
   1fe84:	mov	fp, sp
   1fe88:	sub	sp, sp, #24
   1fe8c:	str	r0, [fp, #-4]
   1fe90:	str	r1, [fp, #-8]
   1fe94:	ldr	r0, [fp, #-4]
   1fe98:	ldr	r1, [fp, #-8]
   1fe9c:	str	r0, [sp, #4]
   1fea0:	bl	1fd00 <test_mixed_type_union@@Base+0xc94>
   1fea4:	add	r1, sp, #8
   1fea8:	str	r0, [sp]
   1feac:	mov	r0, r1
   1feb0:	ldr	r1, [sp]
   1feb4:	bl	27788 <main@@Base+0x47d0>
   1feb8:	ldr	r1, [sp, #8]
   1febc:	ldr	r2, [sp, #12]
   1fec0:	ldr	r0, [sp, #4]
   1fec4:	bl	1fed0 <test_mixed_type_union@@Base+0xe64>
   1fec8:	mov	sp, fp
   1fecc:	pop	{fp, pc}
   1fed0:	push	{fp, lr}
   1fed4:	mov	fp, sp
   1fed8:	sub	sp, sp, #16
   1fedc:	str	r1, [sp, #8]
   1fee0:	str	r2, [sp, #12]
   1fee4:	str	r0, [sp, #4]
   1fee8:	ldr	r0, [sp, #4]
   1feec:	ldr	r1, [sp, #8]
   1fef0:	ldr	r2, [sp, #12]
   1fef4:	bl	2ce4c <flatcc_builder_union_vector_push@@Base>
   1fef8:	mov	sp, fp
   1fefc:	pop	{fp, pc}
   1ff00:	sub	sp, sp, #4
   1ff04:	str	r1, [sp]
   1ff08:	movw	r1, #11
   1ff0c:	strb	r1, [r0]
   1ff10:	ldr	r1, [sp]
   1ff14:	str	r1, [r0, #4]
   1ff18:	add	sp, sp, #4
   1ff1c:	bx	lr
   1ff20:	push	{fp, lr}
   1ff24:	mov	fp, sp
   1ff28:	sub	sp, sp, #24
   1ff2c:	str	r0, [fp, #-4]
   1ff30:	str	r1, [fp, #-8]
   1ff34:	ldr	r0, [fp, #-4]
   1ff38:	ldr	r1, [fp, #-8]
   1ff3c:	add	r2, sp, #8
   1ff40:	str	r0, [sp, #4]
   1ff44:	mov	r0, r2
   1ff48:	bl	278b0 <main@@Base+0x48f8>
   1ff4c:	ldr	r1, [sp, #8]
   1ff50:	ldr	r2, [sp, #12]
   1ff54:	ldr	r0, [sp, #4]
   1ff58:	bl	1fed0 <test_mixed_type_union@@Base+0xe64>
   1ff5c:	mov	sp, fp
   1ff60:	pop	{fp, pc}
   1ff64:	push	{fp, lr}
   1ff68:	mov	fp, sp
   1ff6c:	sub	sp, sp, #8
   1ff70:	str	r0, [sp, #4]
   1ff74:	ldr	r0, [sp, #4]
   1ff78:	bl	27328 <main@@Base+0x4370>
   1ff7c:	mov	sp, fp
   1ff80:	pop	{fp, pc}
   1ff84:	push	{fp, lr}
   1ff88:	mov	fp, sp
   1ff8c:	sub	sp, sp, #24
   1ff90:	str	r0, [fp, #-4]
   1ff94:	ldr	r0, [fp, #-4]
   1ff98:	str	r0, [sp, #8]
   1ff9c:	bl	278d0 <main@@Base+0x4918>
   1ffa0:	add	r1, sp, #12
   1ffa4:	str	r0, [sp, #4]
   1ffa8:	mov	r0, r1
   1ffac:	ldr	r1, [sp, #4]
   1ffb0:	bl	278b0 <main@@Base+0x48f8>
   1ffb4:	ldr	r1, [sp, #12]
   1ffb8:	ldr	r2, [sp, #16]
   1ffbc:	ldr	r0, [sp, #8]
   1ffc0:	bl	1fed0 <test_mixed_type_union@@Base+0xe64>
   1ffc4:	mov	sp, fp
   1ffc8:	pop	{fp, pc}
   1ffcc:	push	{fp, lr}
   1ffd0:	mov	fp, sp
   1ffd4:	sub	sp, sp, #24
   1ffd8:	str	r0, [fp, #-4]
   1ffdc:	str	r1, [fp, #-8]
   1ffe0:	ldr	r0, [fp, #-4]
   1ffe4:	ldr	r1, [fp, #-8]
   1ffe8:	str	r0, [sp, #4]
   1ffec:	bl	1fb54 <test_mixed_type_union@@Base+0xae8>
   1fff0:	add	r1, sp, #8
   1fff4:	str	r0, [sp]
   1fff8:	mov	r0, r1
   1fffc:	ldr	r1, [sp]
   20000:	bl	278b0 <main@@Base+0x48f8>
   20004:	ldr	r1, [sp, #8]
   20008:	ldr	r2, [sp, #12]
   2000c:	ldr	r0, [sp, #4]
   20010:	bl	1fed0 <test_mixed_type_union@@Base+0xe64>
   20014:	mov	sp, fp
   20018:	pop	{fp, pc}
   2001c:	push	{fp, lr}
   20020:	mov	fp, sp
   20024:	sub	sp, sp, #24
   20028:	str	r0, [fp, #-4]
   2002c:	str	r1, [fp, #-8]
   20030:	ldr	r0, [fp, #-4]
   20034:	ldr	r1, [fp, #-8]
   20038:	add	r2, sp, #8
   2003c:	str	r0, [sp, #4]
   20040:	mov	r0, r2
   20044:	bl	1ff00 <test_mixed_type_union@@Base+0xe94>
   20048:	ldr	r1, [sp, #8]
   2004c:	ldr	r2, [sp, #12]
   20050:	ldr	r0, [sp, #4]
   20054:	bl	1fed0 <test_mixed_type_union@@Base+0xe64>
   20058:	mov	sp, fp
   2005c:	pop	{fp, pc}
   20060:	push	{fp, lr}
   20064:	mov	fp, sp
   20068:	sub	sp, sp, #24
   2006c:	str	r0, [fp, #-4]
   20070:	str	r1, [fp, #-8]
   20074:	ldr	r0, [fp, #-4]
   20078:	ldr	r1, [fp, #-8]
   2007c:	str	r0, [sp, #4]
   20080:	bl	19398 <gen_monster@@Base+0xf3c>
   20084:	add	r1, sp, #8
   20088:	str	r0, [sp]
   2008c:	mov	r0, r1
   20090:	ldr	r1, [sp]
   20094:	bl	1ff00 <test_mixed_type_union@@Base+0xe94>
   20098:	ldr	r1, [sp, #8]
   2009c:	ldr	r2, [sp, #12]
   200a0:	ldr	r0, [sp, #4]
   200a4:	bl	1fed0 <test_mixed_type_union@@Base+0xe64>
   200a8:	mov	sp, fp
   200ac:	pop	{fp, pc}
   200b0:	push	{fp, lr}
   200b4:	mov	fp, sp
   200b8:	sub	sp, sp, #16
   200bc:	str	r0, [fp, #-4]
   200c0:	ldr	r0, [fp, #-4]
   200c4:	add	r1, sp, #4
   200c8:	str	r0, [sp]
   200cc:	mov	r0, r1
   200d0:	ldr	r1, [sp]
   200d4:	bl	2cb54 <flatcc_builder_end_union_vector@@Base>
   200d8:	ldr	r1, [sp, #4]
   200dc:	ldr	r2, [sp, #8]
   200e0:	ldr	r0, [sp]
   200e4:	bl	278f0 <main@@Base+0x4938>
   200e8:	mov	sp, fp
   200ec:	pop	{fp, pc}
   200f0:	push	{fp, lr}
   200f4:	mov	fp, sp
   200f8:	sub	sp, sp, #16
   200fc:	str	r0, [fp, #-4]
   20100:	ldr	r0, [fp, #-4]
   20104:	ldr	r1, [fp, #-4]
   20108:	str	r0, [sp, #8]
   2010c:	mov	r0, r1
   20110:	bl	279c4 <main@@Base+0x4a0c>
   20114:	ldr	r1, [sp, #8]
   20118:	str	r0, [sp, #4]
   2011c:	mov	r0, r1
   20120:	ldr	r1, [sp, #4]
   20124:	bl	149ac <test_empty_monster@@Base+0x2b0>
   20128:	mov	sp, fp
   2012c:	pop	{fp, pc}
   20130:	push	{fp, lr}
   20134:	mov	fp, sp
   20138:	sub	sp, sp, #8
   2013c:	ldr	r2, [pc, #36]	; 20168 <test_mixed_type_union@@Base+0x10fc>
   20140:	add	r2, pc, r2
   20144:	ldr	r3, [pc, #32]	; 2016c <test_mixed_type_union@@Base+0x1100>
   20148:	add	r3, pc, r3
   2014c:	str	r0, [sp, #4]
   20150:	str	r1, [sp]
   20154:	ldr	r0, [sp, #4]
   20158:	ldr	r1, [sp]
   2015c:	bl	3072c <flatcc_verify_table_as_root@@Base>
   20160:	mov	sp, fp
   20164:	pop	{fp, pc}
   20168:	muleq	r1, r8, r5
   2016c:	andeq	r5, r0, r4, asr r1
   20170:	push	{fp, lr}
   20174:	mov	fp, sp
   20178:	sub	sp, sp, #16
   2017c:	ldr	r1, [pc, #100]	; 201e8 <test_mixed_type_union@@Base+0x117c>
   20180:	add	r1, pc, r1
   20184:	str	r0, [fp, #-4]
   20188:	str	r1, [sp, #8]
   2018c:	ldr	r0, [fp, #-4]
   20190:	movw	r1, #0
   20194:	cmp	r0, r1
   20198:	beq	201b0 <test_mixed_type_union@@Base+0x1144>
   2019c:	ldr	r0, [fp, #-4]
   201a0:	ldr	r1, [sp, #8]
   201a4:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   201a8:	cmp	r0, #0
   201ac:	bne	201bc <test_mixed_type_union@@Base+0x1150>
   201b0:	movw	r0, #0
   201b4:	str	r0, [sp, #4]
   201b8:	b	201dc <test_mixed_type_union@@Base+0x1170>
   201bc:	ldr	r0, [fp, #-4]
   201c0:	ldr	r1, [fp, #-4]
   201c4:	str	r0, [sp]
   201c8:	mov	r0, r1
   201cc:	bl	23414 <main@@Base+0x45c>
   201d0:	ldr	r1, [sp]
   201d4:	add	r0, r1, r0
   201d8:	str	r0, [sp, #4]
   201dc:	ldr	r0, [sp, #4]
   201e0:	mov	sp, fp
   201e4:	pop	{fp, pc}
   201e8:	andeq	r1, r1, r8, asr r5
   201ec:	push	{fp, lr}
   201f0:	mov	fp, sp
   201f4:	sub	sp, sp, #16
   201f8:	str	r0, [fp, #-4]
   201fc:	movw	r0, #0
   20200:	strh	r0, [fp, #-6]
   20204:	ldr	r0, [fp, #-4]
   20208:	movw	r1, #0
   2020c:	cmp	r0, r1
   20210:	beq	2021c <test_mixed_type_union@@Base+0x11b0>
   20214:	b	20218 <test_mixed_type_union@@Base+0x11ac>
   20218:	b	2023c <test_mixed_type_union@@Base+0x11d0>
   2021c:	ldr	r0, [pc, #136]	; 202ac <test_mixed_type_union@@Base+0x1240>
   20220:	add	r0, pc, r0
   20224:	ldr	r1, [pc, #132]	; 202b0 <test_mixed_type_union@@Base+0x1244>
   20228:	add	r1, pc, r1
   2022c:	ldr	r2, [pc, #128]	; 202b4 <test_mixed_type_union@@Base+0x1248>
   20230:	add	r3, pc, r2
   20234:	movw	r2, #819	; 0x333
   20238:	bl	12e68 <__assert_fail@plt>
   2023c:	mov	r0, #1
   20240:	strh	r0, [sp, #8]
   20244:	ldr	r0, [fp, #-4]
   20248:	str	r0, [sp]
   2024c:	bl	2344c <main@@Base+0x494>
   20250:	ldr	r1, [sp]
   20254:	sub	r0, r1, r0
   20258:	str	r0, [sp, #4]
   2025c:	ldr	r0, [sp, #4]
   20260:	bl	23470 <main@@Base+0x4b8>
   20264:	ldrh	r1, [sp, #8]
   20268:	add	r1, r1, #3
   2026c:	lsl	r1, r1, #1
   20270:	cmp	r0, r1
   20274:	bcc	20290 <test_mixed_type_union@@Base+0x1224>
   20278:	ldr	r0, [sp, #4]
   2027c:	ldrh	r1, [sp, #8]
   20280:	add	r0, r0, r1, lsl #1
   20284:	add	r0, r0, #4
   20288:	bl	23470 <main@@Base+0x4b8>
   2028c:	strh	r0, [fp, #-6]
   20290:	ldrh	r0, [fp, #-6]
   20294:	cmp	r0, #0
   20298:	movw	r0, #0
   2029c:	movne	r0, #1
   202a0:	and	r0, r0, #1
   202a4:	mov	sp, fp
   202a8:	pop	{fp, pc}
   202ac:	andeq	r3, r1, sp, asr #27
   202b0:	andeq	r3, r1, fp, ror #27
   202b4:	andeq	r5, r1, r1, lsl r8
   202b8:	push	{fp, lr}
   202bc:	mov	fp, sp
   202c0:	sub	sp, sp, #16
   202c4:	str	r0, [fp, #-4]
   202c8:	movw	r0, #0
   202cc:	strh	r0, [fp, #-6]
   202d0:	ldr	r0, [fp, #-4]
   202d4:	movw	r1, #0
   202d8:	cmp	r0, r1
   202dc:	beq	202e8 <test_mixed_type_union@@Base+0x127c>
   202e0:	b	202e4 <test_mixed_type_union@@Base+0x1278>
   202e4:	b	20308 <test_mixed_type_union@@Base+0x129c>
   202e8:	ldr	r0, [pc, #136]	; 20378 <test_mixed_type_union@@Base+0x130c>
   202ec:	add	r0, pc, r0
   202f0:	ldr	r1, [pc, #132]	; 2037c <test_mixed_type_union@@Base+0x1310>
   202f4:	add	r1, pc, r1
   202f8:	ldr	r2, [pc, #128]	; 20380 <test_mixed_type_union@@Base+0x1314>
   202fc:	add	r3, pc, r2
   20300:	movw	r2, #823	; 0x337
   20304:	bl	12e68 <__assert_fail@plt>
   20308:	mov	r0, #9
   2030c:	strh	r0, [sp, #8]
   20310:	ldr	r0, [fp, #-4]
   20314:	str	r0, [sp]
   20318:	bl	2344c <main@@Base+0x494>
   2031c:	ldr	r1, [sp]
   20320:	sub	r0, r1, r0
   20324:	str	r0, [sp, #4]
   20328:	ldr	r0, [sp, #4]
   2032c:	bl	23470 <main@@Base+0x4b8>
   20330:	ldrh	r1, [sp, #8]
   20334:	add	r1, r1, #3
   20338:	lsl	r1, r1, #1
   2033c:	cmp	r0, r1
   20340:	bcc	2035c <test_mixed_type_union@@Base+0x12f0>
   20344:	ldr	r0, [sp, #4]
   20348:	ldrh	r1, [sp, #8]
   2034c:	add	r0, r0, r1, lsl #1
   20350:	add	r0, r0, #4
   20354:	bl	23470 <main@@Base+0x4b8>
   20358:	strh	r0, [fp, #-6]
   2035c:	ldrh	r0, [fp, #-6]
   20360:	cmp	r0, #0
   20364:	movw	r0, #0
   20368:	movne	r0, #1
   2036c:	and	r0, r0, #1
   20370:	mov	sp, fp
   20374:	pop	{fp, pc}
   20378:	andeq	r3, r1, r1, lsl #26
   2037c:	andeq	r3, r1, pc, lsl sp
   20380:	andeq	r5, r1, r8, lsl #15
   20384:	push	{fp, lr}
   20388:	mov	fp, sp
   2038c:	sub	sp, sp, #8
   20390:	str	r1, [sp, #4]
   20394:	mov	r1, r0
   20398:	str	r0, [sp]
   2039c:	mov	r0, r1
   203a0:	movw	r1, #0
   203a4:	and	r1, r1, #255	; 0xff
   203a8:	movw	r2, #8
   203ac:	bl	12e2c <memset@plt>
   203b0:	ldr	r0, [sp, #4]
   203b4:	bl	27a34 <main@@Base+0x4a7c>
   203b8:	ldr	r1, [sp]
   203bc:	strb	r0, [r1]
   203c0:	ldrb	r0, [r1]
   203c4:	cmp	r0, #0
   203c8:	bne	203d0 <test_mixed_type_union@@Base+0x1364>
   203cc:	b	203e0 <test_mixed_type_union@@Base+0x1374>
   203d0:	ldr	r0, [sp, #4]
   203d4:	bl	27b28 <main@@Base+0x4b70>
   203d8:	ldr	r1, [sp]
   203dc:	str	r0, [r1, #4]
   203e0:	mov	sp, fp
   203e4:	pop	{fp, pc}
   203e8:	push	{fp, lr}
   203ec:	mov	fp, sp
   203f0:	sub	sp, sp, #8
   203f4:	str	r0, [sp, #4]
   203f8:	ldr	r0, [sp, #4]
   203fc:	movw	r1, #0
   20400:	cmp	r0, r1
   20404:	beq	2041c <test_mixed_type_union@@Base+0x13b0>
   20408:	ldr	r0, [sp, #4]
   2040c:	bl	24400 <main@@Base+0x1448>
   20410:	uxth	r0, r0
   20414:	str	r0, [sp]
   20418:	b	20428 <test_mixed_type_union@@Base+0x13bc>
   2041c:	movw	r0, #0
   20420:	str	r0, [sp]
   20424:	b	20428 <test_mixed_type_union@@Base+0x13bc>
   20428:	ldr	r0, [sp]
   2042c:	uxth	r0, r0
   20430:	mov	sp, fp
   20434:	pop	{fp, pc}
   20438:	push	{fp, lr}
   2043c:	mov	fp, sp
   20440:	sub	sp, sp, #24
   20444:	str	r0, [fp, #-4]
   20448:	movw	r0, #0
   2044c:	strh	r0, [fp, #-6]
   20450:	ldr	r0, [fp, #-4]
   20454:	movw	r1, #0
   20458:	cmp	r0, r1
   2045c:	beq	20468 <test_mixed_type_union@@Base+0x13fc>
   20460:	b	20464 <test_mixed_type_union@@Base+0x13f8>
   20464:	b	20488 <test_mixed_type_union@@Base+0x141c>
   20468:	ldr	r0, [pc, #176]	; 20520 <test_mixed_type_union@@Base+0x14b4>
   2046c:	add	r0, pc, r0
   20470:	ldr	r1, [pc, #172]	; 20524 <test_mixed_type_union@@Base+0x14b8>
   20474:	add	r1, pc, r1
   20478:	ldr	r2, [pc, #168]	; 20528 <test_mixed_type_union@@Base+0x14bc>
   2047c:	add	r3, pc, r2
   20480:	movw	r2, #822	; 0x336
   20484:	bl	12e68 <__assert_fail@plt>
   20488:	mov	r0, #6
   2048c:	strh	r0, [fp, #-8]
   20490:	ldr	r0, [fp, #-4]
   20494:	str	r0, [sp, #8]
   20498:	bl	2344c <main@@Base+0x494>
   2049c:	ldr	r1, [sp, #8]
   204a0:	sub	r0, r1, r0
   204a4:	str	r0, [sp, #12]
   204a8:	ldr	r0, [sp, #12]
   204ac:	bl	23470 <main@@Base+0x4b8>
   204b0:	ldrh	r1, [fp, #-8]
   204b4:	add	r1, r1, #3
   204b8:	lsl	r1, r1, #1
   204bc:	cmp	r0, r1
   204c0:	bcc	204dc <test_mixed_type_union@@Base+0x1470>
   204c4:	ldr	r0, [sp, #12]
   204c8:	ldrh	r1, [fp, #-8]
   204cc:	add	r0, r0, r1, lsl #1
   204d0:	add	r0, r0, #4
   204d4:	bl	23470 <main@@Base+0x4b8>
   204d8:	strh	r0, [fp, #-6]
   204dc:	ldrh	r0, [fp, #-6]
   204e0:	cmp	r0, #0
   204e4:	beq	20504 <test_mixed_type_union@@Base+0x1498>
   204e8:	ldr	r0, [fp, #-4]
   204ec:	ldrh	r1, [fp, #-6]
   204f0:	add	r0, r0, r1
   204f4:	bl	25c44 <main@@Base+0x2c8c>
   204f8:	and	r0, r0, #255	; 0xff
   204fc:	str	r0, [sp, #4]
   20500:	b	20510 <test_mixed_type_union@@Base+0x14a4>
   20504:	movw	r0, #0
   20508:	str	r0, [sp, #4]
   2050c:	b	20510 <test_mixed_type_union@@Base+0x14a4>
   20510:	ldr	r0, [sp, #4]
   20514:	and	r0, r0, #255	; 0xff
   20518:	mov	sp, fp
   2051c:	pop	{fp, pc}
   20520:	andeq	r3, r1, r1, lsl #23
   20524:	muleq	r1, pc, fp	; <UNPREDICTABLE>
   20528:	andeq	r5, r1, r9, ror #13
   2052c:	push	{fp, lr}
   20530:	mov	fp, sp
   20534:	sub	sp, sp, #32
   20538:	str	r0, [fp, #-8]
   2053c:	movw	r0, #0
   20540:	strh	r0, [fp, #-14]
   20544:	ldr	r0, [fp, #-8]
   20548:	movw	r1, #0
   2054c:	cmp	r0, r1
   20550:	beq	2055c <test_mixed_type_union@@Base+0x14f0>
   20554:	b	20558 <test_mixed_type_union@@Base+0x14ec>
   20558:	b	2057c <test_mixed_type_union@@Base+0x1510>
   2055c:	ldr	r0, [pc, #192]	; 20624 <test_mixed_type_union@@Base+0x15b8>
   20560:	add	r0, pc, r0
   20564:	ldr	r1, [pc, #188]	; 20628 <test_mixed_type_union@@Base+0x15bc>
   20568:	add	r1, pc, r1
   2056c:	ldr	r2, [pc, #184]	; 2062c <test_mixed_type_union@@Base+0x15c0>
   20570:	add	r3, pc, r2
   20574:	movw	r2, #822	; 0x336
   20578:	bl	12e68 <__assert_fail@plt>
   2057c:	mov	r0, #7
   20580:	strh	r0, [sp, #16]
   20584:	ldr	r0, [fp, #-8]
   20588:	str	r0, [sp, #8]
   2058c:	bl	2344c <main@@Base+0x494>
   20590:	ldr	r1, [sp, #8]
   20594:	sub	r0, r1, r0
   20598:	str	r0, [sp, #12]
   2059c:	ldr	r0, [sp, #12]
   205a0:	bl	23470 <main@@Base+0x4b8>
   205a4:	ldrh	r1, [sp, #16]
   205a8:	add	r1, r1, #3
   205ac:	lsl	r1, r1, #1
   205b0:	cmp	r0, r1
   205b4:	bcc	205d0 <test_mixed_type_union@@Base+0x1564>
   205b8:	ldr	r0, [sp, #12]
   205bc:	ldrh	r1, [sp, #16]
   205c0:	add	r0, r0, r1, lsl #1
   205c4:	add	r0, r0, #4
   205c8:	bl	23470 <main@@Base+0x4b8>
   205cc:	strh	r0, [fp, #-14]
   205d0:	ldrsh	r0, [fp, #-14]
   205d4:	cmp	r0, #0
   205d8:	beq	20610 <test_mixed_type_union@@Base+0x15a4>
   205dc:	ldr	r0, [fp, #-8]
   205e0:	ldrh	r1, [fp, #-14]
   205e4:	add	r0, r0, r1
   205e8:	str	r0, [fp, #-12]
   205ec:	ldr	r0, [fp, #-12]
   205f0:	ldr	r1, [fp, #-12]
   205f4:	str	r0, [sp, #4]
   205f8:	mov	r0, r1
   205fc:	bl	23414 <main@@Base+0x45c>
   20600:	ldr	r1, [sp, #4]
   20604:	add	r0, r1, r0
   20608:	str	r0, [fp, #-4]
   2060c:	b	20618 <test_mixed_type_union@@Base+0x15ac>
   20610:	movw	r0, #0
   20614:	str	r0, [fp, #-4]
   20618:	ldr	r0, [fp, #-4]
   2061c:	mov	sp, fp
   20620:	pop	{fp, pc}
   20624:	andeq	r3, r1, sp, lsl #21
   20628:	andeq	r3, r1, fp, lsr #21
   2062c:	andeq	r5, r1, r4, asr #12
   20630:	push	{fp, lr}
   20634:	mov	fp, sp
   20638:	sub	sp, sp, #24
   2063c:	str	r0, [fp, #-4]
   20640:	movw	r0, #0
   20644:	strh	r0, [fp, #-6]
   20648:	ldr	r0, [fp, #-4]
   2064c:	movw	r1, #0
   20650:	cmp	r0, r1
   20654:	beq	20660 <test_mixed_type_union@@Base+0x15f4>
   20658:	b	2065c <test_mixed_type_union@@Base+0x15f0>
   2065c:	b	20680 <test_mixed_type_union@@Base+0x1614>
   20660:	ldr	r0, [pc, #176]	; 20718 <test_mixed_type_union@@Base+0x16ac>
   20664:	add	r0, pc, r0
   20668:	ldr	r1, [pc, #172]	; 2071c <test_mixed_type_union@@Base+0x16b0>
   2066c:	add	r1, pc, r1
   20670:	ldr	r2, [pc, #168]	; 20720 <test_mixed_type_union@@Base+0x16b4>
   20674:	add	r3, pc, r2
   20678:	movw	r2, #820	; 0x334
   2067c:	bl	12e68 <__assert_fail@plt>
   20680:	mov	r0, #2
   20684:	strh	r0, [fp, #-8]
   20688:	ldr	r0, [fp, #-4]
   2068c:	str	r0, [sp, #8]
   20690:	bl	2344c <main@@Base+0x494>
   20694:	ldr	r1, [sp, #8]
   20698:	sub	r0, r1, r0
   2069c:	str	r0, [sp, #12]
   206a0:	ldr	r0, [sp, #12]
   206a4:	bl	23470 <main@@Base+0x4b8>
   206a8:	ldrh	r1, [fp, #-8]
   206ac:	add	r1, r1, #3
   206b0:	lsl	r1, r1, #1
   206b4:	cmp	r0, r1
   206b8:	bcc	206d4 <test_mixed_type_union@@Base+0x1668>
   206bc:	ldr	r0, [sp, #12]
   206c0:	ldrh	r1, [fp, #-8]
   206c4:	add	r0, r0, r1, lsl #1
   206c8:	add	r0, r0, #4
   206cc:	bl	23470 <main@@Base+0x4b8>
   206d0:	strh	r0, [fp, #-6]
   206d4:	ldrh	r0, [fp, #-6]
   206d8:	cmp	r0, #0
   206dc:	beq	206fc <test_mixed_type_union@@Base+0x1690>
   206e0:	ldr	r0, [fp, #-4]
   206e4:	ldrh	r1, [fp, #-6]
   206e8:	add	r0, r0, r1
   206ec:	bl	25c44 <main@@Base+0x2c8c>
   206f0:	and	r0, r0, #255	; 0xff
   206f4:	str	r0, [sp, #4]
   206f8:	b	20708 <test_mixed_type_union@@Base+0x169c>
   206fc:	movw	r0, #0
   20700:	str	r0, [sp, #4]
   20704:	b	20708 <test_mixed_type_union@@Base+0x169c>
   20708:	ldr	r0, [sp, #4]
   2070c:	and	r0, r0, #255	; 0xff
   20710:	mov	sp, fp
   20714:	pop	{fp, pc}
   20718:	andeq	r3, r1, r9, lsl #19
   2071c:	andeq	r3, r1, r7, lsr #19
   20720:	andeq	r5, r1, r1, lsl #11
   20724:	push	{fp, lr}
   20728:	mov	fp, sp
   2072c:	sub	sp, sp, #32
   20730:	str	r0, [fp, #-8]
   20734:	movw	r0, #0
   20738:	strh	r0, [fp, #-14]
   2073c:	ldr	r0, [fp, #-8]
   20740:	movw	r1, #0
   20744:	cmp	r0, r1
   20748:	beq	20754 <test_mixed_type_union@@Base+0x16e8>
   2074c:	b	20750 <test_mixed_type_union@@Base+0x16e4>
   20750:	b	20774 <test_mixed_type_union@@Base+0x1708>
   20754:	ldr	r0, [pc, #192]	; 2081c <test_mixed_type_union@@Base+0x17b0>
   20758:	add	r0, pc, r0
   2075c:	ldr	r1, [pc, #188]	; 20820 <test_mixed_type_union@@Base+0x17b4>
   20760:	add	r1, pc, r1
   20764:	ldr	r2, [pc, #184]	; 20824 <test_mixed_type_union@@Base+0x17b8>
   20768:	add	r3, pc, r2
   2076c:	movw	r2, #820	; 0x334
   20770:	bl	12e68 <__assert_fail@plt>
   20774:	mov	r0, #3
   20778:	strh	r0, [sp, #16]
   2077c:	ldr	r0, [fp, #-8]
   20780:	str	r0, [sp, #8]
   20784:	bl	2344c <main@@Base+0x494>
   20788:	ldr	r1, [sp, #8]
   2078c:	sub	r0, r1, r0
   20790:	str	r0, [sp, #12]
   20794:	ldr	r0, [sp, #12]
   20798:	bl	23470 <main@@Base+0x4b8>
   2079c:	ldrh	r1, [sp, #16]
   207a0:	add	r1, r1, #3
   207a4:	lsl	r1, r1, #1
   207a8:	cmp	r0, r1
   207ac:	bcc	207c8 <test_mixed_type_union@@Base+0x175c>
   207b0:	ldr	r0, [sp, #12]
   207b4:	ldrh	r1, [sp, #16]
   207b8:	add	r0, r0, r1, lsl #1
   207bc:	add	r0, r0, #4
   207c0:	bl	23470 <main@@Base+0x4b8>
   207c4:	strh	r0, [fp, #-14]
   207c8:	ldrsh	r0, [fp, #-14]
   207cc:	cmp	r0, #0
   207d0:	beq	20808 <test_mixed_type_union@@Base+0x179c>
   207d4:	ldr	r0, [fp, #-8]
   207d8:	ldrh	r1, [fp, #-14]
   207dc:	add	r0, r0, r1
   207e0:	str	r0, [fp, #-12]
   207e4:	ldr	r0, [fp, #-12]
   207e8:	ldr	r1, [fp, #-12]
   207ec:	str	r0, [sp, #4]
   207f0:	mov	r0, r1
   207f4:	bl	23414 <main@@Base+0x45c>
   207f8:	ldr	r1, [sp, #4]
   207fc:	add	r0, r1, r0
   20800:	str	r0, [fp, #-4]
   20804:	b	20810 <test_mixed_type_union@@Base+0x17a4>
   20808:	movw	r0, #0
   2080c:	str	r0, [fp, #-4]
   20810:	ldr	r0, [fp, #-4]
   20814:	mov	sp, fp
   20818:	pop	{fp, pc}
   2081c:	muleq	r1, r5, r8
   20820:			; <UNDEFINED> instruction: 0x000138b3
   20824:	andeq	r5, r1, r1, ror #9
   20828:	push	{fp, lr}
   2082c:	mov	fp, sp
   20830:	sub	sp, sp, #24
   20834:	str	r0, [fp, #-4]
   20838:	movw	r0, #0
   2083c:	strh	r0, [fp, #-6]
   20840:	ldr	r0, [fp, #-4]
   20844:	movw	r1, #0
   20848:	cmp	r0, r1
   2084c:	beq	20858 <test_mixed_type_union@@Base+0x17ec>
   20850:	b	20854 <test_mixed_type_union@@Base+0x17e8>
   20854:	b	20878 <test_mixed_type_union@@Base+0x180c>
   20858:	ldr	r0, [pc, #168]	; 20908 <test_mixed_type_union@@Base+0x189c>
   2085c:	add	r0, pc, r0
   20860:	ldr	r1, [pc, #164]	; 2090c <test_mixed_type_union@@Base+0x18a0>
   20864:	add	r1, pc, r1
   20868:	ldr	r2, [pc, #160]	; 20910 <test_mixed_type_union@@Base+0x18a4>
   2086c:	add	r3, pc, r2
   20870:	movw	r2, #770	; 0x302
   20874:	bl	12e68 <__assert_fail@plt>
   20878:	mov	r0, #0
   2087c:	strh	r0, [fp, #-8]
   20880:	ldr	r0, [fp, #-4]
   20884:	str	r0, [sp, #8]
   20888:	bl	2344c <main@@Base+0x494>
   2088c:	ldr	r1, [sp, #8]
   20890:	sub	r0, r1, r0
   20894:	str	r0, [sp, #12]
   20898:	ldr	r0, [sp, #12]
   2089c:	bl	23470 <main@@Base+0x4b8>
   208a0:	ldrh	r1, [fp, #-8]
   208a4:	add	r1, r1, #3
   208a8:	lsl	r1, r1, #1
   208ac:	cmp	r0, r1
   208b0:	bcc	208cc <test_mixed_type_union@@Base+0x1860>
   208b4:	ldr	r0, [sp, #12]
   208b8:	ldrh	r1, [fp, #-8]
   208bc:	add	r0, r0, r1, lsl #1
   208c0:	add	r0, r0, #4
   208c4:	bl	23470 <main@@Base+0x4b8>
   208c8:	strh	r0, [fp, #-6]
   208cc:	ldrh	r0, [fp, #-6]
   208d0:	cmp	r0, #0
   208d4:	beq	208f0 <test_mixed_type_union@@Base+0x1884>
   208d8:	ldr	r0, [fp, #-4]
   208dc:	ldrh	r1, [fp, #-6]
   208e0:	add	r0, r0, r1
   208e4:	bl	2433c <main@@Base+0x1384>
   208e8:	str	r0, [sp, #4]
   208ec:	b	208fc <test_mixed_type_union@@Base+0x1890>
   208f0:	movw	r0, #0
   208f4:	str	r0, [sp, #4]
   208f8:	b	208fc <test_mixed_type_union@@Base+0x1890>
   208fc:	ldr	r0, [sp, #4]
   20900:	mov	sp, fp
   20904:	pop	{fp, pc}
   20908:	muleq	r1, r1, r7
   2090c:	andeq	r3, r1, pc, lsr #15
   20910:	andeq	r5, r1, r3, lsr #8
   20914:	push	{fp, lr}
   20918:	mov	fp, sp
   2091c:	sub	sp, sp, #24
   20920:	str	r0, [fp, #-4]
   20924:	movw	r0, #0
   20928:	strh	r0, [fp, #-6]
   2092c:	ldr	r0, [fp, #-4]
   20930:	movw	r1, #0
   20934:	cmp	r0, r1
   20938:	beq	20944 <test_mixed_type_union@@Base+0x18d8>
   2093c:	b	20940 <test_mixed_type_union@@Base+0x18d4>
   20940:	b	20964 <test_mixed_type_union@@Base+0x18f8>
   20944:	ldr	r0, [pc, #176]	; 209fc <test_mixed_type_union@@Base+0x1990>
   20948:	add	r0, pc, r0
   2094c:	ldr	r1, [pc, #172]	; 20a00 <test_mixed_type_union@@Base+0x1994>
   20950:	add	r1, pc, r1
   20954:	ldr	r2, [pc, #168]	; 20a04 <test_mixed_type_union@@Base+0x1998>
   20958:	add	r3, pc, r2
   2095c:	movw	r2, #821	; 0x335
   20960:	bl	12e68 <__assert_fail@plt>
   20964:	mov	r0, #4
   20968:	strh	r0, [fp, #-8]
   2096c:	ldr	r0, [fp, #-4]
   20970:	str	r0, [sp, #8]
   20974:	bl	2344c <main@@Base+0x494>
   20978:	ldr	r1, [sp, #8]
   2097c:	sub	r0, r1, r0
   20980:	str	r0, [sp, #12]
   20984:	ldr	r0, [sp, #12]
   20988:	bl	23470 <main@@Base+0x4b8>
   2098c:	ldrh	r1, [fp, #-8]
   20990:	add	r1, r1, #3
   20994:	lsl	r1, r1, #1
   20998:	cmp	r0, r1
   2099c:	bcc	209b8 <test_mixed_type_union@@Base+0x194c>
   209a0:	ldr	r0, [sp, #12]
   209a4:	ldrh	r1, [fp, #-8]
   209a8:	add	r0, r0, r1, lsl #1
   209ac:	add	r0, r0, #4
   209b0:	bl	23470 <main@@Base+0x4b8>
   209b4:	strh	r0, [fp, #-6]
   209b8:	ldrh	r0, [fp, #-6]
   209bc:	cmp	r0, #0
   209c0:	beq	209e0 <test_mixed_type_union@@Base+0x1974>
   209c4:	ldr	r0, [fp, #-4]
   209c8:	ldrh	r1, [fp, #-6]
   209cc:	add	r0, r0, r1
   209d0:	bl	25c44 <main@@Base+0x2c8c>
   209d4:	and	r0, r0, #255	; 0xff
   209d8:	str	r0, [sp, #4]
   209dc:	b	209ec <test_mixed_type_union@@Base+0x1980>
   209e0:	movw	r0, #0
   209e4:	str	r0, [sp, #4]
   209e8:	b	209ec <test_mixed_type_union@@Base+0x1980>
   209ec:	ldr	r0, [sp, #4]
   209f0:	and	r0, r0, #255	; 0xff
   209f4:	mov	sp, fp
   209f8:	pop	{fp, pc}
   209fc:	andeq	r3, r1, r5, lsr #13
   20a00:	andeq	r3, r1, r3, asr #13
   20a04:	andeq	r5, r1, lr, ror r3
   20a08:	push	{fp, lr}
   20a0c:	mov	fp, sp
   20a10:	sub	sp, sp, #16
   20a14:	str	r0, [fp, #-4]
   20a18:	ldr	r0, [fp, #-4]
   20a1c:	movw	r1, #0
   20a20:	cmp	r0, r1
   20a24:	beq	20a44 <test_mixed_type_union@@Base+0x19d8>
   20a28:	ldr	r0, [fp, #-4]
   20a2c:	str	r0, [sp, #8]
   20a30:	bl	27c2c <main@@Base+0x4c74>
   20a34:	ldr	r1, [sp, #8]
   20a38:	add	r0, r1, r0
   20a3c:	str	r0, [sp, #4]
   20a40:	b	20a50 <test_mixed_type_union@@Base+0x19e4>
   20a44:	movw	r0, #0
   20a48:	str	r0, [sp, #4]
   20a4c:	b	20a50 <test_mixed_type_union@@Base+0x19e4>
   20a50:	ldr	r0, [sp, #4]
   20a54:	mov	sp, fp
   20a58:	pop	{fp, pc}
   20a5c:	push	{fp, lr}
   20a60:	mov	fp, sp
   20a64:	sub	sp, sp, #32
   20a68:	str	r0, [fp, #-8]
   20a6c:	movw	r0, #0
   20a70:	strh	r0, [fp, #-14]
   20a74:	ldr	r0, [fp, #-8]
   20a78:	movw	r1, #0
   20a7c:	cmp	r0, r1
   20a80:	beq	20a8c <test_mixed_type_union@@Base+0x1a20>
   20a84:	b	20a88 <test_mixed_type_union@@Base+0x1a1c>
   20a88:	b	20aac <test_mixed_type_union@@Base+0x1a40>
   20a8c:	ldr	r0, [pc, #192]	; 20b54 <test_mixed_type_union@@Base+0x1ae8>
   20a90:	add	r0, pc, r0
   20a94:	ldr	r1, [pc, #188]	; 20b58 <test_mixed_type_union@@Base+0x1aec>
   20a98:	add	r1, pc, r1
   20a9c:	ldr	r2, [pc, #184]	; 20b5c <test_mixed_type_union@@Base+0x1af0>
   20aa0:	add	r3, pc, r2
   20aa4:	movw	r2, #821	; 0x335
   20aa8:	bl	12e68 <__assert_fail@plt>
   20aac:	mov	r0, #5
   20ab0:	strh	r0, [sp, #16]
   20ab4:	ldr	r0, [fp, #-8]
   20ab8:	str	r0, [sp, #8]
   20abc:	bl	2344c <main@@Base+0x494>
   20ac0:	ldr	r1, [sp, #8]
   20ac4:	sub	r0, r1, r0
   20ac8:	str	r0, [sp, #12]
   20acc:	ldr	r0, [sp, #12]
   20ad0:	bl	23470 <main@@Base+0x4b8>
   20ad4:	ldrh	r1, [sp, #16]
   20ad8:	add	r1, r1, #3
   20adc:	lsl	r1, r1, #1
   20ae0:	cmp	r0, r1
   20ae4:	bcc	20b00 <test_mixed_type_union@@Base+0x1a94>
   20ae8:	ldr	r0, [sp, #12]
   20aec:	ldrh	r1, [sp, #16]
   20af0:	add	r0, r0, r1, lsl #1
   20af4:	add	r0, r0, #4
   20af8:	bl	23470 <main@@Base+0x4b8>
   20afc:	strh	r0, [fp, #-14]
   20b00:	ldrsh	r0, [fp, #-14]
   20b04:	cmp	r0, #0
   20b08:	beq	20b40 <test_mixed_type_union@@Base+0x1ad4>
   20b0c:	ldr	r0, [fp, #-8]
   20b10:	ldrh	r1, [fp, #-14]
   20b14:	add	r0, r0, r1
   20b18:	str	r0, [fp, #-12]
   20b1c:	ldr	r0, [fp, #-12]
   20b20:	ldr	r1, [fp, #-12]
   20b24:	str	r0, [sp, #4]
   20b28:	mov	r0, r1
   20b2c:	bl	23414 <main@@Base+0x45c>
   20b30:	ldr	r1, [sp, #4]
   20b34:	add	r0, r1, r0
   20b38:	str	r0, [fp, #-4]
   20b3c:	b	20b48 <test_mixed_type_union@@Base+0x1adc>
   20b40:	movw	r0, #0
   20b44:	str	r0, [fp, #-4]
   20b48:	ldr	r0, [fp, #-4]
   20b4c:	mov	sp, fp
   20b50:	pop	{fp, pc}
   20b54:	andeq	r3, r1, sp, asr r5
   20b58:	andeq	r3, r1, fp, ror r5
   20b5c:	andeq	r5, r1, r9, lsl #5
   20b60:	push	{fp, lr}
   20b64:	mov	fp, sp
   20b68:	sub	sp, sp, #8
   20b6c:	str	r0, [sp, #4]
   20b70:	ldr	r0, [sp, #4]
   20b74:	bl	20a5c <test_mixed_type_union@@Base+0x19f0>
   20b78:	bl	20a08 <test_mixed_type_union@@Base+0x199c>
   20b7c:	mov	sp, fp
   20b80:	pop	{fp, pc}
   20b84:	push	{fp, lr}
   20b88:	mov	fp, sp
   20b8c:	sub	sp, sp, #8
   20b90:	str	r1, [sp, #4]
   20b94:	mov	r1, r0
   20b98:	str	r0, [sp]
   20b9c:	mov	r0, r1
   20ba0:	movw	r1, #0
   20ba4:	and	r1, r1, #255	; 0xff
   20ba8:	movw	r2, #8
   20bac:	bl	12e2c <memset@plt>
   20bb0:	ldr	r0, [sp, #4]
   20bb4:	bl	20914 <test_mixed_type_union@@Base+0x18a8>
   20bb8:	ldr	r1, [sp]
   20bbc:	strb	r0, [r1]
   20bc0:	ldrb	r0, [r1]
   20bc4:	cmp	r0, #0
   20bc8:	bne	20bd0 <test_mixed_type_union@@Base+0x1b64>
   20bcc:	b	20be0 <test_mixed_type_union@@Base+0x1b74>
   20bd0:	ldr	r0, [sp, #4]
   20bd4:	bl	20a5c <test_mixed_type_union@@Base+0x19f0>
   20bd8:	ldr	r1, [sp]
   20bdc:	str	r0, [r1, #4]
   20be0:	mov	sp, fp
   20be4:	pop	{fp, pc}
   20be8:	push	{fp, lr}
   20bec:	mov	fp, sp
   20bf0:	sub	sp, sp, #8
   20bf4:	str	r0, [sp]
   20bf8:	str	r1, [sp, #4]
   20bfc:	ldr	r0, [sp, #4]
   20c00:	bl	20a08 <test_mixed_type_union@@Base+0x199c>
   20c04:	mov	sp, fp
   20c08:	pop	{fp, pc}
   20c0c:	push	{fp, lr}
   20c10:	mov	fp, sp
   20c14:	sub	sp, sp, #16
   20c18:	str	r1, [fp, #-4]
   20c1c:	ldr	r1, [fp, #-4]
   20c20:	str	r0, [sp, #8]
   20c24:	mov	r0, r1
   20c28:	bl	20d70 <test_mixed_type_union@@Base+0x1d04>
   20c2c:	ldr	r1, [sp, #8]
   20c30:	str	r0, [r1]
   20c34:	ldr	r0, [fp, #-4]
   20c38:	bl	27c34 <main@@Base+0x4c7c>
   20c3c:	ldr	r1, [sp, #8]
   20c40:	str	r0, [r1, #4]
   20c44:	ldr	r0, [r1]
   20c48:	bl	25bb8 <main@@Base+0x2c00>
   20c4c:	ldr	r1, [sp, #8]
   20c50:	ldr	r2, [r1, #4]
   20c54:	str	r0, [sp, #4]
   20c58:	mov	r0, r2
   20c5c:	bl	25bb8 <main@@Base+0x2c00>
   20c60:	ldr	r1, [sp, #4]
   20c64:	cmp	r1, r0
   20c68:	bne	20c74 <test_mixed_type_union@@Base+0x1c08>
   20c6c:	b	20c70 <test_mixed_type_union@@Base+0x1c04>
   20c70:	b	20c94 <test_mixed_type_union@@Base+0x1c28>
   20c74:	ldr	r0, [pc, #32]	; 20c9c <test_mixed_type_union@@Base+0x1c30>
   20c78:	add	r0, pc, r0
   20c7c:	ldr	r1, [pc, #28]	; 20ca0 <test_mixed_type_union@@Base+0x1c34>
   20c80:	add	r1, pc, r1
   20c84:	ldr	r2, [pc, #24]	; 20ca4 <test_mixed_type_union@@Base+0x1c38>
   20c88:	add	r3, pc, r2
   20c8c:	movw	r2, #823	; 0x337
   20c90:	bl	12e68 <__assert_fail@plt>
   20c94:	mov	sp, fp
   20c98:	pop	{fp, pc}
   20c9c:	andeq	r4, r1, sl, ror #21
   20ca0:	muleq	r1, r3, r3
   20ca4:	andeq	r5, r1, r6, ror #1
   20ca8:	push	{fp, lr}
   20cac:	mov	fp, sp
   20cb0:	sub	sp, sp, #24
   20cb4:	str	r1, [fp, #-8]
   20cb8:	str	r2, [fp, #-4]
   20cbc:	str	r3, [sp, #12]
   20cc0:	mov	r1, r0
   20cc4:	str	r0, [sp, #4]
   20cc8:	mov	r0, r1
   20ccc:	movw	r1, #0
   20cd0:	and	r1, r1, #255	; 0xff
   20cd4:	movw	r2, #8
   20cd8:	bl	12e2c <memset@plt>
   20cdc:	ldr	r0, [fp, #-8]
   20ce0:	bl	25bb8 <main@@Base+0x2c00>
   20ce4:	str	r0, [sp, #8]
   20ce8:	ldr	r0, [sp, #8]
   20cec:	ldr	r1, [sp, #12]
   20cf0:	cmp	r0, r1
   20cf4:	bls	20d00 <test_mixed_type_union@@Base+0x1c94>
   20cf8:	b	20cfc <test_mixed_type_union@@Base+0x1c90>
   20cfc:	b	20d20 <test_mixed_type_union@@Base+0x1cb4>
   20d00:	ldr	r0, [pc, #92]	; 20d64 <test_mixed_type_union@@Base+0x1cf8>
   20d04:	add	r0, pc, r0
   20d08:	ldr	r1, [pc, #88]	; 20d68 <test_mixed_type_union@@Base+0x1cfc>
   20d0c:	add	r1, pc, r1
   20d10:	ldr	r2, [pc, #84]	; 20d6c <test_mixed_type_union@@Base+0x1d00>
   20d14:	add	r3, pc, r2
   20d18:	movw	r2, #773	; 0x305
   20d1c:	bl	12e68 <__assert_fail@plt>
   20d20:	ldr	r0, [fp, #-8]
   20d24:	ldr	r1, [sp, #12]
   20d28:	add	r0, r0, r1
   20d2c:	ldrb	r0, [r0]
   20d30:	ldr	r1, [sp, #4]
   20d34:	strb	r0, [r1]
   20d38:	ldrb	r0, [r1]
   20d3c:	cmp	r0, #0
   20d40:	bne	20d48 <test_mixed_type_union@@Base+0x1cdc>
   20d44:	b	20d5c <test_mixed_type_union@@Base+0x1cf0>
   20d48:	ldr	r0, [fp, #-4]
   20d4c:	ldr	r1, [sp, #12]
   20d50:	bl	1ed60 <test_union_vector@@Base+0x998>
   20d54:	ldr	r1, [sp, #4]
   20d58:	str	r0, [r1, #4]
   20d5c:	mov	sp, fp
   20d60:	pop	{fp, pc}
   20d64:	andeq	r4, r1, pc, lsl fp
   20d68:	andeq	r3, r1, r7, lsl #6
   20d6c:	strdeq	r5, [r1], -r8
   20d70:	push	{fp, lr}
   20d74:	mov	fp, sp
   20d78:	sub	sp, sp, #32
   20d7c:	str	r0, [fp, #-8]
   20d80:	movw	r0, #0
   20d84:	strh	r0, [fp, #-14]
   20d88:	ldr	r0, [fp, #-8]
   20d8c:	movw	r1, #0
   20d90:	cmp	r0, r1
   20d94:	beq	20da0 <test_mixed_type_union@@Base+0x1d34>
   20d98:	b	20d9c <test_mixed_type_union@@Base+0x1d30>
   20d9c:	b	20dc0 <test_mixed_type_union@@Base+0x1d54>
   20da0:	ldr	r0, [pc, #196]	; 20e6c <test_mixed_type_union@@Base+0x1e00>
   20da4:	add	r0, pc, r0
   20da8:	ldr	r1, [pc, #192]	; 20e70 <test_mixed_type_union@@Base+0x1e04>
   20dac:	add	r1, pc, r1
   20db0:	ldr	r2, [pc, #188]	; 20e74 <test_mixed_type_union@@Base+0x1e08>
   20db4:	add	r3, pc, r2
   20db8:	movw	r2, #823	; 0x337
   20dbc:	bl	12e68 <__assert_fail@plt>
   20dc0:	mov	r0, #8
   20dc4:	strh	r0, [sp, #16]
   20dc8:	ldr	r0, [fp, #-8]
   20dcc:	str	r0, [sp, #8]
   20dd0:	bl	2344c <main@@Base+0x494>
   20dd4:	ldr	r1, [sp, #8]
   20dd8:	sub	r0, r1, r0
   20ddc:	str	r0, [sp, #12]
   20de0:	ldr	r0, [sp, #12]
   20de4:	bl	23470 <main@@Base+0x4b8>
   20de8:	ldrh	r1, [sp, #16]
   20dec:	add	r1, r1, #3
   20df0:	lsl	r1, r1, #1
   20df4:	cmp	r0, r1
   20df8:	bcc	20e14 <test_mixed_type_union@@Base+0x1da8>
   20dfc:	ldr	r0, [sp, #12]
   20e00:	ldrh	r1, [sp, #16]
   20e04:	add	r0, r0, r1, lsl #1
   20e08:	add	r0, r0, #4
   20e0c:	bl	23470 <main@@Base+0x4b8>
   20e10:	strh	r0, [fp, #-14]
   20e14:	ldrsh	r0, [fp, #-14]
   20e18:	cmp	r0, #0
   20e1c:	beq	20e58 <test_mixed_type_union@@Base+0x1dec>
   20e20:	ldr	r0, [fp, #-8]
   20e24:	ldrh	r1, [fp, #-14]
   20e28:	add	r0, r0, r1
   20e2c:	str	r0, [fp, #-12]
   20e30:	ldr	r0, [fp, #-12]
   20e34:	add	r0, r0, #4
   20e38:	ldr	r1, [fp, #-12]
   20e3c:	str	r0, [sp, #4]
   20e40:	mov	r0, r1
   20e44:	bl	23414 <main@@Base+0x45c>
   20e48:	ldr	r1, [sp, #4]
   20e4c:	add	r0, r1, r0
   20e50:	str	r0, [fp, #-4]
   20e54:	b	20e60 <test_mixed_type_union@@Base+0x1df4>
   20e58:	movw	r0, #0
   20e5c:	str	r0, [fp, #-4]
   20e60:	ldr	r0, [fp, #-4]
   20e64:	mov	sp, fp
   20e68:	pop	{fp, pc}
   20e6c:	andeq	r3, r1, r9, asr #4
   20e70:	andeq	r3, r1, r7, ror #4
   20e74:	strheq	r5, [r1], -r8
   20e78:	push	{fp, lr}
   20e7c:	mov	fp, sp
   20e80:	sub	sp, sp, #16
   20e84:	str	r0, [sp, #8]
   20e88:	str	r1, [sp, #12]
   20e8c:	str	r2, [sp, #4]
   20e90:	ldr	r0, [sp, #12]
   20e94:	ldr	r1, [sp, #4]
   20e98:	bl	27d3c <main@@Base+0x4d84>
   20e9c:	mov	sp, fp
   20ea0:	pop	{fp, pc}
   20ea4:	push	{fp, lr}
   20ea8:	mov	fp, sp
   20eac:	sub	sp, sp, #8
   20eb0:	str	r0, [sp]
   20eb4:	str	r1, [sp, #4]
   20eb8:	ldr	r0, [sp]
   20ebc:	bl	25bb8 <main@@Base+0x2c00>
   20ec0:	mov	sp, fp
   20ec4:	pop	{fp, pc}

00020ec8 <test_add_set_defaults@@Base>:
   20ec8:	push	{fp, lr}
   20ecc:	mov	fp, sp
   20ed0:	sub	sp, sp, #80	; 0x50
   20ed4:	str	r0, [fp, #-8]
   20ed8:	ldr	r0, [fp, #-8]
   20edc:	bl	286d4 <flatcc_builder_reset@@Base>
   20ee0:	ldr	r1, [fp, #-8]
   20ee4:	str	r0, [fp, #-24]	; 0xffffffe8
   20ee8:	mov	r0, r1
   20eec:	bl	18cdc <gen_monster@@Base+0x880>
   20ef0:	ldr	r1, [pc, #572]	; 21134 <test_add_set_defaults@@Base+0x26c>
   20ef4:	add	r1, pc, r1
   20ef8:	ldr	r2, [fp, #-8]
   20efc:	str	r0, [fp, #-28]	; 0xffffffe4
   20f00:	mov	r0, r2
   20f04:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   20f08:	ldr	r1, [fp, #-8]
   20f0c:	str	r0, [fp, #-32]	; 0xffffffe0
   20f10:	mov	r0, r1
   20f14:	movw	r1, #100	; 0x64
   20f18:	sxth	r1, r1
   20f1c:	bl	18d2c <gen_monster@@Base+0x8d0>
   20f20:	ldr	r1, [fp, #-8]
   20f24:	str	r0, [fp, #-36]	; 0xffffffdc
   20f28:	mov	r0, r1
   20f2c:	movw	r1, #100	; 0x64
   20f30:	sxth	r1, r1
   20f34:	bl	21154 <test_add_set_defaults@@Base+0x28c>
   20f38:	ldr	r1, [fp, #-8]
   20f3c:	str	r0, [sp, #40]	; 0x28
   20f40:	mov	r0, r1
   20f44:	movw	r1, #8
   20f48:	sxtb	r1, r1
   20f4c:	bl	18df4 <gen_monster@@Base+0x998>
   20f50:	ldr	r1, [fp, #-8]
   20f54:	str	r0, [sp, #36]	; 0x24
   20f58:	mov	r0, r1
   20f5c:	bl	19880 <gen_monster@@Base+0x1424>
   20f60:	ldr	r1, [fp, #-8]
   20f64:	str	r0, [sp, #32]
   20f68:	mov	r0, r1
   20f6c:	sub	r1, fp, #16
   20f70:	bl	2d8a8 <flatcc_builder_get_direct_buffer@@Base>
   20f74:	str	r0, [fp, #-12]
   20f78:	ldr	r0, [fp, #-12]
   20f7c:	bl	131f4 <verify_empty_monster@@Base+0x28c>
   20f80:	str	r0, [fp, #-20]	; 0xffffffec
   20f84:	ldr	r0, [fp, #-20]	; 0xffffffec
   20f88:	bl	13364 <verify_empty_monster@@Base+0x3fc>
   20f8c:	cmp	r0, #0
   20f90:	beq	20fac <test_add_set_defaults@@Base+0xe4>
   20f94:	ldr	r0, [pc, #436]	; 21150 <test_add_set_defaults@@Base+0x288>
   20f98:	add	r0, pc, r0
   20f9c:	bl	12d9c <printf@plt>
   20fa0:	mvn	r1, #0
   20fa4:	str	r1, [fp, #-4]
   20fa8:	b	21128 <test_add_set_defaults@@Base+0x260>
   20fac:	ldr	r0, [fp, #-20]	; 0xffffffec
   20fb0:	bl	1725c <verify_monster@@Base+0x1890>
   20fb4:	cmp	r0, #0
   20fb8:	bne	20fd4 <test_add_set_defaults@@Base+0x10c>
   20fbc:	ldr	r0, [pc, #372]	; 21138 <test_add_set_defaults@@Base+0x270>
   20fc0:	add	r0, pc, r0
   20fc4:	bl	12d9c <printf@plt>
   20fc8:	mvn	r1, #0
   20fcc:	str	r1, [fp, #-4]
   20fd0:	b	21128 <test_add_set_defaults@@Base+0x260>
   20fd4:	ldr	r0, [fp, #-20]	; 0xffffffec
   20fd8:	bl	211d4 <test_add_set_defaults@@Base+0x30c>
   20fdc:	cmp	r0, #0
   20fe0:	beq	20ffc <test_add_set_defaults@@Base+0x134>
   20fe4:	ldr	r0, [pc, #352]	; 2114c <test_add_set_defaults@@Base+0x284>
   20fe8:	add	r0, pc, r0
   20fec:	bl	12d9c <printf@plt>
   20ff0:	mvn	r1, #0
   20ff4:	str	r1, [fp, #-4]
   20ff8:	b	21128 <test_add_set_defaults@@Base+0x260>
   20ffc:	ldr	r0, [fp, #-8]
   21000:	bl	286d4 <flatcc_builder_reset@@Base>
   21004:	ldr	r1, [fp, #-8]
   21008:	str	r0, [sp, #28]
   2100c:	mov	r0, r1
   21010:	bl	18cdc <gen_monster@@Base+0x880>
   21014:	ldr	r1, [pc, #288]	; 2113c <test_add_set_defaults@@Base+0x274>
   21018:	add	r1, pc, r1
   2101c:	ldr	r2, [fp, #-8]
   21020:	str	r0, [sp, #24]
   21024:	mov	r0, r2
   21028:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   2102c:	ldr	r1, [fp, #-8]
   21030:	str	r0, [sp, #20]
   21034:	mov	r0, r1
   21038:	movw	r1, #100	; 0x64
   2103c:	sxth	r1, r1
   21040:	bl	212a0 <test_add_set_defaults@@Base+0x3d8>
   21044:	ldr	r1, [fp, #-8]
   21048:	str	r0, [sp, #16]
   2104c:	mov	r0, r1
   21050:	movw	r1, #100	; 0x64
   21054:	sxth	r1, r1
   21058:	bl	2130c <test_add_set_defaults@@Base+0x444>
   2105c:	ldr	r1, [fp, #-8]
   21060:	str	r0, [sp, #12]
   21064:	mov	r0, r1
   21068:	movw	r1, #8
   2106c:	sxtb	r1, r1
   21070:	bl	21374 <test_add_set_defaults@@Base+0x4ac>
   21074:	ldr	r1, [fp, #-8]
   21078:	str	r0, [sp, #8]
   2107c:	mov	r0, r1
   21080:	bl	19880 <gen_monster@@Base+0x1424>
   21084:	ldr	r1, [fp, #-8]
   21088:	str	r0, [sp, #4]
   2108c:	mov	r0, r1
   21090:	sub	r1, fp, #16
   21094:	bl	2d8a8 <flatcc_builder_get_direct_buffer@@Base>
   21098:	str	r0, [fp, #-12]
   2109c:	ldr	r0, [fp, #-12]
   210a0:	bl	131f4 <verify_empty_monster@@Base+0x28c>
   210a4:	str	r0, [fp, #-20]	; 0xffffffec
   210a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   210ac:	bl	13364 <verify_empty_monster@@Base+0x3fc>
   210b0:	cmp	r0, #0
   210b4:	bne	210d0 <test_add_set_defaults@@Base+0x208>
   210b8:	ldr	r0, [pc, #128]	; 21140 <test_add_set_defaults@@Base+0x278>
   210bc:	add	r0, pc, r0
   210c0:	bl	12d9c <printf@plt>
   210c4:	mvn	r1, #0
   210c8:	str	r1, [fp, #-4]
   210cc:	b	21128 <test_add_set_defaults@@Base+0x260>
   210d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   210d4:	bl	1725c <verify_monster@@Base+0x1890>
   210d8:	cmp	r0, #0
   210dc:	bne	210f8 <test_add_set_defaults@@Base+0x230>
   210e0:	ldr	r0, [pc, #92]	; 21144 <test_add_set_defaults@@Base+0x27c>
   210e4:	add	r0, pc, r0
   210e8:	bl	12d9c <printf@plt>
   210ec:	mvn	r1, #0
   210f0:	str	r1, [fp, #-4]
   210f4:	b	21128 <test_add_set_defaults@@Base+0x260>
   210f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   210fc:	bl	211d4 <test_add_set_defaults@@Base+0x30c>
   21100:	cmp	r0, #0
   21104:	bne	21120 <test_add_set_defaults@@Base+0x258>
   21108:	ldr	r0, [pc, #56]	; 21148 <test_add_set_defaults@@Base+0x280>
   2110c:	add	r0, pc, r0
   21110:	bl	12d9c <printf@plt>
   21114:	mvn	r1, #0
   21118:	str	r1, [fp, #-4]
   2111c:	b	21128 <test_add_set_defaults@@Base+0x260>
   21120:	movw	r0, #0
   21124:	str	r0, [fp, #-4]
   21128:	ldr	r0, [fp, #-4]
   2112c:	mov	sp, fp
   21130:	pop	{fp, pc}
   21134:			; <UNDEFINED> instruction: 0x000109bb
   21138:	andeq	r2, r1, sp, ror #21
   2113c:	muleq	r1, r7, r8
   21140:	andeq	r2, r1, lr, asr #20
   21144:	andeq	r2, r1, sl, asr sl
   21148:	andeq	r2, r1, r2, ror sl
   2114c:	strdeq	r2, [r1], -r3
   21150:	andeq	r2, r1, r9, ror #21
   21154:	push	{fp, lr}
   21158:	mov	fp, sp
   2115c:	sub	sp, sp, #16
   21160:	str	r0, [sp, #8]
   21164:	strh	r1, [sp, #6]
   21168:	ldrsh	r0, [sp, #6]
   2116c:	cmp	r0, #150	; 0x96
   21170:	bne	21180 <test_add_set_defaults@@Base+0x2b8>
   21174:	movw	r0, #0
   21178:	str	r0, [fp, #-4]
   2117c:	b	211c8 <test_add_set_defaults@@Base+0x300>
   21180:	ldr	r0, [sp, #8]
   21184:	movw	r1, #1
   21188:	movw	r2, #2
   2118c:	movw	r3, #2
   21190:	uxth	r3, r3
   21194:	bl	2c55c <flatcc_builder_table_add@@Base>
   21198:	str	r0, [sp]
   2119c:	movw	r1, #0
   211a0:	cmp	r0, r1
   211a4:	bne	211b4 <test_add_set_defaults@@Base+0x2ec>
   211a8:	mvn	r0, #0
   211ac:	str	r0, [fp, #-4]
   211b0:	b	211c8 <test_add_set_defaults@@Base+0x300>
   211b4:	ldr	r0, [sp]
   211b8:	ldrsh	r1, [sp, #6]
   211bc:	bl	23f14 <main@@Base+0xf5c>
   211c0:	movw	r1, #0
   211c4:	str	r1, [fp, #-4]
   211c8:	ldr	r0, [fp, #-4]
   211cc:	mov	sp, fp
   211d0:	pop	{fp, pc}
   211d4:	push	{fp, lr}
   211d8:	mov	fp, sp
   211dc:	sub	sp, sp, #16
   211e0:	str	r0, [fp, #-4]
   211e4:	movw	r0, #0
   211e8:	strh	r0, [fp, #-6]
   211ec:	ldr	r0, [fp, #-4]
   211f0:	movw	r1, #0
   211f4:	cmp	r0, r1
   211f8:	beq	21204 <test_add_set_defaults@@Base+0x33c>
   211fc:	b	21200 <test_add_set_defaults@@Base+0x338>
   21200:	b	21224 <test_add_set_defaults@@Base+0x35c>
   21204:	ldr	r0, [pc, #136]	; 21294 <test_add_set_defaults@@Base+0x3cc>
   21208:	add	r0, pc, r0
   2120c:	ldr	r1, [pc, #132]	; 21298 <test_add_set_defaults@@Base+0x3d0>
   21210:	add	r1, pc, r1
   21214:	ldr	r2, [pc, #128]	; 2129c <test_add_set_defaults@@Base+0x3d4>
   21218:	add	r3, pc, r2
   2121c:	movw	r2, #705	; 0x2c1
   21220:	bl	12e68 <__assert_fail@plt>
   21224:	mov	r0, #6
   21228:	strh	r0, [sp, #8]
   2122c:	ldr	r0, [fp, #-4]
   21230:	str	r0, [sp]
   21234:	bl	2344c <main@@Base+0x494>
   21238:	ldr	r1, [sp]
   2123c:	sub	r0, r1, r0
   21240:	str	r0, [sp, #4]
   21244:	ldr	r0, [sp, #4]
   21248:	bl	23470 <main@@Base+0x4b8>
   2124c:	ldrh	r1, [sp, #8]
   21250:	add	r1, r1, #3
   21254:	lsl	r1, r1, #1
   21258:	cmp	r0, r1
   2125c:	bcc	21278 <test_add_set_defaults@@Base+0x3b0>
   21260:	ldr	r0, [sp, #4]
   21264:	ldrh	r1, [sp, #8]
   21268:	add	r0, r0, r1, lsl #1
   2126c:	add	r0, r0, #4
   21270:	bl	23470 <main@@Base+0x4b8>
   21274:	strh	r0, [fp, #-6]
   21278:	ldrh	r0, [fp, #-6]
   2127c:	cmp	r0, #0
   21280:	movw	r0, #0
   21284:	movne	r0, #1
   21288:	and	r0, r0, #1
   2128c:	mov	sp, fp
   21290:	pop	{fp, pc}
   21294:	andeq	r2, r1, r5, ror #27
   21298:	andeq	r2, r1, r3, lsl #28
   2129c:	strdeq	r4, [r1], -pc	; <UNPREDICTABLE>
   212a0:	push	{fp, lr}
   212a4:	mov	fp, sp
   212a8:	sub	sp, sp, #24
   212ac:	str	r0, [fp, #-8]
   212b0:	strh	r1, [fp, #-10]
   212b4:	ldr	r0, [fp, #-8]
   212b8:	movw	r1, #2
   212bc:	str	r1, [sp, #4]
   212c0:	ldr	r2, [sp, #4]
   212c4:	movw	r3, #2
   212c8:	uxth	r3, r3
   212cc:	bl	2c55c <flatcc_builder_table_add@@Base>
   212d0:	str	r0, [sp, #8]
   212d4:	movw	r1, #0
   212d8:	cmp	r0, r1
   212dc:	bne	212ec <test_add_set_defaults@@Base+0x424>
   212e0:	mvn	r0, #0
   212e4:	str	r0, [fp, #-4]
   212e8:	b	21300 <test_add_set_defaults@@Base+0x438>
   212ec:	ldr	r0, [sp, #8]
   212f0:	ldrsh	r1, [fp, #-10]
   212f4:	bl	23f14 <main@@Base+0xf5c>
   212f8:	movw	r1, #0
   212fc:	str	r1, [fp, #-4]
   21300:	ldr	r0, [fp, #-4]
   21304:	mov	sp, fp
   21308:	pop	{fp, pc}
   2130c:	push	{fp, lr}
   21310:	mov	fp, sp
   21314:	sub	sp, sp, #16
   21318:	str	r0, [sp, #8]
   2131c:	strh	r1, [sp, #6]
   21320:	ldr	r0, [sp, #8]
   21324:	movw	r1, #1
   21328:	movw	r2, #2
   2132c:	movw	r3, #2
   21330:	uxth	r3, r3
   21334:	bl	2c55c <flatcc_builder_table_add@@Base>
   21338:	str	r0, [sp]
   2133c:	movw	r1, #0
   21340:	cmp	r0, r1
   21344:	bne	21354 <test_add_set_defaults@@Base+0x48c>
   21348:	mvn	r0, #0
   2134c:	str	r0, [fp, #-4]
   21350:	b	21368 <test_add_set_defaults@@Base+0x4a0>
   21354:	ldr	r0, [sp]
   21358:	ldrsh	r1, [sp, #6]
   2135c:	bl	23f14 <main@@Base+0xf5c>
   21360:	movw	r1, #0
   21364:	str	r1, [fp, #-4]
   21368:	ldr	r0, [fp, #-4]
   2136c:	mov	sp, fp
   21370:	pop	{fp, pc}
   21374:	push	{fp, lr}
   21378:	mov	fp, sp
   2137c:	sub	sp, sp, #16
   21380:	str	r0, [sp, #8]
   21384:	strb	r1, [sp, #7]
   21388:	ldr	r0, [sp, #8]
   2138c:	movw	r1, #6
   21390:	movw	r2, #1
   21394:	movw	r3, #1
   21398:	uxth	r3, r3
   2139c:	bl	2c55c <flatcc_builder_table_add@@Base>
   213a0:	str	r0, [sp]
   213a4:	movw	r1, #0
   213a8:	cmp	r0, r1
   213ac:	bne	213bc <test_add_set_defaults@@Base+0x4f4>
   213b0:	mvn	r0, #0
   213b4:	str	r0, [fp, #-4]
   213b8:	b	213d0 <test_add_set_defaults@@Base+0x508>
   213bc:	ldr	r0, [sp]
   213c0:	ldrsb	r1, [sp, #7]
   213c4:	bl	25cb4 <main@@Base+0x2cfc>
   213c8:	movw	r1, #0
   213cc:	str	r1, [fp, #-4]
   213d0:	ldr	r0, [fp, #-4]
   213d4:	mov	sp, fp
   213d8:	pop	{fp, pc}

000213dc <test_nested_buffer@@Base>:
   213dc:	push	{fp, lr}
   213e0:	mov	fp, sp
   213e4:	sub	sp, sp, #64	; 0x40
   213e8:	str	r0, [fp, #-8]
   213ec:	ldr	r0, [fp, #-8]
   213f0:	bl	286d4 <flatcc_builder_reset@@Base>
   213f4:	ldr	r1, [fp, #-8]
   213f8:	str	r0, [fp, #-28]	; 0xffffffe4
   213fc:	mov	r0, r1
   21400:	bl	18cdc <gen_monster@@Base+0x880>
   21404:	ldr	r1, [pc, #452]	; 215d0 <test_nested_buffer@@Base+0x1f4>
   21408:	add	r1, pc, r1
   2140c:	ldr	r2, [fp, #-8]
   21410:	str	r0, [sp, #32]
   21414:	mov	r0, r2
   21418:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   2141c:	ldr	r1, [fp, #-8]
   21420:	str	r0, [sp, #28]
   21424:	mov	r0, r1
   21428:	bl	215f4 <test_nested_buffer@@Base+0x218>
   2142c:	ldr	r1, [pc, #408]	; 215cc <test_nested_buffer@@Base+0x1f0>
   21430:	add	r1, pc, r1
   21434:	ldr	r2, [fp, #-8]
   21438:	str	r0, [sp, #24]
   2143c:	mov	r0, r2
   21440:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   21444:	ldr	r1, [fp, #-8]
   21448:	str	r0, [sp, #20]
   2144c:	mov	r0, r1
   21450:	bl	21644 <test_nested_buffer@@Base+0x268>
   21454:	ldr	r1, [fp, #-8]
   21458:	str	r0, [sp, #16]
   2145c:	mov	r0, r1
   21460:	movw	r1, #10
   21464:	sxth	r1, r1
   21468:	bl	18d2c <gen_monster@@Base+0x8d0>
   2146c:	ldr	r1, [fp, #-8]
   21470:	str	r0, [sp, #12]
   21474:	mov	r0, r1
   21478:	bl	19880 <gen_monster@@Base+0x1424>
   2147c:	ldr	r1, [fp, #-8]
   21480:	str	r0, [sp, #8]
   21484:	mov	r0, r1
   21488:	sub	r1, fp, #16
   2148c:	bl	2d8a8 <flatcc_builder_get_direct_buffer@@Base>
   21490:	ldr	r1, [pc, #300]	; 215c4 <test_nested_buffer@@Base+0x1e8>
   21494:	add	r1, pc, r1
   21498:	ldr	r2, [pc, #296]	; 215c8 <test_nested_buffer@@Base+0x1ec>
   2149c:	ldr	r2, [pc, r2]
   214a0:	str	r0, [fp, #-12]
   214a4:	ldr	r0, [fp, #-12]
   214a8:	ldr	r3, [fp, #-16]
   214ac:	ldr	r2, [r2]
   214b0:	str	r0, [sp, #4]
   214b4:	mov	r0, r1
   214b8:	ldr	r1, [sp, #4]
   214bc:	str	r2, [sp]
   214c0:	mov	r2, r3
   214c4:	ldr	r3, [sp]
   214c8:	bl	13ae8 <test_type_aliases@@Base+0x4f0>
   214cc:	ldr	r0, [fp, #-12]
   214d0:	bl	131f4 <verify_empty_monster@@Base+0x28c>
   214d4:	str	r0, [fp, #-20]	; 0xffffffec
   214d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   214dc:	bl	16bcc <verify_monster@@Base+0x1200>
   214e0:	ldr	r1, [pc, #260]	; 215ec <test_nested_buffer@@Base+0x210>
   214e4:	add	r1, pc, r1
   214e8:	bl	12d90 <strcmp@plt>
   214ec:	cmp	r0, #0
   214f0:	beq	2150c <test_nested_buffer@@Base+0x130>
   214f4:	ldr	r0, [pc, #236]	; 215e8 <test_nested_buffer@@Base+0x20c>
   214f8:	add	r0, pc, r0
   214fc:	bl	12d9c <printf@plt>
   21500:	mvn	r1, #0
   21504:	str	r1, [fp, #-4]
   21508:	b	215b8 <test_nested_buffer@@Base+0x1dc>
   2150c:	ldr	r0, [fp, #-20]	; 0xffffffec
   21510:	bl	216a0 <test_nested_buffer@@Base+0x2c4>
   21514:	str	r0, [fp, #-24]	; 0xffffffe8
   21518:	ldr	r0, [fp, #-20]	; 0xffffffec
   2151c:	bl	13270 <verify_empty_monster@@Base+0x308>
   21520:	sxth	r0, r0
   21524:	cmp	r0, #10
   21528:	beq	21544 <test_nested_buffer@@Base+0x168>
   2152c:	ldr	r0, [pc, #176]	; 215e4 <test_nested_buffer@@Base+0x208>
   21530:	add	r0, pc, r0
   21534:	bl	12d9c <printf@plt>
   21538:	mvn	r1, #0
   2153c:	str	r1, [fp, #-4]
   21540:	b	215b8 <test_nested_buffer@@Base+0x1dc>
   21544:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21548:	bl	16bcc <verify_monster@@Base+0x1200>
   2154c:	movw	r1, #0
   21550:	cmp	r0, r1
   21554:	beq	2155c <test_nested_buffer@@Base+0x180>
   21558:	b	2157c <test_nested_buffer@@Base+0x1a0>
   2155c:	ldr	r0, [pc, #112]	; 215d4 <test_nested_buffer@@Base+0x1f8>
   21560:	add	r0, pc, r0
   21564:	ldr	r1, [pc, #108]	; 215d8 <test_nested_buffer@@Base+0x1fc>
   21568:	add	r1, pc, r1
   2156c:	ldr	r2, [pc, #104]	; 215dc <test_nested_buffer@@Base+0x200>
   21570:	add	r3, pc, r2
   21574:	movw	r2, #2188	; 0x88c
   21578:	bl	12e68 <__assert_fail@plt>
   2157c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21580:	bl	16bcc <verify_monster@@Base+0x1200>
   21584:	ldr	r1, [pc, #100]	; 215f0 <test_nested_buffer@@Base+0x214>
   21588:	add	r1, pc, r1
   2158c:	bl	12d90 <strcmp@plt>
   21590:	cmp	r0, #0
   21594:	beq	215b0 <test_nested_buffer@@Base+0x1d4>
   21598:	ldr	r0, [pc, #64]	; 215e0 <test_nested_buffer@@Base+0x204>
   2159c:	add	r0, pc, r0
   215a0:	bl	12d9c <printf@plt>
   215a4:	mvn	r1, #0
   215a8:	str	r1, [fp, #-4]
   215ac:	b	215b8 <test_nested_buffer@@Base+0x1dc>
   215b0:	movw	r0, #0
   215b4:	str	r0, [fp, #-4]
   215b8:	ldr	r0, [fp, #-4]
   215bc:	mov	sp, fp
   215c0:	pop	{fp, pc}
   215c4:	andeq	r2, r1, r1, lsr r7
   215c8:			; <UNDEFINED> instruction: 0x00026bb8
   215cc:	andeq	r2, r1, r5, lsl #15
   215d0:	andeq	r0, r1, r7, lsr #9
   215d4:			; <UNDEFINED> instruction: 0x000126b8
   215d8:	ldrdeq	r0, [r1], -pc	; <UNPREDICTABLE>
   215dc:	andeq	r2, r1, r1, asr #13
   215e0:	andeq	r2, r1, r0, asr #13
   215e4:	andeq	r2, r1, r3, asr #13
   215e8:	ldrdeq	r2, [r1], -pc	; <UNPREDICTABLE>
   215ec:	andeq	r0, r1, fp, asr #7
   215f0:	andeq	r2, r1, sp, lsr #12
   215f4:	push	{fp, lr}
   215f8:	mov	fp, sp
   215fc:	sub	sp, sp, #8
   21600:	ldr	r1, [pc, #56]	; 21640 <test_nested_buffer@@Base+0x264>
   21604:	add	r1, pc, r1
   21608:	str	r0, [sp, #4]
   2160c:	ldr	r0, [sp, #4]
   21610:	bl	14898 <test_empty_monster@@Base+0x19c>
   21614:	cmp	r0, #0
   21618:	beq	21628 <test_nested_buffer@@Base+0x24c>
   2161c:	mvn	r0, #0
   21620:	str	r0, [sp]
   21624:	b	21634 <test_nested_buffer@@Base+0x258>
   21628:	ldr	r0, [sp, #4]
   2162c:	bl	148cc <test_empty_monster@@Base+0x1d0>
   21630:	str	r0, [sp]
   21634:	ldr	r0, [sp]
   21638:	mov	sp, fp
   2163c:	pop	{fp, pc}
   21640:	ldrdeq	r0, [r1], -r4
   21644:	push	{fp, lr}
   21648:	mov	fp, sp
   2164c:	sub	sp, sp, #24
   21650:	str	r0, [fp, #-4]
   21654:	ldr	r0, [fp, #-4]
   21658:	ldr	r1, [fp, #-4]
   2165c:	ldr	r2, [fp, #-4]
   21660:	str	r0, [fp, #-8]
   21664:	mov	r0, r2
   21668:	str	r1, [sp, #12]
   2166c:	bl	1493c <test_empty_monster@@Base+0x240>
   21670:	ldr	r1, [sp, #12]
   21674:	str	r0, [sp, #8]
   21678:	mov	r0, r1
   2167c:	ldr	r1, [sp, #8]
   21680:	bl	149ac <test_empty_monster@@Base+0x2b0>
   21684:	ldr	r1, [fp, #-8]
   21688:	str	r0, [sp, #4]
   2168c:	mov	r0, r1
   21690:	ldr	r1, [sp, #4]
   21694:	bl	27dd0 <main@@Base+0x4e18>
   21698:	mov	sp, fp
   2169c:	pop	{fp, pc}
   216a0:	push	{fp, lr}
   216a4:	mov	fp, sp
   216a8:	sub	sp, sp, #24
   216ac:	ldr	r1, [pc, #112]	; 21724 <test_nested_buffer@@Base+0x348>
   216b0:	add	r1, pc, r1
   216b4:	str	r0, [fp, #-4]
   216b8:	str	r1, [fp, #-8]
   216bc:	ldr	r0, [fp, #-4]
   216c0:	bl	27e3c <main@@Base+0x4e84>
   216c4:	str	r0, [sp, #12]
   216c8:	ldr	r0, [sp, #12]
   216cc:	movw	r1, #0
   216d0:	cmp	r0, r1
   216d4:	beq	216ec <test_nested_buffer@@Base+0x310>
   216d8:	ldr	r0, [sp, #12]
   216dc:	ldr	r1, [fp, #-8]
   216e0:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   216e4:	cmp	r0, #0
   216e8:	bne	216f8 <test_nested_buffer@@Base+0x31c>
   216ec:	movw	r0, #0
   216f0:	str	r0, [sp, #8]
   216f4:	b	21718 <test_nested_buffer@@Base+0x33c>
   216f8:	ldr	r0, [sp, #12]
   216fc:	ldr	r1, [sp, #12]
   21700:	str	r0, [sp, #4]
   21704:	mov	r0, r1
   21708:	bl	23414 <main@@Base+0x45c>
   2170c:	ldr	r1, [sp, #4]
   21710:	add	r0, r1, r0
   21714:	str	r0, [sp, #8]
   21718:	ldr	r0, [sp, #8]
   2171c:	mov	sp, fp
   21720:	pop	{fp, pc}
   21724:	andeq	r0, r1, r8, lsr #32

00021728 <test_nested_buffer_first@@Base>:
   21728:	push	{fp, lr}
   2172c:	mov	fp, sp
   21730:	sub	sp, sp, #64	; 0x40
   21734:	str	r0, [fp, #-8]
   21738:	ldr	r0, [fp, #-8]
   2173c:	bl	286d4 <flatcc_builder_reset@@Base>
   21740:	ldr	r1, [fp, #-8]
   21744:	str	r0, [fp, #-28]	; 0xffffffe4
   21748:	mov	r0, r1
   2174c:	bl	18cdc <gen_monster@@Base+0x880>
   21750:	ldr	r1, [fp, #-8]
   21754:	str	r0, [sp, #32]
   21758:	mov	r0, r1
   2175c:	bl	215f4 <test_nested_buffer@@Base+0x218>
   21760:	ldr	r1, [pc, #436]	; 2191c <test_nested_buffer_first@@Base+0x1f4>
   21764:	add	r1, pc, r1
   21768:	ldr	r2, [fp, #-8]
   2176c:	str	r0, [sp, #28]
   21770:	mov	r0, r2
   21774:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   21778:	ldr	r1, [fp, #-8]
   2177c:	str	r0, [sp, #24]
   21780:	mov	r0, r1
   21784:	bl	21644 <test_nested_buffer@@Base+0x268>
   21788:	ldr	r1, [fp, #-8]
   2178c:	str	r0, [sp, #20]
   21790:	mov	r0, r1
   21794:	movw	r1, #10
   21798:	sxth	r1, r1
   2179c:	bl	18d2c <gen_monster@@Base+0x8d0>
   217a0:	ldr	r1, [pc, #368]	; 21918 <test_nested_buffer_first@@Base+0x1f0>
   217a4:	add	r1, pc, r1
   217a8:	ldr	r2, [fp, #-8]
   217ac:	str	r0, [sp, #16]
   217b0:	mov	r0, r2
   217b4:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   217b8:	ldr	r1, [fp, #-8]
   217bc:	str	r0, [sp, #12]
   217c0:	mov	r0, r1
   217c4:	bl	19880 <gen_monster@@Base+0x1424>
   217c8:	ldr	r1, [fp, #-8]
   217cc:	str	r0, [sp, #8]
   217d0:	mov	r0, r1
   217d4:	sub	r1, fp, #16
   217d8:	bl	2d8a8 <flatcc_builder_get_direct_buffer@@Base>
   217dc:	ldr	r1, [pc, #300]	; 21910 <test_nested_buffer_first@@Base+0x1e8>
   217e0:	add	r1, pc, r1
   217e4:	ldr	r2, [pc, #296]	; 21914 <test_nested_buffer_first@@Base+0x1ec>
   217e8:	ldr	r2, [pc, r2]
   217ec:	str	r0, [fp, #-12]
   217f0:	ldr	r0, [fp, #-12]
   217f4:	ldr	r3, [fp, #-16]
   217f8:	ldr	r2, [r2]
   217fc:	str	r0, [sp, #4]
   21800:	mov	r0, r1
   21804:	ldr	r1, [sp, #4]
   21808:	str	r2, [sp]
   2180c:	mov	r2, r3
   21810:	ldr	r3, [sp]
   21814:	bl	13ae8 <test_type_aliases@@Base+0x4f0>
   21818:	ldr	r0, [fp, #-12]
   2181c:	bl	131f4 <verify_empty_monster@@Base+0x28c>
   21820:	str	r0, [fp, #-20]	; 0xffffffec
   21824:	ldr	r0, [fp, #-20]	; 0xffffffec
   21828:	bl	16bcc <verify_monster@@Base+0x1200>
   2182c:	ldr	r1, [pc, #260]	; 21938 <test_nested_buffer_first@@Base+0x210>
   21830:	add	r1, pc, r1
   21834:	bl	12d90 <strcmp@plt>
   21838:	cmp	r0, #0
   2183c:	beq	21858 <test_nested_buffer_first@@Base+0x130>
   21840:	ldr	r0, [pc, #236]	; 21934 <test_nested_buffer_first@@Base+0x20c>
   21844:	add	r0, pc, r0
   21848:	bl	12d9c <printf@plt>
   2184c:	mvn	r1, #0
   21850:	str	r1, [fp, #-4]
   21854:	b	21904 <test_nested_buffer_first@@Base+0x1dc>
   21858:	ldr	r0, [fp, #-20]	; 0xffffffec
   2185c:	bl	216a0 <test_nested_buffer@@Base+0x2c4>
   21860:	str	r0, [fp, #-24]	; 0xffffffe8
   21864:	ldr	r0, [fp, #-20]	; 0xffffffec
   21868:	bl	13270 <verify_empty_monster@@Base+0x308>
   2186c:	sxth	r0, r0
   21870:	cmp	r0, #10
   21874:	beq	21890 <test_nested_buffer_first@@Base+0x168>
   21878:	ldr	r0, [pc, #176]	; 21930 <test_nested_buffer_first@@Base+0x208>
   2187c:	add	r0, pc, r0
   21880:	bl	12d9c <printf@plt>
   21884:	mvn	r1, #0
   21888:	str	r1, [fp, #-4]
   2188c:	b	21904 <test_nested_buffer_first@@Base+0x1dc>
   21890:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21894:	bl	16bcc <verify_monster@@Base+0x1200>
   21898:	movw	r1, #0
   2189c:	cmp	r0, r1
   218a0:	beq	218a8 <test_nested_buffer_first@@Base+0x180>
   218a4:	b	218c8 <test_nested_buffer_first@@Base+0x1a0>
   218a8:	ldr	r0, [pc, #112]	; 21920 <test_nested_buffer_first@@Base+0x1f8>
   218ac:	add	r0, pc, r0
   218b0:	ldr	r1, [pc, #108]	; 21924 <test_nested_buffer_first@@Base+0x1fc>
   218b4:	add	r1, pc, r1
   218b8:	ldr	r2, [pc, #104]	; 21928 <test_nested_buffer_first@@Base+0x200>
   218bc:	add	r3, pc, r2
   218c0:	movw	r2, #2241	; 0x8c1
   218c4:	bl	12e68 <__assert_fail@plt>
   218c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   218cc:	bl	16bcc <verify_monster@@Base+0x1200>
   218d0:	ldr	r1, [pc, #100]	; 2193c <test_nested_buffer_first@@Base+0x214>
   218d4:	add	r1, pc, r1
   218d8:	bl	12d90 <strcmp@plt>
   218dc:	cmp	r0, #0
   218e0:	beq	218fc <test_nested_buffer_first@@Base+0x1d4>
   218e4:	ldr	r0, [pc, #64]	; 2192c <test_nested_buffer_first@@Base+0x204>
   218e8:	add	r0, pc, r0
   218ec:	bl	12d9c <printf@plt>
   218f0:	mvn	r1, #0
   218f4:	str	r1, [fp, #-4]
   218f8:	b	21904 <test_nested_buffer_first@@Base+0x1dc>
   218fc:	movw	r0, #0
   21900:	str	r0, [fp, #-4]
   21904:	ldr	r0, [fp, #-4]
   21908:	mov	sp, fp
   2190c:	pop	{fp, pc}
   21910:	andeq	r2, r1, r5, ror #7
   21914:	andeq	r6, r2, ip, ror #16
   21918:	andeq	r0, r1, fp, lsl #2
   2191c:	andeq	r2, r1, r1, asr r4
   21920:	andeq	r2, r1, ip, ror #6
   21924:	muleq	r1, r3, r8
   21928:			; <UNDEFINED> instruction: 0x000123be
   2192c:	andeq	r2, r1, r4, ror r3
   21930:	andeq	r2, r1, r7, ror r3
   21934:	muleq	r1, r3, r3
   21938:	andeq	r0, r1, pc, ror r0
   2193c:	andeq	r2, r1, r1, ror #5

00021940 <test_nested_buffer_using_nest@@Base>:
   21940:	push	{r4, r5, fp, lr}
   21944:	add	fp, sp, #8
   21948:	sub	sp, sp, #1104	; 0x450
   2194c:	str	r0, [fp, #-16]
   21950:	ldr	r0, [fp, #-16]
   21954:	bl	286d4 <flatcc_builder_reset@@Base>
   21958:	ldr	r1, [fp, #-16]
   2195c:	str	r0, [sp, #48]	; 0x30
   21960:	mov	r0, r1
   21964:	bl	18cdc <gen_monster@@Base+0x880>
   21968:	ldr	r1, [pc, #624]	; 21be0 <test_nested_buffer_using_nest@@Base+0x2a0>
   2196c:	add	r1, pc, r1
   21970:	ldr	r2, [fp, #-16]
   21974:	str	r0, [sp, #44]	; 0x2c
   21978:	mov	r0, r2
   2197c:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   21980:	ldr	r1, [fp, #-16]
   21984:	str	r0, [sp, #40]	; 0x28
   21988:	mov	r0, r1
   2198c:	movw	r1, #42	; 0x2a
   21990:	sxth	r1, r1
   21994:	bl	21154 <test_add_set_defaults@@Base+0x28c>
   21998:	ldr	r1, [fp, #-16]
   2199c:	str	r0, [sp, #36]	; 0x24
   219a0:	mov	r0, r1
   219a4:	bl	19880 <gen_monster@@Base+0x1424>
   219a8:	ldr	r1, [fp, #-16]
   219ac:	str	r0, [sp, #32]
   219b0:	mov	r0, r1
   219b4:	bl	2d704 <flatcc_builder_get_buffer_size@@Base>
   219b8:	add	r1, sp, #68	; 0x44
   219bc:	str	r0, [sp, #60]	; 0x3c
   219c0:	ldr	r0, [fp, #-16]
   219c4:	movw	r2, #1024	; 0x400
   219c8:	bl	2d99c <flatcc_builder_copy_buffer@@Base>
   219cc:	movw	r1, #0
   219d0:	cmp	r0, r1
   219d4:	bne	219f0 <test_nested_buffer_using_nest@@Base+0xb0>
   219d8:	ldr	r0, [pc, #516]	; 21be4 <test_nested_buffer_using_nest@@Base+0x2a4>
   219dc:	add	r0, pc, r0
   219e0:	bl	12d9c <printf@plt>
   219e4:	mvn	r1, #0
   219e8:	str	r1, [fp, #-12]
   219ec:	b	21bd4 <test_nested_buffer_using_nest@@Base+0x294>
   219f0:	ldr	r0, [fp, #-16]
   219f4:	bl	286d4 <flatcc_builder_reset@@Base>
   219f8:	ldr	r1, [fp, #-16]
   219fc:	str	r0, [sp, #28]
   21a00:	mov	r0, r1
   21a04:	bl	18cdc <gen_monster@@Base+0x880>
   21a08:	add	r1, sp, #68	; 0x44
   21a0c:	ldr	r2, [fp, #-16]
   21a10:	ldr	r3, [sp, #60]	; 0x3c
   21a14:	str	r0, [sp, #24]
   21a18:	mov	r0, r2
   21a1c:	mov	r2, r3
   21a20:	movw	r3, #0
   21a24:	uxth	r3, r3
   21a28:	bl	21c18 <test_nested_buffer_using_nest@@Base+0x2d8>
   21a2c:	ldr	r1, [fp, #-16]
   21a30:	str	r0, [sp, #20]
   21a34:	mov	r0, r1
   21a38:	movw	r1, #10
   21a3c:	sxth	r1, r1
   21a40:	bl	18d2c <gen_monster@@Base+0x8d0>
   21a44:	ldr	r1, [pc, #420]	; 21bf0 <test_nested_buffer_using_nest@@Base+0x2b0>
   21a48:	add	r1, pc, r1
   21a4c:	ldr	r2, [fp, #-16]
   21a50:	str	r0, [sp, #16]
   21a54:	mov	r0, r2
   21a58:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   21a5c:	ldr	r1, [fp, #-16]
   21a60:	str	r0, [sp, #12]
   21a64:	mov	r0, r1
   21a68:	bl	19880 <gen_monster@@Base+0x1424>
   21a6c:	ldr	r1, [fp, #-16]
   21a70:	str	r0, [sp, #8]
   21a74:	mov	r0, r1
   21a78:	add	r1, sp, #64	; 0x40
   21a7c:	bl	2d8a8 <flatcc_builder_get_direct_buffer@@Base>
   21a80:	ldr	r1, [pc, #352]	; 21be8 <test_nested_buffer_using_nest@@Base+0x2a8>
   21a84:	add	r1, pc, r1
   21a88:	ldr	r2, [pc, #348]	; 21bec <test_nested_buffer_using_nest@@Base+0x2ac>
   21a8c:	ldr	r2, [pc, r2]
   21a90:	str	r0, [fp, #-20]	; 0xffffffec
   21a94:	ldr	r0, [fp, #-20]	; 0xffffffec
   21a98:	ldr	r3, [sp, #64]	; 0x40
   21a9c:	ldr	r2, [r2]
   21aa0:	str	r0, [sp, #4]
   21aa4:	mov	r0, r1
   21aa8:	ldr	r1, [sp, #4]
   21aac:	str	r2, [sp]
   21ab0:	mov	r2, r3
   21ab4:	ldr	r3, [sp]
   21ab8:	bl	13ae8 <test_type_aliases@@Base+0x4f0>
   21abc:	ldr	r0, [fp, #-20]	; 0xffffffec
   21ac0:	bl	131f4 <verify_empty_monster@@Base+0x28c>
   21ac4:	str	r0, [sp, #56]	; 0x38
   21ac8:	ldr	r0, [sp, #56]	; 0x38
   21acc:	bl	16bcc <verify_monster@@Base+0x1200>
   21ad0:	ldr	r1, [pc, #312]	; 21c10 <test_nested_buffer_using_nest@@Base+0x2d0>
   21ad4:	add	r1, pc, r1
   21ad8:	bl	12d90 <strcmp@plt>
   21adc:	cmp	r0, #0
   21ae0:	beq	21afc <test_nested_buffer_using_nest@@Base+0x1bc>
   21ae4:	ldr	r0, [pc, #288]	; 21c0c <test_nested_buffer_using_nest@@Base+0x2cc>
   21ae8:	add	r0, pc, r0
   21aec:	bl	12d9c <printf@plt>
   21af0:	mvn	r1, #0
   21af4:	str	r1, [fp, #-12]
   21af8:	b	21bd4 <test_nested_buffer_using_nest@@Base+0x294>
   21afc:	ldr	r0, [sp, #56]	; 0x38
   21b00:	bl	216a0 <test_nested_buffer@@Base+0x2c4>
   21b04:	str	r0, [sp, #52]	; 0x34
   21b08:	ldr	r0, [sp, #56]	; 0x38
   21b0c:	bl	13270 <verify_empty_monster@@Base+0x308>
   21b10:	sxth	r0, r0
   21b14:	cmp	r0, #10
   21b18:	beq	21b34 <test_nested_buffer_using_nest@@Base+0x1f4>
   21b1c:	ldr	r0, [pc, #228]	; 21c08 <test_nested_buffer_using_nest@@Base+0x2c8>
   21b20:	add	r0, pc, r0
   21b24:	bl	12d9c <printf@plt>
   21b28:	mvn	r1, #0
   21b2c:	str	r1, [fp, #-12]
   21b30:	b	21bd4 <test_nested_buffer_using_nest@@Base+0x294>
   21b34:	ldr	r0, [sp, #52]	; 0x34
   21b38:	bl	16bcc <verify_monster@@Base+0x1200>
   21b3c:	movw	r1, #0
   21b40:	cmp	r0, r1
   21b44:	beq	21b4c <test_nested_buffer_using_nest@@Base+0x20c>
   21b48:	b	21b6c <test_nested_buffer_using_nest@@Base+0x22c>
   21b4c:	ldr	r0, [pc, #160]	; 21bf4 <test_nested_buffer_using_nest@@Base+0x2b4>
   21b50:	add	r0, pc, r0
   21b54:	ldr	r1, [pc, #156]	; 21bf8 <test_nested_buffer_using_nest@@Base+0x2b8>
   21b58:	add	r1, pc, r1
   21b5c:	ldr	r2, [pc, #152]	; 21bfc <test_nested_buffer_using_nest@@Base+0x2bc>
   21b60:	add	r3, pc, r2
   21b64:	movw	r2, #2298	; 0x8fa
   21b68:	bl	12e68 <__assert_fail@plt>
   21b6c:	ldr	r0, [sp, #52]	; 0x34
   21b70:	bl	16bcc <verify_monster@@Base+0x1200>
   21b74:	ldr	r1, [pc, #152]	; 21c14 <test_nested_buffer_using_nest@@Base+0x2d4>
   21b78:	add	r1, pc, r1
   21b7c:	bl	12d90 <strcmp@plt>
   21b80:	cmp	r0, #0
   21b84:	beq	21ba0 <test_nested_buffer_using_nest@@Base+0x260>
   21b88:	ldr	r0, [pc, #116]	; 21c04 <test_nested_buffer_using_nest@@Base+0x2c4>
   21b8c:	add	r0, pc, r0
   21b90:	bl	12d9c <printf@plt>
   21b94:	mvn	r1, #0
   21b98:	str	r1, [fp, #-12]
   21b9c:	b	21bd4 <test_nested_buffer_using_nest@@Base+0x294>
   21ba0:	ldr	r0, [sp, #52]	; 0x34
   21ba4:	bl	17168 <verify_monster@@Base+0x179c>
   21ba8:	sxth	r0, r0
   21bac:	cmp	r0, #42	; 0x2a
   21bb0:	beq	21bcc <test_nested_buffer_using_nest@@Base+0x28c>
   21bb4:	ldr	r0, [pc, #68]	; 21c00 <test_nested_buffer_using_nest@@Base+0x2c0>
   21bb8:	add	r0, pc, r0
   21bbc:	bl	12d9c <printf@plt>
   21bc0:	mvn	r1, #0
   21bc4:	str	r1, [fp, #-12]
   21bc8:	b	21bd4 <test_nested_buffer_using_nest@@Base+0x294>
   21bcc:	movw	r0, #0
   21bd0:	str	r0, [fp, #-12]
   21bd4:	ldr	r0, [fp, #-12]
   21bd8:	sub	sp, fp, #8
   21bdc:	pop	{r4, r5, fp, pc}
   21be0:	andeq	r2, r1, r9, asr #4
   21be4:	andeq	r2, r1, pc, asr #5
   21be8:	andeq	r2, r1, r2, asr #4
   21bec:	andeq	r6, r2, r8, asr #11
   21bf0:	andeq	pc, r0, r7, ror #28
   21bf4:	andeq	r2, r1, r8, asr #1
   21bf8:	andeq	r0, r1, pc, ror #11
   21bfc:	andeq	r2, r1, r8, lsl #3
   21c00:	andeq	r2, r1, r6, ror #2
   21c04:	ldrdeq	r2, [r1], -r0
   21c08:	ldrdeq	r2, [r1], -r3
   21c0c:	andeq	r2, r1, pc, ror #1
   21c10:	ldrdeq	pc, [r0], -fp
   21c14:	andeq	r2, r1, sp, lsr r0
   21c18:	push	{fp, lr}
   21c1c:	mov	fp, sp
   21c20:	sub	sp, sp, #56	; 0x38
   21c24:	str	r0, [fp, #-4]
   21c28:	str	r1, [fp, #-8]
   21c2c:	str	r2, [fp, #-12]
   21c30:	strh	r3, [fp, #-14]
   21c34:	ldr	r0, [fp, #-4]
   21c38:	ldr	r1, [fp, #-4]
   21c3c:	ldr	r2, [fp, #-8]
   21c40:	ldr	r3, [fp, #-12]
   21c44:	ldrh	ip, [fp, #-14]
   21c48:	cmp	ip, #0
   21c4c:	str	r0, [fp, #-20]	; 0xffffffec
   21c50:	str	r1, [fp, #-24]	; 0xffffffe8
   21c54:	str	r2, [sp, #28]
   21c58:	str	r3, [sp, #24]
   21c5c:	beq	21c6c <test_nested_buffer_using_nest@@Base+0x32c>
   21c60:	ldrh	r0, [fp, #-14]
   21c64:	str	r0, [sp, #20]
   21c68:	b	21c78 <test_nested_buffer_using_nest@@Base+0x338>
   21c6c:	movw	r0, #8
   21c70:	str	r0, [sp, #20]
   21c74:	b	21c78 <test_nested_buffer_using_nest@@Base+0x338>
   21c78:	ldr	r0, [sp, #20]
   21c7c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   21c80:	str	r0, [sp, #16]
   21c84:	mov	r0, r1
   21c88:	ldr	r1, [sp, #28]
   21c8c:	ldr	r2, [sp, #24]
   21c90:	movw	r3, #1
   21c94:	ldr	ip, [sp, #16]
   21c98:	uxth	lr, ip
   21c9c:	str	lr, [sp]
   21ca0:	mvn	lr, #0
   21ca4:	str	lr, [sp, #4]
   21ca8:	bl	2bb54 <flatcc_builder_create_vector@@Base>
   21cac:	ldr	r1, [fp, #-20]	; 0xffffffec
   21cb0:	str	r0, [sp, #12]
   21cb4:	mov	r0, r1
   21cb8:	ldr	r1, [sp, #12]
   21cbc:	bl	27dd0 <main@@Base+0x4e18>
   21cc0:	mov	sp, fp
   21cc4:	pop	{fp, pc}

00021cc8 <verify_include@@Base>:
   21cc8:	sub	sp, sp, #4
   21ccc:	str	r0, [sp]
   21cd0:	movw	r0, #0
   21cd4:	add	sp, sp, #4
   21cd8:	bx	lr
   21cdc:	nop	{0}

00021ce0 <test_struct_buffer@@Base>:
   21ce0:	push	{fp, lr}
   21ce4:	mov	fp, sp
   21ce8:	sub	sp, sp, #136	; 0x88
   21cec:	str	r0, [fp, #-8]
   21cf0:	ldr	r0, [fp, #-8]
   21cf4:	bl	286d4 <flatcc_builder_reset@@Base>
   21cf8:	vldr	d2, [pc, #664]	; 21f98 <test_struct_buffer@@Base+0x2b8>
   21cfc:	ldr	r1, [fp, #-8]
   21d00:	str	r0, [sp, #12]
   21d04:	mov	r0, r1
   21d08:	vmov.f32	s0, #112	; 0x3f800000  1.0
   21d0c:	vmov.f32	s1, #0	; 0x40000000  2.0
   21d10:	vmov.f32	s2, #8	; 0x40400000  3.0
   21d14:	movw	r1, #8
   21d18:	sxtb	r1, r1
   21d1c:	movw	r2, #2730	; 0xaaa
   21d20:	sxth	r2, r2
   21d24:	movw	r3, #239	; 0xef
   21d28:	sxtb	r3, r3
   21d2c:	bl	21fe4 <test_struct_buffer@@Base+0x304>
   21d30:	ldr	r1, [fp, #-8]
   21d34:	str	r0, [sp, #8]
   21d38:	mov	r0, r1
   21d3c:	bl	2d704 <flatcc_builder_get_buffer_size@@Base>
   21d40:	str	r0, [sp, #24]
   21d44:	ldr	r0, [sp, #24]
   21d48:	cmp	r0, #48	; 0x30
   21d4c:	bne	21d54 <test_struct_buffer@@Base+0x74>
   21d50:	b	21d74 <test_struct_buffer@@Base+0x94>
   21d54:	ldr	r0, [pc, #580]	; 21fa0 <test_struct_buffer@@Base+0x2c0>
   21d58:	add	r0, pc, r0
   21d5c:	ldr	r1, [pc, #576]	; 21fa4 <test_struct_buffer@@Base+0x2c4>
   21d60:	add	r1, pc, r1
   21d64:	ldr	r2, [pc, #572]	; 21fa8 <test_struct_buffer@@Base+0x2c8>
   21d68:	add	r3, pc, r2
   21d6c:	movw	r2, #2339	; 0x923
   21d70:	bl	12e68 <__assert_fail@plt>
   21d74:	ldr	r0, [pc, #560]	; 21fac <test_struct_buffer@@Base+0x2cc>
   21d78:	add	r0, pc, r0
   21d7c:	ldr	r1, [sp, #24]
   21d80:	bl	12d9c <printf@plt>
   21d84:	ldr	r1, [fp, #-8]
   21d88:	str	r0, [sp, #4]
   21d8c:	mov	r0, r1
   21d90:	bl	2dd0c <flatcc_builder_get_emit_context@@Base>
   21d94:	bl	2208c <test_struct_buffer@@Base+0x3ac>
   21d98:	ldr	r1, [sp, #24]
   21d9c:	cmp	r0, r1
   21da0:	bne	21da8 <test_struct_buffer@@Base+0xc8>
   21da4:	b	21dc8 <test_struct_buffer@@Base+0xe8>
   21da8:	ldr	r0, [pc, #512]	; 21fb0 <test_struct_buffer@@Base+0x2d0>
   21dac:	add	r0, pc, r0
   21db0:	ldr	r1, [pc, #508]	; 21fb4 <test_struct_buffer@@Base+0x2d4>
   21db4:	add	r1, pc, r1
   21db8:	ldr	r2, [pc, #504]	; 21fb8 <test_struct_buffer@@Base+0x2d8>
   21dbc:	add	r3, pc, r2
   21dc0:	movw	r2, #2341	; 0x925
   21dc4:	bl	12e68 <__assert_fail@plt>
   21dc8:	add	r1, sp, #28
   21dcc:	ldr	r0, [fp, #-8]
   21dd0:	movw	r2, #100	; 0x64
   21dd4:	bl	2d99c <flatcc_builder_copy_buffer@@Base>
   21dd8:	movw	r1, #0
   21ddc:	cmp	r0, r1
   21de0:	bne	21dfc <test_struct_buffer@@Base+0x11c>
   21de4:	ldr	r0, [pc, #464]	; 21fbc <test_struct_buffer@@Base+0x2dc>
   21de8:	add	r0, pc, r0
   21dec:	bl	12d9c <printf@plt>
   21df0:	mvn	r1, #0
   21df4:	str	r1, [fp, #-4]
   21df8:	b	21f8c <test_struct_buffer@@Base+0x2ac>
   21dfc:	ldr	r0, [pc, #448]	; 21fc4 <test_struct_buffer@@Base+0x2e4>
   21e00:	add	r0, pc, r0
   21e04:	ldr	r1, [pc, #444]	; 21fc8 <test_struct_buffer@@Base+0x2e8>
   21e08:	ldr	r1, [pc, r1]
   21e0c:	add	r2, sp, #28
   21e10:	ldr	r3, [sp, #24]
   21e14:	ldr	r1, [r1]
   21e18:	str	r1, [sp]
   21e1c:	mov	r1, r2
   21e20:	mov	r2, r3
   21e24:	ldr	r3, [sp]
   21e28:	bl	13ae8 <test_type_aliases@@Base+0x4f0>
   21e2c:	ldr	r0, [pc, #396]	; 21fc0 <test_struct_buffer@@Base+0x2e0>
   21e30:	add	r1, pc, r0
   21e34:	add	r0, sp, #28
   21e38:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   21e3c:	cmp	r0, #0
   21e40:	bne	21e5c <test_struct_buffer@@Base+0x17c>
   21e44:	ldr	r0, [pc, #384]	; 21fcc <test_struct_buffer@@Base+0x2ec>
   21e48:	add	r0, pc, r0
   21e4c:	bl	12d9c <printf@plt>
   21e50:	mvn	r1, #0
   21e54:	str	r1, [fp, #-4]
   21e58:	b	21f8c <test_struct_buffer@@Base+0x2ac>
   21e5c:	ldr	r0, [pc, #364]	; 21fd0 <test_struct_buffer@@Base+0x2f0>
   21e60:	add	r1, pc, r0
   21e64:	add	r0, sp, #28
   21e68:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   21e6c:	cmp	r0, #0
   21e70:	beq	21e8c <test_struct_buffer@@Base+0x1ac>
   21e74:	ldr	r0, [pc, #356]	; 21fe0 <test_struct_buffer@@Base+0x300>
   21e78:	add	r0, pc, r0
   21e7c:	bl	12d9c <printf@plt>
   21e80:	mvn	r1, #0
   21e84:	str	r1, [fp, #-4]
   21e88:	b	21f8c <test_struct_buffer@@Base+0x2ac>
   21e8c:	ldr	r0, [pc, #320]	; 21fd4 <test_struct_buffer@@Base+0x2f4>
   21e90:	add	r1, pc, r0
   21e94:	add	r0, sp, #28
   21e98:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   21e9c:	cmp	r0, #0
   21ea0:	bne	21ebc <test_struct_buffer@@Base+0x1dc>
   21ea4:	ldr	r0, [pc, #300]	; 21fd8 <test_struct_buffer@@Base+0x2f8>
   21ea8:	add	r0, pc, r0
   21eac:	bl	12d9c <printf@plt>
   21eb0:	mvn	r1, #0
   21eb4:	str	r1, [fp, #-4]
   21eb8:	b	21f8c <test_struct_buffer@@Base+0x2ac>
   21ebc:	add	r0, sp, #28
   21ec0:	bl	220a4 <test_struct_buffer@@Base+0x3c4>
   21ec4:	str	r0, [sp, #16]
   21ec8:	ldr	r0, [sp, #16]
   21ecc:	str	r0, [sp, #20]
   21ed0:	ldr	r0, [sp, #20]
   21ed4:	bl	22120 <test_struct_buffer@@Base+0x440>
   21ed8:	ldr	r1, [sp, #20]
   21edc:	vldr	s0, [r1]
   21ee0:	vmov.f32	s2, #112	; 0x3f800000  1.0
   21ee4:	vcmp.f32	s0, s2
   21ee8:	vmrs	APSR_nzcv, fpscr
   21eec:	bne	21f6c <test_struct_buffer@@Base+0x28c>
   21ef0:	ldr	r0, [sp, #20]
   21ef4:	vldr	s0, [r0, #4]
   21ef8:	vmov.f32	s2, #0	; 0x40000000  2.0
   21efc:	vcmp.f32	s0, s2
   21f00:	vmrs	APSR_nzcv, fpscr
   21f04:	bne	21f6c <test_struct_buffer@@Base+0x28c>
   21f08:	ldr	r0, [sp, #20]
   21f0c:	vldr	s0, [r0, #8]
   21f10:	vmov.f32	s2, #8	; 0x40400000  3.0
   21f14:	vcmp.f32	s0, s2
   21f18:	vmrs	APSR_nzcv, fpscr
   21f1c:	bne	21f6c <test_struct_buffer@@Base+0x28c>
   21f20:	vldr	d16, [pc, #112]	; 21f98 <test_struct_buffer@@Base+0x2b8>
   21f24:	ldr	r0, [sp, #20]
   21f28:	vldr	d17, [r0, #16]
   21f2c:	vcmp.f64	d17, d16
   21f30:	vmrs	APSR_nzcv, fpscr
   21f34:	bne	21f6c <test_struct_buffer@@Base+0x28c>
   21f38:	ldr	r0, [sp, #20]
   21f3c:	ldrsb	r0, [r0, #24]
   21f40:	cmp	r0, #8
   21f44:	bne	21f6c <test_struct_buffer@@Base+0x28c>
   21f48:	ldr	r0, [sp, #20]
   21f4c:	ldrsh	r0, [r0, #26]
   21f50:	movw	r1, #2730	; 0xaaa
   21f54:	cmp	r0, r1
   21f58:	bne	21f6c <test_struct_buffer@@Base+0x28c>
   21f5c:	ldr	r0, [sp, #20]
   21f60:	ldrsb	r0, [r0, #28]
   21f64:	cmn	r0, #17
   21f68:	beq	21f84 <test_struct_buffer@@Base+0x2a4>
   21f6c:	ldr	r0, [pc, #104]	; 21fdc <test_struct_buffer@@Base+0x2fc>
   21f70:	add	r0, pc, r0
   21f74:	bl	12d9c <printf@plt>
   21f78:	mvn	r1, #0
   21f7c:	str	r1, [fp, #-4]
   21f80:	b	21f8c <test_struct_buffer@@Base+0x2ac>
   21f84:	movw	r0, #0
   21f88:	str	r0, [fp, #-4]
   21f8c:	ldr	r0, [fp, #-4]
   21f90:	mov	sp, fp
   21f94:	pop	{fp, pc}
   21f98:	stclgt	12, cr12, [ip], {205}	; 0xcd
   21f9c:	andsmi	ip, r0, ip, asr #25
   21fa0:	andeq	r1, r1, fp, ror #31
   21fa4:	andeq	r0, r1, r7, ror #7
   21fa8:	andeq	r1, r1, r6, ror #31
   21fac:	andeq	r2, r1, r1
   21fb0:	andeq	r1, r1, sl, ror #31
   21fb4:	muleq	r1, r3, r3
   21fb8:	muleq	r1, r2, pc	; <UNPREDICTABLE>
   21fbc:	strdeq	r1, [r1], -r9
   21fc0:	andeq	pc, r0, r8, lsr #17
   21fc4:	muleq	r1, r2, r0
   21fc8:	andeq	r6, r2, ip, asr #4
   21fcc:			; <UNDEFINED> instruction: 0x00011fb4
   21fd0:	andeq	r1, r1, lr, lsl #31
   21fd4:	andeq	pc, r0, r8, asr #16
   21fd8:	andeq	r1, r1, r6, ror pc
   21fdc:	ldrdeq	r1, [r1], -r2
   21fe0:	andeq	r1, r1, fp, ror pc
   21fe4:	push	{fp, lr}
   21fe8:	mov	fp, sp
   21fec:	sub	sp, sp, #48	; 0x30
   21ff0:	str	r0, [fp, #-4]
   21ff4:	vstr	s0, [fp, #-8]
   21ff8:	vstr	s1, [fp, #-12]
   21ffc:	vstr	s2, [fp, #-16]
   22000:	vstr	d2, [sp, #24]
   22004:	strb	r1, [sp, #23]
   22008:	strh	r2, [sp, #20]
   2200c:	strb	r3, [sp, #19]
   22010:	ldr	r0, [fp, #-4]
   22014:	ldr	r1, [fp, #-4]
   22018:	vldr	s0, [fp, #-8]
   2201c:	vldr	s1, [fp, #-12]
   22020:	vldr	s2, [fp, #-16]
   22024:	vldr	d2, [sp, #24]
   22028:	ldrb	r2, [sp, #23]
   2202c:	ldrh	r3, [sp, #20]
   22030:	str	r0, [sp, #12]
   22034:	mov	r0, r1
   22038:	sxtb	r1, r2
   2203c:	sxth	r2, r3
   22040:	ldrsb	r3, [sp, #19]
   22044:	bl	27f44 <main@@Base+0x4f8c>
   22048:	ldr	r1, [pc, #56]	; 22088 <test_struct_buffer@@Base+0x3a8>
   2204c:	add	r1, pc, r1
   22050:	ldr	r2, [sp, #12]
   22054:	str	r0, [sp, #8]
   22058:	mov	r0, r2
   2205c:	movw	r3, #0
   22060:	uxth	r2, r3
   22064:	ldr	r3, [sp, #8]
   22068:	movw	ip, #16
   2206c:	uxth	ip, ip
   22070:	str	ip, [sp]
   22074:	movw	ip, #0
   22078:	str	ip, [sp, #4]
   2207c:	bl	29068 <flatcc_builder_create_buffer@@Base>
   22080:	mov	sp, fp
   22084:	pop	{fp, pc}
   22088:	andeq	pc, r0, ip, lsl #13
   2208c:	sub	sp, sp, #4
   22090:	str	r0, [sp]
   22094:	ldr	r0, [sp]
   22098:	ldr	r0, [r0, #24]
   2209c:	add	sp, sp, #4
   220a0:	bx	lr
   220a4:	push	{fp, lr}
   220a8:	mov	fp, sp
   220ac:	sub	sp, sp, #16
   220b0:	ldr	r1, [pc, #100]	; 2211c <test_struct_buffer@@Base+0x43c>
   220b4:	add	r1, pc, r1
   220b8:	str	r0, [fp, #-4]
   220bc:	str	r1, [sp, #8]
   220c0:	ldr	r0, [fp, #-4]
   220c4:	movw	r1, #0
   220c8:	cmp	r0, r1
   220cc:	beq	220e4 <test_struct_buffer@@Base+0x404>
   220d0:	ldr	r0, [fp, #-4]
   220d4:	ldr	r1, [sp, #8]
   220d8:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   220dc:	cmp	r0, #0
   220e0:	bne	220f0 <test_struct_buffer@@Base+0x410>
   220e4:	movw	r0, #0
   220e8:	str	r0, [sp, #4]
   220ec:	b	22110 <test_struct_buffer@@Base+0x430>
   220f0:	ldr	r0, [fp, #-4]
   220f4:	ldr	r1, [fp, #-4]
   220f8:	str	r0, [sp]
   220fc:	mov	r0, r1
   22100:	bl	23414 <main@@Base+0x45c>
   22104:	ldr	r1, [sp]
   22108:	add	r0, r1, r0
   2210c:	str	r0, [sp, #4]
   22110:	ldr	r0, [sp, #4]
   22114:	mov	sp, fp
   22118:	pop	{fp, pc}
   2211c:	andeq	pc, r0, r4, lsr #12
   22120:	sub	sp, sp, #4
   22124:	str	r0, [sp]
   22128:	ldr	r0, [sp]
   2212c:	add	sp, sp, #4
   22130:	bx	lr
   22134:	nop	{0}

00022138 <test_typed_struct_buffer@@Base>:
   22138:	push	{fp, lr}
   2213c:	mov	fp, sp
   22140:	sub	sp, sp, #136	; 0x88
   22144:	str	r0, [fp, #-8]
   22148:	ldr	r0, [fp, #-8]
   2214c:	bl	286d4 <flatcc_builder_reset@@Base>
   22150:	vldr	d2, [pc, #856]	; 224b0 <test_typed_struct_buffer@@Base+0x378>
   22154:	ldr	r1, [fp, #-8]
   22158:	str	r0, [sp, #12]
   2215c:	mov	r0, r1
   22160:	vmov.f32	s0, #112	; 0x3f800000  1.0
   22164:	vmov.f32	s1, #0	; 0x40000000  2.0
   22168:	vmov.f32	s2, #8	; 0x40400000  3.0
   2216c:	movw	r1, #8
   22170:	sxtb	r1, r1
   22174:	movw	r2, #2730	; 0xaaa
   22178:	sxth	r2, r2
   2217c:	movw	r3, #239	; 0xef
   22180:	sxtb	r3, r3
   22184:	bl	22510 <test_typed_struct_buffer@@Base+0x3d8>
   22188:	ldr	r1, [fp, #-8]
   2218c:	str	r0, [sp, #8]
   22190:	mov	r0, r1
   22194:	bl	2d704 <flatcc_builder_get_buffer_size@@Base>
   22198:	str	r0, [sp, #24]
   2219c:	ldr	r0, [sp, #24]
   221a0:	cmp	r0, #48	; 0x30
   221a4:	bne	221ac <test_typed_struct_buffer@@Base+0x74>
   221a8:	b	221cc <test_typed_struct_buffer@@Base+0x94>
   221ac:	ldr	r0, [pc, #772]	; 224b8 <test_typed_struct_buffer@@Base+0x380>
   221b0:	add	r0, pc, r0
   221b4:	ldr	r1, [pc, #768]	; 224bc <test_typed_struct_buffer@@Base+0x384>
   221b8:	add	r1, pc, r1
   221bc:	ldr	r2, [pc, #764]	; 224c0 <test_typed_struct_buffer@@Base+0x388>
   221c0:	add	r3, pc, r2
   221c4:	movw	r2, #2388	; 0x954
   221c8:	bl	12e68 <__assert_fail@plt>
   221cc:	ldr	r0, [pc, #752]	; 224c4 <test_typed_struct_buffer@@Base+0x38c>
   221d0:	add	r0, pc, r0
   221d4:	ldr	r1, [sp, #24]
   221d8:	bl	12d9c <printf@plt>
   221dc:	ldr	r1, [fp, #-8]
   221e0:	str	r0, [sp, #4]
   221e4:	mov	r0, r1
   221e8:	bl	2dd0c <flatcc_builder_get_emit_context@@Base>
   221ec:	bl	2208c <test_struct_buffer@@Base+0x3ac>
   221f0:	ldr	r1, [sp, #24]
   221f4:	cmp	r0, r1
   221f8:	bne	22200 <test_typed_struct_buffer@@Base+0xc8>
   221fc:	b	22220 <test_typed_struct_buffer@@Base+0xe8>
   22200:	ldr	r0, [pc, #704]	; 224c8 <test_typed_struct_buffer@@Base+0x390>
   22204:	add	r0, pc, r0
   22208:	ldr	r1, [pc, #700]	; 224cc <test_typed_struct_buffer@@Base+0x394>
   2220c:	add	r1, pc, r1
   22210:	ldr	r2, [pc, #696]	; 224d0 <test_typed_struct_buffer@@Base+0x398>
   22214:	add	r3, pc, r2
   22218:	movw	r2, #2390	; 0x956
   2221c:	bl	12e68 <__assert_fail@plt>
   22220:	add	r1, sp, #28
   22224:	ldr	r0, [fp, #-8]
   22228:	movw	r2, #100	; 0x64
   2222c:	bl	2d99c <flatcc_builder_copy_buffer@@Base>
   22230:	movw	r1, #0
   22234:	cmp	r0, r1
   22238:	bne	22254 <test_typed_struct_buffer@@Base+0x11c>
   2223c:	ldr	r0, [pc, #656]	; 224d4 <test_typed_struct_buffer@@Base+0x39c>
   22240:	add	r0, pc, r0
   22244:	bl	12d9c <printf@plt>
   22248:	mvn	r1, #0
   2224c:	str	r1, [fp, #-4]
   22250:	b	224a0 <test_typed_struct_buffer@@Base+0x368>
   22254:	ldr	r0, [pc, #640]	; 224dc <test_typed_struct_buffer@@Base+0x3a4>
   22258:	add	r0, pc, r0
   2225c:	ldr	r1, [pc, #636]	; 224e0 <test_typed_struct_buffer@@Base+0x3a8>
   22260:	ldr	r1, [pc, r1]
   22264:	add	r2, sp, #28
   22268:	ldr	r3, [sp, #24]
   2226c:	ldr	r1, [r1]
   22270:	str	r1, [sp]
   22274:	mov	r1, r2
   22278:	mov	r2, r3
   2227c:	ldr	r3, [sp]
   22280:	bl	13ae8 <test_type_aliases@@Base+0x4f0>
   22284:	ldr	r0, [pc, #588]	; 224d8 <test_typed_struct_buffer@@Base+0x3a0>
   22288:	add	r1, pc, r0
   2228c:	add	r0, sp, #28
   22290:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   22294:	cmp	r0, #0
   22298:	bne	222b4 <test_typed_struct_buffer@@Base+0x17c>
   2229c:	ldr	r0, [pc, #576]	; 224e4 <test_typed_struct_buffer@@Base+0x3ac>
   222a0:	add	r0, pc, r0
   222a4:	bl	12d9c <printf@plt>
   222a8:	mvn	r1, #0
   222ac:	str	r1, [fp, #-4]
   222b0:	b	224a0 <test_typed_struct_buffer@@Base+0x368>
   222b4:	ldr	r0, [pc, #556]	; 224e8 <test_typed_struct_buffer@@Base+0x3b0>
   222b8:	add	r1, pc, r0
   222bc:	add	r0, sp, #28
   222c0:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   222c4:	cmp	r0, #0
   222c8:	beq	222e4 <test_typed_struct_buffer@@Base+0x1ac>
   222cc:	ldr	r0, [pc, #568]	; 2250c <test_typed_struct_buffer@@Base+0x3d4>
   222d0:	add	r0, pc, r0
   222d4:	bl	12d9c <printf@plt>
   222d8:	mvn	r1, #0
   222dc:	str	r1, [fp, #-4]
   222e0:	b	224a0 <test_typed_struct_buffer@@Base+0x368>
   222e4:	ldr	r0, [pc, #512]	; 224ec <test_typed_struct_buffer@@Base+0x3b4>
   222e8:	add	r1, pc, r0
   222ec:	add	r0, sp, #28
   222f0:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   222f4:	cmp	r0, #0
   222f8:	bne	22314 <test_typed_struct_buffer@@Base+0x1dc>
   222fc:	ldr	r0, [pc, #492]	; 224f0 <test_typed_struct_buffer@@Base+0x3b8>
   22300:	add	r0, pc, r0
   22304:	bl	12d9c <printf@plt>
   22308:	mvn	r1, #0
   2230c:	str	r1, [fp, #-4]
   22310:	b	224a0 <test_typed_struct_buffer@@Base+0x368>
   22314:	ldr	r1, [pc, #472]	; 224f4 <test_typed_struct_buffer@@Base+0x3bc>
   22318:	add	r0, sp, #28
   2231c:	bl	225b8 <test_typed_struct_buffer@@Base+0x480>
   22320:	movw	r1, #0
   22324:	cmp	r0, r1
   22328:	bne	22344 <test_typed_struct_buffer@@Base+0x20c>
   2232c:	ldr	r0, [pc, #452]	; 224f8 <test_typed_struct_buffer@@Base+0x3c0>
   22330:	add	r0, pc, r0
   22334:	bl	12d9c <printf@plt>
   22338:	mvn	r1, #0
   2233c:	str	r1, [fp, #-4]
   22340:	b	224a0 <test_typed_struct_buffer@@Base+0x368>
   22344:	ldr	r2, [pc, #424]	; 224f4 <test_typed_struct_buffer@@Base+0x3bc>
   22348:	add	r0, sp, #28
   2234c:	ldr	r1, [sp, #24]
   22350:	bl	22628 <test_typed_struct_buffer@@Base+0x4f0>
   22354:	movw	r1, #0
   22358:	cmp	r1, r0
   2235c:	beq	22378 <test_typed_struct_buffer@@Base+0x240>
   22360:	ldr	r0, [pc, #416]	; 22508 <test_typed_struct_buffer@@Base+0x3d0>
   22364:	add	r0, pc, r0
   22368:	bl	12d9c <printf@plt>
   2236c:	mvn	r1, #0
   22370:	str	r1, [fp, #-4]
   22374:	b	224a0 <test_typed_struct_buffer@@Base+0x368>
   22378:	add	r0, sp, #28
   2237c:	bl	22668 <test_typed_struct_buffer@@Base+0x530>
   22380:	str	r0, [sp, #16]
   22384:	ldr	r0, [sp, #16]
   22388:	movw	r1, #0
   2238c:	cmp	r0, r1
   22390:	bne	223ac <test_typed_struct_buffer@@Base+0x274>
   22394:	ldr	r0, [pc, #352]	; 224fc <test_typed_struct_buffer@@Base+0x3c4>
   22398:	add	r0, pc, r0
   2239c:	bl	12d9c <printf@plt>
   223a0:	mvn	r1, #0
   223a4:	str	r1, [fp, #-4]
   223a8:	b	224a0 <test_typed_struct_buffer@@Base+0x368>
   223ac:	add	r0, sp, #28
   223b0:	ldr	r1, [sp, #24]
   223b4:	bl	226d8 <test_typed_struct_buffer@@Base+0x5a0>
   223b8:	movw	r1, #0
   223bc:	cmp	r1, r0
   223c0:	beq	223dc <test_typed_struct_buffer@@Base+0x2a4>
   223c4:	ldr	r0, [pc, #312]	; 22504 <test_typed_struct_buffer@@Base+0x3cc>
   223c8:	add	r0, pc, r0
   223cc:	bl	12d9c <printf@plt>
   223d0:	mvn	r1, #0
   223d4:	str	r1, [fp, #-4]
   223d8:	b	224a0 <test_typed_struct_buffer@@Base+0x368>
   223dc:	ldr	r0, [sp, #16]
   223e0:	str	r0, [sp, #20]
   223e4:	ldr	r0, [sp, #20]
   223e8:	bl	22120 <test_struct_buffer@@Base+0x440>
   223ec:	ldr	r1, [sp, #20]
   223f0:	vldr	s0, [r1]
   223f4:	vmov.f32	s2, #112	; 0x3f800000  1.0
   223f8:	vcmp.f32	s0, s2
   223fc:	vmrs	APSR_nzcv, fpscr
   22400:	bne	22480 <test_typed_struct_buffer@@Base+0x348>
   22404:	ldr	r0, [sp, #20]
   22408:	vldr	s0, [r0, #4]
   2240c:	vmov.f32	s2, #0	; 0x40000000  2.0
   22410:	vcmp.f32	s0, s2
   22414:	vmrs	APSR_nzcv, fpscr
   22418:	bne	22480 <test_typed_struct_buffer@@Base+0x348>
   2241c:	ldr	r0, [sp, #20]
   22420:	vldr	s0, [r0, #8]
   22424:	vmov.f32	s2, #8	; 0x40400000  3.0
   22428:	vcmp.f32	s0, s2
   2242c:	vmrs	APSR_nzcv, fpscr
   22430:	bne	22480 <test_typed_struct_buffer@@Base+0x348>
   22434:	vldr	d16, [pc, #116]	; 224b0 <test_typed_struct_buffer@@Base+0x378>
   22438:	ldr	r0, [sp, #20]
   2243c:	vldr	d17, [r0, #16]
   22440:	vcmp.f64	d17, d16
   22444:	vmrs	APSR_nzcv, fpscr
   22448:	bne	22480 <test_typed_struct_buffer@@Base+0x348>
   2244c:	ldr	r0, [sp, #20]
   22450:	ldrsb	r0, [r0, #24]
   22454:	cmp	r0, #8
   22458:	bne	22480 <test_typed_struct_buffer@@Base+0x348>
   2245c:	ldr	r0, [sp, #20]
   22460:	ldrsh	r0, [r0, #26]
   22464:	movw	r1, #2730	; 0xaaa
   22468:	cmp	r0, r1
   2246c:	bne	22480 <test_typed_struct_buffer@@Base+0x348>
   22470:	ldr	r0, [sp, #20]
   22474:	ldrsb	r0, [r0, #28]
   22478:	cmn	r0, #17
   2247c:	beq	22498 <test_typed_struct_buffer@@Base+0x360>
   22480:	ldr	r0, [pc, #120]	; 22500 <test_typed_struct_buffer@@Base+0x3c8>
   22484:	add	r0, pc, r0
   22488:	bl	12d9c <printf@plt>
   2248c:	mvn	r1, #0
   22490:	str	r1, [fp, #-4]
   22494:	b	224a0 <test_typed_struct_buffer@@Base+0x368>
   22498:	movw	r0, #0
   2249c:	str	r0, [fp, #-4]
   224a0:	ldr	r0, [fp, #-4]
   224a4:	mov	sp, fp
   224a8:	pop	{fp, pc}
   224ac:	nop	{0}
   224b0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   224b4:	andsmi	ip, r0, ip, asr #25
   224b8:	muleq	r1, r3, fp
   224bc:	andeq	pc, r0, pc, lsl #31
   224c0:	muleq	r1, fp, ip
   224c4:	andeq	r1, r1, r9, lsr #23
   224c8:	muleq	r1, r2, fp
   224cc:	andeq	pc, r0, fp, lsr pc	; <UNPREDICTABLE>
   224d0:	andeq	r1, r1, r7, asr #24
   224d4:	andeq	r1, r1, r1, lsr #23
   224d8:	andeq	r1, r1, sp, lsl ip
   224dc:	andeq	r1, r1, r4, lsr ip
   224e0:	strdeq	r5, [r2], -r4
   224e4:	andeq	r1, r1, ip, asr fp
   224e8:	andeq	r1, r1, r6, lsr fp
   224ec:			; <UNDEFINED> instruction: 0x00011bbd
   224f0:	andeq	r1, r1, lr, lsl fp
   224f4:	ldmge	r5!, {r1, r4, r6, r7, r9, sl, fp, ip, sp}^
   224f8:	andeq	r1, r1, sl, ror fp
   224fc:	andeq	r1, r1, lr, asr fp
   22500:			; <UNDEFINED> instruction: 0x000119be
   22504:	andeq	r1, r1, ip, asr #22
   22508:	andeq	r1, r1, pc, ror #22
   2250c:	andeq	r1, r1, r3, lsr #22
   22510:	push	{fp, lr}
   22514:	mov	fp, sp
   22518:	sub	sp, sp, #48	; 0x30
   2251c:	str	r0, [fp, #-4]
   22520:	vstr	s0, [fp, #-8]
   22524:	vstr	s1, [fp, #-12]
   22528:	vstr	s2, [fp, #-16]
   2252c:	vstr	d2, [sp, #24]
   22530:	strb	r1, [sp, #23]
   22534:	strh	r2, [sp, #20]
   22538:	strb	r3, [sp, #19]
   2253c:	ldr	r0, [fp, #-4]
   22540:	ldr	r1, [fp, #-4]
   22544:	vldr	s0, [fp, #-8]
   22548:	vldr	s1, [fp, #-12]
   2254c:	vldr	s2, [fp, #-16]
   22550:	vldr	d2, [sp, #24]
   22554:	ldrb	r2, [sp, #23]
   22558:	ldrh	r3, [sp, #20]
   2255c:	str	r0, [sp, #12]
   22560:	mov	r0, r1
   22564:	sxtb	r1, r2
   22568:	sxth	r2, r3
   2256c:	ldrsb	r3, [sp, #19]
   22570:	bl	27f44 <main@@Base+0x4f8c>
   22574:	ldr	r1, [pc, #56]	; 225b4 <test_typed_struct_buffer@@Base+0x47c>
   22578:	add	r1, pc, r1
   2257c:	ldr	r2, [sp, #12]
   22580:	str	r0, [sp, #8]
   22584:	mov	r0, r2
   22588:	movw	r3, #0
   2258c:	uxth	r2, r3
   22590:	ldr	r3, [sp, #8]
   22594:	movw	ip, #16
   22598:	uxth	ip, ip
   2259c:	str	ip, [sp]
   225a0:	movw	ip, #0
   225a4:	str	ip, [sp, #4]
   225a8:	bl	29068 <flatcc_builder_create_buffer@@Base>
   225ac:	mov	sp, fp
   225b0:	pop	{fp, pc}
   225b4:	andeq	r1, r1, sp, lsr #18
   225b8:	push	{fp, lr}
   225bc:	mov	fp, sp
   225c0:	sub	sp, sp, #16
   225c4:	str	r0, [fp, #-4]
   225c8:	str	r1, [sp, #8]
   225cc:	ldr	r0, [fp, #-4]
   225d0:	movw	r1, #0
   225d4:	cmp	r0, r1
   225d8:	beq	225f0 <test_typed_struct_buffer@@Base+0x4b8>
   225dc:	ldr	r0, [fp, #-4]
   225e0:	ldr	r1, [sp, #8]
   225e4:	bl	14e80 <test_typed_empty_monster@@Base+0x430>
   225e8:	cmp	r0, #0
   225ec:	bne	225fc <test_typed_struct_buffer@@Base+0x4c4>
   225f0:	movw	r0, #0
   225f4:	str	r0, [sp, #4]
   225f8:	b	2261c <test_typed_struct_buffer@@Base+0x4e4>
   225fc:	ldr	r0, [fp, #-4]
   22600:	ldr	r1, [fp, #-4]
   22604:	str	r0, [sp]
   22608:	mov	r0, r1
   2260c:	bl	23414 <main@@Base+0x45c>
   22610:	ldr	r1, [sp]
   22614:	add	r0, r1, r0
   22618:	str	r0, [sp, #4]
   2261c:	ldr	r0, [sp, #4]
   22620:	mov	sp, fp
   22624:	pop	{fp, pc}
   22628:	push	{fp, lr}
   2262c:	mov	fp, sp
   22630:	sub	sp, sp, #16
   22634:	str	r0, [fp, #-4]
   22638:	str	r1, [sp, #8]
   2263c:	str	r2, [sp, #4]
   22640:	ldr	r0, [fp, #-4]
   22644:	ldr	r1, [sp, #8]
   22648:	ldr	r2, [sp, #4]
   2264c:	movw	r3, #32
   22650:	movw	ip, #16
   22654:	uxth	ip, ip
   22658:	str	ip, [sp]
   2265c:	bl	3068c <flatcc_verify_struct_as_typed_root@@Base>
   22660:	mov	sp, fp
   22664:	pop	{fp, pc}
   22668:	push	{fp, lr}
   2266c:	mov	fp, sp
   22670:	sub	sp, sp, #16
   22674:	str	r0, [fp, #-4]
   22678:	ldr	r0, [fp, #-4]
   2267c:	movw	r1, #0
   22680:	cmp	r0, r1
   22684:	beq	2269c <test_typed_struct_buffer@@Base+0x564>
   22688:	ldr	r1, [pc, #68]	; 226d4 <test_typed_struct_buffer@@Base+0x59c>
   2268c:	ldr	r0, [fp, #-4]
   22690:	bl	14e80 <test_typed_empty_monster@@Base+0x430>
   22694:	cmp	r0, #0
   22698:	bne	226a8 <test_typed_struct_buffer@@Base+0x570>
   2269c:	movw	r0, #0
   226a0:	str	r0, [sp, #8]
   226a4:	b	226c8 <test_typed_struct_buffer@@Base+0x590>
   226a8:	ldr	r0, [fp, #-4]
   226ac:	ldr	r1, [fp, #-4]
   226b0:	str	r0, [sp, #4]
   226b4:	mov	r0, r1
   226b8:	bl	23414 <main@@Base+0x45c>
   226bc:	ldr	r1, [sp, #4]
   226c0:	add	r0, r1, r0
   226c4:	str	r0, [sp, #8]
   226c8:	ldr	r0, [sp, #8]
   226cc:	mov	sp, fp
   226d0:	pop	{fp, pc}
   226d4:	ldmge	r5!, {r1, r4, r6, r7, r9, sl, fp, ip, sp}^
   226d8:	push	{fp, lr}
   226dc:	mov	fp, sp
   226e0:	sub	sp, sp, #16
   226e4:	ldr	r2, [pc, #40]	; 22714 <test_typed_struct_buffer@@Base+0x5dc>
   226e8:	str	r0, [fp, #-4]
   226ec:	str	r1, [sp, #8]
   226f0:	ldr	r0, [fp, #-4]
   226f4:	ldr	r1, [sp, #8]
   226f8:	movw	r3, #32
   226fc:	movw	ip, #16
   22700:	uxth	ip, ip
   22704:	str	ip, [sp]
   22708:	bl	3068c <flatcc_verify_struct_as_typed_root@@Base>
   2270c:	mov	sp, fp
   22710:	pop	{fp, pc}
   22714:	ldmge	r5!, {r1, r4, r6, r7, r9, sl, fp, ip, sp}^

00022718 <gen_monster_benchmark@@Base>:
   22718:	push	{fp, lr}
   2271c:	mov	fp, sp
   22720:	sub	sp, sp, #72	; 0x48
   22724:	ldr	r1, [pc, #492]	; 22918 <gen_monster_benchmark@@Base+0x200>
   22728:	add	r1, pc, r1
   2272c:	str	r0, [fp, #-4]
   22730:	ldrb	r0, [r1]
   22734:	strb	r0, [fp, #-14]
   22738:	ldrb	r0, [r1, #1]
   2273c:	strb	r0, [fp, #-13]
   22740:	ldrb	r0, [r1, #2]
   22744:	strb	r0, [fp, #-12]
   22748:	ldrb	r0, [r1, #3]
   2274c:	strb	r0, [fp, #-11]
   22750:	ldrb	r0, [r1, #4]
   22754:	strb	r0, [fp, #-10]
   22758:	ldrb	r0, [r1, #5]
   2275c:	strb	r0, [fp, #-9]
   22760:	ldrb	r0, [r1, #6]
   22764:	strb	r0, [fp, #-8]
   22768:	ldrb	r0, [r1, #7]
   2276c:	strb	r0, [fp, #-7]
   22770:	ldrb	r0, [r1, #8]
   22774:	strb	r0, [fp, #-6]
   22778:	ldrb	r0, [r1, #9]
   2277c:	strb	r0, [fp, #-5]
   22780:	ldr	r0, [fp, #-4]
   22784:	bl	286d4 <flatcc_builder_reset@@Base>
   22788:	ldr	r1, [fp, #-4]
   2278c:	str	r0, [fp, #-32]	; 0xffffffe0
   22790:	mov	r0, r1
   22794:	bl	18cdc <gen_monster@@Base+0x880>
   22798:	ldr	r1, [fp, #-4]
   2279c:	str	r0, [sp, #36]	; 0x24
   227a0:	mov	r0, r1
   227a4:	movw	r1, #80	; 0x50
   227a8:	sxth	r1, r1
   227ac:	bl	18d2c <gen_monster@@Base+0x8d0>
   227b0:	ldr	r1, [fp, #-4]
   227b4:	str	r0, [sp, #32]
   227b8:	mov	r0, r1
   227bc:	bl	18db0 <gen_monster@@Base+0x954>
   227c0:	vldr	s0, [pc, #332]	; 22914 <gen_monster_benchmark@@Base+0x1fc>
   227c4:	str	r0, [fp, #-20]	; 0xffffffec
   227c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   227cc:	vmov.f32	s2, #112	; 0x3f800000  1.0
   227d0:	vstr	s2, [r0]
   227d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   227d8:	vmov.f32	s2, #0	; 0x40000000  2.0
   227dc:	vstr	s2, [r0, #4]
   227e0:	ldr	r0, [fp, #-20]	; 0xffffffec
   227e4:	vstr	s0, [r0, #8]
   227e8:	ldr	r0, [fp, #-4]
   227ec:	bl	18de0 <gen_monster@@Base+0x984>
   227f0:	ldr	r1, [pc, #280]	; 22910 <gen_monster_benchmark@@Base+0x1f8>
   227f4:	add	r1, pc, r1
   227f8:	ldr	r2, [fp, #-4]
   227fc:	str	r0, [sp, #28]
   22800:	mov	r0, r2
   22804:	bl	148f0 <test_empty_monster@@Base+0x1f4>
   22808:	sub	r1, fp, #14
   2280c:	ldr	r2, [fp, #-4]
   22810:	str	r0, [sp, #24]
   22814:	mov	r0, r2
   22818:	movw	r2, #10
   2281c:	bl	18e74 <gen_monster@@Base+0xa18>
   22820:	ldr	r1, [fp, #-4]
   22824:	str	r0, [sp, #20]
   22828:	mov	r0, r1
   2282c:	bl	18ecc <gen_monster@@Base+0xa70>
   22830:	ldr	r1, [fp, #-4]
   22834:	str	r0, [sp, #16]
   22838:	mov	r0, r1
   2283c:	movw	r1, #1
   22840:	bl	18eec <gen_monster@@Base+0xa90>
   22844:	str	r0, [fp, #-24]	; 0xffffffe8
   22848:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2284c:	movw	r1, #16
   22850:	strh	r1, [r0]
   22854:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22858:	movw	r1, #32
   2285c:	strb	r1, [r0, #2]
   22860:	ldr	r0, [fp, #-4]
   22864:	movw	r1, #2
   22868:	bl	18eec <gen_monster@@Base+0xa90>
   2286c:	str	r0, [fp, #-24]	; 0xffffffe8
   22870:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22874:	movw	r1, #48	; 0x30
   22878:	strh	r1, [r0]
   2287c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22880:	movw	r1, #64	; 0x40
   22884:	strb	r1, [r0, #2]
   22888:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2288c:	movw	r1, #80	; 0x50
   22890:	strh	r1, [r0, #4]
   22894:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22898:	movw	r1, #96	; 0x60
   2289c:	strb	r1, [r0, #6]
   228a0:	ldr	r0, [fp, #-4]
   228a4:	movw	r1, #112	; 0x70
   228a8:	sxth	r1, r1
   228ac:	movw	r2, #128	; 0x80
   228b0:	sxtb	r2, r2
   228b4:	bl	18f14 <gen_monster@@Base+0xab8>
   228b8:	movw	r1, #401	; 0x191
   228bc:	strh	r1, [fp, #-28]	; 0xffffffe4
   228c0:	movw	r1, #145	; 0x91
   228c4:	strb	r1, [fp, #-26]	; 0xffffffe6
   228c8:	ldr	r1, [fp, #-4]
   228cc:	str	r0, [sp, #12]
   228d0:	mov	r0, r1
   228d4:	sub	r1, fp, #28
   228d8:	bl	18f7c <gen_monster@@Base+0xb20>
   228dc:	ldr	r1, [fp, #-4]
   228e0:	str	r0, [sp, #8]
   228e4:	mov	r0, r1
   228e8:	bl	190e4 <gen_monster@@Base+0xc88>
   228ec:	ldr	r1, [fp, #-4]
   228f0:	str	r0, [sp, #4]
   228f4:	mov	r0, r1
   228f8:	bl	19880 <gen_monster@@Base+0x1424>
   228fc:	movw	r1, #0
   22900:	str	r0, [sp]
   22904:	mov	r0, r1
   22908:	mov	sp, fp
   2290c:	pop	{fp, pc}
   22910:	strheq	pc, [r0], -fp	; <UNPREDICTABLE>
   22914:	subgt	ip, ip, sp, asr #25
   22918:	andeq	r3, r1, r7, asr #20

0002291c <time_monster@@Base>:
   2291c:	push	{fp, lr}
   22920:	mov	fp, sp
   22924:	sub	sp, sp, #48	; 0x30
   22928:	ldr	r1, [pc, #156]	; 229cc <time_monster@@Base+0xb0>
   2292c:	add	r1, pc, r1
   22930:	ldr	r2, [pc, #152]	; 229d0 <time_monster@@Base+0xb4>
   22934:	str	r0, [fp, #-4]
   22938:	str	r2, [sp, #20]
   2293c:	mov	r0, r1
   22940:	bl	12d9c <printf@plt>
   22944:	str	r0, [sp, #8]
   22948:	bl	229e0 <time_monster@@Base+0xc4>
   2294c:	vstr	d0, [fp, #-16]
   22950:	movw	r0, #0
   22954:	str	r0, [sp, #12]
   22958:	ldr	r0, [pc, #112]	; 229d0 <time_monster@@Base+0xb4>
   2295c:	ldr	r1, [sp, #12]
   22960:	cmp	r1, r0
   22964:	bge	22980 <time_monster@@Base+0x64>
   22968:	ldr	r0, [fp, #-4]
   2296c:	bl	22718 <gen_monster_benchmark@@Base>
   22970:	ldr	r0, [sp, #12]
   22974:	add	r0, r0, #1
   22978:	str	r0, [sp, #12]
   2297c:	b	22958 <time_monster@@Base+0x3c>
   22980:	ldr	r0, [fp, #-4]
   22984:	bl	2d704 <flatcc_builder_get_buffer_size@@Base>
   22988:	str	r0, [sp, #16]
   2298c:	bl	229e0 <time_monster@@Base+0xc4>
   22990:	ldr	r0, [pc, #60]	; 229d4 <time_monster@@Base+0xb8>
   22994:	add	r0, pc, r0
   22998:	ldr	r2, [pc, #48]	; 229d0 <time_monster@@Base+0xb4>
   2299c:	ldr	r1, [pc, #52]	; 229d8 <time_monster@@Base+0xbc>
   229a0:	add	r3, pc, r1
   229a4:	vstr	d0, [sp, #24]
   229a8:	vldr	d0, [fp, #-16]
   229ac:	vldr	d1, [sp, #24]
   229b0:	ldr	r1, [sp, #16]
   229b4:	bl	22a80 <time_monster@@Base+0x164>
   229b8:	movw	r1, #0
   229bc:	str	r0, [sp, #4]
   229c0:	mov	r0, r1
   229c4:	mov	sp, fp
   229c8:	pop	{fp, pc}
   229cc:	andeq	r1, r1, pc, lsl #12
   229d0:	andeq	r4, pc, r0, asr #4
   229d4:			; <UNDEFINED> instruction: 0x000115b9
   229d8:	andeq	r1, r1, r3, asr #11
   229dc:	nop	{0}
   229e0:	push	{fp, lr}
   229e4:	mov	fp, sp
   229e8:	sub	sp, sp, #8
   229ec:	mov	r0, sp
   229f0:	movw	r1, #0
   229f4:	bl	12dd8 <gettimeofday@plt>
   229f8:	ldr	r1, [pc, #112]	; 22a70 <time_monster@@Base+0x154>
   229fc:	add	r1, pc, r1
   22a00:	ldr	r1, [r1]
   22a04:	cmp	r1, #0
   22a08:	bne	22a24 <time_monster@@Base+0x108>
   22a0c:	ldr	r0, [pc, #96]	; 22a74 <time_monster@@Base+0x158>
   22a10:	add	r0, pc, r0
   22a14:	ldr	r1, [sp]
   22a18:	str	r1, [r0]
   22a1c:	ldr	r1, [sp, #4]
   22a20:	str	r1, [r0, #4]
   22a24:	vldr	d16, [pc, #60]	; 22a68 <time_monster@@Base+0x14c>
   22a28:	ldr	r0, [pc, #72]	; 22a78 <time_monster@@Base+0x15c>
   22a2c:	add	r0, pc, r0
   22a30:	ldr	r1, [sp]
   22a34:	ldr	r2, [r0]
   22a38:	sub	r1, r1, r2
   22a3c:	vmov	s0, r1
   22a40:	vcvt.f64.s32	d17, s0
   22a44:	ldr	r1, [sp, #4]
   22a48:	ldr	r0, [r0, #4]
   22a4c:	sub	r0, r1, r0
   22a50:	vmov	s0, r0
   22a54:	vcvt.f64.s32	d18, s0
   22a58:	vdiv.f64	d16, d18, d16
   22a5c:	vadd.f64	d0, d17, d16
   22a60:	mov	sp, fp
   22a64:	pop	{fp, pc}
   22a68:	andeq	r0, r0, r0
   22a6c:	smlawbmi	lr, r0, r4, r8
   22a70:	andeq	r5, r2, ip, ror r6
   22a74:	andeq	r5, r2, r8, ror #12
   22a78:	andeq	r5, r2, ip, asr #12
   22a7c:	nop	{0}
   22a80:	push	{fp, lr}
   22a84:	mov	fp, sp
   22a88:	sub	sp, sp, #80	; 0x50
   22a8c:	ldr	ip, [pc, #584]	; 22cdc <time_monster@@Base+0x3c0>
   22a90:	add	ip, pc, ip
   22a94:	str	r0, [fp, #-4]
   22a98:	vstr	d0, [fp, #-16]
   22a9c:	vstr	d1, [fp, #-24]	; 0xffffffe8
   22aa0:	str	r1, [fp, #-28]	; 0xffffffe4
   22aa4:	str	r2, [fp, #-32]	; 0xffffffe0
   22aa8:	str	r3, [fp, #-36]	; 0xffffffdc
   22aac:	vldr	d16, [fp, #-24]	; 0xffffffe8
   22ab0:	vldr	d17, [fp, #-16]
   22ab4:	vsub.f64	d16, d16, d17
   22ab8:	vstr	d16, [sp, #32]
   22abc:	ldr	r1, [fp, #-4]
   22ac0:	mov	r0, ip
   22ac4:	bl	12d9c <printf@plt>
   22ac8:	ldr	r1, [pc, #520]	; 22cd8 <time_monster@@Base+0x3bc>
   22acc:	add	r1, pc, r1
   22ad0:	vldr	d16, [sp, #32]
   22ad4:	str	r0, [sp, #20]
   22ad8:	mov	r0, r1
   22adc:	vmov	r2, r3, d16
   22ae0:	bl	12d9c <printf@plt>
   22ae4:	ldr	r1, [pc, #488]	; 22cd4 <time_monster@@Base+0x3b8>
   22ae8:	add	r1, pc, r1
   22aec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   22af0:	str	r0, [sp, #16]
   22af4:	mov	r0, r1
   22af8:	mov	r1, r2
   22afc:	bl	12d9c <printf@plt>
   22b00:	ldr	r1, [pc, #456]	; 22cd0 <time_monster@@Base+0x3b4>
   22b04:	add	r1, pc, r1
   22b08:	ldr	r2, [fp, #-28]	; 0xffffffe4
   22b0c:	str	r0, [sp, #12]
   22b10:	mov	r0, r1
   22b14:	mov	r1, r2
   22b18:	bl	12d9c <printf@plt>
   22b1c:	ldr	r1, [pc, #424]	; 22ccc <time_monster@@Base+0x3b0>
   22b20:	add	r1, pc, r1
   22b24:	vldr	d16, [pc, #388]	; 22cb0 <time_monster@@Base+0x394>
   22b28:	ldr	r2, [fp, #-32]	; 0xffffffe0
   22b2c:	vmov	s4, r2
   22b30:	vcvt.f64.s32	d17, s4
   22b34:	ldr	r2, [fp, #-28]	; 0xffffffe4
   22b38:	vmov	s4, r2
   22b3c:	vcvt.f64.u32	d18, s4
   22b40:	vmul.f64	d17, d17, d18
   22b44:	vdiv.f64	d16, d17, d16
   22b48:	vldr	d17, [sp, #32]
   22b4c:	vdiv.f64	d16, d16, d17
   22b50:	str	r0, [sp, #8]
   22b54:	mov	r0, r1
   22b58:	vmov	r2, r3, d16
   22b5c:	bl	12d9c <printf@plt>
   22b60:	ldr	r1, [pc, #352]	; 22cc8 <time_monster@@Base+0x3ac>
   22b64:	add	r1, pc, r1
   22b68:	ldr	r2, [fp, #-32]	; 0xffffffe0
   22b6c:	vmov	s4, r2
   22b70:	vcvt.f64.s32	d16, s4
   22b74:	vldr	d17, [sp, #32]
   22b78:	vdiv.f64	d16, d16, d17
   22b7c:	str	r0, [sp, #4]
   22b80:	mov	r0, r1
   22b84:	vmov	r2, r3, d16
   22b88:	bl	12d9c <printf@plt>
   22b8c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   22b90:	movw	r2, #0
   22b94:	cmp	r1, r2
   22b98:	beq	22bc8 <time_monster@@Base+0x2ac>
   22b9c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   22ba0:	cmp	r0, #1
   22ba4:	beq	22bc8 <time_monster@@Base+0x2ac>
   22ba8:	ldr	r0, [pc, #304]	; 22ce0 <time_monster@@Base+0x3c4>
   22bac:	add	r0, pc, r0
   22bb0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   22bb4:	vldr	d16, [sp, #32]
   22bb8:	vmov.f64	d17, #112	; 0x3f800000  1.0
   22bbc:	vdiv.f64	d16, d17, d16
   22bc0:	vmov	r2, r3, d16
   22bc4:	bl	12d9c <printf@plt>
   22bc8:	vldr	d16, [pc, #232]	; 22cb8 <time_monster@@Base+0x39c>
   22bcc:	vldr	d17, [pc, #236]	; 22cc0 <time_monster@@Base+0x3a4>
   22bd0:	vldr	d18, [sp, #32]
   22bd4:	vmul.f64	d17, d18, d17
   22bd8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   22bdc:	vmov	s0, r0
   22be0:	vcvt.f64.s32	d18, s0
   22be4:	vdiv.f64	d17, d17, d18
   22be8:	vstr	d17, [sp, #24]
   22bec:	vldr	d17, [sp, #24]
   22bf0:	vcmpe.f64	d17, d16
   22bf4:	vmrs	APSR_nzcv, fpscr
   22bf8:	bpl	22c14 <time_monster@@Base+0x2f8>
   22bfc:	ldr	r0, [pc, #236]	; 22cf0 <time_monster@@Base+0x3d4>
   22c00:	add	r0, pc, r0
   22c04:	vldr	d16, [sp, #24]
   22c08:	vmov	r2, r3, d16
   22c0c:	bl	12d9c <printf@plt>
   22c10:	b	22ca0 <time_monster@@Base+0x384>
   22c14:	vldr	d16, [pc, #148]	; 22cb0 <time_monster@@Base+0x394>
   22c18:	vldr	d17, [sp, #24]
   22c1c:	vcmpe.f64	d17, d16
   22c20:	vmrs	APSR_nzcv, fpscr
   22c24:	bpl	22c48 <time_monster@@Base+0x32c>
   22c28:	ldr	r0, [pc, #188]	; 22cec <time_monster@@Base+0x3d0>
   22c2c:	add	r0, pc, r0
   22c30:	vldr	d16, [pc, #128]	; 22cb8 <time_monster@@Base+0x39c>
   22c34:	vldr	d17, [sp, #24]
   22c38:	vdiv.f64	d16, d17, d16
   22c3c:	vmov	r2, r3, d16
   22c40:	bl	12d9c <printf@plt>
   22c44:	b	22c9c <time_monster@@Base+0x380>
   22c48:	vldr	d16, [pc, #112]	; 22cc0 <time_monster@@Base+0x3a4>
   22c4c:	vldr	d17, [sp, #24]
   22c50:	vcmpe.f64	d17, d16
   22c54:	vmrs	APSR_nzcv, fpscr
   22c58:	bpl	22c7c <time_monster@@Base+0x360>
   22c5c:	ldr	r0, [pc, #132]	; 22ce8 <time_monster@@Base+0x3cc>
   22c60:	add	r0, pc, r0
   22c64:	vldr	d16, [pc, #68]	; 22cb0 <time_monster@@Base+0x394>
   22c68:	vldr	d17, [sp, #24]
   22c6c:	vdiv.f64	d16, d17, d16
   22c70:	vmov	r2, r3, d16
   22c74:	bl	12d9c <printf@plt>
   22c78:	b	22c98 <time_monster@@Base+0x37c>
   22c7c:	ldr	r0, [pc, #96]	; 22ce4 <time_monster@@Base+0x3c8>
   22c80:	add	r0, pc, r0
   22c84:	vldr	d16, [pc, #52]	; 22cc0 <time_monster@@Base+0x3a4>
   22c88:	vldr	d17, [sp, #24]
   22c8c:	vdiv.f64	d16, d17, d16
   22c90:	vmov	r2, r3, d16
   22c94:	bl	12d9c <printf@plt>
   22c98:	b	22c9c <time_monster@@Base+0x380>
   22c9c:	b	22ca0 <time_monster@@Base+0x384>
   22ca0:	movw	r0, #0
   22ca4:	mov	sp, fp
   22ca8:	pop	{fp, pc}
   22cac:	nop	{0}
   22cb0:	andeq	r0, r0, r0
   22cb4:	smlawbmi	lr, r0, r4, r8
   22cb8:	andeq	r0, r0, r0
   22cbc:	addmi	r4, pc, r0
   22cc0:	andeq	r0, r0, r0
   22cc4:	bicmi	ip, sp, r5, ror #26
   22cc8:	andeq	r3, r1, r5, asr #9
   22ccc:	strdeq	r3, [r1], -r1
   22cd0:	strdeq	r3, [r1], -sl
   22cd4:	andeq	r3, r1, r6, lsl #10
   22cd8:	andeq	r3, r1, sl, lsl #10
   22cdc:	andeq	r3, r1, r7, lsr r5
   22ce0:	muleq	r1, lr, r4
   22ce4:	andeq	r3, r1, r6, lsr r4
   22ce8:	andeq	r3, r1, lr, lsr r4
   22cec:	andeq	r3, r1, sl, asr r4
   22cf0:	andeq	r3, r1, lr, ror #8
   22cf4:	nop	{0}

00022cf8 <gen_struct_buffer_benchmark@@Base>:
   22cf8:	push	{fp, lr}
   22cfc:	mov	fp, sp
   22d00:	sub	sp, sp, #32
   22d04:	str	r0, [fp, #-8]
   22d08:	ldr	r0, [fp, #-8]
   22d0c:	bl	286d4 <flatcc_builder_reset@@Base>
   22d10:	vldr	d2, [pc, #312]	; 22e50 <gen_struct_buffer_benchmark@@Base+0x158>
   22d14:	ldr	r1, [fp, #-8]
   22d18:	str	r0, [sp, #8]
   22d1c:	mov	r0, r1
   22d20:	vmov.f32	s0, #112	; 0x3f800000  1.0
   22d24:	vmov.f32	s1, #0	; 0x40000000  2.0
   22d28:	vmov.f32	s2, #8	; 0x40400000  3.0
   22d2c:	movw	r1, #8
   22d30:	sxtb	r1, r1
   22d34:	movw	r2, #2730	; 0xaaa
   22d38:	sxth	r2, r2
   22d3c:	movw	r3, #239	; 0xef
   22d40:	sxtb	r3, r3
   22d44:	bl	21fe4 <test_struct_buffer@@Base+0x304>
   22d48:	ldr	r1, [fp, #-8]
   22d4c:	str	r0, [sp, #4]
   22d50:	mov	r0, r1
   22d54:	movw	r1, #0
   22d58:	bl	2d8a8 <flatcc_builder_get_direct_buffer@@Base>
   22d5c:	str	r0, [fp, #-12]
   22d60:	ldr	r0, [fp, #-12]
   22d64:	movw	r1, #0
   22d68:	cmp	r0, r1
   22d6c:	bne	22d7c <gen_struct_buffer_benchmark@@Base+0x84>
   22d70:	mvn	r0, #0
   22d74:	str	r0, [fp, #-4]
   22d78:	b	22e44 <gen_struct_buffer_benchmark@@Base+0x14c>
   22d7c:	ldr	r0, [fp, #-12]
   22d80:	movw	r1, #0
   22d84:	bl	22e58 <gen_struct_buffer_benchmark@@Base+0x160>
   22d88:	str	r0, [sp, #12]
   22d8c:	ldr	r0, [sp, #12]
   22d90:	str	r0, [sp, #16]
   22d94:	ldr	r0, [sp, #16]
   22d98:	bl	22120 <test_struct_buffer@@Base+0x440>
   22d9c:	ldr	r1, [sp, #16]
   22da0:	vldr	s0, [r1]
   22da4:	vmov.f32	s2, #112	; 0x3f800000  1.0
   22da8:	vcmp.f32	s0, s2
   22dac:	vmrs	APSR_nzcv, fpscr
   22db0:	bne	22e30 <gen_struct_buffer_benchmark@@Base+0x138>
   22db4:	ldr	r0, [sp, #16]
   22db8:	vldr	s0, [r0, #4]
   22dbc:	vmov.f32	s2, #0	; 0x40000000  2.0
   22dc0:	vcmp.f32	s0, s2
   22dc4:	vmrs	APSR_nzcv, fpscr
   22dc8:	bne	22e30 <gen_struct_buffer_benchmark@@Base+0x138>
   22dcc:	ldr	r0, [sp, #16]
   22dd0:	vldr	s0, [r0, #8]
   22dd4:	vmov.f32	s2, #8	; 0x40400000  3.0
   22dd8:	vcmp.f32	s0, s2
   22ddc:	vmrs	APSR_nzcv, fpscr
   22de0:	bne	22e30 <gen_struct_buffer_benchmark@@Base+0x138>
   22de4:	vldr	d16, [pc, #100]	; 22e50 <gen_struct_buffer_benchmark@@Base+0x158>
   22de8:	ldr	r0, [sp, #16]
   22dec:	vldr	d17, [r0, #16]
   22df0:	vcmp.f64	d17, d16
   22df4:	vmrs	APSR_nzcv, fpscr
   22df8:	bne	22e30 <gen_struct_buffer_benchmark@@Base+0x138>
   22dfc:	ldr	r0, [sp, #16]
   22e00:	ldrsb	r0, [r0, #24]
   22e04:	cmp	r0, #8
   22e08:	bne	22e30 <gen_struct_buffer_benchmark@@Base+0x138>
   22e0c:	ldr	r0, [sp, #16]
   22e10:	ldrsh	r0, [r0, #26]
   22e14:	movw	r1, #2730	; 0xaaa
   22e18:	cmp	r0, r1
   22e1c:	bne	22e30 <gen_struct_buffer_benchmark@@Base+0x138>
   22e20:	ldr	r0, [sp, #16]
   22e24:	ldrsb	r0, [r0, #28]
   22e28:	cmn	r0, #17
   22e2c:	beq	22e3c <gen_struct_buffer_benchmark@@Base+0x144>
   22e30:	mvn	r0, #0
   22e34:	str	r0, [fp, #-4]
   22e38:	b	22e44 <gen_struct_buffer_benchmark@@Base+0x14c>
   22e3c:	movw	r0, #0
   22e40:	str	r0, [fp, #-4]
   22e44:	ldr	r0, [fp, #-4]
   22e48:	mov	sp, fp
   22e4c:	pop	{fp, pc}
   22e50:	stclgt	12, cr12, [ip], {205}	; 0xcd
   22e54:	andsmi	ip, r0, ip, asr #25
   22e58:	push	{fp, lr}
   22e5c:	mov	fp, sp
   22e60:	sub	sp, sp, #16
   22e64:	str	r0, [fp, #-4]
   22e68:	str	r1, [sp, #8]
   22e6c:	ldr	r0, [fp, #-4]
   22e70:	movw	r1, #0
   22e74:	cmp	r0, r1
   22e78:	beq	22e90 <gen_struct_buffer_benchmark@@Base+0x198>
   22e7c:	ldr	r0, [fp, #-4]
   22e80:	ldr	r1, [sp, #8]
   22e84:	bl	157d0 <test_typed_table_with_emptystruct@@Base+0x4b8>
   22e88:	cmp	r0, #0
   22e8c:	bne	22e9c <gen_struct_buffer_benchmark@@Base+0x1a4>
   22e90:	movw	r0, #0
   22e94:	str	r0, [sp, #4]
   22e98:	b	22ebc <gen_struct_buffer_benchmark@@Base+0x1c4>
   22e9c:	ldr	r0, [fp, #-4]
   22ea0:	ldr	r1, [fp, #-4]
   22ea4:	str	r0, [sp]
   22ea8:	mov	r0, r1
   22eac:	bl	23414 <main@@Base+0x45c>
   22eb0:	ldr	r1, [sp]
   22eb4:	add	r0, r1, r0
   22eb8:	str	r0, [sp, #4]
   22ebc:	ldr	r0, [sp, #4]
   22ec0:	mov	sp, fp
   22ec4:	pop	{fp, pc}

00022ec8 <time_struct_buffer@@Base>:
   22ec8:	push	{fp, lr}
   22ecc:	mov	fp, sp
   22ed0:	sub	sp, sp, #48	; 0x30
   22ed4:	ldr	r1, [pc, #200]	; 22fa4 <time_struct_buffer@@Base+0xdc>
   22ed8:	add	r1, pc, r1
   22edc:	ldr	r2, [pc, #196]	; 22fa8 <time_struct_buffer@@Base+0xe0>
   22ee0:	str	r0, [fp, #-4]
   22ee4:	str	r2, [sp, #20]
   22ee8:	movw	r0, #0
   22eec:	str	r0, [sp, #8]
   22ef0:	mov	r0, r1
   22ef4:	bl	12d9c <printf@plt>
   22ef8:	str	r0, [sp, #4]
   22efc:	bl	229e0 <time_monster@@Base+0xc4>
   22f00:	vstr	d0, [fp, #-16]
   22f04:	movw	r0, #0
   22f08:	str	r0, [sp, #12]
   22f0c:	ldr	r0, [pc, #148]	; 22fa8 <time_struct_buffer@@Base+0xe0>
   22f10:	ldr	r1, [sp, #12]
   22f14:	cmp	r1, r0
   22f18:	bge	22f40 <time_struct_buffer@@Base+0x78>
   22f1c:	ldr	r0, [fp, #-4]
   22f20:	bl	22cf8 <gen_struct_buffer_benchmark@@Base>
   22f24:	ldr	r1, [sp, #8]
   22f28:	orr	r0, r1, r0
   22f2c:	str	r0, [sp, #8]
   22f30:	ldr	r0, [sp, #12]
   22f34:	add	r0, r0, #1
   22f38:	str	r0, [sp, #12]
   22f3c:	b	22f0c <time_struct_buffer@@Base+0x44>
   22f40:	bl	229e0 <time_monster@@Base+0xc4>
   22f44:	vstr	d0, [sp, #24]
   22f48:	ldr	r0, [fp, #-4]
   22f4c:	bl	2d704 <flatcc_builder_get_buffer_size@@Base>
   22f50:	str	r0, [sp, #16]
   22f54:	ldr	r0, [sp, #8]
   22f58:	cmp	r0, #0
   22f5c:	beq	22f6c <time_struct_buffer@@Base+0xa4>
   22f60:	ldr	r0, [pc, #68]	; 22fac <time_struct_buffer@@Base+0xe4>
   22f64:	add	r0, pc, r0
   22f68:	bl	12d9c <printf@plt>
   22f6c:	ldr	r0, [pc, #60]	; 22fb0 <time_struct_buffer@@Base+0xe8>
   22f70:	add	r0, pc, r0
   22f74:	ldr	r2, [pc, #44]	; 22fa8 <time_struct_buffer@@Base+0xe0>
   22f78:	ldr	r1, [pc, #52]	; 22fb4 <time_struct_buffer@@Base+0xec>
   22f7c:	add	r3, pc, r1
   22f80:	vldr	d0, [fp, #-16]
   22f84:	vldr	d1, [sp, #24]
   22f88:	ldr	r1, [sp, #16]
   22f8c:	bl	22a80 <time_monster@@Base+0x164>
   22f90:	ldr	r1, [sp, #8]
   22f94:	str	r0, [sp]
   22f98:	mov	r0, r1
   22f9c:	mov	sp, fp
   22fa0:	pop	{fp, pc}
   22fa4:	andeq	r1, r1, r3, rrx
   22fa8:	andeq	r4, pc, r0, asr #4
   22fac:	andeq	r1, r1, r7
   22fb0:	andeq	r1, r1, sp
   22fb4:	andeq	r0, r1, r7, ror #31

00022fb8 <main@@Base>:
   22fb8:	push	{r4, r5, fp, lr}
   22fbc:	add	fp, sp, #8
   22fc0:	sub	sp, sp, #256	; 0x100
   22fc4:	movw	r2, #0
   22fc8:	str	r2, [fp, #-12]
   22fcc:	str	r0, [fp, #-16]
   22fd0:	str	r1, [fp, #-20]	; 0xffffffec
   22fd4:	add	r0, sp, #12
   22fd8:	str	r0, [sp, #8]
   22fdc:	ldr	r0, [sp, #8]
   22fe0:	bl	28454 <flatcc_builder_init@@Base>
   22fe4:	ldr	r1, [pc, #968]	; 233b4 <main@@Base+0x3fc>
   22fe8:	add	r1, pc, r1
   22fec:	str	r0, [sp, #4]
   22ff0:	mov	r0, r1
   22ff4:	bl	12d9c <printf@plt>
   22ff8:	ldr	r1, [sp, #8]
   22ffc:	str	r0, [sp]
   23000:	mov	r0, r1
   23004:	bl	151e8 <test_table_with_emptystruct@@Base>
   23008:	cmp	r0, #0
   2300c:	beq	23028 <main@@Base+0x70>
   23010:	ldr	r0, [pc, #1016]	; 23410 <main@@Base+0x458>
   23014:	add	r0, pc, r0
   23018:	bl	12d9c <printf@plt>
   2301c:	mvn	r1, #0
   23020:	str	r1, [fp, #-12]
   23024:	b	233a8 <main@@Base+0x3f0>
   23028:	ldr	r0, [sp, #8]
   2302c:	bl	135e0 <test_enums@@Base>
   23030:	cmp	r0, #0
   23034:	beq	23050 <main@@Base+0x98>
   23038:	ldr	r0, [pc, #972]	; 2340c <main@@Base+0x454>
   2303c:	add	r0, pc, r0
   23040:	bl	12d9c <printf@plt>
   23044:	mvn	r1, #0
   23048:	str	r1, [fp, #-12]
   2304c:	b	233a8 <main@@Base+0x3f0>
   23050:	ldr	r0, [sp, #8]
   23054:	bl	146fc <test_empty_monster@@Base>
   23058:	cmp	r0, #0
   2305c:	beq	23078 <main@@Base+0xc0>
   23060:	ldr	r0, [pc, #928]	; 23408 <main@@Base+0x450>
   23064:	add	r0, pc, r0
   23068:	bl	12d9c <printf@plt>
   2306c:	mvn	r1, #0
   23070:	str	r1, [fp, #-12]
   23074:	b	233a8 <main@@Base+0x3f0>
   23078:	ldr	r0, [sp, #8]
   2307c:	bl	198c0 <test_monster@@Base>
   23080:	cmp	r0, #0
   23084:	beq	230a0 <main@@Base+0xe8>
   23088:	ldr	r0, [pc, #884]	; 23404 <main@@Base+0x44c>
   2308c:	add	r0, pc, r0
   23090:	bl	12d9c <printf@plt>
   23094:	mvn	r1, #0
   23098:	str	r1, [fp, #-12]
   2309c:	b	233a8 <main@@Base+0x3f0>
   230a0:	ldr	r0, [sp, #8]
   230a4:	bl	199a4 <test_monster_with_size@@Base>
   230a8:	cmp	r0, #0
   230ac:	beq	230c8 <main@@Base+0x110>
   230b0:	ldr	r0, [pc, #840]	; 23400 <main@@Base+0x448>
   230b4:	add	r0, pc, r0
   230b8:	bl	12d9c <printf@plt>
   230bc:	mvn	r1, #0
   230c0:	str	r1, [fp, #-12]
   230c4:	b	233a8 <main@@Base+0x3f0>
   230c8:	ldr	r0, [sp, #8]
   230cc:	bl	19b68 <test_string@@Base>
   230d0:	cmp	r0, #0
   230d4:	beq	230f0 <main@@Base+0x138>
   230d8:	ldr	r0, [pc, #796]	; 233fc <main@@Base+0x444>
   230dc:	add	r0, pc, r0
   230e0:	bl	12d9c <printf@plt>
   230e4:	mvn	r1, #0
   230e8:	str	r1, [fp, #-12]
   230ec:	b	233a8 <main@@Base+0x3f0>
   230f0:	ldr	r0, [sp, #8]
   230f4:	bl	21ce0 <test_struct_buffer@@Base>
   230f8:	cmp	r0, #0
   230fc:	beq	23118 <main@@Base+0x160>
   23100:	ldr	r0, [pc, #752]	; 233f8 <main@@Base+0x440>
   23104:	add	r0, pc, r0
   23108:	bl	12d9c <printf@plt>
   2310c:	mvn	r1, #0
   23110:	str	r1, [fp, #-12]
   23114:	b	233a8 <main@@Base+0x3f0>
   23118:	ldr	r0, [sp, #8]
   2311c:	bl	14a50 <test_typed_empty_monster@@Base>
   23120:	cmp	r0, #0
   23124:	beq	23140 <main@@Base+0x188>
   23128:	ldr	r0, [pc, #708]	; 233f4 <main@@Base+0x43c>
   2312c:	add	r0, pc, r0
   23130:	bl	12d9c <printf@plt>
   23134:	mvn	r1, #0
   23138:	str	r1, [fp, #-12]
   2313c:	b	233a8 <main@@Base+0x3f0>
   23140:	ldr	r0, [sp, #8]
   23144:	bl	15318 <test_typed_table_with_emptystruct@@Base>
   23148:	cmp	r0, #0
   2314c:	beq	23168 <main@@Base+0x1b0>
   23150:	ldr	r0, [pc, #664]	; 233f0 <main@@Base+0x438>
   23154:	add	r0, pc, r0
   23158:	bl	12d9c <printf@plt>
   2315c:	mvn	r1, #0
   23160:	str	r1, [fp, #-12]
   23164:	b	233a8 <main@@Base+0x3f0>
   23168:	ldr	r0, [sp, #8]
   2316c:	bl	22138 <test_typed_struct_buffer@@Base>
   23170:	cmp	r0, #0
   23174:	beq	23190 <main@@Base+0x1d8>
   23178:	ldr	r0, [pc, #620]	; 233ec <main@@Base+0x434>
   2317c:	add	r0, pc, r0
   23180:	bl	12d9c <printf@plt>
   23184:	mvn	r1, #0
   23188:	str	r1, [fp, #-12]
   2318c:	b	233a8 <main@@Base+0x3f0>
   23190:	ldr	r0, [sp, #8]
   23194:	bl	1d388 <test_clone_slice@@Base>
   23198:	cmp	r0, #0
   2319c:	beq	231b8 <main@@Base+0x200>
   231a0:	ldr	r0, [pc, #576]	; 233e8 <main@@Base+0x430>
   231a4:	add	r0, pc, r0
   231a8:	bl	12d9c <printf@plt>
   231ac:	mvn	r1, #0
   231b0:	str	r1, [fp, #-12]
   231b4:	b	233a8 <main@@Base+0x3f0>
   231b8:	ldr	r0, [sp, #8]
   231bc:	bl	20ec8 <test_add_set_defaults@@Base>
   231c0:	cmp	r0, #0
   231c4:	beq	231e0 <main@@Base+0x228>
   231c8:	ldr	r0, [pc, #532]	; 233e4 <main@@Base+0x42c>
   231cc:	add	r0, pc, r0
   231d0:	bl	12d9c <printf@plt>
   231d4:	mvn	r1, #0
   231d8:	str	r1, [fp, #-12]
   231dc:	b	233a8 <main@@Base+0x3f0>
   231e0:	ldr	r0, [sp, #8]
   231e4:	bl	1dfac <test_create_add_field@@Base>
   231e8:	cmp	r0, #0
   231ec:	beq	23208 <main@@Base+0x250>
   231f0:	ldr	r0, [pc, #488]	; 233e0 <main@@Base+0x428>
   231f4:	add	r0, pc, r0
   231f8:	bl	12d9c <printf@plt>
   231fc:	mvn	r1, #0
   23200:	str	r1, [fp, #-12]
   23204:	b	233a8 <main@@Base+0x3f0>
   23208:	ldr	r0, [sp, #8]
   2320c:	bl	1e3c8 <test_union_vector@@Base>
   23210:	cmp	r0, #0
   23214:	beq	23230 <main@@Base+0x278>
   23218:	ldr	r0, [pc, #444]	; 233dc <main@@Base+0x424>
   2321c:	add	r0, pc, r0
   23220:	bl	12d9c <printf@plt>
   23224:	mvn	r1, #0
   23228:	str	r1, [fp, #-12]
   2322c:	b	233a8 <main@@Base+0x3f0>
   23230:	ldr	r0, [sp, #8]
   23234:	bl	1cf74 <test_basic_sort@@Base>
   23238:	cmp	r0, #0
   2323c:	beq	23258 <main@@Base+0x2a0>
   23240:	ldr	r0, [pc, #400]	; 233d8 <main@@Base+0x420>
   23244:	add	r0, pc, r0
   23248:	bl	12d9c <printf@plt>
   2324c:	mvn	r1, #0
   23250:	str	r1, [fp, #-12]
   23254:	b	233a8 <main@@Base+0x3f0>
   23258:	ldr	r0, [sp, #8]
   2325c:	bl	19fa8 <test_sort_find@@Base>
   23260:	cmp	r0, #0
   23264:	beq	23280 <main@@Base+0x2c8>
   23268:	ldr	r0, [pc, #356]	; 233d4 <main@@Base+0x41c>
   2326c:	add	r0, pc, r0
   23270:	bl	12d9c <printf@plt>
   23274:	mvn	r1, #0
   23278:	str	r1, [fp, #-12]
   2327c:	b	233a8 <main@@Base+0x3f0>
   23280:	ldr	r0, [sp, #8]
   23284:	bl	1a8f0 <test_scan@@Base>
   23288:	cmp	r0, #0
   2328c:	beq	232a8 <main@@Base+0x2f0>
   23290:	ldr	r0, [pc, #312]	; 233d0 <main@@Base+0x418>
   23294:	add	r0, pc, r0
   23298:	bl	12d9c <printf@plt>
   2329c:	mvn	r1, #0
   232a0:	str	r1, [fp, #-12]
   232a4:	b	233a8 <main@@Base+0x3f0>
   232a8:	ldr	r0, [sp, #8]
   232ac:	bl	213dc <test_nested_buffer@@Base>
   232b0:	cmp	r0, #0
   232b4:	beq	232d0 <main@@Base+0x318>
   232b8:	ldr	r0, [pc, #268]	; 233cc <main@@Base+0x414>
   232bc:	add	r0, pc, r0
   232c0:	bl	12d9c <printf@plt>
   232c4:	mvn	r1, #0
   232c8:	str	r1, [fp, #-12]
   232cc:	b	233a8 <main@@Base+0x3f0>
   232d0:	ldr	r0, [sp, #8]
   232d4:	bl	21728 <test_nested_buffer_first@@Base>
   232d8:	cmp	r0, #0
   232dc:	beq	232f8 <main@@Base+0x340>
   232e0:	ldr	r0, [pc, #224]	; 233c8 <main@@Base+0x410>
   232e4:	add	r0, pc, r0
   232e8:	bl	12d9c <printf@plt>
   232ec:	mvn	r1, #0
   232f0:	str	r1, [fp, #-12]
   232f4:	b	233a8 <main@@Base+0x3f0>
   232f8:	ldr	r0, [sp, #8]
   232fc:	bl	21940 <test_nested_buffer_using_nest@@Base>
   23300:	cmp	r0, #0
   23304:	beq	23320 <main@@Base+0x368>
   23308:	ldr	r0, [pc, #180]	; 233c4 <main@@Base+0x40c>
   2330c:	add	r0, pc, r0
   23310:	bl	12d9c <printf@plt>
   23314:	mvn	r1, #0
   23318:	str	r1, [fp, #-12]
   2331c:	b	233a8 <main@@Base+0x3f0>
   23320:	ldr	r0, [sp, #8]
   23324:	bl	21cc8 <verify_include@@Base>
   23328:	cmp	r0, #0
   2332c:	beq	23348 <main@@Base+0x390>
   23330:	ldr	r0, [pc, #136]	; 233c0 <main@@Base+0x408>
   23334:	add	r0, pc, r0
   23338:	bl	12d9c <printf@plt>
   2333c:	mvn	r1, #0
   23340:	str	r1, [fp, #-12]
   23344:	b	233a8 <main@@Base+0x3f0>
   23348:	ldr	r0, [sp, #8]
   2334c:	bl	135f8 <test_type_aliases@@Base>
   23350:	cmp	r0, #0
   23354:	beq	23370 <main@@Base+0x3b8>
   23358:	ldr	r0, [pc, #92]	; 233bc <main@@Base+0x404>
   2335c:	add	r0, pc, r0
   23360:	bl	12d9c <printf@plt>
   23364:	mvn	r1, #0
   23368:	str	r1, [fp, #-12]
   2336c:	b	233a8 <main@@Base+0x3f0>
   23370:	ldr	r0, [sp, #8]
   23374:	bl	1f06c <test_mixed_type_union@@Base>
   23378:	cmp	r0, #0
   2337c:	beq	23398 <main@@Base+0x3e0>
   23380:	ldr	r0, [pc, #48]	; 233b8 <main@@Base+0x400>
   23384:	add	r0, pc, r0
   23388:	bl	12d9c <printf@plt>
   2338c:	mvn	r1, #0
   23390:	str	r1, [fp, #-12]
   23394:	b	233a8 <main@@Base+0x3f0>
   23398:	ldr	r0, [sp, #8]
   2339c:	bl	28700 <flatcc_builder_clear@@Base>
   233a0:	movw	r0, #0
   233a4:	str	r0, [fp, #-12]
   233a8:	ldr	r0, [fp, #-12]
   233ac:	sub	sp, fp, #8
   233b0:	pop	{r4, r5, fp, pc}
   233b4:	andeq	r0, r1, r2, asr #31
   233b8:	andeq	r0, r1, r2, asr #24
   233bc:	andeq	r0, r1, sl, ror #24
   233c0:	muleq	r1, r2, ip
   233c4:			; <UNDEFINED> instruction: 0x00010cba
   233c8:	andeq	r0, r1, r2, ror #25
   233cc:	andeq	r0, r1, sl, lsl #26
   233d0:	andeq	r0, r1, r2, lsr sp
   233d4:	andeq	r0, r1, sl, asr sp
   233d8:	andeq	r0, r1, r2, lsl #27
   233dc:	andeq	r0, r1, sl, lsr #27
   233e0:	ldrdeq	r0, [r1], -r2
   233e4:	strdeq	r0, [r1], -sl
   233e8:	andeq	r0, r1, r2, lsr #28
   233ec:	andeq	r0, r1, sl, asr #28
   233f0:	andeq	r0, r1, r2, ror lr
   233f4:	muleq	r1, sl, lr
   233f8:	andeq	r0, r1, r2, asr #29
   233fc:	andeq	r0, r1, sl, ror #29
   23400:	andeq	r0, r1, r2, lsl pc
   23404:	andeq	r0, r1, sl, lsr pc
   23408:	andeq	r0, r1, r2, ror #30
   2340c:	andeq	r0, r1, sl, lsl #31
   23410:			; <UNDEFINED> instruction: 0x00010fb2
   23414:	push	{fp, lr}
   23418:	mov	fp, sp
   2341c:	sub	sp, sp, #8
   23420:	str	r0, [sp, #4]
   23424:	ldr	r0, [sp, #4]
   23428:	ldr	r0, [r0]
   2342c:	bl	23438 <main@@Base+0x480>
   23430:	mov	sp, fp
   23434:	pop	{fp, pc}
   23438:	sub	sp, sp, #4
   2343c:	str	r0, [sp]
   23440:	ldr	r0, [sp]
   23444:	add	sp, sp, #4
   23448:	bx	lr
   2344c:	push	{fp, lr}
   23450:	mov	fp, sp
   23454:	sub	sp, sp, #8
   23458:	str	r0, [sp, #4]
   2345c:	ldr	r0, [sp, #4]
   23460:	ldr	r0, [r0]
   23464:	bl	234c0 <main@@Base+0x508>
   23468:	mov	sp, fp
   2346c:	pop	{fp, pc}
   23470:	push	{fp, lr}
   23474:	mov	fp, sp
   23478:	sub	sp, sp, #8
   2347c:	str	r0, [sp, #4]
   23480:	ldr	r0, [sp, #4]
   23484:	ldrh	r0, [r0]
   23488:	bl	234d4 <main@@Base+0x51c>
   2348c:	uxth	r0, r0
   23490:	mov	sp, fp
   23494:	pop	{fp, pc}
   23498:	push	{fp, lr}
   2349c:	mov	fp, sp
   234a0:	sub	sp, sp, #8
   234a4:	str	r0, [sp, #4]
   234a8:	ldr	r0, [sp, #4]
   234ac:	ldrsh	r0, [r0]
   234b0:	bl	234e8 <main@@Base+0x530>
   234b4:	sxth	r0, r0
   234b8:	mov	sp, fp
   234bc:	pop	{fp, pc}
   234c0:	sub	sp, sp, #4
   234c4:	str	r0, [sp]
   234c8:	ldr	r0, [sp]
   234cc:	add	sp, sp, #4
   234d0:	bx	lr
   234d4:	sub	sp, sp, #4
   234d8:	strh	r0, [sp, #2]
   234dc:	ldrh	r0, [sp, #2]
   234e0:	add	sp, sp, #4
   234e4:	bx	lr
   234e8:	sub	sp, sp, #4
   234ec:	strh	r0, [sp, #2]
   234f0:	ldrsh	r0, [sp, #2]
   234f4:	add	sp, sp, #4
   234f8:	bx	lr
   234fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23500:	add	fp, sp, #28
   23504:	sub	sp, sp, #68	; 0x44
   23508:	ldr	ip, [fp, #36]	; 0x24
   2350c:	ldr	lr, [fp, #32]
   23510:	ldr	r4, [fp, #28]
   23514:	ldr	r5, [fp, #24]
   23518:	ldr	r6, [fp, #44]	; 0x2c
   2351c:	ldr	r7, [fp, #40]	; 0x28
   23520:	ldr	r8, [fp, #16]
   23524:	ldr	r9, [fp, #12]
   23528:	ldr	sl, [fp, #8]
   2352c:	str	r0, [fp, #-36]	; 0xffffffdc
   23530:	strb	r1, [fp, #-37]	; 0xffffffdb
   23534:	strb	r2, [fp, #-38]	; 0xffffffda
   23538:	strh	r3, [fp, #-40]	; 0xffffffd8
   2353c:	strh	sl, [fp, #-42]	; 0xffffffd6
   23540:	str	r4, [sp, #44]	; 0x2c
   23544:	str	r5, [sp, #40]	; 0x28
   23548:	str	ip, [sp, #36]	; 0x24
   2354c:	str	lr, [sp, #32]
   23550:	vstr	s0, [sp, #28]
   23554:	vstr	d1, [sp, #16]
   23558:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2355c:	str	r6, [sp, #12]
   23560:	str	r7, [sp, #8]
   23564:	str	r8, [sp, #4]
   23568:	str	r9, [sp]
   2356c:	bl	23694 <main@@Base+0x6dc>
   23570:	cmp	r0, #0
   23574:	bne	23670 <main@@Base+0x6b8>
   23578:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2357c:	ldr	r2, [sp, #40]	; 0x28
   23580:	ldr	r3, [sp, #44]	; 0x2c
   23584:	bl	236b8 <main@@Base+0x700>
   23588:	cmp	r0, #0
   2358c:	bne	23670 <main@@Base+0x6b8>
   23590:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23594:	ldr	r2, [sp, #32]
   23598:	ldr	r3, [sp, #36]	; 0x24
   2359c:	bl	2374c <main@@Base+0x794>
   235a0:	cmp	r0, #0
   235a4:	bne	23670 <main@@Base+0x6b8>
   235a8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   235ac:	vldr	d0, [sp, #16]
   235b0:	bl	237e0 <main@@Base+0x828>
   235b4:	cmp	r0, #0
   235b8:	bne	23670 <main@@Base+0x6b8>
   235bc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   235c0:	ldr	r1, [fp, #12]
   235c4:	bl	23864 <main@@Base+0x8ac>
   235c8:	cmp	r0, #0
   235cc:	bne	23670 <main@@Base+0x6b8>
   235d0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   235d4:	ldr	r1, [fp, #16]
   235d8:	bl	238e8 <main@@Base+0x930>
   235dc:	cmp	r0, #0
   235e0:	bne	23670 <main@@Base+0x6b8>
   235e4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   235e8:	vldr	s0, [sp, #28]
   235ec:	bl	23968 <main@@Base+0x9b0>
   235f0:	cmp	r0, #0
   235f4:	bne	23670 <main@@Base+0x6b8>
   235f8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   235fc:	ldr	r1, [fp, #40]	; 0x28
   23600:	bl	239ec <main@@Base+0xa34>
   23604:	cmp	r0, #0
   23608:	bne	23670 <main@@Base+0x6b8>
   2360c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23610:	ldr	r1, [fp, #44]	; 0x2c
   23614:	bl	23a58 <main@@Base+0xaa0>
   23618:	cmp	r0, #0
   2361c:	bne	23670 <main@@Base+0x6b8>
   23620:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23624:	ldrsh	r1, [fp, #-40]	; 0xffffffd8
   23628:	bl	23ac4 <main@@Base+0xb0c>
   2362c:	cmp	r0, #0
   23630:	bne	23670 <main@@Base+0x6b8>
   23634:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23638:	ldrh	r1, [fp, #-42]	; 0xffffffd6
   2363c:	bl	23b48 <main@@Base+0xb90>
   23640:	cmp	r0, #0
   23644:	bne	23670 <main@@Base+0x6b8>
   23648:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2364c:	ldrsb	r1, [fp, #-37]	; 0xffffffdb
   23650:	bl	23bc8 <main@@Base+0xc10>
   23654:	cmp	r0, #0
   23658:	bne	23670 <main@@Base+0x6b8>
   2365c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23660:	ldrb	r1, [fp, #-38]	; 0xffffffda
   23664:	bl	23c48 <main@@Base+0xc90>
   23668:	cmp	r0, #0
   2366c:	beq	2367c <main@@Base+0x6c4>
   23670:	movw	r0, #0
   23674:	str	r0, [fp, #-32]	; 0xffffffe0
   23678:	b	23688 <main@@Base+0x6d0>
   2367c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23680:	bl	23ccc <main@@Base+0xd14>
   23684:	str	r0, [fp, #-32]	; 0xffffffe0
   23688:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2368c:	sub	sp, fp, #28
   23690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23694:	push	{fp, lr}
   23698:	mov	fp, sp
   2369c:	sub	sp, sp, #8
   236a0:	str	r0, [sp, #4]
   236a4:	ldr	r0, [sp, #4]
   236a8:	movw	r1, #12
   236ac:	bl	2acb8 <flatcc_builder_start_table@@Base>
   236b0:	mov	sp, fp
   236b4:	pop	{fp, pc}
   236b8:	push	{fp, lr}
   236bc:	mov	fp, sp
   236c0:	sub	sp, sp, #24
   236c4:	str	r0, [fp, #-8]
   236c8:	str	r3, [sp, #12]
   236cc:	str	r2, [sp, #8]
   236d0:	ldr	r0, [sp, #8]
   236d4:	ldr	r1, [sp, #12]
   236d8:	orr	r0, r0, r1
   236dc:	cmp	r0, #0
   236e0:	bne	236f4 <main@@Base+0x73c>
   236e4:	b	236e8 <main@@Base+0x730>
   236e8:	movw	r0, #0
   236ec:	str	r0, [fp, #-4]
   236f0:	b	23740 <main@@Base+0x788>
   236f4:	ldr	r0, [fp, #-8]
   236f8:	movw	r1, #6
   236fc:	movw	r2, #8
   23700:	movw	r3, #8
   23704:	uxth	r3, r3
   23708:	bl	2c55c <flatcc_builder_table_add@@Base>
   2370c:	str	r0, [sp, #4]
   23710:	movw	r1, #0
   23714:	cmp	r0, r1
   23718:	bne	23728 <main@@Base+0x770>
   2371c:	mvn	r0, #0
   23720:	str	r0, [fp, #-4]
   23724:	b	23740 <main@@Base+0x788>
   23728:	ldr	r0, [sp, #4]
   2372c:	ldr	r2, [sp, #8]
   23730:	ldr	r3, [sp, #12]
   23734:	bl	23d3c <main@@Base+0xd84>
   23738:	movw	r1, #0
   2373c:	str	r1, [fp, #-4]
   23740:	ldr	r0, [fp, #-4]
   23744:	mov	sp, fp
   23748:	pop	{fp, pc}
   2374c:	push	{fp, lr}
   23750:	mov	fp, sp
   23754:	sub	sp, sp, #24
   23758:	str	r0, [fp, #-8]
   2375c:	str	r3, [sp, #12]
   23760:	str	r2, [sp, #8]
   23764:	ldr	r0, [sp, #8]
   23768:	ldr	r1, [sp, #12]
   2376c:	orr	r0, r0, r1
   23770:	cmp	r0, #0
   23774:	bne	23788 <main@@Base+0x7d0>
   23778:	b	2377c <main@@Base+0x7c4>
   2377c:	movw	r0, #0
   23780:	str	r0, [fp, #-4]
   23784:	b	237d4 <main@@Base+0x81c>
   23788:	ldr	r0, [fp, #-8]
   2378c:	movw	r1, #7
   23790:	movw	r2, #8
   23794:	movw	r3, #8
   23798:	uxth	r3, r3
   2379c:	bl	2c55c <flatcc_builder_table_add@@Base>
   237a0:	str	r0, [sp, #4]
   237a4:	movw	r1, #0
   237a8:	cmp	r0, r1
   237ac:	bne	237bc <main@@Base+0x804>
   237b0:	mvn	r0, #0
   237b4:	str	r0, [fp, #-4]
   237b8:	b	237d4 <main@@Base+0x81c>
   237bc:	ldr	r0, [sp, #4]
   237c0:	ldr	r2, [sp, #8]
   237c4:	ldr	r3, [sp, #12]
   237c8:	bl	23d94 <main@@Base+0xddc>
   237cc:	movw	r1, #0
   237d0:	str	r1, [fp, #-4]
   237d4:	ldr	r0, [fp, #-4]
   237d8:	mov	sp, fp
   237dc:	pop	{fp, pc}
   237e0:	push	{fp, lr}
   237e4:	mov	fp, sp
   237e8:	sub	sp, sp, #24
   237ec:	str	r0, [fp, #-8]
   237f0:	vstr	d0, [sp, #8]
   237f4:	vldr	d16, [sp, #8]
   237f8:	vcmp.f64	d16, #0.0
   237fc:	vmrs	APSR_nzcv, fpscr
   23800:	bne	23810 <main@@Base+0x858>
   23804:	movw	r0, #0
   23808:	str	r0, [fp, #-4]
   2380c:	b	23858 <main@@Base+0x8a0>
   23810:	ldr	r0, [fp, #-8]
   23814:	movw	r1, #9
   23818:	movw	r2, #8
   2381c:	movw	r3, #8
   23820:	uxth	r3, r3
   23824:	bl	2c55c <flatcc_builder_table_add@@Base>
   23828:	str	r0, [sp, #4]
   2382c:	movw	r1, #0
   23830:	cmp	r0, r1
   23834:	bne	23844 <main@@Base+0x88c>
   23838:	mvn	r0, #0
   2383c:	str	r0, [fp, #-4]
   23840:	b	23858 <main@@Base+0x8a0>
   23844:	ldr	r0, [sp, #4]
   23848:	vldr	d0, [sp, #8]
   2384c:	bl	23dec <main@@Base+0xe34>
   23850:	movw	r1, #0
   23854:	str	r1, [fp, #-4]
   23858:	ldr	r0, [fp, #-4]
   2385c:	mov	sp, fp
   23860:	pop	{fp, pc}
   23864:	push	{fp, lr}
   23868:	mov	fp, sp
   2386c:	sub	sp, sp, #24
   23870:	str	r0, [fp, #-8]
   23874:	str	r1, [sp, #12]
   23878:	ldr	r0, [sp, #12]
   2387c:	cmp	r0, #0
   23880:	bne	23890 <main@@Base+0x8d8>
   23884:	movw	r0, #0
   23888:	str	r0, [fp, #-4]
   2388c:	b	238dc <main@@Base+0x924>
   23890:	ldr	r0, [fp, #-8]
   23894:	movw	r1, #4
   23898:	str	r1, [sp, #4]
   2389c:	ldr	r2, [sp, #4]
   238a0:	movw	r3, #4
   238a4:	uxth	r3, r3
   238a8:	bl	2c55c <flatcc_builder_table_add@@Base>
   238ac:	str	r0, [sp, #8]
   238b0:	movw	r1, #0
   238b4:	cmp	r0, r1
   238b8:	bne	238c8 <main@@Base+0x910>
   238bc:	mvn	r0, #0
   238c0:	str	r0, [fp, #-4]
   238c4:	b	238dc <main@@Base+0x924>
   238c8:	ldr	r0, [sp, #8]
   238cc:	ldr	r1, [sp, #12]
   238d0:	bl	23e38 <main@@Base+0xe80>
   238d4:	movw	r1, #0
   238d8:	str	r1, [fp, #-4]
   238dc:	ldr	r0, [fp, #-4]
   238e0:	mov	sp, fp
   238e4:	pop	{fp, pc}
   238e8:	push	{fp, lr}
   238ec:	mov	fp, sp
   238f0:	sub	sp, sp, #16
   238f4:	str	r0, [sp, #8]
   238f8:	str	r1, [sp, #4]
   238fc:	ldr	r0, [sp, #4]
   23900:	cmp	r0, #0
   23904:	bne	23914 <main@@Base+0x95c>
   23908:	movw	r0, #0
   2390c:	str	r0, [fp, #-4]
   23910:	b	2395c <main@@Base+0x9a4>
   23914:	ldr	r0, [sp, #8]
   23918:	movw	r1, #5
   2391c:	movw	r2, #4
   23920:	movw	r3, #4
   23924:	uxth	r3, r3
   23928:	bl	2c55c <flatcc_builder_table_add@@Base>
   2392c:	str	r0, [sp]
   23930:	movw	r1, #0
   23934:	cmp	r0, r1
   23938:	bne	23948 <main@@Base+0x990>
   2393c:	mvn	r0, #0
   23940:	str	r0, [fp, #-4]
   23944:	b	2395c <main@@Base+0x9a4>
   23948:	ldr	r0, [sp]
   2394c:	ldr	r1, [sp, #4]
   23950:	bl	23e7c <main@@Base+0xec4>
   23954:	movw	r1, #0
   23958:	str	r1, [fp, #-4]
   2395c:	ldr	r0, [fp, #-4]
   23960:	mov	sp, fp
   23964:	pop	{fp, pc}
   23968:	push	{fp, lr}
   2396c:	mov	fp, sp
   23970:	sub	sp, sp, #16
   23974:	str	r0, [sp, #8]
   23978:	vstr	s0, [sp, #4]
   2397c:	vldr	s0, [sp, #4]
   23980:	vcmp.f32	s0, #0.0
   23984:	vmrs	APSR_nzcv, fpscr
   23988:	bne	23998 <main@@Base+0x9e0>
   2398c:	movw	r0, #0
   23990:	str	r0, [fp, #-4]
   23994:	b	239e0 <main@@Base+0xa28>
   23998:	ldr	r0, [sp, #8]
   2399c:	movw	r1, #8
   239a0:	movw	r2, #4
   239a4:	movw	r3, #4
   239a8:	uxth	r3, r3
   239ac:	bl	2c55c <flatcc_builder_table_add@@Base>
   239b0:	str	r0, [sp]
   239b4:	movw	r1, #0
   239b8:	cmp	r0, r1
   239bc:	bne	239cc <main@@Base+0xa14>
   239c0:	mvn	r0, #0
   239c4:	str	r0, [fp, #-4]
   239c8:	b	239e0 <main@@Base+0xa28>
   239cc:	ldr	r0, [sp]
   239d0:	vldr	s0, [sp, #4]
   239d4:	bl	23ec0 <main@@Base+0xf08>
   239d8:	movw	r1, #0
   239dc:	str	r1, [fp, #-4]
   239e0:	ldr	r0, [fp, #-4]
   239e4:	mov	sp, fp
   239e8:	pop	{fp, pc}
   239ec:	push	{fp, lr}
   239f0:	mov	fp, sp
   239f4:	sub	sp, sp, #16
   239f8:	str	r0, [fp, #-4]
   239fc:	str	r1, [sp, #8]
   23a00:	ldr	r0, [sp, #8]
   23a04:	cmp	r0, #0
   23a08:	beq	23a40 <main@@Base+0xa88>
   23a0c:	ldr	r0, [fp, #-4]
   23a10:	movw	r1, #10
   23a14:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   23a18:	str	r0, [sp, #4]
   23a1c:	movw	r1, #0
   23a20:	cmp	r0, r1
   23a24:	beq	23a40 <main@@Base+0xa88>
   23a28:	ldr	r0, [sp, #8]
   23a2c:	ldr	r1, [sp, #4]
   23a30:	str	r0, [r1]
   23a34:	movw	r0, #0
   23a38:	str	r0, [sp]
   23a3c:	b	23a4c <main@@Base+0xa94>
   23a40:	mvn	r0, #0
   23a44:	str	r0, [sp]
   23a48:	b	23a4c <main@@Base+0xa94>
   23a4c:	ldr	r0, [sp]
   23a50:	mov	sp, fp
   23a54:	pop	{fp, pc}
   23a58:	push	{fp, lr}
   23a5c:	mov	fp, sp
   23a60:	sub	sp, sp, #16
   23a64:	str	r0, [fp, #-4]
   23a68:	str	r1, [sp, #8]
   23a6c:	ldr	r0, [sp, #8]
   23a70:	cmp	r0, #0
   23a74:	beq	23aac <main@@Base+0xaf4>
   23a78:	ldr	r0, [fp, #-4]
   23a7c:	movw	r1, #11
   23a80:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   23a84:	str	r0, [sp, #4]
   23a88:	movw	r1, #0
   23a8c:	cmp	r0, r1
   23a90:	beq	23aac <main@@Base+0xaf4>
   23a94:	ldr	r0, [sp, #8]
   23a98:	ldr	r1, [sp, #4]
   23a9c:	str	r0, [r1]
   23aa0:	movw	r0, #0
   23aa4:	str	r0, [sp]
   23aa8:	b	23ab8 <main@@Base+0xb00>
   23aac:	mvn	r0, #0
   23ab0:	str	r0, [sp]
   23ab4:	b	23ab8 <main@@Base+0xb00>
   23ab8:	ldr	r0, [sp]
   23abc:	mov	sp, fp
   23ac0:	pop	{fp, pc}
   23ac4:	push	{fp, lr}
   23ac8:	mov	fp, sp
   23acc:	sub	sp, sp, #24
   23ad0:	str	r0, [fp, #-8]
   23ad4:	strh	r1, [fp, #-10]
   23ad8:	ldrsh	r0, [fp, #-10]
   23adc:	cmp	r0, #0
   23ae0:	bne	23af0 <main@@Base+0xb38>
   23ae4:	movw	r0, #0
   23ae8:	str	r0, [fp, #-4]
   23aec:	b	23b3c <main@@Base+0xb84>
   23af0:	ldr	r0, [fp, #-8]
   23af4:	movw	r1, #2
   23af8:	str	r1, [sp, #4]
   23afc:	ldr	r2, [sp, #4]
   23b00:	movw	r3, #2
   23b04:	uxth	r3, r3
   23b08:	bl	2c55c <flatcc_builder_table_add@@Base>
   23b0c:	str	r0, [sp, #8]
   23b10:	movw	r1, #0
   23b14:	cmp	r0, r1
   23b18:	bne	23b28 <main@@Base+0xb70>
   23b1c:	mvn	r0, #0
   23b20:	str	r0, [fp, #-4]
   23b24:	b	23b3c <main@@Base+0xb84>
   23b28:	ldr	r0, [sp, #8]
   23b2c:	ldrsh	r1, [fp, #-10]
   23b30:	bl	23f14 <main@@Base+0xf5c>
   23b34:	movw	r1, #0
   23b38:	str	r1, [fp, #-4]
   23b3c:	ldr	r0, [fp, #-4]
   23b40:	mov	sp, fp
   23b44:	pop	{fp, pc}
   23b48:	push	{fp, lr}
   23b4c:	mov	fp, sp
   23b50:	sub	sp, sp, #16
   23b54:	str	r0, [sp, #8]
   23b58:	strh	r1, [sp, #6]
   23b5c:	ldrh	r0, [sp, #6]
   23b60:	cmp	r0, #0
   23b64:	bne	23b74 <main@@Base+0xbbc>
   23b68:	movw	r0, #0
   23b6c:	str	r0, [fp, #-4]
   23b70:	b	23bbc <main@@Base+0xc04>
   23b74:	ldr	r0, [sp, #8]
   23b78:	movw	r1, #3
   23b7c:	movw	r2, #2
   23b80:	movw	r3, #2
   23b84:	uxth	r3, r3
   23b88:	bl	2c55c <flatcc_builder_table_add@@Base>
   23b8c:	str	r0, [sp]
   23b90:	movw	r1, #0
   23b94:	cmp	r0, r1
   23b98:	bne	23ba8 <main@@Base+0xbf0>
   23b9c:	mvn	r0, #0
   23ba0:	str	r0, [fp, #-4]
   23ba4:	b	23bbc <main@@Base+0xc04>
   23ba8:	ldr	r0, [sp]
   23bac:	ldrh	r1, [sp, #6]
   23bb0:	bl	23f58 <main@@Base+0xfa0>
   23bb4:	movw	r1, #0
   23bb8:	str	r1, [fp, #-4]
   23bbc:	ldr	r0, [fp, #-4]
   23bc0:	mov	sp, fp
   23bc4:	pop	{fp, pc}
   23bc8:	push	{fp, lr}
   23bcc:	mov	fp, sp
   23bd0:	sub	sp, sp, #16
   23bd4:	str	r0, [sp, #8]
   23bd8:	strb	r1, [sp, #7]
   23bdc:	ldrsb	r0, [sp, #7]
   23be0:	cmp	r0, #0
   23be4:	bne	23bf4 <main@@Base+0xc3c>
   23be8:	movw	r0, #0
   23bec:	str	r0, [fp, #-4]
   23bf0:	b	23c3c <main@@Base+0xc84>
   23bf4:	ldr	r0, [sp, #8]
   23bf8:	movw	r1, #0
   23bfc:	movw	r2, #1
   23c00:	movw	r3, #1
   23c04:	uxth	r3, r3
   23c08:	bl	2c55c <flatcc_builder_table_add@@Base>
   23c0c:	str	r0, [sp]
   23c10:	movw	r1, #0
   23c14:	cmp	r0, r1
   23c18:	bne	23c28 <main@@Base+0xc70>
   23c1c:	mvn	r0, #0
   23c20:	str	r0, [fp, #-4]
   23c24:	b	23c3c <main@@Base+0xc84>
   23c28:	ldr	r0, [sp]
   23c2c:	ldrsb	r1, [sp, #7]
   23c30:	bl	23f9c <main@@Base+0xfe4>
   23c34:	movw	r1, #0
   23c38:	str	r1, [fp, #-4]
   23c3c:	ldr	r0, [fp, #-4]
   23c40:	mov	sp, fp
   23c44:	pop	{fp, pc}
   23c48:	push	{fp, lr}
   23c4c:	mov	fp, sp
   23c50:	sub	sp, sp, #24
   23c54:	str	r0, [fp, #-8]
   23c58:	strb	r1, [fp, #-9]
   23c5c:	ldrb	r0, [fp, #-9]
   23c60:	cmp	r0, #0
   23c64:	bne	23c74 <main@@Base+0xcbc>
   23c68:	movw	r0, #0
   23c6c:	str	r0, [fp, #-4]
   23c70:	b	23cc0 <main@@Base+0xd08>
   23c74:	ldr	r0, [fp, #-8]
   23c78:	movw	r1, #1
   23c7c:	str	r1, [sp, #4]
   23c80:	ldr	r2, [sp, #4]
   23c84:	movw	r3, #1
   23c88:	uxth	r3, r3
   23c8c:	bl	2c55c <flatcc_builder_table_add@@Base>
   23c90:	str	r0, [sp, #8]
   23c94:	movw	r1, #0
   23c98:	cmp	r0, r1
   23c9c:	bne	23cac <main@@Base+0xcf4>
   23ca0:	mvn	r0, #0
   23ca4:	str	r0, [fp, #-4]
   23ca8:	b	23cc0 <main@@Base+0xd08>
   23cac:	ldr	r0, [sp, #8]
   23cb0:	ldrb	r1, [fp, #-9]
   23cb4:	bl	23fe0 <main@@Base+0x1028>
   23cb8:	movw	r1, #0
   23cbc:	str	r1, [fp, #-4]
   23cc0:	ldr	r0, [fp, #-4]
   23cc4:	mov	sp, fp
   23cc8:	pop	{fp, pc}
   23ccc:	push	{fp, lr}
   23cd0:	mov	fp, sp
   23cd4:	sub	sp, sp, #8
   23cd8:	ldr	r1, [pc, #76]	; 23d2c <main@@Base+0xd74>
   23cdc:	add	r1, pc, r1
   23ce0:	str	r0, [sp, #4]
   23ce4:	ldr	r0, [sp, #4]
   23ce8:	movw	r2, #0
   23cec:	bl	2b830 <flatcc_builder_check_required@@Base>
   23cf0:	cmp	r0, #0
   23cf4:	beq	23cfc <main@@Base+0xd44>
   23cf8:	b	23d1c <main@@Base+0xd64>
   23cfc:	ldr	r0, [pc, #44]	; 23d30 <main@@Base+0xd78>
   23d00:	add	r0, pc, r0
   23d04:	ldr	r1, [pc, #40]	; 23d34 <main@@Base+0xd7c>
   23d08:	add	r1, pc, r1
   23d0c:	ldr	r2, [pc, #36]	; 23d38 <main@@Base+0xd80>
   23d10:	add	r3, pc, r2
   23d14:	movw	r2, #237	; 0xed
   23d18:	bl	12e68 <__assert_fail@plt>
   23d1c:	ldr	r0, [sp, #4]
   23d20:	bl	2b920 <flatcc_builder_end_table@@Base>
   23d24:	mov	sp, fp
   23d28:	pop	{fp, pc}
   23d2c:	muleq	r1, lr, r4
   23d30:			; <UNDEFINED> instruction: 0x000104b9
   23d34:	andeq	r0, r1, pc, asr r5
   23d38:	ldrdeq	r0, [r1], -r1
   23d3c:	push	{fp, lr}
   23d40:	mov	fp, sp
   23d44:	sub	sp, sp, #16
   23d48:	str	r0, [fp, #-4]
   23d4c:	str	r3, [sp, #4]
   23d50:	str	r2, [sp]
   23d54:	ldr	r0, [sp]
   23d58:	ldr	r1, [sp, #4]
   23d5c:	bl	23d78 <main@@Base+0xdc0>
   23d60:	ldr	r2, [fp, #-4]
   23d64:	str	r1, [r2, #4]
   23d68:	str	r0, [r2]
   23d6c:	ldr	r0, [fp, #-4]
   23d70:	mov	sp, fp
   23d74:	pop	{fp, pc}
   23d78:	sub	sp, sp, #8
   23d7c:	str	r0, [sp]
   23d80:	str	r1, [sp, #4]
   23d84:	ldr	r0, [sp]
   23d88:	ldr	r1, [sp, #4]
   23d8c:	add	sp, sp, #8
   23d90:	bx	lr
   23d94:	push	{fp, lr}
   23d98:	mov	fp, sp
   23d9c:	sub	sp, sp, #16
   23da0:	str	r0, [fp, #-4]
   23da4:	str	r3, [sp, #4]
   23da8:	str	r2, [sp]
   23dac:	ldr	r0, [sp]
   23db0:	ldr	r1, [sp, #4]
   23db4:	bl	23dd0 <main@@Base+0xe18>
   23db8:	ldr	r2, [fp, #-4]
   23dbc:	str	r1, [r2, #4]
   23dc0:	str	r0, [r2]
   23dc4:	ldr	r0, [fp, #-4]
   23dc8:	mov	sp, fp
   23dcc:	pop	{fp, pc}
   23dd0:	sub	sp, sp, #8
   23dd4:	str	r0, [sp]
   23dd8:	str	r1, [sp, #4]
   23ddc:	ldr	r0, [sp]
   23de0:	ldr	r1, [sp, #4]
   23de4:	add	sp, sp, #8
   23de8:	bx	lr
   23dec:	push	{fp, lr}
   23df0:	mov	fp, sp
   23df4:	sub	sp, sp, #16
   23df8:	str	r0, [fp, #-4]
   23dfc:	vstr	d0, [sp]
   23e00:	vldr	d0, [sp]
   23e04:	bl	23e1c <main@@Base+0xe64>
   23e08:	ldr	r0, [fp, #-4]
   23e0c:	vstr	d0, [r0]
   23e10:	ldr	r0, [fp, #-4]
   23e14:	mov	sp, fp
   23e18:	pop	{fp, pc}
   23e1c:	sub	sp, sp, #16
   23e20:	vstr	d0, [sp, #8]
   23e24:	vldr	d16, [sp, #8]
   23e28:	vstr	d16, [sp]
   23e2c:	vldr	d0, [sp]
   23e30:	add	sp, sp, #16
   23e34:	bx	lr
   23e38:	push	{fp, lr}
   23e3c:	mov	fp, sp
   23e40:	sub	sp, sp, #8
   23e44:	str	r0, [sp, #4]
   23e48:	str	r1, [sp]
   23e4c:	ldr	r0, [sp]
   23e50:	bl	23e68 <main@@Base+0xeb0>
   23e54:	ldr	r1, [sp, #4]
   23e58:	str	r0, [r1]
   23e5c:	ldr	r0, [sp, #4]
   23e60:	mov	sp, fp
   23e64:	pop	{fp, pc}
   23e68:	sub	sp, sp, #4
   23e6c:	str	r0, [sp]
   23e70:	ldr	r0, [sp]
   23e74:	add	sp, sp, #4
   23e78:	bx	lr
   23e7c:	push	{fp, lr}
   23e80:	mov	fp, sp
   23e84:	sub	sp, sp, #8
   23e88:	str	r0, [sp, #4]
   23e8c:	str	r1, [sp]
   23e90:	ldr	r0, [sp]
   23e94:	bl	23eac <main@@Base+0xef4>
   23e98:	ldr	r1, [sp, #4]
   23e9c:	str	r0, [r1]
   23ea0:	ldr	r0, [sp, #4]
   23ea4:	mov	sp, fp
   23ea8:	pop	{fp, pc}
   23eac:	sub	sp, sp, #4
   23eb0:	str	r0, [sp]
   23eb4:	ldr	r0, [sp]
   23eb8:	add	sp, sp, #4
   23ebc:	bx	lr
   23ec0:	push	{fp, lr}
   23ec4:	mov	fp, sp
   23ec8:	sub	sp, sp, #8
   23ecc:	str	r0, [sp, #4]
   23ed0:	vstr	s0, [sp]
   23ed4:	vldr	s0, [sp]
   23ed8:	bl	23ef0 <main@@Base+0xf38>
   23edc:	ldr	r0, [sp, #4]
   23ee0:	vstr	s0, [r0]
   23ee4:	ldr	r0, [sp, #4]
   23ee8:	mov	sp, fp
   23eec:	pop	{fp, pc}
   23ef0:	sub	sp, sp, #8
   23ef4:	vstr	s0, [sp, #4]
   23ef8:	vldr	s0, [sp, #4]
   23efc:	vstr	s0, [sp]
   23f00:	ldr	r0, [sp]
   23f04:	str	r0, [sp]
   23f08:	vldr	s0, [sp]
   23f0c:	add	sp, sp, #8
   23f10:	bx	lr
   23f14:	push	{fp, lr}
   23f18:	mov	fp, sp
   23f1c:	sub	sp, sp, #8
   23f20:	str	r0, [sp, #4]
   23f24:	strh	r1, [sp, #2]
   23f28:	ldrsh	r0, [sp, #2]
   23f2c:	bl	23f44 <main@@Base+0xf8c>
   23f30:	ldr	r1, [sp, #4]
   23f34:	strh	r0, [r1]
   23f38:	ldr	r0, [sp, #4]
   23f3c:	mov	sp, fp
   23f40:	pop	{fp, pc}
   23f44:	sub	sp, sp, #4
   23f48:	strh	r0, [sp, #2]
   23f4c:	ldrsh	r0, [sp, #2]
   23f50:	add	sp, sp, #4
   23f54:	bx	lr
   23f58:	push	{fp, lr}
   23f5c:	mov	fp, sp
   23f60:	sub	sp, sp, #8
   23f64:	str	r0, [sp, #4]
   23f68:	strh	r1, [sp, #2]
   23f6c:	ldrh	r0, [sp, #2]
   23f70:	bl	23f88 <main@@Base+0xfd0>
   23f74:	ldr	r1, [sp, #4]
   23f78:	strh	r0, [r1]
   23f7c:	ldr	r0, [sp, #4]
   23f80:	mov	sp, fp
   23f84:	pop	{fp, pc}
   23f88:	sub	sp, sp, #4
   23f8c:	strh	r0, [sp, #2]
   23f90:	ldrh	r0, [sp, #2]
   23f94:	add	sp, sp, #4
   23f98:	bx	lr
   23f9c:	push	{fp, lr}
   23fa0:	mov	fp, sp
   23fa4:	sub	sp, sp, #8
   23fa8:	str	r0, [sp, #4]
   23fac:	strb	r1, [sp, #3]
   23fb0:	ldrsb	r0, [sp, #3]
   23fb4:	bl	23fcc <main@@Base+0x1014>
   23fb8:	ldr	r1, [sp, #4]
   23fbc:	strb	r0, [r1]
   23fc0:	ldr	r0, [sp, #4]
   23fc4:	mov	sp, fp
   23fc8:	pop	{fp, pc}
   23fcc:	sub	sp, sp, #4
   23fd0:	strb	r0, [sp, #3]
   23fd4:	ldrsb	r0, [sp, #3]
   23fd8:	add	sp, sp, #4
   23fdc:	bx	lr
   23fe0:	push	{fp, lr}
   23fe4:	mov	fp, sp
   23fe8:	sub	sp, sp, #8
   23fec:	str	r0, [sp, #4]
   23ff0:	strb	r1, [sp, #3]
   23ff4:	ldrb	r0, [sp, #3]
   23ff8:	bl	24010 <main@@Base+0x1058>
   23ffc:	ldr	r1, [sp, #4]
   24000:	strb	r0, [r1]
   24004:	ldr	r0, [sp, #4]
   24008:	mov	sp, fp
   2400c:	pop	{fp, pc}
   24010:	sub	sp, sp, #4
   24014:	strb	r0, [sp, #3]
   24018:	ldrb	r0, [sp, #3]
   2401c:	add	sp, sp, #4
   24020:	bx	lr
   24024:	push	{fp, lr}
   24028:	mov	fp, sp
   2402c:	sub	sp, sp, #40	; 0x28
   24030:	str	r0, [fp, #-8]
   24034:	ldr	r0, [fp, #-8]
   24038:	movw	r1, #0
   2403c:	uxth	r1, r1
   24040:	movw	r2, #1
   24044:	movw	r3, #1
   24048:	uxth	r3, r3
   2404c:	bl	2ef70 <flatcc_verify_field@@Base>
   24050:	str	r0, [fp, #-12]
   24054:	cmp	r0, #0
   24058:	beq	24068 <main@@Base+0x10b0>
   2405c:	ldr	r0, [fp, #-12]
   24060:	str	r0, [fp, #-4]
   24064:	b	242f0 <main@@Base+0x1338>
   24068:	ldr	r0, [fp, #-8]
   2406c:	movw	r1, #1
   24070:	uxth	r2, r1
   24074:	str	r1, [fp, #-16]
   24078:	mov	r1, r2
   2407c:	movw	r2, #1
   24080:	ldr	r3, [fp, #-16]
   24084:	uxth	r3, r3
   24088:	bl	2ef70 <flatcc_verify_field@@Base>
   2408c:	str	r0, [fp, #-12]
   24090:	cmp	r0, #0
   24094:	beq	240a4 <main@@Base+0x10ec>
   24098:	ldr	r0, [fp, #-12]
   2409c:	str	r0, [fp, #-4]
   240a0:	b	242f0 <main@@Base+0x1338>
   240a4:	ldr	r0, [fp, #-8]
   240a8:	movw	r1, #2
   240ac:	uxth	r2, r1
   240b0:	str	r1, [sp, #20]
   240b4:	mov	r1, r2
   240b8:	movw	r2, #2
   240bc:	ldr	r3, [sp, #20]
   240c0:	uxth	r3, r3
   240c4:	bl	2ef70 <flatcc_verify_field@@Base>
   240c8:	str	r0, [fp, #-12]
   240cc:	cmp	r0, #0
   240d0:	beq	240e0 <main@@Base+0x1128>
   240d4:	ldr	r0, [fp, #-12]
   240d8:	str	r0, [fp, #-4]
   240dc:	b	242f0 <main@@Base+0x1338>
   240e0:	ldr	r0, [fp, #-8]
   240e4:	movw	r1, #3
   240e8:	uxth	r1, r1
   240ec:	movw	r2, #2
   240f0:	movw	r3, #2
   240f4:	uxth	r3, r3
   240f8:	bl	2ef70 <flatcc_verify_field@@Base>
   240fc:	str	r0, [fp, #-12]
   24100:	cmp	r0, #0
   24104:	beq	24114 <main@@Base+0x115c>
   24108:	ldr	r0, [fp, #-12]
   2410c:	str	r0, [fp, #-4]
   24110:	b	242f0 <main@@Base+0x1338>
   24114:	ldr	r0, [fp, #-8]
   24118:	movw	r1, #4
   2411c:	uxth	r2, r1
   24120:	str	r1, [sp, #16]
   24124:	mov	r1, r2
   24128:	movw	r2, #4
   2412c:	ldr	r3, [sp, #16]
   24130:	uxth	r3, r3
   24134:	bl	2ef70 <flatcc_verify_field@@Base>
   24138:	str	r0, [fp, #-12]
   2413c:	cmp	r0, #0
   24140:	beq	24150 <main@@Base+0x1198>
   24144:	ldr	r0, [fp, #-12]
   24148:	str	r0, [fp, #-4]
   2414c:	b	242f0 <main@@Base+0x1338>
   24150:	ldr	r0, [fp, #-8]
   24154:	movw	r1, #5
   24158:	uxth	r1, r1
   2415c:	movw	r2, #4
   24160:	movw	r3, #4
   24164:	uxth	r3, r3
   24168:	bl	2ef70 <flatcc_verify_field@@Base>
   2416c:	str	r0, [fp, #-12]
   24170:	cmp	r0, #0
   24174:	beq	24184 <main@@Base+0x11cc>
   24178:	ldr	r0, [fp, #-12]
   2417c:	str	r0, [fp, #-4]
   24180:	b	242f0 <main@@Base+0x1338>
   24184:	ldr	r0, [fp, #-8]
   24188:	movw	r1, #6
   2418c:	uxth	r1, r1
   24190:	movw	r2, #8
   24194:	movw	r3, #8
   24198:	uxth	r3, r3
   2419c:	bl	2ef70 <flatcc_verify_field@@Base>
   241a0:	str	r0, [fp, #-12]
   241a4:	cmp	r0, #0
   241a8:	beq	241b8 <main@@Base+0x1200>
   241ac:	ldr	r0, [fp, #-12]
   241b0:	str	r0, [fp, #-4]
   241b4:	b	242f0 <main@@Base+0x1338>
   241b8:	ldr	r0, [fp, #-8]
   241bc:	movw	r1, #7
   241c0:	uxth	r1, r1
   241c4:	movw	r2, #8
   241c8:	movw	r3, #8
   241cc:	uxth	r3, r3
   241d0:	bl	2ef70 <flatcc_verify_field@@Base>
   241d4:	str	r0, [fp, #-12]
   241d8:	cmp	r0, #0
   241dc:	beq	241ec <main@@Base+0x1234>
   241e0:	ldr	r0, [fp, #-12]
   241e4:	str	r0, [fp, #-4]
   241e8:	b	242f0 <main@@Base+0x1338>
   241ec:	ldr	r0, [fp, #-8]
   241f0:	movw	r1, #8
   241f4:	uxth	r1, r1
   241f8:	movw	r2, #4
   241fc:	movw	r3, #4
   24200:	uxth	r3, r3
   24204:	bl	2ef70 <flatcc_verify_field@@Base>
   24208:	str	r0, [fp, #-12]
   2420c:	cmp	r0, #0
   24210:	beq	24220 <main@@Base+0x1268>
   24214:	ldr	r0, [fp, #-12]
   24218:	str	r0, [fp, #-4]
   2421c:	b	242f0 <main@@Base+0x1338>
   24220:	ldr	r0, [fp, #-8]
   24224:	movw	r1, #9
   24228:	uxth	r1, r1
   2422c:	movw	r2, #8
   24230:	movw	r3, #8
   24234:	uxth	r3, r3
   24238:	bl	2ef70 <flatcc_verify_field@@Base>
   2423c:	str	r0, [fp, #-12]
   24240:	cmp	r0, #0
   24244:	beq	24254 <main@@Base+0x129c>
   24248:	ldr	r0, [fp, #-12]
   2424c:	str	r0, [fp, #-4]
   24250:	b	242f0 <main@@Base+0x1338>
   24254:	ldr	r0, [fp, #-8]
   24258:	movw	r1, #10
   2425c:	uxth	r1, r1
   24260:	movw	r2, #0
   24264:	movw	r3, #1
   24268:	movw	ip, #1
   2426c:	uxth	ip, ip
   24270:	str	ip, [sp]
   24274:	mvn	ip, #0
   24278:	str	ip, [sp, #4]
   2427c:	bl	2f4d8 <flatcc_verify_vector_field@@Base>
   24280:	str	r0, [fp, #-12]
   24284:	cmp	r0, #0
   24288:	beq	24298 <main@@Base+0x12e0>
   2428c:	ldr	r0, [fp, #-12]
   24290:	str	r0, [fp, #-4]
   24294:	b	242f0 <main@@Base+0x1338>
   24298:	ldr	r0, [pc, #92]	; 242fc <main@@Base+0x1344>
   2429c:	ldr	r1, [fp, #-8]
   242a0:	str	r0, [sp, #12]
   242a4:	mov	r0, r1
   242a8:	movw	r1, #11
   242ac:	uxth	r1, r1
   242b0:	movw	r2, #0
   242b4:	movw	r3, #8
   242b8:	movw	ip, #8
   242bc:	uxth	ip, ip
   242c0:	str	ip, [sp]
   242c4:	ldr	ip, [sp, #12]
   242c8:	str	ip, [sp, #4]
   242cc:	bl	2f4d8 <flatcc_verify_vector_field@@Base>
   242d0:	str	r0, [fp, #-12]
   242d4:	cmp	r0, #0
   242d8:	beq	242e8 <main@@Base+0x1330>
   242dc:	ldr	r0, [fp, #-12]
   242e0:	str	r0, [fp, #-4]
   242e4:	b	242f0 <main@@Base+0x1338>
   242e8:	movw	r0, #0
   242ec:	str	r0, [fp, #-4]
   242f0:	ldr	r0, [fp, #-4]
   242f4:	mov	sp, fp
   242f8:	pop	{fp, pc}
   242fc:	svcne	0x00ffffff
   24300:	push	{fp, lr}
   24304:	mov	fp, sp
   24308:	sub	sp, sp, #8
   2430c:	str	r0, [sp, #4]
   24310:	ldr	r0, [sp, #4]
   24314:	ldrsb	r0, [r0]
   24318:	bl	24328 <main@@Base+0x1370>
   2431c:	sxtb	r0, r0
   24320:	mov	sp, fp
   24324:	pop	{fp, pc}
   24328:	sub	sp, sp, #4
   2432c:	strb	r0, [sp, #3]
   24330:	ldrsb	r0, [sp, #3]
   24334:	add	sp, sp, #4
   24338:	bx	lr
   2433c:	push	{fp, lr}
   24340:	mov	fp, sp
   24344:	sub	sp, sp, #8
   24348:	str	r0, [sp, #4]
   2434c:	ldr	r0, [sp, #4]
   24350:	ldr	r0, [r0]
   24354:	bl	24360 <main@@Base+0x13a8>
   24358:	mov	sp, fp
   2435c:	pop	{fp, pc}
   24360:	sub	sp, sp, #4
   24364:	str	r0, [sp]
   24368:	ldr	r0, [sp]
   2436c:	add	sp, sp, #4
   24370:	bx	lr
   24374:	push	{fp, lr}
   24378:	mov	fp, sp
   2437c:	sub	sp, sp, #8
   24380:	str	r0, [sp, #4]
   24384:	ldr	r0, [sp, #4]
   24388:	ldr	r1, [r0]
   2438c:	ldr	r0, [r0, #4]
   24390:	str	r0, [sp]
   24394:	mov	r0, r1
   24398:	ldr	r1, [sp]
   2439c:	bl	243a8 <main@@Base+0x13f0>
   243a0:	mov	sp, fp
   243a4:	pop	{fp, pc}
   243a8:	sub	sp, sp, #8
   243ac:	str	r0, [sp]
   243b0:	str	r1, [sp, #4]
   243b4:	ldr	r0, [sp]
   243b8:	ldr	r1, [sp, #4]
   243bc:	add	sp, sp, #8
   243c0:	bx	lr
   243c4:	push	{fp, lr}
   243c8:	mov	fp, sp
   243cc:	sub	sp, sp, #8
   243d0:	str	r0, [sp, #4]
   243d4:	ldr	r0, [sp, #4]
   243d8:	ldrb	r0, [r0]
   243dc:	bl	243ec <main@@Base+0x1434>
   243e0:	and	r0, r0, #255	; 0xff
   243e4:	mov	sp, fp
   243e8:	pop	{fp, pc}
   243ec:	sub	sp, sp, #4
   243f0:	strb	r0, [sp, #3]
   243f4:	ldrb	r0, [sp, #3]
   243f8:	add	sp, sp, #4
   243fc:	bx	lr
   24400:	push	{fp, lr}
   24404:	mov	fp, sp
   24408:	sub	sp, sp, #8
   2440c:	str	r0, [sp, #4]
   24410:	ldr	r0, [sp, #4]
   24414:	ldrh	r0, [r0]
   24418:	bl	24428 <main@@Base+0x1470>
   2441c:	uxth	r0, r0
   24420:	mov	sp, fp
   24424:	pop	{fp, pc}
   24428:	sub	sp, sp, #4
   2442c:	strh	r0, [sp, #2]
   24430:	ldrh	r0, [sp, #2]
   24434:	add	sp, sp, #4
   24438:	bx	lr
   2443c:	push	{fp, lr}
   24440:	mov	fp, sp
   24444:	sub	sp, sp, #8
   24448:	str	r0, [sp, #4]
   2444c:	ldr	r0, [sp, #4]
   24450:	ldr	r0, [r0]
   24454:	bl	24460 <main@@Base+0x14a8>
   24458:	mov	sp, fp
   2445c:	pop	{fp, pc}
   24460:	sub	sp, sp, #4
   24464:	str	r0, [sp]
   24468:	ldr	r0, [sp]
   2446c:	add	sp, sp, #4
   24470:	bx	lr
   24474:	push	{fp, lr}
   24478:	mov	fp, sp
   2447c:	sub	sp, sp, #8
   24480:	str	r0, [sp, #4]
   24484:	ldr	r0, [sp, #4]
   24488:	ldr	r1, [r0]
   2448c:	ldr	r0, [r0, #4]
   24490:	str	r0, [sp]
   24494:	mov	r0, r1
   24498:	ldr	r1, [sp]
   2449c:	bl	244a8 <main@@Base+0x14f0>
   244a0:	mov	sp, fp
   244a4:	pop	{fp, pc}
   244a8:	sub	sp, sp, #8
   244ac:	str	r0, [sp]
   244b0:	str	r1, [sp, #4]
   244b4:	ldr	r0, [sp]
   244b8:	ldr	r1, [sp, #4]
   244bc:	add	sp, sp, #8
   244c0:	bx	lr
   244c4:	push	{fp, lr}
   244c8:	mov	fp, sp
   244cc:	sub	sp, sp, #8
   244d0:	str	r0, [sp, #4]
   244d4:	ldr	r0, [sp, #4]
   244d8:	vldr	s0, [r0]
   244dc:	bl	244e8 <main@@Base+0x1530>
   244e0:	mov	sp, fp
   244e4:	pop	{fp, pc}
   244e8:	sub	sp, sp, #8
   244ec:	vstr	s0, [sp, #4]
   244f0:	vldr	s0, [sp, #4]
   244f4:	vstr	s0, [sp]
   244f8:	ldr	r0, [sp]
   244fc:	str	r0, [sp]
   24500:	vldr	s0, [sp]
   24504:	add	sp, sp, #8
   24508:	bx	lr
   2450c:	push	{fp, lr}
   24510:	mov	fp, sp
   24514:	sub	sp, sp, #8
   24518:	str	r0, [sp, #4]
   2451c:	ldr	r0, [sp, #4]
   24520:	vldr	d0, [r0]
   24524:	bl	24530 <main@@Base+0x1578>
   24528:	mov	sp, fp
   2452c:	pop	{fp, pc}
   24530:	sub	sp, sp, #16
   24534:	vstr	d0, [sp, #8]
   24538:	vldr	d16, [sp, #8]
   2453c:	vstr	d16, [sp]
   24540:	vldr	d0, [sp]
   24544:	add	sp, sp, #16
   24548:	bx	lr
   2454c:	push	{fp, lr}
   24550:	mov	fp, sp
   24554:	sub	sp, sp, #56	; 0x38
   24558:	str	r0, [fp, #-8]
   2455c:	ldr	r0, [fp, #-8]
   24560:	movw	r1, #0
   24564:	uxth	r1, r1
   24568:	movw	r2, #32
   2456c:	movw	r3, #16
   24570:	uxth	r3, r3
   24574:	bl	2ef70 <flatcc_verify_field@@Base>
   24578:	str	r0, [fp, #-12]
   2457c:	cmp	r0, #0
   24580:	beq	24590 <main@@Base+0x15d8>
   24584:	ldr	r0, [fp, #-12]
   24588:	str	r0, [fp, #-4]
   2458c:	b	24d1c <main@@Base+0x1d64>
   24590:	ldr	r0, [fp, #-8]
   24594:	movw	r1, #2
   24598:	uxth	r2, r1
   2459c:	str	r1, [fp, #-16]
   245a0:	mov	r1, r2
   245a4:	movw	r2, #2
   245a8:	ldr	r3, [fp, #-16]
   245ac:	uxth	r3, r3
   245b0:	bl	2ef70 <flatcc_verify_field@@Base>
   245b4:	str	r0, [fp, #-12]
   245b8:	cmp	r0, #0
   245bc:	beq	245cc <main@@Base+0x1614>
   245c0:	ldr	r0, [fp, #-12]
   245c4:	str	r0, [fp, #-4]
   245c8:	b	24d1c <main@@Base+0x1d64>
   245cc:	ldr	r0, [fp, #-8]
   245d0:	movw	r1, #1
   245d4:	uxth	r1, r1
   245d8:	movw	r2, #2
   245dc:	movw	r3, #2
   245e0:	uxth	r3, r3
   245e4:	bl	2ef70 <flatcc_verify_field@@Base>
   245e8:	str	r0, [fp, #-12]
   245ec:	cmp	r0, #0
   245f0:	beq	24600 <main@@Base+0x1648>
   245f4:	ldr	r0, [fp, #-12]
   245f8:	str	r0, [fp, #-4]
   245fc:	b	24d1c <main@@Base+0x1d64>
   24600:	ldr	r0, [fp, #-8]
   24604:	movw	r1, #3
   24608:	uxth	r1, r1
   2460c:	movw	r2, #1
   24610:	bl	2f17c <flatcc_verify_string_field@@Base>
   24614:	str	r0, [fp, #-12]
   24618:	cmp	r0, #0
   2461c:	beq	2462c <main@@Base+0x1674>
   24620:	ldr	r0, [fp, #-12]
   24624:	str	r0, [fp, #-4]
   24628:	b	24d1c <main@@Base+0x1d64>
   2462c:	ldr	r0, [fp, #-8]
   24630:	movw	r1, #6
   24634:	uxth	r1, r1
   24638:	movw	r2, #1
   2463c:	movw	r3, #1
   24640:	uxth	r3, r3
   24644:	bl	2ef70 <flatcc_verify_field@@Base>
   24648:	str	r0, [fp, #-12]
   2464c:	cmp	r0, #0
   24650:	beq	24660 <main@@Base+0x16a8>
   24654:	ldr	r0, [fp, #-12]
   24658:	str	r0, [fp, #-4]
   2465c:	b	24d1c <main@@Base+0x1d64>
   24660:	ldr	r0, [fp, #-8]
   24664:	movw	r1, #5
   24668:	uxth	r1, r1
   2466c:	movw	r2, #0
   24670:	movw	r3, #1
   24674:	movw	ip, #1
   24678:	uxth	ip, ip
   2467c:	str	ip, [sp]
   24680:	mvn	ip, #0
   24684:	str	ip, [sp, #4]
   24688:	bl	2f4d8 <flatcc_verify_vector_field@@Base>
   2468c:	str	r0, [fp, #-12]
   24690:	cmp	r0, #0
   24694:	beq	246a4 <main@@Base+0x16ec>
   24698:	ldr	r0, [fp, #-12]
   2469c:	str	r0, [fp, #-4]
   246a0:	b	24d1c <main@@Base+0x1d64>
   246a4:	ldr	r0, [pc, #1660]	; 24d28 <main@@Base+0x1d70>
   246a8:	add	r3, pc, r0
   246ac:	ldr	r0, [fp, #-8]
   246b0:	movw	r1, #11
   246b4:	uxth	r1, r1
   246b8:	movw	r2, #0
   246bc:	bl	2fd50 <flatcc_verify_table_vector_field@@Base>
   246c0:	str	r0, [fp, #-12]
   246c4:	cmp	r0, #0
   246c8:	beq	246d8 <main@@Base+0x1720>
   246cc:	ldr	r0, [fp, #-12]
   246d0:	str	r0, [fp, #-4]
   246d4:	b	24d1c <main@@Base+0x1d64>
   246d8:	ldr	r0, [fp, #-8]
   246dc:	movw	r1, #10
   246e0:	uxth	r1, r1
   246e4:	movw	r2, #0
   246e8:	bl	2f70c <flatcc_verify_string_vector_field@@Base>
   246ec:	str	r0, [fp, #-12]
   246f0:	cmp	r0, #0
   246f4:	beq	24704 <main@@Base+0x174c>
   246f8:	ldr	r0, [fp, #-12]
   246fc:	str	r0, [fp, #-4]
   24700:	b	24d1c <main@@Base+0x1d64>
   24704:	ldr	r0, [fp, #-8]
   24708:	movw	r1, #28
   2470c:	uxth	r1, r1
   24710:	movw	r2, #0
   24714:	bl	2f70c <flatcc_verify_string_vector_field@@Base>
   24718:	str	r0, [fp, #-12]
   2471c:	cmp	r0, #0
   24720:	beq	24730 <main@@Base+0x1778>
   24724:	ldr	r0, [fp, #-12]
   24728:	str	r0, [fp, #-4]
   2472c:	b	24d1c <main@@Base+0x1d64>
   24730:	ldr	r0, [fp, #-8]
   24734:	movw	r1, #24
   24738:	uxth	r1, r1
   2473c:	movw	r2, #0
   24740:	movw	r3, #1
   24744:	movw	ip, #1
   24748:	uxth	ip, ip
   2474c:	str	ip, [sp]
   24750:	mvn	ip, #0
   24754:	str	ip, [sp, #4]
   24758:	bl	2f4d8 <flatcc_verify_vector_field@@Base>
   2475c:	str	r0, [fp, #-12]
   24760:	cmp	r0, #0
   24764:	beq	24774 <main@@Base+0x17bc>
   24768:	ldr	r0, [fp, #-12]
   2476c:	str	r0, [fp, #-4]
   24770:	b	24d1c <main@@Base+0x1d64>
   24774:	ldr	r0, [pc, #1456]	; 24d2c <main@@Base+0x1d74>
   24778:	ldr	r1, [fp, #-8]
   2477c:	str	r0, [fp, #-20]	; 0xffffffec
   24780:	mov	r0, r1
   24784:	movw	r1, #29
   24788:	uxth	r1, r1
   2478c:	movw	r2, #0
   24790:	movw	r3, #8
   24794:	movw	ip, #4
   24798:	uxth	ip, ip
   2479c:	str	ip, [sp]
   247a0:	ldr	ip, [fp, #-20]	; 0xffffffec
   247a4:	str	ip, [sp, #4]
   247a8:	bl	2f4d8 <flatcc_verify_vector_field@@Base>
   247ac:	str	r0, [fp, #-12]
   247b0:	cmp	r0, #0
   247b4:	beq	247c4 <main@@Base+0x180c>
   247b8:	ldr	r0, [fp, #-12]
   247bc:	str	r0, [fp, #-4]
   247c0:	b	24d1c <main@@Base+0x1d64>
   247c4:	ldr	r0, [pc, #1380]	; 24d30 <main@@Base+0x1d78>
   247c8:	add	r3, pc, r0
   247cc:	ldr	r0, [fp, #-8]
   247d0:	movw	r1, #12
   247d4:	uxth	r1, r1
   247d8:	movw	r2, #0
   247dc:	bl	2f98c <flatcc_verify_table_field@@Base>
   247e0:	str	r0, [fp, #-12]
   247e4:	cmp	r0, #0
   247e8:	beq	247f8 <main@@Base+0x1840>
   247ec:	ldr	r0, [fp, #-12]
   247f0:	str	r0, [fp, #-4]
   247f4:	b	24d1c <main@@Base+0x1d64>
   247f8:	ldr	r0, [pc, #1332]	; 24d34 <main@@Base+0x1d7c>
   247fc:	add	r3, pc, r0
   24800:	ldr	r0, [fp, #-8]
   24804:	movw	r1, #8
   24808:	uxth	r1, r1
   2480c:	movw	r2, #0
   24810:	bl	30bd8 <flatcc_verify_union_field@@Base>
   24814:	str	r0, [fp, #-12]
   24818:	cmp	r0, #0
   2481c:	beq	2482c <main@@Base+0x1874>
   24820:	ldr	r0, [fp, #-12]
   24824:	str	r0, [fp, #-4]
   24828:	b	24d1c <main@@Base+0x1d64>
   2482c:	ldr	r0, [pc, #1284]	; 24d38 <main@@Base+0x1d80>
   24830:	ldr	r1, [fp, #-8]
   24834:	str	r0, [fp, #-24]	; 0xffffffe8
   24838:	mov	r0, r1
   2483c:	movw	r1, #9
   24840:	uxth	r1, r1
   24844:	movw	r2, #0
   24848:	movw	r3, #4
   2484c:	movw	ip, #2
   24850:	uxth	ip, ip
   24854:	str	ip, [sp]
   24858:	ldr	ip, [fp, #-24]	; 0xffffffe8
   2485c:	str	ip, [sp, #4]
   24860:	bl	2f4d8 <flatcc_verify_vector_field@@Base>
   24864:	str	r0, [fp, #-12]
   24868:	cmp	r0, #0
   2486c:	beq	2487c <main@@Base+0x18c4>
   24870:	ldr	r0, [fp, #-12]
   24874:	str	r0, [fp, #-4]
   24878:	b	24d1c <main@@Base+0x1d64>
   2487c:	ldr	r0, [pc, #1204]	; 24d38 <main@@Base+0x1d80>
   24880:	ldr	r1, [fp, #-8]
   24884:	str	r0, [sp, #28]
   24888:	mov	r0, r1
   2488c:	movw	r1, #31
   24890:	uxth	r1, r1
   24894:	movw	r2, #0
   24898:	movw	r3, #4
   2489c:	movw	ip, #2
   248a0:	uxth	ip, ip
   248a4:	str	ip, [sp]
   248a8:	ldr	ip, [sp, #28]
   248ac:	str	ip, [sp, #4]
   248b0:	bl	2f4d8 <flatcc_verify_vector_field@@Base>
   248b4:	str	r0, [fp, #-12]
   248b8:	cmp	r0, #0
   248bc:	beq	248cc <main@@Base+0x1914>
   248c0:	ldr	r0, [fp, #-12]
   248c4:	str	r0, [fp, #-4]
   248c8:	b	24d1c <main@@Base+0x1d64>
   248cc:	ldr	r0, [pc, #1128]	; 24d3c <main@@Base+0x1d84>
   248d0:	add	r0, pc, r0
   248d4:	ldr	r1, [fp, #-8]
   248d8:	str	r0, [sp, #24]
   248dc:	mov	r0, r1
   248e0:	movw	r1, #13
   248e4:	uxth	r1, r1
   248e8:	movw	r2, #0
   248ec:	str	r2, [sp, #20]
   248f0:	ldr	r3, [sp, #20]
   248f4:	movw	ip, #1
   248f8:	uxth	ip, ip
   248fc:	str	ip, [sp]
   24900:	ldr	ip, [sp, #24]
   24904:	str	ip, [sp, #4]
   24908:	bl	30a30 <flatcc_verify_table_as_nested_root@@Base>
   2490c:	str	r0, [fp, #-12]
   24910:	cmp	r0, #0
   24914:	beq	24924 <main@@Base+0x196c>
   24918:	ldr	r0, [fp, #-12]
   2491c:	str	r0, [fp, #-4]
   24920:	b	24d1c <main@@Base+0x1d64>
   24924:	ldr	r0, [pc, #1044]	; 24d40 <main@@Base+0x1d88>
   24928:	add	r3, pc, r0
   2492c:	ldr	r0, [fp, #-8]
   24930:	movw	r1, #14
   24934:	uxth	r1, r1
   24938:	movw	r2, #0
   2493c:	bl	2f98c <flatcc_verify_table_field@@Base>
   24940:	str	r0, [fp, #-12]
   24944:	cmp	r0, #0
   24948:	beq	24958 <main@@Base+0x19a0>
   2494c:	ldr	r0, [fp, #-12]
   24950:	str	r0, [fp, #-4]
   24954:	b	24d1c <main@@Base+0x1d64>
   24958:	ldr	r0, [fp, #-8]
   2495c:	movw	r1, #15
   24960:	uxth	r1, r1
   24964:	movw	r2, #1
   24968:	movw	r3, #1
   2496c:	uxth	r3, r3
   24970:	bl	2ef70 <flatcc_verify_field@@Base>
   24974:	str	r0, [fp, #-12]
   24978:	cmp	r0, #0
   2497c:	beq	2498c <main@@Base+0x19d4>
   24980:	ldr	r0, [fp, #-12]
   24984:	str	r0, [fp, #-4]
   24988:	b	24d1c <main@@Base+0x1d64>
   2498c:	ldr	r0, [fp, #-8]
   24990:	movw	r1, #16
   24994:	uxth	r1, r1
   24998:	movw	r2, #4
   2499c:	movw	r3, #4
   249a0:	uxth	r3, r3
   249a4:	bl	2ef70 <flatcc_verify_field@@Base>
   249a8:	str	r0, [fp, #-12]
   249ac:	cmp	r0, #0
   249b0:	beq	249c0 <main@@Base+0x1a08>
   249b4:	ldr	r0, [fp, #-12]
   249b8:	str	r0, [fp, #-4]
   249bc:	b	24d1c <main@@Base+0x1d64>
   249c0:	ldr	r0, [fp, #-8]
   249c4:	movw	r1, #17
   249c8:	uxth	r1, r1
   249cc:	movw	r2, #4
   249d0:	movw	r3, #4
   249d4:	uxth	r3, r3
   249d8:	bl	2ef70 <flatcc_verify_field@@Base>
   249dc:	str	r0, [fp, #-12]
   249e0:	cmp	r0, #0
   249e4:	beq	249f4 <main@@Base+0x1a3c>
   249e8:	ldr	r0, [fp, #-12]
   249ec:	str	r0, [fp, #-4]
   249f0:	b	24d1c <main@@Base+0x1d64>
   249f4:	ldr	r0, [fp, #-8]
   249f8:	movw	r1, #18
   249fc:	uxth	r1, r1
   24a00:	movw	r2, #8
   24a04:	movw	r3, #8
   24a08:	uxth	r3, r3
   24a0c:	bl	2ef70 <flatcc_verify_field@@Base>
   24a10:	str	r0, [fp, #-12]
   24a14:	cmp	r0, #0
   24a18:	beq	24a28 <main@@Base+0x1a70>
   24a1c:	ldr	r0, [fp, #-12]
   24a20:	str	r0, [fp, #-4]
   24a24:	b	24d1c <main@@Base+0x1d64>
   24a28:	ldr	r0, [fp, #-8]
   24a2c:	movw	r1, #19
   24a30:	uxth	r1, r1
   24a34:	movw	r2, #8
   24a38:	movw	r3, #8
   24a3c:	uxth	r3, r3
   24a40:	bl	2ef70 <flatcc_verify_field@@Base>
   24a44:	str	r0, [fp, #-12]
   24a48:	cmp	r0, #0
   24a4c:	beq	24a5c <main@@Base+0x1aa4>
   24a50:	ldr	r0, [fp, #-12]
   24a54:	str	r0, [fp, #-4]
   24a58:	b	24d1c <main@@Base+0x1d64>
   24a5c:	ldr	r0, [fp, #-8]
   24a60:	movw	r1, #20
   24a64:	uxth	r1, r1
   24a68:	movw	r2, #4
   24a6c:	movw	r3, #4
   24a70:	uxth	r3, r3
   24a74:	bl	2ef70 <flatcc_verify_field@@Base>
   24a78:	str	r0, [fp, #-12]
   24a7c:	cmp	r0, #0
   24a80:	beq	24a90 <main@@Base+0x1ad8>
   24a84:	ldr	r0, [fp, #-12]
   24a88:	str	r0, [fp, #-4]
   24a8c:	b	24d1c <main@@Base+0x1d64>
   24a90:	ldr	r0, [fp, #-8]
   24a94:	movw	r1, #21
   24a98:	uxth	r1, r1
   24a9c:	movw	r2, #4
   24aa0:	movw	r3, #4
   24aa4:	uxth	r3, r3
   24aa8:	bl	2ef70 <flatcc_verify_field@@Base>
   24aac:	str	r0, [fp, #-12]
   24ab0:	cmp	r0, #0
   24ab4:	beq	24ac4 <main@@Base+0x1b0c>
   24ab8:	ldr	r0, [fp, #-12]
   24abc:	str	r0, [fp, #-4]
   24ac0:	b	24d1c <main@@Base+0x1d64>
   24ac4:	ldr	r0, [fp, #-8]
   24ac8:	movw	r1, #22
   24acc:	uxth	r1, r1
   24ad0:	movw	r2, #8
   24ad4:	movw	r3, #8
   24ad8:	uxth	r3, r3
   24adc:	bl	2ef70 <flatcc_verify_field@@Base>
   24ae0:	str	r0, [fp, #-12]
   24ae4:	cmp	r0, #0
   24ae8:	beq	24af8 <main@@Base+0x1b40>
   24aec:	ldr	r0, [fp, #-12]
   24af0:	str	r0, [fp, #-4]
   24af4:	b	24d1c <main@@Base+0x1d64>
   24af8:	ldr	r0, [fp, #-8]
   24afc:	movw	r1, #23
   24b00:	uxth	r1, r1
   24b04:	movw	r2, #8
   24b08:	movw	r3, #8
   24b0c:	uxth	r3, r3
   24b10:	bl	2ef70 <flatcc_verify_field@@Base>
   24b14:	str	r0, [fp, #-12]
   24b18:	cmp	r0, #0
   24b1c:	beq	24b2c <main@@Base+0x1b74>
   24b20:	ldr	r0, [fp, #-12]
   24b24:	str	r0, [fp, #-4]
   24b28:	b	24d1c <main@@Base+0x1d64>
   24b2c:	ldr	r0, [fp, #-8]
   24b30:	movw	r1, #25
   24b34:	uxth	r1, r1
   24b38:	movw	r2, #4
   24b3c:	movw	r3, #4
   24b40:	uxth	r3, r3
   24b44:	bl	2ef70 <flatcc_verify_field@@Base>
   24b48:	str	r0, [fp, #-12]
   24b4c:	cmp	r0, #0
   24b50:	beq	24b60 <main@@Base+0x1ba8>
   24b54:	ldr	r0, [fp, #-12]
   24b58:	str	r0, [fp, #-4]
   24b5c:	b	24d1c <main@@Base+0x1d64>
   24b60:	ldr	r0, [fp, #-8]
   24b64:	movw	r1, #26
   24b68:	uxth	r1, r1
   24b6c:	movw	r2, #4
   24b70:	movw	r3, #4
   24b74:	uxth	r3, r3
   24b78:	bl	2ef70 <flatcc_verify_field@@Base>
   24b7c:	str	r0, [fp, #-12]
   24b80:	cmp	r0, #0
   24b84:	beq	24b94 <main@@Base+0x1bdc>
   24b88:	ldr	r0, [fp, #-12]
   24b8c:	str	r0, [fp, #-4]
   24b90:	b	24d1c <main@@Base+0x1d64>
   24b94:	ldr	r0, [fp, #-8]
   24b98:	movw	r1, #27
   24b9c:	uxth	r1, r1
   24ba0:	movw	r2, #4
   24ba4:	movw	r3, #4
   24ba8:	uxth	r3, r3
   24bac:	bl	2ef70 <flatcc_verify_field@@Base>
   24bb0:	str	r0, [fp, #-12]
   24bb4:	cmp	r0, #0
   24bb8:	beq	24bc8 <main@@Base+0x1c10>
   24bbc:	ldr	r0, [fp, #-12]
   24bc0:	str	r0, [fp, #-4]
   24bc4:	b	24d1c <main@@Base+0x1d64>
   24bc8:	ldr	r0, [fp, #-8]
   24bcc:	movw	r1, #30
   24bd0:	uxth	r1, r1
   24bd4:	movw	r2, #0
   24bd8:	movw	r3, #1
   24bdc:	movw	ip, #1
   24be0:	uxth	ip, ip
   24be4:	str	ip, [sp]
   24be8:	mvn	ip, #0
   24bec:	str	ip, [sp, #4]
   24bf0:	bl	2f4d8 <flatcc_verify_vector_field@@Base>
   24bf4:	str	r0, [fp, #-12]
   24bf8:	cmp	r0, #0
   24bfc:	beq	24c0c <main@@Base+0x1c54>
   24c00:	ldr	r0, [fp, #-12]
   24c04:	str	r0, [fp, #-4]
   24c08:	b	24d1c <main@@Base+0x1d64>
   24c0c:	ldr	r0, [pc, #280]	; 24d2c <main@@Base+0x1d74>
   24c10:	ldr	r1, [fp, #-8]
   24c14:	str	r0, [sp, #16]
   24c18:	mov	r0, r1
   24c1c:	movw	r1, #32
   24c20:	uxth	r1, r1
   24c24:	movw	r2, #0
   24c28:	movw	r3, #8
   24c2c:	movw	ip, #8
   24c30:	uxth	ip, ip
   24c34:	str	ip, [sp]
   24c38:	ldr	ip, [sp, #16]
   24c3c:	str	ip, [sp, #4]
   24c40:	bl	2f4d8 <flatcc_verify_vector_field@@Base>
   24c44:	str	r0, [fp, #-12]
   24c48:	cmp	r0, #0
   24c4c:	beq	24c5c <main@@Base+0x1ca4>
   24c50:	ldr	r0, [fp, #-12]
   24c54:	str	r0, [fp, #-4]
   24c58:	b	24d1c <main@@Base+0x1d64>
   24c5c:	ldr	r0, [pc, #200]	; 24d2c <main@@Base+0x1d74>
   24c60:	ldr	r1, [fp, #-8]
   24c64:	str	r0, [sp, #12]
   24c68:	mov	r0, r1
   24c6c:	movw	r1, #33	; 0x21
   24c70:	uxth	r1, r1
   24c74:	movw	r2, #0
   24c78:	movw	r3, #8
   24c7c:	movw	ip, #8
   24c80:	uxth	ip, ip
   24c84:	str	ip, [sp]
   24c88:	ldr	ip, [sp, #12]
   24c8c:	str	ip, [sp, #4]
   24c90:	bl	2f4d8 <flatcc_verify_vector_field@@Base>
   24c94:	str	r0, [fp, #-12]
   24c98:	cmp	r0, #0
   24c9c:	beq	24cac <main@@Base+0x1cf4>
   24ca0:	ldr	r0, [fp, #-12]
   24ca4:	str	r0, [fp, #-4]
   24ca8:	b	24d1c <main@@Base+0x1d64>
   24cac:	ldr	r0, [pc, #144]	; 24d44 <main@@Base+0x1d8c>
   24cb0:	add	r3, pc, r0
   24cb4:	ldr	r0, [fp, #-8]
   24cb8:	movw	r1, #34	; 0x22
   24cbc:	uxth	r1, r1
   24cc0:	movw	r2, #0
   24cc4:	bl	2f98c <flatcc_verify_table_field@@Base>
   24cc8:	str	r0, [fp, #-12]
   24ccc:	cmp	r0, #0
   24cd0:	beq	24ce0 <main@@Base+0x1d28>
   24cd4:	ldr	r0, [fp, #-12]
   24cd8:	str	r0, [fp, #-4]
   24cdc:	b	24d1c <main@@Base+0x1d64>
   24ce0:	ldr	r0, [pc, #96]	; 24d48 <main@@Base+0x1d90>
   24ce4:	add	r3, pc, r0
   24ce8:	ldr	r0, [fp, #-8]
   24cec:	movw	r1, #35	; 0x23
   24cf0:	uxth	r1, r1
   24cf4:	movw	r2, #0
   24cf8:	bl	2f98c <flatcc_verify_table_field@@Base>
   24cfc:	str	r0, [fp, #-12]
   24d00:	cmp	r0, #0
   24d04:	beq	24d14 <main@@Base+0x1d5c>
   24d08:	ldr	r0, [fp, #-12]
   24d0c:	str	r0, [fp, #-4]
   24d10:	b	24d1c <main@@Base+0x1d64>
   24d14:	movw	r0, #0
   24d18:	str	r0, [fp, #-4]
   24d1c:	ldr	r0, [fp, #-4]
   24d20:	mov	sp, fp
   24d24:	pop	{fp, pc}
   24d28:			; <UNDEFINED> instruction: 0xfffffe9c
   24d2c:	svcne	0x00ffffff
   24d30:			; <UNDEFINED> instruction: 0xfffffd7c
   24d34:	andeq	r0, r0, r8, asr #10
   24d38:	svccc	0x00ffffff
   24d3c:			; <UNDEFINED> instruction: 0xfffffc74
   24d40:	andeq	r0, r0, r8, ror #9
   24d44:	andeq	r0, r0, r0, lsr #4
   24d48:	andeq	r0, r0, r0, lsl #4
   24d4c:	push	{fp, lr}
   24d50:	mov	fp, sp
   24d54:	sub	sp, sp, #16
   24d58:	str	r0, [sp, #8]
   24d5c:	ldr	r0, [sp, #8]
   24d60:	ldrb	r0, [r0, #12]
   24d64:	sub	r0, r0, #1
   24d68:	cmp	r0, #3
   24d6c:	str	r0, [sp, #4]
   24d70:	bhi	24df4 <main@@Base+0x1e3c>
   24d74:	add	r0, pc, #8
   24d78:	ldr	r1, [sp, #4]
   24d7c:	ldr	r2, [r0, r1, lsl #2]
   24d80:	add	pc, r0, r2
   24d84:	andeq	r0, r0, r0, lsl r0
   24d88:	andeq	r0, r0, r8, lsr #32
   24d8c:	andeq	r0, r0, r0, asr #32
   24d90:	andeq	r0, r0, r8, asr r0
   24d94:	ldr	r0, [pc, #120]	; 24e14 <main@@Base+0x1e5c>
   24d98:	add	r1, pc, r0
   24d9c:	ldr	r0, [sp, #8]
   24da0:	bl	300b0 <flatcc_verify_union_table@@Base>
   24da4:	str	r0, [fp, #-4]
   24da8:	b	24dfc <main@@Base+0x1e44>
   24dac:	ldr	r0, [pc, #92]	; 24e10 <main@@Base+0x1e58>
   24db0:	add	r1, pc, r0
   24db4:	ldr	r0, [sp, #8]
   24db8:	bl	300b0 <flatcc_verify_union_table@@Base>
   24dbc:	str	r0, [fp, #-4]
   24dc0:	b	24dfc <main@@Base+0x1e44>
   24dc4:	ldr	r0, [pc, #64]	; 24e0c <main@@Base+0x1e54>
   24dc8:	add	r1, pc, r0
   24dcc:	ldr	r0, [sp, #8]
   24dd0:	bl	300b0 <flatcc_verify_union_table@@Base>
   24dd4:	str	r0, [fp, #-4]
   24dd8:	b	24dfc <main@@Base+0x1e44>
   24ddc:	ldr	r0, [pc, #36]	; 24e08 <main@@Base+0x1e50>
   24de0:	add	r1, pc, r0
   24de4:	ldr	r0, [sp, #8]
   24de8:	bl	300b0 <flatcc_verify_union_table@@Base>
   24dec:	str	r0, [fp, #-4]
   24df0:	b	24dfc <main@@Base+0x1e44>
   24df4:	movw	r0, #0
   24df8:	str	r0, [fp, #-4]
   24dfc:	ldr	r0, [fp, #-4]
   24e00:	mov	sp, fp
   24e04:	pop	{fp, pc}
   24e08:	andeq	r0, r0, r4, lsr #6
   24e0c:	andeq	r0, r0, r8, lsr #6
   24e10:	andeq	r0, r0, r4, asr #4
   24e14:			; <UNDEFINED> instruction: 0xfffff7ac
   24e18:	push	{fp, lr}
   24e1c:	mov	fp, sp
   24e20:	sub	sp, sp, #16
   24e24:	str	r0, [sp, #8]
   24e28:	ldr	r0, [sp, #8]
   24e2c:	movw	r1, #0
   24e30:	uxth	r1, r1
   24e34:	movw	r2, #0
   24e38:	bl	2f17c <flatcc_verify_string_field@@Base>
   24e3c:	str	r0, [sp, #4]
   24e40:	cmp	r0, #0
   24e44:	beq	24e54 <main@@Base+0x1e9c>
   24e48:	ldr	r0, [sp, #4]
   24e4c:	str	r0, [fp, #-4]
   24e50:	b	24ecc <main@@Base+0x1f14>
   24e54:	ldr	r0, [sp, #8]
   24e58:	movw	r1, #1
   24e5c:	uxth	r1, r1
   24e60:	movw	r2, #8
   24e64:	movw	r3, #8
   24e68:	uxth	r3, r3
   24e6c:	bl	2ef70 <flatcc_verify_field@@Base>
   24e70:	str	r0, [sp, #4]
   24e74:	cmp	r0, #0
   24e78:	beq	24e88 <main@@Base+0x1ed0>
   24e7c:	ldr	r0, [sp, #4]
   24e80:	str	r0, [fp, #-4]
   24e84:	b	24ecc <main@@Base+0x1f14>
   24e88:	ldr	r0, [sp, #8]
   24e8c:	movw	r1, #2
   24e90:	uxth	r2, r1
   24e94:	str	r1, [sp]
   24e98:	mov	r1, r2
   24e9c:	movw	r2, #2
   24ea0:	ldr	r3, [sp]
   24ea4:	uxth	r3, r3
   24ea8:	bl	2ef70 <flatcc_verify_field@@Base>
   24eac:	str	r0, [sp, #4]
   24eb0:	cmp	r0, #0
   24eb4:	beq	24ec4 <main@@Base+0x1f0c>
   24eb8:	ldr	r0, [sp, #4]
   24ebc:	str	r0, [fp, #-4]
   24ec0:	b	24ecc <main@@Base+0x1f14>
   24ec4:	movw	r0, #0
   24ec8:	str	r0, [fp, #-4]
   24ecc:	ldr	r0, [fp, #-4]
   24ed0:	mov	sp, fp
   24ed4:	pop	{fp, pc}
   24ed8:	sub	sp, sp, #4
   24edc:	str	r0, [sp]
   24ee0:	movw	r0, #0
   24ee4:	add	sp, sp, #4
   24ee8:	bx	lr
   24eec:	push	{fp, lr}
   24ef0:	mov	fp, sp
   24ef4:	sub	sp, sp, #32
   24ef8:	str	r0, [fp, #-8]
   24efc:	ldr	r0, [fp, #-8]
   24f00:	movw	r1, #0
   24f04:	uxth	r1, r1
   24f08:	movw	r2, #0
   24f0c:	movw	r3, #1
   24f10:	movw	ip, #1
   24f14:	uxth	ip, ip
   24f18:	str	ip, [sp]
   24f1c:	mvn	ip, #0
   24f20:	str	ip, [sp, #4]
   24f24:	bl	2f4d8 <flatcc_verify_vector_field@@Base>
   24f28:	str	r0, [fp, #-12]
   24f2c:	cmp	r0, #0
   24f30:	beq	24f40 <main@@Base+0x1f88>
   24f34:	ldr	r0, [fp, #-12]
   24f38:	str	r0, [fp, #-4]
   24f3c:	b	24fec <main@@Base+0x2034>
   24f40:	ldr	r0, [fp, #-8]
   24f44:	movw	r1, #1
   24f48:	uxth	r2, r1
   24f4c:	str	r1, [sp, #16]
   24f50:	mov	r1, r2
   24f54:	movw	r2, #0
   24f58:	movw	r3, #1
   24f5c:	ldr	ip, [sp, #16]
   24f60:	uxth	lr, ip
   24f64:	str	lr, [sp]
   24f68:	mvn	lr, #0
   24f6c:	str	lr, [sp, #4]
   24f70:	bl	2f4d8 <flatcc_verify_vector_field@@Base>
   24f74:	str	r0, [fp, #-12]
   24f78:	cmp	r0, #0
   24f7c:	beq	24f8c <main@@Base+0x1fd4>
   24f80:	ldr	r0, [fp, #-12]
   24f84:	str	r0, [fp, #-4]
   24f88:	b	24fec <main@@Base+0x2034>
   24f8c:	ldr	r0, [pc, #100]	; 24ff8 <main@@Base+0x2040>
   24f90:	add	r0, pc, r0
   24f94:	ldr	r1, [fp, #-8]
   24f98:	str	r0, [sp, #12]
   24f9c:	mov	r0, r1
   24fa0:	movw	r1, #2
   24fa4:	uxth	r1, r1
   24fa8:	movw	r2, #0
   24fac:	str	r2, [sp, #8]
   24fb0:	ldr	r3, [sp, #8]
   24fb4:	movw	ip, #1
   24fb8:	uxth	ip, ip
   24fbc:	str	ip, [sp]
   24fc0:	ldr	ip, [sp, #12]
   24fc4:	str	ip, [sp, #4]
   24fc8:	bl	30a30 <flatcc_verify_table_as_nested_root@@Base>
   24fcc:	str	r0, [fp, #-12]
   24fd0:	cmp	r0, #0
   24fd4:	beq	24fe4 <main@@Base+0x202c>
   24fd8:	ldr	r0, [fp, #-12]
   24fdc:	str	r0, [fp, #-4]
   24fe0:	b	24fec <main@@Base+0x2034>
   24fe4:	movw	r0, #0
   24fe8:	str	r0, [fp, #-4]
   24fec:	ldr	r0, [fp, #-4]
   24ff0:	mov	sp, fp
   24ff4:	pop	{fp, pc}
   24ff8:			; <UNDEFINED> instruction: 0xfffff5b4
   24ffc:	push	{fp, lr}
   25000:	mov	fp, sp
   25004:	sub	sp, sp, #16
   25008:	str	r0, [sp, #8]
   2500c:	ldr	r0, [sp, #8]
   25010:	movw	r1, #0
   25014:	uxth	r1, r1
   25018:	movw	r2, #1
   2501c:	movw	r3, #1
   25020:	uxth	r3, r3
   25024:	bl	2ef70 <flatcc_verify_field@@Base>
   25028:	str	r0, [sp, #4]
   2502c:	cmp	r0, #0
   25030:	beq	25040 <main@@Base+0x2088>
   25034:	ldr	r0, [sp, #4]
   25038:	str	r0, [fp, #-4]
   2503c:	b	250ec <main@@Base+0x2134>
   25040:	ldr	r0, [sp, #8]
   25044:	movw	r1, #1
   25048:	uxth	r2, r1
   2504c:	str	r1, [sp]
   25050:	mov	r1, r2
   25054:	movw	r2, #1
   25058:	ldr	r3, [sp]
   2505c:	uxth	r3, r3
   25060:	bl	2ef70 <flatcc_verify_field@@Base>
   25064:	str	r0, [sp, #4]
   25068:	cmp	r0, #0
   2506c:	beq	2507c <main@@Base+0x20c4>
   25070:	ldr	r0, [sp, #4]
   25074:	str	r0, [fp, #-4]
   25078:	b	250ec <main@@Base+0x2134>
   2507c:	ldr	r0, [sp, #8]
   25080:	movw	r1, #2
   25084:	uxth	r1, r1
   25088:	movw	r2, #1
   2508c:	movw	r3, #1
   25090:	uxth	r3, r3
   25094:	bl	2ef70 <flatcc_verify_field@@Base>
   25098:	str	r0, [sp, #4]
   2509c:	cmp	r0, #0
   250a0:	beq	250b0 <main@@Base+0x20f8>
   250a4:	ldr	r0, [sp, #4]
   250a8:	str	r0, [fp, #-4]
   250ac:	b	250ec <main@@Base+0x2134>
   250b0:	ldr	r0, [sp, #8]
   250b4:	movw	r1, #3
   250b8:	uxth	r1, r1
   250bc:	movw	r2, #1
   250c0:	movw	r3, #1
   250c4:	uxth	r3, r3
   250c8:	bl	2ef70 <flatcc_verify_field@@Base>
   250cc:	str	r0, [sp, #4]
   250d0:	cmp	r0, #0
   250d4:	beq	250e4 <main@@Base+0x212c>
   250d8:	ldr	r0, [sp, #4]
   250dc:	str	r0, [fp, #-4]
   250e0:	b	250ec <main@@Base+0x2134>
   250e4:	movw	r0, #0
   250e8:	str	r0, [fp, #-4]
   250ec:	ldr	r0, [fp, #-4]
   250f0:	mov	sp, fp
   250f4:	pop	{fp, pc}
   250f8:	sub	sp, sp, #4
   250fc:	str	r0, [sp]
   25100:	movw	r0, #0
   25104:	add	sp, sp, #4
   25108:	bx	lr
   2510c:	push	{fp, lr}
   25110:	mov	fp, sp
   25114:	sub	sp, sp, #16
   25118:	ldr	r1, [pc, #172]	; 251cc <main@@Base+0x2214>
   2511c:	add	r3, pc, r1
   25120:	str	r0, [sp, #8]
   25124:	ldr	r0, [sp, #8]
   25128:	movw	r1, #0
   2512c:	uxth	r1, r1
   25130:	movw	r2, #0
   25134:	bl	2f98c <flatcc_verify_table_field@@Base>
   25138:	str	r0, [sp, #4]
   2513c:	cmp	r0, #0
   25140:	beq	25150 <main@@Base+0x2198>
   25144:	ldr	r0, [sp, #4]
   25148:	str	r0, [fp, #-4]
   2514c:	b	251c0 <main@@Base+0x2208>
   25150:	ldr	r0, [pc, #120]	; 251d0 <main@@Base+0x2218>
   25154:	add	r3, pc, r0
   25158:	ldr	r0, [sp, #8]
   2515c:	movw	r1, #1
   25160:	uxth	r1, r1
   25164:	movw	r2, #0
   25168:	bl	2f98c <flatcc_verify_table_field@@Base>
   2516c:	str	r0, [sp, #4]
   25170:	cmp	r0, #0
   25174:	beq	25184 <main@@Base+0x21cc>
   25178:	ldr	r0, [sp, #4]
   2517c:	str	r0, [fp, #-4]
   25180:	b	251c0 <main@@Base+0x2208>
   25184:	ldr	r0, [pc, #72]	; 251d4 <main@@Base+0x221c>
   25188:	add	r3, pc, r0
   2518c:	ldr	r0, [sp, #8]
   25190:	movw	r1, #3
   25194:	uxth	r1, r1
   25198:	movw	r2, #0
   2519c:	bl	30ed0 <flatcc_verify_union_vector_field@@Base>
   251a0:	str	r0, [sp, #4]
   251a4:	cmp	r0, #0
   251a8:	beq	251b8 <main@@Base+0x2200>
   251ac:	ldr	r0, [sp, #4]
   251b0:	str	r0, [fp, #-4]
   251b4:	b	251c0 <main@@Base+0x2208>
   251b8:	movw	r0, #0
   251bc:	str	r0, [fp, #-4]
   251c0:	ldr	r0, [fp, #-4]
   251c4:	mov	sp, fp
   251c8:	pop	{fp, pc}
   251cc:	strheq	r0, [r0], -r4
   251d0:	andeq	r0, r0, r8, asr #2
   251d4:			; <UNDEFINED> instruction: 0xfffffbbc
   251d8:	push	{fp, lr}
   251dc:	mov	fp, sp
   251e0:	sub	sp, sp, #16
   251e4:	ldr	r1, [pc, #172]	; 25298 <main@@Base+0x22e0>
   251e8:	add	r3, pc, r1
   251ec:	str	r0, [sp, #8]
   251f0:	ldr	r0, [sp, #8]
   251f4:	movw	r1, #0
   251f8:	uxth	r1, r1
   251fc:	movw	r2, #0
   25200:	bl	2f98c <flatcc_verify_table_field@@Base>
   25204:	str	r0, [sp, #4]
   25208:	cmp	r0, #0
   2520c:	beq	2521c <main@@Base+0x2264>
   25210:	ldr	r0, [sp, #4]
   25214:	str	r0, [fp, #-4]
   25218:	b	2528c <main@@Base+0x22d4>
   2521c:	ldr	r0, [pc, #120]	; 2529c <main@@Base+0x22e4>
   25220:	add	r3, pc, r0
   25224:	ldr	r0, [sp, #8]
   25228:	movw	r1, #1
   2522c:	uxth	r1, r1
   25230:	movw	r2, #0
   25234:	bl	2f98c <flatcc_verify_table_field@@Base>
   25238:	str	r0, [sp, #4]
   2523c:	cmp	r0, #0
   25240:	beq	25250 <main@@Base+0x2298>
   25244:	ldr	r0, [sp, #4]
   25248:	str	r0, [fp, #-4]
   2524c:	b	2528c <main@@Base+0x22d4>
   25250:	ldr	r0, [pc, #72]	; 252a0 <main@@Base+0x22e8>
   25254:	add	r3, pc, r0
   25258:	ldr	r0, [sp, #8]
   2525c:	movw	r1, #2
   25260:	uxth	r1, r1
   25264:	movw	r2, #0
   25268:	bl	2f98c <flatcc_verify_table_field@@Base>
   2526c:	str	r0, [sp, #4]
   25270:	cmp	r0, #0
   25274:	beq	25284 <main@@Base+0x22cc>
   25278:	ldr	r0, [sp, #4]
   2527c:	str	r0, [fp, #-4]
   25280:	b	2528c <main@@Base+0x22d4>
   25284:	movw	r0, #0
   25288:	str	r0, [fp, #-4]
   2528c:	ldr	r0, [fp, #-4]
   25290:	mov	sp, fp
   25294:	pop	{fp, pc}
   25298:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   2529c:	muleq	r0, r8, r3
   252a0:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   252a4:	push	{fp, lr}
   252a8:	mov	fp, sp
   252ac:	sub	sp, sp, #16
   252b0:	ldr	r1, [pc, #276]	; 253cc <main@@Base+0x2414>
   252b4:	add	r3, pc, r1
   252b8:	str	r0, [sp, #8]
   252bc:	ldr	r0, [sp, #8]
   252c0:	movw	r1, #1
   252c4:	uxth	r1, r1
   252c8:	movw	r2, #0
   252cc:	bl	30bd8 <flatcc_verify_union_field@@Base>
   252d0:	str	r0, [sp, #4]
   252d4:	cmp	r0, #0
   252d8:	beq	252e8 <main@@Base+0x2330>
   252dc:	ldr	r0, [sp, #4]
   252e0:	str	r0, [fp, #-4]
   252e4:	b	253c0 <main@@Base+0x2408>
   252e8:	ldr	r0, [pc, #224]	; 253d0 <main@@Base+0x2418>
   252ec:	add	r3, pc, r0
   252f0:	ldr	r0, [sp, #8]
   252f4:	movw	r1, #3
   252f8:	uxth	r1, r1
   252fc:	movw	r2, #0
   25300:	bl	30bd8 <flatcc_verify_union_field@@Base>
   25304:	str	r0, [sp, #4]
   25308:	cmp	r0, #0
   2530c:	beq	2531c <main@@Base+0x2364>
   25310:	ldr	r0, [sp, #4]
   25314:	str	r0, [fp, #-4]
   25318:	b	253c0 <main@@Base+0x2408>
   2531c:	ldr	r0, [pc, #176]	; 253d4 <main@@Base+0x241c>
   25320:	add	r3, pc, r0
   25324:	ldr	r0, [sp, #8]
   25328:	movw	r1, #5
   2532c:	uxth	r1, r1
   25330:	movw	r2, #0
   25334:	bl	30bd8 <flatcc_verify_union_field@@Base>
   25338:	str	r0, [sp, #4]
   2533c:	cmp	r0, #0
   25340:	beq	25350 <main@@Base+0x2398>
   25344:	ldr	r0, [sp, #4]
   25348:	str	r0, [fp, #-4]
   2534c:	b	253c0 <main@@Base+0x2408>
   25350:	ldr	r0, [pc, #128]	; 253d8 <main@@Base+0x2420>
   25354:	add	r3, pc, r0
   25358:	ldr	r0, [sp, #8]
   2535c:	movw	r1, #7
   25360:	uxth	r1, r1
   25364:	movw	r2, #0
   25368:	bl	30bd8 <flatcc_verify_union_field@@Base>
   2536c:	str	r0, [sp, #4]
   25370:	cmp	r0, #0
   25374:	beq	25384 <main@@Base+0x23cc>
   25378:	ldr	r0, [sp, #4]
   2537c:	str	r0, [fp, #-4]
   25380:	b	253c0 <main@@Base+0x2408>
   25384:	ldr	r0, [pc, #80]	; 253dc <main@@Base+0x2424>
   25388:	add	r3, pc, r0
   2538c:	ldr	r0, [sp, #8]
   25390:	movw	r1, #9
   25394:	uxth	r1, r1
   25398:	movw	r2, #0
   2539c:	bl	30ed0 <flatcc_verify_union_vector_field@@Base>
   253a0:	str	r0, [sp, #4]
   253a4:	cmp	r0, #0
   253a8:	beq	253b8 <main@@Base+0x2400>
   253ac:	ldr	r0, [sp, #4]
   253b0:	str	r0, [fp, #-4]
   253b4:	b	253c0 <main@@Base+0x2408>
   253b8:	movw	r0, #0
   253bc:	str	r0, [fp, #-4]
   253c0:	ldr	r0, [fp, #-4]
   253c4:	mov	sp, fp
   253c8:	pop	{fp, pc}
   253cc:	andeq	r0, r0, ip, lsl r4
   253d0:	andeq	r0, r0, r4, ror #7
   253d4:			; <UNDEFINED> instruction: 0x000003b0
   253d8:	andeq	r0, r0, ip, ror r3
   253dc:	andeq	r0, r0, r8, asr #6
   253e0:	push	{fp, lr}
   253e4:	mov	fp, sp
   253e8:	sub	sp, sp, #16
   253ec:	str	r0, [sp, #8]
   253f0:	ldr	r0, [sp, #8]
   253f4:	movw	r1, #0
   253f8:	uxth	r1, r1
   253fc:	movw	r2, #0
   25400:	bl	2f17c <flatcc_verify_string_field@@Base>
   25404:	str	r0, [sp, #4]
   25408:	cmp	r0, #0
   2540c:	beq	2541c <main@@Base+0x2464>
   25410:	ldr	r0, [sp, #4]
   25414:	str	r0, [fp, #-4]
   25418:	b	255b4 <main@@Base+0x25fc>
   2541c:	ldr	r0, [sp, #8]
   25420:	movw	r1, #1
   25424:	uxth	r1, r1
   25428:	movw	r2, #4
   2542c:	movw	r3, #4
   25430:	uxth	r3, r3
   25434:	bl	2ef70 <flatcc_verify_field@@Base>
   25438:	str	r0, [sp, #4]
   2543c:	cmp	r0, #0
   25440:	beq	25450 <main@@Base+0x2498>
   25444:	ldr	r0, [sp, #4]
   25448:	str	r0, [fp, #-4]
   2544c:	b	255b4 <main@@Base+0x25fc>
   25450:	ldr	r0, [sp, #8]
   25454:	movw	r1, #2
   25458:	uxth	r1, r1
   2545c:	movw	r2, #0
   25460:	bl	2f17c <flatcc_verify_string_field@@Base>
   25464:	str	r0, [sp, #4]
   25468:	cmp	r0, #0
   2546c:	beq	2547c <main@@Base+0x24c4>
   25470:	ldr	r0, [sp, #4]
   25474:	str	r0, [fp, #-4]
   25478:	b	255b4 <main@@Base+0x25fc>
   2547c:	ldr	r0, [sp, #8]
   25480:	movw	r1, #3
   25484:	uxth	r1, r1
   25488:	movw	r2, #8
   2548c:	movw	r3, #8
   25490:	uxth	r3, r3
   25494:	bl	2ef70 <flatcc_verify_field@@Base>
   25498:	str	r0, [sp, #4]
   2549c:	cmp	r0, #0
   254a0:	beq	254b0 <main@@Base+0x24f8>
   254a4:	ldr	r0, [sp, #4]
   254a8:	str	r0, [fp, #-4]
   254ac:	b	255b4 <main@@Base+0x25fc>
   254b0:	ldr	r0, [sp, #8]
   254b4:	movw	r1, #4
   254b8:	uxth	r1, r1
   254bc:	movw	r2, #0
   254c0:	bl	2f17c <flatcc_verify_string_field@@Base>
   254c4:	str	r0, [sp, #4]
   254c8:	cmp	r0, #0
   254cc:	beq	254dc <main@@Base+0x2524>
   254d0:	ldr	r0, [sp, #4]
   254d4:	str	r0, [fp, #-4]
   254d8:	b	255b4 <main@@Base+0x25fc>
   254dc:	ldr	r0, [sp, #8]
   254e0:	movw	r1, #5
   254e4:	uxth	r1, r1
   254e8:	movw	r2, #8
   254ec:	movw	r3, #8
   254f0:	uxth	r3, r3
   254f4:	bl	2ef70 <flatcc_verify_field@@Base>
   254f8:	str	r0, [sp, #4]
   254fc:	cmp	r0, #0
   25500:	beq	25510 <main@@Base+0x2558>
   25504:	ldr	r0, [sp, #4]
   25508:	str	r0, [fp, #-4]
   2550c:	b	255b4 <main@@Base+0x25fc>
   25510:	ldr	r0, [sp, #8]
   25514:	movw	r1, #6
   25518:	uxth	r1, r1
   2551c:	movw	r2, #4
   25520:	movw	r3, #4
   25524:	uxth	r3, r3
   25528:	bl	2ef70 <flatcc_verify_field@@Base>
   2552c:	str	r0, [sp, #4]
   25530:	cmp	r0, #0
   25534:	beq	25544 <main@@Base+0x258c>
   25538:	ldr	r0, [sp, #4]
   2553c:	str	r0, [fp, #-4]
   25540:	b	255b4 <main@@Base+0x25fc>
   25544:	ldr	r0, [sp, #8]
   25548:	movw	r1, #7
   2554c:	uxth	r1, r1
   25550:	movw	r2, #8
   25554:	movw	r3, #8
   25558:	uxth	r3, r3
   2555c:	bl	2ef70 <flatcc_verify_field@@Base>
   25560:	str	r0, [sp, #4]
   25564:	cmp	r0, #0
   25568:	beq	25578 <main@@Base+0x25c0>
   2556c:	ldr	r0, [sp, #4]
   25570:	str	r0, [fp, #-4]
   25574:	b	255b4 <main@@Base+0x25fc>
   25578:	ldr	r0, [sp, #8]
   2557c:	movw	r1, #8
   25580:	uxth	r1, r1
   25584:	movw	r2, #4
   25588:	movw	r3, #4
   2558c:	uxth	r3, r3
   25590:	bl	2ef70 <flatcc_verify_field@@Base>
   25594:	str	r0, [sp, #4]
   25598:	cmp	r0, #0
   2559c:	beq	255ac <main@@Base+0x25f4>
   255a0:	ldr	r0, [sp, #4]
   255a4:	str	r0, [fp, #-4]
   255a8:	b	255b4 <main@@Base+0x25fc>
   255ac:	movw	r0, #0
   255b0:	str	r0, [fp, #-4]
   255b4:	ldr	r0, [fp, #-4]
   255b8:	mov	sp, fp
   255bc:	pop	{fp, pc}
   255c0:	push	{fp, lr}
   255c4:	mov	fp, sp
   255c8:	sub	sp, sp, #16
   255cc:	str	r0, [sp, #8]
   255d0:	ldr	r0, [sp, #8]
   255d4:	movw	r1, #0
   255d8:	uxth	r1, r1
   255dc:	movw	r2, #8
   255e0:	movw	r3, #8
   255e4:	uxth	r3, r3
   255e8:	bl	2ef70 <flatcc_verify_field@@Base>
   255ec:	str	r0, [sp, #4]
   255f0:	cmp	r0, #0
   255f4:	beq	25604 <main@@Base+0x264c>
   255f8:	ldr	r0, [sp, #4]
   255fc:	str	r0, [fp, #-4]
   25600:	b	25640 <main@@Base+0x2688>
   25604:	ldr	r0, [sp, #8]
   25608:	movw	r1, #1
   2560c:	uxth	r1, r1
   25610:	movw	r2, #4
   25614:	movw	r3, #4
   25618:	uxth	r3, r3
   2561c:	bl	2ef70 <flatcc_verify_field@@Base>
   25620:	str	r0, [sp, #4]
   25624:	cmp	r0, #0
   25628:	beq	25638 <main@@Base+0x2680>
   2562c:	ldr	r0, [sp, #4]
   25630:	str	r0, [fp, #-4]
   25634:	b	25640 <main@@Base+0x2688>
   25638:	movw	r0, #0
   2563c:	str	r0, [fp, #-4]
   25640:	ldr	r0, [fp, #-4]
   25644:	mov	sp, fp
   25648:	pop	{fp, pc}
   2564c:	push	{fp, lr}
   25650:	mov	fp, sp
   25654:	sub	sp, sp, #16
   25658:	str	r0, [sp, #8]
   2565c:	ldr	r0, [sp, #8]
   25660:	movw	r1, #0
   25664:	uxth	r1, r1
   25668:	movw	r2, #8
   2566c:	movw	r3, #8
   25670:	uxth	r3, r3
   25674:	bl	2ef70 <flatcc_verify_field@@Base>
   25678:	str	r0, [sp, #4]
   2567c:	cmp	r0, #0
   25680:	beq	25690 <main@@Base+0x26d8>
   25684:	ldr	r0, [sp, #4]
   25688:	str	r0, [fp, #-4]
   2568c:	b	256cc <main@@Base+0x2714>
   25690:	ldr	r0, [sp, #8]
   25694:	movw	r1, #1
   25698:	uxth	r1, r1
   2569c:	movw	r2, #4
   256a0:	movw	r3, #4
   256a4:	uxth	r3, r3
   256a8:	bl	2ef70 <flatcc_verify_field@@Base>
   256ac:	str	r0, [sp, #4]
   256b0:	cmp	r0, #0
   256b4:	beq	256c4 <main@@Base+0x270c>
   256b8:	ldr	r0, [sp, #4]
   256bc:	str	r0, [fp, #-4]
   256c0:	b	256cc <main@@Base+0x2714>
   256c4:	movw	r0, #0
   256c8:	str	r0, [fp, #-4]
   256cc:	ldr	r0, [fp, #-4]
   256d0:	mov	sp, fp
   256d4:	pop	{fp, pc}
   256d8:	push	{fp, lr}
   256dc:	mov	fp, sp
   256e0:	sub	sp, sp, #16
   256e4:	str	r0, [sp, #8]
   256e8:	ldr	r0, [sp, #8]
   256ec:	ldrb	r0, [r0, #12]
   256f0:	mov	r1, r0
   256f4:	cmp	r0, #2
   256f8:	str	r1, [sp, #4]
   256fc:	beq	25754 <main@@Base+0x279c>
   25700:	b	25704 <main@@Base+0x274c>
   25704:	ldr	r0, [sp, #4]
   25708:	cmp	r0, #8
   2570c:	beq	2576c <main@@Base+0x27b4>
   25710:	b	25714 <main@@Base+0x275c>
   25714:	ldr	r0, [sp, #4]
   25718:	cmp	r0, #9
   2571c:	beq	25788 <main@@Base+0x27d0>
   25720:	b	25724 <main@@Base+0x276c>
   25724:	ldr	r0, [sp, #4]
   25728:	cmp	r0, #10
   2572c:	beq	257a4 <main@@Base+0x27ec>
   25730:	b	25734 <main@@Base+0x277c>
   25734:	ldr	r0, [sp, #4]
   25738:	cmp	r0, #11
   2573c:	beq	257c0 <main@@Base+0x2808>
   25740:	b	25744 <main@@Base+0x278c>
   25744:	ldr	r0, [sp, #4]
   25748:	cmp	r0, #255	; 0xff
   2574c:	beq	257d0 <main@@Base+0x2818>
   25750:	b	257e0 <main@@Base+0x2828>
   25754:	ldr	r0, [pc, #152]	; 257f4 <main@@Base+0x283c>
   25758:	add	r1, pc, r0
   2575c:	ldr	r0, [sp, #8]
   25760:	bl	300b0 <flatcc_verify_union_table@@Base>
   25764:	str	r0, [fp, #-4]
   25768:	b	257e8 <main@@Base+0x2830>
   2576c:	ldr	r0, [sp, #8]
   25770:	movw	r1, #2
   25774:	movw	r2, #2
   25778:	uxth	r2, r2
   2577c:	bl	30104 <flatcc_verify_union_struct@@Base>
   25780:	str	r0, [fp, #-4]
   25784:	b	257e8 <main@@Base+0x2830>
   25788:	ldr	r0, [sp, #8]
   2578c:	movw	r1, #4
   25790:	movw	r2, #4
   25794:	uxth	r2, r2
   25798:	bl	30104 <flatcc_verify_union_struct@@Base>
   2579c:	str	r0, [fp, #-4]
   257a0:	b	257e8 <main@@Base+0x2830>
   257a4:	ldr	r0, [sp, #8]
   257a8:	movw	r1, #4
   257ac:	movw	r2, #4
   257b0:	uxth	r2, r2
   257b4:	bl	30104 <flatcc_verify_union_struct@@Base>
   257b8:	str	r0, [fp, #-4]
   257bc:	b	257e8 <main@@Base+0x2830>
   257c0:	ldr	r0, [sp, #8]
   257c4:	bl	3028c <flatcc_verify_union_string@@Base>
   257c8:	str	r0, [fp, #-4]
   257cc:	b	257e8 <main@@Base+0x2830>
   257d0:	ldr	r0, [sp, #8]
   257d4:	bl	3028c <flatcc_verify_union_string@@Base>
   257d8:	str	r0, [fp, #-4]
   257dc:	b	257e8 <main@@Base+0x2830>
   257e0:	movw	r0, #0
   257e4:	str	r0, [fp, #-4]
   257e8:	ldr	r0, [fp, #-4]
   257ec:	mov	sp, fp
   257f0:	pop	{fp, pc}
   257f4:	muleq	r0, r8, r0
   257f8:	push	{fp, lr}
   257fc:	mov	fp, sp
   25800:	sub	sp, sp, #16
   25804:	str	r0, [sp, #8]
   25808:	ldr	r0, [sp, #8]
   2580c:	movw	r1, #0
   25810:	uxth	r1, r1
   25814:	movw	r2, #4
   25818:	movw	r3, #4
   2581c:	uxth	r3, r3
   25820:	bl	2ef70 <flatcc_verify_field@@Base>
   25824:	str	r0, [sp, #4]
   25828:	cmp	r0, #0
   2582c:	beq	2583c <main@@Base+0x2884>
   25830:	ldr	r0, [sp, #4]
   25834:	str	r0, [fp, #-4]
   25838:	b	25844 <main@@Base+0x288c>
   2583c:	movw	r0, #0
   25840:	str	r0, [fp, #-4]
   25844:	ldr	r0, [fp, #-4]
   25848:	mov	sp, fp
   2584c:	pop	{fp, pc}
   25850:	push	{fp, lr}
   25854:	mov	fp, sp
   25858:	sub	sp, sp, #8
   2585c:	str	r0, [sp, #4]
   25860:	ldr	r0, [sp, #4]
   25864:	ldr	r0, [r0]
   25868:	bl	25874 <main@@Base+0x28bc>
   2586c:	mov	sp, fp
   25870:	pop	{fp, pc}
   25874:	sub	sp, sp, #4
   25878:	str	r0, [sp]
   2587c:	ldr	r0, [sp]
   25880:	add	sp, sp, #4
   25884:	bx	lr
   25888:	movw	r0, #0
   2588c:	bx	lr
   25890:	push	{fp, lr}
   25894:	mov	fp, sp
   25898:	sub	sp, sp, #16
   2589c:	str	r0, [sp, #8]
   258a0:	str	r1, [sp, #4]
   258a4:	ldr	r0, [sp, #8]
   258a8:	bl	258ec <main@@Base+0x2934>
   258ac:	cmp	r0, #0
   258b0:	bne	258c8 <main@@Base+0x2910>
   258b4:	ldr	r0, [sp, #8]
   258b8:	ldr	r1, [sp, #4]
   258bc:	bl	25910 <main@@Base+0x2958>
   258c0:	cmp	r0, #0
   258c4:	beq	258d4 <main@@Base+0x291c>
   258c8:	movw	r0, #0
   258cc:	str	r0, [fp, #-4]
   258d0:	b	258e0 <main@@Base+0x2928>
   258d4:	ldr	r0, [sp, #8]
   258d8:	bl	2596c <main@@Base+0x29b4>
   258dc:	str	r0, [fp, #-4]
   258e0:	ldr	r0, [fp, #-4]
   258e4:	mov	sp, fp
   258e8:	pop	{fp, pc}
   258ec:	push	{fp, lr}
   258f0:	mov	fp, sp
   258f4:	sub	sp, sp, #8
   258f8:	str	r0, [sp, #4]
   258fc:	ldr	r0, [sp, #4]
   25900:	movw	r1, #1
   25904:	bl	2acb8 <flatcc_builder_start_table@@Base>
   25908:	mov	sp, fp
   2590c:	pop	{fp, pc}
   25910:	push	{fp, lr}
   25914:	mov	fp, sp
   25918:	sub	sp, sp, #16
   2591c:	str	r0, [sp, #8]
   25920:	str	r1, [sp, #4]
   25924:	ldr	r0, [sp, #8]
   25928:	bl	259dc <main@@Base+0x2a24>
   2592c:	str	r0, [sp]
   25930:	ldr	r0, [sp]
   25934:	movw	r1, #0
   25938:	cmp	r0, r1
   2593c:	bne	2594c <main@@Base+0x2994>
   25940:	mvn	r0, #0
   25944:	str	r0, [fp, #-4]
   25948:	b	25960 <main@@Base+0x29a8>
   2594c:	ldr	r0, [sp]
   25950:	ldr	r1, [sp, #4]
   25954:	bl	25a10 <main@@Base+0x2a58>
   25958:	movw	r1, #0
   2595c:	str	r1, [fp, #-4]
   25960:	ldr	r0, [fp, #-4]
   25964:	mov	sp, fp
   25968:	pop	{fp, pc}
   2596c:	push	{fp, lr}
   25970:	mov	fp, sp
   25974:	sub	sp, sp, #8
   25978:	ldr	r1, [pc, #76]	; 259cc <main@@Base+0x2a14>
   2597c:	add	r1, pc, r1
   25980:	str	r0, [sp, #4]
   25984:	ldr	r0, [sp, #4]
   25988:	movw	r2, #0
   2598c:	bl	2b830 <flatcc_builder_check_required@@Base>
   25990:	cmp	r0, #0
   25994:	beq	2599c <main@@Base+0x29e4>
   25998:	b	259bc <main@@Base+0x2a04>
   2599c:	ldr	r0, [pc, #44]	; 259d0 <main@@Base+0x2a18>
   259a0:	add	r0, pc, r0
   259a4:	ldr	r1, [pc, #40]	; 259d4 <main@@Base+0x2a1c>
   259a8:	add	r1, pc, r1
   259ac:	ldr	r2, [pc, #36]	; 259d8 <main@@Base+0x2a20>
   259b0:	add	r3, pc, r2
   259b4:	movw	r2, #215	; 0xd7
   259b8:	bl	12e68 <__assert_fail@plt>
   259bc:	ldr	r0, [sp, #4]
   259c0:	bl	2b920 <flatcc_builder_end_table@@Base>
   259c4:	mov	sp, fp
   259c8:	pop	{fp, pc}
   259cc:	andeq	r0, r1, r4, lsl #16
   259d0:	andeq	lr, r0, r8, lsl #28
   259d4:			; <UNDEFINED> instruction: 0x0000e8bf
   259d8:			; <UNDEFINED> instruction: 0x0000eeb5
   259dc:	push	{fp, lr}
   259e0:	mov	fp, sp
   259e4:	sub	sp, sp, #8
   259e8:	str	r0, [sp, #4]
   259ec:	ldr	r0, [sp, #4]
   259f0:	movw	r1, #0
   259f4:	str	r1, [sp]
   259f8:	ldr	r2, [sp]
   259fc:	movw	r3, #1
   25a00:	uxth	r3, r3
   25a04:	bl	2c55c <flatcc_builder_table_add@@Base>
   25a08:	mov	sp, fp
   25a0c:	pop	{fp, pc}
   25a10:	sub	sp, sp, #8
   25a14:	str	r0, [sp, #4]
   25a18:	str	r1, [sp]
   25a1c:	ldr	r0, [sp, #4]
   25a20:	add	sp, sp, #8
   25a24:	bx	lr
   25a28:	push	{fp, lr}
   25a2c:	mov	fp, sp
   25a30:	sub	sp, sp, #16
   25a34:	str	r0, [sp, #8]
   25a38:	ldr	r0, [sp, #8]
   25a3c:	movw	r1, #0
   25a40:	uxth	r1, r1
   25a44:	movw	r2, #0
   25a48:	movw	r3, #1
   25a4c:	uxth	r3, r3
   25a50:	bl	2ef70 <flatcc_verify_field@@Base>
   25a54:	str	r0, [sp, #4]
   25a58:	cmp	r0, #0
   25a5c:	beq	25a6c <main@@Base+0x2ab4>
   25a60:	ldr	r0, [sp, #4]
   25a64:	str	r0, [fp, #-4]
   25a68:	b	25a74 <main@@Base+0x2abc>
   25a6c:	movw	r0, #0
   25a70:	str	r0, [fp, #-4]
   25a74:	ldr	r0, [fp, #-4]
   25a78:	mov	sp, fp
   25a7c:	pop	{fp, pc}
   25a80:	sub	sp, sp, #4
   25a84:	str	r0, [sp]
   25a88:	ldr	r0, [sp]
   25a8c:	add	sp, sp, #4
   25a90:	bx	lr
   25a94:	movw	r0, #32
   25a98:	bx	lr
   25a9c:	push	{fp, lr}
   25aa0:	mov	fp, sp
   25aa4:	sub	sp, sp, #8
   25aa8:	str	r0, [sp, #4]
   25aac:	str	r1, [sp]
   25ab0:	ldr	r0, [sp]
   25ab4:	vldr	s0, [r0]
   25ab8:	bl	244e8 <main@@Base+0x1530>
   25abc:	ldr	r0, [sp, #4]
   25ac0:	vstr	s0, [r0]
   25ac4:	ldr	r0, [sp, #4]
   25ac8:	mov	sp, fp
   25acc:	pop	{fp, pc}
   25ad0:	push	{fp, lr}
   25ad4:	mov	fp, sp
   25ad8:	sub	sp, sp, #8
   25adc:	str	r0, [sp, #4]
   25ae0:	str	r1, [sp]
   25ae4:	ldr	r0, [sp]
   25ae8:	vldr	d0, [r0]
   25aec:	bl	24530 <main@@Base+0x1578>
   25af0:	ldr	r0, [sp, #4]
   25af4:	vstr	d0, [r0]
   25af8:	ldr	r0, [sp, #4]
   25afc:	mov	sp, fp
   25b00:	pop	{fp, pc}
   25b04:	push	{fp, lr}
   25b08:	mov	fp, sp
   25b0c:	sub	sp, sp, #16
   25b10:	str	r0, [fp, #-4]
   25b14:	str	r1, [sp, #8]
   25b18:	ldr	r0, [fp, #-4]
   25b1c:	ldr	r1, [sp, #8]
   25b20:	bl	25b48 <main@@Base+0x2b90>
   25b24:	ldr	r1, [sp, #8]
   25b28:	ldrb	r1, [r1, #2]
   25b2c:	ldr	r2, [fp, #-4]
   25b30:	strb	r1, [r2, #2]
   25b34:	ldr	r1, [fp, #-4]
   25b38:	str	r0, [sp, #4]
   25b3c:	mov	r0, r1
   25b40:	mov	sp, fp
   25b44:	pop	{fp, pc}
   25b48:	push	{fp, lr}
   25b4c:	mov	fp, sp
   25b50:	sub	sp, sp, #8
   25b54:	str	r0, [sp, #4]
   25b58:	str	r1, [sp]
   25b5c:	ldr	r0, [sp]
   25b60:	ldrsh	r0, [r0]
   25b64:	bl	234e8 <main@@Base+0x530>
   25b68:	ldr	r1, [sp, #4]
   25b6c:	strh	r0, [r1]
   25b70:	ldr	r0, [sp, #4]
   25b74:	mov	sp, fp
   25b78:	pop	{fp, pc}
   25b7c:	push	{fp, lr}
   25b80:	mov	fp, sp
   25b84:	sub	sp, sp, #8
   25b88:	str	r0, [sp, #4]
   25b8c:	ldr	r0, [sp, #4]
   25b90:	ldrsb	r0, [r0]
   25b94:	bl	25ba4 <main@@Base+0x2bec>
   25b98:	sxtb	r0, r0
   25b9c:	mov	sp, fp
   25ba0:	pop	{fp, pc}
   25ba4:	sub	sp, sp, #4
   25ba8:	strb	r0, [sp, #3]
   25bac:	ldrsb	r0, [sp, #3]
   25bb0:	add	sp, sp, #4
   25bb4:	bx	lr
   25bb8:	push	{fp, lr}
   25bbc:	mov	fp, sp
   25bc0:	sub	sp, sp, #8
   25bc4:	str	r0, [sp, #4]
   25bc8:	ldr	r0, [sp, #4]
   25bcc:	movw	r1, #0
   25bd0:	cmp	r0, r1
   25bd4:	beq	25bf0 <main@@Base+0x2c38>
   25bd8:	ldr	r0, [sp, #4]
   25bdc:	mvn	r1, #3
   25be0:	add	r0, r0, r1
   25be4:	bl	23414 <main@@Base+0x45c>
   25be8:	str	r0, [sp]
   25bec:	b	25bfc <main@@Base+0x2c44>
   25bf0:	movw	r0, #0
   25bf4:	str	r0, [sp]
   25bf8:	b	25bfc <main@@Base+0x2c44>
   25bfc:	ldr	r0, [sp]
   25c00:	mov	sp, fp
   25c04:	pop	{fp, pc}
   25c08:	push	{fp, lr}
   25c0c:	mov	fp, sp
   25c10:	sub	sp, sp, #8
   25c14:	str	r0, [sp, #4]
   25c18:	ldr	r0, [sp, #4]
   25c1c:	ldrb	r0, [r0]
   25c20:	bl	25c30 <main@@Base+0x2c78>
   25c24:	and	r0, r0, #255	; 0xff
   25c28:	mov	sp, fp
   25c2c:	pop	{fp, pc}
   25c30:	sub	sp, sp, #4
   25c34:	strb	r0, [sp, #3]
   25c38:	ldrb	r0, [sp, #3]
   25c3c:	add	sp, sp, #4
   25c40:	bx	lr
   25c44:	push	{fp, lr}
   25c48:	mov	fp, sp
   25c4c:	sub	sp, sp, #8
   25c50:	str	r0, [sp, #4]
   25c54:	ldr	r0, [sp, #4]
   25c58:	ldrb	r0, [r0]
   25c5c:	bl	25c6c <main@@Base+0x2cb4>
   25c60:	and	r0, r0, #255	; 0xff
   25c64:	mov	sp, fp
   25c68:	pop	{fp, pc}
   25c6c:	sub	sp, sp, #4
   25c70:	strb	r0, [sp, #3]
   25c74:	ldrb	r0, [sp, #3]
   25c78:	add	sp, sp, #4
   25c7c:	bx	lr
   25c80:	push	{fp, lr}
   25c84:	mov	fp, sp
   25c88:	sub	sp, sp, #8
   25c8c:	str	r0, [sp, #4]
   25c90:	str	r1, [sp]
   25c94:	ldr	r0, [sp, #4]
   25c98:	ldr	r1, [sp]
   25c9c:	movw	r2, #0
   25ca0:	uxth	r2, r2
   25ca4:	movw	r3, #2
   25ca8:	bl	29590 <flatcc_builder_start_buffer@@Base>
   25cac:	mov	sp, fp
   25cb0:	pop	{fp, pc}
   25cb4:	push	{fp, lr}
   25cb8:	mov	fp, sp
   25cbc:	sub	sp, sp, #8
   25cc0:	str	r0, [sp, #4]
   25cc4:	strb	r1, [sp, #3]
   25cc8:	ldrsb	r0, [sp, #3]
   25ccc:	bl	25ce4 <main@@Base+0x2d2c>
   25cd0:	ldr	r1, [sp, #4]
   25cd4:	strb	r0, [r1]
   25cd8:	ldr	r0, [sp, #4]
   25cdc:	mov	sp, fp
   25ce0:	pop	{fp, pc}
   25ce4:	sub	sp, sp, #4
   25ce8:	strb	r0, [sp, #3]
   25cec:	ldrsb	r0, [sp, #3]
   25cf0:	add	sp, sp, #4
   25cf4:	bx	lr
   25cf8:	push	{fp, lr}
   25cfc:	mov	fp, sp
   25d00:	sub	sp, sp, #16
   25d04:	str	r0, [fp, #-4]
   25d08:	str	r1, [sp, #8]
   25d0c:	ldr	r0, [sp, #8]
   25d10:	cmp	r0, #0
   25d14:	beq	25d4c <main@@Base+0x2d94>
   25d18:	ldr	r0, [fp, #-4]
   25d1c:	movw	r1, #5
   25d20:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   25d24:	str	r0, [sp, #4]
   25d28:	movw	r1, #0
   25d2c:	cmp	r0, r1
   25d30:	beq	25d4c <main@@Base+0x2d94>
   25d34:	ldr	r0, [sp, #8]
   25d38:	ldr	r1, [sp, #4]
   25d3c:	str	r0, [r1]
   25d40:	movw	r0, #0
   25d44:	str	r0, [sp]
   25d48:	b	25d58 <main@@Base+0x2da0>
   25d4c:	mvn	r0, #0
   25d50:	str	r0, [sp]
   25d54:	b	25d58 <main@@Base+0x2da0>
   25d58:	ldr	r0, [sp]
   25d5c:	mov	sp, fp
   25d60:	pop	{fp, pc}
   25d64:	push	{fp, lr}
   25d68:	mov	fp, sp
   25d6c:	sub	sp, sp, #8
   25d70:	ldr	r3, [pc, #28]	; 25d94 <main@@Base+0x2ddc>
   25d74:	str	r0, [sp, #4]
   25d78:	ldr	r0, [sp, #4]
   25d7c:	movw	r1, #4
   25d80:	movw	r2, #2
   25d84:	uxth	r2, r2
   25d88:	bl	2a844 <flatcc_builder_start_vector@@Base>
   25d8c:	mov	sp, fp
   25d90:	pop	{fp, pc}
   25d94:	svccc	0x00ffffff
   25d98:	sub	sp, sp, #8
   25d9c:	str	r0, [sp, #4]
   25da0:	strh	r1, [sp, #2]
   25da4:	strb	r2, [sp, #1]
   25da8:	ldrh	r0, [sp, #2]
   25dac:	ldr	r1, [sp, #4]
   25db0:	strh	r0, [r1]
   25db4:	ldrb	r0, [sp, #1]
   25db8:	ldr	r1, [sp, #4]
   25dbc:	strb	r0, [r1, #2]
   25dc0:	ldr	r0, [sp, #4]
   25dc4:	add	sp, sp, #8
   25dc8:	bx	lr
   25dcc:	movw	r0, #4
   25dd0:	bx	lr
   25dd4:	push	{fp, lr}
   25dd8:	mov	fp, sp
   25ddc:	sub	sp, sp, #16
   25de0:	str	r0, [fp, #-4]
   25de4:	str	r1, [sp, #8]
   25de8:	ldr	r0, [sp, #8]
   25dec:	cmp	r0, #0
   25df0:	beq	25e28 <main@@Base+0x2e70>
   25df4:	ldr	r0, [fp, #-4]
   25df8:	movw	r1, #9
   25dfc:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   25e00:	str	r0, [sp, #4]
   25e04:	movw	r1, #0
   25e08:	cmp	r0, r1
   25e0c:	beq	25e28 <main@@Base+0x2e70>
   25e10:	ldr	r0, [sp, #8]
   25e14:	ldr	r1, [sp, #4]
   25e18:	str	r0, [r1]
   25e1c:	movw	r0, #0
   25e20:	str	r0, [sp]
   25e24:	b	25e34 <main@@Base+0x2e7c>
   25e28:	mvn	r0, #0
   25e2c:	str	r0, [sp]
   25e30:	b	25e34 <main@@Base+0x2e7c>
   25e34:	ldr	r0, [sp]
   25e38:	mov	sp, fp
   25e3c:	pop	{fp, pc}
   25e40:	push	{fp, lr}
   25e44:	mov	fp, sp
   25e48:	sub	sp, sp, #8
   25e4c:	str	r0, [sp, #4]
   25e50:	ldr	r0, [sp, #4]
   25e54:	bl	2bd24 <flatcc_builder_end_vector@@Base>
   25e58:	mov	sp, fp
   25e5c:	pop	{fp, pc}
   25e60:	push	{fp, lr}
   25e64:	mov	fp, sp
   25e68:	sub	sp, sp, #16
   25e6c:	str	r0, [fp, #-4]
   25e70:	str	r1, [sp, #8]
   25e74:	ldr	r0, [sp, #8]
   25e78:	cmp	r0, #0
   25e7c:	beq	25e94 <main@@Base+0x2edc>
   25e80:	ldr	r0, [fp, #-4]
   25e84:	ldr	r1, [sp, #8]
   25e88:	bl	2a114 <flatcc_builder_offset_vector_push@@Base>
   25e8c:	str	r0, [sp, #4]
   25e90:	b	25ea0 <main@@Base+0x2ee8>
   25e94:	movw	r0, #0
   25e98:	str	r0, [sp, #4]
   25e9c:	b	25ea0 <main@@Base+0x2ee8>
   25ea0:	ldr	r0, [sp, #4]
   25ea4:	mov	sp, fp
   25ea8:	pop	{fp, pc}
   25eac:	push	{fp, lr}
   25eb0:	mov	fp, sp
   25eb4:	sub	sp, sp, #16
   25eb8:	str	r0, [fp, #-4]
   25ebc:	str	r1, [sp, #8]
   25ec0:	ldr	r0, [sp, #8]
   25ec4:	cmp	r0, #0
   25ec8:	beq	25f00 <main@@Base+0x2f48>
   25ecc:	ldr	r0, [fp, #-4]
   25ed0:	movw	r1, #11
   25ed4:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   25ed8:	str	r0, [sp, #4]
   25edc:	movw	r1, #0
   25ee0:	cmp	r0, r1
   25ee4:	beq	25f00 <main@@Base+0x2f48>
   25ee8:	ldr	r0, [sp, #8]
   25eec:	ldr	r1, [sp, #4]
   25ef0:	str	r0, [r1]
   25ef4:	movw	r0, #0
   25ef8:	str	r0, [sp]
   25efc:	b	25f0c <main@@Base+0x2f54>
   25f00:	mvn	r0, #0
   25f04:	str	r0, [sp]
   25f08:	b	25f0c <main@@Base+0x2f54>
   25f0c:	ldr	r0, [sp]
   25f10:	mov	sp, fp
   25f14:	pop	{fp, pc}
   25f18:	push	{fp, lr}
   25f1c:	mov	fp, sp
   25f20:	sub	sp, sp, #16
   25f24:	str	r0, [fp, #-4]
   25f28:	str	r1, [sp, #8]
   25f2c:	ldr	r0, [sp, #8]
   25f30:	cmp	r0, #0
   25f34:	beq	25f6c <main@@Base+0x2fb4>
   25f38:	ldr	r0, [fp, #-4]
   25f3c:	movw	r1, #10
   25f40:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   25f44:	str	r0, [sp, #4]
   25f48:	movw	r1, #0
   25f4c:	cmp	r0, r1
   25f50:	beq	25f6c <main@@Base+0x2fb4>
   25f54:	ldr	r0, [sp, #8]
   25f58:	ldr	r1, [sp, #4]
   25f5c:	str	r0, [r1]
   25f60:	movw	r0, #0
   25f64:	str	r0, [sp]
   25f68:	b	25f78 <main@@Base+0x2fc0>
   25f6c:	mvn	r0, #0
   25f70:	str	r0, [sp]
   25f74:	b	25f78 <main@@Base+0x2fc0>
   25f78:	ldr	r0, [sp]
   25f7c:	mov	sp, fp
   25f80:	pop	{fp, pc}
   25f84:	push	{fp, lr}
   25f88:	mov	fp, sp
   25f8c:	sub	sp, sp, #8
   25f90:	str	r0, [sp, #4]
   25f94:	ldr	r0, [sp, #4]
   25f98:	movw	r1, #1
   25f9c:	movw	r2, #1
   25fa0:	uxth	r2, r2
   25fa4:	mvn	r3, #0
   25fa8:	bl	2a844 <flatcc_builder_start_vector@@Base>
   25fac:	mov	sp, fp
   25fb0:	pop	{fp, pc}
   25fb4:	push	{fp, lr}
   25fb8:	mov	fp, sp
   25fbc:	sub	sp, sp, #16
   25fc0:	str	r0, [fp, #-4]
   25fc4:	str	r1, [sp, #8]
   25fc8:	ldr	r0, [sp, #8]
   25fcc:	cmp	r0, #0
   25fd0:	beq	26008 <main@@Base+0x3050>
   25fd4:	ldr	r0, [fp, #-4]
   25fd8:	movw	r1, #24
   25fdc:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   25fe0:	str	r0, [sp, #4]
   25fe4:	movw	r1, #0
   25fe8:	cmp	r0, r1
   25fec:	beq	26008 <main@@Base+0x3050>
   25ff0:	ldr	r0, [sp, #8]
   25ff4:	ldr	r1, [sp, #4]
   25ff8:	str	r0, [r1]
   25ffc:	movw	r0, #0
   26000:	str	r0, [sp]
   26004:	b	26014 <main@@Base+0x305c>
   26008:	mvn	r0, #0
   2600c:	str	r0, [sp]
   26010:	b	26014 <main@@Base+0x305c>
   26014:	ldr	r0, [sp]
   26018:	mov	sp, fp
   2601c:	pop	{fp, pc}
   26020:	push	{fp, lr}
   26024:	mov	fp, sp
   26028:	sub	sp, sp, #8
   2602c:	str	r0, [sp, #4]
   26030:	ldr	r0, [sp, #4]
   26034:	bl	2bd24 <flatcc_builder_end_vector@@Base>
   26038:	mov	sp, fp
   2603c:	pop	{fp, pc}
   26040:	push	{fp, lr}
   26044:	mov	fp, sp
   26048:	sub	sp, sp, #16
   2604c:	str	r0, [fp, #-4]
   26050:	str	r1, [sp, #8]
   26054:	ldr	r0, [sp, #8]
   26058:	cmp	r0, #0
   2605c:	beq	26074 <main@@Base+0x30bc>
   26060:	ldr	r0, [fp, #-4]
   26064:	ldr	r1, [sp, #8]
   26068:	bl	2a114 <flatcc_builder_offset_vector_push@@Base>
   2606c:	str	r0, [sp, #4]
   26070:	b	26080 <main@@Base+0x30c8>
   26074:	movw	r0, #0
   26078:	str	r0, [sp, #4]
   2607c:	b	26080 <main@@Base+0x30c8>
   26080:	ldr	r0, [sp, #4]
   26084:	mov	sp, fp
   26088:	pop	{fp, pc}
   2608c:	push	{fp, lr}
   26090:	mov	fp, sp
   26094:	sub	sp, sp, #8
   26098:	str	r0, [sp, #4]
   2609c:	strb	r1, [sp, #3]
   260a0:	ldrb	r0, [sp, #3]
   260a4:	bl	260bc <main@@Base+0x3104>
   260a8:	ldr	r1, [sp, #4]
   260ac:	strb	r0, [r1]
   260b0:	ldr	r0, [sp, #4]
   260b4:	mov	sp, fp
   260b8:	pop	{fp, pc}
   260bc:	sub	sp, sp, #4
   260c0:	strb	r0, [sp, #3]
   260c4:	ldrb	r0, [sp, #3]
   260c8:	add	sp, sp, #4
   260cc:	bx	lr
   260d0:	push	{fp, lr}
   260d4:	mov	fp, sp
   260d8:	sub	sp, sp, #8
   260dc:	str	r0, [sp, #4]
   260e0:	ldr	r0, [sp, #4]
   260e4:	movw	r1, #3
   260e8:	bl	2acb8 <flatcc_builder_start_table@@Base>
   260ec:	mov	sp, fp
   260f0:	pop	{fp, pc}
   260f4:	push	{fp, lr}
   260f8:	mov	fp, sp
   260fc:	sub	sp, sp, #16
   26100:	str	r0, [fp, #-4]
   26104:	str	r1, [sp, #8]
   26108:	ldr	r0, [sp, #8]
   2610c:	cmp	r0, #0
   26110:	beq	26148 <main@@Base+0x3190>
   26114:	ldr	r0, [fp, #-4]
   26118:	movw	r1, #14
   2611c:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   26120:	str	r0, [sp, #4]
   26124:	movw	r1, #0
   26128:	cmp	r0, r1
   2612c:	beq	26148 <main@@Base+0x3190>
   26130:	ldr	r0, [sp, #8]
   26134:	ldr	r1, [sp, #4]
   26138:	str	r0, [r1]
   2613c:	movw	r0, #0
   26140:	str	r0, [sp]
   26144:	b	26154 <main@@Base+0x319c>
   26148:	mvn	r0, #0
   2614c:	str	r0, [sp]
   26150:	b	26154 <main@@Base+0x319c>
   26154:	ldr	r0, [sp]
   26158:	mov	sp, fp
   2615c:	pop	{fp, pc}
   26160:	push	{fp, lr}
   26164:	mov	fp, sp
   26168:	sub	sp, sp, #8
   2616c:	ldr	r1, [pc, #76]	; 261c0 <main@@Base+0x3208>
   26170:	add	r1, pc, r1
   26174:	str	r0, [sp, #4]
   26178:	ldr	r0, [sp, #4]
   2617c:	movw	r2, #0
   26180:	bl	2b830 <flatcc_builder_check_required@@Base>
   26184:	cmp	r0, #0
   26188:	beq	26190 <main@@Base+0x31d8>
   2618c:	b	261b0 <main@@Base+0x31f8>
   26190:	ldr	r0, [pc, #44]	; 261c4 <main@@Base+0x320c>
   26194:	add	r0, pc, r0
   26198:	ldr	r1, [pc, #40]	; 261c8 <main@@Base+0x3210>
   2619c:	add	r1, pc, r1
   261a0:	ldr	r2, [pc, #36]	; 261cc <main@@Base+0x3214>
   261a4:	add	r3, pc, r2
   261a8:	movw	r2, #221	; 0xdd
   261ac:	bl	12e68 <__assert_fail@plt>
   261b0:	ldr	r0, [sp, #4]
   261b4:	bl	2b920 <flatcc_builder_end_table@@Base>
   261b8:	mov	sp, fp
   261bc:	pop	{fp, pc}
   261c0:	andeq	r0, r1, r2, lsl r0
   261c4:	andeq	pc, r0, r7
   261c8:	andeq	lr, r0, fp, asr #1
   261cc:	muleq	r0, r0, r0
   261d0:	push	{fp, lr}
   261d4:	mov	fp, sp
   261d8:	sub	sp, sp, #32
   261dc:	str	r0, [fp, #-4]
   261e0:	ldr	r0, [fp, #-4]
   261e4:	bl	1769c <verify_monster@@Base+0x1cd0>
   261e8:	str	r0, [sp, #16]
   261ec:	ldr	r0, [sp, #16]
   261f0:	cmp	r0, #0
   261f4:	bne	261fc <main@@Base+0x3244>
   261f8:	b	262d8 <main@@Base+0x3320>
   261fc:	ldr	r0, [sp, #16]
   26200:	sub	r0, r0, #1
   26204:	str	r0, [fp, #-12]
   26208:	ldr	r0, [sp, #16]
   2620c:	lsr	r0, r0, #1
   26210:	str	r0, [fp, #-8]
   26214:	ldr	r0, [fp, #-4]
   26218:	ldr	r1, [fp, #-8]
   2621c:	ldr	r2, [fp, #-12]
   26220:	bl	262e0 <main@@Base+0x3328>
   26224:	ldr	r0, [fp, #-8]
   26228:	mvn	r1, #0
   2622c:	add	r1, r0, r1
   26230:	str	r1, [fp, #-8]
   26234:	cmp	r0, #0
   26238:	bne	26214 <main@@Base+0x325c>
   2623c:	b	26240 <main@@Base+0x3288>
   26240:	ldr	r0, [fp, #-12]
   26244:	cmp	r0, #0
   26248:	bls	262d8 <main@@Base+0x3320>
   2624c:	ldr	r0, [fp, #-12]
   26250:	rsb	r0, r0, #0
   26254:	lsl	r0, r0, #2
   26258:	str	r0, [sp, #4]
   2625c:	ldr	r0, [fp, #-4]
   26260:	ldr	r1, [fp, #-12]
   26264:	add	r0, r0, r1, lsl #2
   26268:	bl	23414 <main@@Base+0x45c>
   2626c:	ldr	r1, [sp, #4]
   26270:	sub	r0, r0, r1
   26274:	str	r0, [sp, #12]
   26278:	ldr	r0, [fp, #-4]
   2627c:	bl	23414 <main@@Base+0x45c>
   26280:	ldr	r1, [sp, #4]
   26284:	add	r0, r0, r1
   26288:	str	r0, [sp, #8]
   2628c:	ldr	r0, [fp, #-4]
   26290:	ldr	r1, [sp, #12]
   26294:	bl	2649c <main@@Base+0x34e4>
   26298:	ldr	r0, [fp, #-4]
   2629c:	ldr	r1, [fp, #-12]
   262a0:	add	r0, r0, r1, lsl #2
   262a4:	ldr	r1, [sp, #8]
   262a8:	bl	2649c <main@@Base+0x34e4>
   262ac:	ldr	r0, [fp, #-4]
   262b0:	ldr	r1, [fp, #-12]
   262b4:	mvn	r2, #0
   262b8:	add	r1, r1, r2
   262bc:	str	r1, [fp, #-12]
   262c0:	movw	r2, #0
   262c4:	str	r1, [sp]
   262c8:	mov	r1, r2
   262cc:	ldr	r2, [sp]
   262d0:	bl	262e0 <main@@Base+0x3328>
   262d4:	b	26240 <main@@Base+0x3288>
   262d8:	mov	sp, fp
   262dc:	pop	{fp, pc}
   262e0:	push	{fp, lr}
   262e4:	mov	fp, sp
   262e8:	sub	sp, sp, #72	; 0x48
   262ec:	str	r0, [fp, #-4]
   262f0:	str	r1, [fp, #-8]
   262f4:	str	r2, [fp, #-12]
   262f8:	ldr	r0, [fp, #-8]
   262fc:	str	r0, [fp, #-20]	; 0xffffffec
   26300:	ldr	r0, [fp, #-20]	; 0xffffffec
   26304:	lsl	r0, r0, #1
   26308:	ldr	r1, [fp, #-12]
   2630c:	cmp	r0, r1
   26310:	bhi	26494 <main@@Base+0x34dc>
   26314:	ldr	r0, [fp, #-20]	; 0xffffffec
   26318:	lsl	r0, r0, #1
   2631c:	str	r0, [fp, #-16]
   26320:	ldr	r0, [fp, #-16]
   26324:	ldr	r1, [fp, #-12]
   26328:	cmp	r0, r1
   2632c:	bcs	263a8 <main@@Base+0x33f0>
   26330:	ldr	r0, [fp, #-4]
   26334:	ldr	r1, [fp, #-16]
   26338:	bl	176ec <verify_monster@@Base+0x1d20>
   2633c:	bl	16bcc <verify_monster@@Base+0x1200>
   26340:	str	r0, [fp, #-24]	; 0xffffffe8
   26344:	ldr	r0, [fp, #-4]
   26348:	ldr	r1, [fp, #-16]
   2634c:	add	r1, r1, #1
   26350:	bl	176ec <verify_monster@@Base+0x1d20>
   26354:	bl	16bcc <verify_monster@@Base+0x1200>
   26358:	str	r0, [fp, #-28]	; 0xffffffe4
   2635c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   26360:	ldr	r1, [fp, #-28]	; 0xffffffe4
   26364:	ldr	r2, [fp, #-28]	; 0xffffffe4
   26368:	str	r0, [sp, #24]
   2636c:	mov	r0, r2
   26370:	str	r1, [sp, #20]
   26374:	bl	16cec <verify_monster@@Base+0x1320>
   26378:	ldr	r1, [sp, #24]
   2637c:	str	r0, [sp, #16]
   26380:	mov	r0, r1
   26384:	ldr	r1, [sp, #20]
   26388:	ldr	r2, [sp, #16]
   2638c:	bl	264c8 <main@@Base+0x3510>
   26390:	cmp	r0, #0
   26394:	bge	263a4 <main@@Base+0x33ec>
   26398:	ldr	r0, [fp, #-16]
   2639c:	add	r0, r0, #1
   263a0:	str	r0, [fp, #-16]
   263a4:	b	263a8 <main@@Base+0x33f0>
   263a8:	ldr	r0, [fp, #-4]
   263ac:	ldr	r1, [fp, #-20]	; 0xffffffec
   263b0:	bl	176ec <verify_monster@@Base+0x1d20>
   263b4:	bl	16bcc <verify_monster@@Base+0x1200>
   263b8:	str	r0, [fp, #-32]	; 0xffffffe0
   263bc:	ldr	r0, [fp, #-4]
   263c0:	ldr	r1, [fp, #-16]
   263c4:	bl	176ec <verify_monster@@Base+0x1d20>
   263c8:	bl	16bcc <verify_monster@@Base+0x1200>
   263cc:	str	r0, [fp, #-24]	; 0xffffffe8
   263d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   263d4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   263d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   263dc:	str	r0, [sp, #12]
   263e0:	mov	r0, r2
   263e4:	str	r1, [sp, #8]
   263e8:	bl	16cec <verify_monster@@Base+0x1320>
   263ec:	ldr	r1, [sp, #12]
   263f0:	str	r0, [sp, #4]
   263f4:	mov	r0, r1
   263f8:	ldr	r1, [sp, #8]
   263fc:	ldr	r2, [sp, #4]
   26400:	bl	264c8 <main@@Base+0x3510>
   26404:	cmp	r0, #0
   26408:	bge	2648c <main@@Base+0x34d4>
   2640c:	ldr	r0, [fp, #-20]	; 0xffffffec
   26410:	ldr	r1, [fp, #-16]
   26414:	sub	r0, r0, r1
   26418:	lsl	r0, r0, #2
   2641c:	str	r0, [sp, #28]
   26420:	ldr	r0, [fp, #-4]
   26424:	ldr	r1, [fp, #-16]
   26428:	add	r0, r0, r1, lsl #2
   2642c:	bl	23414 <main@@Base+0x45c>
   26430:	ldr	r1, [sp, #28]
   26434:	sub	r0, r0, r1
   26438:	str	r0, [sp, #36]	; 0x24
   2643c:	ldr	r0, [fp, #-4]
   26440:	ldr	r1, [fp, #-20]	; 0xffffffec
   26444:	add	r0, r0, r1, lsl #2
   26448:	bl	23414 <main@@Base+0x45c>
   2644c:	ldr	r1, [sp, #28]
   26450:	add	r0, r0, r1
   26454:	str	r0, [sp, #32]
   26458:	ldr	r0, [fp, #-4]
   2645c:	ldr	r1, [fp, #-20]	; 0xffffffec
   26460:	add	r0, r0, r1, lsl #2
   26464:	ldr	r1, [sp, #36]	; 0x24
   26468:	bl	2649c <main@@Base+0x34e4>
   2646c:	ldr	r0, [fp, #-4]
   26470:	ldr	r1, [fp, #-16]
   26474:	add	r0, r0, r1, lsl #2
   26478:	ldr	r1, [sp, #32]
   2647c:	bl	2649c <main@@Base+0x34e4>
   26480:	ldr	r0, [fp, #-16]
   26484:	str	r0, [fp, #-20]	; 0xffffffec
   26488:	b	26490 <main@@Base+0x34d8>
   2648c:	b	26494 <main@@Base+0x34dc>
   26490:	b	26300 <main@@Base+0x3348>
   26494:	mov	sp, fp
   26498:	pop	{fp, pc}
   2649c:	push	{fp, lr}
   264a0:	mov	fp, sp
   264a4:	sub	sp, sp, #8
   264a8:	str	r0, [sp, #4]
   264ac:	str	r1, [sp]
   264b0:	ldr	r0, [sp]
   264b4:	bl	265a4 <main@@Base+0x35ec>
   264b8:	ldr	r1, [sp, #4]
   264bc:	str	r0, [r1]
   264c0:	mov	sp, fp
   264c4:	pop	{fp, pc}
   264c8:	push	{fp, lr}
   264cc:	mov	fp, sp
   264d0:	sub	sp, sp, #48	; 0x30
   264d4:	str	r0, [fp, #-4]
   264d8:	str	r1, [fp, #-8]
   264dc:	str	r2, [fp, #-12]
   264e0:	ldr	r0, [fp, #-4]
   264e4:	bl	16cec <verify_monster@@Base+0x1320>
   264e8:	str	r0, [fp, #-16]
   264ec:	ldr	r0, [fp, #-4]
   264f0:	ldr	r1, [fp, #-8]
   264f4:	ldr	r2, [fp, #-16]
   264f8:	ldr	r3, [fp, #-12]
   264fc:	cmp	r2, r3
   26500:	str	r0, [sp, #24]
   26504:	str	r1, [sp, #20]
   26508:	bcs	26518 <main@@Base+0x3560>
   2650c:	ldr	r0, [fp, #-16]
   26510:	str	r0, [sp, #16]
   26514:	b	26520 <main@@Base+0x3568>
   26518:	ldr	r0, [fp, #-12]
   2651c:	str	r0, [sp, #16]
   26520:	ldr	r0, [sp, #16]
   26524:	ldr	r1, [sp, #24]
   26528:	str	r0, [sp, #12]
   2652c:	mov	r0, r1
   26530:	ldr	r1, [sp, #20]
   26534:	ldr	r2, [sp, #12]
   26538:	bl	12e50 <strncmp@plt>
   2653c:	str	r0, [fp, #-20]	; 0xffffffec
   26540:	ldr	r0, [fp, #-20]	; 0xffffffec
   26544:	cmp	r0, #0
   26548:	beq	26558 <main@@Base+0x35a0>
   2654c:	ldr	r0, [fp, #-20]	; 0xffffffec
   26550:	str	r0, [sp, #8]
   26554:	b	26598 <main@@Base+0x35e0>
   26558:	ldr	r0, [fp, #-16]
   2655c:	ldr	r1, [fp, #-12]
   26560:	cmp	r0, r1
   26564:	bcs	26574 <main@@Base+0x35bc>
   26568:	mvn	r0, #0
   2656c:	str	r0, [sp, #4]
   26570:	b	26590 <main@@Base+0x35d8>
   26574:	ldr	r0, [fp, #-16]
   26578:	ldr	r1, [fp, #-12]
   2657c:	cmp	r0, r1
   26580:	movw	r0, #0
   26584:	movhi	r0, #1
   26588:	and	r0, r0, #1
   2658c:	str	r0, [sp, #4]
   26590:	ldr	r0, [sp, #4]
   26594:	str	r0, [sp, #8]
   26598:	ldr	r0, [sp, #8]
   2659c:	mov	sp, fp
   265a0:	pop	{fp, pc}
   265a4:	sub	sp, sp, #4
   265a8:	str	r0, [sp]
   265ac:	ldr	r0, [sp]
   265b0:	add	sp, sp, #4
   265b4:	bx	lr
   265b8:	push	{fp, lr}
   265bc:	mov	fp, sp
   265c0:	sub	sp, sp, #16
   265c4:	str	r0, [fp, #-4]
   265c8:	str	r1, [sp, #8]
   265cc:	str	r2, [sp, #4]
   265d0:	ldr	r0, [fp, #-4]
   265d4:	ldr	r1, [sp, #8]
   265d8:	bl	12d90 <strcmp@plt>
   265dc:	mov	sp, fp
   265e0:	pop	{fp, pc}
   265e4:	push	{fp, lr}
   265e8:	mov	fp, sp
   265ec:	sub	sp, sp, #32
   265f0:	str	r0, [fp, #-8]
   265f4:	str	r1, [fp, #-12]
   265f8:	str	r2, [sp, #16]
   265fc:	movw	r0, #0
   26600:	str	r0, [sp, #8]
   26604:	ldr	r0, [sp, #8]
   26608:	ldr	r1, [fp, #-8]
   2660c:	str	r0, [sp, #4]
   26610:	mov	r0, r1
   26614:	bl	1769c <verify_monster@@Base+0x1cd0>
   26618:	ldr	r1, [sp, #4]
   2661c:	cmp	r1, r0
   26620:	bcs	26670 <main@@Base+0x36b8>
   26624:	ldr	r0, [fp, #-8]
   26628:	ldr	r1, [sp, #8]
   2662c:	bl	176ec <verify_monster@@Base+0x1d20>
   26630:	bl	16bcc <verify_monster@@Base+0x1200>
   26634:	str	r0, [sp, #12]
   26638:	ldr	r0, [sp, #12]
   2663c:	ldr	r1, [fp, #-12]
   26640:	ldr	r2, [sp, #16]
   26644:	bl	264c8 <main@@Base+0x3510>
   26648:	cmp	r0, #0
   2664c:	bne	2665c <main@@Base+0x36a4>
   26650:	ldr	r0, [sp, #8]
   26654:	str	r0, [fp, #-4]
   26658:	b	26680 <main@@Base+0x36c8>
   2665c:	b	26660 <main@@Base+0x36a8>
   26660:	ldr	r0, [sp, #8]
   26664:	add	r0, r0, #1
   26668:	str	r0, [sp, #8]
   2666c:	b	26604 <main@@Base+0x364c>
   26670:	ldr	r0, [pc, #20]	; 2668c <main@@Base+0x36d4>
   26674:	add	r0, pc, r0
   26678:	ldr	r0, [r0]
   2667c:	str	r0, [fp, #-4]
   26680:	ldr	r0, [fp, #-4]
   26684:	mov	sp, fp
   26688:	pop	{fp, pc}
   2668c:	strdeq	r1, [r2], -r8
   26690:	push	{fp, lr}
   26694:	mov	fp, sp
   26698:	sub	sp, sp, #24
   2669c:	str	r0, [fp, #-4]
   266a0:	ldr	r0, [fp, #-4]
   266a4:	bl	170d0 <verify_monster@@Base+0x1704>
   266a8:	str	r0, [sp, #8]
   266ac:	ldr	r0, [sp, #8]
   266b0:	cmp	r0, #0
   266b4:	bne	266bc <main@@Base+0x3704>
   266b8:	b	26770 <main@@Base+0x37b8>
   266bc:	ldr	r0, [sp, #8]
   266c0:	sub	r0, r0, #1
   266c4:	str	r0, [sp, #12]
   266c8:	ldr	r0, [sp, #8]
   266cc:	lsr	r0, r0, #1
   266d0:	str	r0, [fp, #-8]
   266d4:	ldr	r0, [fp, #-4]
   266d8:	ldr	r1, [fp, #-8]
   266dc:	ldr	r2, [sp, #12]
   266e0:	bl	26778 <main@@Base+0x37c0>
   266e4:	ldr	r0, [fp, #-8]
   266e8:	mvn	r1, #0
   266ec:	add	r1, r0, r1
   266f0:	str	r1, [fp, #-8]
   266f4:	cmp	r0, #0
   266f8:	bne	266d4 <main@@Base+0x371c>
   266fc:	b	26700 <main@@Base+0x3748>
   26700:	ldr	r0, [sp, #12]
   26704:	cmp	r0, #0
   26708:	bls	26770 <main@@Base+0x37b8>
   2670c:	ldr	r0, [fp, #-4]
   26710:	ldr	r1, [sp, #12]
   26714:	add	r0, r0, r1
   26718:	ldrb	r0, [r0]
   2671c:	strb	r0, [sp, #7]
   26720:	ldr	r0, [fp, #-4]
   26724:	ldrb	r0, [r0]
   26728:	ldr	r1, [fp, #-4]
   2672c:	ldr	r2, [sp, #12]
   26730:	add	r1, r1, r2
   26734:	strb	r0, [r1]
   26738:	ldrb	r0, [sp, #7]
   2673c:	ldr	r1, [fp, #-4]
   26740:	strb	r0, [r1]
   26744:	ldr	r0, [fp, #-4]
   26748:	ldr	r1, [sp, #12]
   2674c:	mvn	r2, #0
   26750:	add	r1, r1, r2
   26754:	str	r1, [sp, #12]
   26758:	movw	r2, #0
   2675c:	str	r1, [sp]
   26760:	mov	r1, r2
   26764:	ldr	r2, [sp]
   26768:	bl	26778 <main@@Base+0x37c0>
   2676c:	b	26700 <main@@Base+0x3748>
   26770:	mov	sp, fp
   26774:	pop	{fp, pc}
   26778:	push	{fp, lr}
   2677c:	mov	fp, sp
   26780:	sub	sp, sp, #32
   26784:	str	r0, [fp, #-4]
   26788:	str	r1, [fp, #-8]
   2678c:	str	r2, [fp, #-12]
   26790:	ldr	r0, [fp, #-8]
   26794:	str	r0, [sp, #12]
   26798:	ldr	r0, [sp, #12]
   2679c:	lsl	r0, r0, #1
   267a0:	ldr	r1, [fp, #-12]
   267a4:	cmp	r0, r1
   267a8:	bhi	26900 <main@@Base+0x3948>
   267ac:	ldr	r0, [sp, #12]
   267b0:	lsl	r0, r0, #1
   267b4:	str	r0, [sp, #16]
   267b8:	ldr	r0, [sp, #16]
   267bc:	ldr	r1, [fp, #-12]
   267c0:	cmp	r0, r1
   267c4:	bcs	26840 <main@@Base+0x3888>
   267c8:	ldr	r0, [fp, #-4]
   267cc:	ldr	r1, [sp, #16]
   267d0:	bl	170f0 <verify_monster@@Base+0x1724>
   267d4:	strb	r0, [sp, #11]
   267d8:	ldr	r0, [fp, #-4]
   267dc:	ldr	r1, [sp, #16]
   267e0:	add	r1, r1, #1
   267e4:	bl	170f0 <verify_monster@@Base+0x1724>
   267e8:	strb	r0, [sp, #10]
   267ec:	ldrb	r0, [sp, #11]
   267f0:	ldrb	r1, [sp, #10]
   267f4:	cmp	r0, r1
   267f8:	bge	26808 <main@@Base+0x3850>
   267fc:	mvn	r0, #0
   26800:	str	r0, [sp, #4]
   26804:	b	26824 <main@@Base+0x386c>
   26808:	ldrb	r0, [sp, #11]
   2680c:	ldrb	r1, [sp, #10]
   26810:	cmp	r0, r1
   26814:	movw	r0, #0
   26818:	movgt	r0, #1
   2681c:	and	r0, r0, #1
   26820:	str	r0, [sp, #4]
   26824:	ldr	r0, [sp, #4]
   26828:	cmp	r0, #0
   2682c:	bge	2683c <main@@Base+0x3884>
   26830:	ldr	r0, [sp, #16]
   26834:	add	r0, r0, #1
   26838:	str	r0, [sp, #16]
   2683c:	b	26840 <main@@Base+0x3888>
   26840:	ldr	r0, [fp, #-4]
   26844:	ldr	r1, [sp, #12]
   26848:	bl	170f0 <verify_monster@@Base+0x1724>
   2684c:	strb	r0, [sp, #9]
   26850:	ldr	r0, [fp, #-4]
   26854:	ldr	r1, [sp, #16]
   26858:	bl	170f0 <verify_monster@@Base+0x1724>
   2685c:	strb	r0, [sp, #11]
   26860:	ldrb	r0, [sp, #9]
   26864:	ldrb	r1, [sp, #11]
   26868:	cmp	r0, r1
   2686c:	bge	2687c <main@@Base+0x38c4>
   26870:	mvn	r0, #0
   26874:	str	r0, [sp]
   26878:	b	26898 <main@@Base+0x38e0>
   2687c:	ldrb	r0, [sp, #9]
   26880:	ldrb	r1, [sp, #11]
   26884:	cmp	r0, r1
   26888:	movw	r0, #0
   2688c:	movgt	r0, #1
   26890:	and	r0, r0, #1
   26894:	str	r0, [sp]
   26898:	ldr	r0, [sp]
   2689c:	cmp	r0, #0
   268a0:	bge	268f8 <main@@Base+0x3940>
   268a4:	ldr	r0, [fp, #-4]
   268a8:	ldr	r1, [sp, #16]
   268ac:	add	r0, r0, r1
   268b0:	ldrb	r0, [r0]
   268b4:	strb	r0, [sp, #8]
   268b8:	ldr	r0, [fp, #-4]
   268bc:	ldr	r1, [sp, #12]
   268c0:	add	r0, r0, r1
   268c4:	ldrb	r0, [r0]
   268c8:	ldr	r1, [fp, #-4]
   268cc:	ldr	r2, [sp, #16]
   268d0:	add	r1, r1, r2
   268d4:	strb	r0, [r1]
   268d8:	ldrb	r0, [sp, #8]
   268dc:	ldr	r1, [fp, #-4]
   268e0:	ldr	r2, [sp, #12]
   268e4:	add	r1, r1, r2
   268e8:	strb	r0, [r1]
   268ec:	ldr	r0, [sp, #16]
   268f0:	str	r0, [sp, #12]
   268f4:	b	268fc <main@@Base+0x3944>
   268f8:	b	26900 <main@@Base+0x3948>
   268fc:	b	26798 <main@@Base+0x37e0>
   26900:	mov	sp, fp
   26904:	pop	{fp, pc}
   26908:	push	{fp, lr}
   2690c:	mov	fp, sp
   26910:	sub	sp, sp, #24
   26914:	str	r0, [fp, #-4]
   26918:	str	r1, [fp, #-8]
   2691c:	str	r2, [sp, #12]
   26920:	ldr	r0, [fp, #-4]
   26924:	ldr	r1, [fp, #-8]
   26928:	ldr	r2, [sp, #12]
   2692c:	movw	r3, #1
   26930:	movw	ip, #1
   26934:	uxth	ip, ip
   26938:	str	ip, [sp]
   2693c:	mvn	ip, #0
   26940:	str	ip, [sp, #4]
   26944:	bl	2bb54 <flatcc_builder_create_vector@@Base>
   26948:	mov	sp, fp
   2694c:	pop	{fp, pc}
   26950:	push	{fp, lr}
   26954:	mov	fp, sp
   26958:	sub	sp, sp, #24
   2695c:	str	r0, [fp, #-4]
   26960:	str	r1, [fp, #-8]
   26964:	ldr	r0, [fp, #-4]
   26968:	ldr	r1, [fp, #-8]
   2696c:	ldr	r2, [fp, #-8]
   26970:	str	r0, [sp, #12]
   26974:	mov	r0, r2
   26978:	str	r1, [sp, #8]
   2697c:	bl	16cec <verify_monster@@Base+0x1320>
   26980:	ldr	r1, [sp, #12]
   26984:	str	r0, [sp, #4]
   26988:	mov	r0, r1
   2698c:	ldr	r1, [sp, #8]
   26990:	ldr	r2, [sp, #4]
   26994:	bl	2cfdc <flatcc_builder_create_string@@Base>
   26998:	mov	sp, fp
   2699c:	pop	{fp, pc}
   269a0:	push	{fp, lr}
   269a4:	mov	fp, sp
   269a8:	sub	sp, sp, #16
   269ac:	str	r0, [fp, #-4]
   269b0:	str	r1, [sp, #8]
   269b4:	ldr	r0, [sp, #8]
   269b8:	cmp	r0, #0
   269bc:	beq	269d4 <main@@Base+0x3a1c>
   269c0:	ldr	r0, [fp, #-4]
   269c4:	ldr	r1, [sp, #8]
   269c8:	bl	2a114 <flatcc_builder_offset_vector_push@@Base>
   269cc:	str	r0, [sp, #4]
   269d0:	b	269e0 <main@@Base+0x3a28>
   269d4:	movw	r0, #0
   269d8:	str	r0, [sp, #4]
   269dc:	b	269e0 <main@@Base+0x3a28>
   269e0:	ldr	r0, [sp, #4]
   269e4:	mov	sp, fp
   269e8:	pop	{fp, pc}
   269ec:	push	{fp, lr}
   269f0:	mov	fp, sp
   269f4:	sub	sp, sp, #24
   269f8:	str	r0, [fp, #-4]
   269fc:	str	r1, [fp, #-8]
   26a00:	str	r2, [sp, #12]
   26a04:	str	r3, [sp, #8]
   26a08:	ldr	r0, [fp, #-8]
   26a0c:	bl	16cec <verify_monster@@Base+0x1320>
   26a10:	str	r0, [sp, #4]
   26a14:	ldr	r0, [sp, #12]
   26a18:	ldr	r1, [sp, #4]
   26a1c:	cmp	r0, r1
   26a20:	bcc	26a2c <main@@Base+0x3a74>
   26a24:	ldr	r0, [sp, #4]
   26a28:	str	r0, [sp, #12]
   26a2c:	ldr	r0, [sp, #12]
   26a30:	ldr	r1, [sp, #4]
   26a34:	sub	r0, r1, r0
   26a38:	str	r0, [sp, #4]
   26a3c:	ldr	r0, [sp, #8]
   26a40:	ldr	r1, [sp, #4]
   26a44:	cmp	r0, r1
   26a48:	bls	26a54 <main@@Base+0x3a9c>
   26a4c:	ldr	r0, [sp, #4]
   26a50:	str	r0, [sp, #8]
   26a54:	ldr	r0, [fp, #-4]
   26a58:	ldr	r1, [fp, #-8]
   26a5c:	ldr	r2, [sp, #12]
   26a60:	add	r1, r1, r2
   26a64:	ldr	r2, [sp, #8]
   26a68:	bl	2cfdc <flatcc_builder_create_string@@Base>
   26a6c:	mov	sp, fp
   26a70:	pop	{fp, pc}
   26a74:	push	{fp, lr}
   26a78:	mov	fp, sp
   26a7c:	sub	sp, sp, #32
   26a80:	str	r0, [fp, #-4]
   26a84:	str	r1, [fp, #-8]
   26a88:	ldr	r0, [fp, #-4]
   26a8c:	ldr	r1, [fp, #-8]
   26a90:	ldr	r2, [fp, #-8]
   26a94:	str	r0, [fp, #-12]
   26a98:	mov	r0, r2
   26a9c:	str	r1, [sp, #16]
   26aa0:	bl	17b3c <verify_monster@@Base+0x2170>
   26aa4:	ldr	r1, [fp, #-12]
   26aa8:	str	r0, [sp, #12]
   26aac:	mov	r0, r1
   26ab0:	ldr	r1, [sp, #16]
   26ab4:	ldr	r2, [sp, #12]
   26ab8:	movw	r3, #1
   26abc:	movw	ip, #1
   26ac0:	uxth	ip, ip
   26ac4:	str	ip, [sp]
   26ac8:	mvn	ip, #0
   26acc:	str	ip, [sp, #4]
   26ad0:	bl	2bb54 <flatcc_builder_create_vector@@Base>
   26ad4:	mov	sp, fp
   26ad8:	pop	{fp, pc}
   26adc:	push	{fp, lr}
   26ae0:	mov	fp, sp
   26ae4:	sub	sp, sp, #40	; 0x28
   26ae8:	str	r0, [fp, #-4]
   26aec:	str	r1, [fp, #-8]
   26af0:	str	r2, [fp, #-12]
   26af4:	str	r3, [fp, #-16]
   26af8:	ldr	r0, [fp, #-8]
   26afc:	bl	17430 <verify_monster@@Base+0x1a64>
   26b00:	str	r0, [sp, #20]
   26b04:	ldr	r0, [fp, #-12]
   26b08:	ldr	r1, [sp, #20]
   26b0c:	cmp	r0, r1
   26b10:	bcc	26b1c <main@@Base+0x3b64>
   26b14:	ldr	r0, [sp, #20]
   26b18:	str	r0, [fp, #-12]
   26b1c:	ldr	r0, [fp, #-12]
   26b20:	ldr	r1, [sp, #20]
   26b24:	sub	r0, r1, r0
   26b28:	str	r0, [sp, #20]
   26b2c:	ldr	r0, [fp, #-16]
   26b30:	ldr	r1, [sp, #20]
   26b34:	cmp	r0, r1
   26b38:	bls	26b44 <main@@Base+0x3b8c>
   26b3c:	ldr	r0, [sp, #20]
   26b40:	str	r0, [fp, #-16]
   26b44:	ldr	r0, [fp, #-4]
   26b48:	ldr	r1, [fp, #-8]
   26b4c:	ldr	r2, [fp, #-12]
   26b50:	str	r0, [sp, #16]
   26b54:	mov	r0, r1
   26b58:	mov	r1, r2
   26b5c:	bl	26ba8 <main@@Base+0x3bf0>
   26b60:	ldr	r1, [pc, #60]	; 26ba4 <main@@Base+0x3bec>
   26b64:	ldr	r2, [fp, #-16]
   26b68:	ldr	r3, [sp, #16]
   26b6c:	str	r0, [sp, #12]
   26b70:	mov	r0, r3
   26b74:	ldr	ip, [sp, #12]
   26b78:	str	r1, [sp, #8]
   26b7c:	mov	r1, ip
   26b80:	movw	r3, #4
   26b84:	movw	lr, #2
   26b88:	uxth	lr, lr
   26b8c:	str	lr, [sp]
   26b90:	ldr	lr, [sp, #8]
   26b94:	str	lr, [sp, #4]
   26b98:	bl	2bb54 <flatcc_builder_create_vector@@Base>
   26b9c:	mov	sp, fp
   26ba0:	pop	{fp, pc}
   26ba4:	svccc	0x00ffffff
   26ba8:	sub	sp, sp, #8
   26bac:	str	r0, [sp, #4]
   26bb0:	str	r1, [sp]
   26bb4:	ldr	r0, [sp, #4]
   26bb8:	ldr	r1, [sp]
   26bbc:	add	r0, r0, r1, lsl #2
   26bc0:	add	sp, sp, #8
   26bc4:	bx	lr
   26bc8:	push	{fp, lr}
   26bcc:	mov	fp, sp
   26bd0:	sub	sp, sp, #40	; 0x28
   26bd4:	str	r0, [fp, #-4]
   26bd8:	str	r1, [fp, #-8]
   26bdc:	str	r2, [fp, #-12]
   26be0:	str	r3, [fp, #-16]
   26be4:	ldr	r0, [fp, #-8]
   26be8:	bl	17b3c <verify_monster@@Base+0x2170>
   26bec:	str	r0, [sp, #20]
   26bf0:	ldr	r0, [fp, #-12]
   26bf4:	ldr	r1, [sp, #20]
   26bf8:	cmp	r0, r1
   26bfc:	bcc	26c08 <main@@Base+0x3c50>
   26c00:	ldr	r0, [sp, #20]
   26c04:	str	r0, [fp, #-12]
   26c08:	ldr	r0, [fp, #-12]
   26c0c:	ldr	r1, [sp, #20]
   26c10:	sub	r0, r1, r0
   26c14:	str	r0, [sp, #20]
   26c18:	ldr	r0, [fp, #-16]
   26c1c:	ldr	r1, [sp, #20]
   26c20:	cmp	r0, r1
   26c24:	bls	26c30 <main@@Base+0x3c78>
   26c28:	ldr	r0, [sp, #20]
   26c2c:	str	r0, [fp, #-16]
   26c30:	ldr	r0, [fp, #-4]
   26c34:	ldr	r1, [fp, #-8]
   26c38:	ldr	r2, [fp, #-12]
   26c3c:	str	r0, [sp, #16]
   26c40:	mov	r0, r1
   26c44:	mov	r1, r2
   26c48:	bl	26c84 <main@@Base+0x3ccc>
   26c4c:	ldr	r2, [fp, #-16]
   26c50:	ldr	r1, [sp, #16]
   26c54:	str	r0, [sp, #12]
   26c58:	mov	r0, r1
   26c5c:	ldr	r1, [sp, #12]
   26c60:	movw	r3, #1
   26c64:	movw	ip, #1
   26c68:	uxth	ip, ip
   26c6c:	str	ip, [sp]
   26c70:	mvn	ip, #0
   26c74:	str	ip, [sp, #4]
   26c78:	bl	2bb54 <flatcc_builder_create_vector@@Base>
   26c7c:	mov	sp, fp
   26c80:	pop	{fp, pc}
   26c84:	sub	sp, sp, #8
   26c88:	str	r0, [sp, #4]
   26c8c:	str	r1, [sp]
   26c90:	ldr	r0, [sp, #4]
   26c94:	ldr	r1, [sp]
   26c98:	add	r0, r0, r1
   26c9c:	add	sp, sp, #8
   26ca0:	bx	lr
   26ca4:	push	{fp, lr}
   26ca8:	mov	fp, sp
   26cac:	sub	sp, sp, #32
   26cb0:	str	r0, [fp, #-4]
   26cb4:	str	r1, [fp, #-8]
   26cb8:	ldr	r0, [fp, #-4]
   26cbc:	ldr	r1, [fp, #-8]
   26cc0:	ldr	r2, [fp, #-8]
   26cc4:	str	r0, [fp, #-12]
   26cc8:	mov	r0, r2
   26ccc:	str	r1, [sp, #16]
   26cd0:	bl	17430 <verify_monster@@Base+0x1a64>
   26cd4:	ldr	r1, [pc, #60]	; 26d18 <main@@Base+0x3d60>
   26cd8:	ldr	r2, [fp, #-12]
   26cdc:	str	r0, [sp, #12]
   26ce0:	mov	r0, r2
   26ce4:	ldr	r3, [sp, #16]
   26ce8:	str	r1, [sp, #8]
   26cec:	mov	r1, r3
   26cf0:	ldr	r2, [sp, #12]
   26cf4:	movw	r3, #4
   26cf8:	movw	ip, #2
   26cfc:	uxth	ip, ip
   26d00:	str	ip, [sp]
   26d04:	ldr	ip, [sp, #8]
   26d08:	str	ip, [sp, #4]
   26d0c:	bl	2bb54 <flatcc_builder_create_vector@@Base>
   26d10:	mov	sp, fp
   26d14:	pop	{fp, pc}
   26d18:	svccc	0x00ffffff
   26d1c:	push	{fp, lr}
   26d20:	mov	fp, sp
   26d24:	sub	sp, sp, #32
   26d28:	ldr	ip, [fp, #8]
   26d2c:	str	r0, [fp, #-8]
   26d30:	str	r1, [fp, #-12]
   26d34:	str	r3, [sp, #12]
   26d38:	str	r2, [sp, #8]
   26d3c:	strh	ip, [sp, #6]
   26d40:	ldr	r0, [fp, #-8]
   26d44:	bl	260d0 <main@@Base+0x3118>
   26d48:	cmp	r0, #0
   26d4c:	bne	26d90 <main@@Base+0x3dd8>
   26d50:	ldr	r0, [fp, #-8]
   26d54:	ldr	r2, [sp, #8]
   26d58:	ldr	r3, [sp, #12]
   26d5c:	bl	26db4 <main@@Base+0x3dfc>
   26d60:	cmp	r0, #0
   26d64:	bne	26d90 <main@@Base+0x3dd8>
   26d68:	ldr	r0, [fp, #-8]
   26d6c:	ldr	r1, [fp, #-12]
   26d70:	bl	26e48 <main@@Base+0x3e90>
   26d74:	cmp	r0, #0
   26d78:	bne	26d90 <main@@Base+0x3dd8>
   26d7c:	ldr	r0, [fp, #-8]
   26d80:	ldrh	r1, [sp, #6]
   26d84:	bl	26eb4 <main@@Base+0x3efc>
   26d88:	cmp	r0, #0
   26d8c:	beq	26d9c <main@@Base+0x3de4>
   26d90:	movw	r0, #0
   26d94:	str	r0, [fp, #-4]
   26d98:	b	26da8 <main@@Base+0x3df0>
   26d9c:	ldr	r0, [fp, #-8]
   26da0:	bl	26160 <main@@Base+0x31a8>
   26da4:	str	r0, [fp, #-4]
   26da8:	ldr	r0, [fp, #-4]
   26dac:	mov	sp, fp
   26db0:	pop	{fp, pc}
   26db4:	push	{fp, lr}
   26db8:	mov	fp, sp
   26dbc:	sub	sp, sp, #24
   26dc0:	str	r0, [fp, #-8]
   26dc4:	str	r3, [sp, #12]
   26dc8:	str	r2, [sp, #8]
   26dcc:	ldr	r0, [sp, #8]
   26dd0:	ldr	r1, [sp, #12]
   26dd4:	orr	r0, r0, r1
   26dd8:	cmp	r0, #0
   26ddc:	bne	26df0 <main@@Base+0x3e38>
   26de0:	b	26de4 <main@@Base+0x3e2c>
   26de4:	movw	r0, #0
   26de8:	str	r0, [fp, #-4]
   26dec:	b	26e3c <main@@Base+0x3e84>
   26df0:	ldr	r0, [fp, #-8]
   26df4:	movw	r1, #1
   26df8:	movw	r2, #8
   26dfc:	movw	r3, #8
   26e00:	uxth	r3, r3
   26e04:	bl	2c55c <flatcc_builder_table_add@@Base>
   26e08:	str	r0, [sp, #4]
   26e0c:	movw	r1, #0
   26e10:	cmp	r0, r1
   26e14:	bne	26e24 <main@@Base+0x3e6c>
   26e18:	mvn	r0, #0
   26e1c:	str	r0, [fp, #-4]
   26e20:	b	26e3c <main@@Base+0x3e84>
   26e24:	ldr	r0, [sp, #4]
   26e28:	ldr	r2, [sp, #8]
   26e2c:	ldr	r3, [sp, #12]
   26e30:	bl	23d3c <main@@Base+0xd84>
   26e34:	movw	r1, #0
   26e38:	str	r1, [fp, #-4]
   26e3c:	ldr	r0, [fp, #-4]
   26e40:	mov	sp, fp
   26e44:	pop	{fp, pc}
   26e48:	push	{fp, lr}
   26e4c:	mov	fp, sp
   26e50:	sub	sp, sp, #16
   26e54:	str	r0, [fp, #-4]
   26e58:	str	r1, [sp, #8]
   26e5c:	ldr	r0, [sp, #8]
   26e60:	cmp	r0, #0
   26e64:	beq	26e9c <main@@Base+0x3ee4>
   26e68:	ldr	r0, [fp, #-4]
   26e6c:	movw	r1, #0
   26e70:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   26e74:	str	r0, [sp, #4]
   26e78:	movw	r1, #0
   26e7c:	cmp	r0, r1
   26e80:	beq	26e9c <main@@Base+0x3ee4>
   26e84:	ldr	r0, [sp, #8]
   26e88:	ldr	r1, [sp, #4]
   26e8c:	str	r0, [r1]
   26e90:	movw	r0, #0
   26e94:	str	r0, [sp]
   26e98:	b	26ea8 <main@@Base+0x3ef0>
   26e9c:	mvn	r0, #0
   26ea0:	str	r0, [sp]
   26ea4:	b	26ea8 <main@@Base+0x3ef0>
   26ea8:	ldr	r0, [sp]
   26eac:	mov	sp, fp
   26eb0:	pop	{fp, pc}
   26eb4:	push	{fp, lr}
   26eb8:	mov	fp, sp
   26ebc:	sub	sp, sp, #24
   26ec0:	str	r0, [fp, #-8]
   26ec4:	strh	r1, [fp, #-10]
   26ec8:	ldrh	r0, [fp, #-10]
   26ecc:	cmp	r0, #0
   26ed0:	bne	26ee0 <main@@Base+0x3f28>
   26ed4:	movw	r0, #0
   26ed8:	str	r0, [fp, #-4]
   26edc:	b	26f2c <main@@Base+0x3f74>
   26ee0:	ldr	r0, [fp, #-8]
   26ee4:	movw	r1, #2
   26ee8:	str	r1, [sp, #4]
   26eec:	ldr	r2, [sp, #4]
   26ef0:	movw	r3, #2
   26ef4:	uxth	r3, r3
   26ef8:	bl	2c55c <flatcc_builder_table_add@@Base>
   26efc:	str	r0, [sp, #8]
   26f00:	movw	r1, #0
   26f04:	cmp	r0, r1
   26f08:	bne	26f18 <main@@Base+0x3f60>
   26f0c:	mvn	r0, #0
   26f10:	str	r0, [fp, #-4]
   26f14:	b	26f2c <main@@Base+0x3f74>
   26f18:	ldr	r0, [sp, #8]
   26f1c:	ldrh	r1, [fp, #-10]
   26f20:	bl	23f58 <main@@Base+0xfa0>
   26f24:	movw	r1, #0
   26f28:	str	r1, [fp, #-4]
   26f2c:	ldr	r0, [fp, #-4]
   26f30:	mov	sp, fp
   26f34:	pop	{fp, pc}
   26f38:	push	{fp, lr}
   26f3c:	mov	fp, sp
   26f40:	sub	sp, sp, #8
   26f44:	str	r0, [sp, #4]
   26f48:	ldr	r0, [sp, #4]
   26f4c:	movw	r1, #4
   26f50:	bl	2acb8 <flatcc_builder_start_table@@Base>
   26f54:	mov	sp, fp
   26f58:	pop	{fp, pc}
   26f5c:	push	{fp, lr}
   26f60:	mov	fp, sp
   26f64:	sub	sp, sp, #16
   26f68:	str	r0, [sp, #8]
   26f6c:	strb	r1, [sp, #7]
   26f70:	ldrsb	r0, [sp, #7]
   26f74:	cmp	r0, #2
   26f78:	bne	26f88 <main@@Base+0x3fd0>
   26f7c:	movw	r0, #0
   26f80:	str	r0, [fp, #-4]
   26f84:	b	26fd0 <main@@Base+0x4018>
   26f88:	ldr	r0, [sp, #8]
   26f8c:	movw	r1, #0
   26f90:	movw	r2, #1
   26f94:	movw	r3, #1
   26f98:	uxth	r3, r3
   26f9c:	bl	2c55c <flatcc_builder_table_add@@Base>
   26fa0:	str	r0, [sp]
   26fa4:	movw	r1, #0
   26fa8:	cmp	r0, r1
   26fac:	bne	26fbc <main@@Base+0x4004>
   26fb0:	mvn	r0, #0
   26fb4:	str	r0, [fp, #-4]
   26fb8:	b	26fd0 <main@@Base+0x4018>
   26fbc:	ldr	r0, [sp]
   26fc0:	ldrsb	r1, [sp, #7]
   26fc4:	bl	25cb4 <main@@Base+0x2cfc>
   26fc8:	movw	r1, #0
   26fcc:	str	r1, [fp, #-4]
   26fd0:	ldr	r0, [fp, #-4]
   26fd4:	mov	sp, fp
   26fd8:	pop	{fp, pc}
   26fdc:	push	{fp, lr}
   26fe0:	mov	fp, sp
   26fe4:	sub	sp, sp, #24
   26fe8:	str	r0, [fp, #-8]
   26fec:	strb	r1, [fp, #-9]
   26ff0:	ldrsb	r0, [fp, #-9]
   26ff4:	cmp	r0, #2
   26ff8:	bne	27008 <main@@Base+0x4050>
   26ffc:	movw	r0, #0
   27000:	str	r0, [fp, #-4]
   27004:	b	27054 <main@@Base+0x409c>
   27008:	ldr	r0, [fp, #-8]
   2700c:	movw	r1, #1
   27010:	str	r1, [sp, #4]
   27014:	ldr	r2, [sp, #4]
   27018:	movw	r3, #1
   2701c:	uxth	r3, r3
   27020:	bl	2c55c <flatcc_builder_table_add@@Base>
   27024:	str	r0, [sp, #8]
   27028:	movw	r1, #0
   2702c:	cmp	r0, r1
   27030:	bne	27040 <main@@Base+0x4088>
   27034:	mvn	r0, #0
   27038:	str	r0, [fp, #-4]
   2703c:	b	27054 <main@@Base+0x409c>
   27040:	ldr	r0, [sp, #8]
   27044:	ldrsb	r1, [fp, #-9]
   27048:	bl	25cb4 <main@@Base+0x2cfc>
   2704c:	movw	r1, #0
   27050:	str	r1, [fp, #-4]
   27054:	ldr	r0, [fp, #-4]
   27058:	mov	sp, fp
   2705c:	pop	{fp, pc}
   27060:	push	{fp, lr}
   27064:	mov	fp, sp
   27068:	sub	sp, sp, #16
   2706c:	str	r0, [sp, #8]
   27070:	strb	r1, [sp, #7]
   27074:	ldrb	r0, [sp, #7]
   27078:	cmp	r0, #2
   2707c:	bne	2708c <main@@Base+0x40d4>
   27080:	movw	r0, #0
   27084:	str	r0, [fp, #-4]
   27088:	b	270d4 <main@@Base+0x411c>
   2708c:	ldr	r0, [sp, #8]
   27090:	movw	r1, #2
   27094:	movw	r2, #1
   27098:	movw	r3, #1
   2709c:	uxth	r3, r3
   270a0:	bl	2c55c <flatcc_builder_table_add@@Base>
   270a4:	str	r0, [sp]
   270a8:	movw	r1, #0
   270ac:	cmp	r0, r1
   270b0:	bne	270c0 <main@@Base+0x4108>
   270b4:	mvn	r0, #0
   270b8:	str	r0, [fp, #-4]
   270bc:	b	270d4 <main@@Base+0x411c>
   270c0:	ldr	r0, [sp]
   270c4:	ldrb	r1, [sp, #7]
   270c8:	bl	23fe0 <main@@Base+0x1028>
   270cc:	movw	r1, #0
   270d0:	str	r1, [fp, #-4]
   270d4:	ldr	r0, [fp, #-4]
   270d8:	mov	sp, fp
   270dc:	pop	{fp, pc}
   270e0:	push	{fp, lr}
   270e4:	mov	fp, sp
   270e8:	sub	sp, sp, #16
   270ec:	str	r0, [sp, #8]
   270f0:	strb	r1, [sp, #7]
   270f4:	ldrb	r0, [sp, #7]
   270f8:	cmp	r0, #2
   270fc:	bne	2710c <main@@Base+0x4154>
   27100:	movw	r0, #0
   27104:	str	r0, [fp, #-4]
   27108:	b	27154 <main@@Base+0x419c>
   2710c:	ldr	r0, [sp, #8]
   27110:	movw	r1, #3
   27114:	movw	r2, #1
   27118:	movw	r3, #1
   2711c:	uxth	r3, r3
   27120:	bl	2c55c <flatcc_builder_table_add@@Base>
   27124:	str	r0, [sp]
   27128:	movw	r1, #0
   2712c:	cmp	r0, r1
   27130:	bne	27140 <main@@Base+0x4188>
   27134:	mvn	r0, #0
   27138:	str	r0, [fp, #-4]
   2713c:	b	27154 <main@@Base+0x419c>
   27140:	ldr	r0, [sp]
   27144:	ldrb	r1, [sp, #7]
   27148:	bl	23fe0 <main@@Base+0x1028>
   2714c:	movw	r1, #0
   27150:	str	r1, [fp, #-4]
   27154:	ldr	r0, [fp, #-4]
   27158:	mov	sp, fp
   2715c:	pop	{fp, pc}
   27160:	push	{fp, lr}
   27164:	mov	fp, sp
   27168:	sub	sp, sp, #8
   2716c:	ldr	r1, [pc, #76]	; 271c0 <main@@Base+0x4208>
   27170:	add	r1, pc, r1
   27174:	str	r0, [sp, #4]
   27178:	ldr	r0, [sp, #4]
   2717c:	movw	r2, #0
   27180:	bl	2b830 <flatcc_builder_check_required@@Base>
   27184:	cmp	r0, #0
   27188:	beq	27190 <main@@Base+0x41d8>
   2718c:	b	271b0 <main@@Base+0x41f8>
   27190:	ldr	r0, [pc, #44]	; 271c4 <main@@Base+0x420c>
   27194:	add	r0, pc, r0
   27198:	ldr	r1, [pc, #40]	; 271c8 <main@@Base+0x4210>
   2719c:	add	r1, pc, r1
   271a0:	ldr	r2, [pc, #36]	; 271cc <main@@Base+0x4214>
   271a4:	add	r3, pc, r2
   271a8:	movw	r2, #217	; 0xd9
   271ac:	bl	12e68 <__assert_fail@plt>
   271b0:	ldr	r0, [sp, #4]
   271b4:	bl	2b920 <flatcc_builder_end_table@@Base>
   271b8:	mov	sp, fp
   271bc:	pop	{fp, pc}
   271c0:	andeq	pc, r0, r4, lsl r0	; <UNPREDICTABLE>
   271c4:	andeq	lr, r0, r4, ror r1
   271c8:	andeq	sp, r0, fp, asr #1
   271cc:	andeq	lr, r0, r6, lsr r2
   271d0:	push	{fp, lr}
   271d4:	mov	fp, sp
   271d8:	sub	sp, sp, #8
   271dc:	str	r0, [sp, #4]
   271e0:	ldr	r0, [sp, #4]
   271e4:	movw	r1, #4
   271e8:	bl	2acb8 <flatcc_builder_start_table@@Base>
   271ec:	mov	sp, fp
   271f0:	pop	{fp, pc}
   271f4:	push	{fp, lr}
   271f8:	mov	fp, sp
   271fc:	sub	sp, sp, #8
   27200:	ldr	r1, [pc, #76]	; 27254 <main@@Base+0x429c>
   27204:	add	r1, pc, r1
   27208:	str	r0, [sp, #4]
   2720c:	ldr	r0, [sp, #4]
   27210:	movw	r2, #0
   27214:	bl	2b830 <flatcc_builder_check_required@@Base>
   27218:	cmp	r0, #0
   2721c:	beq	27224 <main@@Base+0x426c>
   27220:	b	27244 <main@@Base+0x428c>
   27224:	ldr	r0, [pc, #44]	; 27258 <main@@Base+0x42a0>
   27228:	add	r0, pc, r0
   2722c:	ldr	r1, [pc, #40]	; 2725c <main@@Base+0x42a4>
   27230:	add	r1, pc, r1
   27234:	ldr	r2, [pc, #36]	; 27260 <main@@Base+0x42a8>
   27238:	add	r3, pc, r2
   2723c:	movw	r2, #223	; 0xdf
   27240:	bl	12e68 <__assert_fail@plt>
   27244:	ldr	r0, [sp, #4]
   27248:	bl	2b920 <flatcc_builder_end_table@@Base>
   2724c:	mov	sp, fp
   27250:	pop	{fp, pc}
   27254:	andeq	lr, r0, r2, lsl #31
   27258:	andeq	lr, r0, r3, lsr #4
   2725c:	andeq	sp, r0, r7, lsr r0
   27260:	andeq	lr, r0, r9, lsr #5
   27264:	push	{fp, lr}
   27268:	mov	fp, sp
   2726c:	sub	sp, sp, #24
   27270:	str	r0, [fp, #-4]
   27274:	str	r1, [fp, #-8]
   27278:	ldr	r0, [fp, #-4]
   2727c:	ldr	r1, [fp, #-8]
   27280:	add	r2, sp, #8
   27284:	str	r0, [sp, #4]
   27288:	mov	r0, r2
   2728c:	bl	272a8 <main@@Base+0x42f0>
   27290:	ldr	r1, [sp, #8]
   27294:	ldr	r2, [sp, #12]
   27298:	ldr	r0, [sp, #4]
   2729c:	bl	194a8 <gen_monster@@Base+0x104c>
   272a0:	mov	sp, fp
   272a4:	pop	{fp, pc}
   272a8:	sub	sp, sp, #4
   272ac:	str	r1, [sp]
   272b0:	movw	r1, #4
   272b4:	strb	r1, [r0]
   272b8:	ldr	r1, [sp]
   272bc:	str	r1, [r0, #4]
   272c0:	add	sp, sp, #4
   272c4:	bx	lr
   272c8:	push	{fp, lr}
   272cc:	mov	fp, sp
   272d0:	sub	sp, sp, #8
   272d4:	str	r0, [sp, #4]
   272d8:	ldr	r0, [sp, #4]
   272dc:	ldrb	r0, [r0]
   272e0:	bl	272f0 <main@@Base+0x4338>
   272e4:	and	r0, r0, #255	; 0xff
   272e8:	mov	sp, fp
   272ec:	pop	{fp, pc}
   272f0:	sub	sp, sp, #4
   272f4:	strb	r0, [sp, #3]
   272f8:	ldrb	r0, [sp, #3]
   272fc:	add	sp, sp, #4
   27300:	bx	lr
   27304:	push	{fp, lr}
   27308:	mov	fp, sp
   2730c:	sub	sp, sp, #8
   27310:	str	r0, [sp, #4]
   27314:	ldr	r0, [sp, #4]
   27318:	movw	r1, #10
   2731c:	bl	2acb8 <flatcc_builder_start_table@@Base>
   27320:	mov	sp, fp
   27324:	pop	{fp, pc}
   27328:	push	{fp, lr}
   2732c:	mov	fp, sp
   27330:	sub	sp, sp, #8
   27334:	str	r0, [sp, #4]
   27338:	ldr	r0, [sp, #4]
   2733c:	movw	r1, #4
   27340:	movw	r2, #4
   27344:	uxth	r2, r2
   27348:	bl	29af4 <flatcc_builder_start_struct@@Base>
   2734c:	mov	sp, fp
   27350:	pop	{fp, pc}
   27354:	push	{fp, lr}
   27358:	mov	fp, sp
   2735c:	sub	sp, sp, #16
   27360:	str	r0, [fp, #-4]
   27364:	str	r1, [sp, #8]
   27368:	ldr	r0, [fp, #-4]
   2736c:	ldr	r1, [sp, #8]
   27370:	bl	23e38 <main@@Base+0xe80>
   27374:	ldr	r1, [fp, #-4]
   27378:	str	r0, [sp, #4]
   2737c:	mov	r0, r1
   27380:	mov	sp, fp
   27384:	pop	{fp, pc}
   27388:	push	{fp, lr}
   2738c:	mov	fp, sp
   27390:	sub	sp, sp, #8
   27394:	str	r0, [sp, #4]
   27398:	ldr	r0, [sp, #4]
   2739c:	bl	29c9c <flatcc_builder_end_struct@@Base>
   273a0:	mov	sp, fp
   273a4:	pop	{fp, pc}
   273a8:	push	{fp, lr}
   273ac:	mov	fp, sp
   273b0:	sub	sp, sp, #8
   273b4:	str	r0, [sp, #4]
   273b8:	ldr	r0, [sp, #4]
   273bc:	movw	r1, #2
   273c0:	movw	r2, #2
   273c4:	uxth	r2, r2
   273c8:	bl	29af4 <flatcc_builder_start_struct@@Base>
   273cc:	mov	sp, fp
   273d0:	pop	{fp, pc}
   273d4:	push	{fp, lr}
   273d8:	mov	fp, sp
   273dc:	sub	sp, sp, #16
   273e0:	str	r0, [fp, #-4]
   273e4:	strh	r1, [fp, #-6]
   273e8:	ldr	r0, [fp, #-4]
   273ec:	ldrh	r1, [fp, #-6]
   273f0:	bl	23f58 <main@@Base+0xfa0>
   273f4:	ldr	r1, [fp, #-4]
   273f8:	str	r0, [sp, #4]
   273fc:	mov	r0, r1
   27400:	mov	sp, fp
   27404:	pop	{fp, pc}
   27408:	push	{fp, lr}
   2740c:	mov	fp, sp
   27410:	sub	sp, sp, #8
   27414:	str	r0, [sp, #4]
   27418:	ldr	r0, [sp, #4]
   2741c:	bl	29c9c <flatcc_builder_end_struct@@Base>
   27420:	mov	sp, fp
   27424:	pop	{fp, pc}
   27428:	push	{fp, lr}
   2742c:	mov	fp, sp
   27430:	sub	sp, sp, #24
   27434:	str	r1, [sp, #12]
   27438:	str	r2, [sp, #16]
   2743c:	str	r0, [sp, #8]
   27440:	ldrb	r0, [sp, #12]
   27444:	cmp	r0, #0
   27448:	bne	27458 <main@@Base+0x44a0>
   2744c:	movw	r0, #0
   27450:	str	r0, [fp, #-4]
   27454:	b	274e0 <main@@Base+0x4528>
   27458:	ldr	r0, [sp, #16]
   2745c:	cmp	r0, #0
   27460:	bne	27470 <main@@Base+0x44b8>
   27464:	mvn	r0, #0
   27468:	str	r0, [fp, #-4]
   2746c:	b	274e0 <main@@Base+0x4528>
   27470:	ldr	r0, [sp, #8]
   27474:	movw	r1, #0
   27478:	movw	r2, #1
   2747c:	movw	r3, #1
   27480:	uxth	r3, r3
   27484:	bl	2c55c <flatcc_builder_table_add@@Base>
   27488:	str	r0, [sp]
   2748c:	movw	r1, #0
   27490:	cmp	r0, r1
   27494:	beq	274b4 <main@@Base+0x44fc>
   27498:	ldr	r0, [sp, #8]
   2749c:	movw	r1, #1
   274a0:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   274a4:	str	r0, [sp, #4]
   274a8:	movw	r1, #0
   274ac:	cmp	r0, r1
   274b0:	bne	274c0 <main@@Base+0x4508>
   274b4:	mvn	r0, #0
   274b8:	str	r0, [fp, #-4]
   274bc:	b	274e0 <main@@Base+0x4528>
   274c0:	ldrb	r0, [sp, #12]
   274c4:	ldr	r1, [sp]
   274c8:	strb	r0, [r1]
   274cc:	ldr	r0, [sp, #16]
   274d0:	ldr	r1, [sp, #4]
   274d4:	str	r0, [r1]
   274d8:	movw	r0, #0
   274dc:	str	r0, [fp, #-4]
   274e0:	ldr	r0, [fp, #-4]
   274e4:	mov	sp, fp
   274e8:	pop	{fp, pc}
   274ec:	push	{fp, lr}
   274f0:	mov	fp, sp
   274f4:	sub	sp, sp, #24
   274f8:	str	r1, [sp, #12]
   274fc:	str	r2, [sp, #16]
   27500:	str	r0, [sp, #8]
   27504:	ldrb	r0, [sp, #12]
   27508:	cmp	r0, #0
   2750c:	bne	2751c <main@@Base+0x4564>
   27510:	movw	r0, #0
   27514:	str	r0, [fp, #-4]
   27518:	b	275a4 <main@@Base+0x45ec>
   2751c:	ldr	r0, [sp, #16]
   27520:	cmp	r0, #0
   27524:	bne	27534 <main@@Base+0x457c>
   27528:	mvn	r0, #0
   2752c:	str	r0, [fp, #-4]
   27530:	b	275a4 <main@@Base+0x45ec>
   27534:	ldr	r0, [sp, #8]
   27538:	movw	r1, #6
   2753c:	movw	r2, #1
   27540:	movw	r3, #1
   27544:	uxth	r3, r3
   27548:	bl	2c55c <flatcc_builder_table_add@@Base>
   2754c:	str	r0, [sp]
   27550:	movw	r1, #0
   27554:	cmp	r0, r1
   27558:	beq	27578 <main@@Base+0x45c0>
   2755c:	ldr	r0, [sp, #8]
   27560:	movw	r1, #7
   27564:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   27568:	str	r0, [sp, #4]
   2756c:	movw	r1, #0
   27570:	cmp	r0, r1
   27574:	bne	27584 <main@@Base+0x45cc>
   27578:	mvn	r0, #0
   2757c:	str	r0, [fp, #-4]
   27580:	b	275a4 <main@@Base+0x45ec>
   27584:	ldrb	r0, [sp, #12]
   27588:	ldr	r1, [sp]
   2758c:	strb	r0, [r1]
   27590:	ldr	r0, [sp, #16]
   27594:	ldr	r1, [sp, #4]
   27598:	str	r0, [r1]
   2759c:	movw	r0, #0
   275a0:	str	r0, [fp, #-4]
   275a4:	ldr	r0, [fp, #-4]
   275a8:	mov	sp, fp
   275ac:	pop	{fp, pc}
   275b0:	push	{fp, lr}
   275b4:	mov	fp, sp
   275b8:	sub	sp, sp, #8
   275bc:	str	r0, [sp, #4]
   275c0:	ldr	r0, [sp, #4]
   275c4:	movw	r1, #1
   275c8:	bl	2acb8 <flatcc_builder_start_table@@Base>
   275cc:	mov	sp, fp
   275d0:	pop	{fp, pc}
   275d4:	push	{fp, lr}
   275d8:	mov	fp, sp
   275dc:	sub	sp, sp, #16
   275e0:	str	r0, [sp, #8]
   275e4:	str	r1, [sp, #4]
   275e8:	ldr	r0, [sp, #4]
   275ec:	cmp	r0, #0
   275f0:	bne	27600 <main@@Base+0x4648>
   275f4:	movw	r0, #0
   275f8:	str	r0, [fp, #-4]
   275fc:	b	27648 <main@@Base+0x4690>
   27600:	ldr	r0, [sp, #8]
   27604:	movw	r1, #0
   27608:	movw	r2, #4
   2760c:	movw	r3, #4
   27610:	uxth	r3, r3
   27614:	bl	2c55c <flatcc_builder_table_add@@Base>
   27618:	str	r0, [sp]
   2761c:	movw	r1, #0
   27620:	cmp	r0, r1
   27624:	bne	27634 <main@@Base+0x467c>
   27628:	mvn	r0, #0
   2762c:	str	r0, [fp, #-4]
   27630:	b	27648 <main@@Base+0x4690>
   27634:	ldr	r0, [sp]
   27638:	ldr	r1, [sp, #4]
   2763c:	bl	23e38 <main@@Base+0xe80>
   27640:	movw	r1, #0
   27644:	str	r1, [fp, #-4]
   27648:	ldr	r0, [fp, #-4]
   2764c:	mov	sp, fp
   27650:	pop	{fp, pc}
   27654:	push	{fp, lr}
   27658:	mov	fp, sp
   2765c:	sub	sp, sp, #8
   27660:	ldr	r1, [pc, #76]	; 276b4 <main@@Base+0x46fc>
   27664:	add	r1, pc, r1
   27668:	str	r0, [sp, #4]
   2766c:	ldr	r0, [sp, #4]
   27670:	movw	r2, #0
   27674:	bl	2b830 <flatcc_builder_check_required@@Base>
   27678:	cmp	r0, #0
   2767c:	beq	27684 <main@@Base+0x46cc>
   27680:	b	276a4 <main@@Base+0x46ec>
   27684:	ldr	r0, [pc, #44]	; 276b8 <main@@Base+0x4700>
   27688:	add	r0, pc, r0
   2768c:	ldr	r1, [pc, #40]	; 276bc <main@@Base+0x4704>
   27690:	add	r1, pc, r1
   27694:	ldr	r2, [pc, #36]	; 276c0 <main@@Base+0x4708>
   27698:	add	r3, pc, r2
   2769c:	movw	r2, #239	; 0xef
   276a0:	bl	12e68 <__assert_fail@plt>
   276a4:	ldr	r0, [sp, #4]
   276a8:	bl	2b920 <flatcc_builder_end_table@@Base>
   276ac:	mov	sp, fp
   276b0:	pop	{fp, pc}
   276b4:	andeq	lr, r0, r4, lsr #22
   276b8:	andeq	lr, r0, lr, lsl r2
   276bc:	ldrdeq	ip, [r0], -r7
   276c0:	muleq	r0, lr, r2
   276c4:	push	{fp, lr}
   276c8:	mov	fp, sp
   276cc:	sub	sp, sp, #24
   276d0:	str	r1, [sp, #12]
   276d4:	str	r2, [sp, #16]
   276d8:	str	r0, [sp, #8]
   276dc:	ldrb	r0, [sp, #12]
   276e0:	cmp	r0, #0
   276e4:	bne	276f4 <main@@Base+0x473c>
   276e8:	movw	r0, #0
   276ec:	str	r0, [fp, #-4]
   276f0:	b	2777c <main@@Base+0x47c4>
   276f4:	ldr	r0, [sp, #16]
   276f8:	cmp	r0, #0
   276fc:	bne	2770c <main@@Base+0x4754>
   27700:	mvn	r0, #0
   27704:	str	r0, [fp, #-4]
   27708:	b	2777c <main@@Base+0x47c4>
   2770c:	ldr	r0, [sp, #8]
   27710:	movw	r1, #2
   27714:	movw	r2, #1
   27718:	movw	r3, #1
   2771c:	uxth	r3, r3
   27720:	bl	2c55c <flatcc_builder_table_add@@Base>
   27724:	str	r0, [sp]
   27728:	movw	r1, #0
   2772c:	cmp	r0, r1
   27730:	beq	27750 <main@@Base+0x4798>
   27734:	ldr	r0, [sp, #8]
   27738:	movw	r1, #3
   2773c:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   27740:	str	r0, [sp, #4]
   27744:	movw	r1, #0
   27748:	cmp	r0, r1
   2774c:	bne	2775c <main@@Base+0x47a4>
   27750:	mvn	r0, #0
   27754:	str	r0, [fp, #-4]
   27758:	b	2777c <main@@Base+0x47c4>
   2775c:	ldrb	r0, [sp, #12]
   27760:	ldr	r1, [sp]
   27764:	strb	r0, [r1]
   27768:	ldr	r0, [sp, #16]
   2776c:	ldr	r1, [sp, #4]
   27770:	str	r0, [r1]
   27774:	movw	r0, #0
   27778:	str	r0, [fp, #-4]
   2777c:	ldr	r0, [fp, #-4]
   27780:	mov	sp, fp
   27784:	pop	{fp, pc}
   27788:	sub	sp, sp, #4
   2778c:	str	r1, [sp]
   27790:	movw	r1, #2
   27794:	strb	r1, [r0]
   27798:	ldr	r1, [sp]
   2779c:	str	r1, [r0, #4]
   277a0:	add	sp, sp, #4
   277a4:	bx	lr
   277a8:	push	{fp, lr}
   277ac:	mov	fp, sp
   277b0:	sub	sp, sp, #24
   277b4:	str	r0, [fp, #-4]
   277b8:	str	r1, [fp, #-8]
   277bc:	ldr	r0, [fp, #-4]
   277c0:	ldr	r1, [fp, #-8]
   277c4:	add	r2, sp, #8
   277c8:	str	r0, [sp, #4]
   277cc:	mov	r0, r2
   277d0:	bl	1ff00 <test_mixed_type_union@@Base+0xe94>
   277d4:	ldr	r1, [sp, #8]
   277d8:	ldr	r2, [sp, #12]
   277dc:	ldr	r0, [sp, #4]
   277e0:	bl	277ec <main@@Base+0x4834>
   277e4:	mov	sp, fp
   277e8:	pop	{fp, pc}
   277ec:	push	{fp, lr}
   277f0:	mov	fp, sp
   277f4:	sub	sp, sp, #24
   277f8:	str	r1, [sp, #12]
   277fc:	str	r2, [sp, #16]
   27800:	str	r0, [sp, #8]
   27804:	ldrb	r0, [sp, #12]
   27808:	cmp	r0, #0
   2780c:	bne	2781c <main@@Base+0x4864>
   27810:	movw	r0, #0
   27814:	str	r0, [fp, #-4]
   27818:	b	278a4 <main@@Base+0x48ec>
   2781c:	ldr	r0, [sp, #16]
   27820:	cmp	r0, #0
   27824:	bne	27834 <main@@Base+0x487c>
   27828:	mvn	r0, #0
   2782c:	str	r0, [fp, #-4]
   27830:	b	278a4 <main@@Base+0x48ec>
   27834:	ldr	r0, [sp, #8]
   27838:	movw	r1, #4
   2783c:	movw	r2, #1
   27840:	movw	r3, #1
   27844:	uxth	r3, r3
   27848:	bl	2c55c <flatcc_builder_table_add@@Base>
   2784c:	str	r0, [sp]
   27850:	movw	r1, #0
   27854:	cmp	r0, r1
   27858:	beq	27878 <main@@Base+0x48c0>
   2785c:	ldr	r0, [sp, #8]
   27860:	movw	r1, #5
   27864:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   27868:	str	r0, [sp, #4]
   2786c:	movw	r1, #0
   27870:	cmp	r0, r1
   27874:	bne	27884 <main@@Base+0x48cc>
   27878:	mvn	r0, #0
   2787c:	str	r0, [fp, #-4]
   27880:	b	278a4 <main@@Base+0x48ec>
   27884:	ldrb	r0, [sp, #12]
   27888:	ldr	r1, [sp]
   2788c:	strb	r0, [r1]
   27890:	ldr	r0, [sp, #16]
   27894:	ldr	r1, [sp, #4]
   27898:	str	r0, [r1]
   2789c:	movw	r0, #0
   278a0:	str	r0, [fp, #-4]
   278a4:	ldr	r0, [fp, #-4]
   278a8:	mov	sp, fp
   278ac:	pop	{fp, pc}
   278b0:	sub	sp, sp, #4
   278b4:	str	r1, [sp]
   278b8:	movw	r1, #9
   278bc:	strb	r1, [r0]
   278c0:	ldr	r1, [sp]
   278c4:	str	r1, [r0, #4]
   278c8:	add	sp, sp, #4
   278cc:	bx	lr
   278d0:	push	{fp, lr}
   278d4:	mov	fp, sp
   278d8:	sub	sp, sp, #8
   278dc:	str	r0, [sp, #4]
   278e0:	ldr	r0, [sp, #4]
   278e4:	bl	29c9c <flatcc_builder_end_struct@@Base>
   278e8:	mov	sp, fp
   278ec:	pop	{fp, pc}
   278f0:	push	{fp, lr}
   278f4:	mov	fp, sp
   278f8:	sub	sp, sp, #24
   278fc:	str	r1, [sp, #12]
   27900:	str	r2, [sp, #16]
   27904:	str	r0, [sp, #8]
   27908:	ldr	r0, [sp, #12]
   2790c:	cmp	r0, #0
   27910:	beq	27920 <main@@Base+0x4968>
   27914:	ldr	r0, [sp, #16]
   27918:	cmp	r0, #0
   2791c:	bne	27948 <main@@Base+0x4990>
   27920:	ldr	r0, [sp, #12]
   27924:	ldr	r1, [sp, #16]
   27928:	cmp	r0, r1
   2792c:	movw	r0, #0
   27930:	moveq	r0, #1
   27934:	tst	r0, #1
   27938:	movw	r0, #0
   2793c:	mvneq	r0, #0
   27940:	str	r0, [fp, #-4]
   27944:	b	279b8 <main@@Base+0x4a00>
   27948:	ldr	r0, [sp, #8]
   2794c:	movw	r1, #8
   27950:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   27954:	str	r0, [sp, #4]
   27958:	movw	r1, #0
   2795c:	cmp	r0, r1
   27960:	bne	27970 <main@@Base+0x49b8>
   27964:	mvn	r0, #0
   27968:	str	r0, [fp, #-4]
   2796c:	b	279b8 <main@@Base+0x4a00>
   27970:	ldr	r0, [sp, #12]
   27974:	ldr	r1, [sp, #4]
   27978:	str	r0, [r1]
   2797c:	ldr	r0, [sp, #8]
   27980:	movw	r1, #9
   27984:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   27988:	str	r0, [sp, #4]
   2798c:	movw	r1, #0
   27990:	cmp	r0, r1
   27994:	bne	279a4 <main@@Base+0x49ec>
   27998:	mvn	r0, #0
   2799c:	str	r0, [fp, #-4]
   279a0:	b	279b8 <main@@Base+0x4a00>
   279a4:	ldr	r0, [sp, #16]
   279a8:	ldr	r1, [sp, #4]
   279ac:	str	r0, [r1]
   279b0:	movw	r0, #0
   279b4:	str	r0, [fp, #-4]
   279b8:	ldr	r0, [fp, #-4]
   279bc:	mov	sp, fp
   279c0:	pop	{fp, pc}
   279c4:	push	{fp, lr}
   279c8:	mov	fp, sp
   279cc:	sub	sp, sp, #8
   279d0:	ldr	r1, [pc, #76]	; 27a24 <main@@Base+0x4a6c>
   279d4:	add	r1, pc, r1
   279d8:	str	r0, [sp, #4]
   279dc:	ldr	r0, [sp, #4]
   279e0:	movw	r2, #0
   279e4:	bl	2b830 <flatcc_builder_check_required@@Base>
   279e8:	cmp	r0, #0
   279ec:	beq	279f4 <main@@Base+0x4a3c>
   279f0:	b	27a14 <main@@Base+0x4a5c>
   279f4:	ldr	r0, [pc, #44]	; 27a28 <main@@Base+0x4a70>
   279f8:	add	r0, pc, r0
   279fc:	ldr	r1, [pc, #40]	; 27a2c <main@@Base+0x4a74>
   27a00:	add	r1, pc, r1
   27a04:	ldr	r2, [pc, #36]	; 27a30 <main@@Base+0x4a78>
   27a08:	add	r3, pc, r2
   27a0c:	movw	r2, #241	; 0xf1
   27a10:	bl	12e68 <__assert_fail@plt>
   27a14:	ldr	r0, [sp, #4]
   27a18:	bl	2b920 <flatcc_builder_end_table@@Base>
   27a1c:	mov	sp, fp
   27a20:	pop	{fp, pc}
   27a24:			; <UNDEFINED> instruction: 0x0000e7b6
   27a28:	andeq	sp, r0, r3, lsl #31
   27a2c:	andeq	ip, r0, r7, ror #16
   27a30:	strdeq	sp, [r0], -sl
   27a34:	push	{fp, lr}
   27a38:	mov	fp, sp
   27a3c:	sub	sp, sp, #24
   27a40:	str	r0, [fp, #-4]
   27a44:	movw	r0, #0
   27a48:	strh	r0, [fp, #-6]
   27a4c:	ldr	r0, [fp, #-4]
   27a50:	movw	r1, #0
   27a54:	cmp	r0, r1
   27a58:	beq	27a64 <main@@Base+0x4aac>
   27a5c:	b	27a60 <main@@Base+0x4aa8>
   27a60:	b	27a84 <main@@Base+0x4acc>
   27a64:	ldr	r0, [pc, #176]	; 27b1c <main@@Base+0x4b64>
   27a68:	add	r0, pc, r0
   27a6c:	ldr	r1, [pc, #172]	; 27b20 <main@@Base+0x4b68>
   27a70:	add	r1, pc, r1
   27a74:	ldr	r2, [pc, #168]	; 27b24 <main@@Base+0x4b6c>
   27a78:	add	r3, pc, r2
   27a7c:	movw	r2, #819	; 0x333
   27a80:	bl	12e68 <__assert_fail@plt>
   27a84:	mov	r0, #0
   27a88:	strh	r0, [fp, #-8]
   27a8c:	ldr	r0, [fp, #-4]
   27a90:	str	r0, [sp, #8]
   27a94:	bl	2344c <main@@Base+0x494>
   27a98:	ldr	r1, [sp, #8]
   27a9c:	sub	r0, r1, r0
   27aa0:	str	r0, [sp, #12]
   27aa4:	ldr	r0, [sp, #12]
   27aa8:	bl	23470 <main@@Base+0x4b8>
   27aac:	ldrh	r1, [fp, #-8]
   27ab0:	add	r1, r1, #3
   27ab4:	lsl	r1, r1, #1
   27ab8:	cmp	r0, r1
   27abc:	bcc	27ad8 <main@@Base+0x4b20>
   27ac0:	ldr	r0, [sp, #12]
   27ac4:	ldrh	r1, [fp, #-8]
   27ac8:	add	r0, r0, r1, lsl #1
   27acc:	add	r0, r0, #4
   27ad0:	bl	23470 <main@@Base+0x4b8>
   27ad4:	strh	r0, [fp, #-6]
   27ad8:	ldrh	r0, [fp, #-6]
   27adc:	cmp	r0, #0
   27ae0:	beq	27b00 <main@@Base+0x4b48>
   27ae4:	ldr	r0, [fp, #-4]
   27ae8:	ldrh	r1, [fp, #-6]
   27aec:	add	r0, r0, r1
   27af0:	bl	25c44 <main@@Base+0x2c8c>
   27af4:	and	r0, r0, #255	; 0xff
   27af8:	str	r0, [sp, #4]
   27afc:	b	27b0c <main@@Base+0x4b54>
   27b00:	movw	r0, #0
   27b04:	str	r0, [sp, #4]
   27b08:	b	27b0c <main@@Base+0x4b54>
   27b0c:	ldr	r0, [sp, #4]
   27b10:	and	r0, r0, #255	; 0xff
   27b14:	mov	sp, fp
   27b18:	pop	{fp, pc}
   27b1c:	andeq	ip, r0, r5, lsl #11
   27b20:	andeq	ip, r0, r3, lsr #11
   27b24:	andeq	lr, r0, fp, asr #32
   27b28:	push	{fp, lr}
   27b2c:	mov	fp, sp
   27b30:	sub	sp, sp, #32
   27b34:	str	r0, [fp, #-8]
   27b38:	movw	r0, #0
   27b3c:	strh	r0, [fp, #-14]
   27b40:	ldr	r0, [fp, #-8]
   27b44:	movw	r1, #0
   27b48:	cmp	r0, r1
   27b4c:	beq	27b58 <main@@Base+0x4ba0>
   27b50:	b	27b54 <main@@Base+0x4b9c>
   27b54:	b	27b78 <main@@Base+0x4bc0>
   27b58:	ldr	r0, [pc, #192]	; 27c20 <main@@Base+0x4c68>
   27b5c:	add	r0, pc, r0
   27b60:	ldr	r1, [pc, #188]	; 27c24 <main@@Base+0x4c6c>
   27b64:	add	r1, pc, r1
   27b68:	ldr	r2, [pc, #184]	; 27c28 <main@@Base+0x4c70>
   27b6c:	add	r3, pc, r2
   27b70:	movw	r2, #819	; 0x333
   27b74:	bl	12e68 <__assert_fail@plt>
   27b78:	mov	r0, #1
   27b7c:	strh	r0, [sp, #16]
   27b80:	ldr	r0, [fp, #-8]
   27b84:	str	r0, [sp, #8]
   27b88:	bl	2344c <main@@Base+0x494>
   27b8c:	ldr	r1, [sp, #8]
   27b90:	sub	r0, r1, r0
   27b94:	str	r0, [sp, #12]
   27b98:	ldr	r0, [sp, #12]
   27b9c:	bl	23470 <main@@Base+0x4b8>
   27ba0:	ldrh	r1, [sp, #16]
   27ba4:	add	r1, r1, #3
   27ba8:	lsl	r1, r1, #1
   27bac:	cmp	r0, r1
   27bb0:	bcc	27bcc <main@@Base+0x4c14>
   27bb4:	ldr	r0, [sp, #12]
   27bb8:	ldrh	r1, [sp, #16]
   27bbc:	add	r0, r0, r1, lsl #1
   27bc0:	add	r0, r0, #4
   27bc4:	bl	23470 <main@@Base+0x4b8>
   27bc8:	strh	r0, [fp, #-14]
   27bcc:	ldrsh	r0, [fp, #-14]
   27bd0:	cmp	r0, #0
   27bd4:	beq	27c0c <main@@Base+0x4c54>
   27bd8:	ldr	r0, [fp, #-8]
   27bdc:	ldrh	r1, [fp, #-14]
   27be0:	add	r0, r0, r1
   27be4:	str	r0, [fp, #-12]
   27be8:	ldr	r0, [fp, #-12]
   27bec:	ldr	r1, [fp, #-12]
   27bf0:	str	r0, [sp, #4]
   27bf4:	mov	r0, r1
   27bf8:	bl	23414 <main@@Base+0x45c>
   27bfc:	ldr	r1, [sp, #4]
   27c00:	add	r0, r1, r0
   27c04:	str	r0, [fp, #-4]
   27c08:	b	27c14 <main@@Base+0x4c5c>
   27c0c:	movw	r0, #0
   27c10:	str	r0, [fp, #-4]
   27c14:	ldr	r0, [fp, #-4]
   27c18:	mov	sp, fp
   27c1c:	pop	{fp, pc}
   27c20:	muleq	r0, r1, r4
   27c24:	andeq	ip, r0, pc, lsr #9
   27c28:	andeq	sp, r0, pc, lsr #31
   27c2c:	movw	r0, #4
   27c30:	bx	lr
   27c34:	push	{fp, lr}
   27c38:	mov	fp, sp
   27c3c:	sub	sp, sp, #32
   27c40:	str	r0, [fp, #-8]
   27c44:	movw	r0, #0
   27c48:	strh	r0, [fp, #-14]
   27c4c:	ldr	r0, [fp, #-8]
   27c50:	movw	r1, #0
   27c54:	cmp	r0, r1
   27c58:	beq	27c64 <main@@Base+0x4cac>
   27c5c:	b	27c60 <main@@Base+0x4ca8>
   27c60:	b	27c84 <main@@Base+0x4ccc>
   27c64:	ldr	r0, [pc, #196]	; 27d30 <main@@Base+0x4d78>
   27c68:	add	r0, pc, r0
   27c6c:	ldr	r1, [pc, #192]	; 27d34 <main@@Base+0x4d7c>
   27c70:	add	r1, pc, r1
   27c74:	ldr	r2, [pc, #188]	; 27d38 <main@@Base+0x4d80>
   27c78:	add	r3, pc, r2
   27c7c:	movw	r2, #823	; 0x337
   27c80:	bl	12e68 <__assert_fail@plt>
   27c84:	mov	r0, #9
   27c88:	strh	r0, [sp, #16]
   27c8c:	ldr	r0, [fp, #-8]
   27c90:	str	r0, [sp, #8]
   27c94:	bl	2344c <main@@Base+0x494>
   27c98:	ldr	r1, [sp, #8]
   27c9c:	sub	r0, r1, r0
   27ca0:	str	r0, [sp, #12]
   27ca4:	ldr	r0, [sp, #12]
   27ca8:	bl	23470 <main@@Base+0x4b8>
   27cac:	ldrh	r1, [sp, #16]
   27cb0:	add	r1, r1, #3
   27cb4:	lsl	r1, r1, #1
   27cb8:	cmp	r0, r1
   27cbc:	bcc	27cd8 <main@@Base+0x4d20>
   27cc0:	ldr	r0, [sp, #12]
   27cc4:	ldrh	r1, [sp, #16]
   27cc8:	add	r0, r0, r1, lsl #1
   27ccc:	add	r0, r0, #4
   27cd0:	bl	23470 <main@@Base+0x4b8>
   27cd4:	strh	r0, [fp, #-14]
   27cd8:	ldrsh	r0, [fp, #-14]
   27cdc:	cmp	r0, #0
   27ce0:	beq	27d1c <main@@Base+0x4d64>
   27ce4:	ldr	r0, [fp, #-8]
   27ce8:	ldrh	r1, [fp, #-14]
   27cec:	add	r0, r0, r1
   27cf0:	str	r0, [fp, #-12]
   27cf4:	ldr	r0, [fp, #-12]
   27cf8:	add	r0, r0, #4
   27cfc:	ldr	r1, [fp, #-12]
   27d00:	str	r0, [sp, #4]
   27d04:	mov	r0, r1
   27d08:	bl	23414 <main@@Base+0x45c>
   27d0c:	ldr	r1, [sp, #4]
   27d10:	add	r0, r1, r0
   27d14:	str	r0, [fp, #-4]
   27d18:	b	27d24 <main@@Base+0x4d6c>
   27d1c:	movw	r0, #0
   27d20:	str	r0, [fp, #-4]
   27d24:	ldr	r0, [fp, #-4]
   27d28:	mov	sp, fp
   27d2c:	pop	{fp, pc}
   27d30:	andeq	ip, r0, r5, lsl #7
   27d34:	andeq	ip, r0, r3, lsr #7
   27d38:	andeq	lr, r0, sl, asr #2
   27d3c:	push	{fp, lr}
   27d40:	mov	fp, sp
   27d44:	sub	sp, sp, #16
   27d48:	str	r0, [fp, #-4]
   27d4c:	str	r1, [sp, #8]
   27d50:	ldr	r0, [fp, #-4]
   27d54:	ldr	r1, [sp, #8]
   27d58:	add	r0, r0, r1, lsl #2
   27d5c:	str	r0, [sp, #4]
   27d60:	ldr	r0, [fp, #-4]
   27d64:	bl	25bb8 <main@@Base+0x2c00>
   27d68:	ldr	r1, [sp, #8]
   27d6c:	cmp	r0, r1
   27d70:	bls	27d7c <main@@Base+0x4dc4>
   27d74:	b	27d78 <main@@Base+0x4dc0>
   27d78:	b	27d9c <main@@Base+0x4de4>
   27d7c:	ldr	r0, [pc, #64]	; 27dc4 <main@@Base+0x4e0c>
   27d80:	add	r0, pc, r0
   27d84:	ldr	r1, [pc, #60]	; 27dc8 <main@@Base+0x4e10>
   27d88:	add	r1, pc, r1
   27d8c:	ldr	r2, [pc, #56]	; 27dcc <main@@Base+0x4e14>
   27d90:	add	r3, pc, r2
   27d94:	movw	r2, #119	; 0x77
   27d98:	bl	12e68 <__assert_fail@plt>
   27d9c:	ldr	r0, [sp, #4]
   27da0:	ldr	r1, [sp, #4]
   27da4:	str	r0, [sp]
   27da8:	mov	r0, r1
   27dac:	bl	23414 <main@@Base+0x45c>
   27db0:	ldr	r1, [sp]
   27db4:	add	r0, r1, r0
   27db8:	add	r0, r0, #4
   27dbc:	mov	sp, fp
   27dc0:	pop	{fp, pc}
   27dc4:	andeq	ip, r0, r8, lsl #25
   27dc8:			; <UNDEFINED> instruction: 0x0000ccb7
   27dcc:	andeq	lr, r0, r9, lsr #2
   27dd0:	push	{fp, lr}
   27dd4:	mov	fp, sp
   27dd8:	sub	sp, sp, #16
   27ddc:	str	r0, [fp, #-4]
   27de0:	str	r1, [sp, #8]
   27de4:	ldr	r0, [sp, #8]
   27de8:	cmp	r0, #0
   27dec:	beq	27e24 <main@@Base+0x4e6c>
   27df0:	ldr	r0, [fp, #-4]
   27df4:	movw	r1, #13
   27df8:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   27dfc:	str	r0, [sp, #4]
   27e00:	movw	r1, #0
   27e04:	cmp	r0, r1
   27e08:	beq	27e24 <main@@Base+0x4e6c>
   27e0c:	ldr	r0, [sp, #8]
   27e10:	ldr	r1, [sp, #4]
   27e14:	str	r0, [r1]
   27e18:	movw	r0, #0
   27e1c:	str	r0, [sp]
   27e20:	b	27e30 <main@@Base+0x4e78>
   27e24:	mvn	r0, #0
   27e28:	str	r0, [sp]
   27e2c:	b	27e30 <main@@Base+0x4e78>
   27e30:	ldr	r0, [sp]
   27e34:	mov	sp, fp
   27e38:	pop	{fp, pc}
   27e3c:	push	{fp, lr}
   27e40:	mov	fp, sp
   27e44:	sub	sp, sp, #32
   27e48:	str	r0, [fp, #-8]
   27e4c:	movw	r0, #0
   27e50:	strh	r0, [fp, #-14]
   27e54:	ldr	r0, [fp, #-8]
   27e58:	movw	r1, #0
   27e5c:	cmp	r0, r1
   27e60:	beq	27e6c <main@@Base+0x4eb4>
   27e64:	b	27e68 <main@@Base+0x4eb0>
   27e68:	b	27e8c <main@@Base+0x4ed4>
   27e6c:	ldr	r0, [pc, #196]	; 27f38 <main@@Base+0x4f80>
   27e70:	add	r0, pc, r0
   27e74:	ldr	r1, [pc, #192]	; 27f3c <main@@Base+0x4f84>
   27e78:	add	r1, pc, r1
   27e7c:	ldr	r2, [pc, #188]	; 27f40 <main@@Base+0x4f88>
   27e80:	add	r3, pc, r2
   27e84:	movw	r2, #720	; 0x2d0
   27e88:	bl	12e68 <__assert_fail@plt>
   27e8c:	mov	r0, #13
   27e90:	strh	r0, [sp, #16]
   27e94:	ldr	r0, [fp, #-8]
   27e98:	str	r0, [sp, #8]
   27e9c:	bl	2344c <main@@Base+0x494>
   27ea0:	ldr	r1, [sp, #8]
   27ea4:	sub	r0, r1, r0
   27ea8:	str	r0, [sp, #12]
   27eac:	ldr	r0, [sp, #12]
   27eb0:	bl	23470 <main@@Base+0x4b8>
   27eb4:	ldrh	r1, [sp, #16]
   27eb8:	add	r1, r1, #3
   27ebc:	lsl	r1, r1, #1
   27ec0:	cmp	r0, r1
   27ec4:	bcc	27ee0 <main@@Base+0x4f28>
   27ec8:	ldr	r0, [sp, #12]
   27ecc:	ldrh	r1, [sp, #16]
   27ed0:	add	r0, r0, r1, lsl #1
   27ed4:	add	r0, r0, #4
   27ed8:	bl	23470 <main@@Base+0x4b8>
   27edc:	strh	r0, [fp, #-14]
   27ee0:	ldrsh	r0, [fp, #-14]
   27ee4:	cmp	r0, #0
   27ee8:	beq	27f24 <main@@Base+0x4f6c>
   27eec:	ldr	r0, [fp, #-8]
   27ef0:	ldrh	r1, [fp, #-14]
   27ef4:	add	r0, r0, r1
   27ef8:	str	r0, [fp, #-12]
   27efc:	ldr	r0, [fp, #-12]
   27f00:	add	r0, r0, #4
   27f04:	ldr	r1, [fp, #-12]
   27f08:	str	r0, [sp, #4]
   27f0c:	mov	r0, r1
   27f10:	bl	23414 <main@@Base+0x45c>
   27f14:	ldr	r1, [sp, #4]
   27f18:	add	r0, r1, r0
   27f1c:	str	r0, [fp, #-4]
   27f20:	b	27f2c <main@@Base+0x4f74>
   27f24:	movw	r0, #0
   27f28:	str	r0, [fp, #-4]
   27f2c:	ldr	r0, [fp, #-4]
   27f30:	mov	sp, fp
   27f34:	pop	{fp, pc}
   27f38:	andeq	ip, r0, sp, ror r1
   27f3c:	muleq	r0, fp, r1
   27f40:	andeq	lr, r0, r3, ror #1
   27f44:	push	{fp, lr}
   27f48:	mov	fp, sp
   27f4c:	sub	sp, sp, #48	; 0x30
   27f50:	str	r0, [fp, #-8]
   27f54:	vstr	s0, [fp, #-12]
   27f58:	vstr	s1, [fp, #-16]
   27f5c:	vstr	s2, [fp, #-20]	; 0xffffffec
   27f60:	vstr	d2, [sp, #16]
   27f64:	strb	r1, [sp, #15]
   27f68:	strh	r2, [sp, #12]
   27f6c:	strb	r3, [sp, #11]
   27f70:	ldr	r0, [fp, #-8]
   27f74:	bl	27fe4 <main@@Base+0x502c>
   27f78:	str	r0, [sp, #4]
   27f7c:	ldr	r0, [sp, #4]
   27f80:	movw	r1, #0
   27f84:	cmp	r0, r1
   27f88:	bne	27f98 <main@@Base+0x4fe0>
   27f8c:	movw	r0, #0
   27f90:	str	r0, [fp, #-4]
   27f94:	b	27fd8 <main@@Base+0x5020>
   27f98:	ldr	r0, [sp, #4]
   27f9c:	vldr	s0, [fp, #-12]
   27fa0:	vldr	s1, [fp, #-16]
   27fa4:	vldr	s2, [fp, #-20]	; 0xffffffec
   27fa8:	vldr	d2, [sp, #16]
   27fac:	ldrb	r1, [sp, #15]
   27fb0:	ldrh	r2, [sp, #12]
   27fb4:	sxtb	r1, r1
   27fb8:	sxth	r2, r2
   27fbc:	ldrsb	r3, [sp, #11]
   27fc0:	bl	28010 <main@@Base+0x5058>
   27fc4:	ldr	r1, [fp, #-8]
   27fc8:	str	r0, [sp]
   27fcc:	mov	r0, r1
   27fd0:	bl	280d0 <main@@Base+0x5118>
   27fd4:	str	r0, [fp, #-4]
   27fd8:	ldr	r0, [fp, #-4]
   27fdc:	mov	sp, fp
   27fe0:	pop	{fp, pc}
   27fe4:	push	{fp, lr}
   27fe8:	mov	fp, sp
   27fec:	sub	sp, sp, #8
   27ff0:	str	r0, [sp, #4]
   27ff4:	ldr	r0, [sp, #4]
   27ff8:	movw	r1, #32
   27ffc:	movw	r2, #16
   28000:	uxth	r2, r2
   28004:	bl	29af4 <flatcc_builder_start_struct@@Base>
   28008:	mov	sp, fp
   2800c:	pop	{fp, pc}
   28010:	push	{fp, lr}
   28014:	mov	fp, sp
   28018:	sub	sp, sp, #56	; 0x38
   2801c:	str	r0, [fp, #-4]
   28020:	vstr	s0, [fp, #-8]
   28024:	vstr	s1, [fp, #-12]
   28028:	vstr	s2, [fp, #-16]
   2802c:	vstr	d2, [fp, #-24]	; 0xffffffe8
   28030:	strb	r1, [fp, #-25]	; 0xffffffe7
   28034:	strh	r2, [sp, #28]
   28038:	strb	r3, [sp, #27]
   2803c:	ldr	r0, [fp, #-4]
   28040:	vldr	s0, [fp, #-8]
   28044:	bl	23ec0 <main@@Base+0xf08>
   28048:	ldr	r1, [fp, #-4]
   2804c:	add	r1, r1, #4
   28050:	vldr	s0, [fp, #-12]
   28054:	str	r0, [sp, #20]
   28058:	mov	r0, r1
   2805c:	bl	23ec0 <main@@Base+0xf08>
   28060:	ldr	r1, [fp, #-4]
   28064:	add	r1, r1, #8
   28068:	vldr	s0, [fp, #-16]
   2806c:	str	r0, [sp, #16]
   28070:	mov	r0, r1
   28074:	bl	23ec0 <main@@Base+0xf08>
   28078:	ldr	r1, [fp, #-4]
   2807c:	add	r1, r1, #16
   28080:	vldr	d0, [fp, #-24]	; 0xffffffe8
   28084:	str	r0, [sp, #12]
   28088:	mov	r0, r1
   2808c:	bl	23dec <main@@Base+0xe34>
   28090:	ldrb	r1, [fp, #-25]	; 0xffffffe7
   28094:	ldr	r2, [fp, #-4]
   28098:	strb	r1, [r2, #24]
   2809c:	ldr	r1, [fp, #-4]
   280a0:	add	r1, r1, #26
   280a4:	ldrh	r2, [sp, #28]
   280a8:	str	r0, [sp, #8]
   280ac:	mov	r0, r1
   280b0:	sxth	r1, r2
   280b4:	ldrsb	r2, [sp, #27]
   280b8:	bl	280f0 <main@@Base+0x5138>
   280bc:	ldr	r1, [fp, #-4]
   280c0:	str	r0, [sp, #4]
   280c4:	mov	r0, r1
   280c8:	mov	sp, fp
   280cc:	pop	{fp, pc}
   280d0:	push	{fp, lr}
   280d4:	mov	fp, sp
   280d8:	sub	sp, sp, #8
   280dc:	str	r0, [sp, #4]
   280e0:	ldr	r0, [sp, #4]
   280e4:	bl	29c9c <flatcc_builder_end_struct@@Base>
   280e8:	mov	sp, fp
   280ec:	pop	{fp, pc}
   280f0:	push	{fp, lr}
   280f4:	mov	fp, sp
   280f8:	sub	sp, sp, #16
   280fc:	str	r0, [fp, #-4]
   28100:	strh	r1, [fp, #-6]
   28104:	strb	r2, [fp, #-7]
   28108:	ldr	r0, [fp, #-4]
   2810c:	ldrsh	r1, [fp, #-6]
   28110:	bl	23f14 <main@@Base+0xf5c>
   28114:	ldrb	r1, [fp, #-7]
   28118:	ldr	r2, [fp, #-4]
   2811c:	strb	r1, [r2, #2]
   28120:	ldr	r1, [fp, #-4]
   28124:	str	r0, [sp, #4]
   28128:	mov	r0, r1
   2812c:	mov	sp, fp
   28130:	pop	{fp, pc}

00028134 <flatcc_builder_default_alloc@@Base>:
   28134:	push	{fp, lr}
   28138:	mov	fp, sp
   2813c:	sub	sp, sp, #32
   28140:	ldr	ip, [fp, #8]
   28144:	str	r0, [fp, #-8]
   28148:	str	r1, [fp, #-12]
   2814c:	str	r2, [sp, #16]
   28150:	str	r3, [sp, #12]
   28154:	ldr	r0, [sp, #16]
   28158:	cmp	r0, #0
   2815c:	bne	281a0 <flatcc_builder_default_alloc@@Base+0x6c>
   28160:	ldr	r0, [fp, #-12]
   28164:	ldr	r0, [r0]
   28168:	movw	r1, #0
   2816c:	cmp	r0, r1
   28170:	beq	28194 <flatcc_builder_default_alloc@@Base+0x60>
   28174:	ldr	r0, [fp, #-12]
   28178:	ldr	r0, [r0]
   2817c:	bl	12da8 <free@plt>
   28180:	ldr	r0, [fp, #-12]
   28184:	movw	r1, #0
   28188:	str	r1, [r0]
   2818c:	ldr	r0, [fp, #-12]
   28190:	str	r1, [r0, #4]
   28194:	movw	r0, #0
   28198:	str	r0, [fp, #-4]
   2819c:	b	2830c <flatcc_builder_default_alloc@@Base+0x1d8>
   281a0:	ldr	r0, [fp, #8]
   281a4:	sub	r0, r0, #1
   281a8:	cmp	r0, #6
   281ac:	str	r0, [sp]
   281b0:	bhi	28210 <flatcc_builder_default_alloc@@Base+0xdc>
   281b4:	add	r0, pc, #8
   281b8:	ldr	r1, [sp]
   281bc:	ldr	r2, [r0, r1, lsl #2]
   281c0:	add	pc, r0, r2
   281c4:	andeq	r0, r0, ip, lsl r0
   281c8:	andeq	r0, r0, ip, asr #32
   281cc:	andeq	r0, r0, ip, asr #32
   281d0:	andeq	r0, r0, r4, lsr r0
   281d4:	andeq	r0, r0, r8, lsr #32
   281d8:	andeq	r0, r0, ip, asr #32
   281dc:	andeq	r0, r0, r0, asr #32
   281e0:	movw	r0, #256	; 0x100
   281e4:	str	r0, [sp, #4]
   281e8:	b	28218 <flatcc_builder_default_alloc@@Base+0xe4>
   281ec:	ldr	r0, [sp, #16]
   281f0:	str	r0, [sp, #4]
   281f4:	b	28218 <flatcc_builder_default_alloc@@Base+0xe4>
   281f8:	movw	r0, #288	; 0x120
   281fc:	str	r0, [sp, #4]
   28200:	b	28218 <flatcc_builder_default_alloc@@Base+0xe4>
   28204:	movw	r0, #64	; 0x40
   28208:	str	r0, [sp, #4]
   2820c:	b	28218 <flatcc_builder_default_alloc@@Base+0xe4>
   28210:	movw	r0, #32
   28214:	str	r0, [sp, #4]
   28218:	b	2821c <flatcc_builder_default_alloc@@Base+0xe8>
   2821c:	ldr	r0, [sp, #4]
   28220:	ldr	r1, [sp, #16]
   28224:	cmp	r0, r1
   28228:	bcs	2823c <flatcc_builder_default_alloc@@Base+0x108>
   2822c:	ldr	r0, [sp, #4]
   28230:	lsl	r0, r0, #1
   28234:	str	r0, [sp, #4]
   28238:	b	2821c <flatcc_builder_default_alloc@@Base+0xe8>
   2823c:	ldr	r0, [sp, #16]
   28240:	ldr	r1, [fp, #-12]
   28244:	ldr	r1, [r1, #4]
   28248:	cmp	r0, r1
   2824c:	bhi	28274 <flatcc_builder_default_alloc@@Base+0x140>
   28250:	ldr	r0, [fp, #-12]
   28254:	ldr	r0, [r0, #4]
   28258:	lsr	r0, r0, #1
   2825c:	ldr	r1, [sp, #4]
   28260:	cmp	r0, r1
   28264:	bcc	28274 <flatcc_builder_default_alloc@@Base+0x140>
   28268:	movw	r0, #0
   2826c:	str	r0, [fp, #-4]
   28270:	b	2830c <flatcc_builder_default_alloc@@Base+0x1d8>
   28274:	ldr	r0, [fp, #-12]
   28278:	ldr	r0, [r0]
   2827c:	ldr	r1, [sp, #4]
   28280:	bl	12dcc <realloc@plt>
   28284:	str	r0, [sp, #8]
   28288:	movw	r1, #0
   2828c:	cmp	r0, r1
   28290:	bne	282a0 <flatcc_builder_default_alloc@@Base+0x16c>
   28294:	mvn	r0, #0
   28298:	str	r0, [fp, #-4]
   2829c:	b	2830c <flatcc_builder_default_alloc@@Base+0x1d8>
   282a0:	ldr	r0, [sp, #12]
   282a4:	cmp	r0, #0
   282a8:	beq	282ec <flatcc_builder_default_alloc@@Base+0x1b8>
   282ac:	ldr	r0, [fp, #-12]
   282b0:	ldr	r0, [r0, #4]
   282b4:	ldr	r1, [sp, #4]
   282b8:	cmp	r0, r1
   282bc:	bcs	282ec <flatcc_builder_default_alloc@@Base+0x1b8>
   282c0:	ldr	r0, [sp, #8]
   282c4:	ldr	r1, [fp, #-12]
   282c8:	ldr	r1, [r1, #4]
   282cc:	add	r0, r0, r1
   282d0:	ldr	r1, [sp, #4]
   282d4:	ldr	r2, [fp, #-12]
   282d8:	ldr	r2, [r2, #4]
   282dc:	sub	r2, r1, r2
   282e0:	movw	r1, #0
   282e4:	and	r1, r1, #255	; 0xff
   282e8:	bl	12e2c <memset@plt>
   282ec:	ldr	r0, [sp, #8]
   282f0:	ldr	r1, [fp, #-12]
   282f4:	str	r0, [r1]
   282f8:	ldr	r0, [sp, #4]
   282fc:	ldr	r1, [fp, #-12]
   28300:	str	r0, [r1, #4]
   28304:	movw	r0, #0
   28308:	str	r0, [fp, #-4]
   2830c:	ldr	r0, [fp, #-4]
   28310:	mov	sp, fp
   28314:	pop	{fp, pc}

00028318 <flatcc_builder_flush_vtable_cache@@Base>:
   28318:	push	{fp, lr}
   2831c:	mov	fp, sp
   28320:	sub	sp, sp, #8
   28324:	str	r0, [sp, #4]
   28328:	ldr	r0, [sp, #4]
   2832c:	add	r0, r0, #52	; 0x34
   28330:	add	r0, r0, #40	; 0x28
   28334:	str	r0, [sp]
   28338:	ldr	r0, [sp, #4]
   2833c:	ldr	r0, [r0, #116]	; 0x74
   28340:	cmp	r0, #0
   28344:	bne	2834c <flatcc_builder_flush_vtable_cache@@Base+0x34>
   28348:	b	28380 <flatcc_builder_flush_vtable_cache@@Base+0x68>
   2834c:	ldr	r0, [sp]
   28350:	ldr	r0, [r0]
   28354:	ldr	r1, [sp]
   28358:	ldr	r2, [r1, #4]
   2835c:	movw	r1, #0
   28360:	and	r1, r1, #255	; 0xff
   28364:	bl	12e2c <memset@plt>
   28368:	ldr	r0, [sp, #4]
   2836c:	movw	r1, #16
   28370:	str	r1, [r0, #124]	; 0x7c
   28374:	ldr	r0, [sp, #4]
   28378:	movw	r1, #0
   2837c:	str	r1, [r0, #120]	; 0x78
   28380:	mov	sp, fp
   28384:	pop	{fp, pc}

00028388 <flatcc_builder_custom_init@@Base>:
   28388:	push	{fp, lr}
   2838c:	mov	fp, sp
   28390:	sub	sp, sp, #24
   28394:	ldr	ip, [fp, #8]
   28398:	str	r0, [fp, #-4]
   2839c:	str	r1, [fp, #-8]
   283a0:	str	r2, [sp, #12]
   283a4:	str	r3, [sp, #8]
   283a8:	ldr	r0, [fp, #-4]
   283ac:	movw	r1, #0
   283b0:	and	r1, r1, #255	; 0xff
   283b4:	movw	r2, #232	; 0xe8
   283b8:	str	ip, [sp, #4]
   283bc:	bl	12e2c <memset@plt>
   283c0:	ldr	r0, [fp, #-8]
   283c4:	movw	r1, #0
   283c8:	cmp	r0, r1
   283cc:	bne	283f4 <flatcc_builder_custom_init@@Base+0x6c>
   283d0:	ldr	r0, [pc, #116]	; 2844c <flatcc_builder_custom_init@@Base+0xc4>
   283d4:	ldr	r0, [pc, r0]
   283d8:	ldr	r1, [fp, #-4]
   283dc:	movw	r2, #1
   283e0:	str	r2, [r1, #184]	; 0xb8
   283e4:	str	r0, [fp, #-8]
   283e8:	ldr	r0, [fp, #-4]
   283ec:	add	r0, r0, #188	; 0xbc
   283f0:	str	r0, [sp, #12]
   283f4:	ldr	r0, [sp, #8]
   283f8:	movw	r1, #0
   283fc:	cmp	r0, r1
   28400:	bne	28410 <flatcc_builder_custom_init@@Base+0x88>
   28404:	ldr	r0, [pc, #68]	; 28450 <flatcc_builder_custom_init@@Base+0xc8>
   28408:	ldr	r0, [pc, r0]
   2840c:	str	r0, [sp, #8]
   28410:	ldr	r0, [fp, #8]
   28414:	ldr	r1, [fp, #-4]
   28418:	str	r0, [r1, #40]	; 0x28
   2841c:	ldr	r0, [sp, #8]
   28420:	ldr	r1, [fp, #-4]
   28424:	str	r0, [r1, #48]	; 0x30
   28428:	ldr	r0, [sp, #12]
   2842c:	ldr	r1, [fp, #-4]
   28430:	str	r0, [r1, #36]	; 0x24
   28434:	ldr	r0, [fp, #-8]
   28438:	ldr	r1, [fp, #-4]
   2843c:	str	r0, [r1, #44]	; 0x2c
   28440:	movw	r0, #0
   28444:	mov	sp, fp
   28448:	pop	{fp, pc}
   2844c:	andeq	pc, r1, ip, lsl #25
   28450:	andeq	pc, r1, r4, asr ip	; <UNPREDICTABLE>

00028454 <flatcc_builder_init@@Base>:
   28454:	push	{fp, lr}
   28458:	mov	fp, sp
   2845c:	sub	sp, sp, #16
   28460:	str	r0, [fp, #-4]
   28464:	ldr	r0, [fp, #-4]
   28468:	movw	r1, #0
   2846c:	str	r1, [sp, #8]
   28470:	ldr	r2, [sp, #8]
   28474:	ldr	r3, [sp, #8]
   28478:	ldr	ip, [sp, #8]
   2847c:	str	ip, [sp]
   28480:	bl	28388 <flatcc_builder_custom_init@@Base>
   28484:	mov	sp, fp
   28488:	pop	{fp, pc}

0002848c <flatcc_builder_custom_reset@@Base>:
   2848c:	push	{r4, sl, fp, lr}
   28490:	add	fp, sp, #8
   28494:	sub	sp, sp, #40	; 0x28
   28498:	str	r0, [fp, #-16]
   2849c:	str	r1, [fp, #-20]	; 0xffffffec
   284a0:	str	r2, [sp, #24]
   284a4:	movw	r0, #0
   284a8:	str	r0, [sp, #16]
   284ac:	ldr	r0, [sp, #16]
   284b0:	cmp	r0, #8
   284b4:	bge	285c0 <flatcc_builder_custom_reset@@Base+0x134>
   284b8:	ldr	r0, [fp, #-16]
   284bc:	add	r0, r0, #52	; 0x34
   284c0:	ldr	r1, [sp, #16]
   284c4:	add	r0, r0, r1, lsl #3
   284c8:	str	r0, [sp, #20]
   284cc:	ldr	r0, [sp, #20]
   284d0:	ldr	r0, [r0]
   284d4:	movw	r1, #0
   284d8:	cmp	r0, r1
   284dc:	beq	28574 <flatcc_builder_custom_reset@@Base+0xe8>
   284e0:	ldr	r0, [sp, #16]
   284e4:	cmp	r0, #5
   284e8:	beq	28554 <flatcc_builder_custom_reset@@Base+0xc8>
   284ec:	ldr	r0, [sp, #24]
   284f0:	cmp	r0, #0
   284f4:	beq	28554 <flatcc_builder_custom_reset@@Base+0xc8>
   284f8:	ldr	r0, [fp, #-16]
   284fc:	ldr	r0, [r0, #48]	; 0x30
   28500:	ldr	r1, [fp, #-16]
   28504:	ldr	r1, [r1, #40]	; 0x28
   28508:	ldr	r2, [sp, #20]
   2850c:	ldr	r3, [sp, #16]
   28510:	str	r0, [sp, #12]
   28514:	mov	r0, r1
   28518:	mov	r1, r2
   2851c:	movw	r2, #1
   28520:	str	r2, [sp, #8]
   28524:	ldr	ip, [sp, #8]
   28528:	str	r3, [sp, #4]
   2852c:	mov	r3, ip
   28530:	ldr	lr, [sp, #4]
   28534:	str	lr, [sp]
   28538:	ldr	r4, [sp, #12]
   2853c:	blx	r4
   28540:	cmp	r0, #0
   28544:	beq	28554 <flatcc_builder_custom_reset@@Base+0xc8>
   28548:	mvn	r0, #0
   2854c:	str	r0, [fp, #-12]
   28550:	b	286bc <flatcc_builder_custom_reset@@Base+0x230>
   28554:	ldr	r0, [sp, #20]
   28558:	ldr	r0, [r0]
   2855c:	ldr	r1, [sp, #20]
   28560:	ldr	r2, [r1, #4]
   28564:	movw	r1, #0
   28568:	and	r1, r1, #255	; 0xff
   2856c:	bl	12e2c <memset@plt>
   28570:	b	285ac <flatcc_builder_custom_reset@@Base+0x120>
   28574:	ldr	r0, [sp, #20]
   28578:	ldr	r0, [r0, #4]
   2857c:	cmp	r0, #0
   28580:	bne	28588 <flatcc_builder_custom_reset@@Base+0xfc>
   28584:	b	285a8 <flatcc_builder_custom_reset@@Base+0x11c>
   28588:	ldr	r0, [pc, #312]	; 286c8 <flatcc_builder_custom_reset@@Base+0x23c>
   2858c:	add	r0, pc, r0
   28590:	ldr	r1, [pc, #308]	; 286cc <flatcc_builder_custom_reset@@Base+0x240>
   28594:	add	r1, pc, r1
   28598:	ldr	r2, [pc, #304]	; 286d0 <flatcc_builder_custom_reset@@Base+0x244>
   2859c:	add	r3, pc, r2
   285a0:	movw	r2, #434	; 0x1b2
   285a4:	bl	12e68 <__assert_fail@plt>
   285a8:	b	285ac <flatcc_builder_custom_reset@@Base+0x120>
   285ac:	b	285b0 <flatcc_builder_custom_reset@@Base+0x124>
   285b0:	ldr	r0, [sp, #16]
   285b4:	add	r0, r0, #1
   285b8:	str	r0, [sp, #16]
   285bc:	b	284ac <flatcc_builder_custom_reset@@Base+0x20>
   285c0:	ldr	r0, [fp, #-16]
   285c4:	movw	r1, #0
   285c8:	str	r1, [r0, #120]	; 0x78
   285cc:	ldr	r0, [fp, #-16]
   285d0:	ldr	r0, [r0, #124]	; 0x7c
   285d4:	cmp	r0, #0
   285d8:	bls	285e8 <flatcc_builder_custom_reset@@Base+0x15c>
   285dc:	ldr	r0, [fp, #-16]
   285e0:	movw	r1, #16
   285e4:	str	r1, [r0, #124]	; 0x7c
   285e8:	ldr	r0, [fp, #-16]
   285ec:	movw	r1, #0
   285f0:	strh	r1, [r0, #128]	; 0x80
   285f4:	ldr	r0, [fp, #-16]
   285f8:	movw	r1, #0
   285fc:	str	r1, [r0, #136]	; 0x88
   28600:	ldr	r0, [fp, #-16]
   28604:	str	r1, [r0, #140]	; 0x8c
   28608:	ldr	r0, [fp, #-16]
   2860c:	str	r1, [r0, #156]	; 0x9c
   28610:	ldr	r0, [fp, #-16]
   28614:	str	r1, [r0, #160]	; 0xa0
   28618:	ldr	r0, [fp, #-16]
   2861c:	str	r1, [r0, #20]
   28620:	ldr	r0, [fp, #-16]
   28624:	str	r1, [r0, #24]
   28628:	ldr	r0, [fp, #-16]
   2862c:	str	r1, [r0, #148]	; 0x94
   28630:	ldr	r0, [fp, #-16]
   28634:	str	r1, [r0, #152]	; 0x98
   28638:	ldr	r0, [fp, #-16]
   2863c:	ldr	r0, [r0, #60]	; 0x3c
   28640:	ldr	r2, [fp, #-16]
   28644:	str	r0, [r2, #16]
   28648:	ldr	r0, [fp, #-16]
   2864c:	ldr	r0, [r0, #76]	; 0x4c
   28650:	ldr	r2, [fp, #-16]
   28654:	str	r0, [r2]
   28658:	ldr	r0, [fp, #-16]
   2865c:	ldr	r0, [r0, #52]	; 0x34
   28660:	ldr	r2, [fp, #-16]
   28664:	str	r0, [r2, #4]
   28668:	ldr	r0, [fp, #-16]
   2866c:	str	r1, [r0, #32]
   28670:	ldr	r0, [fp, #-20]	; 0xffffffec
   28674:	cmp	r0, #0
   28678:	beq	28698 <flatcc_builder_custom_reset@@Base+0x20c>
   2867c:	ldr	r0, [fp, #-16]
   28680:	movw	r1, #0
   28684:	str	r1, [r0, #172]	; 0xac
   28688:	ldr	r0, [fp, #-16]
   2868c:	str	r1, [r0, #176]	; 0xb0
   28690:	ldr	r0, [fp, #-16]
   28694:	str	r1, [r0, #180]	; 0xb4
   28698:	ldr	r0, [fp, #-16]
   2869c:	ldr	r0, [r0, #184]	; 0xb8
   286a0:	cmp	r0, #0
   286a4:	beq	286b4 <flatcc_builder_custom_reset@@Base+0x228>
   286a8:	ldr	r0, [fp, #-16]
   286ac:	add	r0, r0, #188	; 0xbc
   286b0:	bl	2e03c <flatcc_emitter_reset@@Base>
   286b4:	movw	r0, #0
   286b8:	str	r0, [fp, #-12]
   286bc:	ldr	r0, [fp, #-12]
   286c0:	sub	sp, fp, #8
   286c4:	pop	{r4, sl, fp, pc}
   286c8:	andeq	sp, r0, r4, lsl lr
   286cc:	andeq	sp, r0, lr, lsl lr
   286d0:	andeq	sp, r0, r3, ror lr

000286d4 <flatcc_builder_reset@@Base>:
   286d4:	push	{fp, lr}
   286d8:	mov	fp, sp
   286dc:	sub	sp, sp, #8
   286e0:	str	r0, [sp, #4]
   286e4:	ldr	r0, [sp, #4]
   286e8:	movw	r1, #0
   286ec:	str	r1, [sp]
   286f0:	ldr	r2, [sp]
   286f4:	bl	2848c <flatcc_builder_custom_reset@@Base>
   286f8:	mov	sp, fp
   286fc:	pop	{fp, pc}

00028700 <flatcc_builder_clear@@Base>:
   28700:	push	{r4, sl, fp, lr}
   28704:	add	fp, sp, #8
   28708:	sub	sp, sp, #32
   2870c:	str	r0, [fp, #-12]
   28710:	movw	r0, #0
   28714:	str	r0, [sp, #20]
   28718:	ldr	r0, [sp, #20]
   2871c:	cmp	r0, #8
   28720:	bge	28790 <flatcc_builder_clear@@Base+0x90>
   28724:	ldr	r0, [fp, #-12]
   28728:	add	r0, r0, #52	; 0x34
   2872c:	ldr	r1, [sp, #20]
   28730:	add	r0, r0, r1, lsl #3
   28734:	str	r0, [fp, #-16]
   28738:	ldr	r0, [fp, #-12]
   2873c:	ldr	r0, [r0, #48]	; 0x30
   28740:	ldr	r1, [fp, #-12]
   28744:	ldr	r1, [r1, #40]	; 0x28
   28748:	ldr	r2, [fp, #-16]
   2874c:	ldr	r3, [sp, #20]
   28750:	str	r0, [sp, #16]
   28754:	mov	r0, r1
   28758:	mov	r1, r2
   2875c:	movw	r2, #0
   28760:	str	r2, [sp, #12]
   28764:	ldr	ip, [sp, #12]
   28768:	str	r3, [sp, #8]
   2876c:	mov	r3, ip
   28770:	ldr	lr, [sp, #8]
   28774:	str	lr, [sp]
   28778:	ldr	r4, [sp, #16]
   2877c:	blx	r4
   28780:	ldr	r0, [sp, #20]
   28784:	add	r0, r0, #1
   28788:	str	r0, [sp, #20]
   2878c:	b	28718 <flatcc_builder_clear@@Base+0x18>
   28790:	ldr	r0, [fp, #-12]
   28794:	ldr	r0, [r0, #184]	; 0xb8
   28798:	cmp	r0, #0
   2879c:	beq	287ac <flatcc_builder_clear@@Base+0xac>
   287a0:	ldr	r0, [fp, #-12]
   287a4:	add	r0, r0, #188	; 0xbc
   287a8:	bl	2e1d4 <flatcc_emitter_clear@@Base>
   287ac:	ldr	r0, [fp, #-12]
   287b0:	movw	r1, #0
   287b4:	and	r1, r1, #255	; 0xff
   287b8:	movw	r2, #232	; 0xe8
   287bc:	bl	12e2c <memset@plt>
   287c0:	sub	sp, fp, #8
   287c4:	pop	{r4, sl, fp, pc}

000287c8 <flatcc_builder_enter_user_frame_ptr@@Base>:
   287c8:	push	{fp, lr}
   287cc:	mov	fp, sp
   287d0:	sub	sp, sp, #24
   287d4:	str	r0, [fp, #-8]
   287d8:	str	r1, [sp, #12]
   287dc:	ldr	r0, [sp, #12]
   287e0:	add	r0, r0, #4
   287e4:	sub	r0, r0, #1
   287e8:	mvn	r1, #3
   287ec:	and	r0, r0, r1
   287f0:	add	r0, r0, #4
   287f4:	str	r0, [sp, #12]
   287f8:	ldr	r0, [fp, #-8]
   287fc:	ldr	r1, [fp, #-8]
   28800:	ldr	r2, [r1, #228]	; 0xe4
   28804:	ldr	r3, [sp, #12]
   28808:	movw	r1, #7
   2880c:	movw	ip, #0
   28810:	str	ip, [sp]
   28814:	bl	2889c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   28818:	str	r0, [sp, #8]
   2881c:	movw	r1, #0
   28820:	cmp	r0, r1
   28824:	bne	28834 <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   28828:	movw	r0, #0
   2882c:	str	r0, [fp, #-4]
   28830:	b	28890 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   28834:	ldr	r0, [sp, #8]
   28838:	ldr	r2, [sp, #12]
   2883c:	movw	r1, #0
   28840:	and	r1, r1, #255	; 0xff
   28844:	bl	12e2c <memset@plt>
   28848:	ldr	r0, [fp, #-8]
   2884c:	ldr	r0, [r0, #224]	; 0xe0
   28850:	ldr	r1, [sp, #8]
   28854:	add	r2, r1, #4
   28858:	str	r2, [sp, #8]
   2885c:	str	r0, [r1]
   28860:	ldr	r0, [fp, #-8]
   28864:	ldr	r0, [r0, #228]	; 0xe4
   28868:	add	r0, r0, #4
   2886c:	ldr	r1, [fp, #-8]
   28870:	str	r0, [r1, #224]	; 0xe0
   28874:	ldr	r0, [sp, #12]
   28878:	ldr	r1, [fp, #-8]
   2887c:	ldr	r2, [r1, #228]	; 0xe4
   28880:	add	r0, r2, r0
   28884:	str	r0, [r1, #228]	; 0xe4
   28888:	ldr	r0, [sp, #8]
   2888c:	str	r0, [fp, #-4]
   28890:	ldr	r0, [fp, #-4]
   28894:	mov	sp, fp
   28898:	pop	{fp, pc}
   2889c:	push	{fp, lr}
   288a0:	mov	fp, sp
   288a4:	sub	sp, sp, #32
   288a8:	ldr	ip, [fp, #8]
   288ac:	str	r0, [fp, #-4]
   288b0:	str	r1, [fp, #-8]
   288b4:	str	r2, [fp, #-12]
   288b8:	str	r3, [sp, #16]
   288bc:	ldr	r0, [fp, #-4]
   288c0:	add	r0, r0, #52	; 0x34
   288c4:	ldr	r1, [fp, #-8]
   288c8:	add	r0, r0, r1, lsl #3
   288cc:	str	r0, [sp, #12]
   288d0:	ldr	r0, [fp, #-12]
   288d4:	ldr	r1, [sp, #16]
   288d8:	add	r0, r0, r1
   288dc:	ldr	r1, [sp, #12]
   288e0:	ldr	r1, [r1, #4]
   288e4:	cmp	r0, r1
   288e8:	bls	28960 <flatcc_builder_enter_user_frame_ptr@@Base+0x198>
   288ec:	ldr	r0, [fp, #-4]
   288f0:	ldr	r0, [r0, #48]	; 0x30
   288f4:	ldr	r1, [fp, #-4]
   288f8:	ldr	r1, [r1, #40]	; 0x28
   288fc:	ldr	r2, [sp, #12]
   28900:	ldr	r3, [fp, #-12]
   28904:	ldr	ip, [sp, #16]
   28908:	add	r3, r3, ip
   2890c:	ldr	ip, [fp, #8]
   28910:	ldr	lr, [fp, #-8]
   28914:	str	r0, [sp, #8]
   28918:	mov	r0, r1
   2891c:	mov	r1, r2
   28920:	mov	r2, r3
   28924:	mov	r3, ip
   28928:	str	lr, [sp]
   2892c:	ldr	ip, [sp, #8]
   28930:	blx	ip
   28934:	cmp	r0, #0
   28938:	beq	2895c <flatcc_builder_enter_user_frame_ptr@@Base+0x194>
   2893c:	ldr	r0, [pc, #52]	; 28978 <flatcc_builder_enter_user_frame_ptr@@Base+0x1b0>
   28940:	add	r0, pc, r0
   28944:	ldr	r1, [pc, #48]	; 2897c <flatcc_builder_enter_user_frame_ptr@@Base+0x1b4>
   28948:	add	r1, pc, r1
   2894c:	ldr	r2, [pc, #44]	; 28980 <flatcc_builder_enter_user_frame_ptr@@Base+0x1b8>
   28950:	add	r3, pc, r2
   28954:	movw	r2, #308	; 0x134
   28958:	bl	12e68 <__assert_fail@plt>
   2895c:	b	28960 <flatcc_builder_enter_user_frame_ptr@@Base+0x198>
   28960:	ldr	r0, [sp, #12]
   28964:	ldr	r0, [r0]
   28968:	ldr	r1, [fp, #-12]
   2896c:	add	r0, r0, r1
   28970:	mov	sp, fp
   28974:	pop	{fp, pc}
   28978:	andeq	lr, r0, pc, lsr #24
   2897c:	andeq	sp, r0, sl, ror #20
   28980:	andeq	lr, r0, r9, asr sl

00028984 <flatcc_builder_enter_user_frame@@Base>:
   28984:	push	{fp, lr}
   28988:	mov	fp, sp
   2898c:	sub	sp, sp, #24
   28990:	str	r0, [fp, #-8]
   28994:	str	r1, [sp, #12]
   28998:	ldr	r0, [sp, #12]
   2899c:	add	r0, r0, #4
   289a0:	sub	r0, r0, #1
   289a4:	mvn	r1, #3
   289a8:	and	r0, r0, r1
   289ac:	add	r0, r0, #4
   289b0:	str	r0, [sp, #12]
   289b4:	ldr	r0, [fp, #-8]
   289b8:	ldr	r1, [fp, #-8]
   289bc:	ldr	r2, [r1, #228]	; 0xe4
   289c0:	ldr	r3, [sp, #12]
   289c4:	movw	r1, #7
   289c8:	movw	ip, #0
   289cc:	str	ip, [sp]
   289d0:	bl	2889c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   289d4:	str	r0, [sp, #8]
   289d8:	movw	r1, #0
   289dc:	cmp	r0, r1
   289e0:	bne	289f0 <flatcc_builder_enter_user_frame@@Base+0x6c>
   289e4:	movw	r0, #0
   289e8:	str	r0, [fp, #-4]
   289ec:	b	28a50 <flatcc_builder_enter_user_frame@@Base+0xcc>
   289f0:	ldr	r0, [sp, #8]
   289f4:	ldr	r2, [sp, #12]
   289f8:	movw	r1, #0
   289fc:	and	r1, r1, #255	; 0xff
   28a00:	bl	12e2c <memset@plt>
   28a04:	ldr	r0, [fp, #-8]
   28a08:	ldr	r0, [r0, #224]	; 0xe0
   28a0c:	ldr	r1, [sp, #8]
   28a10:	add	r2, r1, #4
   28a14:	str	r2, [sp, #8]
   28a18:	str	r0, [r1]
   28a1c:	ldr	r0, [fp, #-8]
   28a20:	ldr	r0, [r0, #228]	; 0xe4
   28a24:	add	r0, r0, #4
   28a28:	ldr	r1, [fp, #-8]
   28a2c:	str	r0, [r1, #224]	; 0xe0
   28a30:	ldr	r0, [sp, #12]
   28a34:	ldr	r1, [fp, #-8]
   28a38:	ldr	r2, [r1, #228]	; 0xe4
   28a3c:	add	r0, r2, r0
   28a40:	str	r0, [r1, #228]	; 0xe4
   28a44:	ldr	r0, [fp, #-8]
   28a48:	ldr	r0, [r0, #224]	; 0xe0
   28a4c:	str	r0, [fp, #-4]
   28a50:	ldr	r0, [fp, #-4]
   28a54:	mov	sp, fp
   28a58:	pop	{fp, pc}

00028a5c <flatcc_builder_exit_user_frame@@Base>:
   28a5c:	push	{fp, lr}
   28a60:	mov	fp, sp
   28a64:	sub	sp, sp, #8
   28a68:	str	r0, [sp, #4]
   28a6c:	ldr	r0, [sp, #4]
   28a70:	ldr	r0, [r0, #224]	; 0xe0
   28a74:	cmp	r0, #0
   28a78:	bls	28a80 <flatcc_builder_exit_user_frame@@Base+0x24>
   28a7c:	b	28aa0 <flatcc_builder_exit_user_frame@@Base+0x44>
   28a80:	ldr	r0, [pc, #100]	; 28aec <flatcc_builder_exit_user_frame@@Base+0x90>
   28a84:	add	r0, pc, r0
   28a88:	ldr	r1, [pc, #96]	; 28af0 <flatcc_builder_exit_user_frame@@Base+0x94>
   28a8c:	add	r1, pc, r1
   28a90:	ldr	r2, [pc, #92]	; 28af4 <flatcc_builder_exit_user_frame@@Base+0x98>
   28a94:	add	r3, pc, r2
   28a98:	movw	r2, #542	; 0x21e
   28a9c:	bl	12e68 <__assert_fail@plt>
   28aa0:	ldr	r0, [sp, #4]
   28aa4:	ldr	r0, [r0, #108]	; 0x6c
   28aa8:	ldr	r1, [sp, #4]
   28aac:	ldr	r1, [r1, #224]	; 0xe0
   28ab0:	add	r0, r0, r1
   28ab4:	str	r0, [sp]
   28ab8:	ldr	r0, [sp, #4]
   28abc:	ldr	r0, [r0, #224]	; 0xe0
   28ac0:	sub	r0, r0, #4
   28ac4:	ldr	r1, [sp, #4]
   28ac8:	str	r0, [r1, #228]	; 0xe4
   28acc:	ldr	r0, [sp]
   28ad0:	mvn	r1, #3
   28ad4:	add	r0, r0, r1
   28ad8:	ldr	r0, [r0]
   28adc:	ldr	r1, [sp, #4]
   28ae0:	str	r0, [r1, #224]	; 0xe0
   28ae4:	mov	sp, fp
   28ae8:	pop	{fp, pc}
   28aec:	andeq	sp, r0, r9, asr #19
   28af0:	andeq	sp, r0, r6, lsr #18
   28af4:	ldrdeq	sp, [r0], -r2

00028af8 <flatcc_builder_exit_user_frame_at@@Base>:
   28af8:	push	{fp, lr}
   28afc:	mov	fp, sp
   28b00:	sub	sp, sp, #8
   28b04:	str	r0, [sp, #4]
   28b08:	str	r1, [sp]
   28b0c:	ldr	r0, [sp, #4]
   28b10:	ldr	r0, [r0, #224]	; 0xe0
   28b14:	ldr	r1, [sp]
   28b18:	cmp	r0, r1
   28b1c:	bcc	28b24 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   28b20:	b	28b44 <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   28b24:	ldr	r0, [pc, #52]	; 28b60 <flatcc_builder_exit_user_frame_at@@Base+0x68>
   28b28:	add	r0, pc, r0
   28b2c:	ldr	r1, [pc, #48]	; 28b64 <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   28b30:	add	r1, pc, r1
   28b34:	ldr	r2, [pc, #44]	; 28b68 <flatcc_builder_exit_user_frame_at@@Base+0x70>
   28b38:	add	r3, pc, r2
   28b3c:	movw	r2, #551	; 0x227
   28b40:	bl	12e68 <__assert_fail@plt>
   28b44:	ldr	r0, [sp]
   28b48:	ldr	r1, [sp, #4]
   28b4c:	str	r0, [r1, #224]	; 0xe0
   28b50:	ldr	r0, [sp, #4]
   28b54:	bl	28a5c <flatcc_builder_exit_user_frame@@Base>
   28b58:	mov	sp, fp
   28b5c:	pop	{fp, pc}
   28b60:	andeq	sp, r0, r8, ror r9
   28b64:	andeq	sp, r0, r2, lsl #17
   28b68:	andeq	sp, r0, r7, lsl #19

00028b6c <flatcc_builder_get_current_user_frame@@Base>:
   28b6c:	sub	sp, sp, #4
   28b70:	str	r0, [sp]
   28b74:	ldr	r0, [sp]
   28b78:	ldr	r0, [r0, #224]	; 0xe0
   28b7c:	add	sp, sp, #4
   28b80:	bx	lr

00028b84 <flatcc_builder_get_user_frame_ptr@@Base>:
   28b84:	sub	sp, sp, #8
   28b88:	str	r0, [sp, #4]
   28b8c:	str	r1, [sp]
   28b90:	ldr	r0, [sp, #4]
   28b94:	ldr	r0, [r0, #108]	; 0x6c
   28b98:	ldr	r1, [sp]
   28b9c:	add	r0, r0, r1
   28ba0:	add	sp, sp, #8
   28ba4:	bx	lr

00028ba8 <flatcc_builder_embed_buffer@@Base>:
   28ba8:	push	{fp, lr}
   28bac:	mov	fp, sp
   28bb0:	sub	sp, sp, #120	; 0x78
   28bb4:	ldr	ip, [fp, #12]
   28bb8:	ldr	lr, [fp, #8]
   28bbc:	str	r0, [fp, #-8]
   28bc0:	strh	r1, [fp, #-10]
   28bc4:	str	r2, [fp, #-16]
   28bc8:	str	r3, [fp, #-20]	; 0xffffffec
   28bcc:	strh	lr, [fp, #-22]	; 0xffffffea
   28bd0:	ldr	r0, [fp, #12]
   28bd4:	and	r0, r0, #2
   28bd8:	str	r0, [sp, #12]
   28bdc:	ldr	r0, [fp, #-8]
   28be0:	ldrh	r1, [fp, #-10]
   28be4:	ldr	r2, [fp, #-8]
   28be8:	ldr	r2, [r2, #152]	; 0x98
   28bec:	cmp	r2, #0
   28bf0:	movw	r2, #0
   28bf4:	moveq	r2, #1
   28bf8:	mvn	r3, #0
   28bfc:	eor	r2, r2, r3
   28c00:	and	r3, r2, #1
   28c04:	sub	r2, fp, #22
   28c08:	str	r1, [sp, #8]
   28c0c:	mov	r1, r2
   28c10:	ldr	r2, [sp, #8]
   28c14:	uxth	r2, r2
   28c18:	str	ip, [sp, #4]
   28c1c:	bl	28d90 <flatcc_builder_embed_buffer@@Base+0x1e8>
   28c20:	cmp	r0, #0
   28c24:	beq	28c34 <flatcc_builder_embed_buffer@@Base+0x8c>
   28c28:	movw	r0, #0
   28c2c:	str	r0, [fp, #-4]
   28c30:	b	28d80 <flatcc_builder_embed_buffer@@Base+0x1d8>
   28c34:	ldr	r0, [fp, #-8]
   28c38:	ldr	r1, [fp, #-20]	; 0xffffffec
   28c3c:	ldr	r2, [sp, #12]
   28c40:	cmp	r2, #0
   28c44:	movw	r2, #0
   28c48:	movne	r2, #1
   28c4c:	tst	r2, #1
   28c50:	movw	r2, #4
   28c54:	moveq	r2, #0
   28c58:	add	r1, r1, r2
   28c5c:	ldrh	r2, [fp, #-22]	; 0xffffffea
   28c60:	bl	28efc <flatcc_builder_embed_buffer@@Base+0x354>
   28c64:	str	r0, [fp, #-32]	; 0xffffffe0
   28c68:	ldr	r0, [fp, #-20]	; 0xffffffec
   28c6c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   28c70:	add	r0, r0, r1
   28c74:	bl	28f30 <flatcc_builder_embed_buffer@@Base+0x388>
   28c78:	str	r0, [fp, #-28]	; 0xffffffe4
   28c7c:	movw	r0, #0
   28c80:	str	r0, [sp, #16]
   28c84:	str	r0, [sp, #20]
   28c88:	ldr	r0, [fp, #-8]
   28c8c:	ldr	r0, [r0, #152]	; 0x98
   28c90:	cmp	r0, #0
   28c94:	beq	28cd4 <flatcc_builder_embed_buffer@@Base+0x12c>
   28c98:	ldr	r0, [sp, #16]
   28c9c:	add	r0, r0, #4
   28ca0:	str	r0, [sp, #16]
   28ca4:	add	r0, sp, #16
   28ca8:	add	r0, r0, #8
   28cac:	ldr	r1, [sp, #20]
   28cb0:	sub	r2, fp, #28
   28cb4:	str	r2, [r0, r1, lsl #3]
   28cb8:	ldr	r1, [sp, #20]
   28cbc:	add	r0, r0, r1, lsl #3
   28cc0:	movw	r1, #4
   28cc4:	str	r1, [r0, #4]
   28cc8:	ldr	r0, [sp, #20]
   28ccc:	add	r0, r0, #1
   28cd0:	str	r0, [sp, #20]
   28cd4:	ldr	r0, [fp, #-20]	; 0xffffffec
   28cd8:	cmp	r0, #0
   28cdc:	bls	28d20 <flatcc_builder_embed_buffer@@Base+0x178>
   28ce0:	ldr	r0, [fp, #-20]	; 0xffffffec
   28ce4:	ldr	r1, [sp, #16]
   28ce8:	add	r0, r1, r0
   28cec:	str	r0, [sp, #16]
   28cf0:	ldr	r0, [fp, #-16]
   28cf4:	add	r1, sp, #16
   28cf8:	add	r1, r1, #8
   28cfc:	ldr	r2, [sp, #20]
   28d00:	str	r0, [r1, r2, lsl #3]
   28d04:	ldr	r0, [fp, #-20]	; 0xffffffec
   28d08:	ldr	r2, [sp, #20]
   28d0c:	add	r1, r1, r2, lsl #3
   28d10:	str	r0, [r1, #4]
   28d14:	ldr	r0, [sp, #20]
   28d18:	add	r0, r0, #1
   28d1c:	str	r0, [sp, #20]
   28d20:	ldr	r0, [fp, #-32]	; 0xffffffe0
   28d24:	cmp	r0, #0
   28d28:	bls	28d70 <flatcc_builder_embed_buffer@@Base+0x1c8>
   28d2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   28d30:	ldr	r1, [sp, #16]
   28d34:	add	r0, r1, r0
   28d38:	str	r0, [sp, #16]
   28d3c:	add	r0, sp, #16
   28d40:	add	r0, r0, #8
   28d44:	ldr	r1, [sp, #20]
   28d48:	ldr	r2, [pc, #60]	; 28d8c <flatcc_builder_embed_buffer@@Base+0x1e4>
   28d4c:	ldr	r2, [pc, r2]
   28d50:	str	r2, [r0, r1, lsl #3]
   28d54:	ldr	r1, [fp, #-32]	; 0xffffffe0
   28d58:	ldr	r2, [sp, #20]
   28d5c:	add	r0, r0, r2, lsl #3
   28d60:	str	r1, [r0, #4]
   28d64:	ldr	r0, [sp, #20]
   28d68:	add	r0, r0, #1
   28d6c:	str	r0, [sp, #20]
   28d70:	ldr	r0, [fp, #-8]
   28d74:	add	r1, sp, #16
   28d78:	bl	28f44 <flatcc_builder_embed_buffer@@Base+0x39c>
   28d7c:	str	r0, [fp, #-4]
   28d80:	ldr	r0, [fp, #-4]
   28d84:	mov	sp, fp
   28d88:	pop	{fp, pc}
   28d8c:	andeq	pc, r1, r4, lsl #6
   28d90:	push	{fp, lr}
   28d94:	mov	fp, sp
   28d98:	sub	sp, sp, #104	; 0x68
   28d9c:	str	r0, [fp, #-4]
   28da0:	str	r1, [fp, #-8]
   28da4:	strh	r2, [fp, #-10]
   28da8:	str	r3, [fp, #-16]
   28dac:	ldrh	r0, [fp, #-10]
   28db0:	cmp	r0, #0
   28db4:	beq	28dc4 <flatcc_builder_embed_buffer@@Base+0x21c>
   28db8:	ldrh	r0, [fp, #-10]
   28dbc:	str	r0, [sp, #8]
   28dc0:	b	28df8 <flatcc_builder_embed_buffer@@Base+0x250>
   28dc4:	ldr	r0, [fp, #-4]
   28dc8:	ldrh	r0, [r0, #132]	; 0x84
   28dcc:	cmp	r0, #0
   28dd0:	beq	28de4 <flatcc_builder_embed_buffer@@Base+0x23c>
   28dd4:	ldr	r0, [fp, #-4]
   28dd8:	ldrh	r0, [r0, #132]	; 0x84
   28ddc:	str	r0, [sp, #4]
   28de0:	b	28df0 <flatcc_builder_embed_buffer@@Base+0x248>
   28de4:	movw	r0, #1
   28de8:	str	r0, [sp, #4]
   28dec:	b	28df0 <flatcc_builder_embed_buffer@@Base+0x248>
   28df0:	ldr	r0, [sp, #4]
   28df4:	str	r0, [sp, #8]
   28df8:	ldr	r0, [sp, #8]
   28dfc:	strh	r0, [fp, #-10]
   28e00:	ldr	r0, [fp, #-8]
   28e04:	movw	r1, #4
   28e08:	uxth	r1, r1
   28e0c:	bl	2a8f0 <flatcc_builder_start_vector@@Base+0xac>
   28e10:	ldr	r0, [fp, #-8]
   28e14:	ldrh	r1, [fp, #-10]
   28e18:	bl	2a8f0 <flatcc_builder_start_vector@@Base+0xac>
   28e1c:	ldr	r0, [fp, #-16]
   28e20:	cmp	r0, #0
   28e24:	bne	28ee0 <flatcc_builder_embed_buffer@@Base+0x338>
   28e28:	ldr	r0, [fp, #-4]
   28e2c:	ldrh	r1, [fp, #-10]
   28e30:	bl	2dd24 <flatcc_builder_get_emit_context@@Base+0x18>
   28e34:	str	r0, [fp, #-20]	; 0xffffffec
   28e38:	ldr	r0, [fp, #-20]	; 0xffffffec
   28e3c:	cmp	r0, #0
   28e40:	beq	28edc <flatcc_builder_embed_buffer@@Base+0x334>
   28e44:	movw	r0, #0
   28e48:	str	r0, [sp, #12]
   28e4c:	str	r0, [sp, #16]
   28e50:	ldr	r0, [fp, #-20]	; 0xffffffec
   28e54:	cmp	r0, #0
   28e58:	bls	28ea0 <flatcc_builder_embed_buffer@@Base+0x2f8>
   28e5c:	ldr	r0, [fp, #-20]	; 0xffffffec
   28e60:	ldr	r1, [sp, #12]
   28e64:	add	r0, r1, r0
   28e68:	str	r0, [sp, #12]
   28e6c:	add	r0, sp, #12
   28e70:	add	r0, r0, #8
   28e74:	ldr	r1, [sp, #16]
   28e78:	ldr	r2, [pc, #120]	; 28ef8 <flatcc_builder_embed_buffer@@Base+0x350>
   28e7c:	ldr	r2, [pc, r2]
   28e80:	str	r2, [r0, r1, lsl #3]
   28e84:	ldr	r1, [fp, #-20]	; 0xffffffec
   28e88:	ldr	r2, [sp, #16]
   28e8c:	add	r0, r0, r2, lsl #3
   28e90:	str	r1, [r0, #4]
   28e94:	ldr	r0, [sp, #16]
   28e98:	add	r0, r0, #1
   28e9c:	str	r0, [sp, #16]
   28ea0:	ldr	r0, [fp, #-4]
   28ea4:	add	r1, sp, #12
   28ea8:	bl	2aed4 <flatcc_builder_create_vtable@@Base+0x104>
   28eac:	movw	r1, #0
   28eb0:	cmp	r1, r0
   28eb4:	bne	28ed8 <flatcc_builder_embed_buffer@@Base+0x330>
   28eb8:	ldr	r0, [pc, #44]	; 28eec <flatcc_builder_embed_buffer@@Base+0x344>
   28ebc:	add	r0, pc, r0
   28ec0:	ldr	r1, [pc, #40]	; 28ef0 <flatcc_builder_embed_buffer@@Base+0x348>
   28ec4:	add	r1, pc, r1
   28ec8:	ldr	r2, [pc, #36]	; 28ef4 <flatcc_builder_embed_buffer@@Base+0x34c>
   28ecc:	add	r3, pc, r2
   28ed0:	movw	r2, #702	; 0x2be
   28ed4:	bl	12e68 <__assert_fail@plt>
   28ed8:	b	28edc <flatcc_builder_embed_buffer@@Base+0x334>
   28edc:	b	28ee0 <flatcc_builder_embed_buffer@@Base+0x338>
   28ee0:	movw	r0, #0
   28ee4:	mov	sp, fp
   28ee8:	pop	{fp, pc}
   28eec:			; <UNDEFINED> instruction: 0x0000e6b3
   28ef0:	andeq	sp, r0, lr, ror #9
   28ef4:	andeq	lr, r0, r0, lsr #10
   28ef8:	ldrdeq	pc, [r1], -r4
   28efc:	sub	sp, sp, #12
   28f00:	str	r0, [sp, #8]
   28f04:	str	r1, [sp, #4]
   28f08:	strh	r2, [sp, #2]
   28f0c:	ldr	r0, [sp, #8]
   28f10:	ldr	r0, [r0, #136]	; 0x88
   28f14:	ldr	r1, [sp, #4]
   28f18:	sub	r0, r0, r1
   28f1c:	ldrh	r1, [sp, #2]
   28f20:	sub	r1, r1, #1
   28f24:	and	r0, r0, r1
   28f28:	add	sp, sp, #12
   28f2c:	bx	lr
   28f30:	sub	sp, sp, #4
   28f34:	str	r0, [sp]
   28f38:	ldr	r0, [sp]
   28f3c:	add	sp, sp, #4
   28f40:	bx	lr
   28f44:	push	{fp, lr}
   28f48:	mov	fp, sp
   28f4c:	sub	sp, sp, #24
   28f50:	str	r0, [fp, #-4]
   28f54:	str	r1, [fp, #-8]
   28f58:	ldr	r0, [fp, #-4]
   28f5c:	ldr	r0, [r0, #136]	; 0x88
   28f60:	ldr	r1, [fp, #-8]
   28f64:	ldr	r1, [r1]
   28f68:	sub	r0, r0, r1
   28f6c:	str	r0, [sp, #12]
   28f70:	ldr	r0, [fp, #-8]
   28f74:	ldr	r0, [r0]
   28f78:	cmp	r0, #16
   28f7c:	bls	28f94 <flatcc_builder_embed_buffer@@Base+0x3ec>
   28f80:	ldr	r0, [fp, #-8]
   28f84:	ldr	r0, [r0]
   28f88:	sub	r0, r0, #16
   28f8c:	cmn	r0, #1
   28f90:	bhi	28fa8 <flatcc_builder_embed_buffer@@Base+0x400>
   28f94:	ldr	r0, [sp, #12]
   28f98:	ldr	r1, [fp, #-4]
   28f9c:	ldr	r1, [r1, #136]	; 0x88
   28fa0:	cmp	r0, r1
   28fa4:	blt	28fc8 <flatcc_builder_embed_buffer@@Base+0x420>
   28fa8:	ldr	r0, [pc, #172]	; 2905c <flatcc_builder_embed_buffer@@Base+0x4b4>
   28fac:	add	r0, pc, r0
   28fb0:	ldr	r1, [pc, #168]	; 29060 <flatcc_builder_embed_buffer@@Base+0x4b8>
   28fb4:	add	r1, pc, r1
   28fb8:	ldr	r2, [pc, #164]	; 29064 <flatcc_builder_embed_buffer@@Base+0x4bc>
   28fbc:	add	r3, pc, r2
   28fc0:	movw	r2, #647	; 0x287
   28fc4:	bl	12e68 <__assert_fail@plt>
   28fc8:	ldr	r0, [fp, #-4]
   28fcc:	ldr	r0, [r0, #44]	; 0x2c
   28fd0:	ldr	r1, [fp, #-4]
   28fd4:	ldr	r1, [r1, #36]	; 0x24
   28fd8:	ldr	r2, [fp, #-8]
   28fdc:	add	r2, r2, #8
   28fe0:	ldr	r3, [fp, #-8]
   28fe4:	ldr	r3, [r3, #4]
   28fe8:	ldr	ip, [sp, #12]
   28fec:	ldr	lr, [fp, #-8]
   28ff0:	ldr	lr, [lr]
   28ff4:	str	r0, [sp, #8]
   28ff8:	mov	r0, r1
   28ffc:	mov	r1, r2
   29000:	mov	r2, r3
   29004:	mov	r3, ip
   29008:	str	lr, [sp]
   2900c:	ldr	ip, [sp, #8]
   29010:	blx	ip
   29014:	cmp	r0, #0
   29018:	beq	2903c <flatcc_builder_embed_buffer@@Base+0x494>
   2901c:	ldr	r0, [pc, #44]	; 29050 <flatcc_builder_embed_buffer@@Base+0x4a8>
   29020:	add	r0, pc, r0
   29024:	ldr	r1, [pc, #40]	; 29054 <flatcc_builder_embed_buffer@@Base+0x4ac>
   29028:	add	r1, pc, r1
   2902c:	ldr	r2, [pc, #36]	; 29058 <flatcc_builder_embed_buffer@@Base+0x4b0>
   29030:	add	r3, pc, r2
   29034:	movw	r2, #651	; 0x28b
   29038:	bl	12e68 <__assert_fail@plt>
   2903c:	ldr	r0, [sp, #12]
   29040:	ldr	r1, [fp, #-4]
   29044:	str	r0, [r1, #136]	; 0x88
   29048:	mov	sp, fp
   2904c:	pop	{fp, pc}
   29050:	andeq	lr, r0, pc, asr #10
   29054:	andeq	sp, r0, sl, lsl #7
   29058:	strdeq	lr, [r0], -lr	; <UNPREDICTABLE>
   2905c:	andeq	lr, r0, r3, asr #11
   29060:	strdeq	sp, [r0], -lr
   29064:	andeq	lr, r0, r2, ror r4

00029068 <flatcc_builder_create_buffer@@Base>:
   29068:	push	{fp, lr}
   2906c:	mov	fp, sp
   29070:	sub	sp, sp, #152	; 0x98
   29074:	ldr	ip, [fp, #12]
   29078:	ldr	lr, [fp, #8]
   2907c:	str	r0, [fp, #-8]
   29080:	str	r1, [fp, #-12]
   29084:	strh	r2, [fp, #-14]
   29088:	str	r3, [fp, #-20]	; 0xffffffec
   2908c:	strh	lr, [fp, #-22]	; 0xffffffea
   29090:	movw	r0, #0
   29094:	str	r0, [fp, #-36]	; 0xffffffdc
   29098:	str	r0, [sp, #28]
   2909c:	ldr	r0, [fp, #12]
   290a0:	and	r0, r0, #1
   290a4:	cmp	r0, #0
   290a8:	movw	r0, #0
   290ac:	movne	r0, #1
   290b0:	and	r0, r0, #1
   290b4:	str	r0, [sp, #24]
   290b8:	ldr	r0, [fp, #12]
   290bc:	and	r0, r0, #2
   290c0:	cmp	r0, #0
   290c4:	movw	r0, #0
   290c8:	movne	r0, #1
   290cc:	and	r0, r0, #1
   290d0:	str	r0, [sp, #20]
   290d4:	ldr	r0, [fp, #-8]
   290d8:	ldrh	r1, [fp, #-14]
   290dc:	ldr	r3, [sp, #24]
   290e0:	sub	r2, fp, #22
   290e4:	str	r1, [sp, #16]
   290e8:	mov	r1, r2
   290ec:	ldr	r2, [sp, #16]
   290f0:	uxth	r2, r2
   290f4:	str	ip, [sp, #12]
   290f8:	bl	28d90 <flatcc_builder_embed_buffer@@Base+0x1e8>
   290fc:	cmp	r0, #0
   29100:	beq	29110 <flatcc_builder_create_buffer@@Base+0xa8>
   29104:	movw	r0, #0
   29108:	str	r0, [fp, #-4]
   2910c:	b	293f4 <flatcc_builder_create_buffer@@Base+0x38c>
   29110:	ldr	r0, [fp, #-8]
   29114:	ldrh	r1, [fp, #-22]	; 0xffffffea
   29118:	bl	29410 <flatcc_builder_create_buffer@@Base+0x3a8>
   2911c:	ldr	r0, [fp, #-12]
   29120:	movw	r1, #0
   29124:	cmp	r0, r1
   29128:	beq	29168 <flatcc_builder_create_buffer@@Base+0x100>
   2912c:	ldr	r0, [fp, #-12]
   29130:	ldrb	r1, [r0]
   29134:	strb	r1, [sp, #28]
   29138:	ldrb	r1, [r0, #1]
   2913c:	strb	r1, [sp, #29]
   29140:	ldrb	r1, [r0, #2]
   29144:	strb	r1, [sp, #30]
   29148:	ldrb	r0, [r0, #3]
   2914c:	strb	r0, [sp, #31]
   29150:	ldr	r0, [sp, #28]
   29154:	bl	29444 <flatcc_builder_create_buffer@@Base+0x3dc>
   29158:	str	r0, [sp, #28]
   2915c:	ldr	r0, [sp, #28]
   29160:	bl	28f30 <flatcc_builder_embed_buffer@@Base+0x388>
   29164:	str	r0, [sp, #28]
   29168:	ldr	r0, [sp, #28]
   2916c:	cmp	r0, #0
   29170:	movw	r0, #0
   29174:	movne	r0, #1
   29178:	tst	r0, #1
   2917c:	movw	r0, #4
   29180:	mov	r1, r0
   29184:	moveq	r1, #0
   29188:	str	r1, [fp, #-36]	; 0xffffffdc
   2918c:	ldr	r1, [fp, #-8]
   29190:	ldr	r2, [fp, #-36]	; 0xffffffdc
   29194:	add	r2, r2, #4
   29198:	ldr	r3, [sp, #20]
   2919c:	cmp	r3, #0
   291a0:	movw	r3, #0
   291a4:	movne	r3, #1
   291a8:	tst	r3, #1
   291ac:	moveq	r0, #0
   291b0:	add	r0, r2, r0
   291b4:	str	r0, [sp, #8]
   291b8:	mov	r0, r1
   291bc:	ldr	r1, [sp, #8]
   291c0:	ldrh	r2, [fp, #-22]	; 0xffffffea
   291c4:	bl	28efc <flatcc_builder_embed_buffer@@Base+0x354>
   291c8:	str	r0, [fp, #-32]	; 0xffffffe0
   291cc:	movw	r0, #0
   291d0:	str	r0, [sp, #32]
   291d4:	str	r0, [sp, #36]	; 0x24
   291d8:	ldr	r0, [sp, #24]
   291dc:	cmp	r0, #0
   291e0:	bne	291f0 <flatcc_builder_create_buffer@@Base+0x188>
   291e4:	ldr	r0, [sp, #20]
   291e8:	cmp	r0, #0
   291ec:	beq	2922c <flatcc_builder_create_buffer@@Base+0x1c4>
   291f0:	ldr	r0, [sp, #32]
   291f4:	add	r0, r0, #4
   291f8:	str	r0, [sp, #32]
   291fc:	add	r0, sp, #32
   29200:	add	r0, r0, #8
   29204:	ldr	r1, [sp, #36]	; 0x24
   29208:	sub	r2, fp, #44	; 0x2c
   2920c:	str	r2, [r0, r1, lsl #3]
   29210:	ldr	r1, [sp, #36]	; 0x24
   29214:	add	r0, r0, r1, lsl #3
   29218:	movw	r1, #4
   2921c:	str	r1, [r0, #4]
   29220:	ldr	r0, [sp, #36]	; 0x24
   29224:	add	r0, r0, #1
   29228:	str	r0, [sp, #36]	; 0x24
   2922c:	ldr	r0, [sp, #32]
   29230:	add	r0, r0, #4
   29234:	str	r0, [sp, #32]
   29238:	add	r0, sp, #32
   2923c:	add	r0, r0, #8
   29240:	ldr	r1, [sp, #36]	; 0x24
   29244:	sub	r2, fp, #40	; 0x28
   29248:	str	r2, [r0, r1, lsl #3]
   2924c:	ldr	r1, [sp, #36]	; 0x24
   29250:	add	r0, r0, r1, lsl #3
   29254:	movw	r1, #4
   29258:	str	r1, [r0, #4]
   2925c:	ldr	r0, [sp, #36]	; 0x24
   29260:	add	r0, r0, #1
   29264:	str	r0, [sp, #36]	; 0x24
   29268:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2926c:	cmp	r0, #0
   29270:	bls	292b4 <flatcc_builder_create_buffer@@Base+0x24c>
   29274:	ldr	r0, [fp, #-36]	; 0xffffffdc
   29278:	ldr	r1, [sp, #32]
   2927c:	add	r0, r1, r0
   29280:	str	r0, [sp, #32]
   29284:	add	r0, sp, #32
   29288:	add	r0, r0, #8
   2928c:	ldr	r1, [sp, #36]	; 0x24
   29290:	add	r2, sp, #28
   29294:	str	r2, [r0, r1, lsl #3]
   29298:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2929c:	ldr	r2, [sp, #36]	; 0x24
   292a0:	add	r0, r0, r2, lsl #3
   292a4:	str	r1, [r0, #4]
   292a8:	ldr	r0, [sp, #36]	; 0x24
   292ac:	add	r0, r0, #1
   292b0:	str	r0, [sp, #36]	; 0x24
   292b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   292b8:	cmp	r0, #0
   292bc:	bls	29304 <flatcc_builder_create_buffer@@Base+0x29c>
   292c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   292c4:	ldr	r1, [sp, #32]
   292c8:	add	r0, r1, r0
   292cc:	str	r0, [sp, #32]
   292d0:	add	r0, sp, #32
   292d4:	add	r0, r0, #8
   292d8:	ldr	r1, [sp, #36]	; 0x24
   292dc:	ldr	r2, [pc, #296]	; 2940c <flatcc_builder_create_buffer@@Base+0x3a4>
   292e0:	ldr	r2, [pc, r2]
   292e4:	str	r2, [r0, r1, lsl #3]
   292e8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   292ec:	ldr	r2, [sp, #36]	; 0x24
   292f0:	add	r0, r0, r2, lsl #3
   292f4:	str	r1, [r0, #4]
   292f8:	ldr	r0, [sp, #36]	; 0x24
   292fc:	add	r0, r0, #1
   29300:	str	r0, [sp, #36]	; 0x24
   29304:	ldr	r0, [fp, #-8]
   29308:	ldr	r0, [r0, #136]	; 0x88
   2930c:	ldr	r1, [sp, #32]
   29310:	sub	r0, r0, r1
   29314:	ldr	r1, [sp, #24]
   29318:	cmp	r1, #0
   2931c:	movw	r1, #1
   29320:	str	r0, [sp, #4]
   29324:	str	r1, [sp]
   29328:	bne	29340 <flatcc_builder_create_buffer@@Base+0x2d8>
   2932c:	ldr	r0, [sp, #20]
   29330:	cmp	r0, #0
   29334:	movw	r0, #0
   29338:	movne	r0, #1
   2933c:	str	r0, [sp]
   29340:	ldr	r0, [sp]
   29344:	tst	r0, #1
   29348:	movw	r0, #4
   2934c:	moveq	r0, #0
   29350:	ldr	r1, [sp, #4]
   29354:	add	r0, r1, r0
   29358:	str	r0, [fp, #-48]	; 0xffffffd0
   2935c:	ldr	r0, [sp, #24]
   29360:	cmp	r0, #0
   29364:	beq	29384 <flatcc_builder_create_buffer@@Base+0x31c>
   29368:	ldr	r0, [fp, #-8]
   2936c:	ldr	r0, [r0, #144]	; 0x90
   29370:	ldr	r1, [fp, #-48]	; 0xffffffd0
   29374:	sub	r0, r0, r1
   29378:	bl	28f30 <flatcc_builder_embed_buffer@@Base+0x388>
   2937c:	str	r0, [fp, #-44]	; 0xffffffd4
   29380:	b	2939c <flatcc_builder_create_buffer@@Base+0x334>
   29384:	ldr	r0, [fp, #-8]
   29388:	ldr	r0, [r0, #140]	; 0x8c
   2938c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   29390:	sub	r0, r0, r1
   29394:	bl	28f30 <flatcc_builder_embed_buffer@@Base+0x388>
   29398:	str	r0, [fp, #-44]	; 0xffffffd4
   2939c:	ldr	r0, [fp, #-20]	; 0xffffffec
   293a0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   293a4:	sub	r0, r0, r1
   293a8:	bl	28f30 <flatcc_builder_embed_buffer@@Base+0x388>
   293ac:	str	r0, [fp, #-40]	; 0xffffffd8
   293b0:	ldr	r0, [fp, #-8]
   293b4:	add	r1, sp, #32
   293b8:	bl	28f44 <flatcc_builder_embed_buffer@@Base+0x39c>
   293bc:	str	r0, [fp, #-28]	; 0xffffffe4
   293c0:	movw	r1, #0
   293c4:	cmp	r1, r0
   293c8:	bne	293ec <flatcc_builder_create_buffer@@Base+0x384>
   293cc:	ldr	r0, [pc, #44]	; 29400 <flatcc_builder_create_buffer@@Base+0x398>
   293d0:	add	r0, pc, r0
   293d4:	ldr	r1, [pc, #40]	; 29404 <flatcc_builder_create_buffer@@Base+0x39c>
   293d8:	add	r1, pc, r1
   293dc:	ldr	r2, [pc, #36]	; 29408 <flatcc_builder_create_buffer@@Base+0x3a0>
   293e0:	add	r3, pc, r2
   293e4:	movw	r2, #772	; 0x304
   293e8:	bl	12e68 <__assert_fail@plt>
   293ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
   293f0:	str	r0, [fp, #-4]
   293f4:	ldr	r0, [fp, #-4]
   293f8:	mov	sp, fp
   293fc:	pop	{fp, pc}
   29400:	muleq	r0, pc, r1	; <UNPREDICTABLE>
   29404:	ldrdeq	ip, [r0], -sl
   29408:	andeq	sp, r0, r4, lsr #2
   2940c:	andeq	lr, r1, r0, ror sp
   29410:	sub	sp, sp, #8
   29414:	str	r0, [sp, #4]
   29418:	strh	r1, [sp, #2]
   2941c:	ldr	r0, [sp, #4]
   29420:	ldrh	r0, [r0, #128]	; 0x80
   29424:	ldrh	r1, [sp, #2]
   29428:	cmp	r0, r1
   2942c:	bge	2943c <flatcc_builder_create_buffer@@Base+0x3d4>
   29430:	ldrh	r0, [sp, #2]
   29434:	ldr	r1, [sp, #4]
   29438:	strh	r0, [r1, #128]	; 0x80
   2943c:	add	sp, sp, #8
   29440:	bx	lr
   29444:	sub	sp, sp, #4
   29448:	str	r0, [sp]
   2944c:	ldr	r0, [sp]
   29450:	add	sp, sp, #4
   29454:	bx	lr

00029458 <flatcc_builder_create_struct@@Base>:
   29458:	push	{fp, lr}
   2945c:	mov	fp, sp
   29460:	sub	sp, sp, #96	; 0x60
   29464:	str	r0, [fp, #-4]
   29468:	str	r1, [fp, #-8]
   2946c:	str	r2, [fp, #-12]
   29470:	strh	r3, [fp, #-14]
   29474:	ldrh	r0, [fp, #-14]
   29478:	cmp	r0, #1
   2947c:	blt	29484 <flatcc_builder_create_struct@@Base+0x2c>
   29480:	b	294a4 <flatcc_builder_create_struct@@Base+0x4c>
   29484:	ldr	r0, [pc, #244]	; 29580 <flatcc_builder_create_struct@@Base+0x128>
   29488:	add	r0, pc, r0
   2948c:	ldr	r1, [pc, #240]	; 29584 <flatcc_builder_create_struct@@Base+0x12c>
   29490:	add	r1, pc, r1
   29494:	ldr	r2, [pc, #236]	; 29588 <flatcc_builder_create_struct@@Base+0x130>
   29498:	add	r3, pc, r2
   2949c:	movw	r2, #783	; 0x30f
   294a0:	bl	12e68 <__assert_fail@plt>
   294a4:	ldr	r0, [fp, #-4]
   294a8:	ldrh	r1, [fp, #-14]
   294ac:	bl	29410 <flatcc_builder_create_buffer@@Base+0x3a8>
   294b0:	ldr	r0, [fp, #-4]
   294b4:	ldr	r1, [fp, #-12]
   294b8:	ldrh	r2, [fp, #-14]
   294bc:	bl	28efc <flatcc_builder_embed_buffer@@Base+0x354>
   294c0:	str	r0, [fp, #-20]	; 0xffffffec
   294c4:	movw	r0, #0
   294c8:	str	r0, [sp, #4]
   294cc:	str	r0, [sp, #8]
   294d0:	ldr	r0, [fp, #-12]
   294d4:	cmp	r0, #0
   294d8:	bls	2951c <flatcc_builder_create_struct@@Base+0xc4>
   294dc:	ldr	r0, [fp, #-12]
   294e0:	ldr	r1, [sp, #4]
   294e4:	add	r0, r1, r0
   294e8:	str	r0, [sp, #4]
   294ec:	ldr	r0, [fp, #-8]
   294f0:	add	r1, sp, #4
   294f4:	add	r1, r1, #8
   294f8:	ldr	r2, [sp, #8]
   294fc:	str	r0, [r1, r2, lsl #3]
   29500:	ldr	r0, [fp, #-12]
   29504:	ldr	r2, [sp, #8]
   29508:	add	r1, r1, r2, lsl #3
   2950c:	str	r0, [r1, #4]
   29510:	ldr	r0, [sp, #8]
   29514:	add	r0, r0, #1
   29518:	str	r0, [sp, #8]
   2951c:	ldr	r0, [fp, #-20]	; 0xffffffec
   29520:	cmp	r0, #0
   29524:	bls	2956c <flatcc_builder_create_struct@@Base+0x114>
   29528:	ldr	r0, [fp, #-20]	; 0xffffffec
   2952c:	ldr	r1, [sp, #4]
   29530:	add	r0, r1, r0
   29534:	str	r0, [sp, #4]
   29538:	add	r0, sp, #4
   2953c:	add	r0, r0, #8
   29540:	ldr	r1, [sp, #8]
   29544:	ldr	r2, [pc, #64]	; 2958c <flatcc_builder_create_struct@@Base+0x134>
   29548:	ldr	r2, [pc, r2]
   2954c:	str	r2, [r0, r1, lsl #3]
   29550:	ldr	r1, [fp, #-20]	; 0xffffffec
   29554:	ldr	r2, [sp, #8]
   29558:	add	r0, r0, r2, lsl #3
   2955c:	str	r1, [r0, #4]
   29560:	ldr	r0, [sp, #8]
   29564:	add	r0, r0, #1
   29568:	str	r0, [sp, #8]
   2956c:	ldr	r0, [fp, #-4]
   29570:	add	r1, sp, #4
   29574:	bl	28f44 <flatcc_builder_embed_buffer@@Base+0x39c>
   29578:	mov	sp, fp
   2957c:	pop	{fp, pc}
   29580:	strdeq	sp, [r0], -pc	; <UNPREDICTABLE>
   29584:	andeq	ip, r0, r2, lsr #30
   29588:	strdeq	sp, [r0], -sl
   2958c:	andeq	lr, r1, r8, lsl #22

00029590 <flatcc_builder_start_buffer@@Base>:
   29590:	push	{fp, lr}
   29594:	mov	fp, sp
   29598:	sub	sp, sp, #32
   2959c:	str	r0, [fp, #-8]
   295a0:	str	r1, [fp, #-12]
   295a4:	strh	r2, [fp, #-14]
   295a8:	str	r3, [sp, #12]
   295ac:	ldr	r0, [fp, #-8]
   295b0:	ldr	r1, [fp, #-8]
   295b4:	ldrh	r1, [r1, #128]	; 0x80
   295b8:	bl	29708 <flatcc_builder_start_buffer@@Base+0x178>
   295bc:	cmp	r0, #0
   295c0:	beq	295d0 <flatcc_builder_start_buffer@@Base+0x40>
   295c4:	mvn	r0, #0
   295c8:	str	r0, [fp, #-4]
   295cc:	b	296f8 <flatcc_builder_start_buffer@@Base+0x168>
   295d0:	ldr	r0, [fp, #-8]
   295d4:	movw	r1, #1
   295d8:	strh	r1, [r0, #128]	; 0x80
   295dc:	ldr	r0, [fp, #-8]
   295e0:	ldrh	r0, [r0, #132]	; 0x84
   295e4:	ldr	r1, [fp, #-8]
   295e8:	ldr	r1, [r1, #32]
   295ec:	strh	r0, [r1, #34]	; 0x22
   295f0:	ldrh	r0, [fp, #-14]
   295f4:	ldr	r1, [fp, #-8]
   295f8:	strh	r0, [r1, #132]	; 0x84
   295fc:	ldr	r0, [fp, #-8]
   29600:	ldrh	r0, [r0, #164]	; 0xa4
   29604:	ldr	r1, [fp, #-8]
   29608:	ldr	r1, [r1, #32]
   2960c:	strh	r0, [r1, #32]
   29610:	ldr	r0, [sp, #12]
   29614:	ldr	r1, [fp, #-8]
   29618:	strh	r0, [r1, #164]	; 0xa4
   2961c:	ldr	r0, [fp, #-8]
   29620:	ldr	r0, [r0, #144]	; 0x90
   29624:	ldr	r1, [fp, #-8]
   29628:	ldr	r1, [r1, #32]
   2962c:	str	r0, [r1, #20]
   29630:	ldr	r0, [fp, #-8]
   29634:	ldr	r0, [r0, #152]	; 0x98
   29638:	ldr	r1, [fp, #-8]
   2963c:	ldr	r1, [r1, #32]
   29640:	str	r0, [r1, #28]
   29644:	ldr	r0, [fp, #-8]
   29648:	ldr	r0, [r0, #136]	; 0x88
   2964c:	ldr	r1, [fp, #-8]
   29650:	str	r0, [r1, #144]	; 0x90
   29654:	ldr	r0, [fp, #-8]
   29658:	ldr	r1, [r0, #148]	; 0x94
   2965c:	add	r2, r1, #1
   29660:	str	r2, [r0, #148]	; 0x94
   29664:	ldr	r0, [fp, #-8]
   29668:	str	r1, [r0, #152]	; 0x98
   2966c:	ldr	r0, [fp, #-8]
   29670:	ldr	r0, [r0, #168]	; 0xa8
   29674:	ldr	r1, [fp, #-8]
   29678:	ldr	r1, [r1, #32]
   2967c:	str	r0, [r1, #16]
   29680:	ldr	r0, [fp, #-8]
   29684:	add	r0, r0, #168	; 0xa8
   29688:	ldr	r1, [fp, #-12]
   2968c:	movw	r2, #0
   29690:	cmp	r1, r2
   29694:	str	r0, [sp, #8]
   29698:	beq	296a8 <flatcc_builder_start_buffer@@Base+0x118>
   2969c:	ldr	r0, [fp, #-12]
   296a0:	str	r0, [sp, #4]
   296a4:	b	296b8 <flatcc_builder_start_buffer@@Base+0x128>
   296a8:	ldr	r0, [pc, #84]	; 29704 <flatcc_builder_start_buffer@@Base+0x174>
   296ac:	ldr	r0, [pc, r0]
   296b0:	str	r0, [sp, #4]
   296b4:	b	296b8 <flatcc_builder_start_buffer@@Base+0x128>
   296b8:	ldr	r0, [sp, #4]
   296bc:	ldrb	r1, [r0]
   296c0:	ldr	r2, [sp, #8]
   296c4:	strb	r1, [r2]
   296c8:	ldrb	r1, [r0, #1]
   296cc:	strb	r1, [r2, #1]
   296d0:	ldrb	r1, [r0, #2]
   296d4:	strb	r1, [r2, #2]
   296d8:	ldrb	r0, [r0, #3]
   296dc:	strb	r0, [r2, #3]
   296e0:	ldr	r0, [fp, #-8]
   296e4:	ldr	r0, [r0, #32]
   296e8:	movw	r1, #1
   296ec:	strh	r1, [r0, #14]
   296f0:	movw	r0, #0
   296f4:	str	r0, [fp, #-4]
   296f8:	ldr	r0, [fp, #-4]
   296fc:	mov	sp, fp
   29700:	pop	{fp, pc}
   29704:	andeq	lr, r1, r4, lsr #19
   29708:	push	{fp, lr}
   2970c:	mov	fp, sp
   29710:	sub	sp, sp, #24
   29714:	str	r0, [fp, #-8]
   29718:	strh	r1, [fp, #-10]
   2971c:	ldr	r0, [fp, #-8]
   29720:	ldr	r1, [r0, #156]	; 0x9c
   29724:	add	r1, r1, #1
   29728:	str	r1, [r0, #156]	; 0x9c
   2972c:	ldr	r0, [fp, #-8]
   29730:	ldr	r0, [r0, #160]	; 0xa0
   29734:	cmp	r1, r0
   29738:	ble	29824 <flatcc_builder_start_buffer@@Base+0x294>
   2973c:	ldr	r0, [fp, #-8]
   29740:	ldr	r0, [r0, #176]	; 0xb0
   29744:	cmp	r0, #0
   29748:	ble	29770 <flatcc_builder_start_buffer@@Base+0x1e0>
   2974c:	ldr	r0, [fp, #-8]
   29750:	ldr	r0, [r0, #156]	; 0x9c
   29754:	ldr	r1, [fp, #-8]
   29758:	ldr	r1, [r1, #176]	; 0xb0
   2975c:	cmp	r0, r1
   29760:	ble	29770 <flatcc_builder_start_buffer@@Base+0x1e0>
   29764:	mvn	r0, #0
   29768:	str	r0, [fp, #-4]
   2976c:	b	298c8 <flatcc_builder_start_buffer@@Base+0x338>
   29770:	ldr	r0, [fp, #-8]
   29774:	ldr	r1, [fp, #-8]
   29778:	ldr	r1, [r1, #156]	; 0x9c
   2977c:	sub	r1, r1, #1
   29780:	movw	r2, #36	; 0x24
   29784:	mul	r1, r1, r2
   29788:	movw	r3, #4
   2978c:	str	r1, [sp, #8]
   29790:	mov	r1, r3
   29794:	ldr	r3, [sp, #8]
   29798:	str	r2, [sp, #4]
   2979c:	mov	r2, r3
   297a0:	ldr	r3, [sp, #4]
   297a4:	movw	ip, #0
   297a8:	str	ip, [sp]
   297ac:	bl	2889c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   297b0:	ldr	r1, [fp, #-8]
   297b4:	str	r0, [r1, #32]
   297b8:	movw	r1, #0
   297bc:	cmp	r0, r1
   297c0:	bne	297d0 <flatcc_builder_start_buffer@@Base+0x240>
   297c4:	mvn	r0, #0
   297c8:	str	r0, [fp, #-4]
   297cc:	b	298c8 <flatcc_builder_start_buffer@@Base+0x338>
   297d0:	ldr	r0, [fp, #-8]
   297d4:	ldr	r0, [r0, #88]	; 0x58
   297d8:	movw	r1, #36	; 0x24
   297dc:	udiv	r0, r0, r1
   297e0:	ldr	r1, [fp, #-8]
   297e4:	str	r0, [r1, #160]	; 0xa0
   297e8:	ldr	r0, [fp, #-8]
   297ec:	ldr	r0, [r0, #176]	; 0xb0
   297f0:	cmp	r0, #0
   297f4:	ble	29820 <flatcc_builder_start_buffer@@Base+0x290>
   297f8:	ldr	r0, [fp, #-8]
   297fc:	ldr	r0, [r0, #176]	; 0xb0
   29800:	ldr	r1, [fp, #-8]
   29804:	ldr	r1, [r1, #160]	; 0xa0
   29808:	cmp	r0, r1
   2980c:	bge	29820 <flatcc_builder_start_buffer@@Base+0x290>
   29810:	ldr	r0, [fp, #-8]
   29814:	ldr	r0, [r0, #176]	; 0xb0
   29818:	ldr	r1, [fp, #-8]
   2981c:	str	r0, [r1, #160]	; 0xa0
   29820:	b	29834 <flatcc_builder_start_buffer@@Base+0x2a4>
   29824:	ldr	r0, [fp, #-8]
   29828:	ldr	r1, [r0, #32]
   2982c:	add	r1, r1, #36	; 0x24
   29830:	str	r1, [r0, #32]
   29834:	ldr	r0, [fp, #-8]
   29838:	ldr	r0, [r0, #20]
   2983c:	ldr	r1, [fp, #-8]
   29840:	ldr	r1, [r1, #32]
   29844:	str	r0, [r1, #8]
   29848:	ldr	r0, [fp, #-8]
   2984c:	ldrh	r0, [r0, #130]	; 0x82
   29850:	ldr	r1, [fp, #-8]
   29854:	ldr	r1, [r1, #32]
   29858:	strh	r0, [r1, #12]
   2985c:	ldrh	r0, [fp, #-10]
   29860:	ldr	r1, [fp, #-8]
   29864:	strh	r0, [r1, #130]	; 0x82
   29868:	ldr	r0, [fp, #-8]
   2986c:	ldr	r0, [r0, #28]
   29870:	ldr	r1, [fp, #-8]
   29874:	ldr	r1, [r1, #32]
   29878:	str	r0, [r1]
   2987c:	ldr	r0, [fp, #-8]
   29880:	ldr	r0, [r0, #32]
   29884:	mvn	r1, #3
   29888:	str	r1, [r0, #4]
   2988c:	ldr	r0, [fp, #-8]
   29890:	ldr	r0, [r0, #28]
   29894:	ldr	r1, [fp, #-8]
   29898:	ldr	r1, [r1, #20]
   2989c:	add	r0, r0, r1
   298a0:	add	r0, r0, #8
   298a4:	sub	r0, r0, #1
   298a8:	mvn	r1, #7
   298ac:	and	r0, r0, r1
   298b0:	ldr	r1, [fp, #-8]
   298b4:	str	r0, [r1, #28]
   298b8:	ldr	r0, [fp, #-8]
   298bc:	movw	r1, #0
   298c0:	str	r1, [r0, #20]
   298c4:	str	r1, [fp, #-4]
   298c8:	ldr	r0, [fp, #-4]
   298cc:	mov	sp, fp
   298d0:	pop	{fp, pc}

000298d4 <flatcc_builder_end_buffer@@Base>:
   298d4:	push	{fp, lr}
   298d8:	mov	fp, sp
   298dc:	sub	sp, sp, #32
   298e0:	str	r0, [fp, #-8]
   298e4:	str	r1, [fp, #-12]
   298e8:	ldr	r0, [fp, #-8]
   298ec:	ldrh	r0, [r0, #164]	; 0xa4
   298f0:	and	r0, r0, #2
   298f4:	str	r0, [sp, #12]
   298f8:	ldr	r0, [fp, #-8]
   298fc:	ldr	r0, [r0, #152]	; 0x98
   29900:	cmp	r0, #0
   29904:	movw	r0, #0
   29908:	moveq	r0, #1
   2990c:	tst	r0, #1
   29910:	movw	r0, #0
   29914:	moveq	r0, #1
   29918:	ldr	r1, [sp, #12]
   2991c:	orr	r0, r1, r0
   29920:	str	r0, [sp, #12]
   29924:	ldr	r0, [fp, #-8]
   29928:	ldr	r0, [r0, #32]
   2992c:	ldrh	r0, [r0, #14]
   29930:	cmp	r0, #1
   29934:	bne	2993c <flatcc_builder_end_buffer@@Base+0x68>
   29938:	b	2995c <flatcc_builder_end_buffer@@Base+0x88>
   2993c:	ldr	r0, [pc, #232]	; 29a2c <flatcc_builder_end_buffer@@Base+0x158>
   29940:	add	r0, pc, r0
   29944:	ldr	r1, [pc, #228]	; 29a30 <flatcc_builder_end_buffer@@Base+0x15c>
   29948:	add	r1, pc, r1
   2994c:	ldr	r2, [pc, #224]	; 29a34 <flatcc_builder_end_buffer@@Base+0x160>
   29950:	add	r3, pc, r2
   29954:	movw	r2, #838	; 0x346
   29958:	bl	12e68 <__assert_fail@plt>
   2995c:	ldr	r0, [fp, #-8]
   29960:	ldr	r1, [fp, #-8]
   29964:	ldrh	r1, [r1, #132]	; 0x84
   29968:	bl	29410 <flatcc_builder_create_buffer@@Base+0x3a8>
   2996c:	ldr	r0, [fp, #-8]
   29970:	ldr	r1, [fp, #-8]
   29974:	add	r1, r1, #168	; 0xa8
   29978:	ldr	r2, [fp, #-8]
   2997c:	ldrh	r2, [r2, #132]	; 0x84
   29980:	ldr	r3, [fp, #-12]
   29984:	ldr	ip, [fp, #-8]
   29988:	ldrh	ip, [ip, #128]	; 0x80
   2998c:	ldr	lr, [sp, #12]
   29990:	uxth	r2, r2
   29994:	uxth	ip, ip
   29998:	str	ip, [sp]
   2999c:	str	lr, [sp, #4]
   299a0:	bl	29068 <flatcc_builder_create_buffer@@Base>
   299a4:	str	r0, [sp, #16]
   299a8:	movw	r1, #0
   299ac:	cmp	r1, r0
   299b0:	bne	299c0 <flatcc_builder_end_buffer@@Base+0xec>
   299b4:	movw	r0, #0
   299b8:	str	r0, [fp, #-4]
   299bc:	b	29a20 <flatcc_builder_end_buffer@@Base+0x14c>
   299c0:	ldr	r0, [fp, #-8]
   299c4:	ldr	r0, [r0, #32]
   299c8:	ldr	r0, [r0, #20]
   299cc:	ldr	r1, [fp, #-8]
   299d0:	str	r0, [r1, #144]	; 0x90
   299d4:	ldr	r0, [fp, #-8]
   299d8:	ldr	r0, [r0, #32]
   299dc:	ldr	r0, [r0, #28]
   299e0:	ldr	r1, [fp, #-8]
   299e4:	str	r0, [r1, #152]	; 0x98
   299e8:	ldr	r0, [fp, #-8]
   299ec:	ldr	r0, [r0, #32]
   299f0:	ldr	r0, [r0, #16]
   299f4:	ldr	r1, [fp, #-8]
   299f8:	str	r0, [r1, #168]	; 0xa8
   299fc:	ldr	r0, [fp, #-8]
   29a00:	ldr	r0, [r0, #32]
   29a04:	ldrh	r0, [r0, #32]
   29a08:	ldr	r1, [fp, #-8]
   29a0c:	strh	r0, [r1, #164]	; 0xa4
   29a10:	ldr	r0, [fp, #-8]
   29a14:	bl	29a38 <flatcc_builder_end_buffer@@Base+0x164>
   29a18:	ldr	r0, [sp, #16]
   29a1c:	str	r0, [fp, #-4]
   29a20:	ldr	r0, [fp, #-4]
   29a24:	mov	sp, fp
   29a28:	pop	{fp, pc}
   29a2c:			; <UNDEFINED> instruction: 0x0000ccb8
   29a30:	andeq	ip, r0, sl, ror #20
   29a34:	ldrdeq	ip, [r0], -r4
   29a38:	push	{fp, lr}
   29a3c:	mov	fp, sp
   29a40:	sub	sp, sp, #8
   29a44:	str	r0, [sp, #4]
   29a48:	ldr	r0, [sp, #4]
   29a4c:	ldr	r0, [r0, #16]
   29a50:	ldr	r1, [sp, #4]
   29a54:	ldr	r2, [r1, #20]
   29a58:	movw	r1, #0
   29a5c:	and	r1, r1, #255	; 0xff
   29a60:	bl	12e2c <memset@plt>
   29a64:	ldr	r0, [sp, #4]
   29a68:	ldr	r0, [r0, #32]
   29a6c:	ldr	r0, [r0, #8]
   29a70:	ldr	r1, [sp, #4]
   29a74:	str	r0, [r1, #20]
   29a78:	ldr	r0, [sp, #4]
   29a7c:	ldr	r0, [r0, #32]
   29a80:	ldr	r0, [r0]
   29a84:	ldr	r1, [sp, #4]
   29a88:	str	r0, [r1, #28]
   29a8c:	ldr	r0, [sp, #4]
   29a90:	ldr	r1, [sp, #4]
   29a94:	ldr	r1, [r1, #32]
   29a98:	ldr	r1, [r1, #4]
   29a9c:	bl	29b64 <flatcc_builder_start_struct@@Base+0x70>
   29aa0:	ldr	r0, [sp, #4]
   29aa4:	ldr	r1, [sp, #4]
   29aa8:	ldrh	r1, [r1, #130]	; 0x82
   29aac:	bl	29410 <flatcc_builder_create_buffer@@Base+0x3a8>
   29ab0:	ldr	r0, [sp, #4]
   29ab4:	ldr	r0, [r0, #32]
   29ab8:	ldrh	r0, [r0, #12]
   29abc:	ldr	r1, [sp, #4]
   29ac0:	strh	r0, [r1, #130]	; 0x82
   29ac4:	ldr	r0, [sp, #4]
   29ac8:	ldr	r1, [r0, #32]
   29acc:	mvn	r2, #35	; 0x23
   29ad0:	add	r1, r1, r2
   29ad4:	str	r1, [r0, #32]
   29ad8:	ldr	r0, [sp, #4]
   29adc:	ldr	r1, [r0, #156]	; 0x9c
   29ae0:	mvn	r2, #0
   29ae4:	add	r1, r1, r2
   29ae8:	str	r1, [r0, #156]	; 0x9c
   29aec:	mov	sp, fp
   29af0:	pop	{fp, pc}

00029af4 <flatcc_builder_start_struct@@Base>:
   29af4:	push	{fp, lr}
   29af8:	mov	fp, sp
   29afc:	sub	sp, sp, #16
   29b00:	str	r0, [sp, #8]
   29b04:	str	r1, [sp, #4]
   29b08:	strh	r2, [sp, #2]
   29b0c:	ldr	r0, [sp, #8]
   29b10:	ldrh	r1, [sp, #2]
   29b14:	bl	29708 <flatcc_builder_start_buffer@@Base+0x178>
   29b18:	cmp	r0, #0
   29b1c:	beq	29b2c <flatcc_builder_start_struct@@Base+0x38>
   29b20:	movw	r0, #0
   29b24:	str	r0, [fp, #-4]
   29b28:	b	29b58 <flatcc_builder_start_struct@@Base+0x64>
   29b2c:	ldr	r0, [sp, #8]
   29b30:	ldr	r0, [r0, #32]
   29b34:	movw	r1, #2
   29b38:	strh	r1, [r0, #14]
   29b3c:	ldr	r0, [sp, #8]
   29b40:	mvn	r1, #3
   29b44:	bl	29b64 <flatcc_builder_start_struct@@Base+0x70>
   29b48:	ldr	r0, [sp, #8]
   29b4c:	ldr	r1, [sp, #4]
   29b50:	bl	29bf0 <flatcc_builder_start_struct@@Base+0xfc>
   29b54:	str	r0, [fp, #-4]
   29b58:	ldr	r0, [fp, #-4]
   29b5c:	mov	sp, fp
   29b60:	pop	{fp, pc}
   29b64:	sub	sp, sp, #12
   29b68:	str	r0, [sp, #8]
   29b6c:	str	r1, [sp, #4]
   29b70:	ldr	r0, [sp, #8]
   29b74:	add	r0, r0, #52	; 0x34
   29b78:	add	r0, r0, #8
   29b7c:	str	r0, [sp]
   29b80:	ldr	r0, [sp, #8]
   29b84:	ldr	r0, [r0, #60]	; 0x3c
   29b88:	ldr	r1, [sp, #8]
   29b8c:	ldr	r1, [r1, #28]
   29b90:	add	r0, r0, r1
   29b94:	ldr	r1, [sp, #8]
   29b98:	str	r0, [r1, #16]
   29b9c:	ldr	r0, [sp]
   29ba0:	ldr	r0, [r0, #4]
   29ba4:	ldr	r1, [sp, #8]
   29ba8:	ldr	r1, [r1, #28]
   29bac:	sub	r0, r0, r1
   29bb0:	ldr	r1, [sp, #8]
   29bb4:	str	r0, [r1, #24]
   29bb8:	ldr	r0, [sp, #8]
   29bbc:	ldr	r0, [r0, #24]
   29bc0:	ldr	r1, [sp, #4]
   29bc4:	cmp	r0, r1
   29bc8:	bls	29bd8 <flatcc_builder_start_struct@@Base+0xe4>
   29bcc:	ldr	r0, [sp, #4]
   29bd0:	ldr	r1, [sp, #8]
   29bd4:	str	r0, [r1, #24]
   29bd8:	ldr	r0, [sp, #4]
   29bdc:	ldr	r1, [sp, #8]
   29be0:	ldr	r1, [r1, #32]
   29be4:	str	r0, [r1, #4]
   29be8:	add	sp, sp, #12
   29bec:	bx	lr
   29bf0:	push	{fp, lr}
   29bf4:	mov	fp, sp
   29bf8:	sub	sp, sp, #16
   29bfc:	str	r0, [sp, #8]
   29c00:	str	r1, [sp, #4]
   29c04:	ldr	r0, [sp, #8]
   29c08:	ldr	r0, [r0, #20]
   29c0c:	str	r0, [sp]
   29c10:	ldr	r0, [sp, #4]
   29c14:	ldr	r1, [sp, #8]
   29c18:	ldr	r2, [r1, #20]
   29c1c:	add	r0, r2, r0
   29c20:	str	r0, [r1, #20]
   29c24:	ldr	r1, [sp, #8]
   29c28:	ldr	r1, [r1, #24]
   29c2c:	cmp	r0, r1
   29c30:	bcc	29c64 <flatcc_builder_start_struct@@Base+0x170>
   29c34:	ldr	r0, [sp, #8]
   29c38:	ldr	r1, [sp, #8]
   29c3c:	ldr	r1, [r1, #20]
   29c40:	add	r1, r1, #1
   29c44:	mvn	r2, #3
   29c48:	bl	2dd4c <flatcc_builder_get_emit_context@@Base+0x40>
   29c4c:	cmp	r0, #0
   29c50:	beq	29c60 <flatcc_builder_start_struct@@Base+0x16c>
   29c54:	movw	r0, #0
   29c58:	str	r0, [fp, #-4]
   29c5c:	b	29c78 <flatcc_builder_start_struct@@Base+0x184>
   29c60:	b	29c64 <flatcc_builder_start_struct@@Base+0x170>
   29c64:	ldr	r0, [sp, #8]
   29c68:	ldr	r0, [r0, #16]
   29c6c:	ldr	r1, [sp]
   29c70:	add	r0, r0, r1
   29c74:	str	r0, [fp, #-4]
   29c78:	ldr	r0, [fp, #-4]
   29c7c:	mov	sp, fp
   29c80:	pop	{fp, pc}

00029c84 <flatcc_builder_struct_edit@@Base>:
   29c84:	sub	sp, sp, #4
   29c88:	str	r0, [sp]
   29c8c:	ldr	r0, [sp]
   29c90:	ldr	r0, [r0, #16]
   29c94:	add	sp, sp, #4
   29c98:	bx	lr

00029c9c <flatcc_builder_end_struct@@Base>:
   29c9c:	push	{fp, lr}
   29ca0:	mov	fp, sp
   29ca4:	sub	sp, sp, #16
   29ca8:	str	r0, [sp, #8]
   29cac:	ldr	r0, [sp, #8]
   29cb0:	ldr	r0, [r0, #32]
   29cb4:	ldrh	r0, [r0, #14]
   29cb8:	cmp	r0, #2
   29cbc:	bne	29cc4 <flatcc_builder_end_struct@@Base+0x28>
   29cc0:	b	29ce4 <flatcc_builder_end_struct@@Base+0x48>
   29cc4:	ldr	r0, [pc, #112]	; 29d3c <flatcc_builder_end_struct@@Base+0xa0>
   29cc8:	add	r0, pc, r0
   29ccc:	ldr	r1, [pc, #108]	; 29d40 <flatcc_builder_end_struct@@Base+0xa4>
   29cd0:	add	r1, pc, r1
   29cd4:	ldr	r2, [pc, #104]	; 29d44 <flatcc_builder_end_struct@@Base+0xa8>
   29cd8:	add	r3, pc, r2
   29cdc:	movw	r2, #872	; 0x368
   29ce0:	bl	12e68 <__assert_fail@plt>
   29ce4:	ldr	r0, [sp, #8]
   29ce8:	ldr	r1, [sp, #8]
   29cec:	ldr	r1, [r1, #16]
   29cf0:	ldr	r2, [sp, #8]
   29cf4:	ldr	r2, [r2, #20]
   29cf8:	ldr	r3, [sp, #8]
   29cfc:	ldrh	r3, [r3, #130]	; 0x82
   29d00:	bl	29458 <flatcc_builder_create_struct@@Base>
   29d04:	str	r0, [sp, #4]
   29d08:	movw	r1, #0
   29d0c:	cmp	r1, r0
   29d10:	bne	29d20 <flatcc_builder_end_struct@@Base+0x84>
   29d14:	movw	r0, #0
   29d18:	str	r0, [fp, #-4]
   29d1c:	b	29d30 <flatcc_builder_end_struct@@Base+0x94>
   29d20:	ldr	r0, [sp, #8]
   29d24:	bl	29a38 <flatcc_builder_end_buffer@@Base+0x164>
   29d28:	ldr	r0, [sp, #4]
   29d2c:	str	r0, [fp, #-4]
   29d30:	ldr	r0, [fp, #-4]
   29d34:	mov	sp, fp
   29d38:	pop	{fp, pc}
   29d3c:			; <UNDEFINED> instruction: 0x0000c9b5
   29d40:	andeq	ip, r0, r2, ror #13
   29d44:	ldrdeq	ip, [r0], -r1

00029d48 <flatcc_builder_extend_vector@@Base>:
   29d48:	push	{fp, lr}
   29d4c:	mov	fp, sp
   29d50:	sub	sp, sp, #16
   29d54:	str	r0, [sp, #8]
   29d58:	str	r1, [sp, #4]
   29d5c:	ldr	r0, [sp, #8]
   29d60:	ldr	r1, [sp, #4]
   29d64:	ldr	r2, [sp, #8]
   29d68:	ldr	r2, [r2, #32]
   29d6c:	ldr	r2, [r2, #24]
   29d70:	bl	29db4 <flatcc_builder_extend_vector@@Base+0x6c>
   29d74:	cmp	r0, #0
   29d78:	beq	29d88 <flatcc_builder_extend_vector@@Base+0x40>
   29d7c:	movw	r0, #0
   29d80:	str	r0, [fp, #-4]
   29d84:	b	29da8 <flatcc_builder_extend_vector@@Base+0x60>
   29d88:	ldr	r0, [sp, #8]
   29d8c:	ldr	r1, [sp, #8]
   29d90:	ldr	r1, [r1, #32]
   29d94:	ldr	r1, [r1, #16]
   29d98:	ldr	r2, [sp, #4]
   29d9c:	mul	r1, r1, r2
   29da0:	bl	29bf0 <flatcc_builder_start_struct@@Base+0xfc>
   29da4:	str	r0, [fp, #-4]
   29da8:	ldr	r0, [fp, #-4]
   29dac:	mov	sp, fp
   29db0:	pop	{fp, pc}
   29db4:	push	{fp, lr}
   29db8:	mov	fp, sp
   29dbc:	sub	sp, sp, #24
   29dc0:	str	r0, [fp, #-8]
   29dc4:	str	r1, [sp, #12]
   29dc8:	str	r2, [sp, #8]
   29dcc:	ldr	r0, [fp, #-8]
   29dd0:	ldr	r0, [r0, #32]
   29dd4:	ldr	r0, [r0, #20]
   29dd8:	str	r0, [sp, #4]
   29ddc:	ldr	r0, [sp, #4]
   29de0:	ldr	r1, [sp, #12]
   29de4:	add	r0, r0, r1
   29de8:	str	r0, [sp]
   29dec:	ldr	r0, [sp, #4]
   29df0:	ldr	r1, [sp]
   29df4:	cmp	r0, r1
   29df8:	bhi	29e0c <flatcc_builder_extend_vector@@Base+0xc4>
   29dfc:	ldr	r0, [sp]
   29e00:	ldr	r1, [sp, #8]
   29e04:	cmp	r0, r1
   29e08:	bls	29e5c <flatcc_builder_extend_vector@@Base+0x114>
   29e0c:	ldr	r0, [sp, #4]
   29e10:	ldr	r1, [sp]
   29e14:	cmp	r0, r1
   29e18:	bhi	29e30 <flatcc_builder_extend_vector@@Base+0xe8>
   29e1c:	ldr	r0, [sp]
   29e20:	ldr	r1, [sp, #8]
   29e24:	cmp	r0, r1
   29e28:	bhi	29e30 <flatcc_builder_extend_vector@@Base+0xe8>
   29e2c:	b	29e50 <flatcc_builder_extend_vector@@Base+0x108>
   29e30:	ldr	r0, [pc, #72]	; 29e80 <flatcc_builder_extend_vector@@Base+0x138>
   29e34:	add	r0, pc, r0
   29e38:	ldr	r1, [pc, #68]	; 29e84 <flatcc_builder_extend_vector@@Base+0x13c>
   29e3c:	add	r1, pc, r1
   29e40:	ldr	r2, [pc, #64]	; 29e88 <flatcc_builder_extend_vector@@Base+0x140>
   29e44:	add	r3, pc, r2
   29e48:	movw	r2, #892	; 0x37c
   29e4c:	bl	12e68 <__assert_fail@plt>
   29e50:	mvn	r0, #0
   29e54:	str	r0, [fp, #-4]
   29e58:	b	29e74 <flatcc_builder_extend_vector@@Base+0x12c>
   29e5c:	ldr	r0, [sp]
   29e60:	ldr	r1, [fp, #-8]
   29e64:	ldr	r1, [r1, #32]
   29e68:	str	r0, [r1, #20]
   29e6c:	movw	r0, #0
   29e70:	str	r0, [fp, #-4]
   29e74:	ldr	r0, [fp, #-4]
   29e78:	mov	sp, fp
   29e7c:	pop	{fp, pc}
   29e80:	andeq	sp, r0, r4, asr #12
   29e84:	andeq	ip, r0, r6, ror r5
   29e88:	andeq	sp, r0, pc, asr #12

00029e8c <flatcc_builder_vector_push@@Base>:
   29e8c:	push	{fp, lr}
   29e90:	mov	fp, sp
   29e94:	sub	sp, sp, #16
   29e98:	str	r0, [sp, #8]
   29e9c:	str	r1, [sp, #4]
   29ea0:	ldr	r0, [sp, #8]
   29ea4:	ldr	r0, [r0, #32]
   29ea8:	ldrh	r0, [r0, #14]
   29eac:	cmp	r0, #4
   29eb0:	bne	29eb8 <flatcc_builder_vector_push@@Base+0x2c>
   29eb4:	b	29ed8 <flatcc_builder_vector_push@@Base+0x4c>
   29eb8:	ldr	r0, [pc, #196]	; 29f84 <flatcc_builder_vector_push@@Base+0xf8>
   29ebc:	add	r0, pc, r0
   29ec0:	ldr	r1, [pc, #192]	; 29f88 <flatcc_builder_vector_push@@Base+0xfc>
   29ec4:	add	r1, pc, r1
   29ec8:	ldr	r2, [pc, #188]	; 29f8c <flatcc_builder_vector_push@@Base+0x100>
   29ecc:	add	r3, pc, r2
   29ed0:	movw	r2, #907	; 0x38b
   29ed4:	bl	12e68 <__assert_fail@plt>
   29ed8:	ldr	r0, [sp, #8]
   29edc:	ldr	r0, [r0, #32]
   29ee0:	ldr	r0, [r0, #20]
   29ee4:	ldr	r1, [sp, #8]
   29ee8:	ldr	r1, [r1, #32]
   29eec:	ldr	r1, [r1, #24]
   29ef0:	cmp	r0, r1
   29ef4:	bls	29f48 <flatcc_builder_vector_push@@Base+0xbc>
   29ef8:	ldr	r0, [sp, #8]
   29efc:	ldr	r0, [r0, #32]
   29f00:	ldr	r0, [r0, #20]
   29f04:	ldr	r1, [sp, #8]
   29f08:	ldr	r1, [r1, #32]
   29f0c:	ldr	r1, [r1, #24]
   29f10:	cmp	r0, r1
   29f14:	bhi	29f1c <flatcc_builder_vector_push@@Base+0x90>
   29f18:	b	29f3c <flatcc_builder_vector_push@@Base+0xb0>
   29f1c:	ldr	r0, [pc, #108]	; 29f90 <flatcc_builder_vector_push@@Base+0x104>
   29f20:	add	r0, pc, r0
   29f24:	ldr	r1, [pc, #104]	; 29f94 <flatcc_builder_vector_push@@Base+0x108>
   29f28:	add	r1, pc, r1
   29f2c:	ldr	r2, [pc, #100]	; 29f98 <flatcc_builder_vector_push@@Base+0x10c>
   29f30:	add	r3, pc, r2
   29f34:	movw	r2, #908	; 0x38c
   29f38:	bl	12e68 <__assert_fail@plt>
   29f3c:	movw	r0, #0
   29f40:	str	r0, [fp, #-4]
   29f44:	b	29f78 <flatcc_builder_vector_push@@Base+0xec>
   29f48:	ldr	r0, [sp, #8]
   29f4c:	ldr	r0, [r0, #32]
   29f50:	ldr	r1, [r0, #20]
   29f54:	add	r1, r1, #1
   29f58:	str	r1, [r0, #20]
   29f5c:	ldr	r0, [sp, #8]
   29f60:	ldr	r1, [sp, #4]
   29f64:	ldr	r2, [sp, #8]
   29f68:	ldr	r2, [r2, #32]
   29f6c:	ldr	r2, [r2, #16]
   29f70:	bl	29f9c <flatcc_builder_vector_push@@Base+0x110>
   29f74:	str	r0, [fp, #-4]
   29f78:	ldr	r0, [fp, #-4]
   29f7c:	mov	sp, fp
   29f80:	pop	{fp, pc}
   29f84:	andeq	ip, r0, r0, lsr r8
   29f88:	andeq	ip, r0, lr, ror #9
   29f8c:	andeq	ip, r0, ip, asr #16
   29f90:	andeq	ip, r0, fp, lsr r8
   29f94:	andeq	ip, r0, sl, lsl #9
   29f98:	andeq	ip, r0, r8, ror #15
   29f9c:	push	{fp, lr}
   29fa0:	mov	fp, sp
   29fa4:	sub	sp, sp, #24
   29fa8:	str	r0, [fp, #-8]
   29fac:	str	r1, [sp, #12]
   29fb0:	str	r2, [sp, #8]
   29fb4:	ldr	r0, [fp, #-8]
   29fb8:	ldr	r1, [sp, #8]
   29fbc:	bl	29bf0 <flatcc_builder_start_struct@@Base+0xfc>
   29fc0:	str	r0, [sp, #4]
   29fc4:	movw	r1, #0
   29fc8:	cmp	r0, r1
   29fcc:	bne	29fdc <flatcc_builder_vector_push@@Base+0x150>
   29fd0:	movw	r0, #0
   29fd4:	str	r0, [fp, #-4]
   29fd8:	b	29ff4 <flatcc_builder_vector_push@@Base+0x168>
   29fdc:	ldr	r0, [sp, #4]
   29fe0:	ldr	r1, [sp, #12]
   29fe4:	ldr	r2, [sp, #8]
   29fe8:	bl	12db4 <memcpy@plt>
   29fec:	ldr	r0, [sp, #4]
   29ff0:	str	r0, [fp, #-4]
   29ff4:	ldr	r0, [fp, #-4]
   29ff8:	mov	sp, fp
   29ffc:	pop	{fp, pc}

0002a000 <flatcc_builder_append_vector@@Base>:
   2a000:	push	{fp, lr}
   2a004:	mov	fp, sp
   2a008:	sub	sp, sp, #16
   2a00c:	str	r0, [sp, #8]
   2a010:	str	r1, [sp, #4]
   2a014:	str	r2, [sp]
   2a018:	ldr	r0, [sp, #8]
   2a01c:	ldr	r0, [r0, #32]
   2a020:	ldrh	r0, [r0, #14]
   2a024:	cmp	r0, #4
   2a028:	bne	2a030 <flatcc_builder_append_vector@@Base+0x30>
   2a02c:	b	2a050 <flatcc_builder_append_vector@@Base+0x50>
   2a030:	ldr	r0, [pc, #116]	; 2a0ac <flatcc_builder_append_vector@@Base+0xac>
   2a034:	add	r0, pc, r0
   2a038:	ldr	r1, [pc, #112]	; 2a0b0 <flatcc_builder_append_vector@@Base+0xb0>
   2a03c:	add	r1, pc, r1
   2a040:	ldr	r2, [pc, #108]	; 2a0b4 <flatcc_builder_append_vector@@Base+0xb4>
   2a044:	add	r3, pc, r2
   2a048:	movw	r2, #915	; 0x393
   2a04c:	bl	12e68 <__assert_fail@plt>
   2a050:	ldr	r0, [sp, #8]
   2a054:	ldr	r1, [sp]
   2a058:	ldr	r2, [sp, #8]
   2a05c:	ldr	r2, [r2, #32]
   2a060:	ldr	r2, [r2, #24]
   2a064:	bl	29db4 <flatcc_builder_extend_vector@@Base+0x6c>
   2a068:	cmp	r0, #0
   2a06c:	beq	2a07c <flatcc_builder_append_vector@@Base+0x7c>
   2a070:	movw	r0, #0
   2a074:	str	r0, [fp, #-4]
   2a078:	b	2a0a0 <flatcc_builder_append_vector@@Base+0xa0>
   2a07c:	ldr	r0, [sp, #8]
   2a080:	ldr	r1, [sp, #4]
   2a084:	ldr	r2, [sp, #8]
   2a088:	ldr	r2, [r2, #32]
   2a08c:	ldr	r2, [r2, #16]
   2a090:	ldr	r3, [sp]
   2a094:	mul	r2, r2, r3
   2a098:	bl	29f9c <flatcc_builder_vector_push@@Base+0x110>
   2a09c:	str	r0, [fp, #-4]
   2a0a0:	ldr	r0, [fp, #-4]
   2a0a4:	mov	sp, fp
   2a0a8:	pop	{fp, pc}
   2a0ac:			; <UNDEFINED> instruction: 0x0000c6b8
   2a0b0:	andeq	ip, r0, r6, ror r3
   2a0b4:	andeq	ip, r0, r4, asr r7

0002a0b8 <flatcc_builder_extend_offset_vector@@Base>:
   2a0b8:	push	{fp, lr}
   2a0bc:	mov	fp, sp
   2a0c0:	sub	sp, sp, #16
   2a0c4:	ldr	r2, [pc, #68]	; 2a110 <flatcc_builder_extend_offset_vector@@Base+0x58>
   2a0c8:	str	r0, [sp, #8]
   2a0cc:	str	r1, [sp, #4]
   2a0d0:	ldr	r0, [sp, #8]
   2a0d4:	ldr	r1, [sp, #4]
   2a0d8:	bl	29db4 <flatcc_builder_extend_vector@@Base+0x6c>
   2a0dc:	cmp	r0, #0
   2a0e0:	beq	2a0f0 <flatcc_builder_extend_offset_vector@@Base+0x38>
   2a0e4:	movw	r0, #0
   2a0e8:	str	r0, [fp, #-4]
   2a0ec:	b	2a104 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   2a0f0:	ldr	r0, [sp, #8]
   2a0f4:	ldr	r1, [sp, #4]
   2a0f8:	lsl	r1, r1, #2
   2a0fc:	bl	29bf0 <flatcc_builder_start_struct@@Base+0xfc>
   2a100:	str	r0, [fp, #-4]
   2a104:	ldr	r0, [fp, #-4]
   2a108:	mov	sp, fp
   2a10c:	pop	{fp, pc}
   2a110:	svccc	0x00ffffff

0002a114 <flatcc_builder_offset_vector_push@@Base>:
   2a114:	push	{fp, lr}
   2a118:	mov	fp, sp
   2a11c:	sub	sp, sp, #16
   2a120:	str	r0, [sp, #8]
   2a124:	str	r1, [sp, #4]
   2a128:	ldr	r0, [sp, #8]
   2a12c:	ldr	r0, [r0, #32]
   2a130:	ldrh	r0, [r0, #14]
   2a134:	cmp	r0, #5
   2a138:	bne	2a140 <flatcc_builder_offset_vector_push@@Base+0x2c>
   2a13c:	b	2a160 <flatcc_builder_offset_vector_push@@Base+0x4c>
   2a140:	ldr	r0, [pc, #152]	; 2a1e0 <flatcc_builder_offset_vector_push@@Base+0xcc>
   2a144:	add	r0, pc, r0
   2a148:	ldr	r1, [pc, #148]	; 2a1e4 <flatcc_builder_offset_vector_push@@Base+0xd0>
   2a14c:	add	r1, pc, r1
   2a150:	ldr	r2, [pc, #144]	; 2a1e8 <flatcc_builder_offset_vector_push@@Base+0xd4>
   2a154:	add	r3, pc, r2
   2a158:	movw	r2, #934	; 0x3a6
   2a15c:	bl	12e68 <__assert_fail@plt>
   2a160:	ldr	r0, [pc, #132]	; 2a1ec <flatcc_builder_offset_vector_push@@Base+0xd8>
   2a164:	ldr	r1, [sp, #8]
   2a168:	ldr	r1, [r1, #32]
   2a16c:	ldr	r1, [r1, #20]
   2a170:	cmp	r1, r0
   2a174:	bne	2a184 <flatcc_builder_offset_vector_push@@Base+0x70>
   2a178:	movw	r0, #0
   2a17c:	str	r0, [fp, #-4]
   2a180:	b	2a1d4 <flatcc_builder_offset_vector_push@@Base+0xc0>
   2a184:	ldr	r0, [sp, #8]
   2a188:	ldr	r0, [r0, #32]
   2a18c:	ldr	r1, [r0, #20]
   2a190:	add	r1, r1, #1
   2a194:	str	r1, [r0, #20]
   2a198:	ldr	r0, [sp, #8]
   2a19c:	movw	r1, #4
   2a1a0:	bl	29bf0 <flatcc_builder_start_struct@@Base+0xfc>
   2a1a4:	str	r0, [sp]
   2a1a8:	movw	r1, #0
   2a1ac:	cmp	r1, r0
   2a1b0:	bne	2a1c0 <flatcc_builder_offset_vector_push@@Base+0xac>
   2a1b4:	movw	r0, #0
   2a1b8:	str	r0, [fp, #-4]
   2a1bc:	b	2a1d4 <flatcc_builder_offset_vector_push@@Base+0xc0>
   2a1c0:	ldr	r0, [sp, #4]
   2a1c4:	ldr	r1, [sp]
   2a1c8:	str	r0, [r1]
   2a1cc:	ldr	r0, [sp]
   2a1d0:	str	r0, [fp, #-4]
   2a1d4:	ldr	r0, [fp, #-4]
   2a1d8:	mov	sp, fp
   2a1dc:	pop	{fp, pc}
   2a1e0:	andeq	ip, r0, r1, lsr #13
   2a1e4:	andeq	ip, r0, r6, ror #4
   2a1e8:	andeq	ip, r0, r4, asr #13
   2a1ec:	svccc	0x00ffffff

0002a1f0 <flatcc_builder_append_offset_vector@@Base>:
   2a1f0:	push	{fp, lr}
   2a1f4:	mov	fp, sp
   2a1f8:	sub	sp, sp, #16
   2a1fc:	str	r0, [sp, #8]
   2a200:	str	r1, [sp, #4]
   2a204:	str	r2, [sp]
   2a208:	ldr	r0, [sp, #8]
   2a20c:	ldr	r0, [r0, #32]
   2a210:	ldrh	r0, [r0, #14]
   2a214:	cmp	r0, #5
   2a218:	bne	2a220 <flatcc_builder_append_offset_vector@@Base+0x30>
   2a21c:	b	2a240 <flatcc_builder_append_offset_vector@@Base+0x50>
   2a220:	ldr	r0, [pc, #96]	; 2a288 <flatcc_builder_append_offset_vector@@Base+0x98>
   2a224:	add	r0, pc, r0
   2a228:	ldr	r1, [pc, #92]	; 2a28c <flatcc_builder_append_offset_vector@@Base+0x9c>
   2a22c:	add	r1, pc, r1
   2a230:	ldr	r2, [pc, #88]	; 2a290 <flatcc_builder_append_offset_vector@@Base+0xa0>
   2a234:	add	r3, pc, r2
   2a238:	movw	r2, #948	; 0x3b4
   2a23c:	bl	12e68 <__assert_fail@plt>
   2a240:	ldr	r2, [pc, #76]	; 2a294 <flatcc_builder_append_offset_vector@@Base+0xa4>
   2a244:	ldr	r0, [sp, #8]
   2a248:	ldr	r1, [sp]
   2a24c:	bl	29db4 <flatcc_builder_extend_vector@@Base+0x6c>
   2a250:	cmp	r0, #0
   2a254:	beq	2a264 <flatcc_builder_append_offset_vector@@Base+0x74>
   2a258:	movw	r0, #0
   2a25c:	str	r0, [fp, #-4]
   2a260:	b	2a27c <flatcc_builder_append_offset_vector@@Base+0x8c>
   2a264:	ldr	r0, [sp, #8]
   2a268:	ldr	r1, [sp, #4]
   2a26c:	ldr	r2, [sp]
   2a270:	lsl	r2, r2, #2
   2a274:	bl	29f9c <flatcc_builder_vector_push@@Base+0x110>
   2a278:	str	r0, [fp, #-4]
   2a27c:	ldr	r0, [fp, #-4]
   2a280:	mov	sp, fp
   2a284:	pop	{fp, pc}
   2a288:	andeq	ip, r0, r1, asr #11
   2a28c:	andeq	ip, r0, r6, lsl #3
   2a290:	andeq	ip, r0, r6, asr #12
   2a294:	svccc	0x00ffffff

0002a298 <flatcc_builder_extend_string@@Base>:
   2a298:	push	{fp, lr}
   2a29c:	mov	fp, sp
   2a2a0:	sub	sp, sp, #16
   2a2a4:	str	r0, [sp, #8]
   2a2a8:	str	r1, [sp, #4]
   2a2ac:	ldr	r0, [sp, #8]
   2a2b0:	ldr	r0, [r0, #32]
   2a2b4:	ldrh	r0, [r0, #14]
   2a2b8:	cmp	r0, #6
   2a2bc:	bne	2a2c4 <flatcc_builder_extend_string@@Base+0x2c>
   2a2c0:	b	2a2e4 <flatcc_builder_extend_string@@Base+0x4c>
   2a2c4:	ldr	r0, [pc, #88]	; 2a324 <flatcc_builder_extend_string@@Base+0x8c>
   2a2c8:	add	r0, pc, r0
   2a2cc:	ldr	r1, [pc, #84]	; 2a328 <flatcc_builder_extend_string@@Base+0x90>
   2a2d0:	add	r1, pc, r1
   2a2d4:	ldr	r2, [pc, #80]	; 2a32c <flatcc_builder_extend_string@@Base+0x94>
   2a2d8:	add	r3, pc, r2
   2a2dc:	movw	r2, #957	; 0x3bd
   2a2e0:	bl	12e68 <__assert_fail@plt>
   2a2e4:	ldr	r0, [sp, #8]
   2a2e8:	ldr	r1, [sp, #4]
   2a2ec:	mvn	r2, #0
   2a2f0:	bl	29db4 <flatcc_builder_extend_vector@@Base+0x6c>
   2a2f4:	cmp	r0, #0
   2a2f8:	beq	2a308 <flatcc_builder_extend_string@@Base+0x70>
   2a2fc:	movw	r0, #0
   2a300:	str	r0, [fp, #-4]
   2a304:	b	2a318 <flatcc_builder_extend_string@@Base+0x80>
   2a308:	ldr	r0, [sp, #8]
   2a30c:	ldr	r1, [sp, #4]
   2a310:	bl	29bf0 <flatcc_builder_start_struct@@Base+0xfc>
   2a314:	str	r0, [fp, #-4]
   2a318:	ldr	r0, [fp, #-4]
   2a31c:	mov	sp, fp
   2a320:	pop	{fp, pc}
   2a324:	andeq	ip, r0, r6, lsr #12
   2a328:	andeq	ip, r0, r2, ror #1
   2a32c:	andeq	ip, r0, r2, asr #12

0002a330 <flatcc_builder_append_string@@Base>:
   2a330:	push	{fp, lr}
   2a334:	mov	fp, sp
   2a338:	sub	sp, sp, #16
   2a33c:	str	r0, [sp, #8]
   2a340:	str	r1, [sp, #4]
   2a344:	str	r2, [sp]
   2a348:	ldr	r0, [sp, #8]
   2a34c:	ldr	r0, [r0, #32]
   2a350:	ldrh	r0, [r0, #14]
   2a354:	cmp	r0, #6
   2a358:	bne	2a360 <flatcc_builder_append_string@@Base+0x30>
   2a35c:	b	2a380 <flatcc_builder_append_string@@Base+0x50>
   2a360:	ldr	r0, [pc, #92]	; 2a3c4 <flatcc_builder_append_string@@Base+0x94>
   2a364:	add	r0, pc, r0
   2a368:	ldr	r1, [pc, #88]	; 2a3c8 <flatcc_builder_append_string@@Base+0x98>
   2a36c:	add	r1, pc, r1
   2a370:	ldr	r2, [pc, #84]	; 2a3cc <flatcc_builder_append_string@@Base+0x9c>
   2a374:	add	r3, pc, r2
   2a378:	movw	r2, #966	; 0x3c6
   2a37c:	bl	12e68 <__assert_fail@plt>
   2a380:	ldr	r0, [sp, #8]
   2a384:	ldr	r1, [sp]
   2a388:	mvn	r2, #0
   2a38c:	bl	29db4 <flatcc_builder_extend_vector@@Base+0x6c>
   2a390:	cmp	r0, #0
   2a394:	beq	2a3a4 <flatcc_builder_append_string@@Base+0x74>
   2a398:	movw	r0, #0
   2a39c:	str	r0, [fp, #-4]
   2a3a0:	b	2a3b8 <flatcc_builder_append_string@@Base+0x88>
   2a3a4:	ldr	r0, [sp, #8]
   2a3a8:	ldr	r1, [sp, #4]
   2a3ac:	ldr	r2, [sp]
   2a3b0:	bl	29f9c <flatcc_builder_vector_push@@Base+0x110>
   2a3b4:	str	r0, [fp, #-4]
   2a3b8:	ldr	r0, [fp, #-4]
   2a3bc:	mov	sp, fp
   2a3c0:	pop	{fp, pc}
   2a3c4:	andeq	ip, r0, sl, lsl #11
   2a3c8:	andeq	ip, r0, r6, asr #32
   2a3cc:	andeq	ip, r0, r5, ror #11

0002a3d0 <flatcc_builder_append_string_str@@Base>:
   2a3d0:	push	{fp, lr}
   2a3d4:	mov	fp, sp
   2a3d8:	sub	sp, sp, #24
   2a3dc:	str	r0, [fp, #-4]
   2a3e0:	str	r1, [fp, #-8]
   2a3e4:	ldr	r0, [fp, #-4]
   2a3e8:	ldr	r1, [fp, #-8]
   2a3ec:	ldr	r2, [fp, #-8]
   2a3f0:	str	r0, [sp, #12]
   2a3f4:	mov	r0, r2
   2a3f8:	str	r1, [sp, #8]
   2a3fc:	bl	12e08 <strlen@plt>
   2a400:	ldr	r1, [sp, #12]
   2a404:	str	r0, [sp, #4]
   2a408:	mov	r0, r1
   2a40c:	ldr	r1, [sp, #8]
   2a410:	ldr	r2, [sp, #4]
   2a414:	bl	2a330 <flatcc_builder_append_string@@Base>
   2a418:	mov	sp, fp
   2a41c:	pop	{fp, pc}

0002a420 <flatcc_builder_append_string_strn@@Base>:
   2a420:	push	{fp, lr}
   2a424:	mov	fp, sp
   2a428:	sub	sp, sp, #24
   2a42c:	str	r0, [fp, #-4]
   2a430:	str	r1, [fp, #-8]
   2a434:	str	r2, [sp, #12]
   2a438:	ldr	r0, [fp, #-4]
   2a43c:	ldr	r1, [fp, #-8]
   2a440:	ldr	r2, [fp, #-8]
   2a444:	ldr	r3, [sp, #12]
   2a448:	str	r0, [sp, #8]
   2a44c:	mov	r0, r2
   2a450:	str	r1, [sp, #4]
   2a454:	mov	r1, r3
   2a458:	bl	2a47c <flatcc_builder_append_string_strn@@Base+0x5c>
   2a45c:	ldr	r1, [sp, #8]
   2a460:	str	r0, [sp]
   2a464:	mov	r0, r1
   2a468:	ldr	r1, [sp, #4]
   2a46c:	ldr	r2, [sp]
   2a470:	bl	2a330 <flatcc_builder_append_string@@Base>
   2a474:	mov	sp, fp
   2a478:	pop	{fp, pc}
   2a47c:	push	{fp, lr}
   2a480:	mov	fp, sp
   2a484:	sub	sp, sp, #16
   2a488:	str	r0, [fp, #-4]
   2a48c:	str	r1, [sp, #8]
   2a490:	ldr	r0, [fp, #-4]
   2a494:	ldr	r2, [sp, #8]
   2a498:	mov	r1, #0
   2a49c:	bl	12e44 <memchr@plt>
   2a4a0:	str	r0, [sp, #4]
   2a4a4:	ldr	r0, [sp, #4]
   2a4a8:	movw	r1, #0
   2a4ac:	cmp	r0, r1
   2a4b0:	beq	2a4c8 <flatcc_builder_append_string_strn@@Base+0xa8>
   2a4b4:	ldr	r0, [sp, #4]
   2a4b8:	ldr	r1, [fp, #-4]
   2a4bc:	sub	r0, r0, r1
   2a4c0:	str	r0, [sp]
   2a4c4:	b	2a4d0 <flatcc_builder_append_string_strn@@Base+0xb0>
   2a4c8:	ldr	r0, [sp, #8]
   2a4cc:	str	r0, [sp]
   2a4d0:	ldr	r0, [sp]
   2a4d4:	mov	sp, fp
   2a4d8:	pop	{fp, pc}

0002a4dc <flatcc_builder_truncate_vector@@Base>:
   2a4dc:	push	{fp, lr}
   2a4e0:	mov	fp, sp
   2a4e4:	sub	sp, sp, #16
   2a4e8:	str	r0, [sp, #8]
   2a4ec:	str	r1, [sp, #4]
   2a4f0:	ldr	r0, [sp, #8]
   2a4f4:	ldr	r0, [r0, #32]
   2a4f8:	ldrh	r0, [r0, #14]
   2a4fc:	cmp	r0, #4
   2a500:	bne	2a508 <flatcc_builder_truncate_vector@@Base+0x2c>
   2a504:	b	2a528 <flatcc_builder_truncate_vector@@Base+0x4c>
   2a508:	ldr	r0, [pc, #192]	; 2a5d0 <flatcc_builder_truncate_vector@@Base+0xf4>
   2a50c:	add	r0, pc, r0
   2a510:	ldr	r1, [pc, #188]	; 2a5d4 <flatcc_builder_truncate_vector@@Base+0xf8>
   2a514:	add	r1, pc, r1
   2a518:	ldr	r2, [pc, #184]	; 2a5d8 <flatcc_builder_truncate_vector@@Base+0xfc>
   2a51c:	add	r3, pc, r2
   2a520:	movw	r2, #985	; 0x3d9
   2a524:	bl	12e68 <__assert_fail@plt>
   2a528:	ldr	r0, [sp, #8]
   2a52c:	ldr	r0, [r0, #32]
   2a530:	ldr	r0, [r0, #20]
   2a534:	ldr	r1, [sp, #4]
   2a538:	cmp	r0, r1
   2a53c:	bcs	2a588 <flatcc_builder_truncate_vector@@Base+0xac>
   2a540:	ldr	r0, [sp, #8]
   2a544:	ldr	r0, [r0, #32]
   2a548:	ldr	r0, [r0, #20]
   2a54c:	ldr	r1, [sp, #4]
   2a550:	cmp	r0, r1
   2a554:	bcc	2a55c <flatcc_builder_truncate_vector@@Base+0x80>
   2a558:	b	2a57c <flatcc_builder_truncate_vector@@Base+0xa0>
   2a55c:	ldr	r0, [pc, #120]	; 2a5dc <flatcc_builder_truncate_vector@@Base+0x100>
   2a560:	add	r0, pc, r0
   2a564:	ldr	r1, [pc, #116]	; 2a5e0 <flatcc_builder_truncate_vector@@Base+0x104>
   2a568:	add	r1, pc, r1
   2a56c:	ldr	r2, [pc, #112]	; 2a5e4 <flatcc_builder_truncate_vector@@Base+0x108>
   2a570:	add	r3, pc, r2
   2a574:	movw	r2, #986	; 0x3da
   2a578:	bl	12e68 <__assert_fail@plt>
   2a57c:	mvn	r0, #0
   2a580:	str	r0, [fp, #-4]
   2a584:	b	2a5c4 <flatcc_builder_truncate_vector@@Base+0xe8>
   2a588:	ldr	r0, [sp, #4]
   2a58c:	ldr	r1, [sp, #8]
   2a590:	ldr	r1, [r1, #32]
   2a594:	ldr	r2, [r1, #20]
   2a598:	sub	r0, r2, r0
   2a59c:	str	r0, [r1, #20]
   2a5a0:	ldr	r0, [sp, #8]
   2a5a4:	ldr	r1, [sp, #8]
   2a5a8:	ldr	r1, [r1, #32]
   2a5ac:	ldr	r1, [r1, #16]
   2a5b0:	ldr	r2, [sp, #4]
   2a5b4:	mul	r1, r1, r2
   2a5b8:	bl	2a5e8 <flatcc_builder_truncate_vector@@Base+0x10c>
   2a5bc:	movw	r0, #0
   2a5c0:	str	r0, [fp, #-4]
   2a5c4:	ldr	r0, [fp, #-4]
   2a5c8:	mov	sp, fp
   2a5cc:	pop	{fp, pc}
   2a5d0:	andeq	ip, r0, r0, ror #3
   2a5d4:	muleq	r0, lr, lr
   2a5d8:	andeq	ip, r0, sl, lsl #9
   2a5dc:	andeq	ip, r0, r5, lsl #9
   2a5e0:	andeq	fp, r0, sl, asr #28
   2a5e4:	andeq	ip, r0, r6, lsr r4
   2a5e8:	push	{fp, lr}
   2a5ec:	mov	fp, sp
   2a5f0:	sub	sp, sp, #8
   2a5f4:	str	r0, [sp, #4]
   2a5f8:	str	r1, [sp]
   2a5fc:	ldr	r0, [sp]
   2a600:	ldr	r1, [sp, #4]
   2a604:	ldr	r2, [r1, #20]
   2a608:	sub	r0, r2, r0
   2a60c:	str	r0, [r1, #20]
   2a610:	ldr	r0, [sp, #4]
   2a614:	ldr	r0, [r0, #16]
   2a618:	ldr	r1, [sp, #4]
   2a61c:	ldr	r1, [r1, #20]
   2a620:	add	r0, r0, r1
   2a624:	ldr	r2, [sp]
   2a628:	movw	r1, #0
   2a62c:	and	r1, r1, #255	; 0xff
   2a630:	bl	12e2c <memset@plt>
   2a634:	mov	sp, fp
   2a638:	pop	{fp, pc}

0002a63c <flatcc_builder_truncate_offset_vector@@Base>:
   2a63c:	push	{fp, lr}
   2a640:	mov	fp, sp
   2a644:	sub	sp, sp, #16
   2a648:	str	r0, [sp, #8]
   2a64c:	str	r1, [sp, #4]
   2a650:	ldr	r0, [sp, #8]
   2a654:	ldr	r0, [r0, #32]
   2a658:	ldrh	r0, [r0, #14]
   2a65c:	cmp	r0, #5
   2a660:	bne	2a668 <flatcc_builder_truncate_offset_vector@@Base+0x2c>
   2a664:	b	2a688 <flatcc_builder_truncate_offset_vector@@Base+0x4c>
   2a668:	ldr	r0, [pc, #192]	; 2a730 <flatcc_builder_truncate_offset_vector@@Base+0xf4>
   2a66c:	add	r0, pc, r0
   2a670:	ldr	r1, [pc, #188]	; 2a734 <flatcc_builder_truncate_offset_vector@@Base+0xf8>
   2a674:	add	r1, pc, r1
   2a678:	ldr	r2, [pc, #184]	; 2a738 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   2a67c:	add	r3, pc, r2
   2a680:	movw	r2, #994	; 0x3e2
   2a684:	bl	12e68 <__assert_fail@plt>
   2a688:	ldr	r0, [sp, #8]
   2a68c:	ldr	r0, [r0, #32]
   2a690:	ldr	r0, [r0, #20]
   2a694:	ldr	r1, [sp, #4]
   2a698:	cmp	r0, r1
   2a69c:	bcs	2a6e8 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   2a6a0:	ldr	r0, [sp, #8]
   2a6a4:	ldr	r0, [r0, #32]
   2a6a8:	ldr	r0, [r0, #20]
   2a6ac:	ldr	r1, [sp, #4]
   2a6b0:	cmp	r0, r1
   2a6b4:	bcc	2a6bc <flatcc_builder_truncate_offset_vector@@Base+0x80>
   2a6b8:	b	2a6dc <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   2a6bc:	ldr	r0, [pc, #120]	; 2a73c <flatcc_builder_truncate_offset_vector@@Base+0x100>
   2a6c0:	add	r0, pc, r0
   2a6c4:	ldr	r1, [pc, #116]	; 2a740 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   2a6c8:	add	r1, pc, r1
   2a6cc:	ldr	r2, [pc, #112]	; 2a744 <flatcc_builder_truncate_offset_vector@@Base+0x108>
   2a6d0:	add	r3, pc, r2
   2a6d4:	movw	r2, #995	; 0x3e3
   2a6d8:	bl	12e68 <__assert_fail@plt>
   2a6dc:	mvn	r0, #0
   2a6e0:	str	r0, [fp, #-4]
   2a6e4:	b	2a724 <flatcc_builder_truncate_offset_vector@@Base+0xe8>
   2a6e8:	ldr	r0, [sp, #4]
   2a6ec:	ldr	r1, [sp, #8]
   2a6f0:	ldr	r1, [r1, #32]
   2a6f4:	ldr	r2, [r1, #20]
   2a6f8:	sub	r0, r2, r0
   2a6fc:	str	r0, [r1, #20]
   2a700:	ldr	r0, [sp, #8]
   2a704:	ldr	r1, [sp, #8]
   2a708:	ldr	r1, [r1, #32]
   2a70c:	ldr	r1, [r1, #16]
   2a710:	ldr	r2, [sp, #4]
   2a714:	mul	r1, r1, r2
   2a718:	bl	2a5e8 <flatcc_builder_truncate_vector@@Base+0x10c>
   2a71c:	movw	r0, #0
   2a720:	str	r0, [fp, #-4]
   2a724:	ldr	r0, [fp, #-4]
   2a728:	mov	sp, fp
   2a72c:	pop	{fp, pc}
   2a730:	andeq	ip, r0, r9, ror r1
   2a734:	andeq	fp, r0, lr, lsr sp
   2a738:	andeq	ip, r0, sp, lsl #7
   2a73c:	andeq	ip, r0, pc, lsl #7
   2a740:	andeq	fp, r0, sl, ror #25
   2a744:	andeq	ip, r0, r9, lsr r3

0002a748 <flatcc_builder_truncate_string@@Base>:
   2a748:	push	{fp, lr}
   2a74c:	mov	fp, sp
   2a750:	sub	sp, sp, #16
   2a754:	str	r0, [sp, #8]
   2a758:	str	r1, [sp, #4]
   2a75c:	ldr	r0, [sp, #8]
   2a760:	ldr	r0, [r0, #32]
   2a764:	ldrh	r0, [r0, #14]
   2a768:	cmp	r0, #6
   2a76c:	bne	2a774 <flatcc_builder_truncate_string@@Base+0x2c>
   2a770:	b	2a794 <flatcc_builder_truncate_string@@Base+0x4c>
   2a774:	ldr	r0, [pc, #176]	; 2a82c <flatcc_builder_truncate_string@@Base+0xe4>
   2a778:	add	r0, pc, r0
   2a77c:	ldr	r1, [pc, #172]	; 2a830 <flatcc_builder_truncate_string@@Base+0xe8>
   2a780:	add	r1, pc, r1
   2a784:	ldr	r2, [pc, #168]	; 2a834 <flatcc_builder_truncate_string@@Base+0xec>
   2a788:	add	r3, pc, r2
   2a78c:	movw	r2, #1003	; 0x3eb
   2a790:	bl	12e68 <__assert_fail@plt>
   2a794:	ldr	r0, [sp, #8]
   2a798:	ldr	r0, [r0, #32]
   2a79c:	ldr	r0, [r0, #20]
   2a7a0:	ldr	r1, [sp, #4]
   2a7a4:	cmp	r0, r1
   2a7a8:	bcs	2a7f4 <flatcc_builder_truncate_string@@Base+0xac>
   2a7ac:	ldr	r0, [sp, #8]
   2a7b0:	ldr	r0, [r0, #32]
   2a7b4:	ldr	r0, [r0, #20]
   2a7b8:	ldr	r1, [sp, #4]
   2a7bc:	cmp	r0, r1
   2a7c0:	bcc	2a7c8 <flatcc_builder_truncate_string@@Base+0x80>
   2a7c4:	b	2a7e8 <flatcc_builder_truncate_string@@Base+0xa0>
   2a7c8:	ldr	r0, [pc, #104]	; 2a838 <flatcc_builder_truncate_string@@Base+0xf0>
   2a7cc:	add	r0, pc, r0
   2a7d0:	ldr	r1, [pc, #100]	; 2a83c <flatcc_builder_truncate_string@@Base+0xf4>
   2a7d4:	add	r1, pc, r1
   2a7d8:	ldr	r2, [pc, #96]	; 2a840 <flatcc_builder_truncate_string@@Base+0xf8>
   2a7dc:	add	r3, pc, r2
   2a7e0:	movw	r2, #1004	; 0x3ec
   2a7e4:	bl	12e68 <__assert_fail@plt>
   2a7e8:	mvn	r0, #0
   2a7ec:	str	r0, [fp, #-4]
   2a7f0:	b	2a820 <flatcc_builder_truncate_string@@Base+0xd8>
   2a7f4:	ldr	r0, [sp, #4]
   2a7f8:	ldr	r1, [sp, #8]
   2a7fc:	ldr	r1, [r1, #32]
   2a800:	ldr	r2, [r1, #20]
   2a804:	sub	r0, r2, r0
   2a808:	str	r0, [r1, #20]
   2a80c:	ldr	r0, [sp, #8]
   2a810:	ldr	r1, [sp, #4]
   2a814:	bl	2a5e8 <flatcc_builder_truncate_vector@@Base+0x10c>
   2a818:	movw	r0, #0
   2a81c:	str	r0, [fp, #-4]
   2a820:	ldr	r0, [fp, #-4]
   2a824:	mov	sp, fp
   2a828:	pop	{fp, pc}
   2a82c:	andeq	ip, r0, r6, ror r1
   2a830:	andeq	fp, r0, r2, lsr ip
   2a834:	andeq	ip, r0, r2, lsl #6
   2a838:	strdeq	ip, [r0], -sp
   2a83c:	ldrdeq	fp, [r0], -lr
   2a840:	andeq	ip, r0, lr, lsr #5

0002a844 <flatcc_builder_start_vector@@Base>:
   2a844:	push	{fp, lr}
   2a848:	mov	fp, sp
   2a84c:	sub	sp, sp, #24
   2a850:	str	r0, [fp, #-8]
   2a854:	str	r1, [sp, #12]
   2a858:	strh	r2, [sp, #10]
   2a85c:	str	r3, [sp, #4]
   2a860:	add	r0, sp, #10
   2a864:	movw	r1, #4
   2a868:	uxth	r1, r1
   2a86c:	bl	2a8f0 <flatcc_builder_start_vector@@Base+0xac>
   2a870:	ldr	r0, [fp, #-8]
   2a874:	ldrh	r1, [sp, #10]
   2a878:	bl	29708 <flatcc_builder_start_buffer@@Base+0x178>
   2a87c:	cmp	r0, #0
   2a880:	beq	2a890 <flatcc_builder_start_vector@@Base+0x4c>
   2a884:	mvn	r0, #0
   2a888:	str	r0, [fp, #-4]
   2a88c:	b	2a8e4 <flatcc_builder_start_vector@@Base+0xa0>
   2a890:	ldr	r0, [sp, #12]
   2a894:	ldr	r1, [fp, #-8]
   2a898:	ldr	r1, [r1, #32]
   2a89c:	str	r0, [r1, #16]
   2a8a0:	ldr	r0, [fp, #-8]
   2a8a4:	ldr	r0, [r0, #32]
   2a8a8:	movw	r1, #0
   2a8ac:	str	r1, [r0, #20]
   2a8b0:	ldr	r0, [sp, #4]
   2a8b4:	ldr	r1, [fp, #-8]
   2a8b8:	ldr	r1, [r1, #32]
   2a8bc:	str	r0, [r1, #24]
   2a8c0:	ldr	r0, [fp, #-8]
   2a8c4:	ldr	r0, [r0, #32]
   2a8c8:	movw	r1, #4
   2a8cc:	strh	r1, [r0, #14]
   2a8d0:	ldr	r0, [fp, #-8]
   2a8d4:	mvn	r1, #3
   2a8d8:	bl	29b64 <flatcc_builder_start_struct@@Base+0x70>
   2a8dc:	movw	r0, #0
   2a8e0:	str	r0, [fp, #-4]
   2a8e4:	ldr	r0, [fp, #-4]
   2a8e8:	mov	sp, fp
   2a8ec:	pop	{fp, pc}
   2a8f0:	sub	sp, sp, #8
   2a8f4:	str	r0, [sp, #4]
   2a8f8:	strh	r1, [sp, #2]
   2a8fc:	ldr	r0, [sp, #4]
   2a900:	ldrh	r0, [r0]
   2a904:	ldrh	r1, [sp, #2]
   2a908:	cmp	r0, r1
   2a90c:	bge	2a91c <flatcc_builder_start_vector@@Base+0xd8>
   2a910:	ldrh	r0, [sp, #2]
   2a914:	ldr	r1, [sp, #4]
   2a918:	strh	r0, [r1]
   2a91c:	add	sp, sp, #8
   2a920:	bx	lr

0002a924 <flatcc_builder_start_offset_vector@@Base>:
   2a924:	push	{fp, lr}
   2a928:	mov	fp, sp
   2a92c:	sub	sp, sp, #8
   2a930:	str	r0, [sp]
   2a934:	ldr	r0, [sp]
   2a938:	movw	r1, #4
   2a93c:	uxth	r1, r1
   2a940:	bl	29708 <flatcc_builder_start_buffer@@Base+0x178>
   2a944:	cmp	r0, #0
   2a948:	beq	2a958 <flatcc_builder_start_offset_vector@@Base+0x34>
   2a94c:	mvn	r0, #0
   2a950:	str	r0, [sp, #4]
   2a954:	b	2a99c <flatcc_builder_start_offset_vector@@Base+0x78>
   2a958:	ldr	r0, [sp]
   2a95c:	ldr	r0, [r0, #32]
   2a960:	movw	r1, #4
   2a964:	str	r1, [r0, #16]
   2a968:	ldr	r0, [sp]
   2a96c:	ldr	r0, [r0, #32]
   2a970:	movw	r1, #0
   2a974:	str	r1, [r0, #20]
   2a978:	ldr	r0, [sp]
   2a97c:	ldr	r0, [r0, #32]
   2a980:	movw	r1, #5
   2a984:	strh	r1, [r0, #14]
   2a988:	ldr	r0, [sp]
   2a98c:	mvn	r1, #3
   2a990:	bl	29b64 <flatcc_builder_start_struct@@Base+0x70>
   2a994:	movw	r0, #0
   2a998:	str	r0, [sp, #4]
   2a99c:	ldr	r0, [sp, #4]
   2a9a0:	mov	sp, fp
   2a9a4:	pop	{fp, pc}

0002a9a8 <flatcc_builder_create_offset_vector@@Base>:
   2a9a8:	push	{fp, lr}
   2a9ac:	mov	fp, sp
   2a9b0:	sub	sp, sp, #24
   2a9b4:	str	r0, [fp, #-8]
   2a9b8:	str	r1, [sp, #12]
   2a9bc:	str	r2, [sp, #8]
   2a9c0:	ldr	r0, [fp, #-8]
   2a9c4:	bl	2a924 <flatcc_builder_start_offset_vector@@Base>
   2a9c8:	cmp	r0, #0
   2a9cc:	beq	2a9dc <flatcc_builder_create_offset_vector@@Base+0x34>
   2a9d0:	movw	r0, #0
   2a9d4:	str	r0, [fp, #-4]
   2a9d8:	b	2aa24 <flatcc_builder_create_offset_vector@@Base+0x7c>
   2a9dc:	ldr	r0, [fp, #-8]
   2a9e0:	ldr	r1, [sp, #8]
   2a9e4:	bl	2a0b8 <flatcc_builder_extend_offset_vector@@Base>
   2a9e8:	str	r0, [sp, #4]
   2a9ec:	movw	r1, #0
   2a9f0:	cmp	r0, r1
   2a9f4:	bne	2aa04 <flatcc_builder_create_offset_vector@@Base+0x5c>
   2a9f8:	movw	r0, #0
   2a9fc:	str	r0, [fp, #-4]
   2aa00:	b	2aa24 <flatcc_builder_create_offset_vector@@Base+0x7c>
   2aa04:	ldr	r0, [sp, #4]
   2aa08:	ldr	r1, [sp, #12]
   2aa0c:	ldr	r2, [sp, #8]
   2aa10:	lsl	r2, r2, #2
   2aa14:	bl	12db4 <memcpy@plt>
   2aa18:	ldr	r0, [fp, #-8]
   2aa1c:	bl	2aa30 <flatcc_builder_end_offset_vector@@Base>
   2aa20:	str	r0, [fp, #-4]
   2aa24:	ldr	r0, [fp, #-4]
   2aa28:	mov	sp, fp
   2aa2c:	pop	{fp, pc}

0002aa30 <flatcc_builder_end_offset_vector@@Base>:
   2aa30:	push	{fp, lr}
   2aa34:	mov	fp, sp
   2aa38:	sub	sp, sp, #16
   2aa3c:	str	r0, [sp, #8]
   2aa40:	ldr	r0, [sp, #8]
   2aa44:	ldr	r0, [r0, #32]
   2aa48:	ldrh	r0, [r0, #14]
   2aa4c:	cmp	r0, #5
   2aa50:	bne	2aa58 <flatcc_builder_end_offset_vector@@Base+0x28>
   2aa54:	b	2aa78 <flatcc_builder_end_offset_vector@@Base+0x48>
   2aa58:	ldr	r0, [pc, #108]	; 2aacc <flatcc_builder_end_offset_vector@@Base+0x9c>
   2aa5c:	add	r0, pc, r0
   2aa60:	ldr	r1, [pc, #104]	; 2aad0 <flatcc_builder_end_offset_vector@@Base+0xa0>
   2aa64:	add	r1, pc, r1
   2aa68:	ldr	r2, [pc, #100]	; 2aad4 <flatcc_builder_end_offset_vector@@Base+0xa4>
   2aa6c:	add	r3, pc, r2
   2aa70:	movw	r2, #1480	; 0x5c8
   2aa74:	bl	12e68 <__assert_fail@plt>
   2aa78:	ldr	r0, [sp, #8]
   2aa7c:	ldr	r1, [sp, #8]
   2aa80:	ldr	r1, [r1, #16]
   2aa84:	ldr	r2, [sp, #8]
   2aa88:	ldr	r2, [r2, #32]
   2aa8c:	ldr	r2, [r2, #20]
   2aa90:	bl	2be2c <flatcc_builder_create_offset_vector_direct@@Base>
   2aa94:	str	r0, [sp, #4]
   2aa98:	movw	r1, #0
   2aa9c:	cmp	r1, r0
   2aaa0:	bne	2aab0 <flatcc_builder_end_offset_vector@@Base+0x80>
   2aaa4:	movw	r0, #0
   2aaa8:	str	r0, [fp, #-4]
   2aaac:	b	2aac0 <flatcc_builder_end_offset_vector@@Base+0x90>
   2aab0:	ldr	r0, [sp, #8]
   2aab4:	bl	29a38 <flatcc_builder_end_buffer@@Base+0x164>
   2aab8:	ldr	r0, [sp, #4]
   2aabc:	str	r0, [fp, #-4]
   2aac0:	ldr	r0, [fp, #-4]
   2aac4:	mov	sp, fp
   2aac8:	pop	{fp, pc}
   2aacc:	andeq	fp, r0, r9, lsl #27
   2aad0:	andeq	fp, r0, lr, asr #18
   2aad4:	andeq	ip, r0, r8, lsr #7

0002aad8 <flatcc_builder_start_string@@Base>:
   2aad8:	push	{fp, lr}
   2aadc:	mov	fp, sp
   2aae0:	sub	sp, sp, #8
   2aae4:	str	r0, [sp]
   2aae8:	ldr	r0, [sp]
   2aaec:	movw	r1, #1
   2aaf0:	uxth	r1, r1
   2aaf4:	bl	29708 <flatcc_builder_start_buffer@@Base+0x178>
   2aaf8:	cmp	r0, #0
   2aafc:	beq	2ab0c <flatcc_builder_start_string@@Base+0x34>
   2ab00:	mvn	r0, #0
   2ab04:	str	r0, [sp, #4]
   2ab08:	b	2ab50 <flatcc_builder_start_string@@Base+0x78>
   2ab0c:	ldr	r0, [sp]
   2ab10:	ldr	r0, [r0, #32]
   2ab14:	movw	r1, #1
   2ab18:	str	r1, [r0, #16]
   2ab1c:	ldr	r0, [sp]
   2ab20:	ldr	r0, [r0, #32]
   2ab24:	movw	r1, #0
   2ab28:	str	r1, [r0, #20]
   2ab2c:	ldr	r0, [sp]
   2ab30:	ldr	r0, [r0, #32]
   2ab34:	movw	r1, #6
   2ab38:	strh	r1, [r0, #14]
   2ab3c:	ldr	r0, [sp]
   2ab40:	mvn	r1, #3
   2ab44:	bl	29b64 <flatcc_builder_start_struct@@Base+0x70>
   2ab48:	movw	r0, #0
   2ab4c:	str	r0, [sp, #4]
   2ab50:	ldr	r0, [sp, #4]
   2ab54:	mov	sp, fp
   2ab58:	pop	{fp, pc}

0002ab5c <flatcc_builder_reserve_table@@Base>:
   2ab5c:	push	{fp, lr}
   2ab60:	mov	fp, sp
   2ab64:	sub	sp, sp, #8
   2ab68:	str	r0, [sp, #4]
   2ab6c:	str	r1, [sp]
   2ab70:	ldr	r0, [sp]
   2ab74:	cmp	r0, #0
   2ab78:	blt	2ab80 <flatcc_builder_reserve_table@@Base+0x24>
   2ab7c:	b	2aba0 <flatcc_builder_reserve_table@@Base+0x44>
   2ab80:	ldr	r0, [pc, #44]	; 2abb4 <flatcc_builder_reserve_table@@Base+0x58>
   2ab84:	add	r0, pc, r0
   2ab88:	ldr	r1, [pc, #40]	; 2abb8 <flatcc_builder_reserve_table@@Base+0x5c>
   2ab8c:	add	r1, pc, r1
   2ab90:	ldr	r2, [pc, #36]	; 2abbc <flatcc_builder_reserve_table@@Base+0x60>
   2ab94:	add	r3, pc, r2
   2ab98:	movw	r2, #1065	; 0x429
   2ab9c:	bl	12e68 <__assert_fail@plt>
   2aba0:	ldr	r0, [sp, #4]
   2aba4:	ldr	r1, [sp]
   2aba8:	bl	2abc0 <flatcc_builder_reserve_table@@Base+0x64>
   2abac:	mov	sp, fp
   2abb0:	pop	{fp, pc}
   2abb4:	andeq	fp, r0, r8, lsr #31
   2abb8:	andeq	fp, r0, r6, lsr #16
   2abbc:	andeq	fp, r0, r7, asr pc
   2abc0:	push	{fp, lr}
   2abc4:	mov	fp, sp
   2abc8:	sub	sp, sp, #24
   2abcc:	str	r0, [fp, #-8]
   2abd0:	str	r1, [sp, #12]
   2abd4:	ldr	r0, [fp, #-8]
   2abd8:	ldr	r0, [r0, #32]
   2abdc:	ldr	r1, [r0, #16]
   2abe0:	ldrh	r0, [r0, #28]
   2abe4:	add	r0, r1, r0, lsl #1
   2abe8:	str	r0, [sp, #8]
   2abec:	ldr	r0, [sp, #12]
   2abf0:	add	r0, r0, #2
   2abf4:	lsl	r0, r0, #1
   2abf8:	str	r0, [sp, #4]
   2abfc:	ldr	r0, [fp, #-8]
   2ac00:	ldr	r2, [sp, #8]
   2ac04:	ldr	r3, [sp, #4]
   2ac08:	movw	r1, #0
   2ac0c:	movw	ip, #1
   2ac10:	str	ip, [sp]
   2ac14:	bl	2889c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   2ac18:	ldr	r1, [fp, #-8]
   2ac1c:	str	r0, [r1, #4]
   2ac20:	movw	r1, #0
   2ac24:	cmp	r0, r1
   2ac28:	bne	2ac38 <flatcc_builder_reserve_table@@Base+0xdc>
   2ac2c:	mvn	r0, #0
   2ac30:	str	r0, [fp, #-4]
   2ac34:	b	2acac <flatcc_builder_reserve_table@@Base+0x150>
   2ac38:	ldr	r0, [fp, #-8]
   2ac3c:	ldr	r1, [r0, #4]
   2ac40:	add	r1, r1, #4
   2ac44:	str	r1, [r0, #4]
   2ac48:	ldr	r0, [fp, #-8]
   2ac4c:	ldr	r0, [r0, #32]
   2ac50:	ldr	r0, [r0, #20]
   2ac54:	str	r0, [sp, #8]
   2ac58:	ldr	r0, [sp, #12]
   2ac5c:	lsl	r0, r0, #1
   2ac60:	add	r0, r0, #1
   2ac64:	str	r0, [sp, #4]
   2ac68:	ldr	r0, [fp, #-8]
   2ac6c:	ldr	r2, [sp, #8]
   2ac70:	ldr	r3, [sp, #4]
   2ac74:	movw	r1, #3
   2ac78:	movw	ip, #0
   2ac7c:	str	ip, [sp]
   2ac80:	bl	2889c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   2ac84:	ldr	r1, [fp, #-8]
   2ac88:	str	r0, [r1]
   2ac8c:	movw	r1, #0
   2ac90:	cmp	r0, r1
   2ac94:	bne	2aca4 <flatcc_builder_reserve_table@@Base+0x148>
   2ac98:	mvn	r0, #0
   2ac9c:	str	r0, [fp, #-4]
   2aca0:	b	2acac <flatcc_builder_reserve_table@@Base+0x150>
   2aca4:	movw	r0, #0
   2aca8:	str	r0, [fp, #-4]
   2acac:	ldr	r0, [fp, #-4]
   2acb0:	mov	sp, fp
   2acb4:	pop	{fp, pc}

0002acb8 <flatcc_builder_start_table@@Base>:
   2acb8:	push	{fp, lr}
   2acbc:	mov	fp, sp
   2acc0:	sub	sp, sp, #16
   2acc4:	str	r0, [sp, #8]
   2acc8:	str	r1, [sp, #4]
   2accc:	ldr	r0, [sp, #8]
   2acd0:	movw	r1, #4
   2acd4:	uxth	r1, r1
   2acd8:	bl	29708 <flatcc_builder_start_buffer@@Base+0x178>
   2acdc:	cmp	r0, #0
   2ace0:	beq	2acf0 <flatcc_builder_start_table@@Base+0x38>
   2ace4:	mvn	r0, #0
   2ace8:	str	r0, [fp, #-4]
   2acec:	b	2adc0 <flatcc_builder_start_table@@Base+0x108>
   2acf0:	ldr	r0, [pc, #212]	; 2adcc <flatcc_builder_start_table@@Base+0x114>
   2acf4:	ldr	r1, [sp, #8]
   2acf8:	ldr	r1, [r1, #4]
   2acfc:	ldr	r2, [sp, #8]
   2ad00:	ldr	r2, [r2, #52]	; 0x34
   2ad04:	sub	r1, r1, r2
   2ad08:	ldr	r2, [sp, #8]
   2ad0c:	ldr	r2, [r2, #32]
   2ad10:	str	r1, [r2, #16]
   2ad14:	ldr	r1, [sp, #8]
   2ad18:	ldr	r1, [r1]
   2ad1c:	ldr	r2, [sp, #8]
   2ad20:	ldr	r2, [r2, #76]	; 0x4c
   2ad24:	sub	r1, r1, r2
   2ad28:	ldr	r2, [sp, #8]
   2ad2c:	ldr	r2, [r2, #32]
   2ad30:	str	r1, [r2, #20]
   2ad34:	ldr	r1, [sp, #8]
   2ad38:	ldr	r1, [r1, #12]
   2ad3c:	ldr	r2, [sp, #8]
   2ad40:	ldr	r2, [r2, #32]
   2ad44:	str	r1, [r2, #24]
   2ad48:	ldr	r1, [sp, #8]
   2ad4c:	ldrh	r1, [r1, #8]
   2ad50:	ldr	r2, [sp, #8]
   2ad54:	ldr	r2, [r2, #32]
   2ad58:	strh	r1, [r2, #28]
   2ad5c:	ldr	r1, [sp, #8]
   2ad60:	movw	r2, #0
   2ad64:	str	r2, [r1, #12]
   2ad68:	ldr	r1, [sp, #8]
   2ad6c:	str	r0, [r1, #12]
   2ad70:	ldr	r0, [sp, #8]
   2ad74:	movw	r1, #0
   2ad78:	strh	r1, [r0, #8]
   2ad7c:	ldr	r0, [sp, #8]
   2ad80:	ldr	r0, [r0, #32]
   2ad84:	movw	r1, #3
   2ad88:	strh	r1, [r0, #14]
   2ad8c:	ldr	r0, [sp, #8]
   2ad90:	ldr	r1, [sp, #4]
   2ad94:	bl	2abc0 <flatcc_builder_reserve_table@@Base+0x64>
   2ad98:	cmp	r0, #0
   2ad9c:	beq	2adac <flatcc_builder_start_table@@Base+0xf4>
   2ada0:	mvn	r0, #0
   2ada4:	str	r0, [fp, #-4]
   2ada8:	b	2adc0 <flatcc_builder_start_table@@Base+0x108>
   2adac:	ldr	r0, [sp, #8]
   2adb0:	movw	r1, #65532	; 0xfffc
   2adb4:	bl	29b64 <flatcc_builder_start_struct@@Base+0x70>
   2adb8:	movw	r0, #0
   2adbc:	str	r0, [fp, #-4]
   2adc0:	ldr	r0, [fp, #-4]
   2adc4:	mov	sp, fp
   2adc8:	pop	{fp, pc}
   2adcc:	svccs	0x00693b52

0002add0 <flatcc_builder_create_vtable@@Base>:
   2add0:	push	{fp, lr}
   2add4:	mov	fp, sp
   2add8:	sub	sp, sp, #104	; 0x68
   2addc:	str	r0, [fp, #-8]
   2ade0:	str	r1, [fp, #-12]
   2ade4:	strh	r2, [fp, #-14]
   2ade8:	movw	r0, #0
   2adec:	str	r0, [sp, #12]
   2adf0:	str	r0, [sp, #16]
   2adf4:	ldrh	r0, [fp, #-14]
   2adf8:	cmp	r0, #0
   2adfc:	ble	2ae40 <flatcc_builder_create_vtable@@Base+0x70>
   2ae00:	ldrh	r0, [fp, #-14]
   2ae04:	ldr	r1, [sp, #12]
   2ae08:	add	r0, r1, r0
   2ae0c:	str	r0, [sp, #12]
   2ae10:	ldr	r0, [fp, #-12]
   2ae14:	add	r1, sp, #12
   2ae18:	add	r1, r1, #8
   2ae1c:	ldr	r2, [sp, #16]
   2ae20:	str	r0, [r1, r2, lsl #3]
   2ae24:	ldrh	r0, [fp, #-14]
   2ae28:	ldr	r2, [sp, #16]
   2ae2c:	add	r1, r1, r2, lsl #3
   2ae30:	str	r0, [r1, #4]
   2ae34:	ldr	r0, [sp, #16]
   2ae38:	add	r0, r0, #1
   2ae3c:	str	r0, [sp, #16]
   2ae40:	ldr	r0, [fp, #-8]
   2ae44:	ldr	r0, [r0, #152]	; 0x98
   2ae48:	cmp	r0, #0
   2ae4c:	bne	2ae8c <flatcc_builder_create_vtable@@Base+0xbc>
   2ae50:	ldr	r0, [fp, #-8]
   2ae54:	ldr	r0, [r0, #180]	; 0xb4
   2ae58:	cmp	r0, #0
   2ae5c:	bne	2ae8c <flatcc_builder_create_vtable@@Base+0xbc>
   2ae60:	ldr	r0, [fp, #-8]
   2ae64:	add	r1, sp, #12
   2ae68:	bl	2aed4 <flatcc_builder_create_vtable@@Base+0x104>
   2ae6c:	str	r0, [fp, #-20]	; 0xffffffec
   2ae70:	movw	r1, #0
   2ae74:	cmp	r1, r0
   2ae78:	bne	2ae88 <flatcc_builder_create_vtable@@Base+0xb8>
   2ae7c:	movw	r0, #0
   2ae80:	str	r0, [fp, #-4]
   2ae84:	b	2aec8 <flatcc_builder_create_vtable@@Base+0xf8>
   2ae88:	b	2aec0 <flatcc_builder_create_vtable@@Base+0xf0>
   2ae8c:	ldr	r0, [fp, #-8]
   2ae90:	add	r1, sp, #12
   2ae94:	bl	28f44 <flatcc_builder_embed_buffer@@Base+0x39c>
   2ae98:	str	r0, [fp, #-20]	; 0xffffffec
   2ae9c:	movw	r1, #0
   2aea0:	cmp	r1, r0
   2aea4:	bne	2aeb4 <flatcc_builder_create_vtable@@Base+0xe4>
   2aea8:	movw	r0, #0
   2aeac:	str	r0, [fp, #-4]
   2aeb0:	b	2aec8 <flatcc_builder_create_vtable@@Base+0xf8>
   2aeb4:	ldr	r0, [fp, #-20]	; 0xffffffec
   2aeb8:	add	r0, r0, #1
   2aebc:	str	r0, [fp, #-20]	; 0xffffffec
   2aec0:	ldr	r0, [fp, #-20]	; 0xffffffec
   2aec4:	str	r0, [fp, #-4]
   2aec8:	ldr	r0, [fp, #-4]
   2aecc:	mov	sp, fp
   2aed0:	pop	{fp, pc}
   2aed4:	push	{fp, lr}
   2aed8:	mov	fp, sp
   2aedc:	sub	sp, sp, #24
   2aee0:	str	r0, [fp, #-4]
   2aee4:	str	r1, [fp, #-8]
   2aee8:	ldr	r0, [fp, #-4]
   2aeec:	ldr	r0, [r0, #140]	; 0x8c
   2aef0:	str	r0, [sp, #12]
   2aef4:	ldr	r0, [sp, #12]
   2aef8:	ldr	r1, [fp, #-8]
   2aefc:	ldr	r1, [r1]
   2af00:	add	r0, r0, r1
   2af04:	ldr	r1, [fp, #-4]
   2af08:	str	r0, [r1, #140]	; 0x8c
   2af0c:	ldr	r0, [fp, #-4]
   2af10:	ldr	r0, [r0, #140]	; 0x8c
   2af14:	ldr	r1, [sp, #12]
   2af18:	cmp	r0, r1
   2af1c:	bge	2af40 <flatcc_builder_create_vtable@@Base+0x170>
   2af20:	ldr	r0, [pc, #168]	; 2afd0 <flatcc_builder_create_vtable@@Base+0x200>
   2af24:	add	r0, pc, r0
   2af28:	ldr	r1, [pc, #164]	; 2afd4 <flatcc_builder_create_vtable@@Base+0x204>
   2af2c:	add	r1, pc, r1
   2af30:	ldr	r2, [pc, #160]	; 2afd8 <flatcc_builder_create_vtable@@Base+0x208>
   2af34:	add	r3, pc, r2
   2af38:	movw	r2, #673	; 0x2a1
   2af3c:	bl	12e68 <__assert_fail@plt>
   2af40:	ldr	r0, [fp, #-4]
   2af44:	ldr	r0, [r0, #44]	; 0x2c
   2af48:	ldr	r1, [fp, #-4]
   2af4c:	ldr	r1, [r1, #36]	; 0x24
   2af50:	ldr	r2, [fp, #-8]
   2af54:	add	r2, r2, #8
   2af58:	ldr	r3, [fp, #-8]
   2af5c:	ldr	r3, [r3, #4]
   2af60:	ldr	ip, [sp, #12]
   2af64:	ldr	lr, [fp, #-8]
   2af68:	ldr	lr, [lr]
   2af6c:	str	r0, [sp, #8]
   2af70:	mov	r0, r1
   2af74:	mov	r1, r2
   2af78:	mov	r2, r3
   2af7c:	mov	r3, ip
   2af80:	str	lr, [sp]
   2af84:	ldr	ip, [sp, #8]
   2af88:	blx	ip
   2af8c:	cmp	r0, #0
   2af90:	beq	2afb4 <flatcc_builder_create_vtable@@Base+0x1e4>
   2af94:	ldr	r0, [pc, #40]	; 2afc4 <flatcc_builder_create_vtable@@Base+0x1f4>
   2af98:	add	r0, pc, r0
   2af9c:	ldr	r1, [pc, #36]	; 2afc8 <flatcc_builder_create_vtable@@Base+0x1f8>
   2afa0:	add	r1, pc, r1
   2afa4:	ldr	r2, [pc, #32]	; 2afcc <flatcc_builder_create_vtable@@Base+0x1fc>
   2afa8:	add	r3, pc, r2
   2afac:	movw	r2, #677	; 0x2a5
   2afb0:	bl	12e68 <__assert_fail@plt>
   2afb4:	ldr	r0, [sp, #12]
   2afb8:	add	r0, r0, #1
   2afbc:	mov	sp, fp
   2afc0:	pop	{fp, pc}
   2afc4:	ldrdeq	ip, [r0], -r7
   2afc8:	andeq	fp, r0, r2, lsl r4
   2afcc:	andeq	ip, r0, r2, asr #10
   2afd0:	andeq	ip, r0, fp, asr #12
   2afd4:	andeq	fp, r0, r6, lsl #9
   2afd8:			; <UNDEFINED> instruction: 0x0000c5b6

0002afdc <flatcc_builder_create_cached_vtable@@Base>:
   2afdc:	push	{fp, lr}
   2afe0:	mov	fp, sp
   2afe4:	sub	sp, sp, #48	; 0x30
   2afe8:	str	r0, [fp, #-8]
   2afec:	str	r1, [fp, #-12]
   2aff0:	strh	r2, [fp, #-14]
   2aff4:	str	r3, [fp, #-20]	; 0xffffffec
   2aff8:	ldr	r0, [fp, #-8]
   2affc:	ldr	r1, [fp, #-20]	; 0xffffffec
   2b000:	bl	2b2e8 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   2b004:	str	r0, [sp, #12]
   2b008:	movw	r1, #0
   2b00c:	cmp	r0, r1
   2b010:	bne	2b020 <flatcc_builder_create_cached_vtable@@Base+0x44>
   2b014:	movw	r0, #0
   2b018:	str	r0, [fp, #-4]
   2b01c:	b	2b2dc <flatcc_builder_create_cached_vtable@@Base+0x300>
   2b020:	ldr	r0, [sp, #12]
   2b024:	str	r0, [sp, #16]
   2b028:	ldr	r0, [sp, #16]
   2b02c:	ldr	r0, [r0]
   2b030:	str	r0, [sp, #8]
   2b034:	movw	r0, #0
   2b038:	str	r0, [sp, #20]
   2b03c:	ldr	r0, [sp, #8]
   2b040:	cmp	r0, #0
   2b044:	beq	2b148 <flatcc_builder_create_cached_vtable@@Base+0x16c>
   2b048:	ldr	r0, [fp, #-8]
   2b04c:	ldr	r0, [r0, #100]	; 0x64
   2b050:	ldr	r1, [sp, #8]
   2b054:	add	r0, r0, r1
   2b058:	str	r0, [sp, #24]
   2b05c:	ldr	r0, [fp, #-8]
   2b060:	ldr	r0, [r0, #68]	; 0x44
   2b064:	ldr	r1, [sp, #24]
   2b068:	ldr	r1, [r1, #8]
   2b06c:	add	r0, r0, r1
   2b070:	str	r0, [sp, #4]
   2b074:	ldr	r0, [sp, #4]
   2b078:	ldrh	r0, [r0]
   2b07c:	ldrh	r1, [fp, #-14]
   2b080:	cmp	r0, r1
   2b084:	bne	2b0a4 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   2b088:	ldr	r0, [fp, #-12]
   2b08c:	ldr	r1, [sp, #4]
   2b090:	ldrh	r2, [fp, #-14]
   2b094:	bl	12dc0 <memcmp@plt>
   2b098:	movw	r1, #0
   2b09c:	cmp	r1, r0
   2b0a0:	beq	2b0c0 <flatcc_builder_create_cached_vtable@@Base+0xe4>
   2b0a4:	ldr	r0, [sp, #24]
   2b0a8:	add	r0, r0, #12
   2b0ac:	str	r0, [sp, #16]
   2b0b0:	ldr	r0, [sp, #24]
   2b0b4:	ldr	r0, [r0, #12]
   2b0b8:	str	r0, [sp, #8]
   2b0bc:	b	2b03c <flatcc_builder_create_cached_vtable@@Base+0x60>
   2b0c0:	ldr	r0, [sp, #24]
   2b0c4:	ldr	r0, [r0, #4]
   2b0c8:	ldr	r1, [fp, #-8]
   2b0cc:	ldr	r1, [r1, #152]	; 0x98
   2b0d0:	cmp	r0, r1
   2b0d4:	beq	2b0fc <flatcc_builder_create_cached_vtable@@Base+0x120>
   2b0d8:	ldr	r0, [sp, #24]
   2b0dc:	str	r0, [sp, #20]
   2b0e0:	ldr	r0, [sp, #24]
   2b0e4:	add	r0, r0, #12
   2b0e8:	str	r0, [sp, #16]
   2b0ec:	ldr	r0, [sp, #24]
   2b0f0:	ldr	r0, [r0, #12]
   2b0f4:	str	r0, [sp, #8]
   2b0f8:	b	2b03c <flatcc_builder_create_cached_vtable@@Base+0x60>
   2b0fc:	ldr	r0, [sp, #16]
   2b100:	ldr	r1, [sp, #12]
   2b104:	cmp	r0, r1
   2b108:	beq	2b138 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   2b10c:	ldr	r0, [sp, #24]
   2b110:	ldr	r0, [r0, #12]
   2b114:	ldr	r1, [sp, #16]
   2b118:	str	r0, [r1]
   2b11c:	ldr	r0, [sp, #12]
   2b120:	ldr	r0, [r0]
   2b124:	ldr	r1, [sp, #24]
   2b128:	str	r0, [r1, #12]
   2b12c:	ldr	r0, [sp, #8]
   2b130:	ldr	r1, [sp, #12]
   2b134:	str	r0, [r1]
   2b138:	ldr	r0, [sp, #24]
   2b13c:	ldr	r0, [r0]
   2b140:	str	r0, [fp, #-4]
   2b144:	b	2b2dc <flatcc_builder_create_cached_vtable@@Base+0x300>
   2b148:	ldr	r0, [fp, #-8]
   2b14c:	ldr	r1, [fp, #-8]
   2b150:	ldr	r2, [r1, #124]	; 0x7c
   2b154:	movw	r1, #6
   2b158:	movw	r3, #16
   2b15c:	movw	ip, #0
   2b160:	str	ip, [sp]
   2b164:	bl	2889c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   2b168:	str	r0, [sp, #24]
   2b16c:	movw	r1, #0
   2b170:	cmp	r0, r1
   2b174:	bne	2b184 <flatcc_builder_create_cached_vtable@@Base+0x1a8>
   2b178:	movw	r0, #0
   2b17c:	str	r0, [fp, #-4]
   2b180:	b	2b2dc <flatcc_builder_create_cached_vtable@@Base+0x300>
   2b184:	ldr	r0, [fp, #-8]
   2b188:	ldr	r0, [r0, #124]	; 0x7c
   2b18c:	str	r0, [sp, #8]
   2b190:	ldr	r0, [fp, #-8]
   2b194:	ldr	r1, [r0, #124]	; 0x7c
   2b198:	add	r1, r1, #16
   2b19c:	str	r1, [r0, #124]	; 0x7c
   2b1a0:	ldr	r0, [fp, #-8]
   2b1a4:	ldr	r0, [r0, #152]	; 0x98
   2b1a8:	ldr	r1, [sp, #24]
   2b1ac:	str	r0, [r1, #4]
   2b1b0:	ldr	r0, [sp, #12]
   2b1b4:	ldr	r0, [r0]
   2b1b8:	ldr	r1, [sp, #24]
   2b1bc:	str	r0, [r1, #12]
   2b1c0:	ldr	r0, [sp, #8]
   2b1c4:	ldr	r1, [sp, #12]
   2b1c8:	str	r0, [r1]
   2b1cc:	ldr	r0, [fp, #-8]
   2b1d0:	ldr	r1, [fp, #-12]
   2b1d4:	ldrh	r2, [fp, #-14]
   2b1d8:	bl	2add0 <flatcc_builder_create_vtable@@Base>
   2b1dc:	ldr	r1, [sp, #24]
   2b1e0:	str	r0, [r1]
   2b1e4:	movw	r1, #0
   2b1e8:	cmp	r1, r0
   2b1ec:	bne	2b1fc <flatcc_builder_create_cached_vtable@@Base+0x220>
   2b1f0:	movw	r0, #0
   2b1f4:	str	r0, [fp, #-4]
   2b1f8:	b	2b2dc <flatcc_builder_create_cached_vtable@@Base+0x300>
   2b1fc:	ldr	r0, [sp, #20]
   2b200:	movw	r1, #0
   2b204:	cmp	r0, r1
   2b208:	beq	2b220 <flatcc_builder_create_cached_vtable@@Base+0x244>
   2b20c:	ldr	r0, [sp, #20]
   2b210:	ldr	r0, [r0, #8]
   2b214:	ldr	r1, [sp, #24]
   2b218:	str	r0, [r1, #8]
   2b21c:	b	2b2d0 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   2b220:	ldr	r0, [fp, #-8]
   2b224:	ldr	r0, [r0, #172]	; 0xac
   2b228:	cmp	r0, #0
   2b22c:	beq	2b25c <flatcc_builder_create_cached_vtable@@Base+0x280>
   2b230:	ldr	r0, [fp, #-8]
   2b234:	ldr	r0, [r0, #172]	; 0xac
   2b238:	ldr	r1, [fp, #-8]
   2b23c:	ldr	r1, [r1, #120]	; 0x78
   2b240:	ldrh	r2, [fp, #-14]
   2b244:	add	r1, r1, r2
   2b248:	cmp	r0, r1
   2b24c:	bcs	2b25c <flatcc_builder_create_cached_vtable@@Base+0x280>
   2b250:	ldr	r0, [fp, #-8]
   2b254:	bl	28318 <flatcc_builder_flush_vtable_cache@@Base>
   2b258:	b	2b2cc <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   2b25c:	ldr	r0, [fp, #-8]
   2b260:	ldr	r1, [fp, #-8]
   2b264:	ldr	r2, [r1, #120]	; 0x78
   2b268:	ldrh	r3, [fp, #-14]
   2b26c:	movw	r1, #2
   2b270:	movw	ip, #0
   2b274:	str	ip, [sp]
   2b278:	bl	2889c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   2b27c:	str	r0, [sp, #4]
   2b280:	movw	r1, #0
   2b284:	cmp	r0, r1
   2b288:	bne	2b298 <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   2b28c:	mvn	r0, #0
   2b290:	str	r0, [fp, #-4]
   2b294:	b	2b2dc <flatcc_builder_create_cached_vtable@@Base+0x300>
   2b298:	ldr	r0, [fp, #-8]
   2b29c:	ldr	r0, [r0, #120]	; 0x78
   2b2a0:	ldr	r1, [sp, #24]
   2b2a4:	str	r0, [r1, #8]
   2b2a8:	ldrh	r0, [fp, #-14]
   2b2ac:	ldr	r1, [fp, #-8]
   2b2b0:	ldr	r2, [r1, #120]	; 0x78
   2b2b4:	add	r0, r2, r0
   2b2b8:	str	r0, [r1, #120]	; 0x78
   2b2bc:	ldr	r0, [sp, #4]
   2b2c0:	ldr	r1, [fp, #-12]
   2b2c4:	ldrh	r2, [fp, #-14]
   2b2c8:	bl	12db4 <memcpy@plt>
   2b2cc:	b	2b2d0 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   2b2d0:	ldr	r0, [sp, #24]
   2b2d4:	ldr	r0, [r0]
   2b2d8:	str	r0, [fp, #-4]
   2b2dc:	ldr	r0, [fp, #-4]
   2b2e0:	mov	sp, fp
   2b2e4:	pop	{fp, pc}
   2b2e8:	push	{fp, lr}
   2b2ec:	mov	fp, sp
   2b2f0:	sub	sp, sp, #16
   2b2f4:	str	r0, [sp, #8]
   2b2f8:	str	r1, [sp, #4]
   2b2fc:	ldr	r0, [sp, #8]
   2b300:	ldr	r0, [r0, #116]	; 0x74
   2b304:	cmp	r0, #0
   2b308:	bne	2b32c <flatcc_builder_create_cached_vtable@@Base+0x350>
   2b30c:	ldr	r0, [sp, #8]
   2b310:	bl	2ddf4 <flatcc_builder_get_emit_context@@Base+0xe8>
   2b314:	cmp	r0, #0
   2b318:	beq	2b328 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   2b31c:	movw	r0, #0
   2b320:	str	r0, [fp, #-4]
   2b324:	b	2b35c <flatcc_builder_create_cached_vtable@@Base+0x380>
   2b328:	b	2b32c <flatcc_builder_create_cached_vtable@@Base+0x350>
   2b32c:	ldr	r0, [sp, #8]
   2b330:	ldr	r0, [r0, #92]	; 0x5c
   2b334:	str	r0, [sp]
   2b338:	ldr	r0, [sp]
   2b33c:	ldr	r1, [sp, #4]
   2b340:	ldr	r2, [sp, #8]
   2b344:	ldr	r2, [r2, #116]	; 0x74
   2b348:	rsb	r2, r2, #32
   2b34c:	lsr	r1, r1, r2
   2b350:	mov	r2, r1
   2b354:	add	r0, r0, r1, lsl #2
   2b358:	str	r0, [fp, #-4]
   2b35c:	ldr	r0, [fp, #-4]
   2b360:	mov	sp, fp
   2b364:	pop	{fp, pc}

0002b368 <flatcc_builder_create_table@@Base>:
   2b368:	push	{r4, sl, fp, lr}
   2b36c:	add	fp, sp, #8
   2b370:	sub	sp, sp, #128	; 0x80
   2b374:	ldr	ip, [fp, #16]
   2b378:	ldr	lr, [fp, #12]
   2b37c:	ldr	r4, [fp, #8]
   2b380:	str	r0, [fp, #-16]
   2b384:	str	r1, [fp, #-20]	; 0xffffffec
   2b388:	str	r2, [fp, #-24]	; 0xffffffe8
   2b38c:	strh	r3, [fp, #-26]	; 0xffffffe6
   2b390:	ldr	r0, [fp, #12]
   2b394:	cmp	r0, #0
   2b398:	blt	2b3a0 <flatcc_builder_create_table@@Base+0x38>
   2b39c:	b	2b3c0 <flatcc_builder_create_table@@Base+0x58>
   2b3a0:	ldr	r0, [pc, #616]	; 2b610 <flatcc_builder_create_table@@Base+0x2a8>
   2b3a4:	add	r0, pc, r0
   2b3a8:	ldr	r1, [pc, #612]	; 2b614 <flatcc_builder_create_table@@Base+0x2ac>
   2b3ac:	add	r1, pc, r1
   2b3b0:	ldr	r2, [pc, #608]	; 2b618 <flatcc_builder_create_table@@Base+0x2b0>
   2b3b4:	add	r3, pc, r2
   2b3b8:	movw	r2, #1237	; 0x4d5
   2b3bc:	bl	12e68 <__assert_fail@plt>
   2b3c0:	ldr	r0, [fp, #16]
   2b3c4:	and	r0, r0, #1
   2b3c8:	cmp	r0, #0
   2b3cc:	beq	2b3d4 <flatcc_builder_create_table@@Base+0x6c>
   2b3d0:	b	2b3f4 <flatcc_builder_create_table@@Base+0x8c>
   2b3d4:	ldr	r0, [pc, #576]	; 2b61c <flatcc_builder_create_table@@Base+0x2b4>
   2b3d8:	add	r0, pc, r0
   2b3dc:	ldr	r1, [pc, #572]	; 2b620 <flatcc_builder_create_table@@Base+0x2b8>
   2b3e0:	add	r1, pc, r1
   2b3e4:	ldr	r2, [pc, #568]	; 2b624 <flatcc_builder_create_table@@Base+0x2bc>
   2b3e8:	add	r3, pc, r2
   2b3ec:	movw	r2, #1243	; 0x4db
   2b3f0:	bl	12e68 <__assert_fail@plt>
   2b3f4:	sub	r0, fp, #26
   2b3f8:	movw	r1, #4
   2b3fc:	uxth	r1, r1
   2b400:	bl	2a8f0 <flatcc_builder_start_vector@@Base+0xac>
   2b404:	ldr	r0, [fp, #-16]
   2b408:	ldrh	r1, [fp, #-26]	; 0xffffffe6
   2b40c:	bl	29410 <flatcc_builder_create_buffer@@Base+0x3a8>
   2b410:	ldr	r0, [fp, #-16]
   2b414:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2b418:	ldrh	r2, [fp, #-26]	; 0xffffffe6
   2b41c:	bl	28efc <flatcc_builder_embed_buffer@@Base+0x354>
   2b420:	str	r0, [fp, #-36]	; 0xffffffdc
   2b424:	ldr	r0, [fp, #-16]
   2b428:	ldr	r0, [r0, #136]	; 0x88
   2b42c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2b430:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2b434:	add	r1, r1, r2
   2b438:	add	r1, r1, #4
   2b43c:	sub	r0, r0, r1
   2b440:	str	r0, [fp, #-52]	; 0xffffffcc
   2b444:	ldr	r0, [fp, #16]
   2b448:	sub	r0, r0, #1
   2b44c:	str	r0, [fp, #-48]	; 0xffffffd0
   2b450:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2b454:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2b458:	sub	r0, r0, r1
   2b45c:	str	r0, [fp, #-40]	; 0xffffffd8
   2b460:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2b464:	ldr	r1, [fp, #-40]	; 0xffffffd8
   2b468:	sub	r0, r0, r1
   2b46c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2b470:	cmp	r0, r1
   2b474:	beq	2b484 <flatcc_builder_create_table@@Base+0x11c>
   2b478:	mvn	r0, #0
   2b47c:	str	r0, [fp, #-12]
   2b480:	b	2b604 <flatcc_builder_create_table@@Base+0x29c>
   2b484:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2b488:	bl	28f30 <flatcc_builder_embed_buffer@@Base+0x388>
   2b48c:	str	r0, [fp, #-44]	; 0xffffffd4
   2b490:	movw	r0, #0
   2b494:	str	r0, [fp, #-32]	; 0xffffffe0
   2b498:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2b49c:	ldr	r1, [fp, #12]
   2b4a0:	cmp	r0, r1
   2b4a4:	bge	2b510 <flatcc_builder_create_table@@Base+0x1a8>
   2b4a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   2b4ac:	ldr	r1, [fp, #8]
   2b4b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2b4b4:	add	r1, r1, r2, lsl #1
   2b4b8:	ldrh	r1, [r1]
   2b4bc:	add	r0, r0, r1
   2b4c0:	str	r0, [fp, #-60]	; 0xffffffc4
   2b4c4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2b4c8:	ldr	r0, [r0]
   2b4cc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2b4d0:	sub	r0, r0, r1
   2b4d4:	ldr	r1, [fp, #8]
   2b4d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2b4dc:	add	r1, r1, r2, lsl #1
   2b4e0:	ldrh	r1, [r1]
   2b4e4:	sub	r0, r0, r1
   2b4e8:	sub	r0, r0, #4
   2b4ec:	str	r0, [fp, #-56]	; 0xffffffc8
   2b4f0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   2b4f4:	bl	28f30 <flatcc_builder_embed_buffer@@Base+0x388>
   2b4f8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   2b4fc:	str	r0, [r1]
   2b500:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2b504:	add	r0, r0, #1
   2b508:	str	r0, [fp, #-32]	; 0xffffffe0
   2b50c:	b	2b498 <flatcc_builder_create_table@@Base+0x130>
   2b510:	mov	r0, #0
   2b514:	str	r0, [sp, #4]
   2b518:	str	r0, [sp, #8]
   2b51c:	ldr	r0, [sp, #4]
   2b520:	add	r0, r0, #4
   2b524:	str	r0, [sp, #4]
   2b528:	add	r0, sp, #4
   2b52c:	add	r0, r0, #8
   2b530:	ldr	r1, [sp, #8]
   2b534:	sub	r2, fp, #44	; 0x2c
   2b538:	str	r2, [r0, r1, lsl #3]
   2b53c:	ldr	r1, [sp, #8]
   2b540:	add	r0, r0, r1, lsl #3
   2b544:	movw	r1, #4
   2b548:	str	r1, [r0, #4]
   2b54c:	ldr	r0, [sp, #8]
   2b550:	add	r0, r0, #1
   2b554:	str	r0, [sp, #8]
   2b558:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2b55c:	cmp	r0, #0
   2b560:	bls	2b5a4 <flatcc_builder_create_table@@Base+0x23c>
   2b564:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2b568:	ldr	r1, [sp, #4]
   2b56c:	add	r0, r1, r0
   2b570:	str	r0, [sp, #4]
   2b574:	ldr	r0, [fp, #-20]	; 0xffffffec
   2b578:	add	r1, sp, #4
   2b57c:	add	r1, r1, #8
   2b580:	ldr	r2, [sp, #8]
   2b584:	str	r0, [r1, r2, lsl #3]
   2b588:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2b58c:	ldr	r2, [sp, #8]
   2b590:	add	r1, r1, r2, lsl #3
   2b594:	str	r0, [r1, #4]
   2b598:	ldr	r0, [sp, #8]
   2b59c:	add	r0, r0, #1
   2b5a0:	str	r0, [sp, #8]
   2b5a4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2b5a8:	cmp	r0, #0
   2b5ac:	bls	2b5f4 <flatcc_builder_create_table@@Base+0x28c>
   2b5b0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2b5b4:	ldr	r1, [sp, #4]
   2b5b8:	add	r0, r1, r0
   2b5bc:	str	r0, [sp, #4]
   2b5c0:	add	r0, sp, #4
   2b5c4:	add	r0, r0, #8
   2b5c8:	ldr	r1, [sp, #8]
   2b5cc:	ldr	r2, [pc, #84]	; 2b628 <flatcc_builder_create_table@@Base+0x2c0>
   2b5d0:	ldr	r2, [pc, r2]
   2b5d4:	str	r2, [r0, r1, lsl #3]
   2b5d8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2b5dc:	ldr	r2, [sp, #8]
   2b5e0:	add	r0, r0, r2, lsl #3
   2b5e4:	str	r1, [r0, #4]
   2b5e8:	ldr	r0, [sp, #8]
   2b5ec:	add	r0, r0, #1
   2b5f0:	str	r0, [sp, #8]
   2b5f4:	ldr	r0, [fp, #-16]
   2b5f8:	add	r1, sp, #4
   2b5fc:	bl	28f44 <flatcc_builder_embed_buffer@@Base+0x39c>
   2b600:	str	r0, [fp, #-12]
   2b604:	ldr	r0, [fp, #-12]
   2b608:	sub	sp, fp, #8
   2b60c:	pop	{r4, sl, fp, pc}
   2b610:	andeq	fp, r0, r1, lsl #15
   2b614:	andeq	fp, r0, r6
   2b618:	andeq	fp, r0, r3, lsl #15
   2b61c:	strdeq	fp, [r0], -fp	; <UNPREDICTABLE>
   2b620:	ldrdeq	sl, [r0], -r2
   2b624:	andeq	fp, r0, pc, asr #14
   2b628:	andeq	ip, r1, r0, lsl #21

0002b62c <flatcc_builder_check_required_field@@Base>:
   2b62c:	push	{fp, lr}
   2b630:	mov	fp, sp
   2b634:	sub	sp, sp, #16
   2b638:	str	r0, [fp, #-4]
   2b63c:	strh	r1, [fp, #-6]
   2b640:	ldr	r0, [fp, #-4]
   2b644:	ldr	r0, [r0, #32]
   2b648:	ldrh	r0, [r0, #14]
   2b64c:	cmp	r0, #3
   2b650:	bne	2b658 <flatcc_builder_check_required_field@@Base+0x2c>
   2b654:	b	2b678 <flatcc_builder_check_required_field@@Base+0x4c>
   2b658:	ldr	r0, [pc, #104]	; 2b6c8 <flatcc_builder_check_required_field@@Base+0x9c>
   2b65c:	add	r0, pc, r0
   2b660:	ldr	r1, [pc, #100]	; 2b6cc <flatcc_builder_check_required_field@@Base+0xa0>
   2b664:	add	r1, pc, r1
   2b668:	ldr	r2, [pc, #96]	; 2b6d0 <flatcc_builder_check_required_field@@Base+0xa4>
   2b66c:	add	r3, pc, r2
   2b670:	movw	r2, #1272	; 0x4f8
   2b674:	bl	12e68 <__assert_fail@plt>
   2b678:	ldrh	r0, [fp, #-6]
   2b67c:	ldr	r1, [fp, #-4]
   2b680:	ldrh	r1, [r1, #8]
   2b684:	cmp	r0, r1
   2b688:	movw	r0, #0
   2b68c:	str	r0, [sp, #4]
   2b690:	bge	2b6b8 <flatcc_builder_check_required_field@@Base+0x8c>
   2b694:	ldr	r0, [fp, #-4]
   2b698:	ldr	r0, [r0, #4]
   2b69c:	ldrh	r1, [fp, #-6]
   2b6a0:	add	r0, r0, r1, lsl #1
   2b6a4:	ldrh	r0, [r0]
   2b6a8:	cmp	r0, #0
   2b6ac:	movw	r0, #0
   2b6b0:	movne	r0, #1
   2b6b4:	str	r0, [sp, #4]
   2b6b8:	ldr	r0, [sp, #4]
   2b6bc:	and	r0, r0, #1
   2b6c0:	mov	sp, fp
   2b6c4:	pop	{fp, pc}
   2b6c8:	andeq	fp, r0, r2, lsl #11
   2b6cc:	andeq	sl, r0, lr, asr #26
   2b6d0:	muleq	r0, sp, r5

0002b6d4 <flatcc_builder_check_union_field@@Base>:
   2b6d4:	push	{fp, lr}
   2b6d8:	mov	fp, sp
   2b6dc:	sub	sp, sp, #16
   2b6e0:	str	r0, [sp, #8]
   2b6e4:	strh	r1, [sp, #6]
   2b6e8:	ldr	r0, [sp, #8]
   2b6ec:	ldr	r0, [r0, #32]
   2b6f0:	ldrh	r0, [r0, #14]
   2b6f4:	cmp	r0, #3
   2b6f8:	bne	2b700 <flatcc_builder_check_union_field@@Base+0x2c>
   2b6fc:	b	2b720 <flatcc_builder_check_union_field@@Base+0x4c>
   2b700:	ldr	r0, [pc, #284]	; 2b824 <flatcc_builder_check_union_field@@Base+0x150>
   2b704:	add	r0, pc, r0
   2b708:	ldr	r1, [pc, #280]	; 2b828 <flatcc_builder_check_union_field@@Base+0x154>
   2b70c:	add	r1, pc, r1
   2b710:	ldr	r2, [pc, #276]	; 2b82c <flatcc_builder_check_union_field@@Base+0x158>
   2b714:	add	r3, pc, r2
   2b718:	movw	r2, #1279	; 0x4ff
   2b71c:	bl	12e68 <__assert_fail@plt>
   2b720:	ldrh	r0, [sp, #6]
   2b724:	cmp	r0, #0
   2b728:	beq	2b740 <flatcc_builder_check_union_field@@Base+0x6c>
   2b72c:	ldrh	r0, [sp, #6]
   2b730:	ldr	r1, [sp, #8]
   2b734:	ldrh	r1, [r1, #8]
   2b738:	cmp	r0, r1
   2b73c:	blt	2b74c <flatcc_builder_check_union_field@@Base+0x78>
   2b740:	movw	r0, #0
   2b744:	str	r0, [fp, #-4]
   2b748:	b	2b818 <flatcc_builder_check_union_field@@Base+0x144>
   2b74c:	ldr	r0, [sp, #8]
   2b750:	ldr	r0, [r0, #4]
   2b754:	ldrh	r1, [sp, #6]
   2b758:	sub	r1, r1, #1
   2b75c:	add	r0, r0, r1, lsl #1
   2b760:	ldrh	r0, [r0]
   2b764:	cmp	r0, #0
   2b768:	bne	2b798 <flatcc_builder_check_union_field@@Base+0xc4>
   2b76c:	ldr	r0, [sp, #8]
   2b770:	ldr	r0, [r0, #4]
   2b774:	ldrh	r1, [sp, #6]
   2b778:	add	r0, r0, r1, lsl #1
   2b77c:	ldrh	r0, [r0]
   2b780:	cmp	r0, #0
   2b784:	movw	r0, #0
   2b788:	moveq	r0, #1
   2b78c:	and	r0, r0, #1
   2b790:	str	r0, [fp, #-4]
   2b794:	b	2b818 <flatcc_builder_check_union_field@@Base+0x144>
   2b798:	ldr	r0, [sp, #8]
   2b79c:	ldr	r1, [r0, #4]
   2b7a0:	ldr	r0, [r0, #16]
   2b7a4:	ldrh	r2, [sp, #6]
   2b7a8:	sub	r2, r2, #1
   2b7ac:	add	r1, r1, r2, lsl #1
   2b7b0:	ldrh	r1, [r1]
   2b7b4:	add	r0, r0, r1
   2b7b8:	ldrsb	r0, [r0]
   2b7bc:	cmp	r0, #0
   2b7c0:	beq	2b7f0 <flatcc_builder_check_union_field@@Base+0x11c>
   2b7c4:	ldr	r0, [sp, #8]
   2b7c8:	ldr	r0, [r0, #4]
   2b7cc:	ldrh	r1, [sp, #6]
   2b7d0:	add	r0, r0, r1, lsl #1
   2b7d4:	ldrh	r0, [r0]
   2b7d8:	cmp	r0, #0
   2b7dc:	movw	r0, #0
   2b7e0:	movne	r0, #1
   2b7e4:	and	r0, r0, #1
   2b7e8:	str	r0, [fp, #-4]
   2b7ec:	b	2b818 <flatcc_builder_check_union_field@@Base+0x144>
   2b7f0:	ldr	r0, [sp, #8]
   2b7f4:	ldr	r0, [r0, #4]
   2b7f8:	ldrh	r1, [sp, #6]
   2b7fc:	add	r0, r0, r1, lsl #1
   2b800:	ldrh	r0, [r0]
   2b804:	cmp	r0, #0
   2b808:	movw	r0, #0
   2b80c:	moveq	r0, #1
   2b810:	and	r0, r0, #1
   2b814:	str	r0, [fp, #-4]
   2b818:	ldr	r0, [fp, #-4]
   2b81c:	mov	sp, fp
   2b820:	pop	{fp, pc}
   2b824:	ldrdeq	fp, [r0], -sl
   2b828:	andeq	sl, r0, r6, lsr #25
   2b82c:	andeq	fp, r0, r8, asr #10

0002b830 <flatcc_builder_check_required@@Base>:
   2b830:	push	{fp, lr}
   2b834:	mov	fp, sp
   2b838:	sub	sp, sp, #24
   2b83c:	str	r0, [fp, #-8]
   2b840:	str	r1, [sp, #12]
   2b844:	str	r2, [sp, #8]
   2b848:	ldr	r0, [fp, #-8]
   2b84c:	ldr	r0, [r0, #32]
   2b850:	ldrh	r0, [r0, #14]
   2b854:	cmp	r0, #3
   2b858:	bne	2b860 <flatcc_builder_check_required@@Base+0x30>
   2b85c:	b	2b880 <flatcc_builder_check_required@@Base+0x50>
   2b860:	ldr	r0, [pc, #172]	; 2b914 <flatcc_builder_check_required@@Base+0xe4>
   2b864:	add	r0, pc, r0
   2b868:	ldr	r1, [pc, #168]	; 2b918 <flatcc_builder_check_required@@Base+0xe8>
   2b86c:	add	r1, pc, r1
   2b870:	ldr	r2, [pc, #164]	; 2b91c <flatcc_builder_check_required@@Base+0xec>
   2b874:	add	r3, pc, r2
   2b878:	movw	r2, #1297	; 0x511
   2b87c:	bl	12e68 <__assert_fail@plt>
   2b880:	ldr	r0, [fp, #-8]
   2b884:	ldrh	r0, [r0, #8]
   2b888:	ldr	r1, [sp, #8]
   2b88c:	cmp	r0, r1
   2b890:	bge	2b8a0 <flatcc_builder_check_required@@Base+0x70>
   2b894:	movw	r0, #0
   2b898:	str	r0, [fp, #-4]
   2b89c:	b	2b908 <flatcc_builder_check_required@@Base+0xd8>
   2b8a0:	movw	r0, #0
   2b8a4:	str	r0, [sp, #4]
   2b8a8:	ldr	r0, [sp, #4]
   2b8ac:	ldr	r1, [sp, #8]
   2b8b0:	cmp	r0, r1
   2b8b4:	bge	2b900 <flatcc_builder_check_required@@Base+0xd0>
   2b8b8:	ldr	r0, [fp, #-8]
   2b8bc:	ldr	r0, [r0, #4]
   2b8c0:	ldr	r1, [sp, #12]
   2b8c4:	ldr	r2, [sp, #4]
   2b8c8:	add	r1, r1, r2, lsl #1
   2b8cc:	ldrh	r1, [r1]
   2b8d0:	add	r0, r0, r1, lsl #1
   2b8d4:	ldrh	r0, [r0]
   2b8d8:	cmp	r0, #0
   2b8dc:	bne	2b8ec <flatcc_builder_check_required@@Base+0xbc>
   2b8e0:	movw	r0, #0
   2b8e4:	str	r0, [fp, #-4]
   2b8e8:	b	2b908 <flatcc_builder_check_required@@Base+0xd8>
   2b8ec:	b	2b8f0 <flatcc_builder_check_required@@Base+0xc0>
   2b8f0:	ldr	r0, [sp, #4]
   2b8f4:	add	r0, r0, #1
   2b8f8:	str	r0, [sp, #4]
   2b8fc:	b	2b8a8 <flatcc_builder_check_required@@Base+0x78>
   2b900:	movw	r0, #1
   2b904:	str	r0, [fp, #-4]
   2b908:	ldr	r0, [fp, #-4]
   2b90c:	mov	sp, fp
   2b910:	pop	{fp, pc}
   2b914:	andeq	fp, r0, sl, ror r3
   2b918:	andeq	sl, r0, r6, asr #22
   2b91c:	andeq	fp, r0, r8, lsr r4

0002b920 <flatcc_builder_end_table@@Base>:
   2b920:	push	{r4, r5, fp, lr}
   2b924:	add	fp, sp, #8
   2b928:	sub	sp, sp, #48	; 0x30
   2b92c:	str	r0, [fp, #-16]
   2b930:	ldr	r0, [fp, #-16]
   2b934:	ldr	r0, [r0, #32]
   2b938:	ldrh	r0, [r0, #14]
   2b93c:	cmp	r0, #3
   2b940:	bne	2b948 <flatcc_builder_end_table@@Base+0x28>
   2b944:	b	2b968 <flatcc_builder_end_table@@Base+0x48>
   2b948:	ldr	r0, [pc, #500]	; 2bb44 <flatcc_builder_end_table@@Base+0x224>
   2b94c:	add	r0, pc, r0
   2b950:	ldr	r1, [pc, #496]	; 2bb48 <flatcc_builder_end_table@@Base+0x228>
   2b954:	add	r1, pc, r1
   2b958:	ldr	r2, [pc, #492]	; 2bb4c <flatcc_builder_end_table@@Base+0x22c>
   2b95c:	add	r3, pc, r2
   2b960:	movw	r2, #1317	; 0x525
   2b964:	bl	12e68 <__assert_fail@plt>
   2b968:	ldr	r0, [pc, #480]	; 2bb50 <flatcc_builder_end_table@@Base+0x230>
   2b96c:	ldr	r1, [fp, #-16]
   2b970:	ldr	r1, [r1, #4]
   2b974:	sub	r1, r1, #4
   2b978:	str	r1, [fp, #-20]	; 0xffffffec
   2b97c:	ldr	r1, [fp, #-16]
   2b980:	ldrh	r1, [r1, #8]
   2b984:	add	r1, r1, #2
   2b988:	lsl	r1, r1, #1
   2b98c:	strh	r1, [fp, #-22]	; 0xffffffea
   2b990:	ldrh	r1, [fp, #-22]	; 0xffffffea
   2b994:	ldr	r2, [fp, #-20]	; 0xffffffec
   2b998:	strh	r1, [r2]
   2b99c:	ldr	r1, [fp, #-16]
   2b9a0:	ldr	r1, [r1, #20]
   2b9a4:	uxth	r1, r1
   2b9a8:	add	r1, r1, #4
   2b9ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   2b9b0:	strh	r1, [r2, #2]
   2b9b4:	ldr	r1, [fp, #-20]	; 0xffffffec
   2b9b8:	ldrh	r1, [r1]
   2b9bc:	ldr	r2, [fp, #-16]
   2b9c0:	ldr	r2, [r2, #12]
   2b9c4:	eor	r1, r1, r2
   2b9c8:	mul	r1, r1, r0
   2b9cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   2b9d0:	ldrh	r2, [r2, #2]
   2b9d4:	eor	r1, r1, r2
   2b9d8:	mul	r0, r1, r0
   2b9dc:	ldr	r1, [fp, #-16]
   2b9e0:	str	r0, [r1, #12]
   2b9e4:	ldr	r0, [fp, #-16]
   2b9e8:	ldr	r1, [fp, #-20]	; 0xffffffec
   2b9ec:	ldrh	r2, [fp, #-22]	; 0xffffffea
   2b9f0:	ldr	r3, [fp, #-16]
   2b9f4:	ldr	r3, [r3, #12]
   2b9f8:	uxth	r2, r2
   2b9fc:	bl	2afdc <flatcc_builder_create_cached_vtable@@Base>
   2ba00:	str	r0, [sp, #24]
   2ba04:	cmp	r0, #0
   2ba08:	bne	2ba18 <flatcc_builder_end_table@@Base+0xf8>
   2ba0c:	movw	r0, #0
   2ba10:	str	r0, [fp, #-12]
   2ba14:	b	2bb38 <flatcc_builder_end_table@@Base+0x218>
   2ba18:	ldr	r0, [fp, #-20]	; 0xffffffec
   2ba1c:	ldrh	r2, [fp, #-22]	; 0xffffffea
   2ba20:	mov	r1, #0
   2ba24:	bl	12e2c <memset@plt>
   2ba28:	ldr	r1, [fp, #-16]
   2ba2c:	ldr	r2, [r1, #32]
   2ba30:	ldr	r1, [r1, #76]	; 0x4c
   2ba34:	ldr	r2, [r2, #20]
   2ba38:	add	r1, r1, r2
   2ba3c:	str	r1, [sp, #16]
   2ba40:	ldr	r1, [fp, #-16]
   2ba44:	ldr	r1, [r1]
   2ba48:	ldr	r2, [sp, #16]
   2ba4c:	sub	r1, r1, r2
   2ba50:	asr	r1, r1, #1
   2ba54:	str	r1, [sp, #20]
   2ba58:	ldr	r1, [fp, #-16]
   2ba5c:	ldr	r2, [fp, #-16]
   2ba60:	ldr	r2, [r2, #16]
   2ba64:	ldr	r3, [fp, #-16]
   2ba68:	ldr	r3, [r3, #20]
   2ba6c:	ldr	ip, [fp, #-16]
   2ba70:	ldrh	ip, [ip, #130]	; 0x82
   2ba74:	ldr	lr, [sp, #16]
   2ba78:	ldr	r4, [sp, #20]
   2ba7c:	ldr	r5, [sp, #24]
   2ba80:	str	r0, [sp, #12]
   2ba84:	mov	r0, r1
   2ba88:	mov	r1, r2
   2ba8c:	mov	r2, r3
   2ba90:	uxth	r3, ip
   2ba94:	str	lr, [sp]
   2ba98:	str	r4, [sp, #4]
   2ba9c:	str	r5, [sp, #8]
   2baa0:	bl	2b368 <flatcc_builder_create_table@@Base>
   2baa4:	str	r0, [sp, #28]
   2baa8:	movw	r1, #0
   2baac:	cmp	r1, r0
   2bab0:	bne	2bac0 <flatcc_builder_end_table@@Base+0x1a0>
   2bab4:	movw	r0, #0
   2bab8:	str	r0, [fp, #-12]
   2babc:	b	2bb38 <flatcc_builder_end_table@@Base+0x218>
   2bac0:	ldr	r0, [fp, #-16]
   2bac4:	ldr	r0, [r0, #32]
   2bac8:	ldr	r0, [r0, #24]
   2bacc:	ldr	r1, [fp, #-16]
   2bad0:	str	r0, [r1, #12]
   2bad4:	ldr	r0, [fp, #-16]
   2bad8:	ldr	r0, [r0, #32]
   2badc:	ldrh	r0, [r0, #28]
   2bae0:	ldr	r1, [fp, #-16]
   2bae4:	strh	r0, [r1, #8]
   2bae8:	ldr	r0, [fp, #-16]
   2baec:	ldr	r0, [r0, #52]	; 0x34
   2baf0:	ldr	r1, [fp, #-16]
   2baf4:	ldr	r1, [r1, #32]
   2baf8:	ldr	r1, [r1, #16]
   2bafc:	add	r0, r0, r1
   2bb00:	ldr	r1, [fp, #-16]
   2bb04:	str	r0, [r1, #4]
   2bb08:	ldr	r0, [fp, #-16]
   2bb0c:	ldr	r0, [r0, #76]	; 0x4c
   2bb10:	ldr	r1, [fp, #-16]
   2bb14:	ldr	r1, [r1, #32]
   2bb18:	ldr	r1, [r1, #20]
   2bb1c:	add	r0, r0, r1
   2bb20:	ldr	r1, [fp, #-16]
   2bb24:	str	r0, [r1]
   2bb28:	ldr	r0, [fp, #-16]
   2bb2c:	bl	29a38 <flatcc_builder_end_buffer@@Base+0x164>
   2bb30:	ldr	r0, [sp, #28]
   2bb34:	str	r0, [fp, #-12]
   2bb38:	ldr	r0, [fp, #-12]
   2bb3c:	sub	sp, fp, #8
   2bb40:	pop	{r4, r5, fp, pc}
   2bb44:	muleq	r0, r2, r2
   2bb48:	andeq	sl, r0, lr, asr sl
   2bb4c:	andeq	fp, r0, sl, lsr #7
   2bb50:			; <UNDEFINED> instruction: 0x9e3779b1

0002bb54 <flatcc_builder_create_vector@@Base>:
   2bb54:	push	{fp, lr}
   2bb58:	mov	fp, sp
   2bb5c:	sub	sp, sp, #112	; 0x70
   2bb60:	ldr	ip, [fp, #12]
   2bb64:	ldr	lr, [fp, #8]
   2bb68:	str	r0, [fp, #-8]
   2bb6c:	str	r1, [fp, #-12]
   2bb70:	str	r2, [fp, #-16]
   2bb74:	str	r3, [fp, #-20]	; 0xffffffec
   2bb78:	strh	lr, [fp, #-22]	; 0xffffffea
   2bb7c:	ldr	r0, [fp, #-16]
   2bb80:	ldr	r1, [fp, #12]
   2bb84:	cmp	r0, r1
   2bb88:	bls	2bbcc <flatcc_builder_create_vector@@Base+0x78>
   2bb8c:	ldr	r0, [fp, #-16]
   2bb90:	ldr	r1, [fp, #12]
   2bb94:	cmp	r0, r1
   2bb98:	bhi	2bba0 <flatcc_builder_create_vector@@Base+0x4c>
   2bb9c:	b	2bbc0 <flatcc_builder_create_vector@@Base+0x6c>
   2bba0:	ldr	r0, [pc, #364]	; 2bd14 <flatcc_builder_create_vector@@Base+0x1c0>
   2bba4:	add	r0, pc, r0
   2bba8:	ldr	r1, [pc, #360]	; 2bd18 <flatcc_builder_create_vector@@Base+0x1c4>
   2bbac:	add	r1, pc, r1
   2bbb0:	ldr	r2, [pc, #356]	; 2bd1c <flatcc_builder_create_vector@@Base+0x1c8>
   2bbb4:	add	r3, pc, r2
   2bbb8:	movw	r2, #1365	; 0x555
   2bbbc:	bl	12e68 <__assert_fail@plt>
   2bbc0:	movw	r0, #0
   2bbc4:	str	r0, [fp, #-4]
   2bbc8:	b	2bd08 <flatcc_builder_create_vector@@Base+0x1b4>
   2bbcc:	sub	r0, fp, #22
   2bbd0:	mov	r1, #4
   2bbd4:	bl	2a8f0 <flatcc_builder_start_vector@@Base+0xac>
   2bbd8:	ldr	r0, [fp, #-8]
   2bbdc:	ldrh	r1, [fp, #-22]	; 0xffffffea
   2bbe0:	bl	29410 <flatcc_builder_create_buffer@@Base+0x3a8>
   2bbe4:	ldr	r0, [fp, #-16]
   2bbe8:	ldr	r1, [fp, #-20]	; 0xffffffec
   2bbec:	mul	r0, r0, r1
   2bbf0:	str	r0, [fp, #-28]	; 0xffffffe4
   2bbf4:	ldr	r0, [fp, #-16]
   2bbf8:	bl	28f30 <flatcc_builder_embed_buffer@@Base+0x388>
   2bbfc:	str	r0, [fp, #-36]	; 0xffffffdc
   2bc00:	ldr	r0, [fp, #-8]
   2bc04:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2bc08:	ldrh	r2, [fp, #-22]	; 0xffffffea
   2bc0c:	bl	28efc <flatcc_builder_embed_buffer@@Base+0x354>
   2bc10:	str	r0, [fp, #-32]	; 0xffffffe0
   2bc14:	mov	r0, #0
   2bc18:	str	r0, [sp, #4]
   2bc1c:	str	r0, [sp, #8]
   2bc20:	ldr	r0, [sp, #4]
   2bc24:	add	r0, r0, #4
   2bc28:	str	r0, [sp, #4]
   2bc2c:	add	r0, sp, #4
   2bc30:	add	r0, r0, #8
   2bc34:	ldr	r1, [sp, #8]
   2bc38:	sub	r2, fp, #36	; 0x24
   2bc3c:	str	r2, [r0, r1, lsl #3]
   2bc40:	ldr	r1, [sp, #8]
   2bc44:	add	r0, r0, r1, lsl #3
   2bc48:	movw	r1, #4
   2bc4c:	str	r1, [r0, #4]
   2bc50:	ldr	r0, [sp, #8]
   2bc54:	add	r0, r0, #1
   2bc58:	str	r0, [sp, #8]
   2bc5c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2bc60:	cmp	r0, #0
   2bc64:	bls	2bca8 <flatcc_builder_create_vector@@Base+0x154>
   2bc68:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2bc6c:	ldr	r1, [sp, #4]
   2bc70:	add	r0, r1, r0
   2bc74:	str	r0, [sp, #4]
   2bc78:	ldr	r0, [fp, #-12]
   2bc7c:	add	r1, sp, #4
   2bc80:	add	r1, r1, #8
   2bc84:	ldr	r2, [sp, #8]
   2bc88:	str	r0, [r1, r2, lsl #3]
   2bc8c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2bc90:	ldr	r2, [sp, #8]
   2bc94:	add	r1, r1, r2, lsl #3
   2bc98:	str	r0, [r1, #4]
   2bc9c:	ldr	r0, [sp, #8]
   2bca0:	add	r0, r0, #1
   2bca4:	str	r0, [sp, #8]
   2bca8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2bcac:	cmp	r0, #0
   2bcb0:	bls	2bcf8 <flatcc_builder_create_vector@@Base+0x1a4>
   2bcb4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2bcb8:	ldr	r1, [sp, #4]
   2bcbc:	add	r0, r1, r0
   2bcc0:	str	r0, [sp, #4]
   2bcc4:	add	r0, sp, #4
   2bcc8:	add	r0, r0, #8
   2bccc:	ldr	r1, [sp, #8]
   2bcd0:	ldr	r2, [pc, #72]	; 2bd20 <flatcc_builder_create_vector@@Base+0x1cc>
   2bcd4:	ldr	r2, [pc, r2]
   2bcd8:	str	r2, [r0, r1, lsl #3]
   2bcdc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2bce0:	ldr	r2, [sp, #8]
   2bce4:	add	r0, r0, r2, lsl #3
   2bce8:	str	r1, [r0, #4]
   2bcec:	ldr	r0, [sp, #8]
   2bcf0:	add	r0, r0, #1
   2bcf4:	str	r0, [sp, #8]
   2bcf8:	ldr	r0, [fp, #-8]
   2bcfc:	add	r1, sp, #4
   2bd00:	bl	28f44 <flatcc_builder_embed_buffer@@Base+0x39c>
   2bd04:	str	r0, [fp, #-4]
   2bd08:	ldr	r0, [fp, #-4]
   2bd0c:	mov	sp, fp
   2bd10:	pop	{fp, pc}
   2bd14:	andeq	fp, r0, r4, lsr #3
   2bd18:	andeq	sl, r0, r6, lsl #16
   2bd1c:	andeq	fp, r0, r7, lsr #3
   2bd20:	andeq	ip, r1, ip, ror r3

0002bd24 <flatcc_builder_end_vector@@Base>:
   2bd24:	push	{fp, lr}
   2bd28:	mov	fp, sp
   2bd2c:	sub	sp, sp, #24
   2bd30:	str	r0, [fp, #-8]
   2bd34:	ldr	r0, [fp, #-8]
   2bd38:	ldr	r0, [r0, #32]
   2bd3c:	ldrh	r0, [r0, #14]
   2bd40:	cmp	r0, #4
   2bd44:	bne	2bd4c <flatcc_builder_end_vector@@Base+0x28>
   2bd48:	b	2bd6c <flatcc_builder_end_vector@@Base+0x48>
   2bd4c:	ldr	r0, [pc, #152]	; 2bdec <flatcc_builder_end_vector@@Base+0xc8>
   2bd50:	add	r0, pc, r0
   2bd54:	ldr	r1, [pc, #148]	; 2bdf0 <flatcc_builder_end_vector@@Base+0xcc>
   2bd58:	add	r1, pc, r1
   2bd5c:	ldr	r2, [pc, #144]	; 2bdf4 <flatcc_builder_end_vector@@Base+0xd0>
   2bd60:	add	r3, pc, r2
   2bd64:	movw	r2, #1400	; 0x578
   2bd68:	bl	12e68 <__assert_fail@plt>
   2bd6c:	ldr	r0, [fp, #-8]
   2bd70:	ldr	r1, [fp, #-8]
   2bd74:	ldr	r1, [r1, #16]
   2bd78:	ldr	r2, [fp, #-8]
   2bd7c:	ldr	r2, [r2, #32]
   2bd80:	ldr	r2, [r2, #20]
   2bd84:	ldr	r3, [fp, #-8]
   2bd88:	ldr	r3, [r3, #32]
   2bd8c:	ldr	r3, [r3, #16]
   2bd90:	ldr	ip, [fp, #-8]
   2bd94:	ldrh	ip, [ip, #130]	; 0x82
   2bd98:	ldr	lr, [fp, #-8]
   2bd9c:	ldr	lr, [lr, #32]
   2bda0:	ldr	lr, [lr, #24]
   2bda4:	uxth	ip, ip
   2bda8:	str	ip, [sp]
   2bdac:	str	lr, [sp, #4]
   2bdb0:	bl	2bb54 <flatcc_builder_create_vector@@Base>
   2bdb4:	str	r0, [sp, #12]
   2bdb8:	movw	r1, #0
   2bdbc:	cmp	r1, r0
   2bdc0:	bne	2bdd0 <flatcc_builder_end_vector@@Base+0xac>
   2bdc4:	movw	r0, #0
   2bdc8:	str	r0, [fp, #-4]
   2bdcc:	b	2bde0 <flatcc_builder_end_vector@@Base+0xbc>
   2bdd0:	ldr	r0, [fp, #-8]
   2bdd4:	bl	29a38 <flatcc_builder_end_buffer@@Base+0x164>
   2bdd8:	ldr	r0, [sp, #12]
   2bddc:	str	r0, [fp, #-4]
   2bde0:	ldr	r0, [fp, #-4]
   2bde4:	mov	sp, fp
   2bde8:	pop	{fp, pc}
   2bdec:	muleq	r0, ip, r9
   2bdf0:	andeq	sl, r0, sl, asr r6
   2bdf4:	andeq	fp, r0, r1, ror r0

0002bdf8 <flatcc_builder_vector_count@@Base>:
   2bdf8:	sub	sp, sp, #4
   2bdfc:	str	r0, [sp]
   2be00:	ldr	r0, [sp]
   2be04:	ldr	r0, [r0, #32]
   2be08:	ldr	r0, [r0, #20]
   2be0c:	add	sp, sp, #4
   2be10:	bx	lr

0002be14 <flatcc_builder_vector_edit@@Base>:
   2be14:	sub	sp, sp, #4
   2be18:	str	r0, [sp]
   2be1c:	ldr	r0, [sp]
   2be20:	ldr	r0, [r0, #16]
   2be24:	add	sp, sp, #4
   2be28:	bx	lr

0002be2c <flatcc_builder_create_offset_vector_direct@@Base>:
   2be2c:	push	{fp, lr}
   2be30:	mov	fp, sp
   2be34:	sub	sp, sp, #16
   2be38:	str	r0, [fp, #-4]
   2be3c:	str	r1, [sp, #8]
   2be40:	str	r2, [sp, #4]
   2be44:	ldr	r0, [fp, #-4]
   2be48:	ldr	r1, [sp, #8]
   2be4c:	ldr	r2, [sp, #4]
   2be50:	movw	r3, #0
   2be54:	bl	2be60 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   2be58:	mov	sp, fp
   2be5c:	pop	{fp, pc}
   2be60:	push	{fp, lr}
   2be64:	mov	fp, sp
   2be68:	sub	sp, sp, #120	; 0x78
   2be6c:	ldr	ip, [pc, #696]	; 2c12c <flatcc_builder_create_offset_vector_direct@@Base+0x300>
   2be70:	str	r0, [fp, #-8]
   2be74:	str	r1, [fp, #-12]
   2be78:	str	r2, [fp, #-16]
   2be7c:	str	r3, [fp, #-20]	; 0xffffffec
   2be80:	ldr	r0, [fp, #-16]
   2be84:	cmp	r0, ip
   2be88:	bls	2be98 <flatcc_builder_create_offset_vector_direct@@Base+0x6c>
   2be8c:	movw	r0, #0
   2be90:	str	r0, [fp, #-4]
   2be94:	b	2c120 <flatcc_builder_create_offset_vector_direct@@Base+0x2f4>
   2be98:	ldr	r0, [fp, #-8]
   2be9c:	mov	r1, #4
   2bea0:	str	r1, [sp]
   2bea4:	bl	29410 <flatcc_builder_create_buffer@@Base+0x3a8>
   2bea8:	ldr	r0, [fp, #-16]
   2beac:	lsl	r0, r0, #2
   2beb0:	str	r0, [fp, #-24]	; 0xffffffe8
   2beb4:	ldr	r0, [fp, #-16]
   2beb8:	bl	28f30 <flatcc_builder_embed_buffer@@Base+0x388>
   2bebc:	str	r0, [fp, #-32]	; 0xffffffe0
   2bec0:	ldr	r0, [fp, #-8]
   2bec4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2bec8:	ldr	r2, [sp]
   2becc:	bl	28efc <flatcc_builder_embed_buffer@@Base+0x354>
   2bed0:	str	r0, [fp, #-28]	; 0xffffffe4
   2bed4:	mov	r0, #0
   2bed8:	str	r0, [sp, #4]
   2bedc:	str	r0, [sp, #8]
   2bee0:	ldr	r0, [sp, #4]
   2bee4:	add	r0, r0, #4
   2bee8:	str	r0, [sp, #4]
   2beec:	add	r0, sp, #4
   2bef0:	add	r0, r0, #8
   2bef4:	ldr	r1, [sp, #8]
   2bef8:	sub	r2, fp, #32
   2befc:	str	r2, [r0, r1, lsl #3]
   2bf00:	ldr	r1, [sp, #8]
   2bf04:	add	r0, r0, r1, lsl #3
   2bf08:	movw	r1, #4
   2bf0c:	str	r1, [r0, #4]
   2bf10:	ldr	r0, [sp, #8]
   2bf14:	add	r0, r0, #1
   2bf18:	str	r0, [sp, #8]
   2bf1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2bf20:	cmp	r0, #0
   2bf24:	bls	2bf68 <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   2bf28:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2bf2c:	ldr	r1, [sp, #4]
   2bf30:	add	r0, r1, r0
   2bf34:	str	r0, [sp, #4]
   2bf38:	ldr	r0, [fp, #-12]
   2bf3c:	add	r1, sp, #4
   2bf40:	add	r1, r1, #8
   2bf44:	ldr	r2, [sp, #8]
   2bf48:	str	r0, [r1, r2, lsl #3]
   2bf4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2bf50:	ldr	r2, [sp, #8]
   2bf54:	add	r1, r1, r2, lsl #3
   2bf58:	str	r0, [r1, #4]
   2bf5c:	ldr	r0, [sp, #8]
   2bf60:	add	r0, r0, #1
   2bf64:	str	r0, [sp, #8]
   2bf68:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2bf6c:	cmp	r0, #0
   2bf70:	bls	2bfb8 <flatcc_builder_create_offset_vector_direct@@Base+0x18c>
   2bf74:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2bf78:	ldr	r1, [sp, #4]
   2bf7c:	add	r0, r1, r0
   2bf80:	str	r0, [sp, #4]
   2bf84:	add	r0, sp, #4
   2bf88:	add	r0, r0, #8
   2bf8c:	ldr	r1, [sp, #8]
   2bf90:	ldr	r2, [pc, #444]	; 2c154 <flatcc_builder_create_offset_vector_direct@@Base+0x328>
   2bf94:	ldr	r2, [pc, r2]
   2bf98:	str	r2, [r0, r1, lsl #3]
   2bf9c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2bfa0:	ldr	r2, [sp, #8]
   2bfa4:	add	r0, r0, r2, lsl #3
   2bfa8:	str	r1, [r0, #4]
   2bfac:	ldr	r0, [sp, #8]
   2bfb0:	add	r0, r0, #1
   2bfb4:	str	r0, [sp, #8]
   2bfb8:	ldr	r0, [fp, #-8]
   2bfbc:	ldr	r0, [r0, #136]	; 0x88
   2bfc0:	ldr	r1, [sp, #4]
   2bfc4:	sub	r0, r0, r1
   2bfc8:	str	r0, [fp, #-36]	; 0xffffffdc
   2bfcc:	movw	r0, #0
   2bfd0:	str	r0, [fp, #-44]	; 0xffffffd4
   2bfd4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2bfd8:	ldr	r1, [fp, #-16]
   2bfdc:	cmp	r0, r1
   2bfe0:	bcs	2c110 <flatcc_builder_create_offset_vector_direct@@Base+0x2e4>
   2bfe4:	ldr	r0, [fp, #-12]
   2bfe8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2bfec:	add	r0, r0, r1, lsl #2
   2bff0:	ldr	r0, [r0]
   2bff4:	cmp	r0, #0
   2bff8:	beq	2c088 <flatcc_builder_create_offset_vector_direct@@Base+0x25c>
   2bffc:	ldr	r0, [fp, #-12]
   2c000:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2c004:	ldr	r0, [r0, r1, lsl #2]
   2c008:	ldr	r2, [fp, #-36]	; 0xffffffdc
   2c00c:	sub	r0, r0, r2
   2c010:	sub	r0, r0, r1, lsl #2
   2c014:	sub	r0, r0, #4
   2c018:	str	r0, [fp, #-40]	; 0xffffffd8
   2c01c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2c020:	bl	28f30 <flatcc_builder_embed_buffer@@Base+0x388>
   2c024:	ldr	r1, [fp, #-12]
   2c028:	ldr	r2, [fp, #-44]	; 0xffffffd4
   2c02c:	add	r1, r1, r2, lsl #2
   2c030:	str	r0, [r1]
   2c034:	ldr	r0, [fp, #-20]	; 0xffffffec
   2c038:	movw	r1, #0
   2c03c:	cmp	r0, r1
   2c040:	beq	2c084 <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   2c044:	ldr	r0, [fp, #-20]	; 0xffffffec
   2c048:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2c04c:	add	r0, r0, r1
   2c050:	ldrb	r0, [r0]
   2c054:	cmp	r0, #0
   2c058:	beq	2c060 <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   2c05c:	b	2c080 <flatcc_builder_create_offset_vector_direct@@Base+0x254>
   2c060:	ldr	r0, [pc, #224]	; 2c148 <flatcc_builder_create_offset_vector_direct@@Base+0x31c>
   2c064:	add	r0, pc, r0
   2c068:	ldr	r1, [pc, #220]	; 2c14c <flatcc_builder_create_offset_vector_direct@@Base+0x320>
   2c06c:	add	r1, pc, r1
   2c070:	ldr	r2, [pc, #216]	; 2c150 <flatcc_builder_create_offset_vector_direct@@Base+0x324>
   2c074:	add	r3, pc, r2
   2c078:	movw	r2, #1457	; 0x5b1
   2c07c:	bl	12e68 <__assert_fail@plt>
   2c080:	b	2c084 <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   2c084:	b	2c0fc <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   2c088:	ldr	r0, [fp, #-20]	; 0xffffffec
   2c08c:	movw	r1, #0
   2c090:	cmp	r0, r1
   2c094:	beq	2c0d8 <flatcc_builder_create_offset_vector_direct@@Base+0x2ac>
   2c098:	ldr	r0, [fp, #-20]	; 0xffffffec
   2c09c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2c0a0:	add	r0, r0, r1
   2c0a4:	ldrb	r0, [r0]
   2c0a8:	cmp	r0, #0
   2c0ac:	bne	2c0b4 <flatcc_builder_create_offset_vector_direct@@Base+0x288>
   2c0b0:	b	2c0d4 <flatcc_builder_create_offset_vector_direct@@Base+0x2a8>
   2c0b4:	ldr	r0, [pc, #128]	; 2c13c <flatcc_builder_create_offset_vector_direct@@Base+0x310>
   2c0b8:	add	r0, pc, r0
   2c0bc:	ldr	r1, [pc, #124]	; 2c140 <flatcc_builder_create_offset_vector_direct@@Base+0x314>
   2c0c0:	add	r1, pc, r1
   2c0c4:	ldr	r2, [pc, #120]	; 2c144 <flatcc_builder_create_offset_vector_direct@@Base+0x318>
   2c0c8:	add	r3, pc, r2
   2c0cc:	movw	r2, #1461	; 0x5b5
   2c0d0:	bl	12e68 <__assert_fail@plt>
   2c0d4:	b	2c0f8 <flatcc_builder_create_offset_vector_direct@@Base+0x2cc>
   2c0d8:	ldr	r0, [pc, #80]	; 2c130 <flatcc_builder_create_offset_vector_direct@@Base+0x304>
   2c0dc:	add	r0, pc, r0
   2c0e0:	ldr	r1, [pc, #76]	; 2c134 <flatcc_builder_create_offset_vector_direct@@Base+0x308>
   2c0e4:	add	r1, pc, r1
   2c0e8:	ldr	r2, [pc, #72]	; 2c138 <flatcc_builder_create_offset_vector_direct@@Base+0x30c>
   2c0ec:	add	r3, pc, r2
   2c0f0:	movw	r2, #1463	; 0x5b7
   2c0f4:	bl	12e68 <__assert_fail@plt>
   2c0f8:	b	2c0fc <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   2c0fc:	b	2c100 <flatcc_builder_create_offset_vector_direct@@Base+0x2d4>
   2c100:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2c104:	add	r0, r0, #1
   2c108:	str	r0, [fp, #-44]	; 0xffffffd4
   2c10c:	b	2bfd4 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   2c110:	ldr	r0, [fp, #-8]
   2c114:	add	r1, sp, #4
   2c118:	bl	28f44 <flatcc_builder_embed_buffer@@Base+0x39c>
   2c11c:	str	r0, [fp, #-4]
   2c120:	ldr	r0, [fp, #-4]
   2c124:	mov	sp, fp
   2c128:	pop	{fp, pc}
   2c12c:	svccc	0x00ffffff
   2c130:	muleq	r0, r3, r4
   2c134:	andeq	sl, r0, lr, asr #5
   2c138:	andeq	fp, r0, r5, lsl #9
   2c13c:	andeq	fp, r0, ip, lsr r5
   2c140:	strdeq	sl, [r0], -r2
   2c144:	andeq	fp, r0, r9, lsr #9
   2c148:	strdeq	fp, [r0], -pc	; <UNPREDICTABLE>
   2c14c:	andeq	sl, r0, r6, asr #6
   2c150:	strdeq	fp, [r0], -sp
   2c154:	strheq	ip, [r1], -ip	; <UNPREDICTABLE>

0002c158 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   2c158:	push	{fp, lr}
   2c15c:	mov	fp, sp
   2c160:	sub	sp, sp, #16
   2c164:	str	r0, [sp, #8]
   2c168:	str	r1, [sp, #4]
   2c16c:	ldr	r0, [sp, #8]
   2c170:	ldr	r0, [r0, #32]
   2c174:	ldrh	r0, [r0, #14]
   2c178:	cmp	r0, #5
   2c17c:	bne	2c184 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   2c180:	b	2c1a4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x4c>
   2c184:	ldr	r0, [pc, #112]	; 2c1fc <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   2c188:	add	r0, pc, r0
   2c18c:	ldr	r1, [pc, #108]	; 2c200 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa8>
   2c190:	add	r1, pc, r1
   2c194:	ldr	r2, [pc, #104]	; 2c204 <flatcc_builder_end_offset_vector_for_unions@@Base+0xac>
   2c198:	add	r3, pc, r2
   2c19c:	movw	r2, #1493	; 0x5d5
   2c1a0:	bl	12e68 <__assert_fail@plt>
   2c1a4:	ldr	r0, [sp, #8]
   2c1a8:	ldr	r1, [sp, #8]
   2c1ac:	ldr	r1, [r1, #16]
   2c1b0:	ldr	r2, [sp, #8]
   2c1b4:	ldr	r2, [r2, #32]
   2c1b8:	ldr	r2, [r2, #20]
   2c1bc:	ldr	r3, [sp, #4]
   2c1c0:	bl	2be60 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   2c1c4:	str	r0, [sp]
   2c1c8:	movw	r1, #0
   2c1cc:	cmp	r1, r0
   2c1d0:	bne	2c1e0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x88>
   2c1d4:	movw	r0, #0
   2c1d8:	str	r0, [fp, #-4]
   2c1dc:	b	2c1f0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
   2c1e0:	ldr	r0, [sp, #8]
   2c1e4:	bl	29a38 <flatcc_builder_end_buffer@@Base+0x164>
   2c1e8:	ldr	r0, [sp]
   2c1ec:	str	r0, [fp, #-4]
   2c1f0:	ldr	r0, [fp, #-4]
   2c1f4:	mov	sp, fp
   2c1f8:	pop	{fp, pc}
   2c1fc:	andeq	sl, r0, sp, asr r6
   2c200:	andeq	sl, r0, r2, lsr #4
   2c204:	andeq	sl, r0, r6, asr #25

0002c208 <flatcc_builder_offset_vector_edit@@Base>:
   2c208:	sub	sp, sp, #4
   2c20c:	str	r0, [sp]
   2c210:	ldr	r0, [sp]
   2c214:	ldr	r0, [r0, #16]
   2c218:	add	sp, sp, #4
   2c21c:	bx	lr

0002c220 <flatcc_builder_offset_vector_count@@Base>:
   2c220:	sub	sp, sp, #4
   2c224:	str	r0, [sp]
   2c228:	ldr	r0, [sp]
   2c22c:	ldr	r0, [r0, #32]
   2c230:	ldr	r0, [r0, #20]
   2c234:	add	sp, sp, #4
   2c238:	bx	lr

0002c23c <flatcc_builder_table_add_union@@Base>:
   2c23c:	push	{fp, lr}
   2c240:	mov	fp, sp
   2c244:	sub	sp, sp, #32
   2c248:	str	r2, [fp, #-12]
   2c24c:	str	r3, [fp, #-8]
   2c250:	str	r0, [sp, #16]
   2c254:	str	r1, [sp, #12]
   2c258:	ldr	r0, [sp, #16]
   2c25c:	ldr	r0, [r0, #32]
   2c260:	ldrh	r0, [r0, #14]
   2c264:	cmp	r0, #3
   2c268:	bne	2c270 <flatcc_builder_table_add_union@@Base+0x34>
   2c26c:	b	2c290 <flatcc_builder_table_add_union@@Base+0x54>
   2c270:	ldr	r0, [pc, #388]	; 2c3fc <flatcc_builder_table_add_union@@Base+0x1c0>
   2c274:	add	r0, pc, r0
   2c278:	ldr	r1, [pc, #384]	; 2c400 <flatcc_builder_table_add_union@@Base+0x1c4>
   2c27c:	add	r1, pc, r1
   2c280:	ldr	r2, [pc, #380]	; 2c404 <flatcc_builder_table_add_union@@Base+0x1c8>
   2c284:	add	r3, pc, r2
   2c288:	movw	r2, #1518	; 0x5ee
   2c28c:	bl	12e68 <__assert_fail@plt>
   2c290:	ldrb	r0, [fp, #-12]
   2c294:	cmp	r0, #0
   2c298:	bne	2c2f0 <flatcc_builder_table_add_union@@Base+0xb4>
   2c29c:	ldr	r0, [fp, #-8]
   2c2a0:	cmp	r0, #0
   2c2a4:	beq	2c2f0 <flatcc_builder_table_add_union@@Base+0xb4>
   2c2a8:	ldrb	r0, [fp, #-12]
   2c2ac:	cmp	r0, #0
   2c2b0:	bne	2c2c0 <flatcc_builder_table_add_union@@Base+0x84>
   2c2b4:	ldr	r0, [fp, #-8]
   2c2b8:	cmp	r0, #0
   2c2bc:	bne	2c2c4 <flatcc_builder_table_add_union@@Base+0x88>
   2c2c0:	b	2c2e4 <flatcc_builder_table_add_union@@Base+0xa8>
   2c2c4:	ldr	r0, [pc, #316]	; 2c408 <flatcc_builder_table_add_union@@Base+0x1cc>
   2c2c8:	add	r0, pc, r0
   2c2cc:	ldr	r1, [pc, #312]	; 2c40c <flatcc_builder_table_add_union@@Base+0x1d0>
   2c2d0:	add	r1, pc, r1
   2c2d4:	ldr	r2, [pc, #308]	; 2c410 <flatcc_builder_table_add_union@@Base+0x1d4>
   2c2d8:	add	r3, pc, r2
   2c2dc:	movw	r2, #1519	; 0x5ef
   2c2e0:	bl	12e68 <__assert_fail@plt>
   2c2e4:	mvn	r0, #0
   2c2e8:	str	r0, [fp, #-4]
   2c2ec:	b	2c3f0 <flatcc_builder_table_add_union@@Base+0x1b4>
   2c2f0:	ldr	r0, [fp, #-8]
   2c2f4:	cmp	r0, #0
   2c2f8:	beq	2c368 <flatcc_builder_table_add_union@@Base+0x12c>
   2c2fc:	ldr	r0, [sp, #16]
   2c300:	ldr	r1, [sp, #12]
   2c304:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   2c308:	str	r0, [sp, #8]
   2c30c:	ldr	r0, [sp, #8]
   2c310:	movw	r1, #0
   2c314:	cmp	r0, r1
   2c318:	bne	2c35c <flatcc_builder_table_add_union@@Base+0x120>
   2c31c:	ldr	r0, [sp, #8]
   2c320:	movw	r1, #0
   2c324:	cmp	r0, r1
   2c328:	beq	2c330 <flatcc_builder_table_add_union@@Base+0xf4>
   2c32c:	b	2c350 <flatcc_builder_table_add_union@@Base+0x114>
   2c330:	ldr	r0, [pc, #220]	; 2c414 <flatcc_builder_table_add_union@@Base+0x1d8>
   2c334:	add	r0, pc, r0
   2c338:	ldr	r1, [pc, #216]	; 2c418 <flatcc_builder_table_add_union@@Base+0x1dc>
   2c33c:	add	r1, pc, r1
   2c340:	ldr	r2, [pc, #212]	; 2c41c <flatcc_builder_table_add_union@@Base+0x1e0>
   2c344:	add	r3, pc, r2
   2c348:	movw	r2, #1522	; 0x5f2
   2c34c:	bl	12e68 <__assert_fail@plt>
   2c350:	mvn	r0, #0
   2c354:	str	r0, [fp, #-4]
   2c358:	b	2c3f0 <flatcc_builder_table_add_union@@Base+0x1b4>
   2c35c:	ldr	r0, [fp, #-8]
   2c360:	ldr	r1, [sp, #8]
   2c364:	str	r0, [r1]
   2c368:	ldr	r0, [sp, #16]
   2c36c:	ldr	r1, [sp, #12]
   2c370:	sub	r1, r1, #1
   2c374:	movw	r2, #1
   2c378:	movw	r3, #1
   2c37c:	uxth	r3, r3
   2c380:	bl	2c55c <flatcc_builder_table_add@@Base>
   2c384:	str	r0, [sp, #4]
   2c388:	ldr	r0, [sp, #4]
   2c38c:	movw	r1, #0
   2c390:	cmp	r0, r1
   2c394:	bne	2c3d8 <flatcc_builder_table_add_union@@Base+0x19c>
   2c398:	ldr	r0, [sp, #4]
   2c39c:	movw	r1, #0
   2c3a0:	cmp	r0, r1
   2c3a4:	beq	2c3ac <flatcc_builder_table_add_union@@Base+0x170>
   2c3a8:	b	2c3cc <flatcc_builder_table_add_union@@Base+0x190>
   2c3ac:	ldr	r0, [pc, #108]	; 2c420 <flatcc_builder_table_add_union@@Base+0x1e4>
   2c3b0:	add	r0, pc, r0
   2c3b4:	ldr	r1, [pc, #104]	; 2c424 <flatcc_builder_table_add_union@@Base+0x1e8>
   2c3b8:	add	r1, pc, r1
   2c3bc:	ldr	r2, [pc, #100]	; 2c428 <flatcc_builder_table_add_union@@Base+0x1ec>
   2c3c0:	add	r3, pc, r2
   2c3c4:	movw	r2, #1526	; 0x5f6
   2c3c8:	bl	12e68 <__assert_fail@plt>
   2c3cc:	mvn	r0, #0
   2c3d0:	str	r0, [fp, #-4]
   2c3d4:	b	2c3f0 <flatcc_builder_table_add_union@@Base+0x1b4>
   2c3d8:	ldrb	r0, [fp, #-12]
   2c3dc:	bl	2c6c4 <flatcc_builder_table_add@@Base+0x168>
   2c3e0:	ldr	r1, [sp, #4]
   2c3e4:	strb	r0, [r1]
   2c3e8:	movw	r0, #0
   2c3ec:	str	r0, [fp, #-4]
   2c3f0:	ldr	r0, [fp, #-4]
   2c3f4:	mov	sp, fp
   2c3f8:	pop	{fp, pc}
   2c3fc:	andeq	sl, r0, sl, ror #18
   2c400:	andeq	sl, r0, r6, lsr r1
   2c404:	andeq	sl, r0, ip, asr #24
   2c408:	andeq	sl, r0, r0, ror #24
   2c40c:	andeq	sl, r0, r2, ror #1
   2c410:	strdeq	sl, [r0], -r8
   2c414:	andeq	sl, r0, r6, lsl ip
   2c418:	andeq	sl, r0, r6, ror r0
   2c41c:	andeq	sl, r0, ip, lsl #23
   2c420:	andeq	sl, r0, r4, lsr #23
   2c424:	strdeq	r9, [r0], -sl
   2c428:	andeq	sl, r0, r0, lsl fp

0002c42c <flatcc_builder_table_add_offset@@Base>:
   2c42c:	push	{fp, lr}
   2c430:	mov	fp, sp
   2c434:	sub	sp, sp, #8
   2c438:	str	r0, [sp, #4]
   2c43c:	str	r1, [sp]
   2c440:	ldr	r0, [sp, #4]
   2c444:	ldr	r0, [r0, #32]
   2c448:	ldrh	r0, [r0, #14]
   2c44c:	cmp	r0, #3
   2c450:	bne	2c458 <flatcc_builder_table_add_offset@@Base+0x2c>
   2c454:	b	2c478 <flatcc_builder_table_add_offset@@Base+0x4c>
   2c458:	ldr	r0, [pc, #212]	; 2c534 <flatcc_builder_table_add_offset@@Base+0x108>
   2c45c:	add	r0, pc, r0
   2c460:	ldr	r1, [pc, #208]	; 2c538 <flatcc_builder_table_add_offset@@Base+0x10c>
   2c464:	add	r1, pc, r1
   2c468:	ldr	r2, [pc, #204]	; 2c53c <flatcc_builder_table_add_offset@@Base+0x110>
   2c46c:	add	r3, pc, r2
   2c470:	movw	r2, #1811	; 0x713
   2c474:	bl	12e68 <__assert_fail@plt>
   2c478:	ldr	r0, [sp]
   2c47c:	cmp	r0, #0
   2c480:	blt	2c498 <flatcc_builder_table_add_offset@@Base+0x6c>
   2c484:	ldr	r0, [sp]
   2c488:	movw	r1, #32764	; 0x7ffc
   2c48c:	cmp	r0, r1
   2c490:	bgt	2c498 <flatcc_builder_table_add_offset@@Base+0x6c>
   2c494:	b	2c4b8 <flatcc_builder_table_add_offset@@Base+0x8c>
   2c498:	ldr	r0, [pc, #160]	; 2c540 <flatcc_builder_table_add_offset@@Base+0x114>
   2c49c:	add	r0, pc, r0
   2c4a0:	ldr	r1, [pc, #156]	; 2c544 <flatcc_builder_table_add_offset@@Base+0x118>
   2c4a4:	add	r1, pc, r1
   2c4a8:	ldr	r2, [pc, #152]	; 2c548 <flatcc_builder_table_add_offset@@Base+0x11c>
   2c4ac:	add	r3, pc, r2
   2c4b0:	movw	r2, #1812	; 0x714
   2c4b4:	bl	12e68 <__assert_fail@plt>
   2c4b8:	ldr	r0, [sp, #4]
   2c4bc:	ldr	r0, [r0, #4]
   2c4c0:	ldr	r1, [sp]
   2c4c4:	add	r0, r0, r1, lsl #1
   2c4c8:	ldrh	r0, [r0]
   2c4cc:	cmp	r0, #0
   2c4d0:	beq	2c4f4 <flatcc_builder_table_add_offset@@Base+0xc8>
   2c4d4:	ldr	r0, [pc, #116]	; 2c550 <flatcc_builder_table_add_offset@@Base+0x124>
   2c4d8:	add	r0, pc, r0
   2c4dc:	ldr	r1, [pc, #112]	; 2c554 <flatcc_builder_table_add_offset@@Base+0x128>
   2c4e0:	add	r1, pc, r1
   2c4e4:	ldr	r2, [pc, #108]	; 2c558 <flatcc_builder_table_add_offset@@Base+0x12c>
   2c4e8:	add	r3, pc, r2
   2c4ec:	movw	r2, #1819	; 0x71b
   2c4f0:	bl	12e68 <__assert_fail@plt>
   2c4f4:	ldr	r0, [pc, #80]	; 2c54c <flatcc_builder_table_add_offset@@Base+0x120>
   2c4f8:	ldr	r1, [sp]
   2c4fc:	ldr	r2, [sp, #4]
   2c500:	ldr	r2, [r2, #12]
   2c504:	eor	r1, r1, r2
   2c508:	mul	r1, r1, r0
   2c50c:	eor	r1, r1, #4
   2c510:	mul	r0, r1, r0
   2c514:	ldr	r1, [sp, #4]
   2c518:	str	r0, [r1, #12]
   2c51c:	ldr	r0, [sp, #4]
   2c520:	ldr	r1, [sp]
   2c524:	uxth	r1, r1
   2c528:	bl	2d4ec <flatcc_builder_table_add_copy@@Base+0x64>
   2c52c:	mov	sp, fp
   2c530:	pop	{fp, pc}
   2c534:	andeq	sl, r0, r2, lsl #15
   2c538:	andeq	r9, r0, lr, asr #30
   2c53c:	andeq	sl, r0, r6, ror #28
   2c540:			; <UNDEFINED> instruction: 0x0000adb6
   2c544:	andeq	r9, r0, lr, lsl #30
   2c548:	andeq	sl, r0, r6, lsr #28
   2c54c:			; <UNDEFINED> instruction: 0x9e3779b1
   2c550:	muleq	r0, r7, r0
   2c554:	ldrdeq	r9, [r0], -r2
   2c558:	andeq	sl, r0, sl, ror #27

0002c55c <flatcc_builder_table_add@@Base>:
   2c55c:	push	{fp, lr}
   2c560:	mov	fp, sp
   2c564:	sub	sp, sp, #16
   2c568:	str	r0, [fp, #-4]
   2c56c:	str	r1, [sp, #8]
   2c570:	str	r2, [sp, #4]
   2c574:	strh	r3, [sp, #2]
   2c578:	ldr	r0, [fp, #-4]
   2c57c:	ldr	r0, [r0, #32]
   2c580:	ldrh	r0, [r0, #14]
   2c584:	cmp	r0, #3
   2c588:	bne	2c590 <flatcc_builder_table_add@@Base+0x34>
   2c58c:	b	2c5b0 <flatcc_builder_table_add@@Base+0x54>
   2c590:	ldr	r0, [pc, #260]	; 2c69c <flatcc_builder_table_add@@Base+0x140>
   2c594:	add	r0, pc, r0
   2c598:	ldr	r1, [pc, #256]	; 2c6a0 <flatcc_builder_table_add@@Base+0x144>
   2c59c:	add	r1, pc, r1
   2c5a0:	ldr	r2, [pc, #252]	; 2c6a4 <flatcc_builder_table_add@@Base+0x148>
   2c5a4:	add	r3, pc, r2
   2c5a8:	movw	r2, #1773	; 0x6ed
   2c5ac:	bl	12e68 <__assert_fail@plt>
   2c5b0:	ldr	r0, [sp, #8]
   2c5b4:	cmp	r0, #0
   2c5b8:	blt	2c5d0 <flatcc_builder_table_add@@Base+0x74>
   2c5bc:	ldr	r0, [sp, #8]
   2c5c0:	movw	r1, #32764	; 0x7ffc
   2c5c4:	cmp	r0, r1
   2c5c8:	bgt	2c5d0 <flatcc_builder_table_add@@Base+0x74>
   2c5cc:	b	2c5f0 <flatcc_builder_table_add@@Base+0x94>
   2c5d0:	ldr	r0, [pc, #208]	; 2c6a8 <flatcc_builder_table_add@@Base+0x14c>
   2c5d4:	add	r0, pc, r0
   2c5d8:	ldr	r1, [pc, #204]	; 2c6ac <flatcc_builder_table_add@@Base+0x150>
   2c5dc:	add	r1, pc, r1
   2c5e0:	ldr	r2, [pc, #200]	; 2c6b0 <flatcc_builder_table_add@@Base+0x154>
   2c5e4:	add	r3, pc, r2
   2c5e8:	movw	r2, #1774	; 0x6ee
   2c5ec:	bl	12e68 <__assert_fail@plt>
   2c5f0:	ldrh	r0, [sp, #2]
   2c5f4:	ldr	r1, [fp, #-4]
   2c5f8:	ldrh	r1, [r1, #130]	; 0x82
   2c5fc:	cmp	r0, r1
   2c600:	ble	2c610 <flatcc_builder_table_add@@Base+0xb4>
   2c604:	ldrh	r0, [sp, #2]
   2c608:	ldr	r1, [fp, #-4]
   2c60c:	strh	r0, [r1, #130]	; 0x82
   2c610:	ldr	r0, [fp, #-4]
   2c614:	ldr	r0, [r0, #4]
   2c618:	ldr	r1, [sp, #8]
   2c61c:	add	r0, r0, r1, lsl #1
   2c620:	ldrh	r0, [r0]
   2c624:	cmp	r0, #0
   2c628:	beq	2c64c <flatcc_builder_table_add@@Base+0xf0>
   2c62c:	ldr	r0, [pc, #132]	; 2c6b8 <flatcc_builder_table_add@@Base+0x15c>
   2c630:	add	r0, pc, r0
   2c634:	ldr	r1, [pc, #128]	; 2c6bc <flatcc_builder_table_add@@Base+0x160>
   2c638:	add	r1, pc, r1
   2c63c:	ldr	r2, [pc, #124]	; 2c6c0 <flatcc_builder_table_add@@Base+0x164>
   2c640:	add	r3, pc, r2
   2c644:	movw	r2, #1784	; 0x6f8
   2c648:	bl	12e68 <__assert_fail@plt>
   2c64c:	ldr	r0, [pc, #96]	; 2c6b4 <flatcc_builder_table_add@@Base+0x158>
   2c650:	ldr	r1, [sp, #8]
   2c654:	ldr	r2, [fp, #-4]
   2c658:	ldr	r2, [r2, #12]
   2c65c:	eor	r1, r1, r2
   2c660:	mul	r1, r1, r0
   2c664:	ldr	r2, [sp, #4]
   2c668:	eor	r1, r1, r2
   2c66c:	mul	r0, r1, r0
   2c670:	ldr	r1, [fp, #-4]
   2c674:	str	r0, [r1, #12]
   2c678:	ldr	r0, [fp, #-4]
   2c67c:	ldr	r1, [sp, #4]
   2c680:	ldrh	r2, [sp, #2]
   2c684:	ldr	r3, [sp, #8]
   2c688:	uxth	r2, r2
   2c68c:	uxth	r3, r3
   2c690:	bl	2d308 <flatcc_builder_string_len@@Base+0x1c>
   2c694:	mov	sp, fp
   2c698:	pop	{fp, pc}
   2c69c:	andeq	sl, r0, sl, asr #12
   2c6a0:	andeq	r9, r0, r6, lsl lr
   2c6a4:	andeq	sl, r0, r4, ror #24
   2c6a8:	andeq	sl, r0, lr, ror ip
   2c6ac:	ldrdeq	r9, [r0], -r6
   2c6b0:	andeq	sl, r0, r4, lsr #24
   2c6b4:			; <UNDEFINED> instruction: 0x9e3779b1
   2c6b8:	andeq	sl, r0, pc, lsr pc
   2c6bc:	andeq	r9, r0, sl, ror sp
   2c6c0:	andeq	sl, r0, r8, asr #23
   2c6c4:	sub	sp, sp, #4
   2c6c8:	strb	r0, [sp, #3]
   2c6cc:	ldrb	r0, [sp, #3]
   2c6d0:	add	sp, sp, #4
   2c6d4:	bx	lr

0002c6d8 <flatcc_builder_table_add_union_vector@@Base>:
   2c6d8:	push	{fp, lr}
   2c6dc:	mov	fp, sp
   2c6e0:	sub	sp, sp, #24
   2c6e4:	str	r2, [sp, #12]
   2c6e8:	str	r3, [sp, #16]
   2c6ec:	str	r0, [sp, #8]
   2c6f0:	str	r1, [sp, #4]
   2c6f4:	ldr	r0, [sp, #8]
   2c6f8:	ldr	r0, [r0, #32]
   2c6fc:	ldrh	r0, [r0, #14]
   2c700:	cmp	r0, #3
   2c704:	bne	2c70c <flatcc_builder_table_add_union_vector@@Base+0x34>
   2c708:	b	2c72c <flatcc_builder_table_add_union_vector@@Base+0x54>
   2c70c:	ldr	r0, [pc, #420]	; 2c8b8 <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   2c710:	add	r0, pc, r0
   2c714:	ldr	r1, [pc, #416]	; 2c8bc <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   2c718:	add	r1, pc, r1
   2c71c:	ldr	r2, [pc, #412]	; 2c8c0 <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   2c720:	add	r3, pc, r2
   2c724:	movw	r2, #1536	; 0x600
   2c728:	bl	12e68 <__assert_fail@plt>
   2c72c:	ldr	r0, [sp, #12]
   2c730:	cmp	r0, #0
   2c734:	movw	r0, #0
   2c738:	moveq	r0, #1
   2c73c:	and	r0, r0, #1
   2c740:	ldr	r1, [sp, #16]
   2c744:	cmp	r1, #0
   2c748:	movw	r1, #0
   2c74c:	moveq	r1, #1
   2c750:	and	r1, r1, #1
   2c754:	cmp	r0, r1
   2c758:	beq	2c7bc <flatcc_builder_table_add_union_vector@@Base+0xe4>
   2c75c:	ldr	r0, [sp, #12]
   2c760:	cmp	r0, #0
   2c764:	movw	r0, #0
   2c768:	moveq	r0, #1
   2c76c:	and	r0, r0, #1
   2c770:	ldr	r1, [sp, #16]
   2c774:	cmp	r1, #0
   2c778:	movw	r1, #0
   2c77c:	moveq	r1, #1
   2c780:	and	r1, r1, #1
   2c784:	cmp	r0, r1
   2c788:	bne	2c790 <flatcc_builder_table_add_union_vector@@Base+0xb8>
   2c78c:	b	2c7b0 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   2c790:	ldr	r0, [pc, #300]	; 2c8c4 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   2c794:	add	r0, pc, r0
   2c798:	ldr	r1, [pc, #296]	; 2c8c8 <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   2c79c:	add	r1, pc, r1
   2c7a0:	ldr	r2, [pc, #292]	; 2c8cc <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   2c7a4:	add	r3, pc, r2
   2c7a8:	movw	r2, #1537	; 0x601
   2c7ac:	bl	12e68 <__assert_fail@plt>
   2c7b0:	mvn	r0, #0
   2c7b4:	str	r0, [fp, #-4]
   2c7b8:	b	2c8ac <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   2c7bc:	ldr	r0, [sp, #12]
   2c7c0:	cmp	r0, #0
   2c7c4:	beq	2c8a4 <flatcc_builder_table_add_union_vector@@Base+0x1cc>
   2c7c8:	ldr	r0, [sp, #8]
   2c7cc:	ldr	r1, [sp, #4]
   2c7d0:	sub	r1, r1, #1
   2c7d4:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   2c7d8:	str	r0, [sp]
   2c7dc:	ldr	r0, [sp]
   2c7e0:	movw	r1, #0
   2c7e4:	cmp	r0, r1
   2c7e8:	bne	2c82c <flatcc_builder_table_add_union_vector@@Base+0x154>
   2c7ec:	ldr	r0, [sp]
   2c7f0:	movw	r1, #0
   2c7f4:	cmp	r0, r1
   2c7f8:	beq	2c800 <flatcc_builder_table_add_union_vector@@Base+0x128>
   2c7fc:	b	2c820 <flatcc_builder_table_add_union_vector@@Base+0x148>
   2c800:	ldr	r0, [pc, #200]	; 2c8d0 <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   2c804:	add	r0, pc, r0
   2c808:	ldr	r1, [pc, #196]	; 2c8d4 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   2c80c:	add	r1, pc, r1
   2c810:	ldr	r2, [pc, #192]	; 2c8d8 <flatcc_builder_table_add_union_vector@@Base+0x200>
   2c814:	add	r3, pc, r2
   2c818:	movw	r2, #1540	; 0x604
   2c81c:	bl	12e68 <__assert_fail@plt>
   2c820:	mvn	r0, #0
   2c824:	str	r0, [fp, #-4]
   2c828:	b	2c8ac <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   2c82c:	ldr	r0, [sp, #12]
   2c830:	ldr	r1, [sp]
   2c834:	str	r0, [r1]
   2c838:	ldr	r0, [sp, #8]
   2c83c:	ldr	r1, [sp, #4]
   2c840:	bl	2c42c <flatcc_builder_table_add_offset@@Base>
   2c844:	str	r0, [sp]
   2c848:	ldr	r0, [sp]
   2c84c:	movw	r1, #0
   2c850:	cmp	r0, r1
   2c854:	bne	2c898 <flatcc_builder_table_add_union_vector@@Base+0x1c0>
   2c858:	ldr	r0, [sp]
   2c85c:	movw	r1, #0
   2c860:	cmp	r0, r1
   2c864:	beq	2c86c <flatcc_builder_table_add_union_vector@@Base+0x194>
   2c868:	b	2c88c <flatcc_builder_table_add_union_vector@@Base+0x1b4>
   2c86c:	ldr	r0, [pc, #104]	; 2c8dc <flatcc_builder_table_add_union_vector@@Base+0x204>
   2c870:	add	r0, pc, r0
   2c874:	ldr	r1, [pc, #100]	; 2c8e0 <flatcc_builder_table_add_union_vector@@Base+0x208>
   2c878:	add	r1, pc, r1
   2c87c:	ldr	r2, [pc, #96]	; 2c8e4 <flatcc_builder_table_add_union_vector@@Base+0x20c>
   2c880:	add	r3, pc, r2
   2c884:	movw	r2, #1544	; 0x608
   2c888:	bl	12e68 <__assert_fail@plt>
   2c88c:	mvn	r0, #0
   2c890:	str	r0, [fp, #-4]
   2c894:	b	2c8ac <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   2c898:	ldr	r0, [sp, #16]
   2c89c:	ldr	r1, [sp]
   2c8a0:	str	r0, [r1]
   2c8a4:	movw	r0, #0
   2c8a8:	str	r0, [fp, #-4]
   2c8ac:	ldr	r0, [fp, #-4]
   2c8b0:	mov	sp, fp
   2c8b4:	pop	{fp, pc}
   2c8b8:	andeq	sl, r0, lr, asr #9
   2c8bc:	muleq	r0, sl, ip
   2c8c0:	andeq	sl, r0, r0, asr #16
   2c8c4:	andeq	sl, r0, pc, lsr #16
   2c8c8:	andeq	r9, r0, r6, lsl ip
   2c8cc:			; <UNDEFINED> instruction: 0x0000a7bc
   2c8d0:	andeq	sl, r0, r6, asr #14
   2c8d4:	andeq	r9, r0, r6, lsr #23
   2c8d8:	andeq	sl, r0, ip, asr #14
   2c8dc:	ldrdeq	sl, [r0], -sl	; <UNPREDICTABLE>
   2c8e0:	andeq	r9, r0, sl, lsr fp
   2c8e4:	andeq	sl, r0, r0, ror #13

0002c8e8 <flatcc_builder_create_union_vector@@Base>:
   2c8e8:	push	{fp, lr}
   2c8ec:	mov	fp, sp
   2c8f0:	sub	sp, sp, #48	; 0x30
   2c8f4:	str	r1, [fp, #-4]
   2c8f8:	str	r2, [fp, #-8]
   2c8fc:	str	r3, [fp, #-12]
   2c900:	mov	r1, r0
   2c904:	str	r0, [sp, #12]
   2c908:	mov	r0, r1
   2c90c:	movw	r1, #0
   2c910:	and	r1, r1, #255	; 0xff
   2c914:	movw	r2, #8
   2c918:	bl	12e2c <memset@plt>
   2c91c:	ldr	r0, [fp, #-4]
   2c920:	bl	2a924 <flatcc_builder_start_offset_vector@@Base>
   2c924:	cmp	r0, #0
   2c928:	beq	2c930 <flatcc_builder_create_union_vector@@Base+0x48>
   2c92c:	b	2ca14 <flatcc_builder_create_union_vector@@Base+0x12c>
   2c930:	ldr	r0, [fp, #-4]
   2c934:	ldr	r1, [fp, #-12]
   2c938:	bl	2a0b8 <flatcc_builder_extend_offset_vector@@Base>
   2c93c:	movw	r1, #0
   2c940:	cmp	r1, r0
   2c944:	bne	2c94c <flatcc_builder_create_union_vector@@Base+0x64>
   2c948:	b	2ca14 <flatcc_builder_create_union_vector@@Base+0x12c>
   2c94c:	ldr	r0, [fp, #-4]
   2c950:	ldr	r1, [fp, #-12]
   2c954:	mov	r2, r1
   2c958:	str	r2, [sp, #8]
   2c95c:	bl	29bf0 <flatcc_builder_start_struct@@Base+0xfc>
   2c960:	str	r0, [fp, #-16]
   2c964:	movw	r1, #0
   2c968:	cmp	r1, r0
   2c96c:	bne	2c974 <flatcc_builder_create_union_vector@@Base+0x8c>
   2c970:	b	2ca14 <flatcc_builder_create_union_vector@@Base+0x12c>
   2c974:	ldr	r0, [fp, #-4]
   2c978:	bl	2c208 <flatcc_builder_offset_vector_edit@@Base>
   2c97c:	str	r0, [fp, #-20]	; 0xffffffec
   2c980:	movw	r0, #0
   2c984:	str	r0, [sp, #24]
   2c988:	ldr	r0, [sp, #24]
   2c98c:	ldr	r1, [fp, #-12]
   2c990:	cmp	r0, r1
   2c994:	bcs	2c9d8 <flatcc_builder_create_union_vector@@Base+0xf0>
   2c998:	ldr	r0, [fp, #-8]
   2c99c:	ldr	r1, [sp, #24]
   2c9a0:	ldrb	r0, [r0, r1, lsl #3]
   2c9a4:	ldr	r2, [fp, #-16]
   2c9a8:	strb	r0, [r2, r1]
   2c9ac:	ldr	r0, [fp, #-8]
   2c9b0:	ldr	r1, [sp, #24]
   2c9b4:	add	r0, r0, r1, lsl #3
   2c9b8:	ldr	r0, [r0, #4]
   2c9bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   2c9c0:	add	r1, r2, r1, lsl #2
   2c9c4:	str	r0, [r1]
   2c9c8:	ldr	r0, [sp, #24]
   2c9cc:	add	r0, r0, #1
   2c9d0:	str	r0, [sp, #24]
   2c9d4:	b	2c988 <flatcc_builder_create_union_vector@@Base+0xa0>
   2c9d8:	ldr	r1, [fp, #-4]
   2c9dc:	ldr	r2, [fp, #-16]
   2c9e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   2c9e4:	ldr	r0, [fp, #-12]
   2c9e8:	mov	ip, sp
   2c9ec:	str	r0, [ip]
   2c9f0:	add	r0, sp, #16
   2c9f4:	bl	2ca1c <flatcc_builder_create_union_vector_direct@@Base>
   2c9f8:	ldr	r0, [sp, #16]
   2c9fc:	ldr	r1, [sp, #12]
   2ca00:	str	r0, [r1]
   2ca04:	ldr	r0, [sp, #20]
   2ca08:	str	r0, [r1, #4]
   2ca0c:	ldr	r0, [fp, #-4]
   2ca10:	bl	29a38 <flatcc_builder_end_buffer@@Base+0x164>
   2ca14:	mov	sp, fp
   2ca18:	pop	{fp, pc}

0002ca1c <flatcc_builder_create_union_vector_direct@@Base>:
   2ca1c:	push	{fp, lr}
   2ca20:	mov	fp, sp
   2ca24:	sub	sp, sp, #32
   2ca28:	ldr	ip, [fp, #8]
   2ca2c:	str	r1, [fp, #-4]
   2ca30:	str	r2, [fp, #-8]
   2ca34:	str	r3, [fp, #-12]
   2ca38:	mov	r1, r0
   2ca3c:	str	r0, [sp, #16]
   2ca40:	mov	r0, r1
   2ca44:	movw	r1, #0
   2ca48:	and	r1, r1, #255	; 0xff
   2ca4c:	movw	r2, #8
   2ca50:	str	ip, [sp, #12]
   2ca54:	bl	12e2c <memset@plt>
   2ca58:	ldr	r0, [fp, #-4]
   2ca5c:	ldr	r1, [fp, #-12]
   2ca60:	ldr	r2, [fp, #8]
   2ca64:	ldr	r3, [fp, #-8]
   2ca68:	bl	2be60 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   2ca6c:	ldr	r1, [sp, #16]
   2ca70:	str	r0, [r1, #4]
   2ca74:	movw	r2, #0
   2ca78:	cmp	r2, r0
   2ca7c:	bne	2ca84 <flatcc_builder_create_union_vector_direct@@Base+0x68>
   2ca80:	b	2cac8 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   2ca84:	ldr	r0, [fp, #-4]
   2ca88:	ldr	r1, [fp, #-8]
   2ca8c:	ldr	r2, [fp, #8]
   2ca90:	movw	r3, #1
   2ca94:	movw	ip, #1
   2ca98:	uxth	ip, ip
   2ca9c:	str	ip, [sp]
   2caa0:	mvn	ip, #0
   2caa4:	str	ip, [sp, #4]
   2caa8:	bl	2bb54 <flatcc_builder_create_vector@@Base>
   2caac:	ldr	r1, [sp, #16]
   2cab0:	str	r0, [r1]
   2cab4:	movw	r2, #0
   2cab8:	cmp	r2, r0
   2cabc:	bne	2cac4 <flatcc_builder_create_union_vector_direct@@Base+0xa8>
   2cac0:	b	2cac8 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   2cac4:	b	2cac8 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   2cac8:	mov	sp, fp
   2cacc:	pop	{fp, pc}

0002cad0 <flatcc_builder_start_union_vector@@Base>:
   2cad0:	push	{fp, lr}
   2cad4:	mov	fp, sp
   2cad8:	sub	sp, sp, #8
   2cadc:	str	r0, [sp]
   2cae0:	ldr	r0, [sp]
   2cae4:	movw	r1, #4
   2cae8:	uxth	r1, r1
   2caec:	bl	29708 <flatcc_builder_start_buffer@@Base+0x178>
   2caf0:	cmp	r0, #0
   2caf4:	beq	2cb04 <flatcc_builder_start_union_vector@@Base+0x34>
   2caf8:	mvn	r0, #0
   2cafc:	str	r0, [sp, #4]
   2cb00:	b	2cb48 <flatcc_builder_start_union_vector@@Base+0x78>
   2cb04:	ldr	r0, [sp]
   2cb08:	ldr	r0, [r0, #32]
   2cb0c:	movw	r1, #8
   2cb10:	str	r1, [r0, #16]
   2cb14:	ldr	r0, [sp]
   2cb18:	ldr	r0, [r0, #32]
   2cb1c:	movw	r1, #0
   2cb20:	str	r1, [r0, #20]
   2cb24:	ldr	r0, [sp]
   2cb28:	ldr	r0, [r0, #32]
   2cb2c:	movw	r1, #7
   2cb30:	strh	r1, [r0, #14]
   2cb34:	ldr	r0, [sp]
   2cb38:	mvn	r1, #3
   2cb3c:	bl	29b64 <flatcc_builder_start_struct@@Base+0x70>
   2cb40:	movw	r0, #0
   2cb44:	str	r0, [sp, #4]
   2cb48:	ldr	r0, [sp, #4]
   2cb4c:	mov	sp, fp
   2cb50:	pop	{fp, pc}

0002cb54 <flatcc_builder_end_union_vector@@Base>:
   2cb54:	push	{fp, lr}
   2cb58:	mov	fp, sp
   2cb5c:	sub	sp, sp, #40	; 0x28
   2cb60:	str	r1, [fp, #-4]
   2cb64:	mov	r1, r0
   2cb68:	str	r0, [sp, #4]
   2cb6c:	mov	r0, r1
   2cb70:	movw	r1, #0
   2cb74:	and	r1, r1, #255	; 0xff
   2cb78:	movw	r2, #8
   2cb7c:	bl	12e2c <memset@plt>
   2cb80:	ldr	r0, [fp, #-4]
   2cb84:	ldr	r0, [r0, #32]
   2cb88:	ldrh	r0, [r0, #14]
   2cb8c:	cmp	r0, #7
   2cb90:	bne	2cb98 <flatcc_builder_end_union_vector@@Base+0x44>
   2cb94:	b	2cbb8 <flatcc_builder_end_union_vector@@Base+0x64>
   2cb98:	ldr	r0, [pc, #260]	; 2cca4 <flatcc_builder_end_union_vector@@Base+0x150>
   2cb9c:	add	r0, pc, r0
   2cba0:	ldr	r1, [pc, #256]	; 2cca8 <flatcc_builder_end_union_vector@@Base+0x154>
   2cba4:	add	r1, pc, r1
   2cba8:	ldr	r2, [pc, #252]	; 2ccac <flatcc_builder_end_union_vector@@Base+0x158>
   2cbac:	add	r3, pc, r2
   2cbb0:	movw	r2, #1617	; 0x651
   2cbb4:	bl	12e68 <__assert_fail@plt>
   2cbb8:	ldr	r0, [fp, #-4]
   2cbbc:	bl	2ccb0 <flatcc_builder_union_vector_count@@Base>
   2cbc0:	str	r0, [sp, #16]
   2cbc4:	ldr	r0, [fp, #-4]
   2cbc8:	ldr	r1, [sp, #16]
   2cbcc:	movw	r2, #5
   2cbd0:	mul	r1, r1, r2
   2cbd4:	bl	29bf0 <flatcc_builder_start_struct@@Base+0xfc>
   2cbd8:	str	r0, [fp, #-16]
   2cbdc:	movw	r1, #0
   2cbe0:	cmp	r1, r0
   2cbe4:	bne	2cbec <flatcc_builder_end_union_vector@@Base+0x98>
   2cbe8:	b	2cc9c <flatcc_builder_end_union_vector@@Base+0x148>
   2cbec:	ldr	r0, [fp, #-16]
   2cbf0:	ldr	r1, [sp, #16]
   2cbf4:	add	r0, r0, r1, lsl #2
   2cbf8:	str	r0, [fp, #-8]
   2cbfc:	ldr	r0, [fp, #-4]
   2cc00:	bl	2cccc <flatcc_builder_union_vector_edit@@Base>
   2cc04:	str	r0, [fp, #-12]
   2cc08:	movw	r0, #0
   2cc0c:	str	r0, [sp, #20]
   2cc10:	ldr	r0, [sp, #20]
   2cc14:	ldr	r1, [sp, #16]
   2cc18:	cmp	r0, r1
   2cc1c:	bcs	2cc60 <flatcc_builder_end_union_vector@@Base+0x10c>
   2cc20:	ldr	r0, [fp, #-12]
   2cc24:	ldr	r1, [sp, #20]
   2cc28:	ldrb	r0, [r0, r1, lsl #3]
   2cc2c:	ldr	r2, [fp, #-8]
   2cc30:	strb	r0, [r2, r1]
   2cc34:	ldr	r0, [fp, #-12]
   2cc38:	ldr	r1, [sp, #20]
   2cc3c:	add	r0, r0, r1, lsl #3
   2cc40:	ldr	r0, [r0, #4]
   2cc44:	ldr	r2, [fp, #-16]
   2cc48:	add	r1, r2, r1, lsl #2
   2cc4c:	str	r0, [r1]
   2cc50:	ldr	r0, [sp, #20]
   2cc54:	add	r0, r0, #1
   2cc58:	str	r0, [sp, #20]
   2cc5c:	b	2cc10 <flatcc_builder_end_union_vector@@Base+0xbc>
   2cc60:	ldr	r1, [fp, #-4]
   2cc64:	ldr	r2, [fp, #-8]
   2cc68:	ldr	r3, [fp, #-16]
   2cc6c:	ldr	r0, [sp, #16]
   2cc70:	mov	ip, sp
   2cc74:	str	r0, [ip]
   2cc78:	add	r0, sp, #8
   2cc7c:	bl	2ca1c <flatcc_builder_create_union_vector_direct@@Base>
   2cc80:	ldr	r0, [sp, #8]
   2cc84:	ldr	r1, [sp, #4]
   2cc88:	str	r0, [r1]
   2cc8c:	ldr	r0, [sp, #12]
   2cc90:	str	r0, [r1, #4]
   2cc94:	ldr	r0, [fp, #-4]
   2cc98:	bl	29a38 <flatcc_builder_end_buffer@@Base+0x164>
   2cc9c:	mov	sp, fp
   2cca0:	pop	{fp, pc}
   2cca4:	andeq	sl, r0, pc, asr #8
   2cca8:	andeq	r9, r0, lr, lsl #16
   2ccac:	andeq	sl, r0, r1, ror r4

0002ccb0 <flatcc_builder_union_vector_count@@Base>:
   2ccb0:	sub	sp, sp, #4
   2ccb4:	str	r0, [sp]
   2ccb8:	ldr	r0, [sp]
   2ccbc:	ldr	r0, [r0, #32]
   2ccc0:	ldr	r0, [r0, #20]
   2ccc4:	add	sp, sp, #4
   2ccc8:	bx	lr

0002cccc <flatcc_builder_union_vector_edit@@Base>:
   2cccc:	sub	sp, sp, #4
   2ccd0:	str	r0, [sp]
   2ccd4:	ldr	r0, [sp]
   2ccd8:	ldr	r0, [r0, #16]
   2ccdc:	add	sp, sp, #4
   2cce0:	bx	lr

0002cce4 <flatcc_builder_extend_union_vector@@Base>:
   2cce4:	push	{fp, lr}
   2cce8:	mov	fp, sp
   2ccec:	sub	sp, sp, #16
   2ccf0:	ldr	r2, [pc, #68]	; 2cd3c <flatcc_builder_extend_union_vector@@Base+0x58>
   2ccf4:	str	r0, [sp, #8]
   2ccf8:	str	r1, [sp, #4]
   2ccfc:	ldr	r0, [sp, #8]
   2cd00:	ldr	r1, [sp, #4]
   2cd04:	bl	29db4 <flatcc_builder_extend_vector@@Base+0x6c>
   2cd08:	cmp	r0, #0
   2cd0c:	beq	2cd1c <flatcc_builder_extend_union_vector@@Base+0x38>
   2cd10:	movw	r0, #0
   2cd14:	str	r0, [fp, #-4]
   2cd18:	b	2cd30 <flatcc_builder_extend_union_vector@@Base+0x4c>
   2cd1c:	ldr	r0, [sp, #8]
   2cd20:	ldr	r1, [sp, #4]
   2cd24:	lsl	r1, r1, #3
   2cd28:	bl	29bf0 <flatcc_builder_start_struct@@Base+0xfc>
   2cd2c:	str	r0, [fp, #-4]
   2cd30:	ldr	r0, [fp, #-4]
   2cd34:	mov	sp, fp
   2cd38:	pop	{fp, pc}
   2cd3c:	svcne	0x00ffffff

0002cd40 <flatcc_builder_truncate_union_vector@@Base>:
   2cd40:	push	{fp, lr}
   2cd44:	mov	fp, sp
   2cd48:	sub	sp, sp, #16
   2cd4c:	str	r0, [sp, #8]
   2cd50:	str	r1, [sp, #4]
   2cd54:	ldr	r0, [sp, #8]
   2cd58:	ldr	r0, [r0, #32]
   2cd5c:	ldrh	r0, [r0, #14]
   2cd60:	cmp	r0, #7
   2cd64:	bne	2cd6c <flatcc_builder_truncate_union_vector@@Base+0x2c>
   2cd68:	b	2cd8c <flatcc_builder_truncate_union_vector@@Base+0x4c>
   2cd6c:	ldr	r0, [pc, #192]	; 2ce34 <flatcc_builder_truncate_union_vector@@Base+0xf4>
   2cd70:	add	r0, pc, r0
   2cd74:	ldr	r1, [pc, #188]	; 2ce38 <flatcc_builder_truncate_union_vector@@Base+0xf8>
   2cd78:	add	r1, pc, r1
   2cd7c:	ldr	r2, [pc, #184]	; 2ce3c <flatcc_builder_truncate_union_vector@@Base+0xfc>
   2cd80:	add	r3, pc, r2
   2cd84:	movw	r2, #1665	; 0x681
   2cd88:	bl	12e68 <__assert_fail@plt>
   2cd8c:	ldr	r0, [sp, #8]
   2cd90:	ldr	r0, [r0, #32]
   2cd94:	ldr	r0, [r0, #20]
   2cd98:	ldr	r1, [sp, #4]
   2cd9c:	cmp	r0, r1
   2cda0:	bcs	2cdec <flatcc_builder_truncate_union_vector@@Base+0xac>
   2cda4:	ldr	r0, [sp, #8]
   2cda8:	ldr	r0, [r0, #32]
   2cdac:	ldr	r0, [r0, #20]
   2cdb0:	ldr	r1, [sp, #4]
   2cdb4:	cmp	r0, r1
   2cdb8:	bcc	2cdc0 <flatcc_builder_truncate_union_vector@@Base+0x80>
   2cdbc:	b	2cde0 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   2cdc0:	ldr	r0, [pc, #120]	; 2ce40 <flatcc_builder_truncate_union_vector@@Base+0x100>
   2cdc4:	add	r0, pc, r0
   2cdc8:	ldr	r1, [pc, #116]	; 2ce44 <flatcc_builder_truncate_union_vector@@Base+0x104>
   2cdcc:	add	r1, pc, r1
   2cdd0:	ldr	r2, [pc, #112]	; 2ce48 <flatcc_builder_truncate_union_vector@@Base+0x108>
   2cdd4:	add	r3, pc, r2
   2cdd8:	movw	r2, #1666	; 0x682
   2cddc:	bl	12e68 <__assert_fail@plt>
   2cde0:	mvn	r0, #0
   2cde4:	str	r0, [fp, #-4]
   2cde8:	b	2ce28 <flatcc_builder_truncate_union_vector@@Base+0xe8>
   2cdec:	ldr	r0, [sp, #4]
   2cdf0:	ldr	r1, [sp, #8]
   2cdf4:	ldr	r1, [r1, #32]
   2cdf8:	ldr	r2, [r1, #20]
   2cdfc:	sub	r0, r2, r0
   2ce00:	str	r0, [r1, #20]
   2ce04:	ldr	r0, [sp, #8]
   2ce08:	ldr	r1, [sp, #8]
   2ce0c:	ldr	r1, [r1, #32]
   2ce10:	ldr	r1, [r1, #16]
   2ce14:	ldr	r2, [sp, #4]
   2ce18:	mul	r1, r1, r2
   2ce1c:	bl	2a5e8 <flatcc_builder_truncate_vector@@Base+0x10c>
   2ce20:	movw	r0, #0
   2ce24:	str	r0, [fp, #-4]
   2ce28:	ldr	r0, [fp, #-4]
   2ce2c:	mov	sp, fp
   2ce30:	pop	{fp, pc}
   2ce34:	andeq	sl, r0, fp, ror r2
   2ce38:	andeq	r9, r0, sl, lsr r6
   2ce3c:	strdeq	sl, [r0], -r0
   2ce40:	andeq	r9, r0, fp, lsl #25
   2ce44:	andeq	r9, r0, r6, ror #11
   2ce48:	muleq	r0, ip, r2

0002ce4c <flatcc_builder_union_vector_push@@Base>:
   2ce4c:	push	{fp, lr}
   2ce50:	mov	fp, sp
   2ce54:	sub	sp, sp, #24
   2ce58:	str	r1, [sp, #12]
   2ce5c:	str	r2, [sp, #16]
   2ce60:	str	r0, [sp, #8]
   2ce64:	ldr	r0, [sp, #8]
   2ce68:	ldr	r0, [r0, #32]
   2ce6c:	ldrh	r0, [r0, #14]
   2ce70:	cmp	r0, #7
   2ce74:	bne	2ce7c <flatcc_builder_union_vector_push@@Base+0x30>
   2ce78:	b	2ce9c <flatcc_builder_union_vector_push@@Base+0x50>
   2ce7c:	ldr	r0, [pc, #160]	; 2cf24 <flatcc_builder_union_vector_push@@Base+0xd8>
   2ce80:	add	r0, pc, r0
   2ce84:	ldr	r1, [pc, #156]	; 2cf28 <flatcc_builder_union_vector_push@@Base+0xdc>
   2ce88:	add	r1, pc, r1
   2ce8c:	ldr	r2, [pc, #152]	; 2cf2c <flatcc_builder_union_vector_push@@Base+0xe0>
   2ce90:	add	r3, pc, r2
   2ce94:	movw	r2, #1677	; 0x68d
   2ce98:	bl	12e68 <__assert_fail@plt>
   2ce9c:	ldr	r0, [pc, #140]	; 2cf30 <flatcc_builder_union_vector_push@@Base+0xe4>
   2cea0:	ldr	r1, [sp, #8]
   2cea4:	ldr	r1, [r1, #32]
   2cea8:	ldr	r1, [r1, #20]
   2ceac:	cmp	r1, r0
   2ceb0:	bne	2cec0 <flatcc_builder_union_vector_push@@Base+0x74>
   2ceb4:	movw	r0, #0
   2ceb8:	str	r0, [fp, #-4]
   2cebc:	b	2cf18 <flatcc_builder_union_vector_push@@Base+0xcc>
   2cec0:	ldr	r0, [sp, #8]
   2cec4:	ldr	r0, [r0, #32]
   2cec8:	ldr	r1, [r0, #20]
   2cecc:	add	r1, r1, #1
   2ced0:	str	r1, [r0, #20]
   2ced4:	ldr	r0, [sp, #8]
   2ced8:	movw	r1, #8
   2cedc:	bl	29bf0 <flatcc_builder_start_struct@@Base+0xfc>
   2cee0:	str	r0, [sp, #4]
   2cee4:	movw	r1, #0
   2cee8:	cmp	r1, r0
   2ceec:	bne	2cefc <flatcc_builder_union_vector_push@@Base+0xb0>
   2cef0:	movw	r0, #0
   2cef4:	str	r0, [fp, #-4]
   2cef8:	b	2cf18 <flatcc_builder_union_vector_push@@Base+0xcc>
   2cefc:	ldr	r0, [sp, #4]
   2cf00:	ldr	r1, [sp, #12]
   2cf04:	str	r1, [r0]
   2cf08:	ldr	r1, [sp, #16]
   2cf0c:	str	r1, [r0, #4]
   2cf10:	ldr	r0, [sp, #4]
   2cf14:	str	r0, [fp, #-4]
   2cf18:	ldr	r0, [fp, #-4]
   2cf1c:	mov	sp, fp
   2cf20:	pop	{fp, pc}
   2cf24:	andeq	sl, r0, fp, ror #2
   2cf28:	andeq	r9, r0, sl, lsr #10
   2cf2c:	andeq	sl, r0, r5, lsr #4
   2cf30:	svcne	0x00ffffff

0002cf34 <flatcc_builder_append_union_vector@@Base>:
   2cf34:	push	{fp, lr}
   2cf38:	mov	fp, sp
   2cf3c:	sub	sp, sp, #16
   2cf40:	str	r0, [sp, #8]
   2cf44:	str	r1, [sp, #4]
   2cf48:	str	r2, [sp]
   2cf4c:	ldr	r0, [sp, #8]
   2cf50:	ldr	r0, [r0, #32]
   2cf54:	ldrh	r0, [r0, #14]
   2cf58:	cmp	r0, #7
   2cf5c:	bne	2cf64 <flatcc_builder_append_union_vector@@Base+0x30>
   2cf60:	b	2cf84 <flatcc_builder_append_union_vector@@Base+0x50>
   2cf64:	ldr	r0, [pc, #96]	; 2cfcc <flatcc_builder_append_union_vector@@Base+0x98>
   2cf68:	add	r0, pc, r0
   2cf6c:	ldr	r1, [pc, #92]	; 2cfd0 <flatcc_builder_append_union_vector@@Base+0x9c>
   2cf70:	add	r1, pc, r1
   2cf74:	ldr	r2, [pc, #88]	; 2cfd4 <flatcc_builder_append_union_vector@@Base+0xa0>
   2cf78:	add	r3, pc, r2
   2cf7c:	movw	r2, #1692	; 0x69c
   2cf80:	bl	12e68 <__assert_fail@plt>
   2cf84:	ldr	r2, [pc, #76]	; 2cfd8 <flatcc_builder_append_union_vector@@Base+0xa4>
   2cf88:	ldr	r0, [sp, #8]
   2cf8c:	ldr	r1, [sp]
   2cf90:	bl	29db4 <flatcc_builder_extend_vector@@Base+0x6c>
   2cf94:	cmp	r0, #0
   2cf98:	beq	2cfa8 <flatcc_builder_append_union_vector@@Base+0x74>
   2cf9c:	movw	r0, #0
   2cfa0:	str	r0, [fp, #-4]
   2cfa4:	b	2cfc0 <flatcc_builder_append_union_vector@@Base+0x8c>
   2cfa8:	ldr	r0, [sp, #8]
   2cfac:	ldr	r1, [sp, #4]
   2cfb0:	ldr	r2, [sp]
   2cfb4:	lsl	r2, r2, #3
   2cfb8:	bl	29f9c <flatcc_builder_vector_push@@Base+0x110>
   2cfbc:	str	r0, [fp, #-4]
   2cfc0:	ldr	r0, [fp, #-4]
   2cfc4:	mov	sp, fp
   2cfc8:	pop	{fp, pc}
   2cfcc:	andeq	sl, r0, r3, lsl #1
   2cfd0:	andeq	r9, r0, r2, asr #8
   2cfd4:	andeq	sl, r0, sl, lsr #3
   2cfd8:	svcne	0x00ffffff

0002cfdc <flatcc_builder_create_string@@Base>:
   2cfdc:	push	{fp, lr}
   2cfe0:	mov	fp, sp
   2cfe4:	sub	sp, sp, #96	; 0x60
   2cfe8:	str	r0, [fp, #-8]
   2cfec:	str	r1, [fp, #-12]
   2cff0:	str	r2, [fp, #-16]
   2cff4:	ldr	r0, [fp, #-16]
   2cff8:	cmn	r0, #1
   2cffc:	bls	2d00c <flatcc_builder_create_string@@Base+0x30>
   2d000:	movw	r0, #0
   2d004:	str	r0, [fp, #-4]
   2d008:	b	2d128 <flatcc_builder_create_string@@Base+0x14c>
   2d00c:	ldr	r0, [fp, #-16]
   2d010:	bl	28f30 <flatcc_builder_embed_buffer@@Base+0x388>
   2d014:	str	r0, [fp, #-24]	; 0xffffffe8
   2d018:	ldr	r0, [fp, #-8]
   2d01c:	ldr	r1, [fp, #-16]
   2d020:	add	r1, r1, #1
   2d024:	mov	r2, #4
   2d028:	bl	28efc <flatcc_builder_embed_buffer@@Base+0x354>
   2d02c:	add	r0, r0, #1
   2d030:	str	r0, [fp, #-20]	; 0xffffffec
   2d034:	mov	r0, #0
   2d038:	str	r0, [sp]
   2d03c:	str	r0, [sp, #4]
   2d040:	ldr	r0, [sp]
   2d044:	add	r0, r0, #4
   2d048:	str	r0, [sp]
   2d04c:	mov	r0, sp
   2d050:	add	r0, r0, #8
   2d054:	ldr	r1, [sp, #4]
   2d058:	sub	r2, fp, #24
   2d05c:	str	r2, [r0, r1, lsl #3]
   2d060:	ldr	r1, [sp, #4]
   2d064:	add	r0, r0, r1, lsl #3
   2d068:	movw	r1, #4
   2d06c:	str	r1, [r0, #4]
   2d070:	ldr	r0, [sp, #4]
   2d074:	add	r0, r0, #1
   2d078:	str	r0, [sp, #4]
   2d07c:	ldr	r0, [fp, #-16]
   2d080:	cmp	r0, #0
   2d084:	bls	2d0c8 <flatcc_builder_create_string@@Base+0xec>
   2d088:	ldr	r0, [fp, #-16]
   2d08c:	ldr	r1, [sp]
   2d090:	add	r0, r1, r0
   2d094:	str	r0, [sp]
   2d098:	ldr	r0, [fp, #-12]
   2d09c:	mov	r1, sp
   2d0a0:	add	r1, r1, #8
   2d0a4:	ldr	r2, [sp, #4]
   2d0a8:	str	r0, [r1, r2, lsl #3]
   2d0ac:	ldr	r0, [fp, #-16]
   2d0b0:	ldr	r2, [sp, #4]
   2d0b4:	add	r1, r1, r2, lsl #3
   2d0b8:	str	r0, [r1, #4]
   2d0bc:	ldr	r0, [sp, #4]
   2d0c0:	add	r0, r0, #1
   2d0c4:	str	r0, [sp, #4]
   2d0c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   2d0cc:	cmp	r0, #0
   2d0d0:	bls	2d118 <flatcc_builder_create_string@@Base+0x13c>
   2d0d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   2d0d8:	ldr	r1, [sp]
   2d0dc:	add	r0, r1, r0
   2d0e0:	str	r0, [sp]
   2d0e4:	mov	r0, sp
   2d0e8:	add	r0, r0, #8
   2d0ec:	ldr	r1, [sp, #4]
   2d0f0:	ldr	r2, [pc, #60]	; 2d134 <flatcc_builder_create_string@@Base+0x158>
   2d0f4:	ldr	r2, [pc, r2]
   2d0f8:	str	r2, [r0, r1, lsl #3]
   2d0fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   2d100:	ldr	r2, [sp, #4]
   2d104:	add	r0, r0, r2, lsl #3
   2d108:	str	r1, [r0, #4]
   2d10c:	ldr	r0, [sp, #4]
   2d110:	add	r0, r0, #1
   2d114:	str	r0, [sp, #4]
   2d118:	ldr	r0, [fp, #-8]
   2d11c:	mov	r1, sp
   2d120:	bl	28f44 <flatcc_builder_embed_buffer@@Base+0x39c>
   2d124:	str	r0, [fp, #-4]
   2d128:	ldr	r0, [fp, #-4]
   2d12c:	mov	sp, fp
   2d130:	pop	{fp, pc}
   2d134:	andeq	sl, r1, ip, asr pc

0002d138 <flatcc_builder_create_string_str@@Base>:
   2d138:	push	{fp, lr}
   2d13c:	mov	fp, sp
   2d140:	sub	sp, sp, #24
   2d144:	str	r0, [fp, #-4]
   2d148:	str	r1, [fp, #-8]
   2d14c:	ldr	r0, [fp, #-4]
   2d150:	ldr	r1, [fp, #-8]
   2d154:	ldr	r2, [fp, #-8]
   2d158:	str	r0, [sp, #12]
   2d15c:	mov	r0, r2
   2d160:	str	r1, [sp, #8]
   2d164:	bl	12e08 <strlen@plt>
   2d168:	ldr	r1, [sp, #12]
   2d16c:	str	r0, [sp, #4]
   2d170:	mov	r0, r1
   2d174:	ldr	r1, [sp, #8]
   2d178:	ldr	r2, [sp, #4]
   2d17c:	bl	2cfdc <flatcc_builder_create_string@@Base>
   2d180:	mov	sp, fp
   2d184:	pop	{fp, pc}

0002d188 <flatcc_builder_create_string_strn@@Base>:
   2d188:	push	{fp, lr}
   2d18c:	mov	fp, sp
   2d190:	sub	sp, sp, #24
   2d194:	str	r0, [fp, #-4]
   2d198:	str	r1, [fp, #-8]
   2d19c:	str	r2, [sp, #12]
   2d1a0:	ldr	r0, [fp, #-4]
   2d1a4:	ldr	r1, [fp, #-8]
   2d1a8:	ldr	r2, [fp, #-8]
   2d1ac:	ldr	r3, [sp, #12]
   2d1b0:	str	r0, [sp, #8]
   2d1b4:	mov	r0, r2
   2d1b8:	str	r1, [sp, #4]
   2d1bc:	mov	r1, r3
   2d1c0:	bl	2a47c <flatcc_builder_append_string_strn@@Base+0x5c>
   2d1c4:	ldr	r1, [sp, #8]
   2d1c8:	str	r0, [sp]
   2d1cc:	mov	r0, r1
   2d1d0:	ldr	r1, [sp, #4]
   2d1d4:	ldr	r2, [sp]
   2d1d8:	bl	2cfdc <flatcc_builder_create_string@@Base>
   2d1dc:	mov	sp, fp
   2d1e0:	pop	{fp, pc}

0002d1e4 <flatcc_builder_end_string@@Base>:
   2d1e4:	push	{fp, lr}
   2d1e8:	mov	fp, sp
   2d1ec:	sub	sp, sp, #16
   2d1f0:	str	r0, [sp, #8]
   2d1f4:	ldr	r0, [sp, #8]
   2d1f8:	ldr	r0, [r0, #32]
   2d1fc:	ldrh	r0, [r0, #14]
   2d200:	cmp	r0, #6
   2d204:	bne	2d20c <flatcc_builder_end_string@@Base+0x28>
   2d208:	b	2d22c <flatcc_builder_end_string@@Base+0x48>
   2d20c:	ldr	r0, [pc, #168]	; 2d2bc <flatcc_builder_end_string@@Base+0xd8>
   2d210:	add	r0, pc, r0
   2d214:	ldr	r1, [pc, #164]	; 2d2c0 <flatcc_builder_end_string@@Base+0xdc>
   2d218:	add	r1, pc, r1
   2d21c:	ldr	r2, [pc, #160]	; 2d2c4 <flatcc_builder_end_string@@Base+0xe0>
   2d220:	add	r3, pc, r2
   2d224:	movw	r2, #1732	; 0x6c4
   2d228:	bl	12e68 <__assert_fail@plt>
   2d22c:	ldr	r0, [sp, #8]
   2d230:	ldr	r0, [r0, #32]
   2d234:	ldr	r0, [r0, #20]
   2d238:	ldr	r1, [sp, #8]
   2d23c:	ldr	r1, [r1, #20]
   2d240:	cmp	r0, r1
   2d244:	bne	2d24c <flatcc_builder_end_string@@Base+0x68>
   2d248:	b	2d26c <flatcc_builder_end_string@@Base+0x88>
   2d24c:	ldr	r0, [pc, #116]	; 2d2c8 <flatcc_builder_end_string@@Base+0xe4>
   2d250:	add	r0, pc, r0
   2d254:	ldr	r1, [pc, #112]	; 2d2cc <flatcc_builder_end_string@@Base+0xe8>
   2d258:	add	r1, pc, r1
   2d25c:	ldr	r2, [pc, #108]	; 2d2d0 <flatcc_builder_end_string@@Base+0xec>
   2d260:	add	r3, pc, r2
   2d264:	movw	r2, #1733	; 0x6c5
   2d268:	bl	12e68 <__assert_fail@plt>
   2d26c:	ldr	r0, [sp, #8]
   2d270:	ldr	r1, [sp, #8]
   2d274:	ldr	r1, [r1, #16]
   2d278:	ldr	r2, [sp, #8]
   2d27c:	ldr	r2, [r2, #20]
   2d280:	bl	2cfdc <flatcc_builder_create_string@@Base>
   2d284:	str	r0, [sp, #4]
   2d288:	movw	r1, #0
   2d28c:	cmp	r1, r0
   2d290:	bne	2d2a0 <flatcc_builder_end_string@@Base+0xbc>
   2d294:	movw	r0, #0
   2d298:	str	r0, [fp, #-4]
   2d29c:	b	2d2b0 <flatcc_builder_end_string@@Base+0xcc>
   2d2a0:	ldr	r0, [sp, #8]
   2d2a4:	bl	29a38 <flatcc_builder_end_buffer@@Base+0x164>
   2d2a8:	ldr	r0, [sp, #4]
   2d2ac:	str	r0, [fp, #-4]
   2d2b0:	ldr	r0, [fp, #-4]
   2d2b4:	mov	sp, fp
   2d2b8:	pop	{fp, pc}
   2d2bc:	ldrdeq	r9, [r0], -lr
   2d2c0:	muleq	r0, sl, r1
   2d2c4:	andeq	r9, r0, r1, lsl #31
   2d2c8:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   2d2cc:	andeq	r9, r0, sl, asr r1
   2d2d0:	andeq	r9, r0, r1, asr #30

0002d2d4 <flatcc_builder_string_edit@@Base>:
   2d2d4:	sub	sp, sp, #4
   2d2d8:	str	r0, [sp]
   2d2dc:	ldr	r0, [sp]
   2d2e0:	ldr	r0, [r0, #16]
   2d2e4:	add	sp, sp, #4
   2d2e8:	bx	lr

0002d2ec <flatcc_builder_string_len@@Base>:
   2d2ec:	sub	sp, sp, #4
   2d2f0:	str	r0, [sp]
   2d2f4:	ldr	r0, [sp]
   2d2f8:	ldr	r0, [r0, #32]
   2d2fc:	ldr	r0, [r0, #20]
   2d300:	add	sp, sp, #4
   2d304:	bx	lr
   2d308:	push	{fp, lr}
   2d30c:	mov	fp, sp
   2d310:	sub	sp, sp, #24
   2d314:	str	r0, [fp, #-8]
   2d318:	str	r1, [sp, #12]
   2d31c:	strh	r2, [sp, #10]
   2d320:	strh	r3, [sp, #8]
   2d324:	ldr	r0, [fp, #-8]
   2d328:	ldr	r0, [r0, #20]
   2d32c:	ldrh	r1, [sp, #10]
   2d330:	add	r0, r0, r1
   2d334:	sub	r0, r0, #1
   2d338:	ldrh	r1, [sp, #10]
   2d33c:	sub	r1, r1, #1
   2d340:	mvn	r2, #0
   2d344:	eor	r1, r1, r2
   2d348:	and	r0, r0, r1
   2d34c:	str	r0, [sp, #4]
   2d350:	ldr	r0, [sp, #4]
   2d354:	ldr	r1, [sp, #12]
   2d358:	add	r0, r0, r1
   2d35c:	ldr	r1, [fp, #-8]
   2d360:	str	r0, [r1, #20]
   2d364:	ldr	r1, [fp, #-8]
   2d368:	ldr	r1, [r1, #24]
   2d36c:	cmp	r0, r1
   2d370:	bcc	2d3a4 <flatcc_builder_string_len@@Base+0xb8>
   2d374:	ldr	r0, [fp, #-8]
   2d378:	ldr	r1, [fp, #-8]
   2d37c:	ldr	r1, [r1, #20]
   2d380:	add	r1, r1, #1
   2d384:	movw	r2, #65532	; 0xfffc
   2d388:	bl	2dd4c <flatcc_builder_get_emit_context@@Base+0x40>
   2d38c:	cmp	r0, #0
   2d390:	beq	2d3a0 <flatcc_builder_string_len@@Base+0xb4>
   2d394:	movw	r0, #0
   2d398:	str	r0, [fp, #-4]
   2d39c:	b	2d3f8 <flatcc_builder_string_len@@Base+0x10c>
   2d3a0:	b	2d3a4 <flatcc_builder_string_len@@Base+0xb8>
   2d3a4:	ldr	r0, [sp, #4]
   2d3a8:	add	r0, r0, #4
   2d3ac:	ldr	r1, [fp, #-8]
   2d3b0:	ldr	r1, [r1, #4]
   2d3b4:	ldrh	r2, [sp, #8]
   2d3b8:	add	r1, r1, r2, lsl #1
   2d3bc:	strh	r0, [r1]
   2d3c0:	ldrh	r0, [sp, #8]
   2d3c4:	ldr	r1, [fp, #-8]
   2d3c8:	ldrh	r1, [r1, #8]
   2d3cc:	cmp	r0, r1
   2d3d0:	blt	2d3e4 <flatcc_builder_string_len@@Base+0xf8>
   2d3d4:	ldrh	r0, [sp, #8]
   2d3d8:	add	r0, r0, #1
   2d3dc:	ldr	r1, [fp, #-8]
   2d3e0:	strh	r0, [r1, #8]
   2d3e4:	ldr	r0, [fp, #-8]
   2d3e8:	ldr	r0, [r0, #16]
   2d3ec:	ldr	r1, [sp, #4]
   2d3f0:	add	r0, r0, r1
   2d3f4:	str	r0, [fp, #-4]
   2d3f8:	ldr	r0, [fp, #-4]
   2d3fc:	mov	sp, fp
   2d400:	pop	{fp, pc}

0002d404 <flatcc_builder_table_edit@@Base>:
   2d404:	push	{fp, lr}
   2d408:	mov	fp, sp
   2d40c:	sub	sp, sp, #8
   2d410:	str	r0, [sp, #4]
   2d414:	str	r1, [sp]
   2d418:	ldr	r0, [sp, #4]
   2d41c:	ldr	r0, [r0, #32]
   2d420:	ldrh	r0, [r0, #14]
   2d424:	cmp	r0, #3
   2d428:	bne	2d430 <flatcc_builder_table_edit@@Base+0x2c>
   2d42c:	b	2d450 <flatcc_builder_table_edit@@Base+0x4c>
   2d430:	ldr	r0, [pc, #68]	; 2d47c <flatcc_builder_table_edit@@Base+0x78>
   2d434:	add	r0, pc, r0
   2d438:	ldr	r1, [pc, #64]	; 2d480 <flatcc_builder_table_edit@@Base+0x7c>
   2d43c:	add	r1, pc, r1
   2d440:	ldr	r2, [pc, #60]	; 2d484 <flatcc_builder_table_edit@@Base+0x80>
   2d444:	add	r3, pc, r2
   2d448:	movw	r2, #1794	; 0x702
   2d44c:	bl	12e68 <__assert_fail@plt>
   2d450:	ldr	r0, [sp, #4]
   2d454:	ldr	r0, [r0, #16]
   2d458:	ldr	r1, [sp, #4]
   2d45c:	ldr	r1, [r1, #20]
   2d460:	add	r0, r0, r1
   2d464:	ldr	r1, [sp]
   2d468:	movw	r2, #0
   2d46c:	sub	r1, r2, r1
   2d470:	add	r0, r0, r1
   2d474:	mov	sp, fp
   2d478:	pop	{fp, pc}
   2d47c:	andeq	r9, r0, sl, lsr #15
   2d480:	andeq	r8, r0, r6, ror pc
   2d484:	andeq	r9, r0, r2, asr lr

0002d488 <flatcc_builder_table_add_copy@@Base>:
   2d488:	push	{fp, lr}
   2d48c:	mov	fp, sp
   2d490:	sub	sp, sp, #24
   2d494:	ldr	ip, [fp, #8]
   2d498:	str	r0, [fp, #-4]
   2d49c:	str	r1, [fp, #-8]
   2d4a0:	str	r2, [sp, #12]
   2d4a4:	str	r3, [sp, #8]
   2d4a8:	strh	ip, [sp, #6]
   2d4ac:	ldr	r0, [fp, #-4]
   2d4b0:	ldr	r1, [fp, #-8]
   2d4b4:	ldr	r2, [sp, #8]
   2d4b8:	ldrh	r3, [sp, #6]
   2d4bc:	bl	2c55c <flatcc_builder_table_add@@Base>
   2d4c0:	str	r0, [sp]
   2d4c4:	movw	r1, #0
   2d4c8:	cmp	r0, r1
   2d4cc:	beq	2d4e0 <flatcc_builder_table_add_copy@@Base+0x58>
   2d4d0:	ldr	r0, [sp]
   2d4d4:	ldr	r1, [sp, #12]
   2d4d8:	ldr	r2, [sp, #8]
   2d4dc:	bl	12db4 <memcpy@plt>
   2d4e0:	ldr	r0, [sp]
   2d4e4:	mov	sp, fp
   2d4e8:	pop	{fp, pc}
   2d4ec:	push	{fp, lr}
   2d4f0:	mov	fp, sp
   2d4f4:	sub	sp, sp, #16
   2d4f8:	str	r0, [sp, #8]
   2d4fc:	strh	r1, [sp, #6]
   2d500:	ldr	r0, [sp, #8]
   2d504:	ldr	r0, [r0, #20]
   2d508:	add	r0, r0, #4
   2d50c:	sub	r0, r0, #1
   2d510:	mvn	r1, #3
   2d514:	and	r0, r0, r1
   2d518:	str	r0, [sp]
   2d51c:	ldr	r0, [sp]
   2d520:	add	r0, r0, #4
   2d524:	ldr	r1, [sp, #8]
   2d528:	str	r0, [r1, #20]
   2d52c:	ldr	r1, [sp, #8]
   2d530:	ldr	r1, [r1, #24]
   2d534:	cmp	r0, r1
   2d538:	bls	2d568 <flatcc_builder_table_add_copy@@Base+0xe0>
   2d53c:	ldr	r0, [sp, #8]
   2d540:	ldr	r1, [sp, #8]
   2d544:	ldr	r1, [r1, #20]
   2d548:	movw	r2, #65532	; 0xfffc
   2d54c:	bl	2dd4c <flatcc_builder_get_emit_context@@Base+0x40>
   2d550:	cmp	r0, #0
   2d554:	beq	2d564 <flatcc_builder_table_add_copy@@Base+0xdc>
   2d558:	movw	r0, #0
   2d55c:	str	r0, [fp, #-4]
   2d560:	b	2d5d4 <flatcc_builder_table_add_copy@@Base+0x14c>
   2d564:	b	2d568 <flatcc_builder_table_add_copy@@Base+0xe0>
   2d568:	ldr	r0, [sp]
   2d56c:	add	r0, r0, #4
   2d570:	ldr	r1, [sp, #8]
   2d574:	ldr	r1, [r1, #4]
   2d578:	ldrh	r2, [sp, #6]
   2d57c:	add	r1, r1, r2, lsl #1
   2d580:	strh	r0, [r1]
   2d584:	ldrh	r0, [sp, #6]
   2d588:	ldr	r1, [sp, #8]
   2d58c:	ldrh	r1, [r1, #8]
   2d590:	cmp	r0, r1
   2d594:	blt	2d5a8 <flatcc_builder_table_add_copy@@Base+0x120>
   2d598:	ldrh	r0, [sp, #6]
   2d59c:	add	r0, r0, #1
   2d5a0:	ldr	r1, [sp, #8]
   2d5a4:	strh	r0, [r1, #8]
   2d5a8:	ldr	r0, [sp]
   2d5ac:	ldr	r1, [sp, #8]
   2d5b0:	ldr	r2, [r1]
   2d5b4:	add	r3, r2, #2
   2d5b8:	str	r3, [r1]
   2d5bc:	strh	r0, [r2]
   2d5c0:	ldr	r0, [sp, #8]
   2d5c4:	ldr	r0, [r0, #16]
   2d5c8:	ldr	r1, [sp]
   2d5cc:	add	r0, r0, r1
   2d5d0:	str	r0, [fp, #-4]
   2d5d4:	ldr	r0, [fp, #-4]
   2d5d8:	mov	sp, fp
   2d5dc:	pop	{fp, pc}

0002d5e0 <flatcc_builder_push_buffer_alignment@@Base>:
   2d5e0:	sub	sp, sp, #8
   2d5e4:	str	r0, [sp, #4]
   2d5e8:	ldr	r0, [sp, #4]
   2d5ec:	ldrh	r0, [r0, #128]	; 0x80
   2d5f0:	strh	r0, [sp, #2]
   2d5f4:	ldr	r0, [sp, #4]
   2d5f8:	movw	r1, #4
   2d5fc:	strh	r1, [r0, #128]	; 0x80
   2d600:	ldrh	r0, [sp, #2]
   2d604:	add	sp, sp, #8
   2d608:	bx	lr

0002d60c <flatcc_builder_pop_buffer_alignment@@Base>:
   2d60c:	push	{fp, lr}
   2d610:	mov	fp, sp
   2d614:	sub	sp, sp, #8
   2d618:	str	r0, [sp, #4]
   2d61c:	strh	r1, [sp, #2]
   2d620:	ldr	r0, [sp, #4]
   2d624:	ldrh	r1, [sp, #2]
   2d628:	bl	29410 <flatcc_builder_create_buffer@@Base+0x3a8>
   2d62c:	mov	sp, fp
   2d630:	pop	{fp, pc}

0002d634 <flatcc_builder_get_buffer_alignment@@Base>:
   2d634:	sub	sp, sp, #4
   2d638:	str	r0, [sp]
   2d63c:	ldr	r0, [sp]
   2d640:	ldrh	r0, [r0, #128]	; 0x80
   2d644:	add	sp, sp, #4
   2d648:	bx	lr

0002d64c <flatcc_builder_set_vtable_clustering@@Base>:
   2d64c:	sub	sp, sp, #8
   2d650:	str	r0, [sp, #4]
   2d654:	str	r1, [sp]
   2d658:	ldr	r0, [sp]
   2d65c:	cmp	r0, #0
   2d660:	movw	r0, #0
   2d664:	movne	r0, #1
   2d668:	mvn	r1, #0
   2d66c:	eor	r0, r0, r1
   2d670:	and	r0, r0, #1
   2d674:	ldr	r1, [sp, #4]
   2d678:	str	r0, [r1, #180]	; 0xb4
   2d67c:	add	sp, sp, #8
   2d680:	bx	lr

0002d684 <flatcc_builder_set_block_align@@Base>:
   2d684:	sub	sp, sp, #8
   2d688:	str	r0, [sp, #4]
   2d68c:	strh	r1, [sp, #2]
   2d690:	ldrh	r0, [sp, #2]
   2d694:	ldr	r1, [sp, #4]
   2d698:	strh	r0, [r1, #132]	; 0x84
   2d69c:	add	sp, sp, #8
   2d6a0:	bx	lr

0002d6a4 <flatcc_builder_get_level@@Base>:
   2d6a4:	sub	sp, sp, #4
   2d6a8:	str	r0, [sp]
   2d6ac:	ldr	r0, [sp]
   2d6b0:	ldr	r0, [r0, #156]	; 0x9c
   2d6b4:	add	sp, sp, #4
   2d6b8:	bx	lr

0002d6bc <flatcc_builder_set_max_level@@Base>:
   2d6bc:	sub	sp, sp, #8
   2d6c0:	str	r0, [sp, #4]
   2d6c4:	str	r1, [sp]
   2d6c8:	ldr	r0, [sp]
   2d6cc:	ldr	r1, [sp, #4]
   2d6d0:	str	r0, [r1, #176]	; 0xb0
   2d6d4:	ldr	r0, [sp, #4]
   2d6d8:	ldr	r0, [r0, #160]	; 0xa0
   2d6dc:	ldr	r1, [sp, #4]
   2d6e0:	ldr	r1, [r1, #176]	; 0xb0
   2d6e4:	cmp	r0, r1
   2d6e8:	bge	2d6fc <flatcc_builder_set_max_level@@Base+0x40>
   2d6ec:	ldr	r0, [sp, #4]
   2d6f0:	ldr	r0, [r0, #176]	; 0xb0
   2d6f4:	ldr	r1, [sp, #4]
   2d6f8:	str	r0, [r1, #160]	; 0xa0
   2d6fc:	add	sp, sp, #8
   2d700:	bx	lr

0002d704 <flatcc_builder_get_buffer_size@@Base>:
   2d704:	sub	sp, sp, #4
   2d708:	str	r0, [sp]
   2d70c:	ldr	r0, [sp]
   2d710:	ldr	r0, [r0, #140]	; 0x8c
   2d714:	ldr	r1, [sp]
   2d718:	ldr	r1, [r1, #136]	; 0x88
   2d71c:	sub	r0, r0, r1
   2d720:	add	sp, sp, #4
   2d724:	bx	lr

0002d728 <flatcc_builder_get_buffer_start@@Base>:
   2d728:	sub	sp, sp, #4
   2d72c:	str	r0, [sp]
   2d730:	ldr	r0, [sp]
   2d734:	ldr	r0, [r0, #136]	; 0x88
   2d738:	add	sp, sp, #4
   2d73c:	bx	lr

0002d740 <flatcc_builder_get_buffer_end@@Base>:
   2d740:	sub	sp, sp, #4
   2d744:	str	r0, [sp]
   2d748:	ldr	r0, [sp]
   2d74c:	ldr	r0, [r0, #140]	; 0x8c
   2d750:	add	sp, sp, #4
   2d754:	bx	lr

0002d758 <flatcc_builder_set_vtable_cache_limit@@Base>:
   2d758:	sub	sp, sp, #8
   2d75c:	str	r0, [sp, #4]
   2d760:	str	r1, [sp]
   2d764:	ldr	r0, [sp]
   2d768:	ldr	r1, [sp, #4]
   2d76c:	str	r0, [r1, #172]	; 0xac
   2d770:	add	sp, sp, #8
   2d774:	bx	lr

0002d778 <flatcc_builder_set_identifier@@Base>:
   2d778:	sub	sp, sp, #16
   2d77c:	str	r0, [sp, #12]
   2d780:	str	r1, [sp, #8]
   2d784:	ldr	r0, [sp, #12]
   2d788:	add	r0, r0, #168	; 0xa8
   2d78c:	ldr	r1, [sp, #8]
   2d790:	movw	r2, #0
   2d794:	cmp	r1, r2
   2d798:	str	r0, [sp, #4]
   2d79c:	beq	2d7ac <flatcc_builder_set_identifier@@Base+0x34>
   2d7a0:	ldr	r0, [sp, #8]
   2d7a4:	str	r0, [sp]
   2d7a8:	b	2d7bc <flatcc_builder_set_identifier@@Base+0x44>
   2d7ac:	ldr	r0, [pc, #56]	; 2d7ec <flatcc_builder_set_identifier@@Base+0x74>
   2d7b0:	ldr	r0, [pc, r0]
   2d7b4:	str	r0, [sp]
   2d7b8:	b	2d7bc <flatcc_builder_set_identifier@@Base+0x44>
   2d7bc:	ldr	r0, [sp]
   2d7c0:	ldrb	r1, [r0]
   2d7c4:	ldr	r2, [sp, #4]
   2d7c8:	strb	r1, [r2]
   2d7cc:	ldrb	r1, [r0, #1]
   2d7d0:	strb	r1, [r2, #1]
   2d7d4:	ldrb	r1, [r0, #2]
   2d7d8:	strb	r1, [r2, #2]
   2d7dc:	ldrb	r0, [r0, #3]
   2d7e0:	strb	r0, [r2, #3]
   2d7e4:	add	sp, sp, #16
   2d7e8:	bx	lr
   2d7ec:	andeq	sl, r1, r0, lsr #17

0002d7f0 <flatcc_builder_get_type@@Base>:
   2d7f0:	sub	sp, sp, #8
   2d7f4:	str	r0, [sp, #4]
   2d7f8:	ldr	r0, [sp, #4]
   2d7fc:	ldr	r0, [r0, #32]
   2d800:	movw	r1, #0
   2d804:	cmp	r0, r1
   2d808:	beq	2d820 <flatcc_builder_get_type@@Base+0x30>
   2d80c:	ldr	r0, [sp, #4]
   2d810:	ldr	r0, [r0, #32]
   2d814:	ldrh	r0, [r0, #14]
   2d818:	str	r0, [sp]
   2d81c:	b	2d82c <flatcc_builder_get_type@@Base+0x3c>
   2d820:	movw	r0, #0
   2d824:	str	r0, [sp]
   2d828:	b	2d82c <flatcc_builder_get_type@@Base+0x3c>
   2d82c:	ldr	r0, [sp]
   2d830:	add	sp, sp, #8
   2d834:	bx	lr

0002d838 <flatcc_builder_get_type_at@@Base>:
   2d838:	sub	sp, sp, #12
   2d83c:	str	r0, [sp, #4]
   2d840:	str	r1, [sp]
   2d844:	ldr	r0, [sp]
   2d848:	cmp	r0, #1
   2d84c:	blt	2d864 <flatcc_builder_get_type_at@@Base+0x2c>
   2d850:	ldr	r0, [sp]
   2d854:	ldr	r1, [sp, #4]
   2d858:	ldr	r1, [r1, #156]	; 0x9c
   2d85c:	cmp	r0, r1
   2d860:	ble	2d870 <flatcc_builder_get_type_at@@Base+0x38>
   2d864:	movw	r0, #0
   2d868:	str	r0, [sp, #8]
   2d86c:	b	2d89c <flatcc_builder_get_type_at@@Base+0x64>
   2d870:	ldr	r0, [sp, #4]
   2d874:	ldr	r0, [r0, #32]
   2d878:	ldr	r1, [sp]
   2d87c:	ldr	r2, [sp, #4]
   2d880:	ldr	r2, [r2, #156]	; 0x9c
   2d884:	sub	r1, r1, r2
   2d888:	movw	r2, #36	; 0x24
   2d88c:	mul	r1, r1, r2
   2d890:	add	r0, r0, r1
   2d894:	ldrh	r0, [r0, #14]
   2d898:	str	r0, [sp, #8]
   2d89c:	ldr	r0, [sp, #8]
   2d8a0:	add	sp, sp, #12
   2d8a4:	bx	lr

0002d8a8 <flatcc_builder_get_direct_buffer@@Base>:
   2d8a8:	push	{fp, lr}
   2d8ac:	mov	fp, sp
   2d8b0:	sub	sp, sp, #16
   2d8b4:	str	r0, [sp, #8]
   2d8b8:	str	r1, [sp, #4]
   2d8bc:	ldr	r0, [sp, #8]
   2d8c0:	ldr	r0, [r0, #184]	; 0xb8
   2d8c4:	cmp	r0, #0
   2d8c8:	beq	2d8e4 <flatcc_builder_get_direct_buffer@@Base+0x3c>
   2d8cc:	ldr	r0, [sp, #8]
   2d8d0:	add	r0, r0, #188	; 0xbc
   2d8d4:	ldr	r1, [sp, #4]
   2d8d8:	bl	2d918 <flatcc_builder_get_direct_buffer@@Base+0x70>
   2d8dc:	str	r0, [fp, #-4]
   2d8e0:	b	2d90c <flatcc_builder_get_direct_buffer@@Base+0x64>
   2d8e4:	ldr	r0, [sp, #4]
   2d8e8:	movw	r1, #0
   2d8ec:	cmp	r0, r1
   2d8f0:	beq	2d900 <flatcc_builder_get_direct_buffer@@Base+0x58>
   2d8f4:	ldr	r0, [sp, #4]
   2d8f8:	movw	r1, #0
   2d8fc:	str	r1, [r0]
   2d900:	b	2d904 <flatcc_builder_get_direct_buffer@@Base+0x5c>
   2d904:	movw	r0, #0
   2d908:	str	r0, [fp, #-4]
   2d90c:	ldr	r0, [fp, #-4]
   2d910:	mov	sp, fp
   2d914:	pop	{fp, pc}
   2d918:	sub	sp, sp, #12
   2d91c:	str	r0, [sp, #4]
   2d920:	str	r1, [sp]
   2d924:	ldr	r0, [sp, #4]
   2d928:	ldr	r0, [r0]
   2d92c:	ldr	r1, [sp, #4]
   2d930:	ldr	r1, [r1, #4]
   2d934:	cmp	r0, r1
   2d938:	bne	2d96c <flatcc_builder_get_direct_buffer@@Base+0xc4>
   2d93c:	ldr	r0, [sp]
   2d940:	movw	r1, #0
   2d944:	cmp	r0, r1
   2d948:	beq	2d95c <flatcc_builder_get_direct_buffer@@Base+0xb4>
   2d94c:	ldr	r0, [sp, #4]
   2d950:	ldr	r0, [r0, #24]
   2d954:	ldr	r1, [sp]
   2d958:	str	r0, [r1]
   2d95c:	ldr	r0, [sp, #4]
   2d960:	ldr	r0, [r0, #8]
   2d964:	str	r0, [sp, #8]
   2d968:	b	2d990 <flatcc_builder_get_direct_buffer@@Base+0xe8>
   2d96c:	ldr	r0, [sp]
   2d970:	movw	r1, #0
   2d974:	cmp	r0, r1
   2d978:	beq	2d988 <flatcc_builder_get_direct_buffer@@Base+0xe0>
   2d97c:	ldr	r0, [sp]
   2d980:	movw	r1, #0
   2d984:	str	r1, [r0]
   2d988:	movw	r0, #0
   2d98c:	str	r0, [sp, #8]
   2d990:	ldr	r0, [sp, #8]
   2d994:	add	sp, sp, #12
   2d998:	bx	lr

0002d99c <flatcc_builder_copy_buffer@@Base>:
   2d99c:	push	{fp, lr}
   2d9a0:	mov	fp, sp
   2d9a4:	sub	sp, sp, #16
   2d9a8:	str	r0, [sp, #8]
   2d9ac:	str	r1, [sp, #4]
   2d9b0:	str	r2, [sp]
   2d9b4:	ldr	r0, [sp, #8]
   2d9b8:	ldr	r0, [r0, #184]	; 0xb8
   2d9bc:	cmp	r0, #0
   2d9c0:	bne	2d9d0 <flatcc_builder_copy_buffer@@Base+0x34>
   2d9c4:	movw	r0, #0
   2d9c8:	str	r0, [fp, #-4]
   2d9cc:	b	2da24 <flatcc_builder_copy_buffer@@Base+0x88>
   2d9d0:	ldr	r0, [sp, #8]
   2d9d4:	add	r0, r0, #188	; 0xbc
   2d9d8:	ldr	r1, [sp, #4]
   2d9dc:	ldr	r2, [sp]
   2d9e0:	bl	2e68c <flatcc_emitter_copy_buffer@@Base>
   2d9e4:	str	r0, [sp, #4]
   2d9e8:	ldr	r0, [sp, #4]
   2d9ec:	movw	r1, #0
   2d9f0:	cmp	r0, r1
   2d9f4:	beq	2d9fc <flatcc_builder_copy_buffer@@Base+0x60>
   2d9f8:	b	2da1c <flatcc_builder_copy_buffer@@Base+0x80>
   2d9fc:	ldr	r0, [pc, #44]	; 2da30 <flatcc_builder_copy_buffer@@Base+0x94>
   2da00:	add	r0, pc, r0
   2da04:	ldr	r1, [pc, #40]	; 2da34 <flatcc_builder_copy_buffer@@Base+0x98>
   2da08:	add	r1, pc, r1
   2da0c:	ldr	r2, [pc, #36]	; 2da38 <flatcc_builder_copy_buffer@@Base+0x9c>
   2da10:	add	r3, pc, r2
   2da14:	movw	r2, #1926	; 0x786
   2da18:	bl	12e68 <__assert_fail@plt>
   2da1c:	ldr	r0, [sp, #4]
   2da20:	str	r0, [fp, #-4]
   2da24:	ldr	r0, [fp, #-4]
   2da28:	mov	sp, fp
   2da2c:	pop	{fp, pc}
   2da30:			; <UNDEFINED> instruction: 0x000056bc
   2da34:	andeq	r8, r0, sl, lsr #19
   2da38:	andeq	r9, r0, r1, lsl r9

0002da3c <flatcc_builder_finalize_buffer@@Base>:
   2da3c:	push	{fp, lr}
   2da40:	mov	fp, sp
   2da44:	sub	sp, sp, #16
   2da48:	str	r0, [fp, #-4]
   2da4c:	str	r1, [sp, #8]
   2da50:	ldr	r0, [fp, #-4]
   2da54:	bl	2d704 <flatcc_builder_get_buffer_size@@Base>
   2da58:	str	r0, [sp]
   2da5c:	ldr	r0, [sp, #8]
   2da60:	movw	r1, #0
   2da64:	cmp	r0, r1
   2da68:	beq	2da78 <flatcc_builder_finalize_buffer@@Base+0x3c>
   2da6c:	ldr	r0, [sp]
   2da70:	ldr	r1, [sp, #8]
   2da74:	str	r0, [r1]
   2da78:	ldr	r0, [sp]
   2da7c:	bl	12de4 <malloc@plt>
   2da80:	str	r0, [sp, #4]
   2da84:	ldr	r0, [sp, #4]
   2da88:	movw	r1, #0
   2da8c:	cmp	r0, r1
   2da90:	bne	2dab4 <flatcc_builder_finalize_buffer@@Base+0x78>
   2da94:	ldr	r0, [pc, #144]	; 2db2c <flatcc_builder_finalize_buffer@@Base+0xf0>
   2da98:	add	r0, pc, r0
   2da9c:	ldr	r1, [pc, #140]	; 2db30 <flatcc_builder_finalize_buffer@@Base+0xf4>
   2daa0:	add	r1, pc, r1
   2daa4:	ldr	r2, [pc, #136]	; 2db34 <flatcc_builder_finalize_buffer@@Base+0xf8>
   2daa8:	add	r3, pc, r2
   2daac:	movw	r2, #1944	; 0x798
   2dab0:	bl	12e68 <__assert_fail@plt>
   2dab4:	ldr	r0, [fp, #-4]
   2dab8:	ldr	r1, [sp, #4]
   2dabc:	ldr	r2, [sp]
   2dac0:	bl	2d99c <flatcc_builder_copy_buffer@@Base>
   2dac4:	movw	r1, #0
   2dac8:	cmp	r0, r1
   2dacc:	bne	2daf0 <flatcc_builder_finalize_buffer@@Base+0xb4>
   2dad0:	ldr	r0, [pc, #96]	; 2db38 <flatcc_builder_finalize_buffer@@Base+0xfc>
   2dad4:	add	r0, pc, r0
   2dad8:	ldr	r1, [pc, #92]	; 2db3c <flatcc_builder_finalize_buffer@@Base+0x100>
   2dadc:	add	r1, pc, r1
   2dae0:	ldr	r2, [pc, #88]	; 2db40 <flatcc_builder_finalize_buffer@@Base+0x104>
   2dae4:	add	r3, pc, r2
   2dae8:	movw	r2, #1948	; 0x79c
   2daec:	bl	12e68 <__assert_fail@plt>
   2daf0:	b	2daf4 <flatcc_builder_finalize_buffer@@Base+0xb8>
   2daf4:	ldr	r0, [sp, #4]
   2daf8:	movw	r1, #0
   2dafc:	cmp	r0, r1
   2db00:	bne	2db20 <flatcc_builder_finalize_buffer@@Base+0xe4>
   2db04:	ldr	r0, [sp, #8]
   2db08:	movw	r1, #0
   2db0c:	cmp	r0, r1
   2db10:	beq	2db20 <flatcc_builder_finalize_buffer@@Base+0xe4>
   2db14:	ldr	r0, [sp, #8]
   2db18:	movw	r1, #0
   2db1c:	str	r1, [r0]
   2db20:	ldr	r0, [sp, #4]
   2db24:	mov	sp, fp
   2db28:	pop	{fp, pc}
   2db2c:	ldrdeq	r9, [r0], -r7
   2db30:	andeq	r8, r0, r2, lsl r9
   2db34:			; <UNDEFINED> instruction: 0x000098be
   2db38:	muleq	r0, fp, sl
   2db3c:	ldrdeq	r8, [r0], -r6
   2db40:	andeq	r9, r0, r2, lsl #17

0002db44 <flatcc_builder_finalize_aligned_buffer@@Base>:
   2db44:	push	{fp, lr}
   2db48:	mov	fp, sp
   2db4c:	sub	sp, sp, #24
   2db50:	str	r0, [fp, #-4]
   2db54:	str	r1, [fp, #-8]
   2db58:	ldr	r0, [fp, #-4]
   2db5c:	bl	2d704 <flatcc_builder_get_buffer_size@@Base>
   2db60:	str	r0, [sp, #4]
   2db64:	ldr	r0, [fp, #-8]
   2db68:	movw	r1, #0
   2db6c:	cmp	r0, r1
   2db70:	beq	2db80 <flatcc_builder_finalize_aligned_buffer@@Base+0x3c>
   2db74:	ldr	r0, [sp, #4]
   2db78:	ldr	r1, [fp, #-8]
   2db7c:	str	r0, [r1]
   2db80:	ldr	r0, [fp, #-4]
   2db84:	bl	2d634 <flatcc_builder_get_buffer_alignment@@Base>
   2db88:	uxth	r0, r0
   2db8c:	str	r0, [sp, #8]
   2db90:	ldr	r0, [sp, #4]
   2db94:	ldr	r1, [sp, #8]
   2db98:	add	r0, r0, r1
   2db9c:	sub	r0, r0, #1
   2dba0:	ldr	r1, [sp, #8]
   2dba4:	sub	r1, r1, #1
   2dba8:	mvn	r2, #0
   2dbac:	eor	r1, r1, r2
   2dbb0:	and	r0, r0, r1
   2dbb4:	str	r0, [sp, #4]
   2dbb8:	ldr	r0, [sp, #8]
   2dbbc:	ldr	r1, [sp, #4]
   2dbc0:	bl	2dc48 <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   2dbc4:	str	r0, [sp, #12]
   2dbc8:	ldr	r0, [sp, #12]
   2dbcc:	movw	r1, #0
   2dbd0:	cmp	r0, r1
   2dbd4:	bne	2dbdc <flatcc_builder_finalize_aligned_buffer@@Base+0x98>
   2dbd8:	b	2dc10 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   2dbdc:	ldr	r0, [fp, #-4]
   2dbe0:	ldr	r1, [sp, #12]
   2dbe4:	ldr	r2, [sp, #4]
   2dbe8:	bl	2d99c <flatcc_builder_copy_buffer@@Base>
   2dbec:	movw	r1, #0
   2dbf0:	cmp	r0, r1
   2dbf4:	bne	2dc0c <flatcc_builder_finalize_aligned_buffer@@Base+0xc8>
   2dbf8:	ldr	r0, [sp, #12]
   2dbfc:	bl	12da8 <free@plt>
   2dc00:	movw	r0, #0
   2dc04:	str	r0, [sp, #12]
   2dc08:	b	2dc10 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   2dc0c:	b	2dc10 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   2dc10:	ldr	r0, [sp, #12]
   2dc14:	movw	r1, #0
   2dc18:	cmp	r0, r1
   2dc1c:	bne	2dc3c <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   2dc20:	ldr	r0, [fp, #-8]
   2dc24:	movw	r1, #0
   2dc28:	cmp	r0, r1
   2dc2c:	beq	2dc3c <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   2dc30:	ldr	r0, [fp, #-8]
   2dc34:	movw	r1, #0
   2dc38:	str	r1, [r0]
   2dc3c:	ldr	r0, [sp, #12]
   2dc40:	mov	sp, fp
   2dc44:	pop	{fp, pc}
   2dc48:	push	{fp, lr}
   2dc4c:	mov	fp, sp
   2dc50:	sub	sp, sp, #16
   2dc54:	str	r0, [fp, #-4]
   2dc58:	str	r1, [sp, #8]
   2dc5c:	movw	r0, #0
   2dc60:	str	r0, [sp]
   2dc64:	ldr	r0, [fp, #-4]
   2dc68:	cmp	r0, #4
   2dc6c:	bcs	2dc78 <flatcc_builder_finalize_aligned_buffer@@Base+0x134>
   2dc70:	movw	r0, #4
   2dc74:	str	r0, [fp, #-4]
   2dc78:	ldr	r1, [fp, #-4]
   2dc7c:	ldr	r2, [sp, #8]
   2dc80:	mov	r0, sp
   2dc84:	bl	12e20 <posix_memalign@plt>
   2dc88:	str	r0, [sp, #4]
   2dc8c:	ldr	r0, [sp, #4]
   2dc90:	cmp	r0, #0
   2dc94:	beq	2dcb8 <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   2dc98:	ldr	r0, [sp]
   2dc9c:	movw	r1, #0
   2dca0:	cmp	r0, r1
   2dca4:	beq	2dcb8 <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   2dca8:	ldr	r0, [sp]
   2dcac:	bl	12da8 <free@plt>
   2dcb0:	movw	r0, #0
   2dcb4:	str	r0, [sp]
   2dcb8:	ldr	r0, [sp]
   2dcbc:	mov	sp, fp
   2dcc0:	pop	{fp, pc}

0002dcc4 <flatcc_builder_aligned_alloc@@Base>:
   2dcc4:	push	{fp, lr}
   2dcc8:	mov	fp, sp
   2dccc:	sub	sp, sp, #8
   2dcd0:	str	r0, [sp, #4]
   2dcd4:	str	r1, [sp]
   2dcd8:	ldr	r0, [sp, #4]
   2dcdc:	ldr	r1, [sp]
   2dce0:	bl	2dc48 <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   2dce4:	mov	sp, fp
   2dce8:	pop	{fp, pc}

0002dcec <flatcc_builder_aligned_free@@Base>:
   2dcec:	push	{fp, lr}
   2dcf0:	mov	fp, sp
   2dcf4:	sub	sp, sp, #8
   2dcf8:	str	r0, [sp, #4]
   2dcfc:	ldr	r0, [sp, #4]
   2dd00:	bl	12da8 <free@plt>
   2dd04:	mov	sp, fp
   2dd08:	pop	{fp, pc}

0002dd0c <flatcc_builder_get_emit_context@@Base>:
   2dd0c:	sub	sp, sp, #4
   2dd10:	str	r0, [sp]
   2dd14:	ldr	r0, [sp]
   2dd18:	ldr	r0, [r0, #36]	; 0x24
   2dd1c:	add	sp, sp, #4
   2dd20:	bx	lr
   2dd24:	sub	sp, sp, #8
   2dd28:	str	r0, [sp, #4]
   2dd2c:	strh	r1, [sp, #2]
   2dd30:	ldr	r0, [sp, #4]
   2dd34:	ldr	r0, [r0, #140]	; 0x8c
   2dd38:	ldrh	r1, [sp, #2]
   2dd3c:	sub	r1, r1, #1
   2dd40:	and	r0, r0, r1
   2dd44:	add	sp, sp, #8
   2dd48:	bx	lr
   2dd4c:	push	{fp, lr}
   2dd50:	mov	fp, sp
   2dd54:	sub	sp, sp, #32
   2dd58:	str	r0, [fp, #-8]
   2dd5c:	str	r1, [fp, #-12]
   2dd60:	str	r2, [sp, #16]
   2dd64:	ldr	r0, [fp, #-8]
   2dd68:	add	r0, r0, #52	; 0x34
   2dd6c:	add	r0, r0, #8
   2dd70:	str	r0, [sp, #12]
   2dd74:	ldr	r0, [fp, #-8]
   2dd78:	ldr	r0, [r0, #48]	; 0x30
   2dd7c:	ldr	r1, [fp, #-8]
   2dd80:	ldr	r1, [r1, #40]	; 0x28
   2dd84:	ldr	r2, [sp, #12]
   2dd88:	ldr	r3, [fp, #-8]
   2dd8c:	ldr	r3, [r3, #28]
   2dd90:	ldr	ip, [fp, #-12]
   2dd94:	add	r3, r3, ip
   2dd98:	str	r0, [sp, #8]
   2dd9c:	mov	r0, r1
   2dda0:	mov	r1, r2
   2dda4:	mov	r2, r3
   2dda8:	movw	r3, #1
   2ddac:	str	r3, [sp, #4]
   2ddb0:	ldr	ip, [sp, #4]
   2ddb4:	str	ip, [sp]
   2ddb8:	ldr	lr, [sp, #8]
   2ddbc:	blx	lr
   2ddc0:	cmp	r0, #0
   2ddc4:	beq	2ddd4 <flatcc_builder_get_emit_context@@Base+0xc8>
   2ddc8:	mvn	r0, #0
   2ddcc:	str	r0, [fp, #-4]
   2ddd0:	b	2dde8 <flatcc_builder_get_emit_context@@Base+0xdc>
   2ddd4:	ldr	r0, [fp, #-8]
   2ddd8:	ldr	r1, [sp, #16]
   2dddc:	bl	29b64 <flatcc_builder_start_struct@@Base+0x70>
   2dde0:	movw	r0, #0
   2dde4:	str	r0, [fp, #-4]
   2dde8:	ldr	r0, [fp, #-4]
   2ddec:	mov	sp, fp
   2ddf0:	pop	{fp, pc}
   2ddf4:	push	{fp, lr}
   2ddf8:	mov	fp, sp
   2ddfc:	sub	sp, sp, #32
   2de00:	str	r0, [fp, #-8]
   2de04:	ldr	r0, [fp, #-8]
   2de08:	add	r0, r0, #52	; 0x34
   2de0c:	add	r0, r0, #40	; 0x28
   2de10:	str	r0, [fp, #-12]
   2de14:	ldr	r0, [fp, #-8]
   2de18:	ldr	r0, [r0, #124]	; 0x7c
   2de1c:	cmp	r0, #0
   2de20:	bne	2de28 <flatcc_builder_get_emit_context@@Base+0x11c>
   2de24:	b	2de48 <flatcc_builder_get_emit_context@@Base+0x13c>
   2de28:	ldr	r0, [pc, #320]	; 2df70 <flatcc_builder_get_emit_context@@Base+0x264>
   2de2c:	add	r0, pc, r0
   2de30:	ldr	r1, [pc, #316]	; 2df74 <flatcc_builder_get_emit_context@@Base+0x268>
   2de34:	add	r1, pc, r1
   2de38:	ldr	r2, [pc, #312]	; 2df78 <flatcc_builder_get_emit_context@@Base+0x26c>
   2de3c:	add	r3, pc, r2
   2de40:	movw	r2, #342	; 0x156
   2de44:	bl	12e68 <__assert_fail@plt>
   2de48:	ldr	r0, [fp, #-8]
   2de4c:	ldr	r1, [fp, #-8]
   2de50:	ldr	r2, [r1, #124]	; 0x7c
   2de54:	movw	r1, #6
   2de58:	movw	r3, #16
   2de5c:	movw	ip, #0
   2de60:	str	ip, [sp]
   2de64:	bl	2889c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   2de68:	movw	r1, #0
   2de6c:	cmp	r0, r1
   2de70:	bne	2de80 <flatcc_builder_get_emit_context@@Base+0x174>
   2de74:	mvn	r0, #0
   2de78:	str	r0, [fp, #-4]
   2de7c:	b	2df64 <flatcc_builder_get_emit_context@@Base+0x258>
   2de80:	ldr	r0, [fp, #-8]
   2de84:	movw	r1, #16
   2de88:	str	r1, [r0, #124]	; 0x7c
   2de8c:	movw	r0, #256	; 0x100
   2de90:	str	r0, [sp, #16]
   2de94:	ldr	r0, [fp, #-8]
   2de98:	ldr	r0, [r0, #48]	; 0x30
   2de9c:	ldr	r1, [fp, #-8]
   2dea0:	ldr	r1, [r1, #40]	; 0x28
   2dea4:	ldr	r2, [fp, #-12]
   2dea8:	ldr	r3, [sp, #16]
   2deac:	str	r0, [sp, #8]
   2deb0:	mov	r0, r1
   2deb4:	mov	r1, r2
   2deb8:	mov	r2, r3
   2debc:	movw	r3, #1
   2dec0:	movw	ip, #5
   2dec4:	str	ip, [sp]
   2dec8:	ldr	ip, [sp, #8]
   2decc:	blx	ip
   2ded0:	cmp	r0, #0
   2ded4:	beq	2dee4 <flatcc_builder_get_emit_context@@Base+0x1d8>
   2ded8:	mvn	r0, #0
   2dedc:	str	r0, [fp, #-4]
   2dee0:	b	2df64 <flatcc_builder_get_emit_context@@Base+0x258>
   2dee4:	b	2dee8 <flatcc_builder_get_emit_context@@Base+0x1dc>
   2dee8:	ldr	r0, [sp, #16]
   2deec:	lsl	r0, r0, #1
   2def0:	ldr	r1, [fp, #-12]
   2def4:	ldr	r1, [r1, #4]
   2def8:	cmp	r0, r1
   2defc:	bhi	2df10 <flatcc_builder_get_emit_context@@Base+0x204>
   2df00:	ldr	r0, [sp, #16]
   2df04:	lsl	r0, r0, #1
   2df08:	str	r0, [sp, #16]
   2df0c:	b	2dee8 <flatcc_builder_get_emit_context@@Base+0x1dc>
   2df10:	ldr	r0, [sp, #16]
   2df14:	lsr	r0, r0, #2
   2df18:	str	r0, [sp, #16]
   2df1c:	movw	r0, #0
   2df20:	str	r0, [sp, #12]
   2df24:	ldr	r0, [sp, #12]
   2df28:	movw	r1, #1
   2df2c:	lsl	r0, r1, r0
   2df30:	ldr	r1, [sp, #16]
   2df34:	cmp	r0, r1
   2df38:	bcs	2df50 <flatcc_builder_get_emit_context@@Base+0x244>
   2df3c:	b	2df40 <flatcc_builder_get_emit_context@@Base+0x234>
   2df40:	ldr	r0, [sp, #12]
   2df44:	add	r0, r0, #1
   2df48:	str	r0, [sp, #12]
   2df4c:	b	2df24 <flatcc_builder_get_emit_context@@Base+0x218>
   2df50:	ldr	r0, [sp, #12]
   2df54:	ldr	r1, [fp, #-8]
   2df58:	str	r0, [r1, #116]	; 0x74
   2df5c:	movw	r0, #0
   2df60:	str	r0, [fp, #-4]
   2df64:	ldr	r0, [fp, #-4]
   2df68:	mov	sp, fp
   2df6c:	pop	{fp, pc}
   2df70:	andeq	r9, r0, r7, lsl #14
   2df74:	andeq	r8, r0, lr, ror r5
   2df78:	andeq	r9, r0, r6, lsl #14

0002df7c <flatcc_emitter_recycle_page@@Base>:
   2df7c:	sub	sp, sp, #12
   2df80:	str	r0, [sp, #4]
   2df84:	str	r1, [sp]
   2df88:	ldr	r0, [sp]
   2df8c:	ldr	r1, [sp, #4]
   2df90:	ldr	r1, [r1]
   2df94:	cmp	r0, r1
   2df98:	beq	2dfb0 <flatcc_emitter_recycle_page@@Base+0x34>
   2df9c:	ldr	r0, [sp]
   2dfa0:	ldr	r1, [sp, #4]
   2dfa4:	ldr	r1, [r1, #4]
   2dfa8:	cmp	r0, r1
   2dfac:	bne	2dfbc <flatcc_emitter_recycle_page@@Base+0x40>
   2dfb0:	mvn	r0, #0
   2dfb4:	str	r0, [sp, #8]
   2dfb8:	b	2e030 <flatcc_emitter_recycle_page@@Base+0xb4>
   2dfbc:	ldr	r0, [sp]
   2dfc0:	ldr	r0, [r0, #2948]	; 0xb84
   2dfc4:	ldr	r1, [sp]
   2dfc8:	ldr	r1, [r1, #2944]	; 0xb80
   2dfcc:	str	r0, [r1, #2948]	; 0xb84
   2dfd0:	ldr	r0, [sp]
   2dfd4:	ldr	r0, [r0, #2944]	; 0xb80
   2dfd8:	ldr	r1, [sp]
   2dfdc:	ldr	r1, [r1, #2948]	; 0xb84
   2dfe0:	str	r0, [r1, #2944]	; 0xb80
   2dfe4:	ldr	r0, [sp, #4]
   2dfe8:	ldr	r0, [r0]
   2dfec:	ldr	r0, [r0, #2948]	; 0xb84
   2dff0:	ldr	r1, [sp]
   2dff4:	str	r0, [r1, #2948]	; 0xb84
   2dff8:	ldr	r0, [sp, #4]
   2dffc:	ldr	r0, [r0]
   2e000:	ldr	r1, [sp]
   2e004:	str	r0, [r1, #2944]	; 0xb80
   2e008:	ldr	r0, [sp]
   2e00c:	ldr	r1, [sp]
   2e010:	ldr	r1, [r1, #2948]	; 0xb84
   2e014:	str	r0, [r1, #2944]	; 0xb80
   2e018:	ldr	r0, [sp]
   2e01c:	ldr	r1, [sp]
   2e020:	ldr	r1, [r1, #2944]	; 0xb80
   2e024:	str	r0, [r1, #2948]	; 0xb84
   2e028:	movw	r0, #0
   2e02c:	str	r0, [sp, #8]
   2e030:	ldr	r0, [sp, #8]
   2e034:	add	sp, sp, #12
   2e038:	bx	lr

0002e03c <flatcc_emitter_reset@@Base>:
   2e03c:	push	{fp, lr}
   2e040:	mov	fp, sp
   2e044:	sub	sp, sp, #16
   2e048:	str	r0, [fp, #-4]
   2e04c:	ldr	r0, [fp, #-4]
   2e050:	ldr	r0, [r0]
   2e054:	str	r0, [sp, #8]
   2e058:	ldr	r0, [fp, #-4]
   2e05c:	ldr	r0, [r0]
   2e060:	movw	r1, #0
   2e064:	cmp	r0, r1
   2e068:	bne	2e070 <flatcc_emitter_reset@@Base+0x34>
   2e06c:	b	2e1cc <flatcc_emitter_reset@@Base+0x190>
   2e070:	ldr	r0, [fp, #-4]
   2e074:	ldr	r0, [r0]
   2e078:	ldr	r1, [fp, #-4]
   2e07c:	str	r0, [r1, #4]
   2e080:	ldr	r0, [fp, #-4]
   2e084:	ldr	r0, [r0]
   2e088:	add	r0, r0, #1472	; 0x5c0
   2e08c:	ldr	r1, [fp, #-4]
   2e090:	str	r0, [r1, #8]
   2e094:	ldr	r0, [fp, #-4]
   2e098:	ldr	r0, [r0, #8]
   2e09c:	ldr	r1, [fp, #-4]
   2e0a0:	str	r0, [r1, #16]
   2e0a4:	ldr	r0, [fp, #-4]
   2e0a8:	movw	r1, #1472	; 0x5c0
   2e0ac:	str	r1, [r0, #12]
   2e0b0:	ldr	r0, [fp, #-4]
   2e0b4:	str	r1, [r0, #20]
   2e0b8:	ldr	r0, [fp, #-4]
   2e0bc:	ldr	r0, [r0, #12]
   2e0c0:	movw	r1, #0
   2e0c4:	sub	r0, r1, r0
   2e0c8:	ldr	r1, [fp, #-4]
   2e0cc:	ldr	r1, [r1]
   2e0d0:	str	r0, [r1, #2952]	; 0xb88
   2e0d4:	ldr	r0, [fp, #-4]
   2e0d8:	ldr	r0, [r0, #32]
   2e0dc:	cmp	r0, #0
   2e0e0:	bne	2e0f4 <flatcc_emitter_reset@@Base+0xb8>
   2e0e4:	ldr	r0, [fp, #-4]
   2e0e8:	ldr	r0, [r0, #24]
   2e0ec:	ldr	r1, [fp, #-4]
   2e0f0:	str	r0, [r1, #32]
   2e0f4:	ldr	r0, [fp, #-4]
   2e0f8:	ldr	r1, [r0, #24]
   2e0fc:	ldr	r0, [r0, #32]
   2e100:	add	r0, r0, r0, lsl #1
   2e104:	lsr	r0, r0, #2
   2e108:	lsr	r1, r1, #2
   2e10c:	add	r0, r0, r1
   2e110:	ldr	r1, [fp, #-4]
   2e114:	str	r0, [r1, #32]
   2e118:	ldr	r0, [fp, #-4]
   2e11c:	movw	r1, #0
   2e120:	str	r1, [r0, #24]
   2e124:	ldr	r0, [fp, #-4]
   2e128:	ldr	r0, [r0, #32]
   2e12c:	lsl	r0, r0, #1
   2e130:	ldr	r1, [fp, #-4]
   2e134:	ldr	r1, [r1, #28]
   2e138:	cmp	r0, r1
   2e13c:	movw	r0, #0
   2e140:	str	r0, [sp, #4]
   2e144:	bcs	2e16c <flatcc_emitter_reset@@Base+0x130>
   2e148:	ldr	r0, [fp, #-4]
   2e14c:	ldr	r0, [r0, #4]
   2e150:	ldr	r0, [r0, #2944]	; 0xb80
   2e154:	ldr	r1, [fp, #-4]
   2e158:	ldr	r1, [r1]
   2e15c:	cmp	r0, r1
   2e160:	movw	r0, #0
   2e164:	movne	r0, #1
   2e168:	str	r0, [sp, #4]
   2e16c:	ldr	r0, [sp, #4]
   2e170:	tst	r0, #1
   2e174:	beq	2e1cc <flatcc_emitter_reset@@Base+0x190>
   2e178:	ldr	r0, [fp, #-4]
   2e17c:	ldr	r0, [r0, #4]
   2e180:	ldr	r0, [r0, #2944]	; 0xb80
   2e184:	str	r0, [sp, #8]
   2e188:	ldr	r0, [sp, #8]
   2e18c:	ldr	r0, [r0, #2944]	; 0xb80
   2e190:	ldr	r1, [fp, #-4]
   2e194:	ldr	r1, [r1, #4]
   2e198:	str	r0, [r1, #2944]	; 0xb80
   2e19c:	ldr	r0, [fp, #-4]
   2e1a0:	ldr	r0, [r0, #4]
   2e1a4:	ldr	r1, [sp, #8]
   2e1a8:	ldr	r1, [r1, #2944]	; 0xb80
   2e1ac:	str	r0, [r1, #2948]	; 0xb84
   2e1b0:	ldr	r0, [sp, #8]
   2e1b4:	bl	12da8 <free@plt>
   2e1b8:	ldr	r0, [fp, #-4]
   2e1bc:	ldr	r1, [r0, #28]
   2e1c0:	sub	r1, r1, #2944	; 0xb80
   2e1c4:	str	r1, [r0, #28]
   2e1c8:	b	2e124 <flatcc_emitter_reset@@Base+0xe8>
   2e1cc:	mov	sp, fp
   2e1d0:	pop	{fp, pc}

0002e1d4 <flatcc_emitter_clear@@Base>:
   2e1d4:	push	{fp, lr}
   2e1d8:	mov	fp, sp
   2e1dc:	sub	sp, sp, #8
   2e1e0:	str	r0, [sp, #4]
   2e1e4:	ldr	r0, [sp, #4]
   2e1e8:	ldr	r0, [r0]
   2e1ec:	str	r0, [sp]
   2e1f0:	ldr	r0, [sp]
   2e1f4:	movw	r1, #0
   2e1f8:	cmp	r0, r1
   2e1fc:	bne	2e204 <flatcc_emitter_clear@@Base+0x30>
   2e200:	b	2e260 <flatcc_emitter_clear@@Base+0x8c>
   2e204:	ldr	r0, [sp]
   2e208:	ldr	r0, [r0, #2948]	; 0xb84
   2e20c:	movw	r1, #0
   2e210:	str	r1, [r0, #2944]	; 0xb80
   2e214:	ldr	r0, [sp]
   2e218:	ldr	r0, [r0, #2944]	; 0xb80
   2e21c:	movw	r1, #0
   2e220:	cmp	r0, r1
   2e224:	beq	2e244 <flatcc_emitter_clear@@Base+0x70>
   2e228:	ldr	r0, [sp]
   2e22c:	ldr	r0, [r0, #2944]	; 0xb80
   2e230:	str	r0, [sp]
   2e234:	ldr	r0, [sp]
   2e238:	ldr	r0, [r0, #2948]	; 0xb84
   2e23c:	bl	12da8 <free@plt>
   2e240:	b	2e214 <flatcc_emitter_clear@@Base+0x40>
   2e244:	ldr	r0, [sp]
   2e248:	bl	12da8 <free@plt>
   2e24c:	ldr	r0, [sp, #4]
   2e250:	movw	r1, #0
   2e254:	and	r1, r1, #255	; 0xff
   2e258:	movw	r2, #36	; 0x24
   2e25c:	bl	12e2c <memset@plt>
   2e260:	mov	sp, fp
   2e264:	pop	{fp, pc}

0002e268 <flatcc_emitter@@Base>:
   2e268:	push	{fp, lr}
   2e26c:	mov	fp, sp
   2e270:	sub	sp, sp, #32
   2e274:	ldr	ip, [fp, #8]
   2e278:	str	r0, [fp, #-8]
   2e27c:	str	r1, [fp, #-12]
   2e280:	str	r2, [sp, #16]
   2e284:	str	r3, [sp, #12]
   2e288:	ldr	r0, [fp, #-8]
   2e28c:	str	r0, [sp, #8]
   2e290:	ldr	r0, [fp, #8]
   2e294:	ldr	r1, [sp, #8]
   2e298:	ldr	r2, [r1, #24]
   2e29c:	add	r0, r2, r0
   2e2a0:	str	r0, [r1, #24]
   2e2a4:	ldr	r0, [sp, #12]
   2e2a8:	cmp	r0, #0
   2e2ac:	bge	2e370 <flatcc_emitter@@Base+0x108>
   2e2b0:	ldr	r0, [fp, #8]
   2e2b4:	ldr	r1, [sp, #8]
   2e2b8:	ldr	r1, [r1, #12]
   2e2bc:	cmp	r0, r1
   2e2c0:	bhi	2e304 <flatcc_emitter@@Base+0x9c>
   2e2c4:	ldr	r0, [fp, #8]
   2e2c8:	ldr	r1, [sp, #8]
   2e2cc:	ldr	r2, [r1, #8]
   2e2d0:	movw	r3, #0
   2e2d4:	sub	r0, r3, r0
   2e2d8:	add	r0, r2, r0
   2e2dc:	str	r0, [r1, #8]
   2e2e0:	ldr	r0, [fp, #8]
   2e2e4:	ldr	r1, [sp, #8]
   2e2e8:	ldr	r2, [r1, #12]
   2e2ec:	sub	r0, r2, r0
   2e2f0:	str	r0, [r1, #12]
   2e2f4:	ldr	r0, [sp, #8]
   2e2f8:	ldr	r0, [r0, #8]
   2e2fc:	str	r0, [sp, #4]
   2e300:	b	2e424 <flatcc_emitter@@Base+0x1bc>
   2e304:	ldr	r0, [sp, #16]
   2e308:	ldr	r1, [fp, #-12]
   2e30c:	add	r0, r1, r0, lsl #3
   2e310:	str	r0, [fp, #-12]
   2e314:	ldr	r0, [sp, #16]
   2e318:	mvn	r1, #0
   2e31c:	add	r1, r0, r1
   2e320:	str	r1, [sp, #16]
   2e324:	cmp	r0, #0
   2e328:	beq	2e36c <flatcc_emitter@@Base+0x104>
   2e32c:	ldr	r0, [fp, #-12]
   2e330:	mvn	r1, #7
   2e334:	add	r0, r0, r1
   2e338:	str	r0, [fp, #-12]
   2e33c:	ldr	r0, [sp, #8]
   2e340:	ldr	r1, [fp, #-12]
   2e344:	ldr	r1, [r1]
   2e348:	ldr	r2, [fp, #-12]
   2e34c:	ldr	r2, [r2, #4]
   2e350:	bl	2e490 <flatcc_emitter@@Base+0x228>
   2e354:	cmp	r0, #0
   2e358:	beq	2e368 <flatcc_emitter@@Base+0x100>
   2e35c:	mvn	r0, #0
   2e360:	str	r0, [fp, #-4]
   2e364:	b	2e484 <flatcc_emitter@@Base+0x21c>
   2e368:	b	2e314 <flatcc_emitter@@Base+0xac>
   2e36c:	b	2e418 <flatcc_emitter@@Base+0x1b0>
   2e370:	ldr	r0, [fp, #8]
   2e374:	ldr	r1, [sp, #8]
   2e378:	ldr	r1, [r1, #20]
   2e37c:	cmp	r0, r1
   2e380:	bhi	2e3bc <flatcc_emitter@@Base+0x154>
   2e384:	ldr	r0, [sp, #8]
   2e388:	ldr	r0, [r0, #16]
   2e38c:	str	r0, [sp, #4]
   2e390:	ldr	r0, [fp, #8]
   2e394:	ldr	r1, [sp, #8]
   2e398:	ldr	r2, [r1, #16]
   2e39c:	add	r0, r2, r0
   2e3a0:	str	r0, [r1, #16]
   2e3a4:	ldr	r0, [fp, #8]
   2e3a8:	ldr	r1, [sp, #8]
   2e3ac:	ldr	r2, [r1, #20]
   2e3b0:	sub	r0, r2, r0
   2e3b4:	str	r0, [r1, #20]
   2e3b8:	b	2e424 <flatcc_emitter@@Base+0x1bc>
   2e3bc:	b	2e3c0 <flatcc_emitter@@Base+0x158>
   2e3c0:	ldr	r0, [sp, #16]
   2e3c4:	mvn	r1, #0
   2e3c8:	add	r1, r0, r1
   2e3cc:	str	r1, [sp, #16]
   2e3d0:	cmp	r0, #0
   2e3d4:	beq	2e414 <flatcc_emitter@@Base+0x1ac>
   2e3d8:	ldr	r0, [sp, #8]
   2e3dc:	ldr	r1, [fp, #-12]
   2e3e0:	ldr	r1, [r1]
   2e3e4:	ldr	r2, [fp, #-12]
   2e3e8:	ldr	r2, [r2, #4]
   2e3ec:	bl	2e59c <flatcc_emitter@@Base+0x334>
   2e3f0:	cmp	r0, #0
   2e3f4:	beq	2e404 <flatcc_emitter@@Base+0x19c>
   2e3f8:	mvn	r0, #0
   2e3fc:	str	r0, [fp, #-4]
   2e400:	b	2e484 <flatcc_emitter@@Base+0x21c>
   2e404:	ldr	r0, [fp, #-12]
   2e408:	add	r0, r0, #8
   2e40c:	str	r0, [fp, #-12]
   2e410:	b	2e3c0 <flatcc_emitter@@Base+0x158>
   2e414:	b	2e418 <flatcc_emitter@@Base+0x1b0>
   2e418:	movw	r0, #0
   2e41c:	str	r0, [fp, #-4]
   2e420:	b	2e484 <flatcc_emitter@@Base+0x21c>
   2e424:	b	2e428 <flatcc_emitter@@Base+0x1c0>
   2e428:	ldr	r0, [sp, #16]
   2e42c:	mvn	r1, #0
   2e430:	add	r1, r0, r1
   2e434:	str	r1, [sp, #16]
   2e438:	cmp	r0, #0
   2e43c:	beq	2e47c <flatcc_emitter@@Base+0x214>
   2e440:	ldr	r0, [sp, #4]
   2e444:	ldr	r1, [fp, #-12]
   2e448:	ldr	r1, [r1]
   2e44c:	ldr	r2, [fp, #-12]
   2e450:	ldr	r2, [r2, #4]
   2e454:	bl	12db4 <memcpy@plt>
   2e458:	ldr	r0, [fp, #-12]
   2e45c:	ldr	r0, [r0, #4]
   2e460:	ldr	r1, [sp, #4]
   2e464:	add	r0, r1, r0
   2e468:	str	r0, [sp, #4]
   2e46c:	ldr	r0, [fp, #-12]
   2e470:	add	r0, r0, #8
   2e474:	str	r0, [fp, #-12]
   2e478:	b	2e428 <flatcc_emitter@@Base+0x1c0>
   2e47c:	movw	r0, #0
   2e480:	str	r0, [fp, #-4]
   2e484:	ldr	r0, [fp, #-4]
   2e488:	mov	sp, fp
   2e48c:	pop	{fp, pc}
   2e490:	push	{fp, lr}
   2e494:	mov	fp, sp
   2e498:	sub	sp, sp, #24
   2e49c:	str	r0, [fp, #-8]
   2e4a0:	str	r1, [sp, #12]
   2e4a4:	str	r2, [sp, #8]
   2e4a8:	ldr	r0, [sp, #8]
   2e4ac:	ldr	r1, [sp, #12]
   2e4b0:	add	r0, r1, r0
   2e4b4:	str	r0, [sp, #12]
   2e4b8:	ldr	r0, [sp, #8]
   2e4bc:	cmp	r0, #0
   2e4c0:	beq	2e588 <flatcc_emitter@@Base+0x320>
   2e4c4:	ldr	r0, [sp, #8]
   2e4c8:	str	r0, [sp, #4]
   2e4cc:	ldr	r0, [sp, #4]
   2e4d0:	ldr	r1, [fp, #-8]
   2e4d4:	ldr	r1, [r1, #12]
   2e4d8:	cmp	r0, r1
   2e4dc:	bls	2e51c <flatcc_emitter@@Base+0x2b4>
   2e4e0:	ldr	r0, [fp, #-8]
   2e4e4:	ldr	r0, [r0, #12]
   2e4e8:	str	r0, [sp, #4]
   2e4ec:	ldr	r0, [sp, #4]
   2e4f0:	cmp	r0, #0
   2e4f4:	bne	2e518 <flatcc_emitter@@Base+0x2b0>
   2e4f8:	ldr	r0, [fp, #-8]
   2e4fc:	bl	2e7d8 <flatcc_emitter_copy_buffer@@Base+0x14c>
   2e500:	cmp	r0, #0
   2e504:	beq	2e514 <flatcc_emitter@@Base+0x2ac>
   2e508:	mvn	r0, #0
   2e50c:	str	r0, [fp, #-4]
   2e510:	b	2e590 <flatcc_emitter@@Base+0x328>
   2e514:	b	2e4b8 <flatcc_emitter@@Base+0x250>
   2e518:	b	2e51c <flatcc_emitter@@Base+0x2b4>
   2e51c:	ldr	r0, [sp, #4]
   2e520:	ldr	r1, [fp, #-8]
   2e524:	ldr	r2, [r1, #8]
   2e528:	movw	r3, #0
   2e52c:	sub	r0, r3, r0
   2e530:	add	r0, r2, r0
   2e534:	str	r0, [r1, #8]
   2e538:	ldr	r0, [sp, #4]
   2e53c:	ldr	r1, [fp, #-8]
   2e540:	ldr	r2, [r1, #12]
   2e544:	sub	r0, r2, r0
   2e548:	str	r0, [r1, #12]
   2e54c:	ldr	r0, [sp, #4]
   2e550:	ldr	r1, [sp, #12]
   2e554:	sub	r0, r3, r0
   2e558:	add	r0, r1, r0
   2e55c:	str	r0, [sp, #12]
   2e560:	ldr	r0, [sp, #4]
   2e564:	ldr	r1, [sp, #8]
   2e568:	sub	r0, r1, r0
   2e56c:	str	r0, [sp, #8]
   2e570:	ldr	r0, [fp, #-8]
   2e574:	ldr	r0, [r0, #8]
   2e578:	ldr	r1, [sp, #12]
   2e57c:	ldr	r2, [sp, #4]
   2e580:	bl	12db4 <memcpy@plt>
   2e584:	b	2e4b8 <flatcc_emitter@@Base+0x250>
   2e588:	movw	r0, #0
   2e58c:	str	r0, [fp, #-4]
   2e590:	ldr	r0, [fp, #-4]
   2e594:	mov	sp, fp
   2e598:	pop	{fp, pc}
   2e59c:	push	{fp, lr}
   2e5a0:	mov	fp, sp
   2e5a4:	sub	sp, sp, #24
   2e5a8:	str	r0, [fp, #-8]
   2e5ac:	str	r1, [sp, #12]
   2e5b0:	str	r2, [sp, #8]
   2e5b4:	ldr	r0, [sp, #8]
   2e5b8:	cmp	r0, #0
   2e5bc:	beq	2e678 <flatcc_emitter@@Base+0x410>
   2e5c0:	ldr	r0, [sp, #8]
   2e5c4:	str	r0, [sp, #4]
   2e5c8:	ldr	r0, [sp, #4]
   2e5cc:	ldr	r1, [fp, #-8]
   2e5d0:	ldr	r1, [r1, #20]
   2e5d4:	cmp	r0, r1
   2e5d8:	bls	2e618 <flatcc_emitter@@Base+0x3b0>
   2e5dc:	ldr	r0, [fp, #-8]
   2e5e0:	ldr	r0, [r0, #20]
   2e5e4:	str	r0, [sp, #4]
   2e5e8:	ldr	r0, [sp, #4]
   2e5ec:	cmp	r0, #0
   2e5f0:	bne	2e614 <flatcc_emitter@@Base+0x3ac>
   2e5f4:	ldr	r0, [fp, #-8]
   2e5f8:	bl	2e9d8 <flatcc_emitter_copy_buffer@@Base+0x34c>
   2e5fc:	cmp	r0, #0
   2e600:	beq	2e610 <flatcc_emitter@@Base+0x3a8>
   2e604:	mvn	r0, #0
   2e608:	str	r0, [fp, #-4]
   2e60c:	b	2e680 <flatcc_emitter@@Base+0x418>
   2e610:	b	2e5b4 <flatcc_emitter@@Base+0x34c>
   2e614:	b	2e618 <flatcc_emitter@@Base+0x3b0>
   2e618:	ldr	r0, [fp, #-8]
   2e61c:	ldr	r0, [r0, #16]
   2e620:	ldr	r1, [sp, #12]
   2e624:	ldr	r2, [sp, #4]
   2e628:	bl	12db4 <memcpy@plt>
   2e62c:	ldr	r0, [sp, #4]
   2e630:	ldr	r1, [sp, #8]
   2e634:	sub	r0, r1, r0
   2e638:	str	r0, [sp, #8]
   2e63c:	ldr	r0, [sp, #4]
   2e640:	ldr	r1, [sp, #12]
   2e644:	add	r0, r1, r0
   2e648:	str	r0, [sp, #12]
   2e64c:	ldr	r0, [sp, #4]
   2e650:	ldr	r1, [fp, #-8]
   2e654:	ldr	r2, [r1, #16]
   2e658:	add	r0, r2, r0
   2e65c:	str	r0, [r1, #16]
   2e660:	ldr	r0, [sp, #4]
   2e664:	ldr	r1, [fp, #-8]
   2e668:	ldr	r2, [r1, #20]
   2e66c:	sub	r0, r2, r0
   2e670:	str	r0, [r1, #20]
   2e674:	b	2e5b4 <flatcc_emitter@@Base+0x34c>
   2e678:	movw	r0, #0
   2e67c:	str	r0, [fp, #-4]
   2e680:	ldr	r0, [fp, #-4]
   2e684:	mov	sp, fp
   2e688:	pop	{fp, pc}

0002e68c <flatcc_emitter_copy_buffer@@Base>:
   2e68c:	push	{fp, lr}
   2e690:	mov	fp, sp
   2e694:	sub	sp, sp, #24
   2e698:	str	r0, [fp, #-8]
   2e69c:	str	r1, [sp, #12]
   2e6a0:	str	r2, [sp, #8]
   2e6a4:	ldr	r0, [sp, #8]
   2e6a8:	ldr	r1, [fp, #-8]
   2e6ac:	ldr	r1, [r1, #24]
   2e6b0:	cmp	r0, r1
   2e6b4:	bcs	2e6c4 <flatcc_emitter_copy_buffer@@Base+0x38>
   2e6b8:	movw	r0, #0
   2e6bc:	str	r0, [fp, #-4]
   2e6c0:	b	2e7cc <flatcc_emitter_copy_buffer@@Base+0x140>
   2e6c4:	ldr	r0, [fp, #-8]
   2e6c8:	ldr	r0, [r0]
   2e6cc:	movw	r1, #0
   2e6d0:	cmp	r0, r1
   2e6d4:	bne	2e6e4 <flatcc_emitter_copy_buffer@@Base+0x58>
   2e6d8:	movw	r0, #0
   2e6dc:	str	r0, [fp, #-4]
   2e6e0:	b	2e7cc <flatcc_emitter_copy_buffer@@Base+0x140>
   2e6e4:	ldr	r0, [fp, #-8]
   2e6e8:	ldr	r0, [r0]
   2e6ec:	ldr	r1, [fp, #-8]
   2e6f0:	ldr	r1, [r1, #4]
   2e6f4:	cmp	r0, r1
   2e6f8:	bne	2e720 <flatcc_emitter_copy_buffer@@Base+0x94>
   2e6fc:	ldr	r0, [sp, #12]
   2e700:	ldr	r1, [fp, #-8]
   2e704:	ldr	r1, [r1, #8]
   2e708:	ldr	r2, [fp, #-8]
   2e70c:	ldr	r2, [r2, #24]
   2e710:	bl	12db4 <memcpy@plt>
   2e714:	ldr	r0, [sp, #12]
   2e718:	str	r0, [fp, #-4]
   2e71c:	b	2e7cc <flatcc_emitter_copy_buffer@@Base+0x140>
   2e720:	ldr	r0, [fp, #-8]
   2e724:	ldr	r0, [r0, #12]
   2e728:	movw	r1, #2944	; 0xb80
   2e72c:	sub	r0, r1, r0
   2e730:	str	r0, [sp]
   2e734:	ldr	r0, [sp, #12]
   2e738:	ldr	r1, [fp, #-8]
   2e73c:	ldr	r1, [r1, #8]
   2e740:	ldr	r2, [sp]
   2e744:	bl	12db4 <memcpy@plt>
   2e748:	ldr	r0, [sp, #12]
   2e74c:	ldr	r1, [sp]
   2e750:	add	r0, r0, r1
   2e754:	str	r0, [sp, #12]
   2e758:	ldr	r0, [fp, #-8]
   2e75c:	ldr	r0, [r0]
   2e760:	ldr	r0, [r0, #2944]	; 0xb80
   2e764:	str	r0, [sp, #4]
   2e768:	ldr	r0, [sp, #4]
   2e76c:	ldr	r1, [fp, #-8]
   2e770:	ldr	r1, [r1, #4]
   2e774:	cmp	r0, r1
   2e778:	beq	2e7a8 <flatcc_emitter_copy_buffer@@Base+0x11c>
   2e77c:	ldr	r0, [sp, #12]
   2e780:	ldr	r1, [sp, #4]
   2e784:	movw	r2, #2944	; 0xb80
   2e788:	bl	12db4 <memcpy@plt>
   2e78c:	ldr	r0, [sp, #12]
   2e790:	add	r0, r0, #2944	; 0xb80
   2e794:	str	r0, [sp, #12]
   2e798:	ldr	r0, [sp, #4]
   2e79c:	ldr	r0, [r0, #2944]	; 0xb80
   2e7a0:	str	r0, [sp, #4]
   2e7a4:	b	2e768 <flatcc_emitter_copy_buffer@@Base+0xdc>
   2e7a8:	ldr	r0, [sp, #12]
   2e7ac:	ldr	r1, [sp, #4]
   2e7b0:	ldr	r2, [fp, #-8]
   2e7b4:	ldr	r2, [r2, #20]
   2e7b8:	movw	r3, #2944	; 0xb80
   2e7bc:	sub	r2, r3, r2
   2e7c0:	bl	12db4 <memcpy@plt>
   2e7c4:	ldr	r0, [sp, #12]
   2e7c8:	str	r0, [fp, #-4]
   2e7cc:	ldr	r0, [fp, #-4]
   2e7d0:	mov	sp, fp
   2e7d4:	pop	{fp, pc}
   2e7d8:	push	{fp, lr}
   2e7dc:	mov	fp, sp
   2e7e0:	sub	sp, sp, #16
   2e7e4:	str	r0, [sp, #8]
   2e7e8:	movw	r0, #0
   2e7ec:	str	r0, [sp, #4]
   2e7f0:	ldr	r1, [sp, #8]
   2e7f4:	ldr	r1, [r1]
   2e7f8:	cmp	r1, r0
   2e7fc:	beq	2e854 <flatcc_emitter_copy_buffer@@Base+0x1c8>
   2e800:	ldr	r0, [sp, #8]
   2e804:	ldr	r0, [r0]
   2e808:	ldr	r0, [r0, #2948]	; 0xb84
   2e80c:	ldr	r1, [sp, #8]
   2e810:	ldr	r1, [r1, #4]
   2e814:	cmp	r0, r1
   2e818:	beq	2e854 <flatcc_emitter_copy_buffer@@Base+0x1c8>
   2e81c:	ldr	r0, [sp, #8]
   2e820:	ldr	r0, [r0]
   2e824:	ldr	r0, [r0, #2952]	; 0xb88
   2e828:	sub	r0, r0, #2944	; 0xb80
   2e82c:	ldr	r1, [sp, #8]
   2e830:	ldr	r1, [r1]
   2e834:	ldr	r1, [r1, #2948]	; 0xb84
   2e838:	str	r0, [r1, #2952]	; 0xb88
   2e83c:	ldr	r0, [sp, #8]
   2e840:	ldr	r0, [r0]
   2e844:	ldr	r0, [r0, #2948]	; 0xb84
   2e848:	ldr	r1, [sp, #8]
   2e84c:	str	r0, [r1]
   2e850:	b	2e984 <flatcc_emitter_copy_buffer@@Base+0x2f8>
   2e854:	movw	r0, #2956	; 0xb8c
   2e858:	bl	12de4 <malloc@plt>
   2e85c:	str	r0, [sp, #4]
   2e860:	movw	r1, #0
   2e864:	cmp	r0, r1
   2e868:	bne	2e878 <flatcc_emitter_copy_buffer@@Base+0x1ec>
   2e86c:	mvn	r0, #0
   2e870:	str	r0, [fp, #-4]
   2e874:	b	2e9cc <flatcc_emitter_copy_buffer@@Base+0x340>
   2e878:	ldr	r0, [sp, #8]
   2e87c:	ldr	r1, [r0, #28]
   2e880:	add	r1, r1, #2944	; 0xb80
   2e884:	str	r1, [r0, #28]
   2e888:	ldr	r0, [sp, #8]
   2e88c:	ldr	r0, [r0]
   2e890:	movw	r1, #0
   2e894:	cmp	r0, r1
   2e898:	beq	2e8ec <flatcc_emitter_copy_buffer@@Base+0x260>
   2e89c:	ldr	r0, [sp, #8]
   2e8a0:	ldr	r0, [r0, #4]
   2e8a4:	ldr	r1, [sp, #4]
   2e8a8:	str	r0, [r1, #2948]	; 0xb84
   2e8ac:	ldr	r0, [sp, #8]
   2e8b0:	ldr	r0, [r0]
   2e8b4:	ldr	r1, [sp, #4]
   2e8b8:	str	r0, [r1, #2944]	; 0xb80
   2e8bc:	ldr	r0, [sp, #4]
   2e8c0:	ldr	r1, [sp, #8]
   2e8c4:	ldr	r1, [r1]
   2e8c8:	str	r0, [r1, #2948]	; 0xb84
   2e8cc:	ldr	r0, [sp, #4]
   2e8d0:	ldr	r1, [sp, #8]
   2e8d4:	ldr	r1, [r1, #4]
   2e8d8:	str	r0, [r1, #2944]	; 0xb80
   2e8dc:	ldr	r0, [sp, #4]
   2e8e0:	ldr	r1, [sp, #8]
   2e8e4:	str	r0, [r1]
   2e8e8:	b	2e984 <flatcc_emitter_copy_buffer@@Base+0x2f8>
   2e8ec:	ldr	r0, [sp, #4]
   2e8f0:	ldr	r1, [sp, #8]
   2e8f4:	str	r0, [r1]
   2e8f8:	ldr	r0, [sp, #4]
   2e8fc:	ldr	r1, [sp, #8]
   2e900:	str	r0, [r1, #4]
   2e904:	ldr	r0, [sp, #4]
   2e908:	ldr	r1, [sp, #4]
   2e90c:	str	r0, [r1, #2944]	; 0xb80
   2e910:	ldr	r0, [sp, #4]
   2e914:	ldr	r1, [sp, #4]
   2e918:	str	r0, [r1, #2948]	; 0xb84
   2e91c:	ldr	r0, [sp, #8]
   2e920:	ldr	r0, [r0]
   2e924:	add	r0, r0, #1472	; 0x5c0
   2e928:	ldr	r1, [sp, #8]
   2e92c:	str	r0, [r1, #8]
   2e930:	ldr	r0, [sp, #8]
   2e934:	ldr	r0, [r0, #8]
   2e938:	ldr	r1, [sp, #8]
   2e93c:	str	r0, [r1, #16]
   2e940:	ldr	r0, [sp, #8]
   2e944:	movw	r1, #1472	; 0x5c0
   2e948:	str	r1, [r0, #12]
   2e94c:	ldr	r0, [sp, #8]
   2e950:	ldr	r0, [r0, #12]
   2e954:	movw	r1, #2944	; 0xb80
   2e958:	sub	r0, r1, r0
   2e95c:	ldr	r1, [sp, #8]
   2e960:	str	r0, [r1, #20]
   2e964:	ldr	r0, [sp, #8]
   2e968:	ldr	r0, [r0, #12]
   2e96c:	movw	r1, #0
   2e970:	sub	r0, r1, r0
   2e974:	ldr	r2, [sp, #4]
   2e978:	str	r0, [r2, #2952]	; 0xb88
   2e97c:	str	r1, [fp, #-4]
   2e980:	b	2e9cc <flatcc_emitter_copy_buffer@@Base+0x340>
   2e984:	ldr	r0, [sp, #8]
   2e988:	ldr	r0, [r0]
   2e98c:	add	r0, r0, #2944	; 0xb80
   2e990:	ldr	r1, [sp, #8]
   2e994:	str	r0, [r1, #8]
   2e998:	ldr	r0, [sp, #8]
   2e99c:	movw	r1, #2944	; 0xb80
   2e9a0:	str	r1, [r0, #12]
   2e9a4:	ldr	r0, [sp, #8]
   2e9a8:	ldr	r0, [r0]
   2e9ac:	ldr	r0, [r0, #2944]	; 0xb80
   2e9b0:	ldr	r0, [r0, #2952]	; 0xb88
   2e9b4:	sub	r0, r0, #2944	; 0xb80
   2e9b8:	ldr	r1, [sp, #8]
   2e9bc:	ldr	r1, [r1]
   2e9c0:	str	r0, [r1, #2952]	; 0xb88
   2e9c4:	movw	r0, #0
   2e9c8:	str	r0, [fp, #-4]
   2e9cc:	ldr	r0, [fp, #-4]
   2e9d0:	mov	sp, fp
   2e9d4:	pop	{fp, pc}
   2e9d8:	push	{fp, lr}
   2e9dc:	mov	fp, sp
   2e9e0:	sub	sp, sp, #16
   2e9e4:	str	r0, [sp, #8]
   2e9e8:	movw	r0, #0
   2e9ec:	str	r0, [sp, #4]
   2e9f0:	ldr	r1, [sp, #8]
   2e9f4:	ldr	r1, [r1, #4]
   2e9f8:	cmp	r1, r0
   2e9fc:	beq	2ea34 <flatcc_emitter_copy_buffer@@Base+0x3a8>
   2ea00:	ldr	r0, [sp, #8]
   2ea04:	ldr	r0, [r0, #4]
   2ea08:	ldr	r0, [r0, #2944]	; 0xb80
   2ea0c:	ldr	r1, [sp, #8]
   2ea10:	ldr	r1, [r1]
   2ea14:	cmp	r0, r1
   2ea18:	beq	2ea34 <flatcc_emitter_copy_buffer@@Base+0x3a8>
   2ea1c:	ldr	r0, [sp, #8]
   2ea20:	ldr	r0, [r0, #4]
   2ea24:	ldr	r0, [r0, #2944]	; 0xb80
   2ea28:	ldr	r1, [sp, #8]
   2ea2c:	str	r0, [r1, #4]
   2ea30:	b	2eb64 <flatcc_emitter_copy_buffer@@Base+0x4d8>
   2ea34:	movw	r0, #2956	; 0xb8c
   2ea38:	bl	12de4 <malloc@plt>
   2ea3c:	str	r0, [sp, #4]
   2ea40:	movw	r1, #0
   2ea44:	cmp	r0, r1
   2ea48:	bne	2ea58 <flatcc_emitter_copy_buffer@@Base+0x3cc>
   2ea4c:	mvn	r0, #0
   2ea50:	str	r0, [fp, #-4]
   2ea54:	b	2eba8 <flatcc_emitter_copy_buffer@@Base+0x51c>
   2ea58:	ldr	r0, [sp, #8]
   2ea5c:	ldr	r1, [r0, #28]
   2ea60:	add	r1, r1, #2944	; 0xb80
   2ea64:	str	r1, [r0, #28]
   2ea68:	ldr	r0, [sp, #8]
   2ea6c:	ldr	r0, [r0, #4]
   2ea70:	movw	r1, #0
   2ea74:	cmp	r0, r1
   2ea78:	beq	2eacc <flatcc_emitter_copy_buffer@@Base+0x440>
   2ea7c:	ldr	r0, [sp, #8]
   2ea80:	ldr	r0, [r0, #4]
   2ea84:	ldr	r1, [sp, #4]
   2ea88:	str	r0, [r1, #2948]	; 0xb84
   2ea8c:	ldr	r0, [sp, #8]
   2ea90:	ldr	r0, [r0]
   2ea94:	ldr	r1, [sp, #4]
   2ea98:	str	r0, [r1, #2944]	; 0xb80
   2ea9c:	ldr	r0, [sp, #4]
   2eaa0:	ldr	r1, [sp, #8]
   2eaa4:	ldr	r1, [r1]
   2eaa8:	str	r0, [r1, #2948]	; 0xb84
   2eaac:	ldr	r0, [sp, #4]
   2eab0:	ldr	r1, [sp, #8]
   2eab4:	ldr	r1, [r1, #4]
   2eab8:	str	r0, [r1, #2944]	; 0xb80
   2eabc:	ldr	r0, [sp, #4]
   2eac0:	ldr	r1, [sp, #8]
   2eac4:	str	r0, [r1, #4]
   2eac8:	b	2eb64 <flatcc_emitter_copy_buffer@@Base+0x4d8>
   2eacc:	ldr	r0, [sp, #4]
   2ead0:	ldr	r1, [sp, #8]
   2ead4:	str	r0, [r1]
   2ead8:	ldr	r0, [sp, #4]
   2eadc:	ldr	r1, [sp, #8]
   2eae0:	str	r0, [r1, #4]
   2eae4:	ldr	r0, [sp, #4]
   2eae8:	ldr	r1, [sp, #4]
   2eaec:	str	r0, [r1, #2944]	; 0xb80
   2eaf0:	ldr	r0, [sp, #4]
   2eaf4:	ldr	r1, [sp, #4]
   2eaf8:	str	r0, [r1, #2948]	; 0xb84
   2eafc:	ldr	r0, [sp, #8]
   2eb00:	ldr	r0, [r0]
   2eb04:	add	r0, r0, #1472	; 0x5c0
   2eb08:	ldr	r1, [sp, #8]
   2eb0c:	str	r0, [r1, #8]
   2eb10:	ldr	r0, [sp, #8]
   2eb14:	ldr	r0, [r0, #8]
   2eb18:	ldr	r1, [sp, #8]
   2eb1c:	str	r0, [r1, #16]
   2eb20:	ldr	r0, [sp, #8]
   2eb24:	movw	r1, #1472	; 0x5c0
   2eb28:	str	r1, [r0, #12]
   2eb2c:	ldr	r0, [sp, #8]
   2eb30:	ldr	r0, [r0, #12]
   2eb34:	movw	r1, #2944	; 0xb80
   2eb38:	sub	r0, r1, r0
   2eb3c:	ldr	r1, [sp, #8]
   2eb40:	str	r0, [r1, #20]
   2eb44:	ldr	r0, [sp, #8]
   2eb48:	ldr	r0, [r0, #12]
   2eb4c:	movw	r1, #0
   2eb50:	sub	r0, r1, r0
   2eb54:	ldr	r2, [sp, #4]
   2eb58:	str	r0, [r2, #2952]	; 0xb88
   2eb5c:	str	r1, [fp, #-4]
   2eb60:	b	2eba8 <flatcc_emitter_copy_buffer@@Base+0x51c>
   2eb64:	ldr	r0, [sp, #8]
   2eb68:	ldr	r0, [r0, #4]
   2eb6c:	ldr	r1, [sp, #8]
   2eb70:	str	r0, [r1, #16]
   2eb74:	ldr	r0, [sp, #8]
   2eb78:	movw	r1, #2944	; 0xb80
   2eb7c:	str	r1, [r0, #20]
   2eb80:	ldr	r0, [sp, #8]
   2eb84:	ldr	r0, [r0, #4]
   2eb88:	ldr	r0, [r0, #2948]	; 0xb84
   2eb8c:	ldr	r0, [r0, #2952]	; 0xb88
   2eb90:	add	r0, r0, #2944	; 0xb80
   2eb94:	ldr	r1, [sp, #8]
   2eb98:	ldr	r1, [r1, #4]
   2eb9c:	str	r0, [r1, #2952]	; 0xb88
   2eba0:	movw	r0, #0
   2eba4:	str	r0, [fp, #-4]
   2eba8:	ldr	r0, [fp, #-4]
   2ebac:	mov	sp, fp
   2ebb0:	pop	{fp, pc}

0002ebb4 <flatcc_verify_error_string@@Base>:
   2ebb4:	sub	sp, sp, #12
   2ebb8:	str	r0, [sp, #4]
   2ebbc:	ldr	r0, [sp, #4]
   2ebc0:	cmp	r0, #36	; 0x24
   2ebc4:	str	r0, [sp]
   2ebc8:	bhi	2eec0 <flatcc_verify_error_string@@Base+0x30c>
   2ebcc:	add	r0, pc, #8
   2ebd0:	ldr	r1, [sp]
   2ebd4:	ldr	r2, [r0, r1, lsl #2]
   2ebd8:	add	pc, r0, r2
   2ebdc:	muleq	r0, r4, r0
   2ebe0:	andeq	r0, r0, r4, lsr #1
   2ebe4:	strheq	r0, [r0], -r4
   2ebe8:	andeq	r0, r0, r4, asr #1
   2ebec:	ldrdeq	r0, [r0], -r4
   2ebf0:	andeq	r0, r0, r4, ror #1
   2ebf4:	strdeq	r0, [r0], -r4
   2ebf8:	andeq	r0, r0, r4, lsl #2
   2ebfc:	andeq	r0, r0, r4, lsl r1
   2ec00:	andeq	r0, r0, r4, lsr #2
   2ec04:	andeq	r0, r0, r4, lsr r1
   2ec08:	andeq	r0, r0, r4, asr #2
   2ec0c:	andeq	r0, r0, r4, asr r1
   2ec10:	andeq	r0, r0, r4, ror #2
   2ec14:	andeq	r0, r0, r4, ror r1
   2ec18:	andeq	r0, r0, r4, lsl #3
   2ec1c:	muleq	r0, r4, r1
   2ec20:	andeq	r0, r0, r4, lsr #3
   2ec24:			; <UNDEFINED> instruction: 0x000001b4
   2ec28:	andeq	r0, r0, r4, asr #3
   2ec2c:	ldrdeq	r0, [r0], -r4
   2ec30:	andeq	r0, r0, r4, ror #3
   2ec34:	strdeq	r0, [r0], -r4
   2ec38:	andeq	r0, r0, r4, lsl #4
   2ec3c:	andeq	r0, r0, r4, lsl r2
   2ec40:	andeq	r0, r0, r4, lsr #4
   2ec44:	andeq	r0, r0, r4, lsr r2
   2ec48:	andeq	r0, r0, r4, asr #4
   2ec4c:	andeq	r0, r0, r4, asr r2
   2ec50:	andeq	r0, r0, r4, ror #4
   2ec54:	andeq	r0, r0, r4, ror r2
   2ec58:	andeq	r0, r0, r4, lsl #5
   2ec5c:	muleq	r0, r4, r2
   2ec60:	andeq	r0, r0, r4, lsr #5
   2ec64:			; <UNDEFINED> instruction: 0x000002b4
   2ec68:	andeq	r0, r0, r4, asr #5
   2ec6c:	ldrdeq	r0, [r0], -r4
   2ec70:	ldr	r0, [pc, #752]	; 2ef68 <flatcc_verify_error_string@@Base+0x3b4>
   2ec74:	add	r0, pc, r0
   2ec78:	str	r0, [sp, #8]
   2ec7c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ec80:	ldr	r0, [pc, #732]	; 2ef64 <flatcc_verify_error_string@@Base+0x3b0>
   2ec84:	add	r0, pc, r0
   2ec88:	str	r0, [sp, #8]
   2ec8c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ec90:	ldr	r0, [pc, #712]	; 2ef60 <flatcc_verify_error_string@@Base+0x3ac>
   2ec94:	add	r0, pc, r0
   2ec98:	str	r0, [sp, #8]
   2ec9c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2eca0:	ldr	r0, [pc, #692]	; 2ef5c <flatcc_verify_error_string@@Base+0x3a8>
   2eca4:	add	r0, pc, r0
   2eca8:	str	r0, [sp, #8]
   2ecac:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ecb0:	ldr	r0, [pc, #672]	; 2ef58 <flatcc_verify_error_string@@Base+0x3a4>
   2ecb4:	add	r0, pc, r0
   2ecb8:	str	r0, [sp, #8]
   2ecbc:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ecc0:	ldr	r0, [pc, #652]	; 2ef54 <flatcc_verify_error_string@@Base+0x3a0>
   2ecc4:	add	r0, pc, r0
   2ecc8:	str	r0, [sp, #8]
   2eccc:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ecd0:	ldr	r0, [pc, #632]	; 2ef50 <flatcc_verify_error_string@@Base+0x39c>
   2ecd4:	add	r0, pc, r0
   2ecd8:	str	r0, [sp, #8]
   2ecdc:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ece0:	ldr	r0, [pc, #612]	; 2ef4c <flatcc_verify_error_string@@Base+0x398>
   2ece4:	add	r0, pc, r0
   2ece8:	str	r0, [sp, #8]
   2ecec:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ecf0:	ldr	r0, [pc, #592]	; 2ef48 <flatcc_verify_error_string@@Base+0x394>
   2ecf4:	add	r0, pc, r0
   2ecf8:	str	r0, [sp, #8]
   2ecfc:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ed00:	ldr	r0, [pc, #572]	; 2ef44 <flatcc_verify_error_string@@Base+0x390>
   2ed04:	add	r0, pc, r0
   2ed08:	str	r0, [sp, #8]
   2ed0c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ed10:	ldr	r0, [pc, #552]	; 2ef40 <flatcc_verify_error_string@@Base+0x38c>
   2ed14:	add	r0, pc, r0
   2ed18:	str	r0, [sp, #8]
   2ed1c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ed20:	ldr	r0, [pc, #532]	; 2ef3c <flatcc_verify_error_string@@Base+0x388>
   2ed24:	add	r0, pc, r0
   2ed28:	str	r0, [sp, #8]
   2ed2c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ed30:	ldr	r0, [pc, #512]	; 2ef38 <flatcc_verify_error_string@@Base+0x384>
   2ed34:	add	r0, pc, r0
   2ed38:	str	r0, [sp, #8]
   2ed3c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ed40:	ldr	r0, [pc, #492]	; 2ef34 <flatcc_verify_error_string@@Base+0x380>
   2ed44:	add	r0, pc, r0
   2ed48:	str	r0, [sp, #8]
   2ed4c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ed50:	ldr	r0, [pc, #472]	; 2ef30 <flatcc_verify_error_string@@Base+0x37c>
   2ed54:	add	r0, pc, r0
   2ed58:	str	r0, [sp, #8]
   2ed5c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ed60:	ldr	r0, [pc, #452]	; 2ef2c <flatcc_verify_error_string@@Base+0x378>
   2ed64:	add	r0, pc, r0
   2ed68:	str	r0, [sp, #8]
   2ed6c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ed70:	ldr	r0, [pc, #432]	; 2ef28 <flatcc_verify_error_string@@Base+0x374>
   2ed74:	add	r0, pc, r0
   2ed78:	str	r0, [sp, #8]
   2ed7c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ed80:	ldr	r0, [pc, #412]	; 2ef24 <flatcc_verify_error_string@@Base+0x370>
   2ed84:	add	r0, pc, r0
   2ed88:	str	r0, [sp, #8]
   2ed8c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ed90:	ldr	r0, [pc, #392]	; 2ef20 <flatcc_verify_error_string@@Base+0x36c>
   2ed94:	add	r0, pc, r0
   2ed98:	str	r0, [sp, #8]
   2ed9c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2eda0:	ldr	r0, [pc, #372]	; 2ef1c <flatcc_verify_error_string@@Base+0x368>
   2eda4:	add	r0, pc, r0
   2eda8:	str	r0, [sp, #8]
   2edac:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2edb0:	ldr	r0, [pc, #352]	; 2ef18 <flatcc_verify_error_string@@Base+0x364>
   2edb4:	add	r0, pc, r0
   2edb8:	str	r0, [sp, #8]
   2edbc:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2edc0:	ldr	r0, [pc, #332]	; 2ef14 <flatcc_verify_error_string@@Base+0x360>
   2edc4:	add	r0, pc, r0
   2edc8:	str	r0, [sp, #8]
   2edcc:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2edd0:	ldr	r0, [pc, #312]	; 2ef10 <flatcc_verify_error_string@@Base+0x35c>
   2edd4:	add	r0, pc, r0
   2edd8:	str	r0, [sp, #8]
   2eddc:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ede0:	ldr	r0, [pc, #292]	; 2ef0c <flatcc_verify_error_string@@Base+0x358>
   2ede4:	add	r0, pc, r0
   2ede8:	str	r0, [sp, #8]
   2edec:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2edf0:	ldr	r0, [pc, #272]	; 2ef08 <flatcc_verify_error_string@@Base+0x354>
   2edf4:	add	r0, pc, r0
   2edf8:	str	r0, [sp, #8]
   2edfc:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ee00:	ldr	r0, [pc, #252]	; 2ef04 <flatcc_verify_error_string@@Base+0x350>
   2ee04:	add	r0, pc, r0
   2ee08:	str	r0, [sp, #8]
   2ee0c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ee10:	ldr	r0, [pc, #232]	; 2ef00 <flatcc_verify_error_string@@Base+0x34c>
   2ee14:	add	r0, pc, r0
   2ee18:	str	r0, [sp, #8]
   2ee1c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ee20:	ldr	r0, [pc, #212]	; 2eefc <flatcc_verify_error_string@@Base+0x348>
   2ee24:	add	r0, pc, r0
   2ee28:	str	r0, [sp, #8]
   2ee2c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ee30:	ldr	r0, [pc, #192]	; 2eef8 <flatcc_verify_error_string@@Base+0x344>
   2ee34:	add	r0, pc, r0
   2ee38:	str	r0, [sp, #8]
   2ee3c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ee40:	ldr	r0, [pc, #172]	; 2eef4 <flatcc_verify_error_string@@Base+0x340>
   2ee44:	add	r0, pc, r0
   2ee48:	str	r0, [sp, #8]
   2ee4c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ee50:	ldr	r0, [pc, #152]	; 2eef0 <flatcc_verify_error_string@@Base+0x33c>
   2ee54:	add	r0, pc, r0
   2ee58:	str	r0, [sp, #8]
   2ee5c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ee60:	ldr	r0, [pc, #132]	; 2eeec <flatcc_verify_error_string@@Base+0x338>
   2ee64:	add	r0, pc, r0
   2ee68:	str	r0, [sp, #8]
   2ee6c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ee70:	ldr	r0, [pc, #112]	; 2eee8 <flatcc_verify_error_string@@Base+0x334>
   2ee74:	add	r0, pc, r0
   2ee78:	str	r0, [sp, #8]
   2ee7c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ee80:	ldr	r0, [pc, #92]	; 2eee4 <flatcc_verify_error_string@@Base+0x330>
   2ee84:	add	r0, pc, r0
   2ee88:	str	r0, [sp, #8]
   2ee8c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2ee90:	ldr	r0, [pc, #72]	; 2eee0 <flatcc_verify_error_string@@Base+0x32c>
   2ee94:	add	r0, pc, r0
   2ee98:	str	r0, [sp, #8]
   2ee9c:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2eea0:	ldr	r0, [pc, #52]	; 2eedc <flatcc_verify_error_string@@Base+0x328>
   2eea4:	add	r0, pc, r0
   2eea8:	str	r0, [sp, #8]
   2eeac:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2eeb0:	ldr	r0, [pc, #32]	; 2eed8 <flatcc_verify_error_string@@Base+0x324>
   2eeb4:	add	r0, pc, r0
   2eeb8:	str	r0, [sp, #8]
   2eebc:	b	2eecc <flatcc_verify_error_string@@Base+0x318>
   2eec0:	ldr	r0, [pc, #164]	; 2ef6c <flatcc_verify_error_string@@Base+0x3b8>
   2eec4:	add	r0, pc, r0
   2eec8:	str	r0, [sp, #8]
   2eecc:	ldr	r0, [sp, #8]
   2eed0:	add	sp, sp, #12
   2eed4:	bx	lr
   2eed8:	andeq	r8, r0, fp, ror #22
   2eedc:	andeq	r8, r0, r1, ror #22
   2eee0:	andeq	r8, r0, sp, lsr fp
   2eee4:	andeq	r8, r0, r8, lsr #22
   2eee8:	andeq	r8, r0, r1, lsl fp
   2eeec:	andeq	r8, r0, ip, lsl #22
   2eef0:	strdeq	r8, [r0], -r6
   2eef4:	ldrdeq	r8, [r0], -lr
   2eef8:	ldrdeq	r8, [r0], -r6
   2eefc:	andeq	r8, r0, fp, asr #21
   2ef00:	andeq	r8, r0, r7, asr #21
   2ef04:	andeq	r8, r0, r8, lsr #21
   2ef08:	andeq	r8, r0, pc, lsl #21
   2ef0c:	andeq	r8, r0, r6, ror sl
   2ef10:	andeq	r8, r0, r3, asr sl
   2ef14:	andeq	r8, r0, r7, lsr sl
   2ef18:	andeq	r8, r0, pc, lsr #20
   2ef1c:	andeq	r8, r0, pc, ror fp
   2ef20:	andeq	r8, r0, fp, lsr sl
   2ef24:	andeq	r8, r0, r3, lsr #20
   2ef28:	andeq	r8, r0, fp, lsl #20
   2ef2c:	strdeq	r8, [r0], -r4
   2ef30:	andeq	r8, r0, sl, ror #19
   2ef34:	andeq	r8, r0, r1, ror #19
   2ef38:	ldrdeq	r8, [r0], -r9
   2ef3c:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   2ef40:	ldrdeq	r8, [r0], -r3
   2ef44:	andeq	r8, r0, pc, asr #19
   2ef48:	andeq	r8, r0, fp, asr #19
   2ef4c:	andeq	r8, r0, r0, asr #19
   2ef50:			; <UNDEFINED> instruction: 0x000089b1
   2ef54:	muleq	r0, lr, r9
   2ef58:	muleq	r0, r7, r9
   2ef5c:	andeq	r8, r0, sp, lsl #19
   2ef60:	andeq	r8, r0, r9, lsl #19
   2ef64:	andeq	r8, r0, r1, lsl #19
   2ef68:	andeq	r8, r0, lr, lsl #19
   2ef6c:	andeq	r8, r0, r9, ror #22

0002ef70 <flatcc_verify_field@@Base>:
   2ef70:	push	{fp, lr}
   2ef74:	mov	fp, sp
   2ef78:	sub	sp, sp, #24
   2ef7c:	str	r0, [fp, #-8]
   2ef80:	strh	r1, [fp, #-10]
   2ef84:	str	r2, [sp, #8]
   2ef88:	strh	r3, [sp, #6]
   2ef8c:	ldr	r0, [fp, #-8]
   2ef90:	ldrh	r1, [fp, #-10]
   2ef94:	ldr	r3, [sp, #8]
   2ef98:	uxth	r1, r1
   2ef9c:	movw	r2, #0
   2efa0:	ldrh	ip, [sp, #6]
   2efa4:	str	ip, [sp]
   2efa8:	bl	2eff0 <flatcc_verify_field@@Base+0x80>
   2efac:	cmp	r0, #0
   2efb0:	beq	2efdc <flatcc_verify_field@@Base+0x6c>
   2efb4:	ldr	r0, [fp, #-8]
   2efb8:	ldrh	r1, [fp, #-10]
   2efbc:	ldr	r3, [sp, #8]
   2efc0:	uxth	r1, r1
   2efc4:	movw	r2, #0
   2efc8:	ldrh	ip, [sp, #6]
   2efcc:	str	ip, [sp]
   2efd0:	bl	2eff0 <flatcc_verify_field@@Base+0x80>
   2efd4:	str	r0, [fp, #-4]
   2efd8:	b	2efe4 <flatcc_verify_field@@Base+0x74>
   2efdc:	movw	r0, #0
   2efe0:	str	r0, [fp, #-4]
   2efe4:	ldr	r0, [fp, #-4]
   2efe8:	mov	sp, fp
   2efec:	pop	{fp, pc}
   2eff0:	push	{fp, lr}
   2eff4:	mov	fp, sp
   2eff8:	sub	sp, sp, #56	; 0x38
   2effc:	ldr	ip, [fp, #8]
   2f000:	str	r0, [fp, #-8]
   2f004:	strh	r1, [fp, #-10]
   2f008:	str	r2, [fp, #-16]
   2f00c:	str	r3, [fp, #-20]	; 0xffffffec
   2f010:	strh	ip, [fp, #-22]	; 0xffffffea
   2f014:	ldr	r0, [fp, #-8]
   2f018:	ldr	r0, [r0]
   2f01c:	str	r0, [sp, #16]
   2f020:	ldr	r0, [fp, #-8]
   2f024:	ldrh	r1, [fp, #-10]
   2f028:	bl	30e68 <flatcc_verify_union_field@@Base+0x290>
   2f02c:	strh	r0, [sp, #22]
   2f030:	ldrsh	r0, [sp, #22]
   2f034:	cmp	r0, #0
   2f038:	bne	2f088 <flatcc_verify_field@@Base+0x118>
   2f03c:	b	2f040 <flatcc_verify_field@@Base+0xd0>
   2f040:	ldr	r0, [fp, #-16]
   2f044:	cmp	r0, #0
   2f048:	movw	r0, #0
   2f04c:	movne	r0, #1
   2f050:	mvn	r1, #0
   2f054:	eor	r0, r0, r1
   2f058:	and	r0, r0, #1
   2f05c:	str	r0, [sp, #12]
   2f060:	ldr	r0, [sp, #12]
   2f064:	cmp	r0, #0
   2f068:	bne	2f078 <flatcc_verify_field@@Base+0x108>
   2f06c:	movw	r0, #4
   2f070:	str	r0, [fp, #-4]
   2f074:	b	2f170 <flatcc_verify_field@@Base+0x200>
   2f078:	b	2f07c <flatcc_verify_field@@Base+0x10c>
   2f07c:	movw	r0, #0
   2f080:	str	r0, [fp, #-4]
   2f084:	b	2f170 <flatcc_verify_field@@Base+0x200>
   2f088:	ldrh	r0, [sp, #22]
   2f08c:	str	r0, [sp, #28]
   2f090:	ldr	r0, [sp, #28]
   2f094:	ldr	r1, [fp, #-20]	; 0xffffffec
   2f098:	add	r0, r0, r1
   2f09c:	str	r0, [sp, #24]
   2f0a0:	ldr	r0, [sp, #24]
   2f0a4:	ldr	r1, [fp, #-8]
   2f0a8:	ldrh	r1, [r1, #20]
   2f0ac:	cmp	r0, r1
   2f0b0:	movw	r0, #0
   2f0b4:	movls	r0, #1
   2f0b8:	and	r0, r0, #1
   2f0bc:	str	r0, [sp, #8]
   2f0c0:	ldr	r0, [sp, #8]
   2f0c4:	cmp	r0, #0
   2f0c8:	bne	2f0d8 <flatcc_verify_field@@Base+0x168>
   2f0cc:	movw	r0, #13
   2f0d0:	str	r0, [fp, #-4]
   2f0d4:	b	2f170 <flatcc_verify_field@@Base+0x200>
   2f0d8:	b	2f0dc <flatcc_verify_field@@Base+0x16c>
   2f0dc:	b	2f0e0 <flatcc_verify_field@@Base+0x170>
   2f0e0:	movw	r0, #1
   2f0e4:	str	r0, [sp, #4]
   2f0e8:	ldr	r0, [sp, #4]
   2f0ec:	cmp	r0, #0
   2f0f0:	bne	2f100 <flatcc_verify_field@@Base+0x190>
   2f0f4:	movw	r0, #14
   2f0f8:	str	r0, [fp, #-4]
   2f0fc:	b	2f170 <flatcc_verify_field@@Base+0x200>
   2f100:	b	2f104 <flatcc_verify_field@@Base+0x194>
   2f104:	ldr	r0, [fp, #-8]
   2f108:	ldr	r0, [r0, #16]
   2f10c:	ldr	r1, [sp, #16]
   2f110:	add	r0, r0, r1
   2f114:	ldr	r1, [sp, #28]
   2f118:	add	r0, r1, r0
   2f11c:	str	r0, [sp, #28]
   2f120:	ldr	r0, [sp, #28]
   2f124:	ldrh	r1, [fp, #-22]	; 0xffffffea
   2f128:	sub	r1, r1, #1
   2f12c:	and	r0, r0, r1
   2f130:	cmp	r0, #0
   2f134:	movw	r0, #0
   2f138:	movne	r0, #1
   2f13c:	mvn	r1, #0
   2f140:	eor	r0, r0, r1
   2f144:	and	r0, r0, #1
   2f148:	str	r0, [sp]
   2f14c:	ldr	r0, [sp]
   2f150:	cmp	r0, #0
   2f154:	bne	2f164 <flatcc_verify_field@@Base+0x1f4>
   2f158:	movw	r0, #12
   2f15c:	str	r0, [fp, #-4]
   2f160:	b	2f170 <flatcc_verify_field@@Base+0x200>
   2f164:	b	2f168 <flatcc_verify_field@@Base+0x1f8>
   2f168:	movw	r0, #0
   2f16c:	str	r0, [fp, #-4]
   2f170:	ldr	r0, [fp, #-4]
   2f174:	mov	sp, fp
   2f178:	pop	{fp, pc}

0002f17c <flatcc_verify_string_field@@Base>:
   2f17c:	push	{fp, lr}
   2f180:	mov	fp, sp
   2f184:	sub	sp, sp, #40	; 0x28
   2f188:	str	r0, [fp, #-8]
   2f18c:	strh	r1, [fp, #-10]
   2f190:	str	r2, [fp, #-16]
   2f194:	ldr	r0, [fp, #-8]
   2f198:	ldrh	r1, [fp, #-10]
   2f19c:	ldr	r2, [fp, #-16]
   2f1a0:	uxth	r1, r1
   2f1a4:	add	r3, sp, #20
   2f1a8:	bl	2f23c <flatcc_verify_string_field@@Base+0xc0>
   2f1ac:	str	r0, [sp, #16]
   2f1b0:	ldr	r0, [sp, #16]
   2f1b4:	cmp	r0, #0
   2f1b8:	bne	2f1c8 <flatcc_verify_string_field@@Base+0x4c>
   2f1bc:	ldr	r0, [sp, #20]
   2f1c0:	cmp	r0, #0
   2f1c4:	bne	2f1d4 <flatcc_verify_string_field@@Base+0x58>
   2f1c8:	ldr	r0, [sp, #16]
   2f1cc:	str	r0, [fp, #-4]
   2f1d0:	b	2f230 <flatcc_verify_string_field@@Base+0xb4>
   2f1d4:	b	2f1d8 <flatcc_verify_string_field@@Base+0x5c>
   2f1d8:	ldr	r0, [fp, #-8]
   2f1dc:	ldr	r0, [r0]
   2f1e0:	ldr	r1, [fp, #-8]
   2f1e4:	ldr	r1, [r1, #4]
   2f1e8:	ldr	r2, [sp, #20]
   2f1ec:	ldr	r3, [fp, #-8]
   2f1f0:	ldr	r3, [r3]
   2f1f4:	ldr	ip, [sp, #20]
   2f1f8:	str	r0, [sp, #12]
   2f1fc:	mov	r0, r3
   2f200:	str	r1, [sp, #8]
   2f204:	mov	r1, ip
   2f208:	str	r2, [sp, #4]
   2f20c:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   2f210:	ldr	r1, [sp, #12]
   2f214:	str	r0, [sp]
   2f218:	mov	r0, r1
   2f21c:	ldr	r1, [sp, #8]
   2f220:	ldr	r2, [sp, #4]
   2f224:	ldr	r3, [sp]
   2f228:	bl	2f390 <flatcc_verify_string_field@@Base+0x214>
   2f22c:	str	r0, [fp, #-4]
   2f230:	ldr	r0, [fp, #-4]
   2f234:	mov	sp, fp
   2f238:	pop	{fp, pc}
   2f23c:	push	{fp, lr}
   2f240:	mov	fp, sp
   2f244:	sub	sp, sp, #48	; 0x30
   2f248:	str	r0, [fp, #-8]
   2f24c:	strh	r1, [fp, #-10]
   2f250:	str	r2, [fp, #-16]
   2f254:	str	r3, [fp, #-20]	; 0xffffffec
   2f258:	ldr	r0, [fp, #-8]
   2f25c:	ldrh	r1, [fp, #-10]
   2f260:	bl	30e68 <flatcc_verify_union_field@@Base+0x290>
   2f264:	strh	r0, [sp, #18]
   2f268:	ldrsh	r0, [sp, #18]
   2f26c:	cmp	r0, #0
   2f270:	bne	2f2a4 <flatcc_verify_string_field@@Base+0x128>
   2f274:	ldr	r0, [fp, #-20]	; 0xffffffec
   2f278:	movw	r1, #0
   2f27c:	str	r1, [r0]
   2f280:	ldr	r0, [fp, #-16]
   2f284:	cmp	r0, #0
   2f288:	beq	2f298 <flatcc_verify_string_field@@Base+0x11c>
   2f28c:	movw	r0, #4
   2f290:	str	r0, [fp, #-4]
   2f294:	b	2f384 <flatcc_verify_string_field@@Base+0x208>
   2f298:	movw	r0, #0
   2f29c:	str	r0, [fp, #-4]
   2f2a0:	b	2f384 <flatcc_verify_string_field@@Base+0x208>
   2f2a4:	ldrh	r0, [sp, #18]
   2f2a8:	str	r0, [sp, #24]
   2f2ac:	ldr	r0, [sp, #24]
   2f2b0:	add	r0, r0, #4
   2f2b4:	str	r0, [sp, #20]
   2f2b8:	ldr	r0, [sp, #20]
   2f2bc:	ldr	r1, [fp, #-8]
   2f2c0:	ldrh	r1, [r1, #20]
   2f2c4:	cmp	r0, r1
   2f2c8:	movw	r0, #0
   2f2cc:	movls	r0, #1
   2f2d0:	and	r0, r0, #1
   2f2d4:	str	r0, [sp, #12]
   2f2d8:	ldr	r0, [sp, #12]
   2f2dc:	cmp	r0, #0
   2f2e0:	bne	2f2f0 <flatcc_verify_string_field@@Base+0x174>
   2f2e4:	movw	r0, #13
   2f2e8:	str	r0, [fp, #-4]
   2f2ec:	b	2f384 <flatcc_verify_string_field@@Base+0x208>
   2f2f0:	b	2f2f4 <flatcc_verify_string_field@@Base+0x178>
   2f2f4:	b	2f2f8 <flatcc_verify_string_field@@Base+0x17c>
   2f2f8:	movw	r0, #1
   2f2fc:	str	r0, [sp, #8]
   2f300:	ldr	r0, [sp, #8]
   2f304:	cmp	r0, #0
   2f308:	bne	2f318 <flatcc_verify_string_field@@Base+0x19c>
   2f30c:	movw	r0, #14
   2f310:	str	r0, [fp, #-4]
   2f314:	b	2f384 <flatcc_verify_string_field@@Base+0x208>
   2f318:	b	2f31c <flatcc_verify_string_field@@Base+0x1a0>
   2f31c:	ldr	r0, [fp, #-8]
   2f320:	ldr	r0, [r0, #16]
   2f324:	ldr	r1, [sp, #24]
   2f328:	add	r0, r1, r0
   2f32c:	str	r0, [sp, #24]
   2f330:	ldr	r0, [sp, #24]
   2f334:	and	r0, r0, #3
   2f338:	cmp	r0, #0
   2f33c:	movw	r0, #0
   2f340:	movne	r0, #1
   2f344:	mvn	r1, #0
   2f348:	eor	r0, r0, r1
   2f34c:	and	r0, r0, #1
   2f350:	str	r0, [sp, #4]
   2f354:	ldr	r0, [sp, #4]
   2f358:	cmp	r0, #0
   2f35c:	bne	2f36c <flatcc_verify_string_field@@Base+0x1f0>
   2f360:	movw	r0, #12
   2f364:	str	r0, [fp, #-4]
   2f368:	b	2f384 <flatcc_verify_string_field@@Base+0x208>
   2f36c:	b	2f370 <flatcc_verify_string_field@@Base+0x1f4>
   2f370:	ldr	r0, [sp, #24]
   2f374:	ldr	r1, [fp, #-20]	; 0xffffffec
   2f378:	str	r0, [r1]
   2f37c:	movw	r0, #0
   2f380:	str	r0, [fp, #-4]
   2f384:	ldr	r0, [fp, #-4]
   2f388:	mov	sp, fp
   2f38c:	pop	{fp, pc}
   2f390:	push	{fp, lr}
   2f394:	mov	fp, sp
   2f398:	sub	sp, sp, #40	; 0x28
   2f39c:	str	r0, [fp, #-8]
   2f3a0:	str	r1, [fp, #-12]
   2f3a4:	str	r2, [fp, #-16]
   2f3a8:	str	r3, [sp, #20]
   2f3ac:	ldr	r0, [fp, #-12]
   2f3b0:	ldr	r1, [fp, #-16]
   2f3b4:	ldr	r2, [sp, #20]
   2f3b8:	bl	3143c <flatcc_verify_union_vector_field@@Base+0x56c>
   2f3bc:	str	r0, [sp, #12]
   2f3c0:	ldr	r0, [sp, #12]
   2f3c4:	cmp	r0, #0
   2f3c8:	bne	2f3d8 <flatcc_verify_string_field@@Base+0x25c>
   2f3cc:	movw	r0, #17
   2f3d0:	str	r0, [fp, #-4]
   2f3d4:	b	2f4a0 <flatcc_verify_string_field@@Base+0x324>
   2f3d8:	b	2f3dc <flatcc_verify_string_field@@Base+0x260>
   2f3dc:	ldr	r0, [sp, #20]
   2f3e0:	ldr	r1, [fp, #-16]
   2f3e4:	add	r0, r1, r0
   2f3e8:	str	r0, [fp, #-16]
   2f3ec:	ldr	r0, [fp, #-8]
   2f3f0:	ldr	r1, [fp, #-16]
   2f3f4:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   2f3f8:	str	r0, [sp, #16]
   2f3fc:	ldr	r0, [fp, #-16]
   2f400:	add	r0, r0, #4
   2f404:	str	r0, [fp, #-16]
   2f408:	ldr	r0, [fp, #-12]
   2f40c:	ldr	r1, [fp, #-16]
   2f410:	sub	r0, r0, r1
   2f414:	ldr	r1, [sp, #16]
   2f418:	add	r1, r1, #1
   2f41c:	cmp	r0, r1
   2f420:	movw	r0, #0
   2f424:	movcs	r0, #1
   2f428:	and	r0, r0, #1
   2f42c:	str	r0, [sp, #8]
   2f430:	ldr	r0, [sp, #8]
   2f434:	cmp	r0, #0
   2f438:	bne	2f448 <flatcc_verify_string_field@@Base+0x2cc>
   2f43c:	movw	r0, #8
   2f440:	str	r0, [fp, #-4]
   2f444:	b	2f4a0 <flatcc_verify_string_field@@Base+0x324>
   2f448:	b	2f44c <flatcc_verify_string_field@@Base+0x2d0>
   2f44c:	b	2f450 <flatcc_verify_string_field@@Base+0x2d4>
   2f450:	ldr	r0, [fp, #-8]
   2f454:	ldr	r1, [fp, #-16]
   2f458:	add	r0, r0, r1
   2f45c:	ldr	r1, [sp, #16]
   2f460:	add	r0, r0, r1
   2f464:	ldrb	r0, [r0]
   2f468:	cmp	r0, #0
   2f46c:	movw	r0, #0
   2f470:	moveq	r0, #1
   2f474:	and	r0, r0, #1
   2f478:	str	r0, [sp, #4]
   2f47c:	ldr	r0, [sp, #4]
   2f480:	cmp	r0, #0
   2f484:	bne	2f494 <flatcc_verify_string_field@@Base+0x318>
   2f488:	movw	r0, #7
   2f48c:	str	r0, [fp, #-4]
   2f490:	b	2f4a0 <flatcc_verify_string_field@@Base+0x324>
   2f494:	b	2f498 <flatcc_verify_string_field@@Base+0x31c>
   2f498:	movw	r0, #0
   2f49c:	str	r0, [fp, #-4]
   2f4a0:	ldr	r0, [fp, #-4]
   2f4a4:	mov	sp, fp
   2f4a8:	pop	{fp, pc}
   2f4ac:	push	{fp, lr}
   2f4b0:	mov	fp, sp
   2f4b4:	sub	sp, sp, #8
   2f4b8:	str	r0, [sp, #4]
   2f4bc:	str	r1, [sp]
   2f4c0:	ldr	r0, [sp, #4]
   2f4c4:	ldr	r1, [sp]
   2f4c8:	add	r0, r0, r1
   2f4cc:	bl	314c0 <flatcc_verify_union_vector_field@@Base+0x5f0>
   2f4d0:	mov	sp, fp
   2f4d4:	pop	{fp, pc}

0002f4d8 <flatcc_verify_vector_field@@Base>:
   2f4d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2f4dc:	add	fp, sp, #24
   2f4e0:	sub	sp, sp, #72	; 0x48
   2f4e4:	ldr	ip, [fp, #12]
   2f4e8:	ldr	lr, [fp, #8]
   2f4ec:	str	r0, [fp, #-32]	; 0xffffffe0
   2f4f0:	strh	r1, [fp, #-34]	; 0xffffffde
   2f4f4:	str	r2, [fp, #-40]	; 0xffffffd8
   2f4f8:	str	r3, [fp, #-44]	; 0xffffffd4
   2f4fc:	strh	lr, [fp, #-46]	; 0xffffffd2
   2f500:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2f504:	ldrh	r1, [fp, #-34]	; 0xffffffde
   2f508:	ldr	r2, [fp, #-40]	; 0xffffffd8
   2f50c:	uxth	r1, r1
   2f510:	add	r3, sp, #44	; 0x2c
   2f514:	bl	2f23c <flatcc_verify_string_field@@Base+0xc0>
   2f518:	str	r0, [sp, #40]	; 0x28
   2f51c:	ldr	r0, [sp, #40]	; 0x28
   2f520:	cmp	r0, #0
   2f524:	bne	2f534 <flatcc_verify_vector_field@@Base+0x5c>
   2f528:	ldr	r0, [sp, #44]	; 0x2c
   2f52c:	cmp	r0, #0
   2f530:	bne	2f540 <flatcc_verify_vector_field@@Base+0x68>
   2f534:	ldr	r0, [sp, #40]	; 0x28
   2f538:	str	r0, [fp, #-28]	; 0xffffffe4
   2f53c:	b	2f5dc <flatcc_verify_vector_field@@Base+0x104>
   2f540:	b	2f544 <flatcc_verify_vector_field@@Base+0x6c>
   2f544:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2f548:	ldr	r0, [r0]
   2f54c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2f550:	ldr	r1, [r1, #4]
   2f554:	ldr	r2, [sp, #44]	; 0x2c
   2f558:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2f55c:	ldr	r3, [r3]
   2f560:	ldr	ip, [sp, #44]	; 0x2c
   2f564:	str	r0, [sp, #36]	; 0x24
   2f568:	mov	r0, r3
   2f56c:	str	r1, [sp, #32]
   2f570:	mov	r1, ip
   2f574:	str	r2, [sp, #28]
   2f578:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   2f57c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2f580:	ldrh	r2, [fp, #-46]	; 0xffffffd2
   2f584:	ldr	r3, [fp, #12]
   2f588:	ldr	ip, [sp, #36]	; 0x24
   2f58c:	str	r0, [sp, #24]
   2f590:	mov	r0, ip
   2f594:	ldr	lr, [sp, #32]
   2f598:	str	r1, [sp, #20]
   2f59c:	mov	r1, lr
   2f5a0:	ldr	r4, [sp, #28]
   2f5a4:	str	r2, [sp, #16]
   2f5a8:	mov	r2, r4
   2f5ac:	ldr	r5, [sp, #24]
   2f5b0:	str	r3, [sp, #12]
   2f5b4:	mov	r3, r5
   2f5b8:	ldr	r6, [sp, #20]
   2f5bc:	str	r6, [sp]
   2f5c0:	ldr	r7, [sp, #16]
   2f5c4:	uxth	r8, r7
   2f5c8:	str	r8, [sp, #4]
   2f5cc:	ldr	r8, [sp, #12]
   2f5d0:	str	r8, [sp, #8]
   2f5d4:	bl	2f5e8 <flatcc_verify_vector_field@@Base+0x110>
   2f5d8:	str	r0, [fp, #-28]	; 0xffffffe4
   2f5dc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2f5e0:	sub	sp, fp, #24
   2f5e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2f5e8:	push	{r4, sl, fp, lr}
   2f5ec:	add	fp, sp, #8
   2f5f0:	sub	sp, sp, #40	; 0x28
   2f5f4:	ldr	ip, [fp, #16]
   2f5f8:	ldr	lr, [fp, #12]
   2f5fc:	ldr	r4, [fp, #8]
   2f600:	str	r0, [fp, #-16]
   2f604:	str	r1, [fp, #-20]	; 0xffffffec
   2f608:	str	r2, [sp, #24]
   2f60c:	str	r3, [sp, #20]
   2f610:	strh	lr, [sp, #18]
   2f614:	ldr	r0, [fp, #-20]	; 0xffffffec
   2f618:	ldr	r1, [sp, #24]
   2f61c:	ldr	r2, [sp, #20]
   2f620:	ldrh	r3, [sp, #18]
   2f624:	bl	314f8 <flatcc_verify_union_vector_field@@Base+0x628>
   2f628:	str	r0, [sp, #8]
   2f62c:	ldr	r0, [sp, #8]
   2f630:	cmp	r0, #0
   2f634:	bne	2f644 <flatcc_verify_vector_field@@Base+0x16c>
   2f638:	movw	r0, #16
   2f63c:	str	r0, [fp, #-12]
   2f640:	b	2f700 <flatcc_verify_vector_field@@Base+0x228>
   2f644:	b	2f648 <flatcc_verify_vector_field@@Base+0x170>
   2f648:	ldr	r0, [sp, #20]
   2f64c:	ldr	r1, [sp, #24]
   2f650:	add	r0, r1, r0
   2f654:	str	r0, [sp, #24]
   2f658:	ldr	r0, [fp, #-16]
   2f65c:	ldr	r1, [sp, #24]
   2f660:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   2f664:	str	r0, [sp, #12]
   2f668:	ldr	r0, [sp, #24]
   2f66c:	add	r0, r0, #4
   2f670:	str	r0, [sp, #24]
   2f674:	ldr	r0, [sp, #12]
   2f678:	ldr	r1, [fp, #16]
   2f67c:	cmp	r0, r1
   2f680:	movw	r0, #0
   2f684:	movls	r0, #1
   2f688:	and	r0, r0, #1
   2f68c:	str	r0, [sp, #4]
   2f690:	ldr	r0, [sp, #4]
   2f694:	cmp	r0, #0
   2f698:	bne	2f6a8 <flatcc_verify_vector_field@@Base+0x1d0>
   2f69c:	movw	r0, #25
   2f6a0:	str	r0, [fp, #-12]
   2f6a4:	b	2f700 <flatcc_verify_vector_field@@Base+0x228>
   2f6a8:	b	2f6ac <flatcc_verify_vector_field@@Base+0x1d4>
   2f6ac:	b	2f6b0 <flatcc_verify_vector_field@@Base+0x1d8>
   2f6b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   2f6b4:	ldr	r1, [sp, #24]
   2f6b8:	sub	r0, r0, r1
   2f6bc:	ldr	r1, [sp, #12]
   2f6c0:	ldr	r2, [fp, #8]
   2f6c4:	mul	r1, r1, r2
   2f6c8:	cmp	r0, r1
   2f6cc:	movw	r0, #0
   2f6d0:	movcs	r0, #1
   2f6d4:	and	r0, r0, #1
   2f6d8:	str	r0, [sp]
   2f6dc:	ldr	r0, [sp]
   2f6e0:	cmp	r0, #0
   2f6e4:	bne	2f6f4 <flatcc_verify_vector_field@@Base+0x21c>
   2f6e8:	movw	r0, #26
   2f6ec:	str	r0, [fp, #-12]
   2f6f0:	b	2f700 <flatcc_verify_vector_field@@Base+0x228>
   2f6f4:	b	2f6f8 <flatcc_verify_vector_field@@Base+0x220>
   2f6f8:	movw	r0, #0
   2f6fc:	str	r0, [fp, #-12]
   2f700:	ldr	r0, [fp, #-12]
   2f704:	sub	sp, fp, #8
   2f708:	pop	{r4, sl, fp, pc}

0002f70c <flatcc_verify_string_vector_field@@Base>:
   2f70c:	push	{fp, lr}
   2f710:	mov	fp, sp
   2f714:	sub	sp, sp, #40	; 0x28
   2f718:	str	r0, [fp, #-8]
   2f71c:	strh	r1, [fp, #-10]
   2f720:	str	r2, [fp, #-16]
   2f724:	ldr	r0, [fp, #-8]
   2f728:	ldrh	r1, [fp, #-10]
   2f72c:	ldr	r2, [fp, #-16]
   2f730:	uxth	r1, r1
   2f734:	add	r3, sp, #20
   2f738:	bl	2f23c <flatcc_verify_string_field@@Base+0xc0>
   2f73c:	str	r0, [sp, #16]
   2f740:	ldr	r0, [sp, #16]
   2f744:	cmp	r0, #0
   2f748:	bne	2f758 <flatcc_verify_string_vector_field@@Base+0x4c>
   2f74c:	ldr	r0, [sp, #20]
   2f750:	cmp	r0, #0
   2f754:	bne	2f764 <flatcc_verify_string_vector_field@@Base+0x58>
   2f758:	ldr	r0, [sp, #16]
   2f75c:	str	r0, [fp, #-4]
   2f760:	b	2f7c0 <flatcc_verify_string_vector_field@@Base+0xb4>
   2f764:	b	2f768 <flatcc_verify_string_vector_field@@Base+0x5c>
   2f768:	ldr	r0, [fp, #-8]
   2f76c:	ldr	r0, [r0]
   2f770:	ldr	r1, [fp, #-8]
   2f774:	ldr	r1, [r1, #4]
   2f778:	ldr	r2, [sp, #20]
   2f77c:	ldr	r3, [fp, #-8]
   2f780:	ldr	r3, [r3]
   2f784:	ldr	ip, [sp, #20]
   2f788:	str	r0, [sp, #12]
   2f78c:	mov	r0, r3
   2f790:	str	r1, [sp, #8]
   2f794:	mov	r1, ip
   2f798:	str	r2, [sp, #4]
   2f79c:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   2f7a0:	ldr	r1, [sp, #12]
   2f7a4:	str	r0, [sp]
   2f7a8:	mov	r0, r1
   2f7ac:	ldr	r1, [sp, #8]
   2f7b0:	ldr	r2, [sp, #4]
   2f7b4:	ldr	r3, [sp]
   2f7b8:	bl	2f7cc <flatcc_verify_string_vector_field@@Base+0xc0>
   2f7bc:	str	r0, [fp, #-4]
   2f7c0:	ldr	r0, [fp, #-4]
   2f7c4:	mov	sp, fp
   2f7c8:	pop	{fp, pc}
   2f7cc:	push	{fp, lr}
   2f7d0:	mov	fp, sp
   2f7d4:	sub	sp, sp, #80	; 0x50
   2f7d8:	ldr	ip, [pc, #424]	; 2f988 <flatcc_verify_string_vector_field@@Base+0x27c>
   2f7dc:	str	r0, [fp, #-8]
   2f7e0:	str	r1, [fp, #-12]
   2f7e4:	str	r2, [fp, #-16]
   2f7e8:	str	r3, [fp, #-20]	; 0xffffffec
   2f7ec:	ldr	r0, [fp, #-8]
   2f7f0:	ldr	r1, [fp, #-12]
   2f7f4:	ldr	r2, [fp, #-16]
   2f7f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   2f7fc:	movw	lr, #4
   2f800:	str	lr, [sp]
   2f804:	movw	lr, #4
   2f808:	uxth	lr, lr
   2f80c:	str	lr, [sp, #4]
   2f810:	str	ip, [sp, #8]
   2f814:	bl	2f5e8 <flatcc_verify_vector_field@@Base+0x110>
   2f818:	cmp	r0, #0
   2f81c:	beq	2f870 <flatcc_verify_string_vector_field@@Base+0x164>
   2f820:	ldr	r0, [pc, #352]	; 2f988 <flatcc_verify_string_vector_field@@Base+0x27c>
   2f824:	ldr	r1, [fp, #-8]
   2f828:	ldr	r2, [fp, #-12]
   2f82c:	ldr	r3, [fp, #-16]
   2f830:	ldr	ip, [fp, #-20]	; 0xffffffec
   2f834:	str	r0, [fp, #-32]	; 0xffffffe0
   2f838:	mov	r0, r1
   2f83c:	mov	r1, r2
   2f840:	mov	r2, r3
   2f844:	mov	r3, ip
   2f848:	movw	ip, #4
   2f84c:	str	ip, [sp]
   2f850:	movw	ip, #4
   2f854:	uxth	ip, ip
   2f858:	str	ip, [sp, #4]
   2f85c:	ldr	ip, [fp, #-32]	; 0xffffffe0
   2f860:	str	ip, [sp, #8]
   2f864:	bl	2f5e8 <flatcc_verify_vector_field@@Base+0x110>
   2f868:	str	r0, [fp, #-4]
   2f86c:	b	2f97c <flatcc_verify_string_vector_field@@Base+0x270>
   2f870:	ldr	r0, [fp, #-20]	; 0xffffffec
   2f874:	ldr	r1, [fp, #-16]
   2f878:	add	r0, r1, r0
   2f87c:	str	r0, [fp, #-16]
   2f880:	ldr	r0, [fp, #-8]
   2f884:	ldr	r1, [fp, #-16]
   2f888:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   2f88c:	str	r0, [fp, #-28]	; 0xffffffe4
   2f890:	ldr	r0, [fp, #-16]
   2f894:	add	r0, r0, #4
   2f898:	str	r0, [fp, #-16]
   2f89c:	movw	r0, #0
   2f8a0:	str	r0, [fp, #-24]	; 0xffffffe8
   2f8a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f8a8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2f8ac:	cmp	r0, r1
   2f8b0:	bcs	2f974 <flatcc_verify_string_vector_field@@Base+0x268>
   2f8b4:	ldr	r0, [fp, #-8]
   2f8b8:	ldr	r1, [fp, #-12]
   2f8bc:	ldr	r2, [fp, #-16]
   2f8c0:	ldr	r3, [fp, #-8]
   2f8c4:	ldr	ip, [fp, #-16]
   2f8c8:	str	r0, [fp, #-36]	; 0xffffffdc
   2f8cc:	mov	r0, r3
   2f8d0:	str	r1, [sp, #40]	; 0x28
   2f8d4:	mov	r1, ip
   2f8d8:	str	r2, [sp, #36]	; 0x24
   2f8dc:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   2f8e0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2f8e4:	str	r0, [sp, #32]
   2f8e8:	mov	r0, r1
   2f8ec:	ldr	r1, [sp, #40]	; 0x28
   2f8f0:	ldr	r2, [sp, #36]	; 0x24
   2f8f4:	ldr	r3, [sp, #32]
   2f8f8:	bl	2f390 <flatcc_verify_string_field@@Base+0x214>
   2f8fc:	cmp	r0, #0
   2f900:	beq	2f954 <flatcc_verify_string_vector_field@@Base+0x248>
   2f904:	ldr	r0, [fp, #-8]
   2f908:	ldr	r1, [fp, #-12]
   2f90c:	ldr	r2, [fp, #-16]
   2f910:	ldr	r3, [fp, #-8]
   2f914:	ldr	ip, [fp, #-16]
   2f918:	str	r0, [sp, #28]
   2f91c:	mov	r0, r3
   2f920:	str	r1, [sp, #24]
   2f924:	mov	r1, ip
   2f928:	str	r2, [sp, #20]
   2f92c:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   2f930:	ldr	r1, [sp, #28]
   2f934:	str	r0, [sp, #16]
   2f938:	mov	r0, r1
   2f93c:	ldr	r1, [sp, #24]
   2f940:	ldr	r2, [sp, #20]
   2f944:	ldr	r3, [sp, #16]
   2f948:	bl	2f390 <flatcc_verify_string_field@@Base+0x214>
   2f94c:	str	r0, [fp, #-4]
   2f950:	b	2f97c <flatcc_verify_string_vector_field@@Base+0x270>
   2f954:	b	2f958 <flatcc_verify_string_vector_field@@Base+0x24c>
   2f958:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f95c:	add	r0, r0, #1
   2f960:	str	r0, [fp, #-24]	; 0xffffffe8
   2f964:	ldr	r0, [fp, #-16]
   2f968:	add	r0, r0, #4
   2f96c:	str	r0, [fp, #-16]
   2f970:	b	2f8a4 <flatcc_verify_string_vector_field@@Base+0x198>
   2f974:	movw	r0, #0
   2f978:	str	r0, [fp, #-4]
   2f97c:	ldr	r0, [fp, #-4]
   2f980:	mov	sp, fp
   2f984:	pop	{fp, pc}
   2f988:	svccc	0x00ffffff

0002f98c <flatcc_verify_table_field@@Base>:
   2f98c:	push	{r4, r5, fp, lr}
   2f990:	add	fp, sp, #8
   2f994:	sub	sp, sp, #64	; 0x40
   2f998:	str	r0, [fp, #-16]
   2f99c:	strh	r1, [fp, #-18]	; 0xffffffee
   2f9a0:	str	r2, [fp, #-24]	; 0xffffffe8
   2f9a4:	str	r3, [fp, #-28]	; 0xffffffe4
   2f9a8:	ldr	r0, [fp, #-16]
   2f9ac:	ldrh	r1, [fp, #-18]	; 0xffffffee
   2f9b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2f9b4:	uxth	r1, r1
   2f9b8:	sub	r3, fp, #32
   2f9bc:	bl	2f23c <flatcc_verify_string_field@@Base+0xc0>
   2f9c0:	str	r0, [sp, #36]	; 0x24
   2f9c4:	ldr	r0, [sp, #36]	; 0x24
   2f9c8:	cmp	r0, #0
   2f9cc:	bne	2f9dc <flatcc_verify_table_field@@Base+0x50>
   2f9d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2f9d4:	cmp	r0, #0
   2f9d8:	bne	2f9e8 <flatcc_verify_table_field@@Base+0x5c>
   2f9dc:	ldr	r0, [sp, #36]	; 0x24
   2f9e0:	str	r0, [fp, #-12]
   2f9e4:	b	2fa70 <flatcc_verify_table_field@@Base+0xe4>
   2f9e8:	b	2f9ec <flatcc_verify_table_field@@Base+0x60>
   2f9ec:	ldr	r0, [fp, #-16]
   2f9f0:	ldr	r0, [r0]
   2f9f4:	ldr	r1, [fp, #-16]
   2f9f8:	ldr	r1, [r1, #4]
   2f9fc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2fa00:	ldr	r3, [fp, #-16]
   2fa04:	ldr	r3, [r3]
   2fa08:	ldr	ip, [fp, #-32]	; 0xffffffe0
   2fa0c:	str	r0, [sp, #32]
   2fa10:	mov	r0, r3
   2fa14:	str	r1, [sp, #28]
   2fa18:	mov	r1, ip
   2fa1c:	str	r2, [sp, #24]
   2fa20:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   2fa24:	ldr	r1, [fp, #-16]
   2fa28:	ldr	r1, [r1, #8]
   2fa2c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2fa30:	ldr	r3, [sp, #32]
   2fa34:	str	r0, [sp, #20]
   2fa38:	mov	r0, r3
   2fa3c:	ldr	ip, [sp, #28]
   2fa40:	str	r1, [sp, #16]
   2fa44:	mov	r1, ip
   2fa48:	ldr	lr, [sp, #24]
   2fa4c:	str	r2, [sp, #12]
   2fa50:	mov	r2, lr
   2fa54:	ldr	r3, [sp, #20]
   2fa58:	ldr	r4, [sp, #16]
   2fa5c:	str	r4, [sp]
   2fa60:	ldr	r5, [sp, #12]
   2fa64:	str	r5, [sp, #4]
   2fa68:	bl	2fa7c <flatcc_verify_table_field@@Base+0xf0>
   2fa6c:	str	r0, [fp, #-12]
   2fa70:	ldr	r0, [fp, #-12]
   2fa74:	sub	sp, fp, #8
   2fa78:	pop	{r4, r5, fp, pc}
   2fa7c:	push	{fp, lr}
   2fa80:	mov	fp, sp
   2fa84:	sub	sp, sp, #104	; 0x68
   2fa88:	ldr	ip, [fp, #12]
   2fa8c:	ldr	lr, [fp, #8]
   2fa90:	str	r0, [fp, #-8]
   2fa94:	str	r1, [fp, #-12]
   2fa98:	str	r2, [fp, #-16]
   2fa9c:	str	r3, [fp, #-20]	; 0xffffffec
   2faa0:	ldr	r0, [fp, #8]
   2faa4:	sub	r0, r0, #1
   2faa8:	str	r0, [sp, #60]	; 0x3c
   2faac:	str	r0, [sp, #48]	; 0x30
   2fab0:	ldr	r0, [sp, #48]	; 0x30
   2fab4:	cmp	r0, #0
   2fab8:	bne	2fac8 <flatcc_verify_table_field@@Base+0x13c>
   2fabc:	movw	r0, #3
   2fac0:	str	r0, [fp, #-4]
   2fac4:	b	2fd44 <flatcc_verify_table_field@@Base+0x3b8>
   2fac8:	b	2facc <flatcc_verify_table_field@@Base+0x140>
   2facc:	b	2fad0 <flatcc_verify_table_field@@Base+0x144>
   2fad0:	ldr	r0, [fp, #-12]
   2fad4:	ldr	r1, [fp, #-16]
   2fad8:	ldr	r2, [fp, #-20]	; 0xffffffec
   2fadc:	bl	3143c <flatcc_verify_union_vector_field@@Base+0x56c>
   2fae0:	str	r0, [sp, #44]	; 0x2c
   2fae4:	ldr	r0, [sp, #44]	; 0x2c
   2fae8:	cmp	r0, #0
   2faec:	bne	2fafc <flatcc_verify_table_field@@Base+0x170>
   2faf0:	movw	r0, #15
   2faf4:	str	r0, [fp, #-4]
   2faf8:	b	2fd44 <flatcc_verify_table_field@@Base+0x3b8>
   2fafc:	b	2fb00 <flatcc_verify_table_field@@Base+0x174>
   2fb00:	ldr	r0, [fp, #-16]
   2fb04:	ldr	r1, [fp, #-20]	; 0xffffffec
   2fb08:	add	r0, r0, r1
   2fb0c:	str	r0, [sp, #68]	; 0x44
   2fb10:	ldr	r0, [sp, #68]	; 0x44
   2fb14:	ldr	r1, [fp, #-8]
   2fb18:	ldr	r2, [sp, #68]	; 0x44
   2fb1c:	str	r0, [sp, #16]
   2fb20:	mov	r0, r1
   2fb24:	mov	r1, r2
   2fb28:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   2fb2c:	ldr	r1, [sp, #16]
   2fb30:	sub	r0, r1, r0
   2fb34:	str	r0, [fp, #-24]	; 0xffffffe8
   2fb38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2fb3c:	cmp	r0, #0
   2fb40:	movw	r0, #0
   2fb44:	str	r0, [sp, #12]
   2fb48:	blt	2fb6c <flatcc_verify_table_field@@Base+0x1e0>
   2fb4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2fb50:	and	r0, r0, #1
   2fb54:	cmp	r0, #0
   2fb58:	movw	r0, #0
   2fb5c:	movne	r0, #1
   2fb60:	mvn	r1, #0
   2fb64:	eor	r0, r0, r1
   2fb68:	str	r0, [sp, #12]
   2fb6c:	ldr	r0, [sp, #12]
   2fb70:	and	r0, r0, #1
   2fb74:	str	r0, [sp, #40]	; 0x28
   2fb78:	ldr	r0, [sp, #40]	; 0x28
   2fb7c:	cmp	r0, #0
   2fb80:	bne	2fb90 <flatcc_verify_table_field@@Base+0x204>
   2fb84:	movw	r0, #29
   2fb88:	str	r0, [fp, #-4]
   2fb8c:	b	2fd44 <flatcc_verify_table_field@@Base+0x3b8>
   2fb90:	b	2fb94 <flatcc_verify_table_field@@Base+0x208>
   2fb94:	b	2fb98 <flatcc_verify_table_field@@Base+0x20c>
   2fb98:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2fb9c:	add	r0, r0, #2
   2fba0:	ldr	r1, [fp, #-12]
   2fba4:	cmp	r0, r1
   2fba8:	movw	r0, #0
   2fbac:	movls	r0, #1
   2fbb0:	and	r0, r0, #1
   2fbb4:	str	r0, [sp, #36]	; 0x24
   2fbb8:	ldr	r0, [sp, #36]	; 0x24
   2fbbc:	cmp	r0, #0
   2fbc0:	bne	2fbd0 <flatcc_verify_table_field@@Base+0x244>
   2fbc4:	movw	r0, #27
   2fbc8:	str	r0, [fp, #-4]
   2fbcc:	b	2fd44 <flatcc_verify_table_field@@Base+0x3b8>
   2fbd0:	b	2fbd4 <flatcc_verify_table_field@@Base+0x248>
   2fbd4:	ldr	r0, [fp, #-8]
   2fbd8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fbdc:	bl	315b8 <flatcc_verify_union_vector_field@@Base+0x6e8>
   2fbe0:	strh	r0, [sp, #74]	; 0x4a
   2fbe4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2fbe8:	ldrh	r1, [sp, #74]	; 0x4a
   2fbec:	add	r0, r0, r1
   2fbf0:	str	r0, [fp, #-28]	; 0xffffffe4
   2fbf4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2fbf8:	ldr	r1, [fp, #-12]
   2fbfc:	cmp	r0, r1
   2fc00:	movw	r0, #0
   2fc04:	str	r0, [sp, #8]
   2fc08:	bhi	2fc2c <flatcc_verify_table_field@@Base+0x2a0>
   2fc0c:	ldrh	r0, [sp, #74]	; 0x4a
   2fc10:	and	r0, r0, #1
   2fc14:	cmp	r0, #0
   2fc18:	movw	r0, #0
   2fc1c:	movne	r0, #1
   2fc20:	mvn	r1, #0
   2fc24:	eor	r0, r0, r1
   2fc28:	str	r0, [sp, #8]
   2fc2c:	ldr	r0, [sp, #8]
   2fc30:	and	r0, r0, #1
   2fc34:	str	r0, [sp, #32]
   2fc38:	ldr	r0, [sp, #32]
   2fc3c:	cmp	r0, #0
   2fc40:	bne	2fc50 <flatcc_verify_table_field@@Base+0x2c4>
   2fc44:	movw	r0, #30
   2fc48:	str	r0, [fp, #-4]
   2fc4c:	b	2fd44 <flatcc_verify_table_field@@Base+0x3b8>
   2fc50:	b	2fc54 <flatcc_verify_table_field@@Base+0x2c8>
   2fc54:	b	2fc58 <flatcc_verify_table_field@@Base+0x2cc>
   2fc58:	movw	r0, #1
   2fc5c:	str	r0, [sp, #28]
   2fc60:	ldr	r0, [sp, #28]
   2fc64:	cmp	r0, #0
   2fc68:	bne	2fc78 <flatcc_verify_table_field@@Base+0x2ec>
   2fc6c:	movw	r0, #31
   2fc70:	str	r0, [fp, #-4]
   2fc74:	b	2fd44 <flatcc_verify_table_field@@Base+0x3b8>
   2fc78:	b	2fc7c <flatcc_verify_table_field@@Base+0x2f0>
   2fc7c:	b	2fc80 <flatcc_verify_table_field@@Base+0x2f4>
   2fc80:	ldrh	r0, [sp, #74]	; 0x4a
   2fc84:	cmp	r0, #4
   2fc88:	movw	r0, #0
   2fc8c:	movcs	r0, #1
   2fc90:	and	r0, r0, #1
   2fc94:	str	r0, [sp, #24]
   2fc98:	ldr	r0, [sp, #24]
   2fc9c:	cmp	r0, #0
   2fca0:	bne	2fcb0 <flatcc_verify_table_field@@Base+0x324>
   2fca4:	movw	r0, #28
   2fca8:	str	r0, [fp, #-4]
   2fcac:	b	2fd44 <flatcc_verify_table_field@@Base+0x3b8>
   2fcb0:	b	2fcb4 <flatcc_verify_table_field@@Base+0x328>
   2fcb4:	ldr	r0, [fp, #-8]
   2fcb8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fcbc:	add	r1, r1, #2
   2fcc0:	bl	315b8 <flatcc_verify_union_vector_field@@Base+0x6e8>
   2fcc4:	strh	r0, [sp, #72]	; 0x48
   2fcc8:	ldr	r0, [fp, #-12]
   2fccc:	ldr	r1, [sp, #68]	; 0x44
   2fcd0:	sub	r0, r0, r1
   2fcd4:	ldrh	r1, [sp, #72]	; 0x48
   2fcd8:	cmp	r0, r1
   2fcdc:	movw	r0, #0
   2fce0:	movcs	r0, #1
   2fce4:	and	r0, r0, #1
   2fce8:	str	r0, [sp, #20]
   2fcec:	ldr	r0, [sp, #20]
   2fcf0:	cmp	r0, #0
   2fcf4:	bne	2fd04 <flatcc_verify_table_field@@Base+0x378>
   2fcf8:	movw	r0, #20
   2fcfc:	str	r0, [fp, #-4]
   2fd00:	b	2fd44 <flatcc_verify_table_field@@Base+0x3b8>
   2fd04:	b	2fd08 <flatcc_verify_table_field@@Base+0x37c>
   2fd08:	ldr	r0, [fp, #-8]
   2fd0c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fd10:	add	r0, r0, r1
   2fd14:	str	r0, [sp, #64]	; 0x40
   2fd18:	ldr	r0, [fp, #-8]
   2fd1c:	str	r0, [sp, #52]	; 0x34
   2fd20:	ldr	r0, [fp, #-12]
   2fd24:	str	r0, [sp, #56]	; 0x38
   2fd28:	ldr	r0, [fp, #12]
   2fd2c:	add	r1, sp, #52	; 0x34
   2fd30:	str	r0, [sp, #4]
   2fd34:	mov	r0, r1
   2fd38:	ldr	r1, [sp, #4]
   2fd3c:	blx	r1
   2fd40:	str	r0, [fp, #-4]
   2fd44:	ldr	r0, [fp, #-4]
   2fd48:	mov	sp, fp
   2fd4c:	pop	{fp, pc}

0002fd50 <flatcc_verify_table_vector_field@@Base>:
   2fd50:	push	{r4, r5, fp, lr}
   2fd54:	add	fp, sp, #8
   2fd58:	sub	sp, sp, #64	; 0x40
   2fd5c:	str	r0, [fp, #-16]
   2fd60:	strh	r1, [fp, #-18]	; 0xffffffee
   2fd64:	str	r2, [fp, #-24]	; 0xffffffe8
   2fd68:	str	r3, [fp, #-28]	; 0xffffffe4
   2fd6c:	ldr	r0, [fp, #-16]
   2fd70:	ldrh	r1, [fp, #-18]	; 0xffffffee
   2fd74:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2fd78:	uxth	r1, r1
   2fd7c:	sub	r3, fp, #32
   2fd80:	bl	2f23c <flatcc_verify_string_field@@Base+0xc0>
   2fd84:	str	r0, [sp, #36]	; 0x24
   2fd88:	ldr	r0, [sp, #36]	; 0x24
   2fd8c:	cmp	r0, #0
   2fd90:	bne	2fda0 <flatcc_verify_table_vector_field@@Base+0x50>
   2fd94:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2fd98:	cmp	r0, #0
   2fd9c:	bne	2fdac <flatcc_verify_table_vector_field@@Base+0x5c>
   2fda0:	ldr	r0, [sp, #36]	; 0x24
   2fda4:	str	r0, [fp, #-12]
   2fda8:	b	2fe34 <flatcc_verify_table_vector_field@@Base+0xe4>
   2fdac:	b	2fdb0 <flatcc_verify_table_vector_field@@Base+0x60>
   2fdb0:	ldr	r0, [fp, #-16]
   2fdb4:	ldr	r0, [r0]
   2fdb8:	ldr	r1, [fp, #-16]
   2fdbc:	ldr	r1, [r1, #4]
   2fdc0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2fdc4:	ldr	r3, [fp, #-16]
   2fdc8:	ldr	r3, [r3]
   2fdcc:	ldr	ip, [fp, #-32]	; 0xffffffe0
   2fdd0:	str	r0, [sp, #32]
   2fdd4:	mov	r0, r3
   2fdd8:	str	r1, [sp, #28]
   2fddc:	mov	r1, ip
   2fde0:	str	r2, [sp, #24]
   2fde4:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   2fde8:	ldr	r1, [fp, #-16]
   2fdec:	ldr	r1, [r1, #8]
   2fdf0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2fdf4:	ldr	r3, [sp, #32]
   2fdf8:	str	r0, [sp, #20]
   2fdfc:	mov	r0, r3
   2fe00:	ldr	ip, [sp, #28]
   2fe04:	str	r1, [sp, #16]
   2fe08:	mov	r1, ip
   2fe0c:	ldr	lr, [sp, #24]
   2fe10:	str	r2, [sp, #12]
   2fe14:	mov	r2, lr
   2fe18:	ldr	r3, [sp, #20]
   2fe1c:	ldr	r4, [sp, #16]
   2fe20:	str	r4, [sp]
   2fe24:	ldr	r5, [sp, #12]
   2fe28:	str	r5, [sp, #4]
   2fe2c:	bl	2fe40 <flatcc_verify_table_vector_field@@Base+0xf0>
   2fe30:	str	r0, [fp, #-12]
   2fe34:	ldr	r0, [fp, #-12]
   2fe38:	sub	sp, fp, #8
   2fe3c:	pop	{r4, r5, fp, pc}
   2fe40:	push	{r4, r5, fp, lr}
   2fe44:	add	fp, sp, #8
   2fe48:	sub	sp, sp, #104	; 0x68
   2fe4c:	ldr	ip, [fp, #12]
   2fe50:	ldr	lr, [fp, #8]
   2fe54:	str	r0, [fp, #-16]
   2fe58:	str	r1, [fp, #-20]	; 0xffffffec
   2fe5c:	str	r2, [fp, #-24]	; 0xffffffe8
   2fe60:	str	r3, [fp, #-28]	; 0xffffffe4
   2fe64:	ldr	r0, [fp, #8]
   2fe68:	mvn	r1, #0
   2fe6c:	add	r1, r0, r1
   2fe70:	str	r1, [fp, #8]
   2fe74:	cmp	r0, #0
   2fe78:	movw	r0, #0
   2fe7c:	movgt	r0, #1
   2fe80:	and	r0, r0, #1
   2fe84:	str	r0, [fp, #-40]	; 0xffffffd8
   2fe88:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2fe8c:	cmp	r0, #0
   2fe90:	bne	2fea0 <flatcc_verify_table_vector_field@@Base+0x150>
   2fe94:	movw	r0, #3
   2fe98:	str	r0, [fp, #-12]
   2fe9c:	b	300a0 <flatcc_verify_table_vector_field@@Base+0x350>
   2fea0:	b	2fea4 <flatcc_verify_table_vector_field@@Base+0x154>
   2fea4:	ldr	r0, [pc, #512]	; 300ac <flatcc_verify_table_vector_field@@Base+0x35c>
   2fea8:	ldr	r1, [fp, #-16]
   2feac:	ldr	r2, [fp, #-20]	; 0xffffffec
   2feb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2feb4:	ldr	ip, [fp, #-28]	; 0xffffffe4
   2feb8:	str	r0, [fp, #-44]	; 0xffffffd4
   2febc:	mov	r0, r1
   2fec0:	mov	r1, r2
   2fec4:	mov	r2, r3
   2fec8:	mov	r3, ip
   2fecc:	movw	ip, #4
   2fed0:	str	ip, [sp]
   2fed4:	movw	ip, #4
   2fed8:	uxth	ip, ip
   2fedc:	str	ip, [sp, #4]
   2fee0:	ldr	ip, [fp, #-44]	; 0xffffffd4
   2fee4:	str	ip, [sp, #8]
   2fee8:	bl	2f5e8 <flatcc_verify_vector_field@@Base+0x110>
   2feec:	cmp	r0, #0
   2fef0:	beq	2ff44 <flatcc_verify_table_vector_field@@Base+0x1f4>
   2fef4:	ldr	r0, [pc, #432]	; 300ac <flatcc_verify_table_vector_field@@Base+0x35c>
   2fef8:	ldr	r1, [fp, #-16]
   2fefc:	ldr	r2, [fp, #-20]	; 0xffffffec
   2ff00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ff04:	ldr	ip, [fp, #-28]	; 0xffffffe4
   2ff08:	str	r0, [fp, #-48]	; 0xffffffd0
   2ff0c:	mov	r0, r1
   2ff10:	mov	r1, r2
   2ff14:	mov	r2, r3
   2ff18:	mov	r3, ip
   2ff1c:	movw	ip, #4
   2ff20:	str	ip, [sp]
   2ff24:	movw	ip, #4
   2ff28:	uxth	ip, ip
   2ff2c:	str	ip, [sp, #4]
   2ff30:	ldr	ip, [fp, #-48]	; 0xffffffd0
   2ff34:	str	ip, [sp, #8]
   2ff38:	bl	2f5e8 <flatcc_verify_vector_field@@Base+0x110>
   2ff3c:	str	r0, [fp, #-12]
   2ff40:	b	300a0 <flatcc_verify_table_vector_field@@Base+0x350>
   2ff44:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2ff48:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2ff4c:	add	r0, r1, r0
   2ff50:	str	r0, [fp, #-24]	; 0xffffffe8
   2ff54:	ldr	r0, [fp, #-16]
   2ff58:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2ff5c:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   2ff60:	str	r0, [fp, #-36]	; 0xffffffdc
   2ff64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2ff68:	add	r0, r0, #4
   2ff6c:	str	r0, [fp, #-24]	; 0xffffffe8
   2ff70:	movw	r0, #0
   2ff74:	str	r0, [fp, #-32]	; 0xffffffe0
   2ff78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2ff7c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2ff80:	cmp	r0, r1
   2ff84:	bcs	30098 <flatcc_verify_table_vector_field@@Base+0x348>
   2ff88:	ldr	r0, [fp, #-16]
   2ff8c:	ldr	r1, [fp, #-20]	; 0xffffffec
   2ff90:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2ff94:	ldr	r3, [fp, #-16]
   2ff98:	ldr	ip, [fp, #-24]	; 0xffffffe8
   2ff9c:	str	r0, [fp, #-52]	; 0xffffffcc
   2ffa0:	mov	r0, r3
   2ffa4:	str	r1, [sp, #56]	; 0x38
   2ffa8:	mov	r1, ip
   2ffac:	str	r2, [sp, #52]	; 0x34
   2ffb0:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   2ffb4:	ldr	r1, [fp, #8]
   2ffb8:	ldr	r2, [fp, #12]
   2ffbc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   2ffc0:	str	r0, [sp, #48]	; 0x30
   2ffc4:	mov	r0, r3
   2ffc8:	ldr	ip, [sp, #56]	; 0x38
   2ffcc:	str	r1, [sp, #44]	; 0x2c
   2ffd0:	mov	r1, ip
   2ffd4:	ldr	lr, [sp, #52]	; 0x34
   2ffd8:	str	r2, [sp, #40]	; 0x28
   2ffdc:	mov	r2, lr
   2ffe0:	ldr	r3, [sp, #48]	; 0x30
   2ffe4:	ldr	r4, [sp, #44]	; 0x2c
   2ffe8:	str	r4, [sp]
   2ffec:	ldr	r5, [sp, #40]	; 0x28
   2fff0:	str	r5, [sp, #4]
   2fff4:	bl	2fa7c <flatcc_verify_table_field@@Base+0xf0>
   2fff8:	cmp	r0, #0
   2fffc:	beq	30078 <flatcc_verify_table_vector_field@@Base+0x328>
   30000:	ldr	r0, [fp, #-16]
   30004:	ldr	r1, [fp, #-20]	; 0xffffffec
   30008:	ldr	r2, [fp, #-24]	; 0xffffffe8
   3000c:	ldr	r3, [fp, #-16]
   30010:	ldr	ip, [fp, #-24]	; 0xffffffe8
   30014:	str	r0, [sp, #36]	; 0x24
   30018:	mov	r0, r3
   3001c:	str	r1, [sp, #32]
   30020:	mov	r1, ip
   30024:	str	r2, [sp, #28]
   30028:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   3002c:	ldr	r1, [fp, #8]
   30030:	ldr	r2, [fp, #12]
   30034:	ldr	r3, [sp, #36]	; 0x24
   30038:	str	r0, [sp, #24]
   3003c:	mov	r0, r3
   30040:	ldr	ip, [sp, #32]
   30044:	str	r1, [sp, #20]
   30048:	mov	r1, ip
   3004c:	ldr	lr, [sp, #28]
   30050:	str	r2, [sp, #16]
   30054:	mov	r2, lr
   30058:	ldr	r3, [sp, #24]
   3005c:	ldr	r4, [sp, #20]
   30060:	str	r4, [sp]
   30064:	ldr	r5, [sp, #16]
   30068:	str	r5, [sp, #4]
   3006c:	bl	2fa7c <flatcc_verify_table_field@@Base+0xf0>
   30070:	str	r0, [fp, #-12]
   30074:	b	300a0 <flatcc_verify_table_vector_field@@Base+0x350>
   30078:	b	3007c <flatcc_verify_table_vector_field@@Base+0x32c>
   3007c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   30080:	add	r0, r0, #1
   30084:	str	r0, [fp, #-32]	; 0xffffffe0
   30088:	ldr	r0, [fp, #-24]	; 0xffffffe8
   3008c:	add	r0, r0, #4
   30090:	str	r0, [fp, #-24]	; 0xffffffe8
   30094:	b	2ff78 <flatcc_verify_table_vector_field@@Base+0x228>
   30098:	movw	r0, #0
   3009c:	str	r0, [fp, #-12]
   300a0:	ldr	r0, [fp, #-12]
   300a4:	sub	sp, fp, #8
   300a8:	pop	{r4, r5, fp, pc}
   300ac:	svccc	0x00ffffff

000300b0 <flatcc_verify_union_table@@Base>:
   300b0:	push	{fp, lr}
   300b4:	mov	fp, sp
   300b8:	sub	sp, sp, #16
   300bc:	str	r0, [fp, #-4]
   300c0:	str	r1, [sp, #8]
   300c4:	ldr	r0, [fp, #-4]
   300c8:	ldr	r0, [r0]
   300cc:	ldr	r1, [fp, #-4]
   300d0:	ldr	r1, [r1, #4]
   300d4:	ldr	r2, [fp, #-4]
   300d8:	ldr	r2, [r2, #16]
   300dc:	ldr	r3, [fp, #-4]
   300e0:	ldr	r3, [r3, #20]
   300e4:	ldr	ip, [fp, #-4]
   300e8:	ldr	ip, [ip, #8]
   300ec:	ldr	lr, [sp, #8]
   300f0:	str	ip, [sp]
   300f4:	str	lr, [sp, #4]
   300f8:	bl	2fa7c <flatcc_verify_table_field@@Base+0xf0>
   300fc:	mov	sp, fp
   30100:	pop	{fp, pc}

00030104 <flatcc_verify_union_struct@@Base>:
   30104:	push	{fp, lr}
   30108:	mov	fp, sp
   3010c:	sub	sp, sp, #16
   30110:	str	r0, [fp, #-4]
   30114:	str	r1, [sp, #8]
   30118:	strh	r2, [sp, #6]
   3011c:	ldr	r0, [fp, #-4]
   30120:	ldr	r0, [r0, #4]
   30124:	ldr	r1, [fp, #-4]
   30128:	ldr	r1, [r1, #16]
   3012c:	ldr	r2, [fp, #-4]
   30130:	ldr	r2, [r2, #20]
   30134:	ldr	r3, [sp, #8]
   30138:	ldrh	ip, [sp, #6]
   3013c:	str	ip, [sp]
   30140:	bl	3014c <flatcc_verify_union_struct@@Base+0x48>
   30144:	mov	sp, fp
   30148:	pop	{fp, pc}
   3014c:	sub	sp, sp, #36	; 0x24
   30150:	ldr	ip, [sp, #36]	; 0x24
   30154:	str	r0, [sp, #28]
   30158:	str	r1, [sp, #24]
   3015c:	str	r2, [sp, #20]
   30160:	str	r3, [sp, #16]
   30164:	strh	ip, [sp, #14]
   30168:	ldr	r0, [sp, #20]
   3016c:	cmp	r0, #0
   30170:	beq	3018c <flatcc_verify_union_struct@@Base+0x88>
   30174:	ldr	r0, [sp, #24]
   30178:	ldr	r1, [sp, #20]
   3017c:	add	r0, r0, r1
   30180:	ldr	r1, [sp, #28]
   30184:	cmp	r0, r1
   30188:	bls	30198 <flatcc_verify_union_struct@@Base+0x94>
   3018c:	movw	r0, #18
   30190:	str	r0, [sp, #32]
   30194:	b	30280 <flatcc_verify_union_struct@@Base+0x17c>
   30198:	ldr	r0, [sp, #20]
   3019c:	ldr	r1, [sp, #24]
   301a0:	add	r0, r1, r0
   301a4:	str	r0, [sp, #24]
   301a8:	ldr	r0, [sp, #24]
   301ac:	ldr	r1, [sp, #16]
   301b0:	add	r0, r0, r1
   301b4:	ldr	r1, [sp, #24]
   301b8:	cmp	r0, r1
   301bc:	movw	r0, #0
   301c0:	movcs	r0, #1
   301c4:	and	r0, r0, #1
   301c8:	str	r0, [sp, #8]
   301cc:	ldr	r0, [sp, #8]
   301d0:	cmp	r0, #0
   301d4:	bne	301e4 <flatcc_verify_union_struct@@Base+0xe0>
   301d8:	movw	r0, #10
   301dc:	str	r0, [sp, #32]
   301e0:	b	30280 <flatcc_verify_union_struct@@Base+0x17c>
   301e4:	b	301e8 <flatcc_verify_union_struct@@Base+0xe4>
   301e8:	b	301ec <flatcc_verify_union_struct@@Base+0xe8>
   301ec:	ldr	r0, [sp, #24]
   301f0:	ldr	r1, [sp, #16]
   301f4:	add	r0, r0, r1
   301f8:	ldr	r1, [sp, #28]
   301fc:	cmp	r0, r1
   30200:	movw	r0, #0
   30204:	movls	r0, #1
   30208:	and	r0, r0, #1
   3020c:	str	r0, [sp, #4]
   30210:	ldr	r0, [sp, #4]
   30214:	cmp	r0, #0
   30218:	bne	30228 <flatcc_verify_union_struct@@Base+0x124>
   3021c:	movw	r0, #9
   30220:	str	r0, [sp, #32]
   30224:	b	30280 <flatcc_verify_union_struct@@Base+0x17c>
   30228:	b	3022c <flatcc_verify_union_struct@@Base+0x128>
   3022c:	b	30230 <flatcc_verify_union_struct@@Base+0x12c>
   30230:	ldr	r0, [sp, #24]
   30234:	ldrh	r1, [sp, #14]
   30238:	sub	r1, r1, #1
   3023c:	and	r0, r0, r1
   30240:	cmp	r0, #0
   30244:	movw	r0, #0
   30248:	movne	r0, #1
   3024c:	mvn	r1, #0
   30250:	eor	r0, r0, r1
   30254:	and	r0, r0, #1
   30258:	str	r0, [sp]
   3025c:	ldr	r0, [sp]
   30260:	cmp	r0, #0
   30264:	bne	30274 <flatcc_verify_union_struct@@Base+0x170>
   30268:	movw	r0, #11
   3026c:	str	r0, [sp, #32]
   30270:	b	30280 <flatcc_verify_union_struct@@Base+0x17c>
   30274:	b	30278 <flatcc_verify_union_struct@@Base+0x174>
   30278:	movw	r0, #0
   3027c:	str	r0, [sp, #32]
   30280:	ldr	r0, [sp, #32]
   30284:	add	sp, sp, #36	; 0x24
   30288:	bx	lr

0003028c <flatcc_verify_union_string@@Base>:
   3028c:	push	{fp, lr}
   30290:	mov	fp, sp
   30294:	sub	sp, sp, #8
   30298:	str	r0, [sp, #4]
   3029c:	ldr	r0, [sp, #4]
   302a0:	ldr	r0, [r0]
   302a4:	ldr	r1, [sp, #4]
   302a8:	ldr	r1, [r1, #4]
   302ac:	ldr	r2, [sp, #4]
   302b0:	ldr	r2, [r2, #16]
   302b4:	ldr	r3, [sp, #4]
   302b8:	ldr	r3, [r3, #20]
   302bc:	bl	2f390 <flatcc_verify_string_field@@Base+0x214>
   302c0:	mov	sp, fp
   302c4:	pop	{fp, pc}

000302c8 <flatcc_verify_buffer_header@@Base>:
   302c8:	push	{fp, lr}
   302cc:	mov	fp, sp
   302d0:	sub	sp, sp, #48	; 0x30
   302d4:	str	r0, [fp, #-8]
   302d8:	str	r1, [fp, #-12]
   302dc:	str	r2, [fp, #-16]
   302e0:	ldr	r0, [fp, #-8]
   302e4:	and	r0, r0, #3
   302e8:	cmp	r0, #0
   302ec:	movw	r0, #0
   302f0:	movne	r0, #1
   302f4:	mvn	r1, #0
   302f8:	eor	r0, r0, r1
   302fc:	and	r0, r0, #1
   30300:	str	r0, [sp, #20]
   30304:	ldr	r0, [sp, #20]
   30308:	cmp	r0, #0
   3030c:	bne	3031c <flatcc_verify_buffer_header@@Base+0x54>
   30310:	movw	r0, #5
   30314:	str	r0, [fp, #-4]
   30318:	b	3041c <flatcc_verify_buffer_header@@Base+0x154>
   3031c:	b	30320 <flatcc_verify_buffer_header@@Base+0x58>
   30320:	b	30324 <flatcc_verify_buffer_header@@Base+0x5c>
   30324:	ldr	r0, [fp, #-12]
   30328:	cmn	r0, #9
   3032c:	movw	r0, #0
   30330:	movls	r0, #1
   30334:	and	r0, r0, #1
   30338:	str	r0, [sp, #16]
   3033c:	ldr	r0, [sp, #16]
   30340:	cmp	r0, #0
   30344:	bne	30354 <flatcc_verify_buffer_header@@Base+0x8c>
   30348:	movw	r0, #6
   3034c:	str	r0, [fp, #-4]
   30350:	b	3041c <flatcc_verify_buffer_header@@Base+0x154>
   30354:	b	30358 <flatcc_verify_buffer_header@@Base+0x90>
   30358:	b	3035c <flatcc_verify_buffer_header@@Base+0x94>
   3035c:	ldr	r0, [fp, #-12]
   30360:	cmp	r0, #8
   30364:	movw	r0, #0
   30368:	movcs	r0, #1
   3036c:	and	r0, r0, #1
   30370:	str	r0, [sp, #12]
   30374:	ldr	r0, [sp, #12]
   30378:	cmp	r0, #0
   3037c:	bne	3038c <flatcc_verify_buffer_header@@Base+0xc4>
   30380:	movw	r0, #1
   30384:	str	r0, [fp, #-4]
   30388:	b	3041c <flatcc_verify_buffer_header@@Base+0x154>
   3038c:	b	30390 <flatcc_verify_buffer_header@@Base+0xc8>
   30390:	ldr	r0, [fp, #-16]
   30394:	movw	r1, #0
   30398:	cmp	r0, r1
   3039c:	beq	30414 <flatcc_verify_buffer_header@@Base+0x14c>
   303a0:	ldr	r0, [fp, #-16]
   303a4:	bl	30428 <flatcc_verify_buffer_header@@Base+0x160>
   303a8:	str	r0, [sp, #24]
   303ac:	ldr	r0, [fp, #-8]
   303b0:	movw	r1, #4
   303b4:	bl	30468 <flatcc_verify_buffer_header@@Base+0x1a0>
   303b8:	str	r0, [fp, #-20]	; 0xffffffec
   303bc:	ldr	r0, [sp, #24]
   303c0:	cmp	r0, #0
   303c4:	movw	r0, #1
   303c8:	str	r0, [sp, #4]
   303cc:	beq	303e8 <flatcc_verify_buffer_header@@Base+0x120>
   303d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   303d4:	ldr	r1, [sp, #24]
   303d8:	cmp	r0, r1
   303dc:	movw	r0, #0
   303e0:	moveq	r0, #1
   303e4:	str	r0, [sp, #4]
   303e8:	ldr	r0, [sp, #4]
   303ec:	and	r0, r0, #1
   303f0:	str	r0, [sp, #8]
   303f4:	ldr	r0, [sp, #8]
   303f8:	cmp	r0, #0
   303fc:	bne	3040c <flatcc_verify_buffer_header@@Base+0x144>
   30400:	movw	r0, #2
   30404:	str	r0, [fp, #-4]
   30408:	b	3041c <flatcc_verify_buffer_header@@Base+0x154>
   3040c:	b	30410 <flatcc_verify_buffer_header@@Base+0x148>
   30410:	b	30414 <flatcc_verify_buffer_header@@Base+0x14c>
   30414:	movw	r0, #0
   30418:	str	r0, [fp, #-4]
   3041c:	ldr	r0, [fp, #-4]
   30420:	mov	sp, fp
   30424:	pop	{fp, pc}
   30428:	push	{fp, lr}
   3042c:	mov	fp, sp
   30430:	sub	sp, sp, #16
   30434:	str	r0, [fp, #-4]
   30438:	movw	r0, #0
   3043c:	str	r0, [sp, #8]
   30440:	add	r0, sp, #8
   30444:	ldr	r1, [fp, #-4]
   30448:	movw	r2, #4
   3044c:	bl	12e38 <strncpy@plt>
   30450:	ldr	r1, [sp, #8]
   30454:	str	r0, [sp, #4]
   30458:	mov	r0, r1
   3045c:	bl	31624 <flatcc_verify_union_vector_field@@Base+0x754>
   30460:	mov	sp, fp
   30464:	pop	{fp, pc}
   30468:	push	{fp, lr}
   3046c:	mov	fp, sp
   30470:	sub	sp, sp, #8
   30474:	str	r0, [sp, #4]
   30478:	str	r1, [sp]
   3047c:	ldr	r0, [sp, #4]
   30480:	ldr	r1, [sp]
   30484:	add	r0, r0, r1
   30488:	bl	31638 <flatcc_verify_union_vector_field@@Base+0x768>
   3048c:	mov	sp, fp
   30490:	pop	{fp, pc}

00030494 <flatcc_verify_typed_buffer_header@@Base>:
   30494:	push	{fp, lr}
   30498:	mov	fp, sp
   3049c:	sub	sp, sp, #48	; 0x30
   304a0:	str	r0, [fp, #-8]
   304a4:	str	r1, [fp, #-12]
   304a8:	str	r2, [fp, #-16]
   304ac:	ldr	r0, [fp, #-8]
   304b0:	and	r0, r0, #3
   304b4:	cmp	r0, #0
   304b8:	movw	r0, #0
   304bc:	movne	r0, #1
   304c0:	mvn	r1, #0
   304c4:	eor	r0, r0, r1
   304c8:	and	r0, r0, #1
   304cc:	str	r0, [sp, #20]
   304d0:	ldr	r0, [sp, #20]
   304d4:	cmp	r0, #0
   304d8:	bne	304e8 <flatcc_verify_typed_buffer_header@@Base+0x54>
   304dc:	movw	r0, #5
   304e0:	str	r0, [fp, #-4]
   304e4:	b	305e0 <flatcc_verify_typed_buffer_header@@Base+0x14c>
   304e8:	b	304ec <flatcc_verify_typed_buffer_header@@Base+0x58>
   304ec:	b	304f0 <flatcc_verify_typed_buffer_header@@Base+0x5c>
   304f0:	ldr	r0, [fp, #-12]
   304f4:	cmn	r0, #9
   304f8:	movw	r0, #0
   304fc:	movls	r0, #1
   30500:	and	r0, r0, #1
   30504:	str	r0, [sp, #16]
   30508:	ldr	r0, [sp, #16]
   3050c:	cmp	r0, #0
   30510:	bne	30520 <flatcc_verify_typed_buffer_header@@Base+0x8c>
   30514:	movw	r0, #6
   30518:	str	r0, [fp, #-4]
   3051c:	b	305e0 <flatcc_verify_typed_buffer_header@@Base+0x14c>
   30520:	b	30524 <flatcc_verify_typed_buffer_header@@Base+0x90>
   30524:	b	30528 <flatcc_verify_typed_buffer_header@@Base+0x94>
   30528:	ldr	r0, [fp, #-12]
   3052c:	cmp	r0, #8
   30530:	movw	r0, #0
   30534:	movcs	r0, #1
   30538:	and	r0, r0, #1
   3053c:	str	r0, [sp, #12]
   30540:	ldr	r0, [sp, #12]
   30544:	cmp	r0, #0
   30548:	bne	30558 <flatcc_verify_typed_buffer_header@@Base+0xc4>
   3054c:	movw	r0, #1
   30550:	str	r0, [fp, #-4]
   30554:	b	305e0 <flatcc_verify_typed_buffer_header@@Base+0x14c>
   30558:	b	3055c <flatcc_verify_typed_buffer_header@@Base+0xc8>
   3055c:	ldr	r0, [fp, #-16]
   30560:	cmp	r0, #0
   30564:	beq	305d8 <flatcc_verify_typed_buffer_header@@Base+0x144>
   30568:	ldr	r0, [fp, #-16]
   3056c:	str	r0, [sp, #24]
   30570:	ldr	r0, [fp, #-8]
   30574:	movw	r1, #4
   30578:	bl	30468 <flatcc_verify_buffer_header@@Base+0x1a0>
   3057c:	str	r0, [fp, #-20]	; 0xffffffec
   30580:	ldr	r0, [sp, #24]
   30584:	cmp	r0, #0
   30588:	movw	r0, #1
   3058c:	str	r0, [sp, #4]
   30590:	beq	305ac <flatcc_verify_typed_buffer_header@@Base+0x118>
   30594:	ldr	r0, [fp, #-20]	; 0xffffffec
   30598:	ldr	r1, [sp, #24]
   3059c:	cmp	r0, r1
   305a0:	movw	r0, #0
   305a4:	moveq	r0, #1
   305a8:	str	r0, [sp, #4]
   305ac:	ldr	r0, [sp, #4]
   305b0:	and	r0, r0, #1
   305b4:	str	r0, [sp, #8]
   305b8:	ldr	r0, [sp, #8]
   305bc:	cmp	r0, #0
   305c0:	bne	305d0 <flatcc_verify_typed_buffer_header@@Base+0x13c>
   305c4:	movw	r0, #2
   305c8:	str	r0, [fp, #-4]
   305cc:	b	305e0 <flatcc_verify_typed_buffer_header@@Base+0x14c>
   305d0:	b	305d4 <flatcc_verify_typed_buffer_header@@Base+0x140>
   305d4:	b	305d8 <flatcc_verify_typed_buffer_header@@Base+0x144>
   305d8:	movw	r0, #0
   305dc:	str	r0, [fp, #-4]
   305e0:	ldr	r0, [fp, #-4]
   305e4:	mov	sp, fp
   305e8:	pop	{fp, pc}

000305ec <flatcc_verify_struct_as_root@@Base>:
   305ec:	push	{fp, lr}
   305f0:	mov	fp, sp
   305f4:	sub	sp, sp, #40	; 0x28
   305f8:	ldr	ip, [fp, #8]
   305fc:	str	r0, [fp, #-8]
   30600:	str	r1, [fp, #-12]
   30604:	str	r2, [fp, #-16]
   30608:	str	r3, [sp, #20]
   3060c:	strh	ip, [sp, #18]
   30610:	ldr	r0, [fp, #-8]
   30614:	ldr	r1, [fp, #-12]
   30618:	ldr	r2, [fp, #-16]
   3061c:	bl	302c8 <flatcc_verify_buffer_header@@Base>
   30620:	cmp	r0, #0
   30624:	beq	30640 <flatcc_verify_struct_as_root@@Base+0x54>
   30628:	ldr	r0, [fp, #-8]
   3062c:	ldr	r1, [fp, #-12]
   30630:	ldr	r2, [fp, #-16]
   30634:	bl	302c8 <flatcc_verify_buffer_header@@Base>
   30638:	str	r0, [fp, #-4]
   3063c:	b	30680 <flatcc_verify_struct_as_root@@Base+0x94>
   30640:	ldr	r0, [fp, #-12]
   30644:	ldr	r1, [fp, #-8]
   30648:	str	r0, [sp, #12]
   3064c:	mov	r0, r1
   30650:	movw	r1, #0
   30654:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   30658:	ldr	r3, [sp, #20]
   3065c:	ldr	r1, [sp, #12]
   30660:	str	r0, [sp, #8]
   30664:	mov	r0, r1
   30668:	movw	r1, #0
   3066c:	ldr	r2, [sp, #8]
   30670:	ldrh	ip, [sp, #18]
   30674:	str	ip, [sp]
   30678:	bl	3014c <flatcc_verify_union_struct@@Base+0x48>
   3067c:	str	r0, [fp, #-4]
   30680:	ldr	r0, [fp, #-4]
   30684:	mov	sp, fp
   30688:	pop	{fp, pc}

0003068c <flatcc_verify_struct_as_typed_root@@Base>:
   3068c:	push	{fp, lr}
   30690:	mov	fp, sp
   30694:	sub	sp, sp, #40	; 0x28
   30698:	ldr	ip, [fp, #8]
   3069c:	str	r0, [fp, #-8]
   306a0:	str	r1, [fp, #-12]
   306a4:	str	r2, [fp, #-16]
   306a8:	str	r3, [sp, #20]
   306ac:	strh	ip, [sp, #18]
   306b0:	ldr	r0, [fp, #-8]
   306b4:	ldr	r1, [fp, #-12]
   306b8:	ldr	r2, [fp, #-16]
   306bc:	bl	30494 <flatcc_verify_typed_buffer_header@@Base>
   306c0:	cmp	r0, #0
   306c4:	beq	306e0 <flatcc_verify_struct_as_typed_root@@Base+0x54>
   306c8:	ldr	r0, [fp, #-8]
   306cc:	ldr	r1, [fp, #-12]
   306d0:	ldr	r2, [fp, #-16]
   306d4:	bl	30494 <flatcc_verify_typed_buffer_header@@Base>
   306d8:	str	r0, [fp, #-4]
   306dc:	b	30720 <flatcc_verify_struct_as_typed_root@@Base+0x94>
   306e0:	ldr	r0, [fp, #-12]
   306e4:	ldr	r1, [fp, #-8]
   306e8:	str	r0, [sp, #12]
   306ec:	mov	r0, r1
   306f0:	movw	r1, #0
   306f4:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   306f8:	ldr	r3, [sp, #20]
   306fc:	ldr	r1, [sp, #12]
   30700:	str	r0, [sp, #8]
   30704:	mov	r0, r1
   30708:	movw	r1, #0
   3070c:	ldr	r2, [sp, #8]
   30710:	ldrh	ip, [sp, #18]
   30714:	str	ip, [sp]
   30718:	bl	3014c <flatcc_verify_union_struct@@Base+0x48>
   3071c:	str	r0, [fp, #-4]
   30720:	ldr	r0, [fp, #-4]
   30724:	mov	sp, fp
   30728:	pop	{fp, pc}

0003072c <flatcc_verify_table_as_root@@Base>:
   3072c:	push	{fp, lr}
   30730:	mov	fp, sp
   30734:	sub	sp, sp, #48	; 0x30
   30738:	str	r0, [fp, #-8]
   3073c:	str	r1, [fp, #-12]
   30740:	str	r2, [fp, #-16]
   30744:	str	r3, [fp, #-20]	; 0xffffffec
   30748:	ldr	r0, [fp, #-8]
   3074c:	ldr	r1, [fp, #-12]
   30750:	ldr	r2, [fp, #-16]
   30754:	bl	302c8 <flatcc_verify_buffer_header@@Base>
   30758:	cmp	r0, #0
   3075c:	beq	30778 <flatcc_verify_table_as_root@@Base+0x4c>
   30760:	ldr	r0, [fp, #-8]
   30764:	ldr	r1, [fp, #-12]
   30768:	ldr	r2, [fp, #-16]
   3076c:	bl	302c8 <flatcc_verify_buffer_header@@Base>
   30770:	str	r0, [fp, #-4]
   30774:	b	307d8 <flatcc_verify_table_as_root@@Base+0xac>
   30778:	ldr	r0, [fp, #-8]
   3077c:	ldr	r1, [fp, #-12]
   30780:	ldr	r2, [fp, #-8]
   30784:	str	r0, [sp, #24]
   30788:	mov	r0, r2
   3078c:	movw	r2, #0
   30790:	str	r1, [sp, #20]
   30794:	mov	r1, r2
   30798:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   3079c:	ldr	r1, [fp, #-20]	; 0xffffffec
   307a0:	ldr	r2, [sp, #24]
   307a4:	str	r0, [sp, #16]
   307a8:	mov	r0, r2
   307ac:	ldr	r3, [sp, #20]
   307b0:	str	r1, [sp, #12]
   307b4:	mov	r1, r3
   307b8:	movw	r2, #0
   307bc:	ldr	r3, [sp, #16]
   307c0:	movw	ip, #100	; 0x64
   307c4:	str	ip, [sp]
   307c8:	ldr	ip, [sp, #12]
   307cc:	str	ip, [sp, #4]
   307d0:	bl	2fa7c <flatcc_verify_table_field@@Base+0xf0>
   307d4:	str	r0, [fp, #-4]
   307d8:	ldr	r0, [fp, #-4]
   307dc:	mov	sp, fp
   307e0:	pop	{fp, pc}

000307e4 <flatcc_verify_table_as_typed_root@@Base>:
   307e4:	push	{fp, lr}
   307e8:	mov	fp, sp
   307ec:	sub	sp, sp, #48	; 0x30
   307f0:	str	r0, [fp, #-8]
   307f4:	str	r1, [fp, #-12]
   307f8:	str	r2, [fp, #-16]
   307fc:	str	r3, [fp, #-20]	; 0xffffffec
   30800:	ldr	r0, [fp, #-8]
   30804:	ldr	r1, [fp, #-12]
   30808:	ldr	r2, [fp, #-16]
   3080c:	bl	30494 <flatcc_verify_typed_buffer_header@@Base>
   30810:	cmp	r0, #0
   30814:	beq	30830 <flatcc_verify_table_as_typed_root@@Base+0x4c>
   30818:	ldr	r0, [fp, #-8]
   3081c:	ldr	r1, [fp, #-12]
   30820:	ldr	r2, [fp, #-16]
   30824:	bl	30494 <flatcc_verify_typed_buffer_header@@Base>
   30828:	str	r0, [fp, #-4]
   3082c:	b	30890 <flatcc_verify_table_as_typed_root@@Base+0xac>
   30830:	ldr	r0, [fp, #-8]
   30834:	ldr	r1, [fp, #-12]
   30838:	ldr	r2, [fp, #-8]
   3083c:	str	r0, [sp, #24]
   30840:	mov	r0, r2
   30844:	movw	r2, #0
   30848:	str	r1, [sp, #20]
   3084c:	mov	r1, r2
   30850:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   30854:	ldr	r1, [fp, #-20]	; 0xffffffec
   30858:	ldr	r2, [sp, #24]
   3085c:	str	r0, [sp, #16]
   30860:	mov	r0, r2
   30864:	ldr	r3, [sp, #20]
   30868:	str	r1, [sp, #12]
   3086c:	mov	r1, r3
   30870:	movw	r2, #0
   30874:	ldr	r3, [sp, #16]
   30878:	movw	ip, #100	; 0x64
   3087c:	str	ip, [sp]
   30880:	ldr	ip, [sp, #12]
   30884:	str	ip, [sp, #4]
   30888:	bl	2fa7c <flatcc_verify_table_field@@Base+0xf0>
   3088c:	str	r0, [fp, #-4]
   30890:	ldr	r0, [fp, #-4]
   30894:	mov	sp, fp
   30898:	pop	{fp, pc}

0003089c <flatcc_verify_struct_as_nested_root@@Base>:
   3089c:	push	{fp, lr}
   308a0:	mov	fp, sp
   308a4:	sub	sp, sp, #48	; 0x30
   308a8:	ldr	ip, [fp, #12]
   308ac:	ldr	lr, [fp, #8]
   308b0:	str	r0, [fp, #-8]
   308b4:	strh	r1, [fp, #-10]
   308b8:	str	r2, [fp, #-16]
   308bc:	str	r3, [fp, #-20]	; 0xffffffec
   308c0:	strh	ip, [fp, #-22]	; 0xffffffea
   308c4:	ldr	r0, [fp, #-8]
   308c8:	ldrh	r1, [fp, #-10]
   308cc:	ldr	r2, [fp, #-16]
   308d0:	ldrh	r3, [fp, #-22]	; 0xffffffea
   308d4:	uxth	r1, r1
   308d8:	movw	ip, #1
   308dc:	uxth	ip, ip
   308e0:	str	ip, [sp]
   308e4:	mvn	ip, #0
   308e8:	str	ip, [sp, #4]
   308ec:	str	lr, [sp, #12]
   308f0:	bl	2f4d8 <flatcc_verify_vector_field@@Base>
   308f4:	cmp	r0, #0
   308f8:	beq	30930 <flatcc_verify_struct_as_nested_root@@Base+0x94>
   308fc:	ldr	r0, [fp, #-8]
   30900:	ldrh	r1, [fp, #-10]
   30904:	ldr	r2, [fp, #-16]
   30908:	ldrh	r3, [fp, #-22]	; 0xffffffea
   3090c:	uxth	r1, r1
   30910:	movw	ip, #1
   30914:	uxth	ip, ip
   30918:	str	ip, [sp]
   3091c:	mvn	ip, #0
   30920:	str	ip, [sp, #4]
   30924:	bl	2f4d8 <flatcc_verify_vector_field@@Base>
   30928:	str	r0, [fp, #-4]
   3092c:	b	309b8 <flatcc_verify_struct_as_nested_root@@Base+0x11c>
   30930:	ldr	r0, [fp, #-8]
   30934:	ldrh	r1, [fp, #-10]
   30938:	bl	309c4 <flatcc_verify_struct_as_nested_root@@Base+0x128>
   3093c:	str	r0, [sp, #20]
   30940:	movw	r1, #0
   30944:	cmp	r1, r0
   30948:	bne	30958 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   3094c:	movw	r0, #0
   30950:	str	r0, [fp, #-4]
   30954:	b	309b8 <flatcc_verify_struct_as_nested_root@@Base+0x11c>
   30958:	ldr	r0, [sp, #20]
   3095c:	ldr	r1, [sp, #20]
   30960:	str	r0, [sp, #8]
   30964:	mov	r0, r1
   30968:	movw	r1, #0
   3096c:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   30970:	ldr	r1, [sp, #8]
   30974:	add	r0, r1, r0
   30978:	str	r0, [sp, #20]
   3097c:	ldr	r0, [sp, #20]
   30980:	movw	r1, #0
   30984:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   30988:	str	r0, [sp, #16]
   3098c:	ldr	r0, [sp, #20]
   30990:	add	r0, r0, #4
   30994:	str	r0, [sp, #20]
   30998:	ldr	r0, [sp, #20]
   3099c:	ldr	r1, [sp, #16]
   309a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   309a4:	ldr	r3, [fp, #8]
   309a8:	ldrh	ip, [fp, #-22]	; 0xffffffea
   309ac:	str	ip, [sp]
   309b0:	bl	305ec <flatcc_verify_struct_as_root@@Base>
   309b4:	str	r0, [fp, #-4]
   309b8:	ldr	r0, [fp, #-4]
   309bc:	mov	sp, fp
   309c0:	pop	{fp, pc}
   309c4:	push	{fp, lr}
   309c8:	mov	fp, sp
   309cc:	sub	sp, sp, #16
   309d0:	str	r0, [fp, #-4]
   309d4:	strh	r1, [fp, #-6]
   309d8:	ldr	r0, [fp, #-4]
   309dc:	ldrh	r1, [fp, #-6]
   309e0:	bl	30e68 <flatcc_verify_union_field@@Base+0x290>
   309e4:	strh	r0, [sp, #8]
   309e8:	ldrh	r0, [sp, #8]
   309ec:	cmp	r0, #0
   309f0:	beq	30a18 <flatcc_verify_struct_as_nested_root@@Base+0x17c>
   309f4:	ldr	r0, [fp, #-4]
   309f8:	ldr	r0, [r0]
   309fc:	ldr	r1, [fp, #-4]
   30a00:	ldr	r1, [r1, #16]
   30a04:	add	r0, r0, r1
   30a08:	ldrh	r1, [sp, #8]
   30a0c:	add	r0, r0, r1
   30a10:	str	r0, [sp, #4]
   30a14:	b	30a24 <flatcc_verify_struct_as_nested_root@@Base+0x188>
   30a18:	movw	r0, #0
   30a1c:	str	r0, [sp, #4]
   30a20:	b	30a24 <flatcc_verify_struct_as_nested_root@@Base+0x188>
   30a24:	ldr	r0, [sp, #4]
   30a28:	mov	sp, fp
   30a2c:	pop	{fp, pc}

00030a30 <flatcc_verify_table_as_nested_root@@Base>:
   30a30:	push	{r4, sl, fp, lr}
   30a34:	add	fp, sp, #8
   30a38:	sub	sp, sp, #72	; 0x48
   30a3c:	ldr	ip, [fp, #12]
   30a40:	ldr	lr, [fp, #8]
   30a44:	str	r0, [fp, #-16]
   30a48:	strh	r1, [fp, #-18]	; 0xffffffee
   30a4c:	str	r2, [fp, #-24]	; 0xffffffe8
   30a50:	str	r3, [fp, #-28]	; 0xffffffe4
   30a54:	strh	lr, [fp, #-30]	; 0xffffffe2
   30a58:	ldr	r0, [fp, #-16]
   30a5c:	ldrh	r1, [fp, #-18]	; 0xffffffee
   30a60:	ldr	r2, [fp, #-24]	; 0xffffffe8
   30a64:	ldrh	r3, [fp, #-30]	; 0xffffffe2
   30a68:	uxth	r1, r1
   30a6c:	movw	lr, #1
   30a70:	uxth	lr, lr
   30a74:	str	lr, [sp]
   30a78:	mvn	lr, #0
   30a7c:	str	lr, [sp, #4]
   30a80:	str	ip, [sp, #36]	; 0x24
   30a84:	bl	2f4d8 <flatcc_verify_vector_field@@Base>
   30a88:	cmp	r0, #0
   30a8c:	beq	30ac4 <flatcc_verify_table_as_nested_root@@Base+0x94>
   30a90:	ldr	r0, [fp, #-16]
   30a94:	ldrh	r1, [fp, #-18]	; 0xffffffee
   30a98:	ldr	r2, [fp, #-24]	; 0xffffffe8
   30a9c:	ldrh	r3, [fp, #-30]	; 0xffffffe2
   30aa0:	uxth	r1, r1
   30aa4:	movw	ip, #1
   30aa8:	uxth	ip, ip
   30aac:	str	ip, [sp]
   30ab0:	mvn	ip, #0
   30ab4:	str	ip, [sp, #4]
   30ab8:	bl	2f4d8 <flatcc_verify_vector_field@@Base>
   30abc:	str	r0, [fp, #-12]
   30ac0:	b	30bcc <flatcc_verify_table_as_nested_root@@Base+0x19c>
   30ac4:	ldr	r0, [fp, #-16]
   30ac8:	ldrh	r1, [fp, #-18]	; 0xffffffee
   30acc:	bl	309c4 <flatcc_verify_struct_as_nested_root@@Base+0x128>
   30ad0:	str	r0, [fp, #-36]	; 0xffffffdc
   30ad4:	movw	r1, #0
   30ad8:	cmp	r1, r0
   30adc:	bne	30aec <flatcc_verify_table_as_nested_root@@Base+0xbc>
   30ae0:	movw	r0, #0
   30ae4:	str	r0, [fp, #-12]
   30ae8:	b	30bcc <flatcc_verify_table_as_nested_root@@Base+0x19c>
   30aec:	ldr	r0, [fp, #-36]	; 0xffffffdc
   30af0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   30af4:	str	r0, [sp, #32]
   30af8:	mov	r0, r1
   30afc:	movw	r1, #0
   30b00:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   30b04:	ldr	r1, [sp, #32]
   30b08:	add	r0, r1, r0
   30b0c:	str	r0, [fp, #-36]	; 0xffffffdc
   30b10:	ldr	r0, [fp, #-36]	; 0xffffffdc
   30b14:	movw	r1, #0
   30b18:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   30b1c:	str	r0, [sp, #40]	; 0x28
   30b20:	ldr	r0, [fp, #-36]	; 0xffffffdc
   30b24:	add	r0, r0, #4
   30b28:	str	r0, [fp, #-36]	; 0xffffffdc
   30b2c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   30b30:	ldr	r1, [sp, #40]	; 0x28
   30b34:	ldr	r2, [fp, #-28]	; 0xffffffe4
   30b38:	bl	302c8 <flatcc_verify_buffer_header@@Base>
   30b3c:	cmp	r0, #0
   30b40:	beq	30b5c <flatcc_verify_table_as_nested_root@@Base+0x12c>
   30b44:	ldr	r0, [fp, #-36]	; 0xffffffdc
   30b48:	ldr	r1, [sp, #40]	; 0x28
   30b4c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   30b50:	bl	302c8 <flatcc_verify_buffer_header@@Base>
   30b54:	str	r0, [fp, #-12]
   30b58:	b	30bcc <flatcc_verify_table_as_nested_root@@Base+0x19c>
   30b5c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   30b60:	ldr	r1, [sp, #40]	; 0x28
   30b64:	ldr	r2, [fp, #-36]	; 0xffffffdc
   30b68:	str	r0, [sp, #28]
   30b6c:	mov	r0, r2
   30b70:	movw	r2, #0
   30b74:	str	r1, [sp, #24]
   30b78:	mov	r1, r2
   30b7c:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   30b80:	ldr	r1, [fp, #-16]
   30b84:	ldr	r1, [r1, #8]
   30b88:	ldr	r2, [fp, #12]
   30b8c:	ldr	r3, [sp, #28]
   30b90:	str	r0, [sp, #20]
   30b94:	mov	r0, r3
   30b98:	ldr	ip, [sp, #24]
   30b9c:	str	r1, [sp, #16]
   30ba0:	mov	r1, ip
   30ba4:	movw	lr, #0
   30ba8:	str	r2, [sp, #12]
   30bac:	mov	r2, lr
   30bb0:	ldr	r3, [sp, #20]
   30bb4:	ldr	lr, [sp, #16]
   30bb8:	str	lr, [sp]
   30bbc:	ldr	r4, [sp, #12]
   30bc0:	str	r4, [sp, #4]
   30bc4:	bl	2fa7c <flatcc_verify_table_field@@Base+0xf0>
   30bc8:	str	r0, [fp, #-12]
   30bcc:	ldr	r0, [fp, #-12]
   30bd0:	sub	sp, fp, #8
   30bd4:	pop	{r4, sl, fp, pc}

00030bd8 <flatcc_verify_union_field@@Base>:
   30bd8:	push	{fp, lr}
   30bdc:	mov	fp, sp
   30be0:	sub	sp, sp, #88	; 0x58
   30be4:	str	r0, [fp, #-8]
   30be8:	strh	r1, [fp, #-10]
   30bec:	str	r2, [fp, #-16]
   30bf0:	str	r3, [fp, #-20]	; 0xffffffec
   30bf4:	ldr	r0, [fp, #-8]
   30bf8:	ldrh	r1, [fp, #-10]
   30bfc:	sub	r1, r1, #1
   30c00:	uxth	r1, r1
   30c04:	bl	30e68 <flatcc_verify_union_field@@Base+0x290>
   30c08:	strh	r0, [fp, #-22]	; 0xffffffea
   30c0c:	uxth	r0, r0
   30c10:	movw	r1, #0
   30c14:	cmp	r1, r0
   30c18:	bne	30cac <flatcc_verify_union_field@@Base+0xd4>
   30c1c:	ldr	r0, [fp, #-8]
   30c20:	ldrh	r1, [fp, #-10]
   30c24:	bl	30e68 <flatcc_verify_union_field@@Base+0x290>
   30c28:	strh	r0, [fp, #-24]	; 0xffffffe8
   30c2c:	ldrh	r0, [fp, #-24]	; 0xffffffe8
   30c30:	cmp	r0, #0
   30c34:	movw	r0, #0
   30c38:	moveq	r0, #1
   30c3c:	and	r0, r0, #1
   30c40:	str	r0, [sp, #28]
   30c44:	ldr	r0, [sp, #28]
   30c48:	cmp	r0, #0
   30c4c:	bne	30c5c <flatcc_verify_union_field@@Base+0x84>
   30c50:	movw	r0, #23
   30c54:	str	r0, [fp, #-4]
   30c58:	b	30e5c <flatcc_verify_union_field@@Base+0x284>
   30c5c:	b	30c60 <flatcc_verify_union_field@@Base+0x88>
   30c60:	b	30c64 <flatcc_verify_union_field@@Base+0x8c>
   30c64:	ldr	r0, [fp, #-16]
   30c68:	cmp	r0, #0
   30c6c:	movw	r0, #0
   30c70:	movne	r0, #1
   30c74:	mvn	r1, #0
   30c78:	eor	r0, r0, r1
   30c7c:	and	r0, r0, #1
   30c80:	str	r0, [sp, #24]
   30c84:	ldr	r0, [sp, #24]
   30c88:	cmp	r0, #0
   30c8c:	bne	30c9c <flatcc_verify_union_field@@Base+0xc4>
   30c90:	movw	r0, #21
   30c94:	str	r0, [fp, #-4]
   30c98:	b	30e5c <flatcc_verify_union_field@@Base+0x284>
   30c9c:	b	30ca0 <flatcc_verify_union_field@@Base+0xc8>
   30ca0:	movw	r0, #0
   30ca4:	str	r0, [fp, #-4]
   30ca8:	b	30e5c <flatcc_verify_union_field@@Base+0x284>
   30cac:	ldr	r0, [fp, #-8]
   30cb0:	ldrh	r1, [fp, #-10]
   30cb4:	sub	r1, r1, #1
   30cb8:	uxth	r1, r1
   30cbc:	movw	r2, #0
   30cc0:	movw	r3, #1
   30cc4:	movw	ip, #1
   30cc8:	uxth	ip, ip
   30ccc:	str	ip, [sp]
   30cd0:	bl	2eff0 <flatcc_verify_field@@Base+0x80>
   30cd4:	cmp	r0, #0
   30cd8:	beq	30d0c <flatcc_verify_union_field@@Base+0x134>
   30cdc:	ldr	r0, [fp, #-8]
   30ce0:	ldrh	r1, [fp, #-10]
   30ce4:	sub	r1, r1, #1
   30ce8:	uxth	r1, r1
   30cec:	movw	r2, #0
   30cf0:	movw	r3, #1
   30cf4:	movw	ip, #1
   30cf8:	uxth	ip, ip
   30cfc:	str	ip, [sp]
   30d00:	bl	2eff0 <flatcc_verify_field@@Base+0x80>
   30d04:	str	r0, [fp, #-4]
   30d08:	b	30e5c <flatcc_verify_union_field@@Base+0x284>
   30d0c:	ldr	r0, [fp, #-8]
   30d10:	ldrh	r1, [fp, #-10]
   30d14:	bl	30e68 <flatcc_verify_union_field@@Base+0x290>
   30d18:	strh	r0, [fp, #-24]	; 0xffffffe8
   30d1c:	ldr	r0, [fp, #-8]
   30d20:	ldr	r0, [r0]
   30d24:	ldr	r1, [fp, #-8]
   30d28:	ldr	r1, [r1, #16]
   30d2c:	add	r0, r0, r1
   30d30:	ldrh	r1, [fp, #-22]	; 0xffffffea
   30d34:	add	r0, r0, r1
   30d38:	str	r0, [fp, #-28]	; 0xffffffe4
   30d3c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   30d40:	ldrb	r0, [r0]
   30d44:	cmp	r0, #0
   30d48:	movw	r0, #1
   30d4c:	str	r0, [sp, #12]
   30d50:	bne	30d68 <flatcc_verify_union_field@@Base+0x190>
   30d54:	ldrh	r0, [fp, #-24]	; 0xffffffe8
   30d58:	cmp	r0, #0
   30d5c:	movw	r0, #0
   30d60:	moveq	r0, #1
   30d64:	str	r0, [sp, #12]
   30d68:	ldr	r0, [sp, #12]
   30d6c:	and	r0, r0, #1
   30d70:	str	r0, [sp, #20]
   30d74:	ldr	r0, [sp, #20]
   30d78:	cmp	r0, #0
   30d7c:	bne	30d8c <flatcc_verify_union_field@@Base+0x1b4>
   30d80:	movw	r0, #24
   30d84:	str	r0, [fp, #-4]
   30d88:	b	30e5c <flatcc_verify_union_field@@Base+0x284>
   30d8c:	b	30d90 <flatcc_verify_union_field@@Base+0x1b8>
   30d90:	ldr	r0, [fp, #-28]	; 0xffffffe4
   30d94:	ldrb	r0, [r0]
   30d98:	cmp	r0, #0
   30d9c:	bne	30dac <flatcc_verify_union_field@@Base+0x1d4>
   30da0:	movw	r0, #0
   30da4:	str	r0, [fp, #-4]
   30da8:	b	30e5c <flatcc_verify_union_field@@Base+0x284>
   30dac:	b	30db0 <flatcc_verify_union_field@@Base+0x1d8>
   30db0:	ldr	r0, [fp, #-8]
   30db4:	ldrh	r1, [fp, #-10]
   30db8:	ldr	r2, [fp, #-16]
   30dbc:	uxth	r1, r1
   30dc0:	sub	r3, fp, #32
   30dc4:	bl	2f23c <flatcc_verify_string_field@@Base+0xc0>
   30dc8:	str	r0, [sp, #16]
   30dcc:	ldr	r0, [sp, #16]
   30dd0:	cmp	r0, #0
   30dd4:	bne	30de4 <flatcc_verify_union_field@@Base+0x20c>
   30dd8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   30ddc:	cmp	r0, #0
   30de0:	bne	30df0 <flatcc_verify_union_field@@Base+0x218>
   30de4:	ldr	r0, [sp, #16]
   30de8:	str	r0, [fp, #-4]
   30dec:	b	30e5c <flatcc_verify_union_field@@Base+0x284>
   30df0:	b	30df4 <flatcc_verify_union_field@@Base+0x21c>
   30df4:	ldr	r0, [fp, #-8]
   30df8:	ldr	r0, [r0]
   30dfc:	str	r0, [sp, #32]
   30e00:	ldr	r0, [fp, #-8]
   30e04:	ldr	r0, [r0, #4]
   30e08:	str	r0, [sp, #36]	; 0x24
   30e0c:	ldr	r0, [fp, #-8]
   30e10:	ldr	r0, [r0, #8]
   30e14:	str	r0, [sp, #40]	; 0x28
   30e18:	ldr	r0, [fp, #-32]	; 0xffffffe0
   30e1c:	str	r0, [sp, #48]	; 0x30
   30e20:	ldr	r0, [fp, #-8]
   30e24:	ldr	r0, [r0]
   30e28:	ldr	r1, [fp, #-32]	; 0xffffffe0
   30e2c:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   30e30:	str	r0, [sp, #52]	; 0x34
   30e34:	ldr	r0, [fp, #-28]	; 0xffffffe4
   30e38:	ldrb	r0, [r0]
   30e3c:	strb	r0, [sp, #44]	; 0x2c
   30e40:	ldr	r0, [fp, #-20]	; 0xffffffec
   30e44:	add	r1, sp, #32
   30e48:	str	r0, [sp, #8]
   30e4c:	mov	r0, r1
   30e50:	ldr	r1, [sp, #8]
   30e54:	blx	r1
   30e58:	str	r0, [fp, #-4]
   30e5c:	ldr	r0, [fp, #-4]
   30e60:	mov	sp, fp
   30e64:	pop	{fp, pc}
   30e68:	push	{fp, lr}
   30e6c:	mov	fp, sp
   30e70:	sub	sp, sp, #16
   30e74:	str	r0, [sp, #8]
   30e78:	strh	r1, [sp, #6]
   30e7c:	ldrh	r0, [sp, #6]
   30e80:	add	r0, r0, #2
   30e84:	lsl	r0, r0, #1
   30e88:	strh	r0, [sp, #4]
   30e8c:	ldrh	r0, [sp, #4]
   30e90:	ldr	r1, [sp, #8]
   30e94:	ldrh	r1, [r1, #22]
   30e98:	cmp	r0, r1
   30e9c:	blt	30eac <flatcc_verify_union_field@@Base+0x2d4>
   30ea0:	movw	r0, #0
   30ea4:	str	r0, [fp, #-4]
   30ea8:	b	30ec4 <flatcc_verify_union_field@@Base+0x2ec>
   30eac:	ldr	r0, [sp, #8]
   30eb0:	ldr	r0, [r0, #12]
   30eb4:	ldrh	r1, [sp, #4]
   30eb8:	bl	315b8 <flatcc_verify_union_vector_field@@Base+0x6e8>
   30ebc:	uxth	r0, r0
   30ec0:	str	r0, [fp, #-4]
   30ec4:	ldr	r0, [fp, #-4]
   30ec8:	mov	sp, fp
   30ecc:	pop	{fp, pc}

00030ed0 <flatcc_verify_union_vector_field@@Base>:
   30ed0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   30ed4:	add	fp, sp, #24
   30ed8:	sub	sp, sp, #96	; 0x60
   30edc:	str	r0, [fp, #-32]	; 0xffffffe0
   30ee0:	strh	r1, [fp, #-34]	; 0xffffffde
   30ee4:	str	r2, [fp, #-40]	; 0xffffffd8
   30ee8:	str	r3, [fp, #-44]	; 0xffffffd4
   30eec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   30ef0:	ldrh	r1, [fp, #-34]	; 0xffffffde
   30ef4:	sub	r1, r1, #1
   30ef8:	uxth	r1, r1
   30efc:	bl	30e68 <flatcc_verify_union_field@@Base+0x290>
   30f00:	strh	r0, [fp, #-46]	; 0xffffffd2
   30f04:	uxth	r0, r0
   30f08:	movw	r1, #0
   30f0c:	cmp	r1, r0
   30f10:	bne	30f7c <flatcc_verify_union_vector_field@@Base+0xac>
   30f14:	ldr	r0, [fp, #-32]	; 0xffffffe0
   30f18:	ldrh	r1, [fp, #-34]	; 0xffffffde
   30f1c:	bl	30e68 <flatcc_verify_union_field@@Base+0x290>
   30f20:	strh	r0, [fp, #-48]	; 0xffffffd0
   30f24:	uxth	r0, r0
   30f28:	movw	r1, #0
   30f2c:	cmp	r1, r0
   30f30:	bne	30f78 <flatcc_verify_union_vector_field@@Base+0xa8>
   30f34:	b	30f38 <flatcc_verify_union_vector_field@@Base+0x68>
   30f38:	ldr	r0, [fp, #-40]	; 0xffffffd8
   30f3c:	cmp	r0, #0
   30f40:	movw	r0, #0
   30f44:	movne	r0, #1
   30f48:	mvn	r1, #0
   30f4c:	eor	r0, r0, r1
   30f50:	and	r0, r0, #1
   30f54:	str	r0, [sp, #52]	; 0x34
   30f58:	ldr	r0, [sp, #52]	; 0x34
   30f5c:	cmp	r0, #0
   30f60:	bne	30f70 <flatcc_verify_union_vector_field@@Base+0xa0>
   30f64:	movw	r0, #22
   30f68:	str	r0, [fp, #-28]	; 0xffffffe4
   30f6c:	b	31148 <flatcc_verify_union_vector_field@@Base+0x278>
   30f70:	b	30f74 <flatcc_verify_union_vector_field@@Base+0xa4>
   30f74:	b	30f78 <flatcc_verify_union_vector_field@@Base+0xa8>
   30f78:	b	30f7c <flatcc_verify_union_vector_field@@Base+0xac>
   30f7c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   30f80:	ldrh	r1, [fp, #-34]	; 0xffffffde
   30f84:	sub	r1, r1, #1
   30f88:	ldr	r2, [fp, #-40]	; 0xffffffd8
   30f8c:	uxth	r1, r1
   30f90:	movw	r3, #1
   30f94:	movw	ip, #1
   30f98:	uxth	ip, ip
   30f9c:	str	ip, [sp]
   30fa0:	mvn	ip, #0
   30fa4:	str	ip, [sp, #4]
   30fa8:	bl	2f4d8 <flatcc_verify_vector_field@@Base>
   30fac:	cmp	r0, #0
   30fb0:	beq	30fec <flatcc_verify_union_vector_field@@Base+0x11c>
   30fb4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   30fb8:	ldrh	r1, [fp, #-34]	; 0xffffffde
   30fbc:	sub	r1, r1, #1
   30fc0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   30fc4:	uxth	r1, r1
   30fc8:	movw	r3, #1
   30fcc:	movw	ip, #1
   30fd0:	uxth	ip, ip
   30fd4:	str	ip, [sp]
   30fd8:	mvn	ip, #0
   30fdc:	str	ip, [sp, #4]
   30fe0:	bl	2f4d8 <flatcc_verify_vector_field@@Base>
   30fe4:	str	r0, [fp, #-28]	; 0xffffffe4
   30fe8:	b	31148 <flatcc_verify_union_vector_field@@Base+0x278>
   30fec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   30ff0:	ldrh	r1, [fp, #-34]	; 0xffffffde
   30ff4:	sub	r1, r1, #1
   30ff8:	uxth	r1, r1
   30ffc:	bl	309c4 <flatcc_verify_struct_as_nested_root@@Base+0x128>
   31000:	str	r0, [fp, #-52]	; 0xffffffcc
   31004:	movw	r1, #0
   31008:	cmp	r1, r0
   3100c:	bne	3101c <flatcc_verify_union_vector_field@@Base+0x14c>
   31010:	movw	r0, #0
   31014:	str	r0, [fp, #-28]	; 0xffffffe4
   31018:	b	31148 <flatcc_verify_union_vector_field@@Base+0x278>
   3101c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   31020:	ldr	r1, [fp, #-52]	; 0xffffffcc
   31024:	str	r0, [sp, #44]	; 0x2c
   31028:	mov	r0, r1
   3102c:	movw	r1, #0
   31030:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   31034:	ldr	r1, [sp, #44]	; 0x2c
   31038:	add	r0, r1, r0
   3103c:	str	r0, [fp, #-52]	; 0xffffffcc
   31040:	ldr	r0, [fp, #-52]	; 0xffffffcc
   31044:	movw	r1, #0
   31048:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   3104c:	str	r0, [sp, #60]	; 0x3c
   31050:	ldr	r0, [fp, #-52]	; 0xffffffcc
   31054:	add	r0, r0, #4
   31058:	str	r0, [fp, #-52]	; 0xffffffcc
   3105c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   31060:	str	r0, [fp, #-56]	; 0xffffffc8
   31064:	ldr	r0, [fp, #-32]	; 0xffffffe0
   31068:	ldrh	r1, [fp, #-34]	; 0xffffffde
   3106c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   31070:	uxth	r1, r1
   31074:	add	r3, sp, #56	; 0x38
   31078:	bl	2f23c <flatcc_verify_string_field@@Base+0xc0>
   3107c:	str	r0, [sp, #48]	; 0x30
   31080:	ldr	r0, [sp, #48]	; 0x30
   31084:	cmp	r0, #0
   31088:	bne	31098 <flatcc_verify_union_vector_field@@Base+0x1c8>
   3108c:	ldr	r0, [sp, #56]	; 0x38
   31090:	cmp	r0, #0
   31094:	bne	310a4 <flatcc_verify_union_vector_field@@Base+0x1d4>
   31098:	ldr	r0, [sp, #48]	; 0x30
   3109c:	str	r0, [fp, #-28]	; 0xffffffe4
   310a0:	b	31148 <flatcc_verify_union_vector_field@@Base+0x278>
   310a4:	b	310a8 <flatcc_verify_union_vector_field@@Base+0x1d8>
   310a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   310ac:	ldr	r0, [r0]
   310b0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   310b4:	ldr	r1, [r1, #4]
   310b8:	ldr	r2, [sp, #56]	; 0x38
   310bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   310c0:	ldr	r3, [r3]
   310c4:	ldr	ip, [sp, #56]	; 0x38
   310c8:	str	r0, [sp, #40]	; 0x28
   310cc:	mov	r0, r3
   310d0:	str	r1, [sp, #36]	; 0x24
   310d4:	mov	r1, ip
   310d8:	str	r2, [sp, #32]
   310dc:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   310e0:	ldr	r1, [sp, #60]	; 0x3c
   310e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   310e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   310ec:	ldr	r3, [r3, #8]
   310f0:	ldr	ip, [fp, #-44]	; 0xffffffd4
   310f4:	ldr	lr, [sp, #40]	; 0x28
   310f8:	str	r0, [sp, #28]
   310fc:	mov	r0, lr
   31100:	ldr	r4, [sp, #36]	; 0x24
   31104:	str	r1, [sp, #24]
   31108:	mov	r1, r4
   3110c:	ldr	r5, [sp, #32]
   31110:	str	r2, [sp, #20]
   31114:	mov	r2, r5
   31118:	ldr	r6, [sp, #28]
   3111c:	str	r3, [sp, #16]
   31120:	mov	r3, r6
   31124:	ldr	r7, [sp, #24]
   31128:	str	r7, [sp]
   3112c:	ldr	r8, [sp, #20]
   31130:	str	r8, [sp, #4]
   31134:	ldr	r9, [sp, #16]
   31138:	str	r9, [sp, #8]
   3113c:	str	ip, [sp, #12]
   31140:	bl	31154 <flatcc_verify_union_vector_field@@Base+0x284>
   31144:	str	r0, [fp, #-28]	; 0xffffffe4
   31148:	ldr	r0, [fp, #-28]	; 0xffffffe4
   3114c:	sub	sp, fp, #24
   31150:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   31154:	push	{r4, r5, fp, lr}
   31158:	add	fp, sp, #8
   3115c:	sub	sp, sp, #104	; 0x68
   31160:	ldr	ip, [fp, #20]
   31164:	ldr	lr, [fp, #16]
   31168:	ldr	r4, [fp, #12]
   3116c:	ldr	r5, [fp, #8]
   31170:	str	r0, [fp, #-16]
   31174:	str	r1, [fp, #-20]	; 0xffffffec
   31178:	str	r2, [fp, #-24]	; 0xffffffe8
   3117c:	str	r3, [fp, #-28]	; 0xffffffe4
   31180:	ldr	r0, [fp, #16]
   31184:	mvn	r1, #0
   31188:	add	r1, r0, r1
   3118c:	str	r1, [fp, #16]
   31190:	cmp	r0, #0
   31194:	movw	r0, #0
   31198:	movgt	r0, #1
   3119c:	and	r0, r0, #1
   311a0:	str	r0, [sp, #44]	; 0x2c
   311a4:	ldr	r0, [sp, #44]	; 0x2c
   311a8:	cmp	r0, #0
   311ac:	bne	311bc <flatcc_verify_union_vector_field@@Base+0x2ec>
   311b0:	movw	r0, #3
   311b4:	str	r0, [fp, #-12]
   311b8:	b	3142c <flatcc_verify_union_vector_field@@Base+0x55c>
   311bc:	b	311c0 <flatcc_verify_union_vector_field@@Base+0x2f0>
   311c0:	ldr	r0, [pc, #624]	; 31438 <flatcc_verify_union_vector_field@@Base+0x568>
   311c4:	ldr	r1, [fp, #-16]
   311c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   311cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   311d0:	ldr	ip, [fp, #-28]	; 0xffffffe4
   311d4:	str	r0, [sp, #28]
   311d8:	mov	r0, r1
   311dc:	mov	r1, r2
   311e0:	mov	r2, r3
   311e4:	mov	r3, ip
   311e8:	movw	ip, #4
   311ec:	str	ip, [sp]
   311f0:	movw	ip, #4
   311f4:	uxth	ip, ip
   311f8:	str	ip, [sp, #4]
   311fc:	ldr	ip, [sp, #28]
   31200:	str	ip, [sp, #8]
   31204:	bl	2f5e8 <flatcc_verify_vector_field@@Base+0x110>
   31208:	cmp	r0, #0
   3120c:	beq	31260 <flatcc_verify_union_vector_field@@Base+0x390>
   31210:	ldr	r0, [pc, #544]	; 31438 <flatcc_verify_union_vector_field@@Base+0x568>
   31214:	ldr	r1, [fp, #-16]
   31218:	ldr	r2, [fp, #-20]	; 0xffffffec
   3121c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   31220:	ldr	ip, [fp, #-28]	; 0xffffffe4
   31224:	str	r0, [sp, #24]
   31228:	mov	r0, r1
   3122c:	mov	r1, r2
   31230:	mov	r2, r3
   31234:	mov	r3, ip
   31238:	movw	ip, #4
   3123c:	str	ip, [sp]
   31240:	movw	ip, #4
   31244:	uxth	ip, ip
   31248:	str	ip, [sp, #4]
   3124c:	ldr	ip, [sp, #24]
   31250:	str	ip, [sp, #8]
   31254:	bl	2f5e8 <flatcc_verify_vector_field@@Base+0x110>
   31258:	str	r0, [fp, #-12]
   3125c:	b	3142c <flatcc_verify_union_vector_field@@Base+0x55c>
   31260:	ldr	r0, [fp, #-28]	; 0xffffffe4
   31264:	ldr	r1, [fp, #-24]	; 0xffffffe8
   31268:	add	r0, r1, r0
   3126c:	str	r0, [fp, #-24]	; 0xffffffe8
   31270:	ldr	r0, [fp, #-16]
   31274:	ldr	r1, [fp, #-24]	; 0xffffffe8
   31278:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   3127c:	str	r0, [fp, #-36]	; 0xffffffdc
   31280:	ldr	r0, [fp, #-36]	; 0xffffffdc
   31284:	ldr	r1, [fp, #8]
   31288:	cmp	r0, r1
   3128c:	movw	r0, #0
   31290:	moveq	r0, #1
   31294:	and	r0, r0, #1
   31298:	str	r0, [sp, #40]	; 0x28
   3129c:	ldr	r0, [sp, #40]	; 0x28
   312a0:	cmp	r0, #0
   312a4:	bne	312b4 <flatcc_verify_union_vector_field@@Base+0x3e4>
   312a8:	movw	r0, #34	; 0x22
   312ac:	str	r0, [fp, #-12]
   312b0:	b	3142c <flatcc_verify_union_vector_field@@Base+0x55c>
   312b4:	b	312b8 <flatcc_verify_union_vector_field@@Base+0x3e8>
   312b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   312bc:	add	r0, r0, #4
   312c0:	str	r0, [fp, #-24]	; 0xffffffe8
   312c4:	ldr	r0, [fp, #-16]
   312c8:	str	r0, [sp, #48]	; 0x30
   312cc:	ldr	r0, [fp, #-20]	; 0xffffffec
   312d0:	str	r0, [sp, #52]	; 0x34
   312d4:	ldr	r0, [fp, #16]
   312d8:	str	r0, [sp, #56]	; 0x38
   312dc:	movw	r0, #0
   312e0:	str	r0, [fp, #-32]	; 0xffffffe0
   312e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   312e8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   312ec:	cmp	r0, r1
   312f0:	bcs	31424 <flatcc_verify_union_vector_field@@Base+0x554>
   312f4:	ldr	r0, [fp, #-16]
   312f8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   312fc:	bl	2f4ac <flatcc_verify_string_field@@Base+0x330>
   31300:	str	r0, [fp, #-40]	; 0xffffffd8
   31304:	ldr	r0, [fp, #-40]	; 0xffffffd8
   31308:	cmp	r0, #0
   3130c:	bne	31358 <flatcc_verify_union_vector_field@@Base+0x488>
   31310:	b	31314 <flatcc_verify_union_vector_field@@Base+0x444>
   31314:	ldr	r0, [fp, #12]
   31318:	ldr	r1, [fp, #-32]	; 0xffffffe0
   3131c:	add	r0, r0, r1
   31320:	ldrb	r0, [r0]
   31324:	cmp	r0, #0
   31328:	movw	r0, #0
   3132c:	moveq	r0, #1
   31330:	and	r0, r0, #1
   31334:	str	r0, [sp, #36]	; 0x24
   31338:	ldr	r0, [sp, #36]	; 0x24
   3133c:	cmp	r0, #0
   31340:	bne	31350 <flatcc_verify_union_vector_field@@Base+0x480>
   31344:	movw	r0, #32
   31348:	str	r0, [fp, #-12]
   3134c:	b	3142c <flatcc_verify_union_vector_field@@Base+0x55c>
   31350:	b	31354 <flatcc_verify_union_vector_field@@Base+0x484>
   31354:	b	31404 <flatcc_verify_union_vector_field@@Base+0x534>
   31358:	b	3135c <flatcc_verify_union_vector_field@@Base+0x48c>
   3135c:	ldr	r0, [fp, #12]
   31360:	ldr	r1, [fp, #-32]	; 0xffffffe0
   31364:	add	r0, r0, r1
   31368:	ldrb	r0, [r0]
   3136c:	cmp	r0, #0
   31370:	movw	r0, #0
   31374:	movne	r0, #1
   31378:	and	r0, r0, #1
   3137c:	str	r0, [sp, #32]
   31380:	ldr	r0, [sp, #32]
   31384:	cmp	r0, #0
   31388:	bne	31398 <flatcc_verify_union_vector_field@@Base+0x4c8>
   3138c:	movw	r0, #33	; 0x21
   31390:	str	r0, [fp, #-12]
   31394:	b	3142c <flatcc_verify_union_vector_field@@Base+0x55c>
   31398:	b	3139c <flatcc_verify_union_vector_field@@Base+0x4cc>
   3139c:	ldr	r0, [fp, #12]
   313a0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   313a4:	add	r0, r0, r1
   313a8:	ldrb	r0, [r0]
   313ac:	strb	r0, [sp, #60]	; 0x3c
   313b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   313b4:	str	r0, [sp, #64]	; 0x40
   313b8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   313bc:	str	r0, [sp, #68]	; 0x44
   313c0:	ldr	r0, [fp, #20]
   313c4:	add	r1, sp, #48	; 0x30
   313c8:	str	r0, [sp, #20]
   313cc:	mov	r0, r1
   313d0:	ldr	r1, [sp, #20]
   313d4:	blx	r1
   313d8:	cmp	r0, #0
   313dc:	beq	31400 <flatcc_verify_union_vector_field@@Base+0x530>
   313e0:	ldr	r0, [fp, #20]
   313e4:	add	r1, sp, #48	; 0x30
   313e8:	str	r0, [sp, #16]
   313ec:	mov	r0, r1
   313f0:	ldr	r1, [sp, #16]
   313f4:	blx	r1
   313f8:	str	r0, [fp, #-12]
   313fc:	b	3142c <flatcc_verify_union_vector_field@@Base+0x55c>
   31400:	b	31404 <flatcc_verify_union_vector_field@@Base+0x534>
   31404:	b	31408 <flatcc_verify_union_vector_field@@Base+0x538>
   31408:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3140c:	add	r0, r0, #1
   31410:	str	r0, [fp, #-32]	; 0xffffffe0
   31414:	ldr	r0, [fp, #-24]	; 0xffffffe8
   31418:	add	r0, r0, #4
   3141c:	str	r0, [fp, #-24]	; 0xffffffe8
   31420:	b	312e4 <flatcc_verify_union_vector_field@@Base+0x414>
   31424:	movw	r0, #0
   31428:	str	r0, [fp, #-12]
   3142c:	ldr	r0, [fp, #-12]
   31430:	sub	sp, fp, #8
   31434:	pop	{r4, r5, fp, pc}
   31438:	svccc	0x00ffffff
   3143c:	sub	sp, sp, #20
   31440:	str	r0, [sp, #16]
   31444:	str	r1, [sp, #12]
   31448:	str	r2, [sp, #8]
   3144c:	ldr	r0, [sp, #12]
   31450:	ldr	r1, [sp, #8]
   31454:	add	r0, r0, r1
   31458:	str	r0, [sp, #4]
   3145c:	ldr	r0, [sp, #4]
   31460:	ldr	r1, [sp, #12]
   31464:	cmp	r0, r1
   31468:	movw	r0, #0
   3146c:	str	r0, [sp]
   31470:	bls	314b0 <flatcc_verify_union_vector_field@@Base+0x5e0>
   31474:	ldr	r0, [sp, #4]
   31478:	add	r0, r0, #4
   3147c:	ldr	r1, [sp, #16]
   31480:	cmp	r0, r1
   31484:	movw	r0, #0
   31488:	str	r0, [sp]
   3148c:	bhi	314b0 <flatcc_verify_union_vector_field@@Base+0x5e0>
   31490:	ldr	r0, [sp, #4]
   31494:	and	r0, r0, #3
   31498:	cmp	r0, #0
   3149c:	movw	r0, #0
   314a0:	movne	r0, #1
   314a4:	mvn	r1, #0
   314a8:	eor	r0, r0, r1
   314ac:	str	r0, [sp]
   314b0:	ldr	r0, [sp]
   314b4:	and	r0, r0, #1
   314b8:	add	sp, sp, #20
   314bc:	bx	lr
   314c0:	push	{fp, lr}
   314c4:	mov	fp, sp
   314c8:	sub	sp, sp, #8
   314cc:	str	r0, [sp, #4]
   314d0:	ldr	r0, [sp, #4]
   314d4:	ldr	r0, [r0]
   314d8:	bl	314e4 <flatcc_verify_union_vector_field@@Base+0x614>
   314dc:	mov	sp, fp
   314e0:	pop	{fp, pc}
   314e4:	sub	sp, sp, #4
   314e8:	str	r0, [sp]
   314ec:	ldr	r0, [sp]
   314f0:	add	sp, sp, #4
   314f4:	bx	lr
   314f8:	sub	sp, sp, #28
   314fc:	str	r0, [sp, #24]
   31500:	str	r1, [sp, #20]
   31504:	str	r2, [sp, #16]
   31508:	strh	r3, [sp, #14]
   3150c:	ldr	r0, [sp, #20]
   31510:	ldr	r1, [sp, #16]
   31514:	add	r0, r0, r1
   31518:	str	r0, [sp, #8]
   3151c:	ldrh	r0, [sp, #14]
   31520:	cmp	r0, #4
   31524:	bcs	31534 <flatcc_verify_union_vector_field@@Base+0x664>
   31528:	movw	r0, #4
   3152c:	str	r0, [sp, #4]
   31530:	b	3153c <flatcc_verify_union_vector_field@@Base+0x66c>
   31534:	ldrh	r0, [sp, #14]
   31538:	str	r0, [sp, #4]
   3153c:	ldr	r0, [sp, #4]
   31540:	strh	r0, [sp, #14]
   31544:	ldr	r0, [sp, #8]
   31548:	ldr	r1, [sp, #20]
   3154c:	cmp	r0, r1
   31550:	movw	r0, #0
   31554:	str	r0, [sp]
   31558:	bls	315a8 <flatcc_verify_union_vector_field@@Base+0x6d8>
   3155c:	ldr	r0, [sp, #8]
   31560:	add	r0, r0, #4
   31564:	ldr	r1, [sp, #24]
   31568:	cmp	r0, r1
   3156c:	movw	r0, #0
   31570:	str	r0, [sp]
   31574:	bhi	315a8 <flatcc_verify_union_vector_field@@Base+0x6d8>
   31578:	ldr	r0, [sp, #8]
   3157c:	add	r0, r0, #4
   31580:	ldrh	r1, [sp, #14]
   31584:	sub	r1, r1, #1
   31588:	orr	r1, r1, #3
   3158c:	and	r0, r0, r1
   31590:	cmp	r0, #0
   31594:	movw	r0, #0
   31598:	movne	r0, #1
   3159c:	mvn	r1, #0
   315a0:	eor	r0, r0, r1
   315a4:	str	r0, [sp]
   315a8:	ldr	r0, [sp]
   315ac:	and	r0, r0, #1
   315b0:	add	sp, sp, #28
   315b4:	bx	lr
   315b8:	push	{fp, lr}
   315bc:	mov	fp, sp
   315c0:	sub	sp, sp, #8
   315c4:	str	r0, [sp, #4]
   315c8:	str	r1, [sp]
   315cc:	ldr	r0, [sp, #4]
   315d0:	ldr	r1, [sp]
   315d4:	add	r0, r0, r1
   315d8:	bl	315e8 <flatcc_verify_union_vector_field@@Base+0x718>
   315dc:	uxth	r0, r0
   315e0:	mov	sp, fp
   315e4:	pop	{fp, pc}
   315e8:	push	{fp, lr}
   315ec:	mov	fp, sp
   315f0:	sub	sp, sp, #8
   315f4:	str	r0, [sp, #4]
   315f8:	ldr	r0, [sp, #4]
   315fc:	ldrh	r0, [r0]
   31600:	bl	31610 <flatcc_verify_union_vector_field@@Base+0x740>
   31604:	uxth	r0, r0
   31608:	mov	sp, fp
   3160c:	pop	{fp, pc}
   31610:	sub	sp, sp, #4
   31614:	strh	r0, [sp, #2]
   31618:	ldrh	r0, [sp, #2]
   3161c:	add	sp, sp, #4
   31620:	bx	lr
   31624:	sub	sp, sp, #4
   31628:	str	r0, [sp]
   3162c:	ldr	r0, [sp]
   31630:	add	sp, sp, #4
   31634:	bx	lr
   31638:	push	{fp, lr}
   3163c:	mov	fp, sp
   31640:	sub	sp, sp, #8
   31644:	str	r0, [sp, #4]
   31648:	ldr	r0, [sp, #4]
   3164c:	ldr	r0, [r0]
   31650:	bl	3165c <flatcc_verify_union_vector_field@@Base+0x78c>
   31654:	mov	sp, fp
   31658:	pop	{fp, pc}
   3165c:	sub	sp, sp, #4
   31660:	str	r0, [sp]
   31664:	ldr	r0, [sp]
   31668:	add	sp, sp, #4
   3166c:	bx	lr

00031670 <__libc_csu_init@@Base>:
   31670:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31674:	mov	r7, r0
   31678:	ldr	r6, [pc, #72]	; 316c8 <__libc_csu_init@@Base+0x58>
   3167c:	ldr	r5, [pc, #72]	; 316cc <__libc_csu_init@@Base+0x5c>
   31680:	add	r6, pc, r6
   31684:	add	r5, pc, r5
   31688:	sub	r6, r6, r5
   3168c:	mov	r8, r1
   31690:	mov	r9, r2
   31694:	bl	12d70 <strcmp@plt-0x20>
   31698:	asrs	r6, r6, #2
   3169c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   316a0:	mov	r4, #0
   316a4:	add	r4, r4, #1
   316a8:	ldr	r3, [r5], #4
   316ac:	mov	r2, r9
   316b0:	mov	r1, r8
   316b4:	mov	r0, r7
   316b8:	blx	r3
   316bc:	cmp	r6, r4
   316c0:	bne	316a4 <__libc_csu_init@@Base+0x34>
   316c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   316c8:	andeq	r6, r1, r4, lsl #17
   316cc:	andeq	r6, r1, ip, ror r8

000316d0 <__libc_csu_fini@@Base>:
   316d0:	bx	lr

Disassembly of section .fini:

000316d4 <.fini>:
   316d4:	push	{r3, lr}
   316d8:	pop	{r3, pc}
