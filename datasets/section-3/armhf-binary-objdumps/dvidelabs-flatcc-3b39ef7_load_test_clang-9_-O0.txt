
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00012390 <.init>:
   12390:	push	{r3, lr}
   12394:	bl	124dc <_start@@Base+0x3c>
   12398:	pop	{r3, pc}

Disassembly of section .plt:

0001239c <strcmp@plt-0x14>:
   1239c:	push	{lr}		; (str lr, [sp, #-4]!)
   123a0:	ldr	lr, [pc, #4]	; 123ac <strcmp@plt-0x4>
   123a4:	add	lr, pc, lr
   123a8:	ldr	pc, [lr, #8]!
   123ac:	andeq	sl, r1, r4, asr ip

000123b0 <strcmp@plt>:
   123b0:	add	ip, pc, #0, 12
   123b4:	add	ip, ip, #106496	; 0x1a000
   123b8:	ldr	pc, [ip, #3156]!	; 0xc54

000123bc <printf@plt>:
   123bc:	add	ip, pc, #0, 12
   123c0:	add	ip, ip, #106496	; 0x1a000
   123c4:	ldr	pc, [ip, #3148]!	; 0xc4c

000123c8 <fopen@plt>:
   123c8:	add	ip, pc, #0, 12
   123cc:	add	ip, ip, #106496	; 0x1a000
   123d0:	ldr	pc, [ip, #3140]!	; 0xc44

000123d4 <free@plt>:
   123d4:	add	ip, pc, #0, 12
   123d8:	add	ip, ip, #106496	; 0x1a000
   123dc:	ldr	pc, [ip, #3132]!	; 0xc3c

000123e0 <memcpy@plt>:
   123e0:	add	ip, pc, #0, 12
   123e4:	add	ip, ip, #106496	; 0x1a000
   123e8:	ldr	pc, [ip, #3124]!	; 0xc34

000123ec <memcmp@plt>:
   123ec:	add	ip, pc, #0, 12
   123f0:	add	ip, ip, #106496	; 0x1a000
   123f4:	ldr	pc, [ip, #3116]!	; 0xc2c

000123f8 <realloc@plt>:
   123f8:	add	ip, pc, #0, 12
   123fc:	add	ip, ip, #106496	; 0x1a000
   12400:	ldr	pc, [ip, #3108]!	; 0xc24

00012404 <fwrite@plt>:
   12404:	add	ip, pc, #0, 12
   12408:	add	ip, ip, #106496	; 0x1a000
   1240c:	ldr	pc, [ip, #3100]!	; 0xc1c

00012410 <gettimeofday@plt>:
   12410:	add	ip, pc, #0, 12
   12414:	add	ip, ip, #106496	; 0x1a000
   12418:	ldr	pc, [ip, #3092]!	; 0xc14

0001241c <malloc@plt>:
   1241c:	add	ip, pc, #0, 12
   12420:	add	ip, ip, #106496	; 0x1a000
   12424:	ldr	pc, [ip, #3084]!	; 0xc0c

00012428 <__libc_start_main@plt>:
   12428:	add	ip, pc, #0, 12
   1242c:	add	ip, ip, #106496	; 0x1a000
   12430:	ldr	pc, [ip, #3076]!	; 0xc04

00012434 <__gmon_start__@plt>:
   12434:	add	ip, pc, #0, 12
   12438:	add	ip, ip, #106496	; 0x1a000
   1243c:	ldr	pc, [ip, #3068]!	; 0xbfc

00012440 <strlen@plt>:
   12440:	add	ip, pc, #0, 12
   12444:	add	ip, ip, #106496	; 0x1a000
   12448:	ldr	pc, [ip, #3060]!	; 0xbf4

0001244c <posix_memalign@plt>:
   1244c:	add	ip, pc, #0, 12
   12450:	add	ip, ip, #106496	; 0x1a000
   12454:	ldr	pc, [ip, #3052]!	; 0xbec

00012458 <memset@plt>:
   12458:	add	ip, pc, #0, 12
   1245c:	add	ip, ip, #106496	; 0x1a000
   12460:	ldr	pc, [ip, #3044]!	; 0xbe4

00012464 <strncpy@plt>:
   12464:	add	ip, pc, #0, 12
   12468:	add	ip, ip, #106496	; 0x1a000
   1246c:	ldr	pc, [ip, #3036]!	; 0xbdc

00012470 <memchr@plt>:
   12470:	add	ip, pc, #0, 12
   12474:	add	ip, ip, #106496	; 0x1a000
   12478:	ldr	pc, [ip, #3028]!	; 0xbd4

0001247c <fclose@plt>:
   1247c:	add	ip, pc, #0, 12
   12480:	add	ip, ip, #106496	; 0x1a000
   12484:	ldr	pc, [ip, #3020]!	; 0xbcc

00012488 <abort@plt>:
   12488:	add	ip, pc, #0, 12
   1248c:	add	ip, ip, #106496	; 0x1a000
   12490:	ldr	pc, [ip, #3012]!	; 0xbc4

00012494 <__assert_fail@plt>:
   12494:	add	ip, pc, #0, 12
   12498:	add	ip, ip, #106496	; 0x1a000
   1249c:	ldr	pc, [ip, #3004]!	; 0xbbc

Disassembly of section .text:

000124a0 <_start@@Base>:
   124a0:	mov	fp, #0
   124a4:	mov	lr, #0
   124a8:	pop	{r1}		; (ldr r1, [sp], #4)
   124ac:	mov	r2, sp
   124b0:	push	{r2}		; (str r2, [sp, #-4]!)
   124b4:	push	{r0}		; (str r0, [sp, #-4]!)
   124b8:	ldr	ip, [pc, #16]	; 124d0 <_start@@Base+0x30>
   124bc:	push	{ip}		; (str ip, [sp, #-4]!)
   124c0:	ldr	r0, [pc, #12]	; 124d4 <_start@@Base+0x34>
   124c4:	ldr	r3, [pc, #12]	; 124d8 <_start@@Base+0x38>
   124c8:	bl	12428 <__libc_start_main@plt>
   124cc:	bl	12488 <abort@plt>
   124d0:	muleq	r1, r4, r7
   124d4:	muleq	r1, r0, r5
   124d8:	andeq	sl, r1, r4, lsr r7
   124dc:	ldr	r3, [pc, #20]	; 124f8 <_start@@Base+0x58>
   124e0:	ldr	r2, [pc, #20]	; 124fc <_start@@Base+0x5c>
   124e4:	add	r3, pc, r3
   124e8:	ldr	r2, [r3, r2]
   124ec:	cmp	r2, #0
   124f0:	bxeq	lr
   124f4:	b	12434 <__gmon_start__@plt>
   124f8:	andeq	sl, r1, r4, lsl fp
   124fc:	andeq	r0, r0, r0, rrx
   12500:	ldr	r0, [pc, #24]	; 12520 <_start@@Base+0x80>
   12504:	ldr	r3, [pc, #24]	; 12524 <_start@@Base+0x84>
   12508:	cmp	r3, r0
   1250c:	bxeq	lr
   12510:	ldr	r3, [pc, #16]	; 12528 <_start@@Base+0x88>
   12514:	cmp	r3, #0
   12518:	bxeq	lr
   1251c:	bx	r3
   12520:	andeq	sp, r2, r4, ror r0
   12524:	andeq	sp, r2, r4, ror r0
   12528:	andeq	r0, r0, r0
   1252c:	ldr	r0, [pc, #36]	; 12558 <_start@@Base+0xb8>
   12530:	ldr	r1, [pc, #36]	; 1255c <_start@@Base+0xbc>
   12534:	sub	r1, r1, r0
   12538:	asr	r1, r1, #2
   1253c:	add	r1, r1, r1, lsr #31
   12540:	asrs	r1, r1, #1
   12544:	bxeq	lr
   12548:	ldr	r3, [pc, #16]	; 12560 <_start@@Base+0xc0>
   1254c:	cmp	r3, #0
   12550:	bxeq	lr
   12554:	bx	r3
   12558:	andeq	sp, r2, r4, ror r0
   1255c:	andeq	sp, r2, r4, ror r0
   12560:	andeq	r0, r0, r0
   12564:	push	{r4, lr}
   12568:	ldr	r4, [pc, #24]	; 12588 <_start@@Base+0xe8>
   1256c:	ldrb	r3, [r4]
   12570:	cmp	r3, #0
   12574:	popne	{r4, pc}
   12578:	bl	12500 <_start@@Base+0x60>
   1257c:	mov	r3, #1
   12580:	strb	r3, [r4]
   12584:	pop	{r4, pc}
   12588:	andeq	sp, r2, r4, ror r0
   1258c:	b	1252c <_start@@Base+0x8c>

00012590 <main@@Base>:
   12590:	push	{r4, r5, fp, lr}
   12594:	add	fp, sp, #8
   12598:	sub	sp, sp, #344	; 0x158
   1259c:	movw	r2, #0
   125a0:	str	r2, [fp, #-12]
   125a4:	str	r0, [fp, #-16]
   125a8:	str	r1, [fp, #-20]	; 0xffffffec
   125ac:	movw	r0, #10
   125b0:	str	r0, [sp, #52]	; 0x34
   125b4:	str	r2, [sp, #44]	; 0x2c
   125b8:	add	r0, sp, #88	; 0x58
   125bc:	str	r0, [sp, #84]	; 0x54
   125c0:	ldr	r0, [sp, #84]	; 0x54
   125c4:	bl	13fd4 <flatcc_builder_init@@Base>
   125c8:	ldr	r1, [sp, #84]	; 0x54
   125cc:	str	r0, [sp, #36]	; 0x24
   125d0:	mov	r0, r1
   125d4:	bl	1290c <main@@Base+0x37c>
   125d8:	ldr	r1, [sp, #84]	; 0x54
   125dc:	str	r0, [sp, #32]
   125e0:	mov	r0, r1
   125e4:	sub	r1, fp, #32
   125e8:	bl	195bc <flatcc_builder_finalize_buffer@@Base>
   125ec:	ldr	r1, [pc, #728]	; 128cc <main@@Base+0x33c>
   125f0:	add	r1, pc, r1
   125f4:	ldr	r2, [pc, #724]	; 128d0 <main@@Base+0x340>
   125f8:	add	r2, pc, r2
   125fc:	str	r0, [fp, #-28]	; 0xffffffe4
   12600:	mov	r0, r1
   12604:	mov	r1, r2
   12608:	bl	123c8 <fopen@plt>
   1260c:	str	r0, [fp, #-24]	; 0xffffffe8
   12610:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12614:	movw	r1, #0
   12618:	cmp	r0, r1
   1261c:	bne	1262c <main@@Base+0x9c>
   12620:	mvn	r0, #0
   12624:	str	r0, [sp, #44]	; 0x2c
   12628:	b	12898 <main@@Base+0x308>
   1262c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12630:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12634:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12638:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1263c:	str	r0, [sp, #28]
   12640:	mov	r0, r1
   12644:	movw	r1, #1
   12648:	bl	12404 <fwrite@plt>
   1264c:	ldr	r1, [sp, #28]
   12650:	cmp	r1, r0
   12654:	movw	r0, #0
   12658:	movne	r0, #1
   1265c:	and	r0, r0, #1
   12660:	ldr	r2, [sp, #44]	; 0x2c
   12664:	orr	r0, r2, r0
   12668:	str	r0, [sp, #44]	; 0x2c
   1266c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12670:	bl	1247c <fclose@plt>
   12674:	ldr	r1, [sp, #44]	; 0x2c
   12678:	cmp	r1, #0
   1267c:	beq	12684 <main@@Base+0xf4>
   12680:	b	12898 <main@@Base+0x308>
   12684:	ldr	r0, [pc, #588]	; 128d8 <main@@Base+0x348>
   12688:	add	r0, pc, r0
   1268c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12690:	bl	123bc <printf@plt>
   12694:	ldr	r1, [pc, #568]	; 128d4 <main@@Base+0x344>
   12698:	add	r1, pc, r1
   1269c:	str	r0, [sp, #24]
   126a0:	mov	r0, r1
   126a4:	bl	123bc <printf@plt>
   126a8:	str	r0, [sp, #20]
   126ac:	bl	129d0 <main@@Base+0x440>
   126b0:	vstr	d0, [sp, #64]	; 0x40
   126b4:	movw	r0, #0
   126b8:	str	r0, [sp, #48]	; 0x30
   126bc:	ldr	r0, [sp, #48]	; 0x30
   126c0:	ldr	r1, [sp, #52]	; 0x34
   126c4:	cmp	r0, r1
   126c8:	bge	12870 <main@@Base+0x2e0>
   126cc:	ldr	r0, [sp, #84]	; 0x54
   126d0:	bl	1290c <main@@Base+0x37c>
   126d4:	ldr	r1, [sp, #84]	; 0x54
   126d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   126dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   126e0:	str	r0, [sp, #16]
   126e4:	mov	r0, r1
   126e8:	mov	r1, r2
   126ec:	mov	r2, r3
   126f0:	bl	1951c <flatcc_builder_copy_buffer@@Base>
   126f4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   126f8:	str	r0, [sp, #12]
   126fc:	mov	r0, r1
   12700:	bl	12a6c <main@@Base+0x4dc>
   12704:	str	r0, [sp, #80]	; 0x50
   12708:	ldr	r0, [sp, #80]	; 0x50
   1270c:	bl	12ae8 <main@@Base+0x558>
   12710:	ldr	r1, [pc, #496]	; 12908 <main@@Base+0x378>
   12714:	add	r1, pc, r1
   12718:	bl	123b0 <strcmp@plt>
   1271c:	ldr	r1, [sp, #44]	; 0x2c
   12720:	orr	r0, r1, r0
   12724:	str	r0, [sp, #44]	; 0x2c
   12728:	ldr	r0, [sp, #44]	; 0x2c
   1272c:	cmp	r0, #0
   12730:	bne	12738 <main@@Base+0x1a8>
   12734:	b	12758 <main@@Base+0x1c8>
   12738:	ldr	r0, [pc, #416]	; 128e0 <main@@Base+0x350>
   1273c:	add	r0, pc, r0
   12740:	ldr	r1, [pc, #412]	; 128e4 <main@@Base+0x354>
   12744:	add	r1, pc, r1
   12748:	ldr	r2, [pc, #408]	; 128e8 <main@@Base+0x358>
   1274c:	add	r3, pc, r2
   12750:	movw	r2, #139	; 0x8b
   12754:	bl	12494 <__assert_fail@plt>
   12758:	ldr	r0, [sp, #80]	; 0x50
   1275c:	bl	12c08 <main@@Base+0x678>
   12760:	str	r0, [sp, #76]	; 0x4c
   12764:	ldr	r0, [sp, #76]	; 0x4c
   12768:	bl	12d10 <main@@Base+0x780>
   1276c:	cmp	r0, #1000	; 0x3e8
   12770:	movw	r0, #0
   12774:	movne	r0, #1
   12778:	and	r0, r0, #1
   1277c:	ldr	r1, [sp, #44]	; 0x2c
   12780:	orr	r0, r1, r0
   12784:	str	r0, [sp, #44]	; 0x2c
   12788:	ldr	r0, [sp, #44]	; 0x2c
   1278c:	cmp	r0, #0
   12790:	bne	12798 <main@@Base+0x208>
   12794:	b	127b8 <main@@Base+0x228>
   12798:	ldr	r0, [pc, #332]	; 128ec <main@@Base+0x35c>
   1279c:	add	r0, pc, r0
   127a0:	ldr	r1, [pc, #328]	; 128f0 <main@@Base+0x360>
   127a4:	add	r1, pc, r1
   127a8:	ldr	r2, [pc, #324]	; 128f4 <main@@Base+0x364>
   127ac:	add	r3, pc, r2
   127b0:	movw	r2, #143	; 0x8f
   127b4:	bl	12494 <__assert_fail@plt>
   127b8:	movw	r0, #0
   127bc:	str	r0, [sp, #40]	; 0x28
   127c0:	ldr	r0, [sp, #40]	; 0x28
   127c4:	cmp	r0, #1000	; 0x3e8
   127c8:	bge	1284c <main@@Base+0x2bc>
   127cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   127d0:	ldr	r1, [sp, #76]	; 0x4c
   127d4:	ldr	r2, [sp, #40]	; 0x28
   127d8:	str	r0, [sp, #8]
   127dc:	mov	r0, r1
   127e0:	mov	r1, r2
   127e4:	bl	12fc0 <main@@Base+0xa30>
   127e8:	ldr	r1, [sp, #8]
   127ec:	str	r0, [sp, #4]
   127f0:	mov	r0, r1
   127f4:	ldr	r1, [sp, #4]
   127f8:	bl	12d60 <main@@Base+0x7d0>
   127fc:	ldr	r1, [sp, #44]	; 0x2c
   12800:	orr	r0, r1, r0
   12804:	str	r0, [sp, #44]	; 0x2c
   12808:	ldr	r0, [sp, #44]	; 0x2c
   1280c:	cmp	r0, #0
   12810:	bne	12818 <main@@Base+0x288>
   12814:	b	12838 <main@@Base+0x2a8>
   12818:	ldr	r0, [pc, #216]	; 128f8 <main@@Base+0x368>
   1281c:	add	r0, pc, r0
   12820:	ldr	r1, [pc, #212]	; 128fc <main@@Base+0x36c>
   12824:	add	r1, pc, r1
   12828:	ldr	r2, [pc, #208]	; 12900 <main@@Base+0x370>
   1282c:	add	r3, pc, r2
   12830:	movw	r2, #147	; 0x93
   12834:	bl	12494 <__assert_fail@plt>
   12838:	b	1283c <main@@Base+0x2ac>
   1283c:	ldr	r0, [sp, #40]	; 0x28
   12840:	add	r0, r0, #1
   12844:	str	r0, [sp, #40]	; 0x28
   12848:	b	127c0 <main@@Base+0x230>
   1284c:	ldr	r0, [sp, #44]	; 0x2c
   12850:	cmp	r0, #0
   12854:	beq	1285c <main@@Base+0x2cc>
   12858:	b	12898 <main@@Base+0x308>
   1285c:	b	12860 <main@@Base+0x2d0>
   12860:	ldr	r0, [sp, #48]	; 0x30
   12864:	add	r0, r0, #1
   12868:	str	r0, [sp, #48]	; 0x30
   1286c:	b	126bc <main@@Base+0x12c>
   12870:	bl	129d0 <main@@Base+0x440>
   12874:	ldr	r0, [pc, #96]	; 128dc <main@@Base+0x34c>
   12878:	add	r0, pc, r0
   1287c:	vstr	d0, [sp, #56]	; 0x38
   12880:	vldr	d0, [sp, #64]	; 0x40
   12884:	vldr	d1, [sp, #56]	; 0x38
   12888:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1288c:	ldr	r2, [sp, #52]	; 0x34
   12890:	movw	r3, #0
   12894:	bl	13050 <main@@Base+0xac0>
   12898:	ldr	r0, [sp, #84]	; 0x54
   1289c:	bl	14280 <flatcc_builder_clear@@Base>
   128a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   128a4:	bl	123d4 <free@plt>
   128a8:	ldr	r0, [sp, #44]	; 0x2c
   128ac:	cmp	r0, #0
   128b0:	beq	128c0 <main@@Base+0x330>
   128b4:	ldr	r0, [pc, #72]	; 12904 <main@@Base+0x374>
   128b8:	add	r0, pc, r0
   128bc:	bl	123bc <printf@plt>
   128c0:	ldr	r0, [sp, #44]	; 0x2c
   128c4:	sub	sp, fp, #8
   128c8:	pop	{r4, r5, fp, pc}
   128cc:	andeq	r8, r0, ip, lsr #3
   128d0:			; <UNDEFINED> instruction: 0x000081ba
   128d4:	andeq	r8, r0, pc, lsr #2
   128d8:	andeq	r8, r0, sp, lsr #2
   128dc:	strdeq	r7, [r0], -r0
   128e0:	andeq	r8, r0, sl, lsr #1
   128e4:	andeq	r8, r0, fp, lsr #1
   128e8:	andeq	r8, r0, r5, lsl #2
   128ec:	andeq	r8, r0, sl, asr #32
   128f0:	andeq	r8, r0, fp, asr #32
   128f4:	andeq	r8, r0, r5, lsr #1
   128f8:	andeq	r7, r0, sl, asr #31
   128fc:	andeq	r7, r0, fp, asr #31
   12900:	andeq	r8, r0, r5, lsr #32
   12904:	ldrdeq	r7, [r0], -r9
   12908:	andeq	r8, r0, r5, asr #1
   1290c:	push	{fp, lr}
   12910:	mov	fp, sp
   12914:	sub	sp, sp, #32
   12918:	str	r0, [fp, #-4]
   1291c:	ldr	r0, [fp, #-4]
   12920:	bl	14254 <flatcc_builder_reset@@Base>
   12924:	ldr	r1, [fp, #-4]
   12928:	str	r0, [fp, #-12]
   1292c:	mov	r0, r1
   12930:	bl	132c4 <main@@Base+0xd34>
   12934:	ldr	r1, [pc, #132]	; 129c0 <main@@Base+0x430>
   12938:	add	r1, pc, r1
   1293c:	ldr	r2, [fp, #-4]
   12940:	str	r0, [sp, #16]
   12944:	mov	r0, r2
   12948:	bl	13314 <main@@Base+0xd84>
   1294c:	ldr	r1, [fp, #-4]
   12950:	str	r0, [sp, #12]
   12954:	mov	r0, r1
   12958:	bl	13360 <main@@Base+0xdd0>
   1295c:	str	r0, [fp, #-8]
   12960:	ldr	r0, [fp, #-8]
   12964:	cmp	r0, #0
   12968:	beq	12970 <main@@Base+0x3e0>
   1296c:	b	12990 <main@@Base+0x400>
   12970:	ldr	r0, [pc, #76]	; 129c4 <main@@Base+0x434>
   12974:	add	r0, pc, r0
   12978:	ldr	r1, [pc, #72]	; 129c8 <main@@Base+0x438>
   1297c:	add	r1, pc, r1
   12980:	ldr	r2, [pc, #68]	; 129cc <main@@Base+0x43c>
   12984:	add	r3, pc, r2
   12988:	movw	r2, #56	; 0x38
   1298c:	bl	12494 <__assert_fail@plt>
   12990:	ldr	r0, [fp, #-4]
   12994:	ldr	r1, [fp, #-8]
   12998:	bl	13400 <main@@Base+0xe70>
   1299c:	ldr	r1, [fp, #-4]
   129a0:	str	r0, [sp, #8]
   129a4:	mov	r0, r1
   129a8:	bl	1346c <main@@Base+0xedc>
   129ac:	movw	r1, #0
   129b0:	str	r0, [sp, #4]
   129b4:	mov	r0, r1
   129b8:	mov	sp, fp
   129bc:	pop	{fp, pc}
   129c0:	andeq	r7, r0, r1, lsr #29
   129c4:	andeq	r7, r0, pc, lsr #30
   129c8:	andeq	r7, r0, r3, ror lr
   129cc:	andeq	r7, r0, r2, lsr #30
   129d0:	push	{fp, lr}
   129d4:	mov	fp, sp
   129d8:	sub	sp, sp, #8
   129dc:	mov	r0, sp
   129e0:	movw	r1, #0
   129e4:	bl	12410 <gettimeofday@plt>
   129e8:	ldr	r1, [pc, #112]	; 12a60 <main@@Base+0x4d0>
   129ec:	add	r1, pc, r1
   129f0:	ldr	r1, [r1]
   129f4:	cmp	r1, #0
   129f8:	bne	12a14 <main@@Base+0x484>
   129fc:	ldr	r0, [pc, #96]	; 12a64 <main@@Base+0x4d4>
   12a00:	add	r0, pc, r0
   12a04:	ldr	r1, [sp]
   12a08:	str	r1, [r0]
   12a0c:	ldr	r1, [sp, #4]
   12a10:	str	r1, [r0, #4]
   12a14:	vldr	d16, [pc, #60]	; 12a58 <main@@Base+0x4c8>
   12a18:	ldr	r0, [pc, #72]	; 12a68 <main@@Base+0x4d8>
   12a1c:	add	r0, pc, r0
   12a20:	ldr	r1, [sp]
   12a24:	ldr	r2, [r0]
   12a28:	sub	r1, r1, r2
   12a2c:	vmov	s0, r1
   12a30:	vcvt.f64.s32	d17, s0
   12a34:	ldr	r1, [sp, #4]
   12a38:	ldr	r0, [r0, #4]
   12a3c:	sub	r0, r1, r0
   12a40:	vmov	s0, r0
   12a44:	vcvt.f64.s32	d18, s0
   12a48:	vdiv.f64	d16, d18, d16
   12a4c:	vadd.f64	d0, d17, d16
   12a50:	mov	sp, fp
   12a54:	pop	{fp, pc}
   12a58:	andeq	r0, r0, r0
   12a5c:	smlawbmi	lr, r0, r4, r8
   12a60:	andeq	sl, r1, ip, ror #20
   12a64:	andeq	sl, r1, r8, asr sl
   12a68:	andeq	sl, r1, ip, lsr sl
   12a6c:	push	{fp, lr}
   12a70:	mov	fp, sp
   12a74:	sub	sp, sp, #16
   12a78:	ldr	r1, [pc, #100]	; 12ae4 <main@@Base+0x554>
   12a7c:	add	r1, pc, r1
   12a80:	str	r0, [fp, #-4]
   12a84:	str	r1, [sp, #8]
   12a88:	ldr	r0, [fp, #-4]
   12a8c:	movw	r1, #0
   12a90:	cmp	r0, r1
   12a94:	beq	12aac <main@@Base+0x51c>
   12a98:	ldr	r0, [fp, #-4]
   12a9c:	ldr	r1, [sp, #8]
   12aa0:	bl	13948 <main@@Base+0x13b8>
   12aa4:	cmp	r0, #0
   12aa8:	bne	12ab8 <main@@Base+0x528>
   12aac:	movw	r0, #0
   12ab0:	str	r0, [sp, #4]
   12ab4:	b	12ad8 <main@@Base+0x548>
   12ab8:	ldr	r0, [fp, #-4]
   12abc:	ldr	r1, [fp, #-4]
   12ac0:	str	r0, [sp]
   12ac4:	mov	r0, r1
   12ac8:	bl	139f4 <main@@Base+0x1464>
   12acc:	ldr	r1, [sp]
   12ad0:	add	r0, r1, r0
   12ad4:	str	r0, [sp, #4]
   12ad8:	ldr	r0, [sp, #4]
   12adc:	mov	sp, fp
   12ae0:	pop	{fp, pc}
   12ae4:	andeq	r7, r0, r6, asr lr
   12ae8:	push	{fp, lr}
   12aec:	mov	fp, sp
   12af0:	sub	sp, sp, #24
   12af4:	str	r0, [fp, #-4]
   12af8:	movw	r0, #0
   12afc:	strh	r0, [fp, #-10]
   12b00:	ldr	r0, [fp, #-4]
   12b04:	movw	r1, #0
   12b08:	cmp	r0, r1
   12b0c:	beq	12b18 <main@@Base+0x588>
   12b10:	b	12b14 <main@@Base+0x584>
   12b14:	b	12b38 <main@@Base+0x5a8>
   12b18:	ldr	r0, [pc, #208]	; 12bf0 <main@@Base+0x660>
   12b1c:	add	r0, pc, r0
   12b20:	ldr	r1, [pc, #204]	; 12bf4 <main@@Base+0x664>
   12b24:	add	r1, pc, r1
   12b28:	ldr	r2, [pc, #200]	; 12bf8 <main@@Base+0x668>
   12b2c:	add	r3, pc, r2
   12b30:	movw	r2, #699	; 0x2bb
   12b34:	bl	12494 <__assert_fail@plt>
   12b38:	mov	r0, #3
   12b3c:	strh	r0, [sp, #12]
   12b40:	ldr	r0, [fp, #-4]
   12b44:	str	r0, [sp, #4]
   12b48:	bl	13a78 <main@@Base+0x14e8>
   12b4c:	ldr	r1, [sp, #4]
   12b50:	sub	r0, r1, r0
   12b54:	str	r0, [sp, #8]
   12b58:	ldr	r0, [sp, #8]
   12b5c:	bl	13a9c <main@@Base+0x150c>
   12b60:	ldrh	r1, [sp, #12]
   12b64:	add	r1, r1, #3
   12b68:	lsl	r1, r1, #1
   12b6c:	cmp	r0, r1
   12b70:	bcc	12b8c <main@@Base+0x5fc>
   12b74:	ldr	r0, [sp, #8]
   12b78:	ldrh	r1, [sp, #12]
   12b7c:	add	r0, r0, r1, lsl #1
   12b80:	add	r0, r0, #4
   12b84:	bl	13a9c <main@@Base+0x150c>
   12b88:	strh	r0, [fp, #-10]
   12b8c:	ldrsh	r0, [fp, #-10]
   12b90:	cmp	r0, #0
   12b94:	beq	12bd0 <main@@Base+0x640>
   12b98:	ldr	r0, [fp, #-4]
   12b9c:	ldrh	r1, [fp, #-10]
   12ba0:	add	r0, r0, r1
   12ba4:	str	r0, [fp, #-8]
   12ba8:	ldr	r0, [fp, #-8]
   12bac:	add	r0, r0, #4
   12bb0:	ldr	r1, [fp, #-8]
   12bb4:	str	r0, [sp]
   12bb8:	mov	r0, r1
   12bbc:	bl	139f4 <main@@Base+0x1464>
   12bc0:	ldr	r1, [sp]
   12bc4:	add	r0, r1, r0
   12bc8:	mov	sp, fp
   12bcc:	pop	{fp, pc}
   12bd0:	ldr	r0, [pc, #36]	; 12bfc <main@@Base+0x66c>
   12bd4:	add	r0, pc, r0
   12bd8:	ldr	r1, [pc, #32]	; 12c00 <main@@Base+0x670>
   12bdc:	add	r1, pc, r1
   12be0:	ldr	r2, [pc, #28]	; 12c04 <main@@Base+0x674>
   12be4:	add	r3, pc, r2
   12be8:	movw	r2, #699	; 0x2bb
   12bec:	bl	12494 <__assert_fail@plt>
   12bf0:	andeq	r7, r0, lr, lsl #31
   12bf4:	andeq	r7, r0, ip, lsr #31
   12bf8:	andeq	r8, r0, sl, lsl r0
   12bfc:	andeq	r7, r0, r3, asr #31
   12c00:	strdeq	r7, [r0], -r4
   12c04:	andeq	r7, r0, r2, ror #30
   12c08:	push	{fp, lr}
   12c0c:	mov	fp, sp
   12c10:	sub	sp, sp, #32
   12c14:	str	r0, [fp, #-8]
   12c18:	movw	r0, #0
   12c1c:	strh	r0, [fp, #-14]
   12c20:	ldr	r0, [fp, #-8]
   12c24:	movw	r1, #0
   12c28:	cmp	r0, r1
   12c2c:	beq	12c38 <main@@Base+0x6a8>
   12c30:	b	12c34 <main@@Base+0x6a4>
   12c34:	b	12c58 <main@@Base+0x6c8>
   12c38:	ldr	r0, [pc, #196]	; 12d04 <main@@Base+0x774>
   12c3c:	add	r0, pc, r0
   12c40:	ldr	r1, [pc, #192]	; 12d08 <main@@Base+0x778>
   12c44:	add	r1, pc, r1
   12c48:	ldr	r2, [pc, #188]	; 12d0c <main@@Base+0x77c>
   12c4c:	add	r3, pc, r2
   12c50:	movw	r2, #711	; 0x2c7
   12c54:	bl	12494 <__assert_fail@plt>
   12c58:	mov	r0, #11
   12c5c:	strh	r0, [sp, #16]
   12c60:	ldr	r0, [fp, #-8]
   12c64:	str	r0, [sp, #8]
   12c68:	bl	13a78 <main@@Base+0x14e8>
   12c6c:	ldr	r1, [sp, #8]
   12c70:	sub	r0, r1, r0
   12c74:	str	r0, [sp, #12]
   12c78:	ldr	r0, [sp, #12]
   12c7c:	bl	13a9c <main@@Base+0x150c>
   12c80:	ldrh	r1, [sp, #16]
   12c84:	add	r1, r1, #3
   12c88:	lsl	r1, r1, #1
   12c8c:	cmp	r0, r1
   12c90:	bcc	12cac <main@@Base+0x71c>
   12c94:	ldr	r0, [sp, #12]
   12c98:	ldrh	r1, [sp, #16]
   12c9c:	add	r0, r0, r1, lsl #1
   12ca0:	add	r0, r0, #4
   12ca4:	bl	13a9c <main@@Base+0x150c>
   12ca8:	strh	r0, [fp, #-14]
   12cac:	ldrsh	r0, [fp, #-14]
   12cb0:	cmp	r0, #0
   12cb4:	beq	12cf0 <main@@Base+0x760>
   12cb8:	ldr	r0, [fp, #-8]
   12cbc:	ldrh	r1, [fp, #-14]
   12cc0:	add	r0, r0, r1
   12cc4:	str	r0, [fp, #-12]
   12cc8:	ldr	r0, [fp, #-12]
   12ccc:	add	r0, r0, #4
   12cd0:	ldr	r1, [fp, #-12]
   12cd4:	str	r0, [sp, #4]
   12cd8:	mov	r0, r1
   12cdc:	bl	139f4 <main@@Base+0x1464>
   12ce0:	ldr	r1, [sp, #4]
   12ce4:	add	r0, r1, r0
   12ce8:	str	r0, [fp, #-4]
   12cec:	b	12cf8 <main@@Base+0x768>
   12cf0:	movw	r0, #0
   12cf4:	str	r0, [fp, #-4]
   12cf8:	ldr	r0, [fp, #-4]
   12cfc:	mov	sp, fp
   12d00:	pop	{fp, pc}
   12d04:	andeq	r7, r0, lr, ror #28
   12d08:	andeq	r7, r0, ip, lsl #29
   12d0c:	andeq	r7, r0, ip, ror #30
   12d10:	push	{fp, lr}
   12d14:	mov	fp, sp
   12d18:	sub	sp, sp, #8
   12d1c:	str	r0, [sp, #4]
   12d20:	ldr	r0, [sp, #4]
   12d24:	movw	r1, #0
   12d28:	cmp	r0, r1
   12d2c:	beq	12d48 <main@@Base+0x7b8>
   12d30:	ldr	r0, [sp, #4]
   12d34:	mvn	r1, #3
   12d38:	add	r0, r0, r1
   12d3c:	bl	139f4 <main@@Base+0x1464>
   12d40:	str	r0, [sp]
   12d44:	b	12d54 <main@@Base+0x7c4>
   12d48:	movw	r0, #0
   12d4c:	str	r0, [sp]
   12d50:	b	12d54 <main@@Base+0x7c4>
   12d54:	ldr	r0, [sp]
   12d58:	mov	sp, fp
   12d5c:	pop	{fp, pc}
   12d60:	push	{fp, lr}
   12d64:	mov	fp, sp
   12d68:	sub	sp, sp, #40	; 0x28
   12d6c:	str	r0, [fp, #-4]
   12d70:	str	r1, [fp, #-8]
   12d74:	ldr	r0, [fp, #-8]
   12d78:	bl	12ae8 <main@@Base+0x558>
   12d7c:	str	r0, [fp, #-16]
   12d80:	ldr	r0, [fp, #-8]
   12d84:	bl	13aec <main@@Base+0x155c>
   12d88:	str	r0, [sp, #20]
   12d8c:	ldr	r0, [fp, #-16]
   12d90:	bl	13bf4 <main@@Base+0x1664>
   12d94:	cmp	r0, #700	; 0x2bc
   12d98:	beq	12dbc <main@@Base+0x82c>
   12d9c:	ldr	r0, [pc, #520]	; 12fac <main@@Base+0xa1c>
   12da0:	add	r0, pc, r0
   12da4:	ldr	r1, [pc, #516]	; 12fb0 <main@@Base+0xa20>
   12da8:	add	r1, pc, r1
   12dac:	ldr	r2, [pc, #512]	; 12fb4 <main@@Base+0xa24>
   12db0:	add	r3, pc, r2
   12db4:	movw	r2, #74	; 0x4a
   12db8:	bl	12494 <__assert_fail@plt>
   12dbc:	ldr	r0, [sp, #20]
   12dc0:	bl	13c44 <main@@Base+0x16b4>
   12dc4:	ldr	r1, [pc, #428]	; 12f78 <main@@Base+0x9e8>
   12dc8:	cmp	r0, r1
   12dcc:	beq	12df0 <main@@Base+0x860>
   12dd0:	ldr	r0, [pc, #456]	; 12fa0 <main@@Base+0xa10>
   12dd4:	add	r0, pc, r0
   12dd8:	ldr	r1, [pc, #452]	; 12fa4 <main@@Base+0xa14>
   12ddc:	add	r1, pc, r1
   12de0:	ldr	r2, [pc, #448]	; 12fa8 <main@@Base+0xa18>
   12de4:	add	r3, pc, r2
   12de8:	movw	r2, #78	; 0x4e
   12dec:	bl	12494 <__assert_fail@plt>
   12df0:	movw	r0, #0
   12df4:	str	r0, [fp, #-12]
   12df8:	ldr	r0, [fp, #-12]
   12dfc:	cmp	r0, #100	; 0x64
   12e00:	bcs	12ef8 <main@@Base+0x968>
   12e04:	ldr	r0, [fp, #-16]
   12e08:	ldr	r1, [fp, #-12]
   12e0c:	movw	r2, #7
   12e10:	mul	r1, r1, r2
   12e14:	add	r0, r0, r1
   12e18:	ldr	r1, [pc, #408]	; 12fb8 <main@@Base+0xa28>
   12e1c:	add	r1, pc, r1
   12e20:	mov	r2, #7
   12e24:	bl	123ec <memcmp@plt>
   12e28:	cmp	r0, #0
   12e2c:	beq	12ee4 <main@@Base+0x954>
   12e30:	ldr	r1, [fp, #-12]
   12e34:	ldr	r0, [fp, #-16]
   12e38:	movw	r2, #0
   12e3c:	cmp	r0, r2
   12e40:	str	r1, [sp, #16]
   12e44:	beq	12e54 <main@@Base+0x8c4>
   12e48:	ldr	r0, [fp, #-16]
   12e4c:	str	r0, [sp, #12]
   12e50:	b	12e64 <main@@Base+0x8d4>
   12e54:	ldr	r0, [pc, #300]	; 12f88 <main@@Base+0x9f8>
   12e58:	add	r0, pc, r0
   12e5c:	str	r0, [sp, #12]
   12e60:	b	12e64 <main@@Base+0x8d4>
   12e64:	ldr	r0, [sp, #12]
   12e68:	ldr	r1, [pc, #300]	; 12f9c <main@@Base+0xa0c>
   12e6c:	add	r1, pc, r1
   12e70:	str	r0, [sp, #8]
   12e74:	mov	r0, r1
   12e78:	ldr	r1, [sp, #16]
   12e7c:	ldr	r2, [sp, #8]
   12e80:	bl	123bc <printf@plt>
   12e84:	ldr	r1, [pc, #268]	; 12f98 <main@@Base+0xa08>
   12e88:	add	r1, pc, r1
   12e8c:	ldr	r2, [fp, #-16]
   12e90:	ldr	r3, [fp, #-12]
   12e94:	movw	ip, #7
   12e98:	mul	r3, r3, ip
   12e9c:	add	r2, r2, r3
   12ea0:	ldr	r3, [fp, #-4]
   12ea4:	sub	r2, r2, r3
   12ea8:	str	r0, [sp, #4]
   12eac:	mov	r0, r1
   12eb0:	mov	r1, r2
   12eb4:	bl	123bc <printf@plt>
   12eb8:	ldr	r1, [pc, #204]	; 12f8c <main@@Base+0x9fc>
   12ebc:	add	r1, pc, r1
   12ec0:	ldr	r2, [pc, #200]	; 12f90 <main@@Base+0xa00>
   12ec4:	add	r2, pc, r2
   12ec8:	ldr	r3, [pc, #196]	; 12f94 <main@@Base+0xa04>
   12ecc:	add	r3, pc, r3
   12ed0:	str	r0, [sp]
   12ed4:	mov	r0, r1
   12ed8:	mov	r1, r2
   12edc:	movw	r2, #85	; 0x55
   12ee0:	bl	12494 <__assert_fail@plt>
   12ee4:	b	12ee8 <main@@Base+0x958>
   12ee8:	ldr	r0, [fp, #-12]
   12eec:	add	r0, r0, #1
   12ef0:	str	r0, [fp, #-12]
   12ef4:	b	12df8 <main@@Base+0x868>
   12ef8:	movw	r0, #0
   12efc:	str	r0, [fp, #-12]
   12f00:	ldr	r0, [fp, #-12]
   12f04:	cmp	r0, #100	; 0x64
   12f08:	bcs	12f6c <main@@Base+0x9dc>
   12f0c:	ldr	r0, [sp, #20]
   12f10:	ldr	r1, [fp, #-12]
   12f14:	movw	r2, #1000	; 0x3e8
   12f18:	mul	r1, r1, r2
   12f1c:	add	r0, r0, r1
   12f20:	ldr	r1, [pc, #148]	; 12fbc <main@@Base+0xa2c>
   12f24:	add	r1, pc, r1
   12f28:	mov	r2, #1000	; 0x3e8
   12f2c:	bl	123ec <memcmp@plt>
   12f30:	cmp	r0, #0
   12f34:	beq	12f58 <main@@Base+0x9c8>
   12f38:	ldr	r0, [pc, #60]	; 12f7c <main@@Base+0x9ec>
   12f3c:	add	r0, pc, r0
   12f40:	ldr	r1, [pc, #56]	; 12f80 <main@@Base+0x9f0>
   12f44:	add	r1, pc, r1
   12f48:	ldr	r2, [pc, #52]	; 12f84 <main@@Base+0x9f4>
   12f4c:	add	r3, pc, r2
   12f50:	movw	r2, #91	; 0x5b
   12f54:	bl	12494 <__assert_fail@plt>
   12f58:	b	12f5c <main@@Base+0x9cc>
   12f5c:	ldr	r0, [fp, #-12]
   12f60:	add	r0, r0, #1
   12f64:	str	r0, [fp, #-12]
   12f68:	b	12f00 <main@@Base+0x970>
   12f6c:	movw	r0, #0
   12f70:	mov	sp, fp
   12f74:	pop	{fp, pc}
   12f78:	andeq	r8, r1, r0, lsr #13
   12f7c:	andeq	r9, r0, r5, lsr r3
   12f80:	andeq	r7, r0, fp, lsr #17
   12f84:	ldrdeq	r7, [r0], -r2
   12f88:	andeq	r7, r0, r7, lsr #28
   12f8c:			; <UNDEFINED> instruction: 0x000093b5
   12f90:	andeq	r7, r0, fp, lsr #18
   12f94:	andeq	r7, r0, r2, asr sp
   12f98:	strdeq	r7, [r0], -ip
   12f9c:	strdeq	r7, [r0], -r3
   12fa0:	muleq	r0, sp, r4
   12fa4:	andeq	r7, r0, r3, lsl sl
   12fa8:	andeq	r7, r0, sl, lsr lr
   12fac:	ldrdeq	r9, [r0], -r1
   12fb0:	andeq	r7, r0, r7, asr #20
   12fb4:	andeq	r7, r0, lr, ror #28
   12fb8:	andeq	r7, r0, r2, lsl #22
   12fbc:	andeq	sl, r1, ip, asr #2
   12fc0:	push	{fp, lr}
   12fc4:	mov	fp, sp
   12fc8:	sub	sp, sp, #16
   12fcc:	str	r0, [fp, #-4]
   12fd0:	str	r1, [sp, #8]
   12fd4:	ldr	r0, [fp, #-4]
   12fd8:	ldr	r1, [sp, #8]
   12fdc:	add	r0, r0, r1, lsl #2
   12fe0:	str	r0, [sp, #4]
   12fe4:	ldr	r0, [fp, #-4]
   12fe8:	bl	13c64 <main@@Base+0x16d4>
   12fec:	ldr	r1, [sp, #8]
   12ff0:	cmp	r0, r1
   12ff4:	bls	13000 <main@@Base+0xa70>
   12ff8:	b	12ffc <main@@Base+0xa6c>
   12ffc:	b	13020 <main@@Base+0xa90>
   13000:	ldr	r0, [pc, #60]	; 13044 <main@@Base+0xab4>
   13004:	add	r0, pc, r0
   13008:	ldr	r1, [pc, #56]	; 13048 <main@@Base+0xab8>
   1300c:	add	r1, pc, r1
   13010:	ldr	r2, [pc, #52]	; 1304c <main@@Base+0xabc>
   13014:	add	r3, pc, r2
   13018:	movw	r2, #693	; 0x2b5
   1301c:	bl	12494 <__assert_fail@plt>
   13020:	ldr	r0, [sp, #4]
   13024:	ldr	r1, [sp, #4]
   13028:	str	r0, [sp]
   1302c:	mov	r0, r1
   13030:	bl	139f4 <main@@Base+0x1464>
   13034:	ldr	r1, [sp]
   13038:	add	r0, r1, r0
   1303c:	mov	sp, fp
   13040:	pop	{fp, pc}
   13044:	strdeq	r7, [r0], -r9
   13048:	andeq	r7, r0, r4, asr #21
   1304c:	andeq	r7, r0, r0, lsr #26
   13050:	push	{fp, lr}
   13054:	mov	fp, sp
   13058:	sub	sp, sp, #80	; 0x50
   1305c:	ldr	ip, [pc, #584]	; 132ac <main@@Base+0xd1c>
   13060:	add	ip, pc, ip
   13064:	str	r0, [fp, #-4]
   13068:	vstr	d0, [fp, #-16]
   1306c:	vstr	d1, [fp, #-24]	; 0xffffffe8
   13070:	str	r1, [fp, #-28]	; 0xffffffe4
   13074:	str	r2, [fp, #-32]	; 0xffffffe0
   13078:	str	r3, [fp, #-36]	; 0xffffffdc
   1307c:	vldr	d16, [fp, #-24]	; 0xffffffe8
   13080:	vldr	d17, [fp, #-16]
   13084:	vsub.f64	d16, d16, d17
   13088:	vstr	d16, [sp, #32]
   1308c:	ldr	r1, [fp, #-4]
   13090:	mov	r0, ip
   13094:	bl	123bc <printf@plt>
   13098:	ldr	r1, [pc, #520]	; 132a8 <main@@Base+0xd18>
   1309c:	add	r1, pc, r1
   130a0:	vldr	d16, [sp, #32]
   130a4:	str	r0, [sp, #20]
   130a8:	mov	r0, r1
   130ac:	vmov	r2, r3, d16
   130b0:	bl	123bc <printf@plt>
   130b4:	ldr	r1, [pc, #488]	; 132a4 <main@@Base+0xd14>
   130b8:	add	r1, pc, r1
   130bc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   130c0:	str	r0, [sp, #16]
   130c4:	mov	r0, r1
   130c8:	mov	r1, r2
   130cc:	bl	123bc <printf@plt>
   130d0:	ldr	r1, [pc, #456]	; 132a0 <main@@Base+0xd10>
   130d4:	add	r1, pc, r1
   130d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   130dc:	str	r0, [sp, #12]
   130e0:	mov	r0, r1
   130e4:	mov	r1, r2
   130e8:	bl	123bc <printf@plt>
   130ec:	ldr	r1, [pc, #424]	; 1329c <main@@Base+0xd0c>
   130f0:	add	r1, pc, r1
   130f4:	vldr	d16, [pc, #388]	; 13280 <main@@Base+0xcf0>
   130f8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   130fc:	vmov	s4, r2
   13100:	vcvt.f64.s32	d17, s4
   13104:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13108:	vmov	s4, r2
   1310c:	vcvt.f64.u32	d18, s4
   13110:	vmul.f64	d17, d17, d18
   13114:	vdiv.f64	d16, d17, d16
   13118:	vldr	d17, [sp, #32]
   1311c:	vdiv.f64	d16, d16, d17
   13120:	str	r0, [sp, #8]
   13124:	mov	r0, r1
   13128:	vmov	r2, r3, d16
   1312c:	bl	123bc <printf@plt>
   13130:	ldr	r1, [pc, #352]	; 13298 <main@@Base+0xd08>
   13134:	add	r1, pc, r1
   13138:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1313c:	vmov	s4, r2
   13140:	vcvt.f64.s32	d16, s4
   13144:	vldr	d17, [sp, #32]
   13148:	vdiv.f64	d16, d16, d17
   1314c:	str	r0, [sp, #4]
   13150:	mov	r0, r1
   13154:	vmov	r2, r3, d16
   13158:	bl	123bc <printf@plt>
   1315c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13160:	movw	r2, #0
   13164:	cmp	r1, r2
   13168:	beq	13198 <main@@Base+0xc08>
   1316c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13170:	cmp	r0, #1
   13174:	beq	13198 <main@@Base+0xc08>
   13178:	ldr	r0, [pc, #304]	; 132b0 <main@@Base+0xd20>
   1317c:	add	r0, pc, r0
   13180:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13184:	vldr	d16, [sp, #32]
   13188:	vmov.f64	d17, #112	; 0x3f800000  1.0
   1318c:	vdiv.f64	d16, d17, d16
   13190:	vmov	r2, r3, d16
   13194:	bl	123bc <printf@plt>
   13198:	vldr	d16, [pc, #232]	; 13288 <main@@Base+0xcf8>
   1319c:	vldr	d17, [pc, #236]	; 13290 <main@@Base+0xd00>
   131a0:	vldr	d18, [sp, #32]
   131a4:	vmul.f64	d17, d18, d17
   131a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   131ac:	vmov	s0, r0
   131b0:	vcvt.f64.s32	d18, s0
   131b4:	vdiv.f64	d17, d17, d18
   131b8:	vstr	d17, [sp, #24]
   131bc:	vldr	d17, [sp, #24]
   131c0:	vcmpe.f64	d17, d16
   131c4:	vmrs	APSR_nzcv, fpscr
   131c8:	bpl	131e4 <main@@Base+0xc54>
   131cc:	ldr	r0, [pc, #236]	; 132c0 <main@@Base+0xd30>
   131d0:	add	r0, pc, r0
   131d4:	vldr	d16, [sp, #24]
   131d8:	vmov	r2, r3, d16
   131dc:	bl	123bc <printf@plt>
   131e0:	b	13270 <main@@Base+0xce0>
   131e4:	vldr	d16, [pc, #148]	; 13280 <main@@Base+0xcf0>
   131e8:	vldr	d17, [sp, #24]
   131ec:	vcmpe.f64	d17, d16
   131f0:	vmrs	APSR_nzcv, fpscr
   131f4:	bpl	13218 <main@@Base+0xc88>
   131f8:	ldr	r0, [pc, #188]	; 132bc <main@@Base+0xd2c>
   131fc:	add	r0, pc, r0
   13200:	vldr	d16, [pc, #128]	; 13288 <main@@Base+0xcf8>
   13204:	vldr	d17, [sp, #24]
   13208:	vdiv.f64	d16, d17, d16
   1320c:	vmov	r2, r3, d16
   13210:	bl	123bc <printf@plt>
   13214:	b	1326c <main@@Base+0xcdc>
   13218:	vldr	d16, [pc, #112]	; 13290 <main@@Base+0xd00>
   1321c:	vldr	d17, [sp, #24]
   13220:	vcmpe.f64	d17, d16
   13224:	vmrs	APSR_nzcv, fpscr
   13228:	bpl	1324c <main@@Base+0xcbc>
   1322c:	ldr	r0, [pc, #132]	; 132b8 <main@@Base+0xd28>
   13230:	add	r0, pc, r0
   13234:	vldr	d16, [pc, #68]	; 13280 <main@@Base+0xcf0>
   13238:	vldr	d17, [sp, #24]
   1323c:	vdiv.f64	d16, d17, d16
   13240:	vmov	r2, r3, d16
   13244:	bl	123bc <printf@plt>
   13248:	b	13268 <main@@Base+0xcd8>
   1324c:	ldr	r0, [pc, #96]	; 132b4 <main@@Base+0xd24>
   13250:	add	r0, pc, r0
   13254:	vldr	d16, [pc, #52]	; 13290 <main@@Base+0xd00>
   13258:	vldr	d17, [sp, #24]
   1325c:	vdiv.f64	d16, d17, d16
   13260:	vmov	r2, r3, d16
   13264:	bl	123bc <printf@plt>
   13268:	b	1326c <main@@Base+0xcdc>
   1326c:	b	13270 <main@@Base+0xce0>
   13270:	movw	r0, #0
   13274:	mov	sp, fp
   13278:	pop	{fp, pc}
   1327c:	nop	{0}
   13280:	andeq	r0, r0, r0
   13284:	smlawbmi	lr, r0, r4, r8
   13288:	andeq	r0, r0, r0
   1328c:	addmi	r4, pc, r0
   13290:	andeq	r0, r0, r0
   13294:	bicmi	ip, sp, r5, ror #26
   13298:	andeq	r7, r0, r5, asr #25
   1329c:	strdeq	r7, [r0], -r1
   132a0:	strdeq	r7, [r0], -sl
   132a4:	andeq	r7, r0, r6, lsl #26
   132a8:	andeq	r7, r0, sl, lsl #26
   132ac:	andeq	r7, r0, r7, lsr sp
   132b0:	muleq	r0, lr, ip
   132b4:	andeq	r7, r0, r6, lsr ip
   132b8:	andeq	r7, r0, lr, lsr ip
   132bc:	andeq	r7, r0, sl, asr ip
   132c0:	andeq	r7, r0, lr, ror #24
   132c4:	push	{fp, lr}
   132c8:	mov	fp, sp
   132cc:	sub	sp, sp, #8
   132d0:	ldr	r1, [pc, #56]	; 13310 <main@@Base+0xd80>
   132d4:	add	r1, pc, r1
   132d8:	str	r0, [sp, #4]
   132dc:	ldr	r0, [sp, #4]
   132e0:	bl	134ac <main@@Base+0xf1c>
   132e4:	cmp	r0, #0
   132e8:	beq	132f8 <main@@Base+0xd68>
   132ec:	mvn	r0, #0
   132f0:	str	r0, [sp]
   132f4:	b	13304 <main@@Base+0xd74>
   132f8:	ldr	r0, [sp, #4]
   132fc:	bl	134e0 <main@@Base+0xf50>
   13300:	str	r0, [sp]
   13304:	ldr	r0, [sp]
   13308:	mov	sp, fp
   1330c:	pop	{fp, pc}
   13310:	strdeq	r7, [r0], -lr
   13314:	push	{fp, lr}
   13318:	mov	fp, sp
   1331c:	sub	sp, sp, #16
   13320:	str	r0, [fp, #-4]
   13324:	str	r1, [sp, #8]
   13328:	ldr	r0, [fp, #-4]
   1332c:	ldr	r1, [fp, #-4]
   13330:	ldr	r2, [sp, #8]
   13334:	str	r0, [sp, #4]
   13338:	mov	r0, r1
   1333c:	mov	r1, r2
   13340:	bl	18cb8 <flatcc_builder_create_string_str@@Base>
   13344:	ldr	r1, [sp, #4]
   13348:	str	r0, [sp]
   1334c:	mov	r0, r1
   13350:	ldr	r1, [sp]
   13354:	bl	13504 <main@@Base+0xf74>
   13358:	mov	sp, fp
   1335c:	pop	{fp, pc}
   13360:	push	{fp, lr}
   13364:	mov	fp, sp
   13368:	sub	sp, sp, #16
   1336c:	str	r0, [fp, #-4]
   13370:	ldr	r0, [fp, #-4]
   13374:	bl	13570 <main@@Base+0xfe0>
   13378:	movw	r1, #0
   1337c:	str	r1, [sp, #8]
   13380:	ldr	r0, [sp, #8]
   13384:	cmp	r0, #1000	; 0x3e8
   13388:	bcs	133e4 <main@@Base+0xe54>
   1338c:	ldr	r0, [fp, #-4]
   13390:	bl	13590 <main@@Base+0x1000>
   13394:	str	r0, [sp, #4]
   13398:	ldr	r0, [sp, #4]
   1339c:	cmp	r0, #0
   133a0:	beq	133a8 <main@@Base+0xe18>
   133a4:	b	133c8 <main@@Base+0xe38>
   133a8:	ldr	r0, [pc, #68]	; 133f4 <main@@Base+0xe64>
   133ac:	add	r0, pc, r0
   133b0:	ldr	r1, [pc, #64]	; 133f8 <main@@Base+0xe68>
   133b4:	add	r1, pc, r1
   133b8:	ldr	r2, [pc, #60]	; 133fc <main@@Base+0xe6c>
   133bc:	add	r3, pc, r2
   133c0:	movw	r2, #42	; 0x2a
   133c4:	bl	12494 <__assert_fail@plt>
   133c8:	ldr	r0, [fp, #-4]
   133cc:	ldr	r1, [sp, #4]
   133d0:	bl	13668 <main@@Base+0x10d8>
   133d4:	ldr	r0, [sp, #8]
   133d8:	add	r0, r0, #1
   133dc:	str	r0, [sp, #8]
   133e0:	b	13380 <main@@Base+0xdf0>
   133e4:	ldr	r0, [fp, #-4]
   133e8:	bl	136b4 <main@@Base+0x1124>
   133ec:	mov	sp, fp
   133f0:	pop	{fp, pc}
   133f4:	andeq	r7, r0, fp, lsr #10
   133f8:	andeq	r7, r0, fp, lsr r4
   133fc:	andeq	r7, r0, sp, lsl r5
   13400:	push	{fp, lr}
   13404:	mov	fp, sp
   13408:	sub	sp, sp, #16
   1340c:	str	r0, [fp, #-4]
   13410:	str	r1, [sp, #8]
   13414:	ldr	r0, [sp, #8]
   13418:	cmp	r0, #0
   1341c:	beq	13454 <main@@Base+0xec4>
   13420:	ldr	r0, [fp, #-4]
   13424:	movw	r1, #11
   13428:	bl	17fac <flatcc_builder_table_add_offset@@Base>
   1342c:	str	r0, [sp, #4]
   13430:	movw	r1, #0
   13434:	cmp	r0, r1
   13438:	beq	13454 <main@@Base+0xec4>
   1343c:	ldr	r0, [sp, #8]
   13440:	ldr	r1, [sp, #4]
   13444:	str	r0, [r1]
   13448:	movw	r0, #0
   1344c:	str	r0, [sp]
   13450:	b	13460 <main@@Base+0xed0>
   13454:	mvn	r0, #0
   13458:	str	r0, [sp]
   1345c:	b	13460 <main@@Base+0xed0>
   13460:	ldr	r0, [sp]
   13464:	mov	sp, fp
   13468:	pop	{fp, pc}
   1346c:	push	{fp, lr}
   13470:	mov	fp, sp
   13474:	sub	sp, sp, #16
   13478:	str	r0, [fp, #-4]
   1347c:	ldr	r0, [fp, #-4]
   13480:	ldr	r1, [fp, #-4]
   13484:	str	r0, [sp, #8]
   13488:	mov	r0, r1
   1348c:	bl	137f4 <main@@Base+0x1264>
   13490:	ldr	r1, [sp, #8]
   13494:	str	r0, [sp, #4]
   13498:	mov	r0, r1
   1349c:	ldr	r1, [sp, #4]
   134a0:	bl	13920 <main@@Base+0x1390>
   134a4:	mov	sp, fp
   134a8:	pop	{fp, pc}
   134ac:	push	{fp, lr}
   134b0:	mov	fp, sp
   134b4:	sub	sp, sp, #8
   134b8:	str	r0, [sp, #4]
   134bc:	str	r1, [sp]
   134c0:	ldr	r0, [sp, #4]
   134c4:	ldr	r1, [sp]
   134c8:	movw	r2, #0
   134cc:	uxth	r2, r2
   134d0:	movw	r3, #0
   134d4:	bl	15110 <flatcc_builder_start_buffer@@Base>
   134d8:	mov	sp, fp
   134dc:	pop	{fp, pc}
   134e0:	push	{fp, lr}
   134e4:	mov	fp, sp
   134e8:	sub	sp, sp, #8
   134ec:	str	r0, [sp, #4]
   134f0:	ldr	r0, [sp, #4]
   134f4:	movw	r1, #36	; 0x24
   134f8:	bl	16838 <flatcc_builder_start_table@@Base>
   134fc:	mov	sp, fp
   13500:	pop	{fp, pc}
   13504:	push	{fp, lr}
   13508:	mov	fp, sp
   1350c:	sub	sp, sp, #16
   13510:	str	r0, [fp, #-4]
   13514:	str	r1, [sp, #8]
   13518:	ldr	r0, [sp, #8]
   1351c:	cmp	r0, #0
   13520:	beq	13558 <main@@Base+0xfc8>
   13524:	ldr	r0, [fp, #-4]
   13528:	movw	r1, #3
   1352c:	bl	17fac <flatcc_builder_table_add_offset@@Base>
   13530:	str	r0, [sp, #4]
   13534:	movw	r1, #0
   13538:	cmp	r0, r1
   1353c:	beq	13558 <main@@Base+0xfc8>
   13540:	ldr	r0, [sp, #8]
   13544:	ldr	r1, [sp, #4]
   13548:	str	r0, [r1]
   1354c:	movw	r0, #0
   13550:	str	r0, [sp]
   13554:	b	13564 <main@@Base+0xfd4>
   13558:	mvn	r0, #0
   1355c:	str	r0, [sp]
   13560:	b	13564 <main@@Base+0xfd4>
   13564:	ldr	r0, [sp]
   13568:	mov	sp, fp
   1356c:	pop	{fp, pc}
   13570:	push	{fp, lr}
   13574:	mov	fp, sp
   13578:	sub	sp, sp, #8
   1357c:	str	r0, [sp, #4]
   13580:	ldr	r0, [sp, #4]
   13584:	bl	164a4 <flatcc_builder_start_offset_vector@@Base>
   13588:	mov	sp, fp
   1358c:	pop	{fp, pc}
   13590:	push	{fp, lr}
   13594:	mov	fp, sp
   13598:	sub	sp, sp, #24
   1359c:	str	r0, [fp, #-4]
   135a0:	ldr	r0, [fp, #-4]
   135a4:	bl	134e0 <main@@Base+0xf50>
   135a8:	ldr	r1, [fp, #-4]
   135ac:	str	r0, [sp, #12]
   135b0:	mov	r0, r1
   135b4:	bl	136d4 <main@@Base+0x1144>
   135b8:	movw	r1, #0
   135bc:	str	r1, [fp, #-8]
   135c0:	ldr	r0, [fp, #-8]
   135c4:	cmp	r0, #100	; 0x64
   135c8:	bcs	135f0 <main@@Base+0x1060>
   135cc:	ldr	r0, [pc, #144]	; 13664 <main@@Base+0x10d4>
   135d0:	add	r1, pc, r0
   135d4:	ldr	r0, [fp, #-4]
   135d8:	movw	r2, #7
   135dc:	bl	136f4 <main@@Base+0x1164>
   135e0:	ldr	r0, [fp, #-8]
   135e4:	add	r0, r0, #1
   135e8:	str	r0, [fp, #-8]
   135ec:	b	135c0 <main@@Base+0x1030>
   135f0:	ldr	r0, [fp, #-4]
   135f4:	bl	13724 <main@@Base+0x1194>
   135f8:	ldr	r1, [fp, #-4]
   135fc:	str	r0, [sp, #8]
   13600:	mov	r0, r1
   13604:	bl	13764 <main@@Base+0x11d4>
   13608:	movw	r1, #0
   1360c:	str	r1, [fp, #-8]
   13610:	ldr	r0, [fp, #-8]
   13614:	cmp	r0, #100	; 0x64
   13618:	bcs	13640 <main@@Base+0x10b0>
   1361c:	ldr	r0, [pc, #60]	; 13660 <main@@Base+0x10d0>
   13620:	add	r1, pc, r0
   13624:	ldr	r0, [fp, #-4]
   13628:	movw	r2, #1000	; 0x3e8
   1362c:	bl	13784 <main@@Base+0x11f4>
   13630:	ldr	r0, [fp, #-8]
   13634:	add	r0, r0, #1
   13638:	str	r0, [fp, #-8]
   1363c:	b	13610 <main@@Base+0x1080>
   13640:	ldr	r0, [fp, #-4]
   13644:	bl	137b4 <main@@Base+0x1224>
   13648:	ldr	r1, [fp, #-4]
   1364c:	str	r0, [sp, #4]
   13650:	mov	r0, r1
   13654:	bl	137f4 <main@@Base+0x1264>
   13658:	mov	sp, fp
   1365c:	pop	{fp, pc}
   13660:	andeq	r9, r1, r0, asr sl
   13664:	andeq	r7, r0, lr, asr #6
   13668:	push	{fp, lr}
   1366c:	mov	fp, sp
   13670:	sub	sp, sp, #16
   13674:	str	r0, [fp, #-4]
   13678:	str	r1, [sp, #8]
   1367c:	ldr	r0, [sp, #8]
   13680:	cmp	r0, #0
   13684:	beq	1369c <main@@Base+0x110c>
   13688:	ldr	r0, [fp, #-4]
   1368c:	ldr	r1, [sp, #8]
   13690:	bl	15c94 <flatcc_builder_offset_vector_push@@Base>
   13694:	str	r0, [sp, #4]
   13698:	b	136a8 <main@@Base+0x1118>
   1369c:	movw	r0, #0
   136a0:	str	r0, [sp, #4]
   136a4:	b	136a8 <main@@Base+0x1118>
   136a8:	ldr	r0, [sp, #4]
   136ac:	mov	sp, fp
   136b0:	pop	{fp, pc}
   136b4:	push	{fp, lr}
   136b8:	mov	fp, sp
   136bc:	sub	sp, sp, #8
   136c0:	str	r0, [sp, #4]
   136c4:	ldr	r0, [sp, #4]
   136c8:	bl	165b0 <flatcc_builder_end_offset_vector@@Base>
   136cc:	mov	sp, fp
   136d0:	pop	{fp, pc}
   136d4:	push	{fp, lr}
   136d8:	mov	fp, sp
   136dc:	sub	sp, sp, #8
   136e0:	str	r0, [sp, #4]
   136e4:	ldr	r0, [sp, #4]
   136e8:	bl	16658 <flatcc_builder_start_string@@Base>
   136ec:	mov	sp, fp
   136f0:	pop	{fp, pc}
   136f4:	push	{fp, lr}
   136f8:	mov	fp, sp
   136fc:	sub	sp, sp, #16
   13700:	str	r0, [fp, #-4]
   13704:	str	r1, [sp, #8]
   13708:	str	r2, [sp, #4]
   1370c:	ldr	r0, [fp, #-4]
   13710:	ldr	r1, [sp, #8]
   13714:	ldr	r2, [sp, #4]
   13718:	bl	15eb0 <flatcc_builder_append_string@@Base>
   1371c:	mov	sp, fp
   13720:	pop	{fp, pc}
   13724:	push	{fp, lr}
   13728:	mov	fp, sp
   1372c:	sub	sp, sp, #16
   13730:	str	r0, [fp, #-4]
   13734:	ldr	r0, [fp, #-4]
   13738:	ldr	r1, [fp, #-4]
   1373c:	str	r0, [sp, #8]
   13740:	mov	r0, r1
   13744:	bl	18d64 <flatcc_builder_end_string@@Base>
   13748:	ldr	r1, [sp, #8]
   1374c:	str	r0, [sp, #4]
   13750:	mov	r0, r1
   13754:	ldr	r1, [sp, #4]
   13758:	bl	13504 <main@@Base+0xf74>
   1375c:	mov	sp, fp
   13760:	pop	{fp, pc}
   13764:	push	{fp, lr}
   13768:	mov	fp, sp
   1376c:	sub	sp, sp, #8
   13770:	str	r0, [sp, #4]
   13774:	ldr	r0, [sp, #4]
   13778:	bl	13864 <main@@Base+0x12d4>
   1377c:	mov	sp, fp
   13780:	pop	{fp, pc}
   13784:	push	{fp, lr}
   13788:	mov	fp, sp
   1378c:	sub	sp, sp, #16
   13790:	str	r0, [fp, #-4]
   13794:	str	r1, [sp, #8]
   13798:	str	r2, [sp, #4]
   1379c:	ldr	r0, [fp, #-4]
   137a0:	ldr	r1, [sp, #8]
   137a4:	ldr	r2, [sp, #4]
   137a8:	bl	15b80 <flatcc_builder_append_vector@@Base>
   137ac:	mov	sp, fp
   137b0:	pop	{fp, pc}
   137b4:	push	{fp, lr}
   137b8:	mov	fp, sp
   137bc:	sub	sp, sp, #16
   137c0:	str	r0, [fp, #-4]
   137c4:	ldr	r0, [fp, #-4]
   137c8:	ldr	r1, [fp, #-4]
   137cc:	str	r0, [sp, #8]
   137d0:	mov	r0, r1
   137d4:	bl	13900 <main@@Base+0x1370>
   137d8:	ldr	r1, [sp, #8]
   137dc:	str	r0, [sp, #4]
   137e0:	mov	r0, r1
   137e4:	ldr	r1, [sp, #4]
   137e8:	bl	13894 <main@@Base+0x1304>
   137ec:	mov	sp, fp
   137f0:	pop	{fp, pc}
   137f4:	push	{fp, lr}
   137f8:	mov	fp, sp
   137fc:	sub	sp, sp, #8
   13800:	ldr	r1, [pc, #76]	; 13854 <main@@Base+0x12c4>
   13804:	add	r1, pc, r1
   13808:	str	r0, [sp, #4]
   1380c:	ldr	r0, [sp, #4]
   13810:	movw	r2, #1
   13814:	bl	173b0 <flatcc_builder_check_required@@Base>
   13818:	cmp	r0, #0
   1381c:	beq	13824 <main@@Base+0x1294>
   13820:	b	13844 <main@@Base+0x12b4>
   13824:	ldr	r0, [pc, #44]	; 13858 <main@@Base+0x12c8>
   13828:	add	r0, pc, r0
   1382c:	ldr	r1, [pc, #40]	; 1385c <main@@Base+0x12cc>
   13830:	add	r1, pc, r1
   13834:	ldr	r2, [pc, #36]	; 13860 <main@@Base+0x12d0>
   13838:	add	r3, pc, r2
   1383c:	movw	r2, #235	; 0xeb
   13840:	bl	12494 <__assert_fail@plt>
   13844:	ldr	r0, [sp, #4]
   13848:	bl	174a0 <flatcc_builder_end_table@@Base>
   1384c:	mov	sp, fp
   13850:	pop	{fp, pc}
   13854:	muleq	r0, sl, r6
   13858:	strdeq	r7, [r0], -lr
   1385c:	muleq	r0, r8, r1
   13860:	andeq	r7, r0, r7, lsl #4
   13864:	push	{fp, lr}
   13868:	mov	fp, sp
   1386c:	sub	sp, sp, #8
   13870:	str	r0, [sp, #4]
   13874:	ldr	r0, [sp, #4]
   13878:	movw	r1, #1
   1387c:	movw	r2, #1
   13880:	uxth	r2, r2
   13884:	mvn	r3, #0
   13888:	bl	163c4 <flatcc_builder_start_vector@@Base>
   1388c:	mov	sp, fp
   13890:	pop	{fp, pc}
   13894:	push	{fp, lr}
   13898:	mov	fp, sp
   1389c:	sub	sp, sp, #16
   138a0:	str	r0, [fp, #-4]
   138a4:	str	r1, [sp, #8]
   138a8:	ldr	r0, [sp, #8]
   138ac:	cmp	r0, #0
   138b0:	beq	138e8 <main@@Base+0x1358>
   138b4:	ldr	r0, [fp, #-4]
   138b8:	movw	r1, #5
   138bc:	bl	17fac <flatcc_builder_table_add_offset@@Base>
   138c0:	str	r0, [sp, #4]
   138c4:	movw	r1, #0
   138c8:	cmp	r0, r1
   138cc:	beq	138e8 <main@@Base+0x1358>
   138d0:	ldr	r0, [sp, #8]
   138d4:	ldr	r1, [sp, #4]
   138d8:	str	r0, [r1]
   138dc:	movw	r0, #0
   138e0:	str	r0, [sp]
   138e4:	b	138f4 <main@@Base+0x1364>
   138e8:	mvn	r0, #0
   138ec:	str	r0, [sp]
   138f0:	b	138f4 <main@@Base+0x1364>
   138f4:	ldr	r0, [sp]
   138f8:	mov	sp, fp
   138fc:	pop	{fp, pc}
   13900:	push	{fp, lr}
   13904:	mov	fp, sp
   13908:	sub	sp, sp, #8
   1390c:	str	r0, [sp, #4]
   13910:	ldr	r0, [sp, #4]
   13914:	bl	178a4 <flatcc_builder_end_vector@@Base>
   13918:	mov	sp, fp
   1391c:	pop	{fp, pc}
   13920:	push	{fp, lr}
   13924:	mov	fp, sp
   13928:	sub	sp, sp, #8
   1392c:	str	r0, [sp, #4]
   13930:	str	r1, [sp]
   13934:	ldr	r0, [sp, #4]
   13938:	ldr	r1, [sp]
   1393c:	bl	15454 <flatcc_builder_end_buffer@@Base>
   13940:	mov	sp, fp
   13944:	pop	{fp, pc}
   13948:	push	{fp, lr}
   1394c:	mov	fp, sp
   13950:	sub	sp, sp, #32
   13954:	str	r0, [fp, #-8]
   13958:	str	r1, [fp, #-12]
   1395c:	movw	r0, #0
   13960:	str	r0, [sp, #12]
   13964:	ldr	r1, [fp, #-12]
   13968:	cmp	r1, r0
   1396c:	bne	1397c <main@@Base+0x13ec>
   13970:	movw	r0, #1
   13974:	str	r0, [fp, #-4]
   13978:	b	139e8 <main@@Base+0x1458>
   1397c:	add	r0, sp, #12
   13980:	ldr	r1, [fp, #-12]
   13984:	movw	r2, #4
   13988:	bl	12464 <strncpy@plt>
   1398c:	ldr	r1, [sp, #12]
   13990:	str	r0, [sp, #8]
   13994:	mov	r0, r1
   13998:	bl	13a18 <main@@Base+0x1488>
   1399c:	str	r0, [sp, #12]
   139a0:	ldr	r0, [fp, #-8]
   139a4:	add	r0, r0, #4
   139a8:	bl	13a2c <main@@Base+0x149c>
   139ac:	str	r0, [sp, #16]
   139b0:	ldr	r0, [sp, #12]
   139b4:	cmp	r0, #0
   139b8:	movw	r0, #1
   139bc:	str	r0, [sp, #4]
   139c0:	beq	139dc <main@@Base+0x144c>
   139c4:	ldr	r0, [sp, #16]
   139c8:	ldr	r1, [sp, #12]
   139cc:	cmp	r0, r1
   139d0:	movw	r0, #0
   139d4:	moveq	r0, #1
   139d8:	str	r0, [sp, #4]
   139dc:	ldr	r0, [sp, #4]
   139e0:	and	r0, r0, #1
   139e4:	str	r0, [fp, #-4]
   139e8:	ldr	r0, [fp, #-4]
   139ec:	mov	sp, fp
   139f0:	pop	{fp, pc}
   139f4:	push	{fp, lr}
   139f8:	mov	fp, sp
   139fc:	sub	sp, sp, #8
   13a00:	str	r0, [sp, #4]
   13a04:	ldr	r0, [sp, #4]
   13a08:	ldr	r0, [r0]
   13a0c:	bl	13a64 <main@@Base+0x14d4>
   13a10:	mov	sp, fp
   13a14:	pop	{fp, pc}
   13a18:	sub	sp, sp, #4
   13a1c:	str	r0, [sp]
   13a20:	ldr	r0, [sp]
   13a24:	add	sp, sp, #4
   13a28:	bx	lr
   13a2c:	push	{fp, lr}
   13a30:	mov	fp, sp
   13a34:	sub	sp, sp, #8
   13a38:	str	r0, [sp, #4]
   13a3c:	ldr	r0, [sp, #4]
   13a40:	ldr	r0, [r0]
   13a44:	bl	13a50 <main@@Base+0x14c0>
   13a48:	mov	sp, fp
   13a4c:	pop	{fp, pc}
   13a50:	sub	sp, sp, #4
   13a54:	str	r0, [sp]
   13a58:	ldr	r0, [sp]
   13a5c:	add	sp, sp, #4
   13a60:	bx	lr
   13a64:	sub	sp, sp, #4
   13a68:	str	r0, [sp]
   13a6c:	ldr	r0, [sp]
   13a70:	add	sp, sp, #4
   13a74:	bx	lr
   13a78:	push	{fp, lr}
   13a7c:	mov	fp, sp
   13a80:	sub	sp, sp, #8
   13a84:	str	r0, [sp, #4]
   13a88:	ldr	r0, [sp, #4]
   13a8c:	ldr	r0, [r0]
   13a90:	bl	13ac4 <main@@Base+0x1534>
   13a94:	mov	sp, fp
   13a98:	pop	{fp, pc}
   13a9c:	push	{fp, lr}
   13aa0:	mov	fp, sp
   13aa4:	sub	sp, sp, #8
   13aa8:	str	r0, [sp, #4]
   13aac:	ldr	r0, [sp, #4]
   13ab0:	ldrh	r0, [r0]
   13ab4:	bl	13ad8 <main@@Base+0x1548>
   13ab8:	uxth	r0, r0
   13abc:	mov	sp, fp
   13ac0:	pop	{fp, pc}
   13ac4:	sub	sp, sp, #4
   13ac8:	str	r0, [sp]
   13acc:	ldr	r0, [sp]
   13ad0:	add	sp, sp, #4
   13ad4:	bx	lr
   13ad8:	sub	sp, sp, #4
   13adc:	strh	r0, [sp, #2]
   13ae0:	ldrh	r0, [sp, #2]
   13ae4:	add	sp, sp, #4
   13ae8:	bx	lr
   13aec:	push	{fp, lr}
   13af0:	mov	fp, sp
   13af4:	sub	sp, sp, #32
   13af8:	str	r0, [fp, #-8]
   13afc:	movw	r0, #0
   13b00:	strh	r0, [fp, #-14]
   13b04:	ldr	r0, [fp, #-8]
   13b08:	movw	r1, #0
   13b0c:	cmp	r0, r1
   13b10:	beq	13b1c <main@@Base+0x158c>
   13b14:	b	13b18 <main@@Base+0x1588>
   13b18:	b	13b3c <main@@Base+0x15ac>
   13b1c:	ldr	r0, [pc, #196]	; 13be8 <main@@Base+0x1658>
   13b20:	add	r0, pc, r0
   13b24:	ldr	r1, [pc, #192]	; 13bec <main@@Base+0x165c>
   13b28:	add	r1, pc, r1
   13b2c:	ldr	r2, [pc, #188]	; 13bf0 <main@@Base+0x1660>
   13b30:	add	r3, pc, r2
   13b34:	movw	r2, #706	; 0x2c2
   13b38:	bl	12494 <__assert_fail@plt>
   13b3c:	mov	r0, #5
   13b40:	strh	r0, [sp, #16]
   13b44:	ldr	r0, [fp, #-8]
   13b48:	str	r0, [sp, #8]
   13b4c:	bl	13a78 <main@@Base+0x14e8>
   13b50:	ldr	r1, [sp, #8]
   13b54:	sub	r0, r1, r0
   13b58:	str	r0, [sp, #12]
   13b5c:	ldr	r0, [sp, #12]
   13b60:	bl	13a9c <main@@Base+0x150c>
   13b64:	ldrh	r1, [sp, #16]
   13b68:	add	r1, r1, #3
   13b6c:	lsl	r1, r1, #1
   13b70:	cmp	r0, r1
   13b74:	bcc	13b90 <main@@Base+0x1600>
   13b78:	ldr	r0, [sp, #12]
   13b7c:	ldrh	r1, [sp, #16]
   13b80:	add	r0, r0, r1, lsl #1
   13b84:	add	r0, r0, #4
   13b88:	bl	13a9c <main@@Base+0x150c>
   13b8c:	strh	r0, [fp, #-14]
   13b90:	ldrsh	r0, [fp, #-14]
   13b94:	cmp	r0, #0
   13b98:	beq	13bd4 <main@@Base+0x1644>
   13b9c:	ldr	r0, [fp, #-8]
   13ba0:	ldrh	r1, [fp, #-14]
   13ba4:	add	r0, r0, r1
   13ba8:	str	r0, [fp, #-12]
   13bac:	ldr	r0, [fp, #-12]
   13bb0:	add	r0, r0, #4
   13bb4:	ldr	r1, [fp, #-12]
   13bb8:	str	r0, [sp, #4]
   13bbc:	mov	r0, r1
   13bc0:	bl	139f4 <main@@Base+0x1464>
   13bc4:	ldr	r1, [sp, #4]
   13bc8:	add	r0, r1, r0
   13bcc:	str	r0, [fp, #-4]
   13bd0:	b	13bdc <main@@Base+0x164c>
   13bd4:	movw	r0, #0
   13bd8:	str	r0, [fp, #-4]
   13bdc:	ldr	r0, [fp, #-4]
   13be0:	mov	sp, fp
   13be4:	pop	{fp, pc}
   13be8:	andeq	r6, r0, sl, lsl #31
   13bec:	andeq	r6, r0, r8, lsr #31
   13bf0:	andeq	r7, r0, r1, ror #2
   13bf4:	push	{fp, lr}
   13bf8:	mov	fp, sp
   13bfc:	sub	sp, sp, #8
   13c00:	str	r0, [sp, #4]
   13c04:	ldr	r0, [sp, #4]
   13c08:	movw	r1, #0
   13c0c:	cmp	r0, r1
   13c10:	beq	13c2c <main@@Base+0x169c>
   13c14:	ldr	r0, [sp, #4]
   13c18:	mvn	r1, #3
   13c1c:	add	r0, r0, r1
   13c20:	bl	139f4 <main@@Base+0x1464>
   13c24:	str	r0, [sp]
   13c28:	b	13c38 <main@@Base+0x16a8>
   13c2c:	movw	r0, #0
   13c30:	str	r0, [sp]
   13c34:	b	13c38 <main@@Base+0x16a8>
   13c38:	ldr	r0, [sp]
   13c3c:	mov	sp, fp
   13c40:	pop	{fp, pc}
   13c44:	push	{fp, lr}
   13c48:	mov	fp, sp
   13c4c:	sub	sp, sp, #8
   13c50:	str	r0, [sp, #4]
   13c54:	ldr	r0, [sp, #4]
   13c58:	bl	13c64 <main@@Base+0x16d4>
   13c5c:	mov	sp, fp
   13c60:	pop	{fp, pc}
   13c64:	push	{fp, lr}
   13c68:	mov	fp, sp
   13c6c:	sub	sp, sp, #8
   13c70:	str	r0, [sp, #4]
   13c74:	ldr	r0, [sp, #4]
   13c78:	movw	r1, #0
   13c7c:	cmp	r0, r1
   13c80:	beq	13c9c <main@@Base+0x170c>
   13c84:	ldr	r0, [sp, #4]
   13c88:	mvn	r1, #3
   13c8c:	add	r0, r0, r1
   13c90:	bl	139f4 <main@@Base+0x1464>
   13c94:	str	r0, [sp]
   13c98:	b	13ca8 <main@@Base+0x1718>
   13c9c:	movw	r0, #0
   13ca0:	str	r0, [sp]
   13ca4:	b	13ca8 <main@@Base+0x1718>
   13ca8:	ldr	r0, [sp]
   13cac:	mov	sp, fp
   13cb0:	pop	{fp, pc}

00013cb4 <flatcc_builder_default_alloc@@Base>:
   13cb4:	push	{fp, lr}
   13cb8:	mov	fp, sp
   13cbc:	sub	sp, sp, #32
   13cc0:	ldr	ip, [fp, #8]
   13cc4:	str	r0, [fp, #-8]
   13cc8:	str	r1, [fp, #-12]
   13ccc:	str	r2, [sp, #16]
   13cd0:	str	r3, [sp, #12]
   13cd4:	ldr	r0, [sp, #16]
   13cd8:	cmp	r0, #0
   13cdc:	bne	13d20 <flatcc_builder_default_alloc@@Base+0x6c>
   13ce0:	ldr	r0, [fp, #-12]
   13ce4:	ldr	r0, [r0]
   13ce8:	movw	r1, #0
   13cec:	cmp	r0, r1
   13cf0:	beq	13d14 <flatcc_builder_default_alloc@@Base+0x60>
   13cf4:	ldr	r0, [fp, #-12]
   13cf8:	ldr	r0, [r0]
   13cfc:	bl	123d4 <free@plt>
   13d00:	ldr	r0, [fp, #-12]
   13d04:	movw	r1, #0
   13d08:	str	r1, [r0]
   13d0c:	ldr	r0, [fp, #-12]
   13d10:	str	r1, [r0, #4]
   13d14:	movw	r0, #0
   13d18:	str	r0, [fp, #-4]
   13d1c:	b	13e8c <flatcc_builder_default_alloc@@Base+0x1d8>
   13d20:	ldr	r0, [fp, #8]
   13d24:	sub	r0, r0, #1
   13d28:	cmp	r0, #6
   13d2c:	str	r0, [sp]
   13d30:	bhi	13d90 <flatcc_builder_default_alloc@@Base+0xdc>
   13d34:	add	r0, pc, #8
   13d38:	ldr	r1, [sp]
   13d3c:	ldr	r2, [r0, r1, lsl #2]
   13d40:	add	pc, r0, r2
   13d44:	andeq	r0, r0, ip, lsl r0
   13d48:	andeq	r0, r0, ip, asr #32
   13d4c:	andeq	r0, r0, ip, asr #32
   13d50:	andeq	r0, r0, r4, lsr r0
   13d54:	andeq	r0, r0, r8, lsr #32
   13d58:	andeq	r0, r0, ip, asr #32
   13d5c:	andeq	r0, r0, r0, asr #32
   13d60:	movw	r0, #256	; 0x100
   13d64:	str	r0, [sp, #4]
   13d68:	b	13d98 <flatcc_builder_default_alloc@@Base+0xe4>
   13d6c:	ldr	r0, [sp, #16]
   13d70:	str	r0, [sp, #4]
   13d74:	b	13d98 <flatcc_builder_default_alloc@@Base+0xe4>
   13d78:	movw	r0, #288	; 0x120
   13d7c:	str	r0, [sp, #4]
   13d80:	b	13d98 <flatcc_builder_default_alloc@@Base+0xe4>
   13d84:	movw	r0, #64	; 0x40
   13d88:	str	r0, [sp, #4]
   13d8c:	b	13d98 <flatcc_builder_default_alloc@@Base+0xe4>
   13d90:	movw	r0, #32
   13d94:	str	r0, [sp, #4]
   13d98:	b	13d9c <flatcc_builder_default_alloc@@Base+0xe8>
   13d9c:	ldr	r0, [sp, #4]
   13da0:	ldr	r1, [sp, #16]
   13da4:	cmp	r0, r1
   13da8:	bcs	13dbc <flatcc_builder_default_alloc@@Base+0x108>
   13dac:	ldr	r0, [sp, #4]
   13db0:	lsl	r0, r0, #1
   13db4:	str	r0, [sp, #4]
   13db8:	b	13d9c <flatcc_builder_default_alloc@@Base+0xe8>
   13dbc:	ldr	r0, [sp, #16]
   13dc0:	ldr	r1, [fp, #-12]
   13dc4:	ldr	r1, [r1, #4]
   13dc8:	cmp	r0, r1
   13dcc:	bhi	13df4 <flatcc_builder_default_alloc@@Base+0x140>
   13dd0:	ldr	r0, [fp, #-12]
   13dd4:	ldr	r0, [r0, #4]
   13dd8:	lsr	r0, r0, #1
   13ddc:	ldr	r1, [sp, #4]
   13de0:	cmp	r0, r1
   13de4:	bcc	13df4 <flatcc_builder_default_alloc@@Base+0x140>
   13de8:	movw	r0, #0
   13dec:	str	r0, [fp, #-4]
   13df0:	b	13e8c <flatcc_builder_default_alloc@@Base+0x1d8>
   13df4:	ldr	r0, [fp, #-12]
   13df8:	ldr	r0, [r0]
   13dfc:	ldr	r1, [sp, #4]
   13e00:	bl	123f8 <realloc@plt>
   13e04:	str	r0, [sp, #8]
   13e08:	movw	r1, #0
   13e0c:	cmp	r0, r1
   13e10:	bne	13e20 <flatcc_builder_default_alloc@@Base+0x16c>
   13e14:	mvn	r0, #0
   13e18:	str	r0, [fp, #-4]
   13e1c:	b	13e8c <flatcc_builder_default_alloc@@Base+0x1d8>
   13e20:	ldr	r0, [sp, #12]
   13e24:	cmp	r0, #0
   13e28:	beq	13e6c <flatcc_builder_default_alloc@@Base+0x1b8>
   13e2c:	ldr	r0, [fp, #-12]
   13e30:	ldr	r0, [r0, #4]
   13e34:	ldr	r1, [sp, #4]
   13e38:	cmp	r0, r1
   13e3c:	bcs	13e6c <flatcc_builder_default_alloc@@Base+0x1b8>
   13e40:	ldr	r0, [sp, #8]
   13e44:	ldr	r1, [fp, #-12]
   13e48:	ldr	r1, [r1, #4]
   13e4c:	add	r0, r0, r1
   13e50:	ldr	r1, [sp, #4]
   13e54:	ldr	r2, [fp, #-12]
   13e58:	ldr	r2, [r2, #4]
   13e5c:	sub	r2, r1, r2
   13e60:	movw	r1, #0
   13e64:	and	r1, r1, #255	; 0xff
   13e68:	bl	12458 <memset@plt>
   13e6c:	ldr	r0, [sp, #8]
   13e70:	ldr	r1, [fp, #-12]
   13e74:	str	r0, [r1]
   13e78:	ldr	r0, [sp, #4]
   13e7c:	ldr	r1, [fp, #-12]
   13e80:	str	r0, [r1, #4]
   13e84:	movw	r0, #0
   13e88:	str	r0, [fp, #-4]
   13e8c:	ldr	r0, [fp, #-4]
   13e90:	mov	sp, fp
   13e94:	pop	{fp, pc}

00013e98 <flatcc_builder_flush_vtable_cache@@Base>:
   13e98:	push	{fp, lr}
   13e9c:	mov	fp, sp
   13ea0:	sub	sp, sp, #8
   13ea4:	str	r0, [sp, #4]
   13ea8:	ldr	r0, [sp, #4]
   13eac:	add	r0, r0, #52	; 0x34
   13eb0:	add	r0, r0, #40	; 0x28
   13eb4:	str	r0, [sp]
   13eb8:	ldr	r0, [sp, #4]
   13ebc:	ldr	r0, [r0, #116]	; 0x74
   13ec0:	cmp	r0, #0
   13ec4:	bne	13ecc <flatcc_builder_flush_vtable_cache@@Base+0x34>
   13ec8:	b	13f00 <flatcc_builder_flush_vtable_cache@@Base+0x68>
   13ecc:	ldr	r0, [sp]
   13ed0:	ldr	r0, [r0]
   13ed4:	ldr	r1, [sp]
   13ed8:	ldr	r2, [r1, #4]
   13edc:	movw	r1, #0
   13ee0:	and	r1, r1, #255	; 0xff
   13ee4:	bl	12458 <memset@plt>
   13ee8:	ldr	r0, [sp, #4]
   13eec:	movw	r1, #16
   13ef0:	str	r1, [r0, #124]	; 0x7c
   13ef4:	ldr	r0, [sp, #4]
   13ef8:	movw	r1, #0
   13efc:	str	r1, [r0, #120]	; 0x78
   13f00:	mov	sp, fp
   13f04:	pop	{fp, pc}

00013f08 <flatcc_builder_custom_init@@Base>:
   13f08:	push	{fp, lr}
   13f0c:	mov	fp, sp
   13f10:	sub	sp, sp, #24
   13f14:	ldr	ip, [fp, #8]
   13f18:	str	r0, [fp, #-4]
   13f1c:	str	r1, [fp, #-8]
   13f20:	str	r2, [sp, #12]
   13f24:	str	r3, [sp, #8]
   13f28:	ldr	r0, [fp, #-4]
   13f2c:	movw	r1, #0
   13f30:	and	r1, r1, #255	; 0xff
   13f34:	movw	r2, #232	; 0xe8
   13f38:	str	ip, [sp, #4]
   13f3c:	bl	12458 <memset@plt>
   13f40:	ldr	r0, [fp, #-8]
   13f44:	movw	r1, #0
   13f48:	cmp	r0, r1
   13f4c:	bne	13f74 <flatcc_builder_custom_init@@Base+0x6c>
   13f50:	ldr	r0, [pc, #116]	; 13fcc <flatcc_builder_custom_init@@Base+0xc4>
   13f54:	ldr	r0, [pc, r0]
   13f58:	ldr	r1, [fp, #-4]
   13f5c:	movw	r2, #1
   13f60:	str	r2, [r1, #184]	; 0xb8
   13f64:	str	r0, [fp, #-8]
   13f68:	ldr	r0, [fp, #-4]
   13f6c:	add	r0, r0, #188	; 0xbc
   13f70:	str	r0, [sp, #12]
   13f74:	ldr	r0, [sp, #8]
   13f78:	movw	r1, #0
   13f7c:	cmp	r0, r1
   13f80:	bne	13f90 <flatcc_builder_custom_init@@Base+0x88>
   13f84:	ldr	r0, [pc, #68]	; 13fd0 <flatcc_builder_custom_init@@Base+0xc8>
   13f88:	ldr	r0, [pc, r0]
   13f8c:	str	r0, [sp, #8]
   13f90:	ldr	r0, [fp, #8]
   13f94:	ldr	r1, [fp, #-4]
   13f98:	str	r0, [r1, #40]	; 0x28
   13f9c:	ldr	r0, [sp, #8]
   13fa0:	ldr	r1, [fp, #-4]
   13fa4:	str	r0, [r1, #48]	; 0x30
   13fa8:	ldr	r0, [sp, #12]
   13fac:	ldr	r1, [fp, #-4]
   13fb0:	str	r0, [r1, #36]	; 0x24
   13fb4:	ldr	r0, [fp, #-8]
   13fb8:	ldr	r1, [fp, #-4]
   13fbc:	str	r0, [r1, #44]	; 0x2c
   13fc0:	movw	r0, #0
   13fc4:	mov	sp, fp
   13fc8:	pop	{fp, pc}
   13fcc:	andeq	r9, r1, ip, lsl #2
   13fd0:	ldrdeq	r9, [r1], -r4

00013fd4 <flatcc_builder_init@@Base>:
   13fd4:	push	{fp, lr}
   13fd8:	mov	fp, sp
   13fdc:	sub	sp, sp, #16
   13fe0:	str	r0, [fp, #-4]
   13fe4:	ldr	r0, [fp, #-4]
   13fe8:	movw	r1, #0
   13fec:	str	r1, [sp, #8]
   13ff0:	ldr	r2, [sp, #8]
   13ff4:	ldr	r3, [sp, #8]
   13ff8:	ldr	ip, [sp, #8]
   13ffc:	str	ip, [sp]
   14000:	bl	13f08 <flatcc_builder_custom_init@@Base>
   14004:	mov	sp, fp
   14008:	pop	{fp, pc}

0001400c <flatcc_builder_custom_reset@@Base>:
   1400c:	push	{r4, sl, fp, lr}
   14010:	add	fp, sp, #8
   14014:	sub	sp, sp, #40	; 0x28
   14018:	str	r0, [fp, #-16]
   1401c:	str	r1, [fp, #-20]	; 0xffffffec
   14020:	str	r2, [sp, #24]
   14024:	movw	r0, #0
   14028:	str	r0, [sp, #16]
   1402c:	ldr	r0, [sp, #16]
   14030:	cmp	r0, #8
   14034:	bge	14140 <flatcc_builder_custom_reset@@Base+0x134>
   14038:	ldr	r0, [fp, #-16]
   1403c:	add	r0, r0, #52	; 0x34
   14040:	ldr	r1, [sp, #16]
   14044:	add	r0, r0, r1, lsl #3
   14048:	str	r0, [sp, #20]
   1404c:	ldr	r0, [sp, #20]
   14050:	ldr	r0, [r0]
   14054:	movw	r1, #0
   14058:	cmp	r0, r1
   1405c:	beq	140f4 <flatcc_builder_custom_reset@@Base+0xe8>
   14060:	ldr	r0, [sp, #16]
   14064:	cmp	r0, #5
   14068:	beq	140d4 <flatcc_builder_custom_reset@@Base+0xc8>
   1406c:	ldr	r0, [sp, #24]
   14070:	cmp	r0, #0
   14074:	beq	140d4 <flatcc_builder_custom_reset@@Base+0xc8>
   14078:	ldr	r0, [fp, #-16]
   1407c:	ldr	r0, [r0, #48]	; 0x30
   14080:	ldr	r1, [fp, #-16]
   14084:	ldr	r1, [r1, #40]	; 0x28
   14088:	ldr	r2, [sp, #20]
   1408c:	ldr	r3, [sp, #16]
   14090:	str	r0, [sp, #12]
   14094:	mov	r0, r1
   14098:	mov	r1, r2
   1409c:	movw	r2, #1
   140a0:	str	r2, [sp, #8]
   140a4:	ldr	ip, [sp, #8]
   140a8:	str	r3, [sp, #4]
   140ac:	mov	r3, ip
   140b0:	ldr	lr, [sp, #4]
   140b4:	str	lr, [sp]
   140b8:	ldr	r4, [sp, #12]
   140bc:	blx	r4
   140c0:	cmp	r0, #0
   140c4:	beq	140d4 <flatcc_builder_custom_reset@@Base+0xc8>
   140c8:	mvn	r0, #0
   140cc:	str	r0, [fp, #-12]
   140d0:	b	1423c <flatcc_builder_custom_reset@@Base+0x230>
   140d4:	ldr	r0, [sp, #20]
   140d8:	ldr	r0, [r0]
   140dc:	ldr	r1, [sp, #20]
   140e0:	ldr	r2, [r1, #4]
   140e4:	movw	r1, #0
   140e8:	and	r1, r1, #255	; 0xff
   140ec:	bl	12458 <memset@plt>
   140f0:	b	1412c <flatcc_builder_custom_reset@@Base+0x120>
   140f4:	ldr	r0, [sp, #20]
   140f8:	ldr	r0, [r0, #4]
   140fc:	cmp	r0, #0
   14100:	bne	14108 <flatcc_builder_custom_reset@@Base+0xfc>
   14104:	b	14128 <flatcc_builder_custom_reset@@Base+0x11c>
   14108:	ldr	r0, [pc, #312]	; 14248 <flatcc_builder_custom_reset@@Base+0x23c>
   1410c:	add	r0, pc, r0
   14110:	ldr	r1, [pc, #308]	; 1424c <flatcc_builder_custom_reset@@Base+0x240>
   14114:	add	r1, pc, r1
   14118:	ldr	r2, [pc, #304]	; 14250 <flatcc_builder_custom_reset@@Base+0x244>
   1411c:	add	r3, pc, r2
   14120:	movw	r2, #434	; 0x1b2
   14124:	bl	12494 <__assert_fail@plt>
   14128:	b	1412c <flatcc_builder_custom_reset@@Base+0x120>
   1412c:	b	14130 <flatcc_builder_custom_reset@@Base+0x124>
   14130:	ldr	r0, [sp, #16]
   14134:	add	r0, r0, #1
   14138:	str	r0, [sp, #16]
   1413c:	b	1402c <flatcc_builder_custom_reset@@Base+0x20>
   14140:	ldr	r0, [fp, #-16]
   14144:	movw	r1, #0
   14148:	str	r1, [r0, #120]	; 0x78
   1414c:	ldr	r0, [fp, #-16]
   14150:	ldr	r0, [r0, #124]	; 0x7c
   14154:	cmp	r0, #0
   14158:	bls	14168 <flatcc_builder_custom_reset@@Base+0x15c>
   1415c:	ldr	r0, [fp, #-16]
   14160:	movw	r1, #16
   14164:	str	r1, [r0, #124]	; 0x7c
   14168:	ldr	r0, [fp, #-16]
   1416c:	movw	r1, #0
   14170:	strh	r1, [r0, #128]	; 0x80
   14174:	ldr	r0, [fp, #-16]
   14178:	movw	r1, #0
   1417c:	str	r1, [r0, #136]	; 0x88
   14180:	ldr	r0, [fp, #-16]
   14184:	str	r1, [r0, #140]	; 0x8c
   14188:	ldr	r0, [fp, #-16]
   1418c:	str	r1, [r0, #156]	; 0x9c
   14190:	ldr	r0, [fp, #-16]
   14194:	str	r1, [r0, #160]	; 0xa0
   14198:	ldr	r0, [fp, #-16]
   1419c:	str	r1, [r0, #20]
   141a0:	ldr	r0, [fp, #-16]
   141a4:	str	r1, [r0, #24]
   141a8:	ldr	r0, [fp, #-16]
   141ac:	str	r1, [r0, #148]	; 0x94
   141b0:	ldr	r0, [fp, #-16]
   141b4:	str	r1, [r0, #152]	; 0x98
   141b8:	ldr	r0, [fp, #-16]
   141bc:	ldr	r0, [r0, #60]	; 0x3c
   141c0:	ldr	r2, [fp, #-16]
   141c4:	str	r0, [r2, #16]
   141c8:	ldr	r0, [fp, #-16]
   141cc:	ldr	r0, [r0, #76]	; 0x4c
   141d0:	ldr	r2, [fp, #-16]
   141d4:	str	r0, [r2]
   141d8:	ldr	r0, [fp, #-16]
   141dc:	ldr	r0, [r0, #52]	; 0x34
   141e0:	ldr	r2, [fp, #-16]
   141e4:	str	r0, [r2, #4]
   141e8:	ldr	r0, [fp, #-16]
   141ec:	str	r1, [r0, #32]
   141f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   141f4:	cmp	r0, #0
   141f8:	beq	14218 <flatcc_builder_custom_reset@@Base+0x20c>
   141fc:	ldr	r0, [fp, #-16]
   14200:	movw	r1, #0
   14204:	str	r1, [r0, #172]	; 0xac
   14208:	ldr	r0, [fp, #-16]
   1420c:	str	r1, [r0, #176]	; 0xb0
   14210:	ldr	r0, [fp, #-16]
   14214:	str	r1, [r0, #180]	; 0xb4
   14218:	ldr	r0, [fp, #-16]
   1421c:	ldr	r0, [r0, #184]	; 0xb8
   14220:	cmp	r0, #0
   14224:	beq	14234 <flatcc_builder_custom_reset@@Base+0x228>
   14228:	ldr	r0, [fp, #-16]
   1422c:	add	r0, r0, #188	; 0xbc
   14230:	bl	19bbc <flatcc_emitter_reset@@Base>
   14234:	movw	r0, #0
   14238:	str	r0, [fp, #-12]
   1423c:	ldr	r0, [fp, #-12]
   14240:	sub	sp, fp, #8
   14244:	pop	{r4, sl, fp, pc}
   14248:	muleq	r0, r6, pc	; <UNPREDICTABLE>
   1424c:	andeq	r6, r0, r0, lsr #31
   14250:	strdeq	r6, [r0], -r5

00014254 <flatcc_builder_reset@@Base>:
   14254:	push	{fp, lr}
   14258:	mov	fp, sp
   1425c:	sub	sp, sp, #8
   14260:	str	r0, [sp, #4]
   14264:	ldr	r0, [sp, #4]
   14268:	movw	r1, #0
   1426c:	str	r1, [sp]
   14270:	ldr	r2, [sp]
   14274:	bl	1400c <flatcc_builder_custom_reset@@Base>
   14278:	mov	sp, fp
   1427c:	pop	{fp, pc}

00014280 <flatcc_builder_clear@@Base>:
   14280:	push	{r4, sl, fp, lr}
   14284:	add	fp, sp, #8
   14288:	sub	sp, sp, #32
   1428c:	str	r0, [fp, #-12]
   14290:	movw	r0, #0
   14294:	str	r0, [sp, #20]
   14298:	ldr	r0, [sp, #20]
   1429c:	cmp	r0, #8
   142a0:	bge	14310 <flatcc_builder_clear@@Base+0x90>
   142a4:	ldr	r0, [fp, #-12]
   142a8:	add	r0, r0, #52	; 0x34
   142ac:	ldr	r1, [sp, #20]
   142b0:	add	r0, r0, r1, lsl #3
   142b4:	str	r0, [fp, #-16]
   142b8:	ldr	r0, [fp, #-12]
   142bc:	ldr	r0, [r0, #48]	; 0x30
   142c0:	ldr	r1, [fp, #-12]
   142c4:	ldr	r1, [r1, #40]	; 0x28
   142c8:	ldr	r2, [fp, #-16]
   142cc:	ldr	r3, [sp, #20]
   142d0:	str	r0, [sp, #16]
   142d4:	mov	r0, r1
   142d8:	mov	r1, r2
   142dc:	movw	r2, #0
   142e0:	str	r2, [sp, #12]
   142e4:	ldr	ip, [sp, #12]
   142e8:	str	r3, [sp, #8]
   142ec:	mov	r3, ip
   142f0:	ldr	lr, [sp, #8]
   142f4:	str	lr, [sp]
   142f8:	ldr	r4, [sp, #16]
   142fc:	blx	r4
   14300:	ldr	r0, [sp, #20]
   14304:	add	r0, r0, #1
   14308:	str	r0, [sp, #20]
   1430c:	b	14298 <flatcc_builder_clear@@Base+0x18>
   14310:	ldr	r0, [fp, #-12]
   14314:	ldr	r0, [r0, #184]	; 0xb8
   14318:	cmp	r0, #0
   1431c:	beq	1432c <flatcc_builder_clear@@Base+0xac>
   14320:	ldr	r0, [fp, #-12]
   14324:	add	r0, r0, #188	; 0xbc
   14328:	bl	19d54 <flatcc_emitter_clear@@Base>
   1432c:	ldr	r0, [fp, #-12]
   14330:	movw	r1, #0
   14334:	and	r1, r1, #255	; 0xff
   14338:	movw	r2, #232	; 0xe8
   1433c:	bl	12458 <memset@plt>
   14340:	sub	sp, fp, #8
   14344:	pop	{r4, sl, fp, pc}

00014348 <flatcc_builder_enter_user_frame_ptr@@Base>:
   14348:	push	{fp, lr}
   1434c:	mov	fp, sp
   14350:	sub	sp, sp, #24
   14354:	str	r0, [fp, #-8]
   14358:	str	r1, [sp, #12]
   1435c:	ldr	r0, [sp, #12]
   14360:	add	r0, r0, #4
   14364:	sub	r0, r0, #1
   14368:	mvn	r1, #3
   1436c:	and	r0, r0, r1
   14370:	add	r0, r0, #4
   14374:	str	r0, [sp, #12]
   14378:	ldr	r0, [fp, #-8]
   1437c:	ldr	r1, [fp, #-8]
   14380:	ldr	r2, [r1, #228]	; 0xe4
   14384:	ldr	r3, [sp, #12]
   14388:	movw	r1, #7
   1438c:	movw	ip, #0
   14390:	str	ip, [sp]
   14394:	bl	1441c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   14398:	str	r0, [sp, #8]
   1439c:	movw	r1, #0
   143a0:	cmp	r0, r1
   143a4:	bne	143b4 <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   143a8:	movw	r0, #0
   143ac:	str	r0, [fp, #-4]
   143b0:	b	14410 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   143b4:	ldr	r0, [sp, #8]
   143b8:	ldr	r2, [sp, #12]
   143bc:	movw	r1, #0
   143c0:	and	r1, r1, #255	; 0xff
   143c4:	bl	12458 <memset@plt>
   143c8:	ldr	r0, [fp, #-8]
   143cc:	ldr	r0, [r0, #224]	; 0xe0
   143d0:	ldr	r1, [sp, #8]
   143d4:	add	r2, r1, #4
   143d8:	str	r2, [sp, #8]
   143dc:	str	r0, [r1]
   143e0:	ldr	r0, [fp, #-8]
   143e4:	ldr	r0, [r0, #228]	; 0xe4
   143e8:	add	r0, r0, #4
   143ec:	ldr	r1, [fp, #-8]
   143f0:	str	r0, [r1, #224]	; 0xe0
   143f4:	ldr	r0, [sp, #12]
   143f8:	ldr	r1, [fp, #-8]
   143fc:	ldr	r2, [r1, #228]	; 0xe4
   14400:	add	r0, r2, r0
   14404:	str	r0, [r1, #228]	; 0xe4
   14408:	ldr	r0, [sp, #8]
   1440c:	str	r0, [fp, #-4]
   14410:	ldr	r0, [fp, #-4]
   14414:	mov	sp, fp
   14418:	pop	{fp, pc}
   1441c:	push	{fp, lr}
   14420:	mov	fp, sp
   14424:	sub	sp, sp, #32
   14428:	ldr	ip, [fp, #8]
   1442c:	str	r0, [fp, #-4]
   14430:	str	r1, [fp, #-8]
   14434:	str	r2, [fp, #-12]
   14438:	str	r3, [sp, #16]
   1443c:	ldr	r0, [fp, #-4]
   14440:	add	r0, r0, #52	; 0x34
   14444:	ldr	r1, [fp, #-8]
   14448:	add	r0, r0, r1, lsl #3
   1444c:	str	r0, [sp, #12]
   14450:	ldr	r0, [fp, #-12]
   14454:	ldr	r1, [sp, #16]
   14458:	add	r0, r0, r1
   1445c:	ldr	r1, [sp, #12]
   14460:	ldr	r1, [r1, #4]
   14464:	cmp	r0, r1
   14468:	bls	144e0 <flatcc_builder_enter_user_frame_ptr@@Base+0x198>
   1446c:	ldr	r0, [fp, #-4]
   14470:	ldr	r0, [r0, #48]	; 0x30
   14474:	ldr	r1, [fp, #-4]
   14478:	ldr	r1, [r1, #40]	; 0x28
   1447c:	ldr	r2, [sp, #12]
   14480:	ldr	r3, [fp, #-12]
   14484:	ldr	ip, [sp, #16]
   14488:	add	r3, r3, ip
   1448c:	ldr	ip, [fp, #8]
   14490:	ldr	lr, [fp, #-8]
   14494:	str	r0, [sp, #8]
   14498:	mov	r0, r1
   1449c:	mov	r1, r2
   144a0:	mov	r2, r3
   144a4:	mov	r3, ip
   144a8:	str	lr, [sp]
   144ac:	ldr	ip, [sp, #8]
   144b0:	blx	ip
   144b4:	cmp	r0, #0
   144b8:	beq	144dc <flatcc_builder_enter_user_frame_ptr@@Base+0x194>
   144bc:	ldr	r0, [pc, #52]	; 144f8 <flatcc_builder_enter_user_frame_ptr@@Base+0x1b0>
   144c0:	add	r0, pc, r0
   144c4:	ldr	r1, [pc, #48]	; 144fc <flatcc_builder_enter_user_frame_ptr@@Base+0x1b4>
   144c8:	add	r1, pc, r1
   144cc:	ldr	r2, [pc, #44]	; 14500 <flatcc_builder_enter_user_frame_ptr@@Base+0x1b8>
   144d0:	add	r3, pc, r2
   144d4:	movw	r2, #308	; 0x134
   144d8:	bl	12494 <__assert_fail@plt>
   144dc:	b	144e0 <flatcc_builder_enter_user_frame_ptr@@Base+0x198>
   144e0:	ldr	r0, [sp, #12]
   144e4:	ldr	r0, [r0]
   144e8:	ldr	r1, [fp, #-12]
   144ec:	add	r0, r0, r1
   144f0:	mov	sp, fp
   144f4:	pop	{fp, pc}
   144f8:			; <UNDEFINED> instruction: 0x00007db1
   144fc:	andeq	r6, r0, ip, ror #23
   14500:	ldrdeq	r7, [r0], -fp

00014504 <flatcc_builder_enter_user_frame@@Base>:
   14504:	push	{fp, lr}
   14508:	mov	fp, sp
   1450c:	sub	sp, sp, #24
   14510:	str	r0, [fp, #-8]
   14514:	str	r1, [sp, #12]
   14518:	ldr	r0, [sp, #12]
   1451c:	add	r0, r0, #4
   14520:	sub	r0, r0, #1
   14524:	mvn	r1, #3
   14528:	and	r0, r0, r1
   1452c:	add	r0, r0, #4
   14530:	str	r0, [sp, #12]
   14534:	ldr	r0, [fp, #-8]
   14538:	ldr	r1, [fp, #-8]
   1453c:	ldr	r2, [r1, #228]	; 0xe4
   14540:	ldr	r3, [sp, #12]
   14544:	movw	r1, #7
   14548:	movw	ip, #0
   1454c:	str	ip, [sp]
   14550:	bl	1441c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   14554:	str	r0, [sp, #8]
   14558:	movw	r1, #0
   1455c:	cmp	r0, r1
   14560:	bne	14570 <flatcc_builder_enter_user_frame@@Base+0x6c>
   14564:	movw	r0, #0
   14568:	str	r0, [fp, #-4]
   1456c:	b	145d0 <flatcc_builder_enter_user_frame@@Base+0xcc>
   14570:	ldr	r0, [sp, #8]
   14574:	ldr	r2, [sp, #12]
   14578:	movw	r1, #0
   1457c:	and	r1, r1, #255	; 0xff
   14580:	bl	12458 <memset@plt>
   14584:	ldr	r0, [fp, #-8]
   14588:	ldr	r0, [r0, #224]	; 0xe0
   1458c:	ldr	r1, [sp, #8]
   14590:	add	r2, r1, #4
   14594:	str	r2, [sp, #8]
   14598:	str	r0, [r1]
   1459c:	ldr	r0, [fp, #-8]
   145a0:	ldr	r0, [r0, #228]	; 0xe4
   145a4:	add	r0, r0, #4
   145a8:	ldr	r1, [fp, #-8]
   145ac:	str	r0, [r1, #224]	; 0xe0
   145b0:	ldr	r0, [sp, #12]
   145b4:	ldr	r1, [fp, #-8]
   145b8:	ldr	r2, [r1, #228]	; 0xe4
   145bc:	add	r0, r2, r0
   145c0:	str	r0, [r1, #228]	; 0xe4
   145c4:	ldr	r0, [fp, #-8]
   145c8:	ldr	r0, [r0, #224]	; 0xe0
   145cc:	str	r0, [fp, #-4]
   145d0:	ldr	r0, [fp, #-4]
   145d4:	mov	sp, fp
   145d8:	pop	{fp, pc}

000145dc <flatcc_builder_exit_user_frame@@Base>:
   145dc:	push	{fp, lr}
   145e0:	mov	fp, sp
   145e4:	sub	sp, sp, #8
   145e8:	str	r0, [sp, #4]
   145ec:	ldr	r0, [sp, #4]
   145f0:	ldr	r0, [r0, #224]	; 0xe0
   145f4:	cmp	r0, #0
   145f8:	bls	14600 <flatcc_builder_exit_user_frame@@Base+0x24>
   145fc:	b	14620 <flatcc_builder_exit_user_frame@@Base+0x44>
   14600:	ldr	r0, [pc, #100]	; 1466c <flatcc_builder_exit_user_frame@@Base+0x90>
   14604:	add	r0, pc, r0
   14608:	ldr	r1, [pc, #96]	; 14670 <flatcc_builder_exit_user_frame@@Base+0x94>
   1460c:	add	r1, pc, r1
   14610:	ldr	r2, [pc, #92]	; 14674 <flatcc_builder_exit_user_frame@@Base+0x98>
   14614:	add	r3, pc, r2
   14618:	movw	r2, #542	; 0x21e
   1461c:	bl	12494 <__assert_fail@plt>
   14620:	ldr	r0, [sp, #4]
   14624:	ldr	r0, [r0, #108]	; 0x6c
   14628:	ldr	r1, [sp, #4]
   1462c:	ldr	r1, [r1, #224]	; 0xe0
   14630:	add	r0, r0, r1
   14634:	str	r0, [sp]
   14638:	ldr	r0, [sp, #4]
   1463c:	ldr	r0, [r0, #224]	; 0xe0
   14640:	sub	r0, r0, #4
   14644:	ldr	r1, [sp, #4]
   14648:	str	r0, [r1, #228]	; 0xe4
   1464c:	ldr	r0, [sp]
   14650:	mvn	r1, #3
   14654:	add	r0, r0, r1
   14658:	ldr	r0, [r0]
   1465c:	ldr	r1, [sp, #4]
   14660:	str	r0, [r1, #224]	; 0xe0
   14664:	mov	sp, fp
   14668:	pop	{fp, pc}
   1466c:	andeq	r6, r0, fp, asr #22
   14670:	andeq	r6, r0, r8, lsr #21
   14674:	andeq	r6, r0, r4, asr fp

00014678 <flatcc_builder_exit_user_frame_at@@Base>:
   14678:	push	{fp, lr}
   1467c:	mov	fp, sp
   14680:	sub	sp, sp, #8
   14684:	str	r0, [sp, #4]
   14688:	str	r1, [sp]
   1468c:	ldr	r0, [sp, #4]
   14690:	ldr	r0, [r0, #224]	; 0xe0
   14694:	ldr	r1, [sp]
   14698:	cmp	r0, r1
   1469c:	bcc	146a4 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   146a0:	b	146c4 <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   146a4:	ldr	r0, [pc, #52]	; 146e0 <flatcc_builder_exit_user_frame_at@@Base+0x68>
   146a8:	add	r0, pc, r0
   146ac:	ldr	r1, [pc, #48]	; 146e4 <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   146b0:	add	r1, pc, r1
   146b4:	ldr	r2, [pc, #44]	; 146e8 <flatcc_builder_exit_user_frame_at@@Base+0x70>
   146b8:	add	r3, pc, r2
   146bc:	movw	r2, #551	; 0x227
   146c0:	bl	12494 <__assert_fail@plt>
   146c4:	ldr	r0, [sp]
   146c8:	ldr	r1, [sp, #4]
   146cc:	str	r0, [r1, #224]	; 0xe0
   146d0:	ldr	r0, [sp, #4]
   146d4:	bl	145dc <flatcc_builder_exit_user_frame@@Base>
   146d8:	mov	sp, fp
   146dc:	pop	{fp, pc}
   146e0:	strdeq	r6, [r0], -sl
   146e4:	andeq	r6, r0, r4, lsl #20
   146e8:	andeq	r6, r0, r9, lsl #22

000146ec <flatcc_builder_get_current_user_frame@@Base>:
   146ec:	sub	sp, sp, #4
   146f0:	str	r0, [sp]
   146f4:	ldr	r0, [sp]
   146f8:	ldr	r0, [r0, #224]	; 0xe0
   146fc:	add	sp, sp, #4
   14700:	bx	lr

00014704 <flatcc_builder_get_user_frame_ptr@@Base>:
   14704:	sub	sp, sp, #8
   14708:	str	r0, [sp, #4]
   1470c:	str	r1, [sp]
   14710:	ldr	r0, [sp, #4]
   14714:	ldr	r0, [r0, #108]	; 0x6c
   14718:	ldr	r1, [sp]
   1471c:	add	r0, r0, r1
   14720:	add	sp, sp, #8
   14724:	bx	lr

00014728 <flatcc_builder_embed_buffer@@Base>:
   14728:	push	{fp, lr}
   1472c:	mov	fp, sp
   14730:	sub	sp, sp, #120	; 0x78
   14734:	ldr	ip, [fp, #12]
   14738:	ldr	lr, [fp, #8]
   1473c:	str	r0, [fp, #-8]
   14740:	strh	r1, [fp, #-10]
   14744:	str	r2, [fp, #-16]
   14748:	str	r3, [fp, #-20]	; 0xffffffec
   1474c:	strh	lr, [fp, #-22]	; 0xffffffea
   14750:	ldr	r0, [fp, #12]
   14754:	and	r0, r0, #2
   14758:	str	r0, [sp, #12]
   1475c:	ldr	r0, [fp, #-8]
   14760:	ldrh	r1, [fp, #-10]
   14764:	ldr	r2, [fp, #-8]
   14768:	ldr	r2, [r2, #152]	; 0x98
   1476c:	cmp	r2, #0
   14770:	movw	r2, #0
   14774:	moveq	r2, #1
   14778:	mvn	r3, #0
   1477c:	eor	r2, r2, r3
   14780:	and	r3, r2, #1
   14784:	sub	r2, fp, #22
   14788:	str	r1, [sp, #8]
   1478c:	mov	r1, r2
   14790:	ldr	r2, [sp, #8]
   14794:	uxth	r2, r2
   14798:	str	ip, [sp, #4]
   1479c:	bl	14910 <flatcc_builder_embed_buffer@@Base+0x1e8>
   147a0:	cmp	r0, #0
   147a4:	beq	147b4 <flatcc_builder_embed_buffer@@Base+0x8c>
   147a8:	movw	r0, #0
   147ac:	str	r0, [fp, #-4]
   147b0:	b	14900 <flatcc_builder_embed_buffer@@Base+0x1d8>
   147b4:	ldr	r0, [fp, #-8]
   147b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   147bc:	ldr	r2, [sp, #12]
   147c0:	cmp	r2, #0
   147c4:	movw	r2, #0
   147c8:	movne	r2, #1
   147cc:	tst	r2, #1
   147d0:	movw	r2, #4
   147d4:	moveq	r2, #0
   147d8:	add	r1, r1, r2
   147dc:	ldrh	r2, [fp, #-22]	; 0xffffffea
   147e0:	bl	14a7c <flatcc_builder_embed_buffer@@Base+0x354>
   147e4:	str	r0, [fp, #-32]	; 0xffffffe0
   147e8:	ldr	r0, [fp, #-20]	; 0xffffffec
   147ec:	ldr	r1, [fp, #-32]	; 0xffffffe0
   147f0:	add	r0, r0, r1
   147f4:	bl	14ab0 <flatcc_builder_embed_buffer@@Base+0x388>
   147f8:	str	r0, [fp, #-28]	; 0xffffffe4
   147fc:	movw	r0, #0
   14800:	str	r0, [sp, #16]
   14804:	str	r0, [sp, #20]
   14808:	ldr	r0, [fp, #-8]
   1480c:	ldr	r0, [r0, #152]	; 0x98
   14810:	cmp	r0, #0
   14814:	beq	14854 <flatcc_builder_embed_buffer@@Base+0x12c>
   14818:	ldr	r0, [sp, #16]
   1481c:	add	r0, r0, #4
   14820:	str	r0, [sp, #16]
   14824:	add	r0, sp, #16
   14828:	add	r0, r0, #8
   1482c:	ldr	r1, [sp, #20]
   14830:	sub	r2, fp, #28
   14834:	str	r2, [r0, r1, lsl #3]
   14838:	ldr	r1, [sp, #20]
   1483c:	add	r0, r0, r1, lsl #3
   14840:	movw	r1, #4
   14844:	str	r1, [r0, #4]
   14848:	ldr	r0, [sp, #20]
   1484c:	add	r0, r0, #1
   14850:	str	r0, [sp, #20]
   14854:	ldr	r0, [fp, #-20]	; 0xffffffec
   14858:	cmp	r0, #0
   1485c:	bls	148a0 <flatcc_builder_embed_buffer@@Base+0x178>
   14860:	ldr	r0, [fp, #-20]	; 0xffffffec
   14864:	ldr	r1, [sp, #16]
   14868:	add	r0, r1, r0
   1486c:	str	r0, [sp, #16]
   14870:	ldr	r0, [fp, #-16]
   14874:	add	r1, sp, #16
   14878:	add	r1, r1, #8
   1487c:	ldr	r2, [sp, #20]
   14880:	str	r0, [r1, r2, lsl #3]
   14884:	ldr	r0, [fp, #-20]	; 0xffffffec
   14888:	ldr	r2, [sp, #20]
   1488c:	add	r1, r1, r2, lsl #3
   14890:	str	r0, [r1, #4]
   14894:	ldr	r0, [sp, #20]
   14898:	add	r0, r0, #1
   1489c:	str	r0, [sp, #20]
   148a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   148a4:	cmp	r0, #0
   148a8:	bls	148f0 <flatcc_builder_embed_buffer@@Base+0x1c8>
   148ac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   148b0:	ldr	r1, [sp, #16]
   148b4:	add	r0, r1, r0
   148b8:	str	r0, [sp, #16]
   148bc:	add	r0, sp, #16
   148c0:	add	r0, r0, #8
   148c4:	ldr	r1, [sp, #20]
   148c8:	ldr	r2, [pc, #60]	; 1490c <flatcc_builder_embed_buffer@@Base+0x1e4>
   148cc:	ldr	r2, [pc, r2]
   148d0:	str	r2, [r0, r1, lsl #3]
   148d4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   148d8:	ldr	r2, [sp, #20]
   148dc:	add	r0, r0, r2, lsl #3
   148e0:	str	r1, [r0, #4]
   148e4:	ldr	r0, [sp, #20]
   148e8:	add	r0, r0, #1
   148ec:	str	r0, [sp, #20]
   148f0:	ldr	r0, [fp, #-8]
   148f4:	add	r1, sp, #16
   148f8:	bl	14ac4 <flatcc_builder_embed_buffer@@Base+0x39c>
   148fc:	str	r0, [fp, #-4]
   14900:	ldr	r0, [fp, #-4]
   14904:	mov	sp, fp
   14908:	pop	{fp, pc}
   1490c:	andeq	r8, r1, r8, lsl #15
   14910:	push	{fp, lr}
   14914:	mov	fp, sp
   14918:	sub	sp, sp, #104	; 0x68
   1491c:	str	r0, [fp, #-4]
   14920:	str	r1, [fp, #-8]
   14924:	strh	r2, [fp, #-10]
   14928:	str	r3, [fp, #-16]
   1492c:	ldrh	r0, [fp, #-10]
   14930:	cmp	r0, #0
   14934:	beq	14944 <flatcc_builder_embed_buffer@@Base+0x21c>
   14938:	ldrh	r0, [fp, #-10]
   1493c:	str	r0, [sp, #8]
   14940:	b	14978 <flatcc_builder_embed_buffer@@Base+0x250>
   14944:	ldr	r0, [fp, #-4]
   14948:	ldrh	r0, [r0, #132]	; 0x84
   1494c:	cmp	r0, #0
   14950:	beq	14964 <flatcc_builder_embed_buffer@@Base+0x23c>
   14954:	ldr	r0, [fp, #-4]
   14958:	ldrh	r0, [r0, #132]	; 0x84
   1495c:	str	r0, [sp, #4]
   14960:	b	14970 <flatcc_builder_embed_buffer@@Base+0x248>
   14964:	movw	r0, #1
   14968:	str	r0, [sp, #4]
   1496c:	b	14970 <flatcc_builder_embed_buffer@@Base+0x248>
   14970:	ldr	r0, [sp, #4]
   14974:	str	r0, [sp, #8]
   14978:	ldr	r0, [sp, #8]
   1497c:	strh	r0, [fp, #-10]
   14980:	ldr	r0, [fp, #-8]
   14984:	movw	r1, #4
   14988:	uxth	r1, r1
   1498c:	bl	16470 <flatcc_builder_start_vector@@Base+0xac>
   14990:	ldr	r0, [fp, #-8]
   14994:	ldrh	r1, [fp, #-10]
   14998:	bl	16470 <flatcc_builder_start_vector@@Base+0xac>
   1499c:	ldr	r0, [fp, #-16]
   149a0:	cmp	r0, #0
   149a4:	bne	14a60 <flatcc_builder_embed_buffer@@Base+0x338>
   149a8:	ldr	r0, [fp, #-4]
   149ac:	ldrh	r1, [fp, #-10]
   149b0:	bl	198a4 <flatcc_builder_get_emit_context@@Base+0x18>
   149b4:	str	r0, [fp, #-20]	; 0xffffffec
   149b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   149bc:	cmp	r0, #0
   149c0:	beq	14a5c <flatcc_builder_embed_buffer@@Base+0x334>
   149c4:	movw	r0, #0
   149c8:	str	r0, [sp, #12]
   149cc:	str	r0, [sp, #16]
   149d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   149d4:	cmp	r0, #0
   149d8:	bls	14a20 <flatcc_builder_embed_buffer@@Base+0x2f8>
   149dc:	ldr	r0, [fp, #-20]	; 0xffffffec
   149e0:	ldr	r1, [sp, #12]
   149e4:	add	r0, r1, r0
   149e8:	str	r0, [sp, #12]
   149ec:	add	r0, sp, #12
   149f0:	add	r0, r0, #8
   149f4:	ldr	r1, [sp, #16]
   149f8:	ldr	r2, [pc, #120]	; 14a78 <flatcc_builder_embed_buffer@@Base+0x350>
   149fc:	ldr	r2, [pc, r2]
   14a00:	str	r2, [r0, r1, lsl #3]
   14a04:	ldr	r1, [fp, #-20]	; 0xffffffec
   14a08:	ldr	r2, [sp, #16]
   14a0c:	add	r0, r0, r2, lsl #3
   14a10:	str	r1, [r0, #4]
   14a14:	ldr	r0, [sp, #16]
   14a18:	add	r0, r0, #1
   14a1c:	str	r0, [sp, #16]
   14a20:	ldr	r0, [fp, #-4]
   14a24:	add	r1, sp, #12
   14a28:	bl	16a54 <flatcc_builder_create_vtable@@Base+0x104>
   14a2c:	movw	r1, #0
   14a30:	cmp	r1, r0
   14a34:	bne	14a58 <flatcc_builder_embed_buffer@@Base+0x330>
   14a38:	ldr	r0, [pc, #44]	; 14a6c <flatcc_builder_embed_buffer@@Base+0x344>
   14a3c:	add	r0, pc, r0
   14a40:	ldr	r1, [pc, #40]	; 14a70 <flatcc_builder_embed_buffer@@Base+0x348>
   14a44:	add	r1, pc, r1
   14a48:	ldr	r2, [pc, #36]	; 14a74 <flatcc_builder_embed_buffer@@Base+0x34c>
   14a4c:	add	r3, pc, r2
   14a50:	movw	r2, #702	; 0x2be
   14a54:	bl	12494 <__assert_fail@plt>
   14a58:	b	14a5c <flatcc_builder_embed_buffer@@Base+0x334>
   14a5c:	b	14a60 <flatcc_builder_embed_buffer@@Base+0x338>
   14a60:	movw	r0, #0
   14a64:	mov	sp, fp
   14a68:	pop	{fp, pc}
   14a6c:	andeq	r7, r0, r5, lsr r8
   14a70:	andeq	r6, r0, r0, ror r6
   14a74:	andeq	r7, r0, r2, lsr #13
   14a78:	andeq	r8, r1, r8, asr r6
   14a7c:	sub	sp, sp, #12
   14a80:	str	r0, [sp, #8]
   14a84:	str	r1, [sp, #4]
   14a88:	strh	r2, [sp, #2]
   14a8c:	ldr	r0, [sp, #8]
   14a90:	ldr	r0, [r0, #136]	; 0x88
   14a94:	ldr	r1, [sp, #4]
   14a98:	sub	r0, r0, r1
   14a9c:	ldrh	r1, [sp, #2]
   14aa0:	sub	r1, r1, #1
   14aa4:	and	r0, r0, r1
   14aa8:	add	sp, sp, #12
   14aac:	bx	lr
   14ab0:	sub	sp, sp, #4
   14ab4:	str	r0, [sp]
   14ab8:	ldr	r0, [sp]
   14abc:	add	sp, sp, #4
   14ac0:	bx	lr
   14ac4:	push	{fp, lr}
   14ac8:	mov	fp, sp
   14acc:	sub	sp, sp, #24
   14ad0:	str	r0, [fp, #-4]
   14ad4:	str	r1, [fp, #-8]
   14ad8:	ldr	r0, [fp, #-4]
   14adc:	ldr	r0, [r0, #136]	; 0x88
   14ae0:	ldr	r1, [fp, #-8]
   14ae4:	ldr	r1, [r1]
   14ae8:	sub	r0, r0, r1
   14aec:	str	r0, [sp, #12]
   14af0:	ldr	r0, [fp, #-8]
   14af4:	ldr	r0, [r0]
   14af8:	cmp	r0, #16
   14afc:	bls	14b14 <flatcc_builder_embed_buffer@@Base+0x3ec>
   14b00:	ldr	r0, [fp, #-8]
   14b04:	ldr	r0, [r0]
   14b08:	sub	r0, r0, #16
   14b0c:	cmn	r0, #1
   14b10:	bhi	14b28 <flatcc_builder_embed_buffer@@Base+0x400>
   14b14:	ldr	r0, [sp, #12]
   14b18:	ldr	r1, [fp, #-4]
   14b1c:	ldr	r1, [r1, #136]	; 0x88
   14b20:	cmp	r0, r1
   14b24:	blt	14b48 <flatcc_builder_embed_buffer@@Base+0x420>
   14b28:	ldr	r0, [pc, #172]	; 14bdc <flatcc_builder_embed_buffer@@Base+0x4b4>
   14b2c:	add	r0, pc, r0
   14b30:	ldr	r1, [pc, #168]	; 14be0 <flatcc_builder_embed_buffer@@Base+0x4b8>
   14b34:	add	r1, pc, r1
   14b38:	ldr	r2, [pc, #164]	; 14be4 <flatcc_builder_embed_buffer@@Base+0x4bc>
   14b3c:	add	r3, pc, r2
   14b40:	movw	r2, #647	; 0x287
   14b44:	bl	12494 <__assert_fail@plt>
   14b48:	ldr	r0, [fp, #-4]
   14b4c:	ldr	r0, [r0, #44]	; 0x2c
   14b50:	ldr	r1, [fp, #-4]
   14b54:	ldr	r1, [r1, #36]	; 0x24
   14b58:	ldr	r2, [fp, #-8]
   14b5c:	add	r2, r2, #8
   14b60:	ldr	r3, [fp, #-8]
   14b64:	ldr	r3, [r3, #4]
   14b68:	ldr	ip, [sp, #12]
   14b6c:	ldr	lr, [fp, #-8]
   14b70:	ldr	lr, [lr]
   14b74:	str	r0, [sp, #8]
   14b78:	mov	r0, r1
   14b7c:	mov	r1, r2
   14b80:	mov	r2, r3
   14b84:	mov	r3, ip
   14b88:	str	lr, [sp]
   14b8c:	ldr	ip, [sp, #8]
   14b90:	blx	ip
   14b94:	cmp	r0, #0
   14b98:	beq	14bbc <flatcc_builder_embed_buffer@@Base+0x494>
   14b9c:	ldr	r0, [pc, #44]	; 14bd0 <flatcc_builder_embed_buffer@@Base+0x4a8>
   14ba0:	add	r0, pc, r0
   14ba4:	ldr	r1, [pc, #40]	; 14bd4 <flatcc_builder_embed_buffer@@Base+0x4ac>
   14ba8:	add	r1, pc, r1
   14bac:	ldr	r2, [pc, #36]	; 14bd8 <flatcc_builder_embed_buffer@@Base+0x4b0>
   14bb0:	add	r3, pc, r2
   14bb4:	movw	r2, #651	; 0x28b
   14bb8:	bl	12494 <__assert_fail@plt>
   14bbc:	ldr	r0, [sp, #12]
   14bc0:	ldr	r1, [fp, #-4]
   14bc4:	str	r0, [r1, #136]	; 0x88
   14bc8:	mov	sp, fp
   14bcc:	pop	{fp, pc}
   14bd0:	ldrdeq	r7, [r0], -r1
   14bd4:	andeq	r6, r0, ip, lsl #10
   14bd8:	andeq	r7, r0, r0, lsl #11
   14bdc:	andeq	r7, r0, r5, asr #14
   14be0:	andeq	r6, r0, r0, lsl #11
   14be4:	strdeq	r7, [r0], -r4

00014be8 <flatcc_builder_create_buffer@@Base>:
   14be8:	push	{fp, lr}
   14bec:	mov	fp, sp
   14bf0:	sub	sp, sp, #152	; 0x98
   14bf4:	ldr	ip, [fp, #12]
   14bf8:	ldr	lr, [fp, #8]
   14bfc:	str	r0, [fp, #-8]
   14c00:	str	r1, [fp, #-12]
   14c04:	strh	r2, [fp, #-14]
   14c08:	str	r3, [fp, #-20]	; 0xffffffec
   14c0c:	strh	lr, [fp, #-22]	; 0xffffffea
   14c10:	movw	r0, #0
   14c14:	str	r0, [fp, #-36]	; 0xffffffdc
   14c18:	str	r0, [sp, #28]
   14c1c:	ldr	r0, [fp, #12]
   14c20:	and	r0, r0, #1
   14c24:	cmp	r0, #0
   14c28:	movw	r0, #0
   14c2c:	movne	r0, #1
   14c30:	and	r0, r0, #1
   14c34:	str	r0, [sp, #24]
   14c38:	ldr	r0, [fp, #12]
   14c3c:	and	r0, r0, #2
   14c40:	cmp	r0, #0
   14c44:	movw	r0, #0
   14c48:	movne	r0, #1
   14c4c:	and	r0, r0, #1
   14c50:	str	r0, [sp, #20]
   14c54:	ldr	r0, [fp, #-8]
   14c58:	ldrh	r1, [fp, #-14]
   14c5c:	ldr	r3, [sp, #24]
   14c60:	sub	r2, fp, #22
   14c64:	str	r1, [sp, #16]
   14c68:	mov	r1, r2
   14c6c:	ldr	r2, [sp, #16]
   14c70:	uxth	r2, r2
   14c74:	str	ip, [sp, #12]
   14c78:	bl	14910 <flatcc_builder_embed_buffer@@Base+0x1e8>
   14c7c:	cmp	r0, #0
   14c80:	beq	14c90 <flatcc_builder_create_buffer@@Base+0xa8>
   14c84:	movw	r0, #0
   14c88:	str	r0, [fp, #-4]
   14c8c:	b	14f74 <flatcc_builder_create_buffer@@Base+0x38c>
   14c90:	ldr	r0, [fp, #-8]
   14c94:	ldrh	r1, [fp, #-22]	; 0xffffffea
   14c98:	bl	14f90 <flatcc_builder_create_buffer@@Base+0x3a8>
   14c9c:	ldr	r0, [fp, #-12]
   14ca0:	movw	r1, #0
   14ca4:	cmp	r0, r1
   14ca8:	beq	14ce8 <flatcc_builder_create_buffer@@Base+0x100>
   14cac:	ldr	r0, [fp, #-12]
   14cb0:	ldrb	r1, [r0]
   14cb4:	strb	r1, [sp, #28]
   14cb8:	ldrb	r1, [r0, #1]
   14cbc:	strb	r1, [sp, #29]
   14cc0:	ldrb	r1, [r0, #2]
   14cc4:	strb	r1, [sp, #30]
   14cc8:	ldrb	r0, [r0, #3]
   14ccc:	strb	r0, [sp, #31]
   14cd0:	ldr	r0, [sp, #28]
   14cd4:	bl	14fc4 <flatcc_builder_create_buffer@@Base+0x3dc>
   14cd8:	str	r0, [sp, #28]
   14cdc:	ldr	r0, [sp, #28]
   14ce0:	bl	14ab0 <flatcc_builder_embed_buffer@@Base+0x388>
   14ce4:	str	r0, [sp, #28]
   14ce8:	ldr	r0, [sp, #28]
   14cec:	cmp	r0, #0
   14cf0:	movw	r0, #0
   14cf4:	movne	r0, #1
   14cf8:	tst	r0, #1
   14cfc:	movw	r0, #4
   14d00:	mov	r1, r0
   14d04:	moveq	r1, #0
   14d08:	str	r1, [fp, #-36]	; 0xffffffdc
   14d0c:	ldr	r1, [fp, #-8]
   14d10:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14d14:	add	r2, r2, #4
   14d18:	ldr	r3, [sp, #20]
   14d1c:	cmp	r3, #0
   14d20:	movw	r3, #0
   14d24:	movne	r3, #1
   14d28:	tst	r3, #1
   14d2c:	moveq	r0, #0
   14d30:	add	r0, r2, r0
   14d34:	str	r0, [sp, #8]
   14d38:	mov	r0, r1
   14d3c:	ldr	r1, [sp, #8]
   14d40:	ldrh	r2, [fp, #-22]	; 0xffffffea
   14d44:	bl	14a7c <flatcc_builder_embed_buffer@@Base+0x354>
   14d48:	str	r0, [fp, #-32]	; 0xffffffe0
   14d4c:	movw	r0, #0
   14d50:	str	r0, [sp, #32]
   14d54:	str	r0, [sp, #36]	; 0x24
   14d58:	ldr	r0, [sp, #24]
   14d5c:	cmp	r0, #0
   14d60:	bne	14d70 <flatcc_builder_create_buffer@@Base+0x188>
   14d64:	ldr	r0, [sp, #20]
   14d68:	cmp	r0, #0
   14d6c:	beq	14dac <flatcc_builder_create_buffer@@Base+0x1c4>
   14d70:	ldr	r0, [sp, #32]
   14d74:	add	r0, r0, #4
   14d78:	str	r0, [sp, #32]
   14d7c:	add	r0, sp, #32
   14d80:	add	r0, r0, #8
   14d84:	ldr	r1, [sp, #36]	; 0x24
   14d88:	sub	r2, fp, #44	; 0x2c
   14d8c:	str	r2, [r0, r1, lsl #3]
   14d90:	ldr	r1, [sp, #36]	; 0x24
   14d94:	add	r0, r0, r1, lsl #3
   14d98:	movw	r1, #4
   14d9c:	str	r1, [r0, #4]
   14da0:	ldr	r0, [sp, #36]	; 0x24
   14da4:	add	r0, r0, #1
   14da8:	str	r0, [sp, #36]	; 0x24
   14dac:	ldr	r0, [sp, #32]
   14db0:	add	r0, r0, #4
   14db4:	str	r0, [sp, #32]
   14db8:	add	r0, sp, #32
   14dbc:	add	r0, r0, #8
   14dc0:	ldr	r1, [sp, #36]	; 0x24
   14dc4:	sub	r2, fp, #40	; 0x28
   14dc8:	str	r2, [r0, r1, lsl #3]
   14dcc:	ldr	r1, [sp, #36]	; 0x24
   14dd0:	add	r0, r0, r1, lsl #3
   14dd4:	movw	r1, #4
   14dd8:	str	r1, [r0, #4]
   14ddc:	ldr	r0, [sp, #36]	; 0x24
   14de0:	add	r0, r0, #1
   14de4:	str	r0, [sp, #36]	; 0x24
   14de8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14dec:	cmp	r0, #0
   14df0:	bls	14e34 <flatcc_builder_create_buffer@@Base+0x24c>
   14df4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14df8:	ldr	r1, [sp, #32]
   14dfc:	add	r0, r1, r0
   14e00:	str	r0, [sp, #32]
   14e04:	add	r0, sp, #32
   14e08:	add	r0, r0, #8
   14e0c:	ldr	r1, [sp, #36]	; 0x24
   14e10:	add	r2, sp, #28
   14e14:	str	r2, [r0, r1, lsl #3]
   14e18:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14e1c:	ldr	r2, [sp, #36]	; 0x24
   14e20:	add	r0, r0, r2, lsl #3
   14e24:	str	r1, [r0, #4]
   14e28:	ldr	r0, [sp, #36]	; 0x24
   14e2c:	add	r0, r0, #1
   14e30:	str	r0, [sp, #36]	; 0x24
   14e34:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14e38:	cmp	r0, #0
   14e3c:	bls	14e84 <flatcc_builder_create_buffer@@Base+0x29c>
   14e40:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14e44:	ldr	r1, [sp, #32]
   14e48:	add	r0, r1, r0
   14e4c:	str	r0, [sp, #32]
   14e50:	add	r0, sp, #32
   14e54:	add	r0, r0, #8
   14e58:	ldr	r1, [sp, #36]	; 0x24
   14e5c:	ldr	r2, [pc, #296]	; 14f8c <flatcc_builder_create_buffer@@Base+0x3a4>
   14e60:	ldr	r2, [pc, r2]
   14e64:	str	r2, [r0, r1, lsl #3]
   14e68:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14e6c:	ldr	r2, [sp, #36]	; 0x24
   14e70:	add	r0, r0, r2, lsl #3
   14e74:	str	r1, [r0, #4]
   14e78:	ldr	r0, [sp, #36]	; 0x24
   14e7c:	add	r0, r0, #1
   14e80:	str	r0, [sp, #36]	; 0x24
   14e84:	ldr	r0, [fp, #-8]
   14e88:	ldr	r0, [r0, #136]	; 0x88
   14e8c:	ldr	r1, [sp, #32]
   14e90:	sub	r0, r0, r1
   14e94:	ldr	r1, [sp, #24]
   14e98:	cmp	r1, #0
   14e9c:	movw	r1, #1
   14ea0:	str	r0, [sp, #4]
   14ea4:	str	r1, [sp]
   14ea8:	bne	14ec0 <flatcc_builder_create_buffer@@Base+0x2d8>
   14eac:	ldr	r0, [sp, #20]
   14eb0:	cmp	r0, #0
   14eb4:	movw	r0, #0
   14eb8:	movne	r0, #1
   14ebc:	str	r0, [sp]
   14ec0:	ldr	r0, [sp]
   14ec4:	tst	r0, #1
   14ec8:	movw	r0, #4
   14ecc:	moveq	r0, #0
   14ed0:	ldr	r1, [sp, #4]
   14ed4:	add	r0, r1, r0
   14ed8:	str	r0, [fp, #-48]	; 0xffffffd0
   14edc:	ldr	r0, [sp, #24]
   14ee0:	cmp	r0, #0
   14ee4:	beq	14f04 <flatcc_builder_create_buffer@@Base+0x31c>
   14ee8:	ldr	r0, [fp, #-8]
   14eec:	ldr	r0, [r0, #144]	; 0x90
   14ef0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14ef4:	sub	r0, r0, r1
   14ef8:	bl	14ab0 <flatcc_builder_embed_buffer@@Base+0x388>
   14efc:	str	r0, [fp, #-44]	; 0xffffffd4
   14f00:	b	14f1c <flatcc_builder_create_buffer@@Base+0x334>
   14f04:	ldr	r0, [fp, #-8]
   14f08:	ldr	r0, [r0, #140]	; 0x8c
   14f0c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14f10:	sub	r0, r0, r1
   14f14:	bl	14ab0 <flatcc_builder_embed_buffer@@Base+0x388>
   14f18:	str	r0, [fp, #-44]	; 0xffffffd4
   14f1c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14f20:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14f24:	sub	r0, r0, r1
   14f28:	bl	14ab0 <flatcc_builder_embed_buffer@@Base+0x388>
   14f2c:	str	r0, [fp, #-40]	; 0xffffffd8
   14f30:	ldr	r0, [fp, #-8]
   14f34:	add	r1, sp, #32
   14f38:	bl	14ac4 <flatcc_builder_embed_buffer@@Base+0x39c>
   14f3c:	str	r0, [fp, #-28]	; 0xffffffe4
   14f40:	movw	r1, #0
   14f44:	cmp	r1, r0
   14f48:	bne	14f6c <flatcc_builder_create_buffer@@Base+0x384>
   14f4c:	ldr	r0, [pc, #44]	; 14f80 <flatcc_builder_create_buffer@@Base+0x398>
   14f50:	add	r0, pc, r0
   14f54:	ldr	r1, [pc, #40]	; 14f84 <flatcc_builder_create_buffer@@Base+0x39c>
   14f58:	add	r1, pc, r1
   14f5c:	ldr	r2, [pc, #36]	; 14f88 <flatcc_builder_create_buffer@@Base+0x3a0>
   14f60:	add	r3, pc, r2
   14f64:	movw	r2, #772	; 0x304
   14f68:	bl	12494 <__assert_fail@plt>
   14f6c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14f70:	str	r0, [fp, #-4]
   14f74:	ldr	r0, [fp, #-4]
   14f78:	mov	sp, fp
   14f7c:	pop	{fp, pc}
   14f80:	andeq	r7, r0, r1, lsr #6
   14f84:	andeq	r6, r0, ip, asr r1
   14f88:	andeq	r6, r0, r6, lsr #5
   14f8c:	strdeq	r8, [r1], -r4
   14f90:	sub	sp, sp, #8
   14f94:	str	r0, [sp, #4]
   14f98:	strh	r1, [sp, #2]
   14f9c:	ldr	r0, [sp, #4]
   14fa0:	ldrh	r0, [r0, #128]	; 0x80
   14fa4:	ldrh	r1, [sp, #2]
   14fa8:	cmp	r0, r1
   14fac:	bge	14fbc <flatcc_builder_create_buffer@@Base+0x3d4>
   14fb0:	ldrh	r0, [sp, #2]
   14fb4:	ldr	r1, [sp, #4]
   14fb8:	strh	r0, [r1, #128]	; 0x80
   14fbc:	add	sp, sp, #8
   14fc0:	bx	lr
   14fc4:	sub	sp, sp, #4
   14fc8:	str	r0, [sp]
   14fcc:	ldr	r0, [sp]
   14fd0:	add	sp, sp, #4
   14fd4:	bx	lr

00014fd8 <flatcc_builder_create_struct@@Base>:
   14fd8:	push	{fp, lr}
   14fdc:	mov	fp, sp
   14fe0:	sub	sp, sp, #96	; 0x60
   14fe4:	str	r0, [fp, #-4]
   14fe8:	str	r1, [fp, #-8]
   14fec:	str	r2, [fp, #-12]
   14ff0:	strh	r3, [fp, #-14]
   14ff4:	ldrh	r0, [fp, #-14]
   14ff8:	cmp	r0, #1
   14ffc:	blt	15004 <flatcc_builder_create_struct@@Base+0x2c>
   15000:	b	15024 <flatcc_builder_create_struct@@Base+0x4c>
   15004:	ldr	r0, [pc, #244]	; 15100 <flatcc_builder_create_struct@@Base+0x128>
   15008:	add	r0, pc, r0
   1500c:	ldr	r1, [pc, #240]	; 15104 <flatcc_builder_create_struct@@Base+0x12c>
   15010:	add	r1, pc, r1
   15014:	ldr	r2, [pc, #236]	; 15108 <flatcc_builder_create_struct@@Base+0x130>
   15018:	add	r3, pc, r2
   1501c:	movw	r2, #783	; 0x30f
   15020:	bl	12494 <__assert_fail@plt>
   15024:	ldr	r0, [fp, #-4]
   15028:	ldrh	r1, [fp, #-14]
   1502c:	bl	14f90 <flatcc_builder_create_buffer@@Base+0x3a8>
   15030:	ldr	r0, [fp, #-4]
   15034:	ldr	r1, [fp, #-12]
   15038:	ldrh	r2, [fp, #-14]
   1503c:	bl	14a7c <flatcc_builder_embed_buffer@@Base+0x354>
   15040:	str	r0, [fp, #-20]	; 0xffffffec
   15044:	movw	r0, #0
   15048:	str	r0, [sp, #4]
   1504c:	str	r0, [sp, #8]
   15050:	ldr	r0, [fp, #-12]
   15054:	cmp	r0, #0
   15058:	bls	1509c <flatcc_builder_create_struct@@Base+0xc4>
   1505c:	ldr	r0, [fp, #-12]
   15060:	ldr	r1, [sp, #4]
   15064:	add	r0, r1, r0
   15068:	str	r0, [sp, #4]
   1506c:	ldr	r0, [fp, #-8]
   15070:	add	r1, sp, #4
   15074:	add	r1, r1, #8
   15078:	ldr	r2, [sp, #8]
   1507c:	str	r0, [r1, r2, lsl #3]
   15080:	ldr	r0, [fp, #-12]
   15084:	ldr	r2, [sp, #8]
   15088:	add	r1, r1, r2, lsl #3
   1508c:	str	r0, [r1, #4]
   15090:	ldr	r0, [sp, #8]
   15094:	add	r0, r0, #1
   15098:	str	r0, [sp, #8]
   1509c:	ldr	r0, [fp, #-20]	; 0xffffffec
   150a0:	cmp	r0, #0
   150a4:	bls	150ec <flatcc_builder_create_struct@@Base+0x114>
   150a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   150ac:	ldr	r1, [sp, #4]
   150b0:	add	r0, r1, r0
   150b4:	str	r0, [sp, #4]
   150b8:	add	r0, sp, #4
   150bc:	add	r0, r0, #8
   150c0:	ldr	r1, [sp, #8]
   150c4:	ldr	r2, [pc, #64]	; 1510c <flatcc_builder_create_struct@@Base+0x134>
   150c8:	ldr	r2, [pc, r2]
   150cc:	str	r2, [r0, r1, lsl #3]
   150d0:	ldr	r1, [fp, #-20]	; 0xffffffec
   150d4:	ldr	r2, [sp, #8]
   150d8:	add	r0, r0, r2, lsl #3
   150dc:	str	r1, [r0, #4]
   150e0:	ldr	r0, [sp, #8]
   150e4:	add	r0, r0, #1
   150e8:	str	r0, [sp, #8]
   150ec:	ldr	r0, [fp, #-4]
   150f0:	add	r1, sp, #4
   150f4:	bl	14ac4 <flatcc_builder_embed_buffer@@Base+0x39c>
   150f8:	mov	sp, fp
   150fc:	pop	{fp, pc}
   15100:	andeq	r6, r0, r1, lsl #5
   15104:	andeq	r6, r0, r4, lsr #1
   15108:	andeq	r6, r0, ip, ror r2
   1510c:	andeq	r7, r1, ip, lsl #31

00015110 <flatcc_builder_start_buffer@@Base>:
   15110:	push	{fp, lr}
   15114:	mov	fp, sp
   15118:	sub	sp, sp, #32
   1511c:	str	r0, [fp, #-8]
   15120:	str	r1, [fp, #-12]
   15124:	strh	r2, [fp, #-14]
   15128:	str	r3, [sp, #12]
   1512c:	ldr	r0, [fp, #-8]
   15130:	ldr	r1, [fp, #-8]
   15134:	ldrh	r1, [r1, #128]	; 0x80
   15138:	bl	15288 <flatcc_builder_start_buffer@@Base+0x178>
   1513c:	cmp	r0, #0
   15140:	beq	15150 <flatcc_builder_start_buffer@@Base+0x40>
   15144:	mvn	r0, #0
   15148:	str	r0, [fp, #-4]
   1514c:	b	15278 <flatcc_builder_start_buffer@@Base+0x168>
   15150:	ldr	r0, [fp, #-8]
   15154:	movw	r1, #1
   15158:	strh	r1, [r0, #128]	; 0x80
   1515c:	ldr	r0, [fp, #-8]
   15160:	ldrh	r0, [r0, #132]	; 0x84
   15164:	ldr	r1, [fp, #-8]
   15168:	ldr	r1, [r1, #32]
   1516c:	strh	r0, [r1, #34]	; 0x22
   15170:	ldrh	r0, [fp, #-14]
   15174:	ldr	r1, [fp, #-8]
   15178:	strh	r0, [r1, #132]	; 0x84
   1517c:	ldr	r0, [fp, #-8]
   15180:	ldrh	r0, [r0, #164]	; 0xa4
   15184:	ldr	r1, [fp, #-8]
   15188:	ldr	r1, [r1, #32]
   1518c:	strh	r0, [r1, #32]
   15190:	ldr	r0, [sp, #12]
   15194:	ldr	r1, [fp, #-8]
   15198:	strh	r0, [r1, #164]	; 0xa4
   1519c:	ldr	r0, [fp, #-8]
   151a0:	ldr	r0, [r0, #144]	; 0x90
   151a4:	ldr	r1, [fp, #-8]
   151a8:	ldr	r1, [r1, #32]
   151ac:	str	r0, [r1, #20]
   151b0:	ldr	r0, [fp, #-8]
   151b4:	ldr	r0, [r0, #152]	; 0x98
   151b8:	ldr	r1, [fp, #-8]
   151bc:	ldr	r1, [r1, #32]
   151c0:	str	r0, [r1, #28]
   151c4:	ldr	r0, [fp, #-8]
   151c8:	ldr	r0, [r0, #136]	; 0x88
   151cc:	ldr	r1, [fp, #-8]
   151d0:	str	r0, [r1, #144]	; 0x90
   151d4:	ldr	r0, [fp, #-8]
   151d8:	ldr	r1, [r0, #148]	; 0x94
   151dc:	add	r2, r1, #1
   151e0:	str	r2, [r0, #148]	; 0x94
   151e4:	ldr	r0, [fp, #-8]
   151e8:	str	r1, [r0, #152]	; 0x98
   151ec:	ldr	r0, [fp, #-8]
   151f0:	ldr	r0, [r0, #168]	; 0xa8
   151f4:	ldr	r1, [fp, #-8]
   151f8:	ldr	r1, [r1, #32]
   151fc:	str	r0, [r1, #16]
   15200:	ldr	r0, [fp, #-8]
   15204:	add	r0, r0, #168	; 0xa8
   15208:	ldr	r1, [fp, #-12]
   1520c:	movw	r2, #0
   15210:	cmp	r1, r2
   15214:	str	r0, [sp, #8]
   15218:	beq	15228 <flatcc_builder_start_buffer@@Base+0x118>
   1521c:	ldr	r0, [fp, #-12]
   15220:	str	r0, [sp, #4]
   15224:	b	15238 <flatcc_builder_start_buffer@@Base+0x128>
   15228:	ldr	r0, [pc, #84]	; 15284 <flatcc_builder_start_buffer@@Base+0x174>
   1522c:	ldr	r0, [pc, r0]
   15230:	str	r0, [sp, #4]
   15234:	b	15238 <flatcc_builder_start_buffer@@Base+0x128>
   15238:	ldr	r0, [sp, #4]
   1523c:	ldrb	r1, [r0]
   15240:	ldr	r2, [sp, #8]
   15244:	strb	r1, [r2]
   15248:	ldrb	r1, [r0, #1]
   1524c:	strb	r1, [r2, #1]
   15250:	ldrb	r1, [r0, #2]
   15254:	strb	r1, [r2, #2]
   15258:	ldrb	r0, [r0, #3]
   1525c:	strb	r0, [r2, #3]
   15260:	ldr	r0, [fp, #-8]
   15264:	ldr	r0, [r0, #32]
   15268:	movw	r1, #1
   1526c:	strh	r1, [r0, #14]
   15270:	movw	r0, #0
   15274:	str	r0, [fp, #-4]
   15278:	ldr	r0, [fp, #-4]
   1527c:	mov	sp, fp
   15280:	pop	{fp, pc}
   15284:	andeq	r7, r1, r8, lsr #28
   15288:	push	{fp, lr}
   1528c:	mov	fp, sp
   15290:	sub	sp, sp, #24
   15294:	str	r0, [fp, #-8]
   15298:	strh	r1, [fp, #-10]
   1529c:	ldr	r0, [fp, #-8]
   152a0:	ldr	r1, [r0, #156]	; 0x9c
   152a4:	add	r1, r1, #1
   152a8:	str	r1, [r0, #156]	; 0x9c
   152ac:	ldr	r0, [fp, #-8]
   152b0:	ldr	r0, [r0, #160]	; 0xa0
   152b4:	cmp	r1, r0
   152b8:	ble	153a4 <flatcc_builder_start_buffer@@Base+0x294>
   152bc:	ldr	r0, [fp, #-8]
   152c0:	ldr	r0, [r0, #176]	; 0xb0
   152c4:	cmp	r0, #0
   152c8:	ble	152f0 <flatcc_builder_start_buffer@@Base+0x1e0>
   152cc:	ldr	r0, [fp, #-8]
   152d0:	ldr	r0, [r0, #156]	; 0x9c
   152d4:	ldr	r1, [fp, #-8]
   152d8:	ldr	r1, [r1, #176]	; 0xb0
   152dc:	cmp	r0, r1
   152e0:	ble	152f0 <flatcc_builder_start_buffer@@Base+0x1e0>
   152e4:	mvn	r0, #0
   152e8:	str	r0, [fp, #-4]
   152ec:	b	15448 <flatcc_builder_start_buffer@@Base+0x338>
   152f0:	ldr	r0, [fp, #-8]
   152f4:	ldr	r1, [fp, #-8]
   152f8:	ldr	r1, [r1, #156]	; 0x9c
   152fc:	sub	r1, r1, #1
   15300:	movw	r2, #36	; 0x24
   15304:	mul	r1, r1, r2
   15308:	movw	r3, #4
   1530c:	str	r1, [sp, #8]
   15310:	mov	r1, r3
   15314:	ldr	r3, [sp, #8]
   15318:	str	r2, [sp, #4]
   1531c:	mov	r2, r3
   15320:	ldr	r3, [sp, #4]
   15324:	movw	ip, #0
   15328:	str	ip, [sp]
   1532c:	bl	1441c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   15330:	ldr	r1, [fp, #-8]
   15334:	str	r0, [r1, #32]
   15338:	movw	r1, #0
   1533c:	cmp	r0, r1
   15340:	bne	15350 <flatcc_builder_start_buffer@@Base+0x240>
   15344:	mvn	r0, #0
   15348:	str	r0, [fp, #-4]
   1534c:	b	15448 <flatcc_builder_start_buffer@@Base+0x338>
   15350:	ldr	r0, [fp, #-8]
   15354:	ldr	r0, [r0, #88]	; 0x58
   15358:	movw	r1, #36	; 0x24
   1535c:	udiv	r0, r0, r1
   15360:	ldr	r1, [fp, #-8]
   15364:	str	r0, [r1, #160]	; 0xa0
   15368:	ldr	r0, [fp, #-8]
   1536c:	ldr	r0, [r0, #176]	; 0xb0
   15370:	cmp	r0, #0
   15374:	ble	153a0 <flatcc_builder_start_buffer@@Base+0x290>
   15378:	ldr	r0, [fp, #-8]
   1537c:	ldr	r0, [r0, #176]	; 0xb0
   15380:	ldr	r1, [fp, #-8]
   15384:	ldr	r1, [r1, #160]	; 0xa0
   15388:	cmp	r0, r1
   1538c:	bge	153a0 <flatcc_builder_start_buffer@@Base+0x290>
   15390:	ldr	r0, [fp, #-8]
   15394:	ldr	r0, [r0, #176]	; 0xb0
   15398:	ldr	r1, [fp, #-8]
   1539c:	str	r0, [r1, #160]	; 0xa0
   153a0:	b	153b4 <flatcc_builder_start_buffer@@Base+0x2a4>
   153a4:	ldr	r0, [fp, #-8]
   153a8:	ldr	r1, [r0, #32]
   153ac:	add	r1, r1, #36	; 0x24
   153b0:	str	r1, [r0, #32]
   153b4:	ldr	r0, [fp, #-8]
   153b8:	ldr	r0, [r0, #20]
   153bc:	ldr	r1, [fp, #-8]
   153c0:	ldr	r1, [r1, #32]
   153c4:	str	r0, [r1, #8]
   153c8:	ldr	r0, [fp, #-8]
   153cc:	ldrh	r0, [r0, #130]	; 0x82
   153d0:	ldr	r1, [fp, #-8]
   153d4:	ldr	r1, [r1, #32]
   153d8:	strh	r0, [r1, #12]
   153dc:	ldrh	r0, [fp, #-10]
   153e0:	ldr	r1, [fp, #-8]
   153e4:	strh	r0, [r1, #130]	; 0x82
   153e8:	ldr	r0, [fp, #-8]
   153ec:	ldr	r0, [r0, #28]
   153f0:	ldr	r1, [fp, #-8]
   153f4:	ldr	r1, [r1, #32]
   153f8:	str	r0, [r1]
   153fc:	ldr	r0, [fp, #-8]
   15400:	ldr	r0, [r0, #32]
   15404:	mvn	r1, #3
   15408:	str	r1, [r0, #4]
   1540c:	ldr	r0, [fp, #-8]
   15410:	ldr	r0, [r0, #28]
   15414:	ldr	r1, [fp, #-8]
   15418:	ldr	r1, [r1, #20]
   1541c:	add	r0, r0, r1
   15420:	add	r0, r0, #8
   15424:	sub	r0, r0, #1
   15428:	mvn	r1, #7
   1542c:	and	r0, r0, r1
   15430:	ldr	r1, [fp, #-8]
   15434:	str	r0, [r1, #28]
   15438:	ldr	r0, [fp, #-8]
   1543c:	movw	r1, #0
   15440:	str	r1, [r0, #20]
   15444:	str	r1, [fp, #-4]
   15448:	ldr	r0, [fp, #-4]
   1544c:	mov	sp, fp
   15450:	pop	{fp, pc}

00015454 <flatcc_builder_end_buffer@@Base>:
   15454:	push	{fp, lr}
   15458:	mov	fp, sp
   1545c:	sub	sp, sp, #32
   15460:	str	r0, [fp, #-8]
   15464:	str	r1, [fp, #-12]
   15468:	ldr	r0, [fp, #-8]
   1546c:	ldrh	r0, [r0, #164]	; 0xa4
   15470:	and	r0, r0, #2
   15474:	str	r0, [sp, #12]
   15478:	ldr	r0, [fp, #-8]
   1547c:	ldr	r0, [r0, #152]	; 0x98
   15480:	cmp	r0, #0
   15484:	movw	r0, #0
   15488:	moveq	r0, #1
   1548c:	tst	r0, #1
   15490:	movw	r0, #0
   15494:	moveq	r0, #1
   15498:	ldr	r1, [sp, #12]
   1549c:	orr	r0, r1, r0
   154a0:	str	r0, [sp, #12]
   154a4:	ldr	r0, [fp, #-8]
   154a8:	ldr	r0, [r0, #32]
   154ac:	ldrh	r0, [r0, #14]
   154b0:	cmp	r0, #1
   154b4:	bne	154bc <flatcc_builder_end_buffer@@Base+0x68>
   154b8:	b	154dc <flatcc_builder_end_buffer@@Base+0x88>
   154bc:	ldr	r0, [pc, #232]	; 155ac <flatcc_builder_end_buffer@@Base+0x158>
   154c0:	add	r0, pc, r0
   154c4:	ldr	r1, [pc, #228]	; 155b0 <flatcc_builder_end_buffer@@Base+0x15c>
   154c8:	add	r1, pc, r1
   154cc:	ldr	r2, [pc, #224]	; 155b4 <flatcc_builder_end_buffer@@Base+0x160>
   154d0:	add	r3, pc, r2
   154d4:	movw	r2, #838	; 0x346
   154d8:	bl	12494 <__assert_fail@plt>
   154dc:	ldr	r0, [fp, #-8]
   154e0:	ldr	r1, [fp, #-8]
   154e4:	ldrh	r1, [r1, #132]	; 0x84
   154e8:	bl	14f90 <flatcc_builder_create_buffer@@Base+0x3a8>
   154ec:	ldr	r0, [fp, #-8]
   154f0:	ldr	r1, [fp, #-8]
   154f4:	add	r1, r1, #168	; 0xa8
   154f8:	ldr	r2, [fp, #-8]
   154fc:	ldrh	r2, [r2, #132]	; 0x84
   15500:	ldr	r3, [fp, #-12]
   15504:	ldr	ip, [fp, #-8]
   15508:	ldrh	ip, [ip, #128]	; 0x80
   1550c:	ldr	lr, [sp, #12]
   15510:	uxth	r2, r2
   15514:	uxth	ip, ip
   15518:	str	ip, [sp]
   1551c:	str	lr, [sp, #4]
   15520:	bl	14be8 <flatcc_builder_create_buffer@@Base>
   15524:	str	r0, [sp, #16]
   15528:	movw	r1, #0
   1552c:	cmp	r1, r0
   15530:	bne	15540 <flatcc_builder_end_buffer@@Base+0xec>
   15534:	movw	r0, #0
   15538:	str	r0, [fp, #-4]
   1553c:	b	155a0 <flatcc_builder_end_buffer@@Base+0x14c>
   15540:	ldr	r0, [fp, #-8]
   15544:	ldr	r0, [r0, #32]
   15548:	ldr	r0, [r0, #20]
   1554c:	ldr	r1, [fp, #-8]
   15550:	str	r0, [r1, #144]	; 0x90
   15554:	ldr	r0, [fp, #-8]
   15558:	ldr	r0, [r0, #32]
   1555c:	ldr	r0, [r0, #28]
   15560:	ldr	r1, [fp, #-8]
   15564:	str	r0, [r1, #152]	; 0x98
   15568:	ldr	r0, [fp, #-8]
   1556c:	ldr	r0, [r0, #32]
   15570:	ldr	r0, [r0, #16]
   15574:	ldr	r1, [fp, #-8]
   15578:	str	r0, [r1, #168]	; 0xa8
   1557c:	ldr	r0, [fp, #-8]
   15580:	ldr	r0, [r0, #32]
   15584:	ldrh	r0, [r0, #32]
   15588:	ldr	r1, [fp, #-8]
   1558c:	strh	r0, [r1, #164]	; 0xa4
   15590:	ldr	r0, [fp, #-8]
   15594:	bl	155b8 <flatcc_builder_end_buffer@@Base+0x164>
   15598:	ldr	r0, [sp, #16]
   1559c:	str	r0, [fp, #-4]
   155a0:	ldr	r0, [fp, #-4]
   155a4:	mov	sp, fp
   155a8:	pop	{fp, pc}
   155ac:	andeq	r5, r0, sl, lsr lr
   155b0:	andeq	r5, r0, ip, ror #23
   155b4:	andeq	r5, r0, r6, asr lr
   155b8:	push	{fp, lr}
   155bc:	mov	fp, sp
   155c0:	sub	sp, sp, #8
   155c4:	str	r0, [sp, #4]
   155c8:	ldr	r0, [sp, #4]
   155cc:	ldr	r0, [r0, #16]
   155d0:	ldr	r1, [sp, #4]
   155d4:	ldr	r2, [r1, #20]
   155d8:	movw	r1, #0
   155dc:	and	r1, r1, #255	; 0xff
   155e0:	bl	12458 <memset@plt>
   155e4:	ldr	r0, [sp, #4]
   155e8:	ldr	r0, [r0, #32]
   155ec:	ldr	r0, [r0, #8]
   155f0:	ldr	r1, [sp, #4]
   155f4:	str	r0, [r1, #20]
   155f8:	ldr	r0, [sp, #4]
   155fc:	ldr	r0, [r0, #32]
   15600:	ldr	r0, [r0]
   15604:	ldr	r1, [sp, #4]
   15608:	str	r0, [r1, #28]
   1560c:	ldr	r0, [sp, #4]
   15610:	ldr	r1, [sp, #4]
   15614:	ldr	r1, [r1, #32]
   15618:	ldr	r1, [r1, #4]
   1561c:	bl	156e4 <flatcc_builder_start_struct@@Base+0x70>
   15620:	ldr	r0, [sp, #4]
   15624:	ldr	r1, [sp, #4]
   15628:	ldrh	r1, [r1, #130]	; 0x82
   1562c:	bl	14f90 <flatcc_builder_create_buffer@@Base+0x3a8>
   15630:	ldr	r0, [sp, #4]
   15634:	ldr	r0, [r0, #32]
   15638:	ldrh	r0, [r0, #12]
   1563c:	ldr	r1, [sp, #4]
   15640:	strh	r0, [r1, #130]	; 0x82
   15644:	ldr	r0, [sp, #4]
   15648:	ldr	r1, [r0, #32]
   1564c:	mvn	r2, #35	; 0x23
   15650:	add	r1, r1, r2
   15654:	str	r1, [r0, #32]
   15658:	ldr	r0, [sp, #4]
   1565c:	ldr	r1, [r0, #156]	; 0x9c
   15660:	mvn	r2, #0
   15664:	add	r1, r1, r2
   15668:	str	r1, [r0, #156]	; 0x9c
   1566c:	mov	sp, fp
   15670:	pop	{fp, pc}

00015674 <flatcc_builder_start_struct@@Base>:
   15674:	push	{fp, lr}
   15678:	mov	fp, sp
   1567c:	sub	sp, sp, #16
   15680:	str	r0, [sp, #8]
   15684:	str	r1, [sp, #4]
   15688:	strh	r2, [sp, #2]
   1568c:	ldr	r0, [sp, #8]
   15690:	ldrh	r1, [sp, #2]
   15694:	bl	15288 <flatcc_builder_start_buffer@@Base+0x178>
   15698:	cmp	r0, #0
   1569c:	beq	156ac <flatcc_builder_start_struct@@Base+0x38>
   156a0:	movw	r0, #0
   156a4:	str	r0, [fp, #-4]
   156a8:	b	156d8 <flatcc_builder_start_struct@@Base+0x64>
   156ac:	ldr	r0, [sp, #8]
   156b0:	ldr	r0, [r0, #32]
   156b4:	movw	r1, #2
   156b8:	strh	r1, [r0, #14]
   156bc:	ldr	r0, [sp, #8]
   156c0:	mvn	r1, #3
   156c4:	bl	156e4 <flatcc_builder_start_struct@@Base+0x70>
   156c8:	ldr	r0, [sp, #8]
   156cc:	ldr	r1, [sp, #4]
   156d0:	bl	15770 <flatcc_builder_start_struct@@Base+0xfc>
   156d4:	str	r0, [fp, #-4]
   156d8:	ldr	r0, [fp, #-4]
   156dc:	mov	sp, fp
   156e0:	pop	{fp, pc}
   156e4:	sub	sp, sp, #12
   156e8:	str	r0, [sp, #8]
   156ec:	str	r1, [sp, #4]
   156f0:	ldr	r0, [sp, #8]
   156f4:	add	r0, r0, #52	; 0x34
   156f8:	add	r0, r0, #8
   156fc:	str	r0, [sp]
   15700:	ldr	r0, [sp, #8]
   15704:	ldr	r0, [r0, #60]	; 0x3c
   15708:	ldr	r1, [sp, #8]
   1570c:	ldr	r1, [r1, #28]
   15710:	add	r0, r0, r1
   15714:	ldr	r1, [sp, #8]
   15718:	str	r0, [r1, #16]
   1571c:	ldr	r0, [sp]
   15720:	ldr	r0, [r0, #4]
   15724:	ldr	r1, [sp, #8]
   15728:	ldr	r1, [r1, #28]
   1572c:	sub	r0, r0, r1
   15730:	ldr	r1, [sp, #8]
   15734:	str	r0, [r1, #24]
   15738:	ldr	r0, [sp, #8]
   1573c:	ldr	r0, [r0, #24]
   15740:	ldr	r1, [sp, #4]
   15744:	cmp	r0, r1
   15748:	bls	15758 <flatcc_builder_start_struct@@Base+0xe4>
   1574c:	ldr	r0, [sp, #4]
   15750:	ldr	r1, [sp, #8]
   15754:	str	r0, [r1, #24]
   15758:	ldr	r0, [sp, #4]
   1575c:	ldr	r1, [sp, #8]
   15760:	ldr	r1, [r1, #32]
   15764:	str	r0, [r1, #4]
   15768:	add	sp, sp, #12
   1576c:	bx	lr
   15770:	push	{fp, lr}
   15774:	mov	fp, sp
   15778:	sub	sp, sp, #16
   1577c:	str	r0, [sp, #8]
   15780:	str	r1, [sp, #4]
   15784:	ldr	r0, [sp, #8]
   15788:	ldr	r0, [r0, #20]
   1578c:	str	r0, [sp]
   15790:	ldr	r0, [sp, #4]
   15794:	ldr	r1, [sp, #8]
   15798:	ldr	r2, [r1, #20]
   1579c:	add	r0, r2, r0
   157a0:	str	r0, [r1, #20]
   157a4:	ldr	r1, [sp, #8]
   157a8:	ldr	r1, [r1, #24]
   157ac:	cmp	r0, r1
   157b0:	bcc	157e4 <flatcc_builder_start_struct@@Base+0x170>
   157b4:	ldr	r0, [sp, #8]
   157b8:	ldr	r1, [sp, #8]
   157bc:	ldr	r1, [r1, #20]
   157c0:	add	r1, r1, #1
   157c4:	mvn	r2, #3
   157c8:	bl	198cc <flatcc_builder_get_emit_context@@Base+0x40>
   157cc:	cmp	r0, #0
   157d0:	beq	157e0 <flatcc_builder_start_struct@@Base+0x16c>
   157d4:	movw	r0, #0
   157d8:	str	r0, [fp, #-4]
   157dc:	b	157f8 <flatcc_builder_start_struct@@Base+0x184>
   157e0:	b	157e4 <flatcc_builder_start_struct@@Base+0x170>
   157e4:	ldr	r0, [sp, #8]
   157e8:	ldr	r0, [r0, #16]
   157ec:	ldr	r1, [sp]
   157f0:	add	r0, r0, r1
   157f4:	str	r0, [fp, #-4]
   157f8:	ldr	r0, [fp, #-4]
   157fc:	mov	sp, fp
   15800:	pop	{fp, pc}

00015804 <flatcc_builder_struct_edit@@Base>:
   15804:	sub	sp, sp, #4
   15808:	str	r0, [sp]
   1580c:	ldr	r0, [sp]
   15810:	ldr	r0, [r0, #16]
   15814:	add	sp, sp, #4
   15818:	bx	lr

0001581c <flatcc_builder_end_struct@@Base>:
   1581c:	push	{fp, lr}
   15820:	mov	fp, sp
   15824:	sub	sp, sp, #16
   15828:	str	r0, [sp, #8]
   1582c:	ldr	r0, [sp, #8]
   15830:	ldr	r0, [r0, #32]
   15834:	ldrh	r0, [r0, #14]
   15838:	cmp	r0, #2
   1583c:	bne	15844 <flatcc_builder_end_struct@@Base+0x28>
   15840:	b	15864 <flatcc_builder_end_struct@@Base+0x48>
   15844:	ldr	r0, [pc, #112]	; 158bc <flatcc_builder_end_struct@@Base+0xa0>
   15848:	add	r0, pc, r0
   1584c:	ldr	r1, [pc, #108]	; 158c0 <flatcc_builder_end_struct@@Base+0xa4>
   15850:	add	r1, pc, r1
   15854:	ldr	r2, [pc, #104]	; 158c4 <flatcc_builder_end_struct@@Base+0xa8>
   15858:	add	r3, pc, r2
   1585c:	movw	r2, #872	; 0x368
   15860:	bl	12494 <__assert_fail@plt>
   15864:	ldr	r0, [sp, #8]
   15868:	ldr	r1, [sp, #8]
   1586c:	ldr	r1, [r1, #16]
   15870:	ldr	r2, [sp, #8]
   15874:	ldr	r2, [r2, #20]
   15878:	ldr	r3, [sp, #8]
   1587c:	ldrh	r3, [r3, #130]	; 0x82
   15880:	bl	14fd8 <flatcc_builder_create_struct@@Base>
   15884:	str	r0, [sp, #4]
   15888:	movw	r1, #0
   1588c:	cmp	r1, r0
   15890:	bne	158a0 <flatcc_builder_end_struct@@Base+0x84>
   15894:	movw	r0, #0
   15898:	str	r0, [fp, #-4]
   1589c:	b	158b0 <flatcc_builder_end_struct@@Base+0x94>
   158a0:	ldr	r0, [sp, #8]
   158a4:	bl	155b8 <flatcc_builder_end_buffer@@Base+0x164>
   158a8:	ldr	r0, [sp, #4]
   158ac:	str	r0, [fp, #-4]
   158b0:	ldr	r0, [fp, #-4]
   158b4:	mov	sp, fp
   158b8:	pop	{fp, pc}
   158bc:	andeq	r5, r0, r7, lsr fp
   158c0:	andeq	r5, r0, r4, ror #16
   158c4:	andeq	r5, r0, r3, asr fp

000158c8 <flatcc_builder_extend_vector@@Base>:
   158c8:	push	{fp, lr}
   158cc:	mov	fp, sp
   158d0:	sub	sp, sp, #16
   158d4:	str	r0, [sp, #8]
   158d8:	str	r1, [sp, #4]
   158dc:	ldr	r0, [sp, #8]
   158e0:	ldr	r1, [sp, #4]
   158e4:	ldr	r2, [sp, #8]
   158e8:	ldr	r2, [r2, #32]
   158ec:	ldr	r2, [r2, #24]
   158f0:	bl	15934 <flatcc_builder_extend_vector@@Base+0x6c>
   158f4:	cmp	r0, #0
   158f8:	beq	15908 <flatcc_builder_extend_vector@@Base+0x40>
   158fc:	movw	r0, #0
   15900:	str	r0, [fp, #-4]
   15904:	b	15928 <flatcc_builder_extend_vector@@Base+0x60>
   15908:	ldr	r0, [sp, #8]
   1590c:	ldr	r1, [sp, #8]
   15910:	ldr	r1, [r1, #32]
   15914:	ldr	r1, [r1, #16]
   15918:	ldr	r2, [sp, #4]
   1591c:	mul	r1, r1, r2
   15920:	bl	15770 <flatcc_builder_start_struct@@Base+0xfc>
   15924:	str	r0, [fp, #-4]
   15928:	ldr	r0, [fp, #-4]
   1592c:	mov	sp, fp
   15930:	pop	{fp, pc}
   15934:	push	{fp, lr}
   15938:	mov	fp, sp
   1593c:	sub	sp, sp, #24
   15940:	str	r0, [fp, #-8]
   15944:	str	r1, [sp, #12]
   15948:	str	r2, [sp, #8]
   1594c:	ldr	r0, [fp, #-8]
   15950:	ldr	r0, [r0, #32]
   15954:	ldr	r0, [r0, #20]
   15958:	str	r0, [sp, #4]
   1595c:	ldr	r0, [sp, #4]
   15960:	ldr	r1, [sp, #12]
   15964:	add	r0, r0, r1
   15968:	str	r0, [sp]
   1596c:	ldr	r0, [sp, #4]
   15970:	ldr	r1, [sp]
   15974:	cmp	r0, r1
   15978:	bhi	1598c <flatcc_builder_extend_vector@@Base+0xc4>
   1597c:	ldr	r0, [sp]
   15980:	ldr	r1, [sp, #8]
   15984:	cmp	r0, r1
   15988:	bls	159dc <flatcc_builder_extend_vector@@Base+0x114>
   1598c:	ldr	r0, [sp, #4]
   15990:	ldr	r1, [sp]
   15994:	cmp	r0, r1
   15998:	bhi	159b0 <flatcc_builder_extend_vector@@Base+0xe8>
   1599c:	ldr	r0, [sp]
   159a0:	ldr	r1, [sp, #8]
   159a4:	cmp	r0, r1
   159a8:	bhi	159b0 <flatcc_builder_extend_vector@@Base+0xe8>
   159ac:	b	159d0 <flatcc_builder_extend_vector@@Base+0x108>
   159b0:	ldr	r0, [pc, #72]	; 15a00 <flatcc_builder_extend_vector@@Base+0x138>
   159b4:	add	r0, pc, r0
   159b8:	ldr	r1, [pc, #68]	; 15a04 <flatcc_builder_extend_vector@@Base+0x13c>
   159bc:	add	r1, pc, r1
   159c0:	ldr	r2, [pc, #64]	; 15a08 <flatcc_builder_extend_vector@@Base+0x140>
   159c4:	add	r3, pc, r2
   159c8:	movw	r2, #892	; 0x37c
   159cc:	bl	12494 <__assert_fail@plt>
   159d0:	mvn	r0, #0
   159d4:	str	r0, [fp, #-4]
   159d8:	b	159f4 <flatcc_builder_extend_vector@@Base+0x12c>
   159dc:	ldr	r0, [sp]
   159e0:	ldr	r1, [fp, #-8]
   159e4:	ldr	r1, [r1, #32]
   159e8:	str	r0, [r1, #20]
   159ec:	movw	r0, #0
   159f0:	str	r0, [fp, #-4]
   159f4:	ldr	r0, [fp, #-4]
   159f8:	mov	sp, fp
   159fc:	pop	{fp, pc}
   15a00:	andeq	r6, r0, r6, asr #15
   15a04:	strdeq	r5, [r0], -r8
   15a08:	ldrdeq	r6, [r0], -r1

00015a0c <flatcc_builder_vector_push@@Base>:
   15a0c:	push	{fp, lr}
   15a10:	mov	fp, sp
   15a14:	sub	sp, sp, #16
   15a18:	str	r0, [sp, #8]
   15a1c:	str	r1, [sp, #4]
   15a20:	ldr	r0, [sp, #8]
   15a24:	ldr	r0, [r0, #32]
   15a28:	ldrh	r0, [r0, #14]
   15a2c:	cmp	r0, #4
   15a30:	bne	15a38 <flatcc_builder_vector_push@@Base+0x2c>
   15a34:	b	15a58 <flatcc_builder_vector_push@@Base+0x4c>
   15a38:	ldr	r0, [pc, #196]	; 15b04 <flatcc_builder_vector_push@@Base+0xf8>
   15a3c:	add	r0, pc, r0
   15a40:	ldr	r1, [pc, #192]	; 15b08 <flatcc_builder_vector_push@@Base+0xfc>
   15a44:	add	r1, pc, r1
   15a48:	ldr	r2, [pc, #188]	; 15b0c <flatcc_builder_vector_push@@Base+0x100>
   15a4c:	add	r3, pc, r2
   15a50:	movw	r2, #907	; 0x38b
   15a54:	bl	12494 <__assert_fail@plt>
   15a58:	ldr	r0, [sp, #8]
   15a5c:	ldr	r0, [r0, #32]
   15a60:	ldr	r0, [r0, #20]
   15a64:	ldr	r1, [sp, #8]
   15a68:	ldr	r1, [r1, #32]
   15a6c:	ldr	r1, [r1, #24]
   15a70:	cmp	r0, r1
   15a74:	bls	15ac8 <flatcc_builder_vector_push@@Base+0xbc>
   15a78:	ldr	r0, [sp, #8]
   15a7c:	ldr	r0, [r0, #32]
   15a80:	ldr	r0, [r0, #20]
   15a84:	ldr	r1, [sp, #8]
   15a88:	ldr	r1, [r1, #32]
   15a8c:	ldr	r1, [r1, #24]
   15a90:	cmp	r0, r1
   15a94:	bhi	15a9c <flatcc_builder_vector_push@@Base+0x90>
   15a98:	b	15abc <flatcc_builder_vector_push@@Base+0xb0>
   15a9c:	ldr	r0, [pc, #108]	; 15b10 <flatcc_builder_vector_push@@Base+0x104>
   15aa0:	add	r0, pc, r0
   15aa4:	ldr	r1, [pc, #104]	; 15b14 <flatcc_builder_vector_push@@Base+0x108>
   15aa8:	add	r1, pc, r1
   15aac:	ldr	r2, [pc, #100]	; 15b18 <flatcc_builder_vector_push@@Base+0x10c>
   15ab0:	add	r3, pc, r2
   15ab4:	movw	r2, #908	; 0x38c
   15ab8:	bl	12494 <__assert_fail@plt>
   15abc:	movw	r0, #0
   15ac0:	str	r0, [fp, #-4]
   15ac4:	b	15af8 <flatcc_builder_vector_push@@Base+0xec>
   15ac8:	ldr	r0, [sp, #8]
   15acc:	ldr	r0, [r0, #32]
   15ad0:	ldr	r1, [r0, #20]
   15ad4:	add	r1, r1, #1
   15ad8:	str	r1, [r0, #20]
   15adc:	ldr	r0, [sp, #8]
   15ae0:	ldr	r1, [sp, #4]
   15ae4:	ldr	r2, [sp, #8]
   15ae8:	ldr	r2, [r2, #32]
   15aec:	ldr	r2, [r2, #16]
   15af0:	bl	15b1c <flatcc_builder_vector_push@@Base+0x110>
   15af4:	str	r0, [fp, #-4]
   15af8:	ldr	r0, [fp, #-4]
   15afc:	mov	sp, fp
   15b00:	pop	{fp, pc}
   15b04:			; <UNDEFINED> instruction: 0x000059b2
   15b08:	andeq	r5, r0, r0, ror r6
   15b0c:	andeq	r5, r0, lr, asr #19
   15b10:			; <UNDEFINED> instruction: 0x000059bd
   15b14:	andeq	r5, r0, ip, lsl #12
   15b18:	andeq	r5, r0, sl, ror #18
   15b1c:	push	{fp, lr}
   15b20:	mov	fp, sp
   15b24:	sub	sp, sp, #24
   15b28:	str	r0, [fp, #-8]
   15b2c:	str	r1, [sp, #12]
   15b30:	str	r2, [sp, #8]
   15b34:	ldr	r0, [fp, #-8]
   15b38:	ldr	r1, [sp, #8]
   15b3c:	bl	15770 <flatcc_builder_start_struct@@Base+0xfc>
   15b40:	str	r0, [sp, #4]
   15b44:	movw	r1, #0
   15b48:	cmp	r0, r1
   15b4c:	bne	15b5c <flatcc_builder_vector_push@@Base+0x150>
   15b50:	movw	r0, #0
   15b54:	str	r0, [fp, #-4]
   15b58:	b	15b74 <flatcc_builder_vector_push@@Base+0x168>
   15b5c:	ldr	r0, [sp, #4]
   15b60:	ldr	r1, [sp, #12]
   15b64:	ldr	r2, [sp, #8]
   15b68:	bl	123e0 <memcpy@plt>
   15b6c:	ldr	r0, [sp, #4]
   15b70:	str	r0, [fp, #-4]
   15b74:	ldr	r0, [fp, #-4]
   15b78:	mov	sp, fp
   15b7c:	pop	{fp, pc}

00015b80 <flatcc_builder_append_vector@@Base>:
   15b80:	push	{fp, lr}
   15b84:	mov	fp, sp
   15b88:	sub	sp, sp, #16
   15b8c:	str	r0, [sp, #8]
   15b90:	str	r1, [sp, #4]
   15b94:	str	r2, [sp]
   15b98:	ldr	r0, [sp, #8]
   15b9c:	ldr	r0, [r0, #32]
   15ba0:	ldrh	r0, [r0, #14]
   15ba4:	cmp	r0, #4
   15ba8:	bne	15bb0 <flatcc_builder_append_vector@@Base+0x30>
   15bac:	b	15bd0 <flatcc_builder_append_vector@@Base+0x50>
   15bb0:	ldr	r0, [pc, #116]	; 15c2c <flatcc_builder_append_vector@@Base+0xac>
   15bb4:	add	r0, pc, r0
   15bb8:	ldr	r1, [pc, #112]	; 15c30 <flatcc_builder_append_vector@@Base+0xb0>
   15bbc:	add	r1, pc, r1
   15bc0:	ldr	r2, [pc, #108]	; 15c34 <flatcc_builder_append_vector@@Base+0xb4>
   15bc4:	add	r3, pc, r2
   15bc8:	movw	r2, #915	; 0x393
   15bcc:	bl	12494 <__assert_fail@plt>
   15bd0:	ldr	r0, [sp, #8]
   15bd4:	ldr	r1, [sp]
   15bd8:	ldr	r2, [sp, #8]
   15bdc:	ldr	r2, [r2, #32]
   15be0:	ldr	r2, [r2, #24]
   15be4:	bl	15934 <flatcc_builder_extend_vector@@Base+0x6c>
   15be8:	cmp	r0, #0
   15bec:	beq	15bfc <flatcc_builder_append_vector@@Base+0x7c>
   15bf0:	movw	r0, #0
   15bf4:	str	r0, [fp, #-4]
   15bf8:	b	15c20 <flatcc_builder_append_vector@@Base+0xa0>
   15bfc:	ldr	r0, [sp, #8]
   15c00:	ldr	r1, [sp, #4]
   15c04:	ldr	r2, [sp, #8]
   15c08:	ldr	r2, [r2, #32]
   15c0c:	ldr	r2, [r2, #16]
   15c10:	ldr	r3, [sp]
   15c14:	mul	r2, r2, r3
   15c18:	bl	15b1c <flatcc_builder_vector_push@@Base+0x110>
   15c1c:	str	r0, [fp, #-4]
   15c20:	ldr	r0, [fp, #-4]
   15c24:	mov	sp, fp
   15c28:	pop	{fp, pc}
   15c2c:	andeq	r5, r0, sl, lsr r8
   15c30:	strdeq	r5, [r0], -r8
   15c34:	ldrdeq	r5, [r0], -r6

00015c38 <flatcc_builder_extend_offset_vector@@Base>:
   15c38:	push	{fp, lr}
   15c3c:	mov	fp, sp
   15c40:	sub	sp, sp, #16
   15c44:	ldr	r2, [pc, #68]	; 15c90 <flatcc_builder_extend_offset_vector@@Base+0x58>
   15c48:	str	r0, [sp, #8]
   15c4c:	str	r1, [sp, #4]
   15c50:	ldr	r0, [sp, #8]
   15c54:	ldr	r1, [sp, #4]
   15c58:	bl	15934 <flatcc_builder_extend_vector@@Base+0x6c>
   15c5c:	cmp	r0, #0
   15c60:	beq	15c70 <flatcc_builder_extend_offset_vector@@Base+0x38>
   15c64:	movw	r0, #0
   15c68:	str	r0, [fp, #-4]
   15c6c:	b	15c84 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   15c70:	ldr	r0, [sp, #8]
   15c74:	ldr	r1, [sp, #4]
   15c78:	lsl	r1, r1, #2
   15c7c:	bl	15770 <flatcc_builder_start_struct@@Base+0xfc>
   15c80:	str	r0, [fp, #-4]
   15c84:	ldr	r0, [fp, #-4]
   15c88:	mov	sp, fp
   15c8c:	pop	{fp, pc}
   15c90:	svccc	0x00ffffff

00015c94 <flatcc_builder_offset_vector_push@@Base>:
   15c94:	push	{fp, lr}
   15c98:	mov	fp, sp
   15c9c:	sub	sp, sp, #16
   15ca0:	str	r0, [sp, #8]
   15ca4:	str	r1, [sp, #4]
   15ca8:	ldr	r0, [sp, #8]
   15cac:	ldr	r0, [r0, #32]
   15cb0:	ldrh	r0, [r0, #14]
   15cb4:	cmp	r0, #5
   15cb8:	bne	15cc0 <flatcc_builder_offset_vector_push@@Base+0x2c>
   15cbc:	b	15ce0 <flatcc_builder_offset_vector_push@@Base+0x4c>
   15cc0:	ldr	r0, [pc, #152]	; 15d60 <flatcc_builder_offset_vector_push@@Base+0xcc>
   15cc4:	add	r0, pc, r0
   15cc8:	ldr	r1, [pc, #148]	; 15d64 <flatcc_builder_offset_vector_push@@Base+0xd0>
   15ccc:	add	r1, pc, r1
   15cd0:	ldr	r2, [pc, #144]	; 15d68 <flatcc_builder_offset_vector_push@@Base+0xd4>
   15cd4:	add	r3, pc, r2
   15cd8:	movw	r2, #934	; 0x3a6
   15cdc:	bl	12494 <__assert_fail@plt>
   15ce0:	ldr	r0, [pc, #132]	; 15d6c <flatcc_builder_offset_vector_push@@Base+0xd8>
   15ce4:	ldr	r1, [sp, #8]
   15ce8:	ldr	r1, [r1, #32]
   15cec:	ldr	r1, [r1, #20]
   15cf0:	cmp	r1, r0
   15cf4:	bne	15d04 <flatcc_builder_offset_vector_push@@Base+0x70>
   15cf8:	movw	r0, #0
   15cfc:	str	r0, [fp, #-4]
   15d00:	b	15d54 <flatcc_builder_offset_vector_push@@Base+0xc0>
   15d04:	ldr	r0, [sp, #8]
   15d08:	ldr	r0, [r0, #32]
   15d0c:	ldr	r1, [r0, #20]
   15d10:	add	r1, r1, #1
   15d14:	str	r1, [r0, #20]
   15d18:	ldr	r0, [sp, #8]
   15d1c:	movw	r1, #4
   15d20:	bl	15770 <flatcc_builder_start_struct@@Base+0xfc>
   15d24:	str	r0, [sp]
   15d28:	movw	r1, #0
   15d2c:	cmp	r1, r0
   15d30:	bne	15d40 <flatcc_builder_offset_vector_push@@Base+0xac>
   15d34:	movw	r0, #0
   15d38:	str	r0, [fp, #-4]
   15d3c:	b	15d54 <flatcc_builder_offset_vector_push@@Base+0xc0>
   15d40:	ldr	r0, [sp, #4]
   15d44:	ldr	r1, [sp]
   15d48:	str	r0, [r1]
   15d4c:	ldr	r0, [sp]
   15d50:	str	r0, [fp, #-4]
   15d54:	ldr	r0, [fp, #-4]
   15d58:	mov	sp, fp
   15d5c:	pop	{fp, pc}
   15d60:	andeq	r5, r0, r3, lsr #16
   15d64:	andeq	r5, r0, r8, ror #7
   15d68:	andeq	r5, r0, r6, asr #16
   15d6c:	svccc	0x00ffffff

00015d70 <flatcc_builder_append_offset_vector@@Base>:
   15d70:	push	{fp, lr}
   15d74:	mov	fp, sp
   15d78:	sub	sp, sp, #16
   15d7c:	str	r0, [sp, #8]
   15d80:	str	r1, [sp, #4]
   15d84:	str	r2, [sp]
   15d88:	ldr	r0, [sp, #8]
   15d8c:	ldr	r0, [r0, #32]
   15d90:	ldrh	r0, [r0, #14]
   15d94:	cmp	r0, #5
   15d98:	bne	15da0 <flatcc_builder_append_offset_vector@@Base+0x30>
   15d9c:	b	15dc0 <flatcc_builder_append_offset_vector@@Base+0x50>
   15da0:	ldr	r0, [pc, #96]	; 15e08 <flatcc_builder_append_offset_vector@@Base+0x98>
   15da4:	add	r0, pc, r0
   15da8:	ldr	r1, [pc, #92]	; 15e0c <flatcc_builder_append_offset_vector@@Base+0x9c>
   15dac:	add	r1, pc, r1
   15db0:	ldr	r2, [pc, #88]	; 15e10 <flatcc_builder_append_offset_vector@@Base+0xa0>
   15db4:	add	r3, pc, r2
   15db8:	movw	r2, #948	; 0x3b4
   15dbc:	bl	12494 <__assert_fail@plt>
   15dc0:	ldr	r2, [pc, #76]	; 15e14 <flatcc_builder_append_offset_vector@@Base+0xa4>
   15dc4:	ldr	r0, [sp, #8]
   15dc8:	ldr	r1, [sp]
   15dcc:	bl	15934 <flatcc_builder_extend_vector@@Base+0x6c>
   15dd0:	cmp	r0, #0
   15dd4:	beq	15de4 <flatcc_builder_append_offset_vector@@Base+0x74>
   15dd8:	movw	r0, #0
   15ddc:	str	r0, [fp, #-4]
   15de0:	b	15dfc <flatcc_builder_append_offset_vector@@Base+0x8c>
   15de4:	ldr	r0, [sp, #8]
   15de8:	ldr	r1, [sp, #4]
   15dec:	ldr	r2, [sp]
   15df0:	lsl	r2, r2, #2
   15df4:	bl	15b1c <flatcc_builder_vector_push@@Base+0x110>
   15df8:	str	r0, [fp, #-4]
   15dfc:	ldr	r0, [fp, #-4]
   15e00:	mov	sp, fp
   15e04:	pop	{fp, pc}
   15e08:	andeq	r5, r0, r3, asr #14
   15e0c:	andeq	r5, r0, r8, lsl #6
   15e10:	andeq	r5, r0, r8, asr #15
   15e14:	svccc	0x00ffffff

00015e18 <flatcc_builder_extend_string@@Base>:
   15e18:	push	{fp, lr}
   15e1c:	mov	fp, sp
   15e20:	sub	sp, sp, #16
   15e24:	str	r0, [sp, #8]
   15e28:	str	r1, [sp, #4]
   15e2c:	ldr	r0, [sp, #8]
   15e30:	ldr	r0, [r0, #32]
   15e34:	ldrh	r0, [r0, #14]
   15e38:	cmp	r0, #6
   15e3c:	bne	15e44 <flatcc_builder_extend_string@@Base+0x2c>
   15e40:	b	15e64 <flatcc_builder_extend_string@@Base+0x4c>
   15e44:	ldr	r0, [pc, #88]	; 15ea4 <flatcc_builder_extend_string@@Base+0x8c>
   15e48:	add	r0, pc, r0
   15e4c:	ldr	r1, [pc, #84]	; 15ea8 <flatcc_builder_extend_string@@Base+0x90>
   15e50:	add	r1, pc, r1
   15e54:	ldr	r2, [pc, #80]	; 15eac <flatcc_builder_extend_string@@Base+0x94>
   15e58:	add	r3, pc, r2
   15e5c:	movw	r2, #957	; 0x3bd
   15e60:	bl	12494 <__assert_fail@plt>
   15e64:	ldr	r0, [sp, #8]
   15e68:	ldr	r1, [sp, #4]
   15e6c:	mvn	r2, #0
   15e70:	bl	15934 <flatcc_builder_extend_vector@@Base+0x6c>
   15e74:	cmp	r0, #0
   15e78:	beq	15e88 <flatcc_builder_extend_string@@Base+0x70>
   15e7c:	movw	r0, #0
   15e80:	str	r0, [fp, #-4]
   15e84:	b	15e98 <flatcc_builder_extend_string@@Base+0x80>
   15e88:	ldr	r0, [sp, #8]
   15e8c:	ldr	r1, [sp, #4]
   15e90:	bl	15770 <flatcc_builder_start_struct@@Base+0xfc>
   15e94:	str	r0, [fp, #-4]
   15e98:	ldr	r0, [fp, #-4]
   15e9c:	mov	sp, fp
   15ea0:	pop	{fp, pc}
   15ea4:	andeq	r5, r0, r8, lsr #15
   15ea8:	andeq	r5, r0, r4, ror #4
   15eac:	andeq	r5, r0, r4, asr #15

00015eb0 <flatcc_builder_append_string@@Base>:
   15eb0:	push	{fp, lr}
   15eb4:	mov	fp, sp
   15eb8:	sub	sp, sp, #16
   15ebc:	str	r0, [sp, #8]
   15ec0:	str	r1, [sp, #4]
   15ec4:	str	r2, [sp]
   15ec8:	ldr	r0, [sp, #8]
   15ecc:	ldr	r0, [r0, #32]
   15ed0:	ldrh	r0, [r0, #14]
   15ed4:	cmp	r0, #6
   15ed8:	bne	15ee0 <flatcc_builder_append_string@@Base+0x30>
   15edc:	b	15f00 <flatcc_builder_append_string@@Base+0x50>
   15ee0:	ldr	r0, [pc, #92]	; 15f44 <flatcc_builder_append_string@@Base+0x94>
   15ee4:	add	r0, pc, r0
   15ee8:	ldr	r1, [pc, #88]	; 15f48 <flatcc_builder_append_string@@Base+0x98>
   15eec:	add	r1, pc, r1
   15ef0:	ldr	r2, [pc, #84]	; 15f4c <flatcc_builder_append_string@@Base+0x9c>
   15ef4:	add	r3, pc, r2
   15ef8:	movw	r2, #966	; 0x3c6
   15efc:	bl	12494 <__assert_fail@plt>
   15f00:	ldr	r0, [sp, #8]
   15f04:	ldr	r1, [sp]
   15f08:	mvn	r2, #0
   15f0c:	bl	15934 <flatcc_builder_extend_vector@@Base+0x6c>
   15f10:	cmp	r0, #0
   15f14:	beq	15f24 <flatcc_builder_append_string@@Base+0x74>
   15f18:	movw	r0, #0
   15f1c:	str	r0, [fp, #-4]
   15f20:	b	15f38 <flatcc_builder_append_string@@Base+0x88>
   15f24:	ldr	r0, [sp, #8]
   15f28:	ldr	r1, [sp, #4]
   15f2c:	ldr	r2, [sp]
   15f30:	bl	15b1c <flatcc_builder_vector_push@@Base+0x110>
   15f34:	str	r0, [fp, #-4]
   15f38:	ldr	r0, [fp, #-4]
   15f3c:	mov	sp, fp
   15f40:	pop	{fp, pc}
   15f44:	andeq	r5, r0, ip, lsl #14
   15f48:	andeq	r5, r0, r8, asr #3
   15f4c:	andeq	r5, r0, r7, ror #14

00015f50 <flatcc_builder_append_string_str@@Base>:
   15f50:	push	{fp, lr}
   15f54:	mov	fp, sp
   15f58:	sub	sp, sp, #24
   15f5c:	str	r0, [fp, #-4]
   15f60:	str	r1, [fp, #-8]
   15f64:	ldr	r0, [fp, #-4]
   15f68:	ldr	r1, [fp, #-8]
   15f6c:	ldr	r2, [fp, #-8]
   15f70:	str	r0, [sp, #12]
   15f74:	mov	r0, r2
   15f78:	str	r1, [sp, #8]
   15f7c:	bl	12440 <strlen@plt>
   15f80:	ldr	r1, [sp, #12]
   15f84:	str	r0, [sp, #4]
   15f88:	mov	r0, r1
   15f8c:	ldr	r1, [sp, #8]
   15f90:	ldr	r2, [sp, #4]
   15f94:	bl	15eb0 <flatcc_builder_append_string@@Base>
   15f98:	mov	sp, fp
   15f9c:	pop	{fp, pc}

00015fa0 <flatcc_builder_append_string_strn@@Base>:
   15fa0:	push	{fp, lr}
   15fa4:	mov	fp, sp
   15fa8:	sub	sp, sp, #24
   15fac:	str	r0, [fp, #-4]
   15fb0:	str	r1, [fp, #-8]
   15fb4:	str	r2, [sp, #12]
   15fb8:	ldr	r0, [fp, #-4]
   15fbc:	ldr	r1, [fp, #-8]
   15fc0:	ldr	r2, [fp, #-8]
   15fc4:	ldr	r3, [sp, #12]
   15fc8:	str	r0, [sp, #8]
   15fcc:	mov	r0, r2
   15fd0:	str	r1, [sp, #4]
   15fd4:	mov	r1, r3
   15fd8:	bl	15ffc <flatcc_builder_append_string_strn@@Base+0x5c>
   15fdc:	ldr	r1, [sp, #8]
   15fe0:	str	r0, [sp]
   15fe4:	mov	r0, r1
   15fe8:	ldr	r1, [sp, #4]
   15fec:	ldr	r2, [sp]
   15ff0:	bl	15eb0 <flatcc_builder_append_string@@Base>
   15ff4:	mov	sp, fp
   15ff8:	pop	{fp, pc}
   15ffc:	push	{fp, lr}
   16000:	mov	fp, sp
   16004:	sub	sp, sp, #16
   16008:	str	r0, [fp, #-4]
   1600c:	str	r1, [sp, #8]
   16010:	ldr	r0, [fp, #-4]
   16014:	ldr	r2, [sp, #8]
   16018:	mov	r1, #0
   1601c:	bl	12470 <memchr@plt>
   16020:	str	r0, [sp, #4]
   16024:	ldr	r0, [sp, #4]
   16028:	movw	r1, #0
   1602c:	cmp	r0, r1
   16030:	beq	16048 <flatcc_builder_append_string_strn@@Base+0xa8>
   16034:	ldr	r0, [sp, #4]
   16038:	ldr	r1, [fp, #-4]
   1603c:	sub	r0, r0, r1
   16040:	str	r0, [sp]
   16044:	b	16050 <flatcc_builder_append_string_strn@@Base+0xb0>
   16048:	ldr	r0, [sp, #8]
   1604c:	str	r0, [sp]
   16050:	ldr	r0, [sp]
   16054:	mov	sp, fp
   16058:	pop	{fp, pc}

0001605c <flatcc_builder_truncate_vector@@Base>:
   1605c:	push	{fp, lr}
   16060:	mov	fp, sp
   16064:	sub	sp, sp, #16
   16068:	str	r0, [sp, #8]
   1606c:	str	r1, [sp, #4]
   16070:	ldr	r0, [sp, #8]
   16074:	ldr	r0, [r0, #32]
   16078:	ldrh	r0, [r0, #14]
   1607c:	cmp	r0, #4
   16080:	bne	16088 <flatcc_builder_truncate_vector@@Base+0x2c>
   16084:	b	160a8 <flatcc_builder_truncate_vector@@Base+0x4c>
   16088:	ldr	r0, [pc, #192]	; 16150 <flatcc_builder_truncate_vector@@Base+0xf4>
   1608c:	add	r0, pc, r0
   16090:	ldr	r1, [pc, #188]	; 16154 <flatcc_builder_truncate_vector@@Base+0xf8>
   16094:	add	r1, pc, r1
   16098:	ldr	r2, [pc, #184]	; 16158 <flatcc_builder_truncate_vector@@Base+0xfc>
   1609c:	add	r3, pc, r2
   160a0:	movw	r2, #985	; 0x3d9
   160a4:	bl	12494 <__assert_fail@plt>
   160a8:	ldr	r0, [sp, #8]
   160ac:	ldr	r0, [r0, #32]
   160b0:	ldr	r0, [r0, #20]
   160b4:	ldr	r1, [sp, #4]
   160b8:	cmp	r0, r1
   160bc:	bcs	16108 <flatcc_builder_truncate_vector@@Base+0xac>
   160c0:	ldr	r0, [sp, #8]
   160c4:	ldr	r0, [r0, #32]
   160c8:	ldr	r0, [r0, #20]
   160cc:	ldr	r1, [sp, #4]
   160d0:	cmp	r0, r1
   160d4:	bcc	160dc <flatcc_builder_truncate_vector@@Base+0x80>
   160d8:	b	160fc <flatcc_builder_truncate_vector@@Base+0xa0>
   160dc:	ldr	r0, [pc, #120]	; 1615c <flatcc_builder_truncate_vector@@Base+0x100>
   160e0:	add	r0, pc, r0
   160e4:	ldr	r1, [pc, #116]	; 16160 <flatcc_builder_truncate_vector@@Base+0x104>
   160e8:	add	r1, pc, r1
   160ec:	ldr	r2, [pc, #112]	; 16164 <flatcc_builder_truncate_vector@@Base+0x108>
   160f0:	add	r3, pc, r2
   160f4:	movw	r2, #986	; 0x3da
   160f8:	bl	12494 <__assert_fail@plt>
   160fc:	mvn	r0, #0
   16100:	str	r0, [fp, #-4]
   16104:	b	16144 <flatcc_builder_truncate_vector@@Base+0xe8>
   16108:	ldr	r0, [sp, #4]
   1610c:	ldr	r1, [sp, #8]
   16110:	ldr	r1, [r1, #32]
   16114:	ldr	r2, [r1, #20]
   16118:	sub	r0, r2, r0
   1611c:	str	r0, [r1, #20]
   16120:	ldr	r0, [sp, #8]
   16124:	ldr	r1, [sp, #8]
   16128:	ldr	r1, [r1, #32]
   1612c:	ldr	r1, [r1, #16]
   16130:	ldr	r2, [sp, #4]
   16134:	mul	r1, r1, r2
   16138:	bl	16168 <flatcc_builder_truncate_vector@@Base+0x10c>
   1613c:	movw	r0, #0
   16140:	str	r0, [fp, #-4]
   16144:	ldr	r0, [fp, #-4]
   16148:	mov	sp, fp
   1614c:	pop	{fp, pc}
   16150:	andeq	r5, r0, r2, ror #6
   16154:	andeq	r5, r0, r0, lsr #32
   16158:	andeq	r5, r0, ip, lsl #12
   1615c:	andeq	r5, r0, r7, lsl #12
   16160:	andeq	r4, r0, ip, asr #31
   16164:			; <UNDEFINED> instruction: 0x000055b8
   16168:	push	{fp, lr}
   1616c:	mov	fp, sp
   16170:	sub	sp, sp, #8
   16174:	str	r0, [sp, #4]
   16178:	str	r1, [sp]
   1617c:	ldr	r0, [sp]
   16180:	ldr	r1, [sp, #4]
   16184:	ldr	r2, [r1, #20]
   16188:	sub	r0, r2, r0
   1618c:	str	r0, [r1, #20]
   16190:	ldr	r0, [sp, #4]
   16194:	ldr	r0, [r0, #16]
   16198:	ldr	r1, [sp, #4]
   1619c:	ldr	r1, [r1, #20]
   161a0:	add	r0, r0, r1
   161a4:	ldr	r2, [sp]
   161a8:	movw	r1, #0
   161ac:	and	r1, r1, #255	; 0xff
   161b0:	bl	12458 <memset@plt>
   161b4:	mov	sp, fp
   161b8:	pop	{fp, pc}

000161bc <flatcc_builder_truncate_offset_vector@@Base>:
   161bc:	push	{fp, lr}
   161c0:	mov	fp, sp
   161c4:	sub	sp, sp, #16
   161c8:	str	r0, [sp, #8]
   161cc:	str	r1, [sp, #4]
   161d0:	ldr	r0, [sp, #8]
   161d4:	ldr	r0, [r0, #32]
   161d8:	ldrh	r0, [r0, #14]
   161dc:	cmp	r0, #5
   161e0:	bne	161e8 <flatcc_builder_truncate_offset_vector@@Base+0x2c>
   161e4:	b	16208 <flatcc_builder_truncate_offset_vector@@Base+0x4c>
   161e8:	ldr	r0, [pc, #192]	; 162b0 <flatcc_builder_truncate_offset_vector@@Base+0xf4>
   161ec:	add	r0, pc, r0
   161f0:	ldr	r1, [pc, #188]	; 162b4 <flatcc_builder_truncate_offset_vector@@Base+0xf8>
   161f4:	add	r1, pc, r1
   161f8:	ldr	r2, [pc, #184]	; 162b8 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   161fc:	add	r3, pc, r2
   16200:	movw	r2, #994	; 0x3e2
   16204:	bl	12494 <__assert_fail@plt>
   16208:	ldr	r0, [sp, #8]
   1620c:	ldr	r0, [r0, #32]
   16210:	ldr	r0, [r0, #20]
   16214:	ldr	r1, [sp, #4]
   16218:	cmp	r0, r1
   1621c:	bcs	16268 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   16220:	ldr	r0, [sp, #8]
   16224:	ldr	r0, [r0, #32]
   16228:	ldr	r0, [r0, #20]
   1622c:	ldr	r1, [sp, #4]
   16230:	cmp	r0, r1
   16234:	bcc	1623c <flatcc_builder_truncate_offset_vector@@Base+0x80>
   16238:	b	1625c <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   1623c:	ldr	r0, [pc, #120]	; 162bc <flatcc_builder_truncate_offset_vector@@Base+0x100>
   16240:	add	r0, pc, r0
   16244:	ldr	r1, [pc, #116]	; 162c0 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   16248:	add	r1, pc, r1
   1624c:	ldr	r2, [pc, #112]	; 162c4 <flatcc_builder_truncate_offset_vector@@Base+0x108>
   16250:	add	r3, pc, r2
   16254:	movw	r2, #995	; 0x3e3
   16258:	bl	12494 <__assert_fail@plt>
   1625c:	mvn	r0, #0
   16260:	str	r0, [fp, #-4]
   16264:	b	162a4 <flatcc_builder_truncate_offset_vector@@Base+0xe8>
   16268:	ldr	r0, [sp, #4]
   1626c:	ldr	r1, [sp, #8]
   16270:	ldr	r1, [r1, #32]
   16274:	ldr	r2, [r1, #20]
   16278:	sub	r0, r2, r0
   1627c:	str	r0, [r1, #20]
   16280:	ldr	r0, [sp, #8]
   16284:	ldr	r1, [sp, #8]
   16288:	ldr	r1, [r1, #32]
   1628c:	ldr	r1, [r1, #16]
   16290:	ldr	r2, [sp, #4]
   16294:	mul	r1, r1, r2
   16298:	bl	16168 <flatcc_builder_truncate_vector@@Base+0x10c>
   1629c:	movw	r0, #0
   162a0:	str	r0, [fp, #-4]
   162a4:	ldr	r0, [fp, #-4]
   162a8:	mov	sp, fp
   162ac:	pop	{fp, pc}
   162b0:	strdeq	r5, [r0], -fp
   162b4:	andeq	r4, r0, r0, asr #29
   162b8:	andeq	r5, r0, pc, lsl #10
   162bc:	andeq	r5, r0, r1, lsl r5
   162c0:	andeq	r4, r0, ip, ror #28
   162c4:			; <UNDEFINED> instruction: 0x000054bb

000162c8 <flatcc_builder_truncate_string@@Base>:
   162c8:	push	{fp, lr}
   162cc:	mov	fp, sp
   162d0:	sub	sp, sp, #16
   162d4:	str	r0, [sp, #8]
   162d8:	str	r1, [sp, #4]
   162dc:	ldr	r0, [sp, #8]
   162e0:	ldr	r0, [r0, #32]
   162e4:	ldrh	r0, [r0, #14]
   162e8:	cmp	r0, #6
   162ec:	bne	162f4 <flatcc_builder_truncate_string@@Base+0x2c>
   162f0:	b	16314 <flatcc_builder_truncate_string@@Base+0x4c>
   162f4:	ldr	r0, [pc, #176]	; 163ac <flatcc_builder_truncate_string@@Base+0xe4>
   162f8:	add	r0, pc, r0
   162fc:	ldr	r1, [pc, #172]	; 163b0 <flatcc_builder_truncate_string@@Base+0xe8>
   16300:	add	r1, pc, r1
   16304:	ldr	r2, [pc, #168]	; 163b4 <flatcc_builder_truncate_string@@Base+0xec>
   16308:	add	r3, pc, r2
   1630c:	movw	r2, #1003	; 0x3eb
   16310:	bl	12494 <__assert_fail@plt>
   16314:	ldr	r0, [sp, #8]
   16318:	ldr	r0, [r0, #32]
   1631c:	ldr	r0, [r0, #20]
   16320:	ldr	r1, [sp, #4]
   16324:	cmp	r0, r1
   16328:	bcs	16374 <flatcc_builder_truncate_string@@Base+0xac>
   1632c:	ldr	r0, [sp, #8]
   16330:	ldr	r0, [r0, #32]
   16334:	ldr	r0, [r0, #20]
   16338:	ldr	r1, [sp, #4]
   1633c:	cmp	r0, r1
   16340:	bcc	16348 <flatcc_builder_truncate_string@@Base+0x80>
   16344:	b	16368 <flatcc_builder_truncate_string@@Base+0xa0>
   16348:	ldr	r0, [pc, #104]	; 163b8 <flatcc_builder_truncate_string@@Base+0xf0>
   1634c:	add	r0, pc, r0
   16350:	ldr	r1, [pc, #100]	; 163bc <flatcc_builder_truncate_string@@Base+0xf4>
   16354:	add	r1, pc, r1
   16358:	ldr	r2, [pc, #96]	; 163c0 <flatcc_builder_truncate_string@@Base+0xf8>
   1635c:	add	r3, pc, r2
   16360:	movw	r2, #1004	; 0x3ec
   16364:	bl	12494 <__assert_fail@plt>
   16368:	mvn	r0, #0
   1636c:	str	r0, [fp, #-4]
   16370:	b	163a0 <flatcc_builder_truncate_string@@Base+0xd8>
   16374:	ldr	r0, [sp, #4]
   16378:	ldr	r1, [sp, #8]
   1637c:	ldr	r1, [r1, #32]
   16380:	ldr	r2, [r1, #20]
   16384:	sub	r0, r2, r0
   16388:	str	r0, [r1, #20]
   1638c:	ldr	r0, [sp, #8]
   16390:	ldr	r1, [sp, #4]
   16394:	bl	16168 <flatcc_builder_truncate_vector@@Base+0x10c>
   16398:	movw	r0, #0
   1639c:	str	r0, [fp, #-4]
   163a0:	ldr	r0, [fp, #-4]
   163a4:	mov	sp, fp
   163a8:	pop	{fp, pc}
   163ac:	strdeq	r5, [r0], -r8
   163b0:			; <UNDEFINED> instruction: 0x00004db4
   163b4:	andeq	r5, r0, r4, lsl #9
   163b8:	andeq	r5, r0, pc, ror r4
   163bc:	andeq	r4, r0, r0, ror #26
   163c0:	andeq	r5, r0, r0, lsr r4

000163c4 <flatcc_builder_start_vector@@Base>:
   163c4:	push	{fp, lr}
   163c8:	mov	fp, sp
   163cc:	sub	sp, sp, #24
   163d0:	str	r0, [fp, #-8]
   163d4:	str	r1, [sp, #12]
   163d8:	strh	r2, [sp, #10]
   163dc:	str	r3, [sp, #4]
   163e0:	add	r0, sp, #10
   163e4:	movw	r1, #4
   163e8:	uxth	r1, r1
   163ec:	bl	16470 <flatcc_builder_start_vector@@Base+0xac>
   163f0:	ldr	r0, [fp, #-8]
   163f4:	ldrh	r1, [sp, #10]
   163f8:	bl	15288 <flatcc_builder_start_buffer@@Base+0x178>
   163fc:	cmp	r0, #0
   16400:	beq	16410 <flatcc_builder_start_vector@@Base+0x4c>
   16404:	mvn	r0, #0
   16408:	str	r0, [fp, #-4]
   1640c:	b	16464 <flatcc_builder_start_vector@@Base+0xa0>
   16410:	ldr	r0, [sp, #12]
   16414:	ldr	r1, [fp, #-8]
   16418:	ldr	r1, [r1, #32]
   1641c:	str	r0, [r1, #16]
   16420:	ldr	r0, [fp, #-8]
   16424:	ldr	r0, [r0, #32]
   16428:	movw	r1, #0
   1642c:	str	r1, [r0, #20]
   16430:	ldr	r0, [sp, #4]
   16434:	ldr	r1, [fp, #-8]
   16438:	ldr	r1, [r1, #32]
   1643c:	str	r0, [r1, #24]
   16440:	ldr	r0, [fp, #-8]
   16444:	ldr	r0, [r0, #32]
   16448:	movw	r1, #4
   1644c:	strh	r1, [r0, #14]
   16450:	ldr	r0, [fp, #-8]
   16454:	mvn	r1, #3
   16458:	bl	156e4 <flatcc_builder_start_struct@@Base+0x70>
   1645c:	movw	r0, #0
   16460:	str	r0, [fp, #-4]
   16464:	ldr	r0, [fp, #-4]
   16468:	mov	sp, fp
   1646c:	pop	{fp, pc}
   16470:	sub	sp, sp, #8
   16474:	str	r0, [sp, #4]
   16478:	strh	r1, [sp, #2]
   1647c:	ldr	r0, [sp, #4]
   16480:	ldrh	r0, [r0]
   16484:	ldrh	r1, [sp, #2]
   16488:	cmp	r0, r1
   1648c:	bge	1649c <flatcc_builder_start_vector@@Base+0xd8>
   16490:	ldrh	r0, [sp, #2]
   16494:	ldr	r1, [sp, #4]
   16498:	strh	r0, [r1]
   1649c:	add	sp, sp, #8
   164a0:	bx	lr

000164a4 <flatcc_builder_start_offset_vector@@Base>:
   164a4:	push	{fp, lr}
   164a8:	mov	fp, sp
   164ac:	sub	sp, sp, #8
   164b0:	str	r0, [sp]
   164b4:	ldr	r0, [sp]
   164b8:	movw	r1, #4
   164bc:	uxth	r1, r1
   164c0:	bl	15288 <flatcc_builder_start_buffer@@Base+0x178>
   164c4:	cmp	r0, #0
   164c8:	beq	164d8 <flatcc_builder_start_offset_vector@@Base+0x34>
   164cc:	mvn	r0, #0
   164d0:	str	r0, [sp, #4]
   164d4:	b	1651c <flatcc_builder_start_offset_vector@@Base+0x78>
   164d8:	ldr	r0, [sp]
   164dc:	ldr	r0, [r0, #32]
   164e0:	movw	r1, #4
   164e4:	str	r1, [r0, #16]
   164e8:	ldr	r0, [sp]
   164ec:	ldr	r0, [r0, #32]
   164f0:	movw	r1, #0
   164f4:	str	r1, [r0, #20]
   164f8:	ldr	r0, [sp]
   164fc:	ldr	r0, [r0, #32]
   16500:	movw	r1, #5
   16504:	strh	r1, [r0, #14]
   16508:	ldr	r0, [sp]
   1650c:	mvn	r1, #3
   16510:	bl	156e4 <flatcc_builder_start_struct@@Base+0x70>
   16514:	movw	r0, #0
   16518:	str	r0, [sp, #4]
   1651c:	ldr	r0, [sp, #4]
   16520:	mov	sp, fp
   16524:	pop	{fp, pc}

00016528 <flatcc_builder_create_offset_vector@@Base>:
   16528:	push	{fp, lr}
   1652c:	mov	fp, sp
   16530:	sub	sp, sp, #24
   16534:	str	r0, [fp, #-8]
   16538:	str	r1, [sp, #12]
   1653c:	str	r2, [sp, #8]
   16540:	ldr	r0, [fp, #-8]
   16544:	bl	164a4 <flatcc_builder_start_offset_vector@@Base>
   16548:	cmp	r0, #0
   1654c:	beq	1655c <flatcc_builder_create_offset_vector@@Base+0x34>
   16550:	movw	r0, #0
   16554:	str	r0, [fp, #-4]
   16558:	b	165a4 <flatcc_builder_create_offset_vector@@Base+0x7c>
   1655c:	ldr	r0, [fp, #-8]
   16560:	ldr	r1, [sp, #8]
   16564:	bl	15c38 <flatcc_builder_extend_offset_vector@@Base>
   16568:	str	r0, [sp, #4]
   1656c:	movw	r1, #0
   16570:	cmp	r0, r1
   16574:	bne	16584 <flatcc_builder_create_offset_vector@@Base+0x5c>
   16578:	movw	r0, #0
   1657c:	str	r0, [fp, #-4]
   16580:	b	165a4 <flatcc_builder_create_offset_vector@@Base+0x7c>
   16584:	ldr	r0, [sp, #4]
   16588:	ldr	r1, [sp, #12]
   1658c:	ldr	r2, [sp, #8]
   16590:	lsl	r2, r2, #2
   16594:	bl	123e0 <memcpy@plt>
   16598:	ldr	r0, [fp, #-8]
   1659c:	bl	165b0 <flatcc_builder_end_offset_vector@@Base>
   165a0:	str	r0, [fp, #-4]
   165a4:	ldr	r0, [fp, #-4]
   165a8:	mov	sp, fp
   165ac:	pop	{fp, pc}

000165b0 <flatcc_builder_end_offset_vector@@Base>:
   165b0:	push	{fp, lr}
   165b4:	mov	fp, sp
   165b8:	sub	sp, sp, #16
   165bc:	str	r0, [sp, #8]
   165c0:	ldr	r0, [sp, #8]
   165c4:	ldr	r0, [r0, #32]
   165c8:	ldrh	r0, [r0, #14]
   165cc:	cmp	r0, #5
   165d0:	bne	165d8 <flatcc_builder_end_offset_vector@@Base+0x28>
   165d4:	b	165f8 <flatcc_builder_end_offset_vector@@Base+0x48>
   165d8:	ldr	r0, [pc, #108]	; 1664c <flatcc_builder_end_offset_vector@@Base+0x9c>
   165dc:	add	r0, pc, r0
   165e0:	ldr	r1, [pc, #104]	; 16650 <flatcc_builder_end_offset_vector@@Base+0xa0>
   165e4:	add	r1, pc, r1
   165e8:	ldr	r2, [pc, #100]	; 16654 <flatcc_builder_end_offset_vector@@Base+0xa4>
   165ec:	add	r3, pc, r2
   165f0:	movw	r2, #1480	; 0x5c8
   165f4:	bl	12494 <__assert_fail@plt>
   165f8:	ldr	r0, [sp, #8]
   165fc:	ldr	r1, [sp, #8]
   16600:	ldr	r1, [r1, #16]
   16604:	ldr	r2, [sp, #8]
   16608:	ldr	r2, [r2, #32]
   1660c:	ldr	r2, [r2, #20]
   16610:	bl	179ac <flatcc_builder_create_offset_vector_direct@@Base>
   16614:	str	r0, [sp, #4]
   16618:	movw	r1, #0
   1661c:	cmp	r1, r0
   16620:	bne	16630 <flatcc_builder_end_offset_vector@@Base+0x80>
   16624:	movw	r0, #0
   16628:	str	r0, [fp, #-4]
   1662c:	b	16640 <flatcc_builder_end_offset_vector@@Base+0x90>
   16630:	ldr	r0, [sp, #8]
   16634:	bl	155b8 <flatcc_builder_end_buffer@@Base+0x164>
   16638:	ldr	r0, [sp, #4]
   1663c:	str	r0, [fp, #-4]
   16640:	ldr	r0, [fp, #-4]
   16644:	mov	sp, fp
   16648:	pop	{fp, pc}
   1664c:	andeq	r4, r0, fp, lsl #30
   16650:	ldrdeq	r4, [r0], -r0
   16654:	andeq	r5, r0, sl, lsr #10

00016658 <flatcc_builder_start_string@@Base>:
   16658:	push	{fp, lr}
   1665c:	mov	fp, sp
   16660:	sub	sp, sp, #8
   16664:	str	r0, [sp]
   16668:	ldr	r0, [sp]
   1666c:	movw	r1, #1
   16670:	uxth	r1, r1
   16674:	bl	15288 <flatcc_builder_start_buffer@@Base+0x178>
   16678:	cmp	r0, #0
   1667c:	beq	1668c <flatcc_builder_start_string@@Base+0x34>
   16680:	mvn	r0, #0
   16684:	str	r0, [sp, #4]
   16688:	b	166d0 <flatcc_builder_start_string@@Base+0x78>
   1668c:	ldr	r0, [sp]
   16690:	ldr	r0, [r0, #32]
   16694:	movw	r1, #1
   16698:	str	r1, [r0, #16]
   1669c:	ldr	r0, [sp]
   166a0:	ldr	r0, [r0, #32]
   166a4:	movw	r1, #0
   166a8:	str	r1, [r0, #20]
   166ac:	ldr	r0, [sp]
   166b0:	ldr	r0, [r0, #32]
   166b4:	movw	r1, #6
   166b8:	strh	r1, [r0, #14]
   166bc:	ldr	r0, [sp]
   166c0:	mvn	r1, #3
   166c4:	bl	156e4 <flatcc_builder_start_struct@@Base+0x70>
   166c8:	movw	r0, #0
   166cc:	str	r0, [sp, #4]
   166d0:	ldr	r0, [sp, #4]
   166d4:	mov	sp, fp
   166d8:	pop	{fp, pc}

000166dc <flatcc_builder_reserve_table@@Base>:
   166dc:	push	{fp, lr}
   166e0:	mov	fp, sp
   166e4:	sub	sp, sp, #8
   166e8:	str	r0, [sp, #4]
   166ec:	str	r1, [sp]
   166f0:	ldr	r0, [sp]
   166f4:	cmp	r0, #0
   166f8:	blt	16700 <flatcc_builder_reserve_table@@Base+0x24>
   166fc:	b	16720 <flatcc_builder_reserve_table@@Base+0x44>
   16700:	ldr	r0, [pc, #44]	; 16734 <flatcc_builder_reserve_table@@Base+0x58>
   16704:	add	r0, pc, r0
   16708:	ldr	r1, [pc, #40]	; 16738 <flatcc_builder_reserve_table@@Base+0x5c>
   1670c:	add	r1, pc, r1
   16710:	ldr	r2, [pc, #36]	; 1673c <flatcc_builder_reserve_table@@Base+0x60>
   16714:	add	r3, pc, r2
   16718:	movw	r2, #1065	; 0x429
   1671c:	bl	12494 <__assert_fail@plt>
   16720:	ldr	r0, [sp, #4]
   16724:	ldr	r1, [sp]
   16728:	bl	16740 <flatcc_builder_reserve_table@@Base+0x64>
   1672c:	mov	sp, fp
   16730:	pop	{fp, pc}
   16734:	andeq	r5, r0, sl, lsr #2
   16738:	andeq	r4, r0, r8, lsr #19
   1673c:	ldrdeq	r5, [r0], -r9
   16740:	push	{fp, lr}
   16744:	mov	fp, sp
   16748:	sub	sp, sp, #24
   1674c:	str	r0, [fp, #-8]
   16750:	str	r1, [sp, #12]
   16754:	ldr	r0, [fp, #-8]
   16758:	ldr	r0, [r0, #32]
   1675c:	ldr	r1, [r0, #16]
   16760:	ldrh	r0, [r0, #28]
   16764:	add	r0, r1, r0, lsl #1
   16768:	str	r0, [sp, #8]
   1676c:	ldr	r0, [sp, #12]
   16770:	add	r0, r0, #2
   16774:	lsl	r0, r0, #1
   16778:	str	r0, [sp, #4]
   1677c:	ldr	r0, [fp, #-8]
   16780:	ldr	r2, [sp, #8]
   16784:	ldr	r3, [sp, #4]
   16788:	movw	r1, #0
   1678c:	movw	ip, #1
   16790:	str	ip, [sp]
   16794:	bl	1441c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   16798:	ldr	r1, [fp, #-8]
   1679c:	str	r0, [r1, #4]
   167a0:	movw	r1, #0
   167a4:	cmp	r0, r1
   167a8:	bne	167b8 <flatcc_builder_reserve_table@@Base+0xdc>
   167ac:	mvn	r0, #0
   167b0:	str	r0, [fp, #-4]
   167b4:	b	1682c <flatcc_builder_reserve_table@@Base+0x150>
   167b8:	ldr	r0, [fp, #-8]
   167bc:	ldr	r1, [r0, #4]
   167c0:	add	r1, r1, #4
   167c4:	str	r1, [r0, #4]
   167c8:	ldr	r0, [fp, #-8]
   167cc:	ldr	r0, [r0, #32]
   167d0:	ldr	r0, [r0, #20]
   167d4:	str	r0, [sp, #8]
   167d8:	ldr	r0, [sp, #12]
   167dc:	lsl	r0, r0, #1
   167e0:	add	r0, r0, #1
   167e4:	str	r0, [sp, #4]
   167e8:	ldr	r0, [fp, #-8]
   167ec:	ldr	r2, [sp, #8]
   167f0:	ldr	r3, [sp, #4]
   167f4:	movw	r1, #3
   167f8:	movw	ip, #0
   167fc:	str	ip, [sp]
   16800:	bl	1441c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   16804:	ldr	r1, [fp, #-8]
   16808:	str	r0, [r1]
   1680c:	movw	r1, #0
   16810:	cmp	r0, r1
   16814:	bne	16824 <flatcc_builder_reserve_table@@Base+0x148>
   16818:	mvn	r0, #0
   1681c:	str	r0, [fp, #-4]
   16820:	b	1682c <flatcc_builder_reserve_table@@Base+0x150>
   16824:	movw	r0, #0
   16828:	str	r0, [fp, #-4]
   1682c:	ldr	r0, [fp, #-4]
   16830:	mov	sp, fp
   16834:	pop	{fp, pc}

00016838 <flatcc_builder_start_table@@Base>:
   16838:	push	{fp, lr}
   1683c:	mov	fp, sp
   16840:	sub	sp, sp, #16
   16844:	str	r0, [sp, #8]
   16848:	str	r1, [sp, #4]
   1684c:	ldr	r0, [sp, #8]
   16850:	movw	r1, #4
   16854:	uxth	r1, r1
   16858:	bl	15288 <flatcc_builder_start_buffer@@Base+0x178>
   1685c:	cmp	r0, #0
   16860:	beq	16870 <flatcc_builder_start_table@@Base+0x38>
   16864:	mvn	r0, #0
   16868:	str	r0, [fp, #-4]
   1686c:	b	16940 <flatcc_builder_start_table@@Base+0x108>
   16870:	ldr	r0, [pc, #212]	; 1694c <flatcc_builder_start_table@@Base+0x114>
   16874:	ldr	r1, [sp, #8]
   16878:	ldr	r1, [r1, #4]
   1687c:	ldr	r2, [sp, #8]
   16880:	ldr	r2, [r2, #52]	; 0x34
   16884:	sub	r1, r1, r2
   16888:	ldr	r2, [sp, #8]
   1688c:	ldr	r2, [r2, #32]
   16890:	str	r1, [r2, #16]
   16894:	ldr	r1, [sp, #8]
   16898:	ldr	r1, [r1]
   1689c:	ldr	r2, [sp, #8]
   168a0:	ldr	r2, [r2, #76]	; 0x4c
   168a4:	sub	r1, r1, r2
   168a8:	ldr	r2, [sp, #8]
   168ac:	ldr	r2, [r2, #32]
   168b0:	str	r1, [r2, #20]
   168b4:	ldr	r1, [sp, #8]
   168b8:	ldr	r1, [r1, #12]
   168bc:	ldr	r2, [sp, #8]
   168c0:	ldr	r2, [r2, #32]
   168c4:	str	r1, [r2, #24]
   168c8:	ldr	r1, [sp, #8]
   168cc:	ldrh	r1, [r1, #8]
   168d0:	ldr	r2, [sp, #8]
   168d4:	ldr	r2, [r2, #32]
   168d8:	strh	r1, [r2, #28]
   168dc:	ldr	r1, [sp, #8]
   168e0:	movw	r2, #0
   168e4:	str	r2, [r1, #12]
   168e8:	ldr	r1, [sp, #8]
   168ec:	str	r0, [r1, #12]
   168f0:	ldr	r0, [sp, #8]
   168f4:	movw	r1, #0
   168f8:	strh	r1, [r0, #8]
   168fc:	ldr	r0, [sp, #8]
   16900:	ldr	r0, [r0, #32]
   16904:	movw	r1, #3
   16908:	strh	r1, [r0, #14]
   1690c:	ldr	r0, [sp, #8]
   16910:	ldr	r1, [sp, #4]
   16914:	bl	16740 <flatcc_builder_reserve_table@@Base+0x64>
   16918:	cmp	r0, #0
   1691c:	beq	1692c <flatcc_builder_start_table@@Base+0xf4>
   16920:	mvn	r0, #0
   16924:	str	r0, [fp, #-4]
   16928:	b	16940 <flatcc_builder_start_table@@Base+0x108>
   1692c:	ldr	r0, [sp, #8]
   16930:	movw	r1, #65532	; 0xfffc
   16934:	bl	156e4 <flatcc_builder_start_struct@@Base+0x70>
   16938:	movw	r0, #0
   1693c:	str	r0, [fp, #-4]
   16940:	ldr	r0, [fp, #-4]
   16944:	mov	sp, fp
   16948:	pop	{fp, pc}
   1694c:	svccs	0x00693b52

00016950 <flatcc_builder_create_vtable@@Base>:
   16950:	push	{fp, lr}
   16954:	mov	fp, sp
   16958:	sub	sp, sp, #104	; 0x68
   1695c:	str	r0, [fp, #-8]
   16960:	str	r1, [fp, #-12]
   16964:	strh	r2, [fp, #-14]
   16968:	movw	r0, #0
   1696c:	str	r0, [sp, #12]
   16970:	str	r0, [sp, #16]
   16974:	ldrh	r0, [fp, #-14]
   16978:	cmp	r0, #0
   1697c:	ble	169c0 <flatcc_builder_create_vtable@@Base+0x70>
   16980:	ldrh	r0, [fp, #-14]
   16984:	ldr	r1, [sp, #12]
   16988:	add	r0, r1, r0
   1698c:	str	r0, [sp, #12]
   16990:	ldr	r0, [fp, #-12]
   16994:	add	r1, sp, #12
   16998:	add	r1, r1, #8
   1699c:	ldr	r2, [sp, #16]
   169a0:	str	r0, [r1, r2, lsl #3]
   169a4:	ldrh	r0, [fp, #-14]
   169a8:	ldr	r2, [sp, #16]
   169ac:	add	r1, r1, r2, lsl #3
   169b0:	str	r0, [r1, #4]
   169b4:	ldr	r0, [sp, #16]
   169b8:	add	r0, r0, #1
   169bc:	str	r0, [sp, #16]
   169c0:	ldr	r0, [fp, #-8]
   169c4:	ldr	r0, [r0, #152]	; 0x98
   169c8:	cmp	r0, #0
   169cc:	bne	16a0c <flatcc_builder_create_vtable@@Base+0xbc>
   169d0:	ldr	r0, [fp, #-8]
   169d4:	ldr	r0, [r0, #180]	; 0xb4
   169d8:	cmp	r0, #0
   169dc:	bne	16a0c <flatcc_builder_create_vtable@@Base+0xbc>
   169e0:	ldr	r0, [fp, #-8]
   169e4:	add	r1, sp, #12
   169e8:	bl	16a54 <flatcc_builder_create_vtable@@Base+0x104>
   169ec:	str	r0, [fp, #-20]	; 0xffffffec
   169f0:	movw	r1, #0
   169f4:	cmp	r1, r0
   169f8:	bne	16a08 <flatcc_builder_create_vtable@@Base+0xb8>
   169fc:	movw	r0, #0
   16a00:	str	r0, [fp, #-4]
   16a04:	b	16a48 <flatcc_builder_create_vtable@@Base+0xf8>
   16a08:	b	16a40 <flatcc_builder_create_vtable@@Base+0xf0>
   16a0c:	ldr	r0, [fp, #-8]
   16a10:	add	r1, sp, #12
   16a14:	bl	14ac4 <flatcc_builder_embed_buffer@@Base+0x39c>
   16a18:	str	r0, [fp, #-20]	; 0xffffffec
   16a1c:	movw	r1, #0
   16a20:	cmp	r1, r0
   16a24:	bne	16a34 <flatcc_builder_create_vtable@@Base+0xe4>
   16a28:	movw	r0, #0
   16a2c:	str	r0, [fp, #-4]
   16a30:	b	16a48 <flatcc_builder_create_vtable@@Base+0xf8>
   16a34:	ldr	r0, [fp, #-20]	; 0xffffffec
   16a38:	add	r0, r0, #1
   16a3c:	str	r0, [fp, #-20]	; 0xffffffec
   16a40:	ldr	r0, [fp, #-20]	; 0xffffffec
   16a44:	str	r0, [fp, #-4]
   16a48:	ldr	r0, [fp, #-4]
   16a4c:	mov	sp, fp
   16a50:	pop	{fp, pc}
   16a54:	push	{fp, lr}
   16a58:	mov	fp, sp
   16a5c:	sub	sp, sp, #24
   16a60:	str	r0, [fp, #-4]
   16a64:	str	r1, [fp, #-8]
   16a68:	ldr	r0, [fp, #-4]
   16a6c:	ldr	r0, [r0, #140]	; 0x8c
   16a70:	str	r0, [sp, #12]
   16a74:	ldr	r0, [sp, #12]
   16a78:	ldr	r1, [fp, #-8]
   16a7c:	ldr	r1, [r1]
   16a80:	add	r0, r0, r1
   16a84:	ldr	r1, [fp, #-4]
   16a88:	str	r0, [r1, #140]	; 0x8c
   16a8c:	ldr	r0, [fp, #-4]
   16a90:	ldr	r0, [r0, #140]	; 0x8c
   16a94:	ldr	r1, [sp, #12]
   16a98:	cmp	r0, r1
   16a9c:	bge	16ac0 <flatcc_builder_create_vtable@@Base+0x170>
   16aa0:	ldr	r0, [pc, #168]	; 16b50 <flatcc_builder_create_vtable@@Base+0x200>
   16aa4:	add	r0, pc, r0
   16aa8:	ldr	r1, [pc, #164]	; 16b54 <flatcc_builder_create_vtable@@Base+0x204>
   16aac:	add	r1, pc, r1
   16ab0:	ldr	r2, [pc, #160]	; 16b58 <flatcc_builder_create_vtable@@Base+0x208>
   16ab4:	add	r3, pc, r2
   16ab8:	movw	r2, #673	; 0x2a1
   16abc:	bl	12494 <__assert_fail@plt>
   16ac0:	ldr	r0, [fp, #-4]
   16ac4:	ldr	r0, [r0, #44]	; 0x2c
   16ac8:	ldr	r1, [fp, #-4]
   16acc:	ldr	r1, [r1, #36]	; 0x24
   16ad0:	ldr	r2, [fp, #-8]
   16ad4:	add	r2, r2, #8
   16ad8:	ldr	r3, [fp, #-8]
   16adc:	ldr	r3, [r3, #4]
   16ae0:	ldr	ip, [sp, #12]
   16ae4:	ldr	lr, [fp, #-8]
   16ae8:	ldr	lr, [lr]
   16aec:	str	r0, [sp, #8]
   16af0:	mov	r0, r1
   16af4:	mov	r1, r2
   16af8:	mov	r2, r3
   16afc:	mov	r3, ip
   16b00:	str	lr, [sp]
   16b04:	ldr	ip, [sp, #8]
   16b08:	blx	ip
   16b0c:	cmp	r0, #0
   16b10:	beq	16b34 <flatcc_builder_create_vtable@@Base+0x1e4>
   16b14:	ldr	r0, [pc, #40]	; 16b44 <flatcc_builder_create_vtable@@Base+0x1f4>
   16b18:	add	r0, pc, r0
   16b1c:	ldr	r1, [pc, #36]	; 16b48 <flatcc_builder_create_vtable@@Base+0x1f8>
   16b20:	add	r1, pc, r1
   16b24:	ldr	r2, [pc, #32]	; 16b4c <flatcc_builder_create_vtable@@Base+0x1fc>
   16b28:	add	r3, pc, r2
   16b2c:	movw	r2, #677	; 0x2a5
   16b30:	bl	12494 <__assert_fail@plt>
   16b34:	ldr	r0, [sp, #12]
   16b38:	add	r0, r0, #1
   16b3c:	mov	sp, fp
   16b40:	pop	{fp, pc}
   16b44:	andeq	r5, r0, r9, asr r7
   16b48:	muleq	r0, r4, r5
   16b4c:	andeq	r5, r0, r4, asr #13
   16b50:	andeq	r5, r0, sp, asr #15
   16b54:	andeq	r4, r0, r8, lsl #12
   16b58:	andeq	r5, r0, r8, lsr r7

00016b5c <flatcc_builder_create_cached_vtable@@Base>:
   16b5c:	push	{fp, lr}
   16b60:	mov	fp, sp
   16b64:	sub	sp, sp, #48	; 0x30
   16b68:	str	r0, [fp, #-8]
   16b6c:	str	r1, [fp, #-12]
   16b70:	strh	r2, [fp, #-14]
   16b74:	str	r3, [fp, #-20]	; 0xffffffec
   16b78:	ldr	r0, [fp, #-8]
   16b7c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16b80:	bl	16e68 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   16b84:	str	r0, [sp, #12]
   16b88:	movw	r1, #0
   16b8c:	cmp	r0, r1
   16b90:	bne	16ba0 <flatcc_builder_create_cached_vtable@@Base+0x44>
   16b94:	movw	r0, #0
   16b98:	str	r0, [fp, #-4]
   16b9c:	b	16e5c <flatcc_builder_create_cached_vtable@@Base+0x300>
   16ba0:	ldr	r0, [sp, #12]
   16ba4:	str	r0, [sp, #16]
   16ba8:	ldr	r0, [sp, #16]
   16bac:	ldr	r0, [r0]
   16bb0:	str	r0, [sp, #8]
   16bb4:	movw	r0, #0
   16bb8:	str	r0, [sp, #20]
   16bbc:	ldr	r0, [sp, #8]
   16bc0:	cmp	r0, #0
   16bc4:	beq	16cc8 <flatcc_builder_create_cached_vtable@@Base+0x16c>
   16bc8:	ldr	r0, [fp, #-8]
   16bcc:	ldr	r0, [r0, #100]	; 0x64
   16bd0:	ldr	r1, [sp, #8]
   16bd4:	add	r0, r0, r1
   16bd8:	str	r0, [sp, #24]
   16bdc:	ldr	r0, [fp, #-8]
   16be0:	ldr	r0, [r0, #68]	; 0x44
   16be4:	ldr	r1, [sp, #24]
   16be8:	ldr	r1, [r1, #8]
   16bec:	add	r0, r0, r1
   16bf0:	str	r0, [sp, #4]
   16bf4:	ldr	r0, [sp, #4]
   16bf8:	ldrh	r0, [r0]
   16bfc:	ldrh	r1, [fp, #-14]
   16c00:	cmp	r0, r1
   16c04:	bne	16c24 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   16c08:	ldr	r0, [fp, #-12]
   16c0c:	ldr	r1, [sp, #4]
   16c10:	ldrh	r2, [fp, #-14]
   16c14:	bl	123ec <memcmp@plt>
   16c18:	movw	r1, #0
   16c1c:	cmp	r1, r0
   16c20:	beq	16c40 <flatcc_builder_create_cached_vtable@@Base+0xe4>
   16c24:	ldr	r0, [sp, #24]
   16c28:	add	r0, r0, #12
   16c2c:	str	r0, [sp, #16]
   16c30:	ldr	r0, [sp, #24]
   16c34:	ldr	r0, [r0, #12]
   16c38:	str	r0, [sp, #8]
   16c3c:	b	16bbc <flatcc_builder_create_cached_vtable@@Base+0x60>
   16c40:	ldr	r0, [sp, #24]
   16c44:	ldr	r0, [r0, #4]
   16c48:	ldr	r1, [fp, #-8]
   16c4c:	ldr	r1, [r1, #152]	; 0x98
   16c50:	cmp	r0, r1
   16c54:	beq	16c7c <flatcc_builder_create_cached_vtable@@Base+0x120>
   16c58:	ldr	r0, [sp, #24]
   16c5c:	str	r0, [sp, #20]
   16c60:	ldr	r0, [sp, #24]
   16c64:	add	r0, r0, #12
   16c68:	str	r0, [sp, #16]
   16c6c:	ldr	r0, [sp, #24]
   16c70:	ldr	r0, [r0, #12]
   16c74:	str	r0, [sp, #8]
   16c78:	b	16bbc <flatcc_builder_create_cached_vtable@@Base+0x60>
   16c7c:	ldr	r0, [sp, #16]
   16c80:	ldr	r1, [sp, #12]
   16c84:	cmp	r0, r1
   16c88:	beq	16cb8 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   16c8c:	ldr	r0, [sp, #24]
   16c90:	ldr	r0, [r0, #12]
   16c94:	ldr	r1, [sp, #16]
   16c98:	str	r0, [r1]
   16c9c:	ldr	r0, [sp, #12]
   16ca0:	ldr	r0, [r0]
   16ca4:	ldr	r1, [sp, #24]
   16ca8:	str	r0, [r1, #12]
   16cac:	ldr	r0, [sp, #8]
   16cb0:	ldr	r1, [sp, #12]
   16cb4:	str	r0, [r1]
   16cb8:	ldr	r0, [sp, #24]
   16cbc:	ldr	r0, [r0]
   16cc0:	str	r0, [fp, #-4]
   16cc4:	b	16e5c <flatcc_builder_create_cached_vtable@@Base+0x300>
   16cc8:	ldr	r0, [fp, #-8]
   16ccc:	ldr	r1, [fp, #-8]
   16cd0:	ldr	r2, [r1, #124]	; 0x7c
   16cd4:	movw	r1, #6
   16cd8:	movw	r3, #16
   16cdc:	movw	ip, #0
   16ce0:	str	ip, [sp]
   16ce4:	bl	1441c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   16ce8:	str	r0, [sp, #24]
   16cec:	movw	r1, #0
   16cf0:	cmp	r0, r1
   16cf4:	bne	16d04 <flatcc_builder_create_cached_vtable@@Base+0x1a8>
   16cf8:	movw	r0, #0
   16cfc:	str	r0, [fp, #-4]
   16d00:	b	16e5c <flatcc_builder_create_cached_vtable@@Base+0x300>
   16d04:	ldr	r0, [fp, #-8]
   16d08:	ldr	r0, [r0, #124]	; 0x7c
   16d0c:	str	r0, [sp, #8]
   16d10:	ldr	r0, [fp, #-8]
   16d14:	ldr	r1, [r0, #124]	; 0x7c
   16d18:	add	r1, r1, #16
   16d1c:	str	r1, [r0, #124]	; 0x7c
   16d20:	ldr	r0, [fp, #-8]
   16d24:	ldr	r0, [r0, #152]	; 0x98
   16d28:	ldr	r1, [sp, #24]
   16d2c:	str	r0, [r1, #4]
   16d30:	ldr	r0, [sp, #12]
   16d34:	ldr	r0, [r0]
   16d38:	ldr	r1, [sp, #24]
   16d3c:	str	r0, [r1, #12]
   16d40:	ldr	r0, [sp, #8]
   16d44:	ldr	r1, [sp, #12]
   16d48:	str	r0, [r1]
   16d4c:	ldr	r0, [fp, #-8]
   16d50:	ldr	r1, [fp, #-12]
   16d54:	ldrh	r2, [fp, #-14]
   16d58:	bl	16950 <flatcc_builder_create_vtable@@Base>
   16d5c:	ldr	r1, [sp, #24]
   16d60:	str	r0, [r1]
   16d64:	movw	r1, #0
   16d68:	cmp	r1, r0
   16d6c:	bne	16d7c <flatcc_builder_create_cached_vtable@@Base+0x220>
   16d70:	movw	r0, #0
   16d74:	str	r0, [fp, #-4]
   16d78:	b	16e5c <flatcc_builder_create_cached_vtable@@Base+0x300>
   16d7c:	ldr	r0, [sp, #20]
   16d80:	movw	r1, #0
   16d84:	cmp	r0, r1
   16d88:	beq	16da0 <flatcc_builder_create_cached_vtable@@Base+0x244>
   16d8c:	ldr	r0, [sp, #20]
   16d90:	ldr	r0, [r0, #8]
   16d94:	ldr	r1, [sp, #24]
   16d98:	str	r0, [r1, #8]
   16d9c:	b	16e50 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   16da0:	ldr	r0, [fp, #-8]
   16da4:	ldr	r0, [r0, #172]	; 0xac
   16da8:	cmp	r0, #0
   16dac:	beq	16ddc <flatcc_builder_create_cached_vtable@@Base+0x280>
   16db0:	ldr	r0, [fp, #-8]
   16db4:	ldr	r0, [r0, #172]	; 0xac
   16db8:	ldr	r1, [fp, #-8]
   16dbc:	ldr	r1, [r1, #120]	; 0x78
   16dc0:	ldrh	r2, [fp, #-14]
   16dc4:	add	r1, r1, r2
   16dc8:	cmp	r0, r1
   16dcc:	bcs	16ddc <flatcc_builder_create_cached_vtable@@Base+0x280>
   16dd0:	ldr	r0, [fp, #-8]
   16dd4:	bl	13e98 <flatcc_builder_flush_vtable_cache@@Base>
   16dd8:	b	16e4c <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   16ddc:	ldr	r0, [fp, #-8]
   16de0:	ldr	r1, [fp, #-8]
   16de4:	ldr	r2, [r1, #120]	; 0x78
   16de8:	ldrh	r3, [fp, #-14]
   16dec:	movw	r1, #2
   16df0:	movw	ip, #0
   16df4:	str	ip, [sp]
   16df8:	bl	1441c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   16dfc:	str	r0, [sp, #4]
   16e00:	movw	r1, #0
   16e04:	cmp	r0, r1
   16e08:	bne	16e18 <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   16e0c:	mvn	r0, #0
   16e10:	str	r0, [fp, #-4]
   16e14:	b	16e5c <flatcc_builder_create_cached_vtable@@Base+0x300>
   16e18:	ldr	r0, [fp, #-8]
   16e1c:	ldr	r0, [r0, #120]	; 0x78
   16e20:	ldr	r1, [sp, #24]
   16e24:	str	r0, [r1, #8]
   16e28:	ldrh	r0, [fp, #-14]
   16e2c:	ldr	r1, [fp, #-8]
   16e30:	ldr	r2, [r1, #120]	; 0x78
   16e34:	add	r0, r2, r0
   16e38:	str	r0, [r1, #120]	; 0x78
   16e3c:	ldr	r0, [sp, #4]
   16e40:	ldr	r1, [fp, #-12]
   16e44:	ldrh	r2, [fp, #-14]
   16e48:	bl	123e0 <memcpy@plt>
   16e4c:	b	16e50 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   16e50:	ldr	r0, [sp, #24]
   16e54:	ldr	r0, [r0]
   16e58:	str	r0, [fp, #-4]
   16e5c:	ldr	r0, [fp, #-4]
   16e60:	mov	sp, fp
   16e64:	pop	{fp, pc}
   16e68:	push	{fp, lr}
   16e6c:	mov	fp, sp
   16e70:	sub	sp, sp, #16
   16e74:	str	r0, [sp, #8]
   16e78:	str	r1, [sp, #4]
   16e7c:	ldr	r0, [sp, #8]
   16e80:	ldr	r0, [r0, #116]	; 0x74
   16e84:	cmp	r0, #0
   16e88:	bne	16eac <flatcc_builder_create_cached_vtable@@Base+0x350>
   16e8c:	ldr	r0, [sp, #8]
   16e90:	bl	19974 <flatcc_builder_get_emit_context@@Base+0xe8>
   16e94:	cmp	r0, #0
   16e98:	beq	16ea8 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   16e9c:	movw	r0, #0
   16ea0:	str	r0, [fp, #-4]
   16ea4:	b	16edc <flatcc_builder_create_cached_vtable@@Base+0x380>
   16ea8:	b	16eac <flatcc_builder_create_cached_vtable@@Base+0x350>
   16eac:	ldr	r0, [sp, #8]
   16eb0:	ldr	r0, [r0, #92]	; 0x5c
   16eb4:	str	r0, [sp]
   16eb8:	ldr	r0, [sp]
   16ebc:	ldr	r1, [sp, #4]
   16ec0:	ldr	r2, [sp, #8]
   16ec4:	ldr	r2, [r2, #116]	; 0x74
   16ec8:	rsb	r2, r2, #32
   16ecc:	lsr	r1, r1, r2
   16ed0:	mov	r2, r1
   16ed4:	add	r0, r0, r1, lsl #2
   16ed8:	str	r0, [fp, #-4]
   16edc:	ldr	r0, [fp, #-4]
   16ee0:	mov	sp, fp
   16ee4:	pop	{fp, pc}

00016ee8 <flatcc_builder_create_table@@Base>:
   16ee8:	push	{r4, sl, fp, lr}
   16eec:	add	fp, sp, #8
   16ef0:	sub	sp, sp, #128	; 0x80
   16ef4:	ldr	ip, [fp, #16]
   16ef8:	ldr	lr, [fp, #12]
   16efc:	ldr	r4, [fp, #8]
   16f00:	str	r0, [fp, #-16]
   16f04:	str	r1, [fp, #-20]	; 0xffffffec
   16f08:	str	r2, [fp, #-24]	; 0xffffffe8
   16f0c:	strh	r3, [fp, #-26]	; 0xffffffe6
   16f10:	ldr	r0, [fp, #12]
   16f14:	cmp	r0, #0
   16f18:	blt	16f20 <flatcc_builder_create_table@@Base+0x38>
   16f1c:	b	16f40 <flatcc_builder_create_table@@Base+0x58>
   16f20:	ldr	r0, [pc, #616]	; 17190 <flatcc_builder_create_table@@Base+0x2a8>
   16f24:	add	r0, pc, r0
   16f28:	ldr	r1, [pc, #612]	; 17194 <flatcc_builder_create_table@@Base+0x2ac>
   16f2c:	add	r1, pc, r1
   16f30:	ldr	r2, [pc, #608]	; 17198 <flatcc_builder_create_table@@Base+0x2b0>
   16f34:	add	r3, pc, r2
   16f38:	movw	r2, #1237	; 0x4d5
   16f3c:	bl	12494 <__assert_fail@plt>
   16f40:	ldr	r0, [fp, #16]
   16f44:	and	r0, r0, #1
   16f48:	cmp	r0, #0
   16f4c:	beq	16f54 <flatcc_builder_create_table@@Base+0x6c>
   16f50:	b	16f74 <flatcc_builder_create_table@@Base+0x8c>
   16f54:	ldr	r0, [pc, #576]	; 1719c <flatcc_builder_create_table@@Base+0x2b4>
   16f58:	add	r0, pc, r0
   16f5c:	ldr	r1, [pc, #572]	; 171a0 <flatcc_builder_create_table@@Base+0x2b8>
   16f60:	add	r1, pc, r1
   16f64:	ldr	r2, [pc, #568]	; 171a4 <flatcc_builder_create_table@@Base+0x2bc>
   16f68:	add	r3, pc, r2
   16f6c:	movw	r2, #1243	; 0x4db
   16f70:	bl	12494 <__assert_fail@plt>
   16f74:	sub	r0, fp, #26
   16f78:	movw	r1, #4
   16f7c:	uxth	r1, r1
   16f80:	bl	16470 <flatcc_builder_start_vector@@Base+0xac>
   16f84:	ldr	r0, [fp, #-16]
   16f88:	ldrh	r1, [fp, #-26]	; 0xffffffe6
   16f8c:	bl	14f90 <flatcc_builder_create_buffer@@Base+0x3a8>
   16f90:	ldr	r0, [fp, #-16]
   16f94:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16f98:	ldrh	r2, [fp, #-26]	; 0xffffffe6
   16f9c:	bl	14a7c <flatcc_builder_embed_buffer@@Base+0x354>
   16fa0:	str	r0, [fp, #-36]	; 0xffffffdc
   16fa4:	ldr	r0, [fp, #-16]
   16fa8:	ldr	r0, [r0, #136]	; 0x88
   16fac:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16fb0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16fb4:	add	r1, r1, r2
   16fb8:	add	r1, r1, #4
   16fbc:	sub	r0, r0, r1
   16fc0:	str	r0, [fp, #-52]	; 0xffffffcc
   16fc4:	ldr	r0, [fp, #16]
   16fc8:	sub	r0, r0, #1
   16fcc:	str	r0, [fp, #-48]	; 0xffffffd0
   16fd0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16fd4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   16fd8:	sub	r0, r0, r1
   16fdc:	str	r0, [fp, #-40]	; 0xffffffd8
   16fe0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16fe4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16fe8:	sub	r0, r0, r1
   16fec:	ldr	r1, [fp, #-48]	; 0xffffffd0
   16ff0:	cmp	r0, r1
   16ff4:	beq	17004 <flatcc_builder_create_table@@Base+0x11c>
   16ff8:	mvn	r0, #0
   16ffc:	str	r0, [fp, #-12]
   17000:	b	17184 <flatcc_builder_create_table@@Base+0x29c>
   17004:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17008:	bl	14ab0 <flatcc_builder_embed_buffer@@Base+0x388>
   1700c:	str	r0, [fp, #-44]	; 0xffffffd4
   17010:	movw	r0, #0
   17014:	str	r0, [fp, #-32]	; 0xffffffe0
   17018:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1701c:	ldr	r1, [fp, #12]
   17020:	cmp	r0, r1
   17024:	bge	17090 <flatcc_builder_create_table@@Base+0x1a8>
   17028:	ldr	r0, [fp, #-20]	; 0xffffffec
   1702c:	ldr	r1, [fp, #8]
   17030:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17034:	add	r1, r1, r2, lsl #1
   17038:	ldrh	r1, [r1]
   1703c:	add	r0, r0, r1
   17040:	str	r0, [fp, #-60]	; 0xffffffc4
   17044:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17048:	ldr	r0, [r0]
   1704c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17050:	sub	r0, r0, r1
   17054:	ldr	r1, [fp, #8]
   17058:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1705c:	add	r1, r1, r2, lsl #1
   17060:	ldrh	r1, [r1]
   17064:	sub	r0, r0, r1
   17068:	sub	r0, r0, #4
   1706c:	str	r0, [fp, #-56]	; 0xffffffc8
   17070:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17074:	bl	14ab0 <flatcc_builder_embed_buffer@@Base+0x388>
   17078:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1707c:	str	r0, [r1]
   17080:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17084:	add	r0, r0, #1
   17088:	str	r0, [fp, #-32]	; 0xffffffe0
   1708c:	b	17018 <flatcc_builder_create_table@@Base+0x130>
   17090:	mov	r0, #0
   17094:	str	r0, [sp, #4]
   17098:	str	r0, [sp, #8]
   1709c:	ldr	r0, [sp, #4]
   170a0:	add	r0, r0, #4
   170a4:	str	r0, [sp, #4]
   170a8:	add	r0, sp, #4
   170ac:	add	r0, r0, #8
   170b0:	ldr	r1, [sp, #8]
   170b4:	sub	r2, fp, #44	; 0x2c
   170b8:	str	r2, [r0, r1, lsl #3]
   170bc:	ldr	r1, [sp, #8]
   170c0:	add	r0, r0, r1, lsl #3
   170c4:	movw	r1, #4
   170c8:	str	r1, [r0, #4]
   170cc:	ldr	r0, [sp, #8]
   170d0:	add	r0, r0, #1
   170d4:	str	r0, [sp, #8]
   170d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   170dc:	cmp	r0, #0
   170e0:	bls	17124 <flatcc_builder_create_table@@Base+0x23c>
   170e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   170e8:	ldr	r1, [sp, #4]
   170ec:	add	r0, r1, r0
   170f0:	str	r0, [sp, #4]
   170f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   170f8:	add	r1, sp, #4
   170fc:	add	r1, r1, #8
   17100:	ldr	r2, [sp, #8]
   17104:	str	r0, [r1, r2, lsl #3]
   17108:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1710c:	ldr	r2, [sp, #8]
   17110:	add	r1, r1, r2, lsl #3
   17114:	str	r0, [r1, #4]
   17118:	ldr	r0, [sp, #8]
   1711c:	add	r0, r0, #1
   17120:	str	r0, [sp, #8]
   17124:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17128:	cmp	r0, #0
   1712c:	bls	17174 <flatcc_builder_create_table@@Base+0x28c>
   17130:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17134:	ldr	r1, [sp, #4]
   17138:	add	r0, r1, r0
   1713c:	str	r0, [sp, #4]
   17140:	add	r0, sp, #4
   17144:	add	r0, r0, #8
   17148:	ldr	r1, [sp, #8]
   1714c:	ldr	r2, [pc, #84]	; 171a8 <flatcc_builder_create_table@@Base+0x2c0>
   17150:	ldr	r2, [pc, r2]
   17154:	str	r2, [r0, r1, lsl #3]
   17158:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1715c:	ldr	r2, [sp, #8]
   17160:	add	r0, r0, r2, lsl #3
   17164:	str	r1, [r0, #4]
   17168:	ldr	r0, [sp, #8]
   1716c:	add	r0, r0, #1
   17170:	str	r0, [sp, #8]
   17174:	ldr	r0, [fp, #-16]
   17178:	add	r1, sp, #4
   1717c:	bl	14ac4 <flatcc_builder_embed_buffer@@Base+0x39c>
   17180:	str	r0, [fp, #-12]
   17184:	ldr	r0, [fp, #-12]
   17188:	sub	sp, fp, #8
   1718c:	pop	{r4, sl, fp, pc}
   17190:	andeq	r4, r0, r3, lsl #18
   17194:	andeq	r4, r0, r8, lsl #3
   17198:	andeq	r4, r0, r5, lsl #18
   1719c:	andeq	r4, r0, sp, ror r9
   171a0:	andeq	r4, r0, r4, asr r1
   171a4:	ldrdeq	r4, [r0], -r1
   171a8:	andeq	r5, r1, r4, lsl #30

000171ac <flatcc_builder_check_required_field@@Base>:
   171ac:	push	{fp, lr}
   171b0:	mov	fp, sp
   171b4:	sub	sp, sp, #16
   171b8:	str	r0, [fp, #-4]
   171bc:	strh	r1, [fp, #-6]
   171c0:	ldr	r0, [fp, #-4]
   171c4:	ldr	r0, [r0, #32]
   171c8:	ldrh	r0, [r0, #14]
   171cc:	cmp	r0, #3
   171d0:	bne	171d8 <flatcc_builder_check_required_field@@Base+0x2c>
   171d4:	b	171f8 <flatcc_builder_check_required_field@@Base+0x4c>
   171d8:	ldr	r0, [pc, #104]	; 17248 <flatcc_builder_check_required_field@@Base+0x9c>
   171dc:	add	r0, pc, r0
   171e0:	ldr	r1, [pc, #100]	; 1724c <flatcc_builder_check_required_field@@Base+0xa0>
   171e4:	add	r1, pc, r1
   171e8:	ldr	r2, [pc, #96]	; 17250 <flatcc_builder_check_required_field@@Base+0xa4>
   171ec:	add	r3, pc, r2
   171f0:	movw	r2, #1272	; 0x4f8
   171f4:	bl	12494 <__assert_fail@plt>
   171f8:	ldrh	r0, [fp, #-6]
   171fc:	ldr	r1, [fp, #-4]
   17200:	ldrh	r1, [r1, #8]
   17204:	cmp	r0, r1
   17208:	movw	r0, #0
   1720c:	str	r0, [sp, #4]
   17210:	bge	17238 <flatcc_builder_check_required_field@@Base+0x8c>
   17214:	ldr	r0, [fp, #-4]
   17218:	ldr	r0, [r0, #4]
   1721c:	ldrh	r1, [fp, #-6]
   17220:	add	r0, r0, r1, lsl #1
   17224:	ldrh	r0, [r0]
   17228:	cmp	r0, #0
   1722c:	movw	r0, #0
   17230:	movne	r0, #1
   17234:	str	r0, [sp, #4]
   17238:	ldr	r0, [sp, #4]
   1723c:	and	r0, r0, #1
   17240:	mov	sp, fp
   17244:	pop	{fp, pc}
   17248:	andeq	r4, r0, r4, lsl #14
   1724c:	ldrdeq	r3, [r0], -r0
   17250:	andeq	r4, r0, pc, lsl r7

00017254 <flatcc_builder_check_union_field@@Base>:
   17254:	push	{fp, lr}
   17258:	mov	fp, sp
   1725c:	sub	sp, sp, #16
   17260:	str	r0, [sp, #8]
   17264:	strh	r1, [sp, #6]
   17268:	ldr	r0, [sp, #8]
   1726c:	ldr	r0, [r0, #32]
   17270:	ldrh	r0, [r0, #14]
   17274:	cmp	r0, #3
   17278:	bne	17280 <flatcc_builder_check_union_field@@Base+0x2c>
   1727c:	b	172a0 <flatcc_builder_check_union_field@@Base+0x4c>
   17280:	ldr	r0, [pc, #284]	; 173a4 <flatcc_builder_check_union_field@@Base+0x150>
   17284:	add	r0, pc, r0
   17288:	ldr	r1, [pc, #280]	; 173a8 <flatcc_builder_check_union_field@@Base+0x154>
   1728c:	add	r1, pc, r1
   17290:	ldr	r2, [pc, #276]	; 173ac <flatcc_builder_check_union_field@@Base+0x158>
   17294:	add	r3, pc, r2
   17298:	movw	r2, #1279	; 0x4ff
   1729c:	bl	12494 <__assert_fail@plt>
   172a0:	ldrh	r0, [sp, #6]
   172a4:	cmp	r0, #0
   172a8:	beq	172c0 <flatcc_builder_check_union_field@@Base+0x6c>
   172ac:	ldrh	r0, [sp, #6]
   172b0:	ldr	r1, [sp, #8]
   172b4:	ldrh	r1, [r1, #8]
   172b8:	cmp	r0, r1
   172bc:	blt	172cc <flatcc_builder_check_union_field@@Base+0x78>
   172c0:	movw	r0, #0
   172c4:	str	r0, [fp, #-4]
   172c8:	b	17398 <flatcc_builder_check_union_field@@Base+0x144>
   172cc:	ldr	r0, [sp, #8]
   172d0:	ldr	r0, [r0, #4]
   172d4:	ldrh	r1, [sp, #6]
   172d8:	sub	r1, r1, #1
   172dc:	add	r0, r0, r1, lsl #1
   172e0:	ldrh	r0, [r0]
   172e4:	cmp	r0, #0
   172e8:	bne	17318 <flatcc_builder_check_union_field@@Base+0xc4>
   172ec:	ldr	r0, [sp, #8]
   172f0:	ldr	r0, [r0, #4]
   172f4:	ldrh	r1, [sp, #6]
   172f8:	add	r0, r0, r1, lsl #1
   172fc:	ldrh	r0, [r0]
   17300:	cmp	r0, #0
   17304:	movw	r0, #0
   17308:	moveq	r0, #1
   1730c:	and	r0, r0, #1
   17310:	str	r0, [fp, #-4]
   17314:	b	17398 <flatcc_builder_check_union_field@@Base+0x144>
   17318:	ldr	r0, [sp, #8]
   1731c:	ldr	r1, [r0, #4]
   17320:	ldr	r0, [r0, #16]
   17324:	ldrh	r2, [sp, #6]
   17328:	sub	r2, r2, #1
   1732c:	add	r1, r1, r2, lsl #1
   17330:	ldrh	r1, [r1]
   17334:	add	r0, r0, r1
   17338:	ldrsb	r0, [r0]
   1733c:	cmp	r0, #0
   17340:	beq	17370 <flatcc_builder_check_union_field@@Base+0x11c>
   17344:	ldr	r0, [sp, #8]
   17348:	ldr	r0, [r0, #4]
   1734c:	ldrh	r1, [sp, #6]
   17350:	add	r0, r0, r1, lsl #1
   17354:	ldrh	r0, [r0]
   17358:	cmp	r0, #0
   1735c:	movw	r0, #0
   17360:	movne	r0, #1
   17364:	and	r0, r0, #1
   17368:	str	r0, [fp, #-4]
   1736c:	b	17398 <flatcc_builder_check_union_field@@Base+0x144>
   17370:	ldr	r0, [sp, #8]
   17374:	ldr	r0, [r0, #4]
   17378:	ldrh	r1, [sp, #6]
   1737c:	add	r0, r0, r1, lsl #1
   17380:	ldrh	r0, [r0]
   17384:	cmp	r0, #0
   17388:	movw	r0, #0
   1738c:	moveq	r0, #1
   17390:	and	r0, r0, #1
   17394:	str	r0, [fp, #-4]
   17398:	ldr	r0, [fp, #-4]
   1739c:	mov	sp, fp
   173a0:	pop	{fp, pc}
   173a4:	andeq	r4, r0, ip, asr r6
   173a8:	andeq	r3, r0, r8, lsr #28
   173ac:	andeq	r4, r0, sl, asr #13

000173b0 <flatcc_builder_check_required@@Base>:
   173b0:	push	{fp, lr}
   173b4:	mov	fp, sp
   173b8:	sub	sp, sp, #24
   173bc:	str	r0, [fp, #-8]
   173c0:	str	r1, [sp, #12]
   173c4:	str	r2, [sp, #8]
   173c8:	ldr	r0, [fp, #-8]
   173cc:	ldr	r0, [r0, #32]
   173d0:	ldrh	r0, [r0, #14]
   173d4:	cmp	r0, #3
   173d8:	bne	173e0 <flatcc_builder_check_required@@Base+0x30>
   173dc:	b	17400 <flatcc_builder_check_required@@Base+0x50>
   173e0:	ldr	r0, [pc, #172]	; 17494 <flatcc_builder_check_required@@Base+0xe4>
   173e4:	add	r0, pc, r0
   173e8:	ldr	r1, [pc, #168]	; 17498 <flatcc_builder_check_required@@Base+0xe8>
   173ec:	add	r1, pc, r1
   173f0:	ldr	r2, [pc, #164]	; 1749c <flatcc_builder_check_required@@Base+0xec>
   173f4:	add	r3, pc, r2
   173f8:	movw	r2, #1297	; 0x511
   173fc:	bl	12494 <__assert_fail@plt>
   17400:	ldr	r0, [fp, #-8]
   17404:	ldrh	r0, [r0, #8]
   17408:	ldr	r1, [sp, #8]
   1740c:	cmp	r0, r1
   17410:	bge	17420 <flatcc_builder_check_required@@Base+0x70>
   17414:	movw	r0, #0
   17418:	str	r0, [fp, #-4]
   1741c:	b	17488 <flatcc_builder_check_required@@Base+0xd8>
   17420:	movw	r0, #0
   17424:	str	r0, [sp, #4]
   17428:	ldr	r0, [sp, #4]
   1742c:	ldr	r1, [sp, #8]
   17430:	cmp	r0, r1
   17434:	bge	17480 <flatcc_builder_check_required@@Base+0xd0>
   17438:	ldr	r0, [fp, #-8]
   1743c:	ldr	r0, [r0, #4]
   17440:	ldr	r1, [sp, #12]
   17444:	ldr	r2, [sp, #4]
   17448:	add	r1, r1, r2, lsl #1
   1744c:	ldrh	r1, [r1]
   17450:	add	r0, r0, r1, lsl #1
   17454:	ldrh	r0, [r0]
   17458:	cmp	r0, #0
   1745c:	bne	1746c <flatcc_builder_check_required@@Base+0xbc>
   17460:	movw	r0, #0
   17464:	str	r0, [fp, #-4]
   17468:	b	17488 <flatcc_builder_check_required@@Base+0xd8>
   1746c:	b	17470 <flatcc_builder_check_required@@Base+0xc0>
   17470:	ldr	r0, [sp, #4]
   17474:	add	r0, r0, #1
   17478:	str	r0, [sp, #4]
   1747c:	b	17428 <flatcc_builder_check_required@@Base+0x78>
   17480:	movw	r0, #1
   17484:	str	r0, [fp, #-4]
   17488:	ldr	r0, [fp, #-4]
   1748c:	mov	sp, fp
   17490:	pop	{fp, pc}
   17494:	strdeq	r4, [r0], -ip
   17498:	andeq	r3, r0, r8, asr #25
   1749c:			; <UNDEFINED> instruction: 0x000045ba

000174a0 <flatcc_builder_end_table@@Base>:
   174a0:	push	{r4, r5, fp, lr}
   174a4:	add	fp, sp, #8
   174a8:	sub	sp, sp, #48	; 0x30
   174ac:	str	r0, [fp, #-16]
   174b0:	ldr	r0, [fp, #-16]
   174b4:	ldr	r0, [r0, #32]
   174b8:	ldrh	r0, [r0, #14]
   174bc:	cmp	r0, #3
   174c0:	bne	174c8 <flatcc_builder_end_table@@Base+0x28>
   174c4:	b	174e8 <flatcc_builder_end_table@@Base+0x48>
   174c8:	ldr	r0, [pc, #500]	; 176c4 <flatcc_builder_end_table@@Base+0x224>
   174cc:	add	r0, pc, r0
   174d0:	ldr	r1, [pc, #496]	; 176c8 <flatcc_builder_end_table@@Base+0x228>
   174d4:	add	r1, pc, r1
   174d8:	ldr	r2, [pc, #492]	; 176cc <flatcc_builder_end_table@@Base+0x22c>
   174dc:	add	r3, pc, r2
   174e0:	movw	r2, #1317	; 0x525
   174e4:	bl	12494 <__assert_fail@plt>
   174e8:	ldr	r0, [pc, #480]	; 176d0 <flatcc_builder_end_table@@Base+0x230>
   174ec:	ldr	r1, [fp, #-16]
   174f0:	ldr	r1, [r1, #4]
   174f4:	sub	r1, r1, #4
   174f8:	str	r1, [fp, #-20]	; 0xffffffec
   174fc:	ldr	r1, [fp, #-16]
   17500:	ldrh	r1, [r1, #8]
   17504:	add	r1, r1, #2
   17508:	lsl	r1, r1, #1
   1750c:	strh	r1, [fp, #-22]	; 0xffffffea
   17510:	ldrh	r1, [fp, #-22]	; 0xffffffea
   17514:	ldr	r2, [fp, #-20]	; 0xffffffec
   17518:	strh	r1, [r2]
   1751c:	ldr	r1, [fp, #-16]
   17520:	ldr	r1, [r1, #20]
   17524:	uxth	r1, r1
   17528:	add	r1, r1, #4
   1752c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17530:	strh	r1, [r2, #2]
   17534:	ldr	r1, [fp, #-20]	; 0xffffffec
   17538:	ldrh	r1, [r1]
   1753c:	ldr	r2, [fp, #-16]
   17540:	ldr	r2, [r2, #12]
   17544:	eor	r1, r1, r2
   17548:	mul	r1, r1, r0
   1754c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17550:	ldrh	r2, [r2, #2]
   17554:	eor	r1, r1, r2
   17558:	mul	r0, r1, r0
   1755c:	ldr	r1, [fp, #-16]
   17560:	str	r0, [r1, #12]
   17564:	ldr	r0, [fp, #-16]
   17568:	ldr	r1, [fp, #-20]	; 0xffffffec
   1756c:	ldrh	r2, [fp, #-22]	; 0xffffffea
   17570:	ldr	r3, [fp, #-16]
   17574:	ldr	r3, [r3, #12]
   17578:	uxth	r2, r2
   1757c:	bl	16b5c <flatcc_builder_create_cached_vtable@@Base>
   17580:	str	r0, [sp, #24]
   17584:	cmp	r0, #0
   17588:	bne	17598 <flatcc_builder_end_table@@Base+0xf8>
   1758c:	movw	r0, #0
   17590:	str	r0, [fp, #-12]
   17594:	b	176b8 <flatcc_builder_end_table@@Base+0x218>
   17598:	ldr	r0, [fp, #-20]	; 0xffffffec
   1759c:	ldrh	r2, [fp, #-22]	; 0xffffffea
   175a0:	mov	r1, #0
   175a4:	bl	12458 <memset@plt>
   175a8:	ldr	r1, [fp, #-16]
   175ac:	ldr	r2, [r1, #32]
   175b0:	ldr	r1, [r1, #76]	; 0x4c
   175b4:	ldr	r2, [r2, #20]
   175b8:	add	r1, r1, r2
   175bc:	str	r1, [sp, #16]
   175c0:	ldr	r1, [fp, #-16]
   175c4:	ldr	r1, [r1]
   175c8:	ldr	r2, [sp, #16]
   175cc:	sub	r1, r1, r2
   175d0:	asr	r1, r1, #1
   175d4:	str	r1, [sp, #20]
   175d8:	ldr	r1, [fp, #-16]
   175dc:	ldr	r2, [fp, #-16]
   175e0:	ldr	r2, [r2, #16]
   175e4:	ldr	r3, [fp, #-16]
   175e8:	ldr	r3, [r3, #20]
   175ec:	ldr	ip, [fp, #-16]
   175f0:	ldrh	ip, [ip, #130]	; 0x82
   175f4:	ldr	lr, [sp, #16]
   175f8:	ldr	r4, [sp, #20]
   175fc:	ldr	r5, [sp, #24]
   17600:	str	r0, [sp, #12]
   17604:	mov	r0, r1
   17608:	mov	r1, r2
   1760c:	mov	r2, r3
   17610:	uxth	r3, ip
   17614:	str	lr, [sp]
   17618:	str	r4, [sp, #4]
   1761c:	str	r5, [sp, #8]
   17620:	bl	16ee8 <flatcc_builder_create_table@@Base>
   17624:	str	r0, [sp, #28]
   17628:	movw	r1, #0
   1762c:	cmp	r1, r0
   17630:	bne	17640 <flatcc_builder_end_table@@Base+0x1a0>
   17634:	movw	r0, #0
   17638:	str	r0, [fp, #-12]
   1763c:	b	176b8 <flatcc_builder_end_table@@Base+0x218>
   17640:	ldr	r0, [fp, #-16]
   17644:	ldr	r0, [r0, #32]
   17648:	ldr	r0, [r0, #24]
   1764c:	ldr	r1, [fp, #-16]
   17650:	str	r0, [r1, #12]
   17654:	ldr	r0, [fp, #-16]
   17658:	ldr	r0, [r0, #32]
   1765c:	ldrh	r0, [r0, #28]
   17660:	ldr	r1, [fp, #-16]
   17664:	strh	r0, [r1, #8]
   17668:	ldr	r0, [fp, #-16]
   1766c:	ldr	r0, [r0, #52]	; 0x34
   17670:	ldr	r1, [fp, #-16]
   17674:	ldr	r1, [r1, #32]
   17678:	ldr	r1, [r1, #16]
   1767c:	add	r0, r0, r1
   17680:	ldr	r1, [fp, #-16]
   17684:	str	r0, [r1, #4]
   17688:	ldr	r0, [fp, #-16]
   1768c:	ldr	r0, [r0, #76]	; 0x4c
   17690:	ldr	r1, [fp, #-16]
   17694:	ldr	r1, [r1, #32]
   17698:	ldr	r1, [r1, #20]
   1769c:	add	r0, r0, r1
   176a0:	ldr	r1, [fp, #-16]
   176a4:	str	r0, [r1]
   176a8:	ldr	r0, [fp, #-16]
   176ac:	bl	155b8 <flatcc_builder_end_buffer@@Base+0x164>
   176b0:	ldr	r0, [sp, #28]
   176b4:	str	r0, [fp, #-12]
   176b8:	ldr	r0, [fp, #-12]
   176bc:	sub	sp, fp, #8
   176c0:	pop	{r4, r5, fp, pc}
   176c4:	andeq	r4, r0, r4, lsl r4
   176c8:	andeq	r3, r0, r0, ror #23
   176cc:	andeq	r4, r0, ip, lsr #10
   176d0:			; <UNDEFINED> instruction: 0x9e3779b1

000176d4 <flatcc_builder_create_vector@@Base>:
   176d4:	push	{fp, lr}
   176d8:	mov	fp, sp
   176dc:	sub	sp, sp, #112	; 0x70
   176e0:	ldr	ip, [fp, #12]
   176e4:	ldr	lr, [fp, #8]
   176e8:	str	r0, [fp, #-8]
   176ec:	str	r1, [fp, #-12]
   176f0:	str	r2, [fp, #-16]
   176f4:	str	r3, [fp, #-20]	; 0xffffffec
   176f8:	strh	lr, [fp, #-22]	; 0xffffffea
   176fc:	ldr	r0, [fp, #-16]
   17700:	ldr	r1, [fp, #12]
   17704:	cmp	r0, r1
   17708:	bls	1774c <flatcc_builder_create_vector@@Base+0x78>
   1770c:	ldr	r0, [fp, #-16]
   17710:	ldr	r1, [fp, #12]
   17714:	cmp	r0, r1
   17718:	bhi	17720 <flatcc_builder_create_vector@@Base+0x4c>
   1771c:	b	17740 <flatcc_builder_create_vector@@Base+0x6c>
   17720:	ldr	r0, [pc, #364]	; 17894 <flatcc_builder_create_vector@@Base+0x1c0>
   17724:	add	r0, pc, r0
   17728:	ldr	r1, [pc, #360]	; 17898 <flatcc_builder_create_vector@@Base+0x1c4>
   1772c:	add	r1, pc, r1
   17730:	ldr	r2, [pc, #356]	; 1789c <flatcc_builder_create_vector@@Base+0x1c8>
   17734:	add	r3, pc, r2
   17738:	movw	r2, #1365	; 0x555
   1773c:	bl	12494 <__assert_fail@plt>
   17740:	movw	r0, #0
   17744:	str	r0, [fp, #-4]
   17748:	b	17888 <flatcc_builder_create_vector@@Base+0x1b4>
   1774c:	sub	r0, fp, #22
   17750:	mov	r1, #4
   17754:	bl	16470 <flatcc_builder_start_vector@@Base+0xac>
   17758:	ldr	r0, [fp, #-8]
   1775c:	ldrh	r1, [fp, #-22]	; 0xffffffea
   17760:	bl	14f90 <flatcc_builder_create_buffer@@Base+0x3a8>
   17764:	ldr	r0, [fp, #-16]
   17768:	ldr	r1, [fp, #-20]	; 0xffffffec
   1776c:	mul	r0, r0, r1
   17770:	str	r0, [fp, #-28]	; 0xffffffe4
   17774:	ldr	r0, [fp, #-16]
   17778:	bl	14ab0 <flatcc_builder_embed_buffer@@Base+0x388>
   1777c:	str	r0, [fp, #-36]	; 0xffffffdc
   17780:	ldr	r0, [fp, #-8]
   17784:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17788:	ldrh	r2, [fp, #-22]	; 0xffffffea
   1778c:	bl	14a7c <flatcc_builder_embed_buffer@@Base+0x354>
   17790:	str	r0, [fp, #-32]	; 0xffffffe0
   17794:	mov	r0, #0
   17798:	str	r0, [sp, #4]
   1779c:	str	r0, [sp, #8]
   177a0:	ldr	r0, [sp, #4]
   177a4:	add	r0, r0, #4
   177a8:	str	r0, [sp, #4]
   177ac:	add	r0, sp, #4
   177b0:	add	r0, r0, #8
   177b4:	ldr	r1, [sp, #8]
   177b8:	sub	r2, fp, #36	; 0x24
   177bc:	str	r2, [r0, r1, lsl #3]
   177c0:	ldr	r1, [sp, #8]
   177c4:	add	r0, r0, r1, lsl #3
   177c8:	movw	r1, #4
   177cc:	str	r1, [r0, #4]
   177d0:	ldr	r0, [sp, #8]
   177d4:	add	r0, r0, #1
   177d8:	str	r0, [sp, #8]
   177dc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   177e0:	cmp	r0, #0
   177e4:	bls	17828 <flatcc_builder_create_vector@@Base+0x154>
   177e8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   177ec:	ldr	r1, [sp, #4]
   177f0:	add	r0, r1, r0
   177f4:	str	r0, [sp, #4]
   177f8:	ldr	r0, [fp, #-12]
   177fc:	add	r1, sp, #4
   17800:	add	r1, r1, #8
   17804:	ldr	r2, [sp, #8]
   17808:	str	r0, [r1, r2, lsl #3]
   1780c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17810:	ldr	r2, [sp, #8]
   17814:	add	r1, r1, r2, lsl #3
   17818:	str	r0, [r1, #4]
   1781c:	ldr	r0, [sp, #8]
   17820:	add	r0, r0, #1
   17824:	str	r0, [sp, #8]
   17828:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1782c:	cmp	r0, #0
   17830:	bls	17878 <flatcc_builder_create_vector@@Base+0x1a4>
   17834:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17838:	ldr	r1, [sp, #4]
   1783c:	add	r0, r1, r0
   17840:	str	r0, [sp, #4]
   17844:	add	r0, sp, #4
   17848:	add	r0, r0, #8
   1784c:	ldr	r1, [sp, #8]
   17850:	ldr	r2, [pc, #72]	; 178a0 <flatcc_builder_create_vector@@Base+0x1cc>
   17854:	ldr	r2, [pc, r2]
   17858:	str	r2, [r0, r1, lsl #3]
   1785c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   17860:	ldr	r2, [sp, #8]
   17864:	add	r0, r0, r2, lsl #3
   17868:	str	r1, [r0, #4]
   1786c:	ldr	r0, [sp, #8]
   17870:	add	r0, r0, #1
   17874:	str	r0, [sp, #8]
   17878:	ldr	r0, [fp, #-8]
   1787c:	add	r1, sp, #4
   17880:	bl	14ac4 <flatcc_builder_embed_buffer@@Base+0x39c>
   17884:	str	r0, [fp, #-4]
   17888:	ldr	r0, [fp, #-4]
   1788c:	mov	sp, fp
   17890:	pop	{fp, pc}
   17894:	andeq	r4, r0, r6, lsr #6
   17898:	andeq	r3, r0, r8, lsl #19
   1789c:	andeq	r4, r0, r9, lsr #6
   178a0:	andeq	r5, r1, r0, lsl #16

000178a4 <flatcc_builder_end_vector@@Base>:
   178a4:	push	{fp, lr}
   178a8:	mov	fp, sp
   178ac:	sub	sp, sp, #24
   178b0:	str	r0, [fp, #-8]
   178b4:	ldr	r0, [fp, #-8]
   178b8:	ldr	r0, [r0, #32]
   178bc:	ldrh	r0, [r0, #14]
   178c0:	cmp	r0, #4
   178c4:	bne	178cc <flatcc_builder_end_vector@@Base+0x28>
   178c8:	b	178ec <flatcc_builder_end_vector@@Base+0x48>
   178cc:	ldr	r0, [pc, #152]	; 1796c <flatcc_builder_end_vector@@Base+0xc8>
   178d0:	add	r0, pc, r0
   178d4:	ldr	r1, [pc, #148]	; 17970 <flatcc_builder_end_vector@@Base+0xcc>
   178d8:	add	r1, pc, r1
   178dc:	ldr	r2, [pc, #144]	; 17974 <flatcc_builder_end_vector@@Base+0xd0>
   178e0:	add	r3, pc, r2
   178e4:	movw	r2, #1400	; 0x578
   178e8:	bl	12494 <__assert_fail@plt>
   178ec:	ldr	r0, [fp, #-8]
   178f0:	ldr	r1, [fp, #-8]
   178f4:	ldr	r1, [r1, #16]
   178f8:	ldr	r2, [fp, #-8]
   178fc:	ldr	r2, [r2, #32]
   17900:	ldr	r2, [r2, #20]
   17904:	ldr	r3, [fp, #-8]
   17908:	ldr	r3, [r3, #32]
   1790c:	ldr	r3, [r3, #16]
   17910:	ldr	ip, [fp, #-8]
   17914:	ldrh	ip, [ip, #130]	; 0x82
   17918:	ldr	lr, [fp, #-8]
   1791c:	ldr	lr, [lr, #32]
   17920:	ldr	lr, [lr, #24]
   17924:	uxth	ip, ip
   17928:	str	ip, [sp]
   1792c:	str	lr, [sp, #4]
   17930:	bl	176d4 <flatcc_builder_create_vector@@Base>
   17934:	str	r0, [sp, #12]
   17938:	movw	r1, #0
   1793c:	cmp	r1, r0
   17940:	bne	17950 <flatcc_builder_end_vector@@Base+0xac>
   17944:	movw	r0, #0
   17948:	str	r0, [fp, #-4]
   1794c:	b	17960 <flatcc_builder_end_vector@@Base+0xbc>
   17950:	ldr	r0, [fp, #-8]
   17954:	bl	155b8 <flatcc_builder_end_buffer@@Base+0x164>
   17958:	ldr	r0, [sp, #12]
   1795c:	str	r0, [fp, #-4]
   17960:	ldr	r0, [fp, #-4]
   17964:	mov	sp, fp
   17968:	pop	{fp, pc}
   1796c:	andeq	r3, r0, lr, lsl fp
   17970:	ldrdeq	r3, [r0], -ip
   17974:	strdeq	r4, [r0], -r3

00017978 <flatcc_builder_vector_count@@Base>:
   17978:	sub	sp, sp, #4
   1797c:	str	r0, [sp]
   17980:	ldr	r0, [sp]
   17984:	ldr	r0, [r0, #32]
   17988:	ldr	r0, [r0, #20]
   1798c:	add	sp, sp, #4
   17990:	bx	lr

00017994 <flatcc_builder_vector_edit@@Base>:
   17994:	sub	sp, sp, #4
   17998:	str	r0, [sp]
   1799c:	ldr	r0, [sp]
   179a0:	ldr	r0, [r0, #16]
   179a4:	add	sp, sp, #4
   179a8:	bx	lr

000179ac <flatcc_builder_create_offset_vector_direct@@Base>:
   179ac:	push	{fp, lr}
   179b0:	mov	fp, sp
   179b4:	sub	sp, sp, #16
   179b8:	str	r0, [fp, #-4]
   179bc:	str	r1, [sp, #8]
   179c0:	str	r2, [sp, #4]
   179c4:	ldr	r0, [fp, #-4]
   179c8:	ldr	r1, [sp, #8]
   179cc:	ldr	r2, [sp, #4]
   179d0:	movw	r3, #0
   179d4:	bl	179e0 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   179d8:	mov	sp, fp
   179dc:	pop	{fp, pc}
   179e0:	push	{fp, lr}
   179e4:	mov	fp, sp
   179e8:	sub	sp, sp, #120	; 0x78
   179ec:	ldr	ip, [pc, #696]	; 17cac <flatcc_builder_create_offset_vector_direct@@Base+0x300>
   179f0:	str	r0, [fp, #-8]
   179f4:	str	r1, [fp, #-12]
   179f8:	str	r2, [fp, #-16]
   179fc:	str	r3, [fp, #-20]	; 0xffffffec
   17a00:	ldr	r0, [fp, #-16]
   17a04:	cmp	r0, ip
   17a08:	bls	17a18 <flatcc_builder_create_offset_vector_direct@@Base+0x6c>
   17a0c:	movw	r0, #0
   17a10:	str	r0, [fp, #-4]
   17a14:	b	17ca0 <flatcc_builder_create_offset_vector_direct@@Base+0x2f4>
   17a18:	ldr	r0, [fp, #-8]
   17a1c:	mov	r1, #4
   17a20:	str	r1, [sp]
   17a24:	bl	14f90 <flatcc_builder_create_buffer@@Base+0x3a8>
   17a28:	ldr	r0, [fp, #-16]
   17a2c:	lsl	r0, r0, #2
   17a30:	str	r0, [fp, #-24]	; 0xffffffe8
   17a34:	ldr	r0, [fp, #-16]
   17a38:	bl	14ab0 <flatcc_builder_embed_buffer@@Base+0x388>
   17a3c:	str	r0, [fp, #-32]	; 0xffffffe0
   17a40:	ldr	r0, [fp, #-8]
   17a44:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17a48:	ldr	r2, [sp]
   17a4c:	bl	14a7c <flatcc_builder_embed_buffer@@Base+0x354>
   17a50:	str	r0, [fp, #-28]	; 0xffffffe4
   17a54:	mov	r0, #0
   17a58:	str	r0, [sp, #4]
   17a5c:	str	r0, [sp, #8]
   17a60:	ldr	r0, [sp, #4]
   17a64:	add	r0, r0, #4
   17a68:	str	r0, [sp, #4]
   17a6c:	add	r0, sp, #4
   17a70:	add	r0, r0, #8
   17a74:	ldr	r1, [sp, #8]
   17a78:	sub	r2, fp, #32
   17a7c:	str	r2, [r0, r1, lsl #3]
   17a80:	ldr	r1, [sp, #8]
   17a84:	add	r0, r0, r1, lsl #3
   17a88:	movw	r1, #4
   17a8c:	str	r1, [r0, #4]
   17a90:	ldr	r0, [sp, #8]
   17a94:	add	r0, r0, #1
   17a98:	str	r0, [sp, #8]
   17a9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17aa0:	cmp	r0, #0
   17aa4:	bls	17ae8 <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   17aa8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17aac:	ldr	r1, [sp, #4]
   17ab0:	add	r0, r1, r0
   17ab4:	str	r0, [sp, #4]
   17ab8:	ldr	r0, [fp, #-12]
   17abc:	add	r1, sp, #4
   17ac0:	add	r1, r1, #8
   17ac4:	ldr	r2, [sp, #8]
   17ac8:	str	r0, [r1, r2, lsl #3]
   17acc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17ad0:	ldr	r2, [sp, #8]
   17ad4:	add	r1, r1, r2, lsl #3
   17ad8:	str	r0, [r1, #4]
   17adc:	ldr	r0, [sp, #8]
   17ae0:	add	r0, r0, #1
   17ae4:	str	r0, [sp, #8]
   17ae8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17aec:	cmp	r0, #0
   17af0:	bls	17b38 <flatcc_builder_create_offset_vector_direct@@Base+0x18c>
   17af4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17af8:	ldr	r1, [sp, #4]
   17afc:	add	r0, r1, r0
   17b00:	str	r0, [sp, #4]
   17b04:	add	r0, sp, #4
   17b08:	add	r0, r0, #8
   17b0c:	ldr	r1, [sp, #8]
   17b10:	ldr	r2, [pc, #444]	; 17cd4 <flatcc_builder_create_offset_vector_direct@@Base+0x328>
   17b14:	ldr	r2, [pc, r2]
   17b18:	str	r2, [r0, r1, lsl #3]
   17b1c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17b20:	ldr	r2, [sp, #8]
   17b24:	add	r0, r0, r2, lsl #3
   17b28:	str	r1, [r0, #4]
   17b2c:	ldr	r0, [sp, #8]
   17b30:	add	r0, r0, #1
   17b34:	str	r0, [sp, #8]
   17b38:	ldr	r0, [fp, #-8]
   17b3c:	ldr	r0, [r0, #136]	; 0x88
   17b40:	ldr	r1, [sp, #4]
   17b44:	sub	r0, r0, r1
   17b48:	str	r0, [fp, #-36]	; 0xffffffdc
   17b4c:	movw	r0, #0
   17b50:	str	r0, [fp, #-44]	; 0xffffffd4
   17b54:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17b58:	ldr	r1, [fp, #-16]
   17b5c:	cmp	r0, r1
   17b60:	bcs	17c90 <flatcc_builder_create_offset_vector_direct@@Base+0x2e4>
   17b64:	ldr	r0, [fp, #-12]
   17b68:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17b6c:	add	r0, r0, r1, lsl #2
   17b70:	ldr	r0, [r0]
   17b74:	cmp	r0, #0
   17b78:	beq	17c08 <flatcc_builder_create_offset_vector_direct@@Base+0x25c>
   17b7c:	ldr	r0, [fp, #-12]
   17b80:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17b84:	ldr	r0, [r0, r1, lsl #2]
   17b88:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17b8c:	sub	r0, r0, r2
   17b90:	sub	r0, r0, r1, lsl #2
   17b94:	sub	r0, r0, #4
   17b98:	str	r0, [fp, #-40]	; 0xffffffd8
   17b9c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17ba0:	bl	14ab0 <flatcc_builder_embed_buffer@@Base+0x388>
   17ba4:	ldr	r1, [fp, #-12]
   17ba8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   17bac:	add	r1, r1, r2, lsl #2
   17bb0:	str	r0, [r1]
   17bb4:	ldr	r0, [fp, #-20]	; 0xffffffec
   17bb8:	movw	r1, #0
   17bbc:	cmp	r0, r1
   17bc0:	beq	17c04 <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   17bc4:	ldr	r0, [fp, #-20]	; 0xffffffec
   17bc8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17bcc:	add	r0, r0, r1
   17bd0:	ldrb	r0, [r0]
   17bd4:	cmp	r0, #0
   17bd8:	beq	17be0 <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   17bdc:	b	17c00 <flatcc_builder_create_offset_vector_direct@@Base+0x254>
   17be0:	ldr	r0, [pc, #224]	; 17cc8 <flatcc_builder_create_offset_vector_direct@@Base+0x31c>
   17be4:	add	r0, pc, r0
   17be8:	ldr	r1, [pc, #220]	; 17ccc <flatcc_builder_create_offset_vector_direct@@Base+0x320>
   17bec:	add	r1, pc, r1
   17bf0:	ldr	r2, [pc, #216]	; 17cd0 <flatcc_builder_create_offset_vector_direct@@Base+0x324>
   17bf4:	add	r3, pc, r2
   17bf8:	movw	r2, #1457	; 0x5b1
   17bfc:	bl	12494 <__assert_fail@plt>
   17c00:	b	17c04 <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   17c04:	b	17c7c <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   17c08:	ldr	r0, [fp, #-20]	; 0xffffffec
   17c0c:	movw	r1, #0
   17c10:	cmp	r0, r1
   17c14:	beq	17c58 <flatcc_builder_create_offset_vector_direct@@Base+0x2ac>
   17c18:	ldr	r0, [fp, #-20]	; 0xffffffec
   17c1c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17c20:	add	r0, r0, r1
   17c24:	ldrb	r0, [r0]
   17c28:	cmp	r0, #0
   17c2c:	bne	17c34 <flatcc_builder_create_offset_vector_direct@@Base+0x288>
   17c30:	b	17c54 <flatcc_builder_create_offset_vector_direct@@Base+0x2a8>
   17c34:	ldr	r0, [pc, #128]	; 17cbc <flatcc_builder_create_offset_vector_direct@@Base+0x310>
   17c38:	add	r0, pc, r0
   17c3c:	ldr	r1, [pc, #124]	; 17cc0 <flatcc_builder_create_offset_vector_direct@@Base+0x314>
   17c40:	add	r1, pc, r1
   17c44:	ldr	r2, [pc, #120]	; 17cc4 <flatcc_builder_create_offset_vector_direct@@Base+0x318>
   17c48:	add	r3, pc, r2
   17c4c:	movw	r2, #1461	; 0x5b5
   17c50:	bl	12494 <__assert_fail@plt>
   17c54:	b	17c78 <flatcc_builder_create_offset_vector_direct@@Base+0x2cc>
   17c58:	ldr	r0, [pc, #80]	; 17cb0 <flatcc_builder_create_offset_vector_direct@@Base+0x304>
   17c5c:	add	r0, pc, r0
   17c60:	ldr	r1, [pc, #76]	; 17cb4 <flatcc_builder_create_offset_vector_direct@@Base+0x308>
   17c64:	add	r1, pc, r1
   17c68:	ldr	r2, [pc, #72]	; 17cb8 <flatcc_builder_create_offset_vector_direct@@Base+0x30c>
   17c6c:	add	r3, pc, r2
   17c70:	movw	r2, #1463	; 0x5b7
   17c74:	bl	12494 <__assert_fail@plt>
   17c78:	b	17c7c <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   17c7c:	b	17c80 <flatcc_builder_create_offset_vector_direct@@Base+0x2d4>
   17c80:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17c84:	add	r0, r0, #1
   17c88:	str	r0, [fp, #-44]	; 0xffffffd4
   17c8c:	b	17b54 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   17c90:	ldr	r0, [fp, #-8]
   17c94:	add	r1, sp, #4
   17c98:	bl	14ac4 <flatcc_builder_embed_buffer@@Base+0x39c>
   17c9c:	str	r0, [fp, #-4]
   17ca0:	ldr	r0, [fp, #-4]
   17ca4:	mov	sp, fp
   17ca8:	pop	{fp, pc}
   17cac:	svccc	0x00ffffff
   17cb0:	andeq	r4, r0, r5, lsl r6
   17cb4:	andeq	r3, r0, r0, asr r4
   17cb8:	andeq	r4, r0, r7, lsl #12
   17cbc:			; <UNDEFINED> instruction: 0x000046be
   17cc0:	andeq	r3, r0, r4, ror r4
   17cc4:	andeq	r4, r0, fp, lsr #12
   17cc8:	andeq	r4, r0, r1, lsl #13
   17ccc:	andeq	r3, r0, r8, asr #9
   17cd0:	andeq	r4, r0, pc, ror r6
   17cd4:	andeq	r5, r1, r0, asr #10

00017cd8 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   17cd8:	push	{fp, lr}
   17cdc:	mov	fp, sp
   17ce0:	sub	sp, sp, #16
   17ce4:	str	r0, [sp, #8]
   17ce8:	str	r1, [sp, #4]
   17cec:	ldr	r0, [sp, #8]
   17cf0:	ldr	r0, [r0, #32]
   17cf4:	ldrh	r0, [r0, #14]
   17cf8:	cmp	r0, #5
   17cfc:	bne	17d04 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   17d00:	b	17d24 <flatcc_builder_end_offset_vector_for_unions@@Base+0x4c>
   17d04:	ldr	r0, [pc, #112]	; 17d7c <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   17d08:	add	r0, pc, r0
   17d0c:	ldr	r1, [pc, #108]	; 17d80 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa8>
   17d10:	add	r1, pc, r1
   17d14:	ldr	r2, [pc, #104]	; 17d84 <flatcc_builder_end_offset_vector_for_unions@@Base+0xac>
   17d18:	add	r3, pc, r2
   17d1c:	movw	r2, #1493	; 0x5d5
   17d20:	bl	12494 <__assert_fail@plt>
   17d24:	ldr	r0, [sp, #8]
   17d28:	ldr	r1, [sp, #8]
   17d2c:	ldr	r1, [r1, #16]
   17d30:	ldr	r2, [sp, #8]
   17d34:	ldr	r2, [r2, #32]
   17d38:	ldr	r2, [r2, #20]
   17d3c:	ldr	r3, [sp, #4]
   17d40:	bl	179e0 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   17d44:	str	r0, [sp]
   17d48:	movw	r1, #0
   17d4c:	cmp	r1, r0
   17d50:	bne	17d60 <flatcc_builder_end_offset_vector_for_unions@@Base+0x88>
   17d54:	movw	r0, #0
   17d58:	str	r0, [fp, #-4]
   17d5c:	b	17d70 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
   17d60:	ldr	r0, [sp, #8]
   17d64:	bl	155b8 <flatcc_builder_end_buffer@@Base+0x164>
   17d68:	ldr	r0, [sp]
   17d6c:	str	r0, [fp, #-4]
   17d70:	ldr	r0, [fp, #-4]
   17d74:	mov	sp, fp
   17d78:	pop	{fp, pc}
   17d7c:	ldrdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   17d80:	andeq	r3, r0, r4, lsr #7
   17d84:	andeq	r3, r0, r8, asr #28

00017d88 <flatcc_builder_offset_vector_edit@@Base>:
   17d88:	sub	sp, sp, #4
   17d8c:	str	r0, [sp]
   17d90:	ldr	r0, [sp]
   17d94:	ldr	r0, [r0, #16]
   17d98:	add	sp, sp, #4
   17d9c:	bx	lr

00017da0 <flatcc_builder_offset_vector_count@@Base>:
   17da0:	sub	sp, sp, #4
   17da4:	str	r0, [sp]
   17da8:	ldr	r0, [sp]
   17dac:	ldr	r0, [r0, #32]
   17db0:	ldr	r0, [r0, #20]
   17db4:	add	sp, sp, #4
   17db8:	bx	lr

00017dbc <flatcc_builder_table_add_union@@Base>:
   17dbc:	push	{fp, lr}
   17dc0:	mov	fp, sp
   17dc4:	sub	sp, sp, #32
   17dc8:	str	r2, [fp, #-12]
   17dcc:	str	r3, [fp, #-8]
   17dd0:	str	r0, [sp, #16]
   17dd4:	str	r1, [sp, #12]
   17dd8:	ldr	r0, [sp, #16]
   17ddc:	ldr	r0, [r0, #32]
   17de0:	ldrh	r0, [r0, #14]
   17de4:	cmp	r0, #3
   17de8:	bne	17df0 <flatcc_builder_table_add_union@@Base+0x34>
   17dec:	b	17e10 <flatcc_builder_table_add_union@@Base+0x54>
   17df0:	ldr	r0, [pc, #388]	; 17f7c <flatcc_builder_table_add_union@@Base+0x1c0>
   17df4:	add	r0, pc, r0
   17df8:	ldr	r1, [pc, #384]	; 17f80 <flatcc_builder_table_add_union@@Base+0x1c4>
   17dfc:	add	r1, pc, r1
   17e00:	ldr	r2, [pc, #380]	; 17f84 <flatcc_builder_table_add_union@@Base+0x1c8>
   17e04:	add	r3, pc, r2
   17e08:	movw	r2, #1518	; 0x5ee
   17e0c:	bl	12494 <__assert_fail@plt>
   17e10:	ldrb	r0, [fp, #-12]
   17e14:	cmp	r0, #0
   17e18:	bne	17e70 <flatcc_builder_table_add_union@@Base+0xb4>
   17e1c:	ldr	r0, [fp, #-8]
   17e20:	cmp	r0, #0
   17e24:	beq	17e70 <flatcc_builder_table_add_union@@Base+0xb4>
   17e28:	ldrb	r0, [fp, #-12]
   17e2c:	cmp	r0, #0
   17e30:	bne	17e40 <flatcc_builder_table_add_union@@Base+0x84>
   17e34:	ldr	r0, [fp, #-8]
   17e38:	cmp	r0, #0
   17e3c:	bne	17e44 <flatcc_builder_table_add_union@@Base+0x88>
   17e40:	b	17e64 <flatcc_builder_table_add_union@@Base+0xa8>
   17e44:	ldr	r0, [pc, #316]	; 17f88 <flatcc_builder_table_add_union@@Base+0x1cc>
   17e48:	add	r0, pc, r0
   17e4c:	ldr	r1, [pc, #312]	; 17f8c <flatcc_builder_table_add_union@@Base+0x1d0>
   17e50:	add	r1, pc, r1
   17e54:	ldr	r2, [pc, #308]	; 17f90 <flatcc_builder_table_add_union@@Base+0x1d4>
   17e58:	add	r3, pc, r2
   17e5c:	movw	r2, #1519	; 0x5ef
   17e60:	bl	12494 <__assert_fail@plt>
   17e64:	mvn	r0, #0
   17e68:	str	r0, [fp, #-4]
   17e6c:	b	17f70 <flatcc_builder_table_add_union@@Base+0x1b4>
   17e70:	ldr	r0, [fp, #-8]
   17e74:	cmp	r0, #0
   17e78:	beq	17ee8 <flatcc_builder_table_add_union@@Base+0x12c>
   17e7c:	ldr	r0, [sp, #16]
   17e80:	ldr	r1, [sp, #12]
   17e84:	bl	17fac <flatcc_builder_table_add_offset@@Base>
   17e88:	str	r0, [sp, #8]
   17e8c:	ldr	r0, [sp, #8]
   17e90:	movw	r1, #0
   17e94:	cmp	r0, r1
   17e98:	bne	17edc <flatcc_builder_table_add_union@@Base+0x120>
   17e9c:	ldr	r0, [sp, #8]
   17ea0:	movw	r1, #0
   17ea4:	cmp	r0, r1
   17ea8:	beq	17eb0 <flatcc_builder_table_add_union@@Base+0xf4>
   17eac:	b	17ed0 <flatcc_builder_table_add_union@@Base+0x114>
   17eb0:	ldr	r0, [pc, #220]	; 17f94 <flatcc_builder_table_add_union@@Base+0x1d8>
   17eb4:	add	r0, pc, r0
   17eb8:	ldr	r1, [pc, #216]	; 17f98 <flatcc_builder_table_add_union@@Base+0x1dc>
   17ebc:	add	r1, pc, r1
   17ec0:	ldr	r2, [pc, #212]	; 17f9c <flatcc_builder_table_add_union@@Base+0x1e0>
   17ec4:	add	r3, pc, r2
   17ec8:	movw	r2, #1522	; 0x5f2
   17ecc:	bl	12494 <__assert_fail@plt>
   17ed0:	mvn	r0, #0
   17ed4:	str	r0, [fp, #-4]
   17ed8:	b	17f70 <flatcc_builder_table_add_union@@Base+0x1b4>
   17edc:	ldr	r0, [fp, #-8]
   17ee0:	ldr	r1, [sp, #8]
   17ee4:	str	r0, [r1]
   17ee8:	ldr	r0, [sp, #16]
   17eec:	ldr	r1, [sp, #12]
   17ef0:	sub	r1, r1, #1
   17ef4:	movw	r2, #1
   17ef8:	movw	r3, #1
   17efc:	uxth	r3, r3
   17f00:	bl	180dc <flatcc_builder_table_add@@Base>
   17f04:	str	r0, [sp, #4]
   17f08:	ldr	r0, [sp, #4]
   17f0c:	movw	r1, #0
   17f10:	cmp	r0, r1
   17f14:	bne	17f58 <flatcc_builder_table_add_union@@Base+0x19c>
   17f18:	ldr	r0, [sp, #4]
   17f1c:	movw	r1, #0
   17f20:	cmp	r0, r1
   17f24:	beq	17f2c <flatcc_builder_table_add_union@@Base+0x170>
   17f28:	b	17f4c <flatcc_builder_table_add_union@@Base+0x190>
   17f2c:	ldr	r0, [pc, #108]	; 17fa0 <flatcc_builder_table_add_union@@Base+0x1e4>
   17f30:	add	r0, pc, r0
   17f34:	ldr	r1, [pc, #104]	; 17fa4 <flatcc_builder_table_add_union@@Base+0x1e8>
   17f38:	add	r1, pc, r1
   17f3c:	ldr	r2, [pc, #100]	; 17fa8 <flatcc_builder_table_add_union@@Base+0x1ec>
   17f40:	add	r3, pc, r2
   17f44:	movw	r2, #1526	; 0x5f6
   17f48:	bl	12494 <__assert_fail@plt>
   17f4c:	mvn	r0, #0
   17f50:	str	r0, [fp, #-4]
   17f54:	b	17f70 <flatcc_builder_table_add_union@@Base+0x1b4>
   17f58:	ldrb	r0, [fp, #-12]
   17f5c:	bl	18244 <flatcc_builder_table_add@@Base+0x168>
   17f60:	ldr	r1, [sp, #4]
   17f64:	strb	r0, [r1]
   17f68:	movw	r0, #0
   17f6c:	str	r0, [fp, #-4]
   17f70:	ldr	r0, [fp, #-4]
   17f74:	mov	sp, fp
   17f78:	pop	{fp, pc}
   17f7c:	andeq	r3, r0, ip, ror #21
   17f80:			; <UNDEFINED> instruction: 0x000032b8
   17f84:	andeq	r3, r0, lr, asr #27
   17f88:	andeq	r3, r0, r2, ror #27
   17f8c:	andeq	r3, r0, r4, ror #4
   17f90:	andeq	r3, r0, sl, ror sp
   17f94:	muleq	r0, r8, sp
   17f98:	strdeq	r3, [r0], -r8
   17f9c:	andeq	r3, r0, lr, lsl #26
   17fa0:	andeq	r3, r0, r6, lsr #26
   17fa4:	andeq	r3, r0, ip, ror r1
   17fa8:	muleq	r0, r2, ip

00017fac <flatcc_builder_table_add_offset@@Base>:
   17fac:	push	{fp, lr}
   17fb0:	mov	fp, sp
   17fb4:	sub	sp, sp, #8
   17fb8:	str	r0, [sp, #4]
   17fbc:	str	r1, [sp]
   17fc0:	ldr	r0, [sp, #4]
   17fc4:	ldr	r0, [r0, #32]
   17fc8:	ldrh	r0, [r0, #14]
   17fcc:	cmp	r0, #3
   17fd0:	bne	17fd8 <flatcc_builder_table_add_offset@@Base+0x2c>
   17fd4:	b	17ff8 <flatcc_builder_table_add_offset@@Base+0x4c>
   17fd8:	ldr	r0, [pc, #212]	; 180b4 <flatcc_builder_table_add_offset@@Base+0x108>
   17fdc:	add	r0, pc, r0
   17fe0:	ldr	r1, [pc, #208]	; 180b8 <flatcc_builder_table_add_offset@@Base+0x10c>
   17fe4:	add	r1, pc, r1
   17fe8:	ldr	r2, [pc, #204]	; 180bc <flatcc_builder_table_add_offset@@Base+0x110>
   17fec:	add	r3, pc, r2
   17ff0:	movw	r2, #1811	; 0x713
   17ff4:	bl	12494 <__assert_fail@plt>
   17ff8:	ldr	r0, [sp]
   17ffc:	cmp	r0, #0
   18000:	blt	18018 <flatcc_builder_table_add_offset@@Base+0x6c>
   18004:	ldr	r0, [sp]
   18008:	movw	r1, #32764	; 0x7ffc
   1800c:	cmp	r0, r1
   18010:	bgt	18018 <flatcc_builder_table_add_offset@@Base+0x6c>
   18014:	b	18038 <flatcc_builder_table_add_offset@@Base+0x8c>
   18018:	ldr	r0, [pc, #160]	; 180c0 <flatcc_builder_table_add_offset@@Base+0x114>
   1801c:	add	r0, pc, r0
   18020:	ldr	r1, [pc, #156]	; 180c4 <flatcc_builder_table_add_offset@@Base+0x118>
   18024:	add	r1, pc, r1
   18028:	ldr	r2, [pc, #152]	; 180c8 <flatcc_builder_table_add_offset@@Base+0x11c>
   1802c:	add	r3, pc, r2
   18030:	movw	r2, #1812	; 0x714
   18034:	bl	12494 <__assert_fail@plt>
   18038:	ldr	r0, [sp, #4]
   1803c:	ldr	r0, [r0, #4]
   18040:	ldr	r1, [sp]
   18044:	add	r0, r0, r1, lsl #1
   18048:	ldrh	r0, [r0]
   1804c:	cmp	r0, #0
   18050:	beq	18074 <flatcc_builder_table_add_offset@@Base+0xc8>
   18054:	ldr	r0, [pc, #116]	; 180d0 <flatcc_builder_table_add_offset@@Base+0x124>
   18058:	add	r0, pc, r0
   1805c:	ldr	r1, [pc, #112]	; 180d4 <flatcc_builder_table_add_offset@@Base+0x128>
   18060:	add	r1, pc, r1
   18064:	ldr	r2, [pc, #108]	; 180d8 <flatcc_builder_table_add_offset@@Base+0x12c>
   18068:	add	r3, pc, r2
   1806c:	movw	r2, #1819	; 0x71b
   18070:	bl	12494 <__assert_fail@plt>
   18074:	ldr	r0, [pc, #80]	; 180cc <flatcc_builder_table_add_offset@@Base+0x120>
   18078:	ldr	r1, [sp]
   1807c:	ldr	r2, [sp, #4]
   18080:	ldr	r2, [r2, #12]
   18084:	eor	r1, r1, r2
   18088:	mul	r1, r1, r0
   1808c:	eor	r1, r1, #4
   18090:	mul	r0, r1, r0
   18094:	ldr	r1, [sp, #4]
   18098:	str	r0, [r1, #12]
   1809c:	ldr	r0, [sp, #4]
   180a0:	ldr	r1, [sp]
   180a4:	uxth	r1, r1
   180a8:	bl	1906c <flatcc_builder_table_add_copy@@Base+0x64>
   180ac:	mov	sp, fp
   180b0:	pop	{fp, pc}
   180b4:	andeq	r3, r0, r4, lsl #18
   180b8:	ldrdeq	r3, [r0], -r0
   180bc:	andeq	r3, r0, r8, ror #31
   180c0:	andeq	r3, r0, r8, lsr pc
   180c4:	muleq	r0, r0, r0
   180c8:	andeq	r3, r0, r8, lsr #31
   180cc:			; <UNDEFINED> instruction: 0x9e3779b1
   180d0:	andeq	r4, r0, r9, lsl r2
   180d4:	andeq	r3, r0, r4, asr r0
   180d8:	andeq	r3, r0, ip, ror #30

000180dc <flatcc_builder_table_add@@Base>:
   180dc:	push	{fp, lr}
   180e0:	mov	fp, sp
   180e4:	sub	sp, sp, #16
   180e8:	str	r0, [fp, #-4]
   180ec:	str	r1, [sp, #8]
   180f0:	str	r2, [sp, #4]
   180f4:	strh	r3, [sp, #2]
   180f8:	ldr	r0, [fp, #-4]
   180fc:	ldr	r0, [r0, #32]
   18100:	ldrh	r0, [r0, #14]
   18104:	cmp	r0, #3
   18108:	bne	18110 <flatcc_builder_table_add@@Base+0x34>
   1810c:	b	18130 <flatcc_builder_table_add@@Base+0x54>
   18110:	ldr	r0, [pc, #260]	; 1821c <flatcc_builder_table_add@@Base+0x140>
   18114:	add	r0, pc, r0
   18118:	ldr	r1, [pc, #256]	; 18220 <flatcc_builder_table_add@@Base+0x144>
   1811c:	add	r1, pc, r1
   18120:	ldr	r2, [pc, #252]	; 18224 <flatcc_builder_table_add@@Base+0x148>
   18124:	add	r3, pc, r2
   18128:	movw	r2, #1773	; 0x6ed
   1812c:	bl	12494 <__assert_fail@plt>
   18130:	ldr	r0, [sp, #8]
   18134:	cmp	r0, #0
   18138:	blt	18150 <flatcc_builder_table_add@@Base+0x74>
   1813c:	ldr	r0, [sp, #8]
   18140:	movw	r1, #32764	; 0x7ffc
   18144:	cmp	r0, r1
   18148:	bgt	18150 <flatcc_builder_table_add@@Base+0x74>
   1814c:	b	18170 <flatcc_builder_table_add@@Base+0x94>
   18150:	ldr	r0, [pc, #208]	; 18228 <flatcc_builder_table_add@@Base+0x14c>
   18154:	add	r0, pc, r0
   18158:	ldr	r1, [pc, #204]	; 1822c <flatcc_builder_table_add@@Base+0x150>
   1815c:	add	r1, pc, r1
   18160:	ldr	r2, [pc, #200]	; 18230 <flatcc_builder_table_add@@Base+0x154>
   18164:	add	r3, pc, r2
   18168:	movw	r2, #1774	; 0x6ee
   1816c:	bl	12494 <__assert_fail@plt>
   18170:	ldrh	r0, [sp, #2]
   18174:	ldr	r1, [fp, #-4]
   18178:	ldrh	r1, [r1, #130]	; 0x82
   1817c:	cmp	r0, r1
   18180:	ble	18190 <flatcc_builder_table_add@@Base+0xb4>
   18184:	ldrh	r0, [sp, #2]
   18188:	ldr	r1, [fp, #-4]
   1818c:	strh	r0, [r1, #130]	; 0x82
   18190:	ldr	r0, [fp, #-4]
   18194:	ldr	r0, [r0, #4]
   18198:	ldr	r1, [sp, #8]
   1819c:	add	r0, r0, r1, lsl #1
   181a0:	ldrh	r0, [r0]
   181a4:	cmp	r0, #0
   181a8:	beq	181cc <flatcc_builder_table_add@@Base+0xf0>
   181ac:	ldr	r0, [pc, #132]	; 18238 <flatcc_builder_table_add@@Base+0x15c>
   181b0:	add	r0, pc, r0
   181b4:	ldr	r1, [pc, #128]	; 1823c <flatcc_builder_table_add@@Base+0x160>
   181b8:	add	r1, pc, r1
   181bc:	ldr	r2, [pc, #124]	; 18240 <flatcc_builder_table_add@@Base+0x164>
   181c0:	add	r3, pc, r2
   181c4:	movw	r2, #1784	; 0x6f8
   181c8:	bl	12494 <__assert_fail@plt>
   181cc:	ldr	r0, [pc, #96]	; 18234 <flatcc_builder_table_add@@Base+0x158>
   181d0:	ldr	r1, [sp, #8]
   181d4:	ldr	r2, [fp, #-4]
   181d8:	ldr	r2, [r2, #12]
   181dc:	eor	r1, r1, r2
   181e0:	mul	r1, r1, r0
   181e4:	ldr	r2, [sp, #4]
   181e8:	eor	r1, r1, r2
   181ec:	mul	r0, r1, r0
   181f0:	ldr	r1, [fp, #-4]
   181f4:	str	r0, [r1, #12]
   181f8:	ldr	r0, [fp, #-4]
   181fc:	ldr	r1, [sp, #4]
   18200:	ldrh	r2, [sp, #2]
   18204:	ldr	r3, [sp, #8]
   18208:	uxth	r2, r2
   1820c:	uxth	r3, r3
   18210:	bl	18e88 <flatcc_builder_string_len@@Base+0x1c>
   18214:	mov	sp, fp
   18218:	pop	{fp, pc}
   1821c:	andeq	r3, r0, ip, asr #15
   18220:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   18224:	andeq	r3, r0, r6, ror #27
   18228:	andeq	r3, r0, r0, lsl #28
   1822c:	andeq	r2, r0, r8, asr pc
   18230:	andeq	r3, r0, r6, lsr #27
   18234:			; <UNDEFINED> instruction: 0x9e3779b1
   18238:	andeq	r4, r0, r1, asr #1
   1823c:	strdeq	r2, [r0], -ip
   18240:	andeq	r3, r0, sl, asr #26
   18244:	sub	sp, sp, #4
   18248:	strb	r0, [sp, #3]
   1824c:	ldrb	r0, [sp, #3]
   18250:	add	sp, sp, #4
   18254:	bx	lr

00018258 <flatcc_builder_table_add_union_vector@@Base>:
   18258:	push	{fp, lr}
   1825c:	mov	fp, sp
   18260:	sub	sp, sp, #24
   18264:	str	r2, [sp, #12]
   18268:	str	r3, [sp, #16]
   1826c:	str	r0, [sp, #8]
   18270:	str	r1, [sp, #4]
   18274:	ldr	r0, [sp, #8]
   18278:	ldr	r0, [r0, #32]
   1827c:	ldrh	r0, [r0, #14]
   18280:	cmp	r0, #3
   18284:	bne	1828c <flatcc_builder_table_add_union_vector@@Base+0x34>
   18288:	b	182ac <flatcc_builder_table_add_union_vector@@Base+0x54>
   1828c:	ldr	r0, [pc, #420]	; 18438 <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   18290:	add	r0, pc, r0
   18294:	ldr	r1, [pc, #416]	; 1843c <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   18298:	add	r1, pc, r1
   1829c:	ldr	r2, [pc, #412]	; 18440 <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   182a0:	add	r3, pc, r2
   182a4:	movw	r2, #1536	; 0x600
   182a8:	bl	12494 <__assert_fail@plt>
   182ac:	ldr	r0, [sp, #12]
   182b0:	cmp	r0, #0
   182b4:	movw	r0, #0
   182b8:	moveq	r0, #1
   182bc:	and	r0, r0, #1
   182c0:	ldr	r1, [sp, #16]
   182c4:	cmp	r1, #0
   182c8:	movw	r1, #0
   182cc:	moveq	r1, #1
   182d0:	and	r1, r1, #1
   182d4:	cmp	r0, r1
   182d8:	beq	1833c <flatcc_builder_table_add_union_vector@@Base+0xe4>
   182dc:	ldr	r0, [sp, #12]
   182e0:	cmp	r0, #0
   182e4:	movw	r0, #0
   182e8:	moveq	r0, #1
   182ec:	and	r0, r0, #1
   182f0:	ldr	r1, [sp, #16]
   182f4:	cmp	r1, #0
   182f8:	movw	r1, #0
   182fc:	moveq	r1, #1
   18300:	and	r1, r1, #1
   18304:	cmp	r0, r1
   18308:	bne	18310 <flatcc_builder_table_add_union_vector@@Base+0xb8>
   1830c:	b	18330 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   18310:	ldr	r0, [pc, #300]	; 18444 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   18314:	add	r0, pc, r0
   18318:	ldr	r1, [pc, #296]	; 18448 <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   1831c:	add	r1, pc, r1
   18320:	ldr	r2, [pc, #292]	; 1844c <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   18324:	add	r3, pc, r2
   18328:	movw	r2, #1537	; 0x601
   1832c:	bl	12494 <__assert_fail@plt>
   18330:	mvn	r0, #0
   18334:	str	r0, [fp, #-4]
   18338:	b	1842c <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   1833c:	ldr	r0, [sp, #12]
   18340:	cmp	r0, #0
   18344:	beq	18424 <flatcc_builder_table_add_union_vector@@Base+0x1cc>
   18348:	ldr	r0, [sp, #8]
   1834c:	ldr	r1, [sp, #4]
   18350:	sub	r1, r1, #1
   18354:	bl	17fac <flatcc_builder_table_add_offset@@Base>
   18358:	str	r0, [sp]
   1835c:	ldr	r0, [sp]
   18360:	movw	r1, #0
   18364:	cmp	r0, r1
   18368:	bne	183ac <flatcc_builder_table_add_union_vector@@Base+0x154>
   1836c:	ldr	r0, [sp]
   18370:	movw	r1, #0
   18374:	cmp	r0, r1
   18378:	beq	18380 <flatcc_builder_table_add_union_vector@@Base+0x128>
   1837c:	b	183a0 <flatcc_builder_table_add_union_vector@@Base+0x148>
   18380:	ldr	r0, [pc, #200]	; 18450 <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   18384:	add	r0, pc, r0
   18388:	ldr	r1, [pc, #196]	; 18454 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   1838c:	add	r1, pc, r1
   18390:	ldr	r2, [pc, #192]	; 18458 <flatcc_builder_table_add_union_vector@@Base+0x200>
   18394:	add	r3, pc, r2
   18398:	movw	r2, #1540	; 0x604
   1839c:	bl	12494 <__assert_fail@plt>
   183a0:	mvn	r0, #0
   183a4:	str	r0, [fp, #-4]
   183a8:	b	1842c <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   183ac:	ldr	r0, [sp, #12]
   183b0:	ldr	r1, [sp]
   183b4:	str	r0, [r1]
   183b8:	ldr	r0, [sp, #8]
   183bc:	ldr	r1, [sp, #4]
   183c0:	bl	17fac <flatcc_builder_table_add_offset@@Base>
   183c4:	str	r0, [sp]
   183c8:	ldr	r0, [sp]
   183cc:	movw	r1, #0
   183d0:	cmp	r0, r1
   183d4:	bne	18418 <flatcc_builder_table_add_union_vector@@Base+0x1c0>
   183d8:	ldr	r0, [sp]
   183dc:	movw	r1, #0
   183e0:	cmp	r0, r1
   183e4:	beq	183ec <flatcc_builder_table_add_union_vector@@Base+0x194>
   183e8:	b	1840c <flatcc_builder_table_add_union_vector@@Base+0x1b4>
   183ec:	ldr	r0, [pc, #104]	; 1845c <flatcc_builder_table_add_union_vector@@Base+0x204>
   183f0:	add	r0, pc, r0
   183f4:	ldr	r1, [pc, #100]	; 18460 <flatcc_builder_table_add_union_vector@@Base+0x208>
   183f8:	add	r1, pc, r1
   183fc:	ldr	r2, [pc, #96]	; 18464 <flatcc_builder_table_add_union_vector@@Base+0x20c>
   18400:	add	r3, pc, r2
   18404:	movw	r2, #1544	; 0x608
   18408:	bl	12494 <__assert_fail@plt>
   1840c:	mvn	r0, #0
   18410:	str	r0, [fp, #-4]
   18414:	b	1842c <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   18418:	ldr	r0, [sp, #16]
   1841c:	ldr	r1, [sp]
   18420:	str	r0, [r1]
   18424:	movw	r0, #0
   18428:	str	r0, [fp, #-4]
   1842c:	ldr	r0, [fp, #-4]
   18430:	mov	sp, fp
   18434:	pop	{fp, pc}
   18438:	andeq	r3, r0, r0, asr r6
   1843c:	andeq	r2, r0, ip, lsl lr
   18440:	andeq	r3, r0, r2, asr #19
   18444:			; <UNDEFINED> instruction: 0x000039b1
   18448:	muleq	r0, r8, sp
   1844c:	andeq	r3, r0, lr, lsr r9
   18450:	andeq	r3, r0, r8, asr #17
   18454:	andeq	r2, r0, r8, lsr #26
   18458:	andeq	r3, r0, lr, asr #17
   1845c:	andeq	r3, r0, ip, asr r8
   18460:			; <UNDEFINED> instruction: 0x00002cbc
   18464:	andeq	r3, r0, r2, ror #16

00018468 <flatcc_builder_create_union_vector@@Base>:
   18468:	push	{fp, lr}
   1846c:	mov	fp, sp
   18470:	sub	sp, sp, #48	; 0x30
   18474:	str	r1, [fp, #-4]
   18478:	str	r2, [fp, #-8]
   1847c:	str	r3, [fp, #-12]
   18480:	mov	r1, r0
   18484:	str	r0, [sp, #12]
   18488:	mov	r0, r1
   1848c:	movw	r1, #0
   18490:	and	r1, r1, #255	; 0xff
   18494:	movw	r2, #8
   18498:	bl	12458 <memset@plt>
   1849c:	ldr	r0, [fp, #-4]
   184a0:	bl	164a4 <flatcc_builder_start_offset_vector@@Base>
   184a4:	cmp	r0, #0
   184a8:	beq	184b0 <flatcc_builder_create_union_vector@@Base+0x48>
   184ac:	b	18594 <flatcc_builder_create_union_vector@@Base+0x12c>
   184b0:	ldr	r0, [fp, #-4]
   184b4:	ldr	r1, [fp, #-12]
   184b8:	bl	15c38 <flatcc_builder_extend_offset_vector@@Base>
   184bc:	movw	r1, #0
   184c0:	cmp	r1, r0
   184c4:	bne	184cc <flatcc_builder_create_union_vector@@Base+0x64>
   184c8:	b	18594 <flatcc_builder_create_union_vector@@Base+0x12c>
   184cc:	ldr	r0, [fp, #-4]
   184d0:	ldr	r1, [fp, #-12]
   184d4:	mov	r2, r1
   184d8:	str	r2, [sp, #8]
   184dc:	bl	15770 <flatcc_builder_start_struct@@Base+0xfc>
   184e0:	str	r0, [fp, #-16]
   184e4:	movw	r1, #0
   184e8:	cmp	r1, r0
   184ec:	bne	184f4 <flatcc_builder_create_union_vector@@Base+0x8c>
   184f0:	b	18594 <flatcc_builder_create_union_vector@@Base+0x12c>
   184f4:	ldr	r0, [fp, #-4]
   184f8:	bl	17d88 <flatcc_builder_offset_vector_edit@@Base>
   184fc:	str	r0, [fp, #-20]	; 0xffffffec
   18500:	movw	r0, #0
   18504:	str	r0, [sp, #24]
   18508:	ldr	r0, [sp, #24]
   1850c:	ldr	r1, [fp, #-12]
   18510:	cmp	r0, r1
   18514:	bcs	18558 <flatcc_builder_create_union_vector@@Base+0xf0>
   18518:	ldr	r0, [fp, #-8]
   1851c:	ldr	r1, [sp, #24]
   18520:	ldrb	r0, [r0, r1, lsl #3]
   18524:	ldr	r2, [fp, #-16]
   18528:	strb	r0, [r2, r1]
   1852c:	ldr	r0, [fp, #-8]
   18530:	ldr	r1, [sp, #24]
   18534:	add	r0, r0, r1, lsl #3
   18538:	ldr	r0, [r0, #4]
   1853c:	ldr	r2, [fp, #-20]	; 0xffffffec
   18540:	add	r1, r2, r1, lsl #2
   18544:	str	r0, [r1]
   18548:	ldr	r0, [sp, #24]
   1854c:	add	r0, r0, #1
   18550:	str	r0, [sp, #24]
   18554:	b	18508 <flatcc_builder_create_union_vector@@Base+0xa0>
   18558:	ldr	r1, [fp, #-4]
   1855c:	ldr	r2, [fp, #-16]
   18560:	ldr	r3, [fp, #-20]	; 0xffffffec
   18564:	ldr	r0, [fp, #-12]
   18568:	mov	ip, sp
   1856c:	str	r0, [ip]
   18570:	add	r0, sp, #16
   18574:	bl	1859c <flatcc_builder_create_union_vector_direct@@Base>
   18578:	ldr	r0, [sp, #16]
   1857c:	ldr	r1, [sp, #12]
   18580:	str	r0, [r1]
   18584:	ldr	r0, [sp, #20]
   18588:	str	r0, [r1, #4]
   1858c:	ldr	r0, [fp, #-4]
   18590:	bl	155b8 <flatcc_builder_end_buffer@@Base+0x164>
   18594:	mov	sp, fp
   18598:	pop	{fp, pc}

0001859c <flatcc_builder_create_union_vector_direct@@Base>:
   1859c:	push	{fp, lr}
   185a0:	mov	fp, sp
   185a4:	sub	sp, sp, #32
   185a8:	ldr	ip, [fp, #8]
   185ac:	str	r1, [fp, #-4]
   185b0:	str	r2, [fp, #-8]
   185b4:	str	r3, [fp, #-12]
   185b8:	mov	r1, r0
   185bc:	str	r0, [sp, #16]
   185c0:	mov	r0, r1
   185c4:	movw	r1, #0
   185c8:	and	r1, r1, #255	; 0xff
   185cc:	movw	r2, #8
   185d0:	str	ip, [sp, #12]
   185d4:	bl	12458 <memset@plt>
   185d8:	ldr	r0, [fp, #-4]
   185dc:	ldr	r1, [fp, #-12]
   185e0:	ldr	r2, [fp, #8]
   185e4:	ldr	r3, [fp, #-8]
   185e8:	bl	179e0 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   185ec:	ldr	r1, [sp, #16]
   185f0:	str	r0, [r1, #4]
   185f4:	movw	r2, #0
   185f8:	cmp	r2, r0
   185fc:	bne	18604 <flatcc_builder_create_union_vector_direct@@Base+0x68>
   18600:	b	18648 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   18604:	ldr	r0, [fp, #-4]
   18608:	ldr	r1, [fp, #-8]
   1860c:	ldr	r2, [fp, #8]
   18610:	movw	r3, #1
   18614:	movw	ip, #1
   18618:	uxth	ip, ip
   1861c:	str	ip, [sp]
   18620:	mvn	ip, #0
   18624:	str	ip, [sp, #4]
   18628:	bl	176d4 <flatcc_builder_create_vector@@Base>
   1862c:	ldr	r1, [sp, #16]
   18630:	str	r0, [r1]
   18634:	movw	r2, #0
   18638:	cmp	r2, r0
   1863c:	bne	18644 <flatcc_builder_create_union_vector_direct@@Base+0xa8>
   18640:	b	18648 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   18644:	b	18648 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   18648:	mov	sp, fp
   1864c:	pop	{fp, pc}

00018650 <flatcc_builder_start_union_vector@@Base>:
   18650:	push	{fp, lr}
   18654:	mov	fp, sp
   18658:	sub	sp, sp, #8
   1865c:	str	r0, [sp]
   18660:	ldr	r0, [sp]
   18664:	movw	r1, #4
   18668:	uxth	r1, r1
   1866c:	bl	15288 <flatcc_builder_start_buffer@@Base+0x178>
   18670:	cmp	r0, #0
   18674:	beq	18684 <flatcc_builder_start_union_vector@@Base+0x34>
   18678:	mvn	r0, #0
   1867c:	str	r0, [sp, #4]
   18680:	b	186c8 <flatcc_builder_start_union_vector@@Base+0x78>
   18684:	ldr	r0, [sp]
   18688:	ldr	r0, [r0, #32]
   1868c:	movw	r1, #8
   18690:	str	r1, [r0, #16]
   18694:	ldr	r0, [sp]
   18698:	ldr	r0, [r0, #32]
   1869c:	movw	r1, #0
   186a0:	str	r1, [r0, #20]
   186a4:	ldr	r0, [sp]
   186a8:	ldr	r0, [r0, #32]
   186ac:	movw	r1, #7
   186b0:	strh	r1, [r0, #14]
   186b4:	ldr	r0, [sp]
   186b8:	mvn	r1, #3
   186bc:	bl	156e4 <flatcc_builder_start_struct@@Base+0x70>
   186c0:	movw	r0, #0
   186c4:	str	r0, [sp, #4]
   186c8:	ldr	r0, [sp, #4]
   186cc:	mov	sp, fp
   186d0:	pop	{fp, pc}

000186d4 <flatcc_builder_end_union_vector@@Base>:
   186d4:	push	{fp, lr}
   186d8:	mov	fp, sp
   186dc:	sub	sp, sp, #40	; 0x28
   186e0:	str	r1, [fp, #-4]
   186e4:	mov	r1, r0
   186e8:	str	r0, [sp, #4]
   186ec:	mov	r0, r1
   186f0:	movw	r1, #0
   186f4:	and	r1, r1, #255	; 0xff
   186f8:	movw	r2, #8
   186fc:	bl	12458 <memset@plt>
   18700:	ldr	r0, [fp, #-4]
   18704:	ldr	r0, [r0, #32]
   18708:	ldrh	r0, [r0, #14]
   1870c:	cmp	r0, #7
   18710:	bne	18718 <flatcc_builder_end_union_vector@@Base+0x44>
   18714:	b	18738 <flatcc_builder_end_union_vector@@Base+0x64>
   18718:	ldr	r0, [pc, #260]	; 18824 <flatcc_builder_end_union_vector@@Base+0x150>
   1871c:	add	r0, pc, r0
   18720:	ldr	r1, [pc, #256]	; 18828 <flatcc_builder_end_union_vector@@Base+0x154>
   18724:	add	r1, pc, r1
   18728:	ldr	r2, [pc, #252]	; 1882c <flatcc_builder_end_union_vector@@Base+0x158>
   1872c:	add	r3, pc, r2
   18730:	movw	r2, #1617	; 0x651
   18734:	bl	12494 <__assert_fail@plt>
   18738:	ldr	r0, [fp, #-4]
   1873c:	bl	18830 <flatcc_builder_union_vector_count@@Base>
   18740:	str	r0, [sp, #16]
   18744:	ldr	r0, [fp, #-4]
   18748:	ldr	r1, [sp, #16]
   1874c:	movw	r2, #5
   18750:	mul	r1, r1, r2
   18754:	bl	15770 <flatcc_builder_start_struct@@Base+0xfc>
   18758:	str	r0, [fp, #-16]
   1875c:	movw	r1, #0
   18760:	cmp	r1, r0
   18764:	bne	1876c <flatcc_builder_end_union_vector@@Base+0x98>
   18768:	b	1881c <flatcc_builder_end_union_vector@@Base+0x148>
   1876c:	ldr	r0, [fp, #-16]
   18770:	ldr	r1, [sp, #16]
   18774:	add	r0, r0, r1, lsl #2
   18778:	str	r0, [fp, #-8]
   1877c:	ldr	r0, [fp, #-4]
   18780:	bl	1884c <flatcc_builder_union_vector_edit@@Base>
   18784:	str	r0, [fp, #-12]
   18788:	movw	r0, #0
   1878c:	str	r0, [sp, #20]
   18790:	ldr	r0, [sp, #20]
   18794:	ldr	r1, [sp, #16]
   18798:	cmp	r0, r1
   1879c:	bcs	187e0 <flatcc_builder_end_union_vector@@Base+0x10c>
   187a0:	ldr	r0, [fp, #-12]
   187a4:	ldr	r1, [sp, #20]
   187a8:	ldrb	r0, [r0, r1, lsl #3]
   187ac:	ldr	r2, [fp, #-8]
   187b0:	strb	r0, [r2, r1]
   187b4:	ldr	r0, [fp, #-12]
   187b8:	ldr	r1, [sp, #20]
   187bc:	add	r0, r0, r1, lsl #3
   187c0:	ldr	r0, [r0, #4]
   187c4:	ldr	r2, [fp, #-16]
   187c8:	add	r1, r2, r1, lsl #2
   187cc:	str	r0, [r1]
   187d0:	ldr	r0, [sp, #20]
   187d4:	add	r0, r0, #1
   187d8:	str	r0, [sp, #20]
   187dc:	b	18790 <flatcc_builder_end_union_vector@@Base+0xbc>
   187e0:	ldr	r1, [fp, #-4]
   187e4:	ldr	r2, [fp, #-8]
   187e8:	ldr	r3, [fp, #-16]
   187ec:	ldr	r0, [sp, #16]
   187f0:	mov	ip, sp
   187f4:	str	r0, [ip]
   187f8:	add	r0, sp, #8
   187fc:	bl	1859c <flatcc_builder_create_union_vector_direct@@Base>
   18800:	ldr	r0, [sp, #8]
   18804:	ldr	r1, [sp, #4]
   18808:	str	r0, [r1]
   1880c:	ldr	r0, [sp, #12]
   18810:	str	r0, [r1, #4]
   18814:	ldr	r0, [fp, #-4]
   18818:	bl	155b8 <flatcc_builder_end_buffer@@Base+0x164>
   1881c:	mov	sp, fp
   18820:	pop	{fp, pc}
   18824:	ldrdeq	r3, [r0], -r1
   18828:	muleq	r0, r0, r9
   1882c:	strdeq	r3, [r0], -r3	; <UNPREDICTABLE>

00018830 <flatcc_builder_union_vector_count@@Base>:
   18830:	sub	sp, sp, #4
   18834:	str	r0, [sp]
   18838:	ldr	r0, [sp]
   1883c:	ldr	r0, [r0, #32]
   18840:	ldr	r0, [r0, #20]
   18844:	add	sp, sp, #4
   18848:	bx	lr

0001884c <flatcc_builder_union_vector_edit@@Base>:
   1884c:	sub	sp, sp, #4
   18850:	str	r0, [sp]
   18854:	ldr	r0, [sp]
   18858:	ldr	r0, [r0, #16]
   1885c:	add	sp, sp, #4
   18860:	bx	lr

00018864 <flatcc_builder_extend_union_vector@@Base>:
   18864:	push	{fp, lr}
   18868:	mov	fp, sp
   1886c:	sub	sp, sp, #16
   18870:	ldr	r2, [pc, #68]	; 188bc <flatcc_builder_extend_union_vector@@Base+0x58>
   18874:	str	r0, [sp, #8]
   18878:	str	r1, [sp, #4]
   1887c:	ldr	r0, [sp, #8]
   18880:	ldr	r1, [sp, #4]
   18884:	bl	15934 <flatcc_builder_extend_vector@@Base+0x6c>
   18888:	cmp	r0, #0
   1888c:	beq	1889c <flatcc_builder_extend_union_vector@@Base+0x38>
   18890:	movw	r0, #0
   18894:	str	r0, [fp, #-4]
   18898:	b	188b0 <flatcc_builder_extend_union_vector@@Base+0x4c>
   1889c:	ldr	r0, [sp, #8]
   188a0:	ldr	r1, [sp, #4]
   188a4:	lsl	r1, r1, #3
   188a8:	bl	15770 <flatcc_builder_start_struct@@Base+0xfc>
   188ac:	str	r0, [fp, #-4]
   188b0:	ldr	r0, [fp, #-4]
   188b4:	mov	sp, fp
   188b8:	pop	{fp, pc}
   188bc:	svcne	0x00ffffff

000188c0 <flatcc_builder_truncate_union_vector@@Base>:
   188c0:	push	{fp, lr}
   188c4:	mov	fp, sp
   188c8:	sub	sp, sp, #16
   188cc:	str	r0, [sp, #8]
   188d0:	str	r1, [sp, #4]
   188d4:	ldr	r0, [sp, #8]
   188d8:	ldr	r0, [r0, #32]
   188dc:	ldrh	r0, [r0, #14]
   188e0:	cmp	r0, #7
   188e4:	bne	188ec <flatcc_builder_truncate_union_vector@@Base+0x2c>
   188e8:	b	1890c <flatcc_builder_truncate_union_vector@@Base+0x4c>
   188ec:	ldr	r0, [pc, #192]	; 189b4 <flatcc_builder_truncate_union_vector@@Base+0xf4>
   188f0:	add	r0, pc, r0
   188f4:	ldr	r1, [pc, #188]	; 189b8 <flatcc_builder_truncate_union_vector@@Base+0xf8>
   188f8:	add	r1, pc, r1
   188fc:	ldr	r2, [pc, #184]	; 189bc <flatcc_builder_truncate_union_vector@@Base+0xfc>
   18900:	add	r3, pc, r2
   18904:	movw	r2, #1665	; 0x681
   18908:	bl	12494 <__assert_fail@plt>
   1890c:	ldr	r0, [sp, #8]
   18910:	ldr	r0, [r0, #32]
   18914:	ldr	r0, [r0, #20]
   18918:	ldr	r1, [sp, #4]
   1891c:	cmp	r0, r1
   18920:	bcs	1896c <flatcc_builder_truncate_union_vector@@Base+0xac>
   18924:	ldr	r0, [sp, #8]
   18928:	ldr	r0, [r0, #32]
   1892c:	ldr	r0, [r0, #20]
   18930:	ldr	r1, [sp, #4]
   18934:	cmp	r0, r1
   18938:	bcc	18940 <flatcc_builder_truncate_union_vector@@Base+0x80>
   1893c:	b	18960 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   18940:	ldr	r0, [pc, #120]	; 189c0 <flatcc_builder_truncate_union_vector@@Base+0x100>
   18944:	add	r0, pc, r0
   18948:	ldr	r1, [pc, #116]	; 189c4 <flatcc_builder_truncate_union_vector@@Base+0x104>
   1894c:	add	r1, pc, r1
   18950:	ldr	r2, [pc, #112]	; 189c8 <flatcc_builder_truncate_union_vector@@Base+0x108>
   18954:	add	r3, pc, r2
   18958:	movw	r2, #1666	; 0x682
   1895c:	bl	12494 <__assert_fail@plt>
   18960:	mvn	r0, #0
   18964:	str	r0, [fp, #-4]
   18968:	b	189a8 <flatcc_builder_truncate_union_vector@@Base+0xe8>
   1896c:	ldr	r0, [sp, #4]
   18970:	ldr	r1, [sp, #8]
   18974:	ldr	r1, [r1, #32]
   18978:	ldr	r2, [r1, #20]
   1897c:	sub	r0, r2, r0
   18980:	str	r0, [r1, #20]
   18984:	ldr	r0, [sp, #8]
   18988:	ldr	r1, [sp, #8]
   1898c:	ldr	r1, [r1, #32]
   18990:	ldr	r1, [r1, #16]
   18994:	ldr	r2, [sp, #4]
   18998:	mul	r1, r1, r2
   1899c:	bl	16168 <flatcc_builder_truncate_vector@@Base+0x10c>
   189a0:	movw	r0, #0
   189a4:	str	r0, [fp, #-4]
   189a8:	ldr	r0, [fp, #-4]
   189ac:	mov	sp, fp
   189b0:	pop	{fp, pc}
   189b4:	strdeq	r3, [r0], -sp
   189b8:			; <UNDEFINED> instruction: 0x000027bc
   189bc:	andeq	r3, r0, r2, ror r4
   189c0:	andeq	r2, r0, sp, lsl #28
   189c4:	andeq	r2, r0, r8, ror #14
   189c8:	andeq	r3, r0, lr, lsl r4

000189cc <flatcc_builder_union_vector_push@@Base>:
   189cc:	push	{fp, lr}
   189d0:	mov	fp, sp
   189d4:	sub	sp, sp, #24
   189d8:	str	r1, [sp, #12]
   189dc:	str	r2, [sp, #16]
   189e0:	str	r0, [sp, #8]
   189e4:	ldr	r0, [sp, #8]
   189e8:	ldr	r0, [r0, #32]
   189ec:	ldrh	r0, [r0, #14]
   189f0:	cmp	r0, #7
   189f4:	bne	189fc <flatcc_builder_union_vector_push@@Base+0x30>
   189f8:	b	18a1c <flatcc_builder_union_vector_push@@Base+0x50>
   189fc:	ldr	r0, [pc, #160]	; 18aa4 <flatcc_builder_union_vector_push@@Base+0xd8>
   18a00:	add	r0, pc, r0
   18a04:	ldr	r1, [pc, #156]	; 18aa8 <flatcc_builder_union_vector_push@@Base+0xdc>
   18a08:	add	r1, pc, r1
   18a0c:	ldr	r2, [pc, #152]	; 18aac <flatcc_builder_union_vector_push@@Base+0xe0>
   18a10:	add	r3, pc, r2
   18a14:	movw	r2, #1677	; 0x68d
   18a18:	bl	12494 <__assert_fail@plt>
   18a1c:	ldr	r0, [pc, #140]	; 18ab0 <flatcc_builder_union_vector_push@@Base+0xe4>
   18a20:	ldr	r1, [sp, #8]
   18a24:	ldr	r1, [r1, #32]
   18a28:	ldr	r1, [r1, #20]
   18a2c:	cmp	r1, r0
   18a30:	bne	18a40 <flatcc_builder_union_vector_push@@Base+0x74>
   18a34:	movw	r0, #0
   18a38:	str	r0, [fp, #-4]
   18a3c:	b	18a98 <flatcc_builder_union_vector_push@@Base+0xcc>
   18a40:	ldr	r0, [sp, #8]
   18a44:	ldr	r0, [r0, #32]
   18a48:	ldr	r1, [r0, #20]
   18a4c:	add	r1, r1, #1
   18a50:	str	r1, [r0, #20]
   18a54:	ldr	r0, [sp, #8]
   18a58:	movw	r1, #8
   18a5c:	bl	15770 <flatcc_builder_start_struct@@Base+0xfc>
   18a60:	str	r0, [sp, #4]
   18a64:	movw	r1, #0
   18a68:	cmp	r1, r0
   18a6c:	bne	18a7c <flatcc_builder_union_vector_push@@Base+0xb0>
   18a70:	movw	r0, #0
   18a74:	str	r0, [fp, #-4]
   18a78:	b	18a98 <flatcc_builder_union_vector_push@@Base+0xcc>
   18a7c:	ldr	r0, [sp, #4]
   18a80:	ldr	r1, [sp, #12]
   18a84:	str	r1, [r0]
   18a88:	ldr	r1, [sp, #16]
   18a8c:	str	r1, [r0, #4]
   18a90:	ldr	r0, [sp, #4]
   18a94:	str	r0, [fp, #-4]
   18a98:	ldr	r0, [fp, #-4]
   18a9c:	mov	sp, fp
   18aa0:	pop	{fp, pc}
   18aa4:	andeq	r3, r0, sp, ror #5
   18aa8:	andeq	r2, r0, ip, lsr #13
   18aac:	andeq	r3, r0, r7, lsr #7
   18ab0:	svcne	0x00ffffff

00018ab4 <flatcc_builder_append_union_vector@@Base>:
   18ab4:	push	{fp, lr}
   18ab8:	mov	fp, sp
   18abc:	sub	sp, sp, #16
   18ac0:	str	r0, [sp, #8]
   18ac4:	str	r1, [sp, #4]
   18ac8:	str	r2, [sp]
   18acc:	ldr	r0, [sp, #8]
   18ad0:	ldr	r0, [r0, #32]
   18ad4:	ldrh	r0, [r0, #14]
   18ad8:	cmp	r0, #7
   18adc:	bne	18ae4 <flatcc_builder_append_union_vector@@Base+0x30>
   18ae0:	b	18b04 <flatcc_builder_append_union_vector@@Base+0x50>
   18ae4:	ldr	r0, [pc, #96]	; 18b4c <flatcc_builder_append_union_vector@@Base+0x98>
   18ae8:	add	r0, pc, r0
   18aec:	ldr	r1, [pc, #92]	; 18b50 <flatcc_builder_append_union_vector@@Base+0x9c>
   18af0:	add	r1, pc, r1
   18af4:	ldr	r2, [pc, #88]	; 18b54 <flatcc_builder_append_union_vector@@Base+0xa0>
   18af8:	add	r3, pc, r2
   18afc:	movw	r2, #1692	; 0x69c
   18b00:	bl	12494 <__assert_fail@plt>
   18b04:	ldr	r2, [pc, #76]	; 18b58 <flatcc_builder_append_union_vector@@Base+0xa4>
   18b08:	ldr	r0, [sp, #8]
   18b0c:	ldr	r1, [sp]
   18b10:	bl	15934 <flatcc_builder_extend_vector@@Base+0x6c>
   18b14:	cmp	r0, #0
   18b18:	beq	18b28 <flatcc_builder_append_union_vector@@Base+0x74>
   18b1c:	movw	r0, #0
   18b20:	str	r0, [fp, #-4]
   18b24:	b	18b40 <flatcc_builder_append_union_vector@@Base+0x8c>
   18b28:	ldr	r0, [sp, #8]
   18b2c:	ldr	r1, [sp, #4]
   18b30:	ldr	r2, [sp]
   18b34:	lsl	r2, r2, #3
   18b38:	bl	15b1c <flatcc_builder_vector_push@@Base+0x110>
   18b3c:	str	r0, [fp, #-4]
   18b40:	ldr	r0, [fp, #-4]
   18b44:	mov	sp, fp
   18b48:	pop	{fp, pc}
   18b4c:	andeq	r3, r0, r5, lsl #4
   18b50:	andeq	r2, r0, r4, asr #11
   18b54:	andeq	r3, r0, ip, lsr #6
   18b58:	svcne	0x00ffffff

00018b5c <flatcc_builder_create_string@@Base>:
   18b5c:	push	{fp, lr}
   18b60:	mov	fp, sp
   18b64:	sub	sp, sp, #96	; 0x60
   18b68:	str	r0, [fp, #-8]
   18b6c:	str	r1, [fp, #-12]
   18b70:	str	r2, [fp, #-16]
   18b74:	ldr	r0, [fp, #-16]
   18b78:	cmn	r0, #1
   18b7c:	bls	18b8c <flatcc_builder_create_string@@Base+0x30>
   18b80:	movw	r0, #0
   18b84:	str	r0, [fp, #-4]
   18b88:	b	18ca8 <flatcc_builder_create_string@@Base+0x14c>
   18b8c:	ldr	r0, [fp, #-16]
   18b90:	bl	14ab0 <flatcc_builder_embed_buffer@@Base+0x388>
   18b94:	str	r0, [fp, #-24]	; 0xffffffe8
   18b98:	ldr	r0, [fp, #-8]
   18b9c:	ldr	r1, [fp, #-16]
   18ba0:	add	r1, r1, #1
   18ba4:	mov	r2, #4
   18ba8:	bl	14a7c <flatcc_builder_embed_buffer@@Base+0x354>
   18bac:	add	r0, r0, #1
   18bb0:	str	r0, [fp, #-20]	; 0xffffffec
   18bb4:	mov	r0, #0
   18bb8:	str	r0, [sp]
   18bbc:	str	r0, [sp, #4]
   18bc0:	ldr	r0, [sp]
   18bc4:	add	r0, r0, #4
   18bc8:	str	r0, [sp]
   18bcc:	mov	r0, sp
   18bd0:	add	r0, r0, #8
   18bd4:	ldr	r1, [sp, #4]
   18bd8:	sub	r2, fp, #24
   18bdc:	str	r2, [r0, r1, lsl #3]
   18be0:	ldr	r1, [sp, #4]
   18be4:	add	r0, r0, r1, lsl #3
   18be8:	movw	r1, #4
   18bec:	str	r1, [r0, #4]
   18bf0:	ldr	r0, [sp, #4]
   18bf4:	add	r0, r0, #1
   18bf8:	str	r0, [sp, #4]
   18bfc:	ldr	r0, [fp, #-16]
   18c00:	cmp	r0, #0
   18c04:	bls	18c48 <flatcc_builder_create_string@@Base+0xec>
   18c08:	ldr	r0, [fp, #-16]
   18c0c:	ldr	r1, [sp]
   18c10:	add	r0, r1, r0
   18c14:	str	r0, [sp]
   18c18:	ldr	r0, [fp, #-12]
   18c1c:	mov	r1, sp
   18c20:	add	r1, r1, #8
   18c24:	ldr	r2, [sp, #4]
   18c28:	str	r0, [r1, r2, lsl #3]
   18c2c:	ldr	r0, [fp, #-16]
   18c30:	ldr	r2, [sp, #4]
   18c34:	add	r1, r1, r2, lsl #3
   18c38:	str	r0, [r1, #4]
   18c3c:	ldr	r0, [sp, #4]
   18c40:	add	r0, r0, #1
   18c44:	str	r0, [sp, #4]
   18c48:	ldr	r0, [fp, #-20]	; 0xffffffec
   18c4c:	cmp	r0, #0
   18c50:	bls	18c98 <flatcc_builder_create_string@@Base+0x13c>
   18c54:	ldr	r0, [fp, #-20]	; 0xffffffec
   18c58:	ldr	r1, [sp]
   18c5c:	add	r0, r1, r0
   18c60:	str	r0, [sp]
   18c64:	mov	r0, sp
   18c68:	add	r0, r0, #8
   18c6c:	ldr	r1, [sp, #4]
   18c70:	ldr	r2, [pc, #60]	; 18cb4 <flatcc_builder_create_string@@Base+0x158>
   18c74:	ldr	r2, [pc, r2]
   18c78:	str	r2, [r0, r1, lsl #3]
   18c7c:	ldr	r1, [fp, #-20]	; 0xffffffec
   18c80:	ldr	r2, [sp, #4]
   18c84:	add	r0, r0, r2, lsl #3
   18c88:	str	r1, [r0, #4]
   18c8c:	ldr	r0, [sp, #4]
   18c90:	add	r0, r0, #1
   18c94:	str	r0, [sp, #4]
   18c98:	ldr	r0, [fp, #-8]
   18c9c:	mov	r1, sp
   18ca0:	bl	14ac4 <flatcc_builder_embed_buffer@@Base+0x39c>
   18ca4:	str	r0, [fp, #-4]
   18ca8:	ldr	r0, [fp, #-4]
   18cac:	mov	sp, fp
   18cb0:	pop	{fp, pc}
   18cb4:	andeq	r4, r1, r0, ror #7

00018cb8 <flatcc_builder_create_string_str@@Base>:
   18cb8:	push	{fp, lr}
   18cbc:	mov	fp, sp
   18cc0:	sub	sp, sp, #24
   18cc4:	str	r0, [fp, #-4]
   18cc8:	str	r1, [fp, #-8]
   18ccc:	ldr	r0, [fp, #-4]
   18cd0:	ldr	r1, [fp, #-8]
   18cd4:	ldr	r2, [fp, #-8]
   18cd8:	str	r0, [sp, #12]
   18cdc:	mov	r0, r2
   18ce0:	str	r1, [sp, #8]
   18ce4:	bl	12440 <strlen@plt>
   18ce8:	ldr	r1, [sp, #12]
   18cec:	str	r0, [sp, #4]
   18cf0:	mov	r0, r1
   18cf4:	ldr	r1, [sp, #8]
   18cf8:	ldr	r2, [sp, #4]
   18cfc:	bl	18b5c <flatcc_builder_create_string@@Base>
   18d00:	mov	sp, fp
   18d04:	pop	{fp, pc}

00018d08 <flatcc_builder_create_string_strn@@Base>:
   18d08:	push	{fp, lr}
   18d0c:	mov	fp, sp
   18d10:	sub	sp, sp, #24
   18d14:	str	r0, [fp, #-4]
   18d18:	str	r1, [fp, #-8]
   18d1c:	str	r2, [sp, #12]
   18d20:	ldr	r0, [fp, #-4]
   18d24:	ldr	r1, [fp, #-8]
   18d28:	ldr	r2, [fp, #-8]
   18d2c:	ldr	r3, [sp, #12]
   18d30:	str	r0, [sp, #8]
   18d34:	mov	r0, r2
   18d38:	str	r1, [sp, #4]
   18d3c:	mov	r1, r3
   18d40:	bl	15ffc <flatcc_builder_append_string_strn@@Base+0x5c>
   18d44:	ldr	r1, [sp, #8]
   18d48:	str	r0, [sp]
   18d4c:	mov	r0, r1
   18d50:	ldr	r1, [sp, #4]
   18d54:	ldr	r2, [sp]
   18d58:	bl	18b5c <flatcc_builder_create_string@@Base>
   18d5c:	mov	sp, fp
   18d60:	pop	{fp, pc}

00018d64 <flatcc_builder_end_string@@Base>:
   18d64:	push	{fp, lr}
   18d68:	mov	fp, sp
   18d6c:	sub	sp, sp, #16
   18d70:	str	r0, [sp, #8]
   18d74:	ldr	r0, [sp, #8]
   18d78:	ldr	r0, [r0, #32]
   18d7c:	ldrh	r0, [r0, #14]
   18d80:	cmp	r0, #6
   18d84:	bne	18d8c <flatcc_builder_end_string@@Base+0x28>
   18d88:	b	18dac <flatcc_builder_end_string@@Base+0x48>
   18d8c:	ldr	r0, [pc, #168]	; 18e3c <flatcc_builder_end_string@@Base+0xd8>
   18d90:	add	r0, pc, r0
   18d94:	ldr	r1, [pc, #164]	; 18e40 <flatcc_builder_end_string@@Base+0xdc>
   18d98:	add	r1, pc, r1
   18d9c:	ldr	r2, [pc, #160]	; 18e44 <flatcc_builder_end_string@@Base+0xe0>
   18da0:	add	r3, pc, r2
   18da4:	movw	r2, #1732	; 0x6c4
   18da8:	bl	12494 <__assert_fail@plt>
   18dac:	ldr	r0, [sp, #8]
   18db0:	ldr	r0, [r0, #32]
   18db4:	ldr	r0, [r0, #20]
   18db8:	ldr	r1, [sp, #8]
   18dbc:	ldr	r1, [r1, #20]
   18dc0:	cmp	r0, r1
   18dc4:	bne	18dcc <flatcc_builder_end_string@@Base+0x68>
   18dc8:	b	18dec <flatcc_builder_end_string@@Base+0x88>
   18dcc:	ldr	r0, [pc, #116]	; 18e48 <flatcc_builder_end_string@@Base+0xe4>
   18dd0:	add	r0, pc, r0
   18dd4:	ldr	r1, [pc, #112]	; 18e4c <flatcc_builder_end_string@@Base+0xe8>
   18dd8:	add	r1, pc, r1
   18ddc:	ldr	r2, [pc, #108]	; 18e50 <flatcc_builder_end_string@@Base+0xec>
   18de0:	add	r3, pc, r2
   18de4:	movw	r2, #1733	; 0x6c5
   18de8:	bl	12494 <__assert_fail@plt>
   18dec:	ldr	r0, [sp, #8]
   18df0:	ldr	r1, [sp, #8]
   18df4:	ldr	r1, [r1, #16]
   18df8:	ldr	r2, [sp, #8]
   18dfc:	ldr	r2, [r2, #20]
   18e00:	bl	18b5c <flatcc_builder_create_string@@Base>
   18e04:	str	r0, [sp, #4]
   18e08:	movw	r1, #0
   18e0c:	cmp	r1, r0
   18e10:	bne	18e20 <flatcc_builder_end_string@@Base+0xbc>
   18e14:	movw	r0, #0
   18e18:	str	r0, [fp, #-4]
   18e1c:	b	18e30 <flatcc_builder_end_string@@Base+0xcc>
   18e20:	ldr	r0, [sp, #8]
   18e24:	bl	155b8 <flatcc_builder_end_buffer@@Base+0x164>
   18e28:	ldr	r0, [sp, #4]
   18e2c:	str	r0, [fp, #-4]
   18e30:	ldr	r0, [fp, #-4]
   18e34:	mov	sp, fp
   18e38:	pop	{fp, pc}
   18e3c:	andeq	r2, r0, r0, ror #16
   18e40:	andeq	r2, r0, ip, lsl r3
   18e44:	andeq	r3, r0, r3, lsl #2
   18e48:	andeq	r3, r0, r6, lsl r1
   18e4c:	ldrdeq	r2, [r0], -ip
   18e50:	andeq	r3, r0, r3, asr #1

00018e54 <flatcc_builder_string_edit@@Base>:
   18e54:	sub	sp, sp, #4
   18e58:	str	r0, [sp]
   18e5c:	ldr	r0, [sp]
   18e60:	ldr	r0, [r0, #16]
   18e64:	add	sp, sp, #4
   18e68:	bx	lr

00018e6c <flatcc_builder_string_len@@Base>:
   18e6c:	sub	sp, sp, #4
   18e70:	str	r0, [sp]
   18e74:	ldr	r0, [sp]
   18e78:	ldr	r0, [r0, #32]
   18e7c:	ldr	r0, [r0, #20]
   18e80:	add	sp, sp, #4
   18e84:	bx	lr
   18e88:	push	{fp, lr}
   18e8c:	mov	fp, sp
   18e90:	sub	sp, sp, #24
   18e94:	str	r0, [fp, #-8]
   18e98:	str	r1, [sp, #12]
   18e9c:	strh	r2, [sp, #10]
   18ea0:	strh	r3, [sp, #8]
   18ea4:	ldr	r0, [fp, #-8]
   18ea8:	ldr	r0, [r0, #20]
   18eac:	ldrh	r1, [sp, #10]
   18eb0:	add	r0, r0, r1
   18eb4:	sub	r0, r0, #1
   18eb8:	ldrh	r1, [sp, #10]
   18ebc:	sub	r1, r1, #1
   18ec0:	mvn	r2, #0
   18ec4:	eor	r1, r1, r2
   18ec8:	and	r0, r0, r1
   18ecc:	str	r0, [sp, #4]
   18ed0:	ldr	r0, [sp, #4]
   18ed4:	ldr	r1, [sp, #12]
   18ed8:	add	r0, r0, r1
   18edc:	ldr	r1, [fp, #-8]
   18ee0:	str	r0, [r1, #20]
   18ee4:	ldr	r1, [fp, #-8]
   18ee8:	ldr	r1, [r1, #24]
   18eec:	cmp	r0, r1
   18ef0:	bcc	18f24 <flatcc_builder_string_len@@Base+0xb8>
   18ef4:	ldr	r0, [fp, #-8]
   18ef8:	ldr	r1, [fp, #-8]
   18efc:	ldr	r1, [r1, #20]
   18f00:	add	r1, r1, #1
   18f04:	movw	r2, #65532	; 0xfffc
   18f08:	bl	198cc <flatcc_builder_get_emit_context@@Base+0x40>
   18f0c:	cmp	r0, #0
   18f10:	beq	18f20 <flatcc_builder_string_len@@Base+0xb4>
   18f14:	movw	r0, #0
   18f18:	str	r0, [fp, #-4]
   18f1c:	b	18f78 <flatcc_builder_string_len@@Base+0x10c>
   18f20:	b	18f24 <flatcc_builder_string_len@@Base+0xb8>
   18f24:	ldr	r0, [sp, #4]
   18f28:	add	r0, r0, #4
   18f2c:	ldr	r1, [fp, #-8]
   18f30:	ldr	r1, [r1, #4]
   18f34:	ldrh	r2, [sp, #8]
   18f38:	add	r1, r1, r2, lsl #1
   18f3c:	strh	r0, [r1]
   18f40:	ldrh	r0, [sp, #8]
   18f44:	ldr	r1, [fp, #-8]
   18f48:	ldrh	r1, [r1, #8]
   18f4c:	cmp	r0, r1
   18f50:	blt	18f64 <flatcc_builder_string_len@@Base+0xf8>
   18f54:	ldrh	r0, [sp, #8]
   18f58:	add	r0, r0, #1
   18f5c:	ldr	r1, [fp, #-8]
   18f60:	strh	r0, [r1, #8]
   18f64:	ldr	r0, [fp, #-8]
   18f68:	ldr	r0, [r0, #16]
   18f6c:	ldr	r1, [sp, #4]
   18f70:	add	r0, r0, r1
   18f74:	str	r0, [fp, #-4]
   18f78:	ldr	r0, [fp, #-4]
   18f7c:	mov	sp, fp
   18f80:	pop	{fp, pc}

00018f84 <flatcc_builder_table_edit@@Base>:
   18f84:	push	{fp, lr}
   18f88:	mov	fp, sp
   18f8c:	sub	sp, sp, #8
   18f90:	str	r0, [sp, #4]
   18f94:	str	r1, [sp]
   18f98:	ldr	r0, [sp, #4]
   18f9c:	ldr	r0, [r0, #32]
   18fa0:	ldrh	r0, [r0, #14]
   18fa4:	cmp	r0, #3
   18fa8:	bne	18fb0 <flatcc_builder_table_edit@@Base+0x2c>
   18fac:	b	18fd0 <flatcc_builder_table_edit@@Base+0x4c>
   18fb0:	ldr	r0, [pc, #68]	; 18ffc <flatcc_builder_table_edit@@Base+0x78>
   18fb4:	add	r0, pc, r0
   18fb8:	ldr	r1, [pc, #64]	; 19000 <flatcc_builder_table_edit@@Base+0x7c>
   18fbc:	add	r1, pc, r1
   18fc0:	ldr	r2, [pc, #60]	; 19004 <flatcc_builder_table_edit@@Base+0x80>
   18fc4:	add	r3, pc, r2
   18fc8:	movw	r2, #1794	; 0x702
   18fcc:	bl	12494 <__assert_fail@plt>
   18fd0:	ldr	r0, [sp, #4]
   18fd4:	ldr	r0, [r0, #16]
   18fd8:	ldr	r1, [sp, #4]
   18fdc:	ldr	r1, [r1, #20]
   18fe0:	add	r0, r0, r1
   18fe4:	ldr	r1, [sp]
   18fe8:	movw	r2, #0
   18fec:	sub	r1, r2, r1
   18ff0:	add	r0, r0, r1
   18ff4:	mov	sp, fp
   18ff8:	pop	{fp, pc}
   18ffc:	andeq	r2, r0, ip, lsr #18
   19000:	strdeq	r2, [r0], -r8
   19004:	ldrdeq	r2, [r0], -r4

00019008 <flatcc_builder_table_add_copy@@Base>:
   19008:	push	{fp, lr}
   1900c:	mov	fp, sp
   19010:	sub	sp, sp, #24
   19014:	ldr	ip, [fp, #8]
   19018:	str	r0, [fp, #-4]
   1901c:	str	r1, [fp, #-8]
   19020:	str	r2, [sp, #12]
   19024:	str	r3, [sp, #8]
   19028:	strh	ip, [sp, #6]
   1902c:	ldr	r0, [fp, #-4]
   19030:	ldr	r1, [fp, #-8]
   19034:	ldr	r2, [sp, #8]
   19038:	ldrh	r3, [sp, #6]
   1903c:	bl	180dc <flatcc_builder_table_add@@Base>
   19040:	str	r0, [sp]
   19044:	movw	r1, #0
   19048:	cmp	r0, r1
   1904c:	beq	19060 <flatcc_builder_table_add_copy@@Base+0x58>
   19050:	ldr	r0, [sp]
   19054:	ldr	r1, [sp, #12]
   19058:	ldr	r2, [sp, #8]
   1905c:	bl	123e0 <memcpy@plt>
   19060:	ldr	r0, [sp]
   19064:	mov	sp, fp
   19068:	pop	{fp, pc}
   1906c:	push	{fp, lr}
   19070:	mov	fp, sp
   19074:	sub	sp, sp, #16
   19078:	str	r0, [sp, #8]
   1907c:	strh	r1, [sp, #6]
   19080:	ldr	r0, [sp, #8]
   19084:	ldr	r0, [r0, #20]
   19088:	add	r0, r0, #4
   1908c:	sub	r0, r0, #1
   19090:	mvn	r1, #3
   19094:	and	r0, r0, r1
   19098:	str	r0, [sp]
   1909c:	ldr	r0, [sp]
   190a0:	add	r0, r0, #4
   190a4:	ldr	r1, [sp, #8]
   190a8:	str	r0, [r1, #20]
   190ac:	ldr	r1, [sp, #8]
   190b0:	ldr	r1, [r1, #24]
   190b4:	cmp	r0, r1
   190b8:	bls	190e8 <flatcc_builder_table_add_copy@@Base+0xe0>
   190bc:	ldr	r0, [sp, #8]
   190c0:	ldr	r1, [sp, #8]
   190c4:	ldr	r1, [r1, #20]
   190c8:	movw	r2, #65532	; 0xfffc
   190cc:	bl	198cc <flatcc_builder_get_emit_context@@Base+0x40>
   190d0:	cmp	r0, #0
   190d4:	beq	190e4 <flatcc_builder_table_add_copy@@Base+0xdc>
   190d8:	movw	r0, #0
   190dc:	str	r0, [fp, #-4]
   190e0:	b	19154 <flatcc_builder_table_add_copy@@Base+0x14c>
   190e4:	b	190e8 <flatcc_builder_table_add_copy@@Base+0xe0>
   190e8:	ldr	r0, [sp]
   190ec:	add	r0, r0, #4
   190f0:	ldr	r1, [sp, #8]
   190f4:	ldr	r1, [r1, #4]
   190f8:	ldrh	r2, [sp, #6]
   190fc:	add	r1, r1, r2, lsl #1
   19100:	strh	r0, [r1]
   19104:	ldrh	r0, [sp, #6]
   19108:	ldr	r1, [sp, #8]
   1910c:	ldrh	r1, [r1, #8]
   19110:	cmp	r0, r1
   19114:	blt	19128 <flatcc_builder_table_add_copy@@Base+0x120>
   19118:	ldrh	r0, [sp, #6]
   1911c:	add	r0, r0, #1
   19120:	ldr	r1, [sp, #8]
   19124:	strh	r0, [r1, #8]
   19128:	ldr	r0, [sp]
   1912c:	ldr	r1, [sp, #8]
   19130:	ldr	r2, [r1]
   19134:	add	r3, r2, #2
   19138:	str	r3, [r1]
   1913c:	strh	r0, [r2]
   19140:	ldr	r0, [sp, #8]
   19144:	ldr	r0, [r0, #16]
   19148:	ldr	r1, [sp]
   1914c:	add	r0, r0, r1
   19150:	str	r0, [fp, #-4]
   19154:	ldr	r0, [fp, #-4]
   19158:	mov	sp, fp
   1915c:	pop	{fp, pc}

00019160 <flatcc_builder_push_buffer_alignment@@Base>:
   19160:	sub	sp, sp, #8
   19164:	str	r0, [sp, #4]
   19168:	ldr	r0, [sp, #4]
   1916c:	ldrh	r0, [r0, #128]	; 0x80
   19170:	strh	r0, [sp, #2]
   19174:	ldr	r0, [sp, #4]
   19178:	movw	r1, #4
   1917c:	strh	r1, [r0, #128]	; 0x80
   19180:	ldrh	r0, [sp, #2]
   19184:	add	sp, sp, #8
   19188:	bx	lr

0001918c <flatcc_builder_pop_buffer_alignment@@Base>:
   1918c:	push	{fp, lr}
   19190:	mov	fp, sp
   19194:	sub	sp, sp, #8
   19198:	str	r0, [sp, #4]
   1919c:	strh	r1, [sp, #2]
   191a0:	ldr	r0, [sp, #4]
   191a4:	ldrh	r1, [sp, #2]
   191a8:	bl	14f90 <flatcc_builder_create_buffer@@Base+0x3a8>
   191ac:	mov	sp, fp
   191b0:	pop	{fp, pc}

000191b4 <flatcc_builder_get_buffer_alignment@@Base>:
   191b4:	sub	sp, sp, #4
   191b8:	str	r0, [sp]
   191bc:	ldr	r0, [sp]
   191c0:	ldrh	r0, [r0, #128]	; 0x80
   191c4:	add	sp, sp, #4
   191c8:	bx	lr

000191cc <flatcc_builder_set_vtable_clustering@@Base>:
   191cc:	sub	sp, sp, #8
   191d0:	str	r0, [sp, #4]
   191d4:	str	r1, [sp]
   191d8:	ldr	r0, [sp]
   191dc:	cmp	r0, #0
   191e0:	movw	r0, #0
   191e4:	movne	r0, #1
   191e8:	mvn	r1, #0
   191ec:	eor	r0, r0, r1
   191f0:	and	r0, r0, #1
   191f4:	ldr	r1, [sp, #4]
   191f8:	str	r0, [r1, #180]	; 0xb4
   191fc:	add	sp, sp, #8
   19200:	bx	lr

00019204 <flatcc_builder_set_block_align@@Base>:
   19204:	sub	sp, sp, #8
   19208:	str	r0, [sp, #4]
   1920c:	strh	r1, [sp, #2]
   19210:	ldrh	r0, [sp, #2]
   19214:	ldr	r1, [sp, #4]
   19218:	strh	r0, [r1, #132]	; 0x84
   1921c:	add	sp, sp, #8
   19220:	bx	lr

00019224 <flatcc_builder_get_level@@Base>:
   19224:	sub	sp, sp, #4
   19228:	str	r0, [sp]
   1922c:	ldr	r0, [sp]
   19230:	ldr	r0, [r0, #156]	; 0x9c
   19234:	add	sp, sp, #4
   19238:	bx	lr

0001923c <flatcc_builder_set_max_level@@Base>:
   1923c:	sub	sp, sp, #8
   19240:	str	r0, [sp, #4]
   19244:	str	r1, [sp]
   19248:	ldr	r0, [sp]
   1924c:	ldr	r1, [sp, #4]
   19250:	str	r0, [r1, #176]	; 0xb0
   19254:	ldr	r0, [sp, #4]
   19258:	ldr	r0, [r0, #160]	; 0xa0
   1925c:	ldr	r1, [sp, #4]
   19260:	ldr	r1, [r1, #176]	; 0xb0
   19264:	cmp	r0, r1
   19268:	bge	1927c <flatcc_builder_set_max_level@@Base+0x40>
   1926c:	ldr	r0, [sp, #4]
   19270:	ldr	r0, [r0, #176]	; 0xb0
   19274:	ldr	r1, [sp, #4]
   19278:	str	r0, [r1, #160]	; 0xa0
   1927c:	add	sp, sp, #8
   19280:	bx	lr

00019284 <flatcc_builder_get_buffer_size@@Base>:
   19284:	sub	sp, sp, #4
   19288:	str	r0, [sp]
   1928c:	ldr	r0, [sp]
   19290:	ldr	r0, [r0, #140]	; 0x8c
   19294:	ldr	r1, [sp]
   19298:	ldr	r1, [r1, #136]	; 0x88
   1929c:	sub	r0, r0, r1
   192a0:	add	sp, sp, #4
   192a4:	bx	lr

000192a8 <flatcc_builder_get_buffer_start@@Base>:
   192a8:	sub	sp, sp, #4
   192ac:	str	r0, [sp]
   192b0:	ldr	r0, [sp]
   192b4:	ldr	r0, [r0, #136]	; 0x88
   192b8:	add	sp, sp, #4
   192bc:	bx	lr

000192c0 <flatcc_builder_get_buffer_end@@Base>:
   192c0:	sub	sp, sp, #4
   192c4:	str	r0, [sp]
   192c8:	ldr	r0, [sp]
   192cc:	ldr	r0, [r0, #140]	; 0x8c
   192d0:	add	sp, sp, #4
   192d4:	bx	lr

000192d8 <flatcc_builder_set_vtable_cache_limit@@Base>:
   192d8:	sub	sp, sp, #8
   192dc:	str	r0, [sp, #4]
   192e0:	str	r1, [sp]
   192e4:	ldr	r0, [sp]
   192e8:	ldr	r1, [sp, #4]
   192ec:	str	r0, [r1, #172]	; 0xac
   192f0:	add	sp, sp, #8
   192f4:	bx	lr

000192f8 <flatcc_builder_set_identifier@@Base>:
   192f8:	sub	sp, sp, #16
   192fc:	str	r0, [sp, #12]
   19300:	str	r1, [sp, #8]
   19304:	ldr	r0, [sp, #12]
   19308:	add	r0, r0, #168	; 0xa8
   1930c:	ldr	r1, [sp, #8]
   19310:	movw	r2, #0
   19314:	cmp	r1, r2
   19318:	str	r0, [sp, #4]
   1931c:	beq	1932c <flatcc_builder_set_identifier@@Base+0x34>
   19320:	ldr	r0, [sp, #8]
   19324:	str	r0, [sp]
   19328:	b	1933c <flatcc_builder_set_identifier@@Base+0x44>
   1932c:	ldr	r0, [pc, #56]	; 1936c <flatcc_builder_set_identifier@@Base+0x74>
   19330:	ldr	r0, [pc, r0]
   19334:	str	r0, [sp]
   19338:	b	1933c <flatcc_builder_set_identifier@@Base+0x44>
   1933c:	ldr	r0, [sp]
   19340:	ldrb	r1, [r0]
   19344:	ldr	r2, [sp, #4]
   19348:	strb	r1, [r2]
   1934c:	ldrb	r1, [r0, #1]
   19350:	strb	r1, [r2, #1]
   19354:	ldrb	r1, [r0, #2]
   19358:	strb	r1, [r2, #2]
   1935c:	ldrb	r0, [r0, #3]
   19360:	strb	r0, [r2, #3]
   19364:	add	sp, sp, #16
   19368:	bx	lr
   1936c:	andeq	r3, r1, r4, lsr #26

00019370 <flatcc_builder_get_type@@Base>:
   19370:	sub	sp, sp, #8
   19374:	str	r0, [sp, #4]
   19378:	ldr	r0, [sp, #4]
   1937c:	ldr	r0, [r0, #32]
   19380:	movw	r1, #0
   19384:	cmp	r0, r1
   19388:	beq	193a0 <flatcc_builder_get_type@@Base+0x30>
   1938c:	ldr	r0, [sp, #4]
   19390:	ldr	r0, [r0, #32]
   19394:	ldrh	r0, [r0, #14]
   19398:	str	r0, [sp]
   1939c:	b	193ac <flatcc_builder_get_type@@Base+0x3c>
   193a0:	movw	r0, #0
   193a4:	str	r0, [sp]
   193a8:	b	193ac <flatcc_builder_get_type@@Base+0x3c>
   193ac:	ldr	r0, [sp]
   193b0:	add	sp, sp, #8
   193b4:	bx	lr

000193b8 <flatcc_builder_get_type_at@@Base>:
   193b8:	sub	sp, sp, #12
   193bc:	str	r0, [sp, #4]
   193c0:	str	r1, [sp]
   193c4:	ldr	r0, [sp]
   193c8:	cmp	r0, #1
   193cc:	blt	193e4 <flatcc_builder_get_type_at@@Base+0x2c>
   193d0:	ldr	r0, [sp]
   193d4:	ldr	r1, [sp, #4]
   193d8:	ldr	r1, [r1, #156]	; 0x9c
   193dc:	cmp	r0, r1
   193e0:	ble	193f0 <flatcc_builder_get_type_at@@Base+0x38>
   193e4:	movw	r0, #0
   193e8:	str	r0, [sp, #8]
   193ec:	b	1941c <flatcc_builder_get_type_at@@Base+0x64>
   193f0:	ldr	r0, [sp, #4]
   193f4:	ldr	r0, [r0, #32]
   193f8:	ldr	r1, [sp]
   193fc:	ldr	r2, [sp, #4]
   19400:	ldr	r2, [r2, #156]	; 0x9c
   19404:	sub	r1, r1, r2
   19408:	movw	r2, #36	; 0x24
   1940c:	mul	r1, r1, r2
   19410:	add	r0, r0, r1
   19414:	ldrh	r0, [r0, #14]
   19418:	str	r0, [sp, #8]
   1941c:	ldr	r0, [sp, #8]
   19420:	add	sp, sp, #12
   19424:	bx	lr

00019428 <flatcc_builder_get_direct_buffer@@Base>:
   19428:	push	{fp, lr}
   1942c:	mov	fp, sp
   19430:	sub	sp, sp, #16
   19434:	str	r0, [sp, #8]
   19438:	str	r1, [sp, #4]
   1943c:	ldr	r0, [sp, #8]
   19440:	ldr	r0, [r0, #184]	; 0xb8
   19444:	cmp	r0, #0
   19448:	beq	19464 <flatcc_builder_get_direct_buffer@@Base+0x3c>
   1944c:	ldr	r0, [sp, #8]
   19450:	add	r0, r0, #188	; 0xbc
   19454:	ldr	r1, [sp, #4]
   19458:	bl	19498 <flatcc_builder_get_direct_buffer@@Base+0x70>
   1945c:	str	r0, [fp, #-4]
   19460:	b	1948c <flatcc_builder_get_direct_buffer@@Base+0x64>
   19464:	ldr	r0, [sp, #4]
   19468:	movw	r1, #0
   1946c:	cmp	r0, r1
   19470:	beq	19480 <flatcc_builder_get_direct_buffer@@Base+0x58>
   19474:	ldr	r0, [sp, #4]
   19478:	movw	r1, #0
   1947c:	str	r1, [r0]
   19480:	b	19484 <flatcc_builder_get_direct_buffer@@Base+0x5c>
   19484:	movw	r0, #0
   19488:	str	r0, [fp, #-4]
   1948c:	ldr	r0, [fp, #-4]
   19490:	mov	sp, fp
   19494:	pop	{fp, pc}
   19498:	sub	sp, sp, #12
   1949c:	str	r0, [sp, #4]
   194a0:	str	r1, [sp]
   194a4:	ldr	r0, [sp, #4]
   194a8:	ldr	r0, [r0]
   194ac:	ldr	r1, [sp, #4]
   194b0:	ldr	r1, [r1, #4]
   194b4:	cmp	r0, r1
   194b8:	bne	194ec <flatcc_builder_get_direct_buffer@@Base+0xc4>
   194bc:	ldr	r0, [sp]
   194c0:	movw	r1, #0
   194c4:	cmp	r0, r1
   194c8:	beq	194dc <flatcc_builder_get_direct_buffer@@Base+0xb4>
   194cc:	ldr	r0, [sp, #4]
   194d0:	ldr	r0, [r0, #24]
   194d4:	ldr	r1, [sp]
   194d8:	str	r0, [r1]
   194dc:	ldr	r0, [sp, #4]
   194e0:	ldr	r0, [r0, #8]
   194e4:	str	r0, [sp, #8]
   194e8:	b	19510 <flatcc_builder_get_direct_buffer@@Base+0xe8>
   194ec:	ldr	r0, [sp]
   194f0:	movw	r1, #0
   194f4:	cmp	r0, r1
   194f8:	beq	19508 <flatcc_builder_get_direct_buffer@@Base+0xe0>
   194fc:	ldr	r0, [sp]
   19500:	movw	r1, #0
   19504:	str	r1, [r0]
   19508:	movw	r0, #0
   1950c:	str	r0, [sp, #8]
   19510:	ldr	r0, [sp, #8]
   19514:	add	sp, sp, #12
   19518:	bx	lr

0001951c <flatcc_builder_copy_buffer@@Base>:
   1951c:	push	{fp, lr}
   19520:	mov	fp, sp
   19524:	sub	sp, sp, #16
   19528:	str	r0, [sp, #8]
   1952c:	str	r1, [sp, #4]
   19530:	str	r2, [sp]
   19534:	ldr	r0, [sp, #8]
   19538:	ldr	r0, [r0, #184]	; 0xb8
   1953c:	cmp	r0, #0
   19540:	bne	19550 <flatcc_builder_copy_buffer@@Base+0x34>
   19544:	movw	r0, #0
   19548:	str	r0, [fp, #-4]
   1954c:	b	195a4 <flatcc_builder_copy_buffer@@Base+0x88>
   19550:	ldr	r0, [sp, #8]
   19554:	add	r0, r0, #188	; 0xbc
   19558:	ldr	r1, [sp, #4]
   1955c:	ldr	r2, [sp]
   19560:	bl	1a20c <flatcc_emitter_copy_buffer@@Base>
   19564:	str	r0, [sp, #4]
   19568:	ldr	r0, [sp, #4]
   1956c:	movw	r1, #0
   19570:	cmp	r0, r1
   19574:	beq	1957c <flatcc_builder_copy_buffer@@Base+0x60>
   19578:	b	1959c <flatcc_builder_copy_buffer@@Base+0x80>
   1957c:	ldr	r0, [pc, #44]	; 195b0 <flatcc_builder_copy_buffer@@Base+0x94>
   19580:	add	r0, pc, r0
   19584:	ldr	r1, [pc, #40]	; 195b4 <flatcc_builder_copy_buffer@@Base+0x98>
   19588:	add	r1, pc, r1
   1958c:	ldr	r2, [pc, #36]	; 195b8 <flatcc_builder_copy_buffer@@Base+0x9c>
   19590:	add	r3, pc, r2
   19594:	movw	r2, #1926	; 0x786
   19598:	bl	12494 <__assert_fail@plt>
   1959c:	ldr	r0, [sp, #4]
   195a0:	str	r0, [fp, #-4]
   195a4:	ldr	r0, [fp, #-4]
   195a8:	mov	sp, fp
   195ac:	pop	{fp, pc}
   195b0:	andeq	r1, r0, sl, lsl #6
   195b4:	andeq	r1, r0, ip, lsr #22
   195b8:	muleq	r0, r3, sl

000195bc <flatcc_builder_finalize_buffer@@Base>:
   195bc:	push	{fp, lr}
   195c0:	mov	fp, sp
   195c4:	sub	sp, sp, #16
   195c8:	str	r0, [fp, #-4]
   195cc:	str	r1, [sp, #8]
   195d0:	ldr	r0, [fp, #-4]
   195d4:	bl	19284 <flatcc_builder_get_buffer_size@@Base>
   195d8:	str	r0, [sp]
   195dc:	ldr	r0, [sp, #8]
   195e0:	movw	r1, #0
   195e4:	cmp	r0, r1
   195e8:	beq	195f8 <flatcc_builder_finalize_buffer@@Base+0x3c>
   195ec:	ldr	r0, [sp]
   195f0:	ldr	r1, [sp, #8]
   195f4:	str	r0, [r1]
   195f8:	ldr	r0, [sp]
   195fc:	bl	1241c <malloc@plt>
   19600:	str	r0, [sp, #4]
   19604:	ldr	r0, [sp, #4]
   19608:	movw	r1, #0
   1960c:	cmp	r0, r1
   19610:	bne	19634 <flatcc_builder_finalize_buffer@@Base+0x78>
   19614:	ldr	r0, [pc, #144]	; 196ac <flatcc_builder_finalize_buffer@@Base+0xf0>
   19618:	add	r0, pc, r0
   1961c:	ldr	r1, [pc, #140]	; 196b0 <flatcc_builder_finalize_buffer@@Base+0xf4>
   19620:	add	r1, pc, r1
   19624:	ldr	r2, [pc, #136]	; 196b4 <flatcc_builder_finalize_buffer@@Base+0xf8>
   19628:	add	r3, pc, r2
   1962c:	movw	r2, #1944	; 0x798
   19630:	bl	12494 <__assert_fail@plt>
   19634:	ldr	r0, [fp, #-4]
   19638:	ldr	r1, [sp, #4]
   1963c:	ldr	r2, [sp]
   19640:	bl	1951c <flatcc_builder_copy_buffer@@Base>
   19644:	movw	r1, #0
   19648:	cmp	r0, r1
   1964c:	bne	19670 <flatcc_builder_finalize_buffer@@Base+0xb4>
   19650:	ldr	r0, [pc, #96]	; 196b8 <flatcc_builder_finalize_buffer@@Base+0xfc>
   19654:	add	r0, pc, r0
   19658:	ldr	r1, [pc, #92]	; 196bc <flatcc_builder_finalize_buffer@@Base+0x100>
   1965c:	add	r1, pc, r1
   19660:	ldr	r2, [pc, #88]	; 196c0 <flatcc_builder_finalize_buffer@@Base+0x104>
   19664:	add	r3, pc, r2
   19668:	movw	r2, #1948	; 0x79c
   1966c:	bl	12494 <__assert_fail@plt>
   19670:	b	19674 <flatcc_builder_finalize_buffer@@Base+0xb8>
   19674:	ldr	r0, [sp, #4]
   19678:	movw	r1, #0
   1967c:	cmp	r0, r1
   19680:	bne	196a0 <flatcc_builder_finalize_buffer@@Base+0xe4>
   19684:	ldr	r0, [sp, #8]
   19688:	movw	r1, #0
   1968c:	cmp	r0, r1
   19690:	beq	196a0 <flatcc_builder_finalize_buffer@@Base+0xe4>
   19694:	ldr	r0, [sp, #8]
   19698:	movw	r1, #0
   1969c:	str	r1, [r0]
   196a0:	ldr	r0, [sp, #4]
   196a4:	mov	sp, fp
   196a8:	pop	{fp, pc}
   196ac:	andeq	r2, r0, r9, asr ip
   196b0:	muleq	r0, r4, sl
   196b4:	andeq	r2, r0, r0, asr #20
   196b8:	andeq	r2, r0, sp, lsl ip
   196bc:	andeq	r1, r0, r8, asr sl
   196c0:	andeq	r2, r0, r4, lsl #20

000196c4 <flatcc_builder_finalize_aligned_buffer@@Base>:
   196c4:	push	{fp, lr}
   196c8:	mov	fp, sp
   196cc:	sub	sp, sp, #24
   196d0:	str	r0, [fp, #-4]
   196d4:	str	r1, [fp, #-8]
   196d8:	ldr	r0, [fp, #-4]
   196dc:	bl	19284 <flatcc_builder_get_buffer_size@@Base>
   196e0:	str	r0, [sp, #4]
   196e4:	ldr	r0, [fp, #-8]
   196e8:	movw	r1, #0
   196ec:	cmp	r0, r1
   196f0:	beq	19700 <flatcc_builder_finalize_aligned_buffer@@Base+0x3c>
   196f4:	ldr	r0, [sp, #4]
   196f8:	ldr	r1, [fp, #-8]
   196fc:	str	r0, [r1]
   19700:	ldr	r0, [fp, #-4]
   19704:	bl	191b4 <flatcc_builder_get_buffer_alignment@@Base>
   19708:	uxth	r0, r0
   1970c:	str	r0, [sp, #8]
   19710:	ldr	r0, [sp, #4]
   19714:	ldr	r1, [sp, #8]
   19718:	add	r0, r0, r1
   1971c:	sub	r0, r0, #1
   19720:	ldr	r1, [sp, #8]
   19724:	sub	r1, r1, #1
   19728:	mvn	r2, #0
   1972c:	eor	r1, r1, r2
   19730:	and	r0, r0, r1
   19734:	str	r0, [sp, #4]
   19738:	ldr	r0, [sp, #8]
   1973c:	ldr	r1, [sp, #4]
   19740:	bl	197c8 <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   19744:	str	r0, [sp, #12]
   19748:	ldr	r0, [sp, #12]
   1974c:	movw	r1, #0
   19750:	cmp	r0, r1
   19754:	bne	1975c <flatcc_builder_finalize_aligned_buffer@@Base+0x98>
   19758:	b	19790 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   1975c:	ldr	r0, [fp, #-4]
   19760:	ldr	r1, [sp, #12]
   19764:	ldr	r2, [sp, #4]
   19768:	bl	1951c <flatcc_builder_copy_buffer@@Base>
   1976c:	movw	r1, #0
   19770:	cmp	r0, r1
   19774:	bne	1978c <flatcc_builder_finalize_aligned_buffer@@Base+0xc8>
   19778:	ldr	r0, [sp, #12]
   1977c:	bl	123d4 <free@plt>
   19780:	movw	r0, #0
   19784:	str	r0, [sp, #12]
   19788:	b	19790 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   1978c:	b	19790 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   19790:	ldr	r0, [sp, #12]
   19794:	movw	r1, #0
   19798:	cmp	r0, r1
   1979c:	bne	197bc <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   197a0:	ldr	r0, [fp, #-8]
   197a4:	movw	r1, #0
   197a8:	cmp	r0, r1
   197ac:	beq	197bc <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   197b0:	ldr	r0, [fp, #-8]
   197b4:	movw	r1, #0
   197b8:	str	r1, [r0]
   197bc:	ldr	r0, [sp, #12]
   197c0:	mov	sp, fp
   197c4:	pop	{fp, pc}
   197c8:	push	{fp, lr}
   197cc:	mov	fp, sp
   197d0:	sub	sp, sp, #16
   197d4:	str	r0, [fp, #-4]
   197d8:	str	r1, [sp, #8]
   197dc:	movw	r0, #0
   197e0:	str	r0, [sp]
   197e4:	ldr	r0, [fp, #-4]
   197e8:	cmp	r0, #4
   197ec:	bcs	197f8 <flatcc_builder_finalize_aligned_buffer@@Base+0x134>
   197f0:	movw	r0, #4
   197f4:	str	r0, [fp, #-4]
   197f8:	ldr	r1, [fp, #-4]
   197fc:	ldr	r2, [sp, #8]
   19800:	mov	r0, sp
   19804:	bl	1244c <posix_memalign@plt>
   19808:	str	r0, [sp, #4]
   1980c:	ldr	r0, [sp, #4]
   19810:	cmp	r0, #0
   19814:	beq	19838 <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   19818:	ldr	r0, [sp]
   1981c:	movw	r1, #0
   19820:	cmp	r0, r1
   19824:	beq	19838 <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   19828:	ldr	r0, [sp]
   1982c:	bl	123d4 <free@plt>
   19830:	movw	r0, #0
   19834:	str	r0, [sp]
   19838:	ldr	r0, [sp]
   1983c:	mov	sp, fp
   19840:	pop	{fp, pc}

00019844 <flatcc_builder_aligned_alloc@@Base>:
   19844:	push	{fp, lr}
   19848:	mov	fp, sp
   1984c:	sub	sp, sp, #8
   19850:	str	r0, [sp, #4]
   19854:	str	r1, [sp]
   19858:	ldr	r0, [sp, #4]
   1985c:	ldr	r1, [sp]
   19860:	bl	197c8 <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   19864:	mov	sp, fp
   19868:	pop	{fp, pc}

0001986c <flatcc_builder_aligned_free@@Base>:
   1986c:	push	{fp, lr}
   19870:	mov	fp, sp
   19874:	sub	sp, sp, #8
   19878:	str	r0, [sp, #4]
   1987c:	ldr	r0, [sp, #4]
   19880:	bl	123d4 <free@plt>
   19884:	mov	sp, fp
   19888:	pop	{fp, pc}

0001988c <flatcc_builder_get_emit_context@@Base>:
   1988c:	sub	sp, sp, #4
   19890:	str	r0, [sp]
   19894:	ldr	r0, [sp]
   19898:	ldr	r0, [r0, #36]	; 0x24
   1989c:	add	sp, sp, #4
   198a0:	bx	lr
   198a4:	sub	sp, sp, #8
   198a8:	str	r0, [sp, #4]
   198ac:	strh	r1, [sp, #2]
   198b0:	ldr	r0, [sp, #4]
   198b4:	ldr	r0, [r0, #140]	; 0x8c
   198b8:	ldrh	r1, [sp, #2]
   198bc:	sub	r1, r1, #1
   198c0:	and	r0, r0, r1
   198c4:	add	sp, sp, #8
   198c8:	bx	lr
   198cc:	push	{fp, lr}
   198d0:	mov	fp, sp
   198d4:	sub	sp, sp, #32
   198d8:	str	r0, [fp, #-8]
   198dc:	str	r1, [fp, #-12]
   198e0:	str	r2, [sp, #16]
   198e4:	ldr	r0, [fp, #-8]
   198e8:	add	r0, r0, #52	; 0x34
   198ec:	add	r0, r0, #8
   198f0:	str	r0, [sp, #12]
   198f4:	ldr	r0, [fp, #-8]
   198f8:	ldr	r0, [r0, #48]	; 0x30
   198fc:	ldr	r1, [fp, #-8]
   19900:	ldr	r1, [r1, #40]	; 0x28
   19904:	ldr	r2, [sp, #12]
   19908:	ldr	r3, [fp, #-8]
   1990c:	ldr	r3, [r3, #28]
   19910:	ldr	ip, [fp, #-12]
   19914:	add	r3, r3, ip
   19918:	str	r0, [sp, #8]
   1991c:	mov	r0, r1
   19920:	mov	r1, r2
   19924:	mov	r2, r3
   19928:	movw	r3, #1
   1992c:	str	r3, [sp, #4]
   19930:	ldr	ip, [sp, #4]
   19934:	str	ip, [sp]
   19938:	ldr	lr, [sp, #8]
   1993c:	blx	lr
   19940:	cmp	r0, #0
   19944:	beq	19954 <flatcc_builder_get_emit_context@@Base+0xc8>
   19948:	mvn	r0, #0
   1994c:	str	r0, [fp, #-4]
   19950:	b	19968 <flatcc_builder_get_emit_context@@Base+0xdc>
   19954:	ldr	r0, [fp, #-8]
   19958:	ldr	r1, [sp, #16]
   1995c:	bl	156e4 <flatcc_builder_start_struct@@Base+0x70>
   19960:	movw	r0, #0
   19964:	str	r0, [fp, #-4]
   19968:	ldr	r0, [fp, #-4]
   1996c:	mov	sp, fp
   19970:	pop	{fp, pc}
   19974:	push	{fp, lr}
   19978:	mov	fp, sp
   1997c:	sub	sp, sp, #32
   19980:	str	r0, [fp, #-8]
   19984:	ldr	r0, [fp, #-8]
   19988:	add	r0, r0, #52	; 0x34
   1998c:	add	r0, r0, #40	; 0x28
   19990:	str	r0, [fp, #-12]
   19994:	ldr	r0, [fp, #-8]
   19998:	ldr	r0, [r0, #124]	; 0x7c
   1999c:	cmp	r0, #0
   199a0:	bne	199a8 <flatcc_builder_get_emit_context@@Base+0x11c>
   199a4:	b	199c8 <flatcc_builder_get_emit_context@@Base+0x13c>
   199a8:	ldr	r0, [pc, #320]	; 19af0 <flatcc_builder_get_emit_context@@Base+0x264>
   199ac:	add	r0, pc, r0
   199b0:	ldr	r1, [pc, #316]	; 19af4 <flatcc_builder_get_emit_context@@Base+0x268>
   199b4:	add	r1, pc, r1
   199b8:	ldr	r2, [pc, #312]	; 19af8 <flatcc_builder_get_emit_context@@Base+0x26c>
   199bc:	add	r3, pc, r2
   199c0:	movw	r2, #342	; 0x156
   199c4:	bl	12494 <__assert_fail@plt>
   199c8:	ldr	r0, [fp, #-8]
   199cc:	ldr	r1, [fp, #-8]
   199d0:	ldr	r2, [r1, #124]	; 0x7c
   199d4:	movw	r1, #6
   199d8:	movw	r3, #16
   199dc:	movw	ip, #0
   199e0:	str	ip, [sp]
   199e4:	bl	1441c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   199e8:	movw	r1, #0
   199ec:	cmp	r0, r1
   199f0:	bne	19a00 <flatcc_builder_get_emit_context@@Base+0x174>
   199f4:	mvn	r0, #0
   199f8:	str	r0, [fp, #-4]
   199fc:	b	19ae4 <flatcc_builder_get_emit_context@@Base+0x258>
   19a00:	ldr	r0, [fp, #-8]
   19a04:	movw	r1, #16
   19a08:	str	r1, [r0, #124]	; 0x7c
   19a0c:	movw	r0, #256	; 0x100
   19a10:	str	r0, [sp, #16]
   19a14:	ldr	r0, [fp, #-8]
   19a18:	ldr	r0, [r0, #48]	; 0x30
   19a1c:	ldr	r1, [fp, #-8]
   19a20:	ldr	r1, [r1, #40]	; 0x28
   19a24:	ldr	r2, [fp, #-12]
   19a28:	ldr	r3, [sp, #16]
   19a2c:	str	r0, [sp, #8]
   19a30:	mov	r0, r1
   19a34:	mov	r1, r2
   19a38:	mov	r2, r3
   19a3c:	movw	r3, #1
   19a40:	movw	ip, #5
   19a44:	str	ip, [sp]
   19a48:	ldr	ip, [sp, #8]
   19a4c:	blx	ip
   19a50:	cmp	r0, #0
   19a54:	beq	19a64 <flatcc_builder_get_emit_context@@Base+0x1d8>
   19a58:	mvn	r0, #0
   19a5c:	str	r0, [fp, #-4]
   19a60:	b	19ae4 <flatcc_builder_get_emit_context@@Base+0x258>
   19a64:	b	19a68 <flatcc_builder_get_emit_context@@Base+0x1dc>
   19a68:	ldr	r0, [sp, #16]
   19a6c:	lsl	r0, r0, #1
   19a70:	ldr	r1, [fp, #-12]
   19a74:	ldr	r1, [r1, #4]
   19a78:	cmp	r0, r1
   19a7c:	bhi	19a90 <flatcc_builder_get_emit_context@@Base+0x204>
   19a80:	ldr	r0, [sp, #16]
   19a84:	lsl	r0, r0, #1
   19a88:	str	r0, [sp, #16]
   19a8c:	b	19a68 <flatcc_builder_get_emit_context@@Base+0x1dc>
   19a90:	ldr	r0, [sp, #16]
   19a94:	lsr	r0, r0, #2
   19a98:	str	r0, [sp, #16]
   19a9c:	movw	r0, #0
   19aa0:	str	r0, [sp, #12]
   19aa4:	ldr	r0, [sp, #12]
   19aa8:	movw	r1, #1
   19aac:	lsl	r0, r1, r0
   19ab0:	ldr	r1, [sp, #16]
   19ab4:	cmp	r0, r1
   19ab8:	bcs	19ad0 <flatcc_builder_get_emit_context@@Base+0x244>
   19abc:	b	19ac0 <flatcc_builder_get_emit_context@@Base+0x234>
   19ac0:	ldr	r0, [sp, #12]
   19ac4:	add	r0, r0, #1
   19ac8:	str	r0, [sp, #12]
   19acc:	b	19aa4 <flatcc_builder_get_emit_context@@Base+0x218>
   19ad0:	ldr	r0, [sp, #12]
   19ad4:	ldr	r1, [fp, #-8]
   19ad8:	str	r0, [r1, #116]	; 0x74
   19adc:	movw	r0, #0
   19ae0:	str	r0, [fp, #-4]
   19ae4:	ldr	r0, [fp, #-4]
   19ae8:	mov	sp, fp
   19aec:	pop	{fp, pc}
   19af0:	andeq	r2, r0, r9, lsl #17
   19af4:	andeq	r1, r0, r0, lsl #14
   19af8:	andeq	r2, r0, r8, lsl #17

00019afc <flatcc_emitter_recycle_page@@Base>:
   19afc:	sub	sp, sp, #12
   19b00:	str	r0, [sp, #4]
   19b04:	str	r1, [sp]
   19b08:	ldr	r0, [sp]
   19b0c:	ldr	r1, [sp, #4]
   19b10:	ldr	r1, [r1]
   19b14:	cmp	r0, r1
   19b18:	beq	19b30 <flatcc_emitter_recycle_page@@Base+0x34>
   19b1c:	ldr	r0, [sp]
   19b20:	ldr	r1, [sp, #4]
   19b24:	ldr	r1, [r1, #4]
   19b28:	cmp	r0, r1
   19b2c:	bne	19b3c <flatcc_emitter_recycle_page@@Base+0x40>
   19b30:	mvn	r0, #0
   19b34:	str	r0, [sp, #8]
   19b38:	b	19bb0 <flatcc_emitter_recycle_page@@Base+0xb4>
   19b3c:	ldr	r0, [sp]
   19b40:	ldr	r0, [r0, #2948]	; 0xb84
   19b44:	ldr	r1, [sp]
   19b48:	ldr	r1, [r1, #2944]	; 0xb80
   19b4c:	str	r0, [r1, #2948]	; 0xb84
   19b50:	ldr	r0, [sp]
   19b54:	ldr	r0, [r0, #2944]	; 0xb80
   19b58:	ldr	r1, [sp]
   19b5c:	ldr	r1, [r1, #2948]	; 0xb84
   19b60:	str	r0, [r1, #2944]	; 0xb80
   19b64:	ldr	r0, [sp, #4]
   19b68:	ldr	r0, [r0]
   19b6c:	ldr	r0, [r0, #2948]	; 0xb84
   19b70:	ldr	r1, [sp]
   19b74:	str	r0, [r1, #2948]	; 0xb84
   19b78:	ldr	r0, [sp, #4]
   19b7c:	ldr	r0, [r0]
   19b80:	ldr	r1, [sp]
   19b84:	str	r0, [r1, #2944]	; 0xb80
   19b88:	ldr	r0, [sp]
   19b8c:	ldr	r1, [sp]
   19b90:	ldr	r1, [r1, #2948]	; 0xb84
   19b94:	str	r0, [r1, #2944]	; 0xb80
   19b98:	ldr	r0, [sp]
   19b9c:	ldr	r1, [sp]
   19ba0:	ldr	r1, [r1, #2944]	; 0xb80
   19ba4:	str	r0, [r1, #2948]	; 0xb84
   19ba8:	movw	r0, #0
   19bac:	str	r0, [sp, #8]
   19bb0:	ldr	r0, [sp, #8]
   19bb4:	add	sp, sp, #12
   19bb8:	bx	lr

00019bbc <flatcc_emitter_reset@@Base>:
   19bbc:	push	{fp, lr}
   19bc0:	mov	fp, sp
   19bc4:	sub	sp, sp, #16
   19bc8:	str	r0, [fp, #-4]
   19bcc:	ldr	r0, [fp, #-4]
   19bd0:	ldr	r0, [r0]
   19bd4:	str	r0, [sp, #8]
   19bd8:	ldr	r0, [fp, #-4]
   19bdc:	ldr	r0, [r0]
   19be0:	movw	r1, #0
   19be4:	cmp	r0, r1
   19be8:	bne	19bf0 <flatcc_emitter_reset@@Base+0x34>
   19bec:	b	19d4c <flatcc_emitter_reset@@Base+0x190>
   19bf0:	ldr	r0, [fp, #-4]
   19bf4:	ldr	r0, [r0]
   19bf8:	ldr	r1, [fp, #-4]
   19bfc:	str	r0, [r1, #4]
   19c00:	ldr	r0, [fp, #-4]
   19c04:	ldr	r0, [r0]
   19c08:	add	r0, r0, #1472	; 0x5c0
   19c0c:	ldr	r1, [fp, #-4]
   19c10:	str	r0, [r1, #8]
   19c14:	ldr	r0, [fp, #-4]
   19c18:	ldr	r0, [r0, #8]
   19c1c:	ldr	r1, [fp, #-4]
   19c20:	str	r0, [r1, #16]
   19c24:	ldr	r0, [fp, #-4]
   19c28:	movw	r1, #1472	; 0x5c0
   19c2c:	str	r1, [r0, #12]
   19c30:	ldr	r0, [fp, #-4]
   19c34:	str	r1, [r0, #20]
   19c38:	ldr	r0, [fp, #-4]
   19c3c:	ldr	r0, [r0, #12]
   19c40:	movw	r1, #0
   19c44:	sub	r0, r1, r0
   19c48:	ldr	r1, [fp, #-4]
   19c4c:	ldr	r1, [r1]
   19c50:	str	r0, [r1, #2952]	; 0xb88
   19c54:	ldr	r0, [fp, #-4]
   19c58:	ldr	r0, [r0, #32]
   19c5c:	cmp	r0, #0
   19c60:	bne	19c74 <flatcc_emitter_reset@@Base+0xb8>
   19c64:	ldr	r0, [fp, #-4]
   19c68:	ldr	r0, [r0, #24]
   19c6c:	ldr	r1, [fp, #-4]
   19c70:	str	r0, [r1, #32]
   19c74:	ldr	r0, [fp, #-4]
   19c78:	ldr	r1, [r0, #24]
   19c7c:	ldr	r0, [r0, #32]
   19c80:	add	r0, r0, r0, lsl #1
   19c84:	lsr	r0, r0, #2
   19c88:	lsr	r1, r1, #2
   19c8c:	add	r0, r0, r1
   19c90:	ldr	r1, [fp, #-4]
   19c94:	str	r0, [r1, #32]
   19c98:	ldr	r0, [fp, #-4]
   19c9c:	movw	r1, #0
   19ca0:	str	r1, [r0, #24]
   19ca4:	ldr	r0, [fp, #-4]
   19ca8:	ldr	r0, [r0, #32]
   19cac:	lsl	r0, r0, #1
   19cb0:	ldr	r1, [fp, #-4]
   19cb4:	ldr	r1, [r1, #28]
   19cb8:	cmp	r0, r1
   19cbc:	movw	r0, #0
   19cc0:	str	r0, [sp, #4]
   19cc4:	bcs	19cec <flatcc_emitter_reset@@Base+0x130>
   19cc8:	ldr	r0, [fp, #-4]
   19ccc:	ldr	r0, [r0, #4]
   19cd0:	ldr	r0, [r0, #2944]	; 0xb80
   19cd4:	ldr	r1, [fp, #-4]
   19cd8:	ldr	r1, [r1]
   19cdc:	cmp	r0, r1
   19ce0:	movw	r0, #0
   19ce4:	movne	r0, #1
   19ce8:	str	r0, [sp, #4]
   19cec:	ldr	r0, [sp, #4]
   19cf0:	tst	r0, #1
   19cf4:	beq	19d4c <flatcc_emitter_reset@@Base+0x190>
   19cf8:	ldr	r0, [fp, #-4]
   19cfc:	ldr	r0, [r0, #4]
   19d00:	ldr	r0, [r0, #2944]	; 0xb80
   19d04:	str	r0, [sp, #8]
   19d08:	ldr	r0, [sp, #8]
   19d0c:	ldr	r0, [r0, #2944]	; 0xb80
   19d10:	ldr	r1, [fp, #-4]
   19d14:	ldr	r1, [r1, #4]
   19d18:	str	r0, [r1, #2944]	; 0xb80
   19d1c:	ldr	r0, [fp, #-4]
   19d20:	ldr	r0, [r0, #4]
   19d24:	ldr	r1, [sp, #8]
   19d28:	ldr	r1, [r1, #2944]	; 0xb80
   19d2c:	str	r0, [r1, #2948]	; 0xb84
   19d30:	ldr	r0, [sp, #8]
   19d34:	bl	123d4 <free@plt>
   19d38:	ldr	r0, [fp, #-4]
   19d3c:	ldr	r1, [r0, #28]
   19d40:	sub	r1, r1, #2944	; 0xb80
   19d44:	str	r1, [r0, #28]
   19d48:	b	19ca4 <flatcc_emitter_reset@@Base+0xe8>
   19d4c:	mov	sp, fp
   19d50:	pop	{fp, pc}

00019d54 <flatcc_emitter_clear@@Base>:
   19d54:	push	{fp, lr}
   19d58:	mov	fp, sp
   19d5c:	sub	sp, sp, #8
   19d60:	str	r0, [sp, #4]
   19d64:	ldr	r0, [sp, #4]
   19d68:	ldr	r0, [r0]
   19d6c:	str	r0, [sp]
   19d70:	ldr	r0, [sp]
   19d74:	movw	r1, #0
   19d78:	cmp	r0, r1
   19d7c:	bne	19d84 <flatcc_emitter_clear@@Base+0x30>
   19d80:	b	19de0 <flatcc_emitter_clear@@Base+0x8c>
   19d84:	ldr	r0, [sp]
   19d88:	ldr	r0, [r0, #2948]	; 0xb84
   19d8c:	movw	r1, #0
   19d90:	str	r1, [r0, #2944]	; 0xb80
   19d94:	ldr	r0, [sp]
   19d98:	ldr	r0, [r0, #2944]	; 0xb80
   19d9c:	movw	r1, #0
   19da0:	cmp	r0, r1
   19da4:	beq	19dc4 <flatcc_emitter_clear@@Base+0x70>
   19da8:	ldr	r0, [sp]
   19dac:	ldr	r0, [r0, #2944]	; 0xb80
   19db0:	str	r0, [sp]
   19db4:	ldr	r0, [sp]
   19db8:	ldr	r0, [r0, #2948]	; 0xb84
   19dbc:	bl	123d4 <free@plt>
   19dc0:	b	19d94 <flatcc_emitter_clear@@Base+0x40>
   19dc4:	ldr	r0, [sp]
   19dc8:	bl	123d4 <free@plt>
   19dcc:	ldr	r0, [sp, #4]
   19dd0:	movw	r1, #0
   19dd4:	and	r1, r1, #255	; 0xff
   19dd8:	movw	r2, #36	; 0x24
   19ddc:	bl	12458 <memset@plt>
   19de0:	mov	sp, fp
   19de4:	pop	{fp, pc}

00019de8 <flatcc_emitter@@Base>:
   19de8:	push	{fp, lr}
   19dec:	mov	fp, sp
   19df0:	sub	sp, sp, #32
   19df4:	ldr	ip, [fp, #8]
   19df8:	str	r0, [fp, #-8]
   19dfc:	str	r1, [fp, #-12]
   19e00:	str	r2, [sp, #16]
   19e04:	str	r3, [sp, #12]
   19e08:	ldr	r0, [fp, #-8]
   19e0c:	str	r0, [sp, #8]
   19e10:	ldr	r0, [fp, #8]
   19e14:	ldr	r1, [sp, #8]
   19e18:	ldr	r2, [r1, #24]
   19e1c:	add	r0, r2, r0
   19e20:	str	r0, [r1, #24]
   19e24:	ldr	r0, [sp, #12]
   19e28:	cmp	r0, #0
   19e2c:	bge	19ef0 <flatcc_emitter@@Base+0x108>
   19e30:	ldr	r0, [fp, #8]
   19e34:	ldr	r1, [sp, #8]
   19e38:	ldr	r1, [r1, #12]
   19e3c:	cmp	r0, r1
   19e40:	bhi	19e84 <flatcc_emitter@@Base+0x9c>
   19e44:	ldr	r0, [fp, #8]
   19e48:	ldr	r1, [sp, #8]
   19e4c:	ldr	r2, [r1, #8]
   19e50:	movw	r3, #0
   19e54:	sub	r0, r3, r0
   19e58:	add	r0, r2, r0
   19e5c:	str	r0, [r1, #8]
   19e60:	ldr	r0, [fp, #8]
   19e64:	ldr	r1, [sp, #8]
   19e68:	ldr	r2, [r1, #12]
   19e6c:	sub	r0, r2, r0
   19e70:	str	r0, [r1, #12]
   19e74:	ldr	r0, [sp, #8]
   19e78:	ldr	r0, [r0, #8]
   19e7c:	str	r0, [sp, #4]
   19e80:	b	19fa4 <flatcc_emitter@@Base+0x1bc>
   19e84:	ldr	r0, [sp, #16]
   19e88:	ldr	r1, [fp, #-12]
   19e8c:	add	r0, r1, r0, lsl #3
   19e90:	str	r0, [fp, #-12]
   19e94:	ldr	r0, [sp, #16]
   19e98:	mvn	r1, #0
   19e9c:	add	r1, r0, r1
   19ea0:	str	r1, [sp, #16]
   19ea4:	cmp	r0, #0
   19ea8:	beq	19eec <flatcc_emitter@@Base+0x104>
   19eac:	ldr	r0, [fp, #-12]
   19eb0:	mvn	r1, #7
   19eb4:	add	r0, r0, r1
   19eb8:	str	r0, [fp, #-12]
   19ebc:	ldr	r0, [sp, #8]
   19ec0:	ldr	r1, [fp, #-12]
   19ec4:	ldr	r1, [r1]
   19ec8:	ldr	r2, [fp, #-12]
   19ecc:	ldr	r2, [r2, #4]
   19ed0:	bl	1a010 <flatcc_emitter@@Base+0x228>
   19ed4:	cmp	r0, #0
   19ed8:	beq	19ee8 <flatcc_emitter@@Base+0x100>
   19edc:	mvn	r0, #0
   19ee0:	str	r0, [fp, #-4]
   19ee4:	b	1a004 <flatcc_emitter@@Base+0x21c>
   19ee8:	b	19e94 <flatcc_emitter@@Base+0xac>
   19eec:	b	19f98 <flatcc_emitter@@Base+0x1b0>
   19ef0:	ldr	r0, [fp, #8]
   19ef4:	ldr	r1, [sp, #8]
   19ef8:	ldr	r1, [r1, #20]
   19efc:	cmp	r0, r1
   19f00:	bhi	19f3c <flatcc_emitter@@Base+0x154>
   19f04:	ldr	r0, [sp, #8]
   19f08:	ldr	r0, [r0, #16]
   19f0c:	str	r0, [sp, #4]
   19f10:	ldr	r0, [fp, #8]
   19f14:	ldr	r1, [sp, #8]
   19f18:	ldr	r2, [r1, #16]
   19f1c:	add	r0, r2, r0
   19f20:	str	r0, [r1, #16]
   19f24:	ldr	r0, [fp, #8]
   19f28:	ldr	r1, [sp, #8]
   19f2c:	ldr	r2, [r1, #20]
   19f30:	sub	r0, r2, r0
   19f34:	str	r0, [r1, #20]
   19f38:	b	19fa4 <flatcc_emitter@@Base+0x1bc>
   19f3c:	b	19f40 <flatcc_emitter@@Base+0x158>
   19f40:	ldr	r0, [sp, #16]
   19f44:	mvn	r1, #0
   19f48:	add	r1, r0, r1
   19f4c:	str	r1, [sp, #16]
   19f50:	cmp	r0, #0
   19f54:	beq	19f94 <flatcc_emitter@@Base+0x1ac>
   19f58:	ldr	r0, [sp, #8]
   19f5c:	ldr	r1, [fp, #-12]
   19f60:	ldr	r1, [r1]
   19f64:	ldr	r2, [fp, #-12]
   19f68:	ldr	r2, [r2, #4]
   19f6c:	bl	1a11c <flatcc_emitter@@Base+0x334>
   19f70:	cmp	r0, #0
   19f74:	beq	19f84 <flatcc_emitter@@Base+0x19c>
   19f78:	mvn	r0, #0
   19f7c:	str	r0, [fp, #-4]
   19f80:	b	1a004 <flatcc_emitter@@Base+0x21c>
   19f84:	ldr	r0, [fp, #-12]
   19f88:	add	r0, r0, #8
   19f8c:	str	r0, [fp, #-12]
   19f90:	b	19f40 <flatcc_emitter@@Base+0x158>
   19f94:	b	19f98 <flatcc_emitter@@Base+0x1b0>
   19f98:	movw	r0, #0
   19f9c:	str	r0, [fp, #-4]
   19fa0:	b	1a004 <flatcc_emitter@@Base+0x21c>
   19fa4:	b	19fa8 <flatcc_emitter@@Base+0x1c0>
   19fa8:	ldr	r0, [sp, #16]
   19fac:	mvn	r1, #0
   19fb0:	add	r1, r0, r1
   19fb4:	str	r1, [sp, #16]
   19fb8:	cmp	r0, #0
   19fbc:	beq	19ffc <flatcc_emitter@@Base+0x214>
   19fc0:	ldr	r0, [sp, #4]
   19fc4:	ldr	r1, [fp, #-12]
   19fc8:	ldr	r1, [r1]
   19fcc:	ldr	r2, [fp, #-12]
   19fd0:	ldr	r2, [r2, #4]
   19fd4:	bl	123e0 <memcpy@plt>
   19fd8:	ldr	r0, [fp, #-12]
   19fdc:	ldr	r0, [r0, #4]
   19fe0:	ldr	r1, [sp, #4]
   19fe4:	add	r0, r1, r0
   19fe8:	str	r0, [sp, #4]
   19fec:	ldr	r0, [fp, #-12]
   19ff0:	add	r0, r0, #8
   19ff4:	str	r0, [fp, #-12]
   19ff8:	b	19fa8 <flatcc_emitter@@Base+0x1c0>
   19ffc:	movw	r0, #0
   1a000:	str	r0, [fp, #-4]
   1a004:	ldr	r0, [fp, #-4]
   1a008:	mov	sp, fp
   1a00c:	pop	{fp, pc}
   1a010:	push	{fp, lr}
   1a014:	mov	fp, sp
   1a018:	sub	sp, sp, #24
   1a01c:	str	r0, [fp, #-8]
   1a020:	str	r1, [sp, #12]
   1a024:	str	r2, [sp, #8]
   1a028:	ldr	r0, [sp, #8]
   1a02c:	ldr	r1, [sp, #12]
   1a030:	add	r0, r1, r0
   1a034:	str	r0, [sp, #12]
   1a038:	ldr	r0, [sp, #8]
   1a03c:	cmp	r0, #0
   1a040:	beq	1a108 <flatcc_emitter@@Base+0x320>
   1a044:	ldr	r0, [sp, #8]
   1a048:	str	r0, [sp, #4]
   1a04c:	ldr	r0, [sp, #4]
   1a050:	ldr	r1, [fp, #-8]
   1a054:	ldr	r1, [r1, #12]
   1a058:	cmp	r0, r1
   1a05c:	bls	1a09c <flatcc_emitter@@Base+0x2b4>
   1a060:	ldr	r0, [fp, #-8]
   1a064:	ldr	r0, [r0, #12]
   1a068:	str	r0, [sp, #4]
   1a06c:	ldr	r0, [sp, #4]
   1a070:	cmp	r0, #0
   1a074:	bne	1a098 <flatcc_emitter@@Base+0x2b0>
   1a078:	ldr	r0, [fp, #-8]
   1a07c:	bl	1a358 <flatcc_emitter_copy_buffer@@Base+0x14c>
   1a080:	cmp	r0, #0
   1a084:	beq	1a094 <flatcc_emitter@@Base+0x2ac>
   1a088:	mvn	r0, #0
   1a08c:	str	r0, [fp, #-4]
   1a090:	b	1a110 <flatcc_emitter@@Base+0x328>
   1a094:	b	1a038 <flatcc_emitter@@Base+0x250>
   1a098:	b	1a09c <flatcc_emitter@@Base+0x2b4>
   1a09c:	ldr	r0, [sp, #4]
   1a0a0:	ldr	r1, [fp, #-8]
   1a0a4:	ldr	r2, [r1, #8]
   1a0a8:	movw	r3, #0
   1a0ac:	sub	r0, r3, r0
   1a0b0:	add	r0, r2, r0
   1a0b4:	str	r0, [r1, #8]
   1a0b8:	ldr	r0, [sp, #4]
   1a0bc:	ldr	r1, [fp, #-8]
   1a0c0:	ldr	r2, [r1, #12]
   1a0c4:	sub	r0, r2, r0
   1a0c8:	str	r0, [r1, #12]
   1a0cc:	ldr	r0, [sp, #4]
   1a0d0:	ldr	r1, [sp, #12]
   1a0d4:	sub	r0, r3, r0
   1a0d8:	add	r0, r1, r0
   1a0dc:	str	r0, [sp, #12]
   1a0e0:	ldr	r0, [sp, #4]
   1a0e4:	ldr	r1, [sp, #8]
   1a0e8:	sub	r0, r1, r0
   1a0ec:	str	r0, [sp, #8]
   1a0f0:	ldr	r0, [fp, #-8]
   1a0f4:	ldr	r0, [r0, #8]
   1a0f8:	ldr	r1, [sp, #12]
   1a0fc:	ldr	r2, [sp, #4]
   1a100:	bl	123e0 <memcpy@plt>
   1a104:	b	1a038 <flatcc_emitter@@Base+0x250>
   1a108:	movw	r0, #0
   1a10c:	str	r0, [fp, #-4]
   1a110:	ldr	r0, [fp, #-4]
   1a114:	mov	sp, fp
   1a118:	pop	{fp, pc}
   1a11c:	push	{fp, lr}
   1a120:	mov	fp, sp
   1a124:	sub	sp, sp, #24
   1a128:	str	r0, [fp, #-8]
   1a12c:	str	r1, [sp, #12]
   1a130:	str	r2, [sp, #8]
   1a134:	ldr	r0, [sp, #8]
   1a138:	cmp	r0, #0
   1a13c:	beq	1a1f8 <flatcc_emitter@@Base+0x410>
   1a140:	ldr	r0, [sp, #8]
   1a144:	str	r0, [sp, #4]
   1a148:	ldr	r0, [sp, #4]
   1a14c:	ldr	r1, [fp, #-8]
   1a150:	ldr	r1, [r1, #20]
   1a154:	cmp	r0, r1
   1a158:	bls	1a198 <flatcc_emitter@@Base+0x3b0>
   1a15c:	ldr	r0, [fp, #-8]
   1a160:	ldr	r0, [r0, #20]
   1a164:	str	r0, [sp, #4]
   1a168:	ldr	r0, [sp, #4]
   1a16c:	cmp	r0, #0
   1a170:	bne	1a194 <flatcc_emitter@@Base+0x3ac>
   1a174:	ldr	r0, [fp, #-8]
   1a178:	bl	1a558 <flatcc_emitter_copy_buffer@@Base+0x34c>
   1a17c:	cmp	r0, #0
   1a180:	beq	1a190 <flatcc_emitter@@Base+0x3a8>
   1a184:	mvn	r0, #0
   1a188:	str	r0, [fp, #-4]
   1a18c:	b	1a200 <flatcc_emitter@@Base+0x418>
   1a190:	b	1a134 <flatcc_emitter@@Base+0x34c>
   1a194:	b	1a198 <flatcc_emitter@@Base+0x3b0>
   1a198:	ldr	r0, [fp, #-8]
   1a19c:	ldr	r0, [r0, #16]
   1a1a0:	ldr	r1, [sp, #12]
   1a1a4:	ldr	r2, [sp, #4]
   1a1a8:	bl	123e0 <memcpy@plt>
   1a1ac:	ldr	r0, [sp, #4]
   1a1b0:	ldr	r1, [sp, #8]
   1a1b4:	sub	r0, r1, r0
   1a1b8:	str	r0, [sp, #8]
   1a1bc:	ldr	r0, [sp, #4]
   1a1c0:	ldr	r1, [sp, #12]
   1a1c4:	add	r0, r1, r0
   1a1c8:	str	r0, [sp, #12]
   1a1cc:	ldr	r0, [sp, #4]
   1a1d0:	ldr	r1, [fp, #-8]
   1a1d4:	ldr	r2, [r1, #16]
   1a1d8:	add	r0, r2, r0
   1a1dc:	str	r0, [r1, #16]
   1a1e0:	ldr	r0, [sp, #4]
   1a1e4:	ldr	r1, [fp, #-8]
   1a1e8:	ldr	r2, [r1, #20]
   1a1ec:	sub	r0, r2, r0
   1a1f0:	str	r0, [r1, #20]
   1a1f4:	b	1a134 <flatcc_emitter@@Base+0x34c>
   1a1f8:	movw	r0, #0
   1a1fc:	str	r0, [fp, #-4]
   1a200:	ldr	r0, [fp, #-4]
   1a204:	mov	sp, fp
   1a208:	pop	{fp, pc}

0001a20c <flatcc_emitter_copy_buffer@@Base>:
   1a20c:	push	{fp, lr}
   1a210:	mov	fp, sp
   1a214:	sub	sp, sp, #24
   1a218:	str	r0, [fp, #-8]
   1a21c:	str	r1, [sp, #12]
   1a220:	str	r2, [sp, #8]
   1a224:	ldr	r0, [sp, #8]
   1a228:	ldr	r1, [fp, #-8]
   1a22c:	ldr	r1, [r1, #24]
   1a230:	cmp	r0, r1
   1a234:	bcs	1a244 <flatcc_emitter_copy_buffer@@Base+0x38>
   1a238:	movw	r0, #0
   1a23c:	str	r0, [fp, #-4]
   1a240:	b	1a34c <flatcc_emitter_copy_buffer@@Base+0x140>
   1a244:	ldr	r0, [fp, #-8]
   1a248:	ldr	r0, [r0]
   1a24c:	movw	r1, #0
   1a250:	cmp	r0, r1
   1a254:	bne	1a264 <flatcc_emitter_copy_buffer@@Base+0x58>
   1a258:	movw	r0, #0
   1a25c:	str	r0, [fp, #-4]
   1a260:	b	1a34c <flatcc_emitter_copy_buffer@@Base+0x140>
   1a264:	ldr	r0, [fp, #-8]
   1a268:	ldr	r0, [r0]
   1a26c:	ldr	r1, [fp, #-8]
   1a270:	ldr	r1, [r1, #4]
   1a274:	cmp	r0, r1
   1a278:	bne	1a2a0 <flatcc_emitter_copy_buffer@@Base+0x94>
   1a27c:	ldr	r0, [sp, #12]
   1a280:	ldr	r1, [fp, #-8]
   1a284:	ldr	r1, [r1, #8]
   1a288:	ldr	r2, [fp, #-8]
   1a28c:	ldr	r2, [r2, #24]
   1a290:	bl	123e0 <memcpy@plt>
   1a294:	ldr	r0, [sp, #12]
   1a298:	str	r0, [fp, #-4]
   1a29c:	b	1a34c <flatcc_emitter_copy_buffer@@Base+0x140>
   1a2a0:	ldr	r0, [fp, #-8]
   1a2a4:	ldr	r0, [r0, #12]
   1a2a8:	movw	r1, #2944	; 0xb80
   1a2ac:	sub	r0, r1, r0
   1a2b0:	str	r0, [sp]
   1a2b4:	ldr	r0, [sp, #12]
   1a2b8:	ldr	r1, [fp, #-8]
   1a2bc:	ldr	r1, [r1, #8]
   1a2c0:	ldr	r2, [sp]
   1a2c4:	bl	123e0 <memcpy@plt>
   1a2c8:	ldr	r0, [sp, #12]
   1a2cc:	ldr	r1, [sp]
   1a2d0:	add	r0, r0, r1
   1a2d4:	str	r0, [sp, #12]
   1a2d8:	ldr	r0, [fp, #-8]
   1a2dc:	ldr	r0, [r0]
   1a2e0:	ldr	r0, [r0, #2944]	; 0xb80
   1a2e4:	str	r0, [sp, #4]
   1a2e8:	ldr	r0, [sp, #4]
   1a2ec:	ldr	r1, [fp, #-8]
   1a2f0:	ldr	r1, [r1, #4]
   1a2f4:	cmp	r0, r1
   1a2f8:	beq	1a328 <flatcc_emitter_copy_buffer@@Base+0x11c>
   1a2fc:	ldr	r0, [sp, #12]
   1a300:	ldr	r1, [sp, #4]
   1a304:	movw	r2, #2944	; 0xb80
   1a308:	bl	123e0 <memcpy@plt>
   1a30c:	ldr	r0, [sp, #12]
   1a310:	add	r0, r0, #2944	; 0xb80
   1a314:	str	r0, [sp, #12]
   1a318:	ldr	r0, [sp, #4]
   1a31c:	ldr	r0, [r0, #2944]	; 0xb80
   1a320:	str	r0, [sp, #4]
   1a324:	b	1a2e8 <flatcc_emitter_copy_buffer@@Base+0xdc>
   1a328:	ldr	r0, [sp, #12]
   1a32c:	ldr	r1, [sp, #4]
   1a330:	ldr	r2, [fp, #-8]
   1a334:	ldr	r2, [r2, #20]
   1a338:	movw	r3, #2944	; 0xb80
   1a33c:	sub	r2, r3, r2
   1a340:	bl	123e0 <memcpy@plt>
   1a344:	ldr	r0, [sp, #12]
   1a348:	str	r0, [fp, #-4]
   1a34c:	ldr	r0, [fp, #-4]
   1a350:	mov	sp, fp
   1a354:	pop	{fp, pc}
   1a358:	push	{fp, lr}
   1a35c:	mov	fp, sp
   1a360:	sub	sp, sp, #16
   1a364:	str	r0, [sp, #8]
   1a368:	movw	r0, #0
   1a36c:	str	r0, [sp, #4]
   1a370:	ldr	r1, [sp, #8]
   1a374:	ldr	r1, [r1]
   1a378:	cmp	r1, r0
   1a37c:	beq	1a3d4 <flatcc_emitter_copy_buffer@@Base+0x1c8>
   1a380:	ldr	r0, [sp, #8]
   1a384:	ldr	r0, [r0]
   1a388:	ldr	r0, [r0, #2948]	; 0xb84
   1a38c:	ldr	r1, [sp, #8]
   1a390:	ldr	r1, [r1, #4]
   1a394:	cmp	r0, r1
   1a398:	beq	1a3d4 <flatcc_emitter_copy_buffer@@Base+0x1c8>
   1a39c:	ldr	r0, [sp, #8]
   1a3a0:	ldr	r0, [r0]
   1a3a4:	ldr	r0, [r0, #2952]	; 0xb88
   1a3a8:	sub	r0, r0, #2944	; 0xb80
   1a3ac:	ldr	r1, [sp, #8]
   1a3b0:	ldr	r1, [r1]
   1a3b4:	ldr	r1, [r1, #2948]	; 0xb84
   1a3b8:	str	r0, [r1, #2952]	; 0xb88
   1a3bc:	ldr	r0, [sp, #8]
   1a3c0:	ldr	r0, [r0]
   1a3c4:	ldr	r0, [r0, #2948]	; 0xb84
   1a3c8:	ldr	r1, [sp, #8]
   1a3cc:	str	r0, [r1]
   1a3d0:	b	1a504 <flatcc_emitter_copy_buffer@@Base+0x2f8>
   1a3d4:	movw	r0, #2956	; 0xb8c
   1a3d8:	bl	1241c <malloc@plt>
   1a3dc:	str	r0, [sp, #4]
   1a3e0:	movw	r1, #0
   1a3e4:	cmp	r0, r1
   1a3e8:	bne	1a3f8 <flatcc_emitter_copy_buffer@@Base+0x1ec>
   1a3ec:	mvn	r0, #0
   1a3f0:	str	r0, [fp, #-4]
   1a3f4:	b	1a54c <flatcc_emitter_copy_buffer@@Base+0x340>
   1a3f8:	ldr	r0, [sp, #8]
   1a3fc:	ldr	r1, [r0, #28]
   1a400:	add	r1, r1, #2944	; 0xb80
   1a404:	str	r1, [r0, #28]
   1a408:	ldr	r0, [sp, #8]
   1a40c:	ldr	r0, [r0]
   1a410:	movw	r1, #0
   1a414:	cmp	r0, r1
   1a418:	beq	1a46c <flatcc_emitter_copy_buffer@@Base+0x260>
   1a41c:	ldr	r0, [sp, #8]
   1a420:	ldr	r0, [r0, #4]
   1a424:	ldr	r1, [sp, #4]
   1a428:	str	r0, [r1, #2948]	; 0xb84
   1a42c:	ldr	r0, [sp, #8]
   1a430:	ldr	r0, [r0]
   1a434:	ldr	r1, [sp, #4]
   1a438:	str	r0, [r1, #2944]	; 0xb80
   1a43c:	ldr	r0, [sp, #4]
   1a440:	ldr	r1, [sp, #8]
   1a444:	ldr	r1, [r1]
   1a448:	str	r0, [r1, #2948]	; 0xb84
   1a44c:	ldr	r0, [sp, #4]
   1a450:	ldr	r1, [sp, #8]
   1a454:	ldr	r1, [r1, #4]
   1a458:	str	r0, [r1, #2944]	; 0xb80
   1a45c:	ldr	r0, [sp, #4]
   1a460:	ldr	r1, [sp, #8]
   1a464:	str	r0, [r1]
   1a468:	b	1a504 <flatcc_emitter_copy_buffer@@Base+0x2f8>
   1a46c:	ldr	r0, [sp, #4]
   1a470:	ldr	r1, [sp, #8]
   1a474:	str	r0, [r1]
   1a478:	ldr	r0, [sp, #4]
   1a47c:	ldr	r1, [sp, #8]
   1a480:	str	r0, [r1, #4]
   1a484:	ldr	r0, [sp, #4]
   1a488:	ldr	r1, [sp, #4]
   1a48c:	str	r0, [r1, #2944]	; 0xb80
   1a490:	ldr	r0, [sp, #4]
   1a494:	ldr	r1, [sp, #4]
   1a498:	str	r0, [r1, #2948]	; 0xb84
   1a49c:	ldr	r0, [sp, #8]
   1a4a0:	ldr	r0, [r0]
   1a4a4:	add	r0, r0, #1472	; 0x5c0
   1a4a8:	ldr	r1, [sp, #8]
   1a4ac:	str	r0, [r1, #8]
   1a4b0:	ldr	r0, [sp, #8]
   1a4b4:	ldr	r0, [r0, #8]
   1a4b8:	ldr	r1, [sp, #8]
   1a4bc:	str	r0, [r1, #16]
   1a4c0:	ldr	r0, [sp, #8]
   1a4c4:	movw	r1, #1472	; 0x5c0
   1a4c8:	str	r1, [r0, #12]
   1a4cc:	ldr	r0, [sp, #8]
   1a4d0:	ldr	r0, [r0, #12]
   1a4d4:	movw	r1, #2944	; 0xb80
   1a4d8:	sub	r0, r1, r0
   1a4dc:	ldr	r1, [sp, #8]
   1a4e0:	str	r0, [r1, #20]
   1a4e4:	ldr	r0, [sp, #8]
   1a4e8:	ldr	r0, [r0, #12]
   1a4ec:	movw	r1, #0
   1a4f0:	sub	r0, r1, r0
   1a4f4:	ldr	r2, [sp, #4]
   1a4f8:	str	r0, [r2, #2952]	; 0xb88
   1a4fc:	str	r1, [fp, #-4]
   1a500:	b	1a54c <flatcc_emitter_copy_buffer@@Base+0x340>
   1a504:	ldr	r0, [sp, #8]
   1a508:	ldr	r0, [r0]
   1a50c:	add	r0, r0, #2944	; 0xb80
   1a510:	ldr	r1, [sp, #8]
   1a514:	str	r0, [r1, #8]
   1a518:	ldr	r0, [sp, #8]
   1a51c:	movw	r1, #2944	; 0xb80
   1a520:	str	r1, [r0, #12]
   1a524:	ldr	r0, [sp, #8]
   1a528:	ldr	r0, [r0]
   1a52c:	ldr	r0, [r0, #2944]	; 0xb80
   1a530:	ldr	r0, [r0, #2952]	; 0xb88
   1a534:	sub	r0, r0, #2944	; 0xb80
   1a538:	ldr	r1, [sp, #8]
   1a53c:	ldr	r1, [r1]
   1a540:	str	r0, [r1, #2952]	; 0xb88
   1a544:	movw	r0, #0
   1a548:	str	r0, [fp, #-4]
   1a54c:	ldr	r0, [fp, #-4]
   1a550:	mov	sp, fp
   1a554:	pop	{fp, pc}
   1a558:	push	{fp, lr}
   1a55c:	mov	fp, sp
   1a560:	sub	sp, sp, #16
   1a564:	str	r0, [sp, #8]
   1a568:	movw	r0, #0
   1a56c:	str	r0, [sp, #4]
   1a570:	ldr	r1, [sp, #8]
   1a574:	ldr	r1, [r1, #4]
   1a578:	cmp	r1, r0
   1a57c:	beq	1a5b4 <flatcc_emitter_copy_buffer@@Base+0x3a8>
   1a580:	ldr	r0, [sp, #8]
   1a584:	ldr	r0, [r0, #4]
   1a588:	ldr	r0, [r0, #2944]	; 0xb80
   1a58c:	ldr	r1, [sp, #8]
   1a590:	ldr	r1, [r1]
   1a594:	cmp	r0, r1
   1a598:	beq	1a5b4 <flatcc_emitter_copy_buffer@@Base+0x3a8>
   1a59c:	ldr	r0, [sp, #8]
   1a5a0:	ldr	r0, [r0, #4]
   1a5a4:	ldr	r0, [r0, #2944]	; 0xb80
   1a5a8:	ldr	r1, [sp, #8]
   1a5ac:	str	r0, [r1, #4]
   1a5b0:	b	1a6e4 <flatcc_emitter_copy_buffer@@Base+0x4d8>
   1a5b4:	movw	r0, #2956	; 0xb8c
   1a5b8:	bl	1241c <malloc@plt>
   1a5bc:	str	r0, [sp, #4]
   1a5c0:	movw	r1, #0
   1a5c4:	cmp	r0, r1
   1a5c8:	bne	1a5d8 <flatcc_emitter_copy_buffer@@Base+0x3cc>
   1a5cc:	mvn	r0, #0
   1a5d0:	str	r0, [fp, #-4]
   1a5d4:	b	1a728 <flatcc_emitter_copy_buffer@@Base+0x51c>
   1a5d8:	ldr	r0, [sp, #8]
   1a5dc:	ldr	r1, [r0, #28]
   1a5e0:	add	r1, r1, #2944	; 0xb80
   1a5e4:	str	r1, [r0, #28]
   1a5e8:	ldr	r0, [sp, #8]
   1a5ec:	ldr	r0, [r0, #4]
   1a5f0:	movw	r1, #0
   1a5f4:	cmp	r0, r1
   1a5f8:	beq	1a64c <flatcc_emitter_copy_buffer@@Base+0x440>
   1a5fc:	ldr	r0, [sp, #8]
   1a600:	ldr	r0, [r0, #4]
   1a604:	ldr	r1, [sp, #4]
   1a608:	str	r0, [r1, #2948]	; 0xb84
   1a60c:	ldr	r0, [sp, #8]
   1a610:	ldr	r0, [r0]
   1a614:	ldr	r1, [sp, #4]
   1a618:	str	r0, [r1, #2944]	; 0xb80
   1a61c:	ldr	r0, [sp, #4]
   1a620:	ldr	r1, [sp, #8]
   1a624:	ldr	r1, [r1]
   1a628:	str	r0, [r1, #2948]	; 0xb84
   1a62c:	ldr	r0, [sp, #4]
   1a630:	ldr	r1, [sp, #8]
   1a634:	ldr	r1, [r1, #4]
   1a638:	str	r0, [r1, #2944]	; 0xb80
   1a63c:	ldr	r0, [sp, #4]
   1a640:	ldr	r1, [sp, #8]
   1a644:	str	r0, [r1, #4]
   1a648:	b	1a6e4 <flatcc_emitter_copy_buffer@@Base+0x4d8>
   1a64c:	ldr	r0, [sp, #4]
   1a650:	ldr	r1, [sp, #8]
   1a654:	str	r0, [r1]
   1a658:	ldr	r0, [sp, #4]
   1a65c:	ldr	r1, [sp, #8]
   1a660:	str	r0, [r1, #4]
   1a664:	ldr	r0, [sp, #4]
   1a668:	ldr	r1, [sp, #4]
   1a66c:	str	r0, [r1, #2944]	; 0xb80
   1a670:	ldr	r0, [sp, #4]
   1a674:	ldr	r1, [sp, #4]
   1a678:	str	r0, [r1, #2948]	; 0xb84
   1a67c:	ldr	r0, [sp, #8]
   1a680:	ldr	r0, [r0]
   1a684:	add	r0, r0, #1472	; 0x5c0
   1a688:	ldr	r1, [sp, #8]
   1a68c:	str	r0, [r1, #8]
   1a690:	ldr	r0, [sp, #8]
   1a694:	ldr	r0, [r0, #8]
   1a698:	ldr	r1, [sp, #8]
   1a69c:	str	r0, [r1, #16]
   1a6a0:	ldr	r0, [sp, #8]
   1a6a4:	movw	r1, #1472	; 0x5c0
   1a6a8:	str	r1, [r0, #12]
   1a6ac:	ldr	r0, [sp, #8]
   1a6b0:	ldr	r0, [r0, #12]
   1a6b4:	movw	r1, #2944	; 0xb80
   1a6b8:	sub	r0, r1, r0
   1a6bc:	ldr	r1, [sp, #8]
   1a6c0:	str	r0, [r1, #20]
   1a6c4:	ldr	r0, [sp, #8]
   1a6c8:	ldr	r0, [r0, #12]
   1a6cc:	movw	r1, #0
   1a6d0:	sub	r0, r1, r0
   1a6d4:	ldr	r2, [sp, #4]
   1a6d8:	str	r0, [r2, #2952]	; 0xb88
   1a6dc:	str	r1, [fp, #-4]
   1a6e0:	b	1a728 <flatcc_emitter_copy_buffer@@Base+0x51c>
   1a6e4:	ldr	r0, [sp, #8]
   1a6e8:	ldr	r0, [r0, #4]
   1a6ec:	ldr	r1, [sp, #8]
   1a6f0:	str	r0, [r1, #16]
   1a6f4:	ldr	r0, [sp, #8]
   1a6f8:	movw	r1, #2944	; 0xb80
   1a6fc:	str	r1, [r0, #20]
   1a700:	ldr	r0, [sp, #8]
   1a704:	ldr	r0, [r0, #4]
   1a708:	ldr	r0, [r0, #2948]	; 0xb84
   1a70c:	ldr	r0, [r0, #2952]	; 0xb88
   1a710:	add	r0, r0, #2944	; 0xb80
   1a714:	ldr	r1, [sp, #8]
   1a718:	ldr	r1, [r1, #4]
   1a71c:	str	r0, [r1, #2952]	; 0xb88
   1a720:	movw	r0, #0
   1a724:	str	r0, [fp, #-4]
   1a728:	ldr	r0, [fp, #-4]
   1a72c:	mov	sp, fp
   1a730:	pop	{fp, pc}

0001a734 <__libc_csu_init@@Base>:
   1a734:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a738:	mov	r7, r0
   1a73c:	ldr	r6, [pc, #72]	; 1a78c <__libc_csu_init@@Base+0x58>
   1a740:	ldr	r5, [pc, #72]	; 1a790 <__libc_csu_init@@Base+0x5c>
   1a744:	add	r6, pc, r6
   1a748:	add	r5, pc, r5
   1a74c:	sub	r6, r6, r5
   1a750:	mov	r8, r1
   1a754:	mov	r9, r2
   1a758:	bl	12390 <strcmp@plt-0x20>
   1a75c:	asrs	r6, r6, #2
   1a760:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a764:	mov	r4, #0
   1a768:	add	r4, r4, #1
   1a76c:	ldr	r3, [r5], #4
   1a770:	mov	r2, r9
   1a774:	mov	r1, r8
   1a778:	mov	r0, r7
   1a77c:	blx	r3
   1a780:	cmp	r6, r4
   1a784:	bne	1a768 <__libc_csu_init@@Base+0x34>
   1a788:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a78c:	andeq	r2, r1, r0, asr #15
   1a790:			; <UNDEFINED> instruction: 0x000127b8

0001a794 <__libc_csu_fini@@Base>:
   1a794:	bx	lr

Disassembly of section .fini:

0001a798 <.fini>:
   1a798:	push	{r3, lr}
   1a79c:	pop	{r3, pc}
