
../repos/prog2/2.1:     file format elf32-littlearm


Disassembly of section .init:

00010664 <.init>:
   10664:	push	{r3, lr}
   10668:	bl	10738 <_start@@Base+0x3c>
   1066c:	pop	{r3, pc}

Disassembly of section .plt:

00010670 <printf@plt-0x14>:
   10670:	push	{lr}		; (str lr, [sp, #-4]!)
   10674:	ldr	lr, [pc, #4]	; 10680 <printf@plt-0x4>
   10678:	add	lr, pc, lr
   1067c:	ldr	pc, [lr, #8]!
   10680:	andeq	r0, r1, r0, lsl #19

00010684 <printf@plt>:
   10684:	add	ip, pc, #0, 12
   10688:	add	ip, ip, #16, 20	; 0x10000
   1068c:	ldr	pc, [ip, #2432]!	; 0x980

00010690 <free@plt>:
   10690:	add	ip, pc, #0, 12
   10694:	add	ip, ip, #16, 20	; 0x10000
   10698:	ldr	pc, [ip, #2424]!	; 0x978

0001069c <realloc@plt>:
   1069c:	add	ip, pc, #0, 12
   106a0:	add	ip, ip, #16, 20	; 0x10000
   106a4:	ldr	pc, [ip, #2416]!	; 0x970

000106a8 <puts@plt>:
   106a8:	add	ip, pc, #0, 12
   106ac:	add	ip, ip, #16, 20	; 0x10000
   106b0:	ldr	pc, [ip, #2408]!	; 0x968

000106b4 <malloc@plt>:
   106b4:	add	ip, pc, #0, 12
   106b8:	add	ip, ip, #16, 20	; 0x10000
   106bc:	ldr	pc, [ip, #2400]!	; 0x960

000106c0 <__libc_start_main@plt>:
   106c0:	add	ip, pc, #0, 12
   106c4:	add	ip, ip, #16, 20	; 0x10000
   106c8:	ldr	pc, [ip, #2392]!	; 0x958

000106cc <__gmon_start__@plt>:
   106cc:	add	ip, pc, #0, 12
   106d0:	add	ip, ip, #16, 20	; 0x10000
   106d4:	ldr	pc, [ip, #2384]!	; 0x950

000106d8 <putchar@plt>:
   106d8:	add	ip, pc, #0, 12
   106dc:	add	ip, ip, #16, 20	; 0x10000
   106e0:	ldr	pc, [ip, #2376]!	; 0x948

000106e4 <__isoc99_scanf@plt>:
   106e4:	add	ip, pc, #0, 12
   106e8:	add	ip, ip, #16, 20	; 0x10000
   106ec:	ldr	pc, [ip, #2368]!	; 0x940

000106f0 <abort@plt>:
   106f0:	add	ip, pc, #0, 12
   106f4:	add	ip, ip, #16, 20	; 0x10000
   106f8:	ldr	pc, [ip, #2360]!	; 0x938

Disassembly of section .text:

000106fc <_start@@Base>:
   106fc:	mov	fp, #0
   10700:	mov	lr, #0
   10704:	pop	{r1}		; (ldr r1, [sp], #4)
   10708:	mov	r2, sp
   1070c:	push	{r2}		; (str r2, [sp, #-4]!)
   10710:	push	{r0}		; (str r0, [sp, #-4]!)
   10714:	ldr	ip, [pc, #16]	; 1072c <_start@@Base+0x30>
   10718:	push	{ip}		; (str ip, [sp, #-4]!)
   1071c:	ldr	r0, [pc, #12]	; 10730 <_start@@Base+0x34>
   10720:	ldr	r3, [pc, #12]	; 10734 <_start@@Base+0x38>
   10724:	bl	106c0 <__libc_start_main@plt>
   10728:	bl	106f0 <abort@plt>
   1072c:	andeq	r0, r1, r0, ror #22
   10730:	andeq	r0, r1, r4, lsr #16
   10734:	andeq	r0, r1, r0, lsl #22
   10738:	ldr	r3, [pc, #20]	; 10754 <_start@@Base+0x58>
   1073c:	ldr	r2, [pc, #20]	; 10758 <_start@@Base+0x5c>
   10740:	add	r3, pc, r3
   10744:	ldr	r2, [r3, r2]
   10748:	cmp	r2, #0
   1074c:	bxeq	lr
   10750:	b	106cc <__gmon_start__@plt>
   10754:			; <UNDEFINED> instruction: 0x000108b8
   10758:	andeq	r0, r0, r4, lsr r0
   1075c:	ldr	r3, [pc, #28]	; 10780 <_start@@Base+0x84>
   10760:	ldr	r0, [pc, #28]	; 10784 <_start@@Base+0x88>
   10764:	sub	r3, r3, r0
   10768:	cmp	r3, #6
   1076c:	bxls	lr
   10770:	ldr	r3, [pc, #16]	; 10788 <_start@@Base+0x8c>
   10774:	cmp	r3, #0
   10778:	bxeq	lr
   1077c:	bx	r3
   10780:	andeq	r1, r2, r3, asr #32
   10784:	andeq	r1, r2, r0, asr #32
   10788:	andeq	r0, r0, r0
   1078c:	ldr	r1, [pc, #36]	; 107b8 <_start@@Base+0xbc>
   10790:	ldr	r0, [pc, #36]	; 107bc <_start@@Base+0xc0>
   10794:	sub	r1, r1, r0
   10798:	asr	r1, r1, #2
   1079c:	add	r1, r1, r1, lsr #31
   107a0:	asrs	r1, r1, #1
   107a4:	bxeq	lr
   107a8:	ldr	r3, [pc, #16]	; 107c0 <_start@@Base+0xc4>
   107ac:	cmp	r3, #0
   107b0:	bxeq	lr
   107b4:	bx	r3
   107b8:	andeq	r1, r2, r0, asr #32
   107bc:	andeq	r1, r2, r0, asr #32
   107c0:	andeq	r0, r0, r0
   107c4:	push	{r4, lr}
   107c8:	ldr	r4, [pc, #24]	; 107e8 <_start@@Base+0xec>
   107cc:	ldrb	r3, [r4]
   107d0:	cmp	r3, #0
   107d4:	popne	{r4, pc}
   107d8:	bl	1075c <_start@@Base+0x60>
   107dc:	mov	r3, #1
   107e0:	strb	r3, [r4]
   107e4:	pop	{r4, pc}
   107e8:	andeq	r1, r2, r0, asr #32
   107ec:	ldr	r0, [pc, #40]	; 1081c <_start@@Base+0x120>
   107f0:	ldr	r3, [r0]
   107f4:	cmp	r3, #0
   107f8:	bne	10800 <_start@@Base+0x104>
   107fc:	b	1078c <_start@@Base+0x90>
   10800:	ldr	r3, [pc, #24]	; 10820 <_start@@Base+0x124>
   10804:	cmp	r3, #0
   10808:	beq	107fc <_start@@Base+0x100>
   1080c:	push	{r4, lr}
   10810:	blx	r3
   10814:	pop	{r4, lr}
   10818:	b	1078c <_start@@Base+0x90>
   1081c:	andeq	r0, r2, r4, lsl pc
   10820:	andeq	r0, r0, r0

00010824 <main@@Base>:
   10824:	push	{fp, lr}
   10828:	add	fp, sp, #4
   1082c:	sub	sp, sp, #32
   10830:	mov	r3, #0
   10834:	str	r3, [fp, #-8]
   10838:	mov	r3, #0
   1083c:	str	r3, [fp, #-12]
   10840:	ldr	r3, [pc, #524]	; 10a54 <main@@Base+0x230>
   10844:	add	r3, pc, r3
   10848:	mov	r0, r3
   1084c:	bl	10684 <printf@plt>
   10850:	sub	r3, fp, #32
   10854:	mov	r1, r3
   10858:	ldr	r3, [pc, #504]	; 10a58 <main@@Base+0x234>
   1085c:	add	r3, pc, r3
   10860:	mov	r0, r3
   10864:	bl	106e4 <__isoc99_scanf@plt>
   10868:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1086c:	lsl	r3, r3, #2
   10870:	mov	r0, r3
   10874:	bl	106b4 <malloc@plt>
   10878:	mov	r3, r0
   1087c:	str	r3, [fp, #-20]	; 0xffffffec
   10880:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10884:	lsl	r3, r3, #2
   10888:	mov	r0, r3
   1088c:	bl	106b4 <malloc@plt>
   10890:	mov	r3, r0
   10894:	str	r3, [fp, #-24]	; 0xffffffe8
   10898:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1089c:	lsl	r3, r3, #2
   108a0:	mov	r0, r3
   108a4:	bl	106b4 <malloc@plt>
   108a8:	mov	r3, r0
   108ac:	str	r3, [fp, #-28]	; 0xffffffe4
   108b0:	mov	r3, #0
   108b4:	str	r3, [fp, #-16]
   108b8:	b	10994 <main@@Base+0x170>
   108bc:	ldr	r3, [fp, #-16]
   108c0:	add	r3, r3, #1
   108c4:	mov	r1, r3
   108c8:	ldr	r3, [pc, #396]	; 10a5c <main@@Base+0x238>
   108cc:	add	r3, pc, r3
   108d0:	mov	r0, r3
   108d4:	bl	10684 <printf@plt>
   108d8:	ldr	r3, [fp, #-16]
   108dc:	lsl	r3, r3, #2
   108e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   108e4:	add	r3, r2, r3
   108e8:	mov	r1, r3
   108ec:	ldr	r3, [pc, #364]	; 10a60 <main@@Base+0x23c>
   108f0:	add	r3, pc, r3
   108f4:	mov	r0, r3
   108f8:	bl	106e4 <__isoc99_scanf@plt>
   108fc:	ldr	r3, [fp, #-16]
   10900:	lsl	r3, r3, #2
   10904:	ldr	r2, [fp, #-20]	; 0xffffffec
   10908:	add	r3, r2, r3
   1090c:	ldr	r3, [r3]
   10910:	and	r3, r3, #1
   10914:	cmp	r3, #0
   10918:	beq	10954 <main@@Base+0x130>
   1091c:	ldr	r3, [fp, #-12]
   10920:	lsl	r3, r3, #2
   10924:	ldr	r2, [fp, #-28]	; 0xffffffe4
   10928:	add	r3, r2, r3
   1092c:	ldr	r2, [fp, #-16]
   10930:	lsl	r2, r2, #2
   10934:	ldr	r1, [fp, #-20]	; 0xffffffec
   10938:	add	r2, r1, r2
   1093c:	ldr	r2, [r2]
   10940:	str	r2, [r3]
   10944:	ldr	r3, [fp, #-12]
   10948:	add	r3, r3, #1
   1094c:	str	r3, [fp, #-12]
   10950:	b	10988 <main@@Base+0x164>
   10954:	ldr	r3, [fp, #-8]
   10958:	lsl	r3, r3, #2
   1095c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   10960:	add	r3, r2, r3
   10964:	ldr	r2, [fp, #-16]
   10968:	lsl	r2, r2, #2
   1096c:	ldr	r1, [fp, #-20]	; 0xffffffec
   10970:	add	r2, r1, r2
   10974:	ldr	r2, [r2]
   10978:	str	r2, [r3]
   1097c:	ldr	r3, [fp, #-8]
   10980:	add	r3, r3, #1
   10984:	str	r3, [fp, #-8]
   10988:	ldr	r3, [fp, #-16]
   1098c:	add	r3, r3, #1
   10990:	str	r3, [fp, #-16]
   10994:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10998:	ldr	r2, [fp, #-16]
   1099c:	cmp	r2, r3
   109a0:	blt	108bc <main@@Base+0x98>
   109a4:	ldr	r3, [fp, #-8]
   109a8:	lsl	r3, r3, #2
   109ac:	mov	r1, r3
   109b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   109b4:	bl	1069c <realloc@plt>
   109b8:	str	r0, [fp, #-24]	; 0xffffffe8
   109bc:	ldr	r3, [fp, #-12]
   109c0:	lsl	r3, r3, #2
   109c4:	mov	r1, r3
   109c8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   109cc:	bl	1069c <realloc@plt>
   109d0:	str	r0, [fp, #-28]	; 0xffffffe4
   109d4:	ldr	r3, [pc, #136]	; 10a64 <main@@Base+0x240>
   109d8:	add	r3, pc, r3
   109dc:	mov	r0, r3
   109e0:	bl	10684 <printf@plt>
   109e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   109e8:	mov	r1, r3
   109ec:	ldr	r0, [fp, #-20]	; 0xffffffec
   109f0:	bl	10a70 <PrintArray@@Base>
   109f4:	ldr	r3, [pc, #108]	; 10a68 <main@@Base+0x244>
   109f8:	add	r3, pc, r3
   109fc:	mov	r0, r3
   10a00:	bl	10684 <printf@plt>
   10a04:	ldr	r1, [fp, #-8]
   10a08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10a0c:	bl	10a70 <PrintArray@@Base>
   10a10:	ldr	r3, [pc, #84]	; 10a6c <main@@Base+0x248>
   10a14:	add	r3, pc, r3
   10a18:	mov	r0, r3
   10a1c:	bl	10684 <printf@plt>
   10a20:	ldr	r1, [fp, #-12]
   10a24:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10a28:	bl	10a70 <PrintArray@@Base>
   10a2c:	ldr	r0, [fp, #-20]	; 0xffffffec
   10a30:	bl	10690 <free@plt>
   10a34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10a38:	bl	10690 <free@plt>
   10a3c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10a40:	bl	10690 <free@plt>
   10a44:	mov	r3, #0
   10a48:	mov	r0, r3
   10a4c:	sub	sp, fp, #4
   10a50:	pop	{fp, pc}
   10a54:	andeq	r0, r0, r4, lsr #6
   10a58:	andeq	r0, r0, r4, lsr #6
   10a5c:			; <UNDEFINED> instruction: 0x000002b8
   10a60:	muleq	r0, r0, r2
   10a64:	andeq	r0, r0, r8, asr #3
   10a68:			; <UNDEFINED> instruction: 0x000001bc
   10a6c:			; <UNDEFINED> instruction: 0x000001b0

00010a70 <PrintArray@@Base>:
   10a70:	push	{fp, lr}
   10a74:	add	fp, sp, #4
   10a78:	sub	sp, sp, #16
   10a7c:	str	r0, [fp, #-16]
   10a80:	str	r1, [fp, #-20]	; 0xffffffec
   10a84:	mov	r0, #91	; 0x5b
   10a88:	bl	106d8 <putchar@plt>
   10a8c:	mov	r3, #0
   10a90:	str	r3, [fp, #-8]
   10a94:	b	10acc <PrintArray@@Base+0x5c>
   10a98:	ldr	r3, [fp, #-8]
   10a9c:	lsl	r3, r3, #2
   10aa0:	ldr	r2, [fp, #-16]
   10aa4:	add	r3, r2, r3
   10aa8:	ldr	r3, [r3]
   10aac:	mov	r1, r3
   10ab0:	ldr	r3, [pc, #64]	; 10af8 <PrintArray@@Base+0x88>
   10ab4:	add	r3, pc, r3
   10ab8:	mov	r0, r3
   10abc:	bl	10684 <printf@plt>
   10ac0:	ldr	r3, [fp, #-8]
   10ac4:	add	r3, r3, #1
   10ac8:	str	r3, [fp, #-8]
   10acc:	ldr	r2, [fp, #-8]
   10ad0:	ldr	r3, [fp, #-20]	; 0xffffffec
   10ad4:	cmp	r2, r3
   10ad8:	blt	10a98 <PrintArray@@Base+0x28>
   10adc:	ldr	r3, [pc, #24]	; 10afc <PrintArray@@Base+0x8c>
   10ae0:	add	r3, pc, r3
   10ae4:	mov	r0, r3
   10ae8:	bl	106a8 <puts@plt>
   10aec:	nop			; (mov r0, r0)
   10af0:	sub	sp, fp, #4
   10af4:	pop	{fp, pc}
   10af8:	andeq	r0, r0, r4, lsr #2
   10afc:	strdeq	r0, [r0], -ip

00010b00 <__libc_csu_init@@Base>:
   10b00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10b04:	mov	r7, r0
   10b08:	ldr	r6, [pc, #72]	; 10b58 <__libc_csu_init@@Base+0x58>
   10b0c:	ldr	r5, [pc, #72]	; 10b5c <__libc_csu_init@@Base+0x5c>
   10b10:	add	r6, pc, r6
   10b14:	add	r5, pc, r5
   10b18:	sub	r6, r6, r5
   10b1c:	mov	r8, r1
   10b20:	mov	r9, r2
   10b24:	bl	10664 <printf@plt-0x20>
   10b28:	asrs	r6, r6, #2
   10b2c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b30:	mov	r4, #0
   10b34:	add	r4, r4, #1
   10b38:	ldr	r3, [r5], #4
   10b3c:	mov	r2, r9
   10b40:	mov	r1, r8
   10b44:	mov	r0, r7
   10b48:	blx	r3
   10b4c:	cmp	r6, r4
   10b50:	bne	10b34 <__libc_csu_init@@Base+0x34>
   10b54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b58:	strdeq	r0, [r1], -r8
   10b5c:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>

00010b60 <__libc_csu_fini@@Base>:
   10b60:	bx	lr

Disassembly of section .fini:

00010b64 <.fini>:
   10b64:	push	{r3, lr}
   10b68:	pop	{r3, pc}
