
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

000128c4 <.init>:
   128c4:	push	{r3, lr}
   128c8:	bl	12bf8 <_start@@Base+0x3c>
   128cc:	pop	{r3, pc}

Disassembly of section .plt:

000128d0 <strcmp@plt-0x14>:
   128d0:	push	{lr}		; (str lr, [sp, #-4]!)
   128d4:	ldr	lr, [pc, #4]	; 128e0 <strcmp@plt-0x4>
   128d8:	add	lr, pc, lr
   128dc:	ldr	pc, [lr, #8]!
   128e0:	andeq	r7, r2, r0, lsr #14

000128e4 <strcmp@plt>:
   128e4:	add	ip, pc, #0, 12
   128e8:	add	ip, ip, #159744	; 0x27000
   128ec:	ldr	pc, [ip, #1824]!	; 0x720

000128f0 <printf@plt>:
   128f0:	add	ip, pc, #0, 12
   128f4:	add	ip, ip, #159744	; 0x27000
   128f8:	ldr	pc, [ip, #1816]!	; 0x718

000128fc <free@plt>:
   128fc:	add	ip, pc, #0, 12
   12900:	add	ip, ip, #159744	; 0x27000
   12904:	ldr	pc, [ip, #1808]!	; 0x710

00012908 <memcpy@plt>:
   12908:	add	ip, pc, #0, 12
   1290c:	add	ip, ip, #159744	; 0x27000
   12910:	ldr	pc, [ip, #1800]!	; 0x708

00012914 <memcmp@plt>:
   12914:	add	ip, pc, #0, 12
   12918:	add	ip, ip, #159744	; 0x27000
   1291c:	ldr	pc, [ip, #1792]!	; 0x700

00012920 <realloc@plt>:
   12920:	add	ip, pc, #0, 12
   12924:	add	ip, ip, #159744	; 0x27000
   12928:	ldr	pc, [ip, #1784]!	; 0x6f8

0001292c <fwrite@plt>:
   1292c:	add	ip, pc, #0, 12
   12930:	add	ip, ip, #159744	; 0x27000
   12934:	ldr	pc, [ip, #1776]!	; 0x6f0

00012938 <gettimeofday@plt>:
   12938:	add	ip, pc, #0, 12
   1293c:	add	ip, ip, #159744	; 0x27000
   12940:	ldr	pc, [ip, #1768]!	; 0x6e8

00012944 <puts@plt>:
   12944:	add	ip, pc, #0, 12
   12948:	add	ip, ip, #159744	; 0x27000
   1294c:	ldr	pc, [ip, #1760]!	; 0x6e0

00012950 <malloc@plt>:
   12950:	add	ip, pc, #0, 12
   12954:	add	ip, ip, #159744	; 0x27000
   12958:	ldr	pc, [ip, #1752]!	; 0x6d8

0001295c <__libc_start_main@plt>:
   1295c:	add	ip, pc, #0, 12
   12960:	add	ip, ip, #159744	; 0x27000
   12964:	ldr	pc, [ip, #1744]!	; 0x6d0

00012968 <__gmon_start__@plt>:
   12968:	add	ip, pc, #0, 12
   1296c:	add	ip, ip, #159744	; 0x27000
   12970:	ldr	pc, [ip, #1736]!	; 0x6c8

00012974 <strlen@plt>:
   12974:	add	ip, pc, #0, 12
   12978:	add	ip, ip, #159744	; 0x27000
   1297c:	ldr	pc, [ip, #1728]!	; 0x6c0

00012980 <fprintf@plt>:
   12980:	add	ip, pc, #0, 12
   12984:	add	ip, ip, #159744	; 0x27000
   12988:	ldr	pc, [ip, #1720]!	; 0x6b8

0001298c <posix_memalign@plt>:
   1298c:	add	ip, pc, #0, 12
   12990:	add	ip, ip, #159744	; 0x27000
   12994:	ldr	pc, [ip, #1712]!	; 0x6b0

00012998 <memset@plt>:
   12998:	add	ip, pc, #0, 12
   1299c:	add	ip, ip, #159744	; 0x27000
   129a0:	ldr	pc, [ip, #1704]!	; 0x6a8

000129a4 <strncpy@plt>:
   129a4:	add	ip, pc, #0, 12
   129a8:	add	ip, ip, #159744	; 0x27000
   129ac:	ldr	pc, [ip, #1696]!	; 0x6a0

000129b0 <memchr@plt>:
   129b0:	add	ip, pc, #0, 12
   129b4:	add	ip, ip, #159744	; 0x27000
   129b8:	ldr	pc, [ip, #1688]!	; 0x698

000129bc <fputc@plt>:
   129bc:	add	ip, pc, #0, 12
   129c0:	add	ip, ip, #159744	; 0x27000
   129c4:	ldr	pc, [ip, #1680]!	; 0x690

000129c8 <strncmp@plt>:
   129c8:	add	ip, pc, #0, 12
   129cc:	add	ip, ip, #159744	; 0x27000
   129d0:	ldr	pc, [ip, #1672]!	; 0x688

000129d4 <abort@plt>:
   129d4:	add	ip, pc, #0, 12
   129d8:	add	ip, ip, #159744	; 0x27000
   129dc:	ldr	pc, [ip, #1664]!	; 0x680

000129e0 <__assert_fail@plt>:
   129e0:	add	ip, pc, #0, 12
   129e4:	add	ip, ip, #159744	; 0x27000
   129e8:	ldr	pc, [ip, #1656]!	; 0x678

Disassembly of section .text:

000129f0 <main@@Base>:
   129f0:	strd	r4, [sp, #-12]!
   129f4:	str	lr, [sp, #8]
   129f8:	sub	sp, sp, #236	; 0xec
   129fc:	mov	r4, sp
   12a00:	mov	r0, r4
   12a04:	bl	1f0ac <flatcc_builder_init@@Base>
   12a08:	ldr	r0, [pc, #420]	; 12bb4 <main@@Base+0x1c4>
   12a0c:	add	r0, pc, r0
   12a10:	bl	12944 <puts@plt>
   12a14:	mov	r0, r4
   12a18:	bl	157a4 <test_table_with_emptystruct@@Base>
   12a1c:	cmp	r0, #0
   12a20:	bne	12ba0 <main@@Base+0x1b0>
   12a24:	mov	r0, r4
   12a28:	bl	14c18 <test_enums@@Base>
   12a2c:	cmp	r0, #0
   12a30:	bne	12ba0 <main@@Base+0x1b0>
   12a34:	mov	r0, r4
   12a38:	bl	151ac <test_empty_monster@@Base>
   12a3c:	cmp	r0, #0
   12a40:	bne	12ba0 <main@@Base+0x1b0>
   12a44:	mov	r0, r4
   12a48:	bl	17298 <test_monster@@Base>
   12a4c:	cmp	r0, #0
   12a50:	bne	12ba0 <main@@Base+0x1b0>
   12a54:	mov	r0, r4
   12a58:	bl	17368 <test_monster_with_size@@Base>
   12a5c:	cmp	r0, #0
   12a60:	bne	12ba0 <main@@Base+0x1b0>
   12a64:	mov	r0, r4
   12a68:	bl	174a0 <test_string@@Base>
   12a6c:	cmp	r0, #0
   12a70:	bne	12ba0 <main@@Base+0x1b0>
   12a74:	mov	r0, r4
   12a78:	bl	1ddcc <test_struct_buffer@@Base>
   12a7c:	cmp	r0, #0
   12a80:	bne	12ba0 <main@@Base+0x1b0>
   12a84:	mov	r0, r4
   12a88:	bl	1535c <test_typed_empty_monster@@Base>
   12a8c:	cmp	r0, #0
   12a90:	bne	12ba0 <main@@Base+0x1b0>
   12a94:	mov	r0, r4
   12a98:	bl	158ec <test_typed_table_with_emptystruct@@Base>
   12a9c:	cmp	r0, #0
   12aa0:	bne	12ba0 <main@@Base+0x1b0>
   12aa4:	mov	r0, r4
   12aa8:	bl	1e064 <test_typed_struct_buffer@@Base>
   12aac:	cmp	r0, #0
   12ab0:	bne	12ba0 <main@@Base+0x1b0>
   12ab4:	mov	r0, r4
   12ab8:	bl	1aca8 <test_clone_slice@@Base>
   12abc:	cmp	r0, #0
   12ac0:	bne	12ba0 <main@@Base+0x1b0>
   12ac4:	mov	r0, r4
   12ac8:	bl	1ce1c <test_add_set_defaults@@Base>
   12acc:	cmp	r0, #0
   12ad0:	bne	12ba0 <main@@Base+0x1b0>
   12ad4:	mov	r0, r4
   12ad8:	bl	1b910 <test_create_add_field@@Base>
   12adc:	cmp	r0, #0
   12ae0:	bne	12ba0 <main@@Base+0x1b0>
   12ae4:	mov	r0, r4
   12ae8:	bl	1bc1c <test_union_vector@@Base>
   12aec:	cmp	r0, #0
   12af0:	bne	12ba0 <main@@Base+0x1b0>
   12af4:	mov	r0, r4
   12af8:	bl	1a7b4 <test_basic_sort@@Base>
   12afc:	cmp	r0, #0
   12b00:	bne	12ba0 <main@@Base+0x1b0>
   12b04:	mov	r0, r4
   12b08:	bl	177e8 <test_sort_find@@Base>
   12b0c:	cmp	r0, #0
   12b10:	bne	12ba0 <main@@Base+0x1b0>
   12b14:	mov	r0, r4
   12b18:	bl	18ce0 <test_scan@@Base>
   12b1c:	cmp	r0, #0
   12b20:	bne	12ba0 <main@@Base+0x1b0>
   12b24:	mov	r0, r4
   12b28:	bl	1d1a8 <test_nested_buffer@@Base>
   12b2c:	cmp	r0, #0
   12b30:	bne	12ba0 <main@@Base+0x1b0>
   12b34:	mov	r0, r4
   12b38:	bl	1d570 <test_nested_buffer_first@@Base>
   12b3c:	cmp	r0, #0
   12b40:	bne	12ba0 <main@@Base+0x1b0>
   12b44:	mov	r0, r4
   12b48:	bl	1d93c <test_nested_buffer_using_nest@@Base>
   12b4c:	cmp	r0, #0
   12b50:	bne	12ba0 <main@@Base+0x1b0>
   12b54:	mov	r0, r4
   12b58:	bl	1ddc4 <verify_include@@Base>
   12b5c:	cmp	r0, #0
   12b60:	bne	12ba0 <main@@Base+0x1b0>
   12b64:	mov	r0, r4
   12b68:	bl	14c20 <test_type_aliases@@Base>
   12b6c:	cmp	r0, #0
   12b70:	bne	12ba0 <main@@Base+0x1b0>
   12b74:	mov	r0, r4
   12b78:	bl	1c03c <test_mixed_type_union@@Base>
   12b7c:	subs	r5, r0, #0
   12b80:	bne	12ba0 <main@@Base+0x1b0>
   12b84:	mov	r0, r4
   12b88:	bl	1f25c <flatcc_builder_clear@@Base>
   12b8c:	mov	r0, r5
   12b90:	add	sp, sp, #236	; 0xec
   12b94:	ldrd	r4, [sp]
   12b98:	add	sp, sp, #8
   12b9c:	pop	{pc}		; (ldr pc, [sp], #4)
   12ba0:	ldr	r0, [pc, #16]	; 12bb8 <main@@Base+0x1c8>
   12ba4:	mvn	r5, #0
   12ba8:	add	r0, pc, r0
   12bac:	bl	12944 <puts@plt>
   12bb0:	b	12b8c <main@@Base+0x19c>
   12bb4:	andeq	r5, r1, r0, lsl #17
   12bb8:	andeq	r5, r1, r0, lsl #14

00012bbc <_start@@Base>:
   12bbc:	mov	fp, #0
   12bc0:	mov	lr, #0
   12bc4:	pop	{r1}		; (ldr r1, [sp], #4)
   12bc8:	mov	r2, sp
   12bcc:	push	{r2}		; (str r2, [sp, #-4]!)
   12bd0:	push	{r0}		; (str r0, [sp, #-4]!)
   12bd4:	ldr	ip, [pc, #16]	; 12bec <_start@@Base+0x30>
   12bd8:	push	{ip}		; (str ip, [sp, #-4]!)
   12bdc:	ldr	r0, [pc, #12]	; 12bf0 <_start@@Base+0x34>
   12be0:	ldr	r3, [pc, #12]	; 12bf4 <_start@@Base+0x38>
   12be4:	bl	1295c <__libc_start_main@plt>
   12be8:	bl	129d4 <abort@plt>
   12bec:	ldrdeq	r4, [r2], -r8
   12bf0:	strdeq	r2, [r1], -r0
   12bf4:	andeq	r4, r2, r8, ror lr
   12bf8:	ldr	r3, [pc, #20]	; 12c14 <_start@@Base+0x58>
   12bfc:	ldr	r2, [pc, #20]	; 12c18 <_start@@Base+0x5c>
   12c00:	add	r3, pc, r3
   12c04:	ldr	r2, [r3, r2]
   12c08:	cmp	r2, #0
   12c0c:	bxeq	lr
   12c10:	b	12968 <__gmon_start__@plt>
   12c14:	strdeq	r7, [r2], -r8
   12c18:	andeq	r0, r0, ip, rrx
   12c1c:	ldr	r0, [pc, #24]	; 12c3c <_start@@Base+0x80>
   12c20:	ldr	r3, [pc, #24]	; 12c40 <_start@@Base+0x84>
   12c24:	cmp	r3, r0
   12c28:	bxeq	lr
   12c2c:	ldr	r3, [pc, #16]	; 12c44 <_start@@Base+0x88>
   12c30:	cmp	r3, #0
   12c34:	bxeq	lr
   12c38:	bx	r3
   12c3c:	andeq	sl, r3, r0, lsl #1
   12c40:	andeq	sl, r3, r0, lsl #1
   12c44:	andeq	r0, r0, r0
   12c48:	ldr	r0, [pc, #36]	; 12c74 <_start@@Base+0xb8>
   12c4c:	ldr	r1, [pc, #36]	; 12c78 <_start@@Base+0xbc>
   12c50:	sub	r1, r1, r0
   12c54:	asr	r1, r1, #2
   12c58:	add	r1, r1, r1, lsr #31
   12c5c:	asrs	r1, r1, #1
   12c60:	bxeq	lr
   12c64:	ldr	r3, [pc, #16]	; 12c7c <_start@@Base+0xc0>
   12c68:	cmp	r3, #0
   12c6c:	bxeq	lr
   12c70:	bx	r3
   12c74:	andeq	sl, r3, r0, lsl #1
   12c78:	andeq	sl, r3, r0, lsl #1
   12c7c:	andeq	r0, r0, r0
   12c80:	push	{r4, lr}
   12c84:	ldr	r4, [pc, #24]	; 12ca4 <_start@@Base+0xe8>
   12c88:	ldrb	r3, [r4]
   12c8c:	cmp	r3, #0
   12c90:	popne	{r4, pc}
   12c94:	bl	12c1c <_start@@Base+0x60>
   12c98:	mov	r3, #1
   12c9c:	strb	r3, [r4]
   12ca0:	pop	{r4, pc}
   12ca4:	andeq	sl, r3, r0, lsl #1
   12ca8:	b	12c48 <_start@@Base+0x8c>
   12cac:	andeq	r0, r0, r0
   12cb0:	mov	r0, #0
   12cb4:	bx	lr
   12cb8:	mov	r3, #4
   12cbc:	mov	r1, #0
   12cc0:	mov	r2, r3
   12cc4:	b	238a8 <flatcc_verify_field@@Base>
   12cc8:	mov	r2, #0
   12ccc:	mov	r3, #1
   12cd0:	mov	r1, r2
   12cd4:	b	238a8 <flatcc_verify_field@@Base>
   12cd8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12cdc:	strd	r6, [sp, #8]
   12ce0:	mov	r7, r1
   12ce4:	mov	r6, r3
   12ce8:	ldr	r1, [pc, #324]	; 12e34 <_start@@Base+0x278>
   12cec:	strd	r8, [sp, #16]
   12cf0:	mov	r8, r2
   12cf4:	mov	r2, r0
   12cf8:	mov	r0, r3
   12cfc:	strd	sl, [sp, #24]
   12d00:	str	lr, [sp, #32]
   12d04:	sub	sp, sp, #36	; 0x24
   12d08:	add	r1, pc, r1
   12d0c:	bl	12980 <fprintf@plt>
   12d10:	cmp	r8, #0
   12d14:	beq	12e2c <_start@@Base+0x270>
   12d18:	ldr	r3, [pc, #280]	; 12e38 <_start@@Base+0x27c>
   12d1c:	sub	r7, r7, #1
   12d20:	mov	r4, #0
   12d24:	add	sl, sp, #12
   12d28:	ldr	fp, [pc, #268]	; 12e3c <_start@@Base+0x280>
   12d2c:	ldr	r9, [pc, #268]	; 12e40 <_start@@Base+0x284>
   12d30:	add	r3, pc, r3
   12d34:	add	fp, pc, fp
   12d38:	str	r3, [sp, #4]
   12d3c:	add	r9, pc, r9
   12d40:	b	12dac <_start@@Base+0x1f0>
   12d44:	cmp	r4, #0
   12d48:	mov	r2, sl
   12d4c:	ldr	r1, [sp, #4]
   12d50:	mov	r0, r6
   12d54:	beq	12d5c <_start@@Base+0x1a0>
   12d58:	bl	12980 <fprintf@plt>
   12d5c:	mov	r2, r4
   12d60:	mov	r1, fp
   12d64:	mov	r0, r6
   12d68:	bl	12980 <fprintf@plt>
   12d6c:	ldrb	r2, [r7, #1]!
   12d70:	mov	r1, r9
   12d74:	mov	r0, r6
   12d78:	bl	12980 <fprintf@plt>
   12d7c:	add	r3, sp, #32
   12d80:	mov	r2, #0
   12d84:	add	r5, r3, r5
   12d88:	add	r4, r4, #1
   12d8c:	ldrb	r3, [r7]
   12d90:	strb	r2, [r5, #-19]	; 0xffffffed
   12d94:	sub	r2, r3, #32
   12d98:	cmp	r2, #94	; 0x5e
   12d9c:	movhi	r3, #46	; 0x2e
   12da0:	cmp	r8, r4
   12da4:	strb	r3, [r5, #-20]	; 0xffffffec
   12da8:	beq	12dcc <_start@@Base+0x210>
   12dac:	ands	r5, r4, #15
   12db0:	beq	12d44 <_start@@Base+0x188>
   12db4:	tst	r4, #7
   12db8:	bne	12d6c <_start@@Base+0x1b0>
   12dbc:	mov	r1, r6
   12dc0:	mov	r0, #32
   12dc4:	bl	129bc <fputc@plt>
   12dc8:	b	12d6c <_start@@Base+0x1b0>
   12dcc:	tst	r4, #15
   12dd0:	beq	12dfc <_start@@Base+0x240>
   12dd4:	ldr	r5, [pc, #104]	; 12e44 <_start@@Base+0x288>
   12dd8:	add	r5, pc, r5
   12ddc:	add	r4, r4, #1
   12de0:	mov	r3, r6
   12de4:	mov	r2, #3
   12de8:	mov	r1, #1
   12dec:	mov	r0, r5
   12df0:	bl	1292c <fwrite@plt>
   12df4:	tst	r4, #15
   12df8:	bne	12ddc <_start@@Base+0x220>
   12dfc:	ldr	r1, [pc, #68]	; 12e48 <_start@@Base+0x28c>
   12e00:	mov	r2, sl
   12e04:	mov	r0, r6
   12e08:	add	r1, pc, r1
   12e0c:	bl	12980 <fprintf@plt>
   12e10:	add	sp, sp, #36	; 0x24
   12e14:	ldrd	r4, [sp]
   12e18:	ldrd	r6, [sp, #8]
   12e1c:	ldrd	r8, [sp, #16]
   12e20:	ldrd	sl, [sp, #24]
   12e24:	add	sp, sp, #32
   12e28:	pop	{pc}		; (ldr pc, [sp], #4)
   12e2c:	add	sl, sp, #12
   12e30:	b	12dfc <_start@@Base+0x240>
   12e34:	andeq	r2, r1, r8, lsr #18
   12e38:	andeq	r2, r1, r8, lsl #18
   12e3c:	andeq	r2, r1, ip, lsl #18
   12e40:	andeq	r2, r1, ip, lsl #18
   12e44:	andeq	r2, r1, r8, ror r8
   12e48:	andeq	r2, r1, r0, lsr r8
   12e4c:	push	{lr}		; (str lr, [sp, #-4]!)
   12e50:	sub	sp, sp, #12
   12e54:	mov	r1, #0
   12e58:	mov	r0, sp
   12e5c:	bl	12938 <gettimeofday@plt>
   12e60:	ldr	r3, [pc, #104]	; 12ed0 <_start@@Base+0x314>
   12e64:	add	r3, pc, r3
   12e68:	ldr	r0, [r3]
   12e6c:	cmp	r0, #0
   12e70:	bne	12e88 <_start@@Base+0x2cc>
   12e74:	ldr	r2, [sp]
   12e78:	ldr	r1, [sp, #4]
   12e7c:	mov	r0, r2
   12e80:	str	r2, [r3]
   12e84:	str	r1, [r3, #4]
   12e88:	ldr	r1, [pc, #68]	; 12ed4 <_start@@Base+0x318>
   12e8c:	vldr	d5, [pc, #52]	; 12ec8 <_start@@Base+0x30c>
   12e90:	ldr	r2, [sp, #4]
   12e94:	add	r1, pc, r1
   12e98:	ldr	r1, [r1, #4]
   12e9c:	ldr	r3, [sp]
   12ea0:	sub	r2, r2, r1
   12ea4:	vmov	s15, r2
   12ea8:	sub	r3, r3, r0
   12eac:	vmov	s0, r3
   12eb0:	vcvt.f64.s32	d7, s15
   12eb4:	vcvt.f64.s32	d0, s0
   12eb8:	vdiv.f64	d6, d7, d5
   12ebc:	vadd.f64	d0, d6, d0
   12ec0:	add	sp, sp, #12
   12ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ec8:	andeq	r0, r0, r0
   12ecc:	smlawbmi	lr, r0, r4, r8
   12ed0:	andeq	r7, r2, r8, lsl r2
   12ed4:	andeq	r7, r2, r8, ror #3
   12ed8:	ldr	r3, [pc, #32]	; 12f00 <_start@@Base+0x344>
   12edc:	movw	r2, #697	; 0x2b9
   12ee0:	str	r4, [sp, #-8]!
   12ee4:	ldr	r1, [pc, #24]	; 12f04 <_start@@Base+0x348>
   12ee8:	str	lr, [sp, #4]
   12eec:	ldr	r0, [pc, #20]	; 12f08 <_start@@Base+0x34c>
   12ef0:	add	r3, pc, r3
   12ef4:	add	r1, pc, r1
   12ef8:	add	r0, pc, r0
   12efc:	bl	129e0 <__assert_fail@plt>
   12f00:	strdeq	r1, [r1], -r0
   12f04:	andeq	r2, r1, r0, ror #14
   12f08:	ldrdeq	r2, [r1], -r8
   12f0c:	ldr	r3, [pc, #36]	; 12f38 <_start@@Base+0x37c>
   12f10:	movw	r2, #697	; 0x2b9
   12f14:	str	r4, [sp, #-8]!
   12f18:	ldr	r1, [pc, #28]	; 12f3c <_start@@Base+0x380>
   12f1c:	str	lr, [sp, #4]
   12f20:	ldr	r0, [pc, #24]	; 12f40 <_start@@Base+0x384>
   12f24:	add	r3, pc, r3
   12f28:	add	r3, r3, #28
   12f2c:	add	r1, pc, r1
   12f30:	add	r0, pc, r0
   12f34:	bl	129e0 <__assert_fail@plt>
   12f38:			; <UNDEFINED> instruction: 0x00011fbc
   12f3c:	andeq	r2, r1, r8, lsr #14
   12f40:	andeq	r2, r1, r0, lsr #15
   12f44:	ldr	r3, [pc, #36]	; 12f70 <_start@@Base+0x3b4>
   12f48:	mov	r2, #696	; 0x2b8
   12f4c:	str	r4, [sp, #-8]!
   12f50:	ldr	r1, [pc, #28]	; 12f74 <_start@@Base+0x3b8>
   12f54:	str	lr, [sp, #4]
   12f58:	ldr	r0, [pc, #24]	; 12f78 <_start@@Base+0x3bc>
   12f5c:	add	r3, pc, r3
   12f60:	add	r3, r3, #68	; 0x44
   12f64:	add	r1, pc, r1
   12f68:	add	r0, pc, r0
   12f6c:	bl	129e0 <__assert_fail@plt>
   12f70:	andeq	r1, r1, r4, lsl #31
   12f74:	strdeq	r2, [r1], -r0
   12f78:	andeq	r2, r1, r8, ror #14
   12f7c:	ldr	r3, [pc, #36]	; 12fa8 <_start@@Base+0x3ec>
   12f80:	mov	r2, #696	; 0x2b8
   12f84:	str	r4, [sp, #-8]!
   12f88:	ldr	r1, [pc, #28]	; 12fac <_start@@Base+0x3f0>
   12f8c:	str	lr, [sp, #4]
   12f90:	ldr	r0, [pc, #24]	; 12fb0 <_start@@Base+0x3f4>
   12f94:	add	r3, pc, r3
   12f98:	add	r3, r3, #108	; 0x6c
   12f9c:	add	r1, pc, r1
   12fa0:	add	r0, pc, r0
   12fa4:	bl	129e0 <__assert_fail@plt>
   12fa8:	andeq	r1, r1, ip, asr #30
   12fac:			; <UNDEFINED> instruction: 0x000126b8
   12fb0:	andeq	r2, r1, r0, lsr r7
   12fb4:	ldr	r3, [pc, #36]	; 12fe0 <_start@@Base+0x424>
   12fb8:	movw	r2, #706	; 0x2c2
   12fbc:	str	r4, [sp, #-8]!
   12fc0:	ldr	r1, [pc, #28]	; 12fe4 <_start@@Base+0x428>
   12fc4:	str	lr, [sp, #4]
   12fc8:	ldr	r0, [pc, #24]	; 12fe8 <_start@@Base+0x42c>
   12fcc:	add	r3, pc, r3
   12fd0:	add	r3, r3, #136	; 0x88
   12fd4:	add	r1, pc, r1
   12fd8:	add	r0, pc, r0
   12fdc:	bl	129e0 <__assert_fail@plt>
   12fe0:	andeq	r1, r1, r4, lsl pc
   12fe4:	andeq	r2, r1, r0, lsl #13
   12fe8:	strdeq	r2, [r1], -r8
   12fec:	ldr	r3, [pc, #36]	; 13018 <_start@@Base+0x45c>
   12ff0:	movw	r2, #698	; 0x2ba
   12ff4:	str	r4, [sp, #-8]!
   12ff8:	ldr	r1, [pc, #28]	; 1301c <_start@@Base+0x460>
   12ffc:	str	lr, [sp, #4]
   13000:	ldr	r0, [pc, #24]	; 13020 <_start@@Base+0x464>
   13004:	add	r3, pc, r3
   13008:	add	r3, r3, #172	; 0xac
   1300c:	add	r1, pc, r1
   13010:	add	r0, pc, r0
   13014:	bl	129e0 <__assert_fail@plt>
   13018:	ldrdeq	r1, [r1], -ip
   1301c:	andeq	r2, r1, r8, asr #12
   13020:	andeq	r2, r1, r0, asr #13
   13024:	ldr	r3, [pc, #36]	; 13050 <_start@@Base+0x494>
   13028:	movw	r2, #698	; 0x2ba
   1302c:	str	r4, [sp, #-8]!
   13030:	ldr	r1, [pc, #28]	; 13054 <_start@@Base+0x498>
   13034:	str	lr, [sp, #4]
   13038:	ldr	r0, [pc, #24]	; 13058 <_start@@Base+0x49c>
   1303c:	add	r3, pc, r3
   13040:	add	r3, r3, #200	; 0xc8
   13044:	add	r1, pc, r1
   13048:	add	r0, pc, r0
   1304c:	bl	129e0 <__assert_fail@plt>
   13050:	andeq	r1, r1, r4, lsr #29
   13054:	andeq	r2, r1, r0, lsl r6
   13058:	andeq	r2, r1, r8, lsl #13
   1305c:	ldr	r3, [pc, #36]	; 13088 <_start@@Base+0x4cc>
   13060:	movw	r2, #718	; 0x2ce
   13064:	str	r4, [sp, #-8]!
   13068:	ldr	r1, [pc, #28]	; 1308c <_start@@Base+0x4d0>
   1306c:	str	lr, [sp, #4]
   13070:	ldr	r0, [pc, #24]	; 13090 <_start@@Base+0x4d4>
   13074:	add	r3, pc, r3
   13078:	add	r3, r3, #240	; 0xf0
   1307c:	add	r1, pc, r1
   13080:	add	r0, pc, r0
   13084:	bl	129e0 <__assert_fail@plt>
   13088:	andeq	r1, r1, ip, ror #28
   1308c:	ldrdeq	r2, [r1], -r8
   13090:	andeq	r2, r1, r0, asr r6
   13094:	ldr	r3, [pc, #36]	; 130c0 <_start@@Base+0x504>
   13098:	mov	r2, #712	; 0x2c8
   1309c:	str	r4, [sp, #-8]!
   130a0:	ldr	r1, [pc, #28]	; 130c4 <_start@@Base+0x508>
   130a4:	str	lr, [sp, #4]
   130a8:	ldr	r0, [pc, #24]	; 130c8 <_start@@Base+0x50c>
   130ac:	add	r3, pc, r3
   130b0:	add	r3, r3, #272	; 0x110
   130b4:	add	r1, pc, r1
   130b8:	add	r0, pc, r0
   130bc:	bl	129e0 <__assert_fail@plt>
   130c0:	andeq	r1, r1, r4, lsr lr
   130c4:	andeq	r2, r1, r0, lsr #11
   130c8:	andeq	r2, r1, r8, lsl r6
   130cc:	ldr	r3, [pc, #36]	; 130f8 <_start@@Base+0x53c>
   130d0:	mov	r2, #108	; 0x6c
   130d4:	str	r4, [sp, #-8]!
   130d8:	ldr	r1, [pc, #28]	; 130fc <_start@@Base+0x540>
   130dc:	str	lr, [sp, #4]
   130e0:	ldr	r0, [pc, #24]	; 13100 <_start@@Base+0x544>
   130e4:	add	r3, pc, r3
   130e8:	add	r3, r3, #316	; 0x13c
   130ec:	add	r1, pc, r1
   130f0:	add	r0, pc, r0
   130f4:	bl	129e0 <__assert_fail@plt>
   130f8:	strdeq	r1, [r1], -ip
   130fc:	andeq	r2, r1, ip, lsl #12
   13100:	andeq	r2, r1, r8, lsl #13
   13104:	ldr	r3, [pc, #36]	; 13130 <_start@@Base+0x574>
   13108:	movw	r2, #714	; 0x2ca
   1310c:	str	r4, [sp, #-8]!
   13110:	ldr	r1, [pc, #28]	; 13134 <_start@@Base+0x578>
   13114:	str	lr, [sp, #4]
   13118:	ldr	r0, [pc, #24]	; 13138 <_start@@Base+0x57c>
   1311c:	add	r3, pc, r3
   13120:	add	r3, r3, #344	; 0x158
   13124:	add	r1, pc, r1
   13128:	add	r0, pc, r0
   1312c:	bl	129e0 <__assert_fail@plt>
   13130:	andeq	r1, r1, r4, asr #27
   13134:	andeq	r2, r1, r0, lsr r5
   13138:	andeq	r2, r1, r8, lsr #11
   1313c:	ldr	r3, [pc, #36]	; 13168 <_start@@Base+0x5ac>
   13140:	movw	r2, #711	; 0x2c7
   13144:	str	r4, [sp, #-8]!
   13148:	ldr	r1, [pc, #28]	; 1316c <_start@@Base+0x5b0>
   1314c:	str	lr, [sp, #4]
   13150:	ldr	r0, [pc, #24]	; 13170 <_start@@Base+0x5b4>
   13154:	add	r3, pc, r3
   13158:	add	r3, r3, #384	; 0x180
   1315c:	add	r1, pc, r1
   13160:	add	r0, pc, r0
   13164:	bl	129e0 <__assert_fail@plt>
   13168:	andeq	r1, r1, ip, lsl #27
   1316c:	strdeq	r2, [r1], -r8
   13170:	andeq	r2, r1, r0, ror r5
   13174:	ldr	r3, [pc, #36]	; 131a0 <_start@@Base+0x5e4>
   13178:	movw	r2, #693	; 0x2b5
   1317c:	str	r4, [sp, #-8]!
   13180:	ldr	r1, [pc, #28]	; 131a4 <_start@@Base+0x5e8>
   13184:	str	lr, [sp, #4]
   13188:	ldr	r0, [pc, #24]	; 131a8 <_start@@Base+0x5ec>
   1318c:	add	r3, pc, r3
   13190:	add	r3, r3, #428	; 0x1ac
   13194:	add	r1, pc, r1
   13198:	add	r0, pc, r0
   1319c:	bl	129e0 <__assert_fail@plt>
   131a0:	andeq	r1, r1, r4, asr sp
   131a4:	andeq	r2, r1, r0, asr #9
   131a8:	andeq	r2, r1, r0, ror #11
   131ac:	ldr	r3, [pc, #36]	; 131d8 <_start@@Base+0x61c>
   131b0:	movw	r2, #717	; 0x2cd
   131b4:	str	r4, [sp, #-8]!
   131b8:	ldr	r1, [pc, #28]	; 131dc <_start@@Base+0x620>
   131bc:	str	lr, [sp, #4]
   131c0:	ldr	r0, [pc, #24]	; 131e0 <_start@@Base+0x624>
   131c4:	add	r3, pc, r3
   131c8:	add	r3, r3, #460	; 0x1cc
   131cc:	add	r1, pc, r1
   131d0:	add	r0, pc, r0
   131d4:	bl	129e0 <__assert_fail@plt>
   131d8:	andeq	r1, r1, ip, lsl sp
   131dc:	andeq	r2, r1, r8, lsl #9
   131e0:	andeq	r2, r1, r0, lsl #10
   131e4:	subs	r2, r0, #0
   131e8:	beq	13218 <_start@@Base+0x65c>
   131ec:	ldr	r3, [r2]
   131f0:	sub	r3, r2, r3
   131f4:	ldrh	r1, [r3]
   131f8:	cmp	r1, #19
   131fc:	bls	13210 <_start@@Base+0x654>
   13200:	ldrh	r0, [r3, #18]
   13204:	cmp	r0, #0
   13208:	ldrbne	r0, [r2, r0]
   1320c:	bx	lr
   13210:	mov	r0, #0
   13214:	bx	lr
   13218:	str	r4, [sp, #-8]!
   1321c:	str	lr, [sp, #4]
   13220:	bl	131ac <_start@@Base+0x5f0>
   13224:	ldr	r3, [pc, #36]	; 13250 <_start@@Base+0x694>
   13228:	movw	r2, #717	; 0x2cd
   1322c:	str	r4, [sp, #-8]!
   13230:	ldr	r1, [pc, #28]	; 13254 <_start@@Base+0x698>
   13234:	str	lr, [sp, #4]
   13238:	ldr	r0, [pc, #24]	; 13258 <_start@@Base+0x69c>
   1323c:	add	r3, pc, r3
   13240:	add	r3, r3, #496	; 0x1f0
   13244:	add	r1, pc, r1
   13248:	add	r0, pc, r0
   1324c:	bl	129e0 <__assert_fail@plt>
   13250:	andeq	r1, r1, r4, lsr #25
   13254:	andeq	r2, r1, r0, lsl r4
   13258:	andeq	r2, r1, r8, lsl #9
   1325c:	cmp	r0, #0
   13260:	beq	1329c <_start@@Base+0x6e0>
   13264:	ldr	r3, [r0]
   13268:	sub	r3, r0, r3
   1326c:	ldrh	r2, [r3]
   13270:	cmp	r2, #21
   13274:	bls	13294 <_start@@Base+0x6d8>
   13278:	ldrh	r3, [r3, #20]
   1327c:	cmp	r3, #0
   13280:	beq	13294 <_start@@Base+0x6d8>
   13284:	ldr	r2, [r0, r3]
   13288:	add	r0, r0, r3
   1328c:	add	r0, r0, r2
   13290:	bx	lr
   13294:	mov	r0, #0
   13298:	bx	lr
   1329c:	str	r4, [sp, #-8]!
   132a0:	str	lr, [sp, #4]
   132a4:	bl	13224 <_start@@Base+0x668>
   132a8:	ldr	r3, [pc, #36]	; 132d4 <_start@@Base+0x718>
   132ac:	movw	r2, #699	; 0x2bb
   132b0:	str	r4, [sp, #-8]!
   132b4:	ldr	r1, [pc, #28]	; 132d8 <_start@@Base+0x71c>
   132b8:	str	lr, [sp, #4]
   132bc:	ldr	r0, [pc, #24]	; 132dc <_start@@Base+0x720>
   132c0:	add	r3, pc, r3
   132c4:	add	r3, r3, #524	; 0x20c
   132c8:	add	r1, pc, r1
   132cc:	add	r0, pc, r0
   132d0:	bl	129e0 <__assert_fail@plt>
   132d4:	andeq	r1, r1, r0, lsr #24
   132d8:	andeq	r2, r1, ip, lsl #7
   132dc:	andeq	r2, r1, r4, lsl #8
   132e0:	cmp	r0, #0
   132e4:	str	r4, [sp, #-8]!
   132e8:	str	lr, [sp, #4]
   132ec:	beq	13350 <_start@@Base+0x794>
   132f0:	ldr	r3, [r0]
   132f4:	sub	r3, r0, r3
   132f8:	ldrh	r2, [r3]
   132fc:	cmp	r2, #11
   13300:	bls	1332c <_start@@Base+0x770>
   13304:	ldrh	r3, [r3, #10]
   13308:	cmp	r3, #0
   1330c:	beq	1332c <_start@@Base+0x770>
   13310:	ldr	r2, [r0, r3]
   13314:	add	r0, r0, r3
   13318:	ldr	r4, [sp]
   1331c:	add	sp, sp, #4
   13320:	add	r2, r2, #4
   13324:	add	r0, r0, r2
   13328:	pop	{pc}		; (ldr pc, [sp], #4)
   1332c:	ldr	r3, [pc, #32]	; 13354 <_start@@Base+0x798>
   13330:	movw	r2, #699	; 0x2bb
   13334:	ldr	r1, [pc, #28]	; 13358 <_start@@Base+0x79c>
   13338:	ldr	r0, [pc, #28]	; 1335c <_start@@Base+0x7a0>
   1333c:	add	r3, pc, r3
   13340:	add	r3, r3, #524	; 0x20c
   13344:	add	r1, pc, r1
   13348:	add	r0, pc, r0
   1334c:	bl	129e0 <__assert_fail@plt>
   13350:	bl	132a8 <_start@@Base+0x6ec>
   13354:	andeq	r1, r1, r4, lsr #23
   13358:	andeq	r2, r1, r0, lsl r3
   1335c:	andeq	r2, r1, r8, ror #8
   13360:	ldr	r3, [pc, #36]	; 1338c <_start@@Base+0x7d0>
   13364:	movw	r2, #722	; 0x2d2
   13368:	str	r4, [sp, #-8]!
   1336c:	ldr	r1, [pc, #28]	; 13390 <_start@@Base+0x7d4>
   13370:	str	lr, [sp, #4]
   13374:	ldr	r0, [pc, #24]	; 13394 <_start@@Base+0x7d8>
   13378:	add	r3, pc, r3
   1337c:	add	r3, r3, #552	; 0x228
   13380:	add	r1, pc, r1
   13384:	add	r0, pc, r0
   13388:	bl	129e0 <__assert_fail@plt>
   1338c:	andeq	r1, r1, r8, ror #22
   13390:	ldrdeq	r2, [r1], -r4
   13394:	andeq	r2, r1, ip, asr #6
   13398:	ldr	r3, [pc, #36]	; 133c4 <_start@@Base+0x808>
   1339c:	movw	r2, #621	; 0x26d
   133a0:	str	r4, [sp, #-8]!
   133a4:	ldr	r1, [pc, #28]	; 133c8 <_start@@Base+0x80c>
   133a8:	str	lr, [sp, #4]
   133ac:	ldr	r0, [pc, #24]	; 133cc <_start@@Base+0x810>
   133b0:	add	r3, pc, r3
   133b4:	add	r3, r3, #588	; 0x24c
   133b8:	add	r1, pc, r1
   133bc:	add	r0, pc, r0
   133c0:	bl	129e0 <__assert_fail@plt>
   133c4:	andeq	r1, r1, r0, lsr fp
   133c8:	muleq	r1, ip, r2
   133cc:	andeq	r2, r1, r4, lsl r3
   133d0:	ldr	r3, [pc, #36]	; 133fc <_start@@Base+0x840>
   133d4:	movw	r2, #621	; 0x26d
   133d8:	str	r4, [sp, #-8]!
   133dc:	ldr	r1, [pc, #28]	; 13400 <_start@@Base+0x844>
   133e0:	str	lr, [sp, #4]
   133e4:	ldr	r0, [pc, #24]	; 13404 <_start@@Base+0x848>
   133e8:	add	r3, pc, r3
   133ec:	add	r3, r3, #620	; 0x26c
   133f0:	add	r1, pc, r1
   133f4:	add	r0, pc, r0
   133f8:	bl	129e0 <__assert_fail@plt>
   133fc:	strdeq	r1, [r1], -r8
   13400:	andeq	r2, r1, r4, ror #4
   13404:	ldrdeq	r2, [r1], -ip
   13408:	ldr	r3, [pc, #36]	; 13434 <_start@@Base+0x878>
   1340c:	mov	r2, #117	; 0x75
   13410:	str	r4, [sp, #-8]!
   13414:	ldr	r1, [pc, #28]	; 13438 <_start@@Base+0x87c>
   13418:	str	lr, [sp, #4]
   1341c:	ldr	r0, [pc, #24]	; 1343c <_start@@Base+0x880>
   13420:	add	r3, pc, r3
   13424:	add	r3, r3, #648	; 0x288
   13428:	add	r1, pc, r1
   1342c:	add	r0, pc, r0
   13430:	bl	129e0 <__assert_fail@plt>
   13434:	andeq	r1, r1, r0, asr #21
   13438:	ldrdeq	r2, [r1], -r0
   1343c:	andeq	r2, r1, ip, asr #6
   13440:	ldr	r3, [pc, #36]	; 1346c <_start@@Base+0x8b0>
   13444:	movw	r2, #405	; 0x195
   13448:	str	r4, [sp, #-8]!
   1344c:	ldr	r1, [pc, #28]	; 13470 <_start@@Base+0x8b4>
   13450:	str	lr, [sp, #4]
   13454:	ldr	r0, [pc, #24]	; 13474 <_start@@Base+0x8b8>
   13458:	add	r3, pc, r3
   1345c:	add	r3, r3, #676	; 0x2a4
   13460:	add	r1, pc, r1
   13464:	add	r0, pc, r0
   13468:	bl	129e0 <__assert_fail@plt>
   1346c:	andeq	r1, r1, r8, lsl #21
   13470:	muleq	r1, r8, r2
   13474:	andeq	r2, r1, r4, lsl r3
   13478:	ldr	r3, [pc, #36]	; 134a4 <_start@@Base+0x8e8>
   1347c:	movw	r2, #821	; 0x335
   13480:	str	r4, [sp, #-8]!
   13484:	ldr	r1, [pc, #28]	; 134a8 <_start@@Base+0x8ec>
   13488:	str	lr, [sp, #4]
   1348c:	ldr	r0, [pc, #24]	; 134ac <_start@@Base+0x8f0>
   13490:	add	r3, pc, r3
   13494:	add	r3, r3, #708	; 0x2c4
   13498:	add	r1, pc, r1
   1349c:	add	r0, pc, r0
   134a0:	bl	129e0 <__assert_fail@plt>
   134a4:	andeq	r1, r1, r0, asr sl
   134a8:			; <UNDEFINED> instruction: 0x000121bc
   134ac:	andeq	r2, r1, r4, lsr r2
   134b0:	ldr	r3, [pc, #36]	; 134dc <_start@@Base+0x920>
   134b4:	movw	r2, #821	; 0x335
   134b8:	str	r4, [sp, #-8]!
   134bc:	ldr	r1, [pc, #28]	; 134e0 <_start@@Base+0x924>
   134c0:	str	lr, [sp, #4]
   134c4:	ldr	r0, [pc, #24]	; 134e4 <_start@@Base+0x928>
   134c8:	add	r3, pc, r3
   134cc:	add	r3, r3, #740	; 0x2e4
   134d0:	add	r1, pc, r1
   134d4:	add	r0, pc, r0
   134d8:	bl	129e0 <__assert_fail@plt>
   134dc:	andeq	r1, r1, r8, lsl sl
   134e0:	andeq	r2, r1, r4, lsl #3
   134e4:	strdeq	r2, [r1], -ip
   134e8:	subs	r2, r0, #0
   134ec:	beq	1351c <_start@@Base+0x960>
   134f0:	ldr	r3, [r2]
   134f4:	sub	r3, r2, r3
   134f8:	ldrh	r1, [r3]
   134fc:	cmp	r1, #5
   13500:	bls	13514 <_start@@Base+0x958>
   13504:	ldrh	r0, [r3, #4]
   13508:	cmp	r0, #0
   1350c:	ldrne	r0, [r2, r0]
   13510:	bx	lr
   13514:	mov	r0, #0
   13518:	bx	lr
   1351c:	ldr	r3, [pc, #36]	; 13548 <_start@@Base+0x98c>
   13520:	movw	r2, #770	; 0x302
   13524:	str	r4, [sp, #-8]!
   13528:	ldr	r1, [pc, #28]	; 1354c <_start@@Base+0x990>
   1352c:	str	lr, [sp, #4]
   13530:	ldr	r0, [pc, #24]	; 13550 <_start@@Base+0x994>
   13534:	add	r3, pc, r3
   13538:	add	r3, r3, #764	; 0x2fc
   1353c:	add	r1, pc, r1
   13540:	add	r0, pc, r0
   13544:	bl	129e0 <__assert_fail@plt>
   13548:	andeq	r1, r1, ip, lsr #19
   1354c:	andeq	r2, r1, r8, lsl r1
   13550:	muleq	r1, r0, r1
   13554:	ldr	r3, [pc, #36]	; 13580 <_start@@Base+0x9c4>
   13558:	movw	r2, #823	; 0x337
   1355c:	str	r4, [sp, #-8]!
   13560:	ldr	r1, [pc, #28]	; 13584 <_start@@Base+0x9c8>
   13564:	str	lr, [sp, #4]
   13568:	ldr	r0, [pc, #24]	; 13588 <_start@@Base+0x9cc>
   1356c:	add	r3, pc, r3
   13570:	add	r3, r3, #804	; 0x324
   13574:	add	r1, pc, r1
   13578:	add	r0, pc, r0
   1357c:	bl	129e0 <__assert_fail@plt>
   13580:	andeq	r1, r1, r4, ror r9
   13584:	andeq	r2, r1, r0, ror #1
   13588:	andeq	r2, r1, r8, asr r1
   1358c:	push	{lr}		; (str lr, [sp, #-4]!)
   13590:	sub	sp, sp, #12
   13594:	add	ip, sp, #8
   13598:	stmdb	ip, {r1, r2}
   1359c:	ldr	r2, [sp]
   135a0:	cmp	r2, #0
   135a4:	beq	13600 <_start@@Base+0xa44>
   135a8:	ldr	r1, [r2, #-4]
   135ac:	cmp	r3, r1
   135b0:	bcs	13600 <_start@@Base+0xa44>
   135b4:	ldrb	r2, [r2, r3]
   135b8:	cmp	r2, #0
   135bc:	strbeq	r2, [r0]
   135c0:	streq	r2, [r0, #4]
   135c4:	beq	135f4 <_start@@Base+0xa38>
   135c8:	ldr	r1, [sp, #4]
   135cc:	cmp	r1, #0
   135d0:	add	ip, r1, r3, lsl #2
   135d4:	beq	135fc <_start@@Base+0xa40>
   135d8:	ldr	lr, [r1, #-4]
   135dc:	cmp	r3, lr
   135e0:	bcs	135fc <_start@@Base+0xa40>
   135e4:	ldr	r3, [r1, r3, lsl #2]
   135e8:	strb	r2, [r0]
   135ec:	add	ip, ip, r3
   135f0:	str	ip, [r0, #4]
   135f4:	add	sp, sp, #12
   135f8:	pop	{pc}		; (ldr pc, [sp], #4)
   135fc:	bl	13408 <_start@@Base+0x84c>
   13600:	ldr	r3, [pc, #28]	; 13624 <_start@@Base+0xa68>
   13604:	movw	r2, #773	; 0x305
   13608:	ldr	r1, [pc, #24]	; 13628 <_start@@Base+0xa6c>
   1360c:	ldr	r0, [pc, #24]	; 1362c <_start@@Base+0xa70>
   13610:	add	r3, pc, r3
   13614:	add	r3, r3, #836	; 0x344
   13618:	add	r1, pc, r1
   1361c:	add	r0, pc, r0
   13620:	bl	129e0 <__assert_fail@plt>
   13624:	ldrdeq	r1, [r1], -r0
   13628:	andeq	r2, r1, ip, lsr r0
   1362c:			; <UNDEFINED> instruction: 0x000121b8
   13630:	ldr	r3, [pc, #36]	; 1365c <_start@@Base+0xaa0>
   13634:	movw	r2, #705	; 0x2c1
   13638:	str	r4, [sp, #-8]!
   1363c:	ldr	r1, [pc, #28]	; 13660 <_start@@Base+0xaa4>
   13640:	str	lr, [sp, #4]
   13644:	ldr	r0, [pc, #24]	; 13664 <_start@@Base+0xaa8>
   13648:	add	r3, pc, r3
   1364c:	add	r3, r3, #868	; 0x364
   13650:	add	r1, pc, r1
   13654:	add	r0, pc, r0
   13658:	bl	129e0 <__assert_fail@plt>
   1365c:	muleq	r1, r8, r8
   13660:	andeq	r2, r1, r4
   13664:	andeq	r2, r1, ip, ror r0
   13668:	ldr	r3, [pc, #36]	; 13694 <_start@@Base+0xad8>
   1366c:	mov	r2, #235	; 0xeb
   13670:	str	r4, [sp, #-8]!
   13674:	ldr	r1, [pc, #28]	; 13698 <_start@@Base+0xadc>
   13678:	str	lr, [sp, #4]
   1367c:	ldr	r0, [pc, #24]	; 1369c <_start@@Base+0xae0>
   13680:	add	r3, pc, r3
   13684:	add	r3, r3, #908	; 0x38c
   13688:	add	r1, pc, r1
   1368c:	add	r0, pc, r0
   13690:	bl	129e0 <__assert_fail@plt>
   13694:	andeq	r1, r1, r0, ror #16
   13698:	andeq	r2, r1, ip, ror #2
   1369c:	andeq	r2, r1, r4, ror #3
   136a0:	ldr	r3, [pc, #36]	; 136cc <_start@@Base+0xb10>
   136a4:	mov	r2, #221	; 0xdd
   136a8:	str	r4, [sp, #-8]!
   136ac:	ldr	r1, [pc, #28]	; 136d0 <_start@@Base+0xb14>
   136b0:	str	lr, [sp, #4]
   136b4:	ldr	r0, [pc, #24]	; 136d4 <_start@@Base+0xb18>
   136b8:	add	r3, pc, r3
   136bc:	add	r3, r3, #936	; 0x3a8
   136c0:	add	r1, pc, r1
   136c4:	add	r0, pc, r0
   136c8:	bl	129e0 <__assert_fail@plt>
   136cc:	andeq	r1, r1, r8, lsr #16
   136d0:	andeq	r2, r1, r4, lsr r1
   136d4:	andeq	r2, r1, r0, asr r2
   136d8:	mov	r3, #8
   136dc:	mov	r1, #0
   136e0:	str	r4, [sp, #-8]!
   136e4:	mov	r2, r3
   136e8:	mov	r4, r0
   136ec:	str	lr, [sp, #4]
   136f0:	bl	238a8 <flatcc_verify_field@@Base>
   136f4:	cmp	r0, #0
   136f8:	beq	13708 <_start@@Base+0xb4c>
   136fc:	ldr	r4, [sp]
   13700:	add	sp, sp, #4
   13704:	pop	{pc}		; (ldr pc, [sp], #4)
   13708:	mov	r3, #4
   1370c:	mov	r0, r4
   13710:	ldr	r4, [sp]
   13714:	mov	r2, r3
   13718:	mov	r1, #1
   1371c:	ldr	lr, [sp, #4]
   13720:	add	sp, sp, #8
   13724:	b	238a8 <flatcc_verify_field@@Base>
   13728:	mov	r3, #1
   1372c:	mov	r1, #0
   13730:	str	r4, [sp, #-8]!
   13734:	mov	r2, r3
   13738:	mov	r4, r0
   1373c:	str	lr, [sp, #4]
   13740:	bl	238a8 <flatcc_verify_field@@Base>
   13744:	cmp	r0, #0
   13748:	beq	13758 <_start@@Base+0xb9c>
   1374c:	ldr	r4, [sp]
   13750:	add	sp, sp, #4
   13754:	pop	{pc}		; (ldr pc, [sp], #4)
   13758:	mov	r3, #1
   1375c:	mov	r0, r4
   13760:	mov	r2, r3
   13764:	mov	r1, r3
   13768:	bl	238a8 <flatcc_verify_field@@Base>
   1376c:	cmp	r0, #0
   13770:	bne	1374c <_start@@Base+0xb90>
   13774:	mov	r3, #1
   13778:	mov	r1, #2
   1377c:	mov	r2, r3
   13780:	mov	r0, r4
   13784:	bl	238a8 <flatcc_verify_field@@Base>
   13788:	cmp	r0, #0
   1378c:	bne	1374c <_start@@Base+0xb90>
   13790:	mov	r3, #1
   13794:	mov	r0, r4
   13798:	ldr	r4, [sp]
   1379c:	mov	r2, r3
   137a0:	mov	r1, #3
   137a4:	ldr	lr, [sp, #4]
   137a8:	add	sp, sp, #8
   137ac:	b	238a8 <flatcc_verify_field@@Base>
   137b0:	mov	r3, #1
   137b4:	mov	r1, #0
   137b8:	str	r4, [sp, #-8]!
   137bc:	mov	r2, r3
   137c0:	str	lr, [sp, #4]
   137c4:	sub	sp, sp, #8
   137c8:	mov	r4, r0
   137cc:	bl	238a8 <flatcc_verify_field@@Base>
   137d0:	cmp	r0, #0
   137d4:	beq	137e8 <_start@@Base+0xc2c>
   137d8:	add	sp, sp, #8
   137dc:	ldr	r4, [sp]
   137e0:	add	sp, sp, #4
   137e4:	pop	{pc}		; (ldr pc, [sp], #4)
   137e8:	mov	r3, #1
   137ec:	mov	r0, r4
   137f0:	mov	r2, r3
   137f4:	mov	r1, r3
   137f8:	bl	238a8 <flatcc_verify_field@@Base>
   137fc:	cmp	r0, #0
   13800:	bne	137d8 <_start@@Base+0xc1c>
   13804:	mov	r3, #2
   13808:	mov	r0, r4
   1380c:	mov	r2, r3
   13810:	mov	r1, r3
   13814:	bl	238a8 <flatcc_verify_field@@Base>
   13818:	cmp	r0, #0
   1381c:	bne	137d8 <_start@@Base+0xc1c>
   13820:	mov	r3, #2
   13824:	mov	r1, #3
   13828:	mov	r2, r3
   1382c:	mov	r0, r4
   13830:	bl	238a8 <flatcc_verify_field@@Base>
   13834:	cmp	r0, #0
   13838:	bne	137d8 <_start@@Base+0xc1c>
   1383c:	mov	r3, #4
   13840:	mov	r0, r4
   13844:	mov	r2, r3
   13848:	mov	r1, r3
   1384c:	bl	238a8 <flatcc_verify_field@@Base>
   13850:	cmp	r0, #0
   13854:	bne	137d8 <_start@@Base+0xc1c>
   13858:	mov	r3, #4
   1385c:	mov	r1, #5
   13860:	mov	r2, r3
   13864:	mov	r0, r4
   13868:	bl	238a8 <flatcc_verify_field@@Base>
   1386c:	cmp	r0, #0
   13870:	bne	137d8 <_start@@Base+0xc1c>
   13874:	mov	r3, #8
   13878:	mov	r1, #6
   1387c:	mov	r2, r3
   13880:	mov	r0, r4
   13884:	bl	238a8 <flatcc_verify_field@@Base>
   13888:	cmp	r0, #0
   1388c:	bne	137d8 <_start@@Base+0xc1c>
   13890:	mov	r3, #8
   13894:	mov	r1, #7
   13898:	mov	r2, r3
   1389c:	mov	r0, r4
   138a0:	bl	238a8 <flatcc_verify_field@@Base>
   138a4:	cmp	r0, #0
   138a8:	bne	137d8 <_start@@Base+0xc1c>
   138ac:	mov	r3, #4
   138b0:	mov	r1, #8
   138b4:	mov	r2, r3
   138b8:	mov	r0, r4
   138bc:	bl	238a8 <flatcc_verify_field@@Base>
   138c0:	cmp	r0, #0
   138c4:	bne	137d8 <_start@@Base+0xc1c>
   138c8:	mov	r3, #8
   138cc:	mov	r1, #9
   138d0:	mov	r2, r3
   138d4:	mov	r0, r4
   138d8:	bl	238a8 <flatcc_verify_field@@Base>
   138dc:	cmp	r0, #0
   138e0:	bne	137d8 <_start@@Base+0xc1c>
   138e4:	mov	r1, #1
   138e8:	mvn	ip, #0
   138ec:	mov	r3, r1
   138f0:	mov	r2, #0
   138f4:	mov	r0, r4
   138f8:	stm	sp, {r1, ip}
   138fc:	mov	r1, #10
   13900:	bl	239f4 <flatcc_verify_vector_field@@Base>
   13904:	cmp	r0, #0
   13908:	bne	137d8 <_start@@Base+0xc1c>
   1390c:	mov	r1, #8
   13910:	mvn	ip, #-536870912	; 0xe0000000
   13914:	mov	r2, r0
   13918:	mov	r3, r1
   1391c:	mov	r0, r4
   13920:	stm	sp, {r1, ip}
   13924:	mov	r1, #11
   13928:	bl	239f4 <flatcc_verify_vector_field@@Base>
   1392c:	b	137d8 <_start@@Base+0xc1c>
   13930:	mov	r2, #0
   13934:	str	r4, [sp, #-8]!
   13938:	mov	r4, r0
   1393c:	mov	r1, r2
   13940:	str	lr, [sp, #4]
   13944:	bl	23914 <flatcc_verify_string_field@@Base>
   13948:	cmp	r0, #0
   1394c:	beq	1395c <_start@@Base+0xda0>
   13950:	ldr	r4, [sp]
   13954:	add	sp, sp, #4
   13958:	pop	{pc}		; (ldr pc, [sp], #4)
   1395c:	mov	r3, #8
   13960:	mov	r1, #1
   13964:	mov	r2, r3
   13968:	mov	r0, r4
   1396c:	bl	238a8 <flatcc_verify_field@@Base>
   13970:	cmp	r0, #0
   13974:	bne	13950 <_start@@Base+0xd94>
   13978:	mov	r3, #2
   1397c:	mov	r0, r4
   13980:	ldr	r4, [sp]
   13984:	mov	r2, r3
   13988:	mov	r1, r3
   1398c:	ldr	lr, [sp, #4]
   13990:	add	sp, sp, #8
   13994:	b	238a8 <flatcc_verify_field@@Base>
   13998:	mov	r2, #0
   1399c:	str	r4, [sp, #-8]!
   139a0:	mov	r4, r0
   139a4:	mov	r1, r2
   139a8:	str	lr, [sp, #4]
   139ac:	bl	23914 <flatcc_verify_string_field@@Base>
   139b0:	cmp	r0, #0
   139b4:	beq	139c4 <_start@@Base+0xe08>
   139b8:	ldr	r4, [sp]
   139bc:	add	sp, sp, #4
   139c0:	pop	{pc}		; (ldr pc, [sp], #4)
   139c4:	mov	r3, #4
   139c8:	mov	r1, #1
   139cc:	mov	r2, r3
   139d0:	mov	r0, r4
   139d4:	bl	238a8 <flatcc_verify_field@@Base>
   139d8:	cmp	r0, #0
   139dc:	bne	139b8 <_start@@Base+0xdfc>
   139e0:	mov	r2, r0
   139e4:	mov	r1, #2
   139e8:	mov	r0, r4
   139ec:	bl	23914 <flatcc_verify_string_field@@Base>
   139f0:	cmp	r0, #0
   139f4:	bne	139b8 <_start@@Base+0xdfc>
   139f8:	mov	r3, #8
   139fc:	mov	r1, #3
   13a00:	mov	r2, r3
   13a04:	mov	r0, r4
   13a08:	bl	238a8 <flatcc_verify_field@@Base>
   13a0c:	cmp	r0, #0
   13a10:	bne	139b8 <_start@@Base+0xdfc>
   13a14:	mov	r2, r0
   13a18:	mov	r1, #4
   13a1c:	mov	r0, r4
   13a20:	bl	23914 <flatcc_verify_string_field@@Base>
   13a24:	cmp	r0, #0
   13a28:	bne	139b8 <_start@@Base+0xdfc>
   13a2c:	mov	r3, #8
   13a30:	mov	r1, #5
   13a34:	mov	r2, r3
   13a38:	mov	r0, r4
   13a3c:	bl	238a8 <flatcc_verify_field@@Base>
   13a40:	cmp	r0, #0
   13a44:	bne	139b8 <_start@@Base+0xdfc>
   13a48:	mov	r3, #4
   13a4c:	mov	r1, #6
   13a50:	mov	r2, r3
   13a54:	mov	r0, r4
   13a58:	bl	238a8 <flatcc_verify_field@@Base>
   13a5c:	cmp	r0, #0
   13a60:	bne	139b8 <_start@@Base+0xdfc>
   13a64:	mov	r3, #8
   13a68:	mov	r1, #7
   13a6c:	mov	r2, r3
   13a70:	mov	r0, r4
   13a74:	bl	238a8 <flatcc_verify_field@@Base>
   13a78:	cmp	r0, #0
   13a7c:	bne	139b8 <_start@@Base+0xdfc>
   13a80:	mov	r3, #4
   13a84:	mov	r0, r4
   13a88:	ldr	r4, [sp]
   13a8c:	mov	r2, r3
   13a90:	mov	r1, #8
   13a94:	ldr	lr, [sp, #4]
   13a98:	add	sp, sp, #8
   13a9c:	b	238a8 <flatcc_verify_field@@Base>
   13aa0:	ldr	r3, [pc, #112]	; 13b18 <_start@@Base+0xf5c>
   13aa4:	mov	r2, #0
   13aa8:	mov	r1, r2
   13aac:	str	r4, [sp, #-8]!
   13ab0:	mov	r4, r0
   13ab4:	str	lr, [sp, #4]
   13ab8:	add	r3, pc, r3
   13abc:	bl	23cdc <flatcc_verify_table_field@@Base>
   13ac0:	cmp	r0, #0
   13ac4:	beq	13ad4 <_start@@Base+0xf18>
   13ac8:	ldr	r4, [sp]
   13acc:	add	sp, sp, #4
   13ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ad4:	ldr	r3, [pc, #64]	; 13b1c <_start@@Base+0xf60>
   13ad8:	mov	r2, r0
   13adc:	mov	r1, #1
   13ae0:	mov	r0, r4
   13ae4:	add	r3, pc, r3
   13ae8:	bl	23cdc <flatcc_verify_table_field@@Base>
   13aec:	cmp	r0, #0
   13af0:	bne	13ac8 <_start@@Base+0xf0c>
   13af4:	ldr	r3, [pc, #36]	; 13b20 <_start@@Base+0xf64>
   13af8:	mov	r2, r0
   13afc:	mov	r1, #2
   13b00:	mov	r0, r4
   13b04:	ldr	r4, [sp]
   13b08:	ldr	lr, [sp, #4]
   13b0c:	add	sp, sp, #8
   13b10:	add	r3, pc, r3
   13b14:	b	23cdc <flatcc_verify_table_field@@Base>
   13b18:			; <UNDEFINED> instruction: 0xfffffed8
   13b1c:	andeq	r0, r0, ip, lsr #18
   13b20:			; <UNDEFINED> instruction: 0xfffffbc0
   13b24:	mov	r3, #16
   13b28:	mov	r2, #32
   13b2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13b30:	mov	r1, #0
   13b34:	strd	r6, [sp, #8]
   13b38:	mov	r4, r0
   13b3c:	str	r8, [sp, #16]
   13b40:	str	lr, [sp, #20]
   13b44:	sub	sp, sp, #8
   13b48:	bl	238a8 <flatcc_verify_field@@Base>
   13b4c:	cmp	r0, #0
   13b50:	beq	13b6c <_start@@Base+0xfb0>
   13b54:	add	sp, sp, #8
   13b58:	ldrd	r4, [sp]
   13b5c:	ldrd	r6, [sp, #8]
   13b60:	ldr	r8, [sp, #16]
   13b64:	add	sp, sp, #20
   13b68:	pop	{pc}		; (ldr pc, [sp], #4)
   13b6c:	mov	r3, #2
   13b70:	mov	r0, r4
   13b74:	mov	r2, r3
   13b78:	mov	r1, r3
   13b7c:	bl	238a8 <flatcc_verify_field@@Base>
   13b80:	cmp	r0, #0
   13b84:	bne	13b54 <_start@@Base+0xf98>
   13b88:	mov	r3, #2
   13b8c:	mov	r1, #1
   13b90:	mov	r2, r3
   13b94:	mov	r0, r4
   13b98:	bl	238a8 <flatcc_verify_field@@Base>
   13b9c:	cmp	r0, #0
   13ba0:	bne	13b54 <_start@@Base+0xf98>
   13ba4:	mov	r2, #1
   13ba8:	mov	r1, #3
   13bac:	mov	r0, r4
   13bb0:	bl	23914 <flatcc_verify_string_field@@Base>
   13bb4:	cmp	r0, #0
   13bb8:	bne	13b54 <_start@@Base+0xf98>
   13bbc:	mov	r3, #1
   13bc0:	mov	r1, #6
   13bc4:	mov	r2, r3
   13bc8:	mov	r0, r4
   13bcc:	bl	238a8 <flatcc_verify_field@@Base>
   13bd0:	cmp	r0, #0
   13bd4:	bne	13b54 <_start@@Base+0xf98>
   13bd8:	mov	r5, #1
   13bdc:	mvn	r6, #0
   13be0:	mov	r2, r0
   13be4:	mov	r3, r5
   13be8:	mov	r1, #5
   13bec:	mov	r0, r4
   13bf0:	stm	sp, {r5, r6}
   13bf4:	bl	239f4 <flatcc_verify_vector_field@@Base>
   13bf8:	cmp	r0, #0
   13bfc:	bne	13b54 <_start@@Base+0xf98>
   13c00:	ldr	r3, [pc, #888]	; 13f80 <_start@@Base+0x13c4>
   13c04:	mov	r2, r0
   13c08:	mov	r1, #11
   13c0c:	mov	r0, r4
   13c10:	add	r3, pc, r3
   13c14:	bl	23e48 <flatcc_verify_table_vector_field@@Base>
   13c18:	cmp	r0, #0
   13c1c:	bne	13b54 <_start@@Base+0xf98>
   13c20:	mov	r2, r0
   13c24:	mov	r1, #10
   13c28:	mov	r0, r4
   13c2c:	bl	23af8 <flatcc_verify_string_vector_field@@Base>
   13c30:	cmp	r0, #0
   13c34:	bne	13b54 <_start@@Base+0xf98>
   13c38:	mov	r2, r0
   13c3c:	mov	r1, #28
   13c40:	mov	r0, r4
   13c44:	bl	23af8 <flatcc_verify_string_vector_field@@Base>
   13c48:	cmp	r0, #0
   13c4c:	bne	13b54 <_start@@Base+0xf98>
   13c50:	mov	r2, r0
   13c54:	mov	r3, r5
   13c58:	stm	sp, {r5, r6}
   13c5c:	mov	r1, #24
   13c60:	mov	r0, r4
   13c64:	bl	239f4 <flatcc_verify_vector_field@@Base>
   13c68:	cmp	r0, #0
   13c6c:	bne	13b54 <_start@@Base+0xf98>
   13c70:	mvn	ip, #-536870912	; 0xe0000000
   13c74:	mov	r5, #4
   13c78:	mov	r3, #8
   13c7c:	mov	r2, #0
   13c80:	mov	r1, #29
   13c84:	mov	r0, r4
   13c88:	stm	sp, {r5, ip}
   13c8c:	bl	239f4 <flatcc_verify_vector_field@@Base>
   13c90:	cmp	r0, #0
   13c94:	bne	13b54 <_start@@Base+0xf98>
   13c98:	ldr	r7, [pc, #740]	; 13f84 <_start@@Base+0x13c8>
   13c9c:	mov	r2, r0
   13ca0:	mov	r1, #12
   13ca4:	mov	r0, r4
   13ca8:	add	r7, pc, r7
   13cac:	mov	r3, r7
   13cb0:	bl	23cdc <flatcc_verify_table_field@@Base>
   13cb4:	cmp	r0, #0
   13cb8:	bne	13b54 <_start@@Base+0xf98>
   13cbc:	ldr	r3, [pc, #708]	; 13f88 <_start@@Base+0x13cc>
   13cc0:	mov	r2, r0
   13cc4:	mov	r1, #8
   13cc8:	mov	r0, r4
   13ccc:	add	r3, pc, r3
   13cd0:	bl	24a90 <flatcc_verify_union_field@@Base>
   13cd4:	cmp	r0, #0
   13cd8:	bne	13b54 <_start@@Base+0xf98>
   13cdc:	mvn	r6, #-1073741824	; 0xc0000000
   13ce0:	mov	r8, #2
   13ce4:	mov	r2, r0
   13ce8:	mov	r3, r5
   13cec:	mov	r1, #9
   13cf0:	mov	r0, r4
   13cf4:	str	r8, [sp]
   13cf8:	str	r6, [sp, #4]
   13cfc:	bl	239f4 <flatcc_verify_vector_field@@Base>
   13d00:	cmp	r0, #0
   13d04:	bne	13b54 <_start@@Base+0xf98>
   13d08:	mov	r2, r0
   13d0c:	mov	r3, r5
   13d10:	str	r8, [sp]
   13d14:	mov	r1, #31
   13d18:	mov	r0, r4
   13d1c:	str	r6, [sp, #4]
   13d20:	bl	239f4 <flatcc_verify_vector_field@@Base>
   13d24:	cmp	r0, #0
   13d28:	bne	13b54 <_start@@Base+0xf98>
   13d2c:	mov	r6, #1
   13d30:	mov	r3, r0
   13d34:	mov	r2, r0
   13d38:	mov	r1, #13
   13d3c:	mov	r0, r4
   13d40:	strd	r6, [sp]
   13d44:	bl	248bc <flatcc_verify_table_as_nested_root@@Base>
   13d48:	cmp	r0, #0
   13d4c:	bne	13b54 <_start@@Base+0xf98>
   13d50:	ldr	r3, [pc, #564]	; 13f8c <_start@@Base+0x13d0>
   13d54:	mov	r2, r0
   13d58:	mov	r1, #14
   13d5c:	mov	r0, r4
   13d60:	add	r3, pc, r3
   13d64:	bl	23cdc <flatcc_verify_table_field@@Base>
   13d68:	cmp	r0, #0
   13d6c:	bne	13b54 <_start@@Base+0xf98>
   13d70:	mov	r3, r6
   13d74:	mov	r2, r6
   13d78:	mov	r1, #15
   13d7c:	mov	r0, r4
   13d80:	bl	238a8 <flatcc_verify_field@@Base>
   13d84:	cmp	r0, #0
   13d88:	bne	13b54 <_start@@Base+0xf98>
   13d8c:	mov	r3, r5
   13d90:	mov	r2, r5
   13d94:	mov	r1, #16
   13d98:	mov	r0, r4
   13d9c:	bl	238a8 <flatcc_verify_field@@Base>
   13da0:	cmp	r0, #0
   13da4:	bne	13b54 <_start@@Base+0xf98>
   13da8:	mov	r3, r5
   13dac:	mov	r2, r5
   13db0:	mov	r1, #17
   13db4:	mov	r0, r4
   13db8:	bl	238a8 <flatcc_verify_field@@Base>
   13dbc:	cmp	r0, #0
   13dc0:	bne	13b54 <_start@@Base+0xf98>
   13dc4:	mov	r3, #8
   13dc8:	mov	r1, #18
   13dcc:	mov	r2, r3
   13dd0:	mov	r0, r4
   13dd4:	bl	238a8 <flatcc_verify_field@@Base>
   13dd8:	cmp	r0, #0
   13ddc:	bne	13b54 <_start@@Base+0xf98>
   13de0:	mov	r3, #8
   13de4:	mov	r1, #19
   13de8:	mov	r2, r3
   13dec:	mov	r0, r4
   13df0:	bl	238a8 <flatcc_verify_field@@Base>
   13df4:	cmp	r0, #0
   13df8:	bne	13b54 <_start@@Base+0xf98>
   13dfc:	mov	r3, r5
   13e00:	mov	r1, #20
   13e04:	mov	r2, r5
   13e08:	mov	r0, r4
   13e0c:	bl	238a8 <flatcc_verify_field@@Base>
   13e10:	cmp	r0, #0
   13e14:	bne	13b54 <_start@@Base+0xf98>
   13e18:	mov	r3, r5
   13e1c:	mov	r1, #21
   13e20:	mov	r2, r5
   13e24:	mov	r0, r4
   13e28:	bl	238a8 <flatcc_verify_field@@Base>
   13e2c:	cmp	r0, #0
   13e30:	bne	13b54 <_start@@Base+0xf98>
   13e34:	mov	r3, #8
   13e38:	mov	r1, #22
   13e3c:	mov	r2, r3
   13e40:	mov	r0, r4
   13e44:	bl	238a8 <flatcc_verify_field@@Base>
   13e48:	cmp	r0, #0
   13e4c:	bne	13b54 <_start@@Base+0xf98>
   13e50:	mov	r3, #8
   13e54:	mov	r1, #23
   13e58:	mov	r2, r3
   13e5c:	mov	r0, r4
   13e60:	bl	238a8 <flatcc_verify_field@@Base>
   13e64:	cmp	r0, #0
   13e68:	bne	13b54 <_start@@Base+0xf98>
   13e6c:	mov	r3, r5
   13e70:	mov	r1, #25
   13e74:	mov	r2, r5
   13e78:	mov	r0, r4
   13e7c:	bl	238a8 <flatcc_verify_field@@Base>
   13e80:	cmp	r0, #0
   13e84:	bne	13b54 <_start@@Base+0xf98>
   13e88:	mov	r3, r5
   13e8c:	mov	r1, #26
   13e90:	mov	r2, r5
   13e94:	mov	r0, r4
   13e98:	bl	238a8 <flatcc_verify_field@@Base>
   13e9c:	cmp	r0, #0
   13ea0:	bne	13b54 <_start@@Base+0xf98>
   13ea4:	mov	r3, r5
   13ea8:	mov	r1, #27
   13eac:	mov	r2, r5
   13eb0:	mov	r0, r4
   13eb4:	bl	238a8 <flatcc_verify_field@@Base>
   13eb8:	cmp	r0, #0
   13ebc:	bne	13b54 <_start@@Base+0xf98>
   13ec0:	mvn	ip, #0
   13ec4:	mov	r1, r6
   13ec8:	mov	r2, r0
   13ecc:	mov	r3, r6
   13ed0:	mov	r0, r4
   13ed4:	stm	sp, {r1, ip}
   13ed8:	mov	r1, #30
   13edc:	bl	239f4 <flatcc_verify_vector_field@@Base>
   13ee0:	cmp	r0, #0
   13ee4:	bne	13b54 <_start@@Base+0xf98>
   13ee8:	mov	r5, #8
   13eec:	mvn	r6, #-536870912	; 0xe0000000
   13ef0:	mov	r3, r5
   13ef4:	mov	r2, #0
   13ef8:	mov	r1, #32
   13efc:	mov	r0, r4
   13f00:	stm	sp, {r5, r6}
   13f04:	bl	239f4 <flatcc_verify_vector_field@@Base>
   13f08:	cmp	r0, #0
   13f0c:	bne	13b54 <_start@@Base+0xf98>
   13f10:	mov	r2, r0
   13f14:	mov	r3, r5
   13f18:	stm	sp, {r5, r6}
   13f1c:	mov	r1, #33	; 0x21
   13f20:	mov	r0, r4
   13f24:	bl	239f4 <flatcc_verify_vector_field@@Base>
   13f28:	cmp	r0, #0
   13f2c:	bne	13b54 <_start@@Base+0xf98>
   13f30:	ldr	r3, [pc, #88]	; 13f90 <_start@@Base+0x13d4>
   13f34:	mov	r2, r0
   13f38:	mov	r1, #34	; 0x22
   13f3c:	mov	r0, r4
   13f40:	add	r3, pc, r3
   13f44:	bl	23cdc <flatcc_verify_table_field@@Base>
   13f48:	cmp	r0, #0
   13f4c:	bne	13b54 <_start@@Base+0xf98>
   13f50:	ldr	r3, [pc, #60]	; 13f94 <_start@@Base+0x13d8>
   13f54:	mov	r2, r0
   13f58:	mov	r1, #35	; 0x23
   13f5c:	mov	r0, r4
   13f60:	add	r3, pc, r3
   13f64:	add	sp, sp, #8
   13f68:	ldrd	r4, [sp]
   13f6c:	ldrd	r6, [sp, #8]
   13f70:	ldr	r8, [sp, #16]
   13f74:	ldr	lr, [sp, #20]
   13f78:	add	sp, sp, #24
   13f7c:	b	23cdc <flatcc_verify_table_field@@Base>
   13f80:			; <UNDEFINED> instruction: 0xffffff0c
   13f84:			; <UNDEFINED> instruction: 0xfffffe74
   13f88:	andeq	r0, r0, r8, asr r3
   13f8c:			; <UNDEFINED> instruction: 0xfffffbc8
   13f90:			; <UNDEFINED> instruction: 0xffffed68
   13f94:	andeq	r0, r0, r0, lsr r0
   13f98:	strd	r4, [sp, #-16]!
   13f9c:	mov	r4, #1
   13fa0:	mvn	r5, #0
   13fa4:	str	r6, [sp, #8]
   13fa8:	mov	r2, #0
   13fac:	mov	r3, r4
   13fb0:	str	lr, [sp, #12]
   13fb4:	sub	sp, sp, #8
   13fb8:	mov	r1, r2
   13fbc:	mov	r6, r0
   13fc0:	strd	r4, [sp]
   13fc4:	bl	239f4 <flatcc_verify_vector_field@@Base>
   13fc8:	subs	r2, r0, #0
   13fcc:	beq	13fe8 <_start@@Base+0x142c>
   13fd0:	mov	r0, r2
   13fd4:	add	sp, sp, #8
   13fd8:	ldrd	r4, [sp]
   13fdc:	ldr	r6, [sp, #8]
   13fe0:	add	sp, sp, #12
   13fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   13fe8:	mov	r3, r4
   13fec:	mov	r1, r4
   13ff0:	strd	r4, [sp]
   13ff4:	mov	r0, r6
   13ff8:	bl	239f4 <flatcc_verify_vector_field@@Base>
   13ffc:	subs	r2, r0, #0
   14000:	bne	13fd0 <_start@@Base+0x1414>
   14004:	ldr	ip, [pc, #28]	; 14028 <_start@@Base+0x146c>
   14008:	mov	r3, r2
   1400c:	mov	r0, r6
   14010:	mov	r1, #2
   14014:	add	ip, pc, ip
   14018:	stm	sp, {r4, ip}
   1401c:	bl	248bc <flatcc_verify_table_as_nested_root@@Base>
   14020:	mov	r2, r0
   14024:	b	13fd0 <_start@@Base+0x1414>
   14028:			; <UNDEFINED> instruction: 0xfffffb08
   1402c:	ldrb	r3, [r0, #12]
   14030:	sub	r3, r3, #1
   14034:	cmp	r3, #3
   14038:	addls	pc, pc, r3, lsl #2
   1403c:	b	14080 <_start@@Base+0x14c4>
   14040:	b	14074 <_start@@Base+0x14b8>
   14044:	b	14068 <_start@@Base+0x14ac>
   14048:	b	1405c <_start@@Base+0x14a0>
   1404c:	b	14050 <_start@@Base+0x1494>
   14050:	ldr	r1, [pc, #48]	; 14088 <_start@@Base+0x14cc>
   14054:	add	r1, pc, r1
   14058:	b	2416c <flatcc_verify_union_table@@Base>
   1405c:	ldr	r1, [pc, #40]	; 1408c <_start@@Base+0x14d0>
   14060:	add	r1, pc, r1
   14064:	b	2416c <flatcc_verify_union_table@@Base>
   14068:	ldr	r1, [pc, #32]	; 14090 <_start@@Base+0x14d4>
   1406c:	add	r1, pc, r1
   14070:	b	2416c <flatcc_verify_union_table@@Base>
   14074:	ldr	r1, [pc, #24]	; 14094 <_start@@Base+0x14d8>
   14078:	add	r1, pc, r1
   1407c:	b	2416c <flatcc_verify_union_table@@Base>
   14080:	mov	r0, #0
   14084:	bx	lr
   14088:	andeq	r0, r0, ip, lsr r0
   1408c:	andeq	r0, r0, r8, lsr #7
   14090:			; <UNDEFINED> instruction: 0xfffff6b4
   14094:			; <UNDEFINED> instruction: 0xfffffaa4
   14098:	ldr	r3, [pc, #112]	; 14110 <_start@@Base+0x1554>
   1409c:	mov	r2, #0
   140a0:	mov	r1, r2
   140a4:	str	r4, [sp, #-8]!
   140a8:	mov	r4, r0
   140ac:	str	lr, [sp, #4]
   140b0:	add	r3, pc, r3
   140b4:	bl	23cdc <flatcc_verify_table_field@@Base>
   140b8:	cmp	r0, #0
   140bc:	beq	140cc <_start@@Base+0x1510>
   140c0:	ldr	r4, [sp]
   140c4:	add	sp, sp, #4
   140c8:	pop	{pc}		; (ldr pc, [sp], #4)
   140cc:	ldr	r3, [pc, #64]	; 14114 <_start@@Base+0x1558>
   140d0:	mov	r2, r0
   140d4:	mov	r1, #1
   140d8:	mov	r0, r4
   140dc:	add	r3, pc, r3
   140e0:	bl	23cdc <flatcc_verify_table_field@@Base>
   140e4:	cmp	r0, #0
   140e8:	bne	140c0 <_start@@Base+0x1504>
   140ec:	ldr	r3, [pc, #36]	; 14118 <_start@@Base+0x155c>
   140f0:	mov	r2, r0
   140f4:	mov	r1, #3
   140f8:	mov	r0, r4
   140fc:	ldr	r4, [sp]
   14100:	ldr	lr, [sp, #4]
   14104:	add	sp, sp, #8
   14108:	add	r3, pc, r3
   1410c:	b	24be4 <flatcc_verify_union_vector_field@@Base>
   14110:			; <UNDEFINED> instruction: 0xfffff9e8
   14114:	andeq	r0, r0, r8, lsr r0
   14118:			; <UNDEFINED> instruction: 0xffffff1c
   1411c:	strd	r4, [sp, #-16]!
   14120:	mov	r2, #0
   14124:	mov	r1, #1
   14128:	ldr	r4, [pc, #164]	; 141d4 <_start@@Base+0x1618>
   1412c:	mov	r5, r0
   14130:	str	r6, [sp, #8]
   14134:	str	lr, [sp, #12]
   14138:	add	r4, pc, r4
   1413c:	mov	r3, r4
   14140:	bl	24a90 <flatcc_verify_union_field@@Base>
   14144:	cmp	r0, #0
   14148:	beq	1415c <_start@@Base+0x15a0>
   1414c:	ldrd	r4, [sp]
   14150:	ldr	r6, [sp, #8]
   14154:	add	sp, sp, #12
   14158:	pop	{pc}		; (ldr pc, [sp], #4)
   1415c:	mov	r2, r0
   14160:	mov	r3, r4
   14164:	mov	r1, #3
   14168:	mov	r0, r5
   1416c:	bl	24a90 <flatcc_verify_union_field@@Base>
   14170:	cmp	r0, #0
   14174:	bne	1414c <_start@@Base+0x1590>
   14178:	mov	r2, r0
   1417c:	mov	r3, r4
   14180:	mov	r1, #5
   14184:	mov	r0, r5
   14188:	bl	24a90 <flatcc_verify_union_field@@Base>
   1418c:	cmp	r0, #0
   14190:	bne	1414c <_start@@Base+0x1590>
   14194:	mov	r2, r0
   14198:	mov	r3, r4
   1419c:	mov	r1, #7
   141a0:	mov	r0, r5
   141a4:	bl	24a90 <flatcc_verify_union_field@@Base>
   141a8:	cmp	r0, #0
   141ac:	bne	1414c <_start@@Base+0x1590>
   141b0:	mov	r3, r4
   141b4:	mov	r2, r0
   141b8:	ldr	r6, [sp, #8]
   141bc:	mov	r0, r5
   141c0:	mov	r1, #9
   141c4:	ldrd	r4, [sp]
   141c8:	ldr	lr, [sp, #12]
   141cc:	add	sp, sp, #16
   141d0:	b	24be4 <flatcc_verify_union_vector_field@@Base>
   141d4:	muleq	r0, r8, r0
   141d8:	ldrb	r3, [r0, #12]
   141dc:	mov	r2, r0
   141e0:	cmp	r3, #10
   141e4:	bhi	1420c <_start@@Base+0x1650>
   141e8:	cmp	r3, #9
   141ec:	bcs	14224 <_start@@Base+0x1668>
   141f0:	cmp	r3, #2
   141f4:	beq	14238 <_start@@Base+0x167c>
   141f8:	cmp	r3, #8
   141fc:	bne	14230 <_start@@Base+0x1674>
   14200:	mov	r2, #2
   14204:	mov	r1, r2
   14208:	b	24268 <flatcc_verify_union_struct@@Base>
   1420c:	cmp	r3, #11
   14210:	beq	1421c <_start@@Base+0x1660>
   14214:	cmp	r3, #255	; 0xff
   14218:	bne	14230 <_start@@Base+0x1674>
   1421c:	mov	r0, r2
   14220:	b	242c8 <flatcc_verify_union_string@@Base>
   14224:	mov	r2, #4
   14228:	mov	r1, r2
   1422c:	b	24268 <flatcc_verify_union_struct@@Base>
   14230:	mov	r0, #0
   14234:	bx	lr
   14238:	ldr	r1, [pc, #4]	; 14244 <_start@@Base+0x1688>
   1423c:	add	r1, pc, r1
   14240:	b	2416c <flatcc_verify_union_table@@Base>
   14244:			; <UNDEFINED> instruction: 0xffffea74
   14248:	push	{lr}		; (str lr, [sp, #-4]!)
   1424c:	vpush	{d8-d9}
   14250:	sub	sp, sp, #12
   14254:	vsub.f64	d8, d1, d0
   14258:	vldr	d9, [pc, #352]	; 143c0 <_start@@Base+0x1804>
   1425c:	str	r1, [sp, #4]
   14260:	mov	r1, r0
   14264:	ldr	r0, [pc, #372]	; 143e0 <_start@@Base+0x1824>
   14268:	add	r0, pc, r0
   1426c:	bl	128f0 <printf@plt>
   14270:	ldr	r0, [pc, #364]	; 143e4 <_start@@Base+0x1828>
   14274:	vmov	r2, r3, d8
   14278:	add	r0, pc, r0
   1427c:	bl	128f0 <printf@plt>
   14280:	ldr	r0, [pc, #352]	; 143e8 <_start@@Base+0x182c>
   14284:	movw	r1, #16960	; 0x4240
   14288:	movt	r1, #15
   1428c:	add	r0, pc, r0
   14290:	bl	128f0 <printf@plt>
   14294:	ldr	r0, [pc, #336]	; 143ec <_start@@Base+0x1830>
   14298:	ldr	r1, [sp, #4]
   1429c:	add	r0, pc, r0
   142a0:	bl	128f0 <printf@plt>
   142a4:	vldr	s15, [sp, #4]
   142a8:	ldr	r0, [pc, #320]	; 143f0 <_start@@Base+0x1834>
   142ac:	vcvt.f64.u32	d7, s15
   142b0:	add	r0, pc, r0
   142b4:	vmul.f64	d7, d7, d9
   142b8:	vdiv.f64	d6, d7, d9
   142bc:	vdiv.f64	d7, d6, d8
   142c0:	vmov	r2, r3, d7
   142c4:	bl	128f0 <printf@plt>
   142c8:	vdiv.f64	d7, d9, d8
   142cc:	ldr	r0, [pc, #288]	; 143f4 <_start@@Base+0x1838>
   142d0:	add	r0, pc, r0
   142d4:	vmov	r2, r3, d7
   142d8:	bl	128f0 <printf@plt>
   142dc:	vldr	d7, [pc, #228]	; 143c8 <_start@@Base+0x180c>
   142e0:	ldr	r1, [pc, #272]	; 143f8 <_start@@Base+0x183c>
   142e4:	ldr	r0, [pc, #272]	; 143fc <_start@@Base+0x1840>
   142e8:	vdiv.f64	d7, d7, d8
   142ec:	add	r1, pc, r1
   142f0:	add	r0, pc, r0
   142f4:	vmov	r2, r3, d7
   142f8:	bl	128f0 <printf@plt>
   142fc:	vldr	d6, [pc, #204]	; 143d0 <_start@@Base+0x1814>
   14300:	vldr	d5, [pc, #208]	; 143d8 <_start@@Base+0x181c>
   14304:	vmul.f64	d8, d8, d6
   14308:	vdiv.f64	d7, d8, d9
   1430c:	vcmpe.f64	d7, d5
   14310:	vmrs	APSR_nzcv, fpscr
   14314:	bmi	14378 <_start@@Base+0x17bc>
   14318:	vcmpe.f64	d7, d9
   1431c:	vmrs	APSR_nzcv, fpscr
   14320:	bmi	14354 <_start@@Base+0x1798>
   14324:	vcmpe.f64	d7, d6
   14328:	vmrs	APSR_nzcv, fpscr
   1432c:	bpl	14398 <_start@@Base+0x17dc>
   14330:	vdiv.f64	d7, d7, d9
   14334:	ldr	r0, [pc, #196]	; 14400 <_start@@Base+0x1844>
   14338:	add	r0, pc, r0
   1433c:	vmov	r2, r3, d7
   14340:	bl	128f0 <printf@plt>
   14344:	mov	r0, #0
   14348:	add	sp, sp, #12
   1434c:	vpop	{d8-d9}
   14350:	pop	{pc}		; (ldr pc, [sp], #4)
   14354:	vdiv.f64	d7, d7, d5
   14358:	ldr	r0, [pc, #164]	; 14404 <_start@@Base+0x1848>
   1435c:	add	r0, pc, r0
   14360:	vmov	r2, r3, d7
   14364:	bl	128f0 <printf@plt>
   14368:	mov	r0, #0
   1436c:	add	sp, sp, #12
   14370:	vpop	{d8-d9}
   14374:	pop	{pc}		; (ldr pc, [sp], #4)
   14378:	ldr	r0, [pc, #136]	; 14408 <_start@@Base+0x184c>
   1437c:	vmov	r2, r3, d7
   14380:	add	r0, pc, r0
   14384:	bl	128f0 <printf@plt>
   14388:	mov	r0, #0
   1438c:	add	sp, sp, #12
   14390:	vpop	{d8-d9}
   14394:	pop	{pc}		; (ldr pc, [sp], #4)
   14398:	vdiv.f64	d7, d7, d6
   1439c:	ldr	r0, [pc, #104]	; 1440c <_start@@Base+0x1850>
   143a0:	add	r0, pc, r0
   143a4:	vmov	r2, r3, d7
   143a8:	bl	128f0 <printf@plt>
   143ac:	mov	r0, #0
   143b0:	add	sp, sp, #12
   143b4:	vpop	{d8-d9}
   143b8:	pop	{pc}		; (ldr pc, [sp], #4)
   143bc:	nop	{0}
   143c0:	andeq	r0, r0, r0
   143c4:	smlawbmi	lr, r0, r4, r8
   143c8:	andeq	r0, r0, r0
   143cc:	svccc	0x00f00000	; IMB
   143d0:	andeq	r0, r0, r0
   143d4:	bicmi	ip, sp, r5, ror #26
   143d8:	andeq	r0, r0, r0
   143dc:	addmi	r4, pc, r0
   143e0:	andeq	r1, r1, r8, asr #14
   143e4:	andeq	r1, r1, r8, asr #14
   143e8:	andeq	r1, r1, ip, asr #14
   143ec:	andeq	r1, r1, ip, asr #14
   143f0:	andeq	r1, r1, ip, asr #14
   143f4:	andeq	r1, r1, r4, asr #14
   143f8:	andeq	r1, r1, ip, asr #14
   143fc:	andeq	r1, r1, r0, asr r7
   14400:	andeq	r1, r1, ip, asr r7
   14404:	andeq	r1, r1, r0, lsr #14
   14408:	andeq	r1, r1, r4, ror #13
   1440c:	andeq	r1, r1, ip, lsl #14
   14410:	mov	r0, #0
   14414:	bx	lr
   14418:	mov	r3, #8
   1441c:	mov	r1, #0
   14420:	str	r4, [sp, #-8]!
   14424:	mov	r2, r3
   14428:	mov	r4, r0
   1442c:	str	lr, [sp, #4]
   14430:	bl	238a8 <flatcc_verify_field@@Base>
   14434:	cmp	r0, #0
   14438:	beq	14448 <_start@@Base+0x188c>
   1443c:	ldr	r4, [sp]
   14440:	add	sp, sp, #4
   14444:	pop	{pc}		; (ldr pc, [sp], #4)
   14448:	mov	r3, #4
   1444c:	mov	r0, r4
   14450:	ldr	r4, [sp]
   14454:	mov	r2, r3
   14458:	mov	r1, #1
   1445c:	ldr	lr, [sp, #4]
   14460:	add	sp, sp, #8
   14464:	b	238a8 <flatcc_verify_field@@Base>
   14468:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1446c:	strd	r6, [sp, #8]
   14470:	subs	r6, r0, #0
   14474:	strd	r8, [sp, #16]
   14478:	str	sl, [sp, #24]
   1447c:	str	lr, [sp, #28]
   14480:	beq	1461c <_start@@Base+0x1a60>
   14484:	ldr	r7, [r6, #-4]
   14488:	cmp	r7, #0
   1448c:	beq	1466c <_start@@Base+0x1ab0>
   14490:	ldr	r3, [r6]
   14494:	mov	r8, r1
   14498:	adds	r1, r6, r3
   1449c:	beq	14648 <_start@@Base+0x1a8c>
   144a0:	ldr	r3, [r6, r3]
   144a4:	sub	r3, r1, r3
   144a8:	ldrh	r2, [r3]
   144ac:	cmp	r2, #11
   144b0:	bls	14624 <_start@@Base+0x1a68>
   144b4:	ldrh	r0, [r3, #10]
   144b8:	cmp	r0, #0
   144bc:	beq	14624 <_start@@Base+0x1a68>
   144c0:	add	r5, r6, #4
   144c4:	mov	r4, #0
   144c8:	b	1450c <_start@@Base+0x1950>
   144cc:	cmp	r7, r3
   144d0:	beq	1461c <_start@@Base+0x1a60>
   144d4:	mov	r2, r5
   144d8:	add	r5, r5, #4
   144dc:	ldr	r0, [r2]
   144e0:	adds	r1, r2, r0
   144e4:	beq	14648 <_start@@Base+0x1a8c>
   144e8:	ldr	r2, [r2, r0]
   144ec:	sub	r2, r1, r2
   144f0:	ldrh	r0, [r2]
   144f4:	cmp	r0, #11
   144f8:	bls	14624 <_start@@Base+0x1a68>
   144fc:	ldrh	r0, [r2, #10]
   14500:	mov	r4, r3
   14504:	cmp	r0, #0
   14508:	beq	14624 <_start@@Base+0x1a68>
   1450c:	ldr	r3, [r1, r0]
   14510:	add	r0, r1, r0
   14514:	mov	r1, r8
   14518:	add	r3, r3, #4
   1451c:	add	r0, r0, r3
   14520:	bl	128e4 <strcmp@plt>
   14524:	cmp	r0, #0
   14528:	add	r3, r4, #1
   1452c:	bne	144cc <_start@@Base+0x1910>
   14530:	mov	r9, r0
   14534:	cmp	r3, r7
   14538:	mov	r4, r3
   1453c:	add	r9, r9, #1
   14540:	bcs	14600 <_start@@Base+0x1a44>
   14544:	ldr	r2, [r6, r3, lsl #2]
   14548:	lsl	r5, r3, #2
   1454c:	add	r1, r6, r5
   14550:	adds	r3, r1, r2
   14554:	beq	14648 <_start@@Base+0x1a8c>
   14558:	ldr	r2, [r1, r2]
   1455c:	sub	r2, r3, r2
   14560:	ldrh	r1, [r2]
   14564:	cmp	r1, #11
   14568:	bls	14624 <_start@@Base+0x1a68>
   1456c:	ldrh	r0, [r2, #10]
   14570:	cmp	r0, #0
   14574:	beq	14624 <_start@@Base+0x1a68>
   14578:	add	r5, r5, #4
   1457c:	add	r5, r6, r5
   14580:	b	145c4 <_start@@Base+0x1a08>
   14584:	add	r4, r4, #1
   14588:	cmp	r7, r4
   1458c:	bls	14600 <_start@@Base+0x1a44>
   14590:	mov	r2, r5
   14594:	add	r5, r5, #4
   14598:	ldr	r1, [r2]
   1459c:	adds	r3, r2, r1
   145a0:	beq	14648 <_start@@Base+0x1a8c>
   145a4:	ldr	r2, [r2, r1]
   145a8:	sub	r2, r3, r2
   145ac:	ldrh	r1, [r2]
   145b0:	cmp	r1, #11
   145b4:	bls	14624 <_start@@Base+0x1a68>
   145b8:	ldrh	r0, [r2, #10]
   145bc:	cmp	r0, #0
   145c0:	beq	14624 <_start@@Base+0x1a68>
   145c4:	ldr	r2, [r3, r0]
   145c8:	add	r0, r3, r0
   145cc:	mov	r1, r8
   145d0:	add	r2, r2, #4
   145d4:	add	r0, r0, r2
   145d8:	bl	128e4 <strcmp@plt>
   145dc:	cmp	r0, #0
   145e0:	bne	14584 <_start@@Base+0x19c8>
   145e4:	cmn	r4, #1
   145e8:	beq	14600 <_start@@Base+0x1a44>
   145ec:	add	r3, r4, #1
   145f0:	add	r9, r9, #1
   145f4:	cmp	r3, r7
   145f8:	mov	r4, r3
   145fc:	bcc	14544 <_start@@Base+0x1988>
   14600:	mov	r0, r9
   14604:	ldrd	r4, [sp]
   14608:	ldrd	r6, [sp, #8]
   1460c:	ldrd	r8, [sp, #16]
   14610:	ldr	sl, [sp, #24]
   14614:	add	sp, sp, #28
   14618:	pop	{pc}		; (ldr pc, [sp], #4)
   1461c:	mov	r9, #0
   14620:	b	14600 <_start@@Base+0x1a44>
   14624:	ldr	r3, [pc, #72]	; 14674 <_start@@Base+0x1ab8>
   14628:	movw	r2, #699	; 0x2bb
   1462c:	ldr	r1, [pc, #68]	; 14678 <_start@@Base+0x1abc>
   14630:	ldr	r0, [pc, #68]	; 1467c <_start@@Base+0x1ac0>
   14634:	add	r3, pc, r3
   14638:	add	r3, r3, #524	; 0x20c
   1463c:	add	r1, pc, r1
   14640:	add	r0, pc, r0
   14644:	bl	129e0 <__assert_fail@plt>
   14648:	ldr	r3, [pc, #48]	; 14680 <_start@@Base+0x1ac4>
   1464c:	movw	r2, #699	; 0x2bb
   14650:	ldr	r1, [pc, #44]	; 14684 <_start@@Base+0x1ac8>
   14654:	ldr	r0, [pc, #44]	; 14688 <_start@@Base+0x1acc>
   14658:	add	r3, pc, r3
   1465c:	add	r3, r3, #524	; 0x20c
   14660:	add	r1, pc, r1
   14664:	add	r0, pc, r0
   14668:	bl	129e0 <__assert_fail@plt>
   1466c:	mov	r9, r7
   14670:	b	14600 <_start@@Base+0x1a44>
   14674:	andeq	r0, r1, ip, lsr #17
   14678:	andeq	r1, r1, r8, lsl r0
   1467c:	andeq	r1, r1, r0, ror r1
   14680:	andeq	r0, r1, r8, lsl #17
   14684:	strdeq	r0, [r1], -r4
   14688:	andeq	r1, r1, ip, rrx
   1468c:	cmp	r0, #0
   14690:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14694:	strd	r6, [sp, #8]
   14698:	str	r8, [sp, #16]
   1469c:	str	lr, [sp, #20]
   146a0:	beq	14748 <_start@@Base+0x1b8c>
   146a4:	ldr	r6, [r0, #-4]
   146a8:	mov	r5, r3
   146ac:	mov	r4, r1
   146b0:	cmp	r2, r6
   146b4:	movcc	r3, r2
   146b8:	movcs	r3, r6
   146bc:	sub	r7, r3, #-1073741823	; 0xc0000001
   146c0:	add	r7, r0, r7, lsl #2
   146c4:	cmp	r3, r4
   146c8:	sub	r8, r3, #1
   146cc:	bls	14748 <_start@@Base+0x1b8c>
   146d0:	cmp	r8, r6
   146d4:	mov	r2, r7
   146d8:	bcs	14798 <_start@@Base+0x1bdc>
   146dc:	ldr	r3, [r2]
   146e0:	sub	r7, r7, #4
   146e4:	adds	r0, r2, r3
   146e8:	beq	14774 <_start@@Base+0x1bb8>
   146ec:	ldr	r2, [r2, r3]
   146f0:	sub	r2, r0, r2
   146f4:	ldrh	r3, [r2]
   146f8:	cmp	r3, #11
   146fc:	bls	14750 <_start@@Base+0x1b94>
   14700:	ldrh	r2, [r2, #10]
   14704:	cmp	r2, #0
   14708:	beq	14750 <_start@@Base+0x1b94>
   1470c:	ldr	r3, [r0, r2]
   14710:	add	r0, r0, r2
   14714:	mov	r1, r5
   14718:	add	r3, r3, #4
   1471c:	add	r0, r0, r3
   14720:	bl	128e4 <strcmp@plt>
   14724:	cmp	r0, #0
   14728:	mov	r3, r8
   1472c:	bne	146c4 <_start@@Base+0x1b08>
   14730:	mov	r0, r8
   14734:	ldrd	r4, [sp]
   14738:	ldrd	r6, [sp, #8]
   1473c:	ldr	r8, [sp, #16]
   14740:	add	sp, sp, #20
   14744:	pop	{pc}		; (ldr pc, [sp], #4)
   14748:	mvn	r8, #0
   1474c:	b	14730 <_start@@Base+0x1b74>
   14750:	ldr	r3, [pc, #100]	; 147bc <_start@@Base+0x1c00>
   14754:	movw	r2, #699	; 0x2bb
   14758:	ldr	r1, [pc, #96]	; 147c0 <_start@@Base+0x1c04>
   1475c:	ldr	r0, [pc, #96]	; 147c4 <_start@@Base+0x1c08>
   14760:	add	r3, pc, r3
   14764:	add	r3, r3, #524	; 0x20c
   14768:	add	r1, pc, r1
   1476c:	add	r0, pc, r0
   14770:	bl	129e0 <__assert_fail@plt>
   14774:	ldr	r3, [pc, #76]	; 147c8 <_start@@Base+0x1c0c>
   14778:	movw	r2, #699	; 0x2bb
   1477c:	ldr	r1, [pc, #72]	; 147cc <_start@@Base+0x1c10>
   14780:	ldr	r0, [pc, #72]	; 147d0 <_start@@Base+0x1c14>
   14784:	add	r3, pc, r3
   14788:	add	r3, r3, #524	; 0x20c
   1478c:	add	r1, pc, r1
   14790:	add	r0, pc, r0
   14794:	bl	129e0 <__assert_fail@plt>
   14798:	ldr	r3, [pc, #52]	; 147d4 <_start@@Base+0x1c18>
   1479c:	movw	r2, #693	; 0x2b5
   147a0:	ldr	r1, [pc, #48]	; 147d8 <_start@@Base+0x1c1c>
   147a4:	ldr	r0, [pc, #48]	; 147dc <_start@@Base+0x1c20>
   147a8:	add	r3, pc, r3
   147ac:	add	r3, r3, #428	; 0x1ac
   147b0:	add	r1, pc, r1
   147b4:	add	r0, pc, r0
   147b8:	bl	129e0 <__assert_fail@plt>
   147bc:	andeq	r0, r1, r0, lsl #15
   147c0:	andeq	r0, r1, ip, ror #29
   147c4:	andeq	r1, r1, r4, asr #32
   147c8:	andeq	r0, r1, ip, asr r7
   147cc:	andeq	r0, r1, r8, asr #29
   147d0:	andeq	r0, r1, r0, asr #30
   147d4:	andeq	r0, r1, r8, lsr r7
   147d8:	andeq	r0, r1, r4, lsr #29
   147dc:	andeq	r0, r1, r4, asr #31
   147e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   147e4:	mov	r5, r0
   147e8:	mov	r4, r1
   147ec:	strd	r6, [sp, #8]
   147f0:	mov	r7, r2
   147f4:	mov	r6, r3
   147f8:	str	r8, [sp, #16]
   147fc:	str	lr, [sp, #20]
   14800:	b	14878 <_start@@Base+0x1cbc>
   14804:	ldr	r3, [r5, #-4]
   14808:	cmp	r7, r3
   1480c:	movcc	r2, r7
   14810:	movcs	r2, r3
   14814:	cmp	r4, r2
   14818:	bcs	14880 <_start@@Base+0x1cc4>
   1481c:	cmp	r4, r3
   14820:	add	r2, r5, r4, lsl #2
   14824:	bcs	148e8 <_start@@Base+0x1d2c>
   14828:	ldr	r3, [r5, r4, lsl #2]
   1482c:	adds	r0, r2, r3
   14830:	beq	148c4 <_start@@Base+0x1d08>
   14834:	ldr	r3, [r2, r3]
   14838:	sub	r3, r0, r3
   1483c:	ldrh	r2, [r3]
   14840:	cmp	r2, #11
   14844:	bls	148a0 <_start@@Base+0x1ce4>
   14848:	ldrh	r2, [r3, #10]
   1484c:	cmp	r2, #0
   14850:	beq	148a0 <_start@@Base+0x1ce4>
   14854:	ldr	r3, [r0, r2]
   14858:	add	r0, r0, r2
   1485c:	mov	r1, r6
   14860:	add	r3, r3, #4
   14864:	add	r0, r0, r3
   14868:	bl	128e4 <strcmp@plt>
   1486c:	cmp	r0, #0
   14870:	beq	14898 <_start@@Base+0x1cdc>
   14874:	add	r4, r4, #1
   14878:	cmp	r5, #0
   1487c:	bne	14804 <_start@@Base+0x1c48>
   14880:	mvn	r0, #0
   14884:	ldrd	r4, [sp]
   14888:	ldrd	r6, [sp, #8]
   1488c:	ldr	r8, [sp, #16]
   14890:	add	sp, sp, #20
   14894:	pop	{pc}		; (ldr pc, [sp], #4)
   14898:	mov	r0, r4
   1489c:	b	14884 <_start@@Base+0x1cc8>
   148a0:	ldr	r3, [pc, #100]	; 1490c <_start@@Base+0x1d50>
   148a4:	movw	r2, #699	; 0x2bb
   148a8:	ldr	r1, [pc, #96]	; 14910 <_start@@Base+0x1d54>
   148ac:	ldr	r0, [pc, #96]	; 14914 <_start@@Base+0x1d58>
   148b0:	add	r3, pc, r3
   148b4:	add	r3, r3, #524	; 0x20c
   148b8:	add	r1, pc, r1
   148bc:	add	r0, pc, r0
   148c0:	bl	129e0 <__assert_fail@plt>
   148c4:	ldr	r3, [pc, #76]	; 14918 <_start@@Base+0x1d5c>
   148c8:	movw	r2, #699	; 0x2bb
   148cc:	ldr	r1, [pc, #72]	; 1491c <_start@@Base+0x1d60>
   148d0:	ldr	r0, [pc, #72]	; 14920 <_start@@Base+0x1d64>
   148d4:	add	r3, pc, r3
   148d8:	add	r3, r3, #524	; 0x20c
   148dc:	add	r1, pc, r1
   148e0:	add	r0, pc, r0
   148e4:	bl	129e0 <__assert_fail@plt>
   148e8:	ldr	r3, [pc, #52]	; 14924 <_start@@Base+0x1d68>
   148ec:	movw	r2, #693	; 0x2b5
   148f0:	ldr	r1, [pc, #48]	; 14928 <_start@@Base+0x1d6c>
   148f4:	ldr	r0, [pc, #48]	; 1492c <_start@@Base+0x1d70>
   148f8:	add	r3, pc, r3
   148fc:	add	r3, r3, #428	; 0x1ac
   14900:	add	r1, pc, r1
   14904:	add	r0, pc, r0
   14908:	bl	129e0 <__assert_fail@plt>
   1490c:	andeq	r0, r1, r0, lsr r6
   14910:	muleq	r1, ip, sp
   14914:	strdeq	r0, [r1], -r4
   14918:	andeq	r0, r1, ip, lsl #12
   1491c:	andeq	r0, r1, r8, ror sp
   14920:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   14924:	andeq	r0, r1, r8, ror #11
   14928:	andeq	r0, r1, r4, asr sp
   1492c:	andeq	r0, r1, r4, ror lr
   14930:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14934:	strd	r6, [sp, #8]
   14938:	strd	r8, [sp, #16]
   1493c:	subs	r9, r0, #0
   14940:	str	sl, [sp, #24]
   14944:	str	lr, [sp, #28]
   14948:	beq	14a80 <_start@@Base+0x1ec4>
   1494c:	ldr	r7, [r9, #-4]
   14950:	cmp	r7, #0
   14954:	beq	14a80 <_start@@Base+0x1ec4>
   14958:	mov	r6, r1
   1495c:	sub	r8, r7, #1
   14960:	mov	r5, #0
   14964:	cmp	r5, r8
   14968:	bcs	14a1c <_start@@Base+0x1e60>
   1496c:	sub	r4, r8, r5
   14970:	add	r4, r5, r4, lsr #1
   14974:	cmp	r7, r4
   14978:	add	r2, r9, r4, lsl #2
   1497c:	bls	14ac4 <_start@@Base+0x1f08>
   14980:	ldr	r3, [r9, r4, lsl #2]
   14984:	adds	r1, r2, r3
   14988:	beq	14ae8 <_start@@Base+0x1f2c>
   1498c:	ldr	r2, [r2, r3]
   14990:	sub	r2, r1, r2
   14994:	ldrh	r3, [r2]
   14998:	cmp	r3, #11
   1499c:	bhi	149e8 <_start@@Base+0x1e2c>
   149a0:	b	14aa0 <_start@@Base+0x1ee4>
   149a4:	cmp	r5, r4
   149a8:	bcs	14a20 <_start@@Base+0x1e64>
   149ac:	sub	r3, r4, r5
   149b0:	add	r3, r5, r3, lsr #1
   149b4:	cmp	r3, r7
   149b8:	add	r0, r9, r3, lsl #2
   149bc:	bcs	14ac4 <_start@@Base+0x1f08>
   149c0:	ldr	r2, [r9, r3, lsl #2]
   149c4:	adds	r1, r0, r2
   149c8:	beq	14ae8 <_start@@Base+0x1f2c>
   149cc:	ldr	r2, [r0, r2]
   149d0:	mov	r8, r4
   149d4:	sub	r2, r1, r2
   149d8:	ldrh	r0, [r2]
   149dc:	cmp	r0, #11
   149e0:	bls	14aa0 <_start@@Base+0x1ee4>
   149e4:	mov	r4, r3
   149e8:	ldrh	r0, [r2, #10]
   149ec:	cmp	r0, #0
   149f0:	beq	14aa0 <_start@@Base+0x1ee4>
   149f4:	ldr	r3, [r1, r0]
   149f8:	add	r0, r1, r0
   149fc:	mov	r1, r6
   14a00:	add	r3, r3, #4
   14a04:	add	r0, r0, r3
   14a08:	bl	128e4 <strcmp@plt>
   14a0c:	cmp	r0, #0
   14a10:	bge	149a4 <_start@@Base+0x1de8>
   14a14:	add	r5, r4, #1
   14a18:	b	14964 <_start@@Base+0x1da8>
   14a1c:	mov	r4, r8
   14a20:	cmp	r5, r4
   14a24:	bne	14a80 <_start@@Base+0x1ec4>
   14a28:	cmp	r5, r7
   14a2c:	add	r1, r9, r5, lsl #2
   14a30:	bcs	14b10 <_start@@Base+0x1f54>
   14a34:	ldr	r2, [r9, r5, lsl #2]
   14a38:	adds	r3, r1, r2
   14a3c:	beq	14b0c <_start@@Base+0x1f50>
   14a40:	ldr	r2, [r1, r2]
   14a44:	sub	r2, r3, r2
   14a48:	ldrh	r1, [r2]
   14a4c:	cmp	r1, #11
   14a50:	bls	14aa0 <_start@@Base+0x1ee4>
   14a54:	ldrh	r2, [r2, #10]
   14a58:	cmp	r2, #0
   14a5c:	beq	14aa0 <_start@@Base+0x1ee4>
   14a60:	ldr	r0, [r3, r2]
   14a64:	add	r3, r3, r2
   14a68:	mov	r1, r6
   14a6c:	add	r0, r0, #4
   14a70:	add	r0, r3, r0
   14a74:	bl	128e4 <strcmp@plt>
   14a78:	cmp	r0, #0
   14a7c:	beq	14a84 <_start@@Base+0x1ec8>
   14a80:	mvn	r5, #0
   14a84:	mov	r0, r5
   14a88:	ldrd	r4, [sp]
   14a8c:	ldrd	r6, [sp, #8]
   14a90:	ldrd	r8, [sp, #16]
   14a94:	ldr	sl, [sp, #24]
   14a98:	add	sp, sp, #28
   14a9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14aa0:	ldr	r3, [pc, #108]	; 14b14 <_start@@Base+0x1f58>
   14aa4:	movw	r2, #699	; 0x2bb
   14aa8:	ldr	r1, [pc, #104]	; 14b18 <_start@@Base+0x1f5c>
   14aac:	ldr	r0, [pc, #104]	; 14b1c <_start@@Base+0x1f60>
   14ab0:	add	r3, pc, r3
   14ab4:	add	r3, r3, #524	; 0x20c
   14ab8:	add	r1, pc, r1
   14abc:	add	r0, pc, r0
   14ac0:	bl	129e0 <__assert_fail@plt>
   14ac4:	ldr	r3, [pc, #84]	; 14b20 <_start@@Base+0x1f64>
   14ac8:	movw	r2, #693	; 0x2b5
   14acc:	ldr	r1, [pc, #80]	; 14b24 <_start@@Base+0x1f68>
   14ad0:	ldr	r0, [pc, #80]	; 14b28 <_start@@Base+0x1f6c>
   14ad4:	add	r3, pc, r3
   14ad8:	add	r3, r3, #428	; 0x1ac
   14adc:	add	r1, pc, r1
   14ae0:	add	r0, pc, r0
   14ae4:	bl	129e0 <__assert_fail@plt>
   14ae8:	ldr	r3, [pc, #60]	; 14b2c <_start@@Base+0x1f70>
   14aec:	movw	r2, #699	; 0x2bb
   14af0:	ldr	r1, [pc, #56]	; 14b30 <_start@@Base+0x1f74>
   14af4:	ldr	r0, [pc, #56]	; 14b34 <_start@@Base+0x1f78>
   14af8:	add	r3, pc, r3
   14afc:	add	r3, r3, #524	; 0x20c
   14b00:	add	r1, pc, r1
   14b04:	add	r0, pc, r0
   14b08:	bl	129e0 <__assert_fail@plt>
   14b0c:	bl	132a8 <_start@@Base+0x6ec>
   14b10:	bl	13174 <_start@@Base+0x5b8>
   14b14:	andeq	r0, r1, r0, lsr r4
   14b18:	muleq	r1, ip, fp
   14b1c:	strdeq	r0, [r1], -r4
   14b20:	andeq	r0, r1, ip, lsl #8
   14b24:	andeq	r0, r1, r8, ror fp
   14b28:	muleq	r1, r8, ip
   14b2c:	andeq	r0, r1, r8, ror #7
   14b30:	andeq	r0, r1, r4, asr fp
   14b34:	andeq	r0, r1, ip, asr #23

00014b38 <verify_empty_monster@@Base>:
   14b38:	cmp	r0, #0
   14b3c:	str	r4, [sp, #-8]!
   14b40:	str	lr, [sp, #4]
   14b44:	beq	14b64 <verify_empty_monster@@Base+0x2c>
   14b48:	ldr	r3, [r0]
   14b4c:	movw	r2, #20301	; 0x4f4d
   14b50:	movt	r2, #21326	; 0x534e
   14b54:	ldr	r1, [r0, #4]
   14b58:	cmp	r1, r2
   14b5c:	add	r1, r0, r3
   14b60:	beq	14b80 <verify_empty_monster@@Base+0x48>
   14b64:	ldr	r0, [pc, #156]	; 14c08 <verify_empty_monster@@Base+0xd0>
   14b68:	add	r0, pc, r0
   14b6c:	bl	12944 <puts@plt>
   14b70:	mvn	r0, #0
   14b74:	ldr	r4, [sp]
   14b78:	add	sp, sp, #4
   14b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b80:	cmp	r1, #0
   14b84:	beq	14b64 <verify_empty_monster@@Base+0x2c>
   14b88:	ldr	r3, [r0, r3]
   14b8c:	sub	r3, r1, r3
   14b90:	ldrh	r2, [r3]
   14b94:	cmp	r2, #9
   14b98:	bls	14bc8 <verify_empty_monster@@Base+0x90>
   14b9c:	ldrh	r2, [r3, #8]
   14ba0:	cmp	r2, #0
   14ba4:	beq	14bd4 <verify_empty_monster@@Base+0x9c>
   14ba8:	ldrsh	r3, [r1, r2]
   14bac:	cmp	r3, #100	; 0x64
   14bb0:	bne	14bf4 <verify_empty_monster@@Base+0xbc>
   14bb4:	ldr	r0, [pc, #80]	; 14c0c <verify_empty_monster@@Base+0xd4>
   14bb8:	add	r0, pc, r0
   14bbc:	bl	12944 <puts@plt>
   14bc0:	mvn	r0, #0
   14bc4:	b	14b74 <verify_empty_monster@@Base+0x3c>
   14bc8:	cmp	r2, #5
   14bcc:	movls	r0, #0
   14bd0:	bls	14b74 <verify_empty_monster@@Base+0x3c>
   14bd4:	ldrh	r0, [r3, #4]
   14bd8:	cmp	r0, #0
   14bdc:	beq	14b74 <verify_empty_monster@@Base+0x3c>
   14be0:	ldr	r0, [pc, #40]	; 14c10 <verify_empty_monster@@Base+0xd8>
   14be4:	add	r0, pc, r0
   14be8:	bl	12944 <puts@plt>
   14bec:	mvn	r0, #0
   14bf0:	b	14b74 <verify_empty_monster@@Base+0x3c>
   14bf4:	ldr	r0, [pc, #24]	; 14c14 <verify_empty_monster@@Base+0xdc>
   14bf8:	add	r0, pc, r0
   14bfc:	bl	12944 <puts@plt>
   14c00:	mvn	r0, #0
   14c04:	b	14b74 <verify_empty_monster@@Base+0x3c>
   14c08:	andeq	r0, r1, ip, asr pc
   14c0c:	andeq	r0, r1, r4, ror #30
   14c10:	andeq	r0, r1, ip, lsl pc
   14c14:	andeq	r0, r1, r4, ror #29

00014c18 <test_enums@@Base>:
   14c18:	mov	r0, #0
   14c1c:	bx	lr

00014c20 <test_type_aliases@@Base>:
   14c20:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14c24:	mov	r4, r0
   14c28:	mov	r5, #8
   14c2c:	strd	r6, [sp, #8]
   14c30:	strd	r8, [sp, #16]
   14c34:	mvn	r9, #0
   14c38:	str	sl, [sp, #24]
   14c3c:	str	lr, [sp, #28]
   14c40:	sub	sp, sp, #16
   14c44:	bl	1f250 <flatcc_builder_reset@@Base>
   14c48:	mov	ip, #1
   14c4c:	mov	r2, #0
   14c50:	ldr	r6, [pc, #1308]	; 15174 <test_type_aliases@@Base+0x554>
   14c54:	mov	r3, ip
   14c58:	mov	r1, r2
   14c5c:	mov	r0, r4
   14c60:	str	ip, [sp]
   14c64:	str	r9, [sp, #4]
   14c68:	bl	215d4 <flatcc_builder_create_vector@@Base>
   14c6c:	mvn	ip, #-536870912	; 0xe0000000
   14c70:	mov	r2, #0
   14c74:	mov	r1, r2
   14c78:	mov	r3, r5
   14c7c:	mov	r8, r0
   14c80:	mov	r0, r4
   14c84:	stm	sp, {r5, ip}
   14c88:	bl	215d4 <flatcc_builder_create_vector@@Base>
   14c8c:	ldr	r1, [pc, #1252]	; 15178 <test_type_aliases@@Base+0x558>
   14c90:	mov	r3, #0
   14c94:	mov	sl, r0
   14c98:	mov	r2, r3
   14c9c:	mov	r0, r4
   14ca0:	add	r6, pc, r6
   14ca4:	add	r1, pc, r1
   14ca8:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   14cac:	subs	r7, r0, #0
   14cb0:	beq	14f18 <test_type_aliases@@Base+0x2f8>
   14cb4:	mov	r0, r4
   14cb8:	add	r1, sp, #12
   14cbc:	bl	22e80 <flatcc_builder_finalize_aligned_buffer@@Base>
   14cc0:	ldr	r3, [pc, #1204]	; 1517c <test_type_aliases@@Base+0x55c>
   14cc4:	mov	r4, r0
   14cc8:	ldr	r2, [pc, #1200]	; 15180 <test_type_aliases@@Base+0x560>
   14ccc:	ldr	r1, [sp, #12]
   14cd0:	add	r3, pc, r3
   14cd4:	add	r2, pc, r2
   14cd8:	bl	2457c <flatcc_verify_table_as_root@@Base>
   14cdc:	subs	r5, r0, #0
   14ce0:	bne	15110 <test_type_aliases@@Base+0x4f0>
   14ce4:	cmp	r4, #0
   14ce8:	beq	14d00 <test_type_aliases@@Base+0xe0>
   14cec:	ldr	r2, [r4, #4]
   14cf0:	movw	r3, #20301	; 0x4f4d
   14cf4:	movt	r3, #21326	; 0x534e
   14cf8:	cmp	r2, r3
   14cfc:	beq	14d24 <test_type_aliases@@Base+0x104>
   14d00:	ldr	r3, [pc, #1148]	; 15184 <test_type_aliases@@Base+0x564>
   14d04:	movw	r2, #749	; 0x2ed
   14d08:	ldr	r1, [pc, #1144]	; 15188 <test_type_aliases@@Base+0x568>
   14d0c:	ldr	r0, [pc, #1144]	; 1518c <test_type_aliases@@Base+0x56c>
   14d10:	add	r3, pc, r3
   14d14:	add	r3, r3, #996	; 0x3e4
   14d18:	add	r1, pc, r1
   14d1c:	add	r0, pc, r0
   14d20:	bl	129e0 <__assert_fail@plt>
   14d24:	ldr	r2, [r4]
   14d28:	adds	r0, r4, r2
   14d2c:	beq	14d00 <test_type_aliases@@Base+0xe0>
   14d30:	ldr	r3, [r4, r2]
   14d34:	sub	r3, r0, r3
   14d38:	ldrh	r2, [r3]
   14d3c:	cmp	r2, #5
   14d40:	bhi	14d7c <test_type_aliases@@Base+0x15c>
   14d44:	ldr	r0, [pc, #1092]	; 15190 <test_type_aliases@@Base+0x570>
   14d48:	mvn	r5, #0
   14d4c:	add	r0, pc, r0
   14d50:	bl	12944 <puts@plt>
   14d54:	mov	r0, r4
   14d58:	bl	22fac <flatcc_builder_aligned_free@@Base>
   14d5c:	mov	r0, r5
   14d60:	add	sp, sp, #16
   14d64:	ldrd	r4, [sp]
   14d68:	ldrd	r6, [sp, #8]
   14d6c:	ldrd	r8, [sp, #16]
   14d70:	ldr	sl, [sp, #24]
   14d74:	add	sp, sp, #28
   14d78:	pop	{pc}		; (ldr pc, [sp], #4)
   14d7c:	ldrh	r1, [r3, #4]
   14d80:	cmp	r1, #0
   14d84:	beq	14d44 <test_type_aliases@@Base+0x124>
   14d88:	ldrsb	ip, [r0, r1]
   14d8c:	cmp	r2, #9
   14d90:	movls	r1, #0
   14d94:	movhi	r1, #1
   14d98:	cmn	ip, #128	; 0x80
   14d9c:	movne	r1, #0
   14da0:	cmp	r1, #0
   14da4:	beq	14d44 <test_type_aliases@@Base+0x124>
   14da8:	ldrh	r1, [r3, #8]
   14dac:	cmp	r1, #0
   14db0:	beq	14d44 <test_type_aliases@@Base+0x124>
   14db4:	ldrsh	ip, [r0, r1]
   14db8:	cmp	r2, #13
   14dbc:	movls	r1, #0
   14dc0:	movhi	r1, #1
   14dc4:	cmn	ip, #32768	; 0x8000
   14dc8:	movne	r1, #0
   14dcc:	cmp	r1, #0
   14dd0:	beq	14d44 <test_type_aliases@@Base+0x124>
   14dd4:	ldrh	r1, [r3, #12]
   14dd8:	cmp	r1, #0
   14ddc:	beq	14d44 <test_type_aliases@@Base+0x124>
   14de0:	ldr	ip, [r0, r1]
   14de4:	cmp	r2, #17
   14de8:	sub	r1, ip, #-2147483648	; 0x80000000
   14dec:	clz	r1, r1
   14df0:	lsr	r1, r1, #5
   14df4:	movls	r1, #0
   14df8:	cmp	r1, #0
   14dfc:	beq	14d44 <test_type_aliases@@Base+0x124>
   14e00:	ldrh	r1, [r3, #16]
   14e04:	cmp	r1, #0
   14e08:	beq	14d44 <test_type_aliases@@Base+0x124>
   14e0c:	ldrd	r6, [r0, r1]
   14e10:	cmp	r7, #-2147483648	; 0x80000000
   14e14:	cmpeq	r6, #0
   14e18:	bne	14d44 <test_type_aliases@@Base+0x124>
   14e1c:	ldrh	r1, [r3, #6]
   14e20:	cmp	r1, #0
   14e24:	beq	14d44 <test_type_aliases@@Base+0x124>
   14e28:	ldrb	r1, [r0, r1]
   14e2c:	cmp	r1, #255	; 0xff
   14e30:	bne	14d44 <test_type_aliases@@Base+0x124>
   14e34:	ldrh	r1, [r3, #10]
   14e38:	cmp	r1, #0
   14e3c:	beq	14d44 <test_type_aliases@@Base+0x124>
   14e40:	ldrh	ip, [r0, r1]
   14e44:	movw	r1, #65535	; 0xffff
   14e48:	cmp	ip, r1
   14e4c:	bne	14d44 <test_type_aliases@@Base+0x124>
   14e50:	ldrh	r1, [r3, #14]
   14e54:	cmp	r1, #0
   14e58:	beq	14d44 <test_type_aliases@@Base+0x124>
   14e5c:	ldr	ip, [r0, r1]
   14e60:	cmp	r2, #19
   14e64:	movls	r1, #0
   14e68:	movhi	r1, #1
   14e6c:	cmn	ip, #1
   14e70:	movne	r1, #0
   14e74:	cmp	r1, #0
   14e78:	beq	14d44 <test_type_aliases@@Base+0x124>
   14e7c:	ldrh	r1, [r3, #18]
   14e80:	cmp	r1, #0
   14e84:	beq	14d44 <test_type_aliases@@Base+0x124>
   14e88:	mov	ip, r0
   14e8c:	cmp	r2, #21
   14e90:	ldr	r1, [ip, r1]!
   14e94:	ldr	ip, [ip, #4]
   14e98:	and	r1, r1, ip
   14e9c:	movls	ip, #0
   14ea0:	movhi	ip, #1
   14ea4:	cmn	r1, #1
   14ea8:	movne	ip, #0
   14eac:	cmp	ip, #0
   14eb0:	beq	14d44 <test_type_aliases@@Base+0x124>
   14eb4:	ldrh	r1, [r3, #20]
   14eb8:	cmp	r1, #0
   14ebc:	beq	14d44 <test_type_aliases@@Base+0x124>
   14ec0:	add	r1, r0, r1
   14ec4:	vldr	s15, [pc, #676]	; 15170 <test_type_aliases@@Base+0x550>
   14ec8:	vldr	s14, [r1]
   14ecc:	vcmp.f32	s14, s15
   14ed0:	vmrs	APSR_nzcv, fpscr
   14ed4:	moveq	r1, #1
   14ed8:	movne	r1, #0
   14edc:	cmp	r2, #23
   14ee0:	movls	r2, #0
   14ee4:	andhi	r2, r1, #1
   14ee8:	cmp	r2, #0
   14eec:	beq	14d44 <test_type_aliases@@Base+0x124>
   14ef0:	ldrh	r3, [r3, #22]
   14ef4:	cmp	r3, #0
   14ef8:	beq	14d44 <test_type_aliases@@Base+0x124>
   14efc:	add	r3, r0, r3
   14f00:	vldr	d7, [pc, #608]	; 15168 <test_type_aliases@@Base+0x548>
   14f04:	vldr	d6, [r3]
   14f08:	vcmp.f64	d6, d7
   14f0c:	vmrs	APSR_nzcv, fpscr
   14f10:	beq	14d54 <test_type_aliases@@Base+0x134>
   14f14:	b	14d44 <test_type_aliases@@Base+0x124>
   14f18:	mov	r1, #12
   14f1c:	mov	r0, r4
   14f20:	bl	20a20 <flatcc_builder_start_table@@Base>
   14f24:	cmp	r0, #0
   14f28:	bne	15100 <test_type_aliases@@Base+0x4e0>
   14f2c:	mov	r3, r5
   14f30:	mov	r2, r5
   14f34:	mov	r1, #6
   14f38:	mov	r0, r4
   14f3c:	bl	22554 <flatcc_builder_table_add@@Base>
   14f40:	subs	ip, r0, #0
   14f44:	beq	15100 <test_type_aliases@@Base+0x4e0>
   14f48:	mov	r0, #0
   14f4c:	mov	r1, #-2147483648	; 0x80000000
   14f50:	mov	r3, r5
   14f54:	mov	r2, r5
   14f58:	strd	r0, [ip]
   14f5c:	mov	r1, #7
   14f60:	mov	r0, r4
   14f64:	bl	22554 <flatcc_builder_table_add@@Base>
   14f68:	subs	ip, r0, #0
   14f6c:	beq	15100 <test_type_aliases@@Base+0x4e0>
   14f70:	mvn	r0, #0
   14f74:	mvn	r1, #0
   14f78:	mov	r3, r5
   14f7c:	mov	r2, r5
   14f80:	strd	r0, [ip]
   14f84:	mov	r1, #9
   14f88:	mov	r0, r4
   14f8c:	bl	22554 <flatcc_builder_table_add@@Base>
   14f90:	subs	ip, r0, #0
   14f94:	beq	15100 <test_type_aliases@@Base+0x4e0>
   14f98:	vldr	d7, [pc, #456]	; 15168 <test_type_aliases@@Base+0x548>
   14f9c:	mov	r3, #4
   14fa0:	mov	r0, r4
   14fa4:	mov	r2, r3
   14fa8:	mov	r1, r3
   14fac:	vstr	d7, [ip]
   14fb0:	bl	22554 <flatcc_builder_table_add@@Base>
   14fb4:	cmp	r0, #0
   14fb8:	beq	15100 <test_type_aliases@@Base+0x4e0>
   14fbc:	mov	ip, #-2147483648	; 0x80000000
   14fc0:	mov	r3, #4
   14fc4:	mov	r2, r3
   14fc8:	mov	r1, #5
   14fcc:	str	ip, [r0]
   14fd0:	mov	r0, r4
   14fd4:	bl	22554 <flatcc_builder_table_add@@Base>
   14fd8:	cmp	r0, #0
   14fdc:	beq	15100 <test_type_aliases@@Base+0x4e0>
   14fe0:	mov	r3, #4
   14fe4:	mov	r1, r5
   14fe8:	str	r9, [r0]
   14fec:	mov	r2, r3
   14ff0:	mov	r0, r4
   14ff4:	bl	22554 <flatcc_builder_table_add@@Base>
   14ff8:	cmp	r0, #0
   14ffc:	beq	15100 <test_type_aliases@@Base+0x4e0>
   15000:	movw	r3, #13107	; 0x3333
   15004:	movt	r3, #16403	; 0x4013
   15008:	cmp	r8, #0
   1500c:	str	r3, [r0]
   15010:	beq	15100 <test_type_aliases@@Base+0x4e0>
   15014:	mov	r1, #10
   15018:	mov	r0, r4
   1501c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   15020:	cmp	r0, #0
   15024:	beq	15100 <test_type_aliases@@Base+0x4e0>
   15028:	cmp	sl, #0
   1502c:	str	r8, [r0]
   15030:	beq	15100 <test_type_aliases@@Base+0x4e0>
   15034:	mov	r1, #11
   15038:	mov	r0, r4
   1503c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   15040:	subs	r2, r0, #0
   15044:	beq	15100 <test_type_aliases@@Base+0x4e0>
   15048:	mov	r3, #2
   1504c:	mov	r0, r4
   15050:	str	sl, [r2]
   15054:	mov	r1, r3
   15058:	mov	r2, r3
   1505c:	bl	22554 <flatcc_builder_table_add@@Base>
   15060:	cmp	r0, #0
   15064:	beq	15100 <test_type_aliases@@Base+0x4e0>
   15068:	mov	ip, #32768	; 0x8000
   1506c:	mov	r3, #2
   15070:	mov	r2, r3
   15074:	mov	r1, #3
   15078:	strh	ip, [r0]
   1507c:	mov	r0, r4
   15080:	bl	22554 <flatcc_builder_table_add@@Base>
   15084:	cmp	r0, #0
   15088:	beq	15100 <test_type_aliases@@Base+0x4e0>
   1508c:	mov	r3, #1
   15090:	mov	r1, #0
   15094:	strh	r9, [r0]
   15098:	mov	r2, r3
   1509c:	mov	r0, r4
   150a0:	bl	22554 <flatcc_builder_table_add@@Base>
   150a4:	cmp	r0, #0
   150a8:	beq	15100 <test_type_aliases@@Base+0x4e0>
   150ac:	mvn	ip, #127	; 0x7f
   150b0:	mov	r3, #1
   150b4:	mov	r2, r3
   150b8:	mov	r1, r3
   150bc:	strb	ip, [r0]
   150c0:	mov	r0, r4
   150c4:	bl	22554 <flatcc_builder_table_add@@Base>
   150c8:	subs	r3, r0, #0
   150cc:	beq	15100 <test_type_aliases@@Base+0x4e0>
   150d0:	ldr	r7, [pc, #188]	; 15194 <test_type_aliases@@Base+0x574>
   150d4:	mov	r2, #0
   150d8:	mov	r0, r4
   150dc:	strb	r9, [r3]
   150e0:	add	r7, pc, r7
   150e4:	add	r1, r7, #960	; 0x3c0
   150e8:	bl	21358 <flatcc_builder_check_required@@Base>
   150ec:	cmp	r0, #0
   150f0:	beq	1514c <test_type_aliases@@Base+0x52c>
   150f4:	mov	r0, r4
   150f8:	bl	21404 <flatcc_builder_end_table@@Base>
   150fc:	mov	r7, r0
   15100:	mov	r1, r7
   15104:	mov	r0, r4
   15108:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   1510c:	b	14cb4 <test_type_aliases@@Base+0x94>
   15110:	ldr	r3, [pc, #128]	; 15198 <test_type_aliases@@Base+0x578>
   15114:	mov	r1, r4
   15118:	ldr	r0, [pc, #124]	; 1519c <test_type_aliases@@Base+0x57c>
   1511c:	ldr	r2, [sp, #12]
   15120:	ldr	r3, [r6, r3]
   15124:	add	r0, pc, r0
   15128:	ldr	r3, [r3]
   1512c:	bl	12cd8 <_start@@Base+0x11c>
   15130:	mov	r0, r5
   15134:	bl	235a8 <flatcc_verify_error_string@@Base>
   15138:	mov	r1, r0
   1513c:	ldr	r0, [pc, #92]	; 151a0 <test_type_aliases@@Base+0x580>
   15140:	add	r0, pc, r0
   15144:	bl	128f0 <printf@plt>
   15148:	b	14d54 <test_type_aliases@@Base+0x134>
   1514c:	ldr	r1, [pc, #80]	; 151a4 <test_type_aliases@@Base+0x584>
   15150:	add	r3, r7, #964	; 0x3c4
   15154:	mov	r2, #237	; 0xed
   15158:	ldr	r0, [pc, #72]	; 151a8 <test_type_aliases@@Base+0x588>
   1515c:	add	r1, pc, r1
   15160:	add	r0, pc, r0
   15164:	bl	129e0 <__assert_fail@plt>
   15168:	strbtvs	r6, [r6], -r6, ror #12
   1516c:	andmi	r6, r2, r6, ror #12
   15170:	andsmi	r3, r3, r3, lsr r3
   15174:	andeq	r5, r2, r8, asr r3
   15178:	muleq	r1, r8, lr
   1517c:			; <UNDEFINED> instruction: 0xffffead8
   15180:	andeq	r0, r1, r8, ror #28
   15184:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   15188:	andeq	r0, r1, ip, lsr r9
   1518c:			; <UNDEFINED> instruction: 0x000109b4
   15190:	andeq	r0, r1, r8, ror #29
   15194:	andeq	pc, r0, r0, lsl #28
   15198:	andeq	r0, r0, r8, rrx
   1519c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   151a0:	andeq	r0, r1, r8, asr #21
   151a4:	muleq	r1, r8, r6
   151a8:	andeq	r0, r1, r4, ror #19

000151ac <test_empty_monster@@Base>:
   151ac:	strd	r4, [sp, #-20]!	; 0xffffffec
   151b0:	mov	r4, r0
   151b4:	strd	r6, [sp, #8]
   151b8:	str	lr, [sp, #16]
   151bc:	sub	sp, sp, #12
   151c0:	bl	1f250 <flatcc_builder_reset@@Base>
   151c4:	ldr	r1, [pc, #360]	; 15334 <test_empty_monster@@Base+0x188>
   151c8:	mov	r3, #0
   151cc:	mov	r0, r4
   151d0:	mov	r2, r3
   151d4:	ldr	r5, [pc, #348]	; 15338 <test_empty_monster@@Base+0x18c>
   151d8:	add	r1, pc, r1
   151dc:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   151e0:	mov	r1, #36	; 0x24
   151e4:	mov	r0, r4
   151e8:	bl	20a20 <flatcc_builder_start_table@@Base>
   151ec:	ldr	r1, [pc, #328]	; 1533c <test_empty_monster@@Base+0x190>
   151f0:	mov	r0, r4
   151f4:	add	r5, pc, r5
   151f8:	add	r1, pc, r1
   151fc:	bl	22388 <flatcc_builder_create_string_str@@Base>
   15200:	subs	r6, r0, #0
   15204:	beq	1521c <test_empty_monster@@Base+0x70>
   15208:	mov	r1, #3
   1520c:	mov	r0, r4
   15210:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   15214:	cmp	r0, #0
   15218:	strne	r6, [r0]
   1521c:	ldr	r1, [pc, #284]	; 15340 <test_empty_monster@@Base+0x194>
   15220:	mov	r2, #1
   15224:	mov	r0, r4
   15228:	add	r1, pc, r1
   1522c:	add	r1, r1, #1024	; 0x400
   15230:	add	r1, r1, #4
   15234:	bl	21358 <flatcc_builder_check_required@@Base>
   15238:	cmp	r0, #0
   1523c:	beq	15330 <test_empty_monster@@Base+0x184>
   15240:	mov	r0, r4
   15244:	bl	21404 <flatcc_builder_end_table@@Base>
   15248:	mov	r1, r0
   1524c:	mov	r0, r4
   15250:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   15254:	mov	r0, r4
   15258:	add	r1, sp, #4
   1525c:	bl	22e80 <flatcc_builder_finalize_aligned_buffer@@Base>
   15260:	ldr	r3, [pc, #220]	; 15344 <test_empty_monster@@Base+0x198>
   15264:	mov	r1, r0
   15268:	mov	r4, r0
   1526c:	ldr	r0, [pc, #212]	; 15348 <test_empty_monster@@Base+0x19c>
   15270:	ldr	r2, [sp, #4]
   15274:	ldr	r3, [r5, r3]
   15278:	add	r0, pc, r0
   1527c:	ldr	r3, [r3]
   15280:	bl	12cd8 <_start@@Base+0x11c>
   15284:	mov	r0, r4
   15288:	bl	14b38 <verify_empty_monster@@Base>
   1528c:	subs	r5, r0, #0
   15290:	beq	152b4 <test_empty_monster@@Base+0x108>
   15294:	mov	r0, r4
   15298:	bl	22fac <flatcc_builder_aligned_free@@Base>
   1529c:	mov	r0, r5
   152a0:	add	sp, sp, #12
   152a4:	ldrd	r4, [sp]
   152a8:	ldrd	r6, [sp, #8]
   152ac:	add	sp, sp, #16
   152b0:	pop	{pc}		; (ldr pc, [sp], #4)
   152b4:	ldr	r7, [pc, #144]	; 1534c <test_empty_monster@@Base+0x1a0>
   152b8:	mov	r0, r4
   152bc:	ldr	r6, [pc, #140]	; 15350 <test_empty_monster@@Base+0x1a4>
   152c0:	ldr	r1, [sp, #4]
   152c4:	add	r7, pc, r7
   152c8:	mov	r3, r7
   152cc:	add	r6, pc, r6
   152d0:	mov	r2, r6
   152d4:	bl	2457c <flatcc_verify_table_as_root@@Base>
   152d8:	subs	r5, r0, #0
   152dc:	bne	15314 <test_empty_monster@@Base+0x168>
   152e0:	ldr	r1, [sp, #4]
   152e4:	mov	r3, r7
   152e8:	mov	r2, r6
   152ec:	mov	r0, r4
   152f0:	sub	r1, r1, #1
   152f4:	bl	2457c <flatcc_verify_table_as_root@@Base>
   152f8:	cmp	r0, #0
   152fc:	bne	15294 <test_empty_monster@@Base+0xe8>
   15300:	ldr	r0, [pc, #76]	; 15354 <test_empty_monster@@Base+0x1a8>
   15304:	mvn	r5, #0
   15308:	add	r0, pc, r0
   1530c:	bl	12944 <puts@plt>
   15310:	b	1529c <test_empty_monster@@Base+0xf0>
   15314:	bl	235a8 <flatcc_verify_error_string@@Base>
   15318:	mov	r1, r0
   1531c:	ldr	r0, [pc, #52]	; 15358 <test_empty_monster@@Base+0x1ac>
   15320:	mvn	r5, #0
   15324:	add	r0, pc, r0
   15328:	bl	128f0 <printf@plt>
   1532c:	b	1529c <test_empty_monster@@Base+0xf0>
   15330:	bl	13668 <_start@@Base+0xaac>
   15334:	andeq	r0, r1, r4, ror #18
   15338:	andeq	r4, r2, r4, lsl #28
   1533c:	andeq	r0, r1, ip, ror #20
   15340:			; <UNDEFINED> instruction: 0x0000fcb8
   15344:	andeq	r0, r0, r8, rrx
   15348:	strdeq	r0, [r1], -r8
   1534c:			; <UNDEFINED> instruction: 0xffffe858
   15350:	andeq	r0, r1, r0, ror r8
   15354:	andeq	r0, r1, r4, lsr #19
   15358:	andeq	r0, r1, r0, ror #18

0001535c <test_typed_empty_monster@@Base>:
   1535c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15360:	mov	r4, #0
   15364:	mov	r5, r0
   15368:	strd	r6, [sp, #8]
   1536c:	strd	r8, [sp, #16]
   15370:	str	lr, [sp, #24]
   15374:	sub	sp, sp, #12
   15378:	ldr	r7, [pc, #832]	; 156c0 <test_typed_empty_monster@@Base+0x364>
   1537c:	str	r4, [sp, #4]
   15380:	bl	1f250 <flatcc_builder_reset@@Base>
   15384:	ldr	r1, [pc, #824]	; 156c4 <test_typed_empty_monster@@Base+0x368>
   15388:	mov	r3, r4
   1538c:	mov	r2, r4
   15390:	mov	r0, r5
   15394:	add	r7, pc, r7
   15398:	add	r1, pc, r1
   1539c:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   153a0:	mov	r1, #36	; 0x24
   153a4:	mov	r0, r5
   153a8:	bl	20a20 <flatcc_builder_start_table@@Base>
   153ac:	ldr	r1, [pc, #788]	; 156c8 <test_typed_empty_monster@@Base+0x36c>
   153b0:	mov	r0, r5
   153b4:	add	r1, pc, r1
   153b8:	bl	22388 <flatcc_builder_create_string_str@@Base>
   153bc:	subs	r4, r0, #0
   153c0:	beq	153d8 <test_typed_empty_monster@@Base+0x7c>
   153c4:	mov	r1, #3
   153c8:	mov	r0, r5
   153cc:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   153d0:	cmp	r0, #0
   153d4:	strne	r4, [r0]
   153d8:	ldr	r1, [pc, #748]	; 156cc <test_typed_empty_monster@@Base+0x370>
   153dc:	mov	r2, #1
   153e0:	mov	r0, r5
   153e4:	add	r1, pc, r1
   153e8:	add	r1, r1, #1024	; 0x400
   153ec:	add	r1, r1, #4
   153f0:	bl	21358 <flatcc_builder_check_required@@Base>
   153f4:	cmp	r0, #0
   153f8:	beq	156bc <test_typed_empty_monster@@Base+0x360>
   153fc:	mov	r0, r5
   15400:	movw	r4, #40389	; 0x9dc5
   15404:	movt	r4, #33052	; 0x811c
   15408:	bl	21404 <flatcc_builder_end_table@@Base>
   1540c:	mov	r1, r0
   15410:	mov	r0, r5
   15414:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   15418:	mov	r0, r5
   1541c:	mov	r1, sp
   15420:	ldr	r5, [pc, #680]	; 156d0 <test_typed_empty_monster@@Base+0x374>
   15424:	bl	22e80 <flatcc_builder_finalize_aligned_buffer@@Base>
   15428:	ldr	r3, [pc, #676]	; 156d4 <test_typed_empty_monster@@Base+0x378>
   1542c:	mov	r1, r0
   15430:	mov	r6, r0
   15434:	ldr	r0, [pc, #668]	; 156d8 <test_typed_empty_monster@@Base+0x37c>
   15438:	add	r5, pc, r5
   1543c:	add	r5, r5, #1
   15440:	ldr	r2, [sp]
   15444:	ldr	r3, [r7, r3]
   15448:	add	r0, pc, r0
   1544c:	ldr	r3, [r3]
   15450:	bl	12cd8 <_start@@Base+0x11c>
   15454:	movw	ip, #403	; 0x193
   15458:	movt	ip, #256	; 0x100
   1545c:	ldr	r1, [r6, #4]
   15460:	mov	r2, #121	; 0x79
   15464:	mov	r3, #77	; 0x4d
   15468:	mov	r0, r5
   1546c:	b	15478 <test_typed_empty_monster@@Base+0x11c>
   15470:	mov	r3, r2
   15474:	ldrb	r2, [r0, #1]!
   15478:	eor	r3, r3, r4
   1547c:	cmp	r2, #0
   15480:	mul	r4, ip, r3
   15484:	bne	15470 <test_typed_empty_monster@@Base+0x114>
   15488:	cmp	r4, #0
   1548c:	beq	155d8 <test_typed_empty_monster@@Base+0x27c>
   15490:	cmp	r4, r1
   15494:	bne	1564c <test_typed_empty_monster@@Base+0x2f0>
   15498:	movw	r3, #62593	; 0xf481
   1549c:	movt	r3, #13070	; 0x330e
   154a0:	cmp	r4, r3
   154a4:	bne	155e8 <test_typed_empty_monster@@Base+0x28c>
   154a8:	mov	r0, r6
   154ac:	bl	14b38 <verify_empty_monster@@Base>
   154b0:	cmp	r0, #0
   154b4:	beq	156a8 <test_typed_empty_monster@@Base+0x34c>
   154b8:	ldr	r8, [pc, #540]	; 156dc <test_typed_empty_monster@@Base+0x380>
   154bc:	mov	r0, r6
   154c0:	ldr	r9, [pc, #536]	; 156e0 <test_typed_empty_monster@@Base+0x384>
   154c4:	ldr	r1, [sp]
   154c8:	add	r8, pc, r8
   154cc:	mov	r3, r8
   154d0:	add	r9, pc, r9
   154d4:	mov	r2, r9
   154d8:	bl	2457c <flatcc_verify_table_as_root@@Base>
   154dc:	subs	r7, r0, #0
   154e0:	bne	15634 <test_typed_empty_monster@@Base+0x2d8>
   154e4:	mov	r2, r9
   154e8:	mov	r3, r8
   154ec:	ldr	r1, [sp]
   154f0:	mov	r0, r6
   154f4:	bl	2457c <flatcc_verify_table_as_root@@Base>
   154f8:	subs	r7, r0, #0
   154fc:	bne	1561c <test_typed_empty_monster@@Base+0x2c0>
   15500:	mov	r3, r8
   15504:	mov	r2, r4
   15508:	ldr	r1, [sp]
   1550c:	mov	r0, r6
   15510:	bl	2468c <flatcc_verify_table_as_typed_root@@Base>
   15514:	subs	r7, r0, #0
   15518:	bne	15678 <test_typed_empty_monster@@Base+0x31c>
   1551c:	movw	r2, #40389	; 0x9dc5
   15520:	movt	r2, #33052	; 0x811c
   15524:	ldr	r1, [sp]
   15528:	movw	ip, #403	; 0x193
   1552c:	movt	ip, #256	; 0x100
   15530:	mov	r3, #121	; 0x79
   15534:	mov	r0, #77	; 0x4d
   15538:	b	15544 <test_typed_empty_monster@@Base+0x1e8>
   1553c:	mov	r0, r3
   15540:	ldrb	r3, [r5, #1]!
   15544:	eor	r2, r2, r0
   15548:	cmp	r3, #0
   1554c:	mul	r2, ip, r2
   15550:	bne	1553c <test_typed_empty_monster@@Base+0x1e0>
   15554:	ldr	r4, [pc, #392]	; 156e4 <test_typed_empty_monster@@Base+0x388>
   15558:	cmp	r2, #0
   1555c:	movw	r3, #40389	; 0x9dc5
   15560:	movt	r3, #33052	; 0x811c
   15564:	mov	r0, r6
   15568:	moveq	r2, r3
   1556c:	add	r4, pc, r4
   15570:	mov	r3, r4
   15574:	bl	2468c <flatcc_verify_table_as_typed_root@@Base>
   15578:	subs	r7, r0, #0
   1557c:	bne	15660 <test_typed_empty_monster@@Base+0x304>
   15580:	movw	ip, #62593	; 0xf481
   15584:	movt	ip, #13070	; 0x330e
   15588:	ldr	r1, [sp]
   1558c:	mov	r3, r4
   15590:	add	r2, sp, #4
   15594:	mov	r0, r6
   15598:	str	ip, [sp, #4]
   1559c:	bl	2457c <flatcc_verify_table_as_root@@Base>
   155a0:	subs	r7, r0, #0
   155a4:	bne	15690 <test_typed_empty_monster@@Base+0x334>
   155a8:	ldr	r2, [pc, #312]	; 156e8 <test_typed_empty_monster@@Base+0x38c>
   155ac:	mov	r3, r4
   155b0:	mov	r0, r6
   155b4:	ldr	r1, [sp]
   155b8:	add	r2, pc, r2
   155bc:	bl	2457c <flatcc_verify_table_as_root@@Base>
   155c0:	cmp	r0, #0
   155c4:	bne	155f8 <test_typed_empty_monster@@Base+0x29c>
   155c8:	ldr	r0, [pc, #284]	; 156ec <test_typed_empty_monster@@Base+0x390>
   155cc:	add	r0, pc, r0
   155d0:	bl	12944 <puts@plt>
   155d4:	b	155f8 <test_typed_empty_monster@@Base+0x29c>
   155d8:	movw	r3, #40389	; 0x9dc5
   155dc:	movt	r3, #33052	; 0x811c
   155e0:	cmp	r1, r3
   155e4:	bne	1564c <test_typed_empty_monster@@Base+0x2f0>
   155e8:	ldr	r0, [pc, #256]	; 156f0 <test_typed_empty_monster@@Base+0x394>
   155ec:	mvn	r7, #0
   155f0:	add	r0, pc, r0
   155f4:	bl	12944 <puts@plt>
   155f8:	mov	r0, r6
   155fc:	bl	22fac <flatcc_builder_aligned_free@@Base>
   15600:	mov	r0, r7
   15604:	add	sp, sp, #12
   15608:	ldrd	r4, [sp]
   1560c:	ldrd	r6, [sp, #8]
   15610:	ldrd	r8, [sp, #16]
   15614:	add	sp, sp, #24
   15618:	pop	{pc}		; (ldr pc, [sp], #4)
   1561c:	bl	235a8 <flatcc_verify_error_string@@Base>
   15620:	mov	r1, r0
   15624:	ldr	r0, [pc, #200]	; 156f4 <test_typed_empty_monster@@Base+0x398>
   15628:	add	r0, pc, r0
   1562c:	bl	128f0 <printf@plt>
   15630:	b	155f8 <test_typed_empty_monster@@Base+0x29c>
   15634:	bl	235a8 <flatcc_verify_error_string@@Base>
   15638:	mov	r1, r0
   1563c:	ldr	r0, [pc, #180]	; 156f8 <test_typed_empty_monster@@Base+0x39c>
   15640:	add	r0, pc, r0
   15644:	bl	128f0 <printf@plt>
   15648:	b	155f8 <test_typed_empty_monster@@Base+0x29c>
   1564c:	ldr	r0, [pc, #168]	; 156fc <test_typed_empty_monster@@Base+0x3a0>
   15650:	mvn	r7, #0
   15654:	add	r0, pc, r0
   15658:	bl	128f0 <printf@plt>
   1565c:	b	155f8 <test_typed_empty_monster@@Base+0x29c>
   15660:	bl	235a8 <flatcc_verify_error_string@@Base>
   15664:	mov	r1, r0
   15668:	ldr	r0, [pc, #144]	; 15700 <test_typed_empty_monster@@Base+0x3a4>
   1566c:	add	r0, pc, r0
   15670:	bl	128f0 <printf@plt>
   15674:	b	155f8 <test_typed_empty_monster@@Base+0x29c>
   15678:	bl	235a8 <flatcc_verify_error_string@@Base>
   1567c:	mov	r1, r0
   15680:	ldr	r0, [pc, #124]	; 15704 <test_typed_empty_monster@@Base+0x3a8>
   15684:	add	r0, pc, r0
   15688:	bl	128f0 <printf@plt>
   1568c:	b	155f8 <test_typed_empty_monster@@Base+0x29c>
   15690:	bl	235a8 <flatcc_verify_error_string@@Base>
   15694:	mov	r1, r0
   15698:	ldr	r0, [pc, #104]	; 15708 <test_typed_empty_monster@@Base+0x3ac>
   1569c:	add	r0, pc, r0
   156a0:	bl	128f0 <printf@plt>
   156a4:	b	155f8 <test_typed_empty_monster@@Base+0x29c>
   156a8:	ldr	r0, [pc, #92]	; 1570c <test_typed_empty_monster@@Base+0x3b0>
   156ac:	mvn	r7, #0
   156b0:	add	r0, pc, r0
   156b4:	bl	12944 <puts@plt>
   156b8:	b	155f8 <test_typed_empty_monster@@Base+0x29c>
   156bc:	bl	13668 <_start@@Base+0xaac>
   156c0:	andeq	r4, r2, r4, ror #24
   156c4:	andeq	r0, r1, r4, asr #18
   156c8:			; <UNDEFINED> instruction: 0x000108b0
   156cc:	strdeq	pc, [r0], -ip
   156d0:	andeq	r0, r1, r8, asr #17
   156d4:	andeq	r0, r0, r8, rrx
   156d8:	muleq	r1, ip, r8
   156dc:			; <UNDEFINED> instruction: 0xffffe654
   156e0:	andeq	r0, r1, ip, lsl #16
   156e4:			; <UNDEFINED> instruction: 0xffffe5b0
   156e8:	andeq	r0, r1, r4, lsl #11
   156ec:	muleq	r1, r0, r8
   156f0:	andeq	r0, r1, ip, asr r7
   156f4:	andeq	r0, r1, ip, lsl #15
   156f8:	andeq	r0, r1, r4, ror r7
   156fc:	andeq	r0, r1, r4, asr #13
   15700:			; <UNDEFINED> instruction: 0x000107b0
   15704:	andeq	r0, r1, r0, ror #14
   15708:	andeq	r0, r1, r8, lsl r7
   1570c:	andeq	r0, r1, r4, asr #13

00015710 <verify_table_with_emptystruct@@Base>:
   15710:	cmp	r0, #0
   15714:	str	r4, [sp, #-8]!
   15718:	str	lr, [sp, #4]
   1571c:	beq	15734 <verify_table_with_emptystruct@@Base+0x24>
   15720:	ldr	r2, [r0, #4]
   15724:	movw	r3, #20301	; 0x4f4d
   15728:	movt	r3, #21326	; 0x534e
   1572c:	cmp	r2, r3
   15730:	beq	15750 <verify_table_with_emptystruct@@Base+0x40>
   15734:	ldr	r0, [pc, #96]	; 1579c <verify_table_with_emptystruct@@Base+0x8c>
   15738:	add	r0, pc, r0
   1573c:	bl	12944 <puts@plt>
   15740:	mvn	r0, #0
   15744:	ldr	r4, [sp]
   15748:	add	sp, sp, #4
   1574c:	pop	{pc}		; (ldr pc, [sp], #4)
   15750:	ldr	r3, [r0]
   15754:	adds	r2, r0, r3
   15758:	beq	15734 <verify_table_with_emptystruct@@Base+0x24>
   1575c:	ldr	r3, [r0, r3]
   15760:	sub	r3, r2, r3
   15764:	ldrh	r1, [r3]
   15768:	cmp	r1, #5
   1576c:	bls	15788 <verify_table_with_emptystruct@@Base+0x78>
   15770:	ldrh	r3, [r3, #4]
   15774:	cmp	r3, #0
   15778:	beq	15788 <verify_table_with_emptystruct@@Base+0x78>
   1577c:	cmn	r2, r3
   15780:	movne	r0, #0
   15784:	bne	15744 <verify_table_with_emptystruct@@Base+0x34>
   15788:	ldr	r0, [pc, #16]	; 157a0 <verify_table_with_emptystruct@@Base+0x90>
   1578c:	add	r0, pc, r0
   15790:	bl	12944 <puts@plt>
   15794:	mvn	r0, #0
   15798:	b	15744 <verify_table_with_emptystruct@@Base+0x34>
   1579c:	andeq	r0, r1, r0, ror r7
   157a0:	andeq	r0, r1, r4, asr #14

000157a4 <test_table_with_emptystruct@@Base>:
   157a4:	strd	r4, [sp, #-20]!	; 0xffffffec
   157a8:	mov	r4, r0
   157ac:	strd	r6, [sp, #8]
   157b0:	str	lr, [sp, #16]
   157b4:	sub	sp, sp, #12
   157b8:	bl	1f250 <flatcc_builder_reset@@Base>
   157bc:	ldr	r1, [pc, #268]	; 158d0 <test_table_with_emptystruct@@Base+0x12c>
   157c0:	mov	r3, #0
   157c4:	mov	r0, r4
   157c8:	mov	r2, r3
   157cc:	ldr	r5, [pc, #256]	; 158d4 <test_table_with_emptystruct@@Base+0x130>
   157d0:	add	r1, pc, r1
   157d4:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   157d8:	subs	r6, r0, #0
   157dc:	add	r5, pc, r5
   157e0:	beq	15840 <test_table_with_emptystruct@@Base+0x9c>
   157e4:	add	r1, sp, #4
   157e8:	mov	r0, r4
   157ec:	bl	22e80 <flatcc_builder_finalize_aligned_buffer@@Base>
   157f0:	ldr	r3, [pc, #224]	; 158d8 <test_table_with_emptystruct@@Base+0x134>
   157f4:	mov	r1, r0
   157f8:	mov	r4, r0
   157fc:	ldr	r0, [pc, #216]	; 158dc <test_table_with_emptystruct@@Base+0x138>
   15800:	ldr	r2, [sp, #4]
   15804:	ldr	r3, [r5, r3]
   15808:	add	r0, pc, r0
   1580c:	ldr	r3, [r3]
   15810:	bl	12cd8 <_start@@Base+0x11c>
   15814:	mov	r0, r4
   15818:	bl	15710 <verify_table_with_emptystruct@@Base>
   1581c:	mov	r5, r0
   15820:	mov	r0, r4
   15824:	bl	22fac <flatcc_builder_aligned_free@@Base>
   15828:	mov	r0, r5
   1582c:	add	sp, sp, #12
   15830:	ldrd	r4, [sp]
   15834:	ldrd	r6, [sp, #8]
   15838:	add	sp, sp, #16
   1583c:	pop	{pc}		; (ldr pc, [sp], #4)
   15840:	mov	r1, #1
   15844:	mov	r0, r4
   15848:	bl	20a20 <flatcc_builder_start_table@@Base>
   1584c:	subs	r7, r0, #0
   15850:	bne	158a0 <test_table_with_emptystruct@@Base+0xfc>
   15854:	mov	r3, #1
   15858:	mov	r2, r7
   1585c:	mov	r1, r7
   15860:	mov	r0, r4
   15864:	bl	22554 <flatcc_builder_table_add@@Base>
   15868:	cmp	r0, #0
   1586c:	beq	158a0 <test_table_with_emptystruct@@Base+0xfc>
   15870:	ldr	r6, [pc, #104]	; 158e0 <test_table_with_emptystruct@@Base+0x13c>
   15874:	mov	r2, r7
   15878:	mov	r0, r4
   1587c:	add	r6, pc, r6
   15880:	add	r1, r6, #1024	; 0x400
   15884:	add	r1, r1, #8
   15888:	bl	21358 <flatcc_builder_check_required@@Base>
   1588c:	cmp	r0, #0
   15890:	beq	158b0 <test_table_with_emptystruct@@Base+0x10c>
   15894:	mov	r0, r4
   15898:	bl	21404 <flatcc_builder_end_table@@Base>
   1589c:	mov	r6, r0
   158a0:	mov	r1, r6
   158a4:	mov	r0, r4
   158a8:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   158ac:	b	157e4 <test_table_with_emptystruct@@Base+0x40>
   158b0:	ldr	r1, [pc, #44]	; 158e4 <test_table_with_emptystruct@@Base+0x140>
   158b4:	add	r3, r6, #1024	; 0x400
   158b8:	mov	r2, #215	; 0xd7
   158bc:	add	r3, r3, #12
   158c0:	ldr	r0, [pc, #32]	; 158e8 <test_table_with_emptystruct@@Base+0x144>
   158c4:	add	r1, pc, r1
   158c8:	add	r0, pc, r0
   158cc:	bl	129e0 <__assert_fail@plt>
   158d0:	andeq	r0, r1, ip, ror #6
   158d4:	andeq	r4, r2, ip, lsl r8
   158d8:	andeq	r0, r0, r8, rrx
   158dc:	andeq	r0, r1, r4, lsr #15
   158e0:	andeq	pc, r0, r4, ror #12
   158e4:	andeq	pc, r0, r0, lsr pc	; <UNPREDICTABLE>
   158e8:	andeq	r0, r1, r4, lsr #12

000158ec <test_typed_table_with_emptystruct@@Base>:
   158ec:	strd	r4, [sp, #-20]!	; 0xffffffec
   158f0:	mov	r4, r0
   158f4:	strd	r6, [sp, #8]
   158f8:	str	lr, [sp, #16]
   158fc:	sub	sp, sp, #12
   15900:	bl	1f250 <flatcc_builder_reset@@Base>
   15904:	ldr	r1, [pc, #500]	; 15b00 <test_typed_table_with_emptystruct@@Base+0x214>
   15908:	mov	r3, #0
   1590c:	mov	r0, r4
   15910:	mov	r2, r3
   15914:	ldr	r6, [pc, #488]	; 15b04 <test_typed_table_with_emptystruct@@Base+0x218>
   15918:	add	r1, pc, r1
   1591c:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   15920:	subs	r5, r0, #0
   15924:	add	r6, pc, r6
   15928:	beq	15a00 <test_typed_table_with_emptystruct@@Base+0x114>
   1592c:	mov	r0, r4
   15930:	add	r1, sp, #4
   15934:	ldr	r5, [pc, #460]	; 15b08 <test_typed_table_with_emptystruct@@Base+0x21c>
   15938:	bl	22d14 <flatcc_builder_get_direct_buffer@@Base>
   1593c:	ldr	r3, [pc, #456]	; 15b0c <test_typed_table_with_emptystruct@@Base+0x220>
   15940:	mov	r1, r0
   15944:	mov	r4, r0
   15948:	ldr	r7, [pc, #448]	; 15b10 <test_typed_table_with_emptystruct@@Base+0x224>
   1594c:	add	r5, pc, r5
   15950:	ldr	r0, [pc, #444]	; 15b14 <test_typed_table_with_emptystruct@@Base+0x228>
   15954:	ldr	r3, [r6, r3]
   15958:	add	r7, pc, r7
   1595c:	ldr	r2, [sp, #4]
   15960:	add	r0, pc, r0
   15964:	ldr	r3, [r3]
   15968:	bl	12cd8 <_start@@Base+0x11c>
   1596c:	mov	r0, r4
   15970:	mov	r3, r5
   15974:	ldr	r1, [sp, #4]
   15978:	mov	r2, r7
   1597c:	bl	2457c <flatcc_verify_table_as_root@@Base>
   15980:	cmp	r0, #0
   15984:	bne	15a90 <test_typed_table_with_emptystruct@@Base+0x1a4>
   15988:	mov	r2, r7
   1598c:	mov	r3, r5
   15990:	ldr	r1, [sp, #4]
   15994:	mov	r0, r4
   15998:	bl	2457c <flatcc_verify_table_as_root@@Base>
   1599c:	cmp	r0, #0
   159a0:	bne	15aa4 <test_typed_table_with_emptystruct@@Base+0x1b8>
   159a4:	movw	r6, #14262	; 0x37b6
   159a8:	movt	r6, #45277	; 0xb0dd
   159ac:	ldr	r1, [sp, #4]
   159b0:	mov	r3, r5
   159b4:	mov	r2, r6
   159b8:	mov	r0, r4
   159bc:	bl	2468c <flatcc_verify_table_as_typed_root@@Base>
   159c0:	cmp	r0, #0
   159c4:	bne	15ab8 <test_typed_table_with_emptystruct@@Base+0x1cc>
   159c8:	cmp	r4, #0
   159cc:	beq	15acc <test_typed_table_with_emptystruct@@Base+0x1e0>
   159d0:	ldr	r3, [r4, #4]
   159d4:	cmp	r3, r6
   159d8:	beq	15a70 <test_typed_table_with_emptystruct@@Base+0x184>
   159dc:	ldr	r0, [pc, #308]	; 15b18 <test_typed_table_with_emptystruct@@Base+0x22c>
   159e0:	add	r0, pc, r0
   159e4:	bl	12944 <puts@plt>
   159e8:	mvn	r0, #0
   159ec:	add	sp, sp, #12
   159f0:	ldrd	r4, [sp]
   159f4:	ldrd	r6, [sp, #8]
   159f8:	add	sp, sp, #16
   159fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15a00:	mov	r1, #1
   15a04:	mov	r0, r4
   15a08:	bl	20a20 <flatcc_builder_start_table@@Base>
   15a0c:	subs	r7, r0, #0
   15a10:	bne	15a60 <test_typed_table_with_emptystruct@@Base+0x174>
   15a14:	mov	r3, #1
   15a18:	mov	r2, r7
   15a1c:	mov	r1, r7
   15a20:	mov	r0, r4
   15a24:	bl	22554 <flatcc_builder_table_add@@Base>
   15a28:	cmp	r0, #0
   15a2c:	beq	15a60 <test_typed_table_with_emptystruct@@Base+0x174>
   15a30:	ldr	r5, [pc, #228]	; 15b1c <test_typed_table_with_emptystruct@@Base+0x230>
   15a34:	mov	r2, r7
   15a38:	mov	r0, r4
   15a3c:	add	r5, pc, r5
   15a40:	add	r1, r5, #1024	; 0x400
   15a44:	add	r1, r1, #8
   15a48:	bl	21358 <flatcc_builder_check_required@@Base>
   15a4c:	cmp	r0, #0
   15a50:	beq	15ae0 <test_typed_table_with_emptystruct@@Base+0x1f4>
   15a54:	mov	r0, r4
   15a58:	bl	21404 <flatcc_builder_end_table@@Base>
   15a5c:	mov	r5, r0
   15a60:	mov	r1, r5
   15a64:	mov	r0, r4
   15a68:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   15a6c:	b	1592c <test_typed_table_with_emptystruct@@Base+0x40>
   15a70:	ldr	r3, [r4]
   15a74:	cmn	r4, r3
   15a78:	bne	159ec <test_typed_table_with_emptystruct@@Base+0x100>
   15a7c:	ldr	r0, [pc, #156]	; 15b20 <test_typed_table_with_emptystruct@@Base+0x234>
   15a80:	add	r0, pc, r0
   15a84:	bl	12944 <puts@plt>
   15a88:	mvn	r0, #0
   15a8c:	b	159ec <test_typed_table_with_emptystruct@@Base+0x100>
   15a90:	ldr	r0, [pc, #140]	; 15b24 <test_typed_table_with_emptystruct@@Base+0x238>
   15a94:	add	r0, pc, r0
   15a98:	bl	12944 <puts@plt>
   15a9c:	mvn	r0, #0
   15aa0:	b	159ec <test_typed_table_with_emptystruct@@Base+0x100>
   15aa4:	ldr	r0, [pc, #124]	; 15b28 <test_typed_table_with_emptystruct@@Base+0x23c>
   15aa8:	add	r0, pc, r0
   15aac:	bl	12944 <puts@plt>
   15ab0:	mvn	r0, #0
   15ab4:	b	159ec <test_typed_table_with_emptystruct@@Base+0x100>
   15ab8:	ldr	r0, [pc, #108]	; 15b2c <test_typed_table_with_emptystruct@@Base+0x240>
   15abc:	add	r0, pc, r0
   15ac0:	bl	12944 <puts@plt>
   15ac4:	mvn	r0, #0
   15ac8:	b	159ec <test_typed_table_with_emptystruct@@Base+0x100>
   15acc:	ldr	r0, [pc, #92]	; 15b30 <test_typed_table_with_emptystruct@@Base+0x244>
   15ad0:	add	r0, pc, r0
   15ad4:	bl	12944 <puts@plt>
   15ad8:	mvn	r0, #0
   15adc:	b	159ec <test_typed_table_with_emptystruct@@Base+0x100>
   15ae0:	ldr	r1, [pc, #76]	; 15b34 <test_typed_table_with_emptystruct@@Base+0x248>
   15ae4:	add	r3, r5, #1024	; 0x400
   15ae8:	mov	r2, #215	; 0xd7
   15aec:	add	r3, r3, #12
   15af0:	ldr	r0, [pc, #64]	; 15b38 <test_typed_table_with_emptystruct@@Base+0x24c>
   15af4:	add	r1, pc, r1
   15af8:	add	r0, pc, r0
   15afc:	bl	129e0 <__assert_fail@plt>
   15b00:	andeq	r0, r1, ip, lsr #13
   15b04:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   15b08:			; <UNDEFINED> instruction: 0xffffd374
   15b0c:	andeq	r0, r0, r8, rrx
   15b10:	andeq	r0, r1, ip, ror #12
   15b14:	andeq	r0, r1, ip, ror #12
   15b18:	andeq	r0, r1, r8, lsl #13
   15b1c:	andeq	pc, r0, r4, lsr #9
   15b20:	strdeq	r0, [r1], -r8
   15b24:	andeq	r0, r1, r8, asr r5
   15b28:	andeq	r0, r1, r4, ror #10
   15b2c:	andeq	r0, r1, ip, ror #10
   15b30:	andeq	r0, r1, r0, lsl #11
   15b34:	andeq	pc, r0, r0, lsl #26
   15b38:	strdeq	r0, [r1], -r4

00015b3c <verify_monster@@Base>:
   15b3c:	ldr	r2, [pc, #800]	; 15e64 <verify_monster@@Base+0x328>
   15b40:	movw	r1, #1092	; 0x444
   15b44:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15b48:	ldr	r5, [r0, #4]
   15b4c:	strd	r6, [sp, #8]
   15b50:	strd	r8, [sp, #16]
   15b54:	mov	r9, r0
   15b58:	add	r2, pc, r2
   15b5c:	strd	sl, [sp, #24]
   15b60:	add	r3, r2, #1088	; 0x440
   15b64:	add	ip, r2, #1072	; 0x430
   15b68:	ldrd	r0, [r1, r2]
   15b6c:	add	r3, r3, #4
   15b70:	str	lr, [sp, #32]
   15b74:	sub	sp, sp, #92	; 0x5c
   15b78:	ldrd	r2, [r3, #8]
   15b7c:	add	r4, sp, #12
   15b80:	add	r8, sp, #28
   15b84:	movw	lr, #20301	; 0x4f4d
   15b88:	movt	lr, #21326	; 0x534e
   15b8c:	ldrd	r6, [ip]
   15b90:	cmp	r5, lr
   15b94:	strd	r0, [sp, #12]
   15b98:	ldrd	r0, [ip, #8]
   15b9c:	strd	r2, [r4, #8]
   15ba0:	ldr	r3, [ip, #16]
   15ba4:	strd	r6, [sp, #28]
   15ba8:	strd	r0, [r8, #8]
   15bac:	str	r3, [r8, #16]
   15bb0:	beq	15be0 <verify_monster@@Base+0xa4>
   15bb4:	ldr	r0, [pc, #684]	; 15e68 <verify_monster@@Base+0x32c>
   15bb8:	add	r0, pc, r0
   15bbc:	bl	12944 <puts@plt>
   15bc0:	mvn	r0, #0
   15bc4:	add	sp, sp, #92	; 0x5c
   15bc8:	ldrd	r4, [sp]
   15bcc:	ldrd	r6, [sp, #8]
   15bd0:	ldrd	r8, [sp, #16]
   15bd4:	ldrd	sl, [sp, #24]
   15bd8:	add	sp, sp, #32
   15bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   15be0:	ldr	r7, [r9]
   15be4:	adds	r5, r9, r7
   15be8:	beq	15cf4 <verify_monster@@Base+0x1b8>
   15bec:	ldr	r3, [r9, r7]
   15bf0:	sub	r3, r5, r3
   15bf4:	ldrh	r2, [r3]
   15bf8:	cmp	r2, #9
   15bfc:	bls	15e1c <verify_monster@@Base+0x2e0>
   15c00:	ldrh	r2, [r3, #8]
   15c04:	cmp	r2, #0
   15c08:	beq	15e1c <verify_monster@@Base+0x2e0>
   15c0c:	ldrsh	r2, [r5, r2]
   15c10:	cmp	r2, #80	; 0x50
   15c14:	bne	15e1c <verify_monster@@Base+0x2e0>
   15c18:	ldrh	r6, [r3, #4]
   15c1c:	cmp	r6, #0
   15c20:	beq	16594 <verify_monster@@Base+0xa58>
   15c24:	adds	r6, r5, r6
   15c28:	beq	16594 <verify_monster@@Base+0xa58>
   15c2c:	add	sl, sp, #63	; 0x3f
   15c30:	tst	r6, #15
   15c34:	bic	sl, sl, #15
   15c38:	bne	15d08 <verify_monster@@Base+0x1cc>
   15c3c:	vldr	s15, [pc, #532]	; 15e58 <verify_monster@@Base+0x31c>
   15c40:	vldr	s14, [r6, #8]
   15c44:	vcmp.f32	s14, s15
   15c48:	vmrs	APSR_nzcv, fpscr
   15c4c:	bne	16544 <verify_monster@@Base+0xa08>
   15c50:	vldr	s14, [pc, #516]	; 15e5c <verify_monster@@Base+0x320>
   15c54:	vldr	s13, [r6]
   15c58:	vcmp.f32	s13, s14
   15c5c:	vmrs	APSR_nzcv, fpscr
   15c60:	bne	16270 <verify_monster@@Base+0x734>
   15c64:	vldr	s13, [pc, #500]	; 15e60 <verify_monster@@Base+0x324>
   15c68:	vldr	s12, [r6, #4]
   15c6c:	vcmp.f32	s12, s13
   15c70:	vmrs	APSR_nzcv, fpscr
   15c74:	bne	16270 <verify_monster@@Base+0x734>
   15c78:	vldr	d5, [r6, #16]
   15c7c:	mov	r3, #0
   15c80:	vstr	s14, [sl]
   15c84:	ldrb	r1, [r6, #24]
   15c88:	vstr	s13, [sl, #4]
   15c8c:	ldrb	r2, [r6, #28]
   15c90:	str	r3, [sl, #12]
   15c94:	vcmp.f64	d5, #0.0
   15c98:	str	r3, [sl, #24]
   15c9c:	str	r3, [sl, #28]
   15ca0:	ldrh	r3, [r6, #26]
   15ca4:	vstr	s15, [sl, #8]
   15ca8:	vstr	d5, [sl, #16]
   15cac:	strb	r1, [sl, #24]
   15cb0:	vmrs	APSR_nzcv, fpscr
   15cb4:	strh	r3, [sl, #26]
   15cb8:	strb	r2, [sl, #28]
   15cbc:	bne	15ce0 <verify_monster@@Base+0x1a4>
   15cc0:	ldr	r3, [pc, #420]	; 15e6c <verify_monster@@Base+0x330>
   15cc4:	ldrb	r0, [r6, #26]
   15cc8:	add	r3, pc, r3
   15ccc:	ldrb	r1, [r3, #1108]	; 0x454
   15cd0:	add	r3, r3, #1104	; 0x450
   15cd4:	add	r3, r3, #4
   15cd8:	cmp	r0, r1
   15cdc:	beq	15d18 <verify_monster@@Base+0x1dc>
   15ce0:	ldr	r0, [pc, #392]	; 15e70 <verify_monster@@Base+0x334>
   15ce4:	add	r0, pc, r0
   15ce8:	bl	12944 <puts@plt>
   15cec:	mvn	r0, #0
   15cf0:	b	15bc4 <verify_monster@@Base+0x88>
   15cf4:	ldr	r0, [pc, #376]	; 15e74 <verify_monster@@Base+0x338>
   15cf8:	add	r0, pc, r0
   15cfc:	bl	12944 <puts@plt>
   15d00:	mvn	r0, #0
   15d04:	b	15bc4 <verify_monster@@Base+0x88>
   15d08:	ldr	r0, [pc, #360]	; 15e78 <verify_monster@@Base+0x33c>
   15d0c:	add	r0, pc, r0
   15d10:	bl	12944 <puts@plt>
   15d14:	b	15c3c <verify_monster@@Base+0x100>
   15d18:	ldrb	r1, [r6, #27]
   15d1c:	add	r0, r3, #1
   15d20:	ldrb	r3, [r3, #1]
   15d24:	cmp	r1, r3
   15d28:	bne	15ce0 <verify_monster@@Base+0x1a4>
   15d2c:	ldrb	r3, [r0, #1]!
   15d30:	cmp	r2, r3
   15d34:	bne	15ce0 <verify_monster@@Base+0x1a4>
   15d38:	ldrb	r2, [r6, #29]
   15d3c:	ldrb	r3, [r0, #1]
   15d40:	cmp	r2, r3
   15d44:	bne	15ce0 <verify_monster@@Base+0x1a4>
   15d48:	mov	r0, r5
   15d4c:	bl	132e0 <_start@@Base+0x724>
   15d50:	subs	r6, r0, #0
   15d54:	beq	16484 <verify_monster@@Base+0x948>
   15d58:	ldr	r1, [pc, #284]	; 15e7c <verify_monster@@Base+0x340>
   15d5c:	add	r1, pc, r1
   15d60:	bl	128e4 <strcmp@plt>
   15d64:	cmp	r0, #0
   15d68:	bne	16484 <verify_monster@@Base+0x948>
   15d6c:	ldr	r3, [r6, #-4]
   15d70:	cmp	r3, #9
   15d74:	bne	16298 <verify_monster@@Base+0x75c>
   15d78:	ldr	r6, [r9, r7]
   15d7c:	sub	r6, r5, r6
   15d80:	ldrh	r7, [r6]
   15d84:	cmp	r7, #17
   15d88:	bls	1645c <verify_monster@@Base+0x920>
   15d8c:	ldrh	r3, [r6, #16]
   15d90:	cmp	r3, #0
   15d94:	beq	1645c <verify_monster@@Base+0x920>
   15d98:	ldrsb	r3, [r5, r3]
   15d9c:	cmp	r3, #2
   15da0:	bne	1645c <verify_monster@@Base+0x920>
   15da4:	ldrh	r3, [r6, #14]
   15da8:	cmp	r3, #0
   15dac:	beq	15e30 <verify_monster@@Base+0x2f4>
   15db0:	ldr	r2, [r5, r3]
   15db4:	add	r3, r5, r3
   15db8:	add	r2, r2, #4
   15dbc:	adds	r3, r3, r2
   15dc0:	beq	15e30 <verify_monster@@Base+0x2f4>
   15dc4:	ldr	r2, [r3, #-4]
   15dc8:	cmp	r2, #10
   15dcc:	subeq	r3, r3, #1
   15dd0:	moveq	r1, #0
   15dd4:	bne	15e30 <verify_monster@@Base+0x2f4>
   15dd8:	ldrb	r2, [r3, #1]!
   15ddc:	cmp	r2, r1
   15de0:	bne	15e44 <verify_monster@@Base+0x308>
   15de4:	add	r1, r1, #1
   15de8:	cmp	r1, #10
   15dec:	bne	15dd8 <verify_monster@@Base+0x29c>
   15df0:	ldrh	r1, [r6, #6]
   15df4:	cmp	r1, #0
   15df8:	beq	15f68 <verify_monster@@Base+0x42c>
   15dfc:	ldrsh	r3, [r5, r1]
   15e00:	cmp	r3, #150	; 0x96
   15e04:	bne	16498 <verify_monster@@Base+0x95c>
   15e08:	ldr	r0, [pc, #112]	; 15e80 <verify_monster@@Base+0x344>
   15e0c:	add	r0, pc, r0
   15e10:	bl	12944 <puts@plt>
   15e14:	mvn	r0, #0
   15e18:	b	15bc4 <verify_monster@@Base+0x88>
   15e1c:	ldr	r0, [pc, #96]	; 15e84 <verify_monster@@Base+0x348>
   15e20:	add	r0, pc, r0
   15e24:	bl	12944 <puts@plt>
   15e28:	mvn	r0, #0
   15e2c:	b	15bc4 <verify_monster@@Base+0x88>
   15e30:	ldr	r0, [pc, #80]	; 15e88 <verify_monster@@Base+0x34c>
   15e34:	add	r0, pc, r0
   15e38:	bl	12944 <puts@plt>
   15e3c:	mvn	r0, #0
   15e40:	b	15bc4 <verify_monster@@Base+0x88>
   15e44:	ldr	r0, [pc, #64]	; 15e8c <verify_monster@@Base+0x350>
   15e48:	add	r0, pc, r0
   15e4c:	bl	128f0 <printf@plt>
   15e50:	mvn	r0, #0
   15e54:	b	15bc4 <verify_monster@@Base+0x88>
   15e58:	subgt	ip, ip, sp, asr #25
   15e5c:	svccc	0x00800000
   15e60:	andmi	r0, r0, r0
   15e64:	andeq	pc, r0, r8, lsl #7
   15e68:	strdeq	r0, [r1], -r8
   15e6c:	andeq	pc, r0, r8, lsl r2	; <UNPREDICTABLE>
   15e70:	andeq	r0, r1, r0, ror r4
   15e74:	andeq	pc, r0, ip, asr #27
   15e78:	andeq	r0, r1, r4, ror #7
   15e7c:	andeq	pc, r0, r8, lsl #30
   15e80:	andeq	r0, r1, r4, ror #17
   15e84:			; <UNDEFINED> instruction: 0x0000fcbc
   15e88:	muleq	r1, r4, r3
   15e8c:	muleq	r1, ip, r3
   15e90:	andeq	r0, r1, r4, ror #5
   15e94:	strdeq	r0, [r1], -r8
   15e98:	strdeq	r0, [r1], -ip
   15e9c:	andeq	r0, r1, r4, lsr r2
   15ea0:	andeq	r0, r1, r4, lsl #6
   15ea4:	andeq	r0, r1, r4, lsl #6
   15ea8:	andeq	r0, r1, r8, lsr #32
   15eac:	andeq	r0, r1, r4, rrx
   15eb0:	andeq	r0, r1, ip, asr #4
   15eb4:	andeq	r0, r1, r4, lsl r0
   15eb8:	andeq	r0, r1, r0
   15ebc:	andeq	pc, r0, r8, asr #29
   15ec0:	andeq	r0, r1, r8, asr #4
   15ec4:	strdeq	pc, [r0], -r0
   15ec8:	andeq	r0, r1, r4, asr #4
   15ecc:	andeq	r0, r1, r8, asr #4
   15ed0:	andeq	pc, r0, r8, asr #31
   15ed4:	andeq	r0, r1, r0, asr #4
   15ed8:	strdeq	pc, [r0], -ip
   15edc:	andeq	r0, r1, r8, asr r2
   15ee0:	andeq	pc, r0, r8, asr #26
   15ee4:	ldrdeq	r0, [r1], -r4
   15ee8:	strdeq	pc, [r0], -r0
   15eec:	andeq	pc, r0, r8, ror #26
   15ef0:	strheq	r0, [r1], -r8
   15ef4:	andeq	r0, r1, r4, lsr #3
   15ef8:	ldrdeq	pc, [r0], -r0
   15efc:	andeq	pc, r0, r4, lsr #11
   15f00:	andeq	pc, r0, r8, lsr #25
   15f04:	andeq	pc, r0, ip, lsr #27
   15f08:	andeq	pc, r0, r4, asr #22
   15f0c:	andeq	pc, r0, ip, lsr #29
   15f10:	andeq	pc, r0, ip, ror #28
   15f14:	andeq	pc, r0, r0, lsr lr	; <UNPREDICTABLE>
   15f18:	strdeq	pc, [r0], -r4
   15f1c:			; <UNDEFINED> instruction: 0x0000fdb4
   15f20:	andeq	pc, r0, ip, ror #26
   15f24:	andeq	pc, r0, r8, lsr #26
   15f28:	andeq	pc, r0, r4, asr #25
   15f2c:	andeq	pc, r0, ip, asr #30
   15f30:	muleq	r0, r8, lr
   15f34:	andeq	r0, r1, r8, lsr #32
   15f38:	andeq	pc, r0, r4, lsl lr	; <UNPREDICTABLE>
   15f3c:	ldrdeq	pc, [r0], -r0
   15f40:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   15f44:	andeq	pc, r0, r4, asr #30
   15f48:	andeq	pc, r0, ip, lsl #30
   15f4c:	ldrdeq	pc, [r0], -r8
   15f50:			; <UNDEFINED> instruction: 0x0000e7b8
   15f54:	andeq	pc, r0, ip, ror fp	; <UNPREDICTABLE>
   15f58:	ldrdeq	pc, [r0], -ip
   15f5c:	muleq	r0, r0, r7
   15f60:	strdeq	lr, [r0], -ip
   15f64:	andeq	lr, r0, r0, ror pc
   15f68:	ldrh	r3, [r6, #8]
   15f6c:	cmp	r3, #0
   15f70:	beq	1656c <verify_monster@@Base+0xa30>
   15f74:	ldrh	r3, [r6, #4]
   15f78:	cmp	r3, #0
   15f7c:	beq	16558 <verify_monster@@Base+0xa1c>
   15f80:	cmp	r7, #23
   15f84:	bls	1620c <verify_monster@@Base+0x6d0>
   15f88:	ldrh	r3, [r6, #22]
   15f8c:	cmp	r3, #0
   15f90:	beq	1620c <verify_monster@@Base+0x6d0>
   15f94:	ldr	r2, [r5, r3]
   15f98:	add	r3, r5, r3
   15f9c:	add	r2, r2, #4
   15fa0:	adds	r3, r3, r2
   15fa4:	beq	1620c <verify_monster@@Base+0x6d0>
   15fa8:	ldr	r2, [r3, #-4]
   15fac:	cmp	r2, #5
   15fb0:	bne	1620c <verify_monster@@Base+0x6d0>
   15fb4:	cmp	r3, #0
   15fb8:	ldrsh	r2, [r8]
   15fbc:	beq	161f8 <verify_monster@@Base+0x6bc>
   15fc0:	ldrsh	r0, [r3]
   15fc4:	cmp	r0, r2
   15fc8:	bne	16248 <verify_monster@@Base+0x70c>
   15fcc:	ldrsb	r0, [r8, #2]
   15fd0:	ldrsb	r2, [r3, #2]
   15fd4:	cmp	r2, r0
   15fd8:	bne	1625c <verify_monster@@Base+0x720>
   15fdc:	add	r1, r1, #1
   15fe0:	add	r8, r8, #4
   15fe4:	cmp	r1, #5
   15fe8:	add	r3, r3, #4
   15fec:	bne	15fb4 <verify_monster@@Base+0x478>
   15ff0:	cmp	r7, #27
   15ff4:	bls	16220 <verify_monster@@Base+0x6e4>
   15ff8:	ldrh	r8, [r6, #26]
   15ffc:	cmp	r8, #0
   16000:	beq	16220 <verify_monster@@Base+0x6e4>
   16004:	ldr	r9, [r5, r8]
   16008:	add	r3, r5, r8
   1600c:	str	r3, [sp, #4]
   16010:	add	r9, r9, #4
   16014:	adds	r8, r3, r9
   16018:	beq	16220 <verify_monster@@Base+0x6e4>
   1601c:	ldr	r2, [r8, #-4]
   16020:	cmp	r2, #8
   16024:	bne	16220 <verify_monster@@Base+0x6e4>
   16028:	ldr	fp, [r8, #20]
   1602c:	add	fp, fp, #20
   16030:	adds	fp, r8, fp
   16034:	beq	16718 <verify_monster@@Base+0xbdc>
   16038:	ldr	sl, [pc, #-432]	; 15e90 <verify_monster@@Base+0x354>
   1603c:	mov	r0, fp
   16040:	bl	132e0 <_start@@Base+0x724>
   16044:	add	sl, pc, sl
   16048:	mov	r1, sl
   1604c:	bl	128e4 <strcmp@plt>
   16050:	cmp	r0, #0
   16054:	bne	16650 <verify_monster@@Base+0xb14>
   16058:	ldr	r0, [r8, #4]
   1605c:	add	r0, r0, #4
   16060:	add	r0, r8, r0
   16064:	cmp	r0, fp
   16068:	bne	16580 <verify_monster@@Base+0xa44>
   1606c:	bl	132e0 <_start@@Base+0x724>
   16070:	mov	r1, sl
   16074:	mov	fp, r0
   16078:	bl	128e4 <strcmp@plt>
   1607c:	cmp	r0, #0
   16080:	bne	16638 <verify_monster@@Base+0xafc>
   16084:	ldr	r0, [r8, #8]
   16088:	ldr	sl, [pc, #-508]	; 15e94 <verify_monster@@Base+0x358>
   1608c:	add	r0, r0, #8
   16090:	add	r0, r8, r0
   16094:	add	sl, pc, sl
   16098:	bl	132e0 <_start@@Base+0x724>
   1609c:	mov	r1, sl
   160a0:	mov	fp, r0
   160a4:	bl	128e4 <strcmp@plt>
   160a8:	cmp	r0, #0
   160ac:	bne	16620 <verify_monster@@Base+0xae4>
   160b0:	ldr	r3, [sp, #4]
   160b4:	ldr	fp, [pc, #-548]	; 15e98 <verify_monster@@Base+0x35c>
   160b8:	ldr	r0, [r3, r9]
   160bc:	add	fp, pc, fp
   160c0:	add	r0, r8, r0
   160c4:	bl	132e0 <_start@@Base+0x724>
   160c8:	mov	r1, fp
   160cc:	mov	r9, r0
   160d0:	bl	128e4 <strcmp@plt>
   160d4:	cmp	r0, #0
   160d8:	bne	16608 <verify_monster@@Base+0xacc>
   160dc:	ldr	r0, [r8, #12]
   160e0:	add	r0, r0, #12
   160e4:	add	r0, r8, r0
   160e8:	bl	132e0 <_start@@Base+0x724>
   160ec:	ldr	r1, [pc, #-600]	; 15e9c <verify_monster@@Base+0x360>
   160f0:	mov	r9, r0
   160f4:	add	r1, pc, r1
   160f8:	bl	128e4 <strcmp@plt>
   160fc:	cmp	r0, #0
   16100:	bne	165f0 <verify_monster@@Base+0xab4>
   16104:	ldr	r0, [r8, #16]
   16108:	add	r0, r0, #16
   1610c:	add	r0, r8, r0
   16110:	bl	132e0 <_start@@Base+0x724>
   16114:	mov	r1, sl
   16118:	mov	r9, r0
   1611c:	bl	128e4 <strcmp@plt>
   16120:	cmp	r0, #0
   16124:	bne	165d8 <verify_monster@@Base+0xa9c>
   16128:	ldr	r0, [r8, #24]
   1612c:	add	r0, r0, #24
   16130:	add	r0, r8, r0
   16134:	bl	132e0 <_start@@Base+0x724>
   16138:	mov	r1, fp
   1613c:	mov	r9, r0
   16140:	bl	128e4 <strcmp@plt>
   16144:	cmp	r0, #0
   16148:	bne	165c0 <verify_monster@@Base+0xa84>
   1614c:	ldr	r0, [r8, #28]
   16150:	add	r0, r0, #28
   16154:	add	r0, r8, r0
   16158:	bl	132e0 <_start@@Base+0x724>
   1615c:	mov	r1, sl
   16160:	mov	r8, r0
   16164:	bl	128e4 <strcmp@plt>
   16168:	cmp	r0, #0
   1616c:	bne	165a8 <verify_monster@@Base+0xa6c>
   16170:	ldrh	r3, [r6, #24]
   16174:	cmp	r3, #0
   16178:	beq	16234 <verify_monster@@Base+0x6f8>
   1617c:	ldr	r2, [r5, r3]
   16180:	add	r3, r5, r3
   16184:	add	r2, r2, #4
   16188:	adds	r8, r3, r2
   1618c:	beq	16234 <verify_monster@@Base+0x6f8>
   16190:	ldr	r1, [r8, #-4]
   16194:	cmp	r1, #3
   16198:	bne	16234 <verify_monster@@Base+0x6f8>
   1619c:	ldr	r0, [r3, r2]
   161a0:	ldr	r1, [pc, #-776]	; 15ea0 <verify_monster@@Base+0x364>
   161a4:	add	r0, r0, #4
   161a8:	add	r0, r8, r0
   161ac:	add	r1, pc, r1
   161b0:	bl	128e4 <strcmp@plt>
   161b4:	cmp	r0, #0
   161b8:	bne	166a0 <verify_monster@@Base+0xb64>
   161bc:	ldr	r3, [r8, #4]
   161c0:	add	r3, r3, #8
   161c4:	adds	r2, r8, r3
   161c8:	beq	16284 <verify_monster@@Base+0x748>
   161cc:	ldr	r1, [r2, #-4]
   161d0:	cmp	r1, #2
   161d4:	bne	16284 <verify_monster@@Base+0x748>
   161d8:	ldrb	r3, [r8, r3]
   161dc:	cmp	r3, #44	; 0x2c
   161e0:	beq	162ac <verify_monster@@Base+0x770>
   161e4:	ldr	r0, [pc, #-840]	; 15ea4 <verify_monster@@Base+0x368>
   161e8:	add	r0, pc, r0
   161ec:	bl	12944 <puts@plt>
   161f0:	mvn	r0, #0
   161f4:	b	15bc4 <verify_monster@@Base+0x88>
   161f8:	cmp	r2, #0
   161fc:	bne	16248 <verify_monster@@Base+0x70c>
   16200:	ldrsb	r0, [r8, #2]
   16204:	mov	r2, r3
   16208:	b	15fd4 <verify_monster@@Base+0x498>
   1620c:	ldr	r0, [pc, #-876]	; 15ea8 <verify_monster@@Base+0x36c>
   16210:	add	r0, pc, r0
   16214:	bl	12944 <puts@plt>
   16218:	mvn	r0, #0
   1621c:	b	15bc4 <verify_monster@@Base+0x88>
   16220:	ldr	r0, [pc, #-892]	; 15eac <verify_monster@@Base+0x370>
   16224:	add	r0, pc, r0
   16228:	bl	12944 <puts@plt>
   1622c:	mvn	r0, #0
   16230:	b	15bc4 <verify_monster@@Base+0x88>
   16234:	ldr	r0, [pc, #-908]	; 15eb0 <verify_monster@@Base+0x374>
   16238:	add	r0, pc, r0
   1623c:	bl	12944 <puts@plt>
   16240:	mvn	r0, #0
   16244:	b	15bc4 <verify_monster@@Base+0x88>
   16248:	ldr	r0, [pc, #-924]	; 15eb4 <verify_monster@@Base+0x378>
   1624c:	add	r0, pc, r0
   16250:	bl	128f0 <printf@plt>
   16254:	mvn	r0, #0
   16258:	b	15bc4 <verify_monster@@Base+0x88>
   1625c:	ldr	r0, [pc, #-940]	; 15eb8 <verify_monster@@Base+0x37c>
   16260:	add	r0, pc, r0
   16264:	bl	128f0 <printf@plt>
   16268:	mvn	r0, #0
   1626c:	b	15bc4 <verify_monster@@Base+0x88>
   16270:	ldr	r0, [pc, #-956]	; 15ebc <verify_monster@@Base+0x380>
   16274:	add	r0, pc, r0
   16278:	bl	12944 <puts@plt>
   1627c:	mvn	r0, #0
   16280:	b	15bc4 <verify_monster@@Base+0x88>
   16284:	ldr	r0, [pc, #-972]	; 15ec0 <verify_monster@@Base+0x384>
   16288:	add	r0, pc, r0
   1628c:	bl	128f0 <printf@plt>
   16290:	mvn	r0, #0
   16294:	b	15bc4 <verify_monster@@Base+0x88>
   16298:	ldr	r0, [pc, #-988]	; 15ec4 <verify_monster@@Base+0x388>
   1629c:	add	r0, pc, r0
   162a0:	bl	12944 <puts@plt>
   162a4:	mvn	r0, #0
   162a8:	b	15bc4 <verify_monster@@Base+0x88>
   162ac:	ldrb	r3, [r2, #1]
   162b0:	cmp	r3, #0
   162b4:	bne	161e4 <verify_monster@@Base+0x6a8>
   162b8:	ldr	r0, [r8, #8]
   162bc:	ldr	r1, [pc, #-1020]	; 15ec8 <verify_monster@@Base+0x38c>
   162c0:	add	r0, r0, #12
   162c4:	add	r0, r8, r0
   162c8:	add	r1, pc, r1
   162cc:	bl	128e4 <strcmp@plt>
   162d0:	subs	r1, r0, #0
   162d4:	bne	16678 <verify_monster@@Base+0xb3c>
   162d8:	cmp	r7, #53	; 0x35
   162dc:	bhi	162f4 <verify_monster@@Base+0x7b8>
   162e0:	ldr	r0, [pc, #-1052]	; 15ecc <verify_monster@@Base+0x390>
   162e4:	add	r0, pc, r0
   162e8:	bl	12944 <puts@plt>
   162ec:	mvn	r0, #0
   162f0:	b	15bc4 <verify_monster@@Base+0x88>
   162f4:	ldrh	r3, [r6, #52]	; 0x34
   162f8:	cmp	r3, #0
   162fc:	beq	162e0 <verify_monster@@Base+0x7a4>
   16300:	ldr	r2, [r5, r3]
   16304:	add	r3, r5, r3
   16308:	add	r2, r2, #4
   1630c:	adds	r3, r3, r2
   16310:	beq	16470 <verify_monster@@Base+0x934>
   16314:	ldr	r2, [r3, #-4]
   16318:	cmp	r2, #4
   1631c:	subeq	r3, r3, #1
   16320:	bne	16470 <verify_monster@@Base+0x934>
   16324:	ldrb	r0, [r3, #1]!
   16328:	ldr	r2, [r4], #4
   1632c:	cmp	r0, r2
   16330:	bne	164ac <verify_monster@@Base+0x970>
   16334:	add	r1, r1, #1
   16338:	cmp	r1, #4
   1633c:	bne	16324 <verify_monster@@Base+0x7e8>
   16340:	mov	r0, r5
   16344:	bl	131e4 <_start@@Base+0x628>
   16348:	cmp	r0, #1
   1634c:	bne	166b4 <verify_monster@@Base+0xb78>
   16350:	mov	r0, r5
   16354:	bl	1325c <_start@@Base+0x6a0>
   16358:	bl	132e0 <_start@@Base+0x724>
   1635c:	ldr	r1, [pc, #-1172]	; 15ed0 <verify_monster@@Base+0x394>
   16360:	add	r1, pc, r1
   16364:	bl	128e4 <strcmp@plt>
   16368:	cmp	r0, #0
   1636c:	bne	16664 <verify_monster@@Base+0xb28>
   16370:	ldrh	r4, [r6, #28]
   16374:	cmp	r4, #0
   16378:	beq	16388 <verify_monster@@Base+0x84c>
   1637c:	ldr	r3, [r5, r4]
   16380:	add	r4, r5, r4
   16384:	add	r4, r4, r3
   16388:	mov	r0, r4
   1638c:	bl	132e0 <_start@@Base+0x724>
   16390:	ldr	r1, [pc, #-1220]	; 15ed4 <verify_monster@@Base+0x398>
   16394:	add	r1, pc, r1
   16398:	bl	128e4 <strcmp@plt>
   1639c:	cmp	r0, #0
   163a0:	bne	16704 <verify_monster@@Base+0xbc8>
   163a4:	mov	r0, r4
   163a8:	bl	131e4 <_start@@Base+0x628>
   163ac:	cmp	r0, #0
   163b0:	bne	166f0 <verify_monster@@Base+0xbb4>
   163b4:	cmp	r4, #0
   163b8:	beq	1676c <verify_monster@@Base+0xc30>
   163bc:	ldr	r3, [r4]
   163c0:	sub	r3, r4, r3
   163c4:	ldrh	r2, [r3]
   163c8:	cmp	r2, #27
   163cc:	bls	16768 <verify_monster@@Base+0xc2c>
   163d0:	ldrh	r3, [r3, #26]
   163d4:	cmp	r3, #0
   163d8:	beq	16768 <verify_monster@@Base+0xc2c>
   163dc:	ldr	r2, [r4, r3]
   163e0:	add	r3, r4, r3
   163e4:	add	r2, r2, #4
   163e8:	adds	r3, r3, r2
   163ec:	beq	16768 <verify_monster@@Base+0xc2c>
   163f0:	ldr	r2, [r3, #-4]
   163f4:	mvn	r7, #0
   163f8:	adds	r2, r2, r7
   163fc:	add	r4, r3, r2, lsl #2
   16400:	bcc	16768 <verify_monster@@Base+0xc2c>
   16404:	ldr	r3, [r3, r2, lsl #2]
   16408:	add	r4, r4, r3
   1640c:	mov	r0, r4
   16410:	bl	131e4 <_start@@Base+0x628>
   16414:	cmp	r0, #1
   16418:	bne	166dc <verify_monster@@Base+0xba0>
   1641c:	mov	r0, r4
   16420:	bl	1325c <_start@@Base+0x6a0>
   16424:	bl	132e0 <_start@@Base+0x724>
   16428:	ldr	r1, [pc, #-1368]	; 15ed8 <verify_monster@@Base+0x39c>
   1642c:	add	r1, pc, r1
   16430:	bl	128e4 <strcmp@plt>
   16434:	cmp	r0, #0
   16438:	bne	166c8 <verify_monster@@Base+0xb8c>
   1643c:	ldrh	r3, [r6, #34]	; 0x22
   16440:	cmp	r3, #0
   16444:	bne	164c0 <verify_monster@@Base+0x984>
   16448:	ldr	r0, [pc, #-1396]	; 15edc <verify_monster@@Base+0x3a0>
   1644c:	add	r0, pc, r0
   16450:	bl	12944 <puts@plt>
   16454:	mvn	r0, #0
   16458:	b	15bc4 <verify_monster@@Base+0x88>
   1645c:	ldr	r0, [pc, #-1412]	; 15ee0 <verify_monster@@Base+0x3a4>
   16460:	add	r0, pc, r0
   16464:	bl	12944 <puts@plt>
   16468:	mvn	r0, #0
   1646c:	b	15bc4 <verify_monster@@Base+0x88>
   16470:	ldr	r0, [pc, #-1428]	; 15ee4 <verify_monster@@Base+0x3a8>
   16474:	add	r0, pc, r0
   16478:	bl	12944 <puts@plt>
   1647c:	mvn	r0, #0
   16480:	b	15bc4 <verify_monster@@Base+0x88>
   16484:	ldr	r0, [pc, #-1444]	; 15ee8 <verify_monster@@Base+0x3ac>
   16488:	add	r0, pc, r0
   1648c:	bl	12944 <puts@plt>
   16490:	mvn	r0, #0
   16494:	b	15bc4 <verify_monster@@Base+0x88>
   16498:	ldr	r0, [pc, #-1460]	; 15eec <verify_monster@@Base+0x3b0>
   1649c:	add	r0, pc, r0
   164a0:	bl	12944 <puts@plt>
   164a4:	mvn	r0, #0
   164a8:	b	15bc4 <verify_monster@@Base+0x88>
   164ac:	ldr	r0, [pc, #-1476]	; 15ef0 <verify_monster@@Base+0x3b4>
   164b0:	add	r0, pc, r0
   164b4:	bl	128f0 <printf@plt>
   164b8:	mvn	r0, #0
   164bc:	b	15bc4 <verify_monster@@Base+0x88>
   164c0:	ldrb	r3, [r5, r3]
   164c4:	cmp	r3, #0
   164c8:	bne	16448 <verify_monster@@Base+0x90c>
   164cc:	ldrh	r3, [r6, #32]
   164d0:	cmp	r3, #0
   164d4:	beq	1668c <verify_monster@@Base+0xb50>
   164d8:	ldr	r2, [r5, r3]
   164dc:	add	r5, r5, r3
   164e0:	adds	r3, r5, r2
   164e4:	beq	16740 <verify_monster@@Base+0xc04>
   164e8:	ldr	r2, [r5, r2]
   164ec:	sub	r3, r3, r2
   164f0:	ldrh	r2, [r3]
   164f4:	cmp	r2, #5
   164f8:	bls	15bc4 <verify_monster@@Base+0x88>
   164fc:	ldrh	r1, [r3, #4]
   16500:	cmp	r1, #0
   16504:	bne	16530 <verify_monster@@Base+0x9f4>
   16508:	cmp	r2, #7
   1650c:	bls	15bc4 <verify_monster@@Base+0x88>
   16510:	ldrh	r1, [r3, #6]
   16514:	cmp	r1, #0
   16518:	bne	16530 <verify_monster@@Base+0x9f4>
   1651c:	cmp	r2, #9
   16520:	bls	15bc4 <verify_monster@@Base+0x88>
   16524:	ldrh	r3, [r3, #8]
   16528:	cmp	r3, #0
   1652c:	beq	15bc4 <verify_monster@@Base+0x88>
   16530:	ldr	r0, [pc, #-1604]	; 15ef4 <verify_monster@@Base+0x3b8>
   16534:	add	r0, pc, r0
   16538:	bl	12944 <puts@plt>
   1653c:	mvn	r0, #0
   16540:	b	15bc4 <verify_monster@@Base+0x88>
   16544:	ldr	r0, [pc, #-1620]	; 15ef8 <verify_monster@@Base+0x3bc>
   16548:	add	r0, pc, r0
   1654c:	bl	12944 <puts@plt>
   16550:	mvn	r0, #0
   16554:	b	15bc4 <verify_monster@@Base+0x88>
   16558:	ldr	r0, [pc, #-1636]	; 15efc <verify_monster@@Base+0x3c0>
   1655c:	add	r0, pc, r0
   16560:	bl	12944 <puts@plt>
   16564:	mvn	r0, #0
   16568:	b	15bc4 <verify_monster@@Base+0x88>
   1656c:	ldr	r0, [pc, #-1652]	; 15f00 <verify_monster@@Base+0x3c4>
   16570:	add	r0, pc, r0
   16574:	bl	12944 <puts@plt>
   16578:	mvn	r0, #0
   1657c:	b	15bc4 <verify_monster@@Base+0x88>
   16580:	ldr	r0, [pc, #-1668]	; 15f04 <verify_monster@@Base+0x3c8>
   16584:	add	r0, pc, r0
   16588:	bl	12944 <puts@plt>
   1658c:	mvn	r0, #0
   16590:	b	15bc4 <verify_monster@@Base+0x88>
   16594:	ldr	r0, [pc, #-1684]	; 15f08 <verify_monster@@Base+0x3cc>
   16598:	add	r0, pc, r0
   1659c:	bl	12944 <puts@plt>
   165a0:	mvn	r0, #0
   165a4:	b	15bc4 <verify_monster@@Base+0x88>
   165a8:	ldr	r0, [pc, #-1700]	; 15f0c <verify_monster@@Base+0x3d0>
   165ac:	mov	r1, r8
   165b0:	add	r0, pc, r0
   165b4:	bl	128f0 <printf@plt>
   165b8:	mvn	r0, #0
   165bc:	b	15bc4 <verify_monster@@Base+0x88>
   165c0:	ldr	r0, [pc, #-1720]	; 15f10 <verify_monster@@Base+0x3d4>
   165c4:	mov	r1, r9
   165c8:	add	r0, pc, r0
   165cc:	bl	128f0 <printf@plt>
   165d0:	mvn	r0, #0
   165d4:	b	15bc4 <verify_monster@@Base+0x88>
   165d8:	ldr	r0, [pc, #-1740]	; 15f14 <verify_monster@@Base+0x3d8>
   165dc:	mov	r1, r9
   165e0:	add	r0, pc, r0
   165e4:	bl	128f0 <printf@plt>
   165e8:	mvn	r0, #0
   165ec:	b	15bc4 <verify_monster@@Base+0x88>
   165f0:	ldr	r0, [pc, #-1760]	; 15f18 <verify_monster@@Base+0x3dc>
   165f4:	mov	r1, r9
   165f8:	add	r0, pc, r0
   165fc:	bl	128f0 <printf@plt>
   16600:	mvn	r0, #0
   16604:	b	15bc4 <verify_monster@@Base+0x88>
   16608:	ldr	r0, [pc, #-1780]	; 15f1c <verify_monster@@Base+0x3e0>
   1660c:	mov	r1, r9
   16610:	add	r0, pc, r0
   16614:	bl	128f0 <printf@plt>
   16618:	mvn	r0, #0
   1661c:	b	15bc4 <verify_monster@@Base+0x88>
   16620:	ldr	r0, [pc, #-1800]	; 15f20 <verify_monster@@Base+0x3e4>
   16624:	mov	r1, fp
   16628:	add	r0, pc, r0
   1662c:	bl	128f0 <printf@plt>
   16630:	mvn	r0, #0
   16634:	b	15bc4 <verify_monster@@Base+0x88>
   16638:	ldr	r0, [pc, #-1820]	; 15f24 <verify_monster@@Base+0x3e8>
   1663c:	mov	r1, fp
   16640:	add	r0, pc, r0
   16644:	bl	128f0 <printf@plt>
   16648:	mvn	r0, #0
   1664c:	b	15bc4 <verify_monster@@Base+0x88>
   16650:	ldr	r0, [pc, #-1840]	; 15f28 <verify_monster@@Base+0x3ec>
   16654:	add	r0, pc, r0
   16658:	bl	128f0 <printf@plt>
   1665c:	mvn	r0, #0
   16660:	b	15bc4 <verify_monster@@Base+0x88>
   16664:	ldr	r0, [pc, #-1856]	; 15f2c <verify_monster@@Base+0x3f0>
   16668:	add	r0, pc, r0
   1666c:	bl	12944 <puts@plt>
   16670:	mvn	r0, #0
   16674:	b	15bc4 <verify_monster@@Base+0x88>
   16678:	ldr	r0, [pc, #-1872]	; 15f30 <verify_monster@@Base+0x3f4>
   1667c:	add	r0, pc, r0
   16680:	bl	12944 <puts@plt>
   16684:	mvn	r0, #0
   16688:	b	15bc4 <verify_monster@@Base+0x88>
   1668c:	ldr	r0, [pc, #-1888]	; 15f34 <verify_monster@@Base+0x3f8>
   16690:	add	r0, pc, r0
   16694:	bl	12944 <puts@plt>
   16698:	mvn	r0, #0
   1669c:	b	15bc4 <verify_monster@@Base+0x88>
   166a0:	ldr	r0, [pc, #-1904]	; 15f38 <verify_monster@@Base+0x3fc>
   166a4:	add	r0, pc, r0
   166a8:	bl	12944 <puts@plt>
   166ac:	mvn	r0, #0
   166b0:	b	15bc4 <verify_monster@@Base+0x88>
   166b4:	ldr	r0, [pc, #-1920]	; 15f3c <verify_monster@@Base+0x400>
   166b8:	add	r0, pc, r0
   166bc:	bl	12944 <puts@plt>
   166c0:	mvn	r0, #0
   166c4:	b	15bc4 <verify_monster@@Base+0x88>
   166c8:	ldr	r0, [pc, #-1936]	; 15f40 <verify_monster@@Base+0x404>
   166cc:	add	r0, pc, r0
   166d0:	bl	12944 <puts@plt>
   166d4:	mov	r0, r7
   166d8:	b	15bc4 <verify_monster@@Base+0x88>
   166dc:	ldr	r0, [pc, #-1952]	; 15f44 <verify_monster@@Base+0x408>
   166e0:	add	r0, pc, r0
   166e4:	bl	12944 <puts@plt>
   166e8:	mov	r0, r7
   166ec:	b	15bc4 <verify_monster@@Base+0x88>
   166f0:	ldr	r0, [pc, #-1968]	; 15f48 <verify_monster@@Base+0x40c>
   166f4:	add	r0, pc, r0
   166f8:	bl	12944 <puts@plt>
   166fc:	mvn	r0, #0
   16700:	b	15bc4 <verify_monster@@Base+0x88>
   16704:	ldr	r0, [pc, #-1984]	; 15f4c <verify_monster@@Base+0x410>
   16708:	add	r0, pc, r0
   1670c:	bl	12944 <puts@plt>
   16710:	mvn	r0, #0
   16714:	b	15bc4 <verify_monster@@Base+0x88>
   16718:	ldr	r3, [pc, #-2000]	; 15f50 <verify_monster@@Base+0x414>
   1671c:	movw	r2, #662	; 0x296
   16720:	ldr	r1, [pc, #-2004]	; 15f54 <verify_monster@@Base+0x418>
   16724:	ldr	r0, [pc, #-2004]	; 15f58 <verify_monster@@Base+0x41c>
   16728:	add	r3, pc, r3
   1672c:	add	r3, r3, #1200	; 0x4b0
   16730:	add	r1, pc, r1
   16734:	add	r3, r3, #8
   16738:	add	r0, pc, r0
   1673c:	bl	129e0 <__assert_fail@plt>
   16740:	ldr	r3, [pc, #-2028]	; 15f5c <verify_monster@@Base+0x420>
   16744:	movw	r2, #607	; 0x25f
   16748:	ldr	r1, [pc, #-2032]	; 15f60 <verify_monster@@Base+0x424>
   1674c:	ldr	r0, [pc, #-2032]	; 15f64 <verify_monster@@Base+0x428>
   16750:	add	r3, pc, r3
   16754:	add	r3, r3, #1216	; 0x4c0
   16758:	add	r1, pc, r1
   1675c:	add	r3, r3, #12
   16760:	add	r0, pc, r0
   16764:	bl	129e0 <__assert_fail@plt>
   16768:	bl	13174 <_start@@Base+0x5b8>
   1676c:	bl	1313c <_start@@Base+0x580>

00016770 <gen_monster@@Base>:
   16770:	ldr	r2, [pc, #2712]	; 17210 <gen_monster@@Base+0xaa0>
   16774:	mov	ip, #256	; 0x100
   16778:	movt	ip, #1
   1677c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16780:	mov	r4, r0
   16784:	strd	r6, [sp, #8]
   16788:	str	r8, [sp, #16]
   1678c:	mov	r8, r1
   16790:	str	lr, [sp, #20]
   16794:	sub	sp, sp, #48	; 0x30
   16798:	add	r2, pc, r2
   1679c:	add	r5, sp, #24
   167a0:	add	r2, r2, #1264	; 0x4f0
   167a4:	str	ip, [sp, #12]
   167a8:	ldrh	r3, [r2, #8]
   167ac:	ldrd	r6, [r2]
   167b0:	strh	r3, [r5, #8]
   167b4:	strd	r6, [sp, #24]
   167b8:	bl	1f250 <flatcc_builder_reset@@Base>
   167bc:	cmp	r8, #0
   167c0:	beq	170c8 <gen_monster@@Base+0x958>
   167c4:	ldr	r1, [pc, #2632]	; 17214 <gen_monster@@Base+0xaa4>
   167c8:	mov	r3, #2
   167cc:	mov	r2, #0
   167d0:	mov	r0, r4
   167d4:	add	r1, pc, r1
   167d8:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   167dc:	cmp	r0, #0
   167e0:	bne	167f0 <gen_monster@@Base+0x80>
   167e4:	mov	r1, #36	; 0x24
   167e8:	mov	r0, r4
   167ec:	bl	20a20 <flatcc_builder_start_table@@Base>
   167f0:	mov	r3, #2
   167f4:	mov	r0, r4
   167f8:	mov	r2, r3
   167fc:	mov	r1, r3
   16800:	bl	22554 <flatcc_builder_table_add@@Base>
   16804:	cmp	r0, #0
   16808:	mov	r2, #32
   1680c:	movne	r3, #80	; 0x50
   16810:	mov	r1, #0
   16814:	strhne	r3, [r0]
   16818:	mov	r3, #16
   1681c:	mov	r0, r4
   16820:	bl	22554 <flatcc_builder_table_add@@Base>
   16824:	mov	r3, r0
   16828:	mov	r1, #1065353216	; 0x3f800000
   1682c:	mov	ip, #1073741824	; 0x40000000
   16830:	movw	r2, #52429	; 0xcccd
   16834:	movt	r2, #49228	; 0xc04c
   16838:	str	r1, [r3]
   1683c:	mov	r0, r4
   16840:	ldr	r1, [pc, #2512]	; 17218 <gen_monster@@Base+0xaa8>
   16844:	str	ip, [r3, #4]
   16848:	str	r2, [r3, #8]
   1684c:	add	r1, pc, r1
   16850:	bl	22388 <flatcc_builder_create_string_str@@Base>
   16854:	subs	r6, r0, #0
   16858:	beq	16870 <gen_monster@@Base+0x100>
   1685c:	mov	r1, #3
   16860:	mov	r0, r4
   16864:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   16868:	cmp	r0, #0
   1686c:	strne	r6, [r0]
   16870:	mov	r3, #1
   16874:	mov	r1, #6
   16878:	mov	r2, r3
   1687c:	mov	r0, r4
   16880:	bl	22554 <flatcc_builder_table_add@@Base>
   16884:	cmp	r0, #0
   16888:	mov	r2, #1
   1688c:	movne	r3, #2
   16890:	mvn	ip, #0
   16894:	mov	r1, r5
   16898:	strbne	r3, [r0]
   1689c:	mov	r3, r2
   168a0:	mov	r0, r4
   168a4:	stm	sp, {r2, ip}
   168a8:	mov	r2, #10
   168ac:	bl	215d4 <flatcc_builder_create_vector@@Base>
   168b0:	subs	r5, r0, #0
   168b4:	beq	168cc <gen_monster@@Base+0x15c>
   168b8:	mov	r1, #5
   168bc:	mov	r0, r4
   168c0:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   168c4:	cmp	r0, #0
   168c8:	strne	r5, [r0]
   168cc:	mvn	r3, #-1073741824	; 0xc0000000
   168d0:	mov	r2, #2
   168d4:	mov	r1, #4
   168d8:	mov	r0, r4
   168dc:	bl	20770 <flatcc_builder_start_vector@@Base>
   168e0:	mov	r1, #1
   168e4:	mov	r0, r4
   168e8:	bl	1fe28 <flatcc_builder_extend_vector@@Base>
   168ec:	mov	r3, r0
   168f0:	mov	r2, #32
   168f4:	mov	r0, #16
   168f8:	mov	r1, #2
   168fc:	strh	r0, [r3]
   16900:	mov	r0, r4
   16904:	strb	r2, [r3, #2]
   16908:	bl	1fe28 <flatcc_builder_extend_vector@@Base>
   1690c:	mov	r3, r0
   16910:	mov	r1, #48	; 0x30
   16914:	mov	r0, #64	; 0x40
   16918:	mov	ip, #80	; 0x50
   1691c:	mov	r2, #96	; 0x60
   16920:	strh	r1, [r3]
   16924:	mov	r1, #1
   16928:	strb	r0, [r3, #2]
   1692c:	mov	r0, r4
   16930:	strh	ip, [r3, #4]
   16934:	strb	r2, [r3, #6]
   16938:	bl	1fe28 <flatcc_builder_extend_vector@@Base>
   1693c:	cmp	r0, #0
   16940:	beq	16954 <gen_monster@@Base+0x1e4>
   16944:	mov	r2, #112	; 0x70
   16948:	mvn	r3, #127	; 0x7f
   1694c:	strh	r2, [r0]
   16950:	strb	r3, [r0, #2]
   16954:	mvn	r3, #110	; 0x6e
   16958:	mov	r2, #400	; 0x190
   1695c:	mov	r1, #1
   16960:	mov	r0, r4
   16964:	strh	r2, [sp, #8]
   16968:	strb	r3, [sp, #10]
   1696c:	bl	1fe28 <flatcc_builder_extend_vector@@Base>
   16970:	cmp	r0, #0
   16974:	mov	r1, #1
   16978:	ldrne	r3, [sp, #8]
   1697c:	strne	r3, [r0]
   16980:	mov	r0, r4
   16984:	bl	1fe28 <flatcc_builder_extend_vector@@Base>
   16988:	cmp	r0, #0
   1698c:	mov	r1, #1
   16990:	ldrne	r3, [sp, #8]
   16994:	strne	r3, [r0]
   16998:	mov	r0, r4
   1699c:	bl	1fe28 <flatcc_builder_extend_vector@@Base>
   169a0:	cmp	r0, #0
   169a4:	ldrne	r3, [sp, #8]
   169a8:	strne	r3, [r0]
   169ac:	mov	r0, r4
   169b0:	bl	2185c <flatcc_builder_vector_count@@Base>
   169b4:	cmp	r0, #7
   169b8:	bne	171e0 <gen_monster@@Base+0xa70>
   169bc:	mov	r1, #2
   169c0:	mov	r0, r4
   169c4:	bl	2051c <flatcc_builder_truncate_vector@@Base>
   169c8:	mov	r0, r4
   169cc:	bl	2185c <flatcc_builder_vector_count@@Base>
   169d0:	cmp	r0, #5
   169d4:	bne	171b8 <gen_monster@@Base+0xa48>
   169d8:	mov	r0, r4
   169dc:	bl	21868 <flatcc_builder_vector_edit@@Base>
   169e0:	mov	r2, r0
   169e4:	mov	r0, r4
   169e8:	ldrh	r3, [r2, #16]
   169ec:	add	r3, r3, #1
   169f0:	strh	r3, [r2, #16]
   169f4:	bl	2175c <flatcc_builder_end_vector@@Base>
   169f8:	subs	r5, r0, #0
   169fc:	beq	16a14 <gen_monster@@Base+0x2a4>
   16a00:	mov	r1, #9
   16a04:	mov	r0, r4
   16a08:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   16a0c:	cmp	r0, #0
   16a10:	strne	r5, [r0]
   16a14:	mov	r1, #36	; 0x24
   16a18:	mov	r0, r4
   16a1c:	bl	20a20 <flatcc_builder_start_table@@Base>
   16a20:	ldr	r1, [pc, #2036]	; 1721c <gen_monster@@Base+0xaac>
   16a24:	mov	r2, #7
   16a28:	mov	r0, r4
   16a2c:	add	r1, pc, r1
   16a30:	bl	22270 <flatcc_builder_create_string@@Base>
   16a34:	subs	r5, r0, #0
   16a38:	beq	16a50 <gen_monster@@Base+0x2e0>
   16a3c:	mov	r1, #3
   16a40:	mov	r0, r4
   16a44:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   16a48:	cmp	r0, #0
   16a4c:	strne	r5, [r0]
   16a50:	ldr	r1, [pc, #1992]	; 17220 <gen_monster@@Base+0xab0>
   16a54:	mov	r2, #1
   16a58:	mov	r0, r4
   16a5c:	add	r1, pc, r1
   16a60:	add	r1, r1, #1024	; 0x400
   16a64:	add	r1, r1, #4
   16a68:	bl	21358 <flatcc_builder_check_required@@Base>
   16a6c:	cmp	r0, #0
   16a70:	beq	17158 <gen_monster@@Base+0x9e8>
   16a74:	mov	r0, r4
   16a78:	bl	21404 <flatcc_builder_end_table@@Base>
   16a7c:	mov	r5, r0
   16a80:	mov	r0, r4
   16a84:	bl	20800 <flatcc_builder_start_offset_vector@@Base>
   16a88:	mov	r1, #2
   16a8c:	mov	r0, r4
   16a90:	bl	200c4 <flatcc_builder_extend_offset_vector@@Base>
   16a94:	mov	r3, r0
   16a98:	mov	r1, #36	; 0x24
   16a9c:	mov	r0, r4
   16aa0:	str	r5, [r3]
   16aa4:	str	r5, [r3, #4]
   16aa8:	bl	20a20 <flatcc_builder_start_table@@Base>
   16aac:	ldr	r1, [pc, #1904]	; 17224 <gen_monster@@Base+0xab4>
   16ab0:	mov	r2, #30
   16ab4:	mov	r0, r4
   16ab8:	add	r1, pc, r1
   16abc:	bl	223c4 <flatcc_builder_create_string_strn@@Base>
   16ac0:	subs	r6, r0, #0
   16ac4:	beq	16adc <gen_monster@@Base+0x36c>
   16ac8:	mov	r1, #3
   16acc:	mov	r0, r4
   16ad0:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   16ad4:	cmp	r0, #0
   16ad8:	strne	r6, [r0]
   16adc:	ldr	r6, [pc, #1860]	; 17228 <gen_monster@@Base+0xab8>
   16ae0:	mov	r2, #1
   16ae4:	mov	r0, r4
   16ae8:	add	r6, pc, r6
   16aec:	add	r1, r6, #1024	; 0x400
   16af0:	add	r1, r1, #4
   16af4:	bl	21358 <flatcc_builder_check_required@@Base>
   16af8:	cmp	r0, #0
   16afc:	beq	17158 <gen_monster@@Base+0x9e8>
   16b00:	mov	r0, r4
   16b04:	bl	21404 <flatcc_builder_end_table@@Base>
   16b08:	subs	r1, r0, #0
   16b0c:	beq	17208 <gen_monster@@Base+0xa98>
   16b10:	mov	r0, r4
   16b14:	bl	20150 <flatcc_builder_offset_vector_push@@Base>
   16b18:	ldr	r7, [r0]
   16b1c:	mov	r1, #3
   16b20:	mov	r0, r4
   16b24:	bl	200c4 <flatcc_builder_extend_offset_vector@@Base>
   16b28:	mov	r3, r0
   16b2c:	mov	r1, #1
   16b30:	mov	r0, r4
   16b34:	stm	r3, {r5, r7}
   16b38:	bl	205e4 <flatcc_builder_truncate_offset_vector@@Base>
   16b3c:	mov	r0, r4
   16b40:	bl	21aec <flatcc_builder_offset_vector_count@@Base>
   16b44:	cmp	r0, #5
   16b48:	bne	17194 <gen_monster@@Base+0xa24>
   16b4c:	mov	r1, #36	; 0x24
   16b50:	mov	r0, r4
   16b54:	bl	20a20 <flatcc_builder_start_table@@Base>
   16b58:	ldr	r1, [pc, #1740]	; 1722c <gen_monster@@Base+0xabc>
   16b5c:	mov	r2, #8
   16b60:	mov	r0, r4
   16b64:	add	r1, pc, r1
   16b68:	bl	223c4 <flatcc_builder_create_string_strn@@Base>
   16b6c:	subs	r6, r0, #0
   16b70:	beq	16b88 <gen_monster@@Base+0x418>
   16b74:	mov	r1, #3
   16b78:	mov	r0, r4
   16b7c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   16b80:	cmp	r0, #0
   16b84:	strne	r6, [r0]
   16b88:	ldr	r6, [pc, #1696]	; 17230 <gen_monster@@Base+0xac0>
   16b8c:	mov	r2, #1
   16b90:	mov	r0, r4
   16b94:	add	r6, pc, r6
   16b98:	add	r1, r6, #1024	; 0x400
   16b9c:	add	r1, r1, #4
   16ba0:	bl	21358 <flatcc_builder_check_required@@Base>
   16ba4:	cmp	r0, #0
   16ba8:	beq	17158 <gen_monster@@Base+0x9e8>
   16bac:	mov	r0, r4
   16bb0:	bl	21404 <flatcc_builder_end_table@@Base>
   16bb4:	subs	r1, r0, #0
   16bb8:	beq	17208 <gen_monster@@Base+0xa98>
   16bbc:	mov	r0, r4
   16bc0:	bl	20150 <flatcc_builder_offset_vector_push@@Base>
   16bc4:	ldr	r3, [r0]
   16bc8:	mov	r0, r4
   16bcc:	str	r3, [sp, #16]
   16bd0:	bl	21aec <flatcc_builder_offset_vector_count@@Base>
   16bd4:	cmp	r0, #6
   16bd8:	bne	17174 <gen_monster@@Base+0xa04>
   16bdc:	mov	r0, r4
   16be0:	bl	21ae4 <flatcc_builder_offset_vector_edit@@Base>
   16be4:	mov	r3, r0
   16be8:	mov	r2, #2
   16bec:	ldr	lr, [r3, #8]
   16bf0:	add	r1, sp, #16
   16bf4:	mov	r0, r4
   16bf8:	ldr	ip, [r3, #20]
   16bfc:	str	r5, [r3, #20]
   16c00:	str	lr, [sp, #20]
   16c04:	str	ip, [r3]
   16c08:	bl	20214 <flatcc_builder_append_offset_vector@@Base>
   16c0c:	mov	r0, r4
   16c10:	bl	21888 <flatcc_builder_end_offset_vector@@Base>
   16c14:	subs	r6, r0, #0
   16c18:	beq	16c30 <gen_monster@@Base+0x4c0>
   16c1c:	mov	r1, #11
   16c20:	mov	r0, r4
   16c24:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   16c28:	cmp	r0, #0
   16c2c:	strne	r6, [r0]
   16c30:	ldr	r1, [pc, #1532]	; 17234 <gen_monster@@Base+0xac4>
   16c34:	mov	r0, r4
   16c38:	add	r1, pc, r1
   16c3c:	bl	22388 <flatcc_builder_create_string_str@@Base>
   16c40:	ldr	r1, [pc, #1520]	; 17238 <gen_monster@@Base+0xac8>
   16c44:	mov	r2, #2
   16c48:	str	r0, [sp, #36]	; 0x24
   16c4c:	mov	r0, r4
   16c50:	add	r1, pc, r1
   16c54:	add	r1, r1, #1216	; 0x4c0
   16c58:	add	r1, r1, #8
   16c5c:	bl	22270 <flatcc_builder_create_string@@Base>
   16c60:	ldr	r1, [pc, #1492]	; 1723c <gen_monster@@Base+0xacc>
   16c64:	str	r0, [sp, #40]	; 0x28
   16c68:	mov	r0, r4
   16c6c:	add	r1, pc, r1
   16c70:	bl	22388 <flatcc_builder_create_string_str@@Base>
   16c74:	mov	r2, #3
   16c78:	add	r1, sp, #36	; 0x24
   16c7c:	str	r0, [sp, #44]	; 0x2c
   16c80:	mov	r0, r4
   16c84:	bl	21974 <flatcc_builder_create_offset_vector@@Base>
   16c88:	subs	r6, r0, #0
   16c8c:	beq	16ca4 <gen_monster@@Base+0x534>
   16c90:	mov	r1, #10
   16c94:	mov	r0, r4
   16c98:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   16c9c:	cmp	r0, #0
   16ca0:	strne	r6, [r0]
   16ca4:	mov	r2, #1
   16ca8:	mvn	r3, #0
   16cac:	mov	r1, r2
   16cb0:	mov	r0, r4
   16cb4:	bl	20770 <flatcc_builder_start_vector@@Base>
   16cb8:	mov	r2, #1
   16cbc:	add	r1, sp, #12
   16cc0:	mov	r0, r4
   16cc4:	bl	1ffc8 <flatcc_builder_append_vector@@Base>
   16cc8:	mov	r2, #3
   16ccc:	add	r1, sp, #13
   16cd0:	mov	r0, r4
   16cd4:	bl	1ffc8 <flatcc_builder_append_vector@@Base>
   16cd8:	mov	r0, r4
   16cdc:	bl	2175c <flatcc_builder_end_vector@@Base>
   16ce0:	subs	r6, r0, #0
   16ce4:	beq	16cfc <gen_monster@@Base+0x58c>
   16ce8:	mov	r1, #24
   16cec:	mov	r0, r4
   16cf0:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   16cf4:	cmp	r0, #0
   16cf8:	strne	r6, [r0]
   16cfc:	cmp	r5, #0
   16d00:	beq	17104 <gen_monster@@Base+0x994>
   16d04:	mov	r3, #1
   16d08:	mov	r1, #7
   16d0c:	mov	r2, r3
   16d10:	mov	r0, r4
   16d14:	bl	22554 <flatcc_builder_table_add@@Base>
   16d18:	subs	r6, r0, #0
   16d1c:	beq	16d40 <gen_monster@@Base+0x5d0>
   16d20:	mov	r1, #8
   16d24:	mov	r0, r4
   16d28:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   16d2c:	cmp	r0, #0
   16d30:	beq	16d40 <gen_monster@@Base+0x5d0>
   16d34:	mov	r3, #1
   16d38:	strb	r3, [r6]
   16d3c:	str	r5, [r0]
   16d40:	mov	r1, #36	; 0x24
   16d44:	mov	r0, r4
   16d48:	bl	20a20 <flatcc_builder_start_table@@Base>
   16d4c:	ldr	r1, [pc, #1260]	; 17240 <gen_monster@@Base+0xad0>
   16d50:	mov	r0, r4
   16d54:	add	r1, pc, r1
   16d58:	bl	22388 <flatcc_builder_create_string_str@@Base>
   16d5c:	subs	r6, r0, #0
   16d60:	beq	170ec <gen_monster@@Base+0x97c>
   16d64:	mov	r1, #3
   16d68:	mov	r0, r4
   16d6c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   16d70:	subs	r3, r0, #0
   16d74:	beq	170ec <gen_monster@@Base+0x97c>
   16d78:	mov	r0, r4
   16d7c:	str	r6, [r3]
   16d80:	bl	20800 <flatcc_builder_start_offset_vector@@Base>
   16d84:	mov	r1, #36	; 0x24
   16d88:	mov	r0, r4
   16d8c:	bl	20a20 <flatcc_builder_start_table@@Base>
   16d90:	mov	r3, #1
   16d94:	mov	r1, #7
   16d98:	mov	r2, r3
   16d9c:	mov	r0, r4
   16da0:	bl	22554 <flatcc_builder_table_add@@Base>
   16da4:	subs	r6, r0, #0
   16da8:	beq	16dcc <gen_monster@@Base+0x65c>
   16dac:	mov	r1, #8
   16db0:	mov	r0, r4
   16db4:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   16db8:	cmp	r0, #0
   16dbc:	beq	16dcc <gen_monster@@Base+0x65c>
   16dc0:	mov	r3, #1
   16dc4:	strb	r3, [r6]
   16dc8:	str	r5, [r0]
   16dcc:	ldr	r1, [pc, #1136]	; 17244 <gen_monster@@Base+0xad4>
   16dd0:	mov	r0, r4
   16dd4:	add	r1, pc, r1
   16dd8:	bl	22388 <flatcc_builder_create_string_str@@Base>
   16ddc:	subs	r6, r0, #0
   16de0:	beq	16df8 <gen_monster@@Base+0x688>
   16de4:	mov	r1, #3
   16de8:	mov	r0, r4
   16dec:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   16df0:	cmp	r0, #0
   16df4:	strne	r6, [r0]
   16df8:	ldr	r1, [pc, #1096]	; 17248 <gen_monster@@Base+0xad8>
   16dfc:	mov	r2, #1
   16e00:	mov	r0, r4
   16e04:	add	r1, pc, r1
   16e08:	add	r1, r1, #1024	; 0x400
   16e0c:	add	r1, r1, #4
   16e10:	bl	21358 <flatcc_builder_check_required@@Base>
   16e14:	cmp	r0, #0
   16e18:	beq	17158 <gen_monster@@Base+0x9e8>
   16e1c:	mov	r0, r4
   16e20:	bl	21404 <flatcc_builder_end_table@@Base>
   16e24:	subs	r1, r0, #0
   16e28:	beq	16e34 <gen_monster@@Base+0x6c4>
   16e2c:	mov	r0, r4
   16e30:	bl	20150 <flatcc_builder_offset_vector_push@@Base>
   16e34:	mov	r1, #36	; 0x24
   16e38:	mov	r0, r4
   16e3c:	bl	20a20 <flatcc_builder_start_table@@Base>
   16e40:	cmp	r5, #0
   16e44:	beq	16e84 <gen_monster@@Base+0x714>
   16e48:	mov	r3, #1
   16e4c:	mov	r1, #7
   16e50:	mov	r2, r3
   16e54:	mov	r0, r4
   16e58:	bl	22554 <flatcc_builder_table_add@@Base>
   16e5c:	subs	r6, r0, #0
   16e60:	beq	16e84 <gen_monster@@Base+0x714>
   16e64:	mov	r1, #8
   16e68:	mov	r0, r4
   16e6c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   16e70:	cmp	r0, #0
   16e74:	beq	16e84 <gen_monster@@Base+0x714>
   16e78:	mov	r3, #1
   16e7c:	strb	r3, [r6]
   16e80:	str	r5, [r0]
   16e84:	ldr	r1, [pc, #960]	; 1724c <gen_monster@@Base+0xadc>
   16e88:	mov	r0, r4
   16e8c:	add	r1, pc, r1
   16e90:	bl	22388 <flatcc_builder_create_string_str@@Base>
   16e94:	subs	r6, r0, #0
   16e98:	beq	16eb0 <gen_monster@@Base+0x740>
   16e9c:	mov	r1, #3
   16ea0:	mov	r0, r4
   16ea4:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   16ea8:	cmp	r0, #0
   16eac:	strne	r6, [r0]
   16eb0:	ldr	r1, [pc, #920]	; 17250 <gen_monster@@Base+0xae0>
   16eb4:	mov	r2, #1
   16eb8:	mov	r0, r4
   16ebc:	add	r1, pc, r1
   16ec0:	add	r1, r1, #1024	; 0x400
   16ec4:	add	r1, r1, #4
   16ec8:	bl	21358 <flatcc_builder_check_required@@Base>
   16ecc:	cmp	r0, #0
   16ed0:	beq	17158 <gen_monster@@Base+0x9e8>
   16ed4:	mov	r0, r4
   16ed8:	bl	21404 <flatcc_builder_end_table@@Base>
   16edc:	subs	r1, r0, #0
   16ee0:	beq	16eec <gen_monster@@Base+0x77c>
   16ee4:	mov	r0, r4
   16ee8:	bl	20150 <flatcc_builder_offset_vector_push@@Base>
   16eec:	mov	r1, #36	; 0x24
   16ef0:	mov	r0, r4
   16ef4:	bl	20a20 <flatcc_builder_start_table@@Base>
   16ef8:	mov	r1, #8
   16efc:	mov	r0, r4
   16f00:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   16f04:	ldr	r1, [pc, #840]	; 17254 <gen_monster@@Base+0xae4>
   16f08:	cmp	r0, #0
   16f0c:	strne	r5, [r0]
   16f10:	mov	r0, r4
   16f14:	add	r1, pc, r1
   16f18:	bl	22388 <flatcc_builder_create_string_str@@Base>
   16f1c:	subs	r5, r0, #0
   16f20:	beq	16f38 <gen_monster@@Base+0x7c8>
   16f24:	mov	r1, #3
   16f28:	mov	r0, r4
   16f2c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   16f30:	cmp	r0, #0
   16f34:	strne	r5, [r0]
   16f38:	mov	r3, #1
   16f3c:	mov	r1, #7
   16f40:	mov	r2, r3
   16f44:	mov	r0, r4
   16f48:	bl	22554 <flatcc_builder_table_add@@Base>
   16f4c:	ldr	r1, [pc, #772]	; 17258 <gen_monster@@Base+0xae8>
   16f50:	cmp	r0, #0
   16f54:	mov	r2, #1
   16f58:	movne	r3, #1
   16f5c:	strbne	r3, [r0]
   16f60:	mov	r0, r4
   16f64:	add	r1, pc, r1
   16f68:	add	r1, r1, #1024	; 0x400
   16f6c:	add	r1, r1, #4
   16f70:	bl	21358 <flatcc_builder_check_required@@Base>
   16f74:	cmp	r0, #0
   16f78:	beq	17158 <gen_monster@@Base+0x9e8>
   16f7c:	mov	r0, r4
   16f80:	bl	21404 <flatcc_builder_end_table@@Base>
   16f84:	subs	r1, r0, #0
   16f88:	beq	16f94 <gen_monster@@Base+0x824>
   16f8c:	mov	r0, r4
   16f90:	bl	20150 <flatcc_builder_offset_vector_push@@Base>
   16f94:	mov	r0, r4
   16f98:	bl	21888 <flatcc_builder_end_offset_vector@@Base>
   16f9c:	subs	r5, r0, #0
   16fa0:	beq	16fb8 <gen_monster@@Base+0x848>
   16fa4:	mov	r1, #11
   16fa8:	mov	r0, r4
   16fac:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   16fb0:	cmp	r0, #0
   16fb4:	strne	r5, [r0]
   16fb8:	ldr	r1, [pc, #668]	; 1725c <gen_monster@@Base+0xaec>
   16fbc:	mov	r2, #1
   16fc0:	mov	r0, r4
   16fc4:	add	r1, pc, r1
   16fc8:	add	r1, r1, #1024	; 0x400
   16fcc:	add	r1, r1, #4
   16fd0:	bl	21358 <flatcc_builder_check_required@@Base>
   16fd4:	cmp	r0, #0
   16fd8:	beq	17158 <gen_monster@@Base+0x9e8>
   16fdc:	mov	r0, r4
   16fe0:	bl	21404 <flatcc_builder_end_table@@Base>
   16fe4:	subs	r5, r0, #0
   16fe8:	beq	17000 <gen_monster@@Base+0x890>
   16fec:	mov	r1, #12
   16ff0:	mov	r0, r4
   16ff4:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   16ff8:	cmp	r0, #0
   16ffc:	strne	r5, [r0]
   17000:	mov	r3, #1
   17004:	mov	r1, #15
   17008:	mov	r2, r3
   1700c:	mov	r0, r4
   17010:	bl	22554 <flatcc_builder_table_add@@Base>
   17014:	cmp	r0, #0
   17018:	mov	r1, #3
   1701c:	movne	r3, #0
   17020:	strbne	r3, [r0]
   17024:	mov	r0, r4
   17028:	bl	20a20 <flatcc_builder_start_table@@Base>
   1702c:	ldr	r1, [pc, #556]	; 17260 <gen_monster@@Base+0xaf0>
   17030:	mov	r2, #0
   17034:	mov	r0, r4
   17038:	add	r1, pc, r1
   1703c:	add	r1, r1, #1280	; 0x500
   17040:	add	r1, r1, #8
   17044:	bl	21358 <flatcc_builder_check_required@@Base>
   17048:	cmp	r0, #0
   1704c:	beq	171b4 <gen_monster@@Base+0xa44>
   17050:	mov	r0, r4
   17054:	bl	21404 <flatcc_builder_end_table@@Base>
   17058:	subs	r5, r0, #0
   1705c:	beq	17074 <gen_monster@@Base+0x904>
   17060:	mov	r1, #14
   17064:	mov	r0, r4
   17068:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1706c:	cmp	r0, #0
   17070:	strne	r5, [r0]
   17074:	ldr	r1, [pc, #488]	; 17264 <gen_monster@@Base+0xaf4>
   17078:	mov	r2, #1
   1707c:	mov	r0, r4
   17080:	add	r1, pc, r1
   17084:	add	r1, r1, #1024	; 0x400
   17088:	add	r1, r1, #4
   1708c:	bl	21358 <flatcc_builder_check_required@@Base>
   17090:	cmp	r0, #0
   17094:	beq	17158 <gen_monster@@Base+0x9e8>
   17098:	mov	r0, r4
   1709c:	bl	21404 <flatcc_builder_end_table@@Base>
   170a0:	mov	r1, r0
   170a4:	mov	r0, r4
   170a8:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   170ac:	mov	r0, #0
   170b0:	add	sp, sp, #48	; 0x30
   170b4:	ldrd	r4, [sp]
   170b8:	ldrd	r6, [sp, #8]
   170bc:	ldr	r8, [sp, #16]
   170c0:	add	sp, sp, #20
   170c4:	pop	{pc}		; (ldr pc, [sp], #4)
   170c8:	ldr	r1, [pc, #408]	; 17268 <gen_monster@@Base+0xaf8>
   170cc:	mov	r3, r8
   170d0:	mov	r2, r8
   170d4:	mov	r0, r4
   170d8:	add	r1, pc, r1
   170dc:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   170e0:	cmp	r0, #0
   170e4:	beq	167e4 <gen_monster@@Base+0x74>
   170e8:	b	167f0 <gen_monster@@Base+0x80>
   170ec:	mov	r0, r4
   170f0:	bl	20800 <flatcc_builder_start_offset_vector@@Base>
   170f4:	mov	r1, #36	; 0x24
   170f8:	mov	r0, r4
   170fc:	bl	20a20 <flatcc_builder_start_table@@Base>
   17100:	b	16d90 <gen_monster@@Base+0x620>
   17104:	mov	r1, #36	; 0x24
   17108:	mov	r0, r4
   1710c:	bl	20a20 <flatcc_builder_start_table@@Base>
   17110:	ldr	r1, [pc, #340]	; 1726c <gen_monster@@Base+0xafc>
   17114:	mov	r0, r4
   17118:	add	r1, pc, r1
   1711c:	bl	22388 <flatcc_builder_create_string_str@@Base>
   17120:	subs	r6, r0, #0
   17124:	beq	1715c <gen_monster@@Base+0x9ec>
   17128:	mov	r1, #3
   1712c:	mov	r0, r4
   17130:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   17134:	subs	r3, r0, #0
   17138:	beq	1715c <gen_monster@@Base+0x9ec>
   1713c:	mov	r0, r4
   17140:	str	r6, [r3]
   17144:	bl	20800 <flatcc_builder_start_offset_vector@@Base>
   17148:	mov	r1, #36	; 0x24
   1714c:	mov	r0, r4
   17150:	bl	20a20 <flatcc_builder_start_table@@Base>
   17154:	b	16dcc <gen_monster@@Base+0x65c>
   17158:	bl	13668 <_start@@Base+0xaac>
   1715c:	mov	r0, r4
   17160:	bl	20800 <flatcc_builder_start_offset_vector@@Base>
   17164:	mov	r1, #36	; 0x24
   17168:	mov	r0, r4
   1716c:	bl	20a20 <flatcc_builder_start_table@@Base>
   17170:	b	16dcc <gen_monster@@Base+0x65c>
   17174:	ldr	r1, [pc, #244]	; 17270 <gen_monster@@Base+0xb00>
   17178:	add	r3, r6, #1264	; 0x4f0
   1717c:	movw	r2, #929	; 0x3a1
   17180:	add	r3, r3, #12
   17184:	ldr	r0, [pc, #232]	; 17274 <gen_monster@@Base+0xb04>
   17188:	add	r1, pc, r1
   1718c:	add	r0, pc, r0
   17190:	bl	129e0 <__assert_fail@plt>
   17194:	ldr	r1, [pc, #220]	; 17278 <gen_monster@@Base+0xb08>
   17198:	add	r3, r6, #1264	; 0x4f0
   1719c:	movw	r2, #923	; 0x39b
   171a0:	add	r3, r3, #12
   171a4:	ldr	r0, [pc, #208]	; 1727c <gen_monster@@Base+0xb0c>
   171a8:	add	r1, pc, r1
   171ac:	add	r0, pc, r0
   171b0:	bl	129e0 <__assert_fail@plt>
   171b4:	bl	136a0 <_start@@Base+0xae4>
   171b8:	ldr	r3, [pc, #192]	; 17280 <gen_monster@@Base+0xb10>
   171bc:	movw	r2, #883	; 0x373
   171c0:	ldr	r1, [pc, #188]	; 17284 <gen_monster@@Base+0xb14>
   171c4:	ldr	r0, [pc, #188]	; 17288 <gen_monster@@Base+0xb18>
   171c8:	add	r3, pc, r3
   171cc:	add	r3, r3, #1264	; 0x4f0
   171d0:	add	r1, pc, r1
   171d4:	add	r3, r3, #12
   171d8:	add	r0, pc, r0
   171dc:	bl	129e0 <__assert_fail@plt>
   171e0:	ldr	r3, [pc, #164]	; 1728c <gen_monster@@Base+0xb1c>
   171e4:	movw	r2, #881	; 0x371
   171e8:	ldr	r1, [pc, #160]	; 17290 <gen_monster@@Base+0xb20>
   171ec:	ldr	r0, [pc, #160]	; 17294 <gen_monster@@Base+0xb24>
   171f0:	add	r3, pc, r3
   171f4:	add	r3, r3, #1264	; 0x4f0
   171f8:	add	r1, pc, r1
   171fc:	add	r3, r3, #12
   17200:	add	r0, pc, r0
   17204:	bl	129e0 <__assert_fail@plt>
   17208:	ldr	r3, [r1]
   1720c:	udf	#0
   17210:	andeq	lr, r0, r8, asr #14
   17214:	andeq	pc, r0, r8, ror #6
   17218:	andeq	pc, r0, r8, lsl r4	; <UNPREDICTABLE>
   1721c:	strdeq	pc, [r0], -ip
   17220:	andeq	lr, r0, r4, lsl #9
   17224:	ldrdeq	pc, [r0], -r4
   17228:	strdeq	lr, [r0], -r8
   1722c:	andeq	pc, r0, r4, lsr #24
   17230:	andeq	lr, r0, ip, asr #6
   17234:	andeq	pc, r0, r8, ror r8	; <UNPREDICTABLE>
   17238:	muleq	r0, r0, r2
   1723c:	andeq	pc, r0, r0, lsr #17
   17240:	andeq	pc, r0, r0, lsl #17
   17244:	andeq	pc, r0, r4, lsl #20
   17248:	ldrdeq	lr, [r0], -ip
   1724c:	andeq	pc, r0, ip, asr #18
   17250:	andeq	lr, r0, r4, lsr #32
   17254:	andeq	pc, r0, r4, asr #17
   17258:	andeq	sp, r0, ip, ror pc
   1725c:	andeq	sp, r0, ip, lsl pc
   17260:	andeq	sp, r0, r8, lsr #29
   17264:	andeq	sp, r0, r0, ror #28
   17268:	andeq	lr, r0, r4, ror #20
   1726c:			; <UNDEFINED> instruction: 0x0000f4bc
   17270:	andeq	pc, r0, r4, lsr #2
   17274:	andeq	pc, r0, r8, lsl r6	; <UNPREDICTABLE>
   17278:	andeq	pc, r0, r4, lsl #2
   1727c:	andeq	pc, r0, r8, lsr #11
   17280:	andeq	sp, r0, r8, lsl sp
   17284:	ldrdeq	pc, [r0], -ip
   17288:	andeq	pc, r0, r4, asr r5	; <UNPREDICTABLE>
   1728c:	strdeq	sp, [r0], -r0
   17290:	strheq	pc, [r0], -r4	; <UNPREDICTABLE>
   17294:	andeq	pc, r0, r4, lsl #10

00017298 <test_monster@@Base>:
   17298:	mov	r1, #0
   1729c:	strd	r4, [sp, #-12]!
   172a0:	mov	r5, r0
   172a4:	str	lr, [sp, #8]
   172a8:	sub	sp, sp, #12
   172ac:	bl	16770 <gen_monster@@Base>
   172b0:	ldr	r4, [pc, #152]	; 17350 <test_monster@@Base+0xb8>
   172b4:	mov	r0, r5
   172b8:	add	r1, sp, #4
   172bc:	bl	22e80 <flatcc_builder_finalize_aligned_buffer@@Base>
   172c0:	ldr	r3, [pc, #140]	; 17354 <test_monster@@Base+0xbc>
   172c4:	mov	r1, r0
   172c8:	mov	r5, r0
   172cc:	ldr	r0, [pc, #132]	; 17358 <test_monster@@Base+0xc0>
   172d0:	add	r4, pc, r4
   172d4:	ldr	r2, [sp, #4]
   172d8:	ldr	r3, [r4, r3]
   172dc:	add	r0, pc, r0
   172e0:	ldr	r3, [r3]
   172e4:	bl	12cd8 <_start@@Base+0x11c>
   172e8:	ldr	r3, [pc, #108]	; 1735c <test_monster@@Base+0xc4>
   172ec:	mov	r0, r5
   172f0:	ldr	r2, [pc, #104]	; 17360 <test_monster@@Base+0xc8>
   172f4:	ldr	r1, [sp, #4]
   172f8:	add	r3, pc, r3
   172fc:	add	r2, pc, r2
   17300:	bl	2457c <flatcc_verify_table_as_root@@Base>
   17304:	cmp	r0, #0
   17308:	bne	17334 <test_monster@@Base+0x9c>
   1730c:	mov	r0, r5
   17310:	bl	15b3c <verify_monster@@Base>
   17314:	mov	r4, r0
   17318:	mov	r0, r5
   1731c:	bl	22fac <flatcc_builder_aligned_free@@Base>
   17320:	mov	r0, r4
   17324:	add	sp, sp, #12
   17328:	ldrd	r4, [sp]
   1732c:	add	sp, sp, #8
   17330:	pop	{pc}		; (ldr pc, [sp], #4)
   17334:	bl	235a8 <flatcc_verify_error_string@@Base>
   17338:	mov	r1, r0
   1733c:	ldr	r0, [pc, #32]	; 17364 <test_monster@@Base+0xcc>
   17340:	mvn	r4, #0
   17344:	add	r0, pc, r0
   17348:	bl	128f0 <printf@plt>
   1734c:	b	17320 <test_monster@@Base+0x88>
   17350:	andeq	r2, r2, r8, lsr #26
   17354:	andeq	r0, r0, r8, rrx
   17358:	andeq	lr, r0, r4, lsl sl
   1735c:			; <UNDEFINED> instruction: 0xffffc824
   17360:	andeq	lr, r0, r0, asr #16
   17364:	andeq	pc, r0, r0, lsr #9

00017368 <test_monster_with_size@@Base>:
   17368:	mov	r1, #1
   1736c:	strd	r4, [sp, #-12]!
   17370:	mov	r5, r0
   17374:	str	lr, [sp, #8]
   17378:	sub	sp, sp, #12
   1737c:	bl	16770 <gen_monster@@Base>
   17380:	ldr	r4, [pc, #244]	; 1747c <test_monster_with_size@@Base+0x114>
   17384:	mov	r0, r5
   17388:	add	r1, sp, #4
   1738c:	bl	22e80 <flatcc_builder_finalize_aligned_buffer@@Base>
   17390:	ldr	r3, [pc, #232]	; 17480 <test_monster_with_size@@Base+0x118>
   17394:	mov	r5, r0
   17398:	mov	r1, r0
   1739c:	ldr	r0, [pc, #224]	; 17484 <test_monster_with_size@@Base+0x11c>
   173a0:	add	r4, pc, r4
   173a4:	ldr	r2, [sp, #4]
   173a8:	ldr	r3, [r4, r3]
   173ac:	add	r0, pc, r0
   173b0:	ldr	r3, [r3]
   173b4:	bl	12cd8 <_start@@Base+0x11c>
   173b8:	tst	r5, #15
   173bc:	bne	17458 <test_monster_with_size@@Base+0xf0>
   173c0:	mov	r4, r5
   173c4:	ldr	r1, [sp, #4]
   173c8:	ldr	r3, [r4], #4
   173cc:	sub	r1, r1, #4
   173d0:	cmp	r1, r3
   173d4:	bne	17420 <test_monster_with_size@@Base+0xb8>
   173d8:	ldr	r3, [pc, #168]	; 17488 <test_monster_with_size@@Base+0x120>
   173dc:	mov	r0, r4
   173e0:	ldr	r2, [pc, #164]	; 1748c <test_monster_with_size@@Base+0x124>
   173e4:	add	r3, pc, r3
   173e8:	add	r2, pc, r2
   173ec:	bl	2457c <flatcc_verify_table_as_root@@Base>
   173f0:	cmp	r0, #0
   173f4:	bne	1743c <test_monster_with_size@@Base+0xd4>
   173f8:	mov	r0, r4
   173fc:	bl	15b3c <verify_monster@@Base>
   17400:	mov	r4, r0
   17404:	mov	r0, r5
   17408:	bl	22fac <flatcc_builder_aligned_free@@Base>
   1740c:	mov	r0, r4
   17410:	add	sp, sp, #12
   17414:	ldrd	r4, [sp]
   17418:	add	sp, sp, #8
   1741c:	pop	{pc}		; (ldr pc, [sp], #4)
   17420:	ldr	r0, [pc, #104]	; 17490 <test_monster_with_size@@Base+0x128>
   17424:	mov	r2, r1
   17428:	mov	r1, r3
   1742c:	mvn	r4, #0
   17430:	add	r0, pc, r0
   17434:	bl	128f0 <printf@plt>
   17438:	b	1740c <test_monster_with_size@@Base+0xa4>
   1743c:	bl	235a8 <flatcc_verify_error_string@@Base>
   17440:	mov	r1, r0
   17444:	ldr	r0, [pc, #72]	; 17494 <test_monster_with_size@@Base+0x12c>
   17448:	mvn	r4, #0
   1744c:	add	r0, pc, r0
   17450:	bl	128f0 <printf@plt>
   17454:	b	1740c <test_monster_with_size@@Base+0xa4>
   17458:	ldr	r0, [pc, #56]	; 17498 <test_monster_with_size@@Base+0x130>
   1745c:	mvn	r4, #0
   17460:	add	r0, pc, r0
   17464:	bl	128f0 <printf@plt>
   17468:	ldr	r0, [pc, #44]	; 1749c <test_monster_with_size@@Base+0x134>
   1746c:	mov	r1, r5
   17470:	add	r0, pc, r0
   17474:	bl	128f0 <printf@plt>
   17478:	b	1740c <test_monster_with_size@@Base+0xa4>
   1747c:	andeq	r2, r2, r8, asr ip
   17480:	andeq	r0, r0, r8, rrx
   17484:	andeq	pc, r0, r4, ror #8
   17488:			; <UNDEFINED> instruction: 0xffffc738
   1748c:	andeq	lr, r0, r4, asr r7
   17490:	andeq	pc, r0, r0, ror #8
   17494:	andeq	pc, r0, ip, ror r4	; <UNPREDICTABLE>
   17498:	andeq	pc, r0, r8, asr #7
   1749c:	andeq	pc, r0, ip, lsl #8

000174a0 <test_string@@Base>:
   174a0:	strd	r4, [sp, #-16]!
   174a4:	mov	r4, r0
   174a8:	str	r6, [sp, #8]
   174ac:	str	lr, [sp, #12]
   174b0:	bl	1f250 <flatcc_builder_reset@@Base>
   174b4:	ldr	r1, [pc, #716]	; 17788 <test_string@@Base+0x2e8>
   174b8:	mov	r3, #0
   174bc:	mov	r0, r4
   174c0:	mov	r2, r3
   174c4:	add	r1, pc, r1
   174c8:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   174cc:	cmp	r0, #0
   174d0:	bne	174e0 <test_string@@Base+0x40>
   174d4:	mov	r1, #36	; 0x24
   174d8:	mov	r0, r4
   174dc:	bl	20a20 <flatcc_builder_start_table@@Base>
   174e0:	mov	r0, r4
   174e4:	bl	2087c <flatcc_builder_start_string@@Base>
   174e8:	mov	r1, #3
   174ec:	mov	r0, r4
   174f0:	bl	20308 <flatcc_builder_extend_string@@Base>
   174f4:	ldr	r1, [pc, #656]	; 1778c <test_string@@Base+0x2ec>
   174f8:	mov	r3, r0
   174fc:	mov	ip, #50	; 0x32
   17500:	mov	r2, #51	; 0x33
   17504:	mov	r0, #49	; 0x31
   17508:	strb	r0, [r3]
   1750c:	mov	r0, r4
   17510:	strb	ip, [r3, #1]
   17514:	add	r1, pc, r1
   17518:	strb	r2, [r3, #2]
   1751c:	bl	20494 <flatcc_builder_append_string_str@@Base>
   17520:	mov	r0, r4
   17524:	bl	22548 <flatcc_builder_string_len@@Base>
   17528:	cmp	r0, #4
   1752c:	bne	17738 <test_string@@Base+0x298>
   17530:	ldr	r1, [pc, #600]	; 17790 <test_string@@Base+0x2f0>
   17534:	mov	r2, #30
   17538:	mov	r0, r4
   1753c:	add	r1, pc, r1
   17540:	bl	204d0 <flatcc_builder_append_string_strn@@Base>
   17544:	mov	r0, r4
   17548:	bl	22548 <flatcc_builder_string_len@@Base>
   1754c:	cmp	r0, #8
   17550:	bne	17710 <test_string@@Base+0x270>
   17554:	ldr	r1, [pc, #568]	; 17794 <test_string@@Base+0x2f4>
   17558:	mov	r2, #2
   1755c:	mov	r0, r4
   17560:	add	r1, pc, r1
   17564:	bl	203b8 <flatcc_builder_append_string@@Base>
   17568:	mov	r0, r4
   1756c:	bl	22548 <flatcc_builder_string_len@@Base>
   17570:	cmp	r0, #10
   17574:	bne	17760 <test_string@@Base+0x2c0>
   17578:	mov	r1, #3
   1757c:	mov	r0, r4
   17580:	bl	206ac <flatcc_builder_truncate_string@@Base>
   17584:	mov	r0, r4
   17588:	bl	22548 <flatcc_builder_string_len@@Base>
   1758c:	cmp	r0, #7
   17590:	bne	176c4 <test_string@@Base+0x224>
   17594:	mov	r0, r4
   17598:	bl	22540 <flatcc_builder_string_edit@@Base>
   1759c:	mov	r3, #46	; 0x2e
   175a0:	strb	r3, [r0, #4]
   175a4:	mov	r0, r4
   175a8:	bl	22410 <flatcc_builder_end_string@@Base>
   175ac:	subs	r5, r0, #0
   175b0:	beq	175c8 <test_string@@Base+0x128>
   175b4:	mov	r1, #3
   175b8:	mov	r0, r4
   175bc:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   175c0:	cmp	r0, #0
   175c4:	strne	r5, [r0]
   175c8:	ldr	r5, [pc, #456]	; 17798 <test_string@@Base+0x2f8>
   175cc:	mov	r2, #1
   175d0:	mov	r0, r4
   175d4:	add	r5, pc, r5
   175d8:	add	r1, r5, #1024	; 0x400
   175dc:	add	r1, r1, #4
   175e0:	bl	21358 <flatcc_builder_check_required@@Base>
   175e4:	cmp	r0, #0
   175e8:	beq	1770c <test_string@@Base+0x26c>
   175ec:	mov	r0, r4
   175f0:	bl	21404 <flatcc_builder_end_table@@Base>
   175f4:	mov	r1, r0
   175f8:	mov	r0, r4
   175fc:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   17600:	mov	r0, r4
   17604:	mov	r1, #0
   17608:	bl	22d14 <flatcc_builder_get_direct_buffer@@Base>
   1760c:	cmp	r0, #0
   17610:	beq	176ec <test_string@@Base+0x24c>
   17614:	ldr	r2, [r0, #4]
   17618:	movw	r3, #20301	; 0x4f4d
   1761c:	movt	r3, #21326	; 0x534e
   17620:	cmp	r2, r3
   17624:	beq	1762c <test_string@@Base+0x18c>
   17628:	bl	132a8 <_start@@Base+0x6ec>
   1762c:	ldr	r2, [r0]
   17630:	adds	r3, r0, r2
   17634:	beq	17628 <test_string@@Base+0x188>
   17638:	ldr	r2, [r0, r2]
   1763c:	sub	r2, r3, r2
   17640:	ldrh	r1, [r2]
   17644:	cmp	r1, #11
   17648:	bls	176a0 <test_string@@Base+0x200>
   1764c:	ldrh	r2, [r2, #10]
   17650:	cmp	r2, #0
   17654:	beq	176a0 <test_string@@Base+0x200>
   17658:	ldr	r0, [r3, r2]
   1765c:	add	r3, r3, r2
   17660:	ldr	r1, [pc, #308]	; 1779c <test_string@@Base+0x2fc>
   17664:	add	r0, r0, #4
   17668:	add	r0, r3, r0
   1766c:	add	r1, pc, r1
   17670:	bl	128e4 <strcmp@plt>
   17674:	cmp	r0, #0
   17678:	bne	1768c <test_string@@Base+0x1ec>
   1767c:	ldrd	r4, [sp]
   17680:	ldr	r6, [sp, #8]
   17684:	add	sp, sp, #12
   17688:	pop	{pc}		; (ldr pc, [sp], #4)
   1768c:	ldr	r0, [pc, #268]	; 177a0 <test_string@@Base+0x300>
   17690:	add	r0, pc, r0
   17694:	bl	12944 <puts@plt>
   17698:	mvn	r0, #0
   1769c:	b	1767c <test_string@@Base+0x1dc>
   176a0:	ldr	r3, [pc, #252]	; 177a4 <test_string@@Base+0x304>
   176a4:	movw	r2, #699	; 0x2bb
   176a8:	ldr	r1, [pc, #248]	; 177a8 <test_string@@Base+0x308>
   176ac:	ldr	r0, [pc, #248]	; 177ac <test_string@@Base+0x30c>
   176b0:	add	r3, pc, r3
   176b4:	add	r3, r3, #524	; 0x20c
   176b8:	add	r1, pc, r1
   176bc:	add	r0, pc, r0
   176c0:	bl	129e0 <__assert_fail@plt>
   176c4:	ldr	r3, [pc, #228]	; 177b0 <test_string@@Base+0x310>
   176c8:	movw	r2, #1086	; 0x43e
   176cc:	ldr	r1, [pc, #224]	; 177b4 <test_string@@Base+0x314>
   176d0:	ldr	r0, [pc, #224]	; 177b8 <test_string@@Base+0x318>
   176d4:	add	r3, pc, r3
   176d8:	add	r3, r3, #1280	; 0x500
   176dc:	add	r1, pc, r1
   176e0:	add	r3, r3, #12
   176e4:	add	r0, pc, r0
   176e8:	bl	129e0 <__assert_fail@plt>
   176ec:	ldr	r1, [pc, #200]	; 177bc <test_string@@Base+0x31c>
   176f0:	add	r3, r5, #1280	; 0x500
   176f4:	movw	r2, #1093	; 0x445
   176f8:	add	r3, r3, #12
   176fc:	ldr	r0, [pc, #188]	; 177c0 <test_string@@Base+0x320>
   17700:	add	r1, pc, r1
   17704:	add	r0, pc, r0
   17708:	bl	129e0 <__assert_fail@plt>
   1770c:	bl	13668 <_start@@Base+0xaac>
   17710:	ldr	r3, [pc, #172]	; 177c4 <test_string@@Base+0x324>
   17714:	movw	r2, #1082	; 0x43a
   17718:	ldr	r1, [pc, #168]	; 177c8 <test_string@@Base+0x328>
   1771c:	ldr	r0, [pc, #168]	; 177cc <test_string@@Base+0x32c>
   17720:	add	r3, pc, r3
   17724:	add	r3, r3, #1280	; 0x500
   17728:	add	r1, pc, r1
   1772c:	add	r3, r3, #12
   17730:	add	r0, pc, r0
   17734:	bl	129e0 <__assert_fail@plt>
   17738:	ldr	r3, [pc, #144]	; 177d0 <test_string@@Base+0x330>
   1773c:	movw	r2, #1080	; 0x438
   17740:	ldr	r1, [pc, #140]	; 177d4 <test_string@@Base+0x334>
   17744:	ldr	r0, [pc, #140]	; 177d8 <test_string@@Base+0x338>
   17748:	add	r3, pc, r3
   1774c:	add	r3, r3, #1280	; 0x500
   17750:	add	r1, pc, r1
   17754:	add	r3, r3, #12
   17758:	add	r0, pc, r0
   1775c:	bl	129e0 <__assert_fail@plt>
   17760:	ldr	r3, [pc, #116]	; 177dc <test_string@@Base+0x33c>
   17764:	movw	r2, #1084	; 0x43c
   17768:	ldr	r1, [pc, #112]	; 177e0 <test_string@@Base+0x340>
   1776c:	ldr	r0, [pc, #112]	; 177e4 <test_string@@Base+0x344>
   17770:	add	r3, pc, r3
   17774:	add	r3, r3, #1280	; 0x500
   17778:	add	r1, pc, r1
   1777c:	add	r3, r3, #12
   17780:	add	r0, pc, r0
   17784:	bl	129e0 <__assert_fail@plt>
   17788:	andeq	lr, r0, r8, ror r6
   1778c:	andeq	pc, r0, r4, lsl r4	; <UNPREDICTABLE>
   17790:	strdeq	pc, [r0], -r0
   17794:	strdeq	pc, [r0], -ip
   17798:	andeq	sp, r0, ip, lsl #18
   1779c:	andeq	pc, r0, r4, asr #6
   177a0:	andeq	pc, r0, r8, lsr #6
   177a4:	andeq	sp, r0, r0, lsr r8
   177a8:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   177ac:	strdeq	lr, [r0], -r4
   177b0:	andeq	sp, r0, ip, lsl #16
   177b4:	ldrdeq	lr, [r0], -r0
   177b8:	andeq	pc, r0, r4, lsr #5
   177bc:	andeq	lr, r0, ip, lsr #23
   177c0:	strdeq	lr, [r0], -ip
   177c4:	andeq	sp, r0, r0, asr #15
   177c8:	andeq	lr, r0, r4, lsl #23
   177cc:	andeq	pc, r0, r4, lsl #4
   177d0:	muleq	r0, r8, r7
   177d4:	andeq	lr, r0, ip, asr fp
   177d8:	andeq	pc, r0, ip, lsr #3
   177dc:	andeq	sp, r0, r0, ror r7
   177e0:	andeq	lr, r0, r4, lsr fp
   177e4:	andeq	pc, r0, r0, ror #3

000177e8 <test_sort_find@@Base>:
   177e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   177ec:	mov	r4, r0
   177f0:	strd	r6, [sp, #8]
   177f4:	strd	r8, [sp, #16]
   177f8:	strd	sl, [sp, #24]
   177fc:	str	lr, [sp, #32]
   17800:	sub	sp, sp, #52	; 0x34
   17804:	bl	1f250 <flatcc_builder_reset@@Base>
   17808:	ldr	r1, [pc, #3640]	; 18648 <test_sort_find@@Base+0xe60>
   1780c:	mov	r3, #0
   17810:	mov	r0, r4
   17814:	mov	r2, r3
   17818:	ldr	r5, [pc, #3628]	; 1864c <test_sort_find@@Base+0xe64>
   1781c:	add	r1, pc, r1
   17820:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   17824:	cmp	r0, #0
   17828:	add	r5, pc, r5
   1782c:	bne	1783c <test_sort_find@@Base+0x54>
   17830:	mov	r1, #36	; 0x24
   17834:	mov	r0, r4
   17838:	bl	20a20 <flatcc_builder_start_table@@Base>
   1783c:	ldr	r1, [pc, #3596]	; 18650 <test_sort_find@@Base+0xe68>
   17840:	mov	r0, r4
   17844:	add	r1, pc, r1
   17848:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1784c:	subs	r6, r0, #0
   17850:	beq	17868 <test_sort_find@@Base+0x80>
   17854:	mov	r1, #3
   17858:	mov	r0, r4
   1785c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   17860:	cmp	r0, #0
   17864:	strne	r6, [r0]
   17868:	mov	r0, r4
   1786c:	bl	20800 <flatcc_builder_start_offset_vector@@Base>
   17870:	mov	r1, #36	; 0x24
   17874:	mov	r0, r4
   17878:	bl	20a20 <flatcc_builder_start_table@@Base>
   1787c:	ldr	r1, [pc, #3536]	; 18654 <test_sort_find@@Base+0xe6c>
   17880:	mov	r0, r4
   17884:	add	r1, pc, r1
   17888:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1788c:	subs	r6, r0, #0
   17890:	beq	178a8 <test_sort_find@@Base+0xc0>
   17894:	mov	r1, #3
   17898:	mov	r0, r4
   1789c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   178a0:	cmp	r0, #0
   178a4:	strne	r6, [r0]
   178a8:	ldr	r1, [pc, #3496]	; 18658 <test_sort_find@@Base+0xe70>
   178ac:	mov	r2, #1
   178b0:	mov	r0, r4
   178b4:	add	r1, pc, r1
   178b8:	add	r1, r1, #1024	; 0x400
   178bc:	add	r1, r1, #4
   178c0:	bl	21358 <flatcc_builder_check_required@@Base>
   178c4:	cmp	r0, #0
   178c8:	beq	18cd8 <test_sort_find@@Base+0x14f0>
   178cc:	mov	r0, r4
   178d0:	bl	21404 <flatcc_builder_end_table@@Base>
   178d4:	subs	r1, r0, #0
   178d8:	beq	178e4 <test_sort_find@@Base+0xfc>
   178dc:	mov	r0, r4
   178e0:	bl	20150 <flatcc_builder_offset_vector_push@@Base>
   178e4:	mov	r1, #36	; 0x24
   178e8:	mov	r0, r4
   178ec:	bl	20a20 <flatcc_builder_start_table@@Base>
   178f0:	ldr	r1, [pc, #3428]	; 1865c <test_sort_find@@Base+0xe74>
   178f4:	mov	r0, r4
   178f8:	add	r1, pc, r1
   178fc:	bl	22388 <flatcc_builder_create_string_str@@Base>
   17900:	subs	r6, r0, #0
   17904:	beq	1791c <test_sort_find@@Base+0x134>
   17908:	mov	r1, #3
   1790c:	mov	r0, r4
   17910:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   17914:	cmp	r0, #0
   17918:	strne	r6, [r0]
   1791c:	ldr	r1, [pc, #3388]	; 18660 <test_sort_find@@Base+0xe78>
   17920:	mov	r2, #1
   17924:	mov	r0, r4
   17928:	add	r1, pc, r1
   1792c:	add	r1, r1, #1024	; 0x400
   17930:	add	r1, r1, #4
   17934:	bl	21358 <flatcc_builder_check_required@@Base>
   17938:	cmp	r0, #0
   1793c:	beq	18cd8 <test_sort_find@@Base+0x14f0>
   17940:	mov	r0, r4
   17944:	bl	21404 <flatcc_builder_end_table@@Base>
   17948:	subs	r1, r0, #0
   1794c:	beq	17958 <test_sort_find@@Base+0x170>
   17950:	mov	r0, r4
   17954:	bl	20150 <flatcc_builder_offset_vector_push@@Base>
   17958:	mov	r1, #36	; 0x24
   1795c:	mov	r0, r4
   17960:	bl	20a20 <flatcc_builder_start_table@@Base>
   17964:	ldr	r1, [pc, #3320]	; 18664 <test_sort_find@@Base+0xe7c>
   17968:	mov	r0, r4
   1796c:	add	r1, pc, r1
   17970:	bl	22388 <flatcc_builder_create_string_str@@Base>
   17974:	subs	r6, r0, #0
   17978:	beq	17990 <test_sort_find@@Base+0x1a8>
   1797c:	mov	r1, #3
   17980:	mov	r0, r4
   17984:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   17988:	cmp	r0, #0
   1798c:	strne	r6, [r0]
   17990:	ldr	r1, [pc, #3280]	; 18668 <test_sort_find@@Base+0xe80>
   17994:	mov	r2, #1
   17998:	mov	r0, r4
   1799c:	add	r1, pc, r1
   179a0:	add	r1, r1, #1024	; 0x400
   179a4:	add	r1, r1, #4
   179a8:	bl	21358 <flatcc_builder_check_required@@Base>
   179ac:	cmp	r0, #0
   179b0:	beq	18cd8 <test_sort_find@@Base+0x14f0>
   179b4:	mov	r0, r4
   179b8:	bl	21404 <flatcc_builder_end_table@@Base>
   179bc:	subs	r1, r0, #0
   179c0:	beq	179cc <test_sort_find@@Base+0x1e4>
   179c4:	mov	r0, r4
   179c8:	bl	20150 <flatcc_builder_offset_vector_push@@Base>
   179cc:	mov	r1, #36	; 0x24
   179d0:	mov	r0, r4
   179d4:	bl	20a20 <flatcc_builder_start_table@@Base>
   179d8:	ldr	r1, [pc, #3212]	; 1866c <test_sort_find@@Base+0xe84>
   179dc:	mov	r0, r4
   179e0:	add	r1, pc, r1
   179e4:	bl	22388 <flatcc_builder_create_string_str@@Base>
   179e8:	subs	r6, r0, #0
   179ec:	beq	17a04 <test_sort_find@@Base+0x21c>
   179f0:	mov	r1, #3
   179f4:	mov	r0, r4
   179f8:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   179fc:	cmp	r0, #0
   17a00:	strne	r6, [r0]
   17a04:	ldr	r1, [pc, #3172]	; 18670 <test_sort_find@@Base+0xe88>
   17a08:	mov	r2, #1
   17a0c:	mov	r0, r4
   17a10:	add	r1, pc, r1
   17a14:	add	r1, r1, #1024	; 0x400
   17a18:	add	r1, r1, #4
   17a1c:	bl	21358 <flatcc_builder_check_required@@Base>
   17a20:	cmp	r0, #0
   17a24:	beq	18cd8 <test_sort_find@@Base+0x14f0>
   17a28:	mov	r0, r4
   17a2c:	bl	21404 <flatcc_builder_end_table@@Base>
   17a30:	subs	r1, r0, #0
   17a34:	beq	17a40 <test_sort_find@@Base+0x258>
   17a38:	mov	r0, r4
   17a3c:	bl	20150 <flatcc_builder_offset_vector_push@@Base>
   17a40:	mov	r1, #36	; 0x24
   17a44:	mov	r0, r4
   17a48:	bl	20a20 <flatcc_builder_start_table@@Base>
   17a4c:	ldr	r1, [pc, #3104]	; 18674 <test_sort_find@@Base+0xe8c>
   17a50:	mov	r0, r4
   17a54:	add	r1, pc, r1
   17a58:	bl	22388 <flatcc_builder_create_string_str@@Base>
   17a5c:	subs	r6, r0, #0
   17a60:	beq	17a78 <test_sort_find@@Base+0x290>
   17a64:	mov	r1, #3
   17a68:	mov	r0, r4
   17a6c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   17a70:	cmp	r0, #0
   17a74:	strne	r6, [r0]
   17a78:	ldr	r1, [pc, #3064]	; 18678 <test_sort_find@@Base+0xe90>
   17a7c:	mov	r2, #1
   17a80:	mov	r0, r4
   17a84:	add	r1, pc, r1
   17a88:	add	r1, r1, #1024	; 0x400
   17a8c:	add	r1, r1, #4
   17a90:	bl	21358 <flatcc_builder_check_required@@Base>
   17a94:	cmp	r0, #0
   17a98:	beq	18cd8 <test_sort_find@@Base+0x14f0>
   17a9c:	mov	r0, r4
   17aa0:	bl	21404 <flatcc_builder_end_table@@Base>
   17aa4:	subs	r1, r0, #0
   17aa8:	beq	17ab4 <test_sort_find@@Base+0x2cc>
   17aac:	mov	r0, r4
   17ab0:	bl	20150 <flatcc_builder_offset_vector_push@@Base>
   17ab4:	mov	r0, r4
   17ab8:	bl	21888 <flatcc_builder_end_offset_vector@@Base>
   17abc:	subs	r6, r0, #0
   17ac0:	beq	17ad8 <test_sort_find@@Base+0x2f0>
   17ac4:	mov	r1, #11
   17ac8:	mov	r0, r4
   17acc:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   17ad0:	cmp	r0, #0
   17ad4:	strne	r6, [r0]
   17ad8:	ldr	r1, [pc, #2972]	; 1867c <test_sort_find@@Base+0xe94>
   17adc:	mov	r2, #1
   17ae0:	mov	r0, r4
   17ae4:	add	r1, pc, r1
   17ae8:	add	r1, r1, #1024	; 0x400
   17aec:	add	r1, r1, #4
   17af0:	bl	21358 <flatcc_builder_check_required@@Base>
   17af4:	cmp	r0, #0
   17af8:	beq	18cd8 <test_sort_find@@Base+0x14f0>
   17afc:	mov	r0, r4
   17b00:	bl	21404 <flatcc_builder_end_table@@Base>
   17b04:	mov	r1, r0
   17b08:	mov	r0, r4
   17b0c:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   17b10:	mov	r0, r4
   17b14:	add	r1, sp, #44	; 0x2c
   17b18:	bl	22e80 <flatcc_builder_finalize_aligned_buffer@@Base>
   17b1c:	ldr	r3, [pc, #2908]	; 18680 <test_sort_find@@Base+0xe98>
   17b20:	mov	r4, r0
   17b24:	mov	r1, r0
   17b28:	ldr	r0, [pc, #2900]	; 18684 <test_sort_find@@Base+0xe9c>
   17b2c:	str	r4, [sp, #8]
   17b30:	ldr	r2, [sp, #44]	; 0x2c
   17b34:	ldr	r3, [r5, r3]
   17b38:	add	r0, pc, r0
   17b3c:	str	r3, [sp, #24]
   17b40:	ldr	r3, [r3]
   17b44:	bl	12cd8 <_start@@Base+0x11c>
   17b48:	cmp	r4, #0
   17b4c:	beq	17b64 <test_sort_find@@Base+0x37c>
   17b50:	ldr	r2, [r4, #4]
   17b54:	movw	r3, #20301	; 0x4f4d
   17b58:	movt	r3, #21326	; 0x534e
   17b5c:	cmp	r2, r3
   17b60:	beq	17b68 <test_sort_find@@Base+0x380>
   17b64:	bl	1313c <_start@@Base+0x580>
   17b68:	ldr	r2, [sp, #8]
   17b6c:	ldr	r3, [r2]
   17b70:	adds	r2, r2, r3
   17b74:	beq	17b64 <test_sort_find@@Base+0x37c>
   17b78:	ldr	r1, [sp, #8]
   17b7c:	ldr	r3, [r1, r3]
   17b80:	sub	r3, r2, r3
   17b84:	ldrh	r1, [r3]
   17b88:	cmp	r1, #27
   17b8c:	bls	18544 <test_sort_find@@Base+0xd5c>
   17b90:	ldrh	r3, [r3, #26]
   17b94:	cmp	r3, #0
   17b98:	beq	18544 <test_sort_find@@Base+0xd5c>
   17b9c:	ldr	r1, [r2, r3]
   17ba0:	add	r3, r2, r3
   17ba4:	str	r3, [sp, #32]
   17ba8:	add	r2, r1, #4
   17bac:	adds	fp, r3, r2
   17bb0:	str	r2, [sp, #36]	; 0x24
   17bb4:	beq	18544 <test_sort_find@@Base+0xd5c>
   17bb8:	ldr	r3, [fp, #-4]
   17bbc:	cmp	r3, #0
   17bc0:	str	r3, [sp, #28]
   17bc4:	beq	18048 <test_sort_find@@Base+0x860>
   17bc8:	ldr	r2, [sp, #28]
   17bcc:	lsr	r3, r2, #1
   17bd0:	sub	sl, r2, #1
   17bd4:	str	r3, [sp, #12]
   17bd8:	lsl	r3, r3, #1
   17bdc:	str	r3, [sp, #4]
   17be0:	ldr	r3, [sp, #4]
   17be4:	cmp	sl, r3
   17be8:	bcc	17de0 <test_sort_find@@Base+0x5f8>
   17bec:	ldr	r4, [sp, #4]
   17bf0:	ldr	r7, [sp, #12]
   17bf4:	b	17c50 <test_sort_find@@Base+0x468>
   17bf8:	ldr	r8, [r0, #-4]
   17bfc:	str	r3, [sp, #20]
   17c00:	cmp	r9, r8
   17c04:	movcc	r2, r9
   17c08:	movcs	r2, r8
   17c0c:	bl	129c8 <strncmp@plt>
   17c10:	cmp	r0, #0
   17c14:	ldr	r3, [sp, #20]
   17c18:	beq	17dd8 <test_sort_find@@Base+0x5f0>
   17c1c:	bge	17de0 <test_sort_find@@Base+0x5f8>
   17c20:	sub	r2, r7, r4
   17c24:	lsl	r1, r4, #1
   17c28:	mov	r7, r4
   17c2c:	lsl	r2, r2, #2
   17c30:	cmp	sl, r1
   17c34:	sub	r6, r6, r2
   17c38:	add	r5, r5, r2
   17c3c:	ldr	r2, [sp, #16]
   17c40:	str	r6, [fp, r2]
   17c44:	str	r5, [fp, r3]
   17c48:	bcc	17de0 <test_sort_find@@Base+0x5f8>
   17c4c:	mov	r4, r1
   17c50:	cmp	r4, sl
   17c54:	ldr	r6, [fp, #-4]
   17c58:	bcs	17d28 <test_sort_find@@Base+0x540>
   17c5c:	lsl	r2, r4, #2
   17c60:	cmp	r4, r6
   17c64:	add	ip, fp, r2
   17c68:	bcs	18520 <test_sort_find@@Base+0xd38>
   17c6c:	ldr	r0, [fp, r4, lsl #2]
   17c70:	adds	r1, ip, r0
   17c74:	beq	184fc <test_sort_find@@Base+0xd14>
   17c78:	ldr	r0, [ip, r0]
   17c7c:	sub	r0, r1, r0
   17c80:	ldrh	ip, [r0]
   17c84:	cmp	ip, #11
   17c88:	bls	1837c <test_sort_find@@Base+0xb94>
   17c8c:	ldrh	ip, [r0, #10]
   17c90:	cmp	ip, #0
   17c94:	beq	1837c <test_sort_find@@Base+0xb94>
   17c98:	ldr	r0, [r1, ip]
   17c9c:	add	r8, r4, #1
   17ca0:	add	r1, r1, ip
   17ca4:	add	r2, r2, #4
   17ca8:	cmp	r8, r6
   17cac:	add	ip, fp, r2
   17cb0:	add	r0, r0, #4
   17cb4:	add	r0, r1, r0
   17cb8:	bcs	18520 <test_sort_find@@Base+0xd38>
   17cbc:	ldr	r2, [fp, r2]
   17cc0:	adds	r1, ip, r2
   17cc4:	beq	184fc <test_sort_find@@Base+0xd14>
   17cc8:	ldr	r2, [ip, r2]
   17ccc:	sub	r2, r1, r2
   17cd0:	ldrh	ip, [r2]
   17cd4:	cmp	ip, #11
   17cd8:	bls	1837c <test_sort_find@@Base+0xb94>
   17cdc:	ldrh	ip, [r2, #10]
   17ce0:	cmp	ip, #0
   17ce4:	beq	1837c <test_sort_find@@Base+0xb94>
   17ce8:	ldr	r2, [r1, ip]
   17cec:	add	r1, r1, ip
   17cf0:	add	r2, r2, #4
   17cf4:	adds	r1, r1, r2
   17cf8:	ldrne	r9, [r1, #-4]
   17cfc:	moveq	r9, #0
   17d00:	cmp	r0, #0
   17d04:	beq	1836c <test_sort_find@@Base+0xb84>
   17d08:	ldr	r5, [r0, #-4]
   17d0c:	cmp	r9, r5
   17d10:	movcc	r2, r9
   17d14:	movcs	r2, r5
   17d18:	bl	129c8 <strncmp@plt>
   17d1c:	cmp	r0, #0
   17d20:	beq	18370 <test_sort_find@@Base+0xb88>
   17d24:	movlt	r4, r8
   17d28:	lsl	r3, r7, #2
   17d2c:	cmp	r7, r6
   17d30:	add	r1, fp, r3
   17d34:	str	r3, [sp, #16]
   17d38:	bcs	18520 <test_sort_find@@Base+0xd38>
   17d3c:	ldr	r5, [fp, r7, lsl #2]
   17d40:	adds	r2, r1, r5
   17d44:	beq	184fc <test_sort_find@@Base+0xd14>
   17d48:	ldr	r1, [r1, r5]
   17d4c:	sub	r1, r2, r1
   17d50:	ldrh	r0, [r1]
   17d54:	cmp	r0, #11
   17d58:	bls	1837c <test_sort_find@@Base+0xb94>
   17d5c:	ldrh	r1, [r1, #10]
   17d60:	cmp	r1, #0
   17d64:	beq	1837c <test_sort_find@@Base+0xb94>
   17d68:	ldr	r0, [r2, r1]
   17d6c:	lsl	r3, r4, #2
   17d70:	add	r2, r2, r1
   17d74:	cmp	r4, r6
   17d78:	add	r1, fp, r3
   17d7c:	add	r0, r0, #4
   17d80:	add	r0, r2, r0
   17d84:	bcs	18520 <test_sort_find@@Base+0xd38>
   17d88:	ldr	r6, [fp, r4, lsl #2]
   17d8c:	adds	r2, r1, r6
   17d90:	beq	184fc <test_sort_find@@Base+0xd14>
   17d94:	ldr	r1, [r1, r6]
   17d98:	sub	r1, r2, r1
   17d9c:	ldrh	ip, [r1]
   17da0:	cmp	ip, #11
   17da4:	bls	1837c <test_sort_find@@Base+0xb94>
   17da8:	ldrh	ip, [r1, #10]
   17dac:	cmp	ip, #0
   17db0:	beq	1837c <test_sort_find@@Base+0xb94>
   17db4:	ldr	r1, [r2, ip]
   17db8:	add	r2, r2, ip
   17dbc:	add	r1, r1, #4
   17dc0:	adds	r1, r2, r1
   17dc4:	ldrne	r9, [r1, #-4]
   17dc8:	moveq	r9, r1
   17dcc:	cmp	r0, #0
   17dd0:	bne	17bf8 <test_sort_find@@Base+0x410>
   17dd4:	mov	r8, r0
   17dd8:	cmp	r9, r8
   17ddc:	bhi	17c20 <test_sort_find@@Base+0x438>
   17de0:	ldr	r2, [sp, #4]
   17de4:	ldr	r3, [sp, #12]
   17de8:	sub	r2, r2, #2
   17dec:	sub	r3, r3, #1
   17df0:	str	r2, [sp, #4]
   17df4:	cmn	r3, #1
   17df8:	str	r3, [sp, #12]
   17dfc:	bne	17be0 <test_sort_find@@Base+0x3f8>
   17e00:	cmp	sl, #0
   17e04:	beq	18048 <test_sort_find@@Base+0x860>
   17e08:	ldr	r3, [sp, #28]
   17e0c:	add	r2, fp, #4
   17e10:	str	r2, [sp, #20]
   17e14:	add	r3, fp, r3, lsl #2
   17e18:	ldr	r2, [sp, #20]
   17e1c:	mov	r7, #0
   17e20:	sub	sl, sl, #1
   17e24:	mov	r4, r7
   17e28:	ldr	ip, [r3, #-4]
   17e2c:	ldr	r0, [fp]
   17e30:	sub	r1, r3, r2
   17e34:	sub	r2, r2, r3
   17e38:	add	r1, r1, ip
   17e3c:	add	r2, r2, r0
   17e40:	str	r1, [fp]
   17e44:	sub	r1, r3, #4
   17e48:	str	r2, [r3, #-4]
   17e4c:	str	r1, [sp, #16]
   17e50:	b	17eac <test_sort_find@@Base+0x6c4>
   17e54:	ldr	r8, [r0, #-4]
   17e58:	str	r3, [sp, #12]
   17e5c:	cmp	r9, r8
   17e60:	movcc	r2, r9
   17e64:	movcs	r2, r8
   17e68:	bl	129c8 <strncmp@plt>
   17e6c:	cmp	r0, #0
   17e70:	ldr	r3, [sp, #12]
   17e74:	beq	18034 <test_sort_find@@Base+0x84c>
   17e78:	bge	1803c <test_sort_find@@Base+0x854>
   17e7c:	sub	r2, r7, r4
   17e80:	lsl	r1, r4, #1
   17e84:	mov	r7, r4
   17e88:	lsl	r2, r2, #2
   17e8c:	cmp	sl, r1
   17e90:	sub	r6, r6, r2
   17e94:	add	r5, r5, r2
   17e98:	ldr	r2, [sp, #4]
   17e9c:	str	r6, [fp, r2]
   17ea0:	str	r5, [fp, r3]
   17ea4:	bcc	1803c <test_sort_find@@Base+0x854>
   17ea8:	mov	r4, r1
   17eac:	cmp	r4, sl
   17eb0:	ldr	r6, [fp, #-4]
   17eb4:	bcs	17f84 <test_sort_find@@Base+0x79c>
   17eb8:	lsl	r2, r4, #2
   17ebc:	cmp	r4, r6
   17ec0:	add	ip, fp, r2
   17ec4:	bcs	18520 <test_sort_find@@Base+0xd38>
   17ec8:	ldr	r0, [fp, r4, lsl #2]
   17ecc:	adds	r1, ip, r0
   17ed0:	beq	184fc <test_sort_find@@Base+0xd14>
   17ed4:	ldr	r0, [ip, r0]
   17ed8:	sub	r0, r1, r0
   17edc:	ldrh	ip, [r0]
   17ee0:	cmp	ip, #11
   17ee4:	bls	1837c <test_sort_find@@Base+0xb94>
   17ee8:	ldrh	ip, [r0, #10]
   17eec:	cmp	ip, #0
   17ef0:	beq	1837c <test_sort_find@@Base+0xb94>
   17ef4:	ldr	r0, [r1, ip]
   17ef8:	add	r8, r4, #1
   17efc:	add	r1, r1, ip
   17f00:	add	r2, r2, #4
   17f04:	cmp	r8, r6
   17f08:	add	ip, fp, r2
   17f0c:	add	r0, r0, #4
   17f10:	add	r0, r1, r0
   17f14:	bcs	18520 <test_sort_find@@Base+0xd38>
   17f18:	ldr	r2, [fp, r2]
   17f1c:	adds	r1, ip, r2
   17f20:	beq	184fc <test_sort_find@@Base+0xd14>
   17f24:	ldr	r2, [ip, r2]
   17f28:	sub	r2, r1, r2
   17f2c:	ldrh	ip, [r2]
   17f30:	cmp	ip, #11
   17f34:	bls	1837c <test_sort_find@@Base+0xb94>
   17f38:	ldrh	ip, [r2, #10]
   17f3c:	cmp	ip, #0
   17f40:	beq	1837c <test_sort_find@@Base+0xb94>
   17f44:	ldr	r2, [r1, ip]
   17f48:	add	r1, r1, ip
   17f4c:	add	r2, r2, #4
   17f50:	adds	r1, r1, r2
   17f54:	ldrne	r9, [r1, #-4]
   17f58:	moveq	r9, #0
   17f5c:	cmp	r0, #0
   17f60:	beq	184ec <test_sort_find@@Base+0xd04>
   17f64:	ldr	r5, [r0, #-4]
   17f68:	cmp	r9, r5
   17f6c:	movcc	r2, r9
   17f70:	movcs	r2, r5
   17f74:	bl	129c8 <strncmp@plt>
   17f78:	cmp	r0, #0
   17f7c:	beq	184f0 <test_sort_find@@Base+0xd08>
   17f80:	movlt	r4, r8
   17f84:	lsl	r3, r7, #2
   17f88:	cmp	r7, r6
   17f8c:	add	r1, fp, r3
   17f90:	str	r3, [sp, #4]
   17f94:	bcs	18520 <test_sort_find@@Base+0xd38>
   17f98:	ldr	r5, [fp, r7, lsl #2]
   17f9c:	adds	r2, r1, r5
   17fa0:	beq	184fc <test_sort_find@@Base+0xd14>
   17fa4:	ldr	r1, [r1, r5]
   17fa8:	sub	r1, r2, r1
   17fac:	ldrh	r0, [r1]
   17fb0:	cmp	r0, #11
   17fb4:	bls	1837c <test_sort_find@@Base+0xb94>
   17fb8:	ldrh	r1, [r1, #10]
   17fbc:	cmp	r1, #0
   17fc0:	beq	1837c <test_sort_find@@Base+0xb94>
   17fc4:	ldr	r0, [r2, r1]
   17fc8:	lsl	r3, r4, #2
   17fcc:	add	r2, r2, r1
   17fd0:	cmp	r4, r6
   17fd4:	add	r1, fp, r3
   17fd8:	add	r0, r0, #4
   17fdc:	add	r0, r2, r0
   17fe0:	bcs	18520 <test_sort_find@@Base+0xd38>
   17fe4:	ldr	r6, [fp, r4, lsl #2]
   17fe8:	adds	r2, r1, r6
   17fec:	beq	184fc <test_sort_find@@Base+0xd14>
   17ff0:	ldr	r1, [r1, r6]
   17ff4:	sub	r1, r2, r1
   17ff8:	ldrh	ip, [r1]
   17ffc:	cmp	ip, #11
   18000:	bls	1837c <test_sort_find@@Base+0xb94>
   18004:	ldrh	ip, [r1, #10]
   18008:	cmp	ip, #0
   1800c:	beq	1837c <test_sort_find@@Base+0xb94>
   18010:	ldr	r1, [r2, ip]
   18014:	add	r2, r2, ip
   18018:	add	r1, r1, #4
   1801c:	adds	r1, r2, r1
   18020:	ldrne	r9, [r1, #-4]
   18024:	moveq	r9, r1
   18028:	cmp	r0, #0
   1802c:	bne	17e54 <test_sort_find@@Base+0x66c>
   18030:	mov	r8, r0
   18034:	cmp	r9, r8
   18038:	bhi	17e7c <test_sort_find@@Base+0x694>
   1803c:	cmp	sl, #0
   18040:	ldr	r3, [sp, #16]
   18044:	bne	17e18 <test_sort_find@@Base+0x630>
   18048:	ldr	r0, [pc, #1592]	; 18688 <test_sort_find@@Base+0xea0>
   1804c:	ldr	r1, [sp, #8]
   18050:	ldr	r3, [sp, #24]
   18054:	add	r0, pc, r0
   18058:	ldr	r2, [sp, #44]	; 0x2c
   1805c:	ldr	r3, [r3]
   18060:	bl	12cd8 <_start@@Base+0x11c>
   18064:	ldr	r3, [fp, #-4]
   18068:	cmp	r3, #5
   1806c:	bne	18ba0 <test_sort_find@@Base+0x13b8>
   18070:	ldr	r3, [sp, #32]
   18074:	ldr	r2, [sp, #36]	; 0x24
   18078:	ldr	r3, [r3, r2]
   1807c:	adds	r0, fp, r3
   18080:	beq	18cdc <test_sort_find@@Base+0x14f4>
   18084:	ldr	r3, [fp, r3]
   18088:	sub	r3, r0, r3
   1808c:	ldrh	r2, [r3]
   18090:	cmp	r2, #11
   18094:	bls	1837c <test_sort_find@@Base+0xb94>
   18098:	ldrh	r2, [r3, #10]
   1809c:	cmp	r2, #0
   180a0:	beq	1837c <test_sort_find@@Base+0xb94>
   180a4:	ldr	r3, [r0, r2]
   180a8:	add	r0, r0, r2
   180ac:	ldr	r1, [pc, #1496]	; 1868c <test_sort_find@@Base+0xea4>
   180b0:	add	r3, r3, #4
   180b4:	add	r0, r0, r3
   180b8:	add	r1, pc, r1
   180bc:	bl	128e4 <strcmp@plt>
   180c0:	cmp	r0, #0
   180c4:	bne	18c30 <test_sort_find@@Base+0x1448>
   180c8:	ldr	r4, [fp, #4]
   180cc:	add	r4, r4, #4
   180d0:	adds	r0, fp, r4
   180d4:	beq	18cdc <test_sort_find@@Base+0x14f4>
   180d8:	ldr	r3, [fp, r4]
   180dc:	sub	r3, r0, r3
   180e0:	ldrh	r2, [r3]
   180e4:	cmp	r2, #11
   180e8:	bls	1837c <test_sort_find@@Base+0xb94>
   180ec:	ldrh	r2, [r3, #10]
   180f0:	cmp	r2, #0
   180f4:	beq	1837c <test_sort_find@@Base+0xb94>
   180f8:	ldr	r3, [r0, r2]
   180fc:	add	r0, r0, r2
   18100:	ldr	r1, [pc, #1416]	; 18690 <test_sort_find@@Base+0xea8>
   18104:	add	r3, r3, #4
   18108:	add	r0, r0, r3
   1810c:	add	r1, pc, r1
   18110:	bl	128e4 <strcmp@plt>
   18114:	cmp	r0, #0
   18118:	bne	18c48 <test_sort_find@@Base+0x1460>
   1811c:	ldr	r6, [fp, #8]
   18120:	add	r6, r6, #8
   18124:	adds	r0, fp, r6
   18128:	beq	18cdc <test_sort_find@@Base+0x14f4>
   1812c:	ldr	r3, [fp, r6]
   18130:	sub	r3, r0, r3
   18134:	ldrh	r2, [r3]
   18138:	cmp	r2, #11
   1813c:	bls	1837c <test_sort_find@@Base+0xb94>
   18140:	ldrh	r3, [r3, #10]
   18144:	cmp	r3, #0
   18148:	beq	1837c <test_sort_find@@Base+0xb94>
   1814c:	ldr	r2, [r0, r3]
   18150:	add	r0, r0, r3
   18154:	ldr	r1, [pc, #1336]	; 18694 <test_sort_find@@Base+0xeac>
   18158:	add	r2, r2, #4
   1815c:	add	r0, r0, r2
   18160:	add	r1, pc, r1
   18164:	bl	128e4 <strcmp@plt>
   18168:	cmp	r0, #0
   1816c:	bne	18c60 <test_sort_find@@Base+0x1478>
   18170:	ldr	r3, [fp, #12]
   18174:	add	r3, r3, #12
   18178:	adds	r0, fp, r3
   1817c:	beq	18cdc <test_sort_find@@Base+0x14f4>
   18180:	ldr	r3, [fp, r3]
   18184:	sub	r3, r0, r3
   18188:	ldrh	r2, [r3]
   1818c:	cmp	r2, #11
   18190:	bls	1837c <test_sort_find@@Base+0xb94>
   18194:	ldrh	r2, [r3, #10]
   18198:	cmp	r2, #0
   1819c:	beq	1837c <test_sort_find@@Base+0xb94>
   181a0:	ldr	r3, [r0, r2]
   181a4:	add	r0, r0, r2
   181a8:	ldr	r1, [pc, #1256]	; 18698 <test_sort_find@@Base+0xeb0>
   181ac:	add	r3, r3, #4
   181b0:	add	r0, r0, r3
   181b4:	add	r1, pc, r1
   181b8:	bl	128e4 <strcmp@plt>
   181bc:	cmp	r0, #0
   181c0:	bne	18c78 <test_sort_find@@Base+0x1490>
   181c4:	ldr	r3, [fp, #16]
   181c8:	add	r3, r3, #16
   181cc:	adds	r0, fp, r3
   181d0:	beq	18cdc <test_sort_find@@Base+0x14f4>
   181d4:	ldr	r3, [fp, r3]
   181d8:	sub	r3, r0, r3
   181dc:	ldrh	r2, [r3]
   181e0:	cmp	r2, #11
   181e4:	bls	1837c <test_sort_find@@Base+0xb94>
   181e8:	ldrh	r2, [r3, #10]
   181ec:	cmp	r2, #0
   181f0:	beq	1837c <test_sort_find@@Base+0xb94>
   181f4:	ldr	r3, [r0, r2]
   181f8:	add	r0, r0, r2
   181fc:	ldr	r1, [pc, #1176]	; 1869c <test_sort_find@@Base+0xeb4>
   18200:	add	r3, r3, #4
   18204:	add	r0, r0, r3
   18208:	add	r1, pc, r1
   1820c:	bl	128e4 <strcmp@plt>
   18210:	subs	r5, r0, #0
   18214:	bne	18cc0 <test_sort_find@@Base+0x14d8>
   18218:	cmp	r4, r6
   1821c:	beq	18ca8 <test_sort_find@@Base+0x14c0>
   18220:	ldr	r1, [pc, #1144]	; 186a0 <test_sort_find@@Base+0xeb8>
   18224:	mov	r0, fp
   18228:	add	r1, pc, r1
   1822c:	bl	14930 <_start@@Base+0x1d74>
   18230:	cmp	r0, #3
   18234:	bne	18bb8 <test_sort_find@@Base+0x13d0>
   18238:	ldr	r6, [pc, #1124]	; 186a4 <test_sort_find@@Base+0xebc>
   1823c:	mov	r7, #4
   18240:	add	r6, pc, r6
   18244:	sub	r4, r7, r5
   18248:	add	r4, r5, r4, lsr #1
   1824c:	cmp	r4, #4
   18250:	add	r2, fp, r4, lsl #2
   18254:	bhi	18ca4 <test_sort_find@@Base+0x14bc>
   18258:	ldr	r3, [fp, r4, lsl #2]
   1825c:	adds	r1, r2, r3
   18260:	beq	184fc <test_sort_find@@Base+0xd14>
   18264:	ldr	r3, [r2, r3]
   18268:	sub	r3, r1, r3
   1826c:	ldrh	r2, [r3]
   18270:	cmp	r2, #11
   18274:	bhi	182e4 <test_sort_find@@Base+0xafc>
   18278:	b	1837c <test_sort_find@@Base+0xb94>
   1827c:	ldr	r8, [r0, #-4]
   18280:	mov	r1, r6
   18284:	cmp	r8, #5
   18288:	movcc	r2, r8
   1828c:	movcs	r2, #5
   18290:	bl	129c8 <strncmp@plt>
   18294:	cmp	r0, #0
   18298:	beq	18354 <test_sort_find@@Base+0xb6c>
   1829c:	blt	18304 <test_sort_find@@Base+0xb1c>
   182a0:	cmp	r4, r5
   182a4:	bls	18364 <test_sort_find@@Base+0xb7c>
   182a8:	sub	r2, r4, r5
   182ac:	add	r2, r5, r2, lsr #1
   182b0:	cmp	r2, #4
   182b4:	add	r0, fp, r2, lsl #2
   182b8:	bhi	18ca4 <test_sort_find@@Base+0x14bc>
   182bc:	ldr	r3, [fp, r2, lsl #2]
   182c0:	adds	r1, r0, r3
   182c4:	beq	184fc <test_sort_find@@Base+0xd14>
   182c8:	ldr	r3, [r0, r3]
   182cc:	mov	r7, r4
   182d0:	sub	r3, r1, r3
   182d4:	ldrh	r0, [r3]
   182d8:	cmp	r0, #11
   182dc:	bls	1837c <test_sort_find@@Base+0xb94>
   182e0:	mov	r4, r2
   182e4:	ldrh	r0, [r3, #10]
   182e8:	cmp	r0, #0
   182ec:	beq	1837c <test_sort_find@@Base+0xb94>
   182f0:	ldr	r3, [r1, r0]
   182f4:	add	r0, r1, r0
   182f8:	add	r3, r3, #4
   182fc:	adds	r0, r0, r3
   18300:	bne	1827c <test_sort_find@@Base+0xa94>
   18304:	add	r5, r4, #1
   18308:	cmp	r7, r5
   1830c:	bhi	18244 <test_sort_find@@Base+0xa5c>
   18310:	cmp	r5, r7
   18314:	beq	183a0 <test_sort_find@@Base+0xbb8>
   18318:	ldr	r0, [pc, #904]	; 186a8 <test_sort_find@@Base+0xec0>
   1831c:	mvn	r3, #0
   18320:	str	r3, [sp, #20]
   18324:	add	r0, pc, r0
   18328:	bl	12944 <puts@plt>
   1832c:	ldr	r0, [sp, #8]
   18330:	bl	22fac <flatcc_builder_aligned_free@@Base>
   18334:	ldr	r0, [sp, #20]
   18338:	add	sp, sp, #52	; 0x34
   1833c:	ldrd	r4, [sp]
   18340:	ldrd	r6, [sp, #8]
   18344:	ldrd	r8, [sp, #16]
   18348:	ldrd	sl, [sp, #24]
   1834c:	add	sp, sp, #32
   18350:	pop	{pc}		; (ldr pc, [sp], #4)
   18354:	cmp	r8, #4
   18358:	bls	18304 <test_sort_find@@Base+0xb1c>
   1835c:	cmp	r4, r5
   18360:	bhi	182a8 <test_sort_find@@Base+0xac0>
   18364:	mov	r7, r4
   18368:	b	18310 <test_sort_find@@Base+0xb28>
   1836c:	mov	r5, r0
   18370:	cmp	r9, r5
   18374:	movhi	r4, r8
   18378:	b	17d28 <test_sort_find@@Base+0x540>
   1837c:	ldr	r3, [pc, #808]	; 186ac <test_sort_find@@Base+0xec4>
   18380:	movw	r2, #699	; 0x2bb
   18384:	ldr	r1, [pc, #804]	; 186b0 <test_sort_find@@Base+0xec8>
   18388:	ldr	r0, [pc, #804]	; 186b4 <test_sort_find@@Base+0xecc>
   1838c:	add	r3, pc, r3
   18390:	add	r3, r3, #524	; 0x20c
   18394:	add	r1, pc, r1
   18398:	add	r0, pc, r0
   1839c:	bl	129e0 <__assert_fail@plt>
   183a0:	ldr	r3, [fp, r5, lsl #2]
   183a4:	add	r0, fp, r5, lsl #2
   183a8:	add	r0, r0, r3
   183ac:	bl	132e0 <_start@@Base+0x724>
   183b0:	subs	r3, r0, #0
   183b4:	beq	18318 <test_sort_find@@Base+0xb30>
   183b8:	ldr	r4, [r3, #-4]
   183bc:	ldr	r1, [pc, #756]	; 186b8 <test_sort_find@@Base+0xed0>
   183c0:	cmp	r4, #5
   183c4:	movcc	r2, r4
   183c8:	movcs	r2, #5
   183cc:	add	r1, pc, r1
   183d0:	bl	129c8 <strncmp@plt>
   183d4:	cmp	r0, #0
   183d8:	bne	18318 <test_sort_find@@Base+0xb30>
   183dc:	cmp	r4, #5
   183e0:	bne	18318 <test_sort_find@@Base+0xb30>
   183e4:	cmp	r5, #3
   183e8:	bne	18318 <test_sort_find@@Base+0xb30>
   183ec:	ldr	r6, [pc, #712]	; 186bc <test_sort_find@@Base+0xed4>
   183f0:	mov	r5, r0
   183f4:	mov	r7, #4
   183f8:	add	r6, pc, r6
   183fc:	sub	r4, r7, r5
   18400:	add	r4, r5, r4, lsr #1
   18404:	cmp	r4, #4
   18408:	add	r2, fp, r4, lsl #2
   1840c:	bhi	18ca4 <test_sort_find@@Base+0x14bc>
   18410:	ldr	r3, [fp, r4, lsl #2]
   18414:	adds	r1, r2, r3
   18418:	beq	184fc <test_sort_find@@Base+0xd14>
   1841c:	ldr	r2, [r2, r3]
   18420:	sub	r2, r1, r2
   18424:	ldrh	r3, [r2]
   18428:	cmp	r3, #11
   1842c:	bhi	1849c <test_sort_find@@Base+0xcb4>
   18430:	b	1837c <test_sort_find@@Base+0xb94>
   18434:	ldr	r8, [r0, #-4]
   18438:	mov	r1, r6
   1843c:	cmp	r8, #5
   18440:	movcc	r2, r8
   18444:	movcs	r2, #5
   18448:	bl	129c8 <strncmp@plt>
   1844c:	cmp	r0, #0
   18450:	beq	1856c <test_sort_find@@Base+0xd84>
   18454:	blt	184bc <test_sort_find@@Base+0xcd4>
   18458:	cmp	r4, r5
   1845c:	bls	184cc <test_sort_find@@Base+0xce4>
   18460:	sub	r3, r4, r5
   18464:	add	r3, r5, r3, lsr #1
   18468:	cmp	r3, #4
   1846c:	add	r0, fp, r3, lsl #2
   18470:	bhi	18ca4 <test_sort_find@@Base+0x14bc>
   18474:	ldr	r2, [fp, r3, lsl #2]
   18478:	adds	r1, r0, r2
   1847c:	beq	184fc <test_sort_find@@Base+0xd14>
   18480:	ldr	r2, [r0, r2]
   18484:	mov	r7, r4
   18488:	sub	r2, r1, r2
   1848c:	ldrh	r0, [r2]
   18490:	cmp	r0, #11
   18494:	bls	1837c <test_sort_find@@Base+0xb94>
   18498:	mov	r4, r3
   1849c:	ldrh	r0, [r2, #10]
   184a0:	cmp	r0, #0
   184a4:	beq	1837c <test_sort_find@@Base+0xb94>
   184a8:	ldr	r3, [r1, r0]
   184ac:	add	r0, r1, r0
   184b0:	add	r3, r3, #4
   184b4:	adds	r0, r0, r3
   184b8:	bne	18434 <test_sort_find@@Base+0xc4c>
   184bc:	add	r5, r4, #1
   184c0:	cmp	r7, r5
   184c4:	bhi	183fc <test_sort_find@@Base+0xc14>
   184c8:	mov	r4, r7
   184cc:	cmp	r4, r5
   184d0:	beq	18578 <test_sort_find@@Base+0xd90>
   184d4:	ldr	r0, [pc, #484]	; 186c0 <test_sort_find@@Base+0xed8>
   184d8:	mvn	r3, #0
   184dc:	str	r3, [sp, #20]
   184e0:	add	r0, pc, r0
   184e4:	bl	12944 <puts@plt>
   184e8:	b	1832c <test_sort_find@@Base+0xb44>
   184ec:	mov	r5, r0
   184f0:	cmp	r9, r5
   184f4:	movhi	r4, r8
   184f8:	b	17f84 <test_sort_find@@Base+0x79c>
   184fc:	ldr	r3, [pc, #448]	; 186c4 <test_sort_find@@Base+0xedc>
   18500:	movw	r2, #699	; 0x2bb
   18504:	ldr	r1, [pc, #444]	; 186c8 <test_sort_find@@Base+0xee0>
   18508:	ldr	r0, [pc, #444]	; 186cc <test_sort_find@@Base+0xee4>
   1850c:	add	r3, pc, r3
   18510:	add	r3, r3, #524	; 0x20c
   18514:	add	r1, pc, r1
   18518:	add	r0, pc, r0
   1851c:	bl	129e0 <__assert_fail@plt>
   18520:	ldr	r3, [pc, #424]	; 186d0 <test_sort_find@@Base+0xee8>
   18524:	movw	r2, #693	; 0x2b5
   18528:	ldr	r1, [pc, #420]	; 186d4 <test_sort_find@@Base+0xeec>
   1852c:	ldr	r0, [pc, #420]	; 186d8 <test_sort_find@@Base+0xef0>
   18530:	add	r3, pc, r3
   18534:	add	r3, r3, #428	; 0x1ac
   18538:	add	r1, pc, r1
   1853c:	add	r0, pc, r0
   18540:	bl	129e0 <__assert_fail@plt>
   18544:	ldr	r3, [pc, #400]	; 186dc <test_sort_find@@Base+0xef4>
   18548:	movw	r2, #1147	; 0x47b
   1854c:	ldr	r1, [pc, #396]	; 186e0 <test_sort_find@@Base+0xef8>
   18550:	ldr	r0, [pc, #396]	; 186e4 <test_sort_find@@Base+0xefc>
   18554:	add	r3, pc, r3
   18558:	add	r3, r3, #1296	; 0x510
   1855c:	add	r1, pc, r1
   18560:	add	r3, r3, #8
   18564:	add	r0, pc, r0
   18568:	bl	129e0 <__assert_fail@plt>
   1856c:	cmp	r8, #4
   18570:	bhi	18458 <test_sort_find@@Base+0xc70>
   18574:	b	184bc <test_sort_find@@Base+0xcd4>
   18578:	ldr	r3, [fp, r4, lsl #2]
   1857c:	add	r0, fp, r4, lsl #2
   18580:	add	r0, r0, r3
   18584:	bl	132e0 <_start@@Base+0x724>
   18588:	subs	r3, r0, #0
   1858c:	beq	184d4 <test_sort_find@@Base+0xcec>
   18590:	ldr	r7, [r3, #-4]
   18594:	ldr	r1, [pc, #332]	; 186e8 <test_sort_find@@Base+0xf00>
   18598:	cmp	r7, #5
   1859c:	movcc	r2, r7
   185a0:	movcs	r2, #5
   185a4:	add	r1, pc, r1
   185a8:	bl	129c8 <strncmp@plt>
   185ac:	subs	r3, r0, #0
   185b0:	str	r3, [sp, #20]
   185b4:	bne	184d4 <test_sort_find@@Base+0xcec>
   185b8:	cmp	r7, #5
   185bc:	bne	184d4 <test_sort_find@@Base+0xcec>
   185c0:	cmp	r4, #3
   185c4:	bne	184d4 <test_sort_find@@Base+0xcec>
   185c8:	ldr	r1, [pc, #284]	; 186ec <test_sort_find@@Base+0xf04>
   185cc:	mov	r0, fp
   185d0:	add	r1, pc, r1
   185d4:	bl	14930 <_start@@Base+0x1d74>
   185d8:	cmn	r0, #1
   185dc:	mov	r4, r0
   185e0:	bne	18bd0 <test_sort_find@@Base+0x13e8>
   185e4:	ldr	r1, [pc, #260]	; 186f0 <test_sort_find@@Base+0xf08>
   185e8:	mov	r0, fp
   185ec:	add	r1, pc, r1
   185f0:	bl	14930 <_start@@Base+0x1d74>
   185f4:	cmp	r0, #0
   185f8:	bne	18c90 <test_sort_find@@Base+0x14a8>
   185fc:	ldr	r1, [pc, #240]	; 186f4 <test_sort_find@@Base+0xf0c>
   18600:	mov	r0, fp
   18604:	add	r1, pc, r1
   18608:	bl	14930 <_start@@Base+0x1d74>
   1860c:	cmp	r0, #1
   18610:	mov	r5, r0
   18614:	bne	18be8 <test_sort_find@@Base+0x1400>
   18618:	ldr	r1, [pc, #216]	; 186f8 <test_sort_find@@Base+0xf10>
   1861c:	mov	r0, fp
   18620:	add	r1, pc, r1
   18624:	bl	14930 <_start@@Base+0x1d74>
   18628:	cmp	r0, #4
   1862c:	str	r0, [sp, #4]
   18630:	moveq	r8, #2
   18634:	moveq	sl, r8
   18638:	bne	18c0c <test_sort_find@@Base+0x1424>
   1863c:	lsl	r4, sl, #1
   18640:	mov	r5, sl
   18644:	b	1879c <test_sort_find@@Base+0xfb4>
   18648:	andeq	lr, r0, r0, lsr #6
   1864c:	ldrdeq	r2, [r2], -r0
   18650:	andeq	lr, r0, r0, lsr #8
   18654:	andeq	lr, r0, r4, lsr #21
   18658:	andeq	sp, r0, ip, lsr #12
   1865c:	muleq	r0, r4, sl
   18660:			; <UNDEFINED> instruction: 0x0000d5b8
   18664:	andeq	lr, r0, ip, asr #20
   18668:	andeq	sp, r0, r4, asr #10
   1866c:	andeq	lr, r0, ip, ror #31
   18670:	ldrdeq	sp, [r0], -r0
   18674:	andeq	lr, r0, r4, ror #18
   18678:	andeq	sp, r0, ip, asr r4
   1867c:	strdeq	sp, [r0], -ip
   18680:	andeq	r0, r0, r8, rrx
   18684:	muleq	r0, ip, lr
   18688:	andeq	lr, r0, r4, lsr #19
   1868c:	andeq	lr, r0, r4, lsl r9
   18690:	andeq	lr, r0, ip, lsr #5
   18694:	andeq	lr, r0, r8, asr r2
   18698:	ldrdeq	lr, [r0], -r8
   1869c:	andeq	lr, r0, r0, lsr #2
   186a0:	andeq	lr, r0, r4, ror #2
   186a4:	andeq	lr, r0, ip, lsl #18
   186a8:	andeq	lr, r0, r0, lsr r8
   186ac:	andeq	ip, r0, r4, asr fp
   186b0:	andeq	sp, r0, r0, asr #5
   186b4:	andeq	sp, r0, r8, lsl r4
   186b8:	andeq	lr, r0, r0, lsl #15
   186bc:	muleq	r0, r0, r7
   186c0:			; <UNDEFINED> instruction: 0x0000e6b0
   186c4:	ldrdeq	ip, [r0], -r4
   186c8:	andeq	sp, r0, r0, asr #2
   186cc:			; <UNDEFINED> instruction: 0x0000d1b8
   186d0:			; <UNDEFINED> instruction: 0x0000c9b0
   186d4:	andeq	sp, r0, ip, lsl r1
   186d8:	andeq	sp, r0, ip, lsr r2
   186dc:	andeq	ip, r0, ip, lsl #19
   186e0:	andeq	sp, r0, r0, asr sp
   186e4:	andeq	lr, r0, r8, lsl #9
   186e8:	andeq	lr, r0, r4, ror #11
   186ec:	andeq	lr, r0, r4, ror #11
   186f0:	andeq	lr, r0, r0, ror #7
   186f4:			; <UNDEFINED> instruction: 0x0000ddb4
   186f8:	andeq	sp, r0, r8, lsl #26
   186fc:	andeq	sp, r0, r4, ror #28
   18700:	andeq	sp, r0, ip, asr pc
   18704:	andeq	sp, r0, r0, ror #31
   18708:	andeq	lr, r0, ip, lsl #2
   1870c:	andeq	sp, r0, r4, ror #31
   18710:	ldrdeq	sp, [r0], -r8
   18714:	andeq	sp, r0, r0, asr #31
   18718:	strdeq	sp, [r0], -ip
   1871c:	andeq	sp, r0, r4, lsl #28
   18720:	andeq	sp, r0, ip, lsl #28
   18724:	andeq	sp, r0, r4, lsl lr
   18728:	andeq	sp, r0, ip, lsr pc
   1872c:	andeq	sp, r0, r4, lsr #28
   18730:	andeq	sp, r0, ip, ror #27
   18734:	cmp	r0, #0
   18738:	ldr	r9, [r1, #-4]
   1873c:	beq	18924 <test_sort_find@@Base+0x113c>
   18740:	ldr	r8, [r0, #-4]
   18744:	str	r3, [sp, #16]
   18748:	cmp	r9, r8
   1874c:	movcc	r2, r9
   18750:	movcs	r2, r8
   18754:	bl	129c8 <strncmp@plt>
   18758:	cmp	r0, #0
   1875c:	ldr	r3, [sp, #16]
   18760:	beq	18928 <test_sort_find@@Base+0x1140>
   18764:	bge	18910 <test_sort_find@@Base+0x1128>
   18768:	sub	r5, r5, r4
   1876c:	lsl	r2, r4, #1
   18770:	lsl	r5, r5, #2
   18774:	cmp	r2, #4
   18778:	sub	r7, r7, r5
   1877c:	add	r6, r6, r5
   18780:	str	r7, [fp, r3]
   18784:	ldr	r3, [sp, #12]
   18788:	str	r6, [fp, r3]
   1878c:	bhi	18910 <test_sort_find@@Base+0x1128>
   18790:	ldr	r7, [fp, #-4]
   18794:	mov	r5, r4
   18798:	mov	r4, r2
   1879c:	cmp	r4, #4
   187a0:	beq	18870 <test_sort_find@@Base+0x1088>
   187a4:	lsl	r3, r4, #2
   187a8:	cmp	r7, r4
   187ac:	add	r0, fp, r3
   187b0:	bls	18520 <test_sort_find@@Base+0xd38>
   187b4:	ldr	r1, [fp, r4, lsl #2]
   187b8:	adds	r2, r0, r1
   187bc:	beq	184fc <test_sort_find@@Base+0xd14>
   187c0:	ldr	r1, [r0, r1]
   187c4:	sub	r1, r2, r1
   187c8:	ldrh	r0, [r1]
   187cc:	cmp	r0, #11
   187d0:	bls	1837c <test_sort_find@@Base+0xb94>
   187d4:	ldrh	r1, [r1, #10]
   187d8:	cmp	r1, #0
   187dc:	beq	1837c <test_sort_find@@Base+0xb94>
   187e0:	ldr	r0, [r2, r1]
   187e4:	add	r8, r4, #1
   187e8:	add	r3, r3, #4
   187ec:	add	r2, r2, r1
   187f0:	cmp	r7, r8
   187f4:	add	ip, fp, r3
   187f8:	add	r0, r0, #4
   187fc:	add	r0, r2, r0
   18800:	bls	18520 <test_sort_find@@Base+0xd38>
   18804:	ldr	r3, [fp, r3]
   18808:	adds	r1, ip, r3
   1880c:	beq	184fc <test_sort_find@@Base+0xd14>
   18810:	ldr	r3, [ip, r3]
   18814:	sub	r3, r1, r3
   18818:	ldrh	r2, [r3]
   1881c:	cmp	r2, #11
   18820:	bls	1837c <test_sort_find@@Base+0xb94>
   18824:	ldrh	r2, [r3, #10]
   18828:	cmp	r2, #0
   1882c:	beq	1837c <test_sort_find@@Base+0xb94>
   18830:	ldr	r3, [r1, r2]
   18834:	add	r1, r1, r2
   18838:	add	r3, r3, #4
   1883c:	adds	r1, r1, r3
   18840:	ldrne	r9, [r1, #-4]
   18844:	moveq	r9, #0
   18848:	cmp	r0, #0
   1884c:	beq	18b90 <test_sort_find@@Base+0x13a8>
   18850:	ldr	r6, [r0, #-4]
   18854:	cmp	r9, r6
   18858:	movcc	r2, r9
   1885c:	movcs	r2, r6
   18860:	bl	129c8 <strncmp@plt>
   18864:	cmp	r0, #0
   18868:	beq	18b94 <test_sort_find@@Base+0x13ac>
   1886c:	movlt	r4, r8
   18870:	lsl	r3, r5, #2
   18874:	cmp	r7, r5
   18878:	add	r2, fp, r3
   1887c:	bls	18520 <test_sort_find@@Base+0xd38>
   18880:	ldr	r6, [fp, r5, lsl #2]
   18884:	adds	r0, r2, r6
   18888:	beq	184fc <test_sort_find@@Base+0xd14>
   1888c:	ldr	r2, [r2, r6]
   18890:	sub	r2, r0, r2
   18894:	ldrh	r1, [r2]
   18898:	cmp	r1, #11
   1889c:	bls	1837c <test_sort_find@@Base+0xb94>
   188a0:	ldrh	r2, [r2, #10]
   188a4:	cmp	r2, #0
   188a8:	beq	1837c <test_sort_find@@Base+0xb94>
   188ac:	ldr	r1, [r0, r2]
   188b0:	lsl	ip, r4, #2
   188b4:	add	r0, r0, r2
   188b8:	cmp	r7, r4
   188bc:	add	r2, fp, ip
   188c0:	str	ip, [sp, #12]
   188c4:	add	r1, r1, #4
   188c8:	add	r0, r0, r1
   188cc:	bls	18520 <test_sort_find@@Base+0xd38>
   188d0:	ldr	r7, [fp, r4, lsl #2]
   188d4:	adds	r1, r2, r7
   188d8:	beq	184fc <test_sort_find@@Base+0xd14>
   188dc:	ldr	r2, [r2, r7]
   188e0:	sub	r2, r1, r2
   188e4:	ldrh	ip, [r2]
   188e8:	cmp	ip, #11
   188ec:	bls	1837c <test_sort_find@@Base+0xb94>
   188f0:	ldrh	ip, [r2, #10]
   188f4:	cmp	ip, #0
   188f8:	beq	1837c <test_sort_find@@Base+0xb94>
   188fc:	ldr	r2, [r1, ip]
   18900:	add	r1, r1, ip
   18904:	add	r2, r2, #4
   18908:	adds	r1, r1, r2
   1890c:	bne	18734 <test_sort_find@@Base+0xf4c>
   18910:	cmp	sl, #0
   18914:	beq	18938 <test_sort_find@@Base+0x1150>
   18918:	sub	sl, sl, #1
   1891c:	ldr	r7, [fp, #-4]
   18920:	b	1863c <test_sort_find@@Base+0xe54>
   18924:	mov	r8, #0
   18928:	cmp	r9, r8
   1892c:	bhi	18768 <test_sort_find@@Base+0xf80>
   18930:	cmp	sl, #0
   18934:	bne	18918 <test_sort_find@@Base+0x1130>
   18938:	add	r5, fp, #16
   1893c:	ldr	r1, [sp, #4]
   18940:	sub	r0, r5, fp
   18944:	sub	r3, fp, r5
   18948:	mov	r7, #0
   1894c:	ldr	r2, [r5]
   18950:	mov	r4, r7
   18954:	sub	r1, r1, #1
   18958:	str	r1, [sp, #4]
   1895c:	add	r2, r2, r0
   18960:	ldr	r1, [fp]
   18964:	str	r2, [fp]
   18968:	add	r3, r3, r1
   1896c:	str	r3, [r5], #-4
   18970:	str	r5, [sp, #16]
   18974:	b	189dc <test_sort_find@@Base+0x11f4>
   18978:	cmp	r0, #0
   1897c:	ldr	r3, [r1, #-4]
   18980:	beq	18b74 <test_sort_find@@Base+0x138c>
   18984:	ldr	r8, [r0, #-4]
   18988:	str	r3, [sp, #12]
   1898c:	cmp	r3, r8
   18990:	movcc	r2, r3
   18994:	movcs	r2, r8
   18998:	bl	129c8 <strncmp@plt>
   1899c:	cmp	r0, #0
   189a0:	ldr	r3, [sp, #12]
   189a4:	beq	18b78 <test_sort_find@@Base+0x1390>
   189a8:	bge	18b54 <test_sort_find@@Base+0x136c>
   189ac:	ldr	r1, [sp, #4]
   189b0:	sub	r3, r7, r4
   189b4:	lsl	r2, r4, #1
   189b8:	lsl	r3, r3, #2
   189bc:	mov	r7, r4
   189c0:	sub	r6, r6, r3
   189c4:	add	r5, r5, r3
   189c8:	cmp	r1, r2
   189cc:	str	r6, [fp, sl]
   189d0:	str	r5, [fp, r9]
   189d4:	bcc	18b54 <test_sort_find@@Base+0x136c>
   189d8:	mov	r4, r2
   189dc:	ldr	r3, [sp, #4]
   189e0:	ldr	r6, [fp, #-4]
   189e4:	cmp	r3, r4
   189e8:	bls	18ab8 <test_sort_find@@Base+0x12d0>
   189ec:	lsl	r3, r4, #2
   189f0:	cmp	r6, r4
   189f4:	add	r0, fp, r3
   189f8:	bls	18520 <test_sort_find@@Base+0xd38>
   189fc:	ldr	r1, [fp, r4, lsl #2]
   18a00:	adds	r2, r0, r1
   18a04:	beq	184fc <test_sort_find@@Base+0xd14>
   18a08:	ldr	r1, [r0, r1]
   18a0c:	sub	r1, r2, r1
   18a10:	ldrh	r0, [r1]
   18a14:	cmp	r0, #11
   18a18:	bls	1837c <test_sort_find@@Base+0xb94>
   18a1c:	ldrh	r1, [r1, #10]
   18a20:	cmp	r1, #0
   18a24:	beq	1837c <test_sort_find@@Base+0xb94>
   18a28:	ldr	r0, [r2, r1]
   18a2c:	add	r5, r4, #1
   18a30:	add	r3, r3, #4
   18a34:	add	r2, r2, r1
   18a38:	cmp	r5, r6
   18a3c:	add	ip, fp, r3
   18a40:	add	r0, r0, #4
   18a44:	add	r0, r2, r0
   18a48:	bcs	18520 <test_sort_find@@Base+0xd38>
   18a4c:	ldr	r3, [fp, r3]
   18a50:	adds	r1, ip, r3
   18a54:	beq	184fc <test_sort_find@@Base+0xd14>
   18a58:	ldr	r3, [ip, r3]
   18a5c:	sub	r3, r1, r3
   18a60:	ldrh	r2, [r3]
   18a64:	cmp	r2, #11
   18a68:	bls	1837c <test_sort_find@@Base+0xb94>
   18a6c:	ldrh	r2, [r3, #10]
   18a70:	cmp	r2, #0
   18a74:	beq	1837c <test_sort_find@@Base+0xb94>
   18a78:	ldr	r3, [r1, r2]
   18a7c:	add	r1, r1, r2
   18a80:	add	r3, r3, #4
   18a84:	adds	r1, r1, r3
   18a88:	beq	18ab8 <test_sort_find@@Base+0x12d0>
   18a8c:	cmp	r0, #0
   18a90:	ldr	r9, [r1, #-4]
   18a94:	beq	18b64 <test_sort_find@@Base+0x137c>
   18a98:	ldr	r8, [r0, #-4]
   18a9c:	cmp	r9, r8
   18aa0:	movcc	r2, r9
   18aa4:	movcs	r2, r8
   18aa8:	bl	129c8 <strncmp@plt>
   18aac:	cmp	r0, #0
   18ab0:	beq	18b68 <test_sort_find@@Base+0x1380>
   18ab4:	movlt	r4, r5
   18ab8:	lsl	sl, r7, #2
   18abc:	cmp	r6, r7
   18ac0:	add	r3, fp, sl
   18ac4:	bls	18520 <test_sort_find@@Base+0xd38>
   18ac8:	ldr	r5, [fp, r7, lsl #2]
   18acc:	adds	r0, r3, r5
   18ad0:	beq	184fc <test_sort_find@@Base+0xd14>
   18ad4:	ldr	r3, [r3, r5]
   18ad8:	sub	r3, r0, r3
   18adc:	ldrh	r2, [r3]
   18ae0:	cmp	r2, #11
   18ae4:	bls	1837c <test_sort_find@@Base+0xb94>
   18ae8:	ldrh	r3, [r3, #10]
   18aec:	cmp	r3, #0
   18af0:	beq	1837c <test_sort_find@@Base+0xb94>
   18af4:	ldr	r2, [r0, r3]
   18af8:	lsl	r9, r4, #2
   18afc:	add	r0, r0, r3
   18b00:	cmp	r4, r6
   18b04:	add	r3, fp, r9
   18b08:	add	r2, r2, #4
   18b0c:	add	r0, r0, r2
   18b10:	bcs	18520 <test_sort_find@@Base+0xd38>
   18b14:	ldr	r6, [fp, r4, lsl #2]
   18b18:	adds	r1, r3, r6
   18b1c:	beq	184fc <test_sort_find@@Base+0xd14>
   18b20:	ldr	r3, [r3, r6]
   18b24:	sub	r3, r1, r3
   18b28:	ldrh	r2, [r3]
   18b2c:	cmp	r2, #11
   18b30:	bls	1837c <test_sort_find@@Base+0xb94>
   18b34:	ldrh	r2, [r3, #10]
   18b38:	cmp	r2, #0
   18b3c:	beq	1837c <test_sort_find@@Base+0xb94>
   18b40:	ldr	r3, [r1, r2]
   18b44:	add	r1, r1, r2
   18b48:	add	r3, r3, #4
   18b4c:	adds	r1, r1, r3
   18b50:	bne	18978 <test_sort_find@@Base+0x1190>
   18b54:	ldr	r5, [sp, #16]
   18b58:	cmp	fp, r5
   18b5c:	bne	1893c <test_sort_find@@Base+0x1154>
   18b60:	b	1832c <test_sort_find@@Base+0xb44>
   18b64:	mov	r8, r0
   18b68:	cmp	r9, r8
   18b6c:	movhi	r4, r5
   18b70:	b	18ab8 <test_sort_find@@Base+0x12d0>
   18b74:	mov	r8, #0
   18b78:	cmp	r3, r8
   18b7c:	bhi	189ac <test_sort_find@@Base+0x11c4>
   18b80:	ldr	r5, [sp, #16]
   18b84:	cmp	fp, r5
   18b88:	bne	1893c <test_sort_find@@Base+0x1154>
   18b8c:	b	1832c <test_sort_find@@Base+0xb44>
   18b90:	mov	r6, r0
   18b94:	cmp	r9, r6
   18b98:	movhi	r4, r8
   18b9c:	b	18870 <test_sort_find@@Base+0x1088>
   18ba0:	ldr	r0, [pc, #-1196]	; 186fc <test_sort_find@@Base+0xf14>
   18ba4:	mvn	r3, #0
   18ba8:	str	r3, [sp, #20]
   18bac:	add	r0, pc, r0
   18bb0:	bl	12944 <puts@plt>
   18bb4:	b	1832c <test_sort_find@@Base+0xb44>
   18bb8:	ldr	r0, [pc, #-1216]	; 18700 <test_sort_find@@Base+0xf18>
   18bbc:	mvn	r3, #0
   18bc0:	str	r3, [sp, #20]
   18bc4:	add	r0, pc, r0
   18bc8:	bl	12944 <puts@plt>
   18bcc:	b	1832c <test_sort_find@@Base+0xb44>
   18bd0:	ldr	r0, [pc, #-1236]	; 18704 <test_sort_find@@Base+0xf1c>
   18bd4:	mvn	r3, #0
   18bd8:	str	r3, [sp, #20]
   18bdc:	add	r0, pc, r0
   18be0:	bl	12944 <puts@plt>
   18be4:	b	1832c <test_sort_find@@Base+0xb44>
   18be8:	ldr	r0, [pc, #-1256]	; 18708 <test_sort_find@@Base+0xf20>
   18bec:	str	r4, [sp, #20]
   18bf0:	add	r0, pc, r0
   18bf4:	bl	12944 <puts@plt>
   18bf8:	ldr	r0, [pc, #-1268]	; 1870c <test_sort_find@@Base+0xf24>
   18bfc:	mov	r1, r5
   18c00:	add	r0, pc, r0
   18c04:	bl	128f0 <printf@plt>
   18c08:	b	1832c <test_sort_find@@Base+0xb44>
   18c0c:	ldr	r0, [pc, #-1284]	; 18710 <test_sort_find@@Base+0xf28>
   18c10:	str	r4, [sp, #20]
   18c14:	add	r0, pc, r0
   18c18:	bl	12944 <puts@plt>
   18c1c:	ldr	r0, [pc, #-1296]	; 18714 <test_sort_find@@Base+0xf2c>
   18c20:	ldr	r1, [sp, #4]
   18c24:	add	r0, pc, r0
   18c28:	bl	128f0 <printf@plt>
   18c2c:	b	1832c <test_sort_find@@Base+0xb44>
   18c30:	ldr	r0, [pc, #-1312]	; 18718 <test_sort_find@@Base+0xf30>
   18c34:	mvn	r3, #0
   18c38:	str	r3, [sp, #20]
   18c3c:	add	r0, pc, r0
   18c40:	bl	12944 <puts@plt>
   18c44:	b	1832c <test_sort_find@@Base+0xb44>
   18c48:	ldr	r0, [pc, #-1332]	; 1871c <test_sort_find@@Base+0xf34>
   18c4c:	mvn	r3, #0
   18c50:	str	r3, [sp, #20]
   18c54:	add	r0, pc, r0
   18c58:	bl	12944 <puts@plt>
   18c5c:	b	1832c <test_sort_find@@Base+0xb44>
   18c60:	ldr	r0, [pc, #-1352]	; 18720 <test_sort_find@@Base+0xf38>
   18c64:	mvn	r3, #0
   18c68:	str	r3, [sp, #20]
   18c6c:	add	r0, pc, r0
   18c70:	bl	12944 <puts@plt>
   18c74:	b	1832c <test_sort_find@@Base+0xb44>
   18c78:	ldr	r0, [pc, #-1372]	; 18724 <test_sort_find@@Base+0xf3c>
   18c7c:	mvn	r3, #0
   18c80:	str	r3, [sp, #20]
   18c84:	add	r0, pc, r0
   18c88:	bl	12944 <puts@plt>
   18c8c:	b	1832c <test_sort_find@@Base+0xb44>
   18c90:	ldr	r0, [pc, #-1392]	; 18728 <test_sort_find@@Base+0xf40>
   18c94:	str	r4, [sp, #20]
   18c98:	add	r0, pc, r0
   18c9c:	bl	12944 <puts@plt>
   18ca0:	b	1832c <test_sort_find@@Base+0xb44>
   18ca4:	bl	13174 <_start@@Base+0x5b8>
   18ca8:	ldr	r0, [pc, #-1412]	; 1872c <test_sort_find@@Base+0xf44>
   18cac:	mvn	r3, #0
   18cb0:	str	r3, [sp, #20]
   18cb4:	add	r0, pc, r0
   18cb8:	bl	12944 <puts@plt>
   18cbc:	b	1832c <test_sort_find@@Base+0xb44>
   18cc0:	ldr	r0, [pc, #-1432]	; 18730 <test_sort_find@@Base+0xf48>
   18cc4:	mvn	r3, #0
   18cc8:	str	r3, [sp, #20]
   18ccc:	add	r0, pc, r0
   18cd0:	bl	12944 <puts@plt>
   18cd4:	b	1832c <test_sort_find@@Base+0xb44>
   18cd8:	bl	13668 <_start@@Base+0xaac>
   18cdc:	bl	132a8 <_start@@Base+0x6ec>

00018ce0 <test_scan@@Base>:
   18ce0:	ldr	r2, [pc, #4076]	; 19cd4 <test_scan@@Base+0xff4>
   18ce4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18ce8:	mov	r4, r0
   18cec:	strd	r6, [sp, #8]
   18cf0:	strd	r8, [sp, #16]
   18cf4:	strd	sl, [sp, #24]
   18cf8:	add	r2, pc, r2
   18cfc:	str	lr, [sp, #32]
   18d00:	sub	sp, sp, #84	; 0x54
   18d04:	add	r3, r2, #1312	; 0x520
   18d08:	ldr	r1, [r2, #1320]	; 0x528
   18d0c:	add	r5, sp, #72	; 0x48
   18d10:	add	r3, r3, #8
   18d14:	ldrh	r2, [r3, #4]
   18d18:	ldrb	r3, [r3, #6]
   18d1c:	str	r1, [sp, #72]	; 0x48
   18d20:	strh	r2, [r5, #4]
   18d24:	strb	r3, [r5, #6]
   18d28:	bl	1f250 <flatcc_builder_reset@@Base>
   18d2c:	ldr	r1, [pc, #4004]	; 19cd8 <test_scan@@Base+0xff8>
   18d30:	mov	r3, #0
   18d34:	mov	r0, r4
   18d38:	mov	r2, r3
   18d3c:	add	r1, pc, r1
   18d40:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   18d44:	cmp	r0, #0
   18d48:	bne	18d58 <test_scan@@Base+0x78>
   18d4c:	mov	r1, #36	; 0x24
   18d50:	mov	r0, r4
   18d54:	bl	20a20 <flatcc_builder_start_table@@Base>
   18d58:	ldr	r1, [pc, #3964]	; 19cdc <test_scan@@Base+0xffc>
   18d5c:	mov	r0, r4
   18d60:	add	r1, pc, r1
   18d64:	bl	22388 <flatcc_builder_create_string_str@@Base>
   18d68:	subs	r6, r0, #0
   18d6c:	beq	18d84 <test_scan@@Base+0xa4>
   18d70:	mov	r1, #3
   18d74:	mov	r0, r4
   18d78:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   18d7c:	cmp	r0, #0
   18d80:	strne	r6, [r0]
   18d84:	mov	r1, #1
   18d88:	mvn	ip, #0
   18d8c:	mov	r3, r1
   18d90:	mov	r2, #7
   18d94:	mov	r0, r4
   18d98:	stm	sp, {r1, ip}
   18d9c:	mov	r1, r5
   18da0:	bl	215d4 <flatcc_builder_create_vector@@Base>
   18da4:	subs	r5, r0, #0
   18da8:	beq	18dc0 <test_scan@@Base+0xe0>
   18dac:	mov	r1, #5
   18db0:	mov	r0, r4
   18db4:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   18db8:	cmp	r0, #0
   18dbc:	strne	r5, [r0]
   18dc0:	mov	r0, r4
   18dc4:	bl	20800 <flatcc_builder_start_offset_vector@@Base>
   18dc8:	mov	r0, r4
   18dcc:	bl	21888 <flatcc_builder_end_offset_vector@@Base>
   18dd0:	subs	r5, r0, #0
   18dd4:	beq	18dec <test_scan@@Base+0x10c>
   18dd8:	mov	r1, #10
   18ddc:	mov	r0, r4
   18de0:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   18de4:	cmp	r0, #0
   18de8:	strne	r5, [r0]
   18dec:	mov	r0, r4
   18df0:	bl	20800 <flatcc_builder_start_offset_vector@@Base>
   18df4:	mov	r1, #36	; 0x24
   18df8:	mov	r0, r4
   18dfc:	bl	20a20 <flatcc_builder_start_table@@Base>
   18e00:	ldr	r1, [pc, #3800]	; 19ce0 <test_scan@@Base+0x1000>
   18e04:	mov	r0, r4
   18e08:	add	r1, pc, r1
   18e0c:	bl	22388 <flatcc_builder_create_string_str@@Base>
   18e10:	subs	r5, r0, #0
   18e14:	beq	18e2c <test_scan@@Base+0x14c>
   18e18:	mov	r1, #3
   18e1c:	mov	r0, r4
   18e20:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   18e24:	cmp	r0, #0
   18e28:	strne	r5, [r0]
   18e2c:	ldr	r1, [pc, #3760]	; 19ce4 <test_scan@@Base+0x1004>
   18e30:	mov	r2, #1
   18e34:	mov	r0, r4
   18e38:	add	r1, pc, r1
   18e3c:	add	r1, r1, #1024	; 0x400
   18e40:	add	r1, r1, #4
   18e44:	bl	21358 <flatcc_builder_check_required@@Base>
   18e48:	cmp	r0, #0
   18e4c:	beq	1a744 <test_scan@@Base+0x1a64>
   18e50:	mov	r0, r4
   18e54:	bl	21404 <flatcc_builder_end_table@@Base>
   18e58:	subs	r1, r0, #0
   18e5c:	beq	18e68 <test_scan@@Base+0x188>
   18e60:	mov	r0, r4
   18e64:	bl	20150 <flatcc_builder_offset_vector_push@@Base>
   18e68:	mov	r1, #36	; 0x24
   18e6c:	mov	r0, r4
   18e70:	bl	20a20 <flatcc_builder_start_table@@Base>
   18e74:	ldr	r1, [pc, #3692]	; 19ce8 <test_scan@@Base+0x1008>
   18e78:	mov	r0, r4
   18e7c:	add	r1, pc, r1
   18e80:	bl	22388 <flatcc_builder_create_string_str@@Base>
   18e84:	subs	r5, r0, #0
   18e88:	beq	18ea0 <test_scan@@Base+0x1c0>
   18e8c:	mov	r1, #3
   18e90:	mov	r0, r4
   18e94:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   18e98:	cmp	r0, #0
   18e9c:	strne	r5, [r0]
   18ea0:	ldr	r1, [pc, #3652]	; 19cec <test_scan@@Base+0x100c>
   18ea4:	mov	r2, #1
   18ea8:	mov	r0, r4
   18eac:	add	r1, pc, r1
   18eb0:	add	r1, r1, #1024	; 0x400
   18eb4:	add	r1, r1, #4
   18eb8:	bl	21358 <flatcc_builder_check_required@@Base>
   18ebc:	cmp	r0, #0
   18ec0:	beq	1a744 <test_scan@@Base+0x1a64>
   18ec4:	mov	r0, r4
   18ec8:	bl	21404 <flatcc_builder_end_table@@Base>
   18ecc:	subs	r1, r0, #0
   18ed0:	beq	18edc <test_scan@@Base+0x1fc>
   18ed4:	mov	r0, r4
   18ed8:	bl	20150 <flatcc_builder_offset_vector_push@@Base>
   18edc:	mov	r1, #36	; 0x24
   18ee0:	mov	r0, r4
   18ee4:	bl	20a20 <flatcc_builder_start_table@@Base>
   18ee8:	ldr	r1, [pc, #3584]	; 19cf0 <test_scan@@Base+0x1010>
   18eec:	mov	r0, r4
   18ef0:	add	r1, pc, r1
   18ef4:	bl	22388 <flatcc_builder_create_string_str@@Base>
   18ef8:	subs	r5, r0, #0
   18efc:	beq	18f14 <test_scan@@Base+0x234>
   18f00:	mov	r1, #3
   18f04:	mov	r0, r4
   18f08:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   18f0c:	cmp	r0, #0
   18f10:	strne	r5, [r0]
   18f14:	ldr	r1, [pc, #3544]	; 19cf4 <test_scan@@Base+0x1014>
   18f18:	mov	r2, #1
   18f1c:	mov	r0, r4
   18f20:	add	r1, pc, r1
   18f24:	add	r1, r1, #1024	; 0x400
   18f28:	add	r1, r1, #4
   18f2c:	bl	21358 <flatcc_builder_check_required@@Base>
   18f30:	cmp	r0, #0
   18f34:	beq	1a744 <test_scan@@Base+0x1a64>
   18f38:	mov	r0, r4
   18f3c:	bl	21404 <flatcc_builder_end_table@@Base>
   18f40:	subs	r1, r0, #0
   18f44:	beq	18f50 <test_scan@@Base+0x270>
   18f48:	mov	r0, r4
   18f4c:	bl	20150 <flatcc_builder_offset_vector_push@@Base>
   18f50:	mov	r1, #36	; 0x24
   18f54:	mov	r0, r4
   18f58:	bl	20a20 <flatcc_builder_start_table@@Base>
   18f5c:	ldr	r1, [pc, #3476]	; 19cf8 <test_scan@@Base+0x1018>
   18f60:	mov	r0, r4
   18f64:	add	r1, pc, r1
   18f68:	bl	22388 <flatcc_builder_create_string_str@@Base>
   18f6c:	subs	r5, r0, #0
   18f70:	beq	18f88 <test_scan@@Base+0x2a8>
   18f74:	mov	r1, #3
   18f78:	mov	r0, r4
   18f7c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   18f80:	cmp	r0, #0
   18f84:	strne	r5, [r0]
   18f88:	ldr	r1, [pc, #3436]	; 19cfc <test_scan@@Base+0x101c>
   18f8c:	mov	r2, #1
   18f90:	mov	r0, r4
   18f94:	add	r1, pc, r1
   18f98:	add	r1, r1, #1024	; 0x400
   18f9c:	add	r1, r1, #4
   18fa0:	bl	21358 <flatcc_builder_check_required@@Base>
   18fa4:	cmp	r0, #0
   18fa8:	beq	1a744 <test_scan@@Base+0x1a64>
   18fac:	mov	r0, r4
   18fb0:	bl	21404 <flatcc_builder_end_table@@Base>
   18fb4:	subs	r1, r0, #0
   18fb8:	beq	18fc4 <test_scan@@Base+0x2e4>
   18fbc:	mov	r0, r4
   18fc0:	bl	20150 <flatcc_builder_offset_vector_push@@Base>
   18fc4:	mov	r1, #36	; 0x24
   18fc8:	mov	r0, r4
   18fcc:	bl	20a20 <flatcc_builder_start_table@@Base>
   18fd0:	ldr	r1, [pc, #3368]	; 19d00 <test_scan@@Base+0x1020>
   18fd4:	mov	r0, r4
   18fd8:	add	r1, pc, r1
   18fdc:	bl	22388 <flatcc_builder_create_string_str@@Base>
   18fe0:	subs	r5, r0, #0
   18fe4:	beq	18ffc <test_scan@@Base+0x31c>
   18fe8:	mov	r1, #3
   18fec:	mov	r0, r4
   18ff0:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   18ff4:	cmp	r0, #0
   18ff8:	strne	r5, [r0]
   18ffc:	ldr	r1, [pc, #3328]	; 19d04 <test_scan@@Base+0x1024>
   19000:	mov	r2, #1
   19004:	mov	r0, r4
   19008:	add	r1, pc, r1
   1900c:	add	r1, r1, #1024	; 0x400
   19010:	add	r1, r1, #4
   19014:	bl	21358 <flatcc_builder_check_required@@Base>
   19018:	cmp	r0, #0
   1901c:	beq	1a744 <test_scan@@Base+0x1a64>
   19020:	mov	r0, r4
   19024:	bl	21404 <flatcc_builder_end_table@@Base>
   19028:	subs	r1, r0, #0
   1902c:	beq	19038 <test_scan@@Base+0x358>
   19030:	mov	r0, r4
   19034:	bl	20150 <flatcc_builder_offset_vector_push@@Base>
   19038:	mov	r0, r4
   1903c:	bl	21888 <flatcc_builder_end_offset_vector@@Base>
   19040:	subs	r5, r0, #0
   19044:	beq	1905c <test_scan@@Base+0x37c>
   19048:	mov	r1, #11
   1904c:	mov	r0, r4
   19050:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   19054:	cmp	r0, #0
   19058:	strne	r5, [r0]
   1905c:	ldr	r1, [pc, #3236]	; 19d08 <test_scan@@Base+0x1028>
   19060:	mov	r2, #1
   19064:	mov	r0, r4
   19068:	add	r1, pc, r1
   1906c:	add	r1, r1, #1024	; 0x400
   19070:	add	r1, r1, #4
   19074:	bl	21358 <flatcc_builder_check_required@@Base>
   19078:	cmp	r0, #0
   1907c:	beq	1a744 <test_scan@@Base+0x1a64>
   19080:	mov	r0, r4
   19084:	bl	21404 <flatcc_builder_end_table@@Base>
   19088:	mov	r1, r0
   1908c:	mov	r0, r4
   19090:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   19094:	mov	r0, r4
   19098:	add	r1, sp, #68	; 0x44
   1909c:	bl	22e80 <flatcc_builder_finalize_aligned_buffer@@Base>
   190a0:	subs	r3, r0, #0
   190a4:	str	r3, [sp, #28]
   190a8:	beq	190c0 <test_scan@@Base+0x3e0>
   190ac:	ldr	r2, [r3, #4]
   190b0:	movw	r3, #20301	; 0x4f4d
   190b4:	movt	r3, #21326	; 0x534e
   190b8:	cmp	r2, r3
   190bc:	beq	190c4 <test_scan@@Base+0x3e4>
   190c0:	bl	1313c <_start@@Base+0x580>
   190c4:	ldr	r3, [r0]
   190c8:	adds	r2, r0, r3
   190cc:	beq	190c0 <test_scan@@Base+0x3e0>
   190d0:	ldr	r1, [sp, #28]
   190d4:	ldr	r3, [r1, r3]
   190d8:	sub	r3, r2, r3
   190dc:	ldrh	r1, [r3]
   190e0:	cmp	r1, #27
   190e4:	bls	1a494 <test_scan@@Base+0x17b4>
   190e8:	ldrh	r0, [r3, #26]
   190ec:	cmp	r0, #0
   190f0:	beq	1a494 <test_scan@@Base+0x17b4>
   190f4:	ldr	r1, [r2, r0]
   190f8:	add	r0, r2, r0
   190fc:	add	r1, r1, #4
   19100:	adds	ip, r0, r1
   19104:	str	ip, [sp, #12]
   19108:	beq	1a494 <test_scan@@Base+0x17b4>
   1910c:	ldrh	ip, [r3, #14]
   19110:	cmp	ip, #0
   19114:	beq	1a76c <test_scan@@Base+0x1a8c>
   19118:	ldr	lr, [r2, ip]
   1911c:	add	ip, r2, ip
   19120:	str	ip, [sp, #56]	; 0x38
   19124:	add	lr, lr, #4
   19128:	adds	ip, ip, lr
   1912c:	str	ip, [sp, #32]
   19130:	str	lr, [sp, #60]	; 0x3c
   19134:	beq	1a76c <test_scan@@Base+0x1a8c>
   19138:	ldrh	r7, [r3, #24]
   1913c:	cmp	r7, #0
   19140:	beq	1a790 <test_scan@@Base+0x1ab0>
   19144:	ldr	r3, [r2, r7]
   19148:	add	r2, r2, r7
   1914c:	add	r7, r3, #4
   19150:	adds	r3, r2, r7
   19154:	str	r3, [sp, #40]	; 0x28
   19158:	beq	1a790 <test_scan@@Base+0x1ab0>
   1915c:	adds	r2, r0, r1
   19160:	ldr	r4, [r2, #-4]
   19164:	cmp	r4, #0
   19168:	beq	19228 <test_scan@@Base+0x548>
   1916c:	ldr	r3, [r0, r1]
   19170:	mov	r1, r2
   19174:	adds	r2, r2, r3
   19178:	str	r2, [sp, #20]
   1917c:	beq	1a4b8 <test_scan@@Base+0x17d8>
   19180:	ldr	r3, [r1, r3]
   19184:	sub	r3, r2, r3
   19188:	ldrh	r0, [r3]
   1918c:	cmp	r0, #11
   19190:	str	r0, [sp, #48]	; 0x30
   19194:	str	r3, [sp, #52]	; 0x34
   19198:	bls	1a470 <test_scan@@Base+0x1790>
   1919c:	ldrh	r7, [r3, #10]
   191a0:	cmp	r7, #0
   191a4:	beq	1a470 <test_scan@@Base+0x1790>
   191a8:	ldr	r5, [pc, #2908]	; 19d0c <test_scan@@Base+0x102c>
   191ac:	add	r8, r1, #4
   191b0:	mov	r0, r7
   191b4:	mov	r6, #0
   191b8:	str	r8, [sp, #24]
   191bc:	str	r8, [sp, #44]	; 0x2c
   191c0:	add	r5, pc, r5
   191c4:	b	191fc <test_scan@@Base+0x51c>
   191c8:	mov	r3, r8
   191cc:	add	r8, r8, #4
   191d0:	ldr	r1, [r3]
   191d4:	adds	r2, r3, r1
   191d8:	beq	1a4b8 <test_scan@@Base+0x17d8>
   191dc:	ldr	r3, [r3, r1]
   191e0:	sub	r3, r2, r3
   191e4:	ldrh	r1, [r3]
   191e8:	cmp	r1, #11
   191ec:	bls	1a470 <test_scan@@Base+0x1790>
   191f0:	ldrh	r0, [r3, #10]
   191f4:	cmp	r0, #0
   191f8:	beq	1a470 <test_scan@@Base+0x1790>
   191fc:	ldr	r3, [r2, r0]
   19200:	add	r2, r2, r0
   19204:	mov	r1, r5
   19208:	add	r0, r3, #4
   1920c:	add	r0, r2, r0
   19210:	bl	128e4 <strcmp@plt>
   19214:	cmp	r0, #0
   19218:	beq	19240 <test_scan@@Base+0x560>
   1921c:	add	r6, r6, #1
   19220:	cmp	r6, r4
   19224:	bne	191c8 <test_scan@@Base+0x4e8>
   19228:	ldr	r0, [pc, #2784]	; 19d10 <test_scan@@Base+0x1030>
   1922c:	mvn	r3, #0
   19230:	str	r3, [sp, #36]	; 0x24
   19234:	add	r0, pc, r0
   19238:	bl	12944 <puts@plt>
   1923c:	b	1a018 <test_scan@@Base+0x1338>
   19240:	cmp	r6, #1
   19244:	bne	19228 <test_scan@@Base+0x548>
   19248:	ldr	r3, [sp, #12]
   1924c:	sub	r6, r4, #-1073741823	; 0xc0000001
   19250:	sub	r9, r4, #1
   19254:	ldr	r8, [pc, #2744]	; 19d14 <test_scan@@Base+0x1034>
   19258:	str	r9, [sp, #16]
   1925c:	add	r6, r3, r6, lsl #2
   19260:	add	r8, pc, r8
   19264:	mov	sl, r6
   19268:	b	192d0 <test_scan@@Base+0x5f0>
   1926c:	cmp	r9, r4
   19270:	mov	r3, sl
   19274:	bcs	1a524 <test_scan@@Base+0x1844>
   19278:	ldr	r2, [r3]
   1927c:	sub	sl, sl, #4
   19280:	adds	r0, r3, r2
   19284:	beq	1a4b8 <test_scan@@Base+0x17d8>
   19288:	ldr	r3, [r3, r2]
   1928c:	sub	r3, r0, r3
   19290:	ldrh	r2, [r3]
   19294:	cmp	r2, #11
   19298:	bls	1a470 <test_scan@@Base+0x1790>
   1929c:	ldrh	r2, [r3, #10]
   192a0:	cmp	r2, #0
   192a4:	beq	1a470 <test_scan@@Base+0x1790>
   192a8:	ldr	r3, [r0, r2]
   192ac:	add	r0, r0, r2
   192b0:	mov	r1, r8
   192b4:	add	r3, r3, #4
   192b8:	add	r0, r0, r3
   192bc:	bl	128e4 <strcmp@plt>
   192c0:	cmp	r0, #0
   192c4:	sub	r3, r9, #1
   192c8:	beq	192f0 <test_scan@@Base+0x610>
   192cc:	mov	r9, r3
   192d0:	cmn	r9, #1
   192d4:	bne	1926c <test_scan@@Base+0x58c>
   192d8:	ldr	r0, [pc, #2616]	; 19d18 <test_scan@@Base+0x1038>
   192dc:	mvn	r3, #0
   192e0:	str	r3, [sp, #36]	; 0x24
   192e4:	add	r0, pc, r0
   192e8:	bl	12944 <puts@plt>
   192ec:	b	1a018 <test_scan@@Base+0x1338>
   192f0:	cmp	r9, #1
   192f4:	mov	r5, r0
   192f8:	bne	192d8 <test_scan@@Base+0x5f8>
   192fc:	ldr	r9, [pc, #2584]	; 19d1c <test_scan@@Base+0x103c>
   19300:	mov	r3, r7
   19304:	ldr	r2, [sp, #20]
   19308:	ldr	sl, [sp, #24]
   1930c:	add	r9, pc, r9
   19310:	b	19354 <test_scan@@Base+0x674>
   19314:	add	r5, r5, #1
   19318:	cmp	r5, r4
   1931c:	beq	1a4dc <test_scan@@Base+0x17fc>
   19320:	mov	r3, sl
   19324:	add	sl, sl, #4
   19328:	ldr	r1, [r3]
   1932c:	adds	r2, r3, r1
   19330:	beq	1a4b8 <test_scan@@Base+0x17d8>
   19334:	ldr	r3, [r3, r1]
   19338:	sub	r3, r2, r3
   1933c:	ldrh	r1, [r3]
   19340:	cmp	r1, #11
   19344:	bls	1a470 <test_scan@@Base+0x1790>
   19348:	ldrh	r3, [r3, #10]
   1934c:	cmp	r3, #0
   19350:	beq	1a470 <test_scan@@Base+0x1790>
   19354:	ldr	r0, [r2, r3]
   19358:	add	r2, r2, r3
   1935c:	add	r0, r0, #4
   19360:	adds	r0, r2, r0
   19364:	beq	19314 <test_scan@@Base+0x634>
   19368:	ldr	r8, [r0, #-4]
   1936c:	mov	r1, r9
   19370:	cmp	r8, #5
   19374:	movcc	r2, r8
   19378:	movcs	r2, #5
   1937c:	bl	129c8 <strncmp@plt>
   19380:	cmp	r0, #0
   19384:	bne	19314 <test_scan@@Base+0x634>
   19388:	cmp	r8, #5
   1938c:	bne	19314 <test_scan@@Base+0x634>
   19390:	cmp	r5, #1
   19394:	bne	1a4dc <test_scan@@Base+0x17fc>
   19398:	ldr	sl, [pc, #2432]	; 19d20 <test_scan@@Base+0x1040>
   1939c:	mov	r9, r6
   193a0:	ldr	r5, [sp, #16]
   193a4:	add	sl, pc, sl
   193a8:	b	193b8 <test_scan@@Base+0x6d8>
   193ac:	cmp	r5, #0
   193b0:	sub	r5, r5, #1
   193b4:	beq	1a4dc <test_scan@@Base+0x17fc>
   193b8:	cmp	r5, r4
   193bc:	mov	r3, r9
   193c0:	bcs	1a524 <test_scan@@Base+0x1844>
   193c4:	ldr	r2, [r3]
   193c8:	sub	r9, r9, #4
   193cc:	adds	r0, r3, r2
   193d0:	beq	1a4b8 <test_scan@@Base+0x17d8>
   193d4:	ldr	r3, [r3, r2]
   193d8:	sub	r3, r0, r3
   193dc:	ldrh	r2, [r3]
   193e0:	cmp	r2, #11
   193e4:	bls	1a470 <test_scan@@Base+0x1790>
   193e8:	ldrh	r2, [r3, #10]
   193ec:	cmp	r2, #0
   193f0:	beq	1a470 <test_scan@@Base+0x1790>
   193f4:	ldr	r3, [r0, r2]
   193f8:	add	r0, r0, r2
   193fc:	add	r3, r3, #4
   19400:	adds	r0, r0, r3
   19404:	beq	193ac <test_scan@@Base+0x6cc>
   19408:	ldr	fp, [r0, #-4]
   1940c:	mov	r1, sl
   19410:	cmp	fp, #5
   19414:	movcc	r2, fp
   19418:	movcs	r2, #5
   1941c:	bl	129c8 <strncmp@plt>
   19420:	cmp	r0, #0
   19424:	bne	193ac <test_scan@@Base+0x6cc>
   19428:	cmp	fp, #5
   1942c:	bne	193ac <test_scan@@Base+0x6cc>
   19430:	cmp	r5, #1
   19434:	mov	r8, r0
   19438:	bne	1a4dc <test_scan@@Base+0x17fc>
   1943c:	ldr	r3, [pc, #2272]	; 19d24 <test_scan@@Base+0x1044>
   19440:	mvn	r2, #0
   19444:	mov	r1, #2
   19448:	ldr	r0, [sp, #12]
   1944c:	add	r3, pc, r3
   19450:	bl	147e0 <_start@@Base+0x1c24>
   19454:	cmn	r0, #1
   19458:	bne	1a598 <test_scan@@Base+0x18b8>
   1945c:	ldr	r5, [pc, #2244]	; 19d28 <test_scan@@Base+0x1048>
   19460:	mov	r0, r7
   19464:	ldr	r2, [sp, #20]
   19468:	ldr	r9, [sp, #24]
   1946c:	add	r5, pc, r5
   19470:	b	194b4 <test_scan@@Base+0x7d4>
   19474:	add	r8, r8, #1
   19478:	cmp	r8, r4
   1947c:	bcs	194ec <test_scan@@Base+0x80c>
   19480:	mov	r3, r9
   19484:	add	r9, r9, #4
   19488:	ldr	r1, [r3]
   1948c:	adds	r2, r3, r1
   19490:	beq	1a4b8 <test_scan@@Base+0x17d8>
   19494:	ldr	r3, [r3, r1]
   19498:	sub	r3, r2, r3
   1949c:	ldrh	r1, [r3]
   194a0:	cmp	r1, #11
   194a4:	bls	1a470 <test_scan@@Base+0x1790>
   194a8:	ldrh	r0, [r3, #10]
   194ac:	cmp	r0, #0
   194b0:	beq	1a470 <test_scan@@Base+0x1790>
   194b4:	ldr	r3, [r2, r0]
   194b8:	add	r2, r2, r0
   194bc:	mov	r1, r5
   194c0:	add	r0, r3, #4
   194c4:	add	r0, r2, r0
   194c8:	bl	128e4 <strcmp@plt>
   194cc:	cmp	r0, #0
   194d0:	bne	19474 <test_scan@@Base+0x794>
   194d4:	ldr	r0, [pc, #2128]	; 19d2c <test_scan@@Base+0x104c>
   194d8:	mvn	r3, #0
   194dc:	str	r3, [sp, #36]	; 0x24
   194e0:	add	r0, pc, r0
   194e4:	bl	12944 <puts@plt>
   194e8:	b	1a018 <test_scan@@Base+0x1338>
   194ec:	ldr	r5, [pc, #2108]	; 19d30 <test_scan@@Base+0x1050>
   194f0:	mov	r0, r7
   194f4:	mov	r8, #0
   194f8:	ldr	r2, [sp, #20]
   194fc:	ldr	r9, [sp, #24]
   19500:	add	r5, pc, r5
   19504:	b	19548 <test_scan@@Base+0x868>
   19508:	add	r8, r8, #1
   1950c:	cmp	r8, r4
   19510:	bcs	1a6a8 <test_scan@@Base+0x19c8>
   19514:	mov	r3, r9
   19518:	add	r9, r9, #4
   1951c:	ldr	r1, [r3]
   19520:	adds	r2, r3, r1
   19524:	beq	1a4b8 <test_scan@@Base+0x17d8>
   19528:	ldr	r3, [r3, r1]
   1952c:	sub	r3, r2, r3
   19530:	ldrh	r1, [r3]
   19534:	cmp	r1, #11
   19538:	bls	1a470 <test_scan@@Base+0x1790>
   1953c:	ldrh	r0, [r3, #10]
   19540:	cmp	r0, #0
   19544:	beq	1a470 <test_scan@@Base+0x1790>
   19548:	ldr	r3, [r2, r0]
   1954c:	add	r2, r2, r0
   19550:	mov	r1, r5
   19554:	add	r0, r3, #4
   19558:	add	r0, r2, r0
   1955c:	bl	128e4 <strcmp@plt>
   19560:	cmp	r0, #0
   19564:	bne	19508 <test_scan@@Base+0x828>
   19568:	cmp	r8, #0
   1956c:	bne	1a6a8 <test_scan@@Base+0x19c8>
   19570:	ldr	r5, [pc, #1980]	; 19d34 <test_scan@@Base+0x1054>
   19574:	ldr	r2, [sp, #20]
   19578:	ldr	r9, [sp, #24]
   1957c:	add	r5, pc, r5
   19580:	b	195c4 <test_scan@@Base+0x8e4>
   19584:	add	r8, r8, #1
   19588:	cmp	r8, r4
   1958c:	bcs	19664 <test_scan@@Base+0x984>
   19590:	mov	r3, r9
   19594:	add	r9, r9, #4
   19598:	ldr	r1, [r3]
   1959c:	adds	r2, r3, r1
   195a0:	beq	1a4b8 <test_scan@@Base+0x17d8>
   195a4:	ldr	r3, [r3, r1]
   195a8:	sub	r3, r2, r3
   195ac:	ldrh	r1, [r3]
   195b0:	cmp	r1, #11
   195b4:	bls	1a470 <test_scan@@Base+0x1790>
   195b8:	ldrh	r7, [r3, #10]
   195bc:	cmp	r7, #0
   195c0:	beq	1a470 <test_scan@@Base+0x1790>
   195c4:	ldr	r3, [r2, r7]
   195c8:	add	r0, r2, r7
   195cc:	mov	r1, r5
   195d0:	add	r3, r3, #4
   195d4:	add	r0, r0, r3
   195d8:	bl	128e4 <strcmp@plt>
   195dc:	cmp	r0, #0
   195e0:	bne	19584 <test_scan@@Base+0x8a4>
   195e4:	cmp	r8, #2
   195e8:	bne	19664 <test_scan@@Base+0x984>
   195ec:	ldr	r5, [pc, #1860]	; 19d38 <test_scan@@Base+0x1058>
   195f0:	mov	r8, r6
   195f4:	ldr	r7, [sp, #16]
   195f8:	add	r5, pc, r5
   195fc:	cmp	r7, r4
   19600:	mov	r3, r8
   19604:	bcs	1a524 <test_scan@@Base+0x1844>
   19608:	ldr	r2, [r3]
   1960c:	sub	r8, r8, #4
   19610:	adds	r0, r3, r2
   19614:	beq	1a4b8 <test_scan@@Base+0x17d8>
   19618:	ldr	r3, [r3, r2]
   1961c:	sub	r3, r0, r3
   19620:	ldrh	r2, [r3]
   19624:	cmp	r2, #11
   19628:	bls	1a470 <test_scan@@Base+0x1790>
   1962c:	ldrh	r2, [r3, #10]
   19630:	cmp	r2, #0
   19634:	beq	1a470 <test_scan@@Base+0x1790>
   19638:	ldr	r3, [r0, r2]
   1963c:	add	r0, r0, r2
   19640:	mov	r1, r5
   19644:	add	r3, r3, #4
   19648:	add	r0, r0, r3
   1964c:	bl	128e4 <strcmp@plt>
   19650:	cmp	r0, #0
   19654:	beq	1967c <test_scan@@Base+0x99c>
   19658:	cmp	r7, #0
   1965c:	sub	r7, r7, #1
   19660:	bne	195fc <test_scan@@Base+0x91c>
   19664:	ldr	r0, [pc, #1744]	; 19d3c <test_scan@@Base+0x105c>
   19668:	mvn	r3, #0
   1966c:	str	r3, [sp, #36]	; 0x24
   19670:	add	r0, pc, r0
   19674:	bl	12944 <puts@plt>
   19678:	b	1a018 <test_scan@@Base+0x1338>
   1967c:	cmp	r7, #4
   19680:	bne	19664 <test_scan@@Base+0x984>
   19684:	ldr	r7, [pc, #1716]	; 19d40 <test_scan@@Base+0x1060>
   19688:	ldr	r5, [sp, #16]
   1968c:	add	r7, pc, r7
   19690:	b	1969c <test_scan@@Base+0x9bc>
   19694:	subs	r5, r5, #1
   19698:	bcc	1a4f4 <test_scan@@Base+0x1814>
   1969c:	cmp	r5, r4
   196a0:	mov	r3, r6
   196a4:	bcs	1a524 <test_scan@@Base+0x1844>
   196a8:	ldr	r2, [r3]
   196ac:	sub	r6, r6, #4
   196b0:	adds	r0, r3, r2
   196b4:	beq	1a4b8 <test_scan@@Base+0x17d8>
   196b8:	ldr	r3, [r3, r2]
   196bc:	sub	r3, r0, r3
   196c0:	ldrh	r2, [r3]
   196c4:	cmp	r2, #11
   196c8:	bls	1a470 <test_scan@@Base+0x1790>
   196cc:	ldrh	r2, [r3, #10]
   196d0:	cmp	r2, #0
   196d4:	beq	1a470 <test_scan@@Base+0x1790>
   196d8:	ldr	r3, [r0, r2]
   196dc:	add	r0, r0, r2
   196e0:	add	r3, r3, #4
   196e4:	adds	r0, r0, r3
   196e8:	beq	19694 <test_scan@@Base+0x9b4>
   196ec:	ldr	r8, [r0, #-4]
   196f0:	mov	r1, r7
   196f4:	cmp	r8, #8
   196f8:	movcc	r2, r8
   196fc:	movcs	r2, #8
   19700:	bl	129c8 <strncmp@plt>
   19704:	cmp	r0, #0
   19708:	bne	19694 <test_scan@@Base+0x9b4>
   1970c:	cmp	r8, #8
   19710:	bne	19694 <test_scan@@Base+0x9b4>
   19714:	cmp	r5, #4
   19718:	bne	1a4f4 <test_scan@@Base+0x1814>
   1971c:	ldr	r3, [sp, #12]
   19720:	cmp	r4, #3
   19724:	movcc	r5, r4
   19728:	movcs	r5, #3
   1972c:	ldr	r9, [pc, #1552]	; 19d44 <test_scan@@Base+0x1064>
   19730:	sub	r6, r5, #-1073741823	; 0xc0000001
   19734:	mov	r7, r5
   19738:	add	r6, r3, r6, lsl #2
   1973c:	add	r9, pc, r9
   19740:	mov	sl, r6
   19744:	subs	r7, r7, #1
   19748:	beq	1a4f4 <test_scan@@Base+0x1814>
   1974c:	cmp	r7, r4
   19750:	mov	r3, sl
   19754:	bcs	1a524 <test_scan@@Base+0x1844>
   19758:	ldr	r2, [r3]
   1975c:	sub	sl, sl, #4
   19760:	adds	r0, r3, r2
   19764:	beq	1a4b8 <test_scan@@Base+0x17d8>
   19768:	ldr	r3, [r3, r2]
   1976c:	sub	r3, r0, r3
   19770:	ldrh	r2, [r3]
   19774:	cmp	r2, #11
   19778:	bls	1a470 <test_scan@@Base+0x1790>
   1977c:	ldrh	r2, [r3, #10]
   19780:	cmp	r2, #0
   19784:	beq	1a470 <test_scan@@Base+0x1790>
   19788:	ldr	r3, [r0, r2]
   1978c:	add	r0, r0, r2
   19790:	add	r3, r3, #4
   19794:	adds	r0, r0, r3
   19798:	beq	19744 <test_scan@@Base+0xa64>
   1979c:	ldr	r8, [r0, #-4]
   197a0:	mov	r1, r9
   197a4:	cmp	r8, #8
   197a8:	movcc	r2, r8
   197ac:	movcs	r2, #8
   197b0:	bl	129c8 <strncmp@plt>
   197b4:	cmp	r0, #0
   197b8:	bne	19744 <test_scan@@Base+0xa64>
   197bc:	cmp	r8, #8
   197c0:	bne	19744 <test_scan@@Base+0xa64>
   197c4:	cmp	r7, #2
   197c8:	bne	1a4f4 <test_scan@@Base+0x1814>
   197cc:	ldr	r3, [pc, #1396]	; 19d48 <test_scan@@Base+0x1068>
   197d0:	mov	r1, r7
   197d4:	mvn	r2, #0
   197d8:	ldr	r8, [sp, #12]
   197dc:	add	r3, pc, r3
   197e0:	mov	r0, r8
   197e4:	bl	147e0 <_start@@Base+0x1c24>
   197e8:	cmp	r0, #2
   197ec:	mov	r7, r0
   197f0:	bne	1a50c <test_scan@@Base+0x182c>
   197f4:	cmp	r4, #2
   197f8:	beq	1a50c <test_scan@@Base+0x182c>
   197fc:	ldr	r3, [r8, #8]
   19800:	add	r3, r3, #8
   19804:	adds	r2, r8, r3
   19808:	beq	1a4b8 <test_scan@@Base+0x17d8>
   1980c:	ldr	r3, [r8, r3]
   19810:	sub	r3, r2, r3
   19814:	ldrh	r1, [r3]
   19818:	cmp	r1, #11
   1981c:	bls	1a470 <test_scan@@Base+0x1790>
   19820:	ldrh	r0, [r3, #10]
   19824:	cmp	r0, #0
   19828:	beq	1a470 <test_scan@@Base+0x1790>
   1982c:	ldr	r9, [pc, #1304]	; 19d4c <test_scan@@Base+0x106c>
   19830:	add	sl, r8, #12
   19834:	mov	r3, r0
   19838:	add	r9, pc, r9
   1983c:	b	19880 <test_scan@@Base+0xba0>
   19840:	add	r7, r7, #1
   19844:	cmp	r7, r4
   19848:	beq	1a50c <test_scan@@Base+0x182c>
   1984c:	mov	r3, sl
   19850:	add	sl, sl, #4
   19854:	ldr	r1, [r3]
   19858:	adds	r2, r3, r1
   1985c:	beq	1a4b8 <test_scan@@Base+0x17d8>
   19860:	ldr	r3, [r3, r1]
   19864:	sub	r3, r2, r3
   19868:	ldrh	r1, [r3]
   1986c:	cmp	r1, #11
   19870:	bls	1a470 <test_scan@@Base+0x1790>
   19874:	ldrh	r3, [r3, #10]
   19878:	cmp	r3, #0
   1987c:	beq	1a470 <test_scan@@Base+0x1790>
   19880:	ldr	r0, [r2, r3]
   19884:	add	r2, r2, r3
   19888:	add	r0, r0, #4
   1988c:	adds	r0, r2, r0
   19890:	beq	19840 <test_scan@@Base+0xb60>
   19894:	ldr	r8, [r0, #-4]
   19898:	mov	r1, r9
   1989c:	cmp	r8, #8
   198a0:	movcc	r2, r8
   198a4:	movcs	r2, #8
   198a8:	bl	129c8 <strncmp@plt>
   198ac:	cmp	r0, #0
   198b0:	bne	19840 <test_scan@@Base+0xb60>
   198b4:	cmp	r8, #8
   198b8:	bne	19840 <test_scan@@Base+0xb60>
   198bc:	cmp	r7, #2
   198c0:	bne	1a50c <test_scan@@Base+0x182c>
   198c4:	ldr	r9, [pc, #1156]	; 19d50 <test_scan@@Base+0x1070>
   198c8:	mvn	r2, #0
   198cc:	mov	r1, #3
   198d0:	ldr	r0, [sp, #12]
   198d4:	add	r9, pc, r9
   198d8:	mov	r3, r9
   198dc:	bl	147e0 <_start@@Base+0x1c24>
   198e0:	cmp	r0, #4
   198e4:	mov	r7, r0
   198e8:	bne	1a5b0 <test_scan@@Base+0x18d0>
   198ec:	ldr	r3, [pc, #1120]	; 19d54 <test_scan@@Base+0x1074>
   198f0:	mov	r2, #3
   198f4:	mov	r1, #1
   198f8:	ldr	r0, [sp, #12]
   198fc:	add	r3, pc, r3
   19900:	bl	147e0 <_start@@Base+0x1c24>
   19904:	cmn	r0, #1
   19908:	mov	r8, r0
   1990c:	bne	1a5dc <test_scan@@Base+0x18fc>
   19910:	ldr	r3, [pc, #1088]	; 19d58 <test_scan@@Base+0x1078>
   19914:	mov	r2, #3
   19918:	mov	r1, #1
   1991c:	ldr	r0, [sp, #12]
   19920:	add	r3, pc, r3
   19924:	bl	147e0 <_start@@Base+0x1c24>
   19928:	cmn	r0, #1
   1992c:	mov	sl, r0
   19930:	bne	1a5c8 <test_scan@@Base+0x18e8>
   19934:	ldr	r3, [pc, #1056]	; 19d5c <test_scan@@Base+0x107c>
   19938:	mov	r2, #3
   1993c:	mov	r1, #1
   19940:	ldr	r0, [sp, #12]
   19944:	add	r3, pc, r3
   19948:	bl	147e0 <_start@@Base+0x1c24>
   1994c:	cmp	r0, #1
   19950:	mov	r8, r0
   19954:	bne	1a608 <test_scan@@Base+0x1928>
   19958:	mov	r1, r0
   1995c:	mov	r3, r9
   19960:	ldr	r0, [sp, #12]
   19964:	mov	r2, #3
   19968:	bl	147e0 <_start@@Base+0x1c24>
   1996c:	cmp	r0, #2
   19970:	bne	1a5f4 <test_scan@@Base+0x1914>
   19974:	ldr	r3, [pc, #996]	; 19d60 <test_scan@@Base+0x1080>
   19978:	mov	r1, r8
   1997c:	mov	r2, #3
   19980:	ldr	r0, [sp, #12]
   19984:	add	r3, pc, r3
   19988:	bl	147e0 <_start@@Base+0x1c24>
   1998c:	cmn	r0, #1
   19990:	bne	1a61c <test_scan@@Base+0x193c>
   19994:	ldr	r8, [pc, #968]	; 19d64 <test_scan@@Base+0x1084>
   19998:	mov	sl, r6
   1999c:	mov	r9, r5
   199a0:	add	r8, pc, r8
   199a4:	b	199fc <test_scan@@Base+0xd1c>
   199a8:	mov	r3, sl
   199ac:	sub	sl, sl, #4
   199b0:	ldr	r2, [r3]
   199b4:	adds	r0, r3, r2
   199b8:	beq	1a4b8 <test_scan@@Base+0x17d8>
   199bc:	ldr	r3, [r3, r2]
   199c0:	sub	r3, r0, r3
   199c4:	ldrh	r2, [r3]
   199c8:	cmp	r2, #11
   199cc:	bls	1a470 <test_scan@@Base+0x1790>
   199d0:	ldrh	r2, [r3, #10]
   199d4:	cmp	r2, #0
   199d8:	beq	1a470 <test_scan@@Base+0x1790>
   199dc:	ldr	r3, [r0, r2]
   199e0:	add	r0, r0, r2
   199e4:	mov	r1, r8
   199e8:	add	r3, r3, #4
   199ec:	add	r0, r0, r3
   199f0:	bl	128e4 <strcmp@plt>
   199f4:	cmp	r0, #0
   199f8:	beq	1a634 <test_scan@@Base+0x1954>
   199fc:	subs	r9, r9, #1
   19a00:	bne	199a8 <test_scan@@Base+0xcc8>
   19a04:	ldr	r8, [pc, #860]	; 19d68 <test_scan@@Base+0x1088>
   19a08:	mov	sl, r6
   19a0c:	mov	r9, r5
   19a10:	add	r8, pc, r8
   19a14:	b	19a6c <test_scan@@Base+0xd8c>
   19a18:	mov	r3, sl
   19a1c:	sub	sl, sl, #4
   19a20:	ldr	r2, [r3]
   19a24:	adds	r0, r3, r2
   19a28:	beq	1a4b8 <test_scan@@Base+0x17d8>
   19a2c:	ldr	r3, [r3, r2]
   19a30:	sub	r3, r0, r3
   19a34:	ldrh	r2, [r3]
   19a38:	cmp	r2, #11
   19a3c:	bls	1a470 <test_scan@@Base+0x1790>
   19a40:	ldrh	r2, [r3, #10]
   19a44:	cmp	r2, #0
   19a48:	beq	1a470 <test_scan@@Base+0x1790>
   19a4c:	ldr	r3, [r0, r2]
   19a50:	add	r0, r0, r2
   19a54:	mov	r1, r8
   19a58:	add	r3, r3, #4
   19a5c:	add	r0, r0, r3
   19a60:	bl	128e4 <strcmp@plt>
   19a64:	cmp	r0, #0
   19a68:	beq	1a64c <test_scan@@Base+0x196c>
   19a6c:	subs	r9, r9, #1
   19a70:	bne	19a18 <test_scan@@Base+0xd38>
   19a74:	ldr	r8, [pc, #752]	; 19d6c <test_scan@@Base+0x108c>
   19a78:	add	r8, pc, r8
   19a7c:	b	19ad4 <test_scan@@Base+0xdf4>
   19a80:	mov	r3, r6
   19a84:	sub	r6, r6, #4
   19a88:	ldr	r2, [r3]
   19a8c:	adds	r0, r3, r2
   19a90:	beq	1a4b8 <test_scan@@Base+0x17d8>
   19a94:	ldr	r3, [r3, r2]
   19a98:	sub	r3, r0, r3
   19a9c:	ldrh	r2, [r3]
   19aa0:	cmp	r2, #11
   19aa4:	bls	1a470 <test_scan@@Base+0x1790>
   19aa8:	ldrh	r2, [r3, #10]
   19aac:	cmp	r2, #0
   19ab0:	beq	1a470 <test_scan@@Base+0x1790>
   19ab4:	ldr	r3, [r0, r2]
   19ab8:	add	r0, r0, r2
   19abc:	mov	r1, r8
   19ac0:	add	r3, r3, #4
   19ac4:	add	r0, r0, r3
   19ac8:	bl	128e4 <strcmp@plt>
   19acc:	cmp	r0, #0
   19ad0:	beq	19af4 <test_scan@@Base+0xe14>
   19ad4:	subs	r5, r5, #1
   19ad8:	bne	19a80 <test_scan@@Base+0xda0>
   19adc:	ldr	r0, [pc, #652]	; 19d70 <test_scan@@Base+0x1090>
   19ae0:	mvn	r3, #0
   19ae4:	str	r3, [sp, #36]	; 0x24
   19ae8:	add	r0, pc, r0
   19aec:	bl	12944 <puts@plt>
   19af0:	b	1a018 <test_scan@@Base+0x1338>
   19af4:	cmp	r5, #1
   19af8:	str	r0, [sp, #36]	; 0x24
   19afc:	bne	19adc <test_scan@@Base+0xdfc>
   19b00:	ldr	r3, [pc, #620]	; 19d74 <test_scan@@Base+0x1094>
   19b04:	mov	r2, #3
   19b08:	mov	r1, r5
   19b0c:	ldr	r0, [sp, #12]
   19b10:	add	r3, pc, r3
   19b14:	bl	1468c <_start@@Base+0x1ad0>
   19b18:	cmp	r0, #2
   19b1c:	bne	1a664 <test_scan@@Base+0x1984>
   19b20:	ldr	r3, [pc, #592]	; 19d78 <test_scan@@Base+0x1098>
   19b24:	mov	r1, r5
   19b28:	mov	r2, #3
   19b2c:	ldr	r0, [sp, #12]
   19b30:	add	r3, pc, r3
   19b34:	bl	1468c <_start@@Base+0x1ad0>
   19b38:	cmn	r0, #1
   19b3c:	bne	1a67c <test_scan@@Base+0x199c>
   19b40:	ldr	r3, [pc, #564]	; 19d7c <test_scan@@Base+0x109c>
   19b44:	ldr	r0, [sp, #12]
   19b48:	ldr	r1, [sp, #36]	; 0x24
   19b4c:	add	r3, pc, r3
   19b50:	mov	r2, r1
   19b54:	bl	147e0 <_start@@Base+0x1c24>
   19b58:	cmn	r0, #1
   19b5c:	bne	1a538 <test_scan@@Base+0x1858>
   19b60:	mov	r3, r8
   19b64:	ldr	r0, [sp, #12]
   19b68:	ldr	r1, [sp, #36]	; 0x24
   19b6c:	mov	r2, r1
   19b70:	bl	147e0 <_start@@Base+0x1c24>
   19b74:	cmn	r0, #1
   19b78:	bne	1a568 <test_scan@@Base+0x1888>
   19b7c:	ldr	r5, [pc, #508]	; 19d80 <test_scan@@Base+0x10a0>
   19b80:	mov	r2, #1
   19b84:	mov	r1, r2
   19b88:	ldr	r0, [sp, #12]
   19b8c:	add	r5, pc, r5
   19b90:	mov	r3, r5
   19b94:	bl	147e0 <_start@@Base+0x1c24>
   19b98:	cmn	r0, #1
   19b9c:	bne	1a550 <test_scan@@Base+0x1870>
   19ba0:	ldr	r8, [pc, #476]	; 19d84 <test_scan@@Base+0x10a4>
   19ba4:	mov	r2, r0
   19ba8:	mov	r1, r4
   19bac:	ldr	r0, [sp, #12]
   19bb0:	add	r8, pc, r8
   19bb4:	mov	r3, r8
   19bb8:	bl	147e0 <_start@@Base+0x1c24>
   19bbc:	cmn	r0, #1
   19bc0:	bne	1a580 <test_scan@@Base+0x18a0>
   19bc4:	ldr	r9, [sp, #12]
   19bc8:	mov	r2, #0
   19bcc:	mov	r3, r8
   19bd0:	mov	r1, r2
   19bd4:	mov	r0, r9
   19bd8:	bl	1468c <_start@@Base+0x1ad0>
   19bdc:	cmn	r0, #1
   19be0:	bne	1a538 <test_scan@@Base+0x1858>
   19be4:	mov	r2, #0
   19be8:	mov	r3, r5
   19bec:	mov	r1, r2
   19bf0:	mov	r0, r9
   19bf4:	bl	1468c <_start@@Base+0x1ad0>
   19bf8:	cmn	r0, #1
   19bfc:	bne	1a568 <test_scan@@Base+0x1888>
   19c00:	mov	r2, #1
   19c04:	mov	r3, r5
   19c08:	mov	r1, r2
   19c0c:	mov	r0, r9
   19c10:	bl	1468c <_start@@Base+0x1ad0>
   19c14:	cmn	r0, #1
   19c18:	bne	1a550 <test_scan@@Base+0x1870>
   19c1c:	mov	r2, r0
   19c20:	mov	r3, r8
   19c24:	mov	r1, r4
   19c28:	mov	r0, r9
   19c2c:	bl	1468c <_start@@Base+0x1ad0>
   19c30:	cmn	r0, #1
   19c34:	mov	r6, r0
   19c38:	bne	1a580 <test_scan@@Base+0x18a0>
   19c3c:	mov	r1, r5
   19c40:	mov	r0, r9
   19c44:	bl	14468 <_start@@Base+0x18ac>
   19c48:	cmp	r0, #1
   19c4c:	bne	1a694 <test_scan@@Base+0x19b4>
   19c50:	ldr	r1, [pc, #304]	; 19d88 <test_scan@@Base+0x10a8>
   19c54:	ldr	r0, [sp, #12]
   19c58:	add	r1, pc, r1
   19c5c:	bl	14468 <_start@@Base+0x18ac>
   19c60:	cmp	r0, #0
   19c64:	bne	1a6d8 <test_scan@@Base+0x19f8>
   19c68:	mov	r1, r8
   19c6c:	ldr	r0, [sp, #12]
   19c70:	bl	14468 <_start@@Base+0x18ac>
   19c74:	cmp	r0, #1
   19c78:	mov	sl, r0
   19c7c:	bne	1a6c0 <test_scan@@Base+0x19e0>
   19c80:	ldr	r1, [pc, #260]	; 19d8c <test_scan@@Base+0x10ac>
   19c84:	ldr	r0, [sp, #12]
   19c88:	add	r1, pc, r1
   19c8c:	bl	14468 <_start@@Base+0x18ac>
   19c90:	cmp	r0, #2
   19c94:	bne	1a72c <test_scan@@Base+0x1a4c>
   19c98:	ldr	r3, [sp, #32]
   19c9c:	ldr	ip, [r3, #-4]
   19ca0:	cmp	ip, #0
   19ca4:	beq	19e98 <test_scan@@Base+0x11b8>
   19ca8:	ldr	r3, [sp, #56]	; 0x38
   19cac:	ldr	r2, [sp, #60]	; 0x3c
   19cb0:	ldrb	lr, [r3, r2]
   19cb4:	cmp	lr, #6
   19cb8:	beq	1a528 <test_scan@@Base+0x1848>
   19cbc:	ldr	r2, [sp, #32]
   19cc0:	add	r8, r2, ip
   19cc4:	mov	r3, r2
   19cc8:	sub	r5, r8, #1
   19ccc:	rsb	r2, r2, #1
   19cd0:	b	19e8c <test_scan@@Base+0x11ac>
   19cd4:	andeq	ip, r0, r8, ror #3
   19cd8:	andeq	ip, r0, r0, lsl #28
   19cdc:	andeq	ip, r0, r4, lsl #30
   19ce0:	andeq	sp, r0, r0, lsr #10
   19ce4:	andeq	ip, r0, r8, lsr #1
   19ce8:	andeq	sp, r0, r0, lsl r5
   19cec:	andeq	ip, r0, r4, lsr r0
   19cf0:	andeq	sp, r0, r8, asr #9
   19cf4:	andeq	fp, r0, r0, asr #31
   19cf8:	andeq	sp, r0, r8, ror #20
   19cfc:	andeq	fp, r0, ip, asr #30
   19d00:	andeq	sp, r0, r0, ror #7
   19d04:	ldrdeq	fp, [r0], -r8
   19d08:	andeq	fp, r0, r8, ror lr
   19d0c:	andeq	sp, r0, ip, asr #3
   19d10:	ldrdeq	sp, [r0], -r8
   19d14:	andeq	sp, r0, ip, lsr #2
   19d18:	andeq	sp, r0, r8, asr #18
   19d1c:	andeq	sp, r0, ip, ror r8
   19d20:	andeq	sp, r0, r4, ror #15
   19d24:	andeq	ip, r0, r0, asr #30
   19d28:	andeq	sp, r0, r8, asr #14
   19d2c:	ldrdeq	sp, [r0], -ip
   19d30:	andeq	ip, r0, r8, lsr #28
   19d34:	andeq	ip, r0, ip, lsr lr
   19d38:	andeq	ip, r0, r0, asr #27
   19d3c:	andeq	sp, r0, ip, lsl #13
   19d40:	andeq	sp, r0, r4, lsl r6
   19d44:	andeq	sp, r0, r4, ror #10
   19d48:	ldrdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   19d4c:	andeq	sp, r0, r8, ror #8
   19d50:	andeq	ip, r0, r4, ror #21
   19d54:			; <UNDEFINED> instruction: 0x0000d2b8
   19d58:	andeq	ip, r0, r8, lsl #20
   19d5c:	andeq	ip, r0, r8, asr #20
   19d60:	andeq	sp, r0, r8, asr #32
   19d64:	andeq	sp, r0, r4, lsl r2
   19d68:	andeq	ip, r0, r8, lsl r9
   19d6c:	andeq	ip, r0, r4, lsl r9
   19d70:	andeq	sp, r0, r8, ror #5
   19d74:	andeq	ip, r0, r8, lsr #17
   19d78:	muleq	r0, ip, lr
   19d7c:	ldrdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   19d80:	andeq	ip, r0, r0, lsl #16
   19d84:	andeq	ip, r0, r8, ror r7
   19d88:	andeq	ip, r0, ip, asr pc
   19d8c:	andeq	ip, r0, r0, lsr r7
   19d90:	strheq	sp, [r0], -r0
   19d94:	andeq	sp, r0, ip, lsl #1
   19d98:	andeq	sp, r0, r0, asr r0
   19d9c:	ldrdeq	ip, [r0], -r8
   19da0:	andeq	sp, r0, r0
   19da4:	andeq	ip, r0, r4, asr #31
   19da8:			; <UNDEFINED> instruction: 0x0000cfbc
   19dac:			; <UNDEFINED> instruction: 0x0000cfb8
   19db0:	andeq	ip, r0, r4, ror #6
   19db4:	andeq	ip, r0, r8, lsl r3
   19db8:			; <UNDEFINED> instruction: 0x0000c2b8
   19dbc:	andeq	ip, r0, r8, asr r2
   19dc0:	andeq	sl, r0, r4, lsr #21
   19dc4:	andeq	fp, r0, r4, lsl r2
   19dc8:	andeq	fp, r0, ip, lsl #5
   19dcc:	andeq	sl, r0, r0, ror #20
   19dd0:	andeq	fp, r0, ip, asr #3
   19dd4:	andeq	fp, r0, r4, lsr #6
   19dd8:	andeq	sl, r0, ip, lsr sl
   19ddc:	andeq	fp, r0, r0, lsl #28
   19de0:	andeq	ip, r0, ip, lsr r5
   19de4:	andeq	sl, r0, r8, lsl sl
   19de8:	andeq	fp, r0, r4, lsl #3
   19dec:	strdeq	fp, [r0], -ip
   19df0:	andeq	ip, r0, r4, ror #14
   19df4:	andeq	ip, r0, ip, lsr #15
   19df8:			; <UNDEFINED> instruction: 0x0000c7b0
   19dfc:	andeq	ip, r0, r8, lsl #18
   19e00:	andeq	ip, r0, r0, lsr r9
   19e04:	strdeq	ip, [r0], -r8
   19e08:	andeq	ip, r0, r8, lsr #18
   19e0c:	ldrdeq	ip, [r0], -r0
   19e10:	andeq	ip, r0, r8, lsr r7
   19e14:	andeq	ip, r0, r4, ror #14
   19e18:	andeq	ip, r0, r8, lsr #14
   19e1c:	andeq	ip, r0, r0, lsl #15
   19e20:	andeq	ip, r0, r8, asr #14
   19e24:	andeq	ip, r0, ip, ror r7
   19e28:	andeq	ip, r0, r8, lsl fp
   19e2c:	ldrdeq	ip, [r0], -r4
   19e30:	andeq	ip, r0, r8, lsl #15
   19e34:	muleq	r0, r8, r7
   19e38:	andeq	ip, r0, r4, asr #16
   19e3c:	andeq	ip, r0, r8, lsr r5
   19e40:	andeq	ip, r0, r0, asr r8
   19e44:	andeq	ip, r0, ip, lsl r8
   19e48:	andeq	sl, r0, r4, ror #15
   19e4c:	strdeq	sl, [r0], -r4
   19e50:	andeq	fp, r0, ip, rrx
   19e54:	ldrdeq	ip, [r0], -r4
   19e58:	strdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   19e5c:	andeq	sl, r0, r8, lsl #15
   19e60:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   19e64:	andeq	fp, r0, r4, lsl r0
   19e68:	andeq	sl, r0, r4, ror #14
   19e6c:	andeq	fp, r0, r8, lsr #22
   19e70:	andeq	ip, r0, r8, ror r4
   19e74:	andeq	sl, r0, r0, asr #14
   19e78:	andeq	fp, r0, r4, lsl #22
   19e7c:	andeq	ip, r0, r8, asr r4
   19e80:	ldrb	r1, [r3, #1]!
   19e84:	cmp	r1, #6
   19e88:	beq	19eb0 <test_scan@@Base+0x11d0>
   19e8c:	cmp	r5, r3
   19e90:	add	r0, r2, r3
   19e94:	bne	19e80 <test_scan@@Base+0x11a0>
   19e98:	ldr	r0, [pc, #-272]	; 19d90 <test_scan@@Base+0x10b0>
   19e9c:	mvn	r3, #0
   19ea0:	str	r3, [sp, #36]	; 0x24
   19ea4:	add	r0, pc, r0
   19ea8:	bl	12944 <puts@plt>
   19eac:	b	1a018 <test_scan@@Base+0x1338>
   19eb0:	cmp	r0, #0
   19eb4:	bne	19e98 <test_scan@@Base+0x11b8>
   19eb8:	cmp	lr, #1
   19ebc:	beq	19ee8 <test_scan@@Base+0x1208>
   19ec0:	ldr	r3, [sp, #32]
   19ec4:	sub	r0, r8, #1
   19ec8:	mov	r1, r3
   19ecc:	b	19edc <test_scan@@Base+0x11fc>
   19ed0:	ldrb	r5, [r3, #1]!
   19ed4:	cmp	r5, #1
   19ed8:	beq	19f00 <test_scan@@Base+0x1220>
   19edc:	cmp	r0, r3
   19ee0:	add	r6, r2, r3
   19ee4:	bne	19ed0 <test_scan@@Base+0x11f0>
   19ee8:	ldr	r0, [pc, #-348]	; 19d94 <test_scan@@Base+0x10b4>
   19eec:	mvn	r3, #0
   19ef0:	str	r3, [sp, #36]	; 0x24
   19ef4:	add	r0, pc, r0
   19ef8:	bl	12944 <puts@plt>
   19efc:	b	1a018 <test_scan@@Base+0x1338>
   19f00:	cmp	r6, #2
   19f04:	bne	19ee8 <test_scan@@Base+0x1208>
   19f08:	cmp	ip, #3
   19f0c:	bls	19f3c <test_scan@@Base+0x125c>
   19f10:	ldr	r5, [sp, #32]
   19f14:	ldrb	r3, [r5, #3]
   19f18:	cmp	r3, #1
   19f1c:	beq	1a714 <test_scan@@Base+0x1a34>
   19f20:	add	r3, r5, #3
   19f24:	b	19f34 <test_scan@@Base+0x1254>
   19f28:	ldrb	r5, [r3, #1]!
   19f2c:	cmp	r5, #1
   19f30:	beq	1a714 <test_scan@@Base+0x1a34>
   19f34:	cmp	r3, r0
   19f38:	bne	19f28 <test_scan@@Base+0x1248>
   19f3c:	cmp	lr, #5
   19f40:	beq	19fcc <test_scan@@Base+0x12ec>
   19f44:	ldr	r3, [sp, #32]
   19f48:	b	19f58 <test_scan@@Base+0x1278>
   19f4c:	ldrb	r5, [r3, #1]!
   19f50:	cmp	r5, #5
   19f54:	beq	19fcc <test_scan@@Base+0x12ec>
   19f58:	cmp	r0, r3
   19f5c:	bne	19f4c <test_scan@@Base+0x126c>
   19f60:	cmp	lr, #2
   19f64:	beq	19f88 <test_scan@@Base+0x12a8>
   19f68:	ldr	r0, [sp, #32]
   19f6c:	b	19f7c <test_scan@@Base+0x129c>
   19f70:	ldrb	r5, [r0, #1]!
   19f74:	cmp	r5, #2
   19f78:	beq	19fa0 <test_scan@@Base+0x12c0>
   19f7c:	cmp	r0, r3
   19f80:	add	r6, r0, r2
   19f84:	bne	19f70 <test_scan@@Base+0x1290>
   19f88:	ldr	r0, [pc, #-504]	; 19d98 <test_scan@@Base+0x10b8>
   19f8c:	mvn	r3, #0
   19f90:	str	r3, [sp, #36]	; 0x24
   19f94:	add	r0, pc, r0
   19f98:	bl	12944 <puts@plt>
   19f9c:	b	1a018 <test_scan@@Base+0x1338>
   19fa0:	cmp	r6, #6
   19fa4:	bne	19f88 <test_scan@@Base+0x12a8>
   19fa8:	cmp	lr, #3
   19fac:	bne	19fc0 <test_scan@@Base+0x12e0>
   19fb0:	b	19fcc <test_scan@@Base+0x12ec>
   19fb4:	ldrb	r0, [r1, #1]!
   19fb8:	cmp	r0, #3
   19fbc:	beq	19fe4 <test_scan@@Base+0x1304>
   19fc0:	cmp	r1, r3
   19fc4:	add	lr, r1, r2
   19fc8:	bne	19fb4 <test_scan@@Base+0x12d4>
   19fcc:	ldr	r0, [pc, #-568]	; 19d9c <test_scan@@Base+0x10bc>
   19fd0:	mvn	r3, #0
   19fd4:	str	r3, [sp, #36]	; 0x24
   19fd8:	add	r0, pc, r0
   19fdc:	bl	12944 <puts@plt>
   19fe0:	b	1a018 <test_scan@@Base+0x1338>
   19fe4:	cmp	lr, #3
   19fe8:	bne	19fcc <test_scan@@Base+0x12ec>
   19fec:	cmp	ip, #3
   19ff0:	bls	1a004 <test_scan@@Base+0x1324>
   19ff4:	ldr	r1, [sp, #32]
   19ff8:	ldrb	r1, [r1, #3]
   19ffc:	cmp	r1, #3
   1a000:	beq	1a040 <test_scan@@Base+0x1360>
   1a004:	ldr	r0, [pc, #-620]	; 19da0 <test_scan@@Base+0x10c0>
   1a008:	mvn	r3, #0
   1a00c:	str	r3, [sp, #36]	; 0x24
   1a010:	add	r0, pc, r0
   1a014:	bl	12944 <puts@plt>
   1a018:	ldr	r0, [sp, #28]
   1a01c:	bl	22fac <flatcc_builder_aligned_free@@Base>
   1a020:	ldr	r0, [sp, #36]	; 0x24
   1a024:	add	sp, sp, #84	; 0x54
   1a028:	ldrd	r4, [sp]
   1a02c:	ldrd	r6, [sp, #8]
   1a030:	ldrd	r8, [sp, #16]
   1a034:	ldrd	sl, [sp, #24]
   1a038:	add	sp, sp, #32
   1a03c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a040:	cmp	ip, #4
   1a044:	beq	1a07c <test_scan@@Base+0x139c>
   1a048:	ldr	r0, [sp, #32]
   1a04c:	ldrb	r1, [r0, #4]
   1a050:	cmp	r1, #3
   1a054:	beq	1a07c <test_scan@@Base+0x139c>
   1a058:	add	r0, r0, #4
   1a05c:	mov	r1, r0
   1a060:	b	1a070 <test_scan@@Base+0x1390>
   1a064:	ldrb	lr, [r1, #1]!
   1a068:	cmp	lr, #3
   1a06c:	beq	1a094 <test_scan@@Base+0x13b4>
   1a070:	cmp	r1, r3
   1a074:	add	r5, r1, r2
   1a078:	bne	1a064 <test_scan@@Base+0x1384>
   1a07c:	ldr	r0, [pc, #-736]	; 19da4 <test_scan@@Base+0x10c4>
   1a080:	mvn	r3, #0
   1a084:	str	r3, [sp, #36]	; 0x24
   1a088:	add	r0, pc, r0
   1a08c:	bl	12944 <puts@plt>
   1a090:	b	1a018 <test_scan@@Base+0x1338>
   1a094:	cmp	r5, #5
   1a098:	subeq	r3, ip, #1
   1a09c:	beq	1a0ac <test_scan@@Base+0x13cc>
   1a0a0:	b	1a07c <test_scan@@Base+0x139c>
   1a0a4:	cmp	r3, ip
   1a0a8:	bcs	1a6ec <test_scan@@Base+0x1a0c>
   1a0ac:	ldrb	r2, [r8, #-1]!
   1a0b0:	cmp	r2, #3
   1a0b4:	beq	1a0d8 <test_scan@@Base+0x13f8>
   1a0b8:	subs	r3, r3, #1
   1a0bc:	bcs	1a0a4 <test_scan@@Base+0x13c4>
   1a0c0:	ldr	r0, [pc, #-800]	; 19da8 <test_scan@@Base+0x10c8>
   1a0c4:	mvn	r3, #0
   1a0c8:	str	r3, [sp, #36]	; 0x24
   1a0cc:	add	r0, pc, r0
   1a0d0:	bl	12944 <puts@plt>
   1a0d4:	b	1a018 <test_scan@@Base+0x1338>
   1a0d8:	cmp	r3, #5
   1a0dc:	beq	1a0f0 <test_scan@@Base+0x1410>
   1a0e0:	b	1a0c0 <test_scan@@Base+0x13e0>
   1a0e4:	ldrb	r3, [r0, #-1]!
   1a0e8:	cmp	r3, #3
   1a0ec:	beq	1a110 <test_scan@@Base+0x1430>
   1a0f0:	subs	r7, r7, #1
   1a0f4:	bne	1a0e4 <test_scan@@Base+0x1404>
   1a0f8:	ldr	r0, [pc, #-852]	; 19dac <test_scan@@Base+0x10cc>
   1a0fc:	mvn	r3, #0
   1a100:	str	r3, [sp, #36]	; 0x24
   1a104:	add	r0, pc, r0
   1a108:	bl	12944 <puts@plt>
   1a10c:	b	1a018 <test_scan@@Base+0x1338>
   1a110:	cmp	r7, #3
   1a114:	bne	1a0f8 <test_scan@@Base+0x1418>
   1a118:	ldr	r3, [sp, #40]	; 0x28
   1a11c:	ldr	r5, [r3, #-4]
   1a120:	cmp	r5, #0
   1a124:	mvneq	r3, #0
   1a128:	mvneq	r7, #-1073741824	; 0xc0000000
   1a12c:	streq	r3, [sp, #32]
   1a130:	beq	1a18c <test_scan@@Base+0x14ac>
   1a134:	sub	r3, r5, #1
   1a138:	ldr	r8, [pc, #-912]	; 19db0 <test_scan@@Base+0x10d0>
   1a13c:	sub	r7, r5, #-1073741823	; 0xc0000001
   1a140:	mov	r9, r3
   1a144:	str	r3, [sp, #32]
   1a148:	ldr	r3, [sp, #40]	; 0x28
   1a14c:	add	r8, pc, r8
   1a150:	add	fp, r3, r7, lsl #2
   1a154:	cmp	r5, r9
   1a158:	mov	r0, fp
   1a15c:	bls	1a6d4 <test_scan@@Base+0x19f4>
   1a160:	ldr	r3, [r0]
   1a164:	mov	r1, r8
   1a168:	sub	fp, fp, #4
   1a16c:	sub	r9, r9, #1
   1a170:	add	r3, r3, #4
   1a174:	add	r0, r0, r3
   1a178:	bl	128e4 <strcmp@plt>
   1a17c:	cmp	r0, #0
   1a180:	beq	1a18c <test_scan@@Base+0x14ac>
   1a184:	cmn	r9, #1
   1a188:	bne	1a154 <test_scan@@Base+0x1474>
   1a18c:	ldr	r9, [pc, #-992]	; 19db4 <test_scan@@Base+0x10d4>
   1a190:	ldr	r3, [sp, #40]	; 0x28
   1a194:	ldr	fp, [sp, #32]
   1a198:	add	r9, pc, r9
   1a19c:	add	r7, r3, r7, lsl #2
   1a1a0:	mov	r8, fp
   1a1a4:	mov	r6, r7
   1a1a8:	b	1a1dc <test_scan@@Base+0x14fc>
   1a1ac:	cmp	fp, r5
   1a1b0:	mov	r0, r6
   1a1b4:	bcs	1a748 <test_scan@@Base+0x1a68>
   1a1b8:	ldr	r3, [r0]
   1a1bc:	mov	r1, r9
   1a1c0:	sub	r6, r6, #4
   1a1c4:	sub	fp, fp, #1
   1a1c8:	add	r3, r3, #4
   1a1cc:	add	r0, r0, r3
   1a1d0:	bl	128e4 <strcmp@plt>
   1a1d4:	cmp	r0, #0
   1a1d8:	beq	1a1e4 <test_scan@@Base+0x1504>
   1a1dc:	cmn	fp, #1
   1a1e0:	bne	1a1ac <test_scan@@Base+0x14cc>
   1a1e4:	ldr	r6, [sp, #32]
   1a1e8:	mov	r9, r7
   1a1ec:	str	r4, [sp, #32]
   1a1f0:	ldr	fp, [pc, #-1088]	; 19db8 <test_scan@@Base+0x10d8>
   1a1f4:	cmn	r6, #1
   1a1f8:	add	fp, pc, fp
   1a1fc:	beq	1a24c <test_scan@@Base+0x156c>
   1a200:	cmp	r5, r6
   1a204:	mov	r0, r9
   1a208:	bls	1a6d4 <test_scan@@Base+0x19f4>
   1a20c:	ldr	r3, [r0]
   1a210:	sub	r9, r9, #4
   1a214:	add	r3, r3, #4
   1a218:	adds	r0, r0, r3
   1a21c:	beq	1a240 <test_scan@@Base+0x1560>
   1a220:	ldr	r4, [r0, #-4]
   1a224:	mov	r1, fp
   1a228:	cmp	r4, #4
   1a22c:	movcc	r2, r4
   1a230:	movcs	r2, #4
   1a234:	bl	129c8 <strncmp@plt>
   1a238:	cmp	r0, #0
   1a23c:	beq	1a44c <test_scan@@Base+0x176c>
   1a240:	sub	r6, r6, #1
   1a244:	cmn	r6, #1
   1a248:	bne	1a200 <test_scan@@Base+0x1520>
   1a24c:	ldr	r6, [pc, #-1176]	; 19dbc <test_scan@@Base+0x10dc>
   1a250:	cmn	r8, #1
   1a254:	ldr	r4, [sp, #32]
   1a258:	add	r6, pc, r6
   1a25c:	beq	1a2ac <test_scan@@Base+0x15cc>
   1a260:	cmp	r8, r5
   1a264:	mov	r0, r7
   1a268:	bcs	1a6d4 <test_scan@@Base+0x19f4>
   1a26c:	ldr	r3, [r0]
   1a270:	sub	r7, r7, #4
   1a274:	add	r3, r3, #4
   1a278:	adds	r0, r0, r3
   1a27c:	beq	1a2a0 <test_scan@@Base+0x15c0>
   1a280:	ldr	r9, [r0, #-4]
   1a284:	mov	r1, r6
   1a288:	cmp	r9, #4
   1a28c:	movcc	r2, r9
   1a290:	movcs	r2, #4
   1a294:	bl	129c8 <strncmp@plt>
   1a298:	cmp	r0, #0
   1a29c:	beq	1a458 <test_scan@@Base+0x1778>
   1a2a0:	sub	r8, r8, #1
   1a2a4:	cmn	r8, #1
   1a2a8:	bne	1a260 <test_scan@@Base+0x1580>
   1a2ac:	add	r1, sp, #44	; 0x2c
   1a2b0:	mov	r0, #0
   1a2b4:	ldr	ip, [sp, #20]
   1a2b8:	ldm	r1, {r1, r2, r3}
   1a2bc:	b	1a2ec <test_scan@@Base+0x160c>
   1a2c0:	add	r0, r0, #1
   1a2c4:	cmp	r0, r4
   1a2c8:	bcs	1a30c <test_scan@@Base+0x162c>
   1a2cc:	mov	r3, r1
   1a2d0:	add	r1, r1, #4
   1a2d4:	ldr	r2, [r3]
   1a2d8:	adds	ip, r3, r2
   1a2dc:	beq	1a42c <test_scan@@Base+0x174c>
   1a2e0:	ldr	r3, [r3, r2]
   1a2e4:	sub	r3, ip, r3
   1a2e8:	ldrh	r2, [r3]
   1a2ec:	cmp	r2, #9
   1a2f0:	bls	1a2c0 <test_scan@@Base+0x15e0>
   1a2f4:	ldrh	r3, [r3, #8]
   1a2f8:	cmp	r3, #0
   1a2fc:	beq	1a2c0 <test_scan@@Base+0x15e0>
   1a300:	ldrsh	r3, [ip, r3]
   1a304:	cmp	r3, #13
   1a308:	bne	1a2c0 <test_scan@@Base+0x15e0>
   1a30c:	ldr	r2, [sp, #12]
   1a310:	ldr	r3, [r2, #4]
   1a314:	add	r3, r3, #4
   1a318:	adds	r3, r2, r3
   1a31c:	beq	1a42c <test_scan@@Base+0x174c>
   1a320:	add	r0, r2, #8
   1a324:	mov	r1, #1
   1a328:	b	1a34c <test_scan@@Base+0x166c>
   1a32c:	add	r1, r1, #1
   1a330:	cmp	r1, r4
   1a334:	bcs	1a378 <test_scan@@Base+0x1698>
   1a338:	mov	r3, r0
   1a33c:	add	r0, r0, #4
   1a340:	ldr	r2, [r3]
   1a344:	adds	r3, r3, r2
   1a348:	beq	1a42c <test_scan@@Base+0x174c>
   1a34c:	ldr	r2, [r3]
   1a350:	sub	r2, r3, r2
   1a354:	ldrh	ip, [r2]
   1a358:	cmp	ip, #9
   1a35c:	bls	1a32c <test_scan@@Base+0x164c>
   1a360:	ldrh	r2, [r2, #8]
   1a364:	cmp	r2, #0
   1a368:	beq	1a32c <test_scan@@Base+0x164c>
   1a36c:	ldrsh	r3, [r3, r2]
   1a370:	cmp	r3, #42	; 0x2a
   1a374:	bne	1a32c <test_scan@@Base+0x164c>
   1a378:	ldrd	r2, [sp, #12]
   1a37c:	add	r1, r2, r3, lsl #2
   1a380:	b	1a390 <test_scan@@Base+0x16b0>
   1a384:	cmp	r3, #0
   1a388:	sub	r3, r3, #1
   1a38c:	beq	1a3d8 <test_scan@@Base+0x16f8>
   1a390:	cmp	r3, r4
   1a394:	mov	r2, r1
   1a398:	bcs	1a524 <test_scan@@Base+0x1844>
   1a39c:	ldr	r0, [r2]
   1a3a0:	sub	r1, r1, #4
   1a3a4:	adds	ip, r2, r0
   1a3a8:	beq	1a42c <test_scan@@Base+0x174c>
   1a3ac:	ldr	r2, [r2, r0]
   1a3b0:	sub	r2, ip, r2
   1a3b4:	ldrh	r0, [r2]
   1a3b8:	cmp	r0, #9
   1a3bc:	bls	1a384 <test_scan@@Base+0x16a4>
   1a3c0:	ldrh	r2, [r2, #8]
   1a3c4:	cmp	r2, #0
   1a3c8:	beq	1a384 <test_scan@@Base+0x16a4>
   1a3cc:	ldrsh	r2, [ip, r2]
   1a3d0:	cmp	r2, #1
   1a3d4:	bne	1a384 <test_scan@@Base+0x16a4>
   1a3d8:	ldr	r1, [sp, #24]
   1a3dc:	b	1a418 <test_scan@@Base+0x1738>
   1a3e0:	ldr	r3, [r3, r2]
   1a3e4:	sub	r3, r0, r3
   1a3e8:	ldrh	r2, [r3]
   1a3ec:	cmp	r2, #9
   1a3f0:	bls	1a40c <test_scan@@Base+0x172c>
   1a3f4:	ldrh	r3, [r3, #8]
   1a3f8:	cmp	r3, #0
   1a3fc:	beq	1a40c <test_scan@@Base+0x172c>
   1a400:	ldrsh	r3, [r0, r3]
   1a404:	cmp	r3, #42	; 0x2a
   1a408:	beq	1a018 <test_scan@@Base+0x1338>
   1a40c:	cmp	sl, #0
   1a410:	beq	1a018 <test_scan@@Base+0x1338>
   1a414:	mov	sl, #0
   1a418:	mov	r3, r1
   1a41c:	sub	r1, r1, #4
   1a420:	ldr	r2, [r3]
   1a424:	adds	r0, r3, r2
   1a428:	bne	1a3e0 <test_scan@@Base+0x1700>
   1a42c:	ldr	r3, [pc, #-1652]	; 19dc0 <test_scan@@Base+0x10e0>
   1a430:	movw	r2, #697	; 0x2b9
   1a434:	ldr	r1, [pc, #-1656]	; 19dc4 <test_scan@@Base+0x10e4>
   1a438:	ldr	r0, [pc, #-1656]	; 19dc8 <test_scan@@Base+0x10e8>
   1a43c:	add	r3, pc, r3
   1a440:	add	r1, pc, r1
   1a444:	add	r0, pc, r0
   1a448:	bl	129e0 <__assert_fail@plt>
   1a44c:	cmp	r4, #4
   1a450:	beq	1a24c <test_scan@@Base+0x156c>
   1a454:	b	1a240 <test_scan@@Base+0x1560>
   1a458:	cmp	r9, #4
   1a45c:	bne	1a2a0 <test_scan@@Base+0x15c0>
   1a460:	add	r1, sp, #44	; 0x2c
   1a464:	ldr	ip, [sp, #20]
   1a468:	ldm	r1, {r1, r2, r3}
   1a46c:	b	1a2ec <test_scan@@Base+0x160c>
   1a470:	ldr	r3, [pc, #-1708]	; 19dcc <test_scan@@Base+0x10ec>
   1a474:	movw	r2, #699	; 0x2bb
   1a478:	ldr	r1, [pc, #-1712]	; 19dd0 <test_scan@@Base+0x10f0>
   1a47c:	ldr	r0, [pc, #-1712]	; 19dd4 <test_scan@@Base+0x10f4>
   1a480:	add	r3, pc, r3
   1a484:	add	r3, r3, #524	; 0x20c
   1a488:	add	r1, pc, r1
   1a48c:	add	r0, pc, r0
   1a490:	bl	129e0 <__assert_fail@plt>
   1a494:	ldr	r3, [pc, #-1732]	; 19dd8 <test_scan@@Base+0x10f8>
   1a498:	movw	r2, #1305	; 0x519
   1a49c:	ldr	r1, [pc, #-1736]	; 19ddc <test_scan@@Base+0x10fc>
   1a4a0:	ldr	r0, [pc, #-1736]	; 19de0 <test_scan@@Base+0x1100>
   1a4a4:	add	r3, pc, r3
   1a4a8:	add	r3, r3, #1328	; 0x530
   1a4ac:	add	r1, pc, r1
   1a4b0:	add	r0, pc, r0
   1a4b4:	bl	129e0 <__assert_fail@plt>
   1a4b8:	ldr	r3, [pc, #-1756]	; 19de4 <test_scan@@Base+0x1104>
   1a4bc:	movw	r2, #699	; 0x2bb
   1a4c0:	ldr	r1, [pc, #-1760]	; 19de8 <test_scan@@Base+0x1108>
   1a4c4:	ldr	r0, [pc, #-1760]	; 19dec <test_scan@@Base+0x110c>
   1a4c8:	add	r3, pc, r3
   1a4cc:	add	r3, r3, #524	; 0x20c
   1a4d0:	add	r1, pc, r1
   1a4d4:	add	r0, pc, r0
   1a4d8:	bl	129e0 <__assert_fail@plt>
   1a4dc:	ldr	r0, [pc, #-1780]	; 19df0 <test_scan@@Base+0x1110>
   1a4e0:	mvn	r3, #0
   1a4e4:	str	r3, [sp, #36]	; 0x24
   1a4e8:	add	r0, pc, r0
   1a4ec:	bl	12944 <puts@plt>
   1a4f0:	b	1a018 <test_scan@@Base+0x1338>
   1a4f4:	ldr	r0, [pc, #-1800]	; 19df4 <test_scan@@Base+0x1114>
   1a4f8:	mvn	r3, #0
   1a4fc:	str	r3, [sp, #36]	; 0x24
   1a500:	add	r0, pc, r0
   1a504:	bl	12944 <puts@plt>
   1a508:	b	1a018 <test_scan@@Base+0x1338>
   1a50c:	ldr	r0, [pc, #-1820]	; 19df8 <test_scan@@Base+0x1118>
   1a510:	mvn	r3, #0
   1a514:	str	r3, [sp, #36]	; 0x24
   1a518:	add	r0, pc, r0
   1a51c:	bl	12944 <puts@plt>
   1a520:	b	1a018 <test_scan@@Base+0x1338>
   1a524:	bl	13174 <_start@@Base+0x5b8>
   1a528:	ldr	r3, [sp, #32]
   1a52c:	add	r8, r3, ip
   1a530:	rsb	r2, r3, #1
   1a534:	b	19ec0 <test_scan@@Base+0x11e0>
   1a538:	ldr	r0, [pc, #-1860]	; 19dfc <test_scan@@Base+0x111c>
   1a53c:	mvn	r3, #0
   1a540:	str	r3, [sp, #36]	; 0x24
   1a544:	add	r0, pc, r0
   1a548:	bl	12944 <puts@plt>
   1a54c:	b	1a018 <test_scan@@Base+0x1338>
   1a550:	ldr	r0, [pc, #-1880]	; 19e00 <test_scan@@Base+0x1120>
   1a554:	mvn	r3, #0
   1a558:	str	r3, [sp, #36]	; 0x24
   1a55c:	add	r0, pc, r0
   1a560:	bl	12944 <puts@plt>
   1a564:	b	1a018 <test_scan@@Base+0x1338>
   1a568:	ldr	r0, [pc, #-1900]	; 19e04 <test_scan@@Base+0x1124>
   1a56c:	mvn	r3, #0
   1a570:	str	r3, [sp, #36]	; 0x24
   1a574:	add	r0, pc, r0
   1a578:	bl	12944 <puts@plt>
   1a57c:	b	1a018 <test_scan@@Base+0x1338>
   1a580:	ldr	r0, [pc, #-1920]	; 19e08 <test_scan@@Base+0x1128>
   1a584:	mvn	r3, #0
   1a588:	str	r3, [sp, #36]	; 0x24
   1a58c:	add	r0, pc, r0
   1a590:	bl	12944 <puts@plt>
   1a594:	b	1a018 <test_scan@@Base+0x1338>
   1a598:	ldr	r0, [pc, #-1940]	; 19e0c <test_scan@@Base+0x112c>
   1a59c:	mvn	r3, #0
   1a5a0:	str	r3, [sp, #36]	; 0x24
   1a5a4:	add	r0, pc, r0
   1a5a8:	bl	12944 <puts@plt>
   1a5ac:	b	1a018 <test_scan@@Base+0x1338>
   1a5b0:	ldr	r0, [pc, #-1960]	; 19e10 <test_scan@@Base+0x1130>
   1a5b4:	mvn	r3, #0
   1a5b8:	str	r3, [sp, #36]	; 0x24
   1a5bc:	add	r0, pc, r0
   1a5c0:	bl	12944 <puts@plt>
   1a5c4:	b	1a018 <test_scan@@Base+0x1338>
   1a5c8:	ldr	r0, [pc, #-1980]	; 19e14 <test_scan@@Base+0x1134>
   1a5cc:	str	r8, [sp, #36]	; 0x24
   1a5d0:	add	r0, pc, r0
   1a5d4:	bl	12944 <puts@plt>
   1a5d8:	b	1a018 <test_scan@@Base+0x1338>
   1a5dc:	ldr	r0, [pc, #-1996]	; 19e18 <test_scan@@Base+0x1138>
   1a5e0:	mvn	r3, #0
   1a5e4:	str	r3, [sp, #36]	; 0x24
   1a5e8:	add	r0, pc, r0
   1a5ec:	bl	12944 <puts@plt>
   1a5f0:	b	1a018 <test_scan@@Base+0x1338>
   1a5f4:	ldr	r0, [pc, #-2016]	; 19e1c <test_scan@@Base+0x113c>
   1a5f8:	str	sl, [sp, #36]	; 0x24
   1a5fc:	add	r0, pc, r0
   1a600:	bl	12944 <puts@plt>
   1a604:	b	1a018 <test_scan@@Base+0x1338>
   1a608:	ldr	r0, [pc, #-2032]	; 19e20 <test_scan@@Base+0x1140>
   1a60c:	str	sl, [sp, #36]	; 0x24
   1a610:	add	r0, pc, r0
   1a614:	bl	12944 <puts@plt>
   1a618:	b	1a018 <test_scan@@Base+0x1338>
   1a61c:	ldr	r0, [pc, #-2048]	; 19e24 <test_scan@@Base+0x1144>
   1a620:	mvn	r3, #0
   1a624:	str	r3, [sp, #36]	; 0x24
   1a628:	add	r0, pc, r0
   1a62c:	bl	12944 <puts@plt>
   1a630:	b	1a018 <test_scan@@Base+0x1338>
   1a634:	ldr	r0, [pc, #-2068]	; 19e28 <test_scan@@Base+0x1148>
   1a638:	mvn	r3, #0
   1a63c:	str	r3, [sp, #36]	; 0x24
   1a640:	add	r0, pc, r0
   1a644:	bl	12944 <puts@plt>
   1a648:	b	1a018 <test_scan@@Base+0x1338>
   1a64c:	ldr	r0, [pc, #-2088]	; 19e2c <test_scan@@Base+0x114c>
   1a650:	mvn	r3, #0
   1a654:	str	r3, [sp, #36]	; 0x24
   1a658:	add	r0, pc, r0
   1a65c:	bl	12944 <puts@plt>
   1a660:	b	1a018 <test_scan@@Base+0x1338>
   1a664:	ldr	r0, [pc, #-2108]	; 19e30 <test_scan@@Base+0x1150>
   1a668:	mvn	r3, #0
   1a66c:	str	r3, [sp, #36]	; 0x24
   1a670:	add	r0, pc, r0
   1a674:	bl	12944 <puts@plt>
   1a678:	b	1a018 <test_scan@@Base+0x1338>
   1a67c:	ldr	r0, [pc, #-2128]	; 19e34 <test_scan@@Base+0x1154>
   1a680:	mvn	r3, #0
   1a684:	str	r3, [sp, #36]	; 0x24
   1a688:	add	r0, pc, r0
   1a68c:	bl	12944 <puts@plt>
   1a690:	b	1a018 <test_scan@@Base+0x1338>
   1a694:	ldr	r0, [pc, #-2148]	; 19e38 <test_scan@@Base+0x1158>
   1a698:	str	r6, [sp, #36]	; 0x24
   1a69c:	add	r0, pc, r0
   1a6a0:	bl	12944 <puts@plt>
   1a6a4:	b	1a018 <test_scan@@Base+0x1338>
   1a6a8:	ldr	r0, [pc, #-2164]	; 19e3c <test_scan@@Base+0x115c>
   1a6ac:	mvn	r3, #0
   1a6b0:	str	r3, [sp, #36]	; 0x24
   1a6b4:	add	r0, pc, r0
   1a6b8:	bl	12944 <puts@plt>
   1a6bc:	b	1a018 <test_scan@@Base+0x1338>
   1a6c0:	ldr	r0, [pc, #-2184]	; 19e40 <test_scan@@Base+0x1160>
   1a6c4:	str	r6, [sp, #36]	; 0x24
   1a6c8:	add	r0, pc, r0
   1a6cc:	bl	12944 <puts@plt>
   1a6d0:	b	1a018 <test_scan@@Base+0x1338>
   1a6d4:	bl	130cc <_start@@Base+0x510>
   1a6d8:	ldr	r0, [pc, #-2204]	; 19e44 <test_scan@@Base+0x1164>
   1a6dc:	str	r6, [sp, #36]	; 0x24
   1a6e0:	add	r0, pc, r0
   1a6e4:	bl	12944 <puts@plt>
   1a6e8:	b	1a018 <test_scan@@Base+0x1338>
   1a6ec:	ldr	r3, [pc, #-2220]	; 19e48 <test_scan@@Base+0x1168>
   1a6f0:	movw	r2, #395	; 0x18b
   1a6f4:	ldr	r1, [pc, #-2224]	; 19e4c <test_scan@@Base+0x116c>
   1a6f8:	ldr	r0, [pc, #-2224]	; 19e50 <test_scan@@Base+0x1170>
   1a6fc:	add	r3, pc, r3
   1a700:	add	r3, r3, #1328	; 0x530
   1a704:	add	r1, pc, r1
   1a708:	add	r3, r3, #12
   1a70c:	add	r0, pc, r0
   1a710:	bl	129e0 <__assert_fail@plt>
   1a714:	ldr	r0, [pc, #-2248]	; 19e54 <test_scan@@Base+0x1174>
   1a718:	mvn	r3, #0
   1a71c:	str	r3, [sp, #36]	; 0x24
   1a720:	add	r0, pc, r0
   1a724:	bl	12944 <puts@plt>
   1a728:	b	1a018 <test_scan@@Base+0x1338>
   1a72c:	ldr	r0, [pc, #-2268]	; 19e58 <test_scan@@Base+0x1178>
   1a730:	mvn	r3, #0
   1a734:	str	r3, [sp, #36]	; 0x24
   1a738:	add	r0, pc, r0
   1a73c:	bl	12944 <puts@plt>
   1a740:	b	1a018 <test_scan@@Base+0x1338>
   1a744:	bl	13668 <_start@@Base+0xaac>
   1a748:	ldr	r3, [pc, #-2292]	; 19e5c <test_scan@@Base+0x117c>
   1a74c:	mov	r2, #108	; 0x6c
   1a750:	ldr	r1, [pc, #-2296]	; 19e60 <test_scan@@Base+0x1180>
   1a754:	ldr	r0, [pc, #-2296]	; 19e64 <test_scan@@Base+0x1184>
   1a758:	add	r3, pc, r3
   1a75c:	add	r3, r3, #316	; 0x13c
   1a760:	add	r1, pc, r1
   1a764:	add	r0, pc, r0
   1a768:	bl	129e0 <__assert_fail@plt>
   1a76c:	ldr	r3, [pc, #-2316]	; 19e68 <test_scan@@Base+0x1188>
   1a770:	movw	r2, #1307	; 0x51b
   1a774:	ldr	r1, [pc, #-2320]	; 19e6c <test_scan@@Base+0x118c>
   1a778:	ldr	r0, [pc, #-2320]	; 19e70 <test_scan@@Base+0x1190>
   1a77c:	add	r3, pc, r3
   1a780:	add	r3, r3, #1328	; 0x530
   1a784:	add	r1, pc, r1
   1a788:	add	r0, pc, r0
   1a78c:	bl	129e0 <__assert_fail@plt>
   1a790:	ldr	r3, [pc, #-2340]	; 19e74 <test_scan@@Base+0x1194>
   1a794:	movw	r2, #1309	; 0x51d
   1a798:	ldr	r1, [pc, #-2344]	; 19e78 <test_scan@@Base+0x1198>
   1a79c:	ldr	r0, [pc, #-2344]	; 19e7c <test_scan@@Base+0x119c>
   1a7a0:	add	r3, pc, r3
   1a7a4:	add	r3, r3, #1328	; 0x530
   1a7a8:	add	r1, pc, r1
   1a7ac:	add	r0, pc, r0
   1a7b0:	bl	129e0 <__assert_fail@plt>

0001a7b4 <test_basic_sort@@Base>:
   1a7b4:	movw	r2, #1798	; 0x706
   1a7b8:	movt	r2, #769	; 0x301
   1a7bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a7c0:	strd	r6, [sp, #8]
   1a7c4:	mov	ip, #2
   1a7c8:	movw	r1, #1540	; 0x604
   1a7cc:	strd	r8, [sp, #16]
   1a7d0:	movw	r3, #513	; 0x201
   1a7d4:	movt	r3, #771	; 0x303
   1a7d8:	strd	sl, [sp, #24]
   1a7dc:	mov	r4, r0
   1a7e0:	str	lr, [sp, #32]
   1a7e4:	sub	sp, sp, #36	; 0x24
   1a7e8:	mov	lr, #772	; 0x304
   1a7ec:	str	r2, [sp, #16]
   1a7f0:	mov	r2, #7
   1a7f4:	strh	lr, [sp, #20]
   1a7f8:	strb	ip, [sp, #22]
   1a7fc:	str	r3, [sp, #24]
   1a800:	strh	r1, [sp, #28]
   1a804:	strb	r2, [sp, #30]
   1a808:	bl	1f250 <flatcc_builder_reset@@Base>
   1a80c:	ldr	r1, [pc, #1128]	; 1ac7c <test_basic_sort@@Base+0x4c8>
   1a810:	mov	r3, #0
   1a814:	mov	r0, r4
   1a818:	mov	r2, r3
   1a81c:	add	r1, pc, r1
   1a820:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   1a824:	cmp	r0, #0
   1a828:	bne	1a838 <test_basic_sort@@Base+0x84>
   1a82c:	mov	r1, #36	; 0x24
   1a830:	mov	r0, r4
   1a834:	bl	20a20 <flatcc_builder_start_table@@Base>
   1a838:	ldr	r1, [pc, #1088]	; 1ac80 <test_basic_sort@@Base+0x4cc>
   1a83c:	mov	r0, r4
   1a840:	add	r1, pc, r1
   1a844:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1a848:	subs	r5, r0, #0
   1a84c:	beq	1a864 <test_basic_sort@@Base+0xb0>
   1a850:	mov	r1, #3
   1a854:	mov	r0, r4
   1a858:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1a85c:	cmp	r0, #0
   1a860:	strne	r5, [r0]
   1a864:	mov	r1, #1
   1a868:	mvn	ip, #0
   1a86c:	mov	r3, r1
   1a870:	mov	r2, #7
   1a874:	mov	r0, r4
   1a878:	stm	sp, {r1, ip}
   1a87c:	add	r1, sp, #16
   1a880:	bl	215d4 <flatcc_builder_create_vector@@Base>
   1a884:	subs	r5, r0, #0
   1a888:	beq	1a8a0 <test_basic_sort@@Base+0xec>
   1a88c:	mov	r1, #5
   1a890:	mov	r0, r4
   1a894:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1a898:	cmp	r0, #0
   1a89c:	strne	r5, [r0]
   1a8a0:	ldr	r1, [pc, #988]	; 1ac84 <test_basic_sort@@Base+0x4d0>
   1a8a4:	mov	r2, #1
   1a8a8:	mov	r0, r4
   1a8ac:	add	r1, pc, r1
   1a8b0:	add	r1, r1, #1024	; 0x400
   1a8b4:	add	r1, r1, #4
   1a8b8:	bl	21358 <flatcc_builder_check_required@@Base>
   1a8bc:	cmp	r0, #0
   1a8c0:	beq	1ac6c <test_basic_sort@@Base+0x4b8>
   1a8c4:	mov	r0, r4
   1a8c8:	bl	21404 <flatcc_builder_end_table@@Base>
   1a8cc:	mov	r1, r0
   1a8d0:	mov	r0, r4
   1a8d4:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   1a8d8:	mov	r0, r4
   1a8dc:	add	r1, sp, #12
   1a8e0:	bl	22d14 <flatcc_builder_get_direct_buffer@@Base>
   1a8e4:	cmp	r0, #0
   1a8e8:	beq	1a900 <test_basic_sort@@Base+0x14c>
   1a8ec:	ldr	r2, [r0, #4]
   1a8f0:	movw	r3, #20301	; 0x4f4d
   1a8f4:	movt	r3, #21326	; 0x534e
   1a8f8:	cmp	r2, r3
   1a8fc:	beq	1a904 <test_basic_sort@@Base+0x150>
   1a900:	bl	12fb4 <_start@@Base+0x3f8>
   1a904:	ldr	r3, [r0]
   1a908:	adds	r5, r0, r3
   1a90c:	beq	1a900 <test_basic_sort@@Base+0x14c>
   1a910:	ldr	r3, [r0, r3]
   1a914:	sub	r3, r5, r3
   1a918:	ldrh	r2, [r3]
   1a91c:	cmp	r2, #15
   1a920:	bls	1ab80 <test_basic_sort@@Base+0x3cc>
   1a924:	ldrh	r3, [r3, #14]
   1a928:	cmp	r3, #0
   1a92c:	beq	1ab80 <test_basic_sort@@Base+0x3cc>
   1a930:	ldr	r6, [r5, r3]
   1a934:	add	r5, r5, r3
   1a938:	add	r6, r6, #4
   1a93c:	adds	r3, r5, r6
   1a940:	beq	1ab80 <test_basic_sort@@Base+0x3cc>
   1a944:	ldr	sl, [r3, #-4]
   1a948:	cmp	sl, #0
   1a94c:	beq	1ab80 <test_basic_sort@@Base+0x3cc>
   1a950:	lsr	r7, sl, #1
   1a954:	sub	r0, sl, #1
   1a958:	lsl	r8, r7, #1
   1a95c:	cmp	r0, r8
   1a960:	movcs	r2, r7
   1a964:	movcs	r1, r8
   1a968:	bcs	1a9c8 <test_basic_sort@@Base+0x214>
   1a96c:	b	1aa00 <test_basic_sort@@Base+0x24c>
   1a970:	cmp	r1, ip
   1a974:	bcs	1ac44 <test_basic_sort@@Base+0x490>
   1a978:	add	lr, r1, #1
   1a97c:	ldrb	fp, [r3, r1]
   1a980:	cmp	lr, ip
   1a984:	bcs	1ac44 <test_basic_sort@@Base+0x490>
   1a988:	ldrb	r4, [r3, lr]
   1a98c:	add	r9, r3, lr
   1a990:	cmp	fp, r4
   1a994:	bcs	1aba8 <test_basic_sort@@Base+0x3f4>
   1a998:	cmp	r2, ip
   1a99c:	bcs	1ac44 <test_basic_sort@@Base+0x490>
   1a9a0:	ldrb	ip, [r3, r2]
   1a9a4:	add	fp, r3, r2
   1a9a8:	mov	r2, lr
   1a9ac:	cmp	r4, ip
   1a9b0:	bls	1aa00 <test_basic_sort@@Base+0x24c>
   1a9b4:	lsl	r1, r2, #1
   1a9b8:	strb	ip, [r9]
   1a9bc:	strb	r4, [fp]
   1a9c0:	cmp	r0, r1
   1a9c4:	bcc	1aa00 <test_basic_sort@@Base+0x24c>
   1a9c8:	cmp	r0, r1
   1a9cc:	ldr	ip, [r3, #-4]
   1a9d0:	bhi	1a970 <test_basic_sort@@Base+0x1bc>
   1a9d4:	cmp	r2, ip
   1a9d8:	bcs	1ac44 <test_basic_sort@@Base+0x490>
   1a9dc:	cmp	r1, ip
   1a9e0:	add	fp, r3, r2
   1a9e4:	ldrb	ip, [r3, r2]
   1a9e8:	bcs	1ac44 <test_basic_sort@@Base+0x490>
   1a9ec:	ldrb	r4, [r3, r1]
   1a9f0:	add	r9, r3, r1
   1a9f4:	mov	r2, r1
   1a9f8:	cmp	r4, ip
   1a9fc:	bhi	1a9b4 <test_basic_sort@@Base+0x200>
   1aa00:	sub	r7, r7, #1
   1aa04:	sub	r8, r8, #2
   1aa08:	cmn	r7, #1
   1aa0c:	bne	1a95c <test_basic_sort@@Base+0x1a8>
   1aa10:	cmp	r0, #0
   1aa14:	beq	1aad4 <test_basic_sort@@Base+0x320>
   1aa18:	add	sl, r3, sl
   1aa1c:	ldrb	ip, [sl, #-1]!
   1aa20:	mov	r2, #0
   1aa24:	sub	r0, r0, #1
   1aa28:	mov	r1, r2
   1aa2c:	ldrb	lr, [r3]
   1aa30:	strb	lr, [sl]
   1aa34:	strb	ip, [r3]
   1aa38:	b	1aa94 <test_basic_sort@@Base+0x2e0>
   1aa3c:	cmp	ip, r1
   1aa40:	bls	1ac44 <test_basic_sort@@Base+0x490>
   1aa44:	add	lr, r1, #1
   1aa48:	ldrb	r7, [r3, r1]
   1aa4c:	cmp	ip, lr
   1aa50:	bls	1ac44 <test_basic_sort@@Base+0x490>
   1aa54:	ldrb	r4, [r3, lr]
   1aa58:	add	r8, r3, lr
   1aa5c:	cmp	r7, r4
   1aa60:	bcs	1abbc <test_basic_sort@@Base+0x408>
   1aa64:	cmp	ip, r2
   1aa68:	bls	1ac44 <test_basic_sort@@Base+0x490>
   1aa6c:	ldrb	ip, [r3, r2]
   1aa70:	add	r7, r3, r2
   1aa74:	mov	r2, lr
   1aa78:	cmp	r4, ip
   1aa7c:	bls	1aacc <test_basic_sort@@Base+0x318>
   1aa80:	lsl	r1, r2, #1
   1aa84:	strb	ip, [r8]
   1aa88:	strb	r4, [r7]
   1aa8c:	cmp	r0, r1
   1aa90:	bcc	1aacc <test_basic_sort@@Base+0x318>
   1aa94:	cmp	r0, r1
   1aa98:	ldr	ip, [r3, #-4]
   1aa9c:	bhi	1aa3c <test_basic_sort@@Base+0x288>
   1aaa0:	cmp	ip, r2
   1aaa4:	bls	1ac44 <test_basic_sort@@Base+0x490>
   1aaa8:	cmp	ip, r1
   1aaac:	add	r7, r3, r2
   1aab0:	ldrb	ip, [r3, r2]
   1aab4:	bls	1ac44 <test_basic_sort@@Base+0x490>
   1aab8:	ldrb	r4, [r3, r1]
   1aabc:	add	r8, r3, r1
   1aac0:	mov	r2, r1
   1aac4:	cmp	r4, ip
   1aac8:	bhi	1aa80 <test_basic_sort@@Base+0x2cc>
   1aacc:	cmp	r0, #0
   1aad0:	bne	1aa1c <test_basic_sort@@Base+0x268>
   1aad4:	ldr	r2, [r3, #-4]
   1aad8:	cmp	r2, #7
   1aadc:	bne	1ab80 <test_basic_sort@@Base+0x3cc>
   1aae0:	ldrb	ip, [r5, r6]
   1aae4:	cmp	ip, #1
   1aae8:	bne	1ac28 <test_basic_sort@@Base+0x474>
   1aaec:	mov	r7, r3
   1aaf0:	add	r6, sp, #25
   1aaf4:	mov	r5, ip
   1aaf8:	mov	lr, #0
   1aafc:	mov	r4, #6
   1ab00:	mov	r0, #0
   1ab04:	sub	r2, r4, r0
   1ab08:	add	r2, r0, r2, lsr #1
   1ab0c:	cmp	r2, #6
   1ab10:	bhi	1ac44 <test_basic_sort@@Base+0x490>
   1ab14:	ldrb	r1, [r3, r2]
   1ab18:	cmp	r1, ip
   1ab1c:	bcs	1ab44 <test_basic_sort@@Base+0x390>
   1ab20:	b	1abd0 <test_basic_sort@@Base+0x41c>
   1ab24:	sub	r1, r2, r0
   1ab28:	add	r1, r0, r1, lsr #1
   1ab2c:	cmp	r1, #6
   1ab30:	bhi	1ac44 <test_basic_sort@@Base+0x490>
   1ab34:	ldrb	r4, [r3, r1]
   1ab38:	cmp	r4, ip
   1ab3c:	bcc	1abd8 <test_basic_sort@@Base+0x424>
   1ab40:	mov	r2, r1
   1ab44:	cmp	r2, r0
   1ab48:	bhi	1ab24 <test_basic_sort@@Base+0x370>
   1ab4c:	cmp	r2, r0
   1ab50:	beq	1abec <test_basic_sort@@Base+0x438>
   1ab54:	ldr	r0, [pc, #300]	; 1ac88 <test_basic_sort@@Base+0x4d4>
   1ab58:	add	r0, pc, r0
   1ab5c:	bl	12944 <puts@plt>
   1ab60:	mvn	r0, #0
   1ab64:	add	sp, sp, #36	; 0x24
   1ab68:	ldrd	r4, [sp]
   1ab6c:	ldrd	r6, [sp, #8]
   1ab70:	ldrd	r8, [sp, #16]
   1ab74:	ldrd	sl, [sp, #24]
   1ab78:	add	sp, sp, #32
   1ab7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab80:	ldr	r3, [pc, #260]	; 1ac8c <test_basic_sort@@Base+0x4d8>
   1ab84:	mov	r2, #1552	; 0x610
   1ab88:	ldr	r1, [pc, #256]	; 1ac90 <test_basic_sort@@Base+0x4dc>
   1ab8c:	ldr	r0, [pc, #256]	; 1ac94 <test_basic_sort@@Base+0x4e0>
   1ab90:	add	r3, pc, r3
   1ab94:	add	r3, r3, #1360	; 0x550
   1ab98:	add	r1, pc, r1
   1ab9c:	add	r3, r3, #8
   1aba0:	add	r0, pc, r0
   1aba4:	bl	129e0 <__assert_fail@plt>
   1aba8:	cmp	r2, ip
   1abac:	bcs	1ac44 <test_basic_sort@@Base+0x490>
   1abb0:	add	fp, r3, r2
   1abb4:	ldrb	ip, [r3, r2]
   1abb8:	b	1a9ec <test_basic_sort@@Base+0x238>
   1abbc:	cmp	ip, r2
   1abc0:	bls	1ac44 <test_basic_sort@@Base+0x490>
   1abc4:	add	r7, r3, r2
   1abc8:	ldrb	ip, [r3, r2]
   1abcc:	b	1aab8 <test_basic_sort@@Base+0x304>
   1abd0:	mov	r1, r2
   1abd4:	mov	r2, r4
   1abd8:	add	r0, r1, #1
   1abdc:	cmp	r0, r2
   1abe0:	bcs	1ab4c <test_basic_sort@@Base+0x398>
   1abe4:	mov	r4, r2
   1abe8:	b	1ab04 <test_basic_sort@@Base+0x350>
   1abec:	ldrb	r1, [r3, r2]
   1abf0:	cmp	r1, ip
   1abf4:	bne	1ab54 <test_basic_sort@@Base+0x3a0>
   1abf8:	cmp	lr, #3
   1abfc:	beq	1ac70 <test_basic_sort@@Base+0x4bc>
   1ac00:	cmp	lr, r2
   1ac04:	bne	1ab54 <test_basic_sort@@Base+0x3a0>
   1ac08:	cmp	r5, #7
   1ac0c:	beq	1ac3c <test_basic_sort@@Base+0x488>
   1ac10:	ldrb	ip, [r7, #1]!
   1ac14:	add	lr, lr, #1
   1ac18:	add	r5, r5, #1
   1ac1c:	ldrb	r2, [r6], #1
   1ac20:	cmp	r2, ip
   1ac24:	beq	1aafc <test_basic_sort@@Base+0x348>
   1ac28:	ldr	r0, [pc, #104]	; 1ac98 <test_basic_sort@@Base+0x4e4>
   1ac2c:	add	r0, pc, r0
   1ac30:	bl	12944 <puts@plt>
   1ac34:	mvn	r0, #0
   1ac38:	b	1ab64 <test_basic_sort@@Base+0x3b0>
   1ac3c:	mov	r0, #0
   1ac40:	b	1ab64 <test_basic_sort@@Base+0x3b0>
   1ac44:	ldr	r3, [pc, #80]	; 1ac9c <test_basic_sort@@Base+0x4e8>
   1ac48:	movw	r2, #395	; 0x18b
   1ac4c:	ldr	r1, [pc, #76]	; 1aca0 <test_basic_sort@@Base+0x4ec>
   1ac50:	ldr	r0, [pc, #76]	; 1aca4 <test_basic_sort@@Base+0x4f0>
   1ac54:	add	r3, pc, r3
   1ac58:	add	r3, r3, #1328	; 0x530
   1ac5c:	add	r1, pc, r1
   1ac60:	add	r3, r3, #12
   1ac64:	add	r0, pc, r0
   1ac68:	bl	129e0 <__assert_fail@plt>
   1ac6c:	bl	13668 <_start@@Base+0xaac>
   1ac70:	cmp	r2, #2
   1ac74:	beq	1ac10 <test_basic_sort@@Base+0x45c>
   1ac78:	b	1ab54 <test_basic_sort@@Base+0x3a0>
   1ac7c:	andeq	fp, r0, r0, lsr #6
   1ac80:	andeq	fp, r0, r4, lsr #8
   1ac84:	andeq	sl, r0, r4, lsr r6
   1ac88:	andeq	ip, r0, r8, ror r6
   1ac8c:	andeq	sl, r0, r0, asr r3
   1ac90:	andeq	fp, r0, r4, lsl r7
   1ac94:	andeq	ip, r0, r8, ror #11
   1ac98:	andeq	ip, r0, ip, lsl #11
   1ac9c:	andeq	sl, r0, ip, lsl #5
   1aca0:	muleq	r0, ip, sl
   1aca4:	andeq	sl, r0, r4, lsl fp

0001aca8 <test_clone_slice@@Base>:
   1aca8:	mov	r2, #256	; 0x100
   1acac:	mov	r3, #1
   1acb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1acb4:	strd	r6, [sp, #8]
   1acb8:	mov	r6, #0
   1acbc:	mov	r4, r0
   1acc0:	strd	r8, [sp, #16]
   1acc4:	strd	sl, [sp, #24]
   1acc8:	str	lr, [sp, #32]
   1accc:	sub	sp, sp, #44	; 0x2c
   1acd0:	ldr	r5, [pc, #2924]	; 1b844 <test_clone_slice@@Base+0xb9c>
   1acd4:	str	r2, [sp, #32]
   1acd8:	strh	r3, [sp, #36]	; 0x24
   1acdc:	strb	r6, [sp, #38]	; 0x26
   1ace0:	bl	1f250 <flatcc_builder_reset@@Base>
   1ace4:	ldr	r1, [pc, #2908]	; 1b848 <test_clone_slice@@Base+0xba0>
   1ace8:	mov	r3, r6
   1acec:	mov	r2, r6
   1acf0:	mov	r0, r4
   1acf4:	add	r5, pc, r5
   1acf8:	add	r1, pc, r1
   1acfc:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   1ad00:	cmp	r0, r6
   1ad04:	bne	1ad14 <test_clone_slice@@Base+0x6c>
   1ad08:	mov	r1, #36	; 0x24
   1ad0c:	mov	r0, r4
   1ad10:	bl	20a20 <flatcc_builder_start_table@@Base>
   1ad14:	ldr	r1, [pc, #2864]	; 1b84c <test_clone_slice@@Base+0xba4>
   1ad18:	mov	r0, r4
   1ad1c:	add	r1, pc, r1
   1ad20:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1ad24:	subs	r6, r0, #0
   1ad28:	beq	1ad40 <test_clone_slice@@Base+0x98>
   1ad2c:	mov	r1, #3
   1ad30:	mov	r0, r4
   1ad34:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1ad38:	cmp	r0, #0
   1ad3c:	strne	r6, [r0]
   1ad40:	mov	r2, #1
   1ad44:	mvn	r0, #0
   1ad48:	add	r3, sp, #32
   1ad4c:	mov	r1, r3
   1ad50:	mov	r3, r2
   1ad54:	str	r2, [sp]
   1ad58:	mov	r2, #7
   1ad5c:	str	r0, [sp, #4]
   1ad60:	mov	r0, r4
   1ad64:	str	r1, [sp, #20]
   1ad68:	bl	215d4 <flatcc_builder_create_vector@@Base>
   1ad6c:	subs	r6, r0, #0
   1ad70:	beq	1ad88 <test_clone_slice@@Base+0xe0>
   1ad74:	mov	r1, #24
   1ad78:	mov	r0, r4
   1ad7c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1ad80:	cmp	r0, #0
   1ad84:	strne	r6, [r0]
   1ad88:	mvn	r3, #-1073741824	; 0xc0000000
   1ad8c:	mov	r2, #2
   1ad90:	mov	r1, #4
   1ad94:	mov	r0, r4
   1ad98:	bl	20770 <flatcc_builder_start_vector@@Base>
   1ad9c:	mov	r1, #2
   1ada0:	mov	r0, r4
   1ada4:	bl	1fe28 <flatcc_builder_extend_vector@@Base>
   1ada8:	mov	r3, r0
   1adac:	mov	r1, #22
   1adb0:	mov	r2, #44	; 0x2c
   1adb4:	mov	r0, r4
   1adb8:	strh	r1, [r3]
   1adbc:	strh	r2, [r3, #4]
   1adc0:	bl	2175c <flatcc_builder_end_vector@@Base>
   1adc4:	subs	r6, r0, #0
   1adc8:	beq	1ade0 <test_clone_slice@@Base+0x138>
   1adcc:	mov	r1, #9
   1add0:	mov	r0, r4
   1add4:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1add8:	cmp	r0, #0
   1addc:	strne	r6, [r0]
   1ade0:	mov	r3, #16
   1ade4:	mov	r2, #32
   1ade8:	mov	r1, #0
   1adec:	mov	r0, r4
   1adf0:	bl	22554 <flatcc_builder_table_add@@Base>
   1adf4:	ldr	r1, [pc, #2644]	; 1b850 <test_clone_slice@@Base+0xba8>
   1adf8:	movw	r3, #13107	; 0x3333
   1adfc:	movt	r3, #49705	; 0xc229
   1ae00:	mov	r2, #1
   1ae04:	str	r3, [r0]
   1ae08:	mov	r0, r4
   1ae0c:	add	r1, pc, r1
   1ae10:	add	r1, r1, #1024	; 0x400
   1ae14:	add	r1, r1, #4
   1ae18:	bl	21358 <flatcc_builder_check_required@@Base>
   1ae1c:	cmp	r0, #0
   1ae20:	beq	1b7a4 <test_clone_slice@@Base+0xafc>
   1ae24:	mov	r0, r4
   1ae28:	add	fp, sp, #28
   1ae2c:	bl	21404 <flatcc_builder_end_table@@Base>
   1ae30:	mov	r1, r0
   1ae34:	mov	r0, r4
   1ae38:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   1ae3c:	mov	r1, fp
   1ae40:	mov	r0, r4
   1ae44:	bl	22e80 <flatcc_builder_finalize_aligned_buffer@@Base>
   1ae48:	ldr	r3, [pc, #2564]	; 1b854 <test_clone_slice@@Base+0xbac>
   1ae4c:	mov	r8, r0
   1ae50:	mov	r1, r0
   1ae54:	ldr	r0, [pc, #2556]	; 1b858 <test_clone_slice@@Base+0xbb0>
   1ae58:	ldr	r2, [sp, #28]
   1ae5c:	ldr	r3, [r5, r3]
   1ae60:	add	r0, pc, r0
   1ae64:	str	r3, [sp, #12]
   1ae68:	ldr	r3, [r3]
   1ae6c:	bl	12cd8 <_start@@Base+0x11c>
   1ae70:	cmp	r8, #0
   1ae74:	mov	r0, r4
   1ae78:	beq	1ae90 <test_clone_slice@@Base+0x1e8>
   1ae7c:	ldr	r2, [r8, #4]
   1ae80:	movw	r3, #20301	; 0x4f4d
   1ae84:	movt	r3, #21326	; 0x534e
   1ae88:	cmp	r2, r3
   1ae8c:	beq	1aec4 <test_clone_slice@@Base+0x21c>
   1ae90:	bl	1f250 <flatcc_builder_reset@@Base>
   1ae94:	ldr	r1, [pc, #2496]	; 1b85c <test_clone_slice@@Base+0xbb4>
   1ae98:	mov	r3, #0
   1ae9c:	mov	r0, r4
   1aea0:	mov	r2, r3
   1aea4:	add	r1, pc, r1
   1aea8:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   1aeac:	cmp	r0, #0
   1aeb0:	bne	1aec0 <test_clone_slice@@Base+0x218>
   1aeb4:	mov	r0, r4
   1aeb8:	mov	r1, #36	; 0x24
   1aebc:	bl	20a20 <flatcc_builder_start_table@@Base>
   1aec0:	bl	132a8 <_start@@Base+0x6ec>
   1aec4:	ldr	sl, [r8]
   1aec8:	bl	1f250 <flatcc_builder_reset@@Base>
   1aecc:	ldr	r1, [pc, #2444]	; 1b860 <test_clone_slice@@Base+0xbb8>
   1aed0:	mov	r3, #0
   1aed4:	mov	r0, r4
   1aed8:	mov	r2, r3
   1aedc:	add	r9, r8, sl
   1aee0:	add	r1, pc, r1
   1aee4:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   1aee8:	cmp	r0, #0
   1aeec:	bne	1aefc <test_clone_slice@@Base+0x254>
   1aef0:	mov	r1, #36	; 0x24
   1aef4:	mov	r0, r4
   1aef8:	bl	20a20 <flatcc_builder_start_table@@Base>
   1aefc:	cmp	r9, #0
   1af00:	beq	1aec0 <test_clone_slice@@Base+0x218>
   1af04:	ldr	r3, [r8, sl]
   1af08:	sub	r3, r9, r3
   1af0c:	ldrh	r1, [r3]
   1af10:	cmp	r1, #11
   1af14:	bls	1b76c <test_clone_slice@@Base+0xac4>
   1af18:	ldrh	r5, [r3, #10]
   1af1c:	cmp	r5, #0
   1af20:	beq	1b76c <test_clone_slice@@Base+0xac4>
   1af24:	ldr	r2, [r9, r5]
   1af28:	add	r5, r9, r5
   1af2c:	add	r2, r2, #4
   1af30:	adds	r5, r5, r2
   1af34:	beq	1b7c0 <test_clone_slice@@Base+0xb18>
   1af38:	cmp	r1, #53	; 0x35
   1af3c:	bls	1b810 <test_clone_slice@@Base+0xb68>
   1af40:	ldrh	r6, [r3, #52]	; 0x34
   1af44:	cmp	r6, #0
   1af48:	beq	1b810 <test_clone_slice@@Base+0xb68>
   1af4c:	ldr	r2, [r9, r6]
   1af50:	add	r6, r9, r6
   1af54:	add	r2, r2, #4
   1af58:	adds	r6, r6, r2
   1af5c:	beq	1b810 <test_clone_slice@@Base+0xb68>
   1af60:	ldrh	r7, [r3, #22]
   1af64:	cmp	r7, #0
   1af68:	beq	1b7e8 <test_clone_slice@@Base+0xb40>
   1af6c:	ldr	r3, [r9, r7]
   1af70:	add	r7, r9, r7
   1af74:	add	r3, r3, #4
   1af78:	adds	r7, r7, r3
   1af7c:	beq	1b7e8 <test_clone_slice@@Base+0xb40>
   1af80:	mov	r1, r5
   1af84:	mov	r0, r4
   1af88:	ldr	r2, [r5, #-4]
   1af8c:	bl	22270 <flatcc_builder_create_string@@Base>
   1af90:	subs	r3, r0, #0
   1af94:	str	r3, [sp, #16]
   1af98:	beq	1afb4 <test_clone_slice@@Base+0x30c>
   1af9c:	mov	r1, #3
   1afa0:	mov	r0, r4
   1afa4:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1afa8:	cmp	r0, #0
   1afac:	ldrne	r3, [sp, #16]
   1afb0:	strne	r3, [r0]
   1afb4:	mov	r0, r4
   1afb8:	bl	20800 <flatcc_builder_start_offset_vector@@Base>
   1afbc:	mov	r1, r5
   1afc0:	mov	r0, r4
   1afc4:	ldr	r2, [r5, #-4]
   1afc8:	bl	22270 <flatcc_builder_create_string@@Base>
   1afcc:	subs	r1, r0, #0
   1afd0:	beq	1afdc <test_clone_slice@@Base+0x334>
   1afd4:	mov	r0, r4
   1afd8:	bl	20150 <flatcc_builder_offset_vector_push@@Base>
   1afdc:	ldr	r1, [r5, #-4]
   1afe0:	cmp	r1, #4
   1afe4:	movls	r2, #0
   1afe8:	bls	1affc <test_clone_slice@@Base+0x354>
   1afec:	sub	r2, r1, #4
   1aff0:	mov	r1, #4
   1aff4:	cmp	r2, #19
   1aff8:	movhi	r2, #20
   1affc:	add	r1, r5, r1
   1b000:	mov	r0, r4
   1b004:	bl	22270 <flatcc_builder_create_string@@Base>
   1b008:	subs	r1, r0, #0
   1b00c:	beq	1b018 <test_clone_slice@@Base+0x370>
   1b010:	mov	r0, r4
   1b014:	bl	20150 <flatcc_builder_offset_vector_push@@Base>
   1b018:	ldr	r2, [r5, #-4]
   1b01c:	mov	r1, r5
   1b020:	mov	r0, r4
   1b024:	cmp	r2, #3
   1b028:	movcs	r2, #3
   1b02c:	bl	22270 <flatcc_builder_create_string@@Base>
   1b030:	subs	r1, r0, #0
   1b034:	beq	1b040 <test_clone_slice@@Base+0x398>
   1b038:	mov	r0, r4
   1b03c:	bl	20150 <flatcc_builder_offset_vector_push@@Base>
   1b040:	mov	r0, r4
   1b044:	bl	21888 <flatcc_builder_end_offset_vector@@Base>
   1b048:	subs	r3, r0, #0
   1b04c:	str	r3, [sp, #16]
   1b050:	beq	1b06c <test_clone_slice@@Base+0x3c4>
   1b054:	mov	r1, #10
   1b058:	mov	r0, r4
   1b05c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1b060:	cmp	r0, #0
   1b064:	ldrne	r3, [sp, #16]
   1b068:	strne	r3, [r0]
   1b06c:	mov	r1, #36	; 0x24
   1b070:	mov	r0, r4
   1b074:	bl	20a20 <flatcc_builder_start_table@@Base>
   1b078:	ldr	r1, [r5, #-4]
   1b07c:	cmp	r1, #2
   1b080:	movls	r2, #0
   1b084:	bls	1b098 <test_clone_slice@@Base+0x3f0>
   1b088:	sub	r2, r1, #2
   1b08c:	mov	r1, #2
   1b090:	cmp	r2, #19
   1b094:	movhi	r2, #20
   1b098:	add	r1, r5, r1
   1b09c:	mov	r0, r4
   1b0a0:	bl	22270 <flatcc_builder_create_string@@Base>
   1b0a4:	subs	r5, r0, #0
   1b0a8:	beq	1b0c0 <test_clone_slice@@Base+0x418>
   1b0ac:	mov	r1, #3
   1b0b0:	mov	r0, r4
   1b0b4:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1b0b8:	cmp	r0, #0
   1b0bc:	strne	r5, [r0]
   1b0c0:	mov	r0, #1
   1b0c4:	mvn	ip, #0
   1b0c8:	ldr	r2, [r6, #-4]
   1b0cc:	mov	r3, r0
   1b0d0:	mov	r1, r6
   1b0d4:	stm	sp, {r0, ip}
   1b0d8:	mov	r0, r4
   1b0dc:	bl	215d4 <flatcc_builder_create_vector@@Base>
   1b0e0:	subs	r5, r0, #0
   1b0e4:	beq	1b0fc <test_clone_slice@@Base+0x454>
   1b0e8:	mov	r1, #24
   1b0ec:	mov	r0, r4
   1b0f0:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1b0f4:	cmp	r0, #0
   1b0f8:	strne	r5, [r0]
   1b0fc:	ldr	r1, [r7, #-4]
   1b100:	cmp	r1, #1
   1b104:	lslls	r1, r1, #2
   1b108:	movls	r2, #0
   1b10c:	bls	1b120 <test_clone_slice@@Base+0x478>
   1b110:	cmp	r1, #2
   1b114:	mov	r1, #4
   1b118:	moveq	r2, #1
   1b11c:	movne	r2, #2
   1b120:	mvn	ip, #-1073741824	; 0xc0000000
   1b124:	mov	r3, #2
   1b128:	add	r1, r7, r1
   1b12c:	mov	r0, r4
   1b130:	stm	sp, {r3, ip}
   1b134:	mov	r3, #4
   1b138:	bl	215d4 <flatcc_builder_create_vector@@Base>
   1b13c:	subs	r5, r0, #0
   1b140:	beq	1b158 <test_clone_slice@@Base+0x4b0>
   1b144:	mov	r1, #9
   1b148:	mov	r0, r4
   1b14c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1b150:	cmp	r0, #0
   1b154:	strne	r5, [r0]
   1b158:	ldr	r1, [pc, #1796]	; 1b864 <test_clone_slice@@Base+0xbbc>
   1b15c:	mov	r2, #1
   1b160:	mov	r0, r4
   1b164:	add	r1, pc, r1
   1b168:	add	r1, r1, #1024	; 0x400
   1b16c:	add	r1, r1, #4
   1b170:	bl	21358 <flatcc_builder_check_required@@Base>
   1b174:	cmp	r0, #0
   1b178:	beq	1b7a4 <test_clone_slice@@Base+0xafc>
   1b17c:	mov	r0, r4
   1b180:	bl	21404 <flatcc_builder_end_table@@Base>
   1b184:	subs	r5, r0, #0
   1b188:	beq	1b1d0 <test_clone_slice@@Base+0x528>
   1b18c:	mov	r3, #1
   1b190:	mov	r1, #7
   1b194:	mov	r2, r3
   1b198:	mov	r0, r4
   1b19c:	bl	22554 <flatcc_builder_table_add@@Base>
   1b1a0:	subs	r3, r0, #0
   1b1a4:	str	r3, [sp, #16]
   1b1a8:	beq	1b1d0 <test_clone_slice@@Base+0x528>
   1b1ac:	mov	r1, #8
   1b1b0:	mov	r0, r4
   1b1b4:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1b1b8:	cmp	r0, #0
   1b1bc:	beq	1b1d0 <test_clone_slice@@Base+0x528>
   1b1c0:	ldr	r3, [sp, #16]
   1b1c4:	mov	r2, #1
   1b1c8:	strb	r2, [r3]
   1b1cc:	str	r5, [r0]
   1b1d0:	ldr	r1, [r6, #-4]
   1b1d4:	mvn	ip, #0
   1b1d8:	mov	r3, #1
   1b1dc:	mov	r0, r4
   1b1e0:	stm	sp, {r3, ip}
   1b1e4:	cmp	r1, #3
   1b1e8:	subhi	r2, r1, #3
   1b1ec:	movhi	r1, #3
   1b1f0:	movls	r2, #0
   1b1f4:	add	r1, r6, r1
   1b1f8:	bl	215d4 <flatcc_builder_create_vector@@Base>
   1b1fc:	subs	r5, r0, #0
   1b200:	beq	1b218 <test_clone_slice@@Base+0x570>
   1b204:	mov	r1, #24
   1b208:	mov	r0, r4
   1b20c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1b210:	cmp	r0, #0
   1b214:	strne	r5, [r0]
   1b218:	ldr	r3, [r8, sl]
   1b21c:	sub	r3, r9, r3
   1b220:	ldrh	r2, [r3]
   1b224:	cmp	r2, #5
   1b228:	movls	r2, #0
   1b22c:	bls	1b23c <test_clone_slice@@Base+0x594>
   1b230:	ldrh	r2, [r3, #4]
   1b234:	cmp	r2, #0
   1b238:	addne	r2, r9, r2
   1b23c:	mov	r0, #16
   1b240:	mov	r3, #32
   1b244:	mov	r1, #0
   1b248:	str	r0, [sp]
   1b24c:	mov	r0, r4
   1b250:	bl	22750 <flatcc_builder_table_add_copy@@Base>
   1b254:	mvn	ip, #-1073741824	; 0xc0000000
   1b258:	mov	r0, #2
   1b25c:	ldr	r2, [r7, #-4]
   1b260:	mov	r1, r7
   1b264:	mov	r3, #4
   1b268:	stm	sp, {r0, ip}
   1b26c:	mov	r0, r4
   1b270:	bl	215d4 <flatcc_builder_create_vector@@Base>
   1b274:	subs	r5, r0, #0
   1b278:	beq	1b290 <test_clone_slice@@Base+0x5e8>
   1b27c:	mov	r1, #9
   1b280:	mov	r0, r4
   1b284:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1b288:	cmp	r0, #0
   1b28c:	strne	r5, [r0]
   1b290:	ldr	r1, [pc, #1488]	; 1b868 <test_clone_slice@@Base+0xbc0>
   1b294:	mov	r2, #1
   1b298:	mov	r0, r4
   1b29c:	add	r1, pc, r1
   1b2a0:	add	r1, r1, #1024	; 0x400
   1b2a4:	add	r1, r1, #4
   1b2a8:	bl	21358 <flatcc_builder_check_required@@Base>
   1b2ac:	cmp	r0, #0
   1b2b0:	beq	1b7a4 <test_clone_slice@@Base+0xafc>
   1b2b4:	mov	r0, r4
   1b2b8:	bl	21404 <flatcc_builder_end_table@@Base>
   1b2bc:	mov	r1, r0
   1b2c0:	mov	r0, r4
   1b2c4:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   1b2c8:	mov	r1, fp
   1b2cc:	mov	r0, r4
   1b2d0:	bl	22d14 <flatcc_builder_get_direct_buffer@@Base>
   1b2d4:	mov	r4, r0
   1b2d8:	ldr	r0, [pc, #1420]	; 1b86c <test_clone_slice@@Base+0xbc4>
   1b2dc:	mov	r1, r4
   1b2e0:	ldr	r3, [sp, #12]
   1b2e4:	ldr	r2, [sp, #28]
   1b2e8:	add	r0, pc, r0
   1b2ec:	ldr	r3, [r3]
   1b2f0:	bl	12cd8 <_start@@Base+0x11c>
   1b2f4:	cmp	r4, #0
   1b2f8:	beq	1aec0 <test_clone_slice@@Base+0x218>
   1b2fc:	ldr	r2, [r4, #4]
   1b300:	movw	r3, #20301	; 0x4f4d
   1b304:	movt	r3, #21326	; 0x534e
   1b308:	cmp	r2, r3
   1b30c:	bne	1aec0 <test_clone_slice@@Base+0x218>
   1b310:	ldr	r3, [r4]
   1b314:	adds	r6, r4, r3
   1b318:	beq	1aec0 <test_clone_slice@@Base+0x218>
   1b31c:	ldr	r5, [r4, r3]
   1b320:	sub	r5, r6, r5
   1b324:	ldrh	r7, [r5]
   1b328:	cmp	r7, #11
   1b32c:	bls	1b76c <test_clone_slice@@Base+0xac4>
   1b330:	ldrh	r0, [r5, #10]
   1b334:	cmp	r0, #0
   1b338:	beq	1b76c <test_clone_slice@@Base+0xac4>
   1b33c:	ldr	r3, [r6, r0]
   1b340:	add	r0, r6, r0
   1b344:	ldr	r1, [pc, #1316]	; 1b870 <test_clone_slice@@Base+0xbc8>
   1b348:	add	r3, r3, #4
   1b34c:	add	r0, r0, r3
   1b350:	add	r1, pc, r1
   1b354:	bl	128e4 <strcmp@plt>
   1b358:	cmp	r0, #0
   1b35c:	bne	1b6f4 <test_clone_slice@@Base+0xa4c>
   1b360:	cmp	r7, #25
   1b364:	bls	1b504 <test_clone_slice@@Base+0x85c>
   1b368:	ldrh	r3, [r5, #24]
   1b36c:	cmp	r3, #0
   1b370:	beq	1b504 <test_clone_slice@@Base+0x85c>
   1b374:	ldr	r2, [r6, r3]
   1b378:	add	r3, r6, r3
   1b37c:	add	r2, r2, #4
   1b380:	adds	r4, r3, r2
   1b384:	beq	1b504 <test_clone_slice@@Base+0x85c>
   1b388:	ldr	r9, [r4, #-4]
   1b38c:	cmp	r9, #0
   1b390:	beq	1b504 <test_clone_slice@@Base+0x85c>
   1b394:	ldr	r0, [r3, r2]
   1b398:	ldr	r1, [pc, #1236]	; 1b874 <test_clone_slice@@Base+0xbcc>
   1b39c:	add	r0, r0, #4
   1b3a0:	add	r0, r4, r0
   1b3a4:	add	r1, pc, r1
   1b3a8:	bl	128e4 <strcmp@plt>
   1b3ac:	cmp	r0, #0
   1b3b0:	bne	1b708 <test_clone_slice@@Base+0xa60>
   1b3b4:	cmp	r9, #1
   1b3b8:	bls	1b7bc <test_clone_slice@@Base+0xb14>
   1b3bc:	ldr	r0, [r4, #4]
   1b3c0:	add	r0, r0, #8
   1b3c4:	adds	r0, r4, r0
   1b3c8:	beq	1b528 <test_clone_slice@@Base+0x880>
   1b3cc:	ldr	r3, [r0, #-4]
   1b3d0:	cmp	r3, #6
   1b3d4:	bne	1b528 <test_clone_slice@@Base+0x880>
   1b3d8:	ldr	r1, [pc, #1176]	; 1b878 <test_clone_slice@@Base+0xbd0>
   1b3dc:	add	r1, pc, r1
   1b3e0:	bl	128e4 <strcmp@plt>
   1b3e4:	cmp	r0, #0
   1b3e8:	bne	1b744 <test_clone_slice@@Base+0xa9c>
   1b3ec:	cmp	r9, #2
   1b3f0:	beq	1b7bc <test_clone_slice@@Base+0xb14>
   1b3f4:	ldr	r0, [r4, #8]
   1b3f8:	add	r0, r0, #12
   1b3fc:	adds	r0, r4, r0
   1b400:	beq	1b560 <test_clone_slice@@Base+0x8b8>
   1b404:	ldr	r3, [r0, #-4]
   1b408:	cmp	r3, #3
   1b40c:	bne	1b560 <test_clone_slice@@Base+0x8b8>
   1b410:	ldr	r1, [pc, #1124]	; 1b87c <test_clone_slice@@Base+0xbd4>
   1b414:	add	r1, pc, r1
   1b418:	bl	128e4 <strcmp@plt>
   1b41c:	cmp	r0, #0
   1b420:	bne	1b730 <test_clone_slice@@Base+0xa88>
   1b424:	ldrh	r3, [r5, #20]
   1b428:	cmp	r3, #0
   1b42c:	beq	1b59c <test_clone_slice@@Base+0x8f4>
   1b430:	ldr	r9, [r6, r3]
   1b434:	add	sl, r6, r3
   1b438:	adds	r4, sl, r9
   1b43c:	beq	1b59c <test_clone_slice@@Base+0x8f4>
   1b440:	mov	r0, r4
   1b444:	bl	132e0 <_start@@Base+0x724>
   1b448:	ldr	r1, [pc, #1072]	; 1b880 <test_clone_slice@@Base+0xbd8>
   1b44c:	add	r1, pc, r1
   1b450:	bl	128e4 <strcmp@plt>
   1b454:	cmp	r0, #0
   1b458:	bne	1b71c <test_clone_slice@@Base+0xa74>
   1b45c:	ldr	r9, [sl, r9]
   1b460:	sub	r9, r4, r9
   1b464:	ldrh	r3, [r9]
   1b468:	cmp	r3, #53	; 0x35
   1b46c:	bls	1b574 <test_clone_slice@@Base+0x8cc>
   1b470:	ldrh	r0, [r9, #52]	; 0x34
   1b474:	cmp	r0, #0
   1b478:	beq	1b574 <test_clone_slice@@Base+0x8cc>
   1b47c:	ldr	r3, [r4, r0]
   1b480:	add	r0, r4, r0
   1b484:	add	r3, r3, #4
   1b488:	adds	r0, r0, r3
   1b48c:	beq	1b574 <test_clone_slice@@Base+0x8cc>
   1b490:	ldr	r2, [r0, #-4]
   1b494:	cmp	r2, #7
   1b498:	bne	1b574 <test_clone_slice@@Base+0x8cc>
   1b49c:	ldr	r1, [sp, #20]
   1b4a0:	bl	12914 <memcmp@plt>
   1b4a4:	cmp	r0, #0
   1b4a8:	bne	1b758 <test_clone_slice@@Base+0xab0>
   1b4ac:	cmp	r7, #53	; 0x35
   1b4b0:	bls	1b588 <test_clone_slice@@Base+0x8e0>
   1b4b4:	ldrh	r3, [r5, #52]	; 0x34
   1b4b8:	cmp	r3, #0
   1b4bc:	beq	1b588 <test_clone_slice@@Base+0x8e0>
   1b4c0:	ldr	r2, [r6, r3]
   1b4c4:	add	r3, r6, r3
   1b4c8:	add	r2, r2, #4
   1b4cc:	adds	r1, r3, r2
   1b4d0:	beq	1b588 <test_clone_slice@@Base+0x8e0>
   1b4d4:	ldr	r0, [r1, #-4]
   1b4d8:	cmp	r0, #4
   1b4dc:	bne	1b588 <test_clone_slice@@Base+0x8e0>
   1b4e0:	ldrb	r2, [r3, r2]
   1b4e4:	ldrb	r3, [sp, #35]	; 0x23
   1b4e8:	cmp	r2, r3
   1b4ec:	beq	1b5c4 <test_clone_slice@@Base+0x91c>
   1b4f0:	ldr	r0, [pc, #908]	; 1b884 <test_clone_slice@@Base+0xbdc>
   1b4f4:	mvn	r7, #0
   1b4f8:	add	r0, pc, r0
   1b4fc:	bl	12944 <puts@plt>
   1b500:	b	1b538 <test_clone_slice@@Base+0x890>
   1b504:	ldr	r3, [pc, #892]	; 1b888 <test_clone_slice@@Base+0xbe0>
   1b508:	mov	r2, #108	; 0x6c
   1b50c:	ldr	r1, [pc, #888]	; 1b88c <test_clone_slice@@Base+0xbe4>
   1b510:	ldr	r0, [pc, #888]	; 1b890 <test_clone_slice@@Base+0xbe8>
   1b514:	add	r3, pc, r3
   1b518:	add	r3, r3, #316	; 0x13c
   1b51c:	add	r1, pc, r1
   1b520:	add	r0, pc, r0
   1b524:	bl	129e0 <__assert_fail@plt>
   1b528:	ldr	r0, [pc, #868]	; 1b894 <test_clone_slice@@Base+0xbec>
   1b52c:	mvn	r7, #0
   1b530:	add	r0, pc, r0
   1b534:	bl	12944 <puts@plt>
   1b538:	mov	r0, r8
   1b53c:	bl	22fac <flatcc_builder_aligned_free@@Base>
   1b540:	mov	r0, r7
   1b544:	add	sp, sp, #44	; 0x2c
   1b548:	ldrd	r4, [sp]
   1b54c:	ldrd	r6, [sp, #8]
   1b550:	ldrd	r8, [sp, #16]
   1b554:	ldrd	sl, [sp, #24]
   1b558:	add	sp, sp, #32
   1b55c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b560:	ldr	r0, [pc, #816]	; 1b898 <test_clone_slice@@Base+0xbf0>
   1b564:	mvn	r7, #0
   1b568:	add	r0, pc, r0
   1b56c:	bl	12944 <puts@plt>
   1b570:	b	1b538 <test_clone_slice@@Base+0x890>
   1b574:	ldr	r0, [pc, #800]	; 1b89c <test_clone_slice@@Base+0xbf4>
   1b578:	mvn	r7, #0
   1b57c:	add	r0, pc, r0
   1b580:	bl	12944 <puts@plt>
   1b584:	b	1b538 <test_clone_slice@@Base+0x890>
   1b588:	ldr	r0, [pc, #784]	; 1b8a0 <test_clone_slice@@Base+0xbf8>
   1b58c:	mvn	r7, #0
   1b590:	add	r0, pc, r0
   1b594:	bl	12944 <puts@plt>
   1b598:	b	1b538 <test_clone_slice@@Base+0x890>
   1b59c:	ldr	r3, [pc, #768]	; 1b8a4 <test_clone_slice@@Base+0xbfc>
   1b5a0:	mov	r2, #1664	; 0x680
   1b5a4:	ldr	r1, [pc, #764]	; 1b8a8 <test_clone_slice@@Base+0xc00>
   1b5a8:	ldr	r0, [pc, #764]	; 1b8ac <test_clone_slice@@Base+0xc04>
   1b5ac:	add	r3, pc, r3
   1b5b0:	add	r3, r3, #1376	; 0x560
   1b5b4:	add	r1, pc, r1
   1b5b8:	add	r3, r3, #8
   1b5bc:	add	r0, pc, r0
   1b5c0:	bl	129e0 <__assert_fail@plt>
   1b5c4:	ldrb	r2, [r1, #1]
   1b5c8:	add	r1, r1, #1
   1b5cc:	ldrb	r3, [sp, #36]	; 0x24
   1b5d0:	cmp	r2, r3
   1b5d4:	bne	1b4f0 <test_clone_slice@@Base+0x848>
   1b5d8:	ldrb	r2, [r1, #1]!
   1b5dc:	ldrb	r3, [sp, #37]	; 0x25
   1b5e0:	cmp	r2, r3
   1b5e4:	bne	1b4f0 <test_clone_slice@@Base+0x848>
   1b5e8:	ldrb	r2, [r1, #1]
   1b5ec:	ldrb	r3, [sp, #38]	; 0x26
   1b5f0:	cmp	r2, r3
   1b5f4:	bne	1b4f0 <test_clone_slice@@Base+0x848>
   1b5f8:	ldrh	r3, [r5, #4]
   1b5fc:	mov	r7, #0
   1b600:	cmp	r3, r7
   1b604:	beq	1b838 <test_clone_slice@@Base+0xb90>
   1b608:	add	r3, r6, r3
   1b60c:	vldr	s15, [pc, #556]	; 1b840 <test_clone_slice@@Base+0xb98>
   1b610:	vldr	s14, [r3]
   1b614:	vcmp.f32	s14, s15
   1b618:	vmrs	APSR_nzcv, fpscr
   1b61c:	bne	1b790 <test_clone_slice@@Base+0xae8>
   1b620:	ldrh	r2, [r5, #22]
   1b624:	cmp	r2, #0
   1b628:	beq	1b6b8 <test_clone_slice@@Base+0xa10>
   1b62c:	ldr	r3, [r6, r2]
   1b630:	add	r6, r6, r2
   1b634:	add	r3, r3, #4
   1b638:	adds	r2, r6, r3
   1b63c:	beq	1b6b8 <test_clone_slice@@Base+0xa10>
   1b640:	ldr	r1, [r2, #-4]
   1b644:	cmp	r1, #2
   1b648:	bne	1b6b8 <test_clone_slice@@Base+0xa10>
   1b64c:	ldrsh	r3, [r6, r3]
   1b650:	cmp	r3, #22
   1b654:	bne	1b7a8 <test_clone_slice@@Base+0xb00>
   1b658:	cmn	r2, #4
   1b65c:	beq	1b6cc <test_clone_slice@@Base+0xa24>
   1b660:	ldrsh	r3, [r2, #4]
   1b664:	cmp	r3, #44	; 0x2c
   1b668:	bne	1b6cc <test_clone_slice@@Base+0xa24>
   1b66c:	ldrh	r2, [r9, #22]
   1b670:	cmp	r2, #0
   1b674:	beq	1b6e0 <test_clone_slice@@Base+0xa38>
   1b678:	ldr	r3, [r4, r2]
   1b67c:	add	r4, r4, r2
   1b680:	add	r3, r3, #4
   1b684:	adds	r2, r4, r3
   1b688:	beq	1b6e0 <test_clone_slice@@Base+0xa38>
   1b68c:	ldr	r2, [r2, #-4]
   1b690:	cmp	r2, #1
   1b694:	bne	1b6e0 <test_clone_slice@@Base+0xa38>
   1b698:	ldrsh	r3, [r4, r3]
   1b69c:	cmp	r3, #44	; 0x2c
   1b6a0:	beq	1b538 <test_clone_slice@@Base+0x890>
   1b6a4:	ldr	r0, [pc, #516]	; 1b8b0 <test_clone_slice@@Base+0xc08>
   1b6a8:	mvn	r7, #0
   1b6ac:	add	r0, pc, r0
   1b6b0:	bl	12944 <puts@plt>
   1b6b4:	b	1b538 <test_clone_slice@@Base+0x890>
   1b6b8:	ldr	r0, [pc, #500]	; 1b8b4 <test_clone_slice@@Base+0xc0c>
   1b6bc:	mvn	r7, #0
   1b6c0:	add	r0, pc, r0
   1b6c4:	bl	12944 <puts@plt>
   1b6c8:	b	1b538 <test_clone_slice@@Base+0x890>
   1b6cc:	ldr	r0, [pc, #484]	; 1b8b8 <test_clone_slice@@Base+0xc10>
   1b6d0:	mvn	r7, #0
   1b6d4:	add	r0, pc, r0
   1b6d8:	bl	12944 <puts@plt>
   1b6dc:	b	1b538 <test_clone_slice@@Base+0x890>
   1b6e0:	ldr	r0, [pc, #468]	; 1b8bc <test_clone_slice@@Base+0xc14>
   1b6e4:	mvn	r7, #0
   1b6e8:	add	r0, pc, r0
   1b6ec:	bl	12944 <puts@plt>
   1b6f0:	b	1b538 <test_clone_slice@@Base+0x890>
   1b6f4:	ldr	r0, [pc, #452]	; 1b8c0 <test_clone_slice@@Base+0xc18>
   1b6f8:	mvn	r7, #0
   1b6fc:	add	r0, pc, r0
   1b700:	bl	12944 <puts@plt>
   1b704:	b	1b538 <test_clone_slice@@Base+0x890>
   1b708:	ldr	r0, [pc, #436]	; 1b8c4 <test_clone_slice@@Base+0xc1c>
   1b70c:	mvn	r7, #0
   1b710:	add	r0, pc, r0
   1b714:	bl	12944 <puts@plt>
   1b718:	b	1b538 <test_clone_slice@@Base+0x890>
   1b71c:	ldr	r0, [pc, #420]	; 1b8c8 <test_clone_slice@@Base+0xc20>
   1b720:	mvn	r7, #0
   1b724:	add	r0, pc, r0
   1b728:	bl	128f0 <printf@plt>
   1b72c:	b	1b538 <test_clone_slice@@Base+0x890>
   1b730:	ldr	r0, [pc, #404]	; 1b8cc <test_clone_slice@@Base+0xc24>
   1b734:	mvn	r7, #0
   1b738:	add	r0, pc, r0
   1b73c:	bl	12944 <puts@plt>
   1b740:	b	1b538 <test_clone_slice@@Base+0x890>
   1b744:	ldr	r0, [pc, #388]	; 1b8d0 <test_clone_slice@@Base+0xc28>
   1b748:	mvn	r7, #0
   1b74c:	add	r0, pc, r0
   1b750:	bl	12944 <puts@plt>
   1b754:	b	1b538 <test_clone_slice@@Base+0x890>
   1b758:	ldr	r0, [pc, #372]	; 1b8d4 <test_clone_slice@@Base+0xc2c>
   1b75c:	mvn	r7, #0
   1b760:	add	r0, pc, r0
   1b764:	bl	12944 <puts@plt>
   1b768:	b	1b538 <test_clone_slice@@Base+0x890>
   1b76c:	ldr	r3, [pc, #356]	; 1b8d8 <test_clone_slice@@Base+0xc30>
   1b770:	movw	r2, #699	; 0x2bb
   1b774:	ldr	r1, [pc, #352]	; 1b8dc <test_clone_slice@@Base+0xc34>
   1b778:	ldr	r0, [pc, #352]	; 1b8e0 <test_clone_slice@@Base+0xc38>
   1b77c:	add	r3, pc, r3
   1b780:	add	r3, r3, #524	; 0x20c
   1b784:	add	r1, pc, r1
   1b788:	add	r0, pc, r0
   1b78c:	bl	129e0 <__assert_fail@plt>
   1b790:	ldr	r0, [pc, #332]	; 1b8e4 <test_clone_slice@@Base+0xc3c>
   1b794:	mvn	r7, #0
   1b798:	add	r0, pc, r0
   1b79c:	bl	12944 <puts@plt>
   1b7a0:	b	1b538 <test_clone_slice@@Base+0x890>
   1b7a4:	bl	13668 <_start@@Base+0xaac>
   1b7a8:	ldr	r0, [pc, #312]	; 1b8e8 <test_clone_slice@@Base+0xc40>
   1b7ac:	mvn	r7, #0
   1b7b0:	add	r0, pc, r0
   1b7b4:	bl	12944 <puts@plt>
   1b7b8:	b	1b538 <test_clone_slice@@Base+0x890>
   1b7bc:	bl	130cc <_start@@Base+0x510>
   1b7c0:	ldr	r3, [pc, #292]	; 1b8ec <test_clone_slice@@Base+0xc44>
   1b7c4:	movw	r2, #1604	; 0x644
   1b7c8:	ldr	r1, [pc, #288]	; 1b8f0 <test_clone_slice@@Base+0xc48>
   1b7cc:	ldr	r0, [pc, #288]	; 1b8f4 <test_clone_slice@@Base+0xc4c>
   1b7d0:	add	r3, pc, r3
   1b7d4:	add	r3, r3, #1376	; 0x560
   1b7d8:	add	r1, pc, r1
   1b7dc:	add	r3, r3, #8
   1b7e0:	add	r0, pc, r0
   1b7e4:	bl	129e0 <__assert_fail@plt>
   1b7e8:	ldr	r3, [pc, #264]	; 1b8f8 <test_clone_slice@@Base+0xc50>
   1b7ec:	movw	r2, #1608	; 0x648
   1b7f0:	ldr	r1, [pc, #260]	; 1b8fc <test_clone_slice@@Base+0xc54>
   1b7f4:	ldr	r0, [pc, #260]	; 1b900 <test_clone_slice@@Base+0xc58>
   1b7f8:	add	r3, pc, r3
   1b7fc:	add	r3, r3, #1376	; 0x560
   1b800:	add	r1, pc, r1
   1b804:	add	r3, r3, #8
   1b808:	add	r0, pc, r0
   1b80c:	bl	129e0 <__assert_fail@plt>
   1b810:	ldr	r3, [pc, #236]	; 1b904 <test_clone_slice@@Base+0xc5c>
   1b814:	movw	r2, #1606	; 0x646
   1b818:	ldr	r1, [pc, #232]	; 1b908 <test_clone_slice@@Base+0xc60>
   1b81c:	ldr	r0, [pc, #232]	; 1b90c <test_clone_slice@@Base+0xc64>
   1b820:	add	r3, pc, r3
   1b824:	add	r3, r3, #1376	; 0x560
   1b828:	add	r1, pc, r1
   1b82c:	add	r3, r3, #8
   1b830:	add	r0, pc, r0
   1b834:	bl	129e0 <__assert_fail@plt>
   1b838:	ldr	r3, [r3]
   1b83c:	udf	#0
   1b840:	eorgt	r3, r9, #-872415232	; 0xcc000000
   1b844:	andeq	pc, r1, r4, lsl #6
   1b848:	andeq	sl, r0, r4, asr #28
   1b84c:	ldrdeq	ip, [r0], -r4
   1b850:	ldrdeq	sl, [r0], -r4
   1b854:	andeq	r0, r0, r8, rrx
   1b858:	muleq	r0, ip, r3
   1b85c:	muleq	r0, r8, ip
   1b860:	andeq	sl, r0, ip, asr ip
   1b864:	andeq	r9, r0, ip, ror sp
   1b868:	andeq	r9, r0, r4, asr #24
   1b86c:	andeq	fp, r0, r0, asr #30
   1b870:	andeq	fp, r0, r0, lsr #29
   1b874:	andeq	fp, r0, ip, asr #28
   1b878:	andeq	fp, r0, r8, lsl lr
   1b87c:	andeq	fp, r0, r8, asr #29
   1b880:	andeq	fp, r0, r4, lsr #28
   1b884:	andeq	fp, r0, r8, lsl #29
   1b888:	andeq	r9, r0, ip, asr #19
   1b88c:	ldrdeq	sl, [r0], -ip
   1b890:	andeq	sl, r0, r8, asr r2
   1b894:	andeq	fp, r0, ip, asr #26
   1b898:	andeq	fp, r0, r4, asr sp
   1b89c:	andeq	fp, r0, ip, lsr #27
   1b8a0:	ldrdeq	fp, [r0], -r4
   1b8a4:	andeq	r9, r0, r4, lsr r9
   1b8a8:	strdeq	sl, [r0], -r8
   1b8ac:	andeq	sl, r0, r8, asr sp
   1b8b0:	muleq	r0, ip, sp
   1b8b4:	strdeq	fp, [r0], -ip
   1b8b8:	andeq	fp, r0, r8, lsr sp
   1b8bc:	andeq	fp, r0, r0, asr #26
   1b8c0:	andeq	fp, r0, r4, asr #22
   1b8c4:	andeq	fp, r0, ip, asr #22
   1b8c8:	ldrdeq	fp, [r0], -r4
   1b8cc:	andeq	fp, r0, r8, lsr #23
   1b8d0:	andeq	fp, r0, r4, asr fp
   1b8d4:	andeq	fp, r0, r4, ror #23
   1b8d8:	andeq	r9, r0, r4, ror #14
   1b8dc:	ldrdeq	r9, [r0], -r0
   1b8e0:	andeq	sl, r0, r8, lsr #32
   1b8e4:	andeq	fp, r0, r8, lsl #24
   1b8e8:	andeq	fp, r0, r0, asr #24
   1b8ec:	andeq	r9, r0, r0, lsl r7
   1b8f0:	ldrdeq	sl, [r0], -r4
   1b8f4:	strdeq	sl, [r0], -ip
   1b8f8:	andeq	r9, r0, r8, ror #13
   1b8fc:	andeq	sl, r0, ip, lsr #21
   1b900:	andeq	fp, r0, r8, lsl sl
   1b904:	andeq	r9, r0, r0, asr #13
   1b908:	andeq	sl, r0, r4, lsl #21
   1b90c:	andeq	fp, r0, r8, ror #19

0001b910 <test_create_add_field@@Base>:
   1b910:	strd	r4, [sp, #-16]!
   1b914:	mov	r4, r0
   1b918:	str	r6, [sp, #8]
   1b91c:	str	lr, [sp, #12]
   1b920:	sub	sp, sp, #8
   1b924:	bl	1f250 <flatcc_builder_reset@@Base>
   1b928:	ldr	r1, [pc, #696]	; 1bbe8 <test_create_add_field@@Base+0x2d8>
   1b92c:	mov	r3, #0
   1b930:	mov	r0, r4
   1b934:	mov	r2, r3
   1b938:	add	r1, pc, r1
   1b93c:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   1b940:	cmp	r0, #0
   1b944:	bne	1b954 <test_create_add_field@@Base+0x44>
   1b948:	mov	r1, #36	; 0x24
   1b94c:	mov	r0, r4
   1b950:	bl	20a20 <flatcc_builder_start_table@@Base>
   1b954:	ldr	r1, [pc, #656]	; 1bbec <test_create_add_field@@Base+0x2dc>
   1b958:	mov	r0, r4
   1b95c:	add	r1, pc, r1
   1b960:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1b964:	subs	r5, r0, #0
   1b968:	beq	1b980 <test_create_add_field@@Base+0x70>
   1b96c:	mov	r1, #3
   1b970:	mov	r0, r4
   1b974:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1b978:	cmp	r0, #0
   1b97c:	strne	r5, [r0]
   1b980:	ldr	r1, [pc, #616]	; 1bbf0 <test_create_add_field@@Base+0x2e0>
   1b984:	mov	r0, r4
   1b988:	add	r1, pc, r1
   1b98c:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1b990:	mov	r5, r0
   1b994:	mov	r1, #3
   1b998:	mov	r0, r4
   1b99c:	bl	20a20 <flatcc_builder_start_table@@Base>
   1b9a0:	subs	r6, r0, #0
   1b9a4:	bne	1ba5c <test_create_add_field@@Base+0x14c>
   1b9a8:	mov	r3, #8
   1b9ac:	mov	r1, #1
   1b9b0:	mov	r2, r3
   1b9b4:	mov	r0, r4
   1b9b8:	bl	22554 <flatcc_builder_table_add@@Base>
   1b9bc:	cmp	r0, #0
   1b9c0:	beq	1ba5c <test_create_add_field@@Base+0x14c>
   1b9c4:	mvn	r2, #99	; 0x63
   1b9c8:	mvn	r3, #0
   1b9cc:	cmp	r5, #0
   1b9d0:	strd	r2, [r0]
   1b9d4:	beq	1ba5c <test_create_add_field@@Base+0x14c>
   1b9d8:	mov	r1, r6
   1b9dc:	mov	r0, r4
   1b9e0:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1b9e4:	subs	r2, r0, #0
   1b9e8:	beq	1ba5c <test_create_add_field@@Base+0x14c>
   1b9ec:	mov	r3, #2
   1b9f0:	mov	r0, r4
   1b9f4:	str	r5, [r2]
   1b9f8:	mov	r1, r3
   1b9fc:	mov	r2, r3
   1ba00:	bl	22554 <flatcc_builder_table_add@@Base>
   1ba04:	subs	r3, r0, #0
   1ba08:	beq	1ba5c <test_create_add_field@@Base+0x14c>
   1ba0c:	ldr	r1, [pc, #480]	; 1bbf4 <test_create_add_field@@Base+0x2e4>
   1ba10:	mov	ip, #2
   1ba14:	mov	r2, r6
   1ba18:	mov	r0, r4
   1ba1c:	strh	ip, [r3]
   1ba20:	add	r1, pc, r1
   1ba24:	add	r1, r1, #1280	; 0x500
   1ba28:	add	r1, r1, #8
   1ba2c:	bl	21358 <flatcc_builder_check_required@@Base>
   1ba30:	cmp	r0, #0
   1ba34:	beq	1bbe4 <test_create_add_field@@Base+0x2d4>
   1ba38:	mov	r0, r4
   1ba3c:	bl	21404 <flatcc_builder_end_table@@Base>
   1ba40:	subs	r5, r0, #0
   1ba44:	beq	1ba5c <test_create_add_field@@Base+0x14c>
   1ba48:	mov	r1, #14
   1ba4c:	mov	r0, r4
   1ba50:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1ba54:	cmp	r0, #0
   1ba58:	strne	r5, [r0]
   1ba5c:	ldr	r1, [pc, #404]	; 1bbf8 <test_create_add_field@@Base+0x2e8>
   1ba60:	mov	r2, #1
   1ba64:	mov	r0, r4
   1ba68:	add	r1, pc, r1
   1ba6c:	add	r1, r1, #1024	; 0x400
   1ba70:	add	r1, r1, #4
   1ba74:	bl	21358 <flatcc_builder_check_required@@Base>
   1ba78:	cmp	r0, #0
   1ba7c:	beq	1bbe0 <test_create_add_field@@Base+0x2d0>
   1ba80:	mov	r0, r4
   1ba84:	bl	21404 <flatcc_builder_end_table@@Base>
   1ba88:	mov	r1, r0
   1ba8c:	mov	r0, r4
   1ba90:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   1ba94:	mov	r0, r4
   1ba98:	add	r1, sp, #4
   1ba9c:	bl	22e80 <flatcc_builder_finalize_aligned_buffer@@Base>
   1baa0:	subs	r4, r0, #0
   1baa4:	beq	1babc <test_create_add_field@@Base+0x1ac>
   1baa8:	ldr	r2, [r4, #4]
   1baac:	movw	r3, #20301	; 0x4f4d
   1bab0:	movt	r3, #21326	; 0x534e
   1bab4:	cmp	r2, r3
   1bab8:	beq	1bae4 <test_create_add_field@@Base+0x1d4>
   1babc:	ldr	r3, [pc, #312]	; 1bbfc <test_create_add_field@@Base+0x2ec>
   1bac0:	mov	r2, #716	; 0x2cc
   1bac4:	ldr	r1, [pc, #308]	; 1bc00 <test_create_add_field@@Base+0x2f0>
   1bac8:	ldr	r0, [pc, #308]	; 1bc04 <test_create_add_field@@Base+0x2f4>
   1bacc:	add	r3, pc, r3
   1bad0:	add	r3, r3, #1392	; 0x570
   1bad4:	add	r1, pc, r1
   1bad8:	add	r3, r3, #12
   1badc:	add	r0, pc, r0
   1bae0:	bl	129e0 <__assert_fail@plt>
   1bae4:	ldr	r3, [r4]
   1bae8:	adds	r2, r4, r3
   1baec:	beq	1babc <test_create_add_field@@Base+0x1ac>
   1baf0:	ldr	r3, [r4, r3]
   1baf4:	sub	r3, r2, r3
   1baf8:	ldrh	r1, [r3]
   1bafc:	cmp	r1, #29
   1bb00:	bls	1bba4 <test_create_add_field@@Base+0x294>
   1bb04:	ldrh	r0, [r3, #28]
   1bb08:	cmp	r0, #0
   1bb0c:	bne	1bbcc <test_create_add_field@@Base+0x2bc>
   1bb10:	cmp	r1, #33	; 0x21
   1bb14:	bls	1bba4 <test_create_add_field@@Base+0x294>
   1bb18:	ldrh	r3, [r3, #32]
   1bb1c:	cmp	r3, #0
   1bb20:	beq	1bba4 <test_create_add_field@@Base+0x294>
   1bb24:	ldr	r1, [r2, r3]
   1bb28:	add	r2, r2, r3
   1bb2c:	adds	r0, r2, r1
   1bb30:	beq	1bba4 <test_create_add_field@@Base+0x294>
   1bb34:	ldr	r3, [r2, r1]
   1bb38:	sub	r3, r0, r3
   1bb3c:	ldrh	r2, [r3]
   1bb40:	cmp	r2, #7
   1bb44:	bhi	1bb78 <test_create_add_field@@Base+0x268>
   1bb48:	ldr	r0, [pc, #184]	; 1bc08 <test_create_add_field@@Base+0x2f8>
   1bb4c:	mvn	r5, #0
   1bb50:	add	r0, pc, r0
   1bb54:	bl	12944 <puts@plt>
   1bb58:	mov	r0, r4
   1bb5c:	bl	22fac <flatcc_builder_aligned_free@@Base>
   1bb60:	mov	r0, r5
   1bb64:	add	sp, sp, #8
   1bb68:	ldrd	r4, [sp]
   1bb6c:	ldr	r6, [sp, #8]
   1bb70:	add	sp, sp, #12
   1bb74:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb78:	ldrh	r3, [r3, #6]
   1bb7c:	cmp	r3, #0
   1bb80:	beq	1bb48 <test_create_add_field@@Base+0x238>
   1bb84:	ldrd	r0, [r0, r3]
   1bb88:	mvn	r3, #0
   1bb8c:	mvn	r2, #99	; 0x63
   1bb90:	cmp	r1, r3
   1bb94:	cmpeq	r0, r2
   1bb98:	moveq	r5, #0
   1bb9c:	beq	1bb58 <test_create_add_field@@Base+0x248>
   1bba0:	b	1bb48 <test_create_add_field@@Base+0x238>
   1bba4:	ldr	r3, [pc, #96]	; 1bc0c <test_create_add_field@@Base+0x2fc>
   1bba8:	mov	r2, #608	; 0x260
   1bbac:	ldr	r1, [pc, #92]	; 1bc10 <test_create_add_field@@Base+0x300>
   1bbb0:	ldr	r0, [pc, #92]	; 1bc14 <test_create_add_field@@Base+0x304>
   1bbb4:	add	r3, pc, r3
   1bbb8:	add	r3, r3, #1440	; 0x5a0
   1bbbc:	add	r1, pc, r1
   1bbc0:	add	r3, r3, #4
   1bbc4:	add	r0, pc, r0
   1bbc8:	bl	129e0 <__assert_fail@plt>
   1bbcc:	ldr	r0, [pc, #68]	; 1bc18 <test_create_add_field@@Base+0x308>
   1bbd0:	mvn	r5, #0
   1bbd4:	add	r0, pc, r0
   1bbd8:	bl	12944 <puts@plt>
   1bbdc:	b	1bb58 <test_create_add_field@@Base+0x248>
   1bbe0:	bl	13668 <_start@@Base+0xaac>
   1bbe4:	bl	136a0 <_start@@Base+0xae4>
   1bbe8:	andeq	sl, r0, r4, lsl #4
   1bbec:	andeq	sl, r0, r8, lsl #6
   1bbf0:	andeq	fp, r0, r4, ror #21
   1bbf4:	andeq	r9, r0, r0, asr #9
   1bbf8:	andeq	r9, r0, r8, ror r4
   1bbfc:	andeq	r9, r0, r4, lsl r4
   1bc00:	andeq	r9, r0, r0, lsl #23
   1bc04:	strdeq	r9, [r0], -r4
   1bc08:	andeq	fp, r0, r4, asr r9
   1bc0c:	andeq	r9, r0, ip, lsr #6
   1bc10:	muleq	r0, r8, sl
   1bc14:	andeq	r9, r0, ip, lsl #22
   1bc18:	andeq	fp, r0, r0, lsr #17

0001bc1c <test_union_vector@@Base>:
   1bc1c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1bc20:	mov	r4, r0
   1bc24:	strd	r6, [sp, #8]
   1bc28:	str	lr, [sp, #16]
   1bc2c:	sub	sp, sp, #20
   1bc30:	bl	1f250 <flatcc_builder_reset@@Base>
   1bc34:	ldr	r1, [pc, #948]	; 1bff0 <test_union_vector@@Base+0x3d4>
   1bc38:	mov	r3, #0
   1bc3c:	mov	r0, r4
   1bc40:	mov	r2, r3
   1bc44:	add	r1, pc, r1
   1bc48:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   1bc4c:	cmp	r0, #0
   1bc50:	bne	1bc60 <test_union_vector@@Base+0x44>
   1bc54:	mov	r1, #36	; 0x24
   1bc58:	mov	r0, r4
   1bc5c:	bl	20a20 <flatcc_builder_start_table@@Base>
   1bc60:	ldr	r1, [pc, #908]	; 1bff4 <test_union_vector@@Base+0x3d8>
   1bc64:	mov	r0, r4
   1bc68:	add	r1, pc, r1
   1bc6c:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1bc70:	subs	r5, r0, #0
   1bc74:	beq	1bc8c <test_union_vector@@Base+0x70>
   1bc78:	mov	r1, #3
   1bc7c:	mov	r0, r4
   1bc80:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1bc84:	cmp	r0, #0
   1bc88:	strne	r5, [r0]
   1bc8c:	mov	r1, #4
   1bc90:	mov	r0, r4
   1bc94:	bl	20a20 <flatcc_builder_start_table@@Base>
   1bc98:	subs	r2, r0, #0
   1bc9c:	bne	1bef0 <test_union_vector@@Base+0x2d4>
   1bca0:	ldr	r5, [pc, #848]	; 1bff8 <test_union_vector@@Base+0x3dc>
   1bca4:	mov	r0, r4
   1bca8:	add	r5, pc, r5
   1bcac:	add	r1, r5, #1456	; 0x5b0
   1bcb0:	add	r1, r1, #12
   1bcb4:	bl	21358 <flatcc_builder_check_required@@Base>
   1bcb8:	cmp	r0, #0
   1bcbc:	beq	1bfd4 <test_union_vector@@Base+0x3b8>
   1bcc0:	mov	r0, r4
   1bcc4:	bl	21404 <flatcc_builder_end_table@@Base>
   1bcc8:	mov	r5, r0
   1bccc:	mov	r6, #2
   1bcd0:	mov	r0, r4
   1bcd4:	bl	21d18 <flatcc_builder_start_union_vector@@Base>
   1bcd8:	mov	r0, r4
   1bcdc:	strb	r6, [sp, #8]
   1bce0:	str	r5, [sp, #12]
   1bce4:	add	r5, sp, #8
   1bce8:	ldm	r5, {r1, r2}
   1bcec:	bl	220ac <flatcc_builder_union_vector_push@@Base>
   1bcf0:	mov	r0, r5
   1bcf4:	mov	r1, r4
   1bcf8:	bl	21da8 <flatcc_builder_end_union_vector@@Base>
   1bcfc:	mov	r1, #4
   1bd00:	mov	r0, r4
   1bd04:	bl	20a20 <flatcc_builder_start_table@@Base>
   1bd08:	ldr	r5, [sp, #8]
   1bd0c:	ldr	r7, [sp, #12]
   1bd10:	cmp	r7, #0
   1bd14:	cmpne	r5, #0
   1bd18:	bne	1bef8 <test_union_vector@@Base+0x2dc>
   1bd1c:	ldr	r5, [pc, #728]	; 1bffc <test_union_vector@@Base+0x3e0>
   1bd20:	mov	r2, #0
   1bd24:	mov	r0, r4
   1bd28:	add	r5, pc, r5
   1bd2c:	add	r1, r5, #1504	; 0x5e0
   1bd30:	add	r1, r1, #12
   1bd34:	bl	21358 <flatcc_builder_check_required@@Base>
   1bd38:	cmp	r0, #0
   1bd3c:	beq	1bfb4 <test_union_vector@@Base+0x398>
   1bd40:	mov	r0, r4
   1bd44:	bl	21404 <flatcc_builder_end_table@@Base>
   1bd48:	subs	r5, r0, #0
   1bd4c:	beq	1bd8c <test_union_vector@@Base+0x170>
   1bd50:	mov	r3, #1
   1bd54:	mov	r1, #7
   1bd58:	mov	r2, r3
   1bd5c:	mov	r0, r4
   1bd60:	bl	22554 <flatcc_builder_table_add@@Base>
   1bd64:	subs	r6, r0, #0
   1bd68:	beq	1bd8c <test_union_vector@@Base+0x170>
   1bd6c:	mov	r1, #8
   1bd70:	mov	r0, r4
   1bd74:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1bd78:	cmp	r0, #0
   1bd7c:	beq	1bd8c <test_union_vector@@Base+0x170>
   1bd80:	mov	r3, #4
   1bd84:	strb	r3, [r6]
   1bd88:	str	r5, [r0]
   1bd8c:	ldr	r1, [pc, #620]	; 1c000 <test_union_vector@@Base+0x3e4>
   1bd90:	mov	r2, #1
   1bd94:	mov	r0, r4
   1bd98:	add	r1, pc, r1
   1bd9c:	add	r1, r1, #1024	; 0x400
   1bda0:	add	r1, r1, #4
   1bda4:	bl	21358 <flatcc_builder_check_required@@Base>
   1bda8:	cmp	r0, #0
   1bdac:	beq	1bfd0 <test_union_vector@@Base+0x3b4>
   1bdb0:	mov	r0, r4
   1bdb4:	bl	21404 <flatcc_builder_end_table@@Base>
   1bdb8:	mov	r1, r0
   1bdbc:	mov	r0, r4
   1bdc0:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   1bdc4:	mov	r0, r4
   1bdc8:	add	r1, sp, #4
   1bdcc:	bl	22e80 <flatcc_builder_finalize_aligned_buffer@@Base>
   1bdd0:	ldr	r3, [pc, #556]	; 1c004 <test_union_vector@@Base+0x3e8>
   1bdd4:	mov	r4, r0
   1bdd8:	ldr	r2, [pc, #552]	; 1c008 <test_union_vector@@Base+0x3ec>
   1bddc:	ldr	r1, [sp, #4]
   1bde0:	add	r3, pc, r3
   1bde4:	add	r2, pc, r2
   1bde8:	bl	2457c <flatcc_verify_table_as_root@@Base>
   1bdec:	subs	r5, r0, #0
   1bdf0:	bne	1bf98 <test_union_vector@@Base+0x37c>
   1bdf4:	cmp	r4, #0
   1bdf8:	beq	1be10 <test_union_vector@@Base+0x1f4>
   1bdfc:	ldr	r2, [r4, #4]
   1be00:	movw	r3, #20301	; 0x4f4d
   1be04:	movt	r3, #21326	; 0x534e
   1be08:	cmp	r2, r3
   1be0c:	beq	1be14 <test_union_vector@@Base+0x1f8>
   1be10:	bl	131ac <_start@@Base+0x5f0>
   1be14:	ldr	r3, [r4]
   1be18:	adds	r2, r4, r3
   1be1c:	beq	1be10 <test_union_vector@@Base+0x1f4>
   1be20:	ldr	r3, [r4, r3]
   1be24:	sub	r3, r2, r3
   1be28:	ldrh	r1, [r3]
   1be2c:	cmp	r1, #19
   1be30:	bls	1bea8 <test_union_vector@@Base+0x28c>
   1be34:	ldrh	r0, [r3, #18]
   1be38:	cmp	r0, #0
   1be3c:	beq	1bea8 <test_union_vector@@Base+0x28c>
   1be40:	ldrb	r0, [r2, r0]
   1be44:	cmp	r0, #4
   1be48:	bne	1bea8 <test_union_vector@@Base+0x28c>
   1be4c:	cmp	r1, #21
   1be50:	bls	1bee0 <test_union_vector@@Base+0x2c4>
   1be54:	ldrh	r3, [r3, #20]
   1be58:	cmp	r3, #0
   1be5c:	beq	1bee0 <test_union_vector@@Base+0x2c4>
   1be60:	ldr	r0, [r2, r3]
   1be64:	add	r2, r2, r3
   1be68:	adds	r1, r2, r0
   1be6c:	beq	1bee0 <test_union_vector@@Base+0x2c4>
   1be70:	ldr	r3, [r2, r0]
   1be74:	sub	r3, r1, r3
   1be78:	ldrh	r2, [r3]
   1be7c:	cmp	r2, #11
   1be80:	bhi	1bed4 <test_union_vector@@Base+0x2b8>
   1be84:	cmp	r2, #9
   1be88:	bls	1be98 <test_union_vector@@Base+0x27c>
   1be8c:	ldrh	r3, [r3, #8]
   1be90:	cmp	r3, #0
   1be94:	bne	1bf34 <test_union_vector@@Base+0x318>
   1be98:	ldr	r0, [pc, #364]	; 1c00c <test_union_vector@@Base+0x3f0>
   1be9c:	add	r0, pc, r0
   1bea0:	bl	12944 <puts@plt>
   1bea4:	b	1beb4 <test_union_vector@@Base+0x298>
   1bea8:	ldr	r0, [pc, #352]	; 1c010 <test_union_vector@@Base+0x3f4>
   1beac:	add	r0, pc, r0
   1beb0:	bl	128f0 <printf@plt>
   1beb4:	mov	r0, r4
   1beb8:	bl	22fac <flatcc_builder_aligned_free@@Base>
   1bebc:	mov	r0, r5
   1bec0:	add	sp, sp, #20
   1bec4:	ldrd	r4, [sp]
   1bec8:	ldrd	r6, [sp, #8]
   1becc:	add	sp, sp, #16
   1bed0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bed4:	ldrh	r2, [r3, #10]
   1bed8:	cmp	r2, #0
   1bedc:	beq	1bf28 <test_union_vector@@Base+0x30c>
   1bee0:	ldr	r0, [pc, #300]	; 1c014 <test_union_vector@@Base+0x3f8>
   1bee4:	add	r0, pc, r0
   1bee8:	bl	12944 <puts@plt>
   1beec:	b	1beb4 <test_union_vector@@Base+0x298>
   1bef0:	mov	r5, #0
   1bef4:	b	1bccc <test_union_vector@@Base+0xb0>
   1bef8:	mov	r1, r6
   1befc:	mov	r0, r4
   1bf00:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1bf04:	cmp	r0, #0
   1bf08:	beq	1bd1c <test_union_vector@@Base+0x100>
   1bf0c:	mov	r1, #3
   1bf10:	str	r5, [r0]
   1bf14:	mov	r0, r4
   1bf18:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1bf1c:	cmp	r0, #0
   1bf20:	strne	r7, [r0]
   1bf24:	b	1bd1c <test_union_vector@@Base+0x100>
   1bf28:	ldrh	r3, [r3, #8]
   1bf2c:	cmp	r3, #0
   1bf30:	beq	1be98 <test_union_vector@@Base+0x27c>
   1bf34:	ldr	r2, [r1, r3]
   1bf38:	add	r1, r1, r3
   1bf3c:	add	r3, r2, #4
   1bf40:	add	r1, r1, r3
   1bf44:	cmp	r1, #0
   1bf48:	beq	1be98 <test_union_vector@@Base+0x27c>
   1bf4c:	ldr	r3, [r1, #-4]
   1bf50:	cmp	r3, #1
   1bf54:	bne	1be98 <test_union_vector@@Base+0x27c>
   1bf58:	ldrb	r3, [r1]
   1bf5c:	cmp	r3, #2
   1bf60:	bne	1bf88 <test_union_vector@@Base+0x36c>
   1bf64:	ldr	r3, [pc, #172]	; 1c018 <test_union_vector@@Base+0x3fc>
   1bf68:	mov	r2, #117	; 0x75
   1bf6c:	ldr	r1, [pc, #168]	; 1c01c <test_union_vector@@Base+0x400>
   1bf70:	ldr	r0, [pc, #168]	; 1c020 <test_union_vector@@Base+0x404>
   1bf74:	add	r3, pc, r3
   1bf78:	add	r3, r3, #648	; 0x288
   1bf7c:	add	r1, pc, r1
   1bf80:	add	r0, pc, r0
   1bf84:	bl	129e0 <__assert_fail@plt>
   1bf88:	ldr	r0, [pc, #148]	; 1c024 <test_union_vector@@Base+0x408>
   1bf8c:	add	r0, pc, r0
   1bf90:	bl	12944 <puts@plt>
   1bf94:	b	1beb4 <test_union_vector@@Base+0x298>
   1bf98:	bl	235a8 <flatcc_verify_error_string@@Base>
   1bf9c:	mov	r1, r0
   1bfa0:	ldr	r0, [pc, #128]	; 1c028 <test_union_vector@@Base+0x40c>
   1bfa4:	mvn	r5, #0
   1bfa8:	add	r0, pc, r0
   1bfac:	bl	128f0 <printf@plt>
   1bfb0:	b	1bebc <test_union_vector@@Base+0x2a0>
   1bfb4:	ldr	r1, [pc, #112]	; 1c02c <test_union_vector@@Base+0x410>
   1bfb8:	add	r3, r5, #1520	; 0x5f0
   1bfbc:	mov	r2, #223	; 0xdf
   1bfc0:	ldr	r0, [pc, #104]	; 1c030 <test_union_vector@@Base+0x414>
   1bfc4:	add	r1, pc, r1
   1bfc8:	add	r0, pc, r0
   1bfcc:	bl	129e0 <__assert_fail@plt>
   1bfd0:	bl	13668 <_start@@Base+0xaac>
   1bfd4:	ldr	r1, [pc, #88]	; 1c034 <test_union_vector@@Base+0x418>
   1bfd8:	add	r3, r5, #1472	; 0x5c0
   1bfdc:	mov	r2, #217	; 0xd9
   1bfe0:	ldr	r0, [pc, #80]	; 1c038 <test_union_vector@@Base+0x41c>
   1bfe4:	add	r1, pc, r1
   1bfe8:	add	r0, pc, r0
   1bfec:	bl	129e0 <__assert_fail@plt>
   1bff0:	strdeq	r9, [r0], -r8
   1bff4:	andeq	fp, r0, r0, asr r8
   1bff8:	andeq	r9, r0, r8, lsr r2
   1bffc:			; <UNDEFINED> instruction: 0x000091b8
   1c000:	andeq	r9, r0, r8, asr #2
   1c004:			; <UNDEFINED> instruction: 0xffff7d3c
   1c008:	andeq	r9, r0, r8, asr sp
   1c00c:	andeq	fp, r0, r8, lsl r8
   1c010:			; <UNDEFINED> instruction: 0x0000b7bc
   1c014:	andeq	fp, r0, r8, lsr #15
   1c018:	andeq	r8, r0, ip, ror #30
   1c01c:	andeq	r9, r0, ip, ror r7
   1c020:	strdeq	r9, [r0], -r8
   1c024:	andeq	fp, r0, r0, asr r7
   1c028:	andeq	fp, r0, r4, lsl #13
   1c02c:	andeq	r9, r0, r0, lsr r8
   1c030:	andeq	fp, r0, ip, asr #11
   1c034:	andeq	r9, r0, r0, lsl r8
   1c038:	ldrdeq	fp, [r0], -r8

0001c03c <test_mixed_type_union@@Base>:
   1c03c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c040:	mov	r4, r0
   1c044:	strd	r6, [sp, #8]
   1c048:	strd	r8, [sp, #16]
   1c04c:	strd	sl, [sp, #24]
   1c050:	str	lr, [sp, #32]
   1c054:	sub	sp, sp, #36	; 0x24
   1c058:	bl	1f250 <flatcc_builder_reset@@Base>
   1c05c:	ldr	r1, [pc, #3276]	; 1cd30 <test_mixed_type_union@@Base+0xcf4>
   1c060:	mov	r3, #0
   1c064:	mov	r0, r4
   1c068:	mov	r2, r3
   1c06c:	ldr	r8, [pc, #3264]	; 1cd34 <test_mixed_type_union@@Base+0xcf8>
   1c070:	add	r1, pc, r1
   1c074:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   1c078:	cmp	r0, #0
   1c07c:	add	r8, pc, r8
   1c080:	bne	1c090 <test_mixed_type_union@@Base+0x54>
   1c084:	mov	r1, #10
   1c088:	mov	r0, r4
   1c08c:	bl	20a20 <flatcc_builder_start_table@@Base>
   1c090:	mov	r2, #4
   1c094:	mov	r0, r4
   1c098:	mov	r1, r2
   1c09c:	bl	1fc74 <flatcc_builder_start_struct@@Base>
   1c0a0:	subs	r7, r0, #0
   1c0a4:	beq	1c0bc <test_mixed_type_union@@Base+0x80>
   1c0a8:	mov	r3, #10
   1c0ac:	mov	r0, r4
   1c0b0:	str	r3, [r7]
   1c0b4:	bl	1fd38 <flatcc_builder_end_struct@@Base>
   1c0b8:	mov	r7, r0
   1c0bc:	mov	r2, #2
   1c0c0:	mov	r0, r4
   1c0c4:	mov	r1, r2
   1c0c8:	bl	1fc74 <flatcc_builder_start_struct@@Base>
   1c0cc:	subs	r6, r0, #0
   1c0d0:	beq	1c810 <test_mixed_type_union@@Base+0x7d4>
   1c0d4:	mov	r3, #22
   1c0d8:	mov	r0, r4
   1c0dc:	strh	r3, [r6]
   1c0e0:	bl	1fd38 <flatcc_builder_end_struct@@Base>
   1c0e4:	mov	r2, #2
   1c0e8:	mov	r6, r0
   1c0ec:	mov	r1, r2
   1c0f0:	mov	r0, r4
   1c0f4:	bl	1fc74 <flatcc_builder_start_struct@@Base>
   1c0f8:	subs	r3, r0, #0
   1c0fc:	beq	1c154 <test_mixed_type_union@@Base+0x118>
   1c100:	mov	r2, #19
   1c104:	mov	r0, r4
   1c108:	strh	r2, [r3]
   1c10c:	bl	1fd38 <flatcc_builder_end_struct@@Base>
   1c110:	subs	r5, r0, #0
   1c114:	beq	1c154 <test_mixed_type_union@@Base+0x118>
   1c118:	mov	r3, #1
   1c11c:	mov	r1, #0
   1c120:	mov	r2, r3
   1c124:	mov	r0, r4
   1c128:	bl	22554 <flatcc_builder_table_add@@Base>
   1c12c:	subs	r9, r0, #0
   1c130:	beq	1c154 <test_mixed_type_union@@Base+0x118>
   1c134:	mov	r1, #1
   1c138:	mov	r0, r4
   1c13c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1c140:	cmp	r0, #0
   1c144:	beq	1c154 <test_mixed_type_union@@Base+0x118>
   1c148:	mov	r3, #8
   1c14c:	strb	r3, [r9]
   1c150:	str	r5, [r0]
   1c154:	cmp	r6, #0
   1c158:	beq	1c85c <test_mixed_type_union@@Base+0x820>
   1c15c:	mov	r3, #1
   1c160:	mov	r1, #6
   1c164:	mov	r2, r3
   1c168:	mov	r0, r4
   1c16c:	bl	22554 <flatcc_builder_table_add@@Base>
   1c170:	subs	r5, r0, #0
   1c174:	beq	1c198 <test_mixed_type_union@@Base+0x15c>
   1c178:	mov	r1, #7
   1c17c:	mov	r0, r4
   1c180:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1c184:	cmp	r0, #0
   1c188:	beq	1c198 <test_mixed_type_union@@Base+0x15c>
   1c18c:	mov	r3, #8
   1c190:	strb	r3, [r5]
   1c194:	str	r6, [r0]
   1c198:	mov	r1, #1
   1c19c:	mov	r0, r4
   1c1a0:	bl	20a20 <flatcc_builder_start_table@@Base>
   1c1a4:	subs	r5, r0, #0
   1c1a8:	bne	1c604 <test_mixed_type_union@@Base+0x5c8>
   1c1ac:	mov	r3, #4
   1c1b0:	mov	r1, r5
   1c1b4:	mov	r2, r3
   1c1b8:	mov	r0, r4
   1c1bc:	bl	22554 <flatcc_builder_table_add@@Base>
   1c1c0:	subs	r3, r0, #0
   1c1c4:	beq	1c604 <test_mixed_type_union@@Base+0x5c8>
   1c1c8:	ldr	r1, [pc, #2920]	; 1cd38 <test_mixed_type_union@@Base+0xcfc>
   1c1cc:	mov	ip, #42	; 0x2a
   1c1d0:	mov	r2, r5
   1c1d4:	mov	r0, r4
   1c1d8:	str	ip, [r3]
   1c1dc:	add	r1, pc, r1
   1c1e0:	add	r1, r1, #1568	; 0x620
   1c1e4:	add	r1, r1, #12
   1c1e8:	bl	21358 <flatcc_builder_check_required@@Base>
   1c1ec:	cmp	r0, #0
   1c1f0:	beq	1c940 <test_mixed_type_union@@Base+0x904>
   1c1f4:	mov	r0, r4
   1c1f8:	bl	21404 <flatcc_builder_end_table@@Base>
   1c1fc:	subs	r9, r0, #0
   1c200:	beq	1c604 <test_mixed_type_union@@Base+0x5c8>
   1c204:	mov	r3, #1
   1c208:	mov	r1, #2
   1c20c:	mov	r2, r3
   1c210:	mov	r0, r4
   1c214:	bl	22554 <flatcc_builder_table_add@@Base>
   1c218:	subs	r5, r0, #0
   1c21c:	beq	1c240 <test_mixed_type_union@@Base+0x204>
   1c220:	mov	r1, #3
   1c224:	mov	r0, r4
   1c228:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1c22c:	cmp	r0, #0
   1c230:	beq	1c240 <test_mixed_type_union@@Base+0x204>
   1c234:	mov	r3, #2
   1c238:	strb	r3, [r5]
   1c23c:	str	r9, [r0]
   1c240:	ldr	r1, [pc, #2804]	; 1cd3c <test_mixed_type_union@@Base+0xd00>
   1c244:	mov	r0, r4
   1c248:	add	r1, pc, r1
   1c24c:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1c250:	subs	r5, r0, #0
   1c254:	beq	1c294 <test_mixed_type_union@@Base+0x258>
   1c258:	mov	r3, #1
   1c25c:	mov	r1, #4
   1c260:	mov	r2, r3
   1c264:	mov	r0, r4
   1c268:	bl	22554 <flatcc_builder_table_add@@Base>
   1c26c:	subs	sl, r0, #0
   1c270:	beq	1c294 <test_mixed_type_union@@Base+0x258>
   1c274:	mov	r1, #5
   1c278:	mov	r0, r4
   1c27c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1c280:	cmp	r0, #0
   1c284:	beq	1c294 <test_mixed_type_union@@Base+0x258>
   1c288:	mov	r3, #11
   1c28c:	strb	r3, [sl]
   1c290:	str	r5, [r0]
   1c294:	mov	r0, r4
   1c298:	add	r5, sp, #24
   1c29c:	bl	21d18 <flatcc_builder_start_union_vector@@Base>
   1c2a0:	mov	r3, #8
   1c2a4:	mov	r0, r4
   1c2a8:	strb	r3, [sp, #24]
   1c2ac:	str	r6, [sp, #28]
   1c2b0:	ldm	r5, {r1, r2}
   1c2b4:	bl	220ac <flatcc_builder_union_vector_push@@Base>
   1c2b8:	mov	r3, #2
   1c2bc:	mov	r0, r4
   1c2c0:	strb	r3, [sp, #24]
   1c2c4:	str	r9, [sp, #28]
   1c2c8:	ldm	r5, {r1, r2}
   1c2cc:	bl	220ac <flatcc_builder_union_vector_push@@Base>
   1c2d0:	mov	r1, #1
   1c2d4:	mov	r0, r4
   1c2d8:	bl	20a20 <flatcc_builder_start_table@@Base>
   1c2dc:	subs	r6, r0, #0
   1c2e0:	bne	1c60c <test_mixed_type_union@@Base+0x5d0>
   1c2e4:	mov	r3, #4
   1c2e8:	mov	r1, r6
   1c2ec:	mov	r2, r3
   1c2f0:	mov	r0, r4
   1c2f4:	bl	22554 <flatcc_builder_table_add@@Base>
   1c2f8:	subs	r3, r0, #0
   1c2fc:	beq	1c60c <test_mixed_type_union@@Base+0x5d0>
   1c300:	ldr	r1, [pc, #2616]	; 1cd40 <test_mixed_type_union@@Base+0xd04>
   1c304:	mov	ip, #1
   1c308:	mov	r2, r6
   1c30c:	mov	r0, r4
   1c310:	str	ip, [r3]
   1c314:	add	r1, pc, r1
   1c318:	add	r1, r1, #1568	; 0x620
   1c31c:	add	r1, r1, #12
   1c320:	bl	21358 <flatcc_builder_check_required@@Base>
   1c324:	cmp	r0, #0
   1c328:	beq	1c940 <test_mixed_type_union@@Base+0x904>
   1c32c:	mov	r0, r4
   1c330:	bl	21404 <flatcc_builder_end_table@@Base>
   1c334:	mov	r2, r0
   1c338:	mov	r3, #2
   1c33c:	mov	r0, r4
   1c340:	mov	r6, #9
   1c344:	strb	r3, [sp, #24]
   1c348:	str	r2, [sp, #28]
   1c34c:	ldm	r5, {r1, r2}
   1c350:	bl	220ac <flatcc_builder_union_vector_push@@Base>
   1c354:	ldr	r1, [pc, #2536]	; 1cd44 <test_mixed_type_union@@Base+0xd08>
   1c358:	mov	r0, r4
   1c35c:	add	r1, pc, r1
   1c360:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1c364:	mov	r3, #11
   1c368:	strb	r3, [sp, #24]
   1c36c:	str	r0, [sp, #28]
   1c370:	mov	r0, r4
   1c374:	ldm	r5, {r1, r2}
   1c378:	bl	220ac <flatcc_builder_union_vector_push@@Base>
   1c37c:	mov	r0, r4
   1c380:	strb	r6, [sp, #24]
   1c384:	str	r7, [sp, #28]
   1c388:	ldm	r5, {r1, r2}
   1c38c:	bl	220ac <flatcc_builder_union_vector_push@@Base>
   1c390:	mov	r2, #4
   1c394:	mov	r0, r4
   1c398:	mov	r1, r2
   1c39c:	bl	1fc74 <flatcc_builder_start_struct@@Base>
   1c3a0:	mov	r3, #3
   1c3a4:	str	r3, [r0]
   1c3a8:	mov	r0, r4
   1c3ac:	bl	1fd38 <flatcc_builder_end_struct@@Base>
   1c3b0:	strb	r6, [sp, #24]
   1c3b4:	str	r0, [sp, #28]
   1c3b8:	mov	r0, r4
   1c3bc:	ldm	r5, {r1, r2}
   1c3c0:	bl	220ac <flatcc_builder_union_vector_push@@Base>
   1c3c4:	mov	r2, #4
   1c3c8:	mov	r0, r4
   1c3cc:	mov	r1, r2
   1c3d0:	bl	1fc74 <flatcc_builder_start_struct@@Base>
   1c3d4:	subs	r3, r0, #0
   1c3d8:	beq	1c3f0 <test_mixed_type_union@@Base+0x3b4>
   1c3dc:	mov	r2, #1
   1c3e0:	mov	r0, r4
   1c3e4:	str	r2, [r3]
   1c3e8:	bl	1fd38 <flatcc_builder_end_struct@@Base>
   1c3ec:	mov	r3, r0
   1c3f0:	mov	r2, #9
   1c3f4:	mov	r0, r4
   1c3f8:	strb	r2, [sp, #24]
   1c3fc:	str	r3, [sp, #28]
   1c400:	ldm	r5, {r1, r2}
   1c404:	bl	220ac <flatcc_builder_union_vector_push@@Base>
   1c408:	mov	r2, #4
   1c40c:	mov	r0, r4
   1c410:	mov	r1, r2
   1c414:	bl	1fc74 <flatcc_builder_start_struct@@Base>
   1c418:	subs	r3, r0, #0
   1c41c:	beq	1c434 <test_mixed_type_union@@Base+0x3f8>
   1c420:	mov	r2, #2
   1c424:	mov	r0, r4
   1c428:	str	r2, [r3]
   1c42c:	bl	1fd38 <flatcc_builder_end_struct@@Base>
   1c430:	mov	r3, r0
   1c434:	mov	r7, #9
   1c438:	mov	r0, r4
   1c43c:	mov	r6, #11
   1c440:	strb	r7, [sp, #24]
   1c444:	str	r3, [sp, #28]
   1c448:	ldm	r5, {r1, r2}
   1c44c:	bl	220ac <flatcc_builder_union_vector_push@@Base>
   1c450:	ldr	r1, [pc, #2288]	; 1cd48 <test_mixed_type_union@@Base+0xd0c>
   1c454:	mov	r0, r4
   1c458:	add	r1, pc, r1
   1c45c:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1c460:	strb	r6, [sp, #24]
   1c464:	str	r0, [sp, #28]
   1c468:	mov	r0, r4
   1c46c:	ldm	r5, {r1, r2}
   1c470:	bl	220ac <flatcc_builder_union_vector_push@@Base>
   1c474:	ldr	r1, [pc, #2256]	; 1cd4c <test_mixed_type_union@@Base+0xd10>
   1c478:	mov	r0, r4
   1c47c:	add	r1, pc, r1
   1c480:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1c484:	strb	r6, [sp, #24]
   1c488:	str	r0, [sp, #28]
   1c48c:	mov	r0, r4
   1c490:	ldm	r5, {r1, r2}
   1c494:	bl	220ac <flatcc_builder_union_vector_push@@Base>
   1c498:	mov	r0, r5
   1c49c:	mov	r1, r4
   1c4a0:	bl	21da8 <flatcc_builder_end_union_vector@@Base>
   1c4a4:	ldr	r5, [sp, #24]
   1c4a8:	ldr	r6, [sp, #28]
   1c4ac:	cmp	r5, #0
   1c4b0:	cmpne	r6, #0
   1c4b4:	bne	1c7e0 <test_mixed_type_union@@Base+0x7a4>
   1c4b8:	ldr	r5, [pc, #2192]	; 1cd50 <test_mixed_type_union@@Base+0xd14>
   1c4bc:	mov	r2, #0
   1c4c0:	mov	r0, r4
   1c4c4:	add	r5, pc, r5
   1c4c8:	add	r1, r5, #1600	; 0x640
   1c4cc:	add	r1, r1, #8
   1c4d0:	bl	21358 <flatcc_builder_check_required@@Base>
   1c4d4:	cmp	r0, #0
   1c4d8:	beq	1c978 <test_mixed_type_union@@Base+0x93c>
   1c4dc:	mov	r0, r4
   1c4e0:	bl	21404 <flatcc_builder_end_table@@Base>
   1c4e4:	mov	r1, r0
   1c4e8:	mov	r0, r4
   1c4ec:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   1c4f0:	mov	r0, r4
   1c4f4:	add	r1, sp, #4
   1c4f8:	bl	22e80 <flatcc_builder_finalize_aligned_buffer@@Base>
   1c4fc:	ldr	r3, [pc, #2128]	; 1cd54 <test_mixed_type_union@@Base+0xd18>
   1c500:	mov	r1, r0
   1c504:	mov	r4, r0
   1c508:	ldr	r0, [pc, #2120]	; 1cd58 <test_mixed_type_union@@Base+0xd1c>
   1c50c:	ldr	r2, [sp, #4]
   1c510:	ldr	r3, [r8, r3]
   1c514:	add	r0, pc, r0
   1c518:	ldr	r3, [r3]
   1c51c:	bl	12cd8 <_start@@Base+0x11c>
   1c520:	ldr	r3, [pc, #2100]	; 1cd5c <test_mixed_type_union@@Base+0xd20>
   1c524:	mov	r0, r4
   1c528:	ldr	r2, [pc, #2096]	; 1cd60 <test_mixed_type_union@@Base+0xd24>
   1c52c:	ldr	r1, [sp, #4]
   1c530:	add	r3, pc, r3
   1c534:	add	r2, pc, r2
   1c538:	bl	2457c <flatcc_verify_table_as_root@@Base>
   1c53c:	cmp	r0, #0
   1c540:	bne	1c8fc <test_mixed_type_union@@Base+0x8c0>
   1c544:	cmp	r4, #0
   1c548:	beq	1c560 <test_mixed_type_union@@Base+0x524>
   1c54c:	ldr	r2, [r4, #4]
   1c550:	movw	r3, #20301	; 0x4f4d
   1c554:	movt	r3, #21326	; 0x534e
   1c558:	cmp	r2, r3
   1c55c:	beq	1c584 <test_mixed_type_union@@Base+0x548>
   1c560:	ldr	r3, [pc, #2044]	; 1cd64 <test_mixed_type_union@@Base+0xd28>
   1c564:	movw	r2, #819	; 0x333
   1c568:	ldr	r1, [pc, #2040]	; 1cd68 <test_mixed_type_union@@Base+0xd2c>
   1c56c:	ldr	r0, [pc, #2040]	; 1cd6c <test_mixed_type_union@@Base+0xd30>
   1c570:	add	r3, pc, r3
   1c574:	add	r3, r3, #1632	; 0x660
   1c578:	add	r1, pc, r1
   1c57c:	add	r0, pc, r0
   1c580:	bl	129e0 <__assert_fail@plt>
   1c584:	ldr	r6, [r4]
   1c588:	adds	r7, r4, r6
   1c58c:	beq	1c560 <test_mixed_type_union@@Base+0x524>
   1c590:	ldr	r5, [r4, r6]
   1c594:	sub	r5, r7, r5
   1c598:	ldrh	r3, [r5]
   1c59c:	cmp	r3, #7
   1c5a0:	bls	1c5f0 <test_mixed_type_union@@Base+0x5b4>
   1c5a4:	ldrh	r2, [r5, #6]
   1c5a8:	cmp	r2, #0
   1c5ac:	beq	1c5f0 <test_mixed_type_union@@Base+0x5b4>
   1c5b0:	cmp	r3, #23
   1c5b4:	bhi	1c614 <test_mixed_type_union@@Base+0x5d8>
   1c5b8:	ldr	r0, [pc, #1968]	; 1cd70 <test_mixed_type_union@@Base+0xd34>
   1c5bc:	mvn	r5, #0
   1c5c0:	add	r0, pc, r0
   1c5c4:	bl	12944 <puts@plt>
   1c5c8:	mov	r0, r4
   1c5cc:	bl	22fac <flatcc_builder_aligned_free@@Base>
   1c5d0:	mov	r0, r5
   1c5d4:	add	sp, sp, #36	; 0x24
   1c5d8:	ldrd	r4, [sp]
   1c5dc:	ldrd	r6, [sp, #8]
   1c5e0:	ldrd	r8, [sp, #16]
   1c5e4:	ldrd	sl, [sp, #24]
   1c5e8:	add	sp, sp, #32
   1c5ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5f0:	ldr	r0, [pc, #1916]	; 1cd74 <test_mixed_type_union@@Base+0xd38>
   1c5f4:	mvn	r5, #0
   1c5f8:	add	r0, pc, r0
   1c5fc:	bl	12944 <puts@plt>
   1c600:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1c604:	mov	r9, #0
   1c608:	b	1c240 <test_mixed_type_union@@Base+0x204>
   1c60c:	mov	r2, #0
   1c610:	b	1c338 <test_mixed_type_union@@Base+0x2fc>
   1c614:	ldrh	r8, [r5, #22]
   1c618:	cmp	r8, #0
   1c61c:	beq	1c5b8 <test_mixed_type_union@@Base+0x57c>
   1c620:	ldrh	r3, [r5, #4]
   1c624:	cmp	r3, #0
   1c628:	beq	1c864 <test_mixed_type_union@@Base+0x828>
   1c62c:	ldrb	r1, [r7, r3]
   1c630:	cmp	r1, #0
   1c634:	beq	1c864 <test_mixed_type_union@@Base+0x828>
   1c638:	ldr	r3, [r7, r2]
   1c63c:	cmp	r1, #8
   1c640:	add	r2, r7, r2
   1c644:	add	r1, r2, r3
   1c648:	bne	1c864 <test_mixed_type_union@@Base+0x828>
   1c64c:	cmp	r1, #0
   1c650:	beq	1c878 <test_mixed_type_union@@Base+0x83c>
   1c654:	ldrh	r3, [r2, r3]
   1c658:	cmp	r3, #19
   1c65c:	bhi	1c8ac <test_mixed_type_union@@Base+0x870>
   1c660:	bne	1c884 <test_mixed_type_union@@Base+0x848>
   1c664:	ldrh	r3, [r5, #16]
   1c668:	cmp	r3, #0
   1c66c:	beq	1c898 <test_mixed_type_union@@Base+0x85c>
   1c670:	ldrb	r3, [r7, r3]
   1c674:	cmp	r3, #8
   1c678:	bne	1c898 <test_mixed_type_union@@Base+0x85c>
   1c67c:	ldrh	r3, [r5, #18]
   1c680:	cmp	r3, #0
   1c684:	beq	1c918 <test_mixed_type_union@@Base+0x8dc>
   1c688:	ldr	r2, [r7, r3]
   1c68c:	add	r3, r7, r3
   1c690:	cmn	r3, r2
   1c694:	beq	1c918 <test_mixed_type_union@@Base+0x8dc>
   1c698:	ldrh	r3, [r3, r2]
   1c69c:	cmp	r3, #22
   1c6a0:	bne	1c8c0 <test_mixed_type_union@@Base+0x884>
   1c6a4:	ldrh	r3, [r5, #8]
   1c6a8:	cmp	r3, #0
   1c6ac:	beq	1c8d4 <test_mixed_type_union@@Base+0x898>
   1c6b0:	ldrb	r3, [r7, r3]
   1c6b4:	cmp	r3, #2
   1c6b8:	bne	1c8d4 <test_mixed_type_union@@Base+0x898>
   1c6bc:	ldrh	r3, [r5, #10]
   1c6c0:	cmp	r3, #0
   1c6c4:	beq	1c8e8 <test_mixed_type_union@@Base+0x8ac>
   1c6c8:	ldr	r2, [r7, r3]
   1c6cc:	add	r3, r7, r3
   1c6d0:	adds	r1, r3, r2
   1c6d4:	beq	1c8e8 <test_mixed_type_union@@Base+0x8ac>
   1c6d8:	ldr	r3, [r3, r2]
   1c6dc:	sub	r3, r1, r3
   1c6e0:	ldrh	r2, [r3]
   1c6e4:	cmp	r2, #5
   1c6e8:	bls	1c8e8 <test_mixed_type_union@@Base+0x8ac>
   1c6ec:	ldrh	r3, [r3, #4]
   1c6f0:	cmp	r3, #0
   1c6f4:	beq	1c8e8 <test_mixed_type_union@@Base+0x8ac>
   1c6f8:	ldr	r3, [r1, r3]
   1c6fc:	cmp	r3, #42	; 0x2a
   1c700:	bne	1c8e8 <test_mixed_type_union@@Base+0x8ac>
   1c704:	ldrh	r3, [r5, #12]
   1c708:	cmp	r3, #0
   1c70c:	beq	1c92c <test_mixed_type_union@@Base+0x8f0>
   1c710:	ldrb	r3, [r7, r3]
   1c714:	cmp	r3, #11
   1c718:	bne	1c92c <test_mixed_type_union@@Base+0x8f0>
   1c71c:	ldrh	r3, [r5, #14]
   1c720:	cmp	r3, #0
   1c724:	beq	1c964 <test_mixed_type_union@@Base+0x928>
   1c728:	ldr	r2, [r7, r3]
   1c72c:	add	r9, r7, r3
   1c730:	adds	r9, r9, r2
   1c734:	beq	1c964 <test_mixed_type_union@@Base+0x928>
   1c738:	adds	r9, r9, #4
   1c73c:	beq	1c964 <test_mixed_type_union@@Base+0x928>
   1c740:	ldr	r1, [pc, #1584]	; 1cd78 <test_mixed_type_union@@Base+0xd3c>
   1c744:	mov	r0, r9
   1c748:	add	r1, pc, r1
   1c74c:	bl	128e4 <strcmp@plt>
   1c750:	cmp	r0, #0
   1c754:	bne	1c998 <test_mixed_type_union@@Base+0x95c>
   1c758:	ldrh	r3, [r5, #20]
   1c75c:	cmp	r3, #0
   1c760:	beq	1ca3c <test_mixed_type_union@@Base+0xa00>
   1c764:	ldr	r9, [r7, r3]
   1c768:	add	r3, r7, r3
   1c76c:	add	r2, r7, r8
   1c770:	ldr	r5, [r7, r8]
   1c774:	add	r9, r9, #4
   1c778:	adds	r9, r3, r9
   1c77c:	add	r5, r5, #4
   1c780:	add	r5, r2, r5
   1c784:	beq	1ca4c <test_mixed_type_union@@Base+0xa10>
   1c788:	cmp	r5, #0
   1c78c:	ldr	r2, [r9, #-4]
   1c790:	beq	1c9e0 <test_mixed_type_union@@Base+0x9a4>
   1c794:	ldr	r3, [r5, #-4]
   1c798:	cmp	r2, r3
   1c79c:	bne	1ca0c <test_mixed_type_union@@Base+0x9d0>
   1c7a0:	add	r8, sp, #8
   1c7a4:	add	sl, sp, #16
   1c7a8:	str	r9, [sp, #8]
   1c7ac:	mov	r3, #0
   1c7b0:	mov	r0, sl
   1c7b4:	str	r5, [sp, #12]
   1c7b8:	ldm	r8, {r1, r2}
   1c7bc:	bl	1358c <_start@@Base+0x9d0>
   1c7c0:	ldrb	r3, [sp, #16]
   1c7c4:	cmp	r3, #8
   1c7c8:	beq	1c9b0 <test_mixed_type_union@@Base+0x974>
   1c7cc:	ldr	r0, [pc, #1448]	; 1cd7c <test_mixed_type_union@@Base+0xd40>
   1c7d0:	mvn	r5, #0
   1c7d4:	add	r0, pc, r0
   1c7d8:	bl	128f0 <printf@plt>
   1c7dc:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1c7e0:	mov	r1, #8
   1c7e4:	mov	r0, r4
   1c7e8:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1c7ec:	cmp	r0, #0
   1c7f0:	beq	1c4b8 <test_mixed_type_union@@Base+0x47c>
   1c7f4:	mov	r1, r7
   1c7f8:	str	r5, [r0]
   1c7fc:	mov	r0, r4
   1c800:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1c804:	cmp	r0, #0
   1c808:	strne	r6, [r0]
   1c80c:	b	1c4b8 <test_mixed_type_union@@Base+0x47c>
   1c810:	mov	r2, #2
   1c814:	mov	r0, r4
   1c818:	mov	r1, r2
   1c81c:	bl	1fc74 <flatcc_builder_start_struct@@Base>
   1c820:	subs	r3, r0, #0
   1c824:	beq	1c85c <test_mixed_type_union@@Base+0x820>
   1c828:	mov	r2, #19
   1c82c:	mov	r0, r4
   1c830:	strh	r2, [r3]
   1c834:	bl	1fd38 <flatcc_builder_end_struct@@Base>
   1c838:	subs	r5, r0, #0
   1c83c:	beq	1ca34 <test_mixed_type_union@@Base+0x9f8>
   1c840:	mov	r3, #1
   1c844:	mov	r1, r6
   1c848:	mov	r2, r3
   1c84c:	mov	r0, r4
   1c850:	bl	22554 <flatcc_builder_table_add@@Base>
   1c854:	subs	r9, r0, #0
   1c858:	bne	1c134 <test_mixed_type_union@@Base+0xf8>
   1c85c:	mov	r6, #0
   1c860:	b	1c198 <test_mixed_type_union@@Base+0x15c>
   1c864:	ldr	r0, [pc, #1300]	; 1cd80 <test_mixed_type_union@@Base+0xd44>
   1c868:	mvn	r5, #0
   1c86c:	add	r0, pc, r0
   1c870:	bl	12944 <puts@plt>
   1c874:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1c878:	ldr	r0, [pc, #1284]	; 1cd84 <test_mixed_type_union@@Base+0xd48>
   1c87c:	add	r0, pc, r0
   1c880:	bl	12944 <puts@plt>
   1c884:	ldr	r0, [pc, #1276]	; 1cd88 <test_mixed_type_union@@Base+0xd4c>
   1c888:	mvn	r5, #0
   1c88c:	add	r0, pc, r0
   1c890:	bl	12944 <puts@plt>
   1c894:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1c898:	ldr	r0, [pc, #1260]	; 1cd8c <test_mixed_type_union@@Base+0xd50>
   1c89c:	mvn	r5, #0
   1c8a0:	add	r0, pc, r0
   1c8a4:	bl	12944 <puts@plt>
   1c8a8:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1c8ac:	ldr	r0, [pc, #1244]	; 1cd90 <test_mixed_type_union@@Base+0xd54>
   1c8b0:	mvn	r5, #0
   1c8b4:	add	r0, pc, r0
   1c8b8:	bl	12944 <puts@plt>
   1c8bc:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1c8c0:	ldr	r0, [pc, #1228]	; 1cd94 <test_mixed_type_union@@Base+0xd58>
   1c8c4:	mvn	r5, #0
   1c8c8:	add	r0, pc, r0
   1c8cc:	bl	12944 <puts@plt>
   1c8d0:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1c8d4:	ldr	r0, [pc, #1212]	; 1cd98 <test_mixed_type_union@@Base+0xd5c>
   1c8d8:	mvn	r5, #0
   1c8dc:	add	r0, pc, r0
   1c8e0:	bl	12944 <puts@plt>
   1c8e4:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1c8e8:	ldr	r0, [pc, #1196]	; 1cd9c <test_mixed_type_union@@Base+0xd60>
   1c8ec:	mvn	r5, #0
   1c8f0:	add	r0, pc, r0
   1c8f4:	bl	12944 <puts@plt>
   1c8f8:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1c8fc:	bl	235a8 <flatcc_verify_error_string@@Base>
   1c900:	mov	r1, r0
   1c904:	ldr	r0, [pc, #1172]	; 1cda0 <test_mixed_type_union@@Base+0xd64>
   1c908:	mvn	r5, #0
   1c90c:	add	r0, pc, r0
   1c910:	bl	128f0 <printf@plt>
   1c914:	b	1c5d0 <test_mixed_type_union@@Base+0x594>
   1c918:	ldr	r0, [pc, #1156]	; 1cda4 <test_mixed_type_union@@Base+0xd68>
   1c91c:	mvn	r5, #0
   1c920:	add	r0, pc, r0
   1c924:	bl	12944 <puts@plt>
   1c928:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1c92c:	ldr	r0, [pc, #1140]	; 1cda8 <test_mixed_type_union@@Base+0xd6c>
   1c930:	mvn	r5, #0
   1c934:	add	r0, pc, r0
   1c938:	bl	12944 <puts@plt>
   1c93c:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1c940:	ldr	r3, [pc, #1124]	; 1cdac <test_mixed_type_union@@Base+0xd70>
   1c944:	mov	r2, #239	; 0xef
   1c948:	ldr	r1, [pc, #1120]	; 1cdb0 <test_mixed_type_union@@Base+0xd74>
   1c94c:	ldr	r0, [pc, #1120]	; 1cdb4 <test_mixed_type_union@@Base+0xd78>
   1c950:	add	r3, pc, r3
   1c954:	add	r3, r3, #1584	; 0x630
   1c958:	add	r1, pc, r1
   1c95c:	add	r0, pc, r0
   1c960:	bl	129e0 <__assert_fail@plt>
   1c964:	ldr	r0, [pc, #1100]	; 1cdb8 <test_mixed_type_union@@Base+0xd7c>
   1c968:	mvn	r5, #0
   1c96c:	add	r0, pc, r0
   1c970:	bl	12944 <puts@plt>
   1c974:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1c978:	ldr	r1, [pc, #1084]	; 1cdbc <test_mixed_type_union@@Base+0xd80>
   1c97c:	add	r3, r5, #1600	; 0x640
   1c980:	mov	r2, #241	; 0xf1
   1c984:	add	r3, r3, #12
   1c988:	ldr	r0, [pc, #1072]	; 1cdc0 <test_mixed_type_union@@Base+0xd84>
   1c98c:	add	r1, pc, r1
   1c990:	add	r0, pc, r0
   1c994:	bl	129e0 <__assert_fail@plt>
   1c998:	ldr	r0, [pc, #1060]	; 1cdc4 <test_mixed_type_union@@Base+0xd88>
   1c99c:	mov	r1, r9
   1c9a0:	mvn	r5, #0
   1c9a4:	add	r0, pc, r0
   1c9a8:	bl	128f0 <printf@plt>
   1c9ac:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1c9b0:	mov	r3, #1
   1c9b4:	mov	r0, sl
   1c9b8:	ldm	r8, {r1, r2}
   1c9bc:	bl	1358c <_start@@Base+0x9d0>
   1c9c0:	ldrb	fp, [sp, #16]
   1c9c4:	cmp	fp, #2
   1c9c8:	beq	1c9e8 <test_mixed_type_union@@Base+0x9ac>
   1c9cc:	ldr	r0, [pc, #1012]	; 1cdc8 <test_mixed_type_union@@Base+0xd8c>
   1c9d0:	mvn	r5, #0
   1c9d4:	add	r0, pc, r0
   1c9d8:	bl	128f0 <printf@plt>
   1c9dc:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1c9e0:	mov	r3, r5
   1c9e4:	b	1c798 <test_mixed_type_union@@Base+0x75c>
   1c9e8:	ldr	r0, [sp, #20]
   1c9ec:	bl	134e8 <_start@@Base+0x92c>
   1c9f0:	cmp	r0, #42	; 0x2a
   1c9f4:	beq	1ca64 <test_mixed_type_union@@Base+0xa28>
   1c9f8:	ldr	r0, [pc, #972]	; 1cdcc <test_mixed_type_union@@Base+0xd90>
   1c9fc:	mvn	r5, #0
   1ca00:	add	r0, pc, r0
   1ca04:	bl	128f0 <printf@plt>
   1ca08:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1ca0c:	ldr	r3, [pc, #956]	; 1cdd0 <test_mixed_type_union@@Base+0xd94>
   1ca10:	movw	r2, #823	; 0x337
   1ca14:	ldr	r1, [pc, #952]	; 1cdd4 <test_mixed_type_union@@Base+0xd98>
   1ca18:	ldr	r0, [pc, #952]	; 1cdd8 <test_mixed_type_union@@Base+0xd9c>
   1ca1c:	add	r3, pc, r3
   1ca20:	add	r3, r3, #1664	; 0x680
   1ca24:	add	r1, pc, r1
   1ca28:	add	r3, r3, #8
   1ca2c:	add	r0, pc, r0
   1ca30:	bl	129e0 <__assert_fail@plt>
   1ca34:	mov	r6, r5
   1ca38:	b	1c198 <test_mixed_type_union@@Base+0x15c>
   1ca3c:	ldr	r3, [r7, r8]
   1ca40:	add	r5, r7, r8
   1ca44:	add	r3, r3, #4
   1ca48:	add	r5, r5, r3
   1ca4c:	cmp	r5, #0
   1ca50:	moveq	r9, r5
   1ca54:	beq	1c7a0 <test_mixed_type_union@@Base+0x764>
   1ca58:	mov	r9, #0
   1ca5c:	mov	r2, r9
   1ca60:	b	1c794 <test_mixed_type_union@@Base+0x758>
   1ca64:	mov	r3, fp
   1ca68:	mov	r0, sl
   1ca6c:	ldm	r8, {r1, r2}
   1ca70:	bl	1358c <_start@@Base+0x9d0>
   1ca74:	ldrb	r3, [sp, #16]
   1ca78:	cmp	r3, #2
   1ca7c:	beq	1ca94 <test_mixed_type_union@@Base+0xa58>
   1ca80:	ldr	r0, [pc, #852]	; 1cddc <test_mixed_type_union@@Base+0xda0>
   1ca84:	mvn	r5, #0
   1ca88:	add	r0, pc, r0
   1ca8c:	bl	128f0 <printf@plt>
   1ca90:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1ca94:	ldr	r0, [sp, #20]
   1ca98:	bl	134e8 <_start@@Base+0x92c>
   1ca9c:	cmp	r0, #1
   1caa0:	beq	1cab8 <test_mixed_type_union@@Base+0xa7c>
   1caa4:	ldr	r0, [pc, #820]	; 1cde0 <test_mixed_type_union@@Base+0xda4>
   1caa8:	mvn	r5, #0
   1caac:	add	r0, pc, r0
   1cab0:	bl	128f0 <printf@plt>
   1cab4:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1cab8:	ldr	r3, [r4, r6]
   1cabc:	sub	r3, r7, r3
   1cac0:	ldrh	r2, [r3]
   1cac4:	cmp	r2, #21
   1cac8:	bls	1cb18 <test_mixed_type_union@@Base+0xadc>
   1cacc:	ldrh	r3, [r3, #20]
   1cad0:	cmp	r3, #0
   1cad4:	beq	1cb18 <test_mixed_type_union@@Base+0xadc>
   1cad8:	ldr	r2, [r7, r3]
   1cadc:	add	r3, r7, r3
   1cae0:	add	r2, r2, #4
   1cae4:	adds	r3, r3, r2
   1cae8:	beq	1cb18 <test_mixed_type_union@@Base+0xadc>
   1caec:	ldr	r2, [r3, #-4]
   1caf0:	cmp	r2, #3
   1caf4:	bls	1cb18 <test_mixed_type_union@@Base+0xadc>
   1caf8:	ldrb	r3, [r3, #3]
   1cafc:	cmp	r3, #11
   1cb00:	beq	1cb1c <test_mixed_type_union@@Base+0xae0>
   1cb04:	ldr	r0, [pc, #728]	; 1cde4 <test_mixed_type_union@@Base+0xda8>
   1cb08:	mvn	r5, #0
   1cb0c:	add	r0, pc, r0
   1cb10:	bl	12944 <puts@plt>
   1cb14:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1cb18:	bl	13440 <_start@@Base+0x884>
   1cb1c:	cmp	r5, #0
   1cb20:	beq	1cbc8 <test_mixed_type_union@@Base+0xb8c>
   1cb24:	ldr	r3, [r5, #-4]
   1cb28:	cmp	r3, #3
   1cb2c:	bls	1cbc8 <test_mixed_type_union@@Base+0xb8c>
   1cb30:	ldr	r3, [r5, #12]
   1cb34:	add	r3, r3, #16
   1cb38:	adds	r0, r5, r3
   1cb3c:	beq	1cc78 <test_mixed_type_union@@Base+0xc3c>
   1cb40:	ldr	r5, [pc, #672]	; 1cde8 <test_mixed_type_union@@Base+0xdac>
   1cb44:	add	r5, pc, r5
   1cb48:	mov	r1, r5
   1cb4c:	bl	128e4 <strcmp@plt>
   1cb50:	cmp	r0, #0
   1cb54:	bne	1cc78 <test_mixed_type_union@@Base+0xc3c>
   1cb58:	mov	r3, #3
   1cb5c:	mov	r0, sl
   1cb60:	ldm	r8, {r1, r2}
   1cb64:	bl	1358c <_start@@Base+0x9d0>
   1cb68:	ldrb	r3, [sp, #16]
   1cb6c:	cmp	r3, #11
   1cb70:	bne	1cc64 <test_mixed_type_union@@Base+0xc28>
   1cb74:	ldr	r3, [sp, #20]
   1cb78:	cmp	r3, #0
   1cb7c:	beq	1cc20 <test_mixed_type_union@@Base+0xbe4>
   1cb80:	adds	r0, r3, #4
   1cb84:	beq	1cc20 <test_mixed_type_union@@Base+0xbe4>
   1cb88:	mov	r1, r5
   1cb8c:	bl	128e4 <strcmp@plt>
   1cb90:	subs	r5, r0, #0
   1cb94:	bne	1cc20 <test_mixed_type_union@@Base+0xbe4>
   1cb98:	mov	r3, #4
   1cb9c:	mov	r0, sl
   1cba0:	ldm	r8, {r1, r2}
   1cba4:	bl	1358c <_start@@Base+0x9d0>
   1cba8:	ldrb	r3, [sp, #16]
   1cbac:	cmp	r3, #9
   1cbb0:	beq	1cbf0 <test_mixed_type_union@@Base+0xbb4>
   1cbb4:	ldr	r0, [pc, #560]	; 1cdec <test_mixed_type_union@@Base+0xdb0>
   1cbb8:	mvn	r5, #0
   1cbbc:	add	r0, pc, r0
   1cbc0:	bl	128f0 <printf@plt>
   1cbc4:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1cbc8:	ldr	r3, [pc, #544]	; 1cdf0 <test_mixed_type_union@@Base+0xdb4>
   1cbcc:	mov	r2, #119	; 0x77
   1cbd0:	ldr	r1, [pc, #540]	; 1cdf4 <test_mixed_type_union@@Base+0xdb8>
   1cbd4:	ldr	r0, [pc, #540]	; 1cdf8 <test_mixed_type_union@@Base+0xdbc>
   1cbd8:	add	r3, pc, r3
   1cbdc:	add	r3, r3, #1696	; 0x6a0
   1cbe0:	add	r1, pc, r1
   1cbe4:	add	r3, r3, #8
   1cbe8:	add	r0, pc, r0
   1cbec:	bl	129e0 <__assert_fail@plt>
   1cbf0:	mov	r3, #5
   1cbf4:	mov	r0, sl
   1cbf8:	ldm	r8, {r1, r2}
   1cbfc:	bl	1358c <_start@@Base+0x9d0>
   1cc00:	ldrb	r3, [sp, #16]
   1cc04:	cmp	r3, #9
   1cc08:	beq	1cc34 <test_mixed_type_union@@Base+0xbf8>
   1cc0c:	ldr	r0, [pc, #488]	; 1cdfc <test_mixed_type_union@@Base+0xdc0>
   1cc10:	mvn	r5, #0
   1cc14:	add	r0, pc, r0
   1cc18:	bl	128f0 <printf@plt>
   1cc1c:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1cc20:	ldr	r0, [pc, #472]	; 1ce00 <test_mixed_type_union@@Base+0xdc4>
   1cc24:	mvn	r5, #0
   1cc28:	add	r0, pc, r0
   1cc2c:	bl	12944 <puts@plt>
   1cc30:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1cc34:	mov	r3, #6
   1cc38:	mov	r0, sl
   1cc3c:	ldm	r8, {r1, r2}
   1cc40:	bl	1358c <_start@@Base+0x9d0>
   1cc44:	ldrb	r3, [sp, #16]
   1cc48:	cmp	r3, #9
   1cc4c:	beq	1cc8c <test_mixed_type_union@@Base+0xc50>
   1cc50:	ldr	r0, [pc, #428]	; 1ce04 <test_mixed_type_union@@Base+0xdc8>
   1cc54:	mvn	r5, #0
   1cc58:	add	r0, pc, r0
   1cc5c:	bl	128f0 <printf@plt>
   1cc60:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1cc64:	ldr	r0, [pc, #412]	; 1ce08 <test_mixed_type_union@@Base+0xdcc>
   1cc68:	mvn	r5, #0
   1cc6c:	add	r0, pc, r0
   1cc70:	bl	128f0 <printf@plt>
   1cc74:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1cc78:	ldr	r0, [pc, #396]	; 1ce0c <test_mixed_type_union@@Base+0xdd0>
   1cc7c:	mvn	r5, #0
   1cc80:	add	r0, pc, r0
   1cc84:	bl	12944 <puts@plt>
   1cc88:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1cc8c:	mov	r3, #7
   1cc90:	mov	r0, sl
   1cc94:	ldm	r8, {r1, r2}
   1cc98:	bl	1358c <_start@@Base+0x9d0>
   1cc9c:	ldrb	r6, [sp, #16]
   1cca0:	cmp	r6, #9
   1cca4:	beq	1ccbc <test_mixed_type_union@@Base+0xc80>
   1cca8:	ldr	r0, [pc, #352]	; 1ce10 <test_mixed_type_union@@Base+0xdd4>
   1ccac:	mvn	r5, #0
   1ccb0:	add	r0, pc, r0
   1ccb4:	bl	128f0 <printf@plt>
   1ccb8:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1ccbc:	mov	r3, #8
   1ccc0:	mov	r0, sl
   1ccc4:	ldm	r8, {r1, r2}
   1ccc8:	bl	1358c <_start@@Base+0x9d0>
   1cccc:	ldrb	r3, [sp, #16]
   1ccd0:	cmp	r3, #11
   1ccd4:	bne	1cd1c <test_mixed_type_union@@Base+0xce0>
   1ccd8:	mov	r3, r6
   1ccdc:	mov	r0, sl
   1cce0:	ldm	r8, {r1, r2}
   1cce4:	bl	1358c <_start@@Base+0x9d0>
   1cce8:	ldrb	r3, [sp, #16]
   1ccec:	cmp	r3, #11
   1ccf0:	bne	1cd1c <test_mixed_type_union@@Base+0xce0>
   1ccf4:	cmp	r9, #0
   1ccf8:	beq	1cd08 <test_mixed_type_union@@Base+0xccc>
   1ccfc:	ldr	r3, [r9, #-4]
   1cd00:	cmp	r3, #10
   1cd04:	beq	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1cd08:	ldr	r0, [pc, #260]	; 1ce14 <test_mixed_type_union@@Base+0xdd8>
   1cd0c:	mvn	r5, #0
   1cd10:	add	r0, pc, r0
   1cd14:	bl	128f0 <printf@plt>
   1cd18:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1cd1c:	ldr	r0, [pc, #244]	; 1ce18 <test_mixed_type_union@@Base+0xddc>
   1cd20:	mvn	r5, #0
   1cd24:	add	r0, pc, r0
   1cd28:	bl	128f0 <printf@plt>
   1cd2c:	b	1c5c8 <test_mixed_type_union@@Base+0x58c>
   1cd30:	andeq	r9, r0, ip, asr #21
   1cd34:	andeq	sp, r1, ip, ror pc
   1cd38:	andeq	r8, r0, r4, lsl #26
   1cd3c:	andeq	fp, r0, r4, ror #12
   1cd40:	andeq	r8, r0, ip, asr #23
   1cd44:	andeq	fp, r0, r8, asr r5
   1cd48:	andeq	fp, r0, r8, ror #8
   1cd4c:	andeq	fp, r0, r0, asr #8
   1cd50:	andeq	r8, r0, ip, lsl sl
   1cd54:	andeq	r0, r0, r8, rrx
   1cd58:	andeq	fp, r0, ip, lsr r4
   1cd5c:			; <UNDEFINED> instruction: 0xffff7be4
   1cd60:	andeq	r9, r0, r8, lsl #12
   1cd64:	andeq	r8, r0, r0, ror r9
   1cd68:	ldrdeq	r9, [r0], -ip
   1cd6c:	andeq	r9, r0, r4, asr r1
   1cd70:	andeq	fp, r0, ip, lsl r4
   1cd74:			; <UNDEFINED> instruction: 0x0000b3b8
   1cd78:	andeq	fp, r0, r4, ror #2
   1cd7c:	andeq	fp, r0, r8, ror #7
   1cd80:	muleq	r0, ip, r1
   1cd84:	andeq	fp, r0, r8, lsr #3
   1cd88:	ldrdeq	fp, [r0], -r8
   1cd8c:	strdeq	fp, [r0], -r4
   1cd90:	andeq	fp, r0, r8, lsl #3
   1cd94:	andeq	fp, r0, r0, lsr r2
   1cd98:	andeq	fp, r0, ip, asr #4
   1cd9c:	andeq	fp, r0, r0, asr r2
   1cda0:	andeq	fp, r0, r4, asr r0
   1cda4:	andeq	fp, r0, r8, lsr #3
   1cda8:	andeq	fp, r0, r0, lsr r2
   1cdac:	muleq	r0, r0, r5
   1cdb0:	muleq	r0, ip, lr
   1cdb4:	andeq	sl, r0, r0, asr #29
   1cdb8:	andeq	fp, r0, r0, lsl r2
   1cdbc:	andeq	r8, r0, r8, ror #28
   1cdc0:	andeq	sl, r0, r8, lsr pc
   1cdc4:	strdeq	fp, [r0], -r4
   1cdc8:	andeq	fp, r0, r0, lsl r2
   1cdcc:	andeq	fp, r0, r8, lsl #4
   1cdd0:	andeq	r8, r0, r4, asr #9
   1cdd4:	andeq	r8, r0, r0, lsr ip
   1cdd8:	andeq	sl, r0, r0, lsl sp
   1cddc:			; <UNDEFINED> instruction: 0x0000b1b4
   1cde0:			; <UNDEFINED> instruction: 0x0000b1b4
   1cde4:	andeq	fp, r0, r8, lsl #3
   1cde8:	andeq	sl, r0, r0, ror sp
   1cdec:			; <UNDEFINED> instruction: 0x0000b1b4
   1cdf0:	andeq	r8, r0, r8, lsl #6
   1cdf4:	andeq	r8, r0, r8, lsl fp
   1cdf8:	muleq	r0, r0, fp
   1cdfc:	andeq	fp, r0, r0, lsl #3
   1ce00:	andeq	fp, r0, r8, lsl #2
   1ce04:	andeq	fp, r0, r0, ror #2
   1ce08:	andeq	fp, r0, ip, lsl #1
   1ce0c:	andeq	fp, r0, r4, asr #32
   1ce10:	andeq	fp, r0, ip, lsr #2
   1ce14:	andeq	fp, r0, ip, lsl r1
   1ce18:	ldrdeq	fp, [r0], -ip

0001ce1c <test_add_set_defaults@@Base>:
   1ce1c:	strd	r4, [sp, #-16]!
   1ce20:	mov	r4, r0
   1ce24:	str	r6, [sp, #8]
   1ce28:	str	lr, [sp, #12]
   1ce2c:	sub	sp, sp, #8
   1ce30:	bl	1f250 <flatcc_builder_reset@@Base>
   1ce34:	ldr	r1, [pc, #828]	; 1d178 <test_add_set_defaults@@Base+0x35c>
   1ce38:	mov	r3, #0
   1ce3c:	mov	r0, r4
   1ce40:	mov	r2, r3
   1ce44:	add	r1, pc, r1
   1ce48:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   1ce4c:	cmp	r0, #0
   1ce50:	bne	1ce60 <test_add_set_defaults@@Base+0x44>
   1ce54:	mov	r1, #36	; 0x24
   1ce58:	mov	r0, r4
   1ce5c:	bl	20a20 <flatcc_builder_start_table@@Base>
   1ce60:	ldr	r1, [pc, #788]	; 1d17c <test_add_set_defaults@@Base+0x360>
   1ce64:	mov	r0, r4
   1ce68:	add	r1, pc, r1
   1ce6c:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1ce70:	subs	r5, r0, #0
   1ce74:	beq	1ce8c <test_add_set_defaults@@Base+0x70>
   1ce78:	mov	r1, #3
   1ce7c:	mov	r0, r4
   1ce80:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1ce84:	cmp	r0, #0
   1ce88:	strne	r5, [r0]
   1ce8c:	mov	r3, #2
   1ce90:	mov	r1, #1
   1ce94:	mov	r2, r3
   1ce98:	mov	r0, r4
   1ce9c:	bl	22554 <flatcc_builder_table_add@@Base>
   1cea0:	ldr	r1, [pc, #728]	; 1d180 <test_add_set_defaults@@Base+0x364>
   1cea4:	cmp	r0, #0
   1cea8:	mov	r2, #1
   1ceac:	movne	r3, #100	; 0x64
   1ceb0:	strhne	r3, [r0]
   1ceb4:	mov	r0, r4
   1ceb8:	add	r1, pc, r1
   1cebc:	add	r1, r1, #1024	; 0x400
   1cec0:	add	r1, r1, #4
   1cec4:	bl	21358 <flatcc_builder_check_required@@Base>
   1cec8:	cmp	r0, #0
   1cecc:	beq	1d174 <test_add_set_defaults@@Base+0x358>
   1ced0:	mov	r0, r4
   1ced4:	add	r5, sp, #4
   1ced8:	bl	21404 <flatcc_builder_end_table@@Base>
   1cedc:	mov	r1, r0
   1cee0:	mov	r0, r4
   1cee4:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   1cee8:	mov	r1, r5
   1ceec:	mov	r0, r4
   1cef0:	bl	22d14 <flatcc_builder_get_direct_buffer@@Base>
   1cef4:	cmp	r0, #0
   1cef8:	beq	1cf10 <test_add_set_defaults@@Base+0xf4>
   1cefc:	ldr	r2, [r0, #4]
   1cf00:	movw	r3, #20301	; 0x4f4d
   1cf04:	movt	r3, #21326	; 0x534e
   1cf08:	cmp	r2, r3
   1cf0c:	beq	1cf14 <test_add_set_defaults@@Base+0xf8>
   1cf10:	bl	12f0c <_start@@Base+0x350>
   1cf14:	ldr	r2, [r0]
   1cf18:	adds	r3, r0, r2
   1cf1c:	beq	1cf10 <test_add_set_defaults@@Base+0xf4>
   1cf20:	ldr	r2, [r0, r2]
   1cf24:	sub	r3, r3, r2
   1cf28:	ldrh	r2, [r3]
   1cf2c:	cmp	r2, #9
   1cf30:	bls	1d0c4 <test_add_set_defaults@@Base+0x2a8>
   1cf34:	ldrh	r1, [r3, #8]
   1cf38:	cmp	r1, #0
   1cf3c:	bne	1d138 <test_add_set_defaults@@Base+0x31c>
   1cf40:	ldrh	r1, [r3, #6]
   1cf44:	cmp	r1, #0
   1cf48:	beq	1d0cc <test_add_set_defaults@@Base+0x2b0>
   1cf4c:	cmp	r2, #17
   1cf50:	bls	1cf60 <test_add_set_defaults@@Base+0x144>
   1cf54:	ldrh	r3, [r3, #16]
   1cf58:	cmp	r3, #0
   1cf5c:	bne	1d14c <test_add_set_defaults@@Base+0x330>
   1cf60:	mov	r0, r4
   1cf64:	bl	1f250 <flatcc_builder_reset@@Base>
   1cf68:	ldr	r1, [pc, #532]	; 1d184 <test_add_set_defaults@@Base+0x368>
   1cf6c:	mov	r3, #0
   1cf70:	mov	r0, r4
   1cf74:	mov	r2, r3
   1cf78:	add	r1, pc, r1
   1cf7c:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   1cf80:	cmp	r0, #0
   1cf84:	bne	1cf94 <test_add_set_defaults@@Base+0x178>
   1cf88:	mov	r1, #36	; 0x24
   1cf8c:	mov	r0, r4
   1cf90:	bl	20a20 <flatcc_builder_start_table@@Base>
   1cf94:	ldr	r1, [pc, #492]	; 1d188 <test_add_set_defaults@@Base+0x36c>
   1cf98:	mov	r0, r4
   1cf9c:	add	r1, pc, r1
   1cfa0:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1cfa4:	subs	r6, r0, #0
   1cfa8:	beq	1cfc0 <test_add_set_defaults@@Base+0x1a4>
   1cfac:	mov	r1, #3
   1cfb0:	mov	r0, r4
   1cfb4:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1cfb8:	cmp	r0, #0
   1cfbc:	strne	r6, [r0]
   1cfc0:	mov	r3, #2
   1cfc4:	mov	r0, r4
   1cfc8:	mov	r2, r3
   1cfcc:	mov	r1, r3
   1cfd0:	bl	22554 <flatcc_builder_table_add@@Base>
   1cfd4:	cmp	r0, #0
   1cfd8:	mov	r1, #1
   1cfdc:	movne	r3, #100	; 0x64
   1cfe0:	strhne	r3, [r0]
   1cfe4:	mov	r3, #2
   1cfe8:	mov	r0, r4
   1cfec:	mov	r2, r3
   1cff0:	bl	22554 <flatcc_builder_table_add@@Base>
   1cff4:	cmp	r0, #0
   1cff8:	mov	r1, #6
   1cffc:	movne	r3, #100	; 0x64
   1d000:	strhne	r3, [r0]
   1d004:	mov	r3, #1
   1d008:	mov	r0, r4
   1d00c:	mov	r2, r3
   1d010:	bl	22554 <flatcc_builder_table_add@@Base>
   1d014:	ldr	r1, [pc, #368]	; 1d18c <test_add_set_defaults@@Base+0x370>
   1d018:	cmp	r0, #0
   1d01c:	mov	r2, #1
   1d020:	movne	r3, #8
   1d024:	strbne	r3, [r0]
   1d028:	mov	r0, r4
   1d02c:	add	r1, pc, r1
   1d030:	add	r1, r1, #1024	; 0x400
   1d034:	add	r1, r1, #4
   1d038:	bl	21358 <flatcc_builder_check_required@@Base>
   1d03c:	cmp	r0, #0
   1d040:	beq	1d174 <test_add_set_defaults@@Base+0x358>
   1d044:	mov	r0, r4
   1d048:	bl	21404 <flatcc_builder_end_table@@Base>
   1d04c:	mov	r1, r0
   1d050:	mov	r0, r4
   1d054:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   1d058:	mov	r1, r5
   1d05c:	mov	r0, r4
   1d060:	bl	22d14 <flatcc_builder_get_direct_buffer@@Base>
   1d064:	cmp	r0, #0
   1d068:	beq	1cf10 <test_add_set_defaults@@Base+0xf4>
   1d06c:	ldr	r2, [r0, #4]
   1d070:	movw	r3, #20301	; 0x4f4d
   1d074:	movt	r3, #21326	; 0x534e
   1d078:	cmp	r2, r3
   1d07c:	bne	1cf10 <test_add_set_defaults@@Base+0xf4>
   1d080:	ldr	r2, [r0]
   1d084:	adds	r3, r0, r2
   1d088:	beq	1cf10 <test_add_set_defaults@@Base+0xf4>
   1d08c:	ldr	r2, [r0, r2]
   1d090:	sub	r3, r3, r2
   1d094:	ldrh	r2, [r3]
   1d098:	cmp	r2, #9
   1d09c:	bhi	1d0e0 <test_add_set_defaults@@Base+0x2c4>
   1d0a0:	ldr	r0, [pc, #232]	; 1d190 <test_add_set_defaults@@Base+0x374>
   1d0a4:	add	r0, pc, r0
   1d0a8:	bl	12944 <puts@plt>
   1d0ac:	mvn	r0, #0
   1d0b0:	add	sp, sp, #8
   1d0b4:	ldrd	r4, [sp]
   1d0b8:	ldr	r6, [sp, #8]
   1d0bc:	add	sp, sp, #12
   1d0c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d0c4:	cmp	r2, #7
   1d0c8:	bhi	1d128 <test_add_set_defaults@@Base+0x30c>
   1d0cc:	ldr	r0, [pc, #192]	; 1d194 <test_add_set_defaults@@Base+0x378>
   1d0d0:	add	r0, pc, r0
   1d0d4:	bl	12944 <puts@plt>
   1d0d8:	mvn	r0, #0
   1d0dc:	b	1d0b0 <test_add_set_defaults@@Base+0x294>
   1d0e0:	ldrh	r1, [r3, #8]
   1d0e4:	cmp	r1, #0
   1d0e8:	beq	1d0a0 <test_add_set_defaults@@Base+0x284>
   1d0ec:	ldrh	r1, [r3, #6]
   1d0f0:	cmp	r1, #0
   1d0f4:	beq	1d160 <test_add_set_defaults@@Base+0x344>
   1d0f8:	cmp	r2, #17
   1d0fc:	bhi	1d114 <test_add_set_defaults@@Base+0x2f8>
   1d100:	ldr	r0, [pc, #144]	; 1d198 <test_add_set_defaults@@Base+0x37c>
   1d104:	add	r0, pc, r0
   1d108:	bl	12944 <puts@plt>
   1d10c:	mvn	r0, #0
   1d110:	b	1d0b0 <test_add_set_defaults@@Base+0x294>
   1d114:	ldrh	r3, [r3, #16]
   1d118:	cmp	r3, #0
   1d11c:	movne	r0, #0
   1d120:	bne	1d0b0 <test_add_set_defaults@@Base+0x294>
   1d124:	b	1d100 <test_add_set_defaults@@Base+0x2e4>
   1d128:	ldrh	r3, [r3, #6]
   1d12c:	cmp	r3, #0
   1d130:	bne	1cf60 <test_add_set_defaults@@Base+0x144>
   1d134:	b	1d0cc <test_add_set_defaults@@Base+0x2b0>
   1d138:	ldr	r0, [pc, #92]	; 1d19c <test_add_set_defaults@@Base+0x380>
   1d13c:	add	r0, pc, r0
   1d140:	bl	12944 <puts@plt>
   1d144:	mvn	r0, #0
   1d148:	b	1d0b0 <test_add_set_defaults@@Base+0x294>
   1d14c:	ldr	r0, [pc, #76]	; 1d1a0 <test_add_set_defaults@@Base+0x384>
   1d150:	add	r0, pc, r0
   1d154:	bl	12944 <puts@plt>
   1d158:	mvn	r0, #0
   1d15c:	b	1d0b0 <test_add_set_defaults@@Base+0x294>
   1d160:	ldr	r0, [pc, #60]	; 1d1a4 <test_add_set_defaults@@Base+0x388>
   1d164:	add	r0, pc, r0
   1d168:	bl	12944 <puts@plt>
   1d16c:	mvn	r0, #0
   1d170:	b	1d0b0 <test_add_set_defaults@@Base+0x294>
   1d174:	bl	13668 <_start@@Base+0xaac>
   1d178:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   1d17c:	strdeq	r8, [r0], -ip
   1d180:	andeq	r8, r0, r8, lsr #32
   1d184:	andeq	r8, r0, r4, asr #23
   1d188:	andeq	r8, r0, r8, asr #25
   1d18c:			; <UNDEFINED> instruction: 0x00007eb4
   1d190:	andeq	sl, r0, ip, lsr lr
   1d194:			; <UNDEFINED> instruction: 0x0000adb0
   1d198:	andeq	sl, r0, r0, asr lr
   1d19c:	andeq	sl, r0, r8, lsl sp
   1d1a0:	andeq	sl, r0, r0, ror #26
   1d1a4:			; <UNDEFINED> instruction: 0x0000adb0

0001d1a8 <test_nested_buffer@@Base>:
   1d1a8:	strd	r4, [sp, #-16]!
   1d1ac:	mov	r4, r0
   1d1b0:	str	r6, [sp, #8]
   1d1b4:	str	lr, [sp, #12]
   1d1b8:	sub	sp, sp, #8
   1d1bc:	bl	1f250 <flatcc_builder_reset@@Base>
   1d1c0:	ldr	r1, [pc, #856]	; 1d520 <test_nested_buffer@@Base+0x378>
   1d1c4:	mov	r3, #0
   1d1c8:	mov	r0, r4
   1d1cc:	mov	r2, r3
   1d1d0:	ldr	r5, [pc, #844]	; 1d524 <test_nested_buffer@@Base+0x37c>
   1d1d4:	add	r1, pc, r1
   1d1d8:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   1d1dc:	cmp	r0, #0
   1d1e0:	add	r5, pc, r5
   1d1e4:	bne	1d1f4 <test_nested_buffer@@Base+0x4c>
   1d1e8:	mov	r1, #36	; 0x24
   1d1ec:	mov	r0, r4
   1d1f0:	bl	20a20 <flatcc_builder_start_table@@Base>
   1d1f4:	ldr	r1, [pc, #812]	; 1d528 <test_nested_buffer@@Base+0x380>
   1d1f8:	mov	r0, r4
   1d1fc:	add	r1, pc, r1
   1d200:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1d204:	subs	r6, r0, #0
   1d208:	beq	1d220 <test_nested_buffer@@Base+0x78>
   1d20c:	mov	r1, #3
   1d210:	mov	r0, r4
   1d214:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1d218:	cmp	r0, #0
   1d21c:	strne	r6, [r0]
   1d220:	ldr	r1, [pc, #772]	; 1d52c <test_nested_buffer@@Base+0x384>
   1d224:	mov	r3, #0
   1d228:	mov	r0, r4
   1d22c:	mov	r2, r3
   1d230:	add	r1, pc, r1
   1d234:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   1d238:	cmp	r0, #0
   1d23c:	bne	1d24c <test_nested_buffer@@Base+0xa4>
   1d240:	mov	r1, #36	; 0x24
   1d244:	mov	r0, r4
   1d248:	bl	20a20 <flatcc_builder_start_table@@Base>
   1d24c:	ldr	r1, [pc, #732]	; 1d530 <test_nested_buffer@@Base+0x388>
   1d250:	mov	r0, r4
   1d254:	add	r1, pc, r1
   1d258:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1d25c:	subs	r6, r0, #0
   1d260:	beq	1d278 <test_nested_buffer@@Base+0xd0>
   1d264:	mov	r1, #3
   1d268:	mov	r0, r4
   1d26c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1d270:	cmp	r0, #0
   1d274:	strne	r6, [r0]
   1d278:	ldr	r1, [pc, #692]	; 1d534 <test_nested_buffer@@Base+0x38c>
   1d27c:	mov	r2, #1
   1d280:	mov	r0, r4
   1d284:	add	r1, pc, r1
   1d288:	add	r1, r1, #1024	; 0x400
   1d28c:	add	r1, r1, #4
   1d290:	bl	21358 <flatcc_builder_check_required@@Base>
   1d294:	cmp	r0, #0
   1d298:	beq	1d4f8 <test_nested_buffer@@Base+0x350>
   1d29c:	mov	r0, r4
   1d2a0:	bl	21404 <flatcc_builder_end_table@@Base>
   1d2a4:	mov	r1, r0
   1d2a8:	mov	r0, r4
   1d2ac:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   1d2b0:	subs	r6, r0, #0
   1d2b4:	beq	1d2cc <test_nested_buffer@@Base+0x124>
   1d2b8:	mov	r1, #13
   1d2bc:	mov	r0, r4
   1d2c0:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1d2c4:	cmp	r0, #0
   1d2c8:	strne	r6, [r0]
   1d2cc:	mov	r3, #2
   1d2d0:	mov	r0, r4
   1d2d4:	mov	r2, r3
   1d2d8:	mov	r1, r3
   1d2dc:	bl	22554 <flatcc_builder_table_add@@Base>
   1d2e0:	ldr	r1, [pc, #592]	; 1d538 <test_nested_buffer@@Base+0x390>
   1d2e4:	cmp	r0, #0
   1d2e8:	mov	r2, #1
   1d2ec:	movne	r3, #10
   1d2f0:	strhne	r3, [r0]
   1d2f4:	mov	r0, r4
   1d2f8:	add	r1, pc, r1
   1d2fc:	add	r1, r1, #1024	; 0x400
   1d300:	add	r1, r1, #4
   1d304:	bl	21358 <flatcc_builder_check_required@@Base>
   1d308:	cmp	r0, #0
   1d30c:	beq	1d4f8 <test_nested_buffer@@Base+0x350>
   1d310:	mov	r0, r4
   1d314:	bl	21404 <flatcc_builder_end_table@@Base>
   1d318:	mov	r1, r0
   1d31c:	mov	r0, r4
   1d320:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   1d324:	mov	r0, r4
   1d328:	add	r1, sp, #4
   1d32c:	bl	22d14 <flatcc_builder_get_direct_buffer@@Base>
   1d330:	ldr	r3, [pc, #516]	; 1d53c <test_nested_buffer@@Base+0x394>
   1d334:	mov	r4, r0
   1d338:	mov	r1, r0
   1d33c:	ldr	r0, [pc, #508]	; 1d540 <test_nested_buffer@@Base+0x398>
   1d340:	ldr	r2, [sp, #4]
   1d344:	ldr	r3, [r5, r3]
   1d348:	add	r0, pc, r0
   1d34c:	ldr	r3, [r3]
   1d350:	bl	12cd8 <_start@@Base+0x11c>
   1d354:	cmp	r4, #0
   1d358:	beq	1d494 <test_nested_buffer@@Base+0x2ec>
   1d35c:	ldr	r2, [r4, #4]
   1d360:	movw	r3, #20301	; 0x4f4d
   1d364:	movt	r3, #21326	; 0x534e
   1d368:	cmp	r2, r3
   1d36c:	bne	1d494 <test_nested_buffer@@Base+0x2ec>
   1d370:	ldr	r3, [r4]
   1d374:	adds	r5, r4, r3
   1d378:	beq	1d494 <test_nested_buffer@@Base+0x2ec>
   1d37c:	ldr	r4, [r4, r3]
   1d380:	sub	r4, r5, r4
   1d384:	ldrh	r6, [r4]
   1d388:	cmp	r6, #11
   1d38c:	bls	1d4d4 <test_nested_buffer@@Base+0x32c>
   1d390:	ldrh	r0, [r4, #10]
   1d394:	cmp	r0, #0
   1d398:	beq	1d4d4 <test_nested_buffer@@Base+0x32c>
   1d39c:	ldr	r3, [r5, r0]
   1d3a0:	add	r0, r5, r0
   1d3a4:	ldr	r1, [pc, #408]	; 1d544 <test_nested_buffer@@Base+0x39c>
   1d3a8:	add	r3, r3, #4
   1d3ac:	add	r0, r0, r3
   1d3b0:	add	r1, pc, r1
   1d3b4:	bl	128e4 <strcmp@plt>
   1d3b8:	cmp	r0, #0
   1d3bc:	bne	1d4ac <test_nested_buffer@@Base+0x304>
   1d3c0:	cmp	r6, #31
   1d3c4:	ldrh	r1, [r4, #8]
   1d3c8:	bls	1d480 <test_nested_buffer@@Base+0x2d8>
   1d3cc:	ldrh	r3, [r4, #30]
   1d3d0:	cmp	r3, #0
   1d3d4:	beq	1d480 <test_nested_buffer@@Base+0x2d8>
   1d3d8:	ldr	r0, [r5, r3]
   1d3dc:	add	r3, r5, r3
   1d3e0:	add	r0, r0, #4
   1d3e4:	adds	r2, r3, r0
   1d3e8:	beq	1d480 <test_nested_buffer@@Base+0x2d8>
   1d3ec:	ldr	lr, [r2, #4]
   1d3f0:	movw	ip, #20301	; 0x4f4d
   1d3f4:	movt	ip, #21326	; 0x534e
   1d3f8:	cmp	lr, ip
   1d3fc:	bne	1d480 <test_nested_buffer@@Base+0x2d8>
   1d400:	ldr	r3, [r3, r0]
   1d404:	cmp	r1, #0
   1d408:	add	r0, r2, r3
   1d40c:	beq	1d498 <test_nested_buffer@@Base+0x2f0>
   1d410:	ldrsh	r1, [r5, r1]
   1d414:	cmp	r1, #10
   1d418:	bne	1d498 <test_nested_buffer@@Base+0x2f0>
   1d41c:	cmp	r0, #0
   1d420:	beq	1d494 <test_nested_buffer@@Base+0x2ec>
   1d424:	ldr	r3, [r2, r3]
   1d428:	sub	r3, r0, r3
   1d42c:	ldrh	r2, [r3]
   1d430:	cmp	r2, #11
   1d434:	bls	1d4d4 <test_nested_buffer@@Base+0x32c>
   1d438:	ldrh	r2, [r3, #10]
   1d43c:	cmp	r2, #0
   1d440:	beq	1d4d4 <test_nested_buffer@@Base+0x32c>
   1d444:	ldr	r3, [r0, r2]
   1d448:	add	r0, r0, r2
   1d44c:	add	r3, r3, #4
   1d450:	adds	r0, r0, r3
   1d454:	beq	1d4fc <test_nested_buffer@@Base+0x354>
   1d458:	ldr	r1, [pc, #232]	; 1d548 <test_nested_buffer@@Base+0x3a0>
   1d45c:	add	r1, pc, r1
   1d460:	bl	128e4 <strcmp@plt>
   1d464:	cmp	r0, #0
   1d468:	bne	1d4c0 <test_nested_buffer@@Base+0x318>
   1d46c:	add	sp, sp, #8
   1d470:	ldrd	r4, [sp]
   1d474:	ldr	r6, [sp, #8]
   1d478:	add	sp, sp, #12
   1d47c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d480:	cmp	r1, #0
   1d484:	beq	1d498 <test_nested_buffer@@Base+0x2f0>
   1d488:	ldrsh	r3, [r5, r1]
   1d48c:	cmp	r3, #10
   1d490:	bne	1d498 <test_nested_buffer@@Base+0x2f0>
   1d494:	bl	132a8 <_start@@Base+0x6ec>
   1d498:	ldr	r0, [pc, #172]	; 1d54c <test_nested_buffer@@Base+0x3a4>
   1d49c:	add	r0, pc, r0
   1d4a0:	bl	12944 <puts@plt>
   1d4a4:	mvn	r0, #0
   1d4a8:	b	1d46c <test_nested_buffer@@Base+0x2c4>
   1d4ac:	ldr	r0, [pc, #156]	; 1d550 <test_nested_buffer@@Base+0x3a8>
   1d4b0:	add	r0, pc, r0
   1d4b4:	bl	12944 <puts@plt>
   1d4b8:	mvn	r0, #0
   1d4bc:	b	1d46c <test_nested_buffer@@Base+0x2c4>
   1d4c0:	ldr	r0, [pc, #140]	; 1d554 <test_nested_buffer@@Base+0x3ac>
   1d4c4:	add	r0, pc, r0
   1d4c8:	bl	12944 <puts@plt>
   1d4cc:	mvn	r0, #0
   1d4d0:	b	1d46c <test_nested_buffer@@Base+0x2c4>
   1d4d4:	ldr	r3, [pc, #124]	; 1d558 <test_nested_buffer@@Base+0x3b0>
   1d4d8:	movw	r2, #699	; 0x2bb
   1d4dc:	ldr	r1, [pc, #120]	; 1d55c <test_nested_buffer@@Base+0x3b4>
   1d4e0:	ldr	r0, [pc, #120]	; 1d560 <test_nested_buffer@@Base+0x3b8>
   1d4e4:	add	r3, pc, r3
   1d4e8:	add	r3, r3, #524	; 0x20c
   1d4ec:	add	r1, pc, r1
   1d4f0:	add	r0, pc, r0
   1d4f4:	bl	129e0 <__assert_fail@plt>
   1d4f8:	bl	13668 <_start@@Base+0xaac>
   1d4fc:	ldr	r3, [pc, #96]	; 1d564 <test_nested_buffer@@Base+0x3bc>
   1d500:	movw	r2, #2188	; 0x88c
   1d504:	ldr	r1, [pc, #92]	; 1d568 <test_nested_buffer@@Base+0x3c0>
   1d508:	ldr	r0, [pc, #92]	; 1d56c <test_nested_buffer@@Base+0x3c4>
   1d50c:	add	r3, pc, r3
   1d510:	add	r3, r3, #1744	; 0x6d0
   1d514:	add	r1, pc, r1
   1d518:	add	r0, pc, r0
   1d51c:	bl	129e0 <__assert_fail@plt>
   1d520:	andeq	r8, r0, r8, ror #18
   1d524:	andeq	ip, r1, r8, lsl lr
   1d528:	andeq	r8, r0, r8, ror #20
   1d52c:	andeq	r8, r0, ip, lsl #18
   1d530:	andeq	sl, r0, r8, lsr sp
   1d534:	andeq	r7, r0, ip, asr ip
   1d538:	andeq	r7, r0, r8, ror #23
   1d53c:	andeq	r0, r0, r8, rrx
   1d540:	andeq	sl, r0, r4, asr ip
   1d544:			; <UNDEFINED> instruction: 0x000088b4
   1d548:	andeq	sl, r0, r0, lsr fp
   1d54c:	andeq	sl, r0, r0, lsr fp
   1d550:	andeq	sl, r0, r0, lsl #22
   1d554:	andeq	sl, r0, r8, asr #22
   1d558:	strdeq	r7, [r0], -ip
   1d55c:	andeq	r8, r0, r8, ror #2
   1d560:	andeq	r8, r0, r0, asr #5
   1d564:	ldrdeq	r7, [r0], -r4
   1d568:	muleq	r0, r8, sp
   1d56c:	ldrdeq	sl, [r0], -r8

0001d570 <test_nested_buffer_first@@Base>:
   1d570:	strd	r4, [sp, #-16]!
   1d574:	mov	r4, r0
   1d578:	str	r6, [sp, #8]
   1d57c:	str	lr, [sp, #12]
   1d580:	sub	sp, sp, #8
   1d584:	bl	1f250 <flatcc_builder_reset@@Base>
   1d588:	ldr	r1, [pc, #860]	; 1d8ec <test_nested_buffer_first@@Base+0x37c>
   1d58c:	mov	r3, #0
   1d590:	mov	r0, r4
   1d594:	mov	r2, r3
   1d598:	ldr	r5, [pc, #848]	; 1d8f0 <test_nested_buffer_first@@Base+0x380>
   1d59c:	add	r1, pc, r1
   1d5a0:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   1d5a4:	cmp	r0, #0
   1d5a8:	add	r5, pc, r5
   1d5ac:	bne	1d5bc <test_nested_buffer_first@@Base+0x4c>
   1d5b0:	mov	r1, #36	; 0x24
   1d5b4:	mov	r0, r4
   1d5b8:	bl	20a20 <flatcc_builder_start_table@@Base>
   1d5bc:	ldr	r1, [pc, #816]	; 1d8f4 <test_nested_buffer_first@@Base+0x384>
   1d5c0:	mov	r3, #0
   1d5c4:	mov	r0, r4
   1d5c8:	mov	r2, r3
   1d5cc:	add	r1, pc, r1
   1d5d0:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   1d5d4:	cmp	r0, #0
   1d5d8:	bne	1d5e8 <test_nested_buffer_first@@Base+0x78>
   1d5dc:	mov	r1, #36	; 0x24
   1d5e0:	mov	r0, r4
   1d5e4:	bl	20a20 <flatcc_builder_start_table@@Base>
   1d5e8:	ldr	r1, [pc, #776]	; 1d8f8 <test_nested_buffer_first@@Base+0x388>
   1d5ec:	mov	r0, r4
   1d5f0:	add	r1, pc, r1
   1d5f4:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1d5f8:	subs	r6, r0, #0
   1d5fc:	beq	1d614 <test_nested_buffer_first@@Base+0xa4>
   1d600:	mov	r1, #3
   1d604:	mov	r0, r4
   1d608:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1d60c:	cmp	r0, #0
   1d610:	strne	r6, [r0]
   1d614:	ldr	r1, [pc, #736]	; 1d8fc <test_nested_buffer_first@@Base+0x38c>
   1d618:	mov	r2, #1
   1d61c:	mov	r0, r4
   1d620:	add	r1, pc, r1
   1d624:	add	r1, r1, #1024	; 0x400
   1d628:	add	r1, r1, #4
   1d62c:	bl	21358 <flatcc_builder_check_required@@Base>
   1d630:	cmp	r0, #0
   1d634:	beq	1d8c0 <test_nested_buffer_first@@Base+0x350>
   1d638:	mov	r0, r4
   1d63c:	bl	21404 <flatcc_builder_end_table@@Base>
   1d640:	mov	r1, r0
   1d644:	mov	r0, r4
   1d648:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   1d64c:	subs	r6, r0, #0
   1d650:	beq	1d668 <test_nested_buffer_first@@Base+0xf8>
   1d654:	mov	r1, #13
   1d658:	mov	r0, r4
   1d65c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1d660:	cmp	r0, #0
   1d664:	strne	r6, [r0]
   1d668:	mov	r3, #2
   1d66c:	mov	r0, r4
   1d670:	mov	r1, r3
   1d674:	mov	r2, r3
   1d678:	bl	22554 <flatcc_builder_table_add@@Base>
   1d67c:	ldr	r1, [pc, #636]	; 1d900 <test_nested_buffer_first@@Base+0x390>
   1d680:	cmp	r0, #0
   1d684:	movne	r3, #10
   1d688:	strhne	r3, [r0]
   1d68c:	mov	r0, r4
   1d690:	add	r1, pc, r1
   1d694:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1d698:	subs	r6, r0, #0
   1d69c:	beq	1d6b4 <test_nested_buffer_first@@Base+0x144>
   1d6a0:	mov	r1, #3
   1d6a4:	mov	r0, r4
   1d6a8:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1d6ac:	cmp	r0, #0
   1d6b0:	strne	r6, [r0]
   1d6b4:	ldr	r1, [pc, #584]	; 1d904 <test_nested_buffer_first@@Base+0x394>
   1d6b8:	mov	r2, #1
   1d6bc:	mov	r0, r4
   1d6c0:	add	r1, pc, r1
   1d6c4:	add	r1, r1, #1024	; 0x400
   1d6c8:	add	r1, r1, #4
   1d6cc:	bl	21358 <flatcc_builder_check_required@@Base>
   1d6d0:	cmp	r0, #0
   1d6d4:	beq	1d8c0 <test_nested_buffer_first@@Base+0x350>
   1d6d8:	mov	r0, r4
   1d6dc:	bl	21404 <flatcc_builder_end_table@@Base>
   1d6e0:	mov	r1, r0
   1d6e4:	mov	r0, r4
   1d6e8:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   1d6ec:	mov	r0, r4
   1d6f0:	add	r1, sp, #4
   1d6f4:	bl	22d14 <flatcc_builder_get_direct_buffer@@Base>
   1d6f8:	ldr	r3, [pc, #520]	; 1d908 <test_nested_buffer_first@@Base+0x398>
   1d6fc:	mov	r4, r0
   1d700:	mov	r1, r0
   1d704:	ldr	r0, [pc, #512]	; 1d90c <test_nested_buffer_first@@Base+0x39c>
   1d708:	ldr	r2, [sp, #4]
   1d70c:	ldr	r3, [r5, r3]
   1d710:	add	r0, pc, r0
   1d714:	ldr	r3, [r3]
   1d718:	bl	12cd8 <_start@@Base+0x11c>
   1d71c:	cmp	r4, #0
   1d720:	beq	1d85c <test_nested_buffer_first@@Base+0x2ec>
   1d724:	ldr	r2, [r4, #4]
   1d728:	movw	r3, #20301	; 0x4f4d
   1d72c:	movt	r3, #21326	; 0x534e
   1d730:	cmp	r2, r3
   1d734:	bne	1d85c <test_nested_buffer_first@@Base+0x2ec>
   1d738:	ldr	r3, [r4]
   1d73c:	adds	r5, r4, r3
   1d740:	beq	1d85c <test_nested_buffer_first@@Base+0x2ec>
   1d744:	ldr	r4, [r4, r3]
   1d748:	sub	r4, r5, r4
   1d74c:	ldrh	r6, [r4]
   1d750:	cmp	r6, #11
   1d754:	bls	1d89c <test_nested_buffer_first@@Base+0x32c>
   1d758:	ldrh	r0, [r4, #10]
   1d75c:	cmp	r0, #0
   1d760:	beq	1d89c <test_nested_buffer_first@@Base+0x32c>
   1d764:	ldr	r3, [r5, r0]
   1d768:	add	r0, r5, r0
   1d76c:	ldr	r1, [pc, #412]	; 1d910 <test_nested_buffer_first@@Base+0x3a0>
   1d770:	add	r3, r3, #4
   1d774:	add	r0, r0, r3
   1d778:	add	r1, pc, r1
   1d77c:	bl	128e4 <strcmp@plt>
   1d780:	cmp	r0, #0
   1d784:	bne	1d874 <test_nested_buffer_first@@Base+0x304>
   1d788:	cmp	r6, #31
   1d78c:	ldrh	r1, [r4, #8]
   1d790:	bls	1d848 <test_nested_buffer_first@@Base+0x2d8>
   1d794:	ldrh	r3, [r4, #30]
   1d798:	cmp	r3, #0
   1d79c:	beq	1d848 <test_nested_buffer_first@@Base+0x2d8>
   1d7a0:	ldr	r0, [r5, r3]
   1d7a4:	add	r3, r5, r3
   1d7a8:	add	r0, r0, #4
   1d7ac:	adds	r2, r3, r0
   1d7b0:	beq	1d848 <test_nested_buffer_first@@Base+0x2d8>
   1d7b4:	ldr	lr, [r2, #4]
   1d7b8:	movw	ip, #20301	; 0x4f4d
   1d7bc:	movt	ip, #21326	; 0x534e
   1d7c0:	cmp	lr, ip
   1d7c4:	bne	1d848 <test_nested_buffer_first@@Base+0x2d8>
   1d7c8:	ldr	r3, [r3, r0]
   1d7cc:	cmp	r1, #0
   1d7d0:	add	r0, r2, r3
   1d7d4:	beq	1d860 <test_nested_buffer_first@@Base+0x2f0>
   1d7d8:	ldrsh	r1, [r5, r1]
   1d7dc:	cmp	r1, #10
   1d7e0:	bne	1d860 <test_nested_buffer_first@@Base+0x2f0>
   1d7e4:	cmp	r0, #0
   1d7e8:	beq	1d85c <test_nested_buffer_first@@Base+0x2ec>
   1d7ec:	ldr	r3, [r2, r3]
   1d7f0:	sub	r3, r0, r3
   1d7f4:	ldrh	r2, [r3]
   1d7f8:	cmp	r2, #11
   1d7fc:	bls	1d89c <test_nested_buffer_first@@Base+0x32c>
   1d800:	ldrh	r2, [r3, #10]
   1d804:	cmp	r2, #0
   1d808:	beq	1d89c <test_nested_buffer_first@@Base+0x32c>
   1d80c:	ldr	r3, [r0, r2]
   1d810:	add	r0, r0, r2
   1d814:	add	r3, r3, #4
   1d818:	adds	r0, r0, r3
   1d81c:	beq	1d8c4 <test_nested_buffer_first@@Base+0x354>
   1d820:	ldr	r1, [pc, #236]	; 1d914 <test_nested_buffer_first@@Base+0x3a4>
   1d824:	add	r1, pc, r1
   1d828:	bl	128e4 <strcmp@plt>
   1d82c:	cmp	r0, #0
   1d830:	bne	1d888 <test_nested_buffer_first@@Base+0x318>
   1d834:	add	sp, sp, #8
   1d838:	ldrd	r4, [sp]
   1d83c:	ldr	r6, [sp, #8]
   1d840:	add	sp, sp, #12
   1d844:	pop	{pc}		; (ldr pc, [sp], #4)
   1d848:	cmp	r1, #0
   1d84c:	beq	1d860 <test_nested_buffer_first@@Base+0x2f0>
   1d850:	ldrsh	r3, [r5, r1]
   1d854:	cmp	r3, #10
   1d858:	bne	1d860 <test_nested_buffer_first@@Base+0x2f0>
   1d85c:	bl	132a8 <_start@@Base+0x6ec>
   1d860:	ldr	r0, [pc, #176]	; 1d918 <test_nested_buffer_first@@Base+0x3a8>
   1d864:	add	r0, pc, r0
   1d868:	bl	12944 <puts@plt>
   1d86c:	mvn	r0, #0
   1d870:	b	1d834 <test_nested_buffer_first@@Base+0x2c4>
   1d874:	ldr	r0, [pc, #160]	; 1d91c <test_nested_buffer_first@@Base+0x3ac>
   1d878:	add	r0, pc, r0
   1d87c:	bl	12944 <puts@plt>
   1d880:	mvn	r0, #0
   1d884:	b	1d834 <test_nested_buffer_first@@Base+0x2c4>
   1d888:	ldr	r0, [pc, #144]	; 1d920 <test_nested_buffer_first@@Base+0x3b0>
   1d88c:	add	r0, pc, r0
   1d890:	bl	12944 <puts@plt>
   1d894:	mvn	r0, #0
   1d898:	b	1d834 <test_nested_buffer_first@@Base+0x2c4>
   1d89c:	ldr	r3, [pc, #128]	; 1d924 <test_nested_buffer_first@@Base+0x3b4>
   1d8a0:	movw	r2, #699	; 0x2bb
   1d8a4:	ldr	r1, [pc, #124]	; 1d928 <test_nested_buffer_first@@Base+0x3b8>
   1d8a8:	ldr	r0, [pc, #124]	; 1d92c <test_nested_buffer_first@@Base+0x3bc>
   1d8ac:	add	r3, pc, r3
   1d8b0:	add	r3, r3, #524	; 0x20c
   1d8b4:	add	r1, pc, r1
   1d8b8:	add	r0, pc, r0
   1d8bc:	bl	129e0 <__assert_fail@plt>
   1d8c0:	bl	13668 <_start@@Base+0xaac>
   1d8c4:	ldr	r3, [pc, #100]	; 1d930 <test_nested_buffer_first@@Base+0x3c0>
   1d8c8:	movw	r2, #2241	; 0x8c1
   1d8cc:	ldr	r1, [pc, #96]	; 1d934 <test_nested_buffer_first@@Base+0x3c4>
   1d8d0:	ldr	r0, [pc, #96]	; 1d938 <test_nested_buffer_first@@Base+0x3c8>
   1d8d4:	add	r3, pc, r3
   1d8d8:	add	r3, r3, #1760	; 0x6e0
   1d8dc:	add	r1, pc, r1
   1d8e0:	add	r3, r3, #4
   1d8e4:	add	r0, pc, r0
   1d8e8:	bl	129e0 <__assert_fail@plt>
   1d8ec:	andeq	r8, r0, r0, lsr #11
   1d8f0:	andeq	ip, r1, r0, asr sl
   1d8f4:	andeq	r8, r0, r0, ror r5
   1d8f8:	muleq	r0, ip, r9
   1d8fc:	andeq	r7, r0, r0, asr #17
   1d900:	ldrdeq	r8, [r0], -r4
   1d904:	andeq	r7, r0, r0, lsr #16
   1d908:	andeq	r0, r0, r8, rrx
   1d90c:	andeq	sl, r0, ip, lsl #17
   1d910:	andeq	r8, r0, ip, ror #9
   1d914:	andeq	sl, r0, r8, ror #14
   1d918:	andeq	sl, r0, r8, ror #14
   1d91c:	andeq	sl, r0, r8, lsr r7
   1d920:	andeq	sl, r0, r0, lsl #15
   1d924:	andeq	r7, r0, r4, lsr r6
   1d928:	andeq	r7, r0, r0, lsr #27
   1d92c:	strdeq	r7, [r0], -r8
   1d930:	andeq	r7, r0, ip, lsl #12
   1d934:	ldrdeq	r8, [r0], -r0
   1d938:	andeq	sl, r0, ip, lsl #14

0001d93c <test_nested_buffer_using_nest@@Base>:
   1d93c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1d940:	mov	r4, r0
   1d944:	strd	r6, [sp, #8]
   1d948:	str	lr, [sp, #16]
   1d94c:	sub	sp, sp, #1040	; 0x410
   1d950:	sub	sp, sp, #4
   1d954:	ldr	r6, [pc, #1040]	; 1dd6c <test_nested_buffer_using_nest@@Base+0x430>
   1d958:	bl	1f250 <flatcc_builder_reset@@Base>
   1d95c:	ldr	r1, [pc, #1036]	; 1dd70 <test_nested_buffer_using_nest@@Base+0x434>
   1d960:	mov	r3, #0
   1d964:	mov	r0, r4
   1d968:	mov	r2, r3
   1d96c:	add	r6, pc, r6
   1d970:	add	r1, pc, r1
   1d974:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   1d978:	cmp	r0, #0
   1d97c:	bne	1d98c <test_nested_buffer_using_nest@@Base+0x50>
   1d980:	mov	r1, #36	; 0x24
   1d984:	mov	r0, r4
   1d988:	bl	20a20 <flatcc_builder_start_table@@Base>
   1d98c:	ldr	r1, [pc, #992]	; 1dd74 <test_nested_buffer_using_nest@@Base+0x438>
   1d990:	mov	r0, r4
   1d994:	add	r1, pc, r1
   1d998:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1d99c:	subs	r5, r0, #0
   1d9a0:	beq	1d9b8 <test_nested_buffer_using_nest@@Base+0x7c>
   1d9a4:	mov	r1, #3
   1d9a8:	mov	r0, r4
   1d9ac:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1d9b0:	cmp	r0, #0
   1d9b4:	strne	r5, [r0]
   1d9b8:	mov	r3, #2
   1d9bc:	mov	r1, #1
   1d9c0:	mov	r2, r3
   1d9c4:	mov	r0, r4
   1d9c8:	bl	22554 <flatcc_builder_table_add@@Base>
   1d9cc:	ldr	r1, [pc, #932]	; 1dd78 <test_nested_buffer_using_nest@@Base+0x43c>
   1d9d0:	cmp	r0, #0
   1d9d4:	mov	r2, #1
   1d9d8:	movne	r3, #42	; 0x2a
   1d9dc:	strhne	r3, [r0]
   1d9e0:	mov	r0, r4
   1d9e4:	add	r1, pc, r1
   1d9e8:	add	r1, r1, #1024	; 0x400
   1d9ec:	add	r1, r1, #4
   1d9f0:	bl	21358 <flatcc_builder_check_required@@Base>
   1d9f4:	cmp	r0, #0
   1d9f8:	beq	1dd44 <test_nested_buffer_using_nest@@Base+0x408>
   1d9fc:	mov	r0, r4
   1da00:	add	r5, sp, #16
   1da04:	bl	21404 <flatcc_builder_end_table@@Base>
   1da08:	mov	r1, r0
   1da0c:	mov	r0, r4
   1da10:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   1da14:	mov	r0, r4
   1da18:	bl	22c70 <flatcc_builder_get_buffer_size@@Base>
   1da1c:	mov	r7, r0
   1da20:	mov	r1, r5
   1da24:	mov	r2, #1024	; 0x400
   1da28:	mov	r0, r4
   1da2c:	bl	22d58 <flatcc_builder_copy_buffer@@Base>
   1da30:	cmp	r0, #0
   1da34:	beq	1dd0c <test_nested_buffer_using_nest@@Base+0x3d0>
   1da38:	mov	r0, r4
   1da3c:	bl	1f250 <flatcc_builder_reset@@Base>
   1da40:	ldr	r1, [pc, #820]	; 1dd7c <test_nested_buffer_using_nest@@Base+0x440>
   1da44:	mov	r3, #0
   1da48:	mov	r0, r4
   1da4c:	mov	r2, r3
   1da50:	add	r1, pc, r1
   1da54:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   1da58:	cmp	r0, #0
   1da5c:	bne	1da6c <test_nested_buffer_using_nest@@Base+0x130>
   1da60:	mov	r1, #36	; 0x24
   1da64:	mov	r0, r4
   1da68:	bl	20a20 <flatcc_builder_start_table@@Base>
   1da6c:	mvn	ip, #0
   1da70:	mov	r1, #8
   1da74:	mov	r2, r7
   1da78:	mov	r3, #1
   1da7c:	mov	r0, r4
   1da80:	stm	sp, {r1, ip}
   1da84:	mov	r1, r5
   1da88:	bl	215d4 <flatcc_builder_create_vector@@Base>
   1da8c:	subs	r7, r0, #0
   1da90:	beq	1daa8 <test_nested_buffer_using_nest@@Base+0x16c>
   1da94:	mov	r1, #13
   1da98:	mov	r0, r4
   1da9c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1daa0:	cmp	r0, #0
   1daa4:	strne	r7, [r0]
   1daa8:	mov	r3, #2
   1daac:	mov	r0, r4
   1dab0:	mov	r1, r3
   1dab4:	mov	r2, r3
   1dab8:	bl	22554 <flatcc_builder_table_add@@Base>
   1dabc:	ldr	r1, [pc, #700]	; 1dd80 <test_nested_buffer_using_nest@@Base+0x444>
   1dac0:	cmp	r0, #0
   1dac4:	movne	r3, #10
   1dac8:	strhne	r3, [r0]
   1dacc:	mov	r0, r4
   1dad0:	add	r1, pc, r1
   1dad4:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1dad8:	subs	r7, r0, #0
   1dadc:	beq	1daf4 <test_nested_buffer_using_nest@@Base+0x1b8>
   1dae0:	mov	r1, #3
   1dae4:	mov	r0, r4
   1dae8:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1daec:	cmp	r0, #0
   1daf0:	strne	r7, [r0]
   1daf4:	ldr	r1, [pc, #648]	; 1dd84 <test_nested_buffer_using_nest@@Base+0x448>
   1daf8:	mov	r2, #1
   1dafc:	mov	r0, r4
   1db00:	add	r1, pc, r1
   1db04:	add	r1, r1, #1024	; 0x400
   1db08:	add	r1, r1, #4
   1db0c:	bl	21358 <flatcc_builder_check_required@@Base>
   1db10:	cmp	r0, #0
   1db14:	beq	1dd44 <test_nested_buffer_using_nest@@Base+0x408>
   1db18:	mov	r0, r4
   1db1c:	bl	21404 <flatcc_builder_end_table@@Base>
   1db20:	mov	r1, r0
   1db24:	mov	r0, r4
   1db28:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   1db2c:	sub	r1, r5, #4
   1db30:	mov	r0, r4
   1db34:	bl	22d14 <flatcc_builder_get_direct_buffer@@Base>
   1db38:	ldr	r3, [pc, #584]	; 1dd88 <test_nested_buffer_using_nest@@Base+0x44c>
   1db3c:	mov	r4, r0
   1db40:	mov	r1, r0
   1db44:	ldr	r0, [pc, #576]	; 1dd8c <test_nested_buffer_using_nest@@Base+0x450>
   1db48:	ldr	r2, [sp, #12]
   1db4c:	ldr	r3, [r6, r3]
   1db50:	add	r0, pc, r0
   1db54:	ldr	r3, [r3]
   1db58:	bl	12cd8 <_start@@Base+0x11c>
   1db5c:	cmp	r4, #0
   1db60:	beq	1dcb8 <test_nested_buffer_using_nest@@Base+0x37c>
   1db64:	ldr	r2, [r4, #4]
   1db68:	movw	r3, #20301	; 0x4f4d
   1db6c:	movt	r3, #21326	; 0x534e
   1db70:	cmp	r2, r3
   1db74:	bne	1dcb8 <test_nested_buffer_using_nest@@Base+0x37c>
   1db78:	ldr	r3, [r4]
   1db7c:	adds	r5, r4, r3
   1db80:	beq	1dcb8 <test_nested_buffer_using_nest@@Base+0x37c>
   1db84:	ldr	r4, [r4, r3]
   1db88:	sub	r4, r5, r4
   1db8c:	ldrh	r6, [r4]
   1db90:	cmp	r6, #11
   1db94:	bls	1dd20 <test_nested_buffer_using_nest@@Base+0x3e4>
   1db98:	ldrh	r0, [r4, #10]
   1db9c:	cmp	r0, #0
   1dba0:	beq	1dd20 <test_nested_buffer_using_nest@@Base+0x3e4>
   1dba4:	ldr	r3, [r5, r0]
   1dba8:	add	r0, r5, r0
   1dbac:	ldr	r1, [pc, #476]	; 1dd90 <test_nested_buffer_using_nest@@Base+0x454>
   1dbb0:	add	r3, r3, #4
   1dbb4:	add	r0, r0, r3
   1dbb8:	add	r1, pc, r1
   1dbbc:	bl	128e4 <strcmp@plt>
   1dbc0:	cmp	r0, #0
   1dbc4:	bne	1dcd0 <test_nested_buffer_using_nest@@Base+0x394>
   1dbc8:	cmp	r6, #31
   1dbcc:	ldrh	r1, [r4, #8]
   1dbd0:	bls	1dca4 <test_nested_buffer_using_nest@@Base+0x368>
   1dbd4:	ldrh	r3, [r4, #30]
   1dbd8:	cmp	r3, #0
   1dbdc:	beq	1dca4 <test_nested_buffer_using_nest@@Base+0x368>
   1dbe0:	ldr	r0, [r5, r3]
   1dbe4:	add	r3, r5, r3
   1dbe8:	add	r0, r0, #4
   1dbec:	adds	r2, r3, r0
   1dbf0:	beq	1dca4 <test_nested_buffer_using_nest@@Base+0x368>
   1dbf4:	ldr	lr, [r2, #4]
   1dbf8:	movw	ip, #20301	; 0x4f4d
   1dbfc:	movt	ip, #21326	; 0x534e
   1dc00:	cmp	lr, ip
   1dc04:	bne	1dca4 <test_nested_buffer_using_nest@@Base+0x368>
   1dc08:	ldr	r3, [r3, r0]
   1dc0c:	cmp	r1, #0
   1dc10:	add	r6, r2, r3
   1dc14:	beq	1dcbc <test_nested_buffer_using_nest@@Base+0x380>
   1dc18:	ldrsh	r1, [r5, r1]
   1dc1c:	cmp	r1, #10
   1dc20:	bne	1dcbc <test_nested_buffer_using_nest@@Base+0x380>
   1dc24:	cmp	r6, #0
   1dc28:	beq	1dcb8 <test_nested_buffer_using_nest@@Base+0x37c>
   1dc2c:	ldr	r4, [r2, r3]
   1dc30:	sub	r4, r6, r4
   1dc34:	ldrh	r3, [r4]
   1dc38:	cmp	r3, #11
   1dc3c:	bls	1dd20 <test_nested_buffer_using_nest@@Base+0x3e4>
   1dc40:	ldrh	r0, [r4, #10]
   1dc44:	cmp	r0, #0
   1dc48:	beq	1dd20 <test_nested_buffer_using_nest@@Base+0x3e4>
   1dc4c:	ldr	r3, [r6, r0]
   1dc50:	add	r0, r6, r0
   1dc54:	add	r3, r3, #4
   1dc58:	adds	r0, r0, r3
   1dc5c:	beq	1dd48 <test_nested_buffer_using_nest@@Base+0x40c>
   1dc60:	ldr	r1, [pc, #300]	; 1dd94 <test_nested_buffer_using_nest@@Base+0x458>
   1dc64:	add	r1, pc, r1
   1dc68:	bl	128e4 <strcmp@plt>
   1dc6c:	cmp	r0, #0
   1dc70:	bne	1dce4 <test_nested_buffer_using_nest@@Base+0x3a8>
   1dc74:	ldrh	r3, [r4, #6]
   1dc78:	cmp	r3, #0
   1dc7c:	beq	1dcf8 <test_nested_buffer_using_nest@@Base+0x3bc>
   1dc80:	ldrsh	r3, [r6, r3]
   1dc84:	cmp	r3, #42	; 0x2a
   1dc88:	bne	1dcf8 <test_nested_buffer_using_nest@@Base+0x3bc>
   1dc8c:	add	sp, sp, #1040	; 0x410
   1dc90:	add	sp, sp, #4
   1dc94:	ldrd	r4, [sp]
   1dc98:	ldrd	r6, [sp, #8]
   1dc9c:	add	sp, sp, #16
   1dca0:	pop	{pc}		; (ldr pc, [sp], #4)
   1dca4:	cmp	r1, #0
   1dca8:	beq	1dcbc <test_nested_buffer_using_nest@@Base+0x380>
   1dcac:	ldrsh	r3, [r5, r1]
   1dcb0:	cmp	r3, #10
   1dcb4:	bne	1dcbc <test_nested_buffer_using_nest@@Base+0x380>
   1dcb8:	bl	132a8 <_start@@Base+0x6ec>
   1dcbc:	ldr	r0, [pc, #212]	; 1dd98 <test_nested_buffer_using_nest@@Base+0x45c>
   1dcc0:	add	r0, pc, r0
   1dcc4:	bl	12944 <puts@plt>
   1dcc8:	mvn	r0, #0
   1dccc:	b	1dc8c <test_nested_buffer_using_nest@@Base+0x350>
   1dcd0:	ldr	r0, [pc, #196]	; 1dd9c <test_nested_buffer_using_nest@@Base+0x460>
   1dcd4:	add	r0, pc, r0
   1dcd8:	bl	12944 <puts@plt>
   1dcdc:	mvn	r0, #0
   1dce0:	b	1dc8c <test_nested_buffer_using_nest@@Base+0x350>
   1dce4:	ldr	r0, [pc, #180]	; 1dda0 <test_nested_buffer_using_nest@@Base+0x464>
   1dce8:	add	r0, pc, r0
   1dcec:	bl	12944 <puts@plt>
   1dcf0:	mvn	r0, #0
   1dcf4:	b	1dc8c <test_nested_buffer_using_nest@@Base+0x350>
   1dcf8:	ldr	r0, [pc, #164]	; 1dda4 <test_nested_buffer_using_nest@@Base+0x468>
   1dcfc:	add	r0, pc, r0
   1dd00:	bl	12944 <puts@plt>
   1dd04:	mvn	r0, #0
   1dd08:	b	1dc8c <test_nested_buffer_using_nest@@Base+0x350>
   1dd0c:	ldr	r0, [pc, #148]	; 1dda8 <test_nested_buffer_using_nest@@Base+0x46c>
   1dd10:	add	r0, pc, r0
   1dd14:	bl	12944 <puts@plt>
   1dd18:	mvn	r0, #0
   1dd1c:	b	1dc8c <test_nested_buffer_using_nest@@Base+0x350>
   1dd20:	ldr	r3, [pc, #132]	; 1ddac <test_nested_buffer_using_nest@@Base+0x470>
   1dd24:	movw	r2, #699	; 0x2bb
   1dd28:	ldr	r1, [pc, #128]	; 1ddb0 <test_nested_buffer_using_nest@@Base+0x474>
   1dd2c:	ldr	r0, [pc, #128]	; 1ddb4 <test_nested_buffer_using_nest@@Base+0x478>
   1dd30:	add	r3, pc, r3
   1dd34:	add	r3, r3, #524	; 0x20c
   1dd38:	add	r1, pc, r1
   1dd3c:	add	r0, pc, r0
   1dd40:	bl	129e0 <__assert_fail@plt>
   1dd44:	bl	13668 <_start@@Base+0xaac>
   1dd48:	ldr	r3, [pc, #104]	; 1ddb8 <test_nested_buffer_using_nest@@Base+0x47c>
   1dd4c:	movw	r2, #2298	; 0x8fa
   1dd50:	ldr	r1, [pc, #100]	; 1ddbc <test_nested_buffer_using_nest@@Base+0x480>
   1dd54:	ldr	r0, [pc, #100]	; 1ddc0 <test_nested_buffer_using_nest@@Base+0x484>
   1dd58:	add	r3, pc, r3
   1dd5c:	add	r3, r3, #1792	; 0x700
   1dd60:	add	r1, pc, r1
   1dd64:	add	r0, pc, r0
   1dd68:	bl	129e0 <__assert_fail@plt>
   1dd6c:	andeq	ip, r1, ip, lsl #13
   1dd70:	andeq	r8, r0, ip, asr #3
   1dd74:	strdeq	sl, [r0], -r8
   1dd78:	strdeq	r7, [r0], -ip
   1dd7c:	andeq	r8, r0, ip, ror #1
   1dd80:	muleq	r0, r4, r1
   1dd84:	andeq	r7, r0, r0, ror #7
   1dd88:	andeq	r0, r0, r8, rrx
   1dd8c:	strdeq	sl, [r0], -r8
   1dd90:	andeq	r8, r0, ip, lsr #1
   1dd94:	andeq	sl, r0, r8, lsr #6
   1dd98:	andeq	sl, r0, ip, lsl #6
   1dd9c:	ldrdeq	sl, [r0], -ip
   1dda0:	andeq	sl, r0, r4, lsr #6
   1dda4:	andeq	sl, r0, r0, ror r3
   1dda8:	andeq	sl, r0, ip, lsl r3
   1ddac:			; <UNDEFINED> instruction: 0x000071b0
   1ddb0:	andeq	r7, r0, ip, lsl r9
   1ddb4:	andeq	r7, r0, r4, ror sl
   1ddb8:	andeq	r7, r0, r8, lsl #3
   1ddbc:	andeq	r8, r0, ip, asr #10
   1ddc0:	andeq	sl, r0, ip, lsl #5

0001ddc4 <verify_include@@Base>:
   1ddc4:	mov	r0, #0
   1ddc8:	bx	lr

0001ddcc <test_struct_buffer@@Base>:
   1ddcc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1ddd0:	mov	r4, r0
   1ddd4:	strd	r6, [sp, #8]
   1ddd8:	ldr	r6, [pc, #588]	; 1e02c <test_struct_buffer@@Base+0x260>
   1dddc:	strd	r8, [sp, #16]
   1dde0:	str	lr, [sp, #24]
   1dde4:	sub	sp, sp, #116	; 0x74
   1dde8:	bl	1f250 <flatcc_builder_reset@@Base>
   1ddec:	mov	r0, r4
   1ddf0:	mov	r2, #16
   1ddf4:	mov	r1, #32
   1ddf8:	add	r6, pc, r6
   1ddfc:	bl	1fc74 <flatcc_builder_start_struct@@Base>
   1de00:	subs	r3, r0, #0
   1de04:	beq	1de5c <test_struct_buffer@@Base+0x90>
   1de08:	mov	r2, #8
   1de0c:	mov	ip, #1065353216	; 0x3f800000
   1de10:	mov	r0, #1073741824	; 0x40000000
   1de14:	movw	lr, #2730	; 0xaaa
   1de18:	mvn	r1, #16
   1de1c:	movw	r8, #52429	; 0xcccd
   1de20:	movt	r8, #52428	; 0xcccc
   1de24:	movw	r9, #52428	; 0xcccc
   1de28:	movt	r9, #16400	; 0x4010
   1de2c:	str	ip, [r3]
   1de30:	strb	r2, [r3, #24]
   1de34:	mov	r2, #0
   1de38:	movt	r2, #16448	; 0x4040
   1de3c:	str	r0, [r3, #4]
   1de40:	mov	r0, r4
   1de44:	str	r2, [r3, #8]
   1de48:	strd	r8, [r3, #16]
   1de4c:	strh	lr, [r3, #26]
   1de50:	strb	r1, [r3, #28]
   1de54:	bl	1fd38 <flatcc_builder_end_struct@@Base>
   1de58:	mov	r3, r0
   1de5c:	ldr	r1, [pc, #460]	; 1e030 <test_struct_buffer@@Base+0x264>
   1de60:	mov	ip, #0
   1de64:	mov	r0, #16
   1de68:	mov	r2, ip
   1de6c:	stm	sp, {r0, ip}
   1de70:	mov	r0, r4
   1de74:	add	r1, pc, r1
   1de78:	bl	1f698 <flatcc_builder_create_buffer@@Base>
   1de7c:	mov	r0, r4
   1de80:	bl	22c70 <flatcc_builder_get_buffer_size@@Base>
   1de84:	cmp	r0, #48	; 0x30
   1de88:	bne	1dff4 <test_struct_buffer@@Base+0x228>
   1de8c:	mov	r1, r0
   1de90:	ldr	r0, [pc, #412]	; 1e034 <test_struct_buffer@@Base+0x268>
   1de94:	add	r0, pc, r0
   1de98:	bl	128f0 <printf@plt>
   1de9c:	mov	r0, r4
   1dea0:	bl	22fb0 <flatcc_builder_get_emit_context@@Base>
   1dea4:	ldr	r7, [r0, #24]
   1dea8:	cmp	r7, #48	; 0x30
   1deac:	bne	1dfd0 <test_struct_buffer@@Base+0x204>
   1deb0:	add	r5, sp, #12
   1deb4:	mov	r0, r4
   1deb8:	mov	r1, r5
   1debc:	mov	r2, #100	; 0x64
   1dec0:	bl	22d58 <flatcc_builder_copy_buffer@@Base>
   1dec4:	cmp	r0, #0
   1dec8:	beq	1dfbc <test_struct_buffer@@Base+0x1f0>
   1decc:	ldr	r3, [pc, #356]	; 1e038 <test_struct_buffer@@Base+0x26c>
   1ded0:	mov	r2, r7
   1ded4:	mov	r1, r5
   1ded8:	ldr	r0, [pc, #348]	; 1e03c <test_struct_buffer@@Base+0x270>
   1dedc:	ldr	r3, [r6, r3]
   1dee0:	add	r0, pc, r0
   1dee4:	ldr	r3, [r3]
   1dee8:	bl	12cd8 <_start@@Base+0x11c>
   1deec:	ldr	r2, [sp, #16]
   1def0:	movw	r3, #20301	; 0x4f4d
   1def4:	movt	r3, #21326	; 0x534e
   1def8:	cmp	r2, r3
   1defc:	beq	1df28 <test_struct_buffer@@Base+0x15c>
   1df00:	ldr	r0, [pc, #312]	; 1e040 <test_struct_buffer@@Base+0x274>
   1df04:	add	r0, pc, r0
   1df08:	bl	12944 <puts@plt>
   1df0c:	mvn	r0, #0
   1df10:	add	sp, sp, #116	; 0x74
   1df14:	ldrd	r4, [sp]
   1df18:	ldrd	r6, [sp, #8]
   1df1c:	ldrd	r8, [sp, #16]
   1df20:	add	sp, sp, #24
   1df24:	pop	{pc}		; (ldr pc, [sp], #4)
   1df28:	ldr	r3, [sp, #12]
   1df2c:	vldr	s15, [pc, #236]	; 1e020 <test_struct_buffer@@Base+0x254>
   1df30:	add	r5, r5, r3
   1df34:	vldr	s14, [r5]
   1df38:	vcmp.f32	s14, s15
   1df3c:	vmrs	APSR_nzcv, fpscr
   1df40:	bne	1dfa8 <test_struct_buffer@@Base+0x1dc>
   1df44:	vldr	s15, [pc, #216]	; 1e024 <test_struct_buffer@@Base+0x258>
   1df48:	vldr	s14, [r5, #4]
   1df4c:	vcmp.f32	s14, s15
   1df50:	vmrs	APSR_nzcv, fpscr
   1df54:	bne	1dfa8 <test_struct_buffer@@Base+0x1dc>
   1df58:	vldr	s15, [pc, #200]	; 1e028 <test_struct_buffer@@Base+0x25c>
   1df5c:	vldr	s14, [r5, #8]
   1df60:	vcmp.f32	s14, s15
   1df64:	vmrs	APSR_nzcv, fpscr
   1df68:	bne	1dfa8 <test_struct_buffer@@Base+0x1dc>
   1df6c:	vldr	d7, [pc, #164]	; 1e018 <test_struct_buffer@@Base+0x24c>
   1df70:	vldr	d6, [r5, #16]
   1df74:	vcmp.f64	d6, d7
   1df78:	vmrs	APSR_nzcv, fpscr
   1df7c:	bne	1dfa8 <test_struct_buffer@@Base+0x1dc>
   1df80:	ldr	r3, [r5, #24]
   1df84:	mov	r2, #8
   1df88:	movt	r2, #2730	; 0xaaa
   1df8c:	bic	r3, r3, #65280	; 0xff00
   1df90:	cmp	r3, r2
   1df94:	bne	1dfa8 <test_struct_buffer@@Base+0x1dc>
   1df98:	ldrsb	r3, [r5, #28]
   1df9c:	cmn	r3, #17
   1dfa0:	moveq	r0, #0
   1dfa4:	beq	1df10 <test_struct_buffer@@Base+0x144>
   1dfa8:	ldr	r0, [pc, #148]	; 1e044 <test_struct_buffer@@Base+0x278>
   1dfac:	add	r0, pc, r0
   1dfb0:	bl	12944 <puts@plt>
   1dfb4:	mvn	r0, #0
   1dfb8:	b	1df10 <test_struct_buffer@@Base+0x144>
   1dfbc:	ldr	r0, [pc, #132]	; 1e048 <test_struct_buffer@@Base+0x27c>
   1dfc0:	add	r0, pc, r0
   1dfc4:	bl	12944 <puts@plt>
   1dfc8:	mvn	r0, #0
   1dfcc:	b	1df10 <test_struct_buffer@@Base+0x144>
   1dfd0:	ldr	r3, [pc, #116]	; 1e04c <test_struct_buffer@@Base+0x280>
   1dfd4:	movw	r2, #2341	; 0x925
   1dfd8:	ldr	r1, [pc, #112]	; 1e050 <test_struct_buffer@@Base+0x284>
   1dfdc:	ldr	r0, [pc, #112]	; 1e054 <test_struct_buffer@@Base+0x288>
   1dfe0:	add	r3, pc, r3
   1dfe4:	add	r3, r3, #1824	; 0x720
   1dfe8:	add	r1, pc, r1
   1dfec:	add	r0, pc, r0
   1dff0:	bl	129e0 <__assert_fail@plt>
   1dff4:	ldr	r3, [pc, #92]	; 1e058 <test_struct_buffer@@Base+0x28c>
   1dff8:	movw	r2, #2339	; 0x923
   1dffc:	ldr	r1, [pc, #88]	; 1e05c <test_struct_buffer@@Base+0x290>
   1e000:	ldr	r0, [pc, #88]	; 1e060 <test_struct_buffer@@Base+0x294>
   1e004:	add	r3, pc, r3
   1e008:	add	r3, r3, #1824	; 0x720
   1e00c:	add	r1, pc, r1
   1e010:	add	r0, pc, r0
   1e014:	bl	129e0 <__assert_fail@plt>
   1e018:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1e01c:	andsmi	ip, r0, ip, asr #25
   1e020:	svccc	0x00800000
   1e024:	andmi	r0, r0, r0
   1e028:	submi	r0, r0, r0
   1e02c:	andeq	ip, r1, r0, lsl #4
   1e030:	andeq	r7, r0, r8, asr #25
   1e034:	andeq	sl, r0, r8, lsl #4
   1e038:	andeq	r0, r0, r8, rrx
   1e03c:	andeq	sl, r0, r4, lsr r2
   1e040:	andeq	sl, r0, r4, lsr #4
   1e044:	andeq	sl, r0, r0, lsr #3
   1e048:	andeq	sl, r0, r8, asr #2
   1e04c:	andeq	r6, r0, r0, lsl #30
   1e050:	andeq	r8, r0, r4, asr #5
   1e054:	ldrdeq	sl, [r0], -r0
   1e058:	ldrdeq	r6, [r0], -ip
   1e05c:	andeq	r8, r0, r0, lsr #5
   1e060:	andeq	sl, r0, r0, lsl #1

0001e064 <test_typed_struct_buffer@@Base>:
   1e064:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1e068:	mov	r4, r0
   1e06c:	strd	r6, [sp, #8]
   1e070:	ldr	r7, [pc, #764]	; 1e374 <test_typed_struct_buffer@@Base+0x310>
   1e074:	strd	r8, [sp, #16]
   1e078:	str	lr, [sp, #24]
   1e07c:	sub	sp, sp, #116	; 0x74
   1e080:	bl	1f250 <flatcc_builder_reset@@Base>
   1e084:	mov	r0, r4
   1e088:	mov	r2, #16
   1e08c:	mov	r1, #32
   1e090:	add	r7, pc, r7
   1e094:	bl	1fc74 <flatcc_builder_start_struct@@Base>
   1e098:	subs	r3, r0, #0
   1e09c:	beq	1e0f4 <test_typed_struct_buffer@@Base+0x90>
   1e0a0:	mov	r2, #8
   1e0a4:	mov	ip, #1065353216	; 0x3f800000
   1e0a8:	mov	r0, #1073741824	; 0x40000000
   1e0ac:	movw	lr, #2730	; 0xaaa
   1e0b0:	mvn	r1, #16
   1e0b4:	movw	r8, #52429	; 0xcccd
   1e0b8:	movt	r8, #52428	; 0xcccc
   1e0bc:	movw	r9, #52428	; 0xcccc
   1e0c0:	movt	r9, #16400	; 0x4010
   1e0c4:	str	ip, [r3]
   1e0c8:	strb	r2, [r3, #24]
   1e0cc:	mov	r2, #0
   1e0d0:	movt	r2, #16448	; 0x4040
   1e0d4:	str	r0, [r3, #4]
   1e0d8:	mov	r0, r4
   1e0dc:	str	r2, [r3, #8]
   1e0e0:	strd	r8, [r3, #16]
   1e0e4:	strh	lr, [r3, #26]
   1e0e8:	strb	r1, [r3, #28]
   1e0ec:	bl	1fd38 <flatcc_builder_end_struct@@Base>
   1e0f0:	mov	r3, r0
   1e0f4:	ldr	r1, [pc, #636]	; 1e378 <test_typed_struct_buffer@@Base+0x314>
   1e0f8:	mov	ip, #0
   1e0fc:	mov	r8, #16
   1e100:	mov	r2, ip
   1e104:	mov	r0, r4
   1e108:	stm	sp, {r8, ip}
   1e10c:	add	r1, pc, r1
   1e110:	bl	1f698 <flatcc_builder_create_buffer@@Base>
   1e114:	mov	r0, r4
   1e118:	bl	22c70 <flatcc_builder_get_buffer_size@@Base>
   1e11c:	cmp	r0, #48	; 0x30
   1e120:	bne	1e334 <test_typed_struct_buffer@@Base+0x2d0>
   1e124:	mov	r1, r0
   1e128:	ldr	r0, [pc, #588]	; 1e37c <test_typed_struct_buffer@@Base+0x318>
   1e12c:	add	r0, pc, r0
   1e130:	bl	128f0 <printf@plt>
   1e134:	mov	r0, r4
   1e138:	bl	22fb0 <flatcc_builder_get_emit_context@@Base>
   1e13c:	ldr	r6, [r0, #24]
   1e140:	cmp	r6, #48	; 0x30
   1e144:	bne	1e30c <test_typed_struct_buffer@@Base+0x2a8>
   1e148:	add	r5, sp, #12
   1e14c:	mov	r0, r4
   1e150:	mov	r1, r5
   1e154:	mov	r2, #100	; 0x64
   1e158:	bl	22d58 <flatcc_builder_copy_buffer@@Base>
   1e15c:	cmp	r0, #0
   1e160:	beq	1e2bc <test_typed_struct_buffer@@Base+0x258>
   1e164:	ldr	r3, [pc, #532]	; 1e380 <test_typed_struct_buffer@@Base+0x31c>
   1e168:	mov	r2, r6
   1e16c:	mov	r1, r5
   1e170:	ldr	r0, [pc, #524]	; 1e384 <test_typed_struct_buffer@@Base+0x320>
   1e174:	ldr	r3, [r7, r3]
   1e178:	add	r0, pc, r0
   1e17c:	ldr	r3, [r3]
   1e180:	bl	12cd8 <_start@@Base+0x11c>
   1e184:	ldr	r4, [sp, #16]
   1e188:	movw	r3, #16082	; 0x3ed2
   1e18c:	movt	r3, #43253	; 0xa8f5
   1e190:	cmp	r4, r3
   1e194:	beq	1e1c0 <test_typed_struct_buffer@@Base+0x15c>
   1e198:	ldr	r0, [pc, #488]	; 1e388 <test_typed_struct_buffer@@Base+0x324>
   1e19c:	add	r0, pc, r0
   1e1a0:	bl	12944 <puts@plt>
   1e1a4:	mvn	r0, #0
   1e1a8:	add	sp, sp, #116	; 0x74
   1e1ac:	ldrd	r4, [sp]
   1e1b0:	ldrd	r6, [sp, #8]
   1e1b4:	ldrd	r8, [sp, #16]
   1e1b8:	add	sp, sp, #24
   1e1bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e1c0:	ldr	r3, [sp, #12]
   1e1c4:	cmn	r5, r3
   1e1c8:	beq	1e2e4 <test_typed_struct_buffer@@Base+0x280>
   1e1cc:	mov	r3, #32
   1e1d0:	mov	r2, r4
   1e1d4:	str	r8, [sp]
   1e1d8:	mov	r1, r6
   1e1dc:	mov	r0, r5
   1e1e0:	bl	244c4 <flatcc_verify_struct_as_typed_root@@Base>
   1e1e4:	cmp	r0, #0
   1e1e8:	bne	1e2d0 <test_typed_struct_buffer@@Base+0x26c>
   1e1ec:	ldr	r2, [sp, #16]
   1e1f0:	cmp	r2, r4
   1e1f4:	beq	1e20c <test_typed_struct_buffer@@Base+0x1a8>
   1e1f8:	ldr	r0, [pc, #396]	; 1e38c <test_typed_struct_buffer@@Base+0x328>
   1e1fc:	add	r0, pc, r0
   1e200:	bl	12944 <puts@plt>
   1e204:	mvn	r0, #0
   1e208:	b	1e1a8 <test_typed_struct_buffer@@Base+0x144>
   1e20c:	ldr	r4, [sp, #12]
   1e210:	adds	r4, r5, r4
   1e214:	beq	1e1f8 <test_typed_struct_buffer@@Base+0x194>
   1e218:	mov	r1, r6
   1e21c:	mov	r0, r5
   1e220:	str	r8, [sp]
   1e224:	mov	r3, #32
   1e228:	bl	244c4 <flatcc_verify_struct_as_typed_root@@Base>
   1e22c:	cmp	r0, #0
   1e230:	bne	1e2f8 <test_typed_struct_buffer@@Base+0x294>
   1e234:	vldr	s15, [pc, #300]	; 1e368 <test_typed_struct_buffer@@Base+0x304>
   1e238:	vldr	s14, [r4]
   1e23c:	vcmp.f32	s14, s15
   1e240:	vmrs	APSR_nzcv, fpscr
   1e244:	bne	1e2a8 <test_typed_struct_buffer@@Base+0x244>
   1e248:	vldr	s15, [pc, #284]	; 1e36c <test_typed_struct_buffer@@Base+0x308>
   1e24c:	vldr	s14, [r4, #4]
   1e250:	vcmp.f32	s14, s15
   1e254:	vmrs	APSR_nzcv, fpscr
   1e258:	bne	1e2a8 <test_typed_struct_buffer@@Base+0x244>
   1e25c:	vldr	s15, [pc, #268]	; 1e370 <test_typed_struct_buffer@@Base+0x30c>
   1e260:	vldr	s14, [r4, #8]
   1e264:	vcmp.f32	s14, s15
   1e268:	vmrs	APSR_nzcv, fpscr
   1e26c:	bne	1e2a8 <test_typed_struct_buffer@@Base+0x244>
   1e270:	vldr	d7, [pc, #232]	; 1e360 <test_typed_struct_buffer@@Base+0x2fc>
   1e274:	vldr	d6, [r4, #16]
   1e278:	vcmp.f64	d6, d7
   1e27c:	vmrs	APSR_nzcv, fpscr
   1e280:	bne	1e2a8 <test_typed_struct_buffer@@Base+0x244>
   1e284:	ldr	r3, [r4, #24]
   1e288:	mov	r2, #8
   1e28c:	movt	r2, #2730	; 0xaaa
   1e290:	bic	r3, r3, #65280	; 0xff00
   1e294:	cmp	r3, r2
   1e298:	bne	1e2a8 <test_typed_struct_buffer@@Base+0x244>
   1e29c:	ldrsb	r3, [r4, #28]
   1e2a0:	cmn	r3, #17
   1e2a4:	beq	1e1a8 <test_typed_struct_buffer@@Base+0x144>
   1e2a8:	ldr	r0, [pc, #224]	; 1e390 <test_typed_struct_buffer@@Base+0x32c>
   1e2ac:	add	r0, pc, r0
   1e2b0:	bl	12944 <puts@plt>
   1e2b4:	mvn	r0, #0
   1e2b8:	b	1e1a8 <test_typed_struct_buffer@@Base+0x144>
   1e2bc:	ldr	r0, [pc, #208]	; 1e394 <test_typed_struct_buffer@@Base+0x330>
   1e2c0:	add	r0, pc, r0
   1e2c4:	bl	12944 <puts@plt>
   1e2c8:	mvn	r0, #0
   1e2cc:	b	1e1a8 <test_typed_struct_buffer@@Base+0x144>
   1e2d0:	ldr	r0, [pc, #192]	; 1e398 <test_typed_struct_buffer@@Base+0x334>
   1e2d4:	add	r0, pc, r0
   1e2d8:	bl	12944 <puts@plt>
   1e2dc:	mvn	r0, #0
   1e2e0:	b	1e1a8 <test_typed_struct_buffer@@Base+0x144>
   1e2e4:	ldr	r0, [pc, #176]	; 1e39c <test_typed_struct_buffer@@Base+0x338>
   1e2e8:	add	r0, pc, r0
   1e2ec:	bl	12944 <puts@plt>
   1e2f0:	mvn	r0, #0
   1e2f4:	b	1e1a8 <test_typed_struct_buffer@@Base+0x144>
   1e2f8:	ldr	r0, [pc, #160]	; 1e3a0 <test_typed_struct_buffer@@Base+0x33c>
   1e2fc:	add	r0, pc, r0
   1e300:	bl	12944 <puts@plt>
   1e304:	mvn	r0, #0
   1e308:	b	1e1a8 <test_typed_struct_buffer@@Base+0x144>
   1e30c:	ldr	r3, [pc, #144]	; 1e3a4 <test_typed_struct_buffer@@Base+0x340>
   1e310:	movw	r2, #2390	; 0x956
   1e314:	ldr	r1, [pc, #140]	; 1e3a8 <test_typed_struct_buffer@@Base+0x344>
   1e318:	ldr	r0, [pc, #140]	; 1e3ac <test_typed_struct_buffer@@Base+0x348>
   1e31c:	add	r3, pc, r3
   1e320:	add	r3, r3, #1840	; 0x730
   1e324:	add	r1, pc, r1
   1e328:	add	r3, r3, #4
   1e32c:	add	r0, pc, r0
   1e330:	bl	129e0 <__assert_fail@plt>
   1e334:	ldr	r3, [pc, #116]	; 1e3b0 <test_typed_struct_buffer@@Base+0x34c>
   1e338:	movw	r2, #2388	; 0x954
   1e33c:	ldr	r1, [pc, #112]	; 1e3b4 <test_typed_struct_buffer@@Base+0x350>
   1e340:	ldr	r0, [pc, #112]	; 1e3b8 <test_typed_struct_buffer@@Base+0x354>
   1e344:	add	r3, pc, r3
   1e348:	add	r3, r3, #1840	; 0x730
   1e34c:	add	r1, pc, r1
   1e350:	add	r3, r3, #4
   1e354:	add	r0, pc, r0
   1e358:	bl	129e0 <__assert_fail@plt>
   1e35c:	nop	{0}
   1e360:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1e364:	andsmi	ip, r0, ip, asr #25
   1e368:	svccc	0x00800000
   1e36c:	andmi	r0, r0, r0
   1e370:	submi	r0, r0, r0
   1e374:	andeq	fp, r1, r8, ror #30
   1e378:	andeq	sl, r0, r8, asr r0
   1e37c:	andeq	r9, r0, r0, ror pc
   1e380:	andeq	r0, r0, r8, rrx
   1e384:	strdeq	r9, [r0], -r4
   1e388:	andeq	r9, r0, ip, lsl #31
   1e38c:	ldrdeq	r9, [r0], -r8
   1e390:	andeq	r9, r0, r0, lsr #29
   1e394:	andeq	r9, r0, r8, asr #28
   1e398:	ldrdeq	r9, [r0], -ip
   1e39c:	andeq	r9, r0, r0, lsr #29
   1e3a0:	strdeq	r9, [r0], -r8
   1e3a4:	andeq	r6, r0, r4, asr #23
   1e3a8:	andeq	r7, r0, r8, lsl #31
   1e3ac:	muleq	r0, r0, sp
   1e3b0:	muleq	r0, ip, fp
   1e3b4:	andeq	r7, r0, r0, ror #30
   1e3b8:	andeq	r9, r0, ip, lsr sp

0001e3bc <gen_monster_benchmark@@Base>:
   1e3bc:	ldr	r3, [pc, #576]	; 1e604 <gen_monster_benchmark@@Base+0x248>
   1e3c0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1e3c4:	mov	r4, r0
   1e3c8:	strd	r6, [sp, #8]
   1e3cc:	str	lr, [sp, #16]
   1e3d0:	sub	sp, sp, #28
   1e3d4:	add	r5, sp, #12
   1e3d8:	add	r3, pc, r3
   1e3dc:	add	r3, r3, #1264	; 0x4f0
   1e3e0:	ldrd	r6, [r3]
   1e3e4:	ldrh	r3, [r3, #8]
   1e3e8:	strd	r6, [sp, #12]
   1e3ec:	strh	r3, [r5, #8]
   1e3f0:	bl	1f250 <flatcc_builder_reset@@Base>
   1e3f4:	ldr	r1, [pc, #524]	; 1e608 <gen_monster_benchmark@@Base+0x24c>
   1e3f8:	mov	r3, #0
   1e3fc:	mov	r0, r4
   1e400:	mov	r2, r3
   1e404:	add	r1, pc, r1
   1e408:	bl	1fa48 <flatcc_builder_start_buffer@@Base>
   1e40c:	cmp	r0, #0
   1e410:	bne	1e420 <gen_monster_benchmark@@Base+0x64>
   1e414:	mov	r1, #36	; 0x24
   1e418:	mov	r0, r4
   1e41c:	bl	20a20 <flatcc_builder_start_table@@Base>
   1e420:	mov	r3, #2
   1e424:	mov	r0, r4
   1e428:	mov	r2, r3
   1e42c:	mov	r1, r3
   1e430:	bl	22554 <flatcc_builder_table_add@@Base>
   1e434:	cmp	r0, #0
   1e438:	mov	r2, #32
   1e43c:	movne	r3, #80	; 0x50
   1e440:	mov	r1, #0
   1e444:	strhne	r3, [r0]
   1e448:	mov	r3, #16
   1e44c:	mov	r0, r4
   1e450:	bl	22554 <flatcc_builder_table_add@@Base>
   1e454:	mov	r3, r0
   1e458:	mov	r1, #1065353216	; 0x3f800000
   1e45c:	mov	ip, #1073741824	; 0x40000000
   1e460:	movw	r2, #52429	; 0xcccd
   1e464:	movt	r2, #49228	; 0xc04c
   1e468:	str	r1, [r3]
   1e46c:	mov	r0, r4
   1e470:	ldr	r1, [pc, #404]	; 1e60c <gen_monster_benchmark@@Base+0x250>
   1e474:	str	ip, [r3, #4]
   1e478:	str	r2, [r3, #8]
   1e47c:	add	r1, pc, r1
   1e480:	bl	22388 <flatcc_builder_create_string_str@@Base>
   1e484:	subs	r6, r0, #0
   1e488:	beq	1e4a0 <gen_monster_benchmark@@Base+0xe4>
   1e48c:	mov	r1, #3
   1e490:	mov	r0, r4
   1e494:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1e498:	cmp	r0, #0
   1e49c:	strne	r6, [r0]
   1e4a0:	mov	r2, #1
   1e4a4:	mvn	ip, #0
   1e4a8:	mov	r1, r5
   1e4ac:	mov	r3, r2
   1e4b0:	mov	r0, r4
   1e4b4:	stm	sp, {r2, ip}
   1e4b8:	mov	r2, #10
   1e4bc:	bl	215d4 <flatcc_builder_create_vector@@Base>
   1e4c0:	subs	r5, r0, #0
   1e4c4:	beq	1e4dc <gen_monster_benchmark@@Base+0x120>
   1e4c8:	mov	r1, #5
   1e4cc:	mov	r0, r4
   1e4d0:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1e4d4:	cmp	r0, #0
   1e4d8:	strne	r5, [r0]
   1e4dc:	mvn	r3, #-1073741824	; 0xc0000000
   1e4e0:	mov	r2, #2
   1e4e4:	mov	r1, #4
   1e4e8:	mov	r0, r4
   1e4ec:	bl	20770 <flatcc_builder_start_vector@@Base>
   1e4f0:	mov	r1, #1
   1e4f4:	mov	r0, r4
   1e4f8:	bl	1fe28 <flatcc_builder_extend_vector@@Base>
   1e4fc:	mov	r3, r0
   1e500:	mov	r2, #32
   1e504:	mov	r0, #16
   1e508:	mov	r1, #2
   1e50c:	strh	r0, [r3]
   1e510:	mov	r0, r4
   1e514:	strb	r2, [r3, #2]
   1e518:	bl	1fe28 <flatcc_builder_extend_vector@@Base>
   1e51c:	mov	r3, r0
   1e520:	mov	r1, #48	; 0x30
   1e524:	mov	r0, #64	; 0x40
   1e528:	mov	ip, #80	; 0x50
   1e52c:	mov	r2, #96	; 0x60
   1e530:	strh	r1, [r3]
   1e534:	mov	r1, #1
   1e538:	strb	r0, [r3, #2]
   1e53c:	mov	r0, r4
   1e540:	strh	ip, [r3, #4]
   1e544:	strb	r2, [r3, #6]
   1e548:	bl	1fe28 <flatcc_builder_extend_vector@@Base>
   1e54c:	cmp	r0, #0
   1e550:	beq	1e564 <gen_monster_benchmark@@Base+0x1a8>
   1e554:	mov	r2, #112	; 0x70
   1e558:	mvn	r3, #127	; 0x7f
   1e55c:	strh	r2, [r0]
   1e560:	strb	r3, [r0, #2]
   1e564:	mvn	r3, #110	; 0x6e
   1e568:	movw	r2, #401	; 0x191
   1e56c:	mov	r1, #1
   1e570:	mov	r0, r4
   1e574:	strh	r2, [sp, #8]
   1e578:	strb	r3, [sp, #10]
   1e57c:	bl	1fe28 <flatcc_builder_extend_vector@@Base>
   1e580:	cmp	r0, #0
   1e584:	ldrne	r3, [sp, #8]
   1e588:	strne	r3, [r0]
   1e58c:	mov	r0, r4
   1e590:	bl	2175c <flatcc_builder_end_vector@@Base>
   1e594:	subs	r5, r0, #0
   1e598:	beq	1e5b0 <gen_monster_benchmark@@Base+0x1f4>
   1e59c:	mov	r1, #9
   1e5a0:	mov	r0, r4
   1e5a4:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   1e5a8:	cmp	r0, #0
   1e5ac:	strne	r5, [r0]
   1e5b0:	ldr	r1, [pc, #88]	; 1e610 <gen_monster_benchmark@@Base+0x254>
   1e5b4:	mov	r2, #1
   1e5b8:	mov	r0, r4
   1e5bc:	add	r1, pc, r1
   1e5c0:	add	r1, r1, #1024	; 0x400
   1e5c4:	add	r1, r1, #4
   1e5c8:	bl	21358 <flatcc_builder_check_required@@Base>
   1e5cc:	cmp	r0, #0
   1e5d0:	beq	1e600 <gen_monster_benchmark@@Base+0x244>
   1e5d4:	mov	r0, r4
   1e5d8:	bl	21404 <flatcc_builder_end_table@@Base>
   1e5dc:	mov	r1, r0
   1e5e0:	mov	r0, r4
   1e5e4:	bl	1fb24 <flatcc_builder_end_buffer@@Base>
   1e5e8:	mov	r0, #0
   1e5ec:	add	sp, sp, #28
   1e5f0:	ldrd	r4, [sp]
   1e5f4:	ldrd	r6, [sp, #8]
   1e5f8:	add	sp, sp, #16
   1e5fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e600:	bl	13668 <_start@@Base+0xaac>
   1e604:	andeq	r6, r0, r8, lsl #22
   1e608:	andeq	r7, r0, r8, lsr r7
   1e60c:	andeq	r7, r0, r8, ror #15
   1e610:	andeq	r6, r0, r4, lsr #18

0001e614 <time_monster@@Base>:
   1e614:	strd	r4, [sp, #-16]!
   1e618:	mov	r5, r0
   1e61c:	movw	r4, #16960	; 0x4240
   1e620:	movt	r4, #15
   1e624:	ldr	r0, [pc, #104]	; 1e694 <time_monster@@Base+0x80>
   1e628:	str	r6, [sp, #8]
   1e62c:	str	lr, [sp, #12]
   1e630:	vpush	{d8}
   1e634:	add	r0, pc, r0
   1e638:	bl	12944 <puts@plt>
   1e63c:	bl	12e4c <_start@@Base+0x290>
   1e640:	vmov.f64	d8, d0
   1e644:	mov	r0, r5
   1e648:	bl	1e3bc <gen_monster_benchmark@@Base>
   1e64c:	subs	r4, r4, #1
   1e650:	bne	1e644 <time_monster@@Base+0x30>
   1e654:	mov	r0, r5
   1e658:	bl	22c70 <flatcc_builder_get_buffer_size@@Base>
   1e65c:	mov	r5, r0
   1e660:	bl	12e4c <_start@@Base+0x290>
   1e664:	ldr	r0, [pc, #44]	; 1e698 <time_monster@@Base+0x84>
   1e668:	mov	r1, r5
   1e66c:	vmov.f64	d1, d0
   1e670:	vmov.f64	d0, d8
   1e674:	add	r0, pc, r0
   1e678:	bl	14248 <_start@@Base+0x168c>
   1e67c:	vpop	{d8}
   1e680:	mov	r0, r4
   1e684:	ldrd	r4, [sp]
   1e688:	ldr	r6, [sp, #8]
   1e68c:	add	sp, sp, #12
   1e690:	pop	{pc}		; (ldr pc, [sp], #4)
   1e694:	andeq	r9, r0, r8, ror #23
   1e698:			; <UNDEFINED> instruction: 0x00009bbc

0001e69c <gen_struct_buffer_benchmark@@Base>:
   1e69c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1e6a0:	mov	r4, r0
   1e6a4:	strd	r6, [sp, #8]
   1e6a8:	str	lr, [sp, #16]
   1e6ac:	sub	sp, sp, #12
   1e6b0:	bl	1f250 <flatcc_builder_reset@@Base>
   1e6b4:	mov	r0, r4
   1e6b8:	mov	r2, #16
   1e6bc:	mov	r1, #32
   1e6c0:	bl	1fc74 <flatcc_builder_start_struct@@Base>
   1e6c4:	subs	r3, r0, #0
   1e6c8:	beq	1e720 <gen_struct_buffer_benchmark@@Base+0x84>
   1e6cc:	mov	r2, #8
   1e6d0:	mov	ip, #1065353216	; 0x3f800000
   1e6d4:	movw	lr, #2730	; 0xaaa
   1e6d8:	mov	r0, #1073741824	; 0x40000000
   1e6dc:	mvn	r1, #16
   1e6e0:	movw	r6, #52429	; 0xcccd
   1e6e4:	movt	r6, #52428	; 0xcccc
   1e6e8:	movw	r7, #52428	; 0xcccc
   1e6ec:	movt	r7, #16400	; 0x4010
   1e6f0:	str	ip, [r3]
   1e6f4:	strb	r2, [r3, #24]
   1e6f8:	mov	r2, #0
   1e6fc:	movt	r2, #16448	; 0x4040
   1e700:	str	r0, [r3, #4]
   1e704:	mov	r0, r4
   1e708:	str	r2, [r3, #8]
   1e70c:	strd	r6, [r3, #16]
   1e710:	strh	lr, [r3, #26]
   1e714:	strb	r1, [r3, #28]
   1e718:	bl	1fd38 <flatcc_builder_end_struct@@Base>
   1e71c:	mov	r3, r0
   1e720:	ldr	r1, [pc, #220]	; 1e804 <gen_struct_buffer_benchmark@@Base+0x168>
   1e724:	mov	r5, #0
   1e728:	mov	r0, #16
   1e72c:	mov	r2, r5
   1e730:	stm	sp, {r0, r5}
   1e734:	mov	r0, r4
   1e738:	add	r1, pc, r1
   1e73c:	bl	1f698 <flatcc_builder_create_buffer@@Base>
   1e740:	mov	r1, r5
   1e744:	mov	r0, r4
   1e748:	bl	22d14 <flatcc_builder_get_direct_buffer@@Base>
   1e74c:	cmp	r0, #0
   1e750:	beq	1e7e4 <gen_struct_buffer_benchmark@@Base+0x148>
   1e754:	ldr	r3, [r0]
   1e758:	vldr	s15, [pc, #152]	; 1e7f8 <gen_struct_buffer_benchmark@@Base+0x15c>
   1e75c:	add	r0, r0, r3
   1e760:	vldr	s14, [r0]
   1e764:	vcmp.f32	s14, s15
   1e768:	vmrs	APSR_nzcv, fpscr
   1e76c:	bne	1e7e4 <gen_struct_buffer_benchmark@@Base+0x148>
   1e770:	vldr	s15, [pc, #132]	; 1e7fc <gen_struct_buffer_benchmark@@Base+0x160>
   1e774:	vldr	s14, [r0, #4]
   1e778:	vcmp.f32	s14, s15
   1e77c:	vmrs	APSR_nzcv, fpscr
   1e780:	bne	1e7e4 <gen_struct_buffer_benchmark@@Base+0x148>
   1e784:	vldr	s15, [pc, #116]	; 1e800 <gen_struct_buffer_benchmark@@Base+0x164>
   1e788:	vldr	s14, [r0, #8]
   1e78c:	vcmp.f32	s14, s15
   1e790:	vmrs	APSR_nzcv, fpscr
   1e794:	bne	1e7e4 <gen_struct_buffer_benchmark@@Base+0x148>
   1e798:	vldr	d7, [pc, #80]	; 1e7f0 <gen_struct_buffer_benchmark@@Base+0x154>
   1e79c:	vldr	d6, [r0, #16]
   1e7a0:	vcmp.f64	d6, d7
   1e7a4:	vmrs	APSR_nzcv, fpscr
   1e7a8:	bne	1e7e4 <gen_struct_buffer_benchmark@@Base+0x148>
   1e7ac:	ldr	r3, [r0, #24]
   1e7b0:	mov	r2, #8
   1e7b4:	movt	r2, #2730	; 0xaaa
   1e7b8:	bic	r3, r3, #65280	; 0xff00
   1e7bc:	cmp	r3, r2
   1e7c0:	bne	1e7e4 <gen_struct_buffer_benchmark@@Base+0x148>
   1e7c4:	ldrb	r0, [r0, #28]
   1e7c8:	subs	r0, r0, #239	; 0xef
   1e7cc:	mvnne	r0, #0
   1e7d0:	add	sp, sp, #12
   1e7d4:	ldrd	r4, [sp]
   1e7d8:	ldrd	r6, [sp, #8]
   1e7dc:	add	sp, sp, #16
   1e7e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e7e4:	mvn	r0, #0
   1e7e8:	b	1e7d0 <gen_struct_buffer_benchmark@@Base+0x134>
   1e7ec:	nop	{0}
   1e7f0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1e7f4:	andsmi	ip, r0, ip, asr #25
   1e7f8:	svccc	0x00800000
   1e7fc:	andmi	r0, r0, r0
   1e800:	submi	r0, r0, r0
   1e804:	andeq	r7, r0, r4, lsl #8

0001e808 <time_struct_buffer@@Base>:
   1e808:	strd	r4, [sp, #-16]!
   1e80c:	movw	r4, #16960	; 0x4240
   1e810:	movt	r4, #15
   1e814:	str	r6, [sp, #8]
   1e818:	mov	r6, r0
   1e81c:	mov	r5, #0
   1e820:	ldr	r0, [pc, #132]	; 1e8ac <time_struct_buffer@@Base+0xa4>
   1e824:	str	lr, [sp, #12]
   1e828:	vpush	{d8-d9}
   1e82c:	add	r0, pc, r0
   1e830:	bl	12944 <puts@plt>
   1e834:	bl	12e4c <_start@@Base+0x290>
   1e838:	vmov.f64	d8, d0
   1e83c:	mov	r0, r6
   1e840:	bl	1e69c <gen_struct_buffer_benchmark@@Base>
   1e844:	subs	r4, r4, #1
   1e848:	orr	r5, r5, r0
   1e84c:	bne	1e83c <time_struct_buffer@@Base+0x34>
   1e850:	bl	12e4c <_start@@Base+0x290>
   1e854:	mov	r0, r6
   1e858:	vmov.f64	d9, d0
   1e85c:	bl	22c70 <flatcc_builder_get_buffer_size@@Base>
   1e860:	cmp	r5, #0
   1e864:	mov	r4, r0
   1e868:	bne	1e89c <time_struct_buffer@@Base+0x94>
   1e86c:	ldr	r0, [pc, #60]	; 1e8b0 <time_struct_buffer@@Base+0xa8>
   1e870:	mov	r1, r4
   1e874:	vmov.f64	d1, d9
   1e878:	vmov.f64	d0, d8
   1e87c:	add	r0, pc, r0
   1e880:	bl	14248 <_start@@Base+0x168c>
   1e884:	vpop	{d8-d9}
   1e888:	mov	r0, r5
   1e88c:	ldrd	r4, [sp]
   1e890:	ldr	r6, [sp, #8]
   1e894:	add	sp, sp, #12
   1e898:	pop	{pc}		; (ldr pc, [sp], #4)
   1e89c:	ldr	r0, [pc, #16]	; 1e8b4 <time_struct_buffer@@Base+0xac>
   1e8a0:	add	r0, pc, r0
   1e8a4:	bl	12944 <puts@plt>
   1e8a8:	b	1e86c <time_struct_buffer@@Base+0x64>
   1e8ac:	strdeq	r9, [r0], -r0
   1e8b0:	andeq	r9, r0, r0, ror #19
   1e8b4:	andeq	r9, r0, r8, lsr #19
   1e8b8:	strd	r4, [sp, #-16]!
   1e8bc:	mov	r4, r0
   1e8c0:	mov	r0, #1
   1e8c4:	ldr	ip, [r4, #28]
   1e8c8:	mov	r3, r0
   1e8cc:	mov	r5, r2
   1e8d0:	str	r6, [sp, #8]
   1e8d4:	str	lr, [sp, #12]
   1e8d8:	sub	sp, sp, #8
   1e8dc:	str	r0, [sp]
   1e8e0:	add	r2, r1, ip
   1e8e4:	add	r1, r4, #60	; 0x3c
   1e8e8:	ldr	r0, [r4, #40]	; 0x28
   1e8ec:	ldr	r6, [r4, #48]	; 0x30
   1e8f0:	blx	r6
   1e8f4:	cmp	r0, #0
   1e8f8:	bne	1e938 <time_struct_buffer@@Base+0x130>
   1e8fc:	ldr	r1, [r4, #28]
   1e900:	ldr	ip, [r4, #32]
   1e904:	ldrd	r2, [r4, #60]	; 0x3c
   1e908:	sub	r3, r3, r1
   1e90c:	add	r2, r2, r1
   1e910:	cmp	r3, r5
   1e914:	movcs	r3, r5
   1e918:	str	r2, [r4, #16]
   1e91c:	str	r3, [r4, #24]
   1e920:	str	r5, [ip, #4]
   1e924:	add	sp, sp, #8
   1e928:	ldrd	r4, [sp]
   1e92c:	ldr	r6, [sp, #8]
   1e930:	add	sp, sp, #12
   1e934:	pop	{pc}		; (ldr pc, [sp], #4)
   1e938:	mvn	r0, #0
   1e93c:	b	1e924 <time_struct_buffer@@Base+0x11c>

0001e940 <flatcc_builder_default_alloc@@Base>:
   1e940:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1e944:	subs	r5, r2, #0
   1e948:	strd	r6, [sp, #8]
   1e94c:	mov	r6, r1
   1e950:	str	r8, [sp, #16]
   1e954:	str	lr, [sp, #20]
   1e958:	beq	1e990 <flatcc_builder_default_alloc@@Base+0x50>
   1e95c:	mov	r7, r3
   1e960:	ldr	r3, [sp, #24]
   1e964:	sub	r2, r3, #1
   1e968:	cmp	r2, #6
   1e96c:	addls	pc, pc, r2, lsl #2
   1e970:	b	1ea40 <flatcc_builder_default_alloc@@Base+0x100>
   1e974:	b	1e9c0 <flatcc_builder_default_alloc@@Base+0x80>
   1e978:	b	1ea40 <flatcc_builder_default_alloc@@Base+0x100>
   1e97c:	b	1ea40 <flatcc_builder_default_alloc@@Base+0x100>
   1e980:	b	1ea38 <flatcc_builder_default_alloc@@Base+0xf8>
   1e984:	b	1ea28 <flatcc_builder_default_alloc@@Base+0xe8>
   1e988:	b	1ea40 <flatcc_builder_default_alloc@@Base+0x100>
   1e98c:	b	1ea30 <flatcc_builder_default_alloc@@Base+0xf0>
   1e990:	ldr	r0, [r1]
   1e994:	cmp	r0, #0
   1e998:	beq	1e9ac <flatcc_builder_default_alloc@@Base+0x6c>
   1e99c:	bl	128fc <free@plt>
   1e9a0:	mov	r0, r5
   1e9a4:	str	r5, [r6]
   1e9a8:	str	r5, [r6, #4]
   1e9ac:	ldrd	r4, [sp]
   1e9b0:	ldrd	r6, [sp, #8]
   1e9b4:	ldr	r8, [sp, #16]
   1e9b8:	add	sp, sp, #20
   1e9bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e9c0:	mov	r4, #256	; 0x100
   1e9c4:	cmp	r4, r5
   1e9c8:	bcs	1e9d8 <flatcc_builder_default_alloc@@Base+0x98>
   1e9cc:	lsl	r4, r4, #1
   1e9d0:	cmp	r5, r4
   1e9d4:	bhi	1e9cc <flatcc_builder_default_alloc@@Base+0x8c>
   1e9d8:	ldr	r2, [r6, #4]
   1e9dc:	cmp	r5, r2
   1e9e0:	bhi	1e9f0 <flatcc_builder_default_alloc@@Base+0xb0>
   1e9e4:	cmp	r4, r2, lsr #1
   1e9e8:	movls	r0, #0
   1e9ec:	bls	1e9ac <flatcc_builder_default_alloc@@Base+0x6c>
   1e9f0:	mov	r1, r4
   1e9f4:	ldr	r0, [r6]
   1e9f8:	bl	12920 <realloc@plt>
   1e9fc:	subs	r5, r0, #0
   1ea00:	beq	1ea5c <flatcc_builder_default_alloc@@Base+0x11c>
   1ea04:	cmp	r7, #0
   1ea08:	beq	1ea18 <flatcc_builder_default_alloc@@Base+0xd8>
   1ea0c:	ldr	r0, [r6, #4]
   1ea10:	cmp	r0, r4
   1ea14:	bcc	1ea48 <flatcc_builder_default_alloc@@Base+0x108>
   1ea18:	mov	r0, #0
   1ea1c:	str	r5, [r6]
   1ea20:	str	r4, [r6, #4]
   1ea24:	b	1e9ac <flatcc_builder_default_alloc@@Base+0x6c>
   1ea28:	mov	r4, r5
   1ea2c:	b	1e9d8 <flatcc_builder_default_alloc@@Base+0x98>
   1ea30:	mov	r4, #64	; 0x40
   1ea34:	b	1e9c4 <flatcc_builder_default_alloc@@Base+0x84>
   1ea38:	mov	r4, #288	; 0x120
   1ea3c:	b	1e9c4 <flatcc_builder_default_alloc@@Base+0x84>
   1ea40:	mov	r4, #32
   1ea44:	b	1e9c4 <flatcc_builder_default_alloc@@Base+0x84>
   1ea48:	sub	r2, r4, r0
   1ea4c:	mov	r1, #0
   1ea50:	add	r0, r5, r0
   1ea54:	bl	12998 <memset@plt>
   1ea58:	b	1ea18 <flatcc_builder_default_alloc@@Base+0xd8>
   1ea5c:	mvn	r0, #0
   1ea60:	b	1e9ac <flatcc_builder_default_alloc@@Base+0x6c>
   1ea64:	ldr	r3, [pc, #32]	; 1ea8c <flatcc_builder_default_alloc@@Base+0x14c>
   1ea68:	mov	r2, #308	; 0x134
   1ea6c:	str	r4, [sp, #-8]!
   1ea70:	ldr	r1, [pc, #24]	; 1ea90 <flatcc_builder_default_alloc@@Base+0x150>
   1ea74:	str	lr, [sp, #4]
   1ea78:	ldr	r0, [pc, #20]	; 1ea94 <flatcc_builder_default_alloc@@Base+0x154>
   1ea7c:	add	r3, pc, r3
   1ea80:	add	r1, pc, r1
   1ea84:	add	r0, pc, r0
   1ea88:	bl	129e0 <__assert_fail@plt>
   1ea8c:	andeq	r9, r0, r8, lsr r8
   1ea90:	andeq	r9, r0, r4, lsl #31
   1ea94:	andeq	sl, r0, r8
   1ea98:	ldr	r3, [pc, #36]	; 1eac4 <flatcc_builder_default_alloc@@Base+0x184>
   1ea9c:	movw	r2, #677	; 0x2a5
   1eaa0:	str	r4, [sp, #-8]!
   1eaa4:	ldr	r1, [pc, #28]	; 1eac8 <flatcc_builder_default_alloc@@Base+0x188>
   1eaa8:	str	lr, [sp, #4]
   1eaac:	ldr	r0, [pc, #24]	; 1eacc <flatcc_builder_default_alloc@@Base+0x18c>
   1eab0:	add	r3, pc, r3
   1eab4:	add	r3, r3, #16
   1eab8:	add	r1, pc, r1
   1eabc:	add	r0, pc, r0
   1eac0:	bl	129e0 <__assert_fail@plt>
   1eac4:	andeq	r9, r0, r4, lsl #16
   1eac8:	andeq	r9, r0, ip, asr #30
   1eacc:	ldrdeq	r9, [r0], -r0
   1ead0:	strd	r4, [sp, #-12]!
   1ead4:	cmp	r2, #0
   1ead8:	mov	ip, r0
   1eadc:	str	lr, [sp, #8]
   1eae0:	sub	sp, sp, #84	; 0x54
   1eae4:	ldr	lr, [pc, #248]	; 1ebe4 <flatcc_builder_default_alloc@@Base+0x2a4>
   1eae8:	add	lr, pc, lr
   1eaec:	bne	1eafc <flatcc_builder_default_alloc@@Base+0x1bc>
   1eaf0:	ldrh	r2, [r0, #132]	; 0x84
   1eaf4:	cmp	r2, #0
   1eaf8:	moveq	r2, #1
   1eafc:	ldrh	r0, [r1]
   1eb00:	cmp	r0, #3
   1eb04:	bhi	1eb14 <flatcc_builder_default_alloc@@Base+0x1d4>
   1eb08:	mov	r4, #4
   1eb0c:	mov	r0, r4
   1eb10:	strh	r4, [r1]
   1eb14:	cmp	r2, r0
   1eb18:	strhhi	r2, [r1]
   1eb1c:	cmp	r3, #0
   1eb20:	bne	1eb34 <flatcc_builder_default_alloc@@Base+0x1f4>
   1eb24:	ldr	r4, [ip, #140]	; 0x8c
   1eb28:	sub	r2, r2, #1
   1eb2c:	ands	r1, r2, r4
   1eb30:	bne	1eb48 <flatcc_builder_default_alloc@@Base+0x208>
   1eb34:	mov	r0, #0
   1eb38:	add	sp, sp, #84	; 0x54
   1eb3c:	ldrd	r4, [sp]
   1eb40:	add	sp, sp, #8
   1eb44:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb48:	ldr	r3, [pc, #152]	; 1ebe8 <flatcc_builder_default_alloc@@Base+0x2a8>
   1eb4c:	add	r0, r4, r1
   1eb50:	mov	r2, #1
   1eb54:	str	r1, [sp, #8]
   1eb58:	cmp	r4, r0
   1eb5c:	ldr	r3, [lr, r3]
   1eb60:	str	r0, [ip, #140]	; 0x8c
   1eb64:	strd	r2, [sp, #12]
   1eb68:	str	r1, [sp, #20]
   1eb6c:	bgt	1ebc0 <flatcc_builder_default_alloc@@Base+0x280>
   1eb70:	mov	r3, r4
   1eb74:	str	r1, [sp]
   1eb78:	add	r1, sp, #16
   1eb7c:	ldr	r0, [ip, #36]	; 0x24
   1eb80:	ldr	r5, [ip, #44]	; 0x2c
   1eb84:	blx	r5
   1eb88:	cmp	r0, #0
   1eb8c:	bne	1ebbc <flatcc_builder_default_alloc@@Base+0x27c>
   1eb90:	cmn	r4, #1
   1eb94:	bne	1eb34 <flatcc_builder_default_alloc@@Base+0x1f4>
   1eb98:	ldr	r3, [pc, #76]	; 1ebec <flatcc_builder_default_alloc@@Base+0x2ac>
   1eb9c:	movw	r2, #702	; 0x2be
   1eba0:	ldr	r1, [pc, #72]	; 1ebf0 <flatcc_builder_default_alloc@@Base+0x2b0>
   1eba4:	ldr	r0, [pc, #72]	; 1ebf4 <flatcc_builder_default_alloc@@Base+0x2b4>
   1eba8:	add	r3, pc, r3
   1ebac:	add	r3, r3, #28
   1ebb0:	add	r1, pc, r1
   1ebb4:	add	r0, pc, r0
   1ebb8:	bl	129e0 <__assert_fail@plt>
   1ebbc:	bl	1ea98 <flatcc_builder_default_alloc@@Base+0x158>
   1ebc0:	ldr	r3, [pc, #48]	; 1ebf8 <flatcc_builder_default_alloc@@Base+0x2b8>
   1ebc4:	movw	r2, #673	; 0x2a1
   1ebc8:	ldr	r1, [pc, #44]	; 1ebfc <flatcc_builder_default_alloc@@Base+0x2bc>
   1ebcc:	ldr	r0, [pc, #44]	; 1ec00 <flatcc_builder_default_alloc@@Base+0x2c0>
   1ebd0:	add	r3, pc, r3
   1ebd4:	add	r3, r3, #16
   1ebd8:	add	r1, pc, r1
   1ebdc:	add	r0, pc, r0
   1ebe0:	bl	129e0 <__assert_fail@plt>
   1ebe4:	andeq	fp, r1, r0, lsl r5
   1ebe8:	andeq	r0, r0, r4, rrx
   1ebec:	andeq	r9, r0, ip, lsl #14
   1ebf0:	andeq	r9, r0, r4, asr lr
   1ebf4:	ldrdeq	r9, [r0], -r8
   1ebf8:	andeq	r9, r0, r4, ror #13
   1ebfc:	andeq	r9, r0, ip, lsr #28
   1ec00:			; <UNDEFINED> instruction: 0x00009eb0
   1ec04:	ldr	r3, [pc, #36]	; 1ec30 <flatcc_builder_default_alloc@@Base+0x2f0>
   1ec08:	movw	r2, #651	; 0x28b
   1ec0c:	str	r4, [sp, #-8]!
   1ec10:	ldr	r1, [pc, #28]	; 1ec34 <flatcc_builder_default_alloc@@Base+0x2f4>
   1ec14:	str	lr, [sp, #4]
   1ec18:	ldr	r0, [pc, #24]	; 1ec38 <flatcc_builder_default_alloc@@Base+0x2f8>
   1ec1c:	add	r3, pc, r3
   1ec20:	add	r3, r3, #44	; 0x2c
   1ec24:	add	r1, pc, r1
   1ec28:	add	r0, pc, r0
   1ec2c:	bl	129e0 <__assert_fail@plt>
   1ec30:	muleq	r0, r8, r6
   1ec34:	andeq	r9, r0, r0, ror #27
   1ec38:	andeq	r9, r0, r4, ror #28
   1ec3c:	ldr	r3, [pc, #36]	; 1ec68 <flatcc_builder_default_alloc@@Base+0x328>
   1ec40:	mov	r2, #892	; 0x37c
   1ec44:	str	r4, [sp, #-8]!
   1ec48:	ldr	r1, [pc, #28]	; 1ec6c <flatcc_builder_default_alloc@@Base+0x32c>
   1ec4c:	str	lr, [sp, #4]
   1ec50:	ldr	r0, [pc, #24]	; 1ec70 <flatcc_builder_default_alloc@@Base+0x330>
   1ec54:	add	r3, pc, r3
   1ec58:	add	r3, r3, #56	; 0x38
   1ec5c:	add	r1, pc, r1
   1ec60:	add	r0, pc, r0
   1ec64:	bl	129e0 <__assert_fail@plt>
   1ec68:	andeq	r9, r0, r0, ror #12
   1ec6c:	andeq	r9, r0, r8, lsr #27
   1ec70:	andeq	r9, r0, r4, lsl #28
   1ec74:	ldrd	r2, [r0, #156]	; 0x9c
   1ec78:	strd	r4, [sp, #-20]!	; 0xffffffec
   1ec7c:	mov	r5, r1
   1ec80:	mov	r4, r0
   1ec84:	strd	r6, [sp, #8]
   1ec88:	str	lr, [sp, #16]
   1ec8c:	sub	sp, sp, #12
   1ec90:	add	r1, r2, #1
   1ec94:	cmp	r1, r3
   1ec98:	str	r1, [r0, #156]	; 0x9c
   1ec9c:	ble	1ed7c <flatcc_builder_default_alloc@@Base+0x43c>
   1eca0:	ldr	r3, [r0, #176]	; 0xb0
   1eca4:	cmp	r1, r3
   1eca8:	cmpgt	r3, #0
   1ecac:	movgt	r3, #1
   1ecb0:	movle	r3, #0
   1ecb4:	bgt	1ed8c <flatcc_builder_default_alloc@@Base+0x44c>
   1ecb8:	add	r2, r2, r2, lsl #3
   1ecbc:	ldr	r1, [r0, #88]	; 0x58
   1ecc0:	lsl	r6, r2, #2
   1ecc4:	add	r2, r6, #36	; 0x24
   1ecc8:	cmp	r2, r1
   1eccc:	bls	1ecf0 <flatcc_builder_default_alloc@@Base+0x3b0>
   1ecd0:	mov	ip, #4
   1ecd4:	add	r1, r0, #84	; 0x54
   1ecd8:	ldr	r0, [r0, #40]	; 0x28
   1ecdc:	str	ip, [sp]
   1ece0:	ldr	r7, [r4, #48]	; 0x30
   1ece4:	blx	r7
   1ece8:	cmp	r0, #0
   1ecec:	bne	1ed94 <flatcc_builder_default_alloc@@Base+0x454>
   1ecf0:	ldr	r2, [r4, #84]	; 0x54
   1ecf4:	add	r2, r2, r6
   1ecf8:	cmp	r2, #0
   1ecfc:	str	r2, [r4, #32]
   1ed00:	beq	1ed8c <flatcc_builder_default_alloc@@Base+0x44c>
   1ed04:	ldr	r3, [r4, #88]	; 0x58
   1ed08:	movw	r0, #36409	; 0x8e39
   1ed0c:	movt	r0, #14563	; 0x38e3
   1ed10:	ldr	r1, [r4, #176]	; 0xb0
   1ed14:	umull	r0, r3, r0, r3
   1ed18:	lsr	r3, r3, #3
   1ed1c:	cmp	r3, r1
   1ed20:	cmpgt	r1, #0
   1ed24:	movgt	r3, r1
   1ed28:	str	r3, [r4, #160]	; 0xa0
   1ed2c:	ldr	r3, [r4, #20]
   1ed30:	mov	r1, #0
   1ed34:	mvn	lr, #3
   1ed38:	mov	r0, r1
   1ed3c:	ldr	ip, [r4, #28]
   1ed40:	ldrh	r6, [r4, #130]	; 0x82
   1ed44:	str	r3, [r2, #8]
   1ed48:	add	r3, r3, ip
   1ed4c:	add	r3, r3, #7
   1ed50:	bic	r3, r3, #7
   1ed54:	strh	r6, [r2, #12]
   1ed58:	strh	r5, [r4, #130]	; 0x82
   1ed5c:	stm	r2, {ip, lr}
   1ed60:	str	r1, [r4, #20]
   1ed64:	str	r3, [r4, #28]
   1ed68:	add	sp, sp, #12
   1ed6c:	ldrd	r4, [sp]
   1ed70:	ldrd	r6, [sp, #8]
   1ed74:	add	sp, sp, #16
   1ed78:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed7c:	ldr	r2, [r0, #32]
   1ed80:	add	r2, r2, #36	; 0x24
   1ed84:	str	r2, [r0, #32]
   1ed88:	b	1ed2c <flatcc_builder_default_alloc@@Base+0x3ec>
   1ed8c:	mvn	r0, #0
   1ed90:	b	1ed68 <flatcc_builder_default_alloc@@Base+0x428>
   1ed94:	bl	1ea64 <flatcc_builder_default_alloc@@Base+0x124>
   1ed98:	strd	r4, [sp, #-20]!	; 0xffffffec
   1ed9c:	mov	r4, r0
   1eda0:	mov	r5, #4
   1eda4:	ldrh	r0, [r0, #128]	; 0x80
   1eda8:	strd	r6, [sp, #8]
   1edac:	str	lr, [sp, #16]
   1edb0:	sub	sp, sp, #92	; 0x5c
   1edb4:	ldr	lr, [pc, #464]	; 1ef8c <flatcc_builder_default_alloc@@Base+0x64c>
   1edb8:	str	r2, [sp, #12]
   1edbc:	cmp	r0, #3
   1edc0:	ldr	r6, [r4, #136]	; 0x88
   1edc4:	movls	r0, #4
   1edc8:	str	r5, [sp, #16]
   1edcc:	str	r5, [sp, #28]
   1edd0:	strhls	r0, [r4, #128]	; 0x80
   1edd4:	mov	r0, #1
   1edd8:	lsls	ip, r2, #2
   1eddc:	add	lr, pc, lr
   1ede0:	str	r0, [sp, #20]
   1ede4:	add	r0, sp, #12
   1ede8:	str	r0, [sp, #24]
   1edec:	and	r0, r6, #3
   1edf0:	beq	1ee0c <flatcc_builder_default_alloc@@Base+0x4cc>
   1edf4:	add	r5, ip, r5
   1edf8:	mov	r7, #2
   1edfc:	str	r5, [sp, #16]
   1ee00:	str	r7, [sp, #20]
   1ee04:	str	r1, [sp, #32]
   1ee08:	str	ip, [sp, #36]	; 0x24
   1ee0c:	cmp	r0, #0
   1ee10:	beq	1ee40 <flatcc_builder_default_alloc@@Base+0x500>
   1ee14:	ldr	r7, [pc, #372]	; 1ef90 <flatcc_builder_default_alloc@@Base+0x650>
   1ee18:	add	r5, r5, r0
   1ee1c:	ldr	ip, [sp, #20]
   1ee20:	str	r5, [sp, #16]
   1ee24:	ldr	r7, [lr, r7]
   1ee28:	add	lr, sp, #88	; 0x58
   1ee2c:	add	ip, ip, #1
   1ee30:	add	lr, lr, ip, lsl #3
   1ee34:	str	ip, [sp, #20]
   1ee38:	str	r7, [lr, #-72]	; 0xffffffb8
   1ee3c:	str	r0, [lr, #-68]	; 0xffffffbc
   1ee40:	cmp	r2, #0
   1ee44:	beq	1eed0 <flatcc_builder_default_alloc@@Base+0x590>
   1ee48:	sub	r6, r1, r6
   1ee4c:	add	lr, r2, r3
   1ee50:	add	r6, r6, r5
   1ee54:	mov	r2, r3
   1ee58:	b	1ee88 <flatcc_builder_default_alloc@@Base+0x548>
   1ee5c:	sub	r0, r6, r1
   1ee60:	cmp	r3, #0
   1ee64:	add	r0, r0, ip
   1ee68:	str	r0, [r1, #-4]
   1ee6c:	beq	1ee7c <flatcc_builder_default_alloc@@Base+0x53c>
   1ee70:	ldrb	r0, [r2]
   1ee74:	cmp	r0, #0
   1ee78:	beq	1ef40 <flatcc_builder_default_alloc@@Base+0x600>
   1ee7c:	add	r2, r2, #1
   1ee80:	cmp	lr, r2
   1ee84:	beq	1eecc <flatcc_builder_default_alloc@@Base+0x58c>
   1ee88:	ldr	ip, [r1], #4
   1ee8c:	cmp	ip, #0
   1ee90:	bne	1ee5c <flatcc_builder_default_alloc@@Base+0x51c>
   1ee94:	cmp	r3, #0
   1ee98:	beq	1ef1c <flatcc_builder_default_alloc@@Base+0x5dc>
   1ee9c:	ldrb	r0, [r2]
   1eea0:	cmp	r0, #0
   1eea4:	beq	1ee7c <flatcc_builder_default_alloc@@Base+0x53c>
   1eea8:	ldr	r3, [pc, #228]	; 1ef94 <flatcc_builder_default_alloc@@Base+0x654>
   1eeac:	movw	r2, #1461	; 0x5b5
   1eeb0:	ldr	r1, [pc, #224]	; 1ef98 <flatcc_builder_default_alloc@@Base+0x658>
   1eeb4:	ldr	r0, [pc, #224]	; 1ef9c <flatcc_builder_default_alloc@@Base+0x65c>
   1eeb8:	add	r3, pc, r3
   1eebc:	add	r3, r3, #76	; 0x4c
   1eec0:	add	r1, pc, r1
   1eec4:	add	r0, pc, r0
   1eec8:	bl	129e0 <__assert_fail@plt>
   1eecc:	ldr	r6, [r4, #136]	; 0x88
   1eed0:	sub	r7, r6, r5
   1eed4:	cmp	r7, r6
   1eed8:	bge	1ef68 <flatcc_builder_default_alloc@@Base+0x628>
   1eedc:	mov	r3, r7
   1eee0:	add	r1, sp, #24
   1eee4:	str	r5, [sp]
   1eee8:	ldr	r2, [sp, #20]
   1eeec:	ldr	r0, [r4, #36]	; 0x24
   1eef0:	ldr	r5, [r4, #44]	; 0x2c
   1eef4:	blx	r5
   1eef8:	cmp	r0, #0
   1eefc:	bne	1ef64 <flatcc_builder_default_alloc@@Base+0x624>
   1ef00:	mov	r0, r7
   1ef04:	str	r7, [r4, #136]	; 0x88
   1ef08:	add	sp, sp, #92	; 0x5c
   1ef0c:	ldrd	r4, [sp]
   1ef10:	ldrd	r6, [sp, #8]
   1ef14:	add	sp, sp, #16
   1ef18:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef1c:	ldr	r3, [pc, #124]	; 1efa0 <flatcc_builder_default_alloc@@Base+0x660>
   1ef20:	movw	r2, #1463	; 0x5b7
   1ef24:	ldr	r1, [pc, #120]	; 1efa4 <flatcc_builder_default_alloc@@Base+0x664>
   1ef28:	ldr	r0, [pc, #120]	; 1efa8 <flatcc_builder_default_alloc@@Base+0x668>
   1ef2c:	add	r3, pc, r3
   1ef30:	add	r3, r3, #76	; 0x4c
   1ef34:	add	r1, pc, r1
   1ef38:	add	r0, pc, r0
   1ef3c:	bl	129e0 <__assert_fail@plt>
   1ef40:	ldr	r3, [pc, #100]	; 1efac <flatcc_builder_default_alloc@@Base+0x66c>
   1ef44:	movw	r2, #1457	; 0x5b1
   1ef48:	ldr	r1, [pc, #96]	; 1efb0 <flatcc_builder_default_alloc@@Base+0x670>
   1ef4c:	ldr	r0, [pc, #96]	; 1efb4 <flatcc_builder_default_alloc@@Base+0x674>
   1ef50:	add	r3, pc, r3
   1ef54:	add	r3, r3, #76	; 0x4c
   1ef58:	add	r1, pc, r1
   1ef5c:	add	r0, pc, r0
   1ef60:	bl	129e0 <__assert_fail@plt>
   1ef64:	bl	1ec04 <flatcc_builder_default_alloc@@Base+0x2c4>
   1ef68:	ldr	r3, [pc, #72]	; 1efb8 <flatcc_builder_default_alloc@@Base+0x678>
   1ef6c:	movw	r2, #647	; 0x287
   1ef70:	ldr	r1, [pc, #68]	; 1efbc <flatcc_builder_default_alloc@@Base+0x67c>
   1ef74:	ldr	r0, [pc, #68]	; 1efc0 <flatcc_builder_default_alloc@@Base+0x680>
   1ef78:	add	r3, pc, r3
   1ef7c:	add	r3, r3, #44	; 0x2c
   1ef80:	add	r1, pc, r1
   1ef84:	add	r0, pc, r0
   1ef88:	bl	129e0 <__assert_fail@plt>
   1ef8c:	andeq	fp, r1, ip, lsl r2
   1ef90:	andeq	r0, r0, r4, rrx
   1ef94:	strdeq	r9, [r0], -ip
   1ef98:	andeq	r9, r0, r4, asr #22
   1ef9c:	andeq	r9, r0, ip, asr #23
   1efa0:	andeq	r9, r0, r8, lsl #7
   1efa4:	ldrdeq	r9, [r0], -r0
   1efa8:	andeq	r9, r0, r4, asr fp
   1efac:	andeq	r9, r0, r4, ror #6
   1efb0:	andeq	r9, r0, ip, lsr #21
   1efb4:	andeq	r9, r0, r4, lsr #22
   1efb8:	andeq	r9, r0, ip, lsr r3
   1efbc:	andeq	r9, r0, r4, lsl #21
   1efc0:	andeq	r9, r0, r8, lsl #22

0001efc4 <flatcc_builder_flush_vtable_cache@@Base>:
   1efc4:	ldr	r3, [r0, #116]	; 0x74
   1efc8:	cmp	r3, #0
   1efcc:	bxeq	lr
   1efd0:	str	r4, [sp, #-8]!
   1efd4:	mov	r4, r0
   1efd8:	mov	r1, #0
   1efdc:	ldr	r0, [r0, #92]	; 0x5c
   1efe0:	ldr	r2, [r4, #96]	; 0x60
   1efe4:	str	lr, [sp, #4]
   1efe8:	bl	12998 <memset@plt>
   1efec:	mov	r3, #16
   1eff0:	mov	r2, #0
   1eff4:	strd	r2, [r4, #120]	; 0x78
   1eff8:	ldr	r4, [sp]
   1effc:	add	sp, sp, #4
   1f000:	pop	{pc}		; (ldr pc, [sp], #4)

0001f004 <flatcc_builder_custom_init@@Base>:
   1f004:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1f008:	mov	r5, r3
   1f00c:	mov	r4, r0
   1f010:	strd	r6, [sp, #8]
   1f014:	mov	r6, r1
   1f018:	mov	r1, #0
   1f01c:	ldr	r7, [pc, #124]	; 1f0a0 <flatcc_builder_custom_init@@Base+0x9c>
   1f020:	strd	r8, [sp, #16]
   1f024:	mov	r8, r2
   1f028:	mov	r2, #232	; 0xe8
   1f02c:	str	sl, [sp, #24]
   1f030:	str	lr, [sp, #28]
   1f034:	ldr	r9, [sp, #32]
   1f038:	bl	12998 <memset@plt>
   1f03c:	cmp	r6, #0
   1f040:	add	r7, pc, r7
   1f044:	beq	1f078 <flatcc_builder_custom_init@@Base+0x74>
   1f048:	cmp	r5, #0
   1f04c:	beq	1f094 <flatcc_builder_custom_init@@Base+0x90>
   1f050:	ldr	sl, [sp, #24]
   1f054:	mov	r0, #0
   1f058:	strd	r8, [r4, #36]	; 0x24
   1f05c:	str	r6, [r4, #44]	; 0x2c
   1f060:	str	r5, [r4, #48]	; 0x30
   1f064:	ldrd	r4, [sp]
   1f068:	ldrd	r6, [sp, #8]
   1f06c:	ldrd	r8, [sp, #16]
   1f070:	add	sp, sp, #28
   1f074:	pop	{pc}		; (ldr pc, [sp], #4)
   1f078:	ldr	r3, [pc, #36]	; 1f0a4 <flatcc_builder_custom_init@@Base+0xa0>
   1f07c:	mov	r2, #1
   1f080:	cmp	r5, #0
   1f084:	add	r8, r4, #188	; 0xbc
   1f088:	str	r2, [r4, #184]	; 0xb8
   1f08c:	ldr	r6, [r7, r3]
   1f090:	bne	1f050 <flatcc_builder_custom_init@@Base+0x4c>
   1f094:	ldr	r3, [pc, #12]	; 1f0a8 <flatcc_builder_custom_init@@Base+0xa4>
   1f098:	ldr	r5, [r7, r3]
   1f09c:	b	1f050 <flatcc_builder_custom_init@@Base+0x4c>
   1f0a0:			; <UNDEFINED> instruction: 0x0001afb8
   1f0a4:	andeq	r0, r0, r4, ror r0
   1f0a8:	andeq	r0, r0, r0, ror r0

0001f0ac <flatcc_builder_init@@Base>:
   1f0ac:	mov	ip, #0
   1f0b0:	push	{lr}		; (str lr, [sp, #-4]!)
   1f0b4:	sub	sp, sp, #12
   1f0b8:	mov	r3, ip
   1f0bc:	mov	r2, ip
   1f0c0:	mov	r1, ip
   1f0c4:	str	ip, [sp]
   1f0c8:	bl	1f004 <flatcc_builder_custom_init@@Base>
   1f0cc:	add	sp, sp, #12
   1f0d0:	pop	{pc}		; (ldr pc, [sp], #4)

0001f0d4 <flatcc_builder_custom_reset@@Base>:
   1f0d4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1f0d8:	mov	r5, #0
   1f0dc:	mov	r4, r0
   1f0e0:	strd	r6, [sp, #8]
   1f0e4:	mov	r6, r0
   1f0e8:	strd	r8, [sp, #16]
   1f0ec:	mov	r8, r1
   1f0f0:	mov	r9, r2
   1f0f4:	str	lr, [sp, #24]
   1f0f8:	sub	sp, sp, #12
   1f0fc:	b	1f14c <flatcc_builder_custom_reset@@Base+0x78>
   1f100:	cmp	r5, #5
   1f104:	cmpne	r9, #0
   1f108:	beq	1f130 <flatcc_builder_custom_reset@@Base+0x5c>
   1f10c:	mov	r3, #1
   1f110:	str	r5, [sp]
   1f114:	mov	r2, r3
   1f118:	ldr	r0, [r6, #40]	; 0x28
   1f11c:	ldr	r7, [r6, #48]	; 0x30
   1f120:	blx	r7
   1f124:	cmp	r0, #0
   1f128:	bne	1f23c <flatcc_builder_custom_reset@@Base+0x168>
   1f12c:	ldr	r0, [r4, #52]	; 0x34
   1f130:	mov	r1, #0
   1f134:	ldr	r2, [r4, #56]	; 0x38
   1f138:	bl	12998 <memset@plt>
   1f13c:	add	r5, r5, #1
   1f140:	add	r4, r4, #8
   1f144:	cmp	r5, #8
   1f148:	beq	1f18c <flatcc_builder_custom_reset@@Base+0xb8>
   1f14c:	ldr	r0, [r4, #52]	; 0x34
   1f150:	add	r1, r4, #52	; 0x34
   1f154:	cmp	r0, #0
   1f158:	bne	1f100 <flatcc_builder_custom_reset@@Base+0x2c>
   1f15c:	ldr	r3, [r4, #56]	; 0x38
   1f160:	cmp	r3, #0
   1f164:	beq	1f13c <flatcc_builder_custom_reset@@Base+0x68>
   1f168:	ldr	r3, [pc, #212]	; 1f244 <flatcc_builder_custom_reset@@Base+0x170>
   1f16c:	movw	r2, #434	; 0x1b2
   1f170:	ldr	r1, [pc, #208]	; 1f248 <flatcc_builder_custom_reset@@Base+0x174>
   1f174:	ldr	r0, [pc, #208]	; 1f24c <flatcc_builder_custom_reset@@Base+0x178>
   1f178:	add	r3, pc, r3
   1f17c:	add	r3, r3, #108	; 0x6c
   1f180:	add	r1, pc, r1
   1f184:	add	r0, pc, r0
   1f188:	bl	129e0 <__assert_fail@plt>
   1f18c:	mov	r2, #0
   1f190:	ldr	r0, [r6, #52]	; 0x34
   1f194:	ldr	r3, [r6, #124]	; 0x7c
   1f198:	ldr	r1, [r6, #60]	; 0x3c
   1f19c:	str	r0, [r6, #4]
   1f1a0:	str	r2, [r6, #120]	; 0x78
   1f1a4:	cmp	r3, r2
   1f1a8:	ldr	r2, [r6, #76]	; 0x4c
   1f1ac:	movne	r3, #16
   1f1b0:	strne	r3, [r6, #124]	; 0x7c
   1f1b4:	mov	r3, #0
   1f1b8:	cmp	r8, r3
   1f1bc:	str	r2, [r6]
   1f1c0:	str	r1, [r6, #16]
   1f1c4:	str	r3, [r6, #20]
   1f1c8:	str	r3, [r6, #24]
   1f1cc:	str	r3, [r6, #32]
   1f1d0:	strh	r3, [r6, #128]	; 0x80
   1f1d4:	str	r3, [r6, #136]	; 0x88
   1f1d8:	str	r3, [r6, #140]	; 0x8c
   1f1dc:	str	r3, [r6, #148]	; 0x94
   1f1e0:	str	r3, [r6, #152]	; 0x98
   1f1e4:	str	r3, [r6, #156]	; 0x9c
   1f1e8:	str	r3, [r6, #160]	; 0xa0
   1f1ec:	bne	1f214 <flatcc_builder_custom_reset@@Base+0x140>
   1f1f0:	ldr	r0, [r6, #184]	; 0xb8
   1f1f4:	cmp	r0, #0
   1f1f8:	bne	1f22c <flatcc_builder_custom_reset@@Base+0x158>
   1f1fc:	add	sp, sp, #12
   1f200:	ldrd	r4, [sp]
   1f204:	ldrd	r6, [sp, #8]
   1f208:	ldrd	r8, [sp, #16]
   1f20c:	add	sp, sp, #24
   1f210:	pop	{pc}		; (ldr pc, [sp], #4)
   1f214:	ldr	r0, [r6, #184]	; 0xb8
   1f218:	str	r3, [r6, #172]	; 0xac
   1f21c:	str	r3, [r6, #176]	; 0xb0
   1f220:	str	r3, [r6, #180]	; 0xb4
   1f224:	cmp	r0, #0
   1f228:	beq	1f1fc <flatcc_builder_custom_reset@@Base+0x128>
   1f22c:	add	r0, r6, #188	; 0xbc
   1f230:	bl	2300c <flatcc_emitter_reset@@Base>
   1f234:	mov	r0, #0
   1f238:	b	1f1fc <flatcc_builder_custom_reset@@Base+0x128>
   1f23c:	mvn	r0, #0
   1f240:	b	1f1fc <flatcc_builder_custom_reset@@Base+0x128>
   1f244:	andeq	r9, r0, ip, lsr r1
   1f248:	andeq	r9, r0, r4, lsl #17
   1f24c:	andeq	r9, r0, ip, lsl r9

0001f250 <flatcc_builder_reset@@Base>:
   1f250:	mov	r2, #0
   1f254:	mov	r1, r2
   1f258:	b	1f0d4 <flatcc_builder_custom_reset@@Base>

0001f25c <flatcc_builder_clear@@Base>:
   1f25c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1f260:	mov	r4, #0
   1f264:	add	r5, r0, #52	; 0x34
   1f268:	strd	r6, [sp, #8]
   1f26c:	mov	r6, r0
   1f270:	str	lr, [sp, #16]
   1f274:	sub	sp, sp, #12
   1f278:	mov	r3, #0
   1f27c:	mov	r1, r5
   1f280:	str	r4, [sp]
   1f284:	mov	r2, r3
   1f288:	add	r4, r4, #1
   1f28c:	ldr	r0, [r6, #40]	; 0x28
   1f290:	add	r5, r5, #8
   1f294:	ldr	r7, [r6, #48]	; 0x30
   1f298:	blx	r7
   1f29c:	cmp	r4, #8
   1f2a0:	bne	1f278 <flatcc_builder_clear@@Base+0x1c>
   1f2a4:	ldr	r3, [r6, #184]	; 0xb8
   1f2a8:	cmp	r3, #0
   1f2ac:	bne	1f2d4 <flatcc_builder_clear@@Base+0x78>
   1f2b0:	mov	r0, r6
   1f2b4:	mov	r2, #232	; 0xe8
   1f2b8:	mov	r1, #0
   1f2bc:	add	sp, sp, #12
   1f2c0:	ldrd	r4, [sp]
   1f2c4:	ldrd	r6, [sp, #8]
   1f2c8:	ldr	lr, [sp, #16]
   1f2cc:	add	sp, sp, #20
   1f2d0:	b	12998 <memset@plt>
   1f2d4:	add	r0, r6, #188	; 0xbc
   1f2d8:	bl	230e0 <flatcc_emitter_clear@@Base>
   1f2dc:	b	1f2b0 <flatcc_builder_clear@@Base+0x54>

0001f2e0 <flatcc_builder_enter_user_frame_ptr@@Base>:
   1f2e0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1f2e4:	add	r4, r1, #3
   1f2e8:	mov	r5, r0
   1f2ec:	ldr	r3, [r0, #112]	; 0x70
   1f2f0:	bic	r4, r4, #3
   1f2f4:	strd	r6, [sp, #8]
   1f2f8:	add	r4, r4, #4
   1f2fc:	ldr	r6, [r0, #228]	; 0xe4
   1f300:	str	lr, [sp, #16]
   1f304:	sub	sp, sp, #12
   1f308:	add	r2, r6, r4
   1f30c:	cmp	r2, r3
   1f310:	bls	1f338 <flatcc_builder_enter_user_frame_ptr@@Base+0x58>
   1f314:	mov	ip, #7
   1f318:	add	r1, r0, #108	; 0x6c
   1f31c:	ldr	r0, [r0, #40]	; 0x28
   1f320:	mov	r3, #0
   1f324:	str	ip, [sp]
   1f328:	ldr	r7, [r5, #48]	; 0x30
   1f32c:	blx	r7
   1f330:	cmp	r0, #0
   1f334:	bne	1f38c <flatcc_builder_enter_user_frame_ptr@@Base+0xac>
   1f338:	ldr	r7, [r5, #108]	; 0x6c
   1f33c:	adds	r3, r7, r6
   1f340:	moveq	r0, r3
   1f344:	beq	1f378 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   1f348:	mov	r2, r4
   1f34c:	mov	r0, r3
   1f350:	mov	r1, #0
   1f354:	bl	12998 <memset@plt>
   1f358:	ldr	r2, [r5, #224]	; 0xe0
   1f35c:	add	r0, r0, #4
   1f360:	str	r2, [r7, r6]
   1f364:	ldr	r3, [r5, #228]	; 0xe4
   1f368:	add	r4, r3, r4
   1f36c:	add	r3, r3, #4
   1f370:	str	r3, [r5, #224]	; 0xe0
   1f374:	str	r4, [r5, #228]	; 0xe4
   1f378:	add	sp, sp, #12
   1f37c:	ldrd	r4, [sp]
   1f380:	ldrd	r6, [sp, #8]
   1f384:	add	sp, sp, #16
   1f388:	pop	{pc}		; (ldr pc, [sp], #4)
   1f38c:	bl	1ea64 <flatcc_builder_default_alloc@@Base+0x124>

0001f390 <flatcc_builder_enter_user_frame@@Base>:
   1f390:	strd	r4, [sp, #-20]!	; 0xffffffec
   1f394:	add	r4, r1, #3
   1f398:	mov	r5, r0
   1f39c:	ldr	r3, [r0, #112]	; 0x70
   1f3a0:	bic	r4, r4, #3
   1f3a4:	strd	r6, [sp, #8]
   1f3a8:	add	r4, r4, #4
   1f3ac:	ldr	r6, [r0, #228]	; 0xe4
   1f3b0:	str	lr, [sp, #16]
   1f3b4:	sub	sp, sp, #12
   1f3b8:	add	r2, r6, r4
   1f3bc:	cmp	r2, r3
   1f3c0:	bls	1f3e8 <flatcc_builder_enter_user_frame@@Base+0x58>
   1f3c4:	mov	ip, #7
   1f3c8:	add	r1, r0, #108	; 0x6c
   1f3cc:	ldr	r0, [r0, #40]	; 0x28
   1f3d0:	mov	r3, #0
   1f3d4:	str	ip, [sp]
   1f3d8:	ldr	r7, [r5, #48]	; 0x30
   1f3dc:	blx	r7
   1f3e0:	cmp	r0, #0
   1f3e4:	bne	1f430 <flatcc_builder_enter_user_frame@@Base+0xa0>
   1f3e8:	ldr	r7, [r5, #108]	; 0x6c
   1f3ec:	adds	r0, r7, r6
   1f3f0:	beq	1f41c <flatcc_builder_enter_user_frame@@Base+0x8c>
   1f3f4:	mov	r2, r4
   1f3f8:	mov	r1, #0
   1f3fc:	bl	12998 <memset@plt>
   1f400:	ldr	r3, [r5, #224]	; 0xe0
   1f404:	str	r3, [r7, r6]
   1f408:	ldr	r0, [r5, #228]	; 0xe4
   1f40c:	add	r4, r0, r4
   1f410:	add	r0, r0, #4
   1f414:	str	r0, [r5, #224]	; 0xe0
   1f418:	str	r4, [r5, #228]	; 0xe4
   1f41c:	add	sp, sp, #12
   1f420:	ldrd	r4, [sp]
   1f424:	ldrd	r6, [sp, #8]
   1f428:	add	sp, sp, #16
   1f42c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f430:	bl	1ea64 <flatcc_builder_default_alloc@@Base+0x124>

0001f434 <flatcc_builder_exit_user_frame@@Base>:
   1f434:	ldr	r2, [r0, #224]	; 0xe0
   1f438:	cmp	r2, #0
   1f43c:	beq	1f464 <flatcc_builder_exit_user_frame@@Base+0x30>
   1f440:	mov	r3, r0
   1f444:	sub	r0, r2, #4
   1f448:	ldr	r1, [r3, #108]	; 0x6c
   1f44c:	str	r0, [r3, #228]	; 0xe4
   1f450:	add	r2, r1, r2
   1f454:	ldr	r2, [r2, #-4]
   1f458:	mov	r0, r2
   1f45c:	str	r2, [r3, #224]	; 0xe0
   1f460:	bx	lr
   1f464:	ldr	r3, [pc, #36]	; 1f490 <flatcc_builder_exit_user_frame@@Base+0x5c>
   1f468:	movw	r2, #542	; 0x21e
   1f46c:	str	r4, [sp, #-8]!
   1f470:	ldr	r1, [pc, #28]	; 1f494 <flatcc_builder_exit_user_frame@@Base+0x60>
   1f474:	str	lr, [sp, #4]
   1f478:	ldr	r0, [pc, #24]	; 1f498 <flatcc_builder_exit_user_frame@@Base+0x64>
   1f47c:	add	r3, pc, r3
   1f480:	add	r3, r3, #136	; 0x88
   1f484:	add	r1, pc, r1
   1f488:	add	r0, pc, r0
   1f48c:	bl	129e0 <__assert_fail@plt>
   1f490:	andeq	r8, r0, r8, lsr lr
   1f494:	andeq	r9, r0, r0, lsl #11
   1f498:	andeq	r9, r0, ip, lsr #12

0001f49c <flatcc_builder_exit_user_frame_at@@Base>:
   1f49c:	ldr	r2, [r0, #224]	; 0xe0
   1f4a0:	cmp	r2, r1
   1f4a4:	bcc	1f4b0 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   1f4a8:	str	r1, [r0, #224]	; 0xe0
   1f4ac:	b	1f434 <flatcc_builder_exit_user_frame@@Base>
   1f4b0:	ldr	r3, [pc, #36]	; 1f4dc <flatcc_builder_exit_user_frame_at@@Base+0x40>
   1f4b4:	movw	r2, #551	; 0x227
   1f4b8:	str	r4, [sp, #-8]!
   1f4bc:	ldr	r1, [pc, #28]	; 1f4e0 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   1f4c0:	str	lr, [sp, #4]
   1f4c4:	ldr	r0, [pc, #24]	; 1f4e4 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   1f4c8:	add	r3, pc, r3
   1f4cc:	add	r3, r3, #168	; 0xa8
   1f4d0:	add	r1, pc, r1
   1f4d4:	add	r0, pc, r0
   1f4d8:	bl	129e0 <__assert_fail@plt>
   1f4dc:	andeq	r8, r0, ip, ror #27
   1f4e0:	andeq	r9, r0, r4, lsr r5
   1f4e4:	strdeq	r9, [r0], -ip

0001f4e8 <flatcc_builder_get_current_user_frame@@Base>:
   1f4e8:	ldr	r0, [r0, #224]	; 0xe0
   1f4ec:	bx	lr

0001f4f0 <flatcc_builder_get_user_frame_ptr@@Base>:
   1f4f0:	ldr	r0, [r0, #108]	; 0x6c
   1f4f4:	add	r0, r0, r1
   1f4f8:	bx	lr

0001f4fc <flatcc_builder_embed_buffer@@Base>:
   1f4fc:	strd	r4, [sp, #-20]!	; 0xffffffec
   1f500:	mov	r5, r3
   1f504:	mov	r4, r0
   1f508:	ldr	r3, [r0, #152]	; 0x98
   1f50c:	strd	r6, [sp, #8]
   1f510:	mov	r7, r2
   1f514:	mov	r2, r1
   1f518:	ldr	r6, [pc, #356]	; 1f684 <flatcc_builder_embed_buffer@@Base+0x188>
   1f51c:	str	lr, [sp, #16]
   1f520:	sub	sp, sp, #92	; 0x5c
   1f524:	add	r1, sp, #112	; 0x70
   1f528:	adds	r3, r3, #0
   1f52c:	movne	r3, #1
   1f530:	bl	1ead0 <flatcc_builder_default_alloc@@Base+0x190>
   1f534:	cmp	r0, #0
   1f538:	add	r6, pc, r6
   1f53c:	bne	1f654 <flatcc_builder_embed_buffer@@Base+0x158>
   1f540:	ldr	r3, [sp, #116]	; 0x74
   1f544:	str	r0, [sp, #16]
   1f548:	ldr	r1, [r4, #136]	; 0x88
   1f54c:	str	r0, [sp, #20]
   1f550:	ldrh	r2, [sp, #112]	; 0x70
   1f554:	tst	r3, #2
   1f558:	ldr	r0, [r4, #152]	; 0x98
   1f55c:	movne	ip, #4
   1f560:	moveq	ip, #0
   1f564:	sub	r3, r1, r5
   1f568:	sub	r3, r3, ip
   1f56c:	sub	r2, r2, #1
   1f570:	and	r3, r3, r2
   1f574:	add	r2, r5, r3
   1f578:	cmp	r0, #0
   1f57c:	str	r2, [sp, #12]
   1f580:	beq	1f5a4 <flatcc_builder_embed_buffer@@Base+0xa8>
   1f584:	mov	ip, #1
   1f588:	mov	r2, #4
   1f58c:	mov	r0, r2
   1f590:	str	r2, [sp, #16]
   1f594:	str	ip, [sp, #20]
   1f598:	add	ip, sp, #12
   1f59c:	str	ip, [sp, #24]
   1f5a0:	str	r2, [sp, #28]
   1f5a4:	cmp	r5, #0
   1f5a8:	beq	1f5d0 <flatcc_builder_embed_buffer@@Base+0xd4>
   1f5ac:	ldr	r2, [sp, #20]
   1f5b0:	add	ip, sp, #88	; 0x58
   1f5b4:	add	r0, r0, r5
   1f5b8:	str	r0, [sp, #16]
   1f5bc:	add	r2, r2, #1
   1f5c0:	add	ip, ip, r2, lsl #3
   1f5c4:	str	r2, [sp, #20]
   1f5c8:	str	r7, [ip, #-72]	; 0xffffffb8
   1f5cc:	str	r5, [ip, #-68]	; 0xffffffbc
   1f5d0:	cmp	r3, #0
   1f5d4:	bne	1f624 <flatcc_builder_embed_buffer@@Base+0x128>
   1f5d8:	sub	r5, r1, r0
   1f5dc:	cmp	r1, r5
   1f5e0:	ble	1f660 <flatcc_builder_embed_buffer@@Base+0x164>
   1f5e4:	mov	r3, r5
   1f5e8:	add	r1, sp, #24
   1f5ec:	str	r0, [sp]
   1f5f0:	ldr	r2, [sp, #20]
   1f5f4:	ldr	r0, [r4, #36]	; 0x24
   1f5f8:	ldr	r6, [r4, #44]	; 0x2c
   1f5fc:	blx	r6
   1f600:	cmp	r0, #0
   1f604:	streq	r5, [r4, #136]	; 0x88
   1f608:	bne	1f65c <flatcc_builder_embed_buffer@@Base+0x160>
   1f60c:	mov	r0, r5
   1f610:	add	sp, sp, #92	; 0x5c
   1f614:	ldrd	r4, [sp]
   1f618:	ldrd	r6, [sp, #8]
   1f61c:	add	sp, sp, #16
   1f620:	pop	{pc}		; (ldr pc, [sp], #4)
   1f624:	ldr	ip, [pc, #92]	; 1f688 <flatcc_builder_embed_buffer@@Base+0x18c>
   1f628:	add	r0, r0, r3
   1f62c:	ldr	r2, [sp, #20]
   1f630:	str	r0, [sp, #16]
   1f634:	ldr	lr, [r6, ip]
   1f638:	add	ip, sp, #88	; 0x58
   1f63c:	add	r2, r2, #1
   1f640:	add	ip, ip, r2, lsl #3
   1f644:	str	r2, [sp, #20]
   1f648:	str	lr, [ip, #-72]	; 0xffffffb8
   1f64c:	str	r3, [ip, #-68]	; 0xffffffbc
   1f650:	b	1f5d8 <flatcc_builder_embed_buffer@@Base+0xdc>
   1f654:	mov	r5, #0
   1f658:	b	1f60c <flatcc_builder_embed_buffer@@Base+0x110>
   1f65c:	bl	1ec04 <flatcc_builder_default_alloc@@Base+0x2c4>
   1f660:	ldr	r3, [pc, #36]	; 1f68c <flatcc_builder_embed_buffer@@Base+0x190>
   1f664:	movw	r2, #647	; 0x287
   1f668:	ldr	r1, [pc, #32]	; 1f690 <flatcc_builder_embed_buffer@@Base+0x194>
   1f66c:	ldr	r0, [pc, #32]	; 1f694 <flatcc_builder_embed_buffer@@Base+0x198>
   1f670:	add	r3, pc, r3
   1f674:	add	r3, r3, #44	; 0x2c
   1f678:	add	r1, pc, r1
   1f67c:	add	r0, pc, r0
   1f680:	bl	129e0 <__assert_fail@plt>
   1f684:	andeq	sl, r1, r0, asr #21
   1f688:	andeq	r0, r0, r4, rrx
   1f68c:	andeq	r8, r0, r4, asr #24
   1f690:	andeq	r9, r0, ip, lsl #7
   1f694:	andeq	r9, r0, r0, lsl r4

0001f698 <flatcc_builder_create_buffer@@Base>:
   1f698:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f69c:	mov	r4, r0
   1f6a0:	strd	r6, [sp, #8]
   1f6a4:	mov	r6, r3
   1f6a8:	strd	r8, [sp, #16]
   1f6ac:	mov	r8, #0
   1f6b0:	strd	sl, [sp, #24]
   1f6b4:	mov	sl, r1
   1f6b8:	str	lr, [sp, #32]
   1f6bc:	sub	sp, sp, #100	; 0x64
   1f6c0:	ldr	r9, [sp, #140]	; 0x8c
   1f6c4:	add	r1, sp, #136	; 0x88
   1f6c8:	str	r8, [sp, #20]
   1f6cc:	ldr	r5, [pc, #496]	; 1f8c4 <flatcc_builder_create_buffer@@Base+0x22c>
   1f6d0:	and	r7, r9, #1
   1f6d4:	mov	r3, r7
   1f6d8:	bl	1ead0 <flatcc_builder_default_alloc@@Base+0x190>
   1f6dc:	cmp	r0, r8
   1f6e0:	add	r5, pc, r5
   1f6e4:	bne	1f838 <flatcc_builder_create_buffer@@Base+0x1a0>
   1f6e8:	ldrh	r2, [r4, #128]	; 0x80
   1f6ec:	ldrh	r3, [sp, #136]	; 0x88
   1f6f0:	ldr	ip, [r4, #136]	; 0x88
   1f6f4:	cmp	r2, r3
   1f6f8:	strhcc	r3, [r4, #128]	; 0x80
   1f6fc:	cmp	sl, #0
   1f700:	ldrne	r2, [sl]
   1f704:	ldreq	lr, [sp, #20]
   1f708:	movne	lr, r2
   1f70c:	strne	r2, [sp, #20]
   1f710:	sub	r2, r3, #1
   1f714:	sub	r3, ip, #4
   1f718:	cmp	lr, #0
   1f71c:	movne	lr, #4
   1f720:	tst	r9, #2
   1f724:	movne	r0, #4
   1f728:	moveq	r0, #0
   1f72c:	sub	r3, r3, lr
   1f730:	ands	r1, r9, #3
   1f734:	sub	r3, r3, r0
   1f738:	and	r3, r3, r2
   1f73c:	bne	1f858 <flatcc_builder_create_buffer@@Base+0x1c0>
   1f740:	mov	r9, r1
   1f744:	mov	r8, #1
   1f748:	mov	r0, #4
   1f74c:	add	sl, sp, #96	; 0x60
   1f750:	add	r2, r9, #1
   1f754:	str	r0, [sp, #24]
   1f758:	add	r2, sl, r2, lsl #3
   1f75c:	mov	fp, #4
   1f760:	add	sl, sp, #12
   1f764:	cmp	lr, #0
   1f768:	str	r8, [sp, #28]
   1f76c:	strd	sl, [r2, #-72]	; 0xffffffb8
   1f770:	beq	1f79c <flatcc_builder_create_buffer@@Base+0x104>
   1f774:	add	r2, sp, #96	; 0x60
   1f778:	add	r8, r8, #1
   1f77c:	add	r8, r2, r8, lsl #3
   1f780:	add	r0, r0, lr
   1f784:	add	r9, r9, #2
   1f788:	add	r2, sp, #20
   1f78c:	str	r0, [sp, #24]
   1f790:	str	r2, [r8, #-72]	; 0xffffffb8
   1f794:	str	lr, [r8, #-68]	; 0xffffffbc
   1f798:	str	r9, [sp, #28]
   1f79c:	cmp	r3, #0
   1f7a0:	beq	1f7d0 <flatcc_builder_create_buffer@@Base+0x138>
   1f7a4:	ldr	lr, [pc, #284]	; 1f8c8 <flatcc_builder_create_buffer@@Base+0x230>
   1f7a8:	add	r0, r0, r3
   1f7ac:	ldr	r2, [sp, #28]
   1f7b0:	str	r0, [sp, #24]
   1f7b4:	ldr	r5, [r5, lr]
   1f7b8:	add	lr, sp, #96	; 0x60
   1f7bc:	add	r2, r2, #1
   1f7c0:	add	lr, lr, r2, lsl #3
   1f7c4:	str	r2, [sp, #28]
   1f7c8:	str	r5, [lr, #-72]	; 0xffffffb8
   1f7cc:	str	r3, [lr, #-68]	; 0xffffffbc
   1f7d0:	sub	r5, ip, r0
   1f7d4:	cmp	r1, #0
   1f7d8:	mov	r2, r5
   1f7dc:	addne	r2, r5, #4
   1f7e0:	cmp	r7, #0
   1f7e4:	sub	r6, r6, r2
   1f7e8:	ldrne	r3, [r4, #144]	; 0x90
   1f7ec:	mov	r8, r5
   1f7f0:	str	r6, [sp, #12]
   1f7f4:	ldreq	r3, [r4, #140]	; 0x8c
   1f7f8:	cmp	ip, r5
   1f7fc:	sub	r3, r3, r2
   1f800:	str	r3, [sp, #16]
   1f804:	ble	1f89c <flatcc_builder_create_buffer@@Base+0x204>
   1f808:	mov	r3, r5
   1f80c:	add	r1, sp, #32
   1f810:	str	r0, [sp]
   1f814:	ldr	r2, [sp, #28]
   1f818:	ldr	r0, [r4, #36]	; 0x24
   1f81c:	ldr	r6, [r4, #44]	; 0x2c
   1f820:	blx	r6
   1f824:	cmp	r0, #0
   1f828:	bne	1f8c0 <flatcc_builder_create_buffer@@Base+0x228>
   1f82c:	cmp	r5, #0
   1f830:	str	r5, [r4, #136]	; 0x88
   1f834:	beq	1f878 <flatcc_builder_create_buffer@@Base+0x1e0>
   1f838:	mov	r0, r8
   1f83c:	add	sp, sp, #100	; 0x64
   1f840:	ldrd	r4, [sp]
   1f844:	ldrd	r6, [sp, #8]
   1f848:	ldrd	r8, [sp, #16]
   1f84c:	ldrd	sl, [sp, #24]
   1f850:	add	sp, sp, #32
   1f854:	pop	{pc}		; (ldr pc, [sp], #4)
   1f858:	mov	sl, #4
   1f85c:	add	r2, sp, #16
   1f860:	mov	r8, #2
   1f864:	mov	r9, #1
   1f868:	mov	r0, #8
   1f86c:	str	r2, [sp, #32]
   1f870:	str	sl, [sp, #36]	; 0x24
   1f874:	b	1f74c <flatcc_builder_create_buffer@@Base+0xb4>
   1f878:	ldr	r3, [pc, #76]	; 1f8cc <flatcc_builder_create_buffer@@Base+0x234>
   1f87c:	mov	r2, #772	; 0x304
   1f880:	ldr	r1, [pc, #72]	; 1f8d0 <flatcc_builder_create_buffer@@Base+0x238>
   1f884:	ldr	r0, [pc, #72]	; 1f8d4 <flatcc_builder_create_buffer@@Base+0x23c>
   1f888:	add	r3, pc, r3
   1f88c:	add	r3, r3, #204	; 0xcc
   1f890:	add	r1, pc, r1
   1f894:	add	r0, pc, r0
   1f898:	bl	129e0 <__assert_fail@plt>
   1f89c:	ldr	r3, [pc, #52]	; 1f8d8 <flatcc_builder_create_buffer@@Base+0x240>
   1f8a0:	movw	r2, #647	; 0x287
   1f8a4:	ldr	r1, [pc, #48]	; 1f8dc <flatcc_builder_create_buffer@@Base+0x244>
   1f8a8:	ldr	r0, [pc, #48]	; 1f8e0 <flatcc_builder_create_buffer@@Base+0x248>
   1f8ac:	add	r3, pc, r3
   1f8b0:	add	r3, r3, #44	; 0x2c
   1f8b4:	add	r1, pc, r1
   1f8b8:	add	r0, pc, r0
   1f8bc:	bl	129e0 <__assert_fail@plt>
   1f8c0:	bl	1ec04 <flatcc_builder_default_alloc@@Base+0x2c4>
   1f8c4:	andeq	sl, r1, r8, lsl r9
   1f8c8:	andeq	r0, r0, r4, rrx
   1f8cc:	andeq	r8, r0, ip, lsr #20
   1f8d0:	andeq	r9, r0, r4, ror r1
   1f8d4:	strdeq	r9, [r0], -r8
   1f8d8:	andeq	r8, r0, r8, lsl #20
   1f8dc:	andeq	r9, r0, r0, asr r1
   1f8e0:	ldrdeq	r9, [r0], -r4

0001f8e4 <flatcc_builder_create_struct@@Base>:
   1f8e4:	ldr	ip, [pc, #316]	; 1fa28 <flatcc_builder_create_struct@@Base+0x144>
   1f8e8:	cmp	r3, #0
   1f8ec:	strd	r4, [sp, #-20]!	; 0xffffffec
   1f8f0:	strd	r6, [sp, #8]
   1f8f4:	str	lr, [sp, #16]
   1f8f8:	sub	sp, sp, #84	; 0x54
   1f8fc:	add	ip, pc, ip
   1f900:	beq	1fa04 <flatcc_builder_create_struct@@Base+0x120>
   1f904:	mov	r4, r0
   1f908:	ldrh	r0, [r0, #128]	; 0x80
   1f90c:	ldr	lr, [r4, #136]	; 0x88
   1f910:	cmp	r0, r3
   1f914:	mov	r0, #0
   1f918:	strhcc	r3, [r4, #128]	; 0x80
   1f91c:	sub	r5, lr, r2
   1f920:	sub	r3, r3, #1
   1f924:	cmp	r2, r0
   1f928:	and	r3, r3, r5
   1f92c:	str	r0, [sp, #8]
   1f930:	str	r0, [sp, #12]
   1f934:	bne	1f9b8 <flatcc_builder_create_struct@@Base+0xd4>
   1f938:	cmp	r3, #0
   1f93c:	movne	r2, r3
   1f940:	movne	r6, #1
   1f944:	beq	1f9dc <flatcc_builder_create_struct@@Base+0xf8>
   1f948:	ldr	r1, [pc, #220]	; 1fa2c <flatcc_builder_create_struct@@Base+0x148>
   1f94c:	add	r0, r0, #1
   1f950:	add	r7, sp, #80	; 0x50
   1f954:	str	r2, [sp, #8]
   1f958:	add	r0, r7, r0, lsl #3
   1f95c:	sub	r5, lr, r2
   1f960:	ldr	r1, [ip, r1]
   1f964:	str	r6, [sp, #12]
   1f968:	str	r1, [r0, #-72]	; 0xffffffb8
   1f96c:	str	r3, [r0, #-68]	; 0xffffffbc
   1f970:	cmp	lr, r5
   1f974:	ble	1f9dc <flatcc_builder_create_struct@@Base+0xf8>
   1f978:	mov	r3, r5
   1f97c:	add	r1, sp, #16
   1f980:	str	r2, [sp]
   1f984:	ldr	r2, [sp, #12]
   1f988:	ldr	r0, [r4, #36]	; 0x24
   1f98c:	ldr	r6, [r4, #44]	; 0x2c
   1f990:	blx	r6
   1f994:	cmp	r0, #0
   1f998:	bne	1fa00 <flatcc_builder_create_struct@@Base+0x11c>
   1f99c:	mov	r0, r5
   1f9a0:	str	r5, [r4, #136]	; 0x88
   1f9a4:	add	sp, sp, #84	; 0x54
   1f9a8:	ldrd	r4, [sp]
   1f9ac:	ldrd	r6, [sp, #8]
   1f9b0:	add	sp, sp, #16
   1f9b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f9b8:	mov	r0, #1
   1f9bc:	cmp	r3, #0
   1f9c0:	str	r2, [sp, #8]
   1f9c4:	movne	r6, #2
   1f9c8:	strd	r0, [sp, #12]
   1f9cc:	str	r2, [sp, #20]
   1f9d0:	addne	r2, r2, r3
   1f9d4:	beq	1f970 <flatcc_builder_create_struct@@Base+0x8c>
   1f9d8:	b	1f948 <flatcc_builder_create_struct@@Base+0x64>
   1f9dc:	ldr	r3, [pc, #76]	; 1fa30 <flatcc_builder_create_struct@@Base+0x14c>
   1f9e0:	movw	r2, #647	; 0x287
   1f9e4:	ldr	r1, [pc, #72]	; 1fa34 <flatcc_builder_create_struct@@Base+0x150>
   1f9e8:	ldr	r0, [pc, #72]	; 1fa38 <flatcc_builder_create_struct@@Base+0x154>
   1f9ec:	add	r3, pc, r3
   1f9f0:	add	r3, r3, #44	; 0x2c
   1f9f4:	add	r1, pc, r1
   1f9f8:	add	r0, pc, r0
   1f9fc:	bl	129e0 <__assert_fail@plt>
   1fa00:	bl	1ec04 <flatcc_builder_default_alloc@@Base+0x2c4>
   1fa04:	ldr	r3, [pc, #48]	; 1fa3c <flatcc_builder_create_struct@@Base+0x158>
   1fa08:	movw	r2, #783	; 0x30f
   1fa0c:	ldr	r1, [pc, #44]	; 1fa40 <flatcc_builder_create_struct@@Base+0x15c>
   1fa10:	ldr	r0, [pc, #44]	; 1fa44 <flatcc_builder_create_struct@@Base+0x160>
   1fa14:	add	r3, pc, r3
   1fa18:	add	r3, r3, #236	; 0xec
   1fa1c:	add	r1, pc, r1
   1fa20:	add	r0, pc, r0
   1fa24:	bl	129e0 <__assert_fail@plt>
   1fa28:	strdeq	sl, [r1], -ip
   1fa2c:	andeq	r0, r0, r4, rrx
   1fa30:	andeq	r8, r0, r8, asr #17
   1fa34:	andeq	r9, r0, r0, lsl r0
   1fa38:	muleq	r0, r4, r0
   1fa3c:	andeq	r8, r0, r0, lsr #17
   1fa40:	andeq	r8, r0, r8, ror #31
   1fa44:	ldrdeq	r9, [r0], -r0

0001fa48 <flatcc_builder_start_buffer@@Base>:
   1fa48:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1fa4c:	mov	r5, r1
   1fa50:	mov	r4, r0
   1fa54:	ldrh	r1, [r0, #128]	; 0x80
   1fa58:	strd	r6, [sp, #8]
   1fa5c:	mov	r7, r3
   1fa60:	ldr	r6, [pc, #180]	; 1fb1c <flatcc_builder_start_buffer@@Base+0xd4>
   1fa64:	strd	r8, [sp, #16]
   1fa68:	mov	r8, r2
   1fa6c:	str	sl, [sp, #24]
   1fa70:	str	lr, [sp, #28]
   1fa74:	bl	1ec74 <flatcc_builder_default_alloc@@Base+0x334>
   1fa78:	cmp	r0, #0
   1fa7c:	add	r6, pc, r6
   1fa80:	bne	1fb14 <flatcc_builder_start_buffer@@Base+0xcc>
   1fa84:	mov	r3, #1
   1fa88:	ldrh	r9, [r4, #132]	; 0x84
   1fa8c:	cmp	r5, #0
   1fa90:	ldr	ip, [r4, #148]	; 0x94
   1fa94:	strh	r3, [r4, #128]	; 0x80
   1fa98:	ldr	r1, [r4, #32]
   1fa9c:	ldr	lr, [r4, #136]	; 0x88
   1faa0:	add	r2, ip, r3
   1faa4:	ldrh	r3, [r4, #164]	; 0xa4
   1faa8:	strh	r9, [r1, #34]	; 0x22
   1faac:	strh	r8, [r4, #132]	; 0x84
   1fab0:	ldr	r9, [r4, #144]	; 0x90
   1fab4:	ldr	r8, [r4, #152]	; 0x98
   1fab8:	strh	r3, [r1, #32]
   1fabc:	ldr	r3, [r4, #168]	; 0xa8
   1fac0:	strh	r7, [r4, #164]	; 0xa4
   1fac4:	str	r9, [r1, #20]
   1fac8:	str	r8, [r1, #28]
   1facc:	str	lr, [r4, #144]	; 0x90
   1fad0:	str	r2, [r4, #148]	; 0x94
   1fad4:	str	ip, [r4, #152]	; 0x98
   1fad8:	str	r3, [r1, #16]
   1fadc:	beq	1fb08 <flatcc_builder_start_buffer@@Base+0xc0>
   1fae0:	ldr	r2, [r5]
   1fae4:	mov	r3, #1
   1fae8:	str	r2, [r4, #168]	; 0xa8
   1faec:	strh	r3, [r1, #14]
   1faf0:	ldrd	r4, [sp]
   1faf4:	ldrd	r6, [sp, #8]
   1faf8:	ldrd	r8, [sp, #16]
   1fafc:	ldr	sl, [sp, #24]
   1fb00:	add	sp, sp, #28
   1fb04:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb08:	ldr	r3, [pc, #16]	; 1fb20 <flatcc_builder_start_buffer@@Base+0xd8>
   1fb0c:	ldr	r5, [r6, r3]
   1fb10:	b	1fae0 <flatcc_builder_start_buffer@@Base+0x98>
   1fb14:	mvn	r0, #0
   1fb18:	b	1faf0 <flatcc_builder_start_buffer@@Base+0xa8>
   1fb1c:	andeq	sl, r1, ip, ror r5
   1fb20:	andeq	r0, r0, r4, rrx

0001fb24 <flatcc_builder_end_buffer@@Base>:
   1fb24:	ldr	ip, [r0, #32]
   1fb28:	strd	r4, [sp, #-16]!
   1fb2c:	mov	r4, r0
   1fb30:	ldrh	r2, [r0, #164]	; 0xa4
   1fb34:	ldr	r0, [r0, #152]	; 0x98
   1fb38:	ldrh	ip, [ip, #14]
   1fb3c:	and	r2, r2, #2
   1fb40:	str	r6, [sp, #8]
   1fb44:	str	lr, [sp, #12]
   1fb48:	sub	sp, sp, #8
   1fb4c:	cmp	r0, #0
   1fb50:	moveq	r0, r2
   1fb54:	orrne	r0, r2, #1
   1fb58:	cmp	ip, #1
   1fb5c:	bne	1fc44 <flatcc_builder_end_buffer@@Base+0x120>
   1fb60:	ldrh	r2, [r4, #132]	; 0x84
   1fb64:	mov	r3, r1
   1fb68:	add	r1, r4, #168	; 0xa8
   1fb6c:	ldrh	ip, [r4, #128]	; 0x80
   1fb70:	cmp	r2, ip
   1fb74:	movhi	ip, r2
   1fb78:	strhhi	r2, [r4, #128]	; 0x80
   1fb7c:	str	ip, [sp]
   1fb80:	str	r0, [sp, #4]
   1fb84:	mov	r0, r4
   1fb88:	bl	1f698 <flatcc_builder_create_buffer@@Base>
   1fb8c:	subs	r5, r0, #0
   1fb90:	beq	1fc2c <flatcc_builder_end_buffer@@Base+0x108>
   1fb94:	mov	r1, #0
   1fb98:	ldr	r0, [r4, #16]
   1fb9c:	ldr	r3, [r4, #32]
   1fba0:	ldr	r2, [r4, #20]
   1fba4:	ldrh	lr, [r3, #32]
   1fba8:	ldr	ip, [r3, #16]
   1fbac:	ldr	r6, [r3, #20]
   1fbb0:	ldr	r3, [r3, #28]
   1fbb4:	str	r6, [r4, #144]	; 0x90
   1fbb8:	strh	lr, [r4, #164]	; 0xa4
   1fbbc:	str	r3, [r4, #152]	; 0x98
   1fbc0:	str	ip, [r4, #168]	; 0xa8
   1fbc4:	bl	12998 <memset@plt>
   1fbc8:	ldr	r3, [r4, #32]
   1fbcc:	ldr	r0, [r4, #60]	; 0x3c
   1fbd0:	ldr	r2, [r4, #64]	; 0x40
   1fbd4:	ldr	ip, [r3]
   1fbd8:	ldmib	r3, {r1, lr}
   1fbdc:	add	r0, r0, ip
   1fbe0:	sub	r2, r2, ip
   1fbe4:	str	r0, [r4, #16]
   1fbe8:	cmp	r2, r1
   1fbec:	ldrh	r0, [r4, #128]	; 0x80
   1fbf0:	movcs	r2, r1
   1fbf4:	str	lr, [r4, #20]
   1fbf8:	str	ip, [r4, #28]
   1fbfc:	ldrh	ip, [r4, #130]	; 0x82
   1fc00:	str	r2, [r4, #24]
   1fc04:	ldr	r2, [r4, #156]	; 0x9c
   1fc08:	str	r1, [r3, #4]
   1fc0c:	cmp	r0, ip
   1fc10:	sub	r0, r3, #36	; 0x24
   1fc14:	strhcc	ip, [r4, #128]	; 0x80
   1fc18:	ldrh	r1, [r3, #12]
   1fc1c:	sub	r3, r2, #1
   1fc20:	str	r0, [r4, #32]
   1fc24:	strh	r1, [r4, #130]	; 0x82
   1fc28:	str	r3, [r4, #156]	; 0x9c
   1fc2c:	mov	r0, r5
   1fc30:	add	sp, sp, #8
   1fc34:	ldrd	r4, [sp]
   1fc38:	ldr	r6, [sp, #8]
   1fc3c:	add	sp, sp, #12
   1fc40:	pop	{pc}		; (ldr pc, [sp], #4)
   1fc44:	ldr	r3, [pc, #28]	; 1fc68 <flatcc_builder_end_buffer@@Base+0x144>
   1fc48:	movw	r2, #838	; 0x346
   1fc4c:	ldr	r1, [pc, #24]	; 1fc6c <flatcc_builder_end_buffer@@Base+0x148>
   1fc50:	ldr	r0, [pc, #24]	; 1fc70 <flatcc_builder_end_buffer@@Base+0x14c>
   1fc54:	add	r3, pc, r3
   1fc58:	add	r3, r3, #268	; 0x10c
   1fc5c:	add	r1, pc, r1
   1fc60:	add	r0, pc, r0
   1fc64:	bl	129e0 <__assert_fail@plt>
   1fc68:	andeq	r8, r0, r0, ror #12
   1fc6c:	andeq	r8, r0, r8, lsr #27
   1fc70:	muleq	r0, ip, lr

0001fc74 <flatcc_builder_start_struct@@Base>:
   1fc74:	strd	r4, [sp, #-16]!
   1fc78:	mov	r5, r1
   1fc7c:	mov	r1, r2
   1fc80:	mov	r4, r0
   1fc84:	str	r6, [sp, #8]
   1fc88:	str	lr, [sp, #12]
   1fc8c:	bl	1ec74 <flatcc_builder_default_alloc@@Base+0x334>
   1fc90:	cmp	r0, #0
   1fc94:	bne	1fd1c <flatcc_builder_start_struct@@Base+0xa8>
   1fc98:	ldr	r6, [r4, #20]
   1fc9c:	mov	ip, #2
   1fca0:	ldr	r2, [r4, #28]
   1fca4:	ldr	r3, [r4, #64]	; 0x40
   1fca8:	add	r5, r5, r6
   1fcac:	ldr	r0, [r4, #60]	; 0x3c
   1fcb0:	ldr	r1, [r4, #32]
   1fcb4:	sub	r3, r3, r2
   1fcb8:	cmn	r3, #4
   1fcbc:	add	r0, r0, r2
   1fcc0:	mvnhi	r2, #3
   1fcc4:	movhi	r3, r2
   1fcc8:	strh	ip, [r1, #14]
   1fccc:	strhi	r2, [r4, #24]
   1fcd0:	mvn	r2, #3
   1fcd4:	strls	r3, [r4, #24]
   1fcd8:	cmp	r5, r3
   1fcdc:	str	r0, [r4, #16]
   1fce0:	str	r2, [r1, #4]
   1fce4:	str	r5, [r4, #20]
   1fce8:	bcs	1fd00 <flatcc_builder_start_struct@@Base+0x8c>
   1fcec:	add	r0, r0, r6
   1fcf0:	ldrd	r4, [sp]
   1fcf4:	ldr	r6, [sp, #8]
   1fcf8:	add	sp, sp, #12
   1fcfc:	pop	{pc}		; (ldr pc, [sp], #4)
   1fd00:	add	r1, r5, #1
   1fd04:	mov	r0, r4
   1fd08:	bl	1e8b8 <time_struct_buffer@@Base+0xb0>
   1fd0c:	cmp	r0, #0
   1fd10:	bne	1fd1c <flatcc_builder_start_struct@@Base+0xa8>
   1fd14:	ldr	r0, [r4, #16]
   1fd18:	b	1fcec <flatcc_builder_start_struct@@Base+0x78>
   1fd1c:	ldrd	r4, [sp]
   1fd20:	mov	r0, #0
   1fd24:	ldr	r6, [sp, #8]
   1fd28:	add	sp, sp, #12
   1fd2c:	pop	{pc}		; (ldr pc, [sp], #4)

0001fd30 <flatcc_builder_struct_edit@@Base>:
   1fd30:	ldr	r0, [r0, #16]
   1fd34:	bx	lr

0001fd38 <flatcc_builder_end_struct@@Base>:
   1fd38:	ldr	r3, [r0, #32]
   1fd3c:	strd	r4, [sp, #-16]!
   1fd40:	ldrh	r3, [r3, #14]
   1fd44:	str	r6, [sp, #8]
   1fd48:	str	lr, [sp, #12]
   1fd4c:	cmp	r3, #2
   1fd50:	bne	1fdf8 <flatcc_builder_end_struct@@Base+0xc0>
   1fd54:	ldrh	r3, [r0, #130]	; 0x82
   1fd58:	mov	r4, r0
   1fd5c:	ldr	r1, [r0, #16]
   1fd60:	ldr	r2, [r0, #20]
   1fd64:	bl	1f8e4 <flatcc_builder_create_struct@@Base>
   1fd68:	subs	r5, r0, #0
   1fd6c:	beq	1fde4 <flatcc_builder_end_struct@@Base+0xac>
   1fd70:	mov	r1, #0
   1fd74:	ldr	r0, [r4, #16]
   1fd78:	ldr	r2, [r4, #20]
   1fd7c:	bl	12998 <memset@plt>
   1fd80:	ldr	r3, [r4, #32]
   1fd84:	ldr	r0, [r4, #60]	; 0x3c
   1fd88:	ldr	r2, [r4, #64]	; 0x40
   1fd8c:	ldr	ip, [r3]
   1fd90:	ldmib	r3, {r1, lr}
   1fd94:	add	r0, r0, ip
   1fd98:	sub	r2, r2, ip
   1fd9c:	str	r0, [r4, #16]
   1fda0:	cmp	r2, r1
   1fda4:	ldrh	r0, [r4, #128]	; 0x80
   1fda8:	movcs	r2, r1
   1fdac:	str	lr, [r4, #20]
   1fdb0:	str	ip, [r4, #28]
   1fdb4:	ldrh	ip, [r4, #130]	; 0x82
   1fdb8:	str	r2, [r4, #24]
   1fdbc:	ldr	r2, [r4, #156]	; 0x9c
   1fdc0:	str	r1, [r3, #4]
   1fdc4:	cmp	r0, ip
   1fdc8:	sub	r0, r3, #36	; 0x24
   1fdcc:	strhcc	ip, [r4, #128]	; 0x80
   1fdd0:	ldrh	r1, [r3, #12]
   1fdd4:	sub	r3, r2, #1
   1fdd8:	str	r0, [r4, #32]
   1fddc:	strh	r1, [r4, #130]	; 0x82
   1fde0:	str	r3, [r4, #156]	; 0x9c
   1fde4:	mov	r0, r5
   1fde8:	ldrd	r4, [sp]
   1fdec:	ldr	r6, [sp, #8]
   1fdf0:	add	sp, sp, #12
   1fdf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1fdf8:	ldr	r3, [pc, #28]	; 1fe1c <flatcc_builder_end_struct@@Base+0xe4>
   1fdfc:	mov	r2, #872	; 0x368
   1fe00:	ldr	r1, [pc, #24]	; 1fe20 <flatcc_builder_end_struct@@Base+0xe8>
   1fe04:	ldr	r0, [pc, #24]	; 1fe24 <flatcc_builder_end_struct@@Base+0xec>
   1fe08:	add	r3, pc, r3
   1fe0c:	add	r3, r3, #296	; 0x128
   1fe10:	add	r1, pc, r1
   1fe14:	add	r0, pc, r0
   1fe18:	bl	129e0 <__assert_fail@plt>
   1fe1c:	andeq	r8, r0, ip, lsr #9
   1fe20:	strdeq	r8, [r0], -r4
   1fe24:	andeq	r8, r0, r4, lsl sp

0001fe28 <flatcc_builder_extend_vector@@Base>:
   1fe28:	ldr	r2, [r0, #32]
   1fe2c:	strd	r4, [sp, #-16]!
   1fe30:	ldr	r3, [r2, #20]
   1fe34:	ldr	ip, [r2, #24]
   1fe38:	str	r6, [sp, #8]
   1fe3c:	str	lr, [sp, #12]
   1fe40:	adds	r3, r1, r3
   1fe44:	movcs	r4, #1
   1fe48:	movcc	r4, #0
   1fe4c:	cmp	ip, r3
   1fe50:	orrcc	r4, r4, #1
   1fe54:	cmp	r4, #0
   1fe58:	bne	1feb4 <flatcc_builder_extend_vector@@Base+0x8c>
   1fe5c:	ldr	ip, [r2, #16]
   1fe60:	mov	r5, r0
   1fe64:	ldr	r6, [r0, #20]
   1fe68:	str	r3, [r2, #20]
   1fe6c:	ldr	r3, [r0, #24]
   1fe70:	mla	r1, ip, r1, r6
   1fe74:	cmp	r1, r3
   1fe78:	str	r1, [r0, #20]
   1fe7c:	bcs	1fe98 <flatcc_builder_extend_vector@@Base+0x70>
   1fe80:	ldr	r0, [r5, #16]
   1fe84:	add	r0, r0, r6
   1fe88:	ldrd	r4, [sp]
   1fe8c:	ldr	r6, [sp, #8]
   1fe90:	add	sp, sp, #12
   1fe94:	pop	{pc}		; (ldr pc, [sp], #4)
   1fe98:	add	r1, r1, #1
   1fe9c:	mvn	r2, #3
   1fea0:	bl	1e8b8 <time_struct_buffer@@Base+0xb0>
   1fea4:	cmp	r0, #0
   1fea8:	beq	1fe80 <flatcc_builder_extend_vector@@Base+0x58>
   1feac:	mov	r0, r4
   1feb0:	b	1fe88 <flatcc_builder_extend_vector@@Base+0x60>
   1feb4:	bl	1ec3c <flatcc_builder_default_alloc@@Base+0x2fc>

0001feb8 <flatcc_builder_vector_push@@Base>:
   1feb8:	ldr	r3, [r0, #32]
   1febc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1fec0:	ldrh	r2, [r3, #14]
   1fec4:	strd	r6, [sp, #8]
   1fec8:	str	r8, [sp, #16]
   1fecc:	str	lr, [sp, #20]
   1fed0:	cmp	r2, #4
   1fed4:	bne	1ff68 <flatcc_builder_vector_push@@Base+0xb0>
   1fed8:	mov	r7, r1
   1fedc:	ldr	r2, [r3, #20]
   1fee0:	ldr	r1, [r3, #24]
   1fee4:	cmp	r2, r1
   1fee8:	bhi	1ff8c <flatcc_builder_vector_push@@Base+0xd4>
   1feec:	add	r2, r2, #1
   1fef0:	ldr	r6, [r3, #16]
   1fef4:	mov	r4, r0
   1fef8:	ldr	r5, [r0, #20]
   1fefc:	str	r2, [r3, #20]
   1ff00:	ldr	r3, [r0, #24]
   1ff04:	add	r1, r6, r5
   1ff08:	cmp	r1, r3
   1ff0c:	str	r1, [r0, #20]
   1ff10:	bcs	1ff4c <flatcc_builder_vector_push@@Base+0x94>
   1ff14:	ldr	r3, [r4, #16]
   1ff18:	adds	r3, r3, r5
   1ff1c:	beq	1ff34 <flatcc_builder_vector_push@@Base+0x7c>
   1ff20:	mov	r0, r3
   1ff24:	mov	r2, r6
   1ff28:	mov	r1, r7
   1ff2c:	bl	12908 <memcpy@plt>
   1ff30:	mov	r3, r0
   1ff34:	ldrd	r4, [sp]
   1ff38:	mov	r0, r3
   1ff3c:	ldrd	r6, [sp, #8]
   1ff40:	ldr	r8, [sp, #16]
   1ff44:	add	sp, sp, #20
   1ff48:	pop	{pc}		; (ldr pc, [sp], #4)
   1ff4c:	add	r1, r1, #1
   1ff50:	mvn	r2, #3
   1ff54:	bl	1e8b8 <time_struct_buffer@@Base+0xb0>
   1ff58:	cmp	r0, #0
   1ff5c:	beq	1ff14 <flatcc_builder_vector_push@@Base+0x5c>
   1ff60:	mov	r3, #0
   1ff64:	b	1ff34 <flatcc_builder_vector_push@@Base+0x7c>
   1ff68:	ldr	r3, [pc, #64]	; 1ffb0 <flatcc_builder_vector_push@@Base+0xf8>
   1ff6c:	movw	r2, #907	; 0x38b
   1ff70:	ldr	r1, [pc, #60]	; 1ffb4 <flatcc_builder_vector_push@@Base+0xfc>
   1ff74:	ldr	r0, [pc, #60]	; 1ffb8 <flatcc_builder_vector_push@@Base+0x100>
   1ff78:	add	r3, pc, r3
   1ff7c:	add	r3, r3, #324	; 0x144
   1ff80:	add	r1, pc, r1
   1ff84:	add	r0, pc, r0
   1ff88:	bl	129e0 <__assert_fail@plt>
   1ff8c:	ldr	r3, [pc, #40]	; 1ffbc <flatcc_builder_vector_push@@Base+0x104>
   1ff90:	mov	r2, #908	; 0x38c
   1ff94:	ldr	r1, [pc, #36]	; 1ffc0 <flatcc_builder_vector_push@@Base+0x108>
   1ff98:	ldr	r0, [pc, #36]	; 1ffc4 <flatcc_builder_vector_push@@Base+0x10c>
   1ff9c:	add	r3, pc, r3
   1ffa0:	add	r3, r3, #324	; 0x144
   1ffa4:	add	r1, pc, r1
   1ffa8:	add	r0, pc, r0
   1ffac:	bl	129e0 <__assert_fail@plt>
   1ffb0:	andeq	r8, r0, ip, lsr r3
   1ffb4:	andeq	r8, r0, r4, lsl #21
   1ffb8:	ldrdeq	r8, [r0], -r0
   1ffbc:	andeq	r8, r0, r8, lsl r3
   1ffc0:	andeq	r8, r0, r0, ror #20
   1ffc4:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>

0001ffc8 <flatcc_builder_append_vector@@Base>:
   1ffc8:	ldr	ip, [r0, #32]
   1ffcc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ffd0:	ldrh	r3, [ip, #14]
   1ffd4:	strd	r6, [sp, #8]
   1ffd8:	str	r8, [sp, #16]
   1ffdc:	str	lr, [sp, #20]
   1ffe0:	cmp	r3, #4
   1ffe4:	bne	20090 <flatcc_builder_append_vector@@Base+0xc8>
   1ffe8:	mov	r6, r1
   1ffec:	ldr	r1, [ip, #20]
   1fff0:	ldr	r4, [ip, #24]
   1fff4:	adds	r1, r2, r1
   1fff8:	movcs	r3, #1
   1fffc:	movcc	r3, #0
   20000:	cmp	r4, r1
   20004:	movcs	r4, r3
   20008:	orrcc	r4, r3, #1
   2000c:	cmp	r4, #0
   20010:	bne	200b4 <flatcc_builder_append_vector@@Base+0xec>
   20014:	ldr	r7, [ip, #16]
   20018:	mov	r5, r0
   2001c:	ldr	r8, [r0, #20]
   20020:	ldr	r3, [r0, #24]
   20024:	mul	r7, r7, r2
   20028:	str	r1, [ip, #20]
   2002c:	add	r1, r7, r8
   20030:	cmp	r1, r3
   20034:	str	r1, [r0, #20]
   20038:	bcs	20074 <flatcc_builder_append_vector@@Base+0xac>
   2003c:	ldr	r3, [r5, #16]
   20040:	adds	r3, r3, r8
   20044:	beq	2005c <flatcc_builder_append_vector@@Base+0x94>
   20048:	mov	r0, r3
   2004c:	mov	r2, r7
   20050:	mov	r1, r6
   20054:	bl	12908 <memcpy@plt>
   20058:	mov	r3, r0
   2005c:	ldrd	r4, [sp]
   20060:	mov	r0, r3
   20064:	ldrd	r6, [sp, #8]
   20068:	ldr	r8, [sp, #16]
   2006c:	add	sp, sp, #20
   20070:	pop	{pc}		; (ldr pc, [sp], #4)
   20074:	add	r1, r1, #1
   20078:	mvn	r2, #3
   2007c:	bl	1e8b8 <time_struct_buffer@@Base+0xb0>
   20080:	cmp	r0, #0
   20084:	beq	2003c <flatcc_builder_append_vector@@Base+0x74>
   20088:	mov	r3, r4
   2008c:	b	2005c <flatcc_builder_append_vector@@Base+0x94>
   20090:	ldr	r3, [pc, #32]	; 200b8 <flatcc_builder_append_vector@@Base+0xf0>
   20094:	movw	r2, #915	; 0x393
   20098:	ldr	r1, [pc, #28]	; 200bc <flatcc_builder_append_vector@@Base+0xf4>
   2009c:	ldr	r0, [pc, #28]	; 200c0 <flatcc_builder_append_vector@@Base+0xf8>
   200a0:	add	r3, pc, r3
   200a4:	add	r3, r3, #352	; 0x160
   200a8:	add	r1, pc, r1
   200ac:	add	r0, pc, r0
   200b0:	bl	129e0 <__assert_fail@plt>
   200b4:	bl	1ec3c <flatcc_builder_default_alloc@@Base+0x2fc>
   200b8:	andeq	r8, r0, r4, lsl r2
   200bc:	andeq	r8, r0, ip, asr r9
   200c0:	andeq	r8, r0, r8, lsr #21

000200c4 <flatcc_builder_extend_offset_vector@@Base>:
   200c4:	ldr	ip, [r0, #32]
   200c8:	strd	r4, [sp, #-16]!
   200cc:	ldr	r3, [ip, #20]
   200d0:	str	r6, [sp, #8]
   200d4:	str	lr, [sp, #12]
   200d8:	adds	r2, r1, r3
   200dc:	movcs	r3, #1
   200e0:	movcc	r3, #0
   200e4:	cmn	r2, #-1073741823	; 0xc0000001
   200e8:	movls	r4, #0
   200ec:	movhi	r4, #1
   200f0:	orrs	r4, r3, r4
   200f4:	bne	2014c <flatcc_builder_extend_offset_vector@@Base+0x88>
   200f8:	ldr	r6, [r0, #20]
   200fc:	mov	r5, r0
   20100:	ldr	r3, [r0, #24]
   20104:	str	r2, [ip, #20]
   20108:	add	r1, r6, r1, lsl #2
   2010c:	cmp	r1, r3
   20110:	str	r1, [r0, #20]
   20114:	bcs	20130 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   20118:	ldr	r0, [r5, #16]
   2011c:	add	r0, r0, r6
   20120:	ldrd	r4, [sp]
   20124:	ldr	r6, [sp, #8]
   20128:	add	sp, sp, #12
   2012c:	pop	{pc}		; (ldr pc, [sp], #4)
   20130:	add	r1, r1, #1
   20134:	mvn	r2, #3
   20138:	bl	1e8b8 <time_struct_buffer@@Base+0xb0>
   2013c:	cmp	r0, #0
   20140:	beq	20118 <flatcc_builder_extend_offset_vector@@Base+0x54>
   20144:	mov	r0, r4
   20148:	b	20120 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   2014c:	bl	1ec3c <flatcc_builder_default_alloc@@Base+0x2fc>

00020150 <flatcc_builder_offset_vector_push@@Base>:
   20150:	ldr	r2, [r0, #32]
   20154:	strd	r4, [sp, #-16]!
   20158:	ldrh	r3, [r2, #14]
   2015c:	str	r6, [sp, #8]
   20160:	str	lr, [sp, #12]
   20164:	cmp	r3, #5
   20168:	bne	201e4 <flatcc_builder_offset_vector_push@@Base+0x94>
   2016c:	ldr	r3, [r2, #20]
   20170:	cmn	r3, #-1073741823	; 0xc0000001
   20174:	beq	201d0 <flatcc_builder_offset_vector_push@@Base+0x80>
   20178:	ldr	r5, [r0, #20]
   2017c:	mov	r6, r1
   20180:	add	r3, r3, #1
   20184:	mov	r4, r0
   20188:	ldr	r1, [r0, #24]
   2018c:	str	r3, [r2, #20]
   20190:	add	r3, r5, #4
   20194:	cmp	r3, r1
   20198:	str	r3, [r0, #20]
   2019c:	bcs	201bc <flatcc_builder_offset_vector_push@@Base+0x6c>
   201a0:	ldr	r3, [r4, #16]
   201a4:	adds	r0, r3, r5
   201a8:	strne	r6, [r3, r5]
   201ac:	ldrd	r4, [sp]
   201b0:	ldr	r6, [sp, #8]
   201b4:	add	sp, sp, #12
   201b8:	pop	{pc}		; (ldr pc, [sp], #4)
   201bc:	mvn	r2, #3
   201c0:	add	r1, r5, #5
   201c4:	bl	1e8b8 <time_struct_buffer@@Base+0xb0>
   201c8:	cmp	r0, #0
   201cc:	beq	201a0 <flatcc_builder_offset_vector_push@@Base+0x50>
   201d0:	ldrd	r4, [sp]
   201d4:	mov	r0, #0
   201d8:	ldr	r6, [sp, #8]
   201dc:	add	sp, sp, #12
   201e0:	pop	{pc}		; (ldr pc, [sp], #4)
   201e4:	ldr	r3, [pc, #28]	; 20208 <flatcc_builder_offset_vector_push@@Base+0xb8>
   201e8:	movw	r2, #934	; 0x3a6
   201ec:	ldr	r1, [pc, #24]	; 2020c <flatcc_builder_offset_vector_push@@Base+0xbc>
   201f0:	ldr	r0, [pc, #24]	; 20210 <flatcc_builder_offset_vector_push@@Base+0xc0>
   201f4:	add	r3, pc, r3
   201f8:	add	r3, r3, #384	; 0x180
   201fc:	add	r1, pc, r1
   20200:	add	r0, pc, r0
   20204:	bl	129e0 <__assert_fail@plt>
   20208:	andeq	r8, r0, r0, asr #1
   2020c:	andeq	r8, r0, r8, lsl #16
   20210:	andeq	r8, r0, r0, asr #19

00020214 <flatcc_builder_append_offset_vector@@Base>:
   20214:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20218:	mov	r4, r1
   2021c:	ldr	r1, [r0, #32]
   20220:	ldrh	r3, [r1, #14]
   20224:	strd	r6, [sp, #8]
   20228:	str	r8, [sp, #16]
   2022c:	str	lr, [sp, #20]
   20230:	cmp	r3, #5
   20234:	bne	202d4 <flatcc_builder_append_offset_vector@@Base+0xc0>
   20238:	ldr	r3, [r1, #20]
   2023c:	adds	r3, r2, r3
   20240:	movcs	lr, #1
   20244:	movcc	lr, #0
   20248:	cmn	r3, #-1073741823	; 0xc0000001
   2024c:	movls	ip, #0
   20250:	movhi	ip, #1
   20254:	orrs	r8, lr, ip
   20258:	bne	202f8 <flatcc_builder_append_offset_vector@@Base+0xe4>
   2025c:	ldr	r7, [r0, #20]
   20260:	lsl	r6, r2, #2
   20264:	mov	r5, r0
   20268:	str	r3, [r1, #20]
   2026c:	ldr	r3, [r0, #24]
   20270:	add	r1, r6, r7
   20274:	cmp	r1, r3
   20278:	str	r1, [r0, #20]
   2027c:	bcs	202b8 <flatcc_builder_append_offset_vector@@Base+0xa4>
   20280:	ldr	r3, [r5, #16]
   20284:	adds	r3, r3, r7
   20288:	beq	202a0 <flatcc_builder_append_offset_vector@@Base+0x8c>
   2028c:	mov	r0, r3
   20290:	mov	r2, r6
   20294:	mov	r1, r4
   20298:	bl	12908 <memcpy@plt>
   2029c:	mov	r3, r0
   202a0:	ldrd	r4, [sp]
   202a4:	mov	r0, r3
   202a8:	ldrd	r6, [sp, #8]
   202ac:	ldr	r8, [sp, #16]
   202b0:	add	sp, sp, #20
   202b4:	pop	{pc}		; (ldr pc, [sp], #4)
   202b8:	add	r1, r1, #1
   202bc:	mvn	r2, #3
   202c0:	bl	1e8b8 <time_struct_buffer@@Base+0xb0>
   202c4:	cmp	r0, #0
   202c8:	beq	20280 <flatcc_builder_append_offset_vector@@Base+0x6c>
   202cc:	mov	r3, r8
   202d0:	b	202a0 <flatcc_builder_append_offset_vector@@Base+0x8c>
   202d4:	ldr	r3, [pc, #32]	; 202fc <flatcc_builder_append_offset_vector@@Base+0xe8>
   202d8:	mov	r2, #948	; 0x3b4
   202dc:	ldr	r1, [pc, #28]	; 20300 <flatcc_builder_append_offset_vector@@Base+0xec>
   202e0:	ldr	r0, [pc, #28]	; 20304 <flatcc_builder_append_offset_vector@@Base+0xf0>
   202e4:	add	r3, pc, r3
   202e8:	add	r3, r3, #420	; 0x1a4
   202ec:	add	r1, pc, r1
   202f0:	add	r0, pc, r0
   202f4:	bl	129e0 <__assert_fail@plt>
   202f8:	bl	1ec3c <flatcc_builder_default_alloc@@Base+0x2fc>
   202fc:	ldrdeq	r7, [r0], -r0
   20300:	andeq	r8, r0, r8, lsl r7
   20304:	ldrdeq	r8, [r0], -r0

00020308 <flatcc_builder_extend_string@@Base>:
   20308:	ldr	r2, [r0, #32]
   2030c:	strd	r4, [sp, #-16]!
   20310:	ldrh	r3, [r2, #14]
   20314:	str	r6, [sp, #8]
   20318:	str	lr, [sp, #12]
   2031c:	cmp	r3, #6
   20320:	bne	20388 <flatcc_builder_extend_string@@Base+0x80>
   20324:	ldr	r3, [r2, #20]
   20328:	adds	r3, r1, r3
   2032c:	bcs	20384 <flatcc_builder_extend_string@@Base+0x7c>
   20330:	ldr	r5, [r0, #20]
   20334:	mov	r4, r0
   20338:	str	r3, [r2, #20]
   2033c:	ldr	r3, [r0, #24]
   20340:	add	r1, r1, r5
   20344:	cmp	r1, r3
   20348:	str	r1, [r0, #20]
   2034c:	bcs	20368 <flatcc_builder_extend_string@@Base+0x60>
   20350:	ldr	r0, [r4, #16]
   20354:	add	r0, r0, r5
   20358:	ldrd	r4, [sp]
   2035c:	ldr	r6, [sp, #8]
   20360:	add	sp, sp, #12
   20364:	pop	{pc}		; (ldr pc, [sp], #4)
   20368:	add	r1, r1, #1
   2036c:	mvn	r2, #3
   20370:	bl	1e8b8 <time_struct_buffer@@Base+0xb0>
   20374:	cmp	r0, #0
   20378:	beq	20350 <flatcc_builder_extend_string@@Base+0x48>
   2037c:	mov	r0, #0
   20380:	b	20358 <flatcc_builder_extend_string@@Base+0x50>
   20384:	bl	1ec3c <flatcc_builder_default_alloc@@Base+0x2fc>
   20388:	ldr	r3, [pc, #28]	; 203ac <flatcc_builder_extend_string@@Base+0xa4>
   2038c:	movw	r2, #957	; 0x3bd
   20390:	ldr	r1, [pc, #24]	; 203b0 <flatcc_builder_extend_string@@Base+0xa8>
   20394:	ldr	r0, [pc, #24]	; 203b4 <flatcc_builder_extend_string@@Base+0xac>
   20398:	add	r3, pc, r3
   2039c:	add	r3, r3, #456	; 0x1c8
   203a0:	add	r1, pc, r1
   203a4:	add	r0, pc, r0
   203a8:	bl	129e0 <__assert_fail@plt>
   203ac:	andeq	r7, r0, ip, lsl pc
   203b0:	andeq	r8, r0, r4, ror #12
   203b4:	andeq	r8, r0, r0, asr r8

000203b8 <flatcc_builder_append_string@@Base>:
   203b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   203bc:	strd	r6, [sp, #8]
   203c0:	mov	r7, r1
   203c4:	ldr	r1, [r0, #32]
   203c8:	str	r8, [sp, #16]
   203cc:	str	lr, [sp, #20]
   203d0:	ldrh	r3, [r1, #14]
   203d4:	cmp	r3, #6
   203d8:	bne	20464 <flatcc_builder_append_string@@Base+0xac>
   203dc:	ldr	r3, [r1, #20]
   203e0:	mov	r5, r2
   203e4:	adds	r3, r2, r3
   203e8:	bcs	20460 <flatcc_builder_append_string@@Base+0xa8>
   203ec:	ldr	r6, [r0, #20]
   203f0:	mov	r4, r0
   203f4:	str	r3, [r1, #20]
   203f8:	ldr	r3, [r0, #24]
   203fc:	add	r1, r2, r6
   20400:	cmp	r1, r3
   20404:	str	r1, [r0, #20]
   20408:	bcs	20444 <flatcc_builder_append_string@@Base+0x8c>
   2040c:	ldr	r3, [r4, #16]
   20410:	adds	r3, r3, r6
   20414:	beq	2042c <flatcc_builder_append_string@@Base+0x74>
   20418:	mov	r0, r3
   2041c:	mov	r2, r5
   20420:	mov	r1, r7
   20424:	bl	12908 <memcpy@plt>
   20428:	mov	r3, r0
   2042c:	ldrd	r4, [sp]
   20430:	mov	r0, r3
   20434:	ldrd	r6, [sp, #8]
   20438:	ldr	r8, [sp, #16]
   2043c:	add	sp, sp, #20
   20440:	pop	{pc}		; (ldr pc, [sp], #4)
   20444:	add	r1, r1, #1
   20448:	mvn	r2, #3
   2044c:	bl	1e8b8 <time_struct_buffer@@Base+0xb0>
   20450:	cmp	r0, #0
   20454:	beq	2040c <flatcc_builder_append_string@@Base+0x54>
   20458:	mov	r3, #0
   2045c:	b	2042c <flatcc_builder_append_string@@Base+0x74>
   20460:	bl	1ec3c <flatcc_builder_default_alloc@@Base+0x2fc>
   20464:	ldr	r3, [pc, #28]	; 20488 <flatcc_builder_append_string@@Base+0xd0>
   20468:	movw	r2, #966	; 0x3c6
   2046c:	ldr	r1, [pc, #24]	; 2048c <flatcc_builder_append_string@@Base+0xd4>
   20470:	ldr	r0, [pc, #24]	; 20490 <flatcc_builder_append_string@@Base+0xd8>
   20474:	add	r3, pc, r3
   20478:	add	r3, r3, #488	; 0x1e8
   2047c:	add	r1, pc, r1
   20480:	add	r0, pc, r0
   20484:	bl	129e0 <__assert_fail@plt>
   20488:	andeq	r7, r0, r0, asr #28
   2048c:	andeq	r8, r0, r8, lsl #11
   20490:	andeq	r8, r0, r4, ror r7

00020494 <flatcc_builder_append_string_str@@Base>:
   20494:	strd	r4, [sp, #-16]!
   20498:	mov	r5, r0
   2049c:	mov	r0, r1
   204a0:	mov	r4, r1
   204a4:	str	r6, [sp, #8]
   204a8:	str	lr, [sp, #12]
   204ac:	bl	12974 <strlen@plt>
   204b0:	mov	r2, r0
   204b4:	mov	r1, r4
   204b8:	ldr	r6, [sp, #8]
   204bc:	mov	r0, r5
   204c0:	ldrd	r4, [sp]
   204c4:	ldr	lr, [sp, #12]
   204c8:	add	sp, sp, #16
   204cc:	b	203b8 <flatcc_builder_append_string@@Base>

000204d0 <flatcc_builder_append_string_strn@@Base>:
   204d0:	strd	r4, [sp, #-16]!
   204d4:	mov	r4, r1
   204d8:	mov	r1, #0
   204dc:	str	r6, [sp, #8]
   204e0:	mov	r6, r0
   204e4:	mov	r0, r4
   204e8:	mov	r5, r2
   204ec:	str	lr, [sp, #12]
   204f0:	bl	129b0 <memchr@plt>
   204f4:	cmp	r0, #0
   204f8:	mov	r1, r4
   204fc:	ldr	lr, [sp, #12]
   20500:	subne	r5, r0, r4
   20504:	mov	r0, r6
   20508:	mov	r2, r5
   2050c:	ldrd	r4, [sp]
   20510:	ldr	r6, [sp, #8]
   20514:	add	sp, sp, #16
   20518:	b	203b8 <flatcc_builder_append_string@@Base>

0002051c <flatcc_builder_truncate_vector@@Base>:
   2051c:	mov	r3, r0
   20520:	ldr	r0, [r0, #32]
   20524:	str	r4, [sp, #-8]!
   20528:	ldrh	r2, [r0, #14]
   2052c:	str	lr, [sp, #4]
   20530:	cmp	r2, #4
   20534:	bne	20584 <flatcc_builder_truncate_vector@@Base+0x68>
   20538:	mov	lr, r1
   2053c:	ldr	r1, [r0, #20]
   20540:	cmp	r1, lr
   20544:	bcc	205a8 <flatcc_builder_truncate_vector@@Base+0x8c>
   20548:	ldr	r2, [r0, #16]
   2054c:	sub	ip, r1, lr
   20550:	mov	r1, #0
   20554:	str	ip, [r0, #20]
   20558:	ldr	r0, [r3, #16]
   2055c:	ldr	ip, [r3, #20]
   20560:	mul	r2, r2, lr
   20564:	sub	ip, ip, r2
   20568:	add	r0, r0, ip
   2056c:	str	ip, [r3, #20]
   20570:	bl	12998 <memset@plt>
   20574:	ldr	r4, [sp]
   20578:	add	sp, sp, #4
   2057c:	mov	r0, #0
   20580:	pop	{pc}		; (ldr pc, [sp], #4)
   20584:	ldr	r3, [pc, #64]	; 205cc <flatcc_builder_truncate_vector@@Base+0xb0>
   20588:	movw	r2, #985	; 0x3d9
   2058c:	ldr	r1, [pc, #60]	; 205d0 <flatcc_builder_truncate_vector@@Base+0xb4>
   20590:	ldr	r0, [pc, #60]	; 205d4 <flatcc_builder_truncate_vector@@Base+0xb8>
   20594:	add	r3, pc, r3
   20598:	add	r3, r3, #520	; 0x208
   2059c:	add	r1, pc, r1
   205a0:	add	r0, pc, r0
   205a4:	bl	129e0 <__assert_fail@plt>
   205a8:	ldr	r3, [pc, #40]	; 205d8 <flatcc_builder_truncate_vector@@Base+0xbc>
   205ac:	movw	r2, #986	; 0x3da
   205b0:	ldr	r1, [pc, #36]	; 205dc <flatcc_builder_truncate_vector@@Base+0xc0>
   205b4:	ldr	r0, [pc, #36]	; 205e0 <flatcc_builder_truncate_vector@@Base+0xc4>
   205b8:	add	r3, pc, r3
   205bc:	add	r3, r3, #520	; 0x208
   205c0:	add	r1, pc, r1
   205c4:	add	r0, pc, r0
   205c8:	bl	129e0 <__assert_fail@plt>
   205cc:	andeq	r7, r0, r0, lsr #26
   205d0:	andeq	r8, r0, r8, ror #8
   205d4:			; <UNDEFINED> instruction: 0x000085b4
   205d8:	strdeq	r7, [r0], -ip
   205dc:	andeq	r8, r0, r4, asr #8
   205e0:	andeq	r8, r0, ip, asr r6

000205e4 <flatcc_builder_truncate_offset_vector@@Base>:
   205e4:	mov	r3, r0
   205e8:	ldr	r0, [r0, #32]
   205ec:	str	r4, [sp, #-8]!
   205f0:	ldrh	r2, [r0, #14]
   205f4:	str	lr, [sp, #4]
   205f8:	cmp	r2, #5
   205fc:	bne	2064c <flatcc_builder_truncate_offset_vector@@Base+0x68>
   20600:	mov	lr, r1
   20604:	ldr	r1, [r0, #20]
   20608:	cmp	r1, lr
   2060c:	bcc	20670 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   20610:	ldr	r2, [r0, #16]
   20614:	sub	ip, r1, lr
   20618:	mov	r1, #0
   2061c:	str	ip, [r0, #20]
   20620:	ldr	r0, [r3, #16]
   20624:	ldr	ip, [r3, #20]
   20628:	mul	r2, r2, lr
   2062c:	sub	ip, ip, r2
   20630:	add	r0, r0, ip
   20634:	str	ip, [r3, #20]
   20638:	bl	12998 <memset@plt>
   2063c:	ldr	r4, [sp]
   20640:	add	sp, sp, #4
   20644:	mov	r0, #0
   20648:	pop	{pc}		; (ldr pc, [sp], #4)
   2064c:	ldr	r3, [pc, #64]	; 20694 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   20650:	movw	r2, #994	; 0x3e2
   20654:	ldr	r1, [pc, #60]	; 20698 <flatcc_builder_truncate_offset_vector@@Base+0xb4>
   20658:	ldr	r0, [pc, #60]	; 2069c <flatcc_builder_truncate_offset_vector@@Base+0xb8>
   2065c:	add	r3, pc, r3
   20660:	add	r3, r3, #552	; 0x228
   20664:	add	r1, pc, r1
   20668:	add	r0, pc, r0
   2066c:	bl	129e0 <__assert_fail@plt>
   20670:	ldr	r3, [pc, #40]	; 206a0 <flatcc_builder_truncate_offset_vector@@Base+0xbc>
   20674:	movw	r2, #995	; 0x3e3
   20678:	ldr	r1, [pc, #36]	; 206a4 <flatcc_builder_truncate_offset_vector@@Base+0xc0>
   2067c:	ldr	r0, [pc, #36]	; 206a8 <flatcc_builder_truncate_offset_vector@@Base+0xc4>
   20680:	add	r3, pc, r3
   20684:	add	r3, r3, #552	; 0x228
   20688:	add	r1, pc, r1
   2068c:	add	r0, pc, r0
   20690:	bl	129e0 <__assert_fail@plt>
   20694:	andeq	r7, r0, r8, asr ip
   20698:	andeq	r8, r0, r0, lsr #7
   2069c:	andeq	r8, r0, r8, asr r5
   206a0:	andeq	r7, r0, r4, lsr ip
   206a4:	andeq	r8, r0, ip, ror r3
   206a8:			; <UNDEFINED> instruction: 0x000085b8

000206ac <flatcc_builder_truncate_string@@Base>:
   206ac:	str	r4, [sp, #-8]!
   206b0:	str	lr, [sp, #4]
   206b4:	ldr	lr, [r0, #32]
   206b8:	ldrh	r2, [lr, #14]
   206bc:	cmp	r2, #6
   206c0:	bne	20710 <flatcc_builder_truncate_string@@Base+0x64>
   206c4:	ldr	r2, [lr, #20]
   206c8:	mov	ip, r1
   206cc:	cmp	r2, r1
   206d0:	bcc	20734 <flatcc_builder_truncate_string@@Base+0x88>
   206d4:	sub	r1, r2, r1
   206d8:	mov	r3, r0
   206dc:	ldr	r0, [r0, #16]
   206e0:	mov	r2, ip
   206e4:	str	r1, [lr, #20]
   206e8:	mov	r1, #0
   206ec:	ldr	lr, [r3, #20]
   206f0:	sub	ip, lr, ip
   206f4:	add	r0, r0, ip
   206f8:	str	ip, [r3, #20]
   206fc:	bl	12998 <memset@plt>
   20700:	ldr	r4, [sp]
   20704:	add	sp, sp, #4
   20708:	mov	r0, #0
   2070c:	pop	{pc}		; (ldr pc, [sp], #4)
   20710:	ldr	r3, [pc, #64]	; 20758 <flatcc_builder_truncate_string@@Base+0xac>
   20714:	movw	r2, #1003	; 0x3eb
   20718:	ldr	r1, [pc, #60]	; 2075c <flatcc_builder_truncate_string@@Base+0xb0>
   2071c:	ldr	r0, [pc, #60]	; 20760 <flatcc_builder_truncate_string@@Base+0xb4>
   20720:	add	r3, pc, r3
   20724:	add	r3, r3, #592	; 0x250
   20728:	add	r1, pc, r1
   2072c:	add	r0, pc, r0
   20730:	bl	129e0 <__assert_fail@plt>
   20734:	ldr	r3, [pc, #40]	; 20764 <flatcc_builder_truncate_string@@Base+0xb8>
   20738:	mov	r2, #1004	; 0x3ec
   2073c:	ldr	r1, [pc, #36]	; 20768 <flatcc_builder_truncate_string@@Base+0xbc>
   20740:	ldr	r0, [pc, #36]	; 2076c <flatcc_builder_truncate_string@@Base+0xc0>
   20744:	add	r3, pc, r3
   20748:	add	r3, r3, #592	; 0x250
   2074c:	add	r1, pc, r1
   20750:	add	r0, pc, r0
   20754:	bl	129e0 <__assert_fail@plt>
   20758:	muleq	r0, r4, fp
   2075c:	ldrdeq	r8, [r0], -ip
   20760:	andeq	r8, r0, r8, asr #9
   20764:	andeq	r7, r0, r0, ror fp
   20768:			; <UNDEFINED> instruction: 0x000082b8
   2076c:	andeq	r8, r0, r0, lsr r5

00020770 <flatcc_builder_start_vector@@Base>:
   20770:	cmp	r2, #4
   20774:	strd	r4, [sp, #-16]!
   20778:	mov	r5, r1
   2077c:	movcs	r1, r2
   20780:	movcc	r1, #4
   20784:	str	r6, [sp, #8]
   20788:	mov	r4, r0
   2078c:	mov	r6, r3
   20790:	str	lr, [sp, #12]
   20794:	bl	1ec74 <flatcc_builder_default_alloc@@Base+0x334>
   20798:	cmp	r0, #0
   2079c:	bne	207f8 <flatcc_builder_start_vector@@Base+0x88>
   207a0:	ldr	r3, [r4, #28]
   207a4:	mov	lr, #4
   207a8:	ldr	r2, [r4, #32]
   207ac:	ldr	r1, [r4, #64]	; 0x40
   207b0:	ldr	ip, [r4, #60]	; 0x3c
   207b4:	strh	lr, [r2, #14]
   207b8:	str	r5, [r2, #16]
   207bc:	sub	r1, r1, r3
   207c0:	str	r0, [r2, #20]
   207c4:	cmn	r1, #4
   207c8:	str	r6, [r2, #24]
   207cc:	add	ip, ip, r3
   207d0:	mvnhi	r3, #3
   207d4:	strls	r1, [r4, #24]
   207d8:	strhi	r3, [r4, #24]
   207dc:	mvn	r3, #3
   207e0:	str	ip, [r4, #16]
   207e4:	str	r3, [r2, #4]
   207e8:	ldrd	r4, [sp]
   207ec:	ldr	r6, [sp, #8]
   207f0:	add	sp, sp, #12
   207f4:	pop	{pc}		; (ldr pc, [sp], #4)
   207f8:	mvn	r0, #0
   207fc:	b	207e8 <flatcc_builder_start_vector@@Base+0x78>

00020800 <flatcc_builder_start_offset_vector@@Base>:
   20800:	mov	r1, #4
   20804:	strd	r4, [sp, #-16]!
   20808:	mov	r4, r0
   2080c:	str	r6, [sp, #8]
   20810:	str	lr, [sp, #12]
   20814:	bl	1ec74 <flatcc_builder_default_alloc@@Base+0x334>
   20818:	cmp	r0, #0
   2081c:	bne	20874 <flatcc_builder_start_offset_vector@@Base+0x74>
   20820:	ldr	ip, [r4, #28]
   20824:	mov	lr, #4
   20828:	mov	r5, #5
   2082c:	ldr	r3, [r4, #32]
   20830:	ldr	r2, [r4, #64]	; 0x40
   20834:	ldr	r1, [r4, #60]	; 0x3c
   20838:	strh	r5, [r3, #14]
   2083c:	str	lr, [r3, #16]
   20840:	sub	r2, r2, ip
   20844:	str	r0, [r3, #20]
   20848:	cmn	r2, #4
   2084c:	mvnhi	r2, #3
   20850:	add	r1, r1, ip
   20854:	str	r1, [r4, #16]
   20858:	str	r2, [r4, #24]
   2085c:	mvn	r2, #3
   20860:	str	r2, [r3, #4]
   20864:	ldrd	r4, [sp]
   20868:	ldr	r6, [sp, #8]
   2086c:	add	sp, sp, #12
   20870:	pop	{pc}		; (ldr pc, [sp], #4)
   20874:	mvn	r0, #0
   20878:	b	20864 <flatcc_builder_start_offset_vector@@Base+0x64>

0002087c <flatcc_builder_start_string@@Base>:
   2087c:	mov	r1, #1
   20880:	strd	r4, [sp, #-16]!
   20884:	mov	r4, r0
   20888:	str	r6, [sp, #8]
   2088c:	str	lr, [sp, #12]
   20890:	bl	1ec74 <flatcc_builder_default_alloc@@Base+0x334>
   20894:	cmp	r0, #0
   20898:	bne	208f0 <flatcc_builder_start_string@@Base+0x74>
   2089c:	ldr	ip, [r4, #28]
   208a0:	mov	lr, #1
   208a4:	mov	r5, #6
   208a8:	ldr	r3, [r4, #32]
   208ac:	ldr	r2, [r4, #64]	; 0x40
   208b0:	ldr	r1, [r4, #60]	; 0x3c
   208b4:	strh	r5, [r3, #14]
   208b8:	str	lr, [r3, #16]
   208bc:	sub	r2, r2, ip
   208c0:	str	r0, [r3, #20]
   208c4:	cmn	r2, #4
   208c8:	mvnhi	r2, #3
   208cc:	add	r1, r1, ip
   208d0:	str	r1, [r4, #16]
   208d4:	str	r2, [r4, #24]
   208d8:	mvn	r2, #3
   208dc:	str	r2, [r3, #4]
   208e0:	ldrd	r4, [sp]
   208e4:	ldr	r6, [sp, #8]
   208e8:	add	sp, sp, #12
   208ec:	pop	{pc}		; (ldr pc, [sp], #4)
   208f0:	mvn	r0, #0
   208f4:	b	208e0 <flatcc_builder_start_string@@Base+0x64>

000208f8 <flatcc_builder_reserve_table@@Base>:
   208f8:	cmp	r1, #0
   208fc:	strd	r4, [sp, #-20]!	; 0xffffffec
   20900:	strd	r6, [sp, #8]
   20904:	str	lr, [sp, #16]
   20908:	sub	sp, sp, #12
   2090c:	blt	209f0 <flatcc_builder_reserve_table@@Base+0xf8>
   20910:	ldr	r2, [r0, #32]
   20914:	add	r1, r1, #2
   20918:	mov	r4, r0
   2091c:	lsl	r5, r1, #1
   20920:	ldr	r1, [r0, #56]	; 0x38
   20924:	ldrh	r6, [r2, #28]
   20928:	ldr	r3, [r2, #16]
   2092c:	add	r6, r3, r6, lsl #1
   20930:	add	r2, r6, r5
   20934:	cmp	r2, r1
   20938:	bhi	209a0 <flatcc_builder_reserve_table@@Base+0xa8>
   2093c:	ldr	r3, [r4, #52]	; 0x34
   20940:	adds	r3, r3, r6
   20944:	mvneq	r0, #0
   20948:	streq	r3, [r4, #4]
   2094c:	beq	2098c <flatcc_builder_reserve_table@@Base+0x94>
   20950:	ldr	r2, [r4, #32]
   20954:	add	r3, r3, #4
   20958:	ldr	r1, [r4, #80]	; 0x50
   2095c:	ldr	r6, [r2, #20]
   20960:	str	r3, [r4, #4]
   20964:	add	r2, r5, r6
   20968:	sub	r2, r2, #3
   2096c:	cmp	r2, r1
   20970:	bhi	209c8 <flatcc_builder_reserve_table@@Base+0xd0>
   20974:	ldr	r3, [r4, #76]	; 0x4c
   20978:	add	r3, r3, r6
   2097c:	clz	r0, r3
   20980:	lsr	r0, r0, #5
   20984:	str	r3, [r4]
   20988:	rsb	r0, r0, #0
   2098c:	add	sp, sp, #12
   20990:	ldrd	r4, [sp]
   20994:	ldrd	r6, [sp, #8]
   20998:	add	sp, sp, #16
   2099c:	pop	{pc}		; (ldr pc, [sp], #4)
   209a0:	mov	ip, #0
   209a4:	add	r1, r0, #52	; 0x34
   209a8:	ldr	r0, [r0, #40]	; 0x28
   209ac:	mov	r3, #1
   209b0:	str	ip, [sp]
   209b4:	ldr	r7, [r4, #48]	; 0x30
   209b8:	blx	r7
   209bc:	cmp	r0, #0
   209c0:	beq	2093c <flatcc_builder_reserve_table@@Base+0x44>
   209c4:	bl	1ea64 <flatcc_builder_default_alloc@@Base+0x124>
   209c8:	mov	ip, #3
   209cc:	mov	r3, #0
   209d0:	ldr	r0, [r4, #40]	; 0x28
   209d4:	add	r1, r4, #76	; 0x4c
   209d8:	str	ip, [sp]
   209dc:	ldr	r5, [r4, #48]	; 0x30
   209e0:	blx	r5
   209e4:	cmp	r0, #0
   209e8:	beq	20974 <flatcc_builder_reserve_table@@Base+0x7c>
   209ec:	b	209c4 <flatcc_builder_reserve_table@@Base+0xcc>
   209f0:	ldr	r3, [pc, #28]	; 20a14 <flatcc_builder_reserve_table@@Base+0x11c>
   209f4:	movw	r2, #1065	; 0x429
   209f8:	ldr	r1, [pc, #24]	; 20a18 <flatcc_builder_reserve_table@@Base+0x120>
   209fc:	ldr	r0, [pc, #24]	; 20a1c <flatcc_builder_reserve_table@@Base+0x124>
   20a00:	add	r3, pc, r3
   20a04:	add	r3, r3, #624	; 0x270
   20a08:	add	r1, pc, r1
   20a0c:	add	r0, pc, r0
   20a10:	bl	129e0 <__assert_fail@plt>
   20a14:			; <UNDEFINED> instruction: 0x000078b4
   20a18:	strdeq	r7, [r0], -ip
   20a1c:	muleq	r0, r8, r2

00020a20 <flatcc_builder_start_table@@Base>:
   20a20:	strd	r4, [sp, #-32]!	; 0xffffffe0
   20a24:	mov	r5, r1
   20a28:	mov	r1, #4
   20a2c:	strd	r6, [sp, #8]
   20a30:	mov	r4, r0
   20a34:	strd	r8, [sp, #16]
   20a38:	str	sl, [sp, #24]
   20a3c:	str	lr, [sp, #28]
   20a40:	sub	sp, sp, #8
   20a44:	bl	1ec74 <flatcc_builder_default_alloc@@Base+0x334>
   20a48:	subs	r7, r0, #0
   20a4c:	bne	20b94 <flatcc_builder_start_table@@Base+0x174>
   20a50:	ldm	r4, {r0, r2}
   20a54:	add	r5, r5, #2
   20a58:	movw	ip, #15186	; 0x3b52
   20a5c:	movt	ip, #12137	; 0x2f69
   20a60:	lsl	r5, r5, #1
   20a64:	mov	r8, #3
   20a68:	ldrh	lr, [r4, #8]
   20a6c:	ldr	r1, [r4, #52]	; 0x34
   20a70:	ldr	sl, [r4, #76]	; 0x4c
   20a74:	ldr	r3, [r4, #32]
   20a78:	sub	r2, r2, r1
   20a7c:	ldr	r9, [r4, #56]	; 0x38
   20a80:	add	r6, r2, lr, lsl #1
   20a84:	sub	r0, r0, sl
   20a88:	ldr	sl, [r4, #12]
   20a8c:	str	r2, [r3, #16]
   20a90:	add	r2, r6, r5
   20a94:	str	r0, [r3, #20]
   20a98:	cmp	r2, r9
   20a9c:	str	sl, [r3, #24]
   20aa0:	strh	lr, [r3, #28]
   20aa4:	strh	r7, [r4, #8]
   20aa8:	str	ip, [r4, #12]
   20aac:	strh	r8, [r3, #14]
   20ab0:	bls	20ad8 <flatcc_builder_start_table@@Base+0xb8>
   20ab4:	mov	r3, #1
   20ab8:	add	r1, r4, #52	; 0x34
   20abc:	str	r7, [sp]
   20ac0:	ldr	r0, [r4, #40]	; 0x28
   20ac4:	ldr	r8, [r4, #48]	; 0x30
   20ac8:	blx	r8
   20acc:	cmp	r0, #0
   20ad0:	bne	20b90 <flatcc_builder_start_table@@Base+0x170>
   20ad4:	ldr	r1, [r4, #52]	; 0x34
   20ad8:	adds	r6, r6, r1
   20adc:	streq	r6, [r4, #4]
   20ae0:	beq	20b94 <flatcc_builder_start_table@@Base+0x174>
   20ae4:	ldr	r1, [r4, #32]
   20ae8:	sub	r2, r5, #3
   20aec:	add	r6, r6, #4
   20af0:	ldr	r3, [r4, #80]	; 0x50
   20af4:	ldr	r5, [r1, #20]
   20af8:	str	r6, [r4, #4]
   20afc:	add	r2, r2, r5
   20b00:	cmp	r2, r3
   20b04:	bhi	20b6c <flatcc_builder_start_table@@Base+0x14c>
   20b08:	ldr	r3, [r4, #76]	; 0x4c
   20b0c:	add	r3, r3, r5
   20b10:	cmp	r3, #0
   20b14:	str	r3, [r4]
   20b18:	beq	20b94 <flatcc_builder_start_table@@Base+0x174>
   20b1c:	ldr	r0, [r4, #28]
   20b20:	movw	r2, #65532	; 0xfffc
   20b24:	ldr	ip, [r4, #32]
   20b28:	ldr	r3, [r4, #64]	; 0x40
   20b2c:	ldr	r1, [r4, #60]	; 0x3c
   20b30:	sub	r3, r3, r0
   20b34:	cmp	r3, r2
   20b38:	add	r1, r1, r0
   20b3c:	movcs	r3, r2
   20b40:	str	r1, [r4, #16]
   20b44:	str	r3, [r4, #24]
   20b48:	str	r2, [ip, #4]
   20b4c:	mov	r0, r7
   20b50:	add	sp, sp, #8
   20b54:	ldrd	r4, [sp]
   20b58:	ldrd	r6, [sp, #8]
   20b5c:	ldrd	r8, [sp, #16]
   20b60:	ldr	sl, [sp, #24]
   20b64:	add	sp, sp, #28
   20b68:	pop	{pc}		; (ldr pc, [sp], #4)
   20b6c:	mov	ip, #3
   20b70:	mov	r3, #0
   20b74:	ldr	r0, [r4, #40]	; 0x28
   20b78:	add	r1, r4, #76	; 0x4c
   20b7c:	str	ip, [sp]
   20b80:	ldr	r6, [r4, #48]	; 0x30
   20b84:	blx	r6
   20b88:	cmp	r0, #0
   20b8c:	beq	20b08 <flatcc_builder_start_table@@Base+0xe8>
   20b90:	bl	1ea64 <flatcc_builder_default_alloc@@Base+0x124>
   20b94:	mvn	r7, #0
   20b98:	b	20b4c <flatcc_builder_start_table@@Base+0x12c>

00020b9c <flatcc_builder_create_vtable@@Base>:
   20b9c:	mov	r3, #0
   20ba0:	strd	r4, [sp, #-16]!
   20ba4:	mov	r5, r0
   20ba8:	ldr	r0, [r0, #152]	; 0x98
   20bac:	cmp	r2, #0
   20bb0:	str	r6, [sp, #8]
   20bb4:	str	lr, [sp, #12]
   20bb8:	sub	sp, sp, #80	; 0x50
   20bbc:	str	r3, [sp, #8]
   20bc0:	str	r3, [sp, #12]
   20bc4:	beq	20c3c <flatcc_builder_create_vtable@@Base+0xa0>
   20bc8:	mov	r3, #1
   20bcc:	cmp	r0, #0
   20bd0:	strd	r2, [sp, #8]
   20bd4:	str	r1, [sp, #16]
   20bd8:	str	r2, [sp, #20]
   20bdc:	beq	20c74 <flatcc_builder_create_vtable@@Base+0xd8>
   20be0:	ldr	r3, [r5, #136]	; 0x88
   20be4:	sub	r4, r3, r2
   20be8:	cmp	r3, r4
   20bec:	ble	20c50 <flatcc_builder_create_vtable@@Base+0xb4>
   20bf0:	mov	r3, r4
   20bf4:	add	r1, sp, #16
   20bf8:	str	r2, [sp]
   20bfc:	ldr	r2, [sp, #12]
   20c00:	ldr	r0, [r5, #36]	; 0x24
   20c04:	ldr	r6, [r5, #44]	; 0x2c
   20c08:	blx	r6
   20c0c:	cmp	r0, #0
   20c10:	bne	20cc0 <flatcc_builder_create_vtable@@Base+0x124>
   20c14:	cmp	r4, #0
   20c18:	str	r4, [r5, #136]	; 0x88
   20c1c:	beq	20c24 <flatcc_builder_create_vtable@@Base+0x88>
   20c20:	add	r4, r4, #1
   20c24:	mov	r0, r4
   20c28:	add	sp, sp, #80	; 0x50
   20c2c:	ldrd	r4, [sp]
   20c30:	ldr	r6, [sp, #8]
   20c34:	add	sp, sp, #12
   20c38:	pop	{pc}		; (ldr pc, [sp], #4)
   20c3c:	cmp	r0, #0
   20c40:	bne	20c50 <flatcc_builder_create_vtable@@Base+0xb4>
   20c44:	ldr	r3, [r5, #180]	; 0xb4
   20c48:	cmp	r3, #0
   20c4c:	beq	20cb8 <flatcc_builder_create_vtable@@Base+0x11c>
   20c50:	ldr	r3, [pc, #108]	; 20cc4 <flatcc_builder_create_vtable@@Base+0x128>
   20c54:	movw	r2, #647	; 0x287
   20c58:	ldr	r1, [pc, #104]	; 20cc8 <flatcc_builder_create_vtable@@Base+0x12c>
   20c5c:	ldr	r0, [pc, #104]	; 20ccc <flatcc_builder_create_vtable@@Base+0x130>
   20c60:	add	r3, pc, r3
   20c64:	add	r3, r3, #44	; 0x2c
   20c68:	add	r1, pc, r1
   20c6c:	add	r0, pc, r0
   20c70:	bl	129e0 <__assert_fail@plt>
   20c74:	ldr	r3, [r5, #180]	; 0xb4
   20c78:	cmp	r3, #0
   20c7c:	bne	20be0 <flatcc_builder_create_vtable@@Base+0x44>
   20c80:	ldr	r4, [r5, #140]	; 0x8c
   20c84:	mov	r0, r2
   20c88:	add	r2, r4, r2
   20c8c:	str	r2, [r5, #140]	; 0x8c
   20c90:	mov	r3, r4
   20c94:	add	r1, sp, #16
   20c98:	str	r0, [sp]
   20c9c:	ldr	r2, [sp, #12]
   20ca0:	ldr	r0, [r5, #36]	; 0x24
   20ca4:	ldr	r5, [r5, #44]	; 0x2c
   20ca8:	blx	r5
   20cac:	cmp	r0, #0
   20cb0:	beq	20c20 <flatcc_builder_create_vtable@@Base+0x84>
   20cb4:	bl	1ea98 <flatcc_builder_default_alloc@@Base+0x158>
   20cb8:	ldr	r4, [r5, #140]	; 0x8c
   20cbc:	b	20c90 <flatcc_builder_create_vtable@@Base+0xf4>
   20cc0:	bl	1ec04 <flatcc_builder_default_alloc@@Base+0x2c4>
   20cc4:	andeq	r7, r0, r4, asr r6
   20cc8:	muleq	r0, ip, sp
   20ccc:	andeq	r7, r0, r0, lsr #28

00020cd0 <flatcc_builder_create_cached_vtable@@Base>:
   20cd0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20cd4:	strd	r6, [sp, #8]
   20cd8:	mov	r6, r0
   20cdc:	strd	r8, [sp, #16]
   20ce0:	mov	r9, r2
   20ce4:	mov	r8, r3
   20ce8:	strd	sl, [sp, #24]
   20cec:	str	lr, [sp, #32]
   20cf0:	sub	sp, sp, #28
   20cf4:	str	r1, [sp, #8]
   20cf8:	ldr	r1, [r0, #116]	; 0x74
   20cfc:	cmp	r1, #0
   20d00:	rsbne	r1, r1, #32
   20d04:	beq	20e8c <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   20d08:	ldr	sl, [r6, #92]	; 0x5c
   20d0c:	lsr	r8, r8, r1
   20d10:	adds	fp, sl, r8, lsl #2
   20d14:	str	fp, [sp, #12]
   20d18:	beq	20f28 <flatcc_builder_create_cached_vtable@@Base+0x258>
   20d1c:	ldr	r5, [sl, r8, lsl #2]
   20d20:	cmp	r5, #0
   20d24:	beq	20f5c <flatcc_builder_create_cached_vtable@@Base+0x28c>
   20d28:	mov	r3, #0
   20d2c:	str	r8, [sp, #16]
   20d30:	mov	r8, fp
   20d34:	mov	fp, r6
   20d38:	ldr	r7, [r6, #68]	; 0x44
   20d3c:	str	r3, [sp, #20]
   20d40:	ldr	r3, [r6, #100]	; 0x64
   20d44:	mov	r6, r3
   20d48:	add	r4, r6, r5
   20d4c:	ldr	r1, [r4, #8]
   20d50:	ldrh	r2, [r7, r1]
   20d54:	add	r1, r7, r1
   20d58:	cmp	r2, r9
   20d5c:	bne	20e38 <flatcc_builder_create_cached_vtable@@Base+0x168>
   20d60:	mov	r2, r9
   20d64:	ldr	r0, [sp, #8]
   20d68:	bl	12914 <memcmp@plt>
   20d6c:	cmp	r0, #0
   20d70:	bne	20e38 <flatcc_builder_create_cached_vtable@@Base+0x168>
   20d74:	ldr	r1, [r4, #4]
   20d78:	ldr	r2, [fp, #152]	; 0x98
   20d7c:	cmp	r1, r2
   20d80:	beq	20e44 <flatcc_builder_create_cached_vtable@@Base+0x174>
   20d84:	ldr	r5, [r4, #12]
   20d88:	add	r8, r4, #12
   20d8c:	str	r4, [sp, #20]
   20d90:	cmp	r5, #0
   20d94:	bne	20d48 <flatcc_builder_create_cached_vtable@@Base+0x78>
   20d98:	ldr	r8, [sp, #16]
   20d9c:	mov	r6, fp
   20da0:	ldr	r3, [r6, #104]	; 0x68
   20da4:	ldr	r4, [r6, #124]	; 0x7c
   20da8:	add	r2, r4, #16
   20dac:	cmp	r2, r3
   20db0:	bls	20dd8 <flatcc_builder_create_cached_vtable@@Base+0x108>
   20db4:	mov	ip, #6
   20db8:	mov	r3, #0
   20dbc:	ldr	r0, [r6, #40]	; 0x28
   20dc0:	add	r1, r6, #100	; 0x64
   20dc4:	str	ip, [sp]
   20dc8:	ldr	r5, [r6, #48]	; 0x30
   20dcc:	blx	r5
   20dd0:	cmp	r0, #0
   20dd4:	bne	20f58 <flatcc_builder_create_cached_vtable@@Base+0x288>
   20dd8:	ldr	r5, [r6, #100]	; 0x64
   20ddc:	adds	r7, r5, r4
   20de0:	beq	20f28 <flatcc_builder_create_cached_vtable@@Base+0x258>
   20de4:	ldr	r3, [r6, #124]	; 0x7c
   20de8:	mov	r2, r9
   20dec:	ldr	r0, [r6, #152]	; 0x98
   20df0:	ldr	r1, [sp, #8]
   20df4:	add	ip, r3, #16
   20df8:	str	ip, [r6, #124]	; 0x7c
   20dfc:	str	r0, [r7, #4]
   20e00:	mov	r0, r6
   20e04:	ldr	ip, [sl, r8, lsl #2]
   20e08:	str	ip, [r7, #12]
   20e0c:	str	r3, [sl, r8, lsl #2]
   20e10:	bl	20b9c <flatcc_builder_create_vtable@@Base>
   20e14:	cmp	r0, #0
   20e18:	str	r0, [r5, r4]
   20e1c:	beq	20f28 <flatcc_builder_create_cached_vtable@@Base+0x258>
   20e20:	ldr	r3, [sp, #20]
   20e24:	cmp	r3, #0
   20e28:	beq	20f6c <flatcc_builder_create_cached_vtable@@Base+0x29c>
   20e2c:	ldr	r3, [r3, #8]
   20e30:	str	r3, [r7, #8]
   20e34:	b	20e70 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   20e38:	add	r8, r4, #12
   20e3c:	ldr	r5, [r4, #12]
   20e40:	b	20d90 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   20e44:	ldr	r3, [sp, #12]
   20e48:	mov	fp, r8
   20e4c:	ldr	r8, [sp, #16]
   20e50:	cmp	r3, fp
   20e54:	beq	20e6c <flatcc_builder_create_cached_vtable@@Base+0x19c>
   20e58:	ldr	r3, [r4, #12]
   20e5c:	str	r3, [fp]
   20e60:	ldr	r3, [sl, r8, lsl #2]
   20e64:	str	r3, [r4, #12]
   20e68:	str	r5, [sl, r8, lsl #2]
   20e6c:	ldr	r0, [r4]
   20e70:	add	sp, sp, #28
   20e74:	ldrd	r4, [sp]
   20e78:	ldrd	r6, [sp, #8]
   20e7c:	ldrd	r8, [sp, #16]
   20e80:	ldrd	sl, [sp, #24]
   20e84:	add	sp, sp, #32
   20e88:	pop	{pc}		; (ldr pc, [sp], #4)
   20e8c:	ldr	r4, [r0, #124]	; 0x7c
   20e90:	add	r5, r0, #92	; 0x5c
   20e94:	cmp	r4, #0
   20e98:	bne	21000 <flatcc_builder_create_cached_vtable@@Base+0x330>
   20e9c:	ldr	r3, [r0, #104]	; 0x68
   20ea0:	cmp	r3, #15
   20ea4:	bls	20f30 <flatcc_builder_create_cached_vtable@@Base+0x260>
   20ea8:	ldr	r3, [r6, #100]	; 0x64
   20eac:	cmp	r3, #0
   20eb0:	beq	20f28 <flatcc_builder_create_cached_vtable@@Base+0x258>
   20eb4:	mov	ip, #16
   20eb8:	mov	r2, #5
   20ebc:	ldr	r0, [r6, #40]	; 0x28
   20ec0:	mov	r1, r5
   20ec4:	mov	r3, #1
   20ec8:	str	r2, [sp]
   20ecc:	mov	r2, #256	; 0x100
   20ed0:	str	ip, [r6, #124]	; 0x7c
   20ed4:	ldr	r5, [r6, #48]	; 0x30
   20ed8:	blx	r5
   20edc:	cmp	r0, #0
   20ee0:	bne	20f28 <flatcc_builder_create_cached_vtable@@Base+0x258>
   20ee4:	mov	r3, #256	; 0x100
   20ee8:	ldr	r1, [r6, #96]	; 0x60
   20eec:	b	20ef4 <flatcc_builder_create_cached_vtable@@Base+0x224>
   20ef0:	mov	r3, r2
   20ef4:	lsl	r2, r3, #1
   20ef8:	cmp	r2, r1
   20efc:	bls	20ef0 <flatcc_builder_create_cached_vtable@@Base+0x220>
   20f00:	lsr	r3, r3, #2
   20f04:	cmp	r3, #1
   20f08:	bls	20f64 <flatcc_builder_create_cached_vtable@@Base+0x294>
   20f0c:	mov	r2, #1
   20f10:	add	r4, r4, #1
   20f14:	cmp	r3, r2, lsl r4
   20f18:	bhi	20f10 <flatcc_builder_create_cached_vtable@@Base+0x240>
   20f1c:	rsb	r1, r4, #32
   20f20:	str	r4, [r6, #116]	; 0x74
   20f24:	b	20d08 <flatcc_builder_create_cached_vtable@@Base+0x38>
   20f28:	mov	r0, #0
   20f2c:	b	20e70 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   20f30:	mov	ip, #6
   20f34:	add	r1, r0, #100	; 0x64
   20f38:	ldr	r0, [r0, #40]	; 0x28
   20f3c:	mov	r3, r4
   20f40:	mov	r2, #16
   20f44:	str	ip, [sp]
   20f48:	ldr	r7, [r6, #48]	; 0x30
   20f4c:	blx	r7
   20f50:	cmp	r0, #0
   20f54:	beq	20ea8 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   20f58:	bl	1ea64 <flatcc_builder_default_alloc@@Base+0x124>
   20f5c:	str	r5, [sp, #20]
   20f60:	b	20da0 <flatcc_builder_create_cached_vtable@@Base+0xd0>
   20f64:	mov	r1, #32
   20f68:	b	20f20 <flatcc_builder_create_cached_vtable@@Base+0x250>
   20f6c:	ldr	r8, [r6, #120]	; 0x78
   20f70:	ldr	r3, [r6, #172]	; 0xac
   20f74:	add	r2, r9, r8
   20f78:	cmp	r3, #0
   20f7c:	beq	20f88 <flatcc_builder_create_cached_vtable@@Base+0x2b8>
   20f80:	cmp	r3, r2
   20f84:	bcc	20fe8 <flatcc_builder_create_cached_vtable@@Base+0x318>
   20f88:	ldr	r3, [r6, #72]	; 0x48
   20f8c:	cmp	r3, r2
   20f90:	bcs	20fb8 <flatcc_builder_create_cached_vtable@@Base+0x2e8>
   20f94:	mov	ip, #2
   20f98:	mov	r3, #0
   20f9c:	ldr	r0, [r6, #40]	; 0x28
   20fa0:	add	r1, r6, #68	; 0x44
   20fa4:	str	ip, [sp]
   20fa8:	ldr	sl, [r6, #48]	; 0x30
   20fac:	blx	sl
   20fb0:	cmp	r0, #0
   20fb4:	bne	20f58 <flatcc_builder_create_cached_vtable@@Base+0x288>
   20fb8:	ldr	r3, [r6, #68]	; 0x44
   20fbc:	adds	r0, r3, r8
   20fc0:	beq	20ff8 <flatcc_builder_create_cached_vtable@@Base+0x328>
   20fc4:	ldr	r3, [r6, #120]	; 0x78
   20fc8:	mov	r2, r9
   20fcc:	ldr	r1, [sp, #8]
   20fd0:	add	r9, r3, r9
   20fd4:	str	r3, [r7, #8]
   20fd8:	str	r9, [r6, #120]	; 0x78
   20fdc:	bl	12908 <memcpy@plt>
   20fe0:	ldr	r0, [r5, r4]
   20fe4:	b	20e70 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   20fe8:	mov	r0, r6
   20fec:	bl	1efc4 <flatcc_builder_flush_vtable_cache@@Base>
   20ff0:	ldr	r0, [r5, r4]
   20ff4:	b	20e70 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   20ff8:	mvn	r0, #0
   20ffc:	b	20e70 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   21000:	ldr	r3, [pc, #28]	; 21024 <flatcc_builder_create_cached_vtable@@Base+0x354>
   21004:	movw	r2, #342	; 0x156
   21008:	ldr	r1, [pc, #24]	; 21028 <flatcc_builder_create_cached_vtable@@Base+0x358>
   2100c:	ldr	r0, [pc, #24]	; 2102c <flatcc_builder_create_cached_vtable@@Base+0x35c>
   21010:	add	r3, pc, r3
   21014:	add	r3, r3, #656	; 0x290
   21018:	add	r1, pc, r1
   2101c:	add	r0, pc, r0
   21020:	bl	129e0 <__assert_fail@plt>
   21024:	andeq	r7, r0, r4, lsr #5
   21028:	andeq	r7, r0, ip, ror #19
   2102c:	muleq	r0, r4, ip

00021030 <flatcc_builder_create_table@@Base>:
   21030:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21034:	mov	r5, r0
   21038:	strd	r6, [sp, #8]
   2103c:	str	r8, [sp, #16]
   21040:	str	lr, [sp, #20]
   21044:	sub	sp, sp, #88	; 0x58
   21048:	ldr	r6, [sp, #116]	; 0x74
   2104c:	ldr	r7, [pc, #444]	; 21210 <flatcc_builder_create_table@@Base+0x1e0>
   21050:	ldr	r0, [sp, #120]	; 0x78
   21054:	cmp	r6, #0
   21058:	add	r7, pc, r7
   2105c:	blt	211c4 <flatcc_builder_create_table@@Base+0x194>
   21060:	tst	r0, #1
   21064:	beq	211a0 <flatcc_builder_create_table@@Base+0x170>
   21068:	ldrh	ip, [r5, #128]	; 0x80
   2106c:	cmp	r3, #4
   21070:	sub	r0, r0, #1
   21074:	movcc	r3, #4
   21078:	cmp	ip, r3
   2107c:	ldr	ip, [r5, #136]	; 0x88
   21080:	strhcc	r3, [r5, #128]	; 0x80
   21084:	sub	r3, r3, #1
   21088:	cmp	r6, #0
   2108c:	sub	r4, ip, r2
   21090:	mov	r8, r4
   21094:	sub	r4, r4, #4
   21098:	and	r8, r8, r3
   2109c:	sub	r0, r4, r0
   210a0:	sub	r0, r0, r8
   210a4:	str	r0, [sp, #12]
   210a8:	beq	210dc <flatcc_builder_create_table@@Base+0xac>
   210ac:	ldr	ip, [sp, #112]	; 0x70
   210b0:	sub	r4, r8, r4
   210b4:	sub	r4, r4, #4
   210b8:	add	r6, ip, r6, lsl #1
   210bc:	ldrh	r3, [ip], #2
   210c0:	ldr	r0, [r1, r3]
   210c4:	sub	lr, r4, r3
   210c8:	cmp	r6, ip
   210cc:	add	r0, r0, lr
   210d0:	str	r0, [r1, r3]
   210d4:	bne	210bc <flatcc_builder_create_table@@Base+0x8c>
   210d8:	ldr	ip, [r5, #136]	; 0x88
   210dc:	mov	r3, #1
   210e0:	mov	r0, #4
   210e4:	cmp	r2, #0
   210e8:	str	r0, [sp, #16]
   210ec:	str	r3, [sp, #20]
   210f0:	add	r3, sp, #12
   210f4:	str	r3, [sp, #24]
   210f8:	str	r0, [sp, #28]
   210fc:	beq	21118 <flatcc_builder_create_table@@Base+0xe8>
   21100:	add	r0, r2, r0
   21104:	mov	r3, #2
   21108:	str	r0, [sp, #16]
   2110c:	str	r3, [sp, #20]
   21110:	str	r1, [sp, #32]
   21114:	str	r2, [sp, #36]	; 0x24
   21118:	cmp	r8, #0
   2111c:	bne	21170 <flatcc_builder_create_table@@Base+0x140>
   21120:	sub	r4, ip, r0
   21124:	cmp	r4, ip
   21128:	bge	211ec <flatcc_builder_create_table@@Base+0x1bc>
   2112c:	mov	r3, r4
   21130:	add	r1, sp, #24
   21134:	str	r0, [sp]
   21138:	ldr	r2, [sp, #20]
   2113c:	ldr	r0, [r5, #36]	; 0x24
   21140:	ldr	r6, [r5, #44]	; 0x2c
   21144:	blx	r6
   21148:	cmp	r0, #0
   2114c:	bne	211e8 <flatcc_builder_create_table@@Base+0x1b8>
   21150:	mov	r0, r4
   21154:	str	r4, [r5, #136]	; 0x88
   21158:	add	sp, sp, #88	; 0x58
   2115c:	ldrd	r4, [sp]
   21160:	ldrd	r6, [sp, #8]
   21164:	ldr	r8, [sp, #16]
   21168:	add	sp, sp, #20
   2116c:	pop	{pc}		; (ldr pc, [sp], #4)
   21170:	ldr	r2, [pc, #156]	; 21214 <flatcc_builder_create_table@@Base+0x1e4>
   21174:	add	r0, r0, r8
   21178:	ldr	r3, [sp, #20]
   2117c:	str	r0, [sp, #16]
   21180:	ldr	r1, [r7, r2]
   21184:	add	r2, sp, #88	; 0x58
   21188:	add	r3, r3, #1
   2118c:	add	r2, r2, r3, lsl #3
   21190:	str	r3, [sp, #20]
   21194:	str	r1, [r2, #-72]	; 0xffffffb8
   21198:	str	r8, [r2, #-68]	; 0xffffffbc
   2119c:	b	21120 <flatcc_builder_create_table@@Base+0xf0>
   211a0:	ldr	r3, [pc, #112]	; 21218 <flatcc_builder_create_table@@Base+0x1e8>
   211a4:	movw	r2, #1243	; 0x4db
   211a8:	ldr	r1, [pc, #108]	; 2121c <flatcc_builder_create_table@@Base+0x1ec>
   211ac:	ldr	r0, [pc, #108]	; 21220 <flatcc_builder_create_table@@Base+0x1f0>
   211b0:	add	r3, pc, r3
   211b4:	add	r3, r3, #668	; 0x29c
   211b8:	add	r1, pc, r1
   211bc:	add	r0, pc, r0
   211c0:	bl	129e0 <__assert_fail@plt>
   211c4:	ldr	r3, [pc, #88]	; 21224 <flatcc_builder_create_table@@Base+0x1f4>
   211c8:	movw	r2, #1237	; 0x4d5
   211cc:	ldr	r1, [pc, #84]	; 21228 <flatcc_builder_create_table@@Base+0x1f8>
   211d0:	ldr	r0, [pc, #84]	; 2122c <flatcc_builder_create_table@@Base+0x1fc>
   211d4:	add	r3, pc, r3
   211d8:	add	r3, r3, #668	; 0x29c
   211dc:	add	r1, pc, r1
   211e0:	add	r0, pc, r0
   211e4:	bl	129e0 <__assert_fail@plt>
   211e8:	bl	1ec04 <flatcc_builder_default_alloc@@Base+0x2c4>
   211ec:	ldr	r3, [pc, #60]	; 21230 <flatcc_builder_create_table@@Base+0x200>
   211f0:	movw	r2, #647	; 0x287
   211f4:	ldr	r1, [pc, #56]	; 21234 <flatcc_builder_create_table@@Base+0x204>
   211f8:	ldr	r0, [pc, #56]	; 21238 <flatcc_builder_create_table@@Base+0x208>
   211fc:	add	r3, pc, r3
   21200:	add	r3, r3, #44	; 0x2c
   21204:	add	r1, pc, r1
   21208:	add	r0, pc, r0
   2120c:	bl	129e0 <__assert_fail@plt>
   21210:	andeq	r8, r1, r0, lsr #31
   21214:	andeq	r0, r0, r4, rrx
   21218:	andeq	r7, r0, r4, lsl #2
   2121c:	andeq	r7, r0, ip, asr #16
   21220:	andeq	r7, r0, r8, lsl fp
   21224:	andeq	r7, r0, r0, ror #1
   21228:	andeq	r7, r0, r8, lsr #16
   2122c:	andeq	r7, r0, r0, ror #21
   21230:	strheq	r7, [r0], -r8
   21234:	andeq	r7, r0, r0, lsl #16
   21238:	andeq	r7, r0, r4, lsl #17

0002123c <flatcc_builder_check_required_field@@Base>:
   2123c:	ldr	r3, [r0, #32]
   21240:	ldrh	r3, [r3, #14]
   21244:	cmp	r3, #3
   21248:	bne	21278 <flatcc_builder_check_required_field@@Base+0x3c>
   2124c:	ldrh	r3, [r0, #8]
   21250:	cmp	r3, r1
   21254:	bls	21270 <flatcc_builder_check_required_field@@Base+0x34>
   21258:	ldr	r3, [r0, #4]
   2125c:	lsl	r1, r1, #1
   21260:	ldrh	r0, [r3, r1]
   21264:	adds	r0, r0, #0
   21268:	movne	r0, #1
   2126c:	bx	lr
   21270:	mov	r0, #0
   21274:	bx	lr
   21278:	ldr	r3, [pc, #36]	; 212a4 <flatcc_builder_check_required_field@@Base+0x68>
   2127c:	movw	r2, #1272	; 0x4f8
   21280:	str	r4, [sp, #-8]!
   21284:	ldr	r1, [pc, #28]	; 212a8 <flatcc_builder_check_required_field@@Base+0x6c>
   21288:	str	lr, [sp, #4]
   2128c:	ldr	r0, [pc, #24]	; 212ac <flatcc_builder_check_required_field@@Base+0x70>
   21290:	add	r3, pc, r3
   21294:	add	r3, r3, #696	; 0x2b8
   21298:	add	r1, pc, r1
   2129c:	add	r0, pc, r0
   212a0:	bl	129e0 <__assert_fail@plt>
   212a4:	andeq	r7, r0, r4, lsr #32
   212a8:	andeq	r7, r0, ip, ror #14
   212ac:	andeq	r7, r0, r4, asr #20

000212b0 <flatcc_builder_check_union_field@@Base>:
   212b0:	ldr	r3, [r0, #32]
   212b4:	ldrh	r3, [r3, #14]
   212b8:	cmp	r3, #3
   212bc:	bne	21320 <flatcc_builder_check_union_field@@Base+0x70>
   212c0:	cmp	r1, #0
   212c4:	beq	2130c <flatcc_builder_check_union_field@@Base+0x5c>
   212c8:	ldrh	r3, [r0, #8]
   212cc:	cmp	r3, r1
   212d0:	bls	2130c <flatcc_builder_check_union_field@@Base+0x5c>
   212d4:	ldr	r3, [r0, #4]
   212d8:	sub	r1, r1, #-2147483647	; 0x80000001
   212dc:	lsl	r1, r1, #1
   212e0:	ldrh	r2, [r3, r1]!
   212e4:	cmp	r2, #0
   212e8:	ldrh	r1, [r3, #2]
   212ec:	beq	21300 <flatcc_builder_check_union_field@@Base+0x50>
   212f0:	ldr	r3, [r0, #16]
   212f4:	ldrb	r3, [r3, r2]
   212f8:	cmp	r3, #0
   212fc:	bne	21314 <flatcc_builder_check_union_field@@Base+0x64>
   21300:	clz	r0, r1
   21304:	lsr	r0, r0, #5
   21308:	bx	lr
   2130c:	mov	r0, #0
   21310:	bx	lr
   21314:	adds	r0, r1, #0
   21318:	movne	r0, #1
   2131c:	bx	lr
   21320:	ldr	r3, [pc, #36]	; 2134c <flatcc_builder_check_union_field@@Base+0x9c>
   21324:	movw	r2, #1279	; 0x4ff
   21328:	str	r4, [sp, #-8]!
   2132c:	ldr	r1, [pc, #28]	; 21350 <flatcc_builder_check_union_field@@Base+0xa0>
   21330:	str	lr, [sp, #4]
   21334:	ldr	r0, [pc, #24]	; 21354 <flatcc_builder_check_union_field@@Base+0xa4>
   21338:	add	r3, pc, r3
   2133c:	add	r3, r3, #732	; 0x2dc
   21340:	add	r1, pc, r1
   21344:	add	r0, pc, r0
   21348:	bl	129e0 <__assert_fail@plt>
   2134c:	andeq	r6, r0, ip, ror pc
   21350:	andeq	r7, r0, r4, asr #13
   21354:	muleq	r0, ip, r9

00021358 <flatcc_builder_check_required@@Base>:
   21358:	ldr	r3, [r0, #32]
   2135c:	ldrh	r3, [r3, #14]
   21360:	cmp	r3, #3
   21364:	bne	213cc <flatcc_builder_check_required@@Base+0x74>
   21368:	ldrh	r3, [r0, #8]
   2136c:	cmp	r3, r2
   21370:	blt	213c4 <flatcc_builder_check_required@@Base+0x6c>
   21374:	cmp	r2, #0
   21378:	ble	213bc <flatcc_builder_check_required@@Base+0x64>
   2137c:	ldrh	r3, [r1]
   21380:	ldr	ip, [r0, #4]
   21384:	lsl	r3, r3, #1
   21388:	ldrh	r0, [ip, r3]
   2138c:	cmp	r0, #0
   21390:	bxeq	lr
   21394:	add	r2, r1, r2, lsl #1
   21398:	add	r1, r1, #2
   2139c:	b	213b4 <flatcc_builder_check_required@@Base+0x5c>
   213a0:	ldrh	r3, [r1], #2
   213a4:	lsl	r3, r3, #1
   213a8:	ldrh	r0, [ip, r3]
   213ac:	cmp	r0, #0
   213b0:	bxeq	lr
   213b4:	cmp	r1, r2
   213b8:	bne	213a0 <flatcc_builder_check_required@@Base+0x48>
   213bc:	mov	r0, #1
   213c0:	bx	lr
   213c4:	mov	r0, #0
   213c8:	bx	lr
   213cc:	ldr	r3, [pc, #36]	; 213f8 <flatcc_builder_check_required@@Base+0xa0>
   213d0:	movw	r2, #1297	; 0x511
   213d4:	str	r4, [sp, #-8]!
   213d8:	ldr	r1, [pc, #28]	; 213fc <flatcc_builder_check_required@@Base+0xa4>
   213dc:	str	lr, [sp, #4]
   213e0:	ldr	r0, [pc, #24]	; 21400 <flatcc_builder_check_required@@Base+0xa8>
   213e4:	add	r3, pc, r3
   213e8:	add	r3, r3, #768	; 0x300
   213ec:	add	r1, pc, r1
   213f0:	add	r0, pc, r0
   213f4:	bl	129e0 <__assert_fail@plt>
   213f8:	ldrdeq	r6, [r0], -r0
   213fc:	andeq	r7, r0, r8, lsl r6
   21400:	strdeq	r7, [r0], -r0

00021404 <flatcc_builder_end_table@@Base>:
   21404:	ldr	r3, [r0, #32]
   21408:	strd	r4, [sp, #-20]!	; 0xffffffec
   2140c:	ldrh	r3, [r3, #14]
   21410:	strd	r6, [sp, #8]
   21414:	str	lr, [sp, #16]
   21418:	sub	sp, sp, #20
   2141c:	cmp	r3, #3
   21420:	bne	215a4 <flatcc_builder_end_table@@Base+0x1a0>
   21424:	ldrh	r5, [r0, #8]
   21428:	movw	ip, #31153	; 0x79b1
   2142c:	movt	ip, #40503	; 0x9e37
   21430:	mov	r4, r0
   21434:	ldr	r1, [r0, #4]
   21438:	ldr	r3, [r0, #12]
   2143c:	add	r5, r5, #2
   21440:	lsl	r5, r5, #1
   21444:	ldr	lr, [r0, #20]
   21448:	sub	r6, r1, #4
   2144c:	uxth	r5, r5
   21450:	eor	r3, r3, r5
   21454:	mov	r2, r5
   21458:	strh	r5, [r1, #-4]
   2145c:	mul	r3, ip, r3
   21460:	add	lr, lr, #4
   21464:	uxth	lr, lr
   21468:	eor	r3, r3, lr
   2146c:	strh	lr, [r1, #-2]
   21470:	mov	r1, r6
   21474:	mul	r3, ip, r3
   21478:	str	r3, [r0, #12]
   2147c:	bl	20cd0 <flatcc_builder_create_cached_vtable@@Base>
   21480:	subs	r7, r0, #0
   21484:	bne	214a4 <flatcc_builder_end_table@@Base+0xa0>
   21488:	mov	r5, #0
   2148c:	mov	r0, r5
   21490:	add	sp, sp, #20
   21494:	ldrd	r4, [sp]
   21498:	ldrd	r6, [sp, #8]
   2149c:	add	sp, sp, #16
   214a0:	pop	{pc}		; (ldr pc, [sp], #4)
   214a4:	mov	r2, r5
   214a8:	mov	r1, #0
   214ac:	mov	r0, r6
   214b0:	bl	12998 <memset@plt>
   214b4:	ldr	ip, [r4]
   214b8:	mov	r0, r4
   214bc:	ldr	r3, [r4, #32]
   214c0:	ldr	r2, [r4, #76]	; 0x4c
   214c4:	ldr	r1, [r3, #20]
   214c8:	str	r7, [sp, #8]
   214cc:	ldrh	r3, [r4, #130]	; 0x82
   214d0:	add	r2, r2, r1
   214d4:	ldr	r1, [r4, #16]
   214d8:	sub	ip, ip, r2
   214dc:	asr	ip, ip, #1
   214e0:	str	r2, [sp]
   214e4:	ldr	r2, [r4, #20]
   214e8:	str	ip, [sp, #4]
   214ec:	bl	21030 <flatcc_builder_create_table@@Base>
   214f0:	subs	r5, r0, #0
   214f4:	beq	21488 <flatcc_builder_end_table@@Base+0x84>
   214f8:	ldr	r3, [r4, #32]
   214fc:	mov	r1, #0
   21500:	ldr	r0, [r4, #52]	; 0x34
   21504:	ldr	r2, [r4, #76]	; 0x4c
   21508:	ldr	ip, [r3, #16]
   2150c:	ldr	r6, [r3, #20]
   21510:	ldrh	lr, [r3, #28]
   21514:	add	r0, r0, ip
   21518:	ldr	ip, [r3, #24]
   2151c:	add	r3, r2, r6
   21520:	ldr	r2, [r4, #20]
   21524:	str	r3, [r4]
   21528:	str	r0, [r4, #4]
   2152c:	strh	lr, [r4, #8]
   21530:	str	ip, [r4, #12]
   21534:	ldr	r0, [r4, #16]
   21538:	bl	12998 <memset@plt>
   2153c:	ldr	r3, [r4, #32]
   21540:	ldr	r0, [r4, #60]	; 0x3c
   21544:	ldr	r2, [r4, #64]	; 0x40
   21548:	ldr	ip, [r3]
   2154c:	ldmib	r3, {r1, lr}
   21550:	add	r0, r0, ip
   21554:	sub	r2, r2, ip
   21558:	str	r0, [r4, #16]
   2155c:	cmp	r2, r1
   21560:	ldrh	r0, [r4, #128]	; 0x80
   21564:	movcs	r2, r1
   21568:	str	lr, [r4, #20]
   2156c:	str	ip, [r4, #28]
   21570:	ldrh	ip, [r4, #130]	; 0x82
   21574:	str	r2, [r4, #24]
   21578:	ldr	r2, [r4, #156]	; 0x9c
   2157c:	str	r1, [r3, #4]
   21580:	cmp	r0, ip
   21584:	sub	r0, r3, #36	; 0x24
   21588:	strhcc	ip, [r4, #128]	; 0x80
   2158c:	ldrh	r1, [r3, #12]
   21590:	sub	r3, r2, #1
   21594:	str	r0, [r4, #32]
   21598:	strh	r1, [r4, #130]	; 0x82
   2159c:	str	r3, [r4, #156]	; 0x9c
   215a0:	b	2148c <flatcc_builder_end_table@@Base+0x88>
   215a4:	ldr	r3, [pc, #28]	; 215c8 <flatcc_builder_end_table@@Base+0x1c4>
   215a8:	movw	r2, #1317	; 0x525
   215ac:	ldr	r1, [pc, #24]	; 215cc <flatcc_builder_end_table@@Base+0x1c8>
   215b0:	ldr	r0, [pc, #24]	; 215d0 <flatcc_builder_end_table@@Base+0x1cc>
   215b4:	add	r3, pc, r3
   215b8:	add	r3, r3, #800	; 0x320
   215bc:	add	r1, pc, r1
   215c0:	add	r0, pc, r0
   215c4:	bl	129e0 <__assert_fail@plt>
   215c8:	andeq	r6, r0, r0, lsl #26
   215cc:	andeq	r7, r0, r8, asr #8
   215d0:	andeq	r7, r0, r0, lsr #14

000215d4 <flatcc_builder_create_vector@@Base>:
   215d4:	strd	r4, [sp, #-16]!
   215d8:	mov	r4, r0
   215dc:	str	r6, [sp, #8]
   215e0:	str	lr, [sp, #12]
   215e4:	sub	sp, sp, #88	; 0x58
   215e8:	ldr	ip, [sp, #108]	; 0x6c
   215ec:	ldr	r5, [pc, #328]	; 2173c <flatcc_builder_create_vector@@Base+0x168>
   215f0:	ldrh	r0, [sp, #104]	; 0x68
   215f4:	cmp	r2, ip
   215f8:	add	r5, pc, r5
   215fc:	bhi	216f0 <flatcc_builder_create_vector@@Base+0x11c>
   21600:	ldrh	ip, [r4, #128]	; 0x80
   21604:	cmp	r0, #4
   21608:	mul	r3, r3, r2
   2160c:	movcc	r0, #4
   21610:	str	r2, [sp, #12]
   21614:	mov	r2, #1
   21618:	ldr	r6, [r4, #136]	; 0x88
   2161c:	mov	lr, #4
   21620:	str	r2, [sp, #20]
   21624:	cmp	ip, r0
   21628:	add	ip, sp, #12
   2162c:	str	lr, [sp, #16]
   21630:	strhcc	r0, [r4, #128]	; 0x80
   21634:	sub	r2, r6, r3
   21638:	sub	r0, r0, #1
   2163c:	cmp	r3, #0
   21640:	and	r0, r0, r2
   21644:	str	ip, [sp, #24]
   21648:	moveq	r2, lr
   2164c:	str	lr, [sp, #28]
   21650:	beq	2166c <flatcc_builder_create_vector@@Base+0x98>
   21654:	add	r2, r3, lr
   21658:	str	r1, [sp, #32]
   2165c:	mov	r1, #2
   21660:	str	r2, [sp, #16]
   21664:	str	r1, [sp, #20]
   21668:	str	r3, [sp, #36]	; 0x24
   2166c:	cmp	r0, #0
   21670:	bne	216c0 <flatcc_builder_create_vector@@Base+0xec>
   21674:	sub	r5, r6, r2
   21678:	cmp	r6, r5
   2167c:	ble	21718 <flatcc_builder_create_vector@@Base+0x144>
   21680:	mov	r3, r5
   21684:	add	r1, sp, #24
   21688:	str	r2, [sp]
   2168c:	ldr	r2, [sp, #20]
   21690:	ldr	r0, [r4, #36]	; 0x24
   21694:	ldr	r6, [r4, #44]	; 0x2c
   21698:	blx	r6
   2169c:	cmp	r0, #0
   216a0:	bne	21714 <flatcc_builder_create_vector@@Base+0x140>
   216a4:	mov	r0, r5
   216a8:	str	r5, [r4, #136]	; 0x88
   216ac:	add	sp, sp, #88	; 0x58
   216b0:	ldrd	r4, [sp]
   216b4:	ldr	r6, [sp, #8]
   216b8:	add	sp, sp, #12
   216bc:	pop	{pc}		; (ldr pc, [sp], #4)
   216c0:	ldr	r1, [pc, #120]	; 21740 <flatcc_builder_create_vector@@Base+0x16c>
   216c4:	add	r2, r2, r0
   216c8:	ldr	r3, [sp, #20]
   216cc:	str	r2, [sp, #16]
   216d0:	ldr	ip, [r5, r1]
   216d4:	add	r1, sp, #88	; 0x58
   216d8:	add	r3, r3, #1
   216dc:	add	r1, r1, r3, lsl #3
   216e0:	str	r3, [sp, #20]
   216e4:	str	ip, [r1, #-72]	; 0xffffffb8
   216e8:	str	r0, [r1, #-68]	; 0xffffffbc
   216ec:	b	21674 <flatcc_builder_create_vector@@Base+0xa0>
   216f0:	ldr	r3, [pc, #76]	; 21744 <flatcc_builder_create_vector@@Base+0x170>
   216f4:	movw	r2, #1365	; 0x555
   216f8:	ldr	r1, [pc, #72]	; 21748 <flatcc_builder_create_vector@@Base+0x174>
   216fc:	ldr	r0, [pc, #72]	; 2174c <flatcc_builder_create_vector@@Base+0x178>
   21700:	add	r3, pc, r3
   21704:	add	r3, r3, #828	; 0x33c
   21708:	add	r1, pc, r1
   2170c:	add	r0, pc, r0
   21710:	bl	129e0 <__assert_fail@plt>
   21714:	bl	1ec04 <flatcc_builder_default_alloc@@Base+0x2c4>
   21718:	ldr	r3, [pc, #48]	; 21750 <flatcc_builder_create_vector@@Base+0x17c>
   2171c:	movw	r2, #647	; 0x287
   21720:	ldr	r1, [pc, #44]	; 21754 <flatcc_builder_create_vector@@Base+0x180>
   21724:	ldr	r0, [pc, #44]	; 21758 <flatcc_builder_create_vector@@Base+0x184>
   21728:	add	r3, pc, r3
   2172c:	add	r3, r3, #44	; 0x2c
   21730:	add	r1, pc, r1
   21734:	add	r0, pc, r0
   21738:	bl	129e0 <__assert_fail@plt>
   2173c:	andeq	r8, r1, r0, lsl #20
   21740:	andeq	r0, r0, r4, rrx
   21744:			; <UNDEFINED> instruction: 0x00006bb4
   21748:	strdeq	r7, [r0], -ip
   2174c:	andeq	r7, r0, r0, lsl #12
   21750:	andeq	r6, r0, ip, lsl #23
   21754:	ldrdeq	r7, [r0], -r4
   21758:	andeq	r7, r0, r8, asr r3

0002175c <flatcc_builder_end_vector@@Base>:
   2175c:	ldr	r1, [r0, #32]
   21760:	strd	r4, [sp, #-12]!
   21764:	ldrh	r3, [r1, #14]
   21768:	str	lr, [sp, #8]
   2176c:	sub	sp, sp, #12
   21770:	cmp	r3, #4
   21774:	bne	2182c <flatcc_builder_end_vector@@Base+0xd0>
   21778:	ldrh	ip, [r0, #130]	; 0x82
   2177c:	mov	r4, r0
   21780:	ldr	r3, [r1, #16]
   21784:	ldr	r2, [r1, #20]
   21788:	ldr	r1, [r1, #24]
   2178c:	str	r1, [sp, #4]
   21790:	ldr	r1, [r0, #16]
   21794:	str	ip, [sp]
   21798:	bl	215d4 <flatcc_builder_create_vector@@Base>
   2179c:	subs	r5, r0, #0
   217a0:	beq	21818 <flatcc_builder_end_vector@@Base+0xbc>
   217a4:	mov	r1, #0
   217a8:	ldr	r0, [r4, #16]
   217ac:	ldr	r2, [r4, #20]
   217b0:	bl	12998 <memset@plt>
   217b4:	ldr	r3, [r4, #32]
   217b8:	ldr	r0, [r4, #60]	; 0x3c
   217bc:	ldr	r2, [r4, #64]	; 0x40
   217c0:	ldr	ip, [r3]
   217c4:	ldmib	r3, {r1, lr}
   217c8:	add	r0, r0, ip
   217cc:	sub	r2, r2, ip
   217d0:	str	r0, [r4, #16]
   217d4:	cmp	r2, r1
   217d8:	ldrh	r0, [r4, #128]	; 0x80
   217dc:	movcs	r2, r1
   217e0:	str	lr, [r4, #20]
   217e4:	str	ip, [r4, #28]
   217e8:	ldrh	ip, [r4, #130]	; 0x82
   217ec:	str	r2, [r4, #24]
   217f0:	ldr	r2, [r4, #156]	; 0x9c
   217f4:	str	r1, [r3, #4]
   217f8:	cmp	r0, ip
   217fc:	sub	r0, r3, #36	; 0x24
   21800:	strhcc	ip, [r4, #128]	; 0x80
   21804:	ldrh	r1, [r3, #12]
   21808:	sub	r3, r2, #1
   2180c:	str	r0, [r4, #32]
   21810:	strh	r1, [r4, #130]	; 0x82
   21814:	str	r3, [r4, #156]	; 0x9c
   21818:	mov	r0, r5
   2181c:	add	sp, sp, #12
   21820:	ldrd	r4, [sp]
   21824:	add	sp, sp, #8
   21828:	pop	{pc}		; (ldr pc, [sp], #4)
   2182c:	ldr	r3, [pc, #28]	; 21850 <flatcc_builder_end_vector@@Base+0xf4>
   21830:	movw	r2, #1400	; 0x578
   21834:	ldr	r1, [pc, #24]	; 21854 <flatcc_builder_end_vector@@Base+0xf8>
   21838:	ldr	r0, [pc, #24]	; 21858 <flatcc_builder_end_vector@@Base+0xfc>
   2183c:	add	r3, pc, r3
   21840:	add	r3, r3, #860	; 0x35c
   21844:	add	r1, pc, r1
   21848:	add	r0, pc, r0
   2184c:	bl	129e0 <__assert_fail@plt>
   21850:	andeq	r6, r0, r8, ror sl
   21854:	andeq	r7, r0, r0, asr #3
   21858:	andeq	r7, r0, ip, lsl #6

0002185c <flatcc_builder_vector_count@@Base>:
   2185c:	ldr	r3, [r0, #32]
   21860:	ldr	r0, [r3, #20]
   21864:	bx	lr

00021868 <flatcc_builder_vector_edit@@Base>:
   21868:	ldr	r0, [r0, #16]
   2186c:	bx	lr

00021870 <flatcc_builder_create_offset_vector_direct@@Base>:
   21870:	cmn	r2, #-1073741823	; 0xc0000001
   21874:	bhi	21880 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   21878:	mov	r3, #0
   2187c:	b	1ed98 <flatcc_builder_default_alloc@@Base+0x458>
   21880:	mov	r0, #0
   21884:	bx	lr

00021888 <flatcc_builder_end_offset_vector@@Base>:
   21888:	ldr	r3, [r0, #32]
   2188c:	strd	r4, [sp, #-16]!
   21890:	ldrh	r2, [r3, #14]
   21894:	str	r6, [sp, #8]
   21898:	str	lr, [sp, #12]
   2189c:	cmp	r2, #5
   218a0:	bne	21944 <flatcc_builder_end_offset_vector@@Base+0xbc>
   218a4:	ldr	r1, [r0, #16]
   218a8:	mov	r4, r0
   218ac:	ldr	r2, [r3, #20]
   218b0:	bl	21870 <flatcc_builder_create_offset_vector_direct@@Base>
   218b4:	subs	r5, r0, #0
   218b8:	beq	21930 <flatcc_builder_end_offset_vector@@Base+0xa8>
   218bc:	mov	r1, #0
   218c0:	ldr	r0, [r4, #16]
   218c4:	ldr	r2, [r4, #20]
   218c8:	bl	12998 <memset@plt>
   218cc:	ldr	r3, [r4, #32]
   218d0:	ldr	r0, [r4, #60]	; 0x3c
   218d4:	ldr	r2, [r4, #64]	; 0x40
   218d8:	ldr	ip, [r3]
   218dc:	ldmib	r3, {r1, lr}
   218e0:	add	r0, r0, ip
   218e4:	sub	r2, r2, ip
   218e8:	str	r0, [r4, #16]
   218ec:	cmp	r2, r1
   218f0:	ldrh	r0, [r4, #128]	; 0x80
   218f4:	movcs	r2, r1
   218f8:	str	lr, [r4, #20]
   218fc:	str	ip, [r4, #28]
   21900:	ldrh	ip, [r4, #130]	; 0x82
   21904:	str	r2, [r4, #24]
   21908:	ldr	r2, [r4, #156]	; 0x9c
   2190c:	str	r1, [r3, #4]
   21910:	cmp	r0, ip
   21914:	sub	r0, r3, #36	; 0x24
   21918:	strhcc	ip, [r4, #128]	; 0x80
   2191c:	ldrh	r1, [r3, #12]
   21920:	sub	r3, r2, #1
   21924:	str	r0, [r4, #32]
   21928:	strh	r1, [r4, #130]	; 0x82
   2192c:	str	r3, [r4, #156]	; 0x9c
   21930:	mov	r0, r5
   21934:	ldrd	r4, [sp]
   21938:	ldr	r6, [sp, #8]
   2193c:	add	sp, sp, #12
   21940:	pop	{pc}		; (ldr pc, [sp], #4)
   21944:	ldr	r3, [pc, #28]	; 21968 <flatcc_builder_end_offset_vector@@Base+0xe0>
   21948:	movw	r2, #1480	; 0x5c8
   2194c:	ldr	r1, [pc, #24]	; 2196c <flatcc_builder_end_offset_vector@@Base+0xe4>
   21950:	ldr	r0, [pc, #24]	; 21970 <flatcc_builder_end_offset_vector@@Base+0xe8>
   21954:	add	r3, pc, r3
   21958:	add	r3, r3, #888	; 0x378
   2195c:	add	r1, pc, r1
   21960:	add	r0, pc, r0
   21964:	bl	129e0 <__assert_fail@plt>
   21968:	andeq	r6, r0, r0, ror #18
   2196c:	andeq	r7, r0, r8, lsr #1
   21970:	andeq	r7, r0, r0, ror #4

00021974 <flatcc_builder_create_offset_vector@@Base>:
   21974:	strd	r4, [sp, #-16]!
   21978:	mov	r5, r2
   2197c:	mov	r4, r0
   21980:	str	r6, [sp, #8]
   21984:	mov	r6, r1
   21988:	str	lr, [sp, #12]
   2198c:	bl	20800 <flatcc_builder_start_offset_vector@@Base>
   21990:	cmp	r0, #0
   21994:	beq	219ac <flatcc_builder_create_offset_vector@@Base+0x38>
   21998:	ldrd	r4, [sp]
   2199c:	mov	r0, #0
   219a0:	ldr	r6, [sp, #8]
   219a4:	add	sp, sp, #12
   219a8:	pop	{pc}		; (ldr pc, [sp], #4)
   219ac:	mov	r1, r5
   219b0:	mov	r0, r4
   219b4:	bl	200c4 <flatcc_builder_extend_offset_vector@@Base>
   219b8:	cmp	r0, #0
   219bc:	beq	21998 <flatcc_builder_create_offset_vector@@Base+0x24>
   219c0:	lsl	r2, r5, #2
   219c4:	mov	r1, r6
   219c8:	bl	12908 <memcpy@plt>
   219cc:	mov	r0, r4
   219d0:	ldrd	r4, [sp]
   219d4:	ldr	r6, [sp, #8]
   219d8:	ldr	lr, [sp, #12]
   219dc:	add	sp, sp, #16
   219e0:	b	21888 <flatcc_builder_end_offset_vector@@Base>

000219e4 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   219e4:	ldr	r2, [r0, #32]
   219e8:	strd	r4, [sp, #-16]!
   219ec:	ldrh	ip, [r2, #14]
   219f0:	str	r6, [sp, #8]
   219f4:	str	lr, [sp, #12]
   219f8:	cmp	ip, #5
   219fc:	bne	21ab4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   21a00:	ldr	r2, [r2, #20]
   21a04:	cmn	r2, #-1073741823	; 0xc0000001
   21a08:	bhi	21a24 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
   21a0c:	mov	r3, r1
   21a10:	ldr	r1, [r0, #16]
   21a14:	mov	r4, r0
   21a18:	bl	1ed98 <flatcc_builder_default_alloc@@Base+0x458>
   21a1c:	subs	r5, r0, #0
   21a20:	bne	21a3c <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   21a24:	mov	r5, #0
   21a28:	mov	r0, r5
   21a2c:	ldrd	r4, [sp]
   21a30:	ldr	r6, [sp, #8]
   21a34:	add	sp, sp, #12
   21a38:	pop	{pc}		; (ldr pc, [sp], #4)
   21a3c:	mov	r1, #0
   21a40:	ldr	r0, [r4, #16]
   21a44:	ldr	r2, [r4, #20]
   21a48:	bl	12998 <memset@plt>
   21a4c:	ldr	r3, [r4, #32]
   21a50:	ldr	r0, [r4, #60]	; 0x3c
   21a54:	ldr	r2, [r4, #64]	; 0x40
   21a58:	ldr	ip, [r3]
   21a5c:	ldmib	r3, {r1, lr}
   21a60:	add	r0, r0, ip
   21a64:	sub	r2, r2, ip
   21a68:	str	r0, [r4, #16]
   21a6c:	cmp	r2, r1
   21a70:	ldrh	r0, [r4, #128]	; 0x80
   21a74:	movcs	r2, r1
   21a78:	str	lr, [r4, #20]
   21a7c:	str	ip, [r4, #28]
   21a80:	ldrh	ip, [r4, #130]	; 0x82
   21a84:	str	r2, [r4, #24]
   21a88:	ldr	r2, [r4, #156]	; 0x9c
   21a8c:	str	r1, [r3, #4]
   21a90:	cmp	r0, ip
   21a94:	sub	r0, r3, #36	; 0x24
   21a98:	strhcc	ip, [r4, #128]	; 0x80
   21a9c:	ldrh	r1, [r3, #12]
   21aa0:	sub	r3, r2, #1
   21aa4:	str	r0, [r4, #32]
   21aa8:	strh	r1, [r4, #130]	; 0x82
   21aac:	str	r3, [r4, #156]	; 0x9c
   21ab0:	b	21a28 <flatcc_builder_end_offset_vector_for_unions@@Base+0x44>
   21ab4:	ldr	r3, [pc, #28]	; 21ad8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf4>
   21ab8:	movw	r2, #1493	; 0x5d5
   21abc:	ldr	r1, [pc, #24]	; 21adc <flatcc_builder_end_offset_vector_for_unions@@Base+0xf8>
   21ac0:	ldr	r0, [pc, #24]	; 21ae0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xfc>
   21ac4:	add	r3, pc, r3
   21ac8:	add	r3, r3, #924	; 0x39c
   21acc:	add	r1, pc, r1
   21ad0:	add	r0, pc, r0
   21ad4:	bl	129e0 <__assert_fail@plt>
   21ad8:	strdeq	r6, [r0], -r0
   21adc:	andeq	r6, r0, r8, lsr pc
   21ae0:	strdeq	r7, [r0], -r0

00021ae4 <flatcc_builder_offset_vector_edit@@Base>:
   21ae4:	ldr	r0, [r0, #16]
   21ae8:	bx	lr

00021aec <flatcc_builder_offset_vector_count@@Base>:
   21aec:	ldr	r3, [r0, #32]
   21af0:	ldr	r0, [r3, #20]
   21af4:	bx	lr

00021af8 <flatcc_builder_create_union_vector_direct@@Base>:
   21af8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21afc:	mov	r4, r0
   21b00:	strd	r6, [sp, #8]
   21b04:	str	r8, [sp, #16]
   21b08:	str	lr, [sp, #20]
   21b0c:	sub	sp, sp, #8
   21b10:	ldr	r5, [sp, #32]
   21b14:	cmn	r5, #-1073741823	; 0xc0000001
   21b18:	bhi	21b7c <flatcc_builder_create_union_vector_direct@@Base+0x84>
   21b1c:	mov	r6, r1
   21b20:	mov	r7, r2
   21b24:	mov	r1, r3
   21b28:	mov	r0, r6
   21b2c:	mov	r3, r2
   21b30:	mov	r2, r5
   21b34:	bl	1ed98 <flatcc_builder_default_alloc@@Base+0x458>
   21b38:	subs	r8, r0, #0
   21b3c:	beq	21b7c <flatcc_builder_create_union_vector_direct@@Base+0x84>
   21b40:	mvn	ip, #0
   21b44:	mov	r3, #1
   21b48:	mov	r2, r5
   21b4c:	mov	r1, r7
   21b50:	mov	r0, r6
   21b54:	stm	sp, {r3, ip}
   21b58:	bl	215d4 <flatcc_builder_create_vector@@Base>
   21b5c:	stm	r4, {r0, r8}
   21b60:	mov	r0, r4
   21b64:	add	sp, sp, #8
   21b68:	ldrd	r4, [sp]
   21b6c:	ldrd	r6, [sp, #8]
   21b70:	ldr	r8, [sp, #16]
   21b74:	add	sp, sp, #20
   21b78:	pop	{pc}		; (ldr pc, [sp], #4)
   21b7c:	mov	r3, #0
   21b80:	str	r3, [r4]
   21b84:	str	r3, [r4, #4]
   21b88:	b	21b60 <flatcc_builder_create_union_vector_direct@@Base+0x68>

00021b8c <flatcc_builder_create_union_vector@@Base>:
   21b8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21b90:	mov	r5, r1
   21b94:	mov	r4, r2
   21b98:	strd	r6, [sp, #8]
   21b9c:	mov	r6, r0
   21ba0:	mov	r0, r1
   21ba4:	str	r8, [sp, #16]
   21ba8:	mov	r7, r3
   21bac:	str	lr, [sp, #20]
   21bb0:	sub	sp, sp, #16
   21bb4:	bl	20800 <flatcc_builder_start_offset_vector@@Base>
   21bb8:	cmp	r0, #0
   21bbc:	beq	21be8 <flatcc_builder_create_union_vector@@Base+0x5c>
   21bc0:	mov	r3, #0
   21bc4:	str	r3, [r6]
   21bc8:	str	r3, [r6, #4]
   21bcc:	mov	r0, r6
   21bd0:	add	sp, sp, #16
   21bd4:	ldrd	r4, [sp]
   21bd8:	ldrd	r6, [sp, #8]
   21bdc:	ldr	r8, [sp, #16]
   21be0:	add	sp, sp, #20
   21be4:	pop	{pc}		; (ldr pc, [sp], #4)
   21be8:	mov	r1, r7
   21bec:	mov	r0, r5
   21bf0:	bl	200c4 <flatcc_builder_extend_offset_vector@@Base>
   21bf4:	cmp	r0, #0
   21bf8:	beq	21bc0 <flatcc_builder_create_union_vector@@Base+0x34>
   21bfc:	ldr	r8, [r5, #20]
   21c00:	ldr	r3, [r5, #24]
   21c04:	add	r1, r7, r8
   21c08:	cmp	r1, r3
   21c0c:	str	r1, [r5, #20]
   21c10:	bcs	21cfc <flatcc_builder_create_union_vector@@Base+0x170>
   21c14:	ldr	r2, [r5, #16]
   21c18:	adds	r8, r2, r8
   21c1c:	beq	21bc0 <flatcc_builder_create_union_vector@@Base+0x34>
   21c20:	mov	r0, r5
   21c24:	bl	21ae4 <flatcc_builder_offset_vector_edit@@Base>
   21c28:	cmp	r7, #0
   21c2c:	mov	r3, r0
   21c30:	beq	21c60 <flatcc_builder_create_union_vector@@Base+0xd4>
   21c34:	add	r2, r4, r7, lsl #3
   21c38:	mov	r1, r4
   21c3c:	sub	lr, r8, #1
   21c40:	sub	ip, r0, #4
   21c44:	ldrb	r4, [r1]
   21c48:	add	r1, r1, #8
   21c4c:	strb	r4, [lr, #1]!
   21c50:	ldr	r4, [r1, #-4]
   21c54:	cmp	r1, r2
   21c58:	str	r4, [ip, #4]!
   21c5c:	bne	21c44 <flatcc_builder_create_union_vector@@Base+0xb8>
   21c60:	mov	r2, r8
   21c64:	mov	r1, r5
   21c68:	str	r7, [sp]
   21c6c:	add	r0, sp, #8
   21c70:	bl	21af8 <flatcc_builder_create_union_vector_direct@@Base>
   21c74:	mov	r1, #0
   21c78:	ldr	r0, [r5, #16]
   21c7c:	ldr	r2, [r5, #20]
   21c80:	ldr	r7, [sp, #8]
   21c84:	ldr	r4, [sp, #12]
   21c88:	bl	12998 <memset@plt>
   21c8c:	ldr	r3, [r5, #32]
   21c90:	str	r7, [r6]
   21c94:	ldr	r0, [r5, #60]	; 0x3c
   21c98:	str	r4, [r6, #4]
   21c9c:	ldr	r2, [r5, #64]	; 0x40
   21ca0:	ldr	ip, [r3]
   21ca4:	ldmib	r3, {r1, lr}
   21ca8:	add	r0, r0, ip
   21cac:	sub	r2, r2, ip
   21cb0:	str	r0, [r5, #16]
   21cb4:	cmp	r2, r1
   21cb8:	ldrh	r0, [r5, #128]	; 0x80
   21cbc:	movcs	r2, r1
   21cc0:	str	lr, [r5, #20]
   21cc4:	str	ip, [r5, #28]
   21cc8:	ldrh	ip, [r5, #130]	; 0x82
   21ccc:	str	r2, [r5, #24]
   21cd0:	ldr	r2, [r5, #156]	; 0x9c
   21cd4:	str	r1, [r3, #4]
   21cd8:	cmp	r0, ip
   21cdc:	sub	r0, r3, #36	; 0x24
   21ce0:	strhcc	ip, [r5, #128]	; 0x80
   21ce4:	ldrh	r1, [r3, #12]
   21ce8:	sub	r3, r2, #1
   21cec:	str	r0, [r5, #32]
   21cf0:	strh	r1, [r5, #130]	; 0x82
   21cf4:	str	r3, [r5, #156]	; 0x9c
   21cf8:	b	21bcc <flatcc_builder_create_union_vector@@Base+0x40>
   21cfc:	add	r1, r1, #1
   21d00:	mvn	r2, #3
   21d04:	mov	r0, r5
   21d08:	bl	1e8b8 <time_struct_buffer@@Base+0xb0>
   21d0c:	cmp	r0, #0
   21d10:	beq	21c14 <flatcc_builder_create_union_vector@@Base+0x88>
   21d14:	b	21bc0 <flatcc_builder_create_union_vector@@Base+0x34>

00021d18 <flatcc_builder_start_union_vector@@Base>:
   21d18:	mov	r1, #4
   21d1c:	strd	r4, [sp, #-16]!
   21d20:	mov	r4, r0
   21d24:	str	r6, [sp, #8]
   21d28:	str	lr, [sp, #12]
   21d2c:	bl	1ec74 <flatcc_builder_default_alloc@@Base+0x334>
   21d30:	cmp	r0, #0
   21d34:	bne	21d8c <flatcc_builder_start_union_vector@@Base+0x74>
   21d38:	ldr	ip, [r4, #28]
   21d3c:	mov	lr, #8
   21d40:	mov	r5, #7
   21d44:	ldr	r3, [r4, #32]
   21d48:	ldr	r2, [r4, #64]	; 0x40
   21d4c:	ldr	r1, [r4, #60]	; 0x3c
   21d50:	strh	r5, [r3, #14]
   21d54:	str	lr, [r3, #16]
   21d58:	sub	r2, r2, ip
   21d5c:	str	r0, [r3, #20]
   21d60:	cmn	r2, #4
   21d64:	mvnhi	r2, #3
   21d68:	add	r1, r1, ip
   21d6c:	str	r1, [r4, #16]
   21d70:	str	r2, [r4, #24]
   21d74:	mvn	r2, #3
   21d78:	str	r2, [r3, #4]
   21d7c:	ldrd	r4, [sp]
   21d80:	ldr	r6, [sp, #8]
   21d84:	add	sp, sp, #12
   21d88:	pop	{pc}		; (ldr pc, [sp], #4)
   21d8c:	mvn	r0, #0
   21d90:	b	21d7c <flatcc_builder_start_union_vector@@Base+0x64>

00021d94 <flatcc_builder_union_vector_edit@@Base>:
   21d94:	ldr	r0, [r0, #16]
   21d98:	bx	lr

00021d9c <flatcc_builder_union_vector_count@@Base>:
   21d9c:	ldr	r3, [r0, #32]
   21da0:	ldr	r0, [r3, #20]
   21da4:	bx	lr

00021da8 <flatcc_builder_end_union_vector@@Base>:
   21da8:	ldr	r3, [r1, #32]
   21dac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21db0:	ldrh	r3, [r3, #14]
   21db4:	strd	r6, [sp, #8]
   21db8:	str	r8, [sp, #16]
   21dbc:	str	lr, [sp, #20]
   21dc0:	sub	sp, sp, #16
   21dc4:	cmp	r3, #7
   21dc8:	bne	21f28 <flatcc_builder_end_union_vector@@Base+0x180>
   21dcc:	mov	r4, r1
   21dd0:	mov	r6, r0
   21dd4:	mov	r0, r1
   21dd8:	bl	21d9c <flatcc_builder_union_vector_count@@Base>
   21ddc:	ldr	r8, [r4, #20]
   21de0:	lsl	r7, r0, #2
   21de4:	mov	r5, r0
   21de8:	ldr	r3, [r4, #24]
   21dec:	add	r1, r7, r0
   21df0:	add	r1, r1, r8
   21df4:	cmp	r1, r3
   21df8:	str	r1, [r4, #20]
   21dfc:	bcs	21f00 <flatcc_builder_end_union_vector@@Base+0x158>
   21e00:	ldr	r3, [r4, #16]
   21e04:	adds	r8, r3, r8
   21e08:	beq	21f18 <flatcc_builder_end_union_vector@@Base+0x170>
   21e0c:	mov	r0, r4
   21e10:	add	r7, r8, r7
   21e14:	bl	21d94 <flatcc_builder_union_vector_edit@@Base>
   21e18:	cmp	r5, #0
   21e1c:	beq	21e48 <flatcc_builder_end_union_vector@@Base+0xa0>
   21e20:	add	r3, r0, r5, lsl #3
   21e24:	sub	ip, r7, #1
   21e28:	sub	r1, r8, #4
   21e2c:	ldrb	lr, [r0]
   21e30:	add	r0, r0, #8
   21e34:	strb	lr, [ip, #1]!
   21e38:	ldr	lr, [r0, #-4]
   21e3c:	cmp	r0, r3
   21e40:	str	lr, [r1, #4]!
   21e44:	bne	21e2c <flatcc_builder_end_union_vector@@Base+0x84>
   21e48:	mov	r3, r8
   21e4c:	mov	r2, r7
   21e50:	str	r5, [sp]
   21e54:	mov	r1, r4
   21e58:	add	r0, sp, #8
   21e5c:	bl	21af8 <flatcc_builder_create_union_vector_direct@@Base>
   21e60:	mov	r1, #0
   21e64:	ldr	r0, [r4, #16]
   21e68:	ldr	r2, [r4, #20]
   21e6c:	ldr	r7, [sp, #8]
   21e70:	ldr	r5, [sp, #12]
   21e74:	bl	12998 <memset@plt>
   21e78:	ldr	r3, [r4, #32]
   21e7c:	str	r7, [r6]
   21e80:	ldr	r0, [r4, #60]	; 0x3c
   21e84:	str	r5, [r6, #4]
   21e88:	ldr	r2, [r4, #64]	; 0x40
   21e8c:	ldr	ip, [r3]
   21e90:	ldmib	r3, {r1, lr}
   21e94:	add	r0, r0, ip
   21e98:	sub	r2, r2, ip
   21e9c:	str	r0, [r4, #16]
   21ea0:	cmp	r2, r1
   21ea4:	ldrh	r0, [r4, #128]	; 0x80
   21ea8:	movcs	r2, r1
   21eac:	str	lr, [r4, #20]
   21eb0:	str	ip, [r4, #28]
   21eb4:	ldrh	ip, [r4, #130]	; 0x82
   21eb8:	str	r2, [r4, #24]
   21ebc:	ldr	r2, [r4, #156]	; 0x9c
   21ec0:	str	r1, [r3, #4]
   21ec4:	cmp	r0, ip
   21ec8:	sub	r0, r3, #36	; 0x24
   21ecc:	strhcc	ip, [r4, #128]	; 0x80
   21ed0:	ldrh	r1, [r3, #12]
   21ed4:	sub	r3, r2, #1
   21ed8:	str	r0, [r4, #32]
   21edc:	strh	r1, [r4, #130]	; 0x82
   21ee0:	str	r3, [r4, #156]	; 0x9c
   21ee4:	mov	r0, r6
   21ee8:	add	sp, sp, #16
   21eec:	ldrd	r4, [sp]
   21ef0:	ldrd	r6, [sp, #8]
   21ef4:	ldr	r8, [sp, #16]
   21ef8:	add	sp, sp, #20
   21efc:	pop	{pc}		; (ldr pc, [sp], #4)
   21f00:	add	r1, r1, #1
   21f04:	mvn	r2, #3
   21f08:	mov	r0, r4
   21f0c:	bl	1e8b8 <time_struct_buffer@@Base+0xb0>
   21f10:	cmp	r0, #0
   21f14:	beq	21e00 <flatcc_builder_end_union_vector@@Base+0x58>
   21f18:	mov	r3, #0
   21f1c:	str	r3, [r6]
   21f20:	str	r3, [r6, #4]
   21f24:	b	21ee4 <flatcc_builder_end_union_vector@@Base+0x13c>
   21f28:	ldr	r3, [pc, #28]	; 21f4c <flatcc_builder_end_union_vector@@Base+0x1a4>
   21f2c:	movw	r2, #1617	; 0x651
   21f30:	ldr	r1, [pc, #24]	; 21f50 <flatcc_builder_end_union_vector@@Base+0x1a8>
   21f34:	ldr	r0, [pc, #24]	; 21f54 <flatcc_builder_end_union_vector@@Base+0x1ac>
   21f38:	add	r3, pc, r3
   21f3c:	add	r3, r3, #968	; 0x3c8
   21f40:	add	r1, pc, r1
   21f44:	add	r0, pc, r0
   21f48:	bl	129e0 <__assert_fail@plt>
   21f4c:	andeq	r6, r0, ip, ror r3
   21f50:	andeq	r6, r0, r4, asr #21
   21f54:	ldrdeq	r6, [r0], -ip

00021f58 <flatcc_builder_extend_union_vector@@Base>:
   21f58:	ldr	ip, [r0, #32]
   21f5c:	strd	r4, [sp, #-16]!
   21f60:	ldr	r3, [ip, #20]
   21f64:	str	r6, [sp, #8]
   21f68:	str	lr, [sp, #12]
   21f6c:	adds	r2, r1, r3
   21f70:	movcs	r3, #1
   21f74:	movcc	r3, #0
   21f78:	cmn	r2, #-536870911	; 0xe0000001
   21f7c:	movls	r4, #0
   21f80:	movhi	r4, #1
   21f84:	orrs	r4, r3, r4
   21f88:	bne	21fe0 <flatcc_builder_extend_union_vector@@Base+0x88>
   21f8c:	ldr	r6, [r0, #20]
   21f90:	mov	r5, r0
   21f94:	ldr	r3, [r0, #24]
   21f98:	str	r2, [ip, #20]
   21f9c:	add	r1, r6, r1, lsl #3
   21fa0:	cmp	r1, r3
   21fa4:	str	r1, [r0, #20]
   21fa8:	bcs	21fc4 <flatcc_builder_extend_union_vector@@Base+0x6c>
   21fac:	ldr	r0, [r5, #16]
   21fb0:	add	r0, r0, r6
   21fb4:	ldrd	r4, [sp]
   21fb8:	ldr	r6, [sp, #8]
   21fbc:	add	sp, sp, #12
   21fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   21fc4:	add	r1, r1, #1
   21fc8:	mvn	r2, #3
   21fcc:	bl	1e8b8 <time_struct_buffer@@Base+0xb0>
   21fd0:	cmp	r0, #0
   21fd4:	beq	21fac <flatcc_builder_extend_union_vector@@Base+0x54>
   21fd8:	mov	r0, r4
   21fdc:	b	21fb4 <flatcc_builder_extend_union_vector@@Base+0x5c>
   21fe0:	bl	1ec3c <flatcc_builder_default_alloc@@Base+0x2fc>

00021fe4 <flatcc_builder_truncate_union_vector@@Base>:
   21fe4:	mov	r3, r0
   21fe8:	ldr	r0, [r0, #32]
   21fec:	str	r4, [sp, #-8]!
   21ff0:	ldrh	r2, [r0, #14]
   21ff4:	str	lr, [sp, #4]
   21ff8:	cmp	r2, #7
   21ffc:	bne	2204c <flatcc_builder_truncate_union_vector@@Base+0x68>
   22000:	mov	lr, r1
   22004:	ldr	r1, [r0, #20]
   22008:	cmp	r1, lr
   2200c:	bcc	22070 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   22010:	ldr	r2, [r0, #16]
   22014:	sub	ip, r1, lr
   22018:	mov	r1, #0
   2201c:	str	ip, [r0, #20]
   22020:	ldr	r0, [r3, #16]
   22024:	ldr	ip, [r3, #20]
   22028:	mul	r2, r2, lr
   2202c:	sub	ip, ip, r2
   22030:	add	r0, r0, ip
   22034:	str	ip, [r3, #20]
   22038:	bl	12998 <memset@plt>
   2203c:	ldr	r4, [sp]
   22040:	add	sp, sp, #4
   22044:	mov	r0, #0
   22048:	pop	{pc}		; (ldr pc, [sp], #4)
   2204c:	ldr	r3, [pc, #64]	; 22094 <flatcc_builder_truncate_union_vector@@Base+0xb0>
   22050:	movw	r2, #1665	; 0x681
   22054:	ldr	r1, [pc, #60]	; 22098 <flatcc_builder_truncate_union_vector@@Base+0xb4>
   22058:	ldr	r0, [pc, #60]	; 2209c <flatcc_builder_truncate_union_vector@@Base+0xb8>
   2205c:	add	r3, pc, r3
   22060:	add	r3, r3, #1000	; 0x3e8
   22064:	add	r1, pc, r1
   22068:	add	r0, pc, r0
   2206c:	bl	129e0 <__assert_fail@plt>
   22070:	ldr	r3, [pc, #40]	; 220a0 <flatcc_builder_truncate_union_vector@@Base+0xbc>
   22074:	movw	r2, #1666	; 0x682
   22078:	ldr	r1, [pc, #36]	; 220a4 <flatcc_builder_truncate_union_vector@@Base+0xc0>
   2207c:	ldr	r0, [pc, #36]	; 220a8 <flatcc_builder_truncate_union_vector@@Base+0xc4>
   22080:	add	r3, pc, r3
   22084:	add	r3, r3, #1000	; 0x3e8
   22088:	add	r1, pc, r1
   2208c:	add	r0, pc, r0
   22090:	bl	129e0 <__assert_fail@plt>
   22094:	andeq	r6, r0, r8, asr r2
   22098:	andeq	r6, r0, r0, lsr #19
   2209c:			; <UNDEFINED> instruction: 0x00006cb8
   220a0:	andeq	r6, r0, r4, lsr r2
   220a4:	andeq	r6, r0, ip, ror r9
   220a8:			; <UNDEFINED> instruction: 0x00006bb8

000220ac <flatcc_builder_union_vector_push@@Base>:
   220ac:	strd	r4, [sp, #-20]!	; 0xffffffec
   220b0:	strd	r6, [sp, #8]
   220b4:	str	lr, [sp, #16]
   220b8:	sub	sp, sp, #12
   220bc:	add	r3, sp, #8
   220c0:	stmdb	r3, {r1, r2}
   220c4:	ldr	r2, [r0, #32]
   220c8:	ldrh	r3, [r2, #14]
   220cc:	cmp	r3, #7
   220d0:	bne	22148 <flatcc_builder_union_vector_push@@Base+0x9c>
   220d4:	ldr	r3, [r2, #20]
   220d8:	cmn	r3, #-536870911	; 0xe0000001
   220dc:	beq	22140 <flatcc_builder_union_vector_push@@Base+0x94>
   220e0:	ldr	r5, [r0, #20]
   220e4:	add	r3, r3, #1
   220e8:	mov	r4, r0
   220ec:	ldr	r1, [r0, #24]
   220f0:	str	r3, [r2, #20]
   220f4:	add	r3, r5, #8
   220f8:	cmp	r3, r1
   220fc:	str	r3, [r0, #20]
   22100:	bcs	2212c <flatcc_builder_union_vector_push@@Base+0x80>
   22104:	ldr	r3, [r4, #16]
   22108:	adds	r0, r3, r5
   2210c:	beq	22118 <flatcc_builder_union_vector_push@@Base+0x6c>
   22110:	ldrd	r6, [sp]
   22114:	strd	r6, [r3, r5]
   22118:	add	sp, sp, #12
   2211c:	ldrd	r4, [sp]
   22120:	ldrd	r6, [sp, #8]
   22124:	add	sp, sp, #16
   22128:	pop	{pc}		; (ldr pc, [sp], #4)
   2212c:	mvn	r2, #3
   22130:	add	r1, r5, #9
   22134:	bl	1e8b8 <time_struct_buffer@@Base+0xb0>
   22138:	cmp	r0, #0
   2213c:	beq	22104 <flatcc_builder_union_vector_push@@Base+0x58>
   22140:	mov	r0, #0
   22144:	b	22118 <flatcc_builder_union_vector_push@@Base+0x6c>
   22148:	ldr	r3, [pc, #28]	; 2216c <flatcc_builder_union_vector_push@@Base+0xc0>
   2214c:	movw	r2, #1677	; 0x68d
   22150:	ldr	r1, [pc, #24]	; 22170 <flatcc_builder_union_vector_push@@Base+0xc4>
   22154:	ldr	r0, [pc, #24]	; 22174 <flatcc_builder_union_vector_push@@Base+0xc8>
   22158:	add	r3, pc, r3
   2215c:	add	r3, r3, #1040	; 0x410
   22160:	add	r1, pc, r1
   22164:	add	r0, pc, r0
   22168:	bl	129e0 <__assert_fail@plt>
   2216c:	andeq	r6, r0, ip, asr r1
   22170:	andeq	r6, r0, r4, lsr #17
   22174:			; <UNDEFINED> instruction: 0x00006bbc

00022178 <flatcc_builder_append_union_vector@@Base>:
   22178:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2217c:	mov	r4, r1
   22180:	ldr	r1, [r0, #32]
   22184:	ldrh	r3, [r1, #14]
   22188:	strd	r6, [sp, #8]
   2218c:	str	r8, [sp, #16]
   22190:	str	lr, [sp, #20]
   22194:	cmp	r3, #7
   22198:	bne	22238 <flatcc_builder_append_union_vector@@Base+0xc0>
   2219c:	ldr	r3, [r1, #20]
   221a0:	adds	r3, r2, r3
   221a4:	movcs	lr, #1
   221a8:	movcc	lr, #0
   221ac:	cmn	r3, #-536870911	; 0xe0000001
   221b0:	movls	ip, #0
   221b4:	movhi	ip, #1
   221b8:	orrs	r8, lr, ip
   221bc:	bne	22260 <flatcc_builder_append_union_vector@@Base+0xe8>
   221c0:	ldr	r7, [r0, #20]
   221c4:	lsl	r6, r2, #3
   221c8:	mov	r5, r0
   221cc:	str	r3, [r1, #20]
   221d0:	ldr	r3, [r0, #24]
   221d4:	add	r1, r6, r7
   221d8:	cmp	r1, r3
   221dc:	str	r1, [r0, #20]
   221e0:	bcs	2221c <flatcc_builder_append_union_vector@@Base+0xa4>
   221e4:	ldr	r3, [r5, #16]
   221e8:	adds	r3, r3, r7
   221ec:	beq	22204 <flatcc_builder_append_union_vector@@Base+0x8c>
   221f0:	mov	r0, r3
   221f4:	mov	r2, r6
   221f8:	mov	r1, r4
   221fc:	bl	12908 <memcpy@plt>
   22200:	mov	r3, r0
   22204:	ldrd	r4, [sp]
   22208:	mov	r0, r3
   2220c:	ldrd	r6, [sp, #8]
   22210:	ldr	r8, [sp, #16]
   22214:	add	sp, sp, #20
   22218:	pop	{pc}		; (ldr pc, [sp], #4)
   2221c:	add	r1, r1, #1
   22220:	mvn	r2, #3
   22224:	bl	1e8b8 <time_struct_buffer@@Base+0xb0>
   22228:	cmp	r0, #0
   2222c:	beq	221e4 <flatcc_builder_append_union_vector@@Base+0x6c>
   22230:	mov	r3, r8
   22234:	b	22204 <flatcc_builder_append_union_vector@@Base+0x8c>
   22238:	ldr	r3, [pc, #36]	; 22264 <flatcc_builder_append_union_vector@@Base+0xec>
   2223c:	movw	r2, #1692	; 0x69c
   22240:	ldr	r1, [pc, #32]	; 22268 <flatcc_builder_append_union_vector@@Base+0xf0>
   22244:	ldr	r0, [pc, #32]	; 2226c <flatcc_builder_append_union_vector@@Base+0xf4>
   22248:	add	r3, pc, r3
   2224c:	add	r3, r3, #1072	; 0x430
   22250:	add	r1, pc, r1
   22254:	add	r3, r3, #4
   22258:	add	r0, pc, r0
   2225c:	bl	129e0 <__assert_fail@plt>
   22260:	bl	1ec3c <flatcc_builder_default_alloc@@Base+0x2fc>
   22264:	andeq	r6, r0, ip, rrx
   22268:			; <UNDEFINED> instruction: 0x000067b4
   2226c:	andeq	r6, r0, r8, asr #21

00022270 <flatcc_builder_create_string@@Base>:
   22270:	ldr	ip, [r0, #136]	; 0x88
   22274:	cmp	r2, #0
   22278:	strd	r4, [sp, #-20]!	; 0xffffffec
   2227c:	mov	r5, #4
   22280:	mov	r4, r0
   22284:	strd	r6, [sp, #8]
   22288:	mov	r0, #1
   2228c:	moveq	r7, #2
   22290:	str	lr, [sp, #16]
   22294:	sub	sp, sp, #92	; 0x5c
   22298:	moveq	r1, r0
   2229c:	add	r3, sp, #12
   222a0:	ldr	lr, [pc, #204]	; 22374 <flatcc_builder_create_string@@Base+0x104>
   222a4:	str	r2, [sp, #12]
   222a8:	str	r3, [sp, #24]
   222ac:	sub	r3, ip, r2
   222b0:	sub	r3, r3, #1
   222b4:	str	r5, [sp, #28]
   222b8:	and	r3, r3, #3
   222bc:	add	lr, pc, lr
   222c0:	add	r3, r3, r0
   222c4:	beq	222dc <flatcc_builder_create_string@@Base+0x6c>
   222c8:	add	r5, r2, r5
   222cc:	mov	r7, #3
   222d0:	str	r1, [sp, #32]
   222d4:	mov	r1, #2
   222d8:	str	r2, [sp, #36]	; 0x24
   222dc:	ldr	r6, [pc, #148]	; 22378 <flatcc_builder_create_string@@Base+0x108>
   222e0:	add	r0, r3, r5
   222e4:	add	r2, sp, #88	; 0x58
   222e8:	add	r1, r1, #1
   222ec:	sub	r5, ip, r0
   222f0:	add	r1, r2, r1, lsl #3
   222f4:	str	r0, [sp, #16]
   222f8:	cmp	ip, r5
   222fc:	ldr	r2, [lr, r6]
   22300:	str	r7, [sp, #20]
   22304:	strd	r2, [r1, #-72]	; 0xffffffb8
   22308:	ble	2234c <flatcc_builder_create_string@@Base+0xdc>
   2230c:	mov	r2, r7
   22310:	mov	r3, r5
   22314:	str	r0, [sp]
   22318:	add	r1, sp, #24
   2231c:	ldr	r0, [r4, #36]	; 0x24
   22320:	ldr	r6, [r4, #44]	; 0x2c
   22324:	blx	r6
   22328:	cmp	r0, #0
   2232c:	bne	22370 <flatcc_builder_create_string@@Base+0x100>
   22330:	mov	r0, r5
   22334:	str	r5, [r4, #136]	; 0x88
   22338:	add	sp, sp, #92	; 0x5c
   2233c:	ldrd	r4, [sp]
   22340:	ldrd	r6, [sp, #8]
   22344:	add	sp, sp, #16
   22348:	pop	{pc}		; (ldr pc, [sp], #4)
   2234c:	ldr	r3, [pc, #40]	; 2237c <flatcc_builder_create_string@@Base+0x10c>
   22350:	movw	r2, #647	; 0x287
   22354:	ldr	r1, [pc, #36]	; 22380 <flatcc_builder_create_string@@Base+0x110>
   22358:	ldr	r0, [pc, #36]	; 22384 <flatcc_builder_create_string@@Base+0x114>
   2235c:	add	r3, pc, r3
   22360:	add	r3, r3, #44	; 0x2c
   22364:	add	r1, pc, r1
   22368:	add	r0, pc, r0
   2236c:	bl	129e0 <__assert_fail@plt>
   22370:	bl	1ec04 <flatcc_builder_default_alloc@@Base+0x2c4>
   22374:	andeq	r7, r1, ip, lsr sp
   22378:	andeq	r0, r0, r4, rrx
   2237c:	andeq	r5, r0, r8, asr pc
   22380:	andeq	r6, r0, r0, lsr #13
   22384:	andeq	r6, r0, r4, lsr #14

00022388 <flatcc_builder_create_string_str@@Base>:
   22388:	strd	r4, [sp, #-16]!
   2238c:	mov	r5, r0
   22390:	mov	r0, r1
   22394:	mov	r4, r1
   22398:	str	r6, [sp, #8]
   2239c:	str	lr, [sp, #12]
   223a0:	bl	12974 <strlen@plt>
   223a4:	mov	r2, r0
   223a8:	mov	r1, r4
   223ac:	ldr	r6, [sp, #8]
   223b0:	mov	r0, r5
   223b4:	ldrd	r4, [sp]
   223b8:	ldr	lr, [sp, #12]
   223bc:	add	sp, sp, #16
   223c0:	b	22270 <flatcc_builder_create_string@@Base>

000223c4 <flatcc_builder_create_string_strn@@Base>:
   223c4:	strd	r4, [sp, #-16]!
   223c8:	mov	r4, r1
   223cc:	mov	r1, #0
   223d0:	str	r6, [sp, #8]
   223d4:	mov	r6, r0
   223d8:	mov	r0, r4
   223dc:	mov	r5, r2
   223e0:	str	lr, [sp, #12]
   223e4:	bl	129b0 <memchr@plt>
   223e8:	cmp	r0, #0
   223ec:	mov	r1, r4
   223f0:	ldr	lr, [sp, #12]
   223f4:	subne	r5, r0, r4
   223f8:	mov	r0, r6
   223fc:	mov	r2, r5
   22400:	ldrd	r4, [sp]
   22404:	ldr	r6, [sp, #8]
   22408:	add	sp, sp, #16
   2240c:	b	22270 <flatcc_builder_create_string@@Base>

00022410 <flatcc_builder_end_string@@Base>:
   22410:	ldr	r3, [r0, #32]
   22414:	strd	r4, [sp, #-16]!
   22418:	ldrh	r2, [r3, #14]
   2241c:	str	r6, [sp, #8]
   22420:	str	lr, [sp, #12]
   22424:	cmp	r2, #6
   22428:	bne	22500 <flatcc_builder_end_string@@Base+0xf0>
   2242c:	ldr	r2, [r3, #20]
   22430:	mov	r4, r0
   22434:	ldr	r3, [r0, #20]
   22438:	cmp	r2, r3
   2243c:	bne	224d8 <flatcc_builder_end_string@@Base+0xc8>
   22440:	ldr	r1, [r0, #16]
   22444:	bl	22270 <flatcc_builder_create_string@@Base>
   22448:	subs	r5, r0, #0
   2244c:	beq	224c4 <flatcc_builder_end_string@@Base+0xb4>
   22450:	mov	r1, #0
   22454:	ldr	r0, [r4, #16]
   22458:	ldr	r2, [r4, #20]
   2245c:	bl	12998 <memset@plt>
   22460:	ldr	r3, [r4, #32]
   22464:	ldr	r0, [r4, #60]	; 0x3c
   22468:	ldr	r2, [r4, #64]	; 0x40
   2246c:	ldr	ip, [r3]
   22470:	ldmib	r3, {r1, lr}
   22474:	add	r0, r0, ip
   22478:	sub	r2, r2, ip
   2247c:	str	r0, [r4, #16]
   22480:	cmp	r2, r1
   22484:	ldrh	r0, [r4, #128]	; 0x80
   22488:	movcs	r2, r1
   2248c:	str	lr, [r4, #20]
   22490:	str	ip, [r4, #28]
   22494:	ldrh	ip, [r4, #130]	; 0x82
   22498:	str	r2, [r4, #24]
   2249c:	ldr	r2, [r4, #156]	; 0x9c
   224a0:	str	r1, [r3, #4]
   224a4:	cmp	r0, ip
   224a8:	sub	r0, r3, #36	; 0x24
   224ac:	strhcc	ip, [r4, #128]	; 0x80
   224b0:	ldrh	r1, [r3, #12]
   224b4:	sub	r3, r2, #1
   224b8:	str	r0, [r4, #32]
   224bc:	strh	r1, [r4, #130]	; 0x82
   224c0:	str	r3, [r4, #156]	; 0x9c
   224c4:	mov	r0, r5
   224c8:	ldrd	r4, [sp]
   224cc:	ldr	r6, [sp, #8]
   224d0:	add	sp, sp, #12
   224d4:	pop	{pc}		; (ldr pc, [sp], #4)
   224d8:	ldr	r3, [pc, #72]	; 22528 <flatcc_builder_end_string@@Base+0x118>
   224dc:	movw	r2, #1733	; 0x6c5
   224e0:	ldr	r1, [pc, #68]	; 2252c <flatcc_builder_end_string@@Base+0x11c>
   224e4:	ldr	r0, [pc, #68]	; 22530 <flatcc_builder_end_string@@Base+0x120>
   224e8:	add	r3, pc, r3
   224ec:	add	r3, r3, #1104	; 0x450
   224f0:	add	r1, pc, r1
   224f4:	add	r3, r3, #8
   224f8:	add	r0, pc, r0
   224fc:	bl	129e0 <__assert_fail@plt>
   22500:	ldr	r3, [pc, #44]	; 22534 <flatcc_builder_end_string@@Base+0x124>
   22504:	movw	r2, #1732	; 0x6c4
   22508:	ldr	r1, [pc, #40]	; 22538 <flatcc_builder_end_string@@Base+0x128>
   2250c:	ldr	r0, [pc, #40]	; 2253c <flatcc_builder_end_string@@Base+0x12c>
   22510:	add	r3, pc, r3
   22514:	add	r3, r3, #1104	; 0x450
   22518:	add	r1, pc, r1
   2251c:	add	r3, r3, #8
   22520:	add	r0, pc, r0
   22524:	bl	129e0 <__assert_fail@plt>
   22528:	andeq	r5, r0, ip, asr #27
   2252c:	andeq	r6, r0, r4, lsl r5
   22530:	andeq	r6, r0, ip, asr r8
   22534:	andeq	r5, r0, r4, lsr #27
   22538:	andeq	r6, r0, ip, ror #9
   2253c:	ldrdeq	r6, [r0], -r4

00022540 <flatcc_builder_string_edit@@Base>:
   22540:	ldr	r0, [r0, #16]
   22544:	bx	lr

00022548 <flatcc_builder_string_len@@Base>:
   22548:	ldr	r3, [r0, #32]
   2254c:	ldr	r0, [r3, #20]
   22550:	bx	lr

00022554 <flatcc_builder_table_add@@Base>:
   22554:	strd	r4, [sp, #-32]!	; 0xffffffe0
   22558:	mov	r4, r0
   2255c:	ldr	r0, [r0, #32]
   22560:	ldrh	r0, [r0, #14]
   22564:	strd	r6, [sp, #8]
   22568:	strd	r8, [sp, #16]
   2256c:	str	sl, [sp, #24]
   22570:	str	lr, [sp, #28]
   22574:	cmp	r0, #3
   22578:	bne	226a8 <flatcc_builder_table_add@@Base+0x154>
   2257c:	movw	r0, #32764	; 0x7ffc
   22580:	cmp	r1, r0
   22584:	bhi	22680 <flatcc_builder_table_add@@Base+0x12c>
   22588:	ldrh	r0, [r4, #130]	; 0x82
   2258c:	lsl	r8, r1, #1
   22590:	ldr	lr, [r4, #4]
   22594:	cmp	r0, r3
   22598:	strhcc	r3, [r4, #130]	; 0x82
   2259c:	ldrh	r6, [lr, r8]
   225a0:	add	lr, lr, r8
   225a4:	cmp	r6, #0
   225a8:	bne	22658 <flatcc_builder_table_add@@Base+0x104>
   225ac:	ldr	ip, [r4, #12]
   225b0:	movw	r9, #31153	; 0x79b1
   225b4:	movt	r9, #40503	; 0x9e37
   225b8:	uxth	r7, r1
   225bc:	sub	r5, r3, #1
   225c0:	ldr	r0, [r4, #20]
   225c4:	rsb	r3, r3, #0
   225c8:	eor	ip, ip, r1
   225cc:	ldr	r1, [r4, #24]
   225d0:	mul	ip, r9, ip
   225d4:	add	r5, r5, r0
   225d8:	and	r5, r5, r3
   225dc:	eor	ip, ip, r2
   225e0:	add	r2, r2, r5
   225e4:	cmp	r2, r1
   225e8:	mul	ip, r9, ip
   225ec:	str	ip, [r4, #12]
   225f0:	str	r2, [r4, #20]
   225f4:	bcs	22630 <flatcc_builder_table_add@@Base+0xdc>
   225f8:	add	r3, r5, #4
   225fc:	ldr	r0, [r4, #16]
   22600:	strh	r3, [lr]
   22604:	ldrh	r3, [r4, #8]
   22608:	add	r0, r0, r5
   2260c:	cmp	r3, r7
   22610:	addls	r7, r7, #1
   22614:	strhls	r7, [r4, #8]
   22618:	ldrd	r4, [sp]
   2261c:	ldrd	r6, [sp, #8]
   22620:	ldrd	r8, [sp, #16]
   22624:	ldr	sl, [sp, #24]
   22628:	add	sp, sp, #28
   2262c:	pop	{pc}		; (ldr pc, [sp], #4)
   22630:	add	r1, r2, #1
   22634:	mov	r0, r4
   22638:	movw	r2, #65532	; 0xfffc
   2263c:	bl	1e8b8 <time_struct_buffer@@Base+0xb0>
   22640:	cmp	r0, #0
   22644:	movne	r0, r6
   22648:	bne	22618 <flatcc_builder_table_add@@Base+0xc4>
   2264c:	ldr	lr, [r4, #4]
   22650:	add	lr, lr, r8
   22654:	b	225f8 <flatcc_builder_table_add@@Base+0xa4>
   22658:	ldr	r3, [pc, #112]	; 226d0 <flatcc_builder_table_add@@Base+0x17c>
   2265c:	movw	r2, #1784	; 0x6f8
   22660:	ldr	r1, [pc, #108]	; 226d4 <flatcc_builder_table_add@@Base+0x180>
   22664:	ldr	r0, [pc, #108]	; 226d8 <flatcc_builder_table_add@@Base+0x184>
   22668:	add	r3, pc, r3
   2266c:	add	r3, r3, #1136	; 0x470
   22670:	add	r1, pc, r1
   22674:	add	r3, r3, #4
   22678:	add	r0, pc, r0
   2267c:	bl	129e0 <__assert_fail@plt>
   22680:	ldr	r3, [pc, #84]	; 226dc <flatcc_builder_table_add@@Base+0x188>
   22684:	movw	r2, #1774	; 0x6ee
   22688:	ldr	r1, [pc, #80]	; 226e0 <flatcc_builder_table_add@@Base+0x18c>
   2268c:	ldr	r0, [pc, #80]	; 226e4 <flatcc_builder_table_add@@Base+0x190>
   22690:	add	r3, pc, r3
   22694:	add	r3, r3, #1136	; 0x470
   22698:	add	r1, pc, r1
   2269c:	add	r3, r3, #4
   226a0:	add	r0, pc, r0
   226a4:	bl	129e0 <__assert_fail@plt>
   226a8:	ldr	r3, [pc, #56]	; 226e8 <flatcc_builder_table_add@@Base+0x194>
   226ac:	movw	r2, #1773	; 0x6ed
   226b0:	ldr	r1, [pc, #52]	; 226ec <flatcc_builder_table_add@@Base+0x198>
   226b4:	ldr	r0, [pc, #52]	; 226f0 <flatcc_builder_table_add@@Base+0x19c>
   226b8:	add	r3, pc, r3
   226bc:	add	r3, r3, #1136	; 0x470
   226c0:	add	r1, pc, r1
   226c4:	add	r3, r3, #4
   226c8:	add	r0, pc, r0
   226cc:	bl	129e0 <__assert_fail@plt>
   226d0:	andeq	r5, r0, ip, asr #24
   226d4:	muleq	r0, r4, r3
   226d8:	andeq	r6, r0, r4, lsl r4
   226dc:	andeq	r5, r0, r4, lsr #24
   226e0:	andeq	r6, r0, ip, ror #6
   226e4:	ldrdeq	r6, [r0], -r8
   226e8:	strdeq	r5, [r0], -ip
   226ec:	andeq	r6, r0, r4, asr #6
   226f0:	andeq	r6, r0, r8, lsl r6

000226f4 <flatcc_builder_table_edit@@Base>:
   226f4:	ldr	r2, [r0, #32]
   226f8:	ldrh	r2, [r2, #14]
   226fc:	cmp	r2, #3
   22700:	bne	22718 <flatcc_builder_table_edit@@Base+0x24>
   22704:	ldr	r3, [r0, #20]
   22708:	ldr	r0, [r0, #16]
   2270c:	sub	r3, r3, r1
   22710:	add	r0, r0, r3
   22714:	bx	lr
   22718:	ldr	r3, [pc, #36]	; 22744 <flatcc_builder_table_edit@@Base+0x50>
   2271c:	movw	r2, #1794	; 0x702
   22720:	str	r4, [sp, #-8]!
   22724:	ldr	r1, [pc, #28]	; 22748 <flatcc_builder_table_edit@@Base+0x54>
   22728:	str	lr, [sp, #4]
   2272c:	ldr	r0, [pc, #24]	; 2274c <flatcc_builder_table_edit@@Base+0x58>
   22730:	add	r3, pc, r3
   22734:	add	r3, r3, #1168	; 0x490
   22738:	add	r1, pc, r1
   2273c:	add	r0, pc, r0
   22740:	bl	129e0 <__assert_fail@plt>
   22744:	andeq	r5, r0, r4, lsl #23
   22748:	andeq	r6, r0, ip, asr #5
   2274c:	andeq	r6, r0, r4, lsr #11

00022750 <flatcc_builder_table_add_copy@@Base>:
   22750:	strd	r4, [sp, #-16]!
   22754:	mov	r4, r3
   22758:	ldrh	r3, [sp, #16]
   2275c:	str	r6, [sp, #8]
   22760:	mov	r6, r2
   22764:	mov	r2, r4
   22768:	str	lr, [sp, #12]
   2276c:	bl	22554 <flatcc_builder_table_add@@Base>
   22770:	subs	r5, r0, #0
   22774:	beq	22784 <flatcc_builder_table_add_copy@@Base+0x34>
   22778:	mov	r2, r4
   2277c:	mov	r1, r6
   22780:	bl	12908 <memcpy@plt>
   22784:	mov	r0, r5
   22788:	ldrd	r4, [sp]
   2278c:	ldr	r6, [sp, #8]
   22790:	add	sp, sp, #12
   22794:	pop	{pc}		; (ldr pc, [sp], #4)

00022798 <flatcc_builder_table_add_offset@@Base>:
   22798:	ldr	r3, [r0, #32]
   2279c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   227a0:	ldrh	r3, [r3, #14]
   227a4:	strd	r6, [sp, #8]
   227a8:	str	r8, [sp, #16]
   227ac:	str	lr, [sp, #20]
   227b0:	cmp	r3, #3
   227b4:	bne	228dc <flatcc_builder_table_add_offset@@Base+0x144>
   227b8:	movw	r3, #32764	; 0x7ffc
   227bc:	cmp	r1, r3
   227c0:	bhi	228b4 <flatcc_builder_table_add_offset@@Base+0x11c>
   227c4:	ldr	ip, [r0, #4]
   227c8:	lsl	r8, r1, #1
   227cc:	mov	r4, r0
   227d0:	ldrh	r6, [ip, r8]
   227d4:	add	ip, ip, r8
   227d8:	cmp	r6, #0
   227dc:	bne	2288c <flatcc_builder_table_add_offset@@Base+0xf4>
   227e0:	ldr	r3, [r0, #12]
   227e4:	movw	r2, #31153	; 0x79b1
   227e8:	movt	r2, #40503	; 0x9e37
   227ec:	uxth	r7, r1
   227f0:	ldr	r5, [r0, #20]
   227f4:	ldr	lr, [r0, #24]
   227f8:	eor	r3, r3, r1
   227fc:	mul	r3, r2, r3
   22800:	add	r5, r5, #3
   22804:	bic	r5, r5, #3
   22808:	add	r1, r5, #4
   2280c:	eor	r3, r3, #4
   22810:	cmp	r1, lr
   22814:	str	r1, [r0, #20]
   22818:	mul	r3, r2, r3
   2281c:	str	r3, [r0, #12]
   22820:	bhi	2286c <flatcc_builder_table_add_offset@@Base+0xd4>
   22824:	uxth	r2, r5
   22828:	ldr	r0, [r4, #16]
   2282c:	add	r3, r2, #4
   22830:	strh	r3, [ip]
   22834:	ldrh	r3, [r4, #8]
   22838:	add	r0, r0, r5
   2283c:	cmp	r3, r7
   22840:	ldr	r3, [r4]
   22844:	addls	r7, r7, #1
   22848:	strhls	r7, [r4, #8]
   2284c:	add	r1, r3, #2
   22850:	str	r1, [r4]
   22854:	strh	r2, [r3]
   22858:	ldrd	r4, [sp]
   2285c:	ldrd	r6, [sp, #8]
   22860:	ldr	r8, [sp, #16]
   22864:	add	sp, sp, #20
   22868:	pop	{pc}		; (ldr pc, [sp], #4)
   2286c:	movw	r2, #65532	; 0xfffc
   22870:	bl	1e8b8 <time_struct_buffer@@Base+0xb0>
   22874:	cmp	r0, #0
   22878:	movne	r0, r6
   2287c:	bne	22858 <flatcc_builder_table_add_offset@@Base+0xc0>
   22880:	ldr	ip, [r4, #4]
   22884:	add	ip, ip, r8
   22888:	b	22824 <flatcc_builder_table_add_offset@@Base+0x8c>
   2288c:	ldr	r3, [pc, #112]	; 22904 <flatcc_builder_table_add_offset@@Base+0x16c>
   22890:	movw	r2, #1819	; 0x71b
   22894:	ldr	r1, [pc, #108]	; 22908 <flatcc_builder_table_add_offset@@Base+0x170>
   22898:	ldr	r0, [pc, #108]	; 2290c <flatcc_builder_table_add_offset@@Base+0x174>
   2289c:	add	r3, pc, r3
   228a0:	add	r3, r3, #1184	; 0x4a0
   228a4:	add	r1, pc, r1
   228a8:	add	r3, r3, #12
   228ac:	add	r0, pc, r0
   228b0:	bl	129e0 <__assert_fail@plt>
   228b4:	ldr	r3, [pc, #84]	; 22910 <flatcc_builder_table_add_offset@@Base+0x178>
   228b8:	movw	r2, #1812	; 0x714
   228bc:	ldr	r1, [pc, #80]	; 22914 <flatcc_builder_table_add_offset@@Base+0x17c>
   228c0:	ldr	r0, [pc, #80]	; 22918 <flatcc_builder_table_add_offset@@Base+0x180>
   228c4:	add	r3, pc, r3
   228c8:	add	r3, r3, #1184	; 0x4a0
   228cc:	add	r1, pc, r1
   228d0:	add	r3, r3, #12
   228d4:	add	r0, pc, r0
   228d8:	bl	129e0 <__assert_fail@plt>
   228dc:	ldr	r3, [pc, #56]	; 2291c <flatcc_builder_table_add_offset@@Base+0x184>
   228e0:	movw	r2, #1811	; 0x713
   228e4:	ldr	r1, [pc, #52]	; 22920 <flatcc_builder_table_add_offset@@Base+0x188>
   228e8:	ldr	r0, [pc, #52]	; 22924 <flatcc_builder_table_add_offset@@Base+0x18c>
   228ec:	add	r3, pc, r3
   228f0:	add	r3, r3, #1184	; 0x4a0
   228f4:	add	r1, pc, r1
   228f8:	add	r3, r3, #12
   228fc:	add	r0, pc, r0
   22900:	bl	129e0 <__assert_fail@plt>
   22904:	andeq	r5, r0, r8, lsl sl
   22908:	andeq	r6, r0, r0, ror #2
   2290c:	andeq	r6, r0, r0, ror #3
   22910:	strdeq	r5, [r0], -r0
   22914:	andeq	r6, r0, r8, lsr r1
   22918:	andeq	r6, r0, r4, lsr #9
   2291c:	andeq	r5, r0, r8, asr #19
   22920:	andeq	r6, r0, r0, lsl r1
   22924:	andeq	r6, r0, r4, ror #7

00022928 <flatcc_builder_table_add_union@@Base>:
   22928:	strd	r4, [sp, #-20]!	; 0xffffffec
   2292c:	strd	r6, [sp, #8]
   22930:	str	lr, [sp, #16]
   22934:	sub	sp, sp, #12
   22938:	add	ip, sp, #8
   2293c:	stmdb	ip, {r2, r3}
   22940:	ldr	r3, [r0, #32]
   22944:	ldrb	r5, [sp]
   22948:	ldr	r6, [sp, #4]
   2294c:	ldrh	r3, [r3, #14]
   22950:	cmp	r3, #3
   22954:	bne	229e8 <flatcc_builder_table_add_union@@Base+0xc0>
   22958:	cmp	r5, #0
   2295c:	mov	r4, r0
   22960:	mov	r7, r1
   22964:	beq	229b8 <flatcc_builder_table_add_union@@Base+0x90>
   22968:	cmp	r6, #0
   2296c:	beq	22980 <flatcc_builder_table_add_union@@Base+0x58>
   22970:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   22974:	cmp	r0, #0
   22978:	strne	r6, [r0]
   2297c:	beq	22a38 <flatcc_builder_table_add_union@@Base+0x110>
   22980:	mov	r3, #1
   22984:	sub	r1, r7, #1
   22988:	mov	r2, r3
   2298c:	mov	r0, r4
   22990:	bl	22554 <flatcc_builder_table_add@@Base>
   22994:	subs	r3, r0, #0
   22998:	beq	22a10 <flatcc_builder_table_add_union@@Base+0xe8>
   2299c:	mov	r0, #0
   229a0:	strb	r5, [r3]
   229a4:	add	sp, sp, #12
   229a8:	ldrd	r4, [sp]
   229ac:	ldrd	r6, [sp, #8]
   229b0:	add	sp, sp, #16
   229b4:	pop	{pc}		; (ldr pc, [sp], #4)
   229b8:	cmp	r6, #0
   229bc:	beq	22980 <flatcc_builder_table_add_union@@Base+0x58>
   229c0:	ldr	r3, [pc, #152]	; 22a60 <flatcc_builder_table_add_union@@Base+0x138>
   229c4:	movw	r2, #1519	; 0x5ef
   229c8:	ldr	r1, [pc, #148]	; 22a64 <flatcc_builder_table_add_union@@Base+0x13c>
   229cc:	ldr	r0, [pc, #148]	; 22a68 <flatcc_builder_table_add_union@@Base+0x140>
   229d0:	add	r3, pc, r3
   229d4:	add	r3, r3, #1216	; 0x4c0
   229d8:	add	r1, pc, r1
   229dc:	add	r3, r3, #12
   229e0:	add	r0, pc, r0
   229e4:	bl	129e0 <__assert_fail@plt>
   229e8:	ldr	r3, [pc, #124]	; 22a6c <flatcc_builder_table_add_union@@Base+0x144>
   229ec:	movw	r2, #1518	; 0x5ee
   229f0:	ldr	r1, [pc, #120]	; 22a70 <flatcc_builder_table_add_union@@Base+0x148>
   229f4:	ldr	r0, [pc, #120]	; 22a74 <flatcc_builder_table_add_union@@Base+0x14c>
   229f8:	add	r3, pc, r3
   229fc:	add	r3, r3, #1216	; 0x4c0
   22a00:	add	r1, pc, r1
   22a04:	add	r3, r3, #12
   22a08:	add	r0, pc, r0
   22a0c:	bl	129e0 <__assert_fail@plt>
   22a10:	ldr	r3, [pc, #96]	; 22a78 <flatcc_builder_table_add_union@@Base+0x150>
   22a14:	movw	r2, #1526	; 0x5f6
   22a18:	ldr	r1, [pc, #92]	; 22a7c <flatcc_builder_table_add_union@@Base+0x154>
   22a1c:	ldr	r0, [pc, #92]	; 22a80 <flatcc_builder_table_add_union@@Base+0x158>
   22a20:	add	r3, pc, r3
   22a24:	add	r3, r3, #1216	; 0x4c0
   22a28:	add	r1, pc, r1
   22a2c:	add	r3, r3, #12
   22a30:	add	r0, pc, r0
   22a34:	bl	129e0 <__assert_fail@plt>
   22a38:	ldr	r3, [pc, #68]	; 22a84 <flatcc_builder_table_add_union@@Base+0x15c>
   22a3c:	movw	r2, #1522	; 0x5f2
   22a40:	ldr	r1, [pc, #64]	; 22a88 <flatcc_builder_table_add_union@@Base+0x160>
   22a44:	ldr	r0, [pc, #64]	; 22a8c <flatcc_builder_table_add_union@@Base+0x164>
   22a48:	add	r3, pc, r3
   22a4c:	add	r3, r3, #1216	; 0x4c0
   22a50:	add	r1, pc, r1
   22a54:	add	r3, r3, #12
   22a58:	add	r0, pc, r0
   22a5c:	bl	129e0 <__assert_fail@plt>
   22a60:	andeq	r5, r0, r4, ror #17
   22a64:	andeq	r6, r0, ip, lsr #32
   22a68:	ldrdeq	r6, [r0], -ip
   22a6c:			; <UNDEFINED> instruction: 0x000058bc
   22a70:	andeq	r6, r0, r4
   22a74:	ldrdeq	r6, [r0], -r8
   22a78:	muleq	r0, r4, r8
   22a7c:	ldrdeq	r5, [r0], -ip
   22a80:			; <UNDEFINED> instruction: 0x000063bc
   22a84:	andeq	r5, r0, ip, ror #16
   22a88:			; <UNDEFINED> instruction: 0x00005fb4
   22a8c:	andeq	r6, r0, r8, lsl #7

00022a90 <flatcc_builder_table_add_union_vector@@Base>:
   22a90:	strd	r4, [sp, #-20]!	; 0xffffffec
   22a94:	strd	r6, [sp, #8]
   22a98:	mov	r7, r1
   22a9c:	str	lr, [sp, #16]
   22aa0:	sub	sp, sp, #12
   22aa4:	add	r1, sp, #8
   22aa8:	stmdb	r1, {r2, r3}
   22aac:	ldr	r3, [r0, #32]
   22ab0:	ldm	sp, {r4, r6}
   22ab4:	ldrh	r3, [r3, #14]
   22ab8:	cmp	r3, #3
   22abc:	bne	22b68 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   22ac0:	clz	r3, r6
   22ac4:	clz	r2, r4
   22ac8:	lsr	r3, r3, #5
   22acc:	lsr	r2, r2, #5
   22ad0:	cmp	r2, r3
   22ad4:	beq	22b04 <flatcc_builder_table_add_union_vector@@Base+0x74>
   22ad8:	adds	r4, r4, #0
   22adc:	movne	r4, #1
   22ae0:	cmp	r4, r3
   22ae4:	mvnne	r4, #0
   22ae8:	beq	22b90 <flatcc_builder_table_add_union_vector@@Base+0x100>
   22aec:	mov	r0, r4
   22af0:	add	sp, sp, #12
   22af4:	ldrd	r4, [sp]
   22af8:	ldrd	r6, [sp, #8]
   22afc:	add	sp, sp, #16
   22b00:	pop	{pc}		; (ldr pc, [sp], #4)
   22b04:	cmp	r4, #0
   22b08:	beq	22aec <flatcc_builder_table_add_union_vector@@Base+0x5c>
   22b0c:	sub	r1, r7, #1
   22b10:	mov	r5, r0
   22b14:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   22b18:	subs	r3, r0, #0
   22b1c:	beq	22bb8 <flatcc_builder_table_add_union_vector@@Base+0x128>
   22b20:	mov	r1, r7
   22b24:	mov	r0, r5
   22b28:	str	r4, [r3]
   22b2c:	bl	22798 <flatcc_builder_table_add_offset@@Base>
   22b30:	cmp	r0, #0
   22b34:	movne	r4, #0
   22b38:	strne	r6, [r0]
   22b3c:	bne	22aec <flatcc_builder_table_add_union_vector@@Base+0x5c>
   22b40:	ldr	r3, [pc, #152]	; 22be0 <flatcc_builder_table_add_union_vector@@Base+0x150>
   22b44:	movw	r2, #1544	; 0x608
   22b48:	ldr	r1, [pc, #148]	; 22be4 <flatcc_builder_table_add_union_vector@@Base+0x154>
   22b4c:	ldr	r0, [pc, #148]	; 22be8 <flatcc_builder_table_add_union_vector@@Base+0x158>
   22b50:	add	r3, pc, r3
   22b54:	add	r3, r3, #1248	; 0x4e0
   22b58:	add	r1, pc, r1
   22b5c:	add	r3, r3, #12
   22b60:	add	r0, pc, r0
   22b64:	bl	129e0 <__assert_fail@plt>
   22b68:	ldr	r3, [pc, #124]	; 22bec <flatcc_builder_table_add_union_vector@@Base+0x15c>
   22b6c:	mov	r2, #1536	; 0x600
   22b70:	ldr	r1, [pc, #120]	; 22bf0 <flatcc_builder_table_add_union_vector@@Base+0x160>
   22b74:	ldr	r0, [pc, #120]	; 22bf4 <flatcc_builder_table_add_union_vector@@Base+0x164>
   22b78:	add	r3, pc, r3
   22b7c:	add	r3, r3, #1248	; 0x4e0
   22b80:	add	r1, pc, r1
   22b84:	add	r3, r3, #12
   22b88:	add	r0, pc, r0
   22b8c:	bl	129e0 <__assert_fail@plt>
   22b90:	ldr	r3, [pc, #96]	; 22bf8 <flatcc_builder_table_add_union_vector@@Base+0x168>
   22b94:	movw	r2, #1537	; 0x601
   22b98:	ldr	r1, [pc, #92]	; 22bfc <flatcc_builder_table_add_union_vector@@Base+0x16c>
   22b9c:	ldr	r0, [pc, #92]	; 22c00 <flatcc_builder_table_add_union_vector@@Base+0x170>
   22ba0:	add	r3, pc, r3
   22ba4:	add	r3, r3, #1248	; 0x4e0
   22ba8:	add	r1, pc, r1
   22bac:	add	r3, r3, #12
   22bb0:	add	r0, pc, r0
   22bb4:	bl	129e0 <__assert_fail@plt>
   22bb8:	ldr	r3, [pc, #68]	; 22c04 <flatcc_builder_table_add_union_vector@@Base+0x174>
   22bbc:	movw	r2, #1540	; 0x604
   22bc0:	ldr	r1, [pc, #64]	; 22c08 <flatcc_builder_table_add_union_vector@@Base+0x178>
   22bc4:	ldr	r0, [pc, #64]	; 22c0c <flatcc_builder_table_add_union_vector@@Base+0x17c>
   22bc8:	add	r3, pc, r3
   22bcc:	add	r3, r3, #1248	; 0x4e0
   22bd0:	add	r1, pc, r1
   22bd4:	add	r3, r3, #12
   22bd8:	add	r0, pc, r0
   22bdc:	bl	129e0 <__assert_fail@plt>
   22be0:	andeq	r5, r0, r4, ror #14
   22be4:	andeq	r5, r0, ip, lsr #29
   22be8:	andeq	r6, r0, r0, lsl #5
   22bec:	andeq	r5, r0, ip, lsr r7
   22bf0:	andeq	r5, r0, r4, lsl #29
   22bf4:	andeq	r6, r0, r8, asr r1
   22bf8:	andeq	r5, r0, r4, lsl r7
   22bfc:	andeq	r5, r0, ip, asr lr
   22c00:	andeq	r6, r0, r8, asr #4
   22c04:	andeq	r5, r0, ip, ror #13
   22c08:	andeq	r5, r0, r4, lsr lr
   22c0c:	andeq	r6, r0, r8, lsl #4

00022c10 <flatcc_builder_push_buffer_alignment@@Base>:
   22c10:	mov	r3, r0
   22c14:	mov	r2, #4
   22c18:	ldrh	r0, [r0, #128]	; 0x80
   22c1c:	strh	r2, [r3, #128]	; 0x80
   22c20:	bx	lr

00022c24 <flatcc_builder_pop_buffer_alignment@@Base>:
   22c24:	ldrh	r3, [r0, #128]	; 0x80
   22c28:	cmp	r3, r1
   22c2c:	strhcc	r1, [r0, #128]	; 0x80
   22c30:	bx	lr

00022c34 <flatcc_builder_get_buffer_alignment@@Base>:
   22c34:	ldrh	r0, [r0, #128]	; 0x80
   22c38:	bx	lr

00022c3c <flatcc_builder_set_vtable_clustering@@Base>:
   22c3c:	clz	r1, r1
   22c40:	lsr	r1, r1, #5
   22c44:	str	r1, [r0, #180]	; 0xb4
   22c48:	bx	lr

00022c4c <flatcc_builder_set_block_align@@Base>:
   22c4c:	strh	r1, [r0, #132]	; 0x84
   22c50:	bx	lr

00022c54 <flatcc_builder_get_level@@Base>:
   22c54:	ldr	r0, [r0, #156]	; 0x9c
   22c58:	bx	lr

00022c5c <flatcc_builder_set_max_level@@Base>:
   22c5c:	ldr	r3, [r0, #160]	; 0xa0
   22c60:	str	r1, [r0, #176]	; 0xb0
   22c64:	cmp	r3, r1
   22c68:	strlt	r1, [r0, #160]	; 0xa0
   22c6c:	bx	lr

00022c70 <flatcc_builder_get_buffer_size@@Base>:
   22c70:	ldr	r3, [r0, #136]	; 0x88
   22c74:	ldr	r0, [r0, #140]	; 0x8c
   22c78:	sub	r0, r0, r3
   22c7c:	bx	lr

00022c80 <flatcc_builder_get_buffer_start@@Base>:
   22c80:	ldr	r0, [r0, #136]	; 0x88
   22c84:	bx	lr

00022c88 <flatcc_builder_get_buffer_end@@Base>:
   22c88:	ldr	r0, [r0, #140]	; 0x8c
   22c8c:	bx	lr

00022c90 <flatcc_builder_set_vtable_cache_limit@@Base>:
   22c90:	str	r1, [r0, #172]	; 0xac
   22c94:	bx	lr

00022c98 <flatcc_builder_set_identifier@@Base>:
   22c98:	ldr	r3, [pc, #40]	; 22cc8 <flatcc_builder_set_identifier@@Base+0x30>
   22c9c:	cmp	r1, #0
   22ca0:	add	r3, pc, r3
   22ca4:	beq	22cb4 <flatcc_builder_set_identifier@@Base+0x1c>
   22ca8:	ldr	r3, [r1]
   22cac:	str	r3, [r0, #168]	; 0xa8
   22cb0:	bx	lr
   22cb4:	ldr	r2, [pc, #16]	; 22ccc <flatcc_builder_set_identifier@@Base+0x34>
   22cb8:	ldr	r1, [r3, r2]
   22cbc:	ldr	r3, [r1]
   22cc0:	str	r3, [r0, #168]	; 0xa8
   22cc4:	bx	lr
   22cc8:	andeq	r7, r1, r8, asr r3
   22ccc:	andeq	r0, r0, r4, rrx

00022cd0 <flatcc_builder_get_type@@Base>:
   22cd0:	ldr	r0, [r0, #32]
   22cd4:	cmp	r0, #0
   22cd8:	ldrhne	r0, [r0, #14]
   22cdc:	bx	lr

00022ce0 <flatcc_builder_get_type_at@@Base>:
   22ce0:	cmp	r1, #0
   22ce4:	ble	22d0c <flatcc_builder_get_type_at@@Base+0x2c>
   22ce8:	ldr	r3, [r0, #156]	; 0x9c
   22cec:	cmp	r3, r1
   22cf0:	blt	22d0c <flatcc_builder_get_type_at@@Base+0x2c>
   22cf4:	ldr	r2, [r0, #32]
   22cf8:	sub	r1, r1, r3
   22cfc:	add	r1, r1, r1, lsl #3
   22d00:	add	r1, r2, r1, lsl #2
   22d04:	ldrh	r0, [r1, #14]
   22d08:	bx	lr
   22d0c:	mov	r0, #0
   22d10:	bx	lr

00022d14 <flatcc_builder_get_direct_buffer@@Base>:
   22d14:	ldr	r3, [r0, #184]	; 0xb8
   22d18:	cmp	r3, #0
   22d1c:	bne	22d38 <flatcc_builder_get_direct_buffer@@Base+0x24>
   22d20:	cmp	r1, #0
   22d24:	movne	r3, #0
   22d28:	movne	r0, r3
   22d2c:	moveq	r0, r1
   22d30:	strne	r3, [r1]
   22d34:	bx	lr
   22d38:	ldrd	r2, [r0, #188]	; 0xbc
   22d3c:	cmp	r2, r3
   22d40:	bne	22d20 <flatcc_builder_get_direct_buffer@@Base+0xc>
   22d44:	cmp	r1, #0
   22d48:	ldrne	r3, [r0, #212]	; 0xd4
   22d4c:	ldr	r0, [r0, #196]	; 0xc4
   22d50:	strne	r3, [r1]
   22d54:	bx	lr

00022d58 <flatcc_builder_copy_buffer@@Base>:
   22d58:	ldr	r3, [r0, #184]	; 0xb8
   22d5c:	cmp	r3, #0
   22d60:	beq	22d88 <flatcc_builder_copy_buffer@@Base+0x30>
   22d64:	add	r0, r0, #188	; 0xbc
   22d68:	str	r4, [sp, #-8]!
   22d6c:	str	lr, [sp, #4]
   22d70:	bl	234ec <flatcc_emitter_copy_buffer@@Base>
   22d74:	cmp	r0, #0
   22d78:	beq	22d90 <flatcc_builder_copy_buffer@@Base+0x38>
   22d7c:	ldr	r4, [sp]
   22d80:	add	sp, sp, #4
   22d84:	pop	{pc}		; (ldr pc, [sp], #4)
   22d88:	mov	r0, r3
   22d8c:	bx	lr
   22d90:	ldr	r3, [pc, #32]	; 22db8 <flatcc_builder_copy_buffer@@Base+0x60>
   22d94:	movw	r2, #1926	; 0x786
   22d98:	ldr	r1, [pc, #28]	; 22dbc <flatcc_builder_copy_buffer@@Base+0x64>
   22d9c:	ldr	r0, [pc, #28]	; 22dc0 <flatcc_builder_copy_buffer@@Base+0x68>
   22da0:	add	r3, pc, r3
   22da4:	add	r3, r3, #1296	; 0x510
   22da8:	add	r1, pc, r1
   22dac:	add	r3, r3, #4
   22db0:	add	r0, pc, r0
   22db4:	bl	129e0 <__assert_fail@plt>
   22db8:	andeq	r5, r0, r4, lsl r5
   22dbc:	andeq	r5, r0, ip, asr ip
   22dc0:	andeq	r2, r0, r0, asr lr

00022dc4 <flatcc_builder_finalize_buffer@@Base>:
   22dc4:	strd	r4, [sp, #-16]!
   22dc8:	mov	r5, r1
   22dcc:	str	r6, [sp, #8]
   22dd0:	mov	r6, r0
   22dd4:	str	lr, [sp, #12]
   22dd8:	bl	22c70 <flatcc_builder_get_buffer_size@@Base>
   22ddc:	cmp	r5, #0
   22de0:	mov	r4, r0
   22de4:	strne	r0, [r5]
   22de8:	bl	12950 <malloc@plt>
   22dec:	subs	r5, r0, #0
   22df0:	beq	22e20 <flatcc_builder_finalize_buffer@@Base+0x5c>
   22df4:	mov	r2, r4
   22df8:	mov	r0, r6
   22dfc:	mov	r1, r5
   22e00:	bl	22d58 <flatcc_builder_copy_buffer@@Base>
   22e04:	cmp	r0, #0
   22e08:	beq	22e44 <flatcc_builder_finalize_buffer@@Base+0x80>
   22e0c:	mov	r0, r5
   22e10:	ldrd	r4, [sp]
   22e14:	ldr	r6, [sp, #8]
   22e18:	add	sp, sp, #12
   22e1c:	pop	{pc}		; (ldr pc, [sp], #4)
   22e20:	ldr	r3, [pc, #64]	; 22e68 <flatcc_builder_finalize_buffer@@Base+0xa4>
   22e24:	movw	r2, #1944	; 0x798
   22e28:	ldr	r1, [pc, #60]	; 22e6c <flatcc_builder_finalize_buffer@@Base+0xa8>
   22e2c:	ldr	r0, [pc, #60]	; 22e70 <flatcc_builder_finalize_buffer@@Base+0xac>
   22e30:	add	r3, pc, r3
   22e34:	add	r3, r3, #1328	; 0x530
   22e38:	add	r1, pc, r1
   22e3c:	add	r0, pc, r0
   22e40:	bl	129e0 <__assert_fail@plt>
   22e44:	ldr	r3, [pc, #40]	; 22e74 <flatcc_builder_finalize_buffer@@Base+0xb0>
   22e48:	movw	r2, #1948	; 0x79c
   22e4c:	ldr	r1, [pc, #36]	; 22e78 <flatcc_builder_finalize_buffer@@Base+0xb4>
   22e50:	ldr	r0, [pc, #36]	; 22e7c <flatcc_builder_finalize_buffer@@Base+0xb8>
   22e54:	add	r3, pc, r3
   22e58:	add	r3, r3, #1328	; 0x530
   22e5c:	add	r1, pc, r1
   22e60:	add	r0, pc, r0
   22e64:	bl	129e0 <__assert_fail@plt>
   22e68:	andeq	r5, r0, r4, lsl #9
   22e6c:	andeq	r5, r0, ip, asr #23
   22e70:	andeq	r5, r0, r0, asr ip
   22e74:	andeq	r5, r0, r0, ror #8
   22e78:	andeq	r5, r0, r8, lsr #23
   22e7c:	andeq	r5, r0, ip, lsr #24

00022e80 <flatcc_builder_finalize_aligned_buffer@@Base>:
   22e80:	strd	r4, [sp, #-20]!	; 0xffffffec
   22e84:	mov	r5, r1
   22e88:	strd	r6, [sp, #8]
   22e8c:	mov	r6, r0
   22e90:	str	lr, [sp, #16]
   22e94:	sub	sp, sp, #12
   22e98:	bl	22c70 <flatcc_builder_get_buffer_size@@Base>
   22e9c:	cmp	r5, #0
   22ea0:	mov	r4, r0
   22ea4:	sub	r4, r4, #1
   22ea8:	strne	r0, [r5]
   22eac:	mov	r0, r6
   22eb0:	bl	22c34 <flatcc_builder_get_buffer_alignment@@Base>
   22eb4:	rsb	r3, r0, #0
   22eb8:	add	r4, r4, r0
   22ebc:	cmp	r0, #4
   22ec0:	and	r4, r4, r3
   22ec4:	mov	r3, #0
   22ec8:	movcs	r1, r0
   22ecc:	movcc	r1, #4
   22ed0:	mov	r2, r4
   22ed4:	add	r0, sp, #4
   22ed8:	str	r3, [sp, #4]
   22edc:	bl	1298c <posix_memalign@plt>
   22ee0:	cmp	r0, #0
   22ee4:	beq	22f10 <flatcc_builder_finalize_aligned_buffer@@Base+0x90>
   22ee8:	ldr	r0, [sp, #4]
   22eec:	cmp	r0, #0
   22ef0:	beq	22ef8 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   22ef4:	bl	128fc <free@plt>
   22ef8:	cmp	r5, #0
   22efc:	movne	r3, #0
   22f00:	moveq	r7, r5
   22f04:	movne	r7, r3
   22f08:	strne	r3, [r5]
   22f0c:	b	22f34 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
   22f10:	ldr	r7, [sp, #4]
   22f14:	cmp	r7, #0
   22f18:	beq	22ef8 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   22f1c:	mov	r2, r4
   22f20:	mov	r0, r6
   22f24:	mov	r1, r7
   22f28:	bl	22d58 <flatcc_builder_copy_buffer@@Base>
   22f2c:	cmp	r0, #0
   22f30:	beq	22f4c <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   22f34:	mov	r0, r7
   22f38:	add	sp, sp, #12
   22f3c:	ldrd	r4, [sp]
   22f40:	ldrd	r6, [sp, #8]
   22f44:	add	sp, sp, #16
   22f48:	pop	{pc}		; (ldr pc, [sp], #4)
   22f4c:	mov	r0, r7
   22f50:	b	22ef4 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>

00022f54 <flatcc_builder_aligned_alloc@@Base>:
   22f54:	cmp	r0, #4
   22f58:	str	r4, [sp, #-8]!
   22f5c:	mov	r4, #0
   22f60:	str	lr, [sp, #4]
   22f64:	sub	sp, sp, #8
   22f68:	mov	r2, r1
   22f6c:	movcs	r1, r0
   22f70:	movcc	r1, #4
   22f74:	add	r0, sp, #4
   22f78:	str	r4, [sp, #4]
   22f7c:	bl	1298c <posix_memalign@plt>
   22f80:	cmp	r0, r4
   22f84:	ldr	r0, [sp, #4]
   22f88:	beq	22f9c <flatcc_builder_aligned_alloc@@Base+0x48>
   22f8c:	cmp	r0, #0
   22f90:	beq	22f9c <flatcc_builder_aligned_alloc@@Base+0x48>
   22f94:	bl	128fc <free@plt>
   22f98:	mov	r0, r4
   22f9c:	add	sp, sp, #8
   22fa0:	ldr	r4, [sp]
   22fa4:	add	sp, sp, #4
   22fa8:	pop	{pc}		; (ldr pc, [sp], #4)

00022fac <flatcc_builder_aligned_free@@Base>:
   22fac:	b	128fc <free@plt>

00022fb0 <flatcc_builder_get_emit_context@@Base>:
   22fb0:	ldr	r0, [r0, #36]	; 0x24
   22fb4:	bx	lr

00022fb8 <flatcc_emitter_recycle_page@@Base>:
   22fb8:	ldr	r3, [r0]
   22fbc:	cmp	r3, r1
   22fc0:	beq	23004 <flatcc_emitter_recycle_page@@Base+0x4c>
   22fc4:	ldr	r2, [r0, #4]
   22fc8:	cmp	r2, r1
   22fcc:	beq	23004 <flatcc_emitter_recycle_page@@Base+0x4c>
   22fd0:	push	{lr}		; (str lr, [sp, #-4]!)
   22fd4:	mov	r0, #0
   22fd8:	ldr	lr, [r1, #2944]	; 0xb80
   22fdc:	ldr	ip, [r1, #2948]	; 0xb84
   22fe0:	str	ip, [lr, #2948]	; 0xb84
   22fe4:	ldr	r2, [r3, #2948]	; 0xb84
   22fe8:	str	lr, [ip, #2944]	; 0xb80
   22fec:	str	r3, [r1, #2944]	; 0xb80
   22ff0:	str	r2, [r1, #2948]	; 0xb84
   22ff4:	str	r1, [r2, #2944]	; 0xb80
   22ff8:	ldr	r3, [r1, #2944]	; 0xb80
   22ffc:	str	r1, [r3, #2948]	; 0xb84
   23000:	pop	{pc}		; (ldr pc, [sp], #4)
   23004:	mvn	r0, #0
   23008:	bx	lr

0002300c <flatcc_emitter_reset@@Base>:
   2300c:	ldr	r2, [r0]
   23010:	cmp	r2, #0
   23014:	bxeq	lr
   23018:	strd	r4, [sp, #-16]!
   2301c:	movw	ip, #64064	; 0xfa40
   23020:	movt	ip, #65535	; 0xffff
   23024:	ldr	r1, [r0, #24]
   23028:	add	r4, r2, #1472	; 0x5c0
   2302c:	ldr	r3, [r0, #32]
   23030:	ldr	r5, [r0, #28]
   23034:	str	r6, [sp, #8]
   23038:	str	lr, [sp, #12]
   2303c:	mov	lr, #1472	; 0x5c0
   23040:	cmp	r3, #0
   23044:	stmib	r0, {r2, r4}
   23048:	moveq	r3, r1
   2304c:	lsr	r1, r1, #2
   23050:	str	lr, [r0, #12]
   23054:	add	r3, r3, r3, lsl #1
   23058:	str	r4, [r0, #16]
   2305c:	str	lr, [r0, #20]
   23060:	add	r3, r1, r3, lsr #2
   23064:	str	ip, [r2, #2952]	; 0xb88
   23068:	mov	ip, #0
   2306c:	cmp	r5, r3, lsl #1
   23070:	str	ip, [r0, #24]
   23074:	str	r3, [r0, #32]
   23078:	bls	230d0 <flatcc_emitter_reset@@Base+0xc4>
   2307c:	ldr	r3, [r2, #2944]	; 0xb80
   23080:	mov	r4, r0
   23084:	cmp	r2, r3
   23088:	bne	230a0 <flatcc_emitter_reset@@Base+0x94>
   2308c:	b	230d0 <flatcc_emitter_reset@@Base+0xc4>
   23090:	ldm	r4, {r1, r2}
   23094:	ldr	r3, [r2, #2944]	; 0xb80
   23098:	cmp	r3, r1
   2309c:	beq	230d0 <flatcc_emitter_reset@@Base+0xc4>
   230a0:	ldr	r1, [r3, #2944]	; 0xb80
   230a4:	mov	r0, r3
   230a8:	str	r1, [r2, #2944]	; 0xb80
   230ac:	ldr	r3, [r3, #2944]	; 0xb80
   230b0:	str	r2, [r3, #2948]	; 0xb84
   230b4:	bl	128fc <free@plt>
   230b8:	ldr	r3, [r4, #28]
   230bc:	ldr	r2, [r4, #32]
   230c0:	sub	r3, r3, #2944	; 0xb80
   230c4:	cmp	r3, r2, lsl #1
   230c8:	str	r3, [r4, #28]
   230cc:	bhi	23090 <flatcc_emitter_reset@@Base+0x84>
   230d0:	ldrd	r4, [sp]
   230d4:	ldr	r6, [sp, #8]
   230d8:	add	sp, sp, #12
   230dc:	pop	{pc}		; (ldr pc, [sp], #4)

000230e0 <flatcc_emitter_clear@@Base>:
   230e0:	ldr	r3, [r0]
   230e4:	cmp	r3, #0
   230e8:	bxeq	lr
   230ec:	mov	r1, #0
   230f0:	strd	r4, [sp, #-16]!
   230f4:	mov	r5, r0
   230f8:	ldr	r2, [r3, #2948]	; 0xb84
   230fc:	str	r6, [sp, #8]
   23100:	str	lr, [sp, #12]
   23104:	str	r1, [r2, #2944]	; 0xb80
   23108:	ldr	r4, [r3, #2944]	; 0xb80
   2310c:	cmp	r4, r1
   23110:	bne	2311c <flatcc_emitter_clear@@Base+0x3c>
   23114:	b	23158 <flatcc_emitter_clear@@Base+0x78>
   23118:	mov	r4, r3
   2311c:	ldr	r0, [r4, #2948]	; 0xb84
   23120:	bl	128fc <free@plt>
   23124:	ldr	r3, [r4, #2944]	; 0xb80
   23128:	cmp	r3, #0
   2312c:	bne	23118 <flatcc_emitter_clear@@Base+0x38>
   23130:	mov	r0, r4
   23134:	bl	128fc <free@plt>
   23138:	mov	r0, r5
   2313c:	mov	r2, #36	; 0x24
   23140:	ldrd	r4, [sp]
   23144:	mov	r1, #0
   23148:	ldr	r6, [sp, #8]
   2314c:	ldr	lr, [sp, #12]
   23150:	add	sp, sp, #16
   23154:	b	12998 <memset@plt>
   23158:	mov	r4, r3
   2315c:	b	23130 <flatcc_emitter_clear@@Base+0x50>

00023160 <flatcc_emitter@@Base>:
   23160:	cmp	r3, #0
   23164:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23168:	mov	r4, r0
   2316c:	ldr	r3, [r0, #24]
   23170:	strd	r6, [sp, #8]
   23174:	strd	r8, [sp, #16]
   23178:	sub	r8, r2, #1
   2317c:	strd	sl, [sp, #24]
   23180:	str	lr, [sp, #32]
   23184:	sub	sp, sp, #12
   23188:	ldr	r0, [sp, #48]	; 0x30
   2318c:	add	r3, r3, r0
   23190:	str	r3, [r4, #24]
   23194:	blt	23364 <flatcc_emitter@@Base+0x204>
   23198:	ldr	r3, [r4, #20]
   2319c:	cmp	r3, r0
   231a0:	bcs	23240 <flatcc_emitter@@Base+0xe0>
   231a4:	cmp	r2, #0
   231a8:	beq	23220 <flatcc_emitter@@Base+0xc0>
   231ac:	mov	r8, r2
   231b0:	add	r5, r1, #8
   231b4:	movw	r2, #64064	; 0xfa40
   231b8:	movt	r2, #65535	; 0xffff
   231bc:	str	r2, [sp, #4]
   231c0:	ldmdb	r5, {r7, fp}
   231c4:	cmp	fp, #0
   231c8:	beq	23214 <flatcc_emitter@@Base+0xb4>
   231cc:	mov	r9, #1472	; 0x5c0
   231d0:	cmp	fp, r3
   231d4:	mov	r6, r3
   231d8:	bls	232d0 <flatcc_emitter@@Base+0x170>
   231dc:	cmp	r3, #0
   231e0:	subne	fp, fp, r3
   231e4:	beq	23288 <flatcc_emitter@@Base+0x128>
   231e8:	mov	r2, r6
   231ec:	mov	r1, r7
   231f0:	ldr	r0, [r4, #16]
   231f4:	bl	12908 <memcpy@plt>
   231f8:	ldrd	r2, [r4, #16]
   231fc:	cmp	fp, #0
   23200:	add	r7, r7, r6
   23204:	add	r2, r2, r6
   23208:	sub	r3, r3, r6
   2320c:	strd	r2, [r4, #16]
   23210:	bne	231d0 <flatcc_emitter@@Base+0x70>
   23214:	subs	r8, r8, #1
   23218:	add	r5, r5, #8
   2321c:	bne	231c0 <flatcc_emitter@@Base+0x60>
   23220:	mov	r0, #0
   23224:	add	sp, sp, #12
   23228:	ldrd	r4, [sp]
   2322c:	ldrd	r6, [sp, #8]
   23230:	ldrd	r8, [sp, #16]
   23234:	ldrd	sl, [sp, #24]
   23238:	add	sp, sp, #32
   2323c:	pop	{pc}		; (ldr pc, [sp], #4)
   23240:	ldr	r7, [r4, #16]
   23244:	sub	r3, r3, r0
   23248:	str	r3, [r4, #20]
   2324c:	add	r0, r7, r0
   23250:	str	r0, [r4, #16]
   23254:	cmp	r2, #0
   23258:	addne	r4, r1, #8
   2325c:	beq	23220 <flatcc_emitter@@Base+0xc0>
   23260:	mov	r0, r7
   23264:	ldmdb	r4, {r1, r2}
   23268:	sub	r8, r8, #1
   2326c:	bl	12908 <memcpy@plt>
   23270:	ldr	r3, [r4, #-4]
   23274:	cmn	r8, #1
   23278:	add	r4, r4, #8
   2327c:	add	r7, r7, r3
   23280:	bne	23260 <flatcc_emitter@@Base+0x100>
   23284:	b	23220 <flatcc_emitter@@Base+0xc0>
   23288:	ldr	r6, [r4, #4]
   2328c:	cmp	r6, #0
   23290:	beq	23310 <flatcc_emitter@@Base+0x1b0>
   23294:	ldr	sl, [r4]
   23298:	ldr	r0, [r6, #2944]	; 0xb80
   2329c:	cmp	r0, sl
   232a0:	beq	232dc <flatcc_emitter@@Base+0x17c>
   232a4:	str	r0, [r4, #4]
   232a8:	ldr	r2, [r0, #2948]	; 0xb84
   232ac:	mov	r3, #2944	; 0xb80
   232b0:	cmp	fp, r3
   232b4:	mov	r6, r3
   232b8:	ldr	r2, [r2, #2952]	; 0xb88
   232bc:	str	r0, [r4, #16]
   232c0:	str	r3, [r4, #20]
   232c4:	add	r2, r2, r3
   232c8:	str	r2, [r0, #2952]	; 0xb88
   232cc:	bhi	231dc <flatcc_emitter@@Base+0x7c>
   232d0:	mov	r6, fp
   232d4:	mov	fp, #0
   232d8:	b	231e8 <flatcc_emitter@@Base+0x88>
   232dc:	movw	r0, #2956	; 0xb8c
   232e0:	bl	12950 <malloc@plt>
   232e4:	cmp	r0, #0
   232e8:	beq	2335c <flatcc_emitter@@Base+0x1fc>
   232ec:	ldr	r2, [r4, #28]
   232f0:	str	sl, [r0, #2944]	; 0xb80
   232f4:	str	r6, [r0, #2948]	; 0xb84
   232f8:	add	r2, r2, #2944	; 0xb80
   232fc:	str	r2, [r4, #28]
   23300:	str	r0, [sl, #2948]	; 0xb84
   23304:	str	r0, [r6, #2944]	; 0xb80
   23308:	str	r0, [r4, #4]
   2330c:	b	232a8 <flatcc_emitter@@Base+0x148>
   23310:	movw	r0, #2956	; 0xb8c
   23314:	bl	12950 <malloc@plt>
   23318:	cmp	r0, #0
   2331c:	beq	2335c <flatcc_emitter@@Base+0x1fc>
   23320:	ldr	r2, [r4, #28]
   23324:	add	r1, r0, #1472	; 0x5c0
   23328:	mov	r3, #1472	; 0x5c0
   2332c:	str	r0, [r4]
   23330:	strd	r0, [r4, #4]
   23334:	str	r9, [r4, #12]
   23338:	str	r1, [r4, #16]
   2333c:	add	r2, r2, #2944	; 0xb80
   23340:	str	r9, [r4, #20]
   23344:	str	r0, [r0, #2944]	; 0xb80
   23348:	str	r2, [r4, #28]
   2334c:	ldr	r2, [sp, #4]
   23350:	str	r0, [r0, #2948]	; 0xb84
   23354:	str	r2, [r0, #2952]	; 0xb88
   23358:	b	231d0 <flatcc_emitter@@Base+0x70>
   2335c:	mvn	r0, #0
   23360:	b	23224 <flatcc_emitter@@Base+0xc4>
   23364:	ldr	r3, [r4, #12]
   23368:	cmp	r3, r0
   2336c:	bcs	234d4 <flatcc_emitter@@Base+0x374>
   23370:	add	r5, r1, r2, lsl #3
   23374:	movw	r3, #64064	; 0xfa40
   23378:	movt	r3, #65535	; 0xffff
   2337c:	str	r3, [sp, #4]
   23380:	cmn	r8, #1
   23384:	beq	23220 <flatcc_emitter@@Base+0xc0>
   23388:	ldr	r7, [r5, #-8]
   2338c:	ldr	r6, [r5, #-4]
   23390:	cmp	r6, #0
   23394:	add	r7, r7, r6
   23398:	beq	233e8 <flatcc_emitter@@Base+0x288>
   2339c:	mov	r9, #1472	; 0x5c0
   233a0:	ldr	r2, [r4, #12]
   233a4:	cmp	r2, r6
   233a8:	bcs	2344c <flatcc_emitter@@Base+0x2ec>
   233ac:	cmp	r2, #0
   233b0:	beq	233f4 <flatcc_emitter@@Base+0x294>
   233b4:	sub	r6, r6, r2
   233b8:	mov	r1, #0
   233bc:	ldr	r3, [r4, #8]
   233c0:	rsb	r0, r2, #0
   233c4:	add	r7, r7, r0
   233c8:	str	r1, [r4, #12]
   233cc:	mov	r1, r7
   233d0:	add	r3, r3, r0
   233d4:	mov	r0, r3
   233d8:	str	r3, [r4, #8]
   233dc:	bl	12908 <memcpy@plt>
   233e0:	cmp	r6, #0
   233e4:	bne	233a0 <flatcc_emitter@@Base+0x240>
   233e8:	sub	r5, r5, #8
   233ec:	sub	r8, r8, #1
   233f0:	b	23380 <flatcc_emitter@@Base+0x220>
   233f4:	ldr	fp, [r4]
   233f8:	cmp	fp, #0
   233fc:	beq	23490 <flatcc_emitter@@Base+0x330>
   23400:	ldr	sl, [r4, #4]
   23404:	ldr	r0, [fp, #2948]	; 0xb84
   23408:	cmp	r0, sl
   2340c:	beq	2345c <flatcc_emitter@@Base+0x2fc>
   23410:	ldr	r3, [fp, #2952]	; 0xb88
   23414:	sub	r3, r3, #2944	; 0xb80
   23418:	str	r3, [r0, #2952]	; 0xb88
   2341c:	str	r0, [r4]
   23420:	ldr	r3, [r0, #2944]	; 0xb80
   23424:	mov	r2, #2944	; 0xb80
   23428:	add	r1, r0, #2944	; 0xb80
   2342c:	ldr	r3, [r3, #2952]	; 0xb88
   23430:	str	r1, [r4, #8]
   23434:	str	r2, [r4, #12]
   23438:	sub	r3, r3, #2944	; 0xb80
   2343c:	str	r3, [r0, #2952]	; 0xb88
   23440:	ldr	r2, [r4, #12]
   23444:	cmp	r2, r6
   23448:	bcc	233ac <flatcc_emitter@@Base+0x24c>
   2344c:	sub	r1, r2, r6
   23450:	mov	r2, r6
   23454:	mov	r6, #0
   23458:	b	233bc <flatcc_emitter@@Base+0x25c>
   2345c:	movw	r0, #2956	; 0xb8c
   23460:	bl	12950 <malloc@plt>
   23464:	cmp	r0, #0
   23468:	beq	2335c <flatcc_emitter@@Base+0x1fc>
   2346c:	ldr	r2, [r4, #28]
   23470:	str	fp, [r0, #2944]	; 0xb80
   23474:	str	sl, [r0, #2948]	; 0xb84
   23478:	add	r2, r2, #2944	; 0xb80
   2347c:	str	r2, [r4, #28]
   23480:	str	r0, [fp, #2948]	; 0xb84
   23484:	str	r0, [sl, #2944]	; 0xb80
   23488:	str	r0, [r4]
   2348c:	b	23420 <flatcc_emitter@@Base+0x2c0>
   23490:	movw	r0, #2956	; 0xb8c
   23494:	bl	12950 <malloc@plt>
   23498:	cmp	r0, #0
   2349c:	beq	2335c <flatcc_emitter@@Base+0x1fc>
   234a0:	ldr	r3, [r4, #28]
   234a4:	add	r2, r0, #1472	; 0x5c0
   234a8:	str	r0, [r4]
   234ac:	stmib	r4, {r0, r2, r9}
   234b0:	add	r3, r3, #2944	; 0xb80
   234b4:	str	r2, [r4, #16]
   234b8:	str	r9, [r4, #20]
   234bc:	str	r3, [r4, #28]
   234c0:	ldr	r3, [sp, #4]
   234c4:	str	r0, [r0, #2944]	; 0xb80
   234c8:	str	r0, [r0, #2948]	; 0xb84
   234cc:	str	r3, [r0, #2952]	; 0xb88
   234d0:	b	233a0 <flatcc_emitter@@Base+0x240>
   234d4:	ldr	r7, [r4, #8]
   234d8:	sub	r3, r3, r0
   234dc:	str	r3, [r4, #12]
   234e0:	sub	r7, r7, r0
   234e4:	str	r7, [r4, #8]
   234e8:	b	23254 <flatcc_emitter@@Base+0xf4>

000234ec <flatcc_emitter_copy_buffer@@Base>:
   234ec:	ldr	r3, [r0, #24]
   234f0:	strd	r4, [sp, #-16]!
   234f4:	str	r6, [sp, #8]
   234f8:	str	lr, [sp, #12]
   234fc:	cmp	r3, r2
   23500:	movhi	r5, #0
   23504:	bhi	23584 <flatcc_emitter_copy_buffer@@Base+0x98>
   23508:	ldr	r5, [r0]
   2350c:	mov	r6, r0
   23510:	cmp	r5, #0
   23514:	beq	23584 <flatcc_emitter_copy_buffer@@Base+0x98>
   23518:	ldr	r2, [r6, #4]
   2351c:	mov	r0, r1
   23520:	ldr	r1, [r6, #8]
   23524:	cmp	r5, r2
   23528:	beq	23598 <flatcc_emitter_copy_buffer@@Base+0xac>
   2352c:	ldr	r2, [r6, #12]
   23530:	rsb	r2, r2, #2944	; 0xb80
   23534:	add	r5, r0, r2
   23538:	bl	12908 <memcpy@plt>
   2353c:	ldrd	r2, [r6]
   23540:	ldr	r4, [r2, #2944]	; 0xb80
   23544:	cmp	r4, r3
   23548:	beq	23570 <flatcc_emitter_copy_buffer@@Base+0x84>
   2354c:	mov	r2, #2944	; 0xb80
   23550:	mov	r1, r4
   23554:	mov	r0, r5
   23558:	add	r5, r5, r2
   2355c:	bl	12908 <memcpy@plt>
   23560:	ldr	r3, [r6, #4]
   23564:	ldr	r4, [r4, #2944]	; 0xb80
   23568:	cmp	r3, r4
   2356c:	bne	2354c <flatcc_emitter_copy_buffer@@Base+0x60>
   23570:	ldr	r2, [r6, #20]
   23574:	mov	r1, r4
   23578:	mov	r0, r5
   2357c:	rsb	r2, r2, #2944	; 0xb80
   23580:	bl	12908 <memcpy@plt>
   23584:	mov	r0, r5
   23588:	ldrd	r4, [sp]
   2358c:	ldr	r6, [sp, #8]
   23590:	add	sp, sp, #12
   23594:	pop	{pc}		; (ldr pc, [sp], #4)
   23598:	mov	r2, r3
   2359c:	mov	r5, r0
   235a0:	bl	12908 <memcpy@plt>
   235a4:	b	23584 <flatcc_emitter_copy_buffer@@Base+0x98>

000235a8 <flatcc_verify_error_string@@Base>:
   235a8:	cmp	r0, #36	; 0x24
   235ac:	addls	pc, pc, r0, lsl #2
   235b0:	b	23804 <flatcc_verify_error_string@@Base+0x25c>
   235b4:	b	23648 <flatcc_verify_error_string@@Base+0xa0>
   235b8:	b	237f8 <flatcc_verify_error_string@@Base+0x250>
   235bc:	b	237ec <flatcc_verify_error_string@@Base+0x244>
   235c0:	b	237e0 <flatcc_verify_error_string@@Base+0x238>
   235c4:	b	237d4 <flatcc_verify_error_string@@Base+0x22c>
   235c8:	b	237c8 <flatcc_verify_error_string@@Base+0x220>
   235cc:	b	237bc <flatcc_verify_error_string@@Base+0x214>
   235d0:	b	237b0 <flatcc_verify_error_string@@Base+0x208>
   235d4:	b	237a4 <flatcc_verify_error_string@@Base+0x1fc>
   235d8:	b	23798 <flatcc_verify_error_string@@Base+0x1f0>
   235dc:	b	2378c <flatcc_verify_error_string@@Base+0x1e4>
   235e0:	b	23780 <flatcc_verify_error_string@@Base+0x1d8>
   235e4:	b	23774 <flatcc_verify_error_string@@Base+0x1cc>
   235e8:	b	23768 <flatcc_verify_error_string@@Base+0x1c0>
   235ec:	b	2375c <flatcc_verify_error_string@@Base+0x1b4>
   235f0:	b	23750 <flatcc_verify_error_string@@Base+0x1a8>
   235f4:	b	23744 <flatcc_verify_error_string@@Base+0x19c>
   235f8:	b	23738 <flatcc_verify_error_string@@Base+0x190>
   235fc:	b	2372c <flatcc_verify_error_string@@Base+0x184>
   23600:	b	23720 <flatcc_verify_error_string@@Base+0x178>
   23604:	b	23714 <flatcc_verify_error_string@@Base+0x16c>
   23608:	b	23708 <flatcc_verify_error_string@@Base+0x160>
   2360c:	b	236fc <flatcc_verify_error_string@@Base+0x154>
   23610:	b	236f0 <flatcc_verify_error_string@@Base+0x148>
   23614:	b	236e4 <flatcc_verify_error_string@@Base+0x13c>
   23618:	b	236d8 <flatcc_verify_error_string@@Base+0x130>
   2361c:	b	236cc <flatcc_verify_error_string@@Base+0x124>
   23620:	b	236c0 <flatcc_verify_error_string@@Base+0x118>
   23624:	b	236b4 <flatcc_verify_error_string@@Base+0x10c>
   23628:	b	236a8 <flatcc_verify_error_string@@Base+0x100>
   2362c:	b	2369c <flatcc_verify_error_string@@Base+0xf4>
   23630:	b	23690 <flatcc_verify_error_string@@Base+0xe8>
   23634:	b	23684 <flatcc_verify_error_string@@Base+0xdc>
   23638:	b	23678 <flatcc_verify_error_string@@Base+0xd0>
   2363c:	b	2366c <flatcc_verify_error_string@@Base+0xc4>
   23640:	b	23660 <flatcc_verify_error_string@@Base+0xb8>
   23644:	b	23654 <flatcc_verify_error_string@@Base+0xac>
   23648:	ldr	r0, [pc, #448]	; 23810 <flatcc_verify_error_string@@Base+0x268>
   2364c:	add	r0, pc, r0
   23650:	bx	lr
   23654:	ldr	r0, [pc, #440]	; 23814 <flatcc_verify_error_string@@Base+0x26c>
   23658:	add	r0, pc, r0
   2365c:	bx	lr
   23660:	ldr	r0, [pc, #432]	; 23818 <flatcc_verify_error_string@@Base+0x270>
   23664:	add	r0, pc, r0
   23668:	bx	lr
   2366c:	ldr	r0, [pc, #424]	; 2381c <flatcc_verify_error_string@@Base+0x274>
   23670:	add	r0, pc, r0
   23674:	bx	lr
   23678:	ldr	r0, [pc, #416]	; 23820 <flatcc_verify_error_string@@Base+0x278>
   2367c:	add	r0, pc, r0
   23680:	bx	lr
   23684:	ldr	r0, [pc, #408]	; 23824 <flatcc_verify_error_string@@Base+0x27c>
   23688:	add	r0, pc, r0
   2368c:	bx	lr
   23690:	ldr	r0, [pc, #400]	; 23828 <flatcc_verify_error_string@@Base+0x280>
   23694:	add	r0, pc, r0
   23698:	bx	lr
   2369c:	ldr	r0, [pc, #392]	; 2382c <flatcc_verify_error_string@@Base+0x284>
   236a0:	add	r0, pc, r0
   236a4:	bx	lr
   236a8:	ldr	r0, [pc, #384]	; 23830 <flatcc_verify_error_string@@Base+0x288>
   236ac:	add	r0, pc, r0
   236b0:	bx	lr
   236b4:	ldr	r0, [pc, #376]	; 23834 <flatcc_verify_error_string@@Base+0x28c>
   236b8:	add	r0, pc, r0
   236bc:	bx	lr
   236c0:	ldr	r0, [pc, #368]	; 23838 <flatcc_verify_error_string@@Base+0x290>
   236c4:	add	r0, pc, r0
   236c8:	bx	lr
   236cc:	ldr	r0, [pc, #360]	; 2383c <flatcc_verify_error_string@@Base+0x294>
   236d0:	add	r0, pc, r0
   236d4:	bx	lr
   236d8:	ldr	r0, [pc, #352]	; 23840 <flatcc_verify_error_string@@Base+0x298>
   236dc:	add	r0, pc, r0
   236e0:	bx	lr
   236e4:	ldr	r0, [pc, #344]	; 23844 <flatcc_verify_error_string@@Base+0x29c>
   236e8:	add	r0, pc, r0
   236ec:	bx	lr
   236f0:	ldr	r0, [pc, #336]	; 23848 <flatcc_verify_error_string@@Base+0x2a0>
   236f4:	add	r0, pc, r0
   236f8:	bx	lr
   236fc:	ldr	r0, [pc, #328]	; 2384c <flatcc_verify_error_string@@Base+0x2a4>
   23700:	add	r0, pc, r0
   23704:	bx	lr
   23708:	ldr	r0, [pc, #320]	; 23850 <flatcc_verify_error_string@@Base+0x2a8>
   2370c:	add	r0, pc, r0
   23710:	bx	lr
   23714:	ldr	r0, [pc, #312]	; 23854 <flatcc_verify_error_string@@Base+0x2ac>
   23718:	add	r0, pc, r0
   2371c:	bx	lr
   23720:	ldr	r0, [pc, #304]	; 23858 <flatcc_verify_error_string@@Base+0x2b0>
   23724:	add	r0, pc, r0
   23728:	bx	lr
   2372c:	ldr	r0, [pc, #296]	; 2385c <flatcc_verify_error_string@@Base+0x2b4>
   23730:	add	r0, pc, r0
   23734:	bx	lr
   23738:	ldr	r0, [pc, #288]	; 23860 <flatcc_verify_error_string@@Base+0x2b8>
   2373c:	add	r0, pc, r0
   23740:	bx	lr
   23744:	ldr	r0, [pc, #280]	; 23864 <flatcc_verify_error_string@@Base+0x2bc>
   23748:	add	r0, pc, r0
   2374c:	bx	lr
   23750:	ldr	r0, [pc, #272]	; 23868 <flatcc_verify_error_string@@Base+0x2c0>
   23754:	add	r0, pc, r0
   23758:	bx	lr
   2375c:	ldr	r0, [pc, #264]	; 2386c <flatcc_verify_error_string@@Base+0x2c4>
   23760:	add	r0, pc, r0
   23764:	bx	lr
   23768:	ldr	r0, [pc, #256]	; 23870 <flatcc_verify_error_string@@Base+0x2c8>
   2376c:	add	r0, pc, r0
   23770:	bx	lr
   23774:	ldr	r0, [pc, #248]	; 23874 <flatcc_verify_error_string@@Base+0x2cc>
   23778:	add	r0, pc, r0
   2377c:	bx	lr
   23780:	ldr	r0, [pc, #240]	; 23878 <flatcc_verify_error_string@@Base+0x2d0>
   23784:	add	r0, pc, r0
   23788:	bx	lr
   2378c:	ldr	r0, [pc, #232]	; 2387c <flatcc_verify_error_string@@Base+0x2d4>
   23790:	add	r0, pc, r0
   23794:	bx	lr
   23798:	ldr	r0, [pc, #224]	; 23880 <flatcc_verify_error_string@@Base+0x2d8>
   2379c:	add	r0, pc, r0
   237a0:	bx	lr
   237a4:	ldr	r0, [pc, #216]	; 23884 <flatcc_verify_error_string@@Base+0x2dc>
   237a8:	add	r0, pc, r0
   237ac:	bx	lr
   237b0:	ldr	r0, [pc, #208]	; 23888 <flatcc_verify_error_string@@Base+0x2e0>
   237b4:	add	r0, pc, r0
   237b8:	bx	lr
   237bc:	ldr	r0, [pc, #200]	; 2388c <flatcc_verify_error_string@@Base+0x2e4>
   237c0:	add	r0, pc, r0
   237c4:	bx	lr
   237c8:	ldr	r0, [pc, #192]	; 23890 <flatcc_verify_error_string@@Base+0x2e8>
   237cc:	add	r0, pc, r0
   237d0:	bx	lr
   237d4:	ldr	r0, [pc, #184]	; 23894 <flatcc_verify_error_string@@Base+0x2ec>
   237d8:	add	r0, pc, r0
   237dc:	bx	lr
   237e0:	ldr	r0, [pc, #176]	; 23898 <flatcc_verify_error_string@@Base+0x2f0>
   237e4:	add	r0, pc, r0
   237e8:	bx	lr
   237ec:	ldr	r0, [pc, #168]	; 2389c <flatcc_verify_error_string@@Base+0x2f4>
   237f0:	add	r0, pc, r0
   237f4:	bx	lr
   237f8:	ldr	r0, [pc, #160]	; 238a0 <flatcc_verify_error_string@@Base+0x2f8>
   237fc:	add	r0, pc, r0
   23800:	bx	lr
   23804:	ldr	r0, [pc, #152]	; 238a4 <flatcc_verify_error_string@@Base+0x2fc>
   23808:	add	r0, pc, r0
   2380c:	bx	lr
   23810:	ldrdeq	r5, [r0], -ip
   23814:	andeq	r5, r0, r0, lsr ip
   23818:	strdeq	r5, [r0], -ip
   2381c:			; <UNDEFINED> instruction: 0x00005bbc
   23820:	andeq	r5, r0, r8, lsl #23
   23824:	andeq	r5, r0, r4, asr fp
   23828:	andeq	r5, r0, r0, lsr fp
   2382c:	strdeq	r5, [r0], -ip
   23830:	andeq	r5, r0, r8, asr #21
   23834:	andeq	r5, r0, r4, lsr #21
   23838:	andeq	r5, r0, ip, ror sl
   2383c:	andeq	r5, r0, ip, asr sl
   23840:	andeq	r5, r0, r0, lsr #20
   23844:	andeq	r5, r0, r8, ror #19
   23848:			; <UNDEFINED> instruction: 0x000059b0
   2384c:	andeq	r5, r0, r0, ror r9
   23850:	andeq	r5, r0, r8, lsr r9
   23854:	andeq	r5, r0, r4, lsl r9
   23858:	andeq	r5, r0, r0, ror #17
   2385c:	andeq	r5, r0, r0, asr #17
   23860:	andeq	r5, r0, ip, lsl #17
   23864:	andeq	r5, r0, r8, asr r8
   23868:	andeq	r5, r0, r4, lsr #16
   2386c:	strdeq	r5, [r0], -ip
   23870:	ldrdeq	r5, [r0], -r4
   23874:			; <UNDEFINED> instruction: 0x000057b0
   23878:	muleq	r0, r0, r7
   2387c:	andeq	r5, r0, ip, ror #14
   23880:	andeq	r5, r0, ip, asr #14
   23884:	andeq	r5, r0, ip, lsr #14
   23888:	andeq	r5, r0, r4, lsl #14
   2388c:	ldrdeq	r5, [r0], -r8
   23890:	andeq	r5, r0, r8, lsr #13
   23894:	andeq	r5, r0, r4, lsl #13
   23898:	andeq	r5, r0, ip, asr r6
   2389c:	andeq	r5, r0, ip, lsr r6
   238a0:	muleq	r0, ip, sl
   238a4:	andeq	r5, r0, r8, lsl r6

000238a8 <flatcc_verify_field@@Base>:
   238a8:	ldrh	ip, [r0, #22]
   238ac:	add	r1, r1, #2
   238b0:	lsl	r1, r1, #1
   238b4:	uxth	r1, r1
   238b8:	cmp	ip, r1
   238bc:	bls	23904 <flatcc_verify_field@@Base+0x5c>
   238c0:	ldr	ip, [r0, #12]
   238c4:	ldrh	r1, [ip, r1]
   238c8:	cmp	r1, #0
   238cc:	beq	23904 <flatcc_verify_field@@Base+0x5c>
   238d0:	ldrh	ip, [r0, #20]
   238d4:	add	r2, r2, r1
   238d8:	cmp	r2, ip
   238dc:	bhi	2390c <flatcc_verify_field@@Base+0x64>
   238e0:	ldr	r2, [r0]
   238e4:	sub	r3, r3, #1
   238e8:	ldr	r0, [r0, #16]
   238ec:	add	r2, r2, r0
   238f0:	add	r1, r2, r1
   238f4:	tst	r1, r3
   238f8:	moveq	r0, #0
   238fc:	movne	r0, #12
   23900:	bx	lr
   23904:	mov	r0, #0
   23908:	bx	lr
   2390c:	mov	r0, #13
   23910:	bx	lr

00023914 <flatcc_verify_string_field@@Base>:
   23914:	ldrh	r3, [r0, #22]
   23918:	add	r1, r1, #2
   2391c:	lsl	r1, r1, #1
   23920:	uxth	r1, r1
   23924:	cmp	r3, r1
   23928:	bls	239c4 <flatcc_verify_string_field@@Base+0xb0>
   2392c:	ldr	r3, [r0, #12]
   23930:	ldrh	r3, [r3, r1]
   23934:	cmp	r3, #0
   23938:	beq	239c4 <flatcc_verify_string_field@@Base+0xb0>
   2393c:	ldrh	r2, [r0, #20]
   23940:	add	r1, r3, #4
   23944:	cmp	r1, r2
   23948:	bhi	239d4 <flatcc_verify_string_field@@Base+0xc0>
   2394c:	ldr	r2, [r0, #16]
   23950:	add	r3, r3, r2
   23954:	tst	r3, #3
   23958:	bne	239dc <flatcc_verify_string_field@@Base+0xc8>
   2395c:	cmp	r3, #0
   23960:	beq	239ec <flatcc_verify_string_field@@Base+0xd8>
   23964:	ldr	r1, [r0]
   23968:	ldr	r2, [r1, r3]
   2396c:	add	r2, r3, r2
   23970:	cmp	r3, r2
   23974:	bcs	239bc <flatcc_verify_string_field@@Base+0xa8>
   23978:	ldr	r3, [r0, #4]
   2397c:	add	r0, r2, #4
   23980:	cmp	r3, r0
   23984:	bcc	239bc <flatcc_verify_string_field@@Base+0xa8>
   23988:	tst	r2, #3
   2398c:	bne	239bc <flatcc_verify_string_field@@Base+0xa8>
   23990:	ldr	r2, [r1, r2]
   23994:	sub	r3, r3, r0
   23998:	add	ip, r2, #1
   2399c:	cmp	r3, ip
   239a0:	bcc	239e4 <flatcc_verify_string_field@@Base+0xd0>
   239a4:	add	r1, r1, r0
   239a8:	ldrb	r3, [r1, r2]
   239ac:	cmp	r3, #0
   239b0:	moveq	r0, #0
   239b4:	movne	r0, #7
   239b8:	bx	lr
   239bc:	mov	r0, #17
   239c0:	bx	lr
   239c4:	cmp	r2, #0
   239c8:	moveq	r0, #0
   239cc:	movne	r0, #4
   239d0:	bx	lr
   239d4:	mov	r0, #13
   239d8:	bx	lr
   239dc:	mov	r0, #12
   239e0:	bx	lr
   239e4:	mov	r0, #8
   239e8:	bx	lr
   239ec:	mov	r0, r3
   239f0:	bx	lr

000239f4 <flatcc_verify_vector_field@@Base>:
   239f4:	ldrh	ip, [r0, #22]
   239f8:	add	r1, r1, #2
   239fc:	lsl	r1, r1, #1
   23a00:	str	r4, [sp, #-8]!
   23a04:	str	lr, [sp, #4]
   23a08:	uxth	r1, r1
   23a0c:	ldrh	lr, [sp, #8]
   23a10:	cmp	ip, r1
   23a14:	bls	23ad8 <flatcc_verify_vector_field@@Base+0xe4>
   23a18:	ldr	ip, [r0, #12]
   23a1c:	ldrh	r1, [ip, r1]
   23a20:	cmp	r1, #0
   23a24:	beq	23ad8 <flatcc_verify_vector_field@@Base+0xe4>
   23a28:	ldrh	r2, [r0, #20]
   23a2c:	add	ip, r1, #4
   23a30:	cmp	ip, r2
   23a34:	movhi	r0, #13
   23a38:	bhi	23abc <flatcc_verify_vector_field@@Base+0xc8>
   23a3c:	ldr	r2, [r0, #16]
   23a40:	add	r2, r1, r2
   23a44:	tst	r2, #3
   23a48:	movne	r0, #12
   23a4c:	bne	23abc <flatcc_verify_vector_field@@Base+0xc8>
   23a50:	cmp	r2, #0
   23a54:	beq	23af0 <flatcc_verify_vector_field@@Base+0xfc>
   23a58:	ldr	r4, [r0]
   23a5c:	ldr	ip, [r4, r2]
   23a60:	add	ip, r2, ip
   23a64:	cmp	r2, ip
   23a68:	bcs	23ac8 <flatcc_verify_vector_field@@Base+0xd4>
   23a6c:	ldr	r1, [r0, #4]
   23a70:	add	r0, ip, #4
   23a74:	cmp	r1, r0
   23a78:	bcc	23ac8 <flatcc_verify_vector_field@@Base+0xd4>
   23a7c:	cmp	lr, #4
   23a80:	movcc	lr, #4
   23a84:	sub	lr, lr, #1
   23a88:	orr	lr, lr, #3
   23a8c:	tst	lr, r0
   23a90:	bne	23ac8 <flatcc_verify_vector_field@@Base+0xd4>
   23a94:	ldr	r2, [r4, ip]
   23a98:	ldr	ip, [sp, #12]
   23a9c:	cmp	ip, r2
   23aa0:	movcc	r0, #25
   23aa4:	bcc	23abc <flatcc_verify_vector_field@@Base+0xc8>
   23aa8:	mul	r2, r2, r3
   23aac:	sub	r0, r1, r0
   23ab0:	cmp	r0, r2
   23ab4:	movcc	r0, #26
   23ab8:	movcs	r0, #0
   23abc:	ldr	r4, [sp]
   23ac0:	add	sp, sp, #4
   23ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   23ac8:	ldr	r4, [sp]
   23acc:	add	sp, sp, #4
   23ad0:	mov	r0, #16
   23ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   23ad8:	cmp	r2, #0
   23adc:	ldr	r4, [sp]
   23ae0:	add	sp, sp, #4
   23ae4:	moveq	r0, #0
   23ae8:	movne	r0, #4
   23aec:	pop	{pc}		; (ldr pc, [sp], #4)
   23af0:	mov	r0, r2
   23af4:	b	23abc <flatcc_verify_vector_field@@Base+0xc8>

00023af8 <flatcc_verify_string_vector_field@@Base>:
   23af8:	ldrh	r3, [r0, #22]
   23afc:	add	r1, r1, #2
   23b00:	lsl	r1, r1, #1
   23b04:	uxth	r1, r1
   23b08:	cmp	r3, r1
   23b0c:	bls	23c68 <flatcc_verify_string_vector_field@@Base+0x170>
   23b10:	ldr	r3, [r0, #12]
   23b14:	ldrh	r3, [r3, r1]
   23b18:	cmp	r3, #0
   23b1c:	beq	23c68 <flatcc_verify_string_vector_field@@Base+0x170>
   23b20:	ldrh	r2, [r0, #20]
   23b24:	add	r1, r3, #4
   23b28:	cmp	r1, r2
   23b2c:	bhi	23c78 <flatcc_verify_string_vector_field@@Base+0x180>
   23b30:	ldr	r2, [r0, #16]
   23b34:	add	r3, r3, r2
   23b38:	tst	r3, #3
   23b3c:	bne	23c80 <flatcc_verify_string_vector_field@@Base+0x188>
   23b40:	cmp	r3, #0
   23b44:	beq	23cb8 <flatcc_verify_string_vector_field@@Base+0x1c0>
   23b48:	ldr	r1, [r0]
   23b4c:	ldr	r2, [r1, r3]
   23b50:	add	r2, r3, r2
   23b54:	cmp	r3, r2
   23b58:	bcs	23c60 <flatcc_verify_string_vector_field@@Base+0x168>
   23b5c:	ldr	ip, [r0, #4]
   23b60:	add	r0, r2, #4
   23b64:	cmp	ip, r0
   23b68:	bcc	23c60 <flatcc_verify_string_vector_field@@Base+0x168>
   23b6c:	tst	r0, #3
   23b70:	bne	23c60 <flatcc_verify_string_vector_field@@Base+0x168>
   23b74:	ldr	r3, [r1, r2]
   23b78:	strd	r4, [sp, #-16]!
   23b7c:	str	r6, [sp, #8]
   23b80:	str	lr, [sp, #12]
   23b84:	cmn	r3, #-1073741823	; 0xc0000001
   23b88:	bhi	23c88 <flatcc_verify_string_vector_field@@Base+0x190>
   23b8c:	lsl	lr, r3, #2
   23b90:	sub	r4, ip, r0
   23b94:	cmp	r4, lr
   23b98:	bcc	23c88 <flatcc_verify_string_vector_field@@Base+0x190>
   23b9c:	cmp	r3, #0
   23ba0:	beq	23cd4 <flatcc_verify_string_vector_field@@Base+0x1dc>
   23ba4:	ldr	r2, [r1, r0]
   23ba8:	add	r2, r0, r2
   23bac:	cmp	r0, r2
   23bb0:	bcs	23ccc <flatcc_verify_string_vector_field@@Base+0x1d4>
   23bb4:	add	r4, r2, #4
   23bb8:	cmp	ip, r4
   23bbc:	bcc	23ccc <flatcc_verify_string_vector_field@@Base+0x1d4>
   23bc0:	tst	r2, #3
   23bc4:	bne	23ccc <flatcc_verify_string_vector_field@@Base+0x1d4>
   23bc8:	ldr	r3, [r1, r2]
   23bcc:	sub	r5, ip, r4
   23bd0:	add	r6, r3, #1
   23bd4:	cmp	r6, r5
   23bd8:	addls	lr, r0, lr
   23bdc:	bhi	23c34 <flatcc_verify_string_vector_field@@Base+0x13c>
   23be0:	add	r3, r1, r3
   23be4:	add	r0, r0, #4
   23be8:	ldrb	r3, [r3, r4]
   23bec:	cmp	r3, #0
   23bf0:	bne	23cc0 <flatcc_verify_string_vector_field@@Base+0x1c8>
   23bf4:	cmp	r0, lr
   23bf8:	beq	23cd4 <flatcc_verify_string_vector_field@@Base+0x1dc>
   23bfc:	ldr	r2, [r1, r0]
   23c00:	add	r2, r0, r2
   23c04:	cmp	r2, r0
   23c08:	add	r4, r2, #4
   23c0c:	bls	23ccc <flatcc_verify_string_vector_field@@Base+0x1d4>
   23c10:	cmp	ip, r4
   23c14:	bcc	23ccc <flatcc_verify_string_vector_field@@Base+0x1d4>
   23c18:	tst	r2, #3
   23c1c:	sub	r5, ip, r4
   23c20:	bne	23ccc <flatcc_verify_string_vector_field@@Base+0x1d4>
   23c24:	ldr	r3, [r1, r2]
   23c28:	add	r6, r3, #1
   23c2c:	cmp	r5, r6
   23c30:	bcs	23be0 <flatcc_verify_string_vector_field@@Base+0xe8>
   23c34:	ldr	r3, [r1, r2]
   23c38:	add	r2, r3, #1
   23c3c:	cmp	r5, r2
   23c40:	movcc	r0, #8
   23c44:	bcc	23ca8 <flatcc_verify_string_vector_field@@Base+0x1b0>
   23c48:	add	r3, r1, r3
   23c4c:	ldrb	r3, [r3, r4]
   23c50:	cmp	r3, #0
   23c54:	moveq	r0, #0
   23c58:	movne	r0, #7
   23c5c:	b	23ca8 <flatcc_verify_string_vector_field@@Base+0x1b0>
   23c60:	mov	r0, #16
   23c64:	bx	lr
   23c68:	cmp	r2, #0
   23c6c:	movne	r0, #4
   23c70:	moveq	r0, #0
   23c74:	bx	lr
   23c78:	mov	r0, #13
   23c7c:	bx	lr
   23c80:	mov	r0, #12
   23c84:	bx	lr
   23c88:	ldr	r3, [r1, r2]
   23c8c:	cmn	r3, #-1073741823	; 0xc0000001
   23c90:	movhi	r0, #25
   23c94:	bhi	23ca8 <flatcc_verify_string_vector_field@@Base+0x1b0>
   23c98:	sub	r0, ip, r0
   23c9c:	cmp	r0, r3, lsl #2
   23ca0:	movcs	r0, #0
   23ca4:	movcc	r0, #26
   23ca8:	ldrd	r4, [sp]
   23cac:	ldr	r6, [sp, #8]
   23cb0:	add	sp, sp, #12
   23cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   23cb8:	mov	r0, r3
   23cbc:	bx	lr
   23cc0:	cmp	ip, r4
   23cc4:	subcs	r5, ip, r4
   23cc8:	bcs	23c34 <flatcc_verify_string_vector_field@@Base+0x13c>
   23ccc:	mov	r0, #17
   23cd0:	b	23ca8 <flatcc_verify_string_vector_field@@Base+0x1b0>
   23cd4:	mov	r0, r3
   23cd8:	b	23ca8 <flatcc_verify_string_vector_field@@Base+0x1b0>

00023cdc <flatcc_verify_table_field@@Base>:
   23cdc:	ldrh	ip, [r0, #22]
   23ce0:	add	r1, r1, #2
   23ce4:	lsl	r1, r1, #1
   23ce8:	uxth	r1, r1
   23cec:	cmp	ip, r1
   23cf0:	bls	23e10 <flatcc_verify_table_field@@Base+0x134>
   23cf4:	ldr	ip, [r0, #12]
   23cf8:	ldrh	r1, [ip, r1]
   23cfc:	cmp	r1, #0
   23d00:	beq	23e10 <flatcc_verify_table_field@@Base+0x134>
   23d04:	ldrh	r2, [r0, #20]
   23d08:	add	ip, r1, #4
   23d0c:	cmp	ip, r2
   23d10:	bhi	23e20 <flatcc_verify_table_field@@Base+0x144>
   23d14:	ldr	r2, [r0, #16]
   23d18:	add	r1, r1, r2
   23d1c:	tst	r1, #3
   23d20:	bne	23e28 <flatcc_verify_table_field@@Base+0x14c>
   23d24:	cmp	r1, #0
   23d28:	beq	23e30 <flatcc_verify_table_field@@Base+0x154>
   23d2c:	ldr	ip, [r0]
   23d30:	strd	r4, [sp, #-12]!
   23d34:	ldr	r2, [r0, #8]
   23d38:	str	lr, [sp, #8]
   23d3c:	sub	sp, sp, #28
   23d40:	ldr	lr, [r0, #4]
   23d44:	ldr	r0, [ip, r1]
   23d48:	sub	r2, r2, #1
   23d4c:	cmp	r2, #0
   23d50:	moveq	r0, #3
   23d54:	str	r2, [sp, #8]
   23d58:	beq	23e00 <flatcc_verify_table_field@@Base+0x124>
   23d5c:	add	r2, r1, r0
   23d60:	cmp	r1, r2
   23d64:	bcs	23dfc <flatcc_verify_table_field@@Base+0x120>
   23d68:	add	r1, r2, #4
   23d6c:	cmp	lr, r1
   23d70:	bcc	23dfc <flatcc_verify_table_field@@Base+0x120>
   23d74:	tst	r2, #3
   23d78:	bne	23dfc <flatcc_verify_table_field@@Base+0x120>
   23d7c:	str	r2, [sp, #16]
   23d80:	ldr	r1, [ip, r2]
   23d84:	subs	r1, r2, r1
   23d88:	bmi	23e38 <flatcc_verify_table_field@@Base+0x15c>
   23d8c:	tst	r1, #1
   23d90:	bne	23e38 <flatcc_verify_table_field@@Base+0x15c>
   23d94:	add	r4, r1, #2
   23d98:	cmp	lr, r4
   23d9c:	movcc	r0, #27
   23da0:	bcc	23e00 <flatcc_verify_table_field@@Base+0x124>
   23da4:	ldrh	r0, [ip, r1]
   23da8:	add	r5, ip, r1
   23dac:	add	r1, r0, r1
   23db0:	strh	r0, [sp, #22]
   23db4:	cmp	lr, r1
   23db8:	bcc	23e40 <flatcc_verify_table_field@@Base+0x164>
   23dbc:	tst	r0, #1
   23dc0:	bne	23e40 <flatcc_verify_table_field@@Base+0x164>
   23dc4:	cmp	r0, #3
   23dc8:	movls	r0, #28
   23dcc:	bls	23e00 <flatcc_verify_table_field@@Base+0x124>
   23dd0:	ldrh	r1, [ip, r4]
   23dd4:	sub	r2, lr, r2
   23dd8:	cmp	r2, r1
   23ddc:	strh	r1, [sp, #20]
   23de0:	movcc	r0, #20
   23de4:	bcc	23e00 <flatcc_verify_table_field@@Base+0x124>
   23de8:	mov	r0, sp
   23dec:	stm	sp, {ip, lr}
   23df0:	str	r5, [sp, #12]
   23df4:	blx	r3
   23df8:	b	23e00 <flatcc_verify_table_field@@Base+0x124>
   23dfc:	mov	r0, #15
   23e00:	add	sp, sp, #28
   23e04:	ldrd	r4, [sp]
   23e08:	add	sp, sp, #8
   23e0c:	pop	{pc}		; (ldr pc, [sp], #4)
   23e10:	cmp	r2, #0
   23e14:	moveq	r0, #0
   23e18:	movne	r0, #4
   23e1c:	bx	lr
   23e20:	mov	r0, #13
   23e24:	bx	lr
   23e28:	mov	r0, #12
   23e2c:	bx	lr
   23e30:	mov	r0, r1
   23e34:	bx	lr
   23e38:	mov	r0, #29
   23e3c:	b	23e00 <flatcc_verify_table_field@@Base+0x124>
   23e40:	mov	r0, #30
   23e44:	b	23e00 <flatcc_verify_table_field@@Base+0x124>

00023e48 <flatcc_verify_table_vector_field@@Base>:
   23e48:	ldrh	ip, [r0, #22]
   23e4c:	add	r1, r1, #2
   23e50:	lsl	r1, r1, #1
   23e54:	uxth	r1, r1
   23e58:	cmp	ip, r1
   23e5c:	bls	240e4 <flatcc_verify_table_vector_field@@Base+0x29c>
   23e60:	ldr	ip, [r0, #12]
   23e64:	ldrh	r1, [ip, r1]
   23e68:	cmp	r1, #0
   23e6c:	beq	240e4 <flatcc_verify_table_vector_field@@Base+0x29c>
   23e70:	ldrh	r2, [r0, #20]
   23e74:	add	ip, r1, #4
   23e78:	cmp	ip, r2
   23e7c:	bhi	240f4 <flatcc_verify_table_vector_field@@Base+0x2ac>
   23e80:	ldr	r2, [r0, #16]
   23e84:	add	r1, r1, r2
   23e88:	tst	r1, #3
   23e8c:	bne	2410c <flatcc_verify_table_vector_field@@Base+0x2c4>
   23e90:	cmp	r1, #0
   23e94:	beq	240ec <flatcc_verify_table_vector_field@@Base+0x2a4>
   23e98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23e9c:	strd	r6, [sp, #8]
   23ea0:	ldr	r7, [r0, #8]
   23ea4:	strd	r8, [sp, #16]
   23ea8:	ldr	r8, [r0]
   23eac:	strd	sl, [sp, #24]
   23eb0:	str	lr, [sp, #32]
   23eb4:	sub	sp, sp, #36	; 0x24
   23eb8:	cmp	r7, #0
   23ebc:	ldr	ip, [r8, r1]
   23ec0:	ble	24104 <flatcc_verify_table_vector_field@@Base+0x2bc>
   23ec4:	add	ip, r1, ip
   23ec8:	cmp	r1, ip
   23ecc:	bcs	240c4 <flatcc_verify_table_vector_field@@Base+0x27c>
   23ed0:	ldr	r9, [r0, #4]
   23ed4:	add	r5, ip, #4
   23ed8:	cmp	r9, r5
   23edc:	bcc	240c4 <flatcc_verify_table_vector_field@@Base+0x27c>
   23ee0:	tst	r5, #3
   23ee4:	bne	240c4 <flatcc_verify_table_vector_field@@Base+0x27c>
   23ee8:	ldr	r1, [r8, ip]
   23eec:	cmn	r1, #-1073741823	; 0xc0000001
   23ef0:	bhi	24114 <flatcc_verify_table_vector_field@@Base+0x2cc>
   23ef4:	lsl	r2, r1, #2
   23ef8:	sub	r0, r9, r5
   23efc:	cmp	r0, r2
   23f00:	bcc	24114 <flatcc_verify_table_vector_field@@Base+0x2cc>
   23f04:	cmp	r1, #0
   23f08:	beq	24134 <flatcc_verify_table_vector_field@@Base+0x2ec>
   23f0c:	sub	r7, r7, #2
   23f10:	add	sl, r8, r5
   23f14:	ldr	r1, [r8, r5]
   23f18:	cmp	r7, #0
   23f1c:	str	r7, [sp, #16]
   23f20:	beq	24104 <flatcc_verify_table_vector_field@@Base+0x2bc>
   23f24:	mov	r6, r3
   23f28:	add	r3, r5, r1
   23f2c:	cmp	r5, r3
   23f30:	bcs	2401c <flatcc_verify_table_vector_field@@Base+0x1d4>
   23f34:	add	r1, r3, #4
   23f38:	cmp	r9, r1
   23f3c:	bcc	2401c <flatcc_verify_table_vector_field@@Base+0x1d4>
   23f40:	tst	r3, #3
   23f44:	bne	2401c <flatcc_verify_table_vector_field@@Base+0x1d4>
   23f48:	movw	fp, #65532	; 0xfffc
   23f4c:	movt	fp, #65535	; 0xffff
   23f50:	sub	fp, fp, ip
   23f54:	add	r1, sp, #8
   23f58:	add	fp, sl, fp
   23f5c:	add	ip, ip, #8
   23f60:	add	r2, r5, r2
   23f64:	add	r4, r8, ip
   23f68:	str	r1, [sp, #4]
   23f6c:	mov	r1, fp
   23f70:	mov	fp, r2
   23f74:	add	sl, r1, r5
   23f78:	str	r1, [sp]
   23f7c:	str	r3, [sp, #24]
   23f80:	ldr	r2, [r8, r3]
   23f84:	subs	r2, r3, r2
   23f88:	bmi	2401c <flatcc_verify_table_vector_field@@Base+0x1d4>
   23f8c:	tst	r2, #1
   23f90:	bne	2401c <flatcc_verify_table_vector_field@@Base+0x1d4>
   23f94:	add	lr, r2, #2
   23f98:	cmp	r9, lr
   23f9c:	bcc	2401c <flatcc_verify_table_vector_field@@Base+0x1d4>
   23fa0:	ldrh	r0, [r8, r2]
   23fa4:	add	ip, r8, r2
   23fa8:	add	r2, r0, r2
   23fac:	strh	r0, [sp, #30]
   23fb0:	cmp	r9, r2
   23fb4:	bcc	2401c <flatcc_verify_table_vector_field@@Base+0x1d4>
   23fb8:	tst	r0, #1
   23fbc:	bne	2401c <flatcc_verify_table_vector_field@@Base+0x1d4>
   23fc0:	cmp	r0, #3
   23fc4:	bls	2401c <flatcc_verify_table_vector_field@@Base+0x1d4>
   23fc8:	ldrh	r2, [r8, lr]
   23fcc:	sub	r3, r9, r3
   23fd0:	cmp	r3, r2
   23fd4:	strh	r2, [sp, #28]
   23fd8:	bcc	2401c <flatcc_verify_table_vector_field@@Base+0x1d4>
   23fdc:	ldr	r0, [sp, #4]
   23fe0:	strd	r8, [sp, #8]
   23fe4:	str	ip, [sp, #20]
   23fe8:	blx	r6
   23fec:	cmp	r0, #0
   23ff0:	ldr	r1, [sp]
   23ff4:	bne	2401c <flatcc_verify_table_vector_field@@Base+0x1d4>
   23ff8:	add	r5, r5, #4
   23ffc:	cmp	r5, fp
   24000:	beq	24134 <flatcc_verify_table_vector_field@@Base+0x2ec>
   24004:	mov	sl, r4
   24008:	ldr	r3, [r4], #4
   2400c:	str	r7, [sp, #16]
   24010:	add	r3, r3, r5
   24014:	cmp	r5, r3
   24018:	bcc	2413c <flatcc_verify_table_vector_field@@Base+0x2f4>
   2401c:	ldr	r3, [sl]
   24020:	str	r7, [sp, #16]
   24024:	add	r3, r5, r3
   24028:	cmp	r3, r5
   2402c:	bls	24154 <flatcc_verify_table_vector_field@@Base+0x30c>
   24030:	add	r2, r3, #4
   24034:	cmp	r9, r2
   24038:	bcc	24154 <flatcc_verify_table_vector_field@@Base+0x30c>
   2403c:	tst	r3, #3
   24040:	bne	24154 <flatcc_verify_table_vector_field@@Base+0x30c>
   24044:	str	r3, [sp, #24]
   24048:	ldr	r2, [r8, r3]
   2404c:	subs	r2, r3, r2
   24050:	bmi	2415c <flatcc_verify_table_vector_field@@Base+0x314>
   24054:	tst	r2, #1
   24058:	bne	2415c <flatcc_verify_table_vector_field@@Base+0x314>
   2405c:	add	r0, r2, #2
   24060:	cmp	r9, r0
   24064:	movcc	r0, #27
   24068:	bcc	240c8 <flatcc_verify_table_vector_field@@Base+0x280>
   2406c:	ldrh	r1, [r8, r2]
   24070:	add	ip, r8, r2
   24074:	add	r2, r1, r2
   24078:	strh	r1, [sp, #30]
   2407c:	cmp	r9, r2
   24080:	bcc	24164 <flatcc_verify_table_vector_field@@Base+0x31c>
   24084:	tst	r1, #1
   24088:	bne	24164 <flatcc_verify_table_vector_field@@Base+0x31c>
   2408c:	cmp	r1, #3
   24090:	movls	r0, #28
   24094:	bls	240c8 <flatcc_verify_table_vector_field@@Base+0x280>
   24098:	ldrh	r2, [r8, r0]
   2409c:	sub	r3, r9, r3
   240a0:	cmp	r3, r2
   240a4:	strh	r2, [sp, #28]
   240a8:	movcc	r0, #20
   240ac:	bcc	240c8 <flatcc_verify_table_vector_field@@Base+0x280>
   240b0:	add	r0, sp, #8
   240b4:	strd	r8, [sp, #8]
   240b8:	str	ip, [sp, #20]
   240bc:	blx	r6
   240c0:	b	240c8 <flatcc_verify_table_vector_field@@Base+0x280>
   240c4:	mov	r0, #16
   240c8:	add	sp, sp, #36	; 0x24
   240cc:	ldrd	r4, [sp]
   240d0:	ldrd	r6, [sp, #8]
   240d4:	ldrd	r8, [sp, #16]
   240d8:	ldrd	sl, [sp, #24]
   240dc:	add	sp, sp, #32
   240e0:	pop	{pc}		; (ldr pc, [sp], #4)
   240e4:	cmp	r2, #0
   240e8:	bne	240fc <flatcc_verify_table_vector_field@@Base+0x2b4>
   240ec:	mov	r0, #0
   240f0:	bx	lr
   240f4:	mov	r0, #13
   240f8:	bx	lr
   240fc:	mov	r0, #4
   24100:	bx	lr
   24104:	mov	r0, #3
   24108:	b	240c8 <flatcc_verify_table_vector_field@@Base+0x280>
   2410c:	mov	r0, #12
   24110:	bx	lr
   24114:	ldr	r3, [r8, ip]
   24118:	cmn	r3, #-1073741823	; 0xc0000001
   2411c:	movhi	r0, #25
   24120:	bhi	240c8 <flatcc_verify_table_vector_field@@Base+0x280>
   24124:	sub	r5, r9, r5
   24128:	cmp	r5, r3, lsl #2
   2412c:	movcc	r0, #26
   24130:	bcc	240c8 <flatcc_verify_table_vector_field@@Base+0x280>
   24134:	mov	r0, #0
   24138:	b	240c8 <flatcc_verify_table_vector_field@@Base+0x280>
   2413c:	add	r2, r3, #4
   24140:	cmp	r9, r2
   24144:	bcc	2401c <flatcc_verify_table_vector_field@@Base+0x1d4>
   24148:	tst	r3, #3
   2414c:	beq	23f74 <flatcc_verify_table_vector_field@@Base+0x12c>
   24150:	b	2401c <flatcc_verify_table_vector_field@@Base+0x1d4>
   24154:	mov	r0, #15
   24158:	b	240c8 <flatcc_verify_table_vector_field@@Base+0x280>
   2415c:	mov	r0, #29
   24160:	b	240c8 <flatcc_verify_table_vector_field@@Base+0x280>
   24164:	mov	r0, #30
   24168:	b	240c8 <flatcc_verify_table_vector_field@@Base+0x280>

0002416c <flatcc_verify_union_table@@Base>:
   2416c:	strd	r4, [sp, #-12]!
   24170:	ldr	r3, [r0, #8]
   24174:	ldr	ip, [r0, #4]
   24178:	ldr	r2, [r0, #16]
   2417c:	sub	r3, r3, #1
   24180:	str	lr, [sp, #8]
   24184:	sub	sp, sp, #28
   24188:	cmp	r3, #0
   2418c:	ldr	lr, [r0]
   24190:	str	r3, [sp, #8]
   24194:	ldr	r3, [r0, #20]
   24198:	moveq	r0, #3
   2419c:	beq	241b0 <flatcc_verify_union_table@@Base+0x44>
   241a0:	add	r3, r2, r3
   241a4:	cmp	r2, r3
   241a8:	bcc	241c0 <flatcc_verify_union_table@@Base+0x54>
   241ac:	mov	r0, #15
   241b0:	add	sp, sp, #28
   241b4:	ldrd	r4, [sp]
   241b8:	add	sp, sp, #8
   241bc:	pop	{pc}		; (ldr pc, [sp], #4)
   241c0:	add	r2, r3, #4
   241c4:	cmp	ip, r2
   241c8:	bcc	241ac <flatcc_verify_union_table@@Base+0x40>
   241cc:	tst	r3, #3
   241d0:	bne	241ac <flatcc_verify_union_table@@Base+0x40>
   241d4:	str	r3, [sp, #16]
   241d8:	ldr	r2, [lr, r3]
   241dc:	subs	r2, r3, r2
   241e0:	bmi	24260 <flatcc_verify_union_table@@Base+0xf4>
   241e4:	tst	r2, #1
   241e8:	bne	24260 <flatcc_verify_union_table@@Base+0xf4>
   241ec:	add	r4, r2, #2
   241f0:	cmp	ip, r4
   241f4:	movcc	r0, #27
   241f8:	bcc	241b0 <flatcc_verify_union_table@@Base+0x44>
   241fc:	ldrh	r0, [lr, r2]
   24200:	add	r5, lr, r2
   24204:	add	r2, r0, r2
   24208:	strh	r0, [sp, #22]
   2420c:	cmp	ip, r2
   24210:	bcc	24258 <flatcc_verify_union_table@@Base+0xec>
   24214:	tst	r0, #1
   24218:	bne	24258 <flatcc_verify_union_table@@Base+0xec>
   2421c:	cmp	r0, #3
   24220:	movls	r0, #28
   24224:	bls	241b0 <flatcc_verify_union_table@@Base+0x44>
   24228:	ldrh	r2, [lr, r4]
   2422c:	sub	r3, ip, r3
   24230:	cmp	r3, r2
   24234:	strh	r2, [sp, #20]
   24238:	movcc	r0, #20
   2423c:	bcc	241b0 <flatcc_verify_union_table@@Base+0x44>
   24240:	mov	r0, sp
   24244:	str	lr, [sp]
   24248:	str	ip, [sp, #4]
   2424c:	str	r5, [sp, #12]
   24250:	blx	r1
   24254:	b	241b0 <flatcc_verify_union_table@@Base+0x44>
   24258:	mov	r0, #30
   2425c:	b	241b0 <flatcc_verify_union_table@@Base+0x44>
   24260:	mov	r0, #29
   24264:	b	241b0 <flatcc_verify_union_table@@Base+0x44>

00024268 <flatcc_verify_union_struct@@Base>:
   24268:	push	{lr}		; (str lr, [sp, #-4]!)
   2426c:	ldr	ip, [r0, #20]
   24270:	ldr	lr, [r0, #4]
   24274:	ldr	r3, [r0, #16]
   24278:	cmp	ip, #0
   2427c:	beq	242b0 <flatcc_verify_union_struct@@Base+0x48>
   24280:	add	r3, r3, ip
   24284:	cmp	lr, r3
   24288:	bcc	242b0 <flatcc_verify_union_struct@@Base+0x48>
   2428c:	adds	r1, r1, r3
   24290:	bcs	242c0 <flatcc_verify_union_struct@@Base+0x58>
   24294:	cmp	lr, r1
   24298:	bcc	242b8 <flatcc_verify_union_struct@@Base+0x50>
   2429c:	sub	r2, r2, #1
   242a0:	tst	r2, r3
   242a4:	moveq	r0, #0
   242a8:	movne	r0, #11
   242ac:	pop	{pc}		; (ldr pc, [sp], #4)
   242b0:	mov	r0, #18
   242b4:	pop	{pc}		; (ldr pc, [sp], #4)
   242b8:	mov	r0, #9
   242bc:	pop	{pc}		; (ldr pc, [sp], #4)
   242c0:	mov	r0, #10
   242c4:	b	242ac <flatcc_verify_union_struct@@Base+0x44>

000242c8 <flatcc_verify_union_string@@Base>:
   242c8:	ldrd	r2, [r0, #16]
   242cc:	add	r3, r2, r3
   242d0:	cmp	r2, r3
   242d4:	bcs	24320 <flatcc_verify_union_string@@Base+0x58>
   242d8:	ldr	r2, [r0, #4]
   242dc:	add	r1, r3, #4
   242e0:	cmp	r2, r1
   242e4:	bcc	24320 <flatcc_verify_union_string@@Base+0x58>
   242e8:	tst	r3, #3
   242ec:	bne	24320 <flatcc_verify_union_string@@Base+0x58>
   242f0:	ldr	r0, [r0]
   242f4:	sub	r2, r2, r1
   242f8:	ldr	r3, [r0, r3]
   242fc:	add	ip, r3, #1
   24300:	cmp	r2, ip
   24304:	bcc	24328 <flatcc_verify_union_string@@Base+0x60>
   24308:	add	r1, r0, r1
   2430c:	ldrb	r3, [r1, r3]
   24310:	cmp	r3, #0
   24314:	moveq	r0, #0
   24318:	movne	r0, #7
   2431c:	bx	lr
   24320:	mov	r0, #17
   24324:	bx	lr
   24328:	mov	r0, #8
   2432c:	bx	lr

00024330 <flatcc_verify_buffer_header@@Base>:
   24330:	tst	r0, #3
   24334:	bne	243a0 <flatcc_verify_buffer_header@@Base+0x70>
   24338:	cmn	r1, #9
   2433c:	bhi	243a8 <flatcc_verify_buffer_header@@Base+0x78>
   24340:	cmp	r1, #7
   24344:	bls	24398 <flatcc_verify_buffer_header@@Base+0x68>
   24348:	cmp	r2, #0
   2434c:	beq	243b0 <flatcc_verify_buffer_header@@Base+0x80>
   24350:	mov	r1, r2
   24354:	mov	r2, #4
   24358:	str	r4, [sp, #-8]!
   2435c:	str	lr, [sp, #4]
   24360:	sub	sp, sp, #8
   24364:	mov	r4, r0
   24368:	add	r0, sp, r2
   2436c:	bl	129a4 <strncpy@plt>
   24370:	ldr	r2, [r4, #4]
   24374:	ldr	r3, [sp, #4]
   24378:	cmp	r3, #0
   2437c:	cmpne	r2, r3
   24380:	movne	r0, #2
   24384:	moveq	r0, #0
   24388:	add	sp, sp, #8
   2438c:	ldr	r4, [sp]
   24390:	add	sp, sp, #4
   24394:	pop	{pc}		; (ldr pc, [sp], #4)
   24398:	mov	r0, #1
   2439c:	bx	lr
   243a0:	mov	r0, #5
   243a4:	bx	lr
   243a8:	mov	r0, #6
   243ac:	bx	lr
   243b0:	mov	r0, #0
   243b4:	bx	lr

000243b8 <flatcc_verify_typed_buffer_header@@Base>:
   243b8:	tst	r0, #3
   243bc:	bne	243f4 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   243c0:	cmn	r1, #9
   243c4:	bhi	24404 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   243c8:	cmp	r1, #7
   243cc:	bls	243ec <flatcc_verify_typed_buffer_header@@Base+0x34>
   243d0:	cmp	r2, #0
   243d4:	beq	243fc <flatcc_verify_typed_buffer_header@@Base+0x44>
   243d8:	ldr	r0, [r0, #4]
   243dc:	cmp	r2, r0
   243e0:	movne	r0, #2
   243e4:	moveq	r0, #0
   243e8:	bx	lr
   243ec:	mov	r0, #1
   243f0:	bx	lr
   243f4:	mov	r0, #5
   243f8:	bx	lr
   243fc:	mov	r0, r2
   24400:	bx	lr
   24404:	mov	r0, #6
   24408:	bx	lr

0002440c <flatcc_verify_struct_as_root@@Base>:
   2440c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24410:	mov	r4, r3
   24414:	mov	r5, r1
   24418:	strd	r6, [sp, #8]
   2441c:	mov	r7, r0
   24420:	ldrh	r6, [sp, #24]
   24424:	str	r8, [sp, #16]
   24428:	mov	r8, r2
   2442c:	str	lr, [sp, #20]
   24430:	bl	24330 <flatcc_verify_buffer_header@@Base>
   24434:	cmp	r0, #0
   24438:	bne	24490 <flatcc_verify_struct_as_root@@Base+0x84>
   2443c:	ldr	r2, [r7]
   24440:	cmp	r5, r2
   24444:	movcs	r3, #0
   24448:	movcc	r3, #1
   2444c:	cmp	r2, #0
   24450:	moveq	r3, #1
   24454:	cmp	r3, #0
   24458:	movne	r0, #18
   2445c:	bne	2447c <flatcc_verify_struct_as_root@@Base+0x70>
   24460:	adds	r4, r4, r2
   24464:	bcs	244bc <flatcc_verify_struct_as_root@@Base+0xb0>
   24468:	cmp	r5, r4
   2446c:	bcc	244b4 <flatcc_verify_struct_as_root@@Base+0xa8>
   24470:	sub	r6, r6, #1
   24474:	tst	r6, r2
   24478:	movne	r0, #11
   2447c:	ldrd	r4, [sp]
   24480:	ldrd	r6, [sp, #8]
   24484:	ldr	r8, [sp, #16]
   24488:	add	sp, sp, #20
   2448c:	pop	{pc}		; (ldr pc, [sp], #4)
   24490:	mov	r2, r8
   24494:	mov	r1, r5
   24498:	ldrd	r4, [sp]
   2449c:	mov	r0, r7
   244a0:	ldrd	r6, [sp, #8]
   244a4:	ldr	r8, [sp, #16]
   244a8:	ldr	lr, [sp, #20]
   244ac:	add	sp, sp, #24
   244b0:	b	24330 <flatcc_verify_buffer_header@@Base>
   244b4:	mov	r0, #9
   244b8:	b	2447c <flatcc_verify_struct_as_root@@Base+0x70>
   244bc:	mov	r0, #10
   244c0:	b	2447c <flatcc_verify_struct_as_root@@Base+0x70>

000244c4 <flatcc_verify_struct_as_typed_root@@Base>:
   244c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   244c8:	mov	r4, r3
   244cc:	mov	r5, r1
   244d0:	strd	r6, [sp, #8]
   244d4:	mov	r7, r0
   244d8:	ldrh	r6, [sp, #24]
   244dc:	str	r8, [sp, #16]
   244e0:	mov	r8, r2
   244e4:	str	lr, [sp, #20]
   244e8:	bl	243b8 <flatcc_verify_typed_buffer_header@@Base>
   244ec:	cmp	r0, #0
   244f0:	bne	24548 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   244f4:	ldr	r2, [r7]
   244f8:	cmp	r5, r2
   244fc:	movcs	r3, #0
   24500:	movcc	r3, #1
   24504:	cmp	r2, #0
   24508:	moveq	r3, #1
   2450c:	cmp	r3, #0
   24510:	movne	r0, #18
   24514:	bne	24534 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   24518:	adds	r4, r4, r2
   2451c:	bcs	24574 <flatcc_verify_struct_as_typed_root@@Base+0xb0>
   24520:	cmp	r5, r4
   24524:	bcc	2456c <flatcc_verify_struct_as_typed_root@@Base+0xa8>
   24528:	sub	r6, r6, #1
   2452c:	tst	r6, r2
   24530:	movne	r0, #11
   24534:	ldrd	r4, [sp]
   24538:	ldrd	r6, [sp, #8]
   2453c:	ldr	r8, [sp, #16]
   24540:	add	sp, sp, #20
   24544:	pop	{pc}		; (ldr pc, [sp], #4)
   24548:	mov	r2, r8
   2454c:	mov	r1, r5
   24550:	ldrd	r4, [sp]
   24554:	mov	r0, r7
   24558:	ldrd	r6, [sp, #8]
   2455c:	ldr	r8, [sp, #16]
   24560:	ldr	lr, [sp, #20]
   24564:	add	sp, sp, #24
   24568:	b	243b8 <flatcc_verify_typed_buffer_header@@Base>
   2456c:	mov	r0, #9
   24570:	b	24534 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   24574:	mov	r0, #10
   24578:	b	24534 <flatcc_verify_struct_as_typed_root@@Base+0x70>

0002457c <flatcc_verify_table_as_root@@Base>:
   2457c:	strd	r4, [sp, #-20]!	; 0xffffffec
   24580:	mov	r4, r0
   24584:	mov	r5, r1
   24588:	strd	r6, [sp, #8]
   2458c:	mov	r7, r3
   24590:	mov	r6, r2
   24594:	str	lr, [sp, #16]
   24598:	sub	sp, sp, #28
   2459c:	bl	24330 <flatcc_verify_buffer_header@@Base>
   245a0:	cmp	r0, #0
   245a4:	bne	24668 <flatcc_verify_table_as_root@@Base+0xec>
   245a8:	ldr	r3, [r4]
   245ac:	mov	r2, #99	; 0x63
   245b0:	str	r2, [sp, #8]
   245b4:	cmp	r3, #0
   245b8:	bne	245d4 <flatcc_verify_table_as_root@@Base+0x58>
   245bc:	mov	r0, #15
   245c0:	add	sp, sp, #28
   245c4:	ldrd	r4, [sp]
   245c8:	ldrd	r6, [sp, #8]
   245cc:	add	sp, sp, #16
   245d0:	pop	{pc}		; (ldr pc, [sp], #4)
   245d4:	add	r2, r3, #4
   245d8:	cmp	r5, r2
   245dc:	bcc	245bc <flatcc_verify_table_as_root@@Base+0x40>
   245e0:	tst	r3, #3
   245e4:	bne	245bc <flatcc_verify_table_as_root@@Base+0x40>
   245e8:	ldr	r2, [r4, r3]
   245ec:	str	r3, [sp, #16]
   245f0:	subs	r2, r3, r2
   245f4:	bmi	2467c <flatcc_verify_table_as_root@@Base+0x100>
   245f8:	tst	r2, #1
   245fc:	bne	2467c <flatcc_verify_table_as_root@@Base+0x100>
   24600:	add	r0, r2, #2
   24604:	cmp	r5, r0
   24608:	movcc	r0, #27
   2460c:	bcc	245c0 <flatcc_verify_table_as_root@@Base+0x44>
   24610:	ldrh	r1, [r4, r2]
   24614:	add	ip, r4, r2
   24618:	add	r2, r1, r2
   2461c:	strh	r1, [sp, #22]
   24620:	cmp	r5, r2
   24624:	bcc	24684 <flatcc_verify_table_as_root@@Base+0x108>
   24628:	tst	r1, #1
   2462c:	bne	24684 <flatcc_verify_table_as_root@@Base+0x108>
   24630:	cmp	r1, #3
   24634:	movls	r0, #28
   24638:	bls	245c0 <flatcc_verify_table_as_root@@Base+0x44>
   2463c:	ldrh	r2, [r4, r0]
   24640:	sub	r3, r5, r3
   24644:	cmp	r3, r2
   24648:	strh	r2, [sp, #20]
   2464c:	movcc	r0, #20
   24650:	bcc	245c0 <flatcc_verify_table_as_root@@Base+0x44>
   24654:	mov	r0, sp
   24658:	strd	r4, [sp]
   2465c:	str	ip, [sp, #12]
   24660:	blx	r7
   24664:	b	245c0 <flatcc_verify_table_as_root@@Base+0x44>
   24668:	mov	r2, r6
   2466c:	mov	r1, r5
   24670:	mov	r0, r4
   24674:	bl	24330 <flatcc_verify_buffer_header@@Base>
   24678:	b	245c0 <flatcc_verify_table_as_root@@Base+0x44>
   2467c:	mov	r0, #29
   24680:	b	245c0 <flatcc_verify_table_as_root@@Base+0x44>
   24684:	mov	r0, #30
   24688:	b	245c0 <flatcc_verify_table_as_root@@Base+0x44>

0002468c <flatcc_verify_table_as_typed_root@@Base>:
   2468c:	strd	r4, [sp, #-20]!	; 0xffffffec
   24690:	mov	r4, r0
   24694:	mov	r5, r1
   24698:	strd	r6, [sp, #8]
   2469c:	mov	r7, r3
   246a0:	mov	r6, r2
   246a4:	str	lr, [sp, #16]
   246a8:	sub	sp, sp, #28
   246ac:	bl	243b8 <flatcc_verify_typed_buffer_header@@Base>
   246b0:	cmp	r0, #0
   246b4:	bne	24778 <flatcc_verify_table_as_typed_root@@Base+0xec>
   246b8:	ldr	r3, [r4]
   246bc:	mov	r2, #99	; 0x63
   246c0:	str	r2, [sp, #8]
   246c4:	cmp	r3, #0
   246c8:	bne	246e4 <flatcc_verify_table_as_typed_root@@Base+0x58>
   246cc:	mov	r0, #15
   246d0:	add	sp, sp, #28
   246d4:	ldrd	r4, [sp]
   246d8:	ldrd	r6, [sp, #8]
   246dc:	add	sp, sp, #16
   246e0:	pop	{pc}		; (ldr pc, [sp], #4)
   246e4:	add	r2, r3, #4
   246e8:	cmp	r5, r2
   246ec:	bcc	246cc <flatcc_verify_table_as_typed_root@@Base+0x40>
   246f0:	tst	r3, #3
   246f4:	bne	246cc <flatcc_verify_table_as_typed_root@@Base+0x40>
   246f8:	ldr	r2, [r4, r3]
   246fc:	str	r3, [sp, #16]
   24700:	subs	r2, r3, r2
   24704:	bmi	2478c <flatcc_verify_table_as_typed_root@@Base+0x100>
   24708:	tst	r2, #1
   2470c:	bne	2478c <flatcc_verify_table_as_typed_root@@Base+0x100>
   24710:	add	r0, r2, #2
   24714:	cmp	r5, r0
   24718:	movcc	r0, #27
   2471c:	bcc	246d0 <flatcc_verify_table_as_typed_root@@Base+0x44>
   24720:	ldrh	r1, [r4, r2]
   24724:	add	ip, r4, r2
   24728:	add	r2, r1, r2
   2472c:	strh	r1, [sp, #22]
   24730:	cmp	r5, r2
   24734:	bcc	24794 <flatcc_verify_table_as_typed_root@@Base+0x108>
   24738:	tst	r1, #1
   2473c:	bne	24794 <flatcc_verify_table_as_typed_root@@Base+0x108>
   24740:	cmp	r1, #3
   24744:	movls	r0, #28
   24748:	bls	246d0 <flatcc_verify_table_as_typed_root@@Base+0x44>
   2474c:	ldrh	r2, [r4, r0]
   24750:	sub	r3, r5, r3
   24754:	cmp	r3, r2
   24758:	strh	r2, [sp, #20]
   2475c:	movcc	r0, #20
   24760:	bcc	246d0 <flatcc_verify_table_as_typed_root@@Base+0x44>
   24764:	mov	r0, sp
   24768:	strd	r4, [sp]
   2476c:	str	ip, [sp, #12]
   24770:	blx	r7
   24774:	b	246d0 <flatcc_verify_table_as_typed_root@@Base+0x44>
   24778:	mov	r2, r6
   2477c:	mov	r1, r5
   24780:	mov	r0, r4
   24784:	bl	243b8 <flatcc_verify_typed_buffer_header@@Base>
   24788:	b	246d0 <flatcc_verify_table_as_typed_root@@Base+0x44>
   2478c:	mov	r0, #29
   24790:	b	246d0 <flatcc_verify_table_as_typed_root@@Base+0x44>
   24794:	mov	r0, #30
   24798:	b	246d0 <flatcc_verify_table_as_typed_root@@Base+0x44>

0002479c <flatcc_verify_struct_as_nested_root@@Base>:
   2479c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   247a0:	mov	r4, r1
   247a4:	strd	r6, [sp, #8]
   247a8:	mov	r6, r3
   247ac:	strd	r8, [sp, #16]
   247b0:	mvn	r9, #0
   247b4:	mov	r8, r0
   247b8:	strd	sl, [sp, #24]
   247bc:	mov	sl, #1
   247c0:	mov	fp, r2
   247c4:	str	lr, [sp, #32]
   247c8:	sub	sp, sp, #12
   247cc:	ldrh	r5, [sp, #52]	; 0x34
   247d0:	str	sl, [sp]
   247d4:	str	r9, [sp, #4]
   247d8:	ldr	r7, [sp, #48]	; 0x30
   247dc:	mov	r3, r5
   247e0:	bl	239f4 <flatcc_verify_vector_field@@Base>
   247e4:	cmp	r0, #0
   247e8:	bne	24884 <flatcc_verify_struct_as_nested_root@@Base+0xe8>
   247ec:	ldrh	r3, [r8, #22]
   247f0:	add	r1, r4, #2
   247f4:	lsl	r1, r1, #1
   247f8:	uxth	r1, r1
   247fc:	cmp	r3, r1
   24800:	bls	24864 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   24804:	ldr	r3, [r8, #12]
   24808:	ldrh	r3, [r3, r1]
   2480c:	cmp	r3, #0
   24810:	beq	24864 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   24814:	ldr	r2, [r8]
   24818:	ldr	r1, [r8, #16]
   2481c:	add	r3, r3, r1
   24820:	adds	r0, r2, r3
   24824:	beq	24864 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   24828:	ldr	ip, [r2, r3]
   2482c:	mov	r3, r7
   24830:	mov	r2, r6
   24834:	ldr	r1, [r0, ip]
   24838:	add	r0, r0, ip
   2483c:	add	r0, r0, #4
   24840:	str	r5, [sp, #48]	; 0x30
   24844:	add	sp, sp, #12
   24848:	ldrd	r4, [sp]
   2484c:	ldrd	r6, [sp, #8]
   24850:	ldrd	r8, [sp, #16]
   24854:	ldrd	sl, [sp, #24]
   24858:	ldr	lr, [sp, #32]
   2485c:	add	sp, sp, #36	; 0x24
   24860:	b	2440c <flatcc_verify_struct_as_root@@Base>
   24864:	mov	r0, #0
   24868:	add	sp, sp, #12
   2486c:	ldrd	r4, [sp]
   24870:	ldrd	r6, [sp, #8]
   24874:	ldrd	r8, [sp, #16]
   24878:	ldrd	sl, [sp, #24]
   2487c:	add	sp, sp, #32
   24880:	pop	{pc}		; (ldr pc, [sp], #4)
   24884:	mov	r3, r5
   24888:	mov	r2, fp
   2488c:	str	sl, [sp, #48]	; 0x30
   24890:	mov	r1, r4
   24894:	mov	r0, r8
   24898:	str	r9, [sp, #52]	; 0x34
   2489c:	add	sp, sp, #12
   248a0:	ldrd	r4, [sp]
   248a4:	ldrd	r6, [sp, #8]
   248a8:	ldrd	r8, [sp, #16]
   248ac:	ldrd	sl, [sp, #24]
   248b0:	ldr	lr, [sp, #32]
   248b4:	add	sp, sp, #36	; 0x24
   248b8:	b	239f4 <flatcc_verify_vector_field@@Base>

000248bc <flatcc_verify_table_as_nested_root@@Base>:
   248bc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   248c0:	mov	r5, r0
   248c4:	mov	r4, r1
   248c8:	strd	r6, [sp, #8]
   248cc:	mvn	r7, #0
   248d0:	mov	r6, r3
   248d4:	strd	r8, [sp, #16]
   248d8:	mov	r8, #1
   248dc:	str	sl, [sp, #24]
   248e0:	mov	sl, r2
   248e4:	str	lr, [sp, #28]
   248e8:	sub	sp, sp, #32
   248ec:	ldrh	r9, [sp, #64]	; 0x40
   248f0:	str	r8, [sp]
   248f4:	str	r7, [sp, #4]
   248f8:	mov	r3, r9
   248fc:	bl	239f4 <flatcc_verify_vector_field@@Base>
   24900:	cmp	r0, #0
   24904:	bne	24a44 <flatcc_verify_table_as_nested_root@@Base+0x188>
   24908:	ldrh	r3, [r5, #22]
   2490c:	add	r1, r4, #2
   24910:	lsl	r1, r1, #1
   24914:	uxth	r1, r1
   24918:	cmp	r3, r1
   2491c:	bls	24a28 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   24920:	ldr	r3, [r5, #12]
   24924:	ldrh	r3, [r3, r1]
   24928:	cmp	r3, #0
   2492c:	beq	24a28 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   24930:	ldr	r2, [r5]
   24934:	ldr	r1, [r5, #16]
   24938:	add	r3, r3, r1
   2493c:	adds	r1, r2, r3
   24940:	beq	24a28 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   24944:	ldr	r4, [r2, r3]
   24948:	mov	r2, r6
   2494c:	ldr	r7, [r1, r4]
   24950:	add	r4, r1, r4
   24954:	add	r8, r4, #4
   24958:	mov	r0, r8
   2495c:	mov	r1, r7
   24960:	bl	24330 <flatcc_verify_buffer_header@@Base>
   24964:	cmp	r0, #0
   24968:	bne	24a6c <flatcc_verify_table_as_nested_root@@Base+0x1b0>
   2496c:	ldr	r3, [r5, #8]
   24970:	ldr	r2, [r4, #4]
   24974:	sub	r3, r3, #1
   24978:	cmp	r3, #0
   2497c:	moveq	r0, #3
   24980:	str	r3, [sp, #16]
   24984:	beq	24a28 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   24988:	cmp	r2, #0
   2498c:	beq	24a64 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   24990:	add	r3, r2, #4
   24994:	cmp	r7, r3
   24998:	bcc	24a64 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   2499c:	tst	r2, #3
   249a0:	bne	24a64 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   249a4:	str	r2, [sp, #24]
   249a8:	ldr	r3, [r8, r2]
   249ac:	subs	r3, r2, r3
   249b0:	bmi	24a80 <flatcc_verify_table_as_nested_root@@Base+0x1c4>
   249b4:	tst	r3, #1
   249b8:	bne	24a80 <flatcc_verify_table_as_nested_root@@Base+0x1c4>
   249bc:	add	r0, r3, #2
   249c0:	cmp	r7, r0
   249c4:	movcc	r0, #27
   249c8:	bcc	24a28 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   249cc:	ldrh	r1, [r8, r3]
   249d0:	add	ip, r8, r3
   249d4:	add	r3, r1, r3
   249d8:	strh	r1, [sp, #30]
   249dc:	cmp	r7, r3
   249e0:	bcc	24a88 <flatcc_verify_table_as_nested_root@@Base+0x1cc>
   249e4:	tst	r1, #1
   249e8:	bne	24a88 <flatcc_verify_table_as_nested_root@@Base+0x1cc>
   249ec:	cmp	r1, #3
   249f0:	movls	r0, #28
   249f4:	bls	24a28 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   249f8:	ldrh	r3, [r8, r0]
   249fc:	sub	r2, r7, r2
   24a00:	cmp	r2, r3
   24a04:	strh	r3, [sp, #28]
   24a08:	movcc	r0, #20
   24a0c:	bcc	24a28 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   24a10:	add	r0, sp, #8
   24a14:	ldr	r3, [sp, #68]	; 0x44
   24a18:	str	r8, [sp, #8]
   24a1c:	str	r7, [sp, #12]
   24a20:	str	ip, [sp, #20]
   24a24:	blx	r3
   24a28:	add	sp, sp, #32
   24a2c:	ldrd	r4, [sp]
   24a30:	ldrd	r6, [sp, #8]
   24a34:	ldrd	r8, [sp, #16]
   24a38:	ldr	sl, [sp, #24]
   24a3c:	add	sp, sp, #28
   24a40:	pop	{pc}		; (ldr pc, [sp], #4)
   24a44:	mov	r3, r9
   24a48:	mov	r2, sl
   24a4c:	str	r8, [sp]
   24a50:	mov	r1, r4
   24a54:	mov	r0, r5
   24a58:	str	r7, [sp, #4]
   24a5c:	bl	239f4 <flatcc_verify_vector_field@@Base>
   24a60:	b	24a28 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   24a64:	mov	r0, #15
   24a68:	b	24a28 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   24a6c:	mov	r2, r6
   24a70:	mov	r1, r7
   24a74:	mov	r0, r8
   24a78:	bl	24330 <flatcc_verify_buffer_header@@Base>
   24a7c:	b	24a28 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   24a80:	mov	r0, #29
   24a84:	b	24a28 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   24a88:	mov	r0, #30
   24a8c:	b	24a28 <flatcc_verify_table_as_nested_root@@Base+0x16c>

00024a90 <flatcc_verify_union_field@@Base>:
   24a90:	strd	r4, [sp, #-20]!	; 0xffffffec
   24a94:	add	r1, r1, #1
   24a98:	ldr	r4, [r0, #12]
   24a9c:	lsl	r1, r1, #1
   24aa0:	strd	r6, [sp, #8]
   24aa4:	str	lr, [sp, #16]
   24aa8:	uxth	r1, r1
   24aac:	sub	sp, sp, #28
   24ab0:	ldrh	lr, [r0, #22]
   24ab4:	cmp	r1, lr
   24ab8:	bcs	24b64 <flatcc_verify_union_field@@Base+0xd4>
   24abc:	ldrh	ip, [r4, r1]
   24ac0:	cmp	ip, #0
   24ac4:	beq	24b64 <flatcc_verify_union_field@@Base+0xd4>
   24ac8:	ldrh	r5, [r0, #20]
   24acc:	add	r6, ip, #1
   24ad0:	cmp	r6, r5
   24ad4:	bhi	24bb4 <flatcc_verify_union_field@@Base+0x124>
   24ad8:	ldr	r6, [r0]
   24adc:	add	r1, r1, #2
   24ae0:	uxth	r1, r1
   24ae4:	ldr	r7, [r0, #16]
   24ae8:	cmp	lr, r1
   24aec:	add	lr, ip, r7
   24af0:	ldrb	ip, [r6, lr]
   24af4:	bls	24bbc <flatcc_verify_union_field@@Base+0x12c>
   24af8:	cmp	ip, #0
   24afc:	ldrh	r1, [r4, r1]
   24b00:	beq	24ba4 <flatcc_verify_union_field@@Base+0x114>
   24b04:	cmp	r1, #0
   24b08:	beq	24bcc <flatcc_verify_union_field@@Base+0x13c>
   24b0c:	add	r2, r1, #4
   24b10:	cmp	r5, r2
   24b14:	bcc	24bb4 <flatcc_verify_union_field@@Base+0x124>
   24b18:	add	r1, r1, r7
   24b1c:	tst	r1, #3
   24b20:	movne	r0, #12
   24b24:	bne	24b90 <flatcc_verify_union_field@@Base+0x100>
   24b28:	cmp	r1, #0
   24b2c:	beq	24bdc <flatcc_verify_union_field@@Base+0x14c>
   24b30:	mov	r2, r0
   24b34:	str	r1, [sp, #16]
   24b38:	mov	r0, sp
   24b3c:	ldr	ip, [r2, #4]
   24b40:	ldr	r2, [r2, #8]
   24b44:	stm	sp, {r6, ip}
   24b48:	str	r2, [sp, #8]
   24b4c:	ldr	r2, [r6, r1]
   24b50:	str	r2, [sp, #20]
   24b54:	ldrb	r2, [r6, lr]
   24b58:	strb	r2, [sp, #12]
   24b5c:	blx	r3
   24b60:	b	24b90 <flatcc_verify_union_field@@Base+0x100>
   24b64:	add	r1, r1, #2
   24b68:	uxth	r1, r1
   24b6c:	cmp	lr, r1
   24b70:	bls	24b84 <flatcc_verify_union_field@@Base+0xf4>
   24b74:	ldrh	r3, [r4, r1]
   24b78:	cmp	r3, #0
   24b7c:	movne	r0, #23
   24b80:	bne	24b90 <flatcc_verify_union_field@@Base+0x100>
   24b84:	cmp	r2, #0
   24b88:	moveq	r0, #0
   24b8c:	movne	r0, #21
   24b90:	add	sp, sp, #28
   24b94:	ldrd	r4, [sp]
   24b98:	ldrd	r6, [sp, #8]
   24b9c:	add	sp, sp, #16
   24ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   24ba4:	cmp	r1, #0
   24ba8:	movne	r0, #24
   24bac:	moveq	r0, #0
   24bb0:	b	24b90 <flatcc_verify_union_field@@Base+0x100>
   24bb4:	mov	r0, #13
   24bb8:	b	24b90 <flatcc_verify_union_field@@Base+0x100>
   24bbc:	cmp	ip, #0
   24bc0:	bne	24bcc <flatcc_verify_union_field@@Base+0x13c>
   24bc4:	mov	r0, ip
   24bc8:	b	24b90 <flatcc_verify_union_field@@Base+0x100>
   24bcc:	cmp	r2, #0
   24bd0:	moveq	r0, #0
   24bd4:	movne	r0, #4
   24bd8:	b	24b90 <flatcc_verify_union_field@@Base+0x100>
   24bdc:	mov	r0, r1
   24be0:	b	24b90 <flatcc_verify_union_field@@Base+0x100>

00024be4 <flatcc_verify_union_vector_field@@Base>:
   24be4:	ldrh	ip, [r0, #22]
   24be8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24bec:	add	r4, r1, #1
   24bf0:	sub	r1, r1, #1
   24bf4:	lsl	r4, r4, #1
   24bf8:	strd	r6, [sp, #8]
   24bfc:	uxth	r6, r1
   24c00:	strd	r8, [sp, #16]
   24c04:	uxth	r4, r4
   24c08:	strd	sl, [sp, #24]
   24c0c:	cmp	r4, ip
   24c10:	str	lr, [sp, #32]
   24c14:	sub	sp, sp, #36	; 0x24
   24c18:	ldr	lr, [r0, #12]
   24c1c:	bcs	24ddc <flatcc_verify_union_vector_field@@Base+0x1f8>
   24c20:	ldrh	r1, [lr, r4]
   24c24:	cmp	r1, #0
   24c28:	beq	24ddc <flatcc_verify_union_vector_field@@Base+0x1f8>
   24c2c:	mov	r9, #1
   24c30:	mvn	fp, #0
   24c34:	mov	r8, r3
   24c38:	mov	r1, r6
   24c3c:	mov	r3, r9
   24c40:	stm	sp, {r9, fp}
   24c44:	mov	r7, r2
   24c48:	mov	r5, r0
   24c4c:	bl	239f4 <flatcc_verify_vector_field@@Base>
   24c50:	subs	sl, r0, #0
   24c54:	bne	24e20 <flatcc_verify_union_vector_field@@Base+0x23c>
   24c58:	ldrh	r1, [r5, #22]
   24c5c:	cmp	r4, r1
   24c60:	bcs	24dbc <flatcc_verify_union_vector_field@@Base+0x1d8>
   24c64:	ldr	ip, [r5, #12]
   24c68:	ldrh	r3, [ip, r4]
   24c6c:	cmp	r3, #0
   24c70:	beq	24dbc <flatcc_verify_union_vector_field@@Base+0x1d8>
   24c74:	ldr	r0, [r5]
   24c78:	ldr	r2, [r5, #16]
   24c7c:	add	r3, r3, r2
   24c80:	adds	lr, r0, r3
   24c84:	beq	24dbc <flatcc_verify_union_vector_field@@Base+0x1d8>
   24c88:	add	r4, r4, #2
   24c8c:	uxth	r4, r4
   24c90:	cmp	r1, r4
   24c94:	bls	24e08 <flatcc_verify_union_vector_field@@Base+0x224>
   24c98:	ldrh	r1, [ip, r4]
   24c9c:	cmp	r1, #0
   24ca0:	beq	24e08 <flatcc_verify_union_vector_field@@Base+0x224>
   24ca4:	ldrh	ip, [r5, #20]
   24ca8:	add	r4, r1, #4
   24cac:	cmp	r4, ip
   24cb0:	movhi	sl, #13
   24cb4:	bhi	24dbc <flatcc_verify_union_vector_field@@Base+0x1d8>
   24cb8:	add	r2, r2, r1
   24cbc:	tst	r2, #3
   24cc0:	movne	sl, #12
   24cc4:	bne	24dbc <flatcc_verify_union_vector_field@@Base+0x1d8>
   24cc8:	cmp	r2, #0
   24ccc:	beq	24dbc <flatcc_verify_union_vector_field@@Base+0x1d8>
   24cd0:	ldr	ip, [r5, #8]
   24cd4:	ldr	r1, [r0, r2]
   24cd8:	cmp	ip, #0
   24cdc:	movle	sl, #3
   24ce0:	ble	24dbc <flatcc_verify_union_vector_field@@Base+0x1d8>
   24ce4:	add	r1, r2, r1
   24ce8:	cmp	r2, r1
   24cec:	bcs	24e18 <flatcc_verify_union_vector_field@@Base+0x234>
   24cf0:	ldr	r4, [r5, #4]
   24cf4:	add	r2, r1, #4
   24cf8:	cmp	r4, r2
   24cfc:	bcc	24e18 <flatcc_verify_union_vector_field@@Base+0x234>
   24d00:	tst	r2, #3
   24d04:	bne	24e18 <flatcc_verify_union_vector_field@@Base+0x234>
   24d08:	ldr	r5, [r0, r1]
   24d0c:	add	r6, r0, r1
   24d10:	cmn	r5, #-1073741823	; 0xc0000001
   24d14:	bhi	24e40 <flatcc_verify_union_vector_field@@Base+0x25c>
   24d18:	sub	r7, r4, r2
   24d1c:	cmp	r7, r5, lsl #2
   24d20:	bcc	24e40 <flatcc_verify_union_vector_field@@Base+0x25c>
   24d24:	ldr	r3, [r0, r3]
   24d28:	ldr	r7, [lr, r3]
   24d2c:	add	lr, lr, r3
   24d30:	cmp	r7, r5
   24d34:	bne	24e60 <flatcc_verify_union_vector_field@@Base+0x27c>
   24d38:	sub	ip, ip, #1
   24d3c:	cmp	r7, #0
   24d40:	str	r0, [sp, #8]
   24d44:	str	r4, [sp, #12]
   24d48:	str	ip, [sp, #16]
   24d4c:	beq	24dbc <flatcc_verify_union_vector_field@@Base+0x1d8>
   24d50:	add	r5, lr, #4
   24d54:	rsb	r4, r0, #4
   24d58:	add	r7, r7, r5
   24d5c:	add	r9, sp, #8
   24d60:	b	24d74 <flatcc_verify_union_vector_field@@Base+0x190>
   24d64:	cmp	r2, #0
   24d68:	bne	24e68 <flatcc_verify_union_vector_field@@Base+0x284>
   24d6c:	cmp	r5, r7
   24d70:	beq	24dbc <flatcc_verify_union_vector_field@@Base+0x1d8>
   24d74:	add	r1, r4, r6
   24d78:	ldr	r3, [r6, #4]!
   24d7c:	mov	r0, r9
   24d80:	add	r5, r5, #1
   24d84:	ldrb	r2, [r5, #-1]
   24d88:	cmp	r3, #0
   24d8c:	beq	24d64 <flatcc_verify_union_vector_field@@Base+0x180>
   24d90:	cmp	r2, #0
   24d94:	beq	24e70 <flatcc_verify_union_vector_field@@Base+0x28c>
   24d98:	strb	r2, [sp, #20]
   24d9c:	str	r1, [sp, #24]
   24da0:	str	r3, [sp, #28]
   24da4:	blx	r8
   24da8:	cmp	r0, #0
   24dac:	beq	24d6c <flatcc_verify_union_vector_field@@Base+0x188>
   24db0:	mov	r0, r9
   24db4:	blx	r8
   24db8:	mov	sl, r0
   24dbc:	mov	r0, sl
   24dc0:	add	sp, sp, #36	; 0x24
   24dc4:	ldrd	r4, [sp]
   24dc8:	ldrd	r6, [sp, #8]
   24dcc:	ldrd	r8, [sp, #16]
   24dd0:	ldrd	sl, [sp, #24]
   24dd4:	add	sp, sp, #32
   24dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   24ddc:	add	r1, r4, #2
   24de0:	uxth	r1, r1
   24de4:	cmp	ip, r1
   24de8:	bls	24df8 <flatcc_verify_union_vector_field@@Base+0x214>
   24dec:	ldrh	r1, [lr, r1]
   24df0:	cmp	r1, #0
   24df4:	bne	24c2c <flatcc_verify_union_vector_field@@Base+0x48>
   24df8:	cmp	r2, #0
   24dfc:	movne	sl, #22
   24e00:	beq	24c2c <flatcc_verify_union_vector_field@@Base+0x48>
   24e04:	b	24dbc <flatcc_verify_union_vector_field@@Base+0x1d8>
   24e08:	cmp	r7, #0
   24e0c:	moveq	sl, #0
   24e10:	movne	sl, #4
   24e14:	b	24dbc <flatcc_verify_union_vector_field@@Base+0x1d8>
   24e18:	mov	sl, #16
   24e1c:	b	24dbc <flatcc_verify_union_vector_field@@Base+0x1d8>
   24e20:	mov	r2, r7
   24e24:	mov	r1, r6
   24e28:	stm	sp, {r9, fp}
   24e2c:	mov	r3, r9
   24e30:	mov	r0, r5
   24e34:	bl	239f4 <flatcc_verify_vector_field@@Base>
   24e38:	mov	sl, r0
   24e3c:	b	24dbc <flatcc_verify_union_vector_field@@Base+0x1d8>
   24e40:	ldr	r3, [r0, r1]
   24e44:	cmn	r3, #-1073741823	; 0xc0000001
   24e48:	movhi	sl, #25
   24e4c:	bhi	24dbc <flatcc_verify_union_vector_field@@Base+0x1d8>
   24e50:	sub	r2, r4, r2
   24e54:	cmp	r2, r3, lsl #2
   24e58:	movcc	sl, #26
   24e5c:	b	24dbc <flatcc_verify_union_vector_field@@Base+0x1d8>
   24e60:	mov	sl, #34	; 0x22
   24e64:	b	24dbc <flatcc_verify_union_vector_field@@Base+0x1d8>
   24e68:	mov	sl, #32
   24e6c:	b	24dbc <flatcc_verify_union_vector_field@@Base+0x1d8>
   24e70:	mov	sl, #33	; 0x21
   24e74:	b	24dbc <flatcc_verify_union_vector_field@@Base+0x1d8>

00024e78 <__libc_csu_init@@Base>:
   24e78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24e7c:	mov	r7, r0
   24e80:	ldr	r6, [pc, #72]	; 24ed0 <__libc_csu_init@@Base+0x58>
   24e84:	ldr	r5, [pc, #72]	; 24ed4 <__libc_csu_init@@Base+0x5c>
   24e88:	add	r6, pc, r6
   24e8c:	add	r5, pc, r5
   24e90:	sub	r6, r6, r5
   24e94:	mov	r8, r1
   24e98:	mov	r9, r2
   24e9c:	bl	128c4 <strcmp@plt-0x20>
   24ea0:	asrs	r6, r6, #2
   24ea4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   24ea8:	mov	r4, #0
   24eac:	add	r4, r4, #1
   24eb0:	ldr	r3, [r5], #4
   24eb4:	mov	r2, r9
   24eb8:	mov	r1, r8
   24ebc:	mov	r0, r7
   24ec0:	blx	r3
   24ec4:	cmp	r6, r4
   24ec8:	bne	24eac <__libc_csu_init@@Base+0x34>
   24ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24ed0:	andeq	r5, r1, r4, lsl #1
   24ed4:	andeq	r5, r1, ip, ror r0

00024ed8 <__libc_csu_fini@@Base>:
   24ed8:	bx	lr

Disassembly of section .fini:

00024edc <.fini>:
   24edc:	push	{r3, lr}
   24ee0:	pop	{r3, pc}
