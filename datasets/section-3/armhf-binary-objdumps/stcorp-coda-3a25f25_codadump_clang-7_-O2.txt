
../repos/stcorp-coda-3a25f25/codadump:     file format elf32-littlearm


Disassembly of section .init:

0001260c <.init>:
   1260c:	push	{r3, lr}
   12610:	bl	12b18 <_start@@Base+0x3c>
   12614:	pop	{r3, pc}

Disassembly of section .plt:

00012618 <coda_cursor_get_byte_size@plt-0x14>:
   12618:	push	{lr}		; (str lr, [sp, #-4]!)
   1261c:	ldr	lr, [pc, #4]	; 12628 <coda_cursor_get_byte_size@plt-0x4>
   12620:	add	lr, pc, lr
   12624:	ldr	pc, [lr, #8]!
   12628:	ldrdeq	sl, [r1], -r8

0001262c <coda_cursor_get_byte_size@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #106496	; 0x1a000
   12634:	ldr	pc, [ip, #2520]!	; 0x9d8

00012638 <coda_type_get_special_type_name@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #106496	; 0x1a000
   12640:	ldr	pc, [ip, #2512]!	; 0x9d0

00012644 <coda_set_option_use_fast_size_expressions@plt>:
   12644:	add	ip, pc, #0, 12
   12648:	add	ip, ip, #106496	; 0x1a000
   1264c:	ldr	pc, [ip, #2504]!	; 0x9c8

00012650 <raise@plt>:
   12650:	add	ip, pc, #0, 12
   12654:	add	ip, ip, #106496	; 0x1a000
   12658:	ldr	pc, [ip, #2496]!	; 0x9c0

0001265c <coda_get_option_bypass_special_types@plt>:
   1265c:	add	ip, pc, #0, 12
   12660:	add	ip, ip, #106496	; 0x1a000
   12664:	ldr	pc, [ip, #2488]!	; 0x9b8

00012668 <coda_set_option_perform_boundary_checks@plt>:
   12668:	add	ip, pc, #0, 12
   1266c:	add	ip, ip, #106496	; 0x1a000
   12670:	ldr	pc, [ip, #2480]!	; 0x9b0

00012674 <strcmp@plt>:
   12674:	add	ip, pc, #0, 12
   12678:	add	ip, ip, #106496	; 0x1a000
   1267c:	ldr	pc, [ip, #2472]!	; 0x9a8

00012680 <strtol@plt>:
   12680:	add	ip, pc, #0, 12
   12684:	add	ip, ip, #106496	; 0x1a000
   12688:	ldr	pc, [ip, #2464]!	; 0x9a0

0001268c <coda_type_get_record_field_hidden_status@plt>:
   1268c:	add	ip, pc, #0, 12
   12690:	add	ip, ip, #106496	; 0x1a000
   12694:	ldr	pc, [ip, #2456]!	; 0x998

00012698 <printf@plt>:
   12698:	add	ip, pc, #0, 12
   1269c:	add	ip, ip, #106496	; 0x1a000
   126a0:	ldr	pc, [ip, #2448]!	; 0x990

000126a4 <coda_cursor_get_record_field_available_status@plt>:
   126a4:	add	ip, pc, #0, 12
   126a8:	add	ip, ip, #106496	; 0x1a000
   126ac:	ldr	pc, [ip, #2440]!	; 0x988

000126b0 <fopen@plt>:
   126b0:	add	ip, pc, #0, 12
   126b4:	add	ip, ip, #106496	; 0x1a000
   126b8:	ldr	pc, [ip, #2432]!	; 0x980

000126bc <coda_set_error@plt>:
   126bc:	add	ip, pc, #0, 12
   126c0:	add	ip, ip, #106496	; 0x1a000
   126c4:	ldr	pc, [ip, #2424]!	; 0x978

000126c8 <coda_open@plt>:
   126c8:	add	ip, pc, #0, 12
   126cc:	add	ip, ip, #106496	; 0x1a000
   126d0:	ldr	pc, [ip, #2416]!	; 0x970

000126d4 <fflush@plt>:
   126d4:	add	ip, pc, #0, 12
   126d8:	add	ip, ip, #106496	; 0x1a000
   126dc:	ldr	pc, [ip, #2408]!	; 0x968

000126e0 <coda_time_double_to_string@plt>:
   126e0:	add	ip, pc, #0, 12
   126e4:	add	ip, ip, #106496	; 0x1a000
   126e8:	ldr	pc, [ip, #2400]!	; 0x960

000126ec <coda_cursor_get_num_elements@plt>:
   126ec:	add	ip, pc, #0, 12
   126f0:	add	ip, ip, #106496	; 0x1a000
   126f4:	ldr	pc, [ip, #2392]!	; 0x958

000126f8 <coda_str64u@plt>:
   126f8:	add	ip, pc, #0, 12
   126fc:	add	ip, ip, #106496	; 0x1a000
   12700:	ldr	pc, [ip, #2384]!	; 0x950

00012704 <free@plt>:
   12704:	add	ip, pc, #0, 12
   12708:	add	ip, ip, #106496	; 0x1a000
   1270c:	ldr	pc, [ip, #2376]!	; 0x948

00012710 <coda_set_option_use_mmap@plt>:
   12710:	add	ip, pc, #0, 12
   12714:	add	ip, ip, #106496	; 0x1a000
   12718:	ldr	pc, [ip, #2368]!	; 0x940

0001271c <coda_set_definition_path_conditional@plt>:
   1271c:	add	ip, pc, #0, 12
   12720:	add	ip, ip, #106496	; 0x1a000
   12724:	ldr	pc, [ip, #2360]!	; 0x938

00012728 <coda_cursor_read_uint32@plt>:
   12728:	add	ip, pc, #0, 12
   1272c:	add	ip, ip, #106496	; 0x1a000
   12730:	ldr	pc, [ip, #2352]!	; 0x930

00012734 <coda_set_option_bypass_special_types@plt>:
   12734:	add	ip, pc, #0, 12
   12738:	add	ip, ip, #106496	; 0x1a000
   1273c:	ldr	pc, [ip, #2344]!	; 0x928

00012740 <coda_type_get_record_field_type@plt>:
   12740:	add	ip, pc, #0, 12
   12744:	add	ip, ip, #106496	; 0x1a000
   12748:	ldr	pc, [ip, #2336]!	; 0x920

0001274c <coda_cursor_get_type@plt>:
   1274c:	add	ip, pc, #0, 12
   12750:	add	ip, ip, #106496	; 0x1a000
   12754:	ldr	pc, [ip, #2328]!	; 0x918

00012758 <memcpy@plt>:
   12758:	add	ip, pc, #0, 12
   1275c:	add	ip, ip, #106496	; 0x1a000
   12760:	ldr	pc, [ip, #2320]!	; 0x910

00012764 <coda_isInf@plt>:
   12764:	add	ip, pc, #0, 12
   12768:	add	ip, ip, #106496	; 0x1a000
   1276c:	ldr	pc, [ip, #2312]!	; 0x908

00012770 <coda_type_get_bit_size@plt>:
   12770:	add	ip, pc, #0, 12
   12774:	add	ip, ip, #106496	; 0x1a000
   12778:	ldr	pc, [ip, #2304]!	; 0x900

0001277c <coda_type_get_record_field_available_status@plt>:
   1277c:	add	ip, pc, #0, 12
   12780:	add	ip, ip, #106496	; 0x1a000
   12784:	ldr	pc, [ip, #2296]!	; 0x8f8

00012788 <coda_cursor_has_attributes@plt>:
   12788:	add	ip, pc, #0, 12
   1278c:	add	ip, ip, #106496	; 0x1a000
   12790:	ldr	pc, [ip, #2288]!	; 0x8f0

00012794 <coda_cursor_get_type_class@plt>:
   12794:	add	ip, pc, #0, 12
   12798:	add	ip, ip, #106496	; 0x1a000
   1279c:	ldr	pc, [ip, #2280]!	; 0x8e8

000127a0 <coda_set_definition_path@plt>:
   127a0:	add	ip, pc, #0, 12
   127a4:	add	ip, ip, #106496	; 0x1a000
   127a8:	ldr	pc, [ip, #2272]!	; 0x8e0

000127ac <coda_get_product_format@plt>:
   127ac:	add	ip, pc, #0, 12
   127b0:	add	ip, ip, #106496	; 0x1a000
   127b4:	ldr	pc, [ip, #2264]!	; 0x8d8

000127b8 <coda_type_get_unit@plt>:
   127b8:	add	ip, pc, #0, 12
   127bc:	add	ip, ip, #106496	; 0x1a000
   127c0:	ldr	pc, [ip, #2256]!	; 0x8d0

000127c4 <coda_type_get_description@plt>:
   127c4:	add	ip, pc, #0, 12
   127c8:	add	ip, ip, #106496	; 0x1a000
   127cc:	ldr	pc, [ip, #2248]!	; 0x8c8

000127d0 <coda_cursor_get_special_type@plt>:
   127d0:	add	ip, pc, #0, 12
   127d4:	add	ip, ip, #106496	; 0x1a000
   127d8:	ldr	pc, [ip, #2240]!	; 0x8c0

000127dc <coda_cursor_goto_first_array_element@plt>:
   127dc:	add	ip, pc, #0, 12
   127e0:	add	ip, ip, #106496	; 0x1a000
   127e4:	ldr	pc, [ip, #2232]!	; 0x8b8

000127e8 <fwrite@plt>:
   127e8:	add	ip, pc, #0, 12
   127ec:	add	ip, ip, #106496	; 0x1a000
   127f0:	ldr	pc, [ip, #2224]!	; 0x8b0

000127f4 <coda_cursor_set_product@plt>:
   127f4:	add	ip, pc, #0, 12
   127f8:	add	ip, ip, #106496	; 0x1a000
   127fc:	ldr	pc, [ip, #2216]!	; 0x8a8

00012800 <coda_cursor_goto_first_record_field@plt>:
   12800:	add	ip, pc, #0, 12
   12804:	add	ip, ip, #106496	; 0x1a000
   12808:	ldr	pc, [ip, #2208]!	; 0x8a0

0001280c <coda_cursor_goto_record_field_by_index@plt>:
   1280c:	add	ip, pc, #0, 12
   12810:	add	ip, ip, #106496	; 0x1a000
   12814:	ldr	pc, [ip, #2200]!	; 0x898

00012818 <coda_done@plt>:
   12818:	add	ip, pc, #0, 12
   1281c:	add	ip, ip, #106496	; 0x1a000
   12820:	ldr	pc, [ip, #2192]!	; 0x890

00012824 <puts@plt>:
   12824:	add	ip, pc, #0, 12
   12828:	add	ip, ip, #106496	; 0x1a000
   1282c:	ldr	pc, [ip, #2184]!	; 0x888

00012830 <coda_cursor_get_read_type@plt>:
   12830:	add	ip, pc, #0, 12
   12834:	add	ip, ip, #106496	; 0x1a000
   12838:	ldr	pc, [ip, #2176]!	; 0x880

0001283c <malloc@plt>:
   1283c:	add	ip, pc, #0, 12
   12840:	add	ip, ip, #106496	; 0x1a000
   12844:	ldr	pc, [ip, #2168]!	; 0x878

00012848 <__libc_start_main@plt>:
   12848:	add	ip, pc, #0, 12
   1284c:	add	ip, ip, #106496	; 0x1a000
   12850:	ldr	pc, [ip, #2160]!	; 0x870

00012854 <__gmon_start__@plt>:
   12854:	add	ip, pc, #0, 12
   12858:	add	ip, ip, #106496	; 0x1a000
   1285c:	ldr	pc, [ip, #2152]!	; 0x868

00012860 <coda_cursor_read_string@plt>:
   12860:	add	ip, pc, #0, 12
   12864:	add	ip, ip, #106496	; 0x1a000
   12868:	ldr	pc, [ip, #2144]!	; 0x860

0001286c <coda_cursor_goto_parent@plt>:
   1286c:	add	ip, pc, #0, 12
   12870:	add	ip, ip, #106496	; 0x1a000
   12874:	ldr	pc, [ip, #2136]!	; 0x858

00012878 <coda_type_get_num_record_fields@plt>:
   12878:	add	ip, pc, #0, 12
   1287c:	add	ip, ip, #106496	; 0x1a000
   12880:	ldr	pc, [ip, #2128]!	; 0x850

00012884 <exit@plt>:
   12884:	add	ip, pc, #0, 12
   12888:	add	ip, ip, #106496	; 0x1a000
   1288c:	ldr	pc, [ip, #2120]!	; 0x848

00012890 <coda_type_get_read_type@plt>:
   12890:	add	ip, pc, #0, 12
   12894:	add	ip, ip, #106496	; 0x1a000
   12898:	ldr	pc, [ip, #2112]!	; 0x840

0001289c <coda_cursor_get_string_length@plt>:
   1289c:	add	ip, pc, #0, 12
   128a0:	add	ip, ip, #106496	; 0x1a000
   128a4:	ldr	pc, [ip, #2104]!	; 0x838

000128a8 <coda_cursor_read_uint64@plt>:
   128a8:	add	ip, pc, #0, 12
   128ac:	add	ip, ip, #106496	; 0x1a000
   128b0:	ldr	pc, [ip, #2096]!	; 0x830

000128b4 <coda_cursor_read_double@plt>:
   128b4:	add	ip, pc, #0, 12
   128b8:	add	ip, ip, #106496	; 0x1a000
   128bc:	ldr	pc, [ip, #2088]!	; 0x828

000128c0 <coda_isNaN@plt>:
   128c0:	add	ip, pc, #0, 12
   128c4:	add	ip, ip, #106496	; 0x1a000
   128c8:	ldr	pc, [ip, #2080]!	; 0x820

000128cc <fprintf@plt>:
   128cc:	add	ip, pc, #0, 12
   128d0:	add	ip, ip, #106496	; 0x1a000
   128d4:	ldr	pc, [ip, #2072]!	; 0x818

000128d8 <coda_cursor_goto_next_array_element@plt>:
   128d8:	add	ip, pc, #0, 12
   128dc:	add	ip, ip, #106496	; 0x1a000
   128e0:	ldr	pc, [ip, #2064]!	; 0x810

000128e4 <coda_open_as@plt>:
   128e4:	add	ip, pc, #0, 12
   128e8:	add	ip, ip, #106496	; 0x1a000
   128ec:	ldr	pc, [ip, #2056]!	; 0x808

000128f0 <coda_init@plt>:
   128f0:	add	ip, pc, #0, 12
   128f4:	add	ip, ip, #106496	; 0x1a000
   128f8:	ldr	pc, [ip, #2048]!	; 0x800

000128fc <coda_set_option_perform_conversions@plt>:
   128fc:	add	ip, pc, #0, 12
   12900:	add	ip, ip, #106496	; 0x1a000
   12904:	ldr	pc, [ip, #2040]!	; 0x7f8

00012908 <coda_cursor_goto_attributes@plt>:
   12908:	add	ip, pc, #0, 12
   1290c:	add	ip, ip, #106496	; 0x1a000
   12910:	ldr	pc, [ip, #2032]!	; 0x7f0

00012914 <coda_cursor_read_char@plt>:
   12914:	add	ip, pc, #0, 12
   12918:	add	ip, ip, #106496	; 0x1a000
   1291c:	ldr	pc, [ip, #2024]!	; 0x7e8

00012920 <memset@plt>:
   12920:	add	ip, pc, #0, 12
   12924:	add	ip, ip, #106496	; 0x1a000
   12928:	ldr	pc, [ip, #2016]!	; 0x7e0

0001292c <putchar@plt>:
   1292c:	add	ip, pc, #0, 12
   12930:	add	ip, ip, #106496	; 0x1a000
   12934:	ldr	pc, [ip, #2008]!	; 0x7d8

00012938 <strncpy@plt>:
   12938:	add	ip, pc, #0, 12
   1293c:	add	ip, ip, #106496	; 0x1a000
   12940:	ldr	pc, [ip, #2000]!	; 0x7d0

00012944 <coda_type_get_special_type@plt>:
   12944:	add	ip, pc, #0, 12
   12948:	add	ip, ip, #106496	; 0x1a000
   1294c:	ldr	pc, [ip, #1992]!	; 0x7c8

00012950 <coda_type_get_record_union_status@plt>:
   12950:	add	ip, pc, #0, 12
   12954:	add	ip, ip, #106496	; 0x1a000
   12958:	ldr	pc, [ip, #1984]!	; 0x7c0

0001295c <coda_cursor_read_complex_double_split@plt>:
   1295c:	add	ip, pc, #0, 12
   12960:	add	ip, ip, #106496	; 0x1a000
   12964:	ldr	pc, [ip, #1976]!	; 0x7b8

00012968 <coda_type_get_array_base_type@plt>:
   12968:	add	ip, pc, #0, 12
   1296c:	add	ip, ip, #106496	; 0x1a000
   12970:	ldr	pc, [ip, #1968]!	; 0x7b0

00012974 <fclose@plt>:
   12974:	add	ip, pc, #0, 12
   12978:	add	ip, ip, #106496	; 0x1a000
   1297c:	ldr	pc, [ip, #1960]!	; 0x7a8

00012980 <coda_type_get_string_length@plt>:
   12980:	add	ip, pc, #0, 12
   12984:	add	ip, ip, #106496	; 0x1a000
   12988:	ldr	pc, [ip, #1952]!	; 0x7a0

0001298c <coda_type_get_native_type_name@plt>:
   1298c:	add	ip, pc, #0, 12
   12990:	add	ip, ip, #106496	; 0x1a000
   12994:	ldr	pc, [ip, #1944]!	; 0x798

00012998 <coda_cursor_get_array_dim@plt>:
   12998:	add	ip, pc, #0, 12
   1299c:	add	ip, ip, #106496	; 0x1a000
   129a0:	ldr	pc, [ip, #1936]!	; 0x790

000129a4 <coda_cursor_has_ascii_content@plt>:
   129a4:	add	ip, pc, #0, 12
   129a8:	add	ip, ip, #106496	; 0x1a000
   129ac:	ldr	pc, [ip, #1928]!	; 0x788

000129b0 <coda_close@plt>:
   129b0:	add	ip, pc, #0, 12
   129b4:	add	ip, ip, #106496	; 0x1a000
   129b8:	ldr	pc, [ip, #1920]!	; 0x780

000129bc <coda_cursor_read_int64@plt>:
   129bc:	add	ip, pc, #0, 12
   129c0:	add	ip, ip, #106496	; 0x1a000
   129c4:	ldr	pc, [ip, #1912]!	; 0x778

000129c8 <vfprintf@plt>:
   129c8:	add	ip, pc, #0, 12
   129cc:	add	ip, ip, #106496	; 0x1a000
   129d0:	ldr	pc, [ip, #1904]!	; 0x770

000129d4 <coda_cursor_goto@plt>:
   129d4:	add	ip, pc, #0, 12
   129d8:	add	ip, ip, #106496	; 0x1a000
   129dc:	ldr	pc, [ip, #1896]!	; 0x768

000129e0 <coda_type_get_record_field_index_from_name@plt>:
   129e0:	add	ip, pc, #0, 12
   129e4:	add	ip, ip, #106496	; 0x1a000
   129e8:	ldr	pc, [ip, #1888]!	; 0x760

000129ec <coda_cursor_read_complex_double_pair@plt>:
   129ec:	add	ip, pc, #0, 12
   129f0:	add	ip, ip, #106496	; 0x1a000
   129f4:	ldr	pc, [ip, #1880]!	; 0x758

000129f8 <coda_cursor_goto_next_record_field@plt>:
   129f8:	add	ip, pc, #0, 12
   129fc:	add	ip, ip, #106496	; 0x1a000
   12a00:	ldr	pc, [ip, #1872]!	; 0x750

00012a04 <fputc@plt>:
   12a04:	add	ip, pc, #0, 12
   12a08:	add	ip, ip, #106496	; 0x1a000
   12a0c:	ldr	pc, [ip, #1864]!	; 0x748

00012a10 <coda_type_get_array_dim@plt>:
   12a10:	add	ip, pc, #0, 12
   12a14:	add	ip, ip, #106496	; 0x1a000
   12a18:	ldr	pc, [ip, #1856]!	; 0x740

00012a1c <coda_cursor_get_bit_size@plt>:
   12a1c:	add	ip, pc, #0, 12
   12a20:	add	ip, ip, #106496	; 0x1a000
   12a24:	ldr	pc, [ip, #1848]!	; 0x738

00012a28 <coda_errno_to_string@plt>:
   12a28:	add	ip, pc, #0, 12
   12a2c:	add	ip, ip, #106496	; 0x1a000
   12a30:	ldr	pc, [ip, #1840]!	; 0x730

00012a34 <coda_cursor_use_base_type_of_special_type@plt>:
   12a34:	add	ip, pc, #0, 12
   12a38:	add	ip, ip, #106496	; 0x1a000
   12a3c:	ldr	pc, [ip, #1832]!	; 0x728

00012a40 <coda_cursor_get_available_union_field_index@plt>:
   12a40:	add	ip, pc, #0, 12
   12a44:	add	ip, ip, #106496	; 0x1a000
   12a48:	ldr	pc, [ip, #1824]!	; 0x720

00012a4c <coda_cursor_read_int32@plt>:
   12a4c:	add	ip, pc, #0, 12
   12a50:	add	ip, ip, #106496	; 0x1a000
   12a54:	ldr	pc, [ip, #1816]!	; 0x718

00012a58 <coda_cursor_get_file_bit_offset@plt>:
   12a58:	add	ip, pc, #0, 12
   12a5c:	add	ip, ip, #106496	; 0x1a000
   12a60:	ldr	pc, [ip, #1808]!	; 0x710

00012a64 <coda_get_libcoda_version@plt>:
   12a64:	add	ip, pc, #0, 12
   12a68:	add	ip, ip, #106496	; 0x1a000
   12a6c:	ldr	pc, [ip, #1800]!	; 0x708

00012a70 <coda_get_errno@plt>:
   12a70:	add	ip, pc, #0, 12
   12a74:	add	ip, ip, #106496	; 0x1a000
   12a78:	ldr	pc, [ip, #1792]!	; 0x700

00012a7c <coda_type_get_special_base_type@plt>:
   12a7c:	add	ip, pc, #0, 12
   12a80:	add	ip, ip, #106496	; 0x1a000
   12a84:	ldr	pc, [ip, #1784]!	; 0x6f8

00012a88 <coda_type_get_record_field_name@plt>:
   12a88:	add	ip, pc, #0, 12
   12a8c:	add	ip, ip, #106496	; 0x1a000
   12a90:	ldr	pc, [ip, #1776]!	; 0x6f0

00012a94 <fputs@plt>:
   12a94:	add	ip, pc, #0, 12
   12a98:	add	ip, ip, #106496	; 0x1a000
   12a9c:	ldr	pc, [ip, #1768]!	; 0x6e8

00012aa0 <abort@plt>:
   12aa0:	add	ip, pc, #0, 12
   12aa4:	add	ip, ip, #106496	; 0x1a000
   12aa8:	ldr	pc, [ip, #1760]!	; 0x6e0

00012aac <coda_cursor_read_bits@plt>:
   12aac:	add	ip, pc, #0, 12
   12ab0:	add	ip, ip, #106496	; 0x1a000
   12ab4:	ldr	pc, [ip, #1752]!	; 0x6d8

00012ab8 <coda_str64@plt>:
   12ab8:	add	ip, pc, #0, 12
   12abc:	add	ip, ip, #106496	; 0x1a000
   12ac0:	ldr	pc, [ip, #1744]!	; 0x6d0

00012ac4 <__assert_fail@plt>:
   12ac4:	add	ip, pc, #0, 12
   12ac8:	add	ip, ip, #106496	; 0x1a000
   12acc:	ldr	pc, [ip, #1736]!	; 0x6c8

00012ad0 <coda_type_get_class@plt>:
   12ad0:	add	ip, pc, #0, 12
   12ad4:	add	ip, ip, #106496	; 0x1a000
   12ad8:	ldr	pc, [ip, #1728]!	; 0x6c0

Disassembly of section .text:

00012adc <_start@@Base>:
   12adc:	mov	fp, #0
   12ae0:	mov	lr, #0
   12ae4:	pop	{r1}		; (ldr r1, [sp], #4)
   12ae8:	mov	r2, sp
   12aec:	push	{r2}		; (str r2, [sp, #-4]!)
   12af0:	push	{r0}		; (str r0, [sp, #-4]!)
   12af4:	ldr	ip, [pc, #16]	; 12b0c <_start@@Base+0x30>
   12af8:	push	{ip}		; (str ip, [sp, #-4]!)
   12afc:	ldr	r0, [pc, #12]	; 12b10 <_start@@Base+0x34>
   12b00:	ldr	r3, [pc, #12]	; 12b14 <_start@@Base+0x38>
   12b04:	bl	12848 <__libc_start_main@plt>
   12b08:	bl	12aa0 <abort@plt>
   12b0c:	andeq	sl, r1, r4, ror #9
   12b10:	andeq	r8, r1, ip, lsr #13
   12b14:	andeq	sl, r1, r4, lsl #9
   12b18:	ldr	r3, [pc, #20]	; 12b34 <_start@@Base+0x58>
   12b1c:	ldr	r2, [pc, #20]	; 12b38 <_start@@Base+0x5c>
   12b20:	add	r3, pc, r3
   12b24:	ldr	r2, [r3, r2]
   12b28:	cmp	r2, #0
   12b2c:	bxeq	lr
   12b30:	b	12854 <__gmon_start__@plt>
   12b34:	ldrdeq	sl, [r1], -r8
   12b38:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   12b3c:	ldr	r0, [pc, #24]	; 12b5c <_start@@Base+0x80>
   12b40:	ldr	r3, [pc, #24]	; 12b60 <_start@@Base+0x84>
   12b44:	cmp	r3, r0
   12b48:	bxeq	lr
   12b4c:	ldr	r3, [pc, #16]	; 12b64 <_start@@Base+0x88>
   12b50:	cmp	r3, #0
   12b54:	bxeq	lr
   12b58:	bx	r3
   12b5c:	andeq	sp, r2, r0, lsl #4
   12b60:	andeq	sp, r2, r0, lsl #4
   12b64:	andeq	r0, r0, r0
   12b68:	ldr	r0, [pc, #36]	; 12b94 <_start@@Base+0xb8>
   12b6c:	ldr	r1, [pc, #36]	; 12b98 <_start@@Base+0xbc>
   12b70:	sub	r1, r1, r0
   12b74:	asr	r1, r1, #2
   12b78:	add	r1, r1, r1, lsr #31
   12b7c:	asrs	r1, r1, #1
   12b80:	bxeq	lr
   12b84:	ldr	r3, [pc, #16]	; 12b9c <_start@@Base+0xc0>
   12b88:	cmp	r3, #0
   12b8c:	bxeq	lr
   12b90:	bx	r3
   12b94:	andeq	sp, r2, r0, lsl #4
   12b98:	andeq	sp, r2, r0, lsl #4
   12b9c:	andeq	r0, r0, r0
   12ba0:	push	{r4, lr}
   12ba4:	ldr	r4, [pc, #24]	; 12bc4 <_start@@Base+0xe8>
   12ba8:	ldrb	r3, [r4]
   12bac:	cmp	r3, #0
   12bb0:	popne	{r4, pc}
   12bb4:	bl	12b3c <_start@@Base+0x60>
   12bb8:	mov	r3, #1
   12bbc:	strb	r3, [r4]
   12bc0:	pop	{r4, pc}
   12bc4:	andeq	sp, r2, r0, lsl #4
   12bc8:	b	12b68 <_start@@Base+0x8c>

00012bcc <export_data_element_to_ascii@@Base>:
   12bcc:	push	{r4, sl, fp, lr}
   12bd0:	add	fp, sp, #8
   12bd4:	ldr	r0, [pc, #172]	; 12c88 <export_data_element_to_ascii@@Base+0xbc>
   12bd8:	add	r0, pc, r0
   12bdc:	ldrb	r1, [r0]
   12be0:	cmp	r1, #0
   12be4:	beq	12c00 <export_data_element_to_ascii@@Base+0x34>
   12be8:	ldr	r0, [pc, #156]	; 12c8c <export_data_element_to_ascii@@Base+0xc0>
   12bec:	ldr	r0, [pc, r0]
   12bf0:	ldr	r1, [r0]
   12bf4:	mov	r0, #10
   12bf8:	bl	12a04 <fputc@plt>
   12bfc:	b	12c08 <export_data_element_to_ascii@@Base+0x3c>
   12c00:	mov	r1, #1
   12c04:	strb	r1, [r0]
   12c08:	ldr	r0, [pc, #128]	; 12c90 <export_data_element_to_ascii@@Base+0xc4>
   12c0c:	ldr	r0, [pc, r0]
   12c10:	ldr	r0, [r0]
   12c14:	cmp	r0, #0
   12c18:	beq	12c40 <export_data_element_to_ascii@@Base+0x74>
   12c1c:	ldr	r4, [pc, #112]	; 12c94 <export_data_element_to_ascii@@Base+0xc8>
   12c20:	mov	r1, #2
   12c24:	mov	r2, #0
   12c28:	ldr	r4, [pc, r4]
   12c2c:	ldr	r0, [r4]
   12c30:	bl	16bd0 <print_full_field_name@@Base>
   12c34:	ldr	r1, [r4]
   12c38:	mov	r0, #10
   12c3c:	bl	12a04 <fputc@plt>
   12c40:	ldr	r0, [pc, #80]	; 12c98 <export_data_element_to_ascii@@Base+0xcc>
   12c44:	ldr	r0, [pc, r0]
   12c48:	ldr	r1, [r0]
   12c4c:	cmp	r1, #1
   12c50:	blt	12c68 <export_data_element_to_ascii@@Base+0x9c>
   12c54:	add	r0, r0, r1, lsl #3
   12c58:	ldr	r1, [r0, #296]	; 0x128
   12c5c:	ldr	r0, [r0, #300]	; 0x12c
   12c60:	orrs	r0, r1, r0
   12c64:	popeq	{r4, sl, fp, pc}
   12c68:	ldr	r0, [pc, #44]	; 12c9c <export_data_element_to_ascii@@Base+0xd0>
   12c6c:	mov	r1, #0
   12c70:	mov	r2, #0
   12c74:	mov	r3, #0
   12c78:	ldr	r0, [pc, r0]
   12c7c:	ldr	r0, [r0]
   12c80:	pop	{r4, sl, fp, lr}
   12c84:	b	12ca0 <export_data_element_to_ascii@@Base+0xd4>
   12c88:	andeq	sl, r1, r4, lsr #12
   12c8c:	andeq	sl, r1, r8, asr #11
   12c90:	ldrdeq	sl, [r1], -r4
   12c94:	andeq	sl, r1, ip, lsl #11
   12c98:	muleq	r1, r8, r5
   12c9c:	andeq	sl, r1, ip, lsr r5
   12ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ca4:	add	fp, sp, #28
   12ca8:	sub	sp, sp, #124	; 0x7c
   12cac:	str	r3, [sp, #60]	; 0x3c
   12cb0:	str	r2, [sp, #48]	; 0x30
   12cb4:	mov	r8, r0
   12cb8:	mov	r6, r1
   12cbc:	ldr	sl, [pc, #2508]	; 13690 <export_data_element_to_ascii@@Base+0xac4>
   12cc0:	ldr	sl, [pc, sl]
   12cc4:	add	r5, sl, r1, lsl #2
   12cc8:	sub	r1, fp, #52	; 0x34
   12ccc:	ldr	r0, [r5, #8]!
   12cd0:	bl	12ad0 <coda_type_get_class@plt>
   12cd4:	cmp	r0, #0
   12cd8:	beq	12ce0 <export_data_element_to_ascii@@Base+0x114>
   12cdc:	bl	18660 <handle_coda_error@@Base>
   12ce0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12ce4:	cmp	r0, #0
   12ce8:	beq	12dd4 <export_data_element_to_ascii@@Base+0x208>
   12cec:	cmp	r0, #1
   12cf0:	bne	12e40 <export_data_element_to_ascii@@Base+0x274>
   12cf4:	ldr	r2, [sp, #48]	; 0x30
   12cf8:	str	r6, [sp, #20]
   12cfc:	str	r8, [sp, #24]
   12d00:	add	r0, r2, r2, lsl #2
   12d04:	cmp	r2, #0
   12d08:	add	r9, sl, r0, lsl #4
   12d0c:	moveq	r0, #0
   12d10:	ldr	r1, [r9, #800]	; 0x320
   12d14:	streq	r0, [sl, #844]	; 0x34c
   12d18:	mov	r2, r9
   12d1c:	ldr	r0, [r2, #804]!	; 0x324
   12d20:	str	r2, [sp, #32]
   12d24:	add	r3, r0, r1
   12d28:	ldr	r2, [pc, #2404]	; 13694 <export_data_element_to_ascii@@Base+0xac8>
   12d2c:	ldr	r2, [pc, r2]
   12d30:	str	r3, [sp, #40]	; 0x28
   12d34:	ldr	r7, [r2, #104]	; 0x68
   12d38:	cmp	r7, r3
   12d3c:	str	r7, [sp, #36]	; 0x24
   12d40:	blt	12d64 <export_data_element_to_ascii@@Base+0x198>
   12d44:	ldr	r3, [sl, #3360]	; 0xd20
   12d48:	ldr	r7, [sp, #48]	; 0x30
   12d4c:	sub	r3, r3, #1
   12d50:	cmp	r3, r7
   12d54:	ldrgt	r3, [r9, #840]	; 0x348
   12d58:	ldrgt	r7, [r9, #844]	; 0x34c
   12d5c:	mulgt	r3, r3, r7
   12d60:	strgt	r3, [r9, #924]	; 0x39c
   12d64:	cmp	r0, #1
   12d68:	blt	12fdc <export_data_element_to_ascii@@Base+0x410>
   12d6c:	add	r1, r2, r1, lsl #2
   12d70:	add	r2, r9, #848	; 0x350
   12d74:	add	r3, r9, #844	; 0x34c
   12d78:	mov	r8, #1
   12d7c:	mov	ip, #0
   12d80:	add	r5, sp, #64	; 0x40
   12d84:	mov	r4, #0
   12d88:	add	r6, r1, r4
   12d8c:	ldr	r7, [r6, #72]	; 0x48
   12d90:	cmp	r7, #0
   12d94:	beq	12da8 <export_data_element_to_ascii@@Base+0x1dc>
   12d98:	ldr	r7, [r6, #108]	; 0x6c
   12d9c:	ldr	r6, [r3]
   12da0:	add	r6, r7, r6, lsl #2
   12da4:	b	12dac <export_data_element_to_ascii@@Base+0x1e0>
   12da8:	add	r6, r6, #4
   12dac:	ldr	r7, [r6]
   12db0:	str	ip, [r2, r4]
   12db4:	subs	r0, r0, #1
   12db8:	str	r7, [r5, r4]
   12dbc:	mul	r8, r7, r8
   12dc0:	add	r4, r4, #4
   12dc4:	bne	12d88 <export_data_element_to_ascii@@Base+0x1bc>
   12dc8:	cmp	r8, #0
   12dcc:	bne	12fe0 <export_data_element_to_ascii@@Base+0x414>
   12dd0:	b	1363c <export_data_element_to_ascii@@Base+0xa70>
   12dd4:	ldr	r0, [sp, #60]	; 0x3c
   12dd8:	add	r5, sl, #144	; 0x90
   12ddc:	add	r2, sp, #64	; 0x40
   12de0:	add	r7, sl, r0, lsl #2
   12de4:	mov	r0, r5
   12de8:	ldr	r1, [r7, #3492]!	; 0xda4
   12dec:	bl	126a4 <coda_cursor_get_record_field_available_status@plt>
   12df0:	cmp	r0, #0
   12df4:	beq	12dfc <export_data_element_to_ascii@@Base+0x230>
   12df8:	bl	18660 <handle_coda_error@@Base>
   12dfc:	ldr	r0, [sp, #64]	; 0x40
   12e00:	cmp	r0, #0
   12e04:	beq	1363c <export_data_element_to_ascii@@Base+0xa70>
   12e08:	ldr	r1, [r7]
   12e0c:	mov	r0, r5
   12e10:	bl	1280c <coda_cursor_goto_record_field_by_index@plt>
   12e14:	cmp	r0, #0
   12e18:	beq	12e20 <export_data_element_to_ascii@@Base+0x254>
   12e1c:	bl	18660 <handle_coda_error@@Base>
   12e20:	ldr	r0, [sp, #60]	; 0x3c
   12e24:	ldr	r2, [sp, #48]	; 0x30
   12e28:	add	r1, r6, #1
   12e2c:	add	r3, r0, #1
   12e30:	mov	r0, r8
   12e34:	bl	12ca0 <export_data_element_to_ascii@@Base+0xd4>
   12e38:	mov	r0, r5
   12e3c:	b	13110 <export_data_element_to_ascii@@Base+0x544>
   12e40:	str	r5, [sp, #56]	; 0x38
   12e44:	ldr	r0, [pc, #2136]	; 136a4 <export_data_element_to_ascii@@Base+0xad8>
   12e48:	ldr	r0, [pc, r0]
   12e4c:	ldr	r0, [r0]
   12e50:	cmp	r0, #0
   12e54:	beq	12f1c <export_data_element_to_ascii@@Base+0x350>
   12e58:	ldr	r0, [sl, #136]	; 0x88
   12e5c:	cmp	r0, #1
   12e60:	blt	12f1c <export_data_element_to_ascii@@Base+0x350>
   12e64:	ldr	r5, [pc, #2108]	; 136a8 <export_data_element_to_ascii@@Base+0xadc>
   12e68:	mov	r7, #0
   12e6c:	add	r4, sp, #64	; 0x40
   12e70:	mov	r9, #0
   12e74:	ldr	r5, [pc, r5]
   12e78:	ldr	r6, [pc, #2092]	; 136ac <export_data_element_to_ascii@@Base+0xae0>
   12e7c:	add	r6, pc, r6
   12e80:	add	r0, sl, r7, lsl #2
   12e84:	mov	r1, r4
   12e88:	ldr	r0, [r0, #8]
   12e8c:	bl	12ad0 <coda_type_get_class@plt>
   12e90:	cmp	r0, #0
   12e94:	beq	12e9c <export_data_element_to_ascii@@Base+0x2d0>
   12e98:	bl	18660 <handle_coda_error@@Base>
   12e9c:	ldr	r0, [sp, #64]	; 0x40
   12ea0:	cmp	r0, #1
   12ea4:	bne	12f0c <export_data_element_to_ascii@@Base+0x340>
   12ea8:	add	r0, r9, r9, lsl #2
   12eac:	str	r9, [sp, #60]	; 0x3c
   12eb0:	add	r0, sl, r0, lsl #4
   12eb4:	mov	sl, r8
   12eb8:	mov	r4, r0
   12ebc:	ldr	r1, [r4, #804]!	; 0x324
   12ec0:	cmp	r1, #1
   12ec4:	blt	12ef4 <export_data_element_to_ascii@@Base+0x328>
   12ec8:	add	r8, r0, #848	; 0x350
   12ecc:	mov	r9, #0
   12ed0:	ldr	r2, [r8, r9, lsl #2]
   12ed4:	ldr	r3, [r5]
   12ed8:	mov	r0, sl
   12edc:	mov	r1, r6
   12ee0:	bl	128cc <fprintf@plt>
   12ee4:	ldr	r0, [r4]
   12ee8:	add	r9, r9, #1
   12eec:	cmp	r9, r0
   12ef0:	blt	12ed0 <export_data_element_to_ascii@@Base+0x304>
   12ef4:	ldr	r9, [sp, #60]	; 0x3c
   12ef8:	mov	r8, sl
   12efc:	ldr	sl, [pc, #1964]	; 136b0 <export_data_element_to_ascii@@Base+0xae4>
   12f00:	add	r4, sp, #64	; 0x40
   12f04:	ldr	sl, [pc, sl]
   12f08:	add	r9, r9, #1
   12f0c:	ldr	r0, [sl, #136]	; 0x88
   12f10:	add	r7, r7, #1
   12f14:	cmp	r7, r0
   12f18:	blt	12e80 <export_data_element_to_ascii@@Base+0x2b4>
   12f1c:	ldr	r5, [sp, #56]	; 0x38
   12f20:	sub	r1, fp, #32
   12f24:	ldr	r0, [r5]
   12f28:	bl	12ad0 <coda_type_get_class@plt>
   12f2c:	cmp	r0, #0
   12f30:	beq	12f38 <export_data_element_to_ascii@@Base+0x36c>
   12f34:	bl	18660 <handle_coda_error@@Base>
   12f38:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12f3c:	sub	r1, r0, #2
   12f40:	cmp	r1, #4
   12f44:	bcs	1311c <export_data_element_to_ascii@@Base+0x550>
   12f48:	ldr	r0, [r5]
   12f4c:	sub	r1, fp, #36	; 0x24
   12f50:	bl	12890 <coda_type_get_read_type@plt>
   12f54:	cmp	r0, #0
   12f58:	beq	12f60 <export_data_element_to_ascii@@Base+0x394>
   12f5c:	bl	18660 <handle_coda_error@@Base>
   12f60:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12f64:	add	r0, r0, #1
   12f68:	cmp	r0, #13
   12f6c:	bhi	13630 <export_data_element_to_ascii@@Base+0xa64>
   12f70:	add	r1, pc, #4
   12f74:	ldr	r0, [r1, r0, lsl #2]
   12f78:	add	pc, r1, r0
   12f7c:	strdeq	r0, [r0], -r4
   12f80:	andeq	r0, r0, r8, lsr r0
   12f84:	muleq	r0, r4, r2
   12f88:	andeq	r0, r0, r8, lsr r0
   12f8c:	muleq	r0, r4, r2
   12f90:	andeq	r0, r0, r8, lsr r0
   12f94:	muleq	r0, r4, r2
   12f98:	andeq	r0, r0, r8, asr #6
   12f9c:	strdeq	r0, [r0], -ip
   12fa0:	andeq	r0, r0, r4, asr #5
   12fa4:	andeq	r0, r0, r4, asr #5
   12fa8:	andeq	r0, r0, r8, lsr r6
   12fac:	andeq	r0, r0, r8, ror r3
   12fb0:	andeq	r0, r0, r8, lsr #8
   12fb4:	add	r0, sl, #144	; 0x90
   12fb8:	add	r1, sp, #64	; 0x40
   12fbc:	bl	12a4c <coda_cursor_read_int32@plt>
   12fc0:	cmp	r0, #0
   12fc4:	beq	12fcc <export_data_element_to_ascii@@Base+0x400>
   12fc8:	bl	18660 <handle_coda_error@@Base>
   12fcc:	ldr	r2, [sp, #64]	; 0x40
   12fd0:	ldr	r1, [pc, #1836]	; 13704 <export_data_element_to_ascii@@Base+0xb38>
   12fd4:	add	r1, pc, r1
   12fd8:	b	13234 <export_data_element_to_ascii@@Base+0x668>
   12fdc:	mov	r8, #1
   12fe0:	ldr	r0, [pc, #1712]	; 13698 <export_data_element_to_ascii@@Base+0xacc>
   12fe4:	ldr	r0, [pc, r0]
   12fe8:	add	r0, r0, #144	; 0x90
   12fec:	str	r0, [sp, #44]	; 0x2c
   12ff0:	bl	127dc <coda_cursor_goto_first_array_element@plt>
   12ff4:	cmp	r0, #0
   12ff8:	beq	13000 <export_data_element_to_ascii@@Base+0x434>
   12ffc:	bl	18660 <handle_coda_error@@Base>
   13000:	ldr	r4, [sp, #24]
   13004:	cmp	r8, #1
   13008:	blt	1310c <export_data_element_to_ascii@@Base+0x540>
   1300c:	add	r0, r9, #924	; 0x39c
   13010:	mov	r7, #0
   13014:	mov	r5, #0
   13018:	str	r0, [sp, #28]
   1301c:	add	r0, sp, #64	; 0x40
   13020:	sub	sl, r0, #4
   13024:	sub	r0, r8, #1
   13028:	str	r0, [sp, #56]	; 0x38
   1302c:	ldr	r0, [sp, #48]	; 0x30
   13030:	add	r0, r0, #1
   13034:	str	r0, [sp, #52]	; 0x34
   13038:	ldr	r0, [sp, #20]
   1303c:	add	r6, r0, #1
   13040:	ldr	r2, [sp, #52]	; 0x34
   13044:	ldr	r3, [sp, #60]	; 0x3c
   13048:	mov	r0, r4
   1304c:	mov	r1, r6
   13050:	bl	12ca0 <export_data_element_to_ascii@@Base+0xd4>
   13054:	ldr	r0, [sp, #56]	; 0x38
   13058:	cmp	r5, r0
   1305c:	bge	13100 <export_data_element_to_ascii@@Base+0x534>
   13060:	ldr	r0, [sp, #44]	; 0x2c
   13064:	bl	128d8 <coda_cursor_goto_next_array_element@plt>
   13068:	cmp	r0, #0
   1306c:	beq	13074 <export_data_element_to_ascii@@Base+0x4a8>
   13070:	bl	18660 <handle_coda_error@@Base>
   13074:	ldr	r0, [sp, #40]	; 0x28
   13078:	ldr	r1, [sp, #36]	; 0x24
   1307c:	cmp	r1, r0
   13080:	blt	130ac <export_data_element_to_ascii@@Base+0x4e0>
   13084:	ldr	r0, [pc, #1552]	; 1369c <export_data_element_to_ascii@@Base+0xad0>
   13088:	ldr	r0, [pc, r0]
   1308c:	ldr	r1, [sp, #48]	; 0x30
   13090:	ldr	r0, [r0, #3360]	; 0xd20
   13094:	sub	r0, r0, #1
   13098:	cmp	r0, r1
   1309c:	ldrgt	r1, [sp, #28]
   130a0:	ldrgt	r0, [r1]
   130a4:	addgt	r0, r0, #1
   130a8:	strgt	r0, [r1]
   130ac:	ldr	r0, [pc, #1516]	; 136a0 <export_data_element_to_ascii@@Base+0xad4>
   130b0:	ldr	r0, [pc, r0]
   130b4:	ldr	r0, [r0]
   130b8:	cmp	r0, #0
   130bc:	beq	13100 <export_data_element_to_ascii@@Base+0x534>
   130c0:	ldr	r0, [sp, #32]
   130c4:	ldr	r0, [r0]
   130c8:	cmp	r0, #1
   130cc:	blt	13100 <export_data_element_to_ascii@@Base+0x534>
   130d0:	add	r1, r9, r0, lsl #2
   130d4:	ldr	r3, [sl, r0, lsl #2]
   130d8:	ldr	r2, [r1, #844]	; 0x34c
   130dc:	add	r2, r2, #1
   130e0:	cmp	r2, r3
   130e4:	str	r2, [r1, #844]	; 0x34c
   130e8:	bne	13100 <export_data_element_to_ascii@@Base+0x534>
   130ec:	sub	r0, r0, #1
   130f0:	str	r7, [r1, #844]	; 0x34c
   130f4:	add	r1, r0, #1
   130f8:	cmp	r1, #1
   130fc:	bgt	130d0 <export_data_element_to_ascii@@Base+0x504>
   13100:	add	r5, r5, #1
   13104:	cmp	r5, r8
   13108:	bne	13040 <export_data_element_to_ascii@@Base+0x474>
   1310c:	ldr	r0, [sp, #44]	; 0x2c
   13110:	bl	1286c <coda_cursor_goto_parent@plt>
   13114:	sub	sp, fp, #28
   13118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1311c:	cmp	r0, #6
   13120:	beq	1314c <export_data_element_to_ascii@@Base+0x580>
   13124:	cmp	r0, #2
   13128:	bcs	13630 <export_data_element_to_ascii@@Base+0xa64>
   1312c:	ldr	r0, [pc, #1408]	; 136b4 <export_data_element_to_ascii@@Base+0xae8>
   13130:	ldr	r1, [pc, #1408]	; 136b8 <export_data_element_to_ascii@@Base+0xaec>
   13134:	ldr	r3, [pc, #1408]	; 136bc <export_data_element_to_ascii@@Base+0xaf0>
   13138:	mov	r2, #368	; 0x170
   1313c:	add	r0, pc, r0
   13140:	add	r1, pc, r1
   13144:	add	r3, pc, r3
   13148:	bl	12ac4 <__assert_fail@plt>
   1314c:	ldr	r0, [r5]
   13150:	sub	r1, fp, #36	; 0x24
   13154:	bl	12944 <coda_type_get_special_type@plt>
   13158:	cmp	r0, #0
   1315c:	beq	13164 <export_data_element_to_ascii@@Base+0x598>
   13160:	bl	18660 <handle_coda_error@@Base>
   13164:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13168:	sub	r1, r0, #1
   1316c:	cmp	r1, #2
   13170:	bcs	13278 <export_data_element_to_ascii@@Base+0x6ac>
   13174:	add	r0, sl, #144	; 0x90
   13178:	sub	r1, fp, #48	; 0x30
   1317c:	bl	128b4 <coda_cursor_read_double@plt>
   13180:	cmp	r0, #0
   13184:	beq	1318c <export_data_element_to_ascii@@Base+0x5c0>
   13188:	bl	18660 <handle_coda_error@@Base>
   1318c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13190:	cmp	r0, #2
   13194:	bne	135f0 <export_data_element_to_ascii@@Base+0xa24>
   13198:	ldr	r0, [pc, #1412]	; 13724 <export_data_element_to_ascii@@Base+0xb58>
   1319c:	ldr	r0, [pc, r0]
   131a0:	ldr	r0, [r0]
   131a4:	cmp	r0, #0
   131a8:	beq	135f0 <export_data_element_to_ascii@@Base+0xa24>
   131ac:	vldr	d0, [fp, #-48]	; 0xffffffd0
   131b0:	bl	128c0 <coda_isNaN@plt>
   131b4:	cmp	r0, #0
   131b8:	bne	131cc <export_data_element_to_ascii@@Base+0x600>
   131bc:	vldr	d0, [fp, #-48]	; 0xffffffd0
   131c0:	bl	12764 <coda_isInf@plt>
   131c4:	cmp	r0, #0
   131c8:	beq	1364c <export_data_element_to_ascii@@Base+0xa80>
   131cc:	ldr	r1, [pc, #1364]	; 13728 <export_data_element_to_ascii@@Base+0xb5c>
   131d0:	mov	r0, #11
   131d4:	add	r1, pc, r1
   131d8:	vld1.64	{d16-d17}, [r1], r0
   131dc:	vld1.8	{d18-d19}, [r1]
   131e0:	add	r1, sp, #64	; 0x40
   131e4:	vst1.64	{d16-d17}, [r1], r0
   131e8:	vst1.8	{d18-d19}, [r1]
   131ec:	ldr	r0, [pc, #1340]	; 13730 <export_data_element_to_ascii@@Base+0xb64>
   131f0:	ldr	r0, [pc, r0]
   131f4:	ldr	r0, [r0]
   131f8:	cmp	r0, #0
   131fc:	beq	13644 <export_data_element_to_ascii@@Base+0xa78>
   13200:	ldr	r1, [pc, #1324]	; 13734 <export_data_element_to_ascii@@Base+0xb68>
   13204:	add	r2, sp, #64	; 0x40
   13208:	add	r1, pc, r1
   1320c:	b	13234 <export_data_element_to_ascii@@Base+0x668>
   13210:	add	r0, sl, #144	; 0x90
   13214:	add	r1, sp, #64	; 0x40
   13218:	bl	12728 <coda_cursor_read_uint32@plt>
   1321c:	cmp	r0, #0
   13220:	beq	13228 <export_data_element_to_ascii@@Base+0x65c>
   13224:	bl	18660 <handle_coda_error@@Base>
   13228:	ldr	r2, [sp, #64]	; 0x40
   1322c:	ldr	r1, [pc, #1236]	; 13708 <export_data_element_to_ascii@@Base+0xb3c>
   13230:	add	r1, pc, r1
   13234:	mov	r0, r8
   13238:	bl	128cc <fprintf@plt>
   1323c:	b	13630 <export_data_element_to_ascii@@Base+0xa64>
   13240:	add	r0, sl, #144	; 0x90
   13244:	add	r1, sp, #64	; 0x40
   13248:	bl	128b4 <coda_cursor_read_double@plt>
   1324c:	cmp	r0, #0
   13250:	beq	13258 <export_data_element_to_ascii@@Base+0x68c>
   13254:	bl	18660 <handle_coda_error@@Base>
   13258:	vldr	d16, [sp, #64]	; 0x40
   1325c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13260:	vmov	r2, r3, d16
   13264:	cmp	r0, #8
   13268:	bne	135f8 <export_data_element_to_ascii@@Base+0xa2c>
   1326c:	ldr	r1, [pc, #1176]	; 1370c <export_data_element_to_ascii@@Base+0xb40>
   13270:	add	r1, pc, r1
   13274:	b	13600 <export_data_element_to_ascii@@Base+0xa34>
   13278:	cmp	r0, #3
   1327c:	bne	13630 <export_data_element_to_ascii@@Base+0xa64>
   13280:	add	r0, sl, #144	; 0x90
   13284:	add	r1, sp, #64	; 0x40
   13288:	bl	129ec <coda_cursor_read_complex_double_pair@plt>
   1328c:	cmp	r0, #0
   13290:	beq	13298 <export_data_element_to_ascii@@Base+0x6cc>
   13294:	bl	18660 <handle_coda_error@@Base>
   13298:	ldr	r0, [pc, #1148]	; 1371c <export_data_element_to_ascii@@Base+0xb50>
   1329c:	ldr	r0, [pc, r0]
   132a0:	vldr	d17, [sp, #72]	; 0x48
   132a4:	vldr	d16, [sp, #64]	; 0x40
   132a8:	ldr	r0, [r0]
   132ac:	vstr	d17, [sp, #8]
   132b0:	vmov	r2, r3, d16
   132b4:	str	r0, [sp]
   132b8:	ldr	r1, [pc, #1120]	; 13720 <export_data_element_to_ascii@@Base+0xb54>
   132bc:	add	r1, pc, r1
   132c0:	b	13600 <export_data_element_to_ascii@@Base+0xa34>
   132c4:	add	r0, sl, #144	; 0x90
   132c8:	sub	r1, fp, #48	; 0x30
   132cc:	bl	129bc <coda_cursor_read_int64@plt>
   132d0:	cmp	r0, #0
   132d4:	beq	132dc <export_data_element_to_ascii@@Base+0x710>
   132d8:	bl	18660 <handle_coda_error@@Base>
   132dc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   132e0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   132e4:	add	r5, sp, #64	; 0x40
   132e8:	mov	r2, r5
   132ec:	bl	12ab8 <coda_str64@plt>
   132f0:	b	135a4 <export_data_element_to_ascii@@Base+0x9d8>
   132f4:	add	r6, sl, #144	; 0x90
   132f8:	add	r1, sp, #64	; 0x40
   132fc:	mov	r0, r6
   13300:	bl	1289c <coda_cursor_get_string_length@plt>
   13304:	cmp	r0, #0
   13308:	beq	13310 <export_data_element_to_ascii@@Base+0x744>
   1330c:	bl	18660 <handle_coda_error@@Base>
   13310:	ldr	r0, [sp, #64]	; 0x40
   13314:	add	r7, r0, #1
   13318:	mov	r0, r7
   1331c:	bl	1283c <malloc@plt>
   13320:	mov	r5, r0
   13324:	cmp	r0, #0
   13328:	bne	1335c <export_data_element_to_ascii@@Base+0x790>
   1332c:	mov	r0, #126	; 0x7e
   13330:	mov	r2, r7
   13334:	str	r0, [sp]
   13338:	mvn	r0, #0
   1333c:	ldr	r1, [pc, #900]	; 136c8 <export_data_element_to_ascii@@Base+0xafc>
   13340:	ldr	r3, [pc, #900]	; 136cc <export_data_element_to_ascii@@Base+0xb00>
   13344:	add	r1, pc, r1
   13348:	add	r3, pc, r3
   1334c:	bl	126bc <coda_set_error@plt>
   13350:	bl	18660 <handle_coda_error@@Base>
   13354:	ldr	r0, [sp, #64]	; 0x40
   13358:	add	r7, r0, #1
   1335c:	mov	r0, r6
   13360:	mov	r1, r5
   13364:	mov	r2, r7
   13368:	bl	12860 <coda_cursor_read_string@plt>
   1336c:	cmp	r0, #0
   13370:	beq	13378 <export_data_element_to_ascii@@Base+0x7ac>
   13374:	bl	18660 <handle_coda_error@@Base>
   13378:	ldr	r0, [pc, #848]	; 136d0 <export_data_element_to_ascii@@Base+0xb04>
   1337c:	ldr	r0, [pc, r0]
   13380:	ldr	r0, [r0]
   13384:	cmp	r0, #0
   13388:	beq	1360c <export_data_element_to_ascii@@Base+0xa40>
   1338c:	ldr	r1, [pc, #832]	; 136d4 <export_data_element_to_ascii@@Base+0xb08>
   13390:	mov	r0, r8
   13394:	mov	r2, r5
   13398:	add	r1, pc, r1
   1339c:	bl	128cc <fprintf@plt>
   133a0:	b	13618 <export_data_element_to_ascii@@Base+0xa4c>
   133a4:	add	r0, sl, #144	; 0x90
   133a8:	add	r1, sp, #64	; 0x40
   133ac:	str	r8, [sp, #24]
   133b0:	str	r0, [sp, #60]	; 0x3c
   133b4:	bl	12a1c <coda_cursor_get_bit_size@plt>
   133b8:	cmp	r0, #0
   133bc:	beq	133c4 <export_data_element_to_ascii@@Base+0x7f8>
   133c0:	bl	18660 <handle_coda_error@@Base>
   133c4:	ldr	sl, [sp, #64]	; 0x40
   133c8:	ldr	r7, [sp, #68]	; 0x44
   133cc:	lsr	r0, sl, #3
   133d0:	asr	r4, r7, #3
   133d4:	orr	r0, r0, r7, lsl #29
   133d8:	adds	r5, r0, #1
   133dc:	adc	r9, r4, #0
   133e0:	ands	r8, sl, #7
   133e4:	moveq	r5, r0
   133e8:	mov	r0, r5
   133ec:	bl	1283c <malloc@plt>
   133f0:	cmp	r8, #0
   133f4:	mov	r6, r0
   133f8:	moveq	r9, r4
   133fc:	cmp	r0, #0
   13400:	bne	13434 <export_data_element_to_ascii@@Base+0x868>
   13404:	mov	r0, #163	; 0xa3
   13408:	mov	r2, r5
   1340c:	str	r0, [sp]
   13410:	mvn	r0, #0
   13414:	ldr	r1, [pc, #700]	; 136d8 <export_data_element_to_ascii@@Base+0xb0c>
   13418:	ldr	r3, [pc, #700]	; 136dc <export_data_element_to_ascii@@Base+0xb10>
   1341c:	add	r1, pc, r1
   13420:	add	r3, pc, r3
   13424:	bl	126bc <coda_set_error@plt>
   13428:	bl	18660 <handle_coda_error@@Base>
   1342c:	ldr	sl, [sp, #64]	; 0x40
   13430:	ldr	r7, [sp, #68]	; 0x44
   13434:	ldr	r0, [sp, #60]	; 0x3c
   13438:	mov	r1, r6
   1343c:	mov	r2, #0
   13440:	mov	r3, #0
   13444:	str	sl, [sp]
   13448:	str	r7, [sp, #4]
   1344c:	bl	12aac <coda_cursor_read_bits@plt>
   13450:	ldr	r8, [sp, #24]
   13454:	cmp	r0, #0
   13458:	beq	13460 <export_data_element_to_ascii@@Base+0x894>
   1345c:	bl	18660 <handle_coda_error@@Base>
   13460:	subs	r0, r5, #1
   13464:	sbcs	r0, r9, #0
   13468:	blt	1356c <export_data_element_to_ascii@@Base+0x9a0>
   1346c:	ldr	r7, [pc, #620]	; 136e0 <export_data_element_to_ascii@@Base+0xb14>
   13470:	ldr	r4, [pc, #620]	; 136e4 <export_data_element_to_ascii@@Base+0xb18>
   13474:	mov	sl, #0
   13478:	add	r7, pc, r7
   1347c:	add	r4, pc, r4
   13480:	b	134b8 <export_data_element_to_ascii@@Base+0x8ec>
   13484:	sub	r0, r2, #32
   13488:	uxtb	r0, r0
   1348c:	cmp	r0, #94	; 0x5e
   13490:	bhi	134a4 <export_data_element_to_ascii@@Base+0x8d8>
   13494:	mov	r0, r2
   13498:	mov	r1, r8
   1349c:	bl	12a04 <fputc@plt>
   134a0:	b	1355c <export_data_element_to_ascii@@Base+0x990>
   134a4:	ldr	r1, [pc, #596]	; 13700 <export_data_element_to_ascii@@Base+0xb34>
   134a8:	mov	r0, r8
   134ac:	add	r1, pc, r1
   134b0:	bl	128cc <fprintf@plt>
   134b4:	b	1355c <export_data_element_to_ascii@@Base+0x990>
   134b8:	ldrb	r2, [r6, sl]
   134bc:	sub	r0, r2, #7
   134c0:	cmp	r0, #6
   134c4:	bhi	134fc <export_data_element_to_ascii@@Base+0x930>
   134c8:	add	r1, pc, #4
   134cc:	ldr	r0, [r1, r0, lsl #2]
   134d0:	add	pc, r1, r0
   134d4:	andeq	r0, r0, ip, lsl r0
   134d8:	andeq	r0, r0, r4, asr r0
   134dc:	andeq	r0, r0, r8, asr #32
   134e0:	andeq	r0, r0, r0, rrx
   134e4:	andeq	r0, r0, ip, lsr r0
   134e8:	andeq	r0, r0, ip, rrx
   134ec:	andeq	r0, r0, r4, ror r0
   134f0:	ldr	r0, [pc, #500]	; 136ec <export_data_element_to_ascii@@Base+0xb20>
   134f4:	add	r0, pc, r0
   134f8:	b	1354c <export_data_element_to_ascii@@Base+0x980>
   134fc:	cmp	r2, #92	; 0x5c
   13500:	bne	13484 <export_data_element_to_ascii@@Base+0x8b8>
   13504:	ldr	r0, [pc, #476]	; 136e8 <export_data_element_to_ascii@@Base+0xb1c>
   13508:	add	r0, pc, r0
   1350c:	b	1354c <export_data_element_to_ascii@@Base+0x980>
   13510:	ldr	r0, [pc, #484]	; 136fc <export_data_element_to_ascii@@Base+0xb30>
   13514:	add	r0, pc, r0
   13518:	b	1354c <export_data_element_to_ascii@@Base+0x980>
   1351c:	ldr	r0, [pc, #464]	; 136f4 <export_data_element_to_ascii@@Base+0xb28>
   13520:	add	r0, pc, r0
   13524:	b	1354c <export_data_element_to_ascii@@Base+0x980>
   13528:	ldr	r0, [pc, #448]	; 136f0 <export_data_element_to_ascii@@Base+0xb24>
   1352c:	add	r0, pc, r0
   13530:	b	1354c <export_data_element_to_ascii@@Base+0x980>
   13534:	ldr	r0, [pc, #444]	; 136f8 <export_data_element_to_ascii@@Base+0xb2c>
   13538:	add	r0, pc, r0
   1353c:	b	1354c <export_data_element_to_ascii@@Base+0x980>
   13540:	mov	r0, r7
   13544:	b	1354c <export_data_element_to_ascii@@Base+0x980>
   13548:	mov	r0, r4
   1354c:	mov	r1, #2
   13550:	mov	r2, #1
   13554:	mov	r3, r8
   13558:	bl	127e8 <fwrite@plt>
   1355c:	add	sl, sl, #1
   13560:	subs	r0, sl, r5
   13564:	rscs	r0, r9, #0
   13568:	blt	134b8 <export_data_element_to_ascii@@Base+0x8ec>
   1356c:	mov	r0, r6
   13570:	bl	12704 <free@plt>
   13574:	b	13630 <export_data_element_to_ascii@@Base+0xa64>
   13578:	add	r0, sl, #144	; 0x90
   1357c:	sub	r1, fp, #48	; 0x30
   13580:	bl	128a8 <coda_cursor_read_uint64@plt>
   13584:	cmp	r0, #0
   13588:	beq	13590 <export_data_element_to_ascii@@Base+0x9c4>
   1358c:	bl	18660 <handle_coda_error@@Base>
   13590:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13594:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13598:	add	r5, sp, #64	; 0x40
   1359c:	mov	r2, r5
   135a0:	bl	126f8 <coda_str64u@plt>
   135a4:	mov	r0, r5
   135a8:	mov	r1, r8
   135ac:	bl	12a94 <fputs@plt>
   135b0:	b	13630 <export_data_element_to_ascii@@Base+0xa64>
   135b4:	add	r0, sl, #144	; 0x90
   135b8:	add	r1, sp, #64	; 0x40
   135bc:	bl	12914 <coda_cursor_read_char@plt>
   135c0:	cmp	r0, #0
   135c4:	beq	135cc <export_data_element_to_ascii@@Base+0xa00>
   135c8:	bl	18660 <handle_coda_error@@Base>
   135cc:	ldr	r0, [pc, #236]	; 136c0 <export_data_element_to_ascii@@Base+0xaf4>
   135d0:	ldr	r0, [pc, r0]
   135d4:	ldrb	r2, [sp, #64]	; 0x40
   135d8:	ldr	r0, [r0]
   135dc:	cmp	r0, #0
   135e0:	beq	13624 <export_data_element_to_ascii@@Base+0xa58>
   135e4:	ldr	r1, [pc, #216]	; 136c4 <export_data_element_to_ascii@@Base+0xaf8>
   135e8:	add	r1, pc, r1
   135ec:	b	13234 <export_data_element_to_ascii@@Base+0x668>
   135f0:	vldr	d16, [fp, #-48]	; 0xffffffd0
   135f4:	vmov	r2, r3, d16
   135f8:	ldr	r1, [pc, #312]	; 13738 <export_data_element_to_ascii@@Base+0xb6c>
   135fc:	add	r1, pc, r1
   13600:	mov	r0, r8
   13604:	bl	128cc <fprintf@plt>
   13608:	b	13630 <export_data_element_to_ascii@@Base+0xa64>
   1360c:	mov	r0, r5
   13610:	mov	r1, r8
   13614:	bl	12a94 <fputs@plt>
   13618:	mov	r0, r5
   1361c:	bl	12704 <free@plt>
   13620:	b	13630 <export_data_element_to_ascii@@Base+0xa64>
   13624:	mov	r0, r2
   13628:	mov	r1, r8
   1362c:	bl	12a04 <fputc@plt>
   13630:	mov	r0, #10
   13634:	mov	r1, r8
   13638:	bl	12a04 <fputc@plt>
   1363c:	sub	sp, fp, #28
   13640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13644:	add	r0, sp, #64	; 0x40
   13648:	b	135a8 <export_data_element_to_ascii@@Base+0x9dc>
   1364c:	vldr	d0, [fp, #-48]	; 0xffffffd0
   13650:	ldr	r0, [pc, #212]	; 1372c <export_data_element_to_ascii@@Base+0xb60>
   13654:	add	r1, sp, #64	; 0x40
   13658:	add	r0, pc, r0
   1365c:	bl	126e0 <coda_time_double_to_string@plt>
   13660:	cmp	r0, #0
   13664:	beq	131ec <export_data_element_to_ascii@@Base+0x620>
   13668:	bl	18660 <handle_coda_error@@Base>
   1366c:	b	131ec <export_data_element_to_ascii@@Base+0x620>
   13670:	ldr	r0, [pc, #152]	; 13710 <export_data_element_to_ascii@@Base+0xb44>
   13674:	ldr	r1, [pc, #152]	; 13714 <export_data_element_to_ascii@@Base+0xb48>
   13678:	ldr	r3, [pc, #152]	; 13718 <export_data_element_to_ascii@@Base+0xb4c>
   1367c:	movw	r2, #294	; 0x126
   13680:	add	r0, pc, r0
   13684:	add	r1, pc, r1
   13688:	add	r3, pc, r3
   1368c:	bl	12ac4 <__assert_fail@plt>
   13690:	andeq	sl, r1, ip, ror #9
   13694:			; <UNDEFINED> instruction: 0x0001a4b0
   13698:	andeq	sl, r1, r8, asr #3
   1369c:	andeq	sl, r1, r4, lsr #2
   136a0:	andeq	sl, r1, r4, lsl r1
   136a4:	andeq	sl, r1, ip, ror r3
   136a8:	andeq	sl, r1, r4, asr #6
   136ac:	andeq	r7, r0, lr, ror r7
   136b0:	andeq	sl, r1, r8, lsr #5
   136b4:	strdeq	r7, [r0], -sp
   136b8:	andeq	r7, r0, r6, ror #7
   136bc:	andeq	r7, r0, r1, ror r4
   136c0:	andeq	r9, r1, r4, lsl ip
   136c4:	andeq	r6, r0, r4, lsl #30
   136c8:	andeq	r7, r0, sp, lsr #3
   136cc:	ldrdeq	r7, [r0], -lr
   136d0:	andeq	r9, r1, r8, ror #28
   136d4:	ldrdeq	r7, [r0], -r6
   136d8:	ldrdeq	r7, [r0], -r5
   136dc:	andeq	r7, r0, r6, lsl #2
   136e0:	andeq	r7, r0, pc, lsl r1
   136e4:	andeq	r7, r0, lr, lsl r1
   136e8:	muleq	r0, r5, r0
   136ec:	muleq	r0, r4, r0
   136f0:	andeq	r7, r0, pc, asr r0
   136f4:	andeq	r7, r0, lr, rrx
   136f8:	andeq	r7, r0, r9, asr r0
   136fc:	andeq	r7, r0, r0, lsl #1
   13700:	strdeq	r7, [r0], -r4
   13704:	muleq	r0, r8, ip
   13708:	andeq	r7, r0, r6, ror r3
   1370c:	andeq	r7, r0, sl, lsr r3
   13710:	strheq	r7, [r0], -r9
   13714:	andeq	r6, r0, r2, lsr #29
   13718:	andeq	r6, r0, sp, lsr #30
   1371c:	andeq	r9, r1, ip, lsl pc
   13720:	andeq	r7, r0, r7, lsr r3
   13724:	andeq	sl, r1, r4
   13728:	andeq	r7, r0, ip, lsr #8
   1372c:	andeq	r6, r0, r0, lsl #31
   13730:	strdeq	r9, [r1], -r4
   13734:	andeq	r7, r0, r6, ror #22
   13738:			; <UNDEFINED> instruction: 0x00006fb3

0001373c <print_debug_data@@Base>:
   1373c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13740:	add	fp, sp, #24
   13744:	sub	sp, sp, #536	; 0x218
   13748:	ldr	r7, [pc, #316]	; 1388c <print_debug_data@@Base+0x150>
   1374c:	mov	r6, r0
   13750:	mov	r5, r1
   13754:	mov	r4, r2
   13758:	sub	r1, fp, #28
   1375c:	cmp	r6, #0
   13760:	ldr	r7, [pc, r7]
   13764:	ldr	r0, [r7]
   13768:	beq	1378c <print_debug_data@@Base+0x50>
   1376c:	str	r1, [sp]
   13770:	mov	r1, r6
   13774:	mov	r2, r5
   13778:	mov	r3, r4
   1377c:	bl	128e4 <coda_open_as@plt>
   13780:	cmp	r0, #0
   13784:	bne	13798 <print_debug_data@@Base+0x5c>
   13788:	b	137f4 <print_debug_data@@Base+0xb8>
   1378c:	bl	126c8 <coda_open@plt>
   13790:	cmp	r0, #0
   13794:	beq	137f4 <print_debug_data@@Base+0xb8>
   13798:	bl	12a70 <coda_get_errno@plt>
   1379c:	ldr	r0, [r0]
   137a0:	cmn	r0, #21
   137a4:	bne	137f0 <print_debug_data@@Base+0xb4>
   137a8:	mov	r0, #0
   137ac:	bl	12710 <coda_set_option_use_mmap@plt>
   137b0:	ldr	r0, [r7]
   137b4:	sub	r1, fp, #28
   137b8:	cmp	r6, #0
   137bc:	beq	137d8 <print_debug_data@@Base+0x9c>
   137c0:	str	r1, [sp]
   137c4:	mov	r1, r6
   137c8:	mov	r2, r5
   137cc:	mov	r3, r4
   137d0:	bl	128e4 <coda_open_as@plt>
   137d4:	b	137dc <print_debug_data@@Base+0xa0>
   137d8:	bl	126c8 <coda_open@plt>
   137dc:	mov	r4, r0
   137e0:	mov	r0, #1
   137e4:	bl	12710 <coda_set_option_use_mmap@plt>
   137e8:	cmp	r4, #0
   137ec:	beq	137f4 <print_debug_data@@Base+0xb8>
   137f0:	bl	18660 <handle_coda_error@@Base>
   137f4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   137f8:	add	r1, sp, #4
   137fc:	bl	127ac <coda_get_product_format@plt>
   13800:	cmp	r0, #0
   13804:	beq	1380c <print_debug_data@@Base+0xd0>
   13808:	bl	18660 <handle_coda_error@@Base>
   1380c:	ldr	r0, [sp, #4]
   13810:	mov	r1, #0
   13814:	cmp	r0, #3
   13818:	ldr	r0, [pc, #112]	; 13890 <print_debug_data@@Base+0x154>
   1381c:	movwcc	r1, #1
   13820:	add	r0, pc, r0
   13824:	str	r1, [r0]
   13828:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1382c:	add	r0, sp, #8
   13830:	bl	127f4 <coda_cursor_set_product@plt>
   13834:	cmp	r0, #0
   13838:	beq	13840 <print_debug_data@@Base+0x104>
   1383c:	bl	18660 <handle_coda_error@@Base>
   13840:	ldr	r0, [pc, #76]	; 13894 <print_debug_data@@Base+0x158>
   13844:	ldr	r0, [pc, r0]
   13848:	ldr	r1, [r0]
   1384c:	cmp	r1, #0
   13850:	beq	13868 <print_debug_data@@Base+0x12c>
   13854:	add	r0, sp, #8
   13858:	bl	129d4 <coda_cursor_goto@plt>
   1385c:	cmp	r0, #0
   13860:	beq	13868 <print_debug_data@@Base+0x12c>
   13864:	bl	18660 <handle_coda_error@@Base>
   13868:	mov	r0, #0
   1386c:	bl	12668 <coda_set_option_perform_boundary_checks@plt>
   13870:	add	r0, sp, #8
   13874:	mov	r1, #0
   13878:	bl	13898 <print_debug_data@@Base+0x15c>
   1387c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13880:	bl	129b0 <coda_close@plt>
   13884:	sub	sp, fp, #24
   13888:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1388c:	andeq	r9, r1, ip, asr #20
   13890:	ldrdeq	r9, [r1], -r0
   13894:	andeq	r9, r1, ip, lsl #19
   13898:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1389c:	add	fp, sp, #28
   138a0:	sub	sp, sp, #644	; 0x284
   138a4:	str	r1, [sp, #24]
   138a8:	sub	r1, fp, #40	; 0x28
   138ac:	mov	r7, r0
   138b0:	bl	12788 <coda_cursor_has_attributes@plt>
   138b4:	cmp	r0, #0
   138b8:	beq	138c0 <print_debug_data@@Base+0x184>
   138bc:	bl	18660 <handle_coda_error@@Base>
   138c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   138c4:	cmp	r0, #0
   138c8:	beq	13928 <print_debug_data@@Base+0x1ec>
   138cc:	mov	r0, r7
   138d0:	bl	12908 <coda_cursor_goto_attributes@plt>
   138d4:	cmp	r0, #0
   138d8:	beq	138e0 <print_debug_data@@Base+0x1a4>
   138dc:	bl	18660 <handle_coda_error@@Base>
   138e0:	ldr	r0, [pc, #3064]	; 144e0 <print_debug_data@@Base+0xda4>
   138e4:	add	r0, pc, r0
   138e8:	bl	145e4 <print_debug_data@@Base+0xea8>
   138ec:	ldr	r0, [pc, #3056]	; 144e4 <print_debug_data@@Base+0xda8>
   138f0:	ldr	r0, [pc, r0]
   138f4:	ldr	r4, [pc, #3052]	; 144e8 <print_debug_data@@Base+0xdac>
   138f8:	ldr	r1, [sp, #24]
   138fc:	add	r0, r0, #1
   13900:	add	r4, pc, r4
   13904:	str	r0, [r4]
   13908:	mov	r0, r7
   1390c:	bl	13898 <print_debug_data@@Base+0x15c>
   13910:	ldr	r0, [pc, #3028]	; 144ec <print_debug_data@@Base+0xdb0>
   13914:	ldr	r0, [pc, r0]
   13918:	sub	r0, r0, #1
   1391c:	str	r0, [r4]
   13920:	mov	r0, r7
   13924:	bl	1286c <coda_cursor_goto_parent@plt>
   13928:	sub	r1, fp, #36	; 0x24
   1392c:	mov	r0, r7
   13930:	bl	12794 <coda_cursor_get_type_class@plt>
   13934:	cmp	r0, #0
   13938:	beq	13940 <print_debug_data@@Base+0x204>
   1393c:	bl	18660 <handle_coda_error@@Base>
   13940:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13944:	cmp	r0, #6
   13948:	bhi	14468 <print_debug_data@@Base+0xd2c>
   1394c:	add	r1, pc, #8
   13950:	str	r7, [sp, #28]
   13954:	ldr	r0, [r1, r0, lsl #2]
   13958:	add	pc, r1, r0
   1395c:	andeq	r0, r0, r8, lsl #3
   13960:	andeq	r0, r0, r0, lsl r3
   13964:	andeq	r0, r0, ip, lsl r0
   13968:	andeq	r0, r0, ip, lsl r0
   1396c:	andeq	r0, r0, ip, lsl r0
   13970:	andeq	r0, r0, ip, lsl r0
   13974:			; <UNDEFINED> instruction: 0x000003bc
   13978:	sub	r1, fp, #96	; 0x60
   1397c:	mov	r0, r7
   13980:	bl	129a4 <coda_cursor_has_ascii_content@plt>
   13984:	cmp	r0, #0
   13988:	beq	13990 <print_debug_data@@Base+0x254>
   1398c:	bl	18660 <handle_coda_error@@Base>
   13990:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13994:	cmp	r0, #0
   13998:	beq	13a4c <print_debug_data@@Base+0x310>
   1399c:	add	r1, sp, #32
   139a0:	mov	r0, r7
   139a4:	bl	1289c <coda_cursor_get_string_length@plt>
   139a8:	cmp	r0, #0
   139ac:	beq	139b4 <print_debug_data@@Base+0x278>
   139b0:	bl	18660 <handle_coda_error@@Base>
   139b4:	ldr	r0, [sp, #32]
   139b8:	add	r6, r0, #1
   139bc:	mov	r0, r6
   139c0:	bl	1283c <malloc@plt>
   139c4:	mov	r5, r0
   139c8:	cmp	r0, #0
   139cc:	bne	13a00 <print_debug_data@@Base+0x2c4>
   139d0:	movw	r0, #410	; 0x19a
   139d4:	mov	r2, r6
   139d8:	str	r0, [sp]
   139dc:	mvn	r0, #0
   139e0:	ldr	r1, [pc, #2960]	; 14578 <print_debug_data@@Base+0xe3c>
   139e4:	ldr	r3, [pc, #2960]	; 1457c <print_debug_data@@Base+0xe40>
   139e8:	add	r1, pc, r1
   139ec:	add	r3, pc, r3
   139f0:	bl	126bc <coda_set_error@plt>
   139f4:	bl	18660 <handle_coda_error@@Base>
   139f8:	ldr	r0, [sp, #32]
   139fc:	add	r6, r0, #1
   13a00:	mov	r0, r7
   13a04:	mov	r1, r5
   13a08:	mov	r2, r6
   13a0c:	bl	12860 <coda_cursor_read_string@plt>
   13a10:	cmp	r0, #0
   13a14:	beq	13a1c <print_debug_data@@Base+0x2e0>
   13a18:	bl	18660 <handle_coda_error@@Base>
   13a1c:	ldr	r0, [pc, #2908]	; 14580 <print_debug_data@@Base+0xe44>
   13a20:	add	r0, pc, r0
   13a24:	bl	145e4 <print_debug_data@@Base+0xea8>
   13a28:	ldr	r1, [sp, #32]
   13a2c:	mov	r0, r5
   13a30:	bl	146fc <print_debug_data@@Base+0xfc0>
   13a34:	ldr	r1, [sp, #32]
   13a38:	ldr	r0, [pc, #2884]	; 14584 <print_debug_data@@Base+0xe48>
   13a3c:	add	r0, pc, r0
   13a40:	bl	146b0 <print_debug_data@@Base+0xf74>
   13a44:	mov	r0, r5
   13a48:	bl	12704 <free@plt>
   13a4c:	sub	r1, fp, #120	; 0x78
   13a50:	mov	r0, r7
   13a54:	bl	12830 <coda_cursor_get_read_type@plt>
   13a58:	cmp	r0, #0
   13a5c:	beq	13a64 <print_debug_data@@Base+0x328>
   13a60:	bl	18660 <handle_coda_error@@Base>
   13a64:	ldr	r0, [fp, #-120]	; 0xffffff88
   13a68:	add	r0, r0, #1
   13a6c:	cmp	r0, #13
   13a70:	bhi	14468 <print_debug_data@@Base+0xd2c>
   13a74:	add	r1, pc, #4
   13a78:	ldr	r0, [r1, r0, lsl #2]
   13a7c:	add	pc, r1, r0
   13a80:	andeq	r0, r0, r8, lsr r0
   13a84:	andeq	r0, r0, r0, lsr #6
   13a88:	strdeq	r0, [r0], -r8
   13a8c:	andeq	r0, r0, r0, lsr #6
   13a90:	strdeq	r0, [r0], -r8
   13a94:	andeq	r0, r0, r0, lsr #6
   13a98:	strdeq	r0, [r0], -r8
   13a9c:	ldrdeq	r0, [r0], -r4
   13aa0:	andeq	r0, r0, r8, lsl r4
   13aa4:	andeq	r0, r0, r8, asr #6
   13aa8:	andeq	r0, r0, r8, asr #6
   13aac:	andeq	r0, r0, r8, lsr r0
   13ab0:	andeq	r0, r0, r8, lsr r0
   13ab4:	andeq	r0, r0, ip, asr r4
   13ab8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13abc:	cmp	r0, #0
   13ac0:	bne	14468 <print_debug_data@@Base+0xd2c>
   13ac4:	ldr	r0, [pc, #2792]	; 145b4 <print_debug_data@@Base+0xe78>
   13ac8:	ldr	r1, [pc, #2792]	; 145b8 <print_debug_data@@Base+0xe7c>
   13acc:	ldr	r3, [pc, #2792]	; 145bc <print_debug_data@@Base+0xe80>
   13ad0:	mov	r2, #548	; 0x224
   13ad4:	add	r0, pc, r0
   13ad8:	add	r1, pc, r1
   13adc:	add	r3, pc, r3
   13ae0:	bl	12ac4 <__assert_fail@plt>
   13ae4:	sub	r1, fp, #120	; 0x78
   13ae8:	mov	r0, r7
   13aec:	bl	126ec <coda_cursor_get_num_elements@plt>
   13af0:	cmp	r0, #0
   13af4:	beq	13afc <print_debug_data@@Base+0x3c0>
   13af8:	bl	18660 <handle_coda_error@@Base>
   13afc:	ldr	r0, [fp, #-120]	; 0xffffff88
   13b00:	cmp	r0, #1
   13b04:	blt	14468 <print_debug_data@@Base+0xd2c>
   13b08:	sub	r1, fp, #96	; 0x60
   13b0c:	mov	r0, r7
   13b10:	bl	1274c <coda_cursor_get_type@plt>
   13b14:	cmp	r0, #0
   13b18:	beq	13b20 <print_debug_data@@Base+0x3e4>
   13b1c:	bl	18660 <handle_coda_error@@Base>
   13b20:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13b24:	sub	r1, fp, #44	; 0x2c
   13b28:	bl	12950 <coda_type_get_record_union_status@plt>
   13b2c:	cmp	r0, #0
   13b30:	beq	13b38 <print_debug_data@@Base+0x3fc>
   13b34:	bl	18660 <handle_coda_error@@Base>
   13b38:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13b3c:	cmp	r0, #0
   13b40:	beq	13ffc <print_debug_data@@Base+0x8c0>
   13b44:	sub	r1, fp, #48	; 0x30
   13b48:	mov	r0, r7
   13b4c:	bl	12a40 <coda_cursor_get_available_union_field_index@plt>
   13b50:	cmp	r0, #0
   13b54:	beq	13b5c <print_debug_data@@Base+0x420>
   13b58:	bl	18660 <handle_coda_error@@Base>
   13b5c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13b60:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13b64:	sub	r2, fp, #52	; 0x34
   13b68:	bl	12a88 <coda_type_get_record_field_name@plt>
   13b6c:	cmp	r0, #0
   13b70:	beq	13b78 <print_debug_data@@Base+0x43c>
   13b74:	bl	18660 <handle_coda_error@@Base>
   13b78:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13b7c:	mov	r0, r7
   13b80:	bl	1280c <coda_cursor_goto_record_field_by_index@plt>
   13b84:	cmp	r0, #0
   13b88:	beq	13b90 <print_debug_data@@Base+0x454>
   13b8c:	bl	18660 <handle_coda_error@@Base>
   13b90:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13b94:	ldr	r0, [pc, #2388]	; 144f0 <print_debug_data@@Base+0xdb4>
   13b98:	add	r0, pc, r0
   13b9c:	bl	145e4 <print_debug_data@@Base+0xea8>
   13ba0:	ldr	r0, [pc, #2380]	; 144f4 <print_debug_data@@Base+0xdb8>
   13ba4:	ldr	r0, [pc, r0]
   13ba8:	cmp	r0, #0
   13bac:	beq	13c18 <print_debug_data@@Base+0x4dc>
   13bb0:	sub	r1, fp, #88	; 0x58
   13bb4:	mov	r0, r7
   13bb8:	bl	12a58 <coda_cursor_get_file_bit_offset@plt>
   13bbc:	cmp	r0, #0
   13bc0:	beq	13bc8 <print_debug_data@@Base+0x48c>
   13bc4:	bl	18660 <handle_coda_error@@Base>
   13bc8:	ldr	r1, [fp, #-84]	; 0xffffffac
   13bcc:	cmp	r1, #0
   13bd0:	blt	13c18 <print_debug_data@@Base+0x4dc>
   13bd4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13bd8:	add	r5, sp, #32
   13bdc:	mov	r2, r5
   13be0:	lsr	r0, r0, #3
   13be4:	orr	r0, r0, r1, lsl #29
   13be8:	lsr	r1, r1, #3
   13bec:	bl	12ab8 <coda_str64@plt>
   13bf0:	ldr	r0, [pc, #2304]	; 144f8 <print_debug_data@@Base+0xdbc>
   13bf4:	mov	r1, r5
   13bf8:	add	r0, pc, r0
   13bfc:	bl	146b0 <print_debug_data@@Base+0xf74>
   13c00:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13c04:	ands	r1, r0, #7
   13c08:	beq	13c18 <print_debug_data@@Base+0x4dc>
   13c0c:	ldr	r0, [pc, #2280]	; 144fc <print_debug_data@@Base+0xdc0>
   13c10:	add	r0, pc, r0
   13c14:	bl	146b0 <print_debug_data@@Base+0xf74>
   13c18:	ldr	r0, [pc, #2272]	; 14500 <print_debug_data@@Base+0xdc4>
   13c1c:	add	r0, pc, r0
   13c20:	bl	146b0 <print_debug_data@@Base+0xf74>
   13c24:	ldr	r0, [pc, #2264]	; 14504 <print_debug_data@@Base+0xdc8>
   13c28:	ldr	r0, [pc, r0]
   13c2c:	ldr	r4, [pc, #2260]	; 14508 <print_debug_data@@Base+0xdcc>
   13c30:	add	r0, r0, #1
   13c34:	add	r4, pc, r4
   13c38:	str	r0, [r4]
   13c3c:	ldr	r0, [pc, #2248]	; 1450c <print_debug_data@@Base+0xdd0>
   13c40:	ldr	r0, [pc, r0]
   13c44:	ldr	r0, [r0]
   13c48:	cmp	r0, #0
   13c4c:	blt	14470 <print_debug_data@@Base+0xd34>
   13c50:	ldr	r1, [sp, #24]
   13c54:	cmp	r0, r1
   13c58:	bgt	14470 <print_debug_data@@Base+0xd34>
   13c5c:	ldr	r0, [pc, #2220]	; 14510 <print_debug_data@@Base+0xdd4>
   13c60:	add	r0, pc, r0
   13c64:	bl	145e4 <print_debug_data@@Base+0xea8>
   13c68:	b	14480 <print_debug_data@@Base+0xd44>
   13c6c:	add	r5, sp, #32
   13c70:	sub	r1, fp, #44	; 0x2c
   13c74:	mov	r0, r7
   13c78:	mov	r2, r5
   13c7c:	bl	12998 <coda_cursor_get_array_dim@plt>
   13c80:	cmp	r0, #0
   13c84:	beq	13c8c <print_debug_data@@Base+0x550>
   13c88:	bl	18660 <handle_coda_error@@Base>
   13c8c:	ldr	r4, [fp, #-44]	; 0xffffffd4
   13c90:	cmp	r4, #0
   13c94:	blt	14468 <print_debug_data@@Base+0xd2c>
   13c98:	beq	1419c <print_debug_data@@Base+0xa60>
   13c9c:	lsl	r2, r4, #2
   13ca0:	sub	r0, fp, #88	; 0x58
   13ca4:	mov	r1, #0
   13ca8:	mov	r8, #0
   13cac:	bl	12920 <memset@plt>
   13cb0:	mov	r6, #1
   13cb4:	cmp	r4, #4
   13cb8:	bcc	13cf0 <print_debug_data@@Base+0x5b4>
   13cbc:	bic	r8, r4, #3
   13cc0:	vmov.i32	q8, #1	; 0x00000001
   13cc4:	mov	r0, r8
   13cc8:	vld1.32	{d18-d19}, [r5]!
   13ccc:	subs	r0, r0, #4
   13cd0:	vmul.i32	q8, q9, q8
   13cd4:	bne	13cc8 <print_debug_data@@Base+0x58c>
   13cd8:	vext.8	q9, q8, q8, #8
   13cdc:	cmp	r4, r8
   13ce0:	vmul.i32	q0, q8, q9
   13ce4:	vmul.i32	q8, q0, d0[1]
   13ce8:	vmov.32	r6, d16[0]
   13cec:	beq	13d0c <print_debug_data@@Base+0x5d0>
   13cf0:	add	r1, sp, #32
   13cf4:	sub	r0, r4, r8
   13cf8:	add	r1, r1, r8, lsl #2
   13cfc:	ldr	r2, [r1], #4
   13d00:	subs	r0, r0, #1
   13d04:	mul	r6, r2, r6
   13d08:	bne	13cfc <print_debug_data@@Base+0x5c0>
   13d0c:	cmp	r6, #1
   13d10:	bge	141a0 <print_debug_data@@Base+0xa64>
   13d14:	b	14468 <print_debug_data@@Base+0xd2c>
   13d18:	sub	r1, fp, #120	; 0x78
   13d1c:	mov	r0, r7
   13d20:	bl	127d0 <coda_cursor_get_special_type@plt>
   13d24:	cmp	r0, #0
   13d28:	beq	13d30 <print_debug_data@@Base+0x5f4>
   13d2c:	bl	18660 <handle_coda_error@@Base>
   13d30:	ldr	r0, [fp, #-120]	; 0xffffff88
   13d34:	cmp	r0, #0
   13d38:	beq	13e00 <print_debug_data@@Base+0x6c4>
   13d3c:	add	r5, sp, #32
   13d40:	mov	r1, r7
   13d44:	mov	r2, #520	; 0x208
   13d48:	mov	r0, r5
   13d4c:	bl	12758 <memcpy@plt>
   13d50:	mov	r0, r5
   13d54:	bl	12a34 <coda_cursor_use_base_type_of_special_type@plt>
   13d58:	cmp	r0, #0
   13d5c:	beq	13d64 <print_debug_data@@Base+0x628>
   13d60:	bl	18660 <handle_coda_error@@Base>
   13d64:	ldr	r1, [sp, #24]
   13d68:	add	r0, sp, #32
   13d6c:	bl	13898 <print_debug_data@@Base+0x15c>
   13d70:	ldr	r0, [fp, #-120]	; 0xffffff88
   13d74:	b	13e04 <print_debug_data@@Base+0x6c8>
   13d78:	add	r1, sp, #32
   13d7c:	mov	r0, r7
   13d80:	bl	12728 <coda_cursor_read_uint32@plt>
   13d84:	cmp	r0, #0
   13d88:	beq	13d90 <print_debug_data@@Base+0x654>
   13d8c:	bl	18660 <handle_coda_error@@Base>
   13d90:	ldr	r1, [sp, #32]
   13d94:	ldr	r0, [pc, #2060]	; 145a8 <print_debug_data@@Base+0xe6c>
   13d98:	add	r0, pc, r0
   13d9c:	b	13ed0 <print_debug_data@@Base+0x794>
   13da0:	add	r1, sp, #32
   13da4:	mov	r0, r7
   13da8:	bl	12a4c <coda_cursor_read_int32@plt>
   13dac:	cmp	r0, #0
   13db0:	beq	13db8 <print_debug_data@@Base+0x67c>
   13db4:	bl	18660 <handle_coda_error@@Base>
   13db8:	ldr	r1, [sp, #32]
   13dbc:	ldr	r0, [pc, #2016]	; 145a4 <print_debug_data@@Base+0xe68>
   13dc0:	add	r0, pc, r0
   13dc4:	b	13ed0 <print_debug_data@@Base+0x794>
   13dc8:	add	r1, sp, #32
   13dcc:	mov	r0, r7
   13dd0:	bl	128b4 <coda_cursor_read_double@plt>
   13dd4:	cmp	r0, #0
   13dd8:	beq	13de0 <print_debug_data@@Base+0x6a4>
   13ddc:	bl	18660 <handle_coda_error@@Base>
   13de0:	vldr	d16, [sp, #32]
   13de4:	ldr	r0, [fp, #-120]	; 0xffffff88
   13de8:	vmov	r2, r3, d16
   13dec:	cmp	r0, #8
   13df0:	bne	13e84 <print_debug_data@@Base+0x748>
   13df4:	ldr	r0, [pc, #1972]	; 145b0 <print_debug_data@@Base+0xe74>
   13df8:	add	r0, pc, r0
   13dfc:	b	13e8c <print_debug_data@@Base+0x750>
   13e00:	mov	r0, #0
   13e04:	bl	12638 <coda_type_get_special_type_name@plt>
   13e08:	mov	r1, r0
   13e0c:	ldr	r0, [pc, #1968]	; 145c4 <print_debug_data@@Base+0xe88>
   13e10:	add	r0, pc, r0
   13e14:	bl	145e4 <print_debug_data@@Base+0xea8>
   13e18:	ldr	r0, [fp, #-120]	; 0xffffff88
   13e1c:	cmp	r0, #3
   13e20:	bhi	14468 <print_debug_data@@Base+0xd2c>
   13e24:	add	r1, pc, #4
   13e28:	ldr	r0, [r1, r0, lsl #2]
   13e2c:	add	pc, r1, r0
   13e30:	andeq	r0, r0, r0, lsl r0
   13e34:	andeq	r0, r0, ip, lsl #12
   13e38:	andeq	r0, r0, r8, lsl #11
   13e3c:	ldrdeq	r0, [r0], -r4
   13e40:	ldr	r0, [pc, #1920]	; 145c8 <print_debug_data@@Base+0xe8c>
   13e44:	add	r0, pc, r0
   13e48:	bl	146b0 <print_debug_data@@Base+0xf74>
   13e4c:	sub	sp, fp, #28
   13e50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e54:	sub	r1, fp, #88	; 0x58
   13e58:	mov	r0, r7
   13e5c:	bl	129bc <coda_cursor_read_int64@plt>
   13e60:	cmp	r0, #0
   13e64:	beq	13e6c <print_debug_data@@Base+0x730>
   13e68:	bl	18660 <handle_coda_error@@Base>
   13e6c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13e70:	ldr	r1, [fp, #-84]	; 0xffffffac
   13e74:	add	r4, sp, #32
   13e78:	mov	r2, r4
   13e7c:	bl	12ab8 <coda_str64@plt>
   13e80:	b	13ec4 <print_debug_data@@Base+0x788>
   13e84:	ldr	r0, [pc, #1844]	; 145c0 <print_debug_data@@Base+0xe84>
   13e88:	add	r0, pc, r0
   13e8c:	bl	145e4 <print_debug_data@@Base+0xea8>
   13e90:	sub	sp, fp, #28
   13e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e98:	sub	r1, fp, #88	; 0x58
   13e9c:	mov	r0, r7
   13ea0:	bl	128a8 <coda_cursor_read_uint64@plt>
   13ea4:	cmp	r0, #0
   13ea8:	beq	13eb0 <print_debug_data@@Base+0x774>
   13eac:	bl	18660 <handle_coda_error@@Base>
   13eb0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13eb4:	ldr	r1, [fp, #-84]	; 0xffffffac
   13eb8:	add	r4, sp, #32
   13ebc:	mov	r2, r4
   13ec0:	bl	126f8 <coda_str64u@plt>
   13ec4:	ldr	r0, [pc, #1760]	; 145ac <print_debug_data@@Base+0xe70>
   13ec8:	mov	r1, r4
   13ecc:	add	r0, pc, r0
   13ed0:	bl	145e4 <print_debug_data@@Base+0xea8>
   13ed4:	sub	sp, fp, #28
   13ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13edc:	sub	r1, fp, #88	; 0x58
   13ee0:	mov	r0, r7
   13ee4:	bl	12a1c <coda_cursor_get_bit_size@plt>
   13ee8:	cmp	r0, #0
   13eec:	beq	13ef4 <print_debug_data@@Base+0x7b8>
   13ef0:	bl	18660 <handle_coda_error@@Base>
   13ef4:	ldr	r4, [fp, #-88]	; 0xffffffa8
   13ef8:	ldr	r5, [fp, #-84]	; 0xffffffac
   13efc:	lsr	r0, r4, #3
   13f00:	tst	r4, #7
   13f04:	orr	r6, r0, r5, lsl #29
   13f08:	addne	r6, r6, #1
   13f0c:	mov	r0, r6
   13f10:	bl	1283c <malloc@plt>
   13f14:	mov	r8, r0
   13f18:	cmp	r0, #0
   13f1c:	bne	13f50 <print_debug_data@@Base+0x814>
   13f20:	movw	r0, #447	; 0x1bf
   13f24:	mov	r2, r6
   13f28:	str	r0, [sp]
   13f2c:	mvn	r0, #0
   13f30:	ldr	r1, [pc, #1616]	; 14588 <print_debug_data@@Base+0xe4c>
   13f34:	ldr	r3, [pc, #1616]	; 1458c <print_debug_data@@Base+0xe50>
   13f38:	add	r1, pc, r1
   13f3c:	add	r3, pc, r3
   13f40:	bl	126bc <coda_set_error@plt>
   13f44:	bl	18660 <handle_coda_error@@Base>
   13f48:	ldr	r4, [fp, #-88]	; 0xffffffa8
   13f4c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13f50:	mov	r0, r7
   13f54:	mov	r1, r8
   13f58:	mov	r2, #0
   13f5c:	mov	r3, #0
   13f60:	stm	sp, {r4, r5}
   13f64:	bl	12aac <coda_cursor_read_bits@plt>
   13f68:	cmp	r0, #0
   13f6c:	beq	13f74 <print_debug_data@@Base+0x838>
   13f70:	bl	18660 <handle_coda_error@@Base>
   13f74:	ldr	r0, [pc, #1556]	; 14590 <print_debug_data@@Base+0xe54>
   13f78:	add	r0, pc, r0
   13f7c:	bl	145e4 <print_debug_data@@Base+0xea8>
   13f80:	mov	r0, r8
   13f84:	mov	r1, r6
   13f88:	bl	146fc <print_debug_data@@Base+0xfc0>
   13f8c:	ldr	r0, [pc, #1536]	; 14594 <print_debug_data@@Base+0xe58>
   13f90:	add	r0, pc, r0
   13f94:	bl	146b0 <print_debug_data@@Base+0xf74>
   13f98:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13f9c:	ldr	r1, [fp, #-84]	; 0xffffffac
   13fa0:	add	r4, sp, #32
   13fa4:	mov	r2, r4
   13fa8:	lsr	r0, r0, #3
   13fac:	orr	r0, r0, r1, lsl #29
   13fb0:	asr	r1, r1, #3
   13fb4:	bl	12ab8 <coda_str64@plt>
   13fb8:	ldr	r0, [pc, #1496]	; 14598 <print_debug_data@@Base+0xe5c>
   13fbc:	mov	r1, r4
   13fc0:	add	r0, pc, r0
   13fc4:	bl	146b0 <print_debug_data@@Base+0xf74>
   13fc8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13fcc:	ands	r1, r0, #7
   13fd0:	beq	13fe0 <print_debug_data@@Base+0x8a4>
   13fd4:	ldr	r0, [pc, #1472]	; 1459c <print_debug_data@@Base+0xe60>
   13fd8:	add	r0, pc, r0
   13fdc:	bl	146b0 <print_debug_data@@Base+0xf74>
   13fe0:	ldr	r0, [pc, #1464]	; 145a0 <print_debug_data@@Base+0xe64>
   13fe4:	add	r0, pc, r0
   13fe8:	bl	146b0 <print_debug_data@@Base+0xf74>
   13fec:	mov	r0, r8
   13ff0:	bl	12704 <free@plt>
   13ff4:	sub	sp, fp, #28
   13ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ffc:	mov	r0, r7
   14000:	bl	12800 <coda_cursor_goto_first_record_field@plt>
   14004:	cmp	r0, #0
   14008:	beq	14010 <print_debug_data@@Base+0x8d4>
   1400c:	bl	18660 <handle_coda_error@@Base>
   14010:	ldr	r0, [fp, #-120]	; 0xffffff88
   14014:	mov	r1, #0
   14018:	str	r1, [fp, #-48]	; 0xffffffd0
   1401c:	cmp	r0, #1
   14020:	blt	14194 <print_debug_data@@Base+0xa58>
   14024:	ldr	r0, [sp, #24]
   14028:	mvn	r9, #0
   1402c:	sub	r7, fp, #52	; 0x34
   14030:	add	r0, r0, #1
   14034:	str	r0, [sp, #20]
   14038:	ldr	r6, [pc, #1240]	; 14518 <print_debug_data@@Base+0xddc>
   1403c:	ldr	r5, [pc, #1240]	; 1451c <print_debug_data@@Base+0xde0>
   14040:	ldr	sl, [pc, #1240]	; 14520 <print_debug_data@@Base+0xde4>
   14044:	ldr	r4, [pc, #1240]	; 14524 <print_debug_data@@Base+0xde8>
   14048:	ldr	r4, [pc, r4]
   1404c:	add	r6, pc, r6
   14050:	add	r5, pc, r5
   14054:	add	sl, pc, sl
   14058:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1405c:	mov	r2, r7
   14060:	bl	12a88 <coda_type_get_record_field_name@plt>
   14064:	cmp	r0, #0
   14068:	beq	14070 <print_debug_data@@Base+0x934>
   1406c:	bl	18660 <handle_coda_error@@Base>
   14070:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14074:	mov	r0, r6
   14078:	bl	145e4 <print_debug_data@@Base+0xea8>
   1407c:	ldr	r0, [pc, #1188]	; 14528 <print_debug_data@@Base+0xdec>
   14080:	ldr	r0, [pc, r0]
   14084:	cmp	r0, #0
   14088:	beq	140f8 <print_debug_data@@Base+0x9bc>
   1408c:	ldr	r0, [sp, #28]
   14090:	sub	r1, fp, #88	; 0x58
   14094:	bl	12a58 <coda_cursor_get_file_bit_offset@plt>
   14098:	cmp	r0, #0
   1409c:	beq	140a4 <print_debug_data@@Base+0x968>
   140a0:	bl	18660 <handle_coda_error@@Base>
   140a4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   140a8:	ldr	r1, [fp, #-84]	; 0xffffffac
   140ac:	subs	r2, r9, r0
   140b0:	sbcs	r2, r9, r1
   140b4:	bge	140f8 <print_debug_data@@Base+0x9bc>
   140b8:	lsr	r0, r0, #3
   140bc:	add	r8, sp, #32
   140c0:	orr	r0, r0, r1, lsl #29
   140c4:	lsr	r1, r1, #3
   140c8:	mov	r2, r8
   140cc:	bl	12ab8 <coda_str64@plt>
   140d0:	ldr	r0, [pc, #1108]	; 1452c <print_debug_data@@Base+0xdf0>
   140d4:	mov	r1, r8
   140d8:	add	r0, pc, r0
   140dc:	bl	146b0 <print_debug_data@@Base+0xf74>
   140e0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   140e4:	ands	r1, r0, #7
   140e8:	beq	140f8 <print_debug_data@@Base+0x9bc>
   140ec:	ldr	r0, [pc, #1084]	; 14530 <print_debug_data@@Base+0xdf4>
   140f0:	add	r0, pc, r0
   140f4:	bl	146b0 <print_debug_data@@Base+0xf74>
   140f8:	mov	r0, r5
   140fc:	bl	146b0 <print_debug_data@@Base+0xf74>
   14100:	ldr	r0, [pc, #1068]	; 14534 <print_debug_data@@Base+0xdf8>
   14104:	ldr	r0, [pc, r0]
   14108:	add	r0, r0, #1
   1410c:	str	r0, [sl]
   14110:	ldr	r0, [r4]
   14114:	cmp	r0, #0
   14118:	blt	14138 <print_debug_data@@Base+0x9fc>
   1411c:	ldr	r1, [sp, #24]
   14120:	cmp	r0, r1
   14124:	bgt	14138 <print_debug_data@@Base+0x9fc>
   14128:	ldr	r0, [pc, #1032]	; 14538 <print_debug_data@@Base+0xdfc>
   1412c:	add	r0, pc, r0
   14130:	bl	145e4 <print_debug_data@@Base+0xea8>
   14134:	b	14144 <print_debug_data@@Base+0xa08>
   14138:	ldr	r0, [sp, #28]
   1413c:	ldr	r1, [sp, #20]
   14140:	bl	13898 <print_debug_data@@Base+0x15c>
   14144:	ldr	r0, [pc, #1008]	; 1453c <print_debug_data@@Base+0xe00>
   14148:	ldr	r0, [pc, r0]
   1414c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14150:	sub	r0, r0, #1
   14154:	str	r0, [sl]
   14158:	ldr	r0, [fp, #-120]	; 0xffffff88
   1415c:	sub	r0, r0, #1
   14160:	cmp	r1, r0
   14164:	bge	1417c <print_debug_data@@Base+0xa40>
   14168:	ldr	r0, [sp, #28]
   1416c:	bl	129f8 <coda_cursor_goto_next_record_field@plt>
   14170:	cmp	r0, #0
   14174:	beq	1417c <print_debug_data@@Base+0xa40>
   14178:	bl	18660 <handle_coda_error@@Base>
   1417c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14180:	add	r1, r0, #1
   14184:	ldr	r0, [fp, #-120]	; 0xffffff88
   14188:	str	r1, [fp, #-48]	; 0xffffffd0
   1418c:	cmp	r1, r0
   14190:	blt	14058 <print_debug_data@@Base+0x91c>
   14194:	ldr	r0, [sp, #28]
   14198:	b	14494 <print_debug_data@@Base+0xd58>
   1419c:	mov	r6, #1
   141a0:	mov	r0, r7
   141a4:	bl	127dc <coda_cursor_goto_first_array_element@plt>
   141a8:	cmp	r0, #0
   141ac:	beq	141b4 <print_debug_data@@Base+0xa78>
   141b0:	bl	18660 <handle_coda_error@@Base>
   141b4:	sub	r0, r6, #1
   141b8:	str	r6, [sp, #20]
   141bc:	mov	r8, #0
   141c0:	sub	r6, fp, #88	; 0x58
   141c4:	add	sl, sp, #32
   141c8:	mov	r4, #0
   141cc:	str	r0, [sp, #16]
   141d0:	ldr	r0, [sp, #24]
   141d4:	add	r0, r0, #1
   141d8:	str	r0, [sp, #12]
   141dc:	ldr	r5, [pc, #860]	; 14540 <print_debug_data@@Base+0xe04>
   141e0:	ldr	r7, [pc, #860]	; 14544 <print_debug_data@@Base+0xe08>
   141e4:	add	r5, pc, r5
   141e8:	add	r7, pc, r7
   141ec:	ldr	r0, [pc, #852]	; 14548 <print_debug_data@@Base+0xe0c>
   141f0:	add	r0, pc, r0
   141f4:	bl	145e4 <print_debug_data@@Base+0xea8>
   141f8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   141fc:	cmp	r0, #1
   14200:	blt	1423c <print_debug_data@@Base+0xb00>
   14204:	mov	r9, #0
   14208:	ldr	r1, [r6, r9, lsl #2]
   1420c:	mov	r0, r5
   14210:	bl	146b0 <print_debug_data@@Base+0xf74>
   14214:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14218:	sub	r1, r0, #1
   1421c:	cmp	r9, r1
   14220:	bge	14230 <print_debug_data@@Base+0xaf4>
   14224:	mov	r0, r7
   14228:	bl	146b0 <print_debug_data@@Base+0xf74>
   1422c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14230:	add	r9, r9, #1
   14234:	cmp	r9, r0
   14238:	blt	14208 <print_debug_data@@Base+0xacc>
   1423c:	ldr	r0, [pc, #776]	; 1454c <print_debug_data@@Base+0xe10>
   14240:	add	r0, pc, r0
   14244:	bl	146b0 <print_debug_data@@Base+0xf74>
   14248:	ldr	r0, [pc, #768]	; 14550 <print_debug_data@@Base+0xe14>
   1424c:	ldr	r0, [pc, r0]
   14250:	ldr	r9, [sp, #28]
   14254:	cmp	r0, #0
   14258:	beq	142c8 <print_debug_data@@Base+0xb8c>
   1425c:	mov	r0, r9
   14260:	sub	r1, fp, #96	; 0x60
   14264:	bl	12a58 <coda_cursor_get_file_bit_offset@plt>
   14268:	cmp	r0, #0
   1426c:	beq	14274 <print_debug_data@@Base+0xb38>
   14270:	bl	18660 <handle_coda_error@@Base>
   14274:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14278:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1427c:	mvn	r3, #0
   14280:	subs	r2, r3, r0
   14284:	sbcs	r2, r3, r1
   14288:	bge	142c8 <print_debug_data@@Base+0xb8c>
   1428c:	lsr	r0, r0, #3
   14290:	sub	r2, fp, #120	; 0x78
   14294:	orr	r0, r0, r1, lsl #29
   14298:	lsr	r1, r1, #3
   1429c:	bl	12ab8 <coda_str64@plt>
   142a0:	ldr	r0, [pc, #684]	; 14554 <print_debug_data@@Base+0xe18>
   142a4:	sub	r1, fp, #120	; 0x78
   142a8:	add	r0, pc, r0
   142ac:	bl	146b0 <print_debug_data@@Base+0xf74>
   142b0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   142b4:	ands	r1, r0, #7
   142b8:	beq	142c8 <print_debug_data@@Base+0xb8c>
   142bc:	ldr	r0, [pc, #660]	; 14558 <print_debug_data@@Base+0xe1c>
   142c0:	add	r0, pc, r0
   142c4:	bl	146b0 <print_debug_data@@Base+0xf74>
   142c8:	ldr	r0, [pc, #652]	; 1455c <print_debug_data@@Base+0xe20>
   142cc:	add	r0, pc, r0
   142d0:	bl	146b0 <print_debug_data@@Base+0xf74>
   142d4:	ldr	r0, [pc, #644]	; 14560 <print_debug_data@@Base+0xe24>
   142d8:	ldr	r0, [pc, r0]
   142dc:	ldr	r1, [pc, #640]	; 14564 <print_debug_data@@Base+0xe28>
   142e0:	add	r0, r0, #1
   142e4:	add	r1, pc, r1
   142e8:	str	r0, [r1]
   142ec:	ldr	r0, [pc, #628]	; 14568 <print_debug_data@@Base+0xe2c>
   142f0:	ldr	r0, [pc, r0]
   142f4:	ldr	r0, [r0]
   142f8:	cmp	r0, #0
   142fc:	blt	1431c <print_debug_data@@Base+0xbe0>
   14300:	ldr	r1, [sp, #24]
   14304:	cmp	r0, r1
   14308:	bgt	1431c <print_debug_data@@Base+0xbe0>
   1430c:	ldr	r0, [pc, #600]	; 1456c <print_debug_data@@Base+0xe30>
   14310:	add	r0, pc, r0
   14314:	bl	145e4 <print_debug_data@@Base+0xea8>
   14318:	b	14328 <print_debug_data@@Base+0xbec>
   1431c:	ldr	r1, [sp, #12]
   14320:	mov	r0, r9
   14324:	bl	13898 <print_debug_data@@Base+0x15c>
   14328:	ldr	r0, [pc, #576]	; 14570 <print_debug_data@@Base+0xe34>
   1432c:	ldr	r0, [pc, r0]
   14330:	ldr	r1, [pc, #572]	; 14574 <print_debug_data@@Base+0xe38>
   14334:	sub	r0, r0, #1
   14338:	add	r1, pc, r1
   1433c:	str	r0, [r1]
   14340:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14344:	cmp	r0, #1
   14348:	blt	14380 <print_debug_data@@Base+0xc44>
   1434c:	sub	r0, r0, #1
   14350:	ldr	r1, [r6, r0, lsl #2]
   14354:	ldr	r2, [sl, r0, lsl #2]
   14358:	add	r1, r1, #1
   1435c:	cmp	r1, r2
   14360:	str	r1, [r6, r0, lsl #2]
   14364:	bne	14380 <print_debug_data@@Base+0xc44>
   14368:	str	r8, [r6, r0, lsl #2]
   1436c:	sub	r1, r0, #1
   14370:	add	r0, r0, #1
   14374:	cmp	r0, #1
   14378:	mov	r0, r1
   1437c:	bgt	14350 <print_debug_data@@Base+0xc14>
   14380:	ldr	r0, [sp, #16]
   14384:	cmp	r4, r0
   14388:	bge	143a0 <print_debug_data@@Base+0xc64>
   1438c:	mov	r0, r9
   14390:	bl	128d8 <coda_cursor_goto_next_array_element@plt>
   14394:	cmp	r0, #0
   14398:	beq	143a0 <print_debug_data@@Base+0xc64>
   1439c:	bl	18660 <handle_coda_error@@Base>
   143a0:	ldr	r0, [sp, #20]
   143a4:	add	r4, r4, #1
   143a8:	cmp	r4, r0
   143ac:	bne	141ec <print_debug_data@@Base+0xab0>
   143b0:	mov	r0, r9
   143b4:	b	14494 <print_debug_data@@Base+0xd58>
   143b8:	sub	r1, fp, #88	; 0x58
   143bc:	mov	r0, r7
   143c0:	bl	128b4 <coda_cursor_read_double@plt>
   143c4:	cmp	r0, #0
   143c8:	beq	143d0 <print_debug_data@@Base+0xc94>
   143cc:	bl	18660 <handle_coda_error@@Base>
   143d0:	vldr	d0, [fp, #-88]	; 0xffffffa8
   143d4:	bl	128c0 <coda_isNaN@plt>
   143d8:	cmp	r0, #0
   143dc:	bne	143f0 <print_debug_data@@Base+0xcb4>
   143e0:	vldr	d0, [fp, #-88]	; 0xffffffa8
   143e4:	bl	12764 <coda_isInf@plt>
   143e8:	cmp	r0, #0
   143ec:	beq	144a0 <print_debug_data@@Base+0xd64>
   143f0:	vldr	d16, [fp, #-88]	; 0xffffffa8
   143f4:	ldr	r0, [pc, #468]	; 145d0 <print_debug_data@@Base+0xe94>
   143f8:	vmov	r2, r3, d16
   143fc:	add	r0, pc, r0
   14400:	b	14464 <print_debug_data@@Base+0xd28>
   14404:	add	r1, sp, #32
   14408:	sub	r2, fp, #88	; 0x58
   1440c:	mov	r0, r7
   14410:	bl	1295c <coda_cursor_read_complex_double_split@plt>
   14414:	cmp	r0, #0
   14418:	beq	14420 <print_debug_data@@Base+0xce4>
   1441c:	bl	18660 <handle_coda_error@@Base>
   14420:	vldr	d17, [fp, #-88]	; 0xffffffa8
   14424:	vldr	d16, [sp, #32]
   14428:	vstr	d17, [sp]
   1442c:	vmov	r2, r3, d16
   14430:	ldr	r0, [pc, #424]	; 145e0 <print_debug_data@@Base+0xea4>
   14434:	add	r0, pc, r0
   14438:	b	14464 <print_debug_data@@Base+0xd28>
   1443c:	add	r1, sp, #32
   14440:	mov	r0, r7
   14444:	bl	128b4 <coda_cursor_read_double@plt>
   14448:	cmp	r0, #0
   1444c:	beq	14454 <print_debug_data@@Base+0xd18>
   14450:	bl	18660 <handle_coda_error@@Base>
   14454:	vldr	d16, [sp, #32]
   14458:	ldr	r0, [pc, #364]	; 145cc <print_debug_data@@Base+0xe90>
   1445c:	vmov	r2, r3, d16
   14460:	add	r0, pc, r0
   14464:	bl	146b0 <print_debug_data@@Base+0xf74>
   14468:	sub	sp, fp, #28
   1446c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14470:	ldr	r0, [sp, #24]
   14474:	add	r1, r0, #1
   14478:	mov	r0, r7
   1447c:	bl	13898 <print_debug_data@@Base+0x15c>
   14480:	ldr	r0, [pc, #140]	; 14514 <print_debug_data@@Base+0xdd8>
   14484:	ldr	r0, [pc, r0]
   14488:	sub	r0, r0, #1
   1448c:	str	r0, [r4]
   14490:	mov	r0, r7
   14494:	bl	1286c <coda_cursor_goto_parent@plt>
   14498:	sub	sp, fp, #28
   1449c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144a0:	vldr	d0, [fp, #-88]	; 0xffffffa8
   144a4:	ldr	r0, [pc, #296]	; 145d4 <print_debug_data@@Base+0xe98>
   144a8:	add	r1, sp, #32
   144ac:	add	r0, pc, r0
   144b0:	bl	126e0 <coda_time_double_to_string@plt>
   144b4:	cmp	r0, #0
   144b8:	beq	144c8 <print_debug_data@@Base+0xd8c>
   144bc:	ldr	r0, [pc, #276]	; 145d8 <print_debug_data@@Base+0xe9c>
   144c0:	add	r0, pc, r0
   144c4:	b	13e48 <print_debug_data@@Base+0x70c>
   144c8:	ldr	r0, [pc, #268]	; 145dc <print_debug_data@@Base+0xea0>
   144cc:	add	r1, sp, #32
   144d0:	add	r0, pc, r0
   144d4:	bl	146b0 <print_debug_data@@Base+0xf74>
   144d8:	sub	sp, fp, #28
   144dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144e0:	andeq	r6, r0, ip, lsr sp
   144e4:	andeq	r9, r1, r0, lsl r9
   144e8:	andeq	r9, r1, r0, lsl #18
   144ec:	andeq	r9, r1, ip, ror #17
   144f0:	ldrdeq	r7, [r0], -r0
   144f4:	andeq	r9, r1, ip, asr #12
   144f8:	andeq	r6, r0, r6, lsr sl
   144fc:	andeq	r6, r0, r2, lsr #20
   14500:	andeq	r7, r0, r9, lsl #7
   14504:	ldrdeq	r9, [r1], -r8
   14508:	andeq	r9, r1, ip, asr #11
   1450c:	muleq	r1, r8, r5
   14510:	ldrdeq	r6, [r0], -r6	; <UNPREDICTABLE>
   14514:	andeq	r8, r1, ip, ror sp
   14518:	andeq	r6, r0, ip, lsl sp
   1451c:	andeq	r6, r0, r5, asr pc
   14520:	andeq	r9, r1, ip, lsr #3
   14524:	muleq	r1, r0, r1
   14528:	andeq	r9, r1, r0, ror r1
   1452c:	andeq	r6, r0, r6, asr r5
   14530:	andeq	r6, r0, r2, asr #10
   14534:	strdeq	r9, [r1], -ip
   14538:	andeq	r6, r0, sl, lsl #10
   1453c:	strheq	r9, [r1], -r8
   14540:	andeq	r6, r0, pc, asr #8
   14544:	andeq	r6, r0, r6, lsl r6
   14548:	andeq	r6, r0, sl, lsl r6
   1454c:			; <UNDEFINED> instruction: 0x00006ab5
   14550:	andeq	r8, r1, r4, lsr #31
   14554:	andeq	r6, r0, r6, lsl #7
   14558:	andeq	r6, r0, r2, ror r3
   1455c:	ldrdeq	r6, [r0], -r9
   14560:	andeq	r8, r1, r8, lsr #30
   14564:	andeq	r8, r1, ip, lsl pc
   14568:	andeq	r8, r1, r8, ror #29
   1456c:	andeq	r6, r0, r6, lsr #6
   14570:	ldrdeq	r8, [r1], -r4
   14574:	andeq	r8, r1, r8, asr #29
   14578:	andeq	r6, r0, r9, lsl #22
   1457c:	andeq	r6, r0, pc, asr #24
   14580:	andeq	r7, r0, r8, lsr r2
   14584:	andeq	r6, r0, r1, ror #24
   14588:			; <UNDEFINED> instruction: 0x000065b9
   1458c:	strdeq	r6, [r0], -pc	; <UNPREDICTABLE>
   14590:	andeq	r6, r0, r0, ror #25
   14594:	andeq	r6, r0, sp, lsl r7
   14598:	andeq	r6, r0, ip, ror #26
   1459c:	andeq	r6, r0, sl, asr r6
   145a0:	andeq	r6, r0, r6, asr #13
   145a4:	strdeq	r6, [r0], -r6	; <UNPREDICTABLE>
   145a8:	andeq	r6, r0, r3, lsr #18
   145ac:	andeq	r6, r0, r3, lsr pc
   145b0:	andeq	r6, r0, r8, asr #17
   145b4:	strdeq	r6, [r0], -r2
   145b8:	andeq	r6, r0, r3, ror #22
   145bc:	strdeq	r6, [r0], -ip
   145c0:	andeq	r6, r0, sl, ror r8
   145c4:	andeq	r6, r0, ip, ror #17
   145c8:	andeq	r7, r0, r1, ror #2
   145cc:	andeq	r6, r0, r2, lsr #5
   145d0:	andeq	r6, r0, r5, lsl #6
   145d4:	andeq	r6, r0, ip, lsr #2
   145d8:	andeq	r6, r0, r9, asr #4
   145dc:	andeq	r6, r0, lr, lsr #18
   145e0:	strdeq	r6, [r0], -r0
   145e4:	sub	sp, sp, #12
   145e8:	push	{r4, r5, r6, r7, fp, lr}
   145ec:	add	fp, sp, #16
   145f0:	sub	sp, sp, #4
   145f4:	mov	r4, r0
   145f8:	add	r0, fp, #8
   145fc:	stm	r0, {r1, r2, r3}
   14600:	ldr	r0, [pc, #140]	; 14694 <print_debug_data@@Base+0xf58>
   14604:	ldr	r0, [pc, r0]
   14608:	cmp	r0, #0
   1460c:	blt	14674 <print_debug_data@@Base+0xf38>
   14610:	beq	14648 <print_debug_data@@Base+0xf0c>
   14614:	ldr	r7, [pc, #124]	; 14698 <print_debug_data@@Base+0xf5c>
   14618:	add	r6, r0, #1
   1461c:	ldr	r7, [pc, r7]
   14620:	ldr	r5, [pc, #116]	; 1469c <print_debug_data@@Base+0xf60>
   14624:	add	r5, pc, r5
   14628:	ldr	r3, [r7]
   1462c:	mov	r0, r5
   14630:	mov	r1, #2
   14634:	mov	r2, #1
   14638:	bl	127e8 <fwrite@plt>
   1463c:	sub	r6, r6, #1
   14640:	cmp	r6, #1
   14644:	bgt	14628 <print_debug_data@@Base+0xeec>
   14648:	add	r2, fp, #8
   1464c:	mov	r1, r4
   14650:	str	r2, [sp]
   14654:	ldr	r0, [pc, #68]	; 146a0 <print_debug_data@@Base+0xf64>
   14658:	ldr	r0, [pc, r0]
   1465c:	ldr	r0, [r0]
   14660:	bl	129c8 <vfprintf@plt>
   14664:	sub	sp, fp, #16
   14668:	pop	{r4, r5, r6, r7, fp, lr}
   1466c:	add	sp, sp, #12
   14670:	bx	lr
   14674:	ldr	r0, [pc, #40]	; 146a4 <print_debug_data@@Base+0xf68>
   14678:	ldr	r1, [pc, #40]	; 146a8 <print_debug_data@@Base+0xf6c>
   1467c:	ldr	r3, [pc, #40]	; 146ac <print_debug_data@@Base+0xf70>
   14680:	mov	r2, #44	; 0x2c
   14684:	add	r0, pc, r0
   14688:	add	r1, pc, r1
   1468c:	add	r3, pc, r3
   14690:	bl	12ac4 <__assert_fail@plt>
   14694:	strdeq	r8, [r1], -ip
   14698:	muleq	r1, r8, fp
   1469c:	andeq	r6, r0, r9, lsr #2
   146a0:	andeq	r8, r1, ip, asr fp
   146a4:	andeq	r6, r0, fp, lsr #1
   146a8:			; <UNDEFINED> instruction: 0x00005fb3
   146ac:	andeq	r6, r0, pc, lsr #1
   146b0:	sub	sp, sp, #12
   146b4:	push	{fp, lr}
   146b8:	mov	fp, sp
   146bc:	sub	sp, sp, #4
   146c0:	mov	ip, r0
   146c4:	add	r0, fp, #8
   146c8:	stm	r0, {r1, r2, r3}
   146cc:	add	r2, fp, #8
   146d0:	mov	r1, ip
   146d4:	str	r2, [sp]
   146d8:	ldr	r0, [pc, #24]	; 146f8 <print_debug_data@@Base+0xfbc>
   146dc:	ldr	r0, [pc, r0]
   146e0:	ldr	r0, [r0]
   146e4:	bl	129c8 <vfprintf@plt>
   146e8:	mov	sp, fp
   146ec:	pop	{fp, lr}
   146f0:	add	sp, sp, #12
   146f4:	bx	lr
   146f8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   146fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14700:	add	fp, sp, #28
   14704:	sub	sp, sp, #4
   14708:	cmp	r1, #1
   1470c:	blt	14820 <print_debug_data@@Base+0x10e4>
   14710:	ldr	r8, [pc, #272]	; 14828 <print_debug_data@@Base+0x10ec>
   14714:	ldr	r9, [pc, #272]	; 1482c <print_debug_data@@Base+0x10f0>
   14718:	ldr	sl, [pc, #272]	; 14830 <print_debug_data@@Base+0x10f4>
   1471c:	ldr	r7, [pc, #272]	; 14834 <print_debug_data@@Base+0x10f8>
   14720:	ldr	r6, [pc, #272]	; 14838 <print_debug_data@@Base+0x10fc>
   14724:	mov	r4, r1
   14728:	mov	r5, r0
   1472c:	add	r8, pc, r8
   14730:	add	r9, pc, r9
   14734:	add	sl, pc, sl
   14738:	add	r7, pc, r7
   1473c:	add	r6, pc, r6
   14740:	ldrb	r1, [r5]
   14744:	sub	r0, r1, #7
   14748:	cmp	r0, #6
   1474c:	bhi	14788 <print_debug_data@@Base+0x104c>
   14750:	add	r1, pc, #4
   14754:	ldr	r0, [r1, r0, lsl #2]
   14758:	add	pc, r1, r0
   1475c:	andeq	r0, r0, ip, lsl r0
   14760:	andeq	r0, r0, r4, asr #32
   14764:	andeq	r0, r0, r4, asr r0
   14768:	andeq	r0, r0, r0, rrx
   1476c:	andeq	r0, r0, ip, rrx
   14770:	andeq	r0, r0, r8, ror r0
   14774:	andeq	r0, r0, r4, lsl #1
   14778:	ldr	r0, [pc, #192]	; 14840 <print_debug_data@@Base+0x1104>
   1477c:	add	r0, pc, r0
   14780:	bl	146b0 <print_debug_data@@Base+0xf74>
   14784:	b	14814 <print_debug_data@@Base+0x10d8>
   14788:	cmp	r1, #92	; 0x5c
   1478c:	bne	147ec <print_debug_data@@Base+0x10b0>
   14790:	ldr	r0, [pc, #164]	; 1483c <print_debug_data@@Base+0x1100>
   14794:	add	r0, pc, r0
   14798:	bl	146b0 <print_debug_data@@Base+0xf74>
   1479c:	b	14814 <print_debug_data@@Base+0x10d8>
   147a0:	ldr	r0, [pc, #156]	; 14844 <print_debug_data@@Base+0x1108>
   147a4:	add	r0, pc, r0
   147a8:	bl	146b0 <print_debug_data@@Base+0xf74>
   147ac:	b	14814 <print_debug_data@@Base+0x10d8>
   147b0:	mov	r0, r8
   147b4:	bl	146b0 <print_debug_data@@Base+0xf74>
   147b8:	b	14814 <print_debug_data@@Base+0x10d8>
   147bc:	mov	r0, r9
   147c0:	bl	146b0 <print_debug_data@@Base+0xf74>
   147c4:	b	14814 <print_debug_data@@Base+0x10d8>
   147c8:	mov	r0, sl
   147cc:	bl	146b0 <print_debug_data@@Base+0xf74>
   147d0:	b	14814 <print_debug_data@@Base+0x10d8>
   147d4:	mov	r0, r7
   147d8:	bl	146b0 <print_debug_data@@Base+0xf74>
   147dc:	b	14814 <print_debug_data@@Base+0x10d8>
   147e0:	mov	r0, r6
   147e4:	bl	146b0 <print_debug_data@@Base+0xf74>
   147e8:	b	14814 <print_debug_data@@Base+0x10d8>
   147ec:	sub	r0, r1, #32
   147f0:	uxtb	r0, r0
   147f4:	cmp	r0, #94	; 0x5e
   147f8:	bhi	14808 <print_debug_data@@Base+0x10cc>
   147fc:	ldr	r0, [pc, #68]	; 14848 <print_debug_data@@Base+0x110c>
   14800:	add	r0, pc, r0
   14804:	b	14810 <print_debug_data@@Base+0x10d4>
   14808:	ldr	r0, [pc, #60]	; 1484c <print_debug_data@@Base+0x1110>
   1480c:	add	r0, pc, r0
   14810:	bl	146b0 <print_debug_data@@Base+0xf74>
   14814:	subs	r4, r4, #1
   14818:	add	r5, r5, #1
   1481c:	bne	14740 <print_debug_data@@Base+0x1004>
   14820:	sub	sp, fp, #28
   14824:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14828:	andeq	r5, r0, r2, ror #28
   1482c:	andeq	r5, r0, r1, ror #28
   14830:	andeq	r5, r0, r0, ror #28
   14834:	andeq	r5, r0, pc, asr lr
   14838:	andeq	r5, r0, lr, asr lr
   1483c:	andeq	r5, r0, r9, lsl #28
   14840:	andeq	r5, r0, ip, lsl #28
   14844:	andeq	r5, r0, r7, ror #27
   14848:	andeq	r5, r0, r0, asr pc
   1484c:	muleq	r0, r4, sp

00014850 <dim_info_init@@Base>:
   14850:	ldr	r0, [pc, #24]	; 14870 <dim_info_init@@Base+0x20>
   14854:	mov	r1, #0
   14858:	ldr	r0, [pc, r0]
   1485c:	str	r1, [r0, #68]	; 0x44
   14860:	str	r1, [r0]
   14864:	mvn	r1, #0
   14868:	str	r1, [r0, #104]	; 0x68
   1486c:	bx	lr
   14870:	andeq	r8, r1, r4, lsl #19

00014874 <dim_info_done@@Base>:
   14874:	bx	lr

00014878 <print_all_distinct_dims@@Base>:
   14878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1487c:	add	fp, sp, #28
   14880:	sub	sp, sp, #4
   14884:	ldr	r9, [pc, #440]	; 14a44 <print_all_distinct_dims@@Base+0x1cc>
   14888:	mov	sl, r0
   1488c:	ldr	r9, [pc, r9]
   14890:	ldr	r0, [r9]
   14894:	cmp	r0, sl
   14898:	ble	14a24 <print_all_distinct_dims@@Base+0x1ac>
   1489c:	add	r8, r9, sl, lsl #2
   148a0:	ldr	r0, [r8, #72]	; 0x48
   148a4:	cmp	r0, #0
   148a8:	subeq	sp, fp, #28
   148ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148b0:	mov	r7, r8
   148b4:	mov	r5, #4
   148b8:	ldr	r0, [r7, #4]!
   148bc:	add	r6, r5, r0, lsl #2
   148c0:	mov	r0, r6
   148c4:	bl	1283c <malloc@plt>
   148c8:	mov	r4, r0
   148cc:	cmp	r0, #0
   148d0:	bne	14904 <print_all_distinct_dims@@Base+0x8c>
   148d4:	mov	r0, #61	; 0x3d
   148d8:	mov	r2, r6
   148dc:	str	r0, [sp]
   148e0:	mvn	r0, #0
   148e4:	ldr	r1, [pc, #348]	; 14a48 <print_all_distinct_dims@@Base+0x1d0>
   148e8:	ldr	r3, [pc, #348]	; 14a4c <print_all_distinct_dims@@Base+0x1d4>
   148ec:	add	r1, pc, r1
   148f0:	add	r3, pc, r3
   148f4:	bl	126bc <coda_set_error@plt>
   148f8:	bl	18660 <handle_coda_error@@Base>
   148fc:	ldr	r0, [r7]
   14900:	add	r6, r5, r0, lsl #2
   14904:	mov	r0, r4
   14908:	mov	r1, #0
   1490c:	mov	r2, r6
   14910:	mov	r5, #0
   14914:	bl	12920 <memset@plt>
   14918:	ldr	r0, [r8, #140]	; 0x8c
   1491c:	add	r0, r9, r0, lsl #3
   14920:	ldrd	r0, [r0, #232]	; 0xe8
   14924:	subs	r2, r0, #1
   14928:	sbcs	r2, r1, #0
   1492c:	blt	14958 <print_all_distinct_dims@@Base+0xe0>
   14930:	ldr	r2, [r8, #108]	; 0x6c
   14934:	ldr	r3, [r2, r5, lsl #2]
   14938:	add	r5, r5, #1
   1493c:	cmp	r3, #0
   14940:	ldrge	r6, [r4, r3, lsl #2]
   14944:	addge	r6, r6, #1
   14948:	strge	r6, [r4, r3, lsl #2]
   1494c:	subs	r3, r5, r0
   14950:	rscs	r3, r1, #0
   14954:	blt	14934 <print_all_distinct_dims@@Base+0xbc>
   14958:	ldr	r0, [pc, #240]	; 14a50 <print_all_distinct_dims@@Base+0x1d8>
   1495c:	add	r1, sl, #1
   14960:	add	r0, pc, r0
   14964:	bl	12698 <printf@plt>
   14968:	ldr	r5, [r8, #36]!	; 0x24
   1496c:	ldr	r1, [r7]
   14970:	cmp	r5, r1
   14974:	bge	149a8 <print_all_distinct_dims@@Base+0x130>
   14978:	ldr	r6, [pc, #212]	; 14a54 <print_all_distinct_dims@@Base+0x1dc>
   1497c:	add	r6, pc, r6
   14980:	ldr	r0, [r4, r5, lsl #2]
   14984:	cmp	r0, #1
   14988:	blt	1499c <print_all_distinct_dims@@Base+0x124>
   1498c:	mov	r0, r6
   14990:	mov	r1, r5
   14994:	bl	12698 <printf@plt>
   14998:	ldr	r1, [r7]
   1499c:	add	r5, r5, #1
   149a0:	cmp	r5, r1
   149a4:	blt	14980 <print_all_distinct_dims@@Base+0x108>
   149a8:	ldr	r0, [pc, #168]	; 14a58 <print_all_distinct_dims@@Base+0x1e0>
   149ac:	add	r0, pc, r0
   149b0:	bl	12698 <printf@plt>
   149b4:	ldr	r0, [pc, #160]	; 14a5c <print_all_distinct_dims@@Base+0x1e4>
   149b8:	add	r0, pc, r0
   149bc:	bl	12698 <printf@plt>
   149c0:	ldr	r0, [r7]
   149c4:	ldr	r6, [r8]
   149c8:	cmp	r6, r0
   149cc:	bge	149fc <print_all_distinct_dims@@Base+0x184>
   149d0:	ldr	r5, [pc, #136]	; 14a60 <print_all_distinct_dims@@Base+0x1e8>
   149d4:	add	r5, pc, r5
   149d8:	ldr	r1, [r4, r6, lsl #2]
   149dc:	cmp	r1, #1
   149e0:	blt	149f0 <print_all_distinct_dims@@Base+0x178>
   149e4:	mov	r0, r5
   149e8:	bl	12698 <printf@plt>
   149ec:	ldr	r0, [r7]
   149f0:	add	r6, r6, #1
   149f4:	cmp	r6, r0
   149f8:	blt	149d8 <print_all_distinct_dims@@Base+0x160>
   149fc:	ldr	r1, [r4, r0, lsl #2]
   14a00:	ldr	r0, [pc, #92]	; 14a64 <print_all_distinct_dims@@Base+0x1ec>
   14a04:	add	r0, pc, r0
   14a08:	bl	12698 <printf@plt>
   14a0c:	mov	r0, #10
   14a10:	bl	1292c <putchar@plt>
   14a14:	mov	r0, r4
   14a18:	sub	sp, fp, #28
   14a1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a20:	b	12704 <free@plt>
   14a24:	ldr	r0, [pc, #60]	; 14a68 <print_all_distinct_dims@@Base+0x1f0>
   14a28:	ldr	r1, [pc, #60]	; 14a6c <print_all_distinct_dims@@Base+0x1f4>
   14a2c:	ldr	r3, [pc, #60]	; 14a70 <print_all_distinct_dims@@Base+0x1f8>
   14a30:	mov	r2, #50	; 0x32
   14a34:	add	r0, pc, r0
   14a38:	add	r1, pc, r1
   14a3c:	add	r3, pc, r3
   14a40:	bl	12ac4 <__assert_fail@plt>
   14a44:	andeq	r8, r1, r0, asr r9
   14a48:	andeq	r5, r0, r5, lsl #24
   14a4c:	andeq	r5, r0, lr, ror lr
   14a50:	muleq	r0, r0, lr
   14a54:	andeq	r5, r0, r0, lsl #29
   14a58:	andeq	r5, r0, r4, asr lr
   14a5c:	andeq	r5, r0, ip, asr #28
   14a60:	andeq	r5, r0, r8, lsr #28
   14a64:	strdeq	r5, [r0], -ip
   14a68:	andeq	r5, r0, pc, lsl sp
   14a6c:	andeq	r5, r0, r6, lsr sp
   14a70:	muleq	r0, r2, sp

00014a74 <dim_enter_array@@Base>:
   14a74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a78:	add	fp, sp, #28
   14a7c:	sub	sp, sp, #76	; 0x4c
   14a80:	ldr	r4, [pc, #1976]	; 15240 <dim_enter_array@@Base+0x7cc>
   14a84:	sub	r1, fp, #32
   14a88:	ldr	r4, [pc, r4]
   14a8c:	ldr	r0, [r4, #136]	; 0x88
   14a90:	ldr	r5, [r4, #3360]	; 0xd20
   14a94:	add	r0, r4, r0, lsl #2
   14a98:	ldr	r0, [r0, #8]
   14a9c:	bl	12ad0 <coda_type_get_class@plt>
   14aa0:	cmp	r0, #0
   14aa4:	beq	14aac <dim_enter_array@@Base+0x38>
   14aa8:	bl	18660 <handle_coda_error@@Base>
   14aac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14ab0:	sub	r0, r0, #1
   14ab4:	cmp	r0, #5
   14ab8:	bhi	151e0 <dim_enter_array@@Base+0x76c>
   14abc:	add	r1, r5, r5, lsl #2
   14ac0:	add	r5, r4, r1, lsl #4
   14ac4:	add	r1, pc, #4
   14ac8:	ldr	r0, [r1, r0, lsl #2]
   14acc:	add	pc, r1, r0
   14ad0:	andeq	r0, r0, r8, lsl r0
   14ad4:	andeq	r0, r0, r0, lsl r7
   14ad8:	andeq	r0, r0, r0, lsl r7
   14adc:	muleq	r0, ip, r0
   14ae0:	andeq	r0, r0, ip, asr #1
   14ae4:	andeq	r0, r0, r0, rrx
   14ae8:	ldr	r0, [r4, #136]	; 0x88
   14aec:	add	r1, sp, #36	; 0x24
   14af0:	add	r2, sp, #40	; 0x28
   14af4:	add	r0, r4, r0, lsl #2
   14af8:	ldr	r0, [r0, #8]
   14afc:	bl	12a10 <coda_type_get_array_dim@plt>
   14b00:	cmp	r0, #0
   14b04:	beq	14b0c <dim_enter_array@@Base+0x98>
   14b08:	bl	18660 <handle_coda_error@@Base>
   14b0c:	ldr	sl, [sp, #36]	; 0x24
   14b10:	cmp	sl, #1
   14b14:	str	sl, [r5, #804]	; 0x324
   14b18:	blt	14bf0 <dim_enter_array@@Base+0x17c>
   14b1c:	add	r0, r5, #808	; 0x328
   14b20:	lsl	r2, sl, #2
   14b24:	add	r1, sp, #40	; 0x28
   14b28:	bl	12758 <memcpy@plt>
   14b2c:	b	14bf0 <dim_enter_array@@Base+0x17c>
   14b30:	ldr	r0, [r4, #136]	; 0x88
   14b34:	add	r1, sp, #40	; 0x28
   14b38:	add	r0, r4, r0, lsl #2
   14b3c:	ldr	r0, [r0, #8]
   14b40:	bl	12944 <coda_type_get_special_type@plt>
   14b44:	cmp	r0, #0
   14b48:	beq	14b50 <dim_enter_array@@Base+0xdc>
   14b4c:	bl	18660 <handle_coda_error@@Base>
   14b50:	ldr	r0, [sp, #40]	; 0x28
   14b54:	cmp	r0, #3
   14b58:	bne	15220 <dim_enter_array@@Base+0x7ac>
   14b5c:	mov	sl, #1
   14b60:	mov	r0, #2
   14b64:	str	sl, [r5, #804]	; 0x324
   14b68:	b	14bec <dim_enter_array@@Base+0x178>
   14b6c:	ldr	r0, [r4, #136]	; 0x88
   14b70:	add	r1, sp, #40	; 0x28
   14b74:	add	r0, r4, r0, lsl #2
   14b78:	ldr	r0, [r0, #8]
   14b7c:	bl	12980 <coda_type_get_string_length@plt>
   14b80:	cmp	r0, #0
   14b84:	beq	14b8c <dim_enter_array@@Base+0x118>
   14b88:	bl	18660 <handle_coda_error@@Base>
   14b8c:	ldr	r0, [sp, #40]	; 0x28
   14b90:	mov	sl, #1
   14b94:	str	sl, [r5, #804]	; 0x324
   14b98:	b	14bec <dim_enter_array@@Base+0x178>
   14b9c:	ldr	r0, [r4, #136]	; 0x88
   14ba0:	add	r1, sp, #40	; 0x28
   14ba4:	add	r0, r4, r0, lsl #2
   14ba8:	ldr	r0, [r0, #8]
   14bac:	bl	12770 <coda_type_get_bit_size@plt>
   14bb0:	cmp	r0, #0
   14bb4:	beq	14bbc <dim_enter_array@@Base+0x148>
   14bb8:	bl	18660 <handle_coda_error@@Base>
   14bbc:	ldr	r0, [sp, #44]	; 0x2c
   14bc0:	mov	sl, #1
   14bc4:	str	sl, [r5, #804]	; 0x324
   14bc8:	cmp	r0, #0
   14bcc:	blt	14be8 <dim_enter_array@@Base+0x174>
   14bd0:	ldr	r1, [sp, #40]	; 0x28
   14bd4:	lsr	r2, r1, #3
   14bd8:	tst	r1, #7
   14bdc:	orr	r0, r2, r0, lsl #29
   14be0:	addne	r0, r0, #1
   14be4:	b	14bec <dim_enter_array@@Base+0x178>
   14be8:	mvn	r0, #0
   14bec:	str	r0, [r5, #808]	; 0x328
   14bf0:	ldr	r1, [pc, #1624]	; 15250 <dim_enter_array@@Base+0x7dc>
   14bf4:	add	r0, r5, #800	; 0x320
   14bf8:	ldr	r1, [pc, r1]
   14bfc:	ldr	r1, [r1]
   14c00:	cmp	r1, #0
   14c04:	beq	14c78 <dim_enter_array@@Base+0x204>
   14c08:	str	r5, [sp, #16]
   14c0c:	ldr	r8, [pc, #1600]	; 15254 <dim_enter_array@@Base+0x7e0>
   14c10:	ldr	r8, [pc, r8]
   14c14:	ldr	r6, [r8]
   14c18:	add	r3, sl, r6
   14c1c:	str	r6, [r0]
   14c20:	cmp	r3, #9
   14c24:	bge	15200 <dim_enter_array@@Base+0x78c>
   14c28:	cmp	r6, #0
   14c2c:	str	r3, [r8]
   14c30:	str	r6, [sp, #20]
   14c34:	ble	14c94 <dim_enter_array@@Base+0x220>
   14c38:	add	r0, r8, r6, lsl #3
   14c3c:	ldr	r1, [r0, #232]	; 0xe8
   14c40:	ldr	r2, [r0, #236]	; 0xec
   14c44:	str	r2, [sp, #28]
   14c48:	ldr	r2, [r0, #296]	; 0x128
   14c4c:	str	r1, [sp, #32]
   14c50:	ldr	r1, [r0, #300]	; 0x12c
   14c54:	rsbs	r0, r2, #0
   14c58:	str	r2, [sp, #8]
   14c5c:	str	r1, [sp, #12]
   14c60:	mov	r0, r1
   14c64:	rscs	r0, r1, #0
   14c68:	bge	14e48 <dim_enter_array@@Base+0x3d4>
   14c6c:	cmp	sl, #1
   14c70:	bge	14cbc <dim_enter_array@@Base+0x248>
   14c74:	b	14ed0 <dim_enter_array@@Base+0x45c>
   14c78:	mvn	r1, #0
   14c7c:	str	r1, [r0]
   14c80:	mov	r0, #0
   14c84:	str	r0, [r5, #840]	; 0x348
   14c88:	str	r0, [r5, #844]	; 0x34c
   14c8c:	sub	sp, fp, #28
   14c90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c94:	mov	r0, #0
   14c98:	cmp	sl, #0
   14c9c:	str	r0, [sp, #12]
   14ca0:	mov	r0, #1
   14ca4:	str	r0, [sp, #8]
   14ca8:	mov	r0, #1
   14cac:	str	r0, [sp, #32]
   14cb0:	mov	r0, #0
   14cb4:	str	r0, [sp, #28]
   14cb8:	ble	14eb4 <dim_enter_array@@Base+0x440>
   14cbc:	ldr	r0, [sp, #16]
   14cc0:	add	r5, r8, r6, lsl #2
   14cc4:	mov	r2, #0
   14cc8:	add	r1, r0, #804	; 0x324
   14ccc:	add	r9, r0, #808	; 0x328
   14cd0:	mov	r0, #0
   14cd4:	str	r1, [sp, #24]
   14cd8:	mov	r1, #0
   14cdc:	ldr	r3, [r9, r2, lsl #2]
   14ce0:	add	r7, r5, r2, lsl #2
   14ce4:	add	r2, r2, #1
   14ce8:	str	r0, [r7, #72]	; 0x48
   14cec:	cmn	r3, #1
   14cf0:	str	r3, [r7, #4]
   14cf4:	movweq	r1, #1
   14cf8:	cmp	sl, r2
   14cfc:	bne	14cdc <dim_enter_array@@Base+0x268>
   14d00:	cmp	r1, #0
   14d04:	beq	14ed0 <dim_enter_array@@Base+0x45c>
   14d08:	ldr	r0, [sp, #32]
   14d0c:	mov	sl, #0
   14d10:	mov	r7, #0
   14d14:	lsl	r4, r0, #2
   14d18:	ldr	r0, [r9, r7, lsl #2]
   14d1c:	add	r6, r5, r7, lsl #2
   14d20:	cmn	r0, #1
   14d24:	beq	14d34 <dim_enter_array@@Base+0x2c0>
   14d28:	str	sl, [r6, #140]	; 0x8c
   14d2c:	str	sl, [r6, #108]	; 0x6c
   14d30:	b	14d9c <dim_enter_array@@Base+0x328>
   14d34:	ldr	r0, [sp, #20]
   14d38:	str	r0, [r6, #140]	; 0x8c
   14d3c:	mov	r0, r4
   14d40:	bl	1283c <malloc@plt>
   14d44:	cmp	r0, #0
   14d48:	str	r0, [r6, #108]	; 0x6c
   14d4c:	bne	14d78 <dim_enter_array@@Base+0x304>
   14d50:	mov	r0, #456	; 0x1c8
   14d54:	mov	r2, r4
   14d58:	str	r0, [sp]
   14d5c:	mvn	r0, #0
   14d60:	ldr	r1, [pc, #1264]	; 15258 <dim_enter_array@@Base+0x7e4>
   14d64:	ldr	r3, [pc, #1264]	; 1525c <dim_enter_array@@Base+0x7e8>
   14d68:	add	r1, pc, r1
   14d6c:	add	r3, pc, r3
   14d70:	bl	126bc <coda_set_error@plt>
   14d74:	bl	18660 <handle_coda_error@@Base>
   14d78:	ldr	r0, [sp, #32]
   14d7c:	subs	r0, r0, #1
   14d80:	ldr	r0, [sp, #28]
   14d84:	sbcs	r0, r0, #0
   14d88:	blt	14d9c <dim_enter_array@@Base+0x328>
   14d8c:	ldr	r0, [r6, #108]	; 0x6c
   14d90:	mov	r1, #255	; 0xff
   14d94:	mov	r2, r4
   14d98:	bl	12920 <memset@plt>
   14d9c:	ldr	r0, [sp, #24]
   14da0:	add	r7, r7, #1
   14da4:	ldr	r0, [r0]
   14da8:	cmp	r7, r0
   14dac:	blt	14d18 <dim_enter_array@@Base+0x2a4>
   14db0:	ldr	r0, [sp, #16]
   14db4:	mov	r1, #0
   14db8:	mov	r2, #0
   14dbc:	str	r1, [r0, #844]	; 0x34c
   14dc0:	mov	r0, #0
   14dc4:	mov	r1, #0
   14dc8:	bl	15278 <dim_enter_array@@Base+0x804>
   14dcc:	ldr	r0, [sp, #24]
   14dd0:	ldr	sl, [r0]
   14dd4:	cmp	sl, #1
   14dd8:	blt	14ecc <dim_enter_array@@Base+0x458>
   14ddc:	ldr	r6, [sp, #20]
   14de0:	mov	r7, #0
   14de4:	mov	r4, #0
   14de8:	ldr	r0, [r9, r7, lsl #2]
   14dec:	cmn	r0, #1
   14df0:	bne	14e38 <dim_enter_array@@Base+0x3c4>
   14df4:	add	r6, r5, r7, lsl #2
   14df8:	ldr	r0, [r6, #4]
   14dfc:	ldr	r1, [r6, #36]	; 0x24
   14e00:	cmp	r0, r1
   14e04:	bne	14e2c <dim_enter_array@@Base+0x3b8>
   14e08:	mov	sl, #0
   14e0c:	str	sl, [r6, #72]	; 0x48
   14e10:	ldr	r0, [r6, #108]	; 0x6c
   14e14:	bl	12704 <free@plt>
   14e18:	ldr	r0, [sp, #24]
   14e1c:	str	sl, [r6, #140]	; 0x8c
   14e20:	str	sl, [r6, #108]	; 0x6c
   14e24:	ldr	sl, [r0]
   14e28:	b	14e34 <dim_enter_array@@Base+0x3c0>
   14e2c:	mov	r4, #1
   14e30:	str	r4, [r6, #72]	; 0x48
   14e34:	ldr	r6, [sp, #20]
   14e38:	add	r7, r7, #1
   14e3c:	cmp	r7, sl
   14e40:	blt	14de8 <dim_enter_array@@Base+0x374>
   14e44:	b	14ed4 <dim_enter_array@@Base+0x460>
   14e48:	cmp	sl, #1
   14e4c:	blt	14ed0 <dim_enter_array@@Base+0x45c>
   14e50:	mov	r0, #0
   14e54:	cmp	sl, #3
   14e58:	bls	14e90 <dim_enter_array@@Base+0x41c>
   14e5c:	add	r0, r8, r6, lsl #2
   14e60:	vmov.i32	q8, #0	; 0x00000000
   14e64:	add	r1, r0, #72	; 0x48
   14e68:	bic	r0, sl, #3
   14e6c:	mov	r2, r0
   14e70:	sub	r3, r1, #68	; 0x44
   14e74:	subs	r2, r2, #4
   14e78:	vst1.32	{d16-d17}, [r3]
   14e7c:	vst1.32	{d16-d17}, [r1]!
   14e80:	bne	14e70 <dim_enter_array@@Base+0x3fc>
   14e84:	mov	r4, #0
   14e88:	cmp	sl, r0
   14e8c:	beq	14ed4 <dim_enter_array@@Base+0x460>
   14e90:	add	r1, r8, r6, lsl #2
   14e94:	mov	r4, #0
   14e98:	add	r2, r1, r0, lsl #2
   14e9c:	add	r0, r0, #1
   14ea0:	cmp	sl, r0
   14ea4:	str	r4, [r2, #72]	; 0x48
   14ea8:	str	r4, [r2, #4]
   14eac:	bne	14e98 <dim_enter_array@@Base+0x424>
   14eb0:	b	14ed4 <dim_enter_array@@Base+0x460>
   14eb4:	mov	r0, #1
   14eb8:	mov	r4, #0
   14ebc:	str	r0, [sp, #32]
   14ec0:	mov	r0, #0
   14ec4:	str	r0, [sp, #28]
   14ec8:	b	14ed8 <dim_enter_array@@Base+0x464>
   14ecc:	ldr	r6, [sp, #20]
   14ed0:	mov	r4, #0
   14ed4:	ldr	r3, [r8]
   14ed8:	mvn	r0, #0
   14edc:	cmp	r3, #1
   14ee0:	str	r0, [r8, #104]	; 0x68
   14ee4:	mov	r0, #0
   14ee8:	str	r0, [r8, #68]	; 0x44
   14eec:	blt	14f14 <dim_enter_array@@Base+0x4a0>
   14ef0:	mov	r1, #1
   14ef4:	add	r2, r8, r0, lsl #2
   14ef8:	ldr	r2, [r2, #72]	; 0x48
   14efc:	cmp	r2, #0
   14f00:	strne	r0, [r8, #104]	; 0x68
   14f04:	add	r0, r0, #1
   14f08:	strne	r1, [r8, #68]	; 0x44
   14f0c:	cmp	r0, r3
   14f10:	blt	14ef4 <dim_enter_array@@Base+0x480>
   14f14:	ldr	r1, [sp, #16]
   14f18:	mov	r0, #1
   14f1c:	cmp	sl, #1
   14f20:	str	r3, [sp, #24]
   14f24:	str	r0, [r1, #840]!	; 0x348
   14f28:	str	r1, [sp, #16]
   14f2c:	blt	14fc4 <dim_enter_array@@Base+0x550>
   14f30:	add	r2, r8, r6, lsl #3
   14f34:	add	r1, r8, r6, lsl #2
   14f38:	mov	r3, #0
   14f3c:	str	r4, [sp, #4]
   14f40:	add	ip, r2, #240	; 0xf0
   14f44:	add	lr, r1, #4
   14f48:	mov	r2, ip
   14f4c:	ldr	r6, [lr, r3, lsl #2]
   14f50:	cmp	r3, #0
   14f54:	mul	r0, r0, r6
   14f58:	beq	14f80 <dim_enter_array@@Base+0x50c>
   14f5c:	ldr	r4, [r2, #-8]
   14f60:	ldr	r1, [r2, #-4]
   14f64:	asr	r9, r6, #31
   14f68:	umull	r7, r5, r4, r6
   14f6c:	mla	r4, r4, r9, r5
   14f70:	str	r7, [r2]
   14f74:	mla	r1, r1, r6, r4
   14f78:	str	r1, [r2, #4]
   14f7c:	b	14fa4 <dim_enter_array@@Base+0x530>
   14f80:	ldr	r6, [lr]
   14f84:	ldr	r5, [sp, #32]
   14f88:	umull	r4, r7, r5, r6
   14f8c:	asr	r1, r6, #31
   14f90:	mla	r1, r5, r1, r7
   14f94:	ldr	r5, [sp, #28]
   14f98:	str	r4, [ip]
   14f9c:	mla	r1, r5, r6, r1
   14fa0:	str	r1, [ip, #4]
   14fa4:	add	r3, r3, #1
   14fa8:	add	r2, r2, #8
   14fac:	cmp	r3, sl
   14fb0:	blt	14f4c <dim_enter_array@@Base+0x4d8>
   14fb4:	ldr	r1, [sp, #16]
   14fb8:	ldr	r6, [sp, #20]
   14fbc:	ldr	r4, [sp, #4]
   14fc0:	str	r0, [r1]
   14fc4:	cmp	r4, #0
   14fc8:	beq	15094 <dim_enter_array@@Base+0x620>
   14fcc:	cmp	sl, #1
   14fd0:	blt	14fe8 <dim_enter_array@@Base+0x574>
   14fd4:	add	r0, r8, r6, lsl #3
   14fd8:	lsl	r2, sl, #3
   14fdc:	mov	r1, #0
   14fe0:	add	r0, r0, #304	; 0x130
   14fe4:	bl	12920 <memset@plt>
   14fe8:	ldr	r0, [sp, #32]
   14fec:	subs	r0, r0, #1
   14ff0:	ldr	r0, [sp, #28]
   14ff4:	sbcs	r0, r0, #0
   14ff8:	blt	15108 <dim_enter_array@@Base+0x694>
   14ffc:	ldr	r1, [sp, #20]
   15000:	movw	r0, #65232	; 0xfed0
   15004:	mov	r2, #0
   15008:	movt	r0, #65535	; 0xffff
   1500c:	sub	ip, r0, r1, lsl #3
   15010:	lsl	lr, r1, #2
   15014:	cmp	sl, #1
   15018:	blt	15078 <dim_enter_array@@Base+0x604>
   1501c:	mov	r3, #1
   15020:	mov	r0, ip
   15024:	mov	r1, lr
   15028:	mov	r4, sl
   1502c:	add	r6, r8, r1
   15030:	add	r1, r1, #4
   15034:	ldr	r5, [r6, #72]	; 0x48
   15038:	cmp	r5, #0
   1503c:	mov	r5, r8
   15040:	addeq	r6, r6, #4
   15044:	ldr	r7, [r5, -r0]!
   15048:	sub	r0, r0, #8
   1504c:	ldrne	r6, [r6, #108]	; 0x6c
   15050:	addne	r6, r6, r2, lsl #2
   15054:	ldr	r6, [r6]
   15058:	mul	r3, r6, r3
   1505c:	adds	r6, r7, r3
   15060:	str	r6, [r5]
   15064:	ldr	r6, [r5, #4]
   15068:	adc	r6, r6, r3, asr #31
   1506c:	subs	r4, r4, #1
   15070:	str	r6, [r5, #4]
   15074:	bne	1502c <dim_enter_array@@Base+0x5b8>
   15078:	ldr	r0, [sp, #32]
   1507c:	add	r2, r2, #1
   15080:	subs	r0, r2, r0
   15084:	ldr	r0, [sp, #28]
   15088:	rscs	r0, r0, #0
   1508c:	blt	15014 <dim_enter_array@@Base+0x5a0>
   15090:	b	15108 <dim_enter_array@@Base+0x694>
   15094:	add	r0, r8, r6, lsl #2
   15098:	ldr	r5, [sp, #8]
   1509c:	add	r2, r8, r6, lsl #3
   150a0:	cmp	sl, #2
   150a4:	ldr	r1, [r0, #4]
   150a8:	umull	r3, r7, r5, r1
   150ac:	asr	r6, r1, #31
   150b0:	mla	r7, r5, r6, r7
   150b4:	ldr	r6, [sp, #12]
   150b8:	str	r3, [r2, #304]	; 0x130
   150bc:	mla	r1, r6, r1, r7
   150c0:	str	r1, [r2, #308]	; 0x134
   150c4:	blt	15108 <dim_enter_array@@Base+0x694>
   150c8:	ldr	r7, [r2, #304]	; 0x130
   150cc:	ldr	r3, [r2, #308]	; 0x134
   150d0:	add	r1, r2, #312	; 0x138
   150d4:	add	r0, r0, #8
   150d8:	sub	r2, sl, #1
   150dc:	ldr	r6, [r0], #4
   150e0:	subs	r2, r2, #1
   150e4:	umull	r4, ip, r7, r6
   150e8:	asr	r5, r6, #31
   150ec:	mla	r7, r7, r5, ip
   150f0:	str	r4, [r1]
   150f4:	mla	r3, r3, r6, r7
   150f8:	mov	r7, r4
   150fc:	str	r3, [r1, #4]
   15100:	add	r1, r1, #8
   15104:	bne	150dc <dim_enter_array@@Base+0x668>
   15108:	ldr	r0, [sp, #20]
   1510c:	add	r0, r0, sl
   15110:	add	r1, r8, r0, lsl #3
   15114:	ldr	r0, [r1, #296]	; 0x128
   15118:	ldr	r2, [r1, #300]	; 0x12c
   1511c:	subs	r0, r0, #1
   15120:	sbcs	r0, r2, #0
   15124:	blt	151d8 <dim_enter_array@@Base+0x764>
   15128:	ldr	r0, [sp, #24]
   1512c:	cmp	sl, #2
   15130:	sub	r0, r0, #1
   15134:	add	r2, r8, r0, lsl #3
   15138:	add	r0, r8, r0, lsl #2
   1513c:	ldr	r0, [r0, #4]
   15140:	asr	r3, r0, #31
   15144:	str	r0, [r2, #176]	; 0xb0
   15148:	str	r3, [r2, #180]	; 0xb4
   1514c:	blt	15194 <dim_enter_array@@Base+0x720>
   15150:	ldr	r0, [sp, #20]
   15154:	add	r1, r1, #160	; 0xa0
   15158:	add	r0, r8, r0, lsl #2
   1515c:	sub	r0, r0, #4
   15160:	ldr	r2, [r0, sl, lsl #2]
   15164:	ldrd	r4, [r1, #8]
   15168:	umull	r6, r3, r4, r2
   1516c:	asr	r7, r2, #31
   15170:	mla	r3, r4, r7, r3
   15174:	mla	r7, r5, r2, r3
   15178:	sub	r3, sl, #2
   1517c:	sub	r2, sl, #1
   15180:	strd	r6, [r1]
   15184:	sub	r1, r1, #8
   15188:	cmp	r3, #0
   1518c:	mov	sl, r2
   15190:	bgt	15160 <dim_enter_array@@Base+0x6ec>
   15194:	ldr	r2, [sp, #20]
   15198:	cmp	r2, #1
   1519c:	blt	151d8 <dim_enter_array@@Base+0x764>
   151a0:	add	r1, r8, r2, lsl #3
   151a4:	add	r2, r2, #1
   151a8:	add	r0, r1, #168	; 0xa8
   151ac:	add	r1, r1, #176	; 0xb0
   151b0:	ldrd	r4, [r1]
   151b4:	ldrd	r6, [r0]
   151b8:	sub	r2, r2, #1
   151bc:	cmp	r2, #1
   151c0:	umull	r8, r3, r6, r4
   151c4:	mla	r3, r6, r5, r3
   151c8:	mla	r9, r7, r4, r3
   151cc:	strd	r8, [r0]
   151d0:	sub	r0, r0, #8
   151d4:	bgt	151b0 <dim_enter_array@@Base+0x73c>
   151d8:	sub	sp, fp, #28
   151dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151e0:	ldr	r0, [pc, #120]	; 15260 <dim_enter_array@@Base+0x7ec>
   151e4:	ldr	r1, [pc, #120]	; 15264 <dim_enter_array@@Base+0x7f0>
   151e8:	ldr	r3, [pc, #120]	; 15268 <dim_enter_array@@Base+0x7f4>
   151ec:	movw	r2, #386	; 0x182
   151f0:	add	r0, pc, r0
   151f4:	add	r1, pc, r1
   151f8:	add	r3, pc, r3
   151fc:	bl	12ac4 <__assert_fail@plt>
   15200:	ldr	r0, [pc, #100]	; 1526c <dim_enter_array@@Base+0x7f8>
   15204:	ldr	r1, [pc, #100]	; 15270 <dim_enter_array@@Base+0x7fc>
   15208:	ldr	r3, [pc, #100]	; 15274 <dim_enter_array@@Base+0x800>
   1520c:	movw	r2, #402	; 0x192
   15210:	add	r0, pc, r0
   15214:	add	r1, pc, r1
   15218:	add	r3, pc, r3
   1521c:	bl	12ac4 <__assert_fail@plt>
   15220:	ldr	r0, [pc, #28]	; 15244 <dim_enter_array@@Base+0x7d0>
   15224:	ldr	r1, [pc, #28]	; 15248 <dim_enter_array@@Base+0x7d4>
   15228:	ldr	r3, [pc, #28]	; 1524c <dim_enter_array@@Base+0x7d8>
   1522c:	movw	r2, #349	; 0x15d
   15230:	add	r0, pc, r0
   15234:	add	r1, pc, r1
   15238:	add	r3, pc, r3
   1523c:	bl	12ac4 <__assert_fail@plt>
   15240:	andeq	r8, r1, r4, lsr #14
   15244:	andeq	r5, r0, r9, lsl #10
   15248:	andeq	r5, r0, sl, lsr r5
   1524c:	ldrdeq	r5, [r0], -r4
   15250:			; <UNDEFINED> instruction: 0x000185b0
   15254:	andeq	r8, r1, ip, asr #11
   15258:	andeq	r5, r0, r9, lsl #15
   1525c:	andeq	r5, r0, r2, lsl #20
   15260:	andeq	r5, r0, r9, asr #10
   15264:	andeq	r5, r0, sl, ror r5
   15268:	andeq	r5, r0, r4, lsl r6
   1526c:	andeq	r5, r0, r3, lsl r6
   15270:	andeq	r5, r0, sl, asr r5
   15274:	strdeq	r5, [r0], -r4
   15278:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1527c:	add	fp, sp, #28
   15280:	sub	sp, sp, #44	; 0x2c
   15284:	str	r2, [sp]
   15288:	mov	r5, r1
   1528c:	mov	sl, r0
   15290:	sub	r1, fp, #32
   15294:	ldr	r7, [pc, #1052]	; 156b8 <dim_enter_array@@Base+0xc44>
   15298:	ldr	r7, [pc, r7]
   1529c:	add	r6, r7, #144	; 0x90
   152a0:	mov	r0, r6
   152a4:	bl	12794 <coda_cursor_get_type_class@plt>
   152a8:	cmp	r0, #0
   152ac:	beq	152b4 <dim_enter_array@@Base+0x840>
   152b0:	bl	18660 <handle_coda_error@@Base>
   152b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   152b8:	sub	r1, r0, #4
   152bc:	cmp	r1, #2
   152c0:	bcc	153a0 <dim_enter_array@@Base+0x92c>
   152c4:	cmp	r0, #0
   152c8:	beq	153e0 <dim_enter_array@@Base+0x96c>
   152cc:	cmp	r0, #1
   152d0:	bne	15658 <dim_enter_array@@Base+0xbe4>
   152d4:	add	r0, r5, r5, lsl #2
   152d8:	add	r9, r7, r0, lsl #4
   152dc:	ldr	r0, [r7, #3360]	; 0xd20
   152e0:	ldr	r4, [r9, #800]	; 0x320
   152e4:	cmp	r0, r5
   152e8:	bne	154d0 <dim_enter_array@@Base+0xa5c>
   152ec:	add	r8, sp, #8
   152f0:	add	r1, sp, #4
   152f4:	mov	r0, r6
   152f8:	mov	r2, r8
   152fc:	bl	12998 <coda_cursor_get_array_dim@plt>
   15300:	cmp	r0, #0
   15304:	beq	1530c <dim_enter_array@@Base+0x898>
   15308:	bl	18660 <handle_coda_error@@Base>
   1530c:	mov	r0, r9
   15310:	ldr	r1, [sp, #4]
   15314:	ldr	r2, [r0, #804]!	; 0x324
   15318:	cmp	r1, r2
   1531c:	bne	15698 <dim_enter_array@@Base+0xc24>
   15320:	cmp	r1, #1
   15324:	blt	155cc <dim_enter_array@@Base+0xb58>
   15328:	ldr	r1, [pc, #908]	; 156bc <dim_enter_array@@Base+0xc48>
   1532c:	add	r2, r9, #808	; 0x328
   15330:	add	r3, r9, #844	; 0x34c
   15334:	mov	r7, #0
   15338:	ldr	r1, [pc, r1]
   1533c:	add	ip, r1, r4, lsl #2
   15340:	ldr	r6, [r2, r7, lsl #2]
   15344:	cmn	r6, #1
   15348:	bne	1538c <dim_enter_array@@Base+0x918>
   1534c:	add	r4, ip, r7, lsl #2
   15350:	ldr	r6, [r8, r7, lsl #2]
   15354:	ldr	r1, [r3]
   15358:	ldr	r5, [r4, #108]	; 0x6c
   1535c:	str	r6, [r5, r1, lsl #2]
   15360:	ldr	r5, [r4, #4]
   15364:	cmn	r5, #1
   15368:	beq	15384 <dim_enter_array@@Base+0x910>
   1536c:	cmp	r5, r6
   15370:	strlt	r6, [r4, #4]
   15374:	ldr	r1, [r4, #36]	; 0x24
   15378:	cmp	r1, r6
   1537c:	strgt	r6, [r4, #36]	; 0x24
   15380:	b	1538c <dim_enter_array@@Base+0x918>
   15384:	str	r6, [r4, #4]
   15388:	str	r6, [r4, #36]	; 0x24
   1538c:	ldr	r1, [r0]
   15390:	add	r7, r7, #1
   15394:	cmp	r7, r1
   15398:	blt	15340 <dim_enter_array@@Base+0x8cc>
   1539c:	b	155cc <dim_enter_array@@Base+0xb58>
   153a0:	ldr	r1, [r7, #3360]	; 0xd20
   153a4:	cmp	r1, r5
   153a8:	bne	15678 <dim_enter_array@@Base+0xc04>
   153ac:	cmp	r0, #4
   153b0:	bne	15444 <dim_enter_array@@Base+0x9d0>
   153b4:	add	r1, sp, #4
   153b8:	mov	r0, r6
   153bc:	bl	1289c <coda_cursor_get_string_length@plt>
   153c0:	cmp	r0, #0
   153c4:	beq	153cc <dim_enter_array@@Base+0x958>
   153c8:	bl	18660 <handle_coda_error@@Base>
   153cc:	ldr	r0, [sp, #4]
   153d0:	str	r0, [sp, #8]
   153d4:	asr	r0, r0, #31
   153d8:	str	r0, [sp, #12]
   153dc:	b	1545c <dim_enter_array@@Base+0x9e8>
   153e0:	ldr	r0, [sp]
   153e4:	add	r2, sp, #8
   153e8:	add	r4, r7, r0, lsl #2
   153ec:	mov	r0, r6
   153f0:	ldr	r1, [r4, #3492]!	; 0xda4
   153f4:	bl	126a4 <coda_cursor_get_record_field_available_status@plt>
   153f8:	cmp	r0, #0
   153fc:	beq	15404 <dim_enter_array@@Base+0x990>
   15400:	bl	18660 <handle_coda_error@@Base>
   15404:	ldr	r0, [sp, #8]
   15408:	cmp	r0, #0
   1540c:	beq	15554 <dim_enter_array@@Base+0xae0>
   15410:	ldr	r1, [r4]
   15414:	mov	r0, r6
   15418:	bl	1280c <coda_cursor_goto_record_field_by_index@plt>
   1541c:	cmp	r0, #0
   15420:	beq	15428 <dim_enter_array@@Base+0x9b4>
   15424:	bl	18660 <handle_coda_error@@Base>
   15428:	ldr	r1, [sp]
   1542c:	add	r0, sl, #1
   15430:	add	r2, r1, #1
   15434:	mov	r1, r5
   15438:	bl	15278 <dim_enter_array@@Base+0x804>
   1543c:	mov	r0, r6
   15440:	b	1564c <dim_enter_array@@Base+0xbd8>
   15444:	add	r1, sp, #8
   15448:	mov	r0, r6
   1544c:	bl	1262c <coda_cursor_get_byte_size@plt>
   15450:	cmp	r0, #0
   15454:	beq	1545c <dim_enter_array@@Base+0x9e8>
   15458:	bl	18660 <handle_coda_error@@Base>
   1545c:	add	r0, r5, r5, lsl #2
   15460:	add	r0, r7, r0, lsl #4
   15464:	ldr	r1, [r0, #800]	; 0x320
   15468:	ldr	r3, [r0, #844]	; 0x34c
   1546c:	ldr	r0, [pc, #596]	; 156c8 <dim_enter_array@@Base+0xc54>
   15470:	ldr	r0, [pc, r0]
   15474:	ldr	r2, [sp, #12]
   15478:	add	r0, r0, r1, lsl #2
   1547c:	ldr	r1, [sp, #8]
   15480:	ldr	r7, [r0, #108]	; 0x6c
   15484:	str	r1, [r7, r3, lsl #2]
   15488:	mov	r3, r0
   1548c:	ldr	r7, [r3, #4]!
   15490:	cmn	r7, #1
   15494:	beq	154bc <dim_enter_array@@Base+0xa48>
   15498:	subs	r6, r7, r1
   1549c:	rscs	r7, r2, r7, asr #31
   154a0:	strlt	r1, [r3]
   154a4:	ldr	r3, [r0, #36]!	; 0x24
   154a8:	subs	r7, r1, r3
   154ac:	sbcs	r2, r2, r3, asr #31
   154b0:	strlt	r1, [r0]
   154b4:	sub	sp, fp, #28
   154b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154bc:	add	r0, r0, #36	; 0x24
   154c0:	str	r1, [r3]
   154c4:	str	r1, [r0]
   154c8:	sub	sp, fp, #28
   154cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154d0:	cmp	r5, #0
   154d4:	moveq	r0, #0
   154d8:	streq	r0, [r7, #844]	; 0x34c
   154dc:	ldr	r1, [r9, #804]	; 0x324
   154e0:	ldr	r2, [r9, #840]	; 0x348
   154e4:	ldr	r0, [r9, #844]	; 0x34c
   154e8:	mul	r2, r2, r0
   154ec:	cmp	r1, #1
   154f0:	str	r2, [r9, #924]	; 0x39c
   154f4:	blt	155d4 <dim_enter_array@@Base+0xb60>
   154f8:	ldr	r2, [pc, #448]	; 156c0 <dim_enter_array@@Base+0xc4c>
   154fc:	add	r1, r1, r4
   15500:	add	r3, r4, #27
   15504:	ldr	r2, [pc, r2]
   15508:	add	r2, r2, r4, lsl #2
   1550c:	mov	r4, #1
   15510:	add	r2, r2, #72	; 0x48
   15514:	ldr	r7, [r2]
   15518:	cmp	r7, #0
   1551c:	subeq	r7, r2, #68	; 0x44
   15520:	ldrne	r7, [r2, #36]	; 0x24
   15524:	add	r2, r2, #4
   15528:	addne	r7, r7, r0, lsl #2
   1552c:	ldr	r7, [r7]
   15530:	mul	r4, r7, r4
   15534:	add	r7, r3, #1
   15538:	sub	r3, r3, #26
   1553c:	cmp	r3, r1
   15540:	mov	r3, r7
   15544:	blt	15514 <dim_enter_array@@Base+0xaa0>
   15548:	cmp	r4, #1
   1554c:	bge	155d8 <dim_enter_array@@Base+0xb64>
   15550:	b	155cc <dim_enter_array@@Base+0xb58>
   15554:	ldr	r0, [r7, #3360]	; 0xd20
   15558:	add	r0, r0, r0, lsl #2
   1555c:	add	r3, r7, r0, lsl #4
   15560:	mov	r0, r3
   15564:	ldr	r5, [r0, #804]!	; 0x324
   15568:	cmp	r5, #1
   1556c:	blt	155cc <dim_enter_array@@Base+0xb58>
   15570:	ldr	r1, [r0, #-4]
   15574:	ldr	r2, [pc, #328]	; 156c4 <dim_enter_array@@Base+0xc50>
   15578:	mov	r7, #0
   1557c:	mov	r6, #0
   15580:	ldr	r2, [pc, r2]
   15584:	add	ip, r2, r1, lsl #2
   15588:	add	r2, r3, #808	; 0x328
   1558c:	add	r3, r3, #844	; 0x34c
   15590:	ldr	r4, [r2, r6, lsl #2]
   15594:	cmn	r4, #1
   15598:	bne	155c0 <dim_enter_array@@Base+0xb4c>
   1559c:	add	r5, ip, r6, lsl #2
   155a0:	ldr	r1, [r3]
   155a4:	ldr	r4, [r5, #108]	; 0x6c
   155a8:	str	r7, [r4, r1, lsl #2]
   155ac:	ldr	r1, [r5, #4]
   155b0:	cmn	r1, #1
   155b4:	streq	r7, [r5, #4]
   155b8:	str	r7, [r5, #36]	; 0x24
   155bc:	ldr	r5, [r0]
   155c0:	add	r6, r6, #1
   155c4:	cmp	r6, r5
   155c8:	blt	15590 <dim_enter_array@@Base+0xb1c>
   155cc:	sub	sp, fp, #28
   155d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155d4:	mov	r4, #1
   155d8:	mov	r0, r6
   155dc:	mov	r8, r6
   155e0:	bl	127dc <coda_cursor_goto_first_array_element@plt>
   155e4:	cmp	r0, #0
   155e8:	beq	155f0 <dim_enter_array@@Base+0xb7c>
   155ec:	bl	18660 <handle_coda_error@@Base>
   155f0:	add	r7, sl, #1
   155f4:	add	r9, r9, #924	; 0x39c
   155f8:	add	r5, r5, #1
   155fc:	sub	r6, r4, #1
   15600:	mov	sl, #0
   15604:	ldr	r2, [sp]
   15608:	mov	r0, r7
   1560c:	mov	r1, r5
   15610:	bl	15278 <dim_enter_array@@Base+0x804>
   15614:	cmp	sl, r6
   15618:	bge	1563c <dim_enter_array@@Base+0xbc8>
   1561c:	mov	r0, r8
   15620:	bl	128d8 <coda_cursor_goto_next_array_element@plt>
   15624:	cmp	r0, #0
   15628:	beq	15630 <dim_enter_array@@Base+0xbbc>
   1562c:	bl	18660 <handle_coda_error@@Base>
   15630:	ldr	r0, [r9]
   15634:	add	r0, r0, #1
   15638:	str	r0, [r9]
   1563c:	add	sl, sl, #1
   15640:	cmp	r4, sl
   15644:	bne	15604 <dim_enter_array@@Base+0xb90>
   15648:	mov	r0, r8
   1564c:	bl	1286c <coda_cursor_goto_parent@plt>
   15650:	sub	sp, fp, #28
   15654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15658:	ldr	r0, [pc, #132]	; 156e4 <dim_enter_array@@Base+0xc70>
   1565c:	ldr	r1, [pc, #132]	; 156e8 <dim_enter_array@@Base+0xc74>
   15660:	ldr	r3, [pc, #132]	; 156ec <dim_enter_array@@Base+0xc78>
   15664:	movw	r2, #294	; 0x126
   15668:	add	r0, pc, r0
   1566c:	add	r1, pc, r1
   15670:	add	r3, pc, r3
   15674:	bl	12ac4 <__assert_fail@plt>
   15678:	ldr	r0, [pc, #88]	; 156d8 <dim_enter_array@@Base+0xc64>
   1567c:	ldr	r1, [pc, #88]	; 156dc <dim_enter_array@@Base+0xc68>
   15680:	ldr	r3, [pc, #88]	; 156e0 <dim_enter_array@@Base+0xc6c>
   15684:	mov	r2, #252	; 0xfc
   15688:	add	r0, pc, r0
   1568c:	add	r1, pc, r1
   15690:	add	r3, pc, r3
   15694:	bl	12ac4 <__assert_fail@plt>
   15698:	ldr	r0, [pc, #44]	; 156cc <dim_enter_array@@Base+0xc58>
   1569c:	ldr	r1, [pc, #44]	; 156d0 <dim_enter_array@@Base+0xc5c>
   156a0:	ldr	r3, [pc, #44]	; 156d4 <dim_enter_array@@Base+0xc60>
   156a4:	mov	r2, #125	; 0x7d
   156a8:	add	r0, pc, r0
   156ac:	add	r1, pc, r1
   156b0:	add	r3, pc, r3
   156b4:	bl	12ac4 <__assert_fail@plt>
   156b8:	andeq	r7, r1, r4, lsl pc
   156bc:	andeq	r7, r1, r4, lsr #29
   156c0:	ldrdeq	r7, [r1], -r8
   156c4:	andeq	r7, r1, ip, asr ip
   156c8:	andeq	r7, r1, ip, ror #26
   156cc:	andeq	r5, r0, r9, ror #3
   156d0:	andeq	r5, r0, r2, asr #1
   156d4:	andeq	r5, r0, r2, lsl #4
   156d8:	andeq	r5, r0, r5, asr r2
   156dc:	andeq	r5, r0, r2, ror #1
   156e0:	andeq	r5, r0, r2, lsr #4
   156e4:	ldrdeq	r5, [r0], -r1
   156e8:	andeq	r5, r0, r2, lsl #2
   156ec:	andeq	r5, r0, r2, asr #4

000156f0 <dim_leave_array@@Base>:
   156f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   156f4:	add	fp, sp, #24
   156f8:	ldr	r0, [pc, #284]	; 1581c <dim_leave_array@@Base+0x12c>
   156fc:	ldr	r0, [pc, r0]
   15700:	ldr	r1, [r0, #3360]	; 0xd20
   15704:	cmn	r1, #1
   15708:	ble	157fc <dim_leave_array@@Base+0x10c>
   1570c:	add	r1, r1, r1, lsl #2
   15710:	add	r6, r0, r1, lsl #4
   15714:	ldr	r0, [r6, #804]!	; 0x324
   15718:	ldr	r8, [r6, #-4]
   1571c:	ldr	r5, [pc, #252]	; 15820 <dim_leave_array@@Base+0x130>
   15720:	cmp	r0, #1
   15724:	ldr	r5, [pc, r5]
   15728:	ldr	r1, [r5]
   1572c:	sub	r1, r1, r0
   15730:	str	r1, [r5]
   15734:	blt	1576c <dim_leave_array@@Base+0x7c>
   15738:	add	r7, r5, r8, lsl #2
   1573c:	mov	r4, #0
   15740:	add	r1, r7, r4, lsl #2
   15744:	ldr	r2, [r1, #72]	; 0x48
   15748:	cmp	r2, #0
   1574c:	beq	1575c <dim_leave_array@@Base+0x6c>
   15750:	ldr	r0, [r1, #108]	; 0x6c
   15754:	bl	12704 <free@plt>
   15758:	ldr	r0, [r6]
   1575c:	add	r4, r4, #1
   15760:	cmp	r4, r0
   15764:	blt	15740 <dim_leave_array@@Base+0x50>
   15768:	ldr	r1, [r5]
   1576c:	mvn	r2, #0
   15770:	cmp	r1, #1
   15774:	str	r2, [r5, #104]	; 0x68
   15778:	mov	r2, #0
   1577c:	str	r2, [r5, #68]	; 0x44
   15780:	blt	157a8 <dim_leave_array@@Base+0xb8>
   15784:	mov	r3, #1
   15788:	add	r7, r5, r2, lsl #2
   1578c:	ldr	r7, [r7, #72]	; 0x48
   15790:	cmp	r7, #0
   15794:	strne	r2, [r5, #104]	; 0x68
   15798:	add	r2, r2, #1
   1579c:	strne	r3, [r5, #68]	; 0x44
   157a0:	cmp	r2, r1
   157a4:	blt	15788 <dim_leave_array@@Base+0x98>
   157a8:	add	r0, r8, r0
   157ac:	add	r0, r5, r0, lsl #3
   157b0:	ldr	r1, [r0, #296]	; 0x128
   157b4:	ldr	r0, [r0, #300]	; 0x12c
   157b8:	subs	r1, r1, #1
   157bc:	sbcs	r0, r0, #0
   157c0:	cmpge	r8, #1
   157c4:	blt	157f8 <dim_leave_array@@Base+0x108>
   157c8:	add	r0, r5, r8, lsl #3
   157cc:	add	r6, r8, #1
   157d0:	add	r4, r0, #168	; 0xa8
   157d4:	add	r5, r0, #176	; 0xb0
   157d8:	ldrd	r0, [r4]
   157dc:	ldrd	r2, [r5]
   157e0:	bl	1a278 <main@@Base+0x1bcc>
   157e4:	sub	r6, r6, #1
   157e8:	strd	r0, [r4]
   157ec:	sub	r4, r4, #8
   157f0:	cmp	r6, #1
   157f4:	bgt	157d8 <dim_leave_array@@Base+0xe8>
   157f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   157fc:	ldr	r0, [pc, #32]	; 15824 <dim_leave_array@@Base+0x134>
   15800:	ldr	r1, [pc, #32]	; 15828 <dim_leave_array@@Base+0x138>
   15804:	ldr	r3, [pc, #32]	; 1582c <dim_leave_array@@Base+0x13c>
   15808:	movw	r2, #579	; 0x243
   1580c:	add	r0, pc, r0
   15810:	add	r1, pc, r1
   15814:	add	r3, pc, r3
   15818:	bl	12ac4 <__assert_fail@plt>
   1581c:			; <UNDEFINED> instruction: 0x00017ab0
   15820:			; <UNDEFINED> instruction: 0x00017ab8
   15824:	andeq	r5, r0, r0, asr r0
   15828:	andeq	r4, r0, lr, asr pc
   1582c:	andeq	r5, r0, r6, rrx

00015830 <dim_record_field_available@@Base>:
   15830:	mov	r0, #0
   15834:	mov	r1, #0
   15838:	mov	r2, #0
   1583c:	b	15840 <dim_record_field_available@@Base+0x10>
   15840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15844:	add	fp, sp, #28
   15848:	sub	sp, sp, #12
   1584c:	ldr	r4, [pc, #568]	; 15a8c <dim_record_field_available@@Base+0x25c>
   15850:	mov	r6, r1
   15854:	mov	r8, r0
   15858:	add	r1, sp, #8
   1585c:	mov	sl, r2
   15860:	ldr	r4, [pc, r4]
   15864:	add	r0, r4, #144	; 0x90
   15868:	str	r0, [sp]
   1586c:	bl	12794 <coda_cursor_get_type_class@plt>
   15870:	cmp	r0, #0
   15874:	beq	1587c <dim_record_field_available@@Base+0x4c>
   15878:	bl	18660 <handle_coda_error@@Base>
   1587c:	ldr	r0, [sp, #8]
   15880:	cmp	r0, #0
   15884:	beq	1592c <dim_record_field_available@@Base+0xfc>
   15888:	cmp	r0, #1
   1588c:	bne	15a4c <dim_record_field_available@@Base+0x21c>
   15890:	ldr	r0, [r4, #3360]	; 0xd20
   15894:	cmp	r0, r6
   15898:	ble	15a6c <dim_record_field_available@@Base+0x23c>
   1589c:	add	r0, r6, r6, lsl #2
   158a0:	cmp	r6, #0
   158a4:	add	r7, r4, r0, lsl #4
   158a8:	moveq	r0, #0
   158ac:	ldr	r3, [r7, #800]	; 0x320
   158b0:	streq	r0, [r4, #844]	; 0x34c
   158b4:	ldr	r1, [r7, #804]	; 0x324
   158b8:	ldr	r2, [r7, #840]	; 0x348
   158bc:	ldr	r0, [r7, #844]	; 0x34c
   158c0:	mul	r2, r2, r0
   158c4:	cmp	r1, #1
   158c8:	str	r2, [r7, #924]	; 0x39c
   158cc:	blt	159ac <dim_record_field_available@@Base+0x17c>
   158d0:	ldr	r2, [pc, #440]	; 15a90 <dim_record_field_available@@Base+0x260>
   158d4:	add	r1, r1, r3
   158d8:	mov	r4, #1
   158dc:	ldr	r2, [pc, r2]
   158e0:	add	r2, r2, r3, lsl #2
   158e4:	add	r3, r3, #27
   158e8:	add	r2, r2, #72	; 0x48
   158ec:	ldr	r5, [r2]
   158f0:	cmp	r5, #0
   158f4:	subeq	r5, r2, #68	; 0x44
   158f8:	ldrne	r5, [r2, #36]	; 0x24
   158fc:	add	r2, r2, #4
   15900:	addne	r5, r5, r0, lsl #2
   15904:	ldr	r5, [r5]
   15908:	mul	r4, r5, r4
   1590c:	add	r5, r3, #1
   15910:	sub	r3, r3, #26
   15914:	cmp	r3, r1
   15918:	mov	r3, r5
   1591c:	blt	158ec <dim_record_field_available@@Base+0xbc>
   15920:	cmp	r4, #1
   15924:	bge	159b0 <dim_record_field_available@@Base+0x180>
   15928:	b	15a2c <dim_record_field_available@@Base+0x1fc>
   1592c:	add	r5, r4, sl, lsl #2
   15930:	ldr	r0, [sp]
   15934:	add	r2, sp, #4
   15938:	ldr	r1, [r5, #3492]!	; 0xda4
   1593c:	bl	126a4 <coda_cursor_get_record_field_available_status@plt>
   15940:	cmp	r0, #0
   15944:	beq	1594c <dim_record_field_available@@Base+0x11c>
   15948:	bl	18660 <handle_coda_error@@Base>
   1594c:	ldr	r0, [sp, #4]
   15950:	cmp	r0, #0
   15954:	beq	15a2c <dim_record_field_available@@Base+0x1fc>
   15958:	ldr	r0, [r4, #3748]	; 0xea4
   1595c:	sub	r0, r0, #1
   15960:	cmp	r0, sl
   15964:	beq	15a40 <dim_record_field_available@@Base+0x210>
   15968:	ldr	r1, [r5]
   1596c:	ldr	r0, [sp]
   15970:	bl	1280c <coda_cursor_goto_record_field_by_index@plt>
   15974:	cmp	r0, #0
   15978:	beq	15980 <dim_record_field_available@@Base+0x150>
   1597c:	bl	18660 <handle_coda_error@@Base>
   15980:	add	r0, r8, #1
   15984:	add	r2, sl, #1
   15988:	mov	r1, r6
   1598c:	bl	15840 <dim_record_field_available@@Base+0x10>
   15990:	str	r0, [sp, #4]
   15994:	ldr	r0, [sp]
   15998:	bl	1286c <coda_cursor_goto_parent@plt>
   1599c:	ldr	r0, [sp, #4]
   159a0:	cmp	r0, #0
   159a4:	bne	15a40 <dim_record_field_available@@Base+0x210>
   159a8:	b	15a2c <dim_record_field_available@@Base+0x1fc>
   159ac:	mov	r4, #1
   159b0:	ldr	r0, [sp]
   159b4:	bl	127dc <coda_cursor_goto_first_array_element@plt>
   159b8:	cmp	r0, #0
   159bc:	beq	159c4 <dim_record_field_available@@Base+0x194>
   159c0:	bl	18660 <handle_coda_error@@Base>
   159c4:	add	r5, r7, #924	; 0x39c
   159c8:	add	r7, r8, #1
   159cc:	add	r6, r6, #1
   159d0:	sub	r9, r4, #1
   159d4:	mov	r8, #0
   159d8:	mov	r0, r7
   159dc:	mov	r1, r6
   159e0:	mov	r2, sl
   159e4:	bl	15840 <dim_record_field_available@@Base+0x10>
   159e8:	cmp	r0, #0
   159ec:	bne	15a38 <dim_record_field_available@@Base+0x208>
   159f0:	cmp	r8, r9
   159f4:	bge	15a18 <dim_record_field_available@@Base+0x1e8>
   159f8:	ldr	r0, [sp]
   159fc:	bl	128d8 <coda_cursor_goto_next_array_element@plt>
   15a00:	cmp	r0, #0
   15a04:	beq	15a0c <dim_record_field_available@@Base+0x1dc>
   15a08:	bl	18660 <handle_coda_error@@Base>
   15a0c:	ldr	r0, [r5]
   15a10:	add	r0, r0, #1
   15a14:	str	r0, [r5]
   15a18:	add	r8, r8, #1
   15a1c:	cmp	r8, r4
   15a20:	blt	159d8 <dim_record_field_available@@Base+0x1a8>
   15a24:	ldr	r0, [sp]
   15a28:	bl	1286c <coda_cursor_goto_parent@plt>
   15a2c:	mov	r0, #0
   15a30:	sub	sp, fp, #28
   15a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a38:	ldr	r0, [sp]
   15a3c:	bl	1286c <coda_cursor_goto_parent@plt>
   15a40:	mov	r0, #1
   15a44:	sub	sp, fp, #28
   15a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a4c:	ldr	r0, [pc, #64]	; 15a94 <dim_record_field_available@@Base+0x264>
   15a50:	ldr	r1, [pc, #64]	; 15a98 <dim_record_field_available@@Base+0x268>
   15a54:	ldr	r3, [pc, #64]	; 15a9c <dim_record_field_available@@Base+0x26c>
   15a58:	movw	r2, #729	; 0x2d9
   15a5c:	add	r0, pc, r0
   15a60:	add	r1, pc, r1
   15a64:	add	r3, pc, r3
   15a68:	bl	12ac4 <__assert_fail@plt>
   15a6c:	ldr	r0, [pc, #44]	; 15aa0 <dim_record_field_available@@Base+0x270>
   15a70:	ldr	r1, [pc, #44]	; 15aa4 <dim_record_field_available@@Base+0x274>
   15a74:	ldr	r3, [pc, #44]	; 15aa8 <dim_record_field_available@@Base+0x278>
   15a78:	movw	r2, #638	; 0x27e
   15a7c:	add	r0, pc, r0
   15a80:	add	r1, pc, r1
   15a84:	add	r3, pc, r3
   15a88:	bl	12ac4 <__assert_fail@plt>
   15a8c:	andeq	r7, r1, ip, asr #18
   15a90:	andeq	r7, r1, r0, lsl #18
   15a94:	ldrdeq	r4, [r0], -sp
   15a98:	andeq	r4, r0, lr, lsl #26
   15a9c:	andeq	r4, r0, r8, asr #29
   15aa0:	andeq	r4, r0, r9, lsl #29
   15aa4:	andeq	r4, r0, lr, ror #25
   15aa8:	andeq	r4, r0, r8, lsr #29

00015aac <codadump_filter_create@@Base>:
   15aac:	push	{r4, r5, r6, r7, fp, lr}
   15ab0:	add	fp, sp, #16
   15ab4:	sub	sp, sp, #16
   15ab8:	mov	r1, #0
   15abc:	str	r0, [sp, #8]
   15ac0:	cmp	r0, #0
   15ac4:	str	r1, [sp, #4]
   15ac8:	str	r1, [sp, #12]
   15acc:	ldrbne	r1, [r0]
   15ad0:	cmpne	r1, #0
   15ad4:	bne	15ae4 <codadump_filter_create@@Base+0x38>
   15ad8:	ldr	r0, [sp, #4]
   15adc:	sub	sp, fp, #16
   15ae0:	pop	{r4, r5, r6, r7, fp, pc}
   15ae4:	add	r4, sp, #12
   15ae8:	add	r5, sp, #8
   15aec:	add	r6, sp, #4
   15af0:	mov	r7, #0
   15af4:	mov	r1, r4
   15af8:	mov	r2, r5
   15afc:	bl	15cb0 <codadump_filter_get_next_filter@@Base+0x40>
   15b00:	ldr	r1, [sp, #12]
   15b04:	cmp	r1, #0
   15b08:	beq	15b2c <codadump_filter_create@@Base+0x80>
   15b0c:	mov	r0, r6
   15b10:	bl	15f50 <codadump_filter_get_next_filter@@Base+0x2e0>
   15b14:	ldr	r0, [sp, #8]
   15b18:	str	r7, [sp, #12]
   15b1c:	ldrb	r1, [r0]
   15b20:	cmp	r1, #0
   15b24:	bne	15af4 <codadump_filter_create@@Base+0x48>
   15b28:	b	15ad8 <codadump_filter_create@@Base+0x2c>
   15b2c:	add	r0, sp, #4
   15b30:	bl	15b38 <codadump_filter_remove@@Base>
   15b34:	b	15ad8 <codadump_filter_create@@Base+0x2c>

00015b38 <codadump_filter_remove@@Base>:
   15b38:	push	{r4, sl, fp, lr}
   15b3c:	add	fp, sp, #8
   15b40:	cmp	r0, #0
   15b44:	beq	15bc4 <codadump_filter_remove@@Base+0x8c>
   15b48:	mov	r4, r0
   15b4c:	ldr	r0, [r0]
   15b50:	cmp	r0, #0
   15b54:	popeq	{r4, sl, fp, pc}
   15b58:	mov	r1, r0
   15b5c:	ldr	r2, [r1, #8]!
   15b60:	cmp	r2, #0
   15b64:	beq	15b74 <codadump_filter_remove@@Base+0x3c>
   15b68:	mov	r0, r1
   15b6c:	bl	15b38 <codadump_filter_remove@@Base>
   15b70:	ldr	r0, [r4]
   15b74:	mov	r1, r0
   15b78:	ldr	r2, [r1, #4]!
   15b7c:	cmp	r2, #0
   15b80:	beq	15b90 <codadump_filter_remove@@Base+0x58>
   15b84:	mov	r0, r1
   15b88:	bl	15b38 <codadump_filter_remove@@Base>
   15b8c:	ldr	r0, [r4]
   15b90:	ldr	r1, [r0]
   15b94:	cmp	r1, #0
   15b98:	beq	15bb4 <codadump_filter_remove@@Base+0x7c>
   15b9c:	mov	r0, r1
   15ba0:	bl	12704 <free@plt>
   15ba4:	ldr	r0, [r4]
   15ba8:	mov	r1, #0
   15bac:	str	r1, [r0]
   15bb0:	ldr	r0, [r4]
   15bb4:	bl	12704 <free@plt>
   15bb8:	mov	r0, #0
   15bbc:	str	r0, [r4]
   15bc0:	pop	{r4, sl, fp, pc}
   15bc4:	ldr	r0, [pc, #24]	; 15be4 <codadump_filter_remove@@Base+0xac>
   15bc8:	ldr	r1, [pc, #24]	; 15be8 <codadump_filter_remove@@Base+0xb0>
   15bcc:	ldr	r3, [pc, #24]	; 15bec <codadump_filter_remove@@Base+0xb4>
   15bd0:	mov	r2, #192	; 0xc0
   15bd4:	add	r0, pc, r0
   15bd8:	add	r1, pc, r1
   15bdc:	add	r3, pc, r3
   15be0:	bl	12ac4 <__assert_fail@plt>
   15be4:	andeq	r4, r0, sp, lsl #27
   15be8:	muleq	r0, r8, sp
   15bec:	strdeq	r4, [r0], -r7

00015bf0 <codadump_filter_get_fieldname@@Base>:
   15bf0:	cmp	r0, #0
   15bf4:	ldrne	r0, [r0]
   15bf8:	bxne	lr
   15bfc:	push	{fp, lr}
   15c00:	mov	fp, sp
   15c04:	ldr	r0, [pc, #24]	; 15c24 <codadump_filter_get_fieldname@@Base+0x34>
   15c08:	ldr	r1, [pc, #24]	; 15c28 <codadump_filter_get_fieldname@@Base+0x38>
   15c0c:	ldr	r3, [pc, #24]	; 15c2c <codadump_filter_get_fieldname@@Base+0x3c>
   15c10:	mov	r2, #216	; 0xd8
   15c14:	add	r0, pc, r0
   15c18:	add	r1, pc, r1
   15c1c:	add	r3, pc, r3
   15c20:	bl	12ac4 <__assert_fail@plt>
   15c24:	andeq	r4, r0, sp, asr #26
   15c28:	andeq	r4, r0, r8, asr sp
   15c2c:	andeq	r4, r0, r7, ror #27

00015c30 <codadump_filter_get_subfilter@@Base>:
   15c30:	cmp	r0, #0
   15c34:	ldrne	r0, [r0, #4]
   15c38:	bxne	lr
   15c3c:	push	{fp, lr}
   15c40:	mov	fp, sp
   15c44:	ldr	r0, [pc, #24]	; 15c64 <codadump_filter_get_subfilter@@Base+0x34>
   15c48:	ldr	r1, [pc, #24]	; 15c68 <codadump_filter_get_subfilter@@Base+0x38>
   15c4c:	ldr	r3, [pc, #24]	; 15c6c <codadump_filter_get_subfilter@@Base+0x3c>
   15c50:	mov	r2, #223	; 0xdf
   15c54:	add	r0, pc, r0
   15c58:	add	r1, pc, r1
   15c5c:	add	r3, pc, r3
   15c60:	bl	12ac4 <__assert_fail@plt>
   15c64:	andeq	r4, r0, sp, lsl #26
   15c68:	andeq	r4, r0, r8, lsl sp
   15c6c:	andeq	r4, r0, r4, ror #27

00015c70 <codadump_filter_get_next_filter@@Base>:
   15c70:	cmp	r0, #0
   15c74:	ldrne	r0, [r0, #8]
   15c78:	bxne	lr
   15c7c:	push	{fp, lr}
   15c80:	mov	fp, sp
   15c84:	ldr	r0, [pc, #24]	; 15ca4 <codadump_filter_get_next_filter@@Base+0x34>
   15c88:	ldr	r1, [pc, #24]	; 15ca8 <codadump_filter_get_next_filter@@Base+0x38>
   15c8c:	ldr	r3, [pc, #24]	; 15cac <codadump_filter_get_next_filter@@Base+0x3c>
   15c90:	mov	r2, #230	; 0xe6
   15c94:	add	r0, pc, r0
   15c98:	add	r1, pc, r1
   15c9c:	add	r3, pc, r3
   15ca0:	bl	12ac4 <__assert_fail@plt>
   15ca4:	andeq	r4, r0, sp, asr #25
   15ca8:	ldrdeq	r4, [r0], -r8
   15cac:	andeq	r4, r0, r6, ror #27
   15cb0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15cb4:	add	fp, sp, #24
   15cb8:	sub	sp, sp, #8
   15cbc:	cmp	r0, #0
   15cc0:	beq	15ebc <codadump_filter_get_next_filter@@Base+0x24c>
   15cc4:	mov	r9, r1
   15cc8:	cmp	r1, #0
   15ccc:	beq	15edc <codadump_filter_get_next_filter@@Base+0x26c>
   15cd0:	mov	r8, r2
   15cd4:	cmp	r2, #0
   15cd8:	beq	15efc <codadump_filter_get_next_filter@@Base+0x28c>
   15cdc:	movw	r4, #3
   15ce0:	mov	r6, r0
   15ce4:	mov	r1, #1
   15ce8:	movt	r4, #128	; 0x80
   15cec:	b	15cf4 <codadump_filter_get_next_filter@@Base+0x84>
   15cf0:	add	r6, r6, #1
   15cf4:	ldrb	r0, [r6]
   15cf8:	sub	r2, r0, #9
   15cfc:	cmp	r2, #23
   15d00:	bhi	15d0c <codadump_filter_get_next_filter@@Base+0x9c>
   15d04:	tst	r4, r1, lsl r2
   15d08:	bne	15cf0 <codadump_filter_get_next_filter@@Base+0x80>
   15d0c:	mov	r7, #0
   15d10:	mvn	r1, #43	; 0x2b
   15d14:	mov	r2, #1
   15d18:	movw	r3, #32773	; 0x8005
   15d1c:	b	15d2c <codadump_filter_get_next_filter@@Base+0xbc>
   15d20:	add	r0, r6, r7
   15d24:	add	r7, r7, #1
   15d28:	ldrb	r0, [r0, #1]
   15d2c:	uxtab	r5, r1, r0
   15d30:	cmp	r5, #15
   15d34:	bhi	15d40 <codadump_filter_get_next_filter@@Base+0xd0>
   15d38:	tst	r3, r2, lsl r5
   15d3c:	bne	15d4c <codadump_filter_get_next_filter@@Base+0xdc>
   15d40:	uxtb	r0, r0
   15d44:	cmp	r0, #0
   15d48:	bne	15d20 <codadump_filter_get_next_filter@@Base+0xb0>
   15d4c:	cmp	r7, #0
   15d50:	beq	15e60 <codadump_filter_get_next_filter@@Base+0x1f0>
   15d54:	mov	r0, #12
   15d58:	bl	1283c <malloc@plt>
   15d5c:	cmp	r0, #0
   15d60:	str	r0, [r9]
   15d64:	bne	15d90 <codadump_filter_get_next_filter@@Base+0x120>
   15d68:	mov	r0, #69	; 0x45
   15d6c:	mov	r2, #12
   15d70:	str	r0, [sp]
   15d74:	mvn	r0, #0
   15d78:	ldr	r1, [pc, #412]	; 15f1c <codadump_filter_get_next_filter@@Base+0x2ac>
   15d7c:	ldr	r3, [pc, #412]	; 15f20 <codadump_filter_get_next_filter@@Base+0x2b0>
   15d80:	add	r1, pc, r1
   15d84:	add	r3, pc, r3
   15d88:	bl	126bc <coda_set_error@plt>
   15d8c:	bl	18660 <handle_coda_error@@Base>
   15d90:	add	r5, r7, #1
   15d94:	mov	r0, r5
   15d98:	bl	1283c <malloc@plt>
   15d9c:	ldr	r1, [r9]
   15da0:	str	r0, [r1]
   15da4:	ldr	r0, [r9]
   15da8:	ldr	r0, [r0]
   15dac:	cmp	r0, #0
   15db0:	bne	15de4 <codadump_filter_get_next_filter@@Base+0x174>
   15db4:	mov	r0, #76	; 0x4c
   15db8:	mov	r2, r5
   15dbc:	str	r0, [sp]
   15dc0:	mvn	r0, #0
   15dc4:	ldr	r1, [pc, #344]	; 15f24 <codadump_filter_get_next_filter@@Base+0x2b4>
   15dc8:	ldr	r3, [pc, #344]	; 15f28 <codadump_filter_get_next_filter@@Base+0x2b8>
   15dcc:	add	r1, pc, r1
   15dd0:	add	r3, pc, r3
   15dd4:	bl	126bc <coda_set_error@plt>
   15dd8:	bl	18660 <handle_coda_error@@Base>
   15ddc:	ldr	r0, [r9]
   15de0:	ldr	r0, [r0]
   15de4:	mov	r1, r6
   15de8:	mov	r2, r7
   15dec:	add	r5, r6, r7
   15df0:	bl	12938 <strncpy@plt>
   15df4:	ldr	r0, [r9]
   15df8:	mov	r1, #0
   15dfc:	str	r1, [r0, #4]
   15e00:	ldr	r0, [r9]
   15e04:	str	r1, [r0, #8]
   15e08:	mov	r1, #1
   15e0c:	ldr	r0, [r9]
   15e10:	ldr	r0, [r0]
   15e14:	add	r0, r0, r7
   15e18:	b	15e20 <codadump_filter_get_next_filter@@Base+0x1b0>
   15e1c:	sub	r0, r0, #1
   15e20:	ldrb	r2, [r0, #-1]
   15e24:	sub	r2, r2, #9
   15e28:	cmp	r2, #23
   15e2c:	bhi	15e38 <codadump_filter_get_next_filter@@Base+0x1c8>
   15e30:	tst	r4, r1, lsl r2
   15e34:	bne	15e1c <codadump_filter_get_next_filter@@Base+0x1ac>
   15e38:	mov	r1, #0
   15e3c:	strb	r1, [r0]
   15e40:	ldrb	r0, [r6, r7]
   15e44:	cmp	r0, #44	; 0x2c
   15e48:	cmpne	r0, #59	; 0x3b
   15e4c:	bne	15e70 <codadump_filter_get_next_filter@@Base+0x200>
   15e50:	add	r0, r5, #1
   15e54:	str	r0, [r8]
   15e58:	sub	sp, fp, #24
   15e5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15e60:	mov	r0, #0
   15e64:	str	r0, [r9]
   15e68:	sub	sp, fp, #24
   15e6c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15e70:	cmp	r0, #46	; 0x2e
   15e74:	strne	r5, [r8]
   15e78:	subne	sp, fp, #24
   15e7c:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   15e80:	ldr	r1, [r9]
   15e84:	add	r0, r5, #1
   15e88:	mov	r2, r8
   15e8c:	add	r1, r1, #4
   15e90:	bl	15cb0 <codadump_filter_get_next_filter@@Base+0x40>
   15e94:	ldr	r0, [r9]
   15e98:	ldr	r0, [r0, #4]
   15e9c:	cmp	r0, #0
   15ea0:	beq	15eac <codadump_filter_get_next_filter@@Base+0x23c>
   15ea4:	sub	sp, fp, #24
   15ea8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15eac:	mov	r0, r9
   15eb0:	sub	sp, fp, #24
   15eb4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   15eb8:	b	15b38 <codadump_filter_remove@@Base>
   15ebc:	ldr	r0, [pc, #104]	; 15f2c <codadump_filter_get_next_filter@@Base+0x2bc>
   15ec0:	ldr	r1, [pc, #104]	; 15f30 <codadump_filter_get_next_filter@@Base+0x2c0>
   15ec4:	ldr	r3, [pc, #104]	; 15f34 <codadump_filter_get_next_filter@@Base+0x2c4>
   15ec8:	mov	r2, #44	; 0x2c
   15ecc:	add	r0, pc, r0
   15ed0:	add	r1, pc, r1
   15ed4:	add	r3, pc, r3
   15ed8:	bl	12ac4 <__assert_fail@plt>
   15edc:	ldr	r0, [pc, #84]	; 15f38 <codadump_filter_get_next_filter@@Base+0x2c8>
   15ee0:	ldr	r1, [pc, #84]	; 15f3c <codadump_filter_get_next_filter@@Base+0x2cc>
   15ee4:	ldr	r3, [pc, #84]	; 15f40 <codadump_filter_get_next_filter@@Base+0x2d0>
   15ee8:	mov	r2, #45	; 0x2d
   15eec:	add	r0, pc, r0
   15ef0:	add	r1, pc, r1
   15ef4:	add	r3, pc, r3
   15ef8:	bl	12ac4 <__assert_fail@plt>
   15efc:	ldr	r0, [pc, #64]	; 15f44 <codadump_filter_get_next_filter@@Base+0x2d4>
   15f00:	ldr	r1, [pc, #64]	; 15f48 <codadump_filter_get_next_filter@@Base+0x2d8>
   15f04:	ldr	r3, [pc, #64]	; 15f4c <codadump_filter_get_next_filter@@Base+0x2dc>
   15f08:	mov	r2, #46	; 0x2e
   15f0c:	add	r0, pc, r0
   15f10:	add	r1, pc, r1
   15f14:	add	r3, pc, r3
   15f18:	bl	12ac4 <__assert_fail@plt>
   15f1c:	andeq	r4, r0, r1, ror r7
   15f20:	andeq	r4, r0, ip, ror #23
   15f24:	andeq	r4, r0, fp, asr sp
   15f28:	andeq	r4, r0, r0, lsr #23
   15f2c:	strdeq	r4, [r0], -sl
   15f30:	andeq	r4, r0, r0, lsr #21
   15f34:	andeq	r4, r0, r6, lsl #24
   15f38:	andeq	r4, r0, r5, ror sl
   15f3c:	andeq	r4, r0, r0, lsl #21
   15f40:	andeq	r4, r0, r6, ror #23
   15f44:	andeq	r4, r0, lr, lsl #24
   15f48:	andeq	r4, r0, r0, ror #20
   15f4c:	andeq	r4, r0, r6, asr #23
   15f50:	push	{r4, r5, fp, lr}
   15f54:	add	fp, sp, #8
   15f58:	sub	sp, sp, #8
   15f5c:	cmp	r0, #0
   15f60:	str	r1, [sp, #4]
   15f64:	beq	16008 <codadump_filter_get_next_filter@@Base+0x398>
   15f68:	mov	r4, r1
   15f6c:	cmp	r1, #0
   15f70:	beq	15fec <codadump_filter_get_next_filter@@Base+0x37c>
   15f74:	ldr	r5, [r0]
   15f78:	cmp	r5, #0
   15f7c:	streq	r4, [r0]
   15f80:	subeq	sp, fp, #8
   15f84:	popeq	{r4, r5, fp, pc}
   15f88:	ldr	r1, [r4]
   15f8c:	ldr	r0, [r5]
   15f90:	bl	12674 <strcmp@plt>
   15f94:	cmp	r0, #0
   15f98:	beq	15fbc <codadump_filter_get_next_filter@@Base+0x34c>
   15f9c:	ldr	r0, [r5, #8]!
   15fa0:	cmp	r0, #0
   15fa4:	beq	15fe8 <codadump_filter_get_next_filter@@Base+0x378>
   15fa8:	mov	r0, r5
   15fac:	mov	r1, r4
   15fb0:	sub	sp, fp, #8
   15fb4:	pop	{r4, r5, fp, lr}
   15fb8:	b	15f50 <codadump_filter_get_next_filter@@Base+0x2e0>
   15fbc:	ldr	r0, [r5, #4]!
   15fc0:	cmp	r0, #0
   15fc4:	beq	15ff8 <codadump_filter_get_next_filter@@Base+0x388>
   15fc8:	ldr	r1, [r4, #4]
   15fcc:	mov	r0, r5
   15fd0:	cmp	r1, #0
   15fd4:	beq	15ff4 <codadump_filter_get_next_filter@@Base+0x384>
   15fd8:	bl	15f50 <codadump_filter_get_next_filter@@Base+0x2e0>
   15fdc:	mov	r0, #0
   15fe0:	str	r0, [r4, #4]
   15fe4:	b	15ff8 <codadump_filter_get_next_filter@@Base+0x388>
   15fe8:	str	r4, [r5]
   15fec:	sub	sp, fp, #8
   15ff0:	pop	{r4, r5, fp, pc}
   15ff4:	bl	15b38 <codadump_filter_remove@@Base>
   15ff8:	add	r0, sp, #4
   15ffc:	bl	15b38 <codadump_filter_remove@@Base>
   16000:	sub	sp, fp, #8
   16004:	pop	{r4, r5, fp, pc}
   16008:	ldr	r0, [pc, #24]	; 16028 <codadump_filter_get_next_filter@@Base+0x3b8>
   1600c:	ldr	r1, [pc, #24]	; 1602c <codadump_filter_get_next_filter@@Base+0x3bc>
   16010:	ldr	r3, [pc, #24]	; 16030 <codadump_filter_get_next_filter@@Base+0x3c0>
   16014:	mov	r2, #117	; 0x75
   16018:	add	r0, pc, r0
   1601c:	add	r1, pc, r1
   16020:	add	r3, pc, r3
   16024:	bl	12ac4 <__assert_fail@plt>
   16028:	andeq	r4, r0, r9, asr #18
   1602c:	andeq	r4, r0, r4, asr r9
   16030:	andeq	r4, r0, fp, lsr fp

00016034 <print_json_data@@Base>:
   16034:	push	{r4, sl, fp, lr}
   16038:	add	fp, sp, #8
   1603c:	sub	sp, sp, #528	; 0x210
   16040:	ldr	r1, [pc, #200]	; 16110 <print_json_data@@Base+0xdc>
   16044:	add	r1, pc, r1
   16048:	str	r0, [r1]
   1604c:	sub	r1, fp, #12
   16050:	ldr	r4, [pc, #188]	; 16114 <print_json_data@@Base+0xe0>
   16054:	ldr	r4, [pc, r4]
   16058:	ldr	r0, [r4]
   1605c:	bl	126c8 <coda_open@plt>
   16060:	cmp	r0, #0
   16064:	beq	160a4 <print_json_data@@Base+0x70>
   16068:	bl	12a70 <coda_get_errno@plt>
   1606c:	ldr	r0, [r0]
   16070:	cmn	r0, #21
   16074:	bne	160a0 <print_json_data@@Base+0x6c>
   16078:	mov	r0, #0
   1607c:	bl	12710 <coda_set_option_use_mmap@plt>
   16080:	ldr	r0, [r4]
   16084:	sub	r1, fp, #12
   16088:	bl	126c8 <coda_open@plt>
   1608c:	mov	r4, r0
   16090:	mov	r0, #1
   16094:	bl	12710 <coda_set_option_use_mmap@plt>
   16098:	cmp	r4, #0
   1609c:	beq	160a4 <print_json_data@@Base+0x70>
   160a0:	bl	18660 <handle_coda_error@@Base>
   160a4:	ldr	r1, [fp, #-12]
   160a8:	mov	r0, sp
   160ac:	bl	127f4 <coda_cursor_set_product@plt>
   160b0:	cmp	r0, #0
   160b4:	beq	160bc <print_json_data@@Base+0x88>
   160b8:	bl	18660 <handle_coda_error@@Base>
   160bc:	ldr	r0, [pc, #84]	; 16118 <print_json_data@@Base+0xe4>
   160c0:	ldr	r0, [pc, r0]
   160c4:	ldr	r1, [r0]
   160c8:	cmp	r1, #0
   160cc:	beq	160e4 <print_json_data@@Base+0xb0>
   160d0:	mov	r0, sp
   160d4:	bl	129d4 <coda_cursor_goto@plt>
   160d8:	cmp	r0, #0
   160dc:	beq	160e4 <print_json_data@@Base+0xb0>
   160e0:	bl	18660 <handle_coda_error@@Base>
   160e4:	mov	r0, #0
   160e8:	bl	12668 <coda_set_option_perform_boundary_checks@plt>
   160ec:	mov	r0, sp
   160f0:	bl	16120 <print_json_data@@Base+0xec>
   160f4:	ldr	r0, [pc, #32]	; 1611c <print_json_data@@Base+0xe8>
   160f8:	add	r0, pc, r0
   160fc:	bl	169f4 <print_json_data@@Base+0x9c0>
   16100:	ldr	r0, [fp, #-12]
   16104:	bl	129b0 <coda_close@plt>
   16108:	sub	sp, fp, #8
   1610c:	pop	{r4, sl, fp, pc}
   16110:	andeq	r7, r1, r0, asr #3
   16114:	andeq	r7, r1, r8, asr r1
   16118:	andeq	r7, r1, r0, lsl r1
   1611c:	andeq	r4, r0, sp, lsr #29
   16120:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16124:	add	fp, sp, #24
   16128:	sub	sp, sp, #72	; 0x48
   1612c:	mov	r4, r0
   16130:	mov	r0, #0
   16134:	str	r0, [fp, #-32]	; 0xffffffe0
   16138:	ldr	r0, [pc, #2104]	; 16978 <print_json_data@@Base+0x944>
   1613c:	ldr	r0, [pc, r0]
   16140:	cmp	r0, #0
   16144:	beq	161a8 <print_json_data@@Base+0x174>
   16148:	sub	r1, fp, #32
   1614c:	mov	r0, r4
   16150:	bl	12788 <coda_cursor_has_attributes@plt>
   16154:	cmp	r0, #0
   16158:	beq	16160 <print_json_data@@Base+0x12c>
   1615c:	bl	18660 <handle_coda_error@@Base>
   16160:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16164:	cmp	r0, #0
   16168:	beq	161a8 <print_json_data@@Base+0x174>
   1616c:	ldr	r0, [pc, #2056]	; 1697c <print_json_data@@Base+0x948>
   16170:	add	r0, pc, r0
   16174:	bl	169f4 <print_json_data@@Base+0x9c0>
   16178:	mov	r0, r4
   1617c:	bl	12908 <coda_cursor_goto_attributes@plt>
   16180:	cmp	r0, #0
   16184:	beq	1618c <print_json_data@@Base+0x158>
   16188:	bl	18660 <handle_coda_error@@Base>
   1618c:	mov	r0, r4
   16190:	bl	16120 <print_json_data@@Base+0xec>
   16194:	mov	r0, r4
   16198:	bl	1286c <coda_cursor_goto_parent@plt>
   1619c:	ldr	r0, [pc, #2012]	; 16980 <print_json_data@@Base+0x94c>
   161a0:	add	r0, pc, r0
   161a4:	bl	169f4 <print_json_data@@Base+0x9c0>
   161a8:	sub	r1, fp, #28
   161ac:	mov	r0, r4
   161b0:	bl	12794 <coda_cursor_get_type_class@plt>
   161b4:	cmp	r0, #0
   161b8:	beq	161c0 <print_json_data@@Base+0x18c>
   161bc:	bl	18660 <handle_coda_error@@Base>
   161c0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   161c4:	cmp	r0, #6
   161c8:	bhi	1691c <print_json_data@@Base+0x8e8>
   161cc:	add	r1, pc, #4
   161d0:	ldr	r0, [r1, r0, lsl #2]
   161d4:	add	pc, r1, r0
   161d8:	strheq	r0, [r0], -r4
   161dc:	andeq	r0, r0, r8, lsl #3
   161e0:	andeq	r0, r0, ip, lsl r0
   161e4:	andeq	r0, r0, ip, lsl r0
   161e8:	andeq	r0, r0, ip, lsl r0
   161ec:	andeq	r0, r0, ip, lsl r0
   161f0:	ldrdeq	r0, [r0], -r8
   161f4:	sub	r1, fp, #36	; 0x24
   161f8:	mov	r0, r4
   161fc:	bl	12830 <coda_cursor_get_read_type@plt>
   16200:	cmp	r0, #0
   16204:	beq	1620c <print_json_data@@Base+0x1d8>
   16208:	bl	18660 <handle_coda_error@@Base>
   1620c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16210:	add	r0, r0, #1
   16214:	cmp	r0, #13
   16218:	bhi	1691c <print_json_data@@Base+0x8e8>
   1621c:	add	r1, pc, #4
   16220:	ldr	r0, [r1, r0, lsl #2]
   16224:	add	pc, r1, r0
   16228:	andeq	r0, r0, r8, lsr r2
   1622c:	andeq	r0, r0, r8, lsr r0
   16230:	ldrdeq	r0, [r0], -r4
   16234:	andeq	r0, r0, r8, lsr r0
   16238:	ldrdeq	r0, [r0], -r4
   1623c:	andeq	r0, r0, r8, lsr r0
   16240:	ldrdeq	r0, [r0], -r4
   16244:	andeq	r0, r0, r4, asr #4
   16248:	andeq	r0, r0, r4, ror r2
   1624c:	andeq	r0, r0, r0, lsl #4
   16250:	andeq	r0, r0, r0, lsl #4
   16254:			; <UNDEFINED> instruction: 0x000002b4
   16258:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1625c:	andeq	r0, r0, r4, lsr #7
   16260:	add	r1, sp, #16
   16264:	mov	r0, r4
   16268:	bl	12a4c <coda_cursor_read_int32@plt>
   1626c:	cmp	r0, #0
   16270:	beq	16278 <print_json_data@@Base+0x244>
   16274:	bl	18660 <handle_coda_error@@Base>
   16278:	ldr	r1, [sp, #16]
   1627c:	ldr	r0, [pc, #1852]	; 169c0 <print_json_data@@Base+0x98c>
   16280:	add	r0, pc, r0
   16284:	bl	169f4 <print_json_data@@Base+0x9c0>
   16288:	b	1691c <print_json_data@@Base+0x8e8>
   1628c:	ldr	r0, [pc, #1776]	; 16984 <print_json_data@@Base+0x950>
   16290:	add	r0, pc, r0
   16294:	bl	169f4 <print_json_data@@Base+0x9c0>
   16298:	add	r1, sp, #16
   1629c:	mov	r0, r4
   162a0:	bl	126ec <coda_cursor_get_num_elements@plt>
   162a4:	cmp	r0, #0
   162a8:	beq	162b0 <print_json_data@@Base+0x27c>
   162ac:	bl	18660 <handle_coda_error@@Base>
   162b0:	ldr	r0, [sp, #16]
   162b4:	cmp	r0, #1
   162b8:	blt	16798 <print_json_data@@Base+0x764>
   162bc:	add	r1, sp, #8
   162c0:	mov	r0, r4
   162c4:	bl	1274c <coda_cursor_get_type@plt>
   162c8:	cmp	r0, #0
   162cc:	beq	162d4 <print_json_data@@Base+0x2a0>
   162d0:	bl	18660 <handle_coda_error@@Base>
   162d4:	ldr	r0, [sp, #8]
   162d8:	sub	r1, fp, #36	; 0x24
   162dc:	bl	12950 <coda_type_get_record_union_status@plt>
   162e0:	cmp	r0, #0
   162e4:	beq	162ec <print_json_data@@Base+0x2b8>
   162e8:	bl	18660 <handle_coda_error@@Base>
   162ec:	ldr	r0, [fp, #-36]	; 0xffffffdc
   162f0:	cmp	r0, #0
   162f4:	beq	166a4 <print_json_data@@Base+0x670>
   162f8:	sub	r1, fp, #40	; 0x28
   162fc:	mov	r0, r4
   16300:	bl	12a40 <coda_cursor_get_available_union_field_index@plt>
   16304:	cmp	r0, #0
   16308:	beq	16310 <print_json_data@@Base+0x2dc>
   1630c:	bl	18660 <handle_coda_error@@Base>
   16310:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16314:	ldr	r0, [sp, #8]
   16318:	sub	r2, fp, #44	; 0x2c
   1631c:	bl	12a88 <coda_type_get_record_field_name@plt>
   16320:	cmp	r0, #0
   16324:	beq	1632c <print_json_data@@Base+0x2f8>
   16328:	bl	18660 <handle_coda_error@@Base>
   1632c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16330:	mov	r0, r4
   16334:	bl	1280c <coda_cursor_goto_record_field_by_index@plt>
   16338:	cmp	r0, #0
   1633c:	beq	16344 <print_json_data@@Base+0x310>
   16340:	bl	18660 <handle_coda_error@@Base>
   16344:	ldr	r1, [fp, #-44]	; 0xffffffd4
   16348:	ldr	r0, [pc, #1592]	; 16988 <print_json_data@@Base+0x954>
   1634c:	add	r0, pc, r0
   16350:	bl	169f4 <print_json_data@@Base+0x9c0>
   16354:	mov	r0, r4
   16358:	bl	16120 <print_json_data@@Base+0xec>
   1635c:	b	16790 <print_json_data@@Base+0x75c>
   16360:	ldr	r0, [pc, #1584]	; 16998 <print_json_data@@Base+0x964>
   16364:	add	r0, pc, r0
   16368:	bl	169f4 <print_json_data@@Base+0x9c0>
   1636c:	add	r5, sp, #16
   16370:	add	r1, sp, #8
   16374:	mov	r0, r4
   16378:	mov	r2, r5
   1637c:	bl	12998 <coda_cursor_get_array_dim@plt>
   16380:	cmp	r0, #0
   16384:	beq	1638c <print_json_data@@Base+0x358>
   16388:	bl	18660 <handle_coda_error@@Base>
   1638c:	ldr	r0, [sp, #8]
   16390:	cmp	r0, #0
   16394:	blt	16910 <print_json_data@@Base+0x8dc>
   16398:	beq	167a4 <print_json_data@@Base+0x770>
   1639c:	cmp	r0, #4
   163a0:	bcs	16854 <print_json_data@@Base+0x820>
   163a4:	mov	r1, #0
   163a8:	mov	r6, #1
   163ac:	b	16888 <print_json_data@@Base+0x854>
   163b0:	sub	r1, fp, #36	; 0x24
   163b4:	mov	r0, r4
   163b8:	bl	127d0 <coda_cursor_get_special_type@plt>
   163bc:	cmp	r0, #0
   163c0:	beq	163c8 <print_json_data@@Base+0x394>
   163c4:	bl	18660 <handle_coda_error@@Base>
   163c8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   163cc:	cmp	r0, #3
   163d0:	bhi	1691c <print_json_data@@Base+0x8e8>
   163d4:	add	r1, pc, #4
   163d8:	ldr	r0, [r1, r0, lsl #2]
   163dc:	add	pc, r1, r0
   163e0:	andeq	r0, r0, r0, lsl r0
   163e4:	andeq	r0, r0, ip, asr #7
   163e8:	andeq	r0, r0, ip, ror #7
   163ec:	andeq	r0, r0, r8, lsr r4
   163f0:	ldr	r0, [pc, #1504]	; 169d8 <print_json_data@@Base+0x9a4>
   163f4:	add	r0, pc, r0
   163f8:	b	16918 <print_json_data@@Base+0x8e4>
   163fc:	add	r1, sp, #16
   16400:	mov	r0, r4
   16404:	bl	12728 <coda_cursor_read_uint32@plt>
   16408:	cmp	r0, #0
   1640c:	beq	16414 <print_json_data@@Base+0x3e0>
   16410:	bl	18660 <handle_coda_error@@Base>
   16414:	ldr	r1, [sp, #16]
   16418:	ldr	r0, [pc, #1444]	; 169c4 <print_json_data@@Base+0x990>
   1641c:	add	r0, pc, r0
   16420:	bl	169f4 <print_json_data@@Base+0x9c0>
   16424:	b	1691c <print_json_data@@Base+0x8e8>
   16428:	add	r1, sp, #16
   1642c:	mov	r0, r4
   16430:	bl	128b4 <coda_cursor_read_double@plt>
   16434:	cmp	r0, #0
   16438:	beq	16440 <print_json_data@@Base+0x40c>
   1643c:	bl	18660 <handle_coda_error@@Base>
   16440:	vldr	d16, [sp, #16]
   16444:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16448:	vmov	r2, r3, d16
   1644c:	cmp	r0, #8
   16450:	bne	16698 <print_json_data@@Base+0x664>
   16454:	ldr	r0, [pc, #1392]	; 169cc <print_json_data@@Base+0x998>
   16458:	add	r0, pc, r0
   1645c:	b	1684c <print_json_data@@Base+0x818>
   16460:	ldr	r0, [pc, #1388]	; 169d4 <print_json_data@@Base+0x9a0>
   16464:	add	r0, pc, r0
   16468:	b	16918 <print_json_data@@Base+0x8e4>
   1646c:	add	r1, sp, #8
   16470:	mov	r0, r4
   16474:	bl	129bc <coda_cursor_read_int64@plt>
   16478:	cmp	r0, #0
   1647c:	beq	16484 <print_json_data@@Base+0x450>
   16480:	bl	18660 <handle_coda_error@@Base>
   16484:	ldr	r0, [sp, #8]
   16488:	ldr	r1, [sp, #12]
   1648c:	add	r4, sp, #16
   16490:	mov	r2, r4
   16494:	bl	12ab8 <coda_str64@plt>
   16498:	b	164c8 <print_json_data@@Base+0x494>
   1649c:	add	r1, sp, #8
   164a0:	mov	r0, r4
   164a4:	bl	128a8 <coda_cursor_read_uint64@plt>
   164a8:	cmp	r0, #0
   164ac:	beq	164b4 <print_json_data@@Base+0x480>
   164b0:	bl	18660 <handle_coda_error@@Base>
   164b4:	ldr	r0, [sp, #8]
   164b8:	ldr	r1, [sp, #12]
   164bc:	add	r4, sp, #16
   164c0:	mov	r2, r4
   164c4:	bl	126f8 <coda_str64u@plt>
   164c8:	ldr	r0, [pc, #1272]	; 169c8 <print_json_data@@Base+0x994>
   164cc:	mov	r1, r4
   164d0:	add	r0, pc, r0
   164d4:	bl	169f4 <print_json_data@@Base+0x9c0>
   164d8:	b	1691c <print_json_data@@Base+0x8e8>
   164dc:	add	r1, sp, #16
   164e0:	mov	r0, r4
   164e4:	bl	12914 <coda_cursor_read_char@plt>
   164e8:	cmp	r0, #0
   164ec:	beq	164f4 <print_json_data@@Base+0x4c0>
   164f0:	bl	18660 <handle_coda_error@@Base>
   164f4:	ldr	r4, [pc, #1192]	; 169a4 <print_json_data@@Base+0x970>
   164f8:	add	r4, pc, r4
   164fc:	mov	r0, r4
   16500:	bl	169f4 <print_json_data@@Base+0x9c0>
   16504:	add	r0, sp, #16
   16508:	mov	r1, #1
   1650c:	bl	16a40 <print_json_data@@Base+0xa0c>
   16510:	mov	r0, r4
   16514:	b	16918 <print_json_data@@Base+0x8e4>
   16518:	add	r1, sp, #16
   1651c:	mov	r0, r4
   16520:	bl	1289c <coda_cursor_get_string_length@plt>
   16524:	cmp	r0, #0
   16528:	beq	16530 <print_json_data@@Base+0x4fc>
   1652c:	bl	18660 <handle_coda_error@@Base>
   16530:	ldr	r0, [sp, #16]
   16534:	add	r6, r0, #1
   16538:	mov	r0, r6
   1653c:	bl	1283c <malloc@plt>
   16540:	mov	r5, r0
   16544:	cmp	r0, #0
   16548:	bne	1657c <print_json_data@@Base+0x548>
   1654c:	movw	r0, #303	; 0x12f
   16550:	mov	r2, r6
   16554:	str	r0, [sp]
   16558:	mvn	r0, #0
   1655c:	ldr	r1, [pc, #1092]	; 169a8 <print_json_data@@Base+0x974>
   16560:	ldr	r3, [pc, #1092]	; 169ac <print_json_data@@Base+0x978>
   16564:	add	r1, pc, r1
   16568:	add	r3, pc, r3
   1656c:	bl	126bc <coda_set_error@plt>
   16570:	bl	18660 <handle_coda_error@@Base>
   16574:	ldr	r0, [sp, #16]
   16578:	add	r6, r0, #1
   1657c:	mov	r0, r4
   16580:	mov	r1, r5
   16584:	mov	r2, r6
   16588:	bl	12860 <coda_cursor_read_string@plt>
   1658c:	cmp	r0, #0
   16590:	beq	16598 <print_json_data@@Base+0x564>
   16594:	bl	18660 <handle_coda_error@@Base>
   16598:	ldr	r4, [pc, #1040]	; 169b0 <print_json_data@@Base+0x97c>
   1659c:	add	r4, pc, r4
   165a0:	mov	r0, r4
   165a4:	bl	169f4 <print_json_data@@Base+0x9c0>
   165a8:	ldr	r1, [sp, #16]
   165ac:	mov	r0, r5
   165b0:	bl	16a40 <print_json_data@@Base+0xa0c>
   165b4:	ldr	r1, [sp, #16]
   165b8:	mov	r0, r4
   165bc:	bl	169f4 <print_json_data@@Base+0x9c0>
   165c0:	mov	r0, r5
   165c4:	bl	12704 <free@plt>
   165c8:	b	1691c <print_json_data@@Base+0x8e8>
   165cc:	add	r1, sp, #16
   165d0:	mov	r0, r4
   165d4:	bl	12a1c <coda_cursor_get_bit_size@plt>
   165d8:	cmp	r0, #0
   165dc:	beq	165e4 <print_json_data@@Base+0x5b0>
   165e0:	bl	18660 <handle_coda_error@@Base>
   165e4:	ldr	r7, [sp, #16]
   165e8:	ldr	r6, [sp, #20]
   165ec:	lsr	r0, r7, #3
   165f0:	tst	r7, #7
   165f4:	orr	r5, r0, r6, lsl #29
   165f8:	addne	r5, r5, #1
   165fc:	mov	r0, r5
   16600:	bl	1283c <malloc@plt>
   16604:	mov	r8, r0
   16608:	cmp	r0, #0
   1660c:	bne	16640 <print_json_data@@Base+0x60c>
   16610:	movw	r0, #334	; 0x14e
   16614:	mov	r2, r5
   16618:	str	r0, [sp]
   1661c:	mvn	r0, #0
   16620:	ldr	r1, [pc, #908]	; 169b4 <print_json_data@@Base+0x980>
   16624:	ldr	r3, [pc, #908]	; 169b8 <print_json_data@@Base+0x984>
   16628:	add	r1, pc, r1
   1662c:	add	r3, pc, r3
   16630:	bl	126bc <coda_set_error@plt>
   16634:	bl	18660 <handle_coda_error@@Base>
   16638:	ldr	r7, [sp, #16]
   1663c:	ldr	r6, [sp, #20]
   16640:	mov	r0, r4
   16644:	mov	r1, r8
   16648:	mov	r2, #0
   1664c:	mov	r3, #0
   16650:	str	r7, [sp]
   16654:	str	r6, [sp, #4]
   16658:	bl	12aac <coda_cursor_read_bits@plt>
   1665c:	cmp	r0, #0
   16660:	beq	16668 <print_json_data@@Base+0x634>
   16664:	bl	18660 <handle_coda_error@@Base>
   16668:	ldr	r4, [pc, #844]	; 169bc <print_json_data@@Base+0x988>
   1666c:	add	r4, pc, r4
   16670:	mov	r0, r4
   16674:	bl	169f4 <print_json_data@@Base+0x9c0>
   16678:	mov	r0, r8
   1667c:	mov	r1, r5
   16680:	bl	16a40 <print_json_data@@Base+0xa0c>
   16684:	mov	r0, r4
   16688:	bl	169f4 <print_json_data@@Base+0x9c0>
   1668c:	mov	r0, r8
   16690:	bl	12704 <free@plt>
   16694:	b	1691c <print_json_data@@Base+0x8e8>
   16698:	ldr	r0, [pc, #816]	; 169d0 <print_json_data@@Base+0x99c>
   1669c:	add	r0, pc, r0
   166a0:	b	1684c <print_json_data@@Base+0x818>
   166a4:	mov	r0, r4
   166a8:	bl	12800 <coda_cursor_goto_first_record_field@plt>
   166ac:	cmp	r0, #0
   166b0:	beq	166b8 <print_json_data@@Base+0x684>
   166b4:	bl	18660 <handle_coda_error@@Base>
   166b8:	ldr	r0, [sp, #16]
   166bc:	mov	r1, #0
   166c0:	str	r1, [fp, #-40]	; 0xffffffd8
   166c4:	cmp	r0, #1
   166c8:	blt	16790 <print_json_data@@Base+0x75c>
   166cc:	ldr	r8, [pc, #696]	; 1698c <print_json_data@@Base+0x958>
   166d0:	ldr	r6, [pc, #696]	; 16990 <print_json_data@@Base+0x95c>
   166d4:	mov	r7, #1
   166d8:	add	r5, sp, #48	; 0x30
   166dc:	sub	r9, fp, #44	; 0x2c
   166e0:	add	r8, pc, r8
   166e4:	add	r6, pc, r6
   166e8:	ldr	r0, [sp, #8]
   166ec:	mov	r2, r5
   166f0:	bl	1268c <coda_type_get_record_field_hidden_status@plt>
   166f4:	cmp	r0, #0
   166f8:	beq	16700 <print_json_data@@Base+0x6cc>
   166fc:	bl	18660 <handle_coda_error@@Base>
   16700:	ldr	r0, [sp, #48]	; 0x30
   16704:	cmp	r0, #0
   16708:	bne	16750 <print_json_data@@Base+0x71c>
   1670c:	cmp	r7, #0
   16710:	bne	1671c <print_json_data@@Base+0x6e8>
   16714:	mov	r0, r8
   16718:	bl	169f4 <print_json_data@@Base+0x9c0>
   1671c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16720:	ldr	r0, [sp, #8]
   16724:	mov	r2, r9
   16728:	bl	12a88 <coda_type_get_record_field_name@plt>
   1672c:	cmp	r0, #0
   16730:	beq	16738 <print_json_data@@Base+0x704>
   16734:	bl	18660 <handle_coda_error@@Base>
   16738:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1673c:	mov	r0, r6
   16740:	bl	169f4 <print_json_data@@Base+0x9c0>
   16744:	mov	r0, r4
   16748:	bl	16120 <print_json_data@@Base+0xec>
   1674c:	mov	r7, #0
   16750:	ldr	r0, [sp, #16]
   16754:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16758:	sub	r0, r0, #1
   1675c:	cmp	r1, r0
   16760:	bge	16778 <print_json_data@@Base+0x744>
   16764:	mov	r0, r4
   16768:	bl	129f8 <coda_cursor_goto_next_record_field@plt>
   1676c:	cmp	r0, #0
   16770:	beq	16778 <print_json_data@@Base+0x744>
   16774:	bl	18660 <handle_coda_error@@Base>
   16778:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1677c:	add	r1, r0, #1
   16780:	ldr	r0, [sp, #16]
   16784:	str	r1, [fp, #-40]	; 0xffffffd8
   16788:	cmp	r1, r0
   1678c:	blt	166e8 <print_json_data@@Base+0x6b4>
   16790:	mov	r0, r4
   16794:	bl	1286c <coda_cursor_goto_parent@plt>
   16798:	ldr	r0, [pc, #500]	; 16994 <print_json_data@@Base+0x960>
   1679c:	add	r0, pc, r0
   167a0:	b	16918 <print_json_data@@Base+0x8e4>
   167a4:	mov	r6, #1
   167a8:	b	168ac <print_json_data@@Base+0x878>
   167ac:	add	r1, sp, #16
   167b0:	mov	r0, r4
   167b4:	bl	128b4 <coda_cursor_read_double@plt>
   167b8:	cmp	r0, #0
   167bc:	beq	167c4 <print_json_data@@Base+0x790>
   167c0:	bl	18660 <handle_coda_error@@Base>
   167c4:	vldr	d16, [sp, #16]
   167c8:	b	16808 <print_json_data@@Base+0x7d4>
   167cc:	add	r1, sp, #8
   167d0:	mov	r0, r4
   167d4:	bl	128b4 <coda_cursor_read_double@plt>
   167d8:	cmp	r0, #0
   167dc:	beq	167e4 <print_json_data@@Base+0x7b0>
   167e0:	bl	18660 <handle_coda_error@@Base>
   167e4:	vldr	d0, [sp, #8]
   167e8:	bl	128c0 <coda_isNaN@plt>
   167ec:	cmp	r0, #0
   167f0:	bne	16804 <print_json_data@@Base+0x7d0>
   167f4:	vldr	d0, [sp, #8]
   167f8:	bl	12764 <coda_isInf@plt>
   167fc:	cmp	r0, #0
   16800:	beq	1693c <print_json_data@@Base+0x908>
   16804:	vldr	d16, [sp, #8]
   16808:	ldr	r0, [pc, #460]	; 169dc <print_json_data@@Base+0x9a8>
   1680c:	vmov	r2, r3, d16
   16810:	add	r0, pc, r0
   16814:	b	1684c <print_json_data@@Base+0x818>
   16818:	add	r1, sp, #16
   1681c:	add	r2, sp, #8
   16820:	mov	r0, r4
   16824:	bl	1295c <coda_cursor_read_complex_double_split@plt>
   16828:	cmp	r0, #0
   1682c:	beq	16834 <print_json_data@@Base+0x800>
   16830:	bl	18660 <handle_coda_error@@Base>
   16834:	vldr	d17, [sp, #8]
   16838:	vldr	d16, [sp, #16]
   1683c:	vstr	d17, [sp]
   16840:	vmov	r2, r3, d16
   16844:	ldr	r0, [pc, #416]	; 169ec <print_json_data@@Base+0x9b8>
   16848:	add	r0, pc, r0
   1684c:	bl	169f4 <print_json_data@@Base+0x9c0>
   16850:	b	1691c <print_json_data@@Base+0x8e8>
   16854:	bic	r1, r0, #3
   16858:	vmov.i32	q8, #1	; 0x00000001
   1685c:	mov	r2, r1
   16860:	vld1.32	{d18-d19}, [r5]!
   16864:	subs	r2, r2, #4
   16868:	vmul.i32	q8, q9, q8
   1686c:	bne	16860 <print_json_data@@Base+0x82c>
   16870:	vext.8	q9, q8, q8, #8
   16874:	cmp	r0, r1
   16878:	vmul.i32	q0, q8, q9
   1687c:	vmul.i32	q8, q0, d0[1]
   16880:	vmov.32	r6, d16[0]
   16884:	beq	168a4 <print_json_data@@Base+0x870>
   16888:	add	r2, sp, #16
   1688c:	sub	r0, r0, r1
   16890:	add	r1, r2, r1, lsl #2
   16894:	ldr	r2, [r1], #4
   16898:	subs	r0, r0, #1
   1689c:	mul	r6, r2, r6
   168a0:	bne	16894 <print_json_data@@Base+0x860>
   168a4:	cmp	r6, #1
   168a8:	blt	16910 <print_json_data@@Base+0x8dc>
   168ac:	mov	r0, r4
   168b0:	bl	127dc <coda_cursor_goto_first_array_element@plt>
   168b4:	cmp	r0, #0
   168b8:	beq	168c0 <print_json_data@@Base+0x88c>
   168bc:	bl	18660 <handle_coda_error@@Base>
   168c0:	ldr	r8, [pc, #212]	; 1699c <print_json_data@@Base+0x968>
   168c4:	sub	r7, r6, #1
   168c8:	mov	r5, #0
   168cc:	add	r8, pc, r8
   168d0:	mov	r0, r4
   168d4:	bl	16120 <print_json_data@@Base+0xec>
   168d8:	cmp	r5, r7
   168dc:	bge	168fc <print_json_data@@Base+0x8c8>
   168e0:	mov	r0, r8
   168e4:	bl	169f4 <print_json_data@@Base+0x9c0>
   168e8:	mov	r0, r4
   168ec:	bl	128d8 <coda_cursor_goto_next_array_element@plt>
   168f0:	cmp	r0, #0
   168f4:	beq	168fc <print_json_data@@Base+0x8c8>
   168f8:	bl	18660 <handle_coda_error@@Base>
   168fc:	add	r5, r5, #1
   16900:	cmp	r6, r5
   16904:	bne	168d0 <print_json_data@@Base+0x89c>
   16908:	mov	r0, r4
   1690c:	bl	1286c <coda_cursor_goto_parent@plt>
   16910:	ldr	r0, [pc, #136]	; 169a0 <print_json_data@@Base+0x96c>
   16914:	add	r0, pc, r0
   16918:	bl	169f4 <print_json_data@@Base+0x9c0>
   1691c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16920:	cmp	r0, #0
   16924:	beq	16934 <print_json_data@@Base+0x900>
   16928:	ldr	r0, [pc, #192]	; 169f0 <print_json_data@@Base+0x9bc>
   1692c:	add	r0, pc, r0
   16930:	bl	169f4 <print_json_data@@Base+0x9c0>
   16934:	sub	sp, fp, #24
   16938:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1693c:	vldr	d0, [sp, #8]
   16940:	ldr	r0, [pc, #152]	; 169e0 <print_json_data@@Base+0x9ac>
   16944:	add	r1, sp, #16
   16948:	add	r0, pc, r0
   1694c:	bl	126e0 <coda_time_double_to_string@plt>
   16950:	cmp	r0, #0
   16954:	beq	16964 <print_json_data@@Base+0x930>
   16958:	ldr	r0, [pc, #132]	; 169e4 <print_json_data@@Base+0x9b0>
   1695c:	add	r0, pc, r0
   16960:	b	16918 <print_json_data@@Base+0x8e4>
   16964:	ldr	r0, [pc, #124]	; 169e8 <print_json_data@@Base+0x9b4>
   16968:	add	r1, sp, #16
   1696c:	add	r0, pc, r0
   16970:	bl	169f4 <print_json_data@@Base+0x9c0>
   16974:	b	1691c <print_json_data@@Base+0x8e8>
   16978:	andeq	r7, r1, r8, asr #1
   1697c:	andeq	r4, r0, r2, lsr #20
   16980:	strdeq	r4, [r0], -fp
   16984:	andeq	r4, r0, r4, lsl r9
   16988:	andeq	r4, r0, sl, asr r8
   1698c:	andeq	r4, r0, lr, lsl r1
   16990:	andeq	r4, r0, r2, asr #9
   16994:	andeq	r4, r0, r0, lsl r4
   16998:	andeq	r4, r0, r2, lsl #18
   1699c:	andeq	r3, r0, r2, lsr pc
   169a0:	andeq	r4, r0, r7, asr r4
   169a4:	andeq	r4, r0, r0, ror #14
   169a8:	andeq	r3, r0, sp, lsl #31
   169ac:	andeq	r4, r0, r6, asr #12
   169b0:			; <UNDEFINED> instruction: 0x000046bc
   169b4:	andeq	r3, r0, r9, asr #29
   169b8:	andeq	r4, r0, r2, lsl #11
   169bc:	andeq	r4, r0, ip, ror #11
   169c0:	andeq	r4, r0, ip, ror #19
   169c4:	andeq	r4, r0, sl, lsl #3
   169c8:	andeq	r4, r0, ip, asr r8
   169cc:	andeq	r4, r0, r2, asr r1
   169d0:	andeq	r3, r0, r3, lsl pc
   169d4:	andeq	r4, r0, fp, lsr #15
   169d8:	andeq	r4, r0, fp, lsl r8
   169dc:	muleq	r0, pc, sp	; <UNPREDICTABLE>
   169e0:	andeq	r4, r0, ip, asr #5
   169e4:	ldrdeq	r4, [r0], -r5
   169e8:	andeq	r4, r0, r2, lsl #8
   169ec:	andeq	r4, r0, r4, lsl #8
   169f0:	andeq	r4, r0, r0, lsl #5
   169f4:	sub	sp, sp, #12
   169f8:	push	{fp, lr}
   169fc:	mov	fp, sp
   16a00:	sub	sp, sp, #4
   16a04:	mov	ip, r0
   16a08:	add	r0, fp, #8
   16a0c:	stm	r0, {r1, r2, r3}
   16a10:	add	r2, fp, #8
   16a14:	mov	r1, ip
   16a18:	str	r2, [sp]
   16a1c:	ldr	r0, [pc, #24]	; 16a3c <print_json_data@@Base+0xa08>
   16a20:	ldr	r0, [pc, r0]
   16a24:	ldr	r0, [r0]
   16a28:	bl	129c8 <vfprintf@plt>
   16a2c:	mov	sp, fp
   16a30:	pop	{fp, lr}
   16a34:	add	sp, sp, #12
   16a38:	bx	lr
   16a3c:	muleq	r1, r4, r7
   16a40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a44:	add	fp, sp, #28
   16a48:	sub	sp, sp, #4
   16a4c:	cmp	r1, #1
   16a50:	blt	16ba4 <print_json_data@@Base+0xb70>
   16a54:	ldr	r6, [pc, #336]	; 16bac <print_json_data@@Base+0xb78>
   16a58:	ldr	r8, [pc, #336]	; 16bb0 <print_json_data@@Base+0xb7c>
   16a5c:	ldr	r9, [pc, #336]	; 16bb4 <print_json_data@@Base+0xb80>
   16a60:	ldr	sl, [pc, #336]	; 16bb8 <print_json_data@@Base+0xb84>
   16a64:	ldr	r7, [pc, #336]	; 16bbc <print_json_data@@Base+0xb88>
   16a68:	mov	r4, r1
   16a6c:	mov	r5, r0
   16a70:	add	r6, pc, r6
   16a74:	add	r8, pc, r8
   16a78:	add	r9, pc, r9
   16a7c:	add	sl, pc, sl
   16a80:	add	r7, pc, r7
   16a84:	ldrb	r1, [r5]
   16a88:	sub	r0, r1, #8
   16a8c:	cmp	r0, #26
   16a90:	bhi	16b1c <print_json_data@@Base+0xae8>
   16a94:	add	r2, pc, #4
   16a98:	ldr	r0, [r2, r0, lsl #2]
   16a9c:	add	pc, r2, r0
   16aa0:	andeq	r0, r0, ip, rrx
   16aa4:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   16aa8:	strheq	r0, [r0], -ip
   16aac:	muleq	r0, r4, r0
   16ab0:	andeq	r0, r0, r8, asr #1
   16ab4:	ldrdeq	r0, [r0], -r4
   16ab8:	muleq	r0, r4, r0
   16abc:	muleq	r0, r4, r0
   16ac0:	muleq	r0, r4, r0
   16ac4:	muleq	r0, r4, r0
   16ac8:	muleq	r0, r4, r0
   16acc:	muleq	r0, r4, r0
   16ad0:	muleq	r0, r4, r0
   16ad4:	muleq	r0, r4, r0
   16ad8:	muleq	r0, r4, r0
   16adc:	muleq	r0, r4, r0
   16ae0:	muleq	r0, r4, r0
   16ae4:	muleq	r0, r4, r0
   16ae8:	muleq	r0, r4, r0
   16aec:	muleq	r0, r4, r0
   16af0:	muleq	r0, r4, r0
   16af4:	muleq	r0, r4, r0
   16af8:	muleq	r0, r4, r0
   16afc:	muleq	r0, r4, r0
   16b00:	muleq	r0, r4, r0
   16b04:	muleq	r0, r4, r0
   16b08:	andeq	r0, r0, r0, ror #1
   16b0c:	ldr	r0, [pc, #176]	; 16bc4 <print_json_data@@Base+0xb90>
   16b10:	add	r0, pc, r0
   16b14:	bl	169f4 <print_json_data@@Base+0x9c0>
   16b18:	b	16b98 <print_json_data@@Base+0xb64>
   16b1c:	cmp	r1, #92	; 0x5c
   16b20:	bne	16b34 <print_json_data@@Base+0xb00>
   16b24:	ldr	r0, [pc, #148]	; 16bc0 <print_json_data@@Base+0xb8c>
   16b28:	add	r0, pc, r0
   16b2c:	bl	169f4 <print_json_data@@Base+0x9c0>
   16b30:	b	16b98 <print_json_data@@Base+0xb64>
   16b34:	sub	r0, r1, #32
   16b38:	uxtb	r0, r0
   16b3c:	cmp	r0, #94	; 0x5e
   16b40:	bhi	16b8c <print_json_data@@Base+0xb58>
   16b44:	ldr	r0, [pc, #124]	; 16bc8 <print_json_data@@Base+0xb94>
   16b48:	add	r0, pc, r0
   16b4c:	b	16b94 <print_json_data@@Base+0xb60>
   16b50:	mov	r0, r6
   16b54:	bl	169f4 <print_json_data@@Base+0x9c0>
   16b58:	b	16b98 <print_json_data@@Base+0xb64>
   16b5c:	mov	r0, r8
   16b60:	bl	169f4 <print_json_data@@Base+0x9c0>
   16b64:	b	16b98 <print_json_data@@Base+0xb64>
   16b68:	mov	r0, r9
   16b6c:	bl	169f4 <print_json_data@@Base+0x9c0>
   16b70:	b	16b98 <print_json_data@@Base+0xb64>
   16b74:	mov	r0, sl
   16b78:	bl	169f4 <print_json_data@@Base+0x9c0>
   16b7c:	b	16b98 <print_json_data@@Base+0xb64>
   16b80:	mov	r0, r7
   16b84:	bl	169f4 <print_json_data@@Base+0x9c0>
   16b88:	b	16b98 <print_json_data@@Base+0xb64>
   16b8c:	ldr	r0, [pc, #56]	; 16bcc <print_json_data@@Base+0xb98>
   16b90:	add	r0, pc, r0
   16b94:	bl	169f4 <print_json_data@@Base+0x9c0>
   16b98:	subs	r4, r4, #1
   16b9c:	add	r5, r5, #1
   16ba0:	bne	16a84 <print_json_data@@Base+0xa50>
   16ba4:	sub	sp, fp, #28
   16ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bac:	andeq	r3, r0, lr, lsl fp
   16bb0:	andeq	r3, r0, sp, lsl fp
   16bb4:	andeq	r3, r0, pc, lsl fp
   16bb8:	andeq	r3, r0, lr, lsl fp
   16bbc:	ldrdeq	r4, [r0], -r7
   16bc0:	andeq	r3, r0, r5, ror sl
   16bc4:	andeq	r3, r0, fp, ror sl
   16bc8:	andeq	r3, r0, r8, lsl #24
   16bcc:	andeq	r4, r0, sl, asr #1

00016bd0 <print_full_field_name@@Base>:
   16bd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bd4:	add	fp, sp, #28
   16bd8:	sub	sp, sp, #12
   16bdc:	mov	sl, r2
   16be0:	mov	r4, r0
   16be4:	cmp	r1, #1
   16be8:	bne	16cfc <print_full_field_name@@Base+0x12c>
   16bec:	str	sl, [sp]
   16bf0:	mov	r6, #0
   16bf4:	ldr	r5, [pc, #648]	; 16e84 <print_full_field_name@@Base+0x2b4>
   16bf8:	ldr	r5, [pc, r5]
   16bfc:	ldr	r0, [r5, #136]	; 0x88
   16c00:	cmp	r0, #1
   16c04:	blt	16cc8 <print_full_field_name@@Base+0xf8>
   16c08:	ldr	r9, [pc, #632]	; 16e88 <print_full_field_name@@Base+0x2b8>
   16c0c:	add	sl, sp, #8
   16c10:	mov	r7, #0
   16c14:	mov	r8, #0
   16c18:	add	r9, pc, r9
   16c1c:	add	r0, r5, r8, lsl #2
   16c20:	mov	r1, sl
   16c24:	ldr	r0, [r0, #8]
   16c28:	bl	12ad0 <coda_type_get_class@plt>
   16c2c:	cmp	r0, #0
   16c30:	beq	16c38 <print_full_field_name@@Base+0x68>
   16c34:	bl	18660 <handle_coda_error@@Base>
   16c38:	ldr	r0, [sp, #8]
   16c3c:	cmp	r0, #1
   16c40:	beq	16c68 <print_full_field_name@@Base+0x98>
   16c44:	cmp	r0, #0
   16c48:	bne	16cb8 <print_full_field_name@@Base+0xe8>
   16c4c:	add	r0, r5, r7, lsl #2
   16c50:	mov	r1, r9
   16c54:	ldr	r2, [r0, #3620]	; 0xe24
   16c58:	mov	r0, r4
   16c5c:	bl	128cc <fprintf@plt>
   16c60:	add	r7, r7, #1
   16c64:	b	16cb8 <print_full_field_name@@Base+0xe8>
   16c68:	cmp	r8, #0
   16c6c:	bne	16c7c <print_full_field_name@@Base+0xac>
   16c70:	mov	r0, #47	; 0x2f
   16c74:	mov	r1, r4
   16c78:	bl	12a04 <fputc@plt>
   16c7c:	add	r0, r6, r6, lsl #2
   16c80:	add	r0, r5, r0, lsl #4
   16c84:	ldr	r0, [r0, #804]	; 0x324
   16c88:	cmp	r0, #1
   16c8c:	blt	16cb4 <print_full_field_name@@Base+0xe4>
   16c90:	mov	r0, #91	; 0x5b
   16c94:	mov	r1, r4
   16c98:	bl	12a04 <fputc@plt>
   16c9c:	mov	r0, r4
   16ca0:	mov	r1, r6
   16ca4:	bl	16e90 <print_full_field_name@@Base+0x2c0>
   16ca8:	mov	r0, #93	; 0x5d
   16cac:	mov	r1, r4
   16cb0:	bl	12a04 <fputc@plt>
   16cb4:	add	r6, r6, #1
   16cb8:	ldr	r0, [r5, #136]	; 0x88
   16cbc:	add	r8, r8, #1
   16cc0:	cmp	r8, r0
   16cc4:	blt	16c1c <print_full_field_name@@Base+0x4c>
   16cc8:	ldr	r0, [sp]
   16ccc:	cmp	r0, #0
   16cd0:	beq	16e74 <print_full_field_name@@Base+0x2a4>
   16cd4:	ldr	r0, [r5, #3360]	; 0xd20
   16cd8:	cmp	r6, r0
   16cdc:	bge	16e74 <print_full_field_name@@Base+0x2a4>
   16ce0:	mov	r0, #91	; 0x5b
   16ce4:	mov	r1, r4
   16ce8:	bl	12a04 <fputc@plt>
   16cec:	mov	r0, r4
   16cf0:	mov	r1, r6
   16cf4:	bl	16e90 <print_full_field_name@@Base+0x2c0>
   16cf8:	b	16e68 <print_full_field_name@@Base+0x298>
   16cfc:	ldr	r7, [pc, #376]	; 16e7c <print_full_field_name@@Base+0x2ac>
   16d00:	mov	r5, r1
   16d04:	ldr	r7, [pc, r7]
   16d08:	ldr	r0, [r7, #3748]	; 0xea4
   16d0c:	cmp	r0, #1
   16d10:	blt	16d4c <print_full_field_name@@Base+0x17c>
   16d14:	mov	r6, #0
   16d18:	cmp	r6, #0
   16d1c:	beq	16d2c <print_full_field_name@@Base+0x15c>
   16d20:	mov	r0, #46	; 0x2e
   16d24:	mov	r1, r4
   16d28:	bl	12a04 <fputc@plt>
   16d2c:	add	r0, r7, r6, lsl #2
   16d30:	mov	r1, r4
   16d34:	ldr	r0, [r0, #3620]	; 0xe24
   16d38:	bl	12a94 <fputs@plt>
   16d3c:	ldr	r0, [r7, #3748]	; 0xea4
   16d40:	add	r6, r6, #1
   16d44:	cmp	r6, r0
   16d48:	blt	16d18 <print_full_field_name@@Base+0x148>
   16d4c:	cmp	r5, #2
   16d50:	bne	16e74 <print_full_field_name@@Base+0x2a4>
   16d54:	ldr	r0, [r7, #136]	; 0x88
   16d58:	mov	r6, #0
   16d5c:	cmp	r0, #1
   16d60:	blt	16e00 <print_full_field_name@@Base+0x230>
   16d64:	ldr	r9, [pc, #276]	; 16e80 <print_full_field_name@@Base+0x2b0>
   16d68:	add	r8, sp, #4
   16d6c:	mov	r5, #0
   16d70:	add	r9, pc, r9
   16d74:	add	r0, r7, r5, lsl #2
   16d78:	mov	r1, r8
   16d7c:	ldr	r0, [r0, #8]
   16d80:	bl	12ad0 <coda_type_get_class@plt>
   16d84:	cmp	r0, #0
   16d88:	beq	16d90 <print_full_field_name@@Base+0x1c0>
   16d8c:	bl	18660 <handle_coda_error@@Base>
   16d90:	ldr	r0, [sp, #4]
   16d94:	cmp	r0, #1
   16d98:	bne	16df0 <print_full_field_name@@Base+0x220>
   16d9c:	add	r0, r6, r6, lsl #2
   16da0:	add	r0, r7, r0, lsl #4
   16da4:	ldr	r1, [r0, #804]	; 0x324
   16da8:	cmp	r1, #1
   16dac:	blt	16df0 <print_full_field_name@@Base+0x220>
   16db0:	ldr	r0, [r0, #800]	; 0x320
   16db4:	cmp	r0, #0
   16db8:	beq	16dcc <print_full_field_name@@Base+0x1fc>
   16dbc:	mov	r0, #44	; 0x2c
   16dc0:	mov	r1, r4
   16dc4:	bl	12a04 <fputc@plt>
   16dc8:	b	16de0 <print_full_field_name@@Base+0x210>
   16dcc:	mov	r0, r9
   16dd0:	mov	r1, #2
   16dd4:	mov	r2, #1
   16dd8:	mov	r3, r4
   16ddc:	bl	127e8 <fwrite@plt>
   16de0:	mov	r0, r4
   16de4:	mov	r1, r6
   16de8:	bl	16e90 <print_full_field_name@@Base+0x2c0>
   16dec:	add	r6, r6, #1
   16df0:	ldr	r0, [r7, #136]	; 0x88
   16df4:	add	r5, r5, #1
   16df8:	cmp	r5, r0
   16dfc:	blt	16d74 <print_full_field_name@@Base+0x1a4>
   16e00:	cmp	sl, #0
   16e04:	beq	16e60 <print_full_field_name@@Base+0x290>
   16e08:	ldr	r0, [r7, #3360]	; 0xd20
   16e0c:	cmp	r6, r0
   16e10:	bge	16e60 <print_full_field_name@@Base+0x290>
   16e14:	add	r0, r6, r6, lsl #2
   16e18:	add	r0, r7, r0, lsl #4
   16e1c:	ldr	r0, [r0, #800]	; 0x320
   16e20:	cmp	r0, #0
   16e24:	beq	16e38 <print_full_field_name@@Base+0x268>
   16e28:	mov	r0, #44	; 0x2c
   16e2c:	mov	r1, r4
   16e30:	bl	12a04 <fputc@plt>
   16e34:	b	16e50 <print_full_field_name@@Base+0x280>
   16e38:	ldr	r0, [pc, #76]	; 16e8c <print_full_field_name@@Base+0x2bc>
   16e3c:	mov	r1, #2
   16e40:	mov	r2, #1
   16e44:	mov	r3, r4
   16e48:	add	r0, pc, r0
   16e4c:	bl	127e8 <fwrite@plt>
   16e50:	mov	r0, r4
   16e54:	mov	r1, r6
   16e58:	bl	16e90 <print_full_field_name@@Base+0x2c0>
   16e5c:	add	r6, r6, #1
   16e60:	cmp	r6, #1
   16e64:	blt	16e74 <print_full_field_name@@Base+0x2a4>
   16e68:	mov	r0, #93	; 0x5d
   16e6c:	mov	r1, r4
   16e70:	bl	12a04 <fputc@plt>
   16e74:	sub	sp, fp, #28
   16e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e7c:	andeq	r6, r1, r8, lsr #9
   16e80:	strdeq	r3, [r0], -r5
   16e84:			; <UNDEFINED> instruction: 0x000165b4
   16e88:	andeq	r4, r0, r9, asr #32
   16e8c:	andeq	r3, r0, sp, lsl lr
   16e90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e94:	add	fp, sp, #28
   16e98:	sub	sp, sp, #4
   16e9c:	mov	r4, r0
   16ea0:	add	r0, r1, r1, lsl #2
   16ea4:	ldr	r1, [pc, #204]	; 16f78 <print_full_field_name@@Base+0x3a8>
   16ea8:	ldr	r1, [pc, r1]
   16eac:	add	r0, r1, r0, lsl #4
   16eb0:	mov	r7, r0
   16eb4:	ldr	r1, [r7, #804]!	; 0x324
   16eb8:	cmp	r1, #1
   16ebc:	blt	16f70 <print_full_field_name@@Base+0x3a0>
   16ec0:	ldr	r8, [pc, #180]	; 16f7c <print_full_field_name@@Base+0x3ac>
   16ec4:	add	sl, r0, #808	; 0x328
   16ec8:	add	r5, r0, #800	; 0x320
   16ecc:	mov	r6, #0
   16ed0:	ldr	r8, [pc, r8]
   16ed4:	ldr	r9, [pc, #164]	; 16f80 <print_full_field_name@@Base+0x3b0>
   16ed8:	ldr	r9, [pc, r9]
   16edc:	cmp	r6, #0
   16ee0:	beq	16ef0 <print_full_field_name@@Base+0x320>
   16ee4:	mov	r0, #44	; 0x2c
   16ee8:	mov	r1, r4
   16eec:	bl	12a04 <fputc@plt>
   16ef0:	ldr	r0, [r8]
   16ef4:	cmp	r0, #0
   16ef8:	beq	16f30 <print_full_field_name@@Base+0x360>
   16efc:	ldr	r0, [r5]
   16f00:	add	r0, r6, r0
   16f04:	add	r0, r9, r0, lsl #2
   16f08:	ldr	r1, [r0, #72]	; 0x48
   16f0c:	cmp	r1, #0
   16f10:	beq	16f4c <print_full_field_name@@Base+0x37c>
   16f14:	ldr	r3, [r0, #4]
   16f18:	ldr	r2, [r0, #36]	; 0x24
   16f1c:	ldr	r1, [pc, #96]	; 16f84 <print_full_field_name@@Base+0x3b4>
   16f20:	mov	r0, r4
   16f24:	add	r1, pc, r1
   16f28:	bl	128cc <fprintf@plt>
   16f2c:	b	16f60 <print_full_field_name@@Base+0x390>
   16f30:	ldr	r2, [sl, r6, lsl #2]
   16f34:	cmn	r2, #1
   16f38:	bne	16f50 <print_full_field_name@@Base+0x380>
   16f3c:	mov	r0, #63	; 0x3f
   16f40:	mov	r1, r4
   16f44:	bl	12a04 <fputc@plt>
   16f48:	b	16f60 <print_full_field_name@@Base+0x390>
   16f4c:	ldr	r2, [r0, #4]
   16f50:	ldr	r1, [pc, #48]	; 16f88 <print_full_field_name@@Base+0x3b8>
   16f54:	mov	r0, r4
   16f58:	add	r1, pc, r1
   16f5c:	bl	128cc <fprintf@plt>
   16f60:	ldr	r0, [r7]
   16f64:	add	r6, r6, #1
   16f68:	cmp	r6, r0
   16f6c:	blt	16edc <print_full_field_name@@Base+0x30c>
   16f70:	sub	sp, fp, #28
   16f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f78:	andeq	r6, r1, r4, lsl #6
   16f7c:	ldrdeq	r6, [r1], -r8
   16f80:	andeq	r6, r1, r4, lsl #6
   16f84:	andeq	r3, r0, r4, asr #26
   16f88:	andeq	r3, r0, r4, lsl sp

00016f8c <traverse_info_init@@Base>:
   16f8c:	ldr	r0, [pc, #24]	; 16fac <traverse_info_init@@Base+0x20>
   16f90:	mov	r1, #0
   16f94:	ldr	r0, [pc, r0]
   16f98:	str	r1, [r0, #136]	; 0x88
   16f9c:	str	r1, [r0, #4]
   16fa0:	str	r1, [r0, #3360]	; 0xd20
   16fa4:	str	r1, [r0, #3748]	; 0xea4
   16fa8:	bx	lr
   16fac:	andeq	r6, r1, r8, lsl r2

00016fb0 <traverse_info_done@@Base>:
   16fb0:	push	{r4, sl, fp, lr}
   16fb4:	add	fp, sp, #8
   16fb8:	ldr	r4, [pc, #40]	; 16fe8 <traverse_info_done@@Base+0x38>
   16fbc:	ldr	r4, [pc, r4]
   16fc0:	ldr	r0, [r4, #4]
   16fc4:	cmp	r0, #0
   16fc8:	beq	16fd0 <traverse_info_done@@Base+0x20>
   16fcc:	bl	129b0 <coda_close@plt>
   16fd0:	ldr	r0, [r4, #664]	; 0x298
   16fd4:	cmp	r0, #0
   16fd8:	popeq	{r4, sl, fp, pc}
   16fdc:	add	r0, r4, #664	; 0x298
   16fe0:	pop	{r4, sl, fp, lr}
   16fe4:	b	15b38 <codadump_filter_remove@@Base>
   16fe8:	strdeq	r6, [r1], -r0

00016fec <traverse_product@@Base>:
   16fec:	push	{r4, r5, fp, lr}
   16ff0:	add	fp, sp, #8
   16ff4:	ldr	r5, [pc, #164]	; 170a0 <traverse_product@@Base+0xb4>
   16ff8:	ldr	r5, [pc, r5]
   16ffc:	mov	r1, r5
   17000:	ldr	r0, [r1], #4
   17004:	bl	126c8 <coda_open@plt>
   17008:	cmp	r0, #0
   1700c:	beq	1704c <traverse_product@@Base+0x60>
   17010:	bl	12a70 <coda_get_errno@plt>
   17014:	ldr	r0, [r0]
   17018:	cmn	r0, #21
   1701c:	bne	17048 <traverse_product@@Base+0x5c>
   17020:	mov	r0, #0
   17024:	bl	12710 <coda_set_option_use_mmap@plt>
   17028:	mov	r1, r5
   1702c:	ldr	r0, [r1], #4
   17030:	bl	126c8 <coda_open@plt>
   17034:	mov	r4, r0
   17038:	mov	r0, #1
   1703c:	bl	12710 <coda_set_option_use_mmap@plt>
   17040:	cmp	r4, #0
   17044:	beq	1704c <traverse_product@@Base+0x60>
   17048:	bl	18660 <handle_coda_error@@Base>
   1704c:	ldr	r1, [r5, #4]
   17050:	add	r4, r5, #144	; 0x90
   17054:	mov	r0, r4
   17058:	bl	127f4 <coda_cursor_set_product@plt>
   1705c:	cmp	r0, #0
   17060:	beq	17068 <traverse_product@@Base+0x7c>
   17064:	bl	18660 <handle_coda_error@@Base>
   17068:	ldr	r0, [r5, #136]	; 0x88
   1706c:	add	r0, r5, r0, lsl #2
   17070:	add	r1, r0, #8
   17074:	mov	r0, r4
   17078:	bl	1274c <coda_cursor_get_type@plt>
   1707c:	cmp	r0, #0
   17080:	beq	17088 <traverse_product@@Base+0x9c>
   17084:	bl	18660 <handle_coda_error@@Base>
   17088:	bl	170a4 <traverse_product@@Base+0xb8>
   1708c:	ldr	r0, [r5, #4]
   17090:	bl	129b0 <coda_close@plt>
   17094:	mov	r0, #0
   17098:	str	r0, [r5, #4]
   1709c:	pop	{r4, r5, fp, pc}
   170a0:			; <UNDEFINED> instruction: 0x000161b4
   170a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   170a8:	add	fp, sp, #24
   170ac:	sub	sp, sp, #16
   170b0:	ldr	r6, [pc, #792]	; 173d0 <traverse_product@@Base+0x3e4>
   170b4:	add	r1, sp, #12
   170b8:	ldr	r6, [pc, r6]
   170bc:	ldr	r0, [r6, #136]	; 0x88
   170c0:	add	r0, r6, r0, lsl #2
   170c4:	ldr	r0, [r0, #8]
   170c8:	bl	12ad0 <coda_type_get_class@plt>
   170cc:	cmp	r0, #0
   170d0:	beq	170d8 <traverse_product@@Base+0xec>
   170d4:	bl	18660 <handle_coda_error@@Base>
   170d8:	ldr	r0, [sp, #12]
   170dc:	cmp	r0, #6
   170e0:	bhi	17330 <traverse_product@@Base+0x344>
   170e4:	add	r1, pc, #4
   170e8:	ldr	r0, [r1, r0, lsl #2]
   170ec:	add	pc, r1, r0
   170f0:	andeq	r0, r0, r8, ror r0
   170f4:	andeq	r0, r0, r4, ror r1
   170f8:	andeq	r0, r0, ip, lsl r0
   170fc:	andeq	r0, r0, ip, lsl r0
   17100:	andeq	r0, r0, ip, lsl r0
   17104:	andeq	r0, r0, ip, lsl r0
   17108:	andeq	r0, r0, ip, asr #3
   1710c:	ldr	r0, [r6, #136]	; 0x88
   17110:	add	r1, sp, #8
   17114:	add	r0, r6, r0, lsl #2
   17118:	ldr	r0, [r0, #8]
   1711c:	bl	12890 <coda_type_get_read_type@plt>
   17120:	cmp	r0, #0
   17124:	beq	1712c <traverse_product@@Base+0x140>
   17128:	bl	18660 <handle_coda_error@@Base>
   1712c:	ldr	r0, [sp, #8]
   17130:	sub	r0, r0, #11
   17134:	cmp	r0, #1
   17138:	bhi	1732c <traverse_product@@Base+0x340>
   1713c:	bl	14a74 <dim_enter_array@@Base>
   17140:	ldr	r0, [r6, #3360]	; 0xd20
   17144:	add	r0, r0, #1
   17148:	str	r0, [r6, #3360]	; 0xd20
   1714c:	bl	1750c <traverse_product@@Base+0x520>
   17150:	ldr	r0, [r6, #3360]	; 0xd20
   17154:	sub	r0, r0, #1
   17158:	str	r0, [r6, #3360]	; 0xd20
   1715c:	bl	156f0 <dim_leave_array@@Base>
   17160:	sub	sp, fp, #24
   17164:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17168:	ldr	r0, [r6, #136]	; 0x88
   1716c:	cmp	r0, #30
   17170:	bgt	17330 <traverse_product@@Base+0x344>
   17174:	ldr	r1, [r6, #3748]	; 0xea4
   17178:	add	r0, r6, r0, lsl #2
   1717c:	add	r1, r1, #1
   17180:	str	r1, [r6, #3748]	; 0xea4
   17184:	add	r1, sp, #8
   17188:	ldr	r0, [r0, #8]
   1718c:	bl	12878 <coda_type_get_num_record_fields@plt>
   17190:	cmp	r0, #0
   17194:	beq	1719c <traverse_product@@Base+0x1b0>
   17198:	bl	18660 <handle_coda_error@@Base>
   1719c:	ldr	r0, [r6, #136]	; 0x88
   171a0:	add	r0, r0, #1
   171a4:	str	r0, [r6, #136]	; 0x88
   171a8:	ldr	r0, [r6, #796]	; 0x31c
   171ac:	add	r0, r6, r0, lsl #2
   171b0:	ldr	r8, [r0, #664]	; 0x298
   171b4:	cmp	r8, #0
   171b8:	beq	17338 <traverse_product@@Base+0x34c>
   171bc:	add	r4, sp, #4
   171c0:	add	r7, r6, #664	; 0x298
   171c4:	mov	r0, r8
   171c8:	bl	15bf0 <codadump_filter_get_fieldname@@Base>
   171cc:	cmp	r0, #0
   171d0:	beq	1738c <traverse_product@@Base+0x3a0>
   171d4:	mov	r5, r0
   171d8:	ldr	r0, [r6, #136]	; 0x88
   171dc:	mov	r2, r4
   171e0:	mov	r1, r5
   171e4:	add	r0, r6, r0, lsl #2
   171e8:	ldr	r0, [r0, #4]
   171ec:	bl	129e0 <coda_type_get_record_field_index_from_name@plt>
   171f0:	cmp	r0, #0
   171f4:	beq	1720c <traverse_product@@Base+0x220>
   171f8:	bl	12a70 <coda_get_errno@plt>
   171fc:	ldr	r0, [r0]
   17200:	cmn	r0, #102	; 0x66
   17204:	beq	173ac <traverse_product@@Base+0x3c0>
   17208:	bl	18660 <handle_coda_error@@Base>
   1720c:	ldr	r0, [r6, #796]	; 0x31c
   17210:	ldr	r0, [r7, r0, lsl #2]
   17214:	bl	15c30 <codadump_filter_get_subfilter@@Base>
   17218:	ldr	r1, [r6, #796]	; 0x31c
   1721c:	add	r1, r1, #1
   17220:	str	r0, [r7, r1, lsl #2]
   17224:	ldr	r0, [sp, #4]
   17228:	str	r1, [r6, #796]	; 0x31c
   1722c:	mov	r1, #1
   17230:	bl	173e8 <traverse_product@@Base+0x3fc>
   17234:	ldr	r0, [r6, #796]	; 0x31c
   17238:	sub	r0, r0, #1
   1723c:	str	r0, [r6, #796]	; 0x31c
   17240:	ldr	r0, [r7, r0, lsl #2]
   17244:	bl	15c70 <codadump_filter_get_next_filter@@Base>
   17248:	ldr	r1, [r6, #796]	; 0x31c
   1724c:	cmp	r0, #0
   17250:	str	r0, [r7, r1, lsl #2]
   17254:	bne	171c8 <traverse_product@@Base+0x1dc>
   17258:	add	r0, r7, r1, lsl #2
   1725c:	str	r8, [r0]
   17260:	b	1736c <traverse_product@@Base+0x380>
   17264:	ldr	r0, [r6, #136]	; 0x88
   17268:	cmp	r0, #30
   1726c:	bgt	17330 <traverse_product@@Base+0x344>
   17270:	bl	14a74 <dim_enter_array@@Base>
   17274:	ldr	r0, [r6, #3360]	; 0xd20
   17278:	add	r2, r6, #8
   1727c:	add	r0, r0, #1
   17280:	str	r0, [r6, #3360]	; 0xd20
   17284:	ldr	r0, [r6, #136]	; 0x88
   17288:	add	r1, r0, #1
   1728c:	str	r1, [r6, #136]	; 0x88
   17290:	add	r1, r2, r1, lsl #2
   17294:	ldr	r0, [r2, r0, lsl #2]
   17298:	bl	12968 <coda_type_get_array_base_type@plt>
   1729c:	cmp	r0, #0
   172a0:	beq	172a8 <traverse_product@@Base+0x2bc>
   172a4:	bl	18660 <handle_coda_error@@Base>
   172a8:	bl	170a4 <traverse_product@@Base+0xb8>
   172ac:	ldr	r0, [r6, #136]	; 0x88
   172b0:	sub	r0, r0, #1
   172b4:	str	r0, [r6, #136]	; 0x88
   172b8:	b	17150 <traverse_product@@Base+0x164>
   172bc:	bl	1265c <coda_get_option_bypass_special_types@plt>
   172c0:	mov	r2, r0
   172c4:	ldr	r0, [r6, #136]	; 0x88
   172c8:	cmp	r2, #0
   172cc:	add	r1, r6, r0, lsl #2
   172d0:	ldr	r0, [r1, #8]!
   172d4:	beq	172f4 <traverse_product@@Base+0x308>
   172d8:	bl	12a7c <coda_type_get_special_base_type@plt>
   172dc:	cmp	r0, #0
   172e0:	beq	172e8 <traverse_product@@Base+0x2fc>
   172e4:	bl	18660 <handle_coda_error@@Base>
   172e8:	bl	170a4 <traverse_product@@Base+0xb8>
   172ec:	sub	sp, fp, #24
   172f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   172f4:	add	r1, sp, #8
   172f8:	bl	12944 <coda_type_get_special_type@plt>
   172fc:	cmp	r0, #0
   17300:	beq	17308 <traverse_product@@Base+0x31c>
   17304:	bl	18660 <handle_coda_error@@Base>
   17308:	ldr	r0, [sp, #8]
   1730c:	sub	r1, r0, #1
   17310:	cmp	r1, #2
   17314:	bcc	1732c <traverse_product@@Base+0x340>
   17318:	cmp	r0, #0
   1731c:	beq	17330 <traverse_product@@Base+0x344>
   17320:	cmp	r0, #3
   17324:	beq	1713c <traverse_product@@Base+0x150>
   17328:	b	17330 <traverse_product@@Base+0x344>
   1732c:	bl	1750c <traverse_product@@Base+0x520>
   17330:	sub	sp, fp, #24
   17334:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17338:	ldr	r1, [sp, #8]
   1733c:	mov	r0, #0
   17340:	str	r0, [sp, #4]
   17344:	cmp	r1, #1
   17348:	blt	1736c <traverse_product@@Base+0x380>
   1734c:	mov	r1, #0
   17350:	bl	173e8 <traverse_product@@Base+0x3fc>
   17354:	ldr	r0, [sp, #4]
   17358:	ldr	r1, [sp, #8]
   1735c:	add	r0, r0, #1
   17360:	cmp	r0, r1
   17364:	str	r0, [sp, #4]
   17368:	blt	1734c <traverse_product@@Base+0x360>
   1736c:	ldr	r0, [r6, #136]	; 0x88
   17370:	sub	r0, r0, #1
   17374:	str	r0, [r6, #136]	; 0x88
   17378:	ldr	r0, [r6, #3748]	; 0xea4
   1737c:	sub	r0, r0, #1
   17380:	str	r0, [r6, #3748]	; 0xea4
   17384:	sub	sp, fp, #24
   17388:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1738c:	ldr	r0, [pc, #64]	; 173d4 <traverse_product@@Base+0x3e8>
   17390:	ldr	r1, [pc, #64]	; 173d8 <traverse_product@@Base+0x3ec>
   17394:	ldr	r3, [pc, #64]	; 173dc <traverse_product@@Base+0x3f0>
   17398:	movw	r2, #393	; 0x189
   1739c:	add	r0, pc, r0
   173a0:	add	r1, pc, r1
   173a4:	add	r3, pc, r3
   173a8:	bl	12ac4 <__assert_fail@plt>
   173ac:	ldr	r0, [pc, #44]	; 173e0 <traverse_product@@Base+0x3f4>
   173b0:	mov	r2, r5
   173b4:	ldr	r0, [pc, r0]
   173b8:	ldr	r0, [r0]
   173bc:	ldr	r1, [pc, #32]	; 173e4 <traverse_product@@Base+0x3f8>
   173c0:	add	r1, pc, r1
   173c4:	bl	128cc <fprintf@plt>
   173c8:	mov	r0, #1
   173cc:	bl	12884 <exit@plt>
   173d0:	strdeq	r6, [r1], -r4
   173d4:	ldrdeq	r3, [r0], -r4
   173d8:	ldrdeq	r3, [r0], -sp
   173dc:	andeq	r3, r0, lr, lsr r9
   173e0:	strdeq	r5, [r1], -ip
   173e4:	andeq	r3, r0, r7, lsr r9
   173e8:	push	{r4, r5, r6, sl, fp, lr}
   173ec:	add	fp, sp, #16
   173f0:	sub	sp, sp, #8
   173f4:	ldr	r6, [pc, #264]	; 17504 <traverse_product@@Base+0x518>
   173f8:	mov	r4, r0
   173fc:	mov	r5, r1
   17400:	add	r2, sp, #4
   17404:	mov	r1, r4
   17408:	ldr	r6, [pc, r6]
   1740c:	ldr	r0, [r6, #3748]	; 0xea4
   17410:	add	r0, r6, r0, lsl #2
   17414:	str	r4, [r0, #3488]	; 0xda0
   17418:	ldr	r0, [r6, #136]	; 0x88
   1741c:	add	r0, r6, r0, lsl #2
   17420:	ldr	r0, [r0, #4]
   17424:	bl	1268c <coda_type_get_record_field_hidden_status@plt>
   17428:	cmp	r0, #0
   1742c:	beq	17434 <traverse_product@@Base+0x448>
   17430:	bl	18660 <handle_coda_error@@Base>
   17434:	cmp	r5, #0
   17438:	bne	17448 <traverse_product@@Base+0x45c>
   1743c:	ldr	r0, [sp, #4]
   17440:	cmp	r0, #0
   17444:	bne	174fc <traverse_product@@Base+0x510>
   17448:	ldr	r0, [pc, #184]	; 17508 <traverse_product@@Base+0x51c>
   1744c:	ldr	r0, [pc, r0]
   17450:	ldr	r0, [r0]
   17454:	cmp	r0, #0
   17458:	beq	174a8 <traverse_product@@Base+0x4bc>
   1745c:	ldr	r0, [r6, #136]	; 0x88
   17460:	mov	r2, sp
   17464:	mov	r1, r4
   17468:	add	r0, r6, r0, lsl #2
   1746c:	ldr	r0, [r0, #4]
   17470:	bl	1277c <coda_type_get_record_field_available_status@plt>
   17474:	cmp	r0, #0
   17478:	beq	17480 <traverse_product@@Base+0x494>
   1747c:	bl	18660 <handle_coda_error@@Base>
   17480:	ldr	r0, [sp]
   17484:	cmn	r0, #1
   17488:	bne	1749c <traverse_product@@Base+0x4b0>
   1748c:	bl	15830 <dim_record_field_available@@Base>
   17490:	cmp	r0, #0
   17494:	beq	174fc <traverse_product@@Base+0x510>
   17498:	ldr	r0, [sp]
   1749c:	ldr	r1, [r6, #136]	; 0x88
   174a0:	add	r1, r6, r1, lsl #2
   174a4:	str	r0, [r1, #3360]	; 0xd20
   174a8:	ldr	r0, [r6, #136]	; 0x88
   174ac:	ldr	r1, [r6, #3748]	; 0xea4
   174b0:	add	r0, r6, r0, lsl #2
   174b4:	add	r1, r6, r1, lsl #2
   174b8:	ldr	r0, [r0, #4]
   174bc:	add	r2, r1, #3616	; 0xe20
   174c0:	mov	r1, r4
   174c4:	bl	12a88 <coda_type_get_record_field_name@plt>
   174c8:	cmp	r0, #0
   174cc:	beq	174d4 <traverse_product@@Base+0x4e8>
   174d0:	bl	18660 <handle_coda_error@@Base>
   174d4:	ldr	r0, [r6, #136]	; 0x88
   174d8:	add	r1, r6, r0, lsl #2
   174dc:	ldr	r0, [r1, #4]
   174e0:	add	r2, r1, #8
   174e4:	mov	r1, r4
   174e8:	bl	12740 <coda_type_get_record_field_type@plt>
   174ec:	cmp	r0, #0
   174f0:	beq	174f8 <traverse_product@@Base+0x50c>
   174f4:	bl	18660 <handle_coda_error@@Base>
   174f8:	bl	170a4 <traverse_product@@Base+0xb8>
   174fc:	sub	sp, fp, #16
   17500:	pop	{r4, r5, r6, sl, fp, pc}
   17504:	andeq	r5, r1, r4, lsr #27
   17508:	andeq	r5, r1, ip, asr sp
   1750c:	push	{r4, r5, fp, lr}
   17510:	add	fp, sp, #8
   17514:	sub	sp, sp, #8
   17518:	ldr	r0, [pc, #600]	; 17778 <traverse_product@@Base+0x78c>
   1751c:	ldr	r0, [pc, r0]
   17520:	ldr	r0, [r0]
   17524:	cmp	r0, #1
   17528:	beq	175d0 <traverse_product@@Base+0x5e4>
   1752c:	cmp	r0, #0
   17530:	bne	17750 <traverse_product@@Base+0x764>
   17534:	ldr	r4, [pc, #576]	; 1777c <traverse_product@@Base+0x790>
   17538:	mov	r1, #1
   1753c:	mov	r2, #0
   17540:	ldr	r4, [pc, r4]
   17544:	ldr	r0, [r4]
   17548:	bl	16bd0 <print_full_field_name@@Base>
   1754c:	ldr	r0, [pc, #556]	; 17780 <traverse_product@@Base+0x794>
   17550:	ldr	r0, [pc, r0]
   17554:	ldr	r0, [r0]
   17558:	cmp	r0, #0
   1755c:	beq	1764c <traverse_product@@Base+0x660>
   17560:	ldr	r5, [pc, #540]	; 17784 <traverse_product@@Base+0x798>
   17564:	add	r1, sp, #4
   17568:	ldr	r5, [pc, r5]
   1756c:	ldr	r0, [r5, #136]	; 0x88
   17570:	add	r0, r5, r0, lsl #2
   17574:	ldr	r0, [r0, #8]
   17578:	bl	12ad0 <coda_type_get_class@plt>
   1757c:	cmp	r0, #0
   17580:	beq	17588 <traverse_product@@Base+0x59c>
   17584:	bl	18660 <handle_coda_error@@Base>
   17588:	ldr	r0, [sp, #4]
   1758c:	cmp	r0, #6
   17590:	bne	175dc <traverse_product@@Base+0x5f0>
   17594:	ldr	r0, [r5, #136]	; 0x88
   17598:	mov	r1, sp
   1759c:	add	r0, r5, r0, lsl #2
   175a0:	ldr	r0, [r0, #8]
   175a4:	bl	12944 <coda_type_get_special_type@plt>
   175a8:	cmp	r0, #0
   175ac:	beq	175b4 <traverse_product@@Base+0x5c8>
   175b0:	bl	18660 <handle_coda_error@@Base>
   175b4:	ldr	r0, [sp]
   175b8:	bl	12638 <coda_type_get_special_type_name@plt>
   175bc:	mov	r1, r0
   175c0:	ldr	r0, [pc, #448]	; 17788 <traverse_product@@Base+0x79c>
   175c4:	add	r0, pc, r0
   175c8:	bl	12698 <printf@plt>
   175cc:	b	1764c <traverse_product@@Base+0x660>
   175d0:	sub	sp, fp, #8
   175d4:	pop	{r4, r5, fp, lr}
   175d8:	b	12bcc <export_data_element_to_ascii@@Base>
   175dc:	ldr	r0, [r5, #136]	; 0x88
   175e0:	mov	r1, sp
   175e4:	add	r0, r5, r0, lsl #2
   175e8:	ldr	r0, [r0, #8]
   175ec:	bl	12890 <coda_type_get_read_type@plt>
   175f0:	cmp	r0, #0
   175f4:	beq	175fc <traverse_product@@Base+0x610>
   175f8:	bl	18660 <handle_coda_error@@Base>
   175fc:	ldr	r0, [sp]
   17600:	bl	1298c <coda_type_get_native_type_name@plt>
   17604:	mov	r1, r0
   17608:	ldr	r0, [pc, #380]	; 1778c <traverse_product@@Base+0x7a0>
   1760c:	add	r0, pc, r0
   17610:	bl	12698 <printf@plt>
   17614:	ldr	r0, [sp]
   17618:	sub	r0, r0, #11
   1761c:	cmp	r0, #1
   17620:	bhi	1764c <traverse_product@@Base+0x660>
   17624:	mov	r0, #40	; 0x28
   17628:	bl	1292c <putchar@plt>
   1762c:	ldr	r1, [r5, #3360]	; 0xd20
   17630:	cmp	r1, #0
   17634:	ble	17758 <traverse_product@@Base+0x76c>
   17638:	ldr	r0, [r4]
   1763c:	sub	r1, r1, #1
   17640:	bl	16e90 <print_full_field_name@@Base+0x2c0>
   17644:	mov	r0, #41	; 0x29
   17648:	bl	1292c <putchar@plt>
   1764c:	ldr	r0, [pc, #316]	; 17790 <traverse_product@@Base+0x7a4>
   17650:	ldr	r0, [pc, r0]
   17654:	ldr	r0, [r0]
   17658:	cmp	r0, #0
   1765c:	beq	176a8 <traverse_product@@Base+0x6bc>
   17660:	ldr	r0, [pc, #300]	; 17794 <traverse_product@@Base+0x7a8>
   17664:	ldr	r0, [pc, r0]
   17668:	ldr	r1, [r0, #136]	; 0x88
   1766c:	add	r0, r0, r1, lsl #2
   17670:	add	r1, sp, #4
   17674:	ldr	r0, [r0, #8]
   17678:	bl	127b8 <coda_type_get_unit@plt>
   1767c:	cmp	r0, #0
   17680:	beq	17688 <traverse_product@@Base+0x69c>
   17684:	bl	18660 <handle_coda_error@@Base>
   17688:	ldr	r1, [sp, #4]
   1768c:	cmp	r1, #0
   17690:	ldrbne	r0, [r1]
   17694:	cmpne	r0, #0
   17698:	beq	176a8 <traverse_product@@Base+0x6bc>
   1769c:	ldr	r0, [pc, #244]	; 17798 <traverse_product@@Base+0x7ac>
   176a0:	add	r0, pc, r0
   176a4:	bl	12698 <printf@plt>
   176a8:	ldr	r0, [pc, #236]	; 1779c <traverse_product@@Base+0x7b0>
   176ac:	ldr	r0, [pc, r0]
   176b0:	ldr	r0, [r0]
   176b4:	cmp	r0, #0
   176b8:	beq	17704 <traverse_product@@Base+0x718>
   176bc:	ldr	r0, [pc, #220]	; 177a0 <traverse_product@@Base+0x7b4>
   176c0:	ldr	r0, [pc, r0]
   176c4:	ldr	r1, [r0, #136]	; 0x88
   176c8:	add	r0, r0, r1, lsl #2
   176cc:	add	r1, sp, #4
   176d0:	ldr	r0, [r0, #8]
   176d4:	bl	127c4 <coda_type_get_description@plt>
   176d8:	cmp	r0, #0
   176dc:	beq	176e4 <traverse_product@@Base+0x6f8>
   176e0:	bl	18660 <handle_coda_error@@Base>
   176e4:	ldr	r1, [sp, #4]
   176e8:	cmp	r1, #0
   176ec:	ldrbne	r0, [r1]
   176f0:	cmpne	r0, #0
   176f4:	beq	17704 <traverse_product@@Base+0x718>
   176f8:	ldr	r0, [pc, #164]	; 177a4 <traverse_product@@Base+0x7b8>
   176fc:	add	r0, pc, r0
   17700:	bl	12698 <printf@plt>
   17704:	mov	r0, #10
   17708:	bl	1292c <putchar@plt>
   1770c:	ldr	r0, [pc, #148]	; 177a8 <traverse_product@@Base+0x7bc>
   17710:	ldr	r0, [pc, r0]
   17714:	ldr	r0, [r0]
   17718:	cmp	r0, #0
   1771c:	beq	17750 <traverse_product@@Base+0x764>
   17720:	ldr	r5, [pc, #132]	; 177ac <traverse_product@@Base+0x7c0>
   17724:	ldr	r5, [pc, r5]
   17728:	ldr	r0, [r5]
   1772c:	cmp	r0, #1
   17730:	blt	17750 <traverse_product@@Base+0x764>
   17734:	mov	r4, #0
   17738:	mov	r0, r4
   1773c:	bl	14878 <print_all_distinct_dims@@Base>
   17740:	ldr	r0, [r5]
   17744:	add	r4, r4, #1
   17748:	cmp	r4, r0
   1774c:	blt	17738 <traverse_product@@Base+0x74c>
   17750:	sub	sp, fp, #8
   17754:	pop	{r4, r5, fp, pc}
   17758:	ldr	r0, [pc, #80]	; 177b0 <traverse_product@@Base+0x7c4>
   1775c:	ldr	r1, [pc, #80]	; 177b4 <traverse_product@@Base+0x7c8>
   17760:	ldr	r3, [pc, #80]	; 177b8 <traverse_product@@Base+0x7cc>
   17764:	mov	r2, #238	; 0xee
   17768:	add	r0, pc, r0
   1776c:	add	r1, pc, r1
   17770:	add	r3, pc, r3
   17774:	bl	12ac4 <__assert_fail@plt>
   17778:			; <UNDEFINED> instruction: 0x00015cb0
   1777c:	muleq	r1, r4, ip
   17780:	andeq	r5, r1, ip, ror #24
   17784:	andeq	r5, r1, r4, asr #24
   17788:	andeq	r3, r0, r7, ror #14
   1778c:	andeq	r3, r0, pc, lsl r7
   17790:	andeq	r5, r1, r4, asr fp
   17794:	andeq	r5, r1, r8, asr #22
   17798:	andeq	r3, r0, r7, asr #13
   1779c:	andeq	r5, r1, r4, lsl fp
   177a0:	andeq	r5, r1, ip, ror #21
   177a4:	andeq	r3, r0, r1, ror r6
   177a8:	andeq	r5, r1, r8, lsl #21
   177ac:			; <UNDEFINED> instruction: 0x00015ab8
   177b0:	andeq	r3, r0, r7, asr #11
   177b4:	andeq	r3, r0, r1, lsl r5
   177b8:	ldrdeq	r3, [r0], -ip

000177bc <print_yaml_data@@Base>:
   177bc:	push	{r4, sl, fp, lr}
   177c0:	add	fp, sp, #8
   177c4:	sub	sp, sp, #528	; 0x210
   177c8:	ldr	r1, [pc, #192]	; 17890 <print_yaml_data@@Base+0xd4>
   177cc:	add	r1, pc, r1
   177d0:	str	r0, [r1]
   177d4:	sub	r1, fp, #12
   177d8:	ldr	r4, [pc, #180]	; 17894 <print_yaml_data@@Base+0xd8>
   177dc:	ldr	r4, [pc, r4]
   177e0:	ldr	r0, [r4]
   177e4:	bl	126c8 <coda_open@plt>
   177e8:	cmp	r0, #0
   177ec:	beq	1782c <print_yaml_data@@Base+0x70>
   177f0:	bl	12a70 <coda_get_errno@plt>
   177f4:	ldr	r0, [r0]
   177f8:	cmn	r0, #21
   177fc:	bne	17828 <print_yaml_data@@Base+0x6c>
   17800:	mov	r0, #0
   17804:	bl	12710 <coda_set_option_use_mmap@plt>
   17808:	ldr	r0, [r4]
   1780c:	sub	r1, fp, #12
   17810:	bl	126c8 <coda_open@plt>
   17814:	mov	r4, r0
   17818:	mov	r0, #1
   1781c:	bl	12710 <coda_set_option_use_mmap@plt>
   17820:	cmp	r4, #0
   17824:	beq	1782c <print_yaml_data@@Base+0x70>
   17828:	bl	18660 <handle_coda_error@@Base>
   1782c:	ldr	r1, [fp, #-12]
   17830:	mov	r0, sp
   17834:	bl	127f4 <coda_cursor_set_product@plt>
   17838:	cmp	r0, #0
   1783c:	beq	17844 <print_yaml_data@@Base+0x88>
   17840:	bl	18660 <handle_coda_error@@Base>
   17844:	ldr	r0, [pc, #76]	; 17898 <print_yaml_data@@Base+0xdc>
   17848:	ldr	r0, [pc, r0]
   1784c:	ldr	r1, [r0]
   17850:	cmp	r1, #0
   17854:	beq	1786c <print_yaml_data@@Base+0xb0>
   17858:	mov	r0, sp
   1785c:	bl	129d4 <coda_cursor_goto@plt>
   17860:	cmp	r0, #0
   17864:	beq	1786c <print_yaml_data@@Base+0xb0>
   17868:	bl	18660 <handle_coda_error@@Base>
   1786c:	mov	r0, #0
   17870:	bl	12668 <coda_set_option_perform_boundary_checks@plt>
   17874:	mov	r0, sp
   17878:	mov	r1, #0
   1787c:	bl	1789c <print_yaml_data@@Base+0xe0>
   17880:	ldr	r0, [fp, #-12]
   17884:	bl	129b0 <coda_close@plt>
   17888:	sub	sp, fp, #8
   1788c:	pop	{r4, sl, fp, pc}
   17890:	andeq	r5, r1, ip, lsr sl
   17894:	ldrdeq	r5, [r1], -r0
   17898:	andeq	r5, r1, r8, lsl #19
   1789c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178a0:	add	fp, sp, #28
   178a4:	sub	sp, sp, #76	; 0x4c
   178a8:	mov	sl, r0
   178ac:	mov	r0, #0
   178b0:	mov	r5, r1
   178b4:	str	r0, [fp, #-36]	; 0xffffffdc
   178b8:	ldr	r0, [pc, #2568]	; 182c8 <print_yaml_data@@Base+0xb0c>
   178bc:	ldr	r0, [pc, r0]
   178c0:	cmp	r0, #0
   178c4:	beq	179c0 <print_yaml_data@@Base+0x204>
   178c8:	sub	r1, fp, #36	; 0x24
   178cc:	mov	r0, sl
   178d0:	bl	12788 <coda_cursor_has_attributes@plt>
   178d4:	cmp	r0, #0
   178d8:	beq	178e0 <print_yaml_data@@Base+0x124>
   178dc:	bl	18660 <handle_coda_error@@Base>
   178e0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   178e4:	cmp	r0, #0
   178e8:	beq	179c0 <print_yaml_data@@Base+0x204>
   178ec:	cmp	r5, #0
   178f0:	beq	17948 <print_yaml_data@@Base+0x18c>
   178f4:	ldr	r0, [pc, #2512]	; 182cc <print_yaml_data@@Base+0xb10>
   178f8:	add	r0, pc, r0
   178fc:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   17900:	ldr	r0, [pc, #2504]	; 182d0 <print_yaml_data@@Base+0xb14>
   17904:	ldr	r0, [pc, r0]
   17908:	cmp	r0, #0
   1790c:	blt	182a8 <print_yaml_data@@Base+0xaec>
   17910:	beq	17948 <print_yaml_data@@Base+0x18c>
   17914:	ldr	r7, [pc, #2488]	; 182d4 <print_yaml_data@@Base+0xb18>
   17918:	add	r4, r0, #1
   1791c:	ldr	r7, [pc, r7]
   17920:	ldr	r6, [pc, #2480]	; 182d8 <print_yaml_data@@Base+0xb1c>
   17924:	add	r6, pc, r6
   17928:	ldr	r3, [r7]
   1792c:	mov	r0, r6
   17930:	mov	r1, #2
   17934:	mov	r2, #1
   17938:	bl	127e8 <fwrite@plt>
   1793c:	sub	r4, r4, #1
   17940:	cmp	r4, #1
   17944:	bgt	17928 <print_yaml_data@@Base+0x16c>
   17948:	ldr	r0, [pc, #2444]	; 182dc <print_yaml_data@@Base+0xb20>
   1794c:	add	r0, pc, r0
   17950:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   17954:	mov	r0, sl
   17958:	bl	12908 <coda_cursor_goto_attributes@plt>
   1795c:	cmp	r0, #0
   17960:	beq	17968 <print_yaml_data@@Base+0x1ac>
   17964:	bl	18660 <handle_coda_error@@Base>
   17968:	ldr	r0, [pc, #2416]	; 182e0 <print_yaml_data@@Base+0xb24>
   1796c:	mov	r1, #1
   17970:	ldr	r0, [pc, r0]
   17974:	ldr	r4, [pc, #2408]	; 182e4 <print_yaml_data@@Base+0xb28>
   17978:	add	r0, r0, #1
   1797c:	add	r4, pc, r4
   17980:	str	r0, [r4]
   17984:	mov	r0, sl
   17988:	bl	1789c <print_yaml_data@@Base+0xe0>
   1798c:	ldr	r0, [pc, #2388]	; 182e8 <print_yaml_data@@Base+0xb2c>
   17990:	ldr	r0, [pc, r0]
   17994:	sub	r0, r0, #1
   17998:	str	r0, [r4]
   1799c:	mov	r0, sl
   179a0:	bl	1286c <coda_cursor_goto_parent@plt>
   179a4:	ldr	r0, [pc, #2368]	; 182ec <print_yaml_data@@Base+0xb30>
   179a8:	add	r0, pc, r0
   179ac:	bl	18404 <print_yaml_data@@Base+0xc48>
   179b0:	ldr	r0, [pc, #2360]	; 182f0 <print_yaml_data@@Base+0xb34>
   179b4:	ldr	r0, [pc, r0]
   179b8:	add	r0, r0, #1
   179bc:	str	r0, [r4]
   179c0:	sub	r1, fp, #32
   179c4:	mov	r0, sl
   179c8:	bl	12794 <coda_cursor_get_type_class@plt>
   179cc:	cmp	r0, #0
   179d0:	beq	179d8 <print_yaml_data@@Base+0x21c>
   179d4:	bl	18660 <handle_coda_error@@Base>
   179d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   179dc:	cmp	r0, #6
   179e0:	bhi	18240 <print_yaml_data@@Base+0xa84>
   179e4:	add	r1, pc, #4
   179e8:	ldr	r0, [r1, r0, lsl #2]
   179ec:	add	pc, r1, r0
   179f0:	strheq	r0, [r0], -r4
   179f4:	andeq	r0, r0, ip, lsl #4
   179f8:	andeq	r0, r0, ip, lsl r0
   179fc:	andeq	r0, r0, ip, lsl r0
   17a00:	andeq	r0, r0, ip, lsl r0
   17a04:	andeq	r0, r0, ip, lsl r0
   17a08:	andeq	r0, r0, r0, asr r2
   17a0c:	sub	r1, fp, #40	; 0x28
   17a10:	mov	r0, sl
   17a14:	bl	12830 <coda_cursor_get_read_type@plt>
   17a18:	cmp	r0, #0
   17a1c:	beq	17a24 <print_yaml_data@@Base+0x268>
   17a20:	bl	18660 <handle_coda_error@@Base>
   17a24:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17a28:	add	r0, r0, #1
   17a2c:	cmp	r0, #13
   17a30:	bhi	18240 <print_yaml_data@@Base+0xa84>
   17a34:	add	r1, pc, #4
   17a38:	ldr	r0, [r1, r0, lsl #2]
   17a3c:	add	pc, r1, r0
   17a40:	andeq	r0, r0, r4, lsr #7
   17a44:	andeq	r0, r0, r8, lsr r0
   17a48:	andeq	r0, r0, ip, asr #4
   17a4c:	andeq	r0, r0, r8, lsr r0
   17a50:	andeq	r0, r0, ip, asr #4
   17a54:	andeq	r0, r0, r8, lsr r0
   17a58:	andeq	r0, r0, ip, asr #4
   17a5c:			; <UNDEFINED> instruction: 0x000003b0
   17a60:	andeq	r0, r0, r0, ror #7
   17a64:	andeq	r0, r0, r8, ror r2
   17a68:	andeq	r0, r0, r8, ror r2
   17a6c:			; <UNDEFINED> instruction: 0x000002bc
   17a70:	strdeq	r0, [r0], -r8
   17a74:	andeq	r0, r0, r0, lsr #8
   17a78:	add	r1, sp, #16
   17a7c:	mov	r0, sl
   17a80:	bl	12a4c <coda_cursor_read_int32@plt>
   17a84:	cmp	r0, #0
   17a88:	beq	17a90 <print_yaml_data@@Base+0x2d4>
   17a8c:	bl	18660 <handle_coda_error@@Base>
   17a90:	ldr	r1, [sp, #16]
   17a94:	ldr	r0, [pc, #2264]	; 18374 <print_yaml_data@@Base+0xbb8>
   17a98:	add	r0, pc, r0
   17a9c:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   17aa0:	b	18240 <print_yaml_data@@Base+0xa84>
   17aa4:	add	r1, sp, #16
   17aa8:	mov	r0, sl
   17aac:	bl	126ec <coda_cursor_get_num_elements@plt>
   17ab0:	cmp	r0, #0
   17ab4:	beq	17abc <print_yaml_data@@Base+0x300>
   17ab8:	bl	18660 <handle_coda_error@@Base>
   17abc:	ldr	r0, [sp, #16]
   17ac0:	cmp	r0, #1
   17ac4:	blt	17cf0 <print_yaml_data@@Base+0x534>
   17ac8:	cmp	r5, #0
   17acc:	beq	17adc <print_yaml_data@@Base+0x320>
   17ad0:	ldr	r0, [pc, #2076]	; 182f4 <print_yaml_data@@Base+0xb38>
   17ad4:	add	r0, pc, r0
   17ad8:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   17adc:	add	r1, sp, #8
   17ae0:	mov	r0, sl
   17ae4:	bl	1274c <coda_cursor_get_type@plt>
   17ae8:	cmp	r0, #0
   17aec:	beq	17af4 <print_yaml_data@@Base+0x338>
   17af0:	bl	18660 <handle_coda_error@@Base>
   17af4:	ldr	r0, [sp, #8]
   17af8:	sub	r1, fp, #40	; 0x28
   17afc:	bl	12950 <coda_type_get_record_union_status@plt>
   17b00:	cmp	r0, #0
   17b04:	beq	17b0c <print_yaml_data@@Base+0x350>
   17b08:	bl	18660 <handle_coda_error@@Base>
   17b0c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17b10:	cmp	r0, #0
   17b14:	beq	17f34 <print_yaml_data@@Base+0x778>
   17b18:	sub	r1, fp, #44	; 0x2c
   17b1c:	mov	r0, sl
   17b20:	bl	12a40 <coda_cursor_get_available_union_field_index@plt>
   17b24:	cmp	r0, #0
   17b28:	beq	17b30 <print_yaml_data@@Base+0x374>
   17b2c:	bl	18660 <handle_coda_error@@Base>
   17b30:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17b34:	ldr	r0, [sp, #8]
   17b38:	sub	r2, fp, #48	; 0x30
   17b3c:	bl	12a88 <coda_type_get_record_field_name@plt>
   17b40:	cmp	r0, #0
   17b44:	beq	17b4c <print_yaml_data@@Base+0x390>
   17b48:	bl	18660 <handle_coda_error@@Base>
   17b4c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17b50:	mov	r0, sl
   17b54:	bl	1280c <coda_cursor_goto_record_field_by_index@plt>
   17b58:	cmp	r0, #0
   17b5c:	beq	17b64 <print_yaml_data@@Base+0x3a8>
   17b60:	bl	18660 <handle_coda_error@@Base>
   17b64:	cmp	r5, #0
   17b68:	beq	17bb4 <print_yaml_data@@Base+0x3f8>
   17b6c:	ldr	r0, [pc, #1924]	; 182f8 <print_yaml_data@@Base+0xb3c>
   17b70:	ldr	r0, [pc, r0]
   17b74:	cmp	r0, #0
   17b78:	blt	182a8 <print_yaml_data@@Base+0xaec>
   17b7c:	beq	17bb4 <print_yaml_data@@Base+0x3f8>
   17b80:	ldr	r6, [pc, #1908]	; 182fc <print_yaml_data@@Base+0xb40>
   17b84:	add	r4, r0, #1
   17b88:	ldr	r6, [pc, r6]
   17b8c:	ldr	r5, [pc, #1900]	; 18300 <print_yaml_data@@Base+0xb44>
   17b90:	add	r5, pc, r5
   17b94:	ldr	r3, [r6]
   17b98:	mov	r0, r5
   17b9c:	mov	r1, #2
   17ba0:	mov	r2, #1
   17ba4:	bl	127e8 <fwrite@plt>
   17ba8:	sub	r4, r4, #1
   17bac:	cmp	r4, #1
   17bb0:	bgt	17b94 <print_yaml_data@@Base+0x3d8>
   17bb4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   17bb8:	ldr	r0, [pc, #1860]	; 18304 <print_yaml_data@@Base+0xb48>
   17bbc:	add	r0, pc, r0
   17bc0:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   17bc4:	ldr	r0, [pc, #1852]	; 18308 <print_yaml_data@@Base+0xb4c>
   17bc8:	mov	r1, #1
   17bcc:	ldr	r0, [pc, r0]
   17bd0:	ldr	r4, [pc, #1844]	; 1830c <print_yaml_data@@Base+0xb50>
   17bd4:	add	r0, r0, #1
   17bd8:	add	r4, pc, r4
   17bdc:	str	r0, [r4]
   17be0:	mov	r0, sl
   17be4:	bl	1789c <print_yaml_data@@Base+0xe0>
   17be8:	ldr	r0, [pc, #1824]	; 18310 <print_yaml_data@@Base+0xb54>
   17bec:	ldr	r0, [pc, r0]
   17bf0:	sub	r0, r0, #1
   17bf4:	str	r0, [r4]
   17bf8:	b	18228 <print_yaml_data@@Base+0xa6c>
   17bfc:	add	r5, sp, #16
   17c00:	add	r1, sp, #8
   17c04:	mov	r0, sl
   17c08:	mov	r2, r5
   17c0c:	bl	12998 <coda_cursor_get_array_dim@plt>
   17c10:	cmp	r0, #0
   17c14:	beq	17c1c <print_yaml_data@@Base+0x460>
   17c18:	bl	18660 <handle_coda_error@@Base>
   17c1c:	ldr	r0, [sp, #8]
   17c20:	cmp	r0, #0
   17c24:	blt	18234 <print_yaml_data@@Base+0xa78>
   17c28:	beq	1808c <print_yaml_data@@Base+0x8d0>
   17c2c:	cmp	r0, #4
   17c30:	bcs	1813c <print_yaml_data@@Base+0x980>
   17c34:	mov	r1, #0
   17c38:	mov	r6, #1
   17c3c:	b	18170 <print_yaml_data@@Base+0x9b4>
   17c40:	sub	r1, fp, #40	; 0x28
   17c44:	mov	r0, sl
   17c48:	bl	127d0 <coda_cursor_get_special_type@plt>
   17c4c:	cmp	r0, #0
   17c50:	beq	17c58 <print_yaml_data@@Base+0x49c>
   17c54:	bl	18660 <handle_coda_error@@Base>
   17c58:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17c5c:	cmp	r0, #3
   17c60:	bhi	18240 <print_yaml_data@@Base+0xa84>
   17c64:	add	r1, pc, #4
   17c68:	ldr	r0, [r1, r0, lsl #2]
   17c6c:	add	pc, r1, r0
   17c70:	andeq	r0, r0, r0, lsl r0
   17c74:	muleq	r0, ip, r4
   17c78:	andeq	r0, r0, r4, lsr #8
   17c7c:	andeq	r0, r0, r4, ror #8
   17c80:	ldr	r0, [pc, #1796]	; 1838c <print_yaml_data@@Base+0xbd0>
   17c84:	add	r0, pc, r0
   17c88:	b	1823c <print_yaml_data@@Base+0xa80>
   17c8c:	add	r1, sp, #16
   17c90:	mov	r0, sl
   17c94:	bl	12728 <coda_cursor_read_uint32@plt>
   17c98:	cmp	r0, #0
   17c9c:	beq	17ca4 <print_yaml_data@@Base+0x4e8>
   17ca0:	bl	18660 <handle_coda_error@@Base>
   17ca4:	ldr	r1, [sp, #16]
   17ca8:	ldr	r0, [pc, #1736]	; 18378 <print_yaml_data@@Base+0xbbc>
   17cac:	add	r0, pc, r0
   17cb0:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   17cb4:	b	18240 <print_yaml_data@@Base+0xa84>
   17cb8:	add	r1, sp, #16
   17cbc:	mov	r0, sl
   17cc0:	bl	128b4 <coda_cursor_read_double@plt>
   17cc4:	cmp	r0, #0
   17cc8:	beq	17cd0 <print_yaml_data@@Base+0x514>
   17ccc:	bl	18660 <handle_coda_error@@Base>
   17cd0:	vldr	d16, [sp, #16]
   17cd4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17cd8:	vmov	r2, r3, d16
   17cdc:	cmp	r0, #8
   17ce0:	bne	17f28 <print_yaml_data@@Base+0x76c>
   17ce4:	ldr	r0, [pc, #1684]	; 18380 <print_yaml_data@@Base+0xbc4>
   17ce8:	add	r0, pc, r0
   17cec:	b	18134 <print_yaml_data@@Base+0x978>
   17cf0:	ldr	r0, [pc, #1592]	; 18330 <print_yaml_data@@Base+0xb74>
   17cf4:	add	r0, pc, r0
   17cf8:	b	1823c <print_yaml_data@@Base+0xa80>
   17cfc:	add	r1, sp, #16
   17d00:	mov	r0, sl
   17d04:	bl	12914 <coda_cursor_read_char@plt>
   17d08:	cmp	r0, #0
   17d0c:	beq	17d14 <print_yaml_data@@Base+0x558>
   17d10:	bl	18660 <handle_coda_error@@Base>
   17d14:	ldr	r0, [pc, #1584]	; 1834c <print_yaml_data@@Base+0xb90>
   17d18:	add	r0, pc, r0
   17d1c:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   17d20:	add	r0, sp, #16
   17d24:	mov	r1, #1
   17d28:	bl	184d0 <print_yaml_data@@Base+0xd14>
   17d2c:	ldr	r0, [pc, #1564]	; 18350 <print_yaml_data@@Base+0xb94>
   17d30:	add	r0, pc, r0
   17d34:	b	1823c <print_yaml_data@@Base+0xa80>
   17d38:	add	r1, sp, #16
   17d3c:	mov	r0, sl
   17d40:	bl	1289c <coda_cursor_get_string_length@plt>
   17d44:	cmp	r0, #0
   17d48:	beq	17d50 <print_yaml_data@@Base+0x594>
   17d4c:	bl	18660 <handle_coda_error@@Base>
   17d50:	ldr	r0, [sp, #16]
   17d54:	add	r6, r0, #1
   17d58:	mov	r0, r6
   17d5c:	bl	1283c <malloc@plt>
   17d60:	mov	r5, r0
   17d64:	cmp	r0, #0
   17d68:	bne	17d9c <print_yaml_data@@Base+0x5e0>
   17d6c:	movw	r0, #361	; 0x169
   17d70:	mov	r2, r6
   17d74:	str	r0, [sp]
   17d78:	mvn	r0, #0
   17d7c:	ldr	r1, [pc, #1488]	; 18354 <print_yaml_data@@Base+0xb98>
   17d80:	ldr	r3, [pc, #1488]	; 18358 <print_yaml_data@@Base+0xb9c>
   17d84:	add	r1, pc, r1
   17d88:	add	r3, pc, r3
   17d8c:	bl	126bc <coda_set_error@plt>
   17d90:	bl	18660 <handle_coda_error@@Base>
   17d94:	ldr	r0, [sp, #16]
   17d98:	add	r6, r0, #1
   17d9c:	mov	r0, sl
   17da0:	mov	r1, r5
   17da4:	mov	r2, r6
   17da8:	bl	12860 <coda_cursor_read_string@plt>
   17dac:	cmp	r0, #0
   17db0:	beq	17db8 <print_yaml_data@@Base+0x5fc>
   17db4:	bl	18660 <handle_coda_error@@Base>
   17db8:	ldr	r0, [pc, #1436]	; 1835c <print_yaml_data@@Base+0xba0>
   17dbc:	add	r0, pc, r0
   17dc0:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   17dc4:	ldr	r1, [sp, #16]
   17dc8:	mov	r0, r5
   17dcc:	bl	184d0 <print_yaml_data@@Base+0xd14>
   17dd0:	ldr	r1, [sp, #16]
   17dd4:	ldr	r0, [pc, #1412]	; 18360 <print_yaml_data@@Base+0xba4>
   17dd8:	add	r0, pc, r0
   17ddc:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   17de0:	b	17f1c <print_yaml_data@@Base+0x760>
   17de4:	ldr	r0, [pc, #1436]	; 18388 <print_yaml_data@@Base+0xbcc>
   17de8:	add	r0, pc, r0
   17dec:	b	1823c <print_yaml_data@@Base+0xa80>
   17df0:	add	r1, sp, #8
   17df4:	mov	r0, sl
   17df8:	bl	129bc <coda_cursor_read_int64@plt>
   17dfc:	cmp	r0, #0
   17e00:	beq	17e08 <print_yaml_data@@Base+0x64c>
   17e04:	bl	18660 <handle_coda_error@@Base>
   17e08:	ldr	r0, [sp, #8]
   17e0c:	ldr	r1, [sp, #12]
   17e10:	add	r4, sp, #16
   17e14:	mov	r2, r4
   17e18:	bl	12ab8 <coda_str64@plt>
   17e1c:	b	17e4c <print_yaml_data@@Base+0x690>
   17e20:	add	r1, sp, #8
   17e24:	mov	r0, sl
   17e28:	bl	128a8 <coda_cursor_read_uint64@plt>
   17e2c:	cmp	r0, #0
   17e30:	beq	17e38 <print_yaml_data@@Base+0x67c>
   17e34:	bl	18660 <handle_coda_error@@Base>
   17e38:	ldr	r0, [sp, #8]
   17e3c:	ldr	r1, [sp, #12]
   17e40:	add	r4, sp, #16
   17e44:	mov	r2, r4
   17e48:	bl	126f8 <coda_str64u@plt>
   17e4c:	ldr	r0, [pc, #1320]	; 1837c <print_yaml_data@@Base+0xbc0>
   17e50:	mov	r1, r4
   17e54:	add	r0, pc, r0
   17e58:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   17e5c:	b	18240 <print_yaml_data@@Base+0xa84>
   17e60:	add	r1, sp, #16
   17e64:	mov	r0, sl
   17e68:	bl	12a1c <coda_cursor_get_bit_size@plt>
   17e6c:	cmp	r0, #0
   17e70:	beq	17e78 <print_yaml_data@@Base+0x6bc>
   17e74:	bl	18660 <handle_coda_error@@Base>
   17e78:	ldr	r4, [sp, #16]
   17e7c:	ldr	r7, [sp, #20]
   17e80:	lsr	r0, r4, #3
   17e84:	tst	r4, #7
   17e88:	orr	r6, r0, r7, lsl #29
   17e8c:	addne	r6, r6, #1
   17e90:	mov	r0, r6
   17e94:	bl	1283c <malloc@plt>
   17e98:	mov	r5, r0
   17e9c:	cmp	r0, #0
   17ea0:	bne	17ed4 <print_yaml_data@@Base+0x718>
   17ea4:	mov	r0, #392	; 0x188
   17ea8:	mov	r2, r6
   17eac:	str	r0, [sp]
   17eb0:	mvn	r0, #0
   17eb4:	ldr	r1, [pc, #1192]	; 18364 <print_yaml_data@@Base+0xba8>
   17eb8:	ldr	r3, [pc, #1192]	; 18368 <print_yaml_data@@Base+0xbac>
   17ebc:	add	r1, pc, r1
   17ec0:	add	r3, pc, r3
   17ec4:	bl	126bc <coda_set_error@plt>
   17ec8:	bl	18660 <handle_coda_error@@Base>
   17ecc:	ldr	r4, [sp, #16]
   17ed0:	ldr	r7, [sp, #20]
   17ed4:	mov	r0, sl
   17ed8:	mov	r1, r5
   17edc:	mov	r2, #0
   17ee0:	mov	r3, #0
   17ee4:	stm	sp, {r4, r7}
   17ee8:	bl	12aac <coda_cursor_read_bits@plt>
   17eec:	cmp	r0, #0
   17ef0:	beq	17ef8 <print_yaml_data@@Base+0x73c>
   17ef4:	bl	18660 <handle_coda_error@@Base>
   17ef8:	ldr	r0, [pc, #1132]	; 1836c <print_yaml_data@@Base+0xbb0>
   17efc:	add	r0, pc, r0
   17f00:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   17f04:	mov	r0, r5
   17f08:	mov	r1, r6
   17f0c:	bl	184d0 <print_yaml_data@@Base+0xd14>
   17f10:	ldr	r0, [pc, #1112]	; 18370 <print_yaml_data@@Base+0xbb4>
   17f14:	add	r0, pc, r0
   17f18:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   17f1c:	mov	r0, r5
   17f20:	bl	12704 <free@plt>
   17f24:	b	18240 <print_yaml_data@@Base+0xa84>
   17f28:	ldr	r0, [pc, #1108]	; 18384 <print_yaml_data@@Base+0xbc8>
   17f2c:	add	r0, pc, r0
   17f30:	b	18134 <print_yaml_data@@Base+0x978>
   17f34:	mov	r0, sl
   17f38:	bl	12800 <coda_cursor_goto_first_record_field@plt>
   17f3c:	cmp	r0, #0
   17f40:	beq	17f48 <print_yaml_data@@Base+0x78c>
   17f44:	bl	18660 <handle_coda_error@@Base>
   17f48:	ldr	r0, [sp, #16]
   17f4c:	mov	r1, #0
   17f50:	str	r1, [fp, #-44]	; 0xffffffd4
   17f54:	cmp	r0, #1
   17f58:	blt	18228 <print_yaml_data@@Base+0xa6c>
   17f5c:	ldr	r8, [pc, #944]	; 18314 <print_yaml_data@@Base+0xb58>
   17f60:	mov	r9, #1
   17f64:	add	r6, sp, #52	; 0x34
   17f68:	ldr	r8, [pc, r8]
   17f6c:	ldr	r7, [pc, #932]	; 18318 <print_yaml_data@@Base+0xb5c>
   17f70:	add	r7, pc, r7
   17f74:	ldr	r0, [sp, #8]
   17f78:	mov	r2, r6
   17f7c:	bl	1268c <coda_type_get_record_field_hidden_status@plt>
   17f80:	cmp	r0, #0
   17f84:	beq	17f8c <print_yaml_data@@Base+0x7d0>
   17f88:	bl	18660 <handle_coda_error@@Base>
   17f8c:	ldr	r0, [sp, #52]	; 0x34
   17f90:	cmp	r0, #0
   17f94:	bne	18048 <print_yaml_data@@Base+0x88c>
   17f98:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17f9c:	ldr	r0, [sp, #8]
   17fa0:	sub	r2, fp, #48	; 0x30
   17fa4:	bl	12a88 <coda_type_get_record_field_name@plt>
   17fa8:	cmp	r0, #0
   17fac:	beq	17fb4 <print_yaml_data@@Base+0x7f8>
   17fb0:	bl	18660 <handle_coda_error@@Base>
   17fb4:	cmp	r5, #0
   17fb8:	bne	17fc4 <print_yaml_data@@Base+0x808>
   17fbc:	cmp	r9, #0
   17fc0:	bne	17ffc <print_yaml_data@@Base+0x840>
   17fc4:	ldr	r0, [pc, #848]	; 1831c <print_yaml_data@@Base+0xb60>
   17fc8:	ldr	r0, [pc, r0]
   17fcc:	cmp	r0, #0
   17fd0:	blt	182a8 <print_yaml_data@@Base+0xaec>
   17fd4:	beq	17ffc <print_yaml_data@@Base+0x840>
   17fd8:	add	r4, r0, #1
   17fdc:	ldr	r3, [r8]
   17fe0:	mov	r0, r7
   17fe4:	mov	r1, #2
   17fe8:	mov	r2, #1
   17fec:	bl	127e8 <fwrite@plt>
   17ff0:	sub	r4, r4, #1
   17ff4:	cmp	r4, #1
   17ff8:	bgt	17fdc <print_yaml_data@@Base+0x820>
   17ffc:	ldr	r1, [fp, #-48]	; 0xffffffd0
   18000:	ldr	r0, [pc, #792]	; 18320 <print_yaml_data@@Base+0xb64>
   18004:	add	r0, pc, r0
   18008:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   1800c:	ldr	r0, [pc, #784]	; 18324 <print_yaml_data@@Base+0xb68>
   18010:	ldr	r0, [pc, r0]
   18014:	ldr	r1, [pc, #780]	; 18328 <print_yaml_data@@Base+0xb6c>
   18018:	add	r1, pc, r1
   1801c:	add	r0, r0, #1
   18020:	str	r0, [r1]
   18024:	mov	r4, r1
   18028:	mov	r0, sl
   1802c:	mov	r1, #1
   18030:	bl	1789c <print_yaml_data@@Base+0xe0>
   18034:	ldr	r0, [pc, #752]	; 1832c <print_yaml_data@@Base+0xb70>
   18038:	mov	r9, #0
   1803c:	ldr	r0, [pc, r0]
   18040:	sub	r0, r0, #1
   18044:	str	r0, [r4]
   18048:	ldr	r0, [sp, #16]
   1804c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18050:	sub	r0, r0, #1
   18054:	cmp	r1, r0
   18058:	bge	18070 <print_yaml_data@@Base+0x8b4>
   1805c:	mov	r0, sl
   18060:	bl	129f8 <coda_cursor_goto_next_record_field@plt>
   18064:	cmp	r0, #0
   18068:	beq	18070 <print_yaml_data@@Base+0x8b4>
   1806c:	bl	18660 <handle_coda_error@@Base>
   18070:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18074:	add	r1, r0, #1
   18078:	ldr	r0, [sp, #16]
   1807c:	str	r1, [fp, #-44]	; 0xffffffd4
   18080:	cmp	r1, r0
   18084:	blt	17f74 <print_yaml_data@@Base+0x7b8>
   18088:	b	18228 <print_yaml_data@@Base+0xa6c>
   1808c:	mov	r6, #1
   18090:	b	18194 <print_yaml_data@@Base+0x9d8>
   18094:	add	r1, sp, #8
   18098:	mov	r0, sl
   1809c:	bl	128b4 <coda_cursor_read_double@plt>
   180a0:	cmp	r0, #0
   180a4:	beq	180ac <print_yaml_data@@Base+0x8f0>
   180a8:	bl	18660 <handle_coda_error@@Base>
   180ac:	vldr	d0, [sp, #8]
   180b0:	bl	128c0 <coda_isNaN@plt>
   180b4:	cmp	r0, #0
   180b8:	bne	180cc <print_yaml_data@@Base+0x910>
   180bc:	vldr	d0, [sp, #8]
   180c0:	bl	12764 <coda_isInf@plt>
   180c4:	cmp	r0, #0
   180c8:	beq	1826c <print_yaml_data@@Base+0xab0>
   180cc:	vldr	d16, [sp, #8]
   180d0:	b	18128 <print_yaml_data@@Base+0x96c>
   180d4:	add	r1, sp, #16
   180d8:	add	r2, sp, #8
   180dc:	mov	r0, sl
   180e0:	bl	1295c <coda_cursor_read_complex_double_split@plt>
   180e4:	cmp	r0, #0
   180e8:	beq	180f0 <print_yaml_data@@Base+0x934>
   180ec:	bl	18660 <handle_coda_error@@Base>
   180f0:	vldr	d17, [sp, #8]
   180f4:	vldr	d16, [sp, #16]
   180f8:	vstr	d17, [sp]
   180fc:	vmov	r2, r3, d16
   18100:	ldr	r0, [pc, #664]	; 183a0 <print_yaml_data@@Base+0xbe4>
   18104:	add	r0, pc, r0
   18108:	b	18134 <print_yaml_data@@Base+0x978>
   1810c:	add	r1, sp, #16
   18110:	mov	r0, sl
   18114:	bl	128b4 <coda_cursor_read_double@plt>
   18118:	cmp	r0, #0
   1811c:	beq	18124 <print_yaml_data@@Base+0x968>
   18120:	bl	18660 <handle_coda_error@@Base>
   18124:	vldr	d16, [sp, #16]
   18128:	ldr	r0, [pc, #608]	; 18390 <print_yaml_data@@Base+0xbd4>
   1812c:	vmov	r2, r3, d16
   18130:	add	r0, pc, r0
   18134:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   18138:	b	18240 <print_yaml_data@@Base+0xa84>
   1813c:	bic	r1, r0, #3
   18140:	vmov.i32	q8, #1	; 0x00000001
   18144:	mov	r2, r1
   18148:	vld1.32	{d18-d19}, [r5]!
   1814c:	subs	r2, r2, #4
   18150:	vmul.i32	q8, q9, q8
   18154:	bne	18148 <print_yaml_data@@Base+0x98c>
   18158:	vext.8	q9, q8, q8, #8
   1815c:	cmp	r0, r1
   18160:	vmul.i32	q0, q8, q9
   18164:	vmul.i32	q8, q0, d0[1]
   18168:	vmov.32	r6, d16[0]
   1816c:	beq	1818c <print_yaml_data@@Base+0x9d0>
   18170:	add	r2, sp, #16
   18174:	sub	r0, r0, r1
   18178:	add	r1, r2, r1, lsl #2
   1817c:	ldr	r2, [r1], #4
   18180:	subs	r0, r0, #1
   18184:	mul	r6, r2, r6
   18188:	bne	1817c <print_yaml_data@@Base+0x9c0>
   1818c:	cmp	r6, #1
   18190:	blt	18234 <print_yaml_data@@Base+0xa78>
   18194:	ldr	r0, [pc, #408]	; 18334 <print_yaml_data@@Base+0xb78>
   18198:	add	r0, pc, r0
   1819c:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   181a0:	mov	r0, sl
   181a4:	bl	127dc <coda_cursor_goto_first_array_element@plt>
   181a8:	cmp	r0, #0
   181ac:	beq	181b4 <print_yaml_data@@Base+0x9f8>
   181b0:	bl	18660 <handle_coda_error@@Base>
   181b4:	ldr	r8, [pc, #380]	; 18338 <print_yaml_data@@Base+0xb7c>
   181b8:	ldr	r5, [pc, #380]	; 1833c <print_yaml_data@@Base+0xb80>
   181bc:	sub	r7, r6, #1
   181c0:	mov	r4, #0
   181c4:	add	r8, pc, r8
   181c8:	add	r5, pc, r5
   181cc:	mov	r0, r8
   181d0:	bl	18404 <print_yaml_data@@Base+0xc48>
   181d4:	ldr	r0, [pc, #356]	; 18340 <print_yaml_data@@Base+0xb84>
   181d8:	mov	r1, #0
   181dc:	ldr	r0, [pc, r0]
   181e0:	add	r0, r0, #1
   181e4:	str	r0, [r5]
   181e8:	mov	r0, sl
   181ec:	bl	1789c <print_yaml_data@@Base+0xe0>
   181f0:	ldr	r0, [pc, #332]	; 18344 <print_yaml_data@@Base+0xb88>
   181f4:	cmp	r4, r7
   181f8:	ldr	r0, [pc, r0]
   181fc:	sub	r0, r0, #1
   18200:	str	r0, [r5]
   18204:	bge	1821c <print_yaml_data@@Base+0xa60>
   18208:	mov	r0, sl
   1820c:	bl	128d8 <coda_cursor_goto_next_array_element@plt>
   18210:	cmp	r0, #0
   18214:	beq	1821c <print_yaml_data@@Base+0xa60>
   18218:	bl	18660 <handle_coda_error@@Base>
   1821c:	add	r4, r4, #1
   18220:	cmp	r6, r4
   18224:	bne	181cc <print_yaml_data@@Base+0xa10>
   18228:	mov	r0, sl
   1822c:	bl	1286c <coda_cursor_goto_parent@plt>
   18230:	b	18240 <print_yaml_data@@Base+0xa84>
   18234:	ldr	r0, [pc, #268]	; 18348 <print_yaml_data@@Base+0xb8c>
   18238:	add	r0, pc, r0
   1823c:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   18240:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18244:	cmp	r0, #0
   18248:	beq	18264 <print_yaml_data@@Base+0xaa8>
   1824c:	ldr	r0, [pc, #336]	; 183a4 <print_yaml_data@@Base+0xbe8>
   18250:	ldr	r0, [pc, r0]
   18254:	ldr	r1, [pc, #332]	; 183a8 <print_yaml_data@@Base+0xbec>
   18258:	sub	r0, r0, #1
   1825c:	add	r1, pc, r1
   18260:	str	r0, [r1]
   18264:	sub	sp, fp, #28
   18268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1826c:	vldr	d0, [sp, #8]
   18270:	ldr	r0, [pc, #284]	; 18394 <print_yaml_data@@Base+0xbd8>
   18274:	add	r1, sp, #16
   18278:	add	r0, pc, r0
   1827c:	bl	126e0 <coda_time_double_to_string@plt>
   18280:	cmp	r0, #0
   18284:	beq	18294 <print_yaml_data@@Base+0xad8>
   18288:	ldr	r0, [pc, #264]	; 18398 <print_yaml_data@@Base+0xbdc>
   1828c:	add	r0, pc, r0
   18290:	b	1823c <print_yaml_data@@Base+0xa80>
   18294:	ldr	r0, [pc, #256]	; 1839c <print_yaml_data@@Base+0xbe0>
   18298:	add	r1, sp, #16
   1829c:	add	r0, pc, r0
   182a0:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   182a4:	b	18240 <print_yaml_data@@Base+0xa84>
   182a8:	ldr	r0, [pc, #252]	; 183ac <print_yaml_data@@Base+0xbf0>
   182ac:	ldr	r1, [pc, #252]	; 183b0 <print_yaml_data@@Base+0xbf4>
   182b0:	ldr	r3, [pc, #252]	; 183b4 <print_yaml_data@@Base+0xbf8>
   182b4:	mov	r2, #44	; 0x2c
   182b8:	add	r0, pc, r0
   182bc:	add	r1, pc, r1
   182c0:	add	r3, pc, r3
   182c4:	bl	12ac4 <__assert_fail@plt>
   182c8:	andeq	r5, r1, ip, asr #18
   182cc:	andeq	r3, r0, sp, lsr #13
   182d0:	andeq	r5, r1, r8, lsl #18
   182d4:	muleq	r1, r8, r8
   182d8:	andeq	r2, r0, r9, lsr #28
   182dc:	andeq	r3, r0, r7, lsr #8
   182e0:	muleq	r1, ip, r8
   182e4:	muleq	r1, r0, r8
   182e8:	andeq	r5, r1, ip, ror r8
   182ec:	ldrdeq	r3, [r0], -r2
   182f0:	andeq	r5, r1, r8, asr r8
   182f4:	ldrdeq	r3, [r0], -r1
   182f8:	muleq	r1, ip, r6
   182fc:	andeq	r5, r1, ip, lsr #12
   18300:			; <UNDEFINED> instruction: 0x00002bbd
   18304:	andeq	r3, r0, r5, asr #3
   18308:	andeq	r5, r1, r0, asr #12
   1830c:	andeq	r5, r1, r4, lsr r6
   18310:	andeq	r5, r1, r0, lsr #12
   18314:	andeq	r5, r1, ip, asr #4
   18318:	ldrdeq	r2, [r0], -sp
   1831c:	andeq	r5, r1, r4, asr #4
   18320:	andeq	r2, r0, sp, ror sp
   18324:	strdeq	r5, [r1], -ip
   18328:	strdeq	r5, [r1], -r4
   1832c:	ldrdeq	r5, [r1], -r0
   18330:	muleq	r0, r2, r0
   18334:	andeq	r2, r0, sp, lsl #28
   18338:	andeq	r2, r0, r6, asr #23
   1833c:	andeq	r5, r1, r4, asr #32
   18340:	andeq	r5, r1, r0, lsr r0
   18344:	andeq	r5, r1, r4, lsl r0
   18348:	andeq	r2, r0, r5, asr fp
   1834c:	andeq	r2, r0, r0, asr #30
   18350:	andeq	r3, r0, r4, ror r2
   18354:	andeq	r2, r0, sp, ror #14
   18358:	andeq	r3, r0, r9
   1835c:	muleq	r0, ip, lr
   18360:	andeq	r3, r0, ip, asr #3
   18364:	andeq	r2, r0, r5, lsr r6
   18368:	ldrdeq	r2, [r0], -r1
   1836c:	andeq	r2, r0, ip, asr sp
   18370:	muleq	r0, r0, r0
   18374:	andeq	r2, r0, lr, lsl ip
   18378:	andeq	r2, r0, pc, lsl #20
   1837c:	andeq	r2, r0, fp, lsr #31
   18380:	ldrdeq	r2, [r0], -r8
   18384:	ldrdeq	r2, [r0], -r6
   18388:	andeq	r3, r0, sl
   1838c:	andeq	r3, r0, lr, ror #2
   18390:	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
   18394:	muleq	r0, ip, r9
   18398:	andeq	r2, r0, r5, lsr #19
   1839c:	andeq	r2, r0, r3, ror #22
   183a0:	andeq	r2, r0, r1, lsr #12
   183a4:			; <UNDEFINED> instruction: 0x00014fbc
   183a8:			; <UNDEFINED> instruction: 0x00014fb0
   183ac:	andeq	r2, r0, r7, ror r4
   183b0:	ldrdeq	r2, [r0], -r5
   183b4:	andeq	r2, r0, fp, ror r4
   183b8:	sub	sp, sp, #12
   183bc:	push	{fp, lr}
   183c0:	mov	fp, sp
   183c4:	sub	sp, sp, #4
   183c8:	mov	ip, r0
   183cc:	add	r0, fp, #8
   183d0:	stm	r0, {r1, r2, r3}
   183d4:	add	r2, fp, #8
   183d8:	mov	r1, ip
   183dc:	str	r2, [sp]
   183e0:	ldr	r0, [pc, #24]	; 18400 <print_yaml_data@@Base+0xc44>
   183e4:	ldr	r0, [pc, r0]
   183e8:	ldr	r0, [r0]
   183ec:	bl	129c8 <vfprintf@plt>
   183f0:	mov	sp, fp
   183f4:	pop	{fp, lr}
   183f8:	add	sp, sp, #12
   183fc:	bx	lr
   18400:	ldrdeq	r4, [r1], -r0
   18404:	sub	sp, sp, #12
   18408:	push	{r4, r5, r6, r7, fp, lr}
   1840c:	add	fp, sp, #16
   18410:	sub	sp, sp, #4
   18414:	mov	r4, r0
   18418:	add	r0, fp, #8
   1841c:	stm	r0, {r1, r2, r3}
   18420:	ldr	r0, [pc, #140]	; 184b4 <print_yaml_data@@Base+0xcf8>
   18424:	ldr	r0, [pc, r0]
   18428:	cmp	r0, #0
   1842c:	blt	18494 <print_yaml_data@@Base+0xcd8>
   18430:	beq	18468 <print_yaml_data@@Base+0xcac>
   18434:	ldr	r7, [pc, #124]	; 184b8 <print_yaml_data@@Base+0xcfc>
   18438:	add	r6, r0, #1
   1843c:	ldr	r7, [pc, r7]
   18440:	ldr	r5, [pc, #116]	; 184bc <print_yaml_data@@Base+0xd00>
   18444:	add	r5, pc, r5
   18448:	ldr	r3, [r7]
   1844c:	mov	r0, r5
   18450:	mov	r1, #2
   18454:	mov	r2, #1
   18458:	bl	127e8 <fwrite@plt>
   1845c:	sub	r6, r6, #1
   18460:	cmp	r6, #1
   18464:	bgt	18448 <print_yaml_data@@Base+0xc8c>
   18468:	add	r2, fp, #8
   1846c:	mov	r1, r4
   18470:	str	r2, [sp]
   18474:	ldr	r0, [pc, #68]	; 184c0 <print_yaml_data@@Base+0xd04>
   18478:	ldr	r0, [pc, r0]
   1847c:	ldr	r0, [r0]
   18480:	bl	129c8 <vfprintf@plt>
   18484:	sub	sp, fp, #16
   18488:	pop	{r4, r5, r6, r7, fp, lr}
   1848c:	add	sp, sp, #12
   18490:	bx	lr
   18494:	ldr	r0, [pc, #40]	; 184c4 <print_yaml_data@@Base+0xd08>
   18498:	ldr	r1, [pc, #40]	; 184c8 <print_yaml_data@@Base+0xd0c>
   1849c:	ldr	r3, [pc, #40]	; 184cc <print_yaml_data@@Base+0xd10>
   184a0:	mov	r2, #44	; 0x2c
   184a4:	add	r0, pc, r0
   184a8:	add	r1, pc, r1
   184ac:	add	r3, pc, r3
   184b0:	bl	12ac4 <__assert_fail@plt>
   184b4:	andeq	r4, r1, r8, ror #27
   184b8:	andeq	r4, r1, r8, ror sp
   184bc:	andeq	r2, r0, r9, lsl #6
   184c0:	andeq	r4, r1, ip, lsr sp
   184c4:	andeq	r2, r0, fp, lsl #5
   184c8:	andeq	r2, r0, r9, ror #17
   184cc:	andeq	r2, r0, pc, lsl #5
   184d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184d4:	add	fp, sp, #28
   184d8:	sub	sp, sp, #4
   184dc:	cmp	r1, #1
   184e0:	blt	18634 <print_yaml_data@@Base+0xe78>
   184e4:	ldr	r6, [pc, #336]	; 1863c <print_yaml_data@@Base+0xe80>
   184e8:	ldr	r8, [pc, #336]	; 18640 <print_yaml_data@@Base+0xe84>
   184ec:	ldr	r9, [pc, #336]	; 18644 <print_yaml_data@@Base+0xe88>
   184f0:	ldr	sl, [pc, #336]	; 18648 <print_yaml_data@@Base+0xe8c>
   184f4:	ldr	r7, [pc, #336]	; 1864c <print_yaml_data@@Base+0xe90>
   184f8:	mov	r4, r1
   184fc:	mov	r5, r0
   18500:	add	r6, pc, r6
   18504:	add	r8, pc, r8
   18508:	add	r9, pc, r9
   1850c:	add	sl, pc, sl
   18510:	add	r7, pc, r7
   18514:	ldrb	r1, [r5]
   18518:	sub	r0, r1, #8
   1851c:	cmp	r0, #26
   18520:	bhi	185ac <print_yaml_data@@Base+0xdf0>
   18524:	add	r2, pc, #4
   18528:	ldr	r0, [r2, r0, lsl #2]
   1852c:	add	pc, r2, r0
   18530:	andeq	r0, r0, ip, rrx
   18534:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   18538:	strheq	r0, [r0], -ip
   1853c:	muleq	r0, r4, r0
   18540:	andeq	r0, r0, r8, asr #1
   18544:	ldrdeq	r0, [r0], -r4
   18548:	muleq	r0, r4, r0
   1854c:	muleq	r0, r4, r0
   18550:	muleq	r0, r4, r0
   18554:	muleq	r0, r4, r0
   18558:	muleq	r0, r4, r0
   1855c:	muleq	r0, r4, r0
   18560:	muleq	r0, r4, r0
   18564:	muleq	r0, r4, r0
   18568:	muleq	r0, r4, r0
   1856c:	muleq	r0, r4, r0
   18570:	muleq	r0, r4, r0
   18574:	muleq	r0, r4, r0
   18578:	muleq	r0, r4, r0
   1857c:	muleq	r0, r4, r0
   18580:	muleq	r0, r4, r0
   18584:	muleq	r0, r4, r0
   18588:	muleq	r0, r4, r0
   1858c:	muleq	r0, r4, r0
   18590:	muleq	r0, r4, r0
   18594:	muleq	r0, r4, r0
   18598:	andeq	r0, r0, r0, ror #1
   1859c:	ldr	r0, [pc, #176]	; 18654 <print_yaml_data@@Base+0xe98>
   185a0:	add	r0, pc, r0
   185a4:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   185a8:	b	18628 <print_yaml_data@@Base+0xe6c>
   185ac:	cmp	r1, #92	; 0x5c
   185b0:	bne	185c4 <print_yaml_data@@Base+0xe08>
   185b4:	ldr	r0, [pc, #148]	; 18650 <print_yaml_data@@Base+0xe94>
   185b8:	add	r0, pc, r0
   185bc:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   185c0:	b	18628 <print_yaml_data@@Base+0xe6c>
   185c4:	sub	r0, r1, #32
   185c8:	uxtb	r0, r0
   185cc:	cmp	r0, #94	; 0x5e
   185d0:	bhi	1861c <print_yaml_data@@Base+0xe60>
   185d4:	ldr	r0, [pc, #124]	; 18658 <print_yaml_data@@Base+0xe9c>
   185d8:	add	r0, pc, r0
   185dc:	b	18624 <print_yaml_data@@Base+0xe68>
   185e0:	mov	r0, r6
   185e4:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   185e8:	b	18628 <print_yaml_data@@Base+0xe6c>
   185ec:	mov	r0, r8
   185f0:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   185f4:	b	18628 <print_yaml_data@@Base+0xe6c>
   185f8:	mov	r0, r9
   185fc:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   18600:	b	18628 <print_yaml_data@@Base+0xe6c>
   18604:	mov	r0, sl
   18608:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   1860c:	b	18628 <print_yaml_data@@Base+0xe6c>
   18610:	mov	r0, r7
   18614:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   18618:	b	18628 <print_yaml_data@@Base+0xe6c>
   1861c:	ldr	r0, [pc, #56]	; 1865c <print_yaml_data@@Base+0xea0>
   18620:	add	r0, pc, r0
   18624:	bl	183b8 <print_yaml_data@@Base+0xbfc>
   18628:	subs	r4, r4, #1
   1862c:	add	r5, r5, #1
   18630:	bne	18514 <print_yaml_data@@Base+0xd58>
   18634:	sub	sp, fp, #28
   18638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1863c:	andeq	r2, r0, lr, lsl #1
   18640:	andeq	r2, r0, sp, lsl #1
   18644:	andeq	r2, r0, pc, lsl #1
   18648:	andeq	r2, r0, lr, lsl #1
   1864c:	andeq	r2, r0, r7, asr #14
   18650:	andeq	r1, r0, r5, ror #31
   18654:	andeq	r1, r0, fp, ror #31
   18658:	andeq	r2, r0, r8, ror r1
   1865c:	andeq	r2, r0, sl, lsr r6

00018660 <handle_coda_error@@Base>:
   18660:	push	{fp, lr}
   18664:	mov	fp, sp
   18668:	ldr	r5, [pc, #52]	; 186a4 <handle_coda_error@@Base+0x44>
   1866c:	ldr	r5, [pc, r5]
   18670:	ldr	r4, [r5]
   18674:	bl	12a70 <coda_get_errno@plt>
   18678:	ldr	r0, [r0]
   1867c:	bl	12a28 <coda_errno_to_string@plt>
   18680:	ldr	r1, [pc, #32]	; 186a8 <handle_coda_error@@Base+0x48>
   18684:	mov	r2, r0
   18688:	mov	r0, r4
   1868c:	add	r1, pc, r1
   18690:	bl	128cc <fprintf@plt>
   18694:	ldr	r0, [r5]
   18698:	bl	126d4 <fflush@plt>
   1869c:	mov	r0, #1
   186a0:	bl	12884 <exit@plt>
   186a4:	andeq	r4, r1, r4, asr #22
   186a8:	andeq	r2, r0, ip, ror #14

000186ac <main@@Base>:
   186ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186b0:	add	fp, sp, #28
   186b4:	sub	sp, sp, #20
   186b8:	cmp	r0, #1
   186bc:	beq	198a0 <main@@Base+0x11f4>
   186c0:	mov	r9, r1
   186c4:	ldr	r6, [r1, #4]
   186c8:	ldr	r1, [pc, #3600]	; 194e0 <main@@Base+0xe34>
   186cc:	mov	sl, r0
   186d0:	add	r1, pc, r1
   186d4:	mov	r0, r6
   186d8:	bl	12674 <strcmp@plt>
   186dc:	cmp	r0, #0
   186e0:	beq	198a0 <main@@Base+0x11f4>
   186e4:	ldr	r1, [pc, #3576]	; 194e4 <main@@Base+0xe38>
   186e8:	mov	r0, r6
   186ec:	add	r1, pc, r1
   186f0:	bl	12674 <strcmp@plt>
   186f4:	cmp	r0, #0
   186f8:	beq	198a0 <main@@Base+0x11f4>
   186fc:	ldr	r1, [pc, #4092]	; 19700 <main@@Base+0x1054>
   18700:	mov	r0, r6
   18704:	add	r1, pc, r1
   18708:	bl	12674 <strcmp@plt>
   1870c:	cmp	r0, #0
   18710:	beq	198b0 <main@@Base+0x1204>
   18714:	ldr	r1, [pc, #4080]	; 1970c <main@@Base+0x1060>
   18718:	mov	r0, r6
   1871c:	add	r1, pc, r1
   18720:	bl	12674 <strcmp@plt>
   18724:	cmp	r0, #0
   18728:	beq	198b0 <main@@Base+0x1204>
   1872c:	cmp	sl, #3
   18730:	blt	1874c <main@@Base+0xa0>
   18734:	ldr	r1, [pc, #4084]	; 19730 <main@@Base+0x1084>
   18738:	mov	r0, r6
   1873c:	add	r1, pc, r1
   18740:	bl	12674 <strcmp@plt>
   18744:	cmp	r0, #0
   18748:	beq	18f4c <main@@Base+0x8a0>
   1874c:	ldr	r0, [r9]
   18750:	ldr	r2, [pc, #4088]	; 19750 <main@@Base+0x10a4>
   18754:	mov	r1, #0
   18758:	add	r2, pc, r2
   1875c:	bl	1271c <coda_set_definition_path_conditional@plt>
   18760:	mov	r7, #1
   18764:	cmp	r0, #0
   18768:	bne	198d0 <main@@Base+0x1224>
   1876c:	ldr	r6, [r9, r7, lsl #2]
   18770:	ldr	r1, [pc, #4076]	; 19764 <main@@Base+0x10b8>
   18774:	add	r1, pc, r1
   18778:	mov	r0, r6
   1877c:	bl	12674 <strcmp@plt>
   18780:	cmp	r0, #0
   18784:	beq	18888 <main@@Base+0x1dc>
   18788:	ldr	r1, [pc, #4056]	; 19768 <main@@Base+0x10bc>
   1878c:	mov	r0, r6
   18790:	add	r1, pc, r1
   18794:	bl	12674 <strcmp@plt>
   18798:	cmp	r0, #0
   1879c:	beq	18e74 <main@@Base+0x7c8>
   187a0:	ldr	r1, [pc, #4036]	; 1976c <main@@Base+0x10c0>
   187a4:	mov	r0, r6
   187a8:	add	r1, pc, r1
   187ac:	bl	12674 <strcmp@plt>
   187b0:	cmp	r0, #0
   187b4:	beq	18f5c <main@@Base+0x8b0>
   187b8:	ldr	r1, [pc, #4016]	; 19770 <main@@Base+0x10c4>
   187bc:	mov	r0, r6
   187c0:	add	r1, pc, r1
   187c4:	bl	12674 <strcmp@plt>
   187c8:	cmp	r0, #0
   187cc:	beq	191fc <main@@Base+0xb50>
   187d0:	ldr	r1, [pc, #3996]	; 19774 <main@@Base+0x10c8>
   187d4:	mov	r0, r6
   187d8:	add	r1, pc, r1
   187dc:	bl	12674 <strcmp@plt>
   187e0:	cmp	r0, #0
   187e4:	bne	197b4 <main@@Base+0x1108>
   187e8:	ldr	r0, [pc, #4080]	; 197e0 <main@@Base+0x1134>
   187ec:	mov	r6, #0
   187f0:	mov	r1, #5
   187f4:	ldr	r0, [pc, r0]
   187f8:	str	r6, [r0]
   187fc:	ldr	r0, [pc, #4064]	; 197e4 <main@@Base+0x1138>
   18800:	ldr	r0, [pc, r0]
   18804:	str	r1, [r0]
   18808:	ldr	r0, [pc, #4056]	; 197e8 <main@@Base+0x113c>
   1880c:	ldr	r0, [pc, r0]
   18810:	str	r6, [r0]
   18814:	ldr	r0, [pc, #4048]	; 197ec <main@@Base+0x1140>
   18818:	ldr	r0, [pc, r0]
   1881c:	str	r6, [r0]
   18820:	ldr	r0, [pc, #4040]	; 197f0 <main@@Base+0x1144>
   18824:	ldr	r0, [pc, r0]
   18828:	ldr	r0, [r0]
   1882c:	ldr	r1, [pc, #4032]	; 197f4 <main@@Base+0x1148>
   18830:	ldr	r1, [pc, r1]
   18834:	str	r0, [r1]
   18838:	add	r0, r7, #1
   1883c:	sub	r4, sl, r0
   18840:	cmp	r4, #1
   18844:	blt	197b4 <main@@Base+0x1108>
   18848:	add	r7, r9, r0, lsl #2
   1884c:	sub	r0, r4, #1
   18850:	str	r0, [sp, #12]
   18854:	mov	r0, #1
   18858:	str	r0, [sp, #16]
   1885c:	mov	r0, #0
   18860:	ldr	r9, [pc, #3984]	; 197f8 <main@@Base+0x114c>
   18864:	ldr	r8, [pc, #3984]	; 197fc <main@@Base+0x1150>
   18868:	str	r0, [sp, #8]
   1886c:	mov	r0, #0
   18870:	str	r0, [sp, #4]
   18874:	mov	r0, #0
   18878:	str	r0, [sp]
   1887c:	add	r9, pc, r9
   18880:	add	r8, pc, r8
   18884:	b	18c30 <main@@Base+0x584>
   18888:	ldr	r1, [pc, #3952]	; 19800 <main@@Base+0x1154>
   1888c:	mov	r8, #0
   18890:	mov	r5, #1
   18894:	ldr	r1, [pc, r1]
   18898:	str	r8, [r1]
   1889c:	ldr	r0, [pc, #4088]	; 1989c <main@@Base+0x11f0>
   188a0:	ldr	r0, [pc, r0]
   188a4:	str	r8, [r1, #664]	; 0x298
   188a8:	str	r8, [r0]
   188ac:	ldr	r0, [pc, #4088]	; 198ac <main@@Base+0x1200>
   188b0:	ldr	r0, [pc, r0]
   188b4:	str	r5, [r0]
   188b8:	ldr	r6, [pc, #4092]	; 198bc <main@@Base+0x1210>
   188bc:	ldr	r6, [pc, r6]
   188c0:	str	r8, [r6]
   188c4:	ldr	r0, [pc, #4084]	; 198c0 <main@@Base+0x1214>
   188c8:	ldr	r0, [pc, r0]
   188cc:	str	r8, [r0]
   188d0:	ldr	r0, [pc, #4076]	; 198c4 <main@@Base+0x1218>
   188d4:	ldr	r0, [pc, r0]
   188d8:	str	r8, [r0]
   188dc:	ldr	r0, [pc, #4068]	; 198c8 <main@@Base+0x121c>
   188e0:	ldr	r0, [pc, r0]
   188e4:	str	r8, [r0]
   188e8:	ldr	r0, [pc, #4060]	; 198cc <main@@Base+0x1220>
   188ec:	ldr	r0, [pc, r0]
   188f0:	str	r8, [r0]
   188f4:	add	r0, r7, #1
   188f8:	sub	r7, sl, r0
   188fc:	cmp	r7, #1
   18900:	blt	197b4 <main@@Base+0x1108>
   18904:	add	r9, r9, r0, lsl #2
   18908:	sub	r0, r7, #1
   1890c:	str	r0, [sp, #8]
   18910:	mov	r0, #1
   18914:	ldr	r4, [pc, #4072]	; 19904 <main@@Base+0x1258>
   18918:	str	r0, [sp, #16]
   1891c:	mov	r0, #1
   18920:	str	r0, [sp, #12]
   18924:	add	r4, pc, r4
   18928:	ldr	sl, [r9, r8, lsl #2]
   1892c:	mov	r1, r4
   18930:	mov	r0, sl
   18934:	bl	12674 <strcmp@plt>
   18938:	cmp	r0, #0
   1893c:	beq	18abc <main@@Base+0x410>
   18940:	ldr	r1, [pc, #4076]	; 19934 <main@@Base+0x1288>
   18944:	mov	r0, sl
   18948:	add	r1, pc, r1
   1894c:	bl	12674 <strcmp@plt>
   18950:	cmp	r0, #0
   18954:	beq	18abc <main@@Base+0x410>
   18958:	ldr	r1, [pc, #4092]	; 1995c <main@@Base+0x12b0>
   1895c:	mov	r0, sl
   18960:	add	r1, pc, r1
   18964:	bl	12674 <strcmp@plt>
   18968:	cmp	r0, #0
   1896c:	beq	18ac4 <main@@Base+0x418>
   18970:	ldr	r1, [pc, #4080]	; 19968 <main@@Base+0x12bc>
   18974:	mov	r0, sl
   18978:	add	r1, pc, r1
   1897c:	bl	12674 <strcmp@plt>
   18980:	cmp	r0, #0
   18984:	beq	18ac4 <main@@Base+0x418>
   18988:	ldr	r1, [pc, #4060]	; 1996c <main@@Base+0x12c0>
   1898c:	mov	r0, sl
   18990:	mov	r4, r6
   18994:	add	r1, pc, r1
   18998:	bl	12674 <strcmp@plt>
   1899c:	cmp	r0, #0
   189a0:	beq	189bc <main@@Base+0x310>
   189a4:	ldr	r1, [pc, #4036]	; 19970 <main@@Base+0x12c4>
   189a8:	mov	r0, sl
   189ac:	add	r1, pc, r1
   189b0:	bl	12674 <strcmp@plt>
   189b4:	cmp	r0, #0
   189b8:	bne	189d8 <main@@Base+0x32c>
   189bc:	add	r6, r8, #1
   189c0:	cmp	r6, r7
   189c4:	bge	189d8 <main@@Base+0x32c>
   189c8:	ldr	r0, [r9, r6, lsl #2]
   189cc:	ldrb	r1, [r0]
   189d0:	cmp	r1, #45	; 0x2d
   189d4:	bne	18b10 <main@@Base+0x464>
   189d8:	ldr	r1, [pc, #4004]	; 19984 <main@@Base+0x12d8>
   189dc:	mov	r0, sl
   189e0:	add	r1, pc, r1
   189e4:	bl	12674 <strcmp@plt>
   189e8:	cmp	r0, #0
   189ec:	beq	18ad0 <main@@Base+0x424>
   189f0:	ldr	r1, [pc, #3984]	; 19988 <main@@Base+0x12dc>
   189f4:	mov	r0, sl
   189f8:	add	r1, pc, r1
   189fc:	bl	12674 <strcmp@plt>
   18a00:	cmp	r0, #0
   18a04:	beq	18ad0 <main@@Base+0x424>
   18a08:	ldr	r1, [pc, #3972]	; 19994 <main@@Base+0x12e8>
   18a0c:	mov	r0, sl
   18a10:	add	r1, pc, r1
   18a14:	bl	12674 <strcmp@plt>
   18a18:	cmp	r0, #0
   18a1c:	mov	r6, r4
   18a20:	beq	18af4 <main@@Base+0x448>
   18a24:	ldr	r1, [pc, #3948]	; 19998 <main@@Base+0x12ec>
   18a28:	mov	r0, sl
   18a2c:	add	r1, pc, r1
   18a30:	bl	12674 <strcmp@plt>
   18a34:	cmp	r0, #0
   18a38:	beq	18af4 <main@@Base+0x448>
   18a3c:	ldr	r1, [pc, #3936]	; 199a4 <main@@Base+0x12f8>
   18a40:	mov	r0, sl
   18a44:	add	r1, pc, r1
   18a48:	bl	12674 <strcmp@plt>
   18a4c:	ldr	r4, [pc, #3924]	; 199a8 <main@@Base+0x12fc>
   18a50:	cmp	r0, #0
   18a54:	mov	r5, #1
   18a58:	add	r4, pc, r4
   18a5c:	beq	18b40 <main@@Base+0x494>
   18a60:	ldr	r1, [pc, #3912]	; 199b0 <main@@Base+0x1304>
   18a64:	mov	r0, sl
   18a68:	add	r1, pc, r1
   18a6c:	bl	12674 <strcmp@plt>
   18a70:	cmp	r0, #0
   18a74:	beq	18b50 <main@@Base+0x4a4>
   18a78:	ldr	r1, [pc, #3896]	; 199b8 <main@@Base+0x130c>
   18a7c:	mov	r0, sl
   18a80:	add	r1, pc, r1
   18a84:	bl	12674 <strcmp@plt>
   18a88:	cmp	r0, #0
   18a8c:	beq	18b64 <main@@Base+0x4b8>
   18a90:	ldr	r0, [sp, #8]
   18a94:	cmp	r8, r0
   18a98:	bne	197b4 <main@@Base+0x1108>
   18a9c:	ldrb	r0, [sl]
   18aa0:	cmp	r0, #45	; 0x2d
   18aa4:	beq	197b4 <main@@Base+0x1108>
   18aa8:	ldr	r0, [pc, #3852]	; 199bc <main@@Base+0x1310>
   18aac:	ldr	r0, [pc, r0]
   18ab0:	ldr	r8, [sp, #8]
   18ab4:	str	sl, [r0]
   18ab8:	b	18b6c <main@@Base+0x4c0>
   18abc:	str	r5, [r6]
   18ac0:	b	18b6c <main@@Base+0x4c0>
   18ac4:	mov	r0, #0
   18ac8:	str	r0, [sp, #16]
   18acc:	b	18b6c <main@@Base+0x4c0>
   18ad0:	ldr	r1, [pc, #3764]	; 1998c <main@@Base+0x12e0>
   18ad4:	mov	r0, #1
   18ad8:	mov	r6, r4
   18adc:	mov	r5, #1
   18ae0:	ldr	r1, [pc, r1]
   18ae4:	str	r0, [r1]
   18ae8:	ldr	r4, [pc, #3744]	; 19990 <main@@Base+0x12e4>
   18aec:	add	r4, pc, r4
   18af0:	b	18b6c <main@@Base+0x4c0>
   18af4:	ldr	r0, [pc, #3744]	; 1999c <main@@Base+0x12f0>
   18af8:	mov	r5, #1
   18afc:	ldr	r0, [pc, r0]
   18b00:	str	r5, [r0]
   18b04:	ldr	r4, [pc, #3732]	; 199a0 <main@@Base+0x12f4>
   18b08:	add	r4, pc, r4
   18b0c:	b	18b6c <main@@Base+0x4c0>
   18b10:	bl	15aac <codadump_filter_create@@Base>
   18b14:	ldr	r1, [pc, #3672]	; 19974 <main@@Base+0x12c8>
   18b18:	mov	r8, r6
   18b1c:	mov	r6, r4
   18b20:	cmp	r0, #0
   18b24:	mov	r5, #1
   18b28:	ldr	r1, [pc, r1]
   18b2c:	str	r0, [r1, #664]	; 0x298
   18b30:	ldr	r4, [pc, #3648]	; 19978 <main@@Base+0x12cc>
   18b34:	add	r4, pc, r4
   18b38:	bne	18b6c <main@@Base+0x4c0>
   18b3c:	b	19908 <main@@Base+0x125c>
   18b40:	ldr	r0, [pc, #3684]	; 199ac <main@@Base+0x1300>
   18b44:	ldr	r0, [pc, r0]
   18b48:	str	r5, [r0]
   18b4c:	b	18b6c <main@@Base+0x4c0>
   18b50:	ldr	r0, [pc, #3676]	; 199b4 <main@@Base+0x1308>
   18b54:	ldr	r0, [pc, r0]
   18b58:	str	r5, [r6]
   18b5c:	str	r5, [r0]
   18b60:	b	18b6c <main@@Base+0x4c0>
   18b64:	mov	r0, #0
   18b68:	str	r0, [sp, #12]
   18b6c:	add	r8, r8, #1
   18b70:	cmp	r8, r7
   18b74:	blt	18928 <main@@Base+0x27c>
   18b78:	ldr	r0, [pc, #3648]	; 199c0 <main@@Base+0x1314>
   18b7c:	ldr	r0, [pc, r0]
   18b80:	ldr	r0, [r0]
   18b84:	cmp	r0, #0
   18b88:	ldrbne	r0, [r0]
   18b8c:	cmpne	r0, #0
   18b90:	beq	197b4 <main@@Base+0x1108>
   18b94:	bl	128f0 <coda_init@plt>
   18b98:	cmp	r0, #0
   18b9c:	bne	198d0 <main@@Base+0x1224>
   18ba0:	ldr	r0, [sp, #12]
   18ba4:	clz	r0, r0
   18ba8:	lsr	r0, r0, #5
   18bac:	bl	12734 <coda_set_option_bypass_special_types@plt>
   18bb0:	mov	r0, #0
   18bb4:	bl	12668 <coda_set_option_perform_boundary_checks@plt>
   18bb8:	ldr	r0, [sp, #16]
   18bbc:	bl	128fc <coda_set_option_perform_conversions@plt>
   18bc0:	bl	16f8c <traverse_info_init@@Base>
   18bc4:	bl	14850 <dim_info_init@@Base>
   18bc8:	bl	16fec <traverse_product@@Base>
   18bcc:	b	19884 <main@@Base+0x11d8>
   18bd0:	ldr	r1, [pc, #3916]	; 19b24 <main@@Base+0x1478>
   18bd4:	ldr	r1, [pc, r1]
   18bd8:	str	r0, [r1]
   18bdc:	b	18dd8 <main@@Base+0x72c>
   18be0:	ldr	r1, [pc, #3912]	; 19b30 <main@@Base+0x1484>
   18be4:	ldr	r1, [pc, r1]
   18be8:	str	r0, [r1]
   18bec:	b	18dd8 <main@@Base+0x72c>
   18bf0:	mov	r1, #0
   18bf4:	mov	r2, #10
   18bf8:	bl	12680 <strtol@plt>
   18bfc:	ldr	r1, [pc, #3892]	; 19b38 <main@@Base+0x148c>
   18c00:	ldr	r1, [pc, r1]
   18c04:	str	r0, [r1]
   18c08:	b	18dd8 <main@@Base+0x72c>
   18c0c:	mov	r6, r2
   18c10:	mov	r1, #0
   18c14:	mov	r2, #10
   18c18:	bl	12680 <strtol@plt>
   18c1c:	str	r0, [sp, #8]
   18c20:	str	r4, [sp]
   18c24:	mov	r0, r6
   18c28:	str	r6, [sp, #4]
   18c2c:	b	18db0 <main@@Base+0x704>
   18c30:	ldr	sl, [r7, r6, lsl #2]
   18c34:	mov	r1, r9
   18c38:	mov	r0, sl
   18c3c:	bl	12674 <strcmp@plt>
   18c40:	cmp	r0, #0
   18c44:	beq	18dcc <main@@Base+0x720>
   18c48:	mov	r0, sl
   18c4c:	mov	r1, r8
   18c50:	bl	12674 <strcmp@plt>
   18c54:	cmp	r0, #0
   18c58:	beq	18dcc <main@@Base+0x720>
   18c5c:	ldr	r1, [pc, #3768]	; 19b1c <main@@Base+0x1470>
   18c60:	mov	r0, sl
   18c64:	add	r1, pc, r1
   18c68:	bl	12674 <strcmp@plt>
   18c6c:	cmp	r0, #0
   18c70:	beq	18c8c <main@@Base+0x5e0>
   18c74:	ldr	r1, [pc, #3748]	; 19b20 <main@@Base+0x1474>
   18c78:	mov	r0, sl
   18c7c:	add	r1, pc, r1
   18c80:	bl	12674 <strcmp@plt>
   18c84:	cmp	r0, #0
   18c88:	bne	18ca8 <main@@Base+0x5fc>
   18c8c:	add	r5, r6, #1
   18c90:	cmp	r5, r4
   18c94:	bge	18ca8 <main@@Base+0x5fc>
   18c98:	ldr	r0, [r7, r5, lsl #2]
   18c9c:	ldrb	r1, [r0]
   18ca0:	cmp	r1, #45	; 0x2d
   18ca4:	bne	18bd0 <main@@Base+0x524>
   18ca8:	ldr	r1, [pc, #3704]	; 19b28 <main@@Base+0x147c>
   18cac:	mov	r0, sl
   18cb0:	add	r1, pc, r1
   18cb4:	bl	12674 <strcmp@plt>
   18cb8:	cmp	r0, #0
   18cbc:	beq	18cd8 <main@@Base+0x62c>
   18cc0:	ldr	r1, [pc, #3684]	; 19b2c <main@@Base+0x1480>
   18cc4:	mov	r0, sl
   18cc8:	add	r1, pc, r1
   18ccc:	bl	12674 <strcmp@plt>
   18cd0:	cmp	r0, #0
   18cd4:	bne	18cf4 <main@@Base+0x648>
   18cd8:	add	r5, r6, #1
   18cdc:	cmp	r5, r4
   18ce0:	bge	18cf4 <main@@Base+0x648>
   18ce4:	ldr	r0, [r7, r5, lsl #2]
   18ce8:	ldrb	r1, [r0]
   18cec:	cmp	r1, #45	; 0x2d
   18cf0:	bne	18be0 <main@@Base+0x534>
   18cf4:	ldr	r1, [pc, #3640]	; 19b34 <main@@Base+0x1488>
   18cf8:	mov	r0, sl
   18cfc:	add	r1, pc, r1
   18d00:	bl	12674 <strcmp@plt>
   18d04:	cmp	r0, #0
   18d08:	bne	18d28 <main@@Base+0x67c>
   18d0c:	add	r5, r6, #1
   18d10:	cmp	r5, r4
   18d14:	bge	18d28 <main@@Base+0x67c>
   18d18:	ldr	r0, [r7, r5, lsl #2]
   18d1c:	ldrb	r1, [r0]
   18d20:	cmp	r1, #45	; 0x2d
   18d24:	bne	18bf0 <main@@Base+0x544>
   18d28:	mov	r9, r7
   18d2c:	ldr	r7, [sp, #12]
   18d30:	ldr	r1, [pc, #3588]	; 19b3c <main@@Base+0x1490>
   18d34:	mov	r0, sl
   18d38:	mov	r8, r4
   18d3c:	add	r1, pc, r1
   18d40:	bl	12674 <strcmp@plt>
   18d44:	cmp	r0, #0
   18d48:	bne	18d8c <main@@Base+0x6e0>
   18d4c:	add	r5, r6, #3
   18d50:	cmp	r5, r8
   18d54:	bge	18d8c <main@@Base+0x6e0>
   18d58:	add	r0, r9, r6, lsl #2
   18d5c:	ldr	r4, [r0, #4]
   18d60:	ldrb	r1, [r4]
   18d64:	cmp	r1, #45	; 0x2d
   18d68:	beq	18d8c <main@@Base+0x6e0>
   18d6c:	ldr	r2, [r0, #8]
   18d70:	ldrb	r0, [r2]
   18d74:	cmp	r0, #45	; 0x2d
   18d78:	beq	18d8c <main@@Base+0x6e0>
   18d7c:	ldr	r0, [r9, r5, lsl #2]
   18d80:	ldrb	r1, [r0]
   18d84:	cmp	r1, #45	; 0x2d
   18d88:	bne	18c0c <main@@Base+0x560>
   18d8c:	cmp	r6, r7
   18d90:	bne	197b4 <main@@Base+0x1108>
   18d94:	ldrb	r0, [sl]
   18d98:	cmp	r0, #45	; 0x2d
   18d9c:	beq	197b4 <main@@Base+0x1108>
   18da0:	ldr	r0, [pc, #3480]	; 19b40 <main@@Base+0x1494>
   18da4:	mov	r5, r7
   18da8:	ldr	r0, [pc, r0]
   18dac:	str	sl, [r0]
   18db0:	mov	r7, r9
   18db4:	ldr	r9, [pc, #3464]	; 19b44 <main@@Base+0x1498>
   18db8:	mov	r4, r8
   18dbc:	ldr	r8, [pc, #3460]	; 19b48 <main@@Base+0x149c>
   18dc0:	add	r9, pc, r9
   18dc4:	add	r8, pc, r8
   18dc8:	b	18dd8 <main@@Base+0x72c>
   18dcc:	mov	r0, #0
   18dd0:	mov	r5, r6
   18dd4:	str	r0, [sp, #16]
   18dd8:	add	r6, r5, #1
   18ddc:	cmp	r6, r4
   18de0:	blt	18c30 <main@@Base+0x584>
   18de4:	ldr	r0, [pc, #3424]	; 19b4c <main@@Base+0x14a0>
   18de8:	ldr	r0, [pc, r0]
   18dec:	ldr	r0, [r0]
   18df0:	cmp	r0, #0
   18df4:	ldrbne	r0, [r0]
   18df8:	cmpne	r0, #0
   18dfc:	beq	197b4 <main@@Base+0x1108>
   18e00:	bl	128f0 <coda_init@plt>
   18e04:	cmp	r0, #0
   18e08:	bne	198d0 <main@@Base+0x1224>
   18e0c:	mov	r0, #0
   18e10:	bl	128fc <coda_set_option_perform_conversions@plt>
   18e14:	ldr	r0, [sp, #16]
   18e18:	bl	12644 <coda_set_option_use_fast_size_expressions@plt>
   18e1c:	ldr	r0, [pc, #3372]	; 19b50 <main@@Base+0x14a4>
   18e20:	ldr	r0, [pc, r0]
   18e24:	ldr	r0, [r0]
   18e28:	ldr	r4, [pc, #3364]	; 19b54 <main@@Base+0x14a8>
   18e2c:	ldr	r4, [pc, r4]
   18e30:	cmp	r0, #0
   18e34:	beq	18e50 <main@@Base+0x7a4>
   18e38:	ldr	r1, [pc, #3352]	; 19b58 <main@@Base+0x14ac>
   18e3c:	add	r1, pc, r1
   18e40:	bl	126b0 <fopen@plt>
   18e44:	cmp	r0, #0
   18e48:	str	r0, [r4]
   18e4c:	beq	19938 <main@@Base+0x128c>
   18e50:	ldm	sp, {r0, r1, r2}
   18e54:	bl	1373c <print_debug_data@@Base>
   18e58:	ldr	r0, [pc, #3328]	; 19b60 <main@@Base+0x14b4>
   18e5c:	ldr	r0, [pc, r0]
   18e60:	ldr	r0, [r0]
   18e64:	cmp	r0, #0
   18e68:	beq	1988c <main@@Base+0x11e0>
   18e6c:	ldr	r0, [r4]
   18e70:	b	194a8 <main@@Base+0xdfc>
   18e74:	ldr	r1, [pc, #2888]	; 199c4 <main@@Base+0x1318>
   18e78:	mov	r6, #0
   18e7c:	mov	r2, #1
   18e80:	ldr	r1, [pc, r1]
   18e84:	str	r6, [r1]
   18e88:	ldr	r0, [pc, #2872]	; 199c8 <main@@Base+0x131c>
   18e8c:	ldr	r0, [pc, r0]
   18e90:	str	r6, [r1, #664]	; 0x298
   18e94:	str	r2, [r0]
   18e98:	ldr	r0, [pc, #2860]	; 199cc <main@@Base+0x1320>
   18e9c:	ldr	r0, [pc, r0]
   18ea0:	str	r6, [r0]
   18ea4:	ldr	r1, [pc, #2852]	; 199d0 <main@@Base+0x1324>
   18ea8:	ldr	r1, [pc, r1]
   18eac:	ldr	r0, [pc, #2848]	; 199d4 <main@@Base+0x1328>
   18eb0:	add	r0, pc, r0
   18eb4:	str	r0, [r1]
   18eb8:	ldr	r0, [pc, #2840]	; 199d8 <main@@Base+0x132c>
   18ebc:	ldr	r0, [pc, r0]
   18ec0:	str	r2, [r0]
   18ec4:	ldr	r0, [pc, #2832]	; 199dc <main@@Base+0x1330>
   18ec8:	ldr	r0, [pc, r0]
   18ecc:	str	r2, [r0]
   18ed0:	ldr	r0, [pc, #2824]	; 199e0 <main@@Base+0x1334>
   18ed4:	ldr	r0, [pc, r0]
   18ed8:	str	r6, [r0]
   18edc:	ldr	r0, [pc, #2816]	; 199e4 <main@@Base+0x1338>
   18ee0:	ldr	r0, [pc, r0]
   18ee4:	str	r6, [r0]
   18ee8:	ldr	r0, [pc, #2808]	; 199e8 <main@@Base+0x133c>
   18eec:	ldr	r0, [pc, r0]
   18ef0:	str	r6, [r0]
   18ef4:	ldr	r0, [pc, #2800]	; 199ec <main@@Base+0x1340>
   18ef8:	ldr	r0, [pc, r0]
   18efc:	str	r6, [r0]
   18f00:	ldr	r0, [pc, #2792]	; 199f0 <main@@Base+0x1344>
   18f04:	ldr	r0, [pc, r0]
   18f08:	ldr	r0, [r0]
   18f0c:	ldr	r1, [pc, #2784]	; 199f4 <main@@Base+0x1348>
   18f10:	ldr	r1, [pc, r1]
   18f14:	str	r0, [r1]
   18f18:	add	r0, r7, #1
   18f1c:	sub	r8, sl, r0
   18f20:	cmp	r8, #1
   18f24:	blt	197b4 <main@@Base+0x1108>
   18f28:	add	sl, r9, r0, lsl #2
   18f2c:	sub	r0, r8, #1
   18f30:	mov	r4, #1
   18f34:	str	r0, [sp, #12]
   18f38:	mov	r0, #1
   18f3c:	ldr	r5, [pc, #2740]	; 199f8 <main@@Base+0x134c>
   18f40:	str	r0, [sp, #16]
   18f44:	add	r5, pc, r5
   18f48:	b	194e8 <main@@Base+0xe3c>
   18f4c:	ldr	r0, [r9, #8]
   18f50:	bl	127a0 <coda_set_definition_path@plt>
   18f54:	mov	r7, #3
   18f58:	b	1876c <main@@Base+0xc0>
   18f5c:	ldr	r0, [pc, #2832]	; 19a74 <main@@Base+0x13c8>
   18f60:	mov	r2, #0
   18f64:	mov	r1, #3
   18f68:	ldr	r0, [pc, r0]
   18f6c:	str	r2, [r0]
   18f70:	ldr	r0, [pc, #2816]	; 19a78 <main@@Base+0x13cc>
   18f74:	ldr	r0, [pc, r0]
   18f78:	str	r1, [r0]
   18f7c:	ldr	r0, [pc, #2808]	; 19a7c <main@@Base+0x13d0>
   18f80:	ldr	r0, [pc, r0]
   18f84:	str	r2, [r0]
   18f88:	ldr	r0, [pc, #2800]	; 19a80 <main@@Base+0x13d4>
   18f8c:	ldr	r0, [pc, r0]
   18f90:	str	r2, [r0]
   18f94:	ldr	r0, [pc, #2792]	; 19a84 <main@@Base+0x13d8>
   18f98:	ldr	r0, [pc, r0]
   18f9c:	ldr	r0, [r0]
   18fa0:	ldr	r1, [pc, #2784]	; 19a88 <main@@Base+0x13dc>
   18fa4:	ldr	r1, [pc, r1]
   18fa8:	str	r0, [r1]
   18fac:	add	r0, r7, #1
   18fb0:	sub	r8, sl, r0
   18fb4:	cmp	r8, #1
   18fb8:	blt	197b4 <main@@Base+0x1108>
   18fbc:	add	r9, r9, r0, lsl #2
   18fc0:	sub	r0, r8, #1
   18fc4:	mov	r1, #0
   18fc8:	mov	r5, #0
   18fcc:	mov	r4, #0
   18fd0:	str	r0, [sp, #12]
   18fd4:	mov	r0, #1
   18fd8:	str	r1, [sp, #8]
   18fdc:	str	r0, [sp, #16]
   18fe0:	mov	r0, #1
   18fe4:	ldr	r6, [pc, #2720]	; 19a8c <main@@Base+0x13e0>
   18fe8:	ldr	r7, [pc, #2720]	; 19a90 <main@@Base+0x13e4>
   18fec:	str	r0, [sp, #4]
   18ff0:	add	r6, pc, r6
   18ff4:	add	r7, pc, r7
   18ff8:	b	19028 <main@@Base+0x97c>
   18ffc:	mov	r0, #0
   19000:	str	r0, [sp, #4]
   19004:	b	19174 <main@@Base+0xac8>
   19008:	ldr	r2, [pc, #2708]	; 19aa4 <main@@Base+0x13f8>
   1900c:	ldr	r2, [pc, r2]
   19010:	str	r1, [r2]
   19014:	b	19178 <main@@Base+0xacc>
   19018:	ldr	r2, [pc, #2704]	; 19ab0 <main@@Base+0x1404>
   1901c:	ldr	r2, [pc, r2]
   19020:	str	r1, [r2]
   19024:	b	19178 <main@@Base+0xacc>
   19028:	ldr	sl, [r9, r5, lsl #2]
   1902c:	mov	r1, r6
   19030:	mov	r0, sl
   19034:	bl	12674 <strcmp@plt>
   19038:	cmp	r0, #0
   1903c:	beq	19164 <main@@Base+0xab8>
   19040:	mov	r0, sl
   19044:	mov	r1, r7
   19048:	bl	12674 <strcmp@plt>
   1904c:	cmp	r0, #0
   19050:	beq	19164 <main@@Base+0xab8>
   19054:	ldr	r1, [pc, #2616]	; 19a94 <main@@Base+0x13e8>
   19058:	mov	r0, sl
   1905c:	add	r1, pc, r1
   19060:	bl	12674 <strcmp@plt>
   19064:	cmp	r0, #0
   19068:	beq	1916c <main@@Base+0xac0>
   1906c:	ldr	r1, [pc, #2596]	; 19a98 <main@@Base+0x13ec>
   19070:	mov	r0, sl
   19074:	add	r1, pc, r1
   19078:	bl	12674 <strcmp@plt>
   1907c:	cmp	r0, #0
   19080:	beq	1916c <main@@Base+0xac0>
   19084:	ldr	r1, [pc, #2576]	; 19a9c <main@@Base+0x13f0>
   19088:	mov	r0, sl
   1908c:	add	r1, pc, r1
   19090:	bl	12674 <strcmp@plt>
   19094:	cmp	r0, #0
   19098:	beq	190b4 <main@@Base+0xa08>
   1909c:	ldr	r1, [pc, #2556]	; 19aa0 <main@@Base+0x13f4>
   190a0:	mov	r0, sl
   190a4:	add	r1, pc, r1
   190a8:	bl	12674 <strcmp@plt>
   190ac:	cmp	r0, #0
   190b0:	bne	190d0 <main@@Base+0xa24>
   190b4:	add	r0, r5, #1
   190b8:	cmp	r0, r8
   190bc:	bge	190d0 <main@@Base+0xa24>
   190c0:	ldr	r1, [r9, r0, lsl #2]
   190c4:	ldrb	r2, [r1]
   190c8:	cmp	r2, #45	; 0x2d
   190cc:	bne	19008 <main@@Base+0x95c>
   190d0:	ldr	r1, [pc, #2512]	; 19aa8 <main@@Base+0x13fc>
   190d4:	mov	r0, sl
   190d8:	add	r1, pc, r1
   190dc:	bl	12674 <strcmp@plt>
   190e0:	cmp	r0, #0
   190e4:	beq	19100 <main@@Base+0xa54>
   190e8:	ldr	r1, [pc, #2492]	; 19aac <main@@Base+0x1400>
   190ec:	mov	r0, sl
   190f0:	add	r1, pc, r1
   190f4:	bl	12674 <strcmp@plt>
   190f8:	cmp	r0, #0
   190fc:	bne	1911c <main@@Base+0xa70>
   19100:	add	r0, r5, #1
   19104:	cmp	r0, r8
   19108:	bge	1911c <main@@Base+0xa70>
   1910c:	ldr	r1, [r9, r0, lsl #2]
   19110:	ldrb	r2, [r1]
   19114:	cmp	r2, #45	; 0x2d
   19118:	bne	19018 <main@@Base+0x96c>
   1911c:	ldr	r1, [pc, #2448]	; 19ab4 <main@@Base+0x1408>
   19120:	mov	r0, sl
   19124:	add	r1, pc, r1
   19128:	bl	12674 <strcmp@plt>
   1912c:	cmp	r0, #0
   19130:	beq	18ffc <main@@Base+0x950>
   19134:	ldr	r0, [sp, #12]
   19138:	cmp	r5, r0
   1913c:	bne	197b4 <main@@Base+0x1108>
   19140:	ldrb	r0, [sl]
   19144:	cmp	r0, #45	; 0x2d
   19148:	beq	197b4 <main@@Base+0x1108>
   1914c:	ldr	r0, [pc, #2404]	; 19ab8 <main@@Base+0x140c>
   19150:	ldr	r0, [pc, r0]
   19154:	str	sl, [sp, #8]
   19158:	str	sl, [r0]
   1915c:	ldr	r0, [sp, #12]
   19160:	b	19178 <main@@Base+0xacc>
   19164:	mov	r4, #1
   19168:	b	19174 <main@@Base+0xac8>
   1916c:	mov	r0, #0
   19170:	str	r0, [sp, #16]
   19174:	mov	r0, r5
   19178:	add	r5, r0, #1
   1917c:	cmp	r5, r8
   19180:	blt	19028 <main@@Base+0x97c>
   19184:	ldr	r0, [sp, #8]
   19188:	cmp	r0, #0
   1918c:	ldrbne	r0, [r0]
   19190:	cmpne	r0, #0
   19194:	beq	197b4 <main@@Base+0x1108>
   19198:	bl	128f0 <coda_init@plt>
   1919c:	cmp	r0, #0
   191a0:	bne	198d0 <main@@Base+0x1224>
   191a4:	ldr	r0, [sp, #4]
   191a8:	clz	r0, r0
   191ac:	lsr	r0, r0, #5
   191b0:	bl	12734 <coda_set_option_bypass_special_types@plt>
   191b4:	ldr	r0, [sp, #16]
   191b8:	bl	128fc <coda_set_option_perform_conversions@plt>
   191bc:	ldr	r5, [pc, #2296]	; 19abc <main@@Base+0x1410>
   191c0:	ldr	r5, [pc, r5]
   191c4:	ldr	r0, [r5]
   191c8:	ldr	r6, [pc, #2288]	; 19ac0 <main@@Base+0x1414>
   191cc:	ldr	r6, [pc, r6]
   191d0:	cmp	r0, #0
   191d4:	beq	191f0 <main@@Base+0xb44>
   191d8:	ldr	r1, [pc, #2276]	; 19ac4 <main@@Base+0x1418>
   191dc:	add	r1, pc, r1
   191e0:	bl	126b0 <fopen@plt>
   191e4:	cmp	r0, #0
   191e8:	str	r0, [r6]
   191ec:	beq	19924 <main@@Base+0x1278>
   191f0:	mov	r0, r4
   191f4:	bl	16034 <print_json_data@@Base>
   191f8:	b	19498 <main@@Base+0xdec>
   191fc:	ldr	r0, [pc, #2244]	; 19ac8 <main@@Base+0x141c>
   19200:	mov	r2, #0
   19204:	mov	r1, #4
   19208:	ldr	r0, [pc, r0]
   1920c:	str	r2, [r0]
   19210:	ldr	r0, [pc, #2228]	; 19acc <main@@Base+0x1420>
   19214:	ldr	r0, [pc, r0]
   19218:	str	r1, [r0]
   1921c:	ldr	r0, [pc, #2220]	; 19ad0 <main@@Base+0x1424>
   19220:	ldr	r0, [pc, r0]
   19224:	str	r2, [r0]
   19228:	ldr	r0, [pc, #2212]	; 19ad4 <main@@Base+0x1428>
   1922c:	ldr	r0, [pc, r0]
   19230:	str	r2, [r0]
   19234:	ldr	r0, [pc, #2204]	; 19ad8 <main@@Base+0x142c>
   19238:	ldr	r0, [pc, r0]
   1923c:	ldr	r0, [r0]
   19240:	ldr	r1, [pc, #2196]	; 19adc <main@@Base+0x1430>
   19244:	ldr	r1, [pc, r1]
   19248:	str	r0, [r1]
   1924c:	add	r0, r7, #1
   19250:	sub	r8, sl, r0
   19254:	cmp	r8, #1
   19258:	blt	197b4 <main@@Base+0x1108>
   1925c:	add	r9, r9, r0, lsl #2
   19260:	sub	r0, r8, #1
   19264:	mov	r1, #0
   19268:	mov	r5, #0
   1926c:	mov	r4, #0
   19270:	str	r0, [sp, #12]
   19274:	mov	r0, #1
   19278:	str	r1, [sp, #8]
   1927c:	str	r0, [sp, #16]
   19280:	mov	r0, #1
   19284:	ldr	r6, [pc, #2132]	; 19ae0 <main@@Base+0x1434>
   19288:	ldr	r7, [pc, #2132]	; 19ae4 <main@@Base+0x1438>
   1928c:	str	r0, [sp, #4]
   19290:	add	r6, pc, r6
   19294:	add	r7, pc, r7
   19298:	b	192c8 <main@@Base+0xc1c>
   1929c:	mov	r0, #0
   192a0:	str	r0, [sp, #4]
   192a4:	b	19414 <main@@Base+0xd68>
   192a8:	ldr	r2, [pc, #2120]	; 19af8 <main@@Base+0x144c>
   192ac:	ldr	r2, [pc, r2]
   192b0:	str	r1, [r2]
   192b4:	b	19418 <main@@Base+0xd6c>
   192b8:	ldr	r2, [pc, #2116]	; 19b04 <main@@Base+0x1458>
   192bc:	ldr	r2, [pc, r2]
   192c0:	str	r1, [r2]
   192c4:	b	19418 <main@@Base+0xd6c>
   192c8:	ldr	sl, [r9, r5, lsl #2]
   192cc:	mov	r1, r6
   192d0:	mov	r0, sl
   192d4:	bl	12674 <strcmp@plt>
   192d8:	cmp	r0, #0
   192dc:	beq	19404 <main@@Base+0xd58>
   192e0:	mov	r0, sl
   192e4:	mov	r1, r7
   192e8:	bl	12674 <strcmp@plt>
   192ec:	cmp	r0, #0
   192f0:	beq	19404 <main@@Base+0xd58>
   192f4:	ldr	r1, [pc, #2028]	; 19ae8 <main@@Base+0x143c>
   192f8:	mov	r0, sl
   192fc:	add	r1, pc, r1
   19300:	bl	12674 <strcmp@plt>
   19304:	cmp	r0, #0
   19308:	beq	1940c <main@@Base+0xd60>
   1930c:	ldr	r1, [pc, #2008]	; 19aec <main@@Base+0x1440>
   19310:	mov	r0, sl
   19314:	add	r1, pc, r1
   19318:	bl	12674 <strcmp@plt>
   1931c:	cmp	r0, #0
   19320:	beq	1940c <main@@Base+0xd60>
   19324:	ldr	r1, [pc, #1988]	; 19af0 <main@@Base+0x1444>
   19328:	mov	r0, sl
   1932c:	add	r1, pc, r1
   19330:	bl	12674 <strcmp@plt>
   19334:	cmp	r0, #0
   19338:	beq	19354 <main@@Base+0xca8>
   1933c:	ldr	r1, [pc, #1968]	; 19af4 <main@@Base+0x1448>
   19340:	mov	r0, sl
   19344:	add	r1, pc, r1
   19348:	bl	12674 <strcmp@plt>
   1934c:	cmp	r0, #0
   19350:	bne	19370 <main@@Base+0xcc4>
   19354:	add	r0, r5, #1
   19358:	cmp	r0, r8
   1935c:	bge	19370 <main@@Base+0xcc4>
   19360:	ldr	r1, [r9, r0, lsl #2]
   19364:	ldrb	r2, [r1]
   19368:	cmp	r2, #45	; 0x2d
   1936c:	bne	192a8 <main@@Base+0xbfc>
   19370:	ldr	r1, [pc, #1924]	; 19afc <main@@Base+0x1450>
   19374:	mov	r0, sl
   19378:	add	r1, pc, r1
   1937c:	bl	12674 <strcmp@plt>
   19380:	cmp	r0, #0
   19384:	beq	193a0 <main@@Base+0xcf4>
   19388:	ldr	r1, [pc, #1904]	; 19b00 <main@@Base+0x1454>
   1938c:	mov	r0, sl
   19390:	add	r1, pc, r1
   19394:	bl	12674 <strcmp@plt>
   19398:	cmp	r0, #0
   1939c:	bne	193bc <main@@Base+0xd10>
   193a0:	add	r0, r5, #1
   193a4:	cmp	r0, r8
   193a8:	bge	193bc <main@@Base+0xd10>
   193ac:	ldr	r1, [r9, r0, lsl #2]
   193b0:	ldrb	r2, [r1]
   193b4:	cmp	r2, #45	; 0x2d
   193b8:	bne	192b8 <main@@Base+0xc0c>
   193bc:	ldr	r1, [pc, #1860]	; 19b08 <main@@Base+0x145c>
   193c0:	mov	r0, sl
   193c4:	add	r1, pc, r1
   193c8:	bl	12674 <strcmp@plt>
   193cc:	cmp	r0, #0
   193d0:	beq	1929c <main@@Base+0xbf0>
   193d4:	ldr	r0, [sp, #12]
   193d8:	cmp	r5, r0
   193dc:	bne	197b4 <main@@Base+0x1108>
   193e0:	ldrb	r0, [sl]
   193e4:	cmp	r0, #45	; 0x2d
   193e8:	beq	197b4 <main@@Base+0x1108>
   193ec:	ldr	r0, [pc, #1816]	; 19b0c <main@@Base+0x1460>
   193f0:	ldr	r0, [pc, r0]
   193f4:	str	sl, [sp, #8]
   193f8:	str	sl, [r0]
   193fc:	ldr	r0, [sp, #12]
   19400:	b	19418 <main@@Base+0xd6c>
   19404:	mov	r4, #1
   19408:	b	19414 <main@@Base+0xd68>
   1940c:	mov	r0, #0
   19410:	str	r0, [sp, #16]
   19414:	mov	r0, r5
   19418:	add	r5, r0, #1
   1941c:	cmp	r5, r8
   19420:	blt	192c8 <main@@Base+0xc1c>
   19424:	ldr	r0, [sp, #8]
   19428:	cmp	r0, #0
   1942c:	ldrbne	r0, [r0]
   19430:	cmpne	r0, #0
   19434:	beq	197b4 <main@@Base+0x1108>
   19438:	bl	128f0 <coda_init@plt>
   1943c:	cmp	r0, #0
   19440:	bne	198d0 <main@@Base+0x1224>
   19444:	ldr	r0, [sp, #4]
   19448:	clz	r0, r0
   1944c:	lsr	r0, r0, #5
   19450:	bl	12734 <coda_set_option_bypass_special_types@plt>
   19454:	ldr	r0, [sp, #16]
   19458:	bl	128fc <coda_set_option_perform_conversions@plt>
   1945c:	ldr	r5, [pc, #1708]	; 19b10 <main@@Base+0x1464>
   19460:	ldr	r5, [pc, r5]
   19464:	ldr	r0, [r5]
   19468:	ldr	r6, [pc, #1700]	; 19b14 <main@@Base+0x1468>
   1946c:	ldr	r6, [pc, r6]
   19470:	cmp	r0, #0
   19474:	beq	19490 <main@@Base+0xde4>
   19478:	ldr	r1, [pc, #1688]	; 19b18 <main@@Base+0x146c>
   1947c:	add	r1, pc, r1
   19480:	bl	126b0 <fopen@plt>
   19484:	cmp	r0, #0
   19488:	str	r0, [r6]
   1948c:	beq	19924 <main@@Base+0x1278>
   19490:	mov	r0, r4
   19494:	bl	177bc <print_yaml_data@@Base>
   19498:	ldr	r0, [r5]
   1949c:	cmp	r0, #0
   194a0:	beq	1988c <main@@Base+0x11e0>
   194a4:	ldr	r0, [r6]
   194a8:	bl	12974 <fclose@plt>
   194ac:	b	1988c <main@@Base+0x11e0>
   194b0:	ldr	r1, [pc, #1396]	; 19a2c <main@@Base+0x1380>
   194b4:	ldr	r1, [pc, r1]
   194b8:	str	r0, [r1]
   194bc:	b	1978c <main@@Base+0x10e0>
   194c0:	ldr	r1, [pc, #1404]	; 19a44 <main@@Base+0x1398>
   194c4:	ldr	r1, [pc, r1]
   194c8:	str	r0, [r1]
   194cc:	b	1978c <main@@Base+0x10e0>
   194d0:	mov	r0, #0
   194d4:	mov	r7, r6
   194d8:	str	r0, [sp, #16]
   194dc:	b	1978c <main@@Base+0x10e0>
   194e0:	andeq	r2, r0, r3, lsr r7
   194e4:	andeq	r2, r0, sl, lsl r7
   194e8:	ldr	r9, [sl, r6, lsl #2]
   194ec:	mov	r1, r5
   194f0:	mov	r0, r9
   194f4:	bl	12674 <strcmp@plt>
   194f8:	cmp	r0, #0
   194fc:	beq	19704 <main@@Base+0x1058>
   19500:	ldr	r1, [pc, #1268]	; 199fc <main@@Base+0x1350>
   19504:	mov	r0, r9
   19508:	add	r1, pc, r1
   1950c:	bl	12674 <strcmp@plt>
   19510:	cmp	r0, #0
   19514:	beq	19704 <main@@Base+0x1058>
   19518:	ldr	r1, [pc, #1248]	; 19a00 <main@@Base+0x1354>
   1951c:	mov	r0, r9
   19520:	add	r1, pc, r1
   19524:	bl	12674 <strcmp@plt>
   19528:	cmp	r0, #0
   1952c:	beq	19548 <main@@Base+0xe9c>
   19530:	ldr	r1, [pc, #1228]	; 19a04 <main@@Base+0x1358>
   19534:	mov	r0, r9
   19538:	add	r1, pc, r1
   1953c:	bl	12674 <strcmp@plt>
   19540:	cmp	r0, #0
   19544:	bne	19564 <main@@Base+0xeb8>
   19548:	add	r7, r6, #1
   1954c:	cmp	r7, r8
   19550:	bge	19564 <main@@Base+0xeb8>
   19554:	ldr	r0, [sl, r7, lsl #2]
   19558:	ldrb	r1, [r0]
   1955c:	cmp	r1, #45	; 0x2d
   19560:	bne	19734 <main@@Base+0x1088>
   19564:	ldr	r1, [pc, #1184]	; 19a0c <main@@Base+0x1360>
   19568:	mov	r0, r9
   1956c:	add	r1, pc, r1
   19570:	bl	12674 <strcmp@plt>
   19574:	cmp	r0, #0
   19578:	beq	19710 <main@@Base+0x1064>
   1957c:	ldr	r1, [pc, #1164]	; 19a10 <main@@Base+0x1364>
   19580:	mov	r0, r9
   19584:	add	r1, pc, r1
   19588:	bl	12674 <strcmp@plt>
   1958c:	cmp	r0, #0
   19590:	beq	19710 <main@@Base+0x1064>
   19594:	ldr	r1, [pc, #1148]	; 19a18 <main@@Base+0x136c>
   19598:	mov	r0, r9
   1959c:	add	r1, pc, r1
   195a0:	bl	12674 <strcmp@plt>
   195a4:	cmp	r0, #0
   195a8:	beq	19720 <main@@Base+0x1074>
   195ac:	ldr	r1, [pc, #1128]	; 19a1c <main@@Base+0x1370>
   195b0:	mov	r0, r9
   195b4:	add	r1, pc, r1
   195b8:	bl	12674 <strcmp@plt>
   195bc:	cmp	r0, #0
   195c0:	beq	19720 <main@@Base+0x1074>
   195c4:	ldr	r1, [pc, #1112]	; 19a24 <main@@Base+0x1378>
   195c8:	mov	r0, r9
   195cc:	add	r1, pc, r1
   195d0:	bl	12674 <strcmp@plt>
   195d4:	cmp	r0, #0
   195d8:	beq	195f4 <main@@Base+0xf48>
   195dc:	ldr	r1, [pc, #1092]	; 19a28 <main@@Base+0x137c>
   195e0:	mov	r0, r9
   195e4:	add	r1, pc, r1
   195e8:	bl	12674 <strcmp@plt>
   195ec:	cmp	r0, #0
   195f0:	bne	19610 <main@@Base+0xf64>
   195f4:	add	r7, r6, #1
   195f8:	cmp	r7, r8
   195fc:	bge	19610 <main@@Base+0xf64>
   19600:	ldr	r0, [sl, r7, lsl #2]
   19604:	ldrb	r1, [r0]
   19608:	cmp	r1, #45	; 0x2d
   1960c:	bne	194b0 <main@@Base+0xe04>
   19610:	ldr	r1, [pc, #1048]	; 19a30 <main@@Base+0x1384>
   19614:	mov	r0, r9
   19618:	add	r1, pc, r1
   1961c:	bl	12674 <strcmp@plt>
   19620:	cmp	r0, #0
   19624:	beq	19754 <main@@Base+0x10a8>
   19628:	ldr	r1, [pc, #1028]	; 19a34 <main@@Base+0x1388>
   1962c:	mov	r0, r9
   19630:	add	r1, pc, r1
   19634:	bl	12674 <strcmp@plt>
   19638:	cmp	r0, #0
   1963c:	beq	19754 <main@@Base+0x10a8>
   19640:	ldr	r1, [pc, #1012]	; 19a3c <main@@Base+0x1390>
   19644:	mov	r0, r9
   19648:	add	r1, pc, r1
   1964c:	bl	12674 <strcmp@plt>
   19650:	cmp	r0, #0
   19654:	beq	19670 <main@@Base+0xfc4>
   19658:	ldr	r1, [pc, #992]	; 19a40 <main@@Base+0x1394>
   1965c:	mov	r0, r9
   19660:	add	r1, pc, r1
   19664:	bl	12674 <strcmp@plt>
   19668:	cmp	r0, #0
   1966c:	bne	1968c <main@@Base+0xfe0>
   19670:	add	r7, r6, #1
   19674:	cmp	r7, r8
   19678:	bge	1968c <main@@Base+0xfe0>
   1967c:	ldr	r0, [sl, r7, lsl #2]
   19680:	ldrb	r1, [r0]
   19684:	cmp	r1, #45	; 0x2d
   19688:	bne	194c0 <main@@Base+0xe14>
   1968c:	ldr	r1, [pc, #948]	; 19a48 <main@@Base+0x139c>
   19690:	mov	r0, r9
   19694:	add	r1, pc, r1
   19698:	bl	12674 <strcmp@plt>
   1969c:	cmp	r0, #0
   196a0:	beq	19778 <main@@Base+0x10cc>
   196a4:	ldr	r1, [pc, #928]	; 19a4c <main@@Base+0x13a0>
   196a8:	mov	r0, r9
   196ac:	add	r1, pc, r1
   196b0:	bl	12674 <strcmp@plt>
   196b4:	cmp	r0, #0
   196b8:	beq	19778 <main@@Base+0x10cc>
   196bc:	ldr	r1, [pc, #912]	; 19a54 <main@@Base+0x13a8>
   196c0:	mov	r0, r9
   196c4:	add	r1, pc, r1
   196c8:	bl	12674 <strcmp@plt>
   196cc:	cmp	r0, #0
   196d0:	beq	194d0 <main@@Base+0xe24>
   196d4:	ldr	r0, [sp, #12]
   196d8:	cmp	r6, r0
   196dc:	bne	197b4 <main@@Base+0x1108>
   196e0:	ldrb	r0, [r9]
   196e4:	cmp	r0, #45	; 0x2d
   196e8:	beq	197b4 <main@@Base+0x1108>
   196ec:	ldr	r0, [pc, #868]	; 19a58 <main@@Base+0x13ac>
   196f0:	ldr	r0, [pc, r0]
   196f4:	ldr	r7, [sp, #12]
   196f8:	str	r9, [r0]
   196fc:	b	1978c <main@@Base+0x10e0>
   19700:	andeq	r2, r0, r9, lsl #14
   19704:	mov	r4, #0
   19708:	b	19788 <main@@Base+0x10dc>
   1970c:	strdeq	r2, [r0], -r4
   19710:	ldr	r1, [pc, #764]	; 19a14 <main@@Base+0x1368>
   19714:	mov	r0, #1
   19718:	ldr	r1, [pc, r1]
   1971c:	b	19784 <main@@Base+0x10d8>
   19720:	ldr	r1, [pc, #760]	; 19a20 <main@@Base+0x1374>
   19724:	mov	r0, #1
   19728:	ldr	r1, [pc, r1]
   1972c:	b	19784 <main@@Base+0x10d8>
   19730:	ldrdeq	r2, [r0], -lr
   19734:	bl	15aac <codadump_filter_create@@Base>
   19738:	ldr	r1, [pc, #712]	; 19a08 <main@@Base+0x135c>
   1973c:	cmp	r0, #0
   19740:	ldr	r1, [pc, r1]
   19744:	str	r0, [r1, #664]	; 0x298
   19748:	bne	1978c <main@@Base+0x10e0>
   1974c:	b	19908 <main@@Base+0x125c>
   19750:	andeq	r2, r0, r5, asr #13
   19754:	ldr	r1, [pc, #732]	; 19a38 <main@@Base+0x138c>
   19758:	mov	r0, #1
   1975c:	ldr	r1, [pc, r1]
   19760:	b	19784 <main@@Base+0x10d8>
   19764:	andeq	r2, r0, r3, asr #13
   19768:	andeq	r2, r0, ip, lsr #13
   1976c:	muleq	r0, sl, r6
   19770:	andeq	r2, r0, r7, lsl #13
   19774:	andeq	r2, r0, r4, ror r6
   19778:	ldr	r1, [pc, #720]	; 19a50 <main@@Base+0x13a4>
   1977c:	mov	r0, #1
   19780:	ldr	r1, [pc, r1]
   19784:	str	r0, [r1]
   19788:	mov	r7, r6
   1978c:	add	r6, r7, #1
   19790:	cmp	r6, r8
   19794:	blt	194e8 <main@@Base+0xe3c>
   19798:	ldr	r0, [pc, #700]	; 19a5c <main@@Base+0x13b0>
   1979c:	ldr	r0, [pc, r0]
   197a0:	ldr	r0, [r0]
   197a4:	cmp	r0, #0
   197a8:	ldrbne	r0, [r0]
   197ac:	cmpne	r0, #0
   197b0:	bne	19804 <main@@Base+0x1158>
   197b4:	ldr	r0, [pc, #936]	; 19b64 <main@@Base+0x14b8>
   197b8:	mov	r1, #25
   197bc:	ldr	r0, [pc, r0]
   197c0:	ldr	r3, [r0]
   197c4:	ldr	r0, [pc, #924]	; 19b68 <main@@Base+0x14bc>
   197c8:	add	r0, pc, r0
   197cc:	mov	r2, #1
   197d0:	bl	127e8 <fwrite@plt>
   197d4:	bl	19b6c <main@@Base+0x14c0>
   197d8:	mov	r0, #1
   197dc:	bl	12884 <exit@plt>
   197e0:			; <UNDEFINED> instruction: 0x000149b8
   197e4:	andeq	r4, r1, ip, asr #19
   197e8:	muleq	r1, r0, r9
   197ec:			; <UNDEFINED> instruction: 0x000149b8
   197f0:			; <UNDEFINED> instruction: 0x000149b0
   197f4:	andeq	r4, r1, r4, lsl #19
   197f8:	andeq	r2, r0, r3, lsl r6
   197fc:	andeq	r2, r0, r1, asr #14
   19800:	andeq	r4, r1, r8, lsl r9
   19804:	bl	128f0 <coda_init@plt>
   19808:	cmp	r0, #0
   1980c:	bne	198d0 <main@@Base+0x1224>
   19810:	ldr	r0, [sp, #16]
   19814:	clz	r0, r0
   19818:	lsr	r0, r0, #5
   1981c:	bl	12734 <coda_set_option_bypass_special_types@plt>
   19820:	mov	r0, #0
   19824:	bl	12668 <coda_set_option_perform_boundary_checks@plt>
   19828:	mov	r0, r4
   1982c:	bl	128fc <coda_set_option_perform_conversions@plt>
   19830:	bl	16f8c <traverse_info_init@@Base>
   19834:	bl	14850 <dim_info_init@@Base>
   19838:	ldr	r4, [pc, #544]	; 19a60 <main@@Base+0x13b4>
   1983c:	ldr	r4, [pc, r4]
   19840:	ldr	r0, [r4]
   19844:	ldr	r5, [pc, #536]	; 19a64 <main@@Base+0x13b8>
   19848:	ldr	r5, [pc, r5]
   1984c:	cmp	r0, #0
   19850:	beq	1986c <main@@Base+0x11c0>
   19854:	ldr	r1, [pc, #524]	; 19a68 <main@@Base+0x13bc>
   19858:	add	r1, pc, r1
   1985c:	bl	126b0 <fopen@plt>
   19860:	cmp	r0, #0
   19864:	str	r0, [r5]
   19868:	beq	1992c <main@@Base+0x1280>
   1986c:	bl	16fec <traverse_product@@Base>
   19870:	ldr	r0, [r4]
   19874:	cmp	r0, #0
   19878:	beq	19884 <main@@Base+0x11d8>
   1987c:	ldr	r0, [r5]
   19880:	bl	12974 <fclose@plt>
   19884:	bl	14874 <dim_info_done@@Base>
   19888:	bl	16fb0 <traverse_info_done@@Base>
   1988c:	bl	12818 <coda_done@plt>
   19890:	mov	r0, #0
   19894:	sub	sp, fp, #28
   19898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1989c:	andeq	r4, r1, ip, lsr #18
   198a0:	bl	19b6c <main@@Base+0x14c0>
   198a4:	mov	r0, #0
   198a8:	bl	12884 <exit@plt>
   198ac:	andeq	r4, r1, r4, ror #17
   198b0:	bl	1a23c <main@@Base+0x1b90>
   198b4:	mov	r0, #0
   198b8:	bl	12884 <exit@plt>
   198bc:	andeq	r4, r1, ip, ror #17
   198c0:	ldrdeq	r4, [r1], -r0
   198c4:	andeq	r4, r1, r8, ror #17
   198c8:	andeq	r4, r1, r4, asr #17
   198cc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   198d0:	ldr	r0, [pc, #136]	; 19960 <main@@Base+0x12b4>
   198d4:	ldr	r0, [pc, r0]
   198d8:	ldr	r4, [r0]
   198dc:	bl	12a70 <coda_get_errno@plt>
   198e0:	ldr	r0, [r0]
   198e4:	bl	12a28 <coda_errno_to_string@plt>
   198e8:	ldr	r1, [pc, #116]	; 19964 <main@@Base+0x12b8>
   198ec:	mov	r2, r0
   198f0:	mov	r0, r4
   198f4:	add	r1, pc, r1
   198f8:	bl	128cc <fprintf@plt>
   198fc:	mov	r0, #1
   19900:	bl	12884 <exit@plt>
   19904:	andeq	r2, r0, sp, asr r5
   19908:	ldr	r0, [pc, #108]	; 1997c <main@@Base+0x12d0>
   1990c:	mov	r1, #40	; 0x28
   19910:	ldr	r0, [pc, r0]
   19914:	ldr	r3, [r0]
   19918:	ldr	r0, [pc, #96]	; 19980 <main@@Base+0x12d4>
   1991c:	add	r0, pc, r0
   19920:	b	197cc <main@@Base+0x1120>
   19924:	ldr	r2, [r5]
   19928:	b	19944 <main@@Base+0x1298>
   1992c:	ldr	r2, [r4]
   19930:	b	19944 <main@@Base+0x1298>
   19934:	andeq	r2, r0, ip, lsr r5
   19938:	ldr	r0, [pc, #540]	; 19b5c <main@@Base+0x14b0>
   1993c:	ldr	r0, [pc, r0]
   19940:	ldr	r2, [r0]
   19944:	ldr	r0, [pc, #288]	; 19a6c <main@@Base+0x13c0>
   19948:	ldr	r0, [pc, r0]
   1994c:	ldr	r0, [r0]
   19950:	ldr	r1, [pc, #280]	; 19a70 <main@@Base+0x13c4>
   19954:	add	r1, pc, r1
   19958:	b	198f8 <main@@Base+0x124c>
   1995c:	andeq	r2, r0, pc, lsr #10
   19960:	ldrdeq	r3, [r1], -ip
   19964:	andeq	r1, r0, r4, lsl #10
   19968:	andeq	r2, r0, sl, lsl r5
   1996c:	andeq	r2, r0, r4, lsl r5
   19970:	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
   19974:	andeq	r4, r1, r4, lsl #13
   19978:	andeq	r2, r0, sp, asr #6
   1997c:	andeq	r3, r1, r0, lsr #17
   19980:	muleq	r0, r8, r5
   19984:	strdeq	r2, [r0], -sp
   19988:	andeq	r2, r0, r8, ror #9
   1998c:	ldrdeq	r4, [r1], -ip
   19990:	muleq	r0, r5, r3
   19994:	ldrdeq	r2, [r0], -r7
   19998:			; <UNDEFINED> instruction: 0x000024be
   1999c:	andeq	r4, r1, r8, lsr #13
   199a0:	andeq	r2, r0, r9, ror r3
   199a4:	andeq	r2, r0, sp, lsr #9
   199a8:	andeq	r2, r0, r9, lsr #8
   199ac:	andeq	r4, r1, ip, ror r6
   199b0:	muleq	r0, r7, r4
   199b4:	andeq	r4, r1, r4, asr #12
   199b8:	andeq	r2, r0, ip, lsl #9
   199bc:	andeq	r4, r1, r0, lsl #14
   199c0:	andeq	r4, r1, r0, lsr r6
   199c4:	andeq	r4, r1, ip, lsr #6
   199c8:	andeq	r4, r1, r0, asr #6
   199cc:	andeq	r4, r1, r0, lsl #6
   199d0:	andeq	r4, r1, r0, lsl r3
   199d4:	muleq	r0, lr, r8
   199d8:	ldrdeq	r4, [r1], -r8
   199dc:	andeq	r4, r1, r0, ror #5
   199e0:	strdeq	r4, [r1], -r0
   199e4:	andeq	r4, r1, r0, lsl #6
   199e8:	strdeq	r4, [r1], -r8
   199ec:	andeq	r4, r1, r8, lsr #5
   199f0:	ldrdeq	r4, [r1], -r0
   199f4:	andeq	r4, r1, r4, lsr #5
   199f8:	andeq	r1, r0, fp, asr #30
   199fc:	andeq	r1, r0, sl, lsl #19
   19a00:	andeq	r1, r0, r8, lsl #19
   19a04:	andeq	r1, r0, r3, ror r9
   19a08:	andeq	r3, r1, ip, ror #20
   19a0c:			; <UNDEFINED> instruction: 0x000019b3
   19a10:	muleq	r0, lr, r9
   19a14:	andeq	r3, r1, ip, lsr #21
   19a18:	andeq	r1, r0, lr, lsl #19
   19a1c:	andeq	r1, r0, r9, ror r9
   19a20:			; <UNDEFINED> instruction: 0x00013ab8
   19a24:	andeq	r1, r0, r9, ror #18
   19a28:	andeq	r1, r0, r4, asr r9
   19a2c:	andeq	r3, r1, r8, ror #25
   19a30:	andeq	r1, r0, r9, lsr #18
   19a34:	andeq	r1, r0, r4, lsl r9
   19a38:	andeq	r3, r1, r8, lsl #21
   19a3c:	andeq	r1, r0, ip, lsl #18
   19a40:	strdeq	r1, [r0], -r7
   19a44:	strdeq	r3, [r1], -r4
   19a48:	andeq	r1, r0, r9, asr #16
   19a4c:			; <UNDEFINED> instruction: 0x000018be
   19a50:	andeq	r3, r1, r0, lsr #20
   19a54:	andeq	r1, r0, r8, asr #16
   19a58:			; <UNDEFINED> instruction: 0x00013abc
   19a5c:	andeq	r3, r1, r0, lsl sl
   19a60:	andeq	r3, r1, r0, ror #18
   19a64:	andeq	r3, r1, ip, ror #18
   19a68:	andeq	r1, r0, r3, lsr #14
   19a6c:	andeq	r3, r1, r8, ror #16
   19a70:	andeq	r1, r0, r9, lsr #12
   19a74:	andeq	r4, r1, r4, asr #4
   19a78:	andeq	r4, r1, r8, asr r2
   19a7c:	andeq	r4, r1, ip, lsl r2
   19a80:	andeq	r4, r1, r4, asr #4
   19a84:	andeq	r4, r1, ip, lsr r2
   19a88:	andeq	r4, r1, r0, lsl r2
   19a8c:			; <UNDEFINED> instruction: 0x00001fb7
   19a90:			; <UNDEFINED> instruction: 0x00001fb6
   19a94:	andeq	r1, r0, r3, lsr lr
   19a98:	andeq	r1, r0, lr, lsl lr
   19a9c:	andeq	r1, r0, r9, lsr #29
   19aa0:	muleq	r0, r4, lr
   19aa4:	muleq	r1, r0, r1
   19aa8:	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   19aac:	andeq	r1, r0, sl, asr #29
   19ab0:			; <UNDEFINED> instruction: 0x000141b4
   19ab4:	andeq	r1, r0, r8, ror #27
   19ab8:	andeq	r4, r1, ip, asr r0
   19abc:	ldrdeq	r3, [r1], -ip
   19ac0:	andeq	r3, r1, r8, ror #31
   19ac4:	muleq	r0, pc, sp	; <UNPREDICTABLE>
   19ac8:	andeq	r3, r1, r4, lsr #31
   19acc:			; <UNDEFINED> instruction: 0x00013fb8
   19ad0:	andeq	r3, r1, ip, ror pc
   19ad4:	andeq	r3, r1, r4, lsr #31
   19ad8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   19adc:	andeq	r3, r1, r0, ror pc
   19ae0:	andeq	r1, r0, r7, lsl sp
   19ae4:	andeq	r1, r0, r6, lsl sp
   19ae8:	muleq	r0, r3, fp
   19aec:	andeq	r1, r0, lr, ror fp
   19af0:	andeq	r1, r0, r9, lsl #24
   19af4:	strdeq	r1, [r0], -r4
   19af8:	strdeq	r3, [r1], -r0
   19afc:	andeq	r1, r0, pc, lsr ip
   19b00:	andeq	r1, r0, sl, lsr #24
   19b04:	andeq	r3, r1, r4, lsl pc
   19b08:	andeq	r1, r0, r8, asr #22
   19b0c:			; <UNDEFINED> instruction: 0x00013dbc
   19b10:	andeq	r3, r1, ip, lsr sp
   19b14:	andeq	r3, r1, r8, asr #26
   19b18:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   19b1c:	ldrdeq	r2, [r0], -r1
   19b20:			; <UNDEFINED> instruction: 0x000022bc
   19b24:	andeq	r4, r1, r8, asr #11
   19b28:	andeq	r2, r0, r7, lsl #6
   19b2c:	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
   19b30:	andeq	r4, r1, ip, ror #11
   19b34:	andeq	r2, r0, r5, ror #5
   19b38:	ldrdeq	r4, [r1], -r8
   19b3c:			; <UNDEFINED> instruction: 0x000022b1
   19b40:	andeq	r4, r1, r4, lsl #8
   19b44:	andeq	r2, r0, pc, asr #1
   19b48:	strdeq	r2, [r0], -sp
   19b4c:	andeq	r4, r1, r4, asr #7
   19b50:	andeq	r4, r1, ip, ror r3
   19b54:	andeq	r4, r1, r8, lsl #7
   19b58:	andeq	r2, r0, pc, lsr r1
   19b5c:	andeq	r3, r1, r0, ror #16
   19b60:	andeq	r4, r1, r0, asr #6
   19b64:	strdeq	r3, [r1], -r4
   19b68:	andeq	r1, r0, sl, lsl #13
   19b6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b70:	add	fp, sp, #28
   19b74:	sub	sp, sp, #4
   19b78:	ldr	r0, [pc, #1360]	; 1a0d0 <main@@Base+0x1a24>
   19b7c:	add	r0, pc, r0
   19b80:	bl	12824 <puts@plt>
   19b84:	ldr	r0, [pc, #1352]	; 1a0d4 <main@@Base+0x1a28>
   19b88:	add	r0, pc, r0
   19b8c:	bl	12824 <puts@plt>
   19b90:	ldr	r0, [pc, #1344]	; 1a0d8 <main@@Base+0x1a2c>
   19b94:	add	r0, pc, r0
   19b98:	bl	12824 <puts@plt>
   19b9c:	ldr	r8, [pc, #1336]	; 1a0dc <main@@Base+0x1a30>
   19ba0:	add	r8, pc, r8
   19ba4:	mov	r0, r8
   19ba8:	bl	12824 <puts@plt>
   19bac:	ldr	r0, [pc, #1324]	; 1a0e0 <main@@Base+0x1a34>
   19bb0:	add	r0, pc, r0
   19bb4:	bl	12824 <puts@plt>
   19bb8:	ldr	r0, [pc, #1316]	; 1a0e4 <main@@Base+0x1a38>
   19bbc:	add	r0, pc, r0
   19bc0:	bl	12824 <puts@plt>
   19bc4:	ldr	r5, [pc, #1308]	; 1a0e8 <main@@Base+0x1a3c>
   19bc8:	add	r5, pc, r5
   19bcc:	mov	r0, r5
   19bd0:	bl	12824 <puts@plt>
   19bd4:	ldr	r6, [pc, #1296]	; 1a0ec <main@@Base+0x1a40>
   19bd8:	add	r6, pc, r6
   19bdc:	mov	r0, r6
   19be0:	bl	12824 <puts@plt>
   19be4:	ldr	r7, [pc, #1284]	; 1a0f0 <main@@Base+0x1a44>
   19be8:	add	r7, pc, r7
   19bec:	mov	r0, r7
   19bf0:	bl	12824 <puts@plt>
   19bf4:	ldr	r4, [pc, #1272]	; 1a0f4 <main@@Base+0x1a48>
   19bf8:	add	r4, pc, r4
   19bfc:	mov	r0, r4
   19c00:	bl	12824 <puts@plt>
   19c04:	ldr	r0, [pc, #1260]	; 1a0f8 <main@@Base+0x1a4c>
   19c08:	add	r0, pc, r0
   19c0c:	bl	12824 <puts@plt>
   19c10:	ldr	r0, [pc, #1252]	; 1a0fc <main@@Base+0x1a50>
   19c14:	add	r0, pc, r0
   19c18:	bl	12824 <puts@plt>
   19c1c:	ldr	r0, [pc, #1244]	; 1a100 <main@@Base+0x1a54>
   19c20:	add	r0, pc, r0
   19c24:	bl	12824 <puts@plt>
   19c28:	ldr	r0, [pc, #1236]	; 1a104 <main@@Base+0x1a58>
   19c2c:	add	r0, pc, r0
   19c30:	bl	12824 <puts@plt>
   19c34:	ldr	r0, [pc, #1228]	; 1a108 <main@@Base+0x1a5c>
   19c38:	add	r0, pc, r0
   19c3c:	bl	12824 <puts@plt>
   19c40:	ldr	r0, [pc, #1220]	; 1a10c <main@@Base+0x1a60>
   19c44:	add	r0, pc, r0
   19c48:	bl	12824 <puts@plt>
   19c4c:	ldr	r0, [pc, #1212]	; 1a110 <main@@Base+0x1a64>
   19c50:	add	r0, pc, r0
   19c54:	bl	12824 <puts@plt>
   19c58:	ldr	r0, [pc, #1204]	; 1a114 <main@@Base+0x1a68>
   19c5c:	add	r0, pc, r0
   19c60:	bl	12824 <puts@plt>
   19c64:	ldr	r0, [pc, #1196]	; 1a118 <main@@Base+0x1a6c>
   19c68:	add	r0, pc, r0
   19c6c:	bl	12824 <puts@plt>
   19c70:	ldr	sl, [pc, #1188]	; 1a11c <main@@Base+0x1a70>
   19c74:	add	sl, pc, sl
   19c78:	mov	r0, sl
   19c7c:	bl	12824 <puts@plt>
   19c80:	ldr	r0, [pc, #1176]	; 1a120 <main@@Base+0x1a74>
   19c84:	add	r0, pc, r0
   19c88:	bl	12824 <puts@plt>
   19c8c:	ldr	r0, [pc, #1168]	; 1a124 <main@@Base+0x1a78>
   19c90:	add	r0, pc, r0
   19c94:	bl	12824 <puts@plt>
   19c98:	ldr	r0, [pc, #1160]	; 1a128 <main@@Base+0x1a7c>
   19c9c:	add	r0, pc, r0
   19ca0:	bl	12824 <puts@plt>
   19ca4:	mov	r0, #10
   19ca8:	bl	1292c <putchar@plt>
   19cac:	ldr	r0, [pc, #1144]	; 1a12c <main@@Base+0x1a80>
   19cb0:	add	r0, pc, r0
   19cb4:	bl	12824 <puts@plt>
   19cb8:	ldr	r0, [pc, #1136]	; 1a130 <main@@Base+0x1a84>
   19cbc:	add	r0, pc, r0
   19cc0:	bl	12824 <puts@plt>
   19cc4:	mov	r0, r8
   19cc8:	bl	12824 <puts@plt>
   19ccc:	mov	r0, r5
   19cd0:	bl	12824 <puts@plt>
   19cd4:	mov	r0, r6
   19cd8:	bl	12824 <puts@plt>
   19cdc:	mov	r0, r7
   19ce0:	bl	12824 <puts@plt>
   19ce4:	mov	r0, r4
   19ce8:	bl	12824 <puts@plt>
   19cec:	ldr	r0, [pc, #1088]	; 1a134 <main@@Base+0x1a88>
   19cf0:	add	r0, pc, r0
   19cf4:	bl	12824 <puts@plt>
   19cf8:	ldr	r0, [pc, #1080]	; 1a138 <main@@Base+0x1a8c>
   19cfc:	add	r0, pc, r0
   19d00:	bl	12824 <puts@plt>
   19d04:	ldr	r0, [pc, #1072]	; 1a13c <main@@Base+0x1a90>
   19d08:	add	r0, pc, r0
   19d0c:	bl	12824 <puts@plt>
   19d10:	ldr	r0, [pc, #1064]	; 1a140 <main@@Base+0x1a94>
   19d14:	add	r0, pc, r0
   19d18:	bl	12824 <puts@plt>
   19d1c:	ldr	r6, [pc, #1056]	; 1a144 <main@@Base+0x1a98>
   19d20:	add	r6, pc, r6
   19d24:	mov	r0, r6
   19d28:	bl	12824 <puts@plt>
   19d2c:	ldr	r0, [pc, #1044]	; 1a148 <main@@Base+0x1a9c>
   19d30:	add	r0, pc, r0
   19d34:	bl	12824 <puts@plt>
   19d38:	ldr	r0, [pc, #1036]	; 1a14c <main@@Base+0x1aa0>
   19d3c:	add	r0, pc, r0
   19d40:	bl	12824 <puts@plt>
   19d44:	ldr	r0, [pc, #1028]	; 1a150 <main@@Base+0x1aa4>
   19d48:	add	r0, pc, r0
   19d4c:	bl	12824 <puts@plt>
   19d50:	ldr	r0, [pc, #1020]	; 1a154 <main@@Base+0x1aa8>
   19d54:	add	r0, pc, r0
   19d58:	bl	12824 <puts@plt>
   19d5c:	ldr	r0, [pc, #1012]	; 1a158 <main@@Base+0x1aac>
   19d60:	add	r0, pc, r0
   19d64:	bl	12824 <puts@plt>
   19d68:	ldr	r0, [pc, #1004]	; 1a15c <main@@Base+0x1ab0>
   19d6c:	add	r0, pc, r0
   19d70:	bl	12824 <puts@plt>
   19d74:	ldr	r0, [pc, #996]	; 1a160 <main@@Base+0x1ab4>
   19d78:	add	r0, pc, r0
   19d7c:	bl	12824 <puts@plt>
   19d80:	mov	r0, sl
   19d84:	bl	12824 <puts@plt>
   19d88:	ldr	r0, [pc, #980]	; 1a164 <main@@Base+0x1ab8>
   19d8c:	add	r0, pc, r0
   19d90:	mov	r9, r0
   19d94:	bl	12824 <puts@plt>
   19d98:	ldr	r0, [pc, #968]	; 1a168 <main@@Base+0x1abc>
   19d9c:	add	r0, pc, r0
   19da0:	mov	r8, r0
   19da4:	bl	12824 <puts@plt>
   19da8:	ldr	r0, [pc, #956]	; 1a16c <main@@Base+0x1ac0>
   19dac:	add	r0, pc, r0
   19db0:	mov	r7, r0
   19db4:	bl	12824 <puts@plt>
   19db8:	mov	r0, #10
   19dbc:	bl	1292c <putchar@plt>
   19dc0:	ldr	r0, [pc, #936]	; 1a170 <main@@Base+0x1ac4>
   19dc4:	add	r0, pc, r0
   19dc8:	bl	12824 <puts@plt>
   19dcc:	ldr	r0, [pc, #928]	; 1a174 <main@@Base+0x1ac8>
   19dd0:	add	r0, pc, r0
   19dd4:	bl	12824 <puts@plt>
   19dd8:	ldr	r0, [pc, #920]	; 1a178 <main@@Base+0x1acc>
   19ddc:	add	r0, pc, r0
   19de0:	bl	12824 <puts@plt>
   19de4:	ldr	r4, [pc, #912]	; 1a17c <main@@Base+0x1ad0>
   19de8:	add	r4, pc, r4
   19dec:	mov	r0, r4
   19df0:	bl	12824 <puts@plt>
   19df4:	ldr	r5, [pc, #900]	; 1a180 <main@@Base+0x1ad4>
   19df8:	add	r5, pc, r5
   19dfc:	mov	r0, r5
   19e00:	bl	12824 <puts@plt>
   19e04:	ldr	r0, [pc, #888]	; 1a184 <main@@Base+0x1ad8>
   19e08:	add	r0, pc, r0
   19e0c:	bl	12824 <puts@plt>
   19e10:	ldr	r0, [pc, #880]	; 1a188 <main@@Base+0x1adc>
   19e14:	add	r0, pc, r0
   19e18:	bl	12824 <puts@plt>
   19e1c:	ldr	r0, [pc, #872]	; 1a18c <main@@Base+0x1ae0>
   19e20:	add	r0, pc, r0
   19e24:	bl	12824 <puts@plt>
   19e28:	mov	r0, r6
   19e2c:	bl	12824 <puts@plt>
   19e30:	ldr	r0, [pc, #856]	; 1a190 <main@@Base+0x1ae4>
   19e34:	add	r0, pc, r0
   19e38:	bl	12824 <puts@plt>
   19e3c:	ldr	r0, [pc, #848]	; 1a194 <main@@Base+0x1ae8>
   19e40:	add	r0, pc, r0
   19e44:	bl	12824 <puts@plt>
   19e48:	ldr	r0, [pc, #840]	; 1a198 <main@@Base+0x1aec>
   19e4c:	add	r0, pc, r0
   19e50:	bl	12824 <puts@plt>
   19e54:	ldr	r6, [pc, #832]	; 1a19c <main@@Base+0x1af0>
   19e58:	add	r6, pc, r6
   19e5c:	mov	r0, r6
   19e60:	bl	12824 <puts@plt>
   19e64:	mov	r0, sl
   19e68:	bl	12824 <puts@plt>
   19e6c:	mov	r0, r9
   19e70:	bl	12824 <puts@plt>
   19e74:	mov	r0, r8
   19e78:	bl	12824 <puts@plt>
   19e7c:	mov	r0, r7
   19e80:	bl	12824 <puts@plt>
   19e84:	mov	r0, #10
   19e88:	bl	1292c <putchar@plt>
   19e8c:	ldr	r0, [pc, #780]	; 1a1a0 <main@@Base+0x1af4>
   19e90:	add	r0, pc, r0
   19e94:	bl	12824 <puts@plt>
   19e98:	ldr	r0, [pc, #772]	; 1a1a4 <main@@Base+0x1af8>
   19e9c:	add	r0, pc, r0
   19ea0:	bl	12824 <puts@plt>
   19ea4:	ldr	r0, [pc, #764]	; 1a1a8 <main@@Base+0x1afc>
   19ea8:	add	r0, pc, r0
   19eac:	bl	12824 <puts@plt>
   19eb0:	mov	r0, r4
   19eb4:	bl	12824 <puts@plt>
   19eb8:	mov	r0, r5
   19ebc:	bl	12824 <puts@plt>
   19ec0:	ldr	r0, [pc, #740]	; 1a1ac <main@@Base+0x1b00>
   19ec4:	add	r0, pc, r0
   19ec8:	bl	12824 <puts@plt>
   19ecc:	ldr	r0, [pc, #732]	; 1a1b0 <main@@Base+0x1b04>
   19ed0:	add	r0, pc, r0
   19ed4:	bl	12824 <puts@plt>
   19ed8:	ldr	r0, [pc, #724]	; 1a1b4 <main@@Base+0x1b08>
   19edc:	add	r0, pc, r0
   19ee0:	bl	12824 <puts@plt>
   19ee4:	ldr	r0, [pc, #716]	; 1a1b8 <main@@Base+0x1b0c>
   19ee8:	add	r0, pc, r0
   19eec:	bl	12824 <puts@plt>
   19ef0:	ldr	r0, [pc, #708]	; 1a1bc <main@@Base+0x1b10>
   19ef4:	add	r0, pc, r0
   19ef8:	bl	12824 <puts@plt>
   19efc:	ldr	r0, [pc, #700]	; 1a1c0 <main@@Base+0x1b14>
   19f00:	add	r0, pc, r0
   19f04:	bl	12824 <puts@plt>
   19f08:	ldr	r0, [pc, #692]	; 1a1c4 <main@@Base+0x1b18>
   19f0c:	add	r0, pc, r0
   19f10:	bl	12824 <puts@plt>
   19f14:	ldr	r0, [pc, #684]	; 1a1c8 <main@@Base+0x1b1c>
   19f18:	add	r0, pc, r0
   19f1c:	bl	12824 <puts@plt>
   19f20:	mov	r0, r6
   19f24:	bl	12824 <puts@plt>
   19f28:	mov	r0, sl
   19f2c:	bl	12824 <puts@plt>
   19f30:	mov	r0, r9
   19f34:	bl	12824 <puts@plt>
   19f38:	mov	r0, r8
   19f3c:	bl	12824 <puts@plt>
   19f40:	mov	r0, r7
   19f44:	bl	12824 <puts@plt>
   19f48:	mov	r0, #10
   19f4c:	bl	1292c <putchar@plt>
   19f50:	ldr	r0, [pc, #628]	; 1a1cc <main@@Base+0x1b20>
   19f54:	add	r0, pc, r0
   19f58:	bl	12824 <puts@plt>
   19f5c:	ldr	r0, [pc, #620]	; 1a1d0 <main@@Base+0x1b24>
   19f60:	add	r0, pc, r0
   19f64:	bl	12824 <puts@plt>
   19f68:	ldr	r0, [pc, #612]	; 1a1d4 <main@@Base+0x1b28>
   19f6c:	add	r0, pc, r0
   19f70:	bl	12824 <puts@plt>
   19f74:	ldr	r0, [pc, #604]	; 1a1d8 <main@@Base+0x1b2c>
   19f78:	add	r0, pc, r0
   19f7c:	bl	12824 <puts@plt>
   19f80:	ldr	r0, [pc, #596]	; 1a1dc <main@@Base+0x1b30>
   19f84:	add	r0, pc, r0
   19f88:	bl	12824 <puts@plt>
   19f8c:	ldr	r0, [pc, #588]	; 1a1e0 <main@@Base+0x1b34>
   19f90:	add	r0, pc, r0
   19f94:	bl	12824 <puts@plt>
   19f98:	ldr	r0, [pc, #580]	; 1a1e4 <main@@Base+0x1b38>
   19f9c:	add	r0, pc, r0
   19fa0:	bl	12824 <puts@plt>
   19fa4:	ldr	r0, [pc, #572]	; 1a1e8 <main@@Base+0x1b3c>
   19fa8:	add	r0, pc, r0
   19fac:	bl	12824 <puts@plt>
   19fb0:	ldr	r0, [pc, #564]	; 1a1ec <main@@Base+0x1b40>
   19fb4:	add	r0, pc, r0
   19fb8:	bl	12824 <puts@plt>
   19fbc:	ldr	r0, [pc, #556]	; 1a1f0 <main@@Base+0x1b44>
   19fc0:	add	r0, pc, r0
   19fc4:	bl	12824 <puts@plt>
   19fc8:	ldr	r0, [pc, #548]	; 1a1f4 <main@@Base+0x1b48>
   19fcc:	add	r0, pc, r0
   19fd0:	bl	12824 <puts@plt>
   19fd4:	mov	r0, r6
   19fd8:	bl	12824 <puts@plt>
   19fdc:	ldr	r0, [pc, #532]	; 1a1f8 <main@@Base+0x1b4c>
   19fe0:	add	r0, pc, r0
   19fe4:	bl	12824 <puts@plt>
   19fe8:	ldr	r0, [pc, #524]	; 1a1fc <main@@Base+0x1b50>
   19fec:	add	r0, pc, r0
   19ff0:	bl	12824 <puts@plt>
   19ff4:	ldr	r0, [pc, #516]	; 1a200 <main@@Base+0x1b54>
   19ff8:	add	r0, pc, r0
   19ffc:	bl	12824 <puts@plt>
   1a000:	ldr	r0, [pc, #508]	; 1a204 <main@@Base+0x1b58>
   1a004:	add	r0, pc, r0
   1a008:	bl	12824 <puts@plt>
   1a00c:	ldr	r0, [pc, #500]	; 1a208 <main@@Base+0x1b5c>
   1a010:	add	r0, pc, r0
   1a014:	bl	12824 <puts@plt>
   1a018:	ldr	r0, [pc, #492]	; 1a20c <main@@Base+0x1b60>
   1a01c:	add	r0, pc, r0
   1a020:	bl	12824 <puts@plt>
   1a024:	mov	r0, #10
   1a028:	bl	1292c <putchar@plt>
   1a02c:	ldr	r0, [pc, #476]	; 1a210 <main@@Base+0x1b64>
   1a030:	add	r0, pc, r0
   1a034:	bl	12824 <puts@plt>
   1a038:	ldr	r0, [pc, #468]	; 1a214 <main@@Base+0x1b68>
   1a03c:	add	r0, pc, r0
   1a040:	bl	12824 <puts@plt>
   1a044:	mov	r0, #10
   1a048:	bl	1292c <putchar@plt>
   1a04c:	ldr	r0, [pc, #452]	; 1a218 <main@@Base+0x1b6c>
   1a050:	add	r0, pc, r0
   1a054:	bl	12824 <puts@plt>
   1a058:	ldr	r0, [pc, #444]	; 1a21c <main@@Base+0x1b70>
   1a05c:	add	r0, pc, r0
   1a060:	bl	12824 <puts@plt>
   1a064:	mov	r0, #10
   1a068:	bl	1292c <putchar@plt>
   1a06c:	ldr	r0, [pc, #428]	; 1a220 <main@@Base+0x1b74>
   1a070:	add	r0, pc, r0
   1a074:	bl	12824 <puts@plt>
   1a078:	ldr	r0, [pc, #420]	; 1a224 <main@@Base+0x1b78>
   1a07c:	add	r0, pc, r0
   1a080:	bl	12824 <puts@plt>
   1a084:	ldr	r0, [pc, #412]	; 1a228 <main@@Base+0x1b7c>
   1a088:	add	r0, pc, r0
   1a08c:	bl	12824 <puts@plt>
   1a090:	ldr	r0, [pc, #404]	; 1a22c <main@@Base+0x1b80>
   1a094:	add	r0, pc, r0
   1a098:	bl	12824 <puts@plt>
   1a09c:	ldr	r0, [pc, #396]	; 1a230 <main@@Base+0x1b84>
   1a0a0:	add	r0, pc, r0
   1a0a4:	bl	12824 <puts@plt>
   1a0a8:	ldr	r0, [pc, #388]	; 1a234 <main@@Base+0x1b88>
   1a0ac:	add	r0, pc, r0
   1a0b0:	bl	12824 <puts@plt>
   1a0b4:	ldr	r0, [pc, #380]	; 1a238 <main@@Base+0x1b8c>
   1a0b8:	add	r0, pc, r0
   1a0bc:	bl	12824 <puts@plt>
   1a0c0:	mov	r0, #10
   1a0c4:	sub	sp, fp, #28
   1a0c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0cc:	b	1292c <putchar@plt>
   1a0d0:	andeq	r1, r0, fp, ror r4
   1a0d4:	andeq	r1, r0, r0, lsl #9
   1a0d8:	andeq	r1, r0, r4, asr #9
   1a0dc:	andeq	r1, r0, r8, ror r7
   1a0e0:	ldrdeq	r1, [r0], -r8
   1a0e4:	andeq	r1, r0, ip, ror #9
   1a0e8:	andeq	r1, r0, r0, ror #25
   1a0ec:	andeq	r1, r0, r0, lsl #26
   1a0f0:	andeq	r1, r0, r0, asr r7
   1a0f4:	andeq	r1, r0, r0, ror r7
   1a0f8:	andeq	r1, r0, r0, ror #9
   1a0fc:	strdeq	r1, [r0], -r4
   1a100:	andeq	r1, r0, r8, lsl r5
   1a104:	andeq	r1, r0, ip, lsr #10
   1a108:	andeq	r1, r0, r0, asr r5
   1a10c:	andeq	r1, r0, r4, ror #10
   1a110:	muleq	r0, r8, r5
   1a114:	andeq	r1, r0, ip, lsr #11
   1a118:	strdeq	r1, [r0], -r0
   1a11c:	andeq	r1, r0, r4, lsr #25
   1a120:			; <UNDEFINED> instruction: 0x00001cb4
   1a124:	strdeq	r1, [r0], -r8
   1a128:	andeq	r1, r0, ip, lsr sp
   1a12c:	ldrdeq	r1, [r0], -r8
   1a130:	andeq	r1, r0, ip, lsl r6
   1a134:	andeq	r1, r0, r8, asr #13
   1a138:	ldrdeq	r1, [r0], -ip
   1a13c:	andeq	r1, r0, r0, lsr #14
   1a140:	andeq	r1, r0, r4, lsr r7
   1a144:	andeq	r1, r0, r8, lsl #29
   1a148:	andeq	r1, r0, r8, lsr #29
   1a14c:	andeq	r1, r0, ip, asr r7
   1a150:	andeq	r1, r0, r0, ror r7
   1a154:			; <UNDEFINED> instruction: 0x000017b4
   1a158:	andeq	r1, r0, r8, ror #15
   1a15c:	andeq	r1, r0, ip, lsr #16
   1a160:	andeq	r1, r0, r0, asr r8
   1a164:	andeq	r1, r0, ip, lsr #23
   1a168:	andeq	r1, r0, ip, ror #23
   1a16c:	andeq	r1, r0, ip, lsr #24
   1a170:	andeq	r1, r0, r4, asr r8
   1a174:	muleq	r0, r8, r8
   1a178:	andeq	r1, r0, ip, asr #17
   1a17c:	andeq	r1, r0, r0, ror #19
   1a180:	strdeq	r1, [r0], -r0
   1a184:	andeq	r1, r0, r0, asr #17
   1a188:	muleq	r0, r4, sl
   1a18c:			; <UNDEFINED> instruction: 0x00001ab8
   1a190:	andeq	r1, r0, r4, lsr #27
   1a194:	ldrdeq	r1, [r0], -r8
   1a198:	andeq	r1, r0, ip, ror #27
   1a19c:	andeq	r1, r0, r0, lsr lr
   1a1a0:	andeq	r1, r0, r8, lsl #17
   1a1a4:	andeq	r1, r0, ip, asr #17
   1a1a8:	andeq	r1, r0, r0, lsl #18
   1a1ac:	andeq	r1, r0, r4, ror r9
   1a1b0:			; <UNDEFINED> instruction: 0x000019b8
   1a1b4:	andeq	r1, r0, ip, asr #19
   1a1b8:	strdeq	r1, [r0], -r0
   1a1bc:			; <UNDEFINED> instruction: 0x00001cb4
   1a1c0:	ldrdeq	r1, [r0], -r8
   1a1c4:	andeq	r1, r0, ip, lsl #26
   1a1c8:	andeq	r1, r0, r0, lsr #26
   1a1cc:	andeq	r1, r0, r4, lsr #21
   1a1d0:	andeq	r1, r0, r8, ror #21
   1a1d4:	andeq	r1, r0, ip, lsr #22
   1a1d8:	andeq	r1, r0, r0, ror fp
   1a1dc:	muleq	r0, r4, fp
   1a1e0:	andeq	r1, r0, r8, lsr #23
   1a1e4:	andeq	r1, r0, ip, asr #23
   1a1e8:	andeq	r1, r0, r0, lsl #24
   1a1ec:	andeq	r1, r0, r4, lsr #24
   1a1f0:	andeq	r1, r0, r8, asr ip
   1a1f4:	andeq	r1, r0, ip, ror #24
   1a1f8:	strdeq	r1, [r0], -r8
   1a1fc:	andeq	r1, r0, ip, lsl #26
   1a200:	andeq	r1, r0, r0, asr sp
   1a204:	muleq	r0, r4, sp
   1a208:	andeq	r1, r0, r8, asr #27
   1a20c:	andeq	r1, r0, ip, lsl #28
   1a210:	andeq	r1, r0, r8, lsr lr
   1a214:	andeq	r1, r0, ip, asr #28
   1a218:	andeq	r1, r0, r8, asr lr
   1a21c:	andeq	r1, r0, ip, ror #28
   1a220:	muleq	r0, r8, lr
   1a224:	ldrdeq	r1, [r0], -ip
   1a228:	andeq	r1, r0, r0, lsr #30
   1a22c:	andeq	r1, r0, r4, asr #30
   1a230:	andeq	r1, r0, r8, lsl #31
   1a234:	andeq	r1, r0, ip, asr #31
   1a238:	andeq	r2, r0, r0
   1a23c:	push	{fp, lr}
   1a240:	mov	fp, sp
   1a244:	bl	12a64 <coda_get_libcoda_version@plt>
   1a248:	mov	r1, r0
   1a24c:	ldr	r0, [pc, #28]	; 1a270 <main@@Base+0x1bc4>
   1a250:	add	r0, pc, r0
   1a254:	bl	12698 <printf@plt>
   1a258:	ldr	r0, [pc, #20]	; 1a274 <main@@Base+0x1bc8>
   1a25c:	add	r0, pc, r0
   1a260:	bl	12824 <puts@plt>
   1a264:	mov	r0, #10
   1a268:	pop	{fp, lr}
   1a26c:	b	1292c <putchar@plt>
   1a270:	andeq	r0, r0, ip, lsl ip
   1a274:	muleq	r0, ip, lr
   1a278:	cmp	r3, #0
   1a27c:	cmpeq	r2, #0
   1a280:	bne	1a2a4 <main@@Base+0x1bf8>
   1a284:	cmp	r1, #0
   1a288:	movlt	r1, #-2147483648	; 0x80000000
   1a28c:	movlt	r0, #0
   1a290:	blt	1a2a0 <main@@Base+0x1bf4>
   1a294:	cmpeq	r0, #0
   1a298:	mvnne	r1, #-2147483648	; 0x80000000
   1a29c:	mvnne	r0, #0
   1a2a0:	b	1a34c <main@@Base+0x1ca0>
   1a2a4:	sub	sp, sp, #8
   1a2a8:	push	{sp, lr}
   1a2ac:	cmp	r1, #0
   1a2b0:	blt	1a2d0 <main@@Base+0x1c24>
   1a2b4:	cmp	r3, #0
   1a2b8:	blt	1a304 <main@@Base+0x1c58>
   1a2bc:	bl	1a35c <main@@Base+0x1cb0>
   1a2c0:	ldr	lr, [sp, #4]
   1a2c4:	add	sp, sp, #8
   1a2c8:	pop	{r2, r3}
   1a2cc:	bx	lr
   1a2d0:	rsbs	r0, r0, #0
   1a2d4:	sbc	r1, r1, r1, lsl #1
   1a2d8:	cmp	r3, #0
   1a2dc:	blt	1a328 <main@@Base+0x1c7c>
   1a2e0:	bl	1a35c <main@@Base+0x1cb0>
   1a2e4:	ldr	lr, [sp, #4]
   1a2e8:	add	sp, sp, #8
   1a2ec:	pop	{r2, r3}
   1a2f0:	rsbs	r0, r0, #0
   1a2f4:	sbc	r1, r1, r1, lsl #1
   1a2f8:	rsbs	r2, r2, #0
   1a2fc:	sbc	r3, r3, r3, lsl #1
   1a300:	bx	lr
   1a304:	rsbs	r2, r2, #0
   1a308:	sbc	r3, r3, r3, lsl #1
   1a30c:	bl	1a35c <main@@Base+0x1cb0>
   1a310:	ldr	lr, [sp, #4]
   1a314:	add	sp, sp, #8
   1a318:	pop	{r2, r3}
   1a31c:	rsbs	r0, r0, #0
   1a320:	sbc	r1, r1, r1, lsl #1
   1a324:	bx	lr
   1a328:	rsbs	r2, r2, #0
   1a32c:	sbc	r3, r3, r3, lsl #1
   1a330:	bl	1a35c <main@@Base+0x1cb0>
   1a334:	ldr	lr, [sp, #4]
   1a338:	add	sp, sp, #8
   1a33c:	pop	{r2, r3}
   1a340:	rsbs	r2, r2, #0
   1a344:	sbc	r3, r3, r3, lsl #1
   1a348:	bx	lr
   1a34c:	push	{r1, lr}
   1a350:	mov	r0, #8
   1a354:	bl	12650 <raise@plt>
   1a358:	pop	{r1, pc}
   1a35c:	cmp	r1, r3
   1a360:	cmpeq	r0, r2
   1a364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a368:	mov	r4, r0
   1a36c:	movcc	r0, #0
   1a370:	mov	r5, r1
   1a374:	ldr	lr, [sp, #36]	; 0x24
   1a378:	movcc	r1, r0
   1a37c:	bcc	1a478 <main@@Base+0x1dcc>
   1a380:	cmp	r3, #0
   1a384:	clzeq	ip, r2
   1a388:	clzne	ip, r3
   1a38c:	addeq	ip, ip, #32
   1a390:	cmp	r5, #0
   1a394:	clzeq	r1, r4
   1a398:	addeq	r1, r1, #32
   1a39c:	clzne	r1, r5
   1a3a0:	sub	ip, ip, r1
   1a3a4:	sub	sl, ip, #32
   1a3a8:	lsl	r9, r3, ip
   1a3ac:	rsb	fp, ip, #32
   1a3b0:	orr	r9, r9, r2, lsl sl
   1a3b4:	orr	r9, r9, r2, lsr fp
   1a3b8:	lsl	r8, r2, ip
   1a3bc:	cmp	r5, r9
   1a3c0:	cmpeq	r4, r8
   1a3c4:	movcc	r0, #0
   1a3c8:	movcc	r1, r0
   1a3cc:	bcc	1a3e8 <main@@Base+0x1d3c>
   1a3d0:	mov	r0, #1
   1a3d4:	subs	r4, r4, r8
   1a3d8:	lsl	r1, r0, sl
   1a3dc:	orr	r1, r1, r0, lsr fp
   1a3e0:	lsl	r0, r0, ip
   1a3e4:	sbc	r5, r5, r9
   1a3e8:	cmp	ip, #0
   1a3ec:	beq	1a478 <main@@Base+0x1dcc>
   1a3f0:	lsr	r6, r8, #1
   1a3f4:	orr	r6, r6, r9, lsl #31
   1a3f8:	lsr	r7, r9, #1
   1a3fc:	mov	r2, ip
   1a400:	b	1a424 <main@@Base+0x1d78>
   1a404:	subs	r3, r4, r6
   1a408:	sbc	r8, r5, r7
   1a40c:	adds	r3, r3, r3
   1a410:	adc	r8, r8, r8
   1a414:	adds	r4, r3, #1
   1a418:	adc	r5, r8, #0
   1a41c:	subs	r2, r2, #1
   1a420:	beq	1a440 <main@@Base+0x1d94>
   1a424:	cmp	r5, r7
   1a428:	cmpeq	r4, r6
   1a42c:	bcs	1a404 <main@@Base+0x1d58>
   1a430:	adds	r4, r4, r4
   1a434:	adc	r5, r5, r5
   1a438:	subs	r2, r2, #1
   1a43c:	bne	1a424 <main@@Base+0x1d78>
   1a440:	lsr	r3, r4, ip
   1a444:	orr	r3, r3, r5, lsl fp
   1a448:	lsr	r2, r5, ip
   1a44c:	orr	r3, r3, r5, lsr sl
   1a450:	adds	r0, r0, r4
   1a454:	mov	r4, r3
   1a458:	lsl	r3, r2, ip
   1a45c:	orr	r3, r3, r4, lsl sl
   1a460:	lsl	ip, r4, ip
   1a464:	orr	r3, r3, r4, lsr fp
   1a468:	adc	r1, r1, r5
   1a46c:	subs	r0, r0, ip
   1a470:	mov	r5, r2
   1a474:	sbc	r1, r1, r3
   1a478:	cmp	lr, #0
   1a47c:	strdne	r4, [lr]
   1a480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a484 <__libc_csu_init@@Base>:
   1a484:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a488:	mov	r7, r0
   1a48c:	ldr	r6, [pc, #72]	; 1a4dc <__libc_csu_init@@Base+0x58>
   1a490:	ldr	r5, [pc, #72]	; 1a4e0 <__libc_csu_init@@Base+0x5c>
   1a494:	add	r6, pc, r6
   1a498:	add	r5, pc, r5
   1a49c:	sub	r6, r6, r5
   1a4a0:	mov	r8, r1
   1a4a4:	mov	r9, r2
   1a4a8:	bl	1260c <coda_cursor_get_byte_size@plt-0x20>
   1a4ac:	asrs	r6, r6, #2
   1a4b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a4b4:	mov	r4, #0
   1a4b8:	add	r4, r4, #1
   1a4bc:	ldr	r3, [r5], #4
   1a4c0:	mov	r2, r9
   1a4c4:	mov	r1, r8
   1a4c8:	mov	r0, r7
   1a4cc:	blx	r3
   1a4d0:	cmp	r6, r4
   1a4d4:	bne	1a4b8 <__libc_csu_init@@Base+0x34>
   1a4d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a4dc:	andeq	r2, r1, r8, asr sl
   1a4e0:	andeq	r2, r1, r0, asr sl

0001a4e4 <__libc_csu_fini@@Base>:
   1a4e4:	bx	lr

Disassembly of section .fini:

0001a4e8 <.fini>:
   1a4e8:	push	{r3, lr}
   1a4ec:	pop	{r3, pc}
