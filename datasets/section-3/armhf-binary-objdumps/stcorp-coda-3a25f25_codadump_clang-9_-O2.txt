
../repos/stcorp-coda-3a25f25/codadump:     file format elf32-littlearm


Disassembly of section .init:

0001260c <.init>:
   1260c:	push	{r3, lr}
   12610:	bl	12b18 <_start@@Base+0x3c>
   12614:	pop	{r3, pc}

Disassembly of section .plt:

00012618 <coda_cursor_get_byte_size@plt-0x14>:
   12618:	push	{lr}		; (str lr, [sp, #-4]!)
   1261c:	ldr	lr, [pc, #4]	; 12628 <coda_cursor_get_byte_size@plt-0x4>
   12620:	add	lr, pc, lr
   12624:	ldr	pc, [lr, #8]!
   12628:	ldrdeq	sl, [r1], -r8

0001262c <coda_cursor_get_byte_size@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #106496	; 0x1a000
   12634:	ldr	pc, [ip, #2520]!	; 0x9d8

00012638 <coda_type_get_special_type_name@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #106496	; 0x1a000
   12640:	ldr	pc, [ip, #2512]!	; 0x9d0

00012644 <coda_set_option_use_fast_size_expressions@plt>:
   12644:	add	ip, pc, #0, 12
   12648:	add	ip, ip, #106496	; 0x1a000
   1264c:	ldr	pc, [ip, #2504]!	; 0x9c8

00012650 <raise@plt>:
   12650:	add	ip, pc, #0, 12
   12654:	add	ip, ip, #106496	; 0x1a000
   12658:	ldr	pc, [ip, #2496]!	; 0x9c0

0001265c <coda_get_option_bypass_special_types@plt>:
   1265c:	add	ip, pc, #0, 12
   12660:	add	ip, ip, #106496	; 0x1a000
   12664:	ldr	pc, [ip, #2488]!	; 0x9b8

00012668 <coda_set_option_perform_boundary_checks@plt>:
   12668:	add	ip, pc, #0, 12
   1266c:	add	ip, ip, #106496	; 0x1a000
   12670:	ldr	pc, [ip, #2480]!	; 0x9b0

00012674 <strcmp@plt>:
   12674:	add	ip, pc, #0, 12
   12678:	add	ip, ip, #106496	; 0x1a000
   1267c:	ldr	pc, [ip, #2472]!	; 0x9a8

00012680 <strtol@plt>:
   12680:	add	ip, pc, #0, 12
   12684:	add	ip, ip, #106496	; 0x1a000
   12688:	ldr	pc, [ip, #2464]!	; 0x9a0

0001268c <coda_type_get_record_field_hidden_status@plt>:
   1268c:	add	ip, pc, #0, 12
   12690:	add	ip, ip, #106496	; 0x1a000
   12694:	ldr	pc, [ip, #2456]!	; 0x998

00012698 <printf@plt>:
   12698:	add	ip, pc, #0, 12
   1269c:	add	ip, ip, #106496	; 0x1a000
   126a0:	ldr	pc, [ip, #2448]!	; 0x990

000126a4 <coda_cursor_get_record_field_available_status@plt>:
   126a4:	add	ip, pc, #0, 12
   126a8:	add	ip, ip, #106496	; 0x1a000
   126ac:	ldr	pc, [ip, #2440]!	; 0x988

000126b0 <fopen@plt>:
   126b0:	add	ip, pc, #0, 12
   126b4:	add	ip, ip, #106496	; 0x1a000
   126b8:	ldr	pc, [ip, #2432]!	; 0x980

000126bc <coda_set_error@plt>:
   126bc:	add	ip, pc, #0, 12
   126c0:	add	ip, ip, #106496	; 0x1a000
   126c4:	ldr	pc, [ip, #2424]!	; 0x978

000126c8 <coda_open@plt>:
   126c8:	add	ip, pc, #0, 12
   126cc:	add	ip, ip, #106496	; 0x1a000
   126d0:	ldr	pc, [ip, #2416]!	; 0x970

000126d4 <fflush@plt>:
   126d4:	add	ip, pc, #0, 12
   126d8:	add	ip, ip, #106496	; 0x1a000
   126dc:	ldr	pc, [ip, #2408]!	; 0x968

000126e0 <coda_time_double_to_string@plt>:
   126e0:	add	ip, pc, #0, 12
   126e4:	add	ip, ip, #106496	; 0x1a000
   126e8:	ldr	pc, [ip, #2400]!	; 0x960

000126ec <coda_cursor_get_num_elements@plt>:
   126ec:	add	ip, pc, #0, 12
   126f0:	add	ip, ip, #106496	; 0x1a000
   126f4:	ldr	pc, [ip, #2392]!	; 0x958

000126f8 <coda_str64u@plt>:
   126f8:	add	ip, pc, #0, 12
   126fc:	add	ip, ip, #106496	; 0x1a000
   12700:	ldr	pc, [ip, #2384]!	; 0x950

00012704 <free@plt>:
   12704:	add	ip, pc, #0, 12
   12708:	add	ip, ip, #106496	; 0x1a000
   1270c:	ldr	pc, [ip, #2376]!	; 0x948

00012710 <coda_set_option_use_mmap@plt>:
   12710:	add	ip, pc, #0, 12
   12714:	add	ip, ip, #106496	; 0x1a000
   12718:	ldr	pc, [ip, #2368]!	; 0x940

0001271c <coda_set_definition_path_conditional@plt>:
   1271c:	add	ip, pc, #0, 12
   12720:	add	ip, ip, #106496	; 0x1a000
   12724:	ldr	pc, [ip, #2360]!	; 0x938

00012728 <coda_cursor_read_uint32@plt>:
   12728:	add	ip, pc, #0, 12
   1272c:	add	ip, ip, #106496	; 0x1a000
   12730:	ldr	pc, [ip, #2352]!	; 0x930

00012734 <coda_set_option_bypass_special_types@plt>:
   12734:	add	ip, pc, #0, 12
   12738:	add	ip, ip, #106496	; 0x1a000
   1273c:	ldr	pc, [ip, #2344]!	; 0x928

00012740 <coda_type_get_record_field_type@plt>:
   12740:	add	ip, pc, #0, 12
   12744:	add	ip, ip, #106496	; 0x1a000
   12748:	ldr	pc, [ip, #2336]!	; 0x920

0001274c <coda_cursor_get_type@plt>:
   1274c:	add	ip, pc, #0, 12
   12750:	add	ip, ip, #106496	; 0x1a000
   12754:	ldr	pc, [ip, #2328]!	; 0x918

00012758 <memcpy@plt>:
   12758:	add	ip, pc, #0, 12
   1275c:	add	ip, ip, #106496	; 0x1a000
   12760:	ldr	pc, [ip, #2320]!	; 0x910

00012764 <coda_isInf@plt>:
   12764:	add	ip, pc, #0, 12
   12768:	add	ip, ip, #106496	; 0x1a000
   1276c:	ldr	pc, [ip, #2312]!	; 0x908

00012770 <coda_type_get_bit_size@plt>:
   12770:	add	ip, pc, #0, 12
   12774:	add	ip, ip, #106496	; 0x1a000
   12778:	ldr	pc, [ip, #2304]!	; 0x900

0001277c <coda_type_get_record_field_available_status@plt>:
   1277c:	add	ip, pc, #0, 12
   12780:	add	ip, ip, #106496	; 0x1a000
   12784:	ldr	pc, [ip, #2296]!	; 0x8f8

00012788 <coda_cursor_has_attributes@plt>:
   12788:	add	ip, pc, #0, 12
   1278c:	add	ip, ip, #106496	; 0x1a000
   12790:	ldr	pc, [ip, #2288]!	; 0x8f0

00012794 <coda_cursor_get_type_class@plt>:
   12794:	add	ip, pc, #0, 12
   12798:	add	ip, ip, #106496	; 0x1a000
   1279c:	ldr	pc, [ip, #2280]!	; 0x8e8

000127a0 <coda_set_definition_path@plt>:
   127a0:	add	ip, pc, #0, 12
   127a4:	add	ip, ip, #106496	; 0x1a000
   127a8:	ldr	pc, [ip, #2272]!	; 0x8e0

000127ac <coda_get_product_format@plt>:
   127ac:	add	ip, pc, #0, 12
   127b0:	add	ip, ip, #106496	; 0x1a000
   127b4:	ldr	pc, [ip, #2264]!	; 0x8d8

000127b8 <coda_type_get_unit@plt>:
   127b8:	add	ip, pc, #0, 12
   127bc:	add	ip, ip, #106496	; 0x1a000
   127c0:	ldr	pc, [ip, #2256]!	; 0x8d0

000127c4 <coda_type_get_description@plt>:
   127c4:	add	ip, pc, #0, 12
   127c8:	add	ip, ip, #106496	; 0x1a000
   127cc:	ldr	pc, [ip, #2248]!	; 0x8c8

000127d0 <coda_cursor_get_special_type@plt>:
   127d0:	add	ip, pc, #0, 12
   127d4:	add	ip, ip, #106496	; 0x1a000
   127d8:	ldr	pc, [ip, #2240]!	; 0x8c0

000127dc <coda_cursor_goto_first_array_element@plt>:
   127dc:	add	ip, pc, #0, 12
   127e0:	add	ip, ip, #106496	; 0x1a000
   127e4:	ldr	pc, [ip, #2232]!	; 0x8b8

000127e8 <fwrite@plt>:
   127e8:	add	ip, pc, #0, 12
   127ec:	add	ip, ip, #106496	; 0x1a000
   127f0:	ldr	pc, [ip, #2224]!	; 0x8b0

000127f4 <coda_cursor_set_product@plt>:
   127f4:	add	ip, pc, #0, 12
   127f8:	add	ip, ip, #106496	; 0x1a000
   127fc:	ldr	pc, [ip, #2216]!	; 0x8a8

00012800 <coda_cursor_goto_first_record_field@plt>:
   12800:	add	ip, pc, #0, 12
   12804:	add	ip, ip, #106496	; 0x1a000
   12808:	ldr	pc, [ip, #2208]!	; 0x8a0

0001280c <coda_cursor_goto_record_field_by_index@plt>:
   1280c:	add	ip, pc, #0, 12
   12810:	add	ip, ip, #106496	; 0x1a000
   12814:	ldr	pc, [ip, #2200]!	; 0x898

00012818 <coda_done@plt>:
   12818:	add	ip, pc, #0, 12
   1281c:	add	ip, ip, #106496	; 0x1a000
   12820:	ldr	pc, [ip, #2192]!	; 0x890

00012824 <puts@plt>:
   12824:	add	ip, pc, #0, 12
   12828:	add	ip, ip, #106496	; 0x1a000
   1282c:	ldr	pc, [ip, #2184]!	; 0x888

00012830 <coda_cursor_get_read_type@plt>:
   12830:	add	ip, pc, #0, 12
   12834:	add	ip, ip, #106496	; 0x1a000
   12838:	ldr	pc, [ip, #2176]!	; 0x880

0001283c <malloc@plt>:
   1283c:	add	ip, pc, #0, 12
   12840:	add	ip, ip, #106496	; 0x1a000
   12844:	ldr	pc, [ip, #2168]!	; 0x878

00012848 <__libc_start_main@plt>:
   12848:	add	ip, pc, #0, 12
   1284c:	add	ip, ip, #106496	; 0x1a000
   12850:	ldr	pc, [ip, #2160]!	; 0x870

00012854 <__gmon_start__@plt>:
   12854:	add	ip, pc, #0, 12
   12858:	add	ip, ip, #106496	; 0x1a000
   1285c:	ldr	pc, [ip, #2152]!	; 0x868

00012860 <coda_cursor_read_string@plt>:
   12860:	add	ip, pc, #0, 12
   12864:	add	ip, ip, #106496	; 0x1a000
   12868:	ldr	pc, [ip, #2144]!	; 0x860

0001286c <coda_cursor_goto_parent@plt>:
   1286c:	add	ip, pc, #0, 12
   12870:	add	ip, ip, #106496	; 0x1a000
   12874:	ldr	pc, [ip, #2136]!	; 0x858

00012878 <coda_type_get_num_record_fields@plt>:
   12878:	add	ip, pc, #0, 12
   1287c:	add	ip, ip, #106496	; 0x1a000
   12880:	ldr	pc, [ip, #2128]!	; 0x850

00012884 <exit@plt>:
   12884:	add	ip, pc, #0, 12
   12888:	add	ip, ip, #106496	; 0x1a000
   1288c:	ldr	pc, [ip, #2120]!	; 0x848

00012890 <coda_type_get_read_type@plt>:
   12890:	add	ip, pc, #0, 12
   12894:	add	ip, ip, #106496	; 0x1a000
   12898:	ldr	pc, [ip, #2112]!	; 0x840

0001289c <coda_cursor_get_string_length@plt>:
   1289c:	add	ip, pc, #0, 12
   128a0:	add	ip, ip, #106496	; 0x1a000
   128a4:	ldr	pc, [ip, #2104]!	; 0x838

000128a8 <coda_cursor_read_uint64@plt>:
   128a8:	add	ip, pc, #0, 12
   128ac:	add	ip, ip, #106496	; 0x1a000
   128b0:	ldr	pc, [ip, #2096]!	; 0x830

000128b4 <coda_cursor_read_double@plt>:
   128b4:	add	ip, pc, #0, 12
   128b8:	add	ip, ip, #106496	; 0x1a000
   128bc:	ldr	pc, [ip, #2088]!	; 0x828

000128c0 <coda_isNaN@plt>:
   128c0:	add	ip, pc, #0, 12
   128c4:	add	ip, ip, #106496	; 0x1a000
   128c8:	ldr	pc, [ip, #2080]!	; 0x820

000128cc <fprintf@plt>:
   128cc:	add	ip, pc, #0, 12
   128d0:	add	ip, ip, #106496	; 0x1a000
   128d4:	ldr	pc, [ip, #2072]!	; 0x818

000128d8 <coda_cursor_goto_next_array_element@plt>:
   128d8:	add	ip, pc, #0, 12
   128dc:	add	ip, ip, #106496	; 0x1a000
   128e0:	ldr	pc, [ip, #2064]!	; 0x810

000128e4 <coda_open_as@plt>:
   128e4:	add	ip, pc, #0, 12
   128e8:	add	ip, ip, #106496	; 0x1a000
   128ec:	ldr	pc, [ip, #2056]!	; 0x808

000128f0 <coda_init@plt>:
   128f0:	add	ip, pc, #0, 12
   128f4:	add	ip, ip, #106496	; 0x1a000
   128f8:	ldr	pc, [ip, #2048]!	; 0x800

000128fc <coda_set_option_perform_conversions@plt>:
   128fc:	add	ip, pc, #0, 12
   12900:	add	ip, ip, #106496	; 0x1a000
   12904:	ldr	pc, [ip, #2040]!	; 0x7f8

00012908 <coda_cursor_goto_attributes@plt>:
   12908:	add	ip, pc, #0, 12
   1290c:	add	ip, ip, #106496	; 0x1a000
   12910:	ldr	pc, [ip, #2032]!	; 0x7f0

00012914 <coda_cursor_read_char@plt>:
   12914:	add	ip, pc, #0, 12
   12918:	add	ip, ip, #106496	; 0x1a000
   1291c:	ldr	pc, [ip, #2024]!	; 0x7e8

00012920 <memset@plt>:
   12920:	add	ip, pc, #0, 12
   12924:	add	ip, ip, #106496	; 0x1a000
   12928:	ldr	pc, [ip, #2016]!	; 0x7e0

0001292c <putchar@plt>:
   1292c:	add	ip, pc, #0, 12
   12930:	add	ip, ip, #106496	; 0x1a000
   12934:	ldr	pc, [ip, #2008]!	; 0x7d8

00012938 <strncpy@plt>:
   12938:	add	ip, pc, #0, 12
   1293c:	add	ip, ip, #106496	; 0x1a000
   12940:	ldr	pc, [ip, #2000]!	; 0x7d0

00012944 <coda_type_get_special_type@plt>:
   12944:	add	ip, pc, #0, 12
   12948:	add	ip, ip, #106496	; 0x1a000
   1294c:	ldr	pc, [ip, #1992]!	; 0x7c8

00012950 <coda_type_get_record_union_status@plt>:
   12950:	add	ip, pc, #0, 12
   12954:	add	ip, ip, #106496	; 0x1a000
   12958:	ldr	pc, [ip, #1984]!	; 0x7c0

0001295c <coda_cursor_read_complex_double_split@plt>:
   1295c:	add	ip, pc, #0, 12
   12960:	add	ip, ip, #106496	; 0x1a000
   12964:	ldr	pc, [ip, #1976]!	; 0x7b8

00012968 <coda_type_get_array_base_type@plt>:
   12968:	add	ip, pc, #0, 12
   1296c:	add	ip, ip, #106496	; 0x1a000
   12970:	ldr	pc, [ip, #1968]!	; 0x7b0

00012974 <fclose@plt>:
   12974:	add	ip, pc, #0, 12
   12978:	add	ip, ip, #106496	; 0x1a000
   1297c:	ldr	pc, [ip, #1960]!	; 0x7a8

00012980 <coda_type_get_string_length@plt>:
   12980:	add	ip, pc, #0, 12
   12984:	add	ip, ip, #106496	; 0x1a000
   12988:	ldr	pc, [ip, #1952]!	; 0x7a0

0001298c <coda_type_get_native_type_name@plt>:
   1298c:	add	ip, pc, #0, 12
   12990:	add	ip, ip, #106496	; 0x1a000
   12994:	ldr	pc, [ip, #1944]!	; 0x798

00012998 <coda_cursor_get_array_dim@plt>:
   12998:	add	ip, pc, #0, 12
   1299c:	add	ip, ip, #106496	; 0x1a000
   129a0:	ldr	pc, [ip, #1936]!	; 0x790

000129a4 <coda_cursor_has_ascii_content@plt>:
   129a4:	add	ip, pc, #0, 12
   129a8:	add	ip, ip, #106496	; 0x1a000
   129ac:	ldr	pc, [ip, #1928]!	; 0x788

000129b0 <coda_close@plt>:
   129b0:	add	ip, pc, #0, 12
   129b4:	add	ip, ip, #106496	; 0x1a000
   129b8:	ldr	pc, [ip, #1920]!	; 0x780

000129bc <coda_cursor_read_int64@plt>:
   129bc:	add	ip, pc, #0, 12
   129c0:	add	ip, ip, #106496	; 0x1a000
   129c4:	ldr	pc, [ip, #1912]!	; 0x778

000129c8 <vfprintf@plt>:
   129c8:	add	ip, pc, #0, 12
   129cc:	add	ip, ip, #106496	; 0x1a000
   129d0:	ldr	pc, [ip, #1904]!	; 0x770

000129d4 <coda_cursor_goto@plt>:
   129d4:	add	ip, pc, #0, 12
   129d8:	add	ip, ip, #106496	; 0x1a000
   129dc:	ldr	pc, [ip, #1896]!	; 0x768

000129e0 <coda_type_get_record_field_index_from_name@plt>:
   129e0:	add	ip, pc, #0, 12
   129e4:	add	ip, ip, #106496	; 0x1a000
   129e8:	ldr	pc, [ip, #1888]!	; 0x760

000129ec <coda_cursor_read_complex_double_pair@plt>:
   129ec:	add	ip, pc, #0, 12
   129f0:	add	ip, ip, #106496	; 0x1a000
   129f4:	ldr	pc, [ip, #1880]!	; 0x758

000129f8 <coda_cursor_goto_next_record_field@plt>:
   129f8:	add	ip, pc, #0, 12
   129fc:	add	ip, ip, #106496	; 0x1a000
   12a00:	ldr	pc, [ip, #1872]!	; 0x750

00012a04 <fputc@plt>:
   12a04:	add	ip, pc, #0, 12
   12a08:	add	ip, ip, #106496	; 0x1a000
   12a0c:	ldr	pc, [ip, #1864]!	; 0x748

00012a10 <coda_type_get_array_dim@plt>:
   12a10:	add	ip, pc, #0, 12
   12a14:	add	ip, ip, #106496	; 0x1a000
   12a18:	ldr	pc, [ip, #1856]!	; 0x740

00012a1c <coda_cursor_get_bit_size@plt>:
   12a1c:	add	ip, pc, #0, 12
   12a20:	add	ip, ip, #106496	; 0x1a000
   12a24:	ldr	pc, [ip, #1848]!	; 0x738

00012a28 <coda_errno_to_string@plt>:
   12a28:	add	ip, pc, #0, 12
   12a2c:	add	ip, ip, #106496	; 0x1a000
   12a30:	ldr	pc, [ip, #1840]!	; 0x730

00012a34 <coda_cursor_use_base_type_of_special_type@plt>:
   12a34:	add	ip, pc, #0, 12
   12a38:	add	ip, ip, #106496	; 0x1a000
   12a3c:	ldr	pc, [ip, #1832]!	; 0x728

00012a40 <coda_cursor_get_available_union_field_index@plt>:
   12a40:	add	ip, pc, #0, 12
   12a44:	add	ip, ip, #106496	; 0x1a000
   12a48:	ldr	pc, [ip, #1824]!	; 0x720

00012a4c <coda_cursor_read_int32@plt>:
   12a4c:	add	ip, pc, #0, 12
   12a50:	add	ip, ip, #106496	; 0x1a000
   12a54:	ldr	pc, [ip, #1816]!	; 0x718

00012a58 <coda_cursor_get_file_bit_offset@plt>:
   12a58:	add	ip, pc, #0, 12
   12a5c:	add	ip, ip, #106496	; 0x1a000
   12a60:	ldr	pc, [ip, #1808]!	; 0x710

00012a64 <coda_get_libcoda_version@plt>:
   12a64:	add	ip, pc, #0, 12
   12a68:	add	ip, ip, #106496	; 0x1a000
   12a6c:	ldr	pc, [ip, #1800]!	; 0x708

00012a70 <coda_get_errno@plt>:
   12a70:	add	ip, pc, #0, 12
   12a74:	add	ip, ip, #106496	; 0x1a000
   12a78:	ldr	pc, [ip, #1792]!	; 0x700

00012a7c <coda_type_get_special_base_type@plt>:
   12a7c:	add	ip, pc, #0, 12
   12a80:	add	ip, ip, #106496	; 0x1a000
   12a84:	ldr	pc, [ip, #1784]!	; 0x6f8

00012a88 <coda_type_get_record_field_name@plt>:
   12a88:	add	ip, pc, #0, 12
   12a8c:	add	ip, ip, #106496	; 0x1a000
   12a90:	ldr	pc, [ip, #1776]!	; 0x6f0

00012a94 <fputs@plt>:
   12a94:	add	ip, pc, #0, 12
   12a98:	add	ip, ip, #106496	; 0x1a000
   12a9c:	ldr	pc, [ip, #1768]!	; 0x6e8

00012aa0 <abort@plt>:
   12aa0:	add	ip, pc, #0, 12
   12aa4:	add	ip, ip, #106496	; 0x1a000
   12aa8:	ldr	pc, [ip, #1760]!	; 0x6e0

00012aac <coda_cursor_read_bits@plt>:
   12aac:	add	ip, pc, #0, 12
   12ab0:	add	ip, ip, #106496	; 0x1a000
   12ab4:	ldr	pc, [ip, #1752]!	; 0x6d8

00012ab8 <coda_str64@plt>:
   12ab8:	add	ip, pc, #0, 12
   12abc:	add	ip, ip, #106496	; 0x1a000
   12ac0:	ldr	pc, [ip, #1744]!	; 0x6d0

00012ac4 <__assert_fail@plt>:
   12ac4:	add	ip, pc, #0, 12
   12ac8:	add	ip, ip, #106496	; 0x1a000
   12acc:	ldr	pc, [ip, #1736]!	; 0x6c8

00012ad0 <coda_type_get_class@plt>:
   12ad0:	add	ip, pc, #0, 12
   12ad4:	add	ip, ip, #106496	; 0x1a000
   12ad8:	ldr	pc, [ip, #1728]!	; 0x6c0

Disassembly of section .text:

00012adc <_start@@Base>:
   12adc:	mov	fp, #0
   12ae0:	mov	lr, #0
   12ae4:	pop	{r1}		; (ldr r1, [sp], #4)
   12ae8:	mov	r2, sp
   12aec:	push	{r2}		; (str r2, [sp, #-4]!)
   12af0:	push	{r0}		; (str r0, [sp, #-4]!)
   12af4:	ldr	ip, [pc, #16]	; 12b0c <_start@@Base+0x30>
   12af8:	push	{ip}		; (str ip, [sp, #-4]!)
   12afc:	ldr	r0, [pc, #12]	; 12b10 <_start@@Base+0x34>
   12b00:	ldr	r3, [pc, #12]	; 12b14 <_start@@Base+0x38>
   12b04:	bl	12848 <__libc_start_main@plt>
   12b08:	bl	12aa0 <abort@plt>
   12b0c:	andeq	sl, r1, r8, asr #16
   12b10:	andeq	r8, r1, ip, lsl #20
   12b14:	andeq	sl, r1, r8, ror #15
   12b18:	ldr	r3, [pc, #20]	; 12b34 <_start@@Base+0x58>
   12b1c:	ldr	r2, [pc, #20]	; 12b38 <_start@@Base+0x5c>
   12b20:	add	r3, pc, r3
   12b24:	ldr	r2, [r3, r2]
   12b28:	cmp	r2, #0
   12b2c:	bxeq	lr
   12b30:	b	12854 <__gmon_start__@plt>
   12b34:	ldrdeq	sl, [r1], -r8
   12b38:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   12b3c:	ldr	r0, [pc, #24]	; 12b5c <_start@@Base+0x80>
   12b40:	ldr	r3, [pc, #24]	; 12b60 <_start@@Base+0x84>
   12b44:	cmp	r3, r0
   12b48:	bxeq	lr
   12b4c:	ldr	r3, [pc, #16]	; 12b64 <_start@@Base+0x88>
   12b50:	cmp	r3, #0
   12b54:	bxeq	lr
   12b58:	bx	r3
   12b5c:	andeq	sp, r2, r0, lsl #4
   12b60:	andeq	sp, r2, r0, lsl #4
   12b64:	andeq	r0, r0, r0
   12b68:	ldr	r0, [pc, #36]	; 12b94 <_start@@Base+0xb8>
   12b6c:	ldr	r1, [pc, #36]	; 12b98 <_start@@Base+0xbc>
   12b70:	sub	r1, r1, r0
   12b74:	asr	r1, r1, #2
   12b78:	add	r1, r1, r1, lsr #31
   12b7c:	asrs	r1, r1, #1
   12b80:	bxeq	lr
   12b84:	ldr	r3, [pc, #16]	; 12b9c <_start@@Base+0xc0>
   12b88:	cmp	r3, #0
   12b8c:	bxeq	lr
   12b90:	bx	r3
   12b94:	andeq	sp, r2, r0, lsl #4
   12b98:	andeq	sp, r2, r0, lsl #4
   12b9c:	andeq	r0, r0, r0
   12ba0:	push	{r4, lr}
   12ba4:	ldr	r4, [pc, #24]	; 12bc4 <_start@@Base+0xe8>
   12ba8:	ldrb	r3, [r4]
   12bac:	cmp	r3, #0
   12bb0:	popne	{r4, pc}
   12bb4:	bl	12b3c <_start@@Base+0x60>
   12bb8:	mov	r3, #1
   12bbc:	strb	r3, [r4]
   12bc0:	pop	{r4, pc}
   12bc4:	andeq	sp, r2, r0, lsl #4
   12bc8:	b	12b68 <_start@@Base+0x8c>

00012bcc <export_data_element_to_ascii@@Base>:
   12bcc:	push	{r4, sl, fp, lr}
   12bd0:	add	fp, sp, #8
   12bd4:	ldr	r0, [pc, #172]	; 12c88 <export_data_element_to_ascii@@Base+0xbc>
   12bd8:	add	r0, pc, r0
   12bdc:	ldrb	r1, [r0]
   12be0:	cmp	r1, #0
   12be4:	beq	12c00 <export_data_element_to_ascii@@Base+0x34>
   12be8:	ldr	r0, [pc, #156]	; 12c8c <export_data_element_to_ascii@@Base+0xc0>
   12bec:	ldr	r0, [pc, r0]
   12bf0:	ldr	r1, [r0]
   12bf4:	mov	r0, #10
   12bf8:	bl	12a04 <fputc@plt>
   12bfc:	b	12c08 <export_data_element_to_ascii@@Base+0x3c>
   12c00:	mov	r1, #1
   12c04:	strb	r1, [r0]
   12c08:	ldr	r0, [pc, #128]	; 12c90 <export_data_element_to_ascii@@Base+0xc4>
   12c0c:	ldr	r0, [pc, r0]
   12c10:	ldr	r0, [r0]
   12c14:	cmp	r0, #0
   12c18:	beq	12c40 <export_data_element_to_ascii@@Base+0x74>
   12c1c:	ldr	r4, [pc, #112]	; 12c94 <export_data_element_to_ascii@@Base+0xc8>
   12c20:	mov	r1, #2
   12c24:	mov	r2, #0
   12c28:	ldr	r4, [pc, r4]
   12c2c:	ldr	r0, [r4]
   12c30:	bl	16ea0 <print_full_field_name@@Base>
   12c34:	ldr	r1, [r4]
   12c38:	mov	r0, #10
   12c3c:	bl	12a04 <fputc@plt>
   12c40:	ldr	r0, [pc, #80]	; 12c98 <export_data_element_to_ascii@@Base+0xcc>
   12c44:	ldr	r0, [pc, r0]
   12c48:	ldr	r1, [r0]
   12c4c:	cmp	r1, #1
   12c50:	blt	12c68 <export_data_element_to_ascii@@Base+0x9c>
   12c54:	add	r0, r0, r1, lsl #3
   12c58:	ldr	r1, [r0, #296]	; 0x128
   12c5c:	ldr	r0, [r0, #300]	; 0x12c
   12c60:	orrs	r0, r1, r0
   12c64:	popeq	{r4, sl, fp, pc}
   12c68:	ldr	r0, [pc, #44]	; 12c9c <export_data_element_to_ascii@@Base+0xd0>
   12c6c:	mov	r1, #0
   12c70:	mov	r2, #0
   12c74:	mov	r3, #0
   12c78:	ldr	r0, [pc, r0]
   12c7c:	ldr	r0, [r0]
   12c80:	pop	{r4, sl, fp, lr}
   12c84:	b	12ca0 <export_data_element_to_ascii@@Base+0xd4>
   12c88:	andeq	sl, r1, r4, lsr #12
   12c8c:	andeq	sl, r1, r8, asr #11
   12c90:	ldrdeq	sl, [r1], -r4
   12c94:	andeq	sl, r1, ip, lsl #11
   12c98:	muleq	r1, r8, r5
   12c9c:	andeq	sl, r1, ip, lsr r5
   12ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ca4:	add	fp, sp, #28
   12ca8:	sub	sp, sp, #116	; 0x74
   12cac:	str	r3, [sp, #52]	; 0x34
   12cb0:	str	r2, [sp, #40]	; 0x28
   12cb4:	mov	r8, r0
   12cb8:	mov	r6, r1
   12cbc:	ldr	r9, [pc, #2552]	; 136bc <export_data_element_to_ascii@@Base+0xaf0>
   12cc0:	ldr	r9, [pc, r9]
   12cc4:	add	r5, r9, r1, lsl #2
   12cc8:	sub	r1, fp, #52	; 0x34
   12ccc:	ldr	r0, [r5, #8]!
   12cd0:	bl	12ad0 <coda_type_get_class@plt>
   12cd4:	cmp	r0, #0
   12cd8:	beq	12ce0 <export_data_element_to_ascii@@Base+0x114>
   12cdc:	bl	189c0 <handle_coda_error@@Base>
   12ce0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12ce4:	cmp	r0, #0
   12ce8:	beq	12dcc <export_data_element_to_ascii@@Base+0x200>
   12cec:	cmp	r0, #1
   12cf0:	bne	12e38 <export_data_element_to_ascii@@Base+0x26c>
   12cf4:	ldr	r2, [sp, #40]	; 0x28
   12cf8:	add	r0, r2, r2, lsl #2
   12cfc:	cmp	r2, #0
   12d00:	add	sl, r9, r0, lsl #4
   12d04:	moveq	r0, #0
   12d08:	ldr	r1, [sl, #800]	; 0x320
   12d0c:	streq	r0, [r9, #844]	; 0x34c
   12d10:	mov	r2, sl
   12d14:	ldr	r0, [r2, #804]!	; 0x324
   12d18:	str	r2, [sp, #24]
   12d1c:	ldr	r2, [pc, #2460]	; 136c0 <export_data_element_to_ascii@@Base+0xaf4>
   12d20:	add	r3, r0, r1
   12d24:	ldr	r2, [pc, r2]
   12d28:	str	r3, [sp, #32]
   12d2c:	ldr	r7, [r2, #104]	; 0x68
   12d30:	cmp	r7, r3
   12d34:	str	r7, [sp, #28]
   12d38:	blt	12d60 <export_data_element_to_ascii@@Base+0x194>
   12d3c:	ldr	r3, [r9, #3360]	; 0xd20
   12d40:	ldr	r7, [sp, #40]	; 0x28
   12d44:	sub	r3, r3, #1
   12d48:	cmp	r3, r7
   12d4c:	ble	12d60 <export_data_element_to_ascii@@Base+0x194>
   12d50:	ldr	r3, [sl, #840]	; 0x348
   12d54:	ldr	r7, [sl, #844]	; 0x34c
   12d58:	mul	r3, r3, r7
   12d5c:	str	r3, [sl, #924]	; 0x39c
   12d60:	cmp	r0, #1
   12d64:	str	r6, [sp, #16]
   12d68:	blt	12ff8 <export_data_element_to_ascii@@Base+0x42c>
   12d6c:	add	r1, r2, r1, lsl #2
   12d70:	add	r2, sl, #848	; 0x350
   12d74:	add	r3, sl, #844	; 0x34c
   12d78:	mov	r9, #1
   12d7c:	mov	ip, #0
   12d80:	add	r4, sp, #56	; 0x38
   12d84:	mov	r6, #0
   12d88:	b	12dac <export_data_element_to_ascii@@Base+0x1e0>
   12d8c:	add	r5, r5, #4
   12d90:	ldr	r7, [r5]
   12d94:	str	ip, [r2, r6]
   12d98:	subs	r0, r0, #1
   12d9c:	mul	r9, r7, r9
   12da0:	str	r7, [r4, r6]
   12da4:	add	r6, r6, #4
   12da8:	beq	12fe8 <export_data_element_to_ascii@@Base+0x41c>
   12dac:	add	r5, r1, r6
   12db0:	ldr	r7, [r5, #72]	; 0x48
   12db4:	cmp	r7, #0
   12db8:	beq	12d8c <export_data_element_to_ascii@@Base+0x1c0>
   12dbc:	ldr	r7, [r5, #108]	; 0x6c
   12dc0:	ldr	r5, [r3]
   12dc4:	add	r5, r7, r5, lsl #2
   12dc8:	b	12d90 <export_data_element_to_ascii@@Base+0x1c4>
   12dcc:	ldr	r0, [sp, #52]	; 0x34
   12dd0:	add	r5, r9, #144	; 0x90
   12dd4:	add	r2, sp, #56	; 0x38
   12dd8:	add	r7, r9, r0, lsl #2
   12ddc:	mov	r0, r5
   12de0:	ldr	r1, [r7, #3492]!	; 0xda4
   12de4:	bl	126a4 <coda_cursor_get_record_field_available_status@plt>
   12de8:	cmp	r0, #0
   12dec:	beq	12df4 <export_data_element_to_ascii@@Base+0x228>
   12df0:	bl	189c0 <handle_coda_error@@Base>
   12df4:	ldr	r0, [sp, #56]	; 0x38
   12df8:	cmp	r0, #0
   12dfc:	beq	12ff0 <export_data_element_to_ascii@@Base+0x424>
   12e00:	ldr	r1, [r7]
   12e04:	mov	r0, r5
   12e08:	bl	1280c <coda_cursor_goto_record_field_by_index@plt>
   12e0c:	cmp	r0, #0
   12e10:	beq	12e18 <export_data_element_to_ascii@@Base+0x24c>
   12e14:	bl	189c0 <handle_coda_error@@Base>
   12e18:	ldr	r0, [sp, #52]	; 0x34
   12e1c:	ldr	r2, [sp, #40]	; 0x28
   12e20:	add	r1, r6, #1
   12e24:	add	r3, r0, #1
   12e28:	mov	r0, r8
   12e2c:	bl	12ca0 <export_data_element_to_ascii@@Base+0xd4>
   12e30:	mov	r0, r5
   12e34:	b	13138 <export_data_element_to_ascii@@Base+0x56c>
   12e38:	str	r5, [sp, #48]	; 0x30
   12e3c:	ldr	r0, [pc, #2188]	; 136d0 <export_data_element_to_ascii@@Base+0xb04>
   12e40:	ldr	r0, [pc, r0]
   12e44:	ldr	r0, [r0]
   12e48:	cmp	r0, #0
   12e4c:	beq	12f28 <export_data_element_to_ascii@@Base+0x35c>
   12e50:	ldr	r0, [r9, #136]	; 0x88
   12e54:	cmp	r0, #1
   12e58:	blt	12f28 <export_data_element_to_ascii@@Base+0x35c>
   12e5c:	ldr	r5, [pc, #2160]	; 136d4 <export_data_element_to_ascii@@Base+0xb08>
   12e60:	mov	r7, #0
   12e64:	add	r4, sp, #56	; 0x38
   12e68:	mov	r0, #0
   12e6c:	ldr	r5, [pc, r5]
   12e70:	ldr	r6, [pc, #2144]	; 136d8 <export_data_element_to_ascii@@Base+0xb0c>
   12e74:	str	r0, [sp, #52]	; 0x34
   12e78:	add	r6, pc, r6
   12e7c:	b	12eb0 <export_data_element_to_ascii@@Base+0x2e4>
   12e80:	ldr	r0, [sp, #52]	; 0x34
   12e84:	mov	r8, sl
   12e88:	add	r0, r0, #1
   12e8c:	str	r0, [sp, #52]	; 0x34
   12e90:	ldr	r4, [pc, #2116]	; 136dc <export_data_element_to_ascii@@Base+0xb10>
   12e94:	ldr	r4, [pc, r4]
   12e98:	mov	r9, r4
   12e9c:	add	r4, sp, #56	; 0x38
   12ea0:	ldr	r0, [r9, #136]	; 0x88
   12ea4:	add	r7, r7, #1
   12ea8:	cmp	r7, r0
   12eac:	bge	12f28 <export_data_element_to_ascii@@Base+0x35c>
   12eb0:	add	r0, r9, r7, lsl #2
   12eb4:	mov	r1, r4
   12eb8:	ldr	r0, [r0, #8]
   12ebc:	bl	12ad0 <coda_type_get_class@plt>
   12ec0:	cmp	r0, #0
   12ec4:	beq	12ecc <export_data_element_to_ascii@@Base+0x300>
   12ec8:	bl	189c0 <handle_coda_error@@Base>
   12ecc:	ldr	r0, [sp, #56]	; 0x38
   12ed0:	cmp	r0, #1
   12ed4:	bne	12ea0 <export_data_element_to_ascii@@Base+0x2d4>
   12ed8:	ldr	r0, [sp, #52]	; 0x34
   12edc:	mov	sl, r8
   12ee0:	add	r0, r0, r0, lsl #2
   12ee4:	add	r0, r9, r0, lsl #4
   12ee8:	mov	r4, r0
   12eec:	ldr	r1, [r4, #804]!	; 0x324
   12ef0:	cmp	r1, #1
   12ef4:	blt	12e80 <export_data_element_to_ascii@@Base+0x2b4>
   12ef8:	add	r8, r0, #848	; 0x350
   12efc:	mov	r9, #0
   12f00:	ldr	r2, [r8, r9, lsl #2]
   12f04:	ldr	r3, [r5]
   12f08:	mov	r0, sl
   12f0c:	mov	r1, r6
   12f10:	bl	128cc <fprintf@plt>
   12f14:	ldr	r0, [r4]
   12f18:	add	r9, r9, #1
   12f1c:	cmp	r9, r0
   12f20:	blt	12f00 <export_data_element_to_ascii@@Base+0x334>
   12f24:	b	12e80 <export_data_element_to_ascii@@Base+0x2b4>
   12f28:	ldr	r5, [sp, #48]	; 0x30
   12f2c:	sub	r1, fp, #32
   12f30:	ldr	r0, [r5]
   12f34:	bl	12ad0 <coda_type_get_class@plt>
   12f38:	cmp	r0, #0
   12f3c:	beq	12f44 <export_data_element_to_ascii@@Base+0x378>
   12f40:	bl	189c0 <handle_coda_error@@Base>
   12f44:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12f48:	sub	r1, r0, #2
   12f4c:	cmp	r1, #4
   12f50:	bcs	13144 <export_data_element_to_ascii@@Base+0x578>
   12f54:	ldr	r0, [r5]
   12f58:	sub	r1, fp, #36	; 0x24
   12f5c:	bl	12890 <coda_type_get_read_type@plt>
   12f60:	cmp	r0, #0
   12f64:	beq	12f6c <export_data_element_to_ascii@@Base+0x3a0>
   12f68:	bl	189c0 <handle_coda_error@@Base>
   12f6c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12f70:	add	r0, r0, #1
   12f74:	cmp	r0, #13
   12f78:	bhi	1365c <export_data_element_to_ascii@@Base+0xa90>
   12f7c:	add	r1, pc, #4
   12f80:	ldr	r0, [r1, r0, lsl #2]
   12f84:	add	pc, r1, r0
   12f88:	andeq	r0, r0, r4, lsl r7
   12f8c:	andeq	r0, r0, r8, lsr r0
   12f90:			; <UNDEFINED> instruction: 0x000002b0
   12f94:	andeq	r0, r0, r8, lsr r0
   12f98:			; <UNDEFINED> instruction: 0x000002b0
   12f9c:	andeq	r0, r0, r8, lsr r0
   12fa0:			; <UNDEFINED> instruction: 0x000002b0
   12fa4:	andeq	r0, r0, r8, ror #6
   12fa8:	andeq	r0, r0, ip, lsl r6
   12fac:	andeq	r0, r0, r0, ror #5
   12fb0:	andeq	r0, r0, r0, ror #5
   12fb4:	andeq	r0, r0, r8, asr r6
   12fb8:	muleq	r0, r8, r3
   12fbc:	andeq	r0, r0, r8, asr #8
   12fc0:	add	r0, r9, #144	; 0x90
   12fc4:	add	r1, sp, #56	; 0x38
   12fc8:	bl	12a4c <coda_cursor_read_int32@plt>
   12fcc:	cmp	r0, #0
   12fd0:	beq	12fd8 <export_data_element_to_ascii@@Base+0x40c>
   12fd4:	bl	189c0 <handle_coda_error@@Base>
   12fd8:	ldr	r2, [sp, #56]	; 0x38
   12fdc:	ldr	r1, [pc, #1868]	; 13730 <export_data_element_to_ascii@@Base+0xb64>
   12fe0:	add	r1, pc, r1
   12fe4:	b	1325c <export_data_element_to_ascii@@Base+0x690>
   12fe8:	cmp	r9, #0
   12fec:	bne	12ffc <export_data_element_to_ascii@@Base+0x430>
   12ff0:	sub	sp, fp, #28
   12ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ff8:	mov	r9, #1
   12ffc:	ldr	r0, [pc, #1728]	; 136c4 <export_data_element_to_ascii@@Base+0xaf8>
   13000:	ldr	r0, [pc, r0]
   13004:	add	r0, r0, #144	; 0x90
   13008:	str	r0, [sp, #36]	; 0x24
   1300c:	bl	127dc <coda_cursor_goto_first_array_element@plt>
   13010:	cmp	r0, #0
   13014:	beq	1301c <export_data_element_to_ascii@@Base+0x450>
   13018:	bl	189c0 <handle_coda_error@@Base>
   1301c:	cmp	r9, #1
   13020:	blt	13134 <export_data_element_to_ascii@@Base+0x568>
   13024:	add	r0, sl, #924	; 0x39c
   13028:	mov	r4, r8
   1302c:	add	r8, sl, #844	; 0x34c
   13030:	mov	r7, #0
   13034:	mov	r5, #0
   13038:	str	r0, [sp, #20]
   1303c:	add	r0, sp, #56	; 0x38
   13040:	sub	sl, r0, #4
   13044:	sub	r0, r9, #1
   13048:	str	r0, [sp, #48]	; 0x30
   1304c:	ldr	r0, [sp, #40]	; 0x28
   13050:	add	r0, r0, #1
   13054:	str	r0, [sp, #44]	; 0x2c
   13058:	ldr	r0, [sp, #16]
   1305c:	add	r6, r0, #1
   13060:	b	13070 <export_data_element_to_ascii@@Base+0x4a4>
   13064:	add	r5, r5, #1
   13068:	cmp	r5, r9
   1306c:	beq	13134 <export_data_element_to_ascii@@Base+0x568>
   13070:	ldr	r2, [sp, #44]	; 0x2c
   13074:	ldr	r3, [sp, #52]	; 0x34
   13078:	mov	r0, r4
   1307c:	mov	r1, r6
   13080:	bl	12ca0 <export_data_element_to_ascii@@Base+0xd4>
   13084:	ldr	r0, [sp, #48]	; 0x30
   13088:	cmp	r5, r0
   1308c:	bge	13064 <export_data_element_to_ascii@@Base+0x498>
   13090:	ldr	r0, [sp, #36]	; 0x24
   13094:	bl	128d8 <coda_cursor_goto_next_array_element@plt>
   13098:	cmp	r0, #0
   1309c:	beq	130a4 <export_data_element_to_ascii@@Base+0x4d8>
   130a0:	bl	189c0 <handle_coda_error@@Base>
   130a4:	ldr	r0, [sp, #32]
   130a8:	ldr	r1, [sp, #28]
   130ac:	cmp	r1, r0
   130b0:	blt	130e0 <export_data_element_to_ascii@@Base+0x514>
   130b4:	ldr	r0, [pc, #1548]	; 136c8 <export_data_element_to_ascii@@Base+0xafc>
   130b8:	ldr	r0, [pc, r0]
   130bc:	ldr	r1, [sp, #40]	; 0x28
   130c0:	ldr	r0, [r0, #3360]	; 0xd20
   130c4:	sub	r0, r0, #1
   130c8:	cmp	r0, r1
   130cc:	ble	130e0 <export_data_element_to_ascii@@Base+0x514>
   130d0:	ldr	r1, [sp, #20]
   130d4:	ldr	r0, [r1]
   130d8:	add	r0, r0, #1
   130dc:	str	r0, [r1]
   130e0:	ldr	r0, [pc, #1508]	; 136cc <export_data_element_to_ascii@@Base+0xb00>
   130e4:	ldr	r0, [pc, r0]
   130e8:	ldr	r0, [r0]
   130ec:	cmp	r0, #0
   130f0:	beq	13064 <export_data_element_to_ascii@@Base+0x498>
   130f4:	ldr	r0, [sp, #24]
   130f8:	ldr	r0, [r0]
   130fc:	cmp	r0, #1
   13100:	blt	13064 <export_data_element_to_ascii@@Base+0x498>
   13104:	ldr	r1, [r8, r0, lsl #2]
   13108:	ldr	r2, [sl, r0, lsl #2]
   1310c:	add	r1, r1, #1
   13110:	cmp	r1, r2
   13114:	str	r1, [r8, r0, lsl #2]
   13118:	bne	13064 <export_data_element_to_ascii@@Base+0x498>
   1311c:	sub	r1, r0, #1
   13120:	str	r7, [r8, r0, lsl #2]
   13124:	cmp	r1, #0
   13128:	mov	r0, r1
   1312c:	bgt	13104 <export_data_element_to_ascii@@Base+0x538>
   13130:	b	13064 <export_data_element_to_ascii@@Base+0x498>
   13134:	ldr	r0, [sp, #36]	; 0x24
   13138:	bl	1286c <coda_cursor_goto_parent@plt>
   1313c:	sub	sp, fp, #28
   13140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13144:	cmp	r0, #6
   13148:	beq	13174 <export_data_element_to_ascii@@Base+0x5a8>
   1314c:	cmp	r0, #2
   13150:	bcs	1365c <export_data_element_to_ascii@@Base+0xa90>
   13154:	ldr	r0, [pc, #1412]	; 136e0 <export_data_element_to_ascii@@Base+0xb14>
   13158:	ldr	r1, [pc, #1412]	; 136e4 <export_data_element_to_ascii@@Base+0xb18>
   1315c:	ldr	r3, [pc, #1412]	; 136e8 <export_data_element_to_ascii@@Base+0xb1c>
   13160:	mov	r2, #368	; 0x170
   13164:	add	r0, pc, r0
   13168:	add	r1, pc, r1
   1316c:	add	r3, pc, r3
   13170:	bl	12ac4 <__assert_fail@plt>
   13174:	ldr	r0, [r5]
   13178:	sub	r1, fp, #36	; 0x24
   1317c:	bl	12944 <coda_type_get_special_type@plt>
   13180:	cmp	r0, #0
   13184:	beq	1318c <export_data_element_to_ascii@@Base+0x5c0>
   13188:	bl	189c0 <handle_coda_error@@Base>
   1318c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13190:	sub	r1, r0, #1
   13194:	cmp	r1, #2
   13198:	bcs	132a4 <export_data_element_to_ascii@@Base+0x6d8>
   1319c:	add	r0, r9, #144	; 0x90
   131a0:	sub	r1, fp, #48	; 0x30
   131a4:	bl	128b4 <coda_cursor_read_double@plt>
   131a8:	cmp	r0, #0
   131ac:	beq	131b4 <export_data_element_to_ascii@@Base+0x5e8>
   131b0:	bl	189c0 <handle_coda_error@@Base>
   131b4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   131b8:	cmp	r0, #2
   131bc:	bne	1361c <export_data_element_to_ascii@@Base+0xa50>
   131c0:	ldr	r0, [pc, #1420]	; 13754 <export_data_element_to_ascii@@Base+0xb88>
   131c4:	ldr	r0, [pc, r0]
   131c8:	ldr	r0, [r0]
   131cc:	cmp	r0, #0
   131d0:	beq	1361c <export_data_element_to_ascii@@Base+0xa50>
   131d4:	vldr	d0, [fp, #-48]	; 0xffffffd0
   131d8:	bl	128c0 <coda_isNaN@plt>
   131dc:	cmp	r0, #0
   131e0:	bne	131f4 <export_data_element_to_ascii@@Base+0x628>
   131e4:	vldr	d0, [fp, #-48]	; 0xffffffd0
   131e8:	bl	12764 <coda_isInf@plt>
   131ec:	cmp	r0, #0
   131f0:	beq	13678 <export_data_element_to_ascii@@Base+0xaac>
   131f4:	ldr	r1, [pc, #1372]	; 13758 <export_data_element_to_ascii@@Base+0xb8c>
   131f8:	mov	r0, #11
   131fc:	add	r1, pc, r1
   13200:	vld1.64	{d16-d17}, [r1], r0
   13204:	vld1.8	{d18-d19}, [r1]
   13208:	add	r1, sp, #56	; 0x38
   1320c:	vst1.64	{d16-d17}, [r1], r0
   13210:	vst1.8	{d18-d19}, [r1]
   13214:	ldr	r0, [pc, #1348]	; 13760 <export_data_element_to_ascii@@Base+0xb94>
   13218:	ldr	r0, [pc, r0]
   1321c:	ldr	r0, [r0]
   13220:	cmp	r0, #0
   13224:	beq	13670 <export_data_element_to_ascii@@Base+0xaa4>
   13228:	ldr	r1, [pc, #1332]	; 13764 <export_data_element_to_ascii@@Base+0xb98>
   1322c:	add	r2, sp, #56	; 0x38
   13230:	add	r1, pc, r1
   13234:	b	1325c <export_data_element_to_ascii@@Base+0x690>
   13238:	add	r0, r9, #144	; 0x90
   1323c:	add	r1, sp, #56	; 0x38
   13240:	bl	12728 <coda_cursor_read_uint32@plt>
   13244:	cmp	r0, #0
   13248:	beq	13250 <export_data_element_to_ascii@@Base+0x684>
   1324c:	bl	189c0 <handle_coda_error@@Base>
   13250:	ldr	r2, [sp, #56]	; 0x38
   13254:	ldr	r1, [pc, #1240]	; 13734 <export_data_element_to_ascii@@Base+0xb68>
   13258:	add	r1, pc, r1
   1325c:	mov	r0, r8
   13260:	bl	128cc <fprintf@plt>
   13264:	b	1365c <export_data_element_to_ascii@@Base+0xa90>
   13268:	add	r0, r9, #144	; 0x90
   1326c:	add	r1, sp, #56	; 0x38
   13270:	bl	128b4 <coda_cursor_read_double@plt>
   13274:	cmp	r0, #0
   13278:	beq	13280 <export_data_element_to_ascii@@Base+0x6b4>
   1327c:	bl	189c0 <handle_coda_error@@Base>
   13280:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13284:	ldr	r2, [pc, #1196]	; 13738 <export_data_element_to_ascii@@Base+0xb6c>
   13288:	ldr	r1, [pc, #1196]	; 1373c <export_data_element_to_ascii@@Base+0xb70>
   1328c:	vldr	d16, [sp, #56]	; 0x38
   13290:	add	r2, pc, r2
   13294:	cmp	r0, #8
   13298:	add	r1, pc, r1
   1329c:	moveq	r1, r2
   132a0:	b	13628 <export_data_element_to_ascii@@Base+0xa5c>
   132a4:	cmp	r0, #3
   132a8:	bne	1365c <export_data_element_to_ascii@@Base+0xa90>
   132ac:	add	r0, r9, #144	; 0x90
   132b0:	add	r1, sp, #56	; 0x38
   132b4:	bl	129ec <coda_cursor_read_complex_double_pair@plt>
   132b8:	cmp	r0, #0
   132bc:	beq	132c4 <export_data_element_to_ascii@@Base+0x6f8>
   132c0:	bl	189c0 <handle_coda_error@@Base>
   132c4:	ldr	r0, [pc, #1152]	; 1374c <export_data_element_to_ascii@@Base+0xb80>
   132c8:	ldr	r0, [pc, r0]
   132cc:	vldr	d17, [sp, #64]	; 0x40
   132d0:	vldr	d16, [sp, #56]	; 0x38
   132d4:	ldr	r0, [r0]
   132d8:	vstr	d17, [sp, #8]
   132dc:	vmov	r2, r3, d16
   132e0:	str	r0, [sp]
   132e4:	ldr	r1, [pc, #1124]	; 13750 <export_data_element_to_ascii@@Base+0xb84>
   132e8:	add	r1, pc, r1
   132ec:	b	1362c <export_data_element_to_ascii@@Base+0xa60>
   132f0:	add	r0, r9, #144	; 0x90
   132f4:	sub	r1, fp, #48	; 0x30
   132f8:	bl	129bc <coda_cursor_read_int64@plt>
   132fc:	cmp	r0, #0
   13300:	beq	13308 <export_data_element_to_ascii@@Base+0x73c>
   13304:	bl	189c0 <handle_coda_error@@Base>
   13308:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1330c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13310:	add	r5, sp, #56	; 0x38
   13314:	mov	r2, r5
   13318:	bl	12ab8 <coda_str64@plt>
   1331c:	b	135d0 <export_data_element_to_ascii@@Base+0xa04>
   13320:	add	r6, r9, #144	; 0x90
   13324:	add	r1, sp, #56	; 0x38
   13328:	mov	r0, r6
   1332c:	bl	1289c <coda_cursor_get_string_length@plt>
   13330:	cmp	r0, #0
   13334:	beq	1333c <export_data_element_to_ascii@@Base+0x770>
   13338:	bl	189c0 <handle_coda_error@@Base>
   1333c:	ldr	r0, [sp, #56]	; 0x38
   13340:	add	r7, r0, #1
   13344:	mov	r0, r7
   13348:	bl	1283c <malloc@plt>
   1334c:	mov	r5, r0
   13350:	cmp	r0, #0
   13354:	bne	13388 <export_data_element_to_ascii@@Base+0x7bc>
   13358:	mov	r0, #126	; 0x7e
   1335c:	mov	r2, r7
   13360:	str	r0, [sp]
   13364:	mvn	r0, #0
   13368:	ldr	r1, [pc, #900]	; 136f4 <export_data_element_to_ascii@@Base+0xb28>
   1336c:	ldr	r3, [pc, #900]	; 136f8 <export_data_element_to_ascii@@Base+0xb2c>
   13370:	add	r1, pc, r1
   13374:	add	r3, pc, r3
   13378:	bl	126bc <coda_set_error@plt>
   1337c:	bl	189c0 <handle_coda_error@@Base>
   13380:	ldr	r0, [sp, #56]	; 0x38
   13384:	add	r7, r0, #1
   13388:	mov	r0, r6
   1338c:	mov	r1, r5
   13390:	mov	r2, r7
   13394:	bl	12860 <coda_cursor_read_string@plt>
   13398:	cmp	r0, #0
   1339c:	beq	133a4 <export_data_element_to_ascii@@Base+0x7d8>
   133a0:	bl	189c0 <handle_coda_error@@Base>
   133a4:	ldr	r0, [pc, #848]	; 136fc <export_data_element_to_ascii@@Base+0xb30>
   133a8:	ldr	r0, [pc, r0]
   133ac:	ldr	r0, [r0]
   133b0:	cmp	r0, #0
   133b4:	beq	13638 <export_data_element_to_ascii@@Base+0xa6c>
   133b8:	ldr	r1, [pc, #832]	; 13700 <export_data_element_to_ascii@@Base+0xb34>
   133bc:	mov	r0, r8
   133c0:	mov	r2, r5
   133c4:	add	r1, pc, r1
   133c8:	bl	128cc <fprintf@plt>
   133cc:	b	13644 <export_data_element_to_ascii@@Base+0xa78>
   133d0:	add	r0, r9, #144	; 0x90
   133d4:	add	r1, sp, #56	; 0x38
   133d8:	str	r8, [sp, #52]	; 0x34
   133dc:	str	r0, [sp, #48]	; 0x30
   133e0:	bl	12a1c <coda_cursor_get_bit_size@plt>
   133e4:	cmp	r0, #0
   133e8:	beq	133f0 <export_data_element_to_ascii@@Base+0x824>
   133ec:	bl	189c0 <handle_coda_error@@Base>
   133f0:	ldr	sl, [sp, #56]	; 0x38
   133f4:	ldr	r7, [sp, #60]	; 0x3c
   133f8:	lsr	r0, sl, #3
   133fc:	asr	r4, r7, #3
   13400:	orr	r0, r0, r7, lsl #29
   13404:	adds	r5, r0, #1
   13408:	adc	r9, r4, #0
   1340c:	ands	r8, sl, #7
   13410:	moveq	r5, r0
   13414:	mov	r0, r5
   13418:	bl	1283c <malloc@plt>
   1341c:	cmp	r8, #0
   13420:	mov	r6, r0
   13424:	moveq	r9, r4
   13428:	cmp	r0, #0
   1342c:	bne	13460 <export_data_element_to_ascii@@Base+0x894>
   13430:	mov	r0, #163	; 0xa3
   13434:	mov	r2, r5
   13438:	str	r0, [sp]
   1343c:	mvn	r0, #0
   13440:	ldr	r1, [pc, #700]	; 13704 <export_data_element_to_ascii@@Base+0xb38>
   13444:	ldr	r3, [pc, #700]	; 13708 <export_data_element_to_ascii@@Base+0xb3c>
   13448:	add	r1, pc, r1
   1344c:	add	r3, pc, r3
   13450:	bl	126bc <coda_set_error@plt>
   13454:	bl	189c0 <handle_coda_error@@Base>
   13458:	ldr	sl, [sp, #56]	; 0x38
   1345c:	ldr	r7, [sp, #60]	; 0x3c
   13460:	ldr	r0, [sp, #48]	; 0x30
   13464:	mov	r1, r6
   13468:	mov	r2, #0
   1346c:	mov	r3, #0
   13470:	str	sl, [sp]
   13474:	str	r7, [sp, #4]
   13478:	bl	12aac <coda_cursor_read_bits@plt>
   1347c:	ldr	r8, [sp, #52]	; 0x34
   13480:	cmp	r0, #0
   13484:	beq	1348c <export_data_element_to_ascii@@Base+0x8c0>
   13488:	bl	189c0 <handle_coda_error@@Base>
   1348c:	subs	r0, r5, #1
   13490:	sbcs	r0, r9, #0
   13494:	blt	13598 <export_data_element_to_ascii@@Base+0x9cc>
   13498:	ldr	r7, [pc, #620]	; 1370c <export_data_element_to_ascii@@Base+0xb40>
   1349c:	ldr	r4, [pc, #620]	; 13710 <export_data_element_to_ascii@@Base+0xb44>
   134a0:	mov	sl, #0
   134a4:	add	r7, pc, r7
   134a8:	add	r4, pc, r4
   134ac:	b	134d8 <export_data_element_to_ascii@@Base+0x90c>
   134b0:	ldr	r0, [pc, #624]	; 13728 <export_data_element_to_ascii@@Base+0xb5c>
   134b4:	add	r0, pc, r0
   134b8:	mov	r1, #2
   134bc:	mov	r2, #1
   134c0:	mov	r3, r8
   134c4:	bl	127e8 <fwrite@plt>
   134c8:	add	sl, sl, #1
   134cc:	subs	r0, sl, r5
   134d0:	rscs	r0, r9, #0
   134d4:	bge	13598 <export_data_element_to_ascii@@Base+0x9cc>
   134d8:	ldrb	r2, [r6, sl]
   134dc:	sub	r0, r2, #7
   134e0:	cmp	r0, #6
   134e4:	bhi	1351c <export_data_element_to_ascii@@Base+0x950>
   134e8:	add	r1, pc, #4
   134ec:	ldr	r0, [r1, r0, lsl #2]
   134f0:	add	pc, r1, r0
   134f4:	andeq	r0, r0, ip, lsl r0
   134f8:	andeq	r0, r0, r8, asr #32
   134fc:	andeq	r0, r0, ip, lsr r0
   13500:	andeq	r0, r0, r4, asr r0
   13504:			; <UNDEFINED> instruction: 0xffffffbc
   13508:	andeq	r0, r0, r0, rrx
   1350c:	andeq	r0, r0, r8, rrx
   13510:	ldr	r0, [pc, #512]	; 13718 <export_data_element_to_ascii@@Base+0xb4c>
   13514:	add	r0, pc, r0
   13518:	b	134b8 <export_data_element_to_ascii@@Base+0x8ec>
   1351c:	cmp	r2, #92	; 0x5c
   13520:	bne	13564 <export_data_element_to_ascii@@Base+0x998>
   13524:	ldr	r0, [pc, #488]	; 13714 <export_data_element_to_ascii@@Base+0xb48>
   13528:	add	r0, pc, r0
   1352c:	b	134b8 <export_data_element_to_ascii@@Base+0x8ec>
   13530:	ldr	r0, [pc, #488]	; 13720 <export_data_element_to_ascii@@Base+0xb54>
   13534:	add	r0, pc, r0
   13538:	b	134b8 <export_data_element_to_ascii@@Base+0x8ec>
   1353c:	ldr	r0, [pc, #472]	; 1371c <export_data_element_to_ascii@@Base+0xb50>
   13540:	add	r0, pc, r0
   13544:	b	134b8 <export_data_element_to_ascii@@Base+0x8ec>
   13548:	ldr	r0, [pc, #468]	; 13724 <export_data_element_to_ascii@@Base+0xb58>
   1354c:	add	r0, pc, r0
   13550:	b	134b8 <export_data_element_to_ascii@@Base+0x8ec>
   13554:	mov	r0, r7
   13558:	b	134b8 <export_data_element_to_ascii@@Base+0x8ec>
   1355c:	mov	r0, r4
   13560:	b	134b8 <export_data_element_to_ascii@@Base+0x8ec>
   13564:	sub	r0, r2, #32
   13568:	uxtb	r0, r0
   1356c:	cmp	r0, #94	; 0x5e
   13570:	bhi	13584 <export_data_element_to_ascii@@Base+0x9b8>
   13574:	mov	r0, r2
   13578:	mov	r1, r8
   1357c:	bl	12a04 <fputc@plt>
   13580:	b	134c8 <export_data_element_to_ascii@@Base+0x8fc>
   13584:	ldr	r1, [pc, #416]	; 1372c <export_data_element_to_ascii@@Base+0xb60>
   13588:	mov	r0, r8
   1358c:	add	r1, pc, r1
   13590:	bl	128cc <fprintf@plt>
   13594:	b	134c8 <export_data_element_to_ascii@@Base+0x8fc>
   13598:	mov	r0, r6
   1359c:	bl	12704 <free@plt>
   135a0:	b	1365c <export_data_element_to_ascii@@Base+0xa90>
   135a4:	add	r0, r9, #144	; 0x90
   135a8:	sub	r1, fp, #48	; 0x30
   135ac:	bl	128a8 <coda_cursor_read_uint64@plt>
   135b0:	cmp	r0, #0
   135b4:	beq	135bc <export_data_element_to_ascii@@Base+0x9f0>
   135b8:	bl	189c0 <handle_coda_error@@Base>
   135bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   135c0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   135c4:	add	r5, sp, #56	; 0x38
   135c8:	mov	r2, r5
   135cc:	bl	126f8 <coda_str64u@plt>
   135d0:	mov	r0, r5
   135d4:	mov	r1, r8
   135d8:	bl	12a94 <fputs@plt>
   135dc:	b	1365c <export_data_element_to_ascii@@Base+0xa90>
   135e0:	add	r0, r9, #144	; 0x90
   135e4:	add	r1, sp, #56	; 0x38
   135e8:	bl	12914 <coda_cursor_read_char@plt>
   135ec:	cmp	r0, #0
   135f0:	beq	135f8 <export_data_element_to_ascii@@Base+0xa2c>
   135f4:	bl	189c0 <handle_coda_error@@Base>
   135f8:	ldr	r0, [pc, #236]	; 136ec <export_data_element_to_ascii@@Base+0xb20>
   135fc:	ldr	r0, [pc, r0]
   13600:	ldrb	r2, [sp, #56]	; 0x38
   13604:	ldr	r0, [r0]
   13608:	cmp	r0, #0
   1360c:	beq	13650 <export_data_element_to_ascii@@Base+0xa84>
   13610:	ldr	r1, [pc, #216]	; 136f0 <export_data_element_to_ascii@@Base+0xb24>
   13614:	add	r1, pc, r1
   13618:	b	1325c <export_data_element_to_ascii@@Base+0x690>
   1361c:	vldr	d16, [fp, #-48]	; 0xffffffd0
   13620:	ldr	r1, [pc, #320]	; 13768 <export_data_element_to_ascii@@Base+0xb9c>
   13624:	add	r1, pc, r1
   13628:	vmov	r2, r3, d16
   1362c:	mov	r0, r8
   13630:	bl	128cc <fprintf@plt>
   13634:	b	1365c <export_data_element_to_ascii@@Base+0xa90>
   13638:	mov	r0, r5
   1363c:	mov	r1, r8
   13640:	bl	12a94 <fputs@plt>
   13644:	mov	r0, r5
   13648:	bl	12704 <free@plt>
   1364c:	b	1365c <export_data_element_to_ascii@@Base+0xa90>
   13650:	mov	r0, r2
   13654:	mov	r1, r8
   13658:	bl	12a04 <fputc@plt>
   1365c:	mov	r0, #10
   13660:	mov	r1, r8
   13664:	bl	12a04 <fputc@plt>
   13668:	sub	sp, fp, #28
   1366c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13670:	add	r0, sp, #56	; 0x38
   13674:	b	135d4 <export_data_element_to_ascii@@Base+0xa08>
   13678:	vldr	d0, [fp, #-48]	; 0xffffffd0
   1367c:	ldr	r0, [pc, #216]	; 1375c <export_data_element_to_ascii@@Base+0xb90>
   13680:	add	r1, sp, #56	; 0x38
   13684:	add	r0, pc, r0
   13688:	bl	126e0 <coda_time_double_to_string@plt>
   1368c:	cmp	r0, #0
   13690:	beq	13214 <export_data_element_to_ascii@@Base+0x648>
   13694:	bl	189c0 <handle_coda_error@@Base>
   13698:	b	13214 <export_data_element_to_ascii@@Base+0x648>
   1369c:	ldr	r0, [pc, #156]	; 13740 <export_data_element_to_ascii@@Base+0xb74>
   136a0:	ldr	r1, [pc, #156]	; 13744 <export_data_element_to_ascii@@Base+0xb78>
   136a4:	ldr	r3, [pc, #156]	; 13748 <export_data_element_to_ascii@@Base+0xb7c>
   136a8:	movw	r2, #294	; 0x126
   136ac:	add	r0, pc, r0
   136b0:	add	r1, pc, r1
   136b4:	add	r3, pc, r3
   136b8:	bl	12ac4 <__assert_fail@plt>
   136bc:	andeq	sl, r1, ip, ror #9
   136c0:			; <UNDEFINED> instruction: 0x0001a4b8
   136c4:	andeq	sl, r1, ip, lsr #3
   136c8:	strdeq	sl, [r1], -r4
   136cc:	andeq	sl, r1, r0, ror #1
   136d0:	andeq	sl, r1, r4, lsl #7
   136d4:	andeq	sl, r1, ip, asr #6
   136d8:	andeq	r7, r0, sl, ror #21
   136dc:	andeq	sl, r1, r8, lsl r3
   136e0:	andeq	r7, r0, sp, lsr r9
   136e4:	andeq	r7, r0, r6, lsr #14
   136e8:			; <UNDEFINED> instruction: 0x000077b1
   136ec:	andeq	r9, r1, r8, ror #23
   136f0:	andeq	r7, r0, r0, asr #4
   136f4:	andeq	r7, r0, r9, ror #9
   136f8:	andeq	r7, r0, sl, lsl r5
   136fc:	andeq	r9, r1, ip, lsr lr
   13700:	andeq	r7, r0, r2, lsl sp
   13704:	andeq	r7, r0, r1, lsl r4
   13708:	andeq	r7, r0, r2, asr #8
   1370c:	andeq	r7, r0, fp, asr r4
   13710:	andeq	r7, r0, sl, asr r4
   13714:	ldrdeq	r7, [r0], -sp
   13718:	ldrdeq	r7, [r0], -ip
   1371c:			; <UNDEFINED> instruction: 0x000073b3
   13720:	andeq	r7, r0, r2, asr #7
   13724:	andeq	r7, r0, sp, lsr #7
   13728:	andeq	r7, r0, r8, asr #8
   1372c:	andeq	r7, r0, ip, ror r3
   13730:	strdeq	r7, [r0], -r4
   13734:			; <UNDEFINED> instruction: 0x000076b6
   13738:	andeq	r7, r0, r2, lsl #13
   1373c:	andeq	r7, r0, pc, ror r6
   13740:	strdeq	r7, [r0], -r5
   13744:	ldrdeq	r7, [r0], -lr
   13748:	andeq	r7, r0, r9, ror #4
   1374c:	strdeq	r9, [r1], -r0
   13750:	andeq	r7, r0, r3, ror r6
   13754:	ldrdeq	r9, [r1], -ip
   13758:	andeq	r7, r0, ip, ror #14
   1375c:			; <UNDEFINED> instruction: 0x000072bc
   13760:	andeq	r9, r1, ip, asr #31
   13764:	andeq	r7, r0, r6, lsr #29
   13768:	strdeq	r7, [r0], -r3

0001376c <print_debug_data@@Base>:
   1376c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13770:	add	fp, sp, #24
   13774:	sub	sp, sp, #536	; 0x218
   13778:	ldr	r7, [pc, #316]	; 138bc <print_debug_data@@Base+0x150>
   1377c:	mov	r6, r0
   13780:	mov	r5, r1
   13784:	mov	r4, r2
   13788:	sub	r1, fp, #28
   1378c:	cmp	r6, #0
   13790:	ldr	r7, [pc, r7]
   13794:	ldr	r0, [r7]
   13798:	beq	137bc <print_debug_data@@Base+0x50>
   1379c:	str	r1, [sp]
   137a0:	mov	r1, r6
   137a4:	mov	r2, r5
   137a8:	mov	r3, r4
   137ac:	bl	128e4 <coda_open_as@plt>
   137b0:	cmp	r0, #0
   137b4:	bne	137c8 <print_debug_data@@Base+0x5c>
   137b8:	b	13824 <print_debug_data@@Base+0xb8>
   137bc:	bl	126c8 <coda_open@plt>
   137c0:	cmp	r0, #0
   137c4:	beq	13824 <print_debug_data@@Base+0xb8>
   137c8:	bl	12a70 <coda_get_errno@plt>
   137cc:	ldr	r0, [r0]
   137d0:	cmn	r0, #21
   137d4:	bne	13820 <print_debug_data@@Base+0xb4>
   137d8:	mov	r0, #0
   137dc:	bl	12710 <coda_set_option_use_mmap@plt>
   137e0:	ldr	r0, [r7]
   137e4:	sub	r1, fp, #28
   137e8:	cmp	r6, #0
   137ec:	beq	13808 <print_debug_data@@Base+0x9c>
   137f0:	str	r1, [sp]
   137f4:	mov	r1, r6
   137f8:	mov	r2, r5
   137fc:	mov	r3, r4
   13800:	bl	128e4 <coda_open_as@plt>
   13804:	b	1380c <print_debug_data@@Base+0xa0>
   13808:	bl	126c8 <coda_open@plt>
   1380c:	mov	r4, r0
   13810:	mov	r0, #1
   13814:	bl	12710 <coda_set_option_use_mmap@plt>
   13818:	cmp	r4, #0
   1381c:	beq	13824 <print_debug_data@@Base+0xb8>
   13820:	bl	189c0 <handle_coda_error@@Base>
   13824:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13828:	add	r1, sp, #4
   1382c:	bl	127ac <coda_get_product_format@plt>
   13830:	cmp	r0, #0
   13834:	beq	1383c <print_debug_data@@Base+0xd0>
   13838:	bl	189c0 <handle_coda_error@@Base>
   1383c:	ldr	r0, [sp, #4]
   13840:	mov	r1, #0
   13844:	cmp	r0, #3
   13848:	ldr	r0, [pc, #112]	; 138c0 <print_debug_data@@Base+0x154>
   1384c:	movwcc	r1, #1
   13850:	add	r0, pc, r0
   13854:	str	r1, [r0]
   13858:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1385c:	add	r0, sp, #8
   13860:	bl	127f4 <coda_cursor_set_product@plt>
   13864:	cmp	r0, #0
   13868:	beq	13870 <print_debug_data@@Base+0x104>
   1386c:	bl	189c0 <handle_coda_error@@Base>
   13870:	ldr	r0, [pc, #76]	; 138c4 <print_debug_data@@Base+0x158>
   13874:	ldr	r0, [pc, r0]
   13878:	ldr	r1, [r0]
   1387c:	cmp	r1, #0
   13880:	beq	13898 <print_debug_data@@Base+0x12c>
   13884:	add	r0, sp, #8
   13888:	bl	129d4 <coda_cursor_goto@plt>
   1388c:	cmp	r0, #0
   13890:	beq	13898 <print_debug_data@@Base+0x12c>
   13894:	bl	189c0 <handle_coda_error@@Base>
   13898:	mov	r0, #0
   1389c:	bl	12668 <coda_set_option_perform_boundary_checks@plt>
   138a0:	add	r0, sp, #8
   138a4:	mov	r1, #0
   138a8:	bl	138c8 <print_debug_data@@Base+0x15c>
   138ac:	ldr	r0, [fp, #-28]	; 0xffffffe4
   138b0:	bl	129b0 <coda_close@plt>
   138b4:	sub	sp, fp, #24
   138b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   138bc:	andeq	r9, r1, ip, lsl sl
   138c0:	andeq	r9, r1, r0, lsr #19
   138c4:	andeq	r9, r1, ip, asr r9
   138c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138cc:	add	fp, sp, #28
   138d0:	sub	sp, sp, #644	; 0x284
   138d4:	str	r1, [sp, #24]
   138d8:	sub	r1, fp, #40	; 0x28
   138dc:	mov	r4, r0
   138e0:	bl	12788 <coda_cursor_has_attributes@plt>
   138e4:	cmp	r0, #0
   138e8:	beq	138f0 <print_debug_data@@Base+0x184>
   138ec:	bl	189c0 <handle_coda_error@@Base>
   138f0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   138f4:	str	r4, [sp, #28]
   138f8:	cmp	r0, #0
   138fc:	beq	13964 <print_debug_data@@Base+0x1f8>
   13900:	mov	r0, r4
   13904:	bl	12908 <coda_cursor_goto_attributes@plt>
   13908:	cmp	r0, #0
   1390c:	beq	13914 <print_debug_data@@Base+0x1a8>
   13910:	bl	189c0 <handle_coda_error@@Base>
   13914:	ldr	r0, [pc, #3236]	; 145c0 <print_debug_data@@Base+0xe54>
   13918:	add	r0, pc, r0
   1391c:	bl	146c4 <print_debug_data@@Base+0xf58>
   13920:	ldr	r0, [pc, #3228]	; 145c4 <print_debug_data@@Base+0xe58>
   13924:	ldr	r0, [pc, r0]
   13928:	ldr	r4, [pc, #3224]	; 145c8 <print_debug_data@@Base+0xe5c>
   1392c:	ldr	r5, [sp, #28]
   13930:	ldr	r1, [sp, #24]
   13934:	add	r0, r0, #1
   13938:	add	r4, pc, r4
   1393c:	str	r0, [r4]
   13940:	mov	r0, r5
   13944:	bl	138c8 <print_debug_data@@Base+0x15c>
   13948:	ldr	r0, [pc, #3196]	; 145cc <print_debug_data@@Base+0xe60>
   1394c:	ldr	r0, [pc, r0]
   13950:	sub	r0, r0, #1
   13954:	str	r0, [r4]
   13958:	mov	r0, r5
   1395c:	mov	r4, r5
   13960:	bl	1286c <coda_cursor_goto_parent@plt>
   13964:	sub	r1, fp, #36	; 0x24
   13968:	mov	r0, r4
   1396c:	bl	12794 <coda_cursor_get_type_class@plt>
   13970:	cmp	r0, #0
   13974:	beq	1397c <print_debug_data@@Base+0x210>
   13978:	bl	189c0 <handle_coda_error@@Base>
   1397c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13980:	cmp	r0, #6
   13984:	bhi	14568 <print_debug_data@@Base+0xdfc>
   13988:	add	r1, pc, #4
   1398c:	ldr	r0, [r1, r0, lsl #2]
   13990:	add	pc, r1, r0
   13994:	andeq	r0, r0, r8, lsl #3
   13998:	andeq	r0, r0, r4, lsl r3
   1399c:	andeq	r0, r0, ip, lsl r0
   139a0:	andeq	r0, r0, ip, lsl r0
   139a4:	andeq	r0, r0, ip, lsl r0
   139a8:	andeq	r0, r0, ip, lsl r0
   139ac:	muleq	r0, r4, r3
   139b0:	sub	r1, fp, #96	; 0x60
   139b4:	mov	r0, r4
   139b8:	bl	129a4 <coda_cursor_has_ascii_content@plt>
   139bc:	cmp	r0, #0
   139c0:	beq	139c8 <print_debug_data@@Base+0x25c>
   139c4:	bl	189c0 <handle_coda_error@@Base>
   139c8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   139cc:	cmp	r0, #0
   139d0:	beq	13a84 <print_debug_data@@Base+0x318>
   139d4:	add	r1, sp, #32
   139d8:	mov	r0, r4
   139dc:	bl	1289c <coda_cursor_get_string_length@plt>
   139e0:	cmp	r0, #0
   139e4:	beq	139ec <print_debug_data@@Base+0x280>
   139e8:	bl	189c0 <handle_coda_error@@Base>
   139ec:	ldr	r0, [sp, #32]
   139f0:	add	r6, r0, #1
   139f4:	mov	r0, r6
   139f8:	bl	1283c <malloc@plt>
   139fc:	mov	r5, r0
   13a00:	cmp	r0, #0
   13a04:	bne	13a38 <print_debug_data@@Base+0x2cc>
   13a08:	movw	r0, #410	; 0x19a
   13a0c:	mov	r2, r6
   13a10:	str	r0, [sp]
   13a14:	mvn	r0, #0
   13a18:	ldr	r1, [pc, #3128]	; 14658 <print_debug_data@@Base+0xeec>
   13a1c:	ldr	r3, [pc, #3128]	; 1465c <print_debug_data@@Base+0xef0>
   13a20:	add	r1, pc, r1
   13a24:	add	r3, pc, r3
   13a28:	bl	126bc <coda_set_error@plt>
   13a2c:	bl	189c0 <handle_coda_error@@Base>
   13a30:	ldr	r0, [sp, #32]
   13a34:	add	r6, r0, #1
   13a38:	mov	r0, r4
   13a3c:	mov	r1, r5
   13a40:	mov	r2, r6
   13a44:	bl	12860 <coda_cursor_read_string@plt>
   13a48:	cmp	r0, #0
   13a4c:	beq	13a54 <print_debug_data@@Base+0x2e8>
   13a50:	bl	189c0 <handle_coda_error@@Base>
   13a54:	ldr	r0, [pc, #3076]	; 14660 <print_debug_data@@Base+0xef4>
   13a58:	add	r0, pc, r0
   13a5c:	bl	146c4 <print_debug_data@@Base+0xf58>
   13a60:	ldr	r1, [sp, #32]
   13a64:	mov	r0, r5
   13a68:	bl	147d8 <print_debug_data@@Base+0x106c>
   13a6c:	ldr	r1, [sp, #32]
   13a70:	ldr	r0, [pc, #3052]	; 14664 <print_debug_data@@Base+0xef8>
   13a74:	add	r0, pc, r0
   13a78:	bl	1478c <print_debug_data@@Base+0x1020>
   13a7c:	mov	r0, r5
   13a80:	bl	12704 <free@plt>
   13a84:	sub	r1, fp, #120	; 0x78
   13a88:	mov	r0, r4
   13a8c:	bl	12830 <coda_cursor_get_read_type@plt>
   13a90:	cmp	r0, #0
   13a94:	beq	13a9c <print_debug_data@@Base+0x330>
   13a98:	bl	189c0 <handle_coda_error@@Base>
   13a9c:	ldr	r0, [fp, #-120]	; 0xffffff88
   13aa0:	add	r0, r0, #1
   13aa4:	cmp	r0, #13
   13aa8:	bhi	14568 <print_debug_data@@Base+0xdfc>
   13aac:	add	r1, pc, #4
   13ab0:	ldr	r0, [r1, r0, lsl #2]
   13ab4:	add	pc, r1, r0
   13ab8:	andeq	r0, r0, r8, lsr r0
   13abc:	strdeq	r0, [r0], -r8
   13ac0:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13ac4:	strdeq	r0, [r0], -r8
   13ac8:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13acc:	strdeq	r0, [r0], -r8
   13ad0:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13ad4:			; <UNDEFINED> instruction: 0x000003bc
   13ad8:	andeq	r0, r0, ip, ror #7
   13adc:	andeq	r0, r0, r0, lsr #6
   13ae0:	andeq	r0, r0, r0, lsr #6
   13ae4:	andeq	r0, r0, r8, lsr r0
   13ae8:	andeq	r0, r0, r8, lsr r0
   13aec:	andeq	r0, r0, r0, lsr r4
   13af0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13af4:	cmp	r0, #0
   13af8:	bne	14568 <print_debug_data@@Base+0xdfc>
   13afc:	ldr	r0, [pc, #2964]	; 14698 <print_debug_data@@Base+0xf2c>
   13b00:	ldr	r1, [pc, #2964]	; 1469c <print_debug_data@@Base+0xf30>
   13b04:	ldr	r3, [pc, #2964]	; 146a0 <print_debug_data@@Base+0xf34>
   13b08:	mov	r2, #548	; 0x224
   13b0c:	add	r0, pc, r0
   13b10:	add	r1, pc, r1
   13b14:	add	r3, pc, r3
   13b18:	bl	12ac4 <__assert_fail@plt>
   13b1c:	sub	r1, fp, #120	; 0x78
   13b20:	mov	r0, r4
   13b24:	bl	126ec <coda_cursor_get_num_elements@plt>
   13b28:	cmp	r0, #0
   13b2c:	beq	13b34 <print_debug_data@@Base+0x3c8>
   13b30:	bl	189c0 <handle_coda_error@@Base>
   13b34:	ldr	r0, [fp, #-120]	; 0xffffff88
   13b38:	cmp	r0, #1
   13b3c:	blt	14568 <print_debug_data@@Base+0xdfc>
   13b40:	sub	r1, fp, #96	; 0x60
   13b44:	mov	r0, r4
   13b48:	bl	1274c <coda_cursor_get_type@plt>
   13b4c:	cmp	r0, #0
   13b50:	beq	13b58 <print_debug_data@@Base+0x3ec>
   13b54:	bl	189c0 <handle_coda_error@@Base>
   13b58:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13b5c:	sub	r1, fp, #44	; 0x2c
   13b60:	bl	12950 <coda_type_get_record_union_status@plt>
   13b64:	cmp	r0, #0
   13b68:	beq	13b70 <print_debug_data@@Base+0x404>
   13b6c:	bl	189c0 <handle_coda_error@@Base>
   13b70:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13b74:	cmp	r0, #0
   13b78:	beq	14008 <print_debug_data@@Base+0x89c>
   13b7c:	sub	r1, fp, #48	; 0x30
   13b80:	mov	r0, r4
   13b84:	bl	12a40 <coda_cursor_get_available_union_field_index@plt>
   13b88:	cmp	r0, #0
   13b8c:	beq	13b94 <print_debug_data@@Base+0x428>
   13b90:	bl	189c0 <handle_coda_error@@Base>
   13b94:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13b98:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13b9c:	sub	r2, fp, #52	; 0x34
   13ba0:	bl	12a88 <coda_type_get_record_field_name@plt>
   13ba4:	cmp	r0, #0
   13ba8:	beq	13bb0 <print_debug_data@@Base+0x444>
   13bac:	bl	189c0 <handle_coda_error@@Base>
   13bb0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13bb4:	mov	r0, r4
   13bb8:	bl	1280c <coda_cursor_goto_record_field_by_index@plt>
   13bbc:	cmp	r0, #0
   13bc0:	beq	13bc8 <print_debug_data@@Base+0x45c>
   13bc4:	bl	189c0 <handle_coda_error@@Base>
   13bc8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13bcc:	ldr	r0, [pc, #2556]	; 145d0 <print_debug_data@@Base+0xe64>
   13bd0:	add	r0, pc, r0
   13bd4:	bl	146c4 <print_debug_data@@Base+0xf58>
   13bd8:	ldr	r0, [pc, #2548]	; 145d4 <print_debug_data@@Base+0xe68>
   13bdc:	ldr	r0, [pc, r0]
   13be0:	cmp	r0, #0
   13be4:	beq	13c50 <print_debug_data@@Base+0x4e4>
   13be8:	sub	r1, fp, #88	; 0x58
   13bec:	mov	r0, r4
   13bf0:	bl	12a58 <coda_cursor_get_file_bit_offset@plt>
   13bf4:	cmp	r0, #0
   13bf8:	beq	13c00 <print_debug_data@@Base+0x494>
   13bfc:	bl	189c0 <handle_coda_error@@Base>
   13c00:	ldr	r1, [fp, #-84]	; 0xffffffac
   13c04:	cmp	r1, #0
   13c08:	bmi	13c50 <print_debug_data@@Base+0x4e4>
   13c0c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13c10:	add	r5, sp, #32
   13c14:	mov	r2, r5
   13c18:	lsr	r0, r0, #3
   13c1c:	orr	r0, r0, r1, lsl #29
   13c20:	lsr	r1, r1, #3
   13c24:	bl	12ab8 <coda_str64@plt>
   13c28:	ldr	r0, [pc, #2472]	; 145d8 <print_debug_data@@Base+0xe6c>
   13c2c:	mov	r1, r5
   13c30:	add	r0, pc, r0
   13c34:	bl	1478c <print_debug_data@@Base+0x1020>
   13c38:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13c3c:	ands	r1, r0, #7
   13c40:	beq	13c50 <print_debug_data@@Base+0x4e4>
   13c44:	ldr	r0, [pc, #2448]	; 145dc <print_debug_data@@Base+0xe70>
   13c48:	add	r0, pc, r0
   13c4c:	bl	1478c <print_debug_data@@Base+0x1020>
   13c50:	ldr	r0, [pc, #2440]	; 145e0 <print_debug_data@@Base+0xe74>
   13c54:	add	r0, pc, r0
   13c58:	bl	1478c <print_debug_data@@Base+0x1020>
   13c5c:	ldr	r0, [pc, #2432]	; 145e4 <print_debug_data@@Base+0xe78>
   13c60:	ldr	r0, [pc, r0]
   13c64:	ldr	r4, [pc, #2428]	; 145e8 <print_debug_data@@Base+0xe7c>
   13c68:	add	r0, r0, #1
   13c6c:	add	r4, pc, r4
   13c70:	str	r0, [r4]
   13c74:	ldr	r0, [pc, #2416]	; 145ec <print_debug_data@@Base+0xe80>
   13c78:	ldr	r0, [pc, r0]
   13c7c:	ldr	r0, [r0]
   13c80:	cmp	r0, #0
   13c84:	bmi	14268 <print_debug_data@@Base+0xafc>
   13c88:	ldr	r1, [sp, #24]
   13c8c:	cmp	r0, r1
   13c90:	bgt	14268 <print_debug_data@@Base+0xafc>
   13c94:	ldr	r0, [pc, #2388]	; 145f0 <print_debug_data@@Base+0xe84>
   13c98:	add	r0, pc, r0
   13c9c:	bl	146c4 <print_debug_data@@Base+0xf58>
   13ca0:	ldr	r5, [sp, #28]
   13ca4:	b	1427c <print_debug_data@@Base+0xb10>
   13ca8:	add	r7, sp, #32
   13cac:	sub	r1, fp, #44	; 0x2c
   13cb0:	mov	r0, r4
   13cb4:	mov	r2, r7
   13cb8:	bl	12998 <coda_cursor_get_array_dim@plt>
   13cbc:	cmp	r0, #0
   13cc0:	beq	13cc8 <print_debug_data@@Base+0x55c>
   13cc4:	bl	189c0 <handle_coda_error@@Base>
   13cc8:	ldr	r4, [fp, #-44]	; 0xffffffd4
   13ccc:	cmp	r4, #0
   13cd0:	bmi	14568 <print_debug_data@@Base+0xdfc>
   13cd4:	beq	141a8 <print_debug_data@@Base+0xa3c>
   13cd8:	lsl	r2, r4, #2
   13cdc:	sub	r0, fp, #88	; 0x58
   13ce0:	mov	r1, #0
   13ce4:	mov	r8, #0
   13ce8:	bl	12920 <memset@plt>
   13cec:	mov	r5, #1
   13cf0:	cmp	r4, #4
   13cf4:	bcc	1431c <print_debug_data@@Base+0xbb0>
   13cf8:	bic	r8, r4, #3
   13cfc:	mov	r0, #1
   13d00:	vmov.i32	q8, #1	; 0x00000001
   13d04:	sub	r2, r8, #4
   13d08:	add	r1, r0, r2, lsr #2
   13d0c:	cmp	r2, #12
   13d10:	and	ip, r1, #3
   13d14:	bcs	14294 <print_debug_data@@Base+0xb28>
   13d18:	mov	r1, #0
   13d1c:	cmp	ip, #0
   13d20:	bne	142e8 <print_debug_data@@Base+0xb7c>
   13d24:	b	14304 <print_debug_data@@Base+0xb98>
   13d28:	sub	r1, fp, #120	; 0x78
   13d2c:	mov	r0, r4
   13d30:	bl	127d0 <coda_cursor_get_special_type@plt>
   13d34:	cmp	r0, #0
   13d38:	beq	13d40 <print_debug_data@@Base+0x5d4>
   13d3c:	bl	189c0 <handle_coda_error@@Base>
   13d40:	ldr	r0, [fp, #-120]	; 0xffffff88
   13d44:	cmp	r0, #0
   13d48:	beq	13e20 <print_debug_data@@Base+0x6b4>
   13d4c:	add	r5, sp, #32
   13d50:	mov	r1, r4
   13d54:	mov	r2, #520	; 0x208
   13d58:	mov	r0, r5
   13d5c:	bl	12758 <memcpy@plt>
   13d60:	mov	r0, r5
   13d64:	bl	12a34 <coda_cursor_use_base_type_of_special_type@plt>
   13d68:	cmp	r0, #0
   13d6c:	beq	13d74 <print_debug_data@@Base+0x608>
   13d70:	bl	189c0 <handle_coda_error@@Base>
   13d74:	ldr	r1, [sp, #24]
   13d78:	add	r0, sp, #32
   13d7c:	bl	138c8 <print_debug_data@@Base+0x15c>
   13d80:	ldr	r0, [fp, #-120]	; 0xffffff88
   13d84:	b	13e24 <print_debug_data@@Base+0x6b8>
   13d88:	add	r1, sp, #32
   13d8c:	mov	r0, r4
   13d90:	bl	12728 <coda_cursor_read_uint32@plt>
   13d94:	cmp	r0, #0
   13d98:	beq	13da0 <print_debug_data@@Base+0x634>
   13d9c:	bl	189c0 <handle_coda_error@@Base>
   13da0:	ldr	r1, [sp, #32]
   13da4:	ldr	r0, [pc, #2268]	; 14688 <print_debug_data@@Base+0xf1c>
   13da8:	add	r0, pc, r0
   13dac:	b	13edc <print_debug_data@@Base+0x770>
   13db0:	add	r1, sp, #32
   13db4:	mov	r0, r4
   13db8:	bl	12a4c <coda_cursor_read_int32@plt>
   13dbc:	cmp	r0, #0
   13dc0:	beq	13dc8 <print_debug_data@@Base+0x65c>
   13dc4:	bl	189c0 <handle_coda_error@@Base>
   13dc8:	ldr	r1, [sp, #32]
   13dcc:	ldr	r0, [pc, #2224]	; 14684 <print_debug_data@@Base+0xf18>
   13dd0:	add	r0, pc, r0
   13dd4:	b	13edc <print_debug_data@@Base+0x770>
   13dd8:	add	r1, sp, #32
   13ddc:	mov	r0, r4
   13de0:	bl	128b4 <coda_cursor_read_double@plt>
   13de4:	cmp	r0, #0
   13de8:	beq	13df0 <print_debug_data@@Base+0x684>
   13dec:	bl	189c0 <handle_coda_error@@Base>
   13df0:	ldr	r1, [fp, #-120]	; 0xffffff88
   13df4:	ldr	r2, [pc, #2196]	; 14690 <print_debug_data@@Base+0xf24>
   13df8:	ldr	r0, [pc, #2196]	; 14694 <print_debug_data@@Base+0xf28>
   13dfc:	vldr	d16, [sp, #32]
   13e00:	add	r2, pc, r2
   13e04:	cmp	r1, #8
   13e08:	add	r0, pc, r0
   13e0c:	moveq	r0, r2
   13e10:	vmov	r2, r3, d16
   13e14:	bl	146c4 <print_debug_data@@Base+0xf58>
   13e18:	sub	sp, fp, #28
   13e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e20:	mov	r0, #0
   13e24:	bl	12638 <coda_type_get_special_type_name@plt>
   13e28:	mov	r1, r0
   13e2c:	ldr	r0, [pc, #2160]	; 146a4 <print_debug_data@@Base+0xf38>
   13e30:	add	r0, pc, r0
   13e34:	bl	146c4 <print_debug_data@@Base+0xf58>
   13e38:	ldr	r0, [fp, #-120]	; 0xffffff88
   13e3c:	cmp	r0, #3
   13e40:	bhi	14568 <print_debug_data@@Base+0xdfc>
   13e44:	add	r1, pc, #4
   13e48:	ldr	r0, [r1, r0, lsl #2]
   13e4c:	add	pc, r1, r0
   13e50:	andeq	r0, r0, r0, lsl r0
   13e54:	andeq	r0, r0, r8, ror #7
   13e58:	andeq	r0, r0, r8, ror #6
   13e5c:			; <UNDEFINED> instruction: 0x000003b0
   13e60:	ldr	r0, [pc, #2112]	; 146a8 <print_debug_data@@Base+0xf3c>
   13e64:	add	r0, pc, r0
   13e68:	bl	1478c <print_debug_data@@Base+0x1020>
   13e6c:	sub	sp, fp, #28
   13e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e74:	sub	r1, fp, #88	; 0x58
   13e78:	mov	r0, r4
   13e7c:	bl	129bc <coda_cursor_read_int64@plt>
   13e80:	cmp	r0, #0
   13e84:	beq	13e8c <print_debug_data@@Base+0x720>
   13e88:	bl	189c0 <handle_coda_error@@Base>
   13e8c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13e90:	ldr	r1, [fp, #-84]	; 0xffffffac
   13e94:	add	r4, sp, #32
   13e98:	mov	r2, r4
   13e9c:	bl	12ab8 <coda_str64@plt>
   13ea0:	b	13ed0 <print_debug_data@@Base+0x764>
   13ea4:	sub	r1, fp, #88	; 0x58
   13ea8:	mov	r0, r4
   13eac:	bl	128a8 <coda_cursor_read_uint64@plt>
   13eb0:	cmp	r0, #0
   13eb4:	beq	13ebc <print_debug_data@@Base+0x750>
   13eb8:	bl	189c0 <handle_coda_error@@Base>
   13ebc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13ec0:	ldr	r1, [fp, #-84]	; 0xffffffac
   13ec4:	add	r4, sp, #32
   13ec8:	mov	r2, r4
   13ecc:	bl	126f8 <coda_str64u@plt>
   13ed0:	ldr	r0, [pc, #1972]	; 1468c <print_debug_data@@Base+0xf20>
   13ed4:	mov	r1, r4
   13ed8:	add	r0, pc, r0
   13edc:	bl	146c4 <print_debug_data@@Base+0xf58>
   13ee0:	sub	sp, fp, #28
   13ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ee8:	sub	r1, fp, #88	; 0x58
   13eec:	mov	r0, r4
   13ef0:	bl	12a1c <coda_cursor_get_bit_size@plt>
   13ef4:	cmp	r0, #0
   13ef8:	beq	13f00 <print_debug_data@@Base+0x794>
   13efc:	bl	189c0 <handle_coda_error@@Base>
   13f00:	ldr	r4, [fp, #-88]	; 0xffffffa8
   13f04:	ldr	r7, [fp, #-84]	; 0xffffffac
   13f08:	lsr	r0, r4, #3
   13f0c:	tst	r4, #7
   13f10:	orr	r6, r0, r7, lsl #29
   13f14:	addne	r6, r6, #1
   13f18:	mov	r0, r6
   13f1c:	bl	1283c <malloc@plt>
   13f20:	mov	r5, r0
   13f24:	cmp	r0, #0
   13f28:	bne	13f5c <print_debug_data@@Base+0x7f0>
   13f2c:	movw	r0, #447	; 0x1bf
   13f30:	mov	r2, r6
   13f34:	str	r0, [sp]
   13f38:	mvn	r0, #0
   13f3c:	ldr	r1, [pc, #1828]	; 14668 <print_debug_data@@Base+0xefc>
   13f40:	ldr	r3, [pc, #1828]	; 1466c <print_debug_data@@Base+0xf00>
   13f44:	add	r1, pc, r1
   13f48:	add	r3, pc, r3
   13f4c:	bl	126bc <coda_set_error@plt>
   13f50:	bl	189c0 <handle_coda_error@@Base>
   13f54:	ldr	r4, [fp, #-88]	; 0xffffffa8
   13f58:	ldr	r7, [fp, #-84]	; 0xffffffac
   13f5c:	ldr	r0, [sp, #28]
   13f60:	mov	r1, r5
   13f64:	mov	r2, #0
   13f68:	mov	r3, #0
   13f6c:	stm	sp, {r4, r7}
   13f70:	bl	12aac <coda_cursor_read_bits@plt>
   13f74:	cmp	r0, #0
   13f78:	beq	13f80 <print_debug_data@@Base+0x814>
   13f7c:	bl	189c0 <handle_coda_error@@Base>
   13f80:	ldr	r0, [pc, #1768]	; 14670 <print_debug_data@@Base+0xf04>
   13f84:	add	r0, pc, r0
   13f88:	bl	146c4 <print_debug_data@@Base+0xf58>
   13f8c:	mov	r0, r5
   13f90:	mov	r1, r6
   13f94:	bl	147d8 <print_debug_data@@Base+0x106c>
   13f98:	ldr	r0, [pc, #1748]	; 14674 <print_debug_data@@Base+0xf08>
   13f9c:	add	r0, pc, r0
   13fa0:	bl	1478c <print_debug_data@@Base+0x1020>
   13fa4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13fa8:	ldr	r1, [fp, #-84]	; 0xffffffac
   13fac:	add	r4, sp, #32
   13fb0:	mov	r2, r4
   13fb4:	lsr	r0, r0, #3
   13fb8:	orr	r0, r0, r1, lsl #29
   13fbc:	asr	r1, r1, #3
   13fc0:	bl	12ab8 <coda_str64@plt>
   13fc4:	ldr	r0, [pc, #1708]	; 14678 <print_debug_data@@Base+0xf0c>
   13fc8:	mov	r1, r4
   13fcc:	add	r0, pc, r0
   13fd0:	bl	1478c <print_debug_data@@Base+0x1020>
   13fd4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13fd8:	ands	r1, r0, #7
   13fdc:	beq	13fec <print_debug_data@@Base+0x880>
   13fe0:	ldr	r0, [pc, #1684]	; 1467c <print_debug_data@@Base+0xf10>
   13fe4:	add	r0, pc, r0
   13fe8:	bl	1478c <print_debug_data@@Base+0x1020>
   13fec:	ldr	r0, [pc, #1676]	; 14680 <print_debug_data@@Base+0xf14>
   13ff0:	add	r0, pc, r0
   13ff4:	bl	1478c <print_debug_data@@Base+0x1020>
   13ff8:	mov	r0, r5
   13ffc:	bl	12704 <free@plt>
   14000:	sub	sp, fp, #28
   14004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14008:	mov	r0, r4
   1400c:	bl	12800 <coda_cursor_goto_first_record_field@plt>
   14010:	cmp	r0, #0
   14014:	beq	1401c <print_debug_data@@Base+0x8b0>
   14018:	bl	189c0 <handle_coda_error@@Base>
   1401c:	ldr	r0, [fp, #-120]	; 0xffffff88
   14020:	mov	r1, #0
   14024:	str	r1, [fp, #-48]	; 0xffffffd0
   14028:	cmp	r0, #1
   1402c:	blt	141b0 <print_debug_data@@Base+0xa44>
   14030:	ldr	r0, [sp, #24]
   14034:	mvn	r9, #0
   14038:	sub	r7, fp, #52	; 0x34
   1403c:	add	r0, r0, #1
   14040:	str	r0, [sp, #20]
   14044:	ldr	r6, [pc, #1452]	; 145f8 <print_debug_data@@Base+0xe8c>
   14048:	ldr	r5, [pc, #1452]	; 145fc <print_debug_data@@Base+0xe90>
   1404c:	ldr	sl, [pc, #1452]	; 14600 <print_debug_data@@Base+0xe94>
   14050:	ldr	r4, [pc, #1452]	; 14604 <print_debug_data@@Base+0xe98>
   14054:	ldr	r4, [pc, r4]
   14058:	add	r6, pc, r6
   1405c:	add	r5, pc, r5
   14060:	add	sl, pc, sl
   14064:	b	14080 <print_debug_data@@Base+0x914>
   14068:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1406c:	add	r1, r0, #1
   14070:	ldr	r0, [fp, #-120]	; 0xffffff88
   14074:	str	r1, [fp, #-48]	; 0xffffffd0
   14078:	cmp	r1, r0
   1407c:	bge	141b0 <print_debug_data@@Base+0xa44>
   14080:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14084:	mov	r2, r7
   14088:	bl	12a88 <coda_type_get_record_field_name@plt>
   1408c:	cmp	r0, #0
   14090:	beq	14098 <print_debug_data@@Base+0x92c>
   14094:	bl	189c0 <handle_coda_error@@Base>
   14098:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1409c:	mov	r0, r6
   140a0:	bl	146c4 <print_debug_data@@Base+0xf58>
   140a4:	ldr	r0, [pc, #1372]	; 14608 <print_debug_data@@Base+0xe9c>
   140a8:	ldr	r0, [pc, r0]
   140ac:	cmp	r0, #0
   140b0:	beq	14120 <print_debug_data@@Base+0x9b4>
   140b4:	ldr	r0, [sp, #28]
   140b8:	sub	r1, fp, #88	; 0x58
   140bc:	bl	12a58 <coda_cursor_get_file_bit_offset@plt>
   140c0:	cmp	r0, #0
   140c4:	beq	140cc <print_debug_data@@Base+0x960>
   140c8:	bl	189c0 <handle_coda_error@@Base>
   140cc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   140d0:	ldr	r1, [fp, #-84]	; 0xffffffac
   140d4:	subs	r2, r9, r0
   140d8:	sbcs	r2, r9, r1
   140dc:	bge	14120 <print_debug_data@@Base+0x9b4>
   140e0:	lsr	r0, r0, #3
   140e4:	add	r8, sp, #32
   140e8:	orr	r0, r0, r1, lsl #29
   140ec:	lsr	r1, r1, #3
   140f0:	mov	r2, r8
   140f4:	bl	12ab8 <coda_str64@plt>
   140f8:	ldr	r0, [pc, #1292]	; 1460c <print_debug_data@@Base+0xea0>
   140fc:	mov	r1, r8
   14100:	add	r0, pc, r0
   14104:	bl	1478c <print_debug_data@@Base+0x1020>
   14108:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1410c:	ands	r1, r0, #7
   14110:	beq	14120 <print_debug_data@@Base+0x9b4>
   14114:	ldr	r0, [pc, #1268]	; 14610 <print_debug_data@@Base+0xea4>
   14118:	add	r0, pc, r0
   1411c:	bl	1478c <print_debug_data@@Base+0x1020>
   14120:	mov	r0, r5
   14124:	bl	1478c <print_debug_data@@Base+0x1020>
   14128:	ldr	r0, [pc, #1252]	; 14614 <print_debug_data@@Base+0xea8>
   1412c:	ldr	r0, [pc, r0]
   14130:	add	r0, r0, #1
   14134:	str	r0, [sl]
   14138:	ldr	r0, [r4]
   1413c:	cmp	r0, #0
   14140:	bmi	14160 <print_debug_data@@Base+0x9f4>
   14144:	ldr	r1, [sp, #24]
   14148:	cmp	r0, r1
   1414c:	bgt	14160 <print_debug_data@@Base+0x9f4>
   14150:	ldr	r0, [pc, #1216]	; 14618 <print_debug_data@@Base+0xeac>
   14154:	add	r0, pc, r0
   14158:	bl	146c4 <print_debug_data@@Base+0xf58>
   1415c:	b	1416c <print_debug_data@@Base+0xa00>
   14160:	ldr	r0, [sp, #28]
   14164:	ldr	r1, [sp, #20]
   14168:	bl	138c8 <print_debug_data@@Base+0x15c>
   1416c:	ldr	r0, [pc, #1192]	; 1461c <print_debug_data@@Base+0xeb0>
   14170:	ldr	r0, [pc, r0]
   14174:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14178:	sub	r0, r0, #1
   1417c:	str	r0, [sl]
   14180:	ldr	r0, [fp, #-120]	; 0xffffff88
   14184:	sub	r0, r0, #1
   14188:	cmp	r1, r0
   1418c:	bge	14068 <print_debug_data@@Base+0x8fc>
   14190:	ldr	r0, [sp, #28]
   14194:	bl	129f8 <coda_cursor_goto_next_record_field@plt>
   14198:	cmp	r0, #0
   1419c:	beq	14068 <print_debug_data@@Base+0x8fc>
   141a0:	bl	189c0 <handle_coda_error@@Base>
   141a4:	b	14068 <print_debug_data@@Base+0x8fc>
   141a8:	mov	r5, #1
   141ac:	b	14340 <print_debug_data@@Base+0xbd4>
   141b0:	ldr	r0, [sp, #28]
   141b4:	b	14574 <print_debug_data@@Base+0xe08>
   141b8:	sub	r1, fp, #88	; 0x58
   141bc:	mov	r0, r4
   141c0:	bl	128b4 <coda_cursor_read_double@plt>
   141c4:	cmp	r0, #0
   141c8:	beq	141d0 <print_debug_data@@Base+0xa64>
   141cc:	bl	189c0 <handle_coda_error@@Base>
   141d0:	vldr	d0, [fp, #-88]	; 0xffffffa8
   141d4:	bl	128c0 <coda_isNaN@plt>
   141d8:	cmp	r0, #0
   141dc:	bne	141f0 <print_debug_data@@Base+0xa84>
   141e0:	vldr	d0, [fp, #-88]	; 0xffffffa8
   141e4:	bl	12764 <coda_isInf@plt>
   141e8:	cmp	r0, #0
   141ec:	beq	14580 <print_debug_data@@Base+0xe14>
   141f0:	vldr	d16, [fp, #-88]	; 0xffffffa8
   141f4:	ldr	r0, [pc, #1204]	; 146b0 <print_debug_data@@Base+0xf44>
   141f8:	add	r0, pc, r0
   141fc:	b	1425c <print_debug_data@@Base+0xaf0>
   14200:	add	r1, sp, #32
   14204:	sub	r2, fp, #88	; 0x58
   14208:	mov	r0, r4
   1420c:	bl	1295c <coda_cursor_read_complex_double_split@plt>
   14210:	cmp	r0, #0
   14214:	beq	1421c <print_debug_data@@Base+0xab0>
   14218:	bl	189c0 <handle_coda_error@@Base>
   1421c:	vldr	d17, [fp, #-88]	; 0xffffffa8
   14220:	vldr	d16, [sp, #32]
   14224:	vstr	d17, [sp]
   14228:	vmov	r2, r3, d16
   1422c:	ldr	r0, [pc, #1164]	; 146c0 <print_debug_data@@Base+0xf54>
   14230:	add	r0, pc, r0
   14234:	b	14260 <print_debug_data@@Base+0xaf4>
   14238:	add	r1, sp, #32
   1423c:	mov	r0, r4
   14240:	bl	128b4 <coda_cursor_read_double@plt>
   14244:	cmp	r0, #0
   14248:	beq	14250 <print_debug_data@@Base+0xae4>
   1424c:	bl	189c0 <handle_coda_error@@Base>
   14250:	vldr	d16, [sp, #32]
   14254:	ldr	r0, [pc, #1104]	; 146ac <print_debug_data@@Base+0xf40>
   14258:	add	r0, pc, r0
   1425c:	vmov	r2, r3, d16
   14260:	bl	1478c <print_debug_data@@Base+0x1020>
   14264:	b	14568 <print_debug_data@@Base+0xdfc>
   14268:	ldr	r0, [sp, #24]
   1426c:	ldr	r5, [sp, #28]
   14270:	add	r1, r0, #1
   14274:	mov	r0, r5
   14278:	bl	138c8 <print_debug_data@@Base+0x15c>
   1427c:	ldr	r0, [pc, #880]	; 145f4 <print_debug_data@@Base+0xe88>
   14280:	ldr	r0, [pc, r0]
   14284:	sub	r0, r0, #1
   14288:	str	r0, [r4]
   1428c:	mov	r0, r5
   14290:	b	14574 <print_debug_data@@Base+0xe08>
   14294:	sub	r2, r1, ip
   14298:	mov	r1, #0
   1429c:	mov	r3, #64	; 0x40
   142a0:	mov	r5, r7
   142a4:	vld1.32	{d18-d19}, [r5], r3
   142a8:	add	r6, r7, #16
   142ac:	add	r0, r7, #32
   142b0:	subs	r2, r2, #4
   142b4:	add	r1, r1, #16
   142b8:	vld1.32	{d20-d21}, [r6]
   142bc:	vmul.i32	q8, q9, q8
   142c0:	vld1.32	{d18-d19}, [r0]
   142c4:	add	r0, r7, #48	; 0x30
   142c8:	mov	r7, r5
   142cc:	vmul.i32	q8, q10, q8
   142d0:	vld1.32	{d20-d21}, [r0]
   142d4:	vmul.i32	q8, q9, q8
   142d8:	vmul.i32	q8, q10, q8
   142dc:	bne	142a4 <print_debug_data@@Base+0xb38>
   142e0:	cmp	ip, #0
   142e4:	beq	14304 <print_debug_data@@Base+0xb98>
   142e8:	add	r0, sp, #32
   142ec:	add	r1, r0, r1, lsl #2
   142f0:	rsb	r0, ip, #0
   142f4:	vld1.32	{d18-d19}, [r1]!
   142f8:	adds	r0, r0, #1
   142fc:	vmul.i32	q8, q9, q8
   14300:	bcc	142f4 <print_debug_data@@Base+0xb88>
   14304:	vext.8	q9, q8, q8, #8
   14308:	cmp	r4, r8
   1430c:	vmul.i32	q0, q8, q9
   14310:	vmul.i32	q8, q0, d0[1]
   14314:	vmov.32	r5, d16[0]
   14318:	beq	14338 <print_debug_data@@Base+0xbcc>
   1431c:	add	r0, sp, #32
   14320:	sub	r1, r4, r8
   14324:	add	r0, r0, r8, lsl #2
   14328:	ldr	r2, [r0], #4
   1432c:	subs	r1, r1, #1
   14330:	mul	r5, r2, r5
   14334:	bne	14328 <print_debug_data@@Base+0xbbc>
   14338:	cmp	r5, #1
   1433c:	blt	14568 <print_debug_data@@Base+0xdfc>
   14340:	ldr	r0, [sp, #28]
   14344:	bl	127dc <coda_cursor_goto_first_array_element@plt>
   14348:	cmp	r0, #0
   1434c:	beq	14354 <print_debug_data@@Base+0xbe8>
   14350:	bl	189c0 <handle_coda_error@@Base>
   14354:	add	r0, sp, #32
   14358:	str	r5, [sp, #20]
   1435c:	sub	sl, fp, #88	; 0x58
   14360:	mov	r9, #0
   14364:	sub	r8, r0, #4
   14368:	sub	r0, r5, #1
   1436c:	sub	r6, sl, #4
   14370:	str	r0, [sp, #16]
   14374:	ldr	r0, [sp, #24]
   14378:	add	r0, r0, #1
   1437c:	str	r0, [sp, #12]
   14380:	ldr	r5, [pc, #664]	; 14620 <print_debug_data@@Base+0xeb4>
   14384:	ldr	r7, [pc, #664]	; 14624 <print_debug_data@@Base+0xeb8>
   14388:	add	r5, pc, r5
   1438c:	add	r7, pc, r7
   14390:	b	143a4 <print_debug_data@@Base+0xc38>
   14394:	ldr	r0, [sp, #20]
   14398:	add	r9, r9, #1
   1439c:	cmp	r9, r0
   143a0:	beq	14570 <print_debug_data@@Base+0xe04>
   143a4:	ldr	r0, [pc, #636]	; 14628 <print_debug_data@@Base+0xebc>
   143a8:	add	r0, pc, r0
   143ac:	bl	146c4 <print_debug_data@@Base+0xf58>
   143b0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   143b4:	cmp	r0, #1
   143b8:	blt	143fc <print_debug_data@@Base+0xc90>
   143bc:	mov	r4, #0
   143c0:	b	143d0 <print_debug_data@@Base+0xc64>
   143c4:	add	r4, r4, #1
   143c8:	cmp	r4, r0
   143cc:	bge	143fc <print_debug_data@@Base+0xc90>
   143d0:	ldr	r1, [sl, r4, lsl #2]
   143d4:	mov	r0, r5
   143d8:	bl	1478c <print_debug_data@@Base+0x1020>
   143dc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   143e0:	sub	r1, r0, #1
   143e4:	cmp	r4, r1
   143e8:	bge	143c4 <print_debug_data@@Base+0xc58>
   143ec:	mov	r0, r7
   143f0:	bl	1478c <print_debug_data@@Base+0x1020>
   143f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   143f8:	b	143c4 <print_debug_data@@Base+0xc58>
   143fc:	ldr	r0, [pc, #552]	; 1462c <print_debug_data@@Base+0xec0>
   14400:	add	r0, pc, r0
   14404:	bl	1478c <print_debug_data@@Base+0x1020>
   14408:	ldr	r0, [pc, #544]	; 14630 <print_debug_data@@Base+0xec4>
   1440c:	ldr	r0, [pc, r0]
   14410:	ldr	r4, [sp, #28]
   14414:	cmp	r0, #0
   14418:	beq	14490 <print_debug_data@@Base+0xd24>
   1441c:	mov	r0, r4
   14420:	sub	r1, fp, #96	; 0x60
   14424:	bl	12a58 <coda_cursor_get_file_bit_offset@plt>
   14428:	cmp	r0, #0
   1442c:	beq	14434 <print_debug_data@@Base+0xcc8>
   14430:	bl	189c0 <handle_coda_error@@Base>
   14434:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14438:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1443c:	mvn	r3, #0
   14440:	subs	r2, r3, r0
   14444:	sbcs	r2, r3, r1
   14448:	bge	14490 <print_debug_data@@Base+0xd24>
   1444c:	lsr	r0, r0, #3
   14450:	sub	r4, fp, #120	; 0x78
   14454:	orr	r0, r0, r1, lsl #29
   14458:	lsr	r1, r1, #3
   1445c:	mov	r2, r4
   14460:	bl	12ab8 <coda_str64@plt>
   14464:	ldr	r0, [pc, #456]	; 14634 <print_debug_data@@Base+0xec8>
   14468:	mov	r1, r4
   1446c:	add	r0, pc, r0
   14470:	bl	1478c <print_debug_data@@Base+0x1020>
   14474:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14478:	ands	r1, r0, #7
   1447c:	beq	1448c <print_debug_data@@Base+0xd20>
   14480:	ldr	r0, [pc, #432]	; 14638 <print_debug_data@@Base+0xecc>
   14484:	add	r0, pc, r0
   14488:	bl	1478c <print_debug_data@@Base+0x1020>
   1448c:	ldr	r4, [sp, #28]
   14490:	ldr	r0, [pc, #420]	; 1463c <print_debug_data@@Base+0xed0>
   14494:	add	r0, pc, r0
   14498:	bl	1478c <print_debug_data@@Base+0x1020>
   1449c:	ldr	r0, [pc, #412]	; 14640 <print_debug_data@@Base+0xed4>
   144a0:	ldr	r0, [pc, r0]
   144a4:	ldr	r1, [pc, #408]	; 14644 <print_debug_data@@Base+0xed8>
   144a8:	add	r0, r0, #1
   144ac:	add	r1, pc, r1
   144b0:	str	r0, [r1]
   144b4:	ldr	r0, [pc, #396]	; 14648 <print_debug_data@@Base+0xedc>
   144b8:	ldr	r0, [pc, r0]
   144bc:	ldr	r0, [r0]
   144c0:	cmp	r0, #0
   144c4:	bmi	144e4 <print_debug_data@@Base+0xd78>
   144c8:	ldr	r1, [sp, #24]
   144cc:	cmp	r0, r1
   144d0:	bgt	144e4 <print_debug_data@@Base+0xd78>
   144d4:	ldr	r0, [pc, #368]	; 1464c <print_debug_data@@Base+0xee0>
   144d8:	add	r0, pc, r0
   144dc:	bl	146c4 <print_debug_data@@Base+0xf58>
   144e0:	b	144f0 <print_debug_data@@Base+0xd84>
   144e4:	ldr	r1, [sp, #12]
   144e8:	mov	r0, r4
   144ec:	bl	138c8 <print_debug_data@@Base+0x15c>
   144f0:	ldr	r0, [pc, #344]	; 14650 <print_debug_data@@Base+0xee4>
   144f4:	mov	r3, #0
   144f8:	ldr	r0, [pc, r0]
   144fc:	ldr	r1, [pc, #336]	; 14654 <print_debug_data@@Base+0xee8>
   14500:	sub	r0, r0, #1
   14504:	add	r1, pc, r1
   14508:	str	r0, [r1]
   1450c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14510:	cmp	r0, #1
   14514:	blt	14544 <print_debug_data@@Base+0xdd8>
   14518:	ldr	r1, [r6, r0, lsl #2]
   1451c:	ldr	r2, [r8, r0, lsl #2]
   14520:	add	r1, r1, #1
   14524:	cmp	r1, r2
   14528:	str	r1, [r6, r0, lsl #2]
   1452c:	bne	14544 <print_debug_data@@Base+0xdd8>
   14530:	sub	r1, r0, #1
   14534:	str	r3, [r6, r0, lsl #2]
   14538:	cmp	r1, #0
   1453c:	mov	r0, r1
   14540:	bgt	14518 <print_debug_data@@Base+0xdac>
   14544:	ldr	r0, [sp, #16]
   14548:	cmp	r9, r0
   1454c:	bge	14394 <print_debug_data@@Base+0xc28>
   14550:	mov	r0, r4
   14554:	bl	128d8 <coda_cursor_goto_next_array_element@plt>
   14558:	cmp	r0, #0
   1455c:	beq	14394 <print_debug_data@@Base+0xc28>
   14560:	bl	189c0 <handle_coda_error@@Base>
   14564:	b	14394 <print_debug_data@@Base+0xc28>
   14568:	sub	sp, fp, #28
   1456c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14570:	mov	r0, r4
   14574:	bl	1286c <coda_cursor_goto_parent@plt>
   14578:	sub	sp, fp, #28
   1457c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14580:	vldr	d0, [fp, #-88]	; 0xffffffa8
   14584:	ldr	r0, [pc, #296]	; 146b4 <print_debug_data@@Base+0xf48>
   14588:	add	r1, sp, #32
   1458c:	add	r0, pc, r0
   14590:	bl	126e0 <coda_time_double_to_string@plt>
   14594:	cmp	r0, #0
   14598:	beq	145a8 <print_debug_data@@Base+0xe3c>
   1459c:	ldr	r0, [pc, #276]	; 146b8 <print_debug_data@@Base+0xf4c>
   145a0:	add	r0, pc, r0
   145a4:	b	13e68 <print_debug_data@@Base+0x6fc>
   145a8:	ldr	r0, [pc, #268]	; 146bc <print_debug_data@@Base+0xf50>
   145ac:	add	r1, sp, #32
   145b0:	add	r0, pc, r0
   145b4:	bl	1478c <print_debug_data@@Base+0x1020>
   145b8:	sub	sp, fp, #28
   145bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145c0:	andeq	r7, r0, r0, ror r0
   145c4:	ldrdeq	r9, [r1], -ip
   145c8:	andeq	r9, r1, r8, asr #17
   145cc:			; <UNDEFINED> instruction: 0x000198b4
   145d0:	andeq	r7, r0, r0, lsl #10
   145d4:	andeq	r9, r1, r4, lsl r6
   145d8:	andeq	r6, r0, r6, ror #26
   145dc:	andeq	r6, r0, r2, asr sp
   145e0:	andeq	r7, r0, r4, lsl r6
   145e4:	andeq	r9, r1, r0, lsr #11
   145e8:	muleq	r1, r4, r5
   145ec:	andeq	r9, r1, r0, ror #10
   145f0:	andeq	r6, r0, r6, lsl #26
   145f4:	andeq	r8, r1, r0, lsl #31
   145f8:	andeq	r7, r0, r8, ror r0
   145fc:	andeq	r7, r0, ip, lsl #4
   14600:	andeq	r9, r1, r0, lsr #3
   14604:	andeq	r9, r1, r4, lsl #3
   14608:	andeq	r9, r1, r8, asr #2
   1460c:	muleq	r0, r6, r8
   14610:	andeq	r6, r0, r2, lsl #17
   14614:	ldrdeq	r9, [r1], -r4
   14618:	andeq	r6, r0, sl, asr #16
   1461c:	muleq	r1, r0, r0
   14620:	andeq	r6, r0, r3, lsl r6
   14624:	ldrdeq	r6, [r0], -sl
   14628:	andeq	r6, r0, sl, asr #15
   1462c:	andeq	r7, r0, r6, ror #6
   14630:	andeq	r8, r1, r4, ror #27
   14634:	andeq	r6, r0, sl, lsr #10
   14638:	andeq	r6, r0, r6, lsl r5
   1463c:	ldrdeq	r6, [r0], -r4
   14640:	andeq	r8, r1, r0, ror #26
   14644:	andeq	r8, r1, r4, asr sp
   14648:	andeq	r8, r1, r0, lsr #26
   1464c:	andeq	r6, r0, r6, asr #9
   14650:	andeq	r8, r1, r8, lsl #26
   14654:	strdeq	r8, [r1], -ip
   14658:	andeq	r6, r0, r9, lsr lr
   1465c:	andeq	r6, r0, pc, ror pc
   14660:	andeq	r7, r0, r8, ror #10
   14664:	muleq	r0, r1, pc	; <UNPREDICTABLE>
   14668:	andeq	r6, r0, r5, lsl r9
   1466c:	andeq	r6, r0, fp, asr sl
   14670:	andeq	r7, r0, ip, lsr r0
   14674:	andeq	r6, r0, r9, ror sl
   14678:	andeq	r7, r0, r8, asr #1
   1467c:			; <UNDEFINED> instruction: 0x000069b6
   14680:	andeq	r6, r0, r2, lsr #20
   14684:	andeq	r6, r0, lr, asr #24
   14688:	andeq	r6, r0, fp, ror ip
   1468c:	andeq	r7, r0, pc, lsl #5
   14690:	andeq	r6, r0, r8, lsr #24
   14694:	andeq	r6, r0, r2, ror #24
   14698:	andeq	r6, r0, r2, lsr #30
   1469c:	muleq	r0, r3, lr
   146a0:	andeq	r6, r0, ip, lsr #30
   146a4:	andeq	r6, r0, r4, lsr ip
   146a8:	andeq	r7, r0, r4, lsl #8
   146ac:	andeq	r6, r0, r2, lsl r8
   146b0:	andeq	r6, r0, r1, ror r8
   146b4:			; <UNDEFINED> instruction: 0x000063b4
   146b8:	ldrdeq	r6, [r0], -r1
   146bc:			; <UNDEFINED> instruction: 0x00006bb6
   146c0:	andeq	r6, r0, ip, asr r8
   146c4:	sub	sp, sp, #12
   146c8:	push	{r4, r5, r6, r7, fp, lr}
   146cc:	add	fp, sp, #16
   146d0:	sub	sp, sp, #4
   146d4:	add	ip, fp, #8
   146d8:	stm	ip, {r1, r2, r3}
   146dc:	ldr	r6, [pc, #140]	; 14770 <print_debug_data@@Base+0x1004>
   146e0:	ldr	r6, [pc, r6]
   146e4:	cmp	r6, #0
   146e8:	bmi	14750 <print_debug_data@@Base+0xfe4>
   146ec:	mov	r4, r0
   146f0:	beq	14724 <print_debug_data@@Base+0xfb8>
   146f4:	ldr	r7, [pc, #120]	; 14774 <print_debug_data@@Base+0x1008>
   146f8:	ldr	r7, [pc, r7]
   146fc:	ldr	r5, [pc, #116]	; 14778 <print_debug_data@@Base+0x100c>
   14700:	add	r5, pc, r5
   14704:	ldr	r3, [r7]
   14708:	mov	r0, r5
   1470c:	mov	r1, #2
   14710:	mov	r2, #1
   14714:	bl	127e8 <fwrite@plt>
   14718:	sub	r6, r6, #1
   1471c:	cmp	r6, #0
   14720:	bgt	14704 <print_debug_data@@Base+0xf98>
   14724:	add	r2, fp, #8
   14728:	mov	r1, r4
   1472c:	str	r2, [sp]
   14730:	ldr	r0, [pc, #68]	; 1477c <print_debug_data@@Base+0x1010>
   14734:	ldr	r0, [pc, r0]
   14738:	ldr	r0, [r0]
   1473c:	bl	129c8 <vfprintf@plt>
   14740:	sub	sp, fp, #16
   14744:	pop	{r4, r5, r6, r7, fp, lr}
   14748:	add	sp, sp, #12
   1474c:	bx	lr
   14750:	ldr	r0, [pc, #40]	; 14780 <print_debug_data@@Base+0x1014>
   14754:	ldr	r1, [pc, #40]	; 14784 <print_debug_data@@Base+0x1018>
   14758:	ldr	r3, [pc, #40]	; 14788 <print_debug_data@@Base+0x101c>
   1475c:	mov	r2, #44	; 0x2c
   14760:	add	r0, pc, r0
   14764:	add	r1, pc, r1
   14768:	add	r3, pc, r3
   1476c:	bl	12ac4 <__assert_fail@plt>
   14770:	andeq	r8, r1, r0, lsr #22
   14774:			; <UNDEFINED> instruction: 0x00018abc
   14778:			; <UNDEFINED> instruction: 0x000063b5
   1477c:	andeq	r8, r1, r0, lsl #21
   14780:	andeq	r6, r0, r7, lsr r3
   14784:	andeq	r6, r0, pc, lsr r2
   14788:	andeq	r6, r0, fp, lsr r3
   1478c:	sub	sp, sp, #12
   14790:	push	{fp, lr}
   14794:	mov	fp, sp
   14798:	sub	sp, sp, #4
   1479c:	mov	ip, r0
   147a0:	add	r0, fp, #8
   147a4:	stm	r0, {r1, r2, r3}
   147a8:	add	r2, fp, #8
   147ac:	mov	r1, ip
   147b0:	str	r2, [sp]
   147b4:	ldr	r0, [pc, #24]	; 147d4 <print_debug_data@@Base+0x1068>
   147b8:	ldr	r0, [pc, r0]
   147bc:	ldr	r0, [r0]
   147c0:	bl	129c8 <vfprintf@plt>
   147c4:	mov	sp, fp
   147c8:	pop	{fp, lr}
   147cc:	add	sp, sp, #12
   147d0:	bx	lr
   147d4:	strdeq	r8, [r1], -ip
   147d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147dc:	add	fp, sp, #28
   147e0:	sub	sp, sp, #4
   147e4:	cmp	r1, #1
   147e8:	blt	148e4 <print_debug_data@@Base+0x1178>
   147ec:	ldr	r8, [pc, #248]	; 148ec <print_debug_data@@Base+0x1180>
   147f0:	ldr	r9, [pc, #248]	; 148f0 <print_debug_data@@Base+0x1184>
   147f4:	ldr	sl, [pc, #248]	; 148f4 <print_debug_data@@Base+0x1188>
   147f8:	ldr	r7, [pc, #248]	; 148f8 <print_debug_data@@Base+0x118c>
   147fc:	ldr	r6, [pc, #248]	; 148fc <print_debug_data@@Base+0x1190>
   14800:	mov	r4, r1
   14804:	mov	r5, r0
   14808:	add	r8, pc, r8
   1480c:	add	r9, pc, r9
   14810:	add	sl, pc, sl
   14814:	add	r7, pc, r7
   14818:	add	r6, pc, r6
   1481c:	b	14838 <print_debug_data@@Base+0x10cc>
   14820:	ldr	r0, [pc, #216]	; 14900 <print_debug_data@@Base+0x1194>
   14824:	add	r0, pc, r0
   14828:	bl	1478c <print_debug_data@@Base+0x1020>
   1482c:	add	r5, r5, #1
   14830:	subs	r4, r4, #1
   14834:	beq	148e4 <print_debug_data@@Base+0x1178>
   14838:	ldrb	r1, [r5]
   1483c:	sub	r0, r1, #7
   14840:	cmp	r0, #6
   14844:	bhi	1487c <print_debug_data@@Base+0x1110>
   14848:	add	r1, pc, #4
   1484c:	ldr	r0, [r1, r0, lsl #2]
   14850:	add	pc, r1, r0
   14854:	andeq	r0, r0, ip, lsl r0
   14858:	andeq	r0, r0, ip, asr #32
   1485c:	andeq	r0, r0, r8, asr r0
   14860:	andeq	r0, r0, r0, rrx
   14864:	andeq	r0, r0, r8, rrx
   14868:	andeq	r0, r0, r0, ror r0
   1486c:	andeq	r0, r0, r8, ror r0
   14870:	ldr	r0, [pc, #140]	; 14904 <print_debug_data@@Base+0x1198>
   14874:	add	r0, pc, r0
   14878:	b	14828 <print_debug_data@@Base+0x10bc>
   1487c:	cmp	r1, #92	; 0x5c
   14880:	beq	14820 <print_debug_data@@Base+0x10b4>
   14884:	sub	r0, r1, #32
   14888:	uxtb	r0, r0
   1488c:	cmp	r0, #94	; 0x5e
   14890:	bhi	148d4 <print_debug_data@@Base+0x1168>
   14894:	ldr	r0, [pc, #112]	; 1490c <print_debug_data@@Base+0x11a0>
   14898:	add	r0, pc, r0
   1489c:	b	148dc <print_debug_data@@Base+0x1170>
   148a0:	ldr	r0, [pc, #96]	; 14908 <print_debug_data@@Base+0x119c>
   148a4:	add	r0, pc, r0
   148a8:	b	14828 <print_debug_data@@Base+0x10bc>
   148ac:	mov	r0, r8
   148b0:	b	14828 <print_debug_data@@Base+0x10bc>
   148b4:	mov	r0, r9
   148b8:	b	14828 <print_debug_data@@Base+0x10bc>
   148bc:	mov	r0, sl
   148c0:	b	14828 <print_debug_data@@Base+0x10bc>
   148c4:	mov	r0, r7
   148c8:	b	14828 <print_debug_data@@Base+0x10bc>
   148cc:	mov	r0, r6
   148d0:	b	14828 <print_debug_data@@Base+0x10bc>
   148d4:	ldr	r0, [pc, #52]	; 14910 <print_debug_data@@Base+0x11a4>
   148d8:	add	r0, pc, r0
   148dc:	bl	1478c <print_debug_data@@Base+0x1020>
   148e0:	b	1482c <print_debug_data@@Base+0x10c0>
   148e4:	sub	sp, fp, #28
   148e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148ec:	andeq	r6, r0, lr, ror #1
   148f0:	andeq	r6, r0, sp, ror #1
   148f4:	andeq	r6, r0, ip, ror #1
   148f8:	andeq	r6, r0, fp, ror #1
   148fc:	andeq	r6, r0, sl, ror #1
   14900:	andeq	r6, r0, r1, ror #1
   14904:	andeq	r6, r0, ip, ror r0
   14908:	andeq	r6, r0, pc, asr #32
   1490c:	andeq	r6, r0, r0, lsr #4
   14910:	andeq	r6, r0, r0, lsr r0

00014914 <dim_info_init@@Base>:
   14914:	ldr	r0, [pc, #24]	; 14934 <dim_info_init@@Base+0x20>
   14918:	mvn	r1, #0
   1491c:	ldr	r0, [pc, r0]
   14920:	str	r1, [r0, #104]	; 0x68
   14924:	mov	r1, #0
   14928:	str	r1, [r0, #68]	; 0x44
   1492c:	str	r1, [r0]
   14930:	bx	lr
   14934:	andeq	r8, r1, r0, asr #17

00014938 <dim_info_done@@Base>:
   14938:	bx	lr

0001493c <print_all_distinct_dims@@Base>:
   1493c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14940:	add	fp, sp, #28
   14944:	sub	sp, sp, #4
   14948:	ldr	r9, [pc, #460]	; 14b1c <print_all_distinct_dims@@Base+0x1e0>
   1494c:	mov	sl, r0
   14950:	ldr	r9, [pc, r9]
   14954:	ldr	r0, [r9]
   14958:	cmp	r0, sl
   1495c:	ble	14afc <print_all_distinct_dims@@Base+0x1c0>
   14960:	add	r8, r9, sl, lsl #2
   14964:	ldr	r0, [r8, #72]	; 0x48
   14968:	cmp	r0, #0
   1496c:	beq	14af4 <print_all_distinct_dims@@Base+0x1b8>
   14970:	mov	r7, r8
   14974:	mov	r5, #4
   14978:	ldr	r0, [r7, #4]!
   1497c:	add	r6, r5, r0, lsl #2
   14980:	mov	r0, r6
   14984:	bl	1283c <malloc@plt>
   14988:	mov	r4, r0
   1498c:	cmp	r0, #0
   14990:	bne	149c4 <print_all_distinct_dims@@Base+0x88>
   14994:	mov	r0, #61	; 0x3d
   14998:	mov	r2, r6
   1499c:	str	r0, [sp]
   149a0:	mvn	r0, #0
   149a4:	ldr	r1, [pc, #372]	; 14b20 <print_all_distinct_dims@@Base+0x1e4>
   149a8:	ldr	r3, [pc, #372]	; 14b24 <print_all_distinct_dims@@Base+0x1e8>
   149ac:	add	r1, pc, r1
   149b0:	add	r3, pc, r3
   149b4:	bl	126bc <coda_set_error@plt>
   149b8:	bl	189c0 <handle_coda_error@@Base>
   149bc:	ldr	r0, [r7]
   149c0:	add	r6, r5, r0, lsl #2
   149c4:	mov	r0, r4
   149c8:	mov	r1, #0
   149cc:	mov	r2, r6
   149d0:	mov	r5, #0
   149d4:	bl	12920 <memset@plt>
   149d8:	ldr	r0, [r8, #140]	; 0x8c
   149dc:	add	r0, r9, r0, lsl #3
   149e0:	ldrd	r0, [r0, #232]	; 0xe8
   149e4:	subs	r2, r0, #1
   149e8:	sbcs	r2, r1, #0
   149ec:	blt	14a18 <print_all_distinct_dims@@Base+0xdc>
   149f0:	ldr	r2, [r8, #108]	; 0x6c
   149f4:	ldr	r3, [r2, r5, lsl #2]
   149f8:	add	r5, r5, #1
   149fc:	cmp	r3, #0
   14a00:	ldrpl	r6, [r4, r3, lsl #2]
   14a04:	addpl	r6, r6, #1
   14a08:	strpl	r6, [r4, r3, lsl #2]
   14a0c:	subs	r3, r5, r0
   14a10:	rscs	r3, r1, #0
   14a14:	blt	149f4 <print_all_distinct_dims@@Base+0xb8>
   14a18:	ldr	r0, [pc, #264]	; 14b28 <print_all_distinct_dims@@Base+0x1ec>
   14a1c:	add	r1, sl, #1
   14a20:	add	r0, pc, r0
   14a24:	bl	12698 <printf@plt>
   14a28:	ldr	r5, [r8, #36]!	; 0x24
   14a2c:	ldr	r1, [r7]
   14a30:	cmp	r5, r1
   14a34:	bge	14a70 <print_all_distinct_dims@@Base+0x134>
   14a38:	ldr	r6, [pc, #236]	; 14b2c <print_all_distinct_dims@@Base+0x1f0>
   14a3c:	add	r6, pc, r6
   14a40:	b	14a50 <print_all_distinct_dims@@Base+0x114>
   14a44:	add	r5, r5, #1
   14a48:	cmp	r5, r1
   14a4c:	bge	14a70 <print_all_distinct_dims@@Base+0x134>
   14a50:	ldr	r0, [r4, r5, lsl #2]
   14a54:	cmp	r0, #1
   14a58:	blt	14a44 <print_all_distinct_dims@@Base+0x108>
   14a5c:	mov	r0, r6
   14a60:	mov	r1, r5
   14a64:	bl	12698 <printf@plt>
   14a68:	ldr	r1, [r7]
   14a6c:	b	14a44 <print_all_distinct_dims@@Base+0x108>
   14a70:	ldr	r0, [pc, #184]	; 14b30 <print_all_distinct_dims@@Base+0x1f4>
   14a74:	add	r0, pc, r0
   14a78:	bl	12698 <printf@plt>
   14a7c:	ldr	r0, [pc, #176]	; 14b34 <print_all_distinct_dims@@Base+0x1f8>
   14a80:	add	r0, pc, r0
   14a84:	bl	12698 <printf@plt>
   14a88:	ldr	r0, [r7]
   14a8c:	ldr	r6, [r8]
   14a90:	cmp	r6, r0
   14a94:	bge	14acc <print_all_distinct_dims@@Base+0x190>
   14a98:	ldr	r5, [pc, #152]	; 14b38 <print_all_distinct_dims@@Base+0x1fc>
   14a9c:	add	r5, pc, r5
   14aa0:	b	14ab0 <print_all_distinct_dims@@Base+0x174>
   14aa4:	add	r6, r6, #1
   14aa8:	cmp	r6, r0
   14aac:	bge	14acc <print_all_distinct_dims@@Base+0x190>
   14ab0:	ldr	r1, [r4, r6, lsl #2]
   14ab4:	cmp	r1, #1
   14ab8:	blt	14aa4 <print_all_distinct_dims@@Base+0x168>
   14abc:	mov	r0, r5
   14ac0:	bl	12698 <printf@plt>
   14ac4:	ldr	r0, [r7]
   14ac8:	b	14aa4 <print_all_distinct_dims@@Base+0x168>
   14acc:	ldr	r1, [r4, r0, lsl #2]
   14ad0:	ldr	r0, [pc, #100]	; 14b3c <print_all_distinct_dims@@Base+0x200>
   14ad4:	add	r0, pc, r0
   14ad8:	bl	12698 <printf@plt>
   14adc:	mov	r0, #10
   14ae0:	bl	1292c <putchar@plt>
   14ae4:	mov	r0, r4
   14ae8:	sub	sp, fp, #28
   14aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14af0:	b	12704 <free@plt>
   14af4:	sub	sp, fp, #28
   14af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14afc:	ldr	r0, [pc, #60]	; 14b40 <print_all_distinct_dims@@Base+0x204>
   14b00:	ldr	r1, [pc, #60]	; 14b44 <print_all_distinct_dims@@Base+0x208>
   14b04:	ldr	r3, [pc, #60]	; 14b48 <print_all_distinct_dims@@Base+0x20c>
   14b08:	mov	r2, #50	; 0x32
   14b0c:	add	r0, pc, r0
   14b10:	add	r1, pc, r1
   14b14:	add	r3, pc, r3
   14b18:	bl	12ac4 <__assert_fail@plt>
   14b1c:	andeq	r8, r1, ip, lsl #17
   14b20:	andeq	r5, r0, sp, lsr #29
   14b24:	andeq	r6, r0, r6, lsr #2
   14b28:	andeq	r6, r0, r8, lsr r1
   14b2c:	andeq	r6, r0, r8, lsr #2
   14b30:	strdeq	r6, [r0], -r4
   14b34:	andeq	r6, r0, ip, ror #1
   14b38:	andeq	r6, r0, r8, asr #1
   14b3c:	muleq	r0, r4, r0
   14b40:	andeq	r5, r0, pc, lsr #31
   14b44:	andeq	r5, r0, r6, asr #31
   14b48:	andeq	r6, r0, r2, lsr #32

00014b4c <dim_enter_array@@Base>:
   14b4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b50:	add	fp, sp, #28
   14b54:	sub	sp, sp, #76	; 0x4c
   14b58:	ldr	r4, [pc, #2316]	; 1546c <dim_enter_array@@Base+0x920>
   14b5c:	sub	r1, fp, #32
   14b60:	ldr	r4, [pc, r4]
   14b64:	ldr	r0, [r4, #136]	; 0x88
   14b68:	ldr	r5, [r4, #3360]	; 0xd20
   14b6c:	add	r0, r4, r0, lsl #2
   14b70:	ldr	r0, [r0, #8]
   14b74:	bl	12ad0 <coda_type_get_class@plt>
   14b78:	cmp	r0, #0
   14b7c:	beq	14b84 <dim_enter_array@@Base+0x38>
   14b80:	bl	189c0 <handle_coda_error@@Base>
   14b84:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14b88:	sub	r0, r0, #1
   14b8c:	cmp	r0, #5
   14b90:	bhi	1540c <dim_enter_array@@Base+0x8c0>
   14b94:	add	r1, r5, r5, lsl #2
   14b98:	add	r5, r4, r1, lsl #4
   14b9c:	add	r1, pc, #4
   14ba0:	ldr	r0, [r1, r0, lsl #2]
   14ba4:	add	pc, r1, r0
   14ba8:	andeq	r0, r0, r8, lsl r0
   14bac:	andeq	r0, r0, r4, ror #16
   14bb0:	andeq	r0, r0, r4, ror #16
   14bb4:	muleq	r0, ip, r0
   14bb8:	andeq	r0, r0, ip, asr #1
   14bbc:	andeq	r0, r0, r0, rrx
   14bc0:	ldr	r0, [r4, #136]	; 0x88
   14bc4:	add	r1, sp, #36	; 0x24
   14bc8:	add	r2, sp, #40	; 0x28
   14bcc:	add	r0, r4, r0, lsl #2
   14bd0:	ldr	r0, [r0, #8]
   14bd4:	bl	12a10 <coda_type_get_array_dim@plt>
   14bd8:	cmp	r0, #0
   14bdc:	beq	14be4 <dim_enter_array@@Base+0x98>
   14be0:	bl	189c0 <handle_coda_error@@Base>
   14be4:	ldr	sl, [sp, #36]	; 0x24
   14be8:	cmp	sl, #1
   14bec:	str	sl, [r5, #804]	; 0x324
   14bf0:	blt	14cc8 <dim_enter_array@@Base+0x17c>
   14bf4:	add	r0, r5, #808	; 0x328
   14bf8:	lsl	r2, sl, #2
   14bfc:	add	r1, sp, #40	; 0x28
   14c00:	bl	12758 <memcpy@plt>
   14c04:	b	14cc8 <dim_enter_array@@Base+0x17c>
   14c08:	ldr	r0, [r4, #136]	; 0x88
   14c0c:	add	r1, sp, #40	; 0x28
   14c10:	add	r0, r4, r0, lsl #2
   14c14:	ldr	r0, [r0, #8]
   14c18:	bl	12944 <coda_type_get_special_type@plt>
   14c1c:	cmp	r0, #0
   14c20:	beq	14c28 <dim_enter_array@@Base+0xdc>
   14c24:	bl	189c0 <handle_coda_error@@Base>
   14c28:	ldr	r0, [sp, #40]	; 0x28
   14c2c:	cmp	r0, #3
   14c30:	bne	1544c <dim_enter_array@@Base+0x900>
   14c34:	mov	sl, #1
   14c38:	mov	r0, #2
   14c3c:	str	sl, [r5, #804]	; 0x324
   14c40:	b	14cc4 <dim_enter_array@@Base+0x178>
   14c44:	ldr	r0, [r4, #136]	; 0x88
   14c48:	add	r1, sp, #40	; 0x28
   14c4c:	add	r0, r4, r0, lsl #2
   14c50:	ldr	r0, [r0, #8]
   14c54:	bl	12980 <coda_type_get_string_length@plt>
   14c58:	cmp	r0, #0
   14c5c:	beq	14c64 <dim_enter_array@@Base+0x118>
   14c60:	bl	189c0 <handle_coda_error@@Base>
   14c64:	ldr	r0, [sp, #40]	; 0x28
   14c68:	mov	sl, #1
   14c6c:	str	sl, [r5, #804]	; 0x324
   14c70:	b	14cc4 <dim_enter_array@@Base+0x178>
   14c74:	ldr	r0, [r4, #136]	; 0x88
   14c78:	add	r1, sp, #40	; 0x28
   14c7c:	add	r0, r4, r0, lsl #2
   14c80:	ldr	r0, [r0, #8]
   14c84:	bl	12770 <coda_type_get_bit_size@plt>
   14c88:	cmp	r0, #0
   14c8c:	beq	14c94 <dim_enter_array@@Base+0x148>
   14c90:	bl	189c0 <handle_coda_error@@Base>
   14c94:	ldr	r0, [sp, #44]	; 0x2c
   14c98:	mov	sl, #1
   14c9c:	str	sl, [r5, #804]	; 0x324
   14ca0:	cmp	r0, #0
   14ca4:	bmi	14cc0 <dim_enter_array@@Base+0x174>
   14ca8:	ldr	r1, [sp, #40]	; 0x28
   14cac:	lsr	r2, r1, #3
   14cb0:	tst	r1, #7
   14cb4:	orr	r0, r2, r0, lsl #29
   14cb8:	addne	r0, r0, #1
   14cbc:	b	14cc4 <dim_enter_array@@Base+0x178>
   14cc0:	mvn	r0, #0
   14cc4:	str	r0, [r5, #808]	; 0x328
   14cc8:	ldr	r1, [pc, #1964]	; 1547c <dim_enter_array@@Base+0x930>
   14ccc:	add	r0, r5, #800	; 0x320
   14cd0:	ldr	r1, [pc, r1]
   14cd4:	ldr	r1, [r1]
   14cd8:	cmp	r1, #0
   14cdc:	beq	14d58 <dim_enter_array@@Base+0x20c>
   14ce0:	str	r5, [sp, #16]
   14ce4:	ldr	r8, [pc, #1940]	; 15480 <dim_enter_array@@Base+0x934>
   14ce8:	ldr	r8, [pc, r8]
   14cec:	ldr	r1, [r8]
   14cf0:	add	r3, sl, r1
   14cf4:	str	r1, [r0]
   14cf8:	cmp	r3, #9
   14cfc:	bge	1542c <dim_enter_array@@Base+0x8e0>
   14d00:	mov	r0, r1
   14d04:	cmp	r1, #0
   14d08:	str	r3, [r8]
   14d0c:	str	r1, [sp, #20]
   14d10:	ble	14d74 <dim_enter_array@@Base+0x228>
   14d14:	add	r0, r8, r0, lsl #3
   14d18:	ldr	r2, [r0, #236]	; 0xec
   14d1c:	ldr	r1, [r0, #232]	; 0xe8
   14d20:	str	r2, [sp, #28]
   14d24:	ldr	r2, [r0, #296]	; 0x128
   14d28:	str	r1, [sp, #32]
   14d2c:	ldr	r1, [r0, #300]	; 0x12c
   14d30:	rsbs	r0, r2, #0
   14d34:	mov	r0, r1
   14d38:	str	r2, [sp, #8]
   14d3c:	str	r1, [sp, #12]
   14d40:	rscs	r0, r1, #0
   14d44:	bge	14f24 <dim_enter_array@@Base+0x3d8>
   14d48:	cmp	sl, #1
   14d4c:	blt	14ff0 <dim_enter_array@@Base+0x4a4>
   14d50:	ldr	r0, [sp, #20]
   14d54:	b	14d9c <dim_enter_array@@Base+0x250>
   14d58:	mvn	r1, #0
   14d5c:	str	r1, [r0]
   14d60:	mov	r0, #0
   14d64:	str	r0, [r5, #840]	; 0x348
   14d68:	str	r0, [r5, #844]	; 0x34c
   14d6c:	sub	sp, fp, #28
   14d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d74:	mov	r1, #0
   14d78:	cmp	sl, #0
   14d7c:	str	r1, [sp, #12]
   14d80:	mov	r1, #1
   14d84:	str	r1, [sp, #8]
   14d88:	mov	r1, #1
   14d8c:	str	r1, [sp, #32]
   14d90:	mov	r1, #0
   14d94:	str	r1, [sp, #28]
   14d98:	ble	153e4 <dim_enter_array@@Base+0x898>
   14d9c:	ldr	r1, [sp, #16]
   14da0:	add	r7, r8, r0, lsl #2
   14da4:	mov	r0, #0
   14da8:	add	r2, r1, #804	; 0x324
   14dac:	add	r9, r1, #808	; 0x328
   14db0:	mov	r1, #0
   14db4:	str	r2, [sp, #24]
   14db8:	mov	r2, #0
   14dbc:	ldr	r3, [r9, r2, lsl #2]
   14dc0:	add	r6, r7, r2, lsl #2
   14dc4:	add	r2, r2, #1
   14dc8:	str	r0, [r6, #72]	; 0x48
   14dcc:	cmn	r3, #1
   14dd0:	str	r3, [r6, #4]
   14dd4:	movweq	r1, #1
   14dd8:	cmp	sl, r2
   14ddc:	bne	14dbc <dim_enter_array@@Base+0x270>
   14de0:	cmp	r1, #0
   14de4:	beq	14ff0 <dim_enter_array@@Base+0x4a4>
   14de8:	ldr	r0, [sp, #32]
   14dec:	mov	sl, #0
   14df0:	mov	r6, #0
   14df4:	lsl	r4, r0, #2
   14df8:	b	14e18 <dim_enter_array@@Base+0x2cc>
   14dfc:	str	sl, [r5, #140]	; 0x8c
   14e00:	str	sl, [r5, #108]	; 0x6c
   14e04:	ldr	r0, [sp, #24]
   14e08:	add	r6, r6, #1
   14e0c:	ldr	r0, [r0]
   14e10:	cmp	r6, r0
   14e14:	bge	14e94 <dim_enter_array@@Base+0x348>
   14e18:	ldr	r0, [r9, r6, lsl #2]
   14e1c:	add	r5, r7, r6, lsl #2
   14e20:	cmn	r0, #1
   14e24:	bne	14dfc <dim_enter_array@@Base+0x2b0>
   14e28:	ldr	r0, [sp, #20]
   14e2c:	str	r0, [r5, #140]	; 0x8c
   14e30:	mov	r0, r4
   14e34:	bl	1283c <malloc@plt>
   14e38:	cmp	r0, #0
   14e3c:	str	r0, [r5, #108]	; 0x6c
   14e40:	bne	14e6c <dim_enter_array@@Base+0x320>
   14e44:	mov	r0, #456	; 0x1c8
   14e48:	mov	r2, r4
   14e4c:	str	r0, [sp]
   14e50:	mvn	r0, #0
   14e54:	ldr	r1, [pc, #1576]	; 15484 <dim_enter_array@@Base+0x938>
   14e58:	ldr	r3, [pc, #1576]	; 15488 <dim_enter_array@@Base+0x93c>
   14e5c:	add	r1, pc, r1
   14e60:	add	r3, pc, r3
   14e64:	bl	126bc <coda_set_error@plt>
   14e68:	bl	189c0 <handle_coda_error@@Base>
   14e6c:	ldr	r0, [sp, #32]
   14e70:	subs	r0, r0, #1
   14e74:	ldr	r0, [sp, #28]
   14e78:	sbcs	r0, r0, #0
   14e7c:	blt	14e04 <dim_enter_array@@Base+0x2b8>
   14e80:	ldr	r0, [r5, #108]	; 0x6c
   14e84:	mov	r1, #255	; 0xff
   14e88:	mov	r2, r4
   14e8c:	bl	12920 <memset@plt>
   14e90:	b	14e04 <dim_enter_array@@Base+0x2b8>
   14e94:	ldr	r0, [sp, #16]
   14e98:	mov	r1, #0
   14e9c:	mov	r2, #0
   14ea0:	str	r1, [r0, #844]	; 0x34c
   14ea4:	mov	r0, #0
   14ea8:	mov	r1, #0
   14eac:	bl	154a4 <dim_enter_array@@Base+0x958>
   14eb0:	ldr	r0, [sp, #24]
   14eb4:	ldr	sl, [r0]
   14eb8:	cmp	sl, #1
   14ebc:	blt	14ff0 <dim_enter_array@@Base+0x4a4>
   14ec0:	mov	r6, #0
   14ec4:	mov	r4, #0
   14ec8:	b	14ef8 <dim_enter_array@@Base+0x3ac>
   14ecc:	mov	sl, #0
   14ed0:	str	sl, [r5, #72]	; 0x48
   14ed4:	ldr	r0, [r5, #108]	; 0x6c
   14ed8:	bl	12704 <free@plt>
   14edc:	ldr	r0, [sp, #24]
   14ee0:	str	sl, [r5, #140]	; 0x8c
   14ee4:	str	sl, [r5, #108]	; 0x6c
   14ee8:	ldr	sl, [r0]
   14eec:	add	r6, r6, #1
   14ef0:	cmp	r6, sl
   14ef4:	bge	14ff4 <dim_enter_array@@Base+0x4a8>
   14ef8:	ldr	r0, [r9, r6, lsl #2]
   14efc:	cmn	r0, #1
   14f00:	bne	14eec <dim_enter_array@@Base+0x3a0>
   14f04:	add	r5, r7, r6, lsl #2
   14f08:	ldr	r0, [r5, #4]
   14f0c:	ldr	r1, [r5, #36]	; 0x24
   14f10:	cmp	r0, r1
   14f14:	beq	14ecc <dim_enter_array@@Base+0x380>
   14f18:	mov	r4, #1
   14f1c:	str	r4, [r5, #72]	; 0x48
   14f20:	b	14eec <dim_enter_array@@Base+0x3a0>
   14f24:	cmp	sl, #1
   14f28:	blt	14ff0 <dim_enter_array@@Base+0x4a4>
   14f2c:	mov	r0, #0
   14f30:	cmp	sl, #3
   14f34:	bls	14fc8 <dim_enter_array@@Base+0x47c>
   14f38:	bic	r0, sl, #3
   14f3c:	mov	r2, #1
   14f40:	subs	r1, r0, #4
   14f44:	add	r2, r2, r1, lsr #2
   14f48:	and	r1, r2, #1
   14f4c:	beq	153fc <dim_enter_array@@Base+0x8b0>
   14f50:	sub	r3, r2, r1
   14f54:	ldr	r2, [sp, #20]
   14f58:	vmov.i32	q8, #0	; 0x00000000
   14f5c:	mov	r5, #32
   14f60:	add	r2, r8, r2, lsl #2
   14f64:	add	r6, r2, #88	; 0x58
   14f68:	mov	r2, #0
   14f6c:	sub	r4, r6, #16
   14f70:	subs	r3, r3, #2
   14f74:	add	r2, r2, #8
   14f78:	vst1.32	{d16-d17}, [r4]
   14f7c:	sub	r4, r6, #84	; 0x54
   14f80:	vst1.32	{d16-d17}, [r4]
   14f84:	sub	r4, r6, #68	; 0x44
   14f88:	vst1.32	{d16-d17}, [r4]
   14f8c:	vst1.32	{d16-d17}, [r6], r5
   14f90:	bne	14f6c <dim_enter_array@@Base+0x420>
   14f94:	cmp	r1, #0
   14f98:	beq	14fbc <dim_enter_array@@Base+0x470>
   14f9c:	ldr	r1, [sp, #20]
   14fa0:	vmov.i32	q8, #0	; 0x00000000
   14fa4:	add	r1, r2, r1
   14fa8:	add	r1, r8, r1, lsl #2
   14fac:	add	r2, r1, #72	; 0x48
   14fb0:	add	r1, r1, #4
   14fb4:	vst1.32	{d16-d17}, [r2]
   14fb8:	vst1.32	{d16-d17}, [r1]
   14fbc:	mov	r4, #0
   14fc0:	cmp	sl, r0
   14fc4:	beq	14ff4 <dim_enter_array@@Base+0x4a8>
   14fc8:	ldr	r1, [sp, #20]
   14fcc:	mov	r4, #0
   14fd0:	add	r1, r8, r1, lsl #2
   14fd4:	add	r2, r1, r0, lsl #2
   14fd8:	add	r0, r0, #1
   14fdc:	cmp	sl, r0
   14fe0:	str	r4, [r2, #72]	; 0x48
   14fe4:	str	r4, [r2, #4]
   14fe8:	bne	14fd4 <dim_enter_array@@Base+0x488>
   14fec:	b	14ff4 <dim_enter_array@@Base+0x4a8>
   14ff0:	mov	r4, #0
   14ff4:	ldr	r3, [r8]
   14ff8:	mvn	r0, #0
   14ffc:	cmp	r3, #1
   15000:	str	r0, [r8, #104]	; 0x68
   15004:	mov	r0, #0
   15008:	str	r0, [r8, #68]	; 0x44
   1500c:	blt	15034 <dim_enter_array@@Base+0x4e8>
   15010:	mov	r1, #1
   15014:	add	r2, r8, r0, lsl #2
   15018:	ldr	r2, [r2, #72]	; 0x48
   1501c:	cmp	r2, #0
   15020:	strne	r0, [r8, #104]	; 0x68
   15024:	add	r0, r0, #1
   15028:	strne	r1, [r8, #68]	; 0x44
   1502c:	cmp	r0, r3
   15030:	blt	15014 <dim_enter_array@@Base+0x4c8>
   15034:	ldr	r1, [sp, #16]
   15038:	mov	r0, #1
   1503c:	cmp	sl, #1
   15040:	str	r3, [sp, #24]
   15044:	str	r0, [r1, #840]!	; 0x348
   15048:	str	r1, [sp, #16]
   1504c:	blt	150e0 <dim_enter_array@@Base+0x594>
   15050:	ldr	r2, [sp, #20]
   15054:	mov	r3, #0
   15058:	str	r4, [sp, #4]
   1505c:	add	r1, r8, r2, lsl #2
   15060:	add	r2, r8, r2, lsl #3
   15064:	add	ip, r2, #240	; 0xf0
   15068:	add	lr, r1, #4
   1506c:	mov	r2, ip
   15070:	b	150a0 <dim_enter_array@@Base+0x554>
   15074:	ldr	r4, [r2, #-8]
   15078:	ldr	r7, [r2, #-4]
   1507c:	asr	r9, r5, #31
   15080:	umull	r6, r1, r4, r5
   15084:	mla	r1, r4, r9, r1
   15088:	mla	r7, r7, r5, r1
   1508c:	strd	r6, [r2]
   15090:	add	r3, r3, #1
   15094:	add	r2, r2, #8
   15098:	cmp	r3, sl
   1509c:	bge	150d4 <dim_enter_array@@Base+0x588>
   150a0:	ldr	r5, [lr, r3, lsl #2]
   150a4:	cmp	r3, #0
   150a8:	mul	r0, r0, r5
   150ac:	bne	15074 <dim_enter_array@@Base+0x528>
   150b0:	ldr	r5, [lr]
   150b4:	ldr	r1, [sp, #32]
   150b8:	umull	r4, r6, r1, r5
   150bc:	asr	r7, r5, #31
   150c0:	mla	r7, r1, r7, r6
   150c4:	ldr	r1, [sp, #28]
   150c8:	mla	r5, r1, r5, r7
   150cc:	strd	r4, [ip]
   150d0:	b	15090 <dim_enter_array@@Base+0x544>
   150d4:	ldr	r1, [sp, #16]
   150d8:	ldr	r4, [sp, #4]
   150dc:	str	r0, [r1]
   150e0:	cmp	r4, #0
   150e4:	beq	151c4 <dim_enter_array@@Base+0x678>
   150e8:	cmp	sl, #1
   150ec:	blt	15108 <dim_enter_array@@Base+0x5bc>
   150f0:	ldr	r0, [sp, #20]
   150f4:	lsl	r2, sl, #3
   150f8:	mov	r1, #0
   150fc:	add	r0, r8, r0, lsl #3
   15100:	add	r0, r0, #304	; 0x130
   15104:	bl	12920 <memset@plt>
   15108:	ldr	r0, [sp, #32]
   1510c:	subs	r0, r0, #1
   15110:	ldr	r0, [sp, #28]
   15114:	sbcs	r0, r0, #0
   15118:	blt	152b0 <dim_enter_array@@Base+0x764>
   1511c:	ldr	r1, [sp, #20]
   15120:	movw	r0, #65232	; 0xfed0
   15124:	mov	r2, #0
   15128:	movt	r0, #65535	; 0xffff
   1512c:	sub	ip, r0, r1, lsl #3
   15130:	lsl	lr, r1, #2
   15134:	cmp	sl, #1
   15138:	bge	1515c <dim_enter_array@@Base+0x610>
   1513c:	ldr	r0, [sp, #32]
   15140:	add	r2, r2, #1
   15144:	subs	r0, r2, r0
   15148:	ldr	r0, [sp, #28]
   1514c:	rscs	r0, r0, #0
   15150:	bge	152b0 <dim_enter_array@@Base+0x764>
   15154:	cmp	sl, #1
   15158:	blt	1513c <dim_enter_array@@Base+0x5f0>
   1515c:	mov	r3, #1
   15160:	mov	r0, ip
   15164:	mov	r1, lr
   15168:	mov	r4, sl
   1516c:	b	151a8 <dim_enter_array@@Base+0x65c>
   15170:	add	r6, r6, #4
   15174:	ldr	r6, [r6]
   15178:	mov	r7, r8
   1517c:	add	r1, r1, #4
   15180:	ldr	r5, [r7, -r0]!
   15184:	sub	r0, r0, #8
   15188:	mul	r3, r6, r3
   1518c:	adds	r5, r5, r3
   15190:	str	r5, [r7]
   15194:	ldr	r5, [r7, #4]
   15198:	adc	r5, r5, r3, asr #31
   1519c:	subs	r4, r4, #1
   151a0:	str	r5, [r7, #4]
   151a4:	beq	1513c <dim_enter_array@@Base+0x5f0>
   151a8:	add	r6, r8, r1
   151ac:	ldr	r7, [r6, #72]	; 0x48
   151b0:	cmp	r7, #0
   151b4:	beq	15170 <dim_enter_array@@Base+0x624>
   151b8:	ldr	r7, [r6, #108]	; 0x6c
   151bc:	add	r6, r7, r2, lsl #2
   151c0:	b	15174 <dim_enter_array@@Base+0x628>
   151c4:	ldr	r0, [sp, #20]
   151c8:	ldr	r2, [sp, #8]
   151cc:	cmp	sl, #2
   151d0:	add	lr, r8, r0, lsl #2
   151d4:	add	r5, r8, r0, lsl #3
   151d8:	ldr	r0, [lr, #4]
   151dc:	umull	r1, r3, r2, r0
   151e0:	asr	r7, r0, #31
   151e4:	mla	r3, r2, r7, r3
   151e8:	ldr	r2, [sp, #12]
   151ec:	str	r1, [r5, #304]	; 0x130
   151f0:	mla	r0, r2, r0, r3
   151f4:	str	r0, [r5, #308]	; 0x134
   151f8:	blt	152b0 <dim_enter_array@@Base+0x764>
   151fc:	ldr	r0, [r5, #304]	; 0x130
   15200:	ldr	r1, [r5, #308]	; 0x134
   15204:	sub	r4, sl, #1
   15208:	mov	r6, #1
   1520c:	cmp	sl, #2
   15210:	and	r2, r4, #1
   15214:	beq	1527c <dim_enter_array@@Base+0x730>
   15218:	sub	r9, r4, r2
   1521c:	add	r4, r5, #320	; 0x140
   15220:	mov	r5, #0
   15224:	str	r2, [sp, #32]
   15228:	add	r7, lr, r5, lsl #2
   1522c:	add	r5, r5, #2
   15230:	cmp	r9, r5
   15234:	ldr	r3, [r7, #8]
   15238:	umull	r2, r6, r0, r3
   1523c:	asr	ip, r3, #31
   15240:	mla	r0, r0, ip, r6
   15244:	mla	r1, r1, r3, r0
   15248:	str	r2, [r4, #-8]
   1524c:	str	r1, [r4, #-4]
   15250:	ldr	r3, [r7, #12]
   15254:	umull	r0, r7, r2, r3
   15258:	asr	r6, r3, #31
   1525c:	mla	r2, r2, r6, r7
   15260:	mla	r1, r1, r3, r2
   15264:	str	r0, [r4]
   15268:	str	r1, [r4, #4]
   1526c:	add	r4, r4, #16
   15270:	bne	15228 <dim_enter_array@@Base+0x6dc>
   15274:	ldr	r2, [sp, #32]
   15278:	add	r6, r5, #1
   1527c:	cmp	r2, #0
   15280:	beq	152b0 <dim_enter_array@@Base+0x764>
   15284:	ldr	r2, [sp, #20]
   15288:	add	r2, r6, r2
   1528c:	add	r3, r8, r2, lsl #3
   15290:	add	r2, r8, r2, lsl #2
   15294:	ldr	r2, [r2, #4]
   15298:	umull	r7, r6, r0, r2
   1529c:	asr	r5, r2, #31
   152a0:	mla	r0, r0, r5, r6
   152a4:	mla	r0, r1, r2, r0
   152a8:	str	r7, [r3, #304]	; 0x130
   152ac:	str	r0, [r3, #308]	; 0x134
   152b0:	ldr	r0, [sp, #20]
   152b4:	add	r0, r0, sl
   152b8:	add	r1, r8, r0, lsl #3
   152bc:	ldr	r0, [r1, #296]	; 0x128
   152c0:	ldr	r2, [r1, #300]	; 0x12c
   152c4:	subs	r0, r0, #1
   152c8:	sbcs	r0, r2, #0
   152cc:	blt	153dc <dim_enter_array@@Base+0x890>
   152d0:	ldr	r0, [sp, #24]
   152d4:	sub	r0, r0, #1
   152d8:	add	r2, r8, r0, lsl #3
   152dc:	add	r0, r8, r0, lsl #2
   152e0:	ldr	r0, [r0, #4]
   152e4:	asr	r3, r0, #31
   152e8:	str	r0, [r2, #176]	; 0xb0
   152ec:	subs	r0, sl, #2
   152f0:	str	r3, [r2, #180]	; 0xb4
   152f4:	bmi	1533c <dim_enter_array@@Base+0x7f0>
   152f8:	ldr	r0, [sp, #20]
   152fc:	add	r1, r1, #160	; 0xa0
   15300:	add	r0, r8, r0, lsl #2
   15304:	sub	r0, r0, #4
   15308:	ldr	r2, [r0, sl, lsl #2]
   1530c:	ldrd	r4, [r1, #8]
   15310:	umull	r6, r3, r4, r2
   15314:	asr	r7, r2, #31
   15318:	mla	r3, r4, r7, r3
   1531c:	mla	r7, r5, r2, r3
   15320:	sub	r3, sl, #2
   15324:	sub	r2, sl, #1
   15328:	cmp	r3, #0
   1532c:	mov	sl, r2
   15330:	strd	r6, [r1]
   15334:	sub	r1, r1, #8
   15338:	bgt	15308 <dim_enter_array@@Base+0x7bc>
   1533c:	ldr	r2, [sp, #20]
   15340:	cmp	r2, #1
   15344:	blt	153dc <dim_enter_array@@Base+0x890>
   15348:	add	r0, r8, r2, lsl #3
   1534c:	tst	r2, #1
   15350:	mov	r1, r2
   15354:	add	ip, r0, #176	; 0xb0
   15358:	mov	r0, r2
   1535c:	beq	15388 <dim_enter_array@@Base+0x83c>
   15360:	sub	r1, r0, #1
   15364:	ldrd	r6, [ip]
   15368:	add	r2, r8, r1, lsl #3
   1536c:	ldr	r4, [r2, #176]	; 0xb0
   15370:	ldr	r9, [r2, #180]	; 0xb4
   15374:	umull	r3, r5, r4, r6
   15378:	mla	r7, r4, r7, r5
   1537c:	mla	r5, r9, r6, r7
   15380:	str	r3, [r2, #176]	; 0xb0
   15384:	str	r5, [r2, #180]	; 0xb4
   15388:	cmp	r0, #1
   1538c:	beq	153dc <dim_enter_array@@Base+0x890>
   15390:	add	r2, r8, r1, lsl #3
   15394:	add	r2, r2, #160	; 0xa0
   15398:	ldrd	r4, [ip]
   1539c:	ldr	r6, [r2, #8]
   153a0:	ldr	r0, [r2, #12]
   153a4:	ldm	r2, {r3, lr}
   153a8:	sub	r1, r1, #2
   153ac:	cmp	r1, #0
   153b0:	umull	r8, r7, r6, r4
   153b4:	mla	r5, r6, r5, r7
   153b8:	mla	r9, r0, r4, r5
   153bc:	strd	r8, [r2, #8]
   153c0:	ldm	ip, {r0, r5}
   153c4:	umull	r4, r6, r3, r0
   153c8:	mla	r3, r3, r5, r6
   153cc:	mla	r5, lr, r0, r3
   153d0:	strd	r4, [r2]
   153d4:	sub	r2, r2, #16
   153d8:	bgt	15398 <dim_enter_array@@Base+0x84c>
   153dc:	sub	sp, fp, #28
   153e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153e4:	mov	r0, #1
   153e8:	mov	r4, #0
   153ec:	str	r0, [sp, #32]
   153f0:	mov	r0, #0
   153f4:	str	r0, [sp, #28]
   153f8:	b	14ff8 <dim_enter_array@@Base+0x4ac>
   153fc:	mov	r2, #0
   15400:	cmp	r1, #0
   15404:	bne	14f9c <dim_enter_array@@Base+0x450>
   15408:	b	14fbc <dim_enter_array@@Base+0x470>
   1540c:	ldr	r0, [pc, #120]	; 1548c <dim_enter_array@@Base+0x940>
   15410:	ldr	r1, [pc, #120]	; 15490 <dim_enter_array@@Base+0x944>
   15414:	ldr	r3, [pc, #120]	; 15494 <dim_enter_array@@Base+0x948>
   15418:	movw	r2, #386	; 0x182
   1541c:	add	r0, pc, r0
   15420:	add	r1, pc, r1
   15424:	add	r3, pc, r3
   15428:	bl	12ac4 <__assert_fail@plt>
   1542c:	ldr	r0, [pc, #100]	; 15498 <dim_enter_array@@Base+0x94c>
   15430:	ldr	r1, [pc, #100]	; 1549c <dim_enter_array@@Base+0x950>
   15434:	ldr	r3, [pc, #100]	; 154a0 <dim_enter_array@@Base+0x954>
   15438:	movw	r2, #402	; 0x192
   1543c:	add	r0, pc, r0
   15440:	add	r1, pc, r1
   15444:	add	r3, pc, r3
   15448:	bl	12ac4 <__assert_fail@plt>
   1544c:	ldr	r0, [pc, #28]	; 15470 <dim_enter_array@@Base+0x924>
   15450:	ldr	r1, [pc, #28]	; 15474 <dim_enter_array@@Base+0x928>
   15454:	ldr	r3, [pc, #28]	; 15478 <dim_enter_array@@Base+0x92c>
   15458:	movw	r2, #349	; 0x15d
   1545c:	add	r0, pc, r0
   15460:	add	r1, pc, r1
   15464:	add	r3, pc, r3
   15468:	bl	12ac4 <__assert_fail@plt>
   1546c:	andeq	r8, r1, ip, asr #12
   15470:	andeq	r5, r0, r5, asr #12
   15474:	andeq	r5, r0, r6, ror r6
   15478:	andeq	r5, r0, r0, lsl r7
   1547c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   15480:	strdeq	r8, [r1], -r4
   15484:	strdeq	r5, [r0], -sp
   15488:	andeq	r5, r0, r6, ror ip
   1548c:	andeq	r5, r0, r5, lsl #13
   15490:			; <UNDEFINED> instruction: 0x000056b6
   15494:	andeq	r5, r0, r0, asr r7
   15498:	andeq	r5, r0, pc, asr #14
   1549c:	muleq	r0, r6, r6
   154a0:	andeq	r5, r0, r0, lsr r7
   154a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154a8:	add	fp, sp, #28
   154ac:	sub	sp, sp, #44	; 0x2c
   154b0:	str	r2, [sp]
   154b4:	mov	r8, r1
   154b8:	mov	r9, r0
   154bc:	sub	r1, fp, #32
   154c0:	ldr	r7, [pc, #1076]	; 158fc <dim_enter_array@@Base+0xdb0>
   154c4:	ldr	r7, [pc, r7]
   154c8:	add	r5, r7, #144	; 0x90
   154cc:	mov	r0, r5
   154d0:	bl	12794 <coda_cursor_get_type_class@plt>
   154d4:	cmp	r0, #0
   154d8:	beq	154e0 <dim_enter_array@@Base+0x994>
   154dc:	bl	189c0 <handle_coda_error@@Base>
   154e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   154e4:	sub	r1, r0, #4
   154e8:	cmp	r1, #2
   154ec:	bcc	155cc <dim_enter_array@@Base+0xa80>
   154f0:	cmp	r0, #0
   154f4:	beq	1560c <dim_enter_array@@Base+0xac0>
   154f8:	cmp	r0, #1
   154fc:	bne	1589c <dim_enter_array@@Base+0xd50>
   15500:	add	r0, r8, r8, lsl #2
   15504:	add	r4, r7, r0, lsl #4
   15508:	ldr	r0, [r7, #3360]	; 0xd20
   1550c:	ldr	r6, [r4, #800]	; 0x320
   15510:	cmp	r0, r8
   15514:	bne	156fc <dim_enter_array@@Base+0xbb0>
   15518:	add	r8, sp, #8
   1551c:	add	r1, sp, #4
   15520:	mov	r0, r5
   15524:	mov	r2, r8
   15528:	bl	12998 <coda_cursor_get_array_dim@plt>
   1552c:	cmp	r0, #0
   15530:	beq	15538 <dim_enter_array@@Base+0x9ec>
   15534:	bl	189c0 <handle_coda_error@@Base>
   15538:	mov	r0, r4
   1553c:	ldr	r1, [sp, #4]
   15540:	ldr	r2, [r0, #804]!	; 0x324
   15544:	cmp	r1, r2
   15548:	bne	158dc <dim_enter_array@@Base+0xd90>
   1554c:	cmp	r1, #1
   15550:	blt	15808 <dim_enter_array@@Base+0xcbc>
   15554:	ldr	r1, [pc, #932]	; 15900 <dim_enter_array@@Base+0xdb4>
   15558:	add	r2, r4, #808	; 0x328
   1555c:	add	r3, r4, #844	; 0x34c
   15560:	mov	r7, #0
   15564:	ldr	r1, [pc, r1]
   15568:	add	ip, r1, r6, lsl #2
   1556c:	b	15594 <dim_enter_array@@Base+0xa48>
   15570:	cmp	r5, r6
   15574:	strlt	r6, [r4, #4]
   15578:	ldr	r1, [r4, #36]	; 0x24
   1557c:	cmp	r1, r6
   15580:	strgt	r6, [r4, #36]	; 0x24
   15584:	ldr	r1, [r0]
   15588:	add	r7, r7, #1
   1558c:	cmp	r7, r1
   15590:	bge	15808 <dim_enter_array@@Base+0xcbc>
   15594:	ldr	r6, [r2, r7, lsl #2]
   15598:	cmn	r6, #1
   1559c:	bne	15584 <dim_enter_array@@Base+0xa38>
   155a0:	add	r4, ip, r7, lsl #2
   155a4:	ldr	r6, [r8, r7, lsl #2]
   155a8:	ldr	r1, [r3]
   155ac:	ldr	r5, [r4, #108]	; 0x6c
   155b0:	str	r6, [r5, r1, lsl #2]
   155b4:	ldr	r5, [r4, #4]
   155b8:	cmn	r5, #1
   155bc:	bne	15570 <dim_enter_array@@Base+0xa24>
   155c0:	str	r6, [r4, #4]
   155c4:	str	r6, [r4, #36]	; 0x24
   155c8:	b	15584 <dim_enter_array@@Base+0xa38>
   155cc:	ldr	r1, [r7, #3360]	; 0xd20
   155d0:	cmp	r1, r8
   155d4:	bne	158bc <dim_enter_array@@Base+0xd70>
   155d8:	cmp	r0, #4
   155dc:	bne	15670 <dim_enter_array@@Base+0xb24>
   155e0:	add	r1, sp, #4
   155e4:	mov	r0, r5
   155e8:	bl	1289c <coda_cursor_get_string_length@plt>
   155ec:	cmp	r0, #0
   155f0:	beq	155f8 <dim_enter_array@@Base+0xaac>
   155f4:	bl	189c0 <handle_coda_error@@Base>
   155f8:	ldr	r0, [sp, #4]
   155fc:	str	r0, [sp, #8]
   15600:	asr	r0, r0, #31
   15604:	str	r0, [sp, #12]
   15608:	b	15688 <dim_enter_array@@Base+0xb3c>
   1560c:	ldr	r0, [sp]
   15610:	add	r2, sp, #8
   15614:	add	r4, r7, r0, lsl #2
   15618:	mov	r0, r5
   1561c:	ldr	r1, [r4, #3492]!	; 0xda4
   15620:	bl	126a4 <coda_cursor_get_record_field_available_status@plt>
   15624:	cmp	r0, #0
   15628:	beq	15630 <dim_enter_array@@Base+0xae4>
   1562c:	bl	189c0 <handle_coda_error@@Base>
   15630:	ldr	r0, [sp, #8]
   15634:	cmp	r0, #0
   15638:	beq	15780 <dim_enter_array@@Base+0xc34>
   1563c:	ldr	r1, [r4]
   15640:	mov	r0, r5
   15644:	bl	1280c <coda_cursor_goto_record_field_by_index@plt>
   15648:	cmp	r0, #0
   1564c:	beq	15654 <dim_enter_array@@Base+0xb08>
   15650:	bl	189c0 <handle_coda_error@@Base>
   15654:	ldr	r1, [sp]
   15658:	add	r0, r9, #1
   1565c:	add	r2, r1, #1
   15660:	mov	r1, r8
   15664:	bl	154a4 <dim_enter_array@@Base+0x958>
   15668:	mov	r0, r5
   1566c:	b	15890 <dim_enter_array@@Base+0xd44>
   15670:	add	r1, sp, #8
   15674:	mov	r0, r5
   15678:	bl	1262c <coda_cursor_get_byte_size@plt>
   1567c:	cmp	r0, #0
   15680:	beq	15688 <dim_enter_array@@Base+0xb3c>
   15684:	bl	189c0 <handle_coda_error@@Base>
   15688:	add	r0, r8, r8, lsl #2
   1568c:	add	r0, r7, r0, lsl #4
   15690:	ldr	r1, [r0, #800]	; 0x320
   15694:	ldr	r3, [r0, #844]	; 0x34c
   15698:	ldr	r0, [pc, #620]	; 1590c <dim_enter_array@@Base+0xdc0>
   1569c:	ldr	r0, [pc, r0]
   156a0:	ldr	r2, [sp, #12]
   156a4:	add	r0, r0, r1, lsl #2
   156a8:	ldr	r1, [sp, #8]
   156ac:	ldr	r7, [r0, #108]	; 0x6c
   156b0:	str	r1, [r7, r3, lsl #2]
   156b4:	mov	r3, r0
   156b8:	ldr	r7, [r3, #4]!
   156bc:	cmn	r7, #1
   156c0:	beq	156e8 <dim_enter_array@@Base+0xb9c>
   156c4:	subs	r6, r7, r1
   156c8:	rscs	r7, r2, r7, asr #31
   156cc:	strlt	r1, [r3]
   156d0:	ldr	r3, [r0, #36]!	; 0x24
   156d4:	subs	r7, r1, r3
   156d8:	sbcs	r2, r2, r3, asr #31
   156dc:	strlt	r1, [r0]
   156e0:	sub	sp, fp, #28
   156e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156e8:	add	r0, r0, #36	; 0x24
   156ec:	str	r1, [r3]
   156f0:	str	r1, [r0]
   156f4:	sub	sp, fp, #28
   156f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156fc:	cmp	r8, #0
   15700:	moveq	r0, #0
   15704:	streq	r0, [r7, #844]	; 0x34c
   15708:	ldr	r1, [r4, #840]	; 0x348
   1570c:	ldr	r0, [r4, #844]	; 0x34c
   15710:	mul	r1, r1, r0
   15714:	str	r1, [r4, #924]!	; 0x39c
   15718:	ldr	r1, [r4, #-120]	; 0xffffff88
   1571c:	cmp	r1, #1
   15720:	blt	15810 <dim_enter_array@@Base+0xcc4>
   15724:	ldr	r2, [pc, #472]	; 15904 <dim_enter_array@@Base+0xdb8>
   15728:	add	r1, r1, r6
   1572c:	add	r3, r6, #27
   15730:	ldr	r2, [pc, r2]
   15734:	add	r2, r2, r6, lsl #2
   15738:	mov	r6, #1
   1573c:	add	r2, r2, #72	; 0x48
   15740:	b	15768 <dim_enter_array@@Base+0xc1c>
   15744:	sub	r7, r2, #68	; 0x44
   15748:	ldr	r7, [r7]
   1574c:	add	r2, r2, #4
   15750:	mul	r6, r7, r6
   15754:	add	r7, r3, #1
   15758:	sub	r3, r3, #26
   1575c:	cmp	r3, r1
   15760:	mov	r3, r7
   15764:	bge	15800 <dim_enter_array@@Base+0xcb4>
   15768:	ldr	r7, [r2]
   1576c:	cmp	r7, #0
   15770:	beq	15744 <dim_enter_array@@Base+0xbf8>
   15774:	ldr	r7, [r2, #36]	; 0x24
   15778:	add	r7, r7, r0, lsl #2
   1577c:	b	15748 <dim_enter_array@@Base+0xbfc>
   15780:	ldr	r0, [r7, #3360]	; 0xd20
   15784:	add	r0, r0, r0, lsl #2
   15788:	add	r3, r7, r0, lsl #4
   1578c:	mov	r0, r3
   15790:	ldr	r5, [r0, #804]!	; 0x324
   15794:	cmp	r5, #1
   15798:	blt	15808 <dim_enter_array@@Base+0xcbc>
   1579c:	ldr	r1, [r0, #-4]
   157a0:	ldr	r2, [pc, #352]	; 15908 <dim_enter_array@@Base+0xdbc>
   157a4:	mov	r7, #0
   157a8:	mov	r6, #0
   157ac:	ldr	r2, [pc, r2]
   157b0:	add	ip, r2, r1, lsl #2
   157b4:	add	r2, r3, #808	; 0x328
   157b8:	add	r3, r3, #844	; 0x34c
   157bc:	b	157cc <dim_enter_array@@Base+0xc80>
   157c0:	add	r6, r6, #1
   157c4:	cmp	r6, r5
   157c8:	bge	15808 <dim_enter_array@@Base+0xcbc>
   157cc:	ldr	r4, [r2, r6, lsl #2]
   157d0:	cmn	r4, #1
   157d4:	bne	157c0 <dim_enter_array@@Base+0xc74>
   157d8:	add	r5, ip, r6, lsl #2
   157dc:	ldr	r1, [r3]
   157e0:	ldr	r4, [r5, #108]	; 0x6c
   157e4:	str	r7, [r4, r1, lsl #2]
   157e8:	ldr	r1, [r5, #4]
   157ec:	cmn	r1, #1
   157f0:	streq	r7, [r5, #4]
   157f4:	str	r7, [r5, #36]	; 0x24
   157f8:	ldr	r5, [r0]
   157fc:	b	157c0 <dim_enter_array@@Base+0xc74>
   15800:	cmp	r6, #1
   15804:	bge	15814 <dim_enter_array@@Base+0xcc8>
   15808:	sub	sp, fp, #28
   1580c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15810:	mov	r6, #1
   15814:	mov	r0, r5
   15818:	mov	r7, r9
   1581c:	mov	sl, r5
   15820:	bl	127dc <coda_cursor_goto_first_array_element@plt>
   15824:	cmp	r0, #0
   15828:	beq	15830 <dim_enter_array@@Base+0xce4>
   1582c:	bl	189c0 <handle_coda_error@@Base>
   15830:	add	r5, r8, #1
   15834:	sub	r9, r6, #1
   15838:	add	r7, r7, #1
   1583c:	mov	r8, #0
   15840:	b	1585c <dim_enter_array@@Base+0xd10>
   15844:	ldr	r0, [r4]
   15848:	add	r0, r0, #1
   1584c:	str	r0, [r4]
   15850:	add	r8, r8, #1
   15854:	cmp	r6, r8
   15858:	beq	1588c <dim_enter_array@@Base+0xd40>
   1585c:	ldr	r2, [sp]
   15860:	mov	r0, r7
   15864:	mov	r1, r5
   15868:	bl	154a4 <dim_enter_array@@Base+0x958>
   1586c:	cmp	r8, r9
   15870:	bge	15850 <dim_enter_array@@Base+0xd04>
   15874:	mov	r0, sl
   15878:	bl	128d8 <coda_cursor_goto_next_array_element@plt>
   1587c:	cmp	r0, #0
   15880:	beq	15844 <dim_enter_array@@Base+0xcf8>
   15884:	bl	189c0 <handle_coda_error@@Base>
   15888:	b	15844 <dim_enter_array@@Base+0xcf8>
   1588c:	mov	r0, sl
   15890:	bl	1286c <coda_cursor_goto_parent@plt>
   15894:	sub	sp, fp, #28
   15898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1589c:	ldr	r0, [pc, #132]	; 15928 <dim_enter_array@@Base+0xddc>
   158a0:	ldr	r1, [pc, #132]	; 1592c <dim_enter_array@@Base+0xde0>
   158a4:	ldr	r3, [pc, #132]	; 15930 <dim_enter_array@@Base+0xde4>
   158a8:	movw	r2, #294	; 0x126
   158ac:	add	r0, pc, r0
   158b0:	add	r1, pc, r1
   158b4:	add	r3, pc, r3
   158b8:	bl	12ac4 <__assert_fail@plt>
   158bc:	ldr	r0, [pc, #88]	; 1591c <dim_enter_array@@Base+0xdd0>
   158c0:	ldr	r1, [pc, #88]	; 15920 <dim_enter_array@@Base+0xdd4>
   158c4:	ldr	r3, [pc, #88]	; 15924 <dim_enter_array@@Base+0xdd8>
   158c8:	mov	r2, #252	; 0xfc
   158cc:	add	r0, pc, r0
   158d0:	add	r1, pc, r1
   158d4:	add	r3, pc, r3
   158d8:	bl	12ac4 <__assert_fail@plt>
   158dc:	ldr	r0, [pc, #44]	; 15910 <dim_enter_array@@Base+0xdc4>
   158e0:	ldr	r1, [pc, #44]	; 15914 <dim_enter_array@@Base+0xdc8>
   158e4:	ldr	r3, [pc, #44]	; 15918 <dim_enter_array@@Base+0xdcc>
   158e8:	mov	r2, #125	; 0x7d
   158ec:	add	r0, pc, r0
   158f0:	add	r1, pc, r1
   158f4:	add	r3, pc, r3
   158f8:	bl	12ac4 <__assert_fail@plt>
   158fc:	andeq	r7, r1, r8, ror #25
   15900:	andeq	r7, r1, r8, ror ip
   15904:	andeq	r7, r1, ip, lsr #21
   15908:	andeq	r7, r1, r0, lsr sl
   1590c:	andeq	r7, r1, r0, asr #22
   15910:	andeq	r5, r0, sp, lsl #6
   15914:	andeq	r5, r0, r6, ror #3
   15918:	andeq	r5, r0, r6, lsr #6
   1591c:	andeq	r5, r0, r9, ror r3
   15920:	andeq	r5, r0, r6, lsl #4
   15924:	andeq	r5, r0, r6, asr #6
   15928:	strdeq	r5, [r0], -r5	; <UNPREDICTABLE>
   1592c:	andeq	r5, r0, r6, lsr #4
   15930:	andeq	r5, r0, r6, ror #6

00015934 <dim_leave_array@@Base>:
   15934:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15938:	add	fp, sp, #24
   1593c:	ldr	r0, [pc, #288]	; 15a64 <dim_leave_array@@Base+0x130>
   15940:	ldr	r0, [pc, r0]
   15944:	ldr	r1, [r0, #3360]	; 0xd20
   15948:	cmn	r1, #1
   1594c:	ble	15a44 <dim_leave_array@@Base+0x110>
   15950:	add	r1, r1, r1, lsl #2
   15954:	add	r6, r0, r1, lsl #4
   15958:	ldr	r0, [r6, #804]!	; 0x324
   1595c:	ldr	r4, [r6, #-4]
   15960:	ldr	r8, [pc, #256]	; 15a68 <dim_leave_array@@Base+0x134>
   15964:	cmp	r0, #1
   15968:	ldr	r8, [pc, r8]
   1596c:	ldr	r1, [r8]
   15970:	sub	r1, r1, r0
   15974:	str	r1, [r8]
   15978:	blt	159b8 <dim_leave_array@@Base+0x84>
   1597c:	add	r7, r8, r4, lsl #2
   15980:	mov	r5, #0
   15984:	b	15994 <dim_leave_array@@Base+0x60>
   15988:	add	r5, r5, #1
   1598c:	cmp	r5, r0
   15990:	bge	159b4 <dim_leave_array@@Base+0x80>
   15994:	add	r1, r7, r5, lsl #2
   15998:	ldr	r2, [r1, #72]	; 0x48
   1599c:	cmp	r2, #0
   159a0:	beq	15988 <dim_leave_array@@Base+0x54>
   159a4:	ldr	r0, [r1, #108]	; 0x6c
   159a8:	bl	12704 <free@plt>
   159ac:	ldr	r0, [r6]
   159b0:	b	15988 <dim_leave_array@@Base+0x54>
   159b4:	ldr	r1, [r8]
   159b8:	mvn	r2, #0
   159bc:	cmp	r1, #1
   159c0:	str	r2, [r8, #104]	; 0x68
   159c4:	mov	r2, #0
   159c8:	str	r2, [r8, #68]	; 0x44
   159cc:	blt	159f4 <dim_leave_array@@Base+0xc0>
   159d0:	mov	r3, #1
   159d4:	add	r7, r8, r2, lsl #2
   159d8:	ldr	r7, [r7, #72]	; 0x48
   159dc:	cmp	r7, #0
   159e0:	strne	r2, [r8, #104]	; 0x68
   159e4:	add	r2, r2, #1
   159e8:	strne	r3, [r8, #68]	; 0x44
   159ec:	cmp	r2, r1
   159f0:	blt	159d4 <dim_leave_array@@Base+0xa0>
   159f4:	add	r0, r4, r0
   159f8:	add	r0, r8, r0, lsl #3
   159fc:	ldr	r1, [r0, #296]	; 0x128
   15a00:	ldr	r0, [r0, #300]	; 0x12c
   15a04:	subs	r1, r1, #1
   15a08:	sbcs	r0, r0, #0
   15a0c:	cmpge	r4, #1
   15a10:	blt	15a40 <dim_leave_array@@Base+0x10c>
   15a14:	add	r0, r8, r4, lsl #3
   15a18:	add	r5, r0, #168	; 0xa8
   15a1c:	add	r6, r0, #176	; 0xb0
   15a20:	ldrd	r0, [r5]
   15a24:	ldrd	r2, [r6]
   15a28:	bl	1a5dc <main@@Base+0x1bd0>
   15a2c:	sub	r4, r4, #1
   15a30:	strd	r0, [r5]
   15a34:	sub	r5, r5, #8
   15a38:	cmp	r4, #0
   15a3c:	bgt	15a20 <dim_leave_array@@Base+0xec>
   15a40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a44:	ldr	r0, [pc, #32]	; 15a6c <dim_leave_array@@Base+0x138>
   15a48:	ldr	r1, [pc, #32]	; 15a70 <dim_leave_array@@Base+0x13c>
   15a4c:	ldr	r3, [pc, #32]	; 15a74 <dim_leave_array@@Base+0x140>
   15a50:	movw	r2, #579	; 0x243
   15a54:	add	r0, pc, r0
   15a58:	add	r1, pc, r1
   15a5c:	add	r3, pc, r3
   15a60:	bl	12ac4 <__assert_fail@plt>
   15a64:	andeq	r7, r1, ip, ror #16
   15a68:	andeq	r7, r1, r4, ror r8
   15a6c:	andeq	r5, r0, r0, ror r1
   15a70:	andeq	r5, r0, lr, ror r0
   15a74:	andeq	r5, r0, r6, lsl #3

00015a78 <dim_record_field_available@@Base>:
   15a78:	mov	r0, #0
   15a7c:	mov	r1, #0
   15a80:	mov	r2, #0
   15a84:	b	15a88 <dim_record_field_available@@Base+0x10>
   15a88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a8c:	add	fp, sp, #28
   15a90:	sub	sp, sp, #12
   15a94:	ldr	r5, [pc, #584]	; 15ce4 <dim_record_field_available@@Base+0x26c>
   15a98:	mov	r6, r1
   15a9c:	mov	r7, r0
   15aa0:	add	r1, sp, #8
   15aa4:	mov	r9, r2
   15aa8:	ldr	r5, [pc, r5]
   15aac:	add	r0, r5, #144	; 0x90
   15ab0:	str	r0, [sp]
   15ab4:	bl	12794 <coda_cursor_get_type_class@plt>
   15ab8:	cmp	r0, #0
   15abc:	beq	15ac4 <dim_record_field_available@@Base+0x4c>
   15ac0:	bl	189c0 <handle_coda_error@@Base>
   15ac4:	ldr	r0, [sp, #8]
   15ac8:	cmp	r0, #0
   15acc:	beq	15b74 <dim_record_field_available@@Base+0xfc>
   15ad0:	cmp	r0, #1
   15ad4:	bne	15ca4 <dim_record_field_available@@Base+0x22c>
   15ad8:	ldr	r0, [r5, #3360]	; 0xd20
   15adc:	cmp	r0, r6
   15ae0:	ble	15cc4 <dim_record_field_available@@Base+0x24c>
   15ae4:	add	r0, r6, r6, lsl #2
   15ae8:	cmp	r6, #0
   15aec:	add	sl, r5, r0, lsl #4
   15af0:	moveq	r0, #0
   15af4:	ldr	r3, [sl, #800]	; 0x320
   15af8:	streq	r0, [r5, #844]	; 0x34c
   15afc:	ldr	r1, [sl, #840]	; 0x348
   15b00:	ldr	r0, [sl, #844]	; 0x34c
   15b04:	mul	r1, r1, r0
   15b08:	str	r1, [sl, #924]!	; 0x39c
   15b0c:	ldr	r1, [sl, #-120]	; 0xffffff88
   15b10:	cmp	r1, #1
   15b14:	blt	15c00 <dim_record_field_available@@Base+0x188>
   15b18:	ldr	r2, [pc, #456]	; 15ce8 <dim_record_field_available@@Base+0x270>
   15b1c:	add	r1, r1, r3
   15b20:	mov	r5, #1
   15b24:	ldr	r2, [pc, r2]
   15b28:	add	r2, r2, r3, lsl #2
   15b2c:	add	r3, r3, #27
   15b30:	add	r2, r2, #72	; 0x48
   15b34:	b	15b5c <dim_record_field_available@@Base+0xe4>
   15b38:	sub	r4, r2, #68	; 0x44
   15b3c:	ldr	r4, [r4]
   15b40:	add	r2, r2, #4
   15b44:	mul	r5, r4, r5
   15b48:	add	r4, r3, #1
   15b4c:	sub	r3, r3, #26
   15b50:	cmp	r3, r1
   15b54:	mov	r3, r4
   15b58:	bge	15bf4 <dim_record_field_available@@Base+0x17c>
   15b5c:	ldr	r4, [r2]
   15b60:	cmp	r4, #0
   15b64:	beq	15b38 <dim_record_field_available@@Base+0xc0>
   15b68:	ldr	r4, [r2, #36]	; 0x24
   15b6c:	add	r4, r4, r0, lsl #2
   15b70:	b	15b3c <dim_record_field_available@@Base+0xc4>
   15b74:	add	r4, r5, r9, lsl #2
   15b78:	ldr	r0, [sp]
   15b7c:	add	r2, sp, #4
   15b80:	ldr	r1, [r4, #3492]!	; 0xda4
   15b84:	bl	126a4 <coda_cursor_get_record_field_available_status@plt>
   15b88:	cmp	r0, #0
   15b8c:	beq	15b94 <dim_record_field_available@@Base+0x11c>
   15b90:	bl	189c0 <handle_coda_error@@Base>
   15b94:	ldr	r0, [sp, #4]
   15b98:	cmp	r0, #0
   15b9c:	beq	15c98 <dim_record_field_available@@Base+0x220>
   15ba0:	ldr	r0, [r5, #3748]	; 0xea4
   15ba4:	sub	r0, r0, #1
   15ba8:	cmp	r0, r9
   15bac:	beq	15c84 <dim_record_field_available@@Base+0x20c>
   15bb0:	ldr	r1, [r4]
   15bb4:	ldr	r0, [sp]
   15bb8:	bl	1280c <coda_cursor_goto_record_field_by_index@plt>
   15bbc:	cmp	r0, #0
   15bc0:	beq	15bc8 <dim_record_field_available@@Base+0x150>
   15bc4:	bl	189c0 <handle_coda_error@@Base>
   15bc8:	add	r0, r7, #1
   15bcc:	add	r2, r9, #1
   15bd0:	mov	r1, r6
   15bd4:	bl	15a88 <dim_record_field_available@@Base+0x10>
   15bd8:	str	r0, [sp, #4]
   15bdc:	ldr	r0, [sp]
   15be0:	bl	1286c <coda_cursor_goto_parent@plt>
   15be4:	ldr	r0, [sp, #4]
   15be8:	cmp	r0, #0
   15bec:	bne	15c84 <dim_record_field_available@@Base+0x20c>
   15bf0:	b	15c98 <dim_record_field_available@@Base+0x220>
   15bf4:	cmp	r5, #1
   15bf8:	bge	15c04 <dim_record_field_available@@Base+0x18c>
   15bfc:	b	15c98 <dim_record_field_available@@Base+0x220>
   15c00:	mov	r5, #1
   15c04:	ldr	r0, [sp]
   15c08:	bl	127dc <coda_cursor_goto_first_array_element@plt>
   15c0c:	cmp	r0, #0
   15c10:	beq	15c18 <dim_record_field_available@@Base+0x1a0>
   15c14:	bl	189c0 <handle_coda_error@@Base>
   15c18:	add	r6, r6, #1
   15c1c:	sub	r4, r5, #1
   15c20:	add	r7, r7, #1
   15c24:	mov	r8, #0
   15c28:	b	15c44 <dim_record_field_available@@Base+0x1cc>
   15c2c:	ldr	r0, [sl]
   15c30:	add	r0, r0, #1
   15c34:	str	r0, [sl]
   15c38:	add	r8, r8, #1
   15c3c:	cmp	r5, r8
   15c40:	beq	15c90 <dim_record_field_available@@Base+0x218>
   15c44:	mov	r0, r7
   15c48:	mov	r1, r6
   15c4c:	mov	r2, r9
   15c50:	bl	15a88 <dim_record_field_available@@Base+0x10>
   15c54:	cmp	r0, #0
   15c58:	bne	15c7c <dim_record_field_available@@Base+0x204>
   15c5c:	cmp	r8, r4
   15c60:	bge	15c38 <dim_record_field_available@@Base+0x1c0>
   15c64:	ldr	r0, [sp]
   15c68:	bl	128d8 <coda_cursor_goto_next_array_element@plt>
   15c6c:	cmp	r0, #0
   15c70:	beq	15c2c <dim_record_field_available@@Base+0x1b4>
   15c74:	bl	189c0 <handle_coda_error@@Base>
   15c78:	b	15c2c <dim_record_field_available@@Base+0x1b4>
   15c7c:	ldr	r0, [sp]
   15c80:	bl	1286c <coda_cursor_goto_parent@plt>
   15c84:	mov	r0, #1
   15c88:	sub	sp, fp, #28
   15c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c90:	ldr	r0, [sp]
   15c94:	bl	1286c <coda_cursor_goto_parent@plt>
   15c98:	mov	r0, #0
   15c9c:	sub	sp, fp, #28
   15ca0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ca4:	ldr	r0, [pc, #64]	; 15cec <dim_record_field_available@@Base+0x274>
   15ca8:	ldr	r1, [pc, #64]	; 15cf0 <dim_record_field_available@@Base+0x278>
   15cac:	ldr	r3, [pc, #64]	; 15cf4 <dim_record_field_available@@Base+0x27c>
   15cb0:	movw	r2, #729	; 0x2d9
   15cb4:	add	r0, pc, r0
   15cb8:	add	r1, pc, r1
   15cbc:	add	r3, pc, r3
   15cc0:	bl	12ac4 <__assert_fail@plt>
   15cc4:	ldr	r0, [pc, #44]	; 15cf8 <dim_record_field_available@@Base+0x280>
   15cc8:	ldr	r1, [pc, #44]	; 15cfc <dim_record_field_available@@Base+0x284>
   15ccc:	ldr	r3, [pc, #44]	; 15d00 <dim_record_field_available@@Base+0x288>
   15cd0:	movw	r2, #638	; 0x27e
   15cd4:	add	r0, pc, r0
   15cd8:	add	r1, pc, r1
   15cdc:	add	r3, pc, r3
   15ce0:	bl	12ac4 <__assert_fail@plt>
   15ce4:	andeq	r7, r1, r4, lsl #14
   15ce8:			; <UNDEFINED> instruction: 0x000176b8
   15cec:	andeq	r4, r0, sp, ror #27
   15cf0:	andeq	r4, r0, lr, lsl lr
   15cf4:	ldrdeq	r4, [r0], -r8
   15cf8:	muleq	r0, r9, pc	; <UNPREDICTABLE>
   15cfc:	strdeq	r4, [r0], -lr
   15d00:			; <UNDEFINED> instruction: 0x00004fb8

00015d04 <codadump_filter_create@@Base>:
   15d04:	push	{r4, r5, r6, r7, fp, lr}
   15d08:	add	fp, sp, #16
   15d0c:	sub	sp, sp, #16
   15d10:	mov	r1, #0
   15d14:	cmp	r0, #0
   15d18:	str	r0, [sp, #8]
   15d1c:	str	r1, [sp, #4]
   15d20:	str	r1, [sp, #12]
   15d24:	beq	15d84 <codadump_filter_create@@Base+0x80>
   15d28:	ldrb	r1, [r0]
   15d2c:	cmp	r1, #0
   15d30:	beq	15d84 <codadump_filter_create@@Base+0x80>
   15d34:	add	r4, sp, #12
   15d38:	add	r5, sp, #8
   15d3c:	add	r6, sp, #4
   15d40:	mov	r7, #0
   15d44:	mov	r1, r4
   15d48:	mov	r2, r5
   15d4c:	bl	15f08 <codadump_filter_get_next_filter@@Base+0x40>
   15d50:	ldr	r1, [sp, #12]
   15d54:	cmp	r1, #0
   15d58:	beq	15d7c <codadump_filter_create@@Base+0x78>
   15d5c:	mov	r0, r6
   15d60:	bl	161a4 <codadump_filter_get_next_filter@@Base+0x2dc>
   15d64:	ldr	r0, [sp, #8]
   15d68:	str	r7, [sp, #12]
   15d6c:	ldrb	r1, [r0]
   15d70:	cmp	r1, #0
   15d74:	bne	15d44 <codadump_filter_create@@Base+0x40>
   15d78:	b	15d84 <codadump_filter_create@@Base+0x80>
   15d7c:	add	r0, sp, #4
   15d80:	bl	15d90 <codadump_filter_remove@@Base>
   15d84:	ldr	r0, [sp, #4]
   15d88:	sub	sp, fp, #16
   15d8c:	pop	{r4, r5, r6, r7, fp, pc}

00015d90 <codadump_filter_remove@@Base>:
   15d90:	push	{r4, sl, fp, lr}
   15d94:	add	fp, sp, #8
   15d98:	cmp	r0, #0
   15d9c:	beq	15e1c <codadump_filter_remove@@Base+0x8c>
   15da0:	mov	r4, r0
   15da4:	ldr	r0, [r0]
   15da8:	cmp	r0, #0
   15dac:	popeq	{r4, sl, fp, pc}
   15db0:	mov	r1, r0
   15db4:	ldr	r2, [r1, #8]!
   15db8:	cmp	r2, #0
   15dbc:	beq	15dcc <codadump_filter_remove@@Base+0x3c>
   15dc0:	mov	r0, r1
   15dc4:	bl	15d90 <codadump_filter_remove@@Base>
   15dc8:	ldr	r0, [r4]
   15dcc:	mov	r1, r0
   15dd0:	ldr	r2, [r1, #4]!
   15dd4:	cmp	r2, #0
   15dd8:	beq	15de8 <codadump_filter_remove@@Base+0x58>
   15ddc:	mov	r0, r1
   15de0:	bl	15d90 <codadump_filter_remove@@Base>
   15de4:	ldr	r0, [r4]
   15de8:	ldr	r1, [r0]
   15dec:	cmp	r1, #0
   15df0:	beq	15e0c <codadump_filter_remove@@Base+0x7c>
   15df4:	mov	r0, r1
   15df8:	bl	12704 <free@plt>
   15dfc:	ldr	r0, [r4]
   15e00:	mov	r1, #0
   15e04:	str	r1, [r0]
   15e08:	ldr	r0, [r4]
   15e0c:	bl	12704 <free@plt>
   15e10:	mov	r0, #0
   15e14:	str	r0, [r4]
   15e18:	pop	{r4, sl, fp, pc}
   15e1c:	ldr	r0, [pc, #24]	; 15e3c <codadump_filter_remove@@Base+0xac>
   15e20:	ldr	r1, [pc, #24]	; 15e40 <codadump_filter_remove@@Base+0xb0>
   15e24:	ldr	r3, [pc, #24]	; 15e44 <codadump_filter_remove@@Base+0xb4>
   15e28:	mov	r2, #192	; 0xc0
   15e2c:	add	r0, pc, r0
   15e30:	add	r1, pc, r1
   15e34:	add	r3, pc, r3
   15e38:	bl	12ac4 <__assert_fail@plt>
   15e3c:	muleq	r0, sp, lr
   15e40:	andeq	r4, r0, r8, lsr #29
   15e44:	andeq	r4, r0, r7, lsl #30

00015e48 <codadump_filter_get_fieldname@@Base>:
   15e48:	push	{fp, lr}
   15e4c:	mov	fp, sp
   15e50:	cmp	r0, #0
   15e54:	ldrne	r0, [r0]
   15e58:	popne	{fp, pc}
   15e5c:	ldr	r0, [pc, #24]	; 15e7c <codadump_filter_get_fieldname@@Base+0x34>
   15e60:	ldr	r1, [pc, #24]	; 15e80 <codadump_filter_get_fieldname@@Base+0x38>
   15e64:	ldr	r3, [pc, #24]	; 15e84 <codadump_filter_get_fieldname@@Base+0x3c>
   15e68:	mov	r2, #216	; 0xd8
   15e6c:	add	r0, pc, r0
   15e70:	add	r1, pc, r1
   15e74:	add	r3, pc, r3
   15e78:	bl	12ac4 <__assert_fail@plt>
   15e7c:	andeq	r4, r0, sp, asr lr
   15e80:	andeq	r4, r0, r8, ror #28
   15e84:	strdeq	r4, [r0], -r7

00015e88 <codadump_filter_get_subfilter@@Base>:
   15e88:	push	{fp, lr}
   15e8c:	mov	fp, sp
   15e90:	cmp	r0, #0
   15e94:	ldrne	r0, [r0, #4]
   15e98:	popne	{fp, pc}
   15e9c:	ldr	r0, [pc, #24]	; 15ebc <codadump_filter_get_subfilter@@Base+0x34>
   15ea0:	ldr	r1, [pc, #24]	; 15ec0 <codadump_filter_get_subfilter@@Base+0x38>
   15ea4:	ldr	r3, [pc, #24]	; 15ec4 <codadump_filter_get_subfilter@@Base+0x3c>
   15ea8:	mov	r2, #223	; 0xdf
   15eac:	add	r0, pc, r0
   15eb0:	add	r1, pc, r1
   15eb4:	add	r3, pc, r3
   15eb8:	bl	12ac4 <__assert_fail@plt>
   15ebc:	andeq	r4, r0, sp, lsl lr
   15ec0:	andeq	r4, r0, r8, lsr #28
   15ec4:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>

00015ec8 <codadump_filter_get_next_filter@@Base>:
   15ec8:	push	{fp, lr}
   15ecc:	mov	fp, sp
   15ed0:	cmp	r0, #0
   15ed4:	ldrne	r0, [r0, #8]
   15ed8:	popne	{fp, pc}
   15edc:	ldr	r0, [pc, #24]	; 15efc <codadump_filter_get_next_filter@@Base+0x34>
   15ee0:	ldr	r1, [pc, #24]	; 15f00 <codadump_filter_get_next_filter@@Base+0x38>
   15ee4:	ldr	r3, [pc, #24]	; 15f04 <codadump_filter_get_next_filter@@Base+0x3c>
   15ee8:	mov	r2, #230	; 0xe6
   15eec:	add	r0, pc, r0
   15ef0:	add	r1, pc, r1
   15ef4:	add	r3, pc, r3
   15ef8:	bl	12ac4 <__assert_fail@plt>
   15efc:	ldrdeq	r4, [r0], -sp
   15f00:	andeq	r4, r0, r8, ror #27
   15f04:	strdeq	r4, [r0], -r6
   15f08:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15f0c:	add	fp, sp, #24
   15f10:	sub	sp, sp, #8
   15f14:	cmp	r0, #0
   15f18:	beq	16110 <codadump_filter_get_next_filter@@Base+0x248>
   15f1c:	mov	r9, r1
   15f20:	cmp	r1, #0
   15f24:	beq	16130 <codadump_filter_get_next_filter@@Base+0x268>
   15f28:	mov	r8, r2
   15f2c:	cmp	r2, #0
   15f30:	beq	16150 <codadump_filter_get_next_filter@@Base+0x288>
   15f34:	movw	r4, #3
   15f38:	mov	r6, r0
   15f3c:	mov	r1, #1
   15f40:	movt	r4, #128	; 0x80
   15f44:	ldrb	r0, [r6]
   15f48:	sub	r2, r0, #9
   15f4c:	cmp	r2, #23
   15f50:	bhi	15f64 <codadump_filter_get_next_filter@@Base+0x9c>
   15f54:	tst	r4, r1, lsl r2
   15f58:	beq	15f64 <codadump_filter_get_next_filter@@Base+0x9c>
   15f5c:	add	r6, r6, #1
   15f60:	b	15f44 <codadump_filter_get_next_filter@@Base+0x7c>
   15f64:	mov	r7, #0
   15f68:	mvn	r1, #43	; 0x2b
   15f6c:	mov	r2, #1
   15f70:	movw	r3, #32773	; 0x8005
   15f74:	uxtab	r5, r1, r0
   15f78:	cmp	r5, #15
   15f7c:	bhi	15f88 <codadump_filter_get_next_filter@@Base+0xc0>
   15f80:	tst	r3, r2, lsl r5
   15f84:	bne	15fa4 <codadump_filter_get_next_filter@@Base+0xdc>
   15f88:	uxtb	r0, r0
   15f8c:	cmp	r0, #0
   15f90:	beq	15fa4 <codadump_filter_get_next_filter@@Base+0xdc>
   15f94:	add	r0, r6, r7
   15f98:	add	r7, r7, #1
   15f9c:	ldrb	r0, [r0, #1]
   15fa0:	b	15f74 <codadump_filter_get_next_filter@@Base+0xac>
   15fa4:	cmp	r7, #0
   15fa8:	beq	160b8 <codadump_filter_get_next_filter@@Base+0x1f0>
   15fac:	mov	r0, #12
   15fb0:	bl	1283c <malloc@plt>
   15fb4:	cmp	r0, #0
   15fb8:	str	r0, [r9]
   15fbc:	bne	15fe8 <codadump_filter_get_next_filter@@Base+0x120>
   15fc0:	mov	r0, #69	; 0x45
   15fc4:	mov	r2, #12
   15fc8:	str	r0, [sp]
   15fcc:	mvn	r0, #0
   15fd0:	ldr	r1, [pc, #408]	; 16170 <codadump_filter_get_next_filter@@Base+0x2a8>
   15fd4:	ldr	r3, [pc, #408]	; 16174 <codadump_filter_get_next_filter@@Base+0x2ac>
   15fd8:	add	r1, pc, r1
   15fdc:	add	r3, pc, r3
   15fe0:	bl	126bc <coda_set_error@plt>
   15fe4:	bl	189c0 <handle_coda_error@@Base>
   15fe8:	add	r5, r7, #1
   15fec:	mov	r0, r5
   15ff0:	bl	1283c <malloc@plt>
   15ff4:	ldr	r1, [r9]
   15ff8:	str	r0, [r1]
   15ffc:	ldr	r0, [r9]
   16000:	ldr	r0, [r0]
   16004:	cmp	r0, #0
   16008:	bne	1603c <codadump_filter_get_next_filter@@Base+0x174>
   1600c:	mov	r0, #76	; 0x4c
   16010:	mov	r2, r5
   16014:	str	r0, [sp]
   16018:	mvn	r0, #0
   1601c:	ldr	r1, [pc, #340]	; 16178 <codadump_filter_get_next_filter@@Base+0x2b0>
   16020:	ldr	r3, [pc, #340]	; 1617c <codadump_filter_get_next_filter@@Base+0x2b4>
   16024:	add	r1, pc, r1
   16028:	add	r3, pc, r3
   1602c:	bl	126bc <coda_set_error@plt>
   16030:	bl	189c0 <handle_coda_error@@Base>
   16034:	ldr	r0, [r9]
   16038:	ldr	r0, [r0]
   1603c:	mov	r1, r6
   16040:	mov	r2, r7
   16044:	add	r5, r6, r7
   16048:	bl	12938 <strncpy@plt>
   1604c:	ldr	r0, [r9]
   16050:	mov	r1, #0
   16054:	str	r1, [r0, #4]
   16058:	ldr	r0, [r9]
   1605c:	str	r1, [r0, #8]
   16060:	mov	r1, #1
   16064:	ldr	r0, [r9]
   16068:	ldr	r0, [r0]
   1606c:	add	r0, r0, r7
   16070:	ldrb	r2, [r0, #-1]
   16074:	sub	r2, r2, #9
   16078:	cmp	r2, #23
   1607c:	bhi	16090 <codadump_filter_get_next_filter@@Base+0x1c8>
   16080:	tst	r4, r1, lsl r2
   16084:	beq	16090 <codadump_filter_get_next_filter@@Base+0x1c8>
   16088:	sub	r0, r0, #1
   1608c:	b	16070 <codadump_filter_get_next_filter@@Base+0x1a8>
   16090:	mov	r1, #0
   16094:	strb	r1, [r0]
   16098:	ldrb	r0, [r6, r7]
   1609c:	cmp	r0, #44	; 0x2c
   160a0:	cmpne	r0, #59	; 0x3b
   160a4:	bne	160c8 <codadump_filter_get_next_filter@@Base+0x200>
   160a8:	add	r0, r5, #1
   160ac:	str	r0, [r8]
   160b0:	sub	sp, fp, #24
   160b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   160b8:	mov	r0, #0
   160bc:	str	r0, [r9]
   160c0:	sub	sp, fp, #24
   160c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   160c8:	cmp	r0, #46	; 0x2e
   160cc:	bne	16104 <codadump_filter_get_next_filter@@Base+0x23c>
   160d0:	ldr	r1, [r9]
   160d4:	add	r0, r5, #1
   160d8:	mov	r2, r8
   160dc:	add	r1, r1, #4
   160e0:	bl	15f08 <codadump_filter_get_next_filter@@Base+0x40>
   160e4:	ldr	r0, [r9]
   160e8:	ldr	r0, [r0, #4]
   160ec:	cmp	r0, #0
   160f0:	bne	160c0 <codadump_filter_get_next_filter@@Base+0x1f8>
   160f4:	mov	r0, r9
   160f8:	sub	sp, fp, #24
   160fc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   16100:	b	15d90 <codadump_filter_remove@@Base>
   16104:	str	r5, [r8]
   16108:	sub	sp, fp, #24
   1610c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16110:	ldr	r0, [pc, #104]	; 16180 <codadump_filter_get_next_filter@@Base+0x2b8>
   16114:	ldr	r1, [pc, #104]	; 16184 <codadump_filter_get_next_filter@@Base+0x2bc>
   16118:	ldr	r3, [pc, #104]	; 16188 <codadump_filter_get_next_filter@@Base+0x2c0>
   1611c:	mov	r2, #44	; 0x2c
   16120:	add	r0, pc, r0
   16124:	add	r1, pc, r1
   16128:	add	r3, pc, r3
   1612c:	bl	12ac4 <__assert_fail@plt>
   16130:	ldr	r0, [pc, #84]	; 1618c <codadump_filter_get_next_filter@@Base+0x2c4>
   16134:	ldr	r1, [pc, #84]	; 16190 <codadump_filter_get_next_filter@@Base+0x2c8>
   16138:	ldr	r3, [pc, #84]	; 16194 <codadump_filter_get_next_filter@@Base+0x2cc>
   1613c:	mov	r2, #45	; 0x2d
   16140:	add	r0, pc, r0
   16144:	add	r1, pc, r1
   16148:	add	r3, pc, r3
   1614c:	bl	12ac4 <__assert_fail@plt>
   16150:	ldr	r0, [pc, #64]	; 16198 <codadump_filter_get_next_filter@@Base+0x2d0>
   16154:	ldr	r1, [pc, #64]	; 1619c <codadump_filter_get_next_filter@@Base+0x2d4>
   16158:	ldr	r3, [pc, #64]	; 161a0 <codadump_filter_get_next_filter@@Base+0x2d8>
   1615c:	mov	r2, #46	; 0x2e
   16160:	add	r0, pc, r0
   16164:	add	r1, pc, r1
   16168:	add	r3, pc, r3
   1616c:	bl	12ac4 <__assert_fail@plt>
   16170:	andeq	r4, r0, r1, lsl #17
   16174:	strdeq	r4, [r0], -ip
   16178:	andeq	r4, r0, fp, ror #28
   1617c:			; <UNDEFINED> instruction: 0x00004cb0
   16180:	andeq	r4, r0, lr, lsl #26
   16184:			; <UNDEFINED> instruction: 0x00004bb4
   16188:	andeq	r4, r0, sl, lsl sp
   1618c:	andeq	r4, r0, r9, lsl #23
   16190:	muleq	r0, r4, fp
   16194:	strdeq	r4, [r0], -sl
   16198:	andeq	r4, r0, r2, lsr #26
   1619c:	andeq	r4, r0, r4, ror fp
   161a0:	ldrdeq	r4, [r0], -sl
   161a4:	push	{r4, r5, fp, lr}
   161a8:	add	fp, sp, #8
   161ac:	sub	sp, sp, #8
   161b0:	cmp	r0, #0
   161b4:	str	r1, [sp, #4]
   161b8:	beq	16260 <codadump_filter_get_next_filter@@Base+0x398>
   161bc:	mov	r4, r1
   161c0:	cmp	r1, #0
   161c4:	beq	16244 <codadump_filter_get_next_filter@@Base+0x37c>
   161c8:	ldr	r5, [r0]
   161cc:	cmp	r5, #0
   161d0:	beq	16208 <codadump_filter_get_next_filter@@Base+0x340>
   161d4:	ldr	r1, [r4]
   161d8:	ldr	r0, [r5]
   161dc:	bl	12674 <strcmp@plt>
   161e0:	cmp	r0, #0
   161e4:	beq	16214 <codadump_filter_get_next_filter@@Base+0x34c>
   161e8:	ldr	r0, [r5, #8]!
   161ec:	cmp	r0, #0
   161f0:	beq	16240 <codadump_filter_get_next_filter@@Base+0x378>
   161f4:	mov	r0, r5
   161f8:	mov	r1, r4
   161fc:	sub	sp, fp, #8
   16200:	pop	{r4, r5, fp, lr}
   16204:	b	161a4 <codadump_filter_get_next_filter@@Base+0x2dc>
   16208:	str	r4, [r0]
   1620c:	sub	sp, fp, #8
   16210:	pop	{r4, r5, fp, pc}
   16214:	ldr	r0, [r5, #4]!
   16218:	cmp	r0, #0
   1621c:	beq	16250 <codadump_filter_get_next_filter@@Base+0x388>
   16220:	ldr	r1, [r4, #4]
   16224:	mov	r0, r5
   16228:	cmp	r1, #0
   1622c:	beq	1624c <codadump_filter_get_next_filter@@Base+0x384>
   16230:	bl	161a4 <codadump_filter_get_next_filter@@Base+0x2dc>
   16234:	mov	r0, #0
   16238:	str	r0, [r4, #4]
   1623c:	b	16250 <codadump_filter_get_next_filter@@Base+0x388>
   16240:	str	r4, [r5]
   16244:	sub	sp, fp, #8
   16248:	pop	{r4, r5, fp, pc}
   1624c:	bl	15d90 <codadump_filter_remove@@Base>
   16250:	add	r0, sp, #4
   16254:	bl	15d90 <codadump_filter_remove@@Base>
   16258:	sub	sp, fp, #8
   1625c:	pop	{r4, r5, fp, pc}
   16260:	ldr	r0, [pc, #24]	; 16280 <codadump_filter_get_next_filter@@Base+0x3b8>
   16264:	ldr	r1, [pc, #24]	; 16284 <codadump_filter_get_next_filter@@Base+0x3bc>
   16268:	ldr	r3, [pc, #24]	; 16288 <codadump_filter_get_next_filter@@Base+0x3c0>
   1626c:	mov	r2, #117	; 0x75
   16270:	add	r0, pc, r0
   16274:	add	r1, pc, r1
   16278:	add	r3, pc, r3
   1627c:	bl	12ac4 <__assert_fail@plt>
   16280:	andeq	r4, r0, r9, asr sl
   16284:	andeq	r4, r0, r4, ror #20
   16288:	andeq	r4, r0, fp, asr #24

0001628c <print_json_data@@Base>:
   1628c:	push	{r4, sl, fp, lr}
   16290:	add	fp, sp, #8
   16294:	sub	sp, sp, #528	; 0x210
   16298:	ldr	r1, [pc, #200]	; 16368 <print_json_data@@Base+0xdc>
   1629c:	add	r1, pc, r1
   162a0:	str	r0, [r1]
   162a4:	sub	r1, fp, #12
   162a8:	ldr	r4, [pc, #188]	; 1636c <print_json_data@@Base+0xe0>
   162ac:	ldr	r4, [pc, r4]
   162b0:	ldr	r0, [r4]
   162b4:	bl	126c8 <coda_open@plt>
   162b8:	cmp	r0, #0
   162bc:	beq	162fc <print_json_data@@Base+0x70>
   162c0:	bl	12a70 <coda_get_errno@plt>
   162c4:	ldr	r0, [r0]
   162c8:	cmn	r0, #21
   162cc:	bne	162f8 <print_json_data@@Base+0x6c>
   162d0:	mov	r0, #0
   162d4:	bl	12710 <coda_set_option_use_mmap@plt>
   162d8:	ldr	r0, [r4]
   162dc:	sub	r1, fp, #12
   162e0:	bl	126c8 <coda_open@plt>
   162e4:	mov	r4, r0
   162e8:	mov	r0, #1
   162ec:	bl	12710 <coda_set_option_use_mmap@plt>
   162f0:	cmp	r4, #0
   162f4:	beq	162fc <print_json_data@@Base+0x70>
   162f8:	bl	189c0 <handle_coda_error@@Base>
   162fc:	ldr	r1, [fp, #-12]
   16300:	mov	r0, sp
   16304:	bl	127f4 <coda_cursor_set_product@plt>
   16308:	cmp	r0, #0
   1630c:	beq	16314 <print_json_data@@Base+0x88>
   16310:	bl	189c0 <handle_coda_error@@Base>
   16314:	ldr	r0, [pc, #84]	; 16370 <print_json_data@@Base+0xe4>
   16318:	ldr	r0, [pc, r0]
   1631c:	ldr	r1, [r0]
   16320:	cmp	r1, #0
   16324:	beq	1633c <print_json_data@@Base+0xb0>
   16328:	mov	r0, sp
   1632c:	bl	129d4 <coda_cursor_goto@plt>
   16330:	cmp	r0, #0
   16334:	beq	1633c <print_json_data@@Base+0xb0>
   16338:	bl	189c0 <handle_coda_error@@Base>
   1633c:	mov	r0, #0
   16340:	bl	12668 <coda_set_option_perform_boundary_checks@plt>
   16344:	mov	r0, sp
   16348:	bl	16378 <print_json_data@@Base+0xec>
   1634c:	ldr	r0, [pc, #32]	; 16374 <print_json_data@@Base+0xe8>
   16350:	add	r0, pc, r0
   16354:	bl	16cd8 <print_json_data@@Base+0xa4c>
   16358:	ldr	r0, [fp, #-12]
   1635c:	bl	129b0 <coda_close@plt>
   16360:	sub	sp, fp, #8
   16364:	pop	{r4, sl, fp, pc}
   16368:	andeq	r6, r1, r8, ror #30
   1636c:	andeq	r6, r1, r0, lsl #30
   16370:			; <UNDEFINED> instruction: 0x00016eb8
   16374:	andeq	r4, r0, r8, lsl pc
   16378:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1637c:	add	fp, sp, #24
   16380:	sub	sp, sp, #72	; 0x48
   16384:	mov	r4, r0
   16388:	mov	r0, #0
   1638c:	str	r0, [fp, #-32]	; 0xffffffe0
   16390:	ldr	r0, [pc, #2244]	; 16c5c <print_json_data@@Base+0x9d0>
   16394:	ldr	r0, [pc, r0]
   16398:	cmp	r0, #0
   1639c:	beq	16400 <print_json_data@@Base+0x174>
   163a0:	sub	r1, fp, #32
   163a4:	mov	r0, r4
   163a8:	bl	12788 <coda_cursor_has_attributes@plt>
   163ac:	cmp	r0, #0
   163b0:	beq	163b8 <print_json_data@@Base+0x12c>
   163b4:	bl	189c0 <handle_coda_error@@Base>
   163b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   163bc:	cmp	r0, #0
   163c0:	beq	16400 <print_json_data@@Base+0x174>
   163c4:	ldr	r0, [pc, #2196]	; 16c60 <print_json_data@@Base+0x9d4>
   163c8:	add	r0, pc, r0
   163cc:	bl	16cd8 <print_json_data@@Base+0xa4c>
   163d0:	mov	r0, r4
   163d4:	bl	12908 <coda_cursor_goto_attributes@plt>
   163d8:	cmp	r0, #0
   163dc:	beq	163e4 <print_json_data@@Base+0x158>
   163e0:	bl	189c0 <handle_coda_error@@Base>
   163e4:	mov	r0, r4
   163e8:	bl	16378 <print_json_data@@Base+0xec>
   163ec:	mov	r0, r4
   163f0:	bl	1286c <coda_cursor_goto_parent@plt>
   163f4:	ldr	r0, [pc, #2152]	; 16c64 <print_json_data@@Base+0x9d8>
   163f8:	add	r0, pc, r0
   163fc:	bl	16cd8 <print_json_data@@Base+0xa4c>
   16400:	sub	r1, fp, #28
   16404:	mov	r0, r4
   16408:	bl	12794 <coda_cursor_get_type_class@plt>
   1640c:	cmp	r0, #0
   16410:	beq	16418 <print_json_data@@Base+0x18c>
   16414:	bl	189c0 <handle_coda_error@@Base>
   16418:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1641c:	cmp	r0, #6
   16420:	bhi	16c00 <print_json_data@@Base+0x974>
   16424:	add	r1, pc, #4
   16428:	ldr	r0, [r1, r0, lsl #2]
   1642c:	add	pc, r1, r0
   16430:	strheq	r0, [r0], -r4
   16434:	andeq	r0, r0, r8, lsl #3
   16438:	andeq	r0, r0, ip, lsl r0
   1643c:	andeq	r0, r0, ip, lsl r0
   16440:	andeq	r0, r0, ip, lsl r0
   16444:	andeq	r0, r0, ip, lsl r0
   16448:	ldrdeq	r0, [r0], -r8
   1644c:	sub	r1, fp, #36	; 0x24
   16450:	mov	r0, r4
   16454:	bl	12830 <coda_cursor_get_read_type@plt>
   16458:	cmp	r0, #0
   1645c:	beq	16464 <print_json_data@@Base+0x1d8>
   16460:	bl	189c0 <handle_coda_error@@Base>
   16464:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16468:	add	r0, r0, #1
   1646c:	cmp	r0, #13
   16470:	bhi	16c00 <print_json_data@@Base+0x974>
   16474:	add	r1, pc, #4
   16478:	ldr	r0, [r1, r0, lsl #2]
   1647c:	add	pc, r1, r0
   16480:	andeq	r0, r0, r0, asr #4
   16484:	andeq	r0, r0, r8, lsr r0
   16488:	ldrdeq	r0, [r0], -r4
   1648c:	andeq	r0, r0, r8, lsr r0
   16490:	ldrdeq	r0, [r0], -r4
   16494:	andeq	r0, r0, r8, lsr r0
   16498:	ldrdeq	r0, [r0], -r4
   1649c:	andeq	r0, r0, ip, asr #4
   164a0:	andeq	r0, r0, ip, ror r2
   164a4:	andeq	r0, r0, r0, lsl #4
   164a8:	andeq	r0, r0, r0, lsl #4
   164ac:			; <UNDEFINED> instruction: 0x000002bc
   164b0:	strdeq	r0, [r0], -r8
   164b4:	andeq	r0, r0, ip, lsr #7
   164b8:	add	r1, sp, #16
   164bc:	mov	r0, r4
   164c0:	bl	12a4c <coda_cursor_read_int32@plt>
   164c4:	cmp	r0, #0
   164c8:	beq	164d0 <print_json_data@@Base+0x244>
   164cc:	bl	189c0 <handle_coda_error@@Base>
   164d0:	ldr	r1, [sp, #16]
   164d4:	ldr	r0, [pc, #1992]	; 16ca4 <print_json_data@@Base+0xa18>
   164d8:	add	r0, pc, r0
   164dc:	bl	16cd8 <print_json_data@@Base+0xa4c>
   164e0:	b	16c00 <print_json_data@@Base+0x974>
   164e4:	ldr	r0, [pc, #1916]	; 16c68 <print_json_data@@Base+0x9dc>
   164e8:	add	r0, pc, r0
   164ec:	bl	16cd8 <print_json_data@@Base+0xa4c>
   164f0:	add	r1, sp, #16
   164f4:	mov	r0, r4
   164f8:	bl	126ec <coda_cursor_get_num_elements@plt>
   164fc:	cmp	r0, #0
   16500:	beq	16508 <print_json_data@@Base+0x27c>
   16504:	bl	189c0 <handle_coda_error@@Base>
   16508:	ldr	r0, [sp, #16]
   1650c:	cmp	r0, #1
   16510:	blt	169f0 <print_json_data@@Base+0x764>
   16514:	add	r1, sp, #8
   16518:	mov	r0, r4
   1651c:	bl	1274c <coda_cursor_get_type@plt>
   16520:	cmp	r0, #0
   16524:	beq	1652c <print_json_data@@Base+0x2a0>
   16528:	bl	189c0 <handle_coda_error@@Base>
   1652c:	ldr	r0, [sp, #8]
   16530:	sub	r1, fp, #36	; 0x24
   16534:	bl	12950 <coda_type_get_record_union_status@plt>
   16538:	cmp	r0, #0
   1653c:	beq	16544 <print_json_data@@Base+0x2b8>
   16540:	bl	189c0 <handle_coda_error@@Base>
   16544:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16548:	cmp	r0, #0
   1654c:	beq	168f8 <print_json_data@@Base+0x66c>
   16550:	sub	r1, fp, #40	; 0x28
   16554:	mov	r0, r4
   16558:	bl	12a40 <coda_cursor_get_available_union_field_index@plt>
   1655c:	cmp	r0, #0
   16560:	beq	16568 <print_json_data@@Base+0x2dc>
   16564:	bl	189c0 <handle_coda_error@@Base>
   16568:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1656c:	ldr	r0, [sp, #8]
   16570:	sub	r2, fp, #44	; 0x2c
   16574:	bl	12a88 <coda_type_get_record_field_name@plt>
   16578:	cmp	r0, #0
   1657c:	beq	16584 <print_json_data@@Base+0x2f8>
   16580:	bl	189c0 <handle_coda_error@@Base>
   16584:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16588:	mov	r0, r4
   1658c:	bl	1280c <coda_cursor_goto_record_field_by_index@plt>
   16590:	cmp	r0, #0
   16594:	beq	1659c <print_json_data@@Base+0x310>
   16598:	bl	189c0 <handle_coda_error@@Base>
   1659c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   165a0:	ldr	r0, [pc, #1732]	; 16c6c <print_json_data@@Base+0x9e0>
   165a4:	add	r0, pc, r0
   165a8:	bl	16cd8 <print_json_data@@Base+0xa4c>
   165ac:	mov	r0, r4
   165b0:	bl	16378 <print_json_data@@Base+0xec>
   165b4:	b	169e8 <print_json_data@@Base+0x75c>
   165b8:	ldr	r0, [pc, #1724]	; 16c7c <print_json_data@@Base+0x9f0>
   165bc:	add	r0, pc, r0
   165c0:	bl	16cd8 <print_json_data@@Base+0xa4c>
   165c4:	add	r6, sp, #16
   165c8:	add	r1, sp, #8
   165cc:	mov	r0, r4
   165d0:	mov	r2, r6
   165d4:	bl	12998 <coda_cursor_get_array_dim@plt>
   165d8:	cmp	r0, #0
   165dc:	beq	165e4 <print_json_data@@Base+0x358>
   165e0:	bl	189c0 <handle_coda_error@@Base>
   165e4:	ldr	r8, [sp, #8]
   165e8:	cmp	r8, #0
   165ec:	bmi	16bf4 <print_json_data@@Base+0x968>
   165f0:	beq	169fc <print_json_data@@Base+0x770>
   165f4:	cmp	r8, #4
   165f8:	bcs	16aac <print_json_data@@Base+0x820>
   165fc:	mov	lr, #0
   16600:	mov	r6, #1
   16604:	b	16b64 <print_json_data@@Base+0x8d8>
   16608:	sub	r1, fp, #36	; 0x24
   1660c:	mov	r0, r4
   16610:	bl	127d0 <coda_cursor_get_special_type@plt>
   16614:	cmp	r0, #0
   16618:	beq	16620 <print_json_data@@Base+0x394>
   1661c:	bl	189c0 <handle_coda_error@@Base>
   16620:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16624:	cmp	r0, #3
   16628:	bhi	16c00 <print_json_data@@Base+0x974>
   1662c:	add	r1, pc, #4
   16630:	ldr	r0, [r1, r0, lsl #2]
   16634:	add	pc, r1, r0
   16638:	andeq	r0, r0, r0, lsl r0
   1663c:	andeq	r0, r0, ip, asr #7
   16640:	andeq	r0, r0, ip, ror #7
   16644:	andeq	r0, r0, r8, lsr r4
   16648:	ldr	r0, [pc, #1644]	; 16cbc <print_json_data@@Base+0xa30>
   1664c:	add	r0, pc, r0
   16650:	b	16bfc <print_json_data@@Base+0x970>
   16654:	add	r1, sp, #16
   16658:	mov	r0, r4
   1665c:	bl	12728 <coda_cursor_read_uint32@plt>
   16660:	cmp	r0, #0
   16664:	beq	1666c <print_json_data@@Base+0x3e0>
   16668:	bl	189c0 <handle_coda_error@@Base>
   1666c:	ldr	r1, [sp, #16]
   16670:	ldr	r0, [pc, #1584]	; 16ca8 <print_json_data@@Base+0xa1c>
   16674:	add	r0, pc, r0
   16678:	bl	16cd8 <print_json_data@@Base+0xa4c>
   1667c:	b	16c00 <print_json_data@@Base+0x974>
   16680:	add	r1, sp, #16
   16684:	mov	r0, r4
   16688:	bl	128b4 <coda_cursor_read_double@plt>
   1668c:	cmp	r0, #0
   16690:	beq	16698 <print_json_data@@Base+0x40c>
   16694:	bl	189c0 <handle_coda_error@@Base>
   16698:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1669c:	ldr	r2, [pc, #1548]	; 16cb0 <print_json_data@@Base+0xa24>
   166a0:	ldr	r0, [pc, #1548]	; 16cb4 <print_json_data@@Base+0xa28>
   166a4:	vldr	d16, [sp, #16]
   166a8:	add	r2, pc, r2
   166ac:	cmp	r1, #8
   166b0:	add	r0, pc, r0
   166b4:	moveq	r0, r2
   166b8:	vmov	r2, r3, d16
   166bc:	b	16aa4 <print_json_data@@Base+0x818>
   166c0:	ldr	r0, [pc, #1520]	; 16cb8 <print_json_data@@Base+0xa2c>
   166c4:	add	r0, pc, r0
   166c8:	b	16bfc <print_json_data@@Base+0x970>
   166cc:	add	r1, sp, #8
   166d0:	mov	r0, r4
   166d4:	bl	129bc <coda_cursor_read_int64@plt>
   166d8:	cmp	r0, #0
   166dc:	beq	166e4 <print_json_data@@Base+0x458>
   166e0:	bl	189c0 <handle_coda_error@@Base>
   166e4:	ldr	r0, [sp, #8]
   166e8:	ldr	r1, [sp, #12]
   166ec:	add	r4, sp, #16
   166f0:	mov	r2, r4
   166f4:	bl	12ab8 <coda_str64@plt>
   166f8:	b	16728 <print_json_data@@Base+0x49c>
   166fc:	add	r1, sp, #8
   16700:	mov	r0, r4
   16704:	bl	128a8 <coda_cursor_read_uint64@plt>
   16708:	cmp	r0, #0
   1670c:	beq	16714 <print_json_data@@Base+0x488>
   16710:	bl	189c0 <handle_coda_error@@Base>
   16714:	ldr	r0, [sp, #8]
   16718:	ldr	r1, [sp, #12]
   1671c:	add	r4, sp, #16
   16720:	mov	r2, r4
   16724:	bl	126f8 <coda_str64u@plt>
   16728:	ldr	r0, [pc, #1404]	; 16cac <print_json_data@@Base+0xa20>
   1672c:	mov	r1, r4
   16730:	add	r0, pc, r0
   16734:	bl	16cd8 <print_json_data@@Base+0xa4c>
   16738:	b	16c00 <print_json_data@@Base+0x974>
   1673c:	add	r1, sp, #16
   16740:	mov	r0, r4
   16744:	bl	12914 <coda_cursor_read_char@plt>
   16748:	cmp	r0, #0
   1674c:	beq	16754 <print_json_data@@Base+0x4c8>
   16750:	bl	189c0 <handle_coda_error@@Base>
   16754:	ldr	r4, [pc, #1324]	; 16c88 <print_json_data@@Base+0x9fc>
   16758:	add	r4, pc, r4
   1675c:	mov	r0, r4
   16760:	bl	16cd8 <print_json_data@@Base+0xa4c>
   16764:	add	r0, sp, #16
   16768:	mov	r1, #1
   1676c:	bl	16d24 <print_json_data@@Base+0xa98>
   16770:	mov	r0, r4
   16774:	b	16bfc <print_json_data@@Base+0x970>
   16778:	add	r1, sp, #16
   1677c:	mov	r0, r4
   16780:	bl	1289c <coda_cursor_get_string_length@plt>
   16784:	cmp	r0, #0
   16788:	beq	16790 <print_json_data@@Base+0x504>
   1678c:	bl	189c0 <handle_coda_error@@Base>
   16790:	ldr	r0, [sp, #16]
   16794:	add	r6, r0, #1
   16798:	mov	r0, r6
   1679c:	bl	1283c <malloc@plt>
   167a0:	mov	r5, r0
   167a4:	cmp	r0, #0
   167a8:	bne	167dc <print_json_data@@Base+0x550>
   167ac:	movw	r0, #303	; 0x12f
   167b0:	mov	r2, r6
   167b4:	str	r0, [sp]
   167b8:	mvn	r0, #0
   167bc:	ldr	r1, [pc, #1224]	; 16c8c <print_json_data@@Base+0xa00>
   167c0:	ldr	r3, [pc, #1224]	; 16c90 <print_json_data@@Base+0xa04>
   167c4:	add	r1, pc, r1
   167c8:	add	r3, pc, r3
   167cc:	bl	126bc <coda_set_error@plt>
   167d0:	bl	189c0 <handle_coda_error@@Base>
   167d4:	ldr	r0, [sp, #16]
   167d8:	add	r6, r0, #1
   167dc:	mov	r0, r4
   167e0:	mov	r1, r5
   167e4:	mov	r2, r6
   167e8:	bl	12860 <coda_cursor_read_string@plt>
   167ec:	cmp	r0, #0
   167f0:	beq	167f8 <print_json_data@@Base+0x56c>
   167f4:	bl	189c0 <handle_coda_error@@Base>
   167f8:	ldr	r4, [pc, #1172]	; 16c94 <print_json_data@@Base+0xa08>
   167fc:	add	r4, pc, r4
   16800:	mov	r0, r4
   16804:	bl	16cd8 <print_json_data@@Base+0xa4c>
   16808:	ldr	r1, [sp, #16]
   1680c:	mov	r0, r5
   16810:	bl	16d24 <print_json_data@@Base+0xa98>
   16814:	ldr	r1, [sp, #16]
   16818:	mov	r0, r4
   1681c:	bl	16cd8 <print_json_data@@Base+0xa4c>
   16820:	mov	r0, r5
   16824:	bl	12704 <free@plt>
   16828:	b	16c00 <print_json_data@@Base+0x974>
   1682c:	add	r1, sp, #16
   16830:	mov	r0, r4
   16834:	bl	12a1c <coda_cursor_get_bit_size@plt>
   16838:	cmp	r0, #0
   1683c:	beq	16844 <print_json_data@@Base+0x5b8>
   16840:	bl	189c0 <handle_coda_error@@Base>
   16844:	ldr	r7, [sp, #16]
   16848:	ldr	r6, [sp, #20]
   1684c:	lsr	r0, r7, #3
   16850:	tst	r7, #7
   16854:	orr	r5, r0, r6, lsl #29
   16858:	addne	r5, r5, #1
   1685c:	mov	r0, r5
   16860:	bl	1283c <malloc@plt>
   16864:	mov	r8, r0
   16868:	cmp	r0, #0
   1686c:	bne	168a0 <print_json_data@@Base+0x614>
   16870:	movw	r0, #334	; 0x14e
   16874:	mov	r2, r5
   16878:	str	r0, [sp]
   1687c:	mvn	r0, #0
   16880:	ldr	r1, [pc, #1040]	; 16c98 <print_json_data@@Base+0xa0c>
   16884:	ldr	r3, [pc, #1040]	; 16c9c <print_json_data@@Base+0xa10>
   16888:	add	r1, pc, r1
   1688c:	add	r3, pc, r3
   16890:	bl	126bc <coda_set_error@plt>
   16894:	bl	189c0 <handle_coda_error@@Base>
   16898:	ldr	r7, [sp, #16]
   1689c:	ldr	r6, [sp, #20]
   168a0:	mov	r0, r4
   168a4:	mov	r1, r8
   168a8:	mov	r2, #0
   168ac:	mov	r3, #0
   168b0:	str	r7, [sp]
   168b4:	str	r6, [sp, #4]
   168b8:	bl	12aac <coda_cursor_read_bits@plt>
   168bc:	cmp	r0, #0
   168c0:	beq	168c8 <print_json_data@@Base+0x63c>
   168c4:	bl	189c0 <handle_coda_error@@Base>
   168c8:	ldr	r4, [pc, #976]	; 16ca0 <print_json_data@@Base+0xa14>
   168cc:	add	r4, pc, r4
   168d0:	mov	r0, r4
   168d4:	bl	16cd8 <print_json_data@@Base+0xa4c>
   168d8:	mov	r0, r8
   168dc:	mov	r1, r5
   168e0:	bl	16d24 <print_json_data@@Base+0xa98>
   168e4:	mov	r0, r4
   168e8:	bl	16cd8 <print_json_data@@Base+0xa4c>
   168ec:	mov	r0, r8
   168f0:	bl	12704 <free@plt>
   168f4:	b	16c00 <print_json_data@@Base+0x974>
   168f8:	mov	r0, r4
   168fc:	bl	12800 <coda_cursor_goto_first_record_field@plt>
   16900:	cmp	r0, #0
   16904:	beq	1690c <print_json_data@@Base+0x680>
   16908:	bl	189c0 <handle_coda_error@@Base>
   1690c:	ldr	r0, [sp, #16]
   16910:	mov	r1, #0
   16914:	str	r1, [fp, #-40]	; 0xffffffd8
   16918:	cmp	r0, #1
   1691c:	blt	169e8 <print_json_data@@Base+0x75c>
   16920:	ldr	r8, [pc, #840]	; 16c70 <print_json_data@@Base+0x9e4>
   16924:	ldr	r6, [pc, #840]	; 16c74 <print_json_data@@Base+0x9e8>
   16928:	mov	r7, #1
   1692c:	add	r5, sp, #48	; 0x30
   16930:	sub	r9, fp, #44	; 0x2c
   16934:	add	r8, pc, r8
   16938:	add	r6, pc, r6
   1693c:	b	16958 <print_json_data@@Base+0x6cc>
   16940:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16944:	add	r1, r0, #1
   16948:	ldr	r0, [sp, #16]
   1694c:	str	r1, [fp, #-40]	; 0xffffffd8
   16950:	cmp	r1, r0
   16954:	bge	169e8 <print_json_data@@Base+0x75c>
   16958:	ldr	r0, [sp, #8]
   1695c:	mov	r2, r5
   16960:	bl	1268c <coda_type_get_record_field_hidden_status@plt>
   16964:	cmp	r0, #0
   16968:	beq	16970 <print_json_data@@Base+0x6e4>
   1696c:	bl	189c0 <handle_coda_error@@Base>
   16970:	ldr	r0, [sp, #48]	; 0x30
   16974:	cmp	r0, #0
   16978:	bne	169bc <print_json_data@@Base+0x730>
   1697c:	cmp	r7, #0
   16980:	moveq	r0, r8
   16984:	bleq	16cd8 <print_json_data@@Base+0xa4c>
   16988:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1698c:	ldr	r0, [sp, #8]
   16990:	mov	r2, r9
   16994:	bl	12a88 <coda_type_get_record_field_name@plt>
   16998:	cmp	r0, #0
   1699c:	beq	169a4 <print_json_data@@Base+0x718>
   169a0:	bl	189c0 <handle_coda_error@@Base>
   169a4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   169a8:	mov	r0, r6
   169ac:	bl	16cd8 <print_json_data@@Base+0xa4c>
   169b0:	mov	r0, r4
   169b4:	bl	16378 <print_json_data@@Base+0xec>
   169b8:	mov	r7, #0
   169bc:	ldr	r0, [sp, #16]
   169c0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   169c4:	sub	r0, r0, #1
   169c8:	cmp	r1, r0
   169cc:	bge	16940 <print_json_data@@Base+0x6b4>
   169d0:	mov	r0, r4
   169d4:	bl	129f8 <coda_cursor_goto_next_record_field@plt>
   169d8:	cmp	r0, #0
   169dc:	beq	16940 <print_json_data@@Base+0x6b4>
   169e0:	bl	189c0 <handle_coda_error@@Base>
   169e4:	b	16940 <print_json_data@@Base+0x6b4>
   169e8:	mov	r0, r4
   169ec:	bl	1286c <coda_cursor_goto_parent@plt>
   169f0:	ldr	r0, [pc, #640]	; 16c78 <print_json_data@@Base+0x9ec>
   169f4:	add	r0, pc, r0
   169f8:	b	16bfc <print_json_data@@Base+0x970>
   169fc:	mov	r6, #1
   16a00:	b	16b88 <print_json_data@@Base+0x8fc>
   16a04:	add	r1, sp, #16
   16a08:	mov	r0, r4
   16a0c:	bl	128b4 <coda_cursor_read_double@plt>
   16a10:	cmp	r0, #0
   16a14:	beq	16a1c <print_json_data@@Base+0x790>
   16a18:	bl	189c0 <handle_coda_error@@Base>
   16a1c:	vldr	d16, [sp, #16]
   16a20:	b	16a60 <print_json_data@@Base+0x7d4>
   16a24:	add	r1, sp, #8
   16a28:	mov	r0, r4
   16a2c:	bl	128b4 <coda_cursor_read_double@plt>
   16a30:	cmp	r0, #0
   16a34:	beq	16a3c <print_json_data@@Base+0x7b0>
   16a38:	bl	189c0 <handle_coda_error@@Base>
   16a3c:	vldr	d0, [sp, #8]
   16a40:	bl	128c0 <coda_isNaN@plt>
   16a44:	cmp	r0, #0
   16a48:	bne	16a5c <print_json_data@@Base+0x7d0>
   16a4c:	vldr	d0, [sp, #8]
   16a50:	bl	12764 <coda_isInf@plt>
   16a54:	cmp	r0, #0
   16a58:	beq	16c20 <print_json_data@@Base+0x994>
   16a5c:	vldr	d16, [sp, #8]
   16a60:	ldr	r0, [pc, #600]	; 16cc0 <print_json_data@@Base+0xa34>
   16a64:	vmov	r2, r3, d16
   16a68:	add	r0, pc, r0
   16a6c:	b	16aa4 <print_json_data@@Base+0x818>
   16a70:	add	r1, sp, #16
   16a74:	add	r2, sp, #8
   16a78:	mov	r0, r4
   16a7c:	bl	1295c <coda_cursor_read_complex_double_split@plt>
   16a80:	cmp	r0, #0
   16a84:	beq	16a8c <print_json_data@@Base+0x800>
   16a88:	bl	189c0 <handle_coda_error@@Base>
   16a8c:	vldr	d17, [sp, #8]
   16a90:	vldr	d16, [sp, #16]
   16a94:	vstr	d17, [sp]
   16a98:	vmov	r2, r3, d16
   16a9c:	ldr	r0, [pc, #556]	; 16cd0 <print_json_data@@Base+0xa44>
   16aa0:	add	r0, pc, r0
   16aa4:	bl	16cd8 <print_json_data@@Base+0xa4c>
   16aa8:	b	16c00 <print_json_data@@Base+0x974>
   16aac:	bic	lr, r8, #3
   16ab0:	mov	r2, #1
   16ab4:	vmov.i32	q8, #1	; 0x00000001
   16ab8:	sub	r3, lr, #4
   16abc:	add	r2, r2, r3, lsr #2
   16ac0:	cmp	r3, #12
   16ac4:	and	ip, r2, #3
   16ac8:	bcs	16adc <print_json_data@@Base+0x850>
   16acc:	mov	r3, #0
   16ad0:	cmp	ip, #0
   16ad4:	bne	16b30 <print_json_data@@Base+0x8a4>
   16ad8:	b	16b4c <print_json_data@@Base+0x8c0>
   16adc:	sub	r7, r2, ip
   16ae0:	mov	r3, #0
   16ae4:	mov	r2, #64	; 0x40
   16ae8:	mov	r5, r6
   16aec:	vld1.32	{d18-d19}, [r5], r2
   16af0:	add	r0, r6, #16
   16af4:	add	r1, r6, #32
   16af8:	subs	r7, r7, #4
   16afc:	add	r3, r3, #16
   16b00:	vld1.32	{d20-d21}, [r0]
   16b04:	add	r0, r6, #48	; 0x30
   16b08:	mov	r6, r5
   16b0c:	vmul.i32	q8, q9, q8
   16b10:	vld1.32	{d18-d19}, [r1]
   16b14:	vmul.i32	q8, q10, q8
   16b18:	vld1.32	{d20-d21}, [r0]
   16b1c:	vmul.i32	q8, q9, q8
   16b20:	vmul.i32	q8, q10, q8
   16b24:	bne	16aec <print_json_data@@Base+0x860>
   16b28:	cmp	ip, #0
   16b2c:	beq	16b4c <print_json_data@@Base+0x8c0>
   16b30:	add	r0, sp, #16
   16b34:	add	r2, r0, r3, lsl #2
   16b38:	rsb	r3, ip, #0
   16b3c:	vld1.32	{d18-d19}, [r2]!
   16b40:	adds	r3, r3, #1
   16b44:	vmul.i32	q8, q9, q8
   16b48:	bcc	16b3c <print_json_data@@Base+0x8b0>
   16b4c:	vext.8	q9, q8, q8, #8
   16b50:	cmp	r8, lr
   16b54:	vmul.i32	q0, q8, q9
   16b58:	vmul.i32	q8, q0, d0[1]
   16b5c:	vmov.32	r6, d16[0]
   16b60:	beq	16b80 <print_json_data@@Base+0x8f4>
   16b64:	add	r0, sp, #16
   16b68:	add	r2, r0, lr, lsl #2
   16b6c:	sub	r0, r8, lr
   16b70:	ldr	r1, [r2], #4
   16b74:	subs	r0, r0, #1
   16b78:	mul	r6, r1, r6
   16b7c:	bne	16b70 <print_json_data@@Base+0x8e4>
   16b80:	cmp	r6, #1
   16b84:	blt	16bf4 <print_json_data@@Base+0x968>
   16b88:	mov	r0, r4
   16b8c:	bl	127dc <coda_cursor_goto_first_array_element@plt>
   16b90:	cmp	r0, #0
   16b94:	beq	16b9c <print_json_data@@Base+0x910>
   16b98:	bl	189c0 <handle_coda_error@@Base>
   16b9c:	ldr	r8, [pc, #220]	; 16c80 <print_json_data@@Base+0x9f4>
   16ba0:	sub	r7, r6, #1
   16ba4:	mov	r5, #0
   16ba8:	add	r8, pc, r8
   16bac:	b	16bbc <print_json_data@@Base+0x930>
   16bb0:	add	r5, r5, #1
   16bb4:	cmp	r6, r5
   16bb8:	beq	16bec <print_json_data@@Base+0x960>
   16bbc:	mov	r0, r4
   16bc0:	bl	16378 <print_json_data@@Base+0xec>
   16bc4:	cmp	r5, r7
   16bc8:	bge	16bb0 <print_json_data@@Base+0x924>
   16bcc:	mov	r0, r8
   16bd0:	bl	16cd8 <print_json_data@@Base+0xa4c>
   16bd4:	mov	r0, r4
   16bd8:	bl	128d8 <coda_cursor_goto_next_array_element@plt>
   16bdc:	cmp	r0, #0
   16be0:	beq	16bb0 <print_json_data@@Base+0x924>
   16be4:	bl	189c0 <handle_coda_error@@Base>
   16be8:	b	16bb0 <print_json_data@@Base+0x924>
   16bec:	mov	r0, r4
   16bf0:	bl	1286c <coda_cursor_goto_parent@plt>
   16bf4:	ldr	r0, [pc, #136]	; 16c84 <print_json_data@@Base+0x9f8>
   16bf8:	add	r0, pc, r0
   16bfc:	bl	16cd8 <print_json_data@@Base+0xa4c>
   16c00:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16c04:	cmp	r0, #0
   16c08:	beq	16c18 <print_json_data@@Base+0x98c>
   16c0c:	ldr	r0, [pc, #192]	; 16cd4 <print_json_data@@Base+0xa48>
   16c10:	add	r0, pc, r0
   16c14:	bl	16cd8 <print_json_data@@Base+0xa4c>
   16c18:	sub	sp, fp, #24
   16c1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16c20:	vldr	d0, [sp, #8]
   16c24:	ldr	r0, [pc, #152]	; 16cc4 <print_json_data@@Base+0xa38>
   16c28:	add	r1, sp, #16
   16c2c:	add	r0, pc, r0
   16c30:	bl	126e0 <coda_time_double_to_string@plt>
   16c34:	cmp	r0, #0
   16c38:	beq	16c48 <print_json_data@@Base+0x9bc>
   16c3c:	ldr	r0, [pc, #132]	; 16cc8 <print_json_data@@Base+0xa3c>
   16c40:	add	r0, pc, r0
   16c44:	b	16bfc <print_json_data@@Base+0x970>
   16c48:	ldr	r0, [pc, #124]	; 16ccc <print_json_data@@Base+0xa40>
   16c4c:	add	r1, sp, #16
   16c50:	add	r0, pc, r0
   16c54:	bl	16cd8 <print_json_data@@Base+0xa4c>
   16c58:	b	16c00 <print_json_data@@Base+0x974>
   16c5c:	andeq	r6, r1, r0, ror lr
   16c60:	andeq	r4, r0, r2, lsr fp
   16c64:	andeq	r4, r0, fp, lsl #22
   16c68:	andeq	r4, r0, r4, lsr #20
   16c6c:	andeq	r4, r0, sl, ror #18
   16c70:	andeq	r4, r0, r2, lsr r2
   16c74:	ldrdeq	r4, [r0], -r6
   16c78:	andeq	r4, r0, r0, lsr #10
   16c7c:	andeq	r4, r0, r2, lsl sl
   16c80:			; <UNDEFINED> instruction: 0x00003fbe
   16c84:	ldrdeq	r4, [r0], -fp
   16c88:	andeq	r4, r0, r8, ror #16
   16c8c:	muleq	r0, r5, r0
   16c90:	andeq	r4, r0, lr, asr #14
   16c94:	andeq	r4, r0, r4, asr #15
   16c98:	ldrdeq	r3, [r0], -r1
   16c9c:	andeq	r4, r0, sl, lsl #13
   16ca0:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   16ca4:	strdeq	r4, [r0], -ip
   16ca8:	muleq	r0, sl, r2
   16cac:	andeq	r4, r0, r4, ror #18
   16cb0:	andeq	r4, r0, sl, ror #4
   16cb4:	andeq	r4, r0, r7, ror #4
   16cb8:			; <UNDEFINED> instruction: 0x000048b3
   16cbc:	andeq	r4, r0, fp, lsr #18
   16cc0:	andeq	r3, r0, pc, lsr #29
   16cc4:	andeq	r4, r0, r0, asr r3
   16cc8:	andeq	r4, r0, r9, asr r3
   16ccc:	andeq	r4, r0, r6, lsl #9
   16cd0:	andeq	r4, r0, r4, lsl r5
   16cd4:	andeq	r4, r0, r4, lsl #6
   16cd8:	sub	sp, sp, #12
   16cdc:	push	{fp, lr}
   16ce0:	mov	fp, sp
   16ce4:	sub	sp, sp, #4
   16ce8:	mov	ip, r0
   16cec:	add	r0, fp, #8
   16cf0:	stm	r0, {r1, r2, r3}
   16cf4:	add	r2, fp, #8
   16cf8:	mov	r1, ip
   16cfc:	str	r2, [sp]
   16d00:	ldr	r0, [pc, #24]	; 16d20 <print_json_data@@Base+0xa94>
   16d04:	ldr	r0, [pc, r0]
   16d08:	ldr	r0, [r0]
   16d0c:	bl	129c8 <vfprintf@plt>
   16d10:	mov	sp, fp
   16d14:	pop	{fp, lr}
   16d18:	add	sp, sp, #12
   16d1c:	bx	lr
   16d20:			; <UNDEFINED> instruction: 0x000164b0
   16d24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d28:	add	fp, sp, #28
   16d2c:	sub	sp, sp, #4
   16d30:	cmp	r1, #1
   16d34:	blt	16e74 <print_json_data@@Base+0xbe8>
   16d38:	ldr	r6, [pc, #316]	; 16e7c <print_json_data@@Base+0xbf0>
   16d3c:	ldr	r8, [pc, #316]	; 16e80 <print_json_data@@Base+0xbf4>
   16d40:	ldr	r9, [pc, #316]	; 16e84 <print_json_data@@Base+0xbf8>
   16d44:	ldr	sl, [pc, #316]	; 16e88 <print_json_data@@Base+0xbfc>
   16d48:	ldr	r7, [pc, #316]	; 16e8c <print_json_data@@Base+0xc00>
   16d4c:	mov	r4, r1
   16d50:	mov	r5, r0
   16d54:	add	r6, pc, r6
   16d58:	add	r8, pc, r8
   16d5c:	add	r9, pc, r9
   16d60:	add	sl, pc, sl
   16d64:	add	r7, pc, r7
   16d68:	b	16d80 <print_json_data@@Base+0xaf4>
   16d6c:	mov	r0, r7
   16d70:	bl	16cd8 <print_json_data@@Base+0xa4c>
   16d74:	add	r5, r5, #1
   16d78:	subs	r4, r4, #1
   16d7c:	beq	16e74 <print_json_data@@Base+0xbe8>
   16d80:	ldrb	r1, [r5]
   16d84:	sub	r0, r1, #8
   16d88:	cmp	r0, #26
   16d8c:	bhi	16e14 <print_json_data@@Base+0xb88>
   16d90:	add	r2, pc, #4
   16d94:	ldr	r0, [r2, r0, lsl #2]
   16d98:	add	pc, r2, r0
   16d9c:	andeq	r0, r0, ip, rrx
   16da0:	andeq	r0, r0, r8, lsr #1
   16da4:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   16da8:	andeq	r0, r0, ip, lsl #1
   16dac:	strheq	r0, [r0], -r8
   16db0:	andeq	r0, r0, r0, asr #1
   16db4:	andeq	r0, r0, ip, lsl #1
   16db8:	andeq	r0, r0, ip, lsl #1
   16dbc:	andeq	r0, r0, ip, lsl #1
   16dc0:	andeq	r0, r0, ip, lsl #1
   16dc4:	andeq	r0, r0, ip, lsl #1
   16dc8:	andeq	r0, r0, ip, lsl #1
   16dcc:	andeq	r0, r0, ip, lsl #1
   16dd0:	andeq	r0, r0, ip, lsl #1
   16dd4:	andeq	r0, r0, ip, lsl #1
   16dd8:	andeq	r0, r0, ip, lsl #1
   16ddc:	andeq	r0, r0, ip, lsl #1
   16de0:	andeq	r0, r0, ip, lsl #1
   16de4:	andeq	r0, r0, ip, lsl #1
   16de8:	andeq	r0, r0, ip, lsl #1
   16dec:	andeq	r0, r0, ip, lsl #1
   16df0:	andeq	r0, r0, ip, lsl #1
   16df4:	andeq	r0, r0, ip, lsl #1
   16df8:	andeq	r0, r0, ip, lsl #1
   16dfc:	andeq	r0, r0, ip, lsl #1
   16e00:	andeq	r0, r0, ip, lsl #1
   16e04:			; <UNDEFINED> instruction: 0xffffffd0
   16e08:	ldr	r0, [pc, #132]	; 16e94 <print_json_data@@Base+0xc08>
   16e0c:	add	r0, pc, r0
   16e10:	b	16d70 <print_json_data@@Base+0xae4>
   16e14:	cmp	r1, #92	; 0x5c
   16e18:	bne	16e28 <print_json_data@@Base+0xb9c>
   16e1c:	ldr	r0, [pc, #108]	; 16e90 <print_json_data@@Base+0xc04>
   16e20:	add	r0, pc, r0
   16e24:	b	16d70 <print_json_data@@Base+0xae4>
   16e28:	sub	r0, r1, #32
   16e2c:	uxtb	r0, r0
   16e30:	cmp	r0, #94	; 0x5e
   16e34:	bhi	16e64 <print_json_data@@Base+0xbd8>
   16e38:	ldr	r0, [pc, #88]	; 16e98 <print_json_data@@Base+0xc0c>
   16e3c:	add	r0, pc, r0
   16e40:	b	16e6c <print_json_data@@Base+0xbe0>
   16e44:	mov	r0, r6
   16e48:	b	16d70 <print_json_data@@Base+0xae4>
   16e4c:	mov	r0, r8
   16e50:	b	16d70 <print_json_data@@Base+0xae4>
   16e54:	mov	r0, r9
   16e58:	b	16d70 <print_json_data@@Base+0xae4>
   16e5c:	mov	r0, sl
   16e60:	b	16d70 <print_json_data@@Base+0xae4>
   16e64:	ldr	r0, [pc, #48]	; 16e9c <print_json_data@@Base+0xc10>
   16e68:	add	r0, pc, r0
   16e6c:	bl	16cd8 <print_json_data@@Base+0xa4c>
   16e70:	b	16d74 <print_json_data@@Base+0xae8>
   16e74:	sub	sp, fp, #28
   16e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e7c:	andeq	r3, r0, r2, lsr #23
   16e80:	andeq	r3, r0, r1, lsr #23
   16e84:	andeq	r3, r0, r3, lsr #23
   16e88:	andeq	r3, r0, r2, lsr #23
   16e8c:	andeq	r4, r0, fp, asr r2
   16e90:	andeq	r3, r0, r5, ror #21
   16e94:	andeq	r3, r0, r7, ror #21
   16e98:	andeq	r3, r0, ip, ror ip
   16e9c:	andeq	r4, r0, sl, asr r1

00016ea0 <print_full_field_name@@Base>:
   16ea0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ea4:	add	fp, sp, #28
   16ea8:	sub	sp, sp, #12
   16eac:	mov	sl, r2
   16eb0:	mov	r4, r0
   16eb4:	cmp	r1, #1
   16eb8:	bne	16fa0 <print_full_field_name@@Base+0x100>
   16ebc:	str	sl, [sp]
   16ec0:	mov	r6, #0
   16ec4:	ldr	r5, [pc, #672]	; 1716c <print_full_field_name@@Base+0x2cc>
   16ec8:	ldr	r5, [pc, r5]
   16ecc:	ldr	r0, [r5, #136]	; 0x88
   16ed0:	cmp	r0, #1
   16ed4:	blt	16ffc <print_full_field_name@@Base+0x15c>
   16ed8:	ldr	r9, [pc, #656]	; 17170 <print_full_field_name@@Base+0x2d0>
   16edc:	add	sl, sp, #8
   16ee0:	mov	r7, #0
   16ee4:	mov	r8, #0
   16ee8:	add	r9, pc, r9
   16eec:	b	16f04 <print_full_field_name@@Base+0x64>
   16ef0:	add	r6, r6, #1
   16ef4:	ldr	r0, [r5, #136]	; 0x88
   16ef8:	add	r8, r8, #1
   16efc:	cmp	r8, r0
   16f00:	bge	16ffc <print_full_field_name@@Base+0x15c>
   16f04:	add	r0, r5, r8, lsl #2
   16f08:	mov	r1, sl
   16f0c:	ldr	r0, [r0, #8]
   16f10:	bl	12ad0 <coda_type_get_class@plt>
   16f14:	cmp	r0, #0
   16f18:	beq	16f20 <print_full_field_name@@Base+0x80>
   16f1c:	bl	189c0 <handle_coda_error@@Base>
   16f20:	ldr	r0, [sp, #8]
   16f24:	cmp	r0, #1
   16f28:	beq	16f50 <print_full_field_name@@Base+0xb0>
   16f2c:	cmp	r0, #0
   16f30:	bne	16ef4 <print_full_field_name@@Base+0x54>
   16f34:	add	r0, r5, r7, lsl #2
   16f38:	mov	r1, r9
   16f3c:	ldr	r2, [r0, #3620]	; 0xe24
   16f40:	mov	r0, r4
   16f44:	bl	128cc <fprintf@plt>
   16f48:	add	r7, r7, #1
   16f4c:	b	16ef4 <print_full_field_name@@Base+0x54>
   16f50:	cmp	r8, #0
   16f54:	bne	16f64 <print_full_field_name@@Base+0xc4>
   16f58:	mov	r0, #47	; 0x2f
   16f5c:	mov	r1, r4
   16f60:	bl	12a04 <fputc@plt>
   16f64:	add	r0, r6, r6, lsl #2
   16f68:	add	r0, r5, r0, lsl #4
   16f6c:	ldr	r0, [r0, #804]	; 0x324
   16f70:	cmp	r0, #1
   16f74:	blt	16ef0 <print_full_field_name@@Base+0x50>
   16f78:	mov	r0, #91	; 0x5b
   16f7c:	mov	r1, r4
   16f80:	bl	12a04 <fputc@plt>
   16f84:	mov	r0, r4
   16f88:	mov	r1, r6
   16f8c:	bl	17178 <print_full_field_name@@Base+0x2d8>
   16f90:	mov	r0, #93	; 0x5d
   16f94:	mov	r1, r4
   16f98:	bl	12a04 <fputc@plt>
   16f9c:	b	16ef0 <print_full_field_name@@Base+0x50>
   16fa0:	ldr	r7, [pc, #444]	; 17164 <print_full_field_name@@Base+0x2c4>
   16fa4:	mov	r5, r1
   16fa8:	ldr	r7, [pc, r7]
   16fac:	ldr	r0, [r7, #3748]	; 0xea4
   16fb0:	cmp	r0, #1
   16fb4:	blt	17030 <print_full_field_name@@Base+0x190>
   16fb8:	mov	r6, #0
   16fbc:	cmp	r6, #0
   16fc0:	bne	16fec <print_full_field_name@@Base+0x14c>
   16fc4:	add	r0, r7, r6, lsl #2
   16fc8:	mov	r1, r4
   16fcc:	ldr	r0, [r0, #3620]	; 0xe24
   16fd0:	bl	12a94 <fputs@plt>
   16fd4:	ldr	r0, [r7, #3748]	; 0xea4
   16fd8:	add	r6, r6, #1
   16fdc:	cmp	r6, r0
   16fe0:	bge	17030 <print_full_field_name@@Base+0x190>
   16fe4:	cmp	r6, #0
   16fe8:	beq	16fc4 <print_full_field_name@@Base+0x124>
   16fec:	mov	r0, #46	; 0x2e
   16ff0:	mov	r1, r4
   16ff4:	bl	12a04 <fputc@plt>
   16ff8:	b	16fc4 <print_full_field_name@@Base+0x124>
   16ffc:	ldr	r0, [sp]
   17000:	cmp	r0, #0
   17004:	beq	1715c <print_full_field_name@@Base+0x2bc>
   17008:	ldr	r0, [r5, #3360]	; 0xd20
   1700c:	cmp	r6, r0
   17010:	bge	1715c <print_full_field_name@@Base+0x2bc>
   17014:	mov	r0, #91	; 0x5b
   17018:	mov	r1, r4
   1701c:	bl	12a04 <fputc@plt>
   17020:	mov	r0, r4
   17024:	mov	r1, r6
   17028:	bl	17178 <print_full_field_name@@Base+0x2d8>
   1702c:	b	17150 <print_full_field_name@@Base+0x2b0>
   17030:	cmp	r5, #2
   17034:	bne	1715c <print_full_field_name@@Base+0x2bc>
   17038:	ldr	r0, [r7, #136]	; 0x88
   1703c:	mov	r6, #0
   17040:	cmp	r0, #1
   17044:	blt	170e8 <print_full_field_name@@Base+0x248>
   17048:	ldr	r9, [pc, #280]	; 17168 <print_full_field_name@@Base+0x2c8>
   1704c:	add	r8, sp, #4
   17050:	mov	r5, #0
   17054:	add	r9, pc, r9
   17058:	b	17090 <print_full_field_name@@Base+0x1f0>
   1705c:	mov	r0, r9
   17060:	mov	r1, #2
   17064:	mov	r2, #1
   17068:	mov	r3, r4
   1706c:	bl	127e8 <fwrite@plt>
   17070:	mov	r0, r4
   17074:	mov	r1, r6
   17078:	bl	17178 <print_full_field_name@@Base+0x2d8>
   1707c:	add	r6, r6, #1
   17080:	ldr	r0, [r7, #136]	; 0x88
   17084:	add	r5, r5, #1
   17088:	cmp	r5, r0
   1708c:	bge	170e8 <print_full_field_name@@Base+0x248>
   17090:	add	r0, r7, r5, lsl #2
   17094:	mov	r1, r8
   17098:	ldr	r0, [r0, #8]
   1709c:	bl	12ad0 <coda_type_get_class@plt>
   170a0:	cmp	r0, #0
   170a4:	beq	170ac <print_full_field_name@@Base+0x20c>
   170a8:	bl	189c0 <handle_coda_error@@Base>
   170ac:	ldr	r0, [sp, #4]
   170b0:	cmp	r0, #1
   170b4:	bne	17080 <print_full_field_name@@Base+0x1e0>
   170b8:	add	r0, r6, r6, lsl #2
   170bc:	add	r0, r7, r0, lsl #4
   170c0:	ldr	r1, [r0, #804]	; 0x324
   170c4:	cmp	r1, #1
   170c8:	blt	17080 <print_full_field_name@@Base+0x1e0>
   170cc:	ldr	r0, [r0, #800]	; 0x320
   170d0:	cmp	r0, #0
   170d4:	beq	1705c <print_full_field_name@@Base+0x1bc>
   170d8:	mov	r0, #44	; 0x2c
   170dc:	mov	r1, r4
   170e0:	bl	12a04 <fputc@plt>
   170e4:	b	17070 <print_full_field_name@@Base+0x1d0>
   170e8:	cmp	sl, #0
   170ec:	beq	17148 <print_full_field_name@@Base+0x2a8>
   170f0:	ldr	r0, [r7, #3360]	; 0xd20
   170f4:	cmp	r6, r0
   170f8:	bge	17148 <print_full_field_name@@Base+0x2a8>
   170fc:	add	r0, r6, r6, lsl #2
   17100:	add	r0, r7, r0, lsl #4
   17104:	ldr	r0, [r0, #800]	; 0x320
   17108:	cmp	r0, #0
   1710c:	beq	17120 <print_full_field_name@@Base+0x280>
   17110:	mov	r0, #44	; 0x2c
   17114:	mov	r1, r4
   17118:	bl	12a04 <fputc@plt>
   1711c:	b	17138 <print_full_field_name@@Base+0x298>
   17120:	ldr	r0, [pc, #76]	; 17174 <print_full_field_name@@Base+0x2d4>
   17124:	mov	r1, #2
   17128:	mov	r2, #1
   1712c:	mov	r3, r4
   17130:	add	r0, pc, r0
   17134:	bl	127e8 <fwrite@plt>
   17138:	mov	r0, r4
   1713c:	mov	r1, r6
   17140:	bl	17178 <print_full_field_name@@Base+0x2d8>
   17144:	add	r6, r6, #1
   17148:	cmp	r6, #1
   1714c:	blt	1715c <print_full_field_name@@Base+0x2bc>
   17150:	mov	r0, #93	; 0x5d
   17154:	mov	r1, r4
   17158:	bl	12a04 <fputc@plt>
   1715c:	sub	sp, fp, #28
   17160:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17164:	andeq	r6, r1, r4, lsl #4
   17168:	andeq	r3, r0, r9, ror pc
   1716c:	andeq	r6, r1, r4, ror #5
   17170:	andeq	r4, r0, r1, ror #1
   17174:	muleq	r0, sp, lr
   17178:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1717c:	add	fp, sp, #28
   17180:	sub	sp, sp, #4
   17184:	mov	r4, r0
   17188:	add	r0, r1, r1, lsl #2
   1718c:	ldr	r1, [pc, #216]	; 1726c <print_full_field_name@@Base+0x3cc>
   17190:	ldr	r1, [pc, r1]
   17194:	add	r0, r1, r0, lsl #4
   17198:	mov	r7, r0
   1719c:	ldr	r1, [r7, #804]!	; 0x324
   171a0:	cmp	r1, #1
   171a4:	blt	17264 <print_full_field_name@@Base+0x3c4>
   171a8:	ldr	r8, [pc, #192]	; 17270 <print_full_field_name@@Base+0x3d0>
   171ac:	add	sl, r0, #808	; 0x328
   171b0:	add	r5, r0, #800	; 0x320
   171b4:	mov	r6, #0
   171b8:	ldr	r8, [pc, r8]
   171bc:	ldr	r9, [pc, #176]	; 17274 <print_full_field_name@@Base+0x3d4>
   171c0:	ldr	r9, [pc, r9]
   171c4:	cmp	r6, #0
   171c8:	bne	171fc <print_full_field_name@@Base+0x35c>
   171cc:	b	17208 <print_full_field_name@@Base+0x368>
   171d0:	ldr	r2, [r0, #4]
   171d4:	ldr	r1, [pc, #160]	; 1727c <print_full_field_name@@Base+0x3dc>
   171d8:	mov	r0, r4
   171dc:	add	r1, pc, r1
   171e0:	bl	128cc <fprintf@plt>
   171e4:	ldr	r0, [r7]
   171e8:	add	r6, r6, #1
   171ec:	cmp	r6, r0
   171f0:	bge	17264 <print_full_field_name@@Base+0x3c4>
   171f4:	cmp	r6, #0
   171f8:	beq	17208 <print_full_field_name@@Base+0x368>
   171fc:	mov	r0, #44	; 0x2c
   17200:	mov	r1, r4
   17204:	bl	12a04 <fputc@plt>
   17208:	ldr	r0, [r8]
   1720c:	cmp	r0, #0
   17210:	beq	17248 <print_full_field_name@@Base+0x3a8>
   17214:	ldr	r0, [r5]
   17218:	add	r0, r6, r0
   1721c:	add	r0, r9, r0, lsl #2
   17220:	ldr	r1, [r0, #72]	; 0x48
   17224:	cmp	r1, #0
   17228:	beq	171d0 <print_full_field_name@@Base+0x330>
   1722c:	ldr	r3, [r0, #4]
   17230:	ldr	r2, [r0, #36]	; 0x24
   17234:	ldr	r1, [pc, #60]	; 17278 <print_full_field_name@@Base+0x3d8>
   17238:	mov	r0, r4
   1723c:	add	r1, pc, r1
   17240:	bl	128cc <fprintf@plt>
   17244:	b	171e4 <print_full_field_name@@Base+0x344>
   17248:	ldr	r2, [sl, r6, lsl #2]
   1724c:	cmn	r2, #1
   17250:	bne	171d4 <print_full_field_name@@Base+0x334>
   17254:	mov	r0, #63	; 0x3f
   17258:	mov	r1, r4
   1725c:	bl	12a04 <fputc@plt>
   17260:	b	171e4 <print_full_field_name@@Base+0x344>
   17264:	sub	sp, fp, #28
   17268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1726c:	andeq	r6, r1, ip, lsl r0
   17270:	strdeq	r5, [r1], -r0
   17274:	andeq	r6, r1, ip, lsl r0
   17278:	muleq	r0, r4, sp
   1727c:	strdeq	r3, [r0], -r8

00017280 <traverse_info_init@@Base>:
   17280:	ldr	r0, [pc, #24]	; 172a0 <traverse_info_init@@Base+0x20>
   17284:	mov	r1, #0
   17288:	ldr	r0, [pc, r0]
   1728c:	str	r1, [r0, #3748]	; 0xea4
   17290:	str	r1, [r0, #3360]	; 0xd20
   17294:	str	r1, [r0, #136]	; 0x88
   17298:	str	r1, [r0, #4]
   1729c:	bx	lr
   172a0:	andeq	r5, r1, r4, lsr #30

000172a4 <traverse_info_done@@Base>:
   172a4:	push	{r4, sl, fp, lr}
   172a8:	add	fp, sp, #8
   172ac:	ldr	r4, [pc, #40]	; 172dc <traverse_info_done@@Base+0x38>
   172b0:	ldr	r4, [pc, r4]
   172b4:	ldr	r0, [r4, #4]
   172b8:	cmp	r0, #0
   172bc:	beq	172c4 <traverse_info_done@@Base+0x20>
   172c0:	bl	129b0 <coda_close@plt>
   172c4:	ldr	r0, [r4, #664]	; 0x298
   172c8:	cmp	r0, #0
   172cc:	popeq	{r4, sl, fp, pc}
   172d0:	add	r0, r4, #664	; 0x298
   172d4:	pop	{r4, sl, fp, lr}
   172d8:	b	15d90 <codadump_filter_remove@@Base>
   172dc:	strdeq	r5, [r1], -ip

000172e0 <traverse_product@@Base>:
   172e0:	push	{r4, r5, fp, lr}
   172e4:	add	fp, sp, #8
   172e8:	ldr	r5, [pc, #164]	; 17394 <traverse_product@@Base+0xb4>
   172ec:	ldr	r5, [pc, r5]
   172f0:	mov	r1, r5
   172f4:	ldr	r0, [r1], #4
   172f8:	bl	126c8 <coda_open@plt>
   172fc:	cmp	r0, #0
   17300:	beq	17340 <traverse_product@@Base+0x60>
   17304:	bl	12a70 <coda_get_errno@plt>
   17308:	ldr	r0, [r0]
   1730c:	cmn	r0, #21
   17310:	bne	1733c <traverse_product@@Base+0x5c>
   17314:	mov	r0, #0
   17318:	bl	12710 <coda_set_option_use_mmap@plt>
   1731c:	mov	r1, r5
   17320:	ldr	r0, [r1], #4
   17324:	bl	126c8 <coda_open@plt>
   17328:	mov	r4, r0
   1732c:	mov	r0, #1
   17330:	bl	12710 <coda_set_option_use_mmap@plt>
   17334:	cmp	r4, #0
   17338:	beq	17340 <traverse_product@@Base+0x60>
   1733c:	bl	189c0 <handle_coda_error@@Base>
   17340:	ldr	r1, [r5, #4]
   17344:	add	r4, r5, #144	; 0x90
   17348:	mov	r0, r4
   1734c:	bl	127f4 <coda_cursor_set_product@plt>
   17350:	cmp	r0, #0
   17354:	beq	1735c <traverse_product@@Base+0x7c>
   17358:	bl	189c0 <handle_coda_error@@Base>
   1735c:	ldr	r0, [r5, #136]	; 0x88
   17360:	add	r0, r5, r0, lsl #2
   17364:	add	r1, r0, #8
   17368:	mov	r0, r4
   1736c:	bl	1274c <coda_cursor_get_type@plt>
   17370:	cmp	r0, #0
   17374:	beq	1737c <traverse_product@@Base+0x9c>
   17378:	bl	189c0 <handle_coda_error@@Base>
   1737c:	bl	17398 <traverse_product@@Base+0xb8>
   17380:	ldr	r0, [r5, #4]
   17384:	bl	129b0 <coda_close@plt>
   17388:	mov	r0, #0
   1738c:	str	r0, [r5, #4]
   17390:	pop	{r4, r5, fp, pc}
   17394:	andeq	r5, r1, r0, asr #29
   17398:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1739c:	add	fp, sp, #24
   173a0:	sub	sp, sp, #16
   173a4:	ldr	r6, [pc, #800]	; 176cc <traverse_product@@Base+0x3ec>
   173a8:	add	r1, sp, #12
   173ac:	ldr	r6, [pc, r6]
   173b0:	ldr	r0, [r6, #136]	; 0x88
   173b4:	add	r0, r6, r0, lsl #2
   173b8:	ldr	r0, [r0, #8]
   173bc:	bl	12ad0 <coda_type_get_class@plt>
   173c0:	cmp	r0, #0
   173c4:	beq	173cc <traverse_product@@Base+0xec>
   173c8:	bl	189c0 <handle_coda_error@@Base>
   173cc:	ldr	r0, [sp, #12]
   173d0:	cmp	r0, #6
   173d4:	bhi	17624 <traverse_product@@Base+0x344>
   173d8:	add	r1, pc, #4
   173dc:	ldr	r0, [r1, r0, lsl #2]
   173e0:	add	pc, r1, r0
   173e4:	andeq	r0, r0, r8, ror r0
   173e8:	andeq	r0, r0, r4, ror r1
   173ec:	andeq	r0, r0, ip, lsl r0
   173f0:	andeq	r0, r0, ip, lsl r0
   173f4:	andeq	r0, r0, ip, lsl r0
   173f8:	andeq	r0, r0, ip, lsl r0
   173fc:	andeq	r0, r0, ip, asr #3
   17400:	ldr	r0, [r6, #136]	; 0x88
   17404:	add	r1, sp, #8
   17408:	add	r0, r6, r0, lsl #2
   1740c:	ldr	r0, [r0, #8]
   17410:	bl	12890 <coda_type_get_read_type@plt>
   17414:	cmp	r0, #0
   17418:	beq	17420 <traverse_product@@Base+0x140>
   1741c:	bl	189c0 <handle_coda_error@@Base>
   17420:	ldr	r0, [sp, #8]
   17424:	sub	r0, r0, #11
   17428:	cmp	r0, #1
   1742c:	bhi	17620 <traverse_product@@Base+0x340>
   17430:	bl	14b4c <dim_enter_array@@Base>
   17434:	ldr	r0, [r6, #3360]	; 0xd20
   17438:	add	r0, r0, #1
   1743c:	str	r0, [r6, #3360]	; 0xd20
   17440:	bl	17808 <traverse_product@@Base+0x528>
   17444:	ldr	r0, [r6, #3360]	; 0xd20
   17448:	sub	r0, r0, #1
   1744c:	str	r0, [r6, #3360]	; 0xd20
   17450:	bl	15934 <dim_leave_array@@Base>
   17454:	sub	sp, fp, #24
   17458:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1745c:	ldr	r0, [r6, #136]	; 0x88
   17460:	cmp	r0, #30
   17464:	bgt	17624 <traverse_product@@Base+0x344>
   17468:	ldr	r1, [r6, #3748]	; 0xea4
   1746c:	add	r0, r6, r0, lsl #2
   17470:	add	r1, r1, #1
   17474:	str	r1, [r6, #3748]	; 0xea4
   17478:	add	r1, sp, #8
   1747c:	ldr	r0, [r0, #8]
   17480:	bl	12878 <coda_type_get_num_record_fields@plt>
   17484:	cmp	r0, #0
   17488:	beq	17490 <traverse_product@@Base+0x1b0>
   1748c:	bl	189c0 <handle_coda_error@@Base>
   17490:	ldr	r0, [r6, #136]	; 0x88
   17494:	add	r0, r0, #1
   17498:	str	r0, [r6, #136]	; 0x88
   1749c:	ldr	r0, [r6, #796]	; 0x31c
   174a0:	add	r0, r6, r0, lsl #2
   174a4:	ldr	r8, [r0, #664]	; 0x298
   174a8:	cmp	r8, #0
   174ac:	beq	17634 <traverse_product@@Base+0x354>
   174b0:	add	r4, sp, #4
   174b4:	add	r7, r6, #664	; 0x298
   174b8:	mov	r0, r8
   174bc:	b	17510 <traverse_product@@Base+0x230>
   174c0:	ldr	r0, [r6, #796]	; 0x31c
   174c4:	ldr	r0, [r7, r0, lsl #2]
   174c8:	bl	15e88 <codadump_filter_get_subfilter@@Base>
   174cc:	ldr	r1, [r6, #796]	; 0x31c
   174d0:	add	r1, r1, #1
   174d4:	str	r0, [r7, r1, lsl #2]
   174d8:	ldr	r0, [sp, #4]
   174dc:	str	r1, [r6, #796]	; 0x31c
   174e0:	mov	r1, #1
   174e4:	bl	176e4 <traverse_product@@Base+0x404>
   174e8:	ldr	r0, [r6, #796]	; 0x31c
   174ec:	sub	r0, r0, #1
   174f0:	str	r0, [r6, #796]	; 0x31c
   174f4:	ldr	r0, [r7, r0, lsl #2]
   174f8:	bl	15ec8 <codadump_filter_get_next_filter@@Base>
   174fc:	ldr	r2, [r6, #796]	; 0x31c
   17500:	mov	r1, r7
   17504:	cmp	r0, #0
   17508:	str	r0, [r1, r2, lsl #2]!
   1750c:	beq	1762c <traverse_product@@Base+0x34c>
   17510:	bl	15e48 <codadump_filter_get_fieldname@@Base>
   17514:	cmp	r0, #0
   17518:	beq	17688 <traverse_product@@Base+0x3a8>
   1751c:	mov	r5, r0
   17520:	ldr	r0, [r6, #136]	; 0x88
   17524:	mov	r2, r4
   17528:	mov	r1, r5
   1752c:	add	r0, r6, r0, lsl #2
   17530:	ldr	r0, [r0, #4]
   17534:	bl	129e0 <coda_type_get_record_field_index_from_name@plt>
   17538:	cmp	r0, #0
   1753c:	beq	174c0 <traverse_product@@Base+0x1e0>
   17540:	bl	12a70 <coda_get_errno@plt>
   17544:	ldr	r0, [r0]
   17548:	cmn	r0, #102	; 0x66
   1754c:	beq	176a8 <traverse_product@@Base+0x3c8>
   17550:	bl	189c0 <handle_coda_error@@Base>
   17554:	b	174c0 <traverse_product@@Base+0x1e0>
   17558:	ldr	r0, [r6, #136]	; 0x88
   1755c:	cmp	r0, #30
   17560:	bgt	17624 <traverse_product@@Base+0x344>
   17564:	bl	14b4c <dim_enter_array@@Base>
   17568:	ldr	r0, [r6, #3360]	; 0xd20
   1756c:	add	r2, r6, #8
   17570:	add	r0, r0, #1
   17574:	str	r0, [r6, #3360]	; 0xd20
   17578:	ldr	r0, [r6, #136]	; 0x88
   1757c:	add	r1, r0, #1
   17580:	str	r1, [r6, #136]	; 0x88
   17584:	add	r1, r2, r1, lsl #2
   17588:	ldr	r0, [r2, r0, lsl #2]
   1758c:	bl	12968 <coda_type_get_array_base_type@plt>
   17590:	cmp	r0, #0
   17594:	beq	1759c <traverse_product@@Base+0x2bc>
   17598:	bl	189c0 <handle_coda_error@@Base>
   1759c:	bl	17398 <traverse_product@@Base+0xb8>
   175a0:	ldr	r0, [r6, #136]	; 0x88
   175a4:	sub	r0, r0, #1
   175a8:	str	r0, [r6, #136]	; 0x88
   175ac:	b	17444 <traverse_product@@Base+0x164>
   175b0:	bl	1265c <coda_get_option_bypass_special_types@plt>
   175b4:	mov	r2, r0
   175b8:	ldr	r0, [r6, #136]	; 0x88
   175bc:	cmp	r2, #0
   175c0:	add	r1, r6, r0, lsl #2
   175c4:	ldr	r0, [r1, #8]!
   175c8:	beq	175e8 <traverse_product@@Base+0x308>
   175cc:	bl	12a7c <coda_type_get_special_base_type@plt>
   175d0:	cmp	r0, #0
   175d4:	beq	175dc <traverse_product@@Base+0x2fc>
   175d8:	bl	189c0 <handle_coda_error@@Base>
   175dc:	bl	17398 <traverse_product@@Base+0xb8>
   175e0:	sub	sp, fp, #24
   175e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   175e8:	add	r1, sp, #8
   175ec:	bl	12944 <coda_type_get_special_type@plt>
   175f0:	cmp	r0, #0
   175f4:	beq	175fc <traverse_product@@Base+0x31c>
   175f8:	bl	189c0 <handle_coda_error@@Base>
   175fc:	ldr	r0, [sp, #8]
   17600:	sub	r1, r0, #1
   17604:	cmp	r1, #2
   17608:	bcc	17620 <traverse_product@@Base+0x340>
   1760c:	cmp	r0, #0
   17610:	beq	17624 <traverse_product@@Base+0x344>
   17614:	cmp	r0, #3
   17618:	beq	17430 <traverse_product@@Base+0x150>
   1761c:	b	17624 <traverse_product@@Base+0x344>
   17620:	bl	17808 <traverse_product@@Base+0x528>
   17624:	sub	sp, fp, #24
   17628:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1762c:	str	r8, [r1]
   17630:	b	17668 <traverse_product@@Base+0x388>
   17634:	ldr	r1, [sp, #8]
   17638:	mov	r0, #0
   1763c:	str	r0, [sp, #4]
   17640:	cmp	r1, #1
   17644:	blt	17668 <traverse_product@@Base+0x388>
   17648:	mov	r1, #0
   1764c:	bl	176e4 <traverse_product@@Base+0x404>
   17650:	ldr	r0, [sp, #4]
   17654:	ldr	r1, [sp, #8]
   17658:	add	r0, r0, #1
   1765c:	cmp	r0, r1
   17660:	str	r0, [sp, #4]
   17664:	blt	17648 <traverse_product@@Base+0x368>
   17668:	ldr	r0, [r6, #136]	; 0x88
   1766c:	sub	r0, r0, #1
   17670:	str	r0, [r6, #136]	; 0x88
   17674:	ldr	r0, [r6, #3748]	; 0xea4
   17678:	sub	r0, r0, #1
   1767c:	str	r0, [r6, #3748]	; 0xea4
   17680:	sub	sp, fp, #24
   17684:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17688:	ldr	r0, [pc, #64]	; 176d0 <traverse_product@@Base+0x3f0>
   1768c:	ldr	r1, [pc, #64]	; 176d4 <traverse_product@@Base+0x3f4>
   17690:	ldr	r3, [pc, #64]	; 176d8 <traverse_product@@Base+0x3f8>
   17694:	movw	r2, #393	; 0x189
   17698:	add	r0, pc, r0
   1769c:	add	r1, pc, r1
   176a0:	add	r3, pc, r3
   176a4:	bl	12ac4 <__assert_fail@plt>
   176a8:	ldr	r0, [pc, #44]	; 176dc <traverse_product@@Base+0x3fc>
   176ac:	mov	r2, r5
   176b0:	ldr	r0, [pc, r0]
   176b4:	ldr	r0, [r0]
   176b8:	ldr	r1, [pc, #32]	; 176e0 <traverse_product@@Base+0x400>
   176bc:	add	r1, pc, r1
   176c0:	bl	128cc <fprintf@plt>
   176c4:	mov	r0, #1
   176c8:	bl	12884 <exit@plt>
   176cc:	andeq	r5, r1, r0, lsl #28
   176d0:	andeq	r3, r0, r0, asr #18
   176d4:	andeq	r3, r0, r9, asr #18
   176d8:	andeq	r3, r0, sl, lsr #19
   176dc:	andeq	r5, r1, r0, lsl #22
   176e0:	andeq	r3, r0, r3, lsr #19
   176e4:	push	{r4, r5, r6, sl, fp, lr}
   176e8:	add	fp, sp, #16
   176ec:	sub	sp, sp, #8
   176f0:	ldr	r6, [pc, #264]	; 17800 <traverse_product@@Base+0x520>
   176f4:	mov	r4, r0
   176f8:	mov	r5, r1
   176fc:	add	r2, sp, #4
   17700:	mov	r1, r4
   17704:	ldr	r6, [pc, r6]
   17708:	ldr	r0, [r6, #3748]	; 0xea4
   1770c:	add	r0, r6, r0, lsl #2
   17710:	str	r4, [r0, #3488]	; 0xda0
   17714:	ldr	r0, [r6, #136]	; 0x88
   17718:	add	r0, r6, r0, lsl #2
   1771c:	ldr	r0, [r0, #4]
   17720:	bl	1268c <coda_type_get_record_field_hidden_status@plt>
   17724:	cmp	r0, #0
   17728:	beq	17730 <traverse_product@@Base+0x450>
   1772c:	bl	189c0 <handle_coda_error@@Base>
   17730:	cmp	r5, #0
   17734:	bne	17744 <traverse_product@@Base+0x464>
   17738:	ldr	r0, [sp, #4]
   1773c:	cmp	r0, #0
   17740:	bne	177f8 <traverse_product@@Base+0x518>
   17744:	ldr	r0, [pc, #184]	; 17804 <traverse_product@@Base+0x524>
   17748:	ldr	r0, [pc, r0]
   1774c:	ldr	r0, [r0]
   17750:	cmp	r0, #0
   17754:	beq	177a4 <traverse_product@@Base+0x4c4>
   17758:	ldr	r0, [r6, #136]	; 0x88
   1775c:	mov	r2, sp
   17760:	mov	r1, r4
   17764:	add	r0, r6, r0, lsl #2
   17768:	ldr	r0, [r0, #4]
   1776c:	bl	1277c <coda_type_get_record_field_available_status@plt>
   17770:	cmp	r0, #0
   17774:	beq	1777c <traverse_product@@Base+0x49c>
   17778:	bl	189c0 <handle_coda_error@@Base>
   1777c:	ldr	r0, [sp]
   17780:	cmn	r0, #1
   17784:	bne	17798 <traverse_product@@Base+0x4b8>
   17788:	bl	15a78 <dim_record_field_available@@Base>
   1778c:	cmp	r0, #0
   17790:	beq	177f8 <traverse_product@@Base+0x518>
   17794:	ldr	r0, [sp]
   17798:	ldr	r1, [r6, #136]	; 0x88
   1779c:	add	r1, r6, r1, lsl #2
   177a0:	str	r0, [r1, #3360]	; 0xd20
   177a4:	ldr	r0, [r6, #136]	; 0x88
   177a8:	ldr	r1, [r6, #3748]	; 0xea4
   177ac:	add	r0, r6, r0, lsl #2
   177b0:	add	r1, r6, r1, lsl #2
   177b4:	ldr	r0, [r0, #4]
   177b8:	add	r2, r1, #3616	; 0xe20
   177bc:	mov	r1, r4
   177c0:	bl	12a88 <coda_type_get_record_field_name@plt>
   177c4:	cmp	r0, #0
   177c8:	beq	177d0 <traverse_product@@Base+0x4f0>
   177cc:	bl	189c0 <handle_coda_error@@Base>
   177d0:	ldr	r0, [r6, #136]	; 0x88
   177d4:	add	r1, r6, r0, lsl #2
   177d8:	ldr	r0, [r1, #4]
   177dc:	add	r2, r1, #8
   177e0:	mov	r1, r4
   177e4:	bl	12740 <coda_type_get_record_field_type@plt>
   177e8:	cmp	r0, #0
   177ec:	beq	177f4 <traverse_product@@Base+0x514>
   177f0:	bl	189c0 <handle_coda_error@@Base>
   177f4:	bl	17398 <traverse_product@@Base+0xb8>
   177f8:	sub	sp, fp, #16
   177fc:	pop	{r4, r5, r6, sl, fp, pc}
   17800:	andeq	r5, r1, r8, lsr #21
   17804:	andeq	r5, r1, r0, ror #20
   17808:	push	{r4, r5, fp, lr}
   1780c:	add	fp, sp, #8
   17810:	sub	sp, sp, #8
   17814:	ldr	r0, [pc, #608]	; 17a7c <traverse_product@@Base+0x79c>
   17818:	ldr	r0, [pc, r0]
   1781c:	ldr	r0, [r0]
   17820:	cmp	r0, #1
   17824:	beq	178cc <traverse_product@@Base+0x5ec>
   17828:	cmp	r0, #0
   1782c:	bne	17a54 <traverse_product@@Base+0x774>
   17830:	ldr	r4, [pc, #584]	; 17a80 <traverse_product@@Base+0x7a0>
   17834:	mov	r1, #1
   17838:	mov	r2, #0
   1783c:	ldr	r4, [pc, r4]
   17840:	ldr	r0, [r4]
   17844:	bl	16ea0 <print_full_field_name@@Base>
   17848:	ldr	r0, [pc, #564]	; 17a84 <traverse_product@@Base+0x7a4>
   1784c:	ldr	r0, [pc, r0]
   17850:	ldr	r0, [r0]
   17854:	cmp	r0, #0
   17858:	beq	17948 <traverse_product@@Base+0x668>
   1785c:	ldr	r5, [pc, #548]	; 17a88 <traverse_product@@Base+0x7a8>
   17860:	add	r1, sp, #4
   17864:	ldr	r5, [pc, r5]
   17868:	ldr	r0, [r5, #136]	; 0x88
   1786c:	add	r0, r5, r0, lsl #2
   17870:	ldr	r0, [r0, #8]
   17874:	bl	12ad0 <coda_type_get_class@plt>
   17878:	cmp	r0, #0
   1787c:	beq	17884 <traverse_product@@Base+0x5a4>
   17880:	bl	189c0 <handle_coda_error@@Base>
   17884:	ldr	r0, [sp, #4]
   17888:	cmp	r0, #6
   1788c:	bne	178d8 <traverse_product@@Base+0x5f8>
   17890:	ldr	r0, [r5, #136]	; 0x88
   17894:	mov	r1, sp
   17898:	add	r0, r5, r0, lsl #2
   1789c:	ldr	r0, [r0, #8]
   178a0:	bl	12944 <coda_type_get_special_type@plt>
   178a4:	cmp	r0, #0
   178a8:	beq	178b0 <traverse_product@@Base+0x5d0>
   178ac:	bl	189c0 <handle_coda_error@@Base>
   178b0:	ldr	r0, [sp]
   178b4:	bl	12638 <coda_type_get_special_type_name@plt>
   178b8:	mov	r1, r0
   178bc:	ldr	r0, [pc, #456]	; 17a8c <traverse_product@@Base+0x7ac>
   178c0:	add	r0, pc, r0
   178c4:	bl	12698 <printf@plt>
   178c8:	b	17948 <traverse_product@@Base+0x668>
   178cc:	sub	sp, fp, #8
   178d0:	pop	{r4, r5, fp, lr}
   178d4:	b	12bcc <export_data_element_to_ascii@@Base>
   178d8:	ldr	r0, [r5, #136]	; 0x88
   178dc:	mov	r1, sp
   178e0:	add	r0, r5, r0, lsl #2
   178e4:	ldr	r0, [r0, #8]
   178e8:	bl	12890 <coda_type_get_read_type@plt>
   178ec:	cmp	r0, #0
   178f0:	beq	178f8 <traverse_product@@Base+0x618>
   178f4:	bl	189c0 <handle_coda_error@@Base>
   178f8:	ldr	r0, [sp]
   178fc:	bl	1298c <coda_type_get_native_type_name@plt>
   17900:	mov	r1, r0
   17904:	ldr	r0, [pc, #388]	; 17a90 <traverse_product@@Base+0x7b0>
   17908:	add	r0, pc, r0
   1790c:	bl	12698 <printf@plt>
   17910:	ldr	r0, [sp]
   17914:	sub	r0, r0, #11
   17918:	cmp	r0, #1
   1791c:	bhi	17948 <traverse_product@@Base+0x668>
   17920:	mov	r0, #40	; 0x28
   17924:	bl	1292c <putchar@plt>
   17928:	ldr	r1, [r5, #3360]	; 0xd20
   1792c:	cmp	r1, #0
   17930:	ble	17a5c <traverse_product@@Base+0x77c>
   17934:	ldr	r0, [r4]
   17938:	sub	r1, r1, #1
   1793c:	bl	17178 <print_full_field_name@@Base+0x2d8>
   17940:	mov	r0, #41	; 0x29
   17944:	bl	1292c <putchar@plt>
   17948:	ldr	r0, [pc, #324]	; 17a94 <traverse_product@@Base+0x7b4>
   1794c:	ldr	r0, [pc, r0]
   17950:	ldr	r0, [r0]
   17954:	cmp	r0, #0
   17958:	beq	179a8 <traverse_product@@Base+0x6c8>
   1795c:	ldr	r0, [pc, #308]	; 17a98 <traverse_product@@Base+0x7b8>
   17960:	ldr	r0, [pc, r0]
   17964:	ldr	r1, [r0, #136]	; 0x88
   17968:	add	r0, r0, r1, lsl #2
   1796c:	add	r1, sp, #4
   17970:	ldr	r0, [r0, #8]
   17974:	bl	127b8 <coda_type_get_unit@plt>
   17978:	cmp	r0, #0
   1797c:	beq	17984 <traverse_product@@Base+0x6a4>
   17980:	bl	189c0 <handle_coda_error@@Base>
   17984:	ldr	r1, [sp, #4]
   17988:	cmp	r1, #0
   1798c:	beq	179a8 <traverse_product@@Base+0x6c8>
   17990:	ldrb	r0, [r1]
   17994:	cmp	r0, #0
   17998:	beq	179a8 <traverse_product@@Base+0x6c8>
   1799c:	ldr	r0, [pc, #248]	; 17a9c <traverse_product@@Base+0x7bc>
   179a0:	add	r0, pc, r0
   179a4:	bl	12698 <printf@plt>
   179a8:	ldr	r0, [pc, #240]	; 17aa0 <traverse_product@@Base+0x7c0>
   179ac:	ldr	r0, [pc, r0]
   179b0:	ldr	r0, [r0]
   179b4:	cmp	r0, #0
   179b8:	beq	17a08 <traverse_product@@Base+0x728>
   179bc:	ldr	r0, [pc, #224]	; 17aa4 <traverse_product@@Base+0x7c4>
   179c0:	ldr	r0, [pc, r0]
   179c4:	ldr	r1, [r0, #136]	; 0x88
   179c8:	add	r0, r0, r1, lsl #2
   179cc:	add	r1, sp, #4
   179d0:	ldr	r0, [r0, #8]
   179d4:	bl	127c4 <coda_type_get_description@plt>
   179d8:	cmp	r0, #0
   179dc:	beq	179e4 <traverse_product@@Base+0x704>
   179e0:	bl	189c0 <handle_coda_error@@Base>
   179e4:	ldr	r1, [sp, #4]
   179e8:	cmp	r1, #0
   179ec:	beq	17a08 <traverse_product@@Base+0x728>
   179f0:	ldrb	r0, [r1]
   179f4:	cmp	r0, #0
   179f8:	beq	17a08 <traverse_product@@Base+0x728>
   179fc:	ldr	r0, [pc, #164]	; 17aa8 <traverse_product@@Base+0x7c8>
   17a00:	add	r0, pc, r0
   17a04:	bl	12698 <printf@plt>
   17a08:	mov	r0, #10
   17a0c:	bl	1292c <putchar@plt>
   17a10:	ldr	r0, [pc, #148]	; 17aac <traverse_product@@Base+0x7cc>
   17a14:	ldr	r0, [pc, r0]
   17a18:	ldr	r0, [r0]
   17a1c:	cmp	r0, #0
   17a20:	beq	17a54 <traverse_product@@Base+0x774>
   17a24:	ldr	r5, [pc, #132]	; 17ab0 <traverse_product@@Base+0x7d0>
   17a28:	ldr	r5, [pc, r5]
   17a2c:	ldr	r0, [r5]
   17a30:	cmp	r0, #1
   17a34:	blt	17a54 <traverse_product@@Base+0x774>
   17a38:	mov	r4, #0
   17a3c:	mov	r0, r4
   17a40:	bl	1493c <print_all_distinct_dims@@Base>
   17a44:	ldr	r0, [r5]
   17a48:	add	r4, r4, #1
   17a4c:	cmp	r4, r0
   17a50:	blt	17a3c <traverse_product@@Base+0x75c>
   17a54:	sub	sp, fp, #8
   17a58:	pop	{r4, r5, fp, pc}
   17a5c:	ldr	r0, [pc, #80]	; 17ab4 <traverse_product@@Base+0x7d4>
   17a60:	ldr	r1, [pc, #80]	; 17ab8 <traverse_product@@Base+0x7d8>
   17a64:	ldr	r3, [pc, #80]	; 17abc <traverse_product@@Base+0x7dc>
   17a68:	mov	r2, #238	; 0xee
   17a6c:	add	r0, pc, r0
   17a70:	add	r1, pc, r1
   17a74:	add	r3, pc, r3
   17a78:	bl	12ac4 <__assert_fail@plt>
   17a7c:			; <UNDEFINED> instruction: 0x000159b4
   17a80:	muleq	r1, r8, r9
   17a84:	andeq	r5, r1, r0, ror r9
   17a88:	andeq	r5, r1, r8, asr #18
   17a8c:	ldrdeq	r3, [r0], -r3	; <UNPREDICTABLE>
   17a90:	andeq	r3, r0, fp, lsl #15
   17a94:	andeq	r5, r1, r8, asr r8
   17a98:	andeq	r5, r1, ip, asr #16
   17a9c:	andeq	r3, r0, pc, lsr #14
   17aa0:	andeq	r5, r1, r4, lsl r8
   17aa4:	andeq	r5, r1, ip, ror #15
   17aa8:	ldrdeq	r3, [r0], -r5
   17aac:	andeq	r5, r1, r4, lsl #15
   17ab0:			; <UNDEFINED> instruction: 0x000157b4
   17ab4:	andeq	r3, r0, fp, lsr #12
   17ab8:	andeq	r3, r0, r5, ror r5
   17abc:	andeq	r3, r0, r0, asr #12

00017ac0 <print_yaml_data@@Base>:
   17ac0:	push	{r4, sl, fp, lr}
   17ac4:	add	fp, sp, #8
   17ac8:	sub	sp, sp, #528	; 0x210
   17acc:	ldr	r1, [pc, #192]	; 17b94 <print_yaml_data@@Base+0xd4>
   17ad0:	add	r1, pc, r1
   17ad4:	str	r0, [r1]
   17ad8:	sub	r1, fp, #12
   17adc:	ldr	r4, [pc, #180]	; 17b98 <print_yaml_data@@Base+0xd8>
   17ae0:	ldr	r4, [pc, r4]
   17ae4:	ldr	r0, [r4]
   17ae8:	bl	126c8 <coda_open@plt>
   17aec:	cmp	r0, #0
   17af0:	beq	17b30 <print_yaml_data@@Base+0x70>
   17af4:	bl	12a70 <coda_get_errno@plt>
   17af8:	ldr	r0, [r0]
   17afc:	cmn	r0, #21
   17b00:	bne	17b2c <print_yaml_data@@Base+0x6c>
   17b04:	mov	r0, #0
   17b08:	bl	12710 <coda_set_option_use_mmap@plt>
   17b0c:	ldr	r0, [r4]
   17b10:	sub	r1, fp, #12
   17b14:	bl	126c8 <coda_open@plt>
   17b18:	mov	r4, r0
   17b1c:	mov	r0, #1
   17b20:	bl	12710 <coda_set_option_use_mmap@plt>
   17b24:	cmp	r4, #0
   17b28:	beq	17b30 <print_yaml_data@@Base+0x70>
   17b2c:	bl	189c0 <handle_coda_error@@Base>
   17b30:	ldr	r1, [fp, #-12]
   17b34:	mov	r0, sp
   17b38:	bl	127f4 <coda_cursor_set_product@plt>
   17b3c:	cmp	r0, #0
   17b40:	beq	17b48 <print_yaml_data@@Base+0x88>
   17b44:	bl	189c0 <handle_coda_error@@Base>
   17b48:	ldr	r0, [pc, #76]	; 17b9c <print_yaml_data@@Base+0xdc>
   17b4c:	ldr	r0, [pc, r0]
   17b50:	ldr	r1, [r0]
   17b54:	cmp	r1, #0
   17b58:	beq	17b70 <print_yaml_data@@Base+0xb0>
   17b5c:	mov	r0, sp
   17b60:	bl	129d4 <coda_cursor_goto@plt>
   17b64:	cmp	r0, #0
   17b68:	beq	17b70 <print_yaml_data@@Base+0xb0>
   17b6c:	bl	189c0 <handle_coda_error@@Base>
   17b70:	mov	r0, #0
   17b74:	bl	12668 <coda_set_option_perform_boundary_checks@plt>
   17b78:	mov	r0, sp
   17b7c:	mov	r1, #0
   17b80:	bl	17ba0 <print_yaml_data@@Base+0xe0>
   17b84:	ldr	r0, [fp, #-12]
   17b88:	bl	129b0 <coda_close@plt>
   17b8c:	sub	sp, fp, #8
   17b90:	pop	{r4, sl, fp, pc}
   17b94:	andeq	r5, r1, r8, lsr r7
   17b98:	andeq	r5, r1, ip, asr #13
   17b9c:	andeq	r5, r1, r4, lsl #13
   17ba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ba4:	add	fp, sp, #28
   17ba8:	sub	sp, sp, #76	; 0x4c
   17bac:	mov	sl, r0
   17bb0:	mov	r0, #0
   17bb4:	mov	r5, r1
   17bb8:	str	r0, [fp, #-36]	; 0xffffffdc
   17bbc:	ldr	r0, [pc, #2692]	; 18648 <print_yaml_data@@Base+0xb88>
   17bc0:	ldr	r0, [pc, r0]
   17bc4:	ldr	r8, [pc, #2688]	; 1864c <print_yaml_data@@Base+0xb8c>
   17bc8:	cmp	r0, #0
   17bcc:	add	r8, pc, r8
   17bd0:	beq	17cc0 <print_yaml_data@@Base+0x200>
   17bd4:	sub	r1, fp, #36	; 0x24
   17bd8:	mov	r0, sl
   17bdc:	bl	12788 <coda_cursor_has_attributes@plt>
   17be0:	cmp	r0, #0
   17be4:	beq	17bec <print_yaml_data@@Base+0x12c>
   17be8:	bl	189c0 <handle_coda_error@@Base>
   17bec:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17bf0:	cmp	r0, #0
   17bf4:	beq	17cc0 <print_yaml_data@@Base+0x200>
   17bf8:	cmp	r5, #0
   17bfc:	beq	17c50 <print_yaml_data@@Base+0x190>
   17c00:	ldr	r0, [pc, #2632]	; 18650 <print_yaml_data@@Base+0xb90>
   17c04:	add	r0, pc, r0
   17c08:	bl	18730 <print_yaml_data@@Base+0xc70>
   17c0c:	ldr	r4, [pc, #2624]	; 18654 <print_yaml_data@@Base+0xb94>
   17c10:	ldr	r4, [pc, r4]
   17c14:	cmp	r4, #0
   17c18:	bmi	18628 <print_yaml_data@@Base+0xb68>
   17c1c:	beq	17c50 <print_yaml_data@@Base+0x190>
   17c20:	ldr	r7, [pc, #2608]	; 18658 <print_yaml_data@@Base+0xb98>
   17c24:	ldr	r7, [pc, r7]
   17c28:	ldr	r6, [pc, #2604]	; 1865c <print_yaml_data@@Base+0xb9c>
   17c2c:	add	r6, pc, r6
   17c30:	ldr	r3, [r7]
   17c34:	mov	r0, r6
   17c38:	mov	r1, #2
   17c3c:	mov	r2, #1
   17c40:	bl	127e8 <fwrite@plt>
   17c44:	sub	r4, r4, #1
   17c48:	cmp	r4, #0
   17c4c:	bgt	17c30 <print_yaml_data@@Base+0x170>
   17c50:	ldr	r0, [pc, #2568]	; 18660 <print_yaml_data@@Base+0xba0>
   17c54:	add	r0, pc, r0
   17c58:	bl	18730 <print_yaml_data@@Base+0xc70>
   17c5c:	mov	r0, sl
   17c60:	bl	12908 <coda_cursor_goto_attributes@plt>
   17c64:	cmp	r0, #0
   17c68:	beq	17c70 <print_yaml_data@@Base+0x1b0>
   17c6c:	bl	189c0 <handle_coda_error@@Base>
   17c70:	ldr	r0, [pc, #2540]	; 18664 <print_yaml_data@@Base+0xba4>
   17c74:	mov	r1, #1
   17c78:	ldr	r0, [pc, r0]
   17c7c:	add	r0, r0, #1
   17c80:	str	r0, [r8]
   17c84:	mov	r0, sl
   17c88:	bl	17ba0 <print_yaml_data@@Base+0xe0>
   17c8c:	ldr	r0, [pc, #2516]	; 18668 <print_yaml_data@@Base+0xba8>
   17c90:	ldr	r0, [pc, r0]
   17c94:	sub	r0, r0, #1
   17c98:	str	r0, [r8]
   17c9c:	mov	r0, sl
   17ca0:	bl	1286c <coda_cursor_goto_parent@plt>
   17ca4:	ldr	r0, [pc, #2496]	; 1866c <print_yaml_data@@Base+0xbac>
   17ca8:	add	r0, pc, r0
   17cac:	bl	1877c <print_yaml_data@@Base+0xcbc>
   17cb0:	ldr	r0, [pc, #2488]	; 18670 <print_yaml_data@@Base+0xbb0>
   17cb4:	ldr	r0, [pc, r0]
   17cb8:	add	r0, r0, #1
   17cbc:	str	r0, [r8]
   17cc0:	sub	r1, fp, #32
   17cc4:	mov	r0, sl
   17cc8:	bl	12794 <coda_cursor_get_type_class@plt>
   17ccc:	cmp	r0, #0
   17cd0:	beq	17cd8 <print_yaml_data@@Base+0x218>
   17cd4:	bl	189c0 <handle_coda_error@@Base>
   17cd8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17cdc:	cmp	r0, #6
   17ce0:	bhi	185c8 <print_yaml_data@@Base+0xb08>
   17ce4:	add	r1, pc, #4
   17ce8:	ldr	r0, [r1, r0, lsl #2]
   17cec:	add	pc, r1, r0
   17cf0:	strheq	r0, [r0], -r4
   17cf4:	andeq	r0, r0, r0, lsl #4
   17cf8:	andeq	r0, r0, ip, lsl r0
   17cfc:	andeq	r0, r0, ip, lsl r0
   17d00:	andeq	r0, r0, ip, lsl r0
   17d04:	andeq	r0, r0, ip, lsl r0
   17d08:	andeq	r0, r0, r4, asr #4
   17d0c:	sub	r1, fp, #40	; 0x28
   17d10:	mov	r0, sl
   17d14:	bl	12830 <coda_cursor_get_read_type@plt>
   17d18:	cmp	r0, #0
   17d1c:	beq	17d24 <print_yaml_data@@Base+0x264>
   17d20:	bl	189c0 <handle_coda_error@@Base>
   17d24:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17d28:	add	r0, r0, #1
   17d2c:	cmp	r0, #13
   17d30:	bhi	185c8 <print_yaml_data@@Base+0xb08>
   17d34:	add	r1, pc, #4
   17d38:	ldr	r0, [r1, r0, lsl #2]
   17d3c:	add	pc, r1, r0
   17d40:	andeq	r0, r0, r0, lsr #7
   17d44:	andeq	r0, r0, r8, lsr r0
   17d48:	andeq	r0, r0, r0, asr #4
   17d4c:	andeq	r0, r0, r8, lsr r0
   17d50:	andeq	r0, r0, r0, asr #4
   17d54:	andeq	r0, r0, r8, lsr r0
   17d58:	andeq	r0, r0, r0, asr #4
   17d5c:	andeq	r0, r0, ip, lsr #7
   17d60:	ldrdeq	r0, [r0], -ip
   17d64:	andeq	r0, r0, ip, ror #4
   17d68:	andeq	r0, r0, ip, ror #4
   17d6c:			; <UNDEFINED> instruction: 0x000002b8
   17d70:	strdeq	r0, [r0], -r4
   17d74:	andeq	r0, r0, ip, lsl r4
   17d78:	add	r1, sp, #16
   17d7c:	mov	r0, sl
   17d80:	bl	12a4c <coda_cursor_read_int32@plt>
   17d84:	cmp	r0, #0
   17d88:	beq	17d90 <print_yaml_data@@Base+0x2d0>
   17d8c:	bl	189c0 <handle_coda_error@@Base>
   17d90:	ldr	r1, [sp, #16]
   17d94:	ldr	r0, [pc, #2388]	; 186f0 <print_yaml_data@@Base+0xc30>
   17d98:	add	r0, pc, r0
   17d9c:	bl	18730 <print_yaml_data@@Base+0xc70>
   17da0:	b	185c8 <print_yaml_data@@Base+0xb08>
   17da4:	add	r1, sp, #16
   17da8:	mov	r0, sl
   17dac:	bl	126ec <coda_cursor_get_num_elements@plt>
   17db0:	cmp	r0, #0
   17db4:	beq	17dbc <print_yaml_data@@Base+0x2fc>
   17db8:	bl	189c0 <handle_coda_error@@Base>
   17dbc:	ldr	r0, [sp, #16]
   17dc0:	cmp	r0, #1
   17dc4:	blt	17fec <print_yaml_data@@Base+0x52c>
   17dc8:	cmp	r5, #0
   17dcc:	beq	17ddc <print_yaml_data@@Base+0x31c>
   17dd0:	ldr	r0, [pc, #2204]	; 18674 <print_yaml_data@@Base+0xbb4>
   17dd4:	add	r0, pc, r0
   17dd8:	bl	18730 <print_yaml_data@@Base+0xc70>
   17ddc:	add	r1, sp, #8
   17de0:	mov	r0, sl
   17de4:	bl	1274c <coda_cursor_get_type@plt>
   17de8:	cmp	r0, #0
   17dec:	beq	17df4 <print_yaml_data@@Base+0x334>
   17df0:	bl	189c0 <handle_coda_error@@Base>
   17df4:	ldr	r0, [sp, #8]
   17df8:	sub	r1, fp, #40	; 0x28
   17dfc:	bl	12950 <coda_type_get_record_union_status@plt>
   17e00:	cmp	r0, #0
   17e04:	beq	17e0c <print_yaml_data@@Base+0x34c>
   17e08:	bl	189c0 <handle_coda_error@@Base>
   17e0c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17e10:	cmp	r0, #0
   17e14:	beq	18224 <print_yaml_data@@Base+0x764>
   17e18:	sub	r1, fp, #44	; 0x2c
   17e1c:	mov	r0, sl
   17e20:	bl	12a40 <coda_cursor_get_available_union_field_index@plt>
   17e24:	cmp	r0, #0
   17e28:	beq	17e30 <print_yaml_data@@Base+0x370>
   17e2c:	bl	189c0 <handle_coda_error@@Base>
   17e30:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17e34:	ldr	r0, [sp, #8]
   17e38:	sub	r2, fp, #48	; 0x30
   17e3c:	bl	12a88 <coda_type_get_record_field_name@plt>
   17e40:	cmp	r0, #0
   17e44:	beq	17e4c <print_yaml_data@@Base+0x38c>
   17e48:	bl	189c0 <handle_coda_error@@Base>
   17e4c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17e50:	mov	r0, sl
   17e54:	bl	1280c <coda_cursor_goto_record_field_by_index@plt>
   17e58:	cmp	r0, #0
   17e5c:	beq	17e64 <print_yaml_data@@Base+0x3a4>
   17e60:	bl	189c0 <handle_coda_error@@Base>
   17e64:	cmp	r5, #0
   17e68:	beq	17eb0 <print_yaml_data@@Base+0x3f0>
   17e6c:	ldr	r4, [pc, #2052]	; 18678 <print_yaml_data@@Base+0xbb8>
   17e70:	ldr	r4, [pc, r4]
   17e74:	cmp	r4, #0
   17e78:	bmi	18628 <print_yaml_data@@Base+0xb68>
   17e7c:	beq	17eb0 <print_yaml_data@@Base+0x3f0>
   17e80:	ldr	r6, [pc, #2036]	; 1867c <print_yaml_data@@Base+0xbbc>
   17e84:	ldr	r6, [pc, r6]
   17e88:	ldr	r5, [pc, #2032]	; 18680 <print_yaml_data@@Base+0xbc0>
   17e8c:	add	r5, pc, r5
   17e90:	ldr	r3, [r6]
   17e94:	mov	r0, r5
   17e98:	mov	r1, #2
   17e9c:	mov	r2, #1
   17ea0:	bl	127e8 <fwrite@plt>
   17ea4:	sub	r4, r4, #1
   17ea8:	cmp	r4, #0
   17eac:	bgt	17e90 <print_yaml_data@@Base+0x3d0>
   17eb0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   17eb4:	ldr	r0, [pc, #1992]	; 18684 <print_yaml_data@@Base+0xbc4>
   17eb8:	add	r0, pc, r0
   17ebc:	bl	18730 <print_yaml_data@@Base+0xc70>
   17ec0:	ldr	r0, [pc, #1984]	; 18688 <print_yaml_data@@Base+0xbc8>
   17ec4:	mov	r1, #1
   17ec8:	ldr	r0, [pc, r0]
   17ecc:	add	r0, r0, #1
   17ed0:	str	r0, [r8]
   17ed4:	mov	r0, sl
   17ed8:	bl	17ba0 <print_yaml_data@@Base+0xe0>
   17edc:	ldr	r0, [pc, #1960]	; 1868c <print_yaml_data@@Base+0xbcc>
   17ee0:	ldr	r0, [pc, r0]
   17ee4:	sub	r0, r0, #1
   17ee8:	str	r0, [r8]
   17eec:	b	185b0 <print_yaml_data@@Base+0xaf0>
   17ef0:	add	r4, sp, #16
   17ef4:	add	r1, sp, #8
   17ef8:	mov	r0, sl
   17efc:	mov	r2, r4
   17f00:	bl	12998 <coda_cursor_get_array_dim@plt>
   17f04:	cmp	r0, #0
   17f08:	beq	17f10 <print_yaml_data@@Base+0x450>
   17f0c:	bl	189c0 <handle_coda_error@@Base>
   17f10:	ldr	r0, [sp, #8]
   17f14:	cmp	r0, #0
   17f18:	bmi	185bc <print_yaml_data@@Base+0xafc>
   17f1c:	beq	1837c <print_yaml_data@@Base+0x8bc>
   17f20:	cmp	r0, #4
   17f24:	bcs	18440 <print_yaml_data@@Base+0x980>
   17f28:	mov	lr, #0
   17f2c:	mov	r6, #1
   17f30:	b	184f8 <print_yaml_data@@Base+0xa38>
   17f34:	sub	r1, fp, #40	; 0x28
   17f38:	mov	r0, sl
   17f3c:	bl	127d0 <coda_cursor_get_special_type@plt>
   17f40:	cmp	r0, #0
   17f44:	beq	17f4c <print_yaml_data@@Base+0x48c>
   17f48:	bl	189c0 <handle_coda_error@@Base>
   17f4c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17f50:	cmp	r0, #3
   17f54:	bhi	185c8 <print_yaml_data@@Base+0xb08>
   17f58:	add	r1, pc, #4
   17f5c:	ldr	r0, [r1, r0, lsl #2]
   17f60:	add	pc, r1, r0
   17f64:	andeq	r0, r0, r0, lsl r0
   17f68:	andeq	r0, r0, ip, lsr #9
   17f6c:	andeq	r0, r0, r4, lsr r4
   17f70:	andeq	r0, r0, r4, ror r4
   17f74:	ldr	r0, [pc, #1932]	; 18708 <print_yaml_data@@Base+0xc48>
   17f78:	add	r0, pc, r0
   17f7c:	b	185c4 <print_yaml_data@@Base+0xb04>
   17f80:	add	r1, sp, #16
   17f84:	mov	r0, sl
   17f88:	bl	12728 <coda_cursor_read_uint32@plt>
   17f8c:	cmp	r0, #0
   17f90:	beq	17f98 <print_yaml_data@@Base+0x4d8>
   17f94:	bl	189c0 <handle_coda_error@@Base>
   17f98:	ldr	r1, [sp, #16]
   17f9c:	ldr	r0, [pc, #1872]	; 186f4 <print_yaml_data@@Base+0xc34>
   17fa0:	add	r0, pc, r0
   17fa4:	bl	18730 <print_yaml_data@@Base+0xc70>
   17fa8:	b	185c8 <print_yaml_data@@Base+0xb08>
   17fac:	add	r1, sp, #16
   17fb0:	mov	r0, sl
   17fb4:	bl	128b4 <coda_cursor_read_double@plt>
   17fb8:	cmp	r0, #0
   17fbc:	beq	17fc4 <print_yaml_data@@Base+0x504>
   17fc0:	bl	189c0 <handle_coda_error@@Base>
   17fc4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   17fc8:	ldr	r2, [pc, #1836]	; 186fc <print_yaml_data@@Base+0xc3c>
   17fcc:	ldr	r0, [pc, #1836]	; 18700 <print_yaml_data@@Base+0xc40>
   17fd0:	vldr	d16, [sp, #16]
   17fd4:	add	r2, pc, r2
   17fd8:	cmp	r1, #8
   17fdc:	add	r0, pc, r0
   17fe0:	moveq	r0, r2
   17fe4:	vmov	r2, r3, d16
   17fe8:	b	18438 <print_yaml_data@@Base+0x978>
   17fec:	ldr	r0, [pc, #1724]	; 186b0 <print_yaml_data@@Base+0xbf0>
   17ff0:	add	r0, pc, r0
   17ff4:	b	185c4 <print_yaml_data@@Base+0xb04>
   17ff8:	add	r1, sp, #16
   17ffc:	mov	r0, sl
   18000:	bl	12914 <coda_cursor_read_char@plt>
   18004:	cmp	r0, #0
   18008:	beq	18010 <print_yaml_data@@Base+0x550>
   1800c:	bl	189c0 <handle_coda_error@@Base>
   18010:	ldr	r0, [pc, #1712]	; 186c8 <print_yaml_data@@Base+0xc08>
   18014:	add	r0, pc, r0
   18018:	bl	18730 <print_yaml_data@@Base+0xc70>
   1801c:	add	r0, sp, #16
   18020:	mov	r1, #1
   18024:	bl	18844 <print_yaml_data@@Base+0xd84>
   18028:	ldr	r0, [pc, #1692]	; 186cc <print_yaml_data@@Base+0xc0c>
   1802c:	add	r0, pc, r0
   18030:	b	185c4 <print_yaml_data@@Base+0xb04>
   18034:	add	r1, sp, #16
   18038:	mov	r0, sl
   1803c:	bl	1289c <coda_cursor_get_string_length@plt>
   18040:	cmp	r0, #0
   18044:	beq	1804c <print_yaml_data@@Base+0x58c>
   18048:	bl	189c0 <handle_coda_error@@Base>
   1804c:	ldr	r0, [sp, #16]
   18050:	add	r6, r0, #1
   18054:	mov	r0, r6
   18058:	bl	1283c <malloc@plt>
   1805c:	mov	r5, r0
   18060:	cmp	r0, #0
   18064:	bne	18098 <print_yaml_data@@Base+0x5d8>
   18068:	movw	r0, #361	; 0x169
   1806c:	mov	r2, r6
   18070:	str	r0, [sp]
   18074:	mvn	r0, #0
   18078:	ldr	r1, [pc, #1616]	; 186d0 <print_yaml_data@@Base+0xc10>
   1807c:	ldr	r3, [pc, #1616]	; 186d4 <print_yaml_data@@Base+0xc14>
   18080:	add	r1, pc, r1
   18084:	add	r3, pc, r3
   18088:	bl	126bc <coda_set_error@plt>
   1808c:	bl	189c0 <handle_coda_error@@Base>
   18090:	ldr	r0, [sp, #16]
   18094:	add	r6, r0, #1
   18098:	mov	r0, sl
   1809c:	mov	r1, r5
   180a0:	mov	r2, r6
   180a4:	bl	12860 <coda_cursor_read_string@plt>
   180a8:	cmp	r0, #0
   180ac:	beq	180b4 <print_yaml_data@@Base+0x5f4>
   180b0:	bl	189c0 <handle_coda_error@@Base>
   180b4:	ldr	r0, [pc, #1564]	; 186d8 <print_yaml_data@@Base+0xc18>
   180b8:	add	r0, pc, r0
   180bc:	bl	18730 <print_yaml_data@@Base+0xc70>
   180c0:	ldr	r1, [sp, #16]
   180c4:	mov	r0, r5
   180c8:	bl	18844 <print_yaml_data@@Base+0xd84>
   180cc:	ldr	r1, [sp, #16]
   180d0:	ldr	r0, [pc, #1540]	; 186dc <print_yaml_data@@Base+0xc1c>
   180d4:	add	r0, pc, r0
   180d8:	bl	18730 <print_yaml_data@@Base+0xc70>
   180dc:	b	18218 <print_yaml_data@@Base+0x758>
   180e0:	ldr	r0, [pc, #1564]	; 18704 <print_yaml_data@@Base+0xc44>
   180e4:	add	r0, pc, r0
   180e8:	b	185c4 <print_yaml_data@@Base+0xb04>
   180ec:	add	r1, sp, #8
   180f0:	mov	r0, sl
   180f4:	bl	129bc <coda_cursor_read_int64@plt>
   180f8:	cmp	r0, #0
   180fc:	beq	18104 <print_yaml_data@@Base+0x644>
   18100:	bl	189c0 <handle_coda_error@@Base>
   18104:	ldr	r0, [sp, #8]
   18108:	ldr	r1, [sp, #12]
   1810c:	add	r4, sp, #16
   18110:	mov	r2, r4
   18114:	bl	12ab8 <coda_str64@plt>
   18118:	b	18148 <print_yaml_data@@Base+0x688>
   1811c:	add	r1, sp, #8
   18120:	mov	r0, sl
   18124:	bl	128a8 <coda_cursor_read_uint64@plt>
   18128:	cmp	r0, #0
   1812c:	beq	18134 <print_yaml_data@@Base+0x674>
   18130:	bl	189c0 <handle_coda_error@@Base>
   18134:	ldr	r0, [sp, #8]
   18138:	ldr	r1, [sp, #12]
   1813c:	add	r4, sp, #16
   18140:	mov	r2, r4
   18144:	bl	126f8 <coda_str64u@plt>
   18148:	ldr	r0, [pc, #1448]	; 186f8 <print_yaml_data@@Base+0xc38>
   1814c:	mov	r1, r4
   18150:	add	r0, pc, r0
   18154:	bl	18730 <print_yaml_data@@Base+0xc70>
   18158:	b	185c8 <print_yaml_data@@Base+0xb08>
   1815c:	add	r1, sp, #16
   18160:	mov	r0, sl
   18164:	bl	12a1c <coda_cursor_get_bit_size@plt>
   18168:	cmp	r0, #0
   1816c:	beq	18174 <print_yaml_data@@Base+0x6b4>
   18170:	bl	189c0 <handle_coda_error@@Base>
   18174:	ldr	r4, [sp, #16]
   18178:	ldr	r7, [sp, #20]
   1817c:	lsr	r0, r4, #3
   18180:	tst	r4, #7
   18184:	orr	r6, r0, r7, lsl #29
   18188:	addne	r6, r6, #1
   1818c:	mov	r0, r6
   18190:	bl	1283c <malloc@plt>
   18194:	mov	r5, r0
   18198:	cmp	r0, #0
   1819c:	bne	181d0 <print_yaml_data@@Base+0x710>
   181a0:	mov	r0, #392	; 0x188
   181a4:	mov	r2, r6
   181a8:	str	r0, [sp]
   181ac:	mvn	r0, #0
   181b0:	ldr	r1, [pc, #1320]	; 186e0 <print_yaml_data@@Base+0xc20>
   181b4:	ldr	r3, [pc, #1320]	; 186e4 <print_yaml_data@@Base+0xc24>
   181b8:	add	r1, pc, r1
   181bc:	add	r3, pc, r3
   181c0:	bl	126bc <coda_set_error@plt>
   181c4:	bl	189c0 <handle_coda_error@@Base>
   181c8:	ldr	r4, [sp, #16]
   181cc:	ldr	r7, [sp, #20]
   181d0:	mov	r0, sl
   181d4:	mov	r1, r5
   181d8:	mov	r2, #0
   181dc:	mov	r3, #0
   181e0:	stm	sp, {r4, r7}
   181e4:	bl	12aac <coda_cursor_read_bits@plt>
   181e8:	cmp	r0, #0
   181ec:	beq	181f4 <print_yaml_data@@Base+0x734>
   181f0:	bl	189c0 <handle_coda_error@@Base>
   181f4:	ldr	r0, [pc, #1260]	; 186e8 <print_yaml_data@@Base+0xc28>
   181f8:	add	r0, pc, r0
   181fc:	bl	18730 <print_yaml_data@@Base+0xc70>
   18200:	mov	r0, r5
   18204:	mov	r1, r6
   18208:	bl	18844 <print_yaml_data@@Base+0xd84>
   1820c:	ldr	r0, [pc, #1240]	; 186ec <print_yaml_data@@Base+0xc2c>
   18210:	add	r0, pc, r0
   18214:	bl	18730 <print_yaml_data@@Base+0xc70>
   18218:	mov	r0, r5
   1821c:	bl	12704 <free@plt>
   18220:	b	185c8 <print_yaml_data@@Base+0xb08>
   18224:	mov	r0, sl
   18228:	bl	12800 <coda_cursor_goto_first_record_field@plt>
   1822c:	cmp	r0, #0
   18230:	beq	18238 <print_yaml_data@@Base+0x778>
   18234:	bl	189c0 <handle_coda_error@@Base>
   18238:	ldr	r0, [sp, #16]
   1823c:	mov	r1, #0
   18240:	str	r1, [fp, #-44]	; 0xffffffd4
   18244:	cmp	r0, #1
   18248:	blt	18384 <print_yaml_data@@Base+0x8c4>
   1824c:	ldr	r8, [pc, #1084]	; 18690 <print_yaml_data@@Base+0xbd0>
   18250:	mov	r9, #1
   18254:	add	r6, sp, #52	; 0x34
   18258:	ldr	r8, [pc, r8]
   1825c:	ldr	r7, [pc, #1072]	; 18694 <print_yaml_data@@Base+0xbd4>
   18260:	add	r7, pc, r7
   18264:	b	18280 <print_yaml_data@@Base+0x7c0>
   18268:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1826c:	add	r1, r0, #1
   18270:	ldr	r0, [sp, #16]
   18274:	str	r1, [fp, #-44]	; 0xffffffd4
   18278:	cmp	r1, r0
   1827c:	bge	18384 <print_yaml_data@@Base+0x8c4>
   18280:	ldr	r0, [sp, #8]
   18284:	mov	r2, r6
   18288:	bl	1268c <coda_type_get_record_field_hidden_status@plt>
   1828c:	cmp	r0, #0
   18290:	beq	18298 <print_yaml_data@@Base+0x7d8>
   18294:	bl	189c0 <handle_coda_error@@Base>
   18298:	ldr	r0, [sp, #52]	; 0x34
   1829c:	cmp	r0, #0
   182a0:	bne	18350 <print_yaml_data@@Base+0x890>
   182a4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   182a8:	ldr	r0, [sp, #8]
   182ac:	sub	r2, fp, #48	; 0x30
   182b0:	bl	12a88 <coda_type_get_record_field_name@plt>
   182b4:	cmp	r0, #0
   182b8:	beq	182c0 <print_yaml_data@@Base+0x800>
   182bc:	bl	189c0 <handle_coda_error@@Base>
   182c0:	cmp	r5, #0
   182c4:	bne	182d0 <print_yaml_data@@Base+0x810>
   182c8:	cmp	r9, #0
   182cc:	bne	18304 <print_yaml_data@@Base+0x844>
   182d0:	ldr	r4, [pc, #960]	; 18698 <print_yaml_data@@Base+0xbd8>
   182d4:	ldr	r4, [pc, r4]
   182d8:	cmp	r4, #0
   182dc:	bmi	18628 <print_yaml_data@@Base+0xb68>
   182e0:	beq	18304 <print_yaml_data@@Base+0x844>
   182e4:	ldr	r3, [r8]
   182e8:	mov	r0, r7
   182ec:	mov	r1, #2
   182f0:	mov	r2, #1
   182f4:	bl	127e8 <fwrite@plt>
   182f8:	sub	r4, r4, #1
   182fc:	cmp	r4, #0
   18300:	bgt	182e4 <print_yaml_data@@Base+0x824>
   18304:	ldr	r1, [fp, #-48]	; 0xffffffd0
   18308:	ldr	r0, [pc, #908]	; 1869c <print_yaml_data@@Base+0xbdc>
   1830c:	add	r0, pc, r0
   18310:	bl	18730 <print_yaml_data@@Base+0xc70>
   18314:	ldr	r0, [pc, #900]	; 186a0 <print_yaml_data@@Base+0xbe0>
   18318:	ldr	r0, [pc, r0]
   1831c:	ldr	r1, [pc, #896]	; 186a4 <print_yaml_data@@Base+0xbe4>
   18320:	add	r1, pc, r1
   18324:	add	r0, r0, #1
   18328:	str	r0, [r1]
   1832c:	mov	r4, r1
   18330:	mov	r0, sl
   18334:	mov	r1, #1
   18338:	bl	17ba0 <print_yaml_data@@Base+0xe0>
   1833c:	ldr	r0, [pc, #868]	; 186a8 <print_yaml_data@@Base+0xbe8>
   18340:	mov	r9, #0
   18344:	ldr	r0, [pc, r0]
   18348:	sub	r0, r0, #1
   1834c:	str	r0, [r4]
   18350:	ldr	r0, [sp, #16]
   18354:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18358:	sub	r0, r0, #1
   1835c:	cmp	r1, r0
   18360:	bge	18268 <print_yaml_data@@Base+0x7a8>
   18364:	mov	r0, sl
   18368:	bl	129f8 <coda_cursor_goto_next_record_field@plt>
   1836c:	cmp	r0, #0
   18370:	beq	18268 <print_yaml_data@@Base+0x7a8>
   18374:	bl	189c0 <handle_coda_error@@Base>
   18378:	b	18268 <print_yaml_data@@Base+0x7a8>
   1837c:	mov	r6, #1
   18380:	b	1851c <print_yaml_data@@Base+0xa5c>
   18384:	mov	r0, sl
   18388:	bl	1286c <coda_cursor_goto_parent@plt>
   1838c:	ldr	r8, [pc, #792]	; 186ac <print_yaml_data@@Base+0xbec>
   18390:	add	r8, pc, r8
   18394:	b	185c8 <print_yaml_data@@Base+0xb08>
   18398:	add	r1, sp, #8
   1839c:	mov	r0, sl
   183a0:	bl	128b4 <coda_cursor_read_double@plt>
   183a4:	cmp	r0, #0
   183a8:	beq	183b0 <print_yaml_data@@Base+0x8f0>
   183ac:	bl	189c0 <handle_coda_error@@Base>
   183b0:	vldr	d0, [sp, #8]
   183b4:	bl	128c0 <coda_isNaN@plt>
   183b8:	cmp	r0, #0
   183bc:	bne	183d0 <print_yaml_data@@Base+0x910>
   183c0:	vldr	d0, [sp, #8]
   183c4:	bl	12764 <coda_isInf@plt>
   183c8:	cmp	r0, #0
   183cc:	beq	185ec <print_yaml_data@@Base+0xb2c>
   183d0:	vldr	d16, [sp, #8]
   183d4:	b	1842c <print_yaml_data@@Base+0x96c>
   183d8:	add	r1, sp, #16
   183dc:	add	r2, sp, #8
   183e0:	mov	r0, sl
   183e4:	bl	1295c <coda_cursor_read_complex_double_split@plt>
   183e8:	cmp	r0, #0
   183ec:	beq	183f4 <print_yaml_data@@Base+0x934>
   183f0:	bl	189c0 <handle_coda_error@@Base>
   183f4:	vldr	d17, [sp, #8]
   183f8:	vldr	d16, [sp, #16]
   183fc:	vstr	d17, [sp]
   18400:	vmov	r2, r3, d16
   18404:	ldr	r0, [pc, #784]	; 1871c <print_yaml_data@@Base+0xc5c>
   18408:	add	r0, pc, r0
   1840c:	b	18438 <print_yaml_data@@Base+0x978>
   18410:	add	r1, sp, #16
   18414:	mov	r0, sl
   18418:	bl	128b4 <coda_cursor_read_double@plt>
   1841c:	cmp	r0, #0
   18420:	beq	18428 <print_yaml_data@@Base+0x968>
   18424:	bl	189c0 <handle_coda_error@@Base>
   18428:	vldr	d16, [sp, #16]
   1842c:	ldr	r0, [pc, #728]	; 1870c <print_yaml_data@@Base+0xc4c>
   18430:	vmov	r2, r3, d16
   18434:	add	r0, pc, r0
   18438:	bl	18730 <print_yaml_data@@Base+0xc70>
   1843c:	b	185c8 <print_yaml_data@@Base+0xb08>
   18440:	bic	lr, r0, #3
   18444:	mov	r2, #1
   18448:	vmov.i32	q8, #1	; 0x00000001
   1844c:	sub	r7, lr, #4
   18450:	add	r3, r2, r7, lsr #2
   18454:	cmp	r7, #12
   18458:	and	ip, r3, #3
   1845c:	bcs	18470 <print_yaml_data@@Base+0x9b0>
   18460:	mov	r3, #0
   18464:	cmp	ip, #0
   18468:	bne	184c4 <print_yaml_data@@Base+0xa04>
   1846c:	b	184e0 <print_yaml_data@@Base+0xa20>
   18470:	sub	r7, r3, ip
   18474:	mov	r3, #0
   18478:	mov	r6, #64	; 0x40
   1847c:	mov	r5, r4
   18480:	vld1.32	{d18-d19}, [r5], r6
   18484:	add	r1, r4, #16
   18488:	add	r2, r4, #32
   1848c:	subs	r7, r7, #4
   18490:	add	r3, r3, #16
   18494:	vld1.32	{d20-d21}, [r1]
   18498:	add	r1, r4, #48	; 0x30
   1849c:	mov	r4, r5
   184a0:	vmul.i32	q8, q9, q8
   184a4:	vld1.32	{d18-d19}, [r2]
   184a8:	vmul.i32	q8, q10, q8
   184ac:	vld1.32	{d20-d21}, [r1]
   184b0:	vmul.i32	q8, q9, q8
   184b4:	vmul.i32	q8, q10, q8
   184b8:	bne	18480 <print_yaml_data@@Base+0x9c0>
   184bc:	cmp	ip, #0
   184c0:	beq	184e0 <print_yaml_data@@Base+0xa20>
   184c4:	add	r1, sp, #16
   184c8:	rsb	r2, ip, #0
   184cc:	add	r3, r1, r3, lsl #2
   184d0:	vld1.32	{d18-d19}, [r3]!
   184d4:	adds	r2, r2, #1
   184d8:	vmul.i32	q8, q9, q8
   184dc:	bcc	184d0 <print_yaml_data@@Base+0xa10>
   184e0:	vext.8	q9, q8, q8, #8
   184e4:	cmp	r0, lr
   184e8:	vmul.i32	q0, q8, q9
   184ec:	vmul.i32	q8, q0, d0[1]
   184f0:	vmov.32	r6, d16[0]
   184f4:	beq	18514 <print_yaml_data@@Base+0xa54>
   184f8:	add	r1, sp, #16
   184fc:	sub	r0, r0, lr
   18500:	add	r2, r1, lr, lsl #2
   18504:	ldr	r1, [r2], #4
   18508:	subs	r0, r0, #1
   1850c:	mul	r6, r1, r6
   18510:	bne	18504 <print_yaml_data@@Base+0xa44>
   18514:	cmp	r6, #1
   18518:	blt	185bc <print_yaml_data@@Base+0xafc>
   1851c:	ldr	r0, [pc, #400]	; 186b4 <print_yaml_data@@Base+0xbf4>
   18520:	add	r0, pc, r0
   18524:	bl	18730 <print_yaml_data@@Base+0xc70>
   18528:	mov	r0, sl
   1852c:	bl	127dc <coda_cursor_goto_first_array_element@plt>
   18530:	cmp	r0, #0
   18534:	beq	1853c <print_yaml_data@@Base+0xa7c>
   18538:	bl	189c0 <handle_coda_error@@Base>
   1853c:	ldr	r5, [pc, #372]	; 186b8 <print_yaml_data@@Base+0xbf8>
   18540:	sub	r7, r6, #1
   18544:	mov	r4, #0
   18548:	add	r5, pc, r5
   1854c:	b	1855c <print_yaml_data@@Base+0xa9c>
   18550:	add	r4, r4, #1
   18554:	cmp	r6, r4
   18558:	beq	185b0 <print_yaml_data@@Base+0xaf0>
   1855c:	mov	r0, r5
   18560:	bl	1877c <print_yaml_data@@Base+0xcbc>
   18564:	ldr	r0, [pc, #336]	; 186bc <print_yaml_data@@Base+0xbfc>
   18568:	mov	r1, #0
   1856c:	ldr	r0, [pc, r0]
   18570:	add	r0, r0, #1
   18574:	str	r0, [r8]
   18578:	mov	r0, sl
   1857c:	bl	17ba0 <print_yaml_data@@Base+0xe0>
   18580:	ldr	r0, [pc, #312]	; 186c0 <print_yaml_data@@Base+0xc00>
   18584:	cmp	r4, r7
   18588:	ldr	r0, [pc, r0]
   1858c:	sub	r0, r0, #1
   18590:	str	r0, [r8]
   18594:	bge	18550 <print_yaml_data@@Base+0xa90>
   18598:	mov	r0, sl
   1859c:	bl	128d8 <coda_cursor_goto_next_array_element@plt>
   185a0:	cmp	r0, #0
   185a4:	beq	18550 <print_yaml_data@@Base+0xa90>
   185a8:	bl	189c0 <handle_coda_error@@Base>
   185ac:	b	18550 <print_yaml_data@@Base+0xa90>
   185b0:	mov	r0, sl
   185b4:	bl	1286c <coda_cursor_goto_parent@plt>
   185b8:	b	185c8 <print_yaml_data@@Base+0xb08>
   185bc:	ldr	r0, [pc, #256]	; 186c4 <print_yaml_data@@Base+0xc04>
   185c0:	add	r0, pc, r0
   185c4:	bl	18730 <print_yaml_data@@Base+0xc70>
   185c8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   185cc:	cmp	r0, #0
   185d0:	beq	185e4 <print_yaml_data@@Base+0xb24>
   185d4:	ldr	r0, [pc, #324]	; 18720 <print_yaml_data@@Base+0xc60>
   185d8:	ldr	r0, [pc, r0]
   185dc:	sub	r0, r0, #1
   185e0:	str	r0, [r8]
   185e4:	sub	sp, fp, #28
   185e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185ec:	vldr	d0, [sp, #8]
   185f0:	ldr	r0, [pc, #280]	; 18710 <print_yaml_data@@Base+0xc50>
   185f4:	add	r1, sp, #16
   185f8:	add	r0, pc, r0
   185fc:	bl	126e0 <coda_time_double_to_string@plt>
   18600:	cmp	r0, #0
   18604:	beq	18614 <print_yaml_data@@Base+0xb54>
   18608:	ldr	r0, [pc, #260]	; 18714 <print_yaml_data@@Base+0xc54>
   1860c:	add	r0, pc, r0
   18610:	b	185c4 <print_yaml_data@@Base+0xb04>
   18614:	ldr	r0, [pc, #252]	; 18718 <print_yaml_data@@Base+0xc58>
   18618:	add	r1, sp, #16
   1861c:	add	r0, pc, r0
   18620:	bl	18730 <print_yaml_data@@Base+0xc70>
   18624:	b	185c8 <print_yaml_data@@Base+0xb08>
   18628:	ldr	r0, [pc, #244]	; 18724 <print_yaml_data@@Base+0xc64>
   1862c:	ldr	r1, [pc, #244]	; 18728 <print_yaml_data@@Base+0xc68>
   18630:	ldr	r3, [pc, #244]	; 1872c <print_yaml_data@@Base+0xc6c>
   18634:	mov	r2, #44	; 0x2c
   18638:	add	r0, pc, r0
   1863c:	add	r1, pc, r1
   18640:	add	r3, pc, r3
   18644:	bl	12ac4 <__assert_fail@plt>
   18648:	andeq	r5, r1, r8, asr #12
   1864c:	andeq	r5, r1, r0, asr #12
   18650:	andeq	r3, r0, r4, ror #12
   18654:	strdeq	r5, [r1], -ip
   18658:	muleq	r1, r0, r5
   1865c:	andeq	r2, r0, r9, lsl #29
   18660:	andeq	r3, r0, r7, lsl #9
   18664:	muleq	r1, r4, r5
   18668:	andeq	r5, r1, ip, ror r5
   1866c:	andeq	r3, r0, sl, lsr r4
   18670:	andeq	r5, r1, r8, asr r5
   18674:	muleq	r0, r4, r4
   18678:	muleq	r1, ip, r3
   1867c:	andeq	r5, r1, r0, lsr r3
   18680:	andeq	r2, r0, r9, lsr #24
   18684:	andeq	r3, r0, r1, lsr r2
   18688:	andeq	r5, r1, r4, asr #6
   1868c:	andeq	r5, r1, ip, lsr #6
   18690:	andeq	r4, r1, ip, asr pc
   18694:	andeq	r2, r0, r5, asr r8
   18698:	andeq	r4, r1, r8, lsr pc
   1869c:	ldrdeq	r2, [r0], -sp
   186a0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   186a4:	andeq	r4, r1, ip, ror #29
   186a8:	andeq	r4, r1, r8, asr #29
   186ac:	andeq	r4, r1, ip, ror lr
   186b0:	strdeq	r3, [r0], -lr
   186b4:	andeq	r2, r0, r8, asr #26
   186b8:	andeq	r2, r0, sl, lsr #23
   186bc:	andeq	r4, r1, r0, lsr #25
   186c0:	andeq	r4, r1, r4, lsl #25
   186c4:	andeq	r2, r0, r5, lsr fp
   186c8:	andeq	r2, r0, ip, lsr #31
   186cc:	andeq	r3, r0, fp, lsr r2
   186d0:	ldrdeq	r2, [r0], -r9
   186d4:	andeq	r3, r0, r5, ror r0
   186d8:	andeq	r2, r0, r8, lsl #30
   186dc:	muleq	r0, r3, r1
   186e0:	andeq	r2, r0, r1, lsr #13
   186e4:	andeq	r2, r0, sp, lsr pc
   186e8:	andeq	r2, r0, r8, asr #27
   186ec:	andeq	r3, r0, r7, asr r0
   186f0:	andeq	r2, r0, r6, lsl #25
   186f4:	andeq	r2, r0, r3, lsl #21
   186f8:	andeq	r3, r0, r7, lsl r0
   186fc:	andeq	r2, r0, r4, asr sl
   18700:	andeq	r2, r0, lr, lsl #21
   18704:	andeq	r3, r0, r6, ror r0
   18708:	andeq	r3, r0, r2, ror #3
   1870c:	andeq	r2, r0, r6, lsr r6
   18710:	andeq	r2, r0, r4, lsl #19
   18714:	andeq	r2, r0, sp, lsl #19
   18718:	andeq	r2, r0, fp, asr #22
   1871c:	andeq	r2, r0, r5, lsl #13
   18720:	andeq	r4, r1, r4, lsr ip
   18724:	andeq	r2, r0, pc, asr r4
   18728:			; <UNDEFINED> instruction: 0x00002abd
   1872c:	andeq	r2, r0, r3, ror #8
   18730:	sub	sp, sp, #12
   18734:	push	{fp, lr}
   18738:	mov	fp, sp
   1873c:	sub	sp, sp, #4
   18740:	mov	ip, r0
   18744:	add	r0, fp, #8
   18748:	stm	r0, {r1, r2, r3}
   1874c:	add	r2, fp, #8
   18750:	mov	r1, ip
   18754:	str	r2, [sp]
   18758:	ldr	r0, [pc, #24]	; 18778 <print_yaml_data@@Base+0xcb8>
   1875c:	ldr	r0, [pc, r0]
   18760:	ldr	r0, [r0]
   18764:	bl	129c8 <vfprintf@plt>
   18768:	mov	sp, fp
   1876c:	pop	{fp, lr}
   18770:	add	sp, sp, #12
   18774:	bx	lr
   18778:	andeq	r4, r1, r8, asr sl
   1877c:	sub	sp, sp, #12
   18780:	push	{r4, r5, r6, r7, fp, lr}
   18784:	add	fp, sp, #16
   18788:	sub	sp, sp, #4
   1878c:	add	ip, fp, #8
   18790:	stm	ip, {r1, r2, r3}
   18794:	ldr	r6, [pc, #140]	; 18828 <print_yaml_data@@Base+0xd68>
   18798:	ldr	r6, [pc, r6]
   1879c:	cmp	r6, #0
   187a0:	bmi	18808 <print_yaml_data@@Base+0xd48>
   187a4:	mov	r4, r0
   187a8:	beq	187dc <print_yaml_data@@Base+0xd1c>
   187ac:	ldr	r7, [pc, #120]	; 1882c <print_yaml_data@@Base+0xd6c>
   187b0:	ldr	r7, [pc, r7]
   187b4:	ldr	r5, [pc, #116]	; 18830 <print_yaml_data@@Base+0xd70>
   187b8:	add	r5, pc, r5
   187bc:	ldr	r3, [r7]
   187c0:	mov	r0, r5
   187c4:	mov	r1, #2
   187c8:	mov	r2, #1
   187cc:	bl	127e8 <fwrite@plt>
   187d0:	sub	r6, r6, #1
   187d4:	cmp	r6, #0
   187d8:	bgt	187bc <print_yaml_data@@Base+0xcfc>
   187dc:	add	r2, fp, #8
   187e0:	mov	r1, r4
   187e4:	str	r2, [sp]
   187e8:	ldr	r0, [pc, #68]	; 18834 <print_yaml_data@@Base+0xd74>
   187ec:	ldr	r0, [pc, r0]
   187f0:	ldr	r0, [r0]
   187f4:	bl	129c8 <vfprintf@plt>
   187f8:	sub	sp, fp, #16
   187fc:	pop	{r4, r5, r6, r7, fp, lr}
   18800:	add	sp, sp, #12
   18804:	bx	lr
   18808:	ldr	r0, [pc, #40]	; 18838 <print_yaml_data@@Base+0xd78>
   1880c:	ldr	r1, [pc, #40]	; 1883c <print_yaml_data@@Base+0xd7c>
   18810:	ldr	r3, [pc, #40]	; 18840 <print_yaml_data@@Base+0xd80>
   18814:	mov	r2, #44	; 0x2c
   18818:	add	r0, pc, r0
   1881c:	add	r1, pc, r1
   18820:	add	r3, pc, r3
   18824:	bl	12ac4 <__assert_fail@plt>
   18828:	andeq	r4, r1, r4, ror sl
   1882c:	andeq	r4, r1, r4, lsl #20
   18830:	strdeq	r2, [r0], -sp
   18834:	andeq	r4, r1, r8, asr #19
   18838:	andeq	r2, r0, pc, ror r2
   1883c:	ldrdeq	r2, [r0], -sp
   18840:	andeq	r2, r0, r3, lsl #5
   18844:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18848:	add	fp, sp, #28
   1884c:	sub	sp, sp, #4
   18850:	cmp	r1, #1
   18854:	blt	18994 <print_yaml_data@@Base+0xed4>
   18858:	ldr	r6, [pc, #316]	; 1899c <print_yaml_data@@Base+0xedc>
   1885c:	ldr	r8, [pc, #316]	; 189a0 <print_yaml_data@@Base+0xee0>
   18860:	ldr	r9, [pc, #316]	; 189a4 <print_yaml_data@@Base+0xee4>
   18864:	ldr	sl, [pc, #316]	; 189a8 <print_yaml_data@@Base+0xee8>
   18868:	ldr	r7, [pc, #316]	; 189ac <print_yaml_data@@Base+0xeec>
   1886c:	mov	r4, r1
   18870:	mov	r5, r0
   18874:	add	r6, pc, r6
   18878:	add	r8, pc, r8
   1887c:	add	r9, pc, r9
   18880:	add	sl, pc, sl
   18884:	add	r7, pc, r7
   18888:	b	188a0 <print_yaml_data@@Base+0xde0>
   1888c:	mov	r0, r7
   18890:	bl	18730 <print_yaml_data@@Base+0xc70>
   18894:	add	r5, r5, #1
   18898:	subs	r4, r4, #1
   1889c:	beq	18994 <print_yaml_data@@Base+0xed4>
   188a0:	ldrb	r1, [r5]
   188a4:	sub	r0, r1, #8
   188a8:	cmp	r0, #26
   188ac:	bhi	18934 <print_yaml_data@@Base+0xe74>
   188b0:	add	r2, pc, #4
   188b4:	ldr	r0, [r2, r0, lsl #2]
   188b8:	add	pc, r2, r0
   188bc:	andeq	r0, r0, ip, rrx
   188c0:	andeq	r0, r0, r8, lsr #1
   188c4:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   188c8:	andeq	r0, r0, ip, lsl #1
   188cc:	strheq	r0, [r0], -r8
   188d0:	andeq	r0, r0, r0, asr #1
   188d4:	andeq	r0, r0, ip, lsl #1
   188d8:	andeq	r0, r0, ip, lsl #1
   188dc:	andeq	r0, r0, ip, lsl #1
   188e0:	andeq	r0, r0, ip, lsl #1
   188e4:	andeq	r0, r0, ip, lsl #1
   188e8:	andeq	r0, r0, ip, lsl #1
   188ec:	andeq	r0, r0, ip, lsl #1
   188f0:	andeq	r0, r0, ip, lsl #1
   188f4:	andeq	r0, r0, ip, lsl #1
   188f8:	andeq	r0, r0, ip, lsl #1
   188fc:	andeq	r0, r0, ip, lsl #1
   18900:	andeq	r0, r0, ip, lsl #1
   18904:	andeq	r0, r0, ip, lsl #1
   18908:	andeq	r0, r0, ip, lsl #1
   1890c:	andeq	r0, r0, ip, lsl #1
   18910:	andeq	r0, r0, ip, lsl #1
   18914:	andeq	r0, r0, ip, lsl #1
   18918:	andeq	r0, r0, ip, lsl #1
   1891c:	andeq	r0, r0, ip, lsl #1
   18920:	andeq	r0, r0, ip, lsl #1
   18924:			; <UNDEFINED> instruction: 0xffffffd0
   18928:	ldr	r0, [pc, #132]	; 189b4 <print_yaml_data@@Base+0xef4>
   1892c:	add	r0, pc, r0
   18930:	b	18890 <print_yaml_data@@Base+0xdd0>
   18934:	cmp	r1, #92	; 0x5c
   18938:	bne	18948 <print_yaml_data@@Base+0xe88>
   1893c:	ldr	r0, [pc, #108]	; 189b0 <print_yaml_data@@Base+0xef0>
   18940:	add	r0, pc, r0
   18944:	b	18890 <print_yaml_data@@Base+0xdd0>
   18948:	sub	r0, r1, #32
   1894c:	uxtb	r0, r0
   18950:	cmp	r0, #94	; 0x5e
   18954:	bhi	18984 <print_yaml_data@@Base+0xec4>
   18958:	ldr	r0, [pc, #88]	; 189b8 <print_yaml_data@@Base+0xef8>
   1895c:	add	r0, pc, r0
   18960:	b	1898c <print_yaml_data@@Base+0xecc>
   18964:	mov	r0, r6
   18968:	b	18890 <print_yaml_data@@Base+0xdd0>
   1896c:	mov	r0, r8
   18970:	b	18890 <print_yaml_data@@Base+0xdd0>
   18974:	mov	r0, r9
   18978:	b	18890 <print_yaml_data@@Base+0xdd0>
   1897c:	mov	r0, sl
   18980:	b	18890 <print_yaml_data@@Base+0xdd0>
   18984:	ldr	r0, [pc, #48]	; 189bc <print_yaml_data@@Base+0xefc>
   18988:	add	r0, pc, r0
   1898c:	bl	18730 <print_yaml_data@@Base+0xc70>
   18990:	b	18894 <print_yaml_data@@Base+0xdd4>
   18994:	sub	sp, fp, #28
   18998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1899c:	andeq	r2, r0, r2, lsl #1
   189a0:	andeq	r2, r0, r1, lsl #1
   189a4:	andeq	r2, r0, r3, lsl #1
   189a8:	andeq	r2, r0, r2, lsl #1
   189ac:	andeq	r2, r0, fp, lsr r7
   189b0:	andeq	r1, r0, r5, asr #31
   189b4:	andeq	r1, r0, r7, asr #31
   189b8:	andeq	r2, r0, ip, asr r1
   189bc:	andeq	r2, r0, sl, lsr r6

000189c0 <handle_coda_error@@Base>:
   189c0:	push	{fp, lr}
   189c4:	mov	fp, sp
   189c8:	ldr	r5, [pc, #52]	; 18a04 <handle_coda_error@@Base+0x44>
   189cc:	ldr	r5, [pc, r5]
   189d0:	ldr	r4, [r5]
   189d4:	bl	12a70 <coda_get_errno@plt>
   189d8:	ldr	r0, [r0]
   189dc:	bl	12a28 <coda_errno_to_string@plt>
   189e0:	ldr	r1, [pc, #32]	; 18a08 <handle_coda_error@@Base+0x48>
   189e4:	mov	r2, r0
   189e8:	mov	r0, r4
   189ec:	add	r1, pc, r1
   189f0:	bl	128cc <fprintf@plt>
   189f4:	ldr	r0, [r5]
   189f8:	bl	126d4 <fflush@plt>
   189fc:	mov	r0, #1
   18a00:	bl	12884 <exit@plt>
   18a04:	andeq	r4, r1, r4, ror #15
   18a08:	andeq	r2, r0, r4, ror r7

00018a0c <main@@Base>:
   18a0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a10:	add	fp, sp, #28
   18a14:	sub	sp, sp, #20
   18a18:	cmp	r0, #1
   18a1c:	beq	19bfc <main@@Base+0x11f0>
   18a20:	mov	r9, r1
   18a24:	ldr	r6, [r1, #4]
   18a28:	ldr	r1, [pc, #3892]	; 19964 <main@@Base+0xf58>
   18a2c:	mov	sl, r0
   18a30:	add	r1, pc, r1
   18a34:	mov	r0, r6
   18a38:	bl	12674 <strcmp@plt>
   18a3c:	cmp	r0, #0
   18a40:	beq	19bfc <main@@Base+0x11f0>
   18a44:	ldr	r1, [pc, #3868]	; 19968 <main@@Base+0xf5c>
   18a48:	mov	r0, r6
   18a4c:	add	r1, pc, r1
   18a50:	bl	12674 <strcmp@plt>
   18a54:	cmp	r0, #0
   18a58:	beq	19bfc <main@@Base+0x11f0>
   18a5c:	ldr	r1, [pc, #3848]	; 1996c <main@@Base+0xf60>
   18a60:	mov	r0, r6
   18a64:	add	r1, pc, r1
   18a68:	bl	12674 <strcmp@plt>
   18a6c:	cmp	r0, #0
   18a70:	beq	19c08 <main@@Base+0x11fc>
   18a74:	ldr	r1, [pc, #3828]	; 19970 <main@@Base+0xf64>
   18a78:	mov	r0, r6
   18a7c:	add	r1, pc, r1
   18a80:	bl	12674 <strcmp@plt>
   18a84:	cmp	r0, #0
   18a88:	beq	19c08 <main@@Base+0x11fc>
   18a8c:	cmp	sl, #3
   18a90:	blt	18aac <main@@Base+0xa0>
   18a94:	ldr	r1, [pc, #3800]	; 19974 <main@@Base+0xf68>
   18a98:	mov	r0, r6
   18a9c:	add	r1, pc, r1
   18aa0:	bl	12674 <strcmp@plt>
   18aa4:	cmp	r0, #0
   18aa8:	beq	19584 <main@@Base+0xb78>
   18aac:	ldr	r0, [r9]
   18ab0:	ldr	r2, [pc, #3776]	; 19978 <main@@Base+0xf6c>
   18ab4:	mov	r1, #0
   18ab8:	add	r2, pc, r2
   18abc:	bl	1271c <coda_set_definition_path_conditional@plt>
   18ac0:	mov	r7, #1
   18ac4:	cmp	r0, #0
   18ac8:	bne	19c1c <main@@Base+0x1210>
   18acc:	ldr	r6, [r9, r7, lsl #2]
   18ad0:	ldr	r1, [pc, #4084]	; 19acc <main@@Base+0x10c0>
   18ad4:	add	r1, pc, r1
   18ad8:	mov	r0, r6
   18adc:	bl	12674 <strcmp@plt>
   18ae0:	cmp	r0, #0
   18ae4:	beq	18dfc <main@@Base+0x3f0>
   18ae8:	ldr	r1, [pc, #4088]	; 19ae8 <main@@Base+0x10dc>
   18aec:	mov	r0, r6
   18af0:	add	r1, pc, r1
   18af4:	bl	12674 <strcmp@plt>
   18af8:	cmp	r0, #0
   18afc:	beq	19148 <main@@Base+0x73c>
   18b00:	ldr	r1, [pc, #4084]	; 19afc <main@@Base+0x10f0>
   18b04:	mov	r0, r6
   18b08:	add	r1, pc, r1
   18b0c:	bl	12674 <strcmp@plt>
   18b10:	cmp	r0, #0
   18b14:	beq	19624 <main@@Base+0xc18>
   18b18:	ldr	r1, [pc, #4080]	; 19b10 <main@@Base+0x1104>
   18b1c:	mov	r0, r6
   18b20:	add	r1, pc, r1
   18b24:	bl	12674 <strcmp@plt>
   18b28:	cmp	r0, #0
   18b2c:	beq	198c4 <main@@Base+0xeb8>
   18b30:	ldr	r1, [pc, #4060]	; 19b14 <main@@Base+0x1108>
   18b34:	mov	r0, r6
   18b38:	add	r1, pc, r1
   18b3c:	bl	12674 <strcmp@plt>
   18b40:	cmp	r0, #0
   18b44:	bne	19b30 <main@@Base+0x1124>
   18b48:	ldr	r0, [pc, #4040]	; 19b18 <main@@Base+0x110c>
   18b4c:	mov	r6, #0
   18b50:	mov	r1, #5
   18b54:	ldr	r0, [pc, r0]
   18b58:	str	r6, [r0]
   18b5c:	ldr	r0, [pc, #4088]	; 19b5c <main@@Base+0x1150>
   18b60:	ldr	r0, [pc, r0]
   18b64:	str	r1, [r0]
   18b68:	ldr	r0, [pc, #4080]	; 19b60 <main@@Base+0x1154>
   18b6c:	ldr	r0, [pc, r0]
   18b70:	str	r6, [r0]
   18b74:	ldr	r0, [pc, #4072]	; 19b64 <main@@Base+0x1158>
   18b78:	ldr	r0, [pc, r0]
   18b7c:	str	r6, [r0]
   18b80:	ldr	r0, [pc, #4064]	; 19b68 <main@@Base+0x115c>
   18b84:	ldr	r0, [pc, r0]
   18b88:	ldr	r0, [r0]
   18b8c:	ldr	r1, [pc, #4056]	; 19b6c <main@@Base+0x1160>
   18b90:	ldr	r1, [pc, r1]
   18b94:	str	r0, [r1]
   18b98:	add	r0, r7, #1
   18b9c:	sub	r4, sl, r0
   18ba0:	cmp	r4, #1
   18ba4:	blt	19b30 <main@@Base+0x1124>
   18ba8:	add	r7, r9, r0, lsl #2
   18bac:	sub	r0, r4, #1
   18bb0:	str	r0, [sp, #12]
   18bb4:	mov	r0, #1
   18bb8:	str	r0, [sp, #16]
   18bbc:	mov	r0, #0
   18bc0:	ldr	r9, [pc, #4008]	; 19b70 <main@@Base+0x1164>
   18bc4:	ldr	r8, [pc, #4008]	; 19b74 <main@@Base+0x1168>
   18bc8:	str	r0, [sp, #8]
   18bcc:	mov	r0, #0
   18bd0:	str	r0, [sp, #4]
   18bd4:	mov	r0, #0
   18bd8:	str	r0, [sp]
   18bdc:	add	r9, pc, r9
   18be0:	add	r8, pc, r8
   18be4:	b	18c00 <main@@Base+0x1f4>
   18be8:	mov	r0, #0
   18bec:	mov	r5, r6
   18bf0:	str	r0, [sp, #16]
   18bf4:	add	r6, r5, #1
   18bf8:	cmp	r6, r4
   18bfc:	bge	19594 <main@@Base+0xb88>
   18c00:	ldr	sl, [r7, r6, lsl #2]
   18c04:	mov	r1, r9
   18c08:	mov	r0, sl
   18c0c:	bl	12674 <strcmp@plt>
   18c10:	cmp	r0, #0
   18c14:	beq	18be8 <main@@Base+0x1dc>
   18c18:	mov	r0, sl
   18c1c:	mov	r1, r8
   18c20:	bl	12674 <strcmp@plt>
   18c24:	cmp	r0, #0
   18c28:	beq	18be8 <main@@Base+0x1dc>
   18c2c:	ldr	r1, [pc, #4064]	; 19c14 <main@@Base+0x1208>
   18c30:	mov	r0, sl
   18c34:	add	r1, pc, r1
   18c38:	bl	12674 <strcmp@plt>
   18c3c:	cmp	r0, #0
   18c40:	beq	18c5c <main@@Base+0x250>
   18c44:	ldr	r1, [pc, #4044]	; 19c18 <main@@Base+0x120c>
   18c48:	mov	r0, sl
   18c4c:	add	r1, pc, r1
   18c50:	bl	12674 <strcmp@plt>
   18c54:	cmp	r0, #0
   18c58:	bne	18c78 <main@@Base+0x26c>
   18c5c:	add	r5, r6, #1
   18c60:	cmp	r5, r4
   18c64:	bge	18c78 <main@@Base+0x26c>
   18c68:	ldr	r0, [r7, r5, lsl #2]
   18c6c:	ldrb	r1, [r0]
   18c70:	cmp	r1, #45	; 0x2d
   18c74:	bne	18d9c <main@@Base+0x390>
   18c78:	ldr	r1, [pc, #4092]	; 19c7c <main@@Base+0x1270>
   18c7c:	mov	r0, sl
   18c80:	add	r1, pc, r1
   18c84:	bl	12674 <strcmp@plt>
   18c88:	cmp	r0, #0
   18c8c:	beq	18ca8 <main@@Base+0x29c>
   18c90:	ldr	r1, [pc, #4072]	; 19c80 <main@@Base+0x1274>
   18c94:	mov	r0, sl
   18c98:	add	r1, pc, r1
   18c9c:	bl	12674 <strcmp@plt>
   18ca0:	cmp	r0, #0
   18ca4:	bne	18cc4 <main@@Base+0x2b8>
   18ca8:	add	r5, r6, #1
   18cac:	cmp	r5, r4
   18cb0:	bge	18cc4 <main@@Base+0x2b8>
   18cb4:	ldr	r0, [r7, r5, lsl #2]
   18cb8:	ldrb	r1, [r0]
   18cbc:	cmp	r1, #45	; 0x2d
   18cc0:	bne	18dac <main@@Base+0x3a0>
   18cc4:	ldr	r1, [pc, #4060]	; 19ca8 <main@@Base+0x129c>
   18cc8:	mov	r0, sl
   18ccc:	add	r1, pc, r1
   18cd0:	bl	12674 <strcmp@plt>
   18cd4:	cmp	r0, #0
   18cd8:	bne	18cf8 <main@@Base+0x2ec>
   18cdc:	add	r5, r6, #1
   18ce0:	cmp	r5, r4
   18ce4:	bge	18cf8 <main@@Base+0x2ec>
   18ce8:	ldr	r0, [r7, r5, lsl #2]
   18cec:	ldrb	r1, [r0]
   18cf0:	cmp	r1, #45	; 0x2d
   18cf4:	bne	18dbc <main@@Base+0x3b0>
   18cf8:	mov	r9, r7
   18cfc:	ldr	r7, [sp, #12]
   18d00:	ldr	r1, [pc, #4004]	; 19cac <main@@Base+0x12a0>
   18d04:	mov	r0, sl
   18d08:	mov	r8, r4
   18d0c:	add	r1, pc, r1
   18d10:	bl	12674 <strcmp@plt>
   18d14:	cmp	r0, #0
   18d18:	bne	18d5c <main@@Base+0x350>
   18d1c:	add	r5, r6, #3
   18d20:	cmp	r5, r8
   18d24:	bge	18d5c <main@@Base+0x350>
   18d28:	add	r0, r9, r6, lsl #2
   18d2c:	ldr	r4, [r0, #4]
   18d30:	ldrb	r1, [r4]
   18d34:	cmp	r1, #45	; 0x2d
   18d38:	beq	18d5c <main@@Base+0x350>
   18d3c:	ldr	r2, [r0, #8]
   18d40:	ldrb	r0, [r2]
   18d44:	cmp	r0, #45	; 0x2d
   18d48:	beq	18d5c <main@@Base+0x350>
   18d4c:	ldr	r0, [r9, r5, lsl #2]
   18d50:	ldrb	r1, [r0]
   18d54:	cmp	r1, #45	; 0x2d
   18d58:	bne	18dd8 <main@@Base+0x3cc>
   18d5c:	cmp	r6, r7
   18d60:	bne	19b30 <main@@Base+0x1124>
   18d64:	ldrb	r0, [sl]
   18d68:	cmp	r0, #45	; 0x2d
   18d6c:	beq	19b30 <main@@Base+0x1124>
   18d70:	ldr	r0, [pc, #3896]	; 19cb0 <main@@Base+0x12a4>
   18d74:	mov	r5, r7
   18d78:	ldr	r0, [pc, r0]
   18d7c:	str	sl, [r0]
   18d80:	mov	r7, r9
   18d84:	ldr	r9, [pc, #3880]	; 19cb4 <main@@Base+0x12a8>
   18d88:	mov	r4, r8
   18d8c:	ldr	r8, [pc, #3876]	; 19cb8 <main@@Base+0x12ac>
   18d90:	add	r9, pc, r9
   18d94:	add	r8, pc, r8
   18d98:	b	18bf4 <main@@Base+0x1e8>
   18d9c:	ldr	r1, [pc, #3864]	; 19cbc <main@@Base+0x12b0>
   18da0:	ldr	r1, [pc, r1]
   18da4:	str	r0, [r1]
   18da8:	b	18bf4 <main@@Base+0x1e8>
   18dac:	ldr	r1, [pc, #3852]	; 19cc0 <main@@Base+0x12b4>
   18db0:	ldr	r1, [pc, r1]
   18db4:	str	r0, [r1]
   18db8:	b	18bf4 <main@@Base+0x1e8>
   18dbc:	mov	r1, #0
   18dc0:	mov	r2, #10
   18dc4:	bl	12680 <strtol@plt>
   18dc8:	ldr	r1, [pc, #3828]	; 19cc4 <main@@Base+0x12b8>
   18dcc:	ldr	r1, [pc, r1]
   18dd0:	str	r0, [r1]
   18dd4:	b	18bf4 <main@@Base+0x1e8>
   18dd8:	mov	r6, r2
   18ddc:	mov	r1, #0
   18de0:	mov	r2, #10
   18de4:	bl	12680 <strtol@plt>
   18de8:	str	r0, [sp, #8]
   18dec:	str	r4, [sp]
   18df0:	mov	r0, r6
   18df4:	str	r6, [sp, #4]
   18df8:	b	18d80 <main@@Base+0x374>
   18dfc:	ldr	r0, [pc, #3780]	; 19cc8 <main@@Base+0x12bc>
   18e00:	mov	r8, #0
   18e04:	mov	r5, #1
   18e08:	ldr	r0, [pc, r0]
   18e0c:	str	r8, [r0, #664]	; 0x298
   18e10:	str	r8, [r0]
   18e14:	ldr	r0, [pc, #3760]	; 19ccc <main@@Base+0x12c0>
   18e18:	ldr	r0, [pc, r0]
   18e1c:	str	r8, [r0]
   18e20:	ldr	r0, [pc, #3752]	; 19cd0 <main@@Base+0x12c4>
   18e24:	ldr	r0, [pc, r0]
   18e28:	str	r5, [r0]
   18e2c:	ldr	r6, [pc, #3744]	; 19cd4 <main@@Base+0x12c8>
   18e30:	ldr	r6, [pc, r6]
   18e34:	str	r8, [r6]
   18e38:	ldr	r0, [pc, #3736]	; 19cd8 <main@@Base+0x12cc>
   18e3c:	ldr	r0, [pc, r0]
   18e40:	str	r8, [r0]
   18e44:	ldr	r0, [pc, #3728]	; 19cdc <main@@Base+0x12d0>
   18e48:	ldr	r0, [pc, r0]
   18e4c:	str	r8, [r0]
   18e50:	ldr	r0, [pc, #3720]	; 19ce0 <main@@Base+0x12d4>
   18e54:	ldr	r0, [pc, r0]
   18e58:	str	r8, [r0]
   18e5c:	ldr	r0, [pc, #3712]	; 19ce4 <main@@Base+0x12d8>
   18e60:	ldr	r0, [pc, r0]
   18e64:	str	r8, [r0]
   18e68:	add	r0, r7, #1
   18e6c:	sub	r7, sl, r0
   18e70:	cmp	r7, #1
   18e74:	blt	19b30 <main@@Base+0x1124>
   18e78:	add	r9, r9, r0, lsl #2
   18e7c:	sub	r0, r7, #1
   18e80:	str	r0, [sp, #8]
   18e84:	mov	r0, #1
   18e88:	ldr	r4, [pc, #3672]	; 19ce8 <main@@Base+0x12dc>
   18e8c:	str	r0, [sp, #16]
   18e90:	mov	r0, #1
   18e94:	str	r0, [sp, #12]
   18e98:	add	r4, pc, r4
   18e9c:	b	18eb0 <main@@Base+0x4a4>
   18ea0:	str	r5, [r6]
   18ea4:	add	r8, r8, #1
   18ea8:	cmp	r8, r7
   18eac:	bge	190f0 <main@@Base+0x6e4>
   18eb0:	ldr	sl, [r9, r8, lsl #2]
   18eb4:	mov	r1, r4
   18eb8:	mov	r0, sl
   18ebc:	bl	12674 <strcmp@plt>
   18ec0:	cmp	r0, #0
   18ec4:	beq	18ea0 <main@@Base+0x494>
   18ec8:	ldr	r1, [pc, #3612]	; 19cec <main@@Base+0x12e0>
   18ecc:	mov	r0, sl
   18ed0:	add	r1, pc, r1
   18ed4:	bl	12674 <strcmp@plt>
   18ed8:	cmp	r0, #0
   18edc:	beq	18ea0 <main@@Base+0x494>
   18ee0:	ldr	r1, [pc, #3600]	; 19cf8 <main@@Base+0x12ec>
   18ee4:	mov	r0, sl
   18ee8:	add	r1, pc, r1
   18eec:	bl	12674 <strcmp@plt>
   18ef0:	cmp	r0, #0
   18ef4:	beq	19044 <main@@Base+0x638>
   18ef8:	ldr	r1, [pc, #3580]	; 19cfc <main@@Base+0x12f0>
   18efc:	mov	r0, sl
   18f00:	add	r1, pc, r1
   18f04:	bl	12674 <strcmp@plt>
   18f08:	cmp	r0, #0
   18f0c:	beq	19044 <main@@Base+0x638>
   18f10:	ldr	r1, [pc, #3560]	; 19d00 <main@@Base+0x12f4>
   18f14:	mov	r0, sl
   18f18:	mov	r4, r6
   18f1c:	add	r1, pc, r1
   18f20:	bl	12674 <strcmp@plt>
   18f24:	cmp	r0, #0
   18f28:	beq	18f44 <main@@Base+0x538>
   18f2c:	ldr	r1, [pc, #3536]	; 19d04 <main@@Base+0x12f8>
   18f30:	mov	r0, sl
   18f34:	add	r1, pc, r1
   18f38:	bl	12674 <strcmp@plt>
   18f3c:	cmp	r0, #0
   18f40:	bne	18f60 <main@@Base+0x554>
   18f44:	add	r6, r8, #1
   18f48:	cmp	r6, r7
   18f4c:	bge	18f60 <main@@Base+0x554>
   18f50:	ldr	r0, [r9, r6, lsl #2]
   18f54:	ldrb	r1, [r0]
   18f58:	cmp	r1, #45	; 0x2d
   18f5c:	bne	19090 <main@@Base+0x684>
   18f60:	ldr	r1, [pc, #3504]	; 19d18 <main@@Base+0x130c>
   18f64:	mov	r0, sl
   18f68:	add	r1, pc, r1
   18f6c:	bl	12674 <strcmp@plt>
   18f70:	cmp	r0, #0
   18f74:	beq	19050 <main@@Base+0x644>
   18f78:	ldr	r1, [pc, #3484]	; 19d1c <main@@Base+0x1310>
   18f7c:	mov	r0, sl
   18f80:	add	r1, pc, r1
   18f84:	bl	12674 <strcmp@plt>
   18f88:	cmp	r0, #0
   18f8c:	beq	19050 <main@@Base+0x644>
   18f90:	ldr	r1, [pc, #3472]	; 19d28 <main@@Base+0x131c>
   18f94:	mov	r0, sl
   18f98:	add	r1, pc, r1
   18f9c:	bl	12674 <strcmp@plt>
   18fa0:	cmp	r0, #0
   18fa4:	mov	r6, r4
   18fa8:	beq	19074 <main@@Base+0x668>
   18fac:	ldr	r1, [pc, #3448]	; 19d2c <main@@Base+0x1320>
   18fb0:	mov	r0, sl
   18fb4:	add	r1, pc, r1
   18fb8:	bl	12674 <strcmp@plt>
   18fbc:	cmp	r0, #0
   18fc0:	beq	19074 <main@@Base+0x668>
   18fc4:	ldr	r1, [pc, #3436]	; 19d38 <main@@Base+0x132c>
   18fc8:	mov	r0, sl
   18fcc:	add	r1, pc, r1
   18fd0:	bl	12674 <strcmp@plt>
   18fd4:	ldr	r4, [pc, #3424]	; 19d3c <main@@Base+0x1330>
   18fd8:	cmp	r0, #0
   18fdc:	mov	r5, #1
   18fe0:	add	r4, pc, r4
   18fe4:	beq	190c0 <main@@Base+0x6b4>
   18fe8:	ldr	r1, [pc, #3412]	; 19d44 <main@@Base+0x1338>
   18fec:	mov	r0, sl
   18ff0:	add	r1, pc, r1
   18ff4:	bl	12674 <strcmp@plt>
   18ff8:	cmp	r0, #0
   18ffc:	beq	190d0 <main@@Base+0x6c4>
   19000:	ldr	r1, [pc, #3396]	; 19d4c <main@@Base+0x1340>
   19004:	mov	r0, sl
   19008:	add	r1, pc, r1
   1900c:	bl	12674 <strcmp@plt>
   19010:	cmp	r0, #0
   19014:	beq	190e4 <main@@Base+0x6d8>
   19018:	ldr	r0, [sp, #8]
   1901c:	cmp	r8, r0
   19020:	bne	19b30 <main@@Base+0x1124>
   19024:	ldrb	r0, [sl]
   19028:	cmp	r0, #45	; 0x2d
   1902c:	beq	19b30 <main@@Base+0x1124>
   19030:	ldr	r0, [pc, #3352]	; 19d50 <main@@Base+0x1344>
   19034:	ldr	r0, [pc, r0]
   19038:	ldr	r8, [sp, #8]
   1903c:	str	sl, [r0]
   19040:	b	18ea4 <main@@Base+0x498>
   19044:	mov	r0, #0
   19048:	str	r0, [sp, #16]
   1904c:	b	18ea4 <main@@Base+0x498>
   19050:	ldr	r1, [pc, #3272]	; 19d20 <main@@Base+0x1314>
   19054:	mov	r0, #1
   19058:	mov	r6, r4
   1905c:	mov	r5, #1
   19060:	ldr	r1, [pc, r1]
   19064:	str	r0, [r1]
   19068:	ldr	r4, [pc, #3252]	; 19d24 <main@@Base+0x1318>
   1906c:	add	r4, pc, r4
   19070:	b	18ea4 <main@@Base+0x498>
   19074:	ldr	r0, [pc, #3252]	; 19d30 <main@@Base+0x1324>
   19078:	mov	r5, #1
   1907c:	ldr	r0, [pc, r0]
   19080:	str	r5, [r0]
   19084:	ldr	r4, [pc, #3240]	; 19d34 <main@@Base+0x1328>
   19088:	add	r4, pc, r4
   1908c:	b	18ea4 <main@@Base+0x498>
   19090:	bl	15d04 <codadump_filter_create@@Base>
   19094:	ldr	r1, [pc, #3180]	; 19d08 <main@@Base+0x12fc>
   19098:	mov	r8, r6
   1909c:	mov	r6, r4
   190a0:	cmp	r0, #0
   190a4:	mov	r5, #1
   190a8:	ldr	r1, [pc, r1]
   190ac:	str	r0, [r1, #664]	; 0x298
   190b0:	ldr	r4, [pc, #3156]	; 19d0c <main@@Base+0x1300>
   190b4:	add	r4, pc, r4
   190b8:	bne	18ea4 <main@@Base+0x498>
   190bc:	b	19c50 <main@@Base+0x1244>
   190c0:	ldr	r0, [pc, #3192]	; 19d40 <main@@Base+0x1334>
   190c4:	ldr	r0, [pc, r0]
   190c8:	str	r5, [r0]
   190cc:	b	18ea4 <main@@Base+0x498>
   190d0:	ldr	r0, [pc, #3184]	; 19d48 <main@@Base+0x133c>
   190d4:	ldr	r0, [pc, r0]
   190d8:	str	r5, [r6]
   190dc:	str	r5, [r0]
   190e0:	b	18ea4 <main@@Base+0x498>
   190e4:	mov	r0, #0
   190e8:	str	r0, [sp, #12]
   190ec:	b	18ea4 <main@@Base+0x498>
   190f0:	ldr	r0, [pc, #3164]	; 19d54 <main@@Base+0x1348>
   190f4:	ldr	r0, [pc, r0]
   190f8:	ldr	r0, [r0]
   190fc:	cmp	r0, #0
   19100:	ldrbne	r0, [r0]
   19104:	cmpne	r0, #0
   19108:	beq	19b30 <main@@Base+0x1124>
   1910c:	bl	128f0 <coda_init@plt>
   19110:	cmp	r0, #0
   19114:	bne	19c1c <main@@Base+0x1210>
   19118:	ldr	r0, [sp, #12]
   1911c:	clz	r0, r0
   19120:	lsr	r0, r0, #5
   19124:	bl	12734 <coda_set_option_bypass_special_types@plt>
   19128:	mov	r0, #0
   1912c:	bl	12668 <coda_set_option_perform_boundary_checks@plt>
   19130:	ldr	r0, [sp, #16]
   19134:	bl	128fc <coda_set_option_perform_conversions@plt>
   19138:	bl	17280 <traverse_info_init@@Base>
   1913c:	bl	14914 <dim_info_init@@Base>
   19140:	bl	172e0 <traverse_product@@Base>
   19144:	b	19578 <main@@Base+0xb6c>
   19148:	ldr	r0, [pc, #3080]	; 19d58 <main@@Base+0x134c>
   1914c:	mov	r6, #0
   19150:	mov	r1, #1
   19154:	ldr	r0, [pc, r0]
   19158:	str	r6, [r0, #664]	; 0x298
   1915c:	str	r6, [r0]
   19160:	ldr	r0, [pc, #3060]	; 19d5c <main@@Base+0x1350>
   19164:	ldr	r0, [pc, r0]
   19168:	str	r1, [r0]
   1916c:	ldr	r0, [pc, #3052]	; 19d60 <main@@Base+0x1354>
   19170:	ldr	r0, [pc, r0]
   19174:	str	r6, [r0]
   19178:	ldr	r2, [pc, #3044]	; 19d64 <main@@Base+0x1358>
   1917c:	ldr	r2, [pc, r2]
   19180:	ldr	r0, [pc, #3040]	; 19d68 <main@@Base+0x135c>
   19184:	add	r0, pc, r0
   19188:	str	r0, [r2]
   1918c:	ldr	r0, [pc, #3032]	; 19d6c <main@@Base+0x1360>
   19190:	ldr	r0, [pc, r0]
   19194:	str	r1, [r0]
   19198:	ldr	r0, [pc, #3024]	; 19d70 <main@@Base+0x1364>
   1919c:	ldr	r0, [pc, r0]
   191a0:	str	r1, [r0]
   191a4:	ldr	r0, [pc, #3016]	; 19d74 <main@@Base+0x1368>
   191a8:	ldr	r0, [pc, r0]
   191ac:	str	r6, [r0]
   191b0:	ldr	r0, [pc, #3008]	; 19d78 <main@@Base+0x136c>
   191b4:	ldr	r0, [pc, r0]
   191b8:	str	r6, [r0]
   191bc:	ldr	r0, [pc, #3000]	; 19d7c <main@@Base+0x1370>
   191c0:	ldr	r0, [pc, r0]
   191c4:	str	r6, [r0]
   191c8:	ldr	r0, [pc, #2992]	; 19d80 <main@@Base+0x1374>
   191cc:	ldr	r0, [pc, r0]
   191d0:	str	r6, [r0]
   191d4:	ldr	r0, [pc, #2984]	; 19d84 <main@@Base+0x1378>
   191d8:	ldr	r0, [pc, r0]
   191dc:	ldr	r0, [r0]
   191e0:	ldr	r1, [pc, #2976]	; 19d88 <main@@Base+0x137c>
   191e4:	ldr	r1, [pc, r1]
   191e8:	str	r0, [r1]
   191ec:	add	r0, r7, #1
   191f0:	sub	r8, sl, r0
   191f4:	cmp	r8, #1
   191f8:	blt	19b30 <main@@Base+0x1124>
   191fc:	add	sl, r9, r0, lsl #2
   19200:	sub	r0, r8, #1
   19204:	mov	r4, #1
   19208:	str	r0, [sp, #12]
   1920c:	mov	r0, #1
   19210:	ldr	r5, [pc, #2932]	; 19d8c <main@@Base+0x1380>
   19214:	str	r0, [sp, #16]
   19218:	add	r5, pc, r5
   1921c:	ldr	r9, [sl, r6, lsl #2]
   19220:	mov	r1, r5
   19224:	mov	r0, r9
   19228:	bl	12674 <strcmp@plt>
   1922c:	cmp	r0, #0
   19230:	beq	19434 <main@@Base+0xa28>
   19234:	ldr	r1, [pc, #2900]	; 19d90 <main@@Base+0x1384>
   19238:	mov	r0, r9
   1923c:	add	r1, pc, r1
   19240:	bl	12674 <strcmp@plt>
   19244:	cmp	r0, #0
   19248:	beq	19434 <main@@Base+0xa28>
   1924c:	ldr	r1, [pc, #2880]	; 19d94 <main@@Base+0x1388>
   19250:	mov	r0, r9
   19254:	add	r1, pc, r1
   19258:	bl	12674 <strcmp@plt>
   1925c:	cmp	r0, #0
   19260:	beq	1927c <main@@Base+0x870>
   19264:	ldr	r1, [pc, #2860]	; 19d98 <main@@Base+0x138c>
   19268:	mov	r0, r9
   1926c:	add	r1, pc, r1
   19270:	bl	12674 <strcmp@plt>
   19274:	cmp	r0, #0
   19278:	bne	19298 <main@@Base+0x88c>
   1927c:	add	r7, r6, #1
   19280:	cmp	r7, r8
   19284:	bge	19298 <main@@Base+0x88c>
   19288:	ldr	r0, [sl, r7, lsl #2]
   1928c:	ldrb	r1, [r0]
   19290:	cmp	r1, #45	; 0x2d
   19294:	bne	1945c <main@@Base+0xa50>
   19298:	ldr	r1, [pc, #2816]	; 19da0 <main@@Base+0x1394>
   1929c:	mov	r0, r9
   192a0:	add	r1, pc, r1
   192a4:	bl	12674 <strcmp@plt>
   192a8:	cmp	r0, #0
   192ac:	beq	1943c <main@@Base+0xa30>
   192b0:	ldr	r1, [pc, #2796]	; 19da4 <main@@Base+0x1398>
   192b4:	mov	r0, r9
   192b8:	add	r1, pc, r1
   192bc:	bl	12674 <strcmp@plt>
   192c0:	cmp	r0, #0
   192c4:	beq	1943c <main@@Base+0xa30>
   192c8:	ldr	r1, [pc, #2780]	; 19dac <main@@Base+0x13a0>
   192cc:	mov	r0, r9
   192d0:	add	r1, pc, r1
   192d4:	bl	12674 <strcmp@plt>
   192d8:	cmp	r0, #0
   192dc:	beq	1944c <main@@Base+0xa40>
   192e0:	ldr	r1, [pc, #2760]	; 19db0 <main@@Base+0x13a4>
   192e4:	mov	r0, r9
   192e8:	add	r1, pc, r1
   192ec:	bl	12674 <strcmp@plt>
   192f0:	cmp	r0, #0
   192f4:	beq	1944c <main@@Base+0xa40>
   192f8:	ldr	r1, [pc, #2744]	; 19db8 <main@@Base+0x13ac>
   192fc:	mov	r0, r9
   19300:	add	r1, pc, r1
   19304:	bl	12674 <strcmp@plt>
   19308:	cmp	r0, #0
   1930c:	beq	19328 <main@@Base+0x91c>
   19310:	ldr	r1, [pc, #2724]	; 19dbc <main@@Base+0x13b0>
   19314:	mov	r0, r9
   19318:	add	r1, pc, r1
   1931c:	bl	12674 <strcmp@plt>
   19320:	cmp	r0, #0
   19324:	bne	19344 <main@@Base+0x938>
   19328:	add	r7, r6, #1
   1932c:	cmp	r7, r8
   19330:	bge	19344 <main@@Base+0x938>
   19334:	ldr	r0, [sl, r7, lsl #2]
   19338:	ldrb	r1, [r0]
   1933c:	cmp	r1, #45	; 0x2d
   19340:	bne	194ac <main@@Base+0xaa0>
   19344:	ldr	r1, [pc, #2680]	; 19dc4 <main@@Base+0x13b8>
   19348:	mov	r0, r9
   1934c:	add	r1, pc, r1
   19350:	bl	12674 <strcmp@plt>
   19354:	cmp	r0, #0
   19358:	beq	19478 <main@@Base+0xa6c>
   1935c:	ldr	r1, [pc, #2660]	; 19dc8 <main@@Base+0x13bc>
   19360:	mov	r0, r9
   19364:	add	r1, pc, r1
   19368:	bl	12674 <strcmp@plt>
   1936c:	cmp	r0, #0
   19370:	beq	19478 <main@@Base+0xa6c>
   19374:	ldr	r1, [pc, #2644]	; 19dd0 <main@@Base+0x13c4>
   19378:	mov	r0, r9
   1937c:	add	r1, pc, r1
   19380:	bl	12674 <strcmp@plt>
   19384:	cmp	r0, #0
   19388:	beq	193a4 <main@@Base+0x998>
   1938c:	ldr	r1, [pc, #2624]	; 19dd4 <main@@Base+0x13c8>
   19390:	mov	r0, r9
   19394:	add	r1, pc, r1
   19398:	bl	12674 <strcmp@plt>
   1939c:	cmp	r0, #0
   193a0:	bne	193c0 <main@@Base+0x9b4>
   193a4:	add	r7, r6, #1
   193a8:	cmp	r7, r8
   193ac:	bge	193c0 <main@@Base+0x9b4>
   193b0:	ldr	r0, [sl, r7, lsl #2]
   193b4:	ldrb	r1, [r0]
   193b8:	cmp	r1, #45	; 0x2d
   193bc:	bne	194bc <main@@Base+0xab0>
   193c0:	ldr	r1, [pc, #2580]	; 19ddc <main@@Base+0x13d0>
   193c4:	mov	r0, r9
   193c8:	add	r1, pc, r1
   193cc:	bl	12674 <strcmp@plt>
   193d0:	cmp	r0, #0
   193d4:	beq	19488 <main@@Base+0xa7c>
   193d8:	ldr	r1, [pc, #2560]	; 19de0 <main@@Base+0x13d4>
   193dc:	mov	r0, r9
   193e0:	add	r1, pc, r1
   193e4:	bl	12674 <strcmp@plt>
   193e8:	cmp	r0, #0
   193ec:	beq	19488 <main@@Base+0xa7c>
   193f0:	ldr	r1, [pc, #2544]	; 19de8 <main@@Base+0x13dc>
   193f4:	mov	r0, r9
   193f8:	add	r1, pc, r1
   193fc:	bl	12674 <strcmp@plt>
   19400:	cmp	r0, #0
   19404:	beq	194cc <main@@Base+0xac0>
   19408:	ldr	r0, [sp, #12]
   1940c:	cmp	r6, r0
   19410:	bne	19b30 <main@@Base+0x1124>
   19414:	ldrb	r0, [r9]
   19418:	cmp	r0, #45	; 0x2d
   1941c:	beq	19b30 <main@@Base+0x1124>
   19420:	ldr	r0, [pc, #2500]	; 19dec <main@@Base+0x13e0>
   19424:	ldr	r0, [pc, r0]
   19428:	ldr	r7, [sp, #12]
   1942c:	str	r9, [r0]
   19430:	b	1949c <main@@Base+0xa90>
   19434:	mov	r4, #0
   19438:	b	19498 <main@@Base+0xa8c>
   1943c:	ldr	r1, [pc, #2404]	; 19da8 <main@@Base+0x139c>
   19440:	mov	r0, #1
   19444:	ldr	r1, [pc, r1]
   19448:	b	19494 <main@@Base+0xa88>
   1944c:	ldr	r1, [pc, #2400]	; 19db4 <main@@Base+0x13a8>
   19450:	mov	r0, #1
   19454:	ldr	r1, [pc, r1]
   19458:	b	19494 <main@@Base+0xa88>
   1945c:	bl	15d04 <codadump_filter_create@@Base>
   19460:	ldr	r1, [pc, #2356]	; 19d9c <main@@Base+0x1390>
   19464:	cmp	r0, #0
   19468:	ldr	r1, [pc, r1]
   1946c:	str	r0, [r1, #664]	; 0x298
   19470:	bne	1949c <main@@Base+0xa90>
   19474:	b	19c50 <main@@Base+0x1244>
   19478:	ldr	r1, [pc, #2380]	; 19dcc <main@@Base+0x13c0>
   1947c:	mov	r0, #1
   19480:	ldr	r1, [pc, r1]
   19484:	b	19494 <main@@Base+0xa88>
   19488:	ldr	r1, [pc, #2388]	; 19de4 <main@@Base+0x13d8>
   1948c:	mov	r0, #1
   19490:	ldr	r1, [pc, r1]
   19494:	str	r0, [r1]
   19498:	mov	r7, r6
   1949c:	add	r6, r7, #1
   194a0:	cmp	r6, r8
   194a4:	blt	1921c <main@@Base+0x810>
   194a8:	b	194dc <main@@Base+0xad0>
   194ac:	ldr	r1, [pc, #2316]	; 19dc0 <main@@Base+0x13b4>
   194b0:	ldr	r1, [pc, r1]
   194b4:	str	r0, [r1]
   194b8:	b	1949c <main@@Base+0xa90>
   194bc:	ldr	r1, [pc, #2324]	; 19dd8 <main@@Base+0x13cc>
   194c0:	ldr	r1, [pc, r1]
   194c4:	str	r0, [r1]
   194c8:	b	1949c <main@@Base+0xa90>
   194cc:	mov	r0, #0
   194d0:	mov	r7, r6
   194d4:	str	r0, [sp, #16]
   194d8:	b	1949c <main@@Base+0xa90>
   194dc:	ldr	r0, [pc, #2316]	; 19df0 <main@@Base+0x13e4>
   194e0:	ldr	r0, [pc, r0]
   194e4:	ldr	r0, [r0]
   194e8:	cmp	r0, #0
   194ec:	ldrbne	r0, [r0]
   194f0:	cmpne	r0, #0
   194f4:	beq	19b30 <main@@Base+0x1124>
   194f8:	bl	128f0 <coda_init@plt>
   194fc:	cmp	r0, #0
   19500:	bne	19c1c <main@@Base+0x1210>
   19504:	ldr	r0, [sp, #16]
   19508:	clz	r0, r0
   1950c:	lsr	r0, r0, #5
   19510:	bl	12734 <coda_set_option_bypass_special_types@plt>
   19514:	mov	r0, #0
   19518:	bl	12668 <coda_set_option_perform_boundary_checks@plt>
   1951c:	mov	r0, r4
   19520:	bl	128fc <coda_set_option_perform_conversions@plt>
   19524:	bl	17280 <traverse_info_init@@Base>
   19528:	bl	14914 <dim_info_init@@Base>
   1952c:	ldr	r4, [pc, #2240]	; 19df4 <main@@Base+0x13e8>
   19530:	ldr	r4, [pc, r4]
   19534:	ldr	r0, [r4]
   19538:	ldr	r5, [pc, #2232]	; 19df8 <main@@Base+0x13ec>
   1953c:	ldr	r5, [pc, r5]
   19540:	cmp	r0, #0
   19544:	beq	19560 <main@@Base+0xb54>
   19548:	ldr	r1, [pc, #2220]	; 19dfc <main@@Base+0x13f0>
   1954c:	add	r1, pc, r1
   19550:	bl	126b0 <fopen@plt>
   19554:	cmp	r0, #0
   19558:	str	r0, [r5]
   1955c:	beq	19c6c <main@@Base+0x1260>
   19560:	bl	172e0 <traverse_product@@Base>
   19564:	ldr	r0, [r4]
   19568:	cmp	r0, #0
   1956c:	beq	19578 <main@@Base+0xb6c>
   19570:	ldr	r0, [r5]
   19574:	bl	12974 <fclose@plt>
   19578:	bl	14938 <dim_info_done@@Base>
   1957c:	bl	172a4 <traverse_info_done@@Base>
   19580:	b	19bec <main@@Base+0x11e0>
   19584:	ldr	r0, [r9, #8]
   19588:	bl	127a0 <coda_set_definition_path@plt>
   1958c:	mov	r7, #3
   19590:	b	18acc <main@@Base+0xc0>
   19594:	ldr	r0, [pc, #2324]	; 19eb0 <main@@Base+0x14a4>
   19598:	ldr	r0, [pc, r0]
   1959c:	ldr	r0, [r0]
   195a0:	cmp	r0, #0
   195a4:	ldrbne	r0, [r0]
   195a8:	cmpne	r0, #0
   195ac:	beq	19b30 <main@@Base+0x1124>
   195b0:	bl	128f0 <coda_init@plt>
   195b4:	cmp	r0, #0
   195b8:	bne	19c1c <main@@Base+0x1210>
   195bc:	mov	r0, #0
   195c0:	bl	128fc <coda_set_option_perform_conversions@plt>
   195c4:	ldr	r0, [sp, #16]
   195c8:	bl	12644 <coda_set_option_use_fast_size_expressions@plt>
   195cc:	ldr	r0, [pc, #2272]	; 19eb4 <main@@Base+0x14a8>
   195d0:	ldr	r0, [pc, r0]
   195d4:	ldr	r0, [r0]
   195d8:	ldr	r4, [pc, #2264]	; 19eb8 <main@@Base+0x14ac>
   195dc:	ldr	r4, [pc, r4]
   195e0:	cmp	r0, #0
   195e4:	beq	19600 <main@@Base+0xbf4>
   195e8:	ldr	r1, [pc, #2252]	; 19ebc <main@@Base+0x14b0>
   195ec:	add	r1, pc, r1
   195f0:	bl	126b0 <fopen@plt>
   195f4:	cmp	r0, #0
   195f8:	str	r0, [r4]
   195fc:	beq	19c84 <main@@Base+0x1278>
   19600:	ldm	sp, {r0, r1, r2}
   19604:	bl	1376c <print_debug_data@@Base>
   19608:	ldr	r0, [pc, #2228]	; 19ec4 <main@@Base+0x14b8>
   1960c:	ldr	r0, [pc, r0]
   19610:	ldr	r0, [r0]
   19614:	cmp	r0, #0
   19618:	beq	19bec <main@@Base+0x11e0>
   1961c:	ldr	r0, [r4]
   19620:	b	19be8 <main@@Base+0x11dc>
   19624:	ldr	r0, [pc, #2012]	; 19e08 <main@@Base+0x13fc>
   19628:	mov	r2, #0
   1962c:	mov	r1, #3
   19630:	ldr	r0, [pc, r0]
   19634:	str	r2, [r0]
   19638:	ldr	r0, [pc, #1996]	; 19e0c <main@@Base+0x1400>
   1963c:	ldr	r0, [pc, r0]
   19640:	str	r1, [r0]
   19644:	ldr	r0, [pc, #1988]	; 19e10 <main@@Base+0x1404>
   19648:	ldr	r0, [pc, r0]
   1964c:	str	r2, [r0]
   19650:	ldr	r0, [pc, #1980]	; 19e14 <main@@Base+0x1408>
   19654:	ldr	r0, [pc, r0]
   19658:	str	r2, [r0]
   1965c:	ldr	r0, [pc, #1972]	; 19e18 <main@@Base+0x140c>
   19660:	ldr	r0, [pc, r0]
   19664:	ldr	r0, [r0]
   19668:	ldr	r1, [pc, #1964]	; 19e1c <main@@Base+0x1410>
   1966c:	ldr	r1, [pc, r1]
   19670:	str	r0, [r1]
   19674:	add	r0, r7, #1
   19678:	sub	r8, sl, r0
   1967c:	cmp	r8, #1
   19680:	blt	19b30 <main@@Base+0x1124>
   19684:	add	r9, r9, r0, lsl #2
   19688:	sub	r0, r8, #1
   1968c:	mov	r1, #0
   19690:	mov	r5, #0
   19694:	mov	r4, #0
   19698:	str	r0, [sp, #12]
   1969c:	mov	r0, #1
   196a0:	str	r1, [sp, #8]
   196a4:	str	r0, [sp, #16]
   196a8:	mov	r0, #1
   196ac:	ldr	r6, [pc, #1900]	; 19e20 <main@@Base+0x1414>
   196b0:	ldr	r7, [pc, #1900]	; 19e24 <main@@Base+0x1418>
   196b4:	str	r0, [sp, #4]
   196b8:	add	r6, pc, r6
   196bc:	add	r7, pc, r7
   196c0:	b	196d8 <main@@Base+0xccc>
   196c4:	mov	r4, #1
   196c8:	mov	r0, r5
   196cc:	add	r5, r0, #1
   196d0:	cmp	r5, r8
   196d4:	bge	1984c <main@@Base+0xe40>
   196d8:	ldr	sl, [r9, r5, lsl #2]
   196dc:	mov	r1, r6
   196e0:	mov	r0, sl
   196e4:	bl	12674 <strcmp@plt>
   196e8:	cmp	r0, #0
   196ec:	beq	196c4 <main@@Base+0xcb8>
   196f0:	mov	r0, sl
   196f4:	mov	r1, r7
   196f8:	bl	12674 <strcmp@plt>
   196fc:	cmp	r0, #0
   19700:	beq	196c4 <main@@Base+0xcb8>
   19704:	ldr	r1, [pc, #1820]	; 19e28 <main@@Base+0x141c>
   19708:	mov	r0, sl
   1970c:	add	r1, pc, r1
   19710:	bl	12674 <strcmp@plt>
   19714:	cmp	r0, #0
   19718:	beq	19814 <main@@Base+0xe08>
   1971c:	ldr	r1, [pc, #1800]	; 19e2c <main@@Base+0x1420>
   19720:	mov	r0, sl
   19724:	add	r1, pc, r1
   19728:	bl	12674 <strcmp@plt>
   1972c:	cmp	r0, #0
   19730:	beq	19814 <main@@Base+0xe08>
   19734:	ldr	r1, [pc, #1780]	; 19e30 <main@@Base+0x1424>
   19738:	mov	r0, sl
   1973c:	add	r1, pc, r1
   19740:	bl	12674 <strcmp@plt>
   19744:	cmp	r0, #0
   19748:	beq	19764 <main@@Base+0xd58>
   1974c:	ldr	r1, [pc, #1760]	; 19e34 <main@@Base+0x1428>
   19750:	mov	r0, sl
   19754:	add	r1, pc, r1
   19758:	bl	12674 <strcmp@plt>
   1975c:	cmp	r0, #0
   19760:	bne	19780 <main@@Base+0xd74>
   19764:	add	r0, r5, #1
   19768:	cmp	r0, r8
   1976c:	bge	19780 <main@@Base+0xd74>
   19770:	ldr	r1, [r9, r0, lsl #2]
   19774:	ldrb	r2, [r1]
   19778:	cmp	r2, #45	; 0x2d
   1977c:	bne	1982c <main@@Base+0xe20>
   19780:	ldr	r1, [pc, #1716]	; 19e3c <main@@Base+0x1430>
   19784:	mov	r0, sl
   19788:	add	r1, pc, r1
   1978c:	bl	12674 <strcmp@plt>
   19790:	cmp	r0, #0
   19794:	beq	197b0 <main@@Base+0xda4>
   19798:	ldr	r1, [pc, #1696]	; 19e40 <main@@Base+0x1434>
   1979c:	mov	r0, sl
   197a0:	add	r1, pc, r1
   197a4:	bl	12674 <strcmp@plt>
   197a8:	cmp	r0, #0
   197ac:	bne	197cc <main@@Base+0xdc0>
   197b0:	add	r0, r5, #1
   197b4:	cmp	r0, r8
   197b8:	bge	197cc <main@@Base+0xdc0>
   197bc:	ldr	r1, [r9, r0, lsl #2]
   197c0:	ldrb	r2, [r1]
   197c4:	cmp	r2, #45	; 0x2d
   197c8:	bne	1983c <main@@Base+0xe30>
   197cc:	ldr	r1, [pc, #1652]	; 19e48 <main@@Base+0x143c>
   197d0:	mov	r0, sl
   197d4:	add	r1, pc, r1
   197d8:	bl	12674 <strcmp@plt>
   197dc:	cmp	r0, #0
   197e0:	beq	19820 <main@@Base+0xe14>
   197e4:	ldr	r0, [sp, #12]
   197e8:	cmp	r5, r0
   197ec:	bne	19b30 <main@@Base+0x1124>
   197f0:	ldrb	r0, [sl]
   197f4:	cmp	r0, #45	; 0x2d
   197f8:	beq	19b30 <main@@Base+0x1124>
   197fc:	ldr	r0, [pc, #1608]	; 19e4c <main@@Base+0x1440>
   19800:	ldr	r0, [pc, r0]
   19804:	str	sl, [sp, #8]
   19808:	str	sl, [r0]
   1980c:	ldr	r0, [sp, #12]
   19810:	b	196cc <main@@Base+0xcc0>
   19814:	mov	r0, #0
   19818:	str	r0, [sp, #16]
   1981c:	b	196c8 <main@@Base+0xcbc>
   19820:	mov	r0, #0
   19824:	str	r0, [sp, #4]
   19828:	b	196c8 <main@@Base+0xcbc>
   1982c:	ldr	r2, [pc, #1540]	; 19e38 <main@@Base+0x142c>
   19830:	ldr	r2, [pc, r2]
   19834:	str	r1, [r2]
   19838:	b	196cc <main@@Base+0xcc0>
   1983c:	ldr	r2, [pc, #1536]	; 19e44 <main@@Base+0x1438>
   19840:	ldr	r2, [pc, r2]
   19844:	str	r1, [r2]
   19848:	b	196cc <main@@Base+0xcc0>
   1984c:	ldr	r0, [sp, #8]
   19850:	cmp	r0, #0
   19854:	ldrbne	r0, [r0]
   19858:	cmpne	r0, #0
   1985c:	beq	19b30 <main@@Base+0x1124>
   19860:	bl	128f0 <coda_init@plt>
   19864:	cmp	r0, #0
   19868:	bne	19c1c <main@@Base+0x1210>
   1986c:	ldr	r0, [sp, #4]
   19870:	clz	r0, r0
   19874:	lsr	r0, r0, #5
   19878:	bl	12734 <coda_set_option_bypass_special_types@plt>
   1987c:	ldr	r0, [sp, #16]
   19880:	bl	128fc <coda_set_option_perform_conversions@plt>
   19884:	ldr	r5, [pc, #1476]	; 19e50 <main@@Base+0x1444>
   19888:	ldr	r5, [pc, r5]
   1988c:	ldr	r0, [r5]
   19890:	ldr	r6, [pc, #1468]	; 19e54 <main@@Base+0x1448>
   19894:	ldr	r6, [pc, r6]
   19898:	cmp	r0, #0
   1989c:	beq	198b8 <main@@Base+0xeac>
   198a0:	ldr	r1, [pc, #1456]	; 19e58 <main@@Base+0x144c>
   198a4:	add	r1, pc, r1
   198a8:	bl	126b0 <fopen@plt>
   198ac:	cmp	r0, #0
   198b0:	str	r0, [r6]
   198b4:	beq	19c74 <main@@Base+0x1268>
   198b8:	mov	r0, r4
   198bc:	bl	1628c <print_json_data@@Base>
   198c0:	b	19bd8 <main@@Base+0x11cc>
   198c4:	ldr	r0, [pc, #1424]	; 19e5c <main@@Base+0x1450>
   198c8:	mov	r2, #0
   198cc:	mov	r1, #4
   198d0:	ldr	r0, [pc, r0]
   198d4:	str	r2, [r0]
   198d8:	ldr	r0, [pc, #1408]	; 19e60 <main@@Base+0x1454>
   198dc:	ldr	r0, [pc, r0]
   198e0:	str	r1, [r0]
   198e4:	ldr	r0, [pc, #1400]	; 19e64 <main@@Base+0x1458>
   198e8:	ldr	r0, [pc, r0]
   198ec:	str	r2, [r0]
   198f0:	ldr	r0, [pc, #1392]	; 19e68 <main@@Base+0x145c>
   198f4:	ldr	r0, [pc, r0]
   198f8:	str	r2, [r0]
   198fc:	ldr	r0, [pc, #1384]	; 19e6c <main@@Base+0x1460>
   19900:	ldr	r0, [pc, r0]
   19904:	ldr	r0, [r0]
   19908:	ldr	r1, [pc, #1376]	; 19e70 <main@@Base+0x1464>
   1990c:	ldr	r1, [pc, r1]
   19910:	str	r0, [r1]
   19914:	add	r0, r7, #1
   19918:	sub	r8, sl, r0
   1991c:	cmp	r8, #1
   19920:	blt	19b30 <main@@Base+0x1124>
   19924:	add	r9, r9, r0, lsl #2
   19928:	sub	r0, r8, #1
   1992c:	mov	r1, #0
   19930:	mov	r5, #0
   19934:	mov	r4, #0
   19938:	str	r0, [sp, #12]
   1993c:	mov	r0, #1
   19940:	str	r1, [sp, #8]
   19944:	str	r0, [sp, #16]
   19948:	mov	r0, #1
   1994c:	ldr	r6, [pc, #1312]	; 19e74 <main@@Base+0x1468>
   19950:	ldr	r7, [pc, #1312]	; 19e78 <main@@Base+0x146c>
   19954:	str	r0, [sp, #4]
   19958:	add	r6, pc, r6
   1995c:	add	r7, pc, r7
   19960:	b	19990 <main@@Base+0xf84>
   19964:	andeq	r2, r0, fp, lsr r7
   19968:	andeq	r3, r0, ip, lsr #10
   1996c:	andeq	r2, r0, sl, lsl #14
   19970:	andeq	r3, r0, r2, lsr r5
   19974:	ldrdeq	r2, [r0], -r5
   19978:			; <UNDEFINED> instruction: 0x000026bc
   1997c:	mov	r4, #1
   19980:	mov	r0, r5
   19984:	add	r5, r0, #1
   19988:	cmp	r5, r8
   1998c:	bge	19b1c <main@@Base+0x1110>
   19990:	ldr	sl, [r9, r5, lsl #2]
   19994:	mov	r1, r6
   19998:	mov	r0, sl
   1999c:	bl	12674 <strcmp@plt>
   199a0:	cmp	r0, #0
   199a4:	beq	1997c <main@@Base+0xf70>
   199a8:	mov	r0, sl
   199ac:	mov	r1, r7
   199b0:	bl	12674 <strcmp@plt>
   199b4:	cmp	r0, #0
   199b8:	beq	1997c <main@@Base+0xf70>
   199bc:	ldr	r1, [pc, #1208]	; 19e7c <main@@Base+0x1470>
   199c0:	mov	r0, sl
   199c4:	add	r1, pc, r1
   199c8:	bl	12674 <strcmp@plt>
   199cc:	cmp	r0, #0
   199d0:	beq	19ad0 <main@@Base+0x10c4>
   199d4:	ldr	r1, [pc, #1188]	; 19e80 <main@@Base+0x1474>
   199d8:	mov	r0, sl
   199dc:	add	r1, pc, r1
   199e0:	bl	12674 <strcmp@plt>
   199e4:	cmp	r0, #0
   199e8:	beq	19ad0 <main@@Base+0x10c4>
   199ec:	ldr	r1, [pc, #1168]	; 19e84 <main@@Base+0x1478>
   199f0:	mov	r0, sl
   199f4:	add	r1, pc, r1
   199f8:	bl	12674 <strcmp@plt>
   199fc:	cmp	r0, #0
   19a00:	beq	19a1c <main@@Base+0x1010>
   19a04:	ldr	r1, [pc, #1148]	; 19e88 <main@@Base+0x147c>
   19a08:	mov	r0, sl
   19a0c:	add	r1, pc, r1
   19a10:	bl	12674 <strcmp@plt>
   19a14:	cmp	r0, #0
   19a18:	bne	19a38 <main@@Base+0x102c>
   19a1c:	add	r0, r5, #1
   19a20:	cmp	r0, r8
   19a24:	bge	19a38 <main@@Base+0x102c>
   19a28:	ldr	r1, [r9, r0, lsl #2]
   19a2c:	ldrb	r2, [r1]
   19a30:	cmp	r2, #45	; 0x2d
   19a34:	bne	19aec <main@@Base+0x10e0>
   19a38:	ldr	r1, [pc, #1104]	; 19e90 <main@@Base+0x1484>
   19a3c:	mov	r0, sl
   19a40:	add	r1, pc, r1
   19a44:	bl	12674 <strcmp@plt>
   19a48:	cmp	r0, #0
   19a4c:	beq	19a68 <main@@Base+0x105c>
   19a50:	ldr	r1, [pc, #1084]	; 19e94 <main@@Base+0x1488>
   19a54:	mov	r0, sl
   19a58:	add	r1, pc, r1
   19a5c:	bl	12674 <strcmp@plt>
   19a60:	cmp	r0, #0
   19a64:	bne	19a84 <main@@Base+0x1078>
   19a68:	add	r0, r5, #1
   19a6c:	cmp	r0, r8
   19a70:	bge	19a84 <main@@Base+0x1078>
   19a74:	ldr	r1, [r9, r0, lsl #2]
   19a78:	ldrb	r2, [r1]
   19a7c:	cmp	r2, #45	; 0x2d
   19a80:	bne	19b00 <main@@Base+0x10f4>
   19a84:	ldr	r1, [pc, #1040]	; 19e9c <main@@Base+0x1490>
   19a88:	mov	r0, sl
   19a8c:	add	r1, pc, r1
   19a90:	bl	12674 <strcmp@plt>
   19a94:	cmp	r0, #0
   19a98:	beq	19adc <main@@Base+0x10d0>
   19a9c:	ldr	r0, [sp, #12]
   19aa0:	cmp	r5, r0
   19aa4:	bne	19b30 <main@@Base+0x1124>
   19aa8:	ldrb	r0, [sl]
   19aac:	cmp	r0, #45	; 0x2d
   19ab0:	beq	19b30 <main@@Base+0x1124>
   19ab4:	ldr	r0, [pc, #996]	; 19ea0 <main@@Base+0x1494>
   19ab8:	ldr	r0, [pc, r0]
   19abc:	str	sl, [sp, #8]
   19ac0:	str	sl, [r0]
   19ac4:	ldr	r0, [sp, #12]
   19ac8:	b	19984 <main@@Base+0xf78>
   19acc:			; <UNDEFINED> instruction: 0x000026ba
   19ad0:	mov	r0, #0
   19ad4:	str	r0, [sp, #16]
   19ad8:	b	19980 <main@@Base+0xf74>
   19adc:	mov	r0, #0
   19ae0:	str	r0, [sp, #4]
   19ae4:	b	19980 <main@@Base+0xf74>
   19ae8:	andeq	r2, r0, r3, lsr #13
   19aec:	ldr	r2, [pc, #920]	; 19e8c <main@@Base+0x1480>
   19af0:	ldr	r2, [pc, r2]
   19af4:	str	r1, [r2]
   19af8:	b	19984 <main@@Base+0xf78>
   19afc:	muleq	r0, r1, r6
   19b00:	ldr	r2, [pc, #912]	; 19e98 <main@@Base+0x148c>
   19b04:	ldr	r2, [pc, r2]
   19b08:	str	r1, [r2]
   19b0c:	b	19984 <main@@Base+0xf78>
   19b10:	andeq	r2, r0, lr, ror r6
   19b14:	strheq	r3, [r0], -r1
   19b18:	andeq	r4, r1, r8, asr r6
   19b1c:	ldr	r0, [sp, #8]
   19b20:	cmp	r0, #0
   19b24:	ldrbne	r0, [r0]
   19b28:	cmpne	r0, #0
   19b2c:	bne	19b78 <main@@Base+0x116c>
   19b30:	ldr	r0, [pc, #912]	; 19ec8 <main@@Base+0x14bc>
   19b34:	mov	r1, #25
   19b38:	ldr	r0, [pc, r0]
   19b3c:	ldr	r3, [r0]
   19b40:	ldr	r0, [pc, #900]	; 19ecc <main@@Base+0x14c0>
   19b44:	add	r0, pc, r0
   19b48:	mov	r2, #1
   19b4c:	bl	127e8 <fwrite@plt>
   19b50:	bl	19ed0 <main@@Base+0x14c4>
   19b54:	mov	r0, #1
   19b58:	bl	12884 <exit@plt>
   19b5c:	andeq	r4, r1, ip, ror #12
   19b60:	andeq	r4, r1, r0, lsr r6
   19b64:	andeq	r4, r1, r8, asr r6
   19b68:	andeq	r4, r1, r0, asr r6
   19b6c:	andeq	r4, r1, r4, lsr #12
   19b70:	strdeq	r2, [r0], -r9
   19b74:	andeq	r3, r0, lr, lsr #1
   19b78:	bl	128f0 <coda_init@plt>
   19b7c:	cmp	r0, #0
   19b80:	bne	19c1c <main@@Base+0x1210>
   19b84:	ldr	r0, [sp, #4]
   19b88:	clz	r0, r0
   19b8c:	lsr	r0, r0, #5
   19b90:	bl	12734 <coda_set_option_bypass_special_types@plt>
   19b94:	ldr	r0, [sp, #16]
   19b98:	bl	128fc <coda_set_option_perform_conversions@plt>
   19b9c:	ldr	r5, [pc, #768]	; 19ea4 <main@@Base+0x1498>
   19ba0:	ldr	r5, [pc, r5]
   19ba4:	ldr	r0, [r5]
   19ba8:	ldr	r6, [pc, #760]	; 19ea8 <main@@Base+0x149c>
   19bac:	ldr	r6, [pc, r6]
   19bb0:	cmp	r0, #0
   19bb4:	beq	19bd0 <main@@Base+0x11c4>
   19bb8:	ldr	r1, [pc, #748]	; 19eac <main@@Base+0x14a0>
   19bbc:	add	r1, pc, r1
   19bc0:	bl	126b0 <fopen@plt>
   19bc4:	cmp	r0, #0
   19bc8:	str	r0, [r6]
   19bcc:	beq	19c74 <main@@Base+0x1268>
   19bd0:	mov	r0, r4
   19bd4:	bl	17ac0 <print_yaml_data@@Base>
   19bd8:	ldr	r0, [r5]
   19bdc:	cmp	r0, #0
   19be0:	beq	19bec <main@@Base+0x11e0>
   19be4:	ldr	r0, [r6]
   19be8:	bl	12974 <fclose@plt>
   19bec:	bl	12818 <coda_done@plt>
   19bf0:	mov	r0, #0
   19bf4:	sub	sp, fp, #28
   19bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bfc:	bl	19ed0 <main@@Base+0x14c4>
   19c00:	mov	r0, #0
   19c04:	bl	12884 <exit@plt>
   19c08:	bl	1a5a0 <main@@Base+0x1b94>
   19c0c:	mov	r0, #0
   19c10:	bl	12884 <exit@plt>
   19c14:	andeq	r2, r0, r5, ror #11
   19c18:	ldrdeq	r2, [r0], -r0
   19c1c:	ldr	r0, [pc, #204]	; 19cf0 <main@@Base+0x12e4>
   19c20:	ldr	r0, [pc, r0]
   19c24:	ldr	r4, [r0]
   19c28:	bl	12a70 <coda_get_errno@plt>
   19c2c:	ldr	r0, [r0]
   19c30:	bl	12a28 <coda_errno_to_string@plt>
   19c34:	ldr	r1, [pc, #184]	; 19cf4 <main@@Base+0x12e8>
   19c38:	mov	r2, r0
   19c3c:	mov	r0, r4
   19c40:	add	r1, pc, r1
   19c44:	bl	128cc <fprintf@plt>
   19c48:	mov	r0, #1
   19c4c:	bl	12884 <exit@plt>
   19c50:	ldr	r0, [pc, #184]	; 19d10 <main@@Base+0x1304>
   19c54:	mov	r1, #40	; 0x28
   19c58:	ldr	r0, [pc, r0]
   19c5c:	ldr	r3, [r0]
   19c60:	ldr	r0, [pc, #172]	; 19d14 <main@@Base+0x1308>
   19c64:	add	r0, pc, r0
   19c68:	b	19b48 <main@@Base+0x113c>
   19c6c:	ldr	r2, [r4]
   19c70:	b	19c90 <main@@Base+0x1284>
   19c74:	ldr	r2, [r5]
   19c78:	b	19c90 <main@@Base+0x1284>
   19c7c:	andeq	r2, r0, sp, ror #11
   19c80:	ldrdeq	r2, [r0], -r8
   19c84:	ldr	r0, [pc, #564]	; 19ec0 <main@@Base+0x14b4>
   19c88:	ldr	r0, [pc, r0]
   19c8c:	ldr	r2, [r0]
   19c90:	ldr	r0, [pc, #360]	; 19e00 <main@@Base+0x13f4>
   19c94:	ldr	r0, [pc, r0]
   19c98:	ldr	r0, [r0]
   19c9c:	ldr	r1, [pc, #352]	; 19e04 <main@@Base+0x13f8>
   19ca0:	add	r1, pc, r1
   19ca4:	b	19c44 <main@@Base+0x1238>
   19ca8:	andeq	r2, r0, fp, lsr #11
   19cac:	andeq	r2, r0, r7, ror r5
   19cb0:	andeq	r4, r1, r4, lsr r4
   19cb4:	andeq	r2, r0, r5, asr #8
   19cb8:	strdeq	r2, [r0], -sl
   19cbc:	strdeq	r4, [r1], -ip
   19cc0:	andeq	r4, r1, r0, lsr #8
   19cc4:	andeq	r4, r1, ip, lsl #8
   19cc8:	andeq	r4, r1, r4, lsr #7
   19ccc:			; <UNDEFINED> instruction: 0x000143b4
   19cd0:	andeq	r4, r1, r0, ror r3
   19cd4:	andeq	r4, r1, r8, ror r3
   19cd8:	andeq	r4, r1, ip, asr r3
   19cdc:	andeq	r4, r1, r4, ror r3
   19ce0:	andeq	r4, r1, r0, asr r3
   19ce4:	andeq	r4, r1, r0, ror #6
   19ce8:	andeq	r2, r0, sl, lsr r3
   19cec:	andeq	r2, r0, r6, asr #8
   19cf0:	muleq	r1, r0, r5
   19cf4:	andeq	r1, r0, r0, lsr #10
   19cf8:	andeq	r2, r0, sp, ror #5
   19cfc:	andeq	r2, r0, r2, lsr fp
   19d00:			; <UNDEFINED> instruction: 0x000022bc
   19d04:	andeq	r2, r0, r7, lsr #5
   19d08:	andeq	r4, r1, r4, lsl #2
   19d0c:	andeq	r2, r0, lr, lsl r1
   19d10:	andeq	r3, r1, r8, asr r5
   19d14:	andeq	r1, r0, r0, lsl #11
   19d18:	andeq	r2, r0, r5, lsr #5
   19d1c:	andeq	r2, r0, r8, ror #7
   19d20:	andeq	r4, r1, ip, asr r1
   19d24:	andeq	r2, r0, r6, ror #2
   19d28:	andeq	r2, r0, r8, ror r2
   19d2c:	strdeq	r2, [r0], -r4
   19d30:	andeq	r4, r1, r8, lsr #2
   19d34:	andeq	r2, r0, sl, asr #2
   19d38:	andeq	r2, r0, r9, lsl r4
   19d3c:	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
   19d40:	strdeq	r4, [r1], -ip
   19d44:	andeq	r2, r0, r0, asr #8
   19d48:	andeq	r4, r1, r4, asr #1
   19d4c:	andeq	r2, r0, r6, lsl #21
   19d50:	andeq	r4, r1, r8, ror r1
   19d54:	strheq	r4, [r1], -r8
   19d58:	andeq	r4, r1, r8, asr r0
   19d5c:	andeq	r4, r1, r8, rrx
   19d60:	andeq	r4, r1, ip, lsr #32
   19d64:	andeq	r4, r1, ip, lsr r0
   19d68:	andeq	r1, r0, r2, lsr r9
   19d6c:	andeq	r4, r1, r4
   19d70:	andeq	r4, r1, ip
   19d74:	andeq	r4, r1, ip, lsl r0
   19d78:	andeq	r4, r1, ip, lsr #32
   19d7c:	andeq	r4, r1, r4, lsr #32
   19d80:	ldrdeq	r3, [r1], -r4
   19d84:	strdeq	r3, [r1], -ip
   19d88:	ldrdeq	r3, [r1], -r0
   19d8c:			; <UNDEFINED> instruction: 0x00001fbd
   19d90:	strdeq	r2, [r0], -r6
   19d94:	andeq	r1, r0, r4, lsl #31
   19d98:	andeq	r1, r0, pc, ror #30
   19d9c:	andeq	r3, r1, r4, asr #26
   19da0:	andeq	r1, r0, r3, ror pc
   19da4:	andeq	r2, r0, r5, lsl r3
   19da8:	andeq	r3, r1, r0, lsl #27
   19dac:	andeq	r1, r0, r6, asr #30
   19db0:	andeq	r2, r0, lr, lsr r3
   19db4:	andeq	r3, r1, ip, lsl #27
   19db8:	andeq	r1, r0, r9, lsl pc
   19dbc:	andeq	r1, r0, r4, lsl #30
   19dc0:	andeq	r3, r1, ip, ror #25
   19dc4:	ldrdeq	r1, [r0], -r9
   19dc8:	andeq	r2, r0, r5, lsr #6
   19dcc:	andeq	r3, r1, r4, ror #26
   19dd0:	andeq	r1, r0, ip, lsr #29
   19dd4:	muleq	r0, r7, lr
   19dd8:	strdeq	r3, [r1], -r8
   19ddc:	andeq	r1, r0, r5, asr #28
   19de0:	muleq	r0, r8, r3
   19de4:	andeq	r3, r1, r0, lsl sp
   19de8:	muleq	r0, r6, r6
   19dec:	andeq	r3, r1, r8, lsl #27
   19df0:	andeq	r3, r1, ip, asr #25
   19df4:	andeq	r3, r1, ip, ror #24
   19df8:	andeq	r3, r1, r8, ror ip
   19dfc:	strdeq	r1, [r0], -r2
   19e00:	andeq	r3, r1, ip, lsl r5
   19e04:	andeq	r1, r0, r0, lsr #11
   19e08:	andeq	r3, r1, ip, ror fp
   19e0c:	muleq	r1, r0, fp
   19e10:	andeq	r3, r1, r4, asr fp
   19e14:	andeq	r3, r1, ip, ror fp
   19e18:	andeq	r3, r1, r4, ror fp
   19e1c:	andeq	r3, r1, r8, asr #22
   19e20:			; <UNDEFINED> instruction: 0x00001bb2
   19e24:	andeq	r2, r0, r7, lsr #5
   19e28:	andeq	r1, r0, r9, asr #21
   19e2c:	andeq	r2, r0, lr, lsl #6
   19e30:	ldrdeq	r1, [r0], -sp
   19e34:	andeq	r1, r0, r8, asr #21
   19e38:	andeq	r3, r1, ip, ror #18
   19e3c:	andeq	r1, r0, r5, ror #21
   19e40:	ldrdeq	r1, [r0], -r0
   19e44:	muleq	r1, r0, r9
   19e48:			; <UNDEFINED> instruction: 0x000022ba
   19e4c:	andeq	r3, r1, ip, lsr #19
   19e50:	andeq	r3, r1, r4, lsl r9
   19e54:	andeq	r3, r1, r0, lsr #18
   19e58:	muleq	r0, sl, r9
   19e5c:	ldrdeq	r3, [r1], -ip
   19e60:	strdeq	r3, [r1], -r0
   19e64:			; <UNDEFINED> instruction: 0x000138b4
   19e68:	ldrdeq	r3, [r1], -ip
   19e6c:	ldrdeq	r3, [r1], -r4
   19e70:	andeq	r3, r1, r8, lsr #17
   19e74:	andeq	r1, r0, r2, lsl r9
   19e78:	andeq	r2, r0, r7
   19e7c:	andeq	r1, r0, r1, lsl r8
   19e80:	andeq	r2, r0, r6, asr r0
   19e84:	andeq	r1, r0, r5, lsr #16
   19e88:	andeq	r1, r0, r0, lsl r8
   19e8c:	andeq	r3, r1, ip, lsr #13
   19e90:	andeq	r1, r0, sp, lsr #16
   19e94:	andeq	r1, r0, r8, lsl r8
   19e98:	andeq	r3, r1, ip, asr #13
   19e9c:	andeq	r2, r0, r2
   19ea0:	strdeq	r3, [r1], -r4
   19ea4:	strdeq	r3, [r1], -ip
   19ea8:	andeq	r3, r1, r8, lsl #12
   19eac:	andeq	r1, r0, r2, lsl #13
   19eb0:	andeq	r3, r1, r4, lsl ip
   19eb4:	andeq	r3, r1, ip, asr #23
   19eb8:	ldrdeq	r3, [r1], -r8
   19ebc:	andeq	r1, r0, r2, asr ip
   19ec0:	andeq	r3, r1, r4, lsl r5
   19ec4:	muleq	r1, r0, fp
   19ec8:	andeq	r3, r1, r8, ror r6
   19ecc:	andeq	r1, r0, pc, asr r6
   19ed0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ed4:	add	fp, sp, #28
   19ed8:	sub	sp, sp, #4
   19edc:	ldr	r0, [pc, #1360]	; 1a434 <main@@Base+0x1a28>
   19ee0:	add	r0, pc, r0
   19ee4:	bl	12824 <puts@plt>
   19ee8:	ldr	r0, [pc, #1352]	; 1a438 <main@@Base+0x1a2c>
   19eec:	add	r0, pc, r0
   19ef0:	bl	12824 <puts@plt>
   19ef4:	ldr	r0, [pc, #1344]	; 1a43c <main@@Base+0x1a30>
   19ef8:	add	r0, pc, r0
   19efc:	bl	12824 <puts@plt>
   19f00:	ldr	r8, [pc, #1336]	; 1a440 <main@@Base+0x1a34>
   19f04:	add	r8, pc, r8
   19f08:	mov	r0, r8
   19f0c:	bl	12824 <puts@plt>
   19f10:	ldr	r0, [pc, #1324]	; 1a444 <main@@Base+0x1a38>
   19f14:	add	r0, pc, r0
   19f18:	bl	12824 <puts@plt>
   19f1c:	ldr	r0, [pc, #1316]	; 1a448 <main@@Base+0x1a3c>
   19f20:	add	r0, pc, r0
   19f24:	bl	12824 <puts@plt>
   19f28:	ldr	r5, [pc, #1308]	; 1a44c <main@@Base+0x1a40>
   19f2c:	add	r5, pc, r5
   19f30:	mov	r0, r5
   19f34:	bl	12824 <puts@plt>
   19f38:	ldr	r6, [pc, #1296]	; 1a450 <main@@Base+0x1a44>
   19f3c:	add	r6, pc, r6
   19f40:	mov	r0, r6
   19f44:	bl	12824 <puts@plt>
   19f48:	ldr	r7, [pc, #1284]	; 1a454 <main@@Base+0x1a48>
   19f4c:	add	r7, pc, r7
   19f50:	mov	r0, r7
   19f54:	bl	12824 <puts@plt>
   19f58:	ldr	r4, [pc, #1272]	; 1a458 <main@@Base+0x1a4c>
   19f5c:	add	r4, pc, r4
   19f60:	mov	r0, r4
   19f64:	bl	12824 <puts@plt>
   19f68:	ldr	r0, [pc, #1260]	; 1a45c <main@@Base+0x1a50>
   19f6c:	add	r0, pc, r0
   19f70:	bl	12824 <puts@plt>
   19f74:	ldr	r0, [pc, #1252]	; 1a460 <main@@Base+0x1a54>
   19f78:	add	r0, pc, r0
   19f7c:	bl	12824 <puts@plt>
   19f80:	ldr	r0, [pc, #1244]	; 1a464 <main@@Base+0x1a58>
   19f84:	add	r0, pc, r0
   19f88:	bl	12824 <puts@plt>
   19f8c:	ldr	r0, [pc, #1236]	; 1a468 <main@@Base+0x1a5c>
   19f90:	add	r0, pc, r0
   19f94:	bl	12824 <puts@plt>
   19f98:	ldr	r0, [pc, #1228]	; 1a46c <main@@Base+0x1a60>
   19f9c:	add	r0, pc, r0
   19fa0:	bl	12824 <puts@plt>
   19fa4:	ldr	r0, [pc, #1220]	; 1a470 <main@@Base+0x1a64>
   19fa8:	add	r0, pc, r0
   19fac:	bl	12824 <puts@plt>
   19fb0:	ldr	r0, [pc, #1212]	; 1a474 <main@@Base+0x1a68>
   19fb4:	add	r0, pc, r0
   19fb8:	bl	12824 <puts@plt>
   19fbc:	ldr	r0, [pc, #1204]	; 1a478 <main@@Base+0x1a6c>
   19fc0:	add	r0, pc, r0
   19fc4:	bl	12824 <puts@plt>
   19fc8:	ldr	r0, [pc, #1196]	; 1a47c <main@@Base+0x1a70>
   19fcc:	add	r0, pc, r0
   19fd0:	bl	12824 <puts@plt>
   19fd4:	ldr	sl, [pc, #1188]	; 1a480 <main@@Base+0x1a74>
   19fd8:	add	sl, pc, sl
   19fdc:	mov	r0, sl
   19fe0:	bl	12824 <puts@plt>
   19fe4:	ldr	r0, [pc, #1176]	; 1a484 <main@@Base+0x1a78>
   19fe8:	add	r0, pc, r0
   19fec:	bl	12824 <puts@plt>
   19ff0:	ldr	r0, [pc, #1168]	; 1a488 <main@@Base+0x1a7c>
   19ff4:	add	r0, pc, r0
   19ff8:	bl	12824 <puts@plt>
   19ffc:	ldr	r0, [pc, #1160]	; 1a48c <main@@Base+0x1a80>
   1a000:	add	r0, pc, r0
   1a004:	bl	12824 <puts@plt>
   1a008:	mov	r0, #10
   1a00c:	bl	1292c <putchar@plt>
   1a010:	ldr	r0, [pc, #1144]	; 1a490 <main@@Base+0x1a84>
   1a014:	add	r0, pc, r0
   1a018:	bl	12824 <puts@plt>
   1a01c:	ldr	r0, [pc, #1136]	; 1a494 <main@@Base+0x1a88>
   1a020:	add	r0, pc, r0
   1a024:	bl	12824 <puts@plt>
   1a028:	mov	r0, r8
   1a02c:	bl	12824 <puts@plt>
   1a030:	mov	r0, r5
   1a034:	bl	12824 <puts@plt>
   1a038:	mov	r0, r6
   1a03c:	bl	12824 <puts@plt>
   1a040:	mov	r0, r7
   1a044:	bl	12824 <puts@plt>
   1a048:	mov	r0, r4
   1a04c:	bl	12824 <puts@plt>
   1a050:	ldr	r0, [pc, #1088]	; 1a498 <main@@Base+0x1a8c>
   1a054:	add	r0, pc, r0
   1a058:	bl	12824 <puts@plt>
   1a05c:	ldr	r0, [pc, #1080]	; 1a49c <main@@Base+0x1a90>
   1a060:	add	r0, pc, r0
   1a064:	bl	12824 <puts@plt>
   1a068:	ldr	r0, [pc, #1072]	; 1a4a0 <main@@Base+0x1a94>
   1a06c:	add	r0, pc, r0
   1a070:	bl	12824 <puts@plt>
   1a074:	ldr	r0, [pc, #1064]	; 1a4a4 <main@@Base+0x1a98>
   1a078:	add	r0, pc, r0
   1a07c:	bl	12824 <puts@plt>
   1a080:	ldr	r6, [pc, #1056]	; 1a4a8 <main@@Base+0x1a9c>
   1a084:	add	r6, pc, r6
   1a088:	mov	r0, r6
   1a08c:	bl	12824 <puts@plt>
   1a090:	ldr	r0, [pc, #1044]	; 1a4ac <main@@Base+0x1aa0>
   1a094:	add	r0, pc, r0
   1a098:	bl	12824 <puts@plt>
   1a09c:	ldr	r0, [pc, #1036]	; 1a4b0 <main@@Base+0x1aa4>
   1a0a0:	add	r0, pc, r0
   1a0a4:	bl	12824 <puts@plt>
   1a0a8:	ldr	r0, [pc, #1028]	; 1a4b4 <main@@Base+0x1aa8>
   1a0ac:	add	r0, pc, r0
   1a0b0:	bl	12824 <puts@plt>
   1a0b4:	ldr	r0, [pc, #1020]	; 1a4b8 <main@@Base+0x1aac>
   1a0b8:	add	r0, pc, r0
   1a0bc:	bl	12824 <puts@plt>
   1a0c0:	ldr	r0, [pc, #1012]	; 1a4bc <main@@Base+0x1ab0>
   1a0c4:	add	r0, pc, r0
   1a0c8:	bl	12824 <puts@plt>
   1a0cc:	ldr	r0, [pc, #1004]	; 1a4c0 <main@@Base+0x1ab4>
   1a0d0:	add	r0, pc, r0
   1a0d4:	bl	12824 <puts@plt>
   1a0d8:	ldr	r0, [pc, #996]	; 1a4c4 <main@@Base+0x1ab8>
   1a0dc:	add	r0, pc, r0
   1a0e0:	bl	12824 <puts@plt>
   1a0e4:	mov	r0, sl
   1a0e8:	bl	12824 <puts@plt>
   1a0ec:	ldr	r0, [pc, #980]	; 1a4c8 <main@@Base+0x1abc>
   1a0f0:	add	r0, pc, r0
   1a0f4:	mov	r9, r0
   1a0f8:	bl	12824 <puts@plt>
   1a0fc:	ldr	r0, [pc, #968]	; 1a4cc <main@@Base+0x1ac0>
   1a100:	add	r0, pc, r0
   1a104:	mov	r8, r0
   1a108:	bl	12824 <puts@plt>
   1a10c:	ldr	r0, [pc, #956]	; 1a4d0 <main@@Base+0x1ac4>
   1a110:	add	r0, pc, r0
   1a114:	mov	r7, r0
   1a118:	bl	12824 <puts@plt>
   1a11c:	mov	r0, #10
   1a120:	bl	1292c <putchar@plt>
   1a124:	ldr	r0, [pc, #936]	; 1a4d4 <main@@Base+0x1ac8>
   1a128:	add	r0, pc, r0
   1a12c:	bl	12824 <puts@plt>
   1a130:	ldr	r0, [pc, #928]	; 1a4d8 <main@@Base+0x1acc>
   1a134:	add	r0, pc, r0
   1a138:	bl	12824 <puts@plt>
   1a13c:	ldr	r0, [pc, #920]	; 1a4dc <main@@Base+0x1ad0>
   1a140:	add	r0, pc, r0
   1a144:	bl	12824 <puts@plt>
   1a148:	ldr	r4, [pc, #912]	; 1a4e0 <main@@Base+0x1ad4>
   1a14c:	add	r4, pc, r4
   1a150:	mov	r0, r4
   1a154:	bl	12824 <puts@plt>
   1a158:	ldr	r5, [pc, #900]	; 1a4e4 <main@@Base+0x1ad8>
   1a15c:	add	r5, pc, r5
   1a160:	mov	r0, r5
   1a164:	bl	12824 <puts@plt>
   1a168:	ldr	r0, [pc, #888]	; 1a4e8 <main@@Base+0x1adc>
   1a16c:	add	r0, pc, r0
   1a170:	bl	12824 <puts@plt>
   1a174:	ldr	r0, [pc, #880]	; 1a4ec <main@@Base+0x1ae0>
   1a178:	add	r0, pc, r0
   1a17c:	bl	12824 <puts@plt>
   1a180:	ldr	r0, [pc, #872]	; 1a4f0 <main@@Base+0x1ae4>
   1a184:	add	r0, pc, r0
   1a188:	bl	12824 <puts@plt>
   1a18c:	mov	r0, r6
   1a190:	bl	12824 <puts@plt>
   1a194:	ldr	r0, [pc, #856]	; 1a4f4 <main@@Base+0x1ae8>
   1a198:	add	r0, pc, r0
   1a19c:	bl	12824 <puts@plt>
   1a1a0:	ldr	r0, [pc, #848]	; 1a4f8 <main@@Base+0x1aec>
   1a1a4:	add	r0, pc, r0
   1a1a8:	bl	12824 <puts@plt>
   1a1ac:	ldr	r0, [pc, #840]	; 1a4fc <main@@Base+0x1af0>
   1a1b0:	add	r0, pc, r0
   1a1b4:	bl	12824 <puts@plt>
   1a1b8:	ldr	r6, [pc, #832]	; 1a500 <main@@Base+0x1af4>
   1a1bc:	add	r6, pc, r6
   1a1c0:	mov	r0, r6
   1a1c4:	bl	12824 <puts@plt>
   1a1c8:	mov	r0, sl
   1a1cc:	bl	12824 <puts@plt>
   1a1d0:	mov	r0, r9
   1a1d4:	bl	12824 <puts@plt>
   1a1d8:	mov	r0, r8
   1a1dc:	bl	12824 <puts@plt>
   1a1e0:	mov	r0, r7
   1a1e4:	bl	12824 <puts@plt>
   1a1e8:	mov	r0, #10
   1a1ec:	bl	1292c <putchar@plt>
   1a1f0:	ldr	r0, [pc, #780]	; 1a504 <main@@Base+0x1af8>
   1a1f4:	add	r0, pc, r0
   1a1f8:	bl	12824 <puts@plt>
   1a1fc:	ldr	r0, [pc, #772]	; 1a508 <main@@Base+0x1afc>
   1a200:	add	r0, pc, r0
   1a204:	bl	12824 <puts@plt>
   1a208:	ldr	r0, [pc, #764]	; 1a50c <main@@Base+0x1b00>
   1a20c:	add	r0, pc, r0
   1a210:	bl	12824 <puts@plt>
   1a214:	mov	r0, r4
   1a218:	bl	12824 <puts@plt>
   1a21c:	mov	r0, r5
   1a220:	bl	12824 <puts@plt>
   1a224:	ldr	r0, [pc, #740]	; 1a510 <main@@Base+0x1b04>
   1a228:	add	r0, pc, r0
   1a22c:	bl	12824 <puts@plt>
   1a230:	ldr	r0, [pc, #732]	; 1a514 <main@@Base+0x1b08>
   1a234:	add	r0, pc, r0
   1a238:	bl	12824 <puts@plt>
   1a23c:	ldr	r0, [pc, #724]	; 1a518 <main@@Base+0x1b0c>
   1a240:	add	r0, pc, r0
   1a244:	bl	12824 <puts@plt>
   1a248:	ldr	r0, [pc, #716]	; 1a51c <main@@Base+0x1b10>
   1a24c:	add	r0, pc, r0
   1a250:	bl	12824 <puts@plt>
   1a254:	ldr	r0, [pc, #708]	; 1a520 <main@@Base+0x1b14>
   1a258:	add	r0, pc, r0
   1a25c:	bl	12824 <puts@plt>
   1a260:	ldr	r0, [pc, #700]	; 1a524 <main@@Base+0x1b18>
   1a264:	add	r0, pc, r0
   1a268:	bl	12824 <puts@plt>
   1a26c:	ldr	r0, [pc, #692]	; 1a528 <main@@Base+0x1b1c>
   1a270:	add	r0, pc, r0
   1a274:	bl	12824 <puts@plt>
   1a278:	ldr	r0, [pc, #684]	; 1a52c <main@@Base+0x1b20>
   1a27c:	add	r0, pc, r0
   1a280:	bl	12824 <puts@plt>
   1a284:	mov	r0, r6
   1a288:	bl	12824 <puts@plt>
   1a28c:	mov	r0, sl
   1a290:	bl	12824 <puts@plt>
   1a294:	mov	r0, r9
   1a298:	bl	12824 <puts@plt>
   1a29c:	mov	r0, r8
   1a2a0:	bl	12824 <puts@plt>
   1a2a4:	mov	r0, r7
   1a2a8:	bl	12824 <puts@plt>
   1a2ac:	mov	r0, #10
   1a2b0:	bl	1292c <putchar@plt>
   1a2b4:	ldr	r0, [pc, #628]	; 1a530 <main@@Base+0x1b24>
   1a2b8:	add	r0, pc, r0
   1a2bc:	bl	12824 <puts@plt>
   1a2c0:	ldr	r0, [pc, #620]	; 1a534 <main@@Base+0x1b28>
   1a2c4:	add	r0, pc, r0
   1a2c8:	bl	12824 <puts@plt>
   1a2cc:	ldr	r0, [pc, #612]	; 1a538 <main@@Base+0x1b2c>
   1a2d0:	add	r0, pc, r0
   1a2d4:	bl	12824 <puts@plt>
   1a2d8:	ldr	r0, [pc, #604]	; 1a53c <main@@Base+0x1b30>
   1a2dc:	add	r0, pc, r0
   1a2e0:	bl	12824 <puts@plt>
   1a2e4:	ldr	r0, [pc, #596]	; 1a540 <main@@Base+0x1b34>
   1a2e8:	add	r0, pc, r0
   1a2ec:	bl	12824 <puts@plt>
   1a2f0:	ldr	r0, [pc, #588]	; 1a544 <main@@Base+0x1b38>
   1a2f4:	add	r0, pc, r0
   1a2f8:	bl	12824 <puts@plt>
   1a2fc:	ldr	r0, [pc, #580]	; 1a548 <main@@Base+0x1b3c>
   1a300:	add	r0, pc, r0
   1a304:	bl	12824 <puts@plt>
   1a308:	ldr	r0, [pc, #572]	; 1a54c <main@@Base+0x1b40>
   1a30c:	add	r0, pc, r0
   1a310:	bl	12824 <puts@plt>
   1a314:	ldr	r0, [pc, #564]	; 1a550 <main@@Base+0x1b44>
   1a318:	add	r0, pc, r0
   1a31c:	bl	12824 <puts@plt>
   1a320:	ldr	r0, [pc, #556]	; 1a554 <main@@Base+0x1b48>
   1a324:	add	r0, pc, r0
   1a328:	bl	12824 <puts@plt>
   1a32c:	ldr	r0, [pc, #548]	; 1a558 <main@@Base+0x1b4c>
   1a330:	add	r0, pc, r0
   1a334:	bl	12824 <puts@plt>
   1a338:	mov	r0, r6
   1a33c:	bl	12824 <puts@plt>
   1a340:	ldr	r0, [pc, #532]	; 1a55c <main@@Base+0x1b50>
   1a344:	add	r0, pc, r0
   1a348:	bl	12824 <puts@plt>
   1a34c:	ldr	r0, [pc, #524]	; 1a560 <main@@Base+0x1b54>
   1a350:	add	r0, pc, r0
   1a354:	bl	12824 <puts@plt>
   1a358:	ldr	r0, [pc, #516]	; 1a564 <main@@Base+0x1b58>
   1a35c:	add	r0, pc, r0
   1a360:	bl	12824 <puts@plt>
   1a364:	ldr	r0, [pc, #508]	; 1a568 <main@@Base+0x1b5c>
   1a368:	add	r0, pc, r0
   1a36c:	bl	12824 <puts@plt>
   1a370:	ldr	r0, [pc, #500]	; 1a56c <main@@Base+0x1b60>
   1a374:	add	r0, pc, r0
   1a378:	bl	12824 <puts@plt>
   1a37c:	ldr	r0, [pc, #492]	; 1a570 <main@@Base+0x1b64>
   1a380:	add	r0, pc, r0
   1a384:	bl	12824 <puts@plt>
   1a388:	mov	r0, #10
   1a38c:	bl	1292c <putchar@plt>
   1a390:	ldr	r0, [pc, #476]	; 1a574 <main@@Base+0x1b68>
   1a394:	add	r0, pc, r0
   1a398:	bl	12824 <puts@plt>
   1a39c:	ldr	r0, [pc, #468]	; 1a578 <main@@Base+0x1b6c>
   1a3a0:	add	r0, pc, r0
   1a3a4:	bl	12824 <puts@plt>
   1a3a8:	mov	r0, #10
   1a3ac:	bl	1292c <putchar@plt>
   1a3b0:	ldr	r0, [pc, #452]	; 1a57c <main@@Base+0x1b70>
   1a3b4:	add	r0, pc, r0
   1a3b8:	bl	12824 <puts@plt>
   1a3bc:	ldr	r0, [pc, #444]	; 1a580 <main@@Base+0x1b74>
   1a3c0:	add	r0, pc, r0
   1a3c4:	bl	12824 <puts@plt>
   1a3c8:	mov	r0, #10
   1a3cc:	bl	1292c <putchar@plt>
   1a3d0:	ldr	r0, [pc, #428]	; 1a584 <main@@Base+0x1b78>
   1a3d4:	add	r0, pc, r0
   1a3d8:	bl	12824 <puts@plt>
   1a3dc:	ldr	r0, [pc, #420]	; 1a588 <main@@Base+0x1b7c>
   1a3e0:	add	r0, pc, r0
   1a3e4:	bl	12824 <puts@plt>
   1a3e8:	ldr	r0, [pc, #412]	; 1a58c <main@@Base+0x1b80>
   1a3ec:	add	r0, pc, r0
   1a3f0:	bl	12824 <puts@plt>
   1a3f4:	ldr	r0, [pc, #404]	; 1a590 <main@@Base+0x1b84>
   1a3f8:	add	r0, pc, r0
   1a3fc:	bl	12824 <puts@plt>
   1a400:	ldr	r0, [pc, #396]	; 1a594 <main@@Base+0x1b88>
   1a404:	add	r0, pc, r0
   1a408:	bl	12824 <puts@plt>
   1a40c:	ldr	r0, [pc, #388]	; 1a598 <main@@Base+0x1b8c>
   1a410:	add	r0, pc, r0
   1a414:	bl	12824 <puts@plt>
   1a418:	ldr	r0, [pc, #380]	; 1a59c <main@@Base+0x1b90>
   1a41c:	add	r0, pc, r0
   1a420:	bl	12824 <puts@plt>
   1a424:	mov	r0, #10
   1a428:	sub	sp, fp, #28
   1a42c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a430:	b	1292c <putchar@plt>
   1a434:	andeq	r1, r0, sp, lsr #7
   1a438:	andeq	r1, r0, r8, lsr #7
   1a43c:	andeq	r1, r0, r2, ror #7
   1a440:	andeq	r1, r0, ip, lsr #12
   1a444:	strdeq	r1, [r0], -r2
   1a448:	andeq	r1, r0, r1, lsl #8
   1a44c:	strdeq	r1, [r0], -r6
   1a450:	andeq	r1, r0, ip, lsl #22
   1a454:	strdeq	r1, [r0], -sl
   1a458:	andeq	r1, r0, r9, lsl r6
   1a45c:	andeq	r1, r0, ip, ror #7
   1a460:	strdeq	r1, [r0], -r7
   1a464:	andeq	r1, r0, r4, lsl r4
   1a468:	andeq	r1, r0, pc, lsl r4
   1a46c:	andeq	r1, r0, sp, lsr r4
   1a470:	andeq	r1, r0, fp, asr #8
   1a474:	andeq	r1, r0, r0, ror r4
   1a478:	andeq	r1, r0, sp, ror r4
   1a47c:			; <UNDEFINED> instruction: 0x000014b7
   1a480:	andeq	r1, r0, sl, lsr #21
   1a484:			; <UNDEFINED> instruction: 0x00001ab9
   1a488:	strdeq	r1, [r0], -sp
   1a48c:	andeq	r1, r0, pc, lsr fp
   1a490:	muleq	r0, r8, r4
   1a494:	ldrdeq	r1, [r0], -r4
   1a498:	andeq	r1, r0, r9, ror #10
   1a49c:	andeq	r1, r0, r5, ror r5
   1a4a0:	andeq	r1, r0, sl, lsr #11
   1a4a4:			; <UNDEFINED> instruction: 0x000015b6
   1a4a8:	andeq	r1, r0, pc, asr ip
   1a4ac:	andeq	r1, r0, r3, ror ip
   1a4b0:	ldrdeq	r1, [r0], -r9
   1a4b4:	andeq	r1, r0, sp, ror #11
   1a4b8:	andeq	r1, r0, ip, lsr #12
   1a4bc:	andeq	r1, r0, r8, asr r6
   1a4c0:	muleq	r0, r8, r6
   1a4c4:	andeq	r1, r0, sp, lsr #13
   1a4c8:			; <UNDEFINED> instruction: 0x000019b1
   1a4cc:	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   1a4d0:	andeq	r1, r0, pc, lsr #20
   1a4d4:			; <UNDEFINED> instruction: 0x000016b0
   1a4d8:	andeq	r1, r0, sl, ror #13
   1a4dc:	andeq	r1, r0, sl, lsl r7
   1a4e0:	andeq	r1, r0, r7, lsl #16
   1a4e4:	andeq	r1, r0, r4, lsl r8
   1a4e8:	andeq	r1, r0, r4, lsl #14
   1a4ec:	andeq	r1, r0, sl, lsr #17
   1a4f0:	andeq	r1, r0, r4, asr #17
   1a4f4:	andeq	r1, r0, pc, ror #22
   1a4f8:	muleq	r0, r6, fp
   1a4fc:	andeq	r1, r0, r8, lsr #23
   1a500:	andeq	r1, r0, r4, ror #23
   1a504:	andeq	r1, r0, r7, asr #13
   1a508:	andeq	r1, r0, r1, lsl #14
   1a50c:	andeq	r1, r0, r1, lsr r7
   1a510:	andeq	r1, r0, pc, lsl #15
   1a514:	andeq	r1, r0, pc, asr #15
   1a518:	andeq	r1, r0, r2, ror #15
   1a51c:	strdeq	r1, [r0], -ip
   1a520:	andeq	r1, r0, fp, lsl #21
   1a524:	andeq	r1, r0, r3, lsr #21
   1a528:	andeq	r1, r0, sl, asr #21
   1a52c:	ldrdeq	r1, [r0], -ip
   1a530:	andeq	r1, r0, r5, lsr #17
   1a534:	andeq	r1, r0, r1, ror #17
   1a538:	andeq	r1, r0, pc, lsl r9
   1a53c:	andeq	r1, r0, sp, asr r9
   1a540:	andeq	r1, r0, pc, ror r9
   1a544:	andeq	r1, r0, sl, lsl #19
   1a548:	andeq	r1, r0, lr, lsr #19
   1a54c:	ldrdeq	r1, [r0], -r7
   1a550:	andeq	r1, r0, pc, ror #19
   1a554:	andeq	r1, r0, r6, lsl sl
   1a558:	andeq	r1, r0, r8, lsr #20
   1a55c:	andeq	r1, r0, r9, lsr #21
   1a560:			; <UNDEFINED> instruction: 0x00001abd
   1a564:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   1a568:	andeq	r1, r0, lr, lsr fp
   1a56c:	andeq	r1, r0, r1, ror fp
   1a570:			; <UNDEFINED> instruction: 0x00001bb2
   1a574:	ldrdeq	r1, [r0], -r3
   1a578:	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   1a57c:	andeq	r1, r0, r9, ror #23
   1a580:	strdeq	r1, [r0], -r8
   1a584:	andeq	r1, r0, r6, lsl ip
   1a588:	andeq	r1, r0, r8, asr ip
   1a58c:	muleq	r0, r5, ip
   1a590:			; <UNDEFINED> instruction: 0x00001cb4
   1a594:	strdeq	r1, [r0], -r4
   1a598:	andeq	r1, r0, lr, lsr #26
   1a59c:	andeq	r1, r0, r1, ror #26
   1a5a0:	push	{fp, lr}
   1a5a4:	mov	fp, sp
   1a5a8:	bl	12a64 <coda_get_libcoda_version@plt>
   1a5ac:	mov	r1, r0
   1a5b0:	ldr	r0, [pc, #28]	; 1a5d4 <main@@Base+0x1bc8>
   1a5b4:	add	r0, pc, r0
   1a5b8:	bl	12698 <printf@plt>
   1a5bc:	ldr	r0, [pc, #20]	; 1a5d8 <main@@Base+0x1bcc>
   1a5c0:	add	r0, pc, r0
   1a5c4:	bl	12824 <puts@plt>
   1a5c8:	mov	r0, #10
   1a5cc:	pop	{fp, lr}
   1a5d0:	b	1292c <putchar@plt>
   1a5d4:	andeq	r0, r0, r9, lsl #24
   1a5d8:	strdeq	r1, [r0], -sp
   1a5dc:	cmp	r3, #0
   1a5e0:	cmpeq	r2, #0
   1a5e4:	bne	1a608 <main@@Base+0x1bfc>
   1a5e8:	cmp	r1, #0
   1a5ec:	movlt	r1, #-2147483648	; 0x80000000
   1a5f0:	movlt	r0, #0
   1a5f4:	blt	1a604 <main@@Base+0x1bf8>
   1a5f8:	cmpeq	r0, #0
   1a5fc:	mvnne	r1, #-2147483648	; 0x80000000
   1a600:	mvnne	r0, #0
   1a604:	b	1a6b0 <main@@Base+0x1ca4>
   1a608:	sub	sp, sp, #8
   1a60c:	push	{sp, lr}
   1a610:	cmp	r1, #0
   1a614:	blt	1a634 <main@@Base+0x1c28>
   1a618:	cmp	r3, #0
   1a61c:	blt	1a668 <main@@Base+0x1c5c>
   1a620:	bl	1a6c0 <main@@Base+0x1cb4>
   1a624:	ldr	lr, [sp, #4]
   1a628:	add	sp, sp, #8
   1a62c:	pop	{r2, r3}
   1a630:	bx	lr
   1a634:	rsbs	r0, r0, #0
   1a638:	sbc	r1, r1, r1, lsl #1
   1a63c:	cmp	r3, #0
   1a640:	blt	1a68c <main@@Base+0x1c80>
   1a644:	bl	1a6c0 <main@@Base+0x1cb4>
   1a648:	ldr	lr, [sp, #4]
   1a64c:	add	sp, sp, #8
   1a650:	pop	{r2, r3}
   1a654:	rsbs	r0, r0, #0
   1a658:	sbc	r1, r1, r1, lsl #1
   1a65c:	rsbs	r2, r2, #0
   1a660:	sbc	r3, r3, r3, lsl #1
   1a664:	bx	lr
   1a668:	rsbs	r2, r2, #0
   1a66c:	sbc	r3, r3, r3, lsl #1
   1a670:	bl	1a6c0 <main@@Base+0x1cb4>
   1a674:	ldr	lr, [sp, #4]
   1a678:	add	sp, sp, #8
   1a67c:	pop	{r2, r3}
   1a680:	rsbs	r0, r0, #0
   1a684:	sbc	r1, r1, r1, lsl #1
   1a688:	bx	lr
   1a68c:	rsbs	r2, r2, #0
   1a690:	sbc	r3, r3, r3, lsl #1
   1a694:	bl	1a6c0 <main@@Base+0x1cb4>
   1a698:	ldr	lr, [sp, #4]
   1a69c:	add	sp, sp, #8
   1a6a0:	pop	{r2, r3}
   1a6a4:	rsbs	r2, r2, #0
   1a6a8:	sbc	r3, r3, r3, lsl #1
   1a6ac:	bx	lr
   1a6b0:	push	{r1, lr}
   1a6b4:	mov	r0, #8
   1a6b8:	bl	12650 <raise@plt>
   1a6bc:	pop	{r1, pc}
   1a6c0:	cmp	r1, r3
   1a6c4:	cmpeq	r0, r2
   1a6c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6cc:	mov	r4, r0
   1a6d0:	movcc	r0, #0
   1a6d4:	mov	r5, r1
   1a6d8:	ldr	lr, [sp, #36]	; 0x24
   1a6dc:	movcc	r1, r0
   1a6e0:	bcc	1a7dc <main@@Base+0x1dd0>
   1a6e4:	cmp	r3, #0
   1a6e8:	clzeq	ip, r2
   1a6ec:	clzne	ip, r3
   1a6f0:	addeq	ip, ip, #32
   1a6f4:	cmp	r5, #0
   1a6f8:	clzeq	r1, r4
   1a6fc:	addeq	r1, r1, #32
   1a700:	clzne	r1, r5
   1a704:	sub	ip, ip, r1
   1a708:	sub	sl, ip, #32
   1a70c:	lsl	r9, r3, ip
   1a710:	rsb	fp, ip, #32
   1a714:	orr	r9, r9, r2, lsl sl
   1a718:	orr	r9, r9, r2, lsr fp
   1a71c:	lsl	r8, r2, ip
   1a720:	cmp	r5, r9
   1a724:	cmpeq	r4, r8
   1a728:	movcc	r0, #0
   1a72c:	movcc	r1, r0
   1a730:	bcc	1a74c <main@@Base+0x1d40>
   1a734:	mov	r0, #1
   1a738:	subs	r4, r4, r8
   1a73c:	lsl	r1, r0, sl
   1a740:	orr	r1, r1, r0, lsr fp
   1a744:	lsl	r0, r0, ip
   1a748:	sbc	r5, r5, r9
   1a74c:	cmp	ip, #0
   1a750:	beq	1a7dc <main@@Base+0x1dd0>
   1a754:	lsr	r6, r8, #1
   1a758:	orr	r6, r6, r9, lsl #31
   1a75c:	lsr	r7, r9, #1
   1a760:	mov	r2, ip
   1a764:	b	1a788 <main@@Base+0x1d7c>
   1a768:	subs	r3, r4, r6
   1a76c:	sbc	r8, r5, r7
   1a770:	adds	r3, r3, r3
   1a774:	adc	r8, r8, r8
   1a778:	adds	r4, r3, #1
   1a77c:	adc	r5, r8, #0
   1a780:	subs	r2, r2, #1
   1a784:	beq	1a7a4 <main@@Base+0x1d98>
   1a788:	cmp	r5, r7
   1a78c:	cmpeq	r4, r6
   1a790:	bcs	1a768 <main@@Base+0x1d5c>
   1a794:	adds	r4, r4, r4
   1a798:	adc	r5, r5, r5
   1a79c:	subs	r2, r2, #1
   1a7a0:	bne	1a788 <main@@Base+0x1d7c>
   1a7a4:	lsr	r3, r4, ip
   1a7a8:	orr	r3, r3, r5, lsl fp
   1a7ac:	lsr	r2, r5, ip
   1a7b0:	orr	r3, r3, r5, lsr sl
   1a7b4:	adds	r0, r0, r4
   1a7b8:	mov	r4, r3
   1a7bc:	lsl	r3, r2, ip
   1a7c0:	orr	r3, r3, r4, lsl sl
   1a7c4:	lsl	ip, r4, ip
   1a7c8:	orr	r3, r3, r4, lsr fp
   1a7cc:	adc	r1, r1, r5
   1a7d0:	subs	r0, r0, ip
   1a7d4:	mov	r5, r2
   1a7d8:	sbc	r1, r1, r3
   1a7dc:	cmp	lr, #0
   1a7e0:	strdne	r4, [lr]
   1a7e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a7e8 <__libc_csu_init@@Base>:
   1a7e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a7ec:	mov	r7, r0
   1a7f0:	ldr	r6, [pc, #72]	; 1a840 <__libc_csu_init@@Base+0x58>
   1a7f4:	ldr	r5, [pc, #72]	; 1a844 <__libc_csu_init@@Base+0x5c>
   1a7f8:	add	r6, pc, r6
   1a7fc:	add	r5, pc, r5
   1a800:	sub	r6, r6, r5
   1a804:	mov	r8, r1
   1a808:	mov	r9, r2
   1a80c:	bl	1260c <coda_cursor_get_byte_size@plt-0x20>
   1a810:	asrs	r6, r6, #2
   1a814:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a818:	mov	r4, #0
   1a81c:	add	r4, r4, #1
   1a820:	ldr	r3, [r5], #4
   1a824:	mov	r2, r9
   1a828:	mov	r1, r8
   1a82c:	mov	r0, r7
   1a830:	blx	r3
   1a834:	cmp	r6, r4
   1a838:	bne	1a81c <__libc_csu_init@@Base+0x34>
   1a83c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a840:	strdeq	r2, [r1], -r4
   1a844:	andeq	r2, r1, ip, ror #13

0001a848 <__libc_csu_fini@@Base>:
   1a848:	bx	lr

Disassembly of section .fini:

0001a84c <.fini>:
   1a84c:	push	{r3, lr}
   1a850:	pop	{r3, pc}
