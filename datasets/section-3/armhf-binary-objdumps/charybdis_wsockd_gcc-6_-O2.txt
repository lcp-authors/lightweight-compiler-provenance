
../repos/charybdis/wsockd/.libs/wsockd:     file format elf32-littlearm


Disassembly of section .init:

00010c5c <.init>:
   10c5c:	push	{r3, lr}
   10c60:	bl	11320 <rb_base64_encode@plt+0x434>
   10c64:	pop	{r3, pc}

Disassembly of section .plt:

00010c68 <open@plt-0x14>:
   10c68:	push	{lr}		; (str lr, [sp, #-4]!)
   10c6c:	ldr	lr, [pc, #4]	; 10c78 <open@plt-0x4>
   10c70:	add	lr, pc, lr
   10c74:	ldr	pc, [lr, #8]!
   10c78:	andeq	r4, r1, r8, lsl #7

00010c7c <open@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #20, 20	; 0x14000
   10c84:	ldr	pc, [ip, #904]!	; 0x388

00010c88 <sigemptyset@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #20, 20	; 0x14000
   10c90:	ldr	pc, [ip, #896]!	; 0x380

00010c94 <strerror@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #20, 20	; 0x14000
   10c9c:	ldr	pc, [ip, #888]!	; 0x378

00010ca0 <rb_get_type@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #20, 20	; 0x14000
   10ca8:	ldr	pc, [ip, #880]!	; 0x370

00010cac <abort@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #20, 20	; 0x14000
   10cb4:	ldr	pc, [ip, #872]!	; 0x368

00010cb8 <rb_event_addish@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #20, 20	; 0x14000
   10cc0:	ldr	pc, [ip, #864]!	; 0x360

00010cc4 <rb_ignore_errno@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #20, 20	; 0x14000
   10ccc:	ldr	pc, [ip, #856]!	; 0x358

00010cd0 <__libc_start_main@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #20, 20	; 0x14000
   10cd8:	ldr	pc, [ip, #848]!	; 0x350

00010cdc <rb_setselect@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #20, 20	; 0x14000
   10ce4:	ldr	pc, [ip, #840]!	; 0x348

00010ce8 <__gmon_start__@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #20, 20	; 0x14000
   10cf0:	ldr	pc, [ip, #832]!	; 0x340

00010cf4 <rb_send_fd_buf@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #20, 20	; 0x14000
   10cfc:	ldr	pc, [ip, #824]!	; 0x338

00010d00 <vsnprintf@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #20, 20	; 0x14000
   10d08:	ldr	pc, [ip, #816]!	; 0x330

00010d0c <getenv@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #20, 20	; 0x14000
   10d14:	ldr	pc, [ip, #808]!	; 0x328

00010d18 <calloc@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #20, 20	; 0x14000
   10d20:	ldr	pc, [ip, #800]!	; 0x320

00010d24 <rb_set_nb@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #20, 20	; 0x14000
   10d2c:	ldr	pc, [ip, #792]!	; 0x318

00010d30 <memset@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #20, 20	; 0x14000
   10d38:	ldr	pc, [ip, #784]!	; 0x310

00010d3c <__assert_fail@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #20, 20	; 0x14000
   10d44:	ldr	pc, [ip, #776]!	; 0x308

00010d48 <rb_linebuf_parse@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #20, 20	; 0x14000
   10d50:	ldr	pc, [ip, #768]!	; 0x300

00010d54 <rb_strlcpy@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #20, 20	; 0x14000
   10d5c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d60 <rb_init_rawbuffers@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #20, 20	; 0x14000
   10d68:	ldr	pc, [ip, #752]!	; 0x2f0

00010d6c <free@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #20, 20	; 0x14000
   10d74:	ldr	pc, [ip, #744]!	; 0x2e8

00010d78 <rb_lib_loop@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #20, 20	; 0x14000
   10d80:	ldr	pc, [ip, #736]!	; 0x2e0

00010d84 <rb_read@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #20, 20	; 0x14000
   10d8c:	ldr	pc, [ip, #728]!	; 0x2d8

00010d90 <rb_set_type@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #20, 20	; 0x14000
   10d98:	ldr	pc, [ip, #720]!	; 0x2d0

00010d9c <rb_linebuf_get@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #20, 20	; 0x14000
   10da4:	ldr	pc, [ip, #712]!	; 0x2c8

00010da8 <rb_linebuf_flush@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #20, 20	; 0x14000
   10db0:	ldr	pc, [ip, #704]!	; 0x2c0

00010db4 <strlen@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #20, 20	; 0x14000
   10dbc:	ldr	pc, [ip, #696]!	; 0x2b8

00010dc0 <memcpy@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #20, 20	; 0x14000
   10dc8:	ldr	pc, [ip, #688]!	; 0x2b0

00010dcc <rb_linebuf_donebuf@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #20, 20	; 0x14000
   10dd4:	ldr	pc, [ip, #680]!	; 0x2a8

00010dd8 <rb_strcasestr@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #20, 20	; 0x14000
   10de0:	ldr	pc, [ip, #672]!	; 0x2a0

00010de4 <rb_close@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #20, 20	; 0x14000
   10dec:	ldr	pc, [ip, #664]!	; 0x298

00010df0 <strtol@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #20, 20	; 0x14000
   10df8:	ldr	pc, [ip, #656]!	; 0x290

00010dfc <sigaddset@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #20, 20	; 0x14000
   10e04:	ldr	pc, [ip, #648]!	; 0x288

00010e08 <rb_rawbuf_length@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #20, 20	; 0x14000
   10e10:	ldr	pc, [ip, #640]!	; 0x280

00010e14 <rb_free_rawbuffer@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #20, 20	; 0x14000
   10e1c:	ldr	pc, [ip, #632]!	; 0x278

00010e20 <close@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #20, 20	; 0x14000
   10e28:	ldr	pc, [ip, #624]!	; 0x270

00010e2c <fwrite@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #20, 20	; 0x14000
   10e34:	ldr	pc, [ip, #616]!	; 0x268

00010e38 <rb_outofmemory@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #20, 20	; 0x14000
   10e40:	ldr	pc, [ip, #608]!	; 0x260

00010e44 <rb_rawbuf_get@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #20, 20	; 0x14000
   10e4c:	ldr	pc, [ip, #600]!	; 0x258

00010e50 <sigaction@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #20, 20	; 0x14000
   10e58:	ldr	pc, [ip, #592]!	; 0x250

00010e5c <rb_lib_init@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #20, 20	; 0x14000
   10e64:	ldr	pc, [ip, #584]!	; 0x248

00010e68 <rb_new_rawbuffer@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #20, 20	; 0x14000
   10e70:	ldr	pc, [ip, #576]!	; 0x240

00010e74 <rb_open@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #20, 20	; 0x14000
   10e7c:	ldr	pc, [ip, #568]!	; 0x238

00010e80 <rb_recv_fd_buf@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #20, 20	; 0x14000
   10e88:	ldr	pc, [ip, #560]!	; 0x230

00010e8c <dup2@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #20, 20	; 0x14000
   10e94:	ldr	pc, [ip, #552]!	; 0x228

00010e98 <rb_linebuf_newbuf@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #20, 20	; 0x14000
   10ea0:	ldr	pc, [ip, #544]!	; 0x220

00010ea4 <rb_linebuf_init@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #20, 20	; 0x14000
   10eac:	ldr	pc, [ip, #536]!	; 0x218

00010eb0 <getrlimit@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #20, 20	; 0x14000
   10eb8:	ldr	pc, [ip, #528]!	; 0x210

00010ebc <rb_rawbuf_append@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #20, 20	; 0x14000
   10ec4:	ldr	pc, [ip, #520]!	; 0x208

00010ec8 <rb_rawbuf_flush@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #20, 20	; 0x14000
   10ed0:	ldr	pc, [ip, #512]!	; 0x200

00010ed4 <exit@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #20, 20	; 0x14000
   10edc:	ldr	pc, [ip, #504]!	; 0x1f8

00010ee0 <__errno_location@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #20, 20	; 0x14000
   10ee8:	ldr	pc, [ip, #496]!	; 0x1f0

00010eec <rb_base64_encode@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #20, 20	; 0x14000
   10ef4:	ldr	pc, [ip, #488]!	; 0x1e8

Disassembly of section .text:

00010ef8 <.text>:
   10ef8:	ldr	r3, [pc, #28]	; 10f1c <rb_base64_encode@plt+0x30>
   10efc:	ldr	r1, [pc, #28]	; 10f20 <rb_base64_encode@plt+0x34>
   10f00:	ldr	r0, [pc, #28]	; 10f24 <rb_base64_encode@plt+0x38>
   10f04:	push	{r4, lr}
   10f08:	add	r3, pc, r3
   10f0c:	mov	r2, #213	; 0xd5
   10f10:	add	r1, pc, r1
   10f14:	add	r0, pc, r0
   10f18:	bl	10d3c <__assert_fail@plt>
   10f1c:	andeq	r3, r0, r0, ror r0
   10f20:	andeq	r3, r0, r8, lsl #1
   10f24:	andeq	r3, r0, r0, lsr #1
   10f28:	ldr	r3, [pc, #32]	; 10f50 <rb_base64_encode@plt+0x64>
   10f2c:	ldr	r1, [pc, #32]	; 10f54 <rb_base64_encode@plt+0x68>
   10f30:	ldr	r0, [pc, #32]	; 10f58 <rb_base64_encode@plt+0x6c>
   10f34:	add	r3, pc, r3
   10f38:	push	{r4, lr}
   10f3c:	mov	r2, #236	; 0xec
   10f40:	add	r3, r3, #16
   10f44:	add	r1, pc, r1
   10f48:	add	r0, pc, r0
   10f4c:	bl	10d3c <__assert_fail@plt>
   10f50:	andeq	r3, r0, r4, asr #32
   10f54:	andeq	r3, r0, r4, asr r0
   10f58:	andeq	r3, r0, ip, ror r0
   10f5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10f60:	sub	sp, sp, #160	; 0xa0
   10f64:	add	r8, sp, #20
   10f68:	mov	r1, r8
   10f6c:	mov	r0, #7
   10f70:	bl	10eb0 <getrlimit@plt>
   10f74:	ldr	r6, [pc, #808]	; 112a4 <rb_base64_encode@plt+0x3b8>
   10f78:	add	r6, pc, r6
   10f7c:	cmp	r0, #0
   10f80:	ldr	r0, [pc, #800]	; 112a8 <rb_base64_encode@plt+0x3bc>
   10f84:	ldreq	r5, [sp, #20]
   10f88:	add	r0, pc, r0
   10f8c:	ldrne	r5, [pc, #792]	; 112ac <rb_base64_encode@plt+0x3c0>
   10f90:	bl	10d0c <getenv@plt>
   10f94:	mov	r7, r0
   10f98:	ldr	r0, [pc, #784]	; 112b0 <rb_base64_encode@plt+0x3c4>
   10f9c:	add	r0, pc, r0
   10fa0:	bl	10d0c <getenv@plt>
   10fa4:	mov	r9, r0
   10fa8:	ldr	r0, [pc, #772]	; 112b4 <rb_base64_encode@plt+0x3c8>
   10fac:	add	r0, pc, r0
   10fb0:	bl	10d0c <getenv@plt>
   10fb4:	cmp	r9, #0
   10fb8:	cmpne	r7, #0
   10fbc:	moveq	r4, #1
   10fc0:	movne	r4, #0
   10fc4:	cmp	r0, #0
   10fc8:	orreq	r4, r4, #1
   10fcc:	cmp	r4, #0
   10fd0:	mov	sl, r0
   10fd4:	bne	11228 <rb_base64_encode@plt+0x33c>
   10fd8:	mov	r0, r7
   10fdc:	mov	r2, #10
   10fe0:	mov	r1, r4
   10fe4:	bl	10df0 <strtol@plt>
   10fe8:	mov	r2, #10
   10fec:	mov	r1, r4
   10ff0:	mov	r7, r0
   10ff4:	mov	r0, r9
   10ff8:	bl	10df0 <strtol@plt>
   10ffc:	mov	r2, #10
   11000:	mov	r1, r4
   11004:	mov	r6, r0
   11008:	mov	r0, sl
   1100c:	bl	10df0 <strtol@plt>
   11010:	ldr	r3, [pc, #672]	; 112b8 <rb_base64_encode@plt+0x3cc>
   11014:	cmp	r5, #0
   11018:	add	r3, pc, r3
   1101c:	str	r0, [r3, #12]
   11020:	ble	11068 <rb_base64_encode@plt+0x17c>
   11024:	add	r4, r4, #1
   11028:	cmp	r4, r5
   1102c:	beq	11068 <rb_base64_encode@plt+0x17c>
   11030:	cmp	r4, r7
   11034:	cmpne	r4, r6
   11038:	movne	r3, #1
   1103c:	moveq	r3, #0
   11040:	cmp	r4, #2
   11044:	movle	r3, #0
   11048:	andgt	r3, r3, #1
   1104c:	cmp	r3, #0
   11050:	beq	11024 <rb_base64_encode@plt+0x138>
   11054:	mov	r0, r4
   11058:	add	r4, r4, #1
   1105c:	bl	10e20 <close@plt>
   11060:	cmp	r4, r5
   11064:	bne	11030 <rb_base64_encode@plt+0x144>
   11068:	ldr	r0, [pc, #588]	; 112bc <rb_base64_encode@plt+0x3d0>
   1106c:	mov	r1, #2
   11070:	add	r0, pc, r0
   11074:	bl	10c7c <open@plt>
   11078:	subs	r4, r0, #0
   1107c:	blt	110ac <rb_base64_encode@plt+0x1c0>
   11080:	cmp	r7, #0
   11084:	cmpne	r6, #0
   11088:	bne	11268 <rb_base64_encode@plt+0x37c>
   1108c:	cmp	r7, #1
   11090:	cmpne	r6, #1
   11094:	bne	11290 <rb_base64_encode@plt+0x3a4>
   11098:	cmp	r7, #2
   1109c:	cmpne	r6, #2
   110a0:	bne	11280 <rb_base64_encode@plt+0x394>
   110a4:	cmp	r4, #2
   110a8:	bgt	11274 <rb_base64_encode@plt+0x388>
   110ac:	add	r4, r8, #4
   110b0:	mov	r9, #0
   110b4:	mov	r0, r4
   110b8:	mov	sl, #1
   110bc:	str	r9, [sp, #152]	; 0x98
   110c0:	str	sl, [sp, #20]
   110c4:	bl	10c88 <sigemptyset@plt>
   110c8:	mov	r0, r4
   110cc:	mov	r1, #13
   110d0:	bl	10dfc <sigaddset@plt>
   110d4:	mov	r0, r4
   110d8:	mov	r1, #14
   110dc:	bl	10dfc <sigaddset@plt>
   110e0:	mov	r0, r4
   110e4:	mov	r1, #5
   110e8:	bl	10dfc <sigaddset@plt>
   110ec:	mov	r0, r4
   110f0:	mov	r1, #28
   110f4:	bl	10dfc <sigaddset@plt>
   110f8:	mov	r2, r9
   110fc:	mov	r1, r8
   11100:	mov	r0, #28
   11104:	bl	10e50 <sigaction@plt>
   11108:	mov	r2, r9
   1110c:	mov	r1, r8
   11110:	mov	r0, #13
   11114:	bl	10e50 <sigaction@plt>
   11118:	mov	r2, r9
   1111c:	mov	r1, r8
   11120:	mov	r0, #5
   11124:	bl	10e50 <sigaction@plt>
   11128:	ldr	r3, [pc, #400]	; 112c0 <rb_base64_encode@plt+0x3d4>
   1112c:	mov	r1, r8
   11130:	add	r3, pc, r3
   11134:	mov	r2, r9
   11138:	mov	r0, #14
   1113c:	mov	r4, #4096	; 0x1000
   11140:	str	r3, [sp, #20]
   11144:	bl	10e50 <sigaction@plt>
   11148:	mov	ip, #1024	; 0x400
   1114c:	mov	r3, r9
   11150:	mov	r2, r9
   11154:	mov	r1, r9
   11158:	str	ip, [sp, #4]
   1115c:	str	r5, [sp]
   11160:	mov	r0, r9
   11164:	str	r4, [sp, #8]
   11168:	bl	10e5c <rb_lib_init@plt>
   1116c:	mov	r0, r4
   11170:	bl	10ea4 <rb_linebuf_init@plt>
   11174:	mov	r0, r4
   11178:	bl	10d60 <rb_init_rawbuffers@plt>
   1117c:	mov	r0, sl
   11180:	mov	r1, #48	; 0x30
   11184:	bl	10d18 <calloc@plt>
   11188:	subs	r5, r0, #0
   1118c:	beq	112a0 <rb_base64_encode@plt+0x3b4>
   11190:	ldr	r4, [pc, #300]	; 112c4 <rb_base64_encode@plt+0x3d8>
   11194:	ldr	r2, [pc, #300]	; 112c8 <rb_base64_encode@plt+0x3dc>
   11198:	add	r4, pc, r4
   1119c:	mov	r0, r7
   111a0:	add	r2, pc, r2
   111a4:	mov	r1, #4
   111a8:	str	r5, [r4, #-536]	; 0xfffffde8
   111ac:	bl	10e74 <rb_open@plt>
   111b0:	ldr	r2, [pc, #276]	; 112cc <rb_base64_encode@plt+0x3e0>
   111b4:	mov	r1, #8
   111b8:	add	r2, pc, r2
   111bc:	ldr	r7, [r4, #-536]	; 0xfffffde8
   111c0:	str	r0, [r5, #16]
   111c4:	mov	r0, r6
   111c8:	bl	10e74 <rb_open@plt>
   111cc:	ldr	r3, [r4, #-536]	; 0xfffffde8
   111d0:	str	r0, [r7, #20]
   111d4:	ldr	r0, [r3, #16]
   111d8:	bl	10d24 <rb_set_nb@plt>
   111dc:	ldr	r3, [r4, #-536]	; 0xfffffde8
   111e0:	ldr	r0, [r3, #20]
   111e4:	bl	10d24 <rb_set_nb@plt>
   111e8:	ldr	r1, [pc, #224]	; 112d0 <rb_base64_encode@plt+0x3e4>
   111ec:	ldr	r0, [pc, #224]	; 112d4 <rb_base64_encode@plt+0x3e8>
   111f0:	mov	r2, r9
   111f4:	mov	r3, #10
   111f8:	add	r1, pc, r1
   111fc:	add	r0, pc, r0
   11200:	bl	10cb8 <rb_event_addish@plt>
   11204:	ldr	r3, [r4, #-536]	; 0xfffffde8
   11208:	mov	r1, r9
   1120c:	ldr	r0, [r3, #20]
   11210:	bl	1148c <rb_base64_encode@plt+0x5a0>
   11214:	ldr	r1, [r4, #-536]	; 0xfffffde8
   11218:	ldr	r0, [r1, #16]
   1121c:	bl	12500 <rb_base64_encode@plt+0x1614>
   11220:	mov	r0, r9
   11224:	bl	10d78 <rb_lib_loop@plt>
   11228:	ldr	r3, [pc, #168]	; 112d8 <rb_base64_encode@plt+0x3ec>
   1122c:	ldr	r0, [pc, #168]	; 112dc <rb_base64_encode@plt+0x3f0>
   11230:	mov	r2, #52	; 0x34
   11234:	ldr	r4, [r6, r3]
   11238:	mov	r1, #1
   1123c:	add	r0, pc, r0
   11240:	ldr	r3, [r4]
   11244:	bl	10e2c <fwrite@plt>
   11248:	ldr	r0, [pc, #144]	; 112e0 <rb_base64_encode@plt+0x3f4>
   1124c:	ldr	r3, [r4]
   11250:	mov	r2, #49	; 0x31
   11254:	mov	r1, #1
   11258:	add	r0, pc, r0
   1125c:	bl	10e2c <fwrite@plt>
   11260:	mov	r0, #1
   11264:	bl	10ed4 <exit@plt>
   11268:	mov	r1, #0
   1126c:	bl	10e8c <dup2@plt>
   11270:	b	1108c <rb_base64_encode@plt+0x1a0>
   11274:	mov	r0, r4
   11278:	bl	10e20 <close@plt>
   1127c:	b	110ac <rb_base64_encode@plt+0x1c0>
   11280:	mov	r1, #2
   11284:	mov	r0, r4
   11288:	bl	10e8c <dup2@plt>
   1128c:	b	110a4 <rb_base64_encode@plt+0x1b8>
   11290:	mov	r1, #1
   11294:	mov	r0, r4
   11298:	bl	10e8c <dup2@plt>
   1129c:	b	11098 <rb_base64_encode@plt+0x1ac>
   112a0:	bl	10e38 <rb_outofmemory@plt>
   112a4:	andeq	r4, r1, r0, lsl #1
   112a8:	andeq	r3, r0, ip, ror #3
   112ac:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   112b0:	andeq	r3, r0, r0, ror #3
   112b4:	ldrdeq	r3, [r0], -ip
   112b8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   112bc:	muleq	r0, r0, r1
   112c0:	ldrdeq	r0, [r0], -r4
   112c4:	andeq	r9, r1, ip, lsr pc
   112c8:	andeq	r3, r0, ip, rrx
   112cc:	andeq	r3, r0, r8, rrx
   112d0:	andeq	r0, r0, r0, lsl r2
   112d4:	andeq	r3, r0, r0, lsr r0
   112d8:	andeq	r0, r0, r4, ror #1
   112dc:	andeq	r2, r0, r8, asr pc
   112e0:	andeq	r2, r0, r4, ror pc
   112e4:	mov	fp, #0
   112e8:	mov	lr, #0
   112ec:	pop	{r1}		; (ldr r1, [sp], #4)
   112f0:	mov	r2, sp
   112f4:	push	{r2}		; (str r2, [sp, #-4]!)
   112f8:	push	{r0}		; (str r0, [sp, #-4]!)
   112fc:	ldr	ip, [pc, #16]	; 11314 <rb_base64_encode@plt+0x428>
   11300:	push	{ip}		; (str ip, [sp, #-4]!)
   11304:	ldr	r0, [pc, #12]	; 11318 <rb_base64_encode@plt+0x42c>
   11308:	ldr	r3, [pc, #12]	; 1131c <rb_base64_encode@plt+0x430>
   1130c:	bl	10cd0 <__libc_start_main@plt>
   11310:	bl	10cac <abort@plt>
   11314:	andeq	r3, r1, r0, ror pc
   11318:	andeq	r0, r1, ip, asr pc
   1131c:	andeq	r3, r1, r0, lsl pc
   11320:	ldr	r3, [pc, #20]	; 1133c <rb_base64_encode@plt+0x450>
   11324:	ldr	r2, [pc, #20]	; 11340 <rb_base64_encode@plt+0x454>
   11328:	add	r3, pc, r3
   1132c:	ldr	r2, [r3, r2]
   11330:	cmp	r2, #0
   11334:	bxeq	lr
   11338:	b	10ce8 <__gmon_start__@plt>
   1133c:	ldrdeq	r3, [r1], -r0
   11340:	andeq	r0, r0, r0, ror #1
   11344:	ldr	r3, [pc, #28]	; 11368 <rb_base64_encode@plt+0x47c>
   11348:	ldr	r0, [pc, #28]	; 1136c <rb_base64_encode@plt+0x480>
   1134c:	sub	r3, r3, r0
   11350:	cmp	r3, #6
   11354:	bxls	lr
   11358:	ldr	r3, [pc, #16]	; 11370 <rb_base64_encode@plt+0x484>
   1135c:	cmp	r3, #0
   11360:	bxeq	lr
   11364:	bx	r3
   11368:	strdeq	r5, [r2], -r3
   1136c:	strdeq	r5, [r2], -r0
   11370:	andeq	r0, r0, r0
   11374:	ldr	r1, [pc, #36]	; 113a0 <rb_base64_encode@plt+0x4b4>
   11378:	ldr	r0, [pc, #36]	; 113a4 <rb_base64_encode@plt+0x4b8>
   1137c:	sub	r1, r1, r0
   11380:	asr	r1, r1, #2
   11384:	add	r1, r1, r1, lsr #31
   11388:	asrs	r1, r1, #1
   1138c:	bxeq	lr
   11390:	ldr	r3, [pc, #16]	; 113a8 <rb_base64_encode@plt+0x4bc>
   11394:	cmp	r3, #0
   11398:	bxeq	lr
   1139c:	bx	r3
   113a0:	strdeq	r5, [r2], -r0
   113a4:	strdeq	r5, [r2], -r0
   113a8:	andeq	r0, r0, r0
   113ac:	push	{r4, lr}
   113b0:	ldr	r4, [pc, #24]	; 113d0 <rb_base64_encode@plt+0x4e4>
   113b4:	ldrb	r3, [r4]
   113b8:	cmp	r3, #0
   113bc:	popne	{r4, pc}
   113c0:	bl	11344 <rb_base64_encode@plt+0x458>
   113c4:	mov	r3, #1
   113c8:	strb	r3, [r4]
   113cc:	pop	{r4, pc}
   113d0:	strdeq	r5, [r2], -r0
   113d4:	ldr	r0, [pc, #40]	; 11404 <rb_base64_encode@plt+0x518>
   113d8:	ldr	r3, [r0]
   113dc:	cmp	r3, #0
   113e0:	bne	113e8 <rb_base64_encode@plt+0x4fc>
   113e4:	b	11374 <rb_base64_encode@plt+0x488>
   113e8:	ldr	r3, [pc, #24]	; 11408 <rb_base64_encode@plt+0x51c>
   113ec:	cmp	r3, #0
   113f0:	beq	113e4 <rb_base64_encode@plt+0x4f8>
   113f4:	push	{r4, lr}
   113f8:	blx	r3
   113fc:	pop	{r4, lr}
   11400:	b	11374 <rb_base64_encode@plt+0x488>
   11404:	strdeq	r4, [r2], -ip
   11408:	andeq	r0, r0, r0
   1140c:	bx	lr
   11410:	ldr	r3, [pc, #108]	; 11484 <rb_base64_encode@plt+0x598>
   11414:	push	{r4, r5, r6, lr}
   11418:	add	r3, pc, r3
   1141c:	ldr	r3, [r3]
   11420:	cmp	r3, #0
   11424:	beq	1146c <rb_base64_encode@plt+0x580>
   11428:	ldr	r5, [r3, #8]
   1142c:	b	11438 <rb_base64_encode@plt+0x54c>
   11430:	mov	r3, r5
   11434:	ldr	r5, [r5, #8]
   11438:	ldr	r4, [r3]
   1143c:	add	r0, r4, #52	; 0x34
   11440:	bl	10dcc <rb_linebuf_donebuf@plt>
   11444:	add	r0, r4, #24
   11448:	bl	10dcc <rb_linebuf_donebuf@plt>
   1144c:	ldr	r0, [r4, #20]
   11450:	bl	10e14 <rb_free_rawbuffer@plt>
   11454:	ldr	r0, [r4, #16]
   11458:	bl	10e14 <rb_free_rawbuffer@plt>
   1145c:	mov	r0, r4
   11460:	bl	10d6c <free@plt>
   11464:	cmp	r5, #0
   11468:	bne	11430 <rb_base64_encode@plt+0x544>
   1146c:	ldr	r3, [pc, #20]	; 11488 <rb_base64_encode@plt+0x59c>
   11470:	mov	r2, #0
   11474:	add	r3, pc, r3
   11478:	str	r2, [r3]
   1147c:	str	r2, [r3, #4]
   11480:	pop	{r4, r5, r6, pc}
   11484:	ldrdeq	r3, [r1], -r4
   11488:	andeq	r3, r1, r8, ror ip
   1148c:	push	{r4, r5, r6, lr}
   11490:	sub	sp, sp, #16384	; 0x4000
   11494:	mov	r4, r0
   11498:	mov	r6, sp
   1149c:	mov	r5, #16384	; 0x4000
   114a0:	mov	r2, r5
   114a4:	mov	r1, r6
   114a8:	mov	r0, r4
   114ac:	bl	10d84 <rb_read@plt>
   114b0:	cmp	r0, #0
   114b4:	bgt	114a0 <rb_base64_encode@plt+0x5b4>
   114b8:	beq	114f0 <rb_base64_encode@plt+0x604>
   114bc:	bl	10ee0 <__errno_location@plt>
   114c0:	ldr	r0, [r0]
   114c4:	bl	10cc4 <rb_ignore_errno@plt>
   114c8:	cmp	r0, #0
   114cc:	beq	114f0 <rb_base64_encode@plt+0x604>
   114d0:	ldr	r2, [pc, #32]	; 114f8 <rb_base64_encode@plt+0x60c>
   114d4:	mov	r0, r4
   114d8:	mov	r3, #0
   114dc:	add	r2, pc, r2
   114e0:	mov	r1, #1
   114e4:	bl	10cdc <rb_setselect@plt>
   114e8:	add	sp, sp, #16384	; 0x4000
   114ec:	pop	{r4, r5, r6, pc}
   114f0:	mov	r0, #0
   114f4:	bl	10ed4 <exit@plt>
   114f8:			; <UNDEFINED> instruction: 0xffffffa8
   114fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11500:	mov	r8, r1
   11504:	ldr	r6, [r1, #36]	; 0x24
   11508:	sub	sp, sp, #8
   1150c:	cmp	r6, #0
   11510:	beq	11604 <rb_base64_encode@plt+0x718>
   11514:	ldr	sl, [pc, #284]	; 11638 <rb_base64_encode@plt+0x74c>
   11518:	ldr	r7, [r6, #8]
   1151c:	add	sl, pc, sl
   11520:	mov	r9, #0
   11524:	ldr	r4, [r6]
   11528:	ldr	r1, [sl, #12]
   1152c:	ldr	r0, [r8, #16]
   11530:	ldr	r3, [r4, #12]
   11534:	ldr	r2, [r4, #36]	; 0x24
   11538:	str	r1, [sp, #4]
   1153c:	ldr	r1, [r4, #16]
   11540:	add	r5, r4, #20
   11544:	str	r1, [sp]
   11548:	mov	r1, r5
   1154c:	bl	10cf4 <rb_send_fd_buf@plt>
   11550:	cmp	r0, #0
   11554:	ble	115e0 <rb_base64_encode@plt+0x6f4>
   11558:	ldmib	r6, {r2, r3}
   1155c:	cmp	r3, #0
   11560:	strne	r2, [r3, #4]
   11564:	ldrne	r2, [r6, #4]
   11568:	streq	r2, [r8, #40]	; 0x28
   1156c:	cmp	r2, #0
   11570:	strne	r3, [r2, #8]
   11574:	streq	r3, [r8, #36]	; 0x24
   11578:	ldr	r2, [r4, #36]	; 0x24
   1157c:	ldr	r3, [r8, #44]	; 0x2c
   11580:	cmp	r2, #0
   11584:	sub	r3, r3, #1
   11588:	str	r9, [r6, #4]
   1158c:	str	r9, [r6, #8]
   11590:	str	r3, [r8, #44]	; 0x2c
   11594:	movgt	r6, #0
   11598:	ble	115b4 <rb_base64_encode@plt+0x6c8>
   1159c:	ldr	r0, [r5], #4
   115a0:	bl	10de4 <rb_close@plt>
   115a4:	ldr	r3, [r4, #36]	; 0x24
   115a8:	add	r6, r6, #1
   115ac:	cmp	r3, r6
   115b0:	bgt	1159c <rb_base64_encode@plt+0x6b0>
   115b4:	ldr	r0, [r4, #12]
   115b8:	cmp	r0, #0
   115bc:	beq	115c4 <rb_base64_encode@plt+0x6d8>
   115c0:	bl	10d6c <free@plt>
   115c4:	mov	r0, r4
   115c8:	bl	10d6c <free@plt>
   115cc:	cmp	r7, #0
   115d0:	beq	11604 <rb_base64_encode@plt+0x718>
   115d4:	mov	r6, r7
   115d8:	ldr	r7, [r7, #8]
   115dc:	b	11524 <rb_base64_encode@plt+0x638>
   115e0:	beq	115fc <rb_base64_encode@plt+0x710>
   115e4:	bge	115cc <rb_base64_encode@plt+0x6e0>
   115e8:	bl	10ee0 <__errno_location@plt>
   115ec:	ldr	r0, [r0]
   115f0:	bl	10cc4 <rb_ignore_errno@plt>
   115f4:	cmp	r0, #0
   115f8:	bne	115cc <rb_base64_encode@plt+0x6e0>
   115fc:	mov	r0, #0
   11600:	bl	10ed4 <exit@plt>
   11604:	ldr	r3, [r8, #44]	; 0x2c
   11608:	cmp	r3, #0
   1160c:	bne	11618 <rb_base64_encode@plt+0x72c>
   11610:	add	sp, sp, #8
   11614:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11618:	ldr	r2, [pc, #28]	; 1163c <rb_base64_encode@plt+0x750>
   1161c:	mov	r3, r8
   11620:	ldr	r0, [r8, #16]
   11624:	add	r2, pc, r2
   11628:	mov	r1, #2
   1162c:	add	sp, sp, #8
   11630:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   11634:	b	10cdc <rb_setselect@plt>
   11638:	ldrdeq	r3, [r1], -r0
   1163c:			; <UNDEFINED> instruction: 0xfffffed0
   11640:	push	{r4, r5, r6, lr}
   11644:	subs	r4, r1, #0
   11648:	sub	sp, sp, #16384	; 0x4000
   1164c:	beq	116a0 <rb_base64_encode@plt+0x7b4>
   11650:	mov	r6, sp
   11654:	mov	r5, #16384	; 0x4000
   11658:	mov	r2, r5
   1165c:	mov	r1, r6
   11660:	ldr	r0, [r4, #88]	; 0x58
   11664:	bl	10d84 <rb_read@plt>
   11668:	cmp	r0, #0
   1166c:	beq	116a8 <rb_base64_encode@plt+0x7bc>
   11670:	bge	11658 <rb_base64_encode@plt+0x76c>
   11674:	bl	10ee0 <__errno_location@plt>
   11678:	ldr	r0, [r0]
   1167c:	bl	10cc4 <rb_ignore_errno@plt>
   11680:	cmp	r0, #0
   11684:	beq	116a8 <rb_base64_encode@plt+0x7bc>
   11688:	ldr	r2, [pc, #120]	; 11708 <rb_base64_encode@plt+0x81c>
   1168c:	mov	r3, r4
   11690:	ldr	r0, [r4, #88]	; 0x58
   11694:	add	r2, pc, r2
   11698:	mov	r1, #1
   1169c:	bl	10cdc <rb_setselect@plt>
   116a0:	add	sp, sp, #16384	; 0x4000
   116a4:	pop	{r4, r5, r6, pc}
   116a8:	ldr	r0, [r4, #88]	; 0x58
   116ac:	bl	10de4 <rb_close@plt>
   116b0:	ldr	r2, [pc, #84]	; 1170c <rb_base64_encode@plt+0x820>
   116b4:	mov	r1, #0
   116b8:	add	r2, pc, r2
   116bc:	str	r4, [r4]
   116c0:	ldr	r3, [r2]
   116c4:	str	r1, [r4, #4]
   116c8:	cmp	r3, r1
   116cc:	str	r3, [r4, #8]
   116d0:	strne	r4, [r3, #4]
   116d4:	beq	116f8 <rb_base64_encode@plt+0x80c>
   116d8:	ldr	r3, [pc, #48]	; 11710 <rb_base64_encode@plt+0x824>
   116dc:	add	r3, pc, r3
   116e0:	ldr	r2, [r3, #8]
   116e4:	str	r4, [r3]
   116e8:	add	r2, r2, #1
   116ec:	str	r2, [r3, #8]
   116f0:	add	sp, sp, #16384	; 0x4000
   116f4:	pop	{r4, r5, r6, pc}
   116f8:	ldr	r3, [r2, #4]
   116fc:	cmp	r3, #0
   11700:	streq	r4, [r2, #4]
   11704:	b	116d8 <rb_base64_encode@plt+0x7ec>
   11708:			; <UNDEFINED> instruction: 0xffffffa4
   1170c:	andeq	r3, r1, r4, lsr sl
   11710:	andeq	r3, r1, r0, lsl sl
   11714:	ldrb	ip, [r0, #128]	; 0x80
   11718:	tst	ip, #2
   1171c:	bxne	lr
   11720:	tst	ip, #8
   11724:	push	{r2, r3}
   11728:	push	{r4, r5, r6, r7, r8, lr}
   1172c:	mov	r4, r0
   11730:	sub	sp, sp, #392	; 0x188
   11734:	mov	r5, r1
   11738:	bne	11838 <rb_base64_encode@plt+0x94c>
   1173c:	ldr	r1, [r4, #84]	; 0x54
   11740:	ldr	r0, [r4, #16]
   11744:	bl	10ec8 <rb_rawbuf_flush@plt>
   11748:	add	r1, r4, #24
   1174c:	ldr	r0, [r4, #88]	; 0x58
   11750:	bl	10da8 <rb_linebuf_flush@plt>
   11754:	ldr	r0, [r4, #84]	; 0x54
   11758:	bl	10de4 <rb_close@plt>
   1175c:	ldr	ip, [r4, #80]	; 0x50
   11760:	ldr	r0, [pc, #608]	; 119c8 <rb_base64_encode@plt+0xadc>
   11764:	mov	r3, #2000	; 0x7d0
   11768:	ldrb	r2, [r4, #128]	; 0x80
   1176c:	umull	r1, r0, r0, ip
   11770:	ldr	r1, [r4, #8]
   11774:	orr	r2, r2, #2
   11778:	lsr	r0, r0, #7
   1177c:	cmp	r1, #0
   11780:	mul	r0, r3, r0
   11784:	strb	r2, [r4, #128]	; 0x80
   11788:	sub	r0, ip, r0
   1178c:	beq	11840 <rb_base64_encode@plt+0x954>
   11790:	ldr	r3, [r4, #4]
   11794:	lsl	ip, r0, #1
   11798:	str	r3, [r1, #4]
   1179c:	ldr	r3, [r4, #4]
   117a0:	cmp	r3, #0
   117a4:	strne	r1, [r3, #8]
   117a8:	beq	1196c <rb_base64_encode@plt+0xa80>
   117ac:	ldr	r7, [pc, #536]	; 119cc <rb_base64_encode@plt+0xae0>
   117b0:	add	r0, ip, r0
   117b4:	add	r7, pc, r7
   117b8:	ldr	r3, [sp, #416]	; 0x1a0
   117bc:	add	r0, r7, r0, lsl #2
   117c0:	cmp	r3, #0
   117c4:	cmpne	r5, #0
   117c8:	ldr	r3, [r0, #24]
   117cc:	mov	r6, #0
   117d0:	sub	r3, r3, #1
   117d4:	str	r6, [r4, #4]
   117d8:	str	r6, [r4, #8]
   117dc:	moveq	r5, #1
   117e0:	movne	r5, #0
   117e4:	str	r3, [r0, #24]
   117e8:	bne	11860 <rb_base64_encode@plt+0x974>
   117ec:	ldr	r0, [r4, #88]	; 0x58
   117f0:	bl	10de4 <rb_close@plt>
   117f4:	ldr	r3, [r7]
   117f8:	str	r6, [r4, #4]
   117fc:	cmp	r3, #0
   11800:	str	r4, [r4]
   11804:	str	r3, [r4, #8]
   11808:	strne	r4, [r3, #4]
   1180c:	beq	11984 <rb_base64_encode@plt+0xa98>
   11810:	ldr	r3, [pc, #440]	; 119d0 <rb_base64_encode@plt+0xae4>
   11814:	add	r3, pc, r3
   11818:	ldr	r2, [r3, #8]
   1181c:	str	r4, [r3]
   11820:	add	r2, r2, #1
   11824:	str	r2, [r3, #8]
   11828:	add	sp, sp, #392	; 0x188
   1182c:	pop	{r4, r5, r6, r7, r8, lr}
   11830:	add	sp, sp, #8
   11834:	bx	lr
   11838:	bl	11b1c <rb_base64_encode@plt+0xc30>
   1183c:	b	1173c <rb_base64_encode@plt+0x850>
   11840:	lsl	ip, r0, #1
   11844:	ldr	r2, [pc, #392]	; 119d4 <rb_base64_encode@plt+0xae8>
   11848:	add	lr, ip, r0
   1184c:	add	r2, pc, r2
   11850:	ldr	r3, [r4, #4]
   11854:	add	r2, r2, lr, lsl #2
   11858:	str	r3, [r2, #20]
   1185c:	b	117a0 <rb_base64_encode@plt+0x8b4>
   11860:	ldr	r2, [pc, #368]	; 119d8 <rb_base64_encode@plt+0xaec>
   11864:	mov	r3, r4
   11868:	ldr	r0, [r4, #88]	; 0x58
   1186c:	add	r2, pc, r2
   11870:	mov	r1, #1
   11874:	bl	10cdc <rb_setselect@plt>
   11878:	ldr	r0, [r4, #88]	; 0x58
   1187c:	mov	r3, r5
   11880:	mov	r2, r5
   11884:	mov	r1, #2
   11888:	bl	10cdc <rb_setselect@plt>
   1188c:	add	r6, sp, #8
   11890:	add	ip, sp, #420	; 0x1a4
   11894:	mov	r3, ip
   11898:	mov	r0, r6
   1189c:	ldr	r2, [sp, #416]	; 0x1a0
   118a0:	mov	r1, #128	; 0x80
   118a4:	str	ip, [sp, #4]
   118a8:	bl	10d00 <vsnprintf@plt>
   118ac:	ldr	ip, [r4, #80]	; 0x50
   118b0:	mov	r1, r6
   118b4:	mov	r3, #68	; 0x44
   118b8:	mov	r2, #251	; 0xfb
   118bc:	add	r0, sp, #141	; 0x8d
   118c0:	str	ip, [sp, #137]	; 0x89
   118c4:	strb	r3, [sp, #136]	; 0x88
   118c8:	bl	10d54 <rb_strlcpy@plt>
   118cc:	mov	r0, r6
   118d0:	bl	10db4 <strlen@plt>
   118d4:	mov	r1, #40	; 0x28
   118d8:	ldr	r6, [r4, #12]
   118dc:	add	r8, sp, #136	; 0x88
   118e0:	add	r7, r0, #6
   118e4:	mov	r0, #1
   118e8:	bl	10d18 <calloc@plt>
   118ec:	subs	r4, r0, #0
   118f0:	beq	11994 <rb_base64_encode@plt+0xaa8>
   118f4:	mov	r1, r7
   118f8:	mov	r0, #1
   118fc:	bl	10d18 <calloc@plt>
   11900:	subs	r3, r0, #0
   11904:	beq	11994 <rb_base64_encode@plt+0xaa8>
   11908:	str	r3, [r4, #12]
   1190c:	str	r7, [r4, #16]
   11910:	mov	r2, r7
   11914:	mov	r1, r8
   11918:	bl	10dc0 <memcpy@plt>
   1191c:	cmn	r6, #36	; 0x24
   11920:	str	r5, [r4, #36]	; 0x24
   11924:	beq	119a8 <rb_base64_encode@plt+0xabc>
   11928:	ldr	r3, [r6, #40]	; 0x28
   1192c:	str	r4, [r4]
   11930:	cmp	r3, #0
   11934:	stmib	r4, {r3, r5}
   11938:	strne	r4, [r3, #8]
   1193c:	beq	11998 <rb_base64_encode@plt+0xaac>
   11940:	ldr	r3, [r6, #44]	; 0x2c
   11944:	str	r4, [r6, #40]	; 0x28
   11948:	add	r3, r3, #1
   1194c:	str	r3, [r6, #44]	; 0x2c
   11950:	mov	r1, r6
   11954:	ldr	r0, [r6, #16]
   11958:	bl	114fc <rb_base64_encode@plt+0x610>
   1195c:	add	sp, sp, #392	; 0x188
   11960:	pop	{r4, r5, r6, r7, r8, lr}
   11964:	add	sp, sp, #8
   11968:	bx	lr
   1196c:	ldr	r3, [pc, #104]	; 119dc <rb_base64_encode@plt+0xaf0>
   11970:	add	r2, ip, r0
   11974:	add	r3, pc, r3
   11978:	add	r3, r3, r2, lsl #2
   1197c:	str	r1, [r3, #16]
   11980:	b	117ac <rb_base64_encode@plt+0x8c0>
   11984:	ldr	r3, [r7, #4]
   11988:	cmp	r3, #0
   1198c:	streq	r4, [r7, #4]
   11990:	b	11810 <rb_base64_encode@plt+0x924>
   11994:	bl	10e38 <rb_outofmemory@plt>
   11998:	ldr	r3, [r6, #36]	; 0x24
   1199c:	cmp	r3, #0
   119a0:	streq	r4, [r6, #36]	; 0x24
   119a4:	b	11940 <rb_base64_encode@plt+0xa54>
   119a8:	ldr	r3, [pc, #48]	; 119e0 <rb_base64_encode@plt+0xaf4>
   119ac:	ldr	r1, [pc, #48]	; 119e4 <rb_base64_encode@plt+0xaf8>
   119b0:	ldr	r0, [pc, #48]	; 119e8 <rb_base64_encode@plt+0xafc>
   119b4:	add	r3, pc, r3
   119b8:	mov	r2, #212	; 0xd4
   119bc:	add	r1, pc, r1
   119c0:	add	r0, pc, r0
   119c4:	bl	10d3c <__assert_fail@plt>
   119c8:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   119cc:	andeq	r3, r1, r8, lsr r9
   119d0:	ldrdeq	r3, [r1], -r8
   119d4:	andeq	r3, r1, r0, lsr #17
   119d8:			; <UNDEFINED> instruction: 0xfffffdcc
   119dc:	andeq	r3, r1, r8, ror r7
   119e0:	andeq	r2, r0, r4, asr #11
   119e4:	ldrdeq	r2, [r0], -ip
   119e8:	andeq	r2, r0, r4, lsl #12
   119ec:	push	{r4, r5, r6, lr}
   119f0:	mov	r5, r0
   119f4:	mov	r4, r1
   119f8:	b	11a0c <rb_base64_encode@plt+0xb20>
   119fc:	ldrd	r2, [r4, #96]	; 0x60
   11a00:	adds	r2, r2, r0
   11a04:	adc	r3, r3, r0, asr #31
   11a08:	strd	r2, [r4, #96]	; 0x60
   11a0c:	mov	r1, r5
   11a10:	ldr	r0, [r4, #16]
   11a14:	bl	10ec8 <rb_rawbuf_flush@plt>
   11a18:	cmp	r0, #0
   11a1c:	bgt	119fc <rb_base64_encode@plt+0xb10>
   11a20:	beq	11a9c <rb_base64_encode@plt+0xbb0>
   11a24:	bl	10ee0 <__errno_location@plt>
   11a28:	mov	r5, r0
   11a2c:	ldr	r0, [r0]
   11a30:	bl	10cc4 <rb_ignore_errno@plt>
   11a34:	cmp	r0, #0
   11a38:	beq	11ac0 <rb_base64_encode@plt+0xbd4>
   11a3c:	ldr	r0, [r4, #16]
   11a40:	bl	10e08 <rb_rawbuf_length@plt>
   11a44:	cmp	r0, #0
   11a48:	ble	11ae4 <rb_base64_encode@plt+0xbf8>
   11a4c:	ldr	r2, [pc, #168]	; 11afc <rb_base64_encode@plt+0xc10>
   11a50:	mov	r3, r4
   11a54:	add	r2, pc, r2
   11a58:	mov	r1, #2
   11a5c:	ldr	r0, [r4, #84]	; 0x54
   11a60:	bl	10cdc <rb_setselect@plt>
   11a64:	ldrb	r3, [r4, #128]	; 0x80
   11a68:	tst	r3, #1
   11a6c:	popeq	{r4, r5, r6, pc}
   11a70:	ldr	r0, [r4, #16]
   11a74:	bl	10e08 <rb_rawbuf_length@plt>
   11a78:	cmp	r0, #0
   11a7c:	popne	{r4, r5, r6, pc}
   11a80:	ldrb	r3, [r4, #128]	; 0x80
   11a84:	mov	r1, r4
   11a88:	ldr	r0, [r4, #88]	; 0x58
   11a8c:	bic	r3, r3, #1
   11a90:	strb	r3, [r4, #128]	; 0x80
   11a94:	pop	{r4, r5, r6, lr}
   11a98:	b	11ce8 <rb_base64_encode@plt+0xdfc>
   11a9c:	ldr	r3, [pc, #92]	; 11b00 <rb_base64_encode@plt+0xc14>
   11aa0:	ldr	r2, [pc, #92]	; 11b04 <rb_base64_encode@plt+0xc18>
   11aa4:	add	r3, pc, r3
   11aa8:	add	r2, pc, r2
   11aac:	mov	r1, #1
   11ab0:	mov	r0, r4
   11ab4:	bl	11714 <rb_base64_encode@plt+0x828>
   11ab8:	bl	10ee0 <__errno_location@plt>
   11abc:	mov	r5, r0
   11ac0:	ldr	r0, [r5]
   11ac4:	bl	10c94 <strerror@plt>
   11ac8:	ldr	r2, [pc, #56]	; 11b08 <rb_base64_encode@plt+0xc1c>
   11acc:	mov	r1, #1
   11ad0:	add	r2, pc, r2
   11ad4:	mov	r3, r0
   11ad8:	mov	r0, r4
   11adc:	pop	{r4, r5, r6, lr}
   11ae0:	b	11714 <rb_base64_encode@plt+0x828>
   11ae4:	mov	r3, #0
   11ae8:	mov	r2, r3
   11aec:	mov	r1, #2
   11af0:	ldr	r0, [r4, #84]	; 0x54
   11af4:	bl	10cdc <rb_setselect@plt>
   11af8:	b	11a64 <rb_base64_encode@plt+0xb78>
   11afc:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   11b00:	andeq	r2, r0, r0, asr #10
   11b04:	andeq	r2, r0, r0, ror #10
   11b08:	andeq	r2, r0, r4, lsl #10
   11b0c:	ldrb	r3, [r1, #128]	; 0x80
   11b10:	tst	r3, #2
   11b14:	bxne	lr
   11b18:	b	119ec <rb_base64_encode@plt+0xb00>
   11b1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b20:	sub	sp, sp, #16384	; 0x4000
   11b24:	sub	sp, sp, #28
   11b28:	add	r4, sp, #24
   11b2c:	mov	r5, r0
   11b30:	mov	r2, #16384	; 0x4000
   11b34:	mov	r0, r4
   11b38:	mov	r1, #0
   11b3c:	bl	10d30 <memset@plt>
   11b40:	ldr	r3, [pc, #320]	; 11c88 <rb_base64_encode@plt+0xd9c>
   11b44:	add	r8, r5, #52	; 0x34
   11b48:	add	r3, pc, r3
   11b4c:	str	r3, [sp, #8]
   11b50:	ldr	r3, [pc, #308]	; 11c8c <rb_base64_encode@plt+0xda0>
   11b54:	mov	r7, #0
   11b58:	mov	r6, #16384	; 0x4000
   11b5c:	mvn	r9, #126	; 0x7e
   11b60:	mov	sl, #126	; 0x7e
   11b64:	add	r3, pc, r3
   11b68:	str	r3, [sp, #12]
   11b6c:	mov	r3, #0
   11b70:	str	r7, [sp]
   11b74:	mov	r2, r6
   11b78:	mov	r1, r4
   11b7c:	mov	r0, r8
   11b80:	bl	10d9c <rb_linebuf_get@plt>
   11b84:	ldrb	r3, [r5, #128]	; 0x80
   11b88:	subs	fp, r0, #0
   11b8c:	beq	11c54 <rb_base64_encode@plt+0xd68>
   11b90:	tst	r3, #2
   11b94:	bne	11b6c <rb_base64_encode@plt+0xc80>
   11b98:	add	r3, fp, #2
   11b9c:	cmp	fp, #122	; 0x7a
   11ba0:	rev16	r3, r3
   11ba4:	sub	r1, r4, #4
   11ba8:	mov	r2, #4
   11bac:	ble	11c00 <rb_base64_encode@plt+0xd14>
   11bb0:	ldr	r0, [r5, #16]
   11bb4:	strh	r3, [r4, #-2]
   11bb8:	strb	r9, [r4, #-4]
   11bbc:	strb	sl, [r4, #-3]
   11bc0:	bl	10ebc <rb_rawbuf_append@plt>
   11bc4:	ldrb	r3, [r5, #128]	; 0x80
   11bc8:	tst	r3, #2
   11bcc:	bne	11b6c <rb_base64_encode@plt+0xc80>
   11bd0:	mov	r2, fp
   11bd4:	mov	r1, r4
   11bd8:	ldr	r0, [r5, #16]
   11bdc:	bl	10ebc <rb_rawbuf_append@plt>
   11be0:	ldrb	r3, [r5, #128]	; 0x80
   11be4:	mov	r2, #2
   11be8:	ldr	r1, [sp, #8]
   11bec:	tst	r3, #2
   11bf0:	ldr	r0, [r5, #16]
   11bf4:	bne	11b6c <rb_base64_encode@plt+0xc80>
   11bf8:	bl	10ebc <rb_rawbuf_append@plt>
   11bfc:	b	11b6c <rb_base64_encode@plt+0xc80>
   11c00:	add	r3, fp, #2
   11c04:	and	r3, r3, #127	; 0x7f
   11c08:	mov	r2, #2
   11c0c:	ldr	r0, [r5, #16]
   11c10:	strb	r3, [r4, #-3]
   11c14:	strb	r9, [r4, #-4]
   11c18:	bl	10ebc <rb_rawbuf_append@plt>
   11c1c:	ldrb	r3, [r5, #128]	; 0x80
   11c20:	tst	r3, #2
   11c24:	bne	11b6c <rb_base64_encode@plt+0xc80>
   11c28:	mov	r2, fp
   11c2c:	mov	r1, r4
   11c30:	ldr	r0, [r5, #16]
   11c34:	bl	10ebc <rb_rawbuf_append@plt>
   11c38:	ldrb	r3, [r5, #128]	; 0x80
   11c3c:	mov	r2, #2
   11c40:	ldr	r1, [sp, #12]
   11c44:	tst	r3, #2
   11c48:	ldr	r0, [r5, #16]
   11c4c:	beq	11bf8 <rb_base64_encode@plt+0xd0c>
   11c50:	b	11b6c <rb_base64_encode@plt+0xc80>
   11c54:	tst	r3, #8
   11c58:	beq	11c64 <rb_base64_encode@plt+0xd78>
   11c5c:	tst	r3, #2
   11c60:	beq	11c70 <rb_base64_encode@plt+0xd84>
   11c64:	add	sp, sp, #16384	; 0x4000
   11c68:	add	sp, sp, #28
   11c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c70:	mov	r1, r5
   11c74:	ldr	r0, [r5, #84]	; 0x54
   11c78:	bl	119ec <rb_base64_encode@plt+0xb00>
   11c7c:	add	sp, sp, #16384	; 0x4000
   11c80:	add	sp, sp, #28
   11c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c88:	andeq	r2, r0, r4, asr #9
   11c8c:	andeq	r2, r0, r8, lsr #9
   11c90:	push	{r4, lr}
   11c94:	mov	r4, r0
   11c98:	ldrb	r1, [r0, #128]	; 0x80
   11c9c:	mov	r3, #0
   11ca0:	ldr	r0, [r0, #88]	; 0x58
   11ca4:	orr	r1, r1, #1
   11ca8:	mov	r2, r3
   11cac:	strb	r1, [r4, #128]	; 0x80
   11cb0:	mov	r1, #1
   11cb4:	bl	10cdc <rb_setselect@plt>
   11cb8:	ldrb	r3, [r4, #128]	; 0x80
   11cbc:	tst	r3, #8
   11cc0:	beq	11ccc <rb_base64_encode@plt+0xde0>
   11cc4:	tst	r3, #2
   11cc8:	beq	11cd4 <rb_base64_encode@plt+0xde8>
   11ccc:	mov	r0, #1
   11cd0:	pop	{r4, pc}
   11cd4:	ldr	r0, [r4, #84]	; 0x54
   11cd8:	mov	r1, r4
   11cdc:	bl	119ec <rb_base64_encode@plt+0xb00>
   11ce0:	mov	r0, #1
   11ce4:	pop	{r4, pc}
   11ce8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cec:	sub	sp, sp, #16384	; 0x4000
   11cf0:	sub	sp, sp, #4
   11cf4:	mov	r4, r1
   11cf8:	mov	r0, sp
   11cfc:	mov	r2, #16384	; 0x4000
   11d00:	mov	r1, #0
   11d04:	bl	10d30 <memset@plt>
   11d08:	cmp	r4, #0
   11d0c:	beq	11d1c <rb_base64_encode@plt+0xe30>
   11d10:	ldrb	r3, [r4, #128]	; 0x80
   11d14:	tst	r3, #2
   11d18:	beq	11d28 <rb_base64_encode@plt+0xe3c>
   11d1c:	add	sp, sp, #16384	; 0x4000
   11d20:	add	sp, sp, #4
   11d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d28:	ldr	r0, [r4, #16]
   11d2c:	bl	10e08 <rb_rawbuf_length@plt>
   11d30:	mov	r5, sp
   11d34:	cmp	r0, #4096	; 0x1000
   11d38:	bge	11e0c <rb_base64_encode@plt+0xf20>
   11d3c:	ldr	fp, [pc, #248]	; 11e3c <rb_base64_encode@plt+0xf50>
   11d40:	mov	r8, #16384	; 0x4000
   11d44:	add	r9, r4, #52	; 0x34
   11d48:	mov	sl, #0
   11d4c:	ldrb	r3, [r4, #128]	; 0x80
   11d50:	mov	r2, r8
   11d54:	mov	r1, r5
   11d58:	tst	r3, #2
   11d5c:	bne	11d1c <rb_base64_encode@plt+0xe30>
   11d60:	ldr	r0, [r4, #88]	; 0x58
   11d64:	bl	10d84 <rb_read@plt>
   11d68:	mov	r3, sl
   11d6c:	mov	r1, r5
   11d70:	subs	ip, r0, #0
   11d74:	mov	r2, ip
   11d78:	mov	r0, r9
   11d7c:	beq	11e28 <rb_base64_encode@plt+0xf3c>
   11d80:	blt	11dc8 <rb_base64_encode@plt+0xedc>
   11d84:	ldrd	r6, [r4, #112]	; 0x70
   11d88:	adds	r6, r6, ip
   11d8c:	adc	r7, r7, ip, asr #31
   11d90:	strd	r6, [r4, #112]	; 0x70
   11d94:	bl	10d48 <rb_linebuf_parse@plt>
   11d98:	ldrb	r3, [r4, #128]	; 0x80
   11d9c:	tst	r3, #2
   11da0:	bne	11d1c <rb_base64_encode@plt+0xe30>
   11da4:	ldr	r0, [r4, #16]
   11da8:	bl	10e08 <rb_rawbuf_length@plt>
   11dac:	cmp	r0, fp
   11db0:	ble	11d4c <rb_base64_encode@plt+0xe60>
   11db4:	mov	r0, r4
   11db8:	bl	11c90 <rb_base64_encode@plt+0xda4>
   11dbc:	cmp	r0, #0
   11dc0:	beq	11d4c <rb_base64_encode@plt+0xe60>
   11dc4:	b	11d1c <rb_base64_encode@plt+0xe30>
   11dc8:	bl	10ee0 <__errno_location@plt>
   11dcc:	ldr	r0, [r0]
   11dd0:	bl	10cc4 <rb_ignore_errno@plt>
   11dd4:	cmp	r0, #0
   11dd8:	beq	11e28 <rb_base64_encode@plt+0xf3c>
   11ddc:	ldr	r2, [pc, #92]	; 11e40 <rb_base64_encode@plt+0xf54>
   11de0:	mov	r3, r4
   11de4:	add	r2, pc, r2
   11de8:	mov	r1, #1
   11dec:	ldr	r0, [r4, #88]	; 0x58
   11df0:	bl	10cdc <rb_setselect@plt>
   11df4:	ldrb	r3, [r4, #128]	; 0x80
   11df8:	tst	r3, #8
   11dfc:	beq	11d1c <rb_base64_encode@plt+0xe30>
   11e00:	mov	r0, r4
   11e04:	bl	11b1c <rb_base64_encode@plt+0xc30>
   11e08:	b	11d1c <rb_base64_encode@plt+0xe30>
   11e0c:	mov	r0, r4
   11e10:	bl	11c90 <rb_base64_encode@plt+0xda4>
   11e14:	cmp	r0, #0
   11e18:	beq	11d3c <rb_base64_encode@plt+0xe50>
   11e1c:	add	sp, sp, #16384	; 0x4000
   11e20:	add	sp, sp, #4
   11e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e28:	mov	r2, #0
   11e2c:	mov	r0, r4
   11e30:	mov	r1, r2
   11e34:	bl	11714 <rb_base64_encode@plt+0x828>
   11e38:	b	11d1c <rb_base64_encode@plt+0xe30>
   11e3c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11e40:			; <UNDEFINED> instruction: 0xfffffefc
   11e44:	ldrb	r3, [r1, #128]	; 0x80
   11e48:	tst	r3, #2
   11e4c:	bxne	lr
   11e50:	push	{r4, r5, r6, lr}
   11e54:	mov	r5, r0
   11e58:	mov	r4, r1
   11e5c:	add	r6, r1, #24
   11e60:	b	11e74 <rb_base64_encode@plt+0xf88>
   11e64:	ldrd	r2, [r4, #120]	; 0x78
   11e68:	adds	r2, r2, r0
   11e6c:	adc	r3, r3, r0, asr #31
   11e70:	strd	r2, [r4, #120]	; 0x78
   11e74:	mov	r1, r6
   11e78:	mov	r0, r5
   11e7c:	bl	10da8 <rb_linebuf_flush@plt>
   11e80:	cmp	r0, #0
   11e84:	bgt	11e64 <rb_base64_encode@plt+0xf78>
   11e88:	beq	11ec8 <rb_base64_encode@plt+0xfdc>
   11e8c:	bl	10ee0 <__errno_location@plt>
   11e90:	ldr	r0, [r0]
   11e94:	bl	10cc4 <rb_ignore_errno@plt>
   11e98:	cmp	r0, #0
   11e9c:	beq	11ec8 <rb_base64_encode@plt+0xfdc>
   11ea0:	ldr	r3, [r4, #40]	; 0x28
   11ea4:	cmp	r3, #0
   11ea8:	ble	11edc <rb_base64_encode@plt+0xff0>
   11eac:	ldr	r2, [pc, #64]	; 11ef4 <rb_base64_encode@plt+0x1008>
   11eb0:	mov	r3, r4
   11eb4:	ldr	r0, [r4, #88]	; 0x58
   11eb8:	add	r2, pc, r2
   11ebc:	mov	r1, #2
   11ec0:	pop	{r4, r5, r6, lr}
   11ec4:	b	10cdc <rb_setselect@plt>
   11ec8:	mov	r2, #0
   11ecc:	mov	r0, r4
   11ed0:	mov	r1, r2
   11ed4:	pop	{r4, r5, r6, lr}
   11ed8:	b	11714 <rb_base64_encode@plt+0x828>
   11edc:	mov	r3, #0
   11ee0:	ldr	r0, [r4, #88]	; 0x58
   11ee4:	mov	r2, r3
   11ee8:	mov	r1, #2
   11eec:	pop	{r4, r5, r6, lr}
   11ef0:	b	10cdc <rb_setselect@plt>
   11ef4:			; <UNDEFINED> instruction: 0xffffff84
   11ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11efc:	sub	sp, sp, #32768	; 0x8000
   11f00:	sub	sp, sp, #164	; 0xa4
   11f04:	add	r8, sp, #160	; 0xa0
   11f08:	str	r0, [sp, #16]
   11f0c:	mov	fp, r1
   11f10:	mov	r0, r8
   11f14:	mov	r2, #16384	; 0x4000
   11f18:	mov	r1, #0
   11f1c:	bl	10d30 <memset@plt>
   11f20:	cmp	fp, #0
   11f24:	beq	12210 <rb_base64_encode@plt+0x1324>
   11f28:	ldrb	r3, [fp, #128]	; 0x80
   11f2c:	tst	r3, #2
   11f30:	bne	12210 <rb_base64_encode@plt+0x1324>
   11f34:	ldr	r3, [pc, #1428]	; 124d0 <rb_base64_encode@plt+0x15e4>
   11f38:	ldr	r9, [pc, #1428]	; 124d4 <rb_base64_encode@plt+0x15e8>
   11f3c:	add	r3, pc, r3
   11f40:	str	r3, [sp, #28]
   11f44:	ldr	r3, [pc, #1420]	; 124d8 <rb_base64_encode@plt+0x15ec>
   11f48:	add	r9, pc, r9
   11f4c:	add	r3, pc, r3
   11f50:	str	r3, [sp, #32]
   11f54:	ldr	r3, [pc, #1408]	; 124dc <rb_base64_encode@plt+0x15f0>
   11f58:	add	sl, sp, #40	; 0x28
   11f5c:	add	r3, pc, r3
   11f60:	str	r3, [sp, #36]	; 0x24
   11f64:	ldr	r3, [pc, #1396]	; 124e0 <rb_base64_encode@plt+0x15f4>
   11f68:	add	r3, pc, r3
   11f6c:	str	r3, [sp, #20]
   11f70:	mov	r2, #16384	; 0x4000
   11f74:	mov	r1, r8
   11f78:	ldr	r0, [sp, #16]
   11f7c:	bl	10d84 <rb_read@plt>
   11f80:	subs	r3, r0, #0
   11f84:	str	r3, [sp]
   11f88:	blt	12494 <rb_base64_encode@plt+0x15a8>
   11f8c:	beq	12474 <rb_base64_encode@plt+0x1588>
   11f90:	ldr	r2, [sp]
   11f94:	mov	r1, r8
   11f98:	ldr	r0, [fp, #20]
   11f9c:	bl	10ebc <rb_rawbuf_append@plt>
   11fa0:	ldrb	r3, [fp, #128]	; 0x80
   11fa4:	ands	r5, r3, #8
   11fa8:	beq	1221c <rb_base64_encode@plt+0x1330>
   11fac:	ldr	r3, [pc, #1328]	; 124e4 <rb_base64_encode@plt+0x15f8>
   11fb0:	mov	r6, #2
   11fb4:	add	r3, pc, r3
   11fb8:	str	r3, [sp, #24]
   11fbc:	ldr	r3, [pc, #1316]	; 124e8 <rb_base64_encode@plt+0x15fc>
   11fc0:	add	r3, pc, r3
   11fc4:	str	r3, [sp, #4]
   11fc8:	ldr	r3, [pc, #1308]	; 124ec <rb_base64_encode@plt+0x1600>
   11fcc:	add	r3, pc, r3
   11fd0:	str	r3, [sp, #8]
   11fd4:	ldr	r3, [pc, #1300]	; 124f0 <rb_base64_encode@plt+0x1604>
   11fd8:	add	r3, pc, r3
   11fdc:	str	r3, [sp, #12]
   11fe0:	mov	r2, r6
   11fe4:	mov	r1, sl
   11fe8:	ldr	r0, [fp, #20]
   11fec:	bl	10e44 <rb_rawbuf_get@plt>
   11ff0:	cmp	r0, #2
   11ff4:	bne	121ec <rb_base64_encode@plt+0x1300>
   11ff8:	ldrb	r1, [r8, #-119]	; 0xffffff89
   11ffc:	and	r2, r1, #127	; 0x7f
   12000:	cmp	r2, #126	; 0x7e
   12004:	strb	r2, [r8, #-119]	; 0xffffff89
   12008:	lsr	r7, r1, #7
   1200c:	beq	1209c <rb_base64_encode@plt+0x11b0>
   12010:	cmp	r2, #127	; 0x7f
   12014:	beq	11fe0 <rb_base64_encode@plt+0x10f4>
   12018:	cmp	r7, #1
   1201c:	bne	12158 <rb_base64_encode@plt+0x126c>
   12020:	sub	r4, r8, #96	; 0x60
   12024:	mov	r1, r4
   12028:	mov	r2, #4
   1202c:	ldr	r0, [fp, #20]
   12030:	bl	10e44 <rb_rawbuf_get@plt>
   12034:	cmp	r0, #0
   12038:	beq	121c4 <rb_base64_encode@plt+0x12d8>
   1203c:	add	r5, sp, #16384	; 0x4000
   12040:	add	r5, r5, #160	; 0xa0
   12044:	mov	r1, r5
   12048:	ldrb	r2, [r8, #-119]	; 0xffffff89
   1204c:	ldr	r0, [fp, #20]
   12050:	bl	10e44 <rb_rawbuf_get@plt>
   12054:	cmp	r0, #0
   12058:	beq	12174 <rb_base64_encode@plt+0x1288>
   1205c:	ble	12384 <rb_base64_encode@plt+0x1498>
   12060:	mov	ip, r5
   12064:	mov	r2, #0
   12068:	and	r3, r2, #3
   1206c:	ldrb	r1, [ip]
   12070:	ldrb	r3, [r4, r3]
   12074:	add	r2, r2, #1
   12078:	cmp	r2, r0
   1207c:	eor	r3, r3, r1
   12080:	strb	r3, [ip], #1
   12084:	bne	12068 <rb_base64_encode@plt+0x117c>
   12088:	mov	r1, r5
   1208c:	mov	r3, #1
   12090:	add	r0, fp, #24
   12094:	bl	10d48 <rb_linebuf_parse@plt>
   12098:	b	11fe0 <rb_base64_encode@plt+0x10f4>
   1209c:	add	r5, sp, #16384	; 0x4000
   120a0:	add	r5, r5, #160	; 0xa0
   120a4:	mov	r2, #16384	; 0x4000
   120a8:	mov	r1, #0
   120ac:	mov	r0, r5
   120b0:	bl	10d30 <memset@plt>
   120b4:	mov	r2, r6
   120b8:	sub	r1, r8, #116	; 0x74
   120bc:	ldr	r0, [fp, #20]
   120c0:	bl	10e44 <rb_rawbuf_get@plt>
   120c4:	cmp	r0, #0
   120c8:	beq	121b0 <rb_base64_encode@plt+0x12c4>
   120cc:	ldrh	r2, [r8, #-116]	; 0xffffff8c
   120d0:	cmp	r7, #1
   120d4:	rev16	r2, r2
   120d8:	strh	r2, [r8, #-116]	; 0xffffff8c
   120dc:	uxth	r2, r2
   120e0:	bne	12188 <rb_base64_encode@plt+0x129c>
   120e4:	sub	r4, r8, #96	; 0x60
   120e8:	mov	r1, r4
   120ec:	mov	r2, #4
   120f0:	ldr	r0, [fp, #20]
   120f4:	bl	10e44 <rb_rawbuf_get@plt>
   120f8:	cmp	r0, #0
   120fc:	beq	121d8 <rb_base64_encode@plt+0x12ec>
   12100:	ldrh	r2, [r8, #-116]	; 0xffffff8c
   12104:	mov	r1, r5
   12108:	ldr	r0, [fp, #20]
   1210c:	bl	10e44 <rb_rawbuf_get@plt>
   12110:	cmp	r0, #0
   12114:	beq	1219c <rb_base64_encode@plt+0x12b0>
   12118:	ble	12384 <rb_base64_encode@plt+0x1498>
   1211c:	mov	ip, r5
   12120:	mov	r2, #0
   12124:	and	r3, r2, #3
   12128:	ldrb	r1, [ip]
   1212c:	ldrb	r3, [r4, r3]
   12130:	add	r2, r2, #1
   12134:	cmp	r2, r0
   12138:	eor	r3, r3, r1
   1213c:	strb	r3, [ip], #1
   12140:	bne	12124 <rb_base64_encode@plt+0x1238>
   12144:	mov	r1, r5
   12148:	mov	r3, #1
   1214c:	add	r0, fp, #24
   12150:	bl	10d48 <rb_linebuf_parse@plt>
   12154:	b	11fe0 <rb_base64_encode@plt+0x10f4>
   12158:	add	r5, sp, #16384	; 0x4000
   1215c:	add	r5, r5, #160	; 0xa0
   12160:	mov	r1, r5
   12164:	ldr	r0, [fp, #20]
   12168:	bl	10e44 <rb_rawbuf_get@plt>
   1216c:	subs	r2, r0, #0
   12170:	bne	12088 <rb_base64_encode@plt+0x119c>
   12174:	ldr	r2, [sp, #8]
   12178:	mov	r1, #1
   1217c:	mov	r0, fp
   12180:	bl	11714 <rb_base64_encode@plt+0x828>
   12184:	b	11fe0 <rb_base64_encode@plt+0x10f4>
   12188:	mov	r1, r5
   1218c:	ldr	r0, [fp, #20]
   12190:	bl	10e44 <rb_rawbuf_get@plt>
   12194:	subs	r2, r0, #0
   12198:	bne	12088 <rb_base64_encode@plt+0x119c>
   1219c:	ldr	r2, [sp, #20]
   121a0:	mov	r1, #1
   121a4:	mov	r0, fp
   121a8:	bl	11714 <rb_base64_encode@plt+0x828>
   121ac:	b	11fe0 <rb_base64_encode@plt+0x10f4>
   121b0:	ldr	r2, [sp, #4]
   121b4:	mov	r1, #1
   121b8:	mov	r0, fp
   121bc:	bl	11714 <rb_base64_encode@plt+0x828>
   121c0:	b	11fe0 <rb_base64_encode@plt+0x10f4>
   121c4:	mov	r1, r7
   121c8:	ldr	r2, [sp, #12]
   121cc:	mov	r0, fp
   121d0:	bl	11714 <rb_base64_encode@plt+0x828>
   121d4:	b	11fe0 <rb_base64_encode@plt+0x10f4>
   121d8:	mov	r1, r7
   121dc:	ldr	r2, [sp, #24]
   121e0:	mov	r0, fp
   121e4:	bl	11714 <rb_base64_encode@plt+0x828>
   121e8:	b	11fe0 <rb_base64_encode@plt+0x10f4>
   121ec:	mov	r1, fp
   121f0:	ldr	r0, [fp, #88]	; 0x58
   121f4:	bl	11e44 <rb_base64_encode@plt+0xf58>
   121f8:	ldr	r3, [sp]
   121fc:	cmp	r3, #16384	; 0x4000
   12200:	blt	122a0 <rb_base64_encode@plt+0x13b4>
   12204:	ldrb	r3, [fp, #128]	; 0x80
   12208:	tst	r3, #2
   1220c:	beq	11f70 <rb_base64_encode@plt+0x1084>
   12210:	add	sp, sp, #32768	; 0x8000
   12214:	add	sp, sp, #164	; 0xa4
   12218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1221c:	add	r4, sp, #16384	; 0x4000
   12220:	add	r4, r4, #160	; 0xa0
   12224:	mov	r1, r5
   12228:	mov	r0, r4
   1222c:	mov	r2, #16384	; 0x4000
   12230:	bl	10d30 <memset@plt>
   12234:	add	r7, fp, #129	; 0x81
   12238:	str	r5, [sp, #4]
   1223c:	mov	r6, #37	; 0x25
   12240:	mov	r5, #16384	; 0x4000
   12244:	b	1225c <rb_base64_encode@plt+0x1370>
   12248:	mov	r1, r9
   1224c:	mov	r0, r4
   12250:	bl	10dd8 <rb_strcasestr@plt>
   12254:	cmp	r0, #0
   12258:	bne	122c4 <rb_base64_encode@plt+0x13d8>
   1225c:	mov	r2, r5
   12260:	mov	r1, r4
   12264:	ldr	r0, [fp, #20]
   12268:	bl	10e44 <rb_rawbuf_get@plt>
   1226c:	cmp	r0, #0
   12270:	bne	12248 <rb_base64_encode@plt+0x135c>
   12274:	ldrb	r3, [fp, #128]	; 0x80
   12278:	tst	r3, #8
   1227c:	bne	123ac <rb_base64_encode@plt+0x14c0>
   12280:	tst	r3, #2
   12284:	bne	121f8 <rb_base64_encode@plt+0x130c>
   12288:	mov	r1, fp
   1228c:	ldr	r0, [fp, #84]	; 0x54
   12290:	bl	119ec <rb_base64_encode@plt+0xb00>
   12294:	ldr	r3, [sp]
   12298:	cmp	r3, #16384	; 0x4000
   1229c:	bge	12204 <rb_base64_encode@plt+0x1318>
   122a0:	ldr	r2, [pc, #588]	; 124f4 <rb_base64_encode@plt+0x1608>
   122a4:	mov	r3, fp
   122a8:	ldr	r0, [sp, #16]
   122ac:	add	r2, pc, r2
   122b0:	mov	r1, #1
   122b4:	bl	10cdc <rb_setselect@plt>
   122b8:	add	sp, sp, #32768	; 0x8000
   122bc:	add	sp, sp, #164	; 0xa4
   122c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122c4:	add	r3, sp, #32768	; 0x8000
   122c8:	add	r1, r0, #18
   122cc:	add	r3, r3, #160	; 0xa0
   122d0:	cmp	r1, r3
   122d4:	bcs	12324 <rb_base64_encode@plt+0x1438>
   122d8:	ldrb	r3, [r0, #18]
   122dc:	cmp	r3, #0
   122e0:	beq	12324 <rb_base64_encode@plt+0x1438>
   122e4:	cmp	r3, #32
   122e8:	cmpne	r3, #9
   122ec:	addeq	r2, sp, #32768	; 0x8000
   122f0:	addeq	r0, r0, #19
   122f4:	addeq	r2, r2, #160	; 0xa0
   122f8:	beq	12318 <rb_base64_encode@plt+0x142c>
   122fc:	b	12340 <rb_base64_encode@plt+0x1454>
   12300:	ldrb	r3, [r0], #1
   12304:	cmp	r3, #0
   12308:	beq	12324 <rb_base64_encode@plt+0x1438>
   1230c:	cmp	r3, #32
   12310:	cmpne	r3, #9
   12314:	bne	12340 <rb_base64_encode@plt+0x1454>
   12318:	cmp	r0, r2
   1231c:	mov	r1, r0
   12320:	bne	12300 <rb_base64_encode@plt+0x1414>
   12324:	mov	r2, r6
   12328:	mov	r0, r7
   1232c:	bl	10d54 <rb_strlcpy@plt>
   12330:	ldrb	r3, [fp, #128]	; 0x80
   12334:	orr	r3, r3, #8
   12338:	strb	r3, [fp, #128]	; 0x80
   1233c:	b	1225c <rb_base64_encode@plt+0x1370>
   12340:	cmp	r3, #10
   12344:	cmpne	r3, #13
   12348:	addne	r3, r1, #1
   1234c:	bne	1236c <rb_base64_encode@plt+0x1480>
   12350:	b	1239c <rb_base64_encode@plt+0x14b0>
   12354:	ldrb	r2, [r3], #1
   12358:	cmp	r2, #0
   1235c:	beq	12324 <rb_base64_encode@plt+0x1438>
   12360:	cmp	r2, #10
   12364:	cmpne	r2, #13
   12368:	beq	123a0 <rb_base64_encode@plt+0x14b4>
   1236c:	add	r2, sp, #32768	; 0x8000
   12370:	add	r2, r2, #160	; 0xa0
   12374:	cmp	r3, r2
   12378:	mov	r0, r3
   1237c:	bcc	12354 <rb_base64_encode@plt+0x1468>
   12380:	b	12324 <rb_base64_encode@plt+0x1438>
   12384:	mov	r2, r0
   12388:	mov	r1, r5
   1238c:	mov	r3, #1
   12390:	add	r0, fp, #24
   12394:	bl	10d48 <rb_linebuf_parse@plt>
   12398:	b	11fe0 <rb_base64_encode@plt+0x10f4>
   1239c:	mov	r0, r1
   123a0:	ldrb	r3, [sp, #4]
   123a4:	strb	r3, [r0]
   123a8:	b	12324 <rb_base64_encode@plt+0x1438>
   123ac:	sub	r4, r8, #96	; 0x60
   123b0:	mov	r0, r4
   123b4:	add	r5, fp, #129	; 0x81
   123b8:	bl	13d04 <rb_base64_encode@plt+0x2e18>
   123bc:	mov	r0, r5
   123c0:	bl	10db4 <strlen@plt>
   123c4:	mov	r1, r5
   123c8:	sub	r5, r8, #116	; 0x74
   123cc:	mov	r2, r0
   123d0:	mov	r0, r4
   123d4:	bl	13d50 <rb_base64_encode@plt+0x2e64>
   123d8:	mov	r0, r4
   123dc:	mov	r2, #36	; 0x24
   123e0:	ldr	r1, [sp, #28]
   123e4:	bl	13d50 <rb_base64_encode@plt+0x2e64>
   123e8:	mov	r0, r4
   123ec:	mov	r1, r5
   123f0:	bl	13e00 <rb_base64_encode@plt+0x2f14>
   123f4:	mov	r0, r5
   123f8:	mov	r1, #20
   123fc:	bl	10eec <rb_base64_encode@plt>
   12400:	ldrb	r3, [fp, #128]	; 0x80
   12404:	tst	r3, #2
   12408:	mov	r4, r0
   1240c:	ldr	r0, [fp, #16]
   12410:	beq	12424 <rb_base64_encode@plt+0x1538>
   12414:	mov	r0, r4
   12418:	bl	10d6c <free@plt>
   1241c:	ldrb	r3, [fp, #128]	; 0x80
   12420:	b	12280 <rb_base64_encode@plt+0x1394>
   12424:	mov	r2, #129	; 0x81
   12428:	ldr	r1, [sp, #32]
   1242c:	bl	10ebc <rb_rawbuf_append@plt>
   12430:	mov	r0, r4
   12434:	bl	10db4 <strlen@plt>
   12438:	ldrb	r1, [fp, #128]	; 0x80
   1243c:	tst	r1, #2
   12440:	mov	r2, r0
   12444:	ldr	r0, [fp, #16]
   12448:	bne	12414 <rb_base64_encode@plt+0x1528>
   1244c:	mov	r1, r4
   12450:	bl	10ebc <rb_rawbuf_append@plt>
   12454:	ldrb	r3, [fp, #128]	; 0x80
   12458:	ldr	r0, [fp, #16]
   1245c:	tst	r3, #2
   12460:	bne	12414 <rb_base64_encode@plt+0x1528>
   12464:	mov	r2, #4
   12468:	ldr	r1, [sp, #36]	; 0x24
   1246c:	bl	10ebc <rb_rawbuf_append@plt>
   12470:	b	12414 <rb_base64_encode@plt+0x1528>
   12474:	ldr	r2, [pc, #124]	; 124f8 <rb_base64_encode@plt+0x160c>
   12478:	mov	r0, fp
   1247c:	add	r2, pc, r2
   12480:	mov	r1, #0
   12484:	bl	11714 <rb_base64_encode@plt+0x828>
   12488:	add	sp, sp, #32768	; 0x8000
   1248c:	add	sp, sp, #164	; 0xa4
   12490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12494:	bl	10ee0 <__errno_location@plt>
   12498:	ldr	r0, [r0]
   1249c:	bl	10cc4 <rb_ignore_errno@plt>
   124a0:	cmp	r0, #0
   124a4:	beq	12474 <rb_base64_encode@plt+0x1588>
   124a8:	ldr	r2, [pc, #76]	; 124fc <rb_base64_encode@plt+0x1610>
   124ac:	ldr	r0, [sp, #16]
   124b0:	mov	r3, fp
   124b4:	add	r2, pc, r2
   124b8:	mov	r1, #1
   124bc:	bl	10cdc <rb_setselect@plt>
   124c0:	mov	r1, fp
   124c4:	ldr	r0, [fp, #88]	; 0x58
   124c8:	bl	11e44 <rb_base64_encode@plt+0xf58>
   124cc:	b	12210 <rb_base64_encode@plt+0x1324>
   124d0:	strdeq	r2, [r0], -ip
   124d4:	ldrdeq	r2, [r0], -ip
   124d8:	andeq	r2, r0, r4, lsl r1
   124dc:	andeq	r2, r0, r8, lsl #3
   124e0:	andeq	r2, r0, r0, ror #3
   124e4:	andeq	r2, r0, r8, ror #2
   124e8:	andeq	r2, r0, ip, lsr #2
   124ec:	andeq	r2, r0, ip, ror r1
   124f0:	andeq	r2, r0, r4, asr #2
   124f4:			; <UNDEFINED> instruction: 0xfffffc44
   124f8:	muleq	r0, r4, fp
   124fc:			; <UNDEFINED> instruction: 0xfffffa3c
   12500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12504:	mov	r4, r1
   12508:	sub	sp, sp, #20
   1250c:	mov	r8, #40	; 0x28
   12510:	mov	r6, #1
   12514:	mov	r7, #16384	; 0x4000
   12518:	mov	r9, #4
   1251c:	mov	r1, r8
   12520:	mov	r0, r6
   12524:	bl	10d18 <calloc@plt>
   12528:	subs	r5, r0, #0
   1252c:	beq	126d4 <rb_base64_encode@plt+0x17e8>
   12530:	mov	r1, r7
   12534:	mov	r0, r6
   12538:	bl	10d18 <calloc@plt>
   1253c:	subs	r1, r0, #0
   12540:	beq	126d4 <rb_base64_encode@plt+0x17e8>
   12544:	add	fp, r5, #20
   12548:	ldr	r0, [r4, #16]
   1254c:	str	r1, [r5, #12]
   12550:	str	r7, [r5, #16]
   12554:	mov	r3, fp
   12558:	str	r9, [sp]
   1255c:	mov	r2, #16384	; 0x4000
   12560:	bl	10e80 <rb_recv_fd_buf@plt>
   12564:	cmp	r0, #0
   12568:	ble	125c8 <rb_base64_encode@plt+0x16dc>
   1256c:	ldr	r3, [r4, #28]
   12570:	mov	r2, #0
   12574:	cmp	r3, #0
   12578:	str	r0, [r5, #16]
   1257c:	str	r5, [r5]
   12580:	str	r2, [r5, #8]
   12584:	str	r3, [r5, #4]
   12588:	strne	r5, [r3, #8]
   1258c:	beq	126d8 <rb_base64_encode@plt+0x17ec>
   12590:	ldr	r2, [r4, #32]
   12594:	mov	r3, fp
   12598:	add	r2, r2, #1
   1259c:	str	r2, [r4, #32]
   125a0:	mov	r2, #0
   125a4:	str	r5, [r4, #28]
   125a8:	ldr	r1, [r3], #4
   125ac:	cmp	r1, #0
   125b0:	beq	125c0 <rb_base64_encode@plt+0x16d4>
   125b4:	add	r2, r2, #1
   125b8:	cmp	r2, #4
   125bc:	bne	125a8 <rb_base64_encode@plt+0x16bc>
   125c0:	str	r2, [r5, #36]	; 0x24
   125c4:	b	1251c <rb_base64_encode@plt+0x1630>
   125c8:	mov	sl, r0
   125cc:	ldr	r0, [r5, #12]
   125d0:	cmp	r0, #0
   125d4:	beq	125dc <rb_base64_encode@plt+0x16f0>
   125d8:	bl	10d6c <free@plt>
   125dc:	mov	r0, r5
   125e0:	bl	10d6c <free@plt>
   125e4:	cmp	sl, #0
   125e8:	beq	1285c <rb_base64_encode@plt+0x1970>
   125ec:	bl	10ee0 <__errno_location@plt>
   125f0:	ldr	r0, [r0]
   125f4:	bl	10cc4 <rb_ignore_errno@plt>
   125f8:	cmp	r0, #0
   125fc:	beq	1285c <rb_base64_encode@plt+0x1970>
   12600:	ldr	r5, [r4, #24]
   12604:	cmp	r5, #0
   12608:	beq	126e8 <rb_base64_encode@plt+0x17fc>
   1260c:	ldr	r9, [pc, #592]	; 12864 <rb_base64_encode@plt+0x1978>
   12610:	ldr	r3, [pc, #592]	; 12868 <rb_base64_encode@plt+0x197c>
   12614:	ldr	r7, [r5, #8]
   12618:	ldr	sl, [pc, #588]	; 1286c <rb_base64_encode@plt+0x1980>
   1261c:	add	r9, pc, r9
   12620:	add	r3, pc, r3
   12624:	str	r3, [sp, #8]
   12628:	ldr	r6, [r5]
   1262c:	ldr	r0, [r6, #12]
   12630:	ldrb	r3, [r0]
   12634:	cmp	r3, #65	; 0x41
   12638:	bne	12674 <rb_base64_encode@plt+0x1788>
   1263c:	ldr	r3, [r6, #36]	; 0x24
   12640:	cmp	r3, #2
   12644:	beq	12708 <rb_base64_encode@plt+0x181c>
   12648:	cmp	r3, #0
   1264c:	ble	12674 <rb_base64_encode@plt+0x1788>
   12650:	add	fp, r6, #20
   12654:	mov	r8, #0
   12658:	ldr	r0, [fp], #4
   1265c:	bl	10de4 <rb_close@plt>
   12660:	ldr	r3, [r6, #36]	; 0x24
   12664:	add	r8, r8, #1
   12668:	cmp	r8, r3
   1266c:	blt	12658 <rb_base64_encode@plt+0x176c>
   12670:	ldr	r0, [r6, #12]
   12674:	ldmib	r5, {r2, r3}
   12678:	cmp	r3, #0
   1267c:	strne	r2, [r3, #4]
   12680:	ldrne	r2, [r5, #4]
   12684:	streq	r2, [r4, #28]
   12688:	cmp	r2, #0
   1268c:	strne	r3, [r2, #8]
   12690:	streq	r3, [r4, #24]
   12694:	ldr	r3, [r4, #32]
   12698:	mov	r2, #0
   1269c:	sub	r3, r3, #1
   126a0:	cmp	r0, #0
   126a4:	str	r2, [r5, #4]
   126a8:	str	r2, [r5, #8]
   126ac:	str	r3, [r4, #32]
   126b0:	beq	126b8 <rb_base64_encode@plt+0x17cc>
   126b4:	bl	10d6c <free@plt>
   126b8:	mov	r0, r6
   126bc:	bl	10d6c <free@plt>
   126c0:	cmp	r7, #0
   126c4:	beq	126e8 <rb_base64_encode@plt+0x17fc>
   126c8:	mov	r5, r7
   126cc:	ldr	r7, [r7, #8]
   126d0:	b	12628 <rb_base64_encode@plt+0x173c>
   126d4:	bl	10e38 <rb_outofmemory@plt>
   126d8:	ldr	r3, [r4, #24]
   126dc:	cmp	r3, #0
   126e0:	streq	r5, [r4, #24]
   126e4:	b	12590 <rb_base64_encode@plt+0x16a4>
   126e8:	ldr	r2, [pc, #384]	; 12870 <rb_base64_encode@plt+0x1984>
   126ec:	mov	r3, r4
   126f0:	ldr	r0, [r4, #16]
   126f4:	add	r2, pc, r2
   126f8:	mov	r1, #1
   126fc:	add	sp, sp, #20
   12700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12704:	b	10cdc <rb_setselect@plt>
   12708:	ldr	r3, [r6, #16]
   1270c:	cmp	r3, #5
   12710:	bne	12650 <rb_base64_encode@plt+0x1764>
   12714:	ldr	r3, [r6, #20]
   12718:	mov	r1, #168	; 0xa8
   1271c:	mov	r0, #1
   12720:	str	r3, [sp, #12]
   12724:	ldr	fp, [r6, #24]
   12728:	bl	10d18 <calloc@plt>
   1272c:	subs	r8, r0, #0
   12730:	beq	126d4 <rb_base64_encode@plt+0x17e8>
   12734:	ldr	r3, [sp, #12]
   12738:	mvn	r2, #0
   1273c:	str	r3, [r8, #84]	; 0x54
   12740:	str	r2, [r8, #80]	; 0x50
   12744:	mov	r0, r3
   12748:	str	r4, [r8, #12]
   1274c:	str	fp, [r8, #88]	; 0x58
   12750:	bl	10d24 <rb_set_nb@plt>
   12754:	mov	r0, fp
   12758:	bl	10d24 <rb_set_nb@plt>
   1275c:	add	r0, r8, #52	; 0x34
   12760:	bl	10e98 <rb_linebuf_newbuf@plt>
   12764:	add	r0, r8, #24
   12768:	bl	10e98 <rb_linebuf_newbuf@plt>
   1276c:	bl	10e68 <rb_new_rawbuffer@plt>
   12770:	str	r0, [r8, #20]
   12774:	bl	10e68 <rb_new_rawbuffer@plt>
   12778:	ldr	r3, [r6, #12]
   1277c:	mov	r2, #0
   12780:	mov	r1, #2000	; 0x7d0
   12784:	str	r0, [r8, #16]
   12788:	ldr	r0, [r3, #1]
   1278c:	str	r2, [r8, #4]
   12790:	str	r0, [r8, #80]	; 0x50
   12794:	umull	ip, r3, sl, r0
   12798:	str	r8, [r8]
   1279c:	lsr	r2, r3, #7
   127a0:	mul	r3, r1, r2
   127a4:	sub	r2, r0, r3
   127a8:	lsl	r3, r2, #1
   127ac:	add	r1, r3, r2
   127b0:	add	r1, r9, r1, lsl #2
   127b4:	ldr	r0, [r1, #16]
   127b8:	cmp	r0, #0
   127bc:	str	r0, [r8, #8]
   127c0:	strne	r8, [r0, #4]
   127c4:	beq	1283c <rb_base64_encode@plt+0x1950>
   127c8:	ldr	r1, [sp, #8]
   127cc:	add	r3, r3, r2
   127d0:	ldrb	r2, [r8, #128]	; 0x80
   127d4:	add	r3, r1, r3, lsl #2
   127d8:	ldr	r0, [r8, #84]	; 0x54
   127dc:	ldr	r1, [r3, #24]
   127e0:	orr	r2, r2, #4
   127e4:	add	r1, r1, #1
   127e8:	str	r8, [r3, #16]
   127ec:	str	r1, [r3, #24]
   127f0:	strb	r2, [r8, #128]	; 0x80
   127f4:	bl	10ca0 <rb_get_type@plt>
   127f8:	tst	r0, #64	; 0x40
   127fc:	bne	1282c <rb_base64_encode@plt+0x1940>
   12800:	ldr	r0, [r8, #88]	; 0x58
   12804:	bl	10ca0 <rb_get_type@plt>
   12808:	cmp	r0, #64	; 0x40
   1280c:	beq	1284c <rb_base64_encode@plt+0x1960>
   12810:	mov	r1, r8
   12814:	ldr	r0, [r8, #84]	; 0x54
   12818:	bl	11ef8 <rb_base64_encode@plt+0x100c>
   1281c:	mov	r1, r8
   12820:	ldr	r0, [r8, #88]	; 0x58
   12824:	bl	11ce8 <rb_base64_encode@plt+0xdfc>
   12828:	b	12670 <rb_base64_encode@plt+0x1784>
   1282c:	mov	r1, #4
   12830:	ldr	r0, [r8, #84]	; 0x54
   12834:	bl	10d90 <rb_set_type@plt>
   12838:	b	12800 <rb_base64_encode@plt+0x1914>
   1283c:	ldr	r0, [r1, #20]
   12840:	cmp	r0, #0
   12844:	streq	r8, [r1, #20]
   12848:	b	127c8 <rb_base64_encode@plt+0x18dc>
   1284c:	mov	r1, #4
   12850:	ldr	r0, [r8, #88]	; 0x58
   12854:	bl	10d90 <rb_set_type@plt>
   12858:	b	12810 <rb_base64_encode@plt+0x1924>
   1285c:	mov	r0, #0
   12860:	bl	10ed4 <exit@plt>
   12864:	ldrdeq	r2, [r1], -r0
   12868:	andeq	r2, r1, ip, asr #21
   1286c:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   12870:			; <UNDEFINED> instruction: 0xfffffe04
   12874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12878:	sub	sp, sp, #172	; 0xac
   1287c:	mov	ip, r1
   12880:	add	r5, r1, #64	; 0x40
   12884:	add	r4, sp, #104	; 0x68
   12888:	str	r0, [sp, #4]
   1288c:	ldr	r0, [ip]
   12890:	ldr	r1, [ip, #4]
   12894:	ldr	r2, [ip, #8]
   12898:	ldr	r3, [ip, #12]
   1289c:	mov	lr, r4
   128a0:	add	ip, ip, #16
   128a4:	cmp	ip, r5
   128a8:	stmia	lr!, {r0, r1, r2, r3}
   128ac:	mov	r4, lr
   128b0:	bne	1288c <rb_base64_encode@plt+0x19a0>
   128b4:	ldr	r3, [sp, #4]
   128b8:	ldr	sl, [sp, #104]	; 0x68
   128bc:	ldr	r2, [r3, #4]
   128c0:	rev	sl, sl
   128c4:	mov	r4, r2
   128c8:	ldr	r2, [r3, #8]
   128cc:	ror	ip, r4, #2
   128d0:	mov	r1, r2
   128d4:	ldr	r2, [r3, #12]
   128d8:	str	r4, [sp, #88]	; 0x58
   128dc:	mov	r6, r2
   128e0:	mov	r2, r3
   128e4:	ldr	r3, [r3]
   128e8:	ldr	r0, [r2, #16]
   128ec:	mov	r7, r3
   128f0:	ldr	r3, [pc, #4088]	; 138f0 <rb_base64_encode@plt+0x2a04>
   128f4:	mov	r5, r0
   128f8:	eor	lr, r1, r6
   128fc:	eor	r0, r1, ip
   12900:	add	r2, r5, r3
   12904:	and	lr, lr, r4
   12908:	ldr	r4, [sp, #108]	; 0x6c
   1290c:	add	r2, r2, r7, ror #27
   12910:	and	r0, r0, r7
   12914:	eor	lr, lr, r6
   12918:	str	r5, [sp, #100]	; 0x64
   1291c:	str	r6, [sp, #96]	; 0x60
   12920:	mov	r5, r1
   12924:	eor	r0, r0, r1
   12928:	add	lr, lr, r2
   1292c:	add	r1, r6, r3
   12930:	rev	r6, r4
   12934:	add	r2, sl, lr
   12938:	mov	r8, r6
   1293c:	ldr	r4, [sp, #112]	; 0x70
   12940:	ror	r6, r7, #2
   12944:	add	r0, r0, r1
   12948:	eor	lr, ip, r6
   1294c:	add	r0, r0, r8
   12950:	add	r0, r0, r2, ror #27
   12954:	ror	r1, r2, #2
   12958:	str	r7, [sp, #84]	; 0x54
   1295c:	str	r8, [sp, #16]
   12960:	ldr	r7, [sp, #116]	; 0x74
   12964:	rev	r8, r4
   12968:	str	r5, [sp, #92]	; 0x5c
   1296c:	and	lr, lr, r2
   12970:	add	r5, r5, r3
   12974:	eor	r2, r6, r1
   12978:	add	r5, r5, r8
   1297c:	eor	lr, lr, ip
   12980:	rev	r9, r7
   12984:	add	r4, ip, r3
   12988:	ror	r7, r0, #2
   1298c:	and	r2, r2, r0
   12990:	add	lr, lr, r5
   12994:	ldr	r5, [sp, #120]	; 0x78
   12998:	add	lr, lr, r0, ror #27
   1299c:	eor	r2, r2, r6
   129a0:	add	ip, r4, r9
   129a4:	eor	r0, r1, r7
   129a8:	rev	fp, r5
   129ac:	str	r8, [sp, #8]
   129b0:	add	r6, r6, r3
   129b4:	ldr	r8, [sp, #124]	; 0x7c
   129b8:	add	ip, r2, ip
   129bc:	and	r0, r0, lr
   129c0:	add	ip, ip, lr, ror #27
   129c4:	add	r2, r6, fp
   129c8:	ror	lr, lr, #2
   129cc:	ldr	r5, [sp, #128]	; 0x80
   129d0:	eor	r0, r0, r1
   129d4:	eor	r4, r7, lr
   129d8:	rev	r6, r8
   129dc:	add	r0, r0, r2
   129e0:	add	r0, r0, ip, ror #27
   129e4:	ror	r2, ip, #2
   129e8:	str	r6, [sp, #28]
   129ec:	and	r4, r4, ip
   129f0:	add	r6, r6, r3
   129f4:	rev	ip, r5
   129f8:	str	fp, [sp, #20]
   129fc:	add	r1, r6, r1
   12a00:	mov	fp, ip
   12a04:	eor	r4, r4, r7
   12a08:	ldr	ip, [sp, #132]	; 0x84
   12a0c:	eor	r5, lr, r2
   12a10:	add	r4, r4, r1
   12a14:	add	r4, r4, r0, ror #27
   12a18:	add	r1, fp, r3
   12a1c:	str	r9, [sp, #12]
   12a20:	and	r5, r5, r0
   12a24:	ror	r9, r0, #2
   12a28:	rev	r0, ip
   12a2c:	add	r7, r1, r7
   12a30:	eor	r6, r5, lr
   12a34:	mov	ip, r0
   12a38:	eor	r0, r2, r9
   12a3c:	str	fp, [sp, #24]
   12a40:	str	ip, [sp, #56]	; 0x38
   12a44:	ldr	fp, [sp, #136]	; 0x88
   12a48:	add	ip, ip, r3
   12a4c:	add	r6, r6, r7
   12a50:	and	r0, r0, r4
   12a54:	add	r6, r6, r4, ror #27
   12a58:	add	lr, ip, lr
   12a5c:	ror	r4, r4, #2
   12a60:	eor	r0, r0, r2
   12a64:	rev	r1, fp
   12a68:	eor	r5, r9, r4
   12a6c:	add	r0, r0, lr
   12a70:	ldr	lr, [sp, #140]	; 0x8c
   12a74:	str	r1, [sp, #32]
   12a78:	add	ip, r1, r3
   12a7c:	and	r5, r5, r6
   12a80:	ror	r1, r6, #2
   12a84:	add	r0, r0, r6, ror #27
   12a88:	ldr	r8, [sp, #144]	; 0x90
   12a8c:	add	ip, ip, r2
   12a90:	eor	r6, r4, r1
   12a94:	eor	r5, r5, r9
   12a98:	rev	lr, lr
   12a9c:	str	lr, [sp, #36]	; 0x24
   12aa0:	and	r6, r6, r0
   12aa4:	add	lr, lr, r3
   12aa8:	add	r5, r5, ip
   12aac:	ror	r7, r0, #2
   12ab0:	add	r5, r5, r0, ror #27
   12ab4:	add	r9, lr, r9
   12ab8:	eor	r2, r6, r4
   12abc:	rev	r0, r8
   12ac0:	add	r8, r0, r3
   12ac4:	eor	ip, r1, r7
   12ac8:	add	r2, r2, r9
   12acc:	str	r0, [sp, #60]	; 0x3c
   12ad0:	ldr	r0, [sp, #148]	; 0x94
   12ad4:	add	r2, r2, r5, ror #27
   12ad8:	and	ip, ip, r5
   12adc:	ror	r5, r5, #2
   12ae0:	add	r4, r8, r4
   12ae4:	rev	r6, r0
   12ae8:	eor	r8, r7, r5
   12aec:	ldr	r0, [sp, #152]	; 0x98
   12af0:	eor	ip, ip, r1
   12af4:	ror	lr, r2, #2
   12af8:	str	r6, [sp, #64]	; 0x40
   12afc:	add	ip, ip, r4
   12b00:	add	r6, r6, r3
   12b04:	and	r8, r8, r2
   12b08:	add	ip, ip, r2, ror #27
   12b0c:	rev	r9, r0
   12b10:	add	r6, r6, r1
   12b14:	eor	r0, r5, lr
   12b18:	eor	r8, r8, r7
   12b1c:	ldr	r2, [sp, #156]	; 0x9c
   12b20:	add	r1, r9, r3
   12b24:	and	r0, r0, ip
   12b28:	add	r8, r8, r6
   12b2c:	add	r8, r8, ip, ror #27
   12b30:	str	r9, [sp, #40]	; 0x28
   12b34:	add	r7, r1, r7
   12b38:	ror	r9, ip, #2
   12b3c:	eor	r4, r0, r5
   12b40:	eor	ip, lr, r9
   12b44:	rev	r0, r2
   12b48:	add	r4, r4, r7
   12b4c:	ror	r6, r8, #2
   12b50:	add	r4, r4, r8, ror #27
   12b54:	add	r2, r0, r3
   12b58:	ldr	r7, [sp, #160]	; 0xa0
   12b5c:	and	ip, ip, r8
   12b60:	ldr	r8, [sp, #8]
   12b64:	ldr	r1, [sp, #32]
   12b68:	add	r5, r2, r5
   12b6c:	eor	ip, ip, lr
   12b70:	rev	r2, r7
   12b74:	eor	sl, sl, r8
   12b78:	add	ip, ip, r5
   12b7c:	ldr	r5, [sp, #164]	; 0xa4
   12b80:	mov	fp, r0
   12b84:	str	r2, [sp, #48]	; 0x30
   12b88:	eor	sl, sl, r1
   12b8c:	add	r2, r2, r3
   12b90:	ldr	r7, [sp, #12]
   12b94:	eor	r0, r9, r6
   12b98:	str	fp, [sp, #44]	; 0x2c
   12b9c:	add	r2, r2, lr
   12ba0:	eor	sl, sl, fp
   12ba4:	rev	lr, r5
   12ba8:	ldr	fp, [sp, #16]
   12bac:	ror	r1, r4, #2
   12bb0:	mov	r8, lr
   12bb4:	and	r0, r0, r4
   12bb8:	add	ip, ip, r4, ror #27
   12bbc:	str	r8, [sp, #16]
   12bc0:	eor	lr, r6, r1
   12bc4:	eor	r4, fp, r7
   12bc8:	eor	r0, r0, r9
   12bcc:	ldr	r7, [sp, #36]	; 0x24
   12bd0:	add	r8, r8, r3
   12bd4:	add	r8, r8, r9
   12bd8:	add	r0, r0, r2
   12bdc:	ldr	r9, [sp, #48]	; 0x30
   12be0:	and	lr, lr, ip
   12be4:	ror	r5, ip, #2
   12be8:	ldr	fp, [sp, #20]
   12bec:	add	r0, r0, ip, ror #27
   12bf0:	ror	sl, sl, #31
   12bf4:	ldr	ip, [sp, #8]
   12bf8:	eor	r4, r4, r7
   12bfc:	eor	lr, lr, r6
   12c00:	eor	r4, r4, r9
   12c04:	add	lr, lr, r8
   12c08:	mov	r9, sl
   12c0c:	add	r8, sl, r3
   12c10:	ldr	sl, [sp, #60]	; 0x3c
   12c14:	eor	ip, ip, fp
   12c18:	add	r8, r8, r6
   12c1c:	eor	ip, ip, sl
   12c20:	ldr	r6, [sp, #28]
   12c24:	ldr	sl, [sp, #12]
   12c28:	eor	r2, r1, r5
   12c2c:	eor	sl, sl, r6
   12c30:	ror	r6, r4, #31
   12c34:	mov	r4, r6
   12c38:	ldr	r6, [sp, #16]
   12c3c:	and	r2, r2, r0
   12c40:	add	lr, lr, r0, ror #27
   12c44:	eor	r2, r2, r1
   12c48:	ror	r0, r0, #2
   12c4c:	eor	ip, ip, r6
   12c50:	ldr	r6, [sp, #64]	; 0x40
   12c54:	add	r2, r2, r8
   12c58:	eor	r8, r5, r0
   12c5c:	add	r2, r2, lr, ror #27
   12c60:	str	r4, [sp, #20]
   12c64:	eor	sl, sl, r6
   12c68:	add	r4, r4, r3
   12c6c:	and	r8, r8, lr
   12c70:	mov	r6, fp
   12c74:	ror	lr, lr, #2
   12c78:	ldr	fp, [sp, #24]
   12c7c:	ror	ip, ip, #31
   12c80:	str	r9, [sp, #52]	; 0x34
   12c84:	add	r4, r4, r1
   12c88:	eor	sl, sl, r9
   12c8c:	ldr	r1, [sp, #40]	; 0x28
   12c90:	mov	r9, ip
   12c94:	eor	ip, r0, lr
   12c98:	and	ip, ip, r2
   12c9c:	eor	r6, r6, fp
   12ca0:	str	ip, [sp, #12]
   12ca4:	eor	r6, r6, r1
   12ca8:	ldr	ip, [sp, #56]	; 0x38
   12cac:	ldr	r1, [sp, #28]
   12cb0:	ror	sl, sl, #31
   12cb4:	str	r9, [sp, #24]
   12cb8:	eor	r8, r8, r5
   12cbc:	eor	r1, r1, ip
   12cc0:	str	sl, [sp, #8]
   12cc4:	ldr	sl, [sp, #20]
   12cc8:	ldr	ip, [sp, #12]
   12ccc:	add	r8, r8, r4
   12cd0:	add	r4, r9, r3
   12cd4:	add	r4, r4, r5
   12cd8:	eor	r6, r6, sl
   12cdc:	eor	ip, ip, r0
   12ce0:	ldr	sl, [sp, #44]	; 0x2c
   12ce4:	add	ip, ip, r4
   12ce8:	ldr	r4, [sp, #32]
   12cec:	ror	r9, r2, #2
   12cf0:	eor	r1, r1, sl
   12cf4:	ror	r6, r6, #31
   12cf8:	ldr	sl, [sp, #8]
   12cfc:	add	r8, r8, r2, ror #27
   12d00:	eor	r5, lr, r9
   12d04:	eor	r4, fp, r4
   12d08:	mov	fp, r6
   12d0c:	ldr	r6, [sp, #24]
   12d10:	add	r2, sl, r3
   12d14:	and	r5, r5, r8
   12d18:	ldr	r3, [pc, #3028]	; 138f4 <rb_base64_encode@plt+0x2a08>
   12d1c:	add	r2, r2, r0
   12d20:	eor	r1, r1, r6
   12d24:	eor	r0, r5, lr
   12d28:	ldr	r5, [sp, #48]	; 0x30
   12d2c:	add	ip, ip, r8, ror #27
   12d30:	ror	r8, r8, #2
   12d34:	add	r6, fp, r3
   12d38:	eor	r4, r4, r5
   12d3c:	add	r0, r0, r2
   12d40:	eor	r5, r9, r8
   12d44:	ror	r1, r1, #31
   12d48:	str	r1, [sp, #12]
   12d4c:	add	r0, r0, ip, ror #27
   12d50:	add	lr, r6, lr
   12d54:	eor	r6, r5, ip
   12d58:	ror	ip, ip, #2
   12d5c:	mov	r1, ip
   12d60:	str	fp, [sp, #28]
   12d64:	ldr	ip, [sp, #12]
   12d68:	ldr	fp, [sp, #56]	; 0x38
   12d6c:	eor	r4, r4, sl
   12d70:	ldr	sl, [sp, #16]
   12d74:	eor	r2, fp, r7
   12d78:	add	r5, ip, r3
   12d7c:	ldr	fp, [sp, #32]
   12d80:	ldr	ip, [sp, #60]	; 0x3c
   12d84:	eor	r2, r2, sl
   12d88:	add	r6, r6, lr
   12d8c:	eor	sl, r8, r1
   12d90:	add	r5, r5, r9
   12d94:	ldr	r9, [sp, #52]	; 0x34
   12d98:	add	r6, r6, r0, ror #27
   12d9c:	ror	lr, r4, #31
   12da0:	eor	sl, sl, r0
   12da4:	eor	fp, fp, ip
   12da8:	ror	r0, r0, #2
   12dac:	mov	r4, r1
   12db0:	str	r1, [sp, #32]
   12db4:	eor	fp, fp, r9
   12db8:	mov	r1, r0
   12dbc:	ldr	r9, [sp, #36]	; 0x24
   12dc0:	eor	r4, r4, r0
   12dc4:	ldr	r0, [sp, #64]	; 0x40
   12dc8:	mov	r7, lr
   12dcc:	add	r5, sl, r5
   12dd0:	ldr	lr, [sp, #28]
   12dd4:	eor	sl, r9, r0
   12dd8:	ldr	r9, [sp, #12]
   12ddc:	eor	r2, r2, lr
   12de0:	eor	fp, fp, r9
   12de4:	mov	r9, ip
   12de8:	ldr	ip, [sp, #40]	; 0x28
   12dec:	add	lr, r7, r3
   12df0:	ror	r2, r2, #31
   12df4:	add	r8, lr, r8
   12df8:	eor	r4, r4, r6
   12dfc:	ldr	lr, [sp, #20]
   12e00:	eor	r9, r9, ip
   12e04:	ldr	ip, [sp, #32]
   12e08:	add	r4, r4, r8
   12e0c:	add	r8, r2, r3
   12e10:	eor	sl, sl, lr
   12e14:	ror	fp, fp, #31
   12e18:	add	ip, r8, ip
   12e1c:	ldr	r8, [sp, #44]	; 0x2c
   12e20:	add	r5, r5, r6, ror #27
   12e24:	str	r1, [sp, #36]	; 0x24
   12e28:	ror	r6, r6, #2
   12e2c:	str	r7, [sp, #56]	; 0x38
   12e30:	mov	lr, r1
   12e34:	eor	sl, sl, r7
   12e38:	mov	r7, fp
   12e3c:	ldr	fp, [sp, #24]
   12e40:	eor	r8, r0, r8
   12e44:	eor	lr, lr, r6
   12e48:	ldr	r0, [sp, #36]	; 0x24
   12e4c:	add	r4, r4, r5, ror #27
   12e50:	eor	lr, lr, r5
   12e54:	eor	r9, r9, fp
   12e58:	ror	r5, r5, #2
   12e5c:	add	fp, r7, r3
   12e60:	add	ip, lr, ip
   12e64:	ror	sl, sl, #31
   12e68:	eor	lr, r6, r5
   12e6c:	eor	r9, r9, r2
   12e70:	add	r0, fp, r0
   12e74:	ldr	fp, [sp, #8]
   12e78:	mov	r1, sl
   12e7c:	add	ip, ip, r4, ror #27
   12e80:	eor	lr, lr, r4
   12e84:	ror	r4, r4, #2
   12e88:	eor	sl, r8, fp
   12e8c:	str	r1, [sp, #60]	; 0x3c
   12e90:	add	fp, r1, r3
   12e94:	ldr	r8, [sp, #40]	; 0x28
   12e98:	ldr	r1, [sp, #48]	; 0x30
   12e9c:	add	r0, lr, r0
   12ea0:	ror	r9, r9, #31
   12ea4:	eor	lr, r5, r4
   12ea8:	str	r7, [sp, #40]	; 0x28
   12eac:	eor	sl, sl, r7
   12eb0:	add	r6, fp, r6
   12eb4:	mov	r7, r9
   12eb8:	eor	lr, lr, ip
   12ebc:	ldr	r9, [sp, #28]
   12ec0:	eor	r8, r8, r1
   12ec4:	add	lr, lr, r6
   12ec8:	ldr	r6, [sp, #60]	; 0x3c
   12ecc:	eor	r8, r8, r9
   12ed0:	add	r0, r0, ip, ror #27
   12ed4:	eor	r8, r8, r6
   12ed8:	ror	ip, ip, #2
   12edc:	add	fp, r7, r3
   12ee0:	eor	r9, r4, ip
   12ee4:	ror	r6, sl, #31
   12ee8:	str	r7, [sp, #32]
   12eec:	ldr	sl, [sp, #44]	; 0x2c
   12ef0:	mov	r7, r6
   12ef4:	add	r5, fp, r5
   12ef8:	ldr	r6, [sp, #16]
   12efc:	eor	r9, r9, r0
   12f00:	ror	r8, r8, #31
   12f04:	add	r9, r9, r5
   12f08:	mov	r5, r8
   12f0c:	ldr	r8, [sp, #52]	; 0x34
   12f10:	str	r7, [sp, #44]	; 0x2c
   12f14:	add	fp, r7, r3
   12f18:	eor	sl, sl, r6
   12f1c:	mov	r7, r1
   12f20:	ldr	r6, [sp, #12]
   12f24:	eor	r7, r7, r8
   12f28:	ldr	r8, [sp, #32]
   12f2c:	eor	sl, sl, r6
   12f30:	eor	sl, sl, r8
   12f34:	ldr	r8, [sp, #56]	; 0x38
   12f38:	add	lr, lr, r0, ror #27
   12f3c:	add	r4, fp, r4
   12f40:	ror	r0, r0, #2
   12f44:	ldr	fp, [sp, #44]	; 0x2c
   12f48:	eor	r6, ip, r0
   12f4c:	eor	r7, r7, r8
   12f50:	add	r9, r9, lr, ror #27
   12f54:	eor	r6, r6, lr
   12f58:	eor	r7, r7, fp
   12f5c:	ror	lr, lr, #2
   12f60:	ror	sl, sl, #31
   12f64:	str	r5, [sp, #36]	; 0x24
   12f68:	add	r8, r5, r3
   12f6c:	mov	fp, sl
   12f70:	eor	r5, r0, lr
   12f74:	ldr	sl, [sp, #20]
   12f78:	add	r4, r6, r4
   12f7c:	ldr	r6, [sp, #16]
   12f80:	eor	r5, r5, r9
   12f84:	add	ip, r8, ip
   12f88:	ror	r7, r7, #31
   12f8c:	mov	r1, r7
   12f90:	ldr	r8, [sp, #52]	; 0x34
   12f94:	add	r4, r4, r9, ror #27
   12f98:	ldr	r7, [sp, #24]
   12f9c:	ror	r9, r9, #2
   12fa0:	eor	sl, r6, sl
   12fa4:	add	ip, r5, ip
   12fa8:	ldr	r5, [sp, #36]	; 0x24
   12fac:	str	fp, [sp, #16]
   12fb0:	eor	r6, lr, r9
   12fb4:	add	fp, fp, r3
   12fb8:	eor	sl, sl, r2
   12fbc:	eor	r6, r6, r4
   12fc0:	eor	sl, sl, r5
   12fc4:	eor	r7, r8, r7
   12fc8:	add	r0, fp, r0
   12fcc:	ldr	r8, [sp, #40]	; 0x28
   12fd0:	add	r0, r6, r0
   12fd4:	ldr	r6, [sp, #16]
   12fd8:	eor	r7, r7, r8
   12fdc:	ror	sl, sl, #31
   12fe0:	mov	fp, sl
   12fe4:	eor	r7, r7, r6
   12fe8:	ldr	sl, [sp, #20]
   12fec:	ldr	r6, [sp, #8]
   12ff0:	add	ip, ip, r4, ror #27
   12ff4:	eor	sl, sl, r6
   12ff8:	ldr	r6, [sp, #60]	; 0x3c
   12ffc:	ror	r4, r4, #2
   13000:	add	r8, r1, r3
   13004:	eor	r5, r9, r4
   13008:	eor	sl, sl, r6
   1300c:	eor	r5, r5, ip
   13010:	add	lr, r8, lr
   13014:	eor	sl, sl, r1
   13018:	ror	r8, r7, #31
   1301c:	str	fp, [sp, #52]	; 0x34
   13020:	ldr	r7, [sp, #24]
   13024:	add	fp, fp, r3
   13028:	add	lr, r5, lr
   1302c:	mov	r5, r8
   13030:	ldr	r8, [sp, #28]
   13034:	add	r0, r0, ip, ror #27
   13038:	add	r9, fp, r9
   1303c:	ror	ip, ip, #2
   13040:	ldr	fp, [sp, #32]
   13044:	ror	sl, sl, #31
   13048:	eor	r6, r4, ip
   1304c:	str	r1, [sp, #48]	; 0x30
   13050:	eor	r7, r7, r8
   13054:	mov	r1, sl
   13058:	ldr	sl, [sp, #52]	; 0x34
   1305c:	eor	r6, r6, r0
   13060:	eor	r7, r7, fp
   13064:	add	r9, r6, r9
   13068:	eor	r7, r7, sl
   1306c:	ldr	r6, [sp, #8]
   13070:	ldr	sl, [sp, #12]
   13074:	str	r5, [sp, #20]
   13078:	eor	sl, r6, sl
   1307c:	ror	r7, r7, #31
   13080:	ldr	r6, [sp, #44]	; 0x2c
   13084:	add	lr, lr, r0, ror #27
   13088:	str	r7, [sp, #8]
   1308c:	ror	r0, r0, #2
   13090:	ldr	r7, [sp, #20]
   13094:	add	r8, r5, r3
   13098:	eor	sl, sl, r6
   1309c:	eor	r5, ip, r0
   130a0:	eor	r5, r5, lr
   130a4:	add	r4, r8, r4
   130a8:	eor	sl, sl, r7
   130ac:	ldr	r8, [sp, #28]
   130b0:	ldr	r7, [sp, #56]	; 0x38
   130b4:	add	r4, r5, r4
   130b8:	ldr	r5, [sp, #36]	; 0x24
   130bc:	add	r9, r9, lr, ror #27
   130c0:	eor	r7, r8, r7
   130c4:	ror	lr, lr, #2
   130c8:	add	r6, r1, r3
   130cc:	eor	fp, r0, lr
   130d0:	eor	r7, r7, r5
   130d4:	str	r1, [sp, #64]	; 0x40
   130d8:	eor	fp, fp, r9
   130dc:	eor	r7, r7, r1
   130e0:	add	ip, r6, ip
   130e4:	ldr	r1, [sp, #12]
   130e8:	ror	sl, sl, #31
   130ec:	mov	r6, sl
   130f0:	add	ip, fp, ip
   130f4:	ldr	sl, [sp, #16]
   130f8:	ldr	fp, [sp, #8]
   130fc:	add	r4, r4, r9, ror #27
   13100:	eor	r1, r1, r2
   13104:	ror	r9, r9, #2
   13108:	add	r8, fp, r3
   1310c:	eor	r5, lr, r9
   13110:	eor	r1, r1, sl
   13114:	eor	r5, r5, r4
   13118:	add	r0, r8, r0
   1311c:	eor	r1, r1, fp
   13120:	add	r0, r5, r0
   13124:	ldr	fp, [sp, #40]	; 0x28
   13128:	ror	r5, r7, #31
   1312c:	ldr	r7, [sp, #56]	; 0x38
   13130:	str	r6, [sp, #24]
   13134:	ldr	r8, [sp, #48]	; 0x30
   13138:	ror	r1, r1, #31
   1313c:	str	r1, [sp, #12]
   13140:	add	ip, ip, r4, ror #27
   13144:	ldr	r1, [sp, #24]
   13148:	ror	r4, r4, #2
   1314c:	eor	r7, r7, fp
   13150:	add	sl, r6, r3
   13154:	eor	r7, r7, r8
   13158:	eor	r6, r9, r4
   1315c:	add	r0, r0, ip, ror #27
   13160:	eor	r6, r6, ip
   13164:	eor	r7, r7, r1
   13168:	ror	ip, ip, #2
   1316c:	str	r5, [sp, #28]
   13170:	add	r8, r5, r3
   13174:	add	lr, sl, lr
   13178:	eor	r5, r4, ip
   1317c:	ldr	sl, [sp, #60]	; 0x3c
   13180:	ldr	r1, [sp, #52]	; 0x34
   13184:	eor	r5, r5, r0
   13188:	add	r9, r8, r9
   1318c:	ror	r7, r7, #31
   13190:	eor	r2, r2, sl
   13194:	add	r9, r5, r9
   13198:	mov	r5, r7
   1319c:	ldr	r7, [sp, #28]
   131a0:	add	lr, r6, lr
   131a4:	eor	r2, r2, r1
   131a8:	ldr	r1, [sp, #12]
   131ac:	add	lr, lr, r0, ror #27
   131b0:	eor	r2, r2, r7
   131b4:	ror	r0, r0, #2
   131b8:	add	r6, r1, r3
   131bc:	eor	r1, ip, r0
   131c0:	eor	r1, r1, lr
   131c4:	mov	r8, fp
   131c8:	add	r4, r6, r4
   131cc:	ldr	fp, [sp, #32]
   131d0:	ror	r2, r2, #31
   131d4:	str	r2, [sp, #40]	; 0x28
   131d8:	add	r4, r1, r4
   131dc:	ldr	r1, [sp, #20]
   131e0:	add	r7, r5, r3
   131e4:	ldr	r2, [sp, #12]
   131e8:	ldr	r6, [sp, #40]	; 0x28
   131ec:	eor	fp, r8, fp
   131f0:	eor	fp, fp, r1
   131f4:	add	ip, r7, ip
   131f8:	ldr	r7, [sp, #44]	; 0x2c
   131fc:	add	r9, r9, lr, ror #27
   13200:	eor	fp, fp, r2
   13204:	ror	lr, lr, #2
   13208:	add	r3, r6, r3
   1320c:	ldr	r6, [sp, #64]	; 0x40
   13210:	mov	r8, r5
   13214:	eor	sl, sl, r7
   13218:	eor	r5, r0, lr
   1321c:	add	r4, r4, r9, ror #27
   13220:	eor	r5, r5, r9
   13224:	eor	sl, sl, r6
   13228:	ror	r9, r9, #2
   1322c:	ror	r6, fp, #31
   13230:	eor	r2, lr, r9
   13234:	ldr	fp, [sp, #32]
   13238:	eor	sl, sl, r8
   1323c:	add	ip, r5, ip
   13240:	mov	r5, r6
   13244:	ldr	r6, [sp, #36]	; 0x24
   13248:	add	ip, ip, r4, ror #27
   1324c:	eor	r2, r2, r4
   13250:	add	r0, r3, r0
   13254:	ror	r4, r4, #2
   13258:	ldr	r3, [pc, #1688]	; 138f8 <rb_base64_encode@plt+0x2a0c>
   1325c:	eor	r1, fp, r6
   13260:	add	r0, r2, r0
   13264:	ror	fp, sl, #31
   13268:	orr	r2, ip, r4
   1326c:	add	r6, r5, r3
   13270:	str	r8, [sp, #56]	; 0x38
   13274:	str	r5, [sp, #60]	; 0x3c
   13278:	and	r8, ip, r4
   1327c:	str	fp, [sp, #32]
   13280:	and	r2, r2, r9
   13284:	ldr	fp, [sp, #8]
   13288:	orr	r2, r2, r8
   1328c:	add	lr, r6, lr
   13290:	add	r0, r0, ip, ror #27
   13294:	ldr	sl, [sp, #16]
   13298:	ror	ip, ip, #2
   1329c:	eor	r1, r1, fp
   132a0:	add	lr, r2, lr
   132a4:	ldr	fp, [sp, #40]	; 0x28
   132a8:	ldr	r2, [sp, #32]
   132ac:	orr	r5, r0, ip
   132b0:	eor	r1, r1, fp
   132b4:	eor	sl, r7, sl
   132b8:	and	fp, r0, ip
   132bc:	add	r7, r2, r3
   132c0:	and	r5, r5, r4
   132c4:	ldr	r2, [sp, #24]
   132c8:	orr	r5, r5, fp
   132cc:	ldr	fp, [sp, #60]	; 0x3c
   132d0:	eor	sl, sl, r2
   132d4:	add	lr, lr, r0, ror #27
   132d8:	eor	sl, sl, fp
   132dc:	add	r9, r7, r9
   132e0:	add	r9, r5, r9
   132e4:	ror	r7, r1, #31
   132e8:	ldr	r6, [sp, #36]	; 0x24
   132ec:	mov	r1, r7
   132f0:	ldr	r8, [sp, #48]	; 0x30
   132f4:	add	r7, r9, lr, ror #27
   132f8:	ror	r9, sl, #31
   132fc:	ror	r0, r0, #2
   13300:	mov	fp, r9
   13304:	ldr	r9, [sp, #28]
   13308:	orr	r2, lr, r0
   1330c:	eor	r8, r6, r8
   13310:	and	r5, lr, r0
   13314:	and	r2, r2, ip
   13318:	eor	r8, r8, r9
   1331c:	ldr	r9, [sp, #32]
   13320:	str	r1, [sp, #36]	; 0x24
   13324:	ror	lr, lr, #2
   13328:	ldr	sl, [sp, #16]
   1332c:	add	r1, r1, r3
   13330:	orr	r2, r2, r5
   13334:	ldr	r5, [sp, #52]	; 0x34
   13338:	orr	r6, r7, lr
   1333c:	eor	r8, r8, r9
   13340:	add	r4, r1, r4
   13344:	ldr	r1, [sp, #12]
   13348:	and	r9, r7, lr
   1334c:	eor	sl, sl, r5
   13350:	add	r4, r2, r4
   13354:	and	r6, r6, r0
   13358:	add	r4, r4, r7, ror #27
   1335c:	str	fp, [sp, #16]
   13360:	orr	r6, r6, r9
   13364:	add	fp, fp, r3
   13368:	ldr	r9, [sp, #36]	; 0x24
   1336c:	eor	sl, sl, r1
   13370:	ror	r1, r7, #2
   13374:	ror	r7, r8, #31
   13378:	add	ip, fp, ip
   1337c:	ldr	r8, [sp, #48]	; 0x30
   13380:	mov	fp, r7
   13384:	ldr	r7, [sp, #20]
   13388:	orr	r2, r4, r1
   1338c:	eor	sl, sl, r9
   13390:	eor	r7, r8, r7
   13394:	ldr	r9, [sp, #56]	; 0x38
   13398:	and	r8, r4, r1
   1339c:	and	r2, r2, lr
   133a0:	orr	r2, r2, r8
   133a4:	ror	sl, sl, #31
   133a8:	ldr	r8, [sp, #16]
   133ac:	str	fp, [sp, #44]	; 0x2c
   133b0:	add	ip, r6, ip
   133b4:	eor	r7, r7, r9
   133b8:	add	r6, fp, r3
   133bc:	mov	fp, sl
   133c0:	ldr	sl, [sp, #64]	; 0x40
   133c4:	eor	r7, r7, r8
   133c8:	ldr	r8, [sp, #40]	; 0x28
   133cc:	add	ip, ip, r4, ror #27
   133d0:	add	r0, r6, r0
   133d4:	ror	r4, r4, #2
   133d8:	ldr	r6, [sp, #44]	; 0x2c
   133dc:	eor	sl, r5, sl
   133e0:	orr	r9, ip, r4
   133e4:	eor	sl, sl, r8
   133e8:	str	fp, [sp, #68]	; 0x44
   133ec:	and	r5, ip, r4
   133f0:	add	fp, fp, r3
   133f4:	eor	sl, sl, r6
   133f8:	and	r9, r9, r1
   133fc:	add	lr, fp, lr
   13400:	orr	r9, r9, r5
   13404:	ldr	fp, [sp, #8]
   13408:	ror	r5, r7, #31
   1340c:	add	r9, r9, lr
   13410:	ldr	r7, [sp, #20]
   13414:	ror	lr, sl, #31
   13418:	mov	r6, lr
   1341c:	ldr	lr, [sp, #60]	; 0x3c
   13420:	add	r0, r2, r0
   13424:	eor	r7, r7, fp
   13428:	add	r0, r0, ip, ror #27
   1342c:	eor	r7, r7, lr
   13430:	ror	ip, ip, #2
   13434:	ldr	lr, [sp, #68]	; 0x44
   13438:	orr	r8, r0, ip
   1343c:	add	r9, r9, r0, ror #27
   13440:	and	fp, r0, ip
   13444:	str	r5, [sp, #20]
   13448:	ror	r0, r0, #2
   1344c:	add	r5, r5, r3
   13450:	ldr	sl, [sp, #64]	; 0x40
   13454:	and	r8, r8, r4
   13458:	eor	r7, r7, lr
   1345c:	ldr	lr, [sp, #24]
   13460:	orr	r8, r8, fp
   13464:	orr	r2, r9, r0
   13468:	add	r1, r5, r1
   1346c:	str	r6, [sp, #72]	; 0x48
   13470:	eor	sl, sl, lr
   13474:	add	r1, r8, r1
   13478:	add	lr, r6, r3
   1347c:	ldr	r8, [sp, #32]
   13480:	and	r6, r9, r0
   13484:	and	r2, r2, ip
   13488:	ror	r7, r7, #31
   1348c:	orr	r2, r2, r6
   13490:	mov	r6, r7
   13494:	ldr	r7, [sp, #20]
   13498:	eor	sl, sl, r8
   1349c:	eor	sl, sl, r7
   134a0:	add	r1, r1, r9, ror #27
   134a4:	ldr	fp, [sp, #8]
   134a8:	ror	r9, r9, #2
   134ac:	ldr	r7, [sp, #28]
   134b0:	add	r4, lr, r4
   134b4:	ror	sl, sl, #31
   134b8:	str	sl, [sp, #48]	; 0x30
   134bc:	orr	r5, r1, r9
   134c0:	ldr	sl, [sp, #36]	; 0x24
   134c4:	add	r4, r2, r4
   134c8:	add	r8, r4, r1, ror #27
   134cc:	add	lr, r6, r3
   134d0:	and	r4, r1, r9
   134d4:	and	r2, r5, r0
   134d8:	eor	r7, fp, r7
   134dc:	ldr	fp, [sp, #72]	; 0x48
   134e0:	orr	r2, r2, r4
   134e4:	eor	r7, r7, sl
   134e8:	ldr	r4, [sp, #12]
   134ec:	add	ip, lr, ip
   134f0:	ldr	lr, [sp, #24]
   134f4:	str	r6, [sp, #76]	; 0x4c
   134f8:	ror	r1, r1, #2
   134fc:	eor	r7, r7, fp
   13500:	ldr	sl, [sp, #48]	; 0x30
   13504:	ldr	fp, [sp, #16]
   13508:	orr	r5, r8, r1
   1350c:	eor	r6, lr, r4
   13510:	ldr	r4, [sp, #76]	; 0x4c
   13514:	add	sl, sl, r3
   13518:	add	ip, r2, ip
   1351c:	and	r5, r5, r9
   13520:	and	r2, r8, r1
   13524:	eor	r6, r6, fp
   13528:	add	ip, ip, r8, ror #27
   1352c:	ldr	lr, [sp, #28]
   13530:	orr	r5, r5, r2
   13534:	eor	r6, r6, r4
   13538:	add	r0, sl, r0
   1353c:	ldr	sl, [sp, #56]	; 0x38
   13540:	ror	r8, r8, #2
   13544:	add	r0, r5, r0
   13548:	ror	r2, r7, #31
   1354c:	eor	r5, lr, sl
   13550:	orr	r7, ip, r8
   13554:	add	sl, r0, ip, ror #27
   13558:	and	lr, ip, r8
   1355c:	ror	r0, ip, #2
   13560:	ror	ip, r6, #31
   13564:	str	r2, [sp, #80]	; 0x50
   13568:	add	r4, r2, r3
   1356c:	and	r2, r7, r1
   13570:	mov	r7, ip
   13574:	ldr	ip, [sp, #44]	; 0x2c
   13578:	add	r9, r4, r9
   1357c:	orr	r4, r2, lr
   13580:	ldr	r2, [sp, #48]	; 0x30
   13584:	eor	r5, r5, ip
   13588:	eor	r5, r5, r2
   1358c:	ldr	r6, [sp, #40]	; 0x28
   13590:	add	lr, r7, r3
   13594:	ldr	ip, [sp, #12]
   13598:	str	r7, [sp, #40]	; 0x28
   1359c:	add	r1, lr, r1
   135a0:	ldr	r7, [sp, #68]	; 0x44
   135a4:	ror	lr, r5, #31
   135a8:	mov	r5, lr
   135ac:	eor	ip, ip, r6
   135b0:	ldr	lr, [sp, #80]	; 0x50
   135b4:	eor	ip, ip, r7
   135b8:	orr	fp, sl, r0
   135bc:	eor	ip, ip, lr
   135c0:	and	r2, sl, r0
   135c4:	and	fp, fp, r8
   135c8:	ldr	r7, [sp, #60]	; 0x3c
   135cc:	add	r4, r4, r9
   135d0:	orr	fp, fp, r2
   135d4:	ldr	r9, [sp, #56]	; 0x38
   135d8:	ror	ip, ip, #31
   135dc:	add	r4, r4, sl, ror #27
   135e0:	str	r5, [sp, #52]	; 0x34
   135e4:	ror	sl, sl, #2
   135e8:	add	fp, fp, r1
   135ec:	add	r1, r5, r3
   135f0:	mov	r5, ip
   135f4:	ldr	ip, [sp, #20]
   135f8:	orr	r2, r4, sl
   135fc:	eor	r9, r9, r7
   13600:	add	fp, fp, r4, ror #27
   13604:	and	lr, r4, sl
   13608:	and	r2, r2, r0
   1360c:	ror	r4, r4, #2
   13610:	eor	r9, r9, ip
   13614:	ldr	ip, [sp, #40]	; 0x28
   13618:	add	r1, r1, r8
   1361c:	orr	r2, r2, lr
   13620:	mov	r8, r6
   13624:	orr	lr, fp, r4
   13628:	ldr	r6, [sp, #32]
   1362c:	str	r5, [sp, #56]	; 0x38
   13630:	eor	r9, r9, ip
   13634:	add	r2, r2, r1
   13638:	add	ip, r5, r3
   1363c:	and	r1, fp, r4
   13640:	ldr	r5, [sp, #72]	; 0x48
   13644:	and	lr, lr, sl
   13648:	eor	r8, r8, r6
   1364c:	orr	lr, lr, r1
   13650:	ldr	r1, [sp, #52]	; 0x34
   13654:	eor	r8, r8, r5
   13658:	eor	r8, r8, r1
   1365c:	ror	r9, r9, #31
   13660:	add	r0, ip, r0
   13664:	ror	r8, r8, #31
   13668:	mov	ip, r9
   1366c:	ldr	r9, [sp, #36]	; 0x24
   13670:	add	r2, r2, fp, ror #27
   13674:	str	r8, [sp, #8]
   13678:	ror	fp, fp, #2
   1367c:	ldr	r8, [sp, #16]
   13680:	orr	r5, r2, fp
   13684:	add	lr, lr, r0
   13688:	eor	r9, r7, r9
   1368c:	add	r0, ip, r3
   13690:	ldr	r7, [sp, #76]	; 0x4c
   13694:	and	r1, r2, fp
   13698:	add	sl, r0, sl
   1369c:	and	r5, r5, r4
   136a0:	ldr	r0, [sp, #56]	; 0x38
   136a4:	eor	r8, r6, r8
   136a8:	ldr	r6, [sp, #8]
   136ac:	str	ip, [sp, #60]	; 0x3c
   136b0:	eor	r9, r9, r7
   136b4:	orr	r5, r5, r1
   136b8:	ldr	r1, [sp, #48]	; 0x30
   136bc:	add	lr, lr, r2, ror #27
   136c0:	add	ip, r6, r3
   136c4:	ror	r2, r2, #2
   136c8:	ldr	r6, [sp, #60]	; 0x3c
   136cc:	eor	r9, r9, r0
   136d0:	orr	r7, lr, r2
   136d4:	eor	r8, r8, r1
   136d8:	and	r0, lr, r2
   136dc:	eor	r8, r8, r6
   136e0:	add	r5, r5, sl
   136e4:	ldr	r6, [sp, #44]	; 0x2c
   136e8:	ror	sl, r9, #31
   136ec:	and	r7, r7, fp
   136f0:	ldr	r9, [sp, #36]	; 0x24
   136f4:	mov	r1, sl
   136f8:	add	r4, ip, r4
   136fc:	orr	r7, r7, r0
   13700:	eor	sl, r9, r6
   13704:	add	r7, r7, r4
   13708:	ldr	r6, [sp, #80]	; 0x50
   1370c:	add	r4, r1, r3
   13710:	ror	r9, r8, #31
   13714:	add	r5, r5, lr, ror #27
   13718:	ldr	r8, [sp, #16]
   1371c:	ror	lr, lr, #2
   13720:	str	r1, [sp, #64]	; 0x40
   13724:	str	r9, [sp, #12]
   13728:	add	r1, r4, fp
   1372c:	ldr	r9, [sp, #68]	; 0x44
   13730:	ldr	r4, [sp, #8]
   13734:	orr	ip, r5, lr
   13738:	eor	sl, sl, r6
   1373c:	and	r0, r5, lr
   13740:	eor	sl, sl, r4
   13744:	eor	fp, r8, r9
   13748:	and	ip, ip, r2
   1374c:	ldr	r8, [sp, #40]	; 0x28
   13750:	add	r7, r7, r5, ror #27
   13754:	orr	ip, ip, r0
   13758:	ror	r5, r5, #2
   1375c:	orr	r6, r7, r5
   13760:	add	ip, ip, r1
   13764:	eor	fp, fp, r8
   13768:	ldr	r1, [sp, #12]
   1376c:	ror	r8, sl, #31
   13770:	ldr	sl, [sp, #64]	; 0x40
   13774:	and	r0, r7, r5
   13778:	and	r6, r6, lr
   1377c:	add	r4, r1, r3
   13780:	orr	r6, r6, r0
   13784:	eor	fp, fp, sl
   13788:	ldr	r0, [sp, #44]	; 0x2c
   1378c:	ldr	sl, [sp, #20]
   13790:	str	r8, [sp, #16]
   13794:	add	r2, r4, r2
   13798:	ldr	r4, [sp, #52]	; 0x34
   1379c:	add	ip, ip, r7, ror #27
   137a0:	eor	r8, r0, sl
   137a4:	ror	r7, r7, #2
   137a8:	add	r6, r6, r2
   137ac:	ldr	r2, [sp, #16]
   137b0:	orr	r0, ip, r7
   137b4:	eor	r8, r8, r4
   137b8:	eor	r8, r8, r1
   137bc:	add	r4, r2, r3
   137c0:	and	r0, r0, r5
   137c4:	and	r2, ip, r7
   137c8:	ror	fp, fp, #31
   137cc:	str	fp, [sp, #20]
   137d0:	add	lr, r4, lr
   137d4:	ldr	fp, [sp, #72]	; 0x48
   137d8:	orr	r0, r0, r2
   137dc:	ldr	r4, [sp, #56]	; 0x38
   137e0:	add	r0, r0, lr
   137e4:	ror	lr, r8, #31
   137e8:	str	lr, [sp, #24]
   137ec:	eor	r9, r9, fp
   137f0:	ldr	lr, [sp, #16]
   137f4:	eor	r9, r9, r4
   137f8:	ldr	r8, [sp, #76]	; 0x4c
   137fc:	eor	r9, r9, lr
   13800:	add	r6, r6, ip, ror #27
   13804:	ldr	r1, [sp, #20]
   13808:	ror	ip, ip, #2
   1380c:	mov	lr, sl
   13810:	ldr	sl, [sp, #60]	; 0x3c
   13814:	orr	r2, r6, ip
   13818:	eor	lr, lr, r8
   1381c:	ror	r9, r9, #31
   13820:	str	r9, [sp, #28]
   13824:	and	r4, r6, ip
   13828:	ldr	r9, [sp, #20]
   1382c:	add	r1, r1, r3
   13830:	and	r2, r2, r7
   13834:	ldr	r3, [pc, #192]	; 138fc <rb_base64_encode@plt+0x2a10>
   13838:	eor	lr, lr, sl
   1383c:	ldr	sl, [sp, #24]
   13840:	add	r1, r1, r5
   13844:	orr	r2, r2, r4
   13848:	eor	lr, lr, r9
   1384c:	add	r2, r2, r1
   13850:	ldr	r9, [sp, #48]	; 0x30
   13854:	add	r1, sl, r3
   13858:	add	r1, r1, r7
   1385c:	ldr	r7, [sp, #8]
   13860:	add	r0, r0, r6, ror #27
   13864:	eor	r5, fp, r9
   13868:	ror	r6, r6, #2
   1386c:	eor	r4, ip, r6
   13870:	eor	r5, r5, r7
   13874:	ldr	r7, [sp, #28]
   13878:	add	r2, r2, r0, ror #27
   1387c:	eor	r4, r4, r0
   13880:	ror	r0, r0, #2
   13884:	add	r7, r7, r3
   13888:	eor	r5, r5, sl
   1388c:	add	r4, r4, r1
   13890:	eor	r1, r6, r0
   13894:	ldr	sl, [sp, #80]	; 0x50
   13898:	ror	fp, lr, #31
   1389c:	add	ip, r7, ip
   138a0:	eor	r1, r1, r2
   138a4:	str	fp, [sp, #32]
   138a8:	add	r1, r1, ip
   138ac:	ldr	fp, [sp, #64]	; 0x40
   138b0:	ror	ip, r5, #31
   138b4:	str	ip, [sp, #36]	; 0x24
   138b8:	eor	lr, r8, sl
   138bc:	ldr	ip, [sp, #28]
   138c0:	ldr	r8, [sp, #32]
   138c4:	eor	lr, lr, fp
   138c8:	add	r4, r4, r2, ror #27
   138cc:	eor	lr, lr, ip
   138d0:	ror	r2, r2, #2
   138d4:	ldr	ip, [sp, #40]	; 0x28
   138d8:	eor	r7, r0, r2
   138dc:	add	r8, r8, r3
   138e0:	eor	r5, r9, ip
   138e4:	add	r6, r8, r6
   138e8:	ldr	r9, [sp, #12]
   138ec:	b	13900 <rb_base64_encode@plt+0x2a14>
   138f0:	bpl	fe0b1f5c <rb_base64_encode@plt+0xfe0a1070>
   138f4:	vfnmsvs.f64	d30, d25, d17
   138f8:	svchi	0x001bbcdc
   138fc:	bgt	18c405c <rb_base64_encode@plt+0x18b3170>
   13900:	eor	r8, r7, r4
   13904:	ror	lr, lr, #31
   13908:	str	lr, [sp, #44]	; 0x2c
   1390c:	add	r8, r8, r6
   13910:	ldr	lr, [sp, #32]
   13914:	ldr	r6, [sp, #36]	; 0x24
   13918:	ror	ip, r4, #2
   1391c:	eor	r5, r5, r9
   13920:	add	r1, r1, r4, ror #27
   13924:	eor	fp, r2, ip
   13928:	ldr	r4, [sp, #52]	; 0x34
   1392c:	add	r6, r6, r3
   13930:	eor	r5, r5, lr
   13934:	add	r0, r6, r0
   13938:	ldr	lr, [sp, #16]
   1393c:	ldr	r6, [sp, #44]	; 0x2c
   13940:	eor	fp, fp, r1
   13944:	eor	r7, sl, r4
   13948:	add	fp, fp, r0
   1394c:	ror	r0, r5, #31
   13950:	ror	r9, r1, #2
   13954:	add	r8, r8, r1, ror #27
   13958:	add	r4, r6, r3
   1395c:	mov	r1, r0
   13960:	ldr	r6, [sp, #36]	; 0x24
   13964:	ldr	r0, [sp, #40]	; 0x28
   13968:	eor	r7, r7, lr
   1396c:	ldr	lr, [sp, #56]	; 0x38
   13970:	eor	sl, ip, r9
   13974:	eor	r7, r7, r6
   13978:	eor	r6, r0, lr
   1397c:	ldr	r0, [sp, #20]
   13980:	add	fp, fp, r8, ror #27
   13984:	eor	sl, sl, r8
   13988:	ror	r8, r8, #2
   1398c:	str	r1, [sp, #40]	; 0x28
   13990:	ldr	lr, [sp, #60]	; 0x3c
   13994:	add	r2, r4, r2
   13998:	eor	r6, r6, r0
   1399c:	ldr	r4, [sp, #52]	; 0x34
   139a0:	eor	r0, r9, r8
   139a4:	add	r1, r1, r3
   139a8:	eor	r0, r0, fp
   139ac:	add	r1, r1, ip
   139b0:	ldr	ip, [sp, #24]
   139b4:	eor	r5, r4, lr
   139b8:	add	r1, r0, r1
   139bc:	ldr	r0, [sp, #40]	; 0x28
   139c0:	eor	r5, r5, ip
   139c4:	ldr	r4, [sp, #56]	; 0x38
   139c8:	add	sl, sl, r2
   139cc:	eor	r5, r5, r0
   139d0:	ldr	r2, [sp, #44]	; 0x2c
   139d4:	ldr	r0, [sp, #8]
   139d8:	add	sl, sl, fp, ror #27
   139dc:	ror	r7, r7, #31
   139e0:	ror	fp, fp, #2
   139e4:	add	lr, r7, r3
   139e8:	eor	ip, r4, r0
   139ec:	eor	r6, r6, r2
   139f0:	ldr	r4, [sp, #28]
   139f4:	eor	r2, r8, fp
   139f8:	add	lr, lr, r9
   139fc:	eor	r2, r2, sl
   13a00:	add	r1, r1, sl, ror #27
   13a04:	ror	r6, r6, #31
   13a08:	ror	sl, sl, #2
   13a0c:	ldr	r9, [sp, #64]	; 0x40
   13a10:	eor	ip, ip, r4
   13a14:	add	r2, r2, lr
   13a18:	ldr	lr, [sp, #60]	; 0x3c
   13a1c:	str	r6, [sp, #56]	; 0x38
   13a20:	add	r0, r6, r3
   13a24:	eor	r4, fp, sl
   13a28:	ldr	r6, [sp, #32]
   13a2c:	eor	ip, ip, r7
   13a30:	add	r8, r0, r8
   13a34:	eor	r9, lr, r9
   13a38:	eor	r4, r4, r1
   13a3c:	eor	r9, r9, r6
   13a40:	add	r4, r4, r8
   13a44:	ldr	r6, [sp, #56]	; 0x38
   13a48:	ror	r8, ip, #31
   13a4c:	str	r8, [sp, #48]	; 0x30
   13a50:	ldr	ip, [sp, #8]
   13a54:	ldr	r8, [sp, #12]
   13a58:	add	r2, r2, r1, ror #27
   13a5c:	ror	r5, r5, #31
   13a60:	ror	r1, r1, #2
   13a64:	eor	r9, r9, r6
   13a68:	ldr	r6, [sp, #36]	; 0x24
   13a6c:	add	r0, r5, r3
   13a70:	eor	lr, sl, r1
   13a74:	eor	r8, ip, r8
   13a78:	add	fp, r0, fp
   13a7c:	eor	lr, lr, r2
   13a80:	eor	r8, r8, r6
   13a84:	ldr	r6, [sp, #48]	; 0x30
   13a88:	add	lr, lr, fp
   13a8c:	ror	fp, r9, #31
   13a90:	str	fp, [sp, #8]
   13a94:	add	r0, r6, r3
   13a98:	ldr	fp, [sp, #16]
   13a9c:	ldr	r9, [sp, #64]	; 0x40
   13aa0:	eor	r8, r8, r5
   13aa4:	add	r0, r0, sl
   13aa8:	ldr	sl, [sp, #44]	; 0x2c
   13aac:	eor	r9, r9, fp
   13ab0:	ror	r8, r8, #31
   13ab4:	ldr	fp, [sp, #8]
   13ab8:	str	r8, [sp, #52]	; 0x34
   13abc:	eor	r9, r9, sl
   13ac0:	add	r4, r4, r2, ror #27
   13ac4:	add	sl, fp, r3
   13ac8:	ror	r2, r2, #2
   13acc:	ldr	fp, [sp, #20]
   13ad0:	ldr	r8, [sp, #12]
   13ad4:	eor	r9, r9, r6
   13ad8:	ldr	r6, [sp, #52]	; 0x34
   13adc:	eor	ip, r1, r2
   13ae0:	add	r1, sl, r1
   13ae4:	ldr	sl, [sp, #40]	; 0x28
   13ae8:	eor	r8, r8, fp
   13aec:	add	fp, r6, r3
   13af0:	ldr	r6, [sp, #8]
   13af4:	eor	r8, r8, sl
   13af8:	eor	r8, r8, r6
   13afc:	ldr	sl, [sp, #16]
   13b00:	ldr	r6, [sp, #24]
   13b04:	add	lr, lr, r4, ror #27
   13b08:	eor	ip, ip, r4
   13b0c:	ror	r4, r4, #2
   13b10:	eor	sl, sl, r6
   13b14:	add	ip, ip, r0
   13b18:	ldr	r6, [sp, #28]
   13b1c:	eor	r0, r2, r4
   13b20:	add	r2, fp, r2
   13b24:	ldr	fp, [sp, #20]
   13b28:	add	ip, ip, lr, ror #27
   13b2c:	eor	fp, fp, r6
   13b30:	ldr	r6, [sp, #52]	; 0x34
   13b34:	eor	r0, r0, lr
   13b38:	eor	r7, r7, sl
   13b3c:	ror	lr, lr, #2
   13b40:	add	r0, r0, r1
   13b44:	eor	r7, r7, r6
   13b48:	eor	r1, r4, lr
   13b4c:	ldr	r6, [sp, #56]	; 0x38
   13b50:	add	r0, r0, ip, ror #27
   13b54:	ror	r9, r9, #31
   13b58:	eor	r1, r1, ip
   13b5c:	ror	ip, ip, #2
   13b60:	add	sl, r9, r3
   13b64:	add	r1, r1, r2
   13b68:	eor	r6, r6, fp
   13b6c:	eor	r2, lr, ip
   13b70:	add	r1, r1, r0, ror #27
   13b74:	ldr	fp, [sp, #32]
   13b78:	add	r4, sl, r4
   13b7c:	ror	r8, r8, #31
   13b80:	eor	r2, r2, r0
   13b84:	eor	r6, r6, r9
   13b88:	ror	r0, r0, #2
   13b8c:	ldr	r9, [sp, #24]
   13b90:	add	sl, r8, r3
   13b94:	add	r2, r2, r4
   13b98:	eor	r4, ip, r0
   13b9c:	eor	r9, r9, fp
   13ba0:	eor	r4, r4, r1
   13ba4:	ror	r7, r7, #31
   13ba8:	add	lr, sl, lr
   13bac:	add	r2, r2, r1, ror #27
   13bb0:	add	sl, r7, r3
   13bb4:	ror	r1, r1, #2
   13bb8:	eor	r5, r5, r9
   13bbc:	add	lr, r4, lr
   13bc0:	ldr	r4, [sp, #28]
   13bc4:	ldr	r9, [sp, #36]	; 0x24
   13bc8:	eor	fp, r0, r1
   13bcc:	add	ip, sl, ip
   13bd0:	ldr	sl, [sp, #48]	; 0x30
   13bd4:	add	lr, lr, r2, ror #27
   13bd8:	eor	fp, fp, r2
   13bdc:	ror	r6, r6, #31
   13be0:	ror	r2, r2, #2
   13be4:	eor	r9, r4, r9
   13be8:	eor	r9, r9, sl
   13bec:	add	r4, r6, r3
   13bf0:	add	ip, fp, ip
   13bf4:	eor	fp, r1, r2
   13bf8:	ror	sl, lr, #2
   13bfc:	add	ip, ip, lr, ror #27
   13c00:	eor	fp, fp, lr
   13c04:	eor	r8, r8, r5
   13c08:	add	r0, r4, r0
   13c0c:	eor	r7, r7, r9
   13c10:	ldr	lr, [sp, #32]
   13c14:	ldr	r9, [sp, #44]	; 0x2c
   13c18:	add	r0, fp, r0
   13c1c:	ldr	fp, [sp, #8]
   13c20:	ror	r8, r8, #31
   13c24:	eor	lr, lr, r9
   13c28:	eor	lr, lr, fp
   13c2c:	add	r9, r8, r3
   13c30:	add	r1, r9, r1
   13c34:	eor	r6, r6, lr
   13c38:	ldr	r9, [sp, #36]	; 0x24
   13c3c:	ldr	lr, [sp, #40]	; 0x28
   13c40:	eor	r5, r2, sl
   13c44:	eor	lr, r9, lr
   13c48:	ldr	r9, [sp, #52]	; 0x34
   13c4c:	add	r0, r0, ip, ror #27
   13c50:	eor	r5, r5, ip
   13c54:	ror	ip, ip, #2
   13c58:	eor	r4, lr, r9
   13c5c:	add	r7, r3, r7, ror #31
   13c60:	eor	fp, sl, ip
   13c64:	add	r1, r5, r1
   13c68:	add	r1, r1, r0, ror #27
   13c6c:	eor	fp, fp, r0
   13c70:	add	r2, r7, r2
   13c74:	ror	r0, r0, #2
   13c78:	eor	r8, r8, r4
   13c7c:	ldr	r4, [sp, #84]	; 0x54
   13c80:	eor	r9, ip, r0
   13c84:	add	r6, r3, r6, ror #31
   13c88:	add	r2, r2, fp
   13c8c:	add	r2, r2, r1, ror #27
   13c90:	add	r3, r4, r3
   13c94:	eor	r9, r9, r1
   13c98:	ldr	r5, [sp, #92]	; 0x5c
   13c9c:	add	r6, r6, sl
   13ca0:	ror	r1, r1, #2
   13ca4:	add	r8, r3, r8, ror #31
   13ca8:	add	r6, r6, r9
   13cac:	eor	r3, r0, r1
   13cb0:	add	r6, r6, r2, ror #27
   13cb4:	add	ip, r8, ip
   13cb8:	ldr	lr, [sp, #100]	; 0x64
   13cbc:	eor	r8, r3, r2
   13cc0:	ldr	r4, [sp, #88]	; 0x58
   13cc4:	ldr	r3, [sp, #4]
   13cc8:	add	r2, r5, r2, ror #2
   13ccc:	ldr	r5, [sp, #96]	; 0x60
   13cd0:	add	ip, ip, r8
   13cd4:	add	r0, lr, r0
   13cd8:	add	ip, ip, r6, ror #27
   13cdc:	add	r1, r5, r1
   13ce0:	add	r6, r4, r6
   13ce4:	str	r0, [r3, #16]
   13ce8:	str	r2, [r3, #8]
   13cec:	mov	r0, #0
   13cf0:	str	ip, [r3]
   13cf4:	str	r6, [r3, #4]
   13cf8:	str	r1, [r3, #12]
   13cfc:	add	sp, sp, #172	; 0xac
   13d00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d04:	push	{r4, r5, lr}
   13d08:	mov	r2, #0
   13d0c:	ldr	r4, [pc, #40]	; 13d3c <rb_base64_encode@plt+0x2e50>
   13d10:	ldr	lr, [pc, #40]	; 13d40 <rb_base64_encode@plt+0x2e54>
   13d14:	ldr	r5, [pc, #40]	; 13d44 <rb_base64_encode@plt+0x2e58>
   13d18:	ldr	ip, [pc, #40]	; 13d48 <rb_base64_encode@plt+0x2e5c>
   13d1c:	ldr	r1, [pc, #40]	; 13d4c <rb_base64_encode@plt+0x2e60>
   13d20:	mov	r3, #0
   13d24:	str	r5, [r0]
   13d28:	stmib	r0, {r4, lr}
   13d2c:	str	ip, [r0, #12]
   13d30:	str	r1, [r0, #16]
   13d34:	strd	r2, [r0, #24]
   13d38:	pop	{r4, r5, pc}
   13d3c:	svc	0x00cdab89
   13d40:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   13d44:	strbvs	r2, [r5, -r1, lsl #6]
   13d48:	eorsne	r5, r2, r6, ror r4
   13d4c:	bicsgt	lr, r2, #240, 2	; 0x3c
   13d50:	push	{r4, r5, r6, r7, r8, lr}
   13d54:	mov	r7, r2
   13d58:	ldrd	r2, [r0, #24]
   13d5c:	lsl	ip, r7, #3
   13d60:	mov	r5, r0
   13d64:	lsr	r6, r2, #3
   13d68:	and	r6, r6, #63	; 0x3f
   13d6c:	adds	r2, r2, ip
   13d70:	adc	r3, r3, #0
   13d74:	add	r0, r6, r7
   13d78:	cmp	r0, #63	; 0x3f
   13d7c:	mov	r8, r1
   13d80:	strd	r2, [r5, #24]
   13d84:	addls	r0, r6, #32
   13d88:	movls	r1, #0
   13d8c:	bhi	13da4 <rb_base64_encode@plt+0x2eb8>
   13d90:	sub	r2, r7, r1
   13d94:	add	r0, r5, r0
   13d98:	add	r1, r8, r1
   13d9c:	pop	{r4, r5, r6, r7, r8, lr}
   13da0:	b	10dc0 <memcpy@plt>
   13da4:	rsb	r4, r6, #64	; 0x40
   13da8:	add	r0, r6, #32
   13dac:	mov	r2, r4
   13db0:	add	r0, r5, r0
   13db4:	bl	10dc0 <memcpy@plt>
   13db8:	rsb	r6, r6, #127	; 0x7f
   13dbc:	add	r1, r5, #32
   13dc0:	mov	r0, r5
   13dc4:	bl	12874 <rb_base64_encode@plt+0x1988>
   13dc8:	cmp	r7, r6
   13dcc:	bls	13df8 <rb_base64_encode@plt+0x2f0c>
   13dd0:	add	r1, r8, r4
   13dd4:	mov	r0, r5
   13dd8:	bl	12874 <rb_base64_encode@plt+0x1988>
   13ddc:	add	r3, r4, #127	; 0x7f
   13de0:	add	r1, r4, #64	; 0x40
   13de4:	cmp	r7, r3
   13de8:	mov	r4, r1
   13dec:	bhi	13dd0 <rb_base64_encode@plt+0x2ee4>
   13df0:	mov	r0, #32
   13df4:	b	13d90 <rb_base64_encode@plt+0x2ea4>
   13df8:	mov	r1, r4
   13dfc:	b	13df0 <rb_base64_encode@plt+0x2f04>
   13e00:	push	{r4, r5, r6, r7, r8, lr}
   13e04:	sub	sp, sp, #8
   13e08:	mov	r4, r0
   13e0c:	ldr	r7, [r0, #24]
   13e10:	ldr	ip, [r0, #28]
   13e14:	mov	r5, r1
   13e18:	mov	r6, sp
   13e1c:	mov	r0, sp
   13e20:	mvn	r1, #0
   13e24:	and	r3, r1, #7
   13e28:	sub	r1, r1, #1
   13e2c:	lsl	r3, r3, #3
   13e30:	rsb	lr, r3, #32
   13e34:	lsr	r2, r7, r3
   13e38:	sub	r3, r3, #32
   13e3c:	orr	r2, r2, ip, lsl lr
   13e40:	orr	r2, r2, ip, lsr r3
   13e44:	cmn	r1, #9
   13e48:	strb	r2, [r0], #1
   13e4c:	bne	13e24 <rb_base64_encode@plt+0x2f38>
   13e50:	ldr	r1, [pc, #176]	; 13f08 <rb_base64_encode@plt+0x301c>
   13e54:	mov	r2, #1
   13e58:	add	r1, pc, r1
   13e5c:	mov	r0, r4
   13e60:	bl	13d50 <rb_base64_encode@plt+0x2e64>
   13e64:	ldrd	r2, [r4, #24]
   13e68:	mov	r3, #0
   13e6c:	cmp	r3, #0
   13e70:	and	r2, r2, #504	; 0x1f8
   13e74:	cmpeq	r2, #448	; 0x1c0
   13e78:	beq	13eb0 <rb_base64_encode@plt+0x2fc4>
   13e7c:	ldr	r8, [pc, #136]	; 13f0c <rb_base64_encode@plt+0x3020>
   13e80:	mov	r7, #1
   13e84:	add	r8, pc, r8
   13e88:	mov	r2, r7
   13e8c:	mov	r1, r8
   13e90:	mov	r0, r4
   13e94:	bl	13d50 <rb_base64_encode@plt+0x2e64>
   13e98:	ldrd	r2, [r4, #24]
   13e9c:	mov	r3, #0
   13ea0:	cmp	r3, #0
   13ea4:	and	r2, r2, #504	; 0x1f8
   13ea8:	cmpeq	r2, #448	; 0x1c0
   13eac:	bne	13e88 <rb_base64_encode@plt+0x2f9c>
   13eb0:	mov	r1, r6
   13eb4:	mov	r2, #8
   13eb8:	mov	r0, r4
   13ebc:	bl	13d50 <rb_base64_encode@plt+0x2e64>
   13ec0:	sub	r1, r5, #1
   13ec4:	mov	r2, #0
   13ec8:	mvn	r3, r2
   13ecc:	lsr	r0, r2, #2
   13ed0:	and	r3, r3, #3
   13ed4:	ldr	r0, [r4, r0, lsl #2]
   13ed8:	lsl	r3, r3, #3
   13edc:	add	r2, r2, #1
   13ee0:	lsr	r3, r0, r3
   13ee4:	cmp	r2, #20
   13ee8:	strb	r3, [r1, #1]!
   13eec:	bne	13ec8 <rb_base64_encode@plt+0x2fdc>
   13ef0:	mov	r0, r4
   13ef4:	mov	r2, #96	; 0x60
   13ef8:	mov	r1, #0
   13efc:	add	sp, sp, #8
   13f00:	pop	{r4, r5, r6, r7, r8, lr}
   13f04:	b	10d30 <memset@plt>
   13f08:	andeq	r0, r0, ip, ror #7
   13f0c:			; <UNDEFINED> instruction: 0x000003bc
   13f10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f14:	mov	r7, r0
   13f18:	ldr	r6, [pc, #72]	; 13f68 <rb_base64_encode@plt+0x307c>
   13f1c:	ldr	r5, [pc, #72]	; 13f6c <rb_base64_encode@plt+0x3080>
   13f20:	add	r6, pc, r6
   13f24:	add	r5, pc, r5
   13f28:	sub	r6, r6, r5
   13f2c:	mov	r8, r1
   13f30:	mov	r9, r2
   13f34:	bl	10c5c <open@plt-0x20>
   13f38:	asrs	r6, r6, #2
   13f3c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f40:	mov	r4, #0
   13f44:	add	r4, r4, #1
   13f48:	ldr	r3, [r5], #4
   13f4c:	mov	r2, r9
   13f50:	mov	r1, r8
   13f54:	mov	r0, r7
   13f58:	blx	r3
   13f5c:	cmp	r6, r4
   13f60:	bne	13f44 <rb_base64_encode@plt+0x3058>
   13f64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f68:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   13f6c:	andeq	r0, r1, r8, asr #31
   13f70:	bx	lr

Disassembly of section .fini:

00013f74 <.fini>:
   13f74:	push	{r3, lr}
   13f78:	pop	{r3, pc}
