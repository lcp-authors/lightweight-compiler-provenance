
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf32-littlearm


Disassembly of section .init:

00011f34 <.init>:
   11f34:	push	{r3, lr}
   11f38:	bl	12314 <_start@@Base+0x3c>
   11f3c:	pop	{r3, pc}

Disassembly of section .plt:

00011f40 <strcmp@plt-0x14>:
   11f40:	push	{lr}		; (str lr, [sp, #-4]!)
   11f44:	ldr	lr, [pc, #4]	; 11f50 <strcmp@plt-0x4>
   11f48:	add	lr, pc, lr
   11f4c:	ldr	pc, [lr, #8]!
   11f50:	strheq	r7, [r1], -r0

00011f54 <strcmp@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #94208	; 0x17000
   11f5c:	ldr	pc, [ip, #176]!	; 0xb0

00011f60 <free@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #94208	; 0x17000
   11f68:	ldr	pc, [ip, #168]!	; 0xa8

00011f6c <memcpy@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #94208	; 0x17000
   11f74:	ldr	pc, [ip, #160]!	; 0xa0

00011f78 <memcmp@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #94208	; 0x17000
   11f80:	ldr	pc, [ip, #152]!	; 0x98

00011f84 <realloc@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #94208	; 0x17000
   11f8c:	ldr	pc, [ip, #144]!	; 0x90

00011f90 <puts@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #94208	; 0x17000
   11f98:	ldr	pc, [ip, #136]!	; 0x88

00011f9c <malloc@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #94208	; 0x17000
   11fa4:	ldr	pc, [ip, #128]!	; 0x80

00011fa8 <__libc_start_main@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #94208	; 0x17000
   11fb0:	ldr	pc, [ip, #120]!	; 0x78

00011fb4 <__gmon_start__@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #94208	; 0x17000
   11fbc:	ldr	pc, [ip, #112]!	; 0x70

00011fc0 <strlen@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #94208	; 0x17000
   11fc8:	ldr	pc, [ip, #104]!	; 0x68

00011fcc <posix_memalign@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #94208	; 0x17000
   11fd4:	ldr	pc, [ip, #96]!	; 0x60

00011fd8 <memset@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #94208	; 0x17000
   11fe0:	ldr	pc, [ip, #88]!	; 0x58

00011fe4 <memchr@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #94208	; 0x17000
   11fec:	ldr	pc, [ip, #80]!	; 0x50

00011ff0 <abort@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #94208	; 0x17000
   11ff8:	ldr	pc, [ip, #72]!	; 0x48

00011ffc <__assert_fail@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #94208	; 0x17000
   12004:	ldr	pc, [ip, #64]!	; 0x40

Disassembly of section .text:

00012008 <main@@Base-0x16c>:
   12008:	ldr	r3, [pc, #28]	; 1202c <__assert_fail@plt+0x30>
   1200c:	ldr	r1, [pc, #28]	; 12030 <__assert_fail@plt+0x34>
   12010:	ldr	r0, [pc, #28]	; 12034 <__assert_fail@plt+0x38>
   12014:	push	{r4, lr}
   12018:	add	r3, pc, r3
   1201c:	mov	r2, #148	; 0x94
   12020:	add	r1, pc, r1
   12024:	add	r0, pc, r0
   12028:	bl	11ffc <__assert_fail@plt>
   1202c:	ldrdeq	r5, [r0], -r8
   12030:	andeq	r5, r0, r4, ror lr
   12034:	andeq	r5, r0, r4, ror #29
   12038:	ldr	r3, [pc, #32]	; 12060 <__assert_fail@plt+0x64>
   1203c:	ldr	r1, [pc, #32]	; 12064 <__assert_fail@plt+0x68>
   12040:	ldr	r0, [pc, #32]	; 12068 <__assert_fail@plt+0x6c>
   12044:	add	r3, pc, r3
   12048:	push	{r4, lr}
   1204c:	mov	r2, #149	; 0x95
   12050:	add	r3, r3, #28
   12054:	add	r1, pc, r1
   12058:	add	r0, pc, r0
   1205c:	bl	11ffc <__assert_fail@plt>
   12060:	andeq	r5, r0, ip, lsr #27
   12064:	andeq	r5, r0, r0, asr #28
   12068:			; <UNDEFINED> instruction: 0x00005eb0
   1206c:	ldr	r3, [pc, #32]	; 12094 <__assert_fail@plt+0x98>
   12070:	ldr	r1, [pc, #32]	; 12098 <__assert_fail@plt+0x9c>
   12074:	ldr	r0, [pc, #32]	; 1209c <__assert_fail@plt+0xa0>
   12078:	add	r3, pc, r3
   1207c:	push	{r4, lr}
   12080:	mov	r2, #50	; 0x32
   12084:	add	r3, r3, #56	; 0x38
   12088:	add	r1, pc, r1
   1208c:	add	r0, pc, r0
   12090:	bl	11ffc <__assert_fail@plt>
   12094:	andeq	r5, r0, r8, ror sp
   12098:	andeq	r5, r0, r8, lsr #29
   1209c:	andeq	r5, r0, r8, lsl pc
   120a0:	ldr	r3, [pc, #28]	; 120c4 <__assert_fail@plt+0xc8>
   120a4:	ldr	r1, [pc, #28]	; 120c8 <__assert_fail@plt+0xcc>
   120a8:	ldr	r0, [pc, #28]	; 120cc <__assert_fail@plt+0xd0>
   120ac:	push	{r4, lr}
   120b0:	add	r3, pc, r3
   120b4:	mov	r2, #308	; 0x134
   120b8:	add	r1, pc, r1
   120bc:	add	r0, pc, r0
   120c0:	bl	11ffc <__assert_fail@plt>
   120c4:	ldrdeq	r6, [r0], -ip
   120c8:	andeq	r6, r0, r4, lsr #16
   120cc:	andeq	r6, r0, r8, lsr #17
   120d0:	ldr	r3, [pc, #32]	; 120f8 <__assert_fail@plt+0xfc>
   120d4:	ldr	r1, [pc, #32]	; 120fc <__assert_fail@plt+0x100>
   120d8:	ldr	r0, [pc, #32]	; 12100 <__assert_fail@plt+0x104>
   120dc:	add	r3, pc, r3
   120e0:	push	{r4, lr}
   120e4:	add	r3, r3, #16
   120e8:	ldr	r2, [pc, #20]	; 12104 <__assert_fail@plt+0x108>
   120ec:	add	r1, pc, r1
   120f0:	add	r0, pc, r0
   120f4:	bl	11ffc <__assert_fail@plt>
   120f8:	strheq	r6, [r0], -r0
   120fc:	strdeq	r6, [r0], -r0
   12100:	andeq	r6, r0, r4, ror r8
   12104:	andeq	r0, r0, r1, lsr #5
   12108:	ldr	r3, [pc, #32]	; 12130 <__assert_fail@plt+0x134>
   1210c:	ldr	r1, [pc, #32]	; 12134 <__assert_fail@plt+0x138>
   12110:	ldr	r0, [pc, #32]	; 12138 <__assert_fail@plt+0x13c>
   12114:	add	r3, pc, r3
   12118:	push	{r4, lr}
   1211c:	add	r3, r3, #28
   12120:	ldr	r2, [pc, #20]	; 1213c <__assert_fail@plt+0x140>
   12124:	add	r1, pc, r1
   12128:	add	r0, pc, r0
   1212c:	bl	11ffc <__assert_fail@plt>
   12130:	andeq	r6, r0, r8, ror r0
   12134:			; <UNDEFINED> instruction: 0x000067b8
   12138:	andeq	r6, r0, ip, lsr r8
   1213c:	andeq	r0, r0, r7, lsl #5
   12140:	ldr	r3, [pc, #32]	; 12168 <__assert_fail@plt+0x16c>
   12144:	ldr	r1, [pc, #32]	; 1216c <__assert_fail@plt+0x170>
   12148:	ldr	r0, [pc, #32]	; 12170 <__assert_fail@plt+0x174>
   1214c:	add	r3, pc, r3
   12150:	push	{r4, lr}
   12154:	mov	r2, #892	; 0x37c
   12158:	add	r3, r3, #40	; 0x28
   1215c:	add	r1, pc, r1
   12160:	add	r0, pc, r0
   12164:	bl	11ffc <__assert_fail@plt>
   12168:	andeq	r6, r0, r0, asr #32
   1216c:	andeq	r6, r0, r0, lsl #15
   12170:	ldrdeq	r6, [r0], -ip

00012174 <main@@Base>:
   12174:	push	{r4, r5, r6, lr}
   12178:	sub	sp, sp, #240	; 0xf0
   1217c:	add	r4, sp, #8
   12180:	mov	r0, r4
   12184:	bl	13c24 <flatcc_builder_init@@Base>
   12188:	mov	r0, r4
   1218c:	mov	r1, #0
   12190:	bl	12400 <create_monster_bottom_up@@Base>
   12194:	cmp	r0, #0
   12198:	bne	1223c <main@@Base+0xc8>
   1219c:	add	r5, sp, #4
   121a0:	mov	r1, r5
   121a4:	mov	r0, r4
   121a8:	bl	176b8 <flatcc_builder_finalize_aligned_buffer@@Base>
   121ac:	bl	177c0 <flatcc_builder_aligned_free@@Base>
   121b0:	mov	r0, r4
   121b4:	bl	13da0 <flatcc_builder_reset@@Base>
   121b8:	mov	r1, #1
   121bc:	mov	r0, r4
   121c0:	bl	12400 <create_monster_bottom_up@@Base>
   121c4:	cmp	r0, #0
   121c8:	bne	12284 <main@@Base+0x110>
   121cc:	mov	r1, r5
   121d0:	mov	r0, r4
   121d4:	bl	176b8 <flatcc_builder_finalize_aligned_buffer@@Base>
   121d8:	mov	r6, r0
   121dc:	bl	12e88 <access_monster_buffer@@Base>
   121e0:	mov	r0, r6
   121e4:	bl	177c0 <flatcc_builder_aligned_free@@Base>
   121e8:	mov	r0, r4
   121ec:	bl	13da0 <flatcc_builder_reset@@Base>
   121f0:	mov	r0, r4
   121f4:	bl	12afc <create_monster_top_down@@Base>
   121f8:	mov	r1, r5
   121fc:	mov	r0, r4
   12200:	bl	17608 <flatcc_builder_finalize_buffer@@Base>
   12204:	mov	r6, r0
   12208:	bl	12e88 <access_monster_buffer@@Base>
   1220c:	subs	r5, r0, #0
   12210:	bne	12260 <main@@Base+0xec>
   12214:	mov	r0, r6
   12218:	bl	11f60 <free@plt>
   1221c:	mov	r0, r4
   12220:	bl	13dac <flatcc_builder_clear@@Base>
   12224:	ldr	r0, [pc, #124]	; 122a8 <main@@Base+0x134>
   12228:	add	r0, pc, r0
   1222c:	bl	11f90 <puts@plt>
   12230:	mov	r0, r5
   12234:	add	sp, sp, #240	; 0xf0
   12238:	pop	{r4, r5, r6, pc}
   1223c:	ldr	r3, [pc, #104]	; 122ac <main@@Base+0x138>
   12240:	ldr	r1, [pc, #104]	; 122b0 <main@@Base+0x13c>
   12244:	ldr	r0, [pc, #104]	; 122b4 <main@@Base+0x140>
   12248:	add	r3, pc, r3
   1224c:	mov	r2, #308	; 0x134
   12250:	add	r3, r3, #156	; 0x9c
   12254:	add	r1, pc, r1
   12258:	add	r0, pc, r0
   1225c:	bl	11ffc <__assert_fail@plt>
   12260:	ldr	r3, [pc, #80]	; 122b8 <main@@Base+0x144>
   12264:	ldr	r1, [pc, #80]	; 122bc <main@@Base+0x148>
   12268:	ldr	r0, [pc, #80]	; 122c0 <main@@Base+0x14c>
   1226c:	add	r3, pc, r3
   12270:	ldr	r2, [pc, #76]	; 122c4 <main@@Base+0x150>
   12274:	add	r3, r3, #156	; 0x9c
   12278:	add	r1, pc, r1
   1227c:	add	r0, pc, r0
   12280:	bl	11ffc <__assert_fail@plt>
   12284:	ldr	r3, [pc, #60]	; 122c8 <main@@Base+0x154>
   12288:	ldr	r1, [pc, #60]	; 122cc <main@@Base+0x158>
   1228c:	ldr	r0, [pc, #60]	; 122d0 <main@@Base+0x15c>
   12290:	add	r3, pc, r3
   12294:	ldr	r2, [pc, #56]	; 122d4 <main@@Base+0x160>
   12298:	add	r3, r3, #156	; 0x9c
   1229c:	add	r1, pc, r1
   122a0:	add	r0, pc, r0
   122a4:	bl	11ffc <__assert_fail@plt>
   122a8:	andeq	r5, r0, ip, lsr #30
   122ac:	andeq	r5, r0, r8, lsr #23
   122b0:	muleq	r0, ip, lr
   122b4:	andeq	r6, r0, ip, lsl #14
   122b8:	andeq	r5, r0, r4, lsl #23
   122bc:	andeq	r5, r0, r8, ror lr
   122c0:	andeq	r6, r0, r8, ror #13
   122c4:	andeq	r0, r0, r6, asr r1
   122c8:	andeq	r5, r0, r0, ror #22
   122cc:	andeq	r5, r0, r4, asr lr
   122d0:	andeq	r6, r0, r4, asr #13
   122d4:	andeq	r0, r0, pc, asr #2

000122d8 <_start@@Base>:
   122d8:	mov	fp, #0
   122dc:	mov	lr, #0
   122e0:	pop	{r1}		; (ldr r1, [sp], #4)
   122e4:	mov	r2, sp
   122e8:	push	{r2}		; (str r2, [sp, #-4]!)
   122ec:	push	{r0}		; (str r0, [sp, #-4]!)
   122f0:	ldr	ip, [pc, #16]	; 12308 <_start@@Base+0x30>
   122f4:	push	{ip}		; (str ip, [sp, #-4]!)
   122f8:	ldr	r0, [pc, #12]	; 1230c <_start@@Base+0x34>
   122fc:	ldr	r3, [pc, #12]	; 12310 <_start@@Base+0x38>
   12300:	bl	11fa8 <__libc_start_main@plt>
   12304:	bl	11ff0 <abort@plt>
   12308:	andeq	r7, r1, r8, ror #27
   1230c:	andeq	r2, r1, r4, ror r1
   12310:	andeq	r7, r1, r8, lsl #27
   12314:	ldr	r3, [pc, #20]	; 12330 <_start@@Base+0x58>
   12318:	ldr	r2, [pc, #20]	; 12334 <_start@@Base+0x5c>
   1231c:	add	r3, pc, r3
   12320:	ldr	r2, [r3, r2]
   12324:	cmp	r2, #0
   12328:	bxeq	lr
   1232c:	b	11fb4 <__gmon_start__@plt>
   12330:	ldrdeq	r6, [r1], -ip
   12334:	andeq	r0, r0, ip, asr #32
   12338:	ldr	r3, [pc, #28]	; 1235c <_start@@Base+0x84>
   1233c:	ldr	r0, [pc, #28]	; 12360 <_start@@Base+0x88>
   12340:	sub	r3, r3, r0
   12344:	cmp	r3, #6
   12348:	bxls	lr
   1234c:	ldr	r3, [pc, #16]	; 12364 <_start@@Base+0x8c>
   12350:	cmp	r3, #0
   12354:	bxeq	lr
   12358:	bx	r3
   1235c:	andeq	r9, r2, r3, rrx
   12360:	andeq	r9, r2, r0, rrx
   12364:	andeq	r0, r0, r0
   12368:	ldr	r1, [pc, #36]	; 12394 <_start@@Base+0xbc>
   1236c:	ldr	r0, [pc, #36]	; 12398 <_start@@Base+0xc0>
   12370:	sub	r1, r1, r0
   12374:	asr	r1, r1, #2
   12378:	add	r1, r1, r1, lsr #31
   1237c:	asrs	r1, r1, #1
   12380:	bxeq	lr
   12384:	ldr	r3, [pc, #16]	; 1239c <_start@@Base+0xc4>
   12388:	cmp	r3, #0
   1238c:	bxeq	lr
   12390:	bx	r3
   12394:	andeq	r9, r2, r0, rrx
   12398:	andeq	r9, r2, r0, rrx
   1239c:	andeq	r0, r0, r0
   123a0:	push	{r4, lr}
   123a4:	ldr	r4, [pc, #24]	; 123c4 <_start@@Base+0xec>
   123a8:	ldrb	r3, [r4]
   123ac:	cmp	r3, #0
   123b0:	popne	{r4, pc}
   123b4:	bl	12338 <_start@@Base+0x60>
   123b8:	mov	r3, #1
   123bc:	strb	r3, [r4]
   123c0:	pop	{r4, pc}
   123c4:	andeq	r9, r2, r0, rrx
   123c8:	ldr	r0, [pc, #40]	; 123f8 <_start@@Base+0x120>
   123cc:	ldr	r3, [r0]
   123d0:	cmp	r3, #0
   123d4:	bne	123dc <_start@@Base+0x104>
   123d8:	b	12368 <_start@@Base+0x90>
   123dc:	ldr	r3, [pc, #24]	; 123fc <_start@@Base+0x124>
   123e0:	cmp	r3, #0
   123e4:	beq	123d8 <_start@@Base+0x100>
   123e8:	push	{r4, lr}
   123ec:	blx	r3
   123f0:	pop	{r4, lr}
   123f4:	b	12368 <_start@@Base+0x90>
   123f8:	andeq	r8, r2, r4, lsl pc
   123fc:	andeq	r0, r0, r0

00012400 <create_monster_bottom_up@@Base>:
   12400:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12404:	mov	r6, r1
   12408:	ldr	r1, [pc, #1692]	; 12aac <create_monster_bottom_up@@Base+0x6ac>
   1240c:	sub	sp, sp, #24
   12410:	add	r1, pc, r1
   12414:	mov	r4, r0
   12418:	bl	16c40 <flatcc_builder_create_string_str@@Base>
   1241c:	ldr	r1, [pc, #1676]	; 12ab0 <create_monster_bottom_up@@Base+0x6b0>
   12420:	add	r1, pc, r1
   12424:	mov	r7, r0
   12428:	mov	r0, r4
   1242c:	bl	16c40 <flatcc_builder_create_string_str@@Base>
   12430:	mov	r1, #2
   12434:	mov	r5, r0
   12438:	mov	r0, r4
   1243c:	bl	1539c <flatcc_builder_start_table@@Base>
   12440:	subs	sl, r0, #0
   12444:	bne	12450 <create_monster_bottom_up@@Base+0x50>
   12448:	cmp	r7, #0
   1244c:	bne	126ec <create_monster_bottom_up@@Base+0x2ec>
   12450:	mov	r1, #2
   12454:	mov	r0, r4
   12458:	bl	1539c <flatcc_builder_start_table@@Base>
   1245c:	subs	r7, r0, #0
   12460:	bne	12810 <create_monster_bottom_up@@Base+0x410>
   12464:	cmp	r5, #0
   12468:	bne	12610 <create_monster_bottom_up@@Base+0x210>
   1246c:	ldr	r1, [pc, #1600]	; 12ab4 <create_monster_bottom_up@@Base+0x6b4>
   12470:	mov	r0, r4
   12474:	add	r1, pc, r1
   12478:	bl	16c40 <flatcc_builder_create_string_str@@Base>
   1247c:	ldr	r3, [pc, #1588]	; 12ab8 <create_monster_bottom_up@@Base+0x6b8>
   12480:	add	ip, sp, #12
   12484:	add	r3, pc, r3
   12488:	add	r3, r3, #116	; 0x74
   1248c:	mov	r8, r0
   12490:	ldm	r3, {r0, r1, r2}
   12494:	mvn	r3, #0
   12498:	str	r3, [sp, #4]
   1249c:	mov	r3, #1
   124a0:	stmia	ip!, {r0, r1}
   124a4:	str	r3, [sp]
   124a8:	add	r1, sp, #12
   124ac:	strh	r2, [ip]
   124b0:	mov	r0, r4
   124b4:	mov	r2, #10
   124b8:	bl	15f60 <flatcc_builder_create_vector@@Base>
   124bc:	mov	r9, r0
   124c0:	mov	r0, r4
   124c4:	bl	151b4 <flatcc_builder_start_offset_vector@@Base>
   124c8:	mov	r0, r4
   124cc:	bl	16200 <flatcc_builder_end_offset_vector@@Base>
   124d0:	cmp	r6, #0
   124d4:	mov	r7, r0
   124d8:	beq	127d8 <create_monster_bottom_up@@Base+0x3d8>
   124dc:	mov	r3, #0
   124e0:	mov	r2, r3
   124e4:	mov	r1, r3
   124e8:	mov	r0, r4
   124ec:	bl	14564 <flatcc_builder_start_buffer@@Base>
   124f0:	cmp	r0, #0
   124f4:	bne	12504 <create_monster_bottom_up@@Base+0x104>
   124f8:	mov	r1, #10
   124fc:	mov	r0, r4
   12500:	bl	1539c <flatcc_builder_start_table@@Base>
   12504:	mov	r3, #4
   12508:	mov	r2, #12
   1250c:	mov	r1, #0
   12510:	mov	r0, r4
   12514:	bl	16ddc <flatcc_builder_table_add@@Base>
   12518:	cmp	r0, #0
   1251c:	beq	12538 <create_monster_bottom_up@@Base+0x138>
   12520:	ldr	r3, [pc, #1428]	; 12abc <create_monster_bottom_up@@Base+0x6bc>
   12524:	mov	r1, #1065353216	; 0x3f800000
   12528:	mov	r2, #1073741824	; 0x40000000
   1252c:	str	r1, [r0]
   12530:	str	r2, [r0, #4]
   12534:	str	r3, [r0, #8]
   12538:	mov	r3, #2
   1253c:	mov	r2, r3
   12540:	mov	r1, r3
   12544:	mov	r0, r4
   12548:	bl	16ddc <flatcc_builder_table_add@@Base>
   1254c:	cmp	r0, #0
   12550:	movne	r3, #300	; 0x12c
   12554:	strhne	r3, [r0]
   12558:	cmp	r8, #0
   1255c:	bne	12870 <create_monster_bottom_up@@Base+0x470>
   12560:	cmp	r9, #0
   12564:	bne	1288c <create_monster_bottom_up@@Base+0x48c>
   12568:	mov	r3, #1
   1256c:	mov	r2, r3
   12570:	mov	r1, #6
   12574:	mov	r0, r4
   12578:	bl	16ddc <flatcc_builder_table_add@@Base>
   1257c:	cmp	r0, #0
   12580:	movne	r3, #0
   12584:	strbne	r3, [r0]
   12588:	cmp	r7, #0
   1258c:	bne	128a4 <create_monster_bottom_up@@Base+0x4a4>
   12590:	cmp	r5, #0
   12594:	beq	125d0 <create_monster_bottom_up@@Base+0x1d0>
   12598:	mov	r3, #1
   1259c:	mov	r2, r3
   125a0:	mov	r1, #8
   125a4:	mov	r0, r4
   125a8:	bl	16ddc <flatcc_builder_table_add@@Base>
   125ac:	subs	r6, r0, #0
   125b0:	beq	125d0 <create_monster_bottom_up@@Base+0x1d0>
   125b4:	mov	r1, #9
   125b8:	mov	r0, r4
   125bc:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   125c0:	cmp	r0, #0
   125c4:	movne	r3, #1
   125c8:	strbne	r3, [r6]
   125cc:	strne	r5, [r0]
   125d0:	ldr	r1, [pc, #1256]	; 12ac0 <create_monster_bottom_up@@Base+0x6c0>
   125d4:	mov	r2, #0
   125d8:	add	r1, pc, r1
   125dc:	add	r1, r1, #128	; 0x80
   125e0:	mov	r0, r4
   125e4:	bl	15ce8 <flatcc_builder_check_required@@Base>
   125e8:	cmp	r0, #0
   125ec:	beq	12a58 <create_monster_bottom_up@@Base+0x658>
   125f0:	mov	r0, r4
   125f4:	bl	15d90 <flatcc_builder_end_table@@Base>
   125f8:	mov	r1, r0
   125fc:	mov	r0, r4
   12600:	bl	1461c <flatcc_builder_end_buffer@@Base>
   12604:	mov	r0, #0
   12608:	add	sp, sp, #24
   1260c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12610:	mov	r1, r7
   12614:	mov	r0, r4
   12618:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   1261c:	subs	r9, r0, #0
   12620:	beq	12a80 <create_monster_bottom_up@@Base+0x680>
   12624:	mov	r3, #2
   12628:	str	r5, [r9]
   1262c:	mov	r2, r3
   12630:	mov	r1, #1
   12634:	mov	r0, r4
   12638:	bl	16ddc <flatcc_builder_table_add@@Base>
   1263c:	cmp	r0, #0
   12640:	beq	128d8 <create_monster_bottom_up@@Base+0x4d8>
   12644:	ldr	r9, [pc, #1144]	; 12ac4 <create_monster_bottom_up@@Base+0x6c4>
   12648:	mov	r3, #5
   1264c:	add	r9, pc, r9
   12650:	strh	r3, [r0]
   12654:	add	r1, r9, #84	; 0x54
   12658:	mov	r2, #0
   1265c:	mov	r0, r4
   12660:	bl	15ce8 <flatcc_builder_check_required@@Base>
   12664:	cmp	r0, #0
   12668:	beq	12a5c <create_monster_bottom_up@@Base+0x65c>
   1266c:	mov	r0, r4
   12670:	bl	15d90 <flatcc_builder_end_table@@Base>
   12674:	ldr	r1, [pc, #1100]	; 12ac8 <create_monster_bottom_up@@Base+0x6c8>
   12678:	add	r9, r9, #116	; 0x74
   1267c:	add	r1, pc, r1
   12680:	mov	r5, r0
   12684:	mov	r0, r4
   12688:	bl	16c40 <flatcc_builder_create_string_str@@Base>
   1268c:	mvn	r3, #0
   12690:	add	ip, sp, #12
   12694:	str	r3, [sp, #4]
   12698:	mov	r3, #1
   1269c:	mov	r8, r0
   126a0:	ldm	r9, {r0, r1, r2}
   126a4:	stmia	ip!, {r0, r1}
   126a8:	str	r3, [sp]
   126ac:	add	r1, sp, #12
   126b0:	strh	r2, [ip]
   126b4:	mov	r0, r4
   126b8:	mov	r2, #10
   126bc:	bl	15f60 <flatcc_builder_create_vector@@Base>
   126c0:	mov	r9, r0
   126c4:	mov	r0, r4
   126c8:	bl	151b4 <flatcc_builder_start_offset_vector@@Base>
   126cc:	cmp	r7, #0
   126d0:	bne	127c8 <create_monster_bottom_up@@Base+0x3c8>
   126d4:	cmp	r5, #0
   126d8:	beq	124c8 <create_monster_bottom_up@@Base+0xc8>
   126dc:	mov	r1, r5
   126e0:	mov	r0, r4
   126e4:	bl	14bc4 <flatcc_builder_offset_vector_push@@Base>
   126e8:	b	124c8 <create_monster_bottom_up@@Base+0xc8>
   126ec:	mov	r1, sl
   126f0:	mov	r0, r4
   126f4:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   126f8:	cmp	r0, #0
   126fc:	beq	12450 <create_monster_bottom_up@@Base+0x50>
   12700:	mov	r3, #2
   12704:	str	r7, [r0]
   12708:	mov	r2, r3
   1270c:	mov	r1, #1
   12710:	mov	r0, r4
   12714:	bl	16ddc <flatcc_builder_table_add@@Base>
   12718:	cmp	r0, #0
   1271c:	beq	12450 <create_monster_bottom_up@@Base+0x50>
   12720:	ldr	r9, [pc, #932]	; 12acc <create_monster_bottom_up@@Base+0x6cc>
   12724:	mov	r3, #3
   12728:	add	r9, pc, r9
   1272c:	strh	r3, [r0]
   12730:	add	r1, r9, #84	; 0x54
   12734:	mov	r2, sl
   12738:	mov	r0, r4
   1273c:	bl	15ce8 <flatcc_builder_check_required@@Base>
   12740:	cmp	r0, #0
   12744:	beq	12a5c <create_monster_bottom_up@@Base+0x65c>
   12748:	mov	r0, r4
   1274c:	bl	15d90 <flatcc_builder_end_table@@Base>
   12750:	mov	r1, #2
   12754:	mov	r7, r0
   12758:	mov	r0, r4
   1275c:	bl	1539c <flatcc_builder_start_table@@Base>
   12760:	cmp	r0, #0
   12764:	beq	128bc <create_monster_bottom_up@@Base+0x4bc>
   12768:	ldr	r1, [pc, #864]	; 12ad0 <create_monster_bottom_up@@Base+0x6d0>
   1276c:	mov	r0, r4
   12770:	add	r1, pc, r1
   12774:	bl	16c40 <flatcc_builder_create_string_str@@Base>
   12778:	add	r9, r9, #116	; 0x74
   1277c:	mvn	r3, #0
   12780:	add	ip, sp, #12
   12784:	str	r3, [sp, #4]
   12788:	mov	r3, #1
   1278c:	mov	r8, r0
   12790:	ldm	r9, {r0, r1, r2}
   12794:	stmia	ip!, {r0, r1}
   12798:	str	r3, [sp]
   1279c:	add	r1, sp, #12
   127a0:	strh	r2, [ip]
   127a4:	mov	r2, #10
   127a8:	mov	r0, r4
   127ac:	bl	15f60 <flatcc_builder_create_vector@@Base>
   127b0:	mov	r9, r0
   127b4:	mov	r0, r4
   127b8:	bl	151b4 <flatcc_builder_start_offset_vector@@Base>
   127bc:	cmp	r7, #0
   127c0:	movne	r5, #0
   127c4:	beq	12868 <create_monster_bottom_up@@Base+0x468>
   127c8:	mov	r1, r7
   127cc:	mov	r0, r4
   127d0:	bl	14bc4 <flatcc_builder_offset_vector_push@@Base>
   127d4:	b	126d4 <create_monster_bottom_up@@Base+0x2d4>
   127d8:	mov	r3, r6
   127dc:	mov	r2, r6
   127e0:	mov	r1, r6
   127e4:	mov	r0, r4
   127e8:	bl	14564 <flatcc_builder_start_buffer@@Base>
   127ec:	cmp	r0, #0
   127f0:	bne	12604 <create_monster_bottom_up@@Base+0x204>
   127f4:	mov	r1, #10
   127f8:	mov	r0, r4
   127fc:	bl	1539c <flatcc_builder_start_table@@Base>
   12800:	cmp	r0, #0
   12804:	beq	12920 <create_monster_bottom_up@@Base+0x520>
   12808:	mov	r1, #0
   1280c:	b	125fc <create_monster_bottom_up@@Base+0x1fc>
   12810:	ldr	r1, [pc, #700]	; 12ad4 <create_monster_bottom_up@@Base+0x6d4>
   12814:	mov	r0, r4
   12818:	add	r1, pc, r1
   1281c:	bl	16c40 <flatcc_builder_create_string_str@@Base>
   12820:	ldr	r3, [pc, #688]	; 12ad8 <create_monster_bottom_up@@Base+0x6d8>
   12824:	mvn	lr, #0
   12828:	add	r3, pc, r3
   1282c:	add	r3, r3, #116	; 0x74
   12830:	add	ip, sp, #12
   12834:	mov	r8, r0
   12838:	ldm	r3, {r0, r1, r2}
   1283c:	mov	r3, #1
   12840:	stm	sp, {r3, lr}
   12844:	stmia	ip!, {r0, r1}
   12848:	add	r1, sp, #12
   1284c:	strh	r2, [ip]
   12850:	mov	r0, r4
   12854:	mov	r2, #10
   12858:	bl	15f60 <flatcc_builder_create_vector@@Base>
   1285c:	mov	r9, r0
   12860:	mov	r0, r4
   12864:	bl	151b4 <flatcc_builder_start_offset_vector@@Base>
   12868:	mov	r5, #0
   1286c:	b	124c8 <create_monster_bottom_up@@Base+0xc8>
   12870:	mov	r1, #3
   12874:	mov	r0, r4
   12878:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   1287c:	cmp	r0, #0
   12880:	strne	r8, [r0]
   12884:	cmp	r9, #0
   12888:	beq	12568 <create_monster_bottom_up@@Base+0x168>
   1288c:	mov	r1, #5
   12890:	mov	r0, r4
   12894:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   12898:	cmp	r0, #0
   1289c:	strne	r9, [r0]
   128a0:	b	12568 <create_monster_bottom_up@@Base+0x168>
   128a4:	mov	r1, #7
   128a8:	mov	r0, r4
   128ac:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   128b0:	cmp	r0, #0
   128b4:	strne	r7, [r0]
   128b8:	b	12590 <create_monster_bottom_up@@Base+0x190>
   128bc:	cmp	r5, #0
   128c0:	beq	128d8 <create_monster_bottom_up@@Base+0x4d8>
   128c4:	mov	r1, r0
   128c8:	mov	r0, r4
   128cc:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   128d0:	subs	r9, r0, #0
   128d4:	bne	12624 <create_monster_bottom_up@@Base+0x224>
   128d8:	ldr	r1, [pc, #508]	; 12adc <create_monster_bottom_up@@Base+0x6dc>
   128dc:	mov	r0, r4
   128e0:	add	r1, pc, r1
   128e4:	bl	16c40 <flatcc_builder_create_string_str@@Base>
   128e8:	ldr	r3, [pc, #496]	; 12ae0 <create_monster_bottom_up@@Base+0x6e0>
   128ec:	add	ip, sp, #12
   128f0:	add	r3, pc, r3
   128f4:	add	r3, r3, #116	; 0x74
   128f8:	mvn	lr, #0
   128fc:	mov	r8, r0
   12900:	ldm	r3, {r0, r1, r2}
   12904:	mov	r3, #1
   12908:	stm	sp, {r3, lr}
   1290c:	stmia	ip!, {r0, r1}
   12910:	add	r1, sp, #12
   12914:	strh	r2, [ip]
   12918:	mov	r2, #10
   1291c:	b	127a8 <create_monster_bottom_up@@Base+0x3a8>
   12920:	mov	r1, r6
   12924:	mov	r3, #4
   12928:	mov	r2, #12
   1292c:	mov	r0, r4
   12930:	bl	16ddc <flatcc_builder_table_add@@Base>
   12934:	cmp	r0, #0
   12938:	beq	12808 <create_monster_bottom_up@@Base+0x408>
   1293c:	ldr	r3, [pc, #376]	; 12abc <create_monster_bottom_up@@Base+0x6bc>
   12940:	mov	r1, #1065353216	; 0x3f800000
   12944:	mov	r2, #1073741824	; 0x40000000
   12948:	cmp	r8, #0
   1294c:	str	r1, [r0]
   12950:	str	r2, [r0, #4]
   12954:	str	r3, [r0, #8]
   12958:	beq	12808 <create_monster_bottom_up@@Base+0x408>
   1295c:	mov	r1, #3
   12960:	mov	r0, r4
   12964:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   12968:	cmp	r0, #0
   1296c:	beq	12808 <create_monster_bottom_up@@Base+0x408>
   12970:	cmp	r9, #0
   12974:	str	r8, [r0]
   12978:	beq	12808 <create_monster_bottom_up@@Base+0x408>
   1297c:	mov	r1, #5
   12980:	mov	r0, r4
   12984:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   12988:	cmp	r0, #0
   1298c:	beq	12808 <create_monster_bottom_up@@Base+0x408>
   12990:	cmp	r7, #0
   12994:	str	r9, [r0]
   12998:	beq	12808 <create_monster_bottom_up@@Base+0x408>
   1299c:	mov	r1, #7
   129a0:	mov	r0, r4
   129a4:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   129a8:	cmp	r0, #0
   129ac:	beq	12808 <create_monster_bottom_up@@Base+0x408>
   129b0:	str	r7, [r0]
   129b4:	mov	r1, #9
   129b8:	mov	r0, r4
   129bc:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   129c0:	cmp	r0, #0
   129c4:	beq	12808 <create_monster_bottom_up@@Base+0x408>
   129c8:	mov	r3, #2
   129cc:	str	r5, [r0]
   129d0:	mov	r2, r3
   129d4:	mov	r1, r3
   129d8:	mov	r0, r4
   129dc:	bl	16ddc <flatcc_builder_table_add@@Base>
   129e0:	cmp	r0, #0
   129e4:	beq	12808 <create_monster_bottom_up@@Base+0x408>
   129e8:	mov	r2, #300	; 0x12c
   129ec:	mov	r3, #1
   129f0:	strh	r2, [r0]
   129f4:	mov	r1, #6
   129f8:	mov	r2, r3
   129fc:	mov	r0, r4
   12a00:	bl	16ddc <flatcc_builder_table_add@@Base>
   12a04:	cmp	r0, #0
   12a08:	beq	12808 <create_monster_bottom_up@@Base+0x408>
   12a0c:	mov	r3, #1
   12a10:	mov	r5, #0
   12a14:	strb	r5, [r0]
   12a18:	mov	r2, r3
   12a1c:	mov	r1, #8
   12a20:	mov	r0, r4
   12a24:	bl	16ddc <flatcc_builder_table_add@@Base>
   12a28:	cmp	r0, #0
   12a2c:	beq	12808 <create_monster_bottom_up@@Base+0x408>
   12a30:	ldr	r1, [pc, #172]	; 12ae4 <create_monster_bottom_up@@Base+0x6e4>
   12a34:	mov	r3, #1
   12a38:	add	r1, pc, r1
   12a3c:	strb	r3, [r0]
   12a40:	mov	r2, r5
   12a44:	add	r1, r1, #128	; 0x80
   12a48:	mov	r0, r4
   12a4c:	bl	15ce8 <flatcc_builder_check_required@@Base>
   12a50:	cmp	r0, r5
   12a54:	bne	125f0 <create_monster_bottom_up@@Base+0x1f0>
   12a58:	bl	1206c <__assert_fail@plt+0x70>
   12a5c:	ldr	r3, [pc, #132]	; 12ae8 <create_monster_bottom_up@@Base+0x6e8>
   12a60:	ldr	r1, [pc, #132]	; 12aec <create_monster_bottom_up@@Base+0x6ec>
   12a64:	ldr	r0, [pc, #132]	; 12af0 <create_monster_bottom_up@@Base+0x6f0>
   12a68:	add	r3, pc, r3
   12a6c:	mov	r2, #52	; 0x34
   12a70:	add	r3, r3, #88	; 0x58
   12a74:	add	r1, pc, r1
   12a78:	add	r0, pc, r0
   12a7c:	bl	11ffc <__assert_fail@plt>
   12a80:	ldr	r1, [pc, #108]	; 12af4 <create_monster_bottom_up@@Base+0x6f4>
   12a84:	mov	r0, r4
   12a88:	add	r1, pc, r1
   12a8c:	bl	16c40 <flatcc_builder_create_string_str@@Base>
   12a90:	ldr	r3, [pc, #96]	; 12af8 <create_monster_bottom_up@@Base+0x6f8>
   12a94:	add	ip, sp, #12
   12a98:	add	r3, pc, r3
   12a9c:	add	r3, r3, #116	; 0x74
   12aa0:	mov	r5, r9
   12aa4:	mov	r8, r0
   12aa8:	b	12490 <create_monster_bottom_up@@Base+0x90>
   12aac:	andeq	r5, r0, r4, lsr ip
   12ab0:	andeq	r5, r0, ip, lsr #24
   12ab4:	andeq	r5, r0, r8, ror ip
   12ab8:	andeq	r5, r0, ip, ror #18
   12abc:	submi	r0, r0, r0
   12ac0:	andeq	r5, r0, r8, lsl r8
   12ac4:	andeq	r5, r0, r4, lsr #15
   12ac8:	andeq	r5, r0, r0, ror sl
   12acc:	andeq	r5, r0, r8, asr #13
   12ad0:	andeq	r5, r0, ip, ror r9
   12ad4:	ldrdeq	r5, [r0], -r4
   12ad8:	andeq	r5, r0, r8, asr #11
   12adc:	andeq	r5, r0, ip, lsl #16
   12ae0:	andeq	r5, r0, r0, lsl #10
   12ae4:			; <UNDEFINED> instruction: 0x000053b8
   12ae8:	andeq	r5, r0, r8, lsl #7
   12aec:			; <UNDEFINED> instruction: 0x000054bc
   12af0:	ldrdeq	r5, [r0], -r8
   12af4:	andeq	r5, r0, r4, ror #12
   12af8:	andeq	r5, r0, r8, asr r3

00012afc <create_monster_top_down@@Base>:
   12afc:	ldr	r3, [pc, #856]	; 12e5c <create_monster_top_down@@Base+0x360>
   12b00:	push	{r4, r5, r6, lr}
   12b04:	add	r3, pc, r3
   12b08:	add	r3, r3, #116	; 0x74
   12b0c:	sub	sp, sp, #24
   12b10:	mov	r4, r0
   12b14:	ldm	r3, {r0, r1, r2}
   12b18:	add	r5, sp, #12
   12b1c:	mov	ip, r5
   12b20:	mov	r3, #0
   12b24:	stmia	ip!, {r0, r1}
   12b28:	mov	r0, r4
   12b2c:	strh	r2, [ip]
   12b30:	mov	r1, r3
   12b34:	mov	r2, r3
   12b38:	bl	14564 <flatcc_builder_start_buffer@@Base>
   12b3c:	cmp	r0, #0
   12b40:	bne	12b50 <create_monster_top_down@@Base+0x54>
   12b44:	mov	r1, #10
   12b48:	mov	r0, r4
   12b4c:	bl	1539c <flatcc_builder_start_table@@Base>
   12b50:	mov	r3, #4
   12b54:	mov	r2, #12
   12b58:	mov	r1, #0
   12b5c:	mov	r0, r4
   12b60:	bl	16ddc <flatcc_builder_table_add@@Base>
   12b64:	cmp	r0, #0
   12b68:	beq	12b84 <create_monster_top_down@@Base+0x88>
   12b6c:	ldr	r3, [pc, #748]	; 12e60 <create_monster_top_down@@Base+0x364>
   12b70:	mov	r1, #1065353216	; 0x3f800000
   12b74:	mov	r2, #1073741824	; 0x40000000
   12b78:	str	r1, [r0]
   12b7c:	str	r2, [r0, #4]
   12b80:	str	r3, [r0, #8]
   12b84:	mov	r3, #2
   12b88:	mov	r1, r3
   12b8c:	mov	r2, r3
   12b90:	mov	r0, r4
   12b94:	bl	16ddc <flatcc_builder_table_add@@Base>
   12b98:	ldr	r1, [pc, #708]	; 12e64 <create_monster_top_down@@Base+0x368>
   12b9c:	add	r1, pc, r1
   12ba0:	cmp	r0, #0
   12ba4:	movne	r3, #300	; 0x12c
   12ba8:	strhne	r3, [r0]
   12bac:	mov	r0, r4
   12bb0:	bl	16c40 <flatcc_builder_create_string_str@@Base>
   12bb4:	subs	r6, r0, #0
   12bb8:	beq	12bd0 <create_monster_top_down@@Base+0xd4>
   12bbc:	mov	r1, #3
   12bc0:	mov	r0, r4
   12bc4:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   12bc8:	cmp	r0, #0
   12bcc:	strne	r6, [r0]
   12bd0:	mvn	r2, #0
   12bd4:	mov	r3, #1
   12bd8:	mov	r1, r5
   12bdc:	str	r2, [sp, #4]
   12be0:	str	r3, [sp]
   12be4:	mov	r2, #10
   12be8:	mov	r0, r4
   12bec:	bl	15f60 <flatcc_builder_create_vector@@Base>
   12bf0:	subs	r5, r0, #0
   12bf4:	beq	12c0c <create_monster_top_down@@Base+0x110>
   12bf8:	mov	r1, #5
   12bfc:	mov	r0, r4
   12c00:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   12c04:	cmp	r0, #0
   12c08:	strne	r5, [r0]
   12c0c:	mov	r3, #1
   12c10:	mov	r2, r3
   12c14:	mov	r1, #6
   12c18:	mov	r0, r4
   12c1c:	bl	16ddc <flatcc_builder_table_add@@Base>
   12c20:	cmp	r0, #0
   12c24:	movne	r3, #0
   12c28:	strbne	r3, [r0]
   12c2c:	mov	r0, r4
   12c30:	bl	151b4 <flatcc_builder_start_offset_vector@@Base>
   12c34:	ldr	r1, [pc, #556]	; 12e68 <create_monster_top_down@@Base+0x36c>
   12c38:	mov	r0, r4
   12c3c:	add	r1, pc, r1
   12c40:	bl	16c40 <flatcc_builder_create_string_str@@Base>
   12c44:	mov	r1, #2
   12c48:	mov	r5, r0
   12c4c:	mov	r0, r4
   12c50:	bl	1539c <flatcc_builder_start_table@@Base>
   12c54:	subs	r6, r0, #0
   12c58:	bne	12c64 <create_monster_top_down@@Base+0x168>
   12c5c:	cmp	r5, #0
   12c60:	bne	12dbc <create_monster_top_down@@Base+0x2c0>
   12c64:	ldr	r1, [pc, #512]	; 12e6c <create_monster_top_down@@Base+0x370>
   12c68:	mov	r0, r4
   12c6c:	add	r1, pc, r1
   12c70:	bl	16c40 <flatcc_builder_create_string_str@@Base>
   12c74:	mov	r1, #2
   12c78:	mov	r5, r0
   12c7c:	mov	r0, r4
   12c80:	bl	1539c <flatcc_builder_start_table@@Base>
   12c84:	subs	r6, r0, #0
   12c88:	bne	12c94 <create_monster_top_down@@Base+0x198>
   12c8c:	cmp	r5, #0
   12c90:	bne	12ca0 <create_monster_top_down@@Base+0x1a4>
   12c94:	mov	r3, #0
   12c98:	ldr	r3, [r3]
   12c9c:	udf	#0
   12ca0:	mov	r1, r6
   12ca4:	mov	r0, r4
   12ca8:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   12cac:	cmp	r0, #0
   12cb0:	beq	12c94 <create_monster_top_down@@Base+0x198>
   12cb4:	mov	r3, #2
   12cb8:	str	r5, [r0]
   12cbc:	mov	r2, r3
   12cc0:	mov	r1, #1
   12cc4:	mov	r0, r4
   12cc8:	bl	16ddc <flatcc_builder_table_add@@Base>
   12ccc:	cmp	r0, #0
   12cd0:	beq	12c94 <create_monster_top_down@@Base+0x198>
   12cd4:	ldr	r1, [pc, #404]	; 12e70 <create_monster_top_down@@Base+0x374>
   12cd8:	mov	r3, #5
   12cdc:	add	r1, pc, r1
   12ce0:	strh	r3, [r0]
   12ce4:	mov	r2, r6
   12ce8:	add	r1, r1, #84	; 0x54
   12cec:	mov	r0, r4
   12cf0:	bl	15ce8 <flatcc_builder_check_required@@Base>
   12cf4:	cmp	r0, #0
   12cf8:	beq	12e38 <create_monster_top_down@@Base+0x33c>
   12cfc:	mov	r0, r4
   12d00:	bl	15d90 <flatcc_builder_end_table@@Base>
   12d04:	subs	r1, r0, #0
   12d08:	beq	12c94 <create_monster_top_down@@Base+0x198>
   12d0c:	mov	r0, r4
   12d10:	bl	14bc4 <flatcc_builder_offset_vector_push@@Base>
   12d14:	ldr	r5, [r0]
   12d18:	mov	r0, r4
   12d1c:	bl	16200 <flatcc_builder_end_offset_vector@@Base>
   12d20:	subs	r6, r0, #0
   12d24:	beq	12d3c <create_monster_top_down@@Base+0x240>
   12d28:	mov	r1, #7
   12d2c:	mov	r0, r4
   12d30:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   12d34:	cmp	r0, #0
   12d38:	strne	r6, [r0]
   12d3c:	cmp	r5, #0
   12d40:	beq	12d7c <create_monster_top_down@@Base+0x280>
   12d44:	mov	r3, #1
   12d48:	mov	r2, r3
   12d4c:	mov	r1, #8
   12d50:	mov	r0, r4
   12d54:	bl	16ddc <flatcc_builder_table_add@@Base>
   12d58:	subs	r6, r0, #0
   12d5c:	beq	12d7c <create_monster_top_down@@Base+0x280>
   12d60:	mov	r1, #9
   12d64:	mov	r0, r4
   12d68:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   12d6c:	cmp	r0, #0
   12d70:	movne	r3, #1
   12d74:	strbne	r3, [r6]
   12d78:	strne	r5, [r0]
   12d7c:	ldr	r1, [pc, #240]	; 12e74 <create_monster_top_down@@Base+0x378>
   12d80:	mov	r2, #0
   12d84:	add	r1, pc, r1
   12d88:	add	r1, r1, #128	; 0x80
   12d8c:	mov	r0, r4
   12d90:	bl	15ce8 <flatcc_builder_check_required@@Base>
   12d94:	cmp	r0, #0
   12d98:	beq	12e34 <create_monster_top_down@@Base+0x338>
   12d9c:	mov	r0, r4
   12da0:	bl	15d90 <flatcc_builder_end_table@@Base>
   12da4:	mov	r1, r0
   12da8:	mov	r0, r4
   12dac:	bl	1461c <flatcc_builder_end_buffer@@Base>
   12db0:	mov	r0, #0
   12db4:	add	sp, sp, #24
   12db8:	pop	{r4, r5, r6, pc}
   12dbc:	mov	r1, r6
   12dc0:	mov	r0, r4
   12dc4:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   12dc8:	cmp	r0, #0
   12dcc:	beq	12c64 <create_monster_top_down@@Base+0x168>
   12dd0:	mov	r3, #2
   12dd4:	str	r5, [r0]
   12dd8:	mov	r2, r3
   12ddc:	mov	r1, #1
   12de0:	mov	r0, r4
   12de4:	bl	16ddc <flatcc_builder_table_add@@Base>
   12de8:	cmp	r0, #0
   12dec:	beq	12c64 <create_monster_top_down@@Base+0x168>
   12df0:	ldr	r1, [pc, #128]	; 12e78 <create_monster_top_down@@Base+0x37c>
   12df4:	mov	r3, #3
   12df8:	add	r1, pc, r1
   12dfc:	strh	r3, [r0]
   12e00:	mov	r2, r6
   12e04:	add	r1, r1, #84	; 0x54
   12e08:	mov	r0, r4
   12e0c:	bl	15ce8 <flatcc_builder_check_required@@Base>
   12e10:	cmp	r0, #0
   12e14:	beq	12e38 <create_monster_top_down@@Base+0x33c>
   12e18:	mov	r0, r4
   12e1c:	bl	15d90 <flatcc_builder_end_table@@Base>
   12e20:	subs	r1, r0, #0
   12e24:	beq	12c64 <create_monster_top_down@@Base+0x168>
   12e28:	mov	r0, r4
   12e2c:	bl	14bc4 <flatcc_builder_offset_vector_push@@Base>
   12e30:	b	12c64 <create_monster_top_down@@Base+0x168>
   12e34:	bl	1206c <__assert_fail@plt+0x70>
   12e38:	ldr	r3, [pc, #60]	; 12e7c <create_monster_top_down@@Base+0x380>
   12e3c:	ldr	r1, [pc, #60]	; 12e80 <create_monster_top_down@@Base+0x384>
   12e40:	ldr	r0, [pc, #60]	; 12e84 <create_monster_top_down@@Base+0x388>
   12e44:	add	r3, pc, r3
   12e48:	mov	r2, #52	; 0x34
   12e4c:	add	r3, r3, #88	; 0x58
   12e50:	add	r1, pc, r1
   12e54:	add	r0, pc, r0
   12e58:	bl	11ffc <__assert_fail@plt>
   12e5c:	andeq	r5, r0, ip, ror #5
   12e60:	submi	r0, r0, r0
   12e64:	andeq	r5, r0, r0, asr r5
   12e68:	andeq	r5, r0, r8, lsl #8
   12e6c:	andeq	r5, r0, r0, ror #7
   12e70:	andeq	r5, r0, r4, lsl r1
   12e74:	andeq	r5, r0, ip, rrx
   12e78:	strdeq	r4, [r0], -r8
   12e7c:	andeq	r4, r0, ip, lsr #31
   12e80:	andeq	r5, r0, r0, ror #1
   12e84:	strdeq	r5, [r0], -ip

00012e88 <access_monster_buffer@@Base>:
   12e88:	cmp	r0, #0
   12e8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e90:	beq	13270 <access_monster_buffer@@Base+0x3e8>
   12e94:	ldr	r3, [r0]
   12e98:	adds	r4, r0, r3
   12e9c:	beq	13270 <access_monster_buffer@@Base+0x3e8>
   12ea0:	ldr	r5, [r0, r3]
   12ea4:	sub	r5, r4, r5
   12ea8:	ldrh	r6, [r5]
   12eac:	cmp	r6, #9
   12eb0:	bls	12f70 <access_monster_buffer@@Base+0xe8>
   12eb4:	ldrh	r7, [r5, #8]
   12eb8:	cmp	r7, #0
   12ebc:	moveq	r2, #100	; 0x64
   12ec0:	ldrshne	r2, [r4, r7]
   12ec4:	ldrh	r8, [r5, #6]
   12ec8:	cmp	r8, #0
   12ecc:	moveq	r1, #150	; 0x96
   12ed0:	ldrshne	r1, [r4, r8]
   12ed4:	cmp	r6, #11
   12ed8:	movls	r0, #0
   12edc:	movls	r9, r0
   12ee0:	bls	12f08 <access_monster_buffer@@Base+0x80>
   12ee4:	ldrh	r0, [r5, #10]
   12ee8:	cmp	r0, #0
   12eec:	beq	13554 <access_monster_buffer@@Base+0x6cc>
   12ef0:	ldr	r3, [r4, r0]
   12ef4:	add	r0, r4, r0
   12ef8:	add	r3, r3, #4
   12efc:	adds	r0, r0, r3
   12f00:	beq	13554 <access_monster_buffer@@Base+0x6cc>
   12f04:	ldr	r9, [r0, #-4]
   12f08:	cmp	r2, #300	; 0x12c
   12f0c:	bne	12f78 <access_monster_buffer@@Base+0xf0>
   12f10:	cmp	r1, #150	; 0x96
   12f14:	bne	13294 <access_monster_buffer@@Base+0x40c>
   12f18:	ldr	r1, [pc, #1148]	; 1339c <access_monster_buffer@@Base+0x514>
   12f1c:	add	r1, pc, r1
   12f20:	bl	11f54 <strcmp@plt>
   12f24:	cmp	r0, #0
   12f28:	bne	132b8 <access_monster_buffer@@Base+0x430>
   12f2c:	cmp	r9, #3
   12f30:	bne	132dc <access_monster_buffer@@Base+0x454>
   12f34:	cmp	r7, #0
   12f38:	beq	13300 <access_monster_buffer@@Base+0x478>
   12f3c:	cmp	r8, #0
   12f40:	bne	13324 <access_monster_buffer@@Base+0x49c>
   12f44:	cmp	r6, #5
   12f48:	bhi	12f9c <access_monster_buffer@@Base+0x114>
   12f4c:	ldr	r3, [pc, #1100]	; 133a0 <access_monster_buffer@@Base+0x518>
   12f50:	ldr	r1, [pc, #1100]	; 133a4 <access_monster_buffer@@Base+0x51c>
   12f54:	ldr	r0, [pc, #1100]	; 133a8 <access_monster_buffer@@Base+0x520>
   12f58:	add	r3, pc, r3
   12f5c:	mov	r2, #232	; 0xe8
   12f60:	add	r3, r3, #132	; 0x84
   12f64:	add	r1, pc, r1
   12f68:	add	r0, pc, r0
   12f6c:	bl	11ffc <__assert_fail@plt>
   12f70:	cmp	r6, #7
   12f74:	bhi	13530 <access_monster_buffer@@Base+0x6a8>
   12f78:	ldr	r3, [pc, #1068]	; 133ac <access_monster_buffer@@Base+0x524>
   12f7c:	ldr	r1, [pc, #1068]	; 133b0 <access_monster_buffer@@Base+0x528>
   12f80:	ldr	r0, [pc, #1068]	; 133b4 <access_monster_buffer@@Base+0x52c>
   12f84:	add	r3, pc, r3
   12f88:	mov	r2, #219	; 0xdb
   12f8c:	add	r3, r3, #132	; 0x84
   12f90:	add	r1, pc, r1
   12f94:	add	r0, pc, r0
   12f98:	bl	11ffc <__assert_fail@plt>
   12f9c:	ldrh	r3, [r5, #4]
   12fa0:	cmp	r3, #0
   12fa4:	beq	12f4c <access_monster_buffer@@Base+0xc4>
   12fa8:	adds	r3, r4, r3
   12fac:	beq	12f4c <access_monster_buffer@@Base+0xc4>
   12fb0:	vldr	s15, [pc, #984]	; 13390 <access_monster_buffer@@Base+0x508>
   12fb4:	vldr	s13, [r3]
   12fb8:	vldr	s14, [r3, #4]
   12fbc:	vldr	s12, [r3, #8]
   12fc0:	vcmp.f32	s13, s15
   12fc4:	vmrs	APSR_nzcv, fpscr
   12fc8:	bne	13348 <access_monster_buffer@@Base+0x4c0>
   12fcc:	vldr	s15, [pc, #960]	; 13394 <access_monster_buffer@@Base+0x50c>
   12fd0:	vcmp.f32	s14, s15
   12fd4:	vmrs	APSR_nzcv, fpscr
   12fd8:	bne	1336c <access_monster_buffer@@Base+0x4e4>
   12fdc:	vldr	s15, [pc, #948]	; 13398 <access_monster_buffer@@Base+0x510>
   12fe0:	vcmp.f32	s12, s15
   12fe4:	vmrs	APSR_nzcv, fpscr
   12fe8:	bne	134b0 <access_monster_buffer@@Base+0x628>
   12fec:	cmp	r6, #15
   12ff0:	bhi	13018 <access_monster_buffer@@Base+0x190>
   12ff4:	ldr	r3, [pc, #956]	; 133b8 <access_monster_buffer@@Base+0x530>
   12ff8:	ldr	r1, [pc, #956]	; 133bc <access_monster_buffer@@Base+0x534>
   12ffc:	ldr	r0, [pc, #956]	; 133c0 <access_monster_buffer@@Base+0x538>
   13000:	add	r3, pc, r3
   13004:	ldr	r2, [pc, #952]	; 133c4 <access_monster_buffer@@Base+0x53c>
   13008:	add	r3, r3, #132	; 0x84
   1300c:	add	r1, pc, r1
   13010:	add	r0, pc, r0
   13014:	bl	11ffc <__assert_fail@plt>
   13018:	ldrh	r3, [r5, #14]
   1301c:	cmp	r3, #0
   13020:	beq	12ff4 <access_monster_buffer@@Base+0x16c>
   13024:	ldr	r2, [r4, r3]
   13028:	add	r3, r4, r3
   1302c:	add	r2, r2, #4
   13030:	adds	r3, r3, r2
   13034:	beq	12ff4 <access_monster_buffer@@Base+0x16c>
   13038:	ldr	r2, [r3, #-4]
   1303c:	cmp	r2, #10
   13040:	bne	134d4 <access_monster_buffer@@Base+0x64c>
   13044:	ldrb	r3, [r3, #2]
   13048:	cmp	r3, #2
   1304c:	bne	134f8 <access_monster_buffer@@Base+0x670>
   13050:	cmp	r6, #19
   13054:	bhi	1307c <access_monster_buffer@@Base+0x1f4>
   13058:	ldr	r3, [pc, #872]	; 133c8 <access_monster_buffer@@Base+0x540>
   1305c:	ldr	r1, [pc, #872]	; 133cc <access_monster_buffer@@Base+0x544>
   13060:	ldr	r0, [pc, #872]	; 133d0 <access_monster_buffer@@Base+0x548>
   13064:	add	r3, pc, r3
   13068:	ldr	r2, [pc, #868]	; 133d4 <access_monster_buffer@@Base+0x54c>
   1306c:	add	r3, r3, #132	; 0x84
   13070:	add	r1, pc, r1
   13074:	add	r0, pc, r0
   13078:	bl	11ffc <__assert_fail@plt>
   1307c:	ldrh	r3, [r5, #18]
   13080:	cmp	r3, #0
   13084:	beq	13058 <access_monster_buffer@@Base+0x1d0>
   13088:	ldr	r2, [r4, r3]
   1308c:	add	r3, r4, r3
   13090:	add	r2, r2, #4
   13094:	adds	r3, r3, r2
   13098:	beq	13058 <access_monster_buffer@@Base+0x1d0>
   1309c:	ldr	r2, [r3, #-4]
   130a0:	cmp	r2, #2
   130a4:	bne	13058 <access_monster_buffer@@Base+0x1d0>
   130a8:	ldr	r2, [r3, #4]
   130ac:	add	r2, r2, #4
   130b0:	adds	r1, r3, r2
   130b4:	beq	1316c <access_monster_buffer@@Base+0x2e4>
   130b8:	ldr	r3, [r3, r2]
   130bc:	sub	r3, r1, r3
   130c0:	ldrh	ip, [r3]
   130c4:	cmp	ip, #5
   130c8:	bhi	130f0 <access_monster_buffer@@Base+0x268>
   130cc:	ldr	r3, [pc, #772]	; 133d8 <access_monster_buffer@@Base+0x550>
   130d0:	ldr	r1, [pc, #772]	; 133dc <access_monster_buffer@@Base+0x554>
   130d4:	ldr	r0, [pc, #772]	; 133e0 <access_monster_buffer@@Base+0x558>
   130d8:	add	r3, pc, r3
   130dc:	ldr	r2, [pc, #768]	; 133e4 <access_monster_buffer@@Base+0x55c>
   130e0:	add	r3, r3, #132	; 0x84
   130e4:	add	r1, pc, r1
   130e8:	add	r0, pc, r0
   130ec:	bl	11ffc <__assert_fail@plt>
   130f0:	ldrh	r0, [r3, #4]
   130f4:	cmp	r0, #0
   130f8:	beq	1355c <access_monster_buffer@@Base+0x6d4>
   130fc:	ldr	r2, [r1, r0]
   13100:	cmp	ip, #7
   13104:	add	r2, r2, #4
   13108:	add	r0, r1, r0
   1310c:	add	r0, r0, r2
   13110:	movls	r7, #0
   13114:	bhi	1351c <access_monster_buffer@@Base+0x694>
   13118:	cmp	r0, #0
   1311c:	beq	130cc <access_monster_buffer@@Base+0x244>
   13120:	ldr	r1, [pc, #704]	; 133e8 <access_monster_buffer@@Base+0x560>
   13124:	add	r1, pc, r1
   13128:	bl	11f54 <strcmp@plt>
   1312c:	cmp	r0, #0
   13130:	bne	130cc <access_monster_buffer@@Base+0x244>
   13134:	cmp	r7, #5
   13138:	bne	1324c <access_monster_buffer@@Base+0x3c4>
   1313c:	cmp	r6, #21
   13140:	bls	1315c <access_monster_buffer@@Base+0x2d4>
   13144:	ldrh	r3, [r5, #20]
   13148:	cmp	r3, #0
   1314c:	beq	1315c <access_monster_buffer@@Base+0x2d4>
   13150:	ldrb	r3, [r4, r3]
   13154:	cmp	r3, #1
   13158:	beq	13164 <access_monster_buffer@@Base+0x2dc>
   1315c:	mov	r0, #0
   13160:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13164:	cmp	r6, #23
   13168:	bhi	13170 <access_monster_buffer@@Base+0x2e8>
   1316c:	bl	12008 <__assert_fail@plt+0xc>
   13170:	ldrh	r3, [r5, #22]
   13174:	cmp	r3, #0
   13178:	beq	1316c <access_monster_buffer@@Base+0x2e4>
   1317c:	ldr	r1, [r4, r3]
   13180:	add	r4, r4, r3
   13184:	adds	r2, r4, r1
   13188:	beq	1316c <access_monster_buffer@@Base+0x2e4>
   1318c:	ldr	r3, [r4, r1]
   13190:	sub	r3, r2, r3
   13194:	ldrh	ip, [r3]
   13198:	cmp	ip, #5
   1319c:	bls	13210 <access_monster_buffer@@Base+0x388>
   131a0:	ldrh	r0, [r3, #4]
   131a4:	cmp	r0, #0
   131a8:	ldrne	r1, [r2, r0]
   131ac:	addne	r0, r2, r0
   131b0:	addne	r1, r1, #4
   131b4:	addne	r0, r0, r1
   131b8:	cmp	ip, #7
   131bc:	bls	13214 <access_monster_buffer@@Base+0x38c>
   131c0:	ldrh	r3, [r3, #6]
   131c4:	cmp	r3, #0
   131c8:	beq	1353c <access_monster_buffer@@Base+0x6b4>
   131cc:	ldr	r1, [pc, #536]	; 133ec <access_monster_buffer@@Base+0x564>
   131d0:	ldrsh	r4, [r2, r3]
   131d4:	add	r1, pc, r1
   131d8:	bl	11f54 <strcmp@plt>
   131dc:	cmp	r0, #0
   131e0:	bne	13228 <access_monster_buffer@@Base+0x3a0>
   131e4:	cmp	r4, #5
   131e8:	beq	1315c <access_monster_buffer@@Base+0x2d4>
   131ec:	ldr	r3, [pc, #508]	; 133f0 <access_monster_buffer@@Base+0x568>
   131f0:	ldr	r1, [pc, #508]	; 133f4 <access_monster_buffer@@Base+0x56c>
   131f4:	ldr	r0, [pc, #508]	; 133f8 <access_monster_buffer@@Base+0x570>
   131f8:	add	r3, pc, r3
   131fc:	ldr	r2, [pc, #504]	; 133fc <access_monster_buffer@@Base+0x574>
   13200:	add	r3, r3, #132	; 0x84
   13204:	add	r1, pc, r1
   13208:	add	r0, pc, r0
   1320c:	bl	11ffc <__assert_fail@plt>
   13210:	mov	r0, #0
   13214:	ldr	r1, [pc, #484]	; 13400 <access_monster_buffer@@Base+0x578>
   13218:	add	r1, pc, r1
   1321c:	bl	11f54 <strcmp@plt>
   13220:	cmp	r0, #0
   13224:	beq	131ec <access_monster_buffer@@Base+0x364>
   13228:	ldr	r3, [pc, #468]	; 13404 <access_monster_buffer@@Base+0x57c>
   1322c:	ldr	r1, [pc, #468]	; 13408 <access_monster_buffer@@Base+0x580>
   13230:	ldr	r0, [pc, #468]	; 1340c <access_monster_buffer@@Base+0x584>
   13234:	add	r3, pc, r3
   13238:	ldr	r2, [pc, #464]	; 13410 <access_monster_buffer@@Base+0x588>
   1323c:	add	r3, r3, #132	; 0x84
   13240:	add	r1, pc, r1
   13244:	add	r0, pc, r0
   13248:	bl	11ffc <__assert_fail@plt>
   1324c:	ldr	r3, [pc, #448]	; 13414 <access_monster_buffer@@Base+0x58c>
   13250:	ldr	r1, [pc, #448]	; 13418 <access_monster_buffer@@Base+0x590>
   13254:	ldr	r0, [pc, #448]	; 1341c <access_monster_buffer@@Base+0x594>
   13258:	add	r3, pc, r3
   1325c:	mov	r2, #276	; 0x114
   13260:	add	r3, r3, #132	; 0x84
   13264:	add	r1, pc, r1
   13268:	add	r0, pc, r0
   1326c:	bl	11ffc <__assert_fail@plt>
   13270:	ldr	r3, [pc, #424]	; 13420 <access_monster_buffer@@Base+0x598>
   13274:	ldr	r1, [pc, #424]	; 13424 <access_monster_buffer@@Base+0x59c>
   13278:	ldr	r0, [pc, #424]	; 13428 <access_monster_buffer@@Base+0x5a0>
   1327c:	add	r3, pc, r3
   13280:	mov	r2, #211	; 0xd3
   13284:	add	r3, r3, #132	; 0x84
   13288:	add	r1, pc, r1
   1328c:	add	r0, pc, r0
   13290:	bl	11ffc <__assert_fail@plt>
   13294:	ldr	r3, [pc, #400]	; 1342c <access_monster_buffer@@Base+0x5a4>
   13298:	ldr	r1, [pc, #400]	; 13430 <access_monster_buffer@@Base+0x5a8>
   1329c:	ldr	r0, [pc, #400]	; 13434 <access_monster_buffer@@Base+0x5ac>
   132a0:	add	r3, pc, r3
   132a4:	mov	r2, #221	; 0xdd
   132a8:	add	r3, r3, #132	; 0x84
   132ac:	add	r1, pc, r1
   132b0:	add	r0, pc, r0
   132b4:	bl	11ffc <__assert_fail@plt>
   132b8:	ldr	r3, [pc, #376]	; 13438 <access_monster_buffer@@Base+0x5b0>
   132bc:	ldr	r1, [pc, #376]	; 1343c <access_monster_buffer@@Base+0x5b4>
   132c0:	ldr	r0, [pc, #376]	; 13440 <access_monster_buffer@@Base+0x5b8>
   132c4:	add	r3, pc, r3
   132c8:	mov	r2, #222	; 0xde
   132cc:	add	r3, r3, #132	; 0x84
   132d0:	add	r1, pc, r1
   132d4:	add	r0, pc, r0
   132d8:	bl	11ffc <__assert_fail@plt>
   132dc:	ldr	r3, [pc, #352]	; 13444 <access_monster_buffer@@Base+0x5bc>
   132e0:	ldr	r1, [pc, #352]	; 13448 <access_monster_buffer@@Base+0x5c0>
   132e4:	ldr	r0, [pc, #352]	; 1344c <access_monster_buffer@@Base+0x5c4>
   132e8:	add	r3, pc, r3
   132ec:	mov	r2, #223	; 0xdf
   132f0:	add	r3, r3, #132	; 0x84
   132f4:	add	r1, pc, r1
   132f8:	add	r0, pc, r0
   132fc:	bl	11ffc <__assert_fail@plt>
   13300:	ldr	r3, [pc, #328]	; 13450 <access_monster_buffer@@Base+0x5c8>
   13304:	ldr	r1, [pc, #328]	; 13454 <access_monster_buffer@@Base+0x5cc>
   13308:	ldr	r0, [pc, #328]	; 13458 <access_monster_buffer@@Base+0x5d0>
   1330c:	add	r3, pc, r3
   13310:	mov	r2, #227	; 0xe3
   13314:	add	r3, r3, #132	; 0x84
   13318:	add	r1, pc, r1
   1331c:	add	r0, pc, r0
   13320:	bl	11ffc <__assert_fail@plt>
   13324:	ldr	r3, [pc, #304]	; 1345c <access_monster_buffer@@Base+0x5d4>
   13328:	ldr	r1, [pc, #304]	; 13460 <access_monster_buffer@@Base+0x5d8>
   1332c:	ldr	r0, [pc, #304]	; 13464 <access_monster_buffer@@Base+0x5dc>
   13330:	add	r3, pc, r3
   13334:	mov	r2, #228	; 0xe4
   13338:	add	r3, r3, #132	; 0x84
   1333c:	add	r1, pc, r1
   13340:	add	r0, pc, r0
   13344:	bl	11ffc <__assert_fail@plt>
   13348:	ldr	r3, [pc, #280]	; 13468 <access_monster_buffer@@Base+0x5e0>
   1334c:	ldr	r1, [pc, #280]	; 1346c <access_monster_buffer@@Base+0x5e4>
   13350:	ldr	r0, [pc, #280]	; 13470 <access_monster_buffer@@Base+0x5e8>
   13354:	add	r3, pc, r3
   13358:	mov	r2, #240	; 0xf0
   1335c:	add	r3, r3, #132	; 0x84
   13360:	add	r1, pc, r1
   13364:	add	r0, pc, r0
   13368:	bl	11ffc <__assert_fail@plt>
   1336c:	ldr	r3, [pc, #256]	; 13474 <access_monster_buffer@@Base+0x5ec>
   13370:	ldr	r1, [pc, #256]	; 13478 <access_monster_buffer@@Base+0x5f0>
   13374:	ldr	r0, [pc, #256]	; 1347c <access_monster_buffer@@Base+0x5f4>
   13378:	add	r3, pc, r3
   1337c:	mov	r2, #241	; 0xf1
   13380:	add	r3, r3, #132	; 0x84
   13384:	add	r1, pc, r1
   13388:	add	r0, pc, r0
   1338c:	bl	11ffc <__assert_fail@plt>
   13390:	svccc	0x00800000
   13394:	andmi	r0, r0, r0
   13398:	submi	r0, r0, r0
   1339c:	ldrdeq	r5, [r0], -r0
   133a0:	muleq	r0, r8, lr
   133a4:	andeq	r5, r0, ip, lsl #3
   133a8:	strdeq	r5, [r0], -ip
   133ac:	andeq	r4, r0, ip, ror #28
   133b0:	andeq	r5, r0, r0, ror #2
   133b4:	ldrdeq	r5, [r0], -r0
   133b8:	strdeq	r4, [r0], -r0
   133bc:	andeq	r5, r0, r4, ror #1
   133c0:	andeq	r5, r0, r4, asr r9
   133c4:	andeq	r0, r0, r5, lsl #2
   133c8:	andeq	r4, r0, ip, lsl #27
   133cc:	andeq	r5, r0, r0, lsl #1
   133d0:	strdeq	r5, [r0], -r0
   133d4:	andeq	r0, r0, pc, lsl #2
   133d8:	andeq	r4, r0, r8, lsl sp
   133dc:	andeq	r5, r0, ip
   133e0:	andeq	r5, r0, ip, ror r8
   133e4:	andeq	r0, r0, r3, lsl r1
   133e8:	andeq	r4, r0, r8, lsr #30
   133ec:	andeq	r4, r0, r8, ror lr
   133f0:	strdeq	r4, [r0], -r8
   133f4:	andeq	r4, r0, ip, ror #29
   133f8:	andeq	r5, r0, ip, asr r7
   133fc:	andeq	r0, r0, pc, lsl r1
   13400:	andeq	r4, r0, r4, lsr lr
   13404:			; <UNDEFINED> instruction: 0x00004bbc
   13408:			; <UNDEFINED> instruction: 0x00004eb0
   1340c:	andeq	r5, r0, r0, lsr #14
   13410:	andeq	r0, r0, lr, lsl r1
   13414:	muleq	r0, r8, fp
   13418:	andeq	r4, r0, ip, lsl #29
   1341c:	strdeq	r5, [r0], -ip
   13420:	andeq	r4, r0, r4, ror fp
   13424:	andeq	r4, r0, r8, ror #28
   13428:	ldrdeq	r5, [r0], -r8
   1342c:	andeq	r4, r0, r0, asr fp
   13430:	andeq	r4, r0, r4, asr #28
   13434:			; <UNDEFINED> instruction: 0x000056b4
   13438:	andeq	r4, r0, ip, lsr #22
   1343c:	andeq	r4, r0, r0, lsr #28
   13440:	muleq	r0, r0, r6
   13444:	andeq	r4, r0, r8, lsl #22
   13448:	strdeq	r4, [r0], -ip
   1344c:	andeq	r5, r0, ip, ror #12
   13450:	andeq	r4, r0, r4, ror #21
   13454:	ldrdeq	r4, [r0], -r8
   13458:	andeq	r5, r0, r8, asr #12
   1345c:	andeq	r4, r0, r0, asr #21
   13460:			; <UNDEFINED> instruction: 0x00004db4
   13464:	andeq	r5, r0, r4, lsr #12
   13468:	muleq	r0, ip, sl
   1346c:	muleq	r0, r0, sp
   13470:	andeq	r5, r0, r0, lsl #12
   13474:	andeq	r4, r0, r8, ror sl
   13478:	andeq	r4, r0, ip, ror #26
   1347c:	ldrdeq	r5, [r0], -ip
   13480:	andeq	r4, r0, r4, lsr r9
   13484:	andeq	r4, r0, r8, lsr #24
   13488:	muleq	r0, r8, r4
   1348c:	andeq	r4, r0, r0, lsl r9
   13490:	andeq	r4, r0, r4, lsl #24
   13494:	andeq	r5, r0, r4, ror r4
   13498:	andeq	r0, r0, r7, lsl #2
   1349c:	andeq	r4, r0, ip, ror #17
   134a0:	andeq	r4, r0, r0, ror #23
   134a4:	andeq	r5, r0, r0, asr r4
   134a8:	andeq	r0, r0, fp, lsl #2
   134ac:	andeq	r4, r0, ip, lsl #22
   134b0:	ldr	r3, [pc, #-56]	; 13480 <access_monster_buffer@@Base+0x5f8>
   134b4:	ldr	r1, [pc, #-56]	; 13484 <access_monster_buffer@@Base+0x5fc>
   134b8:	ldr	r0, [pc, #-56]	; 13488 <access_monster_buffer@@Base+0x600>
   134bc:	add	r3, pc, r3
   134c0:	mov	r2, #242	; 0xf2
   134c4:	add	r3, r3, #132	; 0x84
   134c8:	add	r1, pc, r1
   134cc:	add	r0, pc, r0
   134d0:	bl	11ffc <__assert_fail@plt>
   134d4:	ldr	r3, [pc, #-80]	; 1348c <access_monster_buffer@@Base+0x604>
   134d8:	ldr	r1, [pc, #-80]	; 13490 <access_monster_buffer@@Base+0x608>
   134dc:	ldr	r0, [pc, #-80]	; 13494 <access_monster_buffer@@Base+0x60c>
   134e0:	add	r3, pc, r3
   134e4:	ldr	r2, [pc, #-84]	; 13498 <access_monster_buffer@@Base+0x610>
   134e8:	add	r3, r3, #132	; 0x84
   134ec:	add	r1, pc, r1
   134f0:	add	r0, pc, r0
   134f4:	bl	11ffc <__assert_fail@plt>
   134f8:	ldr	r3, [pc, #-100]	; 1349c <access_monster_buffer@@Base+0x614>
   134fc:	ldr	r1, [pc, #-100]	; 134a0 <access_monster_buffer@@Base+0x618>
   13500:	ldr	r0, [pc, #-100]	; 134a4 <access_monster_buffer@@Base+0x61c>
   13504:	add	r3, pc, r3
   13508:	ldr	r2, [pc, #-104]	; 134a8 <access_monster_buffer@@Base+0x620>
   1350c:	add	r3, r3, #132	; 0x84
   13510:	add	r1, pc, r1
   13514:	add	r0, pc, r0
   13518:	bl	11ffc <__assert_fail@plt>
   1351c:	ldrh	r7, [r3, #6]
   13520:	cmp	r7, #0
   13524:	beq	13118 <access_monster_buffer@@Base+0x290>
   13528:	ldrsh	r7, [r1, r7]
   1352c:	b	13118 <access_monster_buffer@@Base+0x290>
   13530:	mov	r2, #100	; 0x64
   13534:	mov	r7, #0
   13538:	b	12ec4 <access_monster_buffer@@Base+0x3c>
   1353c:	ldr	r1, [pc, #-152]	; 134ac <access_monster_buffer@@Base+0x624>
   13540:	add	r1, pc, r1
   13544:	bl	11f54 <strcmp@plt>
   13548:	cmp	r0, #0
   1354c:	beq	131ec <access_monster_buffer@@Base+0x364>
   13550:	b	13228 <access_monster_buffer@@Base+0x3a0>
   13554:	mov	r9, r0
   13558:	b	12f08 <access_monster_buffer@@Base+0x80>
   1355c:	cmp	ip, #7
   13560:	bls	130cc <access_monster_buffer@@Base+0x244>
   13564:	ldrh	r7, [r3, #6]
   13568:	cmp	r7, #0
   1356c:	bne	13528 <access_monster_buffer@@Base+0x6a0>
   13570:	b	130cc <access_monster_buffer@@Base+0x244>
   13574:	push	{r4, r5, r6, lr}
   13578:	mov	r4, r0
   1357c:	ldr	ip, [r0, #28]
   13580:	sub	sp, sp, #8
   13584:	mov	r3, #1
   13588:	ldr	r0, [r0, #40]	; 0x28
   1358c:	ldr	r6, [r4, #48]	; 0x30
   13590:	mov	r5, r2
   13594:	str	r3, [sp]
   13598:	add	r2, r1, ip
   1359c:	add	r1, r4, #60	; 0x3c
   135a0:	blx	r6
   135a4:	cmp	r0, #0
   135a8:	bne	135e0 <access_monster_buffer@@Base+0x758>
   135ac:	ldr	r1, [r4, #28]
   135b0:	ldr	r3, [r4, #64]	; 0x40
   135b4:	ldr	r2, [r4, #60]	; 0x3c
   135b8:	sub	r3, r3, r1
   135bc:	ldr	ip, [r4, #32]
   135c0:	cmp	r3, r5
   135c4:	movcs	r3, r5
   135c8:	add	r2, r2, r1
   135cc:	str	r3, [r4, #24]
   135d0:	str	r2, [r4, #16]
   135d4:	str	r5, [ip, #4]
   135d8:	add	sp, sp, #8
   135dc:	pop	{r4, r5, r6, pc}
   135e0:	mvn	r0, #0
   135e4:	b	135d8 <access_monster_buffer@@Base+0x750>

000135e8 <flatcc_builder_default_alloc@@Base>:
   135e8:	push	{r4, r5, r6, r7, r8, lr}
   135ec:	subs	r5, r2, #0
   135f0:	mov	r6, r1
   135f4:	bne	13618 <flatcc_builder_default_alloc@@Base+0x30>
   135f8:	ldr	r0, [r1]
   135fc:	cmp	r0, #0
   13600:	popeq	{r4, r5, r6, r7, r8, pc}
   13604:	bl	11f60 <free@plt>
   13608:	str	r5, [r6]
   1360c:	str	r5, [r6, #4]
   13610:	mov	r0, r5
   13614:	pop	{r4, r5, r6, r7, r8, pc}
   13618:	mov	r7, r3
   1361c:	ldr	r3, [sp, #24]
   13620:	sub	r2, r3, #1
   13624:	cmp	r2, #6
   13628:	addls	pc, pc, r2, lsl #2
   1362c:	b	136c8 <flatcc_builder_default_alloc@@Base+0xe0>
   13630:	b	1369c <flatcc_builder_default_alloc@@Base+0xb4>
   13634:	b	136c8 <flatcc_builder_default_alloc@@Base+0xe0>
   13638:	b	136c8 <flatcc_builder_default_alloc@@Base+0xe0>
   1363c:	b	136c0 <flatcc_builder_default_alloc@@Base+0xd8>
   13640:	b	1364c <flatcc_builder_default_alloc@@Base+0x64>
   13644:	b	136c8 <flatcc_builder_default_alloc@@Base+0xe0>
   13648:	b	136b8 <flatcc_builder_default_alloc@@Base+0xd0>
   1364c:	mov	r4, r5
   13650:	ldr	r3, [r6, #4]
   13654:	cmp	r5, r3
   13658:	bhi	13664 <flatcc_builder_default_alloc@@Base+0x7c>
   1365c:	cmp	r4, r3, lsr #1
   13660:	bls	136d0 <flatcc_builder_default_alloc@@Base+0xe8>
   13664:	mov	r1, r4
   13668:	ldr	r0, [r6]
   1366c:	bl	11f84 <realloc@plt>
   13670:	subs	r5, r0, #0
   13674:	beq	136ec <flatcc_builder_default_alloc@@Base+0x104>
   13678:	cmp	r7, #0
   1367c:	beq	1368c <flatcc_builder_default_alloc@@Base+0xa4>
   13680:	ldr	r0, [r6, #4]
   13684:	cmp	r0, r4
   13688:	bcc	136d8 <flatcc_builder_default_alloc@@Base+0xf0>
   1368c:	str	r5, [r6]
   13690:	str	r4, [r6, #4]
   13694:	mov	r0, #0
   13698:	pop	{r4, r5, r6, r7, r8, pc}
   1369c:	mov	r4, #256	; 0x100
   136a0:	cmp	r5, r4
   136a4:	bls	13650 <flatcc_builder_default_alloc@@Base+0x68>
   136a8:	lsl	r4, r4, #1
   136ac:	cmp	r5, r4
   136b0:	bhi	136a8 <flatcc_builder_default_alloc@@Base+0xc0>
   136b4:	b	13650 <flatcc_builder_default_alloc@@Base+0x68>
   136b8:	mov	r4, #64	; 0x40
   136bc:	b	136a0 <flatcc_builder_default_alloc@@Base+0xb8>
   136c0:	mov	r4, #288	; 0x120
   136c4:	b	136a0 <flatcc_builder_default_alloc@@Base+0xb8>
   136c8:	mov	r4, #32
   136cc:	b	136a0 <flatcc_builder_default_alloc@@Base+0xb8>
   136d0:	mov	r0, #0
   136d4:	pop	{r4, r5, r6, r7, r8, pc}
   136d8:	sub	r2, r4, r0
   136dc:	mov	r1, #0
   136e0:	add	r0, r5, r0
   136e4:	bl	11fd8 <memset@plt>
   136e8:	b	1368c <flatcc_builder_default_alloc@@Base+0xa4>
   136ec:	mvn	r0, #0
   136f0:	pop	{r4, r5, r6, r7, r8, pc}
   136f4:	push	{r4, r5, lr}
   136f8:	cmp	r2, #0
   136fc:	ldr	lr, [pc, #248]	; 137fc <flatcc_builder_default_alloc@@Base+0x214>
   13700:	sub	sp, sp, #84	; 0x54
   13704:	mov	ip, r0
   13708:	add	lr, pc, lr
   1370c:	bne	1371c <flatcc_builder_default_alloc@@Base+0x134>
   13710:	ldrh	r2, [r0, #132]	; 0x84
   13714:	cmp	r2, #0
   13718:	moveq	r2, #1
   1371c:	ldrh	r0, [r1]
   13720:	cmp	r0, #3
   13724:	movls	r4, #4
   13728:	movls	r0, r4
   1372c:	strhls	r4, [r1]
   13730:	cmp	r2, r0
   13734:	strhhi	r2, [r1]
   13738:	cmp	r3, #0
   1373c:	bne	13750 <flatcc_builder_default_alloc@@Base+0x168>
   13740:	ldr	r4, [ip, #140]	; 0x8c
   13744:	sub	r2, r2, #1
   13748:	ands	r3, r2, r4
   1374c:	bne	1375c <flatcc_builder_default_alloc@@Base+0x174>
   13750:	mov	r0, #0
   13754:	add	sp, sp, #84	; 0x54
   13758:	pop	{r4, r5, pc}
   1375c:	ldr	r2, [pc, #156]	; 13800 <flatcc_builder_default_alloc@@Base+0x218>
   13760:	add	r1, r4, r3
   13764:	str	r3, [sp, #8]
   13768:	ldr	r0, [lr, r2]
   1376c:	cmp	r4, r1
   13770:	mov	r2, #1
   13774:	str	r0, [sp, #16]
   13778:	str	r3, [sp, #20]
   1377c:	str	r1, [ip, #140]	; 0x8c
   13780:	str	r2, [sp, #12]
   13784:	bgt	137d4 <flatcc_builder_default_alloc@@Base+0x1ec>
   13788:	ldr	r0, [ip, #36]	; 0x24
   1378c:	add	r1, sp, #16
   13790:	str	r3, [sp]
   13794:	mov	r3, r4
   13798:	ldr	r5, [ip, #44]	; 0x2c
   1379c:	blx	r5
   137a0:	cmp	r0, #0
   137a4:	bne	137d8 <flatcc_builder_default_alloc@@Base+0x1f0>
   137a8:	cmn	r4, #1
   137ac:	bne	13750 <flatcc_builder_default_alloc@@Base+0x168>
   137b0:	ldr	r3, [pc, #76]	; 13804 <flatcc_builder_default_alloc@@Base+0x21c>
   137b4:	ldr	r1, [pc, #76]	; 13808 <flatcc_builder_default_alloc@@Base+0x220>
   137b8:	ldr	r0, [pc, #76]	; 1380c <flatcc_builder_default_alloc@@Base+0x224>
   137bc:	add	r3, pc, r3
   137c0:	ldr	r2, [pc, #72]	; 13810 <flatcc_builder_default_alloc@@Base+0x228>
   137c4:	add	r3, r3, #60	; 0x3c
   137c8:	add	r1, pc, r1
   137cc:	add	r0, pc, r0
   137d0:	bl	11ffc <__assert_fail@plt>
   137d4:	bl	120d0 <__assert_fail@plt+0xd4>
   137d8:	ldr	r3, [pc, #52]	; 13814 <flatcc_builder_default_alloc@@Base+0x22c>
   137dc:	ldr	r1, [pc, #52]	; 13818 <flatcc_builder_default_alloc@@Base+0x230>
   137e0:	ldr	r0, [pc, #52]	; 1381c <flatcc_builder_default_alloc@@Base+0x234>
   137e4:	add	r3, pc, r3
   137e8:	ldr	r2, [pc, #48]	; 13820 <flatcc_builder_default_alloc@@Base+0x238>
   137ec:	add	r3, r3, #16
   137f0:	add	r1, pc, r1
   137f4:	add	r0, pc, r0
   137f8:	bl	11ffc <__assert_fail@plt>
   137fc:	strdeq	r5, [r1], -r0
   13800:	andeq	r0, r0, r8, asr #32
   13804:	ldrdeq	r4, [r0], -r0
   13808:	andeq	r5, r0, r4, lsl r1
   1380c:	muleq	r0, r8, r1
   13810:			; <UNDEFINED> instruction: 0x000002be
   13814:	andeq	r4, r0, r8, lsr #19
   13818:	andeq	r5, r0, ip, ror #1
   1381c:	andeq	r5, r0, r0, ror r1
   13820:	andeq	r0, r0, r5, lsr #5
   13824:	push	{r4, r5, r6, r7, lr}
   13828:	mov	r5, r1
   1382c:	ldr	r1, [r0, #156]	; 0x9c
   13830:	ldr	r3, [r0, #160]	; 0xa0
   13834:	add	r2, r1, #1
   13838:	cmp	r2, r3
   1383c:	sub	sp, sp, #12
   13840:	mov	r4, r0
   13844:	str	r2, [r0, #156]	; 0x9c
   13848:	ble	138b8 <flatcc_builder_default_alloc@@Base+0x2d0>
   1384c:	ldr	r3, [r0, #176]	; 0xb0
   13850:	cmp	r3, #0
   13854:	cmpgt	r2, r3
   13858:	movgt	r3, #1
   1385c:	movle	r3, #0
   13860:	bgt	1392c <flatcc_builder_default_alloc@@Base+0x344>
   13864:	add	r1, r1, r1, lsl #3
   13868:	ldr	r0, [r0, #88]	; 0x58
   1386c:	lsl	r6, r1, #2
   13870:	add	r2, r6, #36	; 0x24
   13874:	cmp	r2, r0
   13878:	bhi	13908 <flatcc_builder_default_alloc@@Base+0x320>
   1387c:	ldr	r3, [r4, #84]	; 0x54
   13880:	add	r3, r3, r6
   13884:	cmp	r3, #0
   13888:	str	r3, [r4, #32]
   1388c:	beq	1392c <flatcc_builder_default_alloc@@Base+0x344>
   13890:	ldr	r2, [r4, #88]	; 0x58
   13894:	ldr	r0, [pc, #152]	; 13934 <flatcc_builder_default_alloc@@Base+0x34c>
   13898:	ldr	r1, [r4, #176]	; 0xb0
   1389c:	umull	r0, r2, r0, r2
   138a0:	lsr	r2, r2, #3
   138a4:	cmp	r1, #0
   138a8:	cmpgt	r2, r1
   138ac:	str	r2, [r4, #160]	; 0xa0
   138b0:	strgt	r1, [r4, #160]	; 0xa0
   138b4:	b	138c4 <flatcc_builder_default_alloc@@Base+0x2dc>
   138b8:	ldr	r3, [r0, #32]
   138bc:	add	r3, r3, #36	; 0x24
   138c0:	str	r3, [r0, #32]
   138c4:	ldr	r0, [r4, #20]
   138c8:	ldr	ip, [r4, #28]
   138cc:	ldrh	lr, [r4, #130]	; 0x82
   138d0:	add	r2, r0, ip
   138d4:	mov	r1, #0
   138d8:	str	r0, [r3, #8]
   138dc:	strh	lr, [r3, #12]
   138e0:	add	r2, r2, #7
   138e4:	mvn	lr, #3
   138e8:	mov	r0, r1
   138ec:	bic	r2, r2, #7
   138f0:	strh	r5, [r4, #130]	; 0x82
   138f4:	stm	r3, {ip, lr}
   138f8:	str	r2, [r4, #28]
   138fc:	str	r1, [r4, #20]
   13900:	add	sp, sp, #12
   13904:	pop	{r4, r5, r6, r7, pc}
   13908:	mov	r1, #4
   1390c:	ldr	r0, [r4, #40]	; 0x28
   13910:	str	r1, [sp]
   13914:	add	r1, r4, #84	; 0x54
   13918:	ldr	r7, [r4, #48]	; 0x30
   1391c:	blx	r7
   13920:	cmp	r0, #0
   13924:	beq	1387c <flatcc_builder_default_alloc@@Base+0x294>
   13928:	bl	120a0 <__assert_fail@plt+0xa4>
   1392c:	mvn	r0, #0
   13930:	b	13900 <flatcc_builder_default_alloc@@Base+0x318>
   13934:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   13938:	push	{r4, r5, r6, r7, lr}
   1393c:	mov	r5, r0
   13940:	ldrh	r0, [r0, #128]	; 0x80
   13944:	sub	sp, sp, #92	; 0x5c
   13948:	add	ip, sp, #12
   1394c:	cmp	r0, #3
   13950:	movls	r0, #4
   13954:	strhls	r0, [r5, #128]	; 0x80
   13958:	ldr	r4, [pc, #448]	; 13b20 <flatcc_builder_default_alloc@@Base+0x538>
   1395c:	ldr	r0, [r5, #136]	; 0x88
   13960:	mov	r7, #4
   13964:	mov	r6, #1
   13968:	str	ip, [sp, #24]
   1396c:	lsls	ip, r2, #2
   13970:	add	r4, pc, r4
   13974:	str	r2, [sp, #12]
   13978:	and	lr, r0, #3
   1397c:	str	r7, [sp, #16]
   13980:	str	r7, [sp, #28]
   13984:	str	r6, [sp, #20]
   13988:	beq	139a4 <flatcc_builder_default_alloc@@Base+0x3bc>
   1398c:	add	r7, ip, r7
   13990:	mov	r6, #2
   13994:	str	r1, [sp, #32]
   13998:	str	ip, [sp, #36]	; 0x24
   1399c:	str	r7, [sp, #16]
   139a0:	str	r6, [sp, #20]
   139a4:	cmp	lr, #0
   139a8:	beq	139d8 <flatcc_builder_default_alloc@@Base+0x3f0>
   139ac:	ldr	ip, [sp, #20]
   139b0:	ldr	r6, [pc, #364]	; 13b24 <flatcc_builder_default_alloc@@Base+0x53c>
   139b4:	add	ip, ip, #1
   139b8:	add	r7, r7, lr
   139bc:	str	r7, [sp, #16]
   139c0:	ldr	r6, [r4, r6]
   139c4:	add	r4, sp, #88	; 0x58
   139c8:	add	r4, r4, ip, lsl #3
   139cc:	str	ip, [sp, #20]
   139d0:	str	r6, [r4, #-72]	; 0xffffffb8
   139d4:	str	lr, [r4, #-68]	; 0xffffffbc
   139d8:	cmp	r2, #0
   139dc:	sub	r4, r0, r7
   139e0:	beq	13a74 <flatcc_builder_default_alloc@@Base+0x48c>
   139e4:	add	r6, r3, r2
   139e8:	mvn	ip, #3
   139ec:	mov	r2, r3
   139f0:	b	13a28 <flatcc_builder_default_alloc@@Base+0x440>
   139f4:	sub	r0, ip, r4
   139f8:	add	r0, r0, lr
   139fc:	cmp	r3, #0
   13a00:	str	r0, [r1]
   13a04:	beq	13a14 <flatcc_builder_default_alloc@@Base+0x42c>
   13a08:	ldrb	r0, [r2]
   13a0c:	cmp	r0, #0
   13a10:	beq	13ad4 <flatcc_builder_default_alloc@@Base+0x4ec>
   13a14:	add	r2, r2, #1
   13a18:	cmp	r2, r6
   13a1c:	add	r1, r1, #4
   13a20:	sub	ip, ip, #4
   13a24:	beq	13a6c <flatcc_builder_default_alloc@@Base+0x484>
   13a28:	ldr	lr, [r1]
   13a2c:	cmp	lr, #0
   13a30:	bne	139f4 <flatcc_builder_default_alloc@@Base+0x40c>
   13a34:	cmp	r3, #0
   13a38:	beq	13ab0 <flatcc_builder_default_alloc@@Base+0x4c8>
   13a3c:	ldrb	r0, [r2]
   13a40:	cmp	r0, #0
   13a44:	beq	13a14 <flatcc_builder_default_alloc@@Base+0x42c>
   13a48:	ldr	r3, [pc, #216]	; 13b28 <flatcc_builder_default_alloc@@Base+0x540>
   13a4c:	ldr	r1, [pc, #216]	; 13b2c <flatcc_builder_default_alloc@@Base+0x544>
   13a50:	ldr	r0, [pc, #216]	; 13b30 <flatcc_builder_default_alloc@@Base+0x548>
   13a54:	add	r3, pc, r3
   13a58:	ldr	r2, [pc, #212]	; 13b34 <flatcc_builder_default_alloc@@Base+0x54c>
   13a5c:	add	r3, r3, #76	; 0x4c
   13a60:	add	r1, pc, r1
   13a64:	add	r0, pc, r0
   13a68:	bl	11ffc <__assert_fail@plt>
   13a6c:	ldr	r0, [r5, #136]	; 0x88
   13a70:	sub	r4, r0, r7
   13a74:	cmp	r4, r0
   13a78:	bge	13b1c <flatcc_builder_default_alloc@@Base+0x534>
   13a7c:	ldr	r0, [r5, #36]	; 0x24
   13a80:	ldr	r2, [sp, #20]
   13a84:	str	r7, [sp]
   13a88:	mov	r3, r4
   13a8c:	ldr	r6, [r5, #44]	; 0x2c
   13a90:	add	r1, sp, #24
   13a94:	blx	r6
   13a98:	cmp	r0, #0
   13a9c:	bne	13af8 <flatcc_builder_default_alloc@@Base+0x510>
   13aa0:	mov	r0, r4
   13aa4:	str	r4, [r5, #136]	; 0x88
   13aa8:	add	sp, sp, #92	; 0x5c
   13aac:	pop	{r4, r5, r6, r7, pc}
   13ab0:	ldr	r3, [pc, #128]	; 13b38 <flatcc_builder_default_alloc@@Base+0x550>
   13ab4:	ldr	r1, [pc, #128]	; 13b3c <flatcc_builder_default_alloc@@Base+0x554>
   13ab8:	ldr	r0, [pc, #128]	; 13b40 <flatcc_builder_default_alloc@@Base+0x558>
   13abc:	add	r3, pc, r3
   13ac0:	ldr	r2, [pc, #124]	; 13b44 <flatcc_builder_default_alloc@@Base+0x55c>
   13ac4:	add	r3, r3, #76	; 0x4c
   13ac8:	add	r1, pc, r1
   13acc:	add	r0, pc, r0
   13ad0:	bl	11ffc <__assert_fail@plt>
   13ad4:	ldr	r3, [pc, #108]	; 13b48 <flatcc_builder_default_alloc@@Base+0x560>
   13ad8:	ldr	r1, [pc, #108]	; 13b4c <flatcc_builder_default_alloc@@Base+0x564>
   13adc:	ldr	r0, [pc, #108]	; 13b50 <flatcc_builder_default_alloc@@Base+0x568>
   13ae0:	add	r3, pc, r3
   13ae4:	ldr	r2, [pc, #104]	; 13b54 <flatcc_builder_default_alloc@@Base+0x56c>
   13ae8:	add	r3, r3, #76	; 0x4c
   13aec:	add	r1, pc, r1
   13af0:	add	r0, pc, r0
   13af4:	bl	11ffc <__assert_fail@plt>
   13af8:	ldr	r3, [pc, #88]	; 13b58 <flatcc_builder_default_alloc@@Base+0x570>
   13afc:	ldr	r1, [pc, #88]	; 13b5c <flatcc_builder_default_alloc@@Base+0x574>
   13b00:	ldr	r0, [pc, #88]	; 13b60 <flatcc_builder_default_alloc@@Base+0x578>
   13b04:	add	r3, pc, r3
   13b08:	ldr	r2, [pc, #84]	; 13b64 <flatcc_builder_default_alloc@@Base+0x57c>
   13b0c:	add	r3, r3, #28
   13b10:	add	r1, pc, r1
   13b14:	add	r0, pc, r0
   13b18:	bl	11ffc <__assert_fail@plt>
   13b1c:	bl	12108 <__assert_fail@plt+0x10c>
   13b20:	andeq	r5, r1, r8, lsl #13
   13b24:	andeq	r0, r0, r8, asr #32
   13b28:	andeq	r4, r0, r8, lsr r7
   13b2c:	andeq	r4, r0, ip, ror lr
   13b30:	andeq	r4, r0, r4, lsl #30
   13b34:			; <UNDEFINED> instruction: 0x000005b5
   13b38:	ldrdeq	r4, [r0], -r0
   13b3c:	andeq	r4, r0, r4, lsl lr
   13b40:	muleq	r0, r8, lr
   13b44:			; <UNDEFINED> instruction: 0x000005b7
   13b48:	andeq	r4, r0, ip, lsr #13
   13b4c:	strdeq	r4, [r0], -r0
   13b50:	andeq	r4, r0, r8, ror #28
   13b54:			; <UNDEFINED> instruction: 0x000005b1
   13b58:	andeq	r4, r0, r8, lsl #13
   13b5c:	andeq	r4, r0, ip, asr #27
   13b60:	andeq	r4, r0, r0, asr lr
   13b64:	andeq	r0, r0, fp, lsl #5

00013b68 <flatcc_builder_flush_vtable_cache@@Base>:
   13b68:	ldr	r3, [r0, #116]	; 0x74
   13b6c:	cmp	r3, #0
   13b70:	bxeq	lr
   13b74:	ldr	r2, [r0, #96]	; 0x60
   13b78:	push	{r4, lr}
   13b7c:	mov	r1, #0
   13b80:	mov	r4, r0
   13b84:	ldr	r0, [r0, #92]	; 0x5c
   13b88:	bl	11fd8 <memset@plt>
   13b8c:	mov	r2, #16
   13b90:	mov	r3, #0
   13b94:	str	r2, [r4, #124]	; 0x7c
   13b98:	str	r3, [r4, #120]	; 0x78
   13b9c:	pop	{r4, pc}

00013ba0 <flatcc_builder_custom_init@@Base>:
   13ba0:	push	{r4, r5, r6, r7, r8, lr}
   13ba4:	mov	r6, r1
   13ba8:	mov	r7, r2
   13bac:	mov	r1, #0
   13bb0:	mov	r2, #232	; 0xe8
   13bb4:	mov	r5, r3
   13bb8:	mov	r4, r0
   13bbc:	ldr	r8, [sp, #24]
   13bc0:	bl	11fd8 <memset@plt>
   13bc4:	ldr	r3, [pc, #76]	; 13c18 <flatcc_builder_custom_init@@Base+0x78>
   13bc8:	cmp	r6, #0
   13bcc:	add	r3, pc, r3
   13bd0:	beq	13c00 <flatcc_builder_custom_init@@Base+0x60>
   13bd4:	cmp	r5, #0
   13bd8:	beq	13bf4 <flatcc_builder_custom_init@@Base+0x54>
   13bdc:	str	r8, [r4, #40]	; 0x28
   13be0:	str	r5, [r4, #48]	; 0x30
   13be4:	str	r7, [r4, #36]	; 0x24
   13be8:	str	r6, [r4, #44]	; 0x2c
   13bec:	mov	r0, #0
   13bf0:	pop	{r4, r5, r6, r7, r8, pc}
   13bf4:	ldr	r2, [pc, #32]	; 13c1c <flatcc_builder_custom_init@@Base+0x7c>
   13bf8:	ldr	r5, [r3, r2]
   13bfc:	b	13bdc <flatcc_builder_custom_init@@Base+0x3c>
   13c00:	ldr	r2, [pc, #24]	; 13c20 <flatcc_builder_custom_init@@Base+0x80>
   13c04:	mov	r1, #1
   13c08:	str	r1, [r4, #184]	; 0xb8
   13c0c:	add	r7, r4, #188	; 0xbc
   13c10:	ldr	r6, [r3, r2]
   13c14:	b	13bd4 <flatcc_builder_custom_init@@Base+0x34>
   13c18:	andeq	r5, r1, ip, lsr #8
   13c1c:	andeq	r0, r0, r0, asr r0
   13c20:	andeq	r0, r0, r4, asr r0

00013c24 <flatcc_builder_init@@Base>:
   13c24:	push	{lr}		; (str lr, [sp, #-4]!)
   13c28:	sub	sp, sp, #12
   13c2c:	mov	r3, #0
   13c30:	str	r3, [sp]
   13c34:	mov	r2, r3
   13c38:	mov	r1, r3
   13c3c:	bl	13ba0 <flatcc_builder_custom_init@@Base>
   13c40:	add	sp, sp, #12
   13c44:	pop	{pc}		; (ldr pc, [sp], #4)

00013c48 <flatcc_builder_custom_reset@@Base>:
   13c48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c4c:	add	r7, r0, #52	; 0x34
   13c50:	mov	r4, #0
   13c54:	sub	sp, sp, #12
   13c58:	mov	r5, r0
   13c5c:	mov	sl, r1
   13c60:	mov	r8, r2
   13c64:	mov	r6, r7
   13c68:	mov	r9, r4
   13c6c:	mov	fp, #1
   13c70:	b	13cc4 <flatcc_builder_custom_reset@@Base+0x7c>
   13c74:	cmp	r4, #5
   13c78:	cmpne	r8, #0
   13c7c:	beq	13ca8 <flatcc_builder_custom_reset@@Base+0x60>
   13c80:	ldr	r0, [r5, #40]	; 0x28
   13c84:	mov	r3, fp
   13c88:	str	r4, [sp]
   13c8c:	mov	r2, #1
   13c90:	mov	r1, r6
   13c94:	ldr	ip, [r5, #48]	; 0x30
   13c98:	blx	ip
   13c9c:	cmp	r0, #0
   13ca0:	bne	13d88 <flatcc_builder_custom_reset@@Base+0x140>
   13ca4:	ldr	r0, [r7, r4, lsl #3]
   13ca8:	ldr	r2, [r6, #4]
   13cac:	mov	r1, r9
   13cb0:	bl	11fd8 <memset@plt>
   13cb4:	add	r4, r4, #1
   13cb8:	cmp	r4, #8
   13cbc:	add	r6, r6, #8
   13cc0:	beq	13d00 <flatcc_builder_custom_reset@@Base+0xb8>
   13cc4:	ldr	r0, [r7, r4, lsl #3]
   13cc8:	cmp	r0, #0
   13ccc:	bne	13c74 <flatcc_builder_custom_reset@@Base+0x2c>
   13cd0:	ldr	r3, [r6, #4]
   13cd4:	cmp	r3, #0
   13cd8:	beq	13cb4 <flatcc_builder_custom_reset@@Base+0x6c>
   13cdc:	ldr	r3, [pc, #172]	; 13d90 <flatcc_builder_custom_reset@@Base+0x148>
   13ce0:	ldr	r1, [pc, #172]	; 13d94 <flatcc_builder_custom_reset@@Base+0x14c>
   13ce4:	ldr	r0, [pc, #172]	; 13d98 <flatcc_builder_custom_reset@@Base+0x150>
   13ce8:	add	r3, pc, r3
   13cec:	ldr	r2, [pc, #168]	; 13d9c <flatcc_builder_custom_reset@@Base+0x154>
   13cf0:	add	r3, r3, #108	; 0x6c
   13cf4:	add	r1, pc, r1
   13cf8:	add	r0, pc, r0
   13cfc:	bl	11ffc <__assert_fail@plt>
   13d00:	ldr	r2, [r5, #124]	; 0x7c
   13d04:	mov	r3, #0
   13d08:	ldr	r0, [r5, #60]	; 0x3c
   13d0c:	cmp	r2, r3
   13d10:	str	r3, [r5, #120]	; 0x78
   13d14:	ldr	r1, [r5, #76]	; 0x4c
   13d18:	movne	r3, #16
   13d1c:	ldr	r2, [r5, #52]	; 0x34
   13d20:	str	r0, [r5, #16]
   13d24:	ldr	r0, [r5, #184]	; 0xb8
   13d28:	strne	r3, [r5, #124]	; 0x7c
   13d2c:	mov	r3, #0
   13d30:	cmp	sl, #0
   13d34:	strne	r3, [r5, #172]	; 0xac
   13d38:	strne	r3, [r5, #176]	; 0xb0
   13d3c:	strne	r3, [r5, #180]	; 0xb4
   13d40:	cmp	r0, #0
   13d44:	stm	r5, {r1, r2}
   13d48:	strh	r3, [r5, #128]	; 0x80
   13d4c:	str	r3, [r5, #136]	; 0x88
   13d50:	str	r3, [r5, #140]	; 0x8c
   13d54:	str	r3, [r5, #156]	; 0x9c
   13d58:	str	r3, [r5, #160]	; 0xa0
   13d5c:	str	r3, [r5, #20]
   13d60:	str	r3, [r5, #24]
   13d64:	str	r3, [r5, #148]	; 0x94
   13d68:	str	r3, [r5, #152]	; 0x98
   13d6c:	str	r3, [r5, #32]
   13d70:	beq	13d80 <flatcc_builder_custom_reset@@Base+0x138>
   13d74:	add	r0, r5, #188	; 0xbc
   13d78:	bl	17824 <flatcc_emitter_reset@@Base>
   13d7c:	mov	r0, #0
   13d80:	add	sp, sp, #12
   13d84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d88:	mvn	r0, #0
   13d8c:	b	13d80 <flatcc_builder_custom_reset@@Base+0x138>
   13d90:	andeq	r4, r0, r4, lsr #9
   13d94:	andeq	r4, r0, r8, ror #23
   13d98:	andeq	r4, r0, r0, lsl #25
   13d9c:			; <UNDEFINED> instruction: 0x000001b2

00013da0 <flatcc_builder_reset@@Base>:
   13da0:	mov	r2, #0
   13da4:	mov	r1, r2
   13da8:	b	13c48 <flatcc_builder_custom_reset@@Base>

00013dac <flatcc_builder_clear@@Base>:
   13dac:	push	{r4, r5, r6, r7, r8, lr}
   13db0:	mov	r4, #0
   13db4:	sub	sp, sp, #8
   13db8:	mov	r6, r0
   13dbc:	add	r5, r0, #52	; 0x34
   13dc0:	mov	r8, r4
   13dc4:	ldr	r0, [r6, #40]	; 0x28
   13dc8:	mov	r1, r5
   13dcc:	str	r4, [sp]
   13dd0:	mov	r3, r8
   13dd4:	add	r4, r4, #1
   13dd8:	ldr	r7, [r6, #48]	; 0x30
   13ddc:	mov	r2, #0
   13de0:	blx	r7
   13de4:	cmp	r4, #8
   13de8:	add	r5, r5, #8
   13dec:	bne	13dc4 <flatcc_builder_clear@@Base+0x18>
   13df0:	ldr	r3, [r6, #184]	; 0xb8
   13df4:	cmp	r3, #0
   13df8:	beq	13e04 <flatcc_builder_clear@@Base+0x58>
   13dfc:	add	r0, r6, #188	; 0xbc
   13e00:	bl	178e0 <flatcc_emitter_clear@@Base>
   13e04:	mov	r0, r6
   13e08:	mov	r2, #232	; 0xe8
   13e0c:	mov	r1, #0
   13e10:	add	sp, sp, #8
   13e14:	pop	{r4, r5, r6, r7, r8, lr}
   13e18:	b	11fd8 <memset@plt>

00013e1c <flatcc_builder_enter_user_frame_ptr@@Base>:
   13e1c:	push	{r4, r5, r6, r7, r8, lr}
   13e20:	add	r4, r1, #3
   13e24:	bic	r4, r4, #3
   13e28:	ldr	r7, [r0, #228]	; 0xe4
   13e2c:	add	r4, r4, #4
   13e30:	ldr	r3, [r0, #112]	; 0x70
   13e34:	add	r2, r4, r7
   13e38:	cmp	r2, r3
   13e3c:	sub	sp, sp, #8
   13e40:	mov	r6, r0
   13e44:	bhi	13e8c <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   13e48:	ldr	r8, [r6, #108]	; 0x6c
   13e4c:	adds	r5, r8, r7
   13e50:	beq	13eb4 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   13e54:	mov	r2, r4
   13e58:	mov	r1, #0
   13e5c:	mov	r0, r5
   13e60:	bl	11fd8 <memset@plt>
   13e64:	ldr	r3, [r6, #224]	; 0xe0
   13e68:	add	r0, r5, #4
   13e6c:	str	r3, [r8, r7]
   13e70:	ldr	r3, [r6, #228]	; 0xe4
   13e74:	add	r4, r4, r3
   13e78:	add	r3, r3, #4
   13e7c:	str	r4, [r6, #228]	; 0xe4
   13e80:	str	r3, [r6, #224]	; 0xe0
   13e84:	add	sp, sp, #8
   13e88:	pop	{r4, r5, r6, r7, r8, pc}
   13e8c:	mov	r3, #7
   13e90:	ldr	r0, [r0, #40]	; 0x28
   13e94:	add	r1, r6, #108	; 0x6c
   13e98:	str	r3, [sp]
   13e9c:	mov	r3, #0
   13ea0:	ldr	r5, [r6, #48]	; 0x30
   13ea4:	blx	r5
   13ea8:	cmp	r0, #0
   13eac:	beq	13e48 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   13eb0:	bl	120a0 <__assert_fail@plt+0xa4>
   13eb4:	mov	r0, r5
   13eb8:	b	13e84 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>

00013ebc <flatcc_builder_enter_user_frame@@Base>:
   13ebc:	push	{r4, r5, r6, r7, lr}
   13ec0:	add	r4, r1, #3
   13ec4:	bic	r4, r4, #3
   13ec8:	ldr	r6, [r0, #228]	; 0xe4
   13ecc:	add	r4, r4, #4
   13ed0:	ldr	r3, [r0, #112]	; 0x70
   13ed4:	add	r2, r4, r6
   13ed8:	cmp	r2, r3
   13edc:	sub	sp, sp, #12
   13ee0:	mov	r5, r0
   13ee4:	bhi	13f24 <flatcc_builder_enter_user_frame@@Base+0x68>
   13ee8:	ldr	r7, [r5, #108]	; 0x6c
   13eec:	adds	r0, r7, r6
   13ef0:	beq	13f1c <flatcc_builder_enter_user_frame@@Base+0x60>
   13ef4:	mov	r2, r4
   13ef8:	mov	r1, #0
   13efc:	bl	11fd8 <memset@plt>
   13f00:	ldr	r3, [r5, #224]	; 0xe0
   13f04:	str	r3, [r7, r6]
   13f08:	ldr	r0, [r5, #228]	; 0xe4
   13f0c:	add	r4, r4, r0
   13f10:	add	r0, r0, #4
   13f14:	str	r4, [r5, #228]	; 0xe4
   13f18:	str	r0, [r5, #224]	; 0xe0
   13f1c:	add	sp, sp, #12
   13f20:	pop	{r4, r5, r6, r7, pc}
   13f24:	mov	r3, #7
   13f28:	ldr	r0, [r0, #40]	; 0x28
   13f2c:	add	r1, r5, #108	; 0x6c
   13f30:	str	r3, [sp]
   13f34:	mov	r3, #0
   13f38:	ldr	r7, [r5, #48]	; 0x30
   13f3c:	blx	r7
   13f40:	cmp	r0, #0
   13f44:	beq	13ee8 <flatcc_builder_enter_user_frame@@Base+0x2c>
   13f48:	bl	120a0 <__assert_fail@plt+0xa4>

00013f4c <flatcc_builder_exit_user_frame@@Base>:
   13f4c:	ldr	r3, [r0, #224]	; 0xe0
   13f50:	cmp	r3, #0
   13f54:	beq	13f78 <flatcc_builder_exit_user_frame@@Base+0x2c>
   13f58:	ldr	r2, [r0, #108]	; 0x6c
   13f5c:	sub	r1, r3, #4
   13f60:	add	r3, r2, r3
   13f64:	str	r1, [r0, #228]	; 0xe4
   13f68:	ldr	r3, [r3, #-4]
   13f6c:	str	r3, [r0, #224]	; 0xe0
   13f70:	mov	r0, r3
   13f74:	bx	lr
   13f78:	ldr	r3, [pc, #32]	; 13fa0 <flatcc_builder_exit_user_frame@@Base+0x54>
   13f7c:	ldr	r1, [pc, #32]	; 13fa4 <flatcc_builder_exit_user_frame@@Base+0x58>
   13f80:	ldr	r0, [pc, #32]	; 13fa8 <flatcc_builder_exit_user_frame@@Base+0x5c>
   13f84:	add	r3, pc, r3
   13f88:	push	{r4, lr}
   13f8c:	add	r3, r3, #136	; 0x88
   13f90:	ldr	r2, [pc, #20]	; 13fac <flatcc_builder_exit_user_frame@@Base+0x60>
   13f94:	add	r1, pc, r1
   13f98:	add	r0, pc, r0
   13f9c:	bl	11ffc <__assert_fail@plt>
   13fa0:	andeq	r4, r0, r8, lsl #4
   13fa4:	andeq	r4, r0, r8, asr #18
   13fa8:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   13fac:	andeq	r0, r0, lr, lsl r2

00013fb0 <flatcc_builder_exit_user_frame_at@@Base>:
   13fb0:	ldr	r2, [r0, #224]	; 0xe0
   13fb4:	cmp	r2, r1
   13fb8:	bcc	13fc4 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   13fbc:	str	r1, [r0, #224]	; 0xe0
   13fc0:	b	13f4c <flatcc_builder_exit_user_frame@@Base>
   13fc4:	ldr	r3, [pc, #32]	; 13fec <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   13fc8:	ldr	r1, [pc, #32]	; 13ff0 <flatcc_builder_exit_user_frame_at@@Base+0x40>
   13fcc:	ldr	r0, [pc, #32]	; 13ff4 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   13fd0:	add	r3, pc, r3
   13fd4:	push	{r4, lr}
   13fd8:	add	r3, r3, #168	; 0xa8
   13fdc:	ldr	r2, [pc, #20]	; 13ff8 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   13fe0:	add	r1, pc, r1
   13fe4:	add	r0, pc, r0
   13fe8:	bl	11ffc <__assert_fail@plt>
   13fec:			; <UNDEFINED> instruction: 0x000041bc
   13ff0:	strdeq	r4, [r0], -ip
   13ff4:	andeq	r4, r0, r4, asr #19
   13ff8:	andeq	r0, r0, r7, lsr #4

00013ffc <flatcc_builder_get_current_user_frame@@Base>:
   13ffc:	ldr	r0, [r0, #224]	; 0xe0
   14000:	bx	lr

00014004 <flatcc_builder_get_user_frame_ptr@@Base>:
   14004:	ldr	r0, [r0, #108]	; 0x6c
   14008:	add	r0, r0, r1
   1400c:	bx	lr

00014010 <flatcc_builder_embed_buffer@@Base>:
   14010:	ldr	ip, [r0, #152]	; 0x98
   14014:	push	{r4, r5, r6, lr}
   14018:	mov	r5, r3
   1401c:	sub	sp, sp, #88	; 0x58
   14020:	adds	r3, ip, #0
   14024:	movne	r3, #1
   14028:	mov	r6, r2
   1402c:	mov	r2, r1
   14030:	add	r1, sp, #104	; 0x68
   14034:	mov	r4, r0
   14038:	bl	136f4 <flatcc_builder_default_alloc@@Base+0x10c>
   1403c:	ldr	ip, [pc, #324]	; 14188 <flatcc_builder_embed_buffer@@Base+0x178>
   14040:	add	ip, pc, ip
   14044:	cmp	r0, #0
   14048:	bne	14150 <flatcc_builder_embed_buffer@@Base+0x140>
   1404c:	ldr	r2, [sp, #108]	; 0x6c
   14050:	ldr	r1, [r4, #136]	; 0x88
   14054:	ldrh	r3, [sp, #104]	; 0x68
   14058:	tst	r2, #2
   1405c:	moveq	lr, #0
   14060:	movne	lr, #4
   14064:	sub	r2, r1, r5
   14068:	sub	r3, r3, #1
   1406c:	sub	r2, r2, lr
   14070:	and	r2, r2, r3
   14074:	ldr	r3, [r4, #152]	; 0x98
   14078:	str	r0, [sp, #16]
   1407c:	str	r0, [sp, #20]
   14080:	cmp	r3, #0
   14084:	add	r0, r5, r2
   14088:	str	r0, [sp, #12]
   1408c:	beq	140ac <flatcc_builder_embed_buffer@@Base+0x9c>
   14090:	mov	r3, #4
   14094:	mov	lr, #1
   14098:	add	r0, sp, #12
   1409c:	str	r3, [sp, #16]
   140a0:	str	r3, [sp, #28]
   140a4:	str	r0, [sp, #24]
   140a8:	str	lr, [sp, #20]
   140ac:	cmp	r5, #0
   140b0:	beq	140d8 <flatcc_builder_embed_buffer@@Base+0xc8>
   140b4:	ldr	r0, [sp, #20]
   140b8:	add	lr, sp, #88	; 0x58
   140bc:	add	r0, r0, #1
   140c0:	add	r3, r3, r5
   140c4:	add	lr, lr, r0, lsl #3
   140c8:	str	r3, [sp, #16]
   140cc:	str	r0, [sp, #20]
   140d0:	str	r6, [lr, #-72]	; 0xffffffb8
   140d4:	str	r5, [lr, #-68]	; 0xffffffbc
   140d8:	cmp	r2, #0
   140dc:	bne	14120 <flatcc_builder_embed_buffer@@Base+0x110>
   140e0:	sub	r5, r1, r3
   140e4:	cmp	r1, r5
   140e8:	ble	14184 <flatcc_builder_embed_buffer@@Base+0x174>
   140ec:	ldr	r0, [r4, #36]	; 0x24
   140f0:	ldr	r2, [sp, #20]
   140f4:	str	r3, [sp]
   140f8:	add	r1, sp, #24
   140fc:	ldr	r6, [r4, #44]	; 0x2c
   14100:	mov	r3, r5
   14104:	blx	r6
   14108:	cmp	r0, #0
   1410c:	streq	r5, [r4, #136]	; 0x88
   14110:	bne	14160 <flatcc_builder_embed_buffer@@Base+0x150>
   14114:	mov	r0, r5
   14118:	add	sp, sp, #88	; 0x58
   1411c:	pop	{r4, r5, r6, pc}
   14120:	ldr	r0, [sp, #20]
   14124:	ldr	lr, [pc, #96]	; 1418c <flatcc_builder_embed_buffer@@Base+0x17c>
   14128:	add	r0, r0, #1
   1412c:	add	r3, r3, r2
   14130:	str	r3, [sp, #16]
   14134:	ldr	lr, [ip, lr]
   14138:	add	ip, sp, #88	; 0x58
   1413c:	add	ip, ip, r0, lsl #3
   14140:	str	r0, [sp, #20]
   14144:	str	lr, [ip, #-72]	; 0xffffffb8
   14148:	str	r2, [ip, #-68]	; 0xffffffbc
   1414c:	b	140e0 <flatcc_builder_embed_buffer@@Base+0xd0>
   14150:	mov	r5, #0
   14154:	mov	r0, r5
   14158:	add	sp, sp, #88	; 0x58
   1415c:	pop	{r4, r5, r6, pc}
   14160:	ldr	r3, [pc, #40]	; 14190 <flatcc_builder_embed_buffer@@Base+0x180>
   14164:	ldr	r1, [pc, #40]	; 14194 <flatcc_builder_embed_buffer@@Base+0x184>
   14168:	ldr	r0, [pc, #40]	; 14198 <flatcc_builder_embed_buffer@@Base+0x188>
   1416c:	add	r3, pc, r3
   14170:	ldr	r2, [pc, #36]	; 1419c <flatcc_builder_embed_buffer@@Base+0x18c>
   14174:	add	r3, r3, #28
   14178:	add	r1, pc, r1
   1417c:	add	r0, pc, r0
   14180:	bl	11ffc <__assert_fail@plt>
   14184:	bl	12108 <__assert_fail@plt+0x10c>
   14188:			; <UNDEFINED> instruction: 0x00014fb8
   1418c:	andeq	r0, r0, r8, asr #32
   14190:	andeq	r4, r0, r0, lsr #32
   14194:	andeq	r4, r0, r4, ror #14
   14198:	andeq	r4, r0, r8, ror #15
   1419c:	andeq	r0, r0, fp, lsl #5

000141a0 <flatcc_builder_create_buffer@@Base>:
   141a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141a4:	sub	sp, sp, #100	; 0x64
   141a8:	mov	r5, #0
   141ac:	ldr	r8, [sp, #140]	; 0x8c
   141b0:	mov	r9, r1
   141b4:	and	r6, r8, #1
   141b8:	mov	r7, r3
   141bc:	add	r1, sp, #136	; 0x88
   141c0:	mov	r3, r6
   141c4:	str	r5, [sp, #20]
   141c8:	mov	r4, r0
   141cc:	bl	136f4 <flatcc_builder_default_alloc@@Base+0x10c>
   141d0:	ldr	lr, [pc, #516]	; 143dc <flatcc_builder_create_buffer@@Base+0x23c>
   141d4:	add	lr, pc, lr
   141d8:	cmp	r0, r5
   141dc:	bne	14370 <flatcc_builder_create_buffer@@Base+0x1d0>
   141e0:	ldrh	r3, [r4, #128]	; 0x80
   141e4:	ldrh	r2, [sp, #136]	; 0x88
   141e8:	uxtb	r5, r6
   141ec:	cmp	r3, r2
   141f0:	strhcc	r2, [r4, #128]	; 0x80
   141f4:	cmp	r9, #0
   141f8:	sub	r2, r2, #1
   141fc:	ldrne	r3, [r9]
   14200:	ldreq	r0, [sp, #20]
   14204:	ldrne	r0, [r9]
   14208:	strne	r3, [sp, #20]
   1420c:	cmp	r0, #0
   14210:	movne	r0, #4
   14214:	moveq	r0, #0
   14218:	ands	r3, r8, #2
   1421c:	ldr	r8, [r4, #136]	; 0x88
   14220:	bne	14340 <flatcc_builder_create_buffer@@Base+0x1a0>
   14224:	sub	r1, r8, #4
   14228:	cmp	r5, #0
   1422c:	sub	r1, r1, r0
   14230:	and	r2, r2, r1
   14234:	moveq	r9, #1
   14238:	moveq	ip, #4
   1423c:	bne	1434c <flatcc_builder_create_buffer@@Base+0x1ac>
   14240:	add	r1, r3, #1
   14244:	add	sl, sp, #96	; 0x60
   14248:	add	r1, sl, r1, lsl #3
   1424c:	mov	fp, #4
   14250:	add	sl, sp, #12
   14254:	cmp	r0, #0
   14258:	str	ip, [sp, #24]
   1425c:	str	r9, [sp, #28]
   14260:	str	sl, [r1, #-72]	; 0xffffffb8
   14264:	str	fp, [r1, #-68]	; 0xffffffbc
   14268:	beq	14294 <flatcc_builder_create_buffer@@Base+0xf4>
   1426c:	add	r9, r9, #1
   14270:	add	r1, sp, #96	; 0x60
   14274:	add	r9, r1, r9, lsl #3
   14278:	add	r3, r3, #2
   1427c:	add	ip, ip, r0
   14280:	str	r3, [sp, #28]
   14284:	add	r3, sp, #20
   14288:	str	r0, [r9, #-68]	; 0xffffffbc
   1428c:	str	ip, [sp, #24]
   14290:	str	r3, [r9, #-72]	; 0xffffffb8
   14294:	cmp	r2, #0
   14298:	beq	142c8 <flatcc_builder_create_buffer@@Base+0x128>
   1429c:	ldr	r3, [sp, #28]
   142a0:	ldr	r1, [pc, #312]	; 143e0 <flatcc_builder_create_buffer@@Base+0x240>
   142a4:	add	r3, r3, #1
   142a8:	add	ip, ip, r2
   142ac:	str	ip, [sp, #24]
   142b0:	ldr	r0, [lr, r1]
   142b4:	add	r1, sp, #96	; 0x60
   142b8:	add	r1, r1, r3, lsl #3
   142bc:	str	r3, [sp, #28]
   142c0:	str	r0, [r1, #-72]	; 0xffffffb8
   142c4:	str	r2, [r1, #-68]	; 0xffffffbc
   142c8:	cmp	r5, #0
   142cc:	sub	r5, r8, ip
   142d0:	mov	r3, r5
   142d4:	beq	14380 <flatcc_builder_create_buffer@@Base+0x1e0>
   142d8:	cmp	r6, #0
   142dc:	add	r3, r5, #4
   142e0:	beq	14380 <flatcc_builder_create_buffer@@Base+0x1e0>
   142e4:	ldr	r2, [r4, #144]	; 0x90
   142e8:	sub	r2, r2, r3
   142ec:	str	r2, [sp, #16]
   142f0:	sub	r7, r7, r3
   142f4:	cmp	r5, r8
   142f8:	str	r7, [sp, #12]
   142fc:	mov	r6, r5
   14300:	bge	14390 <flatcc_builder_create_buffer@@Base+0x1f0>
   14304:	ldr	r0, [r4, #36]	; 0x24
   14308:	ldr	r2, [sp, #28]
   1430c:	str	ip, [sp]
   14310:	mov	r3, r5
   14314:	ldr	r7, [r4, #44]	; 0x2c
   14318:	add	r1, sp, #32
   1431c:	blx	r7
   14320:	cmp	r0, #0
   14324:	bne	14394 <flatcc_builder_create_buffer@@Base+0x1f4>
   14328:	cmp	r5, #0
   1432c:	str	r5, [r4, #136]	; 0x88
   14330:	beq	143b8 <flatcc_builder_create_buffer@@Base+0x218>
   14334:	mov	r0, r6
   14338:	add	sp, sp, #100	; 0x64
   1433c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14340:	sub	r3, r8, #8
   14344:	sub	r3, r3, r0
   14348:	and	r2, r2, r3
   1434c:	mov	ip, #4
   14350:	mov	r3, #1
   14354:	add	r1, sp, #16
   14358:	str	ip, [sp, #36]	; 0x24
   1435c:	str	r1, [sp, #32]
   14360:	mov	r5, r3
   14364:	mov	r9, #2
   14368:	mov	ip, #8
   1436c:	b	14240 <flatcc_builder_create_buffer@@Base+0xa0>
   14370:	mov	r6, r5
   14374:	mov	r0, r6
   14378:	add	sp, sp, #100	; 0x64
   1437c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14380:	ldr	r2, [r4, #140]	; 0x8c
   14384:	sub	r2, r2, r3
   14388:	str	r2, [sp, #16]
   1438c:	b	142f0 <flatcc_builder_create_buffer@@Base+0x150>
   14390:	bl	12108 <__assert_fail@plt+0x10c>
   14394:	ldr	r3, [pc, #72]	; 143e4 <flatcc_builder_create_buffer@@Base+0x244>
   14398:	ldr	r1, [pc, #72]	; 143e8 <flatcc_builder_create_buffer@@Base+0x248>
   1439c:	ldr	r0, [pc, #72]	; 143ec <flatcc_builder_create_buffer@@Base+0x24c>
   143a0:	add	r3, pc, r3
   143a4:	ldr	r2, [pc, #68]	; 143f0 <flatcc_builder_create_buffer@@Base+0x250>
   143a8:	add	r3, r3, #28
   143ac:	add	r1, pc, r1
   143b0:	add	r0, pc, r0
   143b4:	bl	11ffc <__assert_fail@plt>
   143b8:	ldr	r3, [pc, #52]	; 143f4 <flatcc_builder_create_buffer@@Base+0x254>
   143bc:	ldr	r1, [pc, #52]	; 143f8 <flatcc_builder_create_buffer@@Base+0x258>
   143c0:	ldr	r0, [pc, #52]	; 143fc <flatcc_builder_create_buffer@@Base+0x25c>
   143c4:	add	r3, pc, r3
   143c8:	mov	r2, #772	; 0x304
   143cc:	add	r3, r3, #204	; 0xcc
   143d0:	add	r1, pc, r1
   143d4:	add	r0, pc, r0
   143d8:	bl	11ffc <__assert_fail@plt>
   143dc:	andeq	r4, r1, r4, lsr #28
   143e0:	andeq	r0, r0, r8, asr #32
   143e4:	andeq	r3, r0, ip, ror #27
   143e8:	andeq	r4, r0, r0, lsr r5
   143ec:			; <UNDEFINED> instruction: 0x000045b4
   143f0:	andeq	r0, r0, fp, lsl #5
   143f4:	andeq	r3, r0, r8, asr #27
   143f8:	andeq	r4, r0, ip, lsl #10
   143fc:	muleq	r0, r0, r5

00014400 <flatcc_builder_create_struct@@Base>:
   14400:	push	{r4, r5, r6, lr}
   14404:	cmp	r3, #0
   14408:	ldr	lr, [pc, #300]	; 1453c <flatcc_builder_create_struct@@Base+0x13c>
   1440c:	sub	sp, sp, #80	; 0x50
   14410:	add	lr, pc, lr
   14414:	beq	14518 <flatcc_builder_create_struct@@Base+0x118>
   14418:	mov	r5, r0
   1441c:	ldrh	r0, [r0, #128]	; 0x80
   14420:	ldr	ip, [r5, #136]	; 0x88
   14424:	cmp	r0, r3
   14428:	strhcc	r3, [r5, #128]	; 0x80
   1442c:	mov	r0, #0
   14430:	sub	r3, r3, #1
   14434:	sub	r4, ip, r2
   14438:	cmp	r2, #0
   1443c:	and	r3, r3, r4
   14440:	str	r0, [sp, #8]
   14444:	str	r0, [sp, #12]
   14448:	bne	144c8 <flatcc_builder_create_struct@@Base+0xc8>
   1444c:	cmp	r3, #0
   14450:	movne	r6, #1
   14454:	movne	r1, r2
   14458:	beq	144f0 <flatcc_builder_create_struct@@Base+0xf0>
   1445c:	ldr	r0, [pc, #220]	; 14540 <flatcc_builder_create_struct@@Base+0x140>
   14460:	add	r1, r1, #1
   14464:	add	r2, r2, r3
   14468:	add	r4, sp, #80	; 0x50
   1446c:	add	r1, r4, r1, lsl #3
   14470:	str	r2, [sp, #8]
   14474:	sub	r4, ip, r2
   14478:	ldr	r0, [lr, r0]
   1447c:	str	r3, [r1, #-68]	; 0xffffffbc
   14480:	str	r0, [r1, #-72]	; 0xffffffb8
   14484:	str	r6, [sp, #12]
   14488:	cmp	ip, r4
   1448c:	ble	144f0 <flatcc_builder_create_struct@@Base+0xf0>
   14490:	ldr	r3, [sp, #12]
   14494:	ldr	r0, [r5, #36]	; 0x24
   14498:	add	r1, sp, #16
   1449c:	str	r2, [sp]
   144a0:	mov	r2, r3
   144a4:	ldr	r6, [r5, #44]	; 0x2c
   144a8:	mov	r3, r4
   144ac:	blx	r6
   144b0:	cmp	r0, #0
   144b4:	bne	144f4 <flatcc_builder_create_struct@@Base+0xf4>
   144b8:	mov	r0, r4
   144bc:	str	r4, [r5, #136]	; 0x88
   144c0:	add	sp, sp, #80	; 0x50
   144c4:	pop	{r4, r5, r6, pc}
   144c8:	cmp	r3, r0
   144cc:	mov	r0, #1
   144d0:	str	r1, [sp, #16]
   144d4:	str	r2, [sp, #8]
   144d8:	str	r2, [sp, #20]
   144dc:	str	r0, [sp, #12]
   144e0:	movne	r1, r0
   144e4:	movne	r6, #2
   144e8:	beq	14488 <flatcc_builder_create_struct@@Base+0x88>
   144ec:	b	1445c <flatcc_builder_create_struct@@Base+0x5c>
   144f0:	bl	12108 <__assert_fail@plt+0x10c>
   144f4:	ldr	r3, [pc, #72]	; 14544 <flatcc_builder_create_struct@@Base+0x144>
   144f8:	ldr	r1, [pc, #72]	; 14548 <flatcc_builder_create_struct@@Base+0x148>
   144fc:	ldr	r0, [pc, #72]	; 1454c <flatcc_builder_create_struct@@Base+0x14c>
   14500:	add	r3, pc, r3
   14504:	ldr	r2, [pc, #68]	; 14550 <flatcc_builder_create_struct@@Base+0x150>
   14508:	add	r3, r3, #28
   1450c:	add	r1, pc, r1
   14510:	add	r0, pc, r0
   14514:	bl	11ffc <__assert_fail@plt>
   14518:	ldr	r3, [pc, #52]	; 14554 <flatcc_builder_create_struct@@Base+0x154>
   1451c:	ldr	r1, [pc, #52]	; 14558 <flatcc_builder_create_struct@@Base+0x158>
   14520:	ldr	r0, [pc, #52]	; 1455c <flatcc_builder_create_struct@@Base+0x15c>
   14524:	add	r3, pc, r3
   14528:	ldr	r2, [pc, #48]	; 14560 <flatcc_builder_create_struct@@Base+0x160>
   1452c:	add	r3, r3, #236	; 0xec
   14530:	add	r1, pc, r1
   14534:	add	r0, pc, r0
   14538:	bl	11ffc <__assert_fail@plt>
   1453c:	andeq	r4, r1, r8, ror #23
   14540:	andeq	r0, r0, r8, asr #32
   14544:	andeq	r3, r0, ip, lsl #25
   14548:	ldrdeq	r4, [r0], -r0
   1454c:	andeq	r4, r0, r4, asr r4
   14550:	andeq	r0, r0, fp, lsl #5
   14554:	andeq	r3, r0, r8, ror #24
   14558:	andeq	r4, r0, ip, lsr #7
   1455c:	muleq	r0, r4, r4
   14560:	andeq	r0, r0, pc, lsl #6

00014564 <flatcc_builder_start_buffer@@Base>:
   14564:	push	{r4, r5, r6, r7, r8, lr}
   14568:	mov	r5, r1
   1456c:	ldrh	r1, [r0, #128]	; 0x80
   14570:	mov	r4, r0
   14574:	mov	r7, r2
   14578:	mov	r6, r3
   1457c:	bl	13824 <flatcc_builder_default_alloc@@Base+0x23c>
   14580:	ldr	r1, [pc, #140]	; 14614 <flatcc_builder_start_buffer@@Base+0xb0>
   14584:	add	r1, pc, r1
   14588:	cmp	r0, #0
   1458c:	bne	1460c <flatcc_builder_start_buffer@@Base+0xa8>
   14590:	ldrh	r3, [r4, #132]	; 0x84
   14594:	ldr	ip, [r4, #32]
   14598:	mov	r2, #1
   1459c:	strh	r2, [r4, #128]	; 0x80
   145a0:	strh	r3, [ip, #34]	; 0x22
   145a4:	ldrh	r3, [r4, #164]	; 0xa4
   145a8:	strh	r7, [r4, #132]	; 0x84
   145ac:	cmp	r5, #0
   145b0:	strh	r3, [ip, #32]
   145b4:	ldr	r3, [r4, #144]	; 0x90
   145b8:	strh	r6, [r4, #164]	; 0xa4
   145bc:	str	r3, [ip, #20]
   145c0:	ldr	r3, [r4, #152]	; 0x98
   145c4:	str	r3, [ip, #28]
   145c8:	ldr	r3, [r4, #148]	; 0x94
   145cc:	ldr	lr, [r4, #136]	; 0x88
   145d0:	ldr	r2, [r4, #168]	; 0xa8
   145d4:	add	r6, r3, #1
   145d8:	str	r3, [r4, #152]	; 0x98
   145dc:	str	r6, [r4, #148]	; 0x94
   145e0:	str	lr, [r4, #144]	; 0x90
   145e4:	str	r2, [ip, #16]
   145e8:	beq	14600 <flatcc_builder_start_buffer@@Base+0x9c>
   145ec:	ldr	r2, [r5]
   145f0:	mov	r3, #1
   145f4:	str	r2, [r4, #168]	; 0xa8
   145f8:	strh	r3, [ip, #14]
   145fc:	pop	{r4, r5, r6, r7, r8, pc}
   14600:	ldr	r3, [pc, #16]	; 14618 <flatcc_builder_start_buffer@@Base+0xb4>
   14604:	ldr	r5, [r1, r3]
   14608:	b	145ec <flatcc_builder_start_buffer@@Base+0x88>
   1460c:	mvn	r0, #0
   14610:	pop	{r4, r5, r6, r7, r8, pc}
   14614:	andeq	r4, r1, r4, ror sl
   14618:	andeq	r0, r0, r8, asr #32

0001461c <flatcc_builder_end_buffer@@Base>:
   1461c:	ldr	ip, [r0, #32]
   14620:	ldrh	r2, [r0, #164]	; 0xa4
   14624:	push	{r4, r5, r6, lr}
   14628:	mov	r4, r0
   1462c:	ldrh	ip, [ip, #14]
   14630:	ldr	r0, [r0, #152]	; 0x98
   14634:	and	r2, r2, #2
   14638:	cmp	r0, #0
   1463c:	moveq	r0, r2
   14640:	orrne	r0, r2, #1
   14644:	cmp	ip, #1
   14648:	sub	sp, sp, #8
   1464c:	bne	1472c <flatcc_builder_end_buffer@@Base+0x110>
   14650:	ldrh	r2, [r4, #132]	; 0x84
   14654:	ldrh	ip, [r4, #128]	; 0x80
   14658:	mov	r3, r1
   1465c:	add	r1, r4, #168	; 0xa8
   14660:	cmp	r2, ip
   14664:	movhi	ip, r2
   14668:	strhhi	r2, [r4, #128]	; 0x80
   1466c:	str	r0, [sp, #4]
   14670:	str	ip, [sp]
   14674:	mov	r0, r4
   14678:	bl	141a0 <flatcc_builder_create_buffer@@Base>
   1467c:	subs	r5, r0, #0
   14680:	beq	14720 <flatcc_builder_end_buffer@@Base+0x104>
   14684:	ldr	r3, [r4, #32]
   14688:	ldr	r2, [r4, #20]
   1468c:	mov	r1, #0
   14690:	ldr	ip, [r3, #20]
   14694:	ldr	r0, [r4, #16]
   14698:	str	ip, [r4, #144]	; 0x90
   1469c:	ldr	ip, [r3, #28]
   146a0:	str	ip, [r4, #152]	; 0x98
   146a4:	ldr	ip, [r3, #16]
   146a8:	str	ip, [r4, #168]	; 0xa8
   146ac:	ldrh	r3, [r3, #32]
   146b0:	strh	r3, [r4, #164]	; 0xa4
   146b4:	bl	11fd8 <memset@plt>
   146b8:	ldr	r3, [r4, #32]
   146bc:	ldr	r2, [r4, #64]	; 0x40
   146c0:	ldrh	lr, [r4, #130]	; 0x82
   146c4:	ldr	ip, [r3]
   146c8:	ldr	r1, [r3, #4]
   146cc:	ldrh	r0, [r4, #128]	; 0x80
   146d0:	sub	r2, r2, ip
   146d4:	cmp	r2, r1
   146d8:	movcs	r2, r1
   146dc:	cmp	r0, lr
   146e0:	ldr	r0, [r4, #60]	; 0x3c
   146e4:	ldr	r6, [r3, #8]
   146e8:	str	r2, [r4, #24]
   146ec:	add	r2, r0, ip
   146f0:	str	r2, [r4, #16]
   146f4:	str	r6, [r4, #20]
   146f8:	ldr	r2, [r4, #156]	; 0x9c
   146fc:	str	ip, [r4, #28]
   14700:	str	r1, [r3, #4]
   14704:	strhcc	lr, [r4, #128]	; 0x80
   14708:	ldrh	r1, [r3, #12]
   1470c:	sub	r2, r2, #1
   14710:	sub	r3, r3, #36	; 0x24
   14714:	str	r2, [r4, #156]	; 0x9c
   14718:	strh	r1, [r4, #130]	; 0x82
   1471c:	str	r3, [r4, #32]
   14720:	mov	r0, r5
   14724:	add	sp, sp, #8
   14728:	pop	{r4, r5, r6, pc}
   1472c:	ldr	r3, [pc, #28]	; 14750 <flatcc_builder_end_buffer@@Base+0x134>
   14730:	ldr	r1, [pc, #28]	; 14754 <flatcc_builder_end_buffer@@Base+0x138>
   14734:	ldr	r0, [pc, #28]	; 14758 <flatcc_builder_end_buffer@@Base+0x13c>
   14738:	add	r3, pc, r3
   1473c:	ldr	r2, [pc, #24]	; 1475c <flatcc_builder_end_buffer@@Base+0x140>
   14740:	add	r3, r3, #268	; 0x10c
   14744:	add	r1, pc, r1
   14748:	add	r0, pc, r0
   1474c:	bl	11ffc <__assert_fail@plt>
   14750:	andeq	r3, r0, r4, asr sl
   14754:	muleq	r0, r8, r1
   14758:	andeq	r4, r0, ip, lsl #5
   1475c:	andeq	r0, r0, r6, asr #6

00014760 <flatcc_builder_start_struct@@Base>:
   14760:	push	{r4, r5, r6, lr}
   14764:	mov	r5, r1
   14768:	mov	r1, r2
   1476c:	mov	r4, r0
   14770:	bl	13824 <flatcc_builder_default_alloc@@Base+0x23c>
   14774:	cmp	r0, #0
   14778:	bne	147f8 <flatcc_builder_start_struct@@Base+0x98>
   1477c:	ldr	r2, [r4, #28]
   14780:	ldr	r3, [r4, #64]	; 0x40
   14784:	ldr	r0, [r4, #60]	; 0x3c
   14788:	ldr	ip, [r4, #32]
   1478c:	sub	r3, r3, r2
   14790:	cmn	r3, #4
   14794:	ldr	r6, [r4, #20]
   14798:	add	r0, r0, r2
   1479c:	mov	r2, #2
   147a0:	strh	r2, [ip, #14]
   147a4:	mvnhi	r2, #3
   147a8:	movhi	r3, r2
   147ac:	add	r5, r5, r6
   147b0:	strhi	r2, [r4, #24]
   147b4:	strls	r3, [r4, #24]
   147b8:	mvn	r2, #3
   147bc:	cmp	r5, r3
   147c0:	str	r0, [r4, #16]
   147c4:	str	r2, [ip, #4]
   147c8:	str	r5, [r4, #20]
   147cc:	bcs	147d8 <flatcc_builder_start_struct@@Base+0x78>
   147d0:	add	r0, r0, r6
   147d4:	pop	{r4, r5, r6, pc}
   147d8:	add	r1, r5, #1
   147dc:	mov	r0, r4
   147e0:	bl	13574 <access_monster_buffer@@Base+0x6ec>
   147e4:	cmp	r0, #0
   147e8:	bne	147f8 <flatcc_builder_start_struct@@Base+0x98>
   147ec:	ldr	r0, [r4, #16]
   147f0:	add	r0, r0, r6
   147f4:	pop	{r4, r5, r6, pc}
   147f8:	mov	r0, #0
   147fc:	pop	{r4, r5, r6, pc}

00014800 <flatcc_builder_struct_edit@@Base>:
   14800:	ldr	r0, [r0, #16]
   14804:	bx	lr

00014808 <flatcc_builder_end_struct@@Base>:
   14808:	ldr	r3, [r0, #32]
   1480c:	push	{r4, r5, r6, lr}
   14810:	ldrh	r3, [r3, #14]
   14814:	cmp	r3, #2
   14818:	bne	148b8 <flatcc_builder_end_struct@@Base+0xb0>
   1481c:	ldrh	r3, [r0, #130]	; 0x82
   14820:	ldr	r2, [r0, #20]
   14824:	ldr	r1, [r0, #16]
   14828:	mov	r4, r0
   1482c:	bl	14400 <flatcc_builder_create_struct@@Base>
   14830:	subs	r5, r0, #0
   14834:	beq	148b0 <flatcc_builder_end_struct@@Base+0xa8>
   14838:	ldr	r2, [r4, #20]
   1483c:	mov	r1, #0
   14840:	ldr	r0, [r4, #16]
   14844:	bl	11fd8 <memset@plt>
   14848:	ldr	r3, [r4, #32]
   1484c:	ldr	r2, [r4, #64]	; 0x40
   14850:	ldrh	lr, [r4, #130]	; 0x82
   14854:	ldr	ip, [r3]
   14858:	ldr	r1, [r3, #4]
   1485c:	ldrh	r0, [r4, #128]	; 0x80
   14860:	sub	r2, r2, ip
   14864:	cmp	r2, r1
   14868:	movcs	r2, r1
   1486c:	cmp	r0, lr
   14870:	ldr	r0, [r4, #60]	; 0x3c
   14874:	ldr	r6, [r3, #8]
   14878:	str	r2, [r4, #24]
   1487c:	add	r2, r0, ip
   14880:	str	r2, [r4, #16]
   14884:	str	r6, [r4, #20]
   14888:	ldr	r2, [r4, #156]	; 0x9c
   1488c:	str	ip, [r4, #28]
   14890:	str	r1, [r3, #4]
   14894:	strhcc	lr, [r4, #128]	; 0x80
   14898:	ldrh	r1, [r3, #12]
   1489c:	sub	r2, r2, #1
   148a0:	sub	r3, r3, #36	; 0x24
   148a4:	str	r2, [r4, #156]	; 0x9c
   148a8:	strh	r1, [r4, #130]	; 0x82
   148ac:	str	r3, [r4, #32]
   148b0:	mov	r0, r5
   148b4:	pop	{r4, r5, r6, pc}
   148b8:	ldr	r3, [pc, #28]	; 148dc <flatcc_builder_end_struct@@Base+0xd4>
   148bc:	ldr	r1, [pc, #28]	; 148e0 <flatcc_builder_end_struct@@Base+0xd8>
   148c0:	ldr	r0, [pc, #28]	; 148e4 <flatcc_builder_end_struct@@Base+0xdc>
   148c4:	add	r3, pc, r3
   148c8:	mov	r2, #872	; 0x368
   148cc:	add	r3, r3, #296	; 0x128
   148d0:	add	r1, pc, r1
   148d4:	add	r0, pc, r0
   148d8:	bl	11ffc <__assert_fail@plt>
   148dc:	andeq	r3, r0, r8, asr #17
   148e0:	andeq	r4, r0, ip
   148e4:	andeq	r4, r0, ip, lsr #2

000148e8 <flatcc_builder_extend_vector@@Base>:
   148e8:	ldr	r2, [r0, #32]
   148ec:	push	{r4, r5, r6, lr}
   148f0:	ldr	r3, [r2, #20]
   148f4:	ldr	r4, [r2, #24]
   148f8:	add	ip, r1, r3
   148fc:	cmp	r3, ip
   14900:	movls	r3, #0
   14904:	movhi	r3, #1
   14908:	cmp	r4, ip
   1490c:	movcs	r4, r3
   14910:	orrcc	r4, r3, #1
   14914:	cmp	r4, #0
   14918:	bne	14968 <flatcc_builder_extend_vector@@Base+0x80>
   1491c:	ldr	lr, [r2, #16]
   14920:	str	ip, [r2, #20]
   14924:	ldr	r6, [r0, #20]
   14928:	ldr	r3, [r0, #24]
   1492c:	mla	r1, lr, r1, r6
   14930:	mov	r5, r0
   14934:	cmp	r1, r3
   14938:	str	r1, [r0, #20]
   1493c:	bcs	1494c <flatcc_builder_extend_vector@@Base+0x64>
   14940:	ldr	r0, [r5, #16]
   14944:	add	r0, r0, r6
   14948:	pop	{r4, r5, r6, pc}
   1494c:	add	r1, r1, #1
   14950:	mvn	r2, #3
   14954:	bl	13574 <access_monster_buffer@@Base+0x6ec>
   14958:	cmp	r0, #0
   1495c:	beq	14940 <flatcc_builder_extend_vector@@Base+0x58>
   14960:	mov	r0, r4
   14964:	pop	{r4, r5, r6, pc}
   14968:	bl	12140 <__assert_fail@plt+0x144>

0001496c <flatcc_builder_vector_push@@Base>:
   1496c:	ldr	r3, [r0, #32]
   14970:	push	{r4, r5, r6, r7, r8, lr}
   14974:	ldrh	r2, [r3, #14]
   14978:	cmp	r2, #4
   1497c:	bne	14a24 <flatcc_builder_vector_push@@Base+0xb8>
   14980:	mov	r6, r1
   14984:	ldr	r2, [r3, #20]
   14988:	ldr	r1, [r3, #24]
   1498c:	cmp	r2, r1
   14990:	bhi	14a00 <flatcc_builder_vector_push@@Base+0x94>
   14994:	add	r2, r2, #1
   14998:	str	r2, [r3, #20]
   1499c:	ldr	r7, [r3, #16]
   149a0:	ldr	r5, [r0, #20]
   149a4:	ldr	r3, [r0, #24]
   149a8:	add	r1, r7, r5
   149ac:	cmp	r1, r3
   149b0:	mov	r4, r0
   149b4:	str	r1, [r0, #20]
   149b8:	bcs	149e4 <flatcc_builder_vector_push@@Base+0x78>
   149bc:	ldr	r3, [r4, #16]
   149c0:	adds	r3, r3, r5
   149c4:	beq	149dc <flatcc_builder_vector_push@@Base+0x70>
   149c8:	mov	r0, r3
   149cc:	mov	r2, r7
   149d0:	mov	r1, r6
   149d4:	bl	11f6c <memcpy@plt>
   149d8:	mov	r3, r0
   149dc:	mov	r0, r3
   149e0:	pop	{r4, r5, r6, r7, r8, pc}
   149e4:	add	r1, r1, #1
   149e8:	mvn	r2, #3
   149ec:	bl	13574 <access_monster_buffer@@Base+0x6ec>
   149f0:	cmp	r0, #0
   149f4:	beq	149bc <flatcc_builder_vector_push@@Base+0x50>
   149f8:	mov	r3, #0
   149fc:	b	149dc <flatcc_builder_vector_push@@Base+0x70>
   14a00:	ldr	r3, [pc, #64]	; 14a48 <flatcc_builder_vector_push@@Base+0xdc>
   14a04:	ldr	r1, [pc, #64]	; 14a4c <flatcc_builder_vector_push@@Base+0xe0>
   14a08:	ldr	r0, [pc, #64]	; 14a50 <flatcc_builder_vector_push@@Base+0xe4>
   14a0c:	add	r3, pc, r3
   14a10:	mov	r2, #908	; 0x38c
   14a14:	add	r3, r3, #324	; 0x144
   14a18:	add	r1, pc, r1
   14a1c:	add	r0, pc, r0
   14a20:	bl	11ffc <__assert_fail@plt>
   14a24:	ldr	r3, [pc, #40]	; 14a54 <flatcc_builder_vector_push@@Base+0xe8>
   14a28:	ldr	r1, [pc, #40]	; 14a58 <flatcc_builder_vector_push@@Base+0xec>
   14a2c:	ldr	r0, [pc, #40]	; 14a5c <flatcc_builder_vector_push@@Base+0xf0>
   14a30:	add	r3, pc, r3
   14a34:	ldr	r2, [pc, #36]	; 14a60 <flatcc_builder_vector_push@@Base+0xf4>
   14a38:	add	r3, r3, #324	; 0x144
   14a3c:	add	r1, pc, r1
   14a40:	add	r0, pc, r0
   14a44:	bl	11ffc <__assert_fail@plt>
   14a48:	andeq	r3, r0, r0, lsl #15
   14a4c:	andeq	r3, r0, r4, asr #29
   14a50:	andeq	r4, r0, ip, lsr r0
   14a54:	andeq	r3, r0, ip, asr r7
   14a58:	andeq	r3, r0, r0, lsr #29
   14a5c:	andeq	r3, r0, ip, ror #31
   14a60:	andeq	r0, r0, fp, lsl #7

00014a64 <flatcc_builder_append_vector@@Base>:
   14a64:	push	{r4, r5, r6, r7, r8, lr}
   14a68:	mov	r7, r1
   14a6c:	ldr	r1, [r0, #32]
   14a70:	ldrh	r3, [r1, #14]
   14a74:	cmp	r3, #4
   14a78:	bne	14b18 <flatcc_builder_append_vector@@Base+0xb4>
   14a7c:	ldr	r3, [r1, #20]
   14a80:	ldr	r4, [r1, #24]
   14a84:	add	ip, r2, r3
   14a88:	cmp	r3, ip
   14a8c:	movls	r3, #0
   14a90:	movhi	r3, #1
   14a94:	cmp	r4, ip
   14a98:	movcs	r4, r3
   14a9c:	orrcc	r4, r3, #1
   14aa0:	cmp	r4, #0
   14aa4:	bne	14b14 <flatcc_builder_append_vector@@Base+0xb0>
   14aa8:	ldr	r6, [r1, #16]
   14aac:	str	ip, [r1, #20]
   14ab0:	ldr	r8, [r0, #20]
   14ab4:	mul	r6, r6, r2
   14ab8:	ldr	r3, [r0, #24]
   14abc:	add	r1, r6, r8
   14ac0:	cmp	r1, r3
   14ac4:	mov	r5, r0
   14ac8:	str	r1, [r0, #20]
   14acc:	bcs	14af8 <flatcc_builder_append_vector@@Base+0x94>
   14ad0:	ldr	r3, [r5, #16]
   14ad4:	adds	r3, r3, r8
   14ad8:	beq	14af0 <flatcc_builder_append_vector@@Base+0x8c>
   14adc:	mov	r0, r3
   14ae0:	mov	r2, r6
   14ae4:	mov	r1, r7
   14ae8:	bl	11f6c <memcpy@plt>
   14aec:	mov	r3, r0
   14af0:	mov	r0, r3
   14af4:	pop	{r4, r5, r6, r7, r8, pc}
   14af8:	add	r1, r1, #1
   14afc:	mvn	r2, #3
   14b00:	bl	13574 <access_monster_buffer@@Base+0x6ec>
   14b04:	cmp	r0, #0
   14b08:	beq	14ad0 <flatcc_builder_append_vector@@Base+0x6c>
   14b0c:	mov	r3, r4
   14b10:	b	14af0 <flatcc_builder_append_vector@@Base+0x8c>
   14b14:	bl	12140 <__assert_fail@plt+0x144>
   14b18:	ldr	r3, [pc, #28]	; 14b3c <flatcc_builder_append_vector@@Base+0xd8>
   14b1c:	ldr	r1, [pc, #28]	; 14b40 <flatcc_builder_append_vector@@Base+0xdc>
   14b20:	ldr	r0, [pc, #28]	; 14b44 <flatcc_builder_append_vector@@Base+0xe0>
   14b24:	add	r3, pc, r3
   14b28:	ldr	r2, [pc, #24]	; 14b48 <flatcc_builder_append_vector@@Base+0xe4>
   14b2c:	add	r3, r3, #352	; 0x160
   14b30:	add	r1, pc, r1
   14b34:	add	r0, pc, r0
   14b38:	bl	11ffc <__assert_fail@plt>
   14b3c:	andeq	r3, r0, r8, ror #12
   14b40:	andeq	r3, r0, ip, lsr #27
   14b44:	strdeq	r3, [r0], -r8
   14b48:	muleq	r0, r3, r3

00014b4c <flatcc_builder_extend_offset_vector@@Base>:
   14b4c:	ldr	ip, [r0, #32]
   14b50:	push	{r4, r5, r6, lr}
   14b54:	ldr	r3, [ip, #20]
   14b58:	adds	r2, r1, r3
   14b5c:	movcs	r3, #1
   14b60:	movcc	r3, #0
   14b64:	cmn	r2, #-1073741823	; 0xc0000001
   14b68:	movls	r4, #0
   14b6c:	movhi	r4, #1
   14b70:	orrs	r4, r3, r4
   14b74:	bne	14bc0 <flatcc_builder_extend_offset_vector@@Base+0x74>
   14b78:	str	r2, [ip, #20]
   14b7c:	ldr	r6, [r0, #20]
   14b80:	ldr	r3, [r0, #24]
   14b84:	add	r1, r6, r1, lsl #2
   14b88:	cmp	r1, r3
   14b8c:	mov	r5, r0
   14b90:	str	r1, [r0, #20]
   14b94:	bcs	14ba4 <flatcc_builder_extend_offset_vector@@Base+0x58>
   14b98:	ldr	r0, [r5, #16]
   14b9c:	add	r0, r0, r6
   14ba0:	pop	{r4, r5, r6, pc}
   14ba4:	add	r1, r1, #1
   14ba8:	mvn	r2, #3
   14bac:	bl	13574 <access_monster_buffer@@Base+0x6ec>
   14bb0:	cmp	r0, #0
   14bb4:	beq	14b98 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   14bb8:	mov	r0, r4
   14bbc:	pop	{r4, r5, r6, pc}
   14bc0:	bl	12140 <__assert_fail@plt+0x144>

00014bc4 <flatcc_builder_offset_vector_push@@Base>:
   14bc4:	ldr	r2, [r0, #32]
   14bc8:	push	{r4, r5, r6, lr}
   14bcc:	ldrh	r3, [r2, #14]
   14bd0:	cmp	r3, #5
   14bd4:	bne	14c3c <flatcc_builder_offset_vector_push@@Base+0x78>
   14bd8:	ldr	r3, [r2, #20]
   14bdc:	cmn	r3, #-1073741823	; 0xc0000001
   14be0:	beq	14c34 <flatcc_builder_offset_vector_push@@Base+0x70>
   14be4:	add	r3, r3, #1
   14be8:	str	r3, [r2, #20]
   14bec:	ldr	r5, [r0, #20]
   14bf0:	ldr	r2, [r0, #24]
   14bf4:	add	r3, r5, #4
   14bf8:	cmp	r3, r2
   14bfc:	mov	r4, r0
   14c00:	mov	r6, r1
   14c04:	str	r3, [r0, #20]
   14c08:	bcs	14c20 <flatcc_builder_offset_vector_push@@Base+0x5c>
   14c0c:	ldr	r3, [r4, #16]
   14c10:	adds	r0, r3, r5
   14c14:	beq	14c60 <flatcc_builder_offset_vector_push@@Base+0x9c>
   14c18:	str	r6, [r3, r5]
   14c1c:	pop	{r4, r5, r6, pc}
   14c20:	mvn	r2, #3
   14c24:	add	r1, r5, #5
   14c28:	bl	13574 <access_monster_buffer@@Base+0x6ec>
   14c2c:	cmp	r0, #0
   14c30:	beq	14c0c <flatcc_builder_offset_vector_push@@Base+0x48>
   14c34:	mov	r0, #0
   14c38:	pop	{r4, r5, r6, pc}
   14c3c:	ldr	r3, [pc, #32]	; 14c64 <flatcc_builder_offset_vector_push@@Base+0xa0>
   14c40:	ldr	r1, [pc, #32]	; 14c68 <flatcc_builder_offset_vector_push@@Base+0xa4>
   14c44:	ldr	r0, [pc, #32]	; 14c6c <flatcc_builder_offset_vector_push@@Base+0xa8>
   14c48:	add	r3, pc, r3
   14c4c:	ldr	r2, [pc, #28]	; 14c70 <flatcc_builder_offset_vector_push@@Base+0xac>
   14c50:	add	r3, r3, #384	; 0x180
   14c54:	add	r1, pc, r1
   14c58:	add	r0, pc, r0
   14c5c:	bl	11ffc <__assert_fail@plt>
   14c60:	pop	{r4, r5, r6, pc}
   14c64:	andeq	r3, r0, r4, asr #10
   14c68:	andeq	r3, r0, r8, lsl #25
   14c6c:	andeq	r3, r0, r0, asr #28
   14c70:	andeq	r0, r0, r6, lsr #7

00014c74 <flatcc_builder_append_offset_vector@@Base>:
   14c74:	ldr	ip, [r0, #32]
   14c78:	push	{r4, r5, r6, r7, r8, lr}
   14c7c:	ldrh	r3, [ip, #14]
   14c80:	cmp	r3, #5
   14c84:	bne	14d1c <flatcc_builder_append_offset_vector@@Base+0xa8>
   14c88:	mov	r6, r1
   14c8c:	ldr	r1, [ip, #20]
   14c90:	adds	r1, r2, r1
   14c94:	movcs	lr, #1
   14c98:	movcc	lr, #0
   14c9c:	cmn	r1, #-1073741823	; 0xc0000001
   14ca0:	movls	r3, #0
   14ca4:	movhi	r3, #1
   14ca8:	orrs	r8, lr, r3
   14cac:	bne	14d18 <flatcc_builder_append_offset_vector@@Base+0xa4>
   14cb0:	str	r1, [ip, #20]
   14cb4:	ldr	r7, [r0, #20]
   14cb8:	lsl	r4, r2, #2
   14cbc:	ldr	r3, [r0, #24]
   14cc0:	add	r1, r4, r7
   14cc4:	cmp	r1, r3
   14cc8:	mov	r5, r0
   14ccc:	str	r1, [r0, #20]
   14cd0:	bcs	14cfc <flatcc_builder_append_offset_vector@@Base+0x88>
   14cd4:	ldr	r3, [r5, #16]
   14cd8:	adds	r3, r3, r7
   14cdc:	beq	14cf4 <flatcc_builder_append_offset_vector@@Base+0x80>
   14ce0:	mov	r0, r3
   14ce4:	mov	r2, r4
   14ce8:	mov	r1, r6
   14cec:	bl	11f6c <memcpy@plt>
   14cf0:	mov	r3, r0
   14cf4:	mov	r0, r3
   14cf8:	pop	{r4, r5, r6, r7, r8, pc}
   14cfc:	add	r1, r1, #1
   14d00:	mvn	r2, #3
   14d04:	bl	13574 <access_monster_buffer@@Base+0x6ec>
   14d08:	cmp	r0, #0
   14d0c:	beq	14cd4 <flatcc_builder_append_offset_vector@@Base+0x60>
   14d10:	mov	r3, r8
   14d14:	b	14cf4 <flatcc_builder_append_offset_vector@@Base+0x80>
   14d18:	bl	12140 <__assert_fail@plt+0x144>
   14d1c:	ldr	r3, [pc, #28]	; 14d40 <flatcc_builder_append_offset_vector@@Base+0xcc>
   14d20:	ldr	r1, [pc, #28]	; 14d44 <flatcc_builder_append_offset_vector@@Base+0xd0>
   14d24:	ldr	r0, [pc, #28]	; 14d48 <flatcc_builder_append_offset_vector@@Base+0xd4>
   14d28:	add	r3, pc, r3
   14d2c:	mov	r2, #948	; 0x3b4
   14d30:	add	r3, r3, #420	; 0x1a4
   14d34:	add	r1, pc, r1
   14d38:	add	r0, pc, r0
   14d3c:	bl	11ffc <__assert_fail@plt>
   14d40:	andeq	r3, r0, r4, ror #8
   14d44:	andeq	r3, r0, r8, lsr #23
   14d48:	andeq	r3, r0, r0, ror #26

00014d4c <flatcc_builder_extend_string@@Base>:
   14d4c:	ldr	r2, [r0, #32]
   14d50:	push	{r4, r5, r6, lr}
   14d54:	ldrh	r3, [r2, #14]
   14d58:	cmp	r3, #6
   14d5c:	bne	14db8 <flatcc_builder_extend_string@@Base+0x6c>
   14d60:	ldr	r3, [r2, #20]
   14d64:	adds	r3, r1, r3
   14d68:	bcs	14db4 <flatcc_builder_extend_string@@Base+0x68>
   14d6c:	str	r3, [r2, #20]
   14d70:	ldr	r5, [r0, #20]
   14d74:	ldr	r3, [r0, #24]
   14d78:	add	r1, r1, r5
   14d7c:	cmp	r1, r3
   14d80:	mov	r4, r0
   14d84:	str	r1, [r0, #20]
   14d88:	bcs	14d98 <flatcc_builder_extend_string@@Base+0x4c>
   14d8c:	ldr	r0, [r4, #16]
   14d90:	add	r0, r0, r5
   14d94:	pop	{r4, r5, r6, pc}
   14d98:	add	r1, r1, #1
   14d9c:	mvn	r2, #3
   14da0:	bl	13574 <access_monster_buffer@@Base+0x6ec>
   14da4:	cmp	r0, #0
   14da8:	beq	14d8c <flatcc_builder_extend_string@@Base+0x40>
   14dac:	mov	r0, #0
   14db0:	pop	{r4, r5, r6, pc}
   14db4:	bl	12140 <__assert_fail@plt+0x144>
   14db8:	ldr	r3, [pc, #28]	; 14ddc <flatcc_builder_extend_string@@Base+0x90>
   14dbc:	ldr	r1, [pc, #28]	; 14de0 <flatcc_builder_extend_string@@Base+0x94>
   14dc0:	ldr	r0, [pc, #28]	; 14de4 <flatcc_builder_extend_string@@Base+0x98>
   14dc4:	add	r3, pc, r3
   14dc8:	ldr	r2, [pc, #24]	; 14de8 <flatcc_builder_extend_string@@Base+0x9c>
   14dcc:	add	r3, r3, #456	; 0x1c8
   14dd0:	add	r1, pc, r1
   14dd4:	add	r0, pc, r0
   14dd8:	bl	11ffc <__assert_fail@plt>
   14ddc:	andeq	r3, r0, r8, asr #7
   14de0:	andeq	r3, r0, ip, lsl #22
   14de4:	strdeq	r3, [r0], -r8
   14de8:			; <UNDEFINED> instruction: 0x000003bd

00014dec <flatcc_builder_append_string@@Base>:
   14dec:	push	{r4, r5, r6, r7, r8, lr}
   14df0:	mov	r7, r1
   14df4:	ldr	r1, [r0, #32]
   14df8:	ldrh	r3, [r1, #14]
   14dfc:	cmp	r3, #6
   14e00:	bne	14e7c <flatcc_builder_append_string@@Base+0x90>
   14e04:	ldr	r3, [r1, #20]
   14e08:	mov	r5, r2
   14e0c:	adds	r3, r2, r3
   14e10:	bcs	14e78 <flatcc_builder_append_string@@Base+0x8c>
   14e14:	str	r3, [r1, #20]
   14e18:	ldr	r6, [r0, #20]
   14e1c:	ldr	r3, [r0, #24]
   14e20:	add	r1, r2, r6
   14e24:	cmp	r1, r3
   14e28:	mov	r4, r0
   14e2c:	str	r1, [r0, #20]
   14e30:	bcs	14e5c <flatcc_builder_append_string@@Base+0x70>
   14e34:	ldr	r3, [r4, #16]
   14e38:	adds	r3, r3, r6
   14e3c:	beq	14e54 <flatcc_builder_append_string@@Base+0x68>
   14e40:	mov	r0, r3
   14e44:	mov	r2, r5
   14e48:	mov	r1, r7
   14e4c:	bl	11f6c <memcpy@plt>
   14e50:	mov	r3, r0
   14e54:	mov	r0, r3
   14e58:	pop	{r4, r5, r6, r7, r8, pc}
   14e5c:	add	r1, r1, #1
   14e60:	mvn	r2, #3
   14e64:	bl	13574 <access_monster_buffer@@Base+0x6ec>
   14e68:	cmp	r0, #0
   14e6c:	beq	14e34 <flatcc_builder_append_string@@Base+0x48>
   14e70:	mov	r3, #0
   14e74:	b	14e54 <flatcc_builder_append_string@@Base+0x68>
   14e78:	bl	12140 <__assert_fail@plt+0x144>
   14e7c:	ldr	r3, [pc, #28]	; 14ea0 <flatcc_builder_append_string@@Base+0xb4>
   14e80:	ldr	r1, [pc, #28]	; 14ea4 <flatcc_builder_append_string@@Base+0xb8>
   14e84:	ldr	r0, [pc, #28]	; 14ea8 <flatcc_builder_append_string@@Base+0xbc>
   14e88:	add	r3, pc, r3
   14e8c:	ldr	r2, [pc, #24]	; 14eac <flatcc_builder_append_string@@Base+0xc0>
   14e90:	add	r3, r3, #488	; 0x1e8
   14e94:	add	r1, pc, r1
   14e98:	add	r0, pc, r0
   14e9c:	bl	11ffc <__assert_fail@plt>
   14ea0:	andeq	r3, r0, r4, lsl #6
   14ea4:	andeq	r3, r0, r8, asr #20
   14ea8:	andeq	r3, r0, r4, lsr ip
   14eac:	andeq	r0, r0, r6, asr #7

00014eb0 <flatcc_builder_append_string_str@@Base>:
   14eb0:	push	{r4, r5, r6, lr}
   14eb4:	mov	r5, r0
   14eb8:	mov	r0, r1
   14ebc:	mov	r4, r1
   14ec0:	bl	11fc0 <strlen@plt>
   14ec4:	mov	r1, r4
   14ec8:	mov	r2, r0
   14ecc:	mov	r0, r5
   14ed0:	pop	{r4, r5, r6, lr}
   14ed4:	b	14dec <flatcc_builder_append_string@@Base>

00014ed8 <flatcc_builder_append_string_strn@@Base>:
   14ed8:	push	{r4, r5, r6, lr}
   14edc:	mov	r4, r1
   14ee0:	mov	r6, r0
   14ee4:	mov	r1, #0
   14ee8:	mov	r0, r4
   14eec:	mov	r5, r2
   14ef0:	bl	11fe4 <memchr@plt>
   14ef4:	mov	r1, r4
   14ef8:	cmp	r0, #0
   14efc:	subne	r5, r0, r4
   14f00:	mov	r2, r5
   14f04:	mov	r0, r6
   14f08:	pop	{r4, r5, r6, lr}
   14f0c:	b	14dec <flatcc_builder_append_string@@Base>

00014f10 <flatcc_builder_truncate_vector@@Base>:
   14f10:	ldr	r3, [r0, #32]
   14f14:	push	{r4, lr}
   14f18:	ldrh	r2, [r3, #14]
   14f1c:	cmp	r2, #4
   14f20:	bne	14f64 <flatcc_builder_truncate_vector@@Base+0x54>
   14f24:	ldr	ip, [r3, #20]
   14f28:	cmp	ip, r1
   14f2c:	bcc	14f88 <flatcc_builder_truncate_vector@@Base+0x78>
   14f30:	ldr	r2, [r3, #16]
   14f34:	sub	ip, ip, r1
   14f38:	str	ip, [r3, #20]
   14f3c:	mul	r2, r2, r1
   14f40:	ldr	r3, [r0, #20]
   14f44:	ldr	r1, [r0, #16]
   14f48:	sub	r3, r3, r2
   14f4c:	str	r3, [r0, #20]
   14f50:	add	r0, r1, r3
   14f54:	mov	r1, #0
   14f58:	bl	11fd8 <memset@plt>
   14f5c:	mov	r0, #0
   14f60:	pop	{r4, pc}
   14f64:	ldr	r3, [pc, #64]	; 14fac <flatcc_builder_truncate_vector@@Base+0x9c>
   14f68:	ldr	r1, [pc, #64]	; 14fb0 <flatcc_builder_truncate_vector@@Base+0xa0>
   14f6c:	ldr	r0, [pc, #64]	; 14fb4 <flatcc_builder_truncate_vector@@Base+0xa4>
   14f70:	add	r3, pc, r3
   14f74:	ldr	r2, [pc, #60]	; 14fb8 <flatcc_builder_truncate_vector@@Base+0xa8>
   14f78:	add	r3, r3, #520	; 0x208
   14f7c:	add	r1, pc, r1
   14f80:	add	r0, pc, r0
   14f84:	bl	11ffc <__assert_fail@plt>
   14f88:	ldr	r3, [pc, #44]	; 14fbc <flatcc_builder_truncate_vector@@Base+0xac>
   14f8c:	ldr	r1, [pc, #44]	; 14fc0 <flatcc_builder_truncate_vector@@Base+0xb0>
   14f90:	ldr	r0, [pc, #44]	; 14fc4 <flatcc_builder_truncate_vector@@Base+0xb4>
   14f94:	add	r3, pc, r3
   14f98:	ldr	r2, [pc, #40]	; 14fc8 <flatcc_builder_truncate_vector@@Base+0xb8>
   14f9c:	add	r3, r3, #520	; 0x208
   14fa0:	add	r1, pc, r1
   14fa4:	add	r0, pc, r0
   14fa8:	bl	11ffc <__assert_fail@plt>
   14fac:	andeq	r3, r0, ip, lsl r2
   14fb0:	andeq	r3, r0, r0, ror #18
   14fb4:	andeq	r3, r0, ip, lsr #21
   14fb8:	ldrdeq	r0, [r0], -r9
   14fbc:	strdeq	r3, [r0], -r8
   14fc0:	andeq	r3, r0, ip, lsr r9
   14fc4:	andeq	r3, r0, r4, asr fp
   14fc8:	ldrdeq	r0, [r0], -sl

00014fcc <flatcc_builder_truncate_offset_vector@@Base>:
   14fcc:	ldr	r3, [r0, #32]
   14fd0:	push	{r4, lr}
   14fd4:	ldrh	r2, [r3, #14]
   14fd8:	cmp	r2, #5
   14fdc:	bne	15020 <flatcc_builder_truncate_offset_vector@@Base+0x54>
   14fe0:	ldr	ip, [r3, #20]
   14fe4:	cmp	ip, r1
   14fe8:	bcc	15044 <flatcc_builder_truncate_offset_vector@@Base+0x78>
   14fec:	ldr	r2, [r3, #16]
   14ff0:	sub	ip, ip, r1
   14ff4:	str	ip, [r3, #20]
   14ff8:	mul	r2, r2, r1
   14ffc:	ldr	r3, [r0, #20]
   15000:	ldr	r1, [r0, #16]
   15004:	sub	r3, r3, r2
   15008:	str	r3, [r0, #20]
   1500c:	add	r0, r1, r3
   15010:	mov	r1, #0
   15014:	bl	11fd8 <memset@plt>
   15018:	mov	r0, #0
   1501c:	pop	{r4, pc}
   15020:	ldr	r3, [pc, #64]	; 15068 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   15024:	ldr	r1, [pc, #64]	; 1506c <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   15028:	ldr	r0, [pc, #64]	; 15070 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   1502c:	add	r3, pc, r3
   15030:	ldr	r2, [pc, #60]	; 15074 <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   15034:	add	r3, r3, #552	; 0x228
   15038:	add	r1, pc, r1
   1503c:	add	r0, pc, r0
   15040:	bl	11ffc <__assert_fail@plt>
   15044:	ldr	r3, [pc, #44]	; 15078 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   15048:	ldr	r1, [pc, #44]	; 1507c <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   1504c:	ldr	r0, [pc, #44]	; 15080 <flatcc_builder_truncate_offset_vector@@Base+0xb4>
   15050:	add	r3, pc, r3
   15054:	ldr	r2, [pc, #40]	; 15084 <flatcc_builder_truncate_offset_vector@@Base+0xb8>
   15058:	add	r3, r3, #552	; 0x228
   1505c:	add	r1, pc, r1
   15060:	add	r0, pc, r0
   15064:	bl	11ffc <__assert_fail@plt>
   15068:	andeq	r3, r0, r0, ror #2
   1506c:	andeq	r3, r0, r4, lsr #17
   15070:	andeq	r3, r0, ip, asr sl
   15074:	andeq	r0, r0, r2, ror #7
   15078:	andeq	r3, r0, ip, lsr r1
   1507c:	andeq	r3, r0, r0, lsl #17
   15080:			; <UNDEFINED> instruction: 0x00003abc
   15084:	andeq	r0, r0, r3, ror #7

00015088 <flatcc_builder_truncate_string@@Base>:
   15088:	ldr	r2, [r0, #32]
   1508c:	push	{r4, lr}
   15090:	ldrh	r3, [r2, #14]
   15094:	cmp	r3, #6
   15098:	bne	150d8 <flatcc_builder_truncate_string@@Base+0x50>
   1509c:	ldr	r3, [r2, #20]
   150a0:	cmp	r3, r1
   150a4:	bcc	150fc <flatcc_builder_truncate_string@@Base+0x74>
   150a8:	sub	r3, r3, r1
   150ac:	str	r3, [r2, #20]
   150b0:	ldr	r3, [r0, #20]
   150b4:	ldr	r2, [r0, #16]
   150b8:	sub	r3, r3, r1
   150bc:	str	r3, [r0, #20]
   150c0:	add	r0, r2, r3
   150c4:	mov	r2, r1
   150c8:	mov	r1, #0
   150cc:	bl	11fd8 <memset@plt>
   150d0:	mov	r0, #0
   150d4:	pop	{r4, pc}
   150d8:	ldr	r3, [pc, #64]	; 15120 <flatcc_builder_truncate_string@@Base+0x98>
   150dc:	ldr	r1, [pc, #64]	; 15124 <flatcc_builder_truncate_string@@Base+0x9c>
   150e0:	ldr	r0, [pc, #64]	; 15128 <flatcc_builder_truncate_string@@Base+0xa0>
   150e4:	add	r3, pc, r3
   150e8:	ldr	r2, [pc, #60]	; 1512c <flatcc_builder_truncate_string@@Base+0xa4>
   150ec:	add	r3, r3, #592	; 0x250
   150f0:	add	r1, pc, r1
   150f4:	add	r0, pc, r0
   150f8:	bl	11ffc <__assert_fail@plt>
   150fc:	ldr	r3, [pc, #44]	; 15130 <flatcc_builder_truncate_string@@Base+0xa8>
   15100:	ldr	r1, [pc, #44]	; 15134 <flatcc_builder_truncate_string@@Base+0xac>
   15104:	ldr	r0, [pc, #44]	; 15138 <flatcc_builder_truncate_string@@Base+0xb0>
   15108:	add	r3, pc, r3
   1510c:	mov	r2, #1004	; 0x3ec
   15110:	add	r3, r3, #592	; 0x250
   15114:	add	r1, pc, r1
   15118:	add	r0, pc, r0
   1511c:	bl	11ffc <__assert_fail@plt>
   15120:	andeq	r3, r0, r8, lsr #1
   15124:	andeq	r3, r0, ip, ror #15
   15128:	ldrdeq	r3, [r0], -r8
   1512c:	andeq	r0, r0, fp, ror #7
   15130:	andeq	r3, r0, r4, lsl #1
   15134:	andeq	r3, r0, r8, asr #15
   15138:	andeq	r3, r0, r0, asr #20

0001513c <flatcc_builder_start_vector@@Base>:
   1513c:	cmp	r2, #4
   15140:	push	{r4, r5, r6, lr}
   15144:	mov	r6, r1
   15148:	movcs	r1, r2
   1514c:	movcc	r1, #4
   15150:	mov	r5, r3
   15154:	mov	r4, r0
   15158:	bl	13824 <flatcc_builder_default_alloc@@Base+0x23c>
   1515c:	cmp	r0, #0
   15160:	bne	151ac <flatcc_builder_start_vector@@Base+0x70>
   15164:	ldr	r2, [r4, #32]
   15168:	mov	lr, #4
   1516c:	str	r6, [r2, #16]
   15170:	str	r0, [r2, #20]
   15174:	str	r5, [r2, #24]
   15178:	ldr	ip, [r4, #28]
   1517c:	ldr	r3, [r4, #64]	; 0x40
   15180:	ldr	r1, [r4, #60]	; 0x3c
   15184:	sub	r3, r3, ip
   15188:	cmn	r3, #4
   1518c:	mvnhi	r3, #3
   15190:	strh	lr, [r2, #14]
   15194:	add	r1, r1, ip
   15198:	str	r3, [r4, #24]
   1519c:	mvn	r3, #3
   151a0:	str	r1, [r4, #16]
   151a4:	str	r3, [r2, #4]
   151a8:	pop	{r4, r5, r6, pc}
   151ac:	mvn	r0, #0
   151b0:	pop	{r4, r5, r6, pc}

000151b4 <flatcc_builder_start_offset_vector@@Base>:
   151b4:	push	{r4, lr}
   151b8:	mov	r1, #4
   151bc:	mov	r4, r0
   151c0:	bl	13824 <flatcc_builder_default_alloc@@Base+0x23c>
   151c4:	cmp	r0, #0
   151c8:	bne	15214 <flatcc_builder_start_offset_vector@@Base+0x60>
   151cc:	ldr	r3, [r4, #32]
   151d0:	mov	r2, #4
   151d4:	mov	lr, #5
   151d8:	str	r0, [r3, #20]
   151dc:	str	r2, [r3, #16]
   151e0:	ldr	ip, [r4, #28]
   151e4:	ldr	r2, [r4, #64]	; 0x40
   151e8:	ldr	r1, [r4, #60]	; 0x3c
   151ec:	sub	r2, r2, ip
   151f0:	cmn	r2, #4
   151f4:	mvnhi	r2, #3
   151f8:	strh	lr, [r3, #14]
   151fc:	add	r1, r1, ip
   15200:	str	r2, [r4, #24]
   15204:	mvn	r2, #3
   15208:	str	r1, [r4, #16]
   1520c:	str	r2, [r3, #4]
   15210:	pop	{r4, pc}
   15214:	mvn	r0, #0
   15218:	pop	{r4, pc}

0001521c <flatcc_builder_start_string@@Base>:
   1521c:	push	{r4, lr}
   15220:	mov	r1, #1
   15224:	mov	r4, r0
   15228:	bl	13824 <flatcc_builder_default_alloc@@Base+0x23c>
   1522c:	cmp	r0, #0
   15230:	bne	1527c <flatcc_builder_start_string@@Base+0x60>
   15234:	ldr	r3, [r4, #32]
   15238:	mov	r2, #1
   1523c:	mov	lr, #6
   15240:	str	r0, [r3, #20]
   15244:	str	r2, [r3, #16]
   15248:	ldr	ip, [r4, #28]
   1524c:	ldr	r2, [r4, #64]	; 0x40
   15250:	ldr	r1, [r4, #60]	; 0x3c
   15254:	sub	r2, r2, ip
   15258:	cmn	r2, #4
   1525c:	mvnhi	r2, #3
   15260:	strh	lr, [r3, #14]
   15264:	add	r1, r1, ip
   15268:	str	r2, [r4, #24]
   1526c:	mvn	r2, #3
   15270:	str	r1, [r4, #16]
   15274:	str	r2, [r3, #4]
   15278:	pop	{r4, pc}
   1527c:	mvn	r0, #0
   15280:	pop	{r4, pc}

00015284 <flatcc_builder_reserve_table@@Base>:
   15284:	cmp	r1, #0
   15288:	push	{r4, r5, r6, r7, lr}
   1528c:	sub	sp, sp, #12
   15290:	blt	15368 <flatcc_builder_reserve_table@@Base+0xe4>
   15294:	ldr	r2, [r0, #32]
   15298:	add	r1, r1, #2
   1529c:	mov	r5, r0
   152a0:	ldrh	r6, [r2, #28]
   152a4:	ldr	r3, [r2, #16]
   152a8:	ldr	r0, [r0, #56]	; 0x38
   152ac:	lsl	r4, r1, #1
   152b0:	add	r6, r3, r6, lsl #1
   152b4:	add	r2, r6, r4
   152b8:	cmp	r2, r0
   152bc:	bhi	15318 <flatcc_builder_reserve_table@@Base+0x94>
   152c0:	ldr	r3, [r5, #52]	; 0x34
   152c4:	adds	r3, r3, r6
   152c8:	streq	r3, [r5, #4]
   152cc:	mvneq	r0, #0
   152d0:	beq	15310 <flatcc_builder_reserve_table@@Base+0x8c>
   152d4:	ldr	r2, [r5, #32]
   152d8:	add	r3, r3, #4
   152dc:	str	r3, [r5, #4]
   152e0:	ldr	r6, [r2, #20]
   152e4:	ldr	r3, [r5, #80]	; 0x50
   152e8:	add	r2, r4, r6
   152ec:	sub	r2, r2, #3
   152f0:	cmp	r2, r3
   152f4:	bhi	15340 <flatcc_builder_reserve_table@@Base+0xbc>
   152f8:	ldr	r3, [r5, #76]	; 0x4c
   152fc:	add	r3, r3, r6
   15300:	cmp	r3, #0
   15304:	movne	r0, #0
   15308:	mvneq	r0, #0
   1530c:	str	r3, [r5]
   15310:	add	sp, sp, #12
   15314:	pop	{r4, r5, r6, r7, pc}
   15318:	mov	r3, #0
   1531c:	ldr	r0, [r5, #40]	; 0x28
   15320:	add	r1, r5, #52	; 0x34
   15324:	str	r3, [sp]
   15328:	mov	r3, #1
   1532c:	ldr	r7, [r5, #48]	; 0x30
   15330:	blx	r7
   15334:	cmp	r0, #0
   15338:	beq	152c0 <flatcc_builder_reserve_table@@Base+0x3c>
   1533c:	bl	120a0 <__assert_fail@plt+0xa4>
   15340:	mov	r3, #3
   15344:	ldr	r0, [r5, #40]	; 0x28
   15348:	add	r1, r5, #76	; 0x4c
   1534c:	str	r3, [sp]
   15350:	mov	r3, #0
   15354:	ldr	r4, [r5, #48]	; 0x30
   15358:	blx	r4
   1535c:	cmp	r0, #0
   15360:	beq	152f8 <flatcc_builder_reserve_table@@Base+0x74>
   15364:	b	1533c <flatcc_builder_reserve_table@@Base+0xb8>
   15368:	ldr	r3, [pc, #28]	; 1538c <flatcc_builder_reserve_table@@Base+0x108>
   1536c:	ldr	r1, [pc, #28]	; 15390 <flatcc_builder_reserve_table@@Base+0x10c>
   15370:	ldr	r0, [pc, #28]	; 15394 <flatcc_builder_reserve_table@@Base+0x110>
   15374:	add	r3, pc, r3
   15378:	ldr	r2, [pc, #24]	; 15398 <flatcc_builder_reserve_table@@Base+0x114>
   1537c:	add	r3, r3, #624	; 0x270
   15380:	add	r1, pc, r1
   15384:	add	r0, pc, r0
   15388:	bl	11ffc <__assert_fail@plt>
   1538c:	andeq	r2, r0, r8, lsl lr
   15390:	andeq	r3, r0, ip, asr r5
   15394:	strdeq	r3, [r0], -r8
   15398:	andeq	r0, r0, r9, lsr #8

0001539c <flatcc_builder_start_table@@Base>:
   1539c:	push	{r4, r5, r6, r7, r8, lr}
   153a0:	mov	r5, r1
   153a4:	sub	sp, sp, #8
   153a8:	mov	r1, #4
   153ac:	mov	r4, r0
   153b0:	bl	13824 <flatcc_builder_default_alloc@@Base+0x23c>
   153b4:	subs	r7, r0, #0
   153b8:	bne	154f0 <flatcc_builder_start_table@@Base+0x154>
   153bc:	ldr	r3, [r4, #52]	; 0x34
   153c0:	ldr	r6, [r4, #4]
   153c4:	ldr	r0, [r4, #32]
   153c8:	sub	r6, r6, r3
   153cc:	add	r5, r5, #2
   153d0:	str	r6, [r0, #16]
   153d4:	ldr	r1, [r4, #76]	; 0x4c
   153d8:	ldr	r2, [r4]
   153dc:	lsl	r5, r5, #1
   153e0:	sub	r2, r2, r1
   153e4:	str	r2, [r0, #20]
   153e8:	ldr	r2, [r4, #12]
   153ec:	ldr	lr, [pc, #268]	; 15500 <flatcc_builder_start_table@@Base+0x164>
   153f0:	str	r2, [r0, #24]
   153f4:	ldrh	r2, [r4, #8]
   153f8:	mov	r1, #3
   153fc:	strh	r2, [r0, #28]
   15400:	add	r6, r6, r2, lsl #1
   15404:	ldr	ip, [r4, #56]	; 0x38
   15408:	add	r2, r6, r5
   1540c:	cmp	r2, ip
   15410:	strh	r7, [r4, #8]
   15414:	str	lr, [r4, #12]
   15418:	strh	r1, [r0, #14]
   1541c:	bhi	154a0 <flatcc_builder_start_table@@Base+0x104>
   15420:	adds	r6, r3, r6
   15424:	streq	r6, [r4, #4]
   15428:	beq	154f0 <flatcc_builder_start_table@@Base+0x154>
   1542c:	ldr	r3, [r4, #32]
   15430:	add	r6, r6, #4
   15434:	str	r6, [r4, #4]
   15438:	ldr	r6, [r3, #20]
   1543c:	sub	r2, r5, #3
   15440:	ldr	r3, [r4, #80]	; 0x50
   15444:	add	r2, r2, r6
   15448:	cmp	r2, r3
   1544c:	bhi	154c8 <flatcc_builder_start_table@@Base+0x12c>
   15450:	ldr	r3, [r4, #76]	; 0x4c
   15454:	add	r3, r3, r6
   15458:	cmp	r3, #0
   1545c:	str	r3, [r4]
   15460:	beq	154f0 <flatcc_builder_start_table@@Base+0x154>
   15464:	ldr	r0, [r4, #28]
   15468:	ldr	r3, [r4, #64]	; 0x40
   1546c:	ldr	r2, [pc, #144]	; 15504 <flatcc_builder_start_table@@Base+0x168>
   15470:	sub	r3, r3, r0
   15474:	ldr	r1, [r4, #60]	; 0x3c
   15478:	ldr	ip, [r4, #32]
   1547c:	cmp	r3, r2
   15480:	add	r1, r1, r0
   15484:	movcs	r3, r2
   15488:	str	r1, [r4, #16]
   1548c:	str	r3, [r4, #24]
   15490:	mov	r0, r7
   15494:	str	r2, [ip, #4]
   15498:	add	sp, sp, #8
   1549c:	pop	{r4, r5, r6, r7, r8, pc}
   154a0:	ldr	r0, [r4, #40]	; 0x28
   154a4:	mov	r3, #1
   154a8:	str	r7, [sp]
   154ac:	add	r1, r4, #52	; 0x34
   154b0:	ldr	r8, [r4, #48]	; 0x30
   154b4:	blx	r8
   154b8:	cmp	r0, #0
   154bc:	bne	154ec <flatcc_builder_start_table@@Base+0x150>
   154c0:	ldr	r3, [r4, #52]	; 0x34
   154c4:	b	15420 <flatcc_builder_start_table@@Base+0x84>
   154c8:	mov	r3, #3
   154cc:	ldr	r0, [r4, #40]	; 0x28
   154d0:	add	r1, r4, #76	; 0x4c
   154d4:	str	r3, [sp]
   154d8:	mov	r3, #0
   154dc:	ldr	r5, [r4, #48]	; 0x30
   154e0:	blx	r5
   154e4:	cmp	r0, #0
   154e8:	beq	15450 <flatcc_builder_start_table@@Base+0xb4>
   154ec:	bl	120a0 <__assert_fail@plt+0xa4>
   154f0:	mvn	r7, #0
   154f4:	mov	r0, r7
   154f8:	add	sp, sp, #8
   154fc:	pop	{r4, r5, r6, r7, r8, pc}
   15500:	svccs	0x00693b52
   15504:	strdeq	pc, [r0], -ip

00015508 <flatcc_builder_create_vtable@@Base>:
   15508:	push	{r4, r5, r6, lr}
   1550c:	sub	sp, sp, #80	; 0x50
   15510:	subs	r3, r2, #0
   15514:	mov	r2, #0
   15518:	mov	r4, r0
   1551c:	str	r2, [sp, #8]
   15520:	str	r2, [sp, #12]
   15524:	beq	1559c <flatcc_builder_create_vtable@@Base+0x94>
   15528:	ldr	r0, [r0, #152]	; 0x98
   1552c:	mov	r2, #1
   15530:	cmp	r0, #0
   15534:	str	r1, [sp, #16]
   15538:	str	r3, [sp, #8]
   1553c:	str	r3, [sp, #20]
   15540:	str	r2, [sp, #12]
   15544:	mov	r1, r3
   15548:	beq	155b8 <flatcc_builder_create_vtable@@Base+0xb0>
   1554c:	ldr	r2, [r4, #136]	; 0x88
   15550:	sub	r5, r2, r3
   15554:	cmp	r2, r5
   15558:	ble	155b4 <flatcc_builder_create_vtable@@Base+0xac>
   1555c:	ldr	r0, [r4, #36]	; 0x24
   15560:	ldr	r2, [sp, #12]
   15564:	str	r3, [sp]
   15568:	add	r1, sp, #16
   1556c:	ldr	r6, [r4, #44]	; 0x2c
   15570:	mov	r3, r5
   15574:	blx	r6
   15578:	cmp	r0, #0
   1557c:	bne	1562c <flatcc_builder_create_vtable@@Base+0x124>
   15580:	cmp	r5, #0
   15584:	str	r5, [r4, #136]	; 0x88
   15588:	beq	15590 <flatcc_builder_create_vtable@@Base+0x88>
   1558c:	add	r5, r5, #1
   15590:	mov	r0, r5
   15594:	add	sp, sp, #80	; 0x50
   15598:	pop	{r4, r5, r6, pc}
   1559c:	ldr	r3, [r0, #152]	; 0x98
   155a0:	cmp	r3, #0
   155a4:	bne	155b4 <flatcc_builder_create_vtable@@Base+0xac>
   155a8:	ldr	r3, [r0, #180]	; 0xb4
   155ac:	cmp	r3, #0
   155b0:	beq	15620 <flatcc_builder_create_vtable@@Base+0x118>
   155b4:	bl	12108 <__assert_fail@plt+0x10c>
   155b8:	ldr	r2, [r4, #180]	; 0xb4
   155bc:	cmp	r2, #0
   155c0:	bne	1554c <flatcc_builder_create_vtable@@Base+0x44>
   155c4:	ldr	r5, [r4, #140]	; 0x8c
   155c8:	add	r3, r5, r3
   155cc:	cmp	r5, r3
   155d0:	str	r3, [r4, #140]	; 0x8c
   155d4:	bgt	15650 <flatcc_builder_create_vtable@@Base+0x148>
   155d8:	ldr	r0, [r4, #36]	; 0x24
   155dc:	ldr	r2, [sp, #12]
   155e0:	str	r1, [sp]
   155e4:	mov	r3, r5
   155e8:	ldr	r4, [r4, #44]	; 0x2c
   155ec:	add	r1, sp, #16
   155f0:	blx	r4
   155f4:	cmp	r0, #0
   155f8:	beq	1558c <flatcc_builder_create_vtable@@Base+0x84>
   155fc:	ldr	r3, [pc, #80]	; 15654 <flatcc_builder_create_vtable@@Base+0x14c>
   15600:	ldr	r1, [pc, #80]	; 15658 <flatcc_builder_create_vtable@@Base+0x150>
   15604:	ldr	r0, [pc, #80]	; 1565c <flatcc_builder_create_vtable@@Base+0x154>
   15608:	add	r3, pc, r3
   1560c:	ldr	r2, [pc, #76]	; 15660 <flatcc_builder_create_vtable@@Base+0x158>
   15610:	add	r3, r3, #16
   15614:	add	r1, pc, r1
   15618:	add	r0, pc, r0
   1561c:	bl	11ffc <__assert_fail@plt>
   15620:	ldr	r5, [r4, #140]	; 0x8c
   15624:	mov	r1, r3
   15628:	b	155d8 <flatcc_builder_create_vtable@@Base+0xd0>
   1562c:	ldr	r3, [pc, #48]	; 15664 <flatcc_builder_create_vtable@@Base+0x15c>
   15630:	ldr	r1, [pc, #48]	; 15668 <flatcc_builder_create_vtable@@Base+0x160>
   15634:	ldr	r0, [pc, #48]	; 1566c <flatcc_builder_create_vtable@@Base+0x164>
   15638:	add	r3, pc, r3
   1563c:	ldr	r2, [pc, #44]	; 15670 <flatcc_builder_create_vtable@@Base+0x168>
   15640:	add	r3, r3, #28
   15644:	add	r1, pc, r1
   15648:	add	r0, pc, r0
   1564c:	bl	11ffc <__assert_fail@plt>
   15650:	bl	120d0 <__assert_fail@plt+0xd4>
   15654:	andeq	r2, r0, r4, lsl #23
   15658:	andeq	r3, r0, r8, asr #5
   1565c:	andeq	r3, r0, ip, asr #6
   15660:	andeq	r0, r0, r5, lsr #5
   15664:	andeq	r2, r0, r4, asr fp
   15668:	muleq	r0, r8, r2
   1566c:	andeq	r3, r0, ip, lsl r3
   15670:	andeq	r0, r0, fp, lsl #5

00015674 <flatcc_builder_create_cached_vtable@@Base>:
   15674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15678:	sub	sp, sp, #28
   1567c:	ldr	r4, [r0, #116]	; 0x74
   15680:	mov	sl, r3
   15684:	cmp	r4, #0
   15688:	mov	r8, r0
   1568c:	str	r1, [sp, #8]
   15690:	mov	r7, r2
   15694:	rsbne	r3, r4, #32
   15698:	beq	157f0 <flatcc_builder_create_cached_vtable@@Base+0x17c>
   1569c:	lsr	sl, sl, r3
   156a0:	ldr	r3, [r8, #92]	; 0x5c
   156a4:	adds	r2, r3, sl, lsl #2
   156a8:	str	r3, [sp, #16]
   156ac:	str	r2, [sp, #20]
   156b0:	beq	157e4 <flatcc_builder_create_cached_vtable@@Base+0x170>
   156b4:	ldr	r5, [r3, sl, lsl #2]
   156b8:	cmp	r5, #0
   156bc:	beq	158e0 <flatcc_builder_create_cached_vtable@@Base+0x26c>
   156c0:	mov	r3, #0
   156c4:	ldr	fp, [r8, #100]	; 0x64
   156c8:	ldr	r6, [r8, #68]	; 0x44
   156cc:	mov	r9, r2
   156d0:	str	r3, [sp, #12]
   156d4:	b	156e8 <flatcc_builder_create_cached_vtable@@Base+0x74>
   156d8:	ldr	r5, [r4, #12]
   156dc:	add	r9, r4, #12
   156e0:	cmp	r5, #0
   156e4:	beq	15738 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   156e8:	add	r4, fp, r5
   156ec:	ldr	r2, [r4, #8]
   156f0:	add	r1, r6, r2
   156f4:	ldrh	r2, [r6, r2]
   156f8:	cmp	r2, r7
   156fc:	bne	156d8 <flatcc_builder_create_cached_vtable@@Base+0x64>
   15700:	mov	r2, r7
   15704:	ldr	r0, [sp, #8]
   15708:	bl	11f78 <memcmp@plt>
   1570c:	cmp	r0, #0
   15710:	bne	156d8 <flatcc_builder_create_cached_vtable@@Base+0x64>
   15714:	ldr	r1, [r4, #4]
   15718:	ldr	r2, [r8, #152]	; 0x98
   1571c:	cmp	r1, r2
   15720:	beq	157b4 <flatcc_builder_create_cached_vtable@@Base+0x140>
   15724:	ldr	r5, [r4, #12]
   15728:	add	r9, r4, #12
   1572c:	cmp	r5, #0
   15730:	str	r4, [sp, #12]
   15734:	bne	156e8 <flatcc_builder_create_cached_vtable@@Base+0x74>
   15738:	ldr	r4, [r8, #124]	; 0x7c
   1573c:	ldr	r3, [r8, #104]	; 0x68
   15740:	add	r2, r4, #16
   15744:	cmp	r2, r3
   15748:	bhi	158b8 <flatcc_builder_create_cached_vtable@@Base+0x244>
   1574c:	ldr	r5, [r8, #100]	; 0x64
   15750:	adds	r6, r5, r4
   15754:	beq	157e4 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15758:	ldr	r3, [r8, #124]	; 0x7c
   1575c:	ldr	r0, [sp, #16]
   15760:	ldr	r2, [r8, #152]	; 0x98
   15764:	add	r1, r3, #16
   15768:	str	r1, [r8, #124]	; 0x7c
   1576c:	str	r2, [r6, #4]
   15770:	ldr	r1, [r0, sl, lsl #2]
   15774:	mov	r2, r7
   15778:	str	r1, [r6, #12]
   1577c:	str	r3, [r0, sl, lsl #2]
   15780:	ldr	r1, [sp, #8]
   15784:	mov	r0, r8
   15788:	bl	15508 <flatcc_builder_create_vtable@@Base>
   1578c:	cmp	r0, #0
   15790:	str	r0, [r5, r4]
   15794:	beq	157e4 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15798:	ldr	r3, [sp, #12]
   1579c:	cmp	r3, #0
   157a0:	beq	158e8 <flatcc_builder_create_cached_vtable@@Base+0x274>
   157a4:	ldr	r3, [r3, #8]
   157a8:	str	r3, [r6, #8]
   157ac:	add	sp, sp, #28
   157b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157b4:	ldr	r3, [sp, #20]
   157b8:	cmp	r3, r9
   157bc:	beq	157d8 <flatcc_builder_create_cached_vtable@@Base+0x164>
   157c0:	ldr	r2, [sp, #16]
   157c4:	ldr	r3, [r4, #12]
   157c8:	str	r3, [r9]
   157cc:	ldr	r3, [r2, sl, lsl #2]
   157d0:	str	r3, [r4, #12]
   157d4:	str	r5, [r2, sl, lsl #2]
   157d8:	ldr	r0, [r4]
   157dc:	add	sp, sp, #28
   157e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157e4:	mov	r0, #0
   157e8:	add	sp, sp, #28
   157ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157f0:	ldr	r3, [r0, #124]	; 0x7c
   157f4:	add	r5, r0, #92	; 0x5c
   157f8:	cmp	r3, #0
   157fc:	bne	15980 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   15800:	ldr	r3, [r0, #104]	; 0x68
   15804:	cmp	r3, #15
   15808:	bls	1588c <flatcc_builder_create_cached_vtable@@Base+0x218>
   1580c:	ldr	r3, [r8, #100]	; 0x64
   15810:	cmp	r3, #0
   15814:	beq	157e4 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15818:	mov	r2, #16
   1581c:	mov	r3, #5
   15820:	str	r2, [r8, #124]	; 0x7c
   15824:	ldr	r0, [r8, #40]	; 0x28
   15828:	mov	r1, r5
   1582c:	str	r3, [sp]
   15830:	mov	r2, #256	; 0x100
   15834:	ldr	r5, [r8, #48]	; 0x30
   15838:	mov	r3, #1
   1583c:	blx	r5
   15840:	cmp	r0, #0
   15844:	bne	157e4 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15848:	ldr	r1, [r8, #96]	; 0x60
   1584c:	mov	r3, #256	; 0x100
   15850:	b	15858 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15854:	mov	r3, r2
   15858:	lsl	r2, r3, #1
   1585c:	cmp	r2, r1
   15860:	bls	15854 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   15864:	lsr	r3, r3, #2
   15868:	cmp	r3, #1
   1586c:	bls	15940 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   15870:	mov	r2, #1
   15874:	add	r4, r4, #1
   15878:	cmp	r3, r2, lsl r4
   1587c:	bhi	15874 <flatcc_builder_create_cached_vtable@@Base+0x200>
   15880:	rsb	r3, r4, #32
   15884:	str	r4, [r8, #116]	; 0x74
   15888:	b	1569c <flatcc_builder_create_cached_vtable@@Base+0x28>
   1588c:	mov	r3, #6
   15890:	ldr	r0, [r0, #40]	; 0x28
   15894:	mov	r2, #16
   15898:	str	r3, [sp]
   1589c:	add	r1, r8, #100	; 0x64
   158a0:	ldr	r6, [r8, #48]	; 0x30
   158a4:	mov	r3, r4
   158a8:	blx	r6
   158ac:	cmp	r0, #0
   158b0:	beq	1580c <flatcc_builder_create_cached_vtable@@Base+0x198>
   158b4:	b	1596c <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   158b8:	mov	r3, #6
   158bc:	ldr	r0, [r8, #40]	; 0x28
   158c0:	add	r1, r8, #100	; 0x64
   158c4:	str	r3, [sp]
   158c8:	mov	r3, #0
   158cc:	ldr	r5, [r8, #48]	; 0x30
   158d0:	blx	r5
   158d4:	cmp	r0, #0
   158d8:	beq	1574c <flatcc_builder_create_cached_vtable@@Base+0xd8>
   158dc:	b	1596c <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   158e0:	str	r5, [sp, #12]
   158e4:	b	15738 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   158e8:	ldr	r3, [r8, #172]	; 0xac
   158ec:	ldr	r9, [r8, #120]	; 0x78
   158f0:	cmp	r3, #0
   158f4:	add	r2, r9, r7
   158f8:	beq	15904 <flatcc_builder_create_cached_vtable@@Base+0x290>
   158fc:	cmp	r3, r2
   15900:	bcc	15970 <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   15904:	ldr	r3, [r8, #72]	; 0x48
   15908:	cmp	r3, r2
   1590c:	bcc	15948 <flatcc_builder_create_cached_vtable@@Base+0x2d4>
   15910:	ldr	r3, [r8, #68]	; 0x44
   15914:	adds	r0, r3, r9
   15918:	beq	159a4 <flatcc_builder_create_cached_vtable@@Base+0x330>
   1591c:	ldr	r3, [r8, #120]	; 0x78
   15920:	ldr	r1, [sp, #8]
   15924:	add	ip, r3, r7
   15928:	str	r3, [r6, #8]
   1592c:	mov	r2, r7
   15930:	str	ip, [r8, #120]	; 0x78
   15934:	bl	11f6c <memcpy@plt>
   15938:	ldr	r0, [r5, r4]
   1593c:	b	157ac <flatcc_builder_create_cached_vtable@@Base+0x138>
   15940:	mov	r3, #32
   15944:	b	15884 <flatcc_builder_create_cached_vtable@@Base+0x210>
   15948:	mov	r3, #2
   1594c:	ldr	r0, [r8, #40]	; 0x28
   15950:	add	r1, r8, #68	; 0x44
   15954:	str	r3, [sp]
   15958:	mov	r3, #0
   1595c:	ldr	sl, [r8, #48]	; 0x30
   15960:	blx	sl
   15964:	cmp	r0, #0
   15968:	beq	15910 <flatcc_builder_create_cached_vtable@@Base+0x29c>
   1596c:	bl	120a0 <__assert_fail@plt+0xa4>
   15970:	mov	r0, r8
   15974:	bl	13b68 <flatcc_builder_flush_vtable_cache@@Base>
   15978:	ldr	r0, [r5, r4]
   1597c:	b	157ac <flatcc_builder_create_cached_vtable@@Base+0x138>
   15980:	ldr	r3, [pc, #36]	; 159ac <flatcc_builder_create_cached_vtable@@Base+0x338>
   15984:	ldr	r1, [pc, #36]	; 159b0 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   15988:	ldr	r0, [pc, #36]	; 159b4 <flatcc_builder_create_cached_vtable@@Base+0x340>
   1598c:	add	r3, pc, r3
   15990:	ldr	r2, [pc, #32]	; 159b8 <flatcc_builder_create_cached_vtable@@Base+0x344>
   15994:	add	r3, r3, #656	; 0x290
   15998:	add	r1, pc, r1
   1599c:	add	r0, pc, r0
   159a0:	bl	11ffc <__assert_fail@plt>
   159a4:	mvn	r0, #0
   159a8:	b	157ac <flatcc_builder_create_cached_vtable@@Base+0x138>
   159ac:	andeq	r2, r0, r0, lsl #16
   159b0:	andeq	r2, r0, r4, asr #30
   159b4:	andeq	r3, r0, ip, ror #3
   159b8:	andeq	r0, r0, r6, asr r1

000159bc <flatcc_builder_create_table@@Base>:
   159bc:	push	{r4, r5, r6, r7, r8, lr}
   159c0:	sub	sp, sp, #88	; 0x58
   159c4:	ldr	r8, [pc, #436]	; 15b80 <flatcc_builder_create_table@@Base+0x1c4>
   159c8:	ldr	r4, [sp, #116]	; 0x74
   159cc:	add	r8, pc, r8
   159d0:	cmp	r4, #0
   159d4:	ldr	lr, [sp, #120]	; 0x78
   159d8:	blt	15b10 <flatcc_builder_create_table@@Base+0x154>
   159dc:	tst	lr, #1
   159e0:	beq	15b5c <flatcc_builder_create_table@@Base+0x1a0>
   159e4:	mov	r5, r0
   159e8:	ldrh	r0, [r0, #128]	; 0x80
   159ec:	cmp	r3, #4
   159f0:	movcc	r3, #4
   159f4:	ldr	ip, [r5, #136]	; 0x88
   159f8:	cmp	r0, r3
   159fc:	mvn	r0, #3
   15a00:	strhcc	r3, [r5, #128]	; 0x80
   15a04:	sub	r7, ip, r2
   15a08:	sub	r3, r3, #1
   15a0c:	sub	r0, r0, r2
   15a10:	and	r7, r7, r3
   15a14:	add	r0, r0, ip
   15a18:	sub	r3, lr, #1
   15a1c:	sub	r0, r0, r7
   15a20:	sub	r3, r0, r3
   15a24:	cmp	r4, #0
   15a28:	str	r3, [sp, #12]
   15a2c:	beq	15a60 <flatcc_builder_create_table@@Base+0xa4>
   15a30:	ldr	ip, [sp, #112]	; 0x70
   15a34:	mvn	r6, #3
   15a38:	add	r4, ip, r4, lsl #1
   15a3c:	sub	r6, r6, r0
   15a40:	ldrh	r3, [ip], #2
   15a44:	sub	lr, r6, r3
   15a48:	ldr	r0, [r1, r3]
   15a4c:	cmp	r4, ip
   15a50:	add	r0, r0, lr
   15a54:	str	r0, [r1, r3]
   15a58:	bne	15a40 <flatcc_builder_create_table@@Base+0x84>
   15a5c:	ldr	ip, [r5, #136]	; 0x88
   15a60:	mov	r3, #4
   15a64:	mov	lr, #1
   15a68:	add	r0, sp, #12
   15a6c:	cmp	r2, #0
   15a70:	str	r3, [sp, #16]
   15a74:	str	r3, [sp, #28]
   15a78:	str	r0, [sp, #24]
   15a7c:	str	lr, [sp, #20]
   15a80:	beq	15a9c <flatcc_builder_create_table@@Base+0xe0>
   15a84:	add	r3, r2, r3
   15a88:	mov	r0, #2
   15a8c:	str	r1, [sp, #32]
   15a90:	str	r2, [sp, #36]	; 0x24
   15a94:	str	r3, [sp, #16]
   15a98:	str	r0, [sp, #20]
   15a9c:	cmp	r7, #0
   15aa0:	beq	15ad0 <flatcc_builder_create_table@@Base+0x114>
   15aa4:	ldr	r2, [sp, #20]
   15aa8:	ldr	r1, [pc, #212]	; 15b84 <flatcc_builder_create_table@@Base+0x1c8>
   15aac:	add	r2, r2, #1
   15ab0:	add	r3, r3, r7
   15ab4:	str	r3, [sp, #16]
   15ab8:	ldr	r0, [r8, r1]
   15abc:	add	r1, sp, #88	; 0x58
   15ac0:	add	r1, r1, r2, lsl #3
   15ac4:	str	r2, [sp, #20]
   15ac8:	str	r0, [r1, #-72]	; 0xffffffb8
   15acc:	str	r7, [r1, #-68]	; 0xffffffbc
   15ad0:	sub	r4, ip, r3
   15ad4:	cmp	r4, ip
   15ad8:	bge	15b58 <flatcc_builder_create_table@@Base+0x19c>
   15adc:	ldr	r0, [r5, #36]	; 0x24
   15ae0:	ldr	r2, [sp, #20]
   15ae4:	str	r3, [sp]
   15ae8:	add	r1, sp, #24
   15aec:	ldr	r6, [r5, #44]	; 0x2c
   15af0:	mov	r3, r4
   15af4:	blx	r6
   15af8:	cmp	r0, #0
   15afc:	bne	15b34 <flatcc_builder_create_table@@Base+0x178>
   15b00:	mov	r0, r4
   15b04:	str	r4, [r5, #136]	; 0x88
   15b08:	add	sp, sp, #88	; 0x58
   15b0c:	pop	{r4, r5, r6, r7, r8, pc}
   15b10:	ldr	r3, [pc, #112]	; 15b88 <flatcc_builder_create_table@@Base+0x1cc>
   15b14:	ldr	r1, [pc, #112]	; 15b8c <flatcc_builder_create_table@@Base+0x1d0>
   15b18:	ldr	r0, [pc, #112]	; 15b90 <flatcc_builder_create_table@@Base+0x1d4>
   15b1c:	add	r3, pc, r3
   15b20:	ldr	r2, [pc, #108]	; 15b94 <flatcc_builder_create_table@@Base+0x1d8>
   15b24:	add	r3, r3, #668	; 0x29c
   15b28:	add	r1, pc, r1
   15b2c:	add	r0, pc, r0
   15b30:	bl	11ffc <__assert_fail@plt>
   15b34:	ldr	r3, [pc, #92]	; 15b98 <flatcc_builder_create_table@@Base+0x1dc>
   15b38:	ldr	r1, [pc, #92]	; 15b9c <flatcc_builder_create_table@@Base+0x1e0>
   15b3c:	ldr	r0, [pc, #92]	; 15ba0 <flatcc_builder_create_table@@Base+0x1e4>
   15b40:	add	r3, pc, r3
   15b44:	ldr	r2, [pc, #88]	; 15ba4 <flatcc_builder_create_table@@Base+0x1e8>
   15b48:	add	r3, r3, #28
   15b4c:	add	r1, pc, r1
   15b50:	add	r0, pc, r0
   15b54:	bl	11ffc <__assert_fail@plt>
   15b58:	bl	12108 <__assert_fail@plt+0x10c>
   15b5c:	ldr	r3, [pc, #68]	; 15ba8 <flatcc_builder_create_table@@Base+0x1ec>
   15b60:	ldr	r1, [pc, #68]	; 15bac <flatcc_builder_create_table@@Base+0x1f0>
   15b64:	ldr	r0, [pc, #68]	; 15bb0 <flatcc_builder_create_table@@Base+0x1f4>
   15b68:	add	r3, pc, r3
   15b6c:	ldr	r2, [pc, #64]	; 15bb4 <flatcc_builder_create_table@@Base+0x1f8>
   15b70:	add	r3, r3, #668	; 0x29c
   15b74:	add	r1, pc, r1
   15b78:	add	r0, pc, r0
   15b7c:	bl	11ffc <__assert_fail@plt>
   15b80:	andeq	r3, r1, ip, lsr #12
   15b84:	andeq	r0, r0, r8, asr #32
   15b88:	andeq	r2, r0, r0, ror r6
   15b8c:			; <UNDEFINED> instruction: 0x00002db4
   15b90:	andeq	r3, r0, ip, rrx
   15b94:	ldrdeq	r0, [r0], -r5
   15b98:	andeq	r2, r0, ip, asr #12
   15b9c:	muleq	r0, r0, sp
   15ba0:	andeq	r2, r0, r4, lsl lr
   15ba4:	andeq	r0, r0, fp, lsl #5
   15ba8:	andeq	r2, r0, r4, lsr #12
   15bac:	andeq	r2, r0, r8, ror #26
   15bb0:	andeq	r3, r0, r4, lsr r0
   15bb4:	ldrdeq	r0, [r0], -fp

00015bb8 <flatcc_builder_check_required_field@@Base>:
   15bb8:	ldr	r3, [r0, #32]
   15bbc:	ldrh	r3, [r3, #14]
   15bc0:	cmp	r3, #3
   15bc4:	bne	15bf0 <flatcc_builder_check_required_field@@Base+0x38>
   15bc8:	ldrh	r3, [r0, #8]
   15bcc:	cmp	r3, r1
   15bd0:	movls	r0, #0
   15bd4:	bls	15bec <flatcc_builder_check_required_field@@Base+0x34>
   15bd8:	ldr	r3, [r0, #4]
   15bdc:	lsl	r1, r1, #1
   15be0:	ldrh	r0, [r3, r1]
   15be4:	adds	r0, r0, #0
   15be8:	movne	r0, #1
   15bec:	bx	lr
   15bf0:	ldr	r3, [pc, #32]	; 15c18 <flatcc_builder_check_required_field@@Base+0x60>
   15bf4:	ldr	r1, [pc, #32]	; 15c1c <flatcc_builder_check_required_field@@Base+0x64>
   15bf8:	ldr	r0, [pc, #32]	; 15c20 <flatcc_builder_check_required_field@@Base+0x68>
   15bfc:	add	r3, pc, r3
   15c00:	push	{r4, lr}
   15c04:	add	r3, r3, #696	; 0x2b8
   15c08:	ldr	r2, [pc, #20]	; 15c24 <flatcc_builder_check_required_field@@Base+0x6c>
   15c0c:	add	r1, pc, r1
   15c10:	add	r0, pc, r0
   15c14:	bl	11ffc <__assert_fail@plt>
   15c18:	muleq	r0, r0, r5
   15c1c:	ldrdeq	r2, [r0], -r0
   15c20:	andeq	r2, r0, r8, lsr #31
   15c24:	strdeq	r0, [r0], -r8

00015c28 <flatcc_builder_check_union_field@@Base>:
   15c28:	ldr	r3, [r0, #32]
   15c2c:	ldrh	r3, [r3, #14]
   15c30:	cmp	r3, #3
   15c34:	bne	15cb0 <flatcc_builder_check_union_field@@Base+0x88>
   15c38:	cmp	r1, #0
   15c3c:	beq	15c88 <flatcc_builder_check_union_field@@Base+0x60>
   15c40:	ldrh	r3, [r0, #8]
   15c44:	cmp	r3, r1
   15c48:	bls	15c88 <flatcc_builder_check_union_field@@Base+0x60>
   15c4c:	sub	r1, r1, #-2147483647	; 0x80000001
   15c50:	ldr	r3, [r0, #4]
   15c54:	lsl	r1, r1, #1
   15c58:	ldrh	r2, [r3, r1]
   15c5c:	cmp	r2, #0
   15c60:	beq	15c9c <flatcc_builder_check_union_field@@Base+0x74>
   15c64:	ldr	r0, [r0, #16]
   15c68:	add	r1, r3, r1
   15c6c:	ldrb	r2, [r0, r2]
   15c70:	ldrh	r1, [r1, #2]
   15c74:	cmp	r2, #0
   15c78:	bne	15c90 <flatcc_builder_check_union_field@@Base+0x68>
   15c7c:	clz	r0, r1
   15c80:	lsr	r0, r0, #5
   15c84:	bx	lr
   15c88:	mov	r0, #0
   15c8c:	bx	lr
   15c90:	adds	r0, r1, #0
   15c94:	movne	r0, #1
   15c98:	b	15c8c <flatcc_builder_check_union_field@@Base+0x64>
   15c9c:	add	r1, r3, r1
   15ca0:	ldrh	r1, [r1, #2]
   15ca4:	clz	r0, r1
   15ca8:	lsr	r0, r0, #5
   15cac:	bx	lr
   15cb0:	ldr	r3, [pc, #32]	; 15cd8 <flatcc_builder_check_union_field@@Base+0xb0>
   15cb4:	ldr	r1, [pc, #32]	; 15cdc <flatcc_builder_check_union_field@@Base+0xb4>
   15cb8:	ldr	r0, [pc, #32]	; 15ce0 <flatcc_builder_check_union_field@@Base+0xb8>
   15cbc:	add	r3, pc, r3
   15cc0:	push	{r4, lr}
   15cc4:	add	r3, r3, #732	; 0x2dc
   15cc8:	ldr	r2, [pc, #20]	; 15ce4 <flatcc_builder_check_union_field@@Base+0xbc>
   15ccc:	add	r1, pc, r1
   15cd0:	add	r0, pc, r0
   15cd4:	bl	11ffc <__assert_fail@plt>
   15cd8:	ldrdeq	r2, [r0], -r0
   15cdc:	andeq	r2, r0, r0, lsl ip
   15ce0:	andeq	r2, r0, r8, ror #29
   15ce4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00015ce8 <flatcc_builder_check_required@@Base>:
   15ce8:	ldr	r3, [r0, #32]
   15cec:	ldrh	r3, [r3, #14]
   15cf0:	cmp	r3, #3
   15cf4:	bne	15d58 <flatcc_builder_check_required@@Base+0x70>
   15cf8:	ldrh	r3, [r0, #8]
   15cfc:	cmp	r3, r2
   15d00:	movlt	r0, #0
   15d04:	blt	15d54 <flatcc_builder_check_required@@Base+0x6c>
   15d08:	cmp	r2, #0
   15d0c:	ble	15d50 <flatcc_builder_check_required@@Base+0x68>
   15d10:	ldrh	r3, [r1]
   15d14:	ldr	ip, [r0, #4]
   15d18:	lsl	r3, r3, #1
   15d1c:	ldrh	r0, [ip, r3]
   15d20:	cmp	r0, #0
   15d24:	beq	15d54 <flatcc_builder_check_required@@Base+0x6c>
   15d28:	add	r2, r1, r2, lsl #1
   15d2c:	add	r1, r1, #2
   15d30:	b	15d48 <flatcc_builder_check_required@@Base+0x60>
   15d34:	ldrh	r3, [r1], #2
   15d38:	lsl	r3, r3, #1
   15d3c:	ldrh	r0, [ip, r3]
   15d40:	cmp	r0, #0
   15d44:	beq	15d54 <flatcc_builder_check_required@@Base+0x6c>
   15d48:	cmp	r1, r2
   15d4c:	bne	15d34 <flatcc_builder_check_required@@Base+0x4c>
   15d50:	mov	r0, #1
   15d54:	bx	lr
   15d58:	ldr	r3, [pc, #32]	; 15d80 <flatcc_builder_check_required@@Base+0x98>
   15d5c:	ldr	r1, [pc, #32]	; 15d84 <flatcc_builder_check_required@@Base+0x9c>
   15d60:	ldr	r0, [pc, #32]	; 15d88 <flatcc_builder_check_required@@Base+0xa0>
   15d64:	add	r3, pc, r3
   15d68:	push	{r4, lr}
   15d6c:	add	r3, r3, #768	; 0x300
   15d70:	ldr	r2, [pc, #20]	; 15d8c <flatcc_builder_check_required@@Base+0xa4>
   15d74:	add	r1, pc, r1
   15d78:	add	r0, pc, r0
   15d7c:	bl	11ffc <__assert_fail@plt>
   15d80:	andeq	r2, r0, r8, lsr #8
   15d84:	andeq	r2, r0, r8, ror #22
   15d88:	andeq	r2, r0, r0, asr #28
   15d8c:	andeq	r0, r0, r1, lsl r5

00015d90 <flatcc_builder_end_table@@Base>:
   15d90:	ldr	r3, [r0, #32]
   15d94:	push	{r4, r5, r6, r7, lr}
   15d98:	sub	sp, sp, #20
   15d9c:	ldrh	r3, [r3, #14]
   15da0:	cmp	r3, #3
   15da4:	bne	15f28 <flatcc_builder_end_table@@Base+0x198>
   15da8:	ldrh	r5, [r0, #8]
   15dac:	ldr	r3, [r0, #12]
   15db0:	ldr	r1, [pc, #404]	; 15f4c <flatcc_builder_end_table@@Base+0x1bc>
   15db4:	add	r5, r5, #2
   15db8:	ldr	r2, [r0, #20]
   15dbc:	lsl	r5, r5, #1
   15dc0:	add	r2, r2, #4
   15dc4:	uxth	r5, r5
   15dc8:	eor	r3, r3, r5
   15dcc:	uxth	r2, r2
   15dd0:	mul	r3, r1, r3
   15dd4:	ldr	ip, [r0, #4]
   15dd8:	eor	r3, r3, r2
   15ddc:	sub	r6, ip, #4
   15de0:	mul	r1, r1, r3
   15de4:	strh	r2, [ip, #-2]
   15de8:	strh	r5, [ip, #-4]
   15dec:	mov	r3, r1
   15df0:	str	r1, [r0, #12]
   15df4:	mov	r2, r5
   15df8:	mov	r1, r6
   15dfc:	mov	r4, r0
   15e00:	bl	15674 <flatcc_builder_create_cached_vtable@@Base>
   15e04:	subs	r7, r0, #0
   15e08:	bne	15e1c <flatcc_builder_end_table@@Base+0x8c>
   15e0c:	mov	r5, #0
   15e10:	mov	r0, r5
   15e14:	add	sp, sp, #20
   15e18:	pop	{r4, r5, r6, r7, pc}
   15e1c:	mov	r2, r5
   15e20:	mov	r1, #0
   15e24:	mov	r0, r6
   15e28:	bl	11fd8 <memset@plt>
   15e2c:	ldr	r3, [r4, #32]
   15e30:	ldr	ip, [r4, #76]	; 0x4c
   15e34:	ldr	r0, [r4]
   15e38:	ldr	r2, [r3, #20]
   15e3c:	ldr	r1, [r4, #16]
   15e40:	add	ip, ip, r2
   15e44:	sub	r0, r0, ip
   15e48:	ldrh	r3, [r4, #130]	; 0x82
   15e4c:	asr	r0, r0, #1
   15e50:	ldr	r2, [r4, #20]
   15e54:	str	r0, [sp, #4]
   15e58:	str	r7, [sp, #8]
   15e5c:	str	ip, [sp]
   15e60:	mov	r0, r4
   15e64:	bl	159bc <flatcc_builder_create_table@@Base>
   15e68:	subs	r5, r0, #0
   15e6c:	beq	15e0c <flatcc_builder_end_table@@Base+0x7c>
   15e70:	ldr	r3, [r4, #32]
   15e74:	ldr	r0, [r4, #52]	; 0x34
   15e78:	ldr	ip, [r4, #76]	; 0x4c
   15e7c:	ldr	r1, [r3, #24]
   15e80:	ldr	r2, [r4, #20]
   15e84:	str	r1, [r4, #12]
   15e88:	ldrh	lr, [r3, #28]
   15e8c:	mov	r1, #0
   15e90:	strh	lr, [r4, #8]
   15e94:	ldr	lr, [r3, #16]
   15e98:	add	r0, r0, lr
   15e9c:	str	r0, [r4, #4]
   15ea0:	ldr	r3, [r3, #20]
   15ea4:	ldr	r0, [r4, #16]
   15ea8:	add	r3, ip, r3
   15eac:	str	r3, [r4]
   15eb0:	bl	11fd8 <memset@plt>
   15eb4:	ldr	r3, [r4, #32]
   15eb8:	ldr	r2, [r4, #64]	; 0x40
   15ebc:	ldrh	lr, [r4, #130]	; 0x82
   15ec0:	ldr	ip, [r3]
   15ec4:	ldr	r1, [r3, #4]
   15ec8:	ldrh	r0, [r4, #128]	; 0x80
   15ecc:	sub	r2, r2, ip
   15ed0:	cmp	r2, r1
   15ed4:	movcs	r2, r1
   15ed8:	cmp	r0, lr
   15edc:	ldr	r0, [r4, #60]	; 0x3c
   15ee0:	ldr	r6, [r3, #8]
   15ee4:	str	r2, [r4, #24]
   15ee8:	add	r2, r0, ip
   15eec:	str	r2, [r4, #16]
   15ef0:	str	r6, [r4, #20]
   15ef4:	ldr	r2, [r4, #156]	; 0x9c
   15ef8:	str	ip, [r4, #28]
   15efc:	str	r1, [r3, #4]
   15f00:	strhcc	lr, [r4, #128]	; 0x80
   15f04:	ldrh	r1, [r3, #12]
   15f08:	sub	r2, r2, #1
   15f0c:	sub	r3, r3, #36	; 0x24
   15f10:	mov	r0, r5
   15f14:	str	r2, [r4, #156]	; 0x9c
   15f18:	strh	r1, [r4, #130]	; 0x82
   15f1c:	str	r3, [r4, #32]
   15f20:	add	sp, sp, #20
   15f24:	pop	{r4, r5, r6, r7, pc}
   15f28:	ldr	r3, [pc, #32]	; 15f50 <flatcc_builder_end_table@@Base+0x1c0>
   15f2c:	ldr	r1, [pc, #32]	; 15f54 <flatcc_builder_end_table@@Base+0x1c4>
   15f30:	ldr	r0, [pc, #32]	; 15f58 <flatcc_builder_end_table@@Base+0x1c8>
   15f34:	add	r3, pc, r3
   15f38:	ldr	r2, [pc, #28]	; 15f5c <flatcc_builder_end_table@@Base+0x1cc>
   15f3c:	add	r3, r3, #800	; 0x320
   15f40:	add	r1, pc, r1
   15f44:	add	r0, pc, r0
   15f48:	bl	11ffc <__assert_fail@plt>
   15f4c:			; <UNDEFINED> instruction: 0x9e3779b1
   15f50:	andeq	r2, r0, r8, asr r2
   15f54:	muleq	r0, ip, r9
   15f58:	andeq	r2, r0, r4, ror ip
   15f5c:	andeq	r0, r0, r5, lsr #10

00015f60 <flatcc_builder_create_vector@@Base>:
   15f60:	push	{r4, r5, r6, lr}
   15f64:	sub	sp, sp, #88	; 0x58
   15f68:	ldr	lr, [pc, #320]	; 160b0 <flatcc_builder_create_vector@@Base+0x150>
   15f6c:	ldr	ip, [sp, #108]	; 0x6c
   15f70:	mov	r4, r0
   15f74:	cmp	r2, ip
   15f78:	add	lr, pc, lr
   15f7c:	ldrh	r0, [sp, #104]	; 0x68
   15f80:	bhi	16064 <flatcc_builder_create_vector@@Base+0x104>
   15f84:	ldrh	ip, [r4, #128]	; 0x80
   15f88:	cmp	r0, #4
   15f8c:	mul	r3, r3, r2
   15f90:	movcc	r0, #4
   15f94:	ldr	r6, [r4, #136]	; 0x88
   15f98:	cmp	ip, r0
   15f9c:	strhcc	r0, [r4, #128]	; 0x80
   15fa0:	sub	r5, r6, r3
   15fa4:	sub	r0, r0, #1
   15fa8:	mov	ip, #4
   15fac:	str	r2, [sp, #12]
   15fb0:	and	r0, r0, r5
   15fb4:	add	r2, sp, #12
   15fb8:	mov	r5, #1
   15fbc:	cmp	r3, #0
   15fc0:	str	ip, [sp, #16]
   15fc4:	str	ip, [sp, #28]
   15fc8:	str	r2, [sp, #24]
   15fcc:	str	r5, [sp, #20]
   15fd0:	bne	16048 <flatcc_builder_create_vector@@Base+0xe8>
   15fd4:	cmp	r0, #0
   15fd8:	beq	16008 <flatcc_builder_create_vector@@Base+0xa8>
   15fdc:	ldr	r3, [sp, #20]
   15fe0:	ldr	r2, [pc, #204]	; 160b4 <flatcc_builder_create_vector@@Base+0x154>
   15fe4:	add	r3, r3, #1
   15fe8:	add	ip, ip, r0
   15fec:	str	ip, [sp, #16]
   15ff0:	ldr	r1, [lr, r2]
   15ff4:	add	r2, sp, #88	; 0x58
   15ff8:	add	r2, r2, r3, lsl #3
   15ffc:	str	r3, [sp, #20]
   16000:	str	r1, [r2, #-72]	; 0xffffffb8
   16004:	str	r0, [r2, #-68]	; 0xffffffbc
   16008:	sub	r5, r6, ip
   1600c:	cmp	r6, r5
   16010:	ble	160ac <flatcc_builder_create_vector@@Base+0x14c>
   16014:	ldr	r0, [r4, #36]	; 0x24
   16018:	ldr	r2, [sp, #20]
   1601c:	str	ip, [sp]
   16020:	mov	r3, r5
   16024:	ldr	r6, [r4, #44]	; 0x2c
   16028:	add	r1, sp, #24
   1602c:	blx	r6
   16030:	cmp	r0, #0
   16034:	bne	16088 <flatcc_builder_create_vector@@Base+0x128>
   16038:	mov	r0, r5
   1603c:	str	r5, [r4, #136]	; 0x88
   16040:	add	sp, sp, #88	; 0x58
   16044:	pop	{r4, r5, r6, pc}
   16048:	add	ip, r3, ip
   1604c:	mov	r2, #2
   16050:	str	r1, [sp, #32]
   16054:	str	r3, [sp, #36]	; 0x24
   16058:	str	ip, [sp, #16]
   1605c:	str	r2, [sp, #20]
   16060:	b	15fd4 <flatcc_builder_create_vector@@Base+0x74>
   16064:	ldr	r3, [pc, #76]	; 160b8 <flatcc_builder_create_vector@@Base+0x158>
   16068:	ldr	r1, [pc, #76]	; 160bc <flatcc_builder_create_vector@@Base+0x15c>
   1606c:	ldr	r0, [pc, #76]	; 160c0 <flatcc_builder_create_vector@@Base+0x160>
   16070:	add	r3, pc, r3
   16074:	ldr	r2, [pc, #72]	; 160c4 <flatcc_builder_create_vector@@Base+0x164>
   16078:	add	r3, r3, #828	; 0x33c
   1607c:	add	r1, pc, r1
   16080:	add	r0, pc, r0
   16084:	bl	11ffc <__assert_fail@plt>
   16088:	ldr	r3, [pc, #56]	; 160c8 <flatcc_builder_create_vector@@Base+0x168>
   1608c:	ldr	r1, [pc, #56]	; 160cc <flatcc_builder_create_vector@@Base+0x16c>
   16090:	ldr	r0, [pc, #56]	; 160d0 <flatcc_builder_create_vector@@Base+0x170>
   16094:	add	r3, pc, r3
   16098:	ldr	r2, [pc, #52]	; 160d4 <flatcc_builder_create_vector@@Base+0x174>
   1609c:	add	r3, r3, #28
   160a0:	add	r1, pc, r1
   160a4:	add	r0, pc, r0
   160a8:	bl	11ffc <__assert_fail@plt>
   160ac:	bl	12108 <__assert_fail@plt+0x10c>
   160b0:	andeq	r3, r1, r0, lsl #1
   160b4:	andeq	r0, r0, r8, asr #32
   160b8:	andeq	r2, r0, ip, lsl r1
   160bc:	andeq	r2, r0, r0, ror #16
   160c0:	andeq	r2, r0, r4, ror #22
   160c4:	andeq	r0, r0, r5, asr r5
   160c8:	strdeq	r2, [r0], -r8
   160cc:	andeq	r2, r0, ip, lsr r8
   160d0:	andeq	r2, r0, r0, asr #17
   160d4:	andeq	r0, r0, fp, lsl #5

000160d8 <flatcc_builder_end_vector@@Base>:
   160d8:	ldr	r1, [r0, #32]
   160dc:	push	{r4, r5, r6, lr}
   160e0:	sub	sp, sp, #8
   160e4:	ldrh	r3, [r1, #14]
   160e8:	cmp	r3, #4
   160ec:	bne	161a0 <flatcc_builder_end_vector@@Base+0xc8>
   160f0:	ldrh	lr, [r0, #130]	; 0x82
   160f4:	ldr	ip, [r1, #24]
   160f8:	ldr	r3, [r1, #16]
   160fc:	ldr	r2, [r1, #20]
   16100:	ldr	r1, [r0, #16]
   16104:	str	lr, [sp]
   16108:	str	ip, [sp, #4]
   1610c:	mov	r4, r0
   16110:	bl	15f60 <flatcc_builder_create_vector@@Base>
   16114:	subs	r5, r0, #0
   16118:	beq	16194 <flatcc_builder_end_vector@@Base+0xbc>
   1611c:	ldr	r2, [r4, #20]
   16120:	mov	r1, #0
   16124:	ldr	r0, [r4, #16]
   16128:	bl	11fd8 <memset@plt>
   1612c:	ldr	r3, [r4, #32]
   16130:	ldr	r2, [r4, #64]	; 0x40
   16134:	ldrh	lr, [r4, #130]	; 0x82
   16138:	ldr	ip, [r3]
   1613c:	ldr	r1, [r3, #4]
   16140:	ldrh	r0, [r4, #128]	; 0x80
   16144:	sub	r2, r2, ip
   16148:	cmp	r2, r1
   1614c:	movcs	r2, r1
   16150:	cmp	r0, lr
   16154:	ldr	r0, [r4, #60]	; 0x3c
   16158:	ldr	r6, [r3, #8]
   1615c:	str	r2, [r4, #24]
   16160:	add	r2, r0, ip
   16164:	str	r2, [r4, #16]
   16168:	str	r6, [r4, #20]
   1616c:	ldr	r2, [r4, #156]	; 0x9c
   16170:	str	ip, [r4, #28]
   16174:	str	r1, [r3, #4]
   16178:	strhcc	lr, [r4, #128]	; 0x80
   1617c:	ldrh	r1, [r3, #12]
   16180:	sub	r2, r2, #1
   16184:	sub	r3, r3, #36	; 0x24
   16188:	str	r2, [r4, #156]	; 0x9c
   1618c:	strh	r1, [r4, #130]	; 0x82
   16190:	str	r3, [r4, #32]
   16194:	mov	r0, r5
   16198:	add	sp, sp, #8
   1619c:	pop	{r4, r5, r6, pc}
   161a0:	ldr	r3, [pc, #28]	; 161c4 <flatcc_builder_end_vector@@Base+0xec>
   161a4:	ldr	r1, [pc, #28]	; 161c8 <flatcc_builder_end_vector@@Base+0xf0>
   161a8:	ldr	r0, [pc, #28]	; 161cc <flatcc_builder_end_vector@@Base+0xf4>
   161ac:	add	r3, pc, r3
   161b0:	ldr	r2, [pc, #24]	; 161d0 <flatcc_builder_end_vector@@Base+0xf8>
   161b4:	add	r3, r3, #860	; 0x35c
   161b8:	add	r1, pc, r1
   161bc:	add	r0, pc, r0
   161c0:	bl	11ffc <__assert_fail@plt>
   161c4:	andeq	r1, r0, r0, ror #31
   161c8:	andeq	r2, r0, r4, lsr #14
   161cc:	andeq	r2, r0, r0, ror r8
   161d0:	andeq	r0, r0, r8, ror r5

000161d4 <flatcc_builder_vector_count@@Base>:
   161d4:	ldr	r3, [r0, #32]
   161d8:	ldr	r0, [r3, #20]
   161dc:	bx	lr

000161e0 <flatcc_builder_vector_edit@@Base>:
   161e0:	ldr	r0, [r0, #16]
   161e4:	bx	lr

000161e8 <flatcc_builder_create_offset_vector_direct@@Base>:
   161e8:	cmn	r2, #-1073741823	; 0xc0000001
   161ec:	bls	161f8 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   161f0:	mov	r0, #0
   161f4:	bx	lr
   161f8:	mov	r3, #0
   161fc:	b	13938 <flatcc_builder_default_alloc@@Base+0x350>

00016200 <flatcc_builder_end_offset_vector@@Base>:
   16200:	ldr	r3, [r0, #32]
   16204:	push	{r4, r5, r6, lr}
   16208:	ldrh	r2, [r3, #14]
   1620c:	cmp	r2, #5
   16210:	bne	162ac <flatcc_builder_end_offset_vector@@Base+0xac>
   16214:	ldr	r2, [r3, #20]
   16218:	ldr	r1, [r0, #16]
   1621c:	mov	r4, r0
   16220:	bl	161e8 <flatcc_builder_create_offset_vector_direct@@Base>
   16224:	subs	r5, r0, #0
   16228:	beq	162a4 <flatcc_builder_end_offset_vector@@Base+0xa4>
   1622c:	ldr	r2, [r4, #20]
   16230:	mov	r1, #0
   16234:	ldr	r0, [r4, #16]
   16238:	bl	11fd8 <memset@plt>
   1623c:	ldr	r3, [r4, #32]
   16240:	ldr	r2, [r4, #64]	; 0x40
   16244:	ldrh	lr, [r4, #130]	; 0x82
   16248:	ldr	ip, [r3]
   1624c:	ldr	r1, [r3, #4]
   16250:	ldrh	r0, [r4, #128]	; 0x80
   16254:	sub	r2, r2, ip
   16258:	cmp	r2, r1
   1625c:	movcs	r2, r1
   16260:	cmp	r0, lr
   16264:	ldr	r0, [r4, #60]	; 0x3c
   16268:	ldr	r6, [r3, #8]
   1626c:	str	r2, [r4, #24]
   16270:	add	r2, r0, ip
   16274:	str	r2, [r4, #16]
   16278:	str	r6, [r4, #20]
   1627c:	ldr	r2, [r4, #156]	; 0x9c
   16280:	str	ip, [r4, #28]
   16284:	str	r1, [r3, #4]
   16288:	strhcc	lr, [r4, #128]	; 0x80
   1628c:	ldrh	r1, [r3, #12]
   16290:	sub	r2, r2, #1
   16294:	sub	r3, r3, #36	; 0x24
   16298:	str	r2, [r4, #156]	; 0x9c
   1629c:	strh	r1, [r4, #130]	; 0x82
   162a0:	str	r3, [r4, #32]
   162a4:	mov	r0, r5
   162a8:	pop	{r4, r5, r6, pc}
   162ac:	ldr	r3, [pc, #28]	; 162d0 <flatcc_builder_end_offset_vector@@Base+0xd0>
   162b0:	ldr	r1, [pc, #28]	; 162d4 <flatcc_builder_end_offset_vector@@Base+0xd4>
   162b4:	ldr	r0, [pc, #28]	; 162d8 <flatcc_builder_end_offset_vector@@Base+0xd8>
   162b8:	add	r3, pc, r3
   162bc:	ldr	r2, [pc, #24]	; 162dc <flatcc_builder_end_offset_vector@@Base+0xdc>
   162c0:	add	r3, r3, #888	; 0x378
   162c4:	add	r1, pc, r1
   162c8:	add	r0, pc, r0
   162cc:	bl	11ffc <__assert_fail@plt>
   162d0:	ldrdeq	r1, [r0], -r4
   162d4:	andeq	r2, r0, r8, lsl r6
   162d8:	ldrdeq	r2, [r0], -r0
   162dc:	andeq	r0, r0, r8, asr #11

000162e0 <flatcc_builder_create_offset_vector@@Base>:
   162e0:	push	{r4, r5, r6, lr}
   162e4:	mov	r6, r1
   162e8:	mov	r5, r2
   162ec:	mov	r4, r0
   162f0:	bl	151b4 <flatcc_builder_start_offset_vector@@Base>
   162f4:	cmp	r0, #0
   162f8:	beq	16304 <flatcc_builder_create_offset_vector@@Base+0x24>
   162fc:	mov	r0, #0
   16300:	pop	{r4, r5, r6, pc}
   16304:	mov	r1, r5
   16308:	mov	r0, r4
   1630c:	bl	14b4c <flatcc_builder_extend_offset_vector@@Base>
   16310:	cmp	r0, #0
   16314:	beq	162fc <flatcc_builder_create_offset_vector@@Base+0x1c>
   16318:	lsl	r2, r5, #2
   1631c:	mov	r1, r6
   16320:	bl	11f6c <memcpy@plt>
   16324:	mov	r0, r4
   16328:	pop	{r4, r5, r6, lr}
   1632c:	b	16200 <flatcc_builder_end_offset_vector@@Base>

00016330 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   16330:	ldr	r2, [r0, #32]
   16334:	push	{r4, r5, r6, lr}
   16338:	ldrh	ip, [r2, #14]
   1633c:	cmp	ip, #5
   16340:	bne	163f4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xc4>
   16344:	ldr	r2, [r2, #20]
   16348:	cmn	r2, #-1073741823	; 0xc0000001
   1634c:	bls	1635c <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   16350:	mov	r5, #0
   16354:	mov	r0, r5
   16358:	pop	{r4, r5, r6, pc}
   1635c:	mov	r3, r1
   16360:	ldr	r1, [r0, #16]
   16364:	mov	r4, r0
   16368:	bl	13938 <flatcc_builder_default_alloc@@Base+0x350>
   1636c:	subs	r5, r0, #0
   16370:	beq	16350 <flatcc_builder_end_offset_vector_for_unions@@Base+0x20>
   16374:	ldr	r2, [r4, #20]
   16378:	mov	r1, #0
   1637c:	ldr	r0, [r4, #16]
   16380:	bl	11fd8 <memset@plt>
   16384:	ldr	r3, [r4, #32]
   16388:	ldr	r2, [r4, #64]	; 0x40
   1638c:	ldrh	lr, [r4, #130]	; 0x82
   16390:	ldr	ip, [r3]
   16394:	ldr	r1, [r3, #4]
   16398:	ldrh	r0, [r4, #128]	; 0x80
   1639c:	sub	r2, r2, ip
   163a0:	cmp	r2, r1
   163a4:	movcs	r2, r1
   163a8:	cmp	r0, lr
   163ac:	ldr	r0, [r4, #60]	; 0x3c
   163b0:	ldr	r6, [r3, #8]
   163b4:	str	r2, [r4, #24]
   163b8:	add	r2, r0, ip
   163bc:	str	r2, [r4, #16]
   163c0:	str	r6, [r4, #20]
   163c4:	ldr	r2, [r4, #156]	; 0x9c
   163c8:	str	ip, [r4, #28]
   163cc:	str	r1, [r3, #4]
   163d0:	strhcc	lr, [r4, #128]	; 0x80
   163d4:	ldrh	r1, [r3, #12]
   163d8:	sub	r2, r2, #1
   163dc:	sub	r3, r3, #36	; 0x24
   163e0:	str	r2, [r4, #156]	; 0x9c
   163e4:	strh	r1, [r4, #130]	; 0x82
   163e8:	str	r3, [r4, #32]
   163ec:	mov	r0, r5
   163f0:	pop	{r4, r5, r6, pc}
   163f4:	ldr	r3, [pc, #28]	; 16418 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe8>
   163f8:	ldr	r1, [pc, #28]	; 1641c <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   163fc:	ldr	r0, [pc, #28]	; 16420 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf0>
   16400:	add	r3, pc, r3
   16404:	ldr	r2, [pc, #24]	; 16424 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf4>
   16408:	add	r3, r3, #924	; 0x39c
   1640c:	add	r1, pc, r1
   16410:	add	r0, pc, r0
   16414:	bl	11ffc <__assert_fail@plt>
   16418:	andeq	r1, r0, ip, lsl #27
   1641c:	ldrdeq	r2, [r0], -r0
   16420:	andeq	r2, r0, r8, lsl #13
   16424:	ldrdeq	r0, [r0], -r5

00016428 <flatcc_builder_offset_vector_edit@@Base>:
   16428:	ldr	r0, [r0, #16]
   1642c:	bx	lr

00016430 <flatcc_builder_offset_vector_count@@Base>:
   16430:	ldr	r3, [r0, #32]
   16434:	ldr	r0, [r3, #20]
   16438:	bx	lr

0001643c <flatcc_builder_create_union_vector_direct@@Base>:
   1643c:	push	{r4, r5, r6, r7, r8, lr}
   16440:	sub	sp, sp, #8
   16444:	mov	r4, r0
   16448:	ldr	r5, [sp, #32]
   1644c:	cmn	r5, #-1073741823	; 0xc0000001
   16450:	bls	1646c <flatcc_builder_create_union_vector_direct@@Base+0x30>
   16454:	mov	r3, #0
   16458:	mov	r0, r4
   1645c:	str	r3, [r4]
   16460:	str	r3, [r4, #4]
   16464:	add	sp, sp, #8
   16468:	pop	{r4, r5, r6, r7, r8, pc}
   1646c:	mov	r6, r1
   16470:	mov	r7, r2
   16474:	mov	r1, r3
   16478:	mov	r0, r6
   1647c:	mov	r3, r2
   16480:	mov	r2, r5
   16484:	bl	13938 <flatcc_builder_default_alloc@@Base+0x350>
   16488:	subs	r8, r0, #0
   1648c:	beq	16454 <flatcc_builder_create_union_vector_direct@@Base+0x18>
   16490:	mvn	ip, #0
   16494:	mov	r3, #1
   16498:	mov	r2, r5
   1649c:	mov	r1, r7
   164a0:	mov	r0, r6
   164a4:	stm	sp, {r3, ip}
   164a8:	bl	15f60 <flatcc_builder_create_vector@@Base>
   164ac:	stm	r4, {r0, r8}
   164b0:	mov	r0, r4
   164b4:	add	sp, sp, #8
   164b8:	pop	{r4, r5, r6, r7, r8, pc}

000164bc <flatcc_builder_create_union_vector@@Base>:
   164bc:	push	{r4, r5, r6, r7, r8, lr}
   164c0:	mov	r6, r0
   164c4:	sub	sp, sp, #16
   164c8:	mov	r0, r1
   164cc:	mov	r5, r1
   164d0:	mov	r4, r2
   164d4:	mov	r7, r3
   164d8:	bl	151b4 <flatcc_builder_start_offset_vector@@Base>
   164dc:	cmp	r0, #0
   164e0:	beq	164fc <flatcc_builder_create_union_vector@@Base+0x40>
   164e4:	mov	r3, #0
   164e8:	mov	r0, r6
   164ec:	str	r3, [r6]
   164f0:	str	r3, [r6, #4]
   164f4:	add	sp, sp, #16
   164f8:	pop	{r4, r5, r6, r7, r8, pc}
   164fc:	mov	r1, r7
   16500:	mov	r0, r5
   16504:	bl	14b4c <flatcc_builder_extend_offset_vector@@Base>
   16508:	cmp	r0, #0
   1650c:	beq	164e4 <flatcc_builder_create_union_vector@@Base+0x28>
   16510:	ldr	r8, [r5, #20]
   16514:	ldr	r3, [r5, #24]
   16518:	add	r1, r7, r8
   1651c:	cmp	r1, r3
   16520:	str	r1, [r5, #20]
   16524:	bcs	1661c <flatcc_builder_create_union_vector@@Base+0x160>
   16528:	ldr	r2, [r5, #16]
   1652c:	adds	r8, r2, r8
   16530:	beq	164e4 <flatcc_builder_create_union_vector@@Base+0x28>
   16534:	mov	r0, r5
   16538:	bl	16428 <flatcc_builder_offset_vector_edit@@Base>
   1653c:	cmp	r7, #0
   16540:	movne	r1, r4
   16544:	subne	lr, r8, #1
   16548:	mov	r3, r0
   1654c:	addne	r2, r1, r7, lsl #3
   16550:	subne	ip, r0, #4
   16554:	beq	16574 <flatcc_builder_create_union_vector@@Base+0xb8>
   16558:	ldrb	r4, [r1]
   1655c:	add	r1, r1, #8
   16560:	strb	r4, [lr, #1]!
   16564:	ldr	r4, [r1, #-4]
   16568:	cmp	r2, r1
   1656c:	str	r4, [ip, #4]!
   16570:	bne	16558 <flatcc_builder_create_union_vector@@Base+0x9c>
   16574:	str	r7, [sp]
   16578:	mov	r2, r8
   1657c:	mov	r1, r5
   16580:	add	r0, sp, #8
   16584:	bl	1643c <flatcc_builder_create_union_vector_direct@@Base>
   16588:	ldr	r2, [r5, #20]
   1658c:	mov	r1, #0
   16590:	ldr	r0, [r5, #16]
   16594:	ldr	r7, [sp, #8]
   16598:	ldr	r4, [sp, #12]
   1659c:	bl	11fd8 <memset@plt>
   165a0:	ldr	r3, [r5, #32]
   165a4:	ldr	r2, [r5, #64]	; 0x40
   165a8:	ldrh	lr, [r5, #130]	; 0x82
   165ac:	ldr	ip, [r3]
   165b0:	ldr	r1, [r3, #4]
   165b4:	ldrh	r0, [r5, #128]	; 0x80
   165b8:	sub	r2, r2, ip
   165bc:	cmp	r2, r1
   165c0:	movcs	r2, r1
   165c4:	cmp	r0, lr
   165c8:	ldr	r0, [r5, #60]	; 0x3c
   165cc:	ldr	r8, [r3, #8]
   165d0:	str	r2, [r5, #24]
   165d4:	add	r2, r0, ip
   165d8:	str	r2, [r5, #16]
   165dc:	str	r8, [r5, #20]
   165e0:	ldr	r2, [r5, #156]	; 0x9c
   165e4:	str	ip, [r5, #28]
   165e8:	str	r1, [r3, #4]
   165ec:	strhcc	lr, [r5, #128]	; 0x80
   165f0:	ldrh	r1, [r3, #12]
   165f4:	sub	r2, r2, #1
   165f8:	sub	r3, r3, #36	; 0x24
   165fc:	mov	r0, r6
   16600:	str	r7, [r6]
   16604:	str	r4, [r6, #4]
   16608:	str	r2, [r5, #156]	; 0x9c
   1660c:	strh	r1, [r5, #130]	; 0x82
   16610:	str	r3, [r5, #32]
   16614:	add	sp, sp, #16
   16618:	pop	{r4, r5, r6, r7, r8, pc}
   1661c:	add	r1, r1, #1
   16620:	mvn	r2, #3
   16624:	mov	r0, r5
   16628:	bl	13574 <access_monster_buffer@@Base+0x6ec>
   1662c:	cmp	r0, #0
   16630:	beq	16528 <flatcc_builder_create_union_vector@@Base+0x6c>
   16634:	b	164e4 <flatcc_builder_create_union_vector@@Base+0x28>

00016638 <flatcc_builder_start_union_vector@@Base>:
   16638:	push	{r4, lr}
   1663c:	mov	r1, #4
   16640:	mov	r4, r0
   16644:	bl	13824 <flatcc_builder_default_alloc@@Base+0x23c>
   16648:	cmp	r0, #0
   1664c:	bne	16698 <flatcc_builder_start_union_vector@@Base+0x60>
   16650:	ldr	r3, [r4, #32]
   16654:	mov	r2, #8
   16658:	mov	lr, #7
   1665c:	str	r0, [r3, #20]
   16660:	str	r2, [r3, #16]
   16664:	ldr	ip, [r4, #28]
   16668:	ldr	r2, [r4, #64]	; 0x40
   1666c:	ldr	r1, [r4, #60]	; 0x3c
   16670:	sub	r2, r2, ip
   16674:	cmn	r2, #4
   16678:	mvnhi	r2, #3
   1667c:	strh	lr, [r3, #14]
   16680:	add	r1, r1, ip
   16684:	str	r2, [r4, #24]
   16688:	mvn	r2, #3
   1668c:	str	r1, [r4, #16]
   16690:	str	r2, [r3, #4]
   16694:	pop	{r4, pc}
   16698:	mvn	r0, #0
   1669c:	pop	{r4, pc}

000166a0 <flatcc_builder_union_vector_edit@@Base>:
   166a0:	ldr	r0, [r0, #16]
   166a4:	bx	lr

000166a8 <flatcc_builder_union_vector_count@@Base>:
   166a8:	ldr	r3, [r0, #32]
   166ac:	ldr	r0, [r3, #20]
   166b0:	bx	lr

000166b4 <flatcc_builder_end_union_vector@@Base>:
   166b4:	ldr	r3, [r1, #32]
   166b8:	push	{r4, r5, r6, r7, r8, lr}
   166bc:	sub	sp, sp, #16
   166c0:	ldrh	r3, [r3, #14]
   166c4:	cmp	r3, #7
   166c8:	bne	16820 <flatcc_builder_end_union_vector@@Base+0x16c>
   166cc:	mov	r5, r0
   166d0:	mov	r0, r1
   166d4:	mov	r4, r1
   166d8:	bl	166a8 <flatcc_builder_union_vector_count@@Base>
   166dc:	ldr	r8, [r4, #20]
   166e0:	ldr	r3, [r4, #24]
   166e4:	lsl	r7, r0, #2
   166e8:	add	r1, r7, r0
   166ec:	add	r1, r1, r8
   166f0:	cmp	r1, r3
   166f4:	mov	r6, r0
   166f8:	str	r1, [r4, #20]
   166fc:	bcs	167f0 <flatcc_builder_end_union_vector@@Base+0x13c>
   16700:	ldr	r3, [r4, #16]
   16704:	adds	r8, r3, r8
   16708:	beq	16808 <flatcc_builder_end_union_vector@@Base+0x154>
   1670c:	mov	r0, r4
   16710:	bl	166a0 <flatcc_builder_union_vector_edit@@Base>
   16714:	cmp	r6, #0
   16718:	add	r2, r8, r7
   1671c:	subne	ip, r2, #1
   16720:	subne	r1, r8, #4
   16724:	addne	r7, r0, r6, lsl #3
   16728:	beq	16748 <flatcc_builder_end_union_vector@@Base+0x94>
   1672c:	ldrb	lr, [r0]
   16730:	add	r0, r0, #8
   16734:	strb	lr, [ip, #1]!
   16738:	ldr	lr, [r0, #-4]
   1673c:	cmp	r0, r7
   16740:	str	lr, [r1, #4]!
   16744:	bne	1672c <flatcc_builder_end_union_vector@@Base+0x78>
   16748:	mov	r3, r8
   1674c:	str	r6, [sp]
   16750:	mov	r1, r4
   16754:	add	r0, sp, #8
   16758:	bl	1643c <flatcc_builder_create_union_vector_direct@@Base>
   1675c:	ldr	r2, [r4, #20]
   16760:	mov	r1, #0
   16764:	ldr	r0, [r4, #16]
   16768:	ldr	r7, [sp, #8]
   1676c:	ldr	r6, [sp, #12]
   16770:	bl	11fd8 <memset@plt>
   16774:	ldr	r3, [r4, #32]
   16778:	ldr	r2, [r4, #64]	; 0x40
   1677c:	ldrh	lr, [r4, #130]	; 0x82
   16780:	ldr	ip, [r3]
   16784:	ldr	r1, [r3, #4]
   16788:	ldrh	r0, [r4, #128]	; 0x80
   1678c:	sub	r2, r2, ip
   16790:	cmp	r2, r1
   16794:	movcs	r2, r1
   16798:	cmp	r0, lr
   1679c:	ldr	r0, [r4, #60]	; 0x3c
   167a0:	ldr	r8, [r3, #8]
   167a4:	str	r2, [r4, #24]
   167a8:	add	r2, r0, ip
   167ac:	str	r2, [r4, #16]
   167b0:	str	r8, [r4, #20]
   167b4:	ldr	r2, [r4, #156]	; 0x9c
   167b8:	str	ip, [r4, #28]
   167bc:	str	r1, [r3, #4]
   167c0:	strhcc	lr, [r4, #128]	; 0x80
   167c4:	ldrh	r1, [r3, #12]
   167c8:	sub	r2, r2, #1
   167cc:	sub	r3, r3, #36	; 0x24
   167d0:	mov	r0, r5
   167d4:	str	r7, [r5]
   167d8:	str	r6, [r5, #4]
   167dc:	str	r2, [r4, #156]	; 0x9c
   167e0:	strh	r1, [r4, #130]	; 0x82
   167e4:	str	r3, [r4, #32]
   167e8:	add	sp, sp, #16
   167ec:	pop	{r4, r5, r6, r7, r8, pc}
   167f0:	add	r1, r1, #1
   167f4:	mvn	r2, #3
   167f8:	mov	r0, r4
   167fc:	bl	13574 <access_monster_buffer@@Base+0x6ec>
   16800:	cmp	r0, #0
   16804:	beq	16700 <flatcc_builder_end_union_vector@@Base+0x4c>
   16808:	mov	r3, #0
   1680c:	mov	r0, r5
   16810:	str	r3, [r5]
   16814:	str	r3, [r5, #4]
   16818:	add	sp, sp, #16
   1681c:	pop	{r4, r5, r6, r7, r8, pc}
   16820:	ldr	r3, [pc, #28]	; 16844 <flatcc_builder_end_union_vector@@Base+0x190>
   16824:	ldr	r1, [pc, #28]	; 16848 <flatcc_builder_end_union_vector@@Base+0x194>
   16828:	ldr	r0, [pc, #28]	; 1684c <flatcc_builder_end_union_vector@@Base+0x198>
   1682c:	add	r3, pc, r3
   16830:	ldr	r2, [pc, #24]	; 16850 <flatcc_builder_end_union_vector@@Base+0x19c>
   16834:	add	r3, r3, #968	; 0x3c8
   16838:	add	r1, pc, r1
   1683c:	add	r0, pc, r0
   16840:	bl	11ffc <__assert_fail@plt>
   16844:	andeq	r1, r0, r0, ror #18
   16848:	andeq	r2, r0, r4, lsr #1
   1684c:			; <UNDEFINED> instruction: 0x000023bc
   16850:	andeq	r0, r0, r1, asr r6

00016854 <flatcc_builder_extend_union_vector@@Base>:
   16854:	ldr	ip, [r0, #32]
   16858:	push	{r4, r5, r6, lr}
   1685c:	ldr	r3, [ip, #20]
   16860:	adds	r2, r1, r3
   16864:	movcs	r3, #1
   16868:	movcc	r3, #0
   1686c:	cmn	r2, #-536870911	; 0xe0000001
   16870:	movls	r4, #0
   16874:	movhi	r4, #1
   16878:	orrs	r4, r3, r4
   1687c:	bne	168c8 <flatcc_builder_extend_union_vector@@Base+0x74>
   16880:	str	r2, [ip, #20]
   16884:	ldr	r6, [r0, #20]
   16888:	ldr	r3, [r0, #24]
   1688c:	add	r1, r6, r1, lsl #3
   16890:	cmp	r1, r3
   16894:	mov	r5, r0
   16898:	str	r1, [r0, #20]
   1689c:	bcs	168ac <flatcc_builder_extend_union_vector@@Base+0x58>
   168a0:	ldr	r0, [r5, #16]
   168a4:	add	r0, r0, r6
   168a8:	pop	{r4, r5, r6, pc}
   168ac:	add	r1, r1, #1
   168b0:	mvn	r2, #3
   168b4:	bl	13574 <access_monster_buffer@@Base+0x6ec>
   168b8:	cmp	r0, #0
   168bc:	beq	168a0 <flatcc_builder_extend_union_vector@@Base+0x4c>
   168c0:	mov	r0, r4
   168c4:	pop	{r4, r5, r6, pc}
   168c8:	bl	12140 <__assert_fail@plt+0x144>

000168cc <flatcc_builder_truncate_union_vector@@Base>:
   168cc:	ldr	r3, [r0, #32]
   168d0:	push	{r4, lr}
   168d4:	ldrh	r2, [r3, #14]
   168d8:	cmp	r2, #7
   168dc:	bne	16920 <flatcc_builder_truncate_union_vector@@Base+0x54>
   168e0:	ldr	ip, [r3, #20]
   168e4:	cmp	ip, r1
   168e8:	bcc	16944 <flatcc_builder_truncate_union_vector@@Base+0x78>
   168ec:	ldr	r2, [r3, #16]
   168f0:	sub	ip, ip, r1
   168f4:	str	ip, [r3, #20]
   168f8:	mul	r2, r2, r1
   168fc:	ldr	r3, [r0, #20]
   16900:	ldr	r1, [r0, #16]
   16904:	sub	r3, r3, r2
   16908:	str	r3, [r0, #20]
   1690c:	add	r0, r1, r3
   16910:	mov	r1, #0
   16914:	bl	11fd8 <memset@plt>
   16918:	mov	r0, #0
   1691c:	pop	{r4, pc}
   16920:	ldr	r3, [pc, #64]	; 16968 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   16924:	ldr	r1, [pc, #64]	; 1696c <flatcc_builder_truncate_union_vector@@Base+0xa0>
   16928:	ldr	r0, [pc, #64]	; 16970 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   1692c:	add	r3, pc, r3
   16930:	ldr	r2, [pc, #60]	; 16974 <flatcc_builder_truncate_union_vector@@Base+0xa8>
   16934:	add	r3, r3, #1000	; 0x3e8
   16938:	add	r1, pc, r1
   1693c:	add	r0, pc, r0
   16940:	bl	11ffc <__assert_fail@plt>
   16944:	ldr	r3, [pc, #44]	; 16978 <flatcc_builder_truncate_union_vector@@Base+0xac>
   16948:	ldr	r1, [pc, #44]	; 1697c <flatcc_builder_truncate_union_vector@@Base+0xb0>
   1694c:	ldr	r0, [pc, #44]	; 16980 <flatcc_builder_truncate_union_vector@@Base+0xb4>
   16950:	add	r3, pc, r3
   16954:	ldr	r2, [pc, #40]	; 16984 <flatcc_builder_truncate_union_vector@@Base+0xb8>
   16958:	add	r3, r3, #1000	; 0x3e8
   1695c:	add	r1, pc, r1
   16960:	add	r0, pc, r0
   16964:	bl	11ffc <__assert_fail@plt>
   16968:	andeq	r1, r0, r0, ror #16
   1696c:	andeq	r1, r0, r4, lsr #31
   16970:			; <UNDEFINED> instruction: 0x000022bc
   16974:	andeq	r0, r0, r1, lsl #13
   16978:	andeq	r1, r0, ip, lsr r8
   1697c:	andeq	r1, r0, r0, lsl #31
   16980:			; <UNDEFINED> instruction: 0x000021bc
   16984:	andeq	r0, r0, r2, lsl #13

00016988 <flatcc_builder_union_vector_push@@Base>:
   16988:	ldr	ip, [r0, #32]
   1698c:	push	{r4, r5, r6, lr}
   16990:	sub	sp, sp, #8
   16994:	ldrh	r3, [ip, #14]
   16998:	stm	sp, {r1, r2}
   1699c:	cmp	r3, #7
   169a0:	bne	16a20 <flatcc_builder_union_vector_push@@Base+0x98>
   169a4:	ldr	r3, [ip, #20]
   169a8:	cmn	r3, #-536870911	; 0xe0000001
   169ac:	beq	16a10 <flatcc_builder_union_vector_push@@Base+0x88>
   169b0:	add	r3, r3, #1
   169b4:	str	r3, [ip, #20]
   169b8:	ldr	r6, [r0, #20]
   169bc:	ldr	r2, [r0, #24]
   169c0:	add	r3, r6, #8
   169c4:	cmp	r3, r2
   169c8:	mov	r4, r0
   169cc:	mov	r5, sp
   169d0:	str	r3, [r0, #20]
   169d4:	bcs	169fc <flatcc_builder_union_vector_push@@Base+0x74>
   169d8:	ldr	r3, [r4, #16]
   169dc:	adds	r3, r3, r6
   169e0:	beq	16a44 <flatcc_builder_union_vector_push@@Base+0xbc>
   169e4:	ldm	r5, {r0, r1}
   169e8:	mov	r2, r3
   169ec:	stm	r3, {r0, r1}
   169f0:	mov	r0, r2
   169f4:	add	sp, sp, #8
   169f8:	pop	{r4, r5, r6, pc}
   169fc:	mvn	r2, #3
   16a00:	add	r1, r6, #9
   16a04:	bl	13574 <access_monster_buffer@@Base+0x6ec>
   16a08:	cmp	r0, #0
   16a0c:	beq	169d8 <flatcc_builder_union_vector_push@@Base+0x50>
   16a10:	mov	r2, #0
   16a14:	mov	r0, r2
   16a18:	add	sp, sp, #8
   16a1c:	pop	{r4, r5, r6, pc}
   16a20:	ldr	r3, [pc, #36]	; 16a4c <flatcc_builder_union_vector_push@@Base+0xc4>
   16a24:	ldr	r1, [pc, #36]	; 16a50 <flatcc_builder_union_vector_push@@Base+0xc8>
   16a28:	ldr	r0, [pc, #36]	; 16a54 <flatcc_builder_union_vector_push@@Base+0xcc>
   16a2c:	add	r3, pc, r3
   16a30:	ldr	r2, [pc, #32]	; 16a58 <flatcc_builder_union_vector_push@@Base+0xd0>
   16a34:	add	r3, r3, #1040	; 0x410
   16a38:	add	r1, pc, r1
   16a3c:	add	r0, pc, r0
   16a40:	bl	11ffc <__assert_fail@plt>
   16a44:	mov	r2, r3
   16a48:	b	169f0 <flatcc_builder_union_vector_push@@Base+0x68>
   16a4c:	andeq	r1, r0, r0, ror #14
   16a50:	andeq	r1, r0, r4, lsr #29
   16a54:			; <UNDEFINED> instruction: 0x000021bc
   16a58:	andeq	r0, r0, sp, lsl #13

00016a5c <flatcc_builder_append_union_vector@@Base>:
   16a5c:	ldr	ip, [r0, #32]
   16a60:	push	{r4, r5, r6, r7, r8, lr}
   16a64:	ldrh	r3, [ip, #14]
   16a68:	cmp	r3, #7
   16a6c:	bne	16b04 <flatcc_builder_append_union_vector@@Base+0xa8>
   16a70:	mov	r6, r1
   16a74:	ldr	r1, [ip, #20]
   16a78:	adds	r1, r2, r1
   16a7c:	movcs	lr, #1
   16a80:	movcc	lr, #0
   16a84:	cmn	r1, #-536870911	; 0xe0000001
   16a88:	movls	r3, #0
   16a8c:	movhi	r3, #1
   16a90:	orrs	r8, lr, r3
   16a94:	bne	16b00 <flatcc_builder_append_union_vector@@Base+0xa4>
   16a98:	str	r1, [ip, #20]
   16a9c:	ldr	r7, [r0, #20]
   16aa0:	lsl	r4, r2, #3
   16aa4:	ldr	r3, [r0, #24]
   16aa8:	add	r1, r4, r7
   16aac:	cmp	r1, r3
   16ab0:	mov	r5, r0
   16ab4:	str	r1, [r0, #20]
   16ab8:	bcs	16ae4 <flatcc_builder_append_union_vector@@Base+0x88>
   16abc:	ldr	r3, [r5, #16]
   16ac0:	adds	r3, r3, r7
   16ac4:	beq	16adc <flatcc_builder_append_union_vector@@Base+0x80>
   16ac8:	mov	r0, r3
   16acc:	mov	r2, r4
   16ad0:	mov	r1, r6
   16ad4:	bl	11f6c <memcpy@plt>
   16ad8:	mov	r3, r0
   16adc:	mov	r0, r3
   16ae0:	pop	{r4, r5, r6, r7, r8, pc}
   16ae4:	add	r1, r1, #1
   16ae8:	mvn	r2, #3
   16aec:	bl	13574 <access_monster_buffer@@Base+0x6ec>
   16af0:	cmp	r0, #0
   16af4:	beq	16abc <flatcc_builder_append_union_vector@@Base+0x60>
   16af8:	mov	r3, r8
   16afc:	b	16adc <flatcc_builder_append_union_vector@@Base+0x80>
   16b00:	bl	12140 <__assert_fail@plt+0x144>
   16b04:	ldr	r3, [pc, #32]	; 16b2c <flatcc_builder_append_union_vector@@Base+0xd0>
   16b08:	ldr	r1, [pc, #32]	; 16b30 <flatcc_builder_append_union_vector@@Base+0xd4>
   16b0c:	add	r3, pc, r3
   16b10:	ldr	r0, [pc, #28]	; 16b34 <flatcc_builder_append_union_vector@@Base+0xd8>
   16b14:	add	r3, r3, #1072	; 0x430
   16b18:	ldr	r2, [pc, #24]	; 16b38 <flatcc_builder_append_union_vector@@Base+0xdc>
   16b1c:	add	r3, r3, #4
   16b20:	add	r1, pc, r1
   16b24:	add	r0, pc, r0
   16b28:	bl	11ffc <__assert_fail@plt>
   16b2c:	andeq	r1, r0, r0, lsl #13
   16b30:			; <UNDEFINED> instruction: 0x00001dbc
   16b34:	ldrdeq	r2, [r0], -r4
   16b38:	muleq	r0, ip, r6

00016b3c <flatcc_builder_create_string@@Base>:
   16b3c:	push	{r4, r5, r6, lr}
   16b40:	sub	sp, sp, #88	; 0x58
   16b44:	ldr	lr, [r0, #136]	; 0x88
   16b48:	mov	r4, r0
   16b4c:	add	r0, sp, #88	; 0x58
   16b50:	cmp	r2, #0
   16b54:	sub	r3, lr, r2
   16b58:	str	r2, [r0, #-76]!	; 0xffffffb4
   16b5c:	sub	r3, r3, #1
   16b60:	str	r0, [sp, #24]
   16b64:	ldr	r5, [pc, #188]	; 16c28 <flatcc_builder_create_string@@Base+0xec>
   16b68:	moveq	r0, #1
   16b6c:	strne	r1, [sp, #32]
   16b70:	mov	ip, #4
   16b74:	moveq	r1, r0
   16b78:	movne	r1, #2
   16b7c:	and	r3, r3, #3
   16b80:	ldr	r0, [pc, #164]	; 16c2c <flatcc_builder_create_string@@Base+0xf0>
   16b84:	str	ip, [sp, #28]
   16b88:	add	r5, pc, r5
   16b8c:	addne	ip, r2, ip
   16b90:	add	r3, r3, #1
   16b94:	add	r1, r1, #1
   16b98:	add	ip, ip, r3
   16b9c:	add	r6, sp, #88	; 0x58
   16ba0:	strne	r2, [sp, #36]	; 0x24
   16ba4:	add	r1, r6, r1, lsl #3
   16ba8:	str	ip, [sp, #16]
   16bac:	ldr	r0, [r5, r0]
   16bb0:	sub	r5, lr, ip
   16bb4:	movne	r2, #3
   16bb8:	moveq	r2, #2
   16bbc:	cmp	lr, r5
   16bc0:	str	r0, [r1, #-72]	; 0xffffffb8
   16bc4:	str	r3, [r1, #-68]	; 0xffffffbc
   16bc8:	str	r2, [sp, #20]
   16bcc:	ble	16c00 <flatcc_builder_create_string@@Base+0xc4>
   16bd0:	ldr	r0, [r4, #36]	; 0x24
   16bd4:	mov	r3, r5
   16bd8:	str	ip, [sp]
   16bdc:	add	r1, sp, #24
   16be0:	ldr	r6, [r4, #44]	; 0x2c
   16be4:	blx	r6
   16be8:	cmp	r0, #0
   16bec:	bne	16c04 <flatcc_builder_create_string@@Base+0xc8>
   16bf0:	mov	r0, r5
   16bf4:	str	r5, [r4, #136]	; 0x88
   16bf8:	add	sp, sp, #88	; 0x58
   16bfc:	pop	{r4, r5, r6, pc}
   16c00:	bl	12108 <__assert_fail@plt+0x10c>
   16c04:	ldr	r3, [pc, #36]	; 16c30 <flatcc_builder_create_string@@Base+0xf4>
   16c08:	ldr	r1, [pc, #36]	; 16c34 <flatcc_builder_create_string@@Base+0xf8>
   16c0c:	ldr	r0, [pc, #36]	; 16c38 <flatcc_builder_create_string@@Base+0xfc>
   16c10:	add	r3, pc, r3
   16c14:	ldr	r2, [pc, #32]	; 16c3c <flatcc_builder_create_string@@Base+0x100>
   16c18:	add	r3, r3, #28
   16c1c:	add	r1, pc, r1
   16c20:	add	r0, pc, r0
   16c24:	bl	11ffc <__assert_fail@plt>
   16c28:	andeq	r2, r1, r0, ror r4
   16c2c:	andeq	r0, r0, r8, asr #32
   16c30:	andeq	r1, r0, ip, ror r5
   16c34:	andeq	r1, r0, r0, asr #25
   16c38:	andeq	r1, r0, r4, asr #26
   16c3c:	andeq	r0, r0, fp, lsl #5

00016c40 <flatcc_builder_create_string_str@@Base>:
   16c40:	push	{r4, r5, r6, lr}
   16c44:	mov	r5, r0
   16c48:	mov	r0, r1
   16c4c:	mov	r4, r1
   16c50:	bl	11fc0 <strlen@plt>
   16c54:	mov	r1, r4
   16c58:	mov	r2, r0
   16c5c:	mov	r0, r5
   16c60:	pop	{r4, r5, r6, lr}
   16c64:	b	16b3c <flatcc_builder_create_string@@Base>

00016c68 <flatcc_builder_create_string_strn@@Base>:
   16c68:	push	{r4, r5, r6, lr}
   16c6c:	mov	r4, r1
   16c70:	mov	r6, r0
   16c74:	mov	r1, #0
   16c78:	mov	r0, r4
   16c7c:	mov	r5, r2
   16c80:	bl	11fe4 <memchr@plt>
   16c84:	mov	r1, r4
   16c88:	cmp	r0, #0
   16c8c:	subne	r5, r0, r4
   16c90:	mov	r2, r5
   16c94:	mov	r0, r6
   16c98:	pop	{r4, r5, r6, lr}
   16c9c:	b	16b3c <flatcc_builder_create_string@@Base>

00016ca0 <flatcc_builder_end_string@@Base>:
   16ca0:	ldr	r3, [r0, #32]
   16ca4:	push	{r4, r5, r6, lr}
   16ca8:	ldrh	r2, [r3, #14]
   16cac:	cmp	r2, #6
   16cb0:	bne	16d80 <flatcc_builder_end_string@@Base+0xe0>
   16cb4:	ldr	r2, [r3, #20]
   16cb8:	ldr	r3, [r0, #20]
   16cbc:	mov	r4, r0
   16cc0:	cmp	r2, r3
   16cc4:	bne	16d58 <flatcc_builder_end_string@@Base+0xb8>
   16cc8:	ldr	r1, [r0, #16]
   16ccc:	bl	16b3c <flatcc_builder_create_string@@Base>
   16cd0:	subs	r5, r0, #0
   16cd4:	beq	16d50 <flatcc_builder_end_string@@Base+0xb0>
   16cd8:	ldr	r2, [r4, #20]
   16cdc:	mov	r1, #0
   16ce0:	ldr	r0, [r4, #16]
   16ce4:	bl	11fd8 <memset@plt>
   16ce8:	ldr	r3, [r4, #32]
   16cec:	ldr	r2, [r4, #64]	; 0x40
   16cf0:	ldrh	lr, [r4, #130]	; 0x82
   16cf4:	ldr	ip, [r3]
   16cf8:	ldr	r1, [r3, #4]
   16cfc:	ldrh	r0, [r4, #128]	; 0x80
   16d00:	sub	r2, r2, ip
   16d04:	cmp	r2, r1
   16d08:	movcs	r2, r1
   16d0c:	cmp	r0, lr
   16d10:	ldr	r0, [r4, #60]	; 0x3c
   16d14:	ldr	r6, [r3, #8]
   16d18:	str	r2, [r4, #24]
   16d1c:	add	r2, r0, ip
   16d20:	str	r2, [r4, #16]
   16d24:	str	r6, [r4, #20]
   16d28:	ldr	r2, [r4, #156]	; 0x9c
   16d2c:	str	ip, [r4, #28]
   16d30:	str	r1, [r3, #4]
   16d34:	strhcc	lr, [r4, #128]	; 0x80
   16d38:	ldrh	r1, [r3, #12]
   16d3c:	sub	r2, r2, #1
   16d40:	sub	r3, r3, #36	; 0x24
   16d44:	str	r2, [r4, #156]	; 0x9c
   16d48:	strh	r1, [r4, #130]	; 0x82
   16d4c:	str	r3, [r4, #32]
   16d50:	mov	r0, r5
   16d54:	pop	{r4, r5, r6, pc}
   16d58:	ldr	r3, [pc, #72]	; 16da8 <flatcc_builder_end_string@@Base+0x108>
   16d5c:	ldr	r1, [pc, #72]	; 16dac <flatcc_builder_end_string@@Base+0x10c>
   16d60:	add	r3, pc, r3
   16d64:	ldr	r0, [pc, #68]	; 16db0 <flatcc_builder_end_string@@Base+0x110>
   16d68:	add	r3, r3, #1104	; 0x450
   16d6c:	ldr	r2, [pc, #64]	; 16db4 <flatcc_builder_end_string@@Base+0x114>
   16d70:	add	r3, r3, #8
   16d74:	add	r1, pc, r1
   16d78:	add	r0, pc, r0
   16d7c:	bl	11ffc <__assert_fail@plt>
   16d80:	ldr	r3, [pc, #48]	; 16db8 <flatcc_builder_end_string@@Base+0x118>
   16d84:	ldr	r1, [pc, #48]	; 16dbc <flatcc_builder_end_string@@Base+0x11c>
   16d88:	add	r3, pc, r3
   16d8c:	ldr	r0, [pc, #44]	; 16dc0 <flatcc_builder_end_string@@Base+0x120>
   16d90:	add	r3, r3, #1104	; 0x450
   16d94:	ldr	r2, [pc, #40]	; 16dc4 <flatcc_builder_end_string@@Base+0x124>
   16d98:	add	r3, r3, #8
   16d9c:	add	r1, pc, r1
   16da0:	add	r0, pc, r0
   16da4:	bl	11ffc <__assert_fail@plt>
   16da8:	andeq	r1, r0, ip, lsr #8
   16dac:	andeq	r1, r0, r8, ror #22
   16db0:			; <UNDEFINED> instruction: 0x00001eb4
   16db4:	andeq	r0, r0, r5, asr #13
   16db8:	andeq	r1, r0, r4, lsl #8
   16dbc:	andeq	r1, r0, r0, asr #22
   16dc0:	andeq	r1, r0, ip, lsr #26
   16dc4:	andeq	r0, r0, r4, asr #13

00016dc8 <flatcc_builder_string_edit@@Base>:
   16dc8:	ldr	r0, [r0, #16]
   16dcc:	bx	lr

00016dd0 <flatcc_builder_string_len@@Base>:
   16dd0:	ldr	r3, [r0, #32]
   16dd4:	ldr	r0, [r3, #20]
   16dd8:	bx	lr

00016ddc <flatcc_builder_table_add@@Base>:
   16ddc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16de0:	mov	r4, r0
   16de4:	ldr	r0, [r0, #32]
   16de8:	ldrh	r0, [r0, #14]
   16dec:	cmp	r0, #3
   16df0:	bne	16f08 <flatcc_builder_table_add@@Base+0x12c>
   16df4:	ldr	r0, [pc, #308]	; 16f30 <flatcc_builder_table_add@@Base+0x154>
   16df8:	cmp	r1, r0
   16dfc:	bhi	16ee0 <flatcc_builder_table_add@@Base+0x104>
   16e00:	ldrh	r0, [r4, #130]	; 0x82
   16e04:	lsl	r8, r1, #1
   16e08:	cmp	r0, r3
   16e0c:	ldr	r0, [r4, #4]
   16e10:	strhcc	r3, [r4, #130]	; 0x82
   16e14:	add	lr, r0, r8
   16e18:	ldrh	r7, [r0, r8]
   16e1c:	cmp	r7, #0
   16e20:	bne	16eb8 <flatcc_builder_table_add@@Base+0xdc>
   16e24:	ldr	ip, [r4, #12]
   16e28:	ldr	r9, [pc, #260]	; 16f34 <flatcc_builder_table_add@@Base+0x158>
   16e2c:	eor	ip, ip, r1
   16e30:	ldr	r0, [r4, #20]
   16e34:	mul	ip, r9, ip
   16e38:	sub	r6, r3, #1
   16e3c:	eor	ip, ip, r2
   16e40:	rsb	r3, r3, #0
   16e44:	add	r6, r6, r0
   16e48:	and	r6, r6, r3
   16e4c:	mul	ip, r9, ip
   16e50:	ldr	r3, [r4, #24]
   16e54:	add	r2, r2, r6
   16e58:	cmp	r2, r3
   16e5c:	uxth	r5, r1
   16e60:	str	ip, [r4, #12]
   16e64:	str	r2, [r4, #20]
   16e68:	bcs	16e90 <flatcc_builder_table_add@@Base+0xb4>
   16e6c:	add	r3, r6, #4
   16e70:	strh	r3, [lr]
   16e74:	ldrh	r3, [r4, #8]
   16e78:	ldr	r0, [r4, #16]
   16e7c:	cmp	r3, r5
   16e80:	addls	r5, r5, #1
   16e84:	strhls	r5, [r4, #8]
   16e88:	add	r0, r0, r6
   16e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e90:	add	r1, r2, #1
   16e94:	mov	r0, r4
   16e98:	ldr	r2, [pc, #152]	; 16f38 <flatcc_builder_table_add@@Base+0x15c>
   16e9c:	bl	13574 <access_monster_buffer@@Base+0x6ec>
   16ea0:	cmp	r0, #0
   16ea4:	ldreq	lr, [r4, #4]
   16ea8:	addeq	lr, lr, r8
   16eac:	beq	16e6c <flatcc_builder_table_add@@Base+0x90>
   16eb0:	mov	r0, r7
   16eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16eb8:	ldr	r3, [pc, #124]	; 16f3c <flatcc_builder_table_add@@Base+0x160>
   16ebc:	ldr	r1, [pc, #124]	; 16f40 <flatcc_builder_table_add@@Base+0x164>
   16ec0:	add	r3, pc, r3
   16ec4:	ldr	r0, [pc, #120]	; 16f44 <flatcc_builder_table_add@@Base+0x168>
   16ec8:	add	r3, r3, #1136	; 0x470
   16ecc:	ldr	r2, [pc, #116]	; 16f48 <flatcc_builder_table_add@@Base+0x16c>
   16ed0:	add	r3, r3, #4
   16ed4:	add	r1, pc, r1
   16ed8:	add	r0, pc, r0
   16edc:	bl	11ffc <__assert_fail@plt>
   16ee0:	ldr	r3, [pc, #100]	; 16f4c <flatcc_builder_table_add@@Base+0x170>
   16ee4:	ldr	r1, [pc, #100]	; 16f50 <flatcc_builder_table_add@@Base+0x174>
   16ee8:	add	r3, pc, r3
   16eec:	ldr	r0, [pc, #96]	; 16f54 <flatcc_builder_table_add@@Base+0x178>
   16ef0:	add	r3, r3, #1136	; 0x470
   16ef4:	ldr	r2, [pc, #92]	; 16f58 <flatcc_builder_table_add@@Base+0x17c>
   16ef8:	add	r3, r3, #4
   16efc:	add	r1, pc, r1
   16f00:	add	r0, pc, r0
   16f04:	bl	11ffc <__assert_fail@plt>
   16f08:	ldr	r3, [pc, #76]	; 16f5c <flatcc_builder_table_add@@Base+0x180>
   16f0c:	ldr	r1, [pc, #76]	; 16f60 <flatcc_builder_table_add@@Base+0x184>
   16f10:	add	r3, pc, r3
   16f14:	ldr	r0, [pc, #72]	; 16f64 <flatcc_builder_table_add@@Base+0x188>
   16f18:	add	r3, r3, #1136	; 0x470
   16f1c:	ldr	r2, [pc, #68]	; 16f68 <flatcc_builder_table_add@@Base+0x18c>
   16f20:	add	r3, r3, #4
   16f24:	add	r1, pc, r1
   16f28:	add	r0, pc, r0
   16f2c:	bl	11ffc <__assert_fail@plt>
   16f30:	strdeq	r7, [r0], -ip
   16f34:			; <UNDEFINED> instruction: 0x9e3779b1
   16f38:	strdeq	pc, [r0], -ip
   16f3c:	andeq	r1, r0, ip, asr #5
   16f40:	andeq	r1, r0, r8, lsl #20
   16f44:	andeq	r1, r0, ip, lsl #21
   16f48:	strdeq	r0, [r0], -r8
   16f4c:	andeq	r1, r0, r4, lsr #5
   16f50:	andeq	r1, r0, r0, ror #19
   16f54:	andeq	r1, r0, r0, asr sp
   16f58:	andeq	r0, r0, lr, ror #13
   16f5c:	andeq	r1, r0, ip, ror r2
   16f60:			; <UNDEFINED> instruction: 0x000019b8
   16f64:	muleq	r0, r0, ip
   16f68:	andeq	r0, r0, sp, ror #13

00016f6c <flatcc_builder_table_edit@@Base>:
   16f6c:	ldr	r3, [r0, #32]
   16f70:	ldrh	r3, [r3, #14]
   16f74:	cmp	r3, #3
   16f78:	bne	16f90 <flatcc_builder_table_edit@@Base+0x24>
   16f7c:	ldr	r3, [r0, #20]
   16f80:	ldr	r0, [r0, #16]
   16f84:	sub	r1, r3, r1
   16f88:	add	r0, r0, r1
   16f8c:	bx	lr
   16f90:	ldr	r3, [pc, #32]	; 16fb8 <flatcc_builder_table_edit@@Base+0x4c>
   16f94:	ldr	r1, [pc, #32]	; 16fbc <flatcc_builder_table_edit@@Base+0x50>
   16f98:	ldr	r0, [pc, #32]	; 16fc0 <flatcc_builder_table_edit@@Base+0x54>
   16f9c:	add	r3, pc, r3
   16fa0:	push	{r4, lr}
   16fa4:	add	r3, r3, #1168	; 0x490
   16fa8:	ldr	r2, [pc, #20]	; 16fc4 <flatcc_builder_table_edit@@Base+0x58>
   16fac:	add	r1, pc, r1
   16fb0:	add	r0, pc, r0
   16fb4:	bl	11ffc <__assert_fail@plt>
   16fb8:	strdeq	r1, [r0], -r0
   16fbc:	andeq	r1, r0, r0, lsr r9
   16fc0:	andeq	r1, r0, r8, lsl #24
   16fc4:	andeq	r0, r0, r2, lsl #14

00016fc8 <flatcc_builder_table_add_copy@@Base>:
   16fc8:	push	{r4, r5, r6, lr}
   16fcc:	mov	r4, r3
   16fd0:	mov	r6, r2
   16fd4:	ldrh	r3, [sp, #16]
   16fd8:	mov	r2, r4
   16fdc:	bl	16ddc <flatcc_builder_table_add@@Base>
   16fe0:	subs	r5, r0, #0
   16fe4:	beq	16ff4 <flatcc_builder_table_add_copy@@Base+0x2c>
   16fe8:	mov	r2, r4
   16fec:	mov	r1, r6
   16ff0:	bl	11f6c <memcpy@plt>
   16ff4:	mov	r0, r5
   16ff8:	pop	{r4, r5, r6, pc}

00016ffc <flatcc_builder_table_add_offset@@Base>:
   16ffc:	ldr	r3, [r0, #32]
   17000:	push	{r4, r5, r6, r7, r8, lr}
   17004:	ldrh	r3, [r3, #14]
   17008:	cmp	r3, #3
   1700c:	bne	17124 <flatcc_builder_table_add_offset@@Base+0x128>
   17010:	ldr	r3, [pc, #308]	; 1714c <flatcc_builder_table_add_offset@@Base+0x150>
   17014:	cmp	r1, r3
   17018:	bhi	170fc <flatcc_builder_table_add_offset@@Base+0x100>
   1701c:	ldr	r3, [r0, #4]
   17020:	lsl	r7, r1, #1
   17024:	mov	r4, r0
   17028:	ldrh	r6, [r3, r7]
   1702c:	add	ip, r3, r7
   17030:	cmp	r6, #0
   17034:	bne	170d4 <flatcc_builder_table_add_offset@@Base+0xd8>
   17038:	ldr	r3, [r0, #12]
   1703c:	ldr	r2, [pc, #268]	; 17150 <flatcc_builder_table_add_offset@@Base+0x154>
   17040:	eor	r3, r3, r1
   17044:	ldr	r5, [r0, #20]
   17048:	mul	r3, r2, r3
   1704c:	add	r5, r5, #3
   17050:	eor	r3, r3, #4
   17054:	bic	r5, r5, #3
   17058:	mul	r3, r2, r3
   1705c:	ldr	lr, [r0, #24]
   17060:	add	r2, r5, #4
   17064:	cmp	r2, lr
   17068:	uxth	r8, r1
   1706c:	str	r3, [r0, #12]
   17070:	str	r2, [r0, #20]
   17074:	bhi	170b0 <flatcc_builder_table_add_offset@@Base+0xb4>
   17078:	uxth	r2, r5
   1707c:	add	r3, r2, #4
   17080:	strh	r3, [ip]
   17084:	ldrh	r3, [r4, #8]
   17088:	ldr	r0, [r4, #16]
   1708c:	cmp	r3, r8
   17090:	ldr	r3, [r4]
   17094:	addls	r1, r8, #1
   17098:	strhls	r1, [r4, #8]
   1709c:	add	r1, r3, #2
   170a0:	str	r1, [r4]
   170a4:	add	r0, r0, r5
   170a8:	strh	r2, [r3]
   170ac:	pop	{r4, r5, r6, r7, r8, pc}
   170b0:	mov	r1, r2
   170b4:	ldr	r2, [pc, #152]	; 17154 <flatcc_builder_table_add_offset@@Base+0x158>
   170b8:	bl	13574 <access_monster_buffer@@Base+0x6ec>
   170bc:	cmp	r0, #0
   170c0:	ldreq	ip, [r4, #4]
   170c4:	addeq	ip, ip, r7
   170c8:	beq	17078 <flatcc_builder_table_add_offset@@Base+0x7c>
   170cc:	mov	r0, r6
   170d0:	pop	{r4, r5, r6, r7, r8, pc}
   170d4:	ldr	r3, [pc, #124]	; 17158 <flatcc_builder_table_add_offset@@Base+0x15c>
   170d8:	ldr	r1, [pc, #124]	; 1715c <flatcc_builder_table_add_offset@@Base+0x160>
   170dc:	add	r3, pc, r3
   170e0:	ldr	r0, [pc, #120]	; 17160 <flatcc_builder_table_add_offset@@Base+0x164>
   170e4:	add	r3, r3, #1184	; 0x4a0
   170e8:	ldr	r2, [pc, #116]	; 17164 <flatcc_builder_table_add_offset@@Base+0x168>
   170ec:	add	r3, r3, #12
   170f0:	add	r1, pc, r1
   170f4:	add	r0, pc, r0
   170f8:	bl	11ffc <__assert_fail@plt>
   170fc:	ldr	r3, [pc, #100]	; 17168 <flatcc_builder_table_add_offset@@Base+0x16c>
   17100:	ldr	r1, [pc, #100]	; 1716c <flatcc_builder_table_add_offset@@Base+0x170>
   17104:	add	r3, pc, r3
   17108:	ldr	r0, [pc, #96]	; 17170 <flatcc_builder_table_add_offset@@Base+0x174>
   1710c:	add	r3, r3, #1184	; 0x4a0
   17110:	ldr	r2, [pc, #92]	; 17174 <flatcc_builder_table_add_offset@@Base+0x178>
   17114:	add	r3, r3, #12
   17118:	add	r1, pc, r1
   1711c:	add	r0, pc, r0
   17120:	bl	11ffc <__assert_fail@plt>
   17124:	ldr	r3, [pc, #76]	; 17178 <flatcc_builder_table_add_offset@@Base+0x17c>
   17128:	ldr	r1, [pc, #76]	; 1717c <flatcc_builder_table_add_offset@@Base+0x180>
   1712c:	add	r3, pc, r3
   17130:	ldr	r0, [pc, #72]	; 17180 <flatcc_builder_table_add_offset@@Base+0x184>
   17134:	add	r3, r3, #1184	; 0x4a0
   17138:	ldr	r2, [pc, #68]	; 17184 <flatcc_builder_table_add_offset@@Base+0x188>
   1713c:	add	r3, r3, #12
   17140:	add	r1, pc, r1
   17144:	add	r0, pc, r0
   17148:	bl	11ffc <__assert_fail@plt>
   1714c:	strdeq	r7, [r0], -ip
   17150:			; <UNDEFINED> instruction: 0x9e3779b1
   17154:	strdeq	pc, [r0], -ip
   17158:	strheq	r1, [r0], -r0
   1715c:	andeq	r1, r0, ip, ror #15
   17160:	andeq	r1, r0, r0, ror r8
   17164:	andeq	r0, r0, fp, lsl r7
   17168:	andeq	r1, r0, r8, lsl #1
   1716c:	andeq	r1, r0, r4, asr #15
   17170:	andeq	r1, r0, r4, lsr fp
   17174:	andeq	r0, r0, r4, lsl r7
   17178:	andeq	r1, r0, r0, rrx
   1717c:	muleq	r0, ip, r7
   17180:	andeq	r1, r0, r4, ror sl
   17184:	andeq	r0, r0, r3, lsl r7

00017188 <flatcc_builder_table_add_union@@Base>:
   17188:	push	{r4, r5, r6, r7, lr}
   1718c:	sub	sp, sp, #12
   17190:	add	ip, sp, #8
   17194:	stmdb	ip, {r2, r3}
   17198:	ldr	r3, [r0, #32]
   1719c:	ldrb	r5, [sp]
   171a0:	ldr	r6, [sp, #4]
   171a4:	ldrh	r3, [r3, #14]
   171a8:	cmp	r3, #3
   171ac:	bne	17234 <flatcc_builder_table_add_union@@Base+0xac>
   171b0:	cmp	r5, #0
   171b4:	mov	r4, r0
   171b8:	mov	r7, r1
   171bc:	beq	17204 <flatcc_builder_table_add_union@@Base+0x7c>
   171c0:	cmp	r6, #0
   171c4:	beq	171d8 <flatcc_builder_table_add_union@@Base+0x50>
   171c8:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   171cc:	cmp	r0, #0
   171d0:	strne	r6, [r0]
   171d4:	beq	17284 <flatcc_builder_table_add_union@@Base+0xfc>
   171d8:	mov	r3, #1
   171dc:	sub	r1, r7, #1
   171e0:	mov	r0, r4
   171e4:	mov	r2, r3
   171e8:	bl	16ddc <flatcc_builder_table_add@@Base>
   171ec:	cmp	r0, #0
   171f0:	beq	1725c <flatcc_builder_table_add_union@@Base+0xd4>
   171f4:	strb	r5, [r0]
   171f8:	mov	r0, #0
   171fc:	add	sp, sp, #12
   17200:	pop	{r4, r5, r6, r7, pc}
   17204:	cmp	r6, #0
   17208:	beq	171d8 <flatcc_builder_table_add_union@@Base+0x50>
   1720c:	ldr	r3, [pc, #152]	; 172ac <flatcc_builder_table_add_union@@Base+0x124>
   17210:	ldr	r1, [pc, #152]	; 172b0 <flatcc_builder_table_add_union@@Base+0x128>
   17214:	add	r3, pc, r3
   17218:	ldr	r0, [pc, #148]	; 172b4 <flatcc_builder_table_add_union@@Base+0x12c>
   1721c:	add	r3, r3, #1216	; 0x4c0
   17220:	ldr	r2, [pc, #144]	; 172b8 <flatcc_builder_table_add_union@@Base+0x130>
   17224:	add	r3, r3, #12
   17228:	add	r1, pc, r1
   1722c:	add	r0, pc, r0
   17230:	bl	11ffc <__assert_fail@plt>
   17234:	ldr	r3, [pc, #128]	; 172bc <flatcc_builder_table_add_union@@Base+0x134>
   17238:	ldr	r1, [pc, #128]	; 172c0 <flatcc_builder_table_add_union@@Base+0x138>
   1723c:	add	r3, pc, r3
   17240:	ldr	r0, [pc, #124]	; 172c4 <flatcc_builder_table_add_union@@Base+0x13c>
   17244:	add	r3, r3, #1216	; 0x4c0
   17248:	ldr	r2, [pc, #120]	; 172c8 <flatcc_builder_table_add_union@@Base+0x140>
   1724c:	add	r3, r3, #12
   17250:	add	r1, pc, r1
   17254:	add	r0, pc, r0
   17258:	bl	11ffc <__assert_fail@plt>
   1725c:	ldr	r3, [pc, #104]	; 172cc <flatcc_builder_table_add_union@@Base+0x144>
   17260:	ldr	r1, [pc, #104]	; 172d0 <flatcc_builder_table_add_union@@Base+0x148>
   17264:	add	r3, pc, r3
   17268:	ldr	r0, [pc, #100]	; 172d4 <flatcc_builder_table_add_union@@Base+0x14c>
   1726c:	add	r3, r3, #1216	; 0x4c0
   17270:	ldr	r2, [pc, #96]	; 172d8 <flatcc_builder_table_add_union@@Base+0x150>
   17274:	add	r3, r3, #12
   17278:	add	r1, pc, r1
   1727c:	add	r0, pc, r0
   17280:	bl	11ffc <__assert_fail@plt>
   17284:	ldr	r3, [pc, #80]	; 172dc <flatcc_builder_table_add_union@@Base+0x154>
   17288:	ldr	r1, [pc, #80]	; 172e0 <flatcc_builder_table_add_union@@Base+0x158>
   1728c:	add	r3, pc, r3
   17290:	ldr	r0, [pc, #76]	; 172e4 <flatcc_builder_table_add_union@@Base+0x15c>
   17294:	add	r3, r3, #1216	; 0x4c0
   17298:	ldr	r2, [pc, #72]	; 172e8 <flatcc_builder_table_add_union@@Base+0x160>
   1729c:	add	r3, r3, #12
   172a0:	add	r1, pc, r1
   172a4:	add	r0, pc, r0
   172a8:	bl	11ffc <__assert_fail@plt>
   172ac:	andeq	r0, r0, r8, ror pc
   172b0:			; <UNDEFINED> instruction: 0x000016b4
   172b4:	andeq	r1, r0, r8, ror #20
   172b8:	andeq	r0, r0, pc, ror #11
   172bc:	andeq	r0, r0, r0, asr pc
   172c0:	andeq	r1, r0, ip, lsl #13
   172c4:	andeq	r1, r0, r4, ror #18
   172c8:	andeq	r0, r0, lr, ror #11
   172cc:	andeq	r0, r0, r8, lsr #30
   172d0:	andeq	r1, r0, r4, ror #12
   172d4:	andeq	r1, r0, r8, asr #20
   172d8:	strdeq	r0, [r0], -r6
   172dc:	andeq	r0, r0, r0, lsl #30
   172e0:	andeq	r1, r0, ip, lsr r6
   172e4:	andeq	r1, r0, r4, lsl sl
   172e8:	strdeq	r0, [r0], -r2

000172ec <flatcc_builder_table_add_union_vector@@Base>:
   172ec:	push	{r4, r5, r6, r7, lr}
   172f0:	sub	sp, sp, #12
   172f4:	add	ip, sp, #8
   172f8:	stmdb	ip, {r2, r3}
   172fc:	ldr	r3, [r0, #32]
   17300:	ldr	r4, [sp]
   17304:	ldr	r6, [sp, #4]
   17308:	ldrh	r3, [r3, #14]
   1730c:	cmp	r3, #3
   17310:	bne	173b4 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   17314:	clz	r3, r6
   17318:	clz	r2, r4
   1731c:	lsr	r3, r3, #5
   17320:	lsr	r2, r2, #5
   17324:	cmp	r2, r3
   17328:	beq	17348 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   1732c:	adds	r4, r4, #0
   17330:	movne	r4, #1
   17334:	cmp	r4, r3
   17338:	mvnne	r0, #0
   1733c:	beq	173dc <flatcc_builder_table_add_union_vector@@Base+0xf0>
   17340:	add	sp, sp, #12
   17344:	pop	{r4, r5, r6, r7, pc}
   17348:	cmp	r4, #0
   1734c:	moveq	r0, r4
   17350:	beq	17340 <flatcc_builder_table_add_union_vector@@Base+0x54>
   17354:	mov	r7, r1
   17358:	sub	r1, r1, #1
   1735c:	mov	r5, r0
   17360:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   17364:	cmp	r0, #0
   17368:	beq	17404 <flatcc_builder_table_add_union_vector@@Base+0x118>
   1736c:	str	r4, [r0]
   17370:	mov	r1, r7
   17374:	mov	r0, r5
   17378:	bl	16ffc <flatcc_builder_table_add_offset@@Base>
   1737c:	cmp	r0, #0
   17380:	strne	r6, [r0]
   17384:	movne	r0, #0
   17388:	bne	17340 <flatcc_builder_table_add_union_vector@@Base+0x54>
   1738c:	ldr	r3, [pc, #152]	; 1742c <flatcc_builder_table_add_union_vector@@Base+0x140>
   17390:	ldr	r1, [pc, #152]	; 17430 <flatcc_builder_table_add_union_vector@@Base+0x144>
   17394:	add	r3, pc, r3
   17398:	ldr	r0, [pc, #148]	; 17434 <flatcc_builder_table_add_union_vector@@Base+0x148>
   1739c:	add	r3, r3, #1248	; 0x4e0
   173a0:	ldr	r2, [pc, #144]	; 17438 <flatcc_builder_table_add_union_vector@@Base+0x14c>
   173a4:	add	r3, r3, #12
   173a8:	add	r1, pc, r1
   173ac:	add	r0, pc, r0
   173b0:	bl	11ffc <__assert_fail@plt>
   173b4:	ldr	r3, [pc, #128]	; 1743c <flatcc_builder_table_add_union_vector@@Base+0x150>
   173b8:	ldr	r1, [pc, #128]	; 17440 <flatcc_builder_table_add_union_vector@@Base+0x154>
   173bc:	add	r3, pc, r3
   173c0:	ldr	r0, [pc, #124]	; 17444 <flatcc_builder_table_add_union_vector@@Base+0x158>
   173c4:	add	r3, r3, #1248	; 0x4e0
   173c8:	mov	r2, #1536	; 0x600
   173cc:	add	r3, r3, #12
   173d0:	add	r1, pc, r1
   173d4:	add	r0, pc, r0
   173d8:	bl	11ffc <__assert_fail@plt>
   173dc:	ldr	r3, [pc, #100]	; 17448 <flatcc_builder_table_add_union_vector@@Base+0x15c>
   173e0:	ldr	r1, [pc, #100]	; 1744c <flatcc_builder_table_add_union_vector@@Base+0x160>
   173e4:	add	r3, pc, r3
   173e8:	ldr	r0, [pc, #96]	; 17450 <flatcc_builder_table_add_union_vector@@Base+0x164>
   173ec:	add	r3, r3, #1248	; 0x4e0
   173f0:	ldr	r2, [pc, #92]	; 17454 <flatcc_builder_table_add_union_vector@@Base+0x168>
   173f4:	add	r3, r3, #12
   173f8:	add	r1, pc, r1
   173fc:	add	r0, pc, r0
   17400:	bl	11ffc <__assert_fail@plt>
   17404:	ldr	r3, [pc, #76]	; 17458 <flatcc_builder_table_add_union_vector@@Base+0x16c>
   17408:	ldr	r1, [pc, #76]	; 1745c <flatcc_builder_table_add_union_vector@@Base+0x170>
   1740c:	add	r3, pc, r3
   17410:	ldr	r0, [pc, #72]	; 17460 <flatcc_builder_table_add_union_vector@@Base+0x174>
   17414:	add	r3, r3, #1248	; 0x4e0
   17418:	ldr	r2, [pc, #68]	; 17464 <flatcc_builder_table_add_union_vector@@Base+0x178>
   1741c:	add	r3, r3, #12
   17420:	add	r1, pc, r1
   17424:	add	r0, pc, r0
   17428:	bl	11ffc <__assert_fail@plt>
   1742c:	strdeq	r0, [r0], -r8
   17430:	andeq	r1, r0, r4, lsr r5
   17434:	andeq	r1, r0, ip, lsl #18
   17438:	andeq	r0, r0, r8, lsl #12
   1743c:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   17440:	andeq	r1, r0, ip, lsl #10
   17444:	andeq	r1, r0, r4, ror #15
   17448:	andeq	r0, r0, r8, lsr #27
   1744c:	andeq	r1, r0, r4, ror #9
   17450:	ldrdeq	r1, [r0], -r4
   17454:	andeq	r0, r0, r1, lsl #12
   17458:	andeq	r0, r0, r0, lsl #27
   1745c:			; <UNDEFINED> instruction: 0x000014bc
   17460:	muleq	r0, r4, r8
   17464:	andeq	r0, r0, r4, lsl #12

00017468 <flatcc_builder_push_buffer_alignment@@Base>:
   17468:	mov	r3, r0
   1746c:	mov	r2, #4
   17470:	ldrh	r0, [r0, #128]	; 0x80
   17474:	strh	r2, [r3, #128]	; 0x80
   17478:	bx	lr

0001747c <flatcc_builder_pop_buffer_alignment@@Base>:
   1747c:	ldrh	r3, [r0, #128]	; 0x80
   17480:	cmp	r3, r1
   17484:	strhcc	r1, [r0, #128]	; 0x80
   17488:	bx	lr

0001748c <flatcc_builder_get_buffer_alignment@@Base>:
   1748c:	ldrh	r0, [r0, #128]	; 0x80
   17490:	bx	lr

00017494 <flatcc_builder_set_vtable_clustering@@Base>:
   17494:	clz	r1, r1
   17498:	lsr	r1, r1, #5
   1749c:	str	r1, [r0, #180]	; 0xb4
   174a0:	bx	lr

000174a4 <flatcc_builder_set_block_align@@Base>:
   174a4:	strh	r1, [r0, #132]	; 0x84
   174a8:	bx	lr

000174ac <flatcc_builder_get_level@@Base>:
   174ac:	ldr	r0, [r0, #156]	; 0x9c
   174b0:	bx	lr

000174b4 <flatcc_builder_set_max_level@@Base>:
   174b4:	ldr	r3, [r0, #160]	; 0xa0
   174b8:	str	r1, [r0, #176]	; 0xb0
   174bc:	cmp	r1, r3
   174c0:	strgt	r1, [r0, #160]	; 0xa0
   174c4:	bx	lr

000174c8 <flatcc_builder_get_buffer_size@@Base>:
   174c8:	ldr	r2, [r0, #140]	; 0x8c
   174cc:	ldr	r0, [r0, #136]	; 0x88
   174d0:	sub	r0, r2, r0
   174d4:	bx	lr

000174d8 <flatcc_builder_get_buffer_start@@Base>:
   174d8:	ldr	r0, [r0, #136]	; 0x88
   174dc:	bx	lr

000174e0 <flatcc_builder_get_buffer_end@@Base>:
   174e0:	ldr	r0, [r0, #140]	; 0x8c
   174e4:	bx	lr

000174e8 <flatcc_builder_set_vtable_cache_limit@@Base>:
   174e8:	str	r1, [r0, #172]	; 0xac
   174ec:	bx	lr

000174f0 <flatcc_builder_set_identifier@@Base>:
   174f0:	ldr	r3, [pc, #32]	; 17518 <flatcc_builder_set_identifier@@Base+0x28>
   174f4:	cmp	r1, #0
   174f8:	add	r3, pc, r3
   174fc:	beq	1750c <flatcc_builder_set_identifier@@Base+0x1c>
   17500:	ldr	r3, [r1]
   17504:	str	r3, [r0, #168]	; 0xa8
   17508:	bx	lr
   1750c:	ldr	r2, [pc, #8]	; 1751c <flatcc_builder_set_identifier@@Base+0x2c>
   17510:	ldr	r1, [r3, r2]
   17514:	b	17500 <flatcc_builder_set_identifier@@Base+0x10>
   17518:	andeq	r1, r1, r0, lsl #22
   1751c:	andeq	r0, r0, r8, asr #32

00017520 <flatcc_builder_get_type@@Base>:
   17520:	ldr	r0, [r0, #32]
   17524:	cmp	r0, #0
   17528:	ldrhne	r0, [r0, #14]
   1752c:	bx	lr

00017530 <flatcc_builder_get_type_at@@Base>:
   17530:	cmp	r1, #0
   17534:	ble	1755c <flatcc_builder_get_type_at@@Base+0x2c>
   17538:	ldr	r3, [r0, #156]	; 0x9c
   1753c:	cmp	r1, r3
   17540:	bgt	1755c <flatcc_builder_get_type_at@@Base+0x2c>
   17544:	sub	r1, r1, r3
   17548:	ldr	r3, [r0, #32]
   1754c:	add	r1, r1, r1, lsl #3
   17550:	add	r1, r3, r1, lsl #2
   17554:	ldrh	r0, [r1, #14]
   17558:	bx	lr
   1755c:	mov	r0, #0
   17560:	bx	lr

00017564 <flatcc_builder_get_direct_buffer@@Base>:
   17564:	ldr	r3, [r0, #184]	; 0xb8
   17568:	cmp	r3, #0
   1756c:	beq	17580 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   17570:	ldr	r2, [r0, #188]	; 0xbc
   17574:	ldr	r3, [r0, #192]	; 0xc0
   17578:	cmp	r2, r3
   1757c:	beq	17594 <flatcc_builder_get_direct_buffer@@Base+0x30>
   17580:	cmp	r1, #0
   17584:	movne	r0, #0
   17588:	strne	r0, [r1]
   1758c:	moveq	r0, r1
   17590:	bx	lr
   17594:	cmp	r1, #0
   17598:	ldrne	r3, [r0, #212]	; 0xd4
   1759c:	ldr	r0, [r0, #196]	; 0xc4
   175a0:	strne	r3, [r1]
   175a4:	bx	lr

000175a8 <flatcc_builder_copy_buffer@@Base>:
   175a8:	ldr	r3, [r0, #184]	; 0xb8
   175ac:	cmp	r3, #0
   175b0:	beq	175f0 <flatcc_builder_copy_buffer@@Base+0x48>
   175b4:	push	{r4, lr}
   175b8:	add	r0, r0, #188	; 0xbc
   175bc:	bl	17cc0 <flatcc_emitter_copy_buffer@@Base>
   175c0:	cmp	r0, #0
   175c4:	popne	{r4, pc}
   175c8:	ldr	r3, [pc, #40]	; 175f8 <flatcc_builder_copy_buffer@@Base+0x50>
   175cc:	ldr	r1, [pc, #40]	; 175fc <flatcc_builder_copy_buffer@@Base+0x54>
   175d0:	add	r3, pc, r3
   175d4:	ldr	r0, [pc, #36]	; 17600 <flatcc_builder_copy_buffer@@Base+0x58>
   175d8:	add	r3, r3, #1296	; 0x510
   175dc:	ldr	r2, [pc, #32]	; 17604 <flatcc_builder_copy_buffer@@Base+0x5c>
   175e0:	add	r3, r3, #4
   175e4:	add	r1, pc, r1
   175e8:	add	r0, pc, r0
   175ec:	bl	11ffc <__assert_fail@plt>
   175f0:	mov	r0, r3
   175f4:	bx	lr
   175f8:			; <UNDEFINED> instruction: 0x00000bbc
   175fc:	strdeq	r1, [r0], -r8
   17600:	andeq	r1, r0, r0, lsl r7
   17604:	andeq	r0, r0, r6, lsl #15

00017608 <flatcc_builder_finalize_buffer@@Base>:
   17608:	push	{r4, r5, r6, lr}
   1760c:	mov	r5, r1
   17610:	mov	r6, r0
   17614:	bl	174c8 <flatcc_builder_get_buffer_size@@Base>
   17618:	cmp	r5, #0
   1761c:	strne	r0, [r5]
   17620:	mov	r4, r0
   17624:	bl	11f9c <malloc@plt>
   17628:	subs	r5, r0, #0
   1762c:	beq	17650 <flatcc_builder_finalize_buffer@@Base+0x48>
   17630:	mov	r2, r4
   17634:	mov	r0, r6
   17638:	mov	r1, r5
   1763c:	bl	175a8 <flatcc_builder_copy_buffer@@Base>
   17640:	cmp	r0, #0
   17644:	beq	17674 <flatcc_builder_finalize_buffer@@Base+0x6c>
   17648:	mov	r0, r5
   1764c:	pop	{r4, r5, r6, pc}
   17650:	ldr	r3, [pc, #64]	; 17698 <flatcc_builder_finalize_buffer@@Base+0x90>
   17654:	ldr	r1, [pc, #64]	; 1769c <flatcc_builder_finalize_buffer@@Base+0x94>
   17658:	ldr	r0, [pc, #64]	; 176a0 <flatcc_builder_finalize_buffer@@Base+0x98>
   1765c:	add	r3, pc, r3
   17660:	ldr	r2, [pc, #60]	; 176a4 <flatcc_builder_finalize_buffer@@Base+0x9c>
   17664:	add	r3, r3, #1328	; 0x530
   17668:	add	r1, pc, r1
   1766c:	add	r0, pc, r0
   17670:	bl	11ffc <__assert_fail@plt>
   17674:	ldr	r3, [pc, #44]	; 176a8 <flatcc_builder_finalize_buffer@@Base+0xa0>
   17678:	ldr	r1, [pc, #44]	; 176ac <flatcc_builder_finalize_buffer@@Base+0xa4>
   1767c:	ldr	r0, [pc, #44]	; 176b0 <flatcc_builder_finalize_buffer@@Base+0xa8>
   17680:	add	r3, pc, r3
   17684:	ldr	r2, [pc, #40]	; 176b4 <flatcc_builder_finalize_buffer@@Base+0xac>
   17688:	add	r3, r3, #1328	; 0x530
   1768c:	add	r1, pc, r1
   17690:	add	r0, pc, r0
   17694:	bl	11ffc <__assert_fail@plt>
   17698:	andeq	r0, r0, r0, lsr fp
   1769c:	andeq	r1, r0, r4, ror r2
   176a0:	strdeq	r1, [r0], -r8
   176a4:	muleq	r0, r8, r7
   176a8:	andeq	r0, r0, ip, lsl #22
   176ac:	andeq	r1, r0, r0, asr r2
   176b0:	ldrdeq	r1, [r0], -r4
   176b4:	muleq	r0, ip, r7

000176b8 <flatcc_builder_finalize_aligned_buffer@@Base>:
   176b8:	push	{r4, r5, r6, r7, lr}
   176bc:	sub	sp, sp, #12
   176c0:	mov	r6, r1
   176c4:	mov	r7, r0
   176c8:	bl	174c8 <flatcc_builder_get_buffer_size@@Base>
   176cc:	cmp	r6, #0
   176d0:	strne	r0, [r6]
   176d4:	mov	r4, r0
   176d8:	mov	r0, r7
   176dc:	bl	1748c <flatcc_builder_get_buffer_alignment@@Base>
   176e0:	sub	r4, r4, #1
   176e4:	mov	r1, r0
   176e8:	rsb	r3, r0, #0
   176ec:	add	r4, r4, r0
   176f0:	add	r0, sp, #8
   176f4:	cmp	r1, #4
   176f8:	and	r4, r4, r3
   176fc:	mov	r3, #0
   17700:	movcc	r1, #4
   17704:	mov	r2, r4
   17708:	str	r3, [r0, #-4]!
   1770c:	bl	11fcc <posix_memalign@plt>
   17710:	cmp	r0, #0
   17714:	beq	17744 <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   17718:	ldr	r0, [sp, #4]
   1771c:	cmp	r0, #0
   17720:	beq	17728 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   17724:	bl	11f60 <free@plt>
   17728:	cmp	r6, #0
   1772c:	moveq	r5, r6
   17730:	movne	r5, #0
   17734:	strne	r5, [r6]
   17738:	mov	r0, r5
   1773c:	add	sp, sp, #12
   17740:	pop	{r4, r5, r6, r7, pc}
   17744:	ldr	r5, [sp, #4]
   17748:	cmp	r5, #0
   1774c:	beq	17728 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   17750:	mov	r2, r4
   17754:	mov	r0, r7
   17758:	mov	r1, r5
   1775c:	bl	175a8 <flatcc_builder_copy_buffer@@Base>
   17760:	cmp	r0, #0
   17764:	bne	17738 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
   17768:	mov	r0, r5
   1776c:	b	17724 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>

00017770 <flatcc_builder_aligned_alloc@@Base>:
   17770:	push	{r4, lr}
   17774:	sub	sp, sp, #8
   17778:	add	r3, sp, #8
   1777c:	cmp	r0, #4
   17780:	mov	r4, #0
   17784:	mov	r2, r1
   17788:	str	r4, [r3, #-4]!
   1778c:	movcs	r1, r0
   17790:	movcc	r1, #4
   17794:	mov	r0, r3
   17798:	bl	11fcc <posix_memalign@plt>
   1779c:	cmp	r0, r4
   177a0:	ldr	r0, [sp, #4]
   177a4:	beq	177b8 <flatcc_builder_aligned_alloc@@Base+0x48>
   177a8:	cmp	r0, #0
   177ac:	beq	177b8 <flatcc_builder_aligned_alloc@@Base+0x48>
   177b0:	bl	11f60 <free@plt>
   177b4:	mov	r0, r4
   177b8:	add	sp, sp, #8
   177bc:	pop	{r4, pc}

000177c0 <flatcc_builder_aligned_free@@Base>:
   177c0:	b	11f60 <free@plt>

000177c4 <flatcc_builder_get_emit_context@@Base>:
   177c4:	ldr	r0, [r0, #36]	; 0x24
   177c8:	bx	lr

000177cc <flatcc_emitter_recycle_page@@Base>:
   177cc:	ldr	r3, [r0]
   177d0:	cmp	r3, r1
   177d4:	beq	1781c <flatcc_emitter_recycle_page@@Base+0x50>
   177d8:	ldr	r2, [r0, #4]
   177dc:	cmp	r1, r2
   177e0:	beq	1781c <flatcc_emitter_recycle_page@@Base+0x50>
   177e4:	ldr	ip, [r1, #2944]	; 0xb80
   177e8:	ldr	r2, [r1, #2948]	; 0xb84
   177ec:	push	{lr}		; (str lr, [sp, #-4]!)
   177f0:	mov	r0, #0
   177f4:	str	r2, [ip, #2948]	; 0xb84
   177f8:	ldr	r2, [r3, #2948]	; 0xb84
   177fc:	ldr	lr, [r1, #2948]	; 0xb84
   17800:	str	ip, [lr, #2944]	; 0xb80
   17804:	str	r3, [r1, #2944]	; 0xb80
   17808:	str	r2, [r1, #2948]	; 0xb84
   1780c:	str	r1, [r2, #2944]	; 0xb80
   17810:	ldr	r3, [r1, #2944]	; 0xb80
   17814:	str	r1, [r3, #2948]	; 0xb84
   17818:	pop	{pc}		; (ldr pc, [sp], #4)
   1781c:	mvn	r0, #0
   17820:	bx	lr

00017824 <flatcc_emitter_reset@@Base>:
   17824:	ldr	r2, [r0]
   17828:	cmp	r2, #0
   1782c:	bxeq	lr
   17830:	ldr	r3, [r0, #32]
   17834:	mov	r1, #1472	; 0x5c0
   17838:	push	{r4, lr}
   1783c:	cmp	r3, #0
   17840:	str	r1, [r0, #12]
   17844:	str	r1, [r0, #20]
   17848:	ldr	r1, [r0, #24]
   1784c:	add	ip, r2, #1472	; 0x5c0
   17850:	moveq	r3, r1
   17854:	stmib	r0, {r2, ip}
   17858:	str	ip, [r0, #16]
   1785c:	add	ip, r3, r3, lsl #1
   17860:	lsr	r3, r1, #2
   17864:	add	r3, r3, ip, lsr #2
   17868:	ldr	ip, [r0, #28]
   1786c:	ldr	lr, [pc, #104]	; 178dc <flatcc_emitter_reset@@Base+0xb8>
   17870:	cmp	ip, r3, lsl #1
   17874:	mov	r1, #0
   17878:	str	lr, [r2, #2952]	; 0xb88
   1787c:	str	r3, [r0, #32]
   17880:	str	r1, [r0, #24]
   17884:	popls	{r4, pc}
   17888:	ldr	r3, [r2, #2944]	; 0xb80
   1788c:	mov	r4, r0
   17890:	cmp	r2, r3
   17894:	popeq	{r4, pc}
   17898:	ldr	r1, [r3, #2944]	; 0xb80
   1789c:	mov	r0, r3
   178a0:	str	r1, [r2, #2944]	; 0xb80
   178a4:	ldr	r3, [r3, #2944]	; 0xb80
   178a8:	str	r2, [r3, #2948]	; 0xb84
   178ac:	bl	11f60 <free@plt>
   178b0:	ldr	r3, [r4, #28]
   178b4:	ldr	r2, [r4, #32]
   178b8:	sub	r3, r3, #2944	; 0xb80
   178bc:	str	r3, [r4, #28]
   178c0:	cmp	r3, r2, lsl #1
   178c4:	popls	{r4, pc}
   178c8:	ldm	r4, {r1, r2}
   178cc:	ldr	r3, [r2, #2944]	; 0xb80
   178d0:	cmp	r3, r1
   178d4:	bne	17898 <flatcc_emitter_reset@@Base+0x74>
   178d8:	pop	{r4, pc}
   178dc:			; <UNDEFINED> instruction: 0xfffffa40

000178e0 <flatcc_emitter_clear@@Base>:
   178e0:	ldr	r3, [r0]
   178e4:	cmp	r3, #0
   178e8:	bxeq	lr
   178ec:	ldr	r2, [r3, #2948]	; 0xb84
   178f0:	mov	r1, #0
   178f4:	push	{r4, r5, r6, lr}
   178f8:	mov	r5, r0
   178fc:	str	r1, [r2, #2944]	; 0xb80
   17900:	ldr	r4, [r3, #2944]	; 0xb80
   17904:	cmp	r4, r1
   17908:	bne	17914 <flatcc_emitter_clear@@Base+0x34>
   1790c:	b	17944 <flatcc_emitter_clear@@Base+0x64>
   17910:	mov	r4, r3
   17914:	ldr	r0, [r4, #2948]	; 0xb84
   17918:	bl	11f60 <free@plt>
   1791c:	ldr	r3, [r4, #2944]	; 0xb80
   17920:	cmp	r3, #0
   17924:	bne	17910 <flatcc_emitter_clear@@Base+0x30>
   17928:	mov	r0, r4
   1792c:	bl	11f60 <free@plt>
   17930:	mov	r0, r5
   17934:	mov	r2, #36	; 0x24
   17938:	mov	r1, #0
   1793c:	pop	{r4, r5, r6, lr}
   17940:	b	11fd8 <memset@plt>
   17944:	mov	r4, r3
   17948:	b	17928 <flatcc_emitter_clear@@Base+0x48>

0001794c <flatcc_emitter@@Base>:
   1794c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17950:	sub	sp, sp, #12
   17954:	mov	r4, r0
   17958:	ldr	ip, [sp, #48]	; 0x30
   1795c:	ldr	r0, [r0, #24]
   17960:	cmp	r3, #0
   17964:	add	r0, r0, ip
   17968:	str	r0, [r4, #24]
   1796c:	blt	17b30 <flatcc_emitter@@Base+0x1e4>
   17970:	ldr	r0, [r4, #20]
   17974:	cmp	ip, r0
   17978:	bls	17a04 <flatcc_emitter@@Base+0xb8>
   1797c:	cmp	r2, #0
   17980:	addne	r7, r1, #8
   17984:	movne	r8, r2
   17988:	movne	r9, #2944	; 0xb80
   1798c:	beq	179f8 <flatcc_emitter@@Base+0xac>
   17990:	ldr	r6, [r7, #-4]
   17994:	ldr	sl, [r7, #-8]
   17998:	cmp	r6, #0
   1799c:	beq	179ec <flatcc_emitter@@Base+0xa0>
   179a0:	cmp	r0, r6
   179a4:	mov	r5, r0
   179a8:	bcs	17a4c <flatcc_emitter@@Base+0x100>
   179ac:	cmp	r0, #0
   179b0:	beq	17a58 <flatcc_emitter@@Base+0x10c>
   179b4:	sub	r6, r6, r0
   179b8:	mov	r1, sl
   179bc:	mov	r2, r5
   179c0:	ldr	r0, [r4, #16]
   179c4:	bl	11f6c <memcpy@plt>
   179c8:	ldr	r3, [r4, #16]
   179cc:	ldr	r0, [r4, #20]
   179d0:	add	r3, r3, r5
   179d4:	sub	r0, r0, r5
   179d8:	cmp	r6, #0
   179dc:	add	sl, sl, r5
   179e0:	str	r3, [r4, #16]
   179e4:	str	r0, [r4, #20]
   179e8:	bne	179a0 <flatcc_emitter@@Base+0x54>
   179ec:	subs	r8, r8, #1
   179f0:	add	r7, r7, #8
   179f4:	bne	17990 <flatcc_emitter@@Base+0x44>
   179f8:	mov	r0, #0
   179fc:	add	sp, sp, #12
   17a00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a04:	ldr	r3, [r4, #16]
   17a08:	sub	r0, r0, ip
   17a0c:	add	ip, r3, ip
   17a10:	str	r0, [r4, #20]
   17a14:	str	ip, [r4, #16]
   17a18:	cmp	r2, #0
   17a1c:	addne	r4, r1, #8
   17a20:	movne	r7, r2
   17a24:	beq	179f8 <flatcc_emitter@@Base+0xac>
   17a28:	ldmdb	r4, {r1, r2}
   17a2c:	mov	r0, r3
   17a30:	bl	11f6c <memcpy@plt>
   17a34:	ldr	r2, [r4, #-4]
   17a38:	subs	r7, r7, #1
   17a3c:	add	r4, r4, #8
   17a40:	add	r3, r0, r2
   17a44:	bne	17a28 <flatcc_emitter@@Base+0xdc>
   17a48:	b	179f8 <flatcc_emitter@@Base+0xac>
   17a4c:	mov	r5, r6
   17a50:	mov	r6, #0
   17a54:	b	179b8 <flatcc_emitter@@Base+0x6c>
   17a58:	ldr	fp, [r4, #4]
   17a5c:	cmp	fp, #0
   17a60:	beq	17ad0 <flatcc_emitter@@Base+0x184>
   17a64:	ldr	r5, [fp, #2944]	; 0xb80
   17a68:	ldr	r3, [r4]
   17a6c:	cmp	r5, r3
   17a70:	beq	17a98 <flatcc_emitter@@Base+0x14c>
   17a74:	str	r5, [r4, #4]
   17a78:	ldr	r3, [r5, #2948]	; 0xb84
   17a7c:	mov	r0, r9
   17a80:	str	r5, [r4, #16]
   17a84:	ldr	r3, [r3, #2952]	; 0xb88
   17a88:	str	r9, [r4, #20]
   17a8c:	add	r3, r3, #2944	; 0xb80
   17a90:	str	r3, [r5, #2952]	; 0xb88
   17a94:	b	179a0 <flatcc_emitter@@Base+0x54>
   17a98:	ldr	r0, [pc, #540]	; 17cbc <flatcc_emitter@@Base+0x370>
   17a9c:	bl	11f9c <malloc@plt>
   17aa0:	cmp	r0, #0
   17aa4:	beq	17ae0 <flatcc_emitter@@Base+0x194>
   17aa8:	ldr	r3, [r4, #28]
   17aac:	str	r5, [r0, #2944]	; 0xb80
   17ab0:	add	r3, r3, #2944	; 0xb80
   17ab4:	str	fp, [r0, #2948]	; 0xb84
   17ab8:	str	r3, [r4, #28]
   17abc:	str	r0, [r5, #2948]	; 0xb84
   17ac0:	str	r0, [fp, #2944]	; 0xb80
   17ac4:	mov	r5, r0
   17ac8:	str	r0, [r4, #4]
   17acc:	b	17a78 <flatcc_emitter@@Base+0x12c>
   17ad0:	ldr	r0, [pc, #484]	; 17cbc <flatcc_emitter@@Base+0x370>
   17ad4:	bl	11f9c <malloc@plt>
   17ad8:	cmp	r0, #0
   17adc:	bne	17aec <flatcc_emitter@@Base+0x1a0>
   17ae0:	mvn	r0, #0
   17ae4:	add	sp, sp, #12
   17ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17aec:	mov	r2, #1472	; 0x5c0
   17af0:	ldr	r3, [r4, #28]
   17af4:	str	r2, [r4, #12]
   17af8:	str	r2, [r4, #20]
   17afc:	sub	r2, r2, #2944	; 0xb80
   17b00:	str	r2, [r0, #2952]	; 0xb88
   17b04:	str	r0, [r4]
   17b08:	add	r3, r3, #2944	; 0xb80
   17b0c:	str	r0, [r4, #4]
   17b10:	str	r0, [r0, #2944]	; 0xb80
   17b14:	str	r0, [r0, #2948]	; 0xb84
   17b18:	add	r0, r0, #1472	; 0x5c0
   17b1c:	str	r0, [r4, #8]
   17b20:	str	r0, [r4, #16]
   17b24:	str	r3, [r4, #28]
   17b28:	mov	r0, #1472	; 0x5c0
   17b2c:	b	179a0 <flatcc_emitter@@Base+0x54>
   17b30:	ldr	r0, [r4, #12]
   17b34:	cmp	ip, r0
   17b38:	bls	17bb8 <flatcc_emitter@@Base+0x26c>
   17b3c:	add	r6, r1, r2, lsl #3
   17b40:	mov	r7, r2
   17b44:	mov	r9, #2944	; 0xb80
   17b48:	mov	r8, #0
   17b4c:	cmp	r7, #0
   17b50:	beq	179f8 <flatcc_emitter@@Base+0xac>
   17b54:	ldr	r5, [r6, #-4]
   17b58:	ldr	sl, [r6, #-8]
   17b5c:	cmp	r5, #0
   17b60:	add	sl, sl, r5
   17b64:	beq	17bac <flatcc_emitter@@Base+0x260>
   17b68:	ldr	r2, [r4, #12]
   17b6c:	cmp	r2, r5
   17b70:	bcs	17bd0 <flatcc_emitter@@Base+0x284>
   17b74:	cmp	r2, #0
   17b78:	beq	17be0 <flatcc_emitter@@Base+0x294>
   17b7c:	sub	r5, r5, r2
   17b80:	mov	r1, r8
   17b84:	ldr	r0, [r4, #8]
   17b88:	rsb	r3, r2, #0
   17b8c:	add	r0, r0, r3
   17b90:	add	sl, sl, r3
   17b94:	str	r1, [r4, #12]
   17b98:	str	r0, [r4, #8]
   17b9c:	mov	r1, sl
   17ba0:	bl	11f6c <memcpy@plt>
   17ba4:	cmp	r5, #0
   17ba8:	bne	17b68 <flatcc_emitter@@Base+0x21c>
   17bac:	sub	r6, r6, #8
   17bb0:	sub	r7, r7, #1
   17bb4:	b	17b4c <flatcc_emitter@@Base+0x200>
   17bb8:	ldr	r3, [r4, #8]
   17bbc:	sub	r0, r0, ip
   17bc0:	sub	r3, r3, ip
   17bc4:	str	r0, [r4, #12]
   17bc8:	str	r3, [r4, #8]
   17bcc:	b	17a18 <flatcc_emitter@@Base+0xcc>
   17bd0:	sub	r1, r2, r5
   17bd4:	mov	r2, r5
   17bd8:	mov	r5, #0
   17bdc:	b	17b84 <flatcc_emitter@@Base+0x238>
   17be0:	ldr	r3, [r4]
   17be4:	cmp	r3, #0
   17be8:	beq	17c6c <flatcc_emitter@@Base+0x320>
   17bec:	ldr	fp, [r3, #2948]	; 0xb84
   17bf0:	ldr	r2, [r4, #4]
   17bf4:	cmp	fp, r2
   17bf8:	beq	17c2c <flatcc_emitter@@Base+0x2e0>
   17bfc:	ldr	r3, [r3, #2952]	; 0xb88
   17c00:	sub	r3, r3, #2944	; 0xb80
   17c04:	str	r3, [fp, #2952]	; 0xb88
   17c08:	str	fp, [r4]
   17c0c:	ldr	r3, [fp, #2944]	; 0xb80
   17c10:	add	r2, fp, #2944	; 0xb80
   17c14:	str	r9, [r4, #12]
   17c18:	ldr	r3, [r3, #2952]	; 0xb88
   17c1c:	str	r2, [r4, #8]
   17c20:	sub	r3, r3, #2944	; 0xb80
   17c24:	str	r3, [fp, #2952]	; 0xb88
   17c28:	b	17b68 <flatcc_emitter@@Base+0x21c>
   17c2c:	ldr	r0, [pc, #136]	; 17cbc <flatcc_emitter@@Base+0x370>
   17c30:	str	r3, [sp, #4]
   17c34:	bl	11f9c <malloc@plt>
   17c38:	ldr	r3, [sp, #4]
   17c3c:	cmp	r0, #0
   17c40:	beq	17ae0 <flatcc_emitter@@Base+0x194>
   17c44:	ldr	r2, [r4, #28]
   17c48:	str	fp, [r0, #2948]	; 0xb84
   17c4c:	add	r2, r2, #2944	; 0xb80
   17c50:	str	r3, [r0, #2944]	; 0xb80
   17c54:	str	r2, [r4, #28]
   17c58:	str	r0, [r3, #2948]	; 0xb84
   17c5c:	str	r0, [fp, #2944]	; 0xb80
   17c60:	str	r0, [r4]
   17c64:	mov	fp, r0
   17c68:	b	17c0c <flatcc_emitter@@Base+0x2c0>
   17c6c:	ldr	r0, [pc, #72]	; 17cbc <flatcc_emitter@@Base+0x370>
   17c70:	bl	11f9c <malloc@plt>
   17c74:	cmp	r0, #0
   17c78:	beq	17ae0 <flatcc_emitter@@Base+0x194>
   17c7c:	mov	r2, #1472	; 0x5c0
   17c80:	ldr	r3, [r4, #28]
   17c84:	str	r2, [r4, #12]
   17c88:	str	r2, [r4, #20]
   17c8c:	sub	r2, r2, #2944	; 0xb80
   17c90:	str	r2, [r0, #2952]	; 0xb88
   17c94:	str	r0, [r4]
   17c98:	add	r3, r3, #2944	; 0xb80
   17c9c:	str	r0, [r4, #4]
   17ca0:	str	r0, [r0, #2944]	; 0xb80
   17ca4:	str	r0, [r0, #2948]	; 0xb84
   17ca8:	add	r0, r0, #1472	; 0x5c0
   17cac:	str	r0, [r4, #8]
   17cb0:	str	r0, [r4, #16]
   17cb4:	str	r3, [r4, #28]
   17cb8:	b	17b68 <flatcc_emitter@@Base+0x21c>
   17cbc:	andeq	r0, r0, ip, lsl #23

00017cc0 <flatcc_emitter_copy_buffer@@Base>:
   17cc0:	ldr	ip, [r0, #24]
   17cc4:	cmp	ip, r2
   17cc8:	bhi	17d64 <flatcc_emitter_copy_buffer@@Base+0xa4>
   17ccc:	ldr	r2, [r0]
   17cd0:	cmp	r2, #0
   17cd4:	beq	17d64 <flatcc_emitter_copy_buffer@@Base+0xa4>
   17cd8:	mov	r3, r1
   17cdc:	ldr	r1, [r0, #4]
   17ce0:	push	{r4, r5, r6, lr}
   17ce4:	cmp	r2, r1
   17ce8:	mov	r5, r0
   17cec:	beq	17d70 <flatcc_emitter_copy_buffer@@Base+0xb0>
   17cf0:	ldr	r4, [r0, #12]
   17cf4:	ldr	r1, [r5, #8]
   17cf8:	rsb	r4, r4, #2944	; 0xb80
   17cfc:	mov	r2, r4
   17d00:	mov	r0, r3
   17d04:	bl	11f6c <memcpy@plt>
   17d08:	ldr	r2, [r5]
   17d0c:	ldr	r1, [r5, #4]
   17d10:	add	r3, r0, r4
   17d14:	ldr	r4, [r2, #2944]	; 0xb80
   17d18:	cmp	r4, r1
   17d1c:	beq	17d48 <flatcc_emitter_copy_buffer@@Base+0x88>
   17d20:	mov	r6, #2944	; 0xb80
   17d24:	mov	r1, r4
   17d28:	mov	r0, r3
   17d2c:	mov	r2, r6
   17d30:	bl	11f6c <memcpy@plt>
   17d34:	ldr	r4, [r4, #2944]	; 0xb80
   17d38:	ldr	r1, [r5, #4]
   17d3c:	cmp	r1, r4
   17d40:	add	r3, r0, #2944	; 0xb80
   17d44:	bne	17d24 <flatcc_emitter_copy_buffer@@Base+0x64>
   17d48:	ldr	r2, [r5, #20]
   17d4c:	mov	r0, r3
   17d50:	rsb	r2, r2, #2944	; 0xb80
   17d54:	bl	11f6c <memcpy@plt>
   17d58:	mov	r3, r0
   17d5c:	mov	r0, r3
   17d60:	pop	{r4, r5, r6, pc}
   17d64:	mov	r3, #0
   17d68:	mov	r0, r3
   17d6c:	bx	lr
   17d70:	ldr	r1, [r0, #8]
   17d74:	mov	r2, ip
   17d78:	mov	r0, r3
   17d7c:	bl	11f6c <memcpy@plt>
   17d80:	mov	r3, r0
   17d84:	b	17d5c <flatcc_emitter_copy_buffer@@Base+0x9c>

00017d88 <__libc_csu_init@@Base>:
   17d88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17d8c:	mov	r7, r0
   17d90:	ldr	r6, [pc, #72]	; 17de0 <__libc_csu_init@@Base+0x58>
   17d94:	ldr	r5, [pc, #72]	; 17de4 <__libc_csu_init@@Base+0x5c>
   17d98:	add	r6, pc, r6
   17d9c:	add	r5, pc, r5
   17da0:	sub	r6, r6, r5
   17da4:	mov	r8, r1
   17da8:	mov	r9, r2
   17dac:	bl	11f34 <strcmp@plt-0x20>
   17db0:	asrs	r6, r6, #2
   17db4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17db8:	mov	r4, #0
   17dbc:	add	r4, r4, #1
   17dc0:	ldr	r3, [r5], #4
   17dc4:	mov	r2, r9
   17dc8:	mov	r1, r8
   17dcc:	mov	r0, r7
   17dd0:	blx	r3
   17dd4:	cmp	r6, r4
   17dd8:	bne	17dbc <__libc_csu_init@@Base+0x34>
   17ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17de0:	andeq	r1, r1, r0, ror r1
   17de4:	andeq	r1, r1, r8, ror #2

00017de8 <__libc_csu_fini@@Base>:
   17de8:	bx	lr

Disassembly of section .fini:

00017dec <.fini>:
   17dec:	push	{r3, lr}
   17df0:	pop	{r3, pc}
