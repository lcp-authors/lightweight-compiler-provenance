
../repos/eddieantonio-ocreval-3ab279a/wordacc/wordacc:     file format elf32-littlearm


Disassembly of section .init:

00010958 <.init>:
   10958:	push	{r3, lr}
   1095c:	bl	10c10 <__assert_fail@plt+0xf4>
   10960:	pop	{r3, pc}

Disassembly of section .plt:

00010964 <calloc@plt-0x14>:
   10964:	push	{lr}		; (str lr, [sp, #-4]!)
   10968:	ldr	lr, [pc, #4]	; 10974 <calloc@plt-0x4>
   1096c:	add	lr, pc, lr
   10970:	ldr	pc, [lr, #8]!
   10974:	andeq	r7, r1, ip, lsl #13

00010978 <calloc@plt>:
   10978:	add	ip, pc, #0, 12
   1097c:	add	ip, ip, #94208	; 0x17000
   10980:	ldr	pc, [ip, #1676]!	; 0x68c

00010984 <strcmp@plt>:
   10984:	add	ip, pc, #0, 12
   10988:	add	ip, ip, #94208	; 0x17000
   1098c:	ldr	pc, [ip, #1668]!	; 0x684

00010990 <strtol@plt>:
   10990:	add	ip, pc, #0, 12
   10994:	add	ip, ip, #94208	; 0x17000
   10998:	ldr	pc, [ip, #1660]!	; 0x67c

0001099c <fopen@plt>:
   1099c:	add	ip, pc, #0, 12
   109a0:	add	ip, ip, #94208	; 0x17000
   109a4:	ldr	pc, [ip, #1652]!	; 0x674

000109a8 <free@plt>:
   109a8:	add	ip, pc, #0, 12
   109ac:	add	ip, ip, #94208	; 0x17000
   109b0:	ldr	pc, [ip, #1644]!	; 0x66c

000109b4 <utf8proc_get_property@plt>:
   109b4:	add	ip, pc, #0, 12
   109b8:	add	ip, ip, #94208	; 0x17000
   109bc:	ldr	pc, [ip, #1636]!	; 0x664

000109c0 <fgets@plt>:
   109c0:	add	ip, pc, #0, 12
   109c4:	add	ip, ip, #94208	; 0x17000
   109c8:	ldr	pc, [ip, #1628]!	; 0x65c

000109cc <utf8proc_encode_char@plt>:
   109cc:	add	ip, pc, #0, 12
   109d0:	add	ip, ip, #94208	; 0x17000
   109d4:	ldr	pc, [ip, #1620]!	; 0x654

000109d8 <strdup@plt>:
   109d8:	add	ip, pc, #0, 12
   109dc:	add	ip, ip, #94208	; 0x17000
   109e0:	ldr	pc, [ip, #1612]!	; 0x64c

000109e4 <rewind@plt>:
   109e4:	add	ip, pc, #0, 12
   109e8:	add	ip, ip, #94208	; 0x17000
   109ec:	ldr	pc, [ip, #1604]!	; 0x644

000109f0 <unlink@plt>:
   109f0:	add	ip, pc, #0, 12
   109f4:	add	ip, ip, #94208	; 0x17000
   109f8:	ldr	pc, [ip, #1596]!	; 0x63c

000109fc <utf8proc_tolower@plt>:
   109fc:	add	ip, pc, #0, 12
   10a00:	add	ip, ip, #94208	; 0x17000
   10a04:	ldr	pc, [ip, #1588]!	; 0x634

00010a08 <__xstat@plt>:
   10a08:	add	ip, pc, #0, 12
   10a0c:	add	ip, ip, #94208	; 0x17000
   10a10:	ldr	pc, [ip, #1580]!	; 0x62c

00010a14 <fwrite@plt>:
   10a14:	add	ip, pc, #0, 12
   10a18:	add	ip, ip, #94208	; 0x17000
   10a1c:	ldr	pc, [ip, #1572]!	; 0x624

00010a20 <fread@plt>:
   10a20:	add	ip, pc, #0, 12
   10a24:	add	ip, ip, #94208	; 0x17000
   10a28:	ldr	pc, [ip, #1564]!	; 0x61c

00010a2c <utf8proc_iterate@plt>:
   10a2c:	add	ip, pc, #0, 12
   10a30:	add	ip, ip, #94208	; 0x17000
   10a34:	ldr	pc, [ip, #1556]!	; 0x614

00010a38 <malloc@plt>:
   10a38:	add	ip, pc, #0, 12
   10a3c:	add	ip, ip, #94208	; 0x17000
   10a40:	ldr	pc, [ip, #1548]!	; 0x60c

00010a44 <__libc_start_main@plt>:
   10a44:	add	ip, pc, #0, 12
   10a48:	add	ip, ip, #94208	; 0x17000
   10a4c:	ldr	pc, [ip, #1540]!	; 0x604

00010a50 <__sysv_signal@plt>:
   10a50:	add	ip, pc, #0, 12
   10a54:	add	ip, ip, #94208	; 0x17000
   10a58:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a5c <__gmon_start__@plt>:
   10a5c:	add	ip, pc, #0, 12
   10a60:	add	ip, ip, #94208	; 0x17000
   10a64:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a68 <getpid@plt>:
   10a68:	add	ip, pc, #0, 12
   10a6c:	add	ip, ip, #94208	; 0x17000
   10a70:	ldr	pc, [ip, #1516]!	; 0x5ec

00010a74 <exit@plt>:
   10a74:	add	ip, pc, #0, 12
   10a78:	add	ip, ip, #94208	; 0x17000
   10a7c:	ldr	pc, [ip, #1508]!	; 0x5e4

00010a80 <utf8proc_category@plt>:
   10a80:	add	ip, pc, #0, 12
   10a84:	add	ip, ip, #94208	; 0x17000
   10a88:	ldr	pc, [ip, #1500]!	; 0x5dc

00010a8c <strlen@plt>:
   10a8c:	add	ip, pc, #0, 12
   10a90:	add	ip, ip, #94208	; 0x17000
   10a94:	ldr	pc, [ip, #1492]!	; 0x5d4

00010a98 <fprintf@plt>:
   10a98:	add	ip, pc, #0, 12
   10a9c:	add	ip, ip, #94208	; 0x17000
   10aa0:	ldr	pc, [ip, #1484]!	; 0x5cc

00010aa4 <__isoc99_sscanf@plt>:
   10aa4:	add	ip, pc, #0, 12
   10aa8:	add	ip, ip, #94208	; 0x17000
   10aac:	ldr	pc, [ip, #1476]!	; 0x5c4

00010ab0 <fclose@plt>:
   10ab0:	add	ip, pc, #0, 12
   10ab4:	add	ip, ip, #94208	; 0x17000
   10ab8:	ldr	pc, [ip, #1468]!	; 0x5bc

00010abc <utf8proc_NFC@plt>:
   10abc:	add	ip, pc, #0, 12
   10ac0:	add	ip, ip, #94208	; 0x17000
   10ac4:	ldr	pc, [ip, #1460]!	; 0x5b4

00010ac8 <fputc@plt>:
   10ac8:	add	ip, pc, #0, 12
   10acc:	add	ip, ip, #94208	; 0x17000
   10ad0:	ldr	pc, [ip, #1452]!	; 0x5ac

00010ad4 <sprintf@plt>:
   10ad4:	add	ip, pc, #0, 12
   10ad8:	add	ip, ip, #94208	; 0x17000
   10adc:	ldr	pc, [ip, #1444]!	; 0x5a4

00010ae0 <utf8proc_errmsg@plt>:
   10ae0:	add	ip, pc, #0, 12
   10ae4:	add	ip, ip, #94208	; 0x17000
   10ae8:	ldr	pc, [ip, #1436]!	; 0x59c

00010aec <fputs@plt>:
   10aec:	add	ip, pc, #0, 12
   10af0:	add	ip, ip, #94208	; 0x17000
   10af4:	ldr	pc, [ip, #1428]!	; 0x594

00010af8 <strncmp@plt>:
   10af8:	add	ip, pc, #0, 12
   10afc:	add	ip, ip, #94208	; 0x17000
   10b00:	ldr	pc, [ip, #1420]!	; 0x58c

00010b04 <abort@plt>:
   10b04:	add	ip, pc, #0, 12
   10b08:	add	ip, ip, #94208	; 0x17000
   10b0c:	ldr	pc, [ip, #1412]!	; 0x584

00010b10 <getc@plt>:
   10b10:	add	ip, pc, #0, 12
   10b14:	add	ip, ip, #94208	; 0x17000
   10b18:	ldr	pc, [ip, #1404]!	; 0x57c

00010b1c <__assert_fail@plt>:
   10b1c:	add	ip, pc, #0, 12
   10b20:	add	ip, ip, #94208	; 0x17000
   10b24:	ldr	pc, [ip, #1396]!	; 0x574

Disassembly of section .text:

00010b28 <error@@Base-0x1410>:
   10b28:	push	{r4, r5, lr}
   10b2c:	sub	sp, sp, #12
   10b30:	ldr	r4, [pc, #132]	; 10bbc <__assert_fail@plt+0xa0>
   10b34:	ldr	r3, [pc, #132]	; 10bc0 <__assert_fail@plt+0xa4>
   10b38:	add	ip, sp, #8
   10b3c:	add	r4, pc, r4
   10b40:	ldr	r2, [pc, #124]	; 10bc4 <__assert_fail@plt+0xa8>
   10b44:	str	r0, [ip, #-4]!
   10b48:	add	r2, pc, r2
   10b4c:	ldr	r3, [r4, r3]
   10b50:	mov	r0, ip
   10b54:	mov	r5, r1
   10b58:	bl	120d8 <error@@Base+0x1a0>
   10b5c:	ldr	r3, [sp, #4]
   10b60:	sub	r3, r3, #2
   10b64:	cmp	r3, #1
   10b68:	bls	10b78 <__assert_fail@plt+0x5c>
   10b6c:	ldr	r0, [pc, #84]	; 10bc8 <__assert_fail@plt+0xac>
   10b70:	add	r0, pc, r0
   10b74:	bl	11f38 <error@@Base>
   10b78:	ldr	r3, [pc, #76]	; 10bcc <__assert_fail@plt+0xb0>
   10b7c:	ldr	r3, [r4, r3]
   10b80:	ldr	r0, [r3]
   10b84:	bl	1189c <__assert_fail@plt+0xd80>
   10b88:	mov	r0, r5
   10b8c:	bl	10d94 <__assert_fail@plt+0x278>
   10b90:	bl	11178 <__assert_fail@plt+0x65c>
   10b94:	bl	112a8 <__assert_fail@plt+0x78c>
   10b98:	bl	11528 <__assert_fail@plt+0xa0c>
   10b9c:	ldr	r3, [sp, #4]
   10ba0:	cmp	r3, #3
   10ba4:	ldr	r3, [pc, #36]	; 10bd0 <__assert_fail@plt+0xb4>
   10ba8:	ldreq	r1, [r5, #8]
   10bac:	movne	r1, #0
   10bb0:	ldr	r0, [r4, r3]
   10bb4:	bl	12ae4 <error@@Base+0xbac>
   10bb8:	bl	11ec4 <__assert_fail@plt+0x13a8>
   10bbc:			; <UNDEFINED> instruction: 0x000174bc
   10bc0:	andeq	r0, r0, ip, asr #1
   10bc4:	andeq	r3, r0, r8, asr #8
   10bc8:	andeq	r3, r0, r0, ror #8
   10bcc:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   10bd0:	ldrdeq	r0, [r0], -r8
   10bd4:	mov	fp, #0
   10bd8:	mov	lr, #0
   10bdc:	pop	{r1}		; (ldr r1, [sp], #4)
   10be0:	mov	r2, sp
   10be4:	push	{r2}		; (str r2, [sp, #-4]!)
   10be8:	push	{r0}		; (str r0, [sp, #-4]!)
   10bec:	ldr	ip, [pc, #16]	; 10c04 <__assert_fail@plt+0xe8>
   10bf0:	push	{ip}		; (str ip, [sp, #-4]!)
   10bf4:	ldr	r0, [pc, #12]	; 10c08 <__assert_fail@plt+0xec>
   10bf8:	ldr	r3, [pc, #12]	; 10c0c <__assert_fail@plt+0xf0>
   10bfc:	bl	10a44 <__libc_start_main@plt>
   10c00:	bl	10b04 <abort@plt>
   10c04:	andeq	r3, r1, r4, asr pc
   10c08:	andeq	r0, r1, r8, lsr #22
   10c0c:	strdeq	r3, [r1], -r4
   10c10:	ldr	r3, [pc, #20]	; 10c2c <__assert_fail@plt+0x110>
   10c14:	ldr	r2, [pc, #20]	; 10c30 <__assert_fail@plt+0x114>
   10c18:	add	r3, pc, r3
   10c1c:	ldr	r2, [r3, r2]
   10c20:	cmp	r2, #0
   10c24:	bxeq	lr
   10c28:	b	10a5c <__gmon_start__@plt>
   10c2c:	andeq	r7, r1, r0, ror #7
   10c30:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10c34:	ldr	r3, [pc, #28]	; 10c58 <__assert_fail@plt+0x13c>
   10c38:	ldr	r0, [pc, #28]	; 10c5c <__assert_fail@plt+0x140>
   10c3c:	sub	r3, r3, r0
   10c40:	cmp	r3, #6
   10c44:	bxls	lr
   10c48:	ldr	r3, [pc, #16]	; 10c60 <__assert_fail@plt+0x144>
   10c4c:	cmp	r3, #0
   10c50:	bxeq	lr
   10c54:	bx	r3
   10c58:	andeq	r8, r2, r7, asr #2
   10c5c:	andeq	r8, r2, r4, asr #2
   10c60:	andeq	r0, r0, r0
   10c64:	ldr	r1, [pc, #36]	; 10c90 <__assert_fail@plt+0x174>
   10c68:	ldr	r0, [pc, #36]	; 10c94 <__assert_fail@plt+0x178>
   10c6c:	sub	r1, r1, r0
   10c70:	asr	r1, r1, #2
   10c74:	add	r1, r1, r1, lsr #31
   10c78:	asrs	r1, r1, #1
   10c7c:	bxeq	lr
   10c80:	ldr	r3, [pc, #16]	; 10c98 <__assert_fail@plt+0x17c>
   10c84:	cmp	r3, #0
   10c88:	bxeq	lr
   10c8c:	bx	r3
   10c90:	andeq	r8, r2, r4, asr #2
   10c94:	andeq	r8, r2, r4, asr #2
   10c98:	andeq	r0, r0, r0
   10c9c:	push	{r4, lr}
   10ca0:	ldr	r4, [pc, #24]	; 10cc0 <__assert_fail@plt+0x1a4>
   10ca4:	ldrb	r3, [r4]
   10ca8:	cmp	r3, #0
   10cac:	popne	{r4, pc}
   10cb0:	bl	10c34 <__assert_fail@plt+0x118>
   10cb4:	mov	r3, #1
   10cb8:	strb	r3, [r4]
   10cbc:	pop	{r4, pc}
   10cc0:	andeq	r8, r2, r4, asr #2
   10cc4:	ldr	r0, [pc, #40]	; 10cf4 <__assert_fail@plt+0x1d8>
   10cc8:	ldr	r3, [r0]
   10ccc:	cmp	r3, #0
   10cd0:	bne	10cd8 <__assert_fail@plt+0x1bc>
   10cd4:	b	10c64 <__assert_fail@plt+0x148>
   10cd8:	ldr	r3, [pc, #24]	; 10cf8 <__assert_fail@plt+0x1dc>
   10cdc:	cmp	r3, #0
   10ce0:	beq	10cd4 <__assert_fail@plt+0x1b8>
   10ce4:	push	{r4, lr}
   10ce8:	blx	r3
   10cec:	pop	{r4, lr}
   10cf0:	b	10c64 <__assert_fail@plt+0x148>
   10cf4:	andeq	r7, r2, ip, asr #26
   10cf8:	andeq	r0, r0, r0
   10cfc:	push	{r4, r5, r6, r7, r8, lr}
   10d00:	mov	r5, r1
   10d04:	ldr	r7, [pc, #124]	; 10d88 <__assert_fail@plt+0x26c>
   10d08:	ldr	r3, [pc, #124]	; 10d8c <__assert_fail@plt+0x270>
   10d0c:	add	r7, pc, r7
   10d10:	mov	r1, #4
   10d14:	ldr	r6, [r7, r3]
   10d18:	mov	r4, r0
   10d1c:	add	r6, r6, r0, lsl r1
   10d20:	ldr	r0, [r6, #12]
   10d24:	add	r0, r0, #1
   10d28:	bl	11f90 <error@@Base+0x58>
   10d2c:	ldr	lr, [r6, #12]
   10d30:	cmp	lr, #0
   10d34:	ble	10d80 <__assert_fail@plt+0x264>
   10d38:	ldr	r2, [pc, #80]	; 10d90 <__assert_fail@plt+0x274>
   10d3c:	mov	r1, #0
   10d40:	mov	r3, r1
   10d44:	ldr	r7, [r7, r2]
   10d48:	rsb	r6, r4, #1
   10d4c:	ldr	r2, [r7, r4, lsl #2]
   10d50:	add	ip, r2, r3, lsl #3
   10d54:	ldr	r2, [r2, r3, lsl #3]
   10d58:	add	r3, r3, #1
   10d5c:	add	r2, r2, r6
   10d60:	ldrb	r2, [r2, #12]
   10d64:	cmp	r2, #0
   10d68:	strne	ip, [r0, r1, lsl #2]
   10d6c:	addne	r1, r1, #1
   10d70:	cmp	r3, lr
   10d74:	bne	10d4c <__assert_fail@plt+0x230>
   10d78:	str	r1, [r5]
   10d7c:	pop	{r4, r5, r6, r7, r8, pc}
   10d80:	mov	r1, #0
   10d84:	b	10d78 <__assert_fail@plt+0x25c>
   10d88:	andeq	r7, r1, ip, ror #5
   10d8c:	strheq	r0, [r0], -ip
   10d90:	andeq	r0, r0, r0, lsl #2
   10d94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d98:	sub	sp, sp, #28
   10d9c:	ldr	r9, [pc, #512]	; 10fa4 <__assert_fail@plt+0x488>
   10da0:	ldr	ip, [pc, #512]	; 10fa8 <__assert_fail@plt+0x48c>
   10da4:	add	r9, pc, r9
   10da8:	ldr	r1, [pc, #508]	; 10fac <__assert_fail@plt+0x490>
   10dac:	ldr	ip, [r9, ip]
   10db0:	mov	lr, #1
   10db4:	ldr	r3, [pc, #500]	; 10fb0 <__assert_fail@plt+0x494>
   10db8:	sub	r0, r0, #4
   10dbc:	str	ip, [sp, #20]
   10dc0:	str	lr, [sp, #4]
   10dc4:	str	r0, [sp]
   10dc8:	ldr	r1, [r9, r1]
   10dcc:	ldr	r2, [pc, #480]	; 10fb4 <__assert_fail@plt+0x498>
   10dd0:	ldr	r3, [r9, r3]
   10dd4:	mov	fp, ip
   10dd8:	mov	r8, lr
   10ddc:	mov	r5, #0
   10de0:	mov	sl, r1
   10de4:	ldr	r6, [r9, r2]
   10de8:	str	r3, [sp, #16]
   10dec:	str	r9, [sp, #8]
   10df0:	ldr	r3, [sp]
   10df4:	ldr	r2, [sp, #16]
   10df8:	mov	r0, sl
   10dfc:	ldr	r1, [r3, #4]!
   10e00:	str	r3, [sp]
   10e04:	bl	13688 <error@@Base+0x1750>
   10e08:	cmp	r5, #0
   10e0c:	beq	10f48 <__assert_fail@plt+0x42c>
   10e10:	mov	r1, sl
   10e14:	mov	r0, fp
   10e18:	bl	12db0 <error@@Base+0xe78>
   10e1c:	ldr	r0, [fp, #12]
   10e20:	mov	r1, #8
   10e24:	add	r0, r0, #1
   10e28:	bl	11f90 <error@@Base+0x58>
   10e2c:	ldr	r3, [sp, #20]
   10e30:	ldr	r4, [r3, r5, lsl #4]
   10e34:	cmp	r4, #0
   10e38:	str	r0, [r6]
   10e3c:	beq	10ea0 <__assert_fail@plt+0x384>
   10e40:	ldr	r3, [pc, #368]	; 10fb8 <__assert_fail@plt+0x49c>
   10e44:	ldr	r2, [sp, #8]
   10e48:	mov	r9, #0
   10e4c:	ldr	r7, [r2, r3]
   10e50:	str	sl, [sp, #12]
   10e54:	mov	sl, r6
   10e58:	mov	r6, r5
   10e5c:	mov	r5, r7
   10e60:	ldr	r1, [r4, #8]
   10e64:	mov	r0, r5
   10e68:	bl	11a0c <__assert_fail@plt+0xef0>
   10e6c:	subs	r7, r0, #0
   10e70:	beq	10ecc <__assert_fail@plt+0x3b0>
   10e74:	add	r3, r7, r6
   10e78:	strb	r8, [r3, #12]
   10e7c:	ldr	r4, [r4, #4]
   10e80:	ldr	r3, [sl]
   10e84:	cmp	r4, #0
   10e88:	str	r7, [r3, r9]
   10e8c:	add	r9, r9, #8
   10e90:	bne	10e60 <__assert_fail@plt+0x344>
   10e94:	mov	r5, r6
   10e98:	mov	r6, sl
   10e9c:	ldr	sl, [sp, #12]
   10ea0:	ldr	r3, [sp, #4]
   10ea4:	cmp	r3, #2
   10ea8:	beq	10ef4 <__assert_fail@plt+0x3d8>
   10eac:	ldr	r3, [sp, #4]
   10eb0:	add	r5, r5, #1
   10eb4:	add	r3, r3, #1
   10eb8:	add	sl, sl, #16
   10ebc:	str	r3, [sp, #4]
   10ec0:	add	fp, fp, #16
   10ec4:	add	r6, r6, #4
   10ec8:	b	10df0 <__assert_fail@plt+0x2d4>
   10ecc:	mov	r1, #16
   10ed0:	mov	r0, r8
   10ed4:	bl	11f90 <error@@Base+0x58>
   10ed8:	ldr	r3, [r4, #8]
   10edc:	mov	r7, r0
   10ee0:	mov	r1, r0
   10ee4:	str	r3, [r0, #8]
   10ee8:	mov	r0, r5
   10eec:	bl	11a90 <__assert_fail@plt+0xf74>
   10ef0:	b	10e74 <__assert_fail@plt+0x358>
   10ef4:	ldr	r9, [sp, #8]
   10ef8:	ldr	r3, [pc, #188]	; 10fbc <__assert_fail@plt+0x4a0>
   10efc:	mov	r0, #0
   10f00:	ldr	r4, [r9, r3]
   10f04:	mov	r1, r4
   10f08:	bl	10cfc <__assert_fail@plt+0x1e0>
   10f0c:	ldr	r3, [pc, #172]	; 10fc0 <__assert_fail@plt+0x4a4>
   10f10:	ldr	r2, [r4]
   10f14:	ldr	r3, [r9, r3]
   10f18:	cmp	r2, #65536	; 0x10000
   10f1c:	str	r0, [r3]
   10f20:	bge	10f8c <__assert_fail@plt+0x470>
   10f24:	ldr	r3, [pc, #152]	; 10fc4 <__assert_fail@plt+0x4a8>
   10f28:	mov	r0, #1
   10f2c:	ldr	r1, [r9, r3]
   10f30:	bl	10cfc <__assert_fail@plt+0x1e0>
   10f34:	ldr	r3, [pc, #140]	; 10fc8 <__assert_fail@plt+0x4ac>
   10f38:	ldr	r3, [r9, r3]
   10f3c:	str	r0, [r3]
   10f40:	add	sp, sp, #28
   10f44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f48:	ldr	r3, [sp, #16]
   10f4c:	ldrb	r3, [r3, #11]
   10f50:	cmp	r3, #0
   10f54:	bne	10f98 <__assert_fail@plt+0x47c>
   10f58:	mov	r1, sl
   10f5c:	mov	r0, fp
   10f60:	bl	12db0 <error@@Base+0xe78>
   10f64:	ldr	r0, [fp, #12]
   10f68:	mov	r1, #8
   10f6c:	add	r0, r0, #1
   10f70:	bl	11f90 <error@@Base+0x58>
   10f74:	ldr	r3, [sp, #20]
   10f78:	ldr	r4, [r3]
   10f7c:	cmp	r4, #0
   10f80:	str	r0, [r6]
   10f84:	bne	10e40 <__assert_fail@plt+0x324>
   10f88:	b	10eac <__assert_fail@plt+0x390>
   10f8c:	ldr	r0, [pc, #56]	; 10fcc <__assert_fail@plt+0x4b0>
   10f90:	add	r0, pc, r0
   10f94:	bl	11f38 <error@@Base>
   10f98:	ldr	r0, [pc, #48]	; 10fd0 <__assert_fail@plt+0x4b4>
   10f9c:	add	r0, pc, r0
   10fa0:	bl	11f38 <error@@Base>
   10fa4:	andeq	r7, r1, r4, asr r2
   10fa8:	strheq	r0, [r0], -ip
   10fac:	muleq	r0, ip, r0
   10fb0:	strheq	r0, [r0], -r8
   10fb4:	andeq	r0, r0, r0, lsl #2
   10fb8:	andeq	r0, r0, r8, asr #1
   10fbc:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10fc0:	andeq	r0, r0, ip, ror #1
   10fc4:	andeq	r0, r0, ip, lsr #1
   10fc8:	andeq	r0, r0, r8, lsr #1
   10fcc:	andeq	r2, r0, r8, ror #31
   10fd0:	andeq	r2, r0, r0, asr #31
   10fd4:	cmp	r1, #0
   10fd8:	push	{lr}		; (str lr, [sp, #-4]!)
   10fdc:	beq	11040 <__assert_fail@plt+0x524>
   10fe0:	ldr	r3, [r1, #8]
   10fe4:	rsb	ip, r3, #0
   10fe8:	cmp	ip, r0
   10fec:	sublt	ip, r0, #1
   10ff0:	addlt	r3, r3, ip
   10ff4:	ldrlt	lr, [r1, #12]
   10ff8:	biclt	r3, r3, #1
   10ffc:	movge	lr, #0
   11000:	ldrhlt	lr, [lr, r3]
   11004:	strlt	ip, [r2]
   11008:	ldrlt	r3, [r1, #8]
   1100c:	cmp	r0, r3
   11010:	bge	11038 <__assert_fail@plt+0x51c>
   11014:	add	ip, r0, #1
   11018:	ldr	r1, [r1, #12]
   1101c:	add	r3, ip, r3
   11020:	bic	r3, r3, #1
   11024:	ldrh	r3, [r1, r3]
   11028:	add	r3, r3, #1
   1102c:	cmp	lr, r3
   11030:	movle	lr, r3
   11034:	strle	ip, [r2]
   11038:	mov	r0, lr
   1103c:	pop	{pc}		; (ldr pc, [sp], #4)
   11040:	mov	lr, r1
   11044:	mov	r0, lr
   11048:	pop	{pc}		; (ldr pc, [sp], #4)
   1104c:	push	{r4, r5, r6, r7, r8, lr}
   11050:	sub	sp, sp, #8
   11054:	add	r2, sp, #4
   11058:	mov	r6, r1
   1105c:	ldr	r1, [r1]
   11060:	mov	r4, r0
   11064:	bl	10fd4 <__assert_fail@plt+0x4b8>
   11068:	ldr	r5, [pc, #236]	; 1115c <__assert_fail@plt+0x640>
   1106c:	ldr	r2, [pc, #236]	; 11160 <__assert_fail@plt+0x644>
   11070:	add	r5, pc, r5
   11074:	ldr	r2, [r5, r2]
   11078:	ldr	r7, [r2]
   1107c:	ldr	r2, [pc, #224]	; 11164 <__assert_fail@plt+0x648>
   11080:	ldr	r2, [r5, r2]
   11084:	ldr	r8, [r2]
   11088:	cmp	r0, r7
   1108c:	add	r3, r4, r0
   11090:	bge	11154 <__assert_fail@plt+0x638>
   11094:	cmp	r3, r8
   11098:	bge	1111c <__assert_fail@plt+0x600>
   1109c:	ldr	r1, [pc, #196]	; 11168 <__assert_fail@plt+0x64c>
   110a0:	ldr	r2, [pc, #196]	; 1116c <__assert_fail@plt+0x650>
   110a4:	ldr	r1, [r5, r1]
   110a8:	ldr	r2, [r5, r2]
   110ac:	ldr	ip, [r1]
   110b0:	ldr	r2, [r2]
   110b4:	add	r1, ip, r0, lsl #2
   110b8:	ldr	ip, [ip, r0, lsl #2]
   110bc:	ldr	lr, [r2, r3, lsl #2]
   110c0:	add	r2, r2, r3, lsl #2
   110c4:	ldr	ip, [ip]
   110c8:	ldr	lr, [lr]
   110cc:	cmp	lr, ip
   110d0:	beq	110f8 <__assert_fail@plt+0x5dc>
   110d4:	b	11124 <__assert_fail@plt+0x608>
   110d8:	cmp	r3, r8
   110dc:	beq	11140 <__assert_fail@plt+0x624>
   110e0:	ldr	lr, [r1, #4]!
   110e4:	ldr	ip, [r2, #4]!
   110e8:	ldr	lr, [lr]
   110ec:	ldr	ip, [ip]
   110f0:	cmp	lr, ip
   110f4:	bne	11124 <__assert_fail@plt+0x608>
   110f8:	add	r0, r0, #1
   110fc:	cmp	r0, r7
   11100:	add	r3, r3, #1
   11104:	bne	110d8 <__assert_fail@plt+0x5bc>
   11108:	ldr	r1, [pc, #96]	; 11170 <__assert_fail@plt+0x654>
   1110c:	mov	r0, r7
   11110:	add	r2, r4, #1
   11114:	ldr	r1, [r5, r1]
   11118:	str	r2, [r1]
   1111c:	cmp	r8, r3
   11120:	beq	11140 <__assert_fail@plt+0x624>
   11124:	ldr	r2, [r6, #8]
   11128:	ldr	r3, [r6, #12]
   1112c:	add	r4, r4, r2
   11130:	bic	r4, r4, #1
   11134:	strh	r0, [r3, r4]
   11138:	add	sp, sp, #8
   1113c:	pop	{r4, r5, r6, r7, r8, pc}
   11140:	ldr	r2, [pc, #44]	; 11174 <__assert_fail@plt+0x658>
   11144:	sub	r3, r4, #1
   11148:	ldr	r2, [r5, r2]
   1114c:	str	r3, [r2]
   11150:	b	11124 <__assert_fail@plt+0x608>
   11154:	bne	1111c <__assert_fail@plt+0x600>
   11158:	b	11108 <__assert_fail@plt+0x5ec>
   1115c:	andeq	r6, r1, r8, lsl #31
   11160:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11164:	andeq	r0, r0, ip, lsr #1
   11168:	andeq	r0, r0, ip, ror #1
   1116c:	andeq	r0, r0, r8, lsr #1
   11170:	strdeq	r0, [r0], -r8
   11174:	andeq	r0, r0, r8, ror #1
   11178:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1117c:	sub	sp, sp, #12
   11180:	ldr	r7, [pc, #264]	; 11290 <__assert_fail@plt+0x774>
   11184:	ldr	r2, [pc, #264]	; 11294 <__assert_fail@plt+0x778>
   11188:	add	r7, pc, r7
   1118c:	ldr	r3, [pc, #260]	; 11298 <__assert_fail@plt+0x77c>
   11190:	ldr	r2, [r7, r2]
   11194:	ldr	r0, [pc, #256]	; 1129c <__assert_fail@plt+0x780>
   11198:	mov	r1, r2
   1119c:	str	r2, [sp]
   111a0:	ldr	ip, [r1]
   111a4:	ldr	r6, [r7, r3]
   111a8:	rsb	r1, ip, #0
   111ac:	ldr	r2, [pc, #236]	; 112a0 <__assert_fail@plt+0x784>
   111b0:	str	r1, [r6]
   111b4:	ldr	r3, [r7, r0]
   111b8:	mvn	r9, #0
   111bc:	str	r3, [sp, #4]
   111c0:	ldr	r8, [r7, r2]
   111c4:	ldr	r0, [r3]
   111c8:	mov	r3, r8
   111cc:	str	r0, [r8]
   111d0:	sub	r0, r0, ip
   111d4:	cmp	r0, r1
   111d8:	mov	r8, r9
   111dc:	mov	fp, #16
   111e0:	mov	sl, #1
   111e4:	mov	r9, r3
   111e8:	blt	11288 <__assert_fail@plt+0x76c>
   111ec:	mov	r1, fp
   111f0:	mov	r0, sl
   111f4:	bl	11f90 <error@@Base+0x58>
   111f8:	add	r8, r8, #1
   111fc:	mov	r1, #2
   11200:	rsb	r4, r8, #0
   11204:	mov	r5, r0
   11208:	str	r8, [r0, #8]
   1120c:	add	r0, r8, #1
   11210:	bl	11f90 <error@@Base+0x58>
   11214:	ldr	ip, [pc, #136]	; 112a4 <__assert_fail@plt+0x788>
   11218:	mov	r1, r5
   1121c:	str	r0, [r5, #12]
   11220:	ldr	r0, [r7, ip]
   11224:	bl	1166c <__assert_fail@plt+0xb50>
   11228:	ldr	r1, [r6]
   1122c:	b	1123c <__assert_fail@plt+0x720>
   11230:	add	r4, r4, #2
   11234:	cmp	r8, r4
   11238:	blt	1126c <__assert_fail@plt+0x750>
   1123c:	cmp	r4, r1
   11240:	blt	11230 <__assert_fail@plt+0x714>
   11244:	ldr	r3, [r9]
   11248:	cmp	r3, r4
   1124c:	blt	11230 <__assert_fail@plt+0x714>
   11250:	mov	r1, r5
   11254:	mov	r0, r4
   11258:	add	r4, r4, #2
   1125c:	bl	1104c <__assert_fail@plt+0x530>
   11260:	cmp	r8, r4
   11264:	ldr	r1, [r6]
   11268:	bge	1123c <__assert_fail@plt+0x720>
   1126c:	ldr	r3, [sp, #4]
   11270:	ldr	r0, [r3]
   11274:	ldr	r3, [sp]
   11278:	ldr	ip, [r3]
   1127c:	sub	r0, r0, ip
   11280:	cmp	r0, r1
   11284:	bge	111ec <__assert_fail@plt+0x6d0>
   11288:	add	sp, sp, #12
   1128c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11290:	andeq	r6, r1, r0, ror lr
   11294:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11298:	strdeq	r0, [r0], -r8
   1129c:	andeq	r0, r0, ip, lsr #1
   112a0:	andeq	r0, r0, r8, ror #1
   112a4:	andeq	r0, r0, r4, asr #1
   112a8:	push	{r4, r5, r6, r7, r8, lr}
   112ac:	sub	sp, sp, #8
   112b0:	ldr	r8, [pc, #156]	; 11354 <__assert_fail@plt+0x838>
   112b4:	ldr	r1, [pc, #156]	; 11358 <__assert_fail@plt+0x83c>
   112b8:	add	r8, pc, r8
   112bc:	ldr	r2, [pc, #152]	; 1135c <__assert_fail@plt+0x840>
   112c0:	ldr	r3, [pc, #152]	; 11360 <__assert_fail@plt+0x844>
   112c4:	ldr	r1, [r8, r1]
   112c8:	ldr	r2, [r8, r2]
   112cc:	ldr	r3, [r8, r3]
   112d0:	ldr	r6, [r1, #4]
   112d4:	ldr	r0, [r2]
   112d8:	ldr	r3, [r3]
   112dc:	cmp	r6, #0
   112e0:	sub	r0, r0, r3
   112e4:	beq	1134c <__assert_fail@plt+0x830>
   112e8:	add	r7, sp, #4
   112ec:	mov	r5, #1
   112f0:	ldr	r3, [r6, #8]
   112f4:	ldr	r2, [r6, #12]
   112f8:	add	r3, r0, r3
   112fc:	bic	r3, r3, #1
   11300:	ldr	r1, [r6]
   11304:	ldrh	r4, [r2, r3]
   11308:	mov	r2, r7
   1130c:	bl	10fd4 <__assert_fail@plt+0x4b8>
   11310:	cmp	r4, r0
   11314:	ble	1133c <__assert_fail@plt+0x820>
   11318:	ldr	r3, [pc, #68]	; 11364 <__assert_fail@plt+0x848>
   1131c:	ldr	r3, [r8, r3]
   11320:	ldr	r2, [r3]
   11324:	add	r3, r2, r4, lsl #2
   11328:	add	r0, r2, r0, lsl #2
   1132c:	ldr	r2, [r3, #-4]!
   11330:	cmp	r3, r0
   11334:	strb	r5, [r2, #4]
   11338:	bne	1132c <__assert_fail@plt+0x810>
   1133c:	ldr	r6, [r6]
   11340:	ldr	r0, [sp, #4]
   11344:	cmp	r6, #0
   11348:	bne	112f0 <__assert_fail@plt+0x7d4>
   1134c:	add	sp, sp, #8
   11350:	pop	{r4, r5, r6, r7, r8, pc}
   11354:	andeq	r6, r1, r0, asr #26
   11358:	andeq	r0, r0, r4, asr #1
   1135c:	andeq	r0, r0, ip, lsr #1
   11360:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11364:	andeq	r0, r0, ip, ror #1
   11368:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1136c:	add	r7, r0, #4096	; 0x1000
   11370:	mov	r8, r2
   11374:	mov	r9, r1
   11378:	bl	11b98 <__assert_fail@plt+0x107c>
   1137c:	ldr	r3, [r7, #3956]	; 0xf74
   11380:	ldr	r2, [pc, #184]	; 11440 <__assert_fail@plt+0x924>
   11384:	cmp	r3, #0
   11388:	add	r2, pc, r2
   1138c:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11390:	ldr	r3, [pc, #172]	; 11444 <__assert_fail@plt+0x928>
   11394:	mov	r6, #0
   11398:	mov	sl, #1
   1139c:	ldr	fp, [r2, r3]
   113a0:	ldr	r3, [r7, #3952]	; 0xf70
   113a4:	mov	r0, fp
   113a8:	ldr	r3, [r3, r6, lsl #2]
   113ac:	ldr	r5, [r3, #12]
   113b0:	ldr	r4, [r3, #16]
   113b4:	mov	r1, r5
   113b8:	mov	r2, r4
   113bc:	bl	12708 <error@@Base+0x7d0>
   113c0:	mov	r2, r4
   113c4:	mov	r1, r5
   113c8:	mov	r0, r9
   113cc:	bl	12708 <error@@Base+0x7d0>
   113d0:	ldr	r3, [r7, #3952]	; 0xf70
   113d4:	ldr	r3, [r3, r6, lsl #2]
   113d8:	ldr	r0, [r3, #8]
   113dc:	bl	10a8c <strlen@plt>
   113e0:	mov	r1, r5
   113e4:	mov	r2, r4
   113e8:	add	r0, r9, r0, lsl #3
   113ec:	bl	12708 <error@@Base+0x7d0>
   113f0:	subs	r0, r8, #0
   113f4:	mov	r1, sl
   113f8:	beq	1142c <__assert_fail@plt+0x910>
   113fc:	sub	r4, r5, r4
   11400:	clz	r4, r4
   11404:	lsr	r4, r4, #5
   11408:	mov	r2, r4
   1140c:	bl	12708 <error@@Base+0x7d0>
   11410:	cmp	r5, #10
   11414:	mov	r0, #88	; 0x58
   11418:	lslle	r0, r5, #3
   1141c:	mov	r2, r4
   11420:	add	r0, r8, r0
   11424:	mov	r1, sl
   11428:	bl	12708 <error@@Base+0x7d0>
   1142c:	ldr	r3, [r7, #3956]	; 0xf74
   11430:	add	r6, r6, #1
   11434:	cmp	r3, r6
   11438:	bgt	113a0 <__assert_fail@plt+0x884>
   1143c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11440:	andeq	r6, r1, r0, ror ip
   11444:	ldrdeq	r0, [r0], -r8
   11448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1144c:	sub	sp, sp, #20
   11450:	ldr	fp, [pc, #192]	; 11518 <__assert_fail@plt+0x9fc>
   11454:	ldr	r2, [pc, #192]	; 1151c <__assert_fail@plt+0xa00>
   11458:	add	fp, pc, fp
   1145c:	ldr	r3, [fp, r2]
   11460:	str	r3, [sp, #8]
   11464:	ldr	r2, [r3, #12]
   11468:	cmp	r2, #0
   1146c:	ble	11508 <__assert_fail@plt+0x9ec>
   11470:	ldr	r1, [pc, #168]	; 11520 <__assert_fail@plt+0xa04>
   11474:	mov	sl, #0
   11478:	mov	r8, #1
   1147c:	ldr	r3, [fp, r1]
   11480:	str	r3, [sp, #12]
   11484:	ldr	r3, [sp, #12]
   11488:	mov	r4, sl
   1148c:	lsl	r7, sl, #3
   11490:	add	r9, sl, #7
   11494:	str	sl, [sp, #4]
   11498:	add	r5, r3, #928	; 0x3a0
   1149c:	mov	r6, r8
   114a0:	ldr	sl, [sp, #8]
   114a4:	b	114b0 <__assert_fail@plt+0x994>
   114a8:	ldr	r2, [sl, #12]
   114ac:	add	r4, r4, #1
   114b0:	cmp	r2, r4
   114b4:	ldr	ip, [pc, #104]	; 11524 <__assert_fail@plt+0xa08>
   114b8:	mov	r0, r5
   114bc:	mov	r1, r8
   114c0:	ble	11510 <__assert_fail@plt+0x9f4>
   114c4:	ldr	r2, [fp, ip]
   114c8:	add	r5, r5, #8
   114cc:	ldr	r2, [r2]
   114d0:	add	r2, r2, r7
   114d4:	add	r7, r7, #8
   114d8:	ldrb	r2, [r2, #4]
   114dc:	and	r6, r6, r2
   114e0:	eor	r2, r6, #1
   114e4:	bl	12708 <error@@Base+0x7d0>
   114e8:	cmp	r4, r9
   114ec:	bne	114a8 <__assert_fail@plt+0x98c>
   114f0:	ldr	r3, [sp, #8]
   114f4:	ldr	sl, [sp, #4]
   114f8:	ldr	r2, [r3, #12]
   114fc:	add	sl, sl, #1
   11500:	cmp	sl, r2
   11504:	blt	11484 <__assert_fail@plt+0x968>
   11508:	add	sp, sp, #20
   1150c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11510:	ldr	sl, [sp, #4]
   11514:	b	114fc <__assert_fail@plt+0x9e0>
   11518:	andeq	r6, r1, r0, lsr #23
   1151c:	strheq	r0, [r0], -ip
   11520:	ldrdeq	r0, [r0], -r8
   11524:	andeq	r0, r0, r0, lsl #2
   11528:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1152c:	ldr	r3, [pc, #196]	; 115f8 <__assert_fail@plt+0xadc>
   11530:	ldr	r2, [pc, #196]	; 115fc <__assert_fail@plt+0xae0>
   11534:	add	r3, pc, r3
   11538:	ldr	r8, [r3, r2]
   1153c:	ldr	r2, [r8, #12]
   11540:	cmp	r2, #0
   11544:	ble	115ec <__assert_fail@plt+0xad0>
   11548:	ldr	r1, [pc, #176]	; 11600 <__assert_fail@plt+0xae4>
   1154c:	ldr	r2, [pc, #176]	; 11604 <__assert_fail@plt+0xae8>
   11550:	mov	r4, #0
   11554:	ldr	fp, [r3, r1]
   11558:	ldr	r6, [r3, r2]
   1155c:	add	r7, fp, #9024	; 0x2340
   11560:	add	r7, r7, #24
   11564:	add	sl, fp, #992	; 0x3e0
   11568:	mov	r9, #1
   1156c:	ldr	r3, [r6]
   11570:	lsl	r5, r4, #3
   11574:	ldr	r3, [r3, r4, lsl #3]
   11578:	add	r4, r4, #1
   1157c:	ldr	r0, [r3, #8]
   11580:	bl	11984 <__assert_fail@plt+0xe68>
   11584:	ldr	r3, [r6]
   11588:	mov	r2, r9
   1158c:	add	ip, r3, r5
   11590:	ldr	r1, [r3, r5]
   11594:	ldrb	r3, [ip, #4]
   11598:	clz	r3, r3
   1159c:	ldr	r1, [r1, #8]
   115a0:	lsr	r3, r3, #5
   115a4:	cmp	r0, #0
   115a8:	movne	r0, sl
   115ac:	moveq	r0, r7
   115b0:	bl	12828 <error@@Base+0x8f0>
   115b4:	ldr	r3, [r8, #12]
   115b8:	cmp	r3, r4
   115bc:	bgt	1156c <__assert_fail@plt+0xa50>
   115c0:	add	r1, fp, #8
   115c4:	add	r0, fp, #992	; 0x3e0
   115c8:	mov	r2, #0
   115cc:	bl	11368 <__assert_fail@plt+0x84c>
   115d0:	add	r0, fp, #9024	; 0x2340
   115d4:	add	r2, fp, #824	; 0x338
   115d8:	add	r1, fp, #416	; 0x1a0
   115dc:	add	r0, r0, #24
   115e0:	bl	11368 <__assert_fail@plt+0x84c>
   115e4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115e8:	b	11448 <__assert_fail@plt+0x92c>
   115ec:	ldr	r2, [pc, #12]	; 11600 <__assert_fail@plt+0xae4>
   115f0:	ldr	fp, [r3, r2]
   115f4:	b	115c0 <__assert_fail@plt+0xaa4>
   115f8:	andeq	r6, r1, r4, asr #21
   115fc:	strheq	r0, [r0], -ip
   11600:	ldrdeq	r0, [r0], -r8
   11604:	andeq	r0, r0, r0, lsl #2
   11608:	mov	r3, #0
   1160c:	str	r3, [r0, #4]
   11610:	str	r3, [r0]
   11614:	str	r3, [r0, #8]
   11618:	str	r3, [r0, #12]
   1161c:	bx	lr
   11620:	ldr	r3, [r0]
   11624:	mov	r2, #0
   11628:	cmp	r3, r2
   1162c:	push	{r4, lr}
   11630:	mov	r4, r0
   11634:	stm	r1, {r2, r3}
   11638:	str	r1, [r0]
   1163c:	streq	r1, [r0, #4]
   11640:	ldr	r0, [r0, #8]
   11644:	strne	r1, [r3]
   11648:	cmp	r0, #0
   1164c:	beq	1165c <__assert_fail@plt+0xb40>
   11650:	bl	109a8 <free@plt>
   11654:	mov	r3, #0
   11658:	str	r3, [r4, #8]
   1165c:	ldr	r3, [r4, #12]
   11660:	add	r3, r3, #1
   11664:	str	r3, [r4, #12]
   11668:	pop	{r4, pc}
   1166c:	ldr	r3, [r0, #4]
   11670:	mov	r2, #0
   11674:	cmp	r3, r2
   11678:	push	{r4, lr}
   1167c:	mov	r4, r0
   11680:	str	r3, [r1]
   11684:	str	r2, [r1, #4]
   11688:	streq	r1, [r0]
   1168c:	ldr	r0, [r0, #8]
   11690:	strne	r1, [r3, #4]
   11694:	cmp	r0, #0
   11698:	str	r1, [r4, #4]
   1169c:	beq	116ac <__assert_fail@plt+0xb90>
   116a0:	bl	109a8 <free@plt>
   116a4:	mov	r3, #0
   116a8:	str	r3, [r4, #8]
   116ac:	ldr	r3, [r4, #12]
   116b0:	add	r3, r3, #1
   116b4:	str	r3, [r4, #12]
   116b8:	pop	{r4, pc}
   116bc:	ldr	r3, [r2]
   116c0:	push	{r4, lr}
   116c4:	cmp	r3, #0
   116c8:	str	r3, [r1]
   116cc:	str	r2, [r1, #4]
   116d0:	mov	r4, r0
   116d4:	streq	r1, [r0]
   116d8:	ldr	r0, [r0, #8]
   116dc:	strne	r1, [r3, #4]
   116e0:	cmp	r0, #0
   116e4:	str	r1, [r2]
   116e8:	beq	116f8 <__assert_fail@plt+0xbdc>
   116ec:	bl	109a8 <free@plt>
   116f0:	mov	r3, #0
   116f4:	str	r3, [r4, #8]
   116f8:	ldr	r3, [r4, #12]
   116fc:	add	r3, r3, #1
   11700:	str	r3, [r4, #12]
   11704:	pop	{r4, pc}
   11708:	ldr	r3, [r1, #4]
   1170c:	push	{r4, lr}
   11710:	cmp	r3, #0
   11714:	stm	r2, {r1, r3}
   11718:	mov	r4, r0
   1171c:	str	r2, [r1, #4]
   11720:	streq	r2, [r0, #4]
   11724:	ldr	r0, [r0, #8]
   11728:	strne	r2, [r3]
   1172c:	cmp	r0, #0
   11730:	beq	11740 <__assert_fail@plt+0xc24>
   11734:	bl	109a8 <free@plt>
   11738:	mov	r3, #0
   1173c:	str	r3, [r4, #8]
   11740:	ldr	r3, [r4, #12]
   11744:	add	r3, r3, #1
   11748:	str	r3, [r4, #12]
   1174c:	pop	{r4, pc}
   11750:	ldr	r3, [r1]
   11754:	ldr	r2, [r1, #4]
   11758:	cmp	r3, #0
   1175c:	push	{r4, r5, r6, lr}
   11760:	mov	r4, r0
   11764:	strne	r2, [r3, #4]
   11768:	ldrne	r2, [r1, #4]
   1176c:	streq	r2, [r0]
   11770:	cmp	r2, #0
   11774:	streq	r3, [r0, #4]
   11778:	ldr	r0, [r0, #8]
   1177c:	mov	r5, #0
   11780:	strne	r3, [r2]
   11784:	cmp	r0, r5
   11788:	str	r5, [r1, #4]
   1178c:	str	r5, [r1]
   11790:	beq	1179c <__assert_fail@plt+0xc80>
   11794:	bl	109a8 <free@plt>
   11798:	str	r5, [r4, #8]
   1179c:	ldr	r3, [r4, #12]
   117a0:	sub	r3, r3, #1
   117a4:	str	r3, [r4, #12]
   117a8:	pop	{r4, r5, r6, pc}
   117ac:	ldr	r3, [r0, #8]
   117b0:	cmp	r3, #0
   117b4:	bxne	lr
   117b8:	ldr	r3, [r0, #12]
   117bc:	cmp	r3, #0
   117c0:	bxeq	lr
   117c4:	push	{r4, lr}
   117c8:	mov	r1, #4
   117cc:	mov	r4, r0
   117d0:	mov	r0, r3
   117d4:	bl	11f90 <error@@Base+0x58>
   117d8:	ldr	r3, [r4]
   117dc:	cmp	r3, #0
   117e0:	str	r0, [r4, #8]
   117e4:	popeq	{r4, pc}
   117e8:	sub	r0, r0, #4
   117ec:	str	r3, [r0, #4]!
   117f0:	ldr	r3, [r3, #4]
   117f4:	cmp	r3, #0
   117f8:	bne	117ec <__assert_fail@plt+0xcd0>
   117fc:	pop	{r4, pc}
   11800:	push	{r4, r5, r6, lr}
   11804:	ldr	r4, [r0]
   11808:	cmp	r4, #0
   1180c:	popeq	{r4, r5, r6, pc}
   11810:	mov	r5, r0
   11814:	mov	r6, r1
   11818:	mov	r1, r4
   1181c:	mov	r0, r5
   11820:	bl	11750 <__assert_fail@plt+0xc34>
   11824:	mov	r0, r4
   11828:	blx	r6
   1182c:	ldr	r4, [r5]
   11830:	cmp	r4, #0
   11834:	bne	11818 <__assert_fail@plt+0xcfc>
   11838:	pop	{r4, r5, r6, pc}
   1183c:	push	{r4, r5, r6, lr}
   11840:	mov	r1, r0
   11844:	ldr	r5, [pc, #72]	; 11894 <__assert_fail@plt+0xd78>
   11848:	mov	r4, r0
   1184c:	add	r5, pc, r5
   11850:	mov	r0, r5
   11854:	bl	11a0c <__assert_fail@plt+0xef0>
   11858:	cmp	r0, #0
   1185c:	beq	11874 <__assert_fail@plt+0xd58>
   11860:	ldr	r0, [pc, #48]	; 11898 <__assert_fail@plt+0xd7c>
   11864:	mov	r1, r4
   11868:	add	r0, pc, r0
   1186c:	pop	{r4, r5, r6, lr}
   11870:	b	12310 <error@@Base+0x3d8>
   11874:	mov	r1, #12
   11878:	mov	r0, #1
   1187c:	bl	11f90 <error@@Base+0x58>
   11880:	str	r4, [r0, #8]
   11884:	mov	r1, r0
   11888:	mov	r0, r5
   1188c:	pop	{r4, r5, r6, lr}
   11890:	b	11a90 <__assert_fail@plt+0xf74>
   11894:	strdeq	r6, [r1], -r4
   11898:	andeq	r2, r0, r0, lsl #15
   1189c:	push	{r4, r5, r6, lr}
   118a0:	ldr	r4, [pc, #188]	; 11964 <__assert_fail@plt+0xe48>
   118a4:	ldr	r6, [pc, #188]	; 11968 <__assert_fail@plt+0xe4c>
   118a8:	add	r4, pc, r4
   118ac:	add	r6, pc, r6
   118b0:	ldrb	r3, [r4, #-128]	; 0xffffff80
   118b4:	cmp	r3, #0
   118b8:	bne	11958 <__assert_fail@plt+0xe3c>
   118bc:	cmp	r0, #0
   118c0:	beq	1192c <__assert_fail@plt+0xe10>
   118c4:	ldr	r2, [pc, #160]	; 1196c <__assert_fail@plt+0xe50>
   118c8:	sub	r5, r4, #124	; 0x7c
   118cc:	mov	r1, r0
   118d0:	add	r2, pc, r2
   118d4:	mov	r0, r5
   118d8:	bl	13688 <error@@Base+0x1750>
   118dc:	sub	r0, r4, #108	; 0x6c
   118e0:	mov	r1, r5
   118e4:	bl	12db0 <error@@Base+0xe78>
   118e8:	ldr	r3, [pc, #128]	; 11970 <__assert_fail@plt+0xe54>
   118ec:	mov	r0, r5
   118f0:	ldr	r1, [r6, r3]
   118f4:	bl	11800 <__assert_fail@plt+0xce4>
   118f8:	ldr	r4, [r4, #-108]	; 0xffffff94
   118fc:	cmp	r4, #0
   11900:	beq	11918 <__assert_fail@plt+0xdfc>
   11904:	ldr	r0, [r4, #8]
   11908:	bl	1183c <__assert_fail@plt+0xd20>
   1190c:	ldr	r4, [r4, #4]
   11910:	cmp	r4, #0
   11914:	bne	11904 <__assert_fail@plt+0xde8>
   11918:	ldr	r3, [pc, #84]	; 11974 <__assert_fail@plt+0xe58>
   1191c:	mov	r2, #1
   11920:	add	r3, pc, r3
   11924:	strb	r2, [r3, #-128]	; 0xffffff80
   11928:	pop	{r4, r5, r6, pc}
   1192c:	ldr	r4, [pc, #68]	; 11978 <__assert_fail@plt+0xe5c>
   11930:	ldr	r0, [pc, #68]	; 1197c <__assert_fail@plt+0xe60>
   11934:	add	r4, pc, r4
   11938:	add	r0, pc, r0
   1193c:	add	r5, r4, #436	; 0x1b4
   11940:	b	11948 <__assert_fail@plt+0xe2c>
   11944:	ldr	r0, [r4, #4]!
   11948:	bl	1183c <__assert_fail@plt+0xd20>
   1194c:	cmp	r5, r4
   11950:	bne	11944 <__assert_fail@plt+0xe28>
   11954:	b	11918 <__assert_fail@plt+0xdfc>
   11958:	ldr	r0, [pc, #32]	; 11980 <__assert_fail@plt+0xe64>
   1195c:	add	r0, pc, r0
   11960:	bl	11f38 <error@@Base>
   11964:	muleq	r1, r0, r8
   11968:	andeq	r6, r1, ip, asr #14
   1196c:	andeq	r6, r1, r8, asr r8
   11970:	andeq	r0, r0, r4, lsr #1
   11974:	andeq	r8, r1, r8, lsl r8
   11978:	andeq	r6, r1, r4, lsl r4
   1197c:	andeq	r2, r0, r4, asr #13
   11980:	andeq	r2, r0, r4, lsr #13
   11984:	ldr	r3, [pc, #56]	; 119c4 <__assert_fail@plt+0xea8>
   11988:	push	{r4, lr}
   1198c:	add	r3, pc, r3
   11990:	ldrb	r3, [r3, #-128]	; 0xffffff80
   11994:	cmp	r3, #0
   11998:	beq	119b8 <__assert_fail@plt+0xe9c>
   1199c:	mov	r1, r0
   119a0:	ldr	r0, [pc, #32]	; 119c8 <__assert_fail@plt+0xeac>
   119a4:	add	r0, pc, r0
   119a8:	bl	11a0c <__assert_fail@plt+0xef0>
   119ac:	adds	r0, r0, #0
   119b0:	movne	r0, #1
   119b4:	pop	{r4, pc}
   119b8:	ldr	r0, [pc, #12]	; 119cc <__assert_fail@plt+0xeb0>
   119bc:	add	r0, pc, r0
   119c0:	bl	11f38 <error@@Base>
   119c4:	andeq	r8, r1, ip, lsr #15
   119c8:	muleq	r1, ip, r7
   119cc:	andeq	r2, r0, r4, ror #12
   119d0:	push	{r4, r5, r6, lr}
   119d4:	add	r5, r0, #8000	; 0x1f40
   119d8:	mov	r6, r0
   119dc:	add	r5, r5, #48	; 0x30
   119e0:	mov	r4, r0
   119e4:	mov	r0, r4
   119e8:	add	r4, r4, #16
   119ec:	bl	11608 <__assert_fail@plt+0xaec>
   119f0:	cmp	r4, r5
   119f4:	bne	119e4 <__assert_fail@plt+0xec8>
   119f8:	add	r6, r6, #4096	; 0x1000
   119fc:	mov	r3, #0
   11a00:	str	r3, [r6, #3952]	; 0xf70
   11a04:	str	r3, [r6, #3956]	; 0xf74
   11a08:	pop	{r4, r5, r6, pc}
   11a0c:	push	{r4, r5, r6, lr}
   11a10:	mov	r5, r1
   11a14:	ldrb	r3, [r1]
   11a18:	cmp	r3, #0
   11a1c:	beq	11a54 <__assert_fail@plt+0xf38>
   11a20:	mov	r2, #0
   11a24:	add	r2, r2, r3
   11a28:	ldrb	r3, [r1, #1]!
   11a2c:	cmp	r3, #0
   11a30:	bne	11a24 <__assert_fail@plt+0xf08>
   11a34:	ldr	r1, [pc, #80]	; 11a8c <__assert_fail@plt+0xf70>
   11a38:	asr	r3, r2, #31
   11a3c:	smull	ip, r1, r1, r2
   11a40:	add	r1, r1, r2
   11a44:	rsb	r3, r3, r1, asr #8
   11a48:	rsb	r1, r3, r3, lsl #6
   11a4c:	rsb	r3, r3, r1, lsl #3
   11a50:	sub	r3, r2, r3
   11a54:	ldr	r4, [r0, r3, lsl #4]
   11a58:	cmp	r4, #0
   11a5c:	bne	11a70 <__assert_fail@plt+0xf54>
   11a60:	b	11a84 <__assert_fail@plt+0xf68>
   11a64:	ldr	r4, [r4, #4]
   11a68:	cmp	r4, #0
   11a6c:	beq	11a84 <__assert_fail@plt+0xf68>
   11a70:	ldr	r1, [r4, #8]
   11a74:	mov	r0, r5
   11a78:	bl	10984 <strcmp@plt>
   11a7c:	cmp	r0, #0
   11a80:	bne	11a64 <__assert_fail@plt+0xf48>
   11a84:	mov	r0, r4
   11a88:	pop	{r4, r5, r6, pc}
   11a8c:	subhi	r4, sl, #1552	; 0x610
   11a90:	ldr	ip, [r1, #8]
   11a94:	push	{r4, lr}
   11a98:	ldrb	r3, [ip]
   11a9c:	cmp	r3, #0
   11aa0:	beq	11adc <__assert_fail@plt+0xfc0>
   11aa4:	mov	r2, #0
   11aa8:	add	r2, r2, r3
   11aac:	ldrb	r3, [ip, #1]!
   11ab0:	cmp	r3, #0
   11ab4:	bne	11aa8 <__assert_fail@plt+0xf8c>
   11ab8:	ldr	ip, [pc, #80]	; 11b10 <__assert_fail@plt+0xff4>
   11abc:	asr	r3, r2, #31
   11ac0:	smull	lr, ip, ip, r2
   11ac4:	add	ip, ip, r2
   11ac8:	rsb	r3, r3, ip, asr #8
   11acc:	rsb	ip, r3, r3, lsl #6
   11ad0:	rsb	r3, r3, ip, lsl #3
   11ad4:	sub	r3, r2, r3
   11ad8:	lsl	r3, r3, #4
   11adc:	add	r4, r0, #4096	; 0x1000
   11ae0:	add	r0, r0, r3
   11ae4:	bl	11620 <__assert_fail@plt+0xb04>
   11ae8:	ldr	r0, [r4, #3952]	; 0xf70
   11aec:	cmp	r0, #0
   11af0:	beq	11b00 <__assert_fail@plt+0xfe4>
   11af4:	bl	109a8 <free@plt>
   11af8:	mov	r3, #0
   11afc:	str	r3, [r4, #3952]	; 0xf70
   11b00:	ldr	r3, [r4, #3956]	; 0xf74
   11b04:	add	r3, r3, #1
   11b08:	str	r3, [r4, #3956]	; 0xf74
   11b0c:	pop	{r4, pc}
   11b10:	subhi	r4, sl, #1552	; 0x610
   11b14:	ldr	ip, [r1, #8]
   11b18:	push	{r4, lr}
   11b1c:	ldrb	r3, [ip]
   11b20:	cmp	r3, #0
   11b24:	beq	11b60 <__assert_fail@plt+0x1044>
   11b28:	mov	r2, #0
   11b2c:	add	r2, r2, r3
   11b30:	ldrb	r3, [ip, #1]!
   11b34:	cmp	r3, #0
   11b38:	bne	11b2c <__assert_fail@plt+0x1010>
   11b3c:	ldr	ip, [pc, #80]	; 11b94 <__assert_fail@plt+0x1078>
   11b40:	asr	r3, r2, #31
   11b44:	smull	lr, ip, ip, r2
   11b48:	add	ip, ip, r2
   11b4c:	rsb	r3, r3, ip, asr #8
   11b50:	rsb	ip, r3, r3, lsl #6
   11b54:	rsb	r3, r3, ip, lsl #3
   11b58:	sub	r3, r2, r3
   11b5c:	lsl	r3, r3, #4
   11b60:	add	r4, r0, #4096	; 0x1000
   11b64:	add	r0, r0, r3
   11b68:	bl	11750 <__assert_fail@plt+0xc34>
   11b6c:	ldr	r0, [r4, #3952]	; 0xf70
   11b70:	cmp	r0, #0
   11b74:	beq	11b84 <__assert_fail@plt+0x1068>
   11b78:	bl	109a8 <free@plt>
   11b7c:	mov	r3, #0
   11b80:	str	r3, [r4, #3952]	; 0xf70
   11b84:	ldr	r3, [r4, #3956]	; 0xf74
   11b88:	sub	r3, r3, #1
   11b8c:	str	r3, [r4, #3956]	; 0xf74
   11b90:	pop	{r4, pc}
   11b94:	subhi	r4, sl, #1552	; 0x610
   11b98:	push	{r4, r5, r6, lr}
   11b9c:	add	r6, r0, #4096	; 0x1000
   11ba0:	ldr	r4, [r6, #3952]	; 0xf70
   11ba4:	cmp	r4, #0
   11ba8:	popne	{r4, r5, r6, pc}
   11bac:	ldr	r3, [r6, #3956]	; 0xf74
   11bb0:	cmp	r3, #0
   11bb4:	popeq	{r4, r5, r6, pc}
   11bb8:	mov	r5, r0
   11bbc:	mov	r1, #4
   11bc0:	mov	r0, r3
   11bc4:	bl	11f90 <error@@Base+0x58>
   11bc8:	ldr	lr, [pc, #60]	; 11c0c <__assert_fail@plt+0x10f0>
   11bcc:	mov	r2, r4
   11bd0:	mov	ip, r4
   11bd4:	str	r0, [r6, #3952]	; 0xf70
   11bd8:	ldr	r3, [r5, ip, lsl #4]
   11bdc:	cmp	r3, #0
   11be0:	beq	11bfc <__assert_fail@plt+0x10e0>
   11be4:	add	r1, r0, r2, lsl #2
   11be8:	str	r3, [r1], #4
   11bec:	ldr	r3, [r3, #4]
   11bf0:	add	r2, r2, #1
   11bf4:	cmp	r3, #0
   11bf8:	bne	11be8 <__assert_fail@plt+0x10cc>
   11bfc:	add	ip, ip, #1
   11c00:	cmp	ip, lr
   11c04:	bne	11bd8 <__assert_fail@plt+0x10bc>
   11c08:	pop	{r4, r5, r6, pc}
   11c0c:	strdeq	r0, [r0], -r7
   11c10:	push	{r4, r5, r6, r7, r8, lr}
   11c14:	add	r5, r0, #8000	; 0x1f40
   11c18:	mov	r7, r0
   11c1c:	mov	r6, r1
   11c20:	add	r5, r5, #48	; 0x30
   11c24:	mov	r4, r0
   11c28:	mov	r0, r4
   11c2c:	mov	r1, r6
   11c30:	add	r4, r4, #16
   11c34:	bl	11800 <__assert_fail@plt+0xce4>
   11c38:	cmp	r4, r5
   11c3c:	bne	11c28 <__assert_fail@plt+0x110c>
   11c40:	add	r7, r7, #4096	; 0x1000
   11c44:	ldr	r0, [r7, #3952]	; 0xf70
   11c48:	cmp	r0, #0
   11c4c:	beq	11c5c <__assert_fail@plt+0x1140>
   11c50:	bl	109a8 <free@plt>
   11c54:	mov	r3, #0
   11c58:	str	r3, [r7, #3952]	; 0xf70
   11c5c:	mov	r3, #0
   11c60:	str	r3, [r7, #3956]	; 0xf74
   11c64:	pop	{r4, r5, r6, r7, r8, pc}
   11c68:	ldr	r3, [pc, #76]	; 11cbc <__assert_fail@plt+0x11a0>
   11c6c:	ldr	r2, [pc, #76]	; 11cc0 <__assert_fail@plt+0x11a4>
   11c70:	add	r3, pc, r3
   11c74:	push	{r4, r5, lr}
   11c78:	sub	sp, sp, #116	; 0x74
   11c7c:	ldr	r3, [r3, r2]
   11c80:	mov	r5, r0
   11c84:	ldr	r4, [r3]
   11c88:	bl	10a68 <getpid@plt>
   11c8c:	ldr	r1, [pc, #48]	; 11cc4 <__assert_fail@plt+0x11a8>
   11c90:	mov	r2, r4
   11c94:	add	r4, sp, #12
   11c98:	add	r1, pc, r1
   11c9c:	str	r5, [sp]
   11ca0:	mov	r3, r0
   11ca4:	mov	r0, r4
   11ca8:	bl	10ad4 <sprintf@plt>
   11cac:	mov	r0, r4
   11cb0:	bl	109d8 <strdup@plt>
   11cb4:	add	sp, sp, #116	; 0x74
   11cb8:	pop	{r4, r5, pc}
   11cbc:	andeq	r6, r1, r8, lsl #7
   11cc0:	ldrdeq	r0, [r0], -r4
   11cc4:	andeq	r2, r0, r4, lsr #12
   11cc8:	ldr	r3, [pc, #108]	; 11d3c <__assert_fail@plt+0x1220>
   11ccc:	ldr	r2, [pc, #108]	; 11d40 <__assert_fail@plt+0x1224>
   11cd0:	add	r3, pc, r3
   11cd4:	push	{r7, lr}
   11cd8:	mov	r7, r0
   11cdc:	ldr	r3, [r3, r2]
   11ce0:	ldr	r3, [r3]
   11ce4:	cmp	r3, #0
   11ce8:	beq	11cf0 <__assert_fail@plt+0x11d4>
   11cec:	blx	r3
   11cf0:	ldr	r6, [pc, #76]	; 11d44 <__assert_fail@plt+0x1228>
   11cf4:	add	r6, pc, r6
   11cf8:	ldrsh	r3, [r6]
   11cfc:	cmp	r3, #0
   11d00:	movgt	r4, #1
   11d04:	ble	11d34 <__assert_fail@plt+0x1218>
   11d08:	mov	r0, r4
   11d0c:	bl	11c68 <__assert_fail@plt+0x114c>
   11d10:	add	r4, r4, #1
   11d14:	sxth	r4, r4
   11d18:	mov	r5, r0
   11d1c:	bl	109f0 <unlink@plt>
   11d20:	mov	r0, r5
   11d24:	bl	109a8 <free@plt>
   11d28:	ldrsh	r3, [r6]
   11d2c:	cmp	r3, r4
   11d30:	bge	11d08 <__assert_fail@plt+0x11ec>
   11d34:	mov	r0, r7
   11d38:	bl	10a74 <exit@plt>
   11d3c:	andeq	r6, r1, r8, lsr #6
   11d40:	ldrdeq	r0, [r0], -ip
   11d44:	andeq	r8, r1, r8, ror #7
   11d48:	ldrb	r3, [r0]
   11d4c:	cmp	r3, #0
   11d50:	beq	11db4 <__assert_fail@plt+0x1298>
   11d54:	ldrb	ip, [r1]
   11d58:	cmp	ip, r3
   11d5c:	bne	11dc4 <__assert_fail@plt+0x12a8>
   11d60:	push	{lr}		; (str lr, [sp, #-4]!)
   11d64:	mov	r2, #0
   11d68:	mov	lr, r1
   11d6c:	b	11d7c <__assert_fail@plt+0x1260>
   11d70:	ldrb	ip, [lr, #1]!
   11d74:	cmp	r3, ip
   11d78:	bne	11d9c <__assert_fail@plt+0x1280>
   11d7c:	ldrb	r3, [r0, #1]!
   11d80:	add	r2, r2, #1
   11d84:	cmp	r3, #0
   11d88:	bne	11d70 <__assert_fail@plt+0x1254>
   11d8c:	ldrb	ip, [r1, r2]
   11d90:	cmp	ip, #0
   11d94:	movne	r3, #0
   11d98:	beq	11dac <__assert_fail@plt+0x1290>
   11d9c:	cmp	r3, ip
   11da0:	movcs	r0, #1
   11da4:	mvncc	r0, #0
   11da8:	pop	{pc}		; (ldr pc, [sp], #4)
   11dac:	mov	r0, ip
   11db0:	pop	{pc}		; (ldr pc, [sp], #4)
   11db4:	ldrb	ip, [r1, r3]
   11db8:	cmp	ip, #0
   11dbc:	movne	r3, #0
   11dc0:	beq	11dd4 <__assert_fail@plt+0x12b8>
   11dc4:	cmp	r3, ip
   11dc8:	movcs	r0, #1
   11dcc:	mvncc	r0, #0
   11dd0:	bx	lr
   11dd4:	mov	r0, ip
   11dd8:	bx	lr
   11ddc:	ldr	r2, [pc, #44]	; 11e10 <__assert_fail@plt+0x12f4>
   11de0:	ldr	r3, [pc, #44]	; 11e14 <__assert_fail@plt+0x12f8>
   11de4:	add	r2, pc, r2
   11de8:	ldr	r3, [r2, r3]
   11dec:	ldr	r3, [r3]
   11df0:	cmp	r3, r0
   11df4:	bxeq	lr
   11df8:	ldr	r3, [pc, #24]	; 11e18 <__assert_fail@plt+0x12fc>
   11dfc:	ldr	r3, [r2, r3]
   11e00:	ldr	r3, [r3]
   11e04:	cmp	r0, r3
   11e08:	bxeq	lr
   11e0c:	b	10ab0 <fclose@plt>
   11e10:	andeq	r6, r1, r4, lsl r2
   11e14:	andeq	r0, r0, r4, ror #1
   11e18:	strdeq	r0, [r0], -r4
   11e1c:	push	{lr}		; (str lr, [sp, #-4]!)
   11e20:	sub	sp, sp, #92	; 0x5c
   11e24:	mov	r1, r0
   11e28:	mov	r2, sp
   11e2c:	mov	r0, #3
   11e30:	bl	10a08 <__xstat@plt>
   11e34:	clz	r0, r0
   11e38:	lsr	r0, r0, #5
   11e3c:	add	sp, sp, #92	; 0x5c
   11e40:	pop	{pc}		; (ldr pc, [sp], #4)
   11e44:	ldr	r2, [pc, #44]	; 11e78 <__assert_fail@plt+0x135c>
   11e48:	push	{r4, lr}
   11e4c:	add	r2, pc, r2
   11e50:	ldrh	r3, [r2]
   11e54:	add	r3, r3, #1
   11e58:	sxth	r3, r3
   11e5c:	mov	r0, r3
   11e60:	strh	r3, [r2]
   11e64:	bl	11c68 <__assert_fail@plt+0x114c>
   11e68:	mov	r4, r0
   11e6c:	bl	109f0 <unlink@plt>
   11e70:	mov	r0, r4
   11e74:	pop	{r4, pc}
   11e78:	muleq	r1, r0, r2
   11e7c:	push	{r4, lr}
   11e80:	mov	r4, r0
   11e84:	bl	10a8c <strlen@plt>
   11e88:	sub	r0, r0, #1
   11e8c:	sxth	r0, r0
   11e90:	cmp	r0, #0
   11e94:	bge	11eac <__assert_fail@plt+0x1390>
   11e98:	b	11eb8 <__assert_fail@plt+0x139c>
   11e9c:	sub	r0, r0, #1
   11ea0:	sxth	r0, r0
   11ea4:	cmn	r0, #1
   11ea8:	beq	11eb8 <__assert_fail@plt+0x139c>
   11eac:	ldrb	r3, [r4, r0]
   11eb0:	cmp	r3, #47	; 0x2f
   11eb4:	bne	11e9c <__assert_fail@plt+0x1380>
   11eb8:	add	r0, r0, #1
   11ebc:	add	r0, r4, r0
   11ec0:	pop	{r4, pc}
   11ec4:	push	{r4, lr}
   11ec8:	mov	r0, #0
   11ecc:	bl	11cc8 <__assert_fail@plt+0x11ac>
   11ed0:	ldr	r1, [pc, #76]	; 11f24 <__assert_fail@plt+0x1408>
   11ed4:	ldr	r2, [pc, #76]	; 11f28 <__assert_fail@plt+0x140c>
   11ed8:	add	r1, pc, r1
   11edc:	push	{r4, lr}
   11ee0:	ldr	r2, [r1, r2]
   11ee4:	ldr	r2, [r2]
   11ee8:	cmp	r2, #0
   11eec:	beq	11ef8 <__assert_fail@plt+0x13dc>
   11ef0:	blx	r2
   11ef4:	bl	11ec4 <__assert_fail@plt+0x13a8>
   11ef8:	ldr	r2, [pc, #44]	; 11f2c <__assert_fail@plt+0x1410>
   11efc:	ldr	ip, [pc, #44]	; 11f30 <__assert_fail@plt+0x1414>
   11f00:	mov	r3, r0
   11f04:	ldr	r0, [r1, r2]
   11f08:	ldr	ip, [r1, ip]
   11f0c:	ldr	r1, [pc, #32]	; 11f34 <__assert_fail@plt+0x1418>
   11f10:	ldr	r0, [r0]
   11f14:	add	r1, pc, r1
   11f18:	ldr	r2, [ip]
   11f1c:	bl	10a98 <fprintf@plt>
   11f20:	b	11ef4 <__assert_fail@plt+0x13d8>
   11f24:	andeq	r6, r1, r0, lsr #2
   11f28:	strheq	r0, [r0], -r4
   11f2c:	andeq	r0, r0, r0, asr #1
   11f30:	ldrdeq	r0, [r0], -r4
   11f34:			; <UNDEFINED> instruction: 0x000023b8

00011f38 <error@@Base>:
   11f38:	push	{r4, lr}
   11f3c:	mov	r3, r0
   11f40:	ldr	r4, [pc, #52]	; 11f7c <error@@Base+0x44>
   11f44:	ldr	r1, [pc, #52]	; 11f80 <error@@Base+0x48>
   11f48:	ldr	r2, [pc, #52]	; 11f84 <error@@Base+0x4c>
   11f4c:	add	r4, pc, r4
   11f50:	ldr	ip, [r4, r1]
   11f54:	ldr	r0, [r4, r2]
   11f58:	ldr	r1, [pc, #40]	; 11f88 <error@@Base+0x50>
   11f5c:	ldr	r2, [ip]
   11f60:	add	r1, pc, r1
   11f64:	ldr	r0, [r0]
   11f68:	bl	10a98 <fprintf@plt>
   11f6c:	ldr	r3, [pc, #24]	; 11f8c <error@@Base+0x54>
   11f70:	ldr	r3, [r4, r3]
   11f74:	ldr	r0, [r3]
   11f78:	bl	11cc8 <__assert_fail@plt+0x11ac>
   11f7c:	andeq	r6, r1, ip, lsr #1
   11f80:	ldrdeq	r0, [r0], -r4
   11f84:	andeq	r0, r0, r0, asr #1
   11f88:	andeq	r2, r0, ip, ror r3
   11f8c:	strdeq	r0, [r0], -ip
   11f90:	push	{r4, lr}
   11f94:	bl	10978 <calloc@plt>
   11f98:	cmp	r0, #0
   11f9c:	popne	{r4, pc}
   11fa0:	ldr	r0, [pc, #4]	; 11fac <error@@Base+0x74>
   11fa4:	add	r0, pc, r0
   11fa8:	bl	11f38 <error@@Base>
   11fac:	andeq	r2, r0, r0, asr #6
   11fb0:	ldr	r3, [pc, #40]	; 11fe0 <error@@Base+0xa8>
   11fb4:	add	r3, pc, r3
   11fb8:	ldrb	r2, [r3, #2]
   11fbc:	cmp	r2, #0
   11fc0:	beq	11fc8 <error@@Base+0x90>
   11fc4:	bx	lr
   11fc8:	ldr	r0, [pc, #20]	; 11fe4 <error@@Base+0xac>
   11fcc:	push	{r4, lr}
   11fd0:	mov	r2, #1
   11fd4:	add	r0, pc, r0
   11fd8:	strb	r2, [r3, #2]
   11fdc:	bl	11f38 <error@@Base>
   11fe0:	andeq	r8, r1, r8, lsr #2
   11fe4:	andeq	r2, r0, ip, lsr #6
   11fe8:	ldr	r4, [pc, #68]	; 12034 <error@@Base+0xfc>
   11fec:	ldr	r2, [pc, #68]	; 12038 <error@@Base+0x100>
   11ff0:	ldr	ip, [pc, #68]	; 1203c <error@@Base+0x104>
   11ff4:	add	r4, pc, r4
   11ff8:	push	{lr}		; (str lr, [sp, #-4]!)
   11ffc:	sub	sp, sp, #12
   12000:	mov	r3, r0
   12004:	ldr	ip, [r4, ip]
   12008:	ldr	r0, [r4, r2]
   1200c:	str	r1, [sp]
   12010:	ldr	r1, [pc, #40]	; 12040 <error@@Base+0x108>
   12014:	ldr	r2, [ip]
   12018:	ldr	r0, [r0]
   1201c:	add	r1, pc, r1
   12020:	bl	10a98 <fprintf@plt>
   12024:	ldr	r3, [pc, #24]	; 12044 <error@@Base+0x10c>
   12028:	ldr	r3, [r4, r3]
   1202c:	ldr	r0, [r3]
   12030:	bl	11cc8 <__assert_fail@plt+0x11ac>
   12034:	andeq	r6, r1, r4
   12038:	andeq	r0, r0, r0, asr #1
   1203c:	ldrdeq	r0, [r0], -r4
   12040:	strdeq	r2, [r0], -r4
   12044:	strdeq	r0, [r0], -ip
   12048:	ldr	ip, [pc, #116]	; 120c4 <error@@Base+0x18c>
   1204c:	subs	r2, r0, #0
   12050:	push	{r4, r5, r6, lr}
   12054:	add	ip, pc, ip
   12058:	mov	r4, r1
   1205c:	beq	1208c <error@@Base+0x154>
   12060:	mov	r5, r2
   12064:	bl	1099c <fopen@plt>
   12068:	cmp	r0, #0
   1206c:	popne	{r4, r5, r6, pc}
   12070:	ldrb	r3, [r4]
   12074:	mov	r1, r5
   12078:	cmp	r3, #119	; 0x77
   1207c:	beq	120b8 <error@@Base+0x180>
   12080:	ldr	r0, [pc, #64]	; 120c8 <error@@Base+0x190>
   12084:	add	r0, pc, r0
   12088:	bl	11fe8 <error@@Base+0xb0>
   1208c:	ldrb	r3, [r1]
   12090:	cmp	r3, #114	; 0x72
   12094:	beq	120a8 <error@@Base+0x170>
   12098:	ldr	r3, [pc, #44]	; 120cc <error@@Base+0x194>
   1209c:	ldr	r3, [ip, r3]
   120a0:	ldr	r0, [r3]
   120a4:	pop	{r4, r5, r6, pc}
   120a8:	ldr	r3, [pc, #32]	; 120d0 <error@@Base+0x198>
   120ac:	ldr	r3, [ip, r3]
   120b0:	ldr	r0, [r3]
   120b4:	pop	{r4, r5, r6, pc}
   120b8:	ldr	r0, [pc, #20]	; 120d4 <error@@Base+0x19c>
   120bc:	add	r0, pc, r0
   120c0:	bl	11fe8 <error@@Base+0xb0>
   120c4:	andeq	r5, r1, r4, lsr #31
   120c8:			; <UNDEFINED> instruction: 0x000022b4
   120cc:	strdeq	r0, [r0], -r4
   120d0:	andeq	r0, r0, r4, ror #1
   120d4:	andeq	r2, r0, r4, ror #4
   120d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120dc:	sub	sp, sp, #20
   120e0:	mov	r7, r0
   120e4:	str	r0, [sp, #8]
   120e8:	ldr	r0, [r1]
   120ec:	str	r2, [sp, #12]
   120f0:	mov	r9, r1
   120f4:	mov	r6, r3
   120f8:	bl	11e7c <__assert_fail@plt+0x1360>
   120fc:	ldr	r5, [pc, #496]	; 122f4 <error@@Base+0x3bc>
   12100:	ldr	r3, [pc, #496]	; 122f8 <error@@Base+0x3c0>
   12104:	add	r5, pc, r5
   12108:	ldr	r4, [pc, #492]	; 122fc <error@@Base+0x3c4>
   1210c:	ldr	r3, [r5, r3]
   12110:	add	r4, pc, r4
   12114:	mov	r1, r4
   12118:	str	r0, [r3]
   1211c:	mov	r0, #2
   12120:	bl	10a50 <__sysv_signal@plt>
   12124:	mov	r1, r4
   12128:	mov	r0, #15
   1212c:	bl	10a50 <__sysv_signal@plt>
   12130:	ldr	fp, [r7]
   12134:	cmp	fp, #1
   12138:	beq	12280 <error@@Base+0x348>
   1213c:	mov	r7, #0
   12140:	ble	12294 <error@@Base+0x35c>
   12144:	ldr	r3, [pc, #436]	; 12300 <error@@Base+0x3c8>
   12148:	mov	sl, #1
   1214c:	add	r3, pc, r3
   12150:	str	r3, [sp, #4]
   12154:	mov	r4, sl
   12158:	mov	r3, fp
   1215c:	b	12180 <error@@Base+0x248>
   12160:	add	r2, r7, #1
   12164:	str	r5, [r9, r7, lsl #2]
   12168:	sxth	r7, r2
   1216c:	add	r4, r4, #1
   12170:	sxth	r4, r4
   12174:	cmp	r4, r3
   12178:	mov	sl, r4
   1217c:	bge	12294 <error@@Base+0x35c>
   12180:	ldr	r5, [r9, r4, lsl #2]
   12184:	lsl	fp, r4, #2
   12188:	ldrb	r2, [r5]
   1218c:	cmp	r2, #45	; 0x2d
   12190:	bne	12160 <error@@Base+0x228>
   12194:	ldrb	r8, [r5, #1]
   12198:	cmp	r8, #0
   1219c:	beq	12160 <error@@Base+0x228>
   121a0:	mov	r0, r5
   121a4:	str	r3, [sp]
   121a8:	bl	10a8c <strlen@plt>
   121ac:	mov	r1, r5
   121b0:	mov	r2, r0
   121b4:	ldr	r0, [sp, #4]
   121b8:	bl	10af8 <strncmp@plt>
   121bc:	cmp	r0, #0
   121c0:	beq	122dc <error@@Base+0x3a4>
   121c4:	ldr	r3, [sp]
   121c8:	add	sl, sl, #1
   121cc:	cmp	sl, r3
   121d0:	addlt	fp, r9, fp
   121d4:	movge	ip, #0
   121d8:	ldrlt	ip, [fp, #4]
   121dc:	cmp	r6, #0
   121e0:	beq	12224 <error@@Base+0x2ec>
   121e4:	ldrb	r2, [r6]
   121e8:	cmp	r2, #0
   121ec:	beq	12224 <error@@Base+0x2ec>
   121f0:	cmp	r2, r8
   121f4:	beq	12234 <error@@Base+0x2fc>
   121f8:	mov	r2, #0
   121fc:	b	12208 <error@@Base+0x2d0>
   12200:	cmp	r8, r0
   12204:	beq	12238 <error@@Base+0x300>
   12208:	add	r2, r2, #1
   1220c:	sxth	r2, r2
   12210:	add	r1, r2, r2, lsl #1
   12214:	ldrb	r0, [r6, r1, lsl #2]
   12218:	add	r1, r6, r1, lsl #2
   1221c:	cmp	r0, #0
   12220:	bne	12200 <error@@Base+0x2c8>
   12224:	ldr	r0, [pc, #216]	; 12304 <error@@Base+0x3cc>
   12228:	mov	r1, r5
   1222c:	add	r0, pc, r0
   12230:	bl	11fe8 <error@@Base+0xb0>
   12234:	mov	r1, r6
   12238:	ldr	r2, [r1, #4]
   1223c:	cmp	r2, #0
   12240:	beq	122a4 <error@@Base+0x36c>
   12244:	ldrb	r0, [r5, #2]
   12248:	cmp	r0, #0
   1224c:	cmpeq	ip, #0
   12250:	beq	122a4 <error@@Base+0x36c>
   12254:	ldr	r1, [r2]
   12258:	cmp	r1, #0
   1225c:	bne	122e4 <error@@Base+0x3ac>
   12260:	cmp	r0, #0
   12264:	addne	ip, r5, #2
   12268:	str	ip, [r2]
   1226c:	ldrb	r2, [r5, #2]
   12270:	cmp	r2, #0
   12274:	addeq	r4, r4, #1
   12278:	sxtheq	r4, r4
   1227c:	b	1216c <error@@Base+0x234>
   12280:	ldr	r3, [pc, #128]	; 12308 <error@@Base+0x3d0>
   12284:	ldr	r3, [r5, r3]
   12288:	ldrb	r7, [r3]
   1228c:	cmp	r7, #0
   12290:	bne	122dc <error@@Base+0x3a4>
   12294:	ldr	r3, [sp, #8]
   12298:	str	r7, [r3]
   1229c:	add	sp, sp, #20
   122a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122a4:	ldr	r3, [r1, #8]
   122a8:	cmp	r3, #0
   122ac:	beq	12224 <error@@Base+0x2ec>
   122b0:	ldrb	r2, [r5, #2]
   122b4:	cmp	r2, #0
   122b8:	bne	12224 <error@@Base+0x2ec>
   122bc:	ldrb	r2, [r3]
   122c0:	cmp	r2, #0
   122c4:	bne	122e4 <error@@Base+0x3ac>
   122c8:	mov	r2, #1
   122cc:	strb	r2, [r3]
   122d0:	ldr	r3, [sp, #8]
   122d4:	ldr	r3, [r3]
   122d8:	b	1216c <error@@Base+0x234>
   122dc:	ldr	r0, [sp, #12]
   122e0:	bl	11ed0 <__assert_fail@plt+0x13b4>
   122e4:	ldr	r0, [pc, #32]	; 1230c <error@@Base+0x3d4>
   122e8:	mov	r1, r5
   122ec:	add	r0, pc, r0
   122f0:	bl	11fe8 <error@@Base+0xb0>
   122f4:	strdeq	r5, [r1], -r4
   122f8:	ldrdeq	r0, [r0], -r4
   122fc:			; <UNDEFINED> instruction: 0xfffffe98
   12300:	andeq	r2, r0, r0, lsl #4
   12304:	andeq	r2, r0, r8, lsr #2
   12308:	andeq	r0, r0, r0, lsr #1
   1230c:	andeq	r2, r0, r8, ror r0
   12310:	ldr	ip, [pc, #60]	; 12354 <error@@Base+0x41c>
   12314:	push	{lr}		; (str lr, [sp, #-4]!)
   12318:	add	ip, pc, ip
   1231c:	ldr	r2, [pc, #52]	; 12358 <error@@Base+0x420>
   12320:	ldr	lr, [pc, #52]	; 1235c <error@@Base+0x424>
   12324:	sub	sp, sp, #12
   12328:	mov	r3, r0
   1232c:	ldr	lr, [ip, lr]
   12330:	ldr	r0, [ip, r2]
   12334:	str	r1, [sp]
   12338:	ldr	r1, [pc, #32]	; 12360 <error@@Base+0x428>
   1233c:	ldr	r2, [lr]
   12340:	add	r1, pc, r1
   12344:	ldr	r0, [r0]
   12348:	bl	10a98 <fprintf@plt>
   1234c:	add	sp, sp, #12
   12350:	pop	{pc}		; (ldr pc, [sp], #4)
   12354:	andeq	r5, r1, r0, ror #25
   12358:	andeq	r0, r0, r0, asr #1
   1235c:	ldrdeq	r0, [r0], -r4
   12360:	ldrdeq	r1, [r0], -r0
   12364:	andeq	r0, r0, r0
   12368:	push	{r4, r5, r6, lr}
   1236c:	mov	r2, r0
   12370:	ldr	r4, [pc, #60]	; 123b4 <error@@Base+0x47c>
   12374:	mov	r5, r1
   12378:	add	r4, pc, r4
   1237c:	mov	r1, #99	; 0x63
   12380:	mov	r0, r4
   12384:	bl	109c0 <fgets@plt>
   12388:	cmp	r0, #0
   1238c:	popeq	{r4, r5, r6, pc}
   12390:	ldr	r1, [pc, #32]	; 123b8 <error@@Base+0x480>
   12394:	mov	r2, r5
   12398:	mov	r0, r4
   1239c:	add	r1, pc, r1
   123a0:	bl	10aa4 <__isoc99_sscanf@plt>
   123a4:	sub	r0, r0, #1
   123a8:	clz	r0, r0
   123ac:	lsr	r0, r0, #5
   123b0:	pop	{r4, r5, r6, pc}
   123b4:	andeq	r7, r1, r8, ror #26
   123b8:	andeq	r1, r0, r0, ror #31
   123bc:	push	{r4, r5, r6, lr}
   123c0:	mov	r6, r2
   123c4:	ldr	r4, [pc, #68]	; 12410 <error@@Base+0x4d8>
   123c8:	mov	r2, r0
   123cc:	add	r4, pc, r4
   123d0:	mov	r5, r1
   123d4:	mov	r0, r4
   123d8:	mov	r1, #99	; 0x63
   123dc:	bl	109c0 <fgets@plt>
   123e0:	cmp	r0, #0
   123e4:	popeq	{r4, r5, r6, pc}
   123e8:	ldr	r1, [pc, #36]	; 12414 <error@@Base+0x4dc>
   123ec:	mov	r3, r6
   123f0:	mov	r2, r5
   123f4:	mov	r0, r4
   123f8:	add	r1, pc, r1
   123fc:	bl	10aa4 <__isoc99_sscanf@plt>
   12400:	sub	r0, r0, #2
   12404:	clz	r0, r0
   12408:	lsr	r0, r0, #5
   1240c:	pop	{r4, r5, r6, pc}
   12410:	andeq	r7, r1, r4, lsl sp
   12414:	andeq	r1, r0, r0, lsl #31
   12418:	ldr	r1, [r1, #8]
   1241c:	ldr	r0, [r0, #8]
   12420:	b	11d48 <__assert_fail@plt+0x122c>
   12424:	ldr	r2, [r1]
   12428:	mov	r3, r0
   1242c:	cmp	r2, #0
   12430:	beq	12468 <error@@Base+0x530>
   12434:	ldr	r3, [r1, #4]
   12438:	vmov	s15, r2
   1243c:	sub	r3, r2, r3
   12440:	vldr	d5, [pc, #56]	; 12480 <error@@Base+0x548>
   12444:	vmov	s14, r3
   12448:	vcvt.f64.s32	d6, s15
   1244c:	ldr	r1, [pc, #52]	; 12488 <error@@Base+0x550>
   12450:	vcvt.f64.s32	d7, s14
   12454:	add	r1, pc, r1
   12458:	vmul.f64	d7, d7, d5
   1245c:	vdiv.f64	d5, d7, d6
   12460:	vmov	r2, r3, d5
   12464:	b	10a98 <fprintf@plt>
   12468:	ldr	r0, [pc, #28]	; 1248c <error@@Base+0x554>
   1246c:	mov	r2, #8
   12470:	mov	r1, #1
   12474:	add	r0, pc, r0
   12478:	b	10a14 <fwrite@plt>
   1247c:	nop			; (mov r0, r0)
   12480:	andeq	r0, r0, r0
   12484:	subsmi	r0, r9, r0
   12488:	andeq	r1, r0, r8, lsr pc
   1248c:	andeq	r1, r0, ip, lsl #30
   12490:	push	{r4, r5, r6, lr}
   12494:	subs	r4, r1, #0
   12498:	mov	r5, r0
   1249c:	beq	124d8 <error@@Base+0x5a0>
   124a0:	ldr	r1, [pc, #76]	; 124f4 <error@@Base+0x5bc>
   124a4:	ldm	r4, {r2, r3}
   124a8:	add	r1, pc, r1
   124ac:	bl	10a98 <fprintf@plt>
   124b0:	mov	r1, r4
   124b4:	mov	r0, r5
   124b8:	bl	12424 <error@@Base+0x4ec>
   124bc:	ldr	r0, [pc, #52]	; 124f8 <error@@Base+0x5c0>
   124c0:	mov	r3, r5
   124c4:	mov	r2, #3
   124c8:	mov	r1, #1
   124cc:	add	r0, pc, r0
   124d0:	pop	{r4, r5, r6, lr}
   124d4:	b	10a14 <fwrite@plt>
   124d8:	mov	r3, r0
   124dc:	ldr	r0, [pc, #24]	; 124fc <error@@Base+0x5c4>
   124e0:	mov	r2, #26
   124e4:	mov	r1, #1
   124e8:	add	r0, pc, r0
   124ec:	bl	10a14 <fwrite@plt>
   124f0:	b	124bc <error@@Base+0x584>
   124f4:	andeq	r1, r0, ip, ror #29
   124f8:	strdeq	r1, [r0], -r0
   124fc:			; <UNDEFINED> instruction: 0x00001eb8
   12500:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12504:	mov	r5, r1
   12508:	ldr	r1, [pc, #284]	; 1262c <error@@Base+0x6f4>
   1250c:	ldrb	r9, [sp, #32]
   12510:	mov	r6, r0
   12514:	add	r1, pc, r1
   12518:	mov	r7, r2
   1251c:	mov	r2, r3
   12520:	ldrb	sl, [sp, #36]	; 0x24
   12524:	bl	10a98 <fprintf@plt>
   12528:	mov	r0, r6
   1252c:	mov	r1, #0
   12530:	bl	12490 <error@@Base+0x558>
   12534:	cmp	r9, #0
   12538:	beq	12608 <error@@Base+0x6d0>
   1253c:	ldr	r2, [pc, #236]	; 12630 <error@@Base+0x6f8>
   12540:	ldr	r1, [pc, #236]	; 12634 <error@@Base+0x6fc>
   12544:	add	r2, pc, r2
   12548:	add	r1, pc, r1
   1254c:	mov	r0, r6
   12550:	bl	10a98 <fprintf@plt>
   12554:	cmp	r7, #0
   12558:	ble	125a8 <error@@Base+0x670>
   1255c:	ldr	r8, [pc, #212]	; 12638 <error@@Base+0x700>
   12560:	mov	r4, #1
   12564:	add	r8, pc, r8
   12568:	ldr	r3, [r5, r4, lsl #3]
   1256c:	mov	r0, r6
   12570:	cmp	r3, #0
   12574:	add	r1, r5, r4, lsl #3
   12578:	ble	12590 <error@@Base+0x658>
   1257c:	bl	12490 <error@@Base+0x558>
   12580:	mov	r2, r4
   12584:	mov	r1, r8
   12588:	mov	r0, r6
   1258c:	bl	10a98 <fprintf@plt>
   12590:	add	r4, r4, #1
   12594:	sxth	r4, r4
   12598:	cmp	r7, r4
   1259c:	bge	12568 <error@@Base+0x630>
   125a0:	cmp	r9, #0
   125a4:	beq	125d8 <error@@Base+0x6a0>
   125a8:	add	r1, r7, #1
   125ac:	ldr	r3, [r5, r1, lsl #3]
   125b0:	add	r1, r5, r1, lsl #3
   125b4:	cmp	r3, #0
   125b8:	ble	125d8 <error@@Base+0x6a0>
   125bc:	mov	r0, r6
   125c0:	bl	12490 <error@@Base+0x558>
   125c4:	ldr	r1, [pc, #112]	; 1263c <error@@Base+0x704>
   125c8:	mov	r2, r7
   125cc:	add	r1, pc, r1
   125d0:	mov	r0, r6
   125d4:	bl	10a98 <fprintf@plt>
   125d8:	cmp	sl, #0
   125dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   125e0:	mov	r1, r5
   125e4:	mov	r0, r6
   125e8:	bl	12490 <error@@Base+0x558>
   125ec:	ldr	r0, [pc, #76]	; 12640 <error@@Base+0x708>
   125f0:	mov	r3, r6
   125f4:	mov	r2, #7
   125f8:	mov	r1, #1
   125fc:	add	r0, pc, r0
   12600:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12604:	b	10a14 <fwrite@plt>
   12608:	ldr	r2, [pc, #52]	; 12644 <error@@Base+0x70c>
   1260c:	ldr	r1, [pc, #52]	; 12648 <error@@Base+0x710>
   12610:	add	r2, pc, r2
   12614:	add	r1, pc, r1
   12618:	mov	r0, r6
   1261c:	bl	10a98 <fprintf@plt>
   12620:	cmp	r7, #0
   12624:	bgt	1255c <error@@Base+0x624>
   12628:	b	125d8 <error@@Base+0x6a0>
   1262c:	andeq	r1, r0, ip, lsr #29
   12630:	andeq	r1, r0, r4, lsr #29
   12634:	muleq	r0, r8, sp
   12638:	andeq	r1, r0, r4, ror #28
   1263c:	andeq	r1, r0, r8, lsl #28
   12640:	andeq	r1, r0, r4, ror #27
   12644:	andeq	r1, r0, r0, ror #27
   12648:	andeq	r1, r0, ip, asr #25
   1264c:	push	{r4, r5, r6, r7, r8, lr}
   12650:	mov	r6, r0
   12654:	mov	r0, r1
   12658:	add	r5, r1, #4096	; 0x1000
   1265c:	mov	r4, r2
   12660:	bl	11b98 <__assert_fail@plt+0x107c>
   12664:	ldr	r2, [pc, #144]	; 126fc <error@@Base+0x7c4>
   12668:	ldr	r1, [r5, #3952]	; 0xf70
   1266c:	ldr	r0, [r5, #3956]	; 0xf74
   12670:	add	r2, pc, r2
   12674:	bl	13ec8 <error@@Base+0x1f90>
   12678:	ldr	r1, [pc, #128]	; 12700 <error@@Base+0x7c8>
   1267c:	mov	r2, r4
   12680:	add	r1, pc, r1
   12684:	mov	r0, r6
   12688:	bl	10a98 <fprintf@plt>
   1268c:	mov	r0, r6
   12690:	mov	r1, #0
   12694:	bl	12490 <error@@Base+0x558>
   12698:	mov	r1, r6
   1269c:	mov	r0, #10
   126a0:	bl	10ac8 <fputc@plt>
   126a4:	ldr	r3, [r5, #3956]	; 0xf74
   126a8:	cmp	r3, #0
   126ac:	pople	{r4, r5, r6, r7, r8, pc}
   126b0:	ldr	r7, [pc, #76]	; 12704 <error@@Base+0x7cc>
   126b4:	mov	r4, #0
   126b8:	add	r7, pc, r7
   126bc:	ldr	r3, [r5, #3952]	; 0xf70
   126c0:	mov	r0, r6
   126c4:	ldr	r1, [r3, r4, lsl #2]
   126c8:	add	r1, r1, #12
   126cc:	bl	12490 <error@@Base+0x558>
   126d0:	ldr	r3, [r5, #3952]	; 0xf70
   126d4:	mov	r1, r7
   126d8:	mov	r0, r6
   126dc:	ldr	r3, [r3, r4, lsl #2]
   126e0:	add	r4, r4, #1
   126e4:	ldr	r2, [r3, #8]
   126e8:	bl	10a98 <fprintf@plt>
   126ec:	ldr	r3, [r5, #3956]	; 0xf74
   126f0:	cmp	r3, r4
   126f4:	bgt	126bc <error@@Base+0x784>
   126f8:	pop	{r4, r5, r6, r7, r8, pc}
   126fc:			; <UNDEFINED> instruction: 0xfffffda0
   12700:	andeq	r1, r0, r0, asr #26
   12704:	andeq	r1, r0, r8, lsr #24
   12708:	ldr	ip, [r0]
   1270c:	ldr	r3, [r0, #4]
   12710:	add	r1, ip, r1
   12714:	add	r2, r3, r2
   12718:	stm	r0, {r1, r2}
   1271c:	bx	lr
   12720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12724:	mov	r2, r0
   12728:	ldr	r4, [pc, #236]	; 1281c <error@@Base+0x8e4>
   1272c:	sub	sp, sp, #20
   12730:	add	r4, pc, r4
   12734:	mov	r6, r0
   12738:	mov	sl, r1
   1273c:	mov	r0, r4
   12740:	mov	r1, #99	; 0x63
   12744:	bl	109c0 <fgets@plt>
   12748:	cmp	r0, #0
   1274c:	beq	12808 <error@@Base+0x8d0>
   12750:	mov	r0, r4
   12754:	mov	r2, r6
   12758:	mov	r1, #99	; 0x63
   1275c:	bl	109c0 <fgets@plt>
   12760:	cmp	r0, #0
   12764:	beq	12808 <error@@Base+0x8d0>
   12768:	ldr	r4, [pc, #176]	; 12820 <error@@Base+0x8e8>
   1276c:	ldr	fp, [pc, #176]	; 12824 <error@@Base+0x8ec>
   12770:	mov	r3, #0
   12774:	add	r4, pc, r4
   12778:	str	r3, [sp, #4]
   1277c:	add	r4, r4, #29
   12780:	mov	r5, r3
   12784:	add	r9, sp, #12
   12788:	add	r8, sp, #8
   1278c:	mov	r7, #10
   12790:	add	fp, pc, fp
   12794:	b	127ac <error@@Base+0x874>
   12798:	ldr	r1, [sp, #8]
   1279c:	lsl	r3, r3, #3
   127a0:	add	r0, sl, r3
   127a4:	ldr	r2, [sp, #12]
   127a8:	bl	12708 <error@@Base+0x7d0>
   127ac:	mov	r2, r9
   127b0:	mov	r1, r8
   127b4:	mov	r0, r6
   127b8:	bl	123bc <error@@Base+0x484>
   127bc:	mov	r2, r7
   127c0:	mov	r1, r5
   127c4:	cmp	r0, #0
   127c8:	mov	r0, r4
   127cc:	beq	12810 <error@@Base+0x8d8>
   127d0:	bl	10990 <strtol@plt>
   127d4:	mov	r1, fp
   127d8:	subs	r3, r0, #0
   127dc:	mov	r0, r4
   127e0:	bne	12798 <error@@Base+0x860>
   127e4:	bl	10984 <strcmp@plt>
   127e8:	mov	r3, r5
   127ec:	cmp	r0, #0
   127f0:	movne	r3, #88	; 0x58
   127f4:	ldreq	r2, [sp, #8]
   127f8:	ldrne	r1, [sp, #8]
   127fc:	streq	r2, [sp, #4]
   12800:	moveq	r1, r2
   12804:	b	127a0 <error@@Base+0x868>
   12808:	mov	r3, #0
   1280c:	str	r3, [sp, #4]
   12810:	ldr	r0, [sp, #4]
   12814:	add	sp, sp, #20
   12818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1281c:			; <UNDEFINED> instruction: 0x000179b0
   12820:	andeq	r7, r1, ip, ror #18
   12824:	andeq	r1, r0, r0, asr ip
   12828:	push	{r4, r5, r6, r7, r8, lr}
   1282c:	mov	r5, r2
   12830:	mov	r6, r3
   12834:	mov	r7, r0
   12838:	mov	r8, r1
   1283c:	bl	11a0c <__assert_fail@plt+0xef0>
   12840:	subs	r4, r0, #0
   12844:	beq	1285c <error@@Base+0x924>
   12848:	mov	r2, r6
   1284c:	mov	r1, r5
   12850:	add	r0, r4, #12
   12854:	pop	{r4, r5, r6, r7, r8, lr}
   12858:	b	12708 <error@@Base+0x7d0>
   1285c:	mov	r1, #20
   12860:	mov	r0, #1
   12864:	bl	11f90 <error@@Base+0x58>
   12868:	mov	r4, r0
   1286c:	mov	r0, r8
   12870:	bl	109d8 <strdup@plt>
   12874:	mov	r1, r4
   12878:	str	r0, [r4, #8]
   1287c:	mov	r0, r7
   12880:	bl	11a90 <__assert_fail@plt+0xf74>
   12884:	b	12848 <error@@Base+0x910>
   12888:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1288c:	mov	r2, r0
   12890:	ldr	r4, [pc, #148]	; 1292c <error@@Base+0x9f4>
   12894:	sub	sp, sp, #8
   12898:	add	r4, pc, r4
   1289c:	mov	r5, r0
   128a0:	mov	r8, r1
   128a4:	mov	r0, r4
   128a8:	mov	r1, #99	; 0x63
   128ac:	bl	109c0 <fgets@plt>
   128b0:	cmp	r0, #0
   128b4:	beq	12924 <error@@Base+0x9ec>
   128b8:	mov	r0, r4
   128bc:	mov	r2, r5
   128c0:	mov	r1, #99	; 0x63
   128c4:	bl	109c0 <fgets@plt>
   128c8:	cmp	r0, #0
   128cc:	beq	12924 <error@@Base+0x9ec>
   128d0:	ldr	r4, [pc, #88]	; 12930 <error@@Base+0x9f8>
   128d4:	add	r7, sp, #4
   128d8:	add	r4, pc, r4
   128dc:	add	sl, r4, #29
   128e0:	mov	r6, sp
   128e4:	mov	r9, #0
   128e8:	b	12908 <error@@Base+0x9d0>
   128ec:	bl	10a8c <strlen@plt>
   128f0:	ldm	sp, {r2, r3}
   128f4:	mov	r1, sl
   128f8:	add	ip, r4, r0
   128fc:	mov	r0, r8
   12900:	strb	r9, [ip, #-1]
   12904:	bl	12828 <error@@Base+0x8f0>
   12908:	mov	r2, r7
   1290c:	mov	r1, r6
   12910:	mov	r0, r5
   12914:	bl	123bc <error@@Base+0x484>
   12918:	cmp	r0, #0
   1291c:	mov	r0, r4
   12920:	bne	128ec <error@@Base+0x9b4>
   12924:	add	sp, sp, #8
   12928:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1292c:	andeq	r7, r1, r8, asr #16
   12930:	andeq	r7, r1, r8, lsl #16
   12934:	push	{r4, r5, r6, r7, lr}
   12938:	mov	r7, r1
   1293c:	ldr	r1, [pc, #392]	; 12acc <error@@Base+0xb94>
   12940:	sub	sp, sp, #12
   12944:	add	r1, pc, r1
   12948:	mov	r6, r0
   1294c:	mov	r0, r7
   12950:	bl	12048 <error@@Base+0x110>
   12954:	ldr	r5, [pc, #372]	; 12ad0 <error@@Base+0xb98>
   12958:	mov	r1, #99	; 0x63
   1295c:	add	r5, pc, r5
   12960:	mov	r2, r0
   12964:	mov	r4, r0
   12968:	mov	r0, r5
   1296c:	bl	109c0 <fgets@plt>
   12970:	cmp	r0, #0
   12974:	beq	12aa8 <error@@Base+0xb70>
   12978:	ldr	r1, [pc, #340]	; 12ad4 <error@@Base+0xb9c>
   1297c:	mov	r2, #45	; 0x2d
   12980:	add	r1, pc, r1
   12984:	mov	r0, r5
   12988:	bl	10af8 <strncmp@plt>
   1298c:	cmp	r0, #0
   12990:	bne	12aa8 <error@@Base+0xb70>
   12994:	mov	r2, r4
   12998:	mov	r1, #99	; 0x63
   1299c:	mov	r0, r5
   129a0:	bl	109c0 <fgets@plt>
   129a4:	cmp	r0, #0
   129a8:	beq	12aa8 <error@@Base+0xb70>
   129ac:	ldr	r1, [pc, #292]	; 12ad8 <error@@Base+0xba0>
   129b0:	mov	r0, r5
   129b4:	add	r1, pc, r1
   129b8:	bl	10984 <strcmp@plt>
   129bc:	cmp	r0, #0
   129c0:	bne	12aa8 <error@@Base+0xb70>
   129c4:	mov	r1, sp
   129c8:	mov	r0, r4
   129cc:	bl	12368 <error@@Base+0x430>
   129d0:	cmp	r0, #0
   129d4:	beq	12aa8 <error@@Base+0xb70>
   129d8:	add	r1, sp, #4
   129dc:	mov	r0, r4
   129e0:	bl	12368 <error@@Base+0x430>
   129e4:	cmp	r0, #0
   129e8:	beq	12aa8 <error@@Base+0xb70>
   129ec:	mov	r2, r4
   129f0:	mov	r1, #99	; 0x63
   129f4:	mov	r0, r5
   129f8:	bl	109c0 <fgets@plt>
   129fc:	cmp	r0, #0
   12a00:	beq	12aa8 <error@@Base+0xb70>
   12a04:	mov	r0, r5
   12a08:	mov	r2, r4
   12a0c:	mov	r1, #99	; 0x63
   12a10:	bl	109c0 <fgets@plt>
   12a14:	cmp	r0, #0
   12a18:	beq	12aa8 <error@@Base+0xb70>
   12a1c:	ldm	sp, {r1, r2}
   12a20:	mov	r0, r6
   12a24:	bl	12708 <error@@Base+0x7d0>
   12a28:	add	r1, r6, #8
   12a2c:	mov	r0, r4
   12a30:	bl	12720 <error@@Base+0x7e8>
   12a34:	add	r1, r6, #416	; 0x1a0
   12a38:	mov	r7, r0
   12a3c:	mov	r0, r4
   12a40:	bl	12720 <error@@Base+0x7e8>
   12a44:	add	r1, r6, #824	; 0x338
   12a48:	mov	r5, r0
   12a4c:	mov	r0, r4
   12a50:	bl	12720 <error@@Base+0x7e8>
   12a54:	ldr	r3, [sp]
   12a58:	cmp	r3, #0
   12a5c:	ble	12a98 <error@@Base+0xb60>
   12a60:	add	r1, r6, #920	; 0x398
   12a64:	mov	r0, r4
   12a68:	bl	12720 <error@@Base+0x7e8>
   12a6c:	cmp	r7, #0
   12a70:	ble	12a80 <error@@Base+0xb48>
   12a74:	add	r1, r6, #992	; 0x3e0
   12a78:	mov	r0, r4
   12a7c:	bl	12888 <error@@Base+0x950>
   12a80:	cmp	r5, #0
   12a84:	ble	12a98 <error@@Base+0xb60>
   12a88:	add	r1, r6, #9024	; 0x2340
   12a8c:	add	r1, r1, #24
   12a90:	mov	r0, r4
   12a94:	bl	12888 <error@@Base+0x950>
   12a98:	mov	r0, r4
   12a9c:	bl	11ddc <__assert_fail@plt+0x12c0>
   12aa0:	add	sp, sp, #12
   12aa4:	pop	{r4, r5, r6, r7, pc}
   12aa8:	cmp	r7, #0
   12aac:	beq	12ac0 <error@@Base+0xb88>
   12ab0:	ldr	r0, [pc, #36]	; 12adc <error@@Base+0xba4>
   12ab4:	mov	r1, r7
   12ab8:	add	r0, pc, r0
   12abc:	bl	11fe8 <error@@Base+0xb0>
   12ac0:	ldr	r7, [pc, #24]	; 12ae0 <error@@Base+0xba8>
   12ac4:	add	r7, pc, r7
   12ac8:	b	12ab0 <error@@Base+0xb78>
   12acc:	andeq	r1, r0, r8, ror #16
   12ad0:	andeq	r7, r1, r4, lsl #15
   12ad4:	andeq	r1, r0, r0, lsl #21
   12ad8:	strdeq	r4, [r0], -ip
   12adc:	andeq	r1, r0, r8, ror r9
   12ae0:	andeq	r1, r0, r4, lsr r9
   12ae4:	mov	r3, r1
   12ae8:	ldr	r1, [pc, #360]	; 12c58 <error@@Base+0xd20>
   12aec:	push	{r4, r5, r6, r7, r8, lr}
   12af0:	add	r1, pc, r1
   12af4:	sub	sp, sp, #8
   12af8:	mov	r4, r0
   12afc:	mov	r0, r3
   12b00:	bl	12048 <error@@Base+0x110>
   12b04:	ldr	r3, [pc, #336]	; 12c5c <error@@Base+0xd24>
   12b08:	ldr	r2, [pc, #336]	; 12c60 <error@@Base+0xd28>
   12b0c:	ldr	r1, [pc, #336]	; 12c64 <error@@Base+0xd2c>
   12b10:	add	r3, pc, r3
   12b14:	add	r2, pc, r2
   12b18:	add	r1, pc, r1
   12b1c:	ldr	r8, [pc, #324]	; 12c68 <error@@Base+0xd30>
   12b20:	mov	r7, #0
   12b24:	add	r8, pc, r8
   12b28:	mov	r5, r0
   12b2c:	bl	10a98 <fprintf@plt>
   12b30:	ldr	r1, [pc, #308]	; 12c6c <error@@Base+0xd34>
   12b34:	ldr	r2, [r4]
   12b38:	add	r1, pc, r1
   12b3c:	mov	r0, r5
   12b40:	bl	10a98 <fprintf@plt>
   12b44:	ldr	r1, [pc, #292]	; 12c70 <error@@Base+0xd38>
   12b48:	ldr	r2, [r4, #4]
   12b4c:	add	r1, pc, r1
   12b50:	mov	r0, r5
   12b54:	bl	10a98 <fprintf@plt>
   12b58:	mov	r1, r4
   12b5c:	mov	r0, r5
   12b60:	bl	12424 <error@@Base+0x4ec>
   12b64:	ldr	r0, [pc, #264]	; 12c74 <error@@Base+0xd3c>
   12b68:	mov	r1, #1
   12b6c:	mov	r6, r1
   12b70:	mov	r3, r5
   12b74:	mov	r2, #12
   12b78:	add	r0, pc, r0
   12b7c:	bl	10a14 <fwrite@plt>
   12b80:	add	r1, r4, #8
   12b84:	mov	r0, r5
   12b88:	mov	r3, r8
   12b8c:	mov	r2, #50	; 0x32
   12b90:	str	r6, [sp, #4]
   12b94:	str	r7, [sp]
   12b98:	bl	12500 <error@@Base+0x5c8>
   12b9c:	ldr	r3, [pc, #212]	; 12c78 <error@@Base+0xd40>
   12ba0:	add	r1, r4, #416	; 0x1a0
   12ba4:	mov	r0, r5
   12ba8:	add	r3, pc, r3
   12bac:	mov	r2, #50	; 0x32
   12bb0:	str	r6, [sp, #4]
   12bb4:	str	r7, [sp]
   12bb8:	bl	12500 <error@@Base+0x5c8>
   12bbc:	ldr	r3, [pc, #184]	; 12c7c <error@@Base+0xd44>
   12bc0:	str	r6, [sp, #4]
   12bc4:	add	r3, pc, r3
   12bc8:	str	r6, [sp]
   12bcc:	add	r1, r4, #824	; 0x338
   12bd0:	mov	r0, r5
   12bd4:	mov	r2, #10
   12bd8:	bl	12500 <error@@Base+0x5c8>
   12bdc:	ldr	r3, [r4]
   12be0:	cmp	r3, r7
   12be4:	ble	12c48 <error@@Base+0xd10>
   12be8:	ldr	r3, [pc, #144]	; 12c80 <error@@Base+0xd48>
   12bec:	str	r7, [sp, #4]
   12bf0:	add	r3, pc, r3
   12bf4:	str	r7, [sp]
   12bf8:	mov	r2, #8
   12bfc:	add	r1, r4, #920	; 0x398
   12c00:	mov	r0, r5
   12c04:	bl	12500 <error@@Base+0x5c8>
   12c08:	ldr	r3, [r4, #8]
   12c0c:	cmp	r3, r7
   12c10:	ble	12c24 <error@@Base+0xcec>
   12c14:	mov	r2, r8
   12c18:	add	r1, r4, #992	; 0x3e0
   12c1c:	mov	r0, r5
   12c20:	bl	1264c <error@@Base+0x714>
   12c24:	ldr	r3, [r4, #416]	; 0x1a0
   12c28:	cmp	r3, #0
   12c2c:	ble	12c48 <error@@Base+0xd10>
   12c30:	ldr	r2, [pc, #76]	; 12c84 <error@@Base+0xd4c>
   12c34:	add	r1, r4, #9024	; 0x2340
   12c38:	add	r1, r1, #24
   12c3c:	add	r2, pc, r2
   12c40:	mov	r0, r5
   12c44:	bl	1264c <error@@Base+0x714>
   12c48:	mov	r0, r5
   12c4c:	add	sp, sp, #8
   12c50:	pop	{r4, r5, r6, r7, r8, lr}
   12c54:	b	11ddc <__assert_fail@plt+0x12c0>
   12c58:	andeq	r1, r0, r4, asr r9
   12c5c:	andeq	r4, r0, r0, lsr #27
   12c60:	andeq	r1, r0, ip, ror #17
   12c64:	andeq	r1, r0, r0, lsr r9
   12c68:	andeq	r1, r0, r4, ror #18
   12c6c:	andeq	r1, r0, r8, lsl r9
   12c70:	andeq	r1, r0, r4, lsl r9
   12c74:	andeq	r1, r0, r0, lsl #18
   12c78:	andeq	r1, r0, ip, ror #17
   12c7c:	andeq	r1, r0, r0, ror #17
   12c80:	andeq	r1, r0, ip, asr #17
   12c84:	andeq	r1, r0, r8, asr r8
   12c88:	cmp	r0, #0
   12c8c:	bxeq	lr
   12c90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12c94:	mov	r8, #0
   12c98:	ldr	r5, [pc, #248]	; 12d98 <error@@Base+0xe60>
   12c9c:	ldr	lr, [pc, #248]	; 12d9c <error@@Base+0xe64>
   12ca0:	ldr	r6, [pc, #248]	; 12da0 <error@@Base+0xe68>
   12ca4:	ldr	r4, [pc, #248]	; 12da4 <error@@Base+0xe6c>
   12ca8:	ldr	r9, [pc, #248]	; 12da8 <error@@Base+0xe70>
   12cac:	ldr	r7, [pc, #248]	; 12dac <error@@Base+0xe74>
   12cb0:	add	r5, pc, r5
   12cb4:	add	lr, pc, lr
   12cb8:	add	r6, pc, r6
   12cbc:	add	r4, pc, r4
   12cc0:	ldr	r0, [r0, #4]
   12cc4:	cmp	r0, #0
   12cc8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12ccc:	ldr	ip, [r0, #12]
   12cd0:	mov	r2, r9
   12cd4:	mov	r1, r8
   12cd8:	mov	sl, r7
   12cdc:	ldr	r3, [pc, #200]	; 12dac <error@@Base+0xe74>
   12ce0:	b	12cec <error@@Base+0xdb4>
   12ce4:	add	r2, r2, r2, lsl #1
   12ce8:	ldr	r2, [lr, r2, lsl #2]
   12cec:	cmp	ip, r2
   12cf0:	add	r3, r1, r3, lsr #1
   12cf4:	subcc	sl, r3, #1
   12cf8:	bcc	12d14 <error@@Base+0xddc>
   12cfc:	add	r2, r3, r3, lsl #1
   12d00:	add	r1, r3, #1
   12d04:	add	r3, r5, r2, lsl #2
   12d08:	ldr	r2, [r3, #4]
   12d0c:	cmp	ip, r2
   12d10:	bls	12d88 <error@@Base+0xe50>
   12d14:	sub	r3, sl, r1
   12d18:	cmp	r1, sl
   12d1c:	add	r2, r1, r3, lsr #1
   12d20:	bls	12ce4 <error@@Base+0xdac>
   12d24:	mov	r2, r9
   12d28:	mov	r1, r8
   12d2c:	mov	sl, r7
   12d30:	mov	r3, r7
   12d34:	b	12d50 <error@@Base+0xe18>
   12d38:	sub	r3, sl, r1
   12d3c:	cmp	r1, sl
   12d40:	add	r2, r1, r3, lsr #1
   12d44:	pophi	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d48:	add	r2, r2, r2, lsl #1
   12d4c:	ldr	r2, [r4, r2, lsl #2]
   12d50:	cmp	ip, r2
   12d54:	add	r3, r1, r3, lsr #1
   12d58:	subcc	sl, r3, #1
   12d5c:	bcc	12d38 <error@@Base+0xe00>
   12d60:	add	r2, r3, r3, lsl #1
   12d64:	add	r1, r3, #1
   12d68:	add	r3, r6, r2, lsl #2
   12d6c:	ldr	r2, [r3, #4]
   12d70:	cmp	ip, r2
   12d74:	bhi	12d38 <error@@Base+0xe00>
   12d78:	ldr	r3, [r3, #8]
   12d7c:	cmp	r3, #6
   12d80:	beq	12cc0 <error@@Base+0xd88>
   12d84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d88:	ldr	r3, [r3, #8]
   12d8c:	cmp	r3, #4
   12d90:	beq	12cc0 <error@@Base+0xd88>
   12d94:	b	12d24 <error@@Base+0xdec>
   12d98:	andeq	r1, r0, r4, lsl r8
   12d9c:	andeq	r1, r0, r0, lsl r8
   12da0:	andeq	r1, r0, ip, lsl #16
   12da4:	andeq	r1, r0, r8, lsl #16
   12da8:	andeq	r2, r0, r6, rrx
   12dac:	andeq	r0, r0, r4, asr #8
   12db0:	ldr	r3, [r1]
   12db4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12db8:	sub	sp, sp, #60	; 0x3c
   12dbc:	cmp	r3, #0
   12dc0:	str	r3, [sp, #16]
   12dc4:	str	r3, [sp, #44]	; 0x2c
   12dc8:	beq	12fec <error@@Base+0x10b4>
   12dcc:	ldr	r3, [pc, #2056]	; 135dc <error@@Base+0x16a4>
   12dd0:	ldr	r7, [pc, #2056]	; 135e0 <error@@Base+0x16a8>
   12dd4:	add	r3, pc, r3
   12dd8:	str	r3, [sp, #24]
   12ddc:	ldr	r8, [pc, #2048]	; 135e4 <error@@Base+0x16ac>
   12de0:	ldr	r3, [pc, #2048]	; 135e8 <error@@Base+0x16b0>
   12de4:	ldr	sl, [pc, #2048]	; 135ec <error@@Base+0x16b4>
   12de8:	ldr	r9, [pc, #2048]	; 135f0 <error@@Base+0x16b8>
   12dec:	add	r3, pc, r3
   12df0:	add	r7, pc, r7
   12df4:	add	r8, pc, r8
   12df8:	add	sl, pc, sl
   12dfc:	str	r3, [sp, #28]
   12e00:	add	r9, pc, r9
   12e04:	add	r3, sp, #40	; 0x28
   12e08:	str	r0, [sp, #36]	; 0x24
   12e0c:	str	r3, [sp, #20]
   12e10:	str	r9, [sp, #32]
   12e14:	add	r4, sp, #24
   12e18:	ldr	fp, [sp, #20]
   12e1c:	ldm	r4, {r4, r5, r6}
   12e20:	mov	r9, #0
   12e24:	mov	r3, #17
   12e28:	str	r3, [sp, #8]
   12e2c:	mov	r0, fp
   12e30:	bl	12c88 <error@@Base+0xd50>
   12e34:	subs	fp, r0, #0
   12e38:	beq	13188 <error@@Base+0x1250>
   12e3c:	ldr	r0, [pc, #1968]	; 135f4 <error@@Base+0x16bc>
   12e40:	ldr	ip, [fp, #12]
   12e44:	ldr	r2, [pc, #1964]	; 135f8 <error@@Base+0x16c0>
   12e48:	mov	r1, r9
   12e4c:	mov	r3, r0
   12e50:	b	12e64 <error@@Base+0xf2c>
   12e54:	sub	r3, r0, r1
   12e58:	add	r2, r1, r3, lsr #1
   12e5c:	add	r2, r2, r2, lsl #1
   12e60:	ldr	r2, [r7, r2, lsl #2]
   12e64:	cmp	ip, r2
   12e68:	add	r3, r1, r3, lsr #1
   12e6c:	subcc	r0, r3, #1
   12e70:	bcc	12e8c <error@@Base+0xf54>
   12e74:	add	r2, r3, r3, lsl #1
   12e78:	add	r2, r4, r2, lsl #2
   12e7c:	ldr	r1, [r2, #4]
   12e80:	cmp	ip, r1
   12e84:	bls	1306c <error@@Base+0x1134>
   12e88:	add	r1, r3, #1
   12e8c:	cmp	r1, r0
   12e90:	bls	12e54 <error@@Base+0xf1c>
   12e94:	mov	r3, #0
   12e98:	str	r9, [sp, #4]
   12e9c:	str	r3, [sp]
   12ea0:	mov	r0, fp
   12ea4:	bl	12c88 <error@@Base+0xd50>
   12ea8:	cmp	r0, #0
   12eac:	beq	13094 <error@@Base+0x115c>
   12eb0:	ldr	ip, [pc, #1852]	; 135f4 <error@@Base+0x16bc>
   12eb4:	ldr	lr, [r0, #12]
   12eb8:	ldr	r2, [pc, #1848]	; 135f8 <error@@Base+0x16c0>
   12ebc:	mov	r1, r9
   12ec0:	mov	r3, ip
   12ec4:	b	12ed8 <error@@Base+0xfa0>
   12ec8:	sub	r3, ip, r1
   12ecc:	add	r2, r1, r3, lsr #1
   12ed0:	add	r2, r2, r2, lsl #1
   12ed4:	ldr	r2, [sl, r2, lsl #2]
   12ed8:	cmp	lr, r2
   12edc:	add	r3, r1, r3, lsr #1
   12ee0:	subcc	ip, r3, #1
   12ee4:	bcc	12f00 <error@@Base+0xfc8>
   12ee8:	add	r2, r3, r3, lsl #1
   12eec:	add	r2, r6, r2, lsl #2
   12ef0:	ldr	r1, [r2, #4]
   12ef4:	cmp	lr, r1
   12ef8:	bls	130a4 <error@@Base+0x116c>
   12efc:	add	r1, r3, #1
   12f00:	cmp	ip, r1
   12f04:	bcs	12ec8 <error@@Base+0xf90>
   12f08:	mov	r1, r9
   12f0c:	str	r1, [sp, #12]
   12f10:	bl	12c88 <error@@Base+0xd50>
   12f14:	ldr	r1, [sp, #12]
   12f18:	cmp	r0, #0
   12f1c:	beq	12ff4 <error@@Base+0x10bc>
   12f20:	ldr	ip, [pc, #1740]	; 135f4 <error@@Base+0x16bc>
   12f24:	ldr	lr, [r0, #12]
   12f28:	ldr	r2, [pc, #1736]	; 135f8 <error@@Base+0x16c0>
   12f2c:	mov	r0, r9
   12f30:	mov	r3, ip
   12f34:	b	12f48 <error@@Base+0x1010>
   12f38:	sub	r3, ip, r0
   12f3c:	add	r2, r0, r3, lsr #1
   12f40:	add	r2, r2, r2, lsl #1
   12f44:	ldr	r2, [r8, r2, lsl #2]
   12f48:	cmp	lr, r2
   12f4c:	add	r3, r0, r3, lsr #1
   12f50:	subcc	ip, r3, #1
   12f54:	bcc	12f70 <error@@Base+0x1038>
   12f58:	add	r2, r3, r3, lsl #1
   12f5c:	add	r2, r5, r2, lsl #2
   12f60:	ldr	r0, [r2, #4]
   12f64:	cmp	lr, r0
   12f68:	bls	1309c <error@@Base+0x1164>
   12f6c:	add	r0, r3, #1
   12f70:	cmp	r0, ip
   12f74:	bls	12f38 <error@@Base+0x1000>
   12f78:	mov	r3, r9
   12f7c:	ldr	r2, [sp, #4]
   12f80:	cmp	r1, #2
   12f84:	movne	r2, #0
   12f88:	andeq	r2, r2, #1
   12f8c:	cmp	r2, #0
   12f90:	movne	r3, #1
   12f94:	strne	r3, [sp, #8]
   12f98:	beq	12ff8 <error@@Base+0x10c0>
   12f9c:	ldr	r3, [fp, #4]
   12fa0:	cmp	r3, #0
   12fa4:	bne	12e2c <error@@Base+0xef4>
   12fa8:	ldr	r3, [sp, #16]
   12fac:	ldr	r0, [r3, #12]
   12fb0:	bl	109b4 <utf8proc_get_property@plt>
   12fb4:	ldrh	r3, [r0]
   12fb8:	sub	r3, r3, #1
   12fbc:	uxth	r3, r3
   12fc0:	cmp	r3, #28
   12fc4:	bhi	12fd8 <error@@Base+0x10a0>
   12fc8:	mov	r0, #1
   12fcc:	ldr	r2, [pc, #1576]	; 135fc <error@@Base+0x16c4>
   12fd0:	ands	r3, r2, r0, lsl r3
   12fd4:	bne	1344c <error@@Base+0x1514>
   12fd8:	ldr	r3, [fp, #4]
   12fdc:	cmp	r3, #0
   12fe0:	str	r3, [sp, #16]
   12fe4:	str	r3, [sp, #44]	; 0x2c
   12fe8:	bne	12e14 <error@@Base+0xedc>
   12fec:	add	sp, sp, #60	; 0x3c
   12ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ff4:	mov	r3, #18
   12ff8:	ldr	ip, [sp]
   12ffc:	ldr	r0, [sp, #4]
   13000:	sub	r2, ip, #2
   13004:	cmp	r2, #1
   13008:	orrls	r0, r0, #1
   1300c:	cmp	r0, #0
   13010:	bne	13228 <error@@Base+0x12f0>
   13014:	sub	r2, r1, #1
   13018:	cmp	r2, #2
   1301c:	bls	13228 <error@@Base+0x12f0>
   13020:	sub	lr, ip, #8
   13024:	cmp	lr, #1
   13028:	bls	13198 <error@@Base+0x1260>
   1302c:	ldr	r2, [sp, #8]
   13030:	sub	r2, r2, #8
   13034:	cmp	r2, #1
   13038:	bls	131cc <error@@Base+0x1294>
   1303c:	ldr	r2, [sp]
   13040:	sub	r0, r1, #10
   13044:	sub	r2, r2, #8
   13048:	clz	r0, r0
   1304c:	clz	r2, r2
   13050:	lsr	r0, r0, #5
   13054:	lsr	r2, r2, #5
   13058:	tst	r2, r0
   1305c:	beq	130c4 <error@@Base+0x118c>
   13060:	mov	r3, #8
   13064:	str	r3, [sp, #8]
   13068:	b	12f9c <error@@Base+0x1064>
   1306c:	ldr	r3, [r2, #8]
   13070:	mov	r0, fp
   13074:	str	r3, [sp]
   13078:	sub	r3, r3, #1
   1307c:	clz	r3, r3
   13080:	lsr	r3, r3, #5
   13084:	str	r3, [sp, #4]
   13088:	bl	12c88 <error@@Base+0xd50>
   1308c:	cmp	r0, #0
   13090:	bne	12eb0 <error@@Base+0xf78>
   13094:	mov	r1, #18
   13098:	b	12f0c <error@@Base+0xfd4>
   1309c:	ldr	r3, [r2, #8]
   130a0:	b	12f7c <error@@Base+0x1044>
   130a4:	ldr	r1, [r2, #8]
   130a8:	str	r1, [sp, #12]
   130ac:	bl	12c88 <error@@Base+0xd50>
   130b0:	ldr	r1, [sp, #12]
   130b4:	cmp	r0, #0
   130b8:	moveq	r3, #18
   130bc:	bne	12f20 <error@@Base+0xfe8>
   130c0:	b	12f7c <error@@Base+0x1044>
   130c4:	cmp	r1, #11
   130c8:	cmpeq	r3, #8
   130cc:	moveq	ip, #1
   130d0:	movne	ip, #0
   130d4:	tst	r2, ip
   130d8:	bne	13060 <error@@Base+0x1128>
   130dc:	ldr	r2, [sp]
   130e0:	ldr	ip, [sp, #8]
   130e4:	cmp	ip, #8
   130e8:	cmpeq	r2, #11
   130ec:	moveq	r2, #1
   130f0:	movne	r2, #0
   130f4:	cmp	r1, #8
   130f8:	movne	r2, #0
   130fc:	andeq	r2, r2, #1
   13100:	cmp	r2, #0
   13104:	bne	13330 <error@@Base+0x13f8>
   13108:	ldr	r2, [sp]
   1310c:	sub	ip, r2, #15
   13110:	sub	r2, r1, #15
   13114:	clz	ip, ip
   13118:	clz	r2, r2
   1311c:	lsr	ip, ip, #5
   13120:	lsr	r2, r2, #5
   13124:	str	r2, [sp, #12]
   13128:	ands	r2, ip, r2
   1312c:	str	r2, [sp, #4]
   13130:	bne	131fc <error@@Base+0x12c4>
   13134:	cmp	lr, #1
   13138:	bls	133d8 <error@@Base+0x14a0>
   1313c:	ldr	r2, [sp]
   13140:	cmp	r2, #15
   13144:	beq	13358 <error@@Base+0x1420>
   13148:	ldr	r2, [sp, #8]
   1314c:	cmp	r2, #15
   13150:	beq	13534 <error@@Base+0x15fc>
   13154:	ldr	r3, [sp]
   13158:	sub	r2, r3, #7
   1315c:	sub	r3, r1, #7
   13160:	clz	r2, r2
   13164:	clz	r3, r3
   13168:	lsr	r2, r2, #5
   1316c:	lsr	r3, r3, #5
   13170:	tst	r3, r2
   13174:	str	r2, [sp, #4]
   13178:	beq	13430 <error@@Base+0x14f8>
   1317c:	mov	r3, #7
   13180:	str	r3, [sp, #8]
   13184:	b	12f9c <error@@Base+0x1064>
   13188:	mov	r3, #18
   1318c:	str	r9, [sp, #4]
   13190:	str	r3, [sp]
   13194:	b	12ea0 <error@@Base+0xf68>
   13198:	sub	r2, r1, #8
   1319c:	cmp	r2, #1
   131a0:	bls	131c0 <error@@Base+0x1288>
   131a4:	sub	r2, r1, #12
   131a8:	cmp	r1, #10
   131ac:	cmpne	r2, #1
   131b0:	bhi	1302c <error@@Base+0x10f4>
   131b4:	sub	r2, r3, #8
   131b8:	cmp	r2, #1
   131bc:	bhi	1302c <error@@Base+0x10f4>
   131c0:	ldr	r3, [sp]
   131c4:	str	r3, [sp, #8]
   131c8:	b	12f9c <error@@Base+0x1064>
   131cc:	ldr	r2, [sp]
   131d0:	cmp	r2, #13
   131d4:	beq	1333c <error@@Base+0x1404>
   131d8:	sub	r2, r2, #10
   131dc:	bics	r2, r2, #2
   131e0:	bne	1303c <error@@Base+0x1104>
   131e4:	sub	r2, r1, #8
   131e8:	cmp	r2, #1
   131ec:	bhi	1303c <error@@Base+0x1104>
   131f0:	ldr	r3, [sp]
   131f4:	str	r3, [sp, #8]
   131f8:	b	12f9c <error@@Base+0x1064>
   131fc:	mov	r3, #15
   13200:	str	r3, [sp, #8]
   13204:	b	12f9c <error@@Base+0x1064>
   13208:	ldr	r2, [sp, #12]
   1320c:	sub	r1, r1, #8
   13210:	cmp	r1, #1
   13214:	orrls	r2, r2, #1
   13218:	cmp	r2, #0
   1321c:	bne	131c0 <error@@Base+0x1288>
   13220:	cmp	r3, #0
   13224:	bne	131c0 <error@@Base+0x1288>
   13228:	cmp	fp, #0
   1322c:	beq	12fec <error@@Base+0x10b4>
   13230:	ldr	r5, [pc, #968]	; 13600 <error@@Base+0x16c8>
   13234:	ldr	lr, [pc, #968]	; 13604 <error@@Base+0x16cc>
   13238:	ldr	r6, [pc, #968]	; 13608 <error@@Base+0x16d0>
   1323c:	ldr	r4, [pc, #968]	; 1360c <error@@Base+0x16d4>
   13240:	add	r5, pc, r5
   13244:	add	lr, pc, lr
   13248:	add	r6, pc, r6
   1324c:	add	r4, pc, r4
   13250:	ldr	r9, [fp, #4]
   13254:	cmp	r9, #0
   13258:	beq	12fa8 <error@@Base+0x1070>
   1325c:	ldr	ip, [pc, #912]	; 135f4 <error@@Base+0x16bc>
   13260:	ldr	r0, [r9, #12]
   13264:	ldr	r2, [pc, #908]	; 135f8 <error@@Base+0x16c0>
   13268:	mov	r1, #0
   1326c:	mov	r3, ip
   13270:	b	13284 <error@@Base+0x134c>
   13274:	sub	r3, ip, r1
   13278:	add	r2, r1, r3, lsr #1
   1327c:	add	r2, r2, r2, lsl #1
   13280:	ldr	r2, [lr, r2, lsl #2]
   13284:	cmp	r0, r2
   13288:	add	r3, r1, r3, lsr #1
   1328c:	subcc	ip, r3, #1
   13290:	bcc	132ac <error@@Base+0x1374>
   13294:	add	r2, r3, r3, lsl #1
   13298:	add	r2, r5, r2, lsl #2
   1329c:	ldr	r1, [r2, #4]
   132a0:	cmp	r0, r1
   132a4:	bls	1330c <error@@Base+0x13d4>
   132a8:	add	r1, r3, #1
   132ac:	cmp	r1, ip
   132b0:	bls	13274 <error@@Base+0x133c>
   132b4:	ldr	r2, [pc, #828]	; 135f8 <error@@Base+0x16c0>
   132b8:	mov	r1, #0
   132bc:	ldr	ip, [pc, #816]	; 135f4 <error@@Base+0x16bc>
   132c0:	ldr	r3, [pc, #812]	; 135f4 <error@@Base+0x16bc>
   132c4:	b	132d8 <error@@Base+0x13a0>
   132c8:	sub	r3, ip, r1
   132cc:	add	r2, r1, r3, lsr #1
   132d0:	add	r2, r2, r2, lsl #1
   132d4:	ldr	r2, [r4, r2, lsl #2]
   132d8:	cmp	r0, r2
   132dc:	add	r3, r1, r3, lsr #1
   132e0:	subcc	ip, r3, #1
   132e4:	bcc	13300 <error@@Base+0x13c8>
   132e8:	add	r2, r3, r3, lsl #1
   132ec:	add	r2, r6, r2, lsl #2
   132f0:	ldr	r1, [r2, #4]
   132f4:	cmp	r0, r1
   132f8:	bls	13320 <error@@Base+0x13e8>
   132fc:	add	r1, r3, #1
   13300:	cmp	r1, ip
   13304:	bls	132c8 <error@@Base+0x1390>
   13308:	b	12fa8 <error@@Base+0x1070>
   1330c:	ldr	r3, [r2, #8]
   13310:	cmp	r3, #4
   13314:	bne	132b4 <error@@Base+0x137c>
   13318:	mov	fp, r9
   1331c:	b	13250 <error@@Base+0x1318>
   13320:	ldr	r3, [r2, #8]
   13324:	cmp	r3, #6
   13328:	beq	13318 <error@@Base+0x13e0>
   1332c:	b	12fa8 <error@@Base+0x1070>
   13330:	mov	r3, #11
   13334:	str	r3, [sp, #8]
   13338:	b	12f9c <error@@Base+0x1064>
   1333c:	sub	r2, r1, #8
   13340:	cmp	r2, #1
   13344:	bls	131c0 <error@@Base+0x1288>
   13348:	sub	r0, r1, #10
   1334c:	clz	r0, r0
   13350:	lsr	r0, r0, #5
   13354:	b	130dc <error@@Base+0x11a4>
   13358:	sub	r2, r1, #8
   1335c:	cmp	r2, #1
   13360:	bls	131fc <error@@Base+0x12c4>
   13364:	ldr	r2, [sp, #8]
   13368:	cmp	r2, #15
   1336c:	beq	13510 <error@@Base+0x15d8>
   13370:	bic	r2, r1, #2
   13374:	cmp	r2, #12
   13378:	orreq	r0, r0, #1
   1337c:	cmp	r0, #0
   13380:	beq	1338c <error@@Base+0x1454>
   13384:	cmp	r3, #15
   13388:	beq	131fc <error@@Base+0x12c4>
   1338c:	ldr	r2, [sp]
   13390:	sub	r3, r1, #7
   13394:	cmp	r2, #7
   13398:	cmpeq	r1, #7
   1339c:	clz	r3, r3
   133a0:	lsr	r3, r3, #5
   133a4:	beq	1317c <error@@Base+0x1244>
   133a8:	cmp	r1, #16
   133ac:	beq	131c0 <error@@Base+0x1288>
   133b0:	ldr	r2, [sp]
   133b4:	cmp	r2, #16
   133b8:	beq	13208 <error@@Base+0x12d0>
   133bc:	ldr	r3, [sp]
   133c0:	cmp	r3, #5
   133c4:	cmpeq	r1, #5
   133c8:	bne	13228 <error@@Base+0x12f0>
   133cc:	mov	r3, #5
   133d0:	str	r3, [sp, #8]
   133d4:	b	12f9c <error@@Base+0x1064>
   133d8:	cmp	r1, #15
   133dc:	beq	131c0 <error@@Base+0x1288>
   133e0:	ldr	r2, [sp, #8]
   133e4:	cmp	r2, #15
   133e8:	beq	13510 <error@@Base+0x15d8>
   133ec:	ldr	r2, [sp]
   133f0:	cmp	r2, #15
   133f4:	beq	13370 <error@@Base+0x1438>
   133f8:	ldr	r3, [sp]
   133fc:	sub	r2, r3, #7
   13400:	sub	r3, r1, #7
   13404:	clz	r2, r2
   13408:	clz	r3, r3
   1340c:	lsr	r2, r2, #5
   13410:	lsr	r3, r3, #5
   13414:	tst	r2, r3
   13418:	str	r2, [sp, #4]
   1341c:	bne	1317c <error@@Base+0x1244>
   13420:	cmp	lr, #1
   13424:	orrls	ip, ip, #1
   13428:	cmp	ip, #0
   1342c:	bne	133a8 <error@@Base+0x1470>
   13430:	ldr	r2, [sp]
   13434:	ldr	r0, [sp, #4]
   13438:	cmp	r2, #16
   1343c:	orreq	r0, r0, #1
   13440:	cmp	r0, #0
   13444:	beq	133bc <error@@Base+0x1484>
   13448:	b	133a8 <error@@Base+0x1470>
   1344c:	ldr	r4, [fp, #4]
   13450:	ldr	r3, [sp, #16]
   13454:	cmp	r4, r3
   13458:	beq	13558 <error@@Base+0x1620>
   1345c:	ldr	r5, [sp, #16]
   13460:	mov	r6, #0
   13464:	ldr	r9, [sp, #20]
   13468:	b	13474 <error@@Base+0x153c>
   1346c:	cmp	r5, #0
   13470:	beq	13590 <error@@Base+0x1658>
   13474:	mov	r1, r9
   13478:	ldr	r0, [r5, #12]
   1347c:	bl	109cc <utf8proc_encode_char@plt>
   13480:	cmp	r0, #0
   13484:	beq	13568 <error@@Base+0x1630>
   13488:	ldr	r5, [r5, #4]
   1348c:	add	r6, r6, r0
   13490:	cmp	r4, r5
   13494:	bne	1346c <error@@Base+0x1534>
   13498:	add	r0, r6, #1
   1349c:	bl	10a38 <malloc@plt>
   134a0:	mov	r6, #0
   134a4:	ldr	r9, [sp, #16]
   134a8:	mov	r4, r0
   134ac:	b	134b8 <error@@Base+0x1580>
   134b0:	cmp	r9, #0
   134b4:	beq	135b8 <error@@Base+0x1680>
   134b8:	add	r1, r4, r6
   134bc:	ldr	r0, [r9, #12]
   134c0:	bl	109cc <utf8proc_encode_char@plt>
   134c4:	ldr	r9, [r9, #4]
   134c8:	cmp	r9, r5
   134cc:	add	r6, r6, r0
   134d0:	bne	134b0 <error@@Base+0x1578>
   134d4:	mov	r3, #0
   134d8:	strb	r3, [r4, r6]
   134dc:	mov	r1, #12
   134e0:	mov	r0, #1
   134e4:	bl	11f90 <error@@Base+0x58>
   134e8:	mov	r5, r0
   134ec:	mov	r0, r4
   134f0:	bl	10abc <utf8proc_NFC@plt>
   134f4:	mov	r1, r5
   134f8:	str	r0, [r5, #8]
   134fc:	ldr	r0, [sp, #36]	; 0x24
   13500:	bl	1166c <__assert_fail@plt+0xb50>
   13504:	mov	r0, r4
   13508:	bl	109a8 <free@plt>
   1350c:	b	12fd8 <error@@Base+0x10a0>
   13510:	ldr	r2, [sp]
   13514:	sub	r2, r2, #10
   13518:	bics	r2, r2, #2
   1351c:	bne	133ec <error@@Base+0x14b4>
   13520:	cmp	r1, #15
   13524:	bne	133ec <error@@Base+0x14b4>
   13528:	ldr	r3, [sp]
   1352c:	str	r3, [sp, #8]
   13530:	b	12f9c <error@@Base+0x1064>
   13534:	ldr	r2, [sp]
   13538:	cmp	r2, #14
   1353c:	bne	13510 <error@@Base+0x15d8>
   13540:	cmp	r1, #15
   13544:	beq	131c0 <error@@Base+0x1288>
   13548:	sub	r3, r1, #7
   1354c:	clz	r3, r3
   13550:	lsr	r3, r3, #5
   13554:	b	13420 <error@@Base+0x14e8>
   13558:	bl	10a38 <malloc@plt>
   1355c:	mov	r6, #0
   13560:	mov	r4, r0
   13564:	b	134d4 <error@@Base+0x159c>
   13568:	ldr	r3, [pc, #160]	; 13610 <error@@Base+0x16d8>
   1356c:	ldr	r1, [pc, #160]	; 13614 <error@@Base+0x16dc>
   13570:	add	r3, pc, r3
   13574:	ldr	r0, [pc, #156]	; 13618 <error@@Base+0x16e0>
   13578:	sub	r3, r3, #3248	; 0xcb0
   1357c:	mov	r2, #253	; 0xfd
   13580:	sub	r3, r3, #4
   13584:	add	r1, pc, r1
   13588:	add	r0, pc, r0
   1358c:	bl	10b1c <__assert_fail@plt>
   13590:	ldr	r3, [pc, #132]	; 1361c <error@@Base+0x16e4>
   13594:	ldr	r1, [pc, #132]	; 13620 <error@@Base+0x16e8>
   13598:	add	r3, pc, r3
   1359c:	ldr	r0, [pc, #128]	; 13624 <error@@Base+0x16ec>
   135a0:	sub	r3, r3, #3248	; 0xcb0
   135a4:	mov	r2, #249	; 0xf9
   135a8:	sub	r3, r3, #4
   135ac:	add	r1, pc, r1
   135b0:	add	r0, pc, r0
   135b4:	bl	10b1c <__assert_fail@plt>
   135b8:	ldr	r3, [pc, #104]	; 13628 <error@@Base+0x16f0>
   135bc:	ldr	r1, [pc, #104]	; 1362c <error@@Base+0x16f4>
   135c0:	ldr	r0, [pc, #104]	; 13630 <error@@Base+0x16f8>
   135c4:	add	r3, pc, r3
   135c8:	ldr	r2, [pc, #100]	; 13634 <error@@Base+0x16fc>
   135cc:	sub	r3, r3, #3232	; 0xca0
   135d0:	add	r1, pc, r1
   135d4:	add	r0, pc, r0
   135d8:	bl	10b1c <__assert_fail@plt>
   135dc:	strdeq	r1, [r0], -r0
   135e0:	ldrdeq	r1, [r0], -r4
   135e4:	ldrdeq	r1, [r0], -r0
   135e8:	ldrdeq	r1, [r0], -r8
   135ec:	andeq	r1, r0, ip, asr #13
   135f0:	andeq	r1, r0, r4, asr #13
   135f4:	andeq	r0, r0, r4, asr #8
   135f8:	andeq	r2, r0, r6, rrx
   135fc:	strdne	r0, [r0], -pc	; <UNPREDICTABLE>
   13600:	andeq	r1, r0, r4, lsl #5
   13604:	andeq	r1, r0, r0, lsl #5
   13608:	andeq	r1, r0, ip, ror r2
   1360c:	andeq	r1, r0, r8, ror r2
   13610:	andeq	r4, r0, r4, asr #30
   13614:	andeq	r4, r0, r4, lsr #5
   13618:			; <UNDEFINED> instruction: 0x000042b8
   1361c:	andeq	r4, r0, ip, lsl pc
   13620:	andeq	r4, r0, ip, ror r2
   13624:	andeq	r4, r0, r0, lsl #5
   13628:	strdeq	r4, [r0], -r0
   1362c:	andeq	r4, r0, r8, asr r2
   13630:	andeq	r4, r0, ip, asr r2
   13634:	andeq	r0, r0, sp, lsl #2
   13638:	push	{r4, lr}
   1363c:	mov	r4, r0
   13640:	ldr	r0, [r0, #8]
   13644:	bl	109a8 <free@plt>
   13648:	mov	r0, r4
   1364c:	pop	{r4, lr}
   13650:	b	109a8 <free@plt>
   13654:	push	{r4, r5, r6, lr}
   13658:	mov	r4, r0
   1365c:	uxtb	r6, r1
   13660:	mov	r0, #1
   13664:	mov	r1, #16
   13668:	mov	r5, r2
   1366c:	bl	11f90 <error@@Base+0x58>
   13670:	strb	r6, [r0, #8]
   13674:	str	r5, [r0, #12]
   13678:	mov	r1, r0
   1367c:	mov	r0, r4
   13680:	pop	{r4, r5, r6, lr}
   13684:	b	1166c <__assert_fail@plt+0xb50>
   13688:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1368c:	sub	sp, sp, #132	; 0x84
   13690:	ldrb	r3, [r2]
   13694:	ldr	r6, [pc, #936]	; 13a44 <error@@Base+0x1b0c>
   13698:	str	r2, [sp, #16]
   1369c:	adds	r3, r3, #0
   136a0:	movne	r3, #1
   136a4:	cmp	r1, #0
   136a8:	movne	r3, #0
   136ac:	cmp	r3, #0
   136b0:	str	r0, [sp, #4]
   136b4:	add	r6, pc, r6
   136b8:	bne	13a30 <error@@Base+0x1af8>
   136bc:	ldr	r3, [sp, #4]
   136c0:	mov	r0, r1
   136c4:	ldr	r1, [pc, #892]	; 13a48 <error@@Base+0x1b10>
   136c8:	ldr	r3, [r3, #4]
   136cc:	add	r1, pc, r1
   136d0:	str	r3, [sp, #20]
   136d4:	bl	12048 <error@@Base+0x110>
   136d8:	ldr	r3, [sp, #16]
   136dc:	ldrb	r3, [r3]
   136e0:	cmp	r3, #0
   136e4:	mov	r7, r0
   136e8:	bne	13970 <error@@Base+0x1a38>
   136ec:	ldr	r2, [sp, #16]
   136f0:	mov	r0, r7
   136f4:	ldr	r3, [r2, #4]
   136f8:	ldrb	fp, [r2, #1]
   136fc:	mov	r4, r3
   13700:	bl	10b10 <getc@plt>
   13704:	cmp	r4, #0
   13708:	mov	r2, r4
   1370c:	moveq	r2, #94	; 0x5e
   13710:	str	r2, [sp, #12]
   13714:	cmn	r0, #1
   13718:	beq	137e0 <error@@Base+0x18a8>
   1371c:	ldr	r3, [pc, #808]	; 13a4c <error@@Base+0x1b14>
   13720:	ldr	r3, [r6, r3]
   13724:	str	r3, [sp]
   13728:	ldrsb	r4, [r3, r0]
   1372c:	cmp	r4, #0
   13730:	ble	13a18 <error@@Base+0x1ae0>
   13734:	add	r3, sp, #25
   13738:	mov	r6, #0
   1373c:	str	r3, [sp, #8]
   13740:	add	sl, sp, #28
   13744:	add	r9, sp, #24
   13748:	mov	r8, #4
   1374c:	b	13760 <error@@Base+0x1828>
   13750:	ldr	r3, [sp]
   13754:	ldrsb	r4, [r3, r0]
   13758:	cmp	r4, #0
   1375c:	ble	13a18 <error@@Base+0x1ae0>
   13760:	cmp	r4, #1
   13764:	strb	r0, [sp, #24]
   13768:	beq	1378c <error@@Base+0x1854>
   1376c:	sub	r5, r4, #1
   13770:	mov	r2, r5
   13774:	mov	r3, r7
   13778:	mov	r1, #1
   1377c:	ldr	r0, [sp, #8]
   13780:	bl	10a20 <fread@plt>
   13784:	cmp	r5, r0
   13788:	bne	13a24 <error@@Base+0x1aec>
   1378c:	mov	r2, sl
   13790:	mov	r1, r8
   13794:	mov	r0, r9
   13798:	bl	10a2c <utf8proc_iterate@plt>
   1379c:	cmp	r0, r4
   137a0:	bne	13a10 <error@@Base+0x1ad8>
   137a4:	cmp	fp, #0
   137a8:	ldr	r2, [sp, #28]
   137ac:	beq	137c0 <error@@Base+0x1888>
   137b0:	ldr	r3, [sp, #12]
   137b4:	cmp	r2, r3
   137b8:	moveq	r6, #1
   137bc:	beq	137d0 <error@@Base+0x1898>
   137c0:	mov	r1, r6
   137c4:	ldr	r0, [sp, #4]
   137c8:	bl	13654 <error@@Base+0x171c>
   137cc:	mov	r6, #0
   137d0:	mov	r0, r7
   137d4:	bl	10b10 <getc@plt>
   137d8:	cmn	r0, #1
   137dc:	bne	13750 <error@@Base+0x1818>
   137e0:	mov	r0, r7
   137e4:	bl	11ddc <__assert_fail@plt+0x12c0>
   137e8:	ldr	r3, [sp, #16]
   137ec:	ldrb	r3, [r3, #9]
   137f0:	cmp	r3, #0
   137f4:	beq	13928 <error@@Base+0x19f0>
   137f8:	ldr	r3, [sp, #20]
   137fc:	cmp	r3, #0
   13800:	ldreq	r3, [sp, #4]
   13804:	ldrne	r6, [r3, #4]
   13808:	ldreq	r6, [r3]
   1380c:	cmp	r6, #0
   13810:	beq	13928 <error@@Base+0x19f0>
   13814:	mov	r5, r6
   13818:	mov	r7, #32
   1381c:	b	13844 <error@@Base+0x190c>
   13820:	cmp	r4, #11
   13824:	bcs	13870 <error@@Base+0x1938>
   13828:	cmp	r4, #9
   1382c:	beq	13870 <error@@Base+0x1938>
   13830:	cmp	r4, #10
   13834:	bne	13860 <error@@Base+0x1928>
   13838:	ldr	r5, [r5, #4]
   1383c:	cmp	r5, #0
   13840:	beq	13880 <error@@Base+0x1948>
   13844:	ldr	r4, [r5, #12]
   13848:	mov	r0, r4
   1384c:	bl	109b4 <utf8proc_get_property@plt>
   13850:	cmp	r4, #13
   13854:	bls	13820 <error@@Base+0x18e8>
   13858:	cmp	r4, #160	; 0xa0
   1385c:	beq	13870 <error@@Base+0x1938>
   13860:	ldrsh	r3, [r0]
   13864:	sub	r3, r3, #23
   13868:	cmp	r3, #2
   1386c:	bhi	13838 <error@@Base+0x1900>
   13870:	str	r7, [r5, #12]
   13874:	ldr	r5, [r5, #4]
   13878:	cmp	r5, #0
   1387c:	bne	13844 <error@@Base+0x190c>
   13880:	ldr	r7, [sp, #4]
   13884:	b	138e4 <error@@Base+0x19ac>
   13888:	cmp	r3, #10
   1388c:	movne	r2, #0
   13890:	andeq	r2, r2, #1
   13894:	cmp	r2, #0
   13898:	beq	13918 <error@@Base+0x19e0>
   1389c:	cmp	r4, #0
   138a0:	moveq	r3, #0
   138a4:	andne	r3, r5, #1
   138a8:	cmp	r3, #0
   138ac:	beq	138c8 <error@@Base+0x1990>
   138b0:	ldr	r3, [r4, #12]
   138b4:	cmp	r3, #32
   138b8:	ldrbeq	r3, [r4, #8]
   138bc:	ldrbeq	r2, [r6, #8]
   138c0:	orreq	r3, r3, r2
   138c4:	strbeq	r3, [r4, #8]
   138c8:	mov	r1, r6
   138cc:	mov	r0, r7
   138d0:	bl	11750 <__assert_fail@plt+0xc34>
   138d4:	mov	r0, r6
   138d8:	bl	109a8 <free@plt>
   138dc:	subs	r6, r4, #0
   138e0:	beq	13928 <error@@Base+0x19f0>
   138e4:	ldr	r3, [r6, #12]
   138e8:	ldr	r4, [r6, #4]
   138ec:	cmp	r3, #32
   138f0:	eor	r2, r5, #1
   138f4:	bne	13888 <error@@Base+0x1950>
   138f8:	cmp	r4, #0
   138fc:	orreq	r2, r2, #1
   13900:	cmp	r2, #0
   13904:	bne	1389c <error@@Base+0x1964>
   13908:	ldr	r2, [r4, #12]
   1390c:	cmp	r2, #10
   13910:	cmpne	r2, #32
   13914:	beq	1389c <error@@Base+0x1964>
   13918:	subs	r5, r3, #10
   1391c:	movne	r5, #1
   13920:	subs	r6, r4, #0
   13924:	bne	138e4 <error@@Base+0x19ac>
   13928:	ldr	r3, [sp, #16]
   1392c:	ldrb	r3, [r3, #10]
   13930:	cmp	r3, #0
   13934:	beq	13968 <error@@Base+0x1a30>
   13938:	ldr	r3, [sp, #20]
   1393c:	cmp	r3, #0
   13940:	ldreq	r3, [sp, #4]
   13944:	ldrne	r4, [r3, #4]
   13948:	ldreq	r4, [r3]
   1394c:	b	13960 <error@@Base+0x1a28>
   13950:	ldr	r0, [r4, #12]
   13954:	bl	109fc <utf8proc_tolower@plt>
   13958:	str	r0, [r4, #12]
   1395c:	ldr	r4, [r4, #4]
   13960:	cmp	r4, #0
   13964:	bne	13950 <error@@Base+0x1a18>
   13968:	add	sp, sp, #132	; 0x84
   1396c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13970:	add	r5, sp, #28
   13974:	mov	r0, r5
   13978:	mov	r2, r7
   1397c:	mov	r1, #99	; 0x63
   13980:	bl	109c0 <fgets@plt>
   13984:	cmp	r0, #0
   13988:	beq	139f8 <error@@Base+0x1ac0>
   1398c:	ldr	r1, [pc, #188]	; 13a50 <error@@Base+0x1b18>
   13990:	mov	r2, #51	; 0x33
   13994:	add	r1, pc, r1
   13998:	mov	r0, r5
   1399c:	bl	10af8 <strncmp@plt>
   139a0:	subs	r4, r0, #0
   139a4:	bne	139f8 <error@@Base+0x1ac0>
   139a8:	ldr	r9, [pc, #164]	; 13a54 <error@@Base+0x1b1c>
   139ac:	mov	r8, #99	; 0x63
   139b0:	add	r9, pc, r9
   139b4:	mov	r2, r7
   139b8:	mov	r1, r8
   139bc:	mov	r0, r5
   139c0:	bl	109c0 <fgets@plt>
   139c4:	cmp	r0, #0
   139c8:	beq	139f0 <error@@Base+0x1ab8>
   139cc:	mov	r1, r9
   139d0:	mov	r0, r5
   139d4:	bl	10984 <strcmp@plt>
   139d8:	cmp	r0, #0
   139dc:	bne	139b4 <error@@Base+0x1a7c>
   139e0:	add	r4, r4, #1
   139e4:	sxth	r4, r4
   139e8:	cmp	r4, #1
   139ec:	ble	139b4 <error@@Base+0x1a7c>
   139f0:	mov	r3, #1
   139f4:	b	13a04 <error@@Base+0x1acc>
   139f8:	mov	r0, r7
   139fc:	bl	109e4 <rewind@plt>
   13a00:	mov	r3, #0
   13a04:	ldr	r2, [sp, #16]
   13a08:	strb	r3, [r2, #11]
   13a0c:	b	136ec <error@@Base+0x17b4>
   13a10:	bl	10ae0 <utf8proc_errmsg@plt>
   13a14:	bl	11f38 <error@@Base>
   13a18:	ldr	r0, [pc, #56]	; 13a58 <error@@Base+0x1b20>
   13a1c:	add	r0, pc, r0
   13a20:	bl	11f38 <error@@Base>
   13a24:	ldr	r0, [pc, #48]	; 13a5c <error@@Base+0x1b24>
   13a28:	add	r0, pc, r0
   13a2c:	bl	11f38 <error@@Base>
   13a30:	ldr	r1, [pc, #40]	; 13a60 <error@@Base+0x1b28>
   13a34:	ldr	r0, [pc, #40]	; 13a64 <error@@Base+0x1b2c>
   13a38:	add	r1, pc, r1
   13a3c:	add	r0, pc, r0
   13a40:	bl	11fe8 <error@@Base+0xb0>
   13a44:	andeq	r4, r1, r4, asr #18
   13a48:	andeq	r0, r0, r0, ror #21
   13a4c:	andeq	r0, r0, r0, ror #1
   13a50:	ldrdeq	r3, [r0], -ip
   13a54:	strdeq	r3, [r0], -r8
   13a58:	andeq	r3, r0, r4, asr #29
   13a5c:	ldrdeq	r3, [r0], -r0
   13a60:	andeq	r3, r0, ip, lsl lr
   13a64:	andeq	r3, r0, r4, lsr #28
   13a68:	push	{r4, lr}
   13a6c:	bl	109cc <utf8proc_encode_char@plt>
   13a70:	cmp	r0, #0
   13a74:	ble	13a80 <error@@Base+0x1b48>
   13a78:	sxtb	r0, r0
   13a7c:	pop	{r4, pc}
   13a80:	ldr	r0, [pc, #4]	; 13a8c <error@@Base+0x1b54>
   13a84:	add	r0, pc, r0
   13a88:	bl	11f38 <error@@Base>
   13a8c:	andeq	r3, r0, ip, lsl #29
   13a90:	push	{r4, r5, r6, r7, r8, lr}
   13a94:	uxtb	r4, r0
   13a98:	cmp	r4, #0
   13a9c:	mov	r6, r1
   13aa0:	mov	r8, r2
   13aa4:	uxtb	r5, r3
   13aa8:	moveq	r7, r4
   13aac:	bne	13b24 <error@@Base+0x1bec>
   13ab0:	cmp	r6, #10
   13ab4:	beq	13b04 <error@@Base+0x1bcc>
   13ab8:	mov	r0, r6
   13abc:	bl	109b4 <utf8proc_get_property@plt>
   13ac0:	cmp	r6, #32
   13ac4:	beq	13b3c <error@@Base+0x1c04>
   13ac8:	ldrh	r3, [r0]
   13acc:	cmp	r3, #29
   13ad0:	bhi	13ae4 <error@@Base+0x1bac>
   13ad4:	mov	r1, #1
   13ad8:	ldr	r2, [pc, #192]	; 13ba0 <error@@Base+0x1c68>
   13adc:	ands	r3, r2, r1, lsl r3
   13ae0:	bne	13b3c <error@@Base+0x1c04>
   13ae4:	cmp	r6, #255	; 0xff
   13ae8:	bls	13b88 <error@@Base+0x1c50>
   13aec:	ldr	r1, [pc, #176]	; 13ba4 <error@@Base+0x1c6c>
   13af0:	mov	r2, r6
   13af4:	add	r0, r8, r4
   13af8:	add	r1, pc, r1
   13afc:	pop	{r4, r5, r6, r7, r8, lr}
   13b00:	b	10ad4 <sprintf@plt>
   13b04:	ldr	r1, [pc, #156]	; 13ba8 <error@@Base+0x1c70>
   13b08:	cmp	r5, #0
   13b0c:	add	r1, pc, r1
   13b10:	add	r0, r8, r4
   13b14:	ldreq	r1, [pc, #144]	; 13bac <error@@Base+0x1c74>
   13b18:	addeq	r1, pc, r1
   13b1c:	pop	{r4, r5, r6, r7, r8, lr}
   13b20:	b	10ad4 <sprintf@plt>
   13b24:	mov	r1, r2
   13b28:	mov	r0, #94	; 0x5e
   13b2c:	bl	13a68 <error@@Base+0x1b30>
   13b30:	mov	r4, r0
   13b34:	sxth	r7, r0
   13b38:	b	13ab0 <error@@Base+0x1b78>
   13b3c:	mov	r0, r6
   13b40:	bl	10a80 <utf8proc_category@plt>
   13b44:	sub	r0, r0, #6
   13b48:	cmp	r0, #2
   13b4c:	bhi	13b68 <error@@Base+0x1c30>
   13b50:	add	r1, r8, r4
   13b54:	ldr	r0, [pc, #84]	; 13bb0 <error@@Base+0x1c78>
   13b58:	bl	13a68 <error@@Base+0x1b30>
   13b5c:	add	r7, r0, r7
   13b60:	sxth	r7, r7
   13b64:	mov	r4, r7
   13b68:	add	r1, r8, r4
   13b6c:	mov	r0, r6
   13b70:	bl	13a68 <error@@Base+0x1b30>
   13b74:	mov	r3, #0
   13b78:	add	r0, r0, r7
   13b7c:	sxth	r0, r0
   13b80:	strb	r3, [r8, r0]
   13b84:	pop	{r4, r5, r6, r7, r8, pc}
   13b88:	ldr	r1, [pc, #36]	; 13bb4 <error@@Base+0x1c7c>
   13b8c:	mov	r2, r6
   13b90:	add	r0, r8, r4
   13b94:	add	r1, pc, r1
   13b98:	pop	{r4, r5, r6, r7, r8, lr}
   13b9c:	b	10ad4 <sprintf@plt>
   13ba0:	ldrshtcs	pc, [pc], #-254	; <UNPREDICTABLE>
   13ba4:	andeq	r3, r0, r0, asr #28
   13ba8:	andeq	r3, r0, ip, lsl lr
   13bac:	andeq	r0, r0, ip, asr r9
   13bb0:	andeq	r2, r0, ip, asr #11
   13bb4:	muleq	r0, ip, sp
   13bb8:	push	{r4, r5, r6, r7, lr}
   13bbc:	mov	r7, r0
   13bc0:	mov	r0, r1
   13bc4:	ldr	r1, [pc, #184]	; 13c84 <error@@Base+0x1d4c>
   13bc8:	sub	sp, sp, #20
   13bcc:	add	r1, pc, r1
   13bd0:	mov	r5, r2
   13bd4:	bl	12048 <error@@Base+0x110>
   13bd8:	cmp	r5, #0
   13bdc:	mov	r6, r0
   13be0:	beq	13c34 <error@@Base+0x1cfc>
   13be4:	mov	r3, r0
   13be8:	ldr	r4, [pc, #152]	; 13c88 <error@@Base+0x1d50>
   13bec:	ldr	r0, [pc, #152]	; 13c8c <error@@Base+0x1d54>
   13bf0:	add	r4, pc, r4
   13bf4:	mov	r2, #55	; 0x37
   13bf8:	mov	r1, #1
   13bfc:	add	r0, pc, r0
   13c00:	bl	10a14 <fwrite@plt>
   13c04:	mov	r3, r6
   13c08:	mov	r2, #55	; 0x37
   13c0c:	mov	r1, #1
   13c10:	mov	r0, r4
   13c14:	bl	10a14 <fwrite@plt>
   13c18:	mov	r0, r6
   13c1c:	blx	r5
   13c20:	mov	r3, r6
   13c24:	mov	r0, r4
   13c28:	mov	r2, #55	; 0x37
   13c2c:	mov	r1, #1
   13c30:	bl	10a14 <fwrite@plt>
   13c34:	ldr	r4, [r7]
   13c38:	cmp	r4, #0
   13c3c:	addne	r5, sp, #4
   13c40:	movne	r7, #0
   13c44:	beq	13c74 <error@@Base+0x1d3c>
   13c48:	ldr	r1, [r4, #12]
   13c4c:	ldrb	r0, [r4, #8]
   13c50:	mov	r3, r7
   13c54:	mov	r2, r5
   13c58:	bl	13a90 <error@@Base+0x1b58>
   13c5c:	mov	r1, r6
   13c60:	mov	r0, r5
   13c64:	bl	10aec <fputs@plt>
   13c68:	ldr	r4, [r4, #4]
   13c6c:	cmp	r4, #0
   13c70:	bne	13c48 <error@@Base+0x1d10>
   13c74:	mov	r0, r6
   13c78:	bl	11ddc <__assert_fail@plt+0x12c0>
   13c7c:	add	sp, sp, #20
   13c80:	pop	{r4, r5, r6, r7, pc}
   13c84:	andeq	r0, r0, r8, ror r8
   13c88:			; <UNDEFINED> instruction: 0x00003cb8
   13c8c:	andeq	r3, r0, r4, ror ip
   13c90:	push	{r4, r5, r6, r7, r8, r9, lr}
   13c94:	mov	r5, #0
   13c98:	ldrb	r3, [r1]
   13c9c:	sub	sp, sp, #12
   13ca0:	cmp	r3, r5
   13ca4:	str	r5, [sp, #4]
   13ca8:	movne	r4, r1
   13cac:	movne	r6, r0
   13cb0:	addne	r8, sp, #4
   13cb4:	mvnne	r7, #0
   13cb8:	bne	13cd4 <error@@Base+0x1d9c>
   13cbc:	b	13d00 <error@@Base+0x1dc8>
   13cc0:	ldr	r2, [sp, #4]
   13cc4:	bl	13654 <error@@Base+0x171c>
   13cc8:	ldrb	r3, [r4, r9]!
   13ccc:	cmp	r3, #0
   13cd0:	beq	13d00 <error@@Base+0x1dc8>
   13cd4:	mov	r1, r7
   13cd8:	mov	r2, r8
   13cdc:	mov	r0, r4
   13ce0:	bl	10a2c <utf8proc_iterate@plt>
   13ce4:	mov	r1, r5
   13ce8:	subs	r9, r0, #0
   13cec:	mov	r0, r6
   13cf0:	bgt	13cc0 <error@@Base+0x1d88>
   13cf4:	mov	r0, #0
   13cf8:	add	sp, sp, #12
   13cfc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13d00:	mov	r0, #1
   13d04:	add	sp, sp, #12
   13d08:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13d0c:	ldr	r2, [pc, #420]	; 13eb8 <error@@Base+0x1f80>
   13d10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d14:	sub	sp, sp, #28
   13d18:	add	r2, pc, r2
   13d1c:	ldr	r9, [pc, #408]	; 13ebc <error@@Base+0x1f84>
   13d20:	ldr	r8, [pc, #408]	; 13ec0 <error@@Base+0x1f88>
   13d24:	str	r2, [sp, #16]
   13d28:	ldr	r2, [pc, #404]	; 13ec4 <error@@Base+0x1f8c>
   13d2c:	add	r9, pc, r9
   13d30:	add	r8, pc, r8
   13d34:	add	r2, pc, r2
   13d38:	lsl	r3, r1, #2
   13d3c:	str	r1, [sp, #12]
   13d40:	str	r2, [sp, #4]
   13d44:	str	r0, [sp, #8]
   13d48:	str	r3, [sp, #20]
   13d4c:	ldr	r3, [sp, #16]
   13d50:	ldr	r2, [sp, #12]
   13d54:	ldr	r1, [r3]
   13d58:	ldr	r3, [sp, #8]
   13d5c:	cmp	r3, r2
   13d60:	ldr	r7, [r1, r3, lsl #2]
   13d64:	bge	13e9c <error@@Base+0x1f64>
   13d68:	ldr	r4, [sp, #8]
   13d6c:	ldr	r5, [sp, #12]
   13d70:	lsl	r6, r5, #2
   13d74:	b	13d7c <error@@Base+0x1e44>
   13d78:	ldr	r1, [r9]
   13d7c:	ldr	r1, [r1, r6]
   13d80:	ldr	r3, [r9, #4]
   13d84:	mov	r0, r7
   13d88:	blx	r3
   13d8c:	cmp	r0, #0
   13d90:	bge	13de8 <error@@Base+0x1eb0>
   13d94:	sub	r5, r5, #1
   13d98:	cmp	r5, r4
   13d9c:	sub	r6, r6, #4
   13da0:	bgt	13d78 <error@@Base+0x1e40>
   13da4:	bne	13de4 <error@@Base+0x1eac>
   13da8:	ldr	r1, [r9]
   13dac:	mov	fp, r5
   13db0:	add	r0, r1, fp, lsl #2
   13db4:	ldr	r3, [sp, #8]
   13db8:	sub	r1, fp, #1
   13dbc:	cmp	r3, r1
   13dc0:	str	r7, [r0]
   13dc4:	blt	13e80 <error@@Base+0x1f48>
   13dc8:	ldr	r2, [sp, #12]
   13dcc:	add	r3, r5, #1
   13dd0:	cmp	r3, r2
   13dd4:	str	r3, [sp, #8]
   13dd8:	blt	13d4c <error@@Base+0x1e14>
   13ddc:	add	sp, sp, #28
   13de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13de4:	lsl	r6, r5, #2
   13de8:	ldr	r3, [sp, #4]
   13dec:	add	sl, r4, #1
   13df0:	cmp	sl, r5
   13df4:	ldr	r1, [r3]
   13df8:	add	r0, r1, r6
   13dfc:	ldr	r2, [r1, r6]
   13e00:	str	r2, [r1, r4, lsl #2]
   13e04:	lsl	r4, r4, #2
   13e08:	bge	13e8c <error@@Base+0x1f54>
   13e0c:	add	fp, r4, #4
   13e10:	b	13e28 <error@@Base+0x1ef0>
   13e14:	add	sl, sl, #1
   13e18:	cmp	sl, r5
   13e1c:	add	fp, fp, #4
   13e20:	beq	13e6c <error@@Base+0x1f34>
   13e24:	ldr	r1, [r8]
   13e28:	ldr	r1, [r1, fp]
   13e2c:	ldr	r3, [r8, #4]
   13e30:	mov	r0, r7
   13e34:	blx	r3
   13e38:	cmp	r0, #0
   13e3c:	bgt	13e14 <error@@Base+0x1edc>
   13e40:	ldr	r1, [r8]
   13e44:	mov	r4, sl
   13e48:	add	r0, r1, r6
   13e4c:	sub	r5, r5, #1
   13e50:	ldr	r2, [r1, fp]
   13e54:	cmp	r5, sl
   13e58:	str	r2, [r0]
   13e5c:	bgt	13d70 <error@@Base+0x1e38>
   13e60:	mov	fp, r5
   13e64:	mov	r5, r4
   13e68:	b	13db0 <error@@Base+0x1e78>
   13e6c:	ldr	r0, [r8]
   13e70:	mov	fp, sl
   13e74:	add	r0, r0, r6
   13e78:	mov	r5, fp
   13e7c:	b	13db4 <error@@Base+0x1e7c>
   13e80:	mov	r0, r3
   13e84:	bl	13d0c <error@@Base+0x1dd4>
   13e88:	b	13dc8 <error@@Base+0x1e90>
   13e8c:	beq	13eb0 <error@@Base+0x1f78>
   13e90:	lsl	fp, sl, #2
   13e94:	mov	r4, sl
   13e98:	b	13e4c <error@@Base+0x1f14>
   13e9c:	ldr	r3, [sp, #20]
   13ea0:	mov	fp, r2
   13ea4:	add	r0, r1, r3
   13ea8:	ldr	r5, [sp, #8]
   13eac:	b	13db4 <error@@Base+0x1e7c>
   13eb0:	mov	fp, sl
   13eb4:	b	13e78 <error@@Base+0x1f40>
   13eb8:	andeq	r6, r1, ip, lsr #8
   13ebc:	andeq	r6, r1, r8, lsl r4
   13ec0:	andeq	r6, r1, r4, lsl r4
   13ec4:	andeq	r6, r1, r0, lsl r4
   13ec8:	cmp	r0, #1
   13ecc:	mov	ip, r1
   13ed0:	bxle	lr
   13ed4:	ldr	r3, [pc, #20]	; 13ef0 <error@@Base+0x1fb8>
   13ed8:	sub	r1, r0, #1
   13edc:	add	r3, pc, r3
   13ee0:	mov	r0, #0
   13ee4:	str	ip, [r3]
   13ee8:	str	r2, [r3, #4]
   13eec:	b	13d0c <error@@Base+0x1dd4>
   13ef0:	andeq	r6, r1, r8, ror #4
   13ef4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13ef8:	mov	r7, r0
   13efc:	ldr	r6, [pc, #72]	; 13f4c <error@@Base+0x2014>
   13f00:	ldr	r5, [pc, #72]	; 13f50 <error@@Base+0x2018>
   13f04:	add	r6, pc, r6
   13f08:	add	r5, pc, r5
   13f0c:	sub	r6, r6, r5
   13f10:	mov	r8, r1
   13f14:	mov	r9, r2
   13f18:	bl	10958 <calloc@plt-0x20>
   13f1c:	asrs	r6, r6, #2
   13f20:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f24:	mov	r4, #0
   13f28:	add	r4, r4, #1
   13f2c:	ldr	r3, [r5], #4
   13f30:	mov	r2, r9
   13f34:	mov	r1, r8
   13f38:	mov	r0, r7
   13f3c:	blx	r3
   13f40:	cmp	r6, r4
   13f44:	bne	13f28 <error@@Base+0x1ff0>
   13f48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f4c:	andeq	r3, r1, ip, lsr lr
   13f50:	andeq	r3, r1, r4, lsr lr
   13f54:	bx	lr

Disassembly of section .fini:

00013f58 <.fini>:
   13f58:	push	{r3, lr}
   13f5c:	pop	{r3, pc}
