
../repos/prog2/9:     file format elf32-littlearm


Disassembly of section .init:

0001099c <.init>:
   1099c:	push	{r3, lr}
   109a0:	bl	10e34 <_start@@Base+0x3c>
   109a4:	pop	{r3, pc}

Disassembly of section .plt:

000109a8 <calloc@plt-0x14>:
   109a8:	push	{lr}		; (str lr, [sp, #-4]!)
   109ac:	ldr	lr, [pc, #4]	; 109b8 <calloc@plt-0x4>
   109b0:	add	lr, pc, lr
   109b4:	ldr	pc, [lr, #8]!
   109b8:	andeq	r1, r1, r8, asr #12

000109bc <calloc@plt>:
   109bc:	add	ip, pc, #0, 12
   109c0:	add	ip, ip, #69632	; 0x11000
   109c4:	ldr	pc, [ip, #1608]!	; 0x648

000109c8 <strcmp@plt>:
   109c8:	add	ip, pc, #0, 12
   109cc:	add	ip, ip, #69632	; 0x11000
   109d0:	ldr	pc, [ip, #1600]!	; 0x640

000109d4 <printf@plt>:
   109d4:	add	ip, pc, #0, 12
   109d8:	add	ip, ip, #69632	; 0x11000
   109dc:	ldr	pc, [ip, #1592]!	; 0x638

000109e0 <__isoc99_fscanf@plt>:
   109e0:	add	ip, pc, #0, 12
   109e4:	add	ip, ip, #69632	; 0x11000
   109e8:	ldr	pc, [ip, #1584]!	; 0x630

000109ec <fopen@plt>:
   109ec:	add	ip, pc, #0, 12
   109f0:	add	ip, ip, #69632	; 0x11000
   109f4:	ldr	pc, [ip, #1576]!	; 0x628

000109f8 <fflush@plt>:
   109f8:	add	ip, pc, #0, 12
   109fc:	add	ip, ip, #69632	; 0x11000
   10a00:	ldr	pc, [ip, #1568]!	; 0x620

00010a04 <free@plt>:
   10a04:	add	ip, pc, #0, 12
   10a08:	add	ip, ip, #69632	; 0x11000
   10a0c:	ldr	pc, [ip, #1560]!	; 0x618

00010a10 <fgets@plt>:
   10a10:	add	ip, pc, #0, 12
   10a14:	add	ip, ip, #69632	; 0x11000
   10a18:	ldr	pc, [ip, #1552]!	; 0x610

00010a1c <strdup@plt>:
   10a1c:	add	ip, pc, #0, 12
   10a20:	add	ip, ip, #69632	; 0x11000
   10a24:	ldr	pc, [ip, #1544]!	; 0x608

00010a28 <puts@plt>:
   10a28:	add	ip, pc, #0, 12
   10a2c:	add	ip, ip, #69632	; 0x11000
   10a30:	ldr	pc, [ip, #1536]!	; 0x600

00010a34 <malloc@plt>:
   10a34:	add	ip, pc, #0, 12
   10a38:	add	ip, ip, #69632	; 0x11000
   10a3c:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a40 <__libc_start_main@plt>:
   10a40:	add	ip, pc, #0, 12
   10a44:	add	ip, ip, #69632	; 0x11000
   10a48:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a4c <__gmon_start__@plt>:
   10a4c:	add	ip, pc, #0, 12
   10a50:	add	ip, ip, #69632	; 0x11000
   10a54:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a58 <feof@plt>:
   10a58:	add	ip, pc, #0, 12
   10a5c:	add	ip, ip, #69632	; 0x11000
   10a60:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a64 <strlen@plt>:
   10a64:	add	ip, pc, #0, 12
   10a68:	add	ip, ip, #69632	; 0x11000
   10a6c:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a70 <putchar@plt>:
   10a70:	add	ip, pc, #0, 12
   10a74:	add	ip, ip, #69632	; 0x11000
   10a78:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a7c <fclose@plt>:
   10a7c:	add	ip, pc, #0, 12
   10a80:	add	ip, ip, #69632	; 0x11000
   10a84:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a88 <abort@plt>:
   10a88:	add	ip, pc, #0, 12
   10a8c:	add	ip, ip, #69632	; 0x11000
   10a90:	ldr	pc, [ip, #1472]!	; 0x5c0

Disassembly of section .text:

00010a94 <main@@Base>:
   10a94:	mov	r0, #42	; 0x2a
   10a98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10a9c:	strd	r6, [sp, #8]
   10aa0:	strd	r8, [sp, #16]
   10aa4:	strd	sl, [sp, #24]
   10aa8:	str	lr, [sp, #32]
   10aac:	sub	sp, sp, #20
   10ab0:	bl	112b4 <vetor_cria@@Base>
   10ab4:	mov	r7, r0
   10ab8:	ldr	r8, [pc, #740]	; 10da4 <main@@Base+0x310>
   10abc:	ldr	r0, [pc, #740]	; 10da8 <main@@Base+0x314>
   10ac0:	ldr	r6, [pc, #740]	; 10dac <main@@Base+0x318>
   10ac4:	add	r8, pc, r8
   10ac8:	add	r0, pc, r0
   10acc:	bl	10a28 <puts@plt>
   10ad0:	mov	r0, r7
   10ad4:	mov	r1, r8
   10ad8:	bl	11010 <fp_carrega@@Base>
   10adc:	ldr	r3, [pc, #716]	; 10db0 <main@@Base+0x31c>
   10ae0:	add	r6, pc, r6
   10ae4:	ldr	r0, [pc, #712]	; 10db4 <main@@Base+0x320>
   10ae8:	ldr	r5, [r6, r3]
   10aec:	add	r0, pc, r0
   10af0:	ldr	r1, [r5]
   10af4:	bl	109d4 <printf@plt>
   10af8:	mov	r0, r7
   10afc:	bl	11508 <vetor_imprime@@Base>
   10b00:	ldr	r9, [r7]
   10b04:	cmp	r9, #42	; 0x2a
   10b08:	beq	10b3c <main@@Base+0xa8>
   10b0c:	ldr	r0, [pc, #676]	; 10db8 <main@@Base+0x324>
   10b10:	mov	r7, #1
   10b14:	add	r0, pc, r0
   10b18:	bl	10a28 <puts@plt>
   10b1c:	mov	r0, r7
   10b20:	add	sp, sp, #20
   10b24:	ldrd	r4, [sp]
   10b28:	ldrd	r6, [sp, #8]
   10b2c:	ldrd	r8, [sp, #16]
   10b30:	ldrd	sl, [sp, #24]
   10b34:	add	sp, sp, #32
   10b38:	pop	{pc}		; (ldr pc, [sp], #4)
   10b3c:	ldr	r4, [pc, #632]	; 10dbc <main@@Base+0x328>
   10b40:	mov	r0, r7
   10b44:	bl	10fbc <fp_remove@@Base>
   10b48:	mov	r1, r0
   10b4c:	add	r4, pc, r4
   10b50:	mov	r0, r4
   10b54:	bl	109c8 <strcmp@plt>
   10b58:	subs	fp, r0, #0
   10b5c:	bne	10d7c <main@@Base+0x2e8>
   10b60:	mov	r0, r7
   10b64:	str	fp, [r5]
   10b68:	bl	10fbc <fp_remove@@Base>
   10b6c:	ldr	r0, [pc, #588]	; 10dc0 <main@@Base+0x32c>
   10b70:	ldr	r1, [r5]
   10b74:	ldr	sl, [pc, #584]	; 10dc4 <main@@Base+0x330>
   10b78:	add	r0, pc, r0
   10b7c:	bl	109d4 <printf@plt>
   10b80:	ldr	r3, [pc, #576]	; 10dc8 <main@@Base+0x334>
   10b84:	mov	r2, #99	; 0x63
   10b88:	mov	r0, r7
   10b8c:	str	fp, [r5]
   10b90:	add	sl, pc, sl
   10b94:	mov	r1, sl
   10b98:	add	r3, pc, r3
   10b9c:	str	r3, [sp, #8]
   10ba0:	bl	10ee8 <fp_insere@@Base>
   10ba4:	ldr	r0, [pc, #544]	; 10dcc <main@@Base+0x338>
   10ba8:	ldr	r1, [r5]
   10bac:	add	r0, pc, r0
   10bb0:	bl	109d4 <printf@plt>
   10bb4:	mov	r0, r7
   10bb8:	bl	10fbc <fp_remove@@Base>
   10bbc:	mov	r2, fp
   10bc0:	mov	r1, sl
   10bc4:	str	fp, [r5]
   10bc8:	mov	r0, r7
   10bcc:	bl	10ee8 <fp_insere@@Base>
   10bd0:	ldr	r0, [pc, #504]	; 10dd0 <main@@Base+0x33c>
   10bd4:	ldr	r1, [r5]
   10bd8:	add	r0, pc, r0
   10bdc:	bl	109d4 <printf@plt>
   10be0:	ldr	r2, [pc, #492]	; 10dd4 <main@@Base+0x340>
   10be4:	mov	r0, r7
   10be8:	add	r2, pc, r2
   10bec:	str	r2, [sp, #12]
   10bf0:	bl	10fbc <fp_remove@@Base>
   10bf4:	mov	r2, r9
   10bf8:	mov	r1, sl
   10bfc:	str	fp, [r5]
   10c00:	mov	r0, r7
   10c04:	bl	10ee8 <fp_insere@@Base>
   10c08:	ldr	r1, [r5]
   10c0c:	ldr	r0, [sp, #8]
   10c10:	bl	109d4 <printf@plt>
   10c14:	ldr	r0, [pc, #444]	; 10dd8 <main@@Base+0x344>
   10c18:	add	r0, pc, r0
   10c1c:	bl	10a28 <puts@plt>
   10c20:	mov	r0, r9
   10c24:	bl	1131c <vetor_criaHeap@@Base>
   10c28:	ldr	r3, [pc, #428]	; 10ddc <main@@Base+0x348>
   10c2c:	mov	r2, r8
   10c30:	mov	r9, r0
   10c34:	ldr	r3, [r6, r3]
   10c38:	mov	r1, r3
   10c3c:	str	r3, [sp, #4]
   10c40:	bl	111d4 <heap_carrega@@Base>
   10c44:	ldr	r1, [r5]
   10c48:	ldr	r0, [sp, #12]
   10c4c:	bl	109d4 <printf@plt>
   10c50:	mov	r0, r9
   10c54:	bl	115b0 <vetor_imprimeHeap@@Base>
   10c58:	ldr	fp, [r9]
   10c5c:	cmp	fp, #42	; 0x2a
   10c60:	bne	10d90 <main@@Base+0x2fc>
   10c64:	mov	r0, r9
   10c68:	ldr	r1, [sp, #4]
   10c6c:	bl	111cc <heap_remove@@Base>
   10c70:	mov	r1, r0
   10c74:	mov	r0, r4
   10c78:	bl	109c8 <strcmp@plt>
   10c7c:	subs	r7, r0, #0
   10c80:	bne	10d7c <main@@Base+0x2e8>
   10c84:	mov	r0, r9
   10c88:	ldr	r1, [sp, #4]
   10c8c:	mov	r4, fp
   10c90:	str	r7, [r5]
   10c94:	bl	111cc <heap_remove@@Base>
   10c98:	ldr	r0, [pc, #320]	; 10de0 <main@@Base+0x34c>
   10c9c:	ldr	r1, [r5]
   10ca0:	add	r0, pc, r0
   10ca4:	bl	109d4 <printf@plt>
   10ca8:	mov	r3, #99	; 0x63
   10cac:	mov	r2, sl
   10cb0:	ldr	r1, [sp, #4]
   10cb4:	mov	r0, r9
   10cb8:	str	r7, [r5]
   10cbc:	bl	110e4 <heap_insere@@Base>
   10cc0:	ldr	r0, [pc, #284]	; 10de4 <main@@Base+0x350>
   10cc4:	ldr	r1, [r5]
   10cc8:	add	r0, pc, r0
   10ccc:	bl	109d4 <printf@plt>
   10cd0:	mov	r0, r9
   10cd4:	ldr	r1, [sp, #4]
   10cd8:	bl	111cc <heap_remove@@Base>
   10cdc:	mov	r3, r7
   10ce0:	mov	r2, sl
   10ce4:	ldr	r1, [sp, #4]
   10ce8:	mov	r0, r9
   10cec:	str	r7, [r5]
   10cf0:	bl	110e4 <heap_insere@@Base>
   10cf4:	ldr	r0, [pc, #236]	; 10de8 <main@@Base+0x354>
   10cf8:	ldr	r1, [r5]
   10cfc:	add	r0, pc, r0
   10d00:	bl	109d4 <printf@plt>
   10d04:	mov	r0, r9
   10d08:	ldr	r1, [sp, #4]
   10d0c:	bl	111cc <heap_remove@@Base>
   10d10:	mov	r2, sl
   10d14:	mov	r3, fp
   10d18:	ldr	r1, [sp, #4]
   10d1c:	mov	r0, r9
   10d20:	str	r7, [r5]
   10d24:	bl	110e4 <heap_insere@@Base>
   10d28:	ldr	r1, [r5]
   10d2c:	ldr	r0, [sp, #8]
   10d30:	bl	109d4 <printf@plt>
   10d34:	mov	r0, fp
   10d38:	bl	1131c <vetor_criaHeap@@Base>
   10d3c:	ldr	r3, [pc, #168]	; 10dec <main@@Base+0x358>
   10d40:	mov	r2, r8
   10d44:	mov	r9, r0
   10d48:	ldr	r6, [r6, r3]
   10d4c:	mov	r1, r6
   10d50:	bl	111d4 <heap_carrega@@Base>
   10d54:	ldr	r1, [r5]
   10d58:	ldr	r0, [sp, #12]
   10d5c:	bl	109d4 <printf@plt>
   10d60:	mov	r1, r6
   10d64:	mov	r0, r9
   10d68:	bl	111cc <heap_remove@@Base>
   10d6c:	bl	10a28 <puts@plt>
   10d70:	subs	r4, r4, #1
   10d74:	bne	10d60 <main@@Base+0x2cc>
   10d78:	b	10b1c <main@@Base+0x88>
   10d7c:	ldr	r0, [pc, #108]	; 10df0 <main@@Base+0x35c>
   10d80:	mov	r7, #1
   10d84:	add	r0, pc, r0
   10d88:	bl	10a28 <puts@plt>
   10d8c:	b	10b1c <main@@Base+0x88>
   10d90:	ldr	r0, [pc, #92]	; 10df4 <main@@Base+0x360>
   10d94:	mov	r7, #1
   10d98:	add	r0, pc, r0
   10d9c:	bl	10a28 <puts@plt>
   10da0:	b	10b1c <main@@Base+0x88>
   10da4:	andeq	r0, r0, r0, ror #24
   10da8:	andeq	r0, r0, r4, lsr #24
   10dac:	andeq	r1, r1, r8, lsl r5
   10db0:	andeq	r0, r0, r8, asr r0
   10db4:	andeq	r0, r0, r4, asr #24
   10db8:	andeq	r0, r0, r4, asr ip
   10dbc:	andeq	r0, r0, r4, asr #24
   10dc0:	andeq	r0, r0, r0, ror ip
   10dc4:	andeq	r0, r0, ip, lsl #25
   10dc8:	andeq	r0, r0, r4, lsr #26
   10dcc:	andeq	r0, r0, r0, lsl #25
   10dd0:	muleq	r0, ip, ip
   10dd4:	andeq	r0, r0, r4, asr sp
   10dd8:	andeq	r0, r0, ip, ror #25
   10ddc:	andeq	r0, r0, r4, asr r0
   10de0:	strdeq	r0, [r0], -ip
   10de4:	andeq	r0, r0, r8, lsl #26
   10de8:	andeq	r0, r0, ip, lsl sp
   10dec:	andeq	r0, r0, r0, rrx
   10df0:	andeq	r0, r0, r0, lsr #20
   10df4:	ldrdeq	r0, [r0], -ip

00010df8 <_start@@Base>:
   10df8:	mov	fp, #0
   10dfc:	mov	lr, #0
   10e00:	pop	{r1}		; (ldr r1, [sp], #4)
   10e04:	mov	r2, sp
   10e08:	push	{r2}		; (str r2, [sp, #-4]!)
   10e0c:	push	{r0}		; (str r0, [sp, #-4]!)
   10e10:	ldr	ip, [pc, #16]	; 10e28 <_start@@Base+0x30>
   10e14:	push	{ip}		; (str ip, [sp, #-4]!)
   10e18:	ldr	r0, [pc, #12]	; 10e2c <_start@@Base+0x34>
   10e1c:	ldr	r3, [pc, #12]	; 10e30 <_start@@Base+0x38>
   10e20:	bl	10a40 <__libc_start_main@plt>
   10e24:	bl	10a88 <abort@plt>
   10e28:			; <UNDEFINED> instruction: 0x000116b8
   10e2c:	muleq	r1, r4, sl
   10e30:	andeq	r1, r1, r8, asr r6
   10e34:	ldr	r3, [pc, #20]	; 10e50 <_start@@Base+0x58>
   10e38:	ldr	r2, [pc, #20]	; 10e54 <_start@@Base+0x5c>
   10e3c:	add	r3, pc, r3
   10e40:	ldr	r2, [r3, r2]
   10e44:	cmp	r2, #0
   10e48:	bxeq	lr
   10e4c:	b	10a4c <__gmon_start__@plt>
   10e50:			; <UNDEFINED> instruction: 0x000111bc
   10e54:	andeq	r0, r0, ip, asr r0
   10e58:	ldr	r0, [pc, #24]	; 10e78 <_start@@Base+0x80>
   10e5c:	ldr	r3, [pc, #24]	; 10e7c <_start@@Base+0x84>
   10e60:	cmp	r3, r0
   10e64:	bxeq	lr
   10e68:	ldr	r3, [pc, #16]	; 10e80 <_start@@Base+0x88>
   10e6c:	cmp	r3, #0
   10e70:	bxeq	lr
   10e74:	bx	r3
   10e78:	andeq	r2, r2, r0, ror r0
   10e7c:	andeq	r2, r2, r0, ror r0
   10e80:	andeq	r0, r0, r0
   10e84:	ldr	r0, [pc, #36]	; 10eb0 <_start@@Base+0xb8>
   10e88:	ldr	r1, [pc, #36]	; 10eb4 <_start@@Base+0xbc>
   10e8c:	sub	r1, r1, r0
   10e90:	asr	r1, r1, #2
   10e94:	add	r1, r1, r1, lsr #31
   10e98:	asrs	r1, r1, #1
   10e9c:	bxeq	lr
   10ea0:	ldr	r3, [pc, #16]	; 10eb8 <_start@@Base+0xc0>
   10ea4:	cmp	r3, #0
   10ea8:	bxeq	lr
   10eac:	bx	r3
   10eb0:	andeq	r2, r2, r0, ror r0
   10eb4:	andeq	r2, r2, r0, ror r0
   10eb8:	andeq	r0, r0, r0
   10ebc:	push	{r4, lr}
   10ec0:	ldr	r4, [pc, #24]	; 10ee0 <_start@@Base+0xe8>
   10ec4:	ldrb	r3, [r4]
   10ec8:	cmp	r3, #0
   10ecc:	popne	{r4, pc}
   10ed0:	bl	10e58 <_start@@Base+0x60>
   10ed4:	mov	r3, #1
   10ed8:	strb	r3, [r4]
   10edc:	pop	{r4, pc}
   10ee0:	andeq	r2, r2, r0, ror r0
   10ee4:	b	10e84 <_start@@Base+0x8c>

00010ee8 <fp_insere@@Base>:
   10ee8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10eec:	subs	r5, r0, #0
   10ef0:	mvneq	r0, #0
   10ef4:	strd	r6, [sp, #8]
   10ef8:	str	r8, [sp, #16]
   10efc:	str	lr, [sp, #20]
   10f00:	beq	10f94 <fp_insere@@Base+0xac>
   10f04:	ldm	r5, {r0, r3}
   10f08:	cmp	r0, r3
   10f0c:	moveq	r0, #0
   10f10:	beq	10f94 <fp_insere@@Base+0xac>
   10f14:	mov	r0, r2
   10f18:	bl	11384 <elemento_cria@@Base>
   10f1c:	ldr	r3, [r5]
   10f20:	mov	r6, r0
   10f24:	cmp	r3, #0
   10f28:	ble	10fb0 <fp_insere@@Base+0xc8>
   10f2c:	mov	r4, #0
   10f30:	b	10f40 <fp_insere@@Base+0x58>
   10f34:	add	r4, r4, #1
   10f38:	cmp	r4, r3
   10f3c:	bge	10fa8 <fp_insere@@Base+0xc0>
   10f40:	ldr	r3, [r5, #8]
   10f44:	mov	r1, r6
   10f48:	lsl	r7, r4, #2
   10f4c:	ldr	r0, [r3, r4, lsl #2]
   10f50:	bl	113cc <maior_que@@Base>
   10f54:	cmp	r0, #0
   10f58:	ldr	r3, [r5]
   10f5c:	bne	10f34 <fp_insere@@Base+0x4c>
   10f60:	ldr	r0, [r5, #8]
   10f64:	cmp	r4, r3
   10f68:	add	r2, r3, #1
   10f6c:	addle	r4, r0, r4, lsl #2
   10f70:	addle	r3, r0, r2, lsl #2
   10f74:	bgt	10f88 <fp_insere@@Base+0xa0>
   10f78:	ldr	r1, [r3, #-4]!
   10f7c:	cmp	r4, r3
   10f80:	str	r1, [r3, #4]
   10f84:	bne	10f78 <fp_insere@@Base+0x90>
   10f88:	str	r6, [r0, r7]
   10f8c:	mov	r0, #1
   10f90:	str	r2, [r5]
   10f94:	ldrd	r4, [sp]
   10f98:	ldrd	r6, [sp, #8]
   10f9c:	ldr	r8, [sp, #16]
   10fa0:	add	sp, sp, #20
   10fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   10fa8:	lsl	r7, r4, #2
   10fac:	b	10f60 <fp_insere@@Base+0x78>
   10fb0:	mov	r7, #0
   10fb4:	mov	r4, r7
   10fb8:	b	10f60 <fp_insere@@Base+0x78>

00010fbc <fp_remove@@Base>:
   10fbc:	push	{lr}		; (str lr, [sp, #-4]!)
   10fc0:	subs	lr, r0, #0
   10fc4:	beq	11008 <fp_remove@@Base+0x4c>
   10fc8:	ldr	ip, [lr]
   10fcc:	cmp	ip, #0
   10fd0:	moveq	r0, ip
   10fd4:	beq	11004 <fp_remove@@Base+0x48>
   10fd8:	ldr	r3, [lr, #8]
   10fdc:	ldr	r0, [r3]
   10fe0:	ble	10ff8 <fp_remove@@Base+0x3c>
   10fe4:	add	r1, r3, ip, lsl #2
   10fe8:	ldr	r2, [r3, #4]
   10fec:	str	r2, [r3], #4
   10ff0:	cmp	r3, r1
   10ff4:	bne	10fe8 <fp_remove@@Base+0x2c>
   10ff8:	sub	ip, ip, #1
   10ffc:	ldr	r0, [r0, #4]
   11000:	str	ip, [lr]
   11004:	pop	{pc}		; (ldr pc, [sp], #4)
   11008:	mov	r0, lr
   1100c:	b	11004 <fp_remove@@Base+0x48>

00011010 <fp_carrega@@Base>:
   11010:	mov	r3, r1
   11014:	ldr	r1, [pc, #188]	; 110d8 <fp_carrega@@Base+0xc8>
   11018:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1101c:	strd	r6, [sp, #8]
   11020:	strd	r8, [sp, #16]
   11024:	mov	r9, r0
   11028:	mov	r0, r3
   1102c:	str	lr, [sp, #24]
   11030:	sub	sp, sp, #268	; 0x10c
   11034:	add	r1, pc, r1
   11038:	bl	109ec <fopen@plt>
   1103c:	subs	r4, r0, #0
   11040:	beq	110c8 <fp_carrega@@Base+0xb8>
   11044:	ldr	r7, [pc, #144]	; 110dc <fp_carrega@@Base+0xcc>
   11048:	add	r8, sp, #4
   1104c:	add	r5, sp, #8
   11050:	add	r7, pc, r7
   11054:	b	11090 <fp_carrega@@Base+0x80>
   11058:	bl	109e0 <__isoc99_fscanf@plt>
   1105c:	mov	r2, r4
   11060:	mov	r1, #256	; 0x100
   11064:	mov	r0, r5
   11068:	bl	10a10 <fgets@plt>
   1106c:	mov	r0, r5
   11070:	bl	10a64 <strlen@plt>
   11074:	add	r3, sp, #264	; 0x108
   11078:	mov	r1, r5
   1107c:	ldr	r2, [sp, #4]
   11080:	add	r3, r3, r0
   11084:	mov	r0, r9
   11088:	strb	r6, [r3, #-257]	; 0xfffffeff
   1108c:	bl	10ee8 <fp_insere@@Base>
   11090:	mov	r0, r4
   11094:	bl	10a58 <feof@plt>
   11098:	subs	r6, r0, #0
   1109c:	mov	r1, r7
   110a0:	mov	r2, r8
   110a4:	mov	r0, r4
   110a8:	beq	11058 <fp_carrega@@Base+0x48>
   110ac:	bl	10a7c <fclose@plt>
   110b0:	add	sp, sp, #268	; 0x10c
   110b4:	ldrd	r4, [sp]
   110b8:	ldrd	r6, [sp, #8]
   110bc:	ldrd	r8, [sp, #16]
   110c0:	add	sp, sp, #24
   110c4:	pop	{pc}		; (ldr pc, [sp], #4)
   110c8:	ldr	r0, [pc, #16]	; 110e0 <fp_carrega@@Base+0xd0>
   110cc:	add	r0, pc, r0
   110d0:	bl	10a28 <puts@plt>
   110d4:	b	110b0 <fp_carrega@@Base+0xa0>
   110d8:	andeq	r0, r0, ip, lsl #13
   110dc:	muleq	r0, r8, r6
   110e0:	strdeq	r0, [r0], -r8

000110e4 <heap_insere@@Base>:
   110e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   110e8:	ldr	ip, [r0, #4]
   110ec:	strd	r6, [sp, #8]
   110f0:	str	lr, [sp, #20]
   110f4:	ldr	lr, [r0]
   110f8:	str	r8, [sp, #16]
   110fc:	cmp	lr, ip
   11100:	moveq	r4, #0
   11104:	beq	1119c <heap_insere@@Base+0xb8>
   11108:	mov	r5, r0
   1110c:	mov	r7, r1
   11110:	mov	r0, r3
   11114:	mov	r1, r2
   11118:	bl	11384 <elemento_cria@@Base>
   1111c:	mov	r6, r0
   11120:	ldr	r0, [r5]
   11124:	cmp	r0, #0
   11128:	movgt	r4, #0
   1112c:	bgt	11144 <heap_insere@@Base+0x60>
   11130:	b	111c0 <heap_insere@@Base+0xdc>
   11134:	ldr	r0, [r5]
   11138:	add	r4, r4, #1
   1113c:	cmp	r4, r0
   11140:	bge	111b4 <heap_insere@@Base+0xd0>
   11144:	ldr	r3, [r5, #8]
   11148:	mov	r1, r6
   1114c:	lsl	r8, r4, #2
   11150:	ldr	r0, [r3, r4, lsl #2]
   11154:	blx	r7
   11158:	cmp	r0, #1
   1115c:	bne	11134 <heap_insere@@Base+0x50>
   11160:	cmp	r4, #0
   11164:	ldr	r0, [r5]
   11168:	ldr	r2, [r5, #8]
   1116c:	add	r8, r2, r8
   11170:	beq	11190 <heap_insere@@Base+0xac>
   11174:	add	r3, r4, #1
   11178:	mov	r1, r4
   1117c:	add	r3, r2, r3, lsl #2
   11180:	ldr	r2, [r3, #-4]!
   11184:	subs	r1, r1, #1
   11188:	str	r2, [r3, #4]
   1118c:	bne	11180 <heap_insere@@Base+0x9c>
   11190:	add	r0, r0, #1
   11194:	str	r6, [r8]
   11198:	str	r0, [r5]
   1119c:	mov	r0, r4
   111a0:	ldrd	r4, [sp]
   111a4:	ldrd	r6, [sp, #8]
   111a8:	ldr	r8, [sp, #16]
   111ac:	add	sp, sp, #20
   111b0:	pop	{pc}		; (ldr pc, [sp], #4)
   111b4:	ldr	r2, [r5, #8]
   111b8:	add	r8, r2, r4, lsl #2
   111bc:	b	11174 <heap_insere@@Base+0x90>
   111c0:	mov	r4, #0
   111c4:	ldr	r8, [r5, #8]
   111c8:	b	11190 <heap_insere@@Base+0xac>

000111cc <heap_remove@@Base>:
   111cc:	mov	r0, #0
   111d0:	bx	lr

000111d4 <heap_carrega@@Base>:
   111d4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   111d8:	strd	r6, [sp, #8]
   111dc:	str	sl, [sp, #24]
   111e0:	mov	sl, r1
   111e4:	ldr	r1, [pc, #188]	; 112a8 <heap_carrega@@Base+0xd4>
   111e8:	strd	r8, [sp, #16]
   111ec:	mov	r9, r0
   111f0:	mov	r0, r2
   111f4:	str	lr, [sp, #28]
   111f8:	sub	sp, sp, #264	; 0x108
   111fc:	add	r1, pc, r1
   11200:	bl	109ec <fopen@plt>
   11204:	subs	r4, r0, #0
   11208:	beq	11298 <heap_carrega@@Base+0xc4>
   1120c:	ldr	r7, [pc, #152]	; 112ac <heap_carrega@@Base+0xd8>
   11210:	add	r8, sp, #4
   11214:	add	r5, sp, #8
   11218:	add	r7, pc, r7
   1121c:	b	1125c <heap_carrega@@Base+0x88>
   11220:	bl	109e0 <__isoc99_fscanf@plt>
   11224:	mov	r2, r4
   11228:	mov	r1, #256	; 0x100
   1122c:	mov	r0, r5
   11230:	bl	10a10 <fgets@plt>
   11234:	mov	r0, r5
   11238:	bl	10a64 <strlen@plt>
   1123c:	add	r3, sp, #264	; 0x108
   11240:	mov	r2, r5
   11244:	add	ip, r3, r0
   11248:	mov	r1, sl
   1124c:	ldr	r3, [sp, #4]
   11250:	mov	r0, r9
   11254:	strb	r6, [ip, #-257]	; 0xfffffeff
   11258:	bl	110e4 <heap_insere@@Base>
   1125c:	mov	r0, r4
   11260:	bl	10a58 <feof@plt>
   11264:	subs	r6, r0, #0
   11268:	mov	r1, r7
   1126c:	mov	r2, r8
   11270:	mov	r0, r4
   11274:	beq	11220 <heap_carrega@@Base+0x4c>
   11278:	bl	10a7c <fclose@plt>
   1127c:	add	sp, sp, #264	; 0x108
   11280:	ldrd	r4, [sp]
   11284:	ldrd	r6, [sp, #8]
   11288:	ldrd	r8, [sp, #16]
   1128c:	ldr	sl, [sp, #24]
   11290:	add	sp, sp, #28
   11294:	pop	{pc}		; (ldr pc, [sp], #4)
   11298:	ldr	r0, [pc, #16]	; 112b0 <heap_carrega@@Base+0xdc>
   1129c:	add	r0, pc, r0
   112a0:	bl	10a28 <puts@plt>
   112a4:	b	1127c <heap_carrega@@Base+0xa8>
   112a8:	andeq	r0, r0, r4, asr #9
   112ac:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   112b0:	andeq	r0, r0, r8, lsr #8

000112b4 <vetor_cria@@Base>:
   112b4:	strd	r4, [sp, #-16]!
   112b8:	mov	r5, r0
   112bc:	mov	r0, #12
   112c0:	str	r6, [sp, #8]
   112c4:	str	lr, [sp, #12]
   112c8:	bl	10a34 <malloc@plt>
   112cc:	subs	r4, r0, #0
   112d0:	beq	112f8 <vetor_cria@@Base+0x44>
   112d4:	mov	r3, #0
   112d8:	mov	r0, r5
   112dc:	mov	r1, #4
   112e0:	stm	r4, {r3, r5}
   112e4:	bl	109bc <calloc@plt>
   112e8:	cmp	r0, #0
   112ec:	mov	r3, r0
   112f0:	str	r0, [r4, #8]
   112f4:	beq	1130c <vetor_cria@@Base+0x58>
   112f8:	mov	r0, r4
   112fc:	ldrd	r4, [sp]
   11300:	ldr	r6, [sp, #8]
   11304:	add	sp, sp, #12
   11308:	pop	{pc}		; (ldr pc, [sp], #4)
   1130c:	mov	r0, r4
   11310:	mov	r4, r3
   11314:	bl	10a04 <free@plt>
   11318:	b	112f8 <vetor_cria@@Base+0x44>

0001131c <vetor_criaHeap@@Base>:
   1131c:	strd	r4, [sp, #-16]!
   11320:	mov	r5, r0
   11324:	mov	r0, #12
   11328:	str	r6, [sp, #8]
   1132c:	str	lr, [sp, #12]
   11330:	bl	10a34 <malloc@plt>
   11334:	subs	r4, r0, #0
   11338:	beq	11360 <vetor_criaHeap@@Base+0x44>
   1133c:	mov	r3, #0
   11340:	add	r0, r5, #1
   11344:	mov	r1, #4
   11348:	stm	r4, {r3, r5}
   1134c:	bl	109bc <calloc@plt>
   11350:	cmp	r0, #0
   11354:	mov	r3, r0
   11358:	str	r0, [r4, #8]
   1135c:	beq	11374 <vetor_criaHeap@@Base+0x58>
   11360:	mov	r0, r4
   11364:	ldrd	r4, [sp]
   11368:	ldr	r6, [sp, #8]
   1136c:	add	sp, sp, #12
   11370:	pop	{pc}		; (ldr pc, [sp], #4)
   11374:	mov	r0, r4
   11378:	mov	r4, r3
   1137c:	bl	10a04 <free@plt>
   11380:	b	11360 <vetor_criaHeap@@Base+0x44>

00011384 <elemento_cria@@Base>:
   11384:	strd	r4, [sp, #-16]!
   11388:	mov	r5, r0
   1138c:	mov	r0, #8
   11390:	str	r6, [sp, #8]
   11394:	mov	r6, r1
   11398:	str	lr, [sp, #12]
   1139c:	bl	10a34 <malloc@plt>
   113a0:	subs	r4, r0, #0
   113a4:	beq	113b8 <elemento_cria@@Base+0x34>
   113a8:	mov	r0, r6
   113ac:	bl	10a1c <strdup@plt>
   113b0:	str	r5, [r4]
   113b4:	str	r0, [r4, #4]
   113b8:	mov	r0, r4
   113bc:	ldrd	r4, [sp]
   113c0:	ldr	r6, [sp, #8]
   113c4:	add	sp, sp, #12
   113c8:	pop	{pc}		; (ldr pc, [sp], #4)

000113cc <maior_que@@Base>:
   113cc:	strd	r4, [sp, #-16]!
   113d0:	cmp	r1, #0
   113d4:	cmpne	r0, #0
   113d8:	ldr	r4, [pc, #124]	; 1145c <maior_que@@Base+0x90>
   113dc:	str	r6, [sp, #8]
   113e0:	str	lr, [sp, #12]
   113e4:	add	r4, pc, r4
   113e8:	beq	1143c <maior_que@@Base+0x70>
   113ec:	ldr	r3, [pc, #108]	; 11460 <maior_que@@Base+0x94>
   113f0:	mov	r6, r0
   113f4:	mov	r5, r1
   113f8:	ldr	r3, [r4, r3]
   113fc:	ldr	r0, [r3]
   11400:	bl	109f8 <fflush@plt>
   11404:	ldr	r3, [pc, #88]	; 11464 <maior_que@@Base+0x98>
   11408:	ldr	r0, [r6]
   1140c:	ldr	r1, [r5]
   11410:	ldr	r2, [r4, r3]
   11414:	ldrd	r4, [sp]
   11418:	cmp	r0, r1
   1141c:	ldr	r6, [sp, #8]
   11420:	add	sp, sp, #12
   11424:	movle	r0, #0
   11428:	movgt	r0, #1
   1142c:	ldr	r3, [r2]
   11430:	add	r3, r3, #1
   11434:	str	r3, [r2]
   11438:	pop	{pc}		; (ldr pc, [sp], #4)
   1143c:	ldr	r0, [pc, #36]	; 11468 <maior_que@@Base+0x9c>
   11440:	add	r0, pc, r0
   11444:	bl	10a28 <puts@plt>
   11448:	ldrd	r4, [sp]
   1144c:	mov	r0, #0
   11450:	ldr	r6, [sp, #8]
   11454:	add	sp, sp, #12
   11458:	pop	{pc}		; (ldr pc, [sp], #4)
   1145c:	andeq	r0, r1, r4, lsl ip
   11460:	andeq	r0, r0, r4, rrx
   11464:	andeq	r0, r0, r8, asr r0
   11468:	andeq	r0, r0, r0, lsr #12

0001146c <maior_que_HeapSort@@Base>:
   1146c:	strd	r4, [sp, #-16]!
   11470:	cmp	r1, #0
   11474:	cmpne	r0, #0
   11478:	ldr	r4, [pc, #120]	; 114f8 <maior_que_HeapSort@@Base+0x8c>
   1147c:	str	r6, [sp, #8]
   11480:	str	lr, [sp, #12]
   11484:	add	r4, pc, r4
   11488:	beq	114d8 <maior_que_HeapSort@@Base+0x6c>
   1148c:	ldr	r3, [pc, #104]	; 114fc <maior_que_HeapSort@@Base+0x90>
   11490:	mov	r5, r0
   11494:	mov	r6, r1
   11498:	ldr	r3, [r4, r3]
   1149c:	ldr	r0, [r3]
   114a0:	bl	109f8 <fflush@plt>
   114a4:	ldr	r3, [pc, #84]	; 11500 <maior_que_HeapSort@@Base+0x94>
   114a8:	ldr	r0, [r5, #4]
   114ac:	ldr	r1, [r6, #4]
   114b0:	ldr	r2, [r4, r3]
   114b4:	ldr	r3, [r2]
   114b8:	add	r3, r3, #1
   114bc:	str	r3, [r2]
   114c0:	bl	109c8 <strcmp@plt>
   114c4:	ldrd	r4, [sp]
   114c8:	lsr	r0, r0, #31
   114cc:	ldr	r6, [sp, #8]
   114d0:	add	sp, sp, #12
   114d4:	pop	{pc}		; (ldr pc, [sp], #4)
   114d8:	ldr	r0, [pc, #36]	; 11504 <maior_que_HeapSort@@Base+0x98>
   114dc:	add	r0, pc, r0
   114e0:	bl	10a28 <puts@plt>
   114e4:	ldrd	r4, [sp]
   114e8:	mov	r0, #0
   114ec:	ldr	r6, [sp, #8]
   114f0:	add	sp, sp, #12
   114f4:	pop	{pc}		; (ldr pc, [sp], #4)
   114f8:	andeq	r0, r1, r4, ror fp
   114fc:	andeq	r0, r0, r4, rrx
   11500:	andeq	r0, r0, r8, asr r0
   11504:	andeq	r0, r0, r4, lsl #11

00011508 <vetor_imprime@@Base>:
   11508:	ldr	r3, [r0]
   1150c:	cmp	r3, #0
   11510:	ble	11598 <vetor_imprime@@Base+0x90>
   11514:	strd	r4, [sp, #-16]!
   11518:	mov	r5, r0
   1151c:	ldr	r3, [r5, #8]
   11520:	ldr	r0, [pc, #124]	; 115a4 <vetor_imprime@@Base+0x9c>
   11524:	ldr	r3, [r3]
   11528:	add	r0, pc, r0
   1152c:	ldr	r2, [r3]
   11530:	ldr	r1, [r3, #4]
   11534:	str	r6, [sp, #8]
   11538:	str	lr, [sp, #12]
   1153c:	bl	109d4 <printf@plt>
   11540:	ldr	r3, [r5]
   11544:	cmp	r3, #1
   11548:	ble	11580 <vetor_imprime@@Base+0x78>
   1154c:	ldr	r6, [pc, #84]	; 115a8 <vetor_imprime@@Base+0xa0>
   11550:	mov	r4, #1
   11554:	add	r6, pc, r6
   11558:	ldr	r3, [r5, #8]
   1155c:	mov	r0, r6
   11560:	ldr	r3, [r3, r4, lsl #2]
   11564:	add	r4, r4, #1
   11568:	ldr	r2, [r3]
   1156c:	ldr	r1, [r3, #4]
   11570:	bl	109d4 <printf@plt>
   11574:	ldr	r3, [r5]
   11578:	cmp	r3, r4
   1157c:	bgt	11558 <vetor_imprime@@Base+0x50>
   11580:	mov	r0, #10
   11584:	ldrd	r4, [sp]
   11588:	ldr	r6, [sp, #8]
   1158c:	ldr	lr, [sp, #12]
   11590:	add	sp, sp, #16
   11594:	b	10a70 <putchar@plt>
   11598:	ldr	r0, [pc, #12]	; 115ac <vetor_imprime@@Base+0xa4>
   1159c:	add	r0, pc, r0
   115a0:	b	10a28 <puts@plt>
   115a4:	andeq	r0, r0, r4, asr #10
   115a8:	andeq	r0, r0, r0, asr r5
   115ac:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>

000115b0 <vetor_imprimeHeap@@Base>:
   115b0:	ldr	r3, [r0]
   115b4:	cmp	r3, #0
   115b8:	ble	11640 <vetor_imprimeHeap@@Base+0x90>
   115bc:	strd	r4, [sp, #-16]!
   115c0:	mov	r5, r0
   115c4:	ldr	r3, [r5, #8]
   115c8:	ldr	r0, [pc, #124]	; 1164c <vetor_imprimeHeap@@Base+0x9c>
   115cc:	ldr	r3, [r3, #4]
   115d0:	add	r0, pc, r0
   115d4:	ldr	r2, [r3]
   115d8:	ldr	r1, [r3, #4]
   115dc:	str	r6, [sp, #8]
   115e0:	str	lr, [sp, #12]
   115e4:	bl	109d4 <printf@plt>
   115e8:	ldr	r3, [r5]
   115ec:	cmp	r3, #2
   115f0:	ble	11628 <vetor_imprimeHeap@@Base+0x78>
   115f4:	ldr	r6, [pc, #84]	; 11650 <vetor_imprimeHeap@@Base+0xa0>
   115f8:	mov	r4, #2
   115fc:	add	r6, pc, r6
   11600:	ldr	r3, [r5, #8]
   11604:	mov	r0, r6
   11608:	ldr	r3, [r3, r4, lsl #2]
   1160c:	add	r4, r4, #1
   11610:	ldr	r2, [r3]
   11614:	ldr	r1, [r3, #4]
   11618:	bl	109d4 <printf@plt>
   1161c:	ldr	r3, [r5]
   11620:	cmp	r3, r4
   11624:	bgt	11600 <vetor_imprimeHeap@@Base+0x50>
   11628:	mov	r0, #10
   1162c:	ldrd	r4, [sp]
   11630:	ldr	r6, [sp, #8]
   11634:	ldr	lr, [sp, #12]
   11638:	add	sp, sp, #16
   1163c:	b	10a70 <putchar@plt>
   11640:	ldr	r0, [pc, #12]	; 11654 <vetor_imprimeHeap@@Base+0xa4>
   11644:	add	r0, pc, r0
   11648:	b	10a28 <puts@plt>
   1164c:	muleq	r0, ip, r4
   11650:	andeq	r0, r0, r8, lsr #9
   11654:	andeq	r0, r0, r8, asr #8

00011658 <__libc_csu_init@@Base>:
   11658:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1165c:	mov	r7, r0
   11660:	ldr	r6, [pc, #72]	; 116b0 <__libc_csu_init@@Base+0x58>
   11664:	ldr	r5, [pc, #72]	; 116b4 <__libc_csu_init@@Base+0x5c>
   11668:	add	r6, pc, r6
   1166c:	add	r5, pc, r5
   11670:	sub	r6, r6, r5
   11674:	mov	r8, r1
   11678:	mov	r9, r2
   1167c:	bl	1099c <calloc@plt-0x20>
   11680:	asrs	r6, r6, #2
   11684:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11688:	mov	r4, #0
   1168c:	add	r4, r4, #1
   11690:	ldr	r3, [r5], #4
   11694:	mov	r2, r9
   11698:	mov	r1, r8
   1169c:	mov	r0, r7
   116a0:	blx	r3
   116a4:	cmp	r6, r4
   116a8:	bne	1168c <__libc_csu_init@@Base+0x34>
   116ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   116b0:	andeq	r0, r1, r4, lsr #17
   116b4:	muleq	r1, ip, r8

000116b8 <__libc_csu_fini@@Base>:
   116b8:	bx	lr

Disassembly of section .fini:

000116bc <.fini>:
   116bc:	push	{r3, lr}
   116c0:	pop	{r3, pc}
