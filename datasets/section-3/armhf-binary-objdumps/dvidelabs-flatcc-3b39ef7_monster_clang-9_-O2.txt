
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf32-littlearm


Disassembly of section .init:

00012350 <.init>:
   12350:	push	{r3, lr}
   12354:	bl	12460 <_start@@Base+0x3c>
   12358:	pop	{r3, pc}

Disassembly of section .plt:

0001235c <strcmp@plt-0x14>:
   1235c:	push	{lr}		; (str lr, [sp, #-4]!)
   12360:	ldr	lr, [pc, #4]	; 1236c <strcmp@plt-0x4>
   12364:	add	lr, pc, lr
   12368:	ldr	pc, [lr, #8]!
   1236c:	muleq	r1, r4, ip

00012370 <strcmp@plt>:
   12370:	add	ip, pc, #0, 12
   12374:	add	ip, ip, #24, 20	; 0x18000
   12378:	ldr	pc, [ip, #3220]!	; 0xc94

0001237c <free@plt>:
   1237c:	add	ip, pc, #0, 12
   12380:	add	ip, ip, #24, 20	; 0x18000
   12384:	ldr	pc, [ip, #3212]!	; 0xc8c

00012388 <memcpy@plt>:
   12388:	add	ip, pc, #0, 12
   1238c:	add	ip, ip, #24, 20	; 0x18000
   12390:	ldr	pc, [ip, #3204]!	; 0xc84

00012394 <realloc@plt>:
   12394:	add	ip, pc, #0, 12
   12398:	add	ip, ip, #24, 20	; 0x18000
   1239c:	ldr	pc, [ip, #3196]!	; 0xc7c

000123a0 <puts@plt>:
   123a0:	add	ip, pc, #0, 12
   123a4:	add	ip, ip, #24, 20	; 0x18000
   123a8:	ldr	pc, [ip, #3188]!	; 0xc74

000123ac <malloc@plt>:
   123ac:	add	ip, pc, #0, 12
   123b0:	add	ip, ip, #24, 20	; 0x18000
   123b4:	ldr	pc, [ip, #3180]!	; 0xc6c

000123b8 <__libc_start_main@plt>:
   123b8:	add	ip, pc, #0, 12
   123bc:	add	ip, ip, #24, 20	; 0x18000
   123c0:	ldr	pc, [ip, #3172]!	; 0xc64

000123c4 <__gmon_start__@plt>:
   123c4:	add	ip, pc, #0, 12
   123c8:	add	ip, ip, #24, 20	; 0x18000
   123cc:	ldr	pc, [ip, #3164]!	; 0xc5c

000123d0 <bcmp@plt>:
   123d0:	add	ip, pc, #0, 12
   123d4:	add	ip, ip, #24, 20	; 0x18000
   123d8:	ldr	pc, [ip, #3156]!	; 0xc54

000123dc <strlen@plt>:
   123dc:	add	ip, pc, #0, 12
   123e0:	add	ip, ip, #24, 20	; 0x18000
   123e4:	ldr	pc, [ip, #3148]!	; 0xc4c

000123e8 <posix_memalign@plt>:
   123e8:	add	ip, pc, #0, 12
   123ec:	add	ip, ip, #24, 20	; 0x18000
   123f0:	ldr	pc, [ip, #3140]!	; 0xc44

000123f4 <memset@plt>:
   123f4:	add	ip, pc, #0, 12
   123f8:	add	ip, ip, #24, 20	; 0x18000
   123fc:	ldr	pc, [ip, #3132]!	; 0xc3c

00012400 <memchr@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #24, 20	; 0x18000
   12408:	ldr	pc, [ip, #3124]!	; 0xc34

0001240c <abort@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #24, 20	; 0x18000
   12414:	ldr	pc, [ip, #3116]!	; 0xc2c

00012418 <__assert_fail@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #24, 20	; 0x18000
   12420:	ldr	pc, [ip, #3108]!	; 0xc24

Disassembly of section .text:

00012424 <_start@@Base>:
   12424:	mov	fp, #0
   12428:	mov	lr, #0
   1242c:	pop	{r1}		; (ldr r1, [sp], #4)
   12430:	mov	r2, sp
   12434:	push	{r2}		; (str r2, [sp, #-4]!)
   12438:	push	{r0}		; (str r0, [sp, #-4]!)
   1243c:	ldr	ip, [pc, #16]	; 12454 <_start@@Base+0x30>
   12440:	push	{ip}		; (str ip, [sp, #-4]!)
   12444:	ldr	r0, [pc, #12]	; 12458 <_start@@Base+0x34>
   12448:	ldr	r3, [pc, #12]	; 1245c <_start@@Base+0x38>
   1244c:	bl	123b8 <__libc_start_main@plt>
   12450:	bl	1240c <abort@plt>
   12454:	ldrdeq	r8, [r1], -r0
   12458:	andeq	r3, r1, r4, asr #7
   1245c:	andeq	r8, r1, r0, ror r8
   12460:	ldr	r3, [pc, #20]	; 1247c <_start@@Base+0x58>
   12464:	ldr	r2, [pc, #20]	; 12480 <_start@@Base+0x5c>
   12468:	add	r3, pc, r3
   1246c:	ldr	r2, [r3, r2]
   12470:	cmp	r2, #0
   12474:	bxeq	lr
   12478:	b	123c4 <__gmon_start__@plt>
   1247c:	muleq	r1, r0, fp
   12480:	andeq	r0, r0, ip, asr #32
   12484:	ldr	r0, [pc, #24]	; 124a4 <_start@@Base+0x80>
   12488:	ldr	r3, [pc, #24]	; 124a8 <_start@@Base+0x84>
   1248c:	cmp	r3, r0
   12490:	bxeq	lr
   12494:	ldr	r3, [pc, #16]	; 124ac <_start@@Base+0x88>
   12498:	cmp	r3, #0
   1249c:	bxeq	lr
   124a0:	bx	r3
   124a4:	andeq	fp, r2, r0, rrx
   124a8:	andeq	fp, r2, r0, rrx
   124ac:	andeq	r0, r0, r0
   124b0:	ldr	r0, [pc, #36]	; 124dc <_start@@Base+0xb8>
   124b4:	ldr	r1, [pc, #36]	; 124e0 <_start@@Base+0xbc>
   124b8:	sub	r1, r1, r0
   124bc:	asr	r1, r1, #2
   124c0:	add	r1, r1, r1, lsr #31
   124c4:	asrs	r1, r1, #1
   124c8:	bxeq	lr
   124cc:	ldr	r3, [pc, #16]	; 124e4 <_start@@Base+0xc0>
   124d0:	cmp	r3, #0
   124d4:	bxeq	lr
   124d8:	bx	r3
   124dc:	andeq	fp, r2, r0, rrx
   124e0:	andeq	fp, r2, r0, rrx
   124e4:	andeq	r0, r0, r0
   124e8:	push	{r4, lr}
   124ec:	ldr	r4, [pc, #24]	; 1250c <_start@@Base+0xe8>
   124f0:	ldrb	r3, [r4]
   124f4:	cmp	r3, #0
   124f8:	popne	{r4, pc}
   124fc:	bl	12484 <_start@@Base+0x60>
   12500:	mov	r3, #1
   12504:	strb	r3, [r4]
   12508:	pop	{r4, pc}
   1250c:	andeq	fp, r2, r0, rrx
   12510:	b	124b0 <_start@@Base+0x8c>

00012514 <create_monster_bottom_up@@Base>:
   12514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12518:	add	fp, sp, #28
   1251c:	sub	sp, sp, #20
   12520:	mov	r9, r1
   12524:	ldr	r1, [pc, #1220]	; 129f0 <create_monster_bottom_up@@Base+0x4dc>
   12528:	mov	r4, r0
   1252c:	add	r1, pc, r1
   12530:	bl	17d04 <flatcc_builder_create_string_str@@Base>
   12534:	ldr	r1, [pc, #1208]	; 129f4 <create_monster_bottom_up@@Base+0x4e0>
   12538:	mov	r5, r0
   1253c:	mov	r0, r4
   12540:	add	r1, pc, r1
   12544:	bl	17d04 <flatcc_builder_create_string_str@@Base>
   12548:	mov	r6, r0
   1254c:	mov	r0, r4
   12550:	mov	r1, #2
   12554:	bl	159cc <flatcc_builder_start_table@@Base>
   12558:	mov	r8, #0
   1255c:	cmp	r5, #0
   12560:	mov	r7, #0
   12564:	beq	125dc <create_monster_bottom_up@@Base+0xc8>
   12568:	cmp	r0, #0
   1256c:	mov	r7, #0
   12570:	bne	125dc <create_monster_bottom_up@@Base+0xc8>
   12574:	mov	r0, r4
   12578:	mov	r1, #0
   1257c:	mov	r7, #0
   12580:	bl	16cb4 <flatcc_builder_table_add_offset@@Base>
   12584:	cmp	r0, #0
   12588:	beq	125dc <create_monster_bottom_up@@Base+0xc8>
   1258c:	str	r5, [r0]
   12590:	mov	r0, r4
   12594:	mov	r1, #1
   12598:	mov	r2, #2
   1259c:	mov	r3, #2
   125a0:	bl	16e68 <flatcc_builder_table_add@@Base>
   125a4:	cmp	r0, #0
   125a8:	beq	125dc <create_monster_bottom_up@@Base+0xc8>
   125ac:	mov	r1, #3
   125b0:	mov	r2, #0
   125b4:	strh	r1, [r0]
   125b8:	mov	r0, r4
   125bc:	ldr	r1, [pc, #1076]	; 129f8 <create_monster_bottom_up@@Base+0x4e4>
   125c0:	add	r1, pc, r1
   125c4:	bl	16368 <flatcc_builder_check_required@@Base>
   125c8:	cmp	r0, #0
   125cc:	beq	129d0 <create_monster_bottom_up@@Base+0x4bc>
   125d0:	mov	r0, r4
   125d4:	bl	163f4 <flatcc_builder_end_table@@Base>
   125d8:	mov	r7, r0
   125dc:	mov	r0, r4
   125e0:	mov	r1, #2
   125e4:	bl	159cc <flatcc_builder_start_table@@Base>
   125e8:	cmp	r6, #0
   125ec:	beq	12660 <create_monster_bottom_up@@Base+0x14c>
   125f0:	cmp	r0, #0
   125f4:	bne	12660 <create_monster_bottom_up@@Base+0x14c>
   125f8:	mov	r0, r4
   125fc:	mov	r1, #0
   12600:	mov	r8, #0
   12604:	bl	16cb4 <flatcc_builder_table_add_offset@@Base>
   12608:	cmp	r0, #0
   1260c:	beq	12660 <create_monster_bottom_up@@Base+0x14c>
   12610:	str	r6, [r0]
   12614:	mov	r0, r4
   12618:	mov	r1, #1
   1261c:	mov	r2, #2
   12620:	mov	r3, #2
   12624:	bl	16e68 <flatcc_builder_table_add@@Base>
   12628:	cmp	r0, #0
   1262c:	beq	12660 <create_monster_bottom_up@@Base+0x14c>
   12630:	mov	r1, #5
   12634:	mov	r2, #0
   12638:	strh	r1, [r0]
   1263c:	mov	r0, r4
   12640:	ldr	r1, [pc, #948]	; 129fc <create_monster_bottom_up@@Base+0x4e8>
   12644:	add	r1, pc, r1
   12648:	bl	16368 <flatcc_builder_check_required@@Base>
   1264c:	cmp	r0, #0
   12650:	beq	129d0 <create_monster_bottom_up@@Base+0x4bc>
   12654:	mov	r0, r4
   12658:	bl	163f4 <flatcc_builder_end_table@@Base>
   1265c:	mov	r8, r0
   12660:	ldr	r1, [pc, #920]	; 12a00 <create_monster_bottom_up@@Base+0x4ec>
   12664:	mov	r0, r4
   12668:	add	r1, pc, r1
   1266c:	bl	17d04 <flatcc_builder_create_string_str@@Base>
   12670:	mov	r6, r0
   12674:	ldr	r0, [pc, #904]	; 12a04 <create_monster_bottom_up@@Base+0x4f0>
   12678:	mov	r1, #1
   1267c:	mov	r2, #10
   12680:	mov	r3, #1
   12684:	str	r1, [sp]
   12688:	add	r1, sp, #8
   1268c:	add	r0, pc, r0
   12690:	vldr	d16, [r0]
   12694:	movw	r0, #2312	; 0x908
   12698:	strh	r0, [sp, #16]
   1269c:	mvn	r0, #0
   126a0:	str	r0, [sp, #4]
   126a4:	mov	r0, r4
   126a8:	vstr	d16, [sp, #8]
   126ac:	bl	165b8 <flatcc_builder_create_vector@@Base>
   126b0:	mov	sl, r0
   126b4:	mov	r0, r4
   126b8:	bl	15548 <flatcc_builder_start_offset_vector@@Base>
   126bc:	cmp	r7, #0
   126c0:	beq	126d0 <create_monster_bottom_up@@Base+0x1bc>
   126c4:	mov	r0, r4
   126c8:	mov	r1, r7
   126cc:	bl	14d90 <flatcc_builder_offset_vector_push@@Base>
   126d0:	cmp	r8, #0
   126d4:	beq	126e4 <create_monster_bottom_up@@Base+0x1d0>
   126d8:	mov	r0, r4
   126dc:	mov	r1, r8
   126e0:	bl	14d90 <flatcc_builder_offset_vector_push@@Base>
   126e4:	mov	r0, r4
   126e8:	bl	15730 <flatcc_builder_end_offset_vector@@Base>
   126ec:	mov	r5, r0
   126f0:	mov	r0, r4
   126f4:	mov	r1, #0
   126f8:	mov	r2, #0
   126fc:	mov	r3, #0
   12700:	bl	143f0 <flatcc_builder_start_buffer@@Base>
   12704:	cmp	r9, #0
   12708:	beq	12868 <create_monster_bottom_up@@Base+0x354>
   1270c:	cmp	r0, #0
   12710:	bne	12720 <create_monster_bottom_up@@Base+0x20c>
   12714:	mov	r0, r4
   12718:	mov	r1, #10
   1271c:	bl	159cc <flatcc_builder_start_table@@Base>
   12720:	mov	r0, r4
   12724:	mov	r1, #0
   12728:	mov	r2, #12
   1272c:	mov	r3, #4
   12730:	bl	16e68 <flatcc_builder_table_add@@Base>
   12734:	cmp	r0, #0
   12738:	beq	12758 <create_monster_bottom_up@@Base+0x244>
   1273c:	movw	r1, #0
   12740:	mov	r3, #1065353216	; 0x3f800000
   12744:	mov	r2, #1073741824	; 0x40000000
   12748:	movt	r1, #16448	; 0x4040
   1274c:	str	r3, [r0]
   12750:	str	r2, [r0, #4]
   12754:	str	r1, [r0, #8]
   12758:	mov	r0, r4
   1275c:	mov	r1, #2
   12760:	mov	r2, #2
   12764:	mov	r3, #2
   12768:	bl	16e68 <flatcc_builder_table_add@@Base>
   1276c:	cmp	r0, #0
   12770:	movne	r1, #300	; 0x12c
   12774:	strhne	r1, [r0]
   12778:	cmp	r6, #0
   1277c:	beq	12794 <create_monster_bottom_up@@Base+0x280>
   12780:	mov	r0, r4
   12784:	mov	r1, #3
   12788:	bl	16cb4 <flatcc_builder_table_add_offset@@Base>
   1278c:	cmp	r0, #0
   12790:	strne	r6, [r0]
   12794:	cmp	sl, #0
   12798:	beq	127b0 <create_monster_bottom_up@@Base+0x29c>
   1279c:	mov	r0, r4
   127a0:	mov	r1, #5
   127a4:	bl	16cb4 <flatcc_builder_table_add_offset@@Base>
   127a8:	cmp	r0, #0
   127ac:	strne	sl, [r0]
   127b0:	mov	r0, r4
   127b4:	mov	r1, #6
   127b8:	mov	r2, #1
   127bc:	mov	r3, #1
   127c0:	bl	16e68 <flatcc_builder_table_add@@Base>
   127c4:	cmp	r0, #0
   127c8:	movne	r1, #0
   127cc:	strbne	r1, [r0]
   127d0:	cmp	r5, #0
   127d4:	beq	127ec <create_monster_bottom_up@@Base+0x2d8>
   127d8:	mov	r0, r4
   127dc:	mov	r1, #7
   127e0:	bl	16cb4 <flatcc_builder_table_add_offset@@Base>
   127e4:	cmp	r0, #0
   127e8:	strne	r5, [r0]
   127ec:	cmp	r8, #0
   127f0:	beq	12830 <create_monster_bottom_up@@Base+0x31c>
   127f4:	mov	r0, r4
   127f8:	mov	r1, #8
   127fc:	mov	r2, #1
   12800:	mov	r3, #1
   12804:	bl	16e68 <flatcc_builder_table_add@@Base>
   12808:	cmp	r0, #0
   1280c:	beq	12830 <create_monster_bottom_up@@Base+0x31c>
   12810:	mov	r5, r0
   12814:	mov	r0, r4
   12818:	mov	r1, #9
   1281c:	bl	16cb4 <flatcc_builder_table_add_offset@@Base>
   12820:	cmp	r0, #0
   12824:	movne	r1, #1
   12828:	strbne	r1, [r5]
   1282c:	strne	r8, [r0]
   12830:	ldr	r1, [pc, #464]	; 12a08 <create_monster_bottom_up@@Base+0x4f4>
   12834:	mov	r0, r4
   12838:	mov	r2, #0
   1283c:	add	r1, pc, r1
   12840:	bl	16368 <flatcc_builder_check_required@@Base>
   12844:	cmp	r0, #0
   12848:	beq	129b0 <create_monster_bottom_up@@Base+0x49c>
   1284c:	mov	r0, r4
   12850:	bl	163f4 <flatcc_builder_end_table@@Base>
   12854:	mov	r9, r0
   12858:	mov	r0, r4
   1285c:	mov	r1, r9
   12860:	bl	145f0 <flatcc_builder_end_buffer@@Base>
   12864:	b	12870 <create_monster_bottom_up@@Base+0x35c>
   12868:	cmp	r0, #0
   1286c:	beq	1287c <create_monster_bottom_up@@Base+0x368>
   12870:	mov	r0, #0
   12874:	sub	sp, fp, #28
   12878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1287c:	mov	r0, r4
   12880:	mov	r1, #10
   12884:	bl	159cc <flatcc_builder_start_table@@Base>
   12888:	mov	r9, #0
   1288c:	cmp	r0, #0
   12890:	bne	12858 <create_monster_bottom_up@@Base+0x344>
   12894:	mov	r0, r4
   12898:	mov	r1, #0
   1289c:	mov	r2, #12
   128a0:	mov	r3, #4
   128a4:	mov	r9, #0
   128a8:	bl	16e68 <flatcc_builder_table_add@@Base>
   128ac:	cmp	r0, #0
   128b0:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   128b4:	movw	r1, #0
   128b8:	mov	r3, #1065353216	; 0x3f800000
   128bc:	cmp	r6, #0
   128c0:	mov	r2, #1073741824	; 0x40000000
   128c4:	movt	r1, #16448	; 0x4040
   128c8:	str	r3, [r0]
   128cc:	str	r2, [r0, #4]
   128d0:	str	r1, [r0, #8]
   128d4:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   128d8:	mov	r0, r4
   128dc:	mov	r1, #3
   128e0:	bl	16cb4 <flatcc_builder_table_add_offset@@Base>
   128e4:	cmp	r0, #0
   128e8:	strne	r6, [r0]
   128ec:	cmpne	sl, #0
   128f0:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   128f4:	mov	r0, r4
   128f8:	mov	r1, #5
   128fc:	bl	16cb4 <flatcc_builder_table_add_offset@@Base>
   12900:	cmp	r0, #0
   12904:	strne	sl, [r0]
   12908:	cmpne	r5, #0
   1290c:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   12910:	mov	r0, r4
   12914:	mov	r1, #7
   12918:	bl	16cb4 <flatcc_builder_table_add_offset@@Base>
   1291c:	cmp	r0, #0
   12920:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   12924:	str	r5, [r0]
   12928:	mov	r0, r4
   1292c:	mov	r1, #9
   12930:	bl	16cb4 <flatcc_builder_table_add_offset@@Base>
   12934:	cmp	r0, #0
   12938:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   1293c:	str	r8, [r0]
   12940:	mov	r0, r4
   12944:	mov	r1, #2
   12948:	mov	r2, #2
   1294c:	mov	r3, #2
   12950:	bl	16e68 <flatcc_builder_table_add@@Base>
   12954:	cmp	r0, #0
   12958:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   1295c:	mov	r1, #300	; 0x12c
   12960:	mov	r2, #1
   12964:	mov	r3, #1
   12968:	strh	r1, [r0]
   1296c:	mov	r0, r4
   12970:	mov	r1, #6
   12974:	bl	16e68 <flatcc_builder_table_add@@Base>
   12978:	cmp	r0, #0
   1297c:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   12980:	mov	r9, #0
   12984:	mov	r1, #8
   12988:	mov	r2, #1
   1298c:	mov	r3, #1
   12990:	mov	r5, #1
   12994:	strb	r9, [r0]
   12998:	mov	r0, r4
   1299c:	bl	16e68 <flatcc_builder_table_add@@Base>
   129a0:	cmp	r0, #0
   129a4:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   129a8:	strb	r5, [r0]
   129ac:	b	12830 <create_monster_bottom_up@@Base+0x31c>
   129b0:	ldr	r0, [pc, #84]	; 12a0c <create_monster_bottom_up@@Base+0x4f8>
   129b4:	ldr	r1, [pc, #84]	; 12a10 <create_monster_bottom_up@@Base+0x4fc>
   129b8:	ldr	r3, [pc, #84]	; 12a14 <create_monster_bottom_up@@Base+0x500>
   129bc:	mov	r2, #50	; 0x32
   129c0:	add	r0, pc, r0
   129c4:	add	r1, pc, r1
   129c8:	add	r3, pc, r3
   129cc:	bl	12418 <__assert_fail@plt>
   129d0:	ldr	r0, [pc, #64]	; 12a18 <create_monster_bottom_up@@Base+0x504>
   129d4:	ldr	r1, [pc, #64]	; 12a1c <create_monster_bottom_up@@Base+0x508>
   129d8:	ldr	r3, [pc, #64]	; 12a20 <create_monster_bottom_up@@Base+0x50c>
   129dc:	mov	r2, #52	; 0x34
   129e0:	add	r0, pc, r0
   129e4:	add	r1, pc, r1
   129e8:	add	r3, pc, r3
   129ec:	bl	12418 <__assert_fail@plt>
   129f0:			; <UNDEFINED> instruction: 0x000063b0
   129f4:	andeq	r6, r0, r2, lsr #7
   129f8:	andeq	r6, r0, sl, lsr #14
   129fc:	andeq	r6, r0, r6, lsr #13
   12a00:	andeq	r6, r0, lr, ror r2
   12a04:	andeq	r6, r0, r4, asr r6
   12a08:			; <UNDEFINED> instruction: 0x000064b0
   12a0c:	andeq	r6, r0, r2, lsl r1
   12a10:	andeq	r6, r0, lr, asr #32
   12a14:	andeq	r6, r0, r9, lsr #3
   12a18:	muleq	r0, r6, pc	; <UNPREDICTABLE>
   12a1c:	andeq	r6, r0, lr, lsr #32
   12a20:	muleq	r0, sp, r0

00012a24 <create_monster_top_down@@Base>:
   12a24:	push	{r4, r5, r6, sl, fp, lr}
   12a28:	add	fp, sp, #16
   12a2c:	sub	sp, sp, #24
   12a30:	mov	r4, r0
   12a34:	ldr	r0, [pc, #568]	; 12c74 <create_monster_top_down@@Base+0x250>
   12a38:	mov	r1, #0
   12a3c:	mov	r2, #0
   12a40:	mov	r3, #0
   12a44:	add	r0, pc, r0
   12a48:	vldr	d16, [r0]
   12a4c:	movw	r0, #2312	; 0x908
   12a50:	strh	r0, [sp, #16]
   12a54:	mov	r0, r4
   12a58:	vstr	d16, [sp, #8]
   12a5c:	bl	143f0 <flatcc_builder_start_buffer@@Base>
   12a60:	cmp	r0, #0
   12a64:	bne	12a74 <create_monster_top_down@@Base+0x50>
   12a68:	mov	r0, r4
   12a6c:	mov	r1, #10
   12a70:	bl	159cc <flatcc_builder_start_table@@Base>
   12a74:	mov	r0, r4
   12a78:	mov	r1, #0
   12a7c:	mov	r2, #12
   12a80:	mov	r3, #4
   12a84:	bl	16e68 <flatcc_builder_table_add@@Base>
   12a88:	cmp	r0, #0
   12a8c:	beq	12aac <create_monster_top_down@@Base+0x88>
   12a90:	movw	r1, #0
   12a94:	mov	r3, #1065353216	; 0x3f800000
   12a98:	mov	r2, #1073741824	; 0x40000000
   12a9c:	movt	r1, #16448	; 0x4040
   12aa0:	str	r3, [r0]
   12aa4:	str	r2, [r0, #4]
   12aa8:	str	r1, [r0, #8]
   12aac:	mov	r0, r4
   12ab0:	mov	r1, #2
   12ab4:	mov	r2, #2
   12ab8:	mov	r3, #2
   12abc:	bl	16e68 <flatcc_builder_table_add@@Base>
   12ac0:	cmp	r0, #0
   12ac4:	movne	r1, #300	; 0x12c
   12ac8:	strhne	r1, [r0]
   12acc:	mov	r0, r4
   12ad0:	ldr	r1, [pc, #416]	; 12c78 <create_monster_top_down@@Base+0x254>
   12ad4:	add	r1, pc, r1
   12ad8:	bl	17d04 <flatcc_builder_create_string_str@@Base>
   12adc:	cmp	r0, #0
   12ae0:	beq	12afc <create_monster_top_down@@Base+0xd8>
   12ae4:	mov	r5, r0
   12ae8:	mov	r0, r4
   12aec:	mov	r1, #3
   12af0:	bl	16cb4 <flatcc_builder_table_add_offset@@Base>
   12af4:	cmp	r0, #0
   12af8:	strne	r5, [r0]
   12afc:	mvn	r0, #0
   12b00:	mov	r1, #1
   12b04:	mov	r2, #10
   12b08:	mov	r3, #1
   12b0c:	str	r1, [sp]
   12b10:	str	r0, [sp, #4]
   12b14:	add	r1, sp, #8
   12b18:	mov	r0, r4
   12b1c:	bl	165b8 <flatcc_builder_create_vector@@Base>
   12b20:	cmp	r0, #0
   12b24:	beq	12b40 <create_monster_top_down@@Base+0x11c>
   12b28:	mov	r5, r0
   12b2c:	mov	r0, r4
   12b30:	mov	r1, #5
   12b34:	bl	16cb4 <flatcc_builder_table_add_offset@@Base>
   12b38:	cmp	r0, #0
   12b3c:	strne	r5, [r0]
   12b40:	mov	r0, r4
   12b44:	mov	r1, #6
   12b48:	mov	r2, #1
   12b4c:	mov	r3, #1
   12b50:	bl	16e68 <flatcc_builder_table_add@@Base>
   12b54:	cmp	r0, #0
   12b58:	movne	r1, #0
   12b5c:	strbne	r1, [r0]
   12b60:	mov	r0, r4
   12b64:	bl	15548 <flatcc_builder_start_offset_vector@@Base>
   12b68:	ldr	r1, [pc, #268]	; 12c7c <create_monster_top_down@@Base+0x258>
   12b6c:	mov	r0, r4
   12b70:	add	r1, pc, r1
   12b74:	bl	17d04 <flatcc_builder_create_string_str@@Base>
   12b78:	mov	r1, r0
   12b7c:	mov	r0, r4
   12b80:	mov	r2, #3
   12b84:	bl	12c94 <create_monster_top_down@@Base+0x270>
   12b88:	ldr	r1, [pc, #240]	; 12c80 <create_monster_top_down@@Base+0x25c>
   12b8c:	mov	r0, r4
   12b90:	add	r1, pc, r1
   12b94:	bl	17d04 <flatcc_builder_create_string_str@@Base>
   12b98:	mov	r1, r0
   12b9c:	mov	r0, r4
   12ba0:	mov	r2, #5
   12ba4:	bl	12c94 <create_monster_top_down@@Base+0x270>
   12ba8:	ldr	r6, [r0]
   12bac:	mov	r0, r4
   12bb0:	bl	15730 <flatcc_builder_end_offset_vector@@Base>
   12bb4:	cmp	r0, #0
   12bb8:	beq	12bd4 <create_monster_top_down@@Base+0x1b0>
   12bbc:	mov	r5, r0
   12bc0:	mov	r0, r4
   12bc4:	mov	r1, #7
   12bc8:	bl	16cb4 <flatcc_builder_table_add_offset@@Base>
   12bcc:	cmp	r0, #0
   12bd0:	strne	r5, [r0]
   12bd4:	cmp	r6, #0
   12bd8:	beq	12c18 <create_monster_top_down@@Base+0x1f4>
   12bdc:	mov	r0, r4
   12be0:	mov	r1, #8
   12be4:	mov	r2, #1
   12be8:	mov	r3, #1
   12bec:	bl	16e68 <flatcc_builder_table_add@@Base>
   12bf0:	cmp	r0, #0
   12bf4:	beq	12c18 <create_monster_top_down@@Base+0x1f4>
   12bf8:	mov	r5, r0
   12bfc:	mov	r0, r4
   12c00:	mov	r1, #9
   12c04:	bl	16cb4 <flatcc_builder_table_add_offset@@Base>
   12c08:	cmp	r0, #0
   12c0c:	movne	r1, #1
   12c10:	strbne	r1, [r5]
   12c14:	strne	r6, [r0]
   12c18:	ldr	r1, [pc, #100]	; 12c84 <create_monster_top_down@@Base+0x260>
   12c1c:	mov	r0, r4
   12c20:	mov	r2, #0
   12c24:	add	r1, pc, r1
   12c28:	bl	16368 <flatcc_builder_check_required@@Base>
   12c2c:	cmp	r0, #0
   12c30:	beq	12c54 <create_monster_top_down@@Base+0x230>
   12c34:	mov	r0, r4
   12c38:	bl	163f4 <flatcc_builder_end_table@@Base>
   12c3c:	mov	r1, r0
   12c40:	mov	r0, r4
   12c44:	bl	145f0 <flatcc_builder_end_buffer@@Base>
   12c48:	mov	r0, #0
   12c4c:	sub	sp, fp, #16
   12c50:	pop	{r4, r5, r6, sl, fp, pc}
   12c54:	ldr	r0, [pc, #44]	; 12c88 <create_monster_top_down@@Base+0x264>
   12c58:	ldr	r1, [pc, #44]	; 12c8c <create_monster_top_down@@Base+0x268>
   12c5c:	ldr	r3, [pc, #44]	; 12c90 <create_monster_top_down@@Base+0x26c>
   12c60:	mov	r2, #50	; 0x32
   12c64:	add	r0, pc, r0
   12c68:	add	r1, pc, r1
   12c6c:	add	r3, pc, r3
   12c70:	bl	12418 <__assert_fail@plt>
   12c74:	muleq	r0, ip, r2
   12c78:	andeq	r5, r0, r2, lsl lr
   12c7c:	andeq	r5, r0, ip, ror #26
   12c80:	andeq	r5, r0, r2, asr sp
   12c84:	andeq	r6, r0, r8, asr #1
   12c88:	andeq	r5, r0, lr, ror #28
   12c8c:	andeq	r5, r0, sl, lsr #27
   12c90:	andeq	r5, r0, r5, lsl #30
   12c94:	push	{r4, r5, r6, sl, fp, lr}
   12c98:	add	fp, sp, #16
   12c9c:	mov	r6, r1
   12ca0:	mov	r1, #2
   12ca4:	mov	r5, r2
   12ca8:	mov	r4, r0
   12cac:	bl	159cc <flatcc_builder_start_table@@Base>
   12cb0:	cmp	r6, #0
   12cb4:	beq	12d3c <create_monster_top_down@@Base+0x318>
   12cb8:	cmp	r0, #0
   12cbc:	bne	12d3c <create_monster_top_down@@Base+0x318>
   12cc0:	mov	r0, r4
   12cc4:	mov	r1, #0
   12cc8:	bl	16cb4 <flatcc_builder_table_add_offset@@Base>
   12ccc:	cmp	r0, #0
   12cd0:	beq	12d3c <create_monster_top_down@@Base+0x318>
   12cd4:	cmp	r5, #0
   12cd8:	str	r6, [r0]
   12cdc:	beq	12d00 <create_monster_top_down@@Base+0x2dc>
   12ce0:	mov	r0, r4
   12ce4:	mov	r1, #1
   12ce8:	mov	r2, #2
   12cec:	mov	r3, #2
   12cf0:	bl	16e68 <flatcc_builder_table_add@@Base>
   12cf4:	cmp	r0, #0
   12cf8:	beq	12d3c <create_monster_top_down@@Base+0x318>
   12cfc:	strh	r5, [r0]
   12d00:	ldr	r1, [pc, #92]	; 12d64 <create_monster_top_down@@Base+0x340>
   12d04:	mov	r0, r4
   12d08:	mov	r2, #0
   12d0c:	add	r1, pc, r1
   12d10:	bl	16368 <flatcc_builder_check_required@@Base>
   12d14:	cmp	r0, #0
   12d18:	beq	12d44 <create_monster_top_down@@Base+0x320>
   12d1c:	mov	r0, r4
   12d20:	bl	163f4 <flatcc_builder_end_table@@Base>
   12d24:	cmp	r0, #0
   12d28:	beq	12d3c <create_monster_top_down@@Base+0x318>
   12d2c:	mov	r1, r0
   12d30:	mov	r0, r4
   12d34:	pop	{r4, r5, r6, sl, fp, lr}
   12d38:	b	14d90 <flatcc_builder_offset_vector_push@@Base>
   12d3c:	mov	r0, #0
   12d40:	pop	{r4, r5, r6, sl, fp, pc}
   12d44:	ldr	r0, [pc, #28]	; 12d68 <create_monster_top_down@@Base+0x344>
   12d48:	ldr	r1, [pc, #28]	; 12d6c <create_monster_top_down@@Base+0x348>
   12d4c:	ldr	r3, [pc, #28]	; 12d70 <create_monster_top_down@@Base+0x34c>
   12d50:	mov	r2, #52	; 0x34
   12d54:	add	r0, pc, r0
   12d58:	add	r1, pc, r1
   12d5c:	add	r3, pc, r3
   12d60:	bl	12418 <__assert_fail@plt>
   12d64:	ldrdeq	r5, [r0], -lr
   12d68:	andeq	r5, r0, r2, lsr #24
   12d6c:			; <UNDEFINED> instruction: 0x00005cba
   12d70:	andeq	r5, r0, r9, lsr #26

00012d74 <access_monster_buffer@@Base>:
   12d74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12d78:	add	fp, sp, #24
   12d7c:	cmp	r0, #0
   12d80:	beq	130e8 <access_monster_buffer@@Base+0x374>
   12d84:	mov	r4, r0
   12d88:	ldr	r0, [r0]
   12d8c:	ldr	r0, [r4, r0]!
   12d90:	mov	r5, r4
   12d94:	ldrh	r8, [r5, -r0]!
   12d98:	cmp	r8, #9
   12d9c:	bls	12db8 <access_monster_buffer@@Base+0x44>
   12da0:	ldrh	r0, [r5, #8]
   12da4:	cmp	r0, #0
   12da8:	beq	12dc8 <access_monster_buffer@@Base+0x54>
   12dac:	add	r0, r4, r0
   12db0:	ldrh	r1, [r0]
   12db4:	b	12dcc <access_monster_buffer@@Base+0x58>
   12db8:	mov	r1, #100	; 0x64
   12dbc:	cmp	r8, #8
   12dc0:	bcs	12dcc <access_monster_buffer@@Base+0x58>
   12dc4:	b	13048 <access_monster_buffer@@Base+0x2d4>
   12dc8:	mov	r1, #100	; 0x64
   12dcc:	ldrh	r7, [r5, #6]
   12dd0:	cmp	r7, #0
   12dd4:	beq	12de4 <access_monster_buffer@@Base+0x70>
   12dd8:	add	r0, r4, r7
   12ddc:	ldrh	r2, [r0]
   12de0:	b	12de8 <access_monster_buffer@@Base+0x74>
   12de4:	mov	r2, #150	; 0x96
   12de8:	mov	r0, #0
   12dec:	cmp	r8, #12
   12df0:	mov	r6, #0
   12df4:	bcc	12e14 <access_monster_buffer@@Base+0xa0>
   12df8:	ldrh	r0, [r5, #10]
   12dfc:	cmp	r0, #0
   12e00:	beq	13038 <access_monster_buffer@@Base+0x2c4>
   12e04:	mov	r3, r4
   12e08:	ldr	r0, [r3, r0]!
   12e0c:	ldr	r6, [r3, r0]!
   12e10:	add	r0, r3, #4
   12e14:	cmp	r1, #300	; 0x12c
   12e18:	bne	13048 <access_monster_buffer@@Base+0x2d4>
   12e1c:	cmp	r2, #150	; 0x96
   12e20:	bne	13108 <access_monster_buffer@@Base+0x394>
   12e24:	ldr	r1, [pc, #1180]	; 132c8 <access_monster_buffer@@Base+0x554>
   12e28:	add	r1, pc, r1
   12e2c:	bl	12370 <strcmp@plt>
   12e30:	cmp	r0, #0
   12e34:	bne	13128 <access_monster_buffer@@Base+0x3b4>
   12e38:	cmp	r6, #3
   12e3c:	bne	13148 <access_monster_buffer@@Base+0x3d4>
   12e40:	cmp	r8, #10
   12e44:	bcc	130a8 <access_monster_buffer@@Base+0x334>
   12e48:	ldrh	r0, [r5, #8]
   12e4c:	cmp	r0, #0
   12e50:	beq	130a8 <access_monster_buffer@@Base+0x334>
   12e54:	cmp	r7, #0
   12e58:	bne	13168 <access_monster_buffer@@Base+0x3f4>
   12e5c:	ldrh	r0, [r5, #4]
   12e60:	cmp	r0, #0
   12e64:	beq	13188 <access_monster_buffer@@Base+0x414>
   12e68:	add	r0, r4, r0
   12e6c:	vmov.f32	s2, #112	; 0x3f800000  1.0
   12e70:	vldr	s0, [r0]
   12e74:	vcmp.f32	s0, s2
   12e78:	vmrs	APSR_nzcv, fpscr
   12e7c:	bne	131a8 <access_monster_buffer@@Base+0x434>
   12e80:	vldr	s0, [r0, #4]
   12e84:	vmov.f32	s2, #0	; 0x40000000  2.0
   12e88:	vcmp.f32	s0, s2
   12e8c:	vmrs	APSR_nzcv, fpscr
   12e90:	bne	131c8 <access_monster_buffer@@Base+0x454>
   12e94:	vldr	s0, [r0, #8]
   12e98:	vmov.f32	s2, #8	; 0x40400000  3.0
   12e9c:	vcmp.f32	s0, s2
   12ea0:	vmrs	APSR_nzcv, fpscr
   12ea4:	bne	131e8 <access_monster_buffer@@Base+0x474>
   12ea8:	cmp	r8, #16
   12eac:	bcc	130c8 <access_monster_buffer@@Base+0x354>
   12eb0:	ldrh	r1, [r5, #14]
   12eb4:	cmp	r1, #0
   12eb8:	beq	130c8 <access_monster_buffer@@Base+0x354>
   12ebc:	mov	r0, r4
   12ec0:	ldr	r1, [r0, r1]!
   12ec4:	ldr	r1, [r0, r1]!
   12ec8:	cmp	r1, #10
   12ecc:	bne	13208 <access_monster_buffer@@Base+0x494>
   12ed0:	add	r0, r0, #4
   12ed4:	ldrb	r0, [r0, #2]
   12ed8:	cmp	r0, #2
   12edc:	bne	13228 <access_monster_buffer@@Base+0x4b4>
   12ee0:	cmp	r8, #20
   12ee4:	bcc	13068 <access_monster_buffer@@Base+0x2f4>
   12ee8:	ldrh	r1, [r5, #18]
   12eec:	cmp	r1, #0
   12ef0:	beq	13068 <access_monster_buffer@@Base+0x2f4>
   12ef4:	mov	r0, r4
   12ef8:	ldr	r1, [r0, r1]!
   12efc:	ldr	r1, [r0, r1]!
   12f00:	cmp	r1, #2
   12f04:	bne	13068 <access_monster_buffer@@Base+0x2f4>
   12f08:	add	r1, r0, #4
   12f0c:	ldr	r0, [r1, #4]!
   12f10:	ldr	r0, [r1, r0]!
   12f14:	mov	r2, r1
   12f18:	ldrh	r3, [r2, -r0]!
   12f1c:	cmp	r3, #6
   12f20:	bcc	13088 <access_monster_buffer@@Base+0x314>
   12f24:	ldrh	r6, [r2, #4]
   12f28:	mov	r7, #0
   12f2c:	mov	r0, #0
   12f30:	cmp	r6, #0
   12f34:	beq	12f48 <access_monster_buffer@@Base+0x1d4>
   12f38:	mov	r0, r1
   12f3c:	ldr	r6, [r0, r6]!
   12f40:	add	r0, r0, r6
   12f44:	add	r0, r0, #4
   12f48:	cmp	r3, #8
   12f4c:	bcc	12f60 <access_monster_buffer@@Base+0x1ec>
   12f50:	ldrh	r2, [r2, #6]
   12f54:	cmp	r2, #0
   12f58:	addne	r1, r1, r2
   12f5c:	ldrhne	r7, [r1]
   12f60:	cmp	r0, #0
   12f64:	beq	13088 <access_monster_buffer@@Base+0x314>
   12f68:	ldr	r1, [pc, #860]	; 132cc <access_monster_buffer@@Base+0x558>
   12f6c:	add	r1, pc, r1
   12f70:	bl	12370 <strcmp@plt>
   12f74:	cmp	r0, #0
   12f78:	bne	13088 <access_monster_buffer@@Base+0x314>
   12f7c:	cmp	r7, #5
   12f80:	bne	13248 <access_monster_buffer@@Base+0x4d4>
   12f84:	cmp	r8, #22
   12f88:	bcc	13030 <access_monster_buffer@@Base+0x2bc>
   12f8c:	ldrh	r0, [r5, #20]
   12f90:	cmp	r0, #0
   12f94:	beq	13030 <access_monster_buffer@@Base+0x2bc>
   12f98:	ldrb	r0, [r4, r0]
   12f9c:	cmp	r0, #1
   12fa0:	bne	13030 <access_monster_buffer@@Base+0x2bc>
   12fa4:	cmp	r8, #24
   12fa8:	bcc	13268 <access_monster_buffer@@Base+0x4f4>
   12fac:	ldrh	r0, [r5, #22]
   12fb0:	cmp	r0, #0
   12fb4:	beq	13268 <access_monster_buffer@@Base+0x4f4>
   12fb8:	ldr	r0, [r4, r0]!
   12fbc:	mov	r5, #0
   12fc0:	ldr	r0, [r4, r0]!
   12fc4:	mov	r1, r4
   12fc8:	ldrh	r2, [r1, -r0]!
   12fcc:	mov	r0, #0
   12fd0:	cmp	r2, #5
   12fd4:	bls	13014 <access_monster_buffer@@Base+0x2a0>
   12fd8:	ldrh	r3, [r1, #4]
   12fdc:	mov	r5, #0
   12fe0:	mov	r0, #0
   12fe4:	cmp	r3, #0
   12fe8:	beq	12ffc <access_monster_buffer@@Base+0x288>
   12fec:	mov	r0, r4
   12ff0:	ldr	r3, [r0, r3]!
   12ff4:	add	r0, r0, r3
   12ff8:	add	r0, r0, #4
   12ffc:	cmp	r2, #8
   13000:	bcc	13014 <access_monster_buffer@@Base+0x2a0>
   13004:	ldrh	r1, [r1, #6]
   13008:	cmp	r1, #0
   1300c:	addne	r1, r4, r1
   13010:	ldrhne	r5, [r1]
   13014:	ldr	r1, [pc, #692]	; 132d0 <access_monster_buffer@@Base+0x55c>
   13018:	add	r1, pc, r1
   1301c:	bl	12370 <strcmp@plt>
   13020:	cmp	r0, #0
   13024:	bne	13288 <access_monster_buffer@@Base+0x514>
   13028:	cmp	r5, #5
   1302c:	bne	132a8 <access_monster_buffer@@Base+0x534>
   13030:	mov	r0, #0
   13034:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13038:	mov	r0, #0
   1303c:	mov	r6, #0
   13040:	cmp	r1, #300	; 0x12c
   13044:	beq	12e1c <access_monster_buffer@@Base+0xa8>
   13048:	ldr	r0, [pc, #656]	; 132e0 <access_monster_buffer@@Base+0x56c>
   1304c:	ldr	r1, [pc, #656]	; 132e4 <access_monster_buffer@@Base+0x570>
   13050:	ldr	r3, [pc, #656]	; 132e8 <access_monster_buffer@@Base+0x574>
   13054:	mov	r2, #219	; 0xdb
   13058:	add	r0, pc, r0
   1305c:	add	r1, pc, r1
   13060:	add	r3, pc, r3
   13064:	bl	12418 <__assert_fail@plt>
   13068:	ldr	r0, [pc, #780]	; 1337c <access_monster_buffer@@Base+0x608>
   1306c:	ldr	r1, [pc, #780]	; 13380 <access_monster_buffer@@Base+0x60c>
   13070:	ldr	r3, [pc, #780]	; 13384 <access_monster_buffer@@Base+0x610>
   13074:	movw	r2, #271	; 0x10f
   13078:	add	r0, pc, r0
   1307c:	add	r1, pc, r1
   13080:	add	r3, pc, r3
   13084:	bl	12418 <__assert_fail@plt>
   13088:	ldr	r0, [pc, #760]	; 13388 <access_monster_buffer@@Base+0x614>
   1308c:	ldr	r1, [pc, #760]	; 1338c <access_monster_buffer@@Base+0x618>
   13090:	ldr	r3, [pc, #760]	; 13390 <access_monster_buffer@@Base+0x61c>
   13094:	movw	r2, #275	; 0x113
   13098:	add	r0, pc, r0
   1309c:	add	r1, pc, r1
   130a0:	add	r3, pc, r3
   130a4:	bl	12418 <__assert_fail@plt>
   130a8:	ldr	r0, [pc, #608]	; 13310 <access_monster_buffer@@Base+0x59c>
   130ac:	ldr	r1, [pc, #608]	; 13314 <access_monster_buffer@@Base+0x5a0>
   130b0:	ldr	r3, [pc, #608]	; 13318 <access_monster_buffer@@Base+0x5a4>
   130b4:	mov	r2, #227	; 0xe3
   130b8:	add	r0, pc, r0
   130bc:	add	r1, pc, r1
   130c0:	add	r3, pc, r3
   130c4:	bl	12418 <__assert_fail@plt>
   130c8:	ldr	r0, [pc, #648]	; 13358 <access_monster_buffer@@Base+0x5e4>
   130cc:	ldr	r1, [pc, #648]	; 1335c <access_monster_buffer@@Base+0x5e8>
   130d0:	ldr	r3, [pc, #648]	; 13360 <access_monster_buffer@@Base+0x5ec>
   130d4:	movw	r2, #261	; 0x105
   130d8:	add	r0, pc, r0
   130dc:	add	r1, pc, r1
   130e0:	add	r3, pc, r3
   130e4:	bl	12418 <__assert_fail@plt>
   130e8:	ldr	r0, [pc, #484]	; 132d4 <access_monster_buffer@@Base+0x560>
   130ec:	ldr	r1, [pc, #484]	; 132d8 <access_monster_buffer@@Base+0x564>
   130f0:	ldr	r3, [pc, #484]	; 132dc <access_monster_buffer@@Base+0x568>
   130f4:	mov	r2, #211	; 0xd3
   130f8:	add	r0, pc, r0
   130fc:	add	r1, pc, r1
   13100:	add	r3, pc, r3
   13104:	bl	12418 <__assert_fail@plt>
   13108:	ldr	r0, [pc, #476]	; 132ec <access_monster_buffer@@Base+0x578>
   1310c:	ldr	r1, [pc, #476]	; 132f0 <access_monster_buffer@@Base+0x57c>
   13110:	ldr	r3, [pc, #476]	; 132f4 <access_monster_buffer@@Base+0x580>
   13114:	mov	r2, #221	; 0xdd
   13118:	add	r0, pc, r0
   1311c:	add	r1, pc, r1
   13120:	add	r3, pc, r3
   13124:	bl	12418 <__assert_fail@plt>
   13128:	ldr	r0, [pc, #456]	; 132f8 <access_monster_buffer@@Base+0x584>
   1312c:	ldr	r1, [pc, #456]	; 132fc <access_monster_buffer@@Base+0x588>
   13130:	ldr	r3, [pc, #456]	; 13300 <access_monster_buffer@@Base+0x58c>
   13134:	mov	r2, #222	; 0xde
   13138:	add	r0, pc, r0
   1313c:	add	r1, pc, r1
   13140:	add	r3, pc, r3
   13144:	bl	12418 <__assert_fail@plt>
   13148:	ldr	r0, [pc, #436]	; 13304 <access_monster_buffer@@Base+0x590>
   1314c:	ldr	r1, [pc, #436]	; 13308 <access_monster_buffer@@Base+0x594>
   13150:	ldr	r3, [pc, #436]	; 1330c <access_monster_buffer@@Base+0x598>
   13154:	mov	r2, #223	; 0xdf
   13158:	add	r0, pc, r0
   1315c:	add	r1, pc, r1
   13160:	add	r3, pc, r3
   13164:	bl	12418 <__assert_fail@plt>
   13168:	ldr	r0, [pc, #428]	; 1331c <access_monster_buffer@@Base+0x5a8>
   1316c:	ldr	r1, [pc, #428]	; 13320 <access_monster_buffer@@Base+0x5ac>
   13170:	ldr	r3, [pc, #428]	; 13324 <access_monster_buffer@@Base+0x5b0>
   13174:	mov	r2, #228	; 0xe4
   13178:	add	r0, pc, r0
   1317c:	add	r1, pc, r1
   13180:	add	r3, pc, r3
   13184:	bl	12418 <__assert_fail@plt>
   13188:	ldr	r0, [pc, #408]	; 13328 <access_monster_buffer@@Base+0x5b4>
   1318c:	ldr	r1, [pc, #408]	; 1332c <access_monster_buffer@@Base+0x5b8>
   13190:	ldr	r3, [pc, #408]	; 13330 <access_monster_buffer@@Base+0x5bc>
   13194:	mov	r2, #232	; 0xe8
   13198:	add	r0, pc, r0
   1319c:	add	r1, pc, r1
   131a0:	add	r3, pc, r3
   131a4:	bl	12418 <__assert_fail@plt>
   131a8:	ldr	r0, [pc, #388]	; 13334 <access_monster_buffer@@Base+0x5c0>
   131ac:	ldr	r1, [pc, #388]	; 13338 <access_monster_buffer@@Base+0x5c4>
   131b0:	ldr	r3, [pc, #388]	; 1333c <access_monster_buffer@@Base+0x5c8>
   131b4:	mov	r2, #240	; 0xf0
   131b8:	add	r0, pc, r0
   131bc:	add	r1, pc, r1
   131c0:	add	r3, pc, r3
   131c4:	bl	12418 <__assert_fail@plt>
   131c8:	ldr	r0, [pc, #368]	; 13340 <access_monster_buffer@@Base+0x5cc>
   131cc:	ldr	r1, [pc, #368]	; 13344 <access_monster_buffer@@Base+0x5d0>
   131d0:	ldr	r3, [pc, #368]	; 13348 <access_monster_buffer@@Base+0x5d4>
   131d4:	mov	r2, #241	; 0xf1
   131d8:	add	r0, pc, r0
   131dc:	add	r1, pc, r1
   131e0:	add	r3, pc, r3
   131e4:	bl	12418 <__assert_fail@plt>
   131e8:	ldr	r0, [pc, #348]	; 1334c <access_monster_buffer@@Base+0x5d8>
   131ec:	ldr	r1, [pc, #348]	; 13350 <access_monster_buffer@@Base+0x5dc>
   131f0:	ldr	r3, [pc, #348]	; 13354 <access_monster_buffer@@Base+0x5e0>
   131f4:	mov	r2, #242	; 0xf2
   131f8:	add	r0, pc, r0
   131fc:	add	r1, pc, r1
   13200:	add	r3, pc, r3
   13204:	bl	12418 <__assert_fail@plt>
   13208:	ldr	r0, [pc, #340]	; 13364 <access_monster_buffer@@Base+0x5f0>
   1320c:	ldr	r1, [pc, #340]	; 13368 <access_monster_buffer@@Base+0x5f4>
   13210:	ldr	r3, [pc, #340]	; 1336c <access_monster_buffer@@Base+0x5f8>
   13214:	movw	r2, #263	; 0x107
   13218:	add	r0, pc, r0
   1321c:	add	r1, pc, r1
   13220:	add	r3, pc, r3
   13224:	bl	12418 <__assert_fail@plt>
   13228:	ldr	r0, [pc, #320]	; 13370 <access_monster_buffer@@Base+0x5fc>
   1322c:	ldr	r1, [pc, #320]	; 13374 <access_monster_buffer@@Base+0x600>
   13230:	ldr	r3, [pc, #320]	; 13378 <access_monster_buffer@@Base+0x604>
   13234:	movw	r2, #267	; 0x10b
   13238:	add	r0, pc, r0
   1323c:	add	r1, pc, r1
   13240:	add	r3, pc, r3
   13244:	bl	12418 <__assert_fail@plt>
   13248:	ldr	r0, [pc, #324]	; 13394 <access_monster_buffer@@Base+0x620>
   1324c:	ldr	r1, [pc, #324]	; 13398 <access_monster_buffer@@Base+0x624>
   13250:	ldr	r3, [pc, #324]	; 1339c <access_monster_buffer@@Base+0x628>
   13254:	mov	r2, #276	; 0x114
   13258:	add	r0, pc, r0
   1325c:	add	r1, pc, r1
   13260:	add	r3, pc, r3
   13264:	bl	12418 <__assert_fail@plt>
   13268:	ldr	r0, [pc, #304]	; 133a0 <access_monster_buffer@@Base+0x62c>
   1326c:	ldr	r1, [pc, #304]	; 133a4 <access_monster_buffer@@Base+0x630>
   13270:	ldr	r3, [pc, #304]	; 133a8 <access_monster_buffer@@Base+0x634>
   13274:	mov	r2, #148	; 0x94
   13278:	add	r0, pc, r0
   1327c:	add	r1, pc, r1
   13280:	add	r3, pc, r3
   13284:	bl	12418 <__assert_fail@plt>
   13288:	ldr	r0, [pc, #284]	; 133ac <access_monster_buffer@@Base+0x638>
   1328c:	ldr	r1, [pc, #284]	; 133b0 <access_monster_buffer@@Base+0x63c>
   13290:	ldr	r3, [pc, #284]	; 133b4 <access_monster_buffer@@Base+0x640>
   13294:	movw	r2, #286	; 0x11e
   13298:	add	r0, pc, r0
   1329c:	add	r1, pc, r1
   132a0:	add	r3, pc, r3
   132a4:	bl	12418 <__assert_fail@plt>
   132a8:	ldr	r0, [pc, #264]	; 133b8 <access_monster_buffer@@Base+0x644>
   132ac:	ldr	r1, [pc, #264]	; 133bc <access_monster_buffer@@Base+0x648>
   132b0:	ldr	r3, [pc, #264]	; 133c0 <access_monster_buffer@@Base+0x64c>
   132b4:	movw	r2, #287	; 0x11f
   132b8:	add	r0, pc, r0
   132bc:	add	r1, pc, r1
   132c0:	add	r3, pc, r3
   132c4:	bl	12418 <__assert_fail@plt>
   132c8:			; <UNDEFINED> instruction: 0x00005abe
   132cc:	andeq	r5, r0, r6, ror r9
   132d0:	andeq	r5, r0, sl, asr #17
   132d4:	andeq	r6, r0, r5, asr #31
   132d8:	andeq	r5, r0, lr, ror #15
   132dc:	andeq	r5, r0, fp, asr #16
   132e0:	andeq	r7, r0, r5, rrx
   132e4:	andeq	r5, r0, lr, lsl #17
   132e8:	andeq	r5, r0, fp, ror #17
   132ec:	andeq	r6, r0, r5, lsr #31
   132f0:	andeq	r5, r0, lr, asr #15
   132f4:	andeq	r5, r0, fp, lsr #16
   132f8:	andeq	r6, r0, r5, lsl #31
   132fc:	andeq	r5, r0, lr, lsr #15
   13300:	andeq	r5, r0, fp, lsl #16
   13304:	andeq	r6, r0, r5, ror #30
   13308:	andeq	r5, r0, lr, lsl #15
   1330c:	andeq	r5, r0, fp, ror #15
   13310:	andeq	r7, r0, r5
   13314:	andeq	r5, r0, lr, lsr #16
   13318:	andeq	r5, r0, fp, lsl #17
   1331c:	andeq	r6, r0, r5, asr #30
   13320:	andeq	r5, r0, lr, ror #14
   13324:	andeq	r5, r0, fp, asr #15
   13328:	andeq	r6, r0, r5, lsr #30
   1332c:	andeq	r5, r0, lr, asr #14
   13330:	andeq	r5, r0, fp, lsr #15
   13334:	andeq	r6, r0, r5, lsl #30
   13338:	andeq	r5, r0, lr, lsr #14
   1333c:	andeq	r5, r0, fp, lsl #15
   13340:	andeq	r6, r0, r5, ror #29
   13344:	andeq	r5, r0, lr, lsl #14
   13348:	andeq	r5, r0, fp, ror #14
   1334c:	andeq	r6, r0, r5, asr #29
   13350:	andeq	r5, r0, lr, ror #13
   13354:	andeq	r5, r0, fp, asr #14
   13358:	andeq	r6, r0, r5, ror #31
   1335c:	andeq	r5, r0, lr, lsl #16
   13360:	andeq	r5, r0, fp, ror #16
   13364:	andeq	r6, r0, r5, lsr #29
   13368:	andeq	r5, r0, lr, asr #13
   1336c:	andeq	r5, r0, fp, lsr #14
   13370:	andeq	r6, r0, r5, lsl #29
   13374:	andeq	r5, r0, lr, lsr #13
   13378:	andeq	r5, r0, fp, lsl #14
   1337c:	andeq	r7, r0, r5, asr #32
   13380:	andeq	r5, r0, lr, ror #16
   13384:	andeq	r5, r0, fp, asr #17
   13388:	andeq	r7, r0, r5, lsr #32
   1338c:	andeq	r5, r0, lr, asr #16
   13390:	andeq	r5, r0, fp, lsr #17
   13394:	andeq	r6, r0, r5, ror #28
   13398:	andeq	r5, r0, lr, lsl #13
   1339c:	andeq	r5, r0, fp, ror #13
   133a0:	andeq	r5, r0, r8, asr #18
   133a4:	andeq	r5, r0, sl, ror #18
   133a8:	ldrdeq	r5, [r0], -r8
   133ac:	andeq	r6, r0, r5, lsr #28
   133b0:	andeq	r5, r0, lr, asr #12
   133b4:	andeq	r5, r0, fp, lsr #13
   133b8:	andeq	r6, r0, r5, lsl #28
   133bc:	andeq	r5, r0, lr, lsr #12
   133c0:	andeq	r5, r0, fp, lsl #13

000133c4 <main@@Base>:
   133c4:	push	{r4, r5, r6, sl, fp, lr}
   133c8:	add	fp, sp, #16
   133cc:	sub	sp, sp, #240	; 0xf0
   133d0:	add	r4, sp, #8
   133d4:	mov	r0, r4
   133d8:	bl	13648 <flatcc_builder_init@@Base>
   133dc:	mov	r0, r4
   133e0:	mov	r1, #0
   133e4:	bl	12514 <create_monster_bottom_up@@Base>
   133e8:	add	r5, sp, #4
   133ec:	mov	r0, r4
   133f0:	mov	r1, r5
   133f4:	bl	1819c <flatcc_builder_finalize_aligned_buffer@@Base>
   133f8:	bl	182dc <flatcc_builder_aligned_free@@Base>
   133fc:	mov	r0, r4
   13400:	bl	137f4 <flatcc_builder_reset@@Base>
   13404:	mov	r0, r4
   13408:	mov	r1, #1
   1340c:	bl	12514 <create_monster_bottom_up@@Base>
   13410:	mov	r0, r4
   13414:	mov	r1, r5
   13418:	bl	1819c <flatcc_builder_finalize_aligned_buffer@@Base>
   1341c:	mov	r6, r0
   13420:	bl	12d74 <access_monster_buffer@@Base>
   13424:	mov	r0, r6
   13428:	bl	182dc <flatcc_builder_aligned_free@@Base>
   1342c:	mov	r0, r4
   13430:	bl	137f4 <flatcc_builder_reset@@Base>
   13434:	mov	r0, r4
   13438:	bl	12a24 <create_monster_top_down@@Base>
   1343c:	mov	r0, r4
   13440:	mov	r1, r5
   13444:	bl	180bc <flatcc_builder_finalize_buffer@@Base>
   13448:	mov	r5, r0
   1344c:	bl	12d74 <access_monster_buffer@@Base>
   13450:	mov	r0, r5
   13454:	bl	1237c <free@plt>
   13458:	mov	r0, r4
   1345c:	bl	139b8 <flatcc_builder_clear@@Base>
   13460:	ldr	r0, [pc, #16]	; 13478 <main@@Base+0xb4>
   13464:	add	r0, pc, r0
   13468:	bl	123a0 <puts@plt>
   1346c:	mov	r0, #0
   13470:	sub	sp, fp, #16
   13474:	pop	{r4, r5, r6, sl, fp, pc}
   13478:	andeq	r5, r0, r1, asr #16

0001347c <flatcc_builder_default_alloc@@Base>:
   1347c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13480:	add	fp, sp, #24
   13484:	mov	r4, r1
   13488:	cmp	r2, #0
   1348c:	beq	134d8 <flatcc_builder_default_alloc@@Base+0x5c>
   13490:	ldr	r0, [fp, #8]
   13494:	mov	r8, r3
   13498:	sub	r1, r0, #1
   1349c:	cmp	r1, #6
   134a0:	bhi	13508 <flatcc_builder_default_alloc@@Base+0x8c>
   134a4:	add	r3, pc, #8
   134a8:	mov	r0, #256	; 0x100
   134ac:	ldr	r1, [r3, r1, lsl #2]
   134b0:	add	pc, r3, r1
   134b4:	andeq	r0, r0, r8, rrx
   134b8:	andeq	r0, r0, r4, asr r0
   134bc:	andeq	r0, r0, r4, asr r0
   134c0:	andeq	r0, r0, ip, lsl r0
   134c4:	andeq	r0, r0, ip, asr r0
   134c8:	andeq	r0, r0, r4, asr r0
   134cc:	andeq	r0, r0, r4, rrx
   134d0:	mov	r0, #288	; 0x120
   134d4:	b	1351c <flatcc_builder_default_alloc@@Base+0xa0>
   134d8:	ldr	r0, [r4]
   134dc:	cmp	r0, #0
   134e0:	beq	134fc <flatcc_builder_default_alloc@@Base+0x80>
   134e4:	bl	1237c <free@plt>
   134e8:	mov	r6, #0
   134ec:	mov	r0, r6
   134f0:	str	r6, [r4]
   134f4:	str	r6, [r4, #4]
   134f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   134fc:	mov	r6, #0
   13500:	mov	r0, r6
   13504:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13508:	mov	r0, #32
   1350c:	b	1351c <flatcc_builder_default_alloc@@Base+0xa0>
   13510:	mov	r0, r2
   13514:	b	1351c <flatcc_builder_default_alloc@@Base+0xa0>
   13518:	mov	r0, #64	; 0x40
   1351c:	mov	r7, r0
   13520:	lsl	r0, r0, #1
   13524:	cmp	r7, r2
   13528:	bcc	1351c <flatcc_builder_default_alloc@@Base+0xa0>
   1352c:	ldr	r0, [r4, #4]
   13530:	mov	r6, #0
   13534:	cmp	r0, r2
   13538:	lsrcs	r0, r0, #1
   1353c:	cmpcs	r0, r7
   13540:	bcs	13584 <flatcc_builder_default_alloc@@Base+0x108>
   13544:	ldr	r0, [r4]
   13548:	mov	r1, r7
   1354c:	bl	12394 <realloc@plt>
   13550:	cmp	r0, #0
   13554:	beq	1358c <flatcc_builder_default_alloc@@Base+0x110>
   13558:	mov	r5, r0
   1355c:	cmp	r8, #0
   13560:	beq	13580 <flatcc_builder_default_alloc@@Base+0x104>
   13564:	ldr	r1, [r4, #4]
   13568:	cmp	r7, r1
   1356c:	bls	13580 <flatcc_builder_default_alloc@@Base+0x104>
   13570:	add	r0, r5, r1
   13574:	sub	r2, r7, r1
   13578:	mov	r1, #0
   1357c:	bl	123f4 <memset@plt>
   13580:	stm	r4, {r5, r7}
   13584:	mov	r0, r6
   13588:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1358c:	mvn	r6, #0
   13590:	mov	r0, r6
   13594:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00013598 <flatcc_builder_flush_vtable_cache@@Base>:
   13598:	push	{r4, r5, fp, lr}
   1359c:	add	fp, sp, #8
   135a0:	mov	r4, r0
   135a4:	ldr	r0, [r0, #116]	; 0x74
   135a8:	cmp	r0, #0
   135ac:	popeq	{r4, r5, fp, pc}
   135b0:	ldr	r0, [r4, #92]	; 0x5c
   135b4:	ldr	r2, [r4, #96]	; 0x60
   135b8:	mov	r1, #0
   135bc:	mov	r5, #0
   135c0:	bl	123f4 <memset@plt>
   135c4:	mov	r0, #16
   135c8:	str	r5, [r4, #120]	; 0x78
   135cc:	str	r0, [r4, #124]	; 0x7c
   135d0:	pop	{r4, r5, fp, pc}

000135d4 <flatcc_builder_custom_init@@Base>:
   135d4:	push	{r4, r5, r6, r7, fp, lr}
   135d8:	add	fp, sp, #16
   135dc:	mov	r6, r2
   135e0:	mov	r7, r1
   135e4:	mov	r1, #0
   135e8:	mov	r2, #232	; 0xe8
   135ec:	mov	r5, r3
   135f0:	mov	r4, r0
   135f4:	bl	123f4 <memset@plt>
   135f8:	ldr	r0, [fp, #8]
   135fc:	cmp	r7, #0
   13600:	bne	13618 <flatcc_builder_custom_init@@Base+0x44>
   13604:	mov	r1, #1
   13608:	add	r6, r4, #188	; 0xbc
   1360c:	str	r1, [r4, #184]	; 0xb8
   13610:	ldr	r7, [pc, #40]	; 13640 <flatcc_builder_custom_init@@Base+0x6c>
   13614:	ldr	r7, [pc, r7]
   13618:	ldr	r1, [pc, #36]	; 13644 <flatcc_builder_custom_init@@Base+0x70>
   1361c:	cmp	r5, #0
   13620:	ldr	r1, [pc, r1]
   13624:	str	r6, [r4, #36]	; 0x24
   13628:	str	r0, [r4, #40]	; 0x28
   1362c:	mov	r0, #0
   13630:	movne	r1, r5
   13634:	str	r7, [r4, #44]	; 0x2c
   13638:	str	r1, [r4, #48]	; 0x30
   1363c:	pop	{r4, r5, r6, r7, fp, pc}
   13640:	andeq	r7, r1, r8, lsr sl
   13644:	andeq	r7, r1, r8, lsr #20

00013648 <flatcc_builder_init@@Base>:
   13648:	push	{r4, r5, fp, lr}
   1364c:	add	fp, sp, #8
   13650:	mov	r1, #0
   13654:	mov	r2, #232	; 0xe8
   13658:	mov	r4, r0
   1365c:	mov	r5, #0
   13660:	bl	123f4 <memset@plt>
   13664:	mov	r0, #1
   13668:	str	r0, [r4, #184]	; 0xb8
   1366c:	add	r0, r4, #188	; 0xbc
   13670:	ldr	r1, [pc, #32]	; 13698 <flatcc_builder_init@@Base+0x50>
   13674:	ldr	r1, [pc, r1]
   13678:	ldr	r2, [pc, #28]	; 1369c <flatcc_builder_init@@Base+0x54>
   1367c:	ldr	r2, [pc, r2]
   13680:	str	r0, [r4, #36]	; 0x24
   13684:	mov	r0, #0
   13688:	str	r5, [r4, #40]	; 0x28
   1368c:	str	r2, [r4, #44]	; 0x2c
   13690:	str	r1, [r4, #48]	; 0x30
   13694:	pop	{r4, r5, fp, pc}
   13698:	ldrdeq	r7, [r1], -r4
   1369c:	ldrdeq	r7, [r1], -r0

000136a0 <flatcc_builder_custom_reset@@Base>:
   136a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136a4:	add	fp, sp, #28
   136a8:	sub	sp, sp, #4
   136ac:	mov	r9, r2
   136b0:	mov	r8, r1
   136b4:	mov	sl, r0
   136b8:	add	r7, r0, #52	; 0x34
   136bc:	mov	r5, #0
   136c0:	b	136e0 <flatcc_builder_custom_reset@@Base+0x40>
   136c4:	ldr	r0, [r6, #56]	; 0x38
   136c8:	cmp	r0, #0
   136cc:	bne	137c8 <flatcc_builder_custom_reset@@Base+0x128>
   136d0:	add	r5, r5, #1
   136d4:	add	r7, r7, #8
   136d8:	cmp	r5, #8
   136dc:	beq	13734 <flatcc_builder_custom_reset@@Base+0x94>
   136e0:	add	r6, sl, r5, lsl #3
   136e4:	ldr	r0, [r6, #52]	; 0x34
   136e8:	cmp	r0, #0
   136ec:	beq	136c4 <flatcc_builder_custom_reset@@Base+0x24>
   136f0:	cmp	r9, #0
   136f4:	cmpne	r5, #5
   136f8:	beq	13724 <flatcc_builder_custom_reset@@Base+0x84>
   136fc:	ldr	r0, [sl, #40]	; 0x28
   13700:	ldr	r4, [sl, #48]	; 0x30
   13704:	mov	r1, r7
   13708:	mov	r2, #1
   1370c:	mov	r3, #1
   13710:	str	r5, [sp]
   13714:	blx	r4
   13718:	cmp	r0, #0
   1371c:	bne	137b8 <flatcc_builder_custom_reset@@Base+0x118>
   13720:	ldr	r0, [r6, #52]	; 0x34
   13724:	ldr	r2, [r6, #56]	; 0x38
   13728:	mov	r1, #0
   1372c:	bl	123f4 <memset@plt>
   13730:	b	136d0 <flatcc_builder_custom_reset@@Base+0x30>
   13734:	mov	r0, #0
   13738:	vmov.i32	q8, #0	; 0x00000000
   1373c:	mov	r5, #0
   13740:	str	r0, [sl, #120]	; 0x78
   13744:	ldr	r1, [sl, #124]	; 0x7c
   13748:	cmp	r1, #0
   1374c:	movne	r1, #16
   13750:	strne	r1, [sl, #124]	; 0x7c
   13754:	add	r1, sl, #148	; 0x94
   13758:	str	r0, [sl, #136]	; 0x88
   1375c:	str	r0, [sl, #140]	; 0x8c
   13760:	strh	r0, [sl, #128]	; 0x80
   13764:	str	r0, [sl, #32]
   13768:	cmp	r8, #0
   1376c:	vst1.32	{d16-d17}, [r1]
   13770:	ldr	r2, [sl, #60]	; 0x3c
   13774:	ldr	r1, [sl, #52]	; 0x34
   13778:	ldr	r3, [sl, #76]	; 0x4c
   1377c:	str	r2, [sl, #16]
   13780:	str	r0, [sl, #20]
   13784:	str	r0, [sl, #24]
   13788:	movne	r0, #0
   1378c:	str	r3, [sl]
   13790:	str	r1, [sl, #4]
   13794:	strne	r0, [sl, #172]	; 0xac
   13798:	strne	r0, [sl, #176]	; 0xb0
   1379c:	strne	r0, [sl, #180]	; 0xb4
   137a0:	ldr	r0, [sl, #184]	; 0xb8
   137a4:	cmp	r0, #0
   137a8:	beq	137bc <flatcc_builder_custom_reset@@Base+0x11c>
   137ac:	add	r0, sl, #188	; 0xbc
   137b0:	bl	1833c <flatcc_emitter_reset@@Base>
   137b4:	b	137bc <flatcc_builder_custom_reset@@Base+0x11c>
   137b8:	mvn	r5, #0
   137bc:	mov	r0, r5
   137c0:	sub	sp, fp, #28
   137c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137c8:	ldr	r0, [pc, #24]	; 137e8 <flatcc_builder_custom_reset@@Base+0x148>
   137cc:	ldr	r1, [pc, #24]	; 137ec <flatcc_builder_custom_reset@@Base+0x14c>
   137d0:	ldr	r3, [pc, #24]	; 137f0 <flatcc_builder_custom_reset@@Base+0x150>
   137d4:	movw	r2, #434	; 0x1b2
   137d8:	add	r0, pc, r0
   137dc:	add	r1, pc, r1
   137e0:	add	r3, pc, r3
   137e4:	bl	12418 <__assert_fail@plt>
   137e8:	andeq	r5, r0, r6, lsl r7
   137ec:	andeq	r5, r0, r4, lsr #14
   137f0:	andeq	r5, r0, sp, ror r7

000137f4 <flatcc_builder_reset@@Base>:
   137f4:	push	{r4, sl, fp, lr}
   137f8:	add	fp, sp, #8
   137fc:	mov	r4, r0
   13800:	ldr	r0, [r0, #52]	; 0x34
   13804:	ldr	r2, [r4, #56]	; 0x38
   13808:	cmp	r0, #0
   1380c:	beq	1381c <flatcc_builder_reset@@Base+0x28>
   13810:	mov	r1, #0
   13814:	bl	123f4 <memset@plt>
   13818:	b	13824 <flatcc_builder_reset@@Base+0x30>
   1381c:	cmp	r2, #0
   13820:	bne	1398c <flatcc_builder_reset@@Base+0x198>
   13824:	ldr	r0, [r4, #60]	; 0x3c
   13828:	ldr	r2, [r4, #64]	; 0x40
   1382c:	cmp	r0, #0
   13830:	beq	13840 <flatcc_builder_reset@@Base+0x4c>
   13834:	mov	r1, #0
   13838:	bl	123f4 <memset@plt>
   1383c:	b	13848 <flatcc_builder_reset@@Base+0x54>
   13840:	cmp	r2, #0
   13844:	bne	1398c <flatcc_builder_reset@@Base+0x198>
   13848:	ldr	r0, [r4, #68]	; 0x44
   1384c:	ldr	r2, [r4, #72]	; 0x48
   13850:	cmp	r0, #0
   13854:	beq	13864 <flatcc_builder_reset@@Base+0x70>
   13858:	mov	r1, #0
   1385c:	bl	123f4 <memset@plt>
   13860:	b	1386c <flatcc_builder_reset@@Base+0x78>
   13864:	cmp	r2, #0
   13868:	bne	1398c <flatcc_builder_reset@@Base+0x198>
   1386c:	ldr	r0, [r4, #76]	; 0x4c
   13870:	ldr	r2, [r4, #80]	; 0x50
   13874:	cmp	r0, #0
   13878:	beq	13888 <flatcc_builder_reset@@Base+0x94>
   1387c:	mov	r1, #0
   13880:	bl	123f4 <memset@plt>
   13884:	b	13890 <flatcc_builder_reset@@Base+0x9c>
   13888:	cmp	r2, #0
   1388c:	bne	1398c <flatcc_builder_reset@@Base+0x198>
   13890:	ldr	r0, [r4, #84]	; 0x54
   13894:	ldr	r2, [r4, #88]	; 0x58
   13898:	cmp	r0, #0
   1389c:	beq	138ac <flatcc_builder_reset@@Base+0xb8>
   138a0:	mov	r1, #0
   138a4:	bl	123f4 <memset@plt>
   138a8:	b	138b4 <flatcc_builder_reset@@Base+0xc0>
   138ac:	cmp	r2, #0
   138b0:	bne	1398c <flatcc_builder_reset@@Base+0x198>
   138b4:	ldr	r0, [r4, #92]	; 0x5c
   138b8:	ldr	r2, [r4, #96]	; 0x60
   138bc:	cmp	r0, #0
   138c0:	beq	138d0 <flatcc_builder_reset@@Base+0xdc>
   138c4:	mov	r1, #0
   138c8:	bl	123f4 <memset@plt>
   138cc:	b	138d8 <flatcc_builder_reset@@Base+0xe4>
   138d0:	cmp	r2, #0
   138d4:	bne	1398c <flatcc_builder_reset@@Base+0x198>
   138d8:	ldr	r0, [r4, #100]	; 0x64
   138dc:	ldr	r2, [r4, #104]	; 0x68
   138e0:	cmp	r0, #0
   138e4:	beq	138f4 <flatcc_builder_reset@@Base+0x100>
   138e8:	mov	r1, #0
   138ec:	bl	123f4 <memset@plt>
   138f0:	b	138fc <flatcc_builder_reset@@Base+0x108>
   138f4:	cmp	r2, #0
   138f8:	bne	1398c <flatcc_builder_reset@@Base+0x198>
   138fc:	ldr	r0, [r4, #108]	; 0x6c
   13900:	ldr	r2, [r4, #112]	; 0x70
   13904:	cmp	r0, #0
   13908:	beq	13918 <flatcc_builder_reset@@Base+0x124>
   1390c:	mov	r1, #0
   13910:	bl	123f4 <memset@plt>
   13914:	b	13920 <flatcc_builder_reset@@Base+0x12c>
   13918:	cmp	r2, #0
   1391c:	bne	1398c <flatcc_builder_reset@@Base+0x198>
   13920:	mov	r0, #0
   13924:	str	r0, [r4, #120]	; 0x78
   13928:	ldr	r1, [r4, #124]	; 0x7c
   1392c:	cmp	r1, #0
   13930:	movne	r1, #16
   13934:	strne	r1, [r4, #124]	; 0x7c
   13938:	vmov.i32	q8, #0	; 0x00000000
   1393c:	add	r1, r4, #148	; 0x94
   13940:	str	r0, [r4, #136]	; 0x88
   13944:	str	r0, [r4, #140]	; 0x8c
   13948:	strh	r0, [r4, #128]	; 0x80
   1394c:	str	r0, [r4, #32]
   13950:	vst1.32	{d16-d17}, [r1]
   13954:	ldr	r1, [r4, #184]	; 0xb8
   13958:	ldr	r2, [r4, #60]	; 0x3c
   1395c:	ldr	r3, [r4, #76]	; 0x4c
   13960:	ldr	ip, [r4, #52]	; 0x34
   13964:	cmp	r1, #0
   13968:	str	r2, [r4, #16]
   1396c:	str	r0, [r4, #20]
   13970:	str	r0, [r4, #24]
   13974:	stm	r4, {r3, ip}
   13978:	beq	13984 <flatcc_builder_reset@@Base+0x190>
   1397c:	add	r0, r4, #188	; 0xbc
   13980:	bl	1833c <flatcc_emitter_reset@@Base>
   13984:	mov	r0, #0
   13988:	pop	{r4, sl, fp, pc}
   1398c:	ldr	r0, [pc, #24]	; 139ac <flatcc_builder_reset@@Base+0x1b8>
   13990:	ldr	r1, [pc, #24]	; 139b0 <flatcc_builder_reset@@Base+0x1bc>
   13994:	ldr	r3, [pc, #24]	; 139b4 <flatcc_builder_reset@@Base+0x1c0>
   13998:	movw	r2, #434	; 0x1b2
   1399c:	add	r0, pc, r0
   139a0:	add	r1, pc, r1
   139a4:	add	r3, pc, r3
   139a8:	bl	12418 <__assert_fail@plt>
   139ac:	andeq	r5, r0, r2, asr r5
   139b0:	andeq	r5, r0, r0, ror #10
   139b4:			; <UNDEFINED> instruction: 0x000055b9

000139b8 <flatcc_builder_clear@@Base>:
   139b8:	push	{r4, sl, fp, lr}
   139bc:	add	fp, sp, #8
   139c0:	sub	sp, sp, #8
   139c4:	mov	r4, r0
   139c8:	ldr	r0, [r0, #40]	; 0x28
   139cc:	mov	r1, #0
   139d0:	mov	r2, #0
   139d4:	mov	r3, #0
   139d8:	ldr	ip, [r4, #48]	; 0x30
   139dc:	str	r1, [sp]
   139e0:	add	r1, r4, #52	; 0x34
   139e4:	blx	ip
   139e8:	ldr	r0, [r4, #40]	; 0x28
   139ec:	ldr	ip, [r4, #48]	; 0x30
   139f0:	mov	r1, #1
   139f4:	mov	r2, #0
   139f8:	mov	r3, #0
   139fc:	str	r1, [sp]
   13a00:	add	r1, r4, #60	; 0x3c
   13a04:	blx	ip
   13a08:	ldr	r0, [r4, #40]	; 0x28
   13a0c:	ldr	ip, [r4, #48]	; 0x30
   13a10:	mov	r1, #2
   13a14:	mov	r2, #0
   13a18:	mov	r3, #0
   13a1c:	str	r1, [sp]
   13a20:	add	r1, r4, #68	; 0x44
   13a24:	blx	ip
   13a28:	ldr	r0, [r4, #40]	; 0x28
   13a2c:	ldr	ip, [r4, #48]	; 0x30
   13a30:	mov	r1, #3
   13a34:	mov	r2, #0
   13a38:	mov	r3, #0
   13a3c:	str	r1, [sp]
   13a40:	add	r1, r4, #76	; 0x4c
   13a44:	blx	ip
   13a48:	ldr	r0, [r4, #40]	; 0x28
   13a4c:	ldr	ip, [r4, #48]	; 0x30
   13a50:	mov	r1, #4
   13a54:	mov	r2, #0
   13a58:	mov	r3, #0
   13a5c:	str	r1, [sp]
   13a60:	add	r1, r4, #84	; 0x54
   13a64:	blx	ip
   13a68:	ldr	r0, [r4, #40]	; 0x28
   13a6c:	ldr	ip, [r4, #48]	; 0x30
   13a70:	mov	r1, #5
   13a74:	mov	r2, #0
   13a78:	mov	r3, #0
   13a7c:	str	r1, [sp]
   13a80:	add	r1, r4, #92	; 0x5c
   13a84:	blx	ip
   13a88:	ldr	r0, [r4, #40]	; 0x28
   13a8c:	ldr	ip, [r4, #48]	; 0x30
   13a90:	mov	r1, #6
   13a94:	mov	r2, #0
   13a98:	mov	r3, #0
   13a9c:	str	r1, [sp]
   13aa0:	add	r1, r4, #100	; 0x64
   13aa4:	blx	ip
   13aa8:	ldr	r0, [r4, #40]	; 0x28
   13aac:	ldr	ip, [r4, #48]	; 0x30
   13ab0:	mov	r1, #7
   13ab4:	mov	r2, #0
   13ab8:	mov	r3, #0
   13abc:	str	r1, [sp]
   13ac0:	add	r1, r4, #108	; 0x6c
   13ac4:	blx	ip
   13ac8:	ldr	r0, [r4, #184]	; 0xb8
   13acc:	cmp	r0, #0
   13ad0:	beq	13adc <flatcc_builder_clear@@Base+0x124>
   13ad4:	add	r0, r4, #188	; 0xbc
   13ad8:	bl	18408 <flatcc_emitter_clear@@Base>
   13adc:	mov	r0, r4
   13ae0:	mov	r1, #0
   13ae4:	mov	r2, #232	; 0xe8
   13ae8:	sub	sp, fp, #8
   13aec:	pop	{r4, sl, fp, lr}
   13af0:	b	123f4 <memset@plt>

00013af4 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13af4:	push	{r4, r5, r6, r7, fp, lr}
   13af8:	add	fp, sp, #16
   13afc:	sub	sp, sp, #8
   13b00:	mov	r4, r0
   13b04:	ldr	r0, [r0, #112]	; 0x70
   13b08:	add	r1, r1, #7
   13b0c:	ldr	r7, [r4, #228]	; 0xe4
   13b10:	bic	r5, r1, #3
   13b14:	add	r6, r4, #108	; 0x6c
   13b18:	add	r2, r7, r5
   13b1c:	cmp	r2, r0
   13b20:	bls	13b48 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   13b24:	ldr	r0, [r4, #40]	; 0x28
   13b28:	ldr	ip, [r4, #48]	; 0x30
   13b2c:	mov	r1, #7
   13b30:	mov	r3, #0
   13b34:	str	r1, [sp]
   13b38:	mov	r1, r6
   13b3c:	blx	ip
   13b40:	cmp	r0, #0
   13b44:	bne	13b94 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   13b48:	ldr	r0, [r6]
   13b4c:	adds	r6, r0, r7
   13b50:	beq	13b84 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   13b54:	mov	r0, r6
   13b58:	mov	r1, #0
   13b5c:	mov	r2, r5
   13b60:	bl	123f4 <memset@plt>
   13b64:	ldr	r0, [r4, #224]	; 0xe0
   13b68:	str	r0, [r6], #4
   13b6c:	ldr	r0, [r4, #228]	; 0xe4
   13b70:	add	r1, r0, #4
   13b74:	add	r0, r0, r5
   13b78:	str	r1, [r4, #224]	; 0xe0
   13b7c:	str	r0, [r4, #228]	; 0xe4
   13b80:	b	13b88 <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   13b84:	mov	r6, #0
   13b88:	mov	r0, r6
   13b8c:	sub	sp, fp, #16
   13b90:	pop	{r4, r5, r6, r7, fp, pc}
   13b94:	ldr	r0, [pc, #24]	; 13bb4 <flatcc_builder_enter_user_frame_ptr@@Base+0xc0>
   13b98:	ldr	r1, [pc, #24]	; 13bb8 <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   13b9c:	ldr	r3, [pc, #24]	; 13bbc <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   13ba0:	mov	r2, #308	; 0x134
   13ba4:	add	r0, pc, r0
   13ba8:	add	r1, pc, r1
   13bac:	add	r3, pc, r3
   13bb0:	bl	12418 <__assert_fail@plt>
   13bb4:	andeq	r6, r0, r9, lsl r5
   13bb8:	andeq	r5, r0, r8, asr r3
   13bbc:	andeq	r6, r0, fp, asr #6

00013bc0 <flatcc_builder_enter_user_frame@@Base>:
   13bc0:	push	{r4, r5, r6, r7, fp, lr}
   13bc4:	add	fp, sp, #16
   13bc8:	sub	sp, sp, #8
   13bcc:	mov	r4, r0
   13bd0:	ldr	r0, [r0, #112]	; 0x70
   13bd4:	add	r1, r1, #7
   13bd8:	ldr	r7, [r4, #228]	; 0xe4
   13bdc:	bic	r5, r1, #3
   13be0:	add	r6, r4, #108	; 0x6c
   13be4:	add	r2, r7, r5
   13be8:	cmp	r2, r0
   13bec:	bls	13c14 <flatcc_builder_enter_user_frame@@Base+0x54>
   13bf0:	ldr	r0, [r4, #40]	; 0x28
   13bf4:	ldr	ip, [r4, #48]	; 0x30
   13bf8:	mov	r1, #7
   13bfc:	mov	r3, #0
   13c00:	str	r1, [sp]
   13c04:	mov	r1, r6
   13c08:	blx	ip
   13c0c:	cmp	r0, #0
   13c10:	bne	13c60 <flatcc_builder_enter_user_frame@@Base+0xa0>
   13c14:	ldr	r0, [r6]
   13c18:	adds	r6, r0, r7
   13c1c:	beq	13c54 <flatcc_builder_enter_user_frame@@Base+0x94>
   13c20:	mov	r0, r6
   13c24:	mov	r1, #0
   13c28:	mov	r2, r5
   13c2c:	bl	123f4 <memset@plt>
   13c30:	ldr	r0, [r4, #224]	; 0xe0
   13c34:	str	r0, [r6]
   13c38:	ldr	r1, [r4, #228]	; 0xe4
   13c3c:	add	r0, r1, #4
   13c40:	add	r1, r1, r5
   13c44:	str	r0, [r4, #224]	; 0xe0
   13c48:	str	r1, [r4, #228]	; 0xe4
   13c4c:	sub	sp, fp, #16
   13c50:	pop	{r4, r5, r6, r7, fp, pc}
   13c54:	mov	r0, #0
   13c58:	sub	sp, fp, #16
   13c5c:	pop	{r4, r5, r6, r7, fp, pc}
   13c60:	ldr	r0, [pc, #24]	; 13c80 <flatcc_builder_enter_user_frame@@Base+0xc0>
   13c64:	ldr	r1, [pc, #24]	; 13c84 <flatcc_builder_enter_user_frame@@Base+0xc4>
   13c68:	ldr	r3, [pc, #24]	; 13c88 <flatcc_builder_enter_user_frame@@Base+0xc8>
   13c6c:	mov	r2, #308	; 0x134
   13c70:	add	r0, pc, r0
   13c74:	add	r1, pc, r1
   13c78:	add	r3, pc, r3
   13c7c:	bl	12418 <__assert_fail@plt>
   13c80:	andeq	r6, r0, sp, asr #8
   13c84:	andeq	r5, r0, ip, lsl #5
   13c88:	andeq	r6, r0, pc, ror r2

00013c8c <flatcc_builder_exit_user_frame@@Base>:
   13c8c:	push	{fp, lr}
   13c90:	mov	fp, sp
   13c94:	ldr	r1, [r0, #224]	; 0xe0
   13c98:	cmp	r1, #0
   13c9c:	subne	r2, r1, #4
   13ca0:	strne	r2, [r0, #228]	; 0xe4
   13ca4:	ldrne	r2, [r0, #108]	; 0x6c
   13ca8:	addne	r1, r2, r1
   13cac:	ldrne	r1, [r1, #-4]
   13cb0:	strne	r1, [r0, #224]	; 0xe0
   13cb4:	movne	r0, r1
   13cb8:	popne	{fp, pc}
   13cbc:	ldr	r0, [pc, #24]	; 13cdc <flatcc_builder_exit_user_frame@@Base+0x50>
   13cc0:	ldr	r1, [pc, #24]	; 13ce0 <flatcc_builder_exit_user_frame@@Base+0x54>
   13cc4:	ldr	r3, [pc, #24]	; 13ce4 <flatcc_builder_exit_user_frame@@Base+0x58>
   13cc8:	movw	r2, #542	; 0x21e
   13ccc:	add	r0, pc, r0
   13cd0:	add	r1, pc, r1
   13cd4:	add	r3, pc, r3
   13cd8:	bl	12418 <__assert_fail@plt>
   13cdc:	andeq	r5, r0, pc, asr #5
   13ce0:	andeq	r5, r0, r0, lsr r2
   13ce4:	andeq	r5, r0, r0, ror #5

00013ce8 <flatcc_builder_exit_user_frame_at@@Base>:
   13ce8:	push	{fp, lr}
   13cec:	mov	fp, sp
   13cf0:	ldr	r2, [r0, #224]	; 0xe0
   13cf4:	cmp	r2, r1
   13cf8:	bcc	13d44 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   13cfc:	cmp	r1, #0
   13d00:	str	r1, [r0, #224]	; 0xe0
   13d04:	subne	r2, r1, #4
   13d08:	strne	r2, [r0, #228]	; 0xe4
   13d0c:	ldrne	r2, [r0, #108]	; 0x6c
   13d10:	addne	r1, r2, r1
   13d14:	ldrne	r1, [r1, #-4]
   13d18:	strne	r1, [r0, #224]	; 0xe0
   13d1c:	movne	r0, r1
   13d20:	popne	{fp, pc}
   13d24:	ldr	r0, [pc, #68]	; 13d70 <flatcc_builder_exit_user_frame_at@@Base+0x88>
   13d28:	ldr	r1, [pc, #68]	; 13d74 <flatcc_builder_exit_user_frame_at@@Base+0x8c>
   13d2c:	ldr	r3, [pc, #68]	; 13d78 <flatcc_builder_exit_user_frame_at@@Base+0x90>
   13d30:	movw	r2, #542	; 0x21e
   13d34:	add	r0, pc, r0
   13d38:	add	r1, pc, r1
   13d3c:	add	r3, pc, r3
   13d40:	bl	12418 <__assert_fail@plt>
   13d44:	ldr	r0, [pc, #24]	; 13d64 <flatcc_builder_exit_user_frame_at@@Base+0x7c>
   13d48:	ldr	r1, [pc, #24]	; 13d68 <flatcc_builder_exit_user_frame_at@@Base+0x80>
   13d4c:	ldr	r3, [pc, #24]	; 13d6c <flatcc_builder_exit_user_frame_at@@Base+0x84>
   13d50:	movw	r2, #551	; 0x227
   13d54:	add	r0, pc, r0
   13d58:	add	r1, pc, r1
   13d5c:	add	r3, pc, r3
   13d60:	bl	12418 <__assert_fail@plt>
   13d64:	muleq	r0, sl, r2
   13d68:	andeq	r5, r0, r8, lsr #3
   13d6c:			; <UNDEFINED> instruction: 0x000052b1
   13d70:	andeq	r5, r0, r7, ror #4
   13d74:	andeq	r5, r0, r8, asr #3
   13d78:	andeq	r5, r0, r8, ror r2

00013d7c <flatcc_builder_get_current_user_frame@@Base>:
   13d7c:	ldr	r0, [r0, #224]	; 0xe0
   13d80:	bx	lr

00013d84 <flatcc_builder_get_user_frame_ptr@@Base>:
   13d84:	ldr	r0, [r0, #108]	; 0x6c
   13d88:	add	r0, r0, r1
   13d8c:	bx	lr

00013d90 <flatcc_builder_embed_buffer@@Base>:
   13d90:	push	{r4, r5, r6, r7, fp, lr}
   13d94:	add	fp, sp, #16
   13d98:	sub	sp, sp, #88	; 0x58
   13d9c:	mov	r4, r0
   13da0:	ldr	r0, [fp, #8]
   13da4:	mov	r5, r3
   13da8:	mov	r7, r2
   13dac:	mov	r2, r1
   13db0:	sub	r1, fp, #18
   13db4:	strh	r0, [fp, #-18]	; 0xffffffee
   13db8:	mov	r0, r4
   13dbc:	ldr	r3, [r4, #152]	; 0x98
   13dc0:	cmp	r3, #0
   13dc4:	movwne	r3, #1
   13dc8:	bl	13f1c <flatcc_builder_embed_buffer@@Base+0x18c>
   13dcc:	ldr	r1, [fp, #12]
   13dd0:	ldrh	r3, [fp, #-18]	; 0xffffffee
   13dd4:	ldr	r0, [r4, #136]	; 0x88
   13dd8:	mov	r2, #0
   13ddc:	str	r2, [sp, #12]
   13de0:	str	r2, [sp, #8]
   13de4:	and	r1, r1, #2
   13de8:	sub	r3, r3, #1
   13dec:	add	r1, r5, r1, lsl #1
   13df0:	sub	r1, r0, r1
   13df4:	and	r3, r1, r3
   13df8:	add	r1, r3, r5
   13dfc:	str	r1, [fp, #-24]	; 0xffffffe8
   13e00:	ldr	r1, [r4, #152]	; 0x98
   13e04:	cmp	r1, #0
   13e08:	mov	r1, #0
   13e0c:	beq	13e2c <flatcc_builder_embed_buffer@@Base+0x9c>
   13e10:	mov	r1, #4
   13e14:	sub	r2, fp, #24
   13e18:	str	r1, [sp, #20]
   13e1c:	str	r2, [sp, #16]
   13e20:	mov	r2, #1
   13e24:	str	r1, [sp, #8]
   13e28:	str	r2, [sp, #12]
   13e2c:	cmp	r5, #0
   13e30:	beq	13e54 <flatcc_builder_embed_buffer@@Base+0xc4>
   13e34:	add	r6, sp, #8
   13e38:	add	r1, r1, r5
   13e3c:	add	r6, r6, r2, lsl #3
   13e40:	add	r2, r2, #1
   13e44:	str	r1, [sp, #8]
   13e48:	str	r7, [r6, #8]
   13e4c:	str	r5, [r6, #12]
   13e50:	str	r2, [sp, #12]
   13e54:	cmp	r3, #0
   13e58:	beq	13e84 <flatcc_builder_embed_buffer@@Base+0xf4>
   13e5c:	add	r1, r1, r3
   13e60:	add	r7, sp, #8
   13e64:	str	r1, [sp, #8]
   13e68:	add	r7, r7, r2, lsl #3
   13e6c:	add	r2, r2, #1
   13e70:	ldr	r6, [pc, #136]	; 13f00 <flatcc_builder_embed_buffer@@Base+0x170>
   13e74:	ldr	r6, [pc, r6]
   13e78:	str	r6, [r7, #8]
   13e7c:	str	r3, [r7, #12]
   13e80:	str	r2, [sp, #12]
   13e84:	cmp	r1, #0
   13e88:	ble	13ee0 <flatcc_builder_embed_buffer@@Base+0x150>
   13e8c:	sub	r5, r0, r1
   13e90:	ldr	r0, [r4, #36]	; 0x24
   13e94:	ldr	r7, [r4, #44]	; 0x2c
   13e98:	str	r1, [sp]
   13e9c:	add	r1, sp, #8
   13ea0:	add	r1, r1, #8
   13ea4:	mov	r3, r5
   13ea8:	blx	r7
   13eac:	cmp	r0, #0
   13eb0:	streq	r5, [r4, #136]	; 0x88
   13eb4:	moveq	r0, r5
   13eb8:	subeq	sp, fp, #16
   13ebc:	popeq	{r4, r5, r6, r7, fp, pc}
   13ec0:	ldr	r0, [pc, #72]	; 13f10 <flatcc_builder_embed_buffer@@Base+0x180>
   13ec4:	ldr	r1, [pc, #72]	; 13f14 <flatcc_builder_embed_buffer@@Base+0x184>
   13ec8:	ldr	r3, [pc, #72]	; 13f18 <flatcc_builder_embed_buffer@@Base+0x188>
   13ecc:	movw	r2, #651	; 0x28b
   13ed0:	add	r0, pc, r0
   13ed4:	add	r1, pc, r1
   13ed8:	add	r3, pc, r3
   13edc:	bl	12418 <__assert_fail@plt>
   13ee0:	ldr	r0, [pc, #28]	; 13f04 <flatcc_builder_embed_buffer@@Base+0x174>
   13ee4:	ldr	r1, [pc, #28]	; 13f08 <flatcc_builder_embed_buffer@@Base+0x178>
   13ee8:	ldr	r3, [pc, #28]	; 13f0c <flatcc_builder_embed_buffer@@Base+0x17c>
   13eec:	movw	r2, #647	; 0x287
   13ef0:	add	r0, pc, r0
   13ef4:	add	r1, pc, r1
   13ef8:	add	r3, pc, r3
   13efc:	bl	12418 <__assert_fail@plt>
   13f00:	andeq	r7, r1, ip, asr #3
   13f04:	andeq	r6, r0, sp, asr #3
   13f08:	andeq	r5, r0, ip
   13f0c:	andeq	r6, r0, r4, lsl #1
   13f10:	andeq	r6, r0, sp, ror #3
   13f14:	andeq	r5, r0, ip, lsr #32
   13f18:	andeq	r6, r0, r4, lsr #1
   13f1c:	push	{r4, sl, fp, lr}
   13f20:	add	fp, sp, #8
   13f24:	sub	sp, sp, #80	; 0x50
   13f28:	cmp	r2, #0
   13f2c:	bne	13f3c <flatcc_builder_embed_buffer@@Base+0x1ac>
   13f30:	ldrh	r2, [r0, #132]	; 0x84
   13f34:	cmp	r2, #0
   13f38:	movweq	r2, #1
   13f3c:	ldrh	r4, [r1]
   13f40:	cmp	r4, #4
   13f44:	movwcc	r4, #4
   13f48:	cmpcs	r4, r2
   13f4c:	bcs	13f5c <flatcc_builder_embed_buffer@@Base+0x1cc>
   13f50:	cmp	r4, r2
   13f54:	movcc	r4, r2
   13f58:	strh	r4, [r1]
   13f5c:	cmp	r3, #0
   13f60:	bne	13fd4 <flatcc_builder_embed_buffer@@Base+0x244>
   13f64:	ldr	r4, [r0, #140]	; 0x8c
   13f68:	sub	r1, r2, #1
   13f6c:	ands	r1, r4, r1
   13f70:	beq	13fd4 <flatcc_builder_embed_buffer@@Base+0x244>
   13f74:	mov	r2, #1
   13f78:	str	r1, [sp, #20]
   13f7c:	str	r1, [sp, #8]
   13f80:	cmn	r1, #1
   13f84:	str	r2, [sp, #12]
   13f88:	ldr	r2, [pc, #172]	; 1403c <flatcc_builder_embed_buffer@@Base+0x2ac>
   13f8c:	ldr	r2, [pc, r2]
   13f90:	str	r2, [sp, #16]
   13f94:	add	r2, r1, r4
   13f98:	str	r2, [r0, #140]	; 0x8c
   13f9c:	ble	13fdc <flatcc_builder_embed_buffer@@Base+0x24c>
   13fa0:	ldr	r2, [r0, #36]	; 0x24
   13fa4:	ldr	ip, [r0, #44]	; 0x2c
   13fa8:	add	r0, sp, #8
   13fac:	str	r1, [sp]
   13fb0:	mov	r3, r4
   13fb4:	add	r1, r0, #8
   13fb8:	mov	r0, r2
   13fbc:	mov	r2, #1
   13fc0:	blx	ip
   13fc4:	cmp	r0, #0
   13fc8:	bne	13ffc <flatcc_builder_embed_buffer@@Base+0x26c>
   13fcc:	cmn	r4, #1
   13fd0:	beq	1401c <flatcc_builder_embed_buffer@@Base+0x28c>
   13fd4:	sub	sp, fp, #8
   13fd8:	pop	{r4, sl, fp, pc}
   13fdc:	ldr	r0, [pc, #92]	; 14040 <flatcc_builder_embed_buffer@@Base+0x2b0>
   13fe0:	ldr	r1, [pc, #92]	; 14044 <flatcc_builder_embed_buffer@@Base+0x2b4>
   13fe4:	ldr	r3, [pc, #92]	; 14048 <flatcc_builder_embed_buffer@@Base+0x2b8>
   13fe8:	movw	r2, #673	; 0x2a1
   13fec:	add	r0, pc, r0
   13ff0:	add	r1, pc, r1
   13ff4:	add	r3, pc, r3
   13ff8:	bl	12418 <__assert_fail@plt>
   13ffc:	ldr	r0, [pc, #72]	; 1404c <flatcc_builder_embed_buffer@@Base+0x2bc>
   14000:	ldr	r1, [pc, #72]	; 14050 <flatcc_builder_embed_buffer@@Base+0x2c0>
   14004:	ldr	r3, [pc, #72]	; 14054 <flatcc_builder_embed_buffer@@Base+0x2c4>
   14008:	movw	r2, #677	; 0x2a5
   1400c:	add	r0, pc, r0
   14010:	add	r1, pc, r1
   14014:	add	r3, pc, r3
   14018:	bl	12418 <__assert_fail@plt>
   1401c:	ldr	r0, [pc, #52]	; 14058 <flatcc_builder_embed_buffer@@Base+0x2c8>
   14020:	ldr	r1, [pc, #52]	; 1405c <flatcc_builder_embed_buffer@@Base+0x2cc>
   14024:	ldr	r3, [pc, #52]	; 14060 <flatcc_builder_embed_buffer@@Base+0x2d0>
   14028:	movw	r2, #702	; 0x2be
   1402c:	add	r0, pc, r0
   14030:	add	r1, pc, r1
   14034:	add	r3, pc, r3
   14038:	bl	12418 <__assert_fail@plt>
   1403c:	strheq	r7, [r1], -r4
   14040:	ldrdeq	r6, [r0], -r1
   14044:	andeq	r4, r0, r0, lsl pc
   14048:	andeq	r6, r0, r4, asr #32
   1404c:	strheq	r6, [r0], -r1
   14050:	strdeq	r4, [r0], -r0
   14054:	andeq	r6, r0, r4, lsr #32
   14058:	muleq	r0, r1, r0
   1405c:	ldrdeq	r4, [r0], -r0
   14060:	andeq	r5, r0, r6, lsl #30

00014064 <flatcc_builder_create_buffer@@Base>:
   14064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14068:	add	fp, sp, #28
   1406c:	sub	sp, sp, #100	; 0x64
   14070:	ldr	sl, [fp, #12]
   14074:	mov	r4, r0
   14078:	ldr	r0, [fp, #8]
   1407c:	mov	r7, r1
   14080:	mov	r5, #0
   14084:	mov	r6, r3
   14088:	sub	r1, fp, #30
   1408c:	str	r5, [sp, #12]
   14090:	and	r9, sl, #1
   14094:	strh	r0, [fp, #-30]	; 0xffffffe2
   14098:	mov	r0, r4
   1409c:	mov	r3, r9
   140a0:	bl	13f1c <flatcc_builder_embed_buffer@@Base+0x18c>
   140a4:	ldrh	r0, [r4, #128]	; 0x80
   140a8:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   140ac:	str	r6, [sp, #8]
   140b0:	cmp	r0, r1
   140b4:	strhcc	r1, [r4, #128]	; 0x80
   140b8:	cmp	r7, #0
   140bc:	beq	140d8 <flatcc_builder_create_buffer@@Base+0x74>
   140c0:	ldr	r5, [r7]
   140c4:	cmp	r5, #0
   140c8:	str	r5, [sp, #12]
   140cc:	movwne	r5, #1
   140d0:	lsl	r7, r5, #2
   140d4:	b	140dc <flatcc_builder_create_buffer@@Base+0x78>
   140d8:	mov	r7, #0
   140dc:	ldr	r0, [r4, #136]	; 0x88
   140e0:	and	r2, sl, #2
   140e4:	mov	r3, #0
   140e8:	sub	r6, r1, #1
   140ec:	ands	ip, sl, #3
   140f0:	mov	sl, #4
   140f4:	mov	r1, #4
   140f8:	str	r3, [sp, #20]
   140fc:	str	r3, [sp, #16]
   14100:	sub	r2, r0, r2, lsl #1
   14104:	sub	r2, r2, r7
   14108:	sub	r2, r2, #4
   1410c:	beq	14130 <flatcc_builder_create_buffer@@Base+0xcc>
   14110:	mov	r1, #4
   14114:	sub	r3, fp, #40	; 0x28
   14118:	str	r1, [sp, #28]
   1411c:	str	r3, [sp, #24]
   14120:	str	r1, [sp, #16]
   14124:	mov	r3, #1
   14128:	mov	r1, #8
   1412c:	str	r3, [sp, #20]
   14130:	add	lr, sp, #16
   14134:	and	r6, r2, r6
   14138:	sub	r8, fp, #36	; 0x24
   1413c:	str	r1, [sp, #16]
   14140:	cmp	r5, #0
   14144:	add	r2, lr, r3, lsl #3
   14148:	str	r8, [r2, #8]
   1414c:	str	sl, [r2, #12]
   14150:	add	r2, r3, #1
   14154:	str	r2, [sp, #20]
   14158:	beq	1417c <flatcc_builder_create_buffer@@Base+0x118>
   1415c:	add	r2, lr, r2, lsl #3
   14160:	add	r1, r1, r7
   14164:	add	r5, sp, #12
   14168:	str	r1, [sp, #16]
   1416c:	str	r5, [r2, #8]
   14170:	str	r7, [r2, #12]
   14174:	orr	r2, r3, #2
   14178:	str	r2, [sp, #20]
   1417c:	cmp	r6, #0
   14180:	beq	141a8 <flatcc_builder_create_buffer@@Base+0x144>
   14184:	add	r1, r1, r6
   14188:	add	r3, lr, r2, lsl #3
   1418c:	add	r2, r2, #1
   14190:	str	r1, [sp, #16]
   14194:	ldr	r5, [pc, #220]	; 14278 <flatcc_builder_create_buffer@@Base+0x214>
   14198:	ldr	r5, [pc, r5]
   1419c:	str	r5, [r3, #8]
   141a0:	str	r6, [r3, #12]
   141a4:	str	r2, [sp, #20]
   141a8:	sub	r7, r0, r1
   141ac:	cmp	ip, #0
   141b0:	mov	r6, #144	; 0x90
   141b4:	ldr	r3, [sp, #8]
   141b8:	mov	r0, r7
   141bc:	addne	r0, r0, #4
   141c0:	cmp	r9, #0
   141c4:	movweq	r6, #140	; 0x8c
   141c8:	cmp	r1, #0
   141cc:	ldr	r6, [r4, r6]
   141d0:	sub	r3, r3, r0
   141d4:	str	r3, [fp, #-36]	; 0xffffffdc
   141d8:	sub	r0, r6, r0
   141dc:	str	r0, [fp, #-40]	; 0xffffffd8
   141e0:	ble	14238 <flatcc_builder_create_buffer@@Base+0x1d4>
   141e4:	ldr	r0, [r4, #36]	; 0x24
   141e8:	ldr	r6, [r4, #44]	; 0x2c
   141ec:	str	r1, [sp]
   141f0:	add	r1, lr, #8
   141f4:	mov	r3, r7
   141f8:	blx	r6
   141fc:	cmp	r0, #0
   14200:	bne	14258 <flatcc_builder_create_buffer@@Base+0x1f4>
   14204:	cmp	r7, #0
   14208:	str	r7, [r4, #136]	; 0x88
   1420c:	movne	r0, r7
   14210:	subne	sp, fp, #28
   14214:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14218:	ldr	r0, [pc, #116]	; 14294 <flatcc_builder_create_buffer@@Base+0x230>
   1421c:	ldr	r1, [pc, #116]	; 14298 <flatcc_builder_create_buffer@@Base+0x234>
   14220:	ldr	r3, [pc, #116]	; 1429c <flatcc_builder_create_buffer@@Base+0x238>
   14224:	mov	r2, #772	; 0x304
   14228:	add	r0, pc, r0
   1422c:	add	r1, pc, r1
   14230:	add	r3, pc, r3
   14234:	bl	12418 <__assert_fail@plt>
   14238:	ldr	r0, [pc, #60]	; 1427c <flatcc_builder_create_buffer@@Base+0x218>
   1423c:	ldr	r1, [pc, #60]	; 14280 <flatcc_builder_create_buffer@@Base+0x21c>
   14240:	ldr	r3, [pc, #60]	; 14284 <flatcc_builder_create_buffer@@Base+0x220>
   14244:	movw	r2, #647	; 0x287
   14248:	add	r0, pc, r0
   1424c:	add	r1, pc, r1
   14250:	add	r3, pc, r3
   14254:	bl	12418 <__assert_fail@plt>
   14258:	ldr	r0, [pc, #40]	; 14288 <flatcc_builder_create_buffer@@Base+0x224>
   1425c:	ldr	r1, [pc, #40]	; 1428c <flatcc_builder_create_buffer@@Base+0x228>
   14260:	ldr	r3, [pc, #40]	; 14290 <flatcc_builder_create_buffer@@Base+0x22c>
   14264:	movw	r2, #651	; 0x28b
   14268:	add	r0, pc, r0
   1426c:	add	r1, pc, r1
   14270:	add	r3, pc, r3
   14274:	bl	12418 <__assert_fail@plt>
   14278:	andeq	r6, r1, r8, lsr #29
   1427c:	andeq	r5, r0, r5, ror lr
   14280:			; <UNDEFINED> instruction: 0x00004cb4
   14284:	andeq	r5, r0, ip, lsr #26
   14288:	andeq	r5, r0, r5, asr lr
   1428c:	muleq	r0, r4, ip
   14290:	andeq	r5, r0, ip, lsl #26
   14294:	muleq	r0, r5, lr
   14298:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   1429c:	andeq	r4, r0, r2, lsr #28

000142a0 <flatcc_builder_create_struct@@Base>:
   142a0:	push	{r4, r5, r6, sl, fp, lr}
   142a4:	add	fp, sp, #16
   142a8:	sub	sp, sp, #80	; 0x50
   142ac:	cmp	r3, #0
   142b0:	beq	14388 <flatcc_builder_create_struct@@Base+0xe8>
   142b4:	mov	r5, r0
   142b8:	ldrh	r0, [r0, #128]	; 0x80
   142bc:	mov	r4, #0
   142c0:	cmp	r0, r3
   142c4:	strhcc	r3, [r5, #128]	; 0x80
   142c8:	sub	r3, r3, #1
   142cc:	cmp	r2, #0
   142d0:	ldr	r0, [r5, #136]	; 0x88
   142d4:	str	r4, [sp, #12]
   142d8:	str	r4, [sp, #8]
   142dc:	movne	r4, #1
   142e0:	strne	r2, [sp, #20]
   142e4:	strne	r1, [sp, #16]
   142e8:	strne	r2, [sp, #8]
   142ec:	strne	r4, [sp, #12]
   142f0:	sub	r6, r0, r2
   142f4:	and	r3, r6, r3
   142f8:	cmp	r3, #0
   142fc:	beq	14328 <flatcc_builder_create_struct@@Base+0x88>
   14300:	add	r2, r3, r2
   14304:	add	r1, sp, #8
   14308:	str	r2, [sp, #8]
   1430c:	add	r1, r1, r4, lsl #3
   14310:	add	r4, r4, #1
   14314:	ldr	r6, [pc, #172]	; 143c8 <flatcc_builder_create_struct@@Base+0x128>
   14318:	ldr	r6, [pc, r6]
   1431c:	str	r6, [r1, #8]
   14320:	str	r3, [r1, #12]
   14324:	str	r4, [sp, #12]
   14328:	cmp	r2, #0
   1432c:	ble	143a8 <flatcc_builder_create_struct@@Base+0x108>
   14330:	sub	r6, r0, r2
   14334:	ldr	r0, [r5, #36]	; 0x24
   14338:	ldr	ip, [r5, #44]	; 0x2c
   1433c:	add	r1, sp, #8
   14340:	str	r2, [sp]
   14344:	mov	r2, r4
   14348:	add	r1, r1, #8
   1434c:	mov	r3, r6
   14350:	blx	ip
   14354:	cmp	r0, #0
   14358:	streq	r6, [r5, #136]	; 0x88
   1435c:	moveq	r0, r6
   14360:	subeq	sp, fp, #16
   14364:	popeq	{r4, r5, r6, sl, fp, pc}
   14368:	ldr	r0, [pc, #116]	; 143e4 <flatcc_builder_create_struct@@Base+0x144>
   1436c:	ldr	r1, [pc, #116]	; 143e8 <flatcc_builder_create_struct@@Base+0x148>
   14370:	ldr	r3, [pc, #116]	; 143ec <flatcc_builder_create_struct@@Base+0x14c>
   14374:	movw	r2, #651	; 0x28b
   14378:	add	r0, pc, r0
   1437c:	add	r1, pc, r1
   14380:	add	r3, pc, r3
   14384:	bl	12418 <__assert_fail@plt>
   14388:	ldr	r0, [pc, #60]	; 143cc <flatcc_builder_create_struct@@Base+0x12c>
   1438c:	ldr	r1, [pc, #60]	; 143d0 <flatcc_builder_create_struct@@Base+0x130>
   14390:	ldr	r3, [pc, #60]	; 143d4 <flatcc_builder_create_struct@@Base+0x134>
   14394:	movw	r2, #783	; 0x30f
   14398:	add	r0, pc, r0
   1439c:	add	r1, pc, r1
   143a0:	add	r3, pc, r3
   143a4:	bl	12418 <__assert_fail@plt>
   143a8:	ldr	r0, [pc, #40]	; 143d8 <flatcc_builder_create_struct@@Base+0x138>
   143ac:	ldr	r1, [pc, #40]	; 143dc <flatcc_builder_create_struct@@Base+0x13c>
   143b0:	ldr	r3, [pc, #40]	; 143e0 <flatcc_builder_create_struct@@Base+0x140>
   143b4:	movw	r2, #647	; 0x287
   143b8:	add	r0, pc, r0
   143bc:	add	r1, pc, r1
   143c0:	add	r3, pc, r3
   143c4:	bl	12418 <__assert_fail@plt>
   143c8:	andeq	r6, r1, r8, lsr #26
   143cc:	andeq	r4, r0, sp, lsr sp
   143d0:	andeq	r4, r0, r4, ror #22
   143d4:	andeq	r4, r0, r0, asr #26
   143d8:	andeq	r5, r0, r5, lsl #26
   143dc:	andeq	r4, r0, r4, asr #22
   143e0:			; <UNDEFINED> instruction: 0x00005bbc
   143e4:	andeq	r5, r0, r5, asr #26
   143e8:	andeq	r4, r0, r4, lsl #23
   143ec:	strdeq	r5, [r0], -ip

000143f0 <flatcc_builder_start_buffer@@Base>:
   143f0:	push	{r4, r5, r6, r7, fp, lr}
   143f4:	add	fp, sp, #16
   143f8:	mov	r5, r1
   143fc:	ldrh	r1, [r0, #128]	; 0x80
   14400:	mov	r6, r3
   14404:	mov	r7, r2
   14408:	mov	r4, r0
   1440c:	bl	144b0 <flatcc_builder_start_buffer@@Base+0xc0>
   14410:	mov	r1, r0
   14414:	mvn	r0, #0
   14418:	cmp	r1, #0
   1441c:	popne	{r4, r5, r6, r7, fp, pc}
   14420:	mov	r0, #1
   14424:	cmp	r5, #0
   14428:	strh	r0, [r4, #128]	; 0x80
   1442c:	ldrh	r1, [r4, #132]	; 0x84
   14430:	ldr	r2, [r4, #32]
   14434:	strh	r1, [r2, #34]	; 0x22
   14438:	strh	r7, [r4, #132]	; 0x84
   1443c:	ldrh	r1, [r4, #164]	; 0xa4
   14440:	ldr	r2, [r4, #32]
   14444:	strh	r1, [r2, #32]
   14448:	strh	r6, [r4, #164]	; 0xa4
   1444c:	ldr	r1, [r4, #32]
   14450:	ldr	r2, [r4, #144]	; 0x90
   14454:	str	r2, [r1, #20]
   14458:	ldr	r1, [r4, #32]
   1445c:	ldr	r2, [r4, #152]	; 0x98
   14460:	str	r2, [r1, #28]
   14464:	ldr	r3, [r4, #148]	; 0x94
   14468:	ldr	r1, [r4, #32]
   1446c:	ldr	r2, [r4, #136]	; 0x88
   14470:	ldr	r7, [r4, #168]	; 0xa8
   14474:	add	r6, r3, #1
   14478:	str	r2, [r4, #144]	; 0x90
   1447c:	str	r6, [r4, #148]	; 0x94
   14480:	str	r3, [r4, #152]	; 0x98
   14484:	str	r7, [r1, #16]
   14488:	ldr	r1, [pc, #28]	; 144ac <flatcc_builder_start_buffer@@Base+0xbc>
   1448c:	ldr	r1, [pc, r1]
   14490:	movne	r1, r5
   14494:	ldr	r1, [r1]
   14498:	str	r1, [r4, #168]	; 0xa8
   1449c:	ldr	r1, [r4, #32]
   144a0:	strh	r0, [r1, #14]
   144a4:	mov	r0, #0
   144a8:	pop	{r4, r5, r6, r7, fp, pc}
   144ac:			; <UNDEFINED> instruction: 0x00016bb4
   144b0:	push	{r4, r5, r6, r7, fp, lr}
   144b4:	add	fp, sp, #16
   144b8:	sub	sp, sp, #8
   144bc:	mov	r5, r1
   144c0:	ldr	r1, [r0, #156]	; 0x9c
   144c4:	ldr	r2, [r0, #160]	; 0xa0
   144c8:	mov	r4, r0
   144cc:	add	r0, r1, #1
   144d0:	cmp	r1, r2
   144d4:	str	r0, [r4, #156]	; 0x9c
   144d8:	bge	144ec <flatcc_builder_start_buffer@@Base+0xfc>
   144dc:	ldr	r0, [r4, #32]
   144e0:	add	r0, r0, #36	; 0x24
   144e4:	str	r0, [r4, #32]
   144e8:	b	14580 <flatcc_builder_start_buffer@@Base+0x190>
   144ec:	ldr	r2, [r4, #176]	; 0xb0
   144f0:	mvn	r6, #0
   144f4:	cmp	r2, #1
   144f8:	cmpge	r1, r2
   144fc:	bge	145b8 <flatcc_builder_start_buffer@@Base+0x1c8>
   14500:	add	r7, r0, r0, lsl #3
   14504:	ldr	r0, [r4, #88]	; 0x58
   14508:	lsl	r2, r7, #2
   1450c:	cmp	r2, r0
   14510:	bls	14538 <flatcc_builder_start_buffer@@Base+0x148>
   14514:	ldr	r0, [r4, #40]	; 0x28
   14518:	ldr	ip, [r4, #48]	; 0x30
   1451c:	mov	r3, #4
   14520:	add	r1, r4, #84	; 0x54
   14524:	str	r3, [sp]
   14528:	mov	r3, #0
   1452c:	blx	ip
   14530:	cmp	r0, #0
   14534:	bne	145c4 <flatcc_builder_start_buffer@@Base+0x1d4>
   14538:	ldr	r1, [r4, #84]	; 0x54
   1453c:	mvn	r0, #35	; 0x23
   14540:	add	r0, r0, r7, lsl #2
   14544:	adds	r0, r0, r1
   14548:	str	r0, [r4, #32]
   1454c:	beq	145b8 <flatcc_builder_start_buffer@@Base+0x1c8>
   14550:	ldr	r1, [r4, #88]	; 0x58
   14554:	movw	r3, #36409	; 0x8e39
   14558:	ldr	r2, [r4, #176]	; 0xb0
   1455c:	movt	r3, #14563	; 0x38e3
   14560:	umull	r1, r3, r1, r3
   14564:	cmp	r2, r3, lsr #3
   14568:	lsr	r1, r3, #3
   1456c:	mov	r3, r1
   14570:	movlt	r3, r2
   14574:	cmp	r2, #0
   14578:	movle	r3, r1
   1457c:	str	r3, [r4, #160]	; 0xa0
   14580:	ldr	r1, [r4, #20]
   14584:	mvn	r3, #3
   14588:	mov	r6, #0
   1458c:	str	r1, [r0, #8]
   14590:	ldrh	r2, [r4, #130]	; 0x82
   14594:	strh	r2, [r0, #12]
   14598:	strh	r5, [r4, #130]	; 0x82
   1459c:	ldr	r2, [r4, #28]
   145a0:	stm	r0, {r2, r3}
   145a4:	add	r0, r1, r2
   145a8:	str	r6, [r4, #20]
   145ac:	add	r0, r0, #7
   145b0:	bic	r0, r0, #7
   145b4:	str	r0, [r4, #28]
   145b8:	mov	r0, r6
   145bc:	sub	sp, fp, #16
   145c0:	pop	{r4, r5, r6, r7, fp, pc}
   145c4:	ldr	r0, [pc, #24]	; 145e4 <flatcc_builder_start_buffer@@Base+0x1f4>
   145c8:	ldr	r1, [pc, #24]	; 145e8 <flatcc_builder_start_buffer@@Base+0x1f8>
   145cc:	ldr	r3, [pc, #24]	; 145ec <flatcc_builder_start_buffer@@Base+0x1fc>
   145d0:	mov	r2, #308	; 0x134
   145d4:	add	r0, pc, r0
   145d8:	add	r1, pc, r1
   145dc:	add	r3, pc, r3
   145e0:	bl	12418 <__assert_fail@plt>
   145e4:	andeq	r5, r0, r9, ror #21
   145e8:	andeq	r4, r0, r8, lsr #18
   145ec:	andeq	r5, r0, fp, lsl r9

000145f0 <flatcc_builder_end_buffer@@Base>:
   145f0:	push	{r4, r5, r6, sl, fp, lr}
   145f4:	add	fp, sp, #16
   145f8:	sub	sp, sp, #8
   145fc:	mov	r4, r0
   14600:	ldr	r0, [r0, #32]
   14604:	ldrh	r0, [r0, #14]
   14608:	cmp	r0, #1
   1460c:	bne	14700 <flatcc_builder_end_buffer@@Base+0x110>
   14610:	mov	r3, r1
   14614:	ldr	r1, [r4, #152]	; 0x98
   14618:	ldrh	r0, [r4, #164]	; 0xa4
   1461c:	ldrh	r2, [r4, #132]	; 0x84
   14620:	cmp	r1, #0
   14624:	ldrh	r1, [r4, #128]	; 0x80
   14628:	and	r0, r0, #2
   1462c:	orrne	r0, r0, #1
   14630:	cmp	r1, r2
   14634:	movcc	r1, r2
   14638:	strhcc	r2, [r4, #128]	; 0x80
   1463c:	str	r0, [sp, #4]
   14640:	mov	r0, r4
   14644:	str	r1, [sp]
   14648:	add	r1, r4, #168	; 0xa8
   1464c:	bl	14064 <flatcc_builder_create_buffer@@Base>
   14650:	mov	r6, r0
   14654:	cmp	r0, #0
   14658:	beq	146f4 <flatcc_builder_end_buffer@@Base+0x104>
   1465c:	ldr	r1, [r4, #32]
   14660:	ldr	r0, [r4, #16]
   14664:	ldr	r2, [r4, #20]
   14668:	ldr	r3, [r1, #20]
   1466c:	str	r3, [r4, #144]	; 0x90
   14670:	ldr	r3, [r1, #28]
   14674:	str	r3, [r4, #152]	; 0x98
   14678:	ldr	r3, [r1, #16]
   1467c:	str	r3, [r4, #168]	; 0xa8
   14680:	ldrh	r1, [r1, #32]
   14684:	strh	r1, [r4, #164]	; 0xa4
   14688:	mov	r1, #0
   1468c:	bl	123f4 <memset@plt>
   14690:	ldr	r0, [r4, #32]
   14694:	ldr	r1, [r4, #60]	; 0x3c
   14698:	ldr	r2, [r4, #64]	; 0x40
   1469c:	ldr	r3, [r0, #8]
   146a0:	str	r3, [r4, #20]
   146a4:	ldr	r3, [r0]
   146a8:	str	r3, [r4, #28]
   146ac:	add	r1, r1, r3
   146b0:	ldr	r5, [r0, #4]
   146b4:	str	r1, [r4, #16]
   146b8:	sub	r1, r2, r3
   146bc:	cmp	r1, r5
   146c0:	movhi	r1, r5
   146c4:	str	r1, [r4, #24]
   146c8:	ldrh	r1, [r4, #130]	; 0x82
   146cc:	ldrh	r2, [r4, #128]	; 0x80
   146d0:	cmp	r2, r1
   146d4:	strhcc	r1, [r4, #128]	; 0x80
   146d8:	ldrh	r1, [r0, #12]
   146dc:	sub	r0, r0, #36	; 0x24
   146e0:	str	r0, [r4, #32]
   146e4:	strh	r1, [r4, #130]	; 0x82
   146e8:	ldr	r0, [r4, #156]	; 0x9c
   146ec:	sub	r0, r0, #1
   146f0:	str	r0, [r4, #156]	; 0x9c
   146f4:	mov	r0, r6
   146f8:	sub	sp, fp, #16
   146fc:	pop	{r4, r5, r6, sl, fp, pc}
   14700:	ldr	r0, [pc, #24]	; 14720 <flatcc_builder_end_buffer@@Base+0x130>
   14704:	ldr	r1, [pc, #24]	; 14724 <flatcc_builder_end_buffer@@Base+0x134>
   14708:	ldr	r3, [pc, #24]	; 14728 <flatcc_builder_end_buffer@@Base+0x138>
   1470c:	movw	r2, #838	; 0x346
   14710:	add	r0, pc, r0
   14714:	add	r1, pc, r1
   14718:	add	r3, pc, r3
   1471c:	bl	12418 <__assert_fail@plt>
   14720:	andeq	r4, r0, r6, lsr sl
   14724:	andeq	r4, r0, ip, ror #15
   14728:	andeq	r4, r0, sl, asr sl

0001472c <flatcc_builder_start_struct@@Base>:
   1472c:	push	{r4, r5, r6, r7, fp, lr}
   14730:	add	fp, sp, #16
   14734:	sub	sp, sp, #8
   14738:	mov	r6, r1
   1473c:	mov	r1, r2
   14740:	mov	r4, r0
   14744:	bl	144b0 <flatcc_builder_start_buffer@@Base+0xc0>
   14748:	mov	r5, #0
   1474c:	cmp	r0, #0
   14750:	bne	14800 <flatcc_builder_start_struct@@Base+0xd4>
   14754:	ldr	r2, [r4, #32]
   14758:	mov	r0, #2
   1475c:	mvn	r7, #3
   14760:	strh	r0, [r2, #14]
   14764:	ldr	r1, [r4, #28]
   14768:	ldr	r3, [r4, #64]	; 0x40
   1476c:	ldr	r0, [r4, #60]	; 0x3c
   14770:	sub	r3, r3, r1
   14774:	add	r0, r0, r1
   14778:	cmn	r3, #4
   1477c:	str	r0, [r4, #16]
   14780:	movcs	r3, r7
   14784:	str	r3, [r4, #24]
   14788:	str	r7, [r2, #4]
   1478c:	ldr	r7, [r4, #20]
   14790:	add	r2, r7, r6
   14794:	cmp	r2, r3
   14798:	str	r2, [r4, #20]
   1479c:	bcc	147fc <flatcc_builder_start_struct@@Base+0xd0>
   147a0:	ldr	r0, [r4, #40]	; 0x28
   147a4:	ldr	r6, [r4, #48]	; 0x30
   147a8:	add	r1, r1, r2
   147ac:	mov	r3, #1
   147b0:	str	r3, [sp]
   147b4:	add	r2, r1, #1
   147b8:	add	r1, r4, #60	; 0x3c
   147bc:	mov	r3, #1
   147c0:	blx	r6
   147c4:	cmp	r0, #0
   147c8:	bne	14800 <flatcc_builder_start_struct@@Base+0xd4>
   147cc:	ldr	r1, [r4, #28]
   147d0:	ldr	r0, [r4, #60]	; 0x3c
   147d4:	ldr	r3, [r4, #64]	; 0x40
   147d8:	ldr	r2, [r4, #32]
   147dc:	add	r0, r0, r1
   147e0:	sub	r1, r3, r1
   147e4:	mvn	r3, #3
   147e8:	cmn	r1, #4
   147ec:	str	r0, [r4, #16]
   147f0:	movcs	r1, r3
   147f4:	str	r1, [r4, #24]
   147f8:	str	r3, [r2, #4]
   147fc:	add	r5, r0, r7
   14800:	mov	r0, r5
   14804:	sub	sp, fp, #16
   14808:	pop	{r4, r5, r6, r7, fp, pc}

0001480c <flatcc_builder_struct_edit@@Base>:
   1480c:	ldr	r0, [r0, #16]
   14810:	bx	lr

00014814 <flatcc_builder_end_struct@@Base>:
   14814:	push	{r4, r5, fp, lr}
   14818:	add	fp, sp, #8
   1481c:	mov	r4, r0
   14820:	ldr	r0, [r0, #32]
   14824:	ldrh	r0, [r0, #14]
   14828:	cmp	r0, #2
   1482c:	bne	148cc <flatcc_builder_end_struct@@Base+0xb8>
   14830:	ldrh	r3, [r4, #130]	; 0x82
   14834:	ldr	r1, [r4, #16]
   14838:	ldr	r2, [r4, #20]
   1483c:	mov	r0, r4
   14840:	bl	142a0 <flatcc_builder_create_struct@@Base>
   14844:	mov	r5, r0
   14848:	cmp	r0, #0
   1484c:	beq	148c4 <flatcc_builder_end_struct@@Base+0xb0>
   14850:	ldr	r0, [r4, #16]
   14854:	ldr	r2, [r4, #20]
   14858:	mov	r1, #0
   1485c:	bl	123f4 <memset@plt>
   14860:	ldr	r0, [r4, #32]
   14864:	ldr	r1, [r4, #60]	; 0x3c
   14868:	ldr	ip, [r4, #64]	; 0x40
   1486c:	ldr	r3, [r0, #8]
   14870:	str	r3, [r4, #20]
   14874:	ldr	r3, [r0]
   14878:	str	r3, [r4, #28]
   1487c:	add	r1, r1, r3
   14880:	ldr	r2, [r0, #4]
   14884:	str	r1, [r4, #16]
   14888:	sub	r1, ip, r3
   1488c:	cmp	r1, r2
   14890:	movhi	r1, r2
   14894:	str	r1, [r4, #24]
   14898:	ldrh	r1, [r4, #130]	; 0x82
   1489c:	ldrh	r2, [r4, #128]	; 0x80
   148a0:	cmp	r2, r1
   148a4:	strhcc	r1, [r4, #128]	; 0x80
   148a8:	ldrh	r1, [r0, #12]
   148ac:	sub	r0, r0, #36	; 0x24
   148b0:	str	r0, [r4, #32]
   148b4:	strh	r1, [r4, #130]	; 0x82
   148b8:	ldr	r0, [r4, #156]	; 0x9c
   148bc:	sub	r0, r0, #1
   148c0:	str	r0, [r4, #156]	; 0x9c
   148c4:	mov	r0, r5
   148c8:	pop	{r4, r5, fp, pc}
   148cc:	ldr	r0, [pc, #24]	; 148ec <flatcc_builder_end_struct@@Base+0xd8>
   148d0:	ldr	r1, [pc, #24]	; 148f0 <flatcc_builder_end_struct@@Base+0xdc>
   148d4:	ldr	r3, [pc, #24]	; 148f4 <flatcc_builder_end_struct@@Base+0xe0>
   148d8:	mov	r2, #872	; 0x368
   148dc:	add	r0, pc, r0
   148e0:	add	r1, pc, r1
   148e4:	add	r3, pc, r3
   148e8:	bl	12418 <__assert_fail@plt>
   148ec:	andeq	r4, r0, pc, ror #17
   148f0:	andeq	r4, r0, r0, lsr #12
   148f4:	andeq	r4, r0, r3, lsl r9

000148f8 <flatcc_builder_extend_vector@@Base>:
   148f8:	push	{r4, r5, fp, lr}
   148fc:	add	fp, sp, #8
   14900:	sub	sp, sp, #8
   14904:	mov	r4, r0
   14908:	ldr	r0, [r0, #32]
   1490c:	ldr	r2, [r0, #20]
   14910:	adds	r2, r2, r1
   14914:	bcs	149cc <flatcc_builder_extend_vector@@Base+0xd4>
   14918:	ldr	r3, [r0, #24]
   1491c:	cmp	r2, r3
   14920:	bhi	149cc <flatcc_builder_extend_vector@@Base+0xd4>
   14924:	str	r2, [r0, #20]
   14928:	ldr	r2, [r4, #32]
   1492c:	ldr	r5, [r4, #20]
   14930:	ldr	r0, [r4, #24]
   14934:	ldr	r2, [r2, #16]
   14938:	mla	r1, r2, r1, r5
   1493c:	cmp	r1, r0
   14940:	str	r1, [r4, #20]
   14944:	bcs	14950 <flatcc_builder_extend_vector@@Base+0x58>
   14948:	ldr	r0, [r4, #16]
   1494c:	b	149c0 <flatcc_builder_extend_vector@@Base+0xc8>
   14950:	ldr	r2, [r4, #28]
   14954:	ldr	r0, [r4, #40]	; 0x28
   14958:	ldr	ip, [r4, #48]	; 0x30
   1495c:	mov	r3, #1
   14960:	str	r3, [sp]
   14964:	mov	r3, #1
   14968:	add	r1, r1, r2
   1496c:	add	r2, r1, #1
   14970:	add	r1, r4, #60	; 0x3c
   14974:	blx	ip
   14978:	mov	r1, r0
   1497c:	mov	r0, #0
   14980:	cmp	r1, #0
   14984:	beq	14990 <flatcc_builder_extend_vector@@Base+0x98>
   14988:	sub	sp, fp, #8
   1498c:	pop	{r4, r5, fp, pc}
   14990:	ldr	r1, [r4, #28]
   14994:	ldr	r0, [r4, #60]	; 0x3c
   14998:	ldr	r3, [r4, #64]	; 0x40
   1499c:	ldr	r2, [r4, #32]
   149a0:	add	r0, r0, r1
   149a4:	sub	r1, r3, r1
   149a8:	mvn	r3, #3
   149ac:	cmn	r1, #4
   149b0:	str	r0, [r4, #16]
   149b4:	movcs	r1, r3
   149b8:	str	r1, [r4, #24]
   149bc:	str	r3, [r2, #4]
   149c0:	add	r0, r0, r5
   149c4:	sub	sp, fp, #8
   149c8:	pop	{r4, r5, fp, pc}
   149cc:	ldr	r0, [pc, #24]	; 149ec <flatcc_builder_extend_vector@@Base+0xf4>
   149d0:	ldr	r1, [pc, #24]	; 149f0 <flatcc_builder_extend_vector@@Base+0xf8>
   149d4:	ldr	r3, [pc, #24]	; 149f4 <flatcc_builder_extend_vector@@Base+0xfc>
   149d8:	mov	r2, #892	; 0x37c
   149dc:	add	r0, pc, r0
   149e0:	add	r1, pc, r1
   149e4:	add	r3, pc, r3
   149e8:	bl	12418 <__assert_fail@plt>
   149ec:	andeq	r5, r0, sl, ror #11
   149f0:	andeq	r4, r0, r0, lsr #10
   149f4:	strdeq	r5, [r0], -sp

000149f8 <flatcc_builder_vector_push@@Base>:
   149f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   149fc:	add	fp, sp, #24
   14a00:	sub	sp, sp, #8
   14a04:	mov	r5, r0
   14a08:	ldr	r0, [r0, #32]
   14a0c:	mov	r8, r1
   14a10:	ldrh	r1, [r0, #14]
   14a14:	cmp	r1, #4
   14a18:	bne	14af0 <flatcc_builder_vector_push@@Base+0xf8>
   14a1c:	ldr	r1, [r0, #20]
   14a20:	ldr	r2, [r0, #24]
   14a24:	cmp	r1, r2
   14a28:	bhi	14b10 <flatcc_builder_vector_push@@Base+0x118>
   14a2c:	add	r1, r1, #1
   14a30:	str	r1, [r0, #20]
   14a34:	ldr	r1, [r5, #32]
   14a38:	ldr	r4, [r5, #20]
   14a3c:	ldr	r0, [r5, #24]
   14a40:	ldr	r6, [r1, #16]
   14a44:	add	r1, r4, r6
   14a48:	cmp	r1, r0
   14a4c:	str	r1, [r5, #20]
   14a50:	bcs	14a74 <flatcc_builder_vector_push@@Base+0x7c>
   14a54:	ldr	r0, [r5, #16]
   14a58:	adds	r7, r0, r4
   14a5c:	beq	14ae0 <flatcc_builder_vector_push@@Base+0xe8>
   14a60:	mov	r0, r7
   14a64:	mov	r1, r8
   14a68:	mov	r2, r6
   14a6c:	bl	12388 <memcpy@plt>
   14a70:	b	14ae4 <flatcc_builder_vector_push@@Base+0xec>
   14a74:	ldr	r2, [r5, #28]
   14a78:	ldr	r0, [r5, #40]	; 0x28
   14a7c:	ldr	r7, [r5, #48]	; 0x30
   14a80:	mov	r3, #1
   14a84:	str	r3, [sp]
   14a88:	mov	r3, #1
   14a8c:	add	r1, r1, r2
   14a90:	add	r2, r1, #1
   14a94:	add	r1, r5, #60	; 0x3c
   14a98:	blx	r7
   14a9c:	mov	r7, #0
   14aa0:	cmp	r0, #0
   14aa4:	bne	14ae4 <flatcc_builder_vector_push@@Base+0xec>
   14aa8:	ldr	r1, [r5, #28]
   14aac:	ldr	r0, [r5, #60]	; 0x3c
   14ab0:	ldr	r3, [r5, #64]	; 0x40
   14ab4:	ldr	r2, [r5, #32]
   14ab8:	add	r0, r0, r1
   14abc:	sub	r1, r3, r1
   14ac0:	mvn	r3, #3
   14ac4:	cmn	r1, #4
   14ac8:	str	r0, [r5, #16]
   14acc:	movcs	r1, r3
   14ad0:	str	r1, [r5, #24]
   14ad4:	str	r3, [r2, #4]
   14ad8:	adds	r7, r0, r4
   14adc:	bne	14a60 <flatcc_builder_vector_push@@Base+0x68>
   14ae0:	mov	r7, #0
   14ae4:	mov	r0, r7
   14ae8:	sub	sp, fp, #24
   14aec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14af0:	ldr	r0, [pc, #56]	; 14b30 <flatcc_builder_vector_push@@Base+0x138>
   14af4:	ldr	r1, [pc, #56]	; 14b34 <flatcc_builder_vector_push@@Base+0x13c>
   14af8:	ldr	r3, [pc, #56]	; 14b38 <flatcc_builder_vector_push@@Base+0x140>
   14afc:	movw	r2, #907	; 0x38b
   14b00:	add	r0, pc, r0
   14b04:	add	r1, pc, r1
   14b08:	add	r3, pc, r3
   14b0c:	bl	12418 <__assert_fail@plt>
   14b10:	ldr	r0, [pc, #36]	; 14b3c <flatcc_builder_vector_push@@Base+0x144>
   14b14:	ldr	r1, [pc, #36]	; 14b40 <flatcc_builder_vector_push@@Base+0x148>
   14b18:	ldr	r3, [pc, #36]	; 14b44 <flatcc_builder_vector_push@@Base+0x14c>
   14b1c:	mov	r2, #908	; 0x38c
   14b20:	add	r0, pc, r0
   14b24:	add	r1, pc, r1
   14b28:	add	r3, pc, r3
   14b2c:	bl	12418 <__assert_fail@plt>
   14b30:	andeq	r4, r0, sl, lsr r7
   14b34:	strdeq	r4, [r0], -ip
   14b38:	andeq	r4, r0, lr, asr r7
   14b3c:	andeq	r4, r0, r9, lsl #15
   14b40:	ldrdeq	r4, [r0], -ip
   14b44:	andeq	r4, r0, lr, lsr r7

00014b48 <flatcc_builder_append_vector@@Base>:
   14b48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14b4c:	add	fp, sp, #24
   14b50:	sub	sp, sp, #8
   14b54:	mov	r6, r0
   14b58:	ldr	r0, [r0, #32]
   14b5c:	mov	r8, r1
   14b60:	ldrh	r1, [r0, #14]
   14b64:	cmp	r1, #4
   14b68:	bne	14c68 <flatcc_builder_append_vector@@Base+0x120>
   14b6c:	ldr	r1, [r0, #20]
   14b70:	mov	r5, r2
   14b74:	adds	r1, r1, r2
   14b78:	bcs	14c48 <flatcc_builder_append_vector@@Base+0x100>
   14b7c:	ldr	r2, [r0, #24]
   14b80:	cmp	r1, r2
   14b84:	bhi	14c48 <flatcc_builder_append_vector@@Base+0x100>
   14b88:	str	r1, [r0, #20]
   14b8c:	ldr	r1, [r6, #32]
   14b90:	ldr	r4, [r6, #20]
   14b94:	ldr	r0, [r6, #24]
   14b98:	ldr	r9, [r1, #16]
   14b9c:	mla	r1, r9, r5, r4
   14ba0:	cmp	r1, r0
   14ba4:	str	r1, [r6, #20]
   14ba8:	bcs	14bcc <flatcc_builder_append_vector@@Base+0x84>
   14bac:	ldr	r0, [r6, #16]
   14bb0:	adds	r7, r0, r4
   14bb4:	beq	14c38 <flatcc_builder_append_vector@@Base+0xf0>
   14bb8:	mul	r2, r9, r5
   14bbc:	mov	r0, r7
   14bc0:	mov	r1, r8
   14bc4:	bl	12388 <memcpy@plt>
   14bc8:	b	14c3c <flatcc_builder_append_vector@@Base+0xf4>
   14bcc:	ldr	r2, [r6, #28]
   14bd0:	ldr	r0, [r6, #40]	; 0x28
   14bd4:	ldr	r7, [r6, #48]	; 0x30
   14bd8:	mov	r3, #1
   14bdc:	str	r3, [sp]
   14be0:	mov	r3, #1
   14be4:	add	r1, r1, r2
   14be8:	add	r2, r1, #1
   14bec:	add	r1, r6, #60	; 0x3c
   14bf0:	blx	r7
   14bf4:	mov	r7, #0
   14bf8:	cmp	r0, #0
   14bfc:	bne	14c3c <flatcc_builder_append_vector@@Base+0xf4>
   14c00:	ldr	r1, [r6, #28]
   14c04:	ldr	r0, [r6, #60]	; 0x3c
   14c08:	ldr	r3, [r6, #64]	; 0x40
   14c0c:	ldr	r2, [r6, #32]
   14c10:	add	r0, r0, r1
   14c14:	sub	r1, r3, r1
   14c18:	mvn	r3, #3
   14c1c:	cmn	r1, #4
   14c20:	str	r0, [r6, #16]
   14c24:	movcs	r1, r3
   14c28:	str	r1, [r6, #24]
   14c2c:	str	r3, [r2, #4]
   14c30:	adds	r7, r0, r4
   14c34:	bne	14bb8 <flatcc_builder_append_vector@@Base+0x70>
   14c38:	mov	r7, #0
   14c3c:	mov	r0, r7
   14c40:	sub	sp, fp, #24
   14c44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c48:	ldr	r0, [pc, #68]	; 14c94 <flatcc_builder_append_vector@@Base+0x14c>
   14c4c:	ldr	r1, [pc, #68]	; 14c98 <flatcc_builder_append_vector@@Base+0x150>
   14c50:	ldr	r3, [pc, #68]	; 14c9c <flatcc_builder_append_vector@@Base+0x154>
   14c54:	mov	r2, #892	; 0x37c
   14c58:	add	r0, pc, r0
   14c5c:	add	r1, pc, r1
   14c60:	add	r3, pc, r3
   14c64:	bl	12418 <__assert_fail@plt>
   14c68:	ldr	r0, [pc, #24]	; 14c88 <flatcc_builder_append_vector@@Base+0x140>
   14c6c:	ldr	r1, [pc, #24]	; 14c8c <flatcc_builder_append_vector@@Base+0x144>
   14c70:	ldr	r3, [pc, #24]	; 14c90 <flatcc_builder_append_vector@@Base+0x148>
   14c74:	movw	r2, #915	; 0x393
   14c78:	add	r0, pc, r0
   14c7c:	add	r1, pc, r1
   14c80:	add	r3, pc, r3
   14c84:	bl	12418 <__assert_fail@plt>
   14c88:	andeq	r4, r0, r2, asr #11
   14c8c:	andeq	r4, r0, r4, lsl #5
   14c90:	andeq	r4, r0, r6, ror #12
   14c94:	andeq	r5, r0, lr, ror #6
   14c98:	andeq	r4, r0, r4, lsr #5
   14c9c:	andeq	r5, r0, r1, lsl #7

00014ca0 <flatcc_builder_extend_offset_vector@@Base>:
   14ca0:	push	{r4, r5, fp, lr}
   14ca4:	add	fp, sp, #8
   14ca8:	sub	sp, sp, #8
   14cac:	mov	r4, r0
   14cb0:	ldr	r0, [r0, #32]
   14cb4:	ldr	r2, [r0, #20]
   14cb8:	adds	r2, r2, r1
   14cbc:	cmpcc	r2, #1073741824	; 0x40000000
   14cc0:	bcc	14ce4 <flatcc_builder_extend_offset_vector@@Base+0x44>
   14cc4:	ldr	r0, [pc, #184]	; 14d84 <flatcc_builder_extend_offset_vector@@Base+0xe4>
   14cc8:	ldr	r1, [pc, #184]	; 14d88 <flatcc_builder_extend_offset_vector@@Base+0xe8>
   14ccc:	ldr	r3, [pc, #184]	; 14d8c <flatcc_builder_extend_offset_vector@@Base+0xec>
   14cd0:	mov	r2, #892	; 0x37c
   14cd4:	add	r0, pc, r0
   14cd8:	add	r1, pc, r1
   14cdc:	add	r3, pc, r3
   14ce0:	bl	12418 <__assert_fail@plt>
   14ce4:	str	r2, [r0, #20]
   14ce8:	ldr	r5, [r4, #20]
   14cec:	ldr	r0, [r4, #24]
   14cf0:	add	r1, r5, r1, lsl #2
   14cf4:	cmp	r1, r0
   14cf8:	str	r1, [r4, #20]
   14cfc:	bcs	14d08 <flatcc_builder_extend_offset_vector@@Base+0x68>
   14d00:	ldr	r0, [r4, #16]
   14d04:	b	14d78 <flatcc_builder_extend_offset_vector@@Base+0xd8>
   14d08:	ldr	r2, [r4, #28]
   14d0c:	ldr	r0, [r4, #40]	; 0x28
   14d10:	ldr	ip, [r4, #48]	; 0x30
   14d14:	mov	r3, #1
   14d18:	str	r3, [sp]
   14d1c:	mov	r3, #1
   14d20:	add	r1, r1, r2
   14d24:	add	r2, r1, #1
   14d28:	add	r1, r4, #60	; 0x3c
   14d2c:	blx	ip
   14d30:	mov	r1, r0
   14d34:	mov	r0, #0
   14d38:	cmp	r1, #0
   14d3c:	beq	14d48 <flatcc_builder_extend_offset_vector@@Base+0xa8>
   14d40:	sub	sp, fp, #8
   14d44:	pop	{r4, r5, fp, pc}
   14d48:	ldr	r1, [r4, #28]
   14d4c:	ldr	r0, [r4, #60]	; 0x3c
   14d50:	ldr	r3, [r4, #64]	; 0x40
   14d54:	ldr	r2, [r4, #32]
   14d58:	add	r0, r0, r1
   14d5c:	sub	r1, r3, r1
   14d60:	mvn	r3, #3
   14d64:	cmn	r1, #4
   14d68:	str	r0, [r4, #16]
   14d6c:	movcs	r1, r3
   14d70:	str	r1, [r4, #24]
   14d74:	str	r3, [r2, #4]
   14d78:	add	r0, r0, r5
   14d7c:	sub	sp, fp, #8
   14d80:	pop	{r4, r5, fp, pc}
   14d84:	strdeq	r5, [r0], -r2
   14d88:	andeq	r4, r0, r8, lsr #4
   14d8c:	andeq	r5, r0, r5, lsl #6

00014d90 <flatcc_builder_offset_vector_push@@Base>:
   14d90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d94:	add	fp, sp, #24
   14d98:	sub	sp, sp, #8
   14d9c:	mov	r6, r0
   14da0:	ldr	r0, [r0, #32]
   14da4:	mov	r8, r1
   14da8:	ldrh	r1, [r0, #14]
   14dac:	cmp	r1, #5
   14db0:	bne	14e64 <flatcc_builder_offset_vector_push@@Base+0xd4>
   14db4:	ldr	r1, [r0, #20]
   14db8:	mov	r5, #0
   14dbc:	cmn	r1, #-1073741823	; 0xc0000001
   14dc0:	beq	14e58 <flatcc_builder_offset_vector_push@@Base+0xc8>
   14dc4:	add	r1, r1, #1
   14dc8:	str	r1, [r0, #20]
   14dcc:	ldr	r7, [r6, #20]
   14dd0:	ldr	r0, [r6, #24]
   14dd4:	add	r1, r7, #4
   14dd8:	cmp	r1, r0
   14ddc:	str	r1, [r6, #20]
   14de0:	bcs	14dec <flatcc_builder_offset_vector_push@@Base+0x5c>
   14de4:	ldr	r0, [r6, #16]
   14de8:	b	14e4c <flatcc_builder_offset_vector_push@@Base+0xbc>
   14dec:	ldr	r1, [r6, #28]
   14df0:	ldr	r0, [r6, #40]	; 0x28
   14df4:	ldr	r4, [r6, #48]	; 0x30
   14df8:	mov	r2, #1
   14dfc:	mov	r3, #1
   14e00:	str	r2, [sp]
   14e04:	add	r1, r7, r1
   14e08:	add	r2, r1, #5
   14e0c:	add	r1, r6, #60	; 0x3c
   14e10:	blx	r4
   14e14:	cmp	r0, #0
   14e18:	bne	14e58 <flatcc_builder_offset_vector_push@@Base+0xc8>
   14e1c:	ldr	r1, [r6, #28]
   14e20:	ldr	r0, [r6, #60]	; 0x3c
   14e24:	ldr	r3, [r6, #64]	; 0x40
   14e28:	ldr	r2, [r6, #32]
   14e2c:	add	r0, r0, r1
   14e30:	sub	r1, r3, r1
   14e34:	mvn	r3, #3
   14e38:	cmn	r1, #4
   14e3c:	str	r0, [r6, #16]
   14e40:	movcs	r1, r3
   14e44:	str	r1, [r6, #24]
   14e48:	str	r3, [r2, #4]
   14e4c:	adds	r0, r0, r7
   14e50:	movne	r5, r0
   14e54:	strne	r8, [r0]
   14e58:	mov	r0, r5
   14e5c:	sub	sp, fp, #24
   14e60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e64:	ldr	r0, [pc, #24]	; 14e84 <flatcc_builder_offset_vector_push@@Base+0xf4>
   14e68:	ldr	r1, [pc, #24]	; 14e88 <flatcc_builder_offset_vector_push@@Base+0xf8>
   14e6c:	ldr	r3, [pc, #24]	; 14e8c <flatcc_builder_offset_vector_push@@Base+0xfc>
   14e70:	movw	r2, #934	; 0x3a6
   14e74:	add	r0, pc, r0
   14e78:	add	r1, pc, r1
   14e7c:	add	r3, pc, r3
   14e80:	bl	12418 <__assert_fail@plt>
   14e84:			; <UNDEFINED> instruction: 0x000044bf
   14e88:	andeq	r4, r0, r8, lsl #1
   14e8c:	andeq	r4, r0, sl, ror #9

00014e90 <flatcc_builder_append_offset_vector@@Base>:
   14e90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e94:	add	fp, sp, #24
   14e98:	sub	sp, sp, #8
   14e9c:	mov	r6, r0
   14ea0:	ldr	r0, [r0, #32]
   14ea4:	mov	r8, r1
   14ea8:	ldrh	r1, [r0, #14]
   14eac:	cmp	r1, #5
   14eb0:	bne	14fa0 <flatcc_builder_append_offset_vector@@Base+0x110>
   14eb4:	ldr	r1, [r0, #20]
   14eb8:	mov	r5, r2
   14ebc:	adds	r1, r1, r2
   14ec0:	cmpcc	r1, #1073741824	; 0x40000000
   14ec4:	bcc	14ee8 <flatcc_builder_append_offset_vector@@Base+0x58>
   14ec8:	ldr	r0, [pc, #252]	; 14fcc <flatcc_builder_append_offset_vector@@Base+0x13c>
   14ecc:	ldr	r1, [pc, #252]	; 14fd0 <flatcc_builder_append_offset_vector@@Base+0x140>
   14ed0:	ldr	r3, [pc, #252]	; 14fd4 <flatcc_builder_append_offset_vector@@Base+0x144>
   14ed4:	mov	r2, #892	; 0x37c
   14ed8:	add	r0, pc, r0
   14edc:	add	r1, pc, r1
   14ee0:	add	r3, pc, r3
   14ee4:	bl	12418 <__assert_fail@plt>
   14ee8:	str	r1, [r0, #20]
   14eec:	ldr	r4, [r6, #20]
   14ef0:	ldr	r0, [r6, #24]
   14ef4:	add	r1, r4, r5, lsl #2
   14ef8:	cmp	r1, r0
   14efc:	str	r1, [r6, #20]
   14f00:	bcs	14f24 <flatcc_builder_append_offset_vector@@Base+0x94>
   14f04:	ldr	r0, [r6, #16]
   14f08:	adds	r7, r0, r4
   14f0c:	beq	14f90 <flatcc_builder_append_offset_vector@@Base+0x100>
   14f10:	lsl	r2, r5, #2
   14f14:	mov	r0, r7
   14f18:	mov	r1, r8
   14f1c:	bl	12388 <memcpy@plt>
   14f20:	b	14f94 <flatcc_builder_append_offset_vector@@Base+0x104>
   14f24:	ldr	r2, [r6, #28]
   14f28:	ldr	r0, [r6, #40]	; 0x28
   14f2c:	ldr	r7, [r6, #48]	; 0x30
   14f30:	mov	r3, #1
   14f34:	str	r3, [sp]
   14f38:	mov	r3, #1
   14f3c:	add	r1, r1, r2
   14f40:	add	r2, r1, #1
   14f44:	add	r1, r6, #60	; 0x3c
   14f48:	blx	r7
   14f4c:	mov	r7, #0
   14f50:	cmp	r0, #0
   14f54:	bne	14f94 <flatcc_builder_append_offset_vector@@Base+0x104>
   14f58:	ldr	r1, [r6, #28]
   14f5c:	ldr	r0, [r6, #60]	; 0x3c
   14f60:	ldr	r3, [r6, #64]	; 0x40
   14f64:	ldr	r2, [r6, #32]
   14f68:	add	r0, r0, r1
   14f6c:	sub	r1, r3, r1
   14f70:	mvn	r3, #3
   14f74:	cmn	r1, #4
   14f78:	str	r0, [r6, #16]
   14f7c:	movcs	r1, r3
   14f80:	str	r1, [r6, #24]
   14f84:	str	r3, [r2, #4]
   14f88:	adds	r7, r0, r4
   14f8c:	bne	14f10 <flatcc_builder_append_offset_vector@@Base+0x80>
   14f90:	mov	r7, #0
   14f94:	mov	r0, r7
   14f98:	sub	sp, fp, #24
   14f9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14fa0:	ldr	r0, [pc, #24]	; 14fc0 <flatcc_builder_append_offset_vector@@Base+0x130>
   14fa4:	ldr	r1, [pc, #24]	; 14fc4 <flatcc_builder_append_offset_vector@@Base+0x134>
   14fa8:	ldr	r3, [pc, #24]	; 14fc8 <flatcc_builder_append_offset_vector@@Base+0x138>
   14fac:	mov	r2, #948	; 0x3b4
   14fb0:	add	r0, pc, r0
   14fb4:	add	r1, pc, r1
   14fb8:	add	r3, pc, r3
   14fbc:	bl	12418 <__assert_fail@plt>
   14fc0:	andeq	r4, r0, r3, lsl #7
   14fc4:	andeq	r3, r0, ip, asr #30
   14fc8:	andeq	r4, r0, r0, lsl r4
   14fcc:	andeq	r5, r0, lr, ror #1
   14fd0:	andeq	r4, r0, r4, lsr #32
   14fd4:	andeq	r5, r0, r1, lsl #2

00014fd8 <flatcc_builder_extend_string@@Base>:
   14fd8:	push	{r4, r5, fp, lr}
   14fdc:	add	fp, sp, #8
   14fe0:	sub	sp, sp, #8
   14fe4:	mov	r4, r0
   14fe8:	ldr	r0, [r0, #32]
   14fec:	ldrh	r2, [r0, #14]
   14ff0:	cmp	r2, #6
   14ff4:	bne	150a4 <flatcc_builder_extend_string@@Base+0xcc>
   14ff8:	ldr	r2, [r0, #20]
   14ffc:	adds	r2, r2, r1
   15000:	bcs	150c4 <flatcc_builder_extend_string@@Base+0xec>
   15004:	str	r2, [r0, #20]
   15008:	ldr	r5, [r4, #20]
   1500c:	ldr	r0, [r4, #24]
   15010:	add	r1, r5, r1
   15014:	cmp	r1, r0
   15018:	str	r1, [r4, #20]
   1501c:	bcs	15028 <flatcc_builder_extend_string@@Base+0x50>
   15020:	ldr	r0, [r4, #16]
   15024:	b	15098 <flatcc_builder_extend_string@@Base+0xc0>
   15028:	ldr	r2, [r4, #28]
   1502c:	ldr	r0, [r4, #40]	; 0x28
   15030:	ldr	ip, [r4, #48]	; 0x30
   15034:	mov	r3, #1
   15038:	str	r3, [sp]
   1503c:	mov	r3, #1
   15040:	add	r1, r1, r2
   15044:	add	r2, r1, #1
   15048:	add	r1, r4, #60	; 0x3c
   1504c:	blx	ip
   15050:	mov	r1, r0
   15054:	mov	r0, #0
   15058:	cmp	r1, #0
   1505c:	beq	15068 <flatcc_builder_extend_string@@Base+0x90>
   15060:	sub	sp, fp, #8
   15064:	pop	{r4, r5, fp, pc}
   15068:	ldr	r1, [r4, #28]
   1506c:	ldr	r0, [r4, #60]	; 0x3c
   15070:	ldr	r3, [r4, #64]	; 0x40
   15074:	ldr	r2, [r4, #32]
   15078:	add	r0, r0, r1
   1507c:	sub	r1, r3, r1
   15080:	mvn	r3, #3
   15084:	cmn	r1, #4
   15088:	str	r0, [r4, #16]
   1508c:	movcs	r1, r3
   15090:	str	r1, [r4, #24]
   15094:	str	r3, [r2, #4]
   15098:	add	r0, r0, r5
   1509c:	sub	sp, fp, #8
   150a0:	pop	{r4, r5, fp, pc}
   150a4:	ldr	r0, [pc, #56]	; 150e4 <flatcc_builder_extend_string@@Base+0x10c>
   150a8:	ldr	r1, [pc, #56]	; 150e8 <flatcc_builder_extend_string@@Base+0x110>
   150ac:	ldr	r3, [pc, #56]	; 150ec <flatcc_builder_extend_string@@Base+0x114>
   150b0:	movw	r2, #957	; 0x3bd
   150b4:	add	r0, pc, r0
   150b8:	add	r1, pc, r1
   150bc:	add	r3, pc, r3
   150c0:	bl	12418 <__assert_fail@plt>
   150c4:	ldr	r0, [pc, #36]	; 150f0 <flatcc_builder_extend_string@@Base+0x118>
   150c8:	ldr	r1, [pc, #36]	; 150f4 <flatcc_builder_extend_string@@Base+0x11c>
   150cc:	ldr	r3, [pc, #36]	; 150f8 <flatcc_builder_extend_string@@Base+0x120>
   150d0:	mov	r2, #892	; 0x37c
   150d4:	add	r0, pc, r0
   150d8:	add	r1, pc, r1
   150dc:	add	r3, pc, r3
   150e0:	bl	12418 <__assert_fail@plt>
   150e4:	andeq	r4, r0, r8, lsl #7
   150e8:	andeq	r3, r0, r8, asr #28
   150ec:	andeq	r4, r0, ip, lsr #7
   150f0:	strdeq	r4, [r0], -r2
   150f4:	andeq	r3, r0, r8, lsr #28
   150f8:	andeq	r4, r0, r5, lsl #30

000150fc <flatcc_builder_append_string@@Base>:
   150fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15100:	add	fp, sp, #24
   15104:	sub	sp, sp, #8
   15108:	mov	r6, r0
   1510c:	ldr	r0, [r0, #32]
   15110:	mov	r8, r1
   15114:	ldrh	r1, [r0, #14]
   15118:	cmp	r1, #6
   1511c:	bne	151e8 <flatcc_builder_append_string@@Base+0xec>
   15120:	ldr	r1, [r0, #20]
   15124:	mov	r4, r2
   15128:	adds	r1, r1, r2
   1512c:	bcs	15208 <flatcc_builder_append_string@@Base+0x10c>
   15130:	str	r1, [r0, #20]
   15134:	ldr	r5, [r6, #20]
   15138:	ldr	r0, [r6, #24]
   1513c:	add	r1, r5, r4
   15140:	cmp	r1, r0
   15144:	str	r1, [r6, #20]
   15148:	bcs	1516c <flatcc_builder_append_string@@Base+0x70>
   1514c:	ldr	r0, [r6, #16]
   15150:	adds	r7, r0, r5
   15154:	beq	151d8 <flatcc_builder_append_string@@Base+0xdc>
   15158:	mov	r0, r7
   1515c:	mov	r1, r8
   15160:	mov	r2, r4
   15164:	bl	12388 <memcpy@plt>
   15168:	b	151dc <flatcc_builder_append_string@@Base+0xe0>
   1516c:	ldr	r2, [r6, #28]
   15170:	ldr	r0, [r6, #40]	; 0x28
   15174:	ldr	r7, [r6, #48]	; 0x30
   15178:	mov	r3, #1
   1517c:	str	r3, [sp]
   15180:	mov	r3, #1
   15184:	add	r1, r1, r2
   15188:	add	r2, r1, #1
   1518c:	add	r1, r6, #60	; 0x3c
   15190:	blx	r7
   15194:	mov	r7, #0
   15198:	cmp	r0, #0
   1519c:	bne	151dc <flatcc_builder_append_string@@Base+0xe0>
   151a0:	ldr	r1, [r6, #28]
   151a4:	ldr	r0, [r6, #60]	; 0x3c
   151a8:	ldr	r3, [r6, #64]	; 0x40
   151ac:	ldr	r2, [r6, #32]
   151b0:	add	r0, r0, r1
   151b4:	sub	r1, r3, r1
   151b8:	mvn	r3, #3
   151bc:	cmn	r1, #4
   151c0:	str	r0, [r6, #16]
   151c4:	movcs	r1, r3
   151c8:	str	r1, [r6, #24]
   151cc:	str	r3, [r2, #4]
   151d0:	adds	r7, r0, r5
   151d4:	bne	15158 <flatcc_builder_append_string@@Base+0x5c>
   151d8:	mov	r7, #0
   151dc:	mov	r0, r7
   151e0:	sub	sp, fp, #24
   151e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151e8:	ldr	r0, [pc, #56]	; 15228 <flatcc_builder_append_string@@Base+0x12c>
   151ec:	ldr	r1, [pc, #56]	; 1522c <flatcc_builder_append_string@@Base+0x130>
   151f0:	ldr	r3, [pc, #56]	; 15230 <flatcc_builder_append_string@@Base+0x134>
   151f4:	movw	r2, #966	; 0x3c6
   151f8:	add	r0, pc, r0
   151fc:	add	r1, pc, r1
   15200:	add	r3, pc, r3
   15204:	bl	12418 <__assert_fail@plt>
   15208:	ldr	r0, [pc, #36]	; 15234 <flatcc_builder_append_string@@Base+0x138>
   1520c:	ldr	r1, [pc, #36]	; 15238 <flatcc_builder_append_string@@Base+0x13c>
   15210:	ldr	r3, [pc, #36]	; 1523c <flatcc_builder_append_string@@Base+0x140>
   15214:	mov	r2, #892	; 0x37c
   15218:	add	r0, pc, r0
   1521c:	add	r1, pc, r1
   15220:	add	r3, pc, r3
   15224:	bl	12418 <__assert_fail@plt>
   15228:	andeq	r4, r0, r4, asr #4
   1522c:	andeq	r3, r0, r4, lsl #26
   15230:	andeq	r4, r0, r7, lsr #5
   15234:	andeq	r4, r0, lr, lsr #27
   15238:	andeq	r3, r0, r4, ror #25
   1523c:	andeq	r4, r0, r1, asr #27

00015240 <flatcc_builder_append_string_str@@Base>:
   15240:	push	{r4, r5, fp, lr}
   15244:	add	fp, sp, #8
   15248:	mov	r5, r0
   1524c:	mov	r0, r1
   15250:	mov	r4, r1
   15254:	bl	123dc <strlen@plt>
   15258:	mov	r2, r0
   1525c:	mov	r0, r5
   15260:	mov	r1, r4
   15264:	pop	{r4, r5, fp, lr}
   15268:	b	150fc <flatcc_builder_append_string@@Base>

0001526c <flatcc_builder_append_string_strn@@Base>:
   1526c:	push	{r4, r5, r6, sl, fp, lr}
   15270:	add	fp, sp, #16
   15274:	mov	r6, r0
   15278:	mov	r5, r1
   1527c:	mov	r0, r1
   15280:	mov	r1, #0
   15284:	mov	r4, r2
   15288:	bl	12400 <memchr@plt>
   1528c:	cmp	r0, #0
   15290:	mov	r1, r5
   15294:	subne	r4, r0, r5
   15298:	mov	r0, r6
   1529c:	mov	r2, r4
   152a0:	pop	{r4, r5, r6, sl, fp, lr}
   152a4:	b	150fc <flatcc_builder_append_string@@Base>

000152a8 <flatcc_builder_truncate_vector@@Base>:
   152a8:	push	{fp, lr}
   152ac:	mov	fp, sp
   152b0:	ldr	r2, [r0, #32]
   152b4:	ldrh	r3, [r2, #14]
   152b8:	cmp	r3, #4
   152bc:	bne	15304 <flatcc_builder_truncate_vector@@Base+0x5c>
   152c0:	ldr	r3, [r2, #20]
   152c4:	cmp	r3, r1
   152c8:	bcc	15324 <flatcc_builder_truncate_vector@@Base+0x7c>
   152cc:	sub	r3, r3, r1
   152d0:	str	r3, [r2, #20]
   152d4:	ldr	r2, [r0, #32]
   152d8:	ldr	r3, [r0, #20]
   152dc:	ldr	ip, [r0, #16]
   152e0:	ldr	r2, [r2, #16]
   152e4:	mls	r3, r2, r1, r3
   152e8:	mul	r2, r2, r1
   152ec:	mov	r1, #0
   152f0:	str	r3, [r0, #20]
   152f4:	add	r0, ip, r3
   152f8:	bl	123f4 <memset@plt>
   152fc:	mov	r0, #0
   15300:	pop	{fp, pc}
   15304:	ldr	r0, [pc, #56]	; 15344 <flatcc_builder_truncate_vector@@Base+0x9c>
   15308:	ldr	r1, [pc, #56]	; 15348 <flatcc_builder_truncate_vector@@Base+0xa0>
   1530c:	ldr	r3, [pc, #56]	; 1534c <flatcc_builder_truncate_vector@@Base+0xa4>
   15310:	movw	r2, #985	; 0x3d9
   15314:	add	r0, pc, r0
   15318:	add	r1, pc, r1
   1531c:	add	r3, pc, r3
   15320:	bl	12418 <__assert_fail@plt>
   15324:	ldr	r0, [pc, #36]	; 15350 <flatcc_builder_truncate_vector@@Base+0xa8>
   15328:	ldr	r1, [pc, #36]	; 15354 <flatcc_builder_truncate_vector@@Base+0xac>
   1532c:	ldr	r3, [pc, #36]	; 15358 <flatcc_builder_truncate_vector@@Base+0xb0>
   15330:	movw	r2, #986	; 0x3da
   15334:	add	r0, pc, r0
   15338:	add	r1, pc, r1
   1533c:	add	r3, pc, r3
   15340:	bl	12418 <__assert_fail@plt>
   15344:	andeq	r3, r0, r6, lsr #30
   15348:	andeq	r3, r0, r8, ror #23
   1534c:	ldrdeq	r4, [r0], -r8
   15350:	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
   15354:	andeq	r3, r0, r8, asr #23
   15358:			; <UNDEFINED> instruction: 0x000041b8

0001535c <flatcc_builder_truncate_offset_vector@@Base>:
   1535c:	push	{fp, lr}
   15360:	mov	fp, sp
   15364:	ldr	r2, [r0, #32]
   15368:	ldrh	r3, [r2, #14]
   1536c:	cmp	r3, #5
   15370:	bne	153b8 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   15374:	ldr	r3, [r2, #20]
   15378:	cmp	r3, r1
   1537c:	bcc	153d8 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   15380:	sub	r3, r3, r1
   15384:	str	r3, [r2, #20]
   15388:	ldr	r2, [r0, #32]
   1538c:	ldr	r3, [r0, #20]
   15390:	ldr	ip, [r0, #16]
   15394:	ldr	r2, [r2, #16]
   15398:	mls	r3, r2, r1, r3
   1539c:	mul	r2, r2, r1
   153a0:	mov	r1, #0
   153a4:	str	r3, [r0, #20]
   153a8:	add	r0, ip, r3
   153ac:	bl	123f4 <memset@plt>
   153b0:	mov	r0, #0
   153b4:	pop	{fp, pc}
   153b8:	ldr	r0, [pc, #56]	; 153f8 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   153bc:	ldr	r1, [pc, #56]	; 153fc <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   153c0:	ldr	r3, [pc, #56]	; 15400 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   153c4:	movw	r2, #994	; 0x3e2
   153c8:	add	r0, pc, r0
   153cc:	add	r1, pc, r1
   153d0:	add	r3, pc, r3
   153d4:	bl	12418 <__assert_fail@plt>
   153d8:	ldr	r0, [pc, #36]	; 15404 <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   153dc:	ldr	r1, [pc, #36]	; 15408 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   153e0:	ldr	r3, [pc, #36]	; 1540c <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   153e4:	movw	r2, #995	; 0x3e3
   153e8:	add	r0, pc, r0
   153ec:	add	r1, pc, r1
   153f0:	add	r3, pc, r3
   153f4:	bl	12418 <__assert_fail@plt>
   153f8:	andeq	r3, r0, fp, ror #30
   153fc:	andeq	r3, r0, r4, lsr fp
   15400:	andeq	r4, r0, r7, lsl #3
   15404:			; <UNDEFINED> instruction: 0x000041b5
   15408:	andeq	r3, r0, r4, lsl fp
   1540c:	andeq	r4, r0, r7, ror #2

00015410 <flatcc_builder_truncate_string@@Base>:
   15410:	push	{fp, lr}
   15414:	mov	fp, sp
   15418:	mov	r2, r1
   1541c:	ldr	r1, [r0, #32]
   15420:	ldrh	r3, [r1, #14]
   15424:	cmp	r3, #6
   15428:	bne	15464 <flatcc_builder_truncate_string@@Base+0x54>
   1542c:	ldr	r3, [r1, #20]
   15430:	cmp	r3, r2
   15434:	bcc	15484 <flatcc_builder_truncate_string@@Base+0x74>
   15438:	sub	r3, r3, r2
   1543c:	str	r3, [r1, #20]
   15440:	ldr	r3, [r0, #20]
   15444:	ldr	r1, [r0, #16]
   15448:	sub	r3, r3, r2
   1544c:	str	r3, [r0, #20]
   15450:	add	r0, r1, r3
   15454:	mov	r1, #0
   15458:	bl	123f4 <memset@plt>
   1545c:	mov	r0, #0
   15460:	pop	{fp, pc}
   15464:	ldr	r0, [pc, #56]	; 154a4 <flatcc_builder_truncate_string@@Base+0x94>
   15468:	ldr	r1, [pc, #56]	; 154a8 <flatcc_builder_truncate_string@@Base+0x98>
   1546c:	ldr	r3, [pc, #56]	; 154ac <flatcc_builder_truncate_string@@Base+0x9c>
   15470:	movw	r2, #1003	; 0x3eb
   15474:	add	r0, pc, r0
   15478:	add	r1, pc, r1
   1547c:	add	r3, pc, r3
   15480:	bl	12418 <__assert_fail@plt>
   15484:	ldr	r0, [pc, #36]	; 154b0 <flatcc_builder_truncate_string@@Base+0xa0>
   15488:	ldr	r1, [pc, #36]	; 154b4 <flatcc_builder_truncate_string@@Base+0xa4>
   1548c:	ldr	r3, [pc, #36]	; 154b8 <flatcc_builder_truncate_string@@Base+0xa8>
   15490:	mov	r2, #1004	; 0x3ec
   15494:	add	r0, pc, r0
   15498:	add	r1, pc, r1
   1549c:	add	r3, pc, r3
   154a0:	bl	12418 <__assert_fail@plt>
   154a4:	andeq	r3, r0, r8, asr #31
   154a8:	andeq	r3, r0, r8, lsl #21
   154ac:	andeq	r4, r0, ip, asr r1
   154b0:	andeq	r4, r0, r3, lsl #3
   154b4:	andeq	r3, r0, r8, ror #20
   154b8:	andeq	r4, r0, ip, lsr r1

000154bc <flatcc_builder_start_vector@@Base>:
   154bc:	push	{r4, r5, r6, r7, fp, lr}
   154c0:	add	fp, sp, #16
   154c4:	mov	r7, #4
   154c8:	cmp	r2, #4
   154cc:	mov	r6, r1
   154d0:	mov	r5, r3
   154d4:	mov	r4, r0
   154d8:	movls	r2, r7
   154dc:	mov	r1, r2
   154e0:	bl	144b0 <flatcc_builder_start_buffer@@Base+0xc0>
   154e4:	mov	r1, r0
   154e8:	mvn	r0, #0
   154ec:	cmp	r1, #0
   154f0:	popne	{r4, r5, r6, r7, fp, pc}
   154f4:	ldr	r0, [r4, #32]
   154f8:	str	r6, [r0, #16]
   154fc:	mov	r0, #0
   15500:	ldr	r1, [r4, #32]
   15504:	str	r0, [r1, #20]
   15508:	ldr	r1, [r4, #32]
   1550c:	str	r5, [r1, #24]
   15510:	ldr	r1, [r4, #32]
   15514:	strh	r7, [r1, #14]
   15518:	ldr	r2, [r4, #28]
   1551c:	ldr	r3, [r4, #60]	; 0x3c
   15520:	ldr	r7, [r4, #64]	; 0x40
   15524:	add	r3, r3, r2
   15528:	sub	r2, r7, r2
   1552c:	str	r3, [r4, #16]
   15530:	mvn	r3, #3
   15534:	cmn	r2, #4
   15538:	movcs	r2, r3
   1553c:	str	r2, [r4, #24]
   15540:	str	r3, [r1, #4]
   15544:	pop	{r4, r5, r6, r7, fp, pc}

00015548 <flatcc_builder_start_offset_vector@@Base>:
   15548:	push	{r4, r5, fp, lr}
   1554c:	add	fp, sp, #8
   15550:	mov	r1, #4
   15554:	mov	r4, r0
   15558:	mov	r5, #4
   1555c:	bl	144b0 <flatcc_builder_start_buffer@@Base+0xc0>
   15560:	mov	r1, r0
   15564:	mvn	r0, #0
   15568:	cmp	r1, #0
   1556c:	popne	{r4, r5, fp, pc}
   15570:	ldr	r0, [r4, #32]
   15574:	mov	r2, #5
   15578:	str	r5, [r0, #16]
   1557c:	mov	r0, #0
   15580:	ldr	r1, [r4, #32]
   15584:	str	r0, [r1, #20]
   15588:	ldr	r1, [r4, #32]
   1558c:	strh	r2, [r1, #14]
   15590:	ldr	r2, [r4, #28]
   15594:	ldr	r3, [r4, #60]	; 0x3c
   15598:	ldr	r5, [r4, #64]	; 0x40
   1559c:	add	r3, r3, r2
   155a0:	sub	r2, r5, r2
   155a4:	str	r3, [r4, #16]
   155a8:	mvn	r3, #3
   155ac:	cmn	r2, #4
   155b0:	movcs	r2, r3
   155b4:	str	r2, [r4, #24]
   155b8:	str	r3, [r1, #4]
   155bc:	pop	{r4, r5, fp, pc}

000155c0 <flatcc_builder_create_offset_vector@@Base>:
   155c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   155c4:	add	fp, sp, #24
   155c8:	sub	sp, sp, #8
   155cc:	mov	r8, r1
   155d0:	mov	r1, #4
   155d4:	mov	r6, r2
   155d8:	mov	r4, r0
   155dc:	mov	r7, #4
   155e0:	bl	144b0 <flatcc_builder_start_buffer@@Base+0xc0>
   155e4:	cmp	r0, #0
   155e8:	beq	155f8 <flatcc_builder_create_offset_vector@@Base+0x38>
   155ec:	mov	r0, #0
   155f0:	sub	sp, fp, #24
   155f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   155f8:	ldr	r0, [r4, #32]
   155fc:	mov	r1, #0
   15600:	str	r7, [r0, #16]
   15604:	ldr	r0, [r4, #32]
   15608:	str	r1, [r0, #20]
   1560c:	mov	r1, #5
   15610:	ldr	r0, [r4, #32]
   15614:	strh	r1, [r0, #14]
   15618:	ldr	r1, [r4, #28]
   1561c:	ldr	r2, [r4, #60]	; 0x3c
   15620:	ldr	r3, [r4, #64]	; 0x40
   15624:	add	r2, r2, r1
   15628:	sub	r1, r3, r1
   1562c:	str	r2, [r4, #16]
   15630:	mvn	r2, #3
   15634:	cmn	r1, #4
   15638:	movcs	r1, r2
   1563c:	str	r1, [r4, #24]
   15640:	str	r2, [r0, #4]
   15644:	ldr	r1, [r0, #20]
   15648:	adds	r1, r1, r6
   1564c:	cmpcc	r1, #1073741824	; 0x40000000
   15650:	bcc	15674 <flatcc_builder_create_offset_vector@@Base+0xb4>
   15654:	ldr	r0, [pc, #200]	; 15724 <flatcc_builder_create_offset_vector@@Base+0x164>
   15658:	ldr	r1, [pc, #200]	; 15728 <flatcc_builder_create_offset_vector@@Base+0x168>
   1565c:	ldr	r3, [pc, #200]	; 1572c <flatcc_builder_create_offset_vector@@Base+0x16c>
   15660:	mov	r2, #892	; 0x37c
   15664:	add	r0, pc, r0
   15668:	add	r1, pc, r1
   1566c:	add	r3, pc, r3
   15670:	bl	12418 <__assert_fail@plt>
   15674:	str	r1, [r0, #20]
   15678:	ldr	r7, [r4, #20]
   1567c:	ldr	r0, [r4, #24]
   15680:	add	r1, r7, r6, lsl #2
   15684:	cmp	r1, r0
   15688:	str	r1, [r4, #20]
   1568c:	bcs	156a0 <flatcc_builder_create_offset_vector@@Base+0xe0>
   15690:	ldr	r0, [r4, #16]
   15694:	adds	r0, r0, r7
   15698:	bne	15708 <flatcc_builder_create_offset_vector@@Base+0x148>
   1569c:	b	155ec <flatcc_builder_create_offset_vector@@Base+0x2c>
   156a0:	ldr	r2, [r4, #28]
   156a4:	ldr	r0, [r4, #40]	; 0x28
   156a8:	ldr	r5, [r4, #48]	; 0x30
   156ac:	mov	r3, #1
   156b0:	str	r3, [sp]
   156b4:	mov	r3, #1
   156b8:	add	r1, r1, r2
   156bc:	add	r2, r1, #1
   156c0:	add	r1, r4, #60	; 0x3c
   156c4:	blx	r5
   156c8:	cmp	r0, #0
   156cc:	bne	155ec <flatcc_builder_create_offset_vector@@Base+0x2c>
   156d0:	ldr	r1, [r4, #28]
   156d4:	ldr	r0, [r4, #60]	; 0x3c
   156d8:	ldr	r3, [r4, #64]	; 0x40
   156dc:	ldr	r2, [r4, #32]
   156e0:	add	r0, r0, r1
   156e4:	sub	r1, r3, r1
   156e8:	mvn	r3, #3
   156ec:	cmn	r1, #4
   156f0:	str	r0, [r4, #16]
   156f4:	movcs	r1, r3
   156f8:	str	r1, [r4, #24]
   156fc:	str	r3, [r2, #4]
   15700:	adds	r0, r0, r7
   15704:	beq	155ec <flatcc_builder_create_offset_vector@@Base+0x2c>
   15708:	lsl	r2, r6, #2
   1570c:	mov	r1, r8
   15710:	bl	12388 <memcpy@plt>
   15714:	mov	r0, r4
   15718:	sub	sp, fp, #24
   1571c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15720:	b	15730 <flatcc_builder_end_offset_vector@@Base>
   15724:	andeq	r4, r0, r2, ror #18
   15728:	muleq	r0, r8, r8
   1572c:	andeq	r4, r0, r5, ror r9

00015730 <flatcc_builder_end_offset_vector@@Base>:
   15730:	push	{r4, r5, fp, lr}
   15734:	add	fp, sp, #8
   15738:	mov	r4, r0
   1573c:	ldr	r0, [r0, #32]
   15740:	ldrh	r1, [r0, #14]
   15744:	cmp	r1, #5
   15748:	bne	157e8 <flatcc_builder_end_offset_vector@@Base+0xb8>
   1574c:	ldr	r2, [r0, #20]
   15750:	ldr	r1, [r4, #16]
   15754:	mov	r0, r4
   15758:	mov	r3, #0
   1575c:	bl	1684c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15760:	mov	r5, r0
   15764:	cmp	r0, #0
   15768:	beq	157e0 <flatcc_builder_end_offset_vector@@Base+0xb0>
   1576c:	ldr	r0, [r4, #16]
   15770:	ldr	r2, [r4, #20]
   15774:	mov	r1, #0
   15778:	bl	123f4 <memset@plt>
   1577c:	ldr	r0, [r4, #32]
   15780:	ldr	r1, [r4, #60]	; 0x3c
   15784:	ldr	ip, [r4, #64]	; 0x40
   15788:	ldr	r3, [r0, #8]
   1578c:	str	r3, [r4, #20]
   15790:	ldr	r3, [r0]
   15794:	str	r3, [r4, #28]
   15798:	add	r1, r1, r3
   1579c:	ldr	r2, [r0, #4]
   157a0:	str	r1, [r4, #16]
   157a4:	sub	r1, ip, r3
   157a8:	cmp	r1, r2
   157ac:	movhi	r1, r2
   157b0:	str	r1, [r4, #24]
   157b4:	ldrh	r1, [r4, #130]	; 0x82
   157b8:	ldrh	r2, [r4, #128]	; 0x80
   157bc:	cmp	r2, r1
   157c0:	strhcc	r1, [r4, #128]	; 0x80
   157c4:	ldrh	r1, [r0, #12]
   157c8:	sub	r0, r0, #36	; 0x24
   157cc:	str	r0, [r4, #32]
   157d0:	strh	r1, [r4, #130]	; 0x82
   157d4:	ldr	r0, [r4, #156]	; 0x9c
   157d8:	sub	r0, r0, #1
   157dc:	str	r0, [r4, #156]	; 0x9c
   157e0:	mov	r0, r5
   157e4:	pop	{r4, r5, fp, pc}
   157e8:	ldr	r0, [pc, #24]	; 15808 <flatcc_builder_end_offset_vector@@Base+0xd8>
   157ec:	ldr	r1, [pc, #24]	; 1580c <flatcc_builder_end_offset_vector@@Base+0xdc>
   157f0:	ldr	r3, [pc, #24]	; 15810 <flatcc_builder_end_offset_vector@@Base+0xe0>
   157f4:	movw	r2, #1480	; 0x5c8
   157f8:	add	r0, pc, r0
   157fc:	add	r1, pc, r1
   15800:	add	r3, pc, r3
   15804:	bl	12418 <__assert_fail@plt>
   15808:	andeq	r3, r0, fp, lsr fp
   1580c:	andeq	r3, r0, r4, lsl #14
   15810:	andeq	r4, r0, r2, ror #2

00015814 <flatcc_builder_start_string@@Base>:
   15814:	push	{r4, r5, fp, lr}
   15818:	add	fp, sp, #8
   1581c:	mov	r1, #1
   15820:	mov	r4, r0
   15824:	mov	r5, #1
   15828:	bl	144b0 <flatcc_builder_start_buffer@@Base+0xc0>
   1582c:	mov	r1, r0
   15830:	mvn	r0, #0
   15834:	cmp	r1, #0
   15838:	popne	{r4, r5, fp, pc}
   1583c:	ldr	r0, [r4, #32]
   15840:	mov	r2, #6
   15844:	str	r5, [r0, #16]
   15848:	mov	r0, #0
   1584c:	ldr	r1, [r4, #32]
   15850:	str	r0, [r1, #20]
   15854:	ldr	r1, [r4, #32]
   15858:	strh	r2, [r1, #14]
   1585c:	ldr	r2, [r4, #28]
   15860:	ldr	r3, [r4, #60]	; 0x3c
   15864:	ldr	r5, [r4, #64]	; 0x40
   15868:	add	r3, r3, r2
   1586c:	sub	r2, r5, r2
   15870:	str	r3, [r4, #16]
   15874:	mvn	r3, #3
   15878:	cmn	r2, #4
   1587c:	movcs	r2, r3
   15880:	str	r2, [r4, #24]
   15884:	str	r3, [r1, #4]
   15888:	pop	{r4, r5, fp, pc}

0001588c <flatcc_builder_reserve_table@@Base>:
   1588c:	push	{r4, r5, r6, sl, fp, lr}
   15890:	add	fp, sp, #16
   15894:	sub	sp, sp, #8
   15898:	cmn	r1, #1
   1589c:	ble	15974 <flatcc_builder_reserve_table@@Base+0xe8>
   158a0:	mov	r4, r0
   158a4:	ldr	r0, [r0, #32]
   158a8:	mov	r5, r1
   158ac:	ldr	r1, [r4, #56]	; 0x38
   158b0:	ldrh	r2, [r0, #28]
   158b4:	ldr	r0, [r0, #16]
   158b8:	add	r6, r0, r2, lsl #1
   158bc:	add	r0, r6, r5, lsl #1
   158c0:	add	r2, r0, #4
   158c4:	cmp	r2, r1
   158c8:	bls	158f0 <flatcc_builder_reserve_table@@Base+0x64>
   158cc:	ldr	r0, [r4, #40]	; 0x28
   158d0:	ldr	ip, [r4, #48]	; 0x30
   158d4:	mov	r3, #0
   158d8:	add	r1, r4, #52	; 0x34
   158dc:	str	r3, [sp]
   158e0:	mov	r3, #1
   158e4:	blx	ip
   158e8:	cmp	r0, #0
   158ec:	bne	15994 <flatcc_builder_reserve_table@@Base+0x108>
   158f0:	ldr	r0, [r4, #52]	; 0x34
   158f4:	adds	r0, r0, r6
   158f8:	str	r0, [r4, #4]
   158fc:	beq	15968 <flatcc_builder_reserve_table@@Base+0xdc>
   15900:	add	r0, r0, #4
   15904:	lsl	r1, r5, #1
   15908:	str	r0, [r4, #4]
   1590c:	ldr	r0, [r4, #32]
   15910:	ldr	r3, [r4, #80]	; 0x50
   15914:	ldr	r5, [r0, #20]
   15918:	orr	r0, r1, #1
   1591c:	add	r2, r5, r0
   15920:	cmp	r2, r3
   15924:	bls	1594c <flatcc_builder_reserve_table@@Base+0xc0>
   15928:	ldr	r0, [r4, #40]	; 0x28
   1592c:	ldr	r6, [r4, #48]	; 0x30
   15930:	mov	r3, #3
   15934:	add	r1, r4, #76	; 0x4c
   15938:	str	r3, [sp]
   1593c:	mov	r3, #0
   15940:	blx	r6
   15944:	cmp	r0, #0
   15948:	bne	15994 <flatcc_builder_reserve_table@@Base+0x108>
   1594c:	ldr	r0, [r4, #76]	; 0x4c
   15950:	adds	r0, r0, r5
   15954:	str	r0, [r4]
   15958:	mov	r0, #0
   1595c:	mvneq	r0, #0
   15960:	sub	sp, fp, #16
   15964:	pop	{r4, r5, r6, sl, fp, pc}
   15968:	mvn	r0, #0
   1596c:	sub	sp, fp, #16
   15970:	pop	{r4, r5, r6, sl, fp, pc}
   15974:	ldr	r0, [pc, #56]	; 159b4 <flatcc_builder_reserve_table@@Base+0x128>
   15978:	ldr	r1, [pc, #56]	; 159b8 <flatcc_builder_reserve_table@@Base+0x12c>
   1597c:	ldr	r3, [pc, #56]	; 159bc <flatcc_builder_reserve_table@@Base+0x130>
   15980:	movw	r2, #1065	; 0x429
   15984:	add	r0, pc, r0
   15988:	add	r1, pc, r1
   1598c:	add	r3, pc, r3
   15990:	bl	12418 <__assert_fail@plt>
   15994:	ldr	r0, [pc, #36]	; 159c0 <flatcc_builder_reserve_table@@Base+0x134>
   15998:	ldr	r1, [pc, #36]	; 159c4 <flatcc_builder_reserve_table@@Base+0x138>
   1599c:	ldr	r3, [pc, #36]	; 159c8 <flatcc_builder_reserve_table@@Base+0x13c>
   159a0:	mov	r2, #308	; 0x134
   159a4:	add	r0, pc, r0
   159a8:	add	r1, pc, r1
   159ac:	add	r3, pc, r3
   159b0:	bl	12418 <__assert_fail@plt>
   159b4:	strdeq	r3, [r0], -r6
   159b8:	andeq	r3, r0, r8, ror r5
   159bc:	andeq	r3, r0, sp, lsr #25
   159c0:	andeq	r4, r0, r9, lsl r7
   159c4:	andeq	r3, r0, r8, asr r5
   159c8:	andeq	r4, r0, fp, asr #10

000159cc <flatcc_builder_start_table@@Base>:
   159cc:	push	{r4, r5, r6, r7, fp, lr}
   159d0:	add	fp, sp, #16
   159d4:	sub	sp, sp, #8
   159d8:	mov	r6, r1
   159dc:	mov	r1, #4
   159e0:	mov	r4, r0
   159e4:	bl	144b0 <flatcc_builder_start_buffer@@Base+0xc0>
   159e8:	mvn	r5, #0
   159ec:	cmp	r0, #0
   159f0:	beq	15a00 <flatcc_builder_start_table@@Base+0x34>
   159f4:	mov	r0, r5
   159f8:	sub	sp, fp, #16
   159fc:	pop	{r4, r5, r6, r7, fp, pc}
   15a00:	mov	r1, r4
   15a04:	ldr	r2, [r4, #4]
   15a08:	ldr	r3, [r4, #32]
   15a0c:	ldr	r0, [r1, #52]!	; 0x34
   15a10:	sub	r0, r2, r0
   15a14:	str	r0, [r3, #16]
   15a18:	ldr	r0, [r4]
   15a1c:	ldr	r3, [r4, #76]	; 0x4c
   15a20:	ldr	r2, [r4, #32]
   15a24:	sub	r0, r0, r3
   15a28:	mov	r3, #0
   15a2c:	str	r0, [r2, #20]
   15a30:	ldr	r0, [r4, #12]
   15a34:	ldr	r2, [r4, #32]
   15a38:	str	r0, [r2, #24]
   15a3c:	ldr	r0, [r4, #32]
   15a40:	ldrh	r2, [r4, #8]
   15a44:	strh	r2, [r0, #28]
   15a48:	movw	r0, #15186	; 0x3b52
   15a4c:	strh	r3, [r4, #8]
   15a50:	mov	r2, #3
   15a54:	movt	r0, #12137	; 0x2f69
   15a58:	str	r0, [r4, #12]
   15a5c:	ldr	r0, [r4, #32]
   15a60:	strh	r2, [r0, #14]
   15a64:	ldrh	r2, [r0, #28]
   15a68:	ldr	r0, [r0, #16]
   15a6c:	add	r7, r0, r2, lsl #1
   15a70:	add	r0, r7, r6, lsl #1
   15a74:	add	r2, r0, #4
   15a78:	ldr	r0, [r4, #56]	; 0x38
   15a7c:	cmp	r2, r0
   15a80:	bls	15aa0 <flatcc_builder_start_table@@Base+0xd4>
   15a84:	ldr	r0, [r4, #40]	; 0x28
   15a88:	ldr	ip, [r4, #48]	; 0x30
   15a8c:	str	r3, [sp]
   15a90:	mov	r3, #1
   15a94:	blx	ip
   15a98:	cmp	r0, #0
   15a9c:	bne	15b44 <flatcc_builder_start_table@@Base+0x178>
   15aa0:	ldr	r0, [r4, #52]	; 0x34
   15aa4:	adds	r0, r0, r7
   15aa8:	str	r0, [r4, #4]
   15aac:	beq	159f4 <flatcc_builder_start_table@@Base+0x28>
   15ab0:	add	r0, r0, #4
   15ab4:	lsl	r1, r6, #1
   15ab8:	str	r0, [r4, #4]
   15abc:	ldr	r0, [r4, #32]
   15ac0:	ldr	r3, [r4, #80]	; 0x50
   15ac4:	ldr	r6, [r0, #20]
   15ac8:	orr	r0, r1, #1
   15acc:	add	r2, r6, r0
   15ad0:	cmp	r2, r3
   15ad4:	bls	15afc <flatcc_builder_start_table@@Base+0x130>
   15ad8:	ldr	r0, [r4, #40]	; 0x28
   15adc:	ldr	r7, [r4, #48]	; 0x30
   15ae0:	mov	r3, #3
   15ae4:	add	r1, r4, #76	; 0x4c
   15ae8:	str	r3, [sp]
   15aec:	mov	r3, #0
   15af0:	blx	r7
   15af4:	cmp	r0, #0
   15af8:	bne	15b44 <flatcc_builder_start_table@@Base+0x178>
   15afc:	ldr	r0, [r4, #76]	; 0x4c
   15b00:	adds	r0, r0, r6
   15b04:	str	r0, [r4]
   15b08:	beq	159f4 <flatcc_builder_start_table@@Base+0x28>
   15b0c:	ldr	r0, [r4, #28]
   15b10:	ldr	r2, [r4, #60]	; 0x3c
   15b14:	ldr	r3, [r4, #64]	; 0x40
   15b18:	ldr	r1, [r4, #32]
   15b1c:	mov	r5, #0
   15b20:	add	r2, r2, r0
   15b24:	sub	r0, r3, r0
   15b28:	str	r2, [r4, #16]
   15b2c:	movw	r2, #65532	; 0xfffc
   15b30:	cmp	r0, r2
   15b34:	movcs	r0, r2
   15b38:	str	r0, [r4, #24]
   15b3c:	str	r2, [r1, #4]
   15b40:	b	159f4 <flatcc_builder_start_table@@Base+0x28>
   15b44:	ldr	r0, [pc, #24]	; 15b64 <flatcc_builder_start_table@@Base+0x198>
   15b48:	ldr	r1, [pc, #24]	; 15b68 <flatcc_builder_start_table@@Base+0x19c>
   15b4c:	ldr	r3, [pc, #24]	; 15b6c <flatcc_builder_start_table@@Base+0x1a0>
   15b50:	mov	r2, #308	; 0x134
   15b54:	add	r0, pc, r0
   15b58:	add	r1, pc, r1
   15b5c:	add	r3, pc, r3
   15b60:	bl	12418 <__assert_fail@plt>
   15b64:	andeq	r4, r0, r9, ror #10
   15b68:	andeq	r3, r0, r8, lsr #7
   15b6c:	muleq	r0, fp, r3

00015b70 <flatcc_builder_create_vtable@@Base>:
   15b70:	push	{r4, r5, fp, lr}
   15b74:	add	fp, sp, #8
   15b78:	sub	sp, sp, #80	; 0x50
   15b7c:	mov	r3, r2
   15b80:	mov	r2, #0
   15b84:	mov	r4, r0
   15b88:	cmp	r3, #0
   15b8c:	str	r2, [sp, #12]
   15b90:	str	r2, [sp, #8]
   15b94:	movne	r2, #1
   15b98:	strne	r3, [sp, #20]
   15b9c:	strne	r1, [sp, #16]
   15ba0:	strne	r3, [sp, #8]
   15ba4:	strne	r2, [sp, #12]
   15ba8:	ldr	r0, [r4, #152]	; 0x98
   15bac:	cmp	r0, #0
   15bb0:	bne	15bc0 <flatcc_builder_create_vtable@@Base+0x50>
   15bb4:	ldr	r0, [r4, #180]	; 0xb4
   15bb8:	cmp	r0, #0
   15bbc:	beq	15c1c <flatcc_builder_create_vtable@@Base+0xac>
   15bc0:	cmp	r3, #0
   15bc4:	beq	15c60 <flatcc_builder_create_vtable@@Base+0xf0>
   15bc8:	ldr	r0, [r4, #136]	; 0x88
   15bcc:	ldr	ip, [r4, #44]	; 0x2c
   15bd0:	add	r1, sp, #8
   15bd4:	add	r1, r1, #8
   15bd8:	sub	r5, r0, r3
   15bdc:	ldr	r0, [r4, #36]	; 0x24
   15be0:	str	r3, [sp]
   15be4:	mov	r3, r5
   15be8:	blx	ip
   15bec:	cmp	r0, #0
   15bf0:	bne	15c80 <flatcc_builder_create_vtable@@Base+0x110>
   15bf4:	cmp	r5, #0
   15bf8:	str	r5, [r4, #136]	; 0x88
   15bfc:	beq	15c10 <flatcc_builder_create_vtable@@Base+0xa0>
   15c00:	add	r1, r5, #1
   15c04:	mov	r0, r1
   15c08:	sub	sp, fp, #8
   15c0c:	pop	{r4, r5, fp, pc}
   15c10:	mov	r0, #0
   15c14:	sub	sp, fp, #8
   15c18:	pop	{r4, r5, fp, pc}
   15c1c:	ldr	r5, [r4, #140]	; 0x8c
   15c20:	ldr	r0, [r4, #36]	; 0x24
   15c24:	ldr	ip, [r4, #44]	; 0x2c
   15c28:	add	r1, r5, r3
   15c2c:	str	r1, [r4, #140]	; 0x8c
   15c30:	add	r1, sp, #8
   15c34:	str	r3, [sp]
   15c38:	mov	r3, r5
   15c3c:	add	r1, r1, #8
   15c40:	blx	ip
   15c44:	cmp	r0, #0
   15c48:	bne	15ca0 <flatcc_builder_create_vtable@@Base+0x130>
   15c4c:	adds	r1, r5, #1
   15c50:	mov	r0, #0
   15c54:	movcc	r0, r1
   15c58:	sub	sp, fp, #8
   15c5c:	pop	{r4, r5, fp, pc}
   15c60:	ldr	r0, [pc, #100]	; 15ccc <flatcc_builder_create_vtable@@Base+0x15c>
   15c64:	ldr	r1, [pc, #100]	; 15cd0 <flatcc_builder_create_vtable@@Base+0x160>
   15c68:	ldr	r3, [pc, #100]	; 15cd4 <flatcc_builder_create_vtable@@Base+0x164>
   15c6c:	movw	r2, #647	; 0x287
   15c70:	add	r0, pc, r0
   15c74:	add	r1, pc, r1
   15c78:	add	r3, pc, r3
   15c7c:	bl	12418 <__assert_fail@plt>
   15c80:	ldr	r0, [pc, #80]	; 15cd8 <flatcc_builder_create_vtable@@Base+0x168>
   15c84:	ldr	r1, [pc, #80]	; 15cdc <flatcc_builder_create_vtable@@Base+0x16c>
   15c88:	ldr	r3, [pc, #80]	; 15ce0 <flatcc_builder_create_vtable@@Base+0x170>
   15c8c:	movw	r2, #651	; 0x28b
   15c90:	add	r0, pc, r0
   15c94:	add	r1, pc, r1
   15c98:	add	r3, pc, r3
   15c9c:	bl	12418 <__assert_fail@plt>
   15ca0:	ldr	r0, [pc, #24]	; 15cc0 <flatcc_builder_create_vtable@@Base+0x150>
   15ca4:	ldr	r1, [pc, #24]	; 15cc4 <flatcc_builder_create_vtable@@Base+0x154>
   15ca8:	ldr	r3, [pc, #24]	; 15cc8 <flatcc_builder_create_vtable@@Base+0x158>
   15cac:	movw	r2, #677	; 0x2a5
   15cb0:	add	r0, pc, r0
   15cb4:	add	r1, pc, r1
   15cb8:	add	r3, pc, r3
   15cbc:	bl	12418 <__assert_fail@plt>
   15cc0:	andeq	r4, r0, sp, lsl #8
   15cc4:	andeq	r3, r0, ip, asr #4
   15cc8:	andeq	r4, r0, r0, lsl #7
   15ccc:	andeq	r4, r0, sp, asr #8
   15cd0:	andeq	r3, r0, ip, lsl #5
   15cd4:	andeq	r4, r0, r4, lsl #6
   15cd8:	andeq	r4, r0, sp, lsr #8
   15cdc:	andeq	r3, r0, ip, ror #4
   15ce0:	andeq	r4, r0, r4, ror #5

00015ce4 <flatcc_builder_create_cached_vtable@@Base>:
   15ce4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ce8:	add	fp, sp, #28
   15cec:	sub	sp, sp, #20
   15cf0:	mov	sl, r0
   15cf4:	ldr	r0, [r0, #116]	; 0x74
   15cf8:	mov	r8, r3
   15cfc:	mov	r5, r2
   15d00:	str	r1, [sp, #16]
   15d04:	cmp	r0, #0
   15d08:	beq	15dac <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15d0c:	ldr	r1, [sl, #92]	; 0x5c
   15d10:	rsb	r0, r0, #32
   15d14:	lsr	r0, r8, r0
   15d18:	add	r6, r1, r0, lsl #2
   15d1c:	cmp	r6, #0
   15d20:	beq	15e70 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   15d24:	ldr	r7, [r6]
   15d28:	str	r6, [sp, #12]
   15d2c:	cmp	r7, #0
   15d30:	beq	15e78 <flatcc_builder_create_cached_vtable@@Base+0x194>
   15d34:	ldr	r4, [sl, #68]	; 0x44
   15d38:	ldr	r8, [sl, #100]	; 0x64
   15d3c:	mov	r0, #0
   15d40:	str	r0, [sp, #8]
   15d44:	b	15d58 <flatcc_builder_create_cached_vtable@@Base+0x74>
   15d48:	ldr	r7, [r9, #12]!
   15d4c:	mov	r6, r9
   15d50:	cmp	r7, #0
   15d54:	beq	15e68 <flatcc_builder_create_cached_vtable@@Base+0x184>
   15d58:	add	r9, r8, r7
   15d5c:	mov	r1, r4
   15d60:	ldr	r0, [r9, #8]
   15d64:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   15d68:	cmp	r0, r5
   15d6c:	bne	15d48 <flatcc_builder_create_cached_vtable@@Base+0x64>
   15d70:	ldr	r0, [sp, #16]
   15d74:	mov	r2, r5
   15d78:	bl	123d0 <bcmp@plt>
   15d7c:	cmp	r0, #0
   15d80:	bne	15d48 <flatcc_builder_create_cached_vtable@@Base+0x64>
   15d84:	ldr	r0, [sl, #152]	; 0x98
   15d88:	ldr	r1, [r9, #4]
   15d8c:	cmp	r1, r0
   15d90:	beq	15fdc <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   15d94:	mov	r6, r9
   15d98:	mov	r0, r9
   15d9c:	ldr	r7, [r6, #12]!
   15da0:	cmp	r7, #0
   15da4:	bne	15d40 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   15da8:	b	15e7c <flatcc_builder_create_cached_vtable@@Base+0x198>
   15dac:	ldr	r0, [sl, #124]	; 0x7c
   15db0:	cmp	r0, #0
   15db4:	bne	16028 <flatcc_builder_create_cached_vtable@@Base+0x344>
   15db8:	ldr	r0, [sl, #104]	; 0x68
   15dbc:	add	r7, sl, #100	; 0x64
   15dc0:	cmp	r0, #15
   15dc4:	bhi	15df0 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   15dc8:	ldr	r0, [sl, #40]	; 0x28
   15dcc:	ldr	r6, [sl, #48]	; 0x30
   15dd0:	mov	r1, #6
   15dd4:	mov	r2, #16
   15dd8:	mov	r3, #0
   15ddc:	str	r1, [sp]
   15de0:	mov	r1, r7
   15de4:	blx	r6
   15de8:	cmp	r0, #0
   15dec:	bne	16008 <flatcc_builder_create_cached_vtable@@Base+0x324>
   15df0:	ldr	r0, [r7]
   15df4:	mov	r7, #0
   15df8:	cmp	r0, #0
   15dfc:	beq	15f1c <flatcc_builder_create_cached_vtable@@Base+0x238>
   15e00:	mov	r0, #16
   15e04:	mov	r2, #5
   15e08:	add	r1, sl, #92	; 0x5c
   15e0c:	mov	r3, #1
   15e10:	mov	r4, #256	; 0x100
   15e14:	str	r0, [sl, #124]	; 0x7c
   15e18:	ldr	r0, [sl, #40]	; 0x28
   15e1c:	ldr	r6, [sl, #48]	; 0x30
   15e20:	str	r2, [sp]
   15e24:	mov	r2, #256	; 0x100
   15e28:	blx	r6
   15e2c:	cmp	r0, #0
   15e30:	bne	15f1c <flatcc_builder_create_cached_vtable@@Base+0x238>
   15e34:	ldr	r0, [sl, #96]	; 0x60
   15e38:	mov	r1, r4
   15e3c:	lsl	r4, r4, #1
   15e40:	cmp	r0, r1, lsl #1
   15e44:	bcs	15e38 <flatcc_builder_create_cached_vtable@@Base+0x154>
   15e48:	lsr	r1, r1, #2
   15e4c:	mvn	r0, #0
   15e50:	mov	r2, #1
   15e54:	add	r0, r0, #1
   15e58:	cmp	r1, r2, lsl r0
   15e5c:	bhi	15e54 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15e60:	str	r0, [sl, #116]	; 0x74
   15e64:	b	15d0c <flatcc_builder_create_cached_vtable@@Base+0x28>
   15e68:	ldr	r9, [sp, #8]
   15e6c:	b	15e7c <flatcc_builder_create_cached_vtable@@Base+0x198>
   15e70:	mov	r7, #0
   15e74:	b	15f1c <flatcc_builder_create_cached_vtable@@Base+0x238>
   15e78:	mov	r9, #0
   15e7c:	ldr	r4, [sl, #124]	; 0x7c
   15e80:	ldr	r0, [sl, #104]	; 0x68
   15e84:	add	r7, sl, #100	; 0x64
   15e88:	add	r2, r4, #16
   15e8c:	cmp	r2, r0
   15e90:	bls	15eb8 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   15e94:	ldr	r0, [sl, #40]	; 0x28
   15e98:	ldr	r6, [sl, #48]	; 0x30
   15e9c:	mov	r1, #6
   15ea0:	mov	r3, #0
   15ea4:	str	r1, [sp]
   15ea8:	mov	r1, r7
   15eac:	blx	r6
   15eb0:	cmp	r0, #0
   15eb4:	bne	16008 <flatcc_builder_create_cached_vtable@@Base+0x324>
   15eb8:	ldr	r0, [r7]
   15ebc:	mov	r7, #0
   15ec0:	adds	r4, r0, r4
   15ec4:	beq	15f1c <flatcc_builder_create_cached_vtable@@Base+0x238>
   15ec8:	ldr	r0, [sl, #124]	; 0x7c
   15ecc:	ldr	r1, [sl, #152]	; 0x98
   15ed0:	add	r2, r0, #16
   15ed4:	str	r2, [sl, #124]	; 0x7c
   15ed8:	ldr	r2, [sp, #12]
   15edc:	str	r1, [r4, #4]
   15ee0:	ldr	r1, [r2]
   15ee4:	str	r1, [r4, #12]
   15ee8:	ldr	r1, [sp, #16]
   15eec:	str	r0, [r2]
   15ef0:	mov	r0, sl
   15ef4:	mov	r2, r5
   15ef8:	bl	15b70 <flatcc_builder_create_vtable@@Base>
   15efc:	cmp	r0, #0
   15f00:	str	r0, [r4]
   15f04:	beq	15f1c <flatcc_builder_create_cached_vtable@@Base+0x238>
   15f08:	cmp	r9, #0
   15f0c:	beq	15f28 <flatcc_builder_create_cached_vtable@@Base+0x244>
   15f10:	ldr	r0, [r9, #8]
   15f14:	str	r0, [r4, #8]
   15f18:	ldr	r7, [r4]
   15f1c:	mov	r0, r7
   15f20:	sub	sp, fp, #28
   15f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f28:	ldr	r6, [sl, #120]	; 0x78
   15f2c:	ldr	r0, [sl, #172]	; 0xac
   15f30:	add	r2, r6, r5
   15f34:	cmp	r0, #0
   15f38:	beq	15f74 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15f3c:	cmp	r0, r2
   15f40:	bcs	15f74 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15f44:	ldr	r0, [sl, #116]	; 0x74
   15f48:	cmp	r0, #0
   15f4c:	beq	15f18 <flatcc_builder_create_cached_vtable@@Base+0x234>
   15f50:	ldr	r0, [sl, #92]	; 0x5c
   15f54:	ldr	r2, [sl, #96]	; 0x60
   15f58:	mov	r1, #0
   15f5c:	mov	r5, #0
   15f60:	bl	123f4 <memset@plt>
   15f64:	mov	r0, #16
   15f68:	str	r5, [sl, #120]	; 0x78
   15f6c:	str	r0, [sl, #124]	; 0x7c
   15f70:	b	15f18 <flatcc_builder_create_cached_vtable@@Base+0x234>
   15f74:	ldr	r0, [sl, #72]	; 0x48
   15f78:	add	r7, sl, #68	; 0x44
   15f7c:	cmp	r2, r0
   15f80:	bls	15fa8 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   15f84:	ldr	r0, [sl, #40]	; 0x28
   15f88:	ldr	ip, [sl, #48]	; 0x30
   15f8c:	mov	r1, #2
   15f90:	mov	r3, #0
   15f94:	str	r1, [sp]
   15f98:	mov	r1, r7
   15f9c:	blx	ip
   15fa0:	cmp	r0, #0
   15fa4:	bne	16008 <flatcc_builder_create_cached_vtable@@Base+0x324>
   15fa8:	ldr	r0, [r7]
   15fac:	adds	r0, r0, r6
   15fb0:	beq	15fd4 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   15fb4:	ldr	r1, [sl, #120]	; 0x78
   15fb8:	mov	r2, r5
   15fbc:	str	r1, [r4, #8]
   15fc0:	add	r1, r1, r5
   15fc4:	str	r1, [sl, #120]	; 0x78
   15fc8:	ldr	r1, [sp, #16]
   15fcc:	bl	12388 <memcpy@plt>
   15fd0:	b	15f18 <flatcc_builder_create_cached_vtable@@Base+0x234>
   15fd4:	mvn	r7, #0
   15fd8:	b	15f1c <flatcc_builder_create_cached_vtable@@Base+0x238>
   15fdc:	ldr	r0, [sp, #12]
   15fe0:	cmp	r6, r0
   15fe4:	beq	16000 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   15fe8:	mov	r1, r0
   15fec:	ldr	r0, [r9, #12]
   15ff0:	str	r0, [r6]
   15ff4:	ldr	r0, [r1]
   15ff8:	str	r0, [r9, #12]
   15ffc:	str	r7, [r1]
   16000:	ldr	r7, [r9]
   16004:	b	15f1c <flatcc_builder_create_cached_vtable@@Base+0x238>
   16008:	ldr	r0, [pc, #68]	; 16054 <flatcc_builder_create_cached_vtable@@Base+0x370>
   1600c:	ldr	r1, [pc, #68]	; 16058 <flatcc_builder_create_cached_vtable@@Base+0x374>
   16010:	ldr	r3, [pc, #68]	; 1605c <flatcc_builder_create_cached_vtable@@Base+0x378>
   16014:	mov	r2, #308	; 0x134
   16018:	add	r0, pc, r0
   1601c:	add	r1, pc, r1
   16020:	add	r3, pc, r3
   16024:	bl	12418 <__assert_fail@plt>
   16028:	ldr	r0, [pc, #24]	; 16048 <flatcc_builder_create_cached_vtable@@Base+0x364>
   1602c:	ldr	r1, [pc, #24]	; 1604c <flatcc_builder_create_cached_vtable@@Base+0x368>
   16030:	ldr	r3, [pc, #24]	; 16050 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   16034:	movw	r2, #342	; 0x156
   16038:	add	r0, pc, r0
   1603c:	add	r1, pc, r1
   16040:	add	r3, pc, r3
   16044:	bl	12418 <__assert_fail@plt>
   16048:	andeq	r4, r0, r9, asr #32
   1604c:	andeq	r2, r0, r4, asr #29
   16050:	andeq	r4, r0, r0, asr r0
   16054:	andeq	r4, r0, r5, lsr #1
   16058:	andeq	r2, r0, r4, ror #29
   1605c:	ldrdeq	r3, [r0], -r7

00016060 <flatcc_builder_create_table@@Base>:
   16060:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16064:	add	fp, sp, #24
   16068:	sub	sp, sp, #80	; 0x50
   1606c:	ldr	r5, [fp, #12]
   16070:	cmn	r5, #1
   16074:	ble	161c0 <flatcc_builder_create_table@@Base+0x160>
   16078:	ldr	ip, [fp, #16]
   1607c:	tst	ip, #1
   16080:	beq	161e0 <flatcc_builder_create_table@@Base+0x180>
   16084:	mov	r8, r0
   16088:	ldrh	r0, [r0, #128]	; 0x80
   1608c:	cmp	r3, #4
   16090:	movls	r3, #4
   16094:	cmp	r0, r3
   16098:	strhcc	r3, [r8, #128]	; 0x80
   1609c:	cmp	r5, #1
   160a0:	ldr	r0, [r8, #136]	; 0x88
   160a4:	sub	r4, r0, r2
   160a8:	sub	r0, r3, #1
   160ac:	and	r0, r4, r0
   160b0:	sub	r4, r4, #4
   160b4:	add	r3, ip, r0
   160b8:	sub	r3, r4, r3
   160bc:	add	r3, r3, #1
   160c0:	str	r3, [fp, #-28]	; 0xffffffe4
   160c4:	blt	160f4 <flatcc_builder_create_table@@Base+0x94>
   160c8:	ldr	r3, [fp, #8]
   160cc:	sub	ip, r4, r0
   160d0:	mvn	r4, #3
   160d4:	sub	r4, r4, ip
   160d8:	ldrh	r6, [r3], #2
   160dc:	subs	r5, r5, #1
   160e0:	ldr	r7, [r6, r1]
   160e4:	add	r7, r4, r7
   160e8:	sub	r7, r7, r6
   160ec:	str	r7, [r6, r1]
   160f0:	bne	160d8 <flatcc_builder_create_table@@Base+0x78>
   160f4:	mov	r4, #4
   160f8:	sub	r3, fp, #28
   160fc:	cmp	r2, #0
   16100:	str	r4, [sp, #16]
   16104:	str	r3, [sp, #12]
   16108:	mov	r3, #1
   1610c:	str	r4, [sp, #4]
   16110:	addne	r4, r2, #4
   16114:	str	r3, [sp, #8]
   16118:	movne	r3, #2
   1611c:	strne	r2, [sp, #24]
   16120:	strne	r1, [sp, #20]
   16124:	strne	r3, [sp, #8]
   16128:	strne	r4, [sp, #4]
   1612c:	cmp	r0, #0
   16130:	beq	1615c <flatcc_builder_create_table@@Base+0xfc>
   16134:	add	r4, r4, r0
   16138:	add	r1, sp, #4
   1613c:	str	r4, [sp, #4]
   16140:	add	r1, r1, r3, lsl #3
   16144:	add	r3, r3, #1
   16148:	ldr	r2, [pc, #208]	; 16220 <flatcc_builder_create_table@@Base+0x1c0>
   1614c:	ldr	r2, [pc, r2]
   16150:	str	r2, [r1, #8]
   16154:	str	r0, [r1, #12]
   16158:	str	r3, [sp, #8]
   1615c:	cmp	r4, #0
   16160:	ble	16200 <flatcc_builder_create_table@@Base+0x1a0>
   16164:	ldr	r0, [r8, #136]	; 0x88
   16168:	ldr	r7, [r8, #44]	; 0x2c
   1616c:	add	r1, sp, #4
   16170:	mov	r2, r3
   16174:	add	r1, r1, #8
   16178:	sub	r5, r0, r4
   1617c:	ldr	r0, [r8, #36]	; 0x24
   16180:	str	r4, [sp]
   16184:	mov	r3, r5
   16188:	blx	r7
   1618c:	cmp	r0, #0
   16190:	streq	r5, [r8, #136]	; 0x88
   16194:	moveq	r0, r5
   16198:	subeq	sp, fp, #24
   1619c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   161a0:	ldr	r0, [pc, #160]	; 16248 <flatcc_builder_create_table@@Base+0x1e8>
   161a4:	ldr	r1, [pc, #160]	; 1624c <flatcc_builder_create_table@@Base+0x1ec>
   161a8:	ldr	r3, [pc, #160]	; 16250 <flatcc_builder_create_table@@Base+0x1f0>
   161ac:	movw	r2, #651	; 0x28b
   161b0:	add	r0, pc, r0
   161b4:	add	r1, pc, r1
   161b8:	add	r3, pc, r3
   161bc:	bl	12418 <__assert_fail@plt>
   161c0:	ldr	r0, [pc, #92]	; 16224 <flatcc_builder_create_table@@Base+0x1c4>
   161c4:	ldr	r1, [pc, #92]	; 16228 <flatcc_builder_create_table@@Base+0x1c8>
   161c8:	ldr	r3, [pc, #92]	; 1622c <flatcc_builder_create_table@@Base+0x1cc>
   161cc:	movw	r2, #1237	; 0x4d5
   161d0:	add	r0, pc, r0
   161d4:	add	r1, pc, r1
   161d8:	add	r3, pc, r3
   161dc:	bl	12418 <__assert_fail@plt>
   161e0:	ldr	r0, [pc, #72]	; 16230 <flatcc_builder_create_table@@Base+0x1d0>
   161e4:	ldr	r1, [pc, #72]	; 16234 <flatcc_builder_create_table@@Base+0x1d4>
   161e8:	ldr	r3, [pc, #72]	; 16238 <flatcc_builder_create_table@@Base+0x1d8>
   161ec:	movw	r2, #1243	; 0x4db
   161f0:	add	r0, pc, r0
   161f4:	add	r1, pc, r1
   161f8:	add	r3, pc, r3
   161fc:	bl	12418 <__assert_fail@plt>
   16200:	ldr	r0, [pc, #52]	; 1623c <flatcc_builder_create_table@@Base+0x1dc>
   16204:	ldr	r1, [pc, #52]	; 16240 <flatcc_builder_create_table@@Base+0x1e0>
   16208:	ldr	r3, [pc, #52]	; 16244 <flatcc_builder_create_table@@Base+0x1e4>
   1620c:	movw	r2, #647	; 0x287
   16210:	add	r0, pc, r0
   16214:	add	r1, pc, r1
   16218:	add	r3, pc, r3
   1621c:	bl	12418 <__assert_fail@plt>
   16220:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   16224:	andeq	r3, r0, r3, lsr #9
   16228:	andeq	r2, r0, ip, lsr #26
   1622c:	andeq	r3, r0, sp, lsr #9
   16230:	andeq	r3, r0, r1, lsr r5
   16234:	andeq	r2, r0, ip, lsl #26
   16238:	andeq	r3, r0, sp, lsl #9
   1623c:	andeq	r3, r0, sp, lsr #29
   16240:	andeq	r2, r0, ip, ror #25
   16244:	andeq	r3, r0, r4, ror #26
   16248:	andeq	r3, r0, sp, lsl #30
   1624c:	andeq	r2, r0, ip, asr #26
   16250:	andeq	r3, r0, r4, asr #27

00016254 <flatcc_builder_check_required_field@@Base>:
   16254:	push	{fp, lr}
   16258:	mov	fp, sp
   1625c:	ldr	r2, [r0, #32]
   16260:	ldrh	r2, [r2, #14]
   16264:	cmp	r2, #3
   16268:	bne	16298 <flatcc_builder_check_required_field@@Base+0x44>
   1626c:	ldrh	r3, [r0, #8]
   16270:	mov	r2, #0
   16274:	cmp	r3, r1
   16278:	bls	16290 <flatcc_builder_check_required_field@@Base+0x3c>
   1627c:	ldr	r0, [r0, #4]
   16280:	add	r0, r0, r1, lsl #1
   16284:	ldrh	r2, [r0]
   16288:	cmp	r2, #0
   1628c:	movwne	r2, #1
   16290:	mov	r0, r2
   16294:	pop	{fp, pc}
   16298:	ldr	r0, [pc, #24]	; 162b8 <flatcc_builder_check_required_field@@Base+0x64>
   1629c:	ldr	r1, [pc, #24]	; 162bc <flatcc_builder_check_required_field@@Base+0x68>
   162a0:	ldr	r3, [pc, #24]	; 162c0 <flatcc_builder_check_required_field@@Base+0x6c>
   162a4:	movw	r2, #1272	; 0x4f8
   162a8:	add	r0, pc, r0
   162ac:	add	r1, pc, r1
   162b0:	add	r3, pc, r3
   162b4:	bl	12418 <__assert_fail@plt>
   162b8:	andeq	r3, r0, r4, lsl #9
   162bc:	andeq	r2, r0, r4, asr ip
   162c0:	andeq	r3, r0, r7, lsr #9

000162c4 <flatcc_builder_check_union_field@@Base>:
   162c4:	push	{fp, lr}
   162c8:	mov	fp, sp
   162cc:	mov	r2, r0
   162d0:	ldr	r0, [r0, #32]
   162d4:	ldrh	r0, [r0, #14]
   162d8:	cmp	r0, #3
   162dc:	bne	1633c <flatcc_builder_check_union_field@@Base+0x78>
   162e0:	mov	r0, #0
   162e4:	cmp	r1, #0
   162e8:	beq	16328 <flatcc_builder_check_union_field@@Base+0x64>
   162ec:	ldrh	r3, [r2, #8]
   162f0:	cmp	r3, r1
   162f4:	popls	{fp, pc}
   162f8:	ldr	r0, [r2, #4]
   162fc:	add	r0, r0, r1, lsl #1
   16300:	ldrh	r1, [r0, #-2]
   16304:	cmp	r1, #0
   16308:	beq	1632c <flatcc_builder_check_union_field@@Base+0x68>
   1630c:	ldr	r2, [r2, #16]
   16310:	ldrh	r0, [r0]
   16314:	ldrb	r1, [r2, r1]
   16318:	cmp	r1, #0
   1631c:	beq	16330 <flatcc_builder_check_union_field@@Base+0x6c>
   16320:	cmp	r0, #0
   16324:	movwne	r0, #1
   16328:	pop	{fp, pc}
   1632c:	ldrh	r0, [r0]
   16330:	clz	r0, r0
   16334:	lsr	r0, r0, #5
   16338:	pop	{fp, pc}
   1633c:	ldr	r0, [pc, #24]	; 1635c <flatcc_builder_check_union_field@@Base+0x98>
   16340:	ldr	r1, [pc, #24]	; 16360 <flatcc_builder_check_union_field@@Base+0x9c>
   16344:	ldr	r3, [pc, #24]	; 16364 <flatcc_builder_check_union_field@@Base+0xa0>
   16348:	movw	r2, #1279	; 0x4ff
   1634c:	add	r0, pc, r0
   16350:	add	r1, pc, r1
   16354:	add	r3, pc, r3
   16358:	bl	12418 <__assert_fail@plt>
   1635c:	andeq	r3, r0, r0, ror #7
   16360:			; <UNDEFINED> instruction: 0x00002bb0
   16364:	andeq	r3, r0, r6, asr r4

00016368 <flatcc_builder_check_required@@Base>:
   16368:	push	{fp, lr}
   1636c:	mov	fp, sp
   16370:	mov	r3, r0
   16374:	ldr	r0, [r0, #32]
   16378:	ldrh	r0, [r0, #14]
   1637c:	cmp	r0, #3
   16380:	bne	163c8 <flatcc_builder_check_required@@Base+0x60>
   16384:	ldrh	ip, [r3, #8]
   16388:	mov	r0, #0
   1638c:	cmp	ip, r2
   16390:	poplt	{fp, pc}
   16394:	cmp	r2, #1
   16398:	blt	163c0 <flatcc_builder_check_required@@Base+0x58>
   1639c:	ldr	ip, [r3, #4]
   163a0:	ldrh	r3, [r1]
   163a4:	add	r3, ip, r3, lsl #1
   163a8:	ldrh	r3, [r3]
   163ac:	cmp	r3, #0
   163b0:	beq	163c4 <flatcc_builder_check_required@@Base+0x5c>
   163b4:	add	r1, r1, #2
   163b8:	subs	r2, r2, #1
   163bc:	bne	163a0 <flatcc_builder_check_required@@Base+0x38>
   163c0:	mov	r0, #1
   163c4:	pop	{fp, pc}
   163c8:	ldr	r0, [pc, #24]	; 163e8 <flatcc_builder_check_required@@Base+0x80>
   163cc:	ldr	r1, [pc, #24]	; 163ec <flatcc_builder_check_required@@Base+0x84>
   163d0:	ldr	r3, [pc, #24]	; 163f0 <flatcc_builder_check_required@@Base+0x88>
   163d4:	movw	r2, #1297	; 0x511
   163d8:	add	r0, pc, r0
   163dc:	add	r1, pc, r1
   163e0:	add	r3, pc, r3
   163e4:	bl	12418 <__assert_fail@plt>
   163e8:	andeq	r3, r0, r4, asr r3
   163ec:	andeq	r2, r0, r4, lsr #22
   163f0:	andeq	r3, r0, sl, lsl r4

000163f4 <flatcc_builder_end_table@@Base>:
   163f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   163f8:	add	fp, sp, #24
   163fc:	sub	sp, sp, #16
   16400:	mov	r4, r0
   16404:	ldr	r0, [r0, #32]
   16408:	ldrh	r0, [r0, #14]
   1640c:	cmp	r0, #3
   16410:	bne	1658c <flatcc_builder_end_table@@Base+0x198>
   16414:	ldrh	r0, [r4, #8]
   16418:	ldr	r5, [r4, #4]
   1641c:	mov	r1, #4
   16420:	movw	r2, #31153	; 0x79b1
   16424:	movt	r2, #40503	; 0x9e37
   16428:	add	r0, r1, r0, lsl #1
   1642c:	strh	r0, [r5, #-4]!
   16430:	ldrh	r1, [r4, #20]
   16434:	uxth	r6, r0
   16438:	add	r1, r1, #4
   1643c:	strh	r1, [r5, #2]
   16440:	uxth	r1, r1
   16444:	ldr	r0, [r4, #12]
   16448:	eor	r0, r0, r6
   1644c:	mul	r0, r0, r2
   16450:	eor	r0, r0, r1
   16454:	mov	r1, r5
   16458:	mul	r3, r0, r2
   1645c:	mov	r0, r4
   16460:	mov	r2, r6
   16464:	str	r3, [r4, #12]
   16468:	bl	15ce4 <flatcc_builder_create_cached_vtable@@Base>
   1646c:	cmp	r0, #0
   16470:	beq	1657c <flatcc_builder_end_table@@Base+0x188>
   16474:	mov	r7, r0
   16478:	mov	r0, r5
   1647c:	mov	r1, #0
   16480:	mov	r2, r6
   16484:	mov	r8, #0
   16488:	bl	123f4 <memset@plt>
   1648c:	ldr	r5, [r4, #32]
   16490:	ldr	r0, [r4, #76]	; 0x4c
   16494:	ldr	r6, [r4]
   16498:	ldrh	r3, [r4, #130]	; 0x82
   1649c:	ldr	r1, [r4, #16]
   164a0:	ldr	r2, [r4, #20]
   164a4:	ldr	r5, [r5, #20]
   164a8:	add	r0, r0, r5
   164ac:	sub	r6, r6, r0
   164b0:	asr	r6, r6, #1
   164b4:	stm	sp, {r0, r6, r7}
   164b8:	mov	r0, r4
   164bc:	bl	16060 <flatcc_builder_create_table@@Base>
   164c0:	cmp	r0, #0
   164c4:	beq	16580 <flatcc_builder_end_table@@Base+0x18c>
   164c8:	ldr	r1, [r4, #32]
   164cc:	mov	r5, r0
   164d0:	ldr	r0, [r4, #16]
   164d4:	ldr	r2, [r4, #20]
   164d8:	ldr	r3, [r4, #52]	; 0x34
   164dc:	ldr	r7, [r1, #24]
   164e0:	str	r7, [r4, #12]
   164e4:	ldrh	r7, [r1, #28]
   164e8:	strh	r7, [r4, #8]
   164ec:	ldr	r7, [r1, #16]
   164f0:	add	r3, r3, r7
   164f4:	str	r3, [r4, #4]
   164f8:	ldr	r3, [r4, #76]	; 0x4c
   164fc:	ldr	r1, [r1, #20]
   16500:	add	r1, r3, r1
   16504:	str	r1, [r4]
   16508:	mov	r1, #0
   1650c:	bl	123f4 <memset@plt>
   16510:	ldr	r0, [r4, #32]
   16514:	ldr	r1, [r4, #60]	; 0x3c
   16518:	ldr	r2, [r4, #64]	; 0x40
   1651c:	mov	r8, r5
   16520:	ldr	r3, [r0, #8]
   16524:	str	r3, [r4, #20]
   16528:	ldr	r3, [r0]
   1652c:	str	r3, [r4, #28]
   16530:	add	r1, r1, r3
   16534:	ldr	r7, [r0, #4]
   16538:	str	r1, [r4, #16]
   1653c:	sub	r1, r2, r3
   16540:	cmp	r1, r7
   16544:	movhi	r1, r7
   16548:	str	r1, [r4, #24]
   1654c:	ldrh	r1, [r4, #130]	; 0x82
   16550:	ldrh	r2, [r4, #128]	; 0x80
   16554:	cmp	r2, r1
   16558:	strhcc	r1, [r4, #128]	; 0x80
   1655c:	ldrh	r1, [r0, #12]
   16560:	sub	r0, r0, #36	; 0x24
   16564:	str	r0, [r4, #32]
   16568:	strh	r1, [r4, #130]	; 0x82
   1656c:	ldr	r0, [r4, #156]	; 0x9c
   16570:	sub	r0, r0, #1
   16574:	str	r0, [r4, #156]	; 0x9c
   16578:	b	16580 <flatcc_builder_end_table@@Base+0x18c>
   1657c:	mov	r8, #0
   16580:	mov	r0, r8
   16584:	sub	sp, fp, #24
   16588:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1658c:	ldr	r0, [pc, #24]	; 165ac <flatcc_builder_end_table@@Base+0x1b8>
   16590:	ldr	r1, [pc, #24]	; 165b0 <flatcc_builder_end_table@@Base+0x1bc>
   16594:	ldr	r3, [pc, #24]	; 165b4 <flatcc_builder_end_table@@Base+0x1c0>
   16598:	movw	r2, #1317	; 0x525
   1659c:	add	r0, pc, r0
   165a0:	add	r1, pc, r1
   165a4:	add	r3, pc, r3
   165a8:	bl	12418 <__assert_fail@plt>
   165ac:	muleq	r0, r0, r1
   165b0:	andeq	r2, r0, r0, ror #18
   165b4:			; <UNDEFINED> instruction: 0x000032b0

000165b8 <flatcc_builder_create_vector@@Base>:
   165b8:	push	{r4, r5, r6, r7, fp, lr}
   165bc:	add	fp, sp, #16
   165c0:	sub	sp, sp, #80	; 0x50
   165c4:	mov	r7, r0
   165c8:	ldr	r0, [fp, #12]
   165cc:	cmp	r2, r0
   165d0:	bhi	166cc <flatcc_builder_create_vector@@Base+0x114>
   165d4:	ldr	r0, [fp, #8]
   165d8:	mov	r4, r2
   165dc:	ldrh	r2, [r7, #128]	; 0x80
   165e0:	mov	r5, #4
   165e4:	cmp	r0, #4
   165e8:	movls	r0, r5
   165ec:	cmp	r2, r0
   165f0:	sub	r2, fp, #20
   165f4:	strhcc	r0, [r7, #128]	; 0x80
   165f8:	str	r4, [fp, #-20]	; 0xffffffec
   165fc:	sub	r0, r0, #1
   16600:	ldr	ip, [r7, #136]	; 0x88
   16604:	str	r5, [sp, #16]
   16608:	str	r2, [sp, #12]
   1660c:	mov	r2, #1
   16610:	str	r5, [sp, #4]
   16614:	str	r2, [sp, #8]
   16618:	mls	r6, r3, r4, ip
   1661c:	mul	r3, r3, r4
   16620:	cmp	r3, #0
   16624:	and	r0, r6, r0
   16628:	movne	r2, #2
   1662c:	addne	r5, r3, #4
   16630:	strne	r3, [sp, #24]
   16634:	strne	r1, [sp, #20]
   16638:	strne	r2, [sp, #8]
   1663c:	strne	r5, [sp, #4]
   16640:	cmp	r0, #0
   16644:	beq	16670 <flatcc_builder_create_vector@@Base+0xb8>
   16648:	add	r5, r5, r0
   1664c:	add	r1, sp, #4
   16650:	str	r5, [sp, #4]
   16654:	add	r1, r1, r2, lsl #3
   16658:	add	r2, r2, #1
   1665c:	ldr	r3, [pc, #168]	; 1670c <flatcc_builder_create_vector@@Base+0x154>
   16660:	ldr	r3, [pc, r3]
   16664:	str	r3, [r1, #8]
   16668:	str	r0, [r1, #12]
   1666c:	str	r2, [sp, #8]
   16670:	cmp	r5, #0
   16674:	ble	166ec <flatcc_builder_create_vector@@Base+0x134>
   16678:	ldr	r0, [r7, #36]	; 0x24
   1667c:	ldr	r6, [r7, #44]	; 0x2c
   16680:	add	r1, sp, #4
   16684:	sub	r4, ip, r5
   16688:	str	r5, [sp]
   1668c:	add	r1, r1, #8
   16690:	mov	r3, r4
   16694:	blx	r6
   16698:	cmp	r0, #0
   1669c:	streq	r4, [r7, #136]	; 0x88
   166a0:	moveq	r0, r4
   166a4:	subeq	sp, fp, #16
   166a8:	popeq	{r4, r5, r6, r7, fp, pc}
   166ac:	ldr	r0, [pc, #116]	; 16728 <flatcc_builder_create_vector@@Base+0x170>
   166b0:	ldr	r1, [pc, #116]	; 1672c <flatcc_builder_create_vector@@Base+0x174>
   166b4:	ldr	r3, [pc, #116]	; 16730 <flatcc_builder_create_vector@@Base+0x178>
   166b8:	movw	r2, #651	; 0x28b
   166bc:	add	r0, pc, r0
   166c0:	add	r1, pc, r1
   166c4:	add	r3, pc, r3
   166c8:	bl	12418 <__assert_fail@plt>
   166cc:	ldr	r0, [pc, #60]	; 16710 <flatcc_builder_create_vector@@Base+0x158>
   166d0:	ldr	r1, [pc, #60]	; 16714 <flatcc_builder_create_vector@@Base+0x15c>
   166d4:	ldr	r3, [pc, #60]	; 16718 <flatcc_builder_create_vector@@Base+0x160>
   166d8:	movw	r2, #1365	; 0x555
   166dc:	add	r0, pc, r0
   166e0:	add	r1, pc, r1
   166e4:	add	r3, pc, r3
   166e8:	bl	12418 <__assert_fail@plt>
   166ec:	ldr	r0, [pc, #40]	; 1671c <flatcc_builder_create_vector@@Base+0x164>
   166f0:	ldr	r1, [pc, #40]	; 16720 <flatcc_builder_create_vector@@Base+0x168>
   166f4:	ldr	r3, [pc, #40]	; 16724 <flatcc_builder_create_vector@@Base+0x16c>
   166f8:	movw	r2, #647	; 0x287
   166fc:	add	r0, pc, r0
   16700:	add	r1, pc, r1
   16704:	add	r3, pc, r3
   16708:	bl	12418 <__assert_fail@plt>
   1670c:	andeq	r4, r1, r0, ror #19
   16710:			; <UNDEFINED> instruction: 0x000031ba
   16714:	andeq	r2, r0, r0, lsr #16
   16718:	andeq	r3, r0, r5, asr #3
   1671c:	andeq	r3, r0, r1, asr #19
   16720:	andeq	r2, r0, r0, lsl #16
   16724:	andeq	r3, r0, r8, ror r8
   16728:	andeq	r3, r0, r1, lsl #20
   1672c:	andeq	r2, r0, r0, asr #16
   16730:			; <UNDEFINED> instruction: 0x000038b8

00016734 <flatcc_builder_end_vector@@Base>:
   16734:	push	{r4, r5, fp, lr}
   16738:	add	fp, sp, #8
   1673c:	sub	sp, sp, #8
   16740:	mov	r4, r0
   16744:	ldr	r0, [r0, #32]
   16748:	ldrh	r1, [r0, #14]
   1674c:	cmp	r1, #4
   16750:	bne	16804 <flatcc_builder_end_vector@@Base+0xd0>
   16754:	ldr	r3, [r0, #16]
   16758:	ldr	r2, [r0, #20]
   1675c:	ldr	r0, [r0, #24]
   16760:	ldr	r1, [r4, #16]
   16764:	ldrh	r5, [r4, #130]	; 0x82
   16768:	str	r0, [sp, #4]
   1676c:	mov	r0, r4
   16770:	str	r5, [sp]
   16774:	bl	165b8 <flatcc_builder_create_vector@@Base>
   16778:	mov	r5, r0
   1677c:	cmp	r0, #0
   16780:	beq	167f8 <flatcc_builder_end_vector@@Base+0xc4>
   16784:	ldr	r0, [r4, #16]
   16788:	ldr	r2, [r4, #20]
   1678c:	mov	r1, #0
   16790:	bl	123f4 <memset@plt>
   16794:	ldr	r0, [r4, #32]
   16798:	ldr	r1, [r4, #60]	; 0x3c
   1679c:	ldr	ip, [r4, #64]	; 0x40
   167a0:	ldr	r3, [r0, #8]
   167a4:	str	r3, [r4, #20]
   167a8:	ldr	r3, [r0]
   167ac:	str	r3, [r4, #28]
   167b0:	add	r1, r1, r3
   167b4:	ldr	r2, [r0, #4]
   167b8:	str	r1, [r4, #16]
   167bc:	sub	r1, ip, r3
   167c0:	cmp	r1, r2
   167c4:	movhi	r1, r2
   167c8:	str	r1, [r4, #24]
   167cc:	ldrh	r1, [r4, #130]	; 0x82
   167d0:	ldrh	r2, [r4, #128]	; 0x80
   167d4:	cmp	r2, r1
   167d8:	strhcc	r1, [r4, #128]	; 0x80
   167dc:	ldrh	r1, [r0, #12]
   167e0:	sub	r0, r0, #36	; 0x24
   167e4:	str	r0, [r4, #32]
   167e8:	strh	r1, [r4, #130]	; 0x82
   167ec:	ldr	r0, [r4, #156]	; 0x9c
   167f0:	sub	r0, r0, #1
   167f4:	str	r0, [r4, #156]	; 0x9c
   167f8:	mov	r0, r5
   167fc:	sub	sp, fp, #8
   16800:	pop	{r4, r5, fp, pc}
   16804:	ldr	r0, [pc, #24]	; 16824 <flatcc_builder_end_vector@@Base+0xf0>
   16808:	ldr	r1, [pc, #24]	; 16828 <flatcc_builder_end_vector@@Base+0xf4>
   1680c:	ldr	r3, [pc, #24]	; 1682c <flatcc_builder_end_vector@@Base+0xf8>
   16810:	movw	r2, #1400	; 0x578
   16814:	add	r0, pc, r0
   16818:	add	r1, pc, r1
   1681c:	add	r3, pc, r3
   16820:	bl	12418 <__assert_fail@plt>
   16824:	andeq	r2, r0, r6, lsr #20
   16828:	andeq	r2, r0, r8, ror #13
   1682c:	andeq	r3, r0, r3, lsl #2

00016830 <flatcc_builder_vector_count@@Base>:
   16830:	ldr	r0, [r0, #32]
   16834:	ldr	r0, [r0, #20]
   16838:	bx	lr

0001683c <flatcc_builder_vector_edit@@Base>:
   1683c:	ldr	r0, [r0, #16]
   16840:	bx	lr

00016844 <flatcc_builder_create_offset_vector_direct@@Base>:
   16844:	mov	r3, #0
   16848:	b	1684c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1684c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16850:	add	fp, sp, #24
   16854:	sub	sp, sp, #80	; 0x50
   16858:	mov	r6, #0
   1685c:	cmn	r2, #-1073741823	; 0xc0000001
   16860:	bhi	169c0 <flatcc_builder_create_offset_vector_direct@@Base+0x17c>
   16864:	mov	r8, r0
   16868:	ldrh	r0, [r0, #128]	; 0x80
   1686c:	mov	r5, #4
   16870:	sub	r7, fp, #28
   16874:	mov	r4, #1
   16878:	cmp	r0, #3
   1687c:	movls	r0, #4
   16880:	strhls	r0, [r8, #128]	; 0x80
   16884:	str	r2, [fp, #-28]	; 0xffffffe4
   16888:	ldr	ip, [r8, #136]	; 0x88
   1688c:	str	r5, [sp, #16]
   16890:	str	r7, [sp, #12]
   16894:	mov	r7, #0
   16898:	str	r5, [sp, #4]
   1689c:	str	r4, [sp, #8]
   168a0:	cmp	r7, r2, lsl #2
   168a4:	and	r6, ip, #3
   168a8:	beq	168c8 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   168ac:	lsl	r7, r2, #2
   168b0:	mov	r4, #2
   168b4:	add	r5, r7, #4
   168b8:	str	r7, [sp, #24]
   168bc:	str	r1, [sp, #20]
   168c0:	str	r4, [sp, #8]
   168c4:	str	r5, [sp, #4]
   168c8:	cmp	r6, #0
   168cc:	beq	168f8 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   168d0:	add	r5, r5, r6
   168d4:	add	r7, sp, #4
   168d8:	str	r5, [sp, #4]
   168dc:	add	r7, r7, r4, lsl #3
   168e0:	add	r4, r4, #1
   168e4:	ldr	r0, [pc, #352]	; 16a4c <flatcc_builder_create_offset_vector_direct@@Base+0x208>
   168e8:	ldr	r0, [pc, r0]
   168ec:	str	r0, [r7, #8]
   168f0:	str	r6, [r7, #12]
   168f4:	str	r4, [sp, #8]
   168f8:	cmp	r2, #0
   168fc:	beq	16988 <flatcc_builder_create_offset_vector_direct@@Base+0x144>
   16900:	sub	r0, r5, ip
   16904:	mov	r6, r3
   16908:	sub	r0, r0, #4
   1690c:	b	16924 <flatcc_builder_create_offset_vector_direct@@Base+0xe0>
   16910:	sub	r0, r0, #4
   16914:	add	r1, r1, #4
   16918:	add	r6, r6, #1
   1691c:	subs	r2, r2, #1
   16920:	beq	16984 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   16924:	ldr	r7, [r1]
   16928:	cmp	r7, #0
   1692c:	beq	16950 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   16930:	add	r7, r0, r7
   16934:	cmp	r3, #0
   16938:	str	r7, [r1]
   1693c:	beq	16910 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   16940:	ldrb	r7, [r6]
   16944:	cmp	r7, #0
   16948:	bne	16910 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   1694c:	b	169cc <flatcc_builder_create_offset_vector_direct@@Base+0x188>
   16950:	cmp	r3, #0
   16954:	beq	169ec <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   16958:	ldrb	r7, [r6]
   1695c:	cmp	r7, #0
   16960:	beq	16910 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   16964:	ldr	r0, [pc, #240]	; 16a5c <flatcc_builder_create_offset_vector_direct@@Base+0x218>
   16968:	ldr	r1, [pc, #240]	; 16a60 <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
   1696c:	ldr	r3, [pc, #240]	; 16a64 <flatcc_builder_create_offset_vector_direct@@Base+0x220>
   16970:	movw	r2, #1461	; 0x5b5
   16974:	add	r0, pc, r0
   16978:	add	r1, pc, r1
   1697c:	add	r3, pc, r3
   16980:	bl	12418 <__assert_fail@plt>
   16984:	ldr	ip, [r8, #136]	; 0x88
   16988:	cmp	r5, #0
   1698c:	ble	16a0c <flatcc_builder_create_offset_vector_direct@@Base+0x1c8>
   16990:	ldr	r0, [r8, #36]	; 0x24
   16994:	ldr	r7, [r8, #44]	; 0x2c
   16998:	add	r1, sp, #4
   1699c:	sub	r6, ip, r5
   169a0:	mov	r2, r4
   169a4:	str	r5, [sp]
   169a8:	add	r1, r1, #8
   169ac:	mov	r3, r6
   169b0:	blx	r7
   169b4:	cmp	r0, #0
   169b8:	bne	16a2c <flatcc_builder_create_offset_vector_direct@@Base+0x1e8>
   169bc:	str	r6, [r8, #136]	; 0x88
   169c0:	mov	r0, r6
   169c4:	sub	sp, fp, #24
   169c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   169cc:	ldr	r0, [pc, #124]	; 16a50 <flatcc_builder_create_offset_vector_direct@@Base+0x20c>
   169d0:	ldr	r1, [pc, #124]	; 16a54 <flatcc_builder_create_offset_vector_direct@@Base+0x210>
   169d4:	ldr	r3, [pc, #124]	; 16a58 <flatcc_builder_create_offset_vector_direct@@Base+0x214>
   169d8:	movw	r2, #1457	; 0x5b1
   169dc:	add	r0, pc, r0
   169e0:	add	r1, pc, r1
   169e4:	add	r3, pc, r3
   169e8:	bl	12418 <__assert_fail@plt>
   169ec:	ldr	r0, [pc, #116]	; 16a68 <flatcc_builder_create_offset_vector_direct@@Base+0x224>
   169f0:	ldr	r1, [pc, #116]	; 16a6c <flatcc_builder_create_offset_vector_direct@@Base+0x228>
   169f4:	ldr	r3, [pc, #116]	; 16a70 <flatcc_builder_create_offset_vector_direct@@Base+0x22c>
   169f8:	movw	r2, #1463	; 0x5b7
   169fc:	add	r0, pc, r0
   16a00:	add	r1, pc, r1
   16a04:	add	r3, pc, r3
   16a08:	bl	12418 <__assert_fail@plt>
   16a0c:	ldr	r0, [pc, #96]	; 16a74 <flatcc_builder_create_offset_vector_direct@@Base+0x230>
   16a10:	ldr	r1, [pc, #96]	; 16a78 <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   16a14:	ldr	r3, [pc, #96]	; 16a7c <flatcc_builder_create_offset_vector_direct@@Base+0x238>
   16a18:	movw	r2, #647	; 0x287
   16a1c:	add	r0, pc, r0
   16a20:	add	r1, pc, r1
   16a24:	add	r3, pc, r3
   16a28:	bl	12418 <__assert_fail@plt>
   16a2c:	ldr	r0, [pc, #76]	; 16a80 <flatcc_builder_create_offset_vector_direct@@Base+0x23c>
   16a30:	ldr	r1, [pc, #76]	; 16a84 <flatcc_builder_create_offset_vector_direct@@Base+0x240>
   16a34:	ldr	r3, [pc, #76]	; 16a88 <flatcc_builder_create_offset_vector_direct@@Base+0x244>
   16a38:	movw	r2, #651	; 0x28b
   16a3c:	add	r0, pc, r0
   16a40:	add	r1, pc, r1
   16a44:	add	r3, pc, r3
   16a48:	bl	12418 <__assert_fail@plt>
   16a4c:	andeq	r4, r1, r8, asr r7
   16a50:	ldrdeq	r3, [r0], -r5
   16a54:	andeq	r2, r0, r0, lsr #10
   16a58:	ldrdeq	r3, [r0], -fp
   16a5c:	andeq	r3, r0, lr, asr #15
   16a60:	andeq	r2, r0, r8, lsl #11
   16a64:	andeq	r3, r0, r3, asr #14
   16a68:	andeq	r3, r0, r1, asr #13
   16a6c:	andeq	r2, r0, r0, lsl #10
   16a70:			; <UNDEFINED> instruction: 0x000036bb
   16a74:	andeq	r3, r0, r1, lsr #13
   16a78:	andeq	r2, r0, r0, ror #9
   16a7c:	andeq	r3, r0, r8, asr r5
   16a80:	andeq	r3, r0, r1, lsl #13
   16a84:	andeq	r2, r0, r0, asr #9
   16a88:	andeq	r3, r0, r8, lsr r5

00016a8c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   16a8c:	push	{r4, r5, fp, lr}
   16a90:	add	fp, sp, #8
   16a94:	mov	r4, r0
   16a98:	ldr	r0, [r0, #32]
   16a9c:	mov	r3, r1
   16aa0:	ldrh	r1, [r0, #14]
   16aa4:	cmp	r1, #5
   16aa8:	bne	16b44 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   16aac:	ldr	r2, [r0, #20]
   16ab0:	ldr	r1, [r4, #16]
   16ab4:	mov	r0, r4
   16ab8:	bl	1684c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16abc:	mov	r5, r0
   16ac0:	cmp	r0, #0
   16ac4:	beq	16b3c <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   16ac8:	ldr	r0, [r4, #16]
   16acc:	ldr	r2, [r4, #20]
   16ad0:	mov	r1, #0
   16ad4:	bl	123f4 <memset@plt>
   16ad8:	ldr	r0, [r4, #32]
   16adc:	ldr	r1, [r4, #60]	; 0x3c
   16ae0:	ldr	ip, [r4, #64]	; 0x40
   16ae4:	ldr	r3, [r0, #8]
   16ae8:	str	r3, [r4, #20]
   16aec:	ldr	r3, [r0]
   16af0:	str	r3, [r4, #28]
   16af4:	add	r1, r1, r3
   16af8:	ldr	r2, [r0, #4]
   16afc:	str	r1, [r4, #16]
   16b00:	sub	r1, ip, r3
   16b04:	cmp	r1, r2
   16b08:	movhi	r1, r2
   16b0c:	str	r1, [r4, #24]
   16b10:	ldrh	r1, [r4, #130]	; 0x82
   16b14:	ldrh	r2, [r4, #128]	; 0x80
   16b18:	cmp	r2, r1
   16b1c:	strhcc	r1, [r4, #128]	; 0x80
   16b20:	ldrh	r1, [r0, #12]
   16b24:	sub	r0, r0, #36	; 0x24
   16b28:	str	r0, [r4, #32]
   16b2c:	strh	r1, [r4, #130]	; 0x82
   16b30:	ldr	r0, [r4, #156]	; 0x9c
   16b34:	sub	r0, r0, #1
   16b38:	str	r0, [r4, #156]	; 0x9c
   16b3c:	mov	r0, r5
   16b40:	pop	{r4, r5, fp, pc}
   16b44:	ldr	r0, [pc, #24]	; 16b64 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   16b48:	ldr	r1, [pc, #24]	; 16b68 <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   16b4c:	ldr	r3, [pc, #24]	; 16b6c <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   16b50:	movw	r2, #1493	; 0x5d5
   16b54:	add	r0, pc, r0
   16b58:	add	r1, pc, r1
   16b5c:	add	r3, pc, r3
   16b60:	bl	12418 <__assert_fail@plt>
   16b64:	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
   16b68:	andeq	r2, r0, r8, lsr #7
   16b6c:	andeq	r2, r0, r0, asr lr

00016b70 <flatcc_builder_offset_vector_edit@@Base>:
   16b70:	ldr	r0, [r0, #16]
   16b74:	bx	lr

00016b78 <flatcc_builder_offset_vector_count@@Base>:
   16b78:	ldr	r0, [r0, #32]
   16b7c:	ldr	r0, [r0, #20]
   16b80:	bx	lr

00016b84 <flatcc_builder_table_add_union@@Base>:
   16b84:	push	{r4, r5, r6, r7, fp, lr}
   16b88:	add	fp, sp, #16
   16b8c:	mov	r5, r0
   16b90:	ldr	r0, [r0, #32]
   16b94:	ldrh	r0, [r0, #14]
   16b98:	cmp	r0, #3
   16b9c:	bne	16c24 <flatcc_builder_table_add_union@@Base+0xa0>
   16ba0:	mov	r7, r3
   16ba4:	mov	r4, r2
   16ba8:	mov	r6, r1
   16bac:	cmp	r3, #0
   16bb0:	beq	16bc0 <flatcc_builder_table_add_union@@Base+0x3c>
   16bb4:	uxtb	r0, r4
   16bb8:	cmp	r0, #0
   16bbc:	beq	16c44 <flatcc_builder_table_add_union@@Base+0xc0>
   16bc0:	cmp	r7, #0
   16bc4:	beq	16be0 <flatcc_builder_table_add_union@@Base+0x5c>
   16bc8:	mov	r0, r5
   16bcc:	mov	r1, r6
   16bd0:	bl	16cb4 <flatcc_builder_table_add_offset@@Base>
   16bd4:	cmp	r0, #0
   16bd8:	beq	16c64 <flatcc_builder_table_add_union@@Base+0xe0>
   16bdc:	str	r7, [r0]
   16be0:	sub	r1, r6, #1
   16be4:	mov	r0, r5
   16be8:	mov	r2, #1
   16bec:	mov	r3, #1
   16bf0:	bl	16e68 <flatcc_builder_table_add@@Base>
   16bf4:	cmp	r0, #0
   16bf8:	strbne	r4, [r0]
   16bfc:	movne	r0, #0
   16c00:	popne	{r4, r5, r6, r7, fp, pc}
   16c04:	ldr	r0, [pc, #156]	; 16ca8 <flatcc_builder_table_add_union@@Base+0x124>
   16c08:	ldr	r1, [pc, #156]	; 16cac <flatcc_builder_table_add_union@@Base+0x128>
   16c0c:	ldr	r3, [pc, #156]	; 16cb0 <flatcc_builder_table_add_union@@Base+0x12c>
   16c10:	movw	r2, #1526	; 0x5f6
   16c14:	add	r0, pc, r0
   16c18:	add	r1, pc, r1
   16c1c:	add	r3, pc, r3
   16c20:	bl	12418 <__assert_fail@plt>
   16c24:	ldr	r0, [pc, #88]	; 16c84 <flatcc_builder_table_add_union@@Base+0x100>
   16c28:	ldr	r1, [pc, #88]	; 16c88 <flatcc_builder_table_add_union@@Base+0x104>
   16c2c:	ldr	r3, [pc, #88]	; 16c8c <flatcc_builder_table_add_union@@Base+0x108>
   16c30:	movw	r2, #1518	; 0x5ee
   16c34:	add	r0, pc, r0
   16c38:	add	r1, pc, r1
   16c3c:	add	r3, pc, r3
   16c40:	bl	12418 <__assert_fail@plt>
   16c44:	ldr	r0, [pc, #68]	; 16c90 <flatcc_builder_table_add_union@@Base+0x10c>
   16c48:	ldr	r1, [pc, #68]	; 16c94 <flatcc_builder_table_add_union@@Base+0x110>
   16c4c:	ldr	r3, [pc, #68]	; 16c98 <flatcc_builder_table_add_union@@Base+0x114>
   16c50:	movw	r2, #1519	; 0x5ef
   16c54:	add	r0, pc, r0
   16c58:	add	r1, pc, r1
   16c5c:	add	r3, pc, r3
   16c60:	bl	12418 <__assert_fail@plt>
   16c64:	ldr	r0, [pc, #48]	; 16c9c <flatcc_builder_table_add_union@@Base+0x118>
   16c68:	ldr	r1, [pc, #48]	; 16ca0 <flatcc_builder_table_add_union@@Base+0x11c>
   16c6c:	ldr	r3, [pc, #48]	; 16ca4 <flatcc_builder_table_add_union@@Base+0x120>
   16c70:	movw	r2, #1522	; 0x5f2
   16c74:	add	r0, pc, r0
   16c78:	add	r1, pc, r1
   16c7c:	add	r3, pc, r3
   16c80:	bl	12418 <__assert_fail@plt>
   16c84:	strdeq	r2, [r0], -r8
   16c88:	andeq	r2, r0, r8, asr #5
   16c8c:	andeq	r2, r0, r2, ror #27
   16c90:	andeq	r2, r0, r2, lsr #28
   16c94:	andeq	r2, r0, r8, lsr #5
   16c98:	andeq	r2, r0, r2, asr #27
   16c9c:	andeq	r2, r0, r4, lsr #28
   16ca0:	andeq	r2, r0, r8, lsl #5
   16ca4:	andeq	r2, r0, r2, lsr #27
   16ca8:	andeq	r2, r0, lr, lsl #29
   16cac:	andeq	r2, r0, r8, ror #5
   16cb0:	andeq	r2, r0, r2, lsl #28

00016cb4 <flatcc_builder_table_add_offset@@Base>:
   16cb4:	push	{r4, r5, r6, r7, fp, lr}
   16cb8:	add	fp, sp, #16
   16cbc:	sub	sp, sp, #8
   16cc0:	mov	r4, r0
   16cc4:	ldr	r0, [r0, #32]
   16cc8:	ldrh	r0, [r0, #14]
   16ccc:	cmp	r0, #3
   16cd0:	bne	16de4 <flatcc_builder_table_add_offset@@Base+0x130>
   16cd4:	movw	r0, #32765	; 0x7ffd
   16cd8:	mov	r5, r1
   16cdc:	cmp	r1, r0
   16ce0:	bcs	16e04 <flatcc_builder_table_add_offset@@Base+0x150>
   16ce4:	ldr	r0, [r4, #4]
   16ce8:	add	r1, r0, r5, lsl #1
   16cec:	ldrh	r1, [r1]
   16cf0:	cmp	r1, #0
   16cf4:	bne	16e24 <flatcc_builder_table_add_offset@@Base+0x170>
   16cf8:	ldr	r2, [r4, #20]
   16cfc:	ldr	r1, [r4, #12]
   16d00:	ldr	r3, [r4, #24]
   16d04:	add	r2, r2, #3
   16d08:	eor	r1, r1, r5
   16d0c:	bic	r6, r2, #3
   16d10:	movw	r2, #31153	; 0x79b1
   16d14:	movt	r2, #40503	; 0x9e37
   16d18:	add	r7, r6, #4
   16d1c:	cmp	r7, r3
   16d20:	str	r7, [r4, #20]
   16d24:	mul	r1, r1, r2
   16d28:	eor	r1, r1, #4
   16d2c:	mul	r1, r1, r2
   16d30:	str	r1, [r4, #12]
   16d34:	bls	16da8 <flatcc_builder_table_add_offset@@Base+0xf4>
   16d38:	ldr	r1, [r4, #28]
   16d3c:	ldr	r0, [r4, #40]	; 0x28
   16d40:	ldr	ip, [r4, #48]	; 0x30
   16d44:	mov	r2, #1
   16d48:	mov	r3, #1
   16d4c:	str	r2, [sp]
   16d50:	add	r2, r1, r7
   16d54:	add	r1, r4, #60	; 0x3c
   16d58:	blx	ip
   16d5c:	mov	r1, r0
   16d60:	mov	r0, #0
   16d64:	cmp	r1, #0
   16d68:	beq	16d74 <flatcc_builder_table_add_offset@@Base+0xc0>
   16d6c:	sub	sp, fp, #16
   16d70:	pop	{r4, r5, r6, r7, fp, pc}
   16d74:	ldr	r0, [r4, #28]
   16d78:	ldr	r2, [r4, #60]	; 0x3c
   16d7c:	ldr	r3, [r4, #64]	; 0x40
   16d80:	ldr	r1, [r4, #32]
   16d84:	add	r2, r2, r0
   16d88:	sub	r0, r3, r0
   16d8c:	str	r2, [r4, #16]
   16d90:	movw	r2, #65532	; 0xfffc
   16d94:	cmp	r0, r2
   16d98:	movcs	r0, r2
   16d9c:	str	r0, [r4, #24]
   16da0:	str	r2, [r1, #4]
   16da4:	ldr	r0, [r4, #4]
   16da8:	uxth	r1, r5
   16dac:	add	r0, r0, r1, lsl #1
   16db0:	strh	r7, [r0]
   16db4:	ldrh	r0, [r4, #8]
   16db8:	cmp	r0, r1
   16dbc:	addls	r0, r5, #1
   16dc0:	strhls	r0, [r4, #8]
   16dc4:	ldr	r0, [r4]
   16dc8:	add	r1, r0, #2
   16dcc:	str	r1, [r4]
   16dd0:	strh	r6, [r0]
   16dd4:	ldr	r0, [r4, #16]
   16dd8:	add	r0, r0, r6
   16ddc:	sub	sp, fp, #16
   16de0:	pop	{r4, r5, r6, r7, fp, pc}
   16de4:	ldr	r0, [pc, #88]	; 16e44 <flatcc_builder_table_add_offset@@Base+0x190>
   16de8:	ldr	r1, [pc, #88]	; 16e48 <flatcc_builder_table_add_offset@@Base+0x194>
   16dec:	ldr	r3, [pc, #88]	; 16e4c <flatcc_builder_table_add_offset@@Base+0x198>
   16df0:	movw	r2, #1811	; 0x713
   16df4:	add	r0, pc, r0
   16df8:	add	r1, pc, r1
   16dfc:	add	r3, pc, r3
   16e00:	bl	12418 <__assert_fail@plt>
   16e04:	ldr	r0, [pc, #68]	; 16e50 <flatcc_builder_table_add_offset@@Base+0x19c>
   16e08:	ldr	r1, [pc, #68]	; 16e54 <flatcc_builder_table_add_offset@@Base+0x1a0>
   16e0c:	ldr	r3, [pc, #68]	; 16e58 <flatcc_builder_table_add_offset@@Base+0x1a4>
   16e10:	movw	r2, #1812	; 0x714
   16e14:	add	r0, pc, r0
   16e18:	add	r1, pc, r1
   16e1c:	add	r3, pc, r3
   16e20:	bl	12418 <__assert_fail@plt>
   16e24:	ldr	r0, [pc, #48]	; 16e5c <flatcc_builder_table_add_offset@@Base+0x1a8>
   16e28:	ldr	r1, [pc, #48]	; 16e60 <flatcc_builder_table_add_offset@@Base+0x1ac>
   16e2c:	ldr	r3, [pc, #48]	; 16e64 <flatcc_builder_table_add_offset@@Base+0x1b0>
   16e30:	movw	r2, #1819	; 0x71b
   16e34:	add	r0, pc, r0
   16e38:	add	r1, pc, r1
   16e3c:	add	r3, pc, r3
   16e40:	bl	12418 <__assert_fail@plt>
   16e44:	andeq	r2, r0, r8, lsr r9
   16e48:	andeq	r2, r0, r8, lsl #2
   16e4c:	andeq	r3, r0, r4, lsr #32
   16e50:	andeq	r2, r0, ip, lsl #31
   16e54:	andeq	r2, r0, r8, ror #1
   16e58:	andeq	r3, r0, r4
   16e5c:	andeq	r3, r0, r9, lsl #5
   16e60:	andeq	r2, r0, r8, asr #1
   16e64:	andeq	r2, r0, r4, ror #31

00016e68 <flatcc_builder_table_add@@Base>:
   16e68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16e6c:	add	fp, sp, #24
   16e70:	sub	sp, sp, #8
   16e74:	mov	r4, r0
   16e78:	ldr	r0, [r0, #32]
   16e7c:	ldrh	r0, [r0, #14]
   16e80:	cmp	r0, #3
   16e84:	bne	16fa4 <flatcc_builder_table_add@@Base+0x13c>
   16e88:	movw	r0, #32765	; 0x7ffd
   16e8c:	mov	r8, r1
   16e90:	cmp	r1, r0
   16e94:	bcs	16fc4 <flatcc_builder_table_add@@Base+0x15c>
   16e98:	ldrh	r0, [r4, #130]	; 0x82
   16e9c:	cmp	r0, r3
   16ea0:	strhcc	r3, [r4, #130]	; 0x82
   16ea4:	ldr	r0, [r4, #4]
   16ea8:	add	r1, r0, r8, lsl #1
   16eac:	ldrh	r1, [r1]
   16eb0:	cmp	r1, #0
   16eb4:	bne	16fe4 <flatcc_builder_table_add@@Base+0x17c>
   16eb8:	ldr	r1, [r4, #12]
   16ebc:	movw	r7, #31153	; 0x79b1
   16ec0:	ldr	r6, [r4, #20]
   16ec4:	ldr	r5, [r4, #24]
   16ec8:	movt	r7, #40503	; 0x9e37
   16ecc:	eor	r1, r1, r8
   16ed0:	mul	r1, r1, r7
   16ed4:	eor	r1, r1, r2
   16ed8:	mul	r1, r1, r7
   16edc:	str	r1, [r4, #12]
   16ee0:	add	r1, r3, r6
   16ee4:	rsb	r3, r3, #0
   16ee8:	sub	r1, r1, #1
   16eec:	and	r6, r1, r3
   16ef0:	add	r1, r6, r2
   16ef4:	cmp	r1, r5
   16ef8:	str	r1, [r4, #20]
   16efc:	bcc	16f74 <flatcc_builder_table_add@@Base+0x10c>
   16f00:	ldr	r2, [r4, #28]
   16f04:	ldr	r0, [r4, #40]	; 0x28
   16f08:	ldr	r7, [r4, #48]	; 0x30
   16f0c:	mov	r3, #1
   16f10:	str	r3, [sp]
   16f14:	mov	r3, #1
   16f18:	add	r1, r1, r2
   16f1c:	add	r2, r1, #1
   16f20:	add	r1, r4, #60	; 0x3c
   16f24:	blx	r7
   16f28:	mov	r1, r0
   16f2c:	mov	r0, #0
   16f30:	cmp	r1, #0
   16f34:	beq	16f40 <flatcc_builder_table_add@@Base+0xd8>
   16f38:	sub	sp, fp, #24
   16f3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16f40:	ldr	r0, [r4, #28]
   16f44:	ldr	r2, [r4, #60]	; 0x3c
   16f48:	ldr	r3, [r4, #64]	; 0x40
   16f4c:	ldr	r1, [r4, #32]
   16f50:	add	r2, r2, r0
   16f54:	sub	r0, r3, r0
   16f58:	str	r2, [r4, #16]
   16f5c:	movw	r2, #65532	; 0xfffc
   16f60:	cmp	r0, r2
   16f64:	movcs	r0, r2
   16f68:	str	r0, [r4, #24]
   16f6c:	str	r2, [r1, #4]
   16f70:	ldr	r0, [r4, #4]
   16f74:	uxth	r1, r8
   16f78:	add	r2, r6, #4
   16f7c:	add	r0, r0, r1, lsl #1
   16f80:	strh	r2, [r0]
   16f84:	ldrh	r0, [r4, #8]
   16f88:	cmp	r0, r1
   16f8c:	addls	r0, r8, #1
   16f90:	strhls	r0, [r4, #8]
   16f94:	ldr	r0, [r4, #16]
   16f98:	add	r0, r0, r6
   16f9c:	sub	sp, fp, #24
   16fa0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16fa4:	ldr	r0, [pc, #88]	; 17004 <flatcc_builder_table_add@@Base+0x19c>
   16fa8:	ldr	r1, [pc, #88]	; 17008 <flatcc_builder_table_add@@Base+0x1a0>
   16fac:	ldr	r3, [pc, #88]	; 1700c <flatcc_builder_table_add@@Base+0x1a4>
   16fb0:	movw	r2, #1773	; 0x6ed
   16fb4:	add	r0, pc, r0
   16fb8:	add	r1, pc, r1
   16fbc:	add	r3, pc, r3
   16fc0:	bl	12418 <__assert_fail@plt>
   16fc4:	ldr	r0, [pc, #68]	; 17010 <flatcc_builder_table_add@@Base+0x1a8>
   16fc8:	ldr	r1, [pc, #68]	; 17014 <flatcc_builder_table_add@@Base+0x1ac>
   16fcc:	ldr	r3, [pc, #68]	; 17018 <flatcc_builder_table_add@@Base+0x1b0>
   16fd0:	movw	r2, #1774	; 0x6ee
   16fd4:	add	r0, pc, r0
   16fd8:	add	r1, pc, r1
   16fdc:	add	r3, pc, r3
   16fe0:	bl	12418 <__assert_fail@plt>
   16fe4:	ldr	r0, [pc, #48]	; 1701c <flatcc_builder_table_add@@Base+0x1b4>
   16fe8:	ldr	r1, [pc, #48]	; 17020 <flatcc_builder_table_add@@Base+0x1b8>
   16fec:	ldr	r3, [pc, #48]	; 17024 <flatcc_builder_table_add@@Base+0x1bc>
   16ff0:	movw	r2, #1784	; 0x6f8
   16ff4:	add	r0, pc, r0
   16ff8:	add	r1, pc, r1
   16ffc:	add	r3, pc, r3
   17000:	bl	12418 <__assert_fail@plt>
   17004:	andeq	r2, r0, r8, ror r7
   17008:	andeq	r1, r0, r8, asr #30
   1700c:	muleq	r0, sl, sp
   17010:	andeq	r2, r0, ip, asr #27
   17014:	andeq	r1, r0, r8, lsr #30
   17018:	andeq	r2, r0, sl, ror sp
   1701c:	andeq	r3, r0, r9, asr #1
   17020:	andeq	r1, r0, r8, lsl #30
   17024:	andeq	r2, r0, sl, asr sp

00017028 <flatcc_builder_table_add_union_vector@@Base>:
   17028:	push	{r4, r5, r6, r7, fp, lr}
   1702c:	add	fp, sp, #16
   17030:	mov	r6, r0
   17034:	ldr	r0, [r0, #32]
   17038:	ldrh	r0, [r0, #14]
   1703c:	cmp	r0, #3
   17040:	bne	170ac <flatcc_builder_table_add_union_vector@@Base+0x84>
   17044:	mov	r5, r1
   17048:	clz	r1, r3
   1704c:	cmp	r2, #0
   17050:	mov	r0, r2
   17054:	mov	r4, r3
   17058:	mov	r7, r2
   1705c:	movwne	r0, #1
   17060:	lsr	r1, r1, #5
   17064:	teq	r1, r0
   17068:	beq	170cc <flatcc_builder_table_add_union_vector@@Base+0xa4>
   1706c:	cmp	r7, #0
   17070:	beq	170a4 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   17074:	sub	r1, r5, #1
   17078:	mov	r0, r6
   1707c:	bl	16cb4 <flatcc_builder_table_add_offset@@Base>
   17080:	cmp	r0, #0
   17084:	beq	170ec <flatcc_builder_table_add_union_vector@@Base+0xc4>
   17088:	str	r7, [r0]
   1708c:	mov	r0, r6
   17090:	mov	r1, r5
   17094:	bl	16cb4 <flatcc_builder_table_add_offset@@Base>
   17098:	cmp	r0, #0
   1709c:	beq	1710c <flatcc_builder_table_add_union_vector@@Base+0xe4>
   170a0:	str	r4, [r0]
   170a4:	mov	r0, #0
   170a8:	pop	{r4, r5, r6, r7, fp, pc}
   170ac:	ldr	r0, [pc, #120]	; 1712c <flatcc_builder_table_add_union_vector@@Base+0x104>
   170b0:	ldr	r1, [pc, #120]	; 17130 <flatcc_builder_table_add_union_vector@@Base+0x108>
   170b4:	ldr	r3, [pc, #120]	; 17134 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   170b8:	mov	r2, #1536	; 0x600
   170bc:	add	r0, pc, r0
   170c0:	add	r1, pc, r1
   170c4:	add	r3, pc, r3
   170c8:	bl	12418 <__assert_fail@plt>
   170cc:	ldr	r0, [pc, #100]	; 17138 <flatcc_builder_table_add_union_vector@@Base+0x110>
   170d0:	ldr	r1, [pc, #100]	; 1713c <flatcc_builder_table_add_union_vector@@Base+0x114>
   170d4:	ldr	r3, [pc, #100]	; 17140 <flatcc_builder_table_add_union_vector@@Base+0x118>
   170d8:	movw	r2, #1537	; 0x601
   170dc:	add	r0, pc, r0
   170e0:	add	r1, pc, r1
   170e4:	add	r3, pc, r3
   170e8:	bl	12418 <__assert_fail@plt>
   170ec:	ldr	r0, [pc, #80]	; 17144 <flatcc_builder_table_add_union_vector@@Base+0x11c>
   170f0:	ldr	r1, [pc, #80]	; 17148 <flatcc_builder_table_add_union_vector@@Base+0x120>
   170f4:	ldr	r3, [pc, #80]	; 1714c <flatcc_builder_table_add_union_vector@@Base+0x124>
   170f8:	movw	r2, #1540	; 0x604
   170fc:	add	r0, pc, r0
   17100:	add	r1, pc, r1
   17104:	add	r3, pc, r3
   17108:	bl	12418 <__assert_fail@plt>
   1710c:	ldr	r0, [pc, #60]	; 17150 <flatcc_builder_table_add_union_vector@@Base+0x128>
   17110:	ldr	r1, [pc, #60]	; 17154 <flatcc_builder_table_add_union_vector@@Base+0x12c>
   17114:	ldr	r3, [pc, #60]	; 17158 <flatcc_builder_table_add_union_vector@@Base+0x130>
   17118:	movw	r2, #1544	; 0x608
   1711c:	add	r0, pc, r0
   17120:	add	r1, pc, r1
   17124:	add	r3, pc, r3
   17128:	bl	12418 <__assert_fail@plt>
   1712c:	andeq	r2, r0, r0, ror r6
   17130:	andeq	r1, r0, r0, asr #28
   17134:	andeq	r2, r0, sl, ror #19
   17138:	andeq	r2, r0, r5, lsr sl
   1713c:	andeq	r1, r0, r0, lsr #28
   17140:	andeq	r2, r0, sl, asr #19
   17144:	muleq	r0, ip, r9
   17148:	andeq	r1, r0, r0, lsl #28
   1714c:	andeq	r2, r0, sl, lsr #19
   17150:	andeq	r2, r0, ip, ror r9
   17154:	andeq	r1, r0, r0, ror #27
   17158:	andeq	r2, r0, sl, lsl #19

0001715c <flatcc_builder_create_union_vector@@Base>:
   1715c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17160:	add	fp, sp, #28
   17164:	sub	sp, sp, #12
   17168:	mov	r6, #0
   1716c:	mov	r4, r1
   17170:	mov	r8, r0
   17174:	mov	sl, r3
   17178:	mov	r9, r2
   1717c:	mov	r7, #4
   17180:	str	r6, [r0]
   17184:	str	r6, [r0, #4]
   17188:	mov	r0, r1
   1718c:	mov	r1, #4
   17190:	bl	144b0 <flatcc_builder_start_buffer@@Base+0xc0>
   17194:	cmp	r0, #0
   17198:	beq	171a4 <flatcc_builder_create_union_vector@@Base+0x48>
   1719c:	sub	sp, fp, #28
   171a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171a4:	ldr	r0, [r4, #32]
   171a8:	mov	r1, #5
   171ac:	str	r7, [r0, #16]
   171b0:	ldr	r0, [r4, #32]
   171b4:	str	r6, [r0, #20]
   171b8:	ldr	r0, [r4, #32]
   171bc:	strh	r1, [r0, #14]
   171c0:	ldr	r1, [r4, #28]
   171c4:	ldr	r2, [r4, #60]	; 0x3c
   171c8:	ldr	r3, [r4, #64]	; 0x40
   171cc:	add	r2, r2, r1
   171d0:	sub	r1, r3, r1
   171d4:	str	r2, [r4, #16]
   171d8:	mvn	r2, #3
   171dc:	cmn	r1, #4
   171e0:	movcs	r1, r2
   171e4:	str	r1, [r4, #24]
   171e8:	str	r2, [r0, #4]
   171ec:	ldr	r1, [r0, #20]
   171f0:	adds	r1, r1, sl
   171f4:	cmpcc	r1, #1073741824	; 0x40000000
   171f8:	bcc	1721c <flatcc_builder_create_union_vector@@Base+0xc0>
   171fc:	ldr	r0, [pc, #644]	; 17488 <flatcc_builder_create_union_vector@@Base+0x32c>
   17200:	ldr	r1, [pc, #644]	; 1748c <flatcc_builder_create_union_vector@@Base+0x330>
   17204:	ldr	r3, [pc, #644]	; 17490 <flatcc_builder_create_union_vector@@Base+0x334>
   17208:	mov	r2, #892	; 0x37c
   1720c:	add	r0, pc, r0
   17210:	add	r1, pc, r1
   17214:	add	r3, pc, r3
   17218:	bl	12418 <__assert_fail@plt>
   1721c:	str	r1, [r0, #20]
   17220:	ldr	r7, [r4, #20]
   17224:	ldr	r0, [r4, #24]
   17228:	add	r1, r7, sl, lsl #2
   1722c:	cmp	r1, r0
   17230:	str	r1, [r4, #20]
   17234:	bcs	17248 <flatcc_builder_create_union_vector@@Base+0xec>
   17238:	ldr	r1, [r4, #16]
   1723c:	adds	r2, r1, r7
   17240:	bne	172b0 <flatcc_builder_create_union_vector@@Base+0x154>
   17244:	b	1719c <flatcc_builder_create_union_vector@@Base+0x40>
   17248:	ldr	r2, [r4, #28]
   1724c:	ldr	r0, [r4, #40]	; 0x28
   17250:	ldr	r6, [r4, #48]	; 0x30
   17254:	mov	r3, #1
   17258:	str	r3, [sp]
   1725c:	mov	r3, #1
   17260:	add	r1, r1, r2
   17264:	add	r2, r1, #1
   17268:	add	r1, r4, #60	; 0x3c
   1726c:	blx	r6
   17270:	cmp	r0, #0
   17274:	bne	1719c <flatcc_builder_create_union_vector@@Base+0x40>
   17278:	ldr	r0, [r4, #28]
   1727c:	ldr	r1, [r4, #60]	; 0x3c
   17280:	ldr	r3, [r4, #64]	; 0x40
   17284:	ldr	r2, [r4, #32]
   17288:	add	r1, r1, r0
   1728c:	sub	r0, r3, r0
   17290:	mvn	r3, #3
   17294:	cmn	r0, #4
   17298:	str	r1, [r4, #16]
   1729c:	movcs	r0, r3
   172a0:	str	r0, [r4, #24]
   172a4:	str	r3, [r2, #4]
   172a8:	adds	r2, r1, r7
   172ac:	beq	1719c <flatcc_builder_create_union_vector@@Base+0x40>
   172b0:	ldr	r7, [r4, #20]
   172b4:	add	r2, r7, sl
   172b8:	cmp	r2, r0
   172bc:	str	r2, [r4, #20]
   172c0:	bcc	17324 <flatcc_builder_create_union_vector@@Base+0x1c8>
   172c4:	ldr	r1, [r4, #28]
   172c8:	ldr	r0, [r4, #40]	; 0x28
   172cc:	ldr	r6, [r4, #48]	; 0x30
   172d0:	mov	r3, #1
   172d4:	str	r3, [sp]
   172d8:	mov	r3, #1
   172dc:	add	r1, r2, r1
   172e0:	add	r2, r1, #1
   172e4:	add	r1, r4, #60	; 0x3c
   172e8:	blx	r6
   172ec:	cmp	r0, #0
   172f0:	bne	1719c <flatcc_builder_create_union_vector@@Base+0x40>
   172f4:	ldr	r0, [r4, #28]
   172f8:	ldr	r1, [r4, #60]	; 0x3c
   172fc:	ldr	r3, [r4, #64]	; 0x40
   17300:	ldr	r2, [r4, #32]
   17304:	add	r1, r1, r0
   17308:	sub	r0, r3, r0
   1730c:	mvn	r3, #3
   17310:	cmn	r0, #4
   17314:	str	r1, [r4, #16]
   17318:	movcs	r0, r3
   1731c:	str	r0, [r4, #24]
   17320:	str	r3, [r2, #4]
   17324:	adds	r5, r1, r7
   17328:	beq	1719c <flatcc_builder_create_union_vector@@Base+0x40>
   1732c:	cmp	sl, #0
   17330:	beq	173b8 <flatcc_builder_create_union_vector@@Base+0x25c>
   17334:	and	ip, sl, #1
   17338:	mov	r0, #0
   1733c:	cmp	sl, #1
   17340:	str	r5, [sp, #8]
   17344:	beq	1739c <flatcc_builder_create_union_vector@@Base+0x240>
   17348:	ldr	r0, [sp, #8]
   1734c:	sub	lr, sl, ip
   17350:	add	r2, r1, #4
   17354:	add	r6, r9, #8
   17358:	add	r7, r0, #1
   1735c:	mov	r0, #0
   17360:	ldrb	r3, [r6, #-8]
   17364:	add	r5, r7, r0
   17368:	strb	r3, [r5, #-1]
   1736c:	add	r3, r9, r0, lsl #3
   17370:	ldr	r5, [r3, #4]
   17374:	str	r5, [r2, #-4]
   17378:	ldrb	r5, [r6]
   1737c:	add	r6, r6, #16
   17380:	strb	r5, [r7, r0]
   17384:	add	r0, r0, #2
   17388:	ldr	r3, [r3, #12]
   1738c:	cmp	lr, r0
   17390:	str	r3, [r2]
   17394:	add	r2, r2, #8
   17398:	bne	17360 <flatcc_builder_create_union_vector@@Base+0x204>
   1739c:	ldr	r5, [sp, #8]
   173a0:	cmp	ip, #0
   173a4:	beq	173b8 <flatcc_builder_create_union_vector@@Base+0x25c>
   173a8:	ldrb	r2, [r9, r0, lsl #3]!
   173ac:	strb	r2, [r5, r0]
   173b0:	ldr	r2, [r9, #4]
   173b4:	str	r2, [r1, r0, lsl #2]
   173b8:	mov	r0, r4
   173bc:	mov	r2, sl
   173c0:	mov	r3, r5
   173c4:	bl	1684c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   173c8:	mov	r7, r0
   173cc:	mov	r6, #0
   173d0:	cmp	r0, #0
   173d4:	beq	17400 <flatcc_builder_create_union_vector@@Base+0x2a4>
   173d8:	mvn	r0, #0
   173dc:	mov	r1, #1
   173e0:	mov	r2, sl
   173e4:	mov	r3, #1
   173e8:	str	r1, [sp]
   173ec:	str	r0, [sp, #4]
   173f0:	mov	r0, r4
   173f4:	mov	r1, r5
   173f8:	bl	165b8 <flatcc_builder_create_vector@@Base>
   173fc:	b	17404 <flatcc_builder_create_union_vector@@Base+0x2a8>
   17400:	mov	r0, #0
   17404:	orr	r1, r6, r7
   17408:	stm	r8, {r0, r1}
   1740c:	mov	r1, #0
   17410:	ldr	r0, [r4, #16]
   17414:	ldr	r2, [r4, #20]
   17418:	bl	123f4 <memset@plt>
   1741c:	ldr	r0, [r4, #32]
   17420:	ldr	r1, [r4, #60]	; 0x3c
   17424:	ldr	r2, [r4, #64]	; 0x40
   17428:	ldr	r3, [r0, #8]
   1742c:	str	r3, [r4, #20]
   17430:	ldr	r3, [r0]
   17434:	str	r3, [r4, #28]
   17438:	add	r1, r1, r3
   1743c:	ldr	r7, [r0, #4]
   17440:	str	r1, [r4, #16]
   17444:	sub	r1, r2, r3
   17448:	cmp	r1, r7
   1744c:	movhi	r1, r7
   17450:	str	r1, [r4, #24]
   17454:	ldrh	r1, [r4, #130]	; 0x82
   17458:	ldrh	r2, [r4, #128]	; 0x80
   1745c:	cmp	r2, r1
   17460:	strhcc	r1, [r4, #128]	; 0x80
   17464:	ldrh	r1, [r0, #12]
   17468:	sub	r0, r0, #36	; 0x24
   1746c:	str	r0, [r4, #32]
   17470:	strh	r1, [r4, #130]	; 0x82
   17474:	ldr	r0, [r4, #156]	; 0x9c
   17478:	sub	r0, r0, #1
   1747c:	str	r0, [r4, #156]	; 0x9c
   17480:	sub	sp, fp, #28
   17484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17488:			; <UNDEFINED> instruction: 0x00002dba
   1748c:	strdeq	r1, [r0], -r0
   17490:	andeq	r2, r0, sp, asr #27

00017494 <flatcc_builder_create_union_vector_direct@@Base>:
   17494:	push	{r4, r5, r6, r7, fp, lr}
   17498:	add	fp, sp, #16
   1749c:	sub	sp, sp, #8
   174a0:	ldr	r7, [fp, #8]
   174a4:	mov	r5, r2
   174a8:	mov	r4, r0
   174ac:	mov	r0, #0
   174b0:	mov	r6, r1
   174b4:	str	r0, [r4]
   174b8:	str	r0, [r4, #4]
   174bc:	mov	r0, r1
   174c0:	mov	r1, r3
   174c4:	mov	r3, r5
   174c8:	mov	r2, r7
   174cc:	bl	1684c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   174d0:	cmp	r0, #0
   174d4:	str	r0, [r4, #4]
   174d8:	beq	17504 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   174dc:	mvn	r0, #0
   174e0:	mov	r1, #1
   174e4:	mov	r2, r7
   174e8:	mov	r3, #1
   174ec:	str	r1, [sp]
   174f0:	str	r0, [sp, #4]
   174f4:	mov	r0, r6
   174f8:	mov	r1, r5
   174fc:	bl	165b8 <flatcc_builder_create_vector@@Base>
   17500:	str	r0, [r4]
   17504:	sub	sp, fp, #16
   17508:	pop	{r4, r5, r6, r7, fp, pc}

0001750c <flatcc_builder_start_union_vector@@Base>:
   1750c:	push	{r4, sl, fp, lr}
   17510:	add	fp, sp, #8
   17514:	mov	r1, #4
   17518:	mov	r4, r0
   1751c:	bl	144b0 <flatcc_builder_start_buffer@@Base+0xc0>
   17520:	mov	r1, r0
   17524:	mvn	r0, #0
   17528:	cmp	r1, #0
   1752c:	popne	{r4, sl, fp, pc}
   17530:	ldr	r0, [r4, #32]
   17534:	mov	r1, #8
   17538:	mov	r2, #7
   1753c:	str	r1, [r0, #16]
   17540:	mov	r0, #0
   17544:	ldr	r1, [r4, #32]
   17548:	str	r0, [r1, #20]
   1754c:	ldr	r1, [r4, #32]
   17550:	strh	r2, [r1, #14]
   17554:	ldr	r2, [r4, #28]
   17558:	ldr	r3, [r4, #60]	; 0x3c
   1755c:	ldr	ip, [r4, #64]	; 0x40
   17560:	add	r3, r3, r2
   17564:	sub	r2, ip, r2
   17568:	str	r3, [r4, #16]
   1756c:	mvn	r3, #3
   17570:	cmn	r2, #4
   17574:	movcs	r2, r3
   17578:	str	r2, [r4, #24]
   1757c:	str	r3, [r1, #4]
   17580:	pop	{r4, sl, fp, pc}

00017584 <flatcc_builder_end_union_vector@@Base>:
   17584:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17588:	add	fp, sp, #28
   1758c:	sub	sp, sp, #20
   17590:	mov	r4, r0
   17594:	mov	r0, #0
   17598:	mov	r8, r1
   1759c:	str	r0, [r4]
   175a0:	str	r0, [r4, #4]
   175a4:	ldr	r0, [r1, #32]
   175a8:	ldrh	r1, [r0, #14]
   175ac:	cmp	r1, #7
   175b0:	bne	177b4 <flatcc_builder_end_union_vector@@Base+0x230>
   175b4:	ldr	r9, [r0, #20]
   175b8:	ldr	r5, [r8, #20]
   175bc:	ldr	r2, [r8, #24]
   175c0:	add	r0, r9, r9, lsl #2
   175c4:	add	r1, r5, r0
   175c8:	cmp	r1, r2
   175cc:	str	r1, [r8, #20]
   175d0:	bcs	175e4 <flatcc_builder_end_union_vector@@Base+0x60>
   175d4:	ldr	r0, [r8, #16]
   175d8:	adds	r1, r0, r5
   175dc:	bne	1764c <flatcc_builder_end_union_vector@@Base+0xc8>
   175e0:	b	177ac <flatcc_builder_end_union_vector@@Base+0x228>
   175e4:	ldr	r2, [r8, #28]
   175e8:	ldr	r0, [r8, #40]	; 0x28
   175ec:	ldr	r7, [r8, #48]	; 0x30
   175f0:	mov	r3, #1
   175f4:	str	r3, [sp]
   175f8:	mov	r3, #1
   175fc:	add	r1, r1, r2
   17600:	add	r2, r1, #1
   17604:	add	r1, r8, #60	; 0x3c
   17608:	blx	r7
   1760c:	cmp	r0, #0
   17610:	bne	177ac <flatcc_builder_end_union_vector@@Base+0x228>
   17614:	ldr	r1, [r8, #28]
   17618:	ldr	r0, [r8, #60]	; 0x3c
   1761c:	ldr	r3, [r8, #64]	; 0x40
   17620:	ldr	r2, [r8, #32]
   17624:	add	r0, r0, r1
   17628:	sub	r1, r3, r1
   1762c:	mvn	r3, #3
   17630:	cmn	r1, #4
   17634:	str	r0, [r8, #16]
   17638:	movcs	r1, r3
   1763c:	str	r1, [r8, #24]
   17640:	str	r3, [r2, #4]
   17644:	adds	r1, r0, r5
   17648:	beq	177ac <flatcc_builder_end_union_vector@@Base+0x228>
   1764c:	add	sl, r1, r9, lsl #2
   17650:	cmp	r9, #0
   17654:	beq	176e4 <flatcc_builder_end_union_vector@@Base+0x160>
   17658:	and	r2, r9, #1
   1765c:	cmp	r9, #1
   17660:	str	r4, [sp, #12]
   17664:	str	r2, [sp, #16]
   17668:	mov	r2, #0
   1766c:	beq	176c4 <flatcc_builder_end_union_vector@@Base+0x140>
   17670:	ldr	r2, [sp, #16]
   17674:	add	r5, r5, #4
   17678:	add	r6, r0, #8
   1767c:	sub	lr, r9, r2
   17680:	mov	r2, #0
   17684:	ldrb	r7, [r6, #-8]
   17688:	mov	r4, sl
   1768c:	add	r3, r0, r2, lsl #3
   17690:	strb	r7, [r4, r2]!
   17694:	add	r7, r0, r5
   17698:	add	r2, r2, #2
   1769c:	ldr	ip, [r3, #4]
   176a0:	cmp	lr, r2
   176a4:	str	ip, [r7, #-4]
   176a8:	ldrb	r7, [r6]
   176ac:	add	r6, r6, #16
   176b0:	strb	r7, [r4, #1]
   176b4:	ldr	r3, [r3, #12]
   176b8:	str	r3, [r0, r5]
   176bc:	add	r5, r5, #8
   176c0:	bne	17684 <flatcc_builder_end_union_vector@@Base+0x100>
   176c4:	ldr	r3, [sp, #16]
   176c8:	ldr	r4, [sp, #12]
   176cc:	cmp	r3, #0
   176d0:	beq	176e4 <flatcc_builder_end_union_vector@@Base+0x160>
   176d4:	ldrb	r3, [r0, r2, lsl #3]!
   176d8:	strb	r3, [sl, r2]
   176dc:	ldr	r0, [r0, #4]
   176e0:	str	r0, [r1, r2, lsl #2]
   176e4:	mov	r0, r8
   176e8:	mov	r2, r9
   176ec:	mov	r3, sl
   176f0:	bl	1684c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   176f4:	mov	r5, r0
   176f8:	mov	r6, #0
   176fc:	cmp	r0, #0
   17700:	beq	1772c <flatcc_builder_end_union_vector@@Base+0x1a8>
   17704:	mvn	r0, #0
   17708:	mov	r1, #1
   1770c:	mov	r2, r9
   17710:	mov	r3, #1
   17714:	str	r1, [sp]
   17718:	str	r0, [sp, #4]
   1771c:	mov	r0, r8
   17720:	mov	r1, sl
   17724:	bl	165b8 <flatcc_builder_create_vector@@Base>
   17728:	b	17730 <flatcc_builder_end_union_vector@@Base+0x1ac>
   1772c:	mov	r0, #0
   17730:	orr	r1, r6, r5
   17734:	stm	r4, {r0, r1}
   17738:	mov	r1, #0
   1773c:	ldr	r0, [r8, #16]
   17740:	ldr	r2, [r8, #20]
   17744:	bl	123f4 <memset@plt>
   17748:	ldr	r0, [r8, #32]
   1774c:	ldr	r1, [r8, #60]	; 0x3c
   17750:	ldr	r2, [r8, #64]	; 0x40
   17754:	ldr	r3, [r0, #8]
   17758:	str	r3, [r8, #20]
   1775c:	ldr	r3, [r0]
   17760:	str	r3, [r8, #28]
   17764:	add	r1, r1, r3
   17768:	ldr	r7, [r0, #4]
   1776c:	str	r1, [r8, #16]
   17770:	sub	r1, r2, r3
   17774:	cmp	r1, r7
   17778:	movhi	r1, r7
   1777c:	str	r1, [r8, #24]
   17780:	ldrh	r1, [r8, #130]	; 0x82
   17784:	ldrh	r2, [r8, #128]	; 0x80
   17788:	cmp	r2, r1
   1778c:	strhcc	r1, [r8, #128]	; 0x80
   17790:	ldrh	r1, [r0, #12]
   17794:	sub	r0, r0, #36	; 0x24
   17798:	str	r0, [r8, #32]
   1779c:	strh	r1, [r8, #130]	; 0x82
   177a0:	ldr	r0, [r8, #156]	; 0x9c
   177a4:	sub	r0, r0, #1
   177a8:	str	r0, [r8, #156]	; 0x9c
   177ac:	sub	sp, fp, #28
   177b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177b4:	ldr	r0, [pc, #24]	; 177d4 <flatcc_builder_end_union_vector@@Base+0x250>
   177b8:	ldr	r1, [pc, #24]	; 177d8 <flatcc_builder_end_union_vector@@Base+0x254>
   177bc:	ldr	r3, [pc, #24]	; 177dc <flatcc_builder_end_union_vector@@Base+0x258>
   177c0:	movw	r2, #1617	; 0x651
   177c4:	add	r0, pc, r0
   177c8:	add	r1, pc, r1
   177cc:	add	r3, pc, r3
   177d0:	bl	12418 <__assert_fail@plt>
   177d4:	andeq	r2, r0, r5, ror r3
   177d8:	andeq	r1, r0, r8, lsr r7
   177dc:	muleq	r0, pc, r3	; <UNPREDICTABLE>

000177e0 <flatcc_builder_union_vector_count@@Base>:
   177e0:	ldr	r0, [r0, #32]
   177e4:	ldr	r0, [r0, #20]
   177e8:	bx	lr

000177ec <flatcc_builder_union_vector_edit@@Base>:
   177ec:	ldr	r0, [r0, #16]
   177f0:	bx	lr

000177f4 <flatcc_builder_extend_union_vector@@Base>:
   177f4:	push	{r4, r5, fp, lr}
   177f8:	add	fp, sp, #8
   177fc:	sub	sp, sp, #8
   17800:	mov	r4, r0
   17804:	ldr	r0, [r0, #32]
   17808:	ldr	r2, [r0, #20]
   1780c:	adds	r2, r2, r1
   17810:	cmpcc	r2, #536870912	; 0x20000000
   17814:	bcc	17838 <flatcc_builder_extend_union_vector@@Base+0x44>
   17818:	ldr	r0, [pc, #184]	; 178d8 <flatcc_builder_extend_union_vector@@Base+0xe4>
   1781c:	ldr	r1, [pc, #184]	; 178dc <flatcc_builder_extend_union_vector@@Base+0xe8>
   17820:	ldr	r3, [pc, #184]	; 178e0 <flatcc_builder_extend_union_vector@@Base+0xec>
   17824:	mov	r2, #892	; 0x37c
   17828:	add	r0, pc, r0
   1782c:	add	r1, pc, r1
   17830:	add	r3, pc, r3
   17834:	bl	12418 <__assert_fail@plt>
   17838:	str	r2, [r0, #20]
   1783c:	ldr	r5, [r4, #20]
   17840:	ldr	r0, [r4, #24]
   17844:	add	r1, r5, r1, lsl #3
   17848:	cmp	r1, r0
   1784c:	str	r1, [r4, #20]
   17850:	bcs	1785c <flatcc_builder_extend_union_vector@@Base+0x68>
   17854:	ldr	r0, [r4, #16]
   17858:	b	178cc <flatcc_builder_extend_union_vector@@Base+0xd8>
   1785c:	ldr	r2, [r4, #28]
   17860:	ldr	r0, [r4, #40]	; 0x28
   17864:	ldr	ip, [r4, #48]	; 0x30
   17868:	mov	r3, #1
   1786c:	str	r3, [sp]
   17870:	mov	r3, #1
   17874:	add	r1, r1, r2
   17878:	add	r2, r1, #1
   1787c:	add	r1, r4, #60	; 0x3c
   17880:	blx	ip
   17884:	mov	r1, r0
   17888:	mov	r0, #0
   1788c:	cmp	r1, #0
   17890:	beq	1789c <flatcc_builder_extend_union_vector@@Base+0xa8>
   17894:	sub	sp, fp, #8
   17898:	pop	{r4, r5, fp, pc}
   1789c:	ldr	r1, [r4, #28]
   178a0:	ldr	r0, [r4, #60]	; 0x3c
   178a4:	ldr	r3, [r4, #64]	; 0x40
   178a8:	ldr	r2, [r4, #32]
   178ac:	add	r0, r0, r1
   178b0:	sub	r1, r3, r1
   178b4:	mvn	r3, #3
   178b8:	cmn	r1, #4
   178bc:	str	r0, [r4, #16]
   178c0:	movcs	r1, r3
   178c4:	str	r1, [r4, #24]
   178c8:	str	r3, [r2, #4]
   178cc:	add	r0, r0, r5
   178d0:	sub	sp, fp, #8
   178d4:	pop	{r4, r5, fp, pc}
   178d8:	muleq	r0, lr, r7
   178dc:	ldrdeq	r1, [r0], -r4
   178e0:			; <UNDEFINED> instruction: 0x000027b1

000178e4 <flatcc_builder_truncate_union_vector@@Base>:
   178e4:	push	{fp, lr}
   178e8:	mov	fp, sp
   178ec:	ldr	r2, [r0, #32]
   178f0:	ldrh	r3, [r2, #14]
   178f4:	cmp	r3, #7
   178f8:	bne	17940 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   178fc:	ldr	r3, [r2, #20]
   17900:	cmp	r3, r1
   17904:	bcc	17960 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   17908:	sub	r3, r3, r1
   1790c:	str	r3, [r2, #20]
   17910:	ldr	r2, [r0, #32]
   17914:	ldr	r3, [r0, #20]
   17918:	ldr	ip, [r0, #16]
   1791c:	ldr	r2, [r2, #16]
   17920:	mls	r3, r2, r1, r3
   17924:	mul	r2, r2, r1
   17928:	mov	r1, #0
   1792c:	str	r3, [r0, #20]
   17930:	add	r0, ip, r3
   17934:	bl	123f4 <memset@plt>
   17938:	mov	r0, #0
   1793c:	pop	{fp, pc}
   17940:	ldr	r0, [pc, #56]	; 17980 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   17944:	ldr	r1, [pc, #56]	; 17984 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   17948:	ldr	r3, [pc, #56]	; 17988 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   1794c:	movw	r2, #1665	; 0x681
   17950:	add	r0, pc, r0
   17954:	add	r1, pc, r1
   17958:	add	r3, pc, r3
   1795c:	bl	12418 <__assert_fail@plt>
   17960:	ldr	r0, [pc, #36]	; 1798c <flatcc_builder_truncate_union_vector@@Base+0xa8>
   17964:	ldr	r1, [pc, #36]	; 17990 <flatcc_builder_truncate_union_vector@@Base+0xac>
   17968:	ldr	r3, [pc, #36]	; 17994 <flatcc_builder_truncate_union_vector@@Base+0xb0>
   1796c:	movw	r2, #1666	; 0x682
   17970:	add	r0, pc, r0
   17974:	add	r1, pc, r1
   17978:	add	r3, pc, r3
   1797c:	bl	12418 <__assert_fail@plt>
   17980:	andeq	r2, r0, r9, ror #3
   17984:	andeq	r1, r0, ip, lsr #11
   17988:	andeq	r2, r0, r6, ror #4
   1798c:	andeq	r1, r0, sp, lsr #24
   17990:	andeq	r1, r0, ip, lsl #11
   17994:	andeq	r2, r0, r6, asr #4

00017998 <flatcc_builder_union_vector_push@@Base>:
   17998:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1799c:	add	fp, sp, #24
   179a0:	sub	sp, sp, #8
   179a4:	mov	r7, r0
   179a8:	ldr	r0, [r0, #32]
   179ac:	mov	r9, r1
   179b0:	ldrh	r1, [r0, #14]
   179b4:	cmp	r1, #7
   179b8:	bne	17a74 <flatcc_builder_union_vector_push@@Base+0xdc>
   179bc:	ldr	r1, [r0, #20]
   179c0:	mov	r6, #0
   179c4:	cmn	r1, #-536870911	; 0xe0000001
   179c8:	beq	17a68 <flatcc_builder_union_vector_push@@Base+0xd0>
   179cc:	add	r1, r1, #1
   179d0:	mov	r8, r2
   179d4:	str	r1, [r0, #20]
   179d8:	ldr	r4, [r7, #20]
   179dc:	ldr	r0, [r7, #24]
   179e0:	add	r1, r4, #8
   179e4:	cmp	r1, r0
   179e8:	str	r1, [r7, #20]
   179ec:	bcs	179f8 <flatcc_builder_union_vector_push@@Base+0x60>
   179f0:	ldr	r0, [r7, #16]
   179f4:	b	17a58 <flatcc_builder_union_vector_push@@Base+0xc0>
   179f8:	ldr	r1, [r7, #28]
   179fc:	ldr	r0, [r7, #40]	; 0x28
   17a00:	ldr	r5, [r7, #48]	; 0x30
   17a04:	mov	r2, #1
   17a08:	mov	r3, #1
   17a0c:	str	r2, [sp]
   17a10:	add	r1, r4, r1
   17a14:	add	r2, r1, #9
   17a18:	add	r1, r7, #60	; 0x3c
   17a1c:	blx	r5
   17a20:	cmp	r0, #0
   17a24:	bne	17a68 <flatcc_builder_union_vector_push@@Base+0xd0>
   17a28:	ldr	r1, [r7, #28]
   17a2c:	ldr	r0, [r7, #60]	; 0x3c
   17a30:	ldr	r3, [r7, #64]	; 0x40
   17a34:	ldr	r2, [r7, #32]
   17a38:	add	r0, r0, r1
   17a3c:	sub	r1, r3, r1
   17a40:	mvn	r3, #3
   17a44:	cmn	r1, #4
   17a48:	str	r0, [r7, #16]
   17a4c:	movcs	r1, r3
   17a50:	str	r1, [r7, #24]
   17a54:	str	r3, [r2, #4]
   17a58:	adds	r0, r0, r4
   17a5c:	movne	r6, r0
   17a60:	strne	r9, [r0]
   17a64:	strne	r8, [r0, #4]
   17a68:	mov	r0, r6
   17a6c:	sub	sp, fp, #24
   17a70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17a74:	ldr	r0, [pc, #24]	; 17a94 <flatcc_builder_union_vector_push@@Base+0xfc>
   17a78:	ldr	r1, [pc, #24]	; 17a98 <flatcc_builder_union_vector_push@@Base+0x100>
   17a7c:	ldr	r3, [pc, #24]	; 17a9c <flatcc_builder_union_vector_push@@Base+0x104>
   17a80:	movw	r2, #1677	; 0x68d
   17a84:	add	r0, pc, r0
   17a88:	add	r1, pc, r1
   17a8c:	add	r3, pc, r3
   17a90:	bl	12418 <__assert_fail@plt>
   17a94:	strheq	r2, [r0], -r5
   17a98:	andeq	r1, r0, r8, ror r4
   17a9c:	andeq	r2, r0, r7, ror r1

00017aa0 <flatcc_builder_append_union_vector@@Base>:
   17aa0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17aa4:	add	fp, sp, #24
   17aa8:	sub	sp, sp, #8
   17aac:	mov	r6, r0
   17ab0:	ldr	r0, [r0, #32]
   17ab4:	mov	r8, r1
   17ab8:	ldrh	r1, [r0, #14]
   17abc:	cmp	r1, #7
   17ac0:	bne	17bb0 <flatcc_builder_append_union_vector@@Base+0x110>
   17ac4:	ldr	r1, [r0, #20]
   17ac8:	mov	r5, r2
   17acc:	adds	r1, r1, r2
   17ad0:	cmpcc	r1, #536870912	; 0x20000000
   17ad4:	bcc	17af8 <flatcc_builder_append_union_vector@@Base+0x58>
   17ad8:	ldr	r0, [pc, #252]	; 17bdc <flatcc_builder_append_union_vector@@Base+0x13c>
   17adc:	ldr	r1, [pc, #252]	; 17be0 <flatcc_builder_append_union_vector@@Base+0x140>
   17ae0:	ldr	r3, [pc, #252]	; 17be4 <flatcc_builder_append_union_vector@@Base+0x144>
   17ae4:	mov	r2, #892	; 0x37c
   17ae8:	add	r0, pc, r0
   17aec:	add	r1, pc, r1
   17af0:	add	r3, pc, r3
   17af4:	bl	12418 <__assert_fail@plt>
   17af8:	str	r1, [r0, #20]
   17afc:	ldr	r4, [r6, #20]
   17b00:	ldr	r0, [r6, #24]
   17b04:	add	r1, r4, r5, lsl #3
   17b08:	cmp	r1, r0
   17b0c:	str	r1, [r6, #20]
   17b10:	bcs	17b34 <flatcc_builder_append_union_vector@@Base+0x94>
   17b14:	ldr	r0, [r6, #16]
   17b18:	adds	r7, r0, r4
   17b1c:	beq	17ba0 <flatcc_builder_append_union_vector@@Base+0x100>
   17b20:	lsl	r2, r5, #3
   17b24:	mov	r0, r7
   17b28:	mov	r1, r8
   17b2c:	bl	12388 <memcpy@plt>
   17b30:	b	17ba4 <flatcc_builder_append_union_vector@@Base+0x104>
   17b34:	ldr	r2, [r6, #28]
   17b38:	ldr	r0, [r6, #40]	; 0x28
   17b3c:	ldr	r7, [r6, #48]	; 0x30
   17b40:	mov	r3, #1
   17b44:	str	r3, [sp]
   17b48:	mov	r3, #1
   17b4c:	add	r1, r1, r2
   17b50:	add	r2, r1, #1
   17b54:	add	r1, r6, #60	; 0x3c
   17b58:	blx	r7
   17b5c:	mov	r7, #0
   17b60:	cmp	r0, #0
   17b64:	bne	17ba4 <flatcc_builder_append_union_vector@@Base+0x104>
   17b68:	ldr	r1, [r6, #28]
   17b6c:	ldr	r0, [r6, #60]	; 0x3c
   17b70:	ldr	r3, [r6, #64]	; 0x40
   17b74:	ldr	r2, [r6, #32]
   17b78:	add	r0, r0, r1
   17b7c:	sub	r1, r3, r1
   17b80:	mvn	r3, #3
   17b84:	cmn	r1, #4
   17b88:	str	r0, [r6, #16]
   17b8c:	movcs	r1, r3
   17b90:	str	r1, [r6, #24]
   17b94:	str	r3, [r2, #4]
   17b98:	adds	r7, r0, r4
   17b9c:	bne	17b20 <flatcc_builder_append_union_vector@@Base+0x80>
   17ba0:	mov	r7, #0
   17ba4:	mov	r0, r7
   17ba8:	sub	sp, fp, #24
   17bac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17bb0:	ldr	r0, [pc, #24]	; 17bd0 <flatcc_builder_append_union_vector@@Base+0x130>
   17bb4:	ldr	r1, [pc, #24]	; 17bd4 <flatcc_builder_append_union_vector@@Base+0x134>
   17bb8:	ldr	r3, [pc, #24]	; 17bd8 <flatcc_builder_append_union_vector@@Base+0x138>
   17bbc:	movw	r2, #1692	; 0x69c
   17bc0:	add	r0, pc, r0
   17bc4:	add	r1, pc, r1
   17bc8:	add	r3, pc, r3
   17bcc:	bl	12418 <__assert_fail@plt>
   17bd0:	andeq	r1, r0, r9, ror pc
   17bd4:	andeq	r1, r0, ip, lsr r3
   17bd8:	andeq	r2, r0, r8, lsr #1
   17bdc:	ldrdeq	r2, [r0], -lr
   17be0:	andeq	r1, r0, r4, lsl r4
   17be4:	strdeq	r2, [r0], -r1

00017be8 <flatcc_builder_create_string@@Base>:
   17be8:	push	{r4, r5, r6, sl, fp, lr}
   17bec:	add	fp, sp, #16
   17bf0:	sub	sp, sp, #80	; 0x50
   17bf4:	str	r2, [fp, #-20]	; 0xffffffec
   17bf8:	mvn	r5, r2
   17bfc:	mov	r6, r0
   17c00:	sub	r3, fp, #20
   17c04:	cmp	r2, #0
   17c08:	add	lr, sp, #4
   17c0c:	ldr	ip, [r0, #136]	; 0x88
   17c10:	mov	r0, #4
   17c14:	str	r0, [sp, #16]
   17c18:	str	r3, [sp, #12]
   17c1c:	str	r0, [sp, #4]
   17c20:	mov	r3, #1
   17c24:	addne	r0, r2, #4
   17c28:	str	r3, [sp, #8]
   17c2c:	strne	r2, [sp, #24]
   17c30:	strne	r1, [sp, #20]
   17c34:	movne	r3, #2
   17c38:	strne	r3, [sp, #8]
   17c3c:	strne	r0, [sp, #4]
   17c40:	add	r5, ip, r5
   17c44:	and	r5, r5, #3
   17c48:	add	r5, r5, #1
   17c4c:	add	r1, r0, r5
   17c50:	add	r0, lr, r3, lsl #3
   17c54:	str	r1, [sp, #4]
   17c58:	cmp	r1, #0
   17c5c:	ldr	r2, [pc, #132]	; 17ce8 <flatcc_builder_create_string@@Base+0x100>
   17c60:	ldr	r2, [pc, r2]
   17c64:	str	r2, [r0, #8]
   17c68:	add	r2, r3, #1
   17c6c:	str	r5, [r0, #12]
   17c70:	str	r2, [sp, #8]
   17c74:	ble	17cc8 <flatcc_builder_create_string@@Base+0xe0>
   17c78:	ldr	r0, [r6, #36]	; 0x24
   17c7c:	ldr	r4, [r6, #44]	; 0x2c
   17c80:	sub	r5, ip, r1
   17c84:	str	r1, [sp]
   17c88:	add	r1, lr, #8
   17c8c:	mov	r3, r5
   17c90:	blx	r4
   17c94:	cmp	r0, #0
   17c98:	streq	r5, [r6, #136]	; 0x88
   17c9c:	moveq	r0, r5
   17ca0:	subeq	sp, fp, #16
   17ca4:	popeq	{r4, r5, r6, sl, fp, pc}
   17ca8:	ldr	r0, [pc, #72]	; 17cf8 <flatcc_builder_create_string@@Base+0x110>
   17cac:	ldr	r1, [pc, #72]	; 17cfc <flatcc_builder_create_string@@Base+0x114>
   17cb0:	ldr	r3, [pc, #72]	; 17d00 <flatcc_builder_create_string@@Base+0x118>
   17cb4:	movw	r2, #651	; 0x28b
   17cb8:	add	r0, pc, r0
   17cbc:	add	r1, pc, r1
   17cc0:	add	r3, pc, r3
   17cc4:	bl	12418 <__assert_fail@plt>
   17cc8:	ldr	r0, [pc, #28]	; 17cec <flatcc_builder_create_string@@Base+0x104>
   17ccc:	ldr	r1, [pc, #28]	; 17cf0 <flatcc_builder_create_string@@Base+0x108>
   17cd0:	ldr	r3, [pc, #28]	; 17cf4 <flatcc_builder_create_string@@Base+0x10c>
   17cd4:	movw	r2, #647	; 0x287
   17cd8:	add	r0, pc, r0
   17cdc:	add	r1, pc, r1
   17ce0:	add	r3, pc, r3
   17ce4:	bl	12418 <__assert_fail@plt>
   17ce8:	andeq	r3, r1, r0, ror #7
   17cec:	andeq	r2, r0, r5, ror #7
   17cf0:	andeq	r1, r0, r4, lsr #4
   17cf4:	muleq	r0, ip, r2
   17cf8:	andeq	r2, r0, r5, lsl #8
   17cfc:	andeq	r1, r0, r4, asr #4
   17d00:			; <UNDEFINED> instruction: 0x000022bc

00017d04 <flatcc_builder_create_string_str@@Base>:
   17d04:	push	{r4, r5, fp, lr}
   17d08:	add	fp, sp, #8
   17d0c:	mov	r5, r0
   17d10:	mov	r0, r1
   17d14:	mov	r4, r1
   17d18:	bl	123dc <strlen@plt>
   17d1c:	mov	r2, r0
   17d20:	mov	r0, r5
   17d24:	mov	r1, r4
   17d28:	pop	{r4, r5, fp, lr}
   17d2c:	b	17be8 <flatcc_builder_create_string@@Base>

00017d30 <flatcc_builder_create_string_strn@@Base>:
   17d30:	push	{r4, r5, r6, sl, fp, lr}
   17d34:	add	fp, sp, #16
   17d38:	mov	r6, r0
   17d3c:	mov	r5, r1
   17d40:	mov	r0, r1
   17d44:	mov	r1, #0
   17d48:	mov	r4, r2
   17d4c:	bl	12400 <memchr@plt>
   17d50:	cmp	r0, #0
   17d54:	mov	r1, r5
   17d58:	subne	r4, r0, r5
   17d5c:	mov	r0, r6
   17d60:	mov	r2, r4
   17d64:	pop	{r4, r5, r6, sl, fp, lr}
   17d68:	b	17be8 <flatcc_builder_create_string@@Base>

00017d6c <flatcc_builder_end_string@@Base>:
   17d6c:	push	{r4, r5, fp, lr}
   17d70:	add	fp, sp, #8
   17d74:	mov	r4, r0
   17d78:	ldr	r0, [r0, #32]
   17d7c:	ldrh	r1, [r0, #14]
   17d80:	cmp	r1, #6
   17d84:	bne	17e2c <flatcc_builder_end_string@@Base+0xc0>
   17d88:	ldr	r2, [r0, #20]
   17d8c:	ldr	r0, [r4, #20]
   17d90:	cmp	r2, r0
   17d94:	bne	17e4c <flatcc_builder_end_string@@Base+0xe0>
   17d98:	ldr	r1, [r4, #16]
   17d9c:	mov	r0, r4
   17da0:	bl	17be8 <flatcc_builder_create_string@@Base>
   17da4:	mov	r5, r0
   17da8:	cmp	r0, #0
   17dac:	beq	17e24 <flatcc_builder_end_string@@Base+0xb8>
   17db0:	ldr	r0, [r4, #16]
   17db4:	ldr	r2, [r4, #20]
   17db8:	mov	r1, #0
   17dbc:	bl	123f4 <memset@plt>
   17dc0:	ldr	r0, [r4, #32]
   17dc4:	ldr	r1, [r4, #60]	; 0x3c
   17dc8:	ldr	ip, [r4, #64]	; 0x40
   17dcc:	ldr	r3, [r0, #8]
   17dd0:	str	r3, [r4, #20]
   17dd4:	ldr	r3, [r0]
   17dd8:	str	r3, [r4, #28]
   17ddc:	add	r1, r1, r3
   17de0:	ldr	r2, [r0, #4]
   17de4:	str	r1, [r4, #16]
   17de8:	sub	r1, ip, r3
   17dec:	cmp	r1, r2
   17df0:	movhi	r1, r2
   17df4:	str	r1, [r4, #24]
   17df8:	ldrh	r1, [r4, #130]	; 0x82
   17dfc:	ldrh	r2, [r4, #128]	; 0x80
   17e00:	cmp	r2, r1
   17e04:	strhcc	r1, [r4, #128]	; 0x80
   17e08:	ldrh	r1, [r0, #12]
   17e0c:	sub	r0, r0, #36	; 0x24
   17e10:	str	r0, [r4, #32]
   17e14:	strh	r1, [r4, #130]	; 0x82
   17e18:	ldr	r0, [r4, #156]	; 0x9c
   17e1c:	sub	r0, r0, #1
   17e20:	str	r0, [r4, #156]	; 0x9c
   17e24:	mov	r0, r5
   17e28:	pop	{r4, r5, fp, pc}
   17e2c:	ldr	r0, [pc, #56]	; 17e6c <flatcc_builder_end_string@@Base+0x100>
   17e30:	ldr	r1, [pc, #56]	; 17e70 <flatcc_builder_end_string@@Base+0x104>
   17e34:	ldr	r3, [pc, #56]	; 17e74 <flatcc_builder_end_string@@Base+0x108>
   17e38:	movw	r2, #1732	; 0x6c4
   17e3c:	add	r0, pc, r0
   17e40:	add	r1, pc, r1
   17e44:	add	r3, pc, r3
   17e48:	bl	12418 <__assert_fail@plt>
   17e4c:	ldr	r0, [pc, #36]	; 17e78 <flatcc_builder_end_string@@Base+0x10c>
   17e50:	ldr	r1, [pc, #36]	; 17e7c <flatcc_builder_end_string@@Base+0x110>
   17e54:	ldr	r3, [pc, #36]	; 17e80 <flatcc_builder_end_string@@Base+0x114>
   17e58:	movw	r2, #1733	; 0x6c5
   17e5c:	add	r0, pc, r0
   17e60:	add	r1, pc, r1
   17e64:	add	r3, pc, r3
   17e68:	bl	12418 <__assert_fail@plt>
   17e6c:	andeq	r1, r0, r0, lsl #12
   17e70:	andeq	r1, r0, r0, asr #1
   17e74:	andeq	r1, r0, fp, lsr #29
   17e78:	ldrdeq	r1, [r0], -r6
   17e7c:	andeq	r1, r0, r0, lsr #1
   17e80:	andeq	r1, r0, fp, lsl #29

00017e84 <flatcc_builder_string_edit@@Base>:
   17e84:	ldr	r0, [r0, #16]
   17e88:	bx	lr

00017e8c <flatcc_builder_string_len@@Base>:
   17e8c:	ldr	r0, [r0, #32]
   17e90:	ldr	r0, [r0, #20]
   17e94:	bx	lr

00017e98 <flatcc_builder_table_edit@@Base>:
   17e98:	push	{fp, lr}
   17e9c:	mov	fp, sp
   17ea0:	ldr	r2, [r0, #32]
   17ea4:	ldrh	r2, [r2, #14]
   17ea8:	cmp	r2, #3
   17eac:	ldreq	r2, [r0, #16]
   17eb0:	ldreq	r0, [r0, #20]
   17eb4:	addeq	r0, r2, r0
   17eb8:	subeq	r0, r0, r1
   17ebc:	popeq	{fp, pc}
   17ec0:	ldr	r0, [pc, #24]	; 17ee0 <flatcc_builder_table_edit@@Base+0x48>
   17ec4:	ldr	r1, [pc, #24]	; 17ee4 <flatcc_builder_table_edit@@Base+0x4c>
   17ec8:	ldr	r3, [pc, #24]	; 17ee8 <flatcc_builder_table_edit@@Base+0x50>
   17ecc:	movw	r2, #1794	; 0x702
   17ed0:	add	r0, pc, r0
   17ed4:	add	r1, pc, r1
   17ed8:	add	r3, pc, r3
   17edc:	bl	12418 <__assert_fail@plt>
   17ee0:	andeq	r1, r0, ip, asr r8
   17ee4:	andeq	r1, r0, ip, lsr #32
   17ee8:	andeq	r1, r0, ip, lsl #30

00017eec <flatcc_builder_table_add_copy@@Base>:
   17eec:	push	{r4, r5, r6, sl, fp, lr}
   17ef0:	add	fp, sp, #16
   17ef4:	mov	r4, r3
   17ef8:	ldr	r3, [fp, #8]
   17efc:	mov	r5, r2
   17f00:	mov	r2, r4
   17f04:	bl	16e68 <flatcc_builder_table_add@@Base>
   17f08:	mov	r6, r0
   17f0c:	cmp	r0, #0
   17f10:	beq	17f24 <flatcc_builder_table_add_copy@@Base+0x38>
   17f14:	mov	r0, r6
   17f18:	mov	r1, r5
   17f1c:	mov	r2, r4
   17f20:	bl	12388 <memcpy@plt>
   17f24:	mov	r0, r6
   17f28:	pop	{r4, r5, r6, sl, fp, pc}

00017f2c <flatcc_builder_push_buffer_alignment@@Base>:
   17f2c:	ldrh	r1, [r0, #128]	; 0x80
   17f30:	mov	r2, #4
   17f34:	strh	r2, [r0, #128]	; 0x80
   17f38:	mov	r0, r1
   17f3c:	bx	lr

00017f40 <flatcc_builder_pop_buffer_alignment@@Base>:
   17f40:	ldrh	r2, [r0, #128]	; 0x80
   17f44:	cmp	r2, r1
   17f48:	strhcc	r1, [r0, #128]	; 0x80
   17f4c:	bx	lr

00017f50 <flatcc_builder_get_buffer_alignment@@Base>:
   17f50:	ldrh	r0, [r0, #128]	; 0x80
   17f54:	bx	lr

00017f58 <flatcc_builder_set_vtable_clustering@@Base>:
   17f58:	clz	r1, r1
   17f5c:	lsr	r1, r1, #5
   17f60:	str	r1, [r0, #180]	; 0xb4
   17f64:	bx	lr

00017f68 <flatcc_builder_set_block_align@@Base>:
   17f68:	strh	r1, [r0, #132]	; 0x84
   17f6c:	bx	lr

00017f70 <flatcc_builder_get_level@@Base>:
   17f70:	ldr	r0, [r0, #156]	; 0x9c
   17f74:	bx	lr

00017f78 <flatcc_builder_set_max_level@@Base>:
   17f78:	str	r1, [r0, #176]	; 0xb0
   17f7c:	ldr	r2, [r0, #160]	; 0xa0
   17f80:	cmp	r2, r1
   17f84:	strlt	r1, [r0, #160]	; 0xa0
   17f88:	bx	lr

00017f8c <flatcc_builder_get_buffer_size@@Base>:
   17f8c:	ldr	r1, [r0, #136]	; 0x88
   17f90:	ldr	r0, [r0, #140]	; 0x8c
   17f94:	sub	r0, r0, r1
   17f98:	bx	lr

00017f9c <flatcc_builder_get_buffer_start@@Base>:
   17f9c:	ldr	r0, [r0, #136]	; 0x88
   17fa0:	bx	lr

00017fa4 <flatcc_builder_get_buffer_end@@Base>:
   17fa4:	ldr	r0, [r0, #140]	; 0x8c
   17fa8:	bx	lr

00017fac <flatcc_builder_set_vtable_cache_limit@@Base>:
   17fac:	str	r1, [r0, #172]	; 0xac
   17fb0:	bx	lr

00017fb4 <flatcc_builder_set_identifier@@Base>:
   17fb4:	ldr	r2, [pc, #20]	; 17fd0 <flatcc_builder_set_identifier@@Base+0x1c>
   17fb8:	cmp	r1, #0
   17fbc:	ldr	r2, [pc, r2]
   17fc0:	movne	r2, r1
   17fc4:	ldr	r1, [r2]
   17fc8:	str	r1, [r0, #168]	; 0xa8
   17fcc:	bx	lr
   17fd0:	andeq	r3, r1, r4, lsl #1

00017fd4 <flatcc_builder_get_type@@Base>:
   17fd4:	ldr	r0, [r0, #32]
   17fd8:	cmp	r0, #0
   17fdc:	ldrhne	r0, [r0, #14]
   17fe0:	moveq	r0, #0
   17fe4:	bx	lr

00017fe8 <flatcc_builder_get_type_at@@Base>:
   17fe8:	mov	r2, r0
   17fec:	mov	r0, #0
   17ff0:	cmp	r1, #1
   17ff4:	blt	18018 <flatcc_builder_get_type_at@@Base+0x30>
   17ff8:	ldr	r3, [r2, #156]	; 0x9c
   17ffc:	cmp	r3, r1
   18000:	bxlt	lr
   18004:	sub	r0, r1, r3
   18008:	ldr	r1, [r2, #32]
   1800c:	add	r0, r0, r0, lsl #3
   18010:	add	r0, r1, r0, lsl #2
   18014:	ldrh	r0, [r0, #14]
   18018:	bx	lr

0001801c <flatcc_builder_get_direct_buffer@@Base>:
   1801c:	ldr	r2, [r0, #184]	; 0xb8
   18020:	cmp	r2, #0
   18024:	beq	18038 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   18028:	ldr	r2, [r0, #188]	; 0xbc
   1802c:	ldr	r3, [r0, #192]	; 0xc0
   18030:	cmp	r2, r3
   18034:	beq	18050 <flatcc_builder_get_direct_buffer@@Base+0x34>
   18038:	cmp	r1, #0
   1803c:	moveq	r0, #0
   18040:	bxeq	lr
   18044:	mov	r0, #0
   18048:	str	r0, [r1]
   1804c:	bx	lr
   18050:	cmp	r1, #0
   18054:	ldrne	r2, [r0, #212]	; 0xd4
   18058:	strne	r2, [r1]
   1805c:	ldr	r0, [r0, #196]	; 0xc4
   18060:	bx	lr

00018064 <flatcc_builder_copy_buffer@@Base>:
   18064:	push	{fp, lr}
   18068:	mov	fp, sp
   1806c:	ldr	r3, [r0, #184]	; 0xb8
   18070:	cmp	r3, #0
   18074:	beq	180a8 <flatcc_builder_copy_buffer@@Base+0x44>
   18078:	add	r0, r0, #188	; 0xbc
   1807c:	bl	187b4 <flatcc_emitter_copy_buffer@@Base>
   18080:	cmp	r0, #0
   18084:	popne	{fp, pc}
   18088:	ldr	r0, [pc, #32]	; 180b0 <flatcc_builder_copy_buffer@@Base+0x4c>
   1808c:	ldr	r1, [pc, #32]	; 180b4 <flatcc_builder_copy_buffer@@Base+0x50>
   18090:	ldr	r3, [pc, #32]	; 180b8 <flatcc_builder_copy_buffer@@Base+0x54>
   18094:	movw	r2, #1926	; 0x786
   18098:	add	r0, pc, r0
   1809c:	add	r1, pc, r1
   180a0:	add	r3, pc, r3
   180a4:	bl	12418 <__assert_fail@plt>
   180a8:	mov	r0, #0
   180ac:	pop	{fp, pc}
   180b0:	ldrdeq	r1, [r0], -r3
   180b4:	andeq	r0, r0, r4, ror #28
   180b8:	andeq	r1, r0, pc, asr #27

000180bc <flatcc_builder_finalize_buffer@@Base>:
   180bc:	push	{r4, r5, r6, sl, fp, lr}
   180c0:	add	fp, sp, #16
   180c4:	mov	r5, r0
   180c8:	ldr	r0, [r0, #136]	; 0x88
   180cc:	cmp	r1, #0
   180d0:	ldr	r2, [r5, #140]	; 0x8c
   180d4:	sub	r4, r2, r0
   180d8:	mov	r0, r4
   180dc:	strne	r4, [r1]
   180e0:	bl	123ac <malloc@plt>
   180e4:	cmp	r0, #0
   180e8:	beq	18138 <flatcc_builder_finalize_buffer@@Base+0x7c>
   180ec:	mov	r6, r0
   180f0:	ldr	r0, [r5, #184]	; 0xb8
   180f4:	cmp	r0, #0
   180f8:	beq	18158 <flatcc_builder_finalize_buffer@@Base+0x9c>
   180fc:	add	r0, r5, #188	; 0xbc
   18100:	mov	r1, r6
   18104:	mov	r2, r4
   18108:	bl	187b4 <flatcc_emitter_copy_buffer@@Base>
   1810c:	cmp	r0, #0
   18110:	movne	r0, r6
   18114:	popne	{r4, r5, r6, sl, fp, pc}
   18118:	ldr	r0, [pc, #88]	; 18178 <flatcc_builder_finalize_buffer@@Base+0xbc>
   1811c:	ldr	r1, [pc, #88]	; 1817c <flatcc_builder_finalize_buffer@@Base+0xc0>
   18120:	ldr	r3, [pc, #88]	; 18180 <flatcc_builder_finalize_buffer@@Base+0xc4>
   18124:	movw	r2, #1926	; 0x786
   18128:	add	r0, pc, r0
   1812c:	add	r1, pc, r1
   18130:	add	r3, pc, r3
   18134:	bl	12418 <__assert_fail@plt>
   18138:	ldr	r0, [pc, #80]	; 18190 <flatcc_builder_finalize_buffer@@Base+0xd4>
   1813c:	ldr	r1, [pc, #80]	; 18194 <flatcc_builder_finalize_buffer@@Base+0xd8>
   18140:	ldr	r3, [pc, #80]	; 18198 <flatcc_builder_finalize_buffer@@Base+0xdc>
   18144:	movw	r2, #1944	; 0x798
   18148:	add	r0, pc, r0
   1814c:	add	r1, pc, r1
   18150:	add	r3, pc, r3
   18154:	bl	12418 <__assert_fail@plt>
   18158:	ldr	r0, [pc, #36]	; 18184 <flatcc_builder_finalize_buffer@@Base+0xc8>
   1815c:	ldr	r1, [pc, #36]	; 18188 <flatcc_builder_finalize_buffer@@Base+0xcc>
   18160:	ldr	r3, [pc, #36]	; 1818c <flatcc_builder_finalize_buffer@@Base+0xd0>
   18164:	movw	r2, #1948	; 0x79c
   18168:	add	r0, pc, r0
   1816c:	add	r1, pc, r1
   18170:	add	r3, pc, r3
   18174:	bl	12418 <__assert_fail@plt>
   18178:	andeq	r1, r0, r3, asr #32
   1817c:	ldrdeq	r0, [r0], -r4
   18180:	andeq	r1, r0, pc, lsr sp
   18184:	andeq	r1, r0, r5, asr pc
   18188:	muleq	r0, r4, sp
   1818c:	andeq	r1, r0, r4, asr #26
   18190:	andeq	r1, r0, r5, ror pc
   18194:			; <UNDEFINED> instruction: 0x00000db4
   18198:	andeq	r1, r0, r4, ror #26

0001819c <flatcc_builder_finalize_aligned_buffer@@Base>:
   1819c:	push	{r4, r5, r6, r7, fp, lr}
   181a0:	add	fp, sp, #16
   181a4:	sub	sp, sp, #8
   181a8:	mov	r5, r0
   181ac:	mov	r4, r1
   181b0:	ldr	r0, [r0, #136]	; 0x88
   181b4:	ldr	r1, [r5, #140]	; 0x8c
   181b8:	cmp	r4, #0
   181bc:	sub	r0, r1, r0
   181c0:	mov	r1, #0
   181c4:	strne	r0, [r4]
   181c8:	ldrh	r2, [r5, #128]	; 0x80
   181cc:	str	r1, [sp, #4]
   181d0:	add	r0, r0, r2
   181d4:	cmp	r2, #4
   181d8:	mov	r1, r2
   181dc:	rsb	r2, r2, #0
   181e0:	sub	r0, r0, #1
   181e4:	movls	r1, #4
   181e8:	and	r7, r0, r2
   181ec:	add	r0, sp, #4
   181f0:	mov	r2, r7
   181f4:	bl	123e8 <posix_memalign@plt>
   181f8:	ldr	r6, [sp, #4]
   181fc:	cmp	r0, #0
   18200:	cmpne	r6, #0
   18204:	bne	18254 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   18208:	cmp	r6, #0
   1820c:	beq	1825c <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   18210:	ldr	r0, [r5, #184]	; 0xb8
   18214:	cmp	r0, #0
   18218:	beq	18254 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   1821c:	add	r0, r5, #188	; 0xbc
   18220:	mov	r1, r6
   18224:	mov	r2, r7
   18228:	bl	187b4 <flatcc_emitter_copy_buffer@@Base>
   1822c:	cmp	r0, #0
   18230:	bne	18268 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   18234:	ldr	r0, [pc, #56]	; 18274 <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
   18238:	ldr	r1, [pc, #56]	; 18278 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   1823c:	ldr	r3, [pc, #56]	; 1827c <flatcc_builder_finalize_aligned_buffer@@Base+0xe0>
   18240:	movw	r2, #1926	; 0x786
   18244:	add	r0, pc, r0
   18248:	add	r1, pc, r1
   1824c:	add	r3, pc, r3
   18250:	bl	12418 <__assert_fail@plt>
   18254:	mov	r0, r6
   18258:	bl	1237c <free@plt>
   1825c:	mov	r6, #0
   18260:	cmp	r4, #0
   18264:	strne	r6, [r4]
   18268:	mov	r0, r6
   1826c:	sub	sp, fp, #16
   18270:	pop	{r4, r5, r6, r7, fp, pc}
   18274:	andeq	r0, r0, r7, lsr #30
   18278:			; <UNDEFINED> instruction: 0x00000cb8
   1827c:	andeq	r1, r0, r3, lsr #24

00018280 <flatcc_builder_aligned_alloc@@Base>:
   18280:	push	{fp, lr}
   18284:	mov	fp, sp
   18288:	sub	sp, sp, #8
   1828c:	mov	r2, r1
   18290:	mov	r1, r0
   18294:	mov	r0, #0
   18298:	cmp	r1, #4
   1829c:	str	r0, [sp, #4]
   182a0:	add	r0, sp, #4
   182a4:	movls	r1, #4
   182a8:	bl	123e8 <posix_memalign@plt>
   182ac:	mov	r1, r0
   182b0:	ldr	r0, [sp, #4]
   182b4:	cmp	r1, #0
   182b8:	cmpne	r0, #0
   182bc:	bne	182c8 <flatcc_builder_aligned_alloc@@Base+0x48>
   182c0:	mov	sp, fp
   182c4:	pop	{fp, pc}
   182c8:	bl	1237c <free@plt>
   182cc:	mov	r0, #0
   182d0:	str	r0, [sp, #4]
   182d4:	mov	sp, fp
   182d8:	pop	{fp, pc}

000182dc <flatcc_builder_aligned_free@@Base>:
   182dc:	b	1237c <free@plt>

000182e0 <flatcc_builder_get_emit_context@@Base>:
   182e0:	ldr	r0, [r0, #36]	; 0x24
   182e4:	bx	lr

000182e8 <flatcc_emitter_recycle_page@@Base>:
   182e8:	ldr	r3, [r0]
   182ec:	mov	r2, r0
   182f0:	mvn	r0, #0
   182f4:	cmp	r3, r1
   182f8:	beq	18338 <flatcc_emitter_recycle_page@@Base+0x50>
   182fc:	ldr	r2, [r2, #4]
   18300:	cmp	r2, r1
   18304:	bxeq	lr
   18308:	ldr	r0, [r1, #2944]	; 0xb80
   1830c:	ldr	r2, [r1, #2948]	; 0xb84
   18310:	str	r2, [r0, #2948]	; 0xb84
   18314:	ldr	r2, [r1, #2948]	; 0xb84
   18318:	str	r0, [r2, #2944]	; 0xb80
   1831c:	ldr	r0, [r3, #2948]	; 0xb84
   18320:	str	r3, [r1, #2944]	; 0xb80
   18324:	str	r0, [r1, #2948]	; 0xb84
   18328:	str	r1, [r0, #2944]	; 0xb80
   1832c:	ldr	r0, [r1, #2944]	; 0xb80
   18330:	str	r1, [r0, #2948]	; 0xb84
   18334:	mov	r0, #0
   18338:	bx	lr

0001833c <flatcc_emitter_reset@@Base>:
   1833c:	push	{r4, sl, fp, lr}
   18340:	add	fp, sp, #8
   18344:	ldr	r1, [r0]
   18348:	cmp	r1, #0
   1834c:	beq	18404 <flatcc_emitter_reset@@Base+0xc8>
   18350:	mov	r4, r0
   18354:	add	r2, r1, #1472	; 0x5c0
   18358:	mov	r0, #1472	; 0x5c0
   1835c:	mov	r3, #0
   18360:	stmib	r4, {r1, r2}
   18364:	str	r0, [r4, #12]
   18368:	str	r2, [r4, #16]
   1836c:	str	r0, [r4, #20]
   18370:	movw	r0, #64064	; 0xfa40
   18374:	movt	r0, #65535	; 0xffff
   18378:	str	r0, [r1, #2952]	; 0xb88
   1837c:	ldr	r2, [r4, #32]
   18380:	ldr	r0, [r4, #24]
   18384:	cmp	r2, #0
   18388:	moveq	r2, r0
   1838c:	streq	r0, [r4, #32]
   18390:	str	r3, [r4, #24]
   18394:	add	r2, r2, r2, lsl #1
   18398:	lsr	r2, r2, #2
   1839c:	add	r0, r2, r0, lsr #2
   183a0:	str	r0, [r4, #32]
   183a4:	ldr	r2, [r4, #28]
   183a8:	cmp	r2, r0, lsl #1
   183ac:	bls	18404 <flatcc_emitter_reset@@Base+0xc8>
   183b0:	mov	r2, r1
   183b4:	ldr	r0, [r2, #2944]!	; 0xb80
   183b8:	cmp	r0, r1
   183bc:	popeq	{r4, sl, fp, pc}
   183c0:	ldr	r3, [r0, #2944]	; 0xb80
   183c4:	str	r3, [r2]
   183c8:	ldr	r2, [r0, #2944]	; 0xb80
   183cc:	str	r1, [r2, #2948]	; 0xb84
   183d0:	bl	1237c <free@plt>
   183d4:	ldr	r0, [r4, #28]
   183d8:	ldr	r1, [r4, #32]
   183dc:	sub	r0, r0, #2944	; 0xb80
   183e0:	cmp	r0, r1, lsl #1
   183e4:	str	r0, [r4, #28]
   183e8:	bls	18404 <flatcc_emitter_reset@@Base+0xc8>
   183ec:	ldr	r1, [r4, #4]
   183f0:	ldr	r3, [r4]
   183f4:	mov	r2, r1
   183f8:	ldr	r0, [r2, #2944]!	; 0xb80
   183fc:	cmp	r0, r3
   18400:	bne	183c0 <flatcc_emitter_reset@@Base+0x84>
   18404:	pop	{r4, sl, fp, pc}

00018408 <flatcc_emitter_clear@@Base>:
   18408:	push	{r4, r5, r6, sl, fp, lr}
   1840c:	add	fp, sp, #16
   18410:	ldr	r5, [r0]
   18414:	cmp	r5, #0
   18418:	beq	18468 <flatcc_emitter_clear@@Base+0x60>
   1841c:	mov	r4, r0
   18420:	ldr	r0, [r5, #2948]	; 0xb84
   18424:	mov	r6, #0
   18428:	str	r6, [r0, #2944]	; 0xb80
   1842c:	ldr	r0, [r5, #2944]	; 0xb80
   18430:	cmp	r0, #0
   18434:	beq	18448 <flatcc_emitter_clear@@Base+0x40>
   18438:	mov	r5, r0
   1843c:	ldr	r0, [r0, #2948]	; 0xb84
   18440:	bl	1237c <free@plt>
   18444:	b	1842c <flatcc_emitter_clear@@Base+0x24>
   18448:	mov	r0, r5
   1844c:	bl	1237c <free@plt>
   18450:	vmov.i32	q8, #0	; 0x00000000
   18454:	add	r0, r4, #16
   18458:	vst1.32	{d16-d17}, [r0]
   1845c:	mov	r0, #32
   18460:	vst1.32	{d16-d17}, [r4], r0
   18464:	str	r6, [r4]
   18468:	pop	{r4, r5, r6, sl, fp, pc}

0001846c <flatcc_emitter@@Base>:
   1846c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18470:	add	fp, sp, #28
   18474:	sub	sp, sp, #4
   18478:	mov	r6, r0
   1847c:	mov	r7, r1
   18480:	ldr	r0, [r0, #24]
   18484:	ldr	r1, [fp, #8]
   18488:	mov	r4, r2
   1848c:	cmn	r3, #1
   18490:	mov	r9, r6
   18494:	add	r0, r0, r1
   18498:	str	r0, [r6, #24]
   1849c:	ble	185f0 <flatcc_emitter@@Base+0x184>
   184a0:	ldr	r0, [r9, #20]!
   184a4:	cmp	r0, r1
   184a8:	bcs	18750 <flatcc_emitter@@Base+0x2e4>
   184ac:	mov	r8, #0
   184b0:	cmp	r4, #0
   184b4:	beq	187a8 <flatcc_emitter@@Base+0x33c>
   184b8:	movw	sl, #64064	; 0xfa40
   184bc:	movt	sl, #65535	; 0xffff
   184c0:	ldr	r8, [r7, #4]
   184c4:	cmp	r8, #0
   184c8:	beq	185dc <flatcc_emitter@@Base+0x170>
   184cc:	ldr	r9, [r7]
   184d0:	b	1850c <flatcc_emitter@@Base+0xa0>
   184d4:	mov	r5, r8
   184d8:	ldr	r0, [r6, #16]
   184dc:	mov	r1, r9
   184e0:	mov	r2, r5
   184e4:	bl	12388 <memcpy@plt>
   184e8:	ldr	r0, [r6, #16]
   184ec:	ldr	r1, [r6, #20]
   184f0:	add	r9, r9, r5
   184f4:	subs	r8, r8, r5
   184f8:	add	r2, r0, r5
   184fc:	sub	r0, r1, r5
   18500:	str	r2, [r6, #16]
   18504:	str	r0, [r6, #20]
   18508:	beq	185dc <flatcc_emitter@@Base+0x170>
   1850c:	cmp	r8, r0
   18510:	mov	r5, r8
   18514:	bls	184d8 <flatcc_emitter@@Base+0x6c>
   18518:	mov	r5, r0
   1851c:	cmp	r5, #0
   18520:	beq	1856c <flatcc_emitter@@Base+0x100>
   18524:	b	184d8 <flatcc_emitter@@Base+0x6c>
   18528:	ldr	r1, [r6]
   1852c:	str	r1, [r0, #2944]	; 0xb80
   18530:	str	r5, [r0, #2948]	; 0xb84
   18534:	str	r0, [r1, #2948]	; 0xb84
   18538:	str	r0, [r5, #2944]	; 0xb80
   1853c:	mov	r5, #2944	; 0xb80
   18540:	str	r0, [r6, #4]
   18544:	str	r0, [r6, #16]
   18548:	str	r5, [r6, #20]
   1854c:	ldr	r1, [r0, #2948]	; 0xb84
   18550:	ldr	r1, [r1, #2952]	; 0xb88
   18554:	add	r1, r1, #2944	; 0xb80
   18558:	str	r1, [r0, #2952]	; 0xb88
   1855c:	cmp	r8, r5
   18560:	bls	184d4 <flatcc_emitter@@Base+0x68>
   18564:	cmp	r5, #0
   18568:	bne	184d8 <flatcc_emitter@@Base+0x6c>
   1856c:	ldr	r5, [r6, #4]
   18570:	cmp	r5, #0
   18574:	beq	18588 <flatcc_emitter@@Base+0x11c>
   18578:	ldr	r0, [r5, #2944]	; 0xb80
   1857c:	ldr	r1, [r6]
   18580:	cmp	r0, r1
   18584:	bne	1853c <flatcc_emitter@@Base+0xd0>
   18588:	movw	r0, #2956	; 0xb8c
   1858c:	bl	123ac <malloc@plt>
   18590:	cmp	r0, #0
   18594:	beq	18760 <flatcc_emitter@@Base+0x2f4>
   18598:	ldr	r1, [r6, #28]
   1859c:	cmp	r5, #0
   185a0:	add	r1, r1, #2944	; 0xb80
   185a4:	str	r1, [r6, #28]
   185a8:	bne	18528 <flatcc_emitter@@Base+0xbc>
   185ac:	add	r1, r0, #1472	; 0x5c0
   185b0:	mov	r5, #1472	; 0x5c0
   185b4:	str	r0, [r6]
   185b8:	stmib	r6, {r0, r1, r5}
   185bc:	str	r1, [r6, #16]
   185c0:	str	r5, [r6, #20]
   185c4:	str	r0, [r0, #2944]	; 0xb80
   185c8:	str	r0, [r0, #2948]	; 0xb84
   185cc:	str	sl, [r0, #2952]	; 0xb88
   185d0:	cmp	r8, r5
   185d4:	bhi	18564 <flatcc_emitter@@Base+0xf8>
   185d8:	b	184d4 <flatcc_emitter@@Base+0x68>
   185dc:	subs	r4, r4, #1
   185e0:	add	r7, r7, #8
   185e4:	bne	184c0 <flatcc_emitter@@Base+0x54>
   185e8:	mov	r8, #0
   185ec:	b	187a8 <flatcc_emitter@@Base+0x33c>
   185f0:	ldr	r0, [r9, #12]!
   185f4:	cmp	r0, r1
   185f8:	bcs	18768 <flatcc_emitter@@Base+0x2fc>
   185fc:	mov	r8, #0
   18600:	cmp	r4, #0
   18604:	beq	187a8 <flatcc_emitter@@Base+0x33c>
   18608:	add	r0, r7, r4, lsl #3
   1860c:	ldr	sl, [r0, #-4]
   18610:	sub	r1, r0, #8
   18614:	str	r1, [sp]
   18618:	cmp	sl, #0
   1861c:	beq	18740 <flatcc_emitter@@Base+0x2d4>
   18620:	ldr	r0, [sp]
   18624:	ldr	r0, [r0]
   18628:	add	r7, r0, sl
   1862c:	ldr	r1, [r9]
   18630:	cmp	sl, r1
   18634:	bhi	18674 <flatcc_emitter@@Base+0x208>
   18638:	b	18710 <flatcc_emitter@@Base+0x2a4>
   1863c:	ldr	r1, [r5, #2952]	; 0xb88
   18640:	sub	r1, r1, #2944	; 0xb80
   18644:	str	r1, [r0, #2952]	; 0xb88
   18648:	mov	r1, #2944	; 0xb80
   1864c:	add	r2, r0, #2944	; 0xb80
   18650:	str	r0, [r6]
   18654:	str	r2, [r6, #8]
   18658:	str	r1, [r6, #12]
   1865c:	ldr	r2, [r0, #2944]	; 0xb80
   18660:	ldr	r2, [r2, #2952]	; 0xb88
   18664:	sub	r2, r2, #2944	; 0xb80
   18668:	str	r2, [r0, #2952]	; 0xb88
   1866c:	cmp	sl, r1
   18670:	bls	18710 <flatcc_emitter@@Base+0x2a4>
   18674:	cmp	r1, #0
   18678:	mov	r5, r1
   1867c:	bne	18714 <flatcc_emitter@@Base+0x2a8>
   18680:	ldr	r5, [r6]
   18684:	cmp	r5, #0
   18688:	beq	1869c <flatcc_emitter@@Base+0x230>
   1868c:	ldr	r0, [r5, #2948]	; 0xb84
   18690:	ldr	r1, [r6, #4]
   18694:	cmp	r0, r1
   18698:	bne	1863c <flatcc_emitter@@Base+0x1d0>
   1869c:	movw	r0, #2956	; 0xb8c
   186a0:	bl	123ac <malloc@plt>
   186a4:	cmp	r0, #0
   186a8:	beq	18760 <flatcc_emitter@@Base+0x2f4>
   186ac:	ldr	r1, [r6, #28]
   186b0:	cmp	r5, #0
   186b4:	add	r1, r1, #2944	; 0xb80
   186b8:	str	r1, [r6, #28]
   186bc:	beq	186d8 <flatcc_emitter@@Base+0x26c>
   186c0:	ldr	r1, [r6, #4]
   186c4:	str	r5, [r0, #2944]	; 0xb80
   186c8:	str	r1, [r0, #2948]	; 0xb84
   186cc:	str	r0, [r5, #2948]	; 0xb84
   186d0:	str	r0, [r1, #2944]	; 0xb80
   186d4:	b	18648 <flatcc_emitter@@Base+0x1dc>
   186d8:	add	r2, r0, #1472	; 0x5c0
   186dc:	mov	r1, #1472	; 0x5c0
   186e0:	str	r0, [r6]
   186e4:	stmib	r6, {r0, r2}
   186e8:	str	r1, [r6, #12]
   186ec:	str	r2, [r6, #16]
   186f0:	movw	r2, #64064	; 0xfa40
   186f4:	str	r1, [r6, #20]
   186f8:	str	r0, [r0, #2944]	; 0xb80
   186fc:	str	r0, [r0, #2948]	; 0xb84
   18700:	movt	r2, #65535	; 0xffff
   18704:	str	r2, [r0, #2952]	; 0xb88
   18708:	cmp	sl, r1
   1870c:	bhi	18674 <flatcc_emitter@@Base+0x208>
   18710:	mov	r5, sl
   18714:	sub	r0, r1, r5
   18718:	sub	r7, r7, r5
   1871c:	mov	r2, r5
   18720:	str	r0, [r6, #12]
   18724:	mov	r1, r7
   18728:	ldr	r0, [r6, #8]
   1872c:	sub	r0, r0, r5
   18730:	str	r0, [r6, #8]
   18734:	bl	12388 <memcpy@plt>
   18738:	subs	sl, sl, r5
   1873c:	bne	1862c <flatcc_emitter@@Base+0x1c0>
   18740:	ldr	r0, [sp]
   18744:	subs	r4, r4, #1
   18748:	bne	1860c <flatcc_emitter@@Base+0x1a0>
   1874c:	b	187a8 <flatcc_emitter@@Base+0x33c>
   18750:	ldr	r5, [r6, #16]
   18754:	add	r2, r5, r1
   18758:	str	r2, [r6, #16]
   1875c:	b	18774 <flatcc_emitter@@Base+0x308>
   18760:	mvn	r8, #0
   18764:	b	187a8 <flatcc_emitter@@Base+0x33c>
   18768:	ldr	r2, [r6, #8]
   1876c:	sub	r5, r2, r1
   18770:	str	r5, [r6, #8]
   18774:	sub	r0, r0, r1
   18778:	mov	r8, #0
   1877c:	cmp	r4, #0
   18780:	str	r0, [r9]
   18784:	beq	187a8 <flatcc_emitter@@Base+0x33c>
   18788:	ldm	r7, {r1, r2}
   1878c:	mov	r0, r5
   18790:	bl	12388 <memcpy@plt>
   18794:	ldr	r0, [r7, #4]
   18798:	add	r7, r7, #8
   1879c:	subs	r4, r4, #1
   187a0:	add	r5, r5, r0
   187a4:	bne	18788 <flatcc_emitter@@Base+0x31c>
   187a8:	mov	r0, r8
   187ac:	sub	sp, fp, #28
   187b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000187b4 <flatcc_emitter_copy_buffer@@Base>:
   187b4:	push	{r4, r5, r6, sl, fp, lr}
   187b8:	add	fp, sp, #16
   187bc:	mov	r3, r2
   187c0:	ldr	r2, [r0, #24]
   187c4:	mov	r5, #0
   187c8:	cmp	r2, r3
   187cc:	bhi	18854 <flatcc_emitter_copy_buffer@@Base+0xa0>
   187d0:	mov	r4, r0
   187d4:	ldr	r0, [r0]
   187d8:	cmp	r0, #0
   187dc:	beq	18854 <flatcc_emitter_copy_buffer@@Base+0xa0>
   187e0:	mov	r6, r1
   187e4:	ldr	r1, [r4, #4]
   187e8:	cmp	r0, r1
   187ec:	beq	1885c <flatcc_emitter_copy_buffer@@Base+0xa8>
   187f0:	ldr	r0, [r4, #12]
   187f4:	ldr	r1, [r4, #8]
   187f8:	rsb	r5, r0, #2944	; 0xb80
   187fc:	mov	r0, r6
   18800:	mov	r2, r5
   18804:	bl	12388 <memcpy@plt>
   18808:	ldm	r4, {r0, r1}
   1880c:	add	r5, r6, r5
   18810:	ldr	r6, [r0, #2944]	; 0xb80
   18814:	cmp	r6, r1
   18818:	beq	18840 <flatcc_emitter_copy_buffer@@Base+0x8c>
   1881c:	mov	r0, r5
   18820:	mov	r1, r6
   18824:	mov	r2, #2944	; 0xb80
   18828:	bl	12388 <memcpy@plt>
   1882c:	ldr	r6, [r6, #2944]	; 0xb80
   18830:	ldr	r0, [r4, #4]
   18834:	add	r5, r5, #2944	; 0xb80
   18838:	cmp	r6, r0
   1883c:	bne	1881c <flatcc_emitter_copy_buffer@@Base+0x68>
   18840:	ldr	r0, [r4, #20]
   18844:	mov	r1, r6
   18848:	rsb	r2, r0, #2944	; 0xb80
   1884c:	mov	r0, r5
   18850:	bl	12388 <memcpy@plt>
   18854:	mov	r0, r5
   18858:	pop	{r4, r5, r6, sl, fp, pc}
   1885c:	ldr	r1, [r4, #8]
   18860:	mov	r0, r6
   18864:	bl	12388 <memcpy@plt>
   18868:	mov	r0, r6
   1886c:	pop	{r4, r5, r6, sl, fp, pc}

00018870 <__libc_csu_init@@Base>:
   18870:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18874:	mov	r7, r0
   18878:	ldr	r6, [pc, #72]	; 188c8 <__libc_csu_init@@Base+0x58>
   1887c:	ldr	r5, [pc, #72]	; 188cc <__libc_csu_init@@Base+0x5c>
   18880:	add	r6, pc, r6
   18884:	add	r5, pc, r5
   18888:	sub	r6, r6, r5
   1888c:	mov	r8, r1
   18890:	mov	r9, r2
   18894:	bl	12350 <strcmp@plt-0x20>
   18898:	asrs	r6, r6, #2
   1889c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   188a0:	mov	r4, #0
   188a4:	add	r4, r4, #1
   188a8:	ldr	r3, [r5], #4
   188ac:	mov	r2, r9
   188b0:	mov	r1, r8
   188b4:	mov	r0, r7
   188b8:	blx	r3
   188bc:	cmp	r6, r4
   188c0:	bne	188a4 <__libc_csu_init@@Base+0x34>
   188c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   188c8:	andeq	r2, r1, r4, lsl #13
   188cc:	andeq	r2, r1, ip, ror r6

000188d0 <__libc_csu_fini@@Base>:
   188d0:	bx	lr

Disassembly of section .fini:

000188d4 <.fini>:
   188d4:	push	{r3, lr}
   188d8:	pop	{r3, pc}
