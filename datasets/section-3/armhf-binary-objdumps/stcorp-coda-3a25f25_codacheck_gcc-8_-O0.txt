
../repos/stcorp-coda-3a25f25/codacheck:     file format elf32-littlearm


Disassembly of section .init:

00010bac <.init>:
   10bac:	push	{r3, lr}
   10bb0:	bl	10d7c <_start@@Base+0x3c>
   10bb4:	pop	{r3, pc}

Disassembly of section .plt:

00010bb8 <coda_set_option_perform_boundary_checks@plt-0x14>:
   10bb8:	push	{lr}		; (str lr, [sp, #-4]!)
   10bbc:	ldr	lr, [pc, #4]	; 10bc8 <coda_set_option_perform_boundary_checks@plt-0x4>
   10bc0:	add	lr, pc, lr
   10bc4:	ldr	pc, [lr, #8]!
   10bc8:	andeq	r2, r1, r8, lsr r4

00010bcc <coda_set_option_perform_boundary_checks@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #73728	; 0x12000
   10bd4:	ldr	pc, [ip, #1080]!	; 0x438

00010bd8 <strcmp@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #73728	; 0x12000
   10be0:	ldr	pc, [ip, #1072]!	; 0x430

00010be4 <printf@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #73728	; 0x12000
   10bec:	ldr	pc, [ip, #1064]!	; 0x428

00010bf0 <coda_set_error@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #73728	; 0x12000
   10bf8:	ldr	pc, [ip, #1056]!	; 0x420

00010bfc <coda_open@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #73728	; 0x12000
   10c04:	ldr	pc, [ip, #1048]!	; 0x418

00010c08 <fflush@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #73728	; 0x12000
   10c10:	ldr	pc, [ip, #1040]!	; 0x410

00010c14 <coda_set_option_use_mmap@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #73728	; 0x12000
   10c1c:	ldr	pc, [ip, #1032]!	; 0x408

00010c20 <coda_cursor_print_path@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #73728	; 0x12000
   10c28:	ldr	pc, [ip, #1024]!	; 0x400

00010c2c <coda_set_definition_path_conditional@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #73728	; 0x12000
   10c34:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c38 <getchar@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #73728	; 0x12000
   10c40:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c44 <coda_set_definition_path@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #73728	; 0x12000
   10c4c:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c50 <coda_recognize_file@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #73728	; 0x12000
   10c58:	ldr	pc, [ip, #992]!	; 0x3e0

00010c5c <fwrite@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #73728	; 0x12000
   10c64:	ldr	pc, [ip, #984]!	; 0x3d8

00010c68 <coda_type_get_format_name@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #73728	; 0x12000
   10c70:	ldr	pc, [ip, #976]!	; 0x3d0

00010c74 <coda_done@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #73728	; 0x12000
   10c7c:	ldr	pc, [ip, #968]!	; 0x3c8

00010c80 <puts@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #73728	; 0x12000
   10c88:	ldr	pc, [ip, #960]!	; 0x3c0

00010c8c <coda_product_check@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #73728	; 0x12000
   10c94:	ldr	pc, [ip, #952]!	; 0x3b8

00010c98 <__libc_start_main@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #73728	; 0x12000
   10ca0:	ldr	pc, [ip, #944]!	; 0x3b0

00010ca4 <__gmon_start__@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #73728	; 0x12000
   10cac:	ldr	pc, [ip, #936]!	; 0x3a8

00010cb0 <exit@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #73728	; 0x12000
   10cb8:	ldr	pc, [ip, #928]!	; 0x3a0

00010cbc <fprintf@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #73728	; 0x12000
   10cc4:	ldr	pc, [ip, #920]!	; 0x398

00010cc8 <coda_init@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #73728	; 0x12000
   10cd0:	ldr	pc, [ip, #912]!	; 0x390

00010cd4 <ungetc@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #73728	; 0x12000
   10cdc:	ldr	pc, [ip, #904]!	; 0x388

00010ce0 <coda_set_option_perform_conversions@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #73728	; 0x12000
   10ce8:	ldr	pc, [ip, #896]!	; 0x380

00010cec <putchar@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #73728	; 0x12000
   10cf4:	ldr	pc, [ip, #888]!	; 0x378

00010cf8 <coda_close@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #73728	; 0x12000
   10d00:	ldr	pc, [ip, #880]!	; 0x370

00010d04 <coda_errno_to_string@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #73728	; 0x12000
   10d0c:	ldr	pc, [ip, #872]!	; 0x368

00010d10 <coda_get_libcoda_version@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #73728	; 0x12000
   10d18:	ldr	pc, [ip, #864]!	; 0x360

00010d1c <coda_get_errno@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #73728	; 0x12000
   10d24:	ldr	pc, [ip, #856]!	; 0x358

00010d28 <abort@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #73728	; 0x12000
   10d30:	ldr	pc, [ip, #848]!	; 0x350

00010d34 <__assert_fail@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #73728	; 0x12000
   10d3c:	ldr	pc, [ip, #840]!	; 0x348

Disassembly of section .text:

00010d40 <_start@@Base>:
   10d40:	mov	fp, #0
   10d44:	mov	lr, #0
   10d48:	pop	{r1}		; (ldr r1, [sp], #4)
   10d4c:	mov	r2, sp
   10d50:	push	{r2}		; (str r2, [sp, #-4]!)
   10d54:	push	{r0}		; (str r0, [sp, #-4]!)
   10d58:	ldr	ip, [pc, #16]	; 10d70 <_start@@Base+0x30>
   10d5c:	push	{ip}		; (str ip, [sp, #-4]!)
   10d60:	ldr	r0, [pc, #12]	; 10d74 <_start@@Base+0x34>
   10d64:	ldr	r3, [pc, #12]	; 10d78 <_start@@Base+0x38>
   10d68:	bl	10c98 <__libc_start_main@plt>
   10d6c:	bl	10d28 <abort@plt>
   10d70:	andeq	r1, r1, r4, ror #24
   10d74:	strdeq	r1, [r1], -r4
   10d78:	andeq	r1, r1, r4, lsl #24
   10d7c:	ldr	r3, [pc, #20]	; 10d98 <_start@@Base+0x58>
   10d80:	ldr	r2, [pc, #20]	; 10d9c <_start@@Base+0x5c>
   10d84:	add	r3, pc, r3
   10d88:	ldr	r2, [r3, r2]
   10d8c:	cmp	r2, #0
   10d90:	bxeq	lr
   10d94:	b	10ca4 <__gmon_start__@plt>
   10d98:	andeq	r2, r1, r4, ror r2
   10d9c:	muleq	r0, ip, r0
   10da0:	ldr	r0, [pc, #24]	; 10dc0 <_start@@Base+0x80>
   10da4:	ldr	r3, [pc, #24]	; 10dc4 <_start@@Base+0x84>
   10da8:	cmp	r3, r0
   10dac:	bxeq	lr
   10db0:	ldr	r3, [pc, #16]	; 10dc8 <_start@@Base+0x88>
   10db4:	cmp	r3, #0
   10db8:	bxeq	lr
   10dbc:	bx	r3
   10dc0:	strheq	r3, [r2], -r0
   10dc4:	strheq	r3, [r2], -r0
   10dc8:	andeq	r0, r0, r0
   10dcc:	ldr	r0, [pc, #36]	; 10df8 <_start@@Base+0xb8>
   10dd0:	ldr	r1, [pc, #36]	; 10dfc <_start@@Base+0xbc>
   10dd4:	sub	r1, r1, r0
   10dd8:	asr	r1, r1, #2
   10ddc:	add	r1, r1, r1, lsr #31
   10de0:	asrs	r1, r1, #1
   10de4:	bxeq	lr
   10de8:	ldr	r3, [pc, #16]	; 10e00 <_start@@Base+0xc0>
   10dec:	cmp	r3, #0
   10df0:	bxeq	lr
   10df4:	bx	r3
   10df8:	strheq	r3, [r2], -r0
   10dfc:	strheq	r3, [r2], -r0
   10e00:	andeq	r0, r0, r0
   10e04:	push	{r4, lr}
   10e08:	ldr	r4, [pc, #24]	; 10e28 <_start@@Base+0xe8>
   10e0c:	ldrb	r3, [r4]
   10e10:	cmp	r3, #0
   10e14:	popne	{r4, pc}
   10e18:	bl	10da0 <_start@@Base+0x60>
   10e1c:	mov	r3, #1
   10e20:	strb	r3, [r4]
   10e24:	pop	{r4, pc}
   10e28:	strheq	r3, [r2], -r0
   10e2c:	b	10dcc <_start@@Base+0x8c>
   10e30:	str	fp, [sp, #-8]!
   10e34:	str	lr, [sp, #4]
   10e38:	add	fp, sp, #4
   10e3c:	bl	10d10 <coda_get_libcoda_version@plt>
   10e40:	mov	r3, r0
   10e44:	mov	r1, r3
   10e48:	ldr	r3, [pc, #52]	; 10e84 <_start@@Base+0x144>
   10e4c:	add	r3, pc, r3
   10e50:	mov	r0, r3
   10e54:	bl	10be4 <printf@plt>
   10e58:	ldr	r3, [pc, #40]	; 10e88 <_start@@Base+0x148>
   10e5c:	add	r3, pc, r3
   10e60:	mov	r0, r3
   10e64:	bl	10c80 <puts@plt>
   10e68:	mov	r0, #10
   10e6c:	bl	10cec <putchar@plt>
   10e70:	nop	{0}
   10e74:	sub	sp, fp, #4
   10e78:	ldr	fp, [sp]
   10e7c:	add	sp, sp, #4
   10e80:	pop	{pc}		; (ldr pc, [sp], #4)
   10e84:	andeq	r0, r0, r0, lsr #28
   10e88:	andeq	r0, r0, r8, lsr #28
   10e8c:	str	fp, [sp, #-8]!
   10e90:	str	lr, [sp, #4]
   10e94:	add	fp, sp, #4
   10e98:	ldr	r3, [pc, #500]	; 11094 <_start@@Base+0x354>
   10e9c:	add	r3, pc, r3
   10ea0:	mov	r0, r3
   10ea4:	bl	10c80 <puts@plt>
   10ea8:	ldr	r3, [pc, #488]	; 11098 <_start@@Base+0x358>
   10eac:	add	r3, pc, r3
   10eb0:	mov	r0, r3
   10eb4:	bl	10c80 <puts@plt>
   10eb8:	ldr	r3, [pc, #476]	; 1109c <_start@@Base+0x35c>
   10ebc:	add	r3, pc, r3
   10ec0:	mov	r0, r3
   10ec4:	bl	10c80 <puts@plt>
   10ec8:	ldr	r3, [pc, #464]	; 110a0 <_start@@Base+0x360>
   10ecc:	add	r3, pc, r3
   10ed0:	mov	r0, r3
   10ed4:	bl	10c80 <puts@plt>
   10ed8:	ldr	r3, [pc, #452]	; 110a4 <_start@@Base+0x364>
   10edc:	add	r3, pc, r3
   10ee0:	mov	r0, r3
   10ee4:	bl	10c80 <puts@plt>
   10ee8:	ldr	r3, [pc, #440]	; 110a8 <_start@@Base+0x368>
   10eec:	add	r3, pc, r3
   10ef0:	mov	r0, r3
   10ef4:	bl	10c80 <puts@plt>
   10ef8:	ldr	r3, [pc, #428]	; 110ac <_start@@Base+0x36c>
   10efc:	add	r3, pc, r3
   10f00:	mov	r0, r3
   10f04:	bl	10c80 <puts@plt>
   10f08:	ldr	r3, [pc, #416]	; 110b0 <_start@@Base+0x370>
   10f0c:	add	r3, pc, r3
   10f10:	mov	r0, r3
   10f14:	bl	10c80 <puts@plt>
   10f18:	ldr	r3, [pc, #404]	; 110b4 <_start@@Base+0x374>
   10f1c:	add	r3, pc, r3
   10f20:	mov	r0, r3
   10f24:	bl	10c80 <puts@plt>
   10f28:	ldr	r3, [pc, #392]	; 110b8 <_start@@Base+0x378>
   10f2c:	add	r3, pc, r3
   10f30:	mov	r0, r3
   10f34:	bl	10c80 <puts@plt>
   10f38:	ldr	r3, [pc, #380]	; 110bc <_start@@Base+0x37c>
   10f3c:	add	r3, pc, r3
   10f40:	mov	r0, r3
   10f44:	bl	10c80 <puts@plt>
   10f48:	ldr	r3, [pc, #368]	; 110c0 <_start@@Base+0x380>
   10f4c:	add	r3, pc, r3
   10f50:	mov	r0, r3
   10f54:	bl	10c80 <puts@plt>
   10f58:	ldr	r3, [pc, #356]	; 110c4 <_start@@Base+0x384>
   10f5c:	add	r3, pc, r3
   10f60:	mov	r0, r3
   10f64:	bl	10c80 <puts@plt>
   10f68:	ldr	r3, [pc, #344]	; 110c8 <_start@@Base+0x388>
   10f6c:	add	r3, pc, r3
   10f70:	mov	r0, r3
   10f74:	bl	10c80 <puts@plt>
   10f78:	ldr	r3, [pc, #332]	; 110cc <_start@@Base+0x38c>
   10f7c:	add	r3, pc, r3
   10f80:	mov	r0, r3
   10f84:	bl	10c80 <puts@plt>
   10f88:	mov	r0, #10
   10f8c:	bl	10cec <putchar@plt>
   10f90:	ldr	r3, [pc, #312]	; 110d0 <_start@@Base+0x390>
   10f94:	add	r3, pc, r3
   10f98:	mov	r0, r3
   10f9c:	bl	10c80 <puts@plt>
   10fa0:	ldr	r3, [pc, #300]	; 110d4 <_start@@Base+0x394>
   10fa4:	add	r3, pc, r3
   10fa8:	mov	r0, r3
   10fac:	bl	10c80 <puts@plt>
   10fb0:	mov	r0, #10
   10fb4:	bl	10cec <putchar@plt>
   10fb8:	ldr	r3, [pc, #280]	; 110d8 <_start@@Base+0x398>
   10fbc:	add	r3, pc, r3
   10fc0:	mov	r0, r3
   10fc4:	bl	10c80 <puts@plt>
   10fc8:	ldr	r3, [pc, #268]	; 110dc <_start@@Base+0x39c>
   10fcc:	add	r3, pc, r3
   10fd0:	mov	r0, r3
   10fd4:	bl	10c80 <puts@plt>
   10fd8:	mov	r0, #10
   10fdc:	bl	10cec <putchar@plt>
   10fe0:	ldr	r3, [pc, #248]	; 110e0 <_start@@Base+0x3a0>
   10fe4:	add	r3, pc, r3
   10fe8:	mov	r0, r3
   10fec:	bl	10c80 <puts@plt>
   10ff0:	ldr	r3, [pc, #236]	; 110e4 <_start@@Base+0x3a4>
   10ff4:	add	r3, pc, r3
   10ff8:	mov	r0, r3
   10ffc:	bl	10c80 <puts@plt>
   11000:	mov	r0, #10
   11004:	bl	10cec <putchar@plt>
   11008:	ldr	r3, [pc, #216]	; 110e8 <_start@@Base+0x3a8>
   1100c:	add	r3, pc, r3
   11010:	mov	r0, r3
   11014:	bl	10c80 <puts@plt>
   11018:	ldr	r3, [pc, #204]	; 110ec <_start@@Base+0x3ac>
   1101c:	add	r3, pc, r3
   11020:	mov	r0, r3
   11024:	bl	10c80 <puts@plt>
   11028:	ldr	r3, [pc, #192]	; 110f0 <_start@@Base+0x3b0>
   1102c:	add	r3, pc, r3
   11030:	mov	r0, r3
   11034:	bl	10c80 <puts@plt>
   11038:	ldr	r3, [pc, #180]	; 110f4 <_start@@Base+0x3b4>
   1103c:	add	r3, pc, r3
   11040:	mov	r0, r3
   11044:	bl	10c80 <puts@plt>
   11048:	ldr	r3, [pc, #168]	; 110f8 <_start@@Base+0x3b8>
   1104c:	add	r3, pc, r3
   11050:	mov	r0, r3
   11054:	bl	10c80 <puts@plt>
   11058:	ldr	r3, [pc, #156]	; 110fc <_start@@Base+0x3bc>
   1105c:	add	r3, pc, r3
   11060:	mov	r0, r3
   11064:	bl	10c80 <puts@plt>
   11068:	ldr	r3, [pc, #144]	; 11100 <_start@@Base+0x3c0>
   1106c:	add	r3, pc, r3
   11070:	mov	r0, r3
   11074:	bl	10c80 <puts@plt>
   11078:	mov	r0, #10
   1107c:	bl	10cec <putchar@plt>
   11080:	nop	{0}
   11084:	sub	sp, fp, #4
   11088:	ldr	fp, [sp]
   1108c:	add	sp, sp, #4
   11090:	pop	{pc}		; (ldr pc, [sp], #4)
   11094:	andeq	r0, r0, r8, lsl lr
   11098:	andeq	r0, r0, r0, lsl lr
   1109c:	andeq	r0, r0, r8, lsr lr
   110a0:	andeq	r0, r0, r0, ror lr
   110a4:	andeq	r0, r0, r4, ror lr
   110a8:	andeq	r0, r0, r4, lsl #29
   110ac:	andeq	r0, r0, r4, asr #29
   110b0:	strdeq	r0, [r0], -ip
   110b4:	andeq	r0, r0, r8, lsr pc
   110b8:	andeq	r0, r0, r0, asr #30
   110bc:	andeq	r0, r0, r0, ror pc
   110c0:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   110c4:	andeq	r0, r0, r4, lsr #31
   110c8:	ldrdeq	r0, [r0], -ip
   110cc:	andeq	r0, r0, r4, ror #31
   110d0:	andeq	r1, r0, ip
   110d4:	andeq	r1, r0, ip, asr #32
   110d8:	andeq	r1, r0, r0, asr r0
   110dc:	andeq	r1, r0, ip, asr r0
   110e0:	andeq	r1, r0, r4, rrx
   110e4:	andeq	r1, r0, r0, ror r0
   110e8:	andeq	r1, r0, ip, lsl #1
   110ec:	andeq	r1, r0, ip, asr #1
   110f0:	andeq	r1, r0, r8, lsl #2
   110f4:	andeq	r1, r0, r4, lsr #2
   110f8:	andeq	r1, r0, r0, ror #2
   110fc:	muleq	r0, r8, r1
   11100:	andeq	r1, r0, r8, asr #3
   11104:	str	r4, [sp, #-12]!
   11108:	str	fp, [sp, #4]
   1110c:	str	lr, [sp, #8]
   11110:	add	fp, sp, #8
   11114:	sub	sp, sp, #20
   11118:	str	r0, [fp, #-16]
   1111c:	str	r1, [fp, #-20]	; 0xffffffec
   11120:	str	r2, [fp, #-24]	; 0xffffffe8
   11124:	ldr	r4, [pc, #116]	; 111a0 <_start@@Base+0x460>
   11128:	add	r4, pc, r4
   1112c:	ldr	r1, [fp, #-20]	; 0xffffffec
   11130:	ldr	r3, [pc, #108]	; 111a4 <_start@@Base+0x464>
   11134:	add	r3, pc, r3
   11138:	mov	r0, r3
   1113c:	bl	10be4 <printf@plt>
   11140:	ldr	r3, [fp, #-16]
   11144:	cmp	r3, #0
   11148:	beq	11170 <_start@@Base+0x430>
   1114c:	ldr	r3, [pc, #84]	; 111a8 <_start@@Base+0x468>
   11150:	add	r3, pc, r3
   11154:	mov	r0, r3
   11158:	bl	10be4 <printf@plt>
   1115c:	ldr	r3, [pc, #72]	; 111ac <_start@@Base+0x46c>
   11160:	ldr	r3, [r4, r3]
   11164:	mov	r1, r3
   11168:	ldr	r0, [fp, #-16]
   1116c:	bl	10c20 <coda_cursor_print_path@plt>
   11170:	mov	r0, #10
   11174:	bl	10cec <putchar@plt>
   11178:	ldr	r3, [pc, #48]	; 111b0 <_start@@Base+0x470>
   1117c:	ldr	r3, [r4, r3]
   11180:	mov	r2, #1
   11184:	str	r2, [r3]
   11188:	nop	{0}
   1118c:	sub	sp, fp, #8
   11190:	ldr	r4, [sp]
   11194:	ldr	fp, [sp, #4]
   11198:	add	sp, sp, #8
   1119c:	pop	{pc}		; (ldr pc, [sp], #4)
   111a0:	ldrdeq	r1, [r1], -r0
   111a4:	andeq	r1, r0, r0, asr #2
   111a8:	andeq	r1, r0, r0, lsr r1
   111ac:	andeq	r0, r0, r8, lsl #1
   111b0:	muleq	r0, r0, r0
   111b4:	str	r4, [sp, #-12]!
   111b8:	str	fp, [sp, #4]
   111bc:	str	lr, [sp, #8]
   111c0:	add	fp, sp, #8
   111c4:	sub	sp, sp, #60	; 0x3c
   111c8:	str	r0, [fp, #-56]	; 0xffffffc8
   111cc:	ldr	r4, [pc, #748]	; 114c0 <_start@@Base+0x780>
   111d0:	add	r4, pc, r4
   111d4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   111d8:	bl	10c80 <puts@plt>
   111dc:	sub	r0, fp, #40	; 0x28
   111e0:	sub	r2, fp, #24
   111e4:	sub	r1, fp, #36	; 0x24
   111e8:	sub	r3, fp, #48	; 0x30
   111ec:	str	r3, [sp, #4]
   111f0:	sub	r3, fp, #44	; 0x2c
   111f4:	str	r3, [sp]
   111f8:	mov	r3, r0
   111fc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11200:	bl	10c50 <coda_recognize_file@plt>
   11204:	mov	r3, r0
   11208:	cmp	r3, #0
   1120c:	beq	1125c <_start@@Base+0x51c>
   11210:	bl	10d1c <coda_get_errno@plt>
   11214:	mov	r3, r0
   11218:	ldr	r3, [r3]
   1121c:	mov	r0, r3
   11220:	bl	10d04 <coda_errno_to_string@plt>
   11224:	mov	r3, r0
   11228:	mov	r1, r3
   1122c:	ldr	r3, [pc, #656]	; 114c4 <_start@@Base+0x784>
   11230:	add	r3, pc, r3
   11234:	mov	r0, r3
   11238:	bl	10be4 <printf@plt>
   1123c:	mov	r1, #0
   11240:	mov	r0, #0
   11244:	bl	10bf0 <coda_set_error@plt>
   11248:	ldr	r3, [pc, #632]	; 114c8 <_start@@Base+0x788>
   1124c:	ldr	r3, [r4, r3]
   11250:	mov	r2, #1
   11254:	str	r2, [r3]
   11258:	b	114ac <_start@@Base+0x76c>
   1125c:	ldr	r3, [pc, #616]	; 114cc <_start@@Base+0x78c>
   11260:	ldr	r3, [r4, r3]
   11264:	ldr	r3, [r3]
   11268:	cmp	r3, #0
   1126c:	beq	112ac <_start@@Base+0x56c>
   11270:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11274:	cmp	r3, #0
   11278:	beq	11288 <_start@@Base+0x548>
   1127c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11280:	cmp	r3, #0
   11284:	bne	112ac <_start@@Base+0x56c>
   11288:	ldr	r3, [pc, #576]	; 114d0 <_start@@Base+0x790>
   1128c:	add	r3, pc, r3
   11290:	mov	r0, r3
   11294:	bl	10c80 <puts@plt>
   11298:	ldr	r3, [pc, #552]	; 114c8 <_start@@Base+0x788>
   1129c:	ldr	r3, [r4, r3]
   112a0:	mov	r2, #1
   112a4:	str	r2, [r3]
   112a8:	b	114ac <_start@@Base+0x76c>
   112ac:	ldr	r3, [pc, #544]	; 114d4 <_start@@Base+0x794>
   112b0:	ldr	r3, [r4, r3]
   112b4:	ldr	r3, [r3]
   112b8:	cmp	r3, #0
   112bc:	beq	1131c <_start@@Base+0x5dc>
   112c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   112c4:	mov	r0, r3
   112c8:	bl	10c68 <coda_type_get_format_name@plt>
   112cc:	mov	r3, r0
   112d0:	mov	r1, r3
   112d4:	ldr	r3, [pc, #508]	; 114d8 <_start@@Base+0x798>
   112d8:	add	r3, pc, r3
   112dc:	mov	r0, r3
   112e0:	bl	10be4 <printf@plt>
   112e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   112e8:	cmp	r3, #0
   112ec:	beq	11314 <_start@@Base+0x5d4>
   112f0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   112f4:	cmp	r3, #0
   112f8:	beq	11314 <_start@@Base+0x5d4>
   112fc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11300:	ldr	r2, [fp, #-44]	; 0xffffffd4
   11304:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11308:	ldr	r0, [pc, #460]	; 114dc <_start@@Base+0x79c>
   1130c:	add	r0, pc, r0
   11310:	bl	10be4 <printf@plt>
   11314:	mov	r0, #10
   11318:	bl	10cec <putchar@plt>
   1131c:	sub	r3, fp, #20
   11320:	mov	r1, r3
   11324:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11328:	bl	10bfc <coda_open@plt>
   1132c:	str	r0, [fp, #-16]
   11330:	ldr	r3, [fp, #-16]
   11334:	cmp	r3, #0
   11338:	beq	11374 <_start@@Base+0x634>
   1133c:	bl	10d1c <coda_get_errno@plt>
   11340:	mov	r3, r0
   11344:	ldr	r3, [r3]
   11348:	cmn	r3, #21
   1134c:	bne	11374 <_start@@Base+0x634>
   11350:	mov	r0, #0
   11354:	bl	10c14 <coda_set_option_use_mmap@plt>
   11358:	sub	r3, fp, #20
   1135c:	mov	r1, r3
   11360:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11364:	bl	10bfc <coda_open@plt>
   11368:	str	r0, [fp, #-16]
   1136c:	mov	r0, #1
   11370:	bl	10c14 <coda_set_option_use_mmap@plt>
   11374:	ldr	r3, [fp, #-16]
   11378:	cmp	r3, #0
   1137c:	beq	113c0 <_start@@Base+0x680>
   11380:	bl	10d1c <coda_get_errno@plt>
   11384:	mov	r3, r0
   11388:	ldr	r3, [r3]
   1138c:	mov	r0, r3
   11390:	bl	10d04 <coda_errno_to_string@plt>
   11394:	mov	r3, r0
   11398:	mov	r1, r3
   1139c:	ldr	r3, [pc, #316]	; 114e0 <_start@@Base+0x7a0>
   113a0:	add	r3, pc, r3
   113a4:	mov	r0, r3
   113a8:	bl	10be4 <printf@plt>
   113ac:	ldr	r3, [pc, #276]	; 114c8 <_start@@Base+0x788>
   113b0:	ldr	r3, [r4, r3]
   113b4:	mov	r2, #1
   113b8:	str	r2, [r3]
   113bc:	b	114ac <_start@@Base+0x76c>
   113c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   113c4:	ldr	r3, [pc, #280]	; 114e4 <_start@@Base+0x7a4>
   113c8:	ldr	r3, [r4, r3]
   113cc:	ldr	r3, [r3]
   113d0:	cmp	r3, #0
   113d4:	moveq	r3, #1
   113d8:	movne	r3, #0
   113dc:	uxtb	r3, r3
   113e0:	mov	r1, r3
   113e4:	mov	r3, #0
   113e8:	ldr	r2, [pc, #248]	; 114e8 <_start@@Base+0x7a8>
   113ec:	add	r2, pc, r2
   113f0:	bl	10c8c <coda_product_check@plt>
   113f4:	mov	r3, r0
   113f8:	cmp	r3, #0
   113fc:	beq	1144c <_start@@Base+0x70c>
   11400:	bl	10d1c <coda_get_errno@plt>
   11404:	mov	r3, r0
   11408:	ldr	r3, [r3]
   1140c:	mov	r0, r3
   11410:	bl	10d04 <coda_errno_to_string@plt>
   11414:	mov	r3, r0
   11418:	mov	r1, r3
   1141c:	ldr	r3, [pc, #200]	; 114ec <_start@@Base+0x7ac>
   11420:	add	r3, pc, r3
   11424:	mov	r0, r3
   11428:	bl	10be4 <printf@plt>
   1142c:	ldr	r3, [pc, #148]	; 114c8 <_start@@Base+0x788>
   11430:	ldr	r3, [r4, r3]
   11434:	mov	r2, #1
   11438:	str	r2, [r3]
   1143c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11440:	mov	r0, r3
   11444:	bl	10cf8 <coda_close@plt>
   11448:	b	114ac <_start@@Base+0x76c>
   1144c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11450:	mov	r0, r3
   11454:	bl	10cf8 <coda_close@plt>
   11458:	mov	r3, r0
   1145c:	cmp	r3, #0
   11460:	beq	114a4 <_start@@Base+0x764>
   11464:	bl	10d1c <coda_get_errno@plt>
   11468:	mov	r3, r0
   1146c:	ldr	r3, [r3]
   11470:	mov	r0, r3
   11474:	bl	10d04 <coda_errno_to_string@plt>
   11478:	mov	r3, r0
   1147c:	mov	r1, r3
   11480:	ldr	r3, [pc, #104]	; 114f0 <_start@@Base+0x7b0>
   11484:	add	r3, pc, r3
   11488:	mov	r0, r3
   1148c:	bl	10be4 <printf@plt>
   11490:	ldr	r3, [pc, #48]	; 114c8 <_start@@Base+0x788>
   11494:	ldr	r3, [r4, r3]
   11498:	mov	r2, #1
   1149c:	str	r2, [r3]
   114a0:	b	114ac <_start@@Base+0x76c>
   114a4:	mov	r0, #10
   114a8:	bl	10cec <putchar@plt>
   114ac:	sub	sp, fp, #8
   114b0:	ldr	r4, [sp]
   114b4:	ldr	fp, [sp, #4]
   114b8:	add	sp, sp, #8
   114bc:	pop	{pc}		; (ldr pc, [sp], #4)
   114c0:	andeq	r1, r1, r8, lsr #28
   114c4:	andeq	r1, r0, r8, asr r0
   114c8:	muleq	r0, r0, r0
   114cc:	andeq	r0, r0, ip, lsl #1
   114d0:	andeq	r1, r0, ip
   114d4:	muleq	r0, r4, r0
   114d8:	andeq	r0, r0, ip, ror #31
   114dc:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   114e0:	andeq	r0, r0, r8, ror #29
   114e4:	andeq	r0, r0, r4, lsr #1
   114e8:			; <UNDEFINED> instruction: 0xfffffd10
   114ec:	andeq	r0, r0, r8, ror #28
   114f0:	andeq	r0, r0, r4, ror #28

000114f4 <main@@Base>:
   114f4:	str	r4, [sp, #-12]!
   114f8:	str	fp, [sp, #4]
   114fc:	str	lr, [sp, #8]
   11500:	add	fp, sp, #8
   11504:	sub	sp, sp, #1024	; 0x400
   11508:	sub	sp, sp, #12
   1150c:	str	r0, [fp, #-1040]	; 0xfffffbf0
   11510:	str	r1, [fp, #-1044]	; 0xfffffbec
   11514:	ldr	r4, [pc, #1660]	; 11b98 <main@@Base+0x6a4>
   11518:	add	r4, pc, r4
   1151c:	mov	r3, #0
   11520:	str	r3, [fp, #-16]
   11524:	ldr	r3, [pc, #1648]	; 11b9c <main@@Base+0x6a8>
   11528:	ldr	r3, [r4, r3]
   1152c:	mov	r2, #0
   11530:	str	r2, [r3]
   11534:	ldr	r3, [pc, #1636]	; 11ba0 <main@@Base+0x6ac>
   11538:	ldr	r3, [r4, r3]
   1153c:	mov	r2, #0
   11540:	str	r2, [r3]
   11544:	mov	r3, #1
   11548:	str	r3, [fp, #-20]	; 0xffffffec
   1154c:	ldr	r3, [pc, #1616]	; 11ba4 <main@@Base+0x6b0>
   11550:	ldr	r3, [r4, r3]
   11554:	mov	r2, #0
   11558:	str	r2, [r3]
   1155c:	ldr	r3, [fp, #-1040]	; 0xfffffbf0
   11560:	cmp	r3, #1
   11564:	beq	115c0 <main@@Base+0xcc>
   11568:	ldr	r3, [fp, #-1044]	; 0xfffffbec
   1156c:	add	r3, r3, #4
   11570:	ldr	r3, [r3]
   11574:	ldr	r2, [pc, #1580]	; 11ba8 <main@@Base+0x6b4>
   11578:	add	r2, pc, r2
   1157c:	mov	r1, r2
   11580:	mov	r0, r3
   11584:	bl	10bd8 <strcmp@plt>
   11588:	mov	r3, r0
   1158c:	cmp	r3, #0
   11590:	beq	115c0 <main@@Base+0xcc>
   11594:	ldr	r3, [fp, #-1044]	; 0xfffffbec
   11598:	add	r3, r3, #4
   1159c:	ldr	r3, [r3]
   115a0:	ldr	r2, [pc, #1540]	; 11bac <main@@Base+0x6b8>
   115a4:	add	r2, pc, r2
   115a8:	mov	r1, r2
   115ac:	mov	r0, r3
   115b0:	bl	10bd8 <strcmp@plt>
   115b4:	mov	r3, r0
   115b8:	cmp	r3, #0
   115bc:	bne	115cc <main@@Base+0xd8>
   115c0:	bl	10e8c <_start@@Base+0x14c>
   115c4:	mov	r0, #0
   115c8:	bl	10cb0 <exit@plt>
   115cc:	ldr	r3, [fp, #-1044]	; 0xfffffbec
   115d0:	add	r3, r3, #4
   115d4:	ldr	r3, [r3]
   115d8:	ldr	r2, [pc, #1488]	; 11bb0 <main@@Base+0x6bc>
   115dc:	add	r2, pc, r2
   115e0:	mov	r1, r2
   115e4:	mov	r0, r3
   115e8:	bl	10bd8 <strcmp@plt>
   115ec:	mov	r3, r0
   115f0:	cmp	r3, #0
   115f4:	beq	11624 <main@@Base+0x130>
   115f8:	ldr	r3, [fp, #-1044]	; 0xfffffbec
   115fc:	add	r3, r3, #4
   11600:	ldr	r3, [r3]
   11604:	ldr	r2, [pc, #1448]	; 11bb4 <main@@Base+0x6c0>
   11608:	add	r2, pc, r2
   1160c:	mov	r1, r2
   11610:	mov	r0, r3
   11614:	bl	10bd8 <strcmp@plt>
   11618:	mov	r3, r0
   1161c:	cmp	r3, #0
   11620:	bne	11630 <main@@Base+0x13c>
   11624:	bl	10e30 <_start@@Base+0xf0>
   11628:	mov	r0, #0
   1162c:	bl	10cb0 <exit@plt>
   11630:	mov	r3, #1
   11634:	str	r3, [fp, #-24]	; 0xffffffe8
   11638:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1163c:	add	r3, r3, #1
   11640:	ldr	r2, [fp, #-1040]	; 0xfffffbf0
   11644:	cmp	r2, r3
   11648:	ble	116b0 <main@@Base+0x1bc>
   1164c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11650:	lsl	r3, r3, #2
   11654:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   11658:	add	r3, r2, r3
   1165c:	ldr	r3, [r3]
   11660:	ldr	r2, [pc, #1360]	; 11bb8 <main@@Base+0x6c4>
   11664:	add	r2, pc, r2
   11668:	mov	r1, r2
   1166c:	mov	r0, r3
   11670:	bl	10bd8 <strcmp@plt>
   11674:	mov	r3, r0
   11678:	cmp	r3, #0
   1167c:	bne	116b0 <main@@Base+0x1bc>
   11680:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11684:	add	r3, r3, #1
   11688:	lsl	r3, r3, #2
   1168c:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   11690:	add	r3, r2, r3
   11694:	ldr	r3, [r3]
   11698:	mov	r0, r3
   1169c:	bl	10c44 <coda_set_definition_path@plt>
   116a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   116a4:	add	r3, r3, #2
   116a8:	str	r3, [fp, #-24]	; 0xffffffe8
   116ac:	b	11724 <main@@Base+0x230>
   116b0:	ldr	r3, [pc, #1284]	; 11bbc <main@@Base+0x6c8>
   116b4:	add	r3, pc, r3
   116b8:	str	r3, [fp, #-32]	; 0xffffffe0
   116bc:	ldr	r3, [fp, #-1044]	; 0xfffffbec
   116c0:	ldr	r3, [r3]
   116c4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   116c8:	mov	r1, #0
   116cc:	mov	r0, r3
   116d0:	bl	10c2c <coda_set_definition_path_conditional@plt>
   116d4:	mov	r3, r0
   116d8:	cmp	r3, #0
   116dc:	beq	11988 <main@@Base+0x494>
   116e0:	ldr	r3, [pc, #1240]	; 11bc0 <main@@Base+0x6cc>
   116e4:	ldr	r3, [r4, r3]
   116e8:	ldr	r4, [r3]
   116ec:	bl	10d1c <coda_get_errno@plt>
   116f0:	mov	r3, r0
   116f4:	ldr	r3, [r3]
   116f8:	mov	r0, r3
   116fc:	bl	10d04 <coda_errno_to_string@plt>
   11700:	mov	r3, r0
   11704:	mov	r2, r3
   11708:	ldr	r3, [pc, #1204]	; 11bc4 <main@@Base+0x6d0>
   1170c:	add	r3, pc, r3
   11710:	mov	r1, r3
   11714:	mov	r0, r4
   11718:	bl	10cbc <fprintf@plt>
   1171c:	mov	r0, #1
   11720:	bl	10cb0 <exit@plt>
   11724:	b	11988 <main@@Base+0x494>
   11728:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1172c:	lsl	r3, r3, #2
   11730:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   11734:	add	r3, r2, r3
   11738:	ldr	r3, [r3]
   1173c:	ldr	r2, [pc, #1156]	; 11bc8 <main@@Base+0x6d4>
   11740:	add	r2, pc, r2
   11744:	mov	r1, r2
   11748:	mov	r0, r3
   1174c:	bl	10bd8 <strcmp@plt>
   11750:	mov	r3, r0
   11754:	cmp	r3, #0
   11758:	beq	11790 <main@@Base+0x29c>
   1175c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11760:	lsl	r3, r3, #2
   11764:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   11768:	add	r3, r2, r3
   1176c:	ldr	r3, [r3]
   11770:	ldr	r2, [pc, #1108]	; 11bcc <main@@Base+0x6d8>
   11774:	add	r2, pc, r2
   11778:	mov	r1, r2
   1177c:	mov	r0, r3
   11780:	bl	10bd8 <strcmp@plt>
   11784:	mov	r3, r0
   11788:	cmp	r3, #0
   1178c:	bne	117a4 <main@@Base+0x2b0>
   11790:	ldr	r3, [pc, #1028]	; 11b9c <main@@Base+0x6a8>
   11794:	ldr	r3, [r4, r3]
   11798:	mov	r2, #1
   1179c:	str	r2, [r3]
   117a0:	b	1197c <main@@Base+0x488>
   117a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   117a8:	lsl	r3, r3, #2
   117ac:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   117b0:	add	r3, r2, r3
   117b4:	ldr	r3, [r3]
   117b8:	ldr	r2, [pc, #1040]	; 11bd0 <main@@Base+0x6dc>
   117bc:	add	r2, pc, r2
   117c0:	mov	r1, r2
   117c4:	mov	r0, r3
   117c8:	bl	10bd8 <strcmp@plt>
   117cc:	mov	r3, r0
   117d0:	cmp	r3, #0
   117d4:	beq	1180c <main@@Base+0x318>
   117d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   117dc:	lsl	r3, r3, #2
   117e0:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   117e4:	add	r3, r2, r3
   117e8:	ldr	r3, [r3]
   117ec:	ldr	r2, [pc, #992]	; 11bd4 <main@@Base+0x6e0>
   117f0:	add	r2, pc, r2
   117f4:	mov	r1, r2
   117f8:	mov	r0, r3
   117fc:	bl	10bd8 <strcmp@plt>
   11800:	mov	r3, r0
   11804:	cmp	r3, #0
   11808:	bne	11820 <main@@Base+0x32c>
   1180c:	ldr	r3, [pc, #908]	; 11ba0 <main@@Base+0x6ac>
   11810:	ldr	r3, [r4, r3]
   11814:	mov	r2, #1
   11818:	str	r2, [r3]
   1181c:	b	1197c <main@@Base+0x488>
   11820:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11824:	lsl	r3, r3, #2
   11828:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   1182c:	add	r3, r2, r3
   11830:	ldr	r3, [r3]
   11834:	ldr	r2, [pc, #924]	; 11bd8 <main@@Base+0x6e4>
   11838:	add	r2, pc, r2
   1183c:	mov	r1, r2
   11840:	mov	r0, r3
   11844:	bl	10bd8 <strcmp@plt>
   11848:	mov	r3, r0
   1184c:	cmp	r3, #0
   11850:	beq	11888 <main@@Base+0x394>
   11854:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11858:	lsl	r3, r3, #2
   1185c:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   11860:	add	r3, r2, r3
   11864:	ldr	r3, [r3]
   11868:	ldr	r2, [pc, #876]	; 11bdc <main@@Base+0x6e8>
   1186c:	add	r2, pc, r2
   11870:	mov	r1, r2
   11874:	mov	r0, r3
   11878:	bl	10bd8 <strcmp@plt>
   1187c:	mov	r3, r0
   11880:	cmp	r3, #0
   11884:	bne	1189c <main@@Base+0x3a8>
   11888:	ldr	r3, [pc, #788]	; 11ba4 <main@@Base+0x6b0>
   1188c:	ldr	r3, [r4, r3]
   11890:	mov	r2, #1
   11894:	str	r2, [r3]
   11898:	b	1197c <main@@Base+0x488>
   1189c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   118a0:	lsl	r3, r3, #2
   118a4:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   118a8:	add	r3, r2, r3
   118ac:	ldr	r3, [r3]
   118b0:	ldr	r2, [pc, #808]	; 11be0 <main@@Base+0x6ec>
   118b4:	add	r2, pc, r2
   118b8:	mov	r1, r2
   118bc:	mov	r0, r3
   118c0:	bl	10bd8 <strcmp@plt>
   118c4:	mov	r3, r0
   118c8:	cmp	r3, #0
   118cc:	bne	118dc <main@@Base+0x3e8>
   118d0:	mov	r3, #0
   118d4:	str	r3, [fp, #-20]	; 0xffffffec
   118d8:	b	1197c <main@@Base+0x488>
   118dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   118e0:	lsl	r3, r3, #2
   118e4:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   118e8:	add	r3, r2, r3
   118ec:	ldr	r3, [r3]
   118f0:	ldr	r2, [pc, #748]	; 11be4 <main@@Base+0x6f0>
   118f4:	add	r2, pc, r2
   118f8:	mov	r1, r2
   118fc:	mov	r0, r3
   11900:	bl	10bd8 <strcmp@plt>
   11904:	mov	r3, r0
   11908:	cmp	r3, #0
   1190c:	bne	11930 <main@@Base+0x43c>
   11910:	ldr	r3, [fp, #-1040]	; 0xfffffbf0
   11914:	sub	r3, r3, #1
   11918:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1191c:	cmp	r2, r3
   11920:	bne	11930 <main@@Base+0x43c>
   11924:	mov	r3, #1
   11928:	str	r3, [fp, #-16]
   1192c:	b	119a0 <main@@Base+0x4ac>
   11930:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11934:	lsl	r3, r3, #2
   11938:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   1193c:	add	r3, r2, r3
   11940:	ldr	r3, [r3]
   11944:	ldrb	r3, [r3]
   11948:	cmp	r3, #45	; 0x2d
   1194c:	bne	1199c <main@@Base+0x4a8>
   11950:	ldr	r3, [pc, #616]	; 11bc0 <main@@Base+0x6cc>
   11954:	ldr	r3, [r4, r3]
   11958:	ldr	r3, [r3]
   1195c:	mov	r2, #25
   11960:	mov	r1, #1
   11964:	ldr	r0, [pc, #636]	; 11be8 <main@@Base+0x6f4>
   11968:	add	r0, pc, r0
   1196c:	bl	10c5c <fwrite@plt>
   11970:	bl	10e8c <_start@@Base+0x14c>
   11974:	mov	r0, #1
   11978:	bl	10cb0 <exit@plt>
   1197c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11980:	add	r3, r3, #1
   11984:	str	r3, [fp, #-24]	; 0xffffffe8
   11988:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1198c:	ldr	r3, [fp, #-1040]	; 0xfffffbf0
   11990:	cmp	r2, r3
   11994:	blt	11728 <main@@Base+0x234>
   11998:	b	119a0 <main@@Base+0x4ac>
   1199c:	nop	{0}
   119a0:	bl	10cc8 <coda_init@plt>
   119a4:	mov	r3, r0
   119a8:	cmp	r3, #0
   119ac:	beq	119f4 <main@@Base+0x500>
   119b0:	ldr	r3, [pc, #520]	; 11bc0 <main@@Base+0x6cc>
   119b4:	ldr	r3, [r4, r3]
   119b8:	ldr	r4, [r3]
   119bc:	bl	10d1c <coda_get_errno@plt>
   119c0:	mov	r3, r0
   119c4:	ldr	r3, [r3]
   119c8:	mov	r0, r3
   119cc:	bl	10d04 <coda_errno_to_string@plt>
   119d0:	mov	r3, r0
   119d4:	mov	r2, r3
   119d8:	ldr	r3, [pc, #524]	; 11bec <main@@Base+0x6f8>
   119dc:	add	r3, pc, r3
   119e0:	mov	r1, r3
   119e4:	mov	r0, r4
   119e8:	bl	10cbc <fprintf@plt>
   119ec:	mov	r0, #1
   119f0:	bl	10cb0 <exit@plt>
   119f4:	mov	r0, #0
   119f8:	bl	10bcc <coda_set_option_perform_boundary_checks@plt>
   119fc:	mov	r0, #0
   11a00:	bl	10ce0 <coda_set_option_perform_conversions@plt>
   11a04:	ldr	r0, [fp, #-20]	; 0xffffffec
   11a08:	bl	10c14 <coda_set_option_use_mmap@plt>
   11a0c:	ldr	r3, [fp, #-16]
   11a10:	cmp	r3, #0
   11a14:	beq	11b4c <main@@Base+0x658>
   11a18:	mov	r3, #0
   11a1c:	str	r3, [fp, #-28]	; 0xffffffe4
   11a20:	bl	10c38 <getchar@plt>
   11a24:	mov	r3, r0
   11a28:	strb	r3, [fp, #-33]	; 0xffffffdf
   11a2c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   11a30:	cmp	r3, #13
   11a34:	bne	11a6c <main@@Base+0x578>
   11a38:	bl	10c38 <getchar@plt>
   11a3c:	mov	r3, r0
   11a40:	strb	r3, [fp, #-34]	; 0xffffffde
   11a44:	ldrb	r3, [fp, #-34]	; 0xffffffde
   11a48:	cmp	r3, #10
   11a4c:	beq	11a6c <main@@Base+0x578>
   11a50:	ldrb	r2, [fp, #-34]	; 0xffffffde
   11a54:	ldr	r3, [pc, #404]	; 11bf0 <main@@Base+0x6fc>
   11a58:	ldr	r3, [r4, r3]
   11a5c:	ldr	r3, [r3]
   11a60:	mov	r1, r3
   11a64:	mov	r0, r2
   11a68:	bl	10cd4 <ungetc@plt>
   11a6c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   11a70:	cmp	r3, #10
   11a74:	beq	11a84 <main@@Base+0x590>
   11a78:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   11a7c:	cmp	r3, #13
   11a80:	bne	11ab0 <main@@Base+0x5bc>
   11a84:	sub	r2, fp, #1024	; 0x400
   11a88:	sub	r2, r2, #12
   11a8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a90:	add	r3, r2, r3
   11a94:	mov	r2, #0
   11a98:	strb	r2, [r3]
   11a9c:	nop	{0}
   11aa0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11aa4:	cmp	r3, #0
   11aa8:	ble	11a18 <main@@Base+0x524>
   11aac:	b	11b00 <main@@Base+0x60c>
   11ab0:	sub	r2, fp, #1024	; 0x400
   11ab4:	sub	r2, r2, #12
   11ab8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11abc:	add	r3, r2, r3
   11ac0:	ldrb	r2, [fp, #-33]	; 0xffffffdf
   11ac4:	strb	r2, [r3]
   11ac8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11acc:	add	r3, r3, #1
   11ad0:	str	r3, [fp, #-28]	; 0xffffffe4
   11ad4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11ad8:	cmp	r3, #1000	; 0x3e8
   11adc:	blt	11a20 <main@@Base+0x52c>
   11ae0:	ldr	r3, [pc, #268]	; 11bf4 <main@@Base+0x700>
   11ae4:	add	r3, pc, r3
   11ae8:	mov	r2, #316	; 0x13c
   11aec:	ldr	r1, [pc, #260]	; 11bf8 <main@@Base+0x704>
   11af0:	add	r1, pc, r1
   11af4:	ldr	r0, [pc, #256]	; 11bfc <main@@Base+0x708>
   11af8:	add	r0, pc, r0
   11afc:	bl	10d34 <__assert_fail@plt>
   11b00:	sub	r3, fp, #1024	; 0x400
   11b04:	sub	r3, r3, #12
   11b08:	mov	r0, r3
   11b0c:	bl	111b4 <_start@@Base+0x474>
   11b10:	mov	r0, #0
   11b14:	bl	10c08 <fflush@plt>
   11b18:	b	11a18 <main@@Base+0x524>
   11b1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b20:	lsl	r3, r3, #2
   11b24:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   11b28:	add	r3, r2, r3
   11b2c:	ldr	r3, [r3]
   11b30:	mov	r0, r3
   11b34:	bl	111b4 <_start@@Base+0x474>
   11b38:	mov	r0, #0
   11b3c:	bl	10c08 <fflush@plt>
   11b40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b44:	add	r3, r3, #1
   11b48:	str	r3, [fp, #-24]	; 0xffffffe8
   11b4c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11b50:	ldr	r3, [fp, #-1040]	; 0xfffffbf0
   11b54:	cmp	r2, r3
   11b58:	blt	11b1c <main@@Base+0x628>
   11b5c:	bl	10c74 <coda_done@plt>
   11b60:	ldr	r3, [pc, #152]	; 11c00 <main@@Base+0x70c>
   11b64:	ldr	r3, [r4, r3]
   11b68:	ldr	r3, [r3]
   11b6c:	cmp	r3, #0
   11b70:	beq	11b7c <main@@Base+0x688>
   11b74:	mov	r0, #1
   11b78:	bl	10cb0 <exit@plt>
   11b7c:	mov	r3, #0
   11b80:	mov	r0, r3
   11b84:	sub	sp, fp, #8
   11b88:	ldr	r4, [sp]
   11b8c:	ldr	fp, [sp, #4]
   11b90:	add	sp, sp, #8
   11b94:	pop	{pc}		; (ldr pc, [sp], #4)
   11b98:	andeq	r1, r1, r0, ror #21
   11b9c:	muleq	r0, r4, r0
   11ba0:	andeq	r0, r0, r4, lsr #1
   11ba4:	andeq	r0, r0, ip, lsl #1
   11ba8:	andeq	r0, r0, r0, lsl #27
   11bac:	andeq	r0, r0, r8, asr sp
   11bb0:	andeq	r0, r0, r8, lsr #26
   11bb4:	andeq	r0, r0, r0, lsl #26
   11bb8:			; <UNDEFINED> instruction: 0x00000cb0
   11bbc:	andeq	r0, r0, r4, ror #24
   11bc0:	muleq	r0, r8, r0
   11bc4:	andeq	r0, r0, r8, lsr #24
   11bc8:	andeq	r0, r0, r0, lsl #24
   11bcc:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11bd0:	muleq	r0, r4, fp
   11bd4:	andeq	r0, r0, r4, ror #22
   11bd8:	andeq	r0, r0, r4, lsr #22
   11bdc:	strdeq	r0, [r0], -r4
   11be0:			; <UNDEFINED> instruction: 0x00000abc
   11be4:	andeq	r0, r0, r8, lsl #21
   11be8:	andeq	r0, r0, r8, lsl sl
   11bec:	andeq	r0, r0, r8, asr r9
   11bf0:	andeq	r0, r0, r0, lsr #1
   11bf4:	andeq	r0, r0, r4, lsr #18
   11bf8:	andeq	r0, r0, ip, lsr #17
   11bfc:	andeq	r0, r0, r4, lsl #18
   11c00:	muleq	r0, r0, r0

00011c04 <__libc_csu_init@@Base>:
   11c04:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11c08:	mov	r7, r0
   11c0c:	ldr	r6, [pc, #72]	; 11c5c <__libc_csu_init@@Base+0x58>
   11c10:	ldr	r5, [pc, #72]	; 11c60 <__libc_csu_init@@Base+0x5c>
   11c14:	add	r6, pc, r6
   11c18:	add	r5, pc, r5
   11c1c:	sub	r6, r6, r5
   11c20:	mov	r8, r1
   11c24:	mov	r9, r2
   11c28:	bl	10bac <coda_set_option_perform_boundary_checks@plt-0x20>
   11c2c:	asrs	r6, r6, #2
   11c30:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c34:	mov	r4, #0
   11c38:	add	r4, r4, #1
   11c3c:	ldr	r3, [r5], #4
   11c40:	mov	r2, r9
   11c44:	mov	r1, r8
   11c48:	mov	r0, r7
   11c4c:	blx	r3
   11c50:	cmp	r6, r4
   11c54:	bne	11c38 <__libc_csu_init@@Base+0x34>
   11c58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c5c:	andeq	r1, r1, r0, ror #5
   11c60:	ldrdeq	r1, [r1], -r8

00011c64 <__libc_csu_fini@@Base>:
   11c64:	bx	lr

Disassembly of section .fini:

00011c68 <.fini>:
   11c68:	push	{r3, lr}
   11c6c:	pop	{r3, pc}
