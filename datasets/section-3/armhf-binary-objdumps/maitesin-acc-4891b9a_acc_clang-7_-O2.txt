
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

00011ea0 <.init>:
   11ea0:	push	{r3, lr}
   11ea4:	bl	120ec <_start@@Base+0x3c>
   11ea8:	pop	{r3, pc}

Disassembly of section .plt:

00011eac <fdopen@plt-0x14>:
   11eac:	push	{lr}		; (str lr, [sp, #-4]!)
   11eb0:	ldr	lr, [pc, #4]	; 11ebc <fdopen@plt-0x4>
   11eb4:	add	lr, pc, lr
   11eb8:	ldr	pc, [lr, #8]!
   11ebc:	andeq	fp, r1, r4, asr #2

00011ec0 <fdopen@plt>:
   11ec0:	add	ip, pc, #0, 12
   11ec4:	add	ip, ip, #110592	; 0x1b000
   11ec8:	ldr	pc, [ip, #324]!	; 0x144

00011ecc <strtol@plt>:
   11ecc:	add	ip, pc, #0, 12
   11ed0:	add	ip, ip, #110592	; 0x1b000
   11ed4:	ldr	pc, [ip, #316]!	; 0x13c

00011ed8 <fopen@plt>:
   11ed8:	add	ip, pc, #0, 12
   11edc:	add	ip, ip, #110592	; 0x1b000
   11ee0:	ldr	pc, [ip, #308]!	; 0x134

00011ee4 <fflush@plt>:
   11ee4:	add	ip, pc, #0, 12
   11ee8:	add	ip, ip, #110592	; 0x1b000
   11eec:	ldr	pc, [ip, #300]!	; 0x12c

00011ef0 <free@plt>:
   11ef0:	add	ip, pc, #0, 12
   11ef4:	add	ip, ip, #110592	; 0x1b000
   11ef8:	ldr	pc, [ip, #292]!	; 0x124

00011efc <memcpy@plt>:
   11efc:	add	ip, pc, #0, 12
   11f00:	add	ip, ip, #110592	; 0x1b000
   11f04:	ldr	pc, [ip, #284]!	; 0x11c

00011f08 <mmap64@plt>:
   11f08:	add	ip, pc, #0, 12
   11f0c:	add	ip, ip, #110592	; 0x1b000
   11f10:	ldr	pc, [ip, #276]!	; 0x114

00011f14 <ftell@plt>:
   11f14:	add	ip, pc, #0, 12
   11f18:	add	ip, ip, #110592	; 0x1b000
   11f1c:	ldr	pc, [ip, #268]!	; 0x10c

00011f20 <uname@plt>:
   11f20:	add	ip, pc, #0, 12
   11f24:	add	ip, ip, #110592	; 0x1b000
   11f28:	ldr	pc, [ip, #260]!	; 0x104

00011f2c <strdup@plt>:
   11f2c:	add	ip, pc, #0, 12
   11f30:	add	ip, ip, #110592	; 0x1b000
   11f34:	ldr	pc, [ip, #252]!	; 0xfc

00011f38 <realloc@plt>:
   11f38:	add	ip, pc, #0, 12
   11f3c:	add	ip, ip, #110592	; 0x1b000
   11f40:	ldr	pc, [ip, #244]!	; 0xf4

00011f44 <fwrite@plt>:
   11f44:	add	ip, pc, #0, 12
   11f48:	add	ip, ip, #110592	; 0x1b000
   11f4c:	ldr	pc, [ip, #236]!	; 0xec

00011f50 <open64@plt>:
   11f50:	add	ip, pc, #0, 12
   11f54:	add	ip, ip, #110592	; 0x1b000
   11f58:	ldr	pc, [ip, #228]!	; 0xe4

00011f5c <getenv@plt>:
   11f5c:	add	ip, pc, #0, 12
   11f60:	add	ip, ip, #110592	; 0x1b000
   11f64:	ldr	pc, [ip, #220]!	; 0xdc

00011f68 <malloc@plt>:
   11f68:	add	ip, pc, #0, 12
   11f6c:	add	ip, ip, #110592	; 0x1b000
   11f70:	ldr	pc, [ip, #212]!	; 0xd4

00011f74 <__libc_start_main@plt>:
   11f74:	add	ip, pc, #0, 12
   11f78:	add	ip, ip, #110592	; 0x1b000
   11f7c:	ldr	pc, [ip, #204]!	; 0xcc

00011f80 <strerror@plt>:
   11f80:	add	ip, pc, #0, 12
   11f84:	add	ip, ip, #110592	; 0x1b000
   11f88:	ldr	pc, [ip, #196]!	; 0xc4

00011f8c <__gmon_start__@plt>:
   11f8c:	add	ip, pc, #0, 12
   11f90:	add	ip, ip, #110592	; 0x1b000
   11f94:	ldr	pc, [ip, #188]!	; 0xbc

00011f98 <getpid@plt>:
   11f98:	add	ip, pc, #0, 12
   11f9c:	add	ip, ip, #110592	; 0x1b000
   11fa0:	ldr	pc, [ip, #180]!	; 0xb4

00011fa4 <exit@plt>:
   11fa4:	add	ip, pc, #0, 12
   11fa8:	add	ip, ip, #110592	; 0x1b000
   11fac:	ldr	pc, [ip, #172]!	; 0xac

00011fb0 <strlen@plt>:
   11fb0:	add	ip, pc, #0, 12
   11fb4:	add	ip, ip, #110592	; 0x1b000
   11fb8:	ldr	pc, [ip, #164]!	; 0xa4

00011fbc <strchr@plt>:
   11fbc:	add	ip, pc, #0, 12
   11fc0:	add	ip, ip, #110592	; 0x1b000
   11fc4:	ldr	pc, [ip, #156]!	; 0x9c

00011fc8 <getopt@plt>:
   11fc8:	add	ip, pc, #0, 12
   11fcc:	add	ip, ip, #110592	; 0x1b000
   11fd0:	ldr	pc, [ip, #148]!	; 0x94

00011fd4 <fprintf@plt>:
   11fd4:	add	ip, pc, #0, 12
   11fd8:	add	ip, ip, #110592	; 0x1b000
   11fdc:	ldr	pc, [ip, #140]!	; 0x8c

00011fe0 <__errno_location@plt>:
   11fe0:	add	ip, pc, #0, 12
   11fe4:	add	ip, ip, #110592	; 0x1b000
   11fe8:	ldr	pc, [ip, #132]!	; 0x84

00011fec <__cxa_atexit@plt>:
   11fec:	add	ip, pc, #0, 12
   11ff0:	add	ip, ip, #110592	; 0x1b000
   11ff4:	ldr	pc, [ip, #124]!	; 0x7c

00011ff8 <mkdir@plt>:
   11ff8:	add	ip, pc, #0, 12
   11ffc:	add	ip, ip, #110592	; 0x1b000
   12000:	ldr	pc, [ip, #116]!	; 0x74

00012004 <memset@plt>:
   12004:	add	ip, pc, #0, 12
   12008:	add	ip, ip, #110592	; 0x1b000
   1200c:	ldr	pc, [ip, #108]!	; 0x6c

00012010 <strncpy@plt>:
   12010:	add	ip, pc, #0, 12
   12014:	add	ip, ip, #110592	; 0x1b000
   12018:	ldr	pc, [ip, #100]!	; 0x64

0001201c <prctl@plt>:
   1201c:	add	ip, pc, #0, 12
   12020:	add	ip, ip, #110592	; 0x1b000
   12024:	ldr	pc, [ip, #92]!	; 0x5c

00012028 <fclose@plt>:
   12028:	add	ip, pc, #0, 12
   1202c:	add	ip, ip, #110592	; 0x1b000
   12030:	ldr	pc, [ip, #84]!	; 0x54

00012034 <strnlen@plt>:
   12034:	add	ip, pc, #0, 12
   12038:	add	ip, ip, #110592	; 0x1b000
   1203c:	ldr	pc, [ip, #76]!	; 0x4c

00012040 <munmap@plt>:
   12040:	add	ip, pc, #0, 12
   12044:	add	ip, ip, #110592	; 0x1b000
   12048:	ldr	pc, [ip, #68]!	; 0x44

0001204c <fcntl64@plt>:
   1204c:	add	ip, pc, #0, 12
   12050:	add	ip, ip, #110592	; 0x1b000
   12054:	ldr	pc, [ip, #60]!	; 0x3c

00012058 <strrchr@plt>:
   12058:	add	ip, pc, #0, 12
   1205c:	add	ip, ip, #110592	; 0x1b000
   12060:	ldr	pc, [ip, #52]!	; 0x34

00012064 <fputc@plt>:
   12064:	add	ip, pc, #0, 12
   12068:	add	ip, ip, #110592	; 0x1b000
   1206c:	ldr	pc, [ip, #44]!	; 0x2c

00012070 <msync@plt>:
   12070:	add	ip, pc, #0, 12
   12074:	add	ip, ip, #110592	; 0x1b000
   12078:	ldr	pc, [ip, #36]!	; 0x24

0001207c <fread_unlocked@plt>:
   1207c:	add	ip, pc, #0, 12
   12080:	add	ip, ip, #110592	; 0x1b000
   12084:	ldr	pc, [ip, #28]!

00012088 <fseek@plt>:
   12088:	add	ip, pc, #0, 12
   1208c:	add	ip, ip, #110592	; 0x1b000
   12090:	ldr	pc, [ip, #20]!

00012094 <strncmp@plt>:
   12094:	add	ip, pc, #0, 12
   12098:	add	ip, ip, #110592	; 0x1b000
   1209c:	ldr	pc, [ip, #12]!

000120a0 <abort@plt>:
   120a0:	add	ip, pc, #0, 12
   120a4:	add	ip, ip, #110592	; 0x1b000
   120a8:	ldr	pc, [ip, #4]!

Disassembly of section .text:

000120b0 <_start@@Base>:
   120b0:	mov	fp, #0
   120b4:	mov	lr, #0
   120b8:	pop	{r1}		; (ldr r1, [sp], #4)
   120bc:	mov	r2, sp
   120c0:	push	{r2}		; (str r2, [sp, #-4]!)
   120c4:	push	{r0}		; (str r0, [sp, #-4]!)
   120c8:	ldr	ip, [pc, #16]	; 120e0 <_start@@Base+0x30>
   120cc:	push	{ip}		; (str ip, [sp, #-4]!)
   120d0:	ldr	r0, [pc, #12]	; 120e4 <_start@@Base+0x34>
   120d4:	ldr	r3, [pc, #12]	; 120e8 <_start@@Base+0x38>
   120d8:	bl	11f74 <__libc_start_main@plt>
   120dc:	bl	120a0 <abort@plt>
   120e0:	andeq	fp, r1, r0, lsl #7
   120e4:	andeq	r2, r1, r0, asr #9
   120e8:	andeq	fp, r1, r0, lsr #6
   120ec:	ldr	r3, [pc, #20]	; 12108 <_start@@Base+0x58>
   120f0:	ldr	r2, [pc, #20]	; 1210c <_start@@Base+0x5c>
   120f4:	add	r3, pc, r3
   120f8:	ldr	r2, [r3, r2]
   120fc:	cmp	r2, #0
   12100:	bxeq	lr
   12104:	b	11f8c <__gmon_start__@plt>
   12108:	andeq	sl, r1, r4, lsl #30
   1210c:	andeq	r0, r0, r4, asr #1
   12110:	ldr	r0, [pc, #24]	; 12130 <_start@@Base+0x80>
   12114:	ldr	r3, [pc, #24]	; 12134 <_start@@Base+0x84>
   12118:	cmp	r3, r0
   1211c:	bxeq	lr
   12120:	ldr	r3, [pc, #16]	; 12138 <_start@@Base+0x88>
   12124:	cmp	r3, #0
   12128:	bxeq	lr
   1212c:	bx	r3
   12130:	strdeq	sp, [r2], -r8
   12134:	strdeq	sp, [r2], -r8
   12138:	andeq	r0, r0, r0
   1213c:	ldr	r0, [pc, #36]	; 12168 <_start@@Base+0xb8>
   12140:	ldr	r1, [pc, #36]	; 1216c <_start@@Base+0xbc>
   12144:	sub	r1, r1, r0
   12148:	asr	r1, r1, #2
   1214c:	add	r1, r1, r1, lsr #31
   12150:	asrs	r1, r1, #1
   12154:	bxeq	lr
   12158:	ldr	r3, [pc, #16]	; 12170 <_start@@Base+0xc0>
   1215c:	cmp	r3, #0
   12160:	bxeq	lr
   12164:	bx	r3
   12168:	strdeq	sp, [r2], -r8
   1216c:	strdeq	sp, [r2], -r8
   12170:	andeq	r0, r0, r0
   12174:	push	{r4, lr}
   12178:	ldr	r4, [pc, #24]	; 12198 <_start@@Base+0xe8>
   1217c:	ldrb	r3, [r4]
   12180:	cmp	r3, #0
   12184:	popne	{r4, pc}
   12188:	bl	12110 <_start@@Base+0x60>
   1218c:	mov	r3, #1
   12190:	strb	r3, [r4]
   12194:	pop	{r4, pc}
   12198:	andeq	sp, r2, r0, lsl #2
   1219c:	b	1213c <_start@@Base+0x8c>

000121a0 <load_file@@Base>:
   121a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   121a4:	add	fp, sp, #24
   121a8:	ldr	r4, [pc, #548]	; 123d4 <load_file@@Base+0x234>
   121ac:	mov	r8, r0
   121b0:	ldr	r0, [pc, #544]	; 123d8 <load_file@@Base+0x238>
   121b4:	ldr	r0, [pc, r0]
   121b8:	add	r4, pc, r4
   121bc:	adds	r0, r0, #1
   121c0:	str	r0, [r4]
   121c4:	ldr	r0, [r4, #4]
   121c8:	adc	r0, r0, #0
   121cc:	str	r0, [r4, #4]
   121d0:	mov	r0, r8
   121d4:	ldr	r1, [pc, #512]	; 123dc <load_file@@Base+0x23c>
   121d8:	add	r1, pc, r1
   121dc:	bl	11ed8 <fopen@plt>
   121e0:	mov	r5, r0
   121e4:	mov	r0, #16
   121e8:	mov	r1, r4
   121ec:	mov	r6, #0
   121f0:	cmp	r5, #0
   121f4:	movwne	r0, #8
   121f8:	ldr	r0, [r1, r0]!
   121fc:	adds	r0, r0, #1
   12200:	str	r0, [r1]
   12204:	ldr	r0, [r1, #4]
   12208:	adc	r0, r0, #0
   1220c:	cmp	r5, #0
   12210:	str	r0, [r1, #4]
   12214:	beq	12354 <load_file@@Base+0x1b4>
   12218:	mov	r0, r5
   1221c:	mov	r1, #0
   12220:	mov	r2, #2
   12224:	bl	12088 <fseek@plt>
   12228:	mov	r1, #32
   1222c:	cmp	r0, #0
   12230:	mov	r2, r4
   12234:	movweq	r1, #24
   12238:	ldr	r1, [r2, r1]!
   1223c:	adds	r1, r1, #1
   12240:	str	r1, [r2]
   12244:	ldr	r1, [r2, #4]
   12248:	adc	r1, r1, #0
   1224c:	cmp	r0, #0
   12250:	str	r1, [r2, #4]
   12254:	bne	1233c <load_file@@Base+0x19c>
   12258:	mov	r0, r5
   1225c:	bl	11f14 <ftell@plt>
   12260:	mov	r7, r0
   12264:	mov	r0, #48	; 0x30
   12268:	mov	r1, r4
   1226c:	cmn	r7, #1
   12270:	movweq	r0, #40	; 0x28
   12274:	ldr	r0, [r1, r0]!
   12278:	adds	r0, r0, #1
   1227c:	str	r0, [r1]
   12280:	ldr	r0, [r1, #4]
   12284:	adc	r0, r0, #0
   12288:	cmn	r7, #1
   1228c:	str	r0, [r1, #4]
   12290:	beq	1236c <load_file@@Base+0x1cc>
   12294:	add	r0, r7, #1
   12298:	bl	11f68 <malloc@plt>
   1229c:	mov	r6, r0
   122a0:	mov	r0, r5
   122a4:	mov	r1, #0
   122a8:	mov	r2, #0
   122ac:	bl	12088 <fseek@plt>
   122b0:	mov	r1, #64	; 0x40
   122b4:	cmp	r0, #0
   122b8:	mov	r2, r4
   122bc:	movwne	r1, #56	; 0x38
   122c0:	ldr	r1, [r2, r1]!
   122c4:	adds	r1, r1, #1
   122c8:	str	r1, [r2]
   122cc:	ldr	r1, [r2, #4]
   122d0:	adc	r1, r1, #0
   122d4:	cmp	r0, #0
   122d8:	str	r1, [r2, #4]
   122dc:	bne	12388 <load_file@@Base+0x1e8>
   122e0:	mov	r0, r6
   122e4:	mov	r1, #1
   122e8:	mov	r2, r7
   122ec:	mov	r3, r5
   122f0:	bl	1207c <fread_unlocked@plt>
   122f4:	mov	r1, #80	; 0x50
   122f8:	cmp	r0, #0
   122fc:	mov	r2, r4
   12300:	movweq	r1, #72	; 0x48
   12304:	ldr	r1, [r2, r1]!
   12308:	adds	r1, r1, #1
   1230c:	str	r1, [r2]
   12310:	ldr	r1, [r2, #4]
   12314:	adc	r1, r1, #0
   12318:	cmp	r0, #0
   1231c:	str	r1, [r2, #4]
   12320:	beq	123b0 <load_file@@Base+0x210>
   12324:	ldrd	r2, [r4, #88]	; 0x58
   12328:	mov	r1, #0
   1232c:	strb	r1, [r6, r0]
   12330:	adds	r2, r2, #1
   12334:	adc	r3, r3, #0
   12338:	strd	r2, [r4, #88]	; 0x58
   1233c:	ldrd	r0, [r4, #96]	; 0x60
   12340:	adds	r0, r0, #1
   12344:	adc	r1, r1, #0
   12348:	strd	r0, [r4, #96]	; 0x60
   1234c:	mov	r0, r5
   12350:	bl	12028 <fclose@plt>
   12354:	ldrd	r0, [r4, #104]	; 0x68
   12358:	adds	r0, r0, #1
   1235c:	adc	r1, r1, #0
   12360:	strd	r0, [r4, #104]	; 0x68
   12364:	mov	r0, r6
   12368:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1236c:	ldr	r0, [pc, #108]	; 123e0 <load_file@@Base+0x240>
   12370:	mov	r1, #51	; 0x33
   12374:	ldr	r0, [pc, r0]
   12378:	ldr	r3, [r0]
   1237c:	ldr	r0, [pc, #96]	; 123e4 <load_file@@Base+0x244>
   12380:	add	r0, pc, r0
   12384:	b	123a0 <load_file@@Base+0x200>
   12388:	ldr	r0, [pc, #88]	; 123e8 <load_file@@Base+0x248>
   1238c:	mov	r1, #49	; 0x31
   12390:	ldr	r0, [pc, r0]
   12394:	ldr	r3, [r0]
   12398:	ldr	r0, [pc, #76]	; 123ec <load_file@@Base+0x24c>
   1239c:	add	r0, pc, r0
   123a0:	mov	r2, #1
   123a4:	bl	11f44 <fwrite@plt>
   123a8:	mov	r0, #1
   123ac:	bl	11fa4 <exit@plt>
   123b0:	ldr	r0, [pc, #56]	; 123f0 <load_file@@Base+0x250>
   123b4:	mov	r2, r8
   123b8:	ldr	r0, [pc, r0]
   123bc:	ldr	r0, [r0]
   123c0:	ldr	r1, [pc, #44]	; 123f4 <load_file@@Base+0x254>
   123c4:	add	r1, pc, r1
   123c8:	bl	11fd4 <fprintf@plt>
   123cc:	mov	r0, #1
   123d0:	bl	11fa4 <exit@plt>
   123d4:	andeq	sl, r1, r0, asr pc
   123d8:	andeq	sl, r1, r4, asr pc
   123dc:	andeq	r9, r0, r3, asr r6
   123e0:	andeq	sl, r1, r4, asr #26
   123e4:	andeq	r9, r0, ip, lsr #32
   123e8:	andeq	sl, r1, r8, lsr #26
   123ec:	andeq	r9, r0, r4, asr #32
   123f0:	andeq	sl, r1, r0, lsl #26
   123f4:	andeq	r9, r0, lr, asr #32
   123f8:	nop	{0}
   123fc:	nop	{0}

00012400 <my_main@@Base>:
   12400:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12404:	add	fp, sp, #24
   12408:	sub	sp, sp, #32
   1240c:	mov	r5, r1
   12410:	ldr	r1, [pc, #152]	; 124b0 <my_main@@Base+0xb0>
   12414:	add	r2, pc, #132	; 0x84
   12418:	vld1.64	{d16-d17}, [r2 :128]
   1241c:	add	r1, pc, r1
   12420:	vld1.64	{d18-d19}, [r1 :128]
   12424:	vadd.i64	q8, q9, q8
   12428:	vst1.64	{d16-d17}, [r1 :128]
   1242c:	bl	121a0 <load_file@@Base>
   12430:	mov	r4, r0
   12434:	add	r8, sp, #20
   12438:	mov	r0, r8
   1243c:	mov	r1, r4
   12440:	bl	13270 <init_lexer@@Base>
   12444:	add	r7, sp, #16
   12448:	mov	r1, r8
   1244c:	mov	r0, r7
   12450:	bl	161d0 <init_grammar@@Base>
   12454:	mov	r6, sp
   12458:	mov	r1, r7
   1245c:	mov	r2, r5
   12460:	mov	r0, r6
   12464:	bl	173f0 <init_generator@@Base>
   12468:	mov	r0, r6
   1246c:	bl	174b0 <generate_code@@Base>
   12470:	mov	r0, r6
   12474:	bl	17460 <destroy_generator@@Base>
   12478:	mov	r0, r7
   1247c:	bl	16220 <destroy_grammar@@Base>
   12480:	mov	r0, r8
   12484:	bl	132c0 <destroy_lexer@@Base>
   12488:	mov	r0, r4
   1248c:	bl	11ef0 <free@plt>
   12490:	mov	r0, #0
   12494:	sub	sp, fp, #24
   12498:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1249c:	nop	{0}
   124a0:	andeq	r0, r0, r1
   124a4:	andeq	r0, r0, r0
   124a8:	andeq	r0, r0, r1
   124ac:	andeq	r0, r0, r0
   124b0:	andeq	sl, r1, ip, asr sp
   124b4:	nop	{0}
   124b8:	nop	{0}
   124bc:	nop	{0}

000124c0 <main@@Base>:
   124c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   124c4:	add	fp, sp, #24
   124c8:	ldr	r7, [pc, #432]	; 12680 <main@@Base+0x1c0>
   124cc:	mov	r5, r0
   124d0:	add	r0, pc, #408	; 0x198
   124d4:	mov	r4, r1
   124d8:	vld1.64	{d16-d17}, [r0 :128]
   124dc:	mov	r0, r5
   124e0:	add	r7, pc, r7
   124e4:	vld1.64	{d18-d19}, [r7 :128]
   124e8:	vadd.i64	q8, q9, q8
   124ec:	vst1.64	{d16-d17}, [r7 :128]
   124f0:	ldr	r2, [pc, #396]	; 12684 <main@@Base+0x1c4>
   124f4:	add	r2, pc, r2
   124f8:	bl	11fc8 <getopt@plt>
   124fc:	mov	r1, #24
   12500:	cmn	r0, #1
   12504:	mov	r2, r7
   12508:	mov	r8, #0
   1250c:	movwne	r1, #16
   12510:	ldr	r1, [r2, r1]!
   12514:	adds	r1, r1, #1
   12518:	str	r1, [r2]
   1251c:	ldr	r1, [r2, #4]
   12520:	adc	r1, r1, #0
   12524:	cmn	r0, #1
   12528:	str	r1, [r2, #4]
   1252c:	beq	125d4 <main@@Base+0x114>
   12530:	ldr	r9, [pc, #336]	; 12688 <main@@Base+0x1c8>
   12534:	ldr	r9, [pc, r9]
   12538:	ldr	r6, [pc, #332]	; 1268c <main@@Base+0x1cc>
   1253c:	add	r6, pc, r6
   12540:	cmp	r0, #111	; 0x6f
   12544:	mov	r1, #40	; 0x28
   12548:	mov	r2, r7
   1254c:	movweq	r1, #32
   12550:	ldr	r1, [r2, r1]!
   12554:	adds	r1, r1, #1
   12558:	str	r1, [r2]
   1255c:	ldr	r1, [r2, #4]
   12560:	adc	r1, r1, #0
   12564:	cmp	r0, #111	; 0x6f
   12568:	str	r1, [r2, #4]
   1256c:	bne	12584 <main@@Base+0xc4>
   12570:	ldrd	r0, [r7, #48]	; 0x30
   12574:	ldr	r8, [r9]
   12578:	adds	r0, r0, #1
   1257c:	adc	r1, r1, #0
   12580:	strd	r0, [r7, #48]	; 0x30
   12584:	ldrd	r0, [r7, #56]	; 0x38
   12588:	mov	r2, r6
   1258c:	adds	r0, r0, #1
   12590:	adc	r1, r1, #0
   12594:	strd	r0, [r7, #56]	; 0x38
   12598:	mov	r0, r5
   1259c:	mov	r1, r4
   125a0:	bl	11fc8 <getopt@plt>
   125a4:	cmn	r0, #1
   125a8:	mov	r1, #24
   125ac:	mov	r2, r7
   125b0:	movwne	r1, #16
   125b4:	ldr	r1, [r2, r1]!
   125b8:	adds	r1, r1, #1
   125bc:	str	r1, [r2]
   125c0:	ldr	r1, [r2, #4]
   125c4:	adc	r1, r1, #0
   125c8:	cmn	r0, #1
   125cc:	str	r1, [r2, #4]
   125d0:	bne	12540 <main@@Base+0x80>
   125d4:	ldr	r0, [pc, #180]	; 12690 <main@@Base+0x1d0>
   125d8:	mov	r1, #72	; 0x48
   125dc:	mov	r2, r7
   125e0:	ldr	r0, [pc, r0]
   125e4:	ldr	r0, [r0]
   125e8:	cmp	r0, r5
   125ec:	movwlt	r1, #64	; 0x40
   125f0:	ldr	r1, [r2, r1]!
   125f4:	adds	r1, r1, #1
   125f8:	str	r1, [r2]
   125fc:	ldr	r1, [r2, #4]
   12600:	adc	r1, r1, #0
   12604:	cmp	r0, r5
   12608:	str	r1, [r2, #4]
   1260c:	bge	12640 <main@@Base+0x180>
   12610:	ldrd	r2, [r7, #80]	; 0x50
   12614:	adds	r2, r2, #1
   12618:	adc	r3, r3, #0
   1261c:	cmp	r8, #0
   12620:	strd	r2, [r7, #80]	; 0x50
   12624:	ldr	r0, [r4, r0, lsl #2]
   12628:	ldr	r1, [pc, #100]	; 12694 <main@@Base+0x1d4>
   1262c:	add	r1, pc, r1
   12630:	movne	r1, r8
   12634:	bl	12400 <my_main@@Base>
   12638:	mov	r0, #0
   1263c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12640:	ldr	r0, [pc, #80]	; 12698 <main@@Base+0x1d8>
   12644:	mov	r1, #45	; 0x2d
   12648:	mov	r2, #1
   1264c:	ldr	r0, [pc, r0]
   12650:	ldr	r3, [r0]
   12654:	ldr	r0, [pc, #64]	; 1269c <main@@Base+0x1dc>
   12658:	add	r0, pc, r0
   1265c:	bl	11f44 <fwrite@plt>
   12660:	mov	r0, #1
   12664:	bl	11fa4 <exit@plt>
   12668:	nop	{0}
   1266c:	nop	{0}
   12670:	andeq	r0, r0, r1
   12674:	andeq	r0, r0, r0
   12678:	andeq	r0, r0, r1
   1267c:	andeq	r0, r0, r0
   12680:	andeq	sl, r1, r8, lsr #25
   12684:	andeq	r8, r0, r6, lsr pc
   12688:	andeq	sl, r1, ip, lsl #23
   1268c:	andeq	r8, r0, lr, ror #29
   12690:	ldrdeq	sl, [r1], -r4
   12694:	andeq	r8, r0, r1, lsl #28
   12698:	andeq	sl, r1, ip, ror #20
   1269c:	ldrdeq	r8, [r0], -r9
   126a0:	push	{r4, lr}
   126a4:	sub	sp, sp, #8
   126a8:	ldr	r0, [pc, #184]	; 12768 <main@@Base+0x2a8>
   126ac:	ldr	r1, [pc, #184]	; 1276c <main@@Base+0x2ac>
   126b0:	movw	r4, #13547	; 0x34eb
   126b4:	movt	r4, #50461	; 0xc51d
   126b8:	mov	r2, r4
   126bc:	add	r0, pc, r0
   126c0:	add	r1, pc, r1
   126c4:	bl	18420 <__generate_code_for_binary_boolean_expression@@Base+0x5d0>
   126c8:	str	r4, [sp]
   126cc:	movw	r2, #56329	; 0xdc09
   126d0:	mov	r0, #0
   126d4:	mov	r3, #0
   126d8:	ldr	r1, [pc, #144]	; 12770 <main@@Base+0x2b0>
   126dc:	movt	r2, #3122	; 0xc32
   126e0:	add	r1, pc, r1
   126e4:	bl	18b84 <__generate_code_for_binary_boolean_expression@@Base+0xd34>
   126e8:	ldr	r1, [pc, #132]	; 12774 <main@@Base+0x2b4>
   126ec:	mov	r0, #14
   126f0:	add	r1, pc, r1
   126f4:	bl	19438 <__generate_code_for_binary_boolean_expression@@Base+0x15e8>
   126f8:	str	r4, [sp]
   126fc:	movw	r2, #53840	; 0xd250
   12700:	mov	r0, #1
   12704:	mov	r3, #0
   12708:	ldr	r1, [pc, #104]	; 12778 <main@@Base+0x2b8>
   1270c:	movt	r2, #34957	; 0x888d
   12710:	add	r1, pc, r1
   12714:	bl	18b84 <__generate_code_for_binary_boolean_expression@@Base+0xd34>
   12718:	ldr	r1, [pc, #92]	; 1277c <main@@Base+0x2bc>
   1271c:	mov	r0, #2
   12720:	add	r1, pc, r1
   12724:	bl	19438 <__generate_code_for_binary_boolean_expression@@Base+0x15e8>
   12728:	str	r4, [sp]
   1272c:	movw	r2, #59238	; 0xe766
   12730:	mov	r0, #2
   12734:	mov	r3, #0
   12738:	ldr	r1, [pc, #64]	; 12780 <main@@Base+0x2c0>
   1273c:	movt	r2, #28363	; 0x6ecb
   12740:	add	r1, pc, r1
   12744:	bl	18b84 <__generate_code_for_binary_boolean_expression@@Base+0xd34>
   12748:	ldr	r1, [pc, #52]	; 12784 <main@@Base+0x2c4>
   1274c:	mov	r0, #11
   12750:	add	r1, pc, r1
   12754:	bl	19438 <__generate_code_for_binary_boolean_expression@@Base+0x15e8>
   12758:	bl	19bb4 <__generate_code_for_binary_boolean_expression@@Base+0x1d64>
   1275c:	add	sp, sp, #8
   12760:	pop	{r4, lr}
   12764:	b	1a920 <__generate_code_for_binary_boolean_expression@@Base+0x2ad0>
   12768:			; <UNDEFINED> instruction: 0x00008dbc
   1276c:	muleq	r0, pc, sp	; <UNPREDICTABLE>
   12770:	andeq	r8, r0, r4, lsl #27
   12774:	andeq	sl, r1, r8, lsl sl
   12778:	andeq	r8, r0, lr, asr sp
   1277c:	andeq	sl, r1, r8, asr sl
   12780:	andeq	r8, r0, r1, lsr sp
   12784:	andeq	sl, r1, r8, lsr sl
   12788:	push	{fp, lr}
   1278c:	bl	126a0 <main@@Base+0x1e0>
   12790:	ldr	r0, [pc, #132]	; 1281c <main@@Base+0x35c>
   12794:	vmov.i32	q8, #0	; 0x00000000
   12798:	mov	r3, #96	; 0x60
   1279c:	add	r0, pc, r0
   127a0:	add	r1, r0, #80	; 0x50
   127a4:	vst1.64	{d16-d17}, [r1 :128]
   127a8:	add	r1, r0, #64	; 0x40
   127ac:	vst1.64	{d16-d17}, [r1 :128]
   127b0:	add	r1, r0, #48	; 0x30
   127b4:	vst1.64	{d16-d17}, [r1 :128]
   127b8:	add	r1, r0, #32
   127bc:	vst1.64	{d16-d17}, [r1 :128]
   127c0:	add	r1, r0, #16
   127c4:	vst1.64	{d16-d17}, [r1 :128]
   127c8:	ldr	r1, [pc, #80]	; 12820 <main@@Base+0x360>
   127cc:	add	r1, pc, r1
   127d0:	vst1.64	{d16-d17}, [r1 :128]
   127d4:	ldr	r1, [pc, #72]	; 12824 <main@@Base+0x364>
   127d8:	vst1.64	{d16-d17}, [r0 :128], r3
   127dc:	vst1.64	{d16-d17}, [r0 :128]
   127e0:	mov	r0, #84	; 0x54
   127e4:	add	r1, pc, r1
   127e8:	add	r2, r1, #64	; 0x40
   127ec:	vst1.64	{d16-d17}, [r2 :128]
   127f0:	add	r2, r1, #48	; 0x30
   127f4:	vst1.64	{d16-d17}, [r2 :128]
   127f8:	add	r2, r1, #32
   127fc:	vst1.64	{d16-d17}, [r2 :128]
   12800:	add	r2, r1, #16
   12804:	vst1.64	{d16-d17}, [r2 :128]
   12808:	mov	r2, #0
   1280c:	str	r2, [r1, #80]	; 0x50
   12810:	vst1.64	{d16-d17}, [r1 :128], r0
   12814:	str	r2, [r1]
   12818:	pop	{fp, pc}
   1281c:	andeq	sl, r1, ip, ror #18
   12820:	andeq	sl, r1, ip, lsr #19
   12824:	andeq	sl, r1, r4, lsr #19
   12828:	ldr	r0, [pc, #12]	; 1283c <main@@Base+0x37c>
   1282c:	ldr	r1, [pc, #12]	; 12840 <main@@Base+0x380>
   12830:	add	r0, pc, r0
   12834:	add	r1, pc, r1
   12838:	b	1add0 <__gcov_flush@@Base+0xb4>
   1283c:			; <UNDEFINED> instruction: 0xfffffe68
   12840:			; <UNDEFINED> instruction: 0xffffff4c
	...

00012850 <init_token_int_type@@Base>:
   12850:	ldr	r1, [pc, #56]	; 12890 <init_token_int_type@@Base+0x40>
   12854:	add	r2, pc, #36	; 0x24
   12858:	vld1.64	{d16-d17}, [r2 :128]
   1285c:	add	r1, pc, r1
   12860:	vld1.64	{d18-d19}, [r1 :128]
   12864:	vadd.i64	q8, q9, q8
   12868:	vst1.64	{d16-d17}, [r1 :128]
   1286c:	mov	r1, #0
   12870:	str	r1, [r0]
   12874:	bx	lr
   12878:	nop	{0}
   1287c:	nop	{0}
   12880:	andeq	r0, r0, r1
   12884:	andeq	r0, r0, r0
   12888:	andeq	r0, r0, r1
   1288c:	andeq	r0, r0, r0
   12890:	andeq	sl, r1, ip, lsl #19
   12894:	nop	{0}
   12898:	nop	{0}
   1289c:	nop	{0}

000128a0 <init_token_int_value@@Base>:
   128a0:	ldr	r2, [pc, #56]	; 128e0 <init_token_int_value@@Base+0x40>
   128a4:	add	r3, pc, #36	; 0x24
   128a8:	vld1.64	{d16-d17}, [r3 :128]
   128ac:	add	r2, pc, r2
   128b0:	vld1.64	{d18-d19}, [r2 :128]
   128b4:	vadd.i64	q8, q9, q8
   128b8:	vst1.64	{d16-d17}, [r2 :128]
   128bc:	mov	r2, #1
   128c0:	str	r2, [r0]
   128c4:	str	r1, [r0, #4]
   128c8:	bx	lr
   128cc:	nop	{0}
   128d0:	andeq	r0, r0, r1
   128d4:	andeq	r0, r0, r0
   128d8:	andeq	r0, r0, r1
   128dc:	andeq	r0, r0, r0
   128e0:	andeq	sl, r1, ip, asr #18
   128e4:	nop	{0}
   128e8:	nop	{0}
   128ec:	nop	{0}

000128f0 <init_token_function@@Base>:
   128f0:	ldr	r2, [pc, #56]	; 12930 <init_token_function@@Base+0x40>
   128f4:	add	r3, pc, #36	; 0x24
   128f8:	vld1.64	{d16-d17}, [r3 :128]
   128fc:	add	r2, pc, r2
   12900:	vld1.64	{d18-d19}, [r2 :128]
   12904:	vadd.i64	q8, q9, q8
   12908:	vst1.64	{d16-d17}, [r2 :128]
   1290c:	mov	r2, #2
   12910:	str	r2, [r0]
   12914:	str	r1, [r0, #4]
   12918:	bx	lr
   1291c:	nop	{0}
   12920:	andeq	r0, r0, r1
   12924:	andeq	r0, r0, r0
   12928:	andeq	r0, r0, r1
   1292c:	andeq	r0, r0, r0
   12930:	andeq	sl, r1, ip, lsl #18
   12934:	nop	{0}
   12938:	nop	{0}
   1293c:	nop	{0}

00012940 <init_token_opar@@Base>:
   12940:	ldr	r1, [pc, #56]	; 12980 <init_token_opar@@Base+0x40>
   12944:	add	r2, pc, #36	; 0x24
   12948:	vld1.64	{d16-d17}, [r2 :128]
   1294c:	add	r1, pc, r1
   12950:	vld1.64	{d18-d19}, [r1 :128]
   12954:	vadd.i64	q8, q9, q8
   12958:	vst1.64	{d16-d17}, [r1 :128]
   1295c:	mov	r1, #3
   12960:	str	r1, [r0]
   12964:	bx	lr
   12968:	nop	{0}
   1296c:	nop	{0}
   12970:	andeq	r0, r0, r1
   12974:	andeq	r0, r0, r0
   12978:	andeq	r0, r0, r1
   1297c:	andeq	r0, r0, r0
   12980:	andeq	sl, r1, ip, asr #17
   12984:	nop	{0}
   12988:	nop	{0}
   1298c:	nop	{0}

00012990 <init_token_cpar@@Base>:
   12990:	ldr	r1, [pc, #56]	; 129d0 <init_token_cpar@@Base+0x40>
   12994:	add	r2, pc, #36	; 0x24
   12998:	vld1.64	{d16-d17}, [r2 :128]
   1299c:	add	r1, pc, r1
   129a0:	vld1.64	{d18-d19}, [r1 :128]
   129a4:	vadd.i64	q8, q9, q8
   129a8:	vst1.64	{d16-d17}, [r1 :128]
   129ac:	mov	r1, #4
   129b0:	str	r1, [r0]
   129b4:	bx	lr
   129b8:	nop	{0}
   129bc:	nop	{0}
   129c0:	andeq	r0, r0, r1
   129c4:	andeq	r0, r0, r0
   129c8:	andeq	r0, r0, r1
   129cc:	andeq	r0, r0, r0
   129d0:	andeq	sl, r1, ip, lsl #17
   129d4:	nop	{0}
   129d8:	nop	{0}
   129dc:	nop	{0}

000129e0 <init_token_obra@@Base>:
   129e0:	ldr	r1, [pc, #56]	; 12a20 <init_token_obra@@Base+0x40>
   129e4:	add	r2, pc, #36	; 0x24
   129e8:	vld1.64	{d16-d17}, [r2 :128]
   129ec:	add	r1, pc, r1
   129f0:	vld1.64	{d18-d19}, [r1 :128]
   129f4:	vadd.i64	q8, q9, q8
   129f8:	vst1.64	{d16-d17}, [r1 :128]
   129fc:	mov	r1, #5
   12a00:	str	r1, [r0]
   12a04:	bx	lr
   12a08:	nop	{0}
   12a0c:	nop	{0}
   12a10:	andeq	r0, r0, r1
   12a14:	andeq	r0, r0, r0
   12a18:	andeq	r0, r0, r1
   12a1c:	andeq	r0, r0, r0
   12a20:	andeq	sl, r1, ip, asr #16
   12a24:	nop	{0}
   12a28:	nop	{0}
   12a2c:	nop	{0}

00012a30 <init_token_cbra@@Base>:
   12a30:	ldr	r1, [pc, #56]	; 12a70 <init_token_cbra@@Base+0x40>
   12a34:	add	r2, pc, #36	; 0x24
   12a38:	vld1.64	{d16-d17}, [r2 :128]
   12a3c:	add	r1, pc, r1
   12a40:	vld1.64	{d18-d19}, [r1 :128]
   12a44:	vadd.i64	q8, q9, q8
   12a48:	vst1.64	{d16-d17}, [r1 :128]
   12a4c:	mov	r1, #6
   12a50:	str	r1, [r0]
   12a54:	bx	lr
   12a58:	nop	{0}
   12a5c:	nop	{0}
   12a60:	andeq	r0, r0, r1
   12a64:	andeq	r0, r0, r0
   12a68:	andeq	r0, r0, r1
   12a6c:	andeq	r0, r0, r0
   12a70:	andeq	sl, r1, ip, lsl #16
   12a74:	nop	{0}
   12a78:	nop	{0}
   12a7c:	nop	{0}

00012a80 <init_token_return@@Base>:
   12a80:	ldr	r1, [pc, #56]	; 12ac0 <init_token_return@@Base+0x40>
   12a84:	add	r2, pc, #36	; 0x24
   12a88:	vld1.64	{d16-d17}, [r2 :128]
   12a8c:	add	r1, pc, r1
   12a90:	vld1.64	{d18-d19}, [r1 :128]
   12a94:	vadd.i64	q8, q9, q8
   12a98:	vst1.64	{d16-d17}, [r1 :128]
   12a9c:	mov	r1, #7
   12aa0:	str	r1, [r0]
   12aa4:	bx	lr
   12aa8:	nop	{0}
   12aac:	nop	{0}
   12ab0:	andeq	r0, r0, r1
   12ab4:	andeq	r0, r0, r0
   12ab8:	andeq	r0, r0, r1
   12abc:	andeq	r0, r0, r0
   12ac0:	andeq	sl, r1, ip, asr #15
   12ac4:	nop	{0}
   12ac8:	nop	{0}
   12acc:	nop	{0}

00012ad0 <init_token_semicolon@@Base>:
   12ad0:	ldr	r1, [pc, #56]	; 12b10 <init_token_semicolon@@Base+0x40>
   12ad4:	add	r2, pc, #36	; 0x24
   12ad8:	vld1.64	{d16-d17}, [r2 :128]
   12adc:	add	r1, pc, r1
   12ae0:	vld1.64	{d18-d19}, [r1 :128]
   12ae4:	vadd.i64	q8, q9, q8
   12ae8:	vst1.64	{d16-d17}, [r1 :128]
   12aec:	mov	r1, #8
   12af0:	str	r1, [r0]
   12af4:	bx	lr
   12af8:	nop	{0}
   12afc:	nop	{0}
   12b00:	andeq	r0, r0, r1
   12b04:	andeq	r0, r0, r0
   12b08:	andeq	r0, r0, r1
   12b0c:	andeq	r0, r0, r0
   12b10:	andeq	sl, r1, ip, lsl #15
   12b14:	nop	{0}
   12b18:	nop	{0}
   12b1c:	nop	{0}

00012b20 <init_token_eof@@Base>:
   12b20:	ldr	r1, [pc, #56]	; 12b60 <init_token_eof@@Base+0x40>
   12b24:	add	r2, pc, #36	; 0x24
   12b28:	vld1.64	{d16-d17}, [r2 :128]
   12b2c:	add	r1, pc, r1
   12b30:	vld1.64	{d18-d19}, [r1 :128]
   12b34:	vadd.i64	q8, q9, q8
   12b38:	vst1.64	{d16-d17}, [r1 :128]
   12b3c:	mov	r1, #9
   12b40:	str	r1, [r0]
   12b44:	bx	lr
   12b48:	nop	{0}
   12b4c:	nop	{0}
   12b50:	andeq	r0, r0, r1
   12b54:	andeq	r0, r0, r0
   12b58:	andeq	r0, r0, r1
   12b5c:	andeq	r0, r0, r0
   12b60:	andeq	sl, r1, ip, asr #14
   12b64:	nop	{0}
   12b68:	nop	{0}
   12b6c:	nop	{0}

00012b70 <init_token_if@@Base>:
   12b70:	ldr	r1, [pc, #56]	; 12bb0 <init_token_if@@Base+0x40>
   12b74:	add	r2, pc, #36	; 0x24
   12b78:	vld1.64	{d16-d17}, [r2 :128]
   12b7c:	add	r1, pc, r1
   12b80:	vld1.64	{d18-d19}, [r1 :128]
   12b84:	vadd.i64	q8, q9, q8
   12b88:	vst1.64	{d16-d17}, [r1 :128]
   12b8c:	mov	r1, #10
   12b90:	str	r1, [r0]
   12b94:	bx	lr
   12b98:	nop	{0}
   12b9c:	nop	{0}
   12ba0:	andeq	r0, r0, r1
   12ba4:	andeq	r0, r0, r0
   12ba8:	andeq	r0, r0, r1
   12bac:	andeq	r0, r0, r0
   12bb0:	andeq	sl, r1, ip, lsl #14
   12bb4:	nop	{0}
   12bb8:	nop	{0}
   12bbc:	nop	{0}

00012bc0 <init_token_else@@Base>:
   12bc0:	ldr	r1, [pc, #56]	; 12c00 <init_token_else@@Base+0x40>
   12bc4:	add	r2, pc, #36	; 0x24
   12bc8:	vld1.64	{d16-d17}, [r2 :128]
   12bcc:	add	r1, pc, r1
   12bd0:	vld1.64	{d18-d19}, [r1 :128]
   12bd4:	vadd.i64	q8, q9, q8
   12bd8:	vst1.64	{d16-d17}, [r1 :128]
   12bdc:	mov	r1, #11
   12be0:	str	r1, [r0]
   12be4:	bx	lr
   12be8:	nop	{0}
   12bec:	nop	{0}
   12bf0:	andeq	r0, r0, r1
   12bf4:	andeq	r0, r0, r0
   12bf8:	andeq	r0, r0, r1
   12bfc:	andeq	r0, r0, r0
   12c00:	andeq	sl, r1, ip, asr #13
   12c04:	nop	{0}
   12c08:	nop	{0}
   12c0c:	nop	{0}

00012c10 <init_token_boolean_op@@Base>:
   12c10:	ldr	r2, [pc, #56]	; 12c50 <init_token_boolean_op@@Base+0x40>
   12c14:	add	r3, pc, #36	; 0x24
   12c18:	vld1.64	{d16-d17}, [r3 :128]
   12c1c:	add	r2, pc, r2
   12c20:	vld1.64	{d18-d19}, [r2 :128]
   12c24:	vadd.i64	q8, q9, q8
   12c28:	vst1.64	{d16-d17}, [r2 :128]
   12c2c:	mov	r2, #12
   12c30:	str	r2, [r0]
   12c34:	str	r1, [r0, #4]
   12c38:	bx	lr
   12c3c:	nop	{0}
   12c40:	andeq	r0, r0, r1
   12c44:	andeq	r0, r0, r0
   12c48:	andeq	r0, r0, r1
   12c4c:	andeq	r0, r0, r0
   12c50:	andeq	sl, r1, ip, lsl #13
   12c54:	nop	{0}
   12c58:	nop	{0}
   12c5c:	nop	{0}

00012c60 <free_token_int_type@@Base>:
   12c60:	ldr	r1, [pc, #40]	; 12c90 <free_token_int_type@@Base+0x30>
   12c64:	add	r2, pc, #20
   12c68:	vld1.64	{d16-d17}, [r2 :128]
   12c6c:	add	r1, pc, r1
   12c70:	vld1.64	{d18-d19}, [r1 :128]
   12c74:	vadd.i64	q8, q9, q8
   12c78:	vst1.64	{d16-d17}, [r1 :128]
   12c7c:	b	11ef0 <free@plt>
   12c80:	andeq	r0, r0, r1
   12c84:	andeq	r0, r0, r0
   12c88:	andeq	r0, r0, r1
   12c8c:	andeq	r0, r0, r0
   12c90:	andeq	sl, r1, ip, asr #12
   12c94:	nop	{0}
   12c98:	nop	{0}
   12c9c:	nop	{0}

00012ca0 <free_token_int_value@@Base>:
   12ca0:	ldr	r1, [pc, #40]	; 12cd0 <free_token_int_value@@Base+0x30>
   12ca4:	add	r2, pc, #20
   12ca8:	vld1.64	{d16-d17}, [r2 :128]
   12cac:	add	r1, pc, r1
   12cb0:	vld1.64	{d18-d19}, [r1 :128]
   12cb4:	vadd.i64	q8, q9, q8
   12cb8:	vst1.64	{d16-d17}, [r1 :128]
   12cbc:	b	11ef0 <free@plt>
   12cc0:	andeq	r0, r0, r1
   12cc4:	andeq	r0, r0, r0
   12cc8:	andeq	r0, r0, r1
   12ccc:	andeq	r0, r0, r0
   12cd0:	andeq	sl, r1, ip, lsl r6
   12cd4:	nop	{0}
   12cd8:	nop	{0}
   12cdc:	nop	{0}

00012ce0 <free_token_function@@Base>:
   12ce0:	ldr	r1, [pc, #40]	; 12d10 <free_token_function@@Base+0x30>
   12ce4:	add	r2, pc, #20
   12ce8:	vld1.64	{d16-d17}, [r2 :128]
   12cec:	add	r1, pc, r1
   12cf0:	vld1.64	{d18-d19}, [r1 :128]
   12cf4:	vadd.i64	q8, q9, q8
   12cf8:	vst1.64	{d16-d17}, [r1 :128]
   12cfc:	b	11ef0 <free@plt>
   12d00:	andeq	r0, r0, r1
   12d04:	andeq	r0, r0, r0
   12d08:	andeq	r0, r0, r1
   12d0c:	andeq	r0, r0, r0
   12d10:	andeq	sl, r1, ip, ror #11
   12d14:	nop	{0}
   12d18:	nop	{0}
   12d1c:	nop	{0}

00012d20 <free_token_opar@@Base>:
   12d20:	ldr	r1, [pc, #40]	; 12d50 <free_token_opar@@Base+0x30>
   12d24:	add	r2, pc, #20
   12d28:	vld1.64	{d16-d17}, [r2 :128]
   12d2c:	add	r1, pc, r1
   12d30:	vld1.64	{d18-d19}, [r1 :128]
   12d34:	vadd.i64	q8, q9, q8
   12d38:	vst1.64	{d16-d17}, [r1 :128]
   12d3c:	b	11ef0 <free@plt>
   12d40:	andeq	r0, r0, r1
   12d44:	andeq	r0, r0, r0
   12d48:	andeq	r0, r0, r1
   12d4c:	andeq	r0, r0, r0
   12d50:			; <UNDEFINED> instruction: 0x0001a5bc
   12d54:	nop	{0}
   12d58:	nop	{0}
   12d5c:	nop	{0}

00012d60 <free_token_cpar@@Base>:
   12d60:	ldr	r1, [pc, #40]	; 12d90 <free_token_cpar@@Base+0x30>
   12d64:	add	r2, pc, #20
   12d68:	vld1.64	{d16-d17}, [r2 :128]
   12d6c:	add	r1, pc, r1
   12d70:	vld1.64	{d18-d19}, [r1 :128]
   12d74:	vadd.i64	q8, q9, q8
   12d78:	vst1.64	{d16-d17}, [r1 :128]
   12d7c:	b	11ef0 <free@plt>
   12d80:	andeq	r0, r0, r1
   12d84:	andeq	r0, r0, r0
   12d88:	andeq	r0, r0, r1
   12d8c:	andeq	r0, r0, r0
   12d90:	andeq	sl, r1, ip, lsl #11
   12d94:	nop	{0}
   12d98:	nop	{0}
   12d9c:	nop	{0}

00012da0 <free_token_obra@@Base>:
   12da0:	ldr	r1, [pc, #40]	; 12dd0 <free_token_obra@@Base+0x30>
   12da4:	add	r2, pc, #20
   12da8:	vld1.64	{d16-d17}, [r2 :128]
   12dac:	add	r1, pc, r1
   12db0:	vld1.64	{d18-d19}, [r1 :128]
   12db4:	vadd.i64	q8, q9, q8
   12db8:	vst1.64	{d16-d17}, [r1 :128]
   12dbc:	b	11ef0 <free@plt>
   12dc0:	andeq	r0, r0, r1
   12dc4:	andeq	r0, r0, r0
   12dc8:	andeq	r0, r0, r1
   12dcc:	andeq	r0, r0, r0
   12dd0:	andeq	sl, r1, ip, asr r5
   12dd4:	nop	{0}
   12dd8:	nop	{0}
   12ddc:	nop	{0}

00012de0 <free_token_cbra@@Base>:
   12de0:	ldr	r1, [pc, #40]	; 12e10 <free_token_cbra@@Base+0x30>
   12de4:	add	r2, pc, #20
   12de8:	vld1.64	{d16-d17}, [r2 :128]
   12dec:	add	r1, pc, r1
   12df0:	vld1.64	{d18-d19}, [r1 :128]
   12df4:	vadd.i64	q8, q9, q8
   12df8:	vst1.64	{d16-d17}, [r1 :128]
   12dfc:	b	11ef0 <free@plt>
   12e00:	andeq	r0, r0, r1
   12e04:	andeq	r0, r0, r0
   12e08:	andeq	r0, r0, r1
   12e0c:	andeq	r0, r0, r0
   12e10:	andeq	sl, r1, ip, lsr #10
   12e14:	nop	{0}
   12e18:	nop	{0}
   12e1c:	nop	{0}

00012e20 <free_token_return@@Base>:
   12e20:	ldr	r1, [pc, #40]	; 12e50 <free_token_return@@Base+0x30>
   12e24:	add	r2, pc, #20
   12e28:	vld1.64	{d16-d17}, [r2 :128]
   12e2c:	add	r1, pc, r1
   12e30:	vld1.64	{d18-d19}, [r1 :128]
   12e34:	vadd.i64	q8, q9, q8
   12e38:	vst1.64	{d16-d17}, [r1 :128]
   12e3c:	b	11ef0 <free@plt>
   12e40:	andeq	r0, r0, r1
   12e44:	andeq	r0, r0, r0
   12e48:	andeq	r0, r0, r1
   12e4c:	andeq	r0, r0, r0
   12e50:	strdeq	sl, [r1], -ip
   12e54:	nop	{0}
   12e58:	nop	{0}
   12e5c:	nop	{0}

00012e60 <free_token_semicolon@@Base>:
   12e60:	ldr	r1, [pc, #40]	; 12e90 <free_token_semicolon@@Base+0x30>
   12e64:	add	r2, pc, #20
   12e68:	vld1.64	{d16-d17}, [r2 :128]
   12e6c:	add	r1, pc, r1
   12e70:	vld1.64	{d18-d19}, [r1 :128]
   12e74:	vadd.i64	q8, q9, q8
   12e78:	vst1.64	{d16-d17}, [r1 :128]
   12e7c:	b	11ef0 <free@plt>
   12e80:	andeq	r0, r0, r1
   12e84:	andeq	r0, r0, r0
   12e88:	andeq	r0, r0, r1
   12e8c:	andeq	r0, r0, r0
   12e90:	andeq	sl, r1, ip, asr #9
   12e94:	nop	{0}
   12e98:	nop	{0}
   12e9c:	nop	{0}

00012ea0 <free_token_eof@@Base>:
   12ea0:	ldr	r1, [pc, #40]	; 12ed0 <free_token_eof@@Base+0x30>
   12ea4:	add	r2, pc, #20
   12ea8:	vld1.64	{d16-d17}, [r2 :128]
   12eac:	add	r1, pc, r1
   12eb0:	vld1.64	{d18-d19}, [r1 :128]
   12eb4:	vadd.i64	q8, q9, q8
   12eb8:	vst1.64	{d16-d17}, [r1 :128]
   12ebc:	b	11ef0 <free@plt>
   12ec0:	andeq	r0, r0, r1
   12ec4:	andeq	r0, r0, r0
   12ec8:	andeq	r0, r0, r1
   12ecc:	andeq	r0, r0, r0
   12ed0:	muleq	r1, ip, r4
   12ed4:	nop	{0}
   12ed8:	nop	{0}
   12edc:	nop	{0}

00012ee0 <free_token_if@@Base>:
   12ee0:	ldr	r1, [pc, #40]	; 12f10 <free_token_if@@Base+0x30>
   12ee4:	add	r2, pc, #20
   12ee8:	vld1.64	{d16-d17}, [r2 :128]
   12eec:	add	r1, pc, r1
   12ef0:	vld1.64	{d18-d19}, [r1 :128]
   12ef4:	vadd.i64	q8, q9, q8
   12ef8:	vst1.64	{d16-d17}, [r1 :128]
   12efc:	b	11ef0 <free@plt>
   12f00:	andeq	r0, r0, r1
   12f04:	andeq	r0, r0, r0
   12f08:	andeq	r0, r0, r1
   12f0c:	andeq	r0, r0, r0
   12f10:	andeq	sl, r1, ip, ror #8
   12f14:	nop	{0}
   12f18:	nop	{0}
   12f1c:	nop	{0}

00012f20 <free_token_else@@Base>:
   12f20:	ldr	r1, [pc, #40]	; 12f50 <free_token_else@@Base+0x30>
   12f24:	add	r2, pc, #20
   12f28:	vld1.64	{d16-d17}, [r2 :128]
   12f2c:	add	r1, pc, r1
   12f30:	vld1.64	{d18-d19}, [r1 :128]
   12f34:	vadd.i64	q8, q9, q8
   12f38:	vst1.64	{d16-d17}, [r1 :128]
   12f3c:	b	11ef0 <free@plt>
   12f40:	andeq	r0, r0, r1
   12f44:	andeq	r0, r0, r0
   12f48:	andeq	r0, r0, r1
   12f4c:	andeq	r0, r0, r0
   12f50:	andeq	sl, r1, ip, lsr r4

00012f54 <free_token_boolean_op@@Base>:
   12f54:	push	{r4, r5, fp, lr}
   12f58:	add	fp, sp, #8
   12f5c:	ldr	r5, [pc, #132]	; 12fe8 <free_token_boolean_op@@Base+0x94>
   12f60:	mov	r4, r0
   12f64:	ldr	r0, [pc, #128]	; 12fec <free_token_boolean_op@@Base+0x98>
   12f68:	mov	r1, #16
   12f6c:	ldr	r0, [pc, r0]
   12f70:	add	r5, pc, r5
   12f74:	mov	r2, r5
   12f78:	adds	r0, r0, #1
   12f7c:	str	r0, [r5]
   12f80:	ldr	r0, [r5, #4]
   12f84:	adc	r0, r0, #0
   12f88:	str	r0, [r5, #4]
   12f8c:	ldr	r0, [r4, #4]
   12f90:	cmp	r0, #0
   12f94:	movwne	r1, #8
   12f98:	ldr	r1, [r2, r1]!
   12f9c:	adds	r1, r1, #1
   12fa0:	str	r1, [r2]
   12fa4:	ldr	r1, [r2, #4]
   12fa8:	adc	r1, r1, #0
   12fac:	cmp	r0, #0
   12fb0:	str	r1, [r2, #4]
   12fb4:	beq	12fcc <free_token_boolean_op@@Base+0x78>
   12fb8:	ldrd	r2, [r5, #24]
   12fbc:	adds	r2, r2, #1
   12fc0:	adc	r3, r3, #0
   12fc4:	strd	r2, [r5, #24]
   12fc8:	bl	11ef0 <free@plt>
   12fcc:	ldrd	r0, [r5, #32]
   12fd0:	adds	r0, r0, #1
   12fd4:	adc	r1, r1, #0
   12fd8:	strd	r0, [r5, #32]
   12fdc:	mov	r0, r4
   12fe0:	pop	{r4, r5, fp, lr}
   12fe4:	b	11ef0 <free@plt>
   12fe8:	andeq	sl, r1, r8, lsl #8
   12fec:	andeq	sl, r1, ip, lsl #8
   12ff0:	push	{r4, r5, r6, lr}
   12ff4:	sub	sp, sp, #8
   12ff8:	ldr	r0, [pc, #112]	; 13070 <free_token_boolean_op@@Base+0x11c>
   12ffc:	ldr	r1, [pc, #112]	; 13074 <free_token_boolean_op@@Base+0x120>
   13000:	movw	r2, #10327	; 0x2857
   13004:	movt	r2, #23326	; 0x5b1e
   13008:	add	r0, pc, r0
   1300c:	add	r1, pc, r1
   13010:	bl	18420 <__generate_code_for_binary_boolean_expression@@Base+0x5d0>
   13014:	ldr	r0, [pc, #92]	; 13078 <free_token_boolean_op@@Base+0x124>
   13018:	ldr	r6, [pc, #92]	; 1307c <free_token_boolean_op@@Base+0x128>
   1301c:	mov	r5, #0
   13020:	add	r0, pc, r0
   13024:	add	r6, pc, r6
   13028:	add	r4, r0, #4
   1302c:	mov	r3, r6
   13030:	ldr	r0, [r3, r5]!
   13034:	ldr	r1, [r3, #16]
   13038:	str	r1, [sp]
   1303c:	ldmib	r3, {r1, r2}
   13040:	ldrb	r3, [r3, #12]
   13044:	bl	18b84 <__generate_code_for_binary_boolean_expression@@Base+0xd34>
   13048:	ldrd	r0, [r4, #-4]
   1304c:	bl	19438 <__generate_code_for_binary_boolean_expression@@Base+0x15e8>
   13050:	add	r5, r5, #20
   13054:	add	r4, r4, #8
   13058:	cmp	r5, #520	; 0x208
   1305c:	bne	1302c <free_token_boolean_op@@Base+0xd8>
   13060:	bl	19bb4 <__generate_code_for_binary_boolean_expression@@Base+0x1d64>
   13064:	add	sp, sp, #8
   13068:	pop	{r4, r5, r6, lr}
   1306c:	b	1a920 <__generate_code_for_binary_boolean_expression@@Base+0x2ad0>
   13070:	andeq	r8, r0, r0, ror #9
   13074:	andeq	r8, r0, r3, asr r4
   13078:			; <UNDEFINED> instruction: 0x000197b8
   1307c:	andeq	r9, r1, r4, lsr #11
   13080:	push	{fp, lr}
   13084:	bl	12ff0 <free_token_boolean_op@@Base+0x9c>
   13088:	ldr	r0, [pc, #336]	; 131e0 <free_token_boolean_op@@Base+0x28c>
   1308c:	vmov.i32	q8, #0	; 0x00000000
   13090:	mov	r1, #0
   13094:	add	r0, pc, r0
   13098:	vst1.64	{d16-d17}, [r0 :128]
   1309c:	ldr	r0, [pc, #320]	; 131e4 <free_token_boolean_op@@Base+0x290>
   130a0:	add	r0, pc, r0
   130a4:	vst1.64	{d16-d17}, [r0 :128]
   130a8:	ldr	r0, [pc, #312]	; 131e8 <free_token_boolean_op@@Base+0x294>
   130ac:	add	r0, pc, r0
   130b0:	vst1.64	{d16-d17}, [r0 :128]
   130b4:	ldr	r0, [pc, #304]	; 131ec <free_token_boolean_op@@Base+0x298>
   130b8:	add	r0, pc, r0
   130bc:	vst1.64	{d16-d17}, [r0 :128]
   130c0:	ldr	r0, [pc, #296]	; 131f0 <free_token_boolean_op@@Base+0x29c>
   130c4:	add	r0, pc, r0
   130c8:	vst1.64	{d16-d17}, [r0 :128]
   130cc:	ldr	r0, [pc, #288]	; 131f4 <free_token_boolean_op@@Base+0x2a0>
   130d0:	add	r0, pc, r0
   130d4:	vst1.64	{d16-d17}, [r0 :128]
   130d8:	ldr	r0, [pc, #280]	; 131f8 <free_token_boolean_op@@Base+0x2a4>
   130dc:	add	r0, pc, r0
   130e0:	vst1.64	{d16-d17}, [r0 :128]
   130e4:	ldr	r0, [pc, #272]	; 131fc <free_token_boolean_op@@Base+0x2a8>
   130e8:	add	r0, pc, r0
   130ec:	vst1.64	{d16-d17}, [r0 :128]
   130f0:	ldr	r0, [pc, #264]	; 13200 <free_token_boolean_op@@Base+0x2ac>
   130f4:	add	r0, pc, r0
   130f8:	vst1.64	{d16-d17}, [r0 :128]
   130fc:	ldr	r0, [pc, #256]	; 13204 <free_token_boolean_op@@Base+0x2b0>
   13100:	add	r0, pc, r0
   13104:	vst1.64	{d16-d17}, [r0 :128]
   13108:	ldr	r0, [pc, #248]	; 13208 <free_token_boolean_op@@Base+0x2b4>
   1310c:	add	r0, pc, r0
   13110:	vst1.64	{d16-d17}, [r0 :128]
   13114:	ldr	r0, [pc, #240]	; 1320c <free_token_boolean_op@@Base+0x2b8>
   13118:	add	r0, pc, r0
   1311c:	vst1.64	{d16-d17}, [r0 :128]
   13120:	ldr	r0, [pc, #232]	; 13210 <free_token_boolean_op@@Base+0x2bc>
   13124:	add	r0, pc, r0
   13128:	vst1.64	{d16-d17}, [r0 :128]
   1312c:	ldr	r0, [pc, #224]	; 13214 <free_token_boolean_op@@Base+0x2c0>
   13130:	add	r0, pc, r0
   13134:	vst1.64	{d16-d17}, [r0 :128]
   13138:	ldr	r0, [pc, #216]	; 13218 <free_token_boolean_op@@Base+0x2c4>
   1313c:	add	r0, pc, r0
   13140:	vst1.64	{d16-d17}, [r0 :128]
   13144:	ldr	r0, [pc, #208]	; 1321c <free_token_boolean_op@@Base+0x2c8>
   13148:	add	r0, pc, r0
   1314c:	vst1.64	{d16-d17}, [r0 :128]
   13150:	ldr	r0, [pc, #200]	; 13220 <free_token_boolean_op@@Base+0x2cc>
   13154:	add	r0, pc, r0
   13158:	vst1.64	{d16-d17}, [r0 :128]
   1315c:	ldr	r0, [pc, #192]	; 13224 <free_token_boolean_op@@Base+0x2d0>
   13160:	add	r0, pc, r0
   13164:	vst1.64	{d16-d17}, [r0 :128]
   13168:	ldr	r0, [pc, #184]	; 13228 <free_token_boolean_op@@Base+0x2d4>
   1316c:	add	r0, pc, r0
   13170:	vst1.64	{d16-d17}, [r0 :128]
   13174:	ldr	r0, [pc, #176]	; 1322c <free_token_boolean_op@@Base+0x2d8>
   13178:	add	r0, pc, r0
   1317c:	vst1.64	{d16-d17}, [r0 :128]
   13180:	ldr	r0, [pc, #168]	; 13230 <free_token_boolean_op@@Base+0x2dc>
   13184:	add	r0, pc, r0
   13188:	vst1.64	{d16-d17}, [r0 :128]
   1318c:	ldr	r0, [pc, #160]	; 13234 <free_token_boolean_op@@Base+0x2e0>
   13190:	add	r0, pc, r0
   13194:	vst1.64	{d16-d17}, [r0 :128]
   13198:	ldr	r0, [pc, #152]	; 13238 <free_token_boolean_op@@Base+0x2e4>
   1319c:	add	r0, pc, r0
   131a0:	vst1.64	{d16-d17}, [r0 :128]
   131a4:	ldr	r0, [pc, #144]	; 1323c <free_token_boolean_op@@Base+0x2e8>
   131a8:	add	r0, pc, r0
   131ac:	vst1.64	{d16-d17}, [r0 :128]
   131b0:	ldr	r0, [pc, #136]	; 13240 <free_token_boolean_op@@Base+0x2ec>
   131b4:	add	r0, pc, r0
   131b8:	vst1.64	{d16-d17}, [r0 :128]
   131bc:	ldr	r0, [pc, #128]	; 13244 <free_token_boolean_op@@Base+0x2f0>
   131c0:	add	r0, pc, r0
   131c4:	add	r2, r0, #16
   131c8:	str	r1, [r0, #32]
   131cc:	vst1.64	{d16-d17}, [r2 :128]
   131d0:	mov	r2, #36	; 0x24
   131d4:	vst1.64	{d16-d17}, [r0 :128], r2
   131d8:	str	r1, [r0]
   131dc:	pop	{fp, pc}
   131e0:	andeq	sl, r1, r4, ror #2
   131e4:	andeq	sl, r1, r8, asr #2
   131e8:	andeq	sl, r1, ip, asr r1
   131ec:	andeq	sl, r1, r0, ror #2
   131f0:	andeq	sl, r1, r4, ror #2
   131f4:	andeq	sl, r1, r8, ror #2
   131f8:	andeq	sl, r1, ip, ror #2
   131fc:	andeq	sl, r1, r0, ror r1
   13200:	andeq	sl, r1, r4, ror r1
   13204:	andeq	sl, r1, r8, ror r1
   13208:	andeq	sl, r1, ip, ror r1
   1320c:	andeq	sl, r1, r0, lsl #3
   13210:	andeq	sl, r1, r4, lsl #3
   13214:	andeq	sl, r1, r8, lsl #3
   13218:	andeq	sl, r1, ip, lsl #3
   1321c:	muleq	r1, r0, r1
   13220:	muleq	r1, r4, r1
   13224:	muleq	r1, r8, r1
   13228:	muleq	r1, ip, r1
   1322c:	andeq	sl, r1, r0, lsr #3
   13230:	andeq	sl, r1, r4, lsr #3
   13234:	andeq	sl, r1, r8, lsr #3
   13238:	andeq	sl, r1, ip, lsr #3
   1323c:			; <UNDEFINED> instruction: 0x0001a1b0
   13240:			; <UNDEFINED> instruction: 0x0001a1b4
   13244:			; <UNDEFINED> instruction: 0x0001a1b8
   13248:	ldr	r0, [pc, #12]	; 1325c <free_token_boolean_op@@Base+0x308>
   1324c:	ldr	r1, [pc, #12]	; 13260 <free_token_boolean_op@@Base+0x30c>
   13250:	add	r0, pc, r0
   13254:	add	r1, pc, r1
   13258:	b	1add0 <__gcov_flush@@Base+0xb4>
   1325c:			; <UNDEFINED> instruction: 0xfffffd98
   13260:			; <UNDEFINED> instruction: 0xfffffe24
	...

00013270 <init_lexer@@Base>:
   13270:	ldr	r2, [pc, #56]	; 132b0 <init_lexer@@Base+0x40>
   13274:	add	r3, pc, #36	; 0x24
   13278:	vld1.64	{d16-d17}, [r3 :128]
   1327c:	add	r2, pc, r2
   13280:	vld1.64	{d18-d19}, [r2 :128]
   13284:	vadd.i64	q8, q9, q8
   13288:	vst1.64	{d16-d17}, [r2 :128]
   1328c:	mov	r2, #0
   13290:	stm	r0, {r1, r2}
   13294:	str	r2, [r0, #8]
   13298:	bx	lr
   1329c:	nop	{0}
   132a0:	andeq	r0, r0, r1
   132a4:	andeq	r0, r0, r0
   132a8:	andeq	r0, r0, r1
   132ac:	andeq	r0, r0, r0
   132b0:	andeq	sl, r1, ip, lsr #2
   132b4:	nop	{0}
   132b8:	nop	{0}
   132bc:	nop	{0}

000132c0 <destroy_lexer@@Base>:
   132c0:	push	{r4, sl, fp, lr}
   132c4:	add	fp, sp, #8
   132c8:	ldr	r4, [pc, #176]	; 13380 <destroy_lexer@@Base+0xc0>
   132cc:	ldr	r1, [pc, #176]	; 13384 <destroy_lexer@@Base+0xc4>
   132d0:	ldr	r1, [pc, r1]
   132d4:	add	r4, pc, r4
   132d8:	mov	r2, r4
   132dc:	adds	r1, r1, #1
   132e0:	str	r1, [r4]
   132e4:	ldr	r1, [r4, #4]
   132e8:	adc	r1, r1, #0
   132ec:	str	r1, [r4, #4]
   132f0:	mov	r1, #16
   132f4:	ldr	r0, [r0, #4]
   132f8:	cmp	r0, #0
   132fc:	movwne	r1, #8
   13300:	ldr	r1, [r2, r1]!
   13304:	adds	r1, r1, #1
   13308:	str	r1, [r2]
   1330c:	ldr	r1, [r2, #4]
   13310:	adc	r1, r1, #0
   13314:	cmp	r0, #0
   13318:	str	r1, [r2, #4]
   1331c:	beq	13350 <destroy_lexer@@Base+0x90>
   13320:	ldr	r1, [pc, #96]	; 13388 <destroy_lexer@@Base+0xc8>
   13324:	add	r2, pc, #68	; 0x44
   13328:	vld1.64	{d16-d17}, [r2 :128]
   1332c:	ldrd	r2, [r4, #24]
   13330:	add	r1, pc, r1
   13334:	vld1.64	{d18-d19}, [r1 :128]
   13338:	adds	r2, r2, #1
   1333c:	adc	r3, r3, #0
   13340:	strd	r2, [r4, #24]
   13344:	vadd.i64	q8, q9, q8
   13348:	vst1.64	{d16-d17}, [r1 :128]
   1334c:	bl	11ef0 <free@plt>
   13350:	ldrd	r0, [r4, #32]
   13354:	adds	r0, r0, #1
   13358:	adc	r1, r1, #0
   1335c:	strd	r0, [r4, #32]
   13360:	pop	{r4, sl, fp, pc}
   13364:	nop	{0}
   13368:	nop	{0}
   1336c:	nop	{0}
   13370:	andeq	r0, r0, r1
   13374:	andeq	r0, r0, r0
   13378:	andeq	r0, r0, r1
   1337c:	andeq	r0, r0, r0
   13380:	andeq	sl, r1, r4, ror #1
   13384:	andeq	sl, r1, r8, ror #1
   13388:	strheq	sl, [r1], -r8
   1338c:	nop	{0}

00013390 <free_stack_base@@Base>:
   13390:	ldr	r1, [pc, #40]	; 133c0 <free_stack_base@@Base+0x30>
   13394:	add	r2, pc, #20
   13398:	vld1.64	{d16-d17}, [r2 :128]
   1339c:	add	r1, pc, r1
   133a0:	vld1.64	{d18-d19}, [r1 :128]
   133a4:	vadd.i64	q8, q9, q8
   133a8:	vst1.64	{d16-d17}, [r1 :128]
   133ac:	b	11ef0 <free@plt>
   133b0:	andeq	r0, r0, r1
   133b4:	andeq	r0, r0, r0
   133b8:	andeq	r0, r0, r1
   133bc:	andeq	r0, r0, r0
   133c0:	andeq	sl, r1, ip, asr #32
   133c4:	nop	{0}
   133c8:	nop	{0}
   133cc:	nop	{0}

000133d0 <push_back@@Base>:
   133d0:	push	{r4, r5, fp, lr}
   133d4:	add	fp, sp, #8
   133d8:	mov	r5, r0
   133dc:	ldr	r0, [pc, #76]	; 13430 <push_back@@Base+0x60>
   133e0:	mov	r4, r1
   133e4:	add	r1, pc, #52	; 0x34
   133e8:	vld1.64	{d16-d17}, [r1 :128]
   133ec:	add	r0, pc, r0
   133f0:	vld1.64	{d18-d19}, [r0 :128]
   133f4:	vadd.i64	q8, q9, q8
   133f8:	vst1.64	{d16-d17}, [r0 :128]
   133fc:	mov	r0, #8
   13400:	bl	11f68 <malloc@plt>
   13404:	ldr	r1, [r5, #4]
   13408:	stm	r0, {r1, r4}
   1340c:	str	r0, [r5, #4]
   13410:	pop	{r4, r5, fp, pc}
   13414:	nop	{0}
   13418:	nop	{0}
   1341c:	nop	{0}
   13420:	andeq	r0, r0, r1
   13424:	andeq	r0, r0, r0
   13428:	andeq	r0, r0, r1
   1342c:	andeq	r0, r0, r0
   13430:	andeq	sl, r1, ip
   13434:	nop	{0}
   13438:	nop	{0}
   1343c:	nop	{0}

00013440 <get_char@@Base>:
   13440:	ldr	r1, [pc, #72]	; 13490 <get_char@@Base+0x50>
   13444:	add	r2, pc, #52	; 0x34
   13448:	vld1.64	{d16-d17}, [r2 :128]
   1344c:	add	r1, pc, r1
   13450:	vld1.64	{d18-d19}, [r1 :128]
   13454:	vadd.i64	q8, q9, q8
   13458:	vst1.64	{d16-d17}, [r1 :128]
   1345c:	ldr	r2, [r0, #8]
   13460:	ldr	r1, [r0]
   13464:	add	r3, r2, #1
   13468:	str	r3, [r0, #8]
   1346c:	ldrb	r0, [r1, r2]
   13470:	bx	lr
   13474:	nop	{0}
   13478:	nop	{0}
   1347c:	nop	{0}
   13480:	andeq	r0, r0, r1
   13484:	andeq	r0, r0, r0
   13488:	andeq	r0, r0, r1
   1348c:	andeq	r0, r0, r0
   13490:			; <UNDEFINED> instruction: 0x00019fbc

00013494 <push_back_chars@@Base>:
   13494:	push	{fp, lr}
   13498:	mov	fp, sp
   1349c:	ldr	ip, [pc, #148]	; 13538 <push_back_chars@@Base+0xa4>
   134a0:	ldr	r3, [pc, #148]	; 1353c <push_back_chars@@Base+0xa8>
   134a4:	mov	r2, #16
   134a8:	ldr	r3, [pc, r3]
   134ac:	add	ip, pc, ip
   134b0:	adds	r3, r3, #1
   134b4:	str	r3, [ip]
   134b8:	ldr	r3, [ip, #4]
   134bc:	adc	r3, r3, #0
   134c0:	str	r3, [ip, #4]
   134c4:	mov	r3, ip
   134c8:	ldr	lr, [r0, #8]
   134cc:	cmp	lr, r1
   134d0:	movwcs	r2, #8
   134d4:	ldr	r2, [r3, r2]!
   134d8:	adds	r2, r2, #1
   134dc:	str	r2, [r3]
   134e0:	ldr	r2, [r3, #4]
   134e4:	adc	r2, r2, #0
   134e8:	cmp	lr, r1
   134ec:	str	r2, [r3, #4]
   134f0:	bcc	13510 <push_back_chars@@Base+0x7c>
   134f4:	ldrd	r2, [ip, #24]
   134f8:	sub	r1, lr, r1
   134fc:	adds	r2, r2, #1
   13500:	adc	r3, r3, #0
   13504:	strd	r2, [ip, #24]
   13508:	str	r1, [r0, #8]
   1350c:	pop	{fp, pc}
   13510:	ldr	r0, [pc, #40]	; 13540 <push_back_chars@@Base+0xac>
   13514:	mov	r1, #32
   13518:	mov	r2, #1
   1351c:	ldr	r0, [pc, r0]
   13520:	ldr	r3, [r0]
   13524:	ldr	r0, [pc, #24]	; 13544 <push_back_chars@@Base+0xb0>
   13528:	add	r0, pc, r0
   1352c:	bl	11f44 <fwrite@plt>
   13530:	mov	r0, #1
   13534:	bl	11fa4 <exit@plt>
   13538:	andeq	r9, r1, ip, ror #30
   1353c:	andeq	r9, r1, r0, ror pc
   13540:	muleq	r1, ip, fp
   13544:	andeq	r8, r0, r0, lsl #5
   13548:	nop	{0}
   1354c:	nop	{0}

00013550 <push_back_one_char@@Base>:
   13550:	push	{r4, r5, fp, lr}
   13554:	add	fp, sp, #8
   13558:	ldr	r2, [pc, #192]	; 13620 <push_back_one_char@@Base+0xd0>
   1355c:	add	r1, pc, #172	; 0xac
   13560:	vld1.64	{d16-d17}, [r1 :128]
   13564:	add	r2, pc, r2
   13568:	vld1.64	{d18-d19}, [r2 :128]
   1356c:	ldr	ip, [pc, #176]	; 13624 <push_back_one_char@@Base+0xd4>
   13570:	ldr	r3, [pc, #176]	; 13628 <push_back_one_char@@Base+0xd8>
   13574:	ldr	r3, [pc, r3]
   13578:	add	ip, pc, ip
   1357c:	vadd.i64	q8, q9, q8
   13580:	vst1.64	{d16-d17}, [r2 :128]
   13584:	mov	r1, ip
   13588:	adds	r3, r3, #1
   1358c:	str	r3, [ip]
   13590:	ldr	r3, [ip, #4]
   13594:	adc	r3, r3, #0
   13598:	str	r3, [ip, #4]
   1359c:	mov	r3, #16
   135a0:	ldr	r2, [r0, #8]
   135a4:	cmp	r2, #0
   135a8:	movwne	r3, #8
   135ac:	ldr	r3, [r1, r3]!
   135b0:	adds	r3, r3, #1
   135b4:	str	r3, [r1]
   135b8:	ldr	r3, [r1, #4]
   135bc:	adc	r3, r3, #0
   135c0:	cmp	r2, #0
   135c4:	str	r3, [r1, #4]
   135c8:	beq	135e8 <push_back_one_char@@Base+0x98>
   135cc:	ldrd	r4, [ip, #24]
   135d0:	sub	r1, r2, #1
   135d4:	adds	r4, r4, #1
   135d8:	adc	r5, r5, #0
   135dc:	strd	r4, [ip, #24]
   135e0:	str	r1, [r0, #8]
   135e4:	pop	{r4, r5, fp, pc}
   135e8:	ldr	r0, [pc, #60]	; 1362c <push_back_one_char@@Base+0xdc>
   135ec:	mov	r1, #32
   135f0:	mov	r2, #1
   135f4:	ldr	r0, [pc, r0]
   135f8:	ldr	r3, [r0]
   135fc:	ldr	r0, [pc, #44]	; 13630 <push_back_one_char@@Base+0xe0>
   13600:	add	r0, pc, r0
   13604:	bl	11f44 <fwrite@plt>
   13608:	mov	r0, #1
   1360c:	bl	11fa4 <exit@plt>
   13610:	andeq	r0, r0, r1
   13614:	andeq	r0, r0, r0
   13618:	andeq	r0, r0, r1
   1361c:	andeq	r0, r0, r0
   13620:	ldrdeq	r9, [r1], -r4
   13624:	andeq	r9, r1, r0, lsr #29
   13628:	andeq	r9, r1, r4, lsr #29
   1362c:	andeq	r9, r1, r4, asr #21
   13630:	andeq	r8, r0, r8, lsr #3
   13634:	nop	{0}
   13638:	nop	{0}
   1363c:	nop	{0}

00013640 <next@@Base>:
   13640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13644:	add	fp, sp, #28
   13648:	sub	sp, sp, #524	; 0x20c
   1364c:	ldr	r7, [pc, #4008]	; 145fc <next@@Base+0xfbc>
   13650:	mov	r4, r0
   13654:	ldr	r0, [pc, #4004]	; 14600 <next@@Base+0xfc0>
   13658:	mov	r1, #16
   1365c:	ldr	r0, [pc, r0]
   13660:	add	r7, pc, r7
   13664:	mov	r2, r7
   13668:	adds	r0, r0, #1
   1366c:	str	r0, [r7]
   13670:	ldr	r0, [r7, #4]
   13674:	adc	r0, r0, #0
   13678:	str	r0, [r7, #4]
   1367c:	ldr	r0, [r4, #4]
   13680:	cmp	r0, #0
   13684:	movwne	r1, #8
   13688:	ldr	r1, [r2, r1]!
   1368c:	adds	r1, r1, #1
   13690:	str	r1, [r2]
   13694:	ldr	r1, [r2, #4]
   13698:	adc	r1, r1, #0
   1369c:	cmp	r0, #0
   136a0:	str	r1, [r2, #4]
   136a4:	beq	13700 <next@@Base+0xc0>
   136a8:	ldrd	r2, [r7, #24]
   136ac:	adds	r2, r2, #1
   136b0:	adc	r3, r3, #0
   136b4:	strd	r2, [r7, #24]
   136b8:	ldr	r1, [r0]
   136bc:	str	r1, [r4, #4]
   136c0:	mov	r1, #0
   136c4:	ldr	r6, [r0, #4]
   136c8:	str	r1, [r0, #4]
   136cc:	ldr	r1, [pc, #3888]	; 14604 <next@@Base+0xfc4>
   136d0:	add	r2, pc, #24
   136d4:	vld1.64	{d16-d17}, [r2 :128]
   136d8:	add	r1, pc, r1
   136dc:	vld1.64	{d18-d19}, [r1 :128]
   136e0:	vadd.i64	q8, q9, q8
   136e4:	vst1.64	{d16-d17}, [r1 :128]
   136e8:	bl	11ef0 <free@plt>
   136ec:	b	13c8c <next@@Base+0x64c>
   136f0:	andeq	r0, r0, r1
   136f4:	andeq	r0, r0, r0
   136f8:	andeq	r0, r0, r1
   136fc:	andeq	r0, r0, r0
   13700:	ldr	r5, [pc, #3840]	; 14608 <next@@Base+0xfc8>
   13704:	sub	r0, pc, #28
   13708:	vld1.64	{d16-d17}, [r0 :128]
   1370c:	ldrd	r0, [r7, #32]
   13710:	add	r5, pc, r5
   13714:	vld1.64	{d18-d19}, [r5 :128]
   13718:	adds	r0, r0, #1
   1371c:	adc	r1, r1, #0
   13720:	strd	r0, [r7, #32]
   13724:	vadd.i64	q8, q9, q8
   13728:	vst1.64	{d16-d17}, [r5 :128]
   1372c:	ldr	r1, [r4, #8]
   13730:	ldr	r0, [r4]
   13734:	add	r2, r1, #1
   13738:	str	r2, [r4, #8]
   1373c:	ldrb	r8, [r0, r1]
   13740:	mov	r0, #48	; 0x30
   13744:	mov	r1, r7
   13748:	cmp	r8, #0
   1374c:	movwne	r0, #40	; 0x28
   13750:	ldr	r0, [r1, r0]!
   13754:	adds	r0, r0, #1
   13758:	str	r0, [r1]
   1375c:	ldr	r0, [r1, #4]
   13760:	adc	r0, r0, #0
   13764:	cmp	r8, #0
   13768:	str	r0, [r1, #4]
   1376c:	beq	13c64 <next@@Base+0x624>
   13770:	ldr	r6, [pc, #3732]	; 1460c <next@@Base+0xfcc>
   13774:	mov	r0, #0
   13778:	mov	r9, #0
   1377c:	mov	sl, #0
   13780:	str	r0, [sp, #4]
   13784:	add	r6, pc, r6
   13788:	b	13afc <next@@Base+0x4bc>
   1378c:	cmp	r2, #48	; 0x30
   13790:	mov	r0, #176	; 0xb0
   13794:	mov	r1, r7
   13798:	ldr	sl, [sp, #4]
   1379c:	movweq	r0, #168	; 0xa8
   137a0:	ldr	r0, [r1, r0]!
   137a4:	adds	r0, r0, #1
   137a8:	str	r0, [r1]
   137ac:	ldr	r0, [r1, #4]
   137b0:	adc	r0, r0, #0
   137b4:	cmp	r2, #48	; 0x30
   137b8:	str	r0, [r1, #4]
   137bc:	beq	144a0 <next@@Base+0xe60>
   137c0:	mov	r0, #200	; 0xc8
   137c4:	mov	r1, r7
   137c8:	movwhi	r0, #192	; 0xc0
   137cc:	ldr	r0, [r1, r0]!
   137d0:	adds	r0, r0, #1
   137d4:	str	r0, [r1]
   137d8:	ldr	r0, [r1, #4]
   137dc:	adc	r0, r0, #0
   137e0:	cmp	r2, #49	; 0x31
   137e4:	str	r0, [r1, #4]
   137e8:	bcc	144c8 <next@@Base+0xe88>
   137ec:	cmp	r2, #58	; 0x3a
   137f0:	mov	r0, #216	; 0xd8
   137f4:	mov	r1, r7
   137f8:	movwcc	r0, #208	; 0xd0
   137fc:	ldr	r0, [r1, r0]!
   13800:	adds	r0, r0, #1
   13804:	str	r0, [r1]
   13808:	ldr	r0, [r1, #4]
   1380c:	adc	r0, r0, #0
   13810:	cmp	r2, #57	; 0x39
   13814:	str	r0, [r1, #4]
   13818:	bhi	13858 <next@@Base+0x218>
   1381c:	sub	r0, pc, #308	; 0x134
   13820:	vld1.64	{d18-d19}, [r5 :128]
   13824:	vld1.64	{d16-d17}, [r0 :128]
   13828:	add	r0, sp, #8
   1382c:	strb	r8, [r0, sl]
   13830:	ldrd	r0, [r7, #224]	; 0xe0
   13834:	add	sl, sl, #1
   13838:	str	sl, [sp, #4]
   1383c:	mov	sl, #1
   13840:	vadd.i64	q8, q9, q8
   13844:	adds	r0, r0, #1
   13848:	vst1.64	{d16-d17}, [r5 :128]
   1384c:	adc	r1, r1, #0
   13850:	strd	r0, [r7, #224]	; 0xe0
   13854:	b	13bf8 <next@@Base+0x5b8>
   13858:	ldrd	r0, [r7, #240]	; 0xf0
   1385c:	ldr	r3, [r7, #264]	; 0x108
   13860:	mov	ip, r5
   13864:	ldr	r5, [r7, #268]	; 0x10c
   13868:	adds	r0, r0, #1
   1386c:	adc	r1, r1, #0
   13870:	adds	r3, r3, #1
   13874:	str	r3, [r7, #264]	; 0x108
   13878:	strd	r0, [r7, #240]	; 0xf0
   1387c:	adc	r0, r5, #0
   13880:	cmp	r2, #123	; 0x7b
   13884:	mov	r1, r7
   13888:	str	r0, [r7, #268]	; 0x10c
   1388c:	mov	r0, #288	; 0x120
   13890:	movweq	r0, #280	; 0x118
   13894:	ldr	r0, [r1, r0]!
   13898:	adds	r0, r0, #1
   1389c:	str	r0, [r1]
   138a0:	ldr	r0, [r1, #4]
   138a4:	adc	r0, r0, #0
   138a8:	cmp	r2, #123	; 0x7b
   138ac:	str	r0, [r1, #4]
   138b0:	beq	14578 <next@@Base+0xf38>
   138b4:	cmp	r2, #125	; 0x7d
   138b8:	mov	r0, #312	; 0x138
   138bc:	mov	r1, r7
   138c0:	movweq	r0, #304	; 0x130
   138c4:	ldr	r0, [r1, r0]!
   138c8:	adds	r0, r0, #1
   138cc:	str	r0, [r1]
   138d0:	ldr	r0, [r1, #4]
   138d4:	adc	r0, r0, #0
   138d8:	cmp	r2, #125	; 0x7d
   138dc:	str	r0, [r1, #4]
   138e0:	beq	145a4 <next@@Base+0xf64>
   138e4:	cmp	r2, #59	; 0x3b
   138e8:	mov	r0, #336	; 0x150
   138ec:	mov	r1, r7
   138f0:	movweq	r0, #328	; 0x148
   138f4:	ldr	r0, [r1, r0]!
   138f8:	adds	r0, r0, #1
   138fc:	str	r0, [r1]
   13900:	ldr	r0, [r1, #4]
   13904:	adc	r0, r0, #0
   13908:	cmp	r2, #59	; 0x3b
   1390c:	str	r0, [r1, #4]
   13910:	beq	145d0 <next@@Base+0xf90>
   13914:	cmp	r2, #101	; 0x65
   13918:	mov	r0, #360	; 0x168
   1391c:	mov	r1, r7
   13920:	movweq	r0, #352	; 0x160
   13924:	ldr	r0, [r1, r0]!
   13928:	adds	r0, r0, #1
   1392c:	str	r0, [r1]
   13930:	ldr	r0, [r1, #4]
   13934:	adc	r0, r0, #0
   13938:	cmp	r2, #101	; 0x65
   1393c:	str	r0, [r1, #4]
   13940:	bne	13990 <next@@Base+0x350>
   13944:	sub	r0, pc, #604	; 0x25c
   13948:	mov	r1, #101	; 0x65
   1394c:	vld1.64	{d18-d19}, [ip :128]
   13950:	mov	r5, ip
   13954:	vld1.64	{d16-d17}, [r0 :128]
   13958:	add	r0, sp, #8
   1395c:	strb	r1, [r0, sl]
   13960:	ldr	r0, [r7, #368]	; 0x170
   13964:	ldr	r1, [r7, #372]	; 0x174
   13968:	add	sl, sl, #1
   1396c:	str	sl, [sp, #4]
   13970:	mov	sl, #5
   13974:	vadd.i64	q8, q9, q8
   13978:	adds	r0, r0, #1
   1397c:	vst1.64	{d16-d17}, [r5 :128]
   13980:	adc	r1, r1, #0
   13984:	str	r0, [r7, #368]	; 0x170
   13988:	str	r1, [r7, #372]	; 0x174
   1398c:	b	13bf8 <next@@Base+0x5b8>
   13990:	cmp	r2, #105	; 0x69
   13994:	mov	r0, #384	; 0x180
   13998:	mov	r1, r7
   1399c:	mov	r5, ip
   139a0:	movweq	r0, #376	; 0x178
   139a4:	ldr	r0, [r1, r0]!
   139a8:	adds	r0, r0, #1
   139ac:	str	r0, [r1]
   139b0:	ldr	r0, [r1, #4]
   139b4:	adc	r0, r0, #0
   139b8:	cmp	r2, #105	; 0x69
   139bc:	str	r0, [r1, #4]
   139c0:	bne	13a0c <next@@Base+0x3cc>
   139c4:	sub	r0, pc, #732	; 0x2dc
   139c8:	mov	r1, #105	; 0x69
   139cc:	vld1.64	{d18-d19}, [r5 :128]
   139d0:	vld1.64	{d16-d17}, [r0 :128]
   139d4:	add	r0, sp, #8
   139d8:	strb	r1, [r0, sl]
   139dc:	ldr	r0, [r7, #392]	; 0x188
   139e0:	ldr	r1, [r7, #396]	; 0x18c
   139e4:	add	sl, sl, #1
   139e8:	str	sl, [sp, #4]
   139ec:	mov	sl, #2
   139f0:	vadd.i64	q8, q9, q8
   139f4:	adds	r0, r0, #1
   139f8:	vst1.64	{d16-d17}, [r5 :128]
   139fc:	adc	r1, r1, #0
   13a00:	str	r0, [r7, #392]	; 0x188
   13a04:	str	r1, [r7, #396]	; 0x18c
   13a08:	b	13bf8 <next@@Base+0x5b8>
   13a0c:	cmp	r2, #109	; 0x6d
   13a10:	mov	r0, #408	; 0x198
   13a14:	mov	r1, r7
   13a18:	movweq	r0, #400	; 0x190
   13a1c:	ldr	r0, [r1, r0]!
   13a20:	adds	r0, r0, #1
   13a24:	str	r0, [r1]
   13a28:	ldr	r0, [r1, #4]
   13a2c:	adc	r0, r0, #0
   13a30:	cmp	r2, #109	; 0x6d
   13a34:	str	r0, [r1, #4]
   13a38:	bne	13a84 <next@@Base+0x444>
   13a3c:	sub	r0, pc, #852	; 0x354
   13a40:	mov	r1, #109	; 0x6d
   13a44:	vld1.64	{d18-d19}, [r5 :128]
   13a48:	vld1.64	{d16-d17}, [r0 :128]
   13a4c:	add	r0, sp, #8
   13a50:	strb	r1, [r0, sl]
   13a54:	ldr	r0, [r7, #416]	; 0x1a0
   13a58:	ldr	r1, [r7, #420]	; 0x1a4
   13a5c:	add	sl, sl, #1
   13a60:	str	sl, [sp, #4]
   13a64:	mov	sl, #3
   13a68:	vadd.i64	q8, q9, q8
   13a6c:	adds	r0, r0, #1
   13a70:	vst1.64	{d16-d17}, [r5 :128]
   13a74:	adc	r1, r1, #0
   13a78:	str	r0, [r7, #416]	; 0x1a0
   13a7c:	str	r1, [r7, #420]	; 0x1a4
   13a80:	b	13bf8 <next@@Base+0x5b8>
   13a84:	cmp	r2, #114	; 0x72
   13a88:	mov	r0, #432	; 0x1b0
   13a8c:	mov	r1, r7
   13a90:	movweq	r0, #424	; 0x1a8
   13a94:	ldr	r0, [r1, r0]!
   13a98:	adds	r0, r0, #1
   13a9c:	str	r0, [r1]
   13aa0:	ldr	r0, [r1, #4]
   13aa4:	adc	r0, r0, #0
   13aa8:	cmp	r2, #114	; 0x72
   13aac:	str	r0, [r1, #4]
   13ab0:	bne	149bc <next@@Base+0x137c>
   13ab4:	sub	r0, pc, #972	; 0x3cc
   13ab8:	mov	r1, #114	; 0x72
   13abc:	vld1.64	{d18-d19}, [r5 :128]
   13ac0:	vld1.64	{d16-d17}, [r0 :128]
   13ac4:	add	r0, sp, #8
   13ac8:	strb	r1, [r0, sl]
   13acc:	ldr	r0, [r7, #440]	; 0x1b8
   13ad0:	ldr	r1, [r7, #444]	; 0x1bc
   13ad4:	add	sl, sl, #1
   13ad8:	str	sl, [sp, #4]
   13adc:	mov	sl, #4
   13ae0:	vadd.i64	q8, q9, q8
   13ae4:	adds	r0, r0, #1
   13ae8:	vst1.64	{d16-d17}, [r5 :128]
   13aec:	adc	r1, r1, #0
   13af0:	str	r0, [r7, #440]	; 0x1b8
   13af4:	str	r1, [r7, #444]	; 0x1bc
   13af8:	b	13bf8 <next@@Base+0x5b8>
   13afc:	ldr	r0, [pc, #3764]	; 149b8 <next@@Base+0x1378>
   13b00:	cmp	sl, #5
   13b04:	add	r0, pc, r0
   13b08:	str	r9, [r0]
   13b0c:	bhi	13c10 <next@@Base+0x5d0>
   13b10:	add	r0, pc, #4
   13b14:	ldr	r1, [r0, sl, lsl #2]
   13b18:	add	pc, r0, r1
   13b1c:	andeq	r0, r0, r8, lsl r0
   13b20:	muleq	r0, r4, r1
   13b24:	andeq	r0, r0, ip, lsr #14
   13b28:	andeq	r0, r0, r4, ror r3
   13b2c:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13b30:	strdeq	r0, [r0], -r4
   13b34:	add	r0, r6, #8
   13b38:	bl	14e00 <next@@Base+0x17c0>
   13b3c:	uxtb	r2, r8
   13b40:	mov	r0, #120	; 0x78
   13b44:	mov	r1, r7
   13b48:	cmp	r2, #9
   13b4c:	movweq	r0, #112	; 0x70
   13b50:	ldr	r0, [r1, r0]!
   13b54:	adds	r0, r0, #1
   13b58:	str	r0, [r1]
   13b5c:	ldr	r0, [r1, #4]
   13b60:	adc	r0, r0, #0
   13b64:	cmp	r2, #9
   13b68:	str	r0, [r1, #4]
   13b6c:	beq	13bd0 <next@@Base+0x590>
   13b70:	cmp	r2, #32
   13b74:	mov	r0, #136	; 0x88
   13b78:	mov	r1, r7
   13b7c:	movweq	r0, #128	; 0x80
   13b80:	ldr	r0, [r1, r0]!
   13b84:	adds	r0, r0, #1
   13b88:	str	r0, [r1]
   13b8c:	ldr	r0, [r1, #4]
   13b90:	adc	r0, r0, #0
   13b94:	cmp	r2, #32
   13b98:	str	r0, [r1, #4]
   13b9c:	beq	13bd0 <next@@Base+0x590>
   13ba0:	cmp	r2, #10
   13ba4:	mov	r0, #152	; 0x98
   13ba8:	mov	r1, r7
   13bac:	movweq	r0, #144	; 0x90
   13bb0:	ldr	r0, [r1, r0]!
   13bb4:	adds	r0, r0, #1
   13bb8:	str	r0, [r1]
   13bbc:	ldr	r0, [r1, #4]
   13bc0:	adc	r0, r0, #0
   13bc4:	cmp	r2, #10
   13bc8:	str	r0, [r1, #4]
   13bcc:	bne	1378c <next@@Base+0x14c>
   13bd0:	add	r0, pc, #680	; 0x2a8
   13bd4:	vld1.64	{d18-d19}, [r5 :128]
   13bd8:	mov	sl, #0
   13bdc:	vld1.64	{d16-d17}, [r0 :128]
   13be0:	ldrd	r0, [r7, #160]	; 0xa0
   13be4:	adds	r0, r0, #1
   13be8:	vadd.i64	q8, q9, q8
   13bec:	adc	r1, r1, #0
   13bf0:	vst1.64	{d16-d17}, [r5 :128]
   13bf4:	strd	r0, [r7, #160]	; 0xa0
   13bf8:	ldr	r1, [r4, #8]
   13bfc:	ldr	r0, [r4]
   13c00:	add	r2, r1, #1
   13c04:	add	r0, r0, r1
   13c08:	str	r2, [r4, #8]
   13c0c:	ldrb	r8, [r0]
   13c10:	mov	r0, r6
   13c14:	bl	14e00 <next@@Base+0x17c0>
   13c18:	ldr	r0, [r7, #984]	; 0x3d8
   13c1c:	ldr	r1, [r7, #988]	; 0x3dc
   13c20:	mov	r2, r7
   13c24:	adds	r0, r0, #1
   13c28:	adc	r1, r1, #0
   13c2c:	str	r0, [r7, #984]	; 0x3d8
   13c30:	uxtb	r0, r8
   13c34:	str	r1, [r7, #988]	; 0x3dc
   13c38:	cmp	r0, #0
   13c3c:	mov	r1, #48	; 0x30
   13c40:	movwne	r1, #40	; 0x28
   13c44:	ldr	r1, [r2, r1]!
   13c48:	adds	r1, r1, #1
   13c4c:	str	r1, [r2]
   13c50:	ldr	r1, [r2, #4]
   13c54:	adc	r1, r1, #0
   13c58:	cmp	r0, #0
   13c5c:	str	r1, [r2, #4]
   13c60:	bne	13afc <next@@Base+0x4bc>
   13c64:	ldr	r0, [r7, #992]	; 0x3e0
   13c68:	ldr	r1, [r7, #996]	; 0x3e4
   13c6c:	adds	r0, r0, #1
   13c70:	adc	r1, r1, #0
   13c74:	str	r0, [r7, #992]	; 0x3e0
   13c78:	mov	r0, #4
   13c7c:	str	r1, [r7, #996]	; 0x3e4
   13c80:	bl	11f68 <malloc@plt>
   13c84:	mov	r6, r0
   13c88:	bl	12b20 <init_token_eof@@Base>
   13c8c:	ldr	r0, [r7, #1000]	; 0x3e8
   13c90:	ldr	r1, [r7, #1004]	; 0x3ec
   13c94:	adds	r0, r0, #1
   13c98:	adc	r1, r1, #0
   13c9c:	str	r0, [r7, #1000]	; 0x3e8
   13ca0:	mov	r0, r6
   13ca4:	str	r1, [r7, #1004]	; 0x3ec
   13ca8:	sub	sp, fp, #28
   13cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cb0:	add	sl, r6, #16
   13cb4:	mov	r0, sl
   13cb8:	bl	14e00 <next@@Base+0x17c0>
   13cbc:	sub	r0, r8, #48	; 0x30
   13cc0:	mov	r1, #704	; 0x2c0
   13cc4:	mov	r2, r7
   13cc8:	ldr	r6, [sp, #4]
   13ccc:	add	r9, sp, #8
   13cd0:	uxtb	r0, r0
   13cd4:	cmp	r0, #10
   13cd8:	movwcc	r1, #696	; 0x2b8
   13cdc:	ldr	r1, [r2, r1]!
   13ce0:	adds	r1, r1, #1
   13ce4:	str	r1, [r2]
   13ce8:	ldr	r1, [r2, #4]
   13cec:	adc	r1, r1, #0
   13cf0:	cmp	r0, #9
   13cf4:	str	r1, [r2, #4]
   13cf8:	bhi	13d84 <next@@Base+0x744>
   13cfc:	add	r0, pc, #380	; 0x17c
   13d00:	vld1.64	{d18-d19}, [r5 :128]
   13d04:	ldr	r1, [r7, #716]	; 0x2cc
   13d08:	strb	r8, [r9, r6]
   13d0c:	vld1.64	{d16-d17}, [r0 :128]
   13d10:	ldr	r0, [r7, #712]	; 0x2c8
   13d14:	adds	r0, r0, #1
   13d18:	vadd.i64	q8, q9, q8
   13d1c:	adc	r1, r1, #0
   13d20:	vst1.64	{d16-d17}, [r5 :128]
   13d24:	str	r0, [r7, #712]	; 0x2c8
   13d28:	str	r1, [r7, #716]	; 0x2cc
   13d2c:	ldr	r1, [r4, #8]
   13d30:	ldr	r0, [r4]
   13d34:	add	r2, r1, #1
   13d38:	str	r2, [r4, #8]
   13d3c:	ldrb	r8, [r0, r1]
   13d40:	mov	r0, sl
   13d44:	bl	14e00 <next@@Base+0x17c0>
   13d48:	sub	r0, r8, #48	; 0x30
   13d4c:	mov	r1, #704	; 0x2c0
   13d50:	mov	r2, r7
   13d54:	add	r6, r6, #1
   13d58:	uxtb	r0, r0
   13d5c:	cmp	r0, #10
   13d60:	movwcc	r1, #696	; 0x2b8
   13d64:	ldr	r1, [r2, r1]!
   13d68:	adds	r1, r1, #1
   13d6c:	str	r1, [r2]
   13d70:	ldr	r1, [r2, #4]
   13d74:	adc	r1, r1, #0
   13d78:	cmp	r0, #10
   13d7c:	str	r1, [r2, #4]
   13d80:	bcc	13cfc <next@@Base+0x6bc>
   13d84:	ldr	r1, [pc, #4072]	; 14d74 <next@@Base+0x1734>
   13d88:	add	r0, pc, #240	; 0xf0
   13d8c:	vld1.64	{d16-d17}, [r0 :128]
   13d90:	add	r1, pc, r1
   13d94:	vld1.64	{d18-d19}, [r1 :128]
   13d98:	ldr	r0, [pc, #4056]	; 14d78 <next@@Base+0x1738>
   13d9c:	ldr	r2, [pc, #4056]	; 14d7c <next@@Base+0x173c>
   13da0:	ldr	r2, [pc, r2]
   13da4:	add	r0, pc, r0
   13da8:	ldr	r3, [r7, #720]	; 0x2d0
   13dac:	ldr	r5, [r7, #724]	; 0x2d4
   13db0:	vadd.i64	q8, q9, q8
   13db4:	vst1.64	{d16-d17}, [r1 :128]
   13db8:	adds	r2, r2, #1
   13dbc:	str	r2, [r0]
   13dc0:	ldr	r2, [r0, #4]
   13dc4:	adc	r2, r2, #0
   13dc8:	adds	r3, r3, #1
   13dcc:	adc	r1, r5, #0
   13dd0:	str	r2, [r0, #4]
   13dd4:	str	r3, [r7, #720]	; 0x2d0
   13dd8:	mov	r2, #16
   13ddc:	mov	r3, r0
   13de0:	str	r1, [r7, #724]	; 0x2d4
   13de4:	ldr	r1, [r4, #8]
   13de8:	cmp	r1, #0
   13dec:	movwne	r2, #8
   13df0:	ldr	r2, [r3, r2]!
   13df4:	adds	r2, r2, #1
   13df8:	str	r2, [r3]
   13dfc:	ldr	r2, [r3, #4]
   13e00:	adc	r2, r2, #0
   13e04:	cmp	r1, #0
   13e08:	str	r2, [r3, #4]
   13e0c:	beq	14d3c <next@@Base+0x16fc>
   13e10:	ldrd	r2, [r0, #24]
   13e14:	adds	r2, r2, #1
   13e18:	adc	r3, r3, #0
   13e1c:	strd	r2, [r0, #24]
   13e20:	sub	r0, r1, #1
   13e24:	str	r0, [r4, #8]
   13e28:	mov	r0, #0
   13e2c:	strb	r0, [r9, r6]
   13e30:	mov	r0, #8
   13e34:	bl	11f68 <malloc@plt>
   13e38:	mov	r6, r0
   13e3c:	ldr	r0, [pc, #3980]	; 14dd0 <next@@Base+0x1790>
   13e40:	add	r1, pc, #56	; 0x38
   13e44:	mov	r2, #10
   13e48:	vld1.64	{d16-d17}, [r1 :128]
   13e4c:	mov	r1, #0
   13e50:	add	r0, pc, r0
   13e54:	vld1.64	{d18-d19}, [r0 :128]
   13e58:	vadd.i64	q8, q9, q8
   13e5c:	vst1.64	{d16-d17}, [r0 :128]
   13e60:	mov	r0, r9
   13e64:	bl	11ecc <strtol@plt>
   13e68:	mov	r1, r0
   13e6c:	mov	r0, r6
   13e70:	bl	128a0 <init_token_int_value@@Base>
   13e74:	b	13c8c <next@@Base+0x64c>
   13e78:	nop	{0}
   13e7c:	nop	{0}
   13e80:	andeq	r0, r0, r1
   13e84:	andeq	r0, r0, r0
   13e88:	andeq	r0, r0, r1
   13e8c:	andeq	r0, r0, r0
   13e90:	add	r0, r6, #32
   13e94:	bl	14e00 <next@@Base+0x17c0>
   13e98:	uxtb	r0, r8
   13e9c:	mov	r1, #792	; 0x318
   13ea0:	mov	r2, r7
   13ea4:	ldr	r6, [sp, #4]
   13ea8:	cmp	r0, #97	; 0x61
   13eac:	movwne	r1, #784	; 0x310
   13eb0:	ldr	r1, [r2, r1]!
   13eb4:	adds	r1, r1, #1
   13eb8:	str	r1, [r2]
   13ebc:	ldr	r1, [r2, #4]
   13ec0:	adc	r1, r1, #0
   13ec4:	cmp	r0, #97	; 0x61
   13ec8:	str	r1, [r2, #4]
   13ecc:	bne	14d5c <next@@Base+0x171c>
   13ed0:	sub	r0, pc, #88	; 0x58
   13ed4:	vld1.64	{d16-d17}, [r5 :128]
   13ed8:	add	r8, sp, #8
   13edc:	vld1.64	{d18-d19}, [r0 :128]
   13ee0:	mov	r0, #97	; 0x61
   13ee4:	strb	r0, [r8, r6]
   13ee8:	vadd.i64	q9, q8, q9
   13eec:	vst1.64	{d18-d19}, [r5 :128]
   13ef0:	ldr	r1, [r4, #8]
   13ef4:	ldr	r0, [r4]
   13ef8:	add	r2, r1, #1
   13efc:	str	r2, [r4, #8]
   13f00:	mov	r2, r7
   13f04:	ldrb	r0, [r0, r1]
   13f08:	mov	r1, #808	; 0x328
   13f0c:	cmp	r0, #105	; 0x69
   13f10:	movwne	r1, #800	; 0x320
   13f14:	ldr	r1, [r2, r1]!
   13f18:	adds	r1, r1, #1
   13f1c:	str	r1, [r2]
   13f20:	ldr	r1, [r2, #4]
   13f24:	adc	r1, r1, #0
   13f28:	cmp	r0, #105	; 0x69
   13f2c:	str	r1, [r2, #4]
   13f30:	bne	14d5c <next@@Base+0x171c>
   13f34:	add	r0, r8, r6
   13f38:	mov	r1, #105	; 0x69
   13f3c:	strb	r1, [r0, #1]
   13f40:	vmov.32	r1, d16[0]
   13f44:	adds	r1, r1, #2
   13f48:	str	r1, [r5]
   13f4c:	vmov.32	r1, d16[1]
   13f50:	adc	r1, r1, #0
   13f54:	str	r1, [r5, #4]
   13f58:	ldrd	r2, [r5, #8]
   13f5c:	adds	r1, r2, #1
   13f60:	str	r1, [r5, #8]
   13f64:	adc	r1, r3, #0
   13f68:	str	r1, [r5, #12]
   13f6c:	ldr	r2, [r4, #8]
   13f70:	ldr	r1, [r4]
   13f74:	add	r3, r2, #1
   13f78:	str	r3, [r4, #8]
   13f7c:	mov	r3, r7
   13f80:	ldrb	r1, [r1, r2]
   13f84:	mov	r2, #824	; 0x338
   13f88:	cmp	r1, #110	; 0x6e
   13f8c:	movwne	r2, #816	; 0x330
   13f90:	ldr	r2, [r3, r2]!
   13f94:	adds	r2, r2, #1
   13f98:	str	r2, [r3]
   13f9c:	ldr	r2, [r3, #4]
   13fa0:	adc	r2, r2, #0
   13fa4:	cmp	r1, #110	; 0x6e
   13fa8:	str	r2, [r3, #4]
   13fac:	bne	14d5c <next@@Base+0x171c>
   13fb0:	mov	r1, #110	; 0x6e
   13fb4:	strh	r1, [r0, #2]
   13fb8:	ldr	r0, [r7, #832]	; 0x340
   13fbc:	ldr	r1, [r7, #836]	; 0x344
   13fc0:	adds	r0, r0, #1
   13fc4:	adc	r1, r1, #0
   13fc8:	str	r0, [r7, #832]	; 0x340
   13fcc:	add	r0, r6, #4
   13fd0:	str	r1, [r7, #836]	; 0x344
   13fd4:	bl	11f68 <malloc@plt>
   13fd8:	add	r6, r6, #3
   13fdc:	mov	r1, r8
   13fe0:	mov	r4, r0
   13fe4:	mov	r2, r6
   13fe8:	bl	12010 <strncpy@plt>
   13fec:	mov	r0, #0
   13ff0:	strb	r0, [r4, r6]
   13ff4:	mov	r0, #8
   13ff8:	bl	11f68 <malloc@plt>
   13ffc:	mov	r1, r4
   14000:	mov	r6, r0
   14004:	bl	128f0 <init_token_function@@Base>
   14008:	b	13c8c <next@@Base+0x64c>
   1400c:	add	r0, r6, #40	; 0x28
   14010:	bl	14e00 <next@@Base+0x17c0>
   14014:	uxtb	r0, r8
   14018:	mov	r1, #848	; 0x350
   1401c:	mov	r2, r7
   14020:	ldr	r6, [sp, #4]
   14024:	cmp	r0, #101	; 0x65
   14028:	movwne	r1, #840	; 0x348
   1402c:	ldr	r1, [r2, r1]!
   14030:	adds	r1, r1, #1
   14034:	str	r1, [r2]
   14038:	ldr	r1, [r2, #4]
   1403c:	adc	r1, r1, #0
   14040:	cmp	r0, #101	; 0x65
   14044:	str	r1, [r2, #4]
   14048:	bne	14d5c <next@@Base+0x171c>
   1404c:	sub	r0, pc, #468	; 0x1d4
   14050:	vld1.64	{d16-d17}, [r5 :128]
   14054:	add	r3, sp, #8
   14058:	vld1.64	{d18-d19}, [r0 :128]
   1405c:	mov	r0, #101	; 0x65
   14060:	strb	r0, [r3, r6]
   14064:	vadd.i64	q9, q8, q9
   14068:	vst1.64	{d18-d19}, [r5 :128]
   1406c:	ldr	r1, [r4, #8]
   14070:	ldr	r0, [r4]
   14074:	add	r2, r1, #1
   14078:	str	r2, [r4, #8]
   1407c:	mov	r2, r7
   14080:	ldrb	r0, [r0, r1]
   14084:	mov	r1, #864	; 0x360
   14088:	cmp	r0, #116	; 0x74
   1408c:	movwne	r1, #856	; 0x358
   14090:	ldr	r1, [r2, r1]!
   14094:	adds	r1, r1, #1
   14098:	str	r1, [r2]
   1409c:	ldr	r1, [r2, #4]
   140a0:	adc	r1, r1, #0
   140a4:	cmp	r0, #116	; 0x74
   140a8:	str	r1, [r2, #4]
   140ac:	bne	14d5c <next@@Base+0x171c>
   140b0:	add	ip, r3, r6
   140b4:	mov	r1, #116	; 0x74
   140b8:	vmov.32	r2, d16[0]
   140bc:	vmov.32	r0, d16[1]
   140c0:	strb	r1, [ip, #1]
   140c4:	adds	r1, r2, #2
   140c8:	adc	r3, r0, #0
   140cc:	str	r1, [r5]
   140d0:	mov	r1, r5
   140d4:	str	r3, [r5, #4]
   140d8:	ldr	r6, [r5, #8]
   140dc:	ldr	r3, [r5, #12]
   140e0:	adds	r6, r6, #1
   140e4:	adc	r3, r3, #0
   140e8:	str	r6, [r5, #8]
   140ec:	str	r3, [r5, #12]
   140f0:	ldr	r6, [r4, #8]
   140f4:	ldr	r3, [r4]
   140f8:	add	r5, r6, #1
   140fc:	str	r5, [r4, #8]
   14100:	mov	r5, r7
   14104:	ldrb	r3, [r3, r6]
   14108:	mov	r6, #880	; 0x370
   1410c:	cmp	r3, #117	; 0x75
   14110:	movwne	r6, #872	; 0x368
   14114:	ldr	r6, [r5, r6]!
   14118:	adds	r6, r6, #1
   1411c:	str	r6, [r5]
   14120:	ldr	r6, [r5, #4]
   14124:	adc	r6, r6, #0
   14128:	cmp	r3, #117	; 0x75
   1412c:	str	r6, [r5, #4]
   14130:	bne	14d5c <next@@Base+0x171c>
   14134:	adds	r3, r2, #3
   14138:	str	r3, [r1]
   1413c:	mov	r3, #117	; 0x75
   14140:	strb	r3, [ip, #2]
   14144:	adc	r3, r0, #0
   14148:	str	r3, [r1, #4]
   1414c:	ldr	r6, [r1, #8]
   14150:	ldr	r3, [r1, #12]
   14154:	adds	r6, r6, #1
   14158:	adc	r3, r3, #0
   1415c:	str	r6, [r1, #8]
   14160:	str	r3, [r1, #12]
   14164:	ldr	r6, [r4, #8]
   14168:	ldr	r3, [r4]
   1416c:	add	r5, r6, #1
   14170:	str	r5, [r4, #8]
   14174:	mov	r5, r7
   14178:	ldrb	r3, [r3, r6]
   1417c:	mov	r6, #896	; 0x380
   14180:	cmp	r3, #114	; 0x72
   14184:	movwne	r6, #888	; 0x378
   14188:	ldr	r6, [r5, r6]!
   1418c:	adds	r6, r6, #1
   14190:	str	r6, [r5]
   14194:	ldr	r6, [r5, #4]
   14198:	adc	r6, r6, #0
   1419c:	cmp	r3, #114	; 0x72
   141a0:	str	r6, [r5, #4]
   141a4:	bne	14d5c <next@@Base+0x171c>
   141a8:	adds	r2, r2, #4
   141ac:	str	r2, [r1]
   141b0:	mov	r2, #114	; 0x72
   141b4:	adc	r0, r0, #0
   141b8:	strb	r2, [ip, #3]
   141bc:	str	r0, [r1, #4]
   141c0:	ldr	r0, [r1, #8]
   141c4:	ldr	r3, [r1, #12]
   141c8:	adds	r0, r0, #1
   141cc:	str	r0, [r1, #8]
   141d0:	adc	r0, r3, #0
   141d4:	str	r0, [r1, #12]
   141d8:	ldr	r1, [r4, #8]
   141dc:	ldr	r0, [r4]
   141e0:	add	r2, r1, #1
   141e4:	str	r2, [r4, #8]
   141e8:	mov	r2, r7
   141ec:	ldrb	r0, [r0, r1]
   141f0:	mov	r1, #912	; 0x390
   141f4:	cmp	r0, #110	; 0x6e
   141f8:	movwne	r1, #904	; 0x388
   141fc:	ldr	r1, [r2, r1]!
   14200:	adds	r1, r1, #1
   14204:	str	r1, [r2]
   14208:	ldr	r1, [r2, #4]
   1420c:	adc	r1, r1, #0
   14210:	cmp	r0, #110	; 0x6e
   14214:	str	r1, [r2, #4]
   14218:	bne	14d5c <next@@Base+0x171c>
   1421c:	ldr	r0, [r7, #920]	; 0x398
   14220:	ldr	r1, [r7, #924]	; 0x39c
   14224:	adds	r0, r0, #1
   14228:	adc	r1, r1, #0
   1422c:	str	r0, [r7, #920]	; 0x398
   14230:	mov	r0, #4
   14234:	str	r1, [r7, #924]	; 0x39c
   14238:	bl	11f68 <malloc@plt>
   1423c:	mov	r6, r0
   14240:	bl	12a80 <init_token_return@@Base>
   14244:	b	13c8c <next@@Base+0x64c>
   14248:	add	r0, r6, #24
   1424c:	bl	14e00 <next@@Base+0x17c0>
   14250:	ldr	r1, [pc, #2972]	; 14df4 <next@@Base+0x17b4>
   14254:	ldr	r9, [sp, #4]
   14258:	mov	r0, #1
   1425c:	add	r1, pc, r1
   14260:	str	r0, [r1]
   14264:	uxtb	r0, r8
   14268:	cmp	r0, #102	; 0x66
   1426c:	beq	1445c <next@@Base+0xe1c>
   14270:	cmp	r0, #110	; 0x6e
   14274:	add	r8, sp, #8
   14278:	bne	14d64 <next@@Base+0x1724>
   1427c:	add	r0, r6, #64	; 0x40
   14280:	bl	14e00 <next@@Base+0x17c0>
   14284:	add	r0, pc, #900	; 0x384
   14288:	vld1.64	{d18-d19}, [r5 :128]
   1428c:	vld1.64	{d16-d17}, [r0 :128]
   14290:	mov	r0, #110	; 0x6e
   14294:	strb	r0, [r8, r9]
   14298:	vadd.i64	q8, q9, q8
   1429c:	vst1.64	{d16-d17}, [r5 :128]
   142a0:	ldr	r1, [r4, #8]
   142a4:	ldr	r0, [r4]
   142a8:	add	r2, r1, #1
   142ac:	str	r2, [r4, #8]
   142b0:	mov	r2, r7
   142b4:	ldrb	r0, [r0, r1]
   142b8:	mov	r1, #760	; 0x2f8
   142bc:	cmp	r0, #116	; 0x74
   142c0:	movwne	r1, #752	; 0x2f0
   142c4:	ldr	r1, [r2, r1]!
   142c8:	adds	r1, r1, #1
   142cc:	str	r1, [r2]
   142d0:	ldr	r1, [r2, #4]
   142d4:	adc	r1, r1, #0
   142d8:	cmp	r0, #116	; 0x74
   142dc:	str	r1, [r2, #4]
   142e0:	bne	14d5c <next@@Base+0x171c>
   142e4:	ldr	r0, [r7, #768]	; 0x300
   142e8:	ldr	r1, [r7, #772]	; 0x304
   142ec:	adds	r0, r0, #1
   142f0:	adc	r1, r1, #0
   142f4:	str	r0, [r7, #768]	; 0x300
   142f8:	mov	r0, #4
   142fc:	str	r1, [r7, #772]	; 0x304
   14300:	bl	11f68 <malloc@plt>
   14304:	mov	r6, r0
   14308:	bl	12850 <init_token_int_type@@Base>
   1430c:	b	13c8c <next@@Base+0x64c>
   14310:	add	r0, r6, #48	; 0x30
   14314:	bl	14e00 <next@@Base+0x17c0>
   14318:	uxtb	r0, r8
   1431c:	mov	r1, #936	; 0x3a8
   14320:	mov	r2, r7
   14324:	ldr	r6, [sp, #4]
   14328:	cmp	r0, #108	; 0x6c
   1432c:	movwne	r1, #928	; 0x3a0
   14330:	ldr	r1, [r2, r1]!
   14334:	adds	r1, r1, #1
   14338:	str	r1, [r2]
   1433c:	ldr	r1, [r2, #4]
   14340:	adc	r1, r1, #0
   14344:	cmp	r0, #108	; 0x6c
   14348:	str	r1, [r2, #4]
   1434c:	bne	14d5c <next@@Base+0x171c>
   14350:	add	r0, pc, #696	; 0x2b8
   14354:	vld1.64	{d16-d17}, [r5 :128]
   14358:	add	r3, sp, #8
   1435c:	vld1.64	{d18-d19}, [r0 :128]
   14360:	mov	r0, #108	; 0x6c
   14364:	strb	r0, [r3, r6]
   14368:	vadd.i64	q9, q8, q9
   1436c:	vst1.64	{d18-d19}, [r5 :128]
   14370:	ldr	r1, [r4, #8]
   14374:	ldr	r0, [r4]
   14378:	add	r2, r1, #1
   1437c:	str	r2, [r4, #8]
   14380:	mov	r2, r7
   14384:	ldrb	r0, [r0, r1]
   14388:	mov	r1, #952	; 0x3b8
   1438c:	cmp	r0, #115	; 0x73
   14390:	movwne	r1, #944	; 0x3b0
   14394:	ldr	r1, [r2, r1]!
   14398:	adds	r1, r1, #1
   1439c:	str	r1, [r2]
   143a0:	ldr	r1, [r2, #4]
   143a4:	adc	r1, r1, #0
   143a8:	cmp	r0, #115	; 0x73
   143ac:	str	r1, [r2, #4]
   143b0:	bne	14d5c <next@@Base+0x171c>
   143b4:	add	r0, r3, r6
   143b8:	mov	r1, #115	; 0x73
   143bc:	strb	r1, [r0, #1]
   143c0:	vmov.32	r0, d16[0]
   143c4:	adds	r0, r0, #2
   143c8:	str	r0, [r5]
   143cc:	vmov.32	r0, d16[1]
   143d0:	adc	r0, r0, #0
   143d4:	str	r0, [r5, #4]
   143d8:	ldrd	r0, [r5, #8]
   143dc:	adds	r0, r0, #1
   143e0:	str	r0, [r5, #8]
   143e4:	adc	r0, r1, #0
   143e8:	str	r0, [r5, #12]
   143ec:	ldr	r1, [r4, #8]
   143f0:	ldr	r0, [r4]
   143f4:	add	r2, r1, #1
   143f8:	str	r2, [r4, #8]
   143fc:	mov	r2, r7
   14400:	ldrb	r0, [r0, r1]
   14404:	mov	r1, #968	; 0x3c8
   14408:	cmp	r0, #101	; 0x65
   1440c:	movwne	r1, #960	; 0x3c0
   14410:	ldr	r1, [r2, r1]!
   14414:	adds	r1, r1, #1
   14418:	str	r1, [r2]
   1441c:	ldr	r1, [r2, #4]
   14420:	adc	r1, r1, #0
   14424:	cmp	r0, #101	; 0x65
   14428:	str	r1, [r2, #4]
   1442c:	bne	14d5c <next@@Base+0x171c>
   14430:	ldr	r0, [r7, #976]	; 0x3d0
   14434:	ldr	r1, [r7, #980]	; 0x3d4
   14438:	adds	r0, r0, #1
   1443c:	adc	r1, r1, #0
   14440:	str	r0, [r7, #976]	; 0x3d0
   14444:	mov	r0, #4
   14448:	str	r1, [r7, #980]	; 0x3d4
   1444c:	bl	11f68 <malloc@plt>
   14450:	mov	r6, r0
   14454:	bl	12bc0 <init_token_else@@Base>
   14458:	b	13c8c <next@@Base+0x64c>
   1445c:	add	r0, r6, #72	; 0x48
   14460:	bl	14e00 <next@@Base+0x17c0>
   14464:	add	r0, sp, #8
   14468:	mov	r1, #102	; 0x66
   1446c:	add	r0, r0, r9
   14470:	strh	r1, [r0]
   14474:	ldr	r0, [r7, #776]	; 0x308
   14478:	ldr	r1, [r7, #780]	; 0x30c
   1447c:	adds	r0, r0, #1
   14480:	adc	r1, r1, #0
   14484:	str	r0, [r7, #776]	; 0x308
   14488:	mov	r0, #4
   1448c:	str	r1, [r7, #780]	; 0x30c
   14490:	bl	11f68 <malloc@plt>
   14494:	mov	r6, r0
   14498:	bl	12b70 <init_token_if@@Base>
   1449c:	b	13c8c <next@@Base+0x64c>
   144a0:	ldrd	r0, [r7, #184]	; 0xb8
   144a4:	adds	r0, r0, #1
   144a8:	adc	r1, r1, #0
   144ac:	strd	r0, [r7, #184]	; 0xb8
   144b0:	mov	r0, #8
   144b4:	bl	11f68 <malloc@plt>
   144b8:	mov	r1, #0
   144bc:	mov	r6, r0
   144c0:	bl	128a0 <init_token_int_value@@Base>
   144c4:	b	13c8c <next@@Base+0x64c>
   144c8:	mov	r0, #240	; 0xf0
   144cc:	cmp	r2, #40	; 0x28
   144d0:	mov	r1, r7
   144d4:	movweq	r0, #232	; 0xe8
   144d8:	ldr	r0, [r1, r0]!
   144dc:	adds	r0, r0, #1
   144e0:	str	r0, [r1]
   144e4:	ldr	r0, [r1, #4]
   144e8:	adc	r0, r0, #0
   144ec:	cmp	r2, #40	; 0x28
   144f0:	str	r0, [r1, #4]
   144f4:	bne	1451c <next@@Base+0xedc>
   144f8:	ldrd	r0, [r7, #248]	; 0xf8
   144fc:	adds	r0, r0, #1
   14500:	adc	r1, r1, #0
   14504:	strd	r0, [r7, #248]	; 0xf8
   14508:	mov	r0, #4
   1450c:	bl	11f68 <malloc@plt>
   14510:	mov	r6, r0
   14514:	bl	12940 <init_token_opar@@Base>
   14518:	b	13c8c <next@@Base+0x64c>
   1451c:	mov	r0, #264	; 0x108
   14520:	cmp	r2, #41	; 0x29
   14524:	mov	r1, r7
   14528:	movweq	r0, #256	; 0x100
   1452c:	ldr	r0, [r1, r0]!
   14530:	adds	r0, r0, #1
   14534:	str	r0, [r1]
   14538:	ldr	r0, [r1, #4]
   1453c:	adc	r0, r0, #0
   14540:	cmp	r2, #41	; 0x29
   14544:	str	r0, [r1, #4]
   14548:	bne	14620 <next@@Base+0xfe0>
   1454c:	ldr	r0, [r7, #272]	; 0x110
   14550:	ldr	r1, [r7, #276]	; 0x114
   14554:	adds	r0, r0, #1
   14558:	adc	r1, r1, #0
   1455c:	str	r0, [r7, #272]	; 0x110
   14560:	mov	r0, #4
   14564:	str	r1, [r7, #276]	; 0x114
   14568:	bl	11f68 <malloc@plt>
   1456c:	mov	r6, r0
   14570:	bl	12990 <init_token_cpar@@Base>
   14574:	b	13c8c <next@@Base+0x64c>
   14578:	ldr	r0, [r7, #296]	; 0x128
   1457c:	ldr	r1, [r7, #300]	; 0x12c
   14580:	adds	r0, r0, #1
   14584:	adc	r1, r1, #0
   14588:	str	r0, [r7, #296]	; 0x128
   1458c:	mov	r0, #4
   14590:	str	r1, [r7, #300]	; 0x12c
   14594:	bl	11f68 <malloc@plt>
   14598:	mov	r6, r0
   1459c:	bl	129e0 <init_token_obra@@Base>
   145a0:	b	13c8c <next@@Base+0x64c>
   145a4:	ldr	r0, [r7, #320]	; 0x140
   145a8:	ldr	r1, [r7, #324]	; 0x144
   145ac:	adds	r0, r0, #1
   145b0:	adc	r1, r1, #0
   145b4:	str	r0, [r7, #320]	; 0x140
   145b8:	mov	r0, #4
   145bc:	str	r1, [r7, #324]	; 0x144
   145c0:	bl	11f68 <malloc@plt>
   145c4:	mov	r6, r0
   145c8:	bl	12a30 <init_token_cbra@@Base>
   145cc:	b	13c8c <next@@Base+0x64c>
   145d0:	ldr	r0, [r7, #344]	; 0x158
   145d4:	ldr	r1, [r7, #348]	; 0x15c
   145d8:	adds	r0, r0, #1
   145dc:	adc	r1, r1, #0
   145e0:	str	r0, [r7, #344]	; 0x158
   145e4:	mov	r0, #4
   145e8:	str	r1, [r7, #348]	; 0x15c
   145ec:	bl	11f68 <malloc@plt>
   145f0:	mov	r6, r0
   145f4:	bl	12ad0 <init_token_semicolon@@Base>
   145f8:	b	13c8c <next@@Base+0x64c>
   145fc:	andeq	r9, r1, r8, ror #27
   14600:	andeq	r9, r1, ip, ror #27
   14604:	andeq	r9, r1, r0, lsl sp
   14608:	strdeq	r9, [r1], -r8
   1460c:	andeq	r9, r1, r4, lsr #2
   14610:	andeq	r0, r0, r1
   14614:	andeq	r0, r0, r0
   14618:	andeq	r0, r0, r1
   1461c:	andeq	r0, r0, r0
   14620:	ldr	r0, [r7, #408]	; 0x198
   14624:	ldr	r1, [r7, #412]	; 0x19c
   14628:	ldr	r6, [r7, #388]	; 0x184
   1462c:	mov	r9, r5
   14630:	ldr	r5, [r7, #360]	; 0x168
   14634:	adds	r3, r0, #1
   14638:	ldr	r0, [r7, #364]	; 0x16c
   1463c:	adc	ip, r1, #0
   14640:	ldr	r1, [r7, #384]	; 0x180
   14644:	adds	r1, r1, #1
   14648:	adc	lr, r6, #0
   1464c:	ldr	r6, [r7, #336]	; 0x150
   14650:	adds	r5, r5, #1
   14654:	adc	r8, r0, #0
   14658:	adds	r6, r6, #1
   1465c:	str	r6, [r7, #336]	; 0x150
   14660:	str	r5, [r7, #360]	; 0x168
   14664:	str	r1, [r7, #384]	; 0x180
   14668:	str	r3, [r7, #408]	; 0x198
   1466c:	ldr	r1, [r7, #340]	; 0x154
   14670:	ldr	r6, [r7, #312]	; 0x138
   14674:	ldr	r3, [r7, #288]	; 0x120
   14678:	ldr	r5, [r7, #292]	; 0x124
   1467c:	ldr	r0, [r7, #316]	; 0x13c
   14680:	adc	r1, r1, #0
   14684:	adds	r6, r6, #1
   14688:	str	r6, [r7, #312]	; 0x138
   1468c:	adc	r0, r0, #0
   14690:	adds	r3, r3, #1
   14694:	ldr	r6, [r7, #432]	; 0x1b0
   14698:	adc	r5, r5, #0
   1469c:	adds	r6, r6, #1
   146a0:	str	r6, [r7, #432]	; 0x1b0
   146a4:	str	r3, [r7, #288]	; 0x120
   146a8:	str	r5, [r7, #292]	; 0x124
   146ac:	str	r0, [r7, #316]	; 0x13c
   146b0:	str	r1, [r7, #340]	; 0x154
   146b4:	str	r8, [r7, #364]	; 0x16c
   146b8:	str	lr, [r7, #388]	; 0x184
   146bc:	str	ip, [r7, #412]	; 0x19c
   146c0:	mov	r1, r7
   146c4:	ldr	r0, [r7, #436]	; 0x1b4
   146c8:	adc	r0, r0, #0
   146cc:	cmp	r2, #33	; 0x21
   146d0:	str	r0, [r7, #436]	; 0x1b4
   146d4:	mov	r0, #456	; 0x1c8
   146d8:	movweq	r0, #448	; 0x1c0
   146dc:	ldr	r0, [r1, r0]!
   146e0:	adds	r0, r0, #1
   146e4:	str	r0, [r1]
   146e8:	ldr	r0, [r1, #4]
   146ec:	adc	r0, r0, #0
   146f0:	cmp	r2, #33	; 0x21
   146f4:	str	r0, [r1, #4]
   146f8:	bne	14828 <next@@Base+0x11e8>
   146fc:	sub	r0, pc, #244	; 0xf4
   14700:	vld1.64	{d18-d19}, [r9 :128]
   14704:	add	r1, sp, #8
   14708:	mov	r5, #472	; 0x1d8
   1470c:	vld1.64	{d16-d17}, [r0 :128]
   14710:	mov	r0, #33	; 0x21
   14714:	strb	r0, [r1, sl]
   14718:	vadd.i64	q8, q9, q8
   1471c:	vst1.64	{d16-d17}, [r9 :128]
   14720:	ldr	r1, [r4, #8]
   14724:	ldr	r0, [r4]
   14728:	add	r2, r1, #1
   1472c:	str	r2, [r4, #8]
   14730:	ldrb	r8, [r0, r1]
   14734:	mov	r0, #8
   14738:	cmp	r8, #61	; 0x3d
   1473c:	movwne	r5, #464	; 0x1d0
   14740:	bl	11f68 <malloc@plt>
   14744:	mov	r6, r0
   14748:	mov	r0, r7
   1474c:	ldr	r1, [r0, r5]!
   14750:	adds	r1, r1, #1
   14754:	str	r1, [r0]
   14758:	ldr	r1, [r0, #4]
   1475c:	adc	r1, r1, #0
   14760:	cmp	r8, #61	; 0x3d
   14764:	str	r1, [r0, #4]
   14768:	beq	1495c <next@@Base+0x131c>
   1476c:	ldr	r1, [pc, #1632]	; 14dd4 <next@@Base+0x1794>
   14770:	sub	r0, pc, #360	; 0x168
   14774:	vld1.64	{d16-d17}, [r0 :128]
   14778:	add	r1, pc, r1
   1477c:	vld1.64	{d18-d19}, [r1 :128]
   14780:	ldr	r0, [pc, #1616]	; 14dd8 <next@@Base+0x1798>
   14784:	ldr	r2, [pc, #1616]	; 14ddc <next@@Base+0x179c>
   14788:	ldr	r2, [pc, r2]
   1478c:	add	r0, pc, r0
   14790:	ldr	r3, [r7, #480]	; 0x1e0
   14794:	ldr	r5, [r7, #484]	; 0x1e4
   14798:	vadd.i64	q8, q9, q8
   1479c:	vst1.64	{d16-d17}, [r1 :128]
   147a0:	adds	r2, r2, #1
   147a4:	str	r2, [r0]
   147a8:	ldr	r2, [r0, #4]
   147ac:	adc	r2, r2, #0
   147b0:	adds	r3, r3, #1
   147b4:	adc	r1, r5, #0
   147b8:	str	r2, [r0, #4]
   147bc:	str	r3, [r7, #480]	; 0x1e0
   147c0:	mov	r2, #16
   147c4:	mov	r3, r0
   147c8:	str	r1, [r7, #484]	; 0x1e4
   147cc:	ldr	r1, [r4, #8]
   147d0:	cmp	r1, #0
   147d4:	movwne	r2, #8
   147d8:	ldr	r2, [r3, r2]!
   147dc:	adds	r2, r2, #1
   147e0:	str	r2, [r3]
   147e4:	ldr	r2, [r3, #4]
   147e8:	adc	r2, r2, #0
   147ec:	cmp	r1, #0
   147f0:	str	r2, [r3, #4]
   147f4:	beq	14d3c <next@@Base+0x16fc>
   147f8:	ldrd	r2, [r0, #24]
   147fc:	adds	r2, r2, #1
   14800:	adc	r3, r3, #0
   14804:	strd	r2, [r0, #24]
   14808:	sub	r0, r1, #1
   1480c:	str	r0, [r4, #8]
   14810:	mov	r0, #2
   14814:	bl	11f68 <malloc@plt>
   14818:	ldrb	r2, [sp, #8]
   1481c:	mov	r1, r0
   14820:	strb	r2, [r0], #1
   14824:	b	14994 <next@@Base+0x1354>
   14828:	ldr	r0, [r7, #584]	; 0x248
   1482c:	ldr	r1, [r7, #588]	; 0x24c
   14830:	ldr	r5, [r7, #528]	; 0x210
   14834:	ldr	r3, [r7, #512]	; 0x200
   14838:	ldr	r6, [r7, #516]	; 0x204
   1483c:	adds	ip, r0, #1
   14840:	ldr	r0, [r7, #532]	; 0x214
   14844:	adc	lr, r1, #0
   14848:	ldr	r1, [r7, #624]	; 0x270
   1484c:	adds	r5, r5, #1
   14850:	adc	r0, r0, #0
   14854:	adds	r3, r3, #1
   14858:	adc	r6, r6, #0
   1485c:	adds	r1, r1, #1
   14860:	str	r1, [r7, #624]	; 0x270
   14864:	str	r3, [r7, #512]	; 0x200
   14868:	str	r6, [r7, #516]	; 0x204
   1486c:	str	r5, [r7, #528]	; 0x210
   14870:	str	r0, [r7, #532]	; 0x214
   14874:	str	ip, [r7, #584]	; 0x248
   14878:	str	lr, [r7, #588]	; 0x24c
   1487c:	mov	r1, r7
   14880:	ldr	r0, [r7, #628]	; 0x274
   14884:	adc	r0, r0, #0
   14888:	cmp	r2, #38	; 0x26
   1488c:	str	r0, [r7, #628]	; 0x274
   14890:	mov	r0, #664	; 0x298
   14894:	movweq	r0, #656	; 0x290
   14898:	ldr	r0, [r1, r0]!
   1489c:	adds	r0, r0, #1
   148a0:	str	r0, [r1]
   148a4:	ldr	r0, [r1, #4]
   148a8:	adc	r0, r0, #0
   148ac:	cmp	r2, #38	; 0x26
   148b0:	str	r0, [r1, #4]
   148b4:	bne	14d98 <next@@Base+0x1758>
   148b8:	sub	r0, pc, #688	; 0x2b0
   148bc:	vld1.64	{d18-d19}, [r9 :128]
   148c0:	mov	r8, #38	; 0x26
   148c4:	mov	r5, #680	; 0x2a8
   148c8:	vld1.64	{d16-d17}, [r0 :128]
   148cc:	add	r0, sp, #8
   148d0:	strb	r8, [r0, sl]
   148d4:	vadd.i64	q8, q9, q8
   148d8:	vst1.64	{d16-d17}, [r9 :128]
   148dc:	ldr	r1, [r4, #8]
   148e0:	ldr	r0, [r4]
   148e4:	add	r2, r1, #1
   148e8:	str	r2, [r4, #8]
   148ec:	ldrb	r4, [r0, r1]
   148f0:	mov	r0, #8
   148f4:	cmp	r4, #38	; 0x26
   148f8:	movwne	r5, #672	; 0x2a0
   148fc:	bl	11f68 <malloc@plt>
   14900:	mov	r6, r0
   14904:	mov	r0, r7
   14908:	ldr	r1, [r0, r5]!
   1490c:	adds	r1, r1, #1
   14910:	str	r1, [r0]
   14914:	ldr	r1, [r0, #4]
   14918:	adc	r1, r1, #0
   1491c:	cmp	r4, #38	; 0x26
   14920:	str	r1, [r0, #4]
   14924:	bne	14d5c <next@@Base+0x171c>
   14928:	ldr	r0, [r7, #688]	; 0x2b0
   1492c:	ldr	r1, [r7, #692]	; 0x2b4
   14930:	adds	r0, r0, #1
   14934:	adc	r1, r1, #0
   14938:	str	r0, [r7, #688]	; 0x2b0
   1493c:	str	r1, [r7, #692]	; 0x2b4
   14940:	mov	r0, #3
   14944:	bl	11f68 <malloc@plt>
   14948:	mov	r1, r0
   1494c:	ldrb	r0, [sp, #8]
   14950:	strh	r8, [r1, #1]
   14954:	strb	r0, [r1]
   14958:	b	14bb4 <next@@Base+0x1574>
   1495c:	ldr	r0, [r7, #488]	; 0x1e8
   14960:	ldr	r1, [r7, #492]	; 0x1ec
   14964:	adds	r0, r0, #1
   14968:	adc	r1, r1, #0
   1496c:	str	r0, [r7, #488]	; 0x1e8
   14970:	mov	r0, #3
   14974:	str	r1, [r7, #492]	; 0x1ec
   14978:	bl	11f68 <malloc@plt>
   1497c:	mov	r1, r0
   14980:	ldrb	r0, [sp, #8]
   14984:	mov	r2, #61	; 0x3d
   14988:	strb	r2, [r1, #1]
   1498c:	strb	r0, [r1]
   14990:	add	r0, r1, #2
   14994:	mov	r2, #0
   14998:	strb	r2, [r0]
   1499c:	ldr	r0, [r7, #496]	; 0x1f0
   149a0:	ldr	r2, [r7, #500]	; 0x1f4
   149a4:	adds	r0, r0, #1
   149a8:	adc	r2, r2, #0
   149ac:	str	r0, [r7, #496]	; 0x1f0
   149b0:	str	r2, [r7, #500]	; 0x1f4
   149b4:	b	14bb4 <next@@Base+0x1574>
   149b8:	andeq	r9, r1, r8, asr #11
   149bc:	ldr	r0, [r7, #456]	; 0x1c8
   149c0:	ldr	r1, [r7, #460]	; 0x1cc
   149c4:	adds	r0, r0, #1
   149c8:	adc	r1, r1, #0
   149cc:	str	r0, [r7, #456]	; 0x1c8
   149d0:	mov	r0, #512	; 0x200
   149d4:	cmp	r2, #60	; 0x3c
   149d8:	str	r1, [r7, #460]	; 0x1cc
   149dc:	movweq	r0, #504	; 0x1f8
   149e0:	mov	r1, r7
   149e4:	ldr	r0, [r1, r0]!
   149e8:	adds	r0, r0, #1
   149ec:	str	r0, [r1]
   149f0:	ldr	r0, [r1, #4]
   149f4:	adc	r0, r0, #0
   149f8:	cmp	r2, #60	; 0x3c
   149fc:	str	r0, [r1, #4]
   14a00:	beq	14a34 <next@@Base+0x13f4>
   14a04:	mov	r0, #528	; 0x210
   14a08:	cmp	r2, #62	; 0x3e
   14a0c:	mov	r1, r7
   14a10:	movweq	r0, #520	; 0x208
   14a14:	ldr	r0, [r1, r0]!
   14a18:	adds	r0, r0, #1
   14a1c:	str	r0, [r1]
   14a20:	ldr	r0, [r1, #4]
   14a24:	adc	r0, r0, #0
   14a28:	cmp	r2, #62	; 0x3e
   14a2c:	str	r0, [r1, #4]
   14a30:	bne	14bc0 <next@@Base+0x1580>
   14a34:	add	r0, pc, #900	; 0x384
   14a38:	vld1.64	{d18-d19}, [r5 :128]
   14a3c:	vld1.64	{d16-d17}, [r0 :128]
   14a40:	add	r0, sp, #8
   14a44:	strb	r8, [r0, sl]
   14a48:	vadd.i64	q8, q9, q8
   14a4c:	vst1.64	{d16-d17}, [r5 :128]
   14a50:	mov	r5, #544	; 0x220
   14a54:	ldr	r1, [r4, #8]
   14a58:	ldr	r0, [r4]
   14a5c:	add	r2, r1, #1
   14a60:	str	r2, [r4, #8]
   14a64:	ldrb	r8, [r0, r1]
   14a68:	mov	r0, #8
   14a6c:	cmp	r8, #61	; 0x3d
   14a70:	movwne	r5, #536	; 0x218
   14a74:	bl	11f68 <malloc@plt>
   14a78:	mov	r6, r0
   14a7c:	mov	r0, r7
   14a80:	ldr	r1, [r0, r5]!
   14a84:	adds	r1, r1, #1
   14a88:	str	r1, [r0]
   14a8c:	ldr	r1, [r0, #4]
   14a90:	adc	r1, r1, #0
   14a94:	cmp	r8, #61	; 0x3d
   14a98:	str	r1, [r0, #4]
   14a9c:	beq	14b5c <next@@Base+0x151c>
   14aa0:	ldr	r1, [pc, #824]	; 14de0 <next@@Base+0x17a0>
   14aa4:	add	r0, pc, #788	; 0x314
   14aa8:	vld1.64	{d16-d17}, [r0 :128]
   14aac:	add	r1, pc, r1
   14ab0:	vld1.64	{d18-d19}, [r1 :128]
   14ab4:	ldr	r0, [pc, #808]	; 14de4 <next@@Base+0x17a4>
   14ab8:	ldr	r2, [pc, #808]	; 14de8 <next@@Base+0x17a8>
   14abc:	ldr	r2, [pc, r2]
   14ac0:	add	r0, pc, r0
   14ac4:	ldr	r3, [r7, #552]	; 0x228
   14ac8:	ldr	r5, [r7, #556]	; 0x22c
   14acc:	vadd.i64	q8, q9, q8
   14ad0:	vst1.64	{d16-d17}, [r1 :128]
   14ad4:	adds	r2, r2, #1
   14ad8:	str	r2, [r0]
   14adc:	ldr	r2, [r0, #4]
   14ae0:	adc	r2, r2, #0
   14ae4:	adds	r3, r3, #1
   14ae8:	adc	r1, r5, #0
   14aec:	str	r2, [r0, #4]
   14af0:	str	r3, [r7, #552]	; 0x228
   14af4:	mov	r2, #16
   14af8:	mov	r3, r0
   14afc:	str	r1, [r7, #556]	; 0x22c
   14b00:	ldr	r1, [r4, #8]
   14b04:	cmp	r1, #0
   14b08:	movwne	r2, #8
   14b0c:	ldr	r2, [r3, r2]!
   14b10:	adds	r2, r2, #1
   14b14:	str	r2, [r3]
   14b18:	ldr	r2, [r3, #4]
   14b1c:	adc	r2, r2, #0
   14b20:	cmp	r1, #0
   14b24:	str	r2, [r3, #4]
   14b28:	beq	14d3c <next@@Base+0x16fc>
   14b2c:	ldrd	r2, [r0, #24]
   14b30:	adds	r2, r2, #1
   14b34:	adc	r3, r3, #0
   14b38:	strd	r2, [r0, #24]
   14b3c:	sub	r0, r1, #1
   14b40:	str	r0, [r4, #8]
   14b44:	mov	r0, #2
   14b48:	bl	11f68 <malloc@plt>
   14b4c:	ldrb	r2, [sp, #8]
   14b50:	mov	r1, r0
   14b54:	strb	r2, [r0], #1
   14b58:	b	14b94 <next@@Base+0x1554>
   14b5c:	ldr	r0, [r7, #560]	; 0x230
   14b60:	ldr	r1, [r7, #564]	; 0x234
   14b64:	adds	r0, r0, #1
   14b68:	adc	r1, r1, #0
   14b6c:	str	r0, [r7, #560]	; 0x230
   14b70:	mov	r0, #3
   14b74:	str	r1, [r7, #564]	; 0x234
   14b78:	bl	11f68 <malloc@plt>
   14b7c:	mov	r1, r0
   14b80:	ldrb	r0, [sp, #8]
   14b84:	mov	r2, #61	; 0x3d
   14b88:	strb	r2, [r1, #1]
   14b8c:	strb	r0, [r1]
   14b90:	add	r0, r1, #2
   14b94:	mov	r2, #0
   14b98:	strb	r2, [r0]
   14b9c:	ldr	r0, [r7, #568]	; 0x238
   14ba0:	ldr	r2, [r7, #572]	; 0x23c
   14ba4:	adds	r0, r0, #1
   14ba8:	adc	r2, r2, #0
   14bac:	str	r0, [r7, #568]	; 0x238
   14bb0:	str	r2, [r7, #572]	; 0x23c
   14bb4:	mov	r0, r6
   14bb8:	bl	12c10 <init_token_boolean_op@@Base>
   14bbc:	b	13c8c <next@@Base+0x64c>
   14bc0:	mov	r0, #584	; 0x248
   14bc4:	cmp	r2, #61	; 0x3d
   14bc8:	mov	r1, r7
   14bcc:	movweq	r0, #576	; 0x240
   14bd0:	ldr	r0, [r1, r0]!
   14bd4:	adds	r0, r0, #1
   14bd8:	str	r0, [r1]
   14bdc:	ldr	r0, [r1, #4]
   14be0:	adc	r0, r0, #0
   14be4:	cmp	r2, #61	; 0x3d
   14be8:	str	r0, [r1, #4]
   14bec:	bne	14c7c <next@@Base+0x163c>
   14bf0:	add	r0, pc, #456	; 0x1c8
   14bf4:	vld1.64	{d18-d19}, [r5 :128]
   14bf8:	mov	r8, #61	; 0x3d
   14bfc:	vld1.64	{d16-d17}, [r0 :128]
   14c00:	add	r0, sp, #8
   14c04:	strb	r8, [r0, sl]
   14c08:	vadd.i64	q8, q9, q8
   14c0c:	vst1.64	{d16-d17}, [r5 :128]
   14c10:	mov	r5, #600	; 0x258
   14c14:	ldr	r1, [r4, #8]
   14c18:	ldr	r0, [r4]
   14c1c:	add	r2, r1, #1
   14c20:	str	r2, [r4, #8]
   14c24:	ldrb	r4, [r0, r1]
   14c28:	mov	r0, #8
   14c2c:	cmp	r4, #61	; 0x3d
   14c30:	movwne	r5, #592	; 0x250
   14c34:	bl	11f68 <malloc@plt>
   14c38:	mov	r6, r0
   14c3c:	mov	r0, r7
   14c40:	ldr	r1, [r0, r5]!
   14c44:	adds	r1, r1, #1
   14c48:	str	r1, [r0]
   14c4c:	ldr	r1, [r0, #4]
   14c50:	adc	r1, r1, #0
   14c54:	cmp	r4, #61	; 0x3d
   14c58:	str	r1, [r0, #4]
   14c5c:	bne	14d5c <next@@Base+0x171c>
   14c60:	ldr	r0, [r7, #608]	; 0x260
   14c64:	ldr	r1, [r7, #612]	; 0x264
   14c68:	adds	r0, r0, #1
   14c6c:	adc	r1, r1, #0
   14c70:	str	r0, [r7, #608]	; 0x260
   14c74:	str	r1, [r7, #612]	; 0x264
   14c78:	b	14940 <next@@Base+0x1300>
   14c7c:	mov	r0, #624	; 0x270
   14c80:	cmp	r2, #124	; 0x7c
   14c84:	mov	r1, r7
   14c88:	movweq	r0, #616	; 0x268
   14c8c:	ldr	r0, [r1, r0]!
   14c90:	adds	r0, r0, #1
   14c94:	str	r0, [r1]
   14c98:	ldr	r0, [r1, #4]
   14c9c:	adc	r0, r0, #0
   14ca0:	cmp	r2, #124	; 0x7c
   14ca4:	str	r0, [r1, #4]
   14ca8:	bne	14d80 <next@@Base+0x1740>
   14cac:	add	r0, pc, #268	; 0x10c
   14cb0:	vld1.64	{d18-d19}, [ip :128]
   14cb4:	ldr	r1, [sp, #4]
   14cb8:	mov	r8, #124	; 0x7c
   14cbc:	mov	r5, #640	; 0x280
   14cc0:	vld1.64	{d16-d17}, [r0 :128]
   14cc4:	add	r0, sp, #8
   14cc8:	strb	r8, [r0, r1]
   14ccc:	vadd.i64	q8, q9, q8
   14cd0:	vst1.64	{d16-d17}, [ip :128]
   14cd4:	ldr	r1, [r4, #8]
   14cd8:	ldr	r0, [r4]
   14cdc:	add	r2, r1, #1
   14ce0:	str	r2, [r4, #8]
   14ce4:	ldrb	r4, [r0, r1]
   14ce8:	mov	r0, #8
   14cec:	cmp	r4, #124	; 0x7c
   14cf0:	movwne	r5, #632	; 0x278
   14cf4:	bl	11f68 <malloc@plt>
   14cf8:	mov	r6, r0
   14cfc:	mov	r0, r7
   14d00:	ldr	r1, [r0, r5]!
   14d04:	adds	r1, r1, #1
   14d08:	str	r1, [r0]
   14d0c:	ldr	r1, [r0, #4]
   14d10:	adc	r1, r1, #0
   14d14:	cmp	r4, #124	; 0x7c
   14d18:	str	r1, [r0, #4]
   14d1c:	bne	14d5c <next@@Base+0x171c>
   14d20:	ldr	r0, [r7, #648]	; 0x288
   14d24:	ldr	r1, [r7, #652]	; 0x28c
   14d28:	adds	r0, r0, #1
   14d2c:	adc	r1, r1, #0
   14d30:	str	r0, [r7, #648]	; 0x288
   14d34:	str	r1, [r7, #652]	; 0x28c
   14d38:	b	14940 <next@@Base+0x1300>
   14d3c:	ldr	r0, [pc, #180]	; 14df8 <next@@Base+0x17b8>
   14d40:	mov	r1, #32
   14d44:	mov	r2, #1
   14d48:	ldr	r0, [pc, r0]
   14d4c:	ldr	r3, [r0]
   14d50:	ldr	r0, [pc, #164]	; 14dfc <next@@Base+0x17bc>
   14d54:	add	r0, pc, r0
   14d58:	bl	11f44 <fwrite@plt>
   14d5c:	mov	r0, #1
   14d60:	bl	11fa4 <exit@plt>
   14d64:	add	r0, r6, #56	; 0x38
   14d68:	bl	14e00 <next@@Base+0x17c0>
   14d6c:	mov	r0, #1
   14d70:	bl	11fa4 <exit@plt>
   14d74:	andeq	r9, r1, r8, lsr #13
   14d78:	andeq	r9, r1, r4, ror r6
   14d7c:	andeq	r9, r1, r8, ror r6
   14d80:	ldr	r0, [r7, #664]	; 0x298
   14d84:	ldr	r1, [r7, #668]	; 0x29c
   14d88:	adds	r0, r0, #1
   14d8c:	adc	r1, r1, #0
   14d90:	str	r0, [r7, #664]	; 0x298
   14d94:	str	r1, [r7, #668]	; 0x29c
   14d98:	ldr	r0, [pc, #76]	; 14dec <next@@Base+0x17ac>
   14d9c:	ldr	r0, [pc, r0]
   14da0:	ldr	r0, [r0]
   14da4:	ldr	r1, [pc, #68]	; 14df0 <next@@Base+0x17b0>
   14da8:	add	r1, pc, r1
   14dac:	bl	11fd4 <fprintf@plt>
   14db0:	mov	r0, #1
   14db4:	bl	11fa4 <exit@plt>
   14db8:	nop	{0}
   14dbc:	nop	{0}
   14dc0:	andeq	r0, r0, r1
   14dc4:	andeq	r0, r0, r0
   14dc8:	andeq	r0, r0, r1
   14dcc:	andeq	r0, r0, r0
   14dd0:	andeq	r9, r1, r8, ror #19
   14dd4:	andeq	r8, r1, r0, asr #25
   14dd8:	andeq	r8, r1, ip, lsl #25
   14ddc:	muleq	r1, r0, ip
   14de0:	andeq	r8, r1, ip, lsl #19
   14de4:	andeq	r8, r1, r8, asr r9
   14de8:	andeq	r8, r1, ip, asr r9
   14dec:	andeq	r8, r1, ip, lsl r3
   14df0:	andeq	r6, r0, r1, lsr #20
   14df4:	andeq	r8, r1, r0, ror lr
   14df8:	andeq	r8, r1, r0, ror r3
   14dfc:	andeq	r6, r0, r4, asr sl
   14e00:	ldr	r1, [pc, #40]	; 14e30 <next@@Base+0x17f0>
   14e04:	ldr	r1, [pc, r1]
   14e08:	cmn	r1, #1
   14e0c:	ldrne	r0, [r0, r1, lsl #2]
   14e10:	cmpne	r0, #0
   14e14:	bne	14e1c <next@@Base+0x17dc>
   14e18:	bx	lr
   14e1c:	ldrd	r2, [r0]
   14e20:	adds	r2, r2, #1
   14e24:	adc	r3, r3, #0
   14e28:	strd	r2, [r0]
   14e2c:	bx	lr
   14e30:	andeq	r8, r1, r8, asr #5
   14e34:	push	{r4, r5, r6, lr}
   14e38:	sub	sp, sp, #8
   14e3c:	ldr	r0, [pc, #112]	; 14eb4 <next@@Base+0x1874>
   14e40:	ldr	r1, [pc, #112]	; 14eb8 <next@@Base+0x1878>
   14e44:	movw	r2, #3328	; 0xd00
   14e48:	movt	r2, #1285	; 0x505
   14e4c:	add	r0, pc, r0
   14e50:	add	r1, pc, r1
   14e54:	bl	18420 <__generate_code_for_binary_boolean_expression@@Base+0x5d0>
   14e58:	ldr	r0, [pc, #92]	; 14ebc <next@@Base+0x187c>
   14e5c:	ldr	r6, [pc, #92]	; 14ec0 <next@@Base+0x1880>
   14e60:	mov	r5, #0
   14e64:	add	r0, pc, r0
   14e68:	add	r6, pc, r6
   14e6c:	add	r4, r0, #4
   14e70:	mov	r3, r6
   14e74:	ldr	r0, [r3, r5]!
   14e78:	ldr	r1, [r3, #16]
   14e7c:	str	r1, [sp]
   14e80:	ldmib	r3, {r1, r2}
   14e84:	ldrb	r3, [r3, #12]
   14e88:	bl	18b84 <__generate_code_for_binary_boolean_expression@@Base+0xd34>
   14e8c:	ldrd	r0, [r4, #-4]
   14e90:	bl	19438 <__generate_code_for_binary_boolean_expression@@Base+0x15e8>
   14e94:	add	r5, r5, #20
   14e98:	add	r4, r4, #8
   14e9c:	cmp	r5, #180	; 0xb4
   14ea0:	bne	14e70 <next@@Base+0x1830>
   14ea4:	bl	19bb4 <__generate_code_for_binary_boolean_expression@@Base+0x1d64>
   14ea8:	add	sp, sp, #8
   14eac:	pop	{r4, r5, r6, lr}
   14eb0:	b	1a920 <__generate_code_for_binary_boolean_expression@@Base+0x2ad0>
   14eb4:	strdeq	r6, [r0], -ip
   14eb8:	andeq	r6, r0, pc, lsl #12
   14ebc:	andeq	r7, r1, r4, asr fp
   14ec0:	muleq	r1, r0, sl
   14ec4:	push	{fp, lr}
   14ec8:	vpush	{d8-d9}
   14ecc:	bl	14e34 <next@@Base+0x17f4>
   14ed0:	ldr	r0, [pc, #148]	; 14f6c <next@@Base+0x192c>
   14ed4:	vmov.i32	q4, #0	; 0x00000000
   14ed8:	add	r0, pc, r0
   14edc:	add	r1, r0, #16
   14ee0:	vst1.64	{d8-d9}, [r1 :128]
   14ee4:	ldr	r1, [pc, #132]	; 14f70 <next@@Base+0x1930>
   14ee8:	add	r1, pc, r1
   14eec:	vst1.64	{d8-d9}, [r1 :128]
   14ef0:	mov	r1, #0
   14ef4:	str	r1, [r0, #32]
   14ef8:	ldr	r2, [pc, #116]	; 14f74 <next@@Base+0x1934>
   14efc:	add	r2, pc, r2
   14f00:	vst1.64	{d8-d9}, [r2 :128]
   14f04:	ldr	r2, [pc, #108]	; 14f78 <next@@Base+0x1938>
   14f08:	add	r2, pc, r2
   14f0c:	vst1.64	{d8-d9}, [r2 :128]
   14f10:	ldr	r2, [pc, #100]	; 14f7c <next@@Base+0x193c>
   14f14:	add	r2, pc, r2
   14f18:	vst1.64	{d8-d9}, [r2 :128]
   14f1c:	ldr	r2, [pc, #92]	; 14f80 <next@@Base+0x1940>
   14f20:	add	r2, pc, r2
   14f24:	vst1.64	{d8-d9}, [r2 :128]
   14f28:	mov	r2, #36	; 0x24
   14f2c:	vst1.64	{d8-d9}, [r0 :128], r2
   14f30:	mov	r2, #1008	; 0x3f0
   14f34:	str	r1, [r0]
   14f38:	mov	r1, #0
   14f3c:	ldr	r0, [pc, #64]	; 14f84 <next@@Base+0x1944>
   14f40:	add	r0, pc, r0
   14f44:	vst1.64	{d8-d9}, [r0 :128]!
   14f48:	vst1.64	{d8-d9}, [r0 :128]
   14f4c:	ldr	r0, [pc, #52]	; 14f88 <next@@Base+0x1948>
   14f50:	add	r0, pc, r0
   14f54:	bl	12004 <memset@plt>
   14f58:	ldr	r0, [pc, #44]	; 14f8c <next@@Base+0x194c>
   14f5c:	add	r0, pc, r0
   14f60:	vst1.64	{d8-d9}, [r0 :128]
   14f64:	vpop	{d8-d9}
   14f68:	pop	{fp, pc}
   14f6c:	andeq	r8, r1, r0, ror #9
   14f70:	andeq	r8, r1, r0, asr #9
   14f74:	andeq	r8, r1, ip, ror #9
   14f78:	strdeq	r8, [r1], -r0
   14f7c:	strdeq	r8, [r1], -r4
   14f80:	andeq	r8, r1, r8, lsl r5
   14f84:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   14f88:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   14f8c:	ldrdeq	r8, [r1], -ip
   14f90:	ldr	r0, [pc, #12]	; 14fa4 <next@@Base+0x1964>
   14f94:	ldr	r1, [pc, #12]	; 14fa8 <next@@Base+0x1968>
   14f98:	add	r0, pc, r0
   14f9c:	add	r1, pc, r1
   14fa0:	b	1add0 <__gcov_flush@@Base+0xb4>
   14fa4:			; <UNDEFINED> instruction: 0xfffffe94
   14fa8:			; <UNDEFINED> instruction: 0xffffff20
   14fac:	andeq	r0, r0, r0

00014fb0 <init_ast_base@@Base>:
   14fb0:	ldr	ip, [pc, #56]	; 14ff0 <init_ast_base@@Base+0x40>
   14fb4:	add	r3, pc, #36	; 0x24
   14fb8:	vld1.64	{d16-d17}, [r3 :128]
   14fbc:	add	ip, pc, ip
   14fc0:	vld1.64	{d18-d19}, [ip :128]
   14fc4:	vadd.i64	q8, q9, q8
   14fc8:	vst1.64	{d16-d17}, [ip :128]
   14fcc:	stm	r0, {r1, r2}
   14fd0:	bx	lr
   14fd4:	nop	{0}
   14fd8:	nop	{0}
   14fdc:	nop	{0}
   14fe0:	andeq	r0, r0, r1
   14fe4:	andeq	r0, r0, r0
   14fe8:	andeq	r0, r0, r1
   14fec:	andeq	r0, r0, r0
   14ff0:	andeq	r8, r1, ip, lsl #17
   14ff4:	nop	{0}
   14ff8:	nop	{0}
   14ffc:	nop	{0}

00015000 <init_ast_base_single@@Base>:
   15000:	ldr	ip, [pc, #72]	; 15050 <init_ast_base_single@@Base+0x50>
   15004:	ldr	r3, [pc, #72]	; 15054 <init_ast_base_single@@Base+0x54>
   15008:	add	r2, pc, #48	; 0x30
   1500c:	vld1.64	{d16-d17}, [r2 :128]
   15010:	mov	r2, #0
   15014:	add	ip, pc, ip
   15018:	add	r3, pc, r3
   1501c:	vld1.64	{d18-d19}, [r3 :128]
   15020:	vld1.64	{d20-d21}, [ip :128]
   15024:	vadd.i64	q9, q9, q8
   15028:	vadd.i64	q8, q10, q8
   1502c:	vst1.64	{d18-d19}, [r3 :128]
   15030:	vst1.64	{d16-d17}, [ip :128]
   15034:	stm	r0, {r1, r2}
   15038:	bx	lr
   1503c:	nop	{0}
   15040:	andeq	r0, r0, r1
   15044:	andeq	r0, r0, r0
   15048:	andeq	r0, r0, r1
   1504c:	andeq	r0, r0, r0
   15050:	andeq	r8, r1, r4, lsr r8
   15054:	andeq	r8, r1, r0, asr #16
   15058:	nop	{0}
   1505c:	nop	{0}

00015060 <init_node_id@@Base>:
   15060:	ldr	ip, [pc, #104]	; 150d0 <init_node_id@@Base+0x70>
   15064:	add	r3, pc, #84	; 0x54
   15068:	vld1.64	{d16-d17}, [r3 :128]
   1506c:	add	ip, pc, ip
   15070:	vld1.64	{d18-d19}, [ip :128]
   15074:	ldr	r3, [pc, #88]	; 150d4 <init_node_id@@Base+0x74>
   15078:	ldr	r2, [pc, #88]	; 150d8 <init_node_id@@Base+0x78>
   1507c:	add	r2, pc, r2
   15080:	add	r3, pc, r3
   15084:	vadd.i64	q9, q9, q8
   15088:	vld1.64	{d20-d21}, [r2 :128]
   1508c:	vld1.64	{d22-d23}, [r3 :128]
   15090:	vst1.64	{d18-d19}, [ip :128]
   15094:	vadd.i64	q10, q10, q8
   15098:	vadd.i64	q8, q11, q8
   1509c:	vst1.64	{d20-d21}, [r2 :128]
   150a0:	mov	r2, #0
   150a4:	vst1.64	{d16-d17}, [r3 :128]
   150a8:	str	r2, [r0]
   150ac:	str	r2, [r0, #4]
   150b0:	str	r1, [r0, #8]
   150b4:	bx	lr
   150b8:	nop	{0}
   150bc:	nop	{0}
   150c0:	andeq	r0, r0, r1
   150c4:	andeq	r0, r0, r0
   150c8:	andeq	r0, r0, r1
   150cc:	andeq	r0, r0, r0
   150d0:	strdeq	r8, [r1], -ip
   150d4:	andeq	r8, r1, r8, asr #15
   150d8:	ldrdeq	r8, [r1], -ip
   150dc:	nop	{0}

000150e0 <init_node_int@@Base>:
   150e0:	ldr	ip, [pc, #104]	; 15150 <init_node_int@@Base+0x70>
   150e4:	add	r3, pc, #84	; 0x54
   150e8:	vld1.64	{d16-d17}, [r3 :128]
   150ec:	add	ip, pc, ip
   150f0:	vld1.64	{d18-d19}, [ip :128]
   150f4:	ldr	r3, [pc, #88]	; 15154 <init_node_int@@Base+0x74>
   150f8:	ldr	r2, [pc, #88]	; 15158 <init_node_int@@Base+0x78>
   150fc:	add	r3, pc, r3
   15100:	add	r2, pc, r2
   15104:	vadd.i64	q9, q9, q8
   15108:	vld1.64	{d20-d21}, [r2 :128]
   1510c:	vld1.64	{d22-d23}, [r3 :128]
   15110:	vst1.64	{d18-d19}, [ip :128]
   15114:	vadd.i64	q10, q10, q8
   15118:	vadd.i64	q8, q11, q8
   1511c:	vst1.64	{d20-d21}, [r2 :128]
   15120:	vst1.64	{d16-d17}, [r3 :128]
   15124:	mov	r3, #1
   15128:	mov	r2, #0
   1512c:	str	r3, [r0]
   15130:	str	r2, [r0, #4]
   15134:	str	r1, [r0, #8]
   15138:	bx	lr
   1513c:	nop	{0}
   15140:	andeq	r0, r0, r1
   15144:	andeq	r0, r0, r0
   15148:	andeq	r0, r0, r1
   1514c:	andeq	r0, r0, r0
   15150:	andeq	r8, r1, ip, lsl #15
   15154:	andeq	r8, r1, ip, asr #14
   15158:	andeq	r8, r1, r8, asr r7
   1515c:	nop	{0}

00015160 <init_node_function@@Base>:
   15160:	push	{fp, lr}
   15164:	mov	fp, sp
   15168:	ldr	ip, [pc, #112]	; 151e0 <init_node_function@@Base+0x80>
   1516c:	add	r3, pc, #92	; 0x5c
   15170:	vld1.64	{d16-d17}, [r3 :128]
   15174:	add	ip, pc, ip
   15178:	vld1.64	{d18-d19}, [ip :128]
   1517c:	ldr	lr, [pc, #96]	; 151e4 <init_node_function@@Base+0x84>
   15180:	ldr	r3, [pc, #96]	; 151e8 <init_node_function@@Base+0x88>
   15184:	add	r3, pc, r3
   15188:	add	lr, pc, lr
   1518c:	vadd.i64	q9, q9, q8
   15190:	vld1.64	{d20-d21}, [r3 :128]
   15194:	vld1.64	{d22-d23}, [lr :128]
   15198:	vst1.64	{d18-d19}, [ip :128]
   1519c:	mov	ip, #0
   151a0:	vadd.i64	q10, q10, q8
   151a4:	vadd.i64	q8, q11, q8
   151a8:	vst1.64	{d20-d21}, [r3 :128]
   151ac:	mov	r3, #2
   151b0:	vst1.64	{d16-d17}, [lr :128]
   151b4:	stm	r0, {r3, ip}
   151b8:	str	r1, [r0, #8]
   151bc:	str	r2, [r0, #12]
   151c0:	pop	{fp, pc}
   151c4:	nop	{0}
   151c8:	nop	{0}
   151cc:	nop	{0}
   151d0:	andeq	r0, r0, r1
   151d4:	andeq	r0, r0, r0
   151d8:	andeq	r0, r0, r1
   151dc:	andeq	r0, r0, r0
   151e0:	andeq	r8, r1, r4, lsl r7
   151e4:	andeq	r8, r1, r0, asr #13
   151e8:	ldrdeq	r8, [r1], -r4
   151ec:	nop	{0}

000151f0 <init_node_return@@Base>:
   151f0:	ldr	ip, [pc, #104]	; 15260 <init_node_return@@Base+0x70>
   151f4:	add	r3, pc, #84	; 0x54
   151f8:	vld1.64	{d16-d17}, [r3 :128]
   151fc:	add	ip, pc, ip
   15200:	vld1.64	{d18-d19}, [ip :128]
   15204:	ldr	r3, [pc, #88]	; 15264 <init_node_return@@Base+0x74>
   15208:	ldr	r2, [pc, #88]	; 15268 <init_node_return@@Base+0x78>
   1520c:	add	r3, pc, r3
   15210:	add	r2, pc, r2
   15214:	vadd.i64	q9, q9, q8
   15218:	vld1.64	{d20-d21}, [r2 :128]
   1521c:	vld1.64	{d22-d23}, [r3 :128]
   15220:	vst1.64	{d18-d19}, [ip :128]
   15224:	vadd.i64	q10, q10, q8
   15228:	vadd.i64	q8, q11, q8
   1522c:	vst1.64	{d20-d21}, [r2 :128]
   15230:	vst1.64	{d16-d17}, [r3 :128]
   15234:	mov	r3, #3
   15238:	mov	r2, #0
   1523c:	str	r3, [r0]
   15240:	str	r2, [r0, #4]
   15244:	str	r1, [r0, #8]
   15248:	bx	lr
   1524c:	nop	{0}
   15250:	andeq	r0, r0, r1
   15254:	andeq	r0, r0, r0
   15258:	andeq	r0, r0, r1
   1525c:	andeq	r0, r0, r0
   15260:	muleq	r1, ip, r6
   15264:	andeq	r8, r1, ip, lsr r6
   15268:	andeq	r8, r1, r8, asr #12
   1526c:	nop	{0}

00015270 <init_node_if@@Base>:
   15270:	push	{r4, sl, fp, lr}
   15274:	add	fp, sp, #8
   15278:	ldr	ip, [pc, #96]	; 152e0 <init_node_if@@Base+0x70>
   1527c:	add	lr, pc, #76	; 0x4c
   15280:	vld1.64	{d16-d17}, [lr :128]
   15284:	add	ip, pc, ip
   15288:	vld1.64	{d18-d19}, [ip :128]
   1528c:	ldr	lr, [pc, #80]	; 152e4 <init_node_if@@Base+0x74>
   15290:	ldr	r4, [pc, #80]	; 152e8 <init_node_if@@Base+0x78>
   15294:	add	r4, pc, r4
   15298:	add	lr, pc, lr
   1529c:	vadd.i64	q9, q9, q8
   152a0:	vld1.64	{d20-d21}, [r4 :128]
   152a4:	vld1.64	{d22-d23}, [lr :128]
   152a8:	vst1.64	{d18-d19}, [ip :128]
   152ac:	mov	ip, #0
   152b0:	vadd.i64	q10, q10, q8
   152b4:	vadd.i64	q8, q11, q8
   152b8:	vst1.64	{d20-d21}, [r4 :128]
   152bc:	mov	r4, #4
   152c0:	vst1.64	{d16-d17}, [lr :128]
   152c4:	stmia	r0!, {r4, ip}
   152c8:	stm	r0, {r1, r2, r3}
   152cc:	pop	{r4, sl, fp, pc}
   152d0:	andeq	r0, r0, r1
   152d4:	andeq	r0, r0, r0
   152d8:	andeq	r0, r0, r1
   152dc:	andeq	r0, r0, r0
   152e0:	andeq	r8, r1, r4, lsr #12
   152e4:			; <UNDEFINED> instruction: 0x000185b0
   152e8:	andeq	r8, r1, r4, asr #11
   152ec:	nop	{0}

000152f0 <init_node_boolean_operator@@Base>:
   152f0:	push	{r4, sl, fp, lr}
   152f4:	add	fp, sp, #8
   152f8:	ldr	ip, [pc, #112]	; 15370 <init_node_boolean_operator@@Base+0x80>
   152fc:	add	lr, pc, #92	; 0x5c
   15300:	vld1.64	{d16-d17}, [lr :128]
   15304:	add	ip, pc, ip
   15308:	vld1.64	{d18-d19}, [ip :128]
   1530c:	ldr	lr, [pc, #96]	; 15374 <init_node_boolean_operator@@Base+0x84>
   15310:	ldr	r4, [pc, #96]	; 15378 <init_node_boolean_operator@@Base+0x88>
   15314:	add	r4, pc, r4
   15318:	add	lr, pc, lr
   1531c:	vadd.i64	q9, q9, q8
   15320:	vld1.64	{d20-d21}, [r4 :128]
   15324:	vld1.64	{d22-d23}, [lr :128]
   15328:	vst1.64	{d18-d19}, [ip :128]
   1532c:	mov	ip, #0
   15330:	vadd.i64	q10, q10, q8
   15334:	vadd.i64	q8, q11, q8
   15338:	vst1.64	{d20-d21}, [r4 :128]
   1533c:	mov	r4, #5
   15340:	vst1.64	{d16-d17}, [lr :128]
   15344:	stm	r0, {r4, ip}
   15348:	str	r2, [r0, #8]
   1534c:	str	r3, [r0, #12]
   15350:	str	r1, [r0, #16]
   15354:	pop	{r4, sl, fp, pc}
   15358:	nop	{0}
   1535c:	nop	{0}
   15360:	andeq	r0, r0, r1
   15364:	andeq	r0, r0, r0
   15368:	andeq	r0, r0, r1
   1536c:	andeq	r0, r0, r0
   15370:			; <UNDEFINED> instruction: 0x000185b4
   15374:	andeq	r8, r1, r0, lsr r5
   15378:	andeq	r8, r1, r4, asr #10

0001537c <free_node@@Base>:
   1537c:	push	{r4, r5, r6, sl, fp, lr}
   15380:	add	fp, sp, #16
   15384:	mov	r4, r0
   15388:	ldr	r0, [pc, #876]	; 156fc <free_node@@Base+0x380>
   1538c:	mov	r1, #0
   15390:	add	r0, pc, r0
   15394:	str	r1, [r0]
   15398:	ldr	r5, [pc, #864]	; 15700 <free_node@@Base+0x384>
   1539c:	ldr	r0, [pc, #864]	; 15704 <free_node@@Base+0x388>
   153a0:	ldr	r0, [pc, r0]
   153a4:	add	r5, pc, r5
   153a8:	adds	r0, r0, #1
   153ac:	str	r0, [r5]
   153b0:	ldr	r0, [r5, #4]
   153b4:	adc	r0, r0, #0
   153b8:	str	r0, [r5, #4]
   153bc:	ldr	r0, [r4]
   153c0:	cmp	r0, #5
   153c4:	bhi	156c0 <free_node@@Base+0x344>
   153c8:	add	r1, pc, #4
   153cc:	ldr	r0, [r1, r0, lsl #2]
   153d0:	add	pc, r1, r0
   153d4:	andeq	r0, r0, r8, lsl r0
   153d8:	andeq	r0, r0, r8, lsr r1
   153dc:	andeq	r0, r0, r8, lsl #1
   153e0:	andeq	r0, r0, r4, ror r1
   153e4:	andeq	r0, r0, r4, asr r0
   153e8:	andeq	r0, r0, ip, lsl r2
   153ec:	ldr	r0, [pc, #788]	; 15708 <free_node@@Base+0x38c>
   153f0:	add	r0, pc, r0
   153f4:	add	r1, r0, #4
   153f8:	ldr	r0, [pc, #780]	; 1570c <free_node@@Base+0x390>
   153fc:	add	r0, pc, r0
   15400:	bl	15f30 <get_boolean_op_value@@Base+0x3e8>
   15404:	ldrd	r0, [r5, #64]	; 0x40
   15408:	ldr	r6, [pc, #768]	; 15710 <free_node@@Base+0x394>
   1540c:	ldr	r2, [pc, #768]	; 15714 <free_node@@Base+0x398>
   15410:	ldr	r2, [pc, r2]
   15414:	adds	r0, r0, #1
   15418:	add	r6, pc, r6
   1541c:	adc	r1, r1, #0
   15420:	strd	r0, [r5, #64]	; 0x40
   15424:	b	15580 <free_node@@Base+0x204>
   15428:	ldr	r0, [pc, #824]	; 15768 <free_node@@Base+0x3ec>
   1542c:	add	r0, pc, r0
   15430:	add	r1, r0, #20
   15434:	ldr	r0, [pc, #816]	; 1576c <free_node@@Base+0x3f0>
   15438:	add	r0, pc, r0
   1543c:	bl	15f30 <get_boolean_op_value@@Base+0x3e8>
   15440:	ldrd	r0, [r5, #96]	; 0x60
   15444:	adds	r0, r0, #1
   15448:	adc	r1, r1, #0
   1544c:	strd	r0, [r5, #96]	; 0x60
   15450:	mov	r0, r4
   15454:	bl	159e8 <free_node_if@@Base>
   15458:	b	156ac <free_node@@Base+0x330>
   1545c:	ldr	r0, [pc, #708]	; 15728 <free_node@@Base+0x3ac>
   15460:	add	r0, pc, r0
   15464:	add	r1, r0, #12
   15468:	ldr	r0, [pc, #700]	; 1572c <free_node@@Base+0x3b0>
   1546c:	add	r0, pc, r0
   15470:	bl	15f30 <get_boolean_op_value@@Base+0x3e8>
   15474:	ldrd	r0, [r5, #80]	; 0x50
   15478:	ldr	r6, [pc, #688]	; 15730 <free_node@@Base+0x3b4>
   1547c:	ldr	r2, [pc, #688]	; 15734 <free_node@@Base+0x3b8>
   15480:	adds	r0, r0, #1
   15484:	add	r6, pc, r6
   15488:	ldr	r2, [pc, r2]
   1548c:	adc	r1, r1, #0
   15490:	strd	r0, [r5, #80]	; 0x50
   15494:	ldr	r0, [r6, #4]
   15498:	mov	r1, #16
   1549c:	adds	r2, r2, #1
   154a0:	str	r2, [r6]
   154a4:	mov	r2, r6
   154a8:	adc	r0, r0, #0
   154ac:	str	r0, [r6, #4]
   154b0:	ldr	r0, [r4, #4]
   154b4:	cmp	r0, #0
   154b8:	movwne	r1, #8
   154bc:	ldr	r1, [r2, r1]!
   154c0:	adds	r1, r1, #1
   154c4:	str	r1, [r2]
   154c8:	ldr	r1, [r2, #4]
   154cc:	adc	r1, r1, #0
   154d0:	cmp	r0, #0
   154d4:	str	r1, [r2, #4]
   154d8:	beq	154f0 <free_node@@Base+0x174>
   154dc:	ldrd	r2, [r6, #24]
   154e0:	adds	r2, r2, #1
   154e4:	adc	r3, r3, #0
   154e8:	strd	r2, [r6, #24]
   154ec:	bl	1537c <free_node@@Base>
   154f0:	ldrd	r0, [r6, #32]
   154f4:	adds	r0, r0, #1
   154f8:	adc	r1, r1, #0
   154fc:	strd	r0, [r6, #32]
   15500:	ldr	r0, [r4, #8]
   15504:	bl	11ef0 <free@plt>
   15508:	b	156a4 <free_node@@Base+0x328>
   1550c:	ldr	r0, [pc, #516]	; 15718 <free_node@@Base+0x39c>
   15510:	add	r0, pc, r0
   15514:	add	r1, r0, #8
   15518:	ldr	r0, [pc, #508]	; 1571c <free_node@@Base+0x3a0>
   1551c:	add	r0, pc, r0
   15520:	bl	15f30 <get_boolean_op_value@@Base+0x3e8>
   15524:	ldrd	r0, [r5, #72]	; 0x48
   15528:	ldr	r6, [pc, #496]	; 15720 <free_node@@Base+0x3a4>
   1552c:	ldr	r2, [pc, #496]	; 15724 <free_node@@Base+0x3a8>
   15530:	ldr	r2, [pc, r2]
   15534:	adds	r0, r0, #1
   15538:	add	r6, pc, r6
   1553c:	adc	r1, r1, #0
   15540:	strd	r0, [r5, #72]	; 0x48
   15544:	b	15580 <free_node@@Base+0x204>
   15548:	ldr	r0, [pc, #488]	; 15738 <free_node@@Base+0x3bc>
   1554c:	add	r0, pc, r0
   15550:	add	r1, r0, #16
   15554:	ldr	r0, [pc, #480]	; 1573c <free_node@@Base+0x3c0>
   15558:	add	r0, pc, r0
   1555c:	bl	15f30 <get_boolean_op_value@@Base+0x3e8>
   15560:	ldrd	r0, [r5, #88]	; 0x58
   15564:	ldr	r6, [pc, #468]	; 15740 <free_node@@Base+0x3c4>
   15568:	ldr	r2, [pc, #468]	; 15744 <free_node@@Base+0x3c8>
   1556c:	ldr	r2, [pc, r2]
   15570:	adds	r0, r0, #1
   15574:	add	r6, pc, r6
   15578:	adc	r1, r1, #0
   1557c:	strd	r0, [r5, #88]	; 0x58
   15580:	adds	r2, r2, #1
   15584:	str	r2, [r6]
   15588:	ldr	r0, [r6, #4]
   1558c:	mov	r1, #16
   15590:	mov	r2, r6
   15594:	adc	r0, r0, #0
   15598:	str	r0, [r6, #4]
   1559c:	ldr	r0, [r4, #4]
   155a0:	cmp	r0, #0
   155a4:	movwne	r1, #8
   155a8:	ldr	r1, [r2, r1]!
   155ac:	adds	r1, r1, #1
   155b0:	str	r1, [r2]
   155b4:	ldr	r1, [r2, #4]
   155b8:	adc	r1, r1, #0
   155bc:	cmp	r0, #0
   155c0:	str	r1, [r2, #4]
   155c4:	beq	155dc <free_node@@Base+0x260>
   155c8:	ldrd	r2, [r6, #24]
   155cc:	adds	r2, r2, #1
   155d0:	adc	r3, r3, #0
   155d4:	strd	r2, [r6, #24]
   155d8:	bl	1537c <free_node@@Base>
   155dc:	ldrd	r0, [r6, #32]
   155e0:	adds	r0, r0, #1
   155e4:	adc	r1, r1, #0
   155e8:	strd	r0, [r6, #32]
   155ec:	b	156a4 <free_node@@Base+0x328>
   155f0:	ldr	r0, [pc, #336]	; 15748 <free_node@@Base+0x3cc>
   155f4:	add	r0, pc, r0
   155f8:	add	r1, r0, #24
   155fc:	ldr	r0, [pc, #328]	; 1574c <free_node@@Base+0x3d0>
   15600:	add	r0, pc, r0
   15604:	bl	15f30 <get_boolean_op_value@@Base+0x3e8>
   15608:	ldrd	r0, [r5, #104]	; 0x68
   1560c:	ldr	r6, [pc, #316]	; 15750 <free_node@@Base+0x3d4>
   15610:	ldr	r2, [pc, #316]	; 15754 <free_node@@Base+0x3d8>
   15614:	adds	r0, r0, #1
   15618:	add	r6, pc, r6
   1561c:	ldr	r2, [pc, r2]
   15620:	adc	r1, r1, #0
   15624:	strd	r0, [r5, #104]	; 0x68
   15628:	ldr	r0, [r6, #4]
   1562c:	mov	r1, #16
   15630:	adds	r2, r2, #1
   15634:	str	r2, [r6]
   15638:	mov	r2, r6
   1563c:	adc	r0, r0, #0
   15640:	str	r0, [r6, #4]
   15644:	ldr	r0, [r4, #4]
   15648:	cmp	r0, #0
   1564c:	movwne	r1, #8
   15650:	ldr	r1, [r2, r1]!
   15654:	adds	r1, r1, #1
   15658:	str	r1, [r2]
   1565c:	ldr	r1, [r2, #4]
   15660:	adc	r1, r1, #0
   15664:	cmp	r0, #0
   15668:	str	r1, [r2, #4]
   1566c:	beq	15684 <free_node@@Base+0x308>
   15670:	ldrd	r2, [r6, #24]
   15674:	adds	r2, r2, #1
   15678:	adc	r3, r3, #0
   1567c:	strd	r2, [r6, #24]
   15680:	bl	1537c <free_node@@Base>
   15684:	ldrd	r0, [r6, #32]
   15688:	adds	r0, r0, #1
   1568c:	adc	r1, r1, #0
   15690:	strd	r0, [r6, #32]
   15694:	ldr	r0, [r4, #8]
   15698:	bl	1537c <free_node@@Base>
   1569c:	ldr	r0, [r4, #12]
   156a0:	bl	1537c <free_node@@Base>
   156a4:	mov	r0, r4
   156a8:	bl	11ef0 <free@plt>
   156ac:	ldrd	r0, [r5, #112]	; 0x70
   156b0:	adds	r0, r0, #1
   156b4:	adc	r1, r1, #0
   156b8:	strd	r0, [r5, #112]	; 0x70
   156bc:	pop	{r4, r5, r6, sl, fp, pc}
   156c0:	ldr	r0, [pc, #144]	; 15758 <free_node@@Base+0x3dc>
   156c4:	ldr	r1, [pc, #144]	; 1575c <free_node@@Base+0x3e0>
   156c8:	add	r0, pc, r0
   156cc:	add	r1, pc, r1
   156d0:	bl	15f30 <get_boolean_op_value@@Base+0x3e8>
   156d4:	ldr	r0, [pc, #132]	; 15760 <free_node@@Base+0x3e4>
   156d8:	mov	r1, #31
   156dc:	mov	r2, #1
   156e0:	ldr	r0, [pc, r0]
   156e4:	ldr	r3, [r0]
   156e8:	ldr	r0, [pc, #116]	; 15764 <free_node@@Base+0x3e8>
   156ec:	add	r0, pc, r0
   156f0:	bl	11f44 <fwrite@plt>
   156f4:	mov	r0, #1
   156f8:	bl	11fa4 <exit@plt>
   156fc:	andeq	r7, r1, r0, asr #26
   15700:	andeq	r8, r1, r4, lsr #10
   15704:	andeq	r8, r1, r8, lsr #10
   15708:	andeq	r7, r1, r8, lsl r6
   1570c:	ldrdeq	r7, [r1], -r4
   15710:	andeq	r8, r1, r0, lsr r5
   15714:	andeq	r8, r1, r8, lsr r5
   15718:	strdeq	r7, [r1], -r8
   1571c:			; <UNDEFINED> instruction: 0x00017bb4
   15720:	andeq	r8, r1, r0, asr #8
   15724:	andeq	r8, r1, r8, asr #8
   15728:	andeq	r7, r1, r8, lsr #11
   1572c:	andeq	r7, r1, r4, ror #24
   15730:	andeq	r8, r1, r4, lsr #10
   15734:	andeq	r8, r1, r0, lsr #10
   15738:			; <UNDEFINED> instruction: 0x000174bc
   1573c:	andeq	r7, r1, r8, ror fp
   15740:	andeq	r8, r1, r4, ror #8
   15744:	andeq	r8, r1, ip, ror #8
   15748:	andeq	r7, r1, r4, lsl r4
   1574c:	ldrdeq	r7, [r1], -r0
   15750:	andeq	r8, r1, r0, lsr #8
   15754:	andeq	r8, r1, ip, lsl r4
   15758:	andeq	r7, r1, r8, lsl #20
   1575c:	andeq	r7, r1, ip, lsr r3
   15760:	ldrdeq	r7, [r1], -r8
   15764:	ldrdeq	r6, [r0], -pc	; <UNPREDICTABLE>
   15768:	ldrdeq	r7, [r1], -ip
   1576c:	muleq	r1, r8, ip

00015770 <free_node_id@@Base>:
   15770:	push	{r4, r5, fp, lr}
   15774:	add	fp, sp, #8
   15778:	ldr	r5, [pc, #132]	; 15804 <free_node_id@@Base+0x94>
   1577c:	mov	r4, r0
   15780:	ldr	r0, [pc, #128]	; 15808 <free_node_id@@Base+0x98>
   15784:	mov	r1, #16
   15788:	ldr	r0, [pc, r0]
   1578c:	add	r5, pc, r5
   15790:	mov	r2, r5
   15794:	adds	r0, r0, #1
   15798:	str	r0, [r5]
   1579c:	ldr	r0, [r5, #4]
   157a0:	adc	r0, r0, #0
   157a4:	str	r0, [r5, #4]
   157a8:	ldr	r0, [r4, #4]
   157ac:	cmp	r0, #0
   157b0:	movwne	r1, #8
   157b4:	ldr	r1, [r2, r1]!
   157b8:	adds	r1, r1, #1
   157bc:	str	r1, [r2]
   157c0:	ldr	r1, [r2, #4]
   157c4:	adc	r1, r1, #0
   157c8:	cmp	r0, #0
   157cc:	str	r1, [r2, #4]
   157d0:	beq	157e8 <free_node_id@@Base+0x78>
   157d4:	ldrd	r2, [r5, #24]
   157d8:	adds	r2, r2, #1
   157dc:	adc	r3, r3, #0
   157e0:	strd	r2, [r5, #24]
   157e4:	bl	1537c <free_node@@Base>
   157e8:	ldrd	r0, [r5, #32]
   157ec:	adds	r0, r0, #1
   157f0:	adc	r1, r1, #0
   157f4:	strd	r0, [r5, #32]
   157f8:	mov	r0, r4
   157fc:	pop	{r4, r5, fp, lr}
   15800:	b	11ef0 <free@plt>
   15804:			; <UNDEFINED> instruction: 0x000181bc
   15808:	andeq	r8, r1, r0, asr #3

0001580c <free_node_int@@Base>:
   1580c:	push	{r4, r5, fp, lr}
   15810:	add	fp, sp, #8
   15814:	ldr	r5, [pc, #132]	; 158a0 <free_node_int@@Base+0x94>
   15818:	mov	r4, r0
   1581c:	ldr	r0, [pc, #128]	; 158a4 <free_node_int@@Base+0x98>
   15820:	mov	r1, #16
   15824:	ldr	r0, [pc, r0]
   15828:	add	r5, pc, r5
   1582c:	mov	r2, r5
   15830:	adds	r0, r0, #1
   15834:	str	r0, [r5]
   15838:	ldr	r0, [r5, #4]
   1583c:	adc	r0, r0, #0
   15840:	str	r0, [r5, #4]
   15844:	ldr	r0, [r4, #4]
   15848:	cmp	r0, #0
   1584c:	movwne	r1, #8
   15850:	ldr	r1, [r2, r1]!
   15854:	adds	r1, r1, #1
   15858:	str	r1, [r2]
   1585c:	ldr	r1, [r2, #4]
   15860:	adc	r1, r1, #0
   15864:	cmp	r0, #0
   15868:	str	r1, [r2, #4]
   1586c:	beq	15884 <free_node_int@@Base+0x78>
   15870:	ldrd	r2, [r5, #24]
   15874:	adds	r2, r2, #1
   15878:	adc	r3, r3, #0
   1587c:	strd	r2, [r5, #24]
   15880:	bl	1537c <free_node@@Base>
   15884:	ldrd	r0, [r5, #32]
   15888:	adds	r0, r0, #1
   1588c:	adc	r1, r1, #0
   15890:	strd	r0, [r5, #32]
   15894:	mov	r0, r4
   15898:	pop	{r4, r5, fp, lr}
   1589c:	b	11ef0 <free@plt>
   158a0:	andeq	r8, r1, r0, asr r1
   158a4:	andeq	r8, r1, r4, asr r1

000158a8 <free_node_function@@Base>:
   158a8:	push	{r4, r5, fp, lr}
   158ac:	add	fp, sp, #8
   158b0:	ldr	r5, [pc, #140]	; 15944 <free_node_function@@Base+0x9c>
   158b4:	mov	r4, r0
   158b8:	ldr	r0, [pc, #136]	; 15948 <free_node_function@@Base+0xa0>
   158bc:	mov	r1, #16
   158c0:	ldr	r0, [pc, r0]
   158c4:	add	r5, pc, r5
   158c8:	mov	r2, r5
   158cc:	adds	r0, r0, #1
   158d0:	str	r0, [r5]
   158d4:	ldr	r0, [r5, #4]
   158d8:	adc	r0, r0, #0
   158dc:	str	r0, [r5, #4]
   158e0:	ldr	r0, [r4, #4]
   158e4:	cmp	r0, #0
   158e8:	movwne	r1, #8
   158ec:	ldr	r1, [r2, r1]!
   158f0:	adds	r1, r1, #1
   158f4:	str	r1, [r2]
   158f8:	ldr	r1, [r2, #4]
   158fc:	adc	r1, r1, #0
   15900:	cmp	r0, #0
   15904:	str	r1, [r2, #4]
   15908:	beq	15920 <free_node_function@@Base+0x78>
   1590c:	ldrd	r2, [r5, #24]
   15910:	adds	r2, r2, #1
   15914:	adc	r3, r3, #0
   15918:	strd	r2, [r5, #24]
   1591c:	bl	1537c <free_node@@Base>
   15920:	ldrd	r0, [r5, #32]
   15924:	adds	r0, r0, #1
   15928:	adc	r1, r1, #0
   1592c:	strd	r0, [r5, #32]
   15930:	ldr	r0, [r4, #8]
   15934:	bl	11ef0 <free@plt>
   15938:	mov	r0, r4
   1593c:	pop	{r4, r5, fp, lr}
   15940:	b	11ef0 <free@plt>
   15944:	andeq	r8, r1, r4, ror #1
   15948:	andeq	r8, r1, r8, ror #1

0001594c <free_node_return@@Base>:
   1594c:	push	{r4, r5, fp, lr}
   15950:	add	fp, sp, #8
   15954:	ldr	r5, [pc, #132]	; 159e0 <free_node_return@@Base+0x94>
   15958:	mov	r4, r0
   1595c:	ldr	r0, [pc, #128]	; 159e4 <free_node_return@@Base+0x98>
   15960:	mov	r1, #16
   15964:	ldr	r0, [pc, r0]
   15968:	add	r5, pc, r5
   1596c:	mov	r2, r5
   15970:	adds	r0, r0, #1
   15974:	str	r0, [r5]
   15978:	ldr	r0, [r5, #4]
   1597c:	adc	r0, r0, #0
   15980:	str	r0, [r5, #4]
   15984:	ldr	r0, [r4, #4]
   15988:	cmp	r0, #0
   1598c:	movwne	r1, #8
   15990:	ldr	r1, [r2, r1]!
   15994:	adds	r1, r1, #1
   15998:	str	r1, [r2]
   1599c:	ldr	r1, [r2, #4]
   159a0:	adc	r1, r1, #0
   159a4:	cmp	r0, #0
   159a8:	str	r1, [r2, #4]
   159ac:	beq	159c4 <free_node_return@@Base+0x78>
   159b0:	ldrd	r2, [r5, #24]
   159b4:	adds	r2, r2, #1
   159b8:	adc	r3, r3, #0
   159bc:	strd	r2, [r5, #24]
   159c0:	bl	1537c <free_node@@Base>
   159c4:	ldrd	r0, [r5, #32]
   159c8:	adds	r0, r0, #1
   159cc:	adc	r1, r1, #0
   159d0:	strd	r0, [r5, #32]
   159d4:	mov	r0, r4
   159d8:	pop	{r4, r5, fp, lr}
   159dc:	b	11ef0 <free@plt>
   159e0:	andeq	r8, r1, r0, ror r0
   159e4:	andeq	r8, r1, r4, ror r0

000159e8 <free_node_if@@Base>:
   159e8:	push	{r4, r5, fp, lr}
   159ec:	add	fp, sp, #8
   159f0:	ldr	r5, [pc, #156]	; 15a94 <free_node_if@@Base+0xac>
   159f4:	mov	r4, r0
   159f8:	ldr	r0, [pc, #152]	; 15a98 <free_node_if@@Base+0xb0>
   159fc:	mov	r1, #16
   15a00:	ldr	r0, [pc, r0]
   15a04:	add	r5, pc, r5
   15a08:	mov	r2, r5
   15a0c:	adds	r0, r0, #1
   15a10:	str	r0, [r5]
   15a14:	ldr	r0, [r5, #4]
   15a18:	adc	r0, r0, #0
   15a1c:	str	r0, [r5, #4]
   15a20:	ldr	r0, [r4, #4]
   15a24:	cmp	r0, #0
   15a28:	movwne	r1, #8
   15a2c:	ldr	r1, [r2, r1]!
   15a30:	adds	r1, r1, #1
   15a34:	str	r1, [r2]
   15a38:	ldr	r1, [r2, #4]
   15a3c:	adc	r1, r1, #0
   15a40:	cmp	r0, #0
   15a44:	str	r1, [r2, #4]
   15a48:	beq	15a60 <free_node_if@@Base+0x78>
   15a4c:	ldrd	r2, [r5, #24]
   15a50:	adds	r2, r2, #1
   15a54:	adc	r3, r3, #0
   15a58:	strd	r2, [r5, #24]
   15a5c:	bl	1537c <free_node@@Base>
   15a60:	ldrd	r0, [r5, #32]
   15a64:	adds	r0, r0, #1
   15a68:	adc	r1, r1, #0
   15a6c:	strd	r0, [r5, #32]
   15a70:	ldr	r0, [r4, #8]
   15a74:	bl	1537c <free_node@@Base>
   15a78:	ldr	r0, [r4, #12]
   15a7c:	bl	1537c <free_node@@Base>
   15a80:	ldr	r0, [r4, #16]
   15a84:	bl	1537c <free_node@@Base>
   15a88:	mov	r0, r4
   15a8c:	pop	{r4, r5, fp, lr}
   15a90:	b	11ef0 <free@plt>
   15a94:	andeq	r8, r1, r4
   15a98:	andeq	r8, r1, r8

00015a9c <free_node_boolean_operator@@Base>:
   15a9c:	push	{r4, r5, fp, lr}
   15aa0:	add	fp, sp, #8
   15aa4:	ldr	r5, [pc, #148]	; 15b40 <free_node_boolean_operator@@Base+0xa4>
   15aa8:	mov	r4, r0
   15aac:	ldr	r0, [pc, #144]	; 15b44 <free_node_boolean_operator@@Base+0xa8>
   15ab0:	mov	r1, #16
   15ab4:	ldr	r0, [pc, r0]
   15ab8:	add	r5, pc, r5
   15abc:	mov	r2, r5
   15ac0:	adds	r0, r0, #1
   15ac4:	str	r0, [r5]
   15ac8:	ldr	r0, [r5, #4]
   15acc:	adc	r0, r0, #0
   15ad0:	str	r0, [r5, #4]
   15ad4:	ldr	r0, [r4, #4]
   15ad8:	cmp	r0, #0
   15adc:	movwne	r1, #8
   15ae0:	ldr	r1, [r2, r1]!
   15ae4:	adds	r1, r1, #1
   15ae8:	str	r1, [r2]
   15aec:	ldr	r1, [r2, #4]
   15af0:	adc	r1, r1, #0
   15af4:	cmp	r0, #0
   15af8:	str	r1, [r2, #4]
   15afc:	beq	15b14 <free_node_boolean_operator@@Base+0x78>
   15b00:	ldrd	r2, [r5, #24]
   15b04:	adds	r2, r2, #1
   15b08:	adc	r3, r3, #0
   15b0c:	strd	r2, [r5, #24]
   15b10:	bl	1537c <free_node@@Base>
   15b14:	ldrd	r0, [r5, #32]
   15b18:	adds	r0, r0, #1
   15b1c:	adc	r1, r1, #0
   15b20:	strd	r0, [r5, #32]
   15b24:	ldr	r0, [r4, #8]
   15b28:	bl	1537c <free_node@@Base>
   15b2c:	ldr	r0, [r4, #12]
   15b30:	bl	1537c <free_node@@Base>
   15b34:	mov	r0, r4
   15b38:	pop	{r4, r5, fp, lr}
   15b3c:	b	11ef0 <free@plt>
   15b40:	andeq	r7, r1, r0, lsl #31
   15b44:	andeq	r7, r1, r4, lsl #31

00015b48 <get_boolean_op_value@@Base>:
   15b48:	push	{r4, r5, r6, sl, fp, lr}
   15b4c:	add	fp, sp, #16
   15b50:	ldr	r6, [pc, #908]	; 15ee4 <get_boolean_op_value@@Base+0x39c>
   15b54:	ldr	r1, [pc, #908]	; 15ee8 <get_boolean_op_value@@Base+0x3a0>
   15b58:	ldr	r1, [pc, r1]
   15b5c:	add	r6, pc, r6
   15b60:	adds	r1, r1, #1
   15b64:	str	r1, [r6]
   15b68:	ldr	r1, [r6, #4]
   15b6c:	adc	r1, r1, #0
   15b70:	str	r1, [r6, #4]
   15b74:	mov	r1, #2
   15b78:	ldr	r4, [r0, #4]
   15b7c:	mov	r0, r4
   15b80:	bl	12034 <strnlen@plt>
   15b84:	mov	r1, #16
   15b88:	cmp	r0, #2
   15b8c:	mov	r2, r6
   15b90:	movweq	r1, #8
   15b94:	ldr	r1, [r2, r1]!
   15b98:	adds	r1, r1, #1
   15b9c:	str	r1, [r2]
   15ba0:	ldr	r1, [r2, #4]
   15ba4:	adc	r1, r1, #0
   15ba8:	cmp	r0, #2
   15bac:	str	r1, [r2, #4]
   15bb0:	bne	15d68 <get_boolean_op_value@@Base+0x220>
   15bb4:	ldr	r1, [pc, #816]	; 15eec <get_boolean_op_value@@Base+0x3a4>
   15bb8:	mov	r0, r4
   15bbc:	mov	r2, #2
   15bc0:	add	r1, pc, r1
   15bc4:	bl	12094 <strncmp@plt>
   15bc8:	mov	r1, #32
   15bcc:	cmp	r0, #0
   15bd0:	mov	r2, r6
   15bd4:	movweq	r1, #24
   15bd8:	ldr	r1, [r2, r1]!
   15bdc:	adds	r1, r1, #1
   15be0:	str	r1, [r2]
   15be4:	ldr	r1, [r2, #4]
   15be8:	adc	r1, r1, #0
   15bec:	cmp	r0, #0
   15bf0:	str	r1, [r2, #4]
   15bf4:	beq	15dc4 <get_boolean_op_value@@Base+0x27c>
   15bf8:	ldr	r1, [pc, #752]	; 15ef0 <get_boolean_op_value@@Base+0x3a8>
   15bfc:	mov	r0, r4
   15c00:	mov	r2, #2
   15c04:	add	r1, pc, r1
   15c08:	bl	12094 <strncmp@plt>
   15c0c:	mov	r1, #56	; 0x38
   15c10:	cmp	r0, #0
   15c14:	mov	r2, r6
   15c18:	movweq	r1, #48	; 0x30
   15c1c:	ldr	r1, [r2, r1]!
   15c20:	adds	r1, r1, #1
   15c24:	str	r1, [r2]
   15c28:	ldr	r1, [r2, #4]
   15c2c:	adc	r1, r1, #0
   15c30:	cmp	r0, #0
   15c34:	str	r1, [r2, #4]
   15c38:	beq	15e3c <get_boolean_op_value@@Base+0x2f4>
   15c3c:	ldr	r1, [pc, #688]	; 15ef4 <get_boolean_op_value@@Base+0x3ac>
   15c40:	mov	r0, r4
   15c44:	mov	r2, #2
   15c48:	mov	r5, #2
   15c4c:	add	r1, pc, r1
   15c50:	bl	12094 <strncmp@plt>
   15c54:	mov	r1, #80	; 0x50
   15c58:	cmp	r0, #0
   15c5c:	mov	r2, r6
   15c60:	movweq	r1, #72	; 0x48
   15c64:	ldr	r1, [r2, r1]!
   15c68:	adds	r1, r1, #1
   15c6c:	str	r1, [r2]
   15c70:	ldr	r1, [r2, #4]
   15c74:	adc	r1, r1, #0
   15c78:	cmp	r0, #0
   15c7c:	str	r1, [r2, #4]
   15c80:	beq	15e54 <get_boolean_op_value@@Base+0x30c>
   15c84:	ldr	r1, [pc, #620]	; 15ef8 <get_boolean_op_value@@Base+0x3b0>
   15c88:	mov	r0, r4
   15c8c:	mov	r2, #2
   15c90:	add	r1, pc, r1
   15c94:	bl	12094 <strncmp@plt>
   15c98:	mov	r1, #104	; 0x68
   15c9c:	cmp	r0, #0
   15ca0:	mov	r2, r6
   15ca4:	movweq	r1, #96	; 0x60
   15ca8:	ldr	r1, [r2, r1]!
   15cac:	adds	r1, r1, #1
   15cb0:	str	r1, [r2]
   15cb4:	ldr	r1, [r2, #4]
   15cb8:	adc	r1, r1, #0
   15cbc:	cmp	r0, #0
   15cc0:	str	r1, [r2, #4]
   15cc4:	beq	15e68 <get_boolean_op_value@@Base+0x320>
   15cc8:	ldr	r1, [pc, #556]	; 15efc <get_boolean_op_value@@Base+0x3b4>
   15ccc:	mov	r0, r4
   15cd0:	mov	r2, #2
   15cd4:	add	r1, pc, r1
   15cd8:	bl	12094 <strncmp@plt>
   15cdc:	mov	r1, #128	; 0x80
   15ce0:	cmp	r0, #0
   15ce4:	mov	r2, r6
   15ce8:	movweq	r1, #120	; 0x78
   15cec:	ldr	r1, [r2, r1]!
   15cf0:	adds	r1, r1, #1
   15cf4:	str	r1, [r2]
   15cf8:	ldr	r1, [r2, #4]
   15cfc:	adc	r1, r1, #0
   15d00:	cmp	r0, #0
   15d04:	str	r1, [r2, #4]
   15d08:	beq	15e80 <get_boolean_op_value@@Base+0x338>
   15d0c:	ldr	r1, [pc, #492]	; 15f00 <get_boolean_op_value@@Base+0x3b8>
   15d10:	mov	r0, r4
   15d14:	mov	r2, #2
   15d18:	add	r1, pc, r1
   15d1c:	bl	12094 <strncmp@plt>
   15d20:	mov	r1, #152	; 0x98
   15d24:	cmp	r0, #0
   15d28:	mov	r2, r6
   15d2c:	movweq	r1, #144	; 0x90
   15d30:	ldr	r1, [r2, r1]!
   15d34:	adds	r1, r1, #1
   15d38:	str	r1, [r2]
   15d3c:	ldr	r1, [r2, #4]
   15d40:	adc	r1, r1, #0
   15d44:	cmp	r0, #0
   15d48:	str	r1, [r2, #4]
   15d4c:	bne	15ec0 <get_boolean_op_value@@Base+0x378>
   15d50:	ldrd	r0, [r6, #160]	; 0xa0
   15d54:	mov	r5, #5
   15d58:	adds	r0, r0, #1
   15d5c:	adc	r1, r1, #0
   15d60:	strd	r0, [r6, #160]	; 0xa0
   15d64:	b	15e94 <get_boolean_op_value@@Base+0x34c>
   15d68:	ldr	r0, [pc, #404]	; 15f04 <get_boolean_op_value@@Base+0x3bc>
   15d6c:	mov	r1, #0
   15d70:	add	r0, pc, r0
   15d74:	str	r1, [r0]
   15d78:	ldrb	r0, [r4]
   15d7c:	cmp	r0, #62	; 0x3e
   15d80:	beq	15e0c <get_boolean_op_value@@Base+0x2c4>
   15d84:	cmp	r0, #60	; 0x3c
   15d88:	beq	15ddc <get_boolean_op_value@@Base+0x294>
   15d8c:	cmp	r0, #33	; 0x21
   15d90:	bne	15eac <get_boolean_op_value@@Base+0x364>
   15d94:	ldr	r0, [pc, #364]	; 15f08 <get_boolean_op_value@@Base+0x3c0>
   15d98:	add	r0, pc, r0
   15d9c:	add	r1, r0, #4
   15da0:	ldr	r0, [pc, #356]	; 15f0c <get_boolean_op_value@@Base+0x3c4>
   15da4:	add	r0, pc, r0
   15da8:	bl	15f30 <get_boolean_op_value@@Base+0x3e8>
   15dac:	ldrd	r0, [r6, #200]	; 0xc8
   15db0:	mov	r5, #8
   15db4:	adds	r0, r0, #1
   15db8:	adc	r1, r1, #0
   15dbc:	strd	r0, [r6, #200]	; 0xc8
   15dc0:	b	15e94 <get_boolean_op_value@@Base+0x34c>
   15dc4:	ldrd	r0, [r6, #40]	; 0x28
   15dc8:	mov	r5, #0
   15dcc:	adds	r0, r0, #1
   15dd0:	adc	r1, r1, #0
   15dd4:	strd	r0, [r6, #40]	; 0x28
   15dd8:	b	15e94 <get_boolean_op_value@@Base+0x34c>
   15ddc:	ldr	r0, [pc, #324]	; 15f28 <get_boolean_op_value@@Base+0x3e0>
   15de0:	add	r0, pc, r0
   15de4:	add	r1, r0, #8
   15de8:	ldr	r0, [pc, #316]	; 15f2c <get_boolean_op_value@@Base+0x3e4>
   15dec:	add	r0, pc, r0
   15df0:	bl	15f30 <get_boolean_op_value@@Base+0x3e8>
   15df4:	ldrd	r0, [r6, #208]	; 0xd0
   15df8:	mov	r5, #6
   15dfc:	adds	r0, r0, #1
   15e00:	adc	r1, r1, #0
   15e04:	strd	r0, [r6, #208]	; 0xd0
   15e08:	b	15e94 <get_boolean_op_value@@Base+0x34c>
   15e0c:	ldr	r0, [pc, #252]	; 15f10 <get_boolean_op_value@@Base+0x3c8>
   15e10:	add	r0, pc, r0
   15e14:	add	r1, r0, #12
   15e18:	ldr	r0, [pc, #244]	; 15f14 <get_boolean_op_value@@Base+0x3cc>
   15e1c:	add	r0, pc, r0
   15e20:	bl	15f30 <get_boolean_op_value@@Base+0x3e8>
   15e24:	ldrd	r0, [r6, #216]	; 0xd8
   15e28:	mov	r5, #7
   15e2c:	adds	r0, r0, #1
   15e30:	adc	r1, r1, #0
   15e34:	strd	r0, [r6, #216]	; 0xd8
   15e38:	b	15e94 <get_boolean_op_value@@Base+0x34c>
   15e3c:	ldrd	r0, [r6, #64]	; 0x40
   15e40:	mov	r5, #1
   15e44:	adds	r0, r0, #1
   15e48:	adc	r1, r1, #0
   15e4c:	strd	r0, [r6, #64]	; 0x40
   15e50:	b	15e94 <get_boolean_op_value@@Base+0x34c>
   15e54:	ldrd	r0, [r6, #88]	; 0x58
   15e58:	adds	r0, r0, #1
   15e5c:	adc	r1, r1, #0
   15e60:	strd	r0, [r6, #88]	; 0x58
   15e64:	b	15e94 <get_boolean_op_value@@Base+0x34c>
   15e68:	ldrd	r0, [r6, #112]	; 0x70
   15e6c:	mov	r5, #3
   15e70:	adds	r0, r0, #1
   15e74:	adc	r1, r1, #0
   15e78:	strd	r0, [r6, #112]	; 0x70
   15e7c:	b	15e94 <get_boolean_op_value@@Base+0x34c>
   15e80:	ldrd	r0, [r6, #136]	; 0x88
   15e84:	mov	r5, #4
   15e88:	adds	r0, r0, #1
   15e8c:	adc	r1, r1, #0
   15e90:	strd	r0, [r6, #136]	; 0x88
   15e94:	ldrd	r0, [r6, #224]	; 0xe0
   15e98:	adds	r0, r0, #1
   15e9c:	adc	r1, r1, #0
   15ea0:	strd	r0, [r6, #224]	; 0xe0
   15ea4:	mov	r0, r5
   15ea8:	pop	{r4, r5, r6, sl, fp, pc}
   15eac:	ldr	r0, [pc, #100]	; 15f18 <get_boolean_op_value@@Base+0x3d0>
   15eb0:	ldr	r1, [pc, #100]	; 15f1c <get_boolean_op_value@@Base+0x3d4>
   15eb4:	add	r0, pc, r0
   15eb8:	add	r1, pc, r1
   15ebc:	bl	15f30 <get_boolean_op_value@@Base+0x3e8>
   15ec0:	ldr	r0, [pc, #88]	; 15f20 <get_boolean_op_value@@Base+0x3d8>
   15ec4:	mov	r2, r4
   15ec8:	ldr	r0, [pc, r0]
   15ecc:	ldr	r0, [r0]
   15ed0:	ldr	r1, [pc, #76]	; 15f24 <get_boolean_op_value@@Base+0x3dc>
   15ed4:	add	r1, pc, r1
   15ed8:	bl	11fd4 <fprintf@plt>
   15edc:	mov	r0, #1
   15ee0:	bl	11fa4 <exit@plt>
   15ee4:	andeq	r7, r1, ip, lsl #30
   15ee8:	andeq	r7, r1, r0, lsl pc
   15eec:	andeq	r5, r0, fp, lsr #26
   15ef0:	andeq	r5, r0, sl, ror #25
   15ef4:	andeq	r5, r0, r5, lsr #25
   15ef8:	andeq	r5, r0, r4, ror #24
   15efc:	andeq	r5, r0, r3, lsr #24
   15f00:	andeq	r5, r0, r2, ror #23
   15f04:	andeq	r7, r1, r4, ror #6
   15f08:	andeq	r6, r1, ip, lsl #25
   15f0c:	andeq	r7, r1, r0, lsr r3
   15f10:	andeq	r6, r1, r4, lsl ip
   15f14:			; <UNDEFINED> instruction: 0x000172b8
   15f18:	andeq	r7, r1, r0, lsr #4
   15f1c:	andeq	r6, r1, ip, ror #22
   15f20:	strdeq	r7, [r1], -r0
   15f24:	andeq	r5, r0, r9, lsr #20
   15f28:	andeq	r6, r1, r4, asr #24
   15f2c:	andeq	r7, r1, r8, ror #5
   15f30:	ldr	r0, [r0]
   15f34:	cmn	r0, #1
   15f38:	ldrne	r0, [r1, r0, lsl #2]
   15f3c:	cmpne	r0, #0
   15f40:	bne	15f48 <get_boolean_op_value@@Base+0x400>
   15f44:	bx	lr
   15f48:	ldrd	r2, [r0]
   15f4c:	adds	r2, r2, #1
   15f50:	adc	r3, r3, #0
   15f54:	strd	r2, [r0]
   15f58:	bx	lr
   15f5c:	push	{r4, r5, r6, lr}
   15f60:	sub	sp, sp, #8
   15f64:	ldr	r0, [pc, #112]	; 15fdc <get_boolean_op_value@@Base+0x494>
   15f68:	ldr	r1, [pc, #112]	; 15fe0 <get_boolean_op_value@@Base+0x498>
   15f6c:	movw	r2, #23410	; 0x5b72
   15f70:	movt	r2, #13184	; 0x3380
   15f74:	add	r0, pc, r0
   15f78:	add	r1, pc, r1
   15f7c:	bl	18420 <__generate_code_for_binary_boolean_expression@@Base+0x5d0>
   15f80:	ldr	r0, [pc, #92]	; 15fe4 <get_boolean_op_value@@Base+0x49c>
   15f84:	ldr	r6, [pc, #92]	; 15fe8 <get_boolean_op_value@@Base+0x4a0>
   15f88:	mov	r5, #0
   15f8c:	add	r0, pc, r0
   15f90:	add	r6, pc, r6
   15f94:	add	r4, r0, #4
   15f98:	mov	r3, r6
   15f9c:	ldr	r0, [r3, r5]!
   15fa0:	ldr	r1, [r3, #16]
   15fa4:	str	r1, [sp]
   15fa8:	ldmib	r3, {r1, r2}
   15fac:	ldrb	r3, [r3, #12]
   15fb0:	bl	18b84 <__generate_code_for_binary_boolean_expression@@Base+0xd34>
   15fb4:	ldrd	r0, [r4, #-4]
   15fb8:	bl	19438 <__generate_code_for_binary_boolean_expression@@Base+0x15e8>
   15fbc:	add	r5, r5, #20
   15fc0:	add	r4, r4, #8
   15fc4:	cmp	r5, #320	; 0x140
   15fc8:	bne	15f98 <get_boolean_op_value@@Base+0x450>
   15fcc:	bl	19bb4 <__generate_code_for_binary_boolean_expression@@Base+0x1d64>
   15fd0:	add	sp, sp, #8
   15fd4:	pop	{r4, r5, r6, lr}
   15fd8:	b	1a920 <__generate_code_for_binary_boolean_expression@@Base+0x2ad0>
   15fdc:	andeq	r5, r0, r4, lsr sl
   15fe0:	andeq	r5, r0, r7, ror #9
   15fe4:	andeq	r6, r1, ip, ror #23
   15fe8:	andeq	r6, r1, r8, lsr #21
   15fec:	push	{fp, lr}
   15ff0:	bl	15f5c <get_boolean_op_value@@Base+0x414>
   15ff4:	ldr	r2, [pc, #364]	; 16168 <get_boolean_op_value@@Base+0x620>
   15ff8:	mov	r0, #0
   15ffc:	vmov.i32	q8, #0	; 0x00000000
   16000:	add	r2, pc, r2
   16004:	add	r1, r2, #16
   16008:	str	r0, [r2, #32]
   1600c:	vst1.64	{d16-d17}, [r1 :128]
   16010:	ldr	r3, [pc, #340]	; 1616c <get_boolean_op_value@@Base+0x624>
   16014:	add	r3, pc, r3
   16018:	add	r1, r3, #96	; 0x60
   1601c:	str	r0, [r3, #112]	; 0x70
   16020:	vst1.64	{d16-d17}, [r1 :128]
   16024:	add	r1, r3, #80	; 0x50
   16028:	vst1.64	{d16-d17}, [r1 :128]
   1602c:	add	r1, r3, #64	; 0x40
   16030:	vst1.64	{d16-d17}, [r1 :128]
   16034:	add	r1, r3, #48	; 0x30
   16038:	vst1.64	{d16-d17}, [r1 :128]
   1603c:	add	r1, r3, #32
   16040:	vst1.64	{d16-d17}, [r1 :128]
   16044:	add	r1, r3, #16
   16048:	vst1.64	{d16-d17}, [r1 :128]
   1604c:	ldr	r1, [pc, #284]	; 16170 <get_boolean_op_value@@Base+0x628>
   16050:	add	r1, pc, r1
   16054:	vst1.64	{d16-d17}, [r1 :128]
   16058:	ldr	r1, [pc, #276]	; 16174 <get_boolean_op_value@@Base+0x62c>
   1605c:	add	r1, pc, r1
   16060:	vst1.64	{d16-d17}, [r1 :128]
   16064:	ldr	r1, [pc, #268]	; 16178 <get_boolean_op_value@@Base+0x630>
   16068:	add	r1, pc, r1
   1606c:	vst1.64	{d16-d17}, [r1 :128]
   16070:	ldr	r1, [pc, #260]	; 1617c <get_boolean_op_value@@Base+0x634>
   16074:	add	r1, pc, r1
   16078:	vst1.64	{d16-d17}, [r1 :128]
   1607c:	ldr	r1, [pc, #252]	; 16180 <get_boolean_op_value@@Base+0x638>
   16080:	add	r1, pc, r1
   16084:	vst1.64	{d16-d17}, [r1 :128]
   16088:	ldr	r1, [pc, #244]	; 16184 <get_boolean_op_value@@Base+0x63c>
   1608c:	add	r1, pc, r1
   16090:	vst1.64	{d16-d17}, [r1 :128]
   16094:	ldr	r1, [pc, #236]	; 16188 <get_boolean_op_value@@Base+0x640>
   16098:	add	r1, pc, r1
   1609c:	vst1.64	{d16-d17}, [r1 :128]
   160a0:	ldr	r1, [pc, #228]	; 1618c <get_boolean_op_value@@Base+0x644>
   160a4:	add	r1, pc, r1
   160a8:	vst1.64	{d16-d17}, [r1 :128]
   160ac:	mov	r1, #36	; 0x24
   160b0:	vst1.64	{d16-d17}, [r2 :128], r1
   160b4:	str	r0, [r2]
   160b8:	mov	r2, #116	; 0x74
   160bc:	vst1.64	{d16-d17}, [r3 :128], r2
   160c0:	str	r0, [r3]
   160c4:	ldr	r2, [pc, #196]	; 16190 <get_boolean_op_value@@Base+0x648>
   160c8:	add	r2, pc, r2
   160cc:	add	r3, r2, #16
   160d0:	str	r0, [r2, #32]
   160d4:	vst1.64	{d16-d17}, [r2 :128], r1
   160d8:	vst1.64	{d16-d17}, [r3 :128]
   160dc:	str	r0, [r2]
   160e0:	ldr	r2, [pc, #172]	; 16194 <get_boolean_op_value@@Base+0x64c>
   160e4:	add	r2, pc, r2
   160e8:	add	r3, r2, #16
   160ec:	str	r0, [r2, #32]
   160f0:	vst1.64	{d16-d17}, [r2 :128], r1
   160f4:	vst1.64	{d16-d17}, [r3 :128]
   160f8:	str	r0, [r2]
   160fc:	ldr	r2, [pc, #148]	; 16198 <get_boolean_op_value@@Base+0x650>
   16100:	add	r2, pc, r2
   16104:	add	r3, r2, #16
   16108:	str	r0, [r2, #32]
   1610c:	vst1.64	{d16-d17}, [r2 :128], r1
   16110:	vst1.64	{d16-d17}, [r3 :128]
   16114:	str	r0, [r2]
   16118:	ldr	r2, [pc, #124]	; 1619c <get_boolean_op_value@@Base+0x654>
   1611c:	add	r2, pc, r2
   16120:	add	r3, r2, #16
   16124:	str	r0, [r2, #32]
   16128:	vst1.64	{d16-d17}, [r2 :128], r1
   1612c:	vst1.64	{d16-d17}, [r3 :128]
   16130:	str	r0, [r2]
   16134:	ldr	r2, [pc, #100]	; 161a0 <get_boolean_op_value@@Base+0x658>
   16138:	add	r2, pc, r2
   1613c:	add	r3, r2, #16
   16140:	str	r0, [r2, #32]
   16144:	vst1.64	{d16-d17}, [r2 :128], r1
   16148:	mov	r1, #0
   1614c:	str	r0, [r2]
   16150:	vst1.64	{d16-d17}, [r3 :128]
   16154:	mov	r2, #232	; 0xe8
   16158:	ldr	r0, [pc, #68]	; 161a4 <get_boolean_op_value@@Base+0x65c>
   1615c:	add	r0, pc, r0
   16160:	bl	12004 <memset@plt>
   16164:	pop	{fp, pc}
   16168:	andeq	r7, r1, r8, asr #18
   1616c:			; <UNDEFINED> instruction: 0x000178b4
   16170:	andeq	r7, r1, r8, lsl #16
   16174:	andeq	r7, r1, ip, ror #15
   16178:	andeq	r7, r1, r0, lsl #16
   1617c:	andeq	r7, r1, r4, lsl #16
   16180:	andeq	r7, r1, r8, lsl #16
   16184:	andeq	r7, r1, ip, lsl #16
   16188:	andeq	r7, r1, r0, lsl r8
   1618c:	andeq	r7, r1, r4, lsl r8
   16190:			; <UNDEFINED> instruction: 0x000178b0
   16194:	andeq	r7, r1, r4, asr #17
   16198:	ldrdeq	r7, [r1], -r8
   1619c:	andeq	r7, r1, ip, ror #17
   161a0:	andeq	r7, r1, r0, lsl #18
   161a4:	andeq	r7, r1, ip, lsl #18
   161a8:	ldr	r0, [pc, #12]	; 161bc <get_boolean_op_value@@Base+0x674>
   161ac:	ldr	r1, [pc, #12]	; 161c0 <get_boolean_op_value@@Base+0x678>
   161b0:	add	r0, pc, r0
   161b4:	add	r1, pc, r1
   161b8:	b	1add0 <__gcov_flush@@Base+0xb4>
   161bc:			; <UNDEFINED> instruction: 0xfffffda4
   161c0:			; <UNDEFINED> instruction: 0xfffffe30
	...

000161d0 <init_grammar@@Base>:
   161d0:	ldr	r2, [pc, #56]	; 16210 <init_grammar@@Base+0x40>
   161d4:	add	r3, pc, #36	; 0x24
   161d8:	vld1.64	{d16-d17}, [r3 :128]
   161dc:	add	r2, pc, r2
   161e0:	vld1.64	{d18-d19}, [r2 :128]
   161e4:	vadd.i64	q8, q9, q8
   161e8:	vst1.64	{d16-d17}, [r2 :128]
   161ec:	str	r1, [r0]
   161f0:	bx	lr
   161f4:	nop	{0}
   161f8:	nop	{0}
   161fc:	nop	{0}
   16200:	andeq	r0, r0, r1
   16204:	andeq	r0, r0, r0
   16208:	andeq	r0, r0, r1
   1620c:	andeq	r0, r0, r0
   16210:	andeq	r7, r1, ip, ror r9
   16214:	nop	{0}
   16218:	nop	{0}
   1621c:	nop	{0}

00016220 <destroy_grammar@@Base>:
   16220:	ldr	r0, [pc, #40]	; 16250 <destroy_grammar@@Base+0x30>
   16224:	add	r1, pc, #20
   16228:	vld1.64	{d16-d17}, [r1 :128]
   1622c:	add	r0, pc, r0
   16230:	vld1.64	{d18-d19}, [r0 :128]
   16234:	vadd.i64	q8, q9, q8
   16238:	vst1.64	{d16-d17}, [r0 :128]
   1623c:	bx	lr
   16240:	andeq	r0, r0, r1
   16244:	andeq	r0, r0, r0
   16248:	andeq	r0, r0, r1
   1624c:	andeq	r0, r0, r0
   16250:	andeq	r7, r1, ip, lsr r9
   16254:	nop	{0}
   16258:	nop	{0}
   1625c:	nop	{0}

00016260 <build_ast@@Base>:
   16260:	ldr	r1, [pc, #40]	; 16290 <build_ast@@Base+0x30>
   16264:	add	r2, pc, #20
   16268:	vld1.64	{d16-d17}, [r2 :128]
   1626c:	add	r1, pc, r1
   16270:	vld1.64	{d18-d19}, [r1 :128]
   16274:	vadd.i64	q8, q9, q8
   16278:	vst1.64	{d16-d17}, [r1 :128]
   1627c:	b	16294 <read_function_ast_node@@Base>
   16280:	andeq	r0, r0, r1
   16284:	andeq	r0, r0, r0
   16288:	andeq	r0, r0, r1
   1628c:	andeq	r0, r0, r0
   16290:	andeq	r7, r1, ip, lsl #18

00016294 <read_function_ast_node@@Base>:
   16294:	push	{r4, r5, r6, r7, fp, lr}
   16298:	add	fp, sp, #16
   1629c:	ldr	r7, [pc, #468]	; 16478 <read_function_ast_node@@Base+0x1e4>
   162a0:	mov	r4, r0
   162a4:	ldr	r0, [pc, #464]	; 1647c <read_function_ast_node@@Base+0x1e8>
   162a8:	ldr	r0, [pc, r0]
   162ac:	add	r7, pc, r7
   162b0:	adds	r0, r0, #1
   162b4:	str	r0, [r7]
   162b8:	ldr	r0, [r7, #4]
   162bc:	adc	r0, r0, #0
   162c0:	str	r0, [r7, #4]
   162c4:	ldr	r0, [r4]
   162c8:	bl	13640 <next@@Base>
   162cc:	ldr	r1, [r0]
   162d0:	mov	r2, #16
   162d4:	mov	r3, r7
   162d8:	cmp	r1, #0
   162dc:	movwne	r2, #8
   162e0:	ldr	r2, [r3, r2]!
   162e4:	adds	r2, r2, #1
   162e8:	str	r2, [r3]
   162ec:	ldr	r2, [r3, #4]
   162f0:	adc	r2, r2, #0
   162f4:	cmp	r1, #0
   162f8:	str	r2, [r3, #4]
   162fc:	beq	16318 <read_function_ast_node@@Base+0x84>
   16300:	ldrd	r0, [r7, #24]
   16304:	mov	r4, #0
   16308:	adds	r0, r0, #1
   1630c:	adc	r1, r1, #0
   16310:	strd	r0, [r7, #24]
   16314:	b	16460 <read_function_ast_node@@Base+0x1cc>
   16318:	bl	12c60 <free_token_int_type@@Base>
   1631c:	ldr	r0, [r4]
   16320:	bl	13640 <next@@Base>
   16324:	mov	r5, r0
   16328:	ldr	r0, [r0]
   1632c:	mov	r1, #40	; 0x28
   16330:	mov	r2, r7
   16334:	cmp	r0, #2
   16338:	movwne	r1, #32
   1633c:	ldr	r1, [r2, r1]!
   16340:	adds	r1, r1, #1
   16344:	str	r1, [r2]
   16348:	ldr	r1, [r2, #4]
   1634c:	adc	r1, r1, #0
   16350:	cmp	r0, #2
   16354:	str	r1, [r2, #4]
   16358:	beq	16374 <read_function_ast_node@@Base+0xe0>
   1635c:	ldrd	r0, [r7, #48]	; 0x30
   16360:	mov	r4, #0
   16364:	adds	r0, r0, #1
   16368:	adc	r1, r1, #0
   1636c:	strd	r0, [r7, #48]	; 0x30
   16370:	b	16460 <read_function_ast_node@@Base+0x1cc>
   16374:	ldr	r0, [r4]
   16378:	bl	13640 <next@@Base>
   1637c:	ldr	r1, [r0]
   16380:	mov	r2, #64	; 0x40
   16384:	mov	r3, r7
   16388:	cmp	r1, #3
   1638c:	movwne	r2, #56	; 0x38
   16390:	ldr	r2, [r3, r2]!
   16394:	adds	r2, r2, #1
   16398:	str	r2, [r3]
   1639c:	ldr	r2, [r3, #4]
   163a0:	adc	r2, r2, #0
   163a4:	cmp	r1, #3
   163a8:	str	r2, [r3, #4]
   163ac:	beq	163c8 <read_function_ast_node@@Base+0x134>
   163b0:	ldrd	r0, [r7, #72]	; 0x48
   163b4:	mov	r4, #0
   163b8:	adds	r0, r0, #1
   163bc:	adc	r1, r1, #0
   163c0:	strd	r0, [r7, #72]	; 0x48
   163c4:	b	16460 <read_function_ast_node@@Base+0x1cc>
   163c8:	bl	12d20 <free_token_opar@@Base>
   163cc:	ldr	r0, [r4]
   163d0:	bl	13640 <next@@Base>
   163d4:	ldr	r1, [r0]
   163d8:	mov	r2, #88	; 0x58
   163dc:	mov	r3, r7
   163e0:	cmp	r1, #4
   163e4:	movwne	r2, #80	; 0x50
   163e8:	ldr	r2, [r3, r2]!
   163ec:	adds	r2, r2, #1
   163f0:	str	r2, [r3]
   163f4:	ldr	r2, [r3, #4]
   163f8:	adc	r2, r2, #0
   163fc:	cmp	r1, #4
   16400:	str	r2, [r3, #4]
   16404:	beq	16420 <read_function_ast_node@@Base+0x18c>
   16408:	ldrd	r0, [r7, #96]	; 0x60
   1640c:	mov	r4, #0
   16410:	adds	r0, r0, #1
   16414:	adc	r1, r1, #0
   16418:	strd	r0, [r7, #96]	; 0x60
   1641c:	b	16460 <read_function_ast_node@@Base+0x1cc>
   16420:	ldrd	r2, [r7, #104]	; 0x68
   16424:	adds	r2, r2, #1
   16428:	adc	r3, r3, #0
   1642c:	strd	r2, [r7, #104]	; 0x68
   16430:	bl	12d60 <free_token_cpar@@Base>
   16434:	mov	r0, r4
   16438:	bl	16480 <read_body@@Base>
   1643c:	mov	r6, r0
   16440:	mov	r0, #16
   16444:	bl	11f68 <malloc@plt>
   16448:	ldr	r1, [r5, #4]
   1644c:	mov	r2, r6
   16450:	mov	r4, r0
   16454:	bl	15160 <init_node_function@@Base>
   16458:	mov	r0, r5
   1645c:	bl	12ce0 <free_token_function@@Base>
   16460:	ldrd	r0, [r7, #112]	; 0x70
   16464:	adds	r0, r0, #1
   16468:	adc	r1, r1, #0
   1646c:	strd	r0, [r7, #112]	; 0x70
   16470:	mov	r0, r4
   16474:	pop	{r4, r5, r6, r7, fp, pc}
   16478:	ldrdeq	r7, [r1], -ip
   1647c:	andeq	r7, r1, r0, ror #17

00016480 <read_body@@Base>:
   16480:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16484:	add	fp, sp, #28
   16488:	sub	sp, sp, #4
   1648c:	ldr	r4, [pc, #644]	; 16718 <read_body@@Base+0x298>
   16490:	mov	sl, r0
   16494:	ldr	r0, [pc, #640]	; 1671c <read_body@@Base+0x29c>
   16498:	ldr	r0, [pc, r0]
   1649c:	add	r4, pc, r4
   164a0:	adds	r0, r0, #1
   164a4:	str	r0, [r4]
   164a8:	ldr	r0, [r4, #4]
   164ac:	adc	r0, r0, #0
   164b0:	str	r0, [r4, #4]
   164b4:	ldr	r0, [sl]
   164b8:	bl	13640 <next@@Base>
   164bc:	ldr	r1, [r0]
   164c0:	mov	r2, #16
   164c4:	mov	r3, r4
   164c8:	cmp	r1, #5
   164cc:	movwne	r2, #8
   164d0:	ldr	r2, [r3, r2]!
   164d4:	adds	r2, r2, #1
   164d8:	str	r2, [r3]
   164dc:	ldr	r2, [r3, #4]
   164e0:	adc	r2, r2, #0
   164e4:	cmp	r1, #5
   164e8:	str	r2, [r3, #4]
   164ec:	beq	16508 <read_body@@Base+0x88>
   164f0:	ldrd	r0, [r4, #24]
   164f4:	mov	r6, #0
   164f8:	adds	r0, r0, #1
   164fc:	adc	r1, r1, #0
   16500:	strd	r0, [r4, #24]
   16504:	b	166fc <read_body@@Base+0x27c>
   16508:	ldrd	r2, [r4, #32]
   1650c:	adds	r2, r2, #1
   16510:	adc	r3, r3, #0
   16514:	strd	r2, [r4, #32]
   16518:	bl	12da0 <free_token_obra@@Base>
   1651c:	ldr	r0, [sl]
   16520:	bl	13640 <next@@Base>
   16524:	mov	r7, r0
   16528:	ldr	r0, [r0]
   1652c:	mov	r1, #48	; 0x30
   16530:	mov	r2, r4
   16534:	mov	r6, #0
   16538:	cmp	r0, #6
   1653c:	movwne	r1, #40	; 0x28
   16540:	ldr	r1, [r2, r1]!
   16544:	adds	r1, r1, #1
   16548:	str	r1, [r2]
   1654c:	ldr	r1, [r2, #4]
   16550:	adc	r1, r1, #0
   16554:	cmp	r0, #6
   16558:	str	r1, [r2, #4]
   1655c:	beq	166b0 <read_body@@Base+0x230>
   16560:	ldr	r9, [pc, #440]	; 16720 <read_body@@Base+0x2a0>
   16564:	ldr	r1, [pc, #440]	; 16724 <read_body@@Base+0x2a4>
   16568:	mov	r8, #0
   1656c:	mov	r6, #0
   16570:	add	r1, pc, r1
   16574:	add	r9, pc, r9
   16578:	add	r1, r1, #8
   1657c:	str	r1, [sp]
   16580:	mov	r1, #0
   16584:	cmp	r0, #10
   16588:	str	r1, [r9]
   1658c:	beq	165d0 <read_body@@Base+0x150>
   16590:	cmp	r0, #7
   16594:	bne	166cc <read_body@@Base+0x24c>
   16598:	ldr	r0, [pc, #392]	; 16728 <read_body@@Base+0x2a8>
   1659c:	add	r0, pc, r0
   165a0:	add	r1, r0, #4
   165a4:	mov	r0, r9
   165a8:	bl	17118 <read_boolean_unary_expression@@Base+0x164>
   165ac:	ldrd	r0, [r4, #80]	; 0x50
   165b0:	adds	r0, r0, #1
   165b4:	adc	r1, r1, #0
   165b8:	strd	r0, [r4, #80]	; 0x50
   165bc:	mov	r0, r7
   165c0:	bl	12e20 <free_token_return@@Base>
   165c4:	mov	r0, sl
   165c8:	bl	16734 <read_return_expression@@Base>
   165cc:	b	165fc <read_body@@Base+0x17c>
   165d0:	ldr	r1, [sp]
   165d4:	mov	r0, r9
   165d8:	bl	17118 <read_boolean_unary_expression@@Base+0x164>
   165dc:	ldrd	r0, [r4, #88]	; 0x58
   165e0:	adds	r0, r0, #1
   165e4:	adc	r1, r1, #0
   165e8:	strd	r0, [r4, #88]	; 0x58
   165ec:	mov	r0, r7
   165f0:	bl	12ee0 <free_token_if@@Base>
   165f4:	mov	r0, sl
   165f8:	bl	16874 <read_if_statement@@Base>
   165fc:	mov	r5, r0
   16600:	cmp	r6, #0
   16604:	mov	r0, #112	; 0x70
   16608:	mov	r1, r4
   1660c:	movwne	r0, #104	; 0x68
   16610:	ldr	r0, [r1, r0]!
   16614:	adds	r0, r0, #1
   16618:	str	r0, [r1]
   1661c:	ldr	r0, [r1, #4]
   16620:	adc	r0, r0, #0
   16624:	cmp	r6, #0
   16628:	str	r0, [r1, #4]
   1662c:	beq	16648 <read_body@@Base+0x1c8>
   16630:	ldrd	r0, [r4, #120]	; 0x78
   16634:	adds	r0, r0, #1
   16638:	adc	r1, r1, #0
   1663c:	strd	r0, [r4, #120]	; 0x78
   16640:	str	r5, [r8, #4]
   16644:	b	1665c <read_body@@Base+0x1dc>
   16648:	ldrd	r0, [r4, #128]	; 0x80
   1664c:	mov	r6, r5
   16650:	adds	r0, r0, #1
   16654:	adc	r1, r1, #0
   16658:	strd	r0, [r4, #128]	; 0x80
   1665c:	ldrd	r0, [r4, #136]	; 0x88
   16660:	adds	r0, r0, #1
   16664:	adc	r1, r1, #0
   16668:	strd	r0, [r4, #136]	; 0x88
   1666c:	ldr	r0, [sl]
   16670:	bl	13640 <next@@Base>
   16674:	mov	r7, r0
   16678:	ldr	r0, [r0]
   1667c:	mov	r1, #48	; 0x30
   16680:	mov	r2, r4
   16684:	mov	r8, r5
   16688:	cmp	r0, #6
   1668c:	movwne	r1, #40	; 0x28
   16690:	ldr	r1, [r2, r1]!
   16694:	adds	r1, r1, #1
   16698:	str	r1, [r2]
   1669c:	ldr	r1, [r2, #4]
   166a0:	adc	r1, r1, #0
   166a4:	cmp	r0, #6
   166a8:	str	r1, [r2, #4]
   166ac:	bne	16580 <read_body@@Base+0x100>
   166b0:	ldrd	r0, [r4, #144]	; 0x90
   166b4:	adds	r0, r0, #1
   166b8:	adc	r1, r1, #0
   166bc:	strd	r0, [r4, #144]	; 0x90
   166c0:	mov	r0, r7
   166c4:	bl	12de0 <free_token_cbra@@Base>
   166c8:	b	166fc <read_body@@Base+0x27c>
   166cc:	ldr	r0, [pc, #88]	; 1672c <read_body@@Base+0x2ac>
   166d0:	ldr	r1, [pc, #88]	; 16730 <read_body@@Base+0x2b0>
   166d4:	add	r0, pc, r0
   166d8:	add	r1, pc, r1
   166dc:	bl	17118 <read_boolean_unary_expression@@Base+0x164>
   166e0:	ldrd	r0, [r4, #96]	; 0x60
   166e4:	adds	r0, r0, #1
   166e8:	adc	r1, r1, #0
   166ec:	strd	r0, [r4, #96]	; 0x60
   166f0:	mov	r1, r7
   166f4:	ldr	r0, [sl]
   166f8:	bl	133d0 <push_back@@Base>
   166fc:	ldrd	r0, [r4, #152]	; 0x98
   16700:	adds	r0, r0, #1
   16704:	adc	r1, r1, #0
   16708:	strd	r0, [r4, #152]	; 0x98
   1670c:	mov	r0, r6
   16710:	sub	sp, fp, #28
   16714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16718:	andeq	r7, r1, ip, ror #14
   1671c:	andeq	r7, r1, r0, ror r7
   16720:	andeq	r6, r1, r4, ror #22
   16724:	andeq	r6, r1, r8, lsl #13
   16728:	andeq	r6, r1, ip, asr r6
   1672c:	andeq	r6, r1, r4, lsl #20
   16730:	andeq	r6, r1, r0, lsr #10

00016734 <read_return_expression@@Base>:
   16734:	push	{r4, r5, r6, r7, fp, lr}
   16738:	add	fp, sp, #16
   1673c:	ldr	r7, [pc, #296]	; 1686c <read_return_expression@@Base+0x138>
   16740:	mov	r4, r0
   16744:	ldr	r0, [pc, #292]	; 16870 <read_return_expression@@Base+0x13c>
   16748:	ldr	r0, [pc, r0]
   1674c:	add	r7, pc, r7
   16750:	adds	r0, r0, #1
   16754:	str	r0, [r7]
   16758:	ldr	r0, [r7, #4]
   1675c:	adc	r0, r0, #0
   16760:	str	r0, [r7, #4]
   16764:	ldr	r0, [r4]
   16768:	bl	13640 <next@@Base>
   1676c:	mov	r5, r0
   16770:	ldr	r0, [r0]
   16774:	mov	r1, #16
   16778:	mov	r2, r7
   1677c:	cmp	r0, #1
   16780:	movwne	r1, #8
   16784:	ldr	r1, [r2, r1]!
   16788:	adds	r1, r1, #1
   1678c:	str	r1, [r2]
   16790:	ldr	r1, [r2, #4]
   16794:	adc	r1, r1, #0
   16798:	cmp	r0, #1
   1679c:	str	r1, [r2, #4]
   167a0:	beq	167bc <read_return_expression@@Base+0x88>
   167a4:	ldrd	r0, [r7, #24]
   167a8:	mov	r5, #0
   167ac:	adds	r0, r0, #1
   167b0:	adc	r1, r1, #0
   167b4:	strd	r0, [r7, #24]
   167b8:	b	16854 <read_return_expression@@Base+0x120>
   167bc:	mov	r0, #12
   167c0:	bl	11f68 <malloc@plt>
   167c4:	ldr	r1, [r5, #4]
   167c8:	mov	r6, r0
   167cc:	bl	150e0 <init_node_int@@Base>
   167d0:	mov	r0, r5
   167d4:	bl	12ca0 <free_token_int_value@@Base>
   167d8:	mov	r0, #12
   167dc:	bl	11f68 <malloc@plt>
   167e0:	mov	r1, r6
   167e4:	mov	r5, r0
   167e8:	bl	151f0 <init_node_return@@Base>
   167ec:	ldr	r0, [r4]
   167f0:	bl	13640 <next@@Base>
   167f4:	ldr	r1, [r0]
   167f8:	mov	r2, #40	; 0x28
   167fc:	mov	r3, r7
   16800:	cmp	r1, #8
   16804:	movwne	r2, #32
   16808:	ldr	r2, [r3, r2]!
   1680c:	adds	r2, r2, #1
   16810:	str	r2, [r3]
   16814:	ldr	r2, [r3, #4]
   16818:	adc	r2, r2, #0
   1681c:	cmp	r1, #8
   16820:	str	r2, [r3, #4]
   16824:	beq	16840 <read_return_expression@@Base+0x10c>
   16828:	ldrd	r0, [r7, #48]	; 0x30
   1682c:	mov	r5, #0
   16830:	adds	r0, r0, #1
   16834:	adc	r1, r1, #0
   16838:	strd	r0, [r7, #48]	; 0x30
   1683c:	b	16854 <read_return_expression@@Base+0x120>
   16840:	ldrd	r2, [r7, #56]	; 0x38
   16844:	adds	r2, r2, #1
   16848:	adc	r3, r3, #0
   1684c:	strd	r2, [r7, #56]	; 0x38
   16850:	bl	12e60 <free_token_semicolon@@Base>
   16854:	ldrd	r0, [r7, #64]	; 0x40
   16858:	adds	r0, r0, #1
   1685c:	adc	r1, r1, #0
   16860:	strd	r0, [r7, #64]	; 0x40
   16864:	mov	r0, r5
   16868:	pop	{r4, r5, r6, r7, fp, pc}
   1686c:	andeq	r7, r1, ip, asr r5
   16870:	andeq	r7, r1, r0, ror #10

00016874 <read_if_statement@@Base>:
   16874:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16878:	add	fp, sp, #24
   1687c:	ldr	r5, [pc, #360]	; 169ec <read_if_statement@@Base+0x178>
   16880:	mov	r4, r0
   16884:	ldr	r0, [pc, #356]	; 169f0 <read_if_statement@@Base+0x17c>
   16888:	ldr	r0, [pc, r0]
   1688c:	add	r5, pc, r5
   16890:	adds	r0, r0, #1
   16894:	str	r0, [r5]
   16898:	ldr	r0, [r5, #4]
   1689c:	adc	r0, r0, #0
   168a0:	str	r0, [r5, #4]
   168a4:	ldr	r0, [r4]
   168a8:	bl	13640 <next@@Base>
   168ac:	ldr	r1, [r0]
   168b0:	mov	r2, #16
   168b4:	mov	r3, r5
   168b8:	cmp	r1, #3
   168bc:	movwne	r2, #8
   168c0:	ldr	r2, [r3, r2]!
   168c4:	adds	r2, r2, #1
   168c8:	str	r2, [r3]
   168cc:	ldr	r2, [r3, #4]
   168d0:	adc	r2, r2, #0
   168d4:	cmp	r1, #3
   168d8:	str	r2, [r3, #4]
   168dc:	beq	168f8 <read_if_statement@@Base+0x84>
   168e0:	ldrd	r0, [r5, #24]
   168e4:	mov	r7, #0
   168e8:	adds	r0, r0, #1
   168ec:	adc	r1, r1, #0
   168f0:	strd	r0, [r5, #24]
   168f4:	b	169d4 <read_if_statement@@Base+0x160>
   168f8:	bl	12d20 <free_token_opar@@Base>
   168fc:	mov	r0, r4
   16900:	bl	16a00 <read_boolean_expression@@Base>
   16904:	mov	r8, r0
   16908:	mov	r0, r4
   1690c:	bl	16480 <read_body@@Base>
   16910:	mov	r6, r0
   16914:	ldr	r0, [r4]
   16918:	bl	13640 <next@@Base>
   1691c:	mov	r1, r0
   16920:	ldr	r0, [r0]
   16924:	mov	r2, #40	; 0x28
   16928:	mov	r3, r5
   1692c:	cmp	r0, #11
   16930:	movweq	r2, #32
   16934:	ldr	r2, [r3, r2]!
   16938:	adds	r2, r2, #1
   1693c:	str	r2, [r3]
   16940:	ldr	r2, [r3, #4]
   16944:	adc	r2, r2, #0
   16948:	cmp	r0, #11
   1694c:	str	r2, [r3, #4]
   16950:	bne	16984 <read_if_statement@@Base+0x110>
   16954:	ldr	r0, [r5, #48]	; 0x30
   16958:	ldr	r3, [r5, #52]	; 0x34
   1695c:	adds	r0, r0, #1
   16960:	str	r0, [r5, #48]	; 0x30
   16964:	adc	r3, r3, #0
   16968:	mov	r0, r1
   1696c:	str	r3, [r5, #52]	; 0x34
   16970:	bl	12f20 <free_token_else@@Base>
   16974:	mov	r0, r4
   16978:	bl	16480 <read_body@@Base>
   1697c:	mov	r4, r0
   16980:	b	169a8 <read_if_statement@@Base+0x134>
   16984:	ldr	r0, [r5, #56]	; 0x38
   16988:	ldr	r3, [r5, #60]	; 0x3c
   1698c:	adds	r0, r0, #1
   16990:	adc	r3, r3, #0
   16994:	str	r0, [r5, #56]	; 0x38
   16998:	str	r3, [r5, #60]	; 0x3c
   1699c:	ldr	r0, [r4]
   169a0:	bl	133d0 <push_back@@Base>
   169a4:	mov	r4, #0
   169a8:	ldrd	r0, [r5, #64]	; 0x40
   169ac:	adds	r0, r0, #1
   169b0:	adc	r1, r1, #0
   169b4:	strd	r0, [r5, #64]	; 0x40
   169b8:	mov	r0, #20
   169bc:	bl	11f68 <malloc@plt>
   169c0:	mov	r1, r8
   169c4:	mov	r2, r6
   169c8:	mov	r3, r4
   169cc:	mov	r7, r0
   169d0:	bl	15270 <init_node_if@@Base>
   169d4:	ldrd	r0, [r5, #72]	; 0x48
   169d8:	adds	r0, r0, #1
   169dc:	adc	r1, r1, #0
   169e0:	strd	r0, [r5, #72]	; 0x48
   169e4:	mov	r0, r7
   169e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   169ec:	andeq	r7, r1, ip, ror #8
   169f0:	andeq	r7, r1, r0, ror r4
   169f4:	nop	{0}
   169f8:	nop	{0}
   169fc:	nop	{0}

00016a00 <read_boolean_expression@@Base>:
   16a00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a04:	add	fp, sp, #28
   16a08:	sub	sp, sp, #12
   16a0c:	ldr	r8, [pc, #524]	; 16c20 <read_boolean_expression@@Base+0x220>
   16a10:	mov	r4, r0
   16a14:	add	r0, pc, #500	; 0x1f4
   16a18:	mov	r5, #0
   16a1c:	vld1.64	{d16-d17}, [r0 :128]
   16a20:	str	r5, [sp, #8]
   16a24:	add	r8, pc, r8
   16a28:	vld1.64	{d18-d19}, [r8 :128]
   16a2c:	vadd.i64	q8, q9, q8
   16a30:	vst1.64	{d16-d17}, [r8 :128]
   16a34:	ldr	r0, [r4]
   16a38:	bl	13640 <next@@Base>
   16a3c:	mov	r6, r0
   16a40:	ldr	r0, [r0]
   16a44:	mov	r1, #24
   16a48:	mov	r2, r8
   16a4c:	cmp	r0, #4
   16a50:	movwne	r1, #16
   16a54:	ldr	r1, [r2, r1]!
   16a58:	adds	r1, r1, #1
   16a5c:	str	r1, [r2]
   16a60:	ldr	r1, [r2, #4]
   16a64:	adc	r1, r1, #0
   16a68:	cmp	r0, #4
   16a6c:	str	r1, [r2, #4]
   16a70:	beq	16ba4 <read_boolean_expression@@Base+0x1a4>
   16a74:	ldr	sl, [pc, #424]	; 16c24 <read_boolean_expression@@Base+0x224>
   16a78:	ldr	r1, [pc, #424]	; 16c28 <read_boolean_expression@@Base+0x228>
   16a7c:	mov	r9, #0
   16a80:	mov	r5, #0
   16a84:	add	r1, pc, r1
   16a88:	add	sl, pc, sl
   16a8c:	add	r1, r1, #8
   16a90:	str	r1, [sp, #4]
   16a94:	cmp	r0, #12
   16a98:	str	r9, [sl]
   16a9c:	beq	16b24 <read_boolean_expression@@Base+0x124>
   16aa0:	cmp	r0, #3
   16aa4:	beq	16ae4 <read_boolean_expression@@Base+0xe4>
   16aa8:	cmp	r0, #1
   16aac:	bne	16bc8 <read_boolean_expression@@Base+0x1c8>
   16ab0:	ldr	r0, [pc, #372]	; 16c2c <read_boolean_expression@@Base+0x22c>
   16ab4:	add	r0, pc, r0
   16ab8:	add	r1, r0, #4
   16abc:	mov	r0, sl
   16ac0:	bl	17118 <read_boolean_unary_expression@@Base+0x164>
   16ac4:	ldrd	r0, [r8, #64]	; 0x40
   16ac8:	adds	r0, r0, #1
   16acc:	adc	r1, r1, #0
   16ad0:	strd	r0, [r8, #64]	; 0x40
   16ad4:	mov	r1, r6
   16ad8:	ldr	r0, [r4]
   16adc:	bl	133d0 <push_back@@Base>
   16ae0:	b	16b08 <read_boolean_expression@@Base+0x108>
   16ae4:	ldr	r0, [pc, #324]	; 16c30 <read_boolean_expression@@Base+0x230>
   16ae8:	add	r0, pc, r0
   16aec:	add	r1, r0, #12
   16af0:	mov	r0, sl
   16af4:	bl	17118 <read_boolean_unary_expression@@Base+0x164>
   16af8:	ldrd	r0, [r8, #80]	; 0x50
   16afc:	adds	r0, r0, #1
   16b00:	adc	r1, r1, #0
   16b04:	strd	r0, [r8, #80]	; 0x50
   16b08:	mov	r0, r4
   16b0c:	mov	r1, r5
   16b10:	add	r2, sp, #8
   16b14:	mov	r3, r7
   16b18:	bl	16c44 <read_single_boolean_expression@@Base>
   16b1c:	mov	r5, r0
   16b20:	b	16b54 <read_boolean_expression@@Base+0x154>
   16b24:	ldr	r1, [sp, #4]
   16b28:	mov	r0, sl
   16b2c:	bl	17118 <read_boolean_unary_expression@@Base+0x164>
   16b30:	ldrd	r0, [r8, #72]	; 0x48
   16b34:	adds	r0, r0, #1
   16b38:	adc	r1, r1, #0
   16b3c:	strd	r0, [r8, #72]	; 0x48
   16b40:	mov	r0, r6
   16b44:	bl	15b48 <get_boolean_op_value@@Base>
   16b48:	mov	r7, r0
   16b4c:	mov	r0, #1
   16b50:	str	r0, [sp, #8]
   16b54:	ldrd	r0, [r8, #88]	; 0x58
   16b58:	adds	r0, r0, #1
   16b5c:	adc	r1, r1, #0
   16b60:	strd	r0, [r8, #88]	; 0x58
   16b64:	ldr	r0, [r4]
   16b68:	bl	13640 <next@@Base>
   16b6c:	mov	r6, r0
   16b70:	ldr	r0, [r0]
   16b74:	mov	r1, #24
   16b78:	mov	r2, r8
   16b7c:	cmp	r0, #4
   16b80:	movwne	r1, #16
   16b84:	ldr	r1, [r2, r1]!
   16b88:	adds	r1, r1, #1
   16b8c:	str	r1, [r2]
   16b90:	ldr	r1, [r2, #4]
   16b94:	adc	r1, r1, #0
   16b98:	cmp	r0, #4
   16b9c:	str	r1, [r2, #4]
   16ba0:	bne	16a94 <read_boolean_expression@@Base+0x94>
   16ba4:	ldrd	r0, [r8, #96]	; 0x60
   16ba8:	adds	r0, r0, #1
   16bac:	adc	r1, r1, #0
   16bb0:	strd	r0, [r8, #96]	; 0x60
   16bb4:	mov	r0, r6
   16bb8:	bl	12d60 <free_token_cpar@@Base>
   16bbc:	mov	r0, r5
   16bc0:	sub	sp, fp, #28
   16bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bc8:	ldr	r0, [pc, #100]	; 16c34 <read_boolean_expression@@Base+0x234>
   16bcc:	ldr	r1, [pc, #100]	; 16c38 <read_boolean_expression@@Base+0x238>
   16bd0:	add	r0, pc, r0
   16bd4:	add	r1, pc, r1
   16bd8:	bl	17118 <read_boolean_unary_expression@@Base+0x164>
   16bdc:	ldr	r0, [pc, #88]	; 16c3c <read_boolean_expression@@Base+0x23c>
   16be0:	mov	r1, #33	; 0x21
   16be4:	mov	r2, #1
   16be8:	ldr	r0, [pc, r0]
   16bec:	ldr	r3, [r0]
   16bf0:	ldr	r0, [pc, #72]	; 16c40 <read_boolean_expression@@Base+0x240>
   16bf4:	add	r0, pc, r0
   16bf8:	bl	11f44 <fwrite@plt>
   16bfc:	mov	r0, #1
   16c00:	bl	11fa4 <exit@plt>
   16c04:	nop	{0}
   16c08:	nop	{0}
   16c0c:	nop	{0}
   16c10:	andeq	r0, r0, r1
   16c14:	andeq	r0, r0, r0
   16c18:	andeq	r0, r0, r1
   16c1c:	andeq	r0, r0, r0
   16c20:	andeq	r7, r1, r4, lsr #6
   16c24:	andeq	r6, r1, r4, asr r6
   16c28:	andeq	r6, r1, r0, lsl #3
   16c2c:	andeq	r6, r1, r0, asr r1
   16c30:	andeq	r6, r1, ip, lsl r1
   16c34:	andeq	r6, r1, ip, lsl #10
   16c38:	andeq	r6, r1, r0, lsr r0
   16c3c:	ldrdeq	r6, [r1], -r0
   16c40:	andeq	r4, r0, r9, lsl pc

00016c44 <read_single_boolean_expression@@Base>:
   16c44:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16c48:	add	fp, sp, #24
   16c4c:	ldr	r5, [pc, #288]	; 16d74 <read_single_boolean_expression@@Base+0x130>
   16c50:	mov	r4, r2
   16c54:	ldr	r2, [pc, #284]	; 16d78 <read_single_boolean_expression@@Base+0x134>
   16c58:	mov	r8, r3
   16c5c:	ldr	r2, [pc, r2]
   16c60:	add	r5, pc, r5
   16c64:	mov	r3, r5
   16c68:	adds	r2, r2, #1
   16c6c:	str	r2, [r5]
   16c70:	ldr	r2, [r5, #4]
   16c74:	adc	r2, r2, #0
   16c78:	cmp	r1, #0
   16c7c:	str	r2, [r5, #4]
   16c80:	mov	r2, #16
   16c84:	movweq	r2, #8
   16c88:	ldr	r2, [r3, r2]!
   16c8c:	adds	r2, r2, #1
   16c90:	str	r2, [r3]
   16c94:	ldr	r2, [r3, #4]
   16c98:	adc	r2, r2, #0
   16c9c:	cmp	r1, #0
   16ca0:	str	r2, [r3, #4]
   16ca4:	beq	16d1c <read_single_boolean_expression@@Base+0xd8>
   16ca8:	ldr	r1, [r4]
   16cac:	mov	r2, #40	; 0x28
   16cb0:	mov	r3, r5
   16cb4:	cmp	r1, #0
   16cb8:	movwne	r2, #32
   16cbc:	ldr	r2, [r3, r2]!
   16cc0:	adds	r2, r2, #1
   16cc4:	str	r2, [r3]
   16cc8:	ldr	r2, [r3, #4]
   16ccc:	adc	r2, r2, #0
   16cd0:	cmp	r1, #0
   16cd4:	str	r2, [r3, #4]
   16cd8:	beq	16d4c <read_single_boolean_expression@@Base+0x108>
   16cdc:	ldrd	r2, [r5, #48]	; 0x30
   16ce0:	adds	r2, r2, #1
   16ce4:	adc	r3, r3, #0
   16ce8:	strd	r2, [r5, #48]	; 0x30
   16cec:	bl	16d84 <read_boolean_binary_expression@@Base>
   16cf0:	mov	r7, r0
   16cf4:	mov	r0, #20
   16cf8:	bl	11f68 <malloc@plt>
   16cfc:	mov	r1, r8
   16d00:	mov	r2, #0
   16d04:	mov	r3, r7
   16d08:	mov	r6, r0
   16d0c:	mov	r9, #0
   16d10:	bl	152f0 <init_node_boolean_operator@@Base>
   16d14:	str	r9, [r4]
   16d18:	b	16d34 <read_single_boolean_expression@@Base+0xf0>
   16d1c:	ldrd	r2, [r5, #24]
   16d20:	adds	r2, r2, #1
   16d24:	adc	r3, r3, #0
   16d28:	strd	r2, [r5, #24]
   16d2c:	bl	16d84 <read_boolean_binary_expression@@Base>
   16d30:	mov	r6, r0
   16d34:	ldrd	r0, [r5, #56]	; 0x38
   16d38:	adds	r0, r0, #1
   16d3c:	adc	r1, r1, #0
   16d40:	strd	r0, [r5, #56]	; 0x38
   16d44:	mov	r0, r6
   16d48:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16d4c:	mov	r0, #4
   16d50:	ldr	r2, [r0]
   16d54:	ldr	r0, [pc, #32]	; 16d7c <read_single_boolean_expression@@Base+0x138>
   16d58:	ldr	r0, [pc, r0]
   16d5c:	ldr	r0, [r0]
   16d60:	ldr	r1, [pc, #24]	; 16d80 <read_single_boolean_expression@@Base+0x13c>
   16d64:	add	r1, pc, r1
   16d68:	bl	11fd4 <fprintf@plt>
   16d6c:	mov	r0, #1
   16d70:	bl	11fa4 <exit@plt>
   16d74:	andeq	r7, r1, r8, asr r1
   16d78:	andeq	r7, r1, ip, asr r1
   16d7c:	andeq	r6, r1, r0, ror #6
   16d80:	andeq	r4, r0, fp, asr #27

00016d84 <read_boolean_binary_expression@@Base>:
   16d84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16d88:	add	fp, sp, #24
   16d8c:	ldr	r4, [pc, #536]	; 16fac <read_boolean_binary_expression@@Base+0x228>
   16d90:	mov	r5, r0
   16d94:	ldr	r0, [pc, #532]	; 16fb0 <read_boolean_binary_expression@@Base+0x22c>
   16d98:	ldr	r0, [pc, r0]
   16d9c:	add	r4, pc, r4
   16da0:	adds	r0, r0, #1
   16da4:	str	r0, [r4]
   16da8:	ldr	r0, [r4, #4]
   16dac:	adc	r0, r0, #0
   16db0:	str	r0, [r4, #4]
   16db4:	ldr	r0, [r5]
   16db8:	bl	13640 <next@@Base>
   16dbc:	mov	r6, r0
   16dc0:	ldr	r0, [r0]
   16dc4:	mov	r1, #16
   16dc8:	mov	r2, r4
   16dcc:	cmp	r0, #1
   16dd0:	movwne	r1, #8
   16dd4:	ldr	r1, [r2, r1]!
   16dd8:	adds	r1, r1, #1
   16ddc:	str	r1, [r2]
   16de0:	ldr	r1, [r2, #4]
   16de4:	adc	r1, r1, #0
   16de8:	cmp	r0, #1
   16dec:	str	r1, [r2, #4]
   16df0:	beq	16e50 <read_boolean_binary_expression@@Base+0xcc>
   16df4:	mov	r1, #32
   16df8:	cmp	r0, #12
   16dfc:	mov	r2, r4
   16e00:	movweq	r1, #24
   16e04:	ldr	r1, [r2, r1]!
   16e08:	adds	r1, r1, #1
   16e0c:	str	r1, [r2]
   16e10:	ldr	r1, [r2, #4]
   16e14:	adc	r1, r1, #0
   16e18:	cmp	r0, #12
   16e1c:	str	r1, [r2, #4]
   16e20:	bne	16ec0 <read_boolean_binary_expression@@Base+0x13c>
   16e24:	ldrd	r0, [r4, #40]	; 0x28
   16e28:	adds	r0, r0, #1
   16e2c:	adc	r1, r1, #0
   16e30:	strd	r0, [r4, #40]	; 0x28
   16e34:	mov	r1, r6
   16e38:	ldr	r0, [r5]
   16e3c:	bl	133d0 <push_back@@Base>
   16e40:	mov	r0, r5
   16e44:	bl	16fb4 <read_boolean_unary_expression@@Base>
   16e48:	mov	r5, r0
   16e4c:	b	16f94 <read_boolean_binary_expression@@Base+0x210>
   16e50:	mov	r0, #12
   16e54:	bl	11f68 <malloc@plt>
   16e58:	ldr	r1, [r6, #4]
   16e5c:	mov	r8, r0
   16e60:	bl	150e0 <init_node_int@@Base>
   16e64:	mov	r0, r6
   16e68:	bl	12ca0 <free_token_int_value@@Base>
   16e6c:	ldr	r0, [r5]
   16e70:	bl	13640 <next@@Base>
   16e74:	mov	r7, r0
   16e78:	ldr	r0, [r0]
   16e7c:	mov	r1, #64	; 0x40
   16e80:	mov	r2, r4
   16e84:	cmp	r0, #12
   16e88:	movwne	r1, #56	; 0x38
   16e8c:	ldr	r1, [r2, r1]!
   16e90:	adds	r1, r1, #1
   16e94:	str	r1, [r2]
   16e98:	ldr	r1, [r2, #4]
   16e9c:	adc	r1, r1, #0
   16ea0:	cmp	r0, #12
   16ea4:	str	r1, [r2, #4]
   16ea8:	beq	16ed8 <read_boolean_binary_expression@@Base+0x154>
   16eac:	ldrd	r0, [r4, #72]	; 0x48
   16eb0:	adds	r0, r0, #1
   16eb4:	adc	r1, r1, #0
   16eb8:	strd	r0, [r4, #72]	; 0x48
   16ebc:	b	16f3c <read_boolean_binary_expression@@Base+0x1b8>
   16ec0:	ldrd	r0, [r4, #48]	; 0x30
   16ec4:	mov	r5, #0
   16ec8:	adds	r0, r0, #1
   16ecc:	adc	r1, r1, #0
   16ed0:	strd	r0, [r4, #48]	; 0x30
   16ed4:	b	16f94 <read_boolean_binary_expression@@Base+0x210>
   16ed8:	mov	r0, r7
   16edc:	bl	15b48 <get_boolean_op_value@@Base>
   16ee0:	mov	r6, r0
   16ee4:	mov	r0, r7
   16ee8:	bl	12f54 <free_token_boolean_op@@Base>
   16eec:	ldr	r0, [r5]
   16ef0:	bl	13640 <next@@Base>
   16ef4:	mov	r5, r0
   16ef8:	ldr	r0, [r0]
   16efc:	mov	r1, #88	; 0x58
   16f00:	mov	r2, r4
   16f04:	cmp	r0, #1
   16f08:	movwne	r1, #80	; 0x50
   16f0c:	ldr	r1, [r2, r1]!
   16f10:	adds	r1, r1, #1
   16f14:	str	r1, [r2]
   16f18:	ldr	r1, [r2, #4]
   16f1c:	adc	r1, r1, #0
   16f20:	cmp	r0, #1
   16f24:	str	r1, [r2, #4]
   16f28:	beq	16f4c <read_boolean_binary_expression@@Base+0x1c8>
   16f2c:	ldrd	r0, [r4, #96]	; 0x60
   16f30:	adds	r0, r0, #1
   16f34:	adc	r1, r1, #0
   16f38:	strd	r0, [r4, #96]	; 0x60
   16f3c:	mov	r0, r8
   16f40:	bl	1537c <free_node@@Base>
   16f44:	mov	r5, #0
   16f48:	b	16f94 <read_boolean_binary_expression@@Base+0x210>
   16f4c:	ldrd	r0, [r4, #104]	; 0x68
   16f50:	adds	r0, r0, #1
   16f54:	adc	r1, r1, #0
   16f58:	strd	r0, [r4, #104]	; 0x68
   16f5c:	mov	r0, #12
   16f60:	bl	11f68 <malloc@plt>
   16f64:	ldr	r1, [r5, #4]
   16f68:	mov	r7, r0
   16f6c:	bl	150e0 <init_node_int@@Base>
   16f70:	mov	r0, r5
   16f74:	bl	12ca0 <free_token_int_value@@Base>
   16f78:	mov	r0, #20
   16f7c:	bl	11f68 <malloc@plt>
   16f80:	mov	r1, r6
   16f84:	mov	r2, r8
   16f88:	mov	r3, r7
   16f8c:	mov	r5, r0
   16f90:	bl	152f0 <init_node_boolean_operator@@Base>
   16f94:	ldrd	r0, [r4, #112]	; 0x70
   16f98:	adds	r0, r0, #1
   16f9c:	adc	r1, r1, #0
   16fa0:	strd	r0, [r4, #112]	; 0x70
   16fa4:	mov	r0, r5
   16fa8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16fac:	andeq	r7, r1, ip, asr r0
   16fb0:	andeq	r7, r1, r0, rrx

00016fb4 <read_boolean_unary_expression@@Base>:
   16fb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16fb8:	add	fp, sp, #24
   16fbc:	ldr	r5, [pc, #332]	; 17110 <read_boolean_unary_expression@@Base+0x15c>
   16fc0:	mov	r6, r0
   16fc4:	ldr	r0, [pc, #328]	; 17114 <read_boolean_unary_expression@@Base+0x160>
   16fc8:	ldr	r0, [pc, r0]
   16fcc:	add	r5, pc, r5
   16fd0:	adds	r0, r0, #1
   16fd4:	str	r0, [r5]
   16fd8:	ldr	r0, [r5, #4]
   16fdc:	adc	r0, r0, #0
   16fe0:	str	r0, [r5, #4]
   16fe4:	mov	r0, #20
   16fe8:	bl	11f68 <malloc@plt>
   16fec:	mov	r4, r0
   16ff0:	ldr	r0, [r6]
   16ff4:	bl	13640 <next@@Base>
   16ff8:	mov	r7, r0
   16ffc:	ldr	r0, [r0]
   17000:	mov	r1, #16
   17004:	mov	r2, r5
   17008:	cmp	r0, #12
   1700c:	movwne	r1, #8
   17010:	ldr	r1, [r2, r1]!
   17014:	adds	r1, r1, #1
   17018:	str	r1, [r2]
   1701c:	ldr	r1, [r2, #4]
   17020:	adc	r1, r1, #0
   17024:	cmp	r0, #12
   17028:	str	r1, [r2, #4]
   1702c:	beq	17044 <read_boolean_unary_expression@@Base+0x90>
   17030:	ldrd	r0, [r5, #24]
   17034:	adds	r0, r0, #1
   17038:	adc	r1, r1, #0
   1703c:	strd	r0, [r5, #24]
   17040:	b	170a8 <read_boolean_unary_expression@@Base+0xf4>
   17044:	mov	r0, r7
   17048:	bl	15b48 <get_boolean_op_value@@Base>
   1704c:	mov	r8, r0
   17050:	mov	r0, r7
   17054:	bl	12f54 <free_token_boolean_op@@Base>
   17058:	ldr	r0, [r6]
   1705c:	bl	13640 <next@@Base>
   17060:	mov	r6, r0
   17064:	ldr	r0, [r0]
   17068:	mov	r1, #40	; 0x28
   1706c:	mov	r2, r5
   17070:	cmp	r0, #1
   17074:	movwne	r1, #32
   17078:	ldr	r1, [r2, r1]!
   1707c:	adds	r1, r1, #1
   17080:	str	r1, [r2]
   17084:	ldr	r1, [r2, #4]
   17088:	adc	r1, r1, #0
   1708c:	cmp	r0, #1
   17090:	str	r1, [r2, #4]
   17094:	beq	170b8 <read_boolean_unary_expression@@Base+0x104>
   17098:	ldrd	r0, [r5, #48]	; 0x30
   1709c:	adds	r0, r0, #1
   170a0:	adc	r1, r1, #0
   170a4:	strd	r0, [r5, #48]	; 0x30
   170a8:	mov	r0, r4
   170ac:	bl	15a9c <free_node_boolean_operator@@Base>
   170b0:	mov	r4, #0
   170b4:	b	170f8 <read_boolean_unary_expression@@Base+0x144>
   170b8:	ldrd	r0, [r5, #56]	; 0x38
   170bc:	adds	r0, r0, #1
   170c0:	adc	r1, r1, #0
   170c4:	strd	r0, [r5, #56]	; 0x38
   170c8:	mov	r0, #12
   170cc:	bl	11f68 <malloc@plt>
   170d0:	ldr	r1, [r6, #4]
   170d4:	mov	r7, r0
   170d8:	bl	150e0 <init_node_int@@Base>
   170dc:	mov	r0, r6
   170e0:	bl	12ca0 <free_token_int_value@@Base>
   170e4:	mov	r0, r4
   170e8:	mov	r1, r8
   170ec:	mov	r2, r7
   170f0:	mov	r3, #0
   170f4:	bl	152f0 <init_node_boolean_operator@@Base>
   170f8:	ldrd	r0, [r5, #64]	; 0x40
   170fc:	adds	r0, r0, #1
   17100:	adc	r1, r1, #0
   17104:	strd	r0, [r5, #64]	; 0x40
   17108:	mov	r0, r4
   1710c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17110:	andeq	r6, r1, ip, lsr #29
   17114:			; <UNDEFINED> instruction: 0x00016eb0
   17118:	ldr	r0, [r0]
   1711c:	cmn	r0, #1
   17120:	ldrne	r0, [r1, r0, lsl #2]
   17124:	cmpne	r0, #0
   17128:	bne	17130 <read_boolean_unary_expression@@Base+0x17c>
   1712c:	bx	lr
   17130:	ldrd	r2, [r0]
   17134:	adds	r2, r2, #1
   17138:	adc	r3, r3, #0
   1713c:	strd	r2, [r0]
   17140:	bx	lr
   17144:	push	{r4, r5, r6, lr}
   17148:	sub	sp, sp, #8
   1714c:	ldr	r0, [pc, #112]	; 171c4 <read_boolean_unary_expression@@Base+0x210>
   17150:	ldr	r1, [pc, #112]	; 171c8 <read_boolean_unary_expression@@Base+0x214>
   17154:	movw	r2, #27576	; 0x6bb8
   17158:	movt	r2, #51930	; 0xcada
   1715c:	add	r0, pc, r0
   17160:	add	r1, pc, r1
   17164:	bl	18420 <__generate_code_for_binary_boolean_expression@@Base+0x5d0>
   17168:	ldr	r0, [pc, #92]	; 171cc <read_boolean_unary_expression@@Base+0x218>
   1716c:	ldr	r6, [pc, #92]	; 171d0 <read_boolean_unary_expression@@Base+0x21c>
   17170:	mov	r5, #0
   17174:	add	r0, pc, r0
   17178:	add	r6, pc, r6
   1717c:	add	r4, r0, #4
   17180:	mov	r3, r6
   17184:	ldr	r0, [r3, r5]!
   17188:	ldr	r1, [r3, #16]
   1718c:	str	r1, [sp]
   17190:	ldmib	r3, {r1, r2}
   17194:	ldrb	r3, [r3, #12]
   17198:	bl	18b84 <__generate_code_for_binary_boolean_expression@@Base+0xd34>
   1719c:	ldrd	r0, [r4, #-4]
   171a0:	bl	19438 <__generate_code_for_binary_boolean_expression@@Base+0x15e8>
   171a4:	add	r5, r5, #20
   171a8:	add	r4, r4, #8
   171ac:	cmp	r5, #220	; 0xdc
   171b0:	bne	17180 <read_boolean_unary_expression@@Base+0x1cc>
   171b4:	bl	19bb4 <__generate_code_for_binary_boolean_expression@@Base+0x1d64>
   171b8:	add	sp, sp, #8
   171bc:	pop	{r4, r5, r6, lr}
   171c0:	b	1a920 <__generate_code_for_binary_boolean_expression@@Base+0x2ad0>
   171c4:	andeq	r4, r0, ip, lsr sl
   171c8:	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
   171cc:	andeq	r5, r1, r4, lsl #23
   171d0:	andeq	r5, r1, r0, lsr #21
   171d4:	push	{r4, r5, fp, lr}
   171d8:	vpush	{d8-d9}
   171dc:	bl	17144 <read_boolean_unary_expression@@Base+0x190>
   171e0:	ldr	r0, [pc, #440]	; 173a0 <read_boolean_unary_expression@@Base+0x3ec>
   171e4:	vmov.i32	q4, #0	; 0x00000000
   171e8:	mov	r4, #0
   171ec:	mov	r5, #116	; 0x74
   171f0:	mov	r2, #160	; 0xa0
   171f4:	add	r0, pc, r0
   171f8:	vst1.64	{d8-d9}, [r0 :128]
   171fc:	ldr	r0, [pc, #416]	; 173a4 <read_boolean_unary_expression@@Base+0x3f0>
   17200:	add	r0, pc, r0
   17204:	vst1.64	{d8-d9}, [r0 :128]
   17208:	ldr	r0, [pc, #408]	; 173a8 <read_boolean_unary_expression@@Base+0x3f4>
   1720c:	add	r0, pc, r0
   17210:	vst1.64	{d8-d9}, [r0 :128]
   17214:	ldr	r0, [pc, #400]	; 173ac <read_boolean_unary_expression@@Base+0x3f8>
   17218:	add	r0, pc, r0
   1721c:	add	r1, r0, #96	; 0x60
   17220:	str	r4, [r0, #112]	; 0x70
   17224:	vst1.64	{d8-d9}, [r1 :128]
   17228:	add	r1, r0, #80	; 0x50
   1722c:	vst1.64	{d8-d9}, [r1 :128]
   17230:	add	r1, r0, #64	; 0x40
   17234:	vst1.64	{d8-d9}, [r1 :128]
   17238:	add	r1, r0, #48	; 0x30
   1723c:	vst1.64	{d8-d9}, [r1 :128]
   17240:	add	r1, r0, #32
   17244:	vst1.64	{d8-d9}, [r1 :128]
   17248:	add	r1, r0, #16
   1724c:	vst1.64	{d8-d9}, [r0 :128], r5
   17250:	vst1.64	{d8-d9}, [r1 :128]
   17254:	str	r4, [r0]
   17258:	mov	r1, #0
   1725c:	ldr	r0, [pc, #332]	; 173b0 <read_boolean_unary_expression@@Base+0x3fc>
   17260:	add	r0, pc, r0
   17264:	bl	12004 <memset@plt>
   17268:	ldr	r1, [pc, #324]	; 173b4 <read_boolean_unary_expression@@Base+0x400>
   1726c:	add	r1, pc, r1
   17270:	add	r0, r1, #80	; 0x50
   17274:	vst1.64	{d8-d9}, [r0 :128]
   17278:	add	r0, r1, #64	; 0x40
   1727c:	vst1.64	{d8-d9}, [r0 :128]
   17280:	add	r0, r1, #48	; 0x30
   17284:	vst1.64	{d8-d9}, [r0 :128]
   17288:	add	r0, r1, #32
   1728c:	vst1.64	{d8-d9}, [r0 :128]
   17290:	add	r0, r1, #16
   17294:	vst1.64	{d8-d9}, [r0 :128]
   17298:	ldr	r0, [pc, #280]	; 173b8 <read_boolean_unary_expression@@Base+0x404>
   1729c:	add	r0, pc, r0
   172a0:	add	r2, r0, #48	; 0x30
   172a4:	vst1.64	{d8-d9}, [r2 :128]
   172a8:	add	r2, r0, #32
   172ac:	vst1.64	{d8-d9}, [r2 :128]
   172b0:	add	r2, r0, #16
   172b4:	vst1.64	{d8-d9}, [r2 :128]
   172b8:	ldr	r2, [pc, #252]	; 173bc <read_boolean_unary_expression@@Base+0x408>
   172bc:	str	r4, [r1, #96]	; 0x60
   172c0:	add	r2, pc, r2
   172c4:	add	r3, r2, #48	; 0x30
   172c8:	str	r4, [r2, #64]	; 0x40
   172cc:	vst1.64	{d8-d9}, [r3 :128]
   172d0:	add	r3, r2, #32
   172d4:	vst1.64	{d8-d9}, [r3 :128]
   172d8:	add	r3, r2, #16
   172dc:	vst1.64	{d8-d9}, [r3 :128]
   172e0:	mov	r3, #64	; 0x40
   172e4:	vst1.64	{d8-d9}, [r0 :128], r3
   172e8:	vst1.64	{d8-d9}, [r0 :128]
   172ec:	mov	r0, #68	; 0x44
   172f0:	vst1.64	{d8-d9}, [r2 :128], r0
   172f4:	str	r4, [r2]
   172f8:	mov	r2, #100	; 0x64
   172fc:	vst1.64	{d8-d9}, [r1 :128], r2
   17300:	str	r4, [r1]
   17304:	ldr	r1, [pc, #180]	; 173c0 <read_boolean_unary_expression@@Base+0x40c>
   17308:	add	r1, pc, r1
   1730c:	add	r2, r1, #32
   17310:	vst1.64	{d8-d9}, [r2 :128]
   17314:	add	r2, r1, #16
   17318:	vst1.64	{d8-d9}, [r2 :128]
   1731c:	mov	r2, #48	; 0x30
   17320:	vst1.64	{d8-d9}, [r1 :128], r2
   17324:	vst1.64	{d8-d9}, [r1 :128]
   17328:	ldr	r1, [pc, #148]	; 173c4 <read_boolean_unary_expression@@Base+0x410>
   1732c:	add	r1, pc, r1
   17330:	add	r2, r1, #96	; 0x60
   17334:	str	r4, [r1, #112]	; 0x70
   17338:	vst1.64	{d8-d9}, [r2 :128]
   1733c:	add	r2, r1, #80	; 0x50
   17340:	vst1.64	{d8-d9}, [r2 :128]
   17344:	add	r2, r1, #64	; 0x40
   17348:	vst1.64	{d8-d9}, [r2 :128]
   1734c:	add	r2, r1, #48	; 0x30
   17350:	vst1.64	{d8-d9}, [r2 :128]
   17354:	add	r2, r1, #32
   17358:	vst1.64	{d8-d9}, [r2 :128]
   1735c:	add	r2, r1, #16
   17360:	vst1.64	{d8-d9}, [r1 :128], r5
   17364:	vst1.64	{d8-d9}, [r2 :128]
   17368:	str	r4, [r1]
   1736c:	ldr	r1, [pc, #84]	; 173c8 <read_boolean_unary_expression@@Base+0x414>
   17370:	add	r1, pc, r1
   17374:	add	r2, r1, #48	; 0x30
   17378:	str	r4, [r1, #64]	; 0x40
   1737c:	vst1.64	{d8-d9}, [r2 :128]
   17380:	add	r2, r1, #32
   17384:	vst1.64	{d8-d9}, [r2 :128]
   17388:	add	r2, r1, #16
   1738c:	vst1.64	{d8-d9}, [r1 :128], r0
   17390:	vst1.64	{d8-d9}, [r2 :128]
   17394:	str	r4, [r1]
   17398:	vpop	{d8-d9}
   1739c:	pop	{r4, r5, fp, pc}
   173a0:	andeq	r6, r1, r4, ror r9
   173a4:	andeq	r6, r1, r8, asr r9
   173a8:	andeq	r6, r1, ip, ror #18
   173ac:	andeq	r6, r1, r0, ror r9
   173b0:	andeq	r6, r1, r8, lsr #19
   173b4:	ldrdeq	r6, [r1], -ip
   173b8:	andeq	r6, r1, ip, asr sl
   173bc:	andeq	r6, r1, r8, ror #19
   173c0:			; <UNDEFINED> instruction: 0x00016ab0
   173c4:	andeq	r6, r1, ip, asr #21
   173c8:	andeq	r6, r1, r8, lsl #22
   173cc:	ldr	r0, [pc, #12]	; 173e0 <read_boolean_unary_expression@@Base+0x42c>
   173d0:	ldr	r1, [pc, #12]	; 173e4 <read_boolean_unary_expression@@Base+0x430>
   173d4:	add	r0, pc, r0
   173d8:	add	r1, pc, r1
   173dc:	b	1add0 <__gcov_flush@@Base+0xb4>
   173e0:			; <UNDEFINED> instruction: 0xfffffd68
   173e4:			; <UNDEFINED> instruction: 0xfffffdf4
	...

000173f0 <init_generator@@Base>:
   173f0:	push	{r4, sl, fp, lr}
   173f4:	add	fp, sp, #8
   173f8:	mov	r4, r0
   173fc:	ldr	r0, [pc, #76]	; 17450 <init_generator@@Base+0x60>
   17400:	add	r3, pc, #56	; 0x38
   17404:	vld1.64	{d16-d17}, [r3 :128]
   17408:	add	r0, pc, r0
   1740c:	vld1.64	{d18-d19}, [r0 :128]
   17410:	vadd.i64	q8, q9, q8
   17414:	vst1.64	{d16-d17}, [r0 :128]
   17418:	str	r1, [r4]
   1741c:	mov	r0, r2
   17420:	ldr	r1, [pc, #44]	; 17454 <init_generator@@Base+0x64>
   17424:	add	r1, pc, r1
   17428:	bl	11ed8 <fopen@plt>
   1742c:	mov	r1, #0
   17430:	stmib	r4, {r0, r1}
   17434:	str	r1, [r4, #12]
   17438:	pop	{r4, sl, fp, pc}
   1743c:	nop	{0}
   17440:	andeq	r0, r0, r1
   17444:	andeq	r0, r0, r0
   17448:	andeq	r0, r0, r1
   1744c:	andeq	r0, r0, r0
   17450:	andeq	r6, r1, r0, asr #21
   17454:	andeq	r4, r0, r2, asr #17
   17458:	nop	{0}
   1745c:	nop	{0}

00017460 <destroy_generator@@Base>:
   17460:	ldr	r1, [pc, #56]	; 174a0 <destroy_generator@@Base+0x40>
   17464:	add	r2, pc, #36	; 0x24
   17468:	vld1.64	{d16-d17}, [r2 :128]
   1746c:	add	r1, pc, r1
   17470:	vld1.64	{d18-d19}, [r1 :128]
   17474:	vadd.i64	q8, q9, q8
   17478:	vst1.64	{d16-d17}, [r1 :128]
   1747c:	ldr	r0, [r0, #4]
   17480:	b	12028 <fclose@plt>
   17484:	nop	{0}
   17488:	nop	{0}
   1748c:	nop	{0}
   17490:	andeq	r0, r0, r1
   17494:	andeq	r0, r0, r0
   17498:	andeq	r0, r0, r1
   1749c:	andeq	r0, r0, r0
   174a0:	andeq	r6, r1, ip, ror #20
   174a4:	nop	{0}
   174a8:	nop	{0}
   174ac:	nop	{0}

000174b0 <generate_code@@Base>:
   174b0:	push	{r4, r5, fp, lr}
   174b4:	add	fp, sp, #8
   174b8:	vpush	{d8-d9}
   174bc:	mov	r4, r0
   174c0:	ldr	r0, [pc, #120]	; 17540 <generate_code@@Base+0x90>
   174c4:	add	r1, pc, #100	; 0x64
   174c8:	vld1.64	{d8-d9}, [r1 :128]
   174cc:	add	r0, pc, r0
   174d0:	vld1.64	{d16-d17}, [r0 :128]
   174d4:	vadd.i64	q8, q8, q4
   174d8:	vst1.64	{d16-d17}, [r0 :128]
   174dc:	ldr	r0, [r4]
   174e0:	bl	16260 <build_ast@@Base>
   174e4:	mov	r5, r0
   174e8:	ldr	r0, [pc, #84]	; 17544 <generate_code@@Base+0x94>
   174ec:	mov	r1, #21
   174f0:	mov	r2, #1
   174f4:	add	r0, pc, r0
   174f8:	vld1.64	{d16-d17}, [r0 :128]
   174fc:	vadd.i64	q8, q8, q4
   17500:	vst1.64	{d16-d17}, [r0 :128]
   17504:	ldr	r3, [r4, #4]
   17508:	ldr	r0, [pc, #56]	; 17548 <generate_code@@Base+0x98>
   1750c:	add	r0, pc, r0
   17510:	bl	11f44 <fwrite@plt>
   17514:	mov	r0, r4
   17518:	mov	r1, r5
   1751c:	bl	175d0 <__generate_code_for_main@@Base>
   17520:	mov	r0, r5
   17524:	vpop	{d8-d9}
   17528:	pop	{r4, r5, fp, lr}
   1752c:	b	1537c <free_node@@Base>
   17530:	andeq	r0, r0, r1
   17534:	andeq	r0, r0, r0
   17538:	andeq	r0, r0, r1
   1753c:	andeq	r0, r0, r0
   17540:	andeq	r6, r1, ip, lsl sl
   17544:	andeq	r6, r1, r4, lsl #20
   17548:	ldrdeq	r4, [r0], -ip
   1754c:	nop	{0}

00017550 <__generate_code@@Base>:
   17550:	push	{r4, r5, fp, lr}
   17554:	add	fp, sp, #8
   17558:	mov	r5, r0
   1755c:	ldr	r0, [pc, #92]	; 175c0 <__generate_code@@Base+0x70>
   17560:	mov	r4, r1
   17564:	add	r1, pc, #68	; 0x44
   17568:	mov	r2, #1
   1756c:	vld1.64	{d16-d17}, [r1 :128]
   17570:	mov	r1, #21
   17574:	add	r0, pc, r0
   17578:	vld1.64	{d18-d19}, [r0 :128]
   1757c:	vadd.i64	q8, q9, q8
   17580:	vst1.64	{d16-d17}, [r0 :128]
   17584:	ldr	r3, [r5, #4]
   17588:	ldr	r0, [pc, #52]	; 175c4 <__generate_code@@Base+0x74>
   1758c:	add	r0, pc, r0
   17590:	bl	11f44 <fwrite@plt>
   17594:	mov	r0, r5
   17598:	mov	r1, r4
   1759c:	pop	{r4, r5, fp, lr}
   175a0:	b	175d0 <__generate_code_for_main@@Base>
   175a4:	nop	{0}
   175a8:	nop	{0}
   175ac:	nop	{0}
   175b0:	andeq	r0, r0, r1
   175b4:	andeq	r0, r0, r0
   175b8:	andeq	r0, r0, r1
   175bc:	andeq	r0, r0, r0
   175c0:	andeq	r6, r1, r4, lsl #19
   175c4:	andeq	r4, r0, ip, asr r7
   175c8:	nop	{0}
   175cc:	nop	{0}

000175d0 <__generate_code_for_main@@Base>:
   175d0:	push	{r4, r5, fp, lr}
   175d4:	add	fp, sp, #8
   175d8:	mov	r4, r0
   175dc:	ldr	r0, [pc, #220]	; 176c0 <__generate_code_for_main@@Base+0xf0>
   175e0:	mov	r5, r1
   175e4:	ldr	r1, [pc, #216]	; 176c4 <__generate_code_for_main@@Base+0xf4>
   175e8:	mov	r2, #16
   175ec:	ldr	r1, [pc, r1]
   175f0:	add	r0, pc, r0
   175f4:	mov	r3, r0
   175f8:	adds	r1, r1, #1
   175fc:	str	r1, [r0]
   17600:	ldr	r1, [r0, #4]
   17604:	adc	r1, r1, #0
   17608:	str	r1, [r0, #4]
   1760c:	ldr	r1, [r5]
   17610:	cmp	r1, #2
   17614:	movweq	r2, #8
   17618:	ldr	r2, [r3, r2]!
   1761c:	adds	r2, r2, #1
   17620:	str	r2, [r3]
   17624:	ldr	r2, [r3, #4]
   17628:	adc	r2, r2, #0
   1762c:	cmp	r1, #2
   17630:	str	r2, [r3, #4]
   17634:	bne	17688 <__generate_code_for_main@@Base+0xb8>
   17638:	ldr	r1, [pc, #136]	; 176c8 <__generate_code_for_main@@Base+0xf8>
   1763c:	add	r2, pc, #108	; 0x6c
   17640:	vld1.64	{d16-d17}, [r2 :128]
   17644:	ldrd	r2, [r0, #24]
   17648:	add	r1, pc, r1
   1764c:	vld1.64	{d18-d19}, [r1 :128]
   17650:	adds	r2, r2, #1
   17654:	adc	r3, r3, #0
   17658:	strd	r2, [r0, #24]
   1765c:	vadd.i64	q8, q9, q8
   17660:	vst1.64	{d16-d17}, [r1 :128]
   17664:	ldr	r2, [r5, #8]
   17668:	ldr	r0, [r4, #4]
   1766c:	ldr	r1, [pc, #88]	; 176cc <__generate_code_for_main@@Base+0xfc>
   17670:	add	r1, pc, r1
   17674:	bl	11fd4 <fprintf@plt>
   17678:	ldr	r1, [r5, #12]
   1767c:	mov	r0, r4
   17680:	pop	{r4, r5, fp, lr}
   17684:	b	17750 <__generate_code_for_body@@Base>
   17688:	ldr	r0, [pc, #64]	; 176d0 <__generate_code_for_main@@Base+0x100>
   1768c:	mov	r1, #46	; 0x2e
   17690:	mov	r2, #1
   17694:	ldr	r0, [pc, r0]
   17698:	ldr	r3, [r0]
   1769c:	ldr	r0, [pc, #48]	; 176d4 <__generate_code_for_main@@Base+0x104>
   176a0:	add	r0, pc, r0
   176a4:	bl	11f44 <fwrite@plt>
   176a8:	mov	r0, #1
   176ac:	bl	11fa4 <exit@plt>
   176b0:	andeq	r0, r0, r1
   176b4:	andeq	r0, r0, r0
   176b8:	andeq	r0, r0, r1
   176bc:	andeq	r0, r0, r0
   176c0:	andeq	r6, r1, r8, lsl r9
   176c4:	andeq	r6, r1, ip, lsl r9
   176c8:	andeq	r6, r1, r0, ror #17
   176cc:			; <UNDEFINED> instruction: 0x000046bd
   176d0:	andeq	r5, r1, r4, lsr #20
   176d4:	andeq	r4, r0, lr, asr r6
   176d8:	nop	{0}
   176dc:	nop	{0}

000176e0 <__generate_code_for_function@@Base>:
   176e0:	push	{r4, r5, fp, lr}
   176e4:	add	fp, sp, #8
   176e8:	mov	r5, r0
   176ec:	ldr	r0, [pc, #76]	; 17740 <__generate_code_for_function@@Base+0x60>
   176f0:	mov	r4, r1
   176f4:	add	r1, pc, #52	; 0x34
   176f8:	vld1.64	{d16-d17}, [r1 :128]
   176fc:	add	r0, pc, r0
   17700:	vld1.64	{d18-d19}, [r0 :128]
   17704:	vadd.i64	q8, q9, q8
   17708:	vst1.64	{d16-d17}, [r0 :128]
   1770c:	ldr	r2, [r4, #8]
   17710:	ldr	r0, [r5, #4]
   17714:	ldr	r1, [pc, #40]	; 17744 <__generate_code_for_function@@Base+0x64>
   17718:	add	r1, pc, r1
   1771c:	bl	11fd4 <fprintf@plt>
   17720:	ldr	r1, [r4, #12]
   17724:	mov	r0, r5
   17728:	pop	{r4, r5, fp, lr}
   1772c:	b	17750 <__generate_code_for_body@@Base>
   17730:	andeq	r0, r0, r1
   17734:	andeq	r0, r0, r0
   17738:	andeq	r0, r0, r1
   1773c:	andeq	r0, r0, r0
   17740:	andeq	r6, r1, ip, lsr #16
   17744:	andeq	r4, r0, r5, lsl r6
   17748:	nop	{0}
   1774c:	nop	{0}

00017750 <__generate_code_for_body@@Base>:
   17750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17754:	add	fp, sp, #28
   17758:	sub	sp, sp, #4
   1775c:	ldr	r7, [pc, #380]	; 178e0 <__generate_code_for_body@@Base+0x190>
   17760:	mov	r4, r0
   17764:	add	r0, pc, #356	; 0x164
   17768:	cmp	r1, #0
   1776c:	mov	r6, r1
   17770:	vld1.64	{d16-d17}, [r0 :128]
   17774:	mov	r0, #24
   17778:	movwne	r0, #16
   1777c:	add	r7, pc, r7
   17780:	vld1.64	{d18-d19}, [r7 :128]
   17784:	mov	r1, r7
   17788:	vadd.i64	q8, q9, q8
   1778c:	vst1.64	{d16-d17}, [r1 :128], r0
   17790:	ldm	r1, {r0, r3}
   17794:	adds	r0, r0, #1
   17798:	adc	r3, r3, #0
   1779c:	cmp	r6, #0
   177a0:	stm	r1, {r0, r3}
   177a4:	beq	17874 <__generate_code_for_body@@Base+0x124>
   177a8:	ldr	r5, [pc, #308]	; 178e4 <__generate_code_for_body@@Base+0x194>
   177ac:	ldr	r0, [pc, #308]	; 178e8 <__generate_code_for_body@@Base+0x198>
   177b0:	add	r0, pc, r0
   177b4:	add	r5, pc, r5
   177b8:	add	r8, r0, #8
   177bc:	add	r9, r0, #4
   177c0:	mov	r0, #0
   177c4:	str	r0, [r5]
   177c8:	ldm	r6, {r0, sl}
   177cc:	cmp	r0, #4
   177d0:	beq	17808 <__generate_code_for_body@@Base+0xb8>
   177d4:	cmp	r0, #3
   177d8:	bne	1788c <__generate_code_for_body@@Base+0x13c>
   177dc:	mov	r0, r5
   177e0:	mov	r1, r9
   177e4:	bl	18200 <__generate_code_for_binary_boolean_expression@@Base+0x3b0>
   177e8:	ldrd	r0, [r7, #56]	; 0x38
   177ec:	adds	r0, r0, #1
   177f0:	adc	r1, r1, #0
   177f4:	strd	r0, [r7, #56]	; 0x38
   177f8:	mov	r0, r4
   177fc:	mov	r1, r6
   17800:	bl	17b50 <__generate_code_for_return@@Base>
   17804:	b	17830 <__generate_code_for_body@@Base+0xe0>
   17808:	mov	r0, r5
   1780c:	mov	r1, r8
   17810:	bl	18200 <__generate_code_for_binary_boolean_expression@@Base+0x3b0>
   17814:	ldrd	r0, [r7, #64]	; 0x40
   17818:	adds	r0, r0, #1
   1781c:	adc	r1, r1, #0
   17820:	strd	r0, [r7, #64]	; 0x40
   17824:	mov	r0, r4
   17828:	mov	r1, r6
   1782c:	bl	178fc <__generate_code_for_if@@Base>
   17830:	ldrd	r0, [r7, #72]	; 0x48
   17834:	mov	r6, sl
   17838:	adds	r0, r0, #1
   1783c:	adc	r1, r1, #0
   17840:	cmp	sl, #0
   17844:	strd	r0, [r7, #72]	; 0x48
   17848:	mov	r0, #24
   1784c:	mov	r1, r7
   17850:	movwne	r0, #16
   17854:	ldr	r0, [r1, r0]!
   17858:	adds	r0, r0, #1
   1785c:	str	r0, [r1]
   17860:	ldr	r0, [r1, #4]
   17864:	adc	r0, r0, #0
   17868:	cmp	sl, #0
   1786c:	str	r0, [r1, #4]
   17870:	bne	177c0 <__generate_code_for_body@@Base+0x70>
   17874:	ldrd	r0, [r7, #80]	; 0x50
   17878:	adds	r0, r0, #1
   1787c:	adc	r1, r1, #0
   17880:	strd	r0, [r7, #80]	; 0x50
   17884:	sub	sp, fp, #28
   17888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1788c:	ldr	r0, [pc, #88]	; 178ec <__generate_code_for_body@@Base+0x19c>
   17890:	ldr	r1, [pc, #88]	; 178f0 <__generate_code_for_body@@Base+0x1a0>
   17894:	add	r0, pc, r0
   17898:	add	r1, pc, r1
   1789c:	bl	18200 <__generate_code_for_binary_boolean_expression@@Base+0x3b0>
   178a0:	ldr	r0, [pc, #76]	; 178f4 <__generate_code_for_body@@Base+0x1a4>
   178a4:	mov	r1, #52	; 0x34
   178a8:	mov	r2, #1
   178ac:	ldr	r0, [pc, r0]
   178b0:	ldr	r3, [r0]
   178b4:	ldr	r0, [pc, #60]	; 178f8 <__generate_code_for_body@@Base+0x1a8>
   178b8:	add	r0, pc, r0
   178bc:	bl	11f44 <fwrite@plt>
   178c0:	mov	r0, #1
   178c4:	bl	11fa4 <exit@plt>
   178c8:	nop	{0}
   178cc:	nop	{0}
   178d0:	andeq	r0, r0, r1
   178d4:	andeq	r0, r0, r0
   178d8:	andeq	r0, r0, r1
   178dc:	andeq	r0, r0, r0
   178e0:			; <UNDEFINED> instruction: 0x000167bc
   178e4:	andeq	r5, r1, ip, lsr #18
   178e8:	andeq	r5, r1, r8, lsr #11
   178ec:	andeq	r5, r1, ip, asr #16
   178f0:	andeq	r5, r1, r0, asr #9
   178f4:	andeq	r5, r1, ip, lsl #16
   178f8:	andeq	r4, r0, fp, ror r5

000178fc <__generate_code_for_if@@Base>:
   178fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17900:	add	fp, sp, #24
   17904:	ldr	r9, [pc, #388]	; 17a90 <__generate_code_for_if@@Base+0x194>
   17908:	mov	r4, r0
   1790c:	ldr	r0, [pc, #384]	; 17a94 <__generate_code_for_if@@Base+0x198>
   17910:	mov	r5, r1
   17914:	ldr	r0, [pc, r0]
   17918:	add	r9, pc, r9
   1791c:	adds	r0, r0, #1
   17920:	str	r0, [r9]
   17924:	ldr	r0, [r9, #4]
   17928:	adc	r0, r0, #0
   1792c:	str	r0, [r9, #4]
   17930:	ldr	r8, [r4, #8]
   17934:	ldr	r7, [r4, #12]
   17938:	adds	r0, r8, #1
   1793c:	adc	r1, r7, #0
   17940:	strd	r0, [r4, #8]
   17944:	ldr	r1, [r5, #8]
   17948:	ldr	r6, [pc, #328]	; 17a98 <__generate_code_for_if@@Base+0x19c>
   1794c:	ldr	r0, [pc, #328]	; 17a9c <__generate_code_for_if@@Base+0x1a0>
   17950:	ldr	r0, [pc, r0]
   17954:	add	r6, pc, r6
   17958:	mov	r3, r6
   1795c:	adds	r0, r0, #1
   17960:	str	r0, [r6]
   17964:	ldr	r0, [r6, #4]
   17968:	adc	r0, r0, #0
   1796c:	str	r0, [r6, #4]
   17970:	ldr	r0, [r1, #16]
   17974:	cmp	r0, #8
   17978:	mov	r2, r0
   1797c:	movwne	r2, #16
   17980:	ldr	r2, [r3, r2]!
   17984:	adds	r2, r2, #1
   17988:	str	r2, [r3]
   1798c:	ldr	r2, [r3, #4]
   17990:	adc	r2, r2, #0
   17994:	cmp	r0, #8
   17998:	str	r2, [r3, #4]
   1799c:	bne	179cc <__generate_code_for_if@@Base+0xd0>
   179a0:	ldr	r0, [r6, #24]
   179a4:	ldr	r3, [r6, #28]
   179a8:	mov	r2, r8
   179ac:	adds	r0, r0, #1
   179b0:	adc	r3, r3, #0
   179b4:	str	r0, [r6, #24]
   179b8:	mov	r0, r4
   179bc:	str	r3, [r6, #28]
   179c0:	mov	r3, r7
   179c4:	bl	17ce0 <__generate_code_for_unary_boolean_expression@@Base>
   179c8:	b	179f4 <__generate_code_for_if@@Base+0xf8>
   179cc:	ldr	r0, [r6, #32]
   179d0:	ldr	r3, [r6, #36]	; 0x24
   179d4:	mov	r2, r8
   179d8:	adds	r0, r0, #1
   179dc:	adc	r3, r3, #0
   179e0:	str	r0, [r6, #32]
   179e4:	mov	r0, r4
   179e8:	str	r3, [r6, #36]	; 0x24
   179ec:	mov	r3, r7
   179f0:	bl	17e50 <__generate_code_for_binary_boolean_expression@@Base>
   179f4:	ldrd	r0, [r6, #40]	; 0x28
   179f8:	adds	r0, r0, #1
   179fc:	adc	r1, r1, #0
   17a00:	strd	r0, [r6, #40]	; 0x28
   17a04:	mov	r0, r4
   17a08:	ldr	r1, [r5, #12]
   17a0c:	bl	17750 <__generate_code_for_body@@Base>
   17a10:	ldr	r0, [r4, #4]
   17a14:	ldr	r1, [pc, #132]	; 17aa0 <__generate_code_for_if@@Base+0x1a4>
   17a18:	mov	r2, r8
   17a1c:	mov	r3, r7
   17a20:	add	r1, pc, r1
   17a24:	bl	11fd4 <fprintf@plt>
   17a28:	ldr	r1, [r5, #16]
   17a2c:	mov	r0, #16
   17a30:	mov	r2, r9
   17a34:	cmp	r1, #0
   17a38:	movwne	r0, #8
   17a3c:	ldr	r0, [r2, r0]!
   17a40:	adds	r0, r0, #1
   17a44:	str	r0, [r2]
   17a48:	ldr	r0, [r2, #4]
   17a4c:	adc	r0, r0, #0
   17a50:	cmp	r1, #0
   17a54:	str	r0, [r2, #4]
   17a58:	beq	17a7c <__generate_code_for_if@@Base+0x180>
   17a5c:	ldr	r0, [r9, #24]
   17a60:	ldr	r3, [r9, #28]
   17a64:	adds	r0, r0, #1
   17a68:	str	r0, [r9, #24]
   17a6c:	adc	r3, r3, #0
   17a70:	mov	r0, r4
   17a74:	str	r3, [r9, #28]
   17a78:	bl	17750 <__generate_code_for_body@@Base>
   17a7c:	ldrd	r0, [r9, #32]
   17a80:	adds	r0, r0, #1
   17a84:	adc	r1, r1, #0
   17a88:	strd	r0, [r9, #32]
   17a8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17a90:	andeq	r6, r1, r0, lsl #13
   17a94:	andeq	r6, r1, r4, lsl #13
   17a98:	andeq	r6, r1, r4, ror r6
   17a9c:	andeq	r6, r1, r8, ror r6
   17aa0:	andeq	r4, r0, r2, lsl r3

00017aa4 <__generate_code_for_if_expression@@Base>:
   17aa4:	push	{r4, r5, r6, r7, fp, lr}
   17aa8:	add	fp, sp, #16
   17aac:	ldr	r7, [pc, #144]	; 17b44 <__generate_code_for_if_expression@@Base+0xa0>
   17ab0:	ldr	r4, [pc, #144]	; 17b48 <__generate_code_for_if_expression@@Base+0xa4>
   17ab4:	ldr	r4, [pc, r4]
   17ab8:	add	r7, pc, r7
   17abc:	mov	r6, r7
   17ac0:	adds	r4, r4, #1
   17ac4:	str	r4, [r7]
   17ac8:	ldr	r4, [r7, #4]
   17acc:	adc	r4, r4, #0
   17ad0:	str	r4, [r7, #4]
   17ad4:	ldr	r5, [r1, #16]
   17ad8:	cmp	r5, #8
   17adc:	mov	r4, r5
   17ae0:	movwne	r4, #16
   17ae4:	ldr	r4, [r6, r4]!
   17ae8:	adds	r4, r4, #1
   17aec:	str	r4, [r6]
   17af0:	ldr	r4, [r6, #4]
   17af4:	adc	r4, r4, #0
   17af8:	cmp	r5, #8
   17afc:	str	r4, [r6, #4]
   17b00:	bne	17b1c <__generate_code_for_if_expression@@Base+0x78>
   17b04:	ldrd	r4, [r7, #24]
   17b08:	adds	r4, r4, #1
   17b0c:	adc	r5, r5, #0
   17b10:	strd	r4, [r7, #24]
   17b14:	bl	17ce0 <__generate_code_for_unary_boolean_expression@@Base>
   17b18:	b	17b30 <__generate_code_for_if_expression@@Base+0x8c>
   17b1c:	ldrd	r4, [r7, #32]
   17b20:	adds	r4, r4, #1
   17b24:	adc	r5, r5, #0
   17b28:	strd	r4, [r7, #32]
   17b2c:	bl	17e50 <__generate_code_for_binary_boolean_expression@@Base>
   17b30:	ldrd	r0, [r7, #40]	; 0x28
   17b34:	adds	r0, r0, #1
   17b38:	adc	r1, r1, #0
   17b3c:	strd	r0, [r7, #40]	; 0x28
   17b40:	pop	{r4, r5, r6, r7, fp, pc}
   17b44:	andeq	r6, r1, r0, lsl r5
   17b48:	andeq	r6, r1, r4, lsl r5
   17b4c:	nop	{0}

00017b50 <__generate_code_for_return@@Base>:
   17b50:	push	{r4, r5, r6, sl, fp, lr}
   17b54:	add	fp, sp, #16
   17b58:	ldr	r5, [pc, #272]	; 17c70 <__generate_code_for_return@@Base+0x120>
   17b5c:	mov	r4, r0
   17b60:	ldr	r0, [pc, #268]	; 17c74 <__generate_code_for_return@@Base+0x124>
   17b64:	mov	r2, #1
   17b68:	ldr	r0, [pc, r0]
   17b6c:	add	r5, pc, r5
   17b70:	adds	r0, r0, #1
   17b74:	str	r0, [r5]
   17b78:	ldr	r0, [r5, #4]
   17b7c:	adc	r0, r0, #0
   17b80:	str	r0, [r5, #4]
   17b84:	ldr	r6, [r1, #8]
   17b88:	ldr	r3, [r4, #4]
   17b8c:	ldr	r0, [pc, #228]	; 17c78 <__generate_code_for_return@@Base+0x128>
   17b90:	mov	r1, #9
   17b94:	add	r0, pc, r0
   17b98:	bl	11f44 <fwrite@plt>
   17b9c:	ldr	r0, [r6]
   17ba0:	mov	r1, #16
   17ba4:	mov	r2, r5
   17ba8:	cmp	r0, #1
   17bac:	movweq	r1, #8
   17bb0:	ldr	r1, [r2, r1]!
   17bb4:	adds	r1, r1, #1
   17bb8:	str	r1, [r2]
   17bbc:	ldr	r1, [r2, #4]
   17bc0:	adc	r1, r1, #0
   17bc4:	cmp	r0, #1
   17bc8:	str	r1, [r2, #4]
   17bcc:	bne	17c2c <__generate_code_for_return@@Base+0xdc>
   17bd0:	ldr	r0, [pc, #164]	; 17c7c <__generate_code_for_return@@Base+0x12c>
   17bd4:	add	r1, pc, #132	; 0x84
   17bd8:	ldrd	r2, [r5, #24]
   17bdc:	vld1.64	{d16-d17}, [r1 :128]
   17be0:	add	r0, pc, r0
   17be4:	adds	r2, r2, #1
   17be8:	vld1.64	{d18-d19}, [r0 :128]
   17bec:	adc	r3, r3, #0
   17bf0:	strd	r2, [r5, #24]
   17bf4:	vadd.i64	q8, q9, q8
   17bf8:	vst1.64	{d16-d17}, [r0 :128]
   17bfc:	ldr	r2, [r6, #8]
   17c00:	ldr	r0, [r4, #4]
   17c04:	ldr	r1, [pc, #116]	; 17c80 <__generate_code_for_return@@Base+0x130>
   17c08:	add	r1, pc, r1
   17c0c:	bl	11fd4 <fprintf@plt>
   17c10:	ldr	r3, [r4, #4]
   17c14:	ldr	r0, [pc, #104]	; 17c84 <__generate_code_for_return@@Base+0x134>
   17c18:	mov	r1, #8
   17c1c:	mov	r2, #1
   17c20:	add	r0, pc, r0
   17c24:	pop	{r4, r5, r6, sl, fp, lr}
   17c28:	b	11f44 <fwrite@plt>
   17c2c:	ldr	r0, [pc, #84]	; 17c88 <__generate_code_for_return@@Base+0x138>
   17c30:	mov	r1, #37	; 0x25
   17c34:	mov	r2, #1
   17c38:	ldr	r0, [pc, r0]
   17c3c:	ldr	r3, [r0]
   17c40:	ldr	r0, [pc, #68]	; 17c8c <__generate_code_for_return@@Base+0x13c>
   17c44:	add	r0, pc, r0
   17c48:	bl	11f44 <fwrite@plt>
   17c4c:	mov	r0, #1
   17c50:	bl	11fa4 <exit@plt>
   17c54:	nop	{0}
   17c58:	nop	{0}
   17c5c:	nop	{0}
   17c60:	andeq	r0, r0, r1
   17c64:	andeq	r0, r0, r0
   17c68:	andeq	r0, r0, r1
   17c6c:	andeq	r0, r0, r0
   17c70:	andeq	r6, r1, ip, lsl #9
   17c74:	muleq	r1, r0, r4
   17c78:	andeq	r4, r0, sp, lsr #3
   17c7c:	andeq	r6, r1, r8, lsr r4
   17c80:	andeq	r4, r0, r2, ror r1
   17c84:	andeq	r4, r0, r1, asr r1
   17c88:	andeq	r5, r1, r0, lsl #9
   17c8c:	andeq	r4, r0, r7, lsl #2

00017c90 <__generate_code_for_int@@Base>:
   17c90:	ldr	r2, [pc, #56]	; 17cd0 <__generate_code_for_int@@Base+0x40>
   17c94:	add	r3, pc, #36	; 0x24
   17c98:	vld1.64	{d16-d17}, [r3 :128]
   17c9c:	add	r2, pc, r2
   17ca0:	vld1.64	{d18-d19}, [r2 :128]
   17ca4:	vadd.i64	q8, q9, q8
   17ca8:	vst1.64	{d16-d17}, [r2 :128]
   17cac:	ldr	r2, [r1, #8]
   17cb0:	ldr	r0, [r0, #4]
   17cb4:	ldr	r1, [pc, #24]	; 17cd4 <__generate_code_for_int@@Base+0x44>
   17cb8:	add	r1, pc, r1
   17cbc:	b	11fd4 <fprintf@plt>
   17cc0:	andeq	r0, r0, r1
   17cc4:	andeq	r0, r0, r0
   17cc8:	andeq	r0, r0, r1
   17ccc:	andeq	r0, r0, r0
   17cd0:	andeq	r6, r1, ip, ror r3
   17cd4:	andeq	r4, r0, r2, asr #1
   17cd8:	nop	{0}
   17cdc:	nop	{0}

00017ce0 <__generate_code_for_unary_boolean_expression@@Base>:
   17ce0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17ce4:	add	fp, sp, #24
   17ce8:	ldr	r4, [pc, #304]	; 17e20 <__generate_code_for_unary_boolean_expression@@Base+0x140>
   17cec:	mov	r6, r0
   17cf0:	ldr	r0, [pc, #300]	; 17e24 <__generate_code_for_unary_boolean_expression@@Base+0x144>
   17cf4:	mov	r8, r3
   17cf8:	mov	r9, r2
   17cfc:	mov	r7, r1
   17d00:	mov	r2, #1
   17d04:	ldr	r0, [pc, r0]
   17d08:	add	r4, pc, r4
   17d0c:	adds	r0, r0, #1
   17d10:	str	r0, [r4]
   17d14:	ldr	r0, [r4, #4]
   17d18:	adc	r0, r0, #0
   17d1c:	str	r0, [r4, #4]
   17d20:	ldr	r5, [r1, #8]
   17d24:	ldr	r3, [r6, #4]
   17d28:	ldr	r0, [pc, #248]	; 17e28 <__generate_code_for_unary_boolean_expression@@Base+0x148>
   17d2c:	mov	r1, #11
   17d30:	add	r0, pc, r0
   17d34:	bl	11f44 <fwrite@plt>
   17d38:	ldr	r3, [r6, #4]
   17d3c:	ldr	r0, [pc, #232]	; 17e2c <__generate_code_for_unary_boolean_expression@@Base+0x14c>
   17d40:	mov	r1, #9
   17d44:	mov	r2, #1
   17d48:	add	r0, pc, r0
   17d4c:	bl	11f44 <fwrite@plt>
   17d50:	ldr	r0, [pc, #216]	; 17e30 <__generate_code_for_unary_boolean_expression@@Base+0x150>
   17d54:	add	r1, pc, #180	; 0xb4
   17d58:	vld1.64	{d16-d17}, [r1 :128]
   17d5c:	add	r0, pc, r0
   17d60:	vld1.64	{d18-d19}, [r0 :128]
   17d64:	vadd.i64	q8, q9, q8
   17d68:	vst1.64	{d16-d17}, [r0 :128]
   17d6c:	ldr	r2, [r5, #8]
   17d70:	ldr	r0, [r6, #4]
   17d74:	ldr	r1, [pc, #184]	; 17e34 <__generate_code_for_unary_boolean_expression@@Base+0x154>
   17d78:	add	r1, pc, r1
   17d7c:	bl	11fd4 <fprintf@plt>
   17d80:	ldr	r0, [r7, #16]
   17d84:	mov	r2, r4
   17d88:	cmp	r0, #8
   17d8c:	mov	r1, r0
   17d90:	movwne	r1, #16
   17d94:	ldr	r1, [r2, r1]!
   17d98:	adds	r1, r1, #1
   17d9c:	str	r1, [r2]
   17da0:	ldr	r1, [r2, #4]
   17da4:	adc	r1, r1, #0
   17da8:	cmp	r0, #8
   17dac:	str	r1, [r2, #4]
   17db0:	bne	17de0 <__generate_code_for_unary_boolean_expression@@Base+0x100>
   17db4:	ldrd	r0, [r4, #24]
   17db8:	mov	r2, r9
   17dbc:	mov	r3, r8
   17dc0:	adds	r0, r0, #1
   17dc4:	adc	r1, r1, #0
   17dc8:	strd	r0, [r4, #24]
   17dcc:	ldr	r0, [r6, #4]
   17dd0:	ldr	r1, [pc, #96]	; 17e38 <__generate_code_for_unary_boolean_expression@@Base+0x158>
   17dd4:	add	r1, pc, r1
   17dd8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   17ddc:	b	11fd4 <fprintf@plt>
   17de0:	ldr	r0, [pc, #84]	; 17e3c <__generate_code_for_unary_boolean_expression@@Base+0x15c>
   17de4:	mov	r1, #31
   17de8:	mov	r2, #1
   17dec:	ldr	r0, [pc, r0]
   17df0:	ldr	r3, [r0]
   17df4:	ldr	r0, [pc, #68]	; 17e40 <__generate_code_for_unary_boolean_expression@@Base+0x160>
   17df8:	add	r0, pc, r0
   17dfc:	bl	11f44 <fwrite@plt>
   17e00:	mov	r0, #1
   17e04:	bl	11fa4 <exit@plt>
   17e08:	nop	{0}
   17e0c:	nop	{0}
   17e10:	andeq	r0, r0, r1
   17e14:	andeq	r0, r0, r0
   17e18:	andeq	r0, r0, r1
   17e1c:	andeq	r0, r0, r0
   17e20:	andeq	r6, r1, r0, lsr #6
   17e24:	andeq	r6, r1, r4, lsr #6
   17e28:	strdeq	r4, [r0], -r7
   17e2c:	andeq	r4, r0, r6, lsr r0
   17e30:			; <UNDEFINED> instruction: 0x000162bc
   17e34:	andeq	r4, r0, r2
   17e38:	ldrdeq	r3, [r0], -r4
   17e3c:	andeq	r5, r1, ip, asr #5
   17e40:	andeq	r4, r0, pc
   17e44:	nop	{0}
   17e48:	nop	{0}
   17e4c:	nop	{0}

00017e50 <__generate_code_for_binary_boolean_expression@@Base>:
   17e50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e54:	add	fp, sp, #28
   17e58:	sub	sp, sp, #4
   17e5c:	vpush	{d8-d9}
   17e60:	sub	sp, sp, #8
   17e64:	str	r3, [sp, #4]
   17e68:	mov	r6, r0
   17e6c:	mov	r7, r1
   17e70:	mov	r1, #0
   17e74:	mov	r9, r2
   17e78:	mov	r2, #1
   17e7c:	ldr	r0, [pc, #764]	; 18180 <__generate_code_for_binary_boolean_expression@@Base+0x330>
   17e80:	add	r0, pc, r0
   17e84:	str	r1, [r0]
   17e88:	mov	r1, #9
   17e8c:	ldr	sl, [pc, #752]	; 18184 <__generate_code_for_binary_boolean_expression@@Base+0x334>
   17e90:	ldr	r0, [pc, #752]	; 18188 <__generate_code_for_binary_boolean_expression@@Base+0x338>
   17e94:	ldr	r0, [pc, r0]
   17e98:	add	sl, pc, sl
   17e9c:	adds	r0, r0, #1
   17ea0:	str	r0, [sl]
   17ea4:	ldr	r0, [sl, #4]
   17ea8:	adc	r0, r0, #0
   17eac:	str	r0, [sl, #4]
   17eb0:	ldr	r4, [r7, #8]
   17eb4:	ldr	r5, [r7, #12]
   17eb8:	ldr	r3, [r6, #4]
   17ebc:	ldr	r0, [pc, #712]	; 1818c <__generate_code_for_binary_boolean_expression@@Base+0x33c>
   17ec0:	add	r0, pc, r0
   17ec4:	bl	11f44 <fwrite@plt>
   17ec8:	ldr	r8, [pc, #704]	; 18190 <__generate_code_for_binary_boolean_expression@@Base+0x340>
   17ecc:	add	r0, pc, #668	; 0x29c
   17ed0:	vld1.64	{d8-d9}, [r0 :128]
   17ed4:	add	r8, pc, r8
   17ed8:	vld1.64	{d16-d17}, [r8 :128]
   17edc:	vadd.i64	q8, q8, q4
   17ee0:	vst1.64	{d16-d17}, [r8 :128]
   17ee4:	ldr	r2, [r4, #8]
   17ee8:	ldr	r0, [r6, #4]
   17eec:	ldr	r4, [pc, #672]	; 18194 <__generate_code_for_binary_boolean_expression@@Base+0x344>
   17ef0:	add	r4, pc, r4
   17ef4:	mov	r1, r4
   17ef8:	bl	11fd4 <fprintf@plt>
   17efc:	ldr	r1, [r6, #4]
   17f00:	mov	r0, #10
   17f04:	bl	12064 <fputc@plt>
   17f08:	ldr	r3, [r6, #4]
   17f0c:	ldr	r0, [pc, #644]	; 18198 <__generate_code_for_binary_boolean_expression@@Base+0x348>
   17f10:	mov	r1, #9
   17f14:	mov	r2, #1
   17f18:	add	r0, pc, r0
   17f1c:	bl	11f44 <fwrite@plt>
   17f20:	vld1.64	{d16-d17}, [r8 :128]
   17f24:	mov	r1, r4
   17f28:	vadd.i64	q8, q8, q4
   17f2c:	vst1.64	{d16-d17}, [r8 :128]
   17f30:	ldr	r2, [r5, #8]
   17f34:	ldr	r0, [r6, #4]
   17f38:	bl	11fd4 <fprintf@plt>
   17f3c:	ldr	r1, [r6, #4]
   17f40:	mov	r0, #10
   17f44:	bl	12064 <fputc@plt>
   17f48:	ldr	r3, [r6, #4]
   17f4c:	ldr	r0, [pc, #584]	; 1819c <__generate_code_for_binary_boolean_expression@@Base+0x34c>
   17f50:	mov	r1, #12
   17f54:	mov	r2, #1
   17f58:	add	r0, pc, r0
   17f5c:	bl	11f44 <fwrite@plt>
   17f60:	ldr	r0, [r7, #16]
   17f64:	cmp	r0, #7
   17f68:	bhi	18128 <__generate_code_for_binary_boolean_expression@@Base+0x2d8>
   17f6c:	add	r1, pc, #4
   17f70:	ldr	r0, [r1, r0, lsl #2]
   17f74:	add	pc, r1, r0
   17f78:	andeq	r0, r0, r0, lsr #32
   17f7c:	muleq	r0, r0, r0
   17f80:	andeq	r0, r0, r8, asr r0
   17f84:	andeq	r0, r0, r0, lsl #2
   17f88:	andeq	r0, r0, r8, ror r1
   17f8c:	andeq	r0, r0, r8, ror r1
   17f90:	andeq	r0, r0, r8, lsr r1
   17f94:	andeq	r0, r0, r8, asr #1
   17f98:	ldr	r0, [pc, #512]	; 181a0 <__generate_code_for_binary_boolean_expression@@Base+0x350>
   17f9c:	add	r0, pc, r0
   17fa0:	add	r1, r0, #4
   17fa4:	ldr	r0, [pc, #504]	; 181a4 <__generate_code_for_binary_boolean_expression@@Base+0x354>
   17fa8:	add	r0, pc, r0
   17fac:	bl	18200 <__generate_code_for_binary_boolean_expression@@Base+0x3b0>
   17fb0:	ldrd	r0, [sl, #80]	; 0x50
   17fb4:	adds	r0, r0, #1
   17fb8:	adc	r1, r1, #0
   17fbc:	strd	r0, [sl, #80]	; 0x50
   17fc0:	ldr	r0, [r6, #4]
   17fc4:	ldr	r1, [pc, #476]	; 181a8 <__generate_code_for_binary_boolean_expression@@Base+0x358>
   17fc8:	add	r1, pc, r1
   17fcc:	b	180e4 <__generate_code_for_binary_boolean_expression@@Base+0x294>
   17fd0:	ldr	r0, [pc, #488]	; 181c0 <__generate_code_for_binary_boolean_expression@@Base+0x370>
   17fd4:	add	r0, pc, r0
   17fd8:	add	r1, r0, #12
   17fdc:	ldr	r0, [pc, #480]	; 181c4 <__generate_code_for_binary_boolean_expression@@Base+0x374>
   17fe0:	add	r0, pc, r0
   17fe4:	bl	18200 <__generate_code_for_binary_boolean_expression@@Base+0x3b0>
   17fe8:	ldrd	r0, [sl, #96]	; 0x60
   17fec:	adds	r0, r0, #1
   17ff0:	adc	r1, r1, #0
   17ff4:	strd	r0, [sl, #96]	; 0x60
   17ff8:	ldr	r0, [r6, #4]
   17ffc:	ldr	r1, [pc, #452]	; 181c8 <__generate_code_for_binary_boolean_expression@@Base+0x378>
   18000:	add	r1, pc, r1
   18004:	b	180e4 <__generate_code_for_binary_boolean_expression@@Base+0x294>
   18008:	ldr	r0, [pc, #420]	; 181b4 <__generate_code_for_binary_boolean_expression@@Base+0x364>
   1800c:	add	r0, pc, r0
   18010:	add	r1, r0, #8
   18014:	ldr	r0, [pc, #412]	; 181b8 <__generate_code_for_binary_boolean_expression@@Base+0x368>
   18018:	add	r0, pc, r0
   1801c:	bl	18200 <__generate_code_for_binary_boolean_expression@@Base+0x3b0>
   18020:	ldrd	r0, [sl, #88]	; 0x58
   18024:	adds	r0, r0, #1
   18028:	adc	r1, r1, #0
   1802c:	strd	r0, [sl, #88]	; 0x58
   18030:	ldr	r0, [r6, #4]
   18034:	ldr	r1, [pc, #384]	; 181bc <__generate_code_for_binary_boolean_expression@@Base+0x36c>
   18038:	add	r1, pc, r1
   1803c:	b	180e4 <__generate_code_for_binary_boolean_expression@@Base+0x294>
   18040:	ldr	r0, [pc, #412]	; 181e4 <__generate_code_for_binary_boolean_expression@@Base+0x394>
   18044:	add	r0, pc, r0
   18048:	add	r1, r0, #28
   1804c:	ldr	r0, [pc, #404]	; 181e8 <__generate_code_for_binary_boolean_expression@@Base+0x398>
   18050:	add	r0, pc, r0
   18054:	bl	18200 <__generate_code_for_binary_boolean_expression@@Base+0x3b0>
   18058:	ldrd	r0, [sl, #120]	; 0x78
   1805c:	adds	r0, r0, #1
   18060:	adc	r1, r1, #0
   18064:	strd	r0, [sl, #120]	; 0x78
   18068:	ldr	r0, [r6, #4]
   1806c:	ldr	r1, [pc, #376]	; 181ec <__generate_code_for_binary_boolean_expression@@Base+0x39c>
   18070:	add	r1, pc, r1
   18074:	b	180e4 <__generate_code_for_binary_boolean_expression@@Base+0x294>
   18078:	ldr	r0, [pc, #332]	; 181cc <__generate_code_for_binary_boolean_expression@@Base+0x37c>
   1807c:	add	r0, pc, r0
   18080:	add	r1, r0, #16
   18084:	ldr	r0, [pc, #324]	; 181d0 <__generate_code_for_binary_boolean_expression@@Base+0x380>
   18088:	add	r0, pc, r0
   1808c:	bl	18200 <__generate_code_for_binary_boolean_expression@@Base+0x3b0>
   18090:	ldrd	r0, [sl, #104]	; 0x68
   18094:	adds	r0, r0, #1
   18098:	adc	r1, r1, #0
   1809c:	strd	r0, [sl, #104]	; 0x68
   180a0:	ldr	r0, [r6, #4]
   180a4:	ldr	r1, [pc, #296]	; 181d4 <__generate_code_for_binary_boolean_expression@@Base+0x384>
   180a8:	add	r1, pc, r1
   180ac:	b	180e4 <__generate_code_for_binary_boolean_expression@@Base+0x294>
   180b0:	ldr	r0, [pc, #288]	; 181d8 <__generate_code_for_binary_boolean_expression@@Base+0x388>
   180b4:	add	r0, pc, r0
   180b8:	add	r1, r0, #24
   180bc:	ldr	r0, [pc, #280]	; 181dc <__generate_code_for_binary_boolean_expression@@Base+0x38c>
   180c0:	add	r0, pc, r0
   180c4:	bl	18200 <__generate_code_for_binary_boolean_expression@@Base+0x3b0>
   180c8:	ldrd	r0, [sl, #112]	; 0x70
   180cc:	adds	r0, r0, #1
   180d0:	adc	r1, r1, #0
   180d4:	strd	r0, [sl, #112]	; 0x70
   180d8:	ldr	r0, [r6, #4]
   180dc:	ldr	r1, [pc, #252]	; 181e0 <__generate_code_for_binary_boolean_expression@@Base+0x390>
   180e0:	add	r1, pc, r1
   180e4:	ldr	r3, [sp, #4]
   180e8:	mov	r2, r9
   180ec:	bl	11fd4 <fprintf@plt>
   180f0:	ldr	r0, [pc, #180]	; 181ac <__generate_code_for_binary_boolean_expression@@Base+0x35c>
   180f4:	add	r0, pc, r0
   180f8:	add	r1, r0, #20
   180fc:	ldr	r0, [pc, #172]	; 181b0 <__generate_code_for_binary_boolean_expression@@Base+0x360>
   18100:	add	r0, pc, r0
   18104:	bl	18200 <__generate_code_for_binary_boolean_expression@@Base+0x3b0>
   18108:	ldrd	r0, [sl, #128]	; 0x80
   1810c:	adds	r0, r0, #1
   18110:	adc	r1, r1, #0
   18114:	strd	r0, [sl, #128]	; 0x80
   18118:	sub	sp, fp, #48	; 0x30
   1811c:	vpop	{d8-d9}
   18120:	add	sp, sp, #4
   18124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18128:	ldr	r0, [pc, #192]	; 181f0 <__generate_code_for_binary_boolean_expression@@Base+0x3a0>
   1812c:	ldr	r1, [pc, #192]	; 181f4 <__generate_code_for_binary_boolean_expression@@Base+0x3a4>
   18130:	add	r0, pc, r0
   18134:	add	r1, pc, r1
   18138:	bl	18200 <__generate_code_for_binary_boolean_expression@@Base+0x3b0>
   1813c:	ldr	r0, [pc, #180]	; 181f8 <__generate_code_for_binary_boolean_expression@@Base+0x3a8>
   18140:	mov	r1, #31
   18144:	mov	r2, #1
   18148:	ldr	r0, [pc, r0]
   1814c:	ldr	r3, [r0]
   18150:	ldr	r0, [pc, #164]	; 181fc <__generate_code_for_binary_boolean_expression@@Base+0x3ac>
   18154:	add	r0, pc, r0
   18158:	bl	11f44 <fwrite@plt>
   1815c:	mov	r0, #1
   18160:	bl	11fa4 <exit@plt>
   18164:	nop	{0}
   18168:	nop	{0}
   1816c:	nop	{0}
   18170:	andeq	r0, r0, r1
   18174:	andeq	r0, r0, r0
   18178:	andeq	r0, r0, r1
   1817c:	andeq	r0, r0, r0
   18180:	andeq	r5, r1, r4, ror #4
   18184:			; <UNDEFINED> instruction: 0x000161b0
   18188:			; <UNDEFINED> instruction: 0x000161b4
   1818c:	andeq	r3, r0, r1, lsl #29
   18190:	andeq	r6, r1, r4, asr #2
   18194:	andeq	r3, r0, sl, lsl #29
   18198:	andeq	r3, r0, r6, ror #28
   1819c:	andeq	r3, r0, r0, lsr lr
   181a0:	andeq	r4, r1, ip, asr #27
   181a4:	andeq	r5, r1, ip, lsr r1
   181a8:	andeq	r3, r0, sp, asr #27
   181ac:	andeq	r4, r1, r4, ror ip
   181b0:	andeq	r4, r1, r4, ror #31
   181b4:	andeq	r4, r1, ip, asr sp
   181b8:	andeq	r5, r1, ip, asr #1
   181bc:	andeq	r3, r0, r0, ror sp
   181c0:	muleq	r1, r4, sp
   181c4:	andeq	r5, r1, r4, lsl #2
   181c8:			; <UNDEFINED> instruction: 0x00003dbb
   181cc:	andeq	r4, r1, ip, ror #25
   181d0:	andeq	r5, r1, ip, asr r0
   181d4:	andeq	r3, r0, r6, lsr #26
   181d8:			; <UNDEFINED> instruction: 0x00014cb4
   181dc:	andeq	r5, r1, r4, lsr #32
   181e0:	andeq	r3, r0, r1, lsl #26
   181e4:	andeq	r4, r1, r4, lsr #26
   181e8:	muleq	r1, r4, r0
   181ec:	andeq	r3, r0, r4, lsl #27
   181f0:			; <UNDEFINED> instruction: 0x00014fb4
   181f4:	andeq	r4, r1, r4, lsr ip
   181f8:	andeq	r4, r1, r0, ror pc
   181fc:			; <UNDEFINED> instruction: 0x00003cb3
   18200:	ldr	r0, [r0]
   18204:	cmn	r0, #1
   18208:	ldrne	r0, [r1, r0, lsl #2]
   1820c:	cmpne	r0, #0
   18210:	bne	18218 <__generate_code_for_binary_boolean_expression@@Base+0x3c8>
   18214:	bx	lr
   18218:	ldrd	r2, [r0]
   1821c:	adds	r2, r2, #1
   18220:	adc	r3, r3, #0
   18224:	strd	r2, [r0]
   18228:	bx	lr
   1822c:	push	{r4, r5, r6, lr}
   18230:	sub	sp, sp, #8
   18234:	ldr	r0, [pc, #112]	; 182ac <__generate_code_for_binary_boolean_expression@@Base+0x45c>
   18238:	ldr	r1, [pc, #112]	; 182b0 <__generate_code_for_binary_boolean_expression@@Base+0x460>
   1823c:	movw	r2, #11716	; 0x2dc4
   18240:	movt	r2, #2155	; 0x86b
   18244:	add	r0, pc, r0
   18248:	add	r1, pc, r1
   1824c:	bl	18420 <__generate_code_for_binary_boolean_expression@@Base+0x5d0>
   18250:	ldr	r0, [pc, #92]	; 182b4 <__generate_code_for_binary_boolean_expression@@Base+0x464>
   18254:	ldr	r6, [pc, #92]	; 182b8 <__generate_code_for_binary_boolean_expression@@Base+0x468>
   18258:	mov	r5, #0
   1825c:	add	r0, pc, r0
   18260:	add	r6, pc, r6
   18264:	add	r4, r0, #4
   18268:	mov	r3, r6
   1826c:	ldr	r0, [r3, r5]!
   18270:	ldr	r1, [r3, #16]
   18274:	str	r1, [sp]
   18278:	ldmib	r3, {r1, r2}
   1827c:	ldrb	r3, [r3, #12]
   18280:	bl	18b84 <__generate_code_for_binary_boolean_expression@@Base+0xd34>
   18284:	ldrd	r0, [r4, #-4]
   18288:	bl	19438 <__generate_code_for_binary_boolean_expression@@Base+0x15e8>
   1828c:	add	r5, r5, #20
   18290:	add	r4, r4, #8
   18294:	cmp	r5, #260	; 0x104
   18298:	bne	18268 <__generate_code_for_binary_boolean_expression@@Base+0x418>
   1829c:	bl	19bb4 <__generate_code_for_binary_boolean_expression@@Base+0x1d64>
   182a0:	add	sp, sp, #8
   182a4:	pop	{r4, r5, r6, lr}
   182a8:	b	1a920 <__generate_code_for_binary_boolean_expression@@Base+0x2ad0>
   182ac:	andeq	r3, r0, r4, asr #24
   182b0:	andeq	r3, r0, r7, lsl r2
   182b4:	andeq	r4, r1, ip, lsr ip
   182b8:	andeq	r4, r1, r8, lsr #22
   182bc:	push	{fp, lr}
   182c0:	bl	1822c <__generate_code_for_binary_boolean_expression@@Base+0x3dc>
   182c4:	ldr	r0, [pc, #260]	; 183d0 <__generate_code_for_binary_boolean_expression@@Base+0x580>
   182c8:	mov	r1, #0
   182cc:	vmov.i32	q8, #0	; 0x00000000
   182d0:	add	r0, pc, r0
   182d4:	add	r2, r0, #16
   182d8:	str	r1, [r0, #32]
   182dc:	vst1.64	{d16-d17}, [r2 :128]
   182e0:	ldr	r2, [pc, #236]	; 183d4 <__generate_code_for_binary_boolean_expression@@Base+0x584>
   182e4:	add	r2, pc, r2
   182e8:	add	r3, r2, #64	; 0x40
   182ec:	str	r1, [r2, #80]	; 0x50
   182f0:	vst1.64	{d16-d17}, [r3 :128]
   182f4:	add	r3, r2, #48	; 0x30
   182f8:	vst1.64	{d16-d17}, [r3 :128]
   182fc:	add	r3, r2, #32
   18300:	vst1.64	{d16-d17}, [r3 :128]
   18304:	add	r3, r2, #16
   18308:	vst1.64	{d16-d17}, [r3 :128]
   1830c:	ldr	r3, [pc, #196]	; 183d8 <__generate_code_for_binary_boolean_expression@@Base+0x588>
   18310:	add	r3, pc, r3
   18314:	vst1.64	{d16-d17}, [r3 :128]
   18318:	ldr	r3, [pc, #188]	; 183dc <__generate_code_for_binary_boolean_expression@@Base+0x58c>
   1831c:	add	r3, pc, r3
   18320:	vst1.64	{d16-d17}, [r3 :128]
   18324:	ldr	r3, [pc, #180]	; 183e0 <__generate_code_for_binary_boolean_expression@@Base+0x590>
   18328:	add	r3, pc, r3
   1832c:	vst1.64	{d16-d17}, [r3 :128]
   18330:	ldr	r3, [pc, #172]	; 183e4 <__generate_code_for_binary_boolean_expression@@Base+0x594>
   18334:	add	r3, pc, r3
   18338:	vst1.64	{d16-d17}, [r3 :128]
   1833c:	ldr	r3, [pc, #164]	; 183e8 <__generate_code_for_binary_boolean_expression@@Base+0x598>
   18340:	add	r3, pc, r3
   18344:	vst1.64	{d16-d17}, [r3 :128]
   18348:	mov	r3, #36	; 0x24
   1834c:	vst1.64	{d16-d17}, [r0 :128], r3
   18350:	str	r1, [r0]
   18354:	mov	r0, #84	; 0x54
   18358:	vst1.64	{d16-d17}, [r2 :128], r0
   1835c:	str	r1, [r2]
   18360:	mov	r2, #136	; 0x88
   18364:	ldr	r0, [pc, #128]	; 183ec <__generate_code_for_binary_boolean_expression@@Base+0x59c>
   18368:	add	r0, pc, r0
   1836c:	vst1.64	{d16-d17}, [r0 :128]!
   18370:	vst1.64	{d16-d17}, [r0 :128]
   18374:	ldr	r0, [pc, #116]	; 183f0 <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   18378:	add	r0, pc, r0
   1837c:	add	r1, r0, #16
   18380:	vst1.64	{d16-d17}, [r1 :128]
   18384:	mov	r1, #32
   18388:	vst1.64	{d16-d17}, [r0 :128], r1
   1838c:	mov	r1, #0
   18390:	vst1.64	{d16-d17}, [r0 :128]
   18394:	ldr	r0, [pc, #88]	; 183f4 <__generate_code_for_binary_boolean_expression@@Base+0x5a4>
   18398:	add	r0, pc, r0
   1839c:	vst1.64	{d16-d17}, [r0 :128]!
   183a0:	vst1.64	{d16-d17}, [r0 :128]
   183a4:	ldr	r0, [pc, #76]	; 183f8 <__generate_code_for_binary_boolean_expression@@Base+0x5a8>
   183a8:	add	r0, pc, r0
   183ac:	vst1.64	{d16-d17}, [r0 :128]
   183b0:	ldr	r0, [pc, #68]	; 183fc <__generate_code_for_binary_boolean_expression@@Base+0x5ac>
   183b4:	add	r0, pc, r0
   183b8:	vst1.64	{d16-d17}, [r0 :128]!
   183bc:	vst1.64	{d16-d17}, [r0 :128]
   183c0:	ldr	r0, [pc, #56]	; 18400 <__generate_code_for_binary_boolean_expression@@Base+0x5b0>
   183c4:	add	r0, pc, r0
   183c8:	bl	12004 <memset@plt>
   183cc:	pop	{fp, pc}
   183d0:	andeq	r5, r1, r8, asr #25
   183d4:	andeq	r5, r1, r4, asr ip
   183d8:	andeq	r5, r1, r8, asr #23
   183dc:	andeq	r5, r1, ip, lsr #23
   183e0:	andeq	r5, r1, r0, asr #23
   183e4:	andeq	r5, r1, r4, asr #23
   183e8:	andeq	r5, r1, r8, ror #23
   183ec:	andeq	r5, r1, r0, lsr #23
   183f0:	andeq	r5, r1, r0, asr ip
   183f4:	andeq	r5, r1, r0, ror #24
   183f8:	andeq	r5, r1, r0, ror ip
   183fc:	andeq	r5, r1, r4, ror ip
   18400:	andeq	r5, r1, r4, lsl #25
   18404:	ldr	r0, [pc, #12]	; 18418 <__generate_code_for_binary_boolean_expression@@Base+0x5c8>
   18408:	ldr	r1, [pc, #12]	; 1841c <__generate_code_for_binary_boolean_expression@@Base+0x5cc>
   1840c:	add	r0, pc, r0
   18410:	add	r1, pc, r1
   18414:	b	1add0 <__gcov_flush@@Base+0xb4>
   18418:			; <UNDEFINED> instruction: 0xfffffe18
   1841c:			; <UNDEFINED> instruction: 0xfffffea4
   18420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18424:	add	fp, sp, #28
   18428:	sub	sp, sp, #36	; 0x24
   1842c:	mov	r9, r1
   18430:	mov	r6, r0
   18434:	add	r0, sp, #28
   18438:	add	r1, sp, #32
   1843c:	mov	r8, r2
   18440:	bl	1b17c <__gcov_flush@@Base+0x460>
   18444:	cmp	r0, #0
   18448:	beq	1848c <__generate_code_for_binary_boolean_expression@@Base+0x63c>
   1844c:	mov	r4, r0
   18450:	mov	r0, r6
   18454:	ldr	r5, [sp, #32]
   18458:	bl	11fb0 <strlen@plt>
   1845c:	add	r0, r5, r0
   18460:	add	r0, r0, #2
   18464:	bl	11f68 <malloc@plt>
   18468:	mov	r7, r0
   1846c:	ldr	r0, [sp, #28]
   18470:	mov	r1, r6
   18474:	mov	r2, r4
   18478:	str	r0, [sp]
   1847c:	mov	r0, r7
   18480:	mov	r3, r5
   18484:	bl	1b210 <__gcov_flush@@Base+0x4f4>
   18488:	b	18498 <__generate_code_for_binary_boolean_expression@@Base+0x648>
   1848c:	mov	r0, r6
   18490:	bl	11f2c <strdup@plt>
   18494:	mov	r7, r0
   18498:	ldr	r0, [pc, #1548]	; 18aac <__generate_code_for_binary_boolean_expression@@Base+0xc5c>
   1849c:	ldr	r6, [pc, #1548]	; 18ab0 <__generate_code_for_binary_boolean_expression@@Base+0xc60>
   184a0:	mov	r1, #2
   184a4:	add	r0, pc, r0
   184a8:	add	r6, pc, r6
   184ac:	str	r7, [r0]
   184b0:	mov	r0, r7
   184b4:	mov	r4, #0
   184b8:	strb	r4, [r6]
   184bc:	bl	11f50 <open64@plt>
   184c0:	ldr	r5, [pc, #1516]	; 18ab4 <__generate_code_for_binary_boolean_expression@@Base+0xc64>
   184c4:	cmn	r0, #1
   184c8:	add	r5, pc, r5
   184cc:	str	r0, [r5]
   184d0:	beq	184e0 <__generate_code_for_binary_boolean_expression@@Base+0x690>
   184d4:	ldr	r6, [pc, #1500]	; 18ab8 <__generate_code_for_binary_boolean_expression@@Base+0xc68>
   184d8:	add	r6, pc, r6
   184dc:	b	1853c <__generate_code_for_binary_boolean_expression@@Base+0x6ec>
   184e0:	mov	r0, #1
   184e4:	strb	r0, [r6]
   184e8:	ldr	r0, [pc, #1508]	; 18ad4 <__generate_code_for_binary_boolean_expression@@Base+0xc84>
   184ec:	mov	r1, #66	; 0x42
   184f0:	mov	r2, #420	; 0x1a4
   184f4:	ldr	r0, [pc, r0]
   184f8:	bl	11f50 <open64@plt>
   184fc:	ldr	r6, [pc, #1492]	; 18ad8 <__generate_code_for_binary_boolean_expression@@Base+0xc88>
   18500:	cmn	r0, #1
   18504:	str	r0, [r5]
   18508:	add	r6, pc, r6
   1850c:	bne	1853c <__generate_code_for_binary_boolean_expression@@Base+0x6ec>
   18510:	ldr	r0, [pc, #1476]	; 18adc <__generate_code_for_binary_boolean_expression@@Base+0xc8c>
   18514:	ldr	r0, [pc, r0]
   18518:	bl	1aee4 <__gcov_flush@@Base+0x1c8>
   1851c:	ldr	r0, [pc, #1468]	; 18ae0 <__generate_code_for_binary_boolean_expression@@Base+0xc90>
   18520:	mov	r1, #66	; 0x42
   18524:	mov	r2, #420	; 0x1a4
   18528:	ldr	r0, [pc, r0]
   1852c:	bl	11f50 <open64@plt>
   18530:	cmn	r0, #1
   18534:	str	r0, [r5]
   18538:	beq	18a64 <__generate_code_for_binary_boolean_expression@@Base+0xc14>
   1853c:	str	r9, [sp, #20]
   18540:	bl	1afb0 <__gcov_flush@@Base+0x294>
   18544:	ldr	r0, [pc, #1392]	; 18abc <__generate_code_for_binary_boolean_expression@@Base+0xc6c>
   18548:	mov	r1, r6
   1854c:	ldr	r0, [pc, r0]
   18550:	bl	11ec0 <fdopen@plt>
   18554:	ldr	r5, [pc, #1380]	; 18ac0 <__generate_code_for_binary_boolean_expression@@Base+0xc70>
   18558:	ldr	r9, [pc, #1380]	; 18ac4 <__generate_code_for_binary_boolean_expression@@Base+0xc74>
   1855c:	ldr	r1, [pc, #1380]	; 18ac8 <__generate_code_for_binary_boolean_expression@@Base+0xc78>
   18560:	ldr	sl, [pc, #1380]	; 18acc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   18564:	add	r5, pc, r5
   18568:	add	r9, pc, r9
   1856c:	add	r1, pc, r1
   18570:	add	sl, pc, sl
   18574:	str	r4, [r5]
   18578:	str	r4, [r5, #4]
   1857c:	str	r4, [r9]
   18580:	str	r4, [r9, #4]
   18584:	str	r0, [r1]
   18588:	str	r4, [sl]
   1858c:	ldr	r6, [pc, #1340]	; 18ad0 <__generate_code_for_binary_boolean_expression@@Base+0xc80>
   18590:	ldr	r2, [pc, #1292]	; 18aa4 <__generate_code_for_binary_boolean_expression@@Base+0xc54>
   18594:	str	r8, [sp, #24]
   18598:	add	r6, pc, r6
   1859c:	ldrb	r1, [r6]
   185a0:	mov	r6, r2
   185a4:	cmp	r1, #1
   185a8:	bne	185d0 <__generate_code_for_binary_boolean_expression@@Base+0x780>
   185ac:	mov	r0, #131072	; 0x20000
   185b0:	mov	r4, #131072	; 0x20000
   185b4:	bl	11f68 <malloc@plt>
   185b8:	mov	r1, #0
   185bc:	str	r4, [r5]
   185c0:	str	r1, [r5, #4]
   185c4:	mov	r8, r0
   185c8:	str	r0, [sl]
   185cc:	b	18760 <__generate_code_for_binary_boolean_expression@@Base+0x910>
   185d0:	mov	r1, #0
   185d4:	mov	r2, #2
   185d8:	mov	r8, #0
   185dc:	bl	12088 <fseek@plt>
   185e0:	ldr	r0, [pc, #1288]	; 18af0 <__generate_code_for_binary_boolean_expression@@Base+0xca0>
   185e4:	ldr	r0, [pc, r0]
   185e8:	bl	11f14 <ftell@plt>
   185ec:	mov	r2, r0
   185f0:	ldr	r0, [pc, #1276]	; 18af4 <__generate_code_for_binary_boolean_expression@@Base+0xca4>
   185f4:	asr	r3, r2, #31
   185f8:	add	r0, pc, r0
   185fc:	cmp	r2, #0
   18600:	strd	r2, [r0]
   18604:	beq	186d4 <__generate_code_for_binary_boolean_expression@@Base+0x884>
   18608:	ldr	r0, [pc, #1256]	; 18af8 <__generate_code_for_binary_boolean_expression@@Base+0xca8>
   1860c:	mov	r1, r2
   18610:	mov	r2, #3
   18614:	mov	r3, #1
   18618:	ldr	r0, [pc, r0]
   1861c:	str	r8, [sp, #8]
   18620:	str	r8, [sp, #12]
   18624:	str	r0, [sp]
   18628:	mov	r0, #0
   1862c:	bl	11f08 <mmap64@plt>
   18630:	ldr	r1, [pc, #1220]	; 18afc <__generate_code_for_binary_boolean_expression@@Base+0xcac>
   18634:	cmn	r0, #1
   18638:	add	r1, pc, r1
   1863c:	str	r0, [r1]
   18640:	beq	1869c <__generate_code_for_binary_boolean_expression@@Base+0x84c>
   18644:	ldr	r1, [pc, #1232]	; 18b1c <__generate_code_for_binary_boolean_expression@@Base+0xccc>
   18648:	add	r1, pc, r1
   1864c:	ldrb	r1, [r1]
   18650:	cmp	r1, #0
   18654:	beq	18660 <__generate_code_for_binary_boolean_expression@@Base+0x810>
   18658:	mov	r8, r0
   1865c:	b	1876c <__generate_code_for_binary_boolean_expression@@Base+0x91c>
   18660:	ldr	ip, [r9, #4]
   18664:	ldr	r5, [pc, #1236]	; 18b40 <__generate_code_for_binary_boolean_expression@@Base+0xcf0>
   18668:	mov	r4, r0
   1866c:	lsr	r2, r6, #16
   18670:	ldr	r5, [pc, r5]
   18674:	lsr	r1, r6, #24
   18678:	lsr	r3, r6, #8
   1867c:	strb	r6, [r4, r5]!
   18680:	strb	r2, [r4, #2]
   18684:	adds	r2, r5, #4
   18688:	adc	ip, ip, #0
   1868c:	strb	r1, [r4, #3]
   18690:	strb	r3, [r4, #1]
   18694:	stm	r9, {r2, ip}
   18698:	b	18834 <__generate_code_for_binary_boolean_expression@@Base+0x9e4>
   1869c:	bl	11fe0 <__errno_location@plt>
   186a0:	ldr	r1, [pc, #1112]	; 18b00 <__generate_code_for_binary_boolean_expression@@Base+0xcb0>
   186a4:	ldr	r1, [pc, r1]
   186a8:	ldr	r0, [r0]
   186ac:	ldr	r4, [r1]
   186b0:	ldr	r7, [pc, #1100]	; 18b04 <__generate_code_for_binary_boolean_expression@@Base+0xcb4>
   186b4:	ldr	r7, [pc, r7]
   186b8:	bl	11f80 <strerror@plt>
   186bc:	ldr	r1, [pc, #1092]	; 18b08 <__generate_code_for_binary_boolean_expression@@Base+0xcb8>
   186c0:	mov	r3, r0
   186c4:	mov	r0, r4
   186c8:	add	r1, pc, r1
   186cc:	mov	r2, r7
   186d0:	bl	11fd4 <fprintf@plt>
   186d4:	str	r8, [r5]
   186d8:	str	r8, [r5, #4]
   186dc:	ldr	r0, [pc, #1064]	; 18b0c <__generate_code_for_binary_boolean_expression@@Base+0xcbc>
   186e0:	mov	r2, #16646144	; 0xfe0000
   186e4:	orr	r2, r2, #-16777216	; 0xff000000
   186e8:	add	r0, pc, r0
   186ec:	mvn	r3, #0
   186f0:	str	r8, [r0]
   186f4:	ldr	r1, [pc, #1044]	; 18b10 <__generate_code_for_binary_boolean_expression@@Base+0xcc0>
   186f8:	mov	r0, #1
   186fc:	add	r1, pc, r1
   18700:	strb	r0, [r1]
   18704:	ldr	r0, [r9, #4]
   18708:	ldr	r1, [pc, #1028]	; 18b14 <__generate_code_for_binary_boolean_expression@@Base+0xcc4>
   1870c:	eor	r3, r0, r3
   18710:	ldr	r1, [pc, r1]
   18714:	eor	r2, r1, r2
   18718:	orrs	r2, r2, r3
   1871c:	beq	1875c <__generate_code_for_binary_boolean_expression@@Base+0x90c>
   18720:	ldr	r2, [pc, #896]	; 18aa8 <__generate_code_for_binary_boolean_expression@@Base+0xc58>
   18724:	adds	r1, r1, r2
   18728:	adc	r0, r0, #0
   1872c:	mvn	r2, #0
   18730:	and	r7, r0, r2
   18734:	mov	r0, #16646144	; 0xfe0000
   18738:	orr	r0, r0, #-16777216	; 0xff000000
   1873c:	and	r4, r1, r0
   18740:	mov	r0, r4
   18744:	bl	11f68 <malloc@plt>
   18748:	stm	r5, {r4, r7}
   1874c:	mov	r8, r0
   18750:	ldr	r0, [pc, #960]	; 18b18 <__generate_code_for_binary_boolean_expression@@Base+0xcc8>
   18754:	add	r0, pc, r0
   18758:	str	r8, [r0]
   1875c:	mov	r0, r8
   18760:	mov	r1, #0
   18764:	mov	r2, #131072	; 0x20000
   18768:	bl	12004 <memset@plt>
   1876c:	ldr	r0, [r9, #4]
   18770:	ldr	r1, [pc, #936]	; 18b20 <__generate_code_for_binary_boolean_expression@@Base+0xcd0>
   18774:	mov	sl, r5
   18778:	mov	r7, #7
   1877c:	orr	r7, r7, #131072	; 0x20000
   18780:	ldr	r1, [pc, r1]
   18784:	ldr	r4, [r5, #4]
   18788:	ldr	r5, [pc, #916]	; 18b24 <__generate_code_for_binary_boolean_expression@@Base+0xcd4>
   1878c:	adds	r2, r1, #4
   18790:	adc	r3, r0, #0
   18794:	ldr	r5, [pc, r5]
   18798:	subs	r2, r5, r2
   1879c:	sbcs	r2, r4, r3
   187a0:	bcs	18878 <__generate_code_for_binary_boolean_expression@@Base+0xa28>
   187a4:	adds	r1, r1, r7
   187a8:	adc	r0, r0, #0
   187ac:	subs	r1, r1, #4
   187b0:	sbc	r0, r0, #0
   187b4:	mvn	r2, #0
   187b8:	and	r5, r0, r2
   187bc:	mov	r0, #16646144	; 0xfe0000
   187c0:	orr	r0, r0, #-16777216	; 0xff000000
   187c4:	and	r4, r1, r0
   187c8:	mov	r0, r8
   187cc:	mov	r1, r4
   187d0:	bl	11f38 <realloc@plt>
   187d4:	strd	r4, [sl]
   187d8:	ldr	r1, [pc, #844]	; 18b2c <__generate_code_for_binary_boolean_expression@@Base+0xcdc>
   187dc:	mov	r7, r6
   187e0:	lsr	r2, r6, #24
   187e4:	add	r1, pc, r1
   187e8:	mov	r3, r0
   187ec:	str	r0, [r1]
   187f0:	ldr	r6, [pc, #824]	; 18b30 <__generate_code_for_binary_boolean_expression@@Base+0xce0>
   187f4:	ldr	r1, [r9, #4]
   187f8:	lsr	r5, r7, #16
   187fc:	add	r6, pc, r6
   18800:	ldrb	r6, [r6]
   18804:	ldr	r4, [pc, #808]	; 18b34 <__generate_code_for_binary_boolean_expression@@Base+0xce4>
   18808:	ldr	r4, [pc, r4]
   1880c:	strb	r7, [r3, r4]!
   18810:	strb	r2, [r3, #3]
   18814:	lsr	r2, r7, #8
   18818:	strb	r2, [r3, #1]
   1881c:	adds	r2, r4, #4
   18820:	adc	ip, r1, #0
   18824:	cmp	r6, #1
   18828:	strb	r5, [r3, #2]
   1882c:	stm	r9, {r2, ip}
   18830:	beq	188b8 <__generate_code_for_binary_boolean_expression@@Base+0xa68>
   18834:	ldr	r4, [sp, #20]
   18838:	mov	r5, r0
   1883c:	mov	lr, r9
   18840:	ldrb	r1, [r4]
   18844:	ldrb	r3, [r4, #1]
   18848:	ldrb	r7, [r4, #2]
   1884c:	ldrb	r6, [r4, #3]
   18850:	strb	r1, [r5, r2]!
   18854:	adds	r4, r2, #4
   18858:	adc	r1, ip, #0
   1885c:	strb	r6, [r5, #3]
   18860:	strb	r7, [r5, #2]
   18864:	strb	r3, [r5, #1]
   18868:	str	r4, [lr]
   1886c:	str	r1, [lr, #4]
   18870:	ldr	r6, [sp, #24]
   18874:	b	18a34 <__generate_code_for_binary_boolean_expression@@Base+0xbe4>
   18878:	ldr	r1, [r9, #4]
   1887c:	ldr	r4, [pc, #676]	; 18b28 <__generate_code_for_binary_boolean_expression@@Base+0xcd8>
   18880:	mov	r5, r6
   18884:	lsr	r0, r6, #24
   18888:	ldr	r4, [pc, r4]
   1888c:	lsr	r2, r6, #16
   18890:	lsr	r3, r6, #8
   18894:	mov	r6, r8
   18898:	strb	r5, [r6, r4]!
   1889c:	strb	r2, [r6, #2]
   188a0:	adds	r2, r4, #4
   188a4:	adc	ip, r1, #0
   188a8:	strb	r0, [r6, #3]
   188ac:	strb	r3, [r6, #1]
   188b0:	stm	r9, {r2, ip}
   188b4:	mov	r0, r8
   188b8:	ldr	r7, [sl, #4]
   188bc:	ldr	r3, [pc, #628]	; 18b38 <__generate_code_for_binary_boolean_expression@@Base+0xce8>
   188c0:	adds	r6, r4, #8
   188c4:	mov	r8, r9
   188c8:	adc	r5, r1, #0
   188cc:	ldr	r3, [pc, r3]
   188d0:	mov	r9, sl
   188d4:	subs	r3, r3, r6
   188d8:	sbcs	r3, r7, r5
   188dc:	bcs	18980 <__generate_code_for_binary_boolean_expression@@Base+0xb30>
   188e0:	mov	r2, #7
   188e4:	orr	r2, r2, #131072	; 0x20000
   188e8:	adds	r2, r4, r2
   188ec:	adc	r4, r1, #0
   188f0:	mov	r1, #16646144	; 0xfe0000
   188f4:	orr	r1, r1, #-16777216	; 0xff000000
   188f8:	and	r6, r2, r1
   188fc:	mov	r1, r6
   18900:	bl	11f38 <realloc@plt>
   18904:	ldr	sl, [pc, #568]	; 18b44 <__generate_code_for_binary_boolean_expression@@Base+0xcf4>
   18908:	mvn	r1, #0
   1890c:	and	r7, r4, r1
   18910:	add	sl, pc, sl
   18914:	strd	r6, [r9]
   18918:	str	r0, [sl]
   1891c:	ldr	r1, [pc, #548]	; 18b48 <__generate_code_for_binary_boolean_expression@@Base+0xcf8>
   18920:	ldr	r2, [sp, #20]
   18924:	ldr	ip, [r8, #4]
   18928:	add	r1, pc, r1
   1892c:	mov	lr, r8
   18930:	ldrb	r3, [r1]
   18934:	ldrb	r1, [r2]
   18938:	ldrb	r7, [r2, #1]
   1893c:	ldrb	r6, [r2, #2]
   18940:	ldrb	r5, [r2, #3]
   18944:	ldr	r2, [pc, #512]	; 18b4c <__generate_code_for_binary_boolean_expression@@Base+0xcfc>
   18948:	ldr	r2, [pc, r2]
   1894c:	adds	r4, r2, #4
   18950:	strb	r1, [r0, r2]
   18954:	add	r1, r0, r2
   18958:	strb	r5, [r1, #3]
   1895c:	strb	r6, [r1, #2]
   18960:	strb	r7, [r1, #1]
   18964:	adc	r1, ip, #0
   18968:	str	r4, [lr]
   1896c:	str	r1, [lr, #4]
   18970:	ldr	r6, [sp, #24]
   18974:	cmp	r3, #1
   18978:	beq	189c8 <__generate_code_for_binary_boolean_expression@@Base+0xb78>
   1897c:	b	18a34 <__generate_code_for_binary_boolean_expression@@Base+0xbe4>
   18980:	ldr	r6, [sp, #20]
   18984:	mov	r5, r0
   18988:	adds	r4, r2, #4
   1898c:	ldrb	r1, [r6]
   18990:	ldrb	r3, [r6, #1]
   18994:	ldrb	r7, [r6, #2]
   18998:	ldrb	r6, [r6, #3]
   1899c:	strb	r1, [r5, r2]!
   189a0:	adc	r1, ip, #0
   189a4:	strb	r3, [r5, #1]
   189a8:	mov	r3, r8
   189ac:	strb	r6, [r5, #3]
   189b0:	strb	r7, [r5, #2]
   189b4:	str	r4, [r3]
   189b8:	str	r1, [r3, #4]
   189bc:	ldr	r6, [sp, #24]
   189c0:	ldr	sl, [pc, #372]	; 18b3c <__generate_code_for_binary_boolean_expression@@Base+0xcec>
   189c4:	add	sl, pc, sl
   189c8:	ldr	r7, [r9, #4]
   189cc:	ldr	r5, [pc, #380]	; 18b50 <__generate_code_for_binary_boolean_expression@@Base+0xd00>
   189d0:	adds	r3, r2, #8
   189d4:	adc	lr, ip, #0
   189d8:	ldr	r5, [pc, r5]
   189dc:	subs	r3, r5, r3
   189e0:	sbcs	r3, r7, lr
   189e4:	bcs	18a30 <__generate_code_for_binary_boolean_expression@@Base+0xbe0>
   189e8:	mov	r1, #7
   189ec:	orr	r1, r1, #131072	; 0x20000
   189f0:	adds	r1, r2, r1
   189f4:	adc	r2, ip, #0
   189f8:	mvn	r3, #0
   189fc:	and	r5, r2, r3
   18a00:	mov	r2, #16646144	; 0xfe0000
   18a04:	orr	r2, r2, #-16777216	; 0xff000000
   18a08:	and	r4, r1, r2
   18a0c:	mov	r1, r4
   18a10:	bl	11f38 <realloc@plt>
   18a14:	strd	r4, [r9]
   18a18:	str	r0, [sl]
   18a1c:	ldr	r1, [r8, #4]
   18a20:	ldr	r4, [pc, #300]	; 18b54 <__generate_code_for_binary_boolean_expression@@Base+0xd04>
   18a24:	mov	lr, r8
   18a28:	ldr	r4, [pc, r4]
   18a2c:	b	18a34 <__generate_code_for_binary_boolean_expression@@Base+0xbe4>
   18a30:	mov	lr, r8
   18a34:	lsr	r2, r6, #24
   18a38:	strb	r6, [r0, r4]!
   18a3c:	lsr	r3, r6, #16
   18a40:	lsr	r7, r6, #8
   18a44:	strb	r2, [r0, #3]
   18a48:	strb	r3, [r0, #2]
   18a4c:	strb	r7, [r0, #1]
   18a50:	adds	r0, r4, #4
   18a54:	adc	r1, r1, #0
   18a58:	strd	r0, [lr]
   18a5c:	sub	sp, fp, #28
   18a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a64:	bl	11fe0 <__errno_location@plt>
   18a68:	ldr	r1, [pc, #116]	; 18ae4 <__generate_code_for_binary_boolean_expression@@Base+0xc94>
   18a6c:	ldr	r1, [pc, r1]
   18a70:	ldr	r0, [r0]
   18a74:	ldr	r4, [r1]
   18a78:	ldr	r5, [pc, #104]	; 18ae8 <__generate_code_for_binary_boolean_expression@@Base+0xc98>
   18a7c:	ldr	r5, [pc, r5]
   18a80:	bl	11f80 <strerror@plt>
   18a84:	ldr	r1, [pc, #96]	; 18aec <__generate_code_for_binary_boolean_expression@@Base+0xc9c>
   18a88:	mov	r3, r0
   18a8c:	mov	r0, r4
   18a90:	add	r1, pc, r1
   18a94:	mov	r2, r5
   18a98:	bl	11fd4 <fprintf@plt>
   18a9c:	sub	sp, fp, #28
   18aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18aa4:	strbvs	r6, [r3, -r1, ror #8]!
   18aa8:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   18aac:	andeq	r5, r1, ip, lsr #24
   18ab0:	andeq	r5, r1, ip, lsr #24
   18ab4:	andeq	r4, r1, r0, lsr #24
   18ab8:	muleq	r0, r0, fp
   18abc:	muleq	r1, ip, fp
   18ac0:	andeq	r5, r1, ip, ror fp
   18ac4:	andeq	r5, r1, r0, lsl #23
   18ac8:	andeq	r5, r1, ip, ror #22
   18acc:	andeq	r5, r1, ip, ror #22
   18ad0:	andeq	r5, r1, ip, lsr fp
   18ad4:	ldrdeq	r5, [r1], -ip
   18ad8:	andeq	r3, r0, r4, ror #22
   18adc:			; <UNDEFINED> instruction: 0x00015bbc
   18ae0:	andeq	r5, r1, r8, lsr #23
   18ae4:	andeq	r4, r1, ip, asr #12
   18ae8:	andeq	r5, r1, r4, asr r6
   18aec:	andeq	r3, r0, r0, ror #11
   18af0:	strdeq	r5, [r1], -r4
   18af4:	andeq	r5, r1, r8, lsl #22
   18af8:	ldrdeq	r4, [r1], -r0
   18afc:	andeq	r5, r1, r4, lsr #21
   18b00:	andeq	r4, r1, r4, lsl sl
   18b04:	andeq	r5, r1, ip, lsl sl
   18b08:	andeq	r3, r0, r2, lsl #22
   18b0c:	strdeq	r5, [r1], -r4
   18b10:	ldrdeq	r5, [r1], -r8
   18b14:	ldrdeq	r5, [r1], -r8
   18b18:	andeq	r5, r1, r8, lsl #19
   18b1c:	andeq	r5, r1, ip, lsl #21
   18b20:	andeq	r5, r1, r8, ror #18
   18b24:	andeq	r5, r1, ip, asr #18
   18b28:	andeq	r5, r1, r0, ror #16
   18b2c:	strdeq	r5, [r1], -r8
   18b30:	ldrdeq	r5, [r1], -r8
   18b34:	andeq	r5, r1, r0, ror #17
   18b38:	andeq	r5, r1, r4, lsl r8
   18b3c:	andeq	r5, r1, r8, lsl r7
   18b40:	andeq	r5, r1, r8, ror sl
   18b44:	andeq	r5, r1, ip, asr #15
   18b48:	andeq	r5, r1, ip, lsr #15
   18b4c:	andeq	r5, r1, r0, lsr #15
   18b50:	andeq	r5, r1, r8, lsl #14
   18b54:	andeq	r5, r1, r0, asr #13
   18b58:	ldr	r0, [r0]
   18b5c:	cmn	r0, #1
   18b60:	beq	18b80 <__generate_code_for_binary_boolean_expression@@Base+0xd30>
   18b64:	ldr	r0, [r1, r0, lsl #2]
   18b68:	cmp	r0, #0
   18b6c:	bxeq	lr
   18b70:	ldrd	r2, [r0]
   18b74:	adds	r2, r2, #1
   18b78:	adc	r3, r3, #0
   18b7c:	strd	r2, [r0]
   18b80:	bx	lr
   18b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b88:	add	fp, sp, #28
   18b8c:	sub	sp, sp, #12
   18b90:	mov	r9, r0
   18b94:	ldr	r0, [pc, #2000]	; 1936c <__generate_code_for_binary_boolean_expression@@Base+0x151c>
   18b98:	mov	sl, #2
   18b9c:	cmp	r3, #0
   18ba0:	movne	sl, #3
   18ba4:	ldr	r0, [pc, r0]
   18ba8:	cmp	r0, #0
   18bac:	beq	19364 <__generate_code_for_binary_boolean_expression@@Base+0x1514>
   18bb0:	stm	sp, {r2, r3}
   18bb4:	ldr	r0, [pc, #1972]	; 19370 <__generate_code_for_binary_boolean_expression@@Base+0x1520>
   18bb8:	str	r1, [sp, #8]
   18bbc:	add	r0, pc, r0
   18bc0:	ldrb	r0, [r0]
   18bc4:	cmp	r0, #1
   18bc8:	bne	18c58 <__generate_code_for_binary_boolean_expression@@Base+0xe08>
   18bcc:	ldr	r0, [pc, #1952]	; 19374 <__generate_code_for_binary_boolean_expression@@Base+0x1524>
   18bd0:	ldr	r4, [pc, #1952]	; 19378 <__generate_code_for_binary_boolean_expression@@Base+0x1528>
   18bd4:	add	r0, pc, r0
   18bd8:	add	r4, pc, r4
   18bdc:	ldr	r0, [r0, #4]
   18be0:	ldr	r5, [pc, #1940]	; 1937c <__generate_code_for_binary_boolean_expression@@Base+0x152c>
   18be4:	ldr	r5, [pc, r5]
   18be8:	ldr	r7, [r4, #4]
   18bec:	ldr	r6, [pc, #1932]	; 19380 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   18bf0:	adds	r2, r5, #4
   18bf4:	adc	r3, r0, #0
   18bf8:	ldr	r6, [pc, r6]
   18bfc:	subs	r2, r6, r2
   18c00:	sbcs	r2, r7, r3
   18c04:	bcs	18c58 <__generate_code_for_binary_boolean_expression@@Base+0xe08>
   18c08:	mov	r2, #7
   18c0c:	orr	r2, r2, #131072	; 0x20000
   18c10:	adds	r1, r5, r2
   18c14:	adc	r0, r0, #0
   18c18:	subs	r1, r1, #4
   18c1c:	sbc	r0, r0, #0
   18c20:	mvn	r2, #0
   18c24:	and	r7, r0, r2
   18c28:	mov	r0, #16646144	; 0xfe0000
   18c2c:	orr	r0, r0, #-16777216	; 0xff000000
   18c30:	ldr	r8, [pc, #1868]	; 19384 <__generate_code_for_binary_boolean_expression@@Base+0x1534>
   18c34:	and	r6, r1, r0
   18c38:	ldr	r0, [pc, #1864]	; 19388 <__generate_code_for_binary_boolean_expression@@Base+0x1538>
   18c3c:	mov	r1, r6
   18c40:	add	r8, pc, r8
   18c44:	ldr	r0, [pc, r0]
   18c48:	bl	11f38 <realloc@plt>
   18c4c:	ldr	r1, [sp, #8]
   18c50:	strd	r6, [r4]
   18c54:	str	r0, [r8]
   18c58:	ldr	r3, [pc, #1836]	; 1938c <__generate_code_for_binary_boolean_expression@@Base+0x153c>
   18c5c:	ldr	r7, [pc, #1836]	; 19390 <__generate_code_for_binary_boolean_expression@@Base+0x1540>
   18c60:	mov	r0, #0
   18c64:	add	r3, pc, r3
   18c68:	mov	r2, #1
   18c6c:	ldr	r7, [pc, r7]
   18c70:	ldr	r8, [pc, #1820]	; 19394 <__generate_code_for_binary_boolean_expression@@Base+0x1544>
   18c74:	adds	r4, r7, #4
   18c78:	ldr	r8, [pc, r8]
   18c7c:	ldr	r6, [r3, #4]
   18c80:	mov	r5, r8
   18c84:	strb	r0, [r5, r7]!
   18c88:	strb	r2, [r5, #3]
   18c8c:	strb	r0, [r5, #2]
   18c90:	strb	r0, [r5, #1]
   18c94:	adc	r5, r6, #0
   18c98:	cmp	r1, #0
   18c9c:	strd	r4, [r3]
   18ca0:	beq	18cb4 <__generate_code_for_binary_boolean_expression@@Base+0xe64>
   18ca4:	mov	r0, r1
   18ca8:	bl	11fb0 <strlen@plt>
   18cac:	add	r0, sl, r0, lsr #2
   18cb0:	add	sl, r0, #2
   18cb4:	ldr	r0, [pc, #1756]	; 19398 <__generate_code_for_binary_boolean_expression@@Base+0x1548>
   18cb8:	add	r0, pc, r0
   18cbc:	ldrb	r0, [r0]
   18cc0:	cmp	r0, #0
   18cc4:	beq	18da4 <__generate_code_for_binary_boolean_expression@@Base+0xf54>
   18cc8:	ldr	lr, [pc, #1744]	; 193a0 <__generate_code_for_binary_boolean_expression@@Base+0x1550>
   18ccc:	adds	r0, r7, #8
   18cd0:	adc	r1, r6, #0
   18cd4:	add	lr, pc, lr
   18cd8:	ldr	r2, [lr, #4]
   18cdc:	ldr	r3, [pc, #1728]	; 193a4 <__generate_code_for_binary_boolean_expression@@Base+0x1554>
   18ce0:	ldr	r3, [pc, r3]
   18ce4:	subs	r0, r3, r0
   18ce8:	sbcs	r0, r2, r1
   18cec:	bcs	18ff4 <__generate_code_for_binary_boolean_expression@@Base+0x11a4>
   18cf0:	mov	r0, #7
   18cf4:	orr	r0, r0, #131072	; 0x20000
   18cf8:	adds	r0, r7, r0
   18cfc:	adc	r1, r6, #0
   18d00:	mvn	r2, #0
   18d04:	and	r5, r1, r2
   18d08:	mov	r1, #16646144	; 0xfe0000
   18d0c:	orr	r1, r1, #-16777216	; 0xff000000
   18d10:	and	r6, r0, r1
   18d14:	ldr	r4, [pc, #1680]	; 193ac <__generate_code_for_binary_boolean_expression@@Base+0x155c>
   18d18:	mov	r0, r8
   18d1c:	mov	r1, r6
   18d20:	add	r4, pc, r4
   18d24:	mov	r7, lr
   18d28:	bl	11f38 <realloc@plt>
   18d2c:	mov	lr, r7
   18d30:	mov	r8, r0
   18d34:	str	r6, [lr]
   18d38:	str	r5, [lr, #4]
   18d3c:	str	r8, [r4]
   18d40:	ldr	r1, [pc, #1640]	; 193b0 <__generate_code_for_binary_boolean_expression@@Base+0x1560>
   18d44:	lsr	r0, sl, #24
   18d48:	add	r1, pc, r1
   18d4c:	lsr	r3, sl, #16
   18d50:	ldrb	r2, [r1]
   18d54:	ldr	r1, [pc, #1624]	; 193b4 <__generate_code_for_binary_boolean_expression@@Base+0x1564>
   18d58:	add	r1, pc, r1
   18d5c:	mov	r7, r1
   18d60:	ldr	r5, [r1, #4]
   18d64:	ldr	r4, [pc, #1612]	; 193b8 <__generate_code_for_binary_boolean_expression@@Base+0x1568>
   18d68:	mov	r1, r8
   18d6c:	ldr	r4, [pc, r4]
   18d70:	strb	sl, [r1, r4]!
   18d74:	ldr	ip, [sp, #8]
   18d78:	strb	r0, [r1, #3]
   18d7c:	lsr	r0, sl, #8
   18d80:	strb	r0, [r1, #1]
   18d84:	adds	r0, r4, #4
   18d88:	strb	r3, [r1, #2]
   18d8c:	adc	r1, r5, #0
   18d90:	mov	sl, r7
   18d94:	cmp	r2, #1
   18d98:	strd	r0, [sl]
   18d9c:	bne	18ddc <__generate_code_for_binary_boolean_expression@@Base+0xf8c>
   18da0:	b	1902c <__generate_code_for_binary_boolean_expression@@Base+0x11dc>
   18da4:	mov	r3, r8
   18da8:	lsr	r0, sl, #24
   18dac:	strb	sl, [r3, r4]!
   18db0:	lsr	r1, sl, #16
   18db4:	lsr	r2, sl, #8
   18db8:	strb	r0, [r3, #3]
   18dbc:	strb	r1, [r3, #2]
   18dc0:	strb	r2, [r3, #1]
   18dc4:	ldr	sl, [pc, #1488]	; 1939c <__generate_code_for_binary_boolean_expression@@Base+0x154c>
   18dc8:	ldr	ip, [sp, #8]
   18dcc:	adds	r0, r7, #8
   18dd0:	adc	r1, r6, #0
   18dd4:	add	sl, pc, sl
   18dd8:	strd	r0, [sl]
   18ddc:	mov	r6, r8
   18de0:	lsr	r2, r9, #24
   18de4:	strb	r9, [r6, r0]!
   18de8:	lsr	r3, r9, #16
   18dec:	strb	r2, [r6, #3]
   18df0:	adds	r2, r0, #4
   18df4:	lsr	r7, r9, #8
   18df8:	strb	r3, [r6, #2]
   18dfc:	adc	r3, r1, #0
   18e00:	strb	r7, [r6, #1]
   18e04:	strd	r2, [sl]
   18e08:	ldr	r5, [sp]
   18e0c:	mov	r6, r8
   18e10:	adds	r4, r2, #4
   18e14:	lsr	r7, r5, #8
   18e18:	strb	r5, [r6, r2]!
   18e1c:	lsr	r0, r5, #24
   18e20:	lsr	r1, r5, #16
   18e24:	strb	r7, [r6, #1]
   18e28:	adc	r7, r3, #0
   18e2c:	strb	r0, [r6, #3]
   18e30:	strb	r1, [r6, #2]
   18e34:	stm	sl, {r4, r7}
   18e38:	ldr	r0, [sp, #4]
   18e3c:	cmp	r0, #0
   18e40:	beq	18f18 <__generate_code_for_binary_boolean_expression@@Base+0x10c8>
   18e44:	ldr	r0, [pc, #1420]	; 193d8 <__generate_code_for_binary_boolean_expression@@Base+0x1588>
   18e48:	ldr	sl, [fp, #8]
   18e4c:	add	r0, pc, r0
   18e50:	ldrb	r0, [r0]
   18e54:	cmp	r0, #1
   18e58:	bne	18ee4 <__generate_code_for_binary_boolean_expression@@Base+0x1094>
   18e5c:	ldr	r9, [pc, #1400]	; 193dc <__generate_code_for_binary_boolean_expression@@Base+0x158c>
   18e60:	adds	r0, r2, #8
   18e64:	adc	r1, r3, #0
   18e68:	add	r9, pc, r9
   18e6c:	ldr	r6, [r9, #4]
   18e70:	ldr	r5, [pc, #1384]	; 193e0 <__generate_code_for_binary_boolean_expression@@Base+0x1590>
   18e74:	ldr	r5, [pc, r5]
   18e78:	subs	r0, r5, r0
   18e7c:	sbcs	r0, r6, r1
   18e80:	bcs	18ee4 <__generate_code_for_binary_boolean_expression@@Base+0x1094>
   18e84:	mov	r0, #7
   18e88:	orr	r0, r0, #131072	; 0x20000
   18e8c:	adds	r0, r2, r0
   18e90:	adc	r1, r3, #0
   18e94:	mvn	r2, #0
   18e98:	and	r5, r1, r2
   18e9c:	mov	r1, #16646144	; 0xfe0000
   18ea0:	orr	r1, r1, #-16777216	; 0xff000000
   18ea4:	and	r6, r0, r1
   18ea8:	ldr	r4, [pc, #1332]	; 193e4 <__generate_code_for_binary_boolean_expression@@Base+0x1594>
   18eac:	mov	r0, r8
   18eb0:	mov	r1, r6
   18eb4:	add	r4, pc, r4
   18eb8:	bl	11f38 <realloc@plt>
   18ebc:	ldr	ip, [sp, #8]
   18ec0:	str	r6, [r9]
   18ec4:	str	r5, [r9, #4]
   18ec8:	mov	r8, r0
   18ecc:	ldr	r0, [pc, #1300]	; 193e8 <__generate_code_for_binary_boolean_expression@@Base+0x1598>
   18ed0:	str	r8, [r4]
   18ed4:	add	r0, pc, r0
   18ed8:	ldr	r7, [r0, #4]
   18edc:	ldr	r4, [pc, #1288]	; 193ec <__generate_code_for_binary_boolean_expression@@Base+0x159c>
   18ee0:	ldr	r4, [pc, r4]
   18ee4:	mov	r3, r8
   18ee8:	lsr	r0, sl, #24
   18eec:	strb	sl, [r3, r4]!
   18ef0:	lsr	r1, sl, #16
   18ef4:	lsr	r2, sl, #8
   18ef8:	strb	r0, [r3, #3]
   18efc:	strb	r1, [r3, #2]
   18f00:	strb	r2, [r3, #1]
   18f04:	ldr	sl, [pc, #1252]	; 193f0 <__generate_code_for_binary_boolean_expression@@Base+0x15a0>
   18f08:	adds	r4, r4, #4
   18f0c:	adc	r7, r7, #0
   18f10:	add	sl, pc, sl
   18f14:	stm	sl, {r4, r7}
   18f18:	cmp	ip, #0
   18f1c:	beq	19364 <__generate_code_for_binary_boolean_expression@@Base+0x1514>
   18f20:	mov	r0, ip
   18f24:	bl	11fb0 <strlen@plt>
   18f28:	mov	r9, #1
   18f2c:	add	r5, r9, r0, lsr #2
   18f30:	ldr	r0, [pc, #1212]	; 193f4 <__generate_code_for_binary_boolean_expression@@Base+0x15a4>
   18f34:	add	r0, pc, r0
   18f38:	ldrb	r0, [r0]
   18f3c:	cmp	r0, #1
   18f40:	bne	18fe4 <__generate_code_for_binary_boolean_expression@@Base+0x1194>
   18f44:	ldr	sl, [pc, #1196]	; 193f8 <__generate_code_for_binary_boolean_expression@@Base+0x15a8>
   18f48:	adds	r0, r4, #4
   18f4c:	adc	r1, r7, #0
   18f50:	add	sl, pc, sl
   18f54:	ldr	r2, [sl, #4]
   18f58:	ldr	r3, [pc, #1180]	; 193fc <__generate_code_for_binary_boolean_expression@@Base+0x15ac>
   18f5c:	ldr	r3, [pc, r3]
   18f60:	subs	r0, r3, r0
   18f64:	sbcs	r0, r2, r1
   18f68:	bcs	19198 <__generate_code_for_binary_boolean_expression@@Base+0x1348>
   18f6c:	mov	r0, #0
   18f70:	str	r0, [sp, #4]
   18f74:	mov	r0, #7
   18f78:	orr	r0, r0, #131072	; 0x20000
   18f7c:	adds	r0, r4, r0
   18f80:	adc	r1, r7, #0
   18f84:	subs	r0, r0, #4
   18f88:	sbc	r1, r1, #0
   18f8c:	mvn	r2, #0
   18f90:	and	r7, r1, r2
   18f94:	mov	r1, #16646144	; 0xfe0000
   18f98:	orr	r1, r1, #-16777216	; 0xff000000
   18f9c:	and	r4, r0, r1
   18fa0:	ldr	r6, [pc, #1116]	; 19404 <__generate_code_for_binary_boolean_expression@@Base+0x15b4>
   18fa4:	mov	r0, r8
   18fa8:	mov	r1, r4
   18fac:	add	r6, pc, r6
   18fb0:	bl	11f38 <realloc@plt>
   18fb4:	stm	sl, {r4, r7}
   18fb8:	str	r0, [r6]
   18fbc:	ldr	sl, [pc, #1092]	; 19408 <__generate_code_for_binary_boolean_expression@@Base+0x15b8>
   18fc0:	mov	r8, r0
   18fc4:	add	sl, pc, sl
   18fc8:	ldr	r7, [sl, #4]
   18fcc:	ldr	r0, [pc, #1080]	; 1940c <__generate_code_for_binary_boolean_expression@@Base+0x15bc>
   18fd0:	add	r0, pc, r0
   18fd4:	ldrb	r9, [r0]
   18fd8:	ldr	r4, [pc, #1072]	; 19410 <__generate_code_for_binary_boolean_expression@@Base+0x15c0>
   18fdc:	ldr	r4, [pc, r4]
   18fe0:	b	191a8 <__generate_code_for_binary_boolean_expression@@Base+0x1358>
   18fe4:	mov	r0, #0
   18fe8:	str	r0, [sp, #4]
   18fec:	mov	r9, #0
   18ff0:	b	191a8 <__generate_code_for_binary_boolean_expression@@Base+0x1358>
   18ff4:	mov	r3, r8
   18ff8:	lsr	r0, sl, #24
   18ffc:	strb	sl, [r3, r4]!
   19000:	lsr	r1, sl, #16
   19004:	lsr	r2, sl, #8
   19008:	strb	r0, [r3, #3]
   1900c:	strb	r1, [r3, #2]
   19010:	strb	r2, [r3, #1]
   19014:	ldr	sl, [pc, #908]	; 193a8 <__generate_code_for_binary_boolean_expression@@Base+0x1558>
   19018:	adds	r0, r7, #8
   1901c:	adc	r1, r6, #0
   19020:	add	sl, pc, sl
   19024:	ldr	ip, [sp, #8]
   19028:	strd	r0, [sl]
   1902c:	ldr	r7, [lr, #4]
   19030:	ldr	r6, [pc, #900]	; 193bc <__generate_code_for_binary_boolean_expression@@Base+0x156c>
   19034:	adds	r2, r4, #8
   19038:	adc	r3, r5, #0
   1903c:	ldr	r6, [pc, r6]
   19040:	subs	r2, r6, r2
   19044:	sbcs	r2, r7, r3
   19048:	bcs	190ec <__generate_code_for_binary_boolean_expression@@Base+0x129c>
   1904c:	mov	r0, #7
   19050:	orr	r0, r0, #131072	; 0x20000
   19054:	adds	r0, r4, r0
   19058:	adc	r1, r5, #0
   1905c:	mvn	r2, #0
   19060:	and	r5, r1, r2
   19064:	mov	r1, #16646144	; 0xfe0000
   19068:	orr	r1, r1, #-16777216	; 0xff000000
   1906c:	and	r4, r0, r1
   19070:	ldr	r6, [pc, #840]	; 193c0 <__generate_code_for_binary_boolean_expression@@Base+0x1570>
   19074:	mov	r0, r8
   19078:	mov	r1, r4
   1907c:	add	r6, pc, r6
   19080:	mov	r7, lr
   19084:	bl	11f38 <realloc@plt>
   19088:	mov	lr, r7
   1908c:	str	r0, [r6]
   19090:	strd	r4, [lr]
   19094:	mov	r8, r0
   19098:	ldr	ip, [sp, #8]
   1909c:	ldr	r0, [pc, #800]	; 193c4 <__generate_code_for_binary_boolean_expression@@Base+0x1574>
   190a0:	ldr	r1, [sl, #4]
   190a4:	mov	r3, r8
   190a8:	add	r0, pc, r0
   190ac:	lsr	r2, r9, #24
   190b0:	ldrb	r7, [r0]
   190b4:	ldr	r0, [pc, #780]	; 193c8 <__generate_code_for_binary_boolean_expression@@Base+0x1578>
   190b8:	lsr	r6, r9, #16
   190bc:	ldr	r0, [pc, r0]
   190c0:	strb	r9, [r3, r0]!
   190c4:	strb	r2, [r3, #3]
   190c8:	lsr	r2, r9, #8
   190cc:	strb	r2, [r3, #1]
   190d0:	adds	r2, r0, #4
   190d4:	strb	r6, [r3, #2]
   190d8:	adc	r3, r1, #0
   190dc:	cmp	r7, #1
   190e0:	strd	r2, [sl]
   190e4:	bne	18e08 <__generate_code_for_binary_boolean_expression@@Base+0xfb8>
   190e8:	b	19118 <__generate_code_for_binary_boolean_expression@@Base+0x12c8>
   190ec:	mov	r6, r8
   190f0:	lsr	r2, r9, #24
   190f4:	strb	r9, [r6, r0]!
   190f8:	lsr	r3, r9, #16
   190fc:	strb	r2, [r6, #3]
   19100:	adds	r2, r0, #4
   19104:	lsr	r7, r9, #8
   19108:	strb	r3, [r6, #2]
   1910c:	adc	r3, r1, #0
   19110:	strb	r7, [r6, #1]
   19114:	strd	r2, [sl]
   19118:	ldr	r5, [lr, #4]
   1911c:	ldr	r4, [pc, #680]	; 193cc <__generate_code_for_binary_boolean_expression@@Base+0x157c>
   19120:	adds	r7, r0, #8
   19124:	adc	r6, r1, #0
   19128:	ldr	r4, [pc, r4]
   1912c:	subs	r7, r4, r7
   19130:	sbcs	r7, r5, r6
   19134:	bcs	18e08 <__generate_code_for_binary_boolean_expression@@Base+0xfb8>
   19138:	mov	r2, #7
   1913c:	orr	r2, r2, #131072	; 0x20000
   19140:	adds	r0, r0, r2
   19144:	adc	r1, r1, #0
   19148:	mvn	r2, #0
   1914c:	and	r5, r1, r2
   19150:	mov	r1, #16646144	; 0xfe0000
   19154:	orr	r1, r1, #-16777216	; 0xff000000
   19158:	and	r6, r0, r1
   1915c:	ldr	r4, [pc, #620]	; 193d0 <__generate_code_for_binary_boolean_expression@@Base+0x1580>
   19160:	mov	r0, r8
   19164:	mov	r1, r6
   19168:	add	r4, pc, r4
   1916c:	mov	r7, lr
   19170:	bl	11f38 <realloc@plt>
   19174:	ldr	ip, [sp, #8]
   19178:	str	r6, [r7]
   1917c:	str	r5, [r7, #4]
   19180:	str	r0, [r4]
   19184:	ldr	r3, [sl, #4]
   19188:	ldr	r2, [pc, #580]	; 193d4 <__generate_code_for_binary_boolean_expression@@Base+0x1584>
   1918c:	mov	r8, r0
   19190:	ldr	r2, [pc, r2]
   19194:	b	18e08 <__generate_code_for_binary_boolean_expression@@Base+0xfb8>
   19198:	mov	r0, #0
   1919c:	str	r0, [sp, #4]
   191a0:	ldr	sl, [pc, #600]	; 19400 <__generate_code_for_binary_boolean_expression@@Base+0x15b0>
   191a4:	add	sl, pc, sl
   191a8:	mov	r3, r8
   191ac:	ldr	r0, [sp, #8]
   191b0:	strb	r5, [r3, r4]!
   191b4:	adds	r4, r4, #4
   191b8:	lsr	r6, r5, #24
   191bc:	lsr	r1, r5, #16
   191c0:	lsr	r2, r5, #8
   191c4:	adc	r5, r7, #0
   191c8:	strb	r6, [r3, #3]
   191cc:	strb	r1, [r3, #2]
   191d0:	strb	r2, [r3, #1]
   191d4:	strd	r4, [sl]
   191d8:	bl	11fb0 <strlen@plt>
   191dc:	mov	r7, r0
   191e0:	cmp	r9, #0
   191e4:	beq	19284 <__generate_code_for_binary_boolean_expression@@Base+0x1434>
   191e8:	ldr	r6, [pc, #548]	; 19414 <__generate_code_for_binary_boolean_expression@@Base+0x15c4>
   191ec:	adds	r0, r4, r7
   191f0:	adc	r1, r5, #0
   191f4:	add	r6, pc, r6
   191f8:	ldr	r2, [r6, #4]
   191fc:	ldr	r3, [pc, #532]	; 19418 <__generate_code_for_binary_boolean_expression@@Base+0x15c8>
   19200:	ldr	r3, [pc, r3]
   19204:	subs	r3, r3, r0
   19208:	sbcs	r2, r2, r1
   1920c:	bcs	1927c <__generate_code_for_binary_boolean_expression@@Base+0x142c>
   19210:	mov	r2, #7
   19214:	orr	r2, r2, #131072	; 0x20000
   19218:	adds	r0, r0, r2
   1921c:	adc	r1, r1, #0
   19220:	subs	r0, r0, #8
   19224:	sbc	r1, r1, #0
   19228:	mvn	r2, #0
   1922c:	and	r5, r1, r2
   19230:	mov	r1, #16646144	; 0xfe0000
   19234:	orr	r1, r1, #-16777216	; 0xff000000
   19238:	and	r4, r0, r1
   1923c:	ldr	r9, [pc, #472]	; 1941c <__generate_code_for_binary_boolean_expression@@Base+0x15cc>
   19240:	mov	r0, r8
   19244:	mov	r1, r4
   19248:	add	r9, pc, r9
   1924c:	bl	11f38 <realloc@plt>
   19250:	strd	r4, [r6]
   19254:	str	r0, [r9]
   19258:	mov	r8, r0
   1925c:	ldr	r5, [sl, #4]
   19260:	ldr	r0, [pc, #440]	; 19420 <__generate_code_for_binary_boolean_expression@@Base+0x15d0>
   19264:	add	r0, pc, r0
   19268:	ldrb	r0, [r0]
   1926c:	str	r0, [sp, #4]
   19270:	ldr	r4, [pc, #428]	; 19424 <__generate_code_for_binary_boolean_expression@@Base+0x15d4>
   19274:	ldr	r4, [pc, r4]
   19278:	b	19284 <__generate_code_for_binary_boolean_expression@@Base+0x1434>
   1927c:	mov	r0, #1
   19280:	str	r0, [sp, #4]
   19284:	ldr	r9, [sp, #8]
   19288:	add	r0, r8, r4
   1928c:	mov	r2, r7
   19290:	mov	r1, r9
   19294:	bl	11efc <memcpy@plt>
   19298:	adds	r6, r4, r7
   1929c:	mov	r0, r9
   192a0:	adc	r5, r5, #0
   192a4:	str	r6, [sl]
   192a8:	str	r5, [sl, #4]
   192ac:	bl	11fb0 <strlen@plt>
   192b0:	and	r0, r0, #3
   192b4:	rsb	r4, r0, #4
   192b8:	ldr	r0, [sp, #4]
   192bc:	cmp	r0, #0
   192c0:	beq	19348 <__generate_code_for_binary_boolean_expression@@Base+0x14f8>
   192c4:	ldr	r7, [pc, #348]	; 19428 <__generate_code_for_binary_boolean_expression@@Base+0x15d8>
   192c8:	adds	r0, r6, r4
   192cc:	adc	r1, r5, #0
   192d0:	add	r7, pc, r7
   192d4:	ldr	r2, [r7, #4]
   192d8:	ldr	r3, [pc, #332]	; 1942c <__generate_code_for_binary_boolean_expression@@Base+0x15dc>
   192dc:	ldr	r3, [pc, r3]
   192e0:	subs	r3, r3, r0
   192e4:	sbcs	r2, r2, r1
   192e8:	bcs	19348 <__generate_code_for_binary_boolean_expression@@Base+0x14f8>
   192ec:	mov	r2, #7
   192f0:	orr	r2, r2, #131072	; 0x20000
   192f4:	adds	r0, r0, r2
   192f8:	adc	r1, r1, #0
   192fc:	subs	r0, r0, #8
   19300:	sbc	r1, r1, #0
   19304:	mvn	r2, #0
   19308:	and	r5, r1, r2
   1930c:	mov	r1, #16646144	; 0xfe0000
   19310:	orr	r1, r1, #-16777216	; 0xff000000
   19314:	and	r6, r0, r1
   19318:	ldr	r9, [pc, #272]	; 19430 <__generate_code_for_binary_boolean_expression@@Base+0x15e0>
   1931c:	mov	r0, r8
   19320:	mov	r1, r6
   19324:	add	r9, pc, r9
   19328:	bl	11f38 <realloc@plt>
   1932c:	str	r6, [r7]
   19330:	str	r5, [r7, #4]
   19334:	str	r0, [r9]
   19338:	ldr	r5, [sl, #4]
   1933c:	ldr	r6, [pc, #240]	; 19434 <__generate_code_for_binary_boolean_expression@@Base+0x15e4>
   19340:	mov	r8, r0
   19344:	ldr	r6, [pc, r6]
   19348:	add	r0, r8, r6
   1934c:	mov	r1, #0
   19350:	mov	r2, r4
   19354:	bl	12004 <memset@plt>
   19358:	adds	r0, r6, r4
   1935c:	adc	r1, r5, #0
   19360:	strd	r0, [sl]
   19364:	sub	sp, fp, #28
   19368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1936c:	andeq	r5, r1, r4, lsr r5
   19370:	andeq	r5, r1, r8, lsl r5
   19374:	andeq	r5, r1, r4, lsl r5
   19378:	andeq	r5, r1, r8, lsl #10
   1937c:	andeq	r5, r1, r4, lsl #10
   19380:	andeq	r5, r1, r8, ror #9
   19384:	muleq	r1, ip, r4
   19388:	muleq	r1, r8, r4
   1938c:	andeq	r5, r1, r4, lsl #9
   19390:	andeq	r5, r1, ip, ror r4
   19394:	andeq	r5, r1, r4, ror #8
   19398:	andeq	r5, r1, ip, lsl r4
   1939c:	andeq	r5, r1, r4, lsl r3
   193a0:	andeq	r5, r1, ip, lsl #8
   193a4:	andeq	r5, r1, r0, lsl #8
   193a8:	andeq	r5, r1, r8, asr #1
   193ac:			; <UNDEFINED> instruction: 0x000153bc
   193b0:	andeq	r5, r1, ip, lsl #7
   193b4:	muleq	r1, r0, r3
   193b8:	andeq	r5, r1, ip, ror r3
   193bc:	andeq	r5, r1, r4, lsr #1
   193c0:	andeq	r5, r1, r0, rrx
   193c4:	andeq	r5, r1, ip, lsr #32
   193c8:	andeq	r5, r1, ip, lsr #32
   193cc:			; <UNDEFINED> instruction: 0x00014fb8
   193d0:	andeq	r4, r1, r4, ror pc
   193d4:	andeq	r4, r1, r8, asr pc
   193d8:	andeq	r5, r1, r8, lsl #5
   193dc:	andeq	r5, r1, r8, ror r2
   193e0:	andeq	r5, r1, ip, ror #4
   193e4:	andeq	r5, r1, r8, lsr #4
   193e8:	andeq	r5, r1, r4, lsl r2
   193ec:	andeq	r5, r1, r8, lsl #4
   193f0:	ldrdeq	r5, [r1], -r8
   193f4:	andeq	r5, r1, r0, lsr #3
   193f8:	muleq	r1, r0, r1
   193fc:	andeq	r5, r1, r4, lsl #3
   19400:	andeq	r4, r1, r4, asr #30
   19404:	andeq	r5, r1, r0, lsr r1
   19408:	andeq	r5, r1, r4, lsr #2
   1940c:	andeq	r5, r1, r4, lsl #2
   19410:	andeq	r5, r1, ip, lsl #2
   19414:	andeq	r4, r1, ip, ror #29
   19418:	andeq	r4, r1, r0, ror #29
   1941c:	muleq	r1, r4, lr
   19420:	andeq	r4, r1, r0, ror lr
   19424:	andeq	r4, r1, r4, ror lr
   19428:	andeq	r4, r1, r0, lsl lr
   1942c:	andeq	r4, r1, r4, lsl #28
   19430:			; <UNDEFINED> instruction: 0x00014db8
   19434:	andeq	r4, r1, r4, lsr #27
   19438:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1943c:	add	fp, sp, #28
   19440:	sub	sp, sp, #28
   19444:	mov	ip, r0
   19448:	ldr	r0, [pc, #1728]	; 19b10 <__generate_code_for_binary_boolean_expression@@Base+0x1cc0>
   1944c:	ldr	r0, [pc, r0]
   19450:	cmp	r0, #0
   19454:	beq	19570 <__generate_code_for_binary_boolean_expression@@Base+0x1720>
   19458:	ldr	r2, [pc, #1716]	; 19b14 <__generate_code_for_binary_boolean_expression@@Base+0x1cc4>
   1945c:	mov	sl, r1
   19460:	add	r2, pc, r2
   19464:	ldr	r3, [r2, #4]
   19468:	ldr	r4, [pc, #1704]	; 19b18 <__generate_code_for_binary_boolean_expression@@Base+0x1cc8>
   1946c:	ldr	r4, [pc, r4]
   19470:	ldr	r6, [pc, #1700]	; 19b1c <__generate_code_for_binary_boolean_expression@@Base+0x1ccc>
   19474:	add	r6, pc, r6
   19478:	ldrb	r0, [r6]
   1947c:	cmp	r0, #0
   19480:	beq	19578 <__generate_code_for_binary_boolean_expression@@Base+0x1728>
   19484:	ldr	r8, [pc, #1720]	; 19b44 <__generate_code_for_binary_boolean_expression@@Base+0x1cf4>
   19488:	mov	r5, #10551296	; 0xa10000
   1948c:	adds	r9, r4, #4
   19490:	add	r8, pc, r8
   19494:	adc	r2, r3, #0
   19498:	ldr	r0, [r8, #4]
   1949c:	ldr	r1, [pc, #1700]	; 19b48 <__generate_code_for_binary_boolean_expression@@Base+0x1cf8>
   194a0:	orr	r5, r5, #16777216	; 0x1000000
   194a4:	ldr	r1, [pc, r1]
   194a8:	subs	r1, r1, r9
   194ac:	sbcs	r0, r0, r2
   194b0:	bcs	19688 <__generate_code_for_binary_boolean_expression@@Base+0x1838>
   194b4:	mov	r0, #3
   194b8:	orr	r0, r0, #131072	; 0x20000
   194bc:	adds	r0, r4, r0
   194c0:	adc	r1, r3, #0
   194c4:	mvn	r2, #0
   194c8:	and	r9, r1, r2
   194cc:	mov	r1, #16646144	; 0xfe0000
   194d0:	orr	r1, r1, #-16777216	; 0xff000000
   194d4:	and	r4, r0, r1
   194d8:	ldr	r0, [pc, #1652]	; 19b54 <__generate_code_for_binary_boolean_expression@@Base+0x1d04>
   194dc:	mov	r1, r4
   194e0:	mov	r7, ip
   194e4:	ldr	r0, [pc, r0]
   194e8:	bl	11f38 <realloc@plt>
   194ec:	ldr	ip, [pc, #1636]	; 19b58 <__generate_code_for_binary_boolean_expression@@Base+0x1d08>
   194f0:	ldr	lr, [pc, #1636]	; 19b5c <__generate_code_for_binary_boolean_expression@@Base+0x1d0c>
   194f4:	stm	r8, {r4, r9}
   194f8:	ldr	r1, [pc, #1632]	; 19b60 <__generate_code_for_binary_boolean_expression@@Base+0x1d10>
   194fc:	add	ip, pc, ip
   19500:	add	lr, pc, lr
   19504:	add	r1, pc, r1
   19508:	mov	r2, r0
   1950c:	str	r2, [r1]
   19510:	mov	r6, ip
   19514:	ldrb	ip, [ip]
   19518:	ldr	r3, [lr, #4]
   1951c:	ldr	r4, [pc, #1600]	; 19b64 <__generate_code_for_binary_boolean_expression@@Base+0x1d14>
   19520:	lsr	r0, r5, #24
   19524:	mov	r1, r8
   19528:	ldr	r4, [pc, r4]
   1952c:	str	r2, [sp, #20]
   19530:	lsl	r8, r7, #1
   19534:	strb	r5, [r2, r4]!
   19538:	adds	r9, r4, #4
   1953c:	strb	r0, [r2, #3]
   19540:	lsr	r0, r5, #16
   19544:	strb	r0, [r2, #2]
   19548:	lsr	r0, r5, #8
   1954c:	strb	r0, [r2, #1]
   19550:	adc	r5, r3, #0
   19554:	mov	r0, #0
   19558:	cmp	ip, #1
   1955c:	str	r3, [sp, #16]
   19560:	str	r9, [lr]
   19564:	str	r5, [lr, #4]
   19568:	beq	196dc <__generate_code_for_binary_boolean_expression@@Base+0x188c>
   1956c:	b	1982c <__generate_code_for_binary_boolean_expression@@Base+0x19dc>
   19570:	sub	sp, fp, #28
   19574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19578:	ldr	r0, [pc, #1440]	; 19b20 <__generate_code_for_binary_boolean_expression@@Base+0x1cd0>
   1957c:	mov	r7, r3
   19580:	adds	r9, r4, #4
   19584:	mov	lr, r2
   19588:	ldr	r0, [pc, r0]
   1958c:	str	r0, [sp, #20]
   19590:	ldrb	r1, [r0, r4]!
   19594:	str	r7, [sp, #16]
   19598:	ldrb	r5, [r0, #1]
   1959c:	ldrb	r3, [r0, #2]
   195a0:	ldrb	r0, [r0, #3]
   195a4:	orr	r1, r1, r5, lsl #8
   195a8:	orr	r1, r1, r3, lsl #16
   195ac:	orr	r3, r1, r0, lsl #24
   195b0:	adc	r5, r7, #0
   195b4:	mov	r7, #0
   195b8:	cmn	r3, #1
   195bc:	str	r9, [r2]
   195c0:	str	r5, [r2, #4]
   195c4:	beq	19788 <__generate_code_for_binary_boolean_expression@@Base+0x1938>
   195c8:	mov	r0, #10551296	; 0xa10000
   195cc:	orr	r0, r0, #16777216	; 0x1000000
   195d0:	cmp	r3, r0
   195d4:	bne	19794 <__generate_code_for_binary_boolean_expression@@Base+0x1944>
   195d8:	str	r5, [sp, #8]
   195dc:	ldr	r0, [sp, #20]
   195e0:	str	r4, [sp, #4]
   195e4:	adds	r5, r4, #8
   195e8:	ldr	r3, [r0, r9]
   195ec:	ldr	r0, [sp, #16]
   195f0:	mov	r1, r9
   195f4:	adc	r9, r0, #0
   195f8:	cmn	r3, #1
   195fc:	stm	lr, {r5, r9}
   19600:	beq	197a0 <__generate_code_for_binary_boolean_expression@@Base+0x1950>
   19604:	lsr	r0, r3, #1
   19608:	mov	r7, ip
   1960c:	cmp	r0, ip
   19610:	bne	197a0 <__generate_code_for_binary_boolean_expression@@Base+0x1950>
   19614:	lsl	r0, r7, #3
   19618:	mov	r4, r1
   1961c:	bl	11f68 <malloc@plt>
   19620:	mov	r1, r0
   19624:	cmp	r7, #0
   19628:	beq	197c8 <__generate_code_for_binary_boolean_expression@@Base+0x1978>
   1962c:	mov	r0, r7
   19630:	str	r7, [sp, #24]
   19634:	str	r1, [sp, #12]
   19638:	ldr	r2, [sp, #20]
   1963c:	ldr	r3, [r2, r5]!
   19640:	adds	r5, r5, #8
   19644:	ldr	r2, [r2, #4]
   19648:	str	r3, [r1]
   1964c:	adc	r9, r9, #0
   19650:	str	r2, [r1, #4]
   19654:	subs	r0, r0, #1
   19658:	add	r1, r1, #8
   1965c:	bne	19638 <__generate_code_for_binary_boolean_expression@@Base+0x17e8>
   19660:	ldr	lr, [pc, #1236]	; 19b3c <__generate_code_for_binary_boolean_expression@@Base+0x1cec>
   19664:	add	lr, pc, lr
   19668:	mov	r0, lr
   1966c:	stm	r0, {r5, r9}
   19670:	ldr	ip, [pc, #1224]	; 19b40 <__generate_code_for_binary_boolean_expression@@Base+0x1cf0>
   19674:	ldr	r0, [sp, #12]
   19678:	add	ip, pc, ip
   1967c:	mov	r6, ip
   19680:	ldr	ip, [sp, #24]
   19684:	b	197e4 <__generate_code_for_binary_boolean_expression@@Base+0x1994>
   19688:	str	r3, [sp, #16]
   1968c:	ldr	r3, [pc, #1208]	; 19b4c <__generate_code_for_binary_boolean_expression@@Base+0x1cfc>
   19690:	mov	lr, r5
   19694:	mov	r7, ip
   19698:	lsr	ip, r5, #16
   1969c:	ldr	r3, [pc, r3]
   196a0:	lsr	r1, r5, #8
   196a4:	str	r3, [sp, #20]
   196a8:	strb	lr, [r3, r4]!
   196ac:	lsr	r0, lr, #24
   196b0:	strb	r1, [r3, #1]
   196b4:	strb	r0, [r3, #3]
   196b8:	strb	ip, [r3, #2]
   196bc:	ldr	lr, [pc, #1164]	; 19b50 <__generate_code_for_binary_boolean_expression@@Base+0x1d00>
   196c0:	lsl	r5, r7, #1
   196c4:	add	lr, pc, lr
   196c8:	mov	r1, r8
   196cc:	mov	r8, r5
   196d0:	str	r9, [lr]
   196d4:	str	r2, [lr, #4]
   196d8:	mov	r5, r2
   196dc:	str	r8, [sp, #24]
   196e0:	mov	r8, r1
   196e4:	ldr	r0, [sp, #16]
   196e8:	ldr	r2, [r8, #4]
   196ec:	ldr	r3, [pc, #1140]	; 19b68 <__generate_code_for_binary_boolean_expression@@Base+0x1d18>
   196f0:	adds	ip, r4, #8
   196f4:	adc	r1, r0, #0
   196f8:	mov	r0, #0
   196fc:	ldr	r3, [pc, r3]
   19700:	subs	r3, r3, ip
   19704:	sbcs	r1, r2, r1
   19708:	bcs	19780 <__generate_code_for_binary_boolean_expression@@Base+0x1930>
   1970c:	ldr	r5, [pc, #1112]	; 19b6c <__generate_code_for_binary_boolean_expression@@Base+0x1d1c>
   19710:	mov	r0, #3
   19714:	ldr	r1, [sp, #16]
   19718:	orr	r0, r0, #131072	; 0x20000
   1971c:	adds	r0, r4, r0
   19720:	adc	r1, r1, #0
   19724:	adds	r0, r0, #4
   19728:	adc	r1, r1, #0
   1972c:	mvn	r2, #0
   19730:	and	r9, r1, r2
   19734:	mov	r1, #16646144	; 0xfe0000
   19738:	orr	r1, r1, #-16777216	; 0xff000000
   1973c:	and	r4, r0, r1
   19740:	ldr	r0, [sp, #20]
   19744:	mov	r1, r4
   19748:	add	r5, pc, r5
   1974c:	bl	11f38 <realloc@plt>
   19750:	ldr	ip, [pc, #1048]	; 19b70 <__generate_code_for_binary_boolean_expression@@Base+0x1d20>
   19754:	ldr	lr, [pc, #1048]	; 19b74 <__generate_code_for_binary_boolean_expression@@Base+0x1d24>
   19758:	stm	r8, {r4, r9}
   1975c:	add	lr, pc, lr
   19760:	str	r0, [r5]
   19764:	str	r0, [sp, #20]
   19768:	ldr	r5, [lr, #4]
   1976c:	ldr	r9, [pc, #1028]	; 19b78 <__generate_code_for_binary_boolean_expression@@Base+0x1d28>
   19770:	add	ip, pc, ip
   19774:	mov	r6, ip
   19778:	mov	r0, #0
   1977c:	ldr	r9, [pc, r9]
   19780:	ldr	r8, [sp, #24]
   19784:	b	1982c <__generate_code_for_binary_boolean_expression@@Base+0x19dc>
   19788:	ldr	r1, [sp, #16]
   1978c:	mov	r0, #0
   19790:	b	197f8 <__generate_code_for_binary_boolean_expression@@Base+0x19a8>
   19794:	ldr	r1, [pc, #904]	; 19b24 <__generate_code_for_binary_boolean_expression@@Base+0x1cd4>
   19798:	add	r1, pc, r1
   1979c:	b	197a8 <__generate_code_for_binary_boolean_expression@@Base+0x1958>
   197a0:	ldr	r1, [pc, #904]	; 19b30 <__generate_code_for_binary_boolean_expression@@Base+0x1ce0>
   197a4:	add	r1, pc, r1
   197a8:	ldr	r0, [pc, #888]	; 19b28 <__generate_code_for_binary_boolean_expression@@Base+0x1cd8>
   197ac:	ldr	r0, [pc, r0]
   197b0:	ldr	r0, [r0]
   197b4:	ldr	r2, [pc, #880]	; 19b2c <__generate_code_for_binary_boolean_expression@@Base+0x1cdc>
   197b8:	ldr	r2, [pc, r2]
   197bc:	sub	sp, fp, #28
   197c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197c4:	b	11fd4 <fprintf@plt>
   197c8:	ldr	lr, [pc, #868]	; 19b34 <__generate_code_for_binary_boolean_expression@@Base+0x1ce4>
   197cc:	ldr	ip, [pc, #868]	; 19b38 <__generate_code_for_binary_boolean_expression@@Base+0x1ce8>
   197d0:	mov	r0, r1
   197d4:	add	lr, pc, lr
   197d8:	add	ip, pc, ip
   197dc:	mov	r6, ip
   197e0:	mov	ip, r7
   197e4:	mov	r9, r4
   197e8:	ldr	r5, [sp, #8]
   197ec:	ldr	r4, [sp, #4]
   197f0:	ldr	r1, [sp, #16]
   197f4:	mov	r7, #0
   197f8:	str	r4, [lr]
   197fc:	str	r1, [lr, #4]
   19800:	ldr	r2, [sp, #20]
   19804:	mov	r1, #1
   19808:	lsl	r8, ip, #1
   1980c:	strb	r7, [r2, r4]!
   19810:	strb	r1, [r2, #3]
   19814:	mov	r1, #161	; 0xa1
   19818:	strb	r7, [r2, #1]
   1981c:	strb	r1, [r2, #2]
   19820:	str	r9, [lr]
   19824:	str	r5, [lr, #4]
   19828:	mov	r7, ip
   1982c:	ldr	r3, [sp, #20]
   19830:	lsr	r1, r8, #16
   19834:	mov	ip, r3
   19838:	strb	r8, [r3, r9]!
   1983c:	lsr	r4, r8, #24
   19840:	lsr	r2, r8, #8
   19844:	adds	r8, r9, #4
   19848:	strb	r1, [r3, #2]
   1984c:	adc	r1, r5, #0
   19850:	cmp	r7, #0
   19854:	strb	r4, [r3, #3]
   19858:	strb	r2, [r3, #1]
   1985c:	str	r8, [lr]
   19860:	str	r1, [lr, #4]
   19864:	str	r7, [sp, #24]
   19868:	beq	19b04 <__generate_code_for_binary_boolean_expression@@Base+0x1cb4>
   1986c:	ldr	r7, [pc, #776]	; 19b7c <__generate_code_for_binary_boolean_expression@@Base+0x1d2c>
   19870:	mov	r4, lr
   19874:	mov	r2, r0
   19878:	add	r7, pc, r7
   1987c:	str	r0, [sp, #12]
   19880:	cmp	r0, #0
   19884:	mov	r0, r4
   19888:	str	r2, [sp, #16]
   1988c:	beq	19898 <__generate_code_for_binary_boolean_expression@@Base+0x1a48>
   19890:	ldrd	r2, [r2]
   19894:	b	198a0 <__generate_code_for_binary_boolean_expression@@Base+0x1a50>
   19898:	mov	r2, #0
   1989c:	mov	r3, #0
   198a0:	ldrd	r4, [sl]
   198a4:	adds	r4, r4, r2
   198a8:	adc	r5, r5, r3
   198ac:	strd	r4, [sl]
   198b0:	ldrb	r2, [r6]
   198b4:	str	sl, [sp, #20]
   198b8:	cmp	r2, #0
   198bc:	beq	19988 <__generate_code_for_binary_boolean_expression@@Base+0x1b38>
   198c0:	ldr	r3, [r7, #4]
   198c4:	ldr	r6, [pc, #692]	; 19b80 <__generate_code_for_binary_boolean_expression@@Base+0x1d30>
   198c8:	adds	r2, r8, #4
   198cc:	adc	r9, r1, #0
   198d0:	ldr	r6, [pc, r6]
   198d4:	subs	r2, r6, r2
   198d8:	sbcs	r2, r3, r9
   198dc:	bcs	199c4 <__generate_code_for_binary_boolean_expression@@Base+0x1b74>
   198e0:	mov	r2, #3
   198e4:	orr	r2, r2, #131072	; 0x20000
   198e8:	adds	r0, r8, r2
   198ec:	adc	r1, r1, #0
   198f0:	mvn	r2, #0
   198f4:	and	r8, r1, r2
   198f8:	mov	r1, #16646144	; 0xfe0000
   198fc:	orr	r1, r1, #-16777216	; 0xff000000
   19900:	and	r6, r0, r1
   19904:	mov	r0, ip
   19908:	mov	r1, r6
   1990c:	bl	11f38 <realloc@plt>
   19910:	ldr	ip, [pc, #620]	; 19b84 <__generate_code_for_binary_boolean_expression@@Base+0x1d34>
   19914:	ldr	lr, [pc, #620]	; 19b88 <__generate_code_for_binary_boolean_expression@@Base+0x1d38>
   19918:	stm	r7, {r6, r8}
   1991c:	mov	r3, r0
   19920:	ldr	r0, [pc, #612]	; 19b8c <__generate_code_for_binary_boolean_expression@@Base+0x1d3c>
   19924:	add	lr, pc, lr
   19928:	mov	r9, lr
   1992c:	add	r0, pc, r0
   19930:	add	ip, pc, ip
   19934:	str	r3, [r0]
   19938:	mov	lr, ip
   1993c:	ldrb	ip, [ip]
   19940:	ldr	r1, [r9, #4]
   19944:	ldr	r8, [pc, #580]	; 19b90 <__generate_code_for_binary_boolean_expression@@Base+0x1d40>
   19948:	mov	r7, r3
   1994c:	lsr	r2, r4, #24
   19950:	ldr	r8, [pc, r8]
   19954:	lsr	r6, r4, #16
   19958:	strb	r4, [r7, r8]!
   1995c:	strb	r2, [r7, #3]
   19960:	lsr	r2, r4, #8
   19964:	strb	r2, [r7, #1]
   19968:	adds	r2, r8, #4
   1996c:	mov	r4, r9
   19970:	adc	r9, r1, #0
   19974:	cmp	ip, #1
   19978:	strb	r6, [r7, #2]
   1997c:	stm	r4, {r2, r9}
   19980:	beq	199f8 <__generate_code_for_binary_boolean_expression@@Base+0x1ba8>
   19984:	b	19aa4 <__generate_code_for_binary_boolean_expression@@Base+0x1c54>
   19988:	mov	r7, ip
   1998c:	lsr	r2, r4, #24
   19990:	strb	r4, [r7, r8]!
   19994:	lsr	r9, r4, #16
   19998:	strb	r2, [r7, #3]
   1999c:	adds	r2, r8, #4
   199a0:	mov	lr, r6
   199a4:	lsr	r6, r4, #8
   199a8:	strb	r9, [r7, #2]
   199ac:	adc	r9, r1, #0
   199b0:	mov	r4, r0
   199b4:	strb	r6, [r7, #1]
   199b8:	mov	r3, ip
   199bc:	stm	r4, {r2, r9}
   199c0:	b	19aa4 <__generate_code_for_binary_boolean_expression@@Base+0x1c54>
   199c4:	mov	r6, ip
   199c8:	lsr	r2, r4, #24
   199cc:	strb	r4, [r6, r8]!
   199d0:	lsr	r9, r4, #16
   199d4:	strb	r2, [r6, #3]
   199d8:	adds	r2, r8, #4
   199dc:	lsr	r7, r4, #8
   199e0:	strb	r9, [r6, #2]
   199e4:	adc	r9, r1, #0
   199e8:	mov	r4, r0
   199ec:	strb	r7, [r6, #1]
   199f0:	mov	r3, ip
   199f4:	stm	r4, {r2, r9}
   199f8:	ldr	lr, [pc, #404]	; 19b94 <__generate_code_for_binary_boolean_expression@@Base+0x1d44>
   199fc:	mov	r0, r4
   19a00:	adds	r7, r8, #8
   19a04:	add	lr, pc, lr
   19a08:	adc	ip, r1, #0
   19a0c:	ldr	r4, [lr, #4]
   19a10:	ldr	r6, [pc, #384]	; 19b98 <__generate_code_for_binary_boolean_expression@@Base+0x1d48>
   19a14:	ldr	r6, [pc, r6]
   19a18:	subs	r7, r6, r7
   19a1c:	sbcs	r7, r4, ip
   19a20:	bcs	19a98 <__generate_code_for_binary_boolean_expression@@Base+0x1c48>
   19a24:	mov	r2, #3
   19a28:	orr	r2, r2, #131072	; 0x20000
   19a2c:	adds	r0, r8, r2
   19a30:	adc	r1, r1, #0
   19a34:	adds	r0, r0, #4
   19a38:	adc	r1, r1, #0
   19a3c:	mvn	r2, #0
   19a40:	and	r7, r1, r2
   19a44:	mov	r1, #16646144	; 0xfe0000
   19a48:	orr	r1, r1, #-16777216	; 0xff000000
   19a4c:	and	r6, r0, r1
   19a50:	mov	r0, r3
   19a54:	mov	r1, r6
   19a58:	mov	r8, lr
   19a5c:	bl	11f38 <realloc@plt>
   19a60:	ldr	lr, [pc, #312]	; 19ba0 <__generate_code_for_binary_boolean_expression@@Base+0x1d50>
   19a64:	strd	r6, [r8]
   19a68:	mov	r3, r0
   19a6c:	add	lr, pc, lr
   19a70:	mov	r4, lr
   19a74:	ldr	r9, [lr, #4]
   19a78:	ldr	r0, [pc, #292]	; 19ba4 <__generate_code_for_binary_boolean_expression@@Base+0x1d54>
   19a7c:	add	r0, pc, r0
   19a80:	str	r3, [r0]
   19a84:	ldr	r2, [pc, #284]	; 19ba8 <__generate_code_for_binary_boolean_expression@@Base+0x1d58>
   19a88:	ldr	r2, [pc, r2]
   19a8c:	ldr	lr, [pc, #280]	; 19bac <__generate_code_for_binary_boolean_expression@@Base+0x1d5c>
   19a90:	add	lr, pc, lr
   19a94:	b	19aa4 <__generate_code_for_binary_boolean_expression@@Base+0x1c54>
   19a98:	ldr	lr, [pc, #252]	; 19b9c <__generate_code_for_binary_boolean_expression@@Base+0x1d4c>
   19a9c:	mov	r4, r0
   19aa0:	add	lr, pc, lr
   19aa4:	mov	ip, r3
   19aa8:	lsr	r1, r5, #16
   19aac:	strb	r5, [r3, r2]!
   19ab0:	lsr	r0, r5, #24
   19ab4:	lsr	r7, r5, #8
   19ab8:	adds	r8, r2, #4
   19abc:	strb	r1, [r3, #2]
   19ac0:	adc	r1, r9, #0
   19ac4:	strb	r0, [r3, #3]
   19ac8:	strb	r7, [r3, #1]
   19acc:	str	r8, [r4]
   19ad0:	str	r1, [r4, #4]
   19ad4:	ldr	r0, [sp, #24]
   19ad8:	mov	r6, lr
   19adc:	subs	r0, r0, #1
   19ae0:	str	r0, [sp, #24]
   19ae4:	ldr	sl, [sp, #20]
   19ae8:	ldr	r2, [sp, #16]
   19aec:	ldr	r0, [sp, #12]
   19af0:	ldr	r7, [pc, #184]	; 19bb0 <__generate_code_for_binary_boolean_expression@@Base+0x1d60>
   19af4:	add	sl, sl, #8
   19af8:	add	r2, r2, #8
   19afc:	add	r7, pc, r7
   19b00:	bne	19880 <__generate_code_for_binary_boolean_expression@@Base+0x1a30>
   19b04:	sub	sp, fp, #28
   19b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b0c:	b	11ef0 <free@plt>
   19b10:	andeq	r4, r1, ip, lsl #25
   19b14:	andeq	r4, r1, r8, lsl #25
   19b18:	andeq	r4, r1, ip, ror ip
   19b1c:	andeq	r4, r1, r0, ror #24
   19b20:	andeq	r4, r1, r4, asr fp
   19b24:	strdeq	r2, [r0], -r8
   19b28:	andeq	r3, r1, ip, lsl #18
   19b2c:	andeq	r4, r1, r8, lsl r9
   19b30:	andeq	r2, r0, r6, lsr r9
   19b34:	andeq	r4, r1, r4, lsl r9
   19b38:	strdeq	r4, [r1], -ip
   19b3c:	andeq	r4, r1, r4, lsl #21
   19b40:	andeq	r4, r1, ip, asr sl
   19b44:	andeq	r4, r1, r0, asr ip
   19b48:	andeq	r4, r1, ip, lsr ip
   19b4c:	andeq	r4, r1, r0, asr #20
   19b50:	andeq	r4, r1, r4, lsr #20
   19b54:	strdeq	r4, [r1], -r8
   19b58:	ldrdeq	r4, [r1], -r8
   19b5c:	andeq	r4, r1, r8, ror #23
   19b60:	ldrdeq	r4, [r1], -r8
   19b64:	andeq	r4, r1, r0, asr #23
   19b68:	andeq	r4, r1, r4, ror #19
   19b6c:	muleq	r1, r4, r9
   19b70:	andeq	r4, r1, r4, ror #18
   19b74:	andeq	r4, r1, ip, lsl #19
   19b78:	andeq	r4, r1, ip, ror #18
   19b7c:	andeq	r4, r1, r8, ror #16
   19b80:	andeq	r4, r1, r0, lsl r8
   19b84:	andeq	r4, r1, r4, lsr #15
   19b88:	andeq	r4, r1, r4, asr #15
   19b8c:			; <UNDEFINED> instruction: 0x000147b0
   19b90:	muleq	r1, r8, r7
   19b94:	ldrdeq	r4, [r1], -ip
   19b98:	andeq	r4, r1, ip, asr #13
   19b9c:	andeq	r4, r1, r4, lsr r6
   19ba0:	andeq	r4, r1, ip, ror r6
   19ba4:	andeq	r4, r1, r0, ror #12
   19ba8:	andeq	r4, r1, r0, ror #12
   19bac:	andeq	r4, r1, r4, asr #12
   19bb0:	andeq	r4, r1, r4, ror #11
   19bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bb8:	add	fp, sp, #28
   19bbc:	sub	sp, sp, #4
   19bc0:	ldr	r0, [pc, #3180]	; 1a834 <__generate_code_for_binary_boolean_expression@@Base+0x29e4>
   19bc4:	ldr	r0, [pc, r0]
   19bc8:	cmp	r0, #0
   19bcc:	beq	1a228 <__generate_code_for_binary_boolean_expression@@Base+0x23d8>
   19bd0:	ldr	sl, [pc, #3168]	; 1a838 <__generate_code_for_binary_boolean_expression@@Base+0x29e8>
   19bd4:	add	sl, pc, sl
   19bd8:	ldr	r6, [sl, #4]
   19bdc:	ldr	r5, [pc, #3160]	; 1a83c <__generate_code_for_binary_boolean_expression@@Base+0x29ec>
   19be0:	ldr	r5, [pc, r5]
   19be4:	ldr	r8, [pc, #3156]	; 1a840 <__generate_code_for_binary_boolean_expression@@Base+0x29f0>
   19be8:	add	r8, pc, r8
   19bec:	ldrb	r0, [r8]
   19bf0:	cmp	r0, #0
   19bf4:	beq	19cb8 <__generate_code_for_binary_boolean_expression@@Base+0x1e68>
   19bf8:	ldr	r9, [pc, #3164]	; 1a85c <__generate_code_for_binary_boolean_expression@@Base+0x2a0c>
   19bfc:	adds	r2, r5, #4
   19c00:	adc	ip, r6, #0
   19c04:	add	r9, pc, r9
   19c08:	ldr	r0, [r9, #4]
   19c0c:	ldr	r3, [pc, #3148]	; 1a860 <__generate_code_for_binary_boolean_expression@@Base+0x2a10>
   19c10:	ldr	r3, [pc, r3]
   19c14:	subs	r3, r3, r2
   19c18:	sbcs	r0, r0, ip
   19c1c:	bcs	19d0c <__generate_code_for_binary_boolean_expression@@Base+0x1ebc>
   19c20:	mov	r0, #7
   19c24:	orr	r0, r0, #131072	; 0x20000
   19c28:	adds	r0, r5, r0
   19c2c:	adc	r1, r6, #0
   19c30:	subs	r0, r0, #4
   19c34:	sbc	r1, r1, #0
   19c38:	mvn	r2, #0
   19c3c:	and	r5, r1, r2
   19c40:	mov	r1, #16646144	; 0xfe0000
   19c44:	orr	r1, r1, #-16777216	; 0xff000000
   19c48:	ldr	r4, [pc, #3096]	; 1a868 <__generate_code_for_binary_boolean_expression@@Base+0x2a18>
   19c4c:	and	r6, r0, r1
   19c50:	ldr	r0, [pc, #3092]	; 1a86c <__generate_code_for_binary_boolean_expression@@Base+0x2a1c>
   19c54:	mov	r1, r6
   19c58:	add	r4, pc, r4
   19c5c:	ldr	r0, [pc, r0]
   19c60:	bl	11f38 <realloc@plt>
   19c64:	str	r6, [r9]
   19c68:	str	r5, [r9, #4]
   19c6c:	str	r0, [r4]
   19c70:	ldrb	r3, [r8]
   19c74:	ldr	r6, [sl, #4]
   19c78:	ldr	r5, [pc, #3056]	; 1a870 <__generate_code_for_binary_boolean_expression@@Base+0x2a20>
   19c7c:	mov	r2, r0
   19c80:	mov	r1, #0
   19c84:	mov	r7, #161	; 0xa1
   19c88:	ldr	r5, [pc, r5]
   19c8c:	strb	r1, [r2, r5]!
   19c90:	strb	r7, [r2, #3]
   19c94:	strb	r1, [r2, #2]
   19c98:	strb	r1, [r2, #1]
   19c9c:	adds	r2, r5, #4
   19ca0:	adc	ip, r6, #0
   19ca4:	mov	r7, #1
   19ca8:	cmp	r3, #1
   19cac:	stm	sl, {r2, ip}
   19cb0:	beq	19d34 <__generate_code_for_binary_boolean_expression@@Base+0x1ee4>
   19cb4:	b	19f0c <__generate_code_for_binary_boolean_expression@@Base+0x20bc>
   19cb8:	ldr	r0, [pc, #2948]	; 1a844 <__generate_code_for_binary_boolean_expression@@Base+0x29f4>
   19cbc:	ldr	r0, [pc, r0]
   19cc0:	mov	r1, r0
   19cc4:	ldrb	r2, [r1, r5]!
   19cc8:	ldrb	r3, [r1, #1]
   19ccc:	ldrb	r7, [r1, #2]
   19cd0:	ldrb	r1, [r1, #3]
   19cd4:	orr	r2, r2, r3, lsl #8
   19cd8:	orr	r2, r2, r7, lsl #16
   19cdc:	orr	r3, r2, r1, lsl #24
   19ce0:	adds	r2, r5, #4
   19ce4:	adc	ip, r6, #0
   19ce8:	cmp	r3, #-1593835520	; 0xa1000000
   19cec:	stm	sl, {r2, ip}
   19cf0:	beq	19eac <__generate_code_for_binary_boolean_expression@@Base+0x205c>
   19cf4:	mov	r7, #1
   19cf8:	cmn	r3, #1
   19cfc:	beq	19eec <__generate_code_for_binary_boolean_expression@@Base+0x209c>
   19d00:	ldr	r1, [pc, #2880]	; 1a848 <__generate_code_for_binary_boolean_expression@@Base+0x29f8>
   19d04:	add	r1, pc, r1
   19d08:	b	1a5ec <__generate_code_for_binary_boolean_expression@@Base+0x279c>
   19d0c:	ldr	r0, [pc, #2896]	; 1a864 <__generate_code_for_binary_boolean_expression@@Base+0x2a14>
   19d10:	mov	r3, #0
   19d14:	mov	r4, #161	; 0xa1
   19d18:	ldr	r0, [pc, r0]
   19d1c:	mov	r7, r0
   19d20:	strb	r3, [r7, r5]!
   19d24:	strb	r4, [r7, #3]
   19d28:	strb	r3, [r7, #2]
   19d2c:	strb	r3, [r7, #1]
   19d30:	stm	sl, {r2, ip}
   19d34:	ldr	r4, [r9, #4]
   19d38:	ldr	r1, [pc, #2868]	; 1a874 <__generate_code_for_binary_boolean_expression@@Base+0x2a24>
   19d3c:	adds	r3, r5, #8
   19d40:	adc	r7, r6, #0
   19d44:	ldr	r1, [pc, r1]
   19d48:	subs	r1, r1, r3
   19d4c:	sbcs	r1, r4, r7
   19d50:	bcs	19ddc <__generate_code_for_binary_boolean_expression@@Base+0x1f8c>
   19d54:	mov	r1, #7
   19d58:	orr	r1, r1, #131072	; 0x20000
   19d5c:	adds	r1, r5, r1
   19d60:	adc	r2, r6, #0
   19d64:	mvn	r3, #0
   19d68:	and	r5, r2, r3
   19d6c:	mov	r2, #16646144	; 0xfe0000
   19d70:	orr	r2, r2, #-16777216	; 0xff000000
   19d74:	ldr	r4, [pc, #2812]	; 1a878 <__generate_code_for_binary_boolean_expression@@Base+0x2a28>
   19d78:	and	r6, r1, r2
   19d7c:	mov	r1, r6
   19d80:	add	r4, pc, r4
   19d84:	bl	11f38 <realloc@plt>
   19d88:	str	r6, [r9]
   19d8c:	str	r5, [r9, #4]
   19d90:	str	r0, [r4]
   19d94:	ldrb	r1, [r8]
   19d98:	ldr	ip, [sl, #4]
   19d9c:	ldr	r2, [pc, #2776]	; 1a87c <__generate_code_for_binary_boolean_expression@@Base+0x2a2c>
   19da0:	mov	r7, r0
   19da4:	mov	r3, #9
   19da8:	ldr	r2, [pc, r2]
   19dac:	strb	r3, [r7, r2]!
   19db0:	mov	r3, #0
   19db4:	strb	r3, [r7, #3]
   19db8:	strb	r3, [r7, #2]
   19dbc:	strb	r3, [r7, #1]
   19dc0:	adds	r3, r2, #4
   19dc4:	adc	r5, ip, #0
   19dc8:	mov	r7, #1
   19dcc:	cmp	r1, #1
   19dd0:	stm	sl, {r3, r5}
   19dd4:	beq	19e04 <__generate_code_for_binary_boolean_expression@@Base+0x1fb4>
   19dd8:	b	19f34 <__generate_code_for_binary_boolean_expression@@Base+0x20e4>
   19ddc:	mov	r3, r0
   19de0:	mov	r1, #9
   19de4:	strb	r1, [r3, r2]!
   19de8:	mov	r1, #0
   19dec:	strb	r1, [r3, #3]
   19df0:	strb	r1, [r3, #2]
   19df4:	strb	r1, [r3, #1]
   19df8:	adds	r3, r2, #4
   19dfc:	adc	r5, ip, #0
   19e00:	stm	sl, {r3, r5}
   19e04:	ldr	r6, [r9, #4]
   19e08:	ldr	r4, [pc, #2672]	; 1a880 <__generate_code_for_binary_boolean_expression@@Base+0x2a30>
   19e0c:	adds	r1, r2, #8
   19e10:	adc	r7, ip, #0
   19e14:	ldr	r4, [pc, r4]
   19e18:	subs	r1, r4, r1
   19e1c:	sbcs	r1, r6, r7
   19e20:	bcs	1a2f8 <__generate_code_for_binary_boolean_expression@@Base+0x24a8>
   19e24:	mov	r1, #7
   19e28:	orr	r1, r1, #131072	; 0x20000
   19e2c:	adds	r1, r2, r1
   19e30:	adc	r2, ip, #0
   19e34:	mvn	r3, #0
   19e38:	and	r5, r2, r3
   19e3c:	mov	r2, #16646144	; 0xfe0000
   19e40:	orr	r2, r2, #-16777216	; 0xff000000
   19e44:	ldr	r4, [pc, #2616]	; 1a884 <__generate_code_for_binary_boolean_expression@@Base+0x2a34>
   19e48:	and	r6, r1, r2
   19e4c:	mov	r1, r6
   19e50:	add	r4, pc, r4
   19e54:	bl	11f38 <realloc@plt>
   19e58:	str	r6, [r9]
   19e5c:	str	r5, [r9, #4]
   19e60:	str	r0, [r4]
   19e64:	ldrb	r2, [r8]
   19e68:	ldr	r5, [sl, #4]
   19e6c:	ldr	r3, [pc, #2580]	; 1a888 <__generate_code_for_binary_boolean_expression@@Base+0x2a38>
   19e70:	mov	r7, r0
   19e74:	mov	r1, #0
   19e78:	ldr	r3, [pc, r3]
   19e7c:	adds	r6, r3, #4
   19e80:	strb	r1, [r7, r3]!
   19e84:	strb	r1, [r7, #3]
   19e88:	strb	r1, [r7, #2]
   19e8c:	strb	r1, [r7, #1]
   19e90:	adc	r1, r5, #0
   19e94:	mov	r7, #1
   19e98:	cmp	r2, #1
   19e9c:	str	r6, [sl]
   19ea0:	str	r1, [sl, #4]
   19ea4:	bne	19f5c <__generate_code_for_binary_boolean_expression@@Base+0x210c>
   19ea8:	b	1a320 <__generate_code_for_binary_boolean_expression@@Base+0x24d0>
   19eac:	ldr	r3, [r0, r2]
   19eb0:	adds	r4, r5, #8
   19eb4:	adc	r7, r6, #0
   19eb8:	cmp	r3, #9
   19ebc:	stm	sl, {r4, r7}
   19ec0:	bne	1a5e4 <__generate_code_for_binary_boolean_expression@@Base+0x2794>
   19ec4:	ldr	r3, [pc, #2444]	; 1a858 <__generate_code_for_binary_boolean_expression@@Base+0x2a08>
   19ec8:	adds	r4, r5, #20
   19ecc:	adc	r7, r6, #0
   19ed0:	add	r3, pc, r3
   19ed4:	add	r6, r0, r5
   19ed8:	ldrb	r3, [r3]
   19edc:	ldr	r6, [r6, #16]
   19ee0:	stm	sl, {r4, r7}
   19ee4:	eor	r3, r3, #1
   19ee8:	add	r7, r6, r3
   19eec:	mov	r6, r0
   19ef0:	mov	r3, #0
   19ef4:	strb	r3, [r6, r5]!
   19ef8:	mov	r5, #161	; 0xa1
   19efc:	strb	r5, [r6, #3]
   19f00:	strb	r3, [r6, #2]
   19f04:	strb	r3, [r6, #1]
   19f08:	stm	sl, {r2, ip}
   19f0c:	mov	r3, r0
   19f10:	mov	r1, #9
   19f14:	strb	r1, [r3, r2]!
   19f18:	mov	r1, #0
   19f1c:	strb	r1, [r3, #3]
   19f20:	strb	r1, [r3, #2]
   19f24:	strb	r1, [r3, #1]
   19f28:	adds	r3, r2, #4
   19f2c:	adc	r5, ip, #0
   19f30:	stm	sl, {r3, r5}
   19f34:	mov	r2, r0
   19f38:	mov	r1, #0
   19f3c:	strb	r1, [r2, r3]!
   19f40:	adds	r6, r3, #4
   19f44:	strb	r1, [r2, #3]
   19f48:	strb	r1, [r2, #2]
   19f4c:	strb	r1, [r2, #1]
   19f50:	adc	r1, r5, #0
   19f54:	str	r6, [sl]
   19f58:	str	r1, [sl, #4]
   19f5c:	mov	r3, r0
   19f60:	mov	r2, #0
   19f64:	strb	r2, [r3, r6]!
   19f68:	strb	r2, [r3, #3]
   19f6c:	strb	r2, [r3, #2]
   19f70:	strb	r2, [r3, #1]
   19f74:	adds	r2, r6, #4
   19f78:	adc	r3, r1, #0
   19f7c:	strd	r2, [sl]
   19f80:	lsr	r1, r7, #24
   19f84:	strb	r7, [r0, r2]!
   19f88:	lsr	r6, r7, #16
   19f8c:	lsr	r5, r7, #8
   19f90:	strb	r1, [r0, #3]
   19f94:	strb	r6, [r0, #2]
   19f98:	strb	r5, [r0, #1]
   19f9c:	ldrb	r0, [r8]
   19fa0:	adds	r4, r2, #4
   19fa4:	adc	r5, r3, #0
   19fa8:	cmp	r0, #0
   19fac:	strd	r4, [sl]
   19fb0:	beq	1a064 <__generate_code_for_binary_boolean_expression@@Base+0x2214>
   19fb4:	ldr	r9, [pc, #2284]	; 1a8a8 <__generate_code_for_binary_boolean_expression@@Base+0x2a58>
   19fb8:	adds	r0, r2, #8
   19fbc:	adc	r1, r3, #0
   19fc0:	add	r9, pc, r9
   19fc4:	ldr	r7, [r9, #4]
   19fc8:	ldr	r6, [pc, #2268]	; 1a8ac <__generate_code_for_binary_boolean_expression@@Base+0x2a5c>
   19fcc:	ldr	r6, [pc, r6]
   19fd0:	subs	r0, r6, r0
   19fd4:	sbcs	r0, r7, r1
   19fd8:	bcs	1a230 <__generate_code_for_binary_boolean_expression@@Base+0x23e0>
   19fdc:	mov	r0, #7
   19fe0:	orr	r0, r0, #131072	; 0x20000
   19fe4:	adds	r0, r2, r0
   19fe8:	adc	r1, r3, #0
   19fec:	mvn	r2, #0
   19ff0:	and	r5, r1, r2
   19ff4:	mov	r1, #16646144	; 0xfe0000
   19ff8:	orr	r1, r1, #-16777216	; 0xff000000
   19ffc:	ldr	r4, [pc, #2268]	; 1a8e0 <__generate_code_for_binary_boolean_expression@@Base+0x2a90>
   1a000:	and	r6, r0, r1
   1a004:	ldr	r0, [pc, #2264]	; 1a8e4 <__generate_code_for_binary_boolean_expression@@Base+0x2a94>
   1a008:	mov	r1, r6
   1a00c:	add	r4, pc, r4
   1a010:	ldr	r0, [pc, r0]
   1a014:	bl	11f38 <realloc@plt>
   1a018:	str	r6, [r9]
   1a01c:	str	r5, [r9, #4]
   1a020:	str	r0, [r4]
   1a024:	ldrb	r1, [r8]
   1a028:	ldr	r5, [sl, #4]
   1a02c:	ldr	r4, [pc, #2228]	; 1a8e8 <__generate_code_for_binary_boolean_expression@@Base+0x2a98>
   1a030:	mov	r3, r0
   1a034:	mov	r2, #0
   1a038:	ldr	r4, [pc, r4]
   1a03c:	strb	r2, [r3, r4]!
   1a040:	strb	r2, [r3, #3]
   1a044:	strb	r2, [r3, #2]
   1a048:	strb	r2, [r3, #1]
   1a04c:	adds	r2, r4, #4
   1a050:	adc	r3, r5, #0
   1a054:	cmp	r1, #0
   1a058:	strd	r2, [sl]
   1a05c:	beq	1a090 <__generate_code_for_binary_boolean_expression@@Base+0x2240>
   1a060:	b	1a25c <__generate_code_for_binary_boolean_expression@@Base+0x240c>
   1a064:	ldr	r0, [pc, #2104]	; 1a8a4 <__generate_code_for_binary_boolean_expression@@Base+0x2a54>
   1a068:	adds	r2, r2, #8
   1a06c:	mov	r1, #0
   1a070:	adc	r3, r3, #0
   1a074:	ldr	r0, [pc, r0]
   1a078:	mov	r7, r0
   1a07c:	strb	r1, [r7, r4]!
   1a080:	strb	r1, [r7, #3]
   1a084:	strb	r1, [r7, #2]
   1a088:	strb	r1, [r7, #1]
   1a08c:	strd	r2, [sl]
   1a090:	mov	r7, r0
   1a094:	mov	r1, #0
   1a098:	strb	r1, [r7, r2]!
   1a09c:	strb	r1, [r7, #3]
   1a0a0:	strb	r1, [r7, #2]
   1a0a4:	strb	r1, [r7, #1]
   1a0a8:	adds	r1, r2, #4
   1a0ac:	adc	r5, r3, #0
   1a0b0:	stm	sl, {r1, r5}
   1a0b4:	mov	r3, r0
   1a0b8:	mov	r2, #0
   1a0bc:	strb	r2, [r3, r1]!
   1a0c0:	strb	r2, [r3, #3]
   1a0c4:	strb	r2, [r3, #2]
   1a0c8:	strb	r2, [r3, #1]
   1a0cc:	adds	r2, r1, #4
   1a0d0:	adc	r3, r5, #0
   1a0d4:	strd	r2, [sl]
   1a0d8:	mov	r7, r0
   1a0dc:	mov	r1, #0
   1a0e0:	strb	r1, [r7, r2]!
   1a0e4:	strb	r1, [r7, #3]
   1a0e8:	strb	r1, [r7, #2]
   1a0ec:	strb	r1, [r7, #1]
   1a0f0:	adds	r1, r2, #4
   1a0f4:	adc	r5, r3, #0
   1a0f8:	stm	sl, {r1, r5}
   1a0fc:	mov	r3, r0
   1a100:	mov	r2, #0
   1a104:	strb	r2, [r3, r1]!
   1a108:	adds	r4, r1, #4
   1a10c:	strb	r2, [r3, #3]
   1a110:	strb	r2, [r3, #2]
   1a114:	strb	r2, [r3, #1]
   1a118:	adc	r3, r5, #0
   1a11c:	str	r4, [sl]
   1a120:	str	r3, [sl, #4]
   1a124:	mov	r2, r0
   1a128:	mov	r1, #0
   1a12c:	strb	r1, [r2, r4]!
   1a130:	strb	r1, [r2, #3]
   1a134:	strb	r1, [r2, #2]
   1a138:	strb	r1, [r2, #1]
   1a13c:	adds	r2, r4, #4
   1a140:	adc	r1, r3, #0
   1a144:	str	r2, [sl]
   1a148:	str	r1, [sl, #4]
   1a14c:	mov	r3, r0
   1a150:	mov	r4, #0
   1a154:	strb	r4, [r3, r2]!
   1a158:	mov	r7, #163	; 0xa3
   1a15c:	strb	r7, [r3, #3]
   1a160:	strb	r4, [r3, #2]
   1a164:	strb	r4, [r3, #1]
   1a168:	ldrb	r7, [r8]
   1a16c:	adds	r6, r2, #4
   1a170:	adc	r3, r1, #0
   1a174:	cmp	r7, #1
   1a178:	str	r6, [sl]
   1a17c:	str	r3, [sl, #4]
   1a180:	bne	1a1f4 <__generate_code_for_binary_boolean_expression@@Base+0x23a4>
   1a184:	ldr	r8, [pc, #1852]	; 1a8c8 <__generate_code_for_binary_boolean_expression@@Base+0x2a78>
   1a188:	adds	lr, r2, #8
   1a18c:	adc	ip, r1, #0
   1a190:	add	r8, pc, r8
   1a194:	ldr	r5, [r8, #4]
   1a198:	ldr	r7, [pc, #1836]	; 1a8cc <__generate_code_for_binary_boolean_expression@@Base+0x2a7c>
   1a19c:	ldr	r7, [pc, r7]
   1a1a0:	subs	r7, r7, lr
   1a1a4:	sbcs	r7, r5, ip
   1a1a8:	bcs	1a1f4 <__generate_code_for_binary_boolean_expression@@Base+0x23a4>
   1a1ac:	mov	r3, #7
   1a1b0:	orr	r3, r3, #131072	; 0x20000
   1a1b4:	adds	r2, r2, r3
   1a1b8:	adc	r1, r1, #0
   1a1bc:	mvn	r3, #0
   1a1c0:	and	r7, r1, r3
   1a1c4:	mov	r1, #16646144	; 0xfe0000
   1a1c8:	orr	r1, r1, #-16777216	; 0xff000000
   1a1cc:	ldr	r5, [pc, #1788]	; 1a8d0 <__generate_code_for_binary_boolean_expression@@Base+0x2a80>
   1a1d0:	and	r6, r2, r1
   1a1d4:	mov	r1, r6
   1a1d8:	add	r5, pc, r5
   1a1dc:	bl	11f38 <realloc@plt>
   1a1e0:	strd	r6, [r8]
   1a1e4:	str	r0, [r5]
   1a1e8:	ldr	r3, [sl, #4]
   1a1ec:	ldr	r6, [pc, #1760]	; 1a8d4 <__generate_code_for_binary_boolean_expression@@Base+0x2a84>
   1a1f0:	ldr	r6, [pc, r6]
   1a1f4:	ldr	r0, [pc, #1756]	; 1a8d8 <__generate_code_for_binary_boolean_expression@@Base+0x2a88>
   1a1f8:	ldr	r1, [pc, #1756]	; 1a8dc <__generate_code_for_binary_boolean_expression@@Base+0x2a8c>
   1a1fc:	adds	r2, r6, #4
   1a200:	add	r0, pc, r0
   1a204:	adc	r3, r3, #0
   1a208:	ldr	r1, [pc, r1]
   1a20c:	strb	r4, [r1, r6]!
   1a210:	strb	r4, [r1, #3]
   1a214:	strb	r4, [r1, #2]
   1a218:	strb	r4, [r1, #1]
   1a21c:	mov	r1, #1
   1a220:	strd	r2, [sl]
   1a224:	strb	r1, [r0]
   1a228:	sub	sp, fp, #28
   1a22c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a230:	ldr	r0, [pc, #1656]	; 1a8b0 <__generate_code_for_binary_boolean_expression@@Base+0x2a60>
   1a234:	adds	r2, r2, #8
   1a238:	mov	r1, #0
   1a23c:	adc	r3, r3, #0
   1a240:	ldr	r0, [pc, r0]
   1a244:	mov	r7, r0
   1a248:	strb	r1, [r7, r4]!
   1a24c:	strb	r1, [r7, #3]
   1a250:	strb	r1, [r7, #2]
   1a254:	strb	r1, [r7, #1]
   1a258:	strd	r2, [sl]
   1a25c:	ldr	r6, [r9, #4]
   1a260:	ldr	r1, [pc, #1668]	; 1a8ec <__generate_code_for_binary_boolean_expression@@Base+0x2a9c>
   1a264:	adds	ip, r4, #8
   1a268:	adc	r7, r5, #0
   1a26c:	ldr	r1, [pc, r1]
   1a270:	subs	r1, r1, ip
   1a274:	sbcs	r1, r6, r7
   1a278:	bcs	1a3c4 <__generate_code_for_binary_boolean_expression@@Base+0x2574>
   1a27c:	mov	r1, #7
   1a280:	orr	r1, r1, #131072	; 0x20000
   1a284:	adds	r1, r4, r1
   1a288:	adc	r2, r5, #0
   1a28c:	mvn	r3, #0
   1a290:	and	r5, r2, r3
   1a294:	mov	r2, #16646144	; 0xfe0000
   1a298:	orr	r2, r2, #-16777216	; 0xff000000
   1a29c:	ldr	r6, [pc, #1612]	; 1a8f0 <__generate_code_for_binary_boolean_expression@@Base+0x2aa0>
   1a2a0:	and	r4, r1, r2
   1a2a4:	mov	r1, r4
   1a2a8:	add	r6, pc, r6
   1a2ac:	bl	11f38 <realloc@plt>
   1a2b0:	str	r0, [r6]
   1a2b4:	strd	r4, [r9]
   1a2b8:	ldrb	r7, [r8]
   1a2bc:	ldr	r3, [sl, #4]
   1a2c0:	ldr	r2, [pc, #1580]	; 1a8f4 <__generate_code_for_binary_boolean_expression@@Base+0x2aa4>
   1a2c4:	mov	r6, r0
   1a2c8:	mov	r1, #0
   1a2cc:	ldr	r2, [pc, r2]
   1a2d0:	strb	r1, [r6, r2]!
   1a2d4:	strb	r1, [r6, #3]
   1a2d8:	strb	r1, [r6, #2]
   1a2dc:	strb	r1, [r6, #1]
   1a2e0:	adds	r1, r2, #4
   1a2e4:	adc	r5, r3, #0
   1a2e8:	cmp	r7, #1
   1a2ec:	stm	sl, {r1, r5}
   1a2f0:	bne	1a0b4 <__generate_code_for_binary_boolean_expression@@Base+0x2264>
   1a2f4:	b	1a3e8 <__generate_code_for_binary_boolean_expression@@Base+0x2598>
   1a2f8:	mov	r2, r0
   1a2fc:	mov	r1, #0
   1a300:	strb	r1, [r2, r3]!
   1a304:	adds	r6, r3, #4
   1a308:	strb	r1, [r2, #3]
   1a30c:	strb	r1, [r2, #2]
   1a310:	strb	r1, [r2, #1]
   1a314:	adc	r1, r5, #0
   1a318:	str	r6, [sl]
   1a31c:	str	r1, [sl, #4]
   1a320:	ldr	r4, [r9, #4]
   1a324:	ldr	r2, [pc, #1376]	; 1a88c <__generate_code_for_binary_boolean_expression@@Base+0x2a3c>
   1a328:	adds	ip, r3, #8
   1a32c:	adc	r7, r5, #0
   1a330:	ldr	r2, [pc, r2]
   1a334:	subs	r2, r2, ip
   1a338:	sbcs	r2, r4, r7
   1a33c:	bcs	1a488 <__generate_code_for_binary_boolean_expression@@Base+0x2638>
   1a340:	mov	r1, #7
   1a344:	orr	r1, r1, #131072	; 0x20000
   1a348:	adds	r1, r3, r1
   1a34c:	adc	r2, r5, #0
   1a350:	mvn	r3, #0
   1a354:	and	r5, r2, r3
   1a358:	mov	r2, #16646144	; 0xfe0000
   1a35c:	orr	r2, r2, #-16777216	; 0xff000000
   1a360:	ldr	r4, [pc, #1320]	; 1a890 <__generate_code_for_binary_boolean_expression@@Base+0x2a40>
   1a364:	and	r6, r1, r2
   1a368:	mov	r1, r6
   1a36c:	add	r4, pc, r4
   1a370:	bl	11f38 <realloc@plt>
   1a374:	str	r6, [r9]
   1a378:	str	r5, [r9, #4]
   1a37c:	str	r0, [r4]
   1a380:	ldrb	r5, [r8]
   1a384:	ldr	r1, [sl, #4]
   1a388:	ldr	r6, [pc, #1284]	; 1a894 <__generate_code_for_binary_boolean_expression@@Base+0x2a44>
   1a38c:	mov	r3, r0
   1a390:	mov	r2, #0
   1a394:	mov	r7, #1
   1a398:	ldr	r6, [pc, r6]
   1a39c:	strb	r2, [r3, r6]!
   1a3a0:	strb	r2, [r3, #3]
   1a3a4:	strb	r2, [r3, #2]
   1a3a8:	strb	r2, [r3, #1]
   1a3ac:	adds	r2, r6, #4
   1a3b0:	adc	r3, r1, #0
   1a3b4:	cmp	r5, #1
   1a3b8:	strd	r2, [sl]
   1a3bc:	bne	19f80 <__generate_code_for_binary_boolean_expression@@Base+0x2130>
   1a3c0:	b	1a4ac <__generate_code_for_binary_boolean_expression@@Base+0x265c>
   1a3c4:	mov	r7, r0
   1a3c8:	mov	r1, #0
   1a3cc:	strb	r1, [r7, r2]!
   1a3d0:	strb	r1, [r7, #3]
   1a3d4:	strb	r1, [r7, #2]
   1a3d8:	strb	r1, [r7, #1]
   1a3dc:	adds	r1, r2, #4
   1a3e0:	adc	r5, r3, #0
   1a3e4:	stm	sl, {r1, r5}
   1a3e8:	ldr	r4, [r9, #4]
   1a3ec:	ldr	r6, [pc, #1284]	; 1a8f8 <__generate_code_for_binary_boolean_expression@@Base+0x2aa8>
   1a3f0:	adds	r7, r2, #8
   1a3f4:	adc	ip, r3, #0
   1a3f8:	ldr	r6, [pc, r6]
   1a3fc:	subs	r7, r6, r7
   1a400:	sbcs	r7, r4, ip
   1a404:	bcs	1a520 <__generate_code_for_binary_boolean_expression@@Base+0x26d0>
   1a408:	mov	r1, #7
   1a40c:	orr	r1, r1, #131072	; 0x20000
   1a410:	adds	r1, r2, r1
   1a414:	adc	r2, r3, #0
   1a418:	mvn	r3, #0
   1a41c:	and	r5, r2, r3
   1a420:	mov	r2, #16646144	; 0xfe0000
   1a424:	orr	r2, r2, #-16777216	; 0xff000000
   1a428:	ldr	r4, [pc, #1228]	; 1a8fc <__generate_code_for_binary_boolean_expression@@Base+0x2aac>
   1a42c:	and	r6, r1, r2
   1a430:	mov	r1, r6
   1a434:	add	r4, pc, r4
   1a438:	bl	11f38 <realloc@plt>
   1a43c:	str	r6, [r9]
   1a440:	str	r5, [r9, #4]
   1a444:	str	r0, [r4]
   1a448:	ldrb	r7, [r8]
   1a44c:	ldr	r5, [sl, #4]
   1a450:	ldr	r1, [pc, #1192]	; 1a900 <__generate_code_for_binary_boolean_expression@@Base+0x2ab0>
   1a454:	mov	r3, r0
   1a458:	mov	r2, #0
   1a45c:	ldr	r1, [pc, r1]
   1a460:	strb	r2, [r3, r1]!
   1a464:	strb	r2, [r3, #3]
   1a468:	strb	r2, [r3, #2]
   1a46c:	strb	r2, [r3, #1]
   1a470:	adds	r2, r1, #4
   1a474:	adc	r3, r5, #0
   1a478:	cmp	r7, #1
   1a47c:	strd	r2, [sl]
   1a480:	bne	1a0d8 <__generate_code_for_binary_boolean_expression@@Base+0x2288>
   1a484:	b	1a544 <__generate_code_for_binary_boolean_expression@@Base+0x26f4>
   1a488:	mov	r3, r0
   1a48c:	mov	r2, #0
   1a490:	strb	r2, [r3, r6]!
   1a494:	strb	r2, [r3, #3]
   1a498:	strb	r2, [r3, #2]
   1a49c:	strb	r2, [r3, #1]
   1a4a0:	adds	r2, r6, #4
   1a4a4:	adc	r3, r1, #0
   1a4a8:	strd	r2, [sl]
   1a4ac:	ldr	r4, [r9, #4]
   1a4b0:	ldr	r5, [pc, #992]	; 1a898 <__generate_code_for_binary_boolean_expression@@Base+0x2a48>
   1a4b4:	adds	lr, r6, #8
   1a4b8:	adc	ip, r1, #0
   1a4bc:	mov	r7, #1
   1a4c0:	ldr	r5, [pc, r5]
   1a4c4:	subs	r5, r5, lr
   1a4c8:	sbcs	r5, r4, ip
   1a4cc:	bcs	19f80 <__generate_code_for_binary_boolean_expression@@Base+0x2130>
   1a4d0:	mov	r2, #7
   1a4d4:	orr	r2, r2, #131072	; 0x20000
   1a4d8:	adds	r2, r6, r2
   1a4dc:	adc	r1, r1, #0
   1a4e0:	mvn	r3, #0
   1a4e4:	and	r5, r1, r3
   1a4e8:	mov	r1, #16646144	; 0xfe0000
   1a4ec:	orr	r1, r1, #-16777216	; 0xff000000
   1a4f0:	ldr	r4, [pc, #932]	; 1a89c <__generate_code_for_binary_boolean_expression@@Base+0x2a4c>
   1a4f4:	and	r6, r2, r1
   1a4f8:	mov	r1, r6
   1a4fc:	add	r4, pc, r4
   1a500:	bl	11f38 <realloc@plt>
   1a504:	str	r6, [r9]
   1a508:	str	r5, [r9, #4]
   1a50c:	str	r0, [r4]
   1a510:	ldr	r3, [sl, #4]
   1a514:	ldr	r2, [pc, #900]	; 1a8a0 <__generate_code_for_binary_boolean_expression@@Base+0x2a50>
   1a518:	ldr	r2, [pc, r2]
   1a51c:	b	19f80 <__generate_code_for_binary_boolean_expression@@Base+0x2130>
   1a520:	mov	r3, r0
   1a524:	mov	r2, #0
   1a528:	strb	r2, [r3, r1]!
   1a52c:	strb	r2, [r3, #3]
   1a530:	strb	r2, [r3, #2]
   1a534:	strb	r2, [r3, #1]
   1a538:	adds	r2, r1, #4
   1a53c:	adc	r3, r5, #0
   1a540:	strd	r2, [sl]
   1a544:	ldr	r4, [r9, #4]
   1a548:	ldr	r6, [pc, #948]	; 1a904 <__generate_code_for_binary_boolean_expression@@Base+0x2ab4>
   1a54c:	adds	r7, r1, #8
   1a550:	adc	ip, r5, #0
   1a554:	ldr	r6, [pc, r6]
   1a558:	subs	r7, r6, r7
   1a55c:	sbcs	r7, r4, ip
   1a560:	bcs	1a60c <__generate_code_for_binary_boolean_expression@@Base+0x27bc>
   1a564:	mov	r2, #7
   1a568:	orr	r2, r2, #131072	; 0x20000
   1a56c:	adds	r1, r1, r2
   1a570:	adc	r2, r5, #0
   1a574:	mvn	r3, #0
   1a578:	and	r5, r2, r3
   1a57c:	mov	r2, #16646144	; 0xfe0000
   1a580:	orr	r2, r2, #-16777216	; 0xff000000
   1a584:	ldr	r4, [pc, #892]	; 1a908 <__generate_code_for_binary_boolean_expression@@Base+0x2ab8>
   1a588:	and	r6, r1, r2
   1a58c:	mov	r1, r6
   1a590:	add	r4, pc, r4
   1a594:	bl	11f38 <realloc@plt>
   1a598:	str	r6, [r9]
   1a59c:	str	r5, [r9, #4]
   1a5a0:	str	r0, [r4]
   1a5a4:	ldrb	r7, [r8]
   1a5a8:	ldr	r3, [sl, #4]
   1a5ac:	ldr	r2, [pc, #856]	; 1a90c <__generate_code_for_binary_boolean_expression@@Base+0x2abc>
   1a5b0:	mov	r6, r0
   1a5b4:	mov	r1, #0
   1a5b8:	ldr	r2, [pc, r2]
   1a5bc:	strb	r1, [r6, r2]!
   1a5c0:	strb	r1, [r6, #3]
   1a5c4:	strb	r1, [r6, #2]
   1a5c8:	strb	r1, [r6, #1]
   1a5cc:	adds	r1, r2, #4
   1a5d0:	adc	r5, r3, #0
   1a5d4:	cmp	r7, #1
   1a5d8:	stm	sl, {r1, r5}
   1a5dc:	bne	1a0fc <__generate_code_for_binary_boolean_expression@@Base+0x22ac>
   1a5e0:	b	1a630 <__generate_code_for_binary_boolean_expression@@Base+0x27e0>
   1a5e4:	ldr	r1, [pc, #616]	; 1a854 <__generate_code_for_binary_boolean_expression@@Base+0x2a04>
   1a5e8:	add	r1, pc, r1
   1a5ec:	ldr	r0, [pc, #600]	; 1a84c <__generate_code_for_binary_boolean_expression@@Base+0x29fc>
   1a5f0:	ldr	r0, [pc, r0]
   1a5f4:	ldr	r0, [r0]
   1a5f8:	ldr	r2, [pc, #592]	; 1a850 <__generate_code_for_binary_boolean_expression@@Base+0x2a00>
   1a5fc:	ldr	r2, [pc, r2]
   1a600:	sub	sp, fp, #28
   1a604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a608:	b	11fd4 <fprintf@plt>
   1a60c:	mov	r7, r0
   1a610:	mov	r1, #0
   1a614:	strb	r1, [r7, r2]!
   1a618:	strb	r1, [r7, #3]
   1a61c:	strb	r1, [r7, #2]
   1a620:	strb	r1, [r7, #1]
   1a624:	adds	r1, r2, #4
   1a628:	adc	r5, r3, #0
   1a62c:	stm	sl, {r1, r5}
   1a630:	ldr	r4, [r9, #4]
   1a634:	ldr	r6, [pc, #724]	; 1a910 <__generate_code_for_binary_boolean_expression@@Base+0x2ac0>
   1a638:	adds	r7, r2, #8
   1a63c:	adc	ip, r3, #0
   1a640:	ldr	r6, [pc, r6]
   1a644:	subs	r7, r6, r7
   1a648:	sbcs	r7, r4, ip
   1a64c:	bcs	1a6d4 <__generate_code_for_binary_boolean_expression@@Base+0x2884>
   1a650:	mov	r1, #7
   1a654:	orr	r1, r1, #131072	; 0x20000
   1a658:	adds	r1, r2, r1
   1a65c:	adc	r2, r3, #0
   1a660:	mvn	r3, #0
   1a664:	and	r5, r2, r3
   1a668:	mov	r2, #16646144	; 0xfe0000
   1a66c:	orr	r2, r2, #-16777216	; 0xff000000
   1a670:	ldr	r4, [pc, #668]	; 1a914 <__generate_code_for_binary_boolean_expression@@Base+0x2ac4>
   1a674:	and	r6, r1, r2
   1a678:	mov	r1, r6
   1a67c:	add	r4, pc, r4
   1a680:	bl	11f38 <realloc@plt>
   1a684:	str	r6, [r9]
   1a688:	str	r5, [r9, #4]
   1a68c:	str	r0, [r4]
   1a690:	ldrb	r2, [r8]
   1a694:	ldr	r5, [sl, #4]
   1a698:	ldr	r1, [pc, #632]	; 1a918 <__generate_code_for_binary_boolean_expression@@Base+0x2ac8>
   1a69c:	mov	r7, r0
   1a6a0:	mov	r3, #0
   1a6a4:	ldr	r1, [pc, r1]
   1a6a8:	adds	r4, r1, #4
   1a6ac:	strb	r3, [r7, r1]!
   1a6b0:	strb	r3, [r7, #3]
   1a6b4:	strb	r3, [r7, #2]
   1a6b8:	strb	r3, [r7, #1]
   1a6bc:	adc	r3, r5, #0
   1a6c0:	cmp	r2, #1
   1a6c4:	str	r4, [sl]
   1a6c8:	str	r3, [sl, #4]
   1a6cc:	bne	1a124 <__generate_code_for_binary_boolean_expression@@Base+0x22d4>
   1a6d0:	b	1a6fc <__generate_code_for_binary_boolean_expression@@Base+0x28ac>
   1a6d4:	mov	r3, r0
   1a6d8:	mov	r2, #0
   1a6dc:	strb	r2, [r3, r1]!
   1a6e0:	adds	r4, r1, #4
   1a6e4:	strb	r2, [r3, #3]
   1a6e8:	strb	r2, [r3, #2]
   1a6ec:	strb	r2, [r3, #1]
   1a6f0:	adc	r3, r5, #0
   1a6f4:	str	r4, [sl]
   1a6f8:	str	r3, [sl, #4]
   1a6fc:	ldr	r6, [r9, #4]
   1a700:	ldr	r2, [pc, #532]	; 1a91c <__generate_code_for_binary_boolean_expression@@Base+0x2acc>
   1a704:	adds	ip, r1, #8
   1a708:	adc	r7, r5, #0
   1a70c:	ldr	r2, [pc, r2]
   1a710:	subs	r2, r2, ip
   1a714:	sbcs	r2, r6, r7
   1a718:	bcs	1a7a0 <__generate_code_for_binary_boolean_expression@@Base+0x2950>
   1a71c:	mov	r2, #7
   1a720:	orr	r2, r2, #131072	; 0x20000
   1a724:	adds	r1, r1, r2
   1a728:	adc	r2, r5, #0
   1a72c:	mvn	r3, #0
   1a730:	and	r5, r2, r3
   1a734:	mov	r2, #16646144	; 0xfe0000
   1a738:	orr	r2, r2, #-16777216	; 0xff000000
   1a73c:	ldr	r4, [pc, #368]	; 1a8b4 <__generate_code_for_binary_boolean_expression@@Base+0x2a64>
   1a740:	and	r6, r1, r2
   1a744:	mov	r1, r6
   1a748:	add	r4, pc, r4
   1a74c:	bl	11f38 <realloc@plt>
   1a750:	str	r6, [r9]
   1a754:	str	r5, [r9, #4]
   1a758:	str	r0, [r4]
   1a75c:	ldrb	r7, [r8]
   1a760:	ldr	r3, [sl, #4]
   1a764:	ldr	r4, [pc, #332]	; 1a8b8 <__generate_code_for_binary_boolean_expression@@Base+0x2a68>
   1a768:	mov	r2, r0
   1a76c:	mov	r1, #0
   1a770:	ldr	r4, [pc, r4]
   1a774:	strb	r1, [r2, r4]!
   1a778:	strb	r1, [r2, #3]
   1a77c:	strb	r1, [r2, #2]
   1a780:	strb	r1, [r2, #1]
   1a784:	adds	r2, r4, #4
   1a788:	adc	r1, r3, #0
   1a78c:	cmp	r7, #0
   1a790:	str	r2, [sl]
   1a794:	str	r1, [sl, #4]
   1a798:	beq	1a14c <__generate_code_for_binary_boolean_expression@@Base+0x22fc>
   1a79c:	b	1a7c8 <__generate_code_for_binary_boolean_expression@@Base+0x2978>
   1a7a0:	mov	r2, r0
   1a7a4:	mov	r1, #0
   1a7a8:	strb	r1, [r2, r4]!
   1a7ac:	strb	r1, [r2, #3]
   1a7b0:	strb	r1, [r2, #2]
   1a7b4:	strb	r1, [r2, #1]
   1a7b8:	adds	r2, r4, #4
   1a7bc:	adc	r1, r3, #0
   1a7c0:	str	r2, [sl]
   1a7c4:	str	r1, [sl, #4]
   1a7c8:	ldr	r5, [r9, #4]
   1a7cc:	ldr	r6, [pc, #232]	; 1a8bc <__generate_code_for_binary_boolean_expression@@Base+0x2a6c>
   1a7d0:	adds	r7, r4, #8
   1a7d4:	adc	ip, r3, #0
   1a7d8:	ldr	r6, [pc, r6]
   1a7dc:	subs	r7, r6, r7
   1a7e0:	sbcs	r7, r5, ip
   1a7e4:	bcs	1a14c <__generate_code_for_binary_boolean_expression@@Base+0x22fc>
   1a7e8:	mov	r1, #7
   1a7ec:	orr	r1, r1, #131072	; 0x20000
   1a7f0:	adds	r1, r4, r1
   1a7f4:	adc	r2, r3, #0
   1a7f8:	mvn	r3, #0
   1a7fc:	and	r7, r2, r3
   1a800:	mov	r2, #16646144	; 0xfe0000
   1a804:	orr	r2, r2, #-16777216	; 0xff000000
   1a808:	ldr	r5, [pc, #176]	; 1a8c0 <__generate_code_for_binary_boolean_expression@@Base+0x2a70>
   1a80c:	and	r6, r1, r2
   1a810:	mov	r1, r6
   1a814:	add	r5, pc, r5
   1a818:	bl	11f38 <realloc@plt>
   1a81c:	strd	r6, [r9]
   1a820:	str	r0, [r5]
   1a824:	ldr	r1, [sl, #4]
   1a828:	ldr	r2, [pc, #148]	; 1a8c4 <__generate_code_for_binary_boolean_expression@@Base+0x2a74>
   1a82c:	ldr	r2, [pc, r2]
   1a830:	b	1a14c <__generate_code_for_binary_boolean_expression@@Base+0x22fc>
   1a834:	andeq	r4, r1, r4, lsl r5
   1a838:	andeq	r4, r1, r4, lsl r5
   1a83c:	andeq	r4, r1, r8, lsl #10
   1a840:	andeq	r4, r1, ip, ror #9
   1a844:	andeq	r4, r1, r0, lsr #8
   1a848:	andeq	r2, r0, sl, lsr #8
   1a84c:	andeq	r2, r1, r8, asr #21
   1a850:	ldrdeq	r3, [r1], -r4
   1a854:	muleq	r0, r3, fp
   1a858:	andeq	r4, r1, r0, lsr #4
   1a85c:	ldrdeq	r4, [r1], -ip
   1a860:	ldrdeq	r4, [r1], -r0
   1a864:	andeq	r4, r1, r4, asr #7
   1a868:	andeq	r4, r1, r4, lsl #9
   1a86c:	andeq	r4, r1, r0, lsl #9
   1a870:	andeq	r4, r1, r0, ror #8
   1a874:	muleq	r1, ip, r3
   1a878:	andeq	r4, r1, ip, asr r3
   1a87c:	andeq	r4, r1, r0, asr #6
   1a880:	andeq	r4, r1, ip, asr #5
   1a884:	andeq	r4, r1, ip, lsl #5
   1a888:	andeq	r4, r1, r0, ror r2
   1a88c:			; <UNDEFINED> instruction: 0x00013db0
   1a890:	andeq	r3, r1, r0, ror sp
   1a894:	andeq	r3, r1, r0, asr sp
   1a898:	andeq	r3, r1, r0, lsr #24
   1a89c:	andeq	r3, r1, r0, ror #23
   1a8a0:	ldrdeq	r3, [r1], -r0
   1a8a4:	andeq	r4, r1, r8, rrx
   1a8a8:	andeq	r4, r1, r0, lsr #2
   1a8ac:	andeq	r4, r1, r4, lsl r1
   1a8b0:	muleq	r1, ip, lr
   1a8b4:	muleq	r1, r4, r9
   1a8b8:	andeq	r3, r1, r8, ror r9
   1a8bc:	andeq	r3, r1, r8, lsl #18
   1a8c0:	andeq	r3, r1, r8, asr #17
   1a8c4:			; <UNDEFINED> instruction: 0x000138bc
   1a8c8:	andeq	r3, r1, r0, asr pc
   1a8cc:	andeq	r3, r1, r4, asr #30
   1a8d0:	andeq	r3, r1, r4, lsl #30
   1a8d4:	strdeq	r3, [r1], -r8
   1a8d8:	strdeq	r3, [r1], -r0
   1a8dc:	ldrdeq	r3, [r1], -r4
   1a8e0:	ldrdeq	r4, [r1], -r0
   1a8e4:	andeq	r4, r1, ip, asr #1
   1a8e8:	strheq	r4, [r1], -r0
   1a8ec:	andeq	r3, r1, r4, ror lr
   1a8f0:	andeq	r3, r1, r4, lsr lr
   1a8f4:	andeq	r3, r1, ip, lsl lr
   1a8f8:	andeq	r3, r1, r8, ror #25
   1a8fc:	andeq	r3, r1, r8, lsr #25
   1a900:	andeq	r3, r1, ip, lsl #25
   1a904:	andeq	r3, r1, ip, lsl #23
   1a908:	andeq	r3, r1, ip, asr #22
   1a90c:	andeq	r3, r1, r0, lsr fp
   1a910:	andeq	r3, r1, r0, lsr #21
   1a914:	andeq	r3, r1, r0, ror #20
   1a918:	andeq	r3, r1, r4, asr #20
   1a91c:	ldrdeq	r3, [r1], -r4
   1a920:	ldr	r0, [pc, #508]	; 1ab24 <__generate_code_for_binary_boolean_expression@@Base+0x2cd4>
   1a924:	ldr	r0, [pc, r0]
   1a928:	cmp	r0, #0
   1a92c:	beq	1aadc <__generate_code_for_binary_boolean_expression@@Base+0x2c8c>
   1a930:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a934:	add	fp, sp, #24
   1a938:	ldr	r9, [pc, #488]	; 1ab28 <__generate_code_for_binary_boolean_expression@@Base+0x2cd8>
   1a93c:	mov	r4, #0
   1a940:	mov	r1, #0
   1a944:	add	r9, pc, r9
   1a948:	ldrb	r0, [r9]
   1a94c:	cmp	r0, #1
   1a950:	bne	1a9d4 <__generate_code_for_binary_boolean_expression@@Base+0x2b84>
   1a954:	ldr	r0, [pc, #464]	; 1ab2c <__generate_code_for_binary_boolean_expression@@Base+0x2cdc>
   1a958:	ldr	r8, [pc, #464]	; 1ab30 <__generate_code_for_binary_boolean_expression@@Base+0x2ce0>
   1a95c:	mov	r1, #1
   1a960:	add	r0, pc, r0
   1a964:	add	r8, pc, r8
   1a968:	ldr	r0, [r0, #4]
   1a96c:	ldr	r2, [pc, #448]	; 1ab34 <__generate_code_for_binary_boolean_expression@@Base+0x2ce4>
   1a970:	ldr	r2, [pc, r2]
   1a974:	ldr	r7, [r8, #4]
   1a978:	ldr	r5, [pc, #440]	; 1ab38 <__generate_code_for_binary_boolean_expression@@Base+0x2ce8>
   1a97c:	adds	r3, r2, #8
   1a980:	adc	r6, r0, #0
   1a984:	ldr	r5, [pc, r5]
   1a988:	subs	r3, r5, r3
   1a98c:	sbcs	r3, r7, r6
   1a990:	bcs	1a9d4 <__generate_code_for_binary_boolean_expression@@Base+0x2b84>
   1a994:	mov	r1, #7
   1a998:	orr	r1, r1, #131072	; 0x20000
   1a99c:	adds	r1, r2, r1
   1a9a0:	adc	r7, r0, #0
   1a9a4:	mov	r0, #16646144	; 0xfe0000
   1a9a8:	orr	r0, r0, #-16777216	; 0xff000000
   1a9ac:	ldr	r5, [pc, #392]	; 1ab3c <__generate_code_for_binary_boolean_expression@@Base+0x2cec>
   1a9b0:	and	r6, r1, r0
   1a9b4:	ldr	r0, [pc, #388]	; 1ab40 <__generate_code_for_binary_boolean_expression@@Base+0x2cf0>
   1a9b8:	mov	r1, r6
   1a9bc:	add	r5, pc, r5
   1a9c0:	ldr	r0, [pc, r0]
   1a9c4:	bl	11f38 <realloc@plt>
   1a9c8:	ldrb	r1, [r9]
   1a9cc:	strd	r6, [r8]
   1a9d0:	str	r0, [r5]
   1a9d4:	ldr	r3, [pc, #360]	; 1ab44 <__generate_code_for_binary_boolean_expression@@Base+0x2cf4>
   1a9d8:	ldr	r2, [pc, #360]	; 1ab48 <__generate_code_for_binary_boolean_expression@@Base+0x2cf8>
   1a9dc:	add	r3, pc, r3
   1a9e0:	ldr	r2, [pc, r2]
   1a9e4:	ldr	r0, [pc, #352]	; 1ab4c <__generate_code_for_binary_boolean_expression@@Base+0x2cfc>
   1a9e8:	ldr	r0, [pc, r0]
   1a9ec:	ldr	r7, [r3, #4]
   1a9f0:	mov	r6, r0
   1a9f4:	strb	r4, [r6, r2]!
   1a9f8:	adds	r2, r2, #8
   1a9fc:	adc	r5, r7, #0
   1aa00:	strb	r4, [r6, #5]
   1aa04:	strb	r4, [r6, #3]
   1aa08:	strb	r4, [r6, #2]
   1aa0c:	strb	r4, [r6, #1]
   1aa10:	strb	r4, [r6, #4]!
   1aa14:	cmp	r1, #0
   1aa18:	strb	r4, [r6, #3]
   1aa1c:	strb	r4, [r6, #2]
   1aa20:	stm	r3, {r2, r5}
   1aa24:	beq	1aa4c <__generate_code_for_binary_boolean_expression@@Base+0x2bfc>
   1aa28:	ldr	r3, [pc, #288]	; 1ab50 <__generate_code_for_binary_boolean_expression@@Base+0x2d00>
   1aa2c:	mov	r1, r2
   1aa30:	mov	r2, #1
   1aa34:	ldr	r3, [pc, r3]
   1aa38:	bl	11f44 <fwrite@plt>
   1aa3c:	ldr	r0, [pc, #272]	; 1ab54 <__generate_code_for_binary_boolean_expression@@Base+0x2d04>
   1aa40:	ldr	r0, [pc, r0]
   1aa44:	bl	11ef0 <free@plt>
   1aa48:	b	1aa98 <__generate_code_for_binary_boolean_expression@@Base+0x2c48>
   1aa4c:	ldr	r1, [pc, #260]	; 1ab58 <__generate_code_for_binary_boolean_expression@@Base+0x2d08>
   1aa50:	mov	r2, #4
   1aa54:	ldr	r1, [pc, r1]
   1aa58:	bl	12070 <msync@plt>
   1aa5c:	cmn	r0, #1
   1aa60:	beq	1aae8 <__generate_code_for_binary_boolean_expression@@Base+0x2c98>
   1aa64:	ldr	r1, [pc, #252]	; 1ab68 <__generate_code_for_binary_boolean_expression@@Base+0x2d18>
   1aa68:	ldr	r1, [pc, r1]
   1aa6c:	ldr	r0, [pc, #248]	; 1ab6c <__generate_code_for_binary_boolean_expression@@Base+0x2d1c>
   1aa70:	ldr	r0, [pc, r0]
   1aa74:	bl	12040 <munmap@plt>
   1aa78:	ldr	r0, [pc, #240]	; 1ab70 <__generate_code_for_binary_boolean_expression@@Base+0x2d20>
   1aa7c:	ldr	r1, [pc, #240]	; 1ab74 <__generate_code_for_binary_boolean_expression@@Base+0x2d24>
   1aa80:	mov	r2, #0
   1aa84:	add	r0, pc, r0
   1aa88:	add	r1, pc, r1
   1aa8c:	str	r2, [r0]
   1aa90:	str	r2, [r0, #4]
   1aa94:	str	r2, [r1]
   1aa98:	ldr	r0, [pc, #216]	; 1ab78 <__generate_code_for_binary_boolean_expression@@Base+0x2d28>
   1aa9c:	ldr	r0, [pc, r0]
   1aaa0:	bl	11ee4 <fflush@plt>
   1aaa4:	ldr	r0, [pc, #208]	; 1ab7c <__generate_code_for_binary_boolean_expression@@Base+0x2d2c>
   1aaa8:	ldr	r0, [pc, r0]
   1aaac:	bl	1b028 <__gcov_flush@@Base+0x30c>
   1aab0:	ldr	r0, [pc, #200]	; 1ab80 <__generate_code_for_binary_boolean_expression@@Base+0x2d30>
   1aab4:	ldr	r0, [pc, r0]
   1aab8:	bl	12028 <fclose@plt>
   1aabc:	ldr	r0, [pc, #192]	; 1ab84 <__generate_code_for_binary_boolean_expression@@Base+0x2d34>
   1aac0:	ldr	r1, [pc, #192]	; 1ab88 <__generate_code_for_binary_boolean_expression@@Base+0x2d38>
   1aac4:	mov	r2, #0
   1aac8:	add	r0, pc, r0
   1aacc:	add	r1, pc, r1
   1aad0:	str	r2, [r0]
   1aad4:	str	r2, [r1]
   1aad8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1aadc:	ldr	r0, [pc, #168]	; 1ab8c <__generate_code_for_binary_boolean_expression@@Base+0x2d3c>
   1aae0:	ldr	r0, [pc, r0]
   1aae4:	b	11ef0 <free@plt>
   1aae8:	bl	11fe0 <__errno_location@plt>
   1aaec:	ldr	r1, [pc, #104]	; 1ab5c <__generate_code_for_binary_boolean_expression@@Base+0x2d0c>
   1aaf0:	ldr	r1, [pc, r1]
   1aaf4:	ldr	r0, [r0]
   1aaf8:	ldr	r4, [r1]
   1aafc:	ldr	r5, [pc, #92]	; 1ab60 <__generate_code_for_binary_boolean_expression@@Base+0x2d10>
   1ab00:	ldr	r5, [pc, r5]
   1ab04:	bl	11f80 <strerror@plt>
   1ab08:	ldr	r1, [pc, #84]	; 1ab64 <__generate_code_for_binary_boolean_expression@@Base+0x2d14>
   1ab0c:	mov	r3, r0
   1ab10:	mov	r0, r4
   1ab14:	add	r1, pc, r1
   1ab18:	mov	r2, r5
   1ab1c:	bl	11fd4 <fprintf@plt>
   1ab20:	b	1aa64 <__generate_code_for_binary_boolean_expression@@Base+0x2c14>
   1ab24:			; <UNDEFINED> instruction: 0x000137b4
   1ab28:	muleq	r1, r0, r7
   1ab2c:	andeq	r3, r1, r8, lsl #15
   1ab30:	andeq	r3, r1, ip, ror r7
   1ab34:	andeq	r3, r1, r8, ror r7
   1ab38:	andeq	r3, r1, ip, asr r7
   1ab3c:	andeq	r3, r1, r0, lsr #14
   1ab40:	andeq	r3, r1, ip, lsl r7
   1ab44:	andeq	r3, r1, ip, lsl #14
   1ab48:	andeq	r3, r1, r8, lsl #14
   1ab4c:	strdeq	r3, [r1], -r4
   1ab50:	andeq	r3, r1, r4, lsr #13
   1ab54:	muleq	r1, ip, r6
   1ab58:	andeq	r3, r1, ip, lsr #13
   1ab5c:	andeq	r2, r1, r8, asr #11
   1ab60:	ldrdeq	r3, [r1], -r0
   1ab64:	ldrdeq	r1, [r0], -r5
   1ab68:	muleq	r1, r8, r6
   1ab6c:	andeq	r3, r1, ip, ror #12
   1ab70:	andeq	r3, r1, ip, ror r6
   1ab74:	andeq	r3, r1, r4, asr r6
   1ab78:	andeq	r3, r1, ip, lsr r6
   1ab7c:	andeq	r2, r1, r0, asr #12
   1ab80:	andeq	r3, r1, r4, lsr #12
   1ab84:	andeq	r3, r1, r0, lsl r6
   1ab88:	andeq	r3, r1, r0, lsl r6
   1ab8c:	strdeq	r3, [r1], -r0
   1ab90:	push	{r4, sl, fp, lr}
   1ab94:	add	fp, sp, #8
   1ab98:	mov	r4, r0
   1ab9c:	mov	r0, #12
   1aba0:	bl	11f68 <malloc@plt>
   1aba4:	ldr	r1, [pc, #60]	; 1abe8 <__generate_code_for_binary_boolean_expression@@Base+0x2d98>
   1aba8:	mov	r2, #0
   1abac:	add	r1, pc, r1
   1abb0:	stm	r0, {r1, r4}
   1abb4:	str	r2, [r0, #8]
   1abb8:	ldr	r1, [pc, #44]	; 1abec <__generate_code_for_binary_boolean_expression@@Base+0x2d9c>
   1abbc:	ldr	r1, [pc, r1]
   1abc0:	mov	r2, r1
   1abc4:	ldr	r3, [r2], #4
   1abc8:	ldr	r4, [r2]
   1abcc:	cmp	r3, #0
   1abd0:	mov	r3, r2
   1abd4:	addne	r3, r4, #8
   1abd8:	moveq	r2, r1
   1abdc:	str	r0, [r3]
   1abe0:	str	r0, [r2]
   1abe4:	pop	{r4, sl, fp, pc}
   1abe8:	andeq	r3, r1, r8, asr #10
   1abec:	strdeq	r2, [r1], -r4
   1abf0:	push	{r4, r5, fp, lr}
   1abf4:	add	fp, sp, #8
   1abf8:	ldr	r0, [pc, #56]	; 1ac38 <__generate_code_for_binary_boolean_expression@@Base+0x2de8>
   1abfc:	ldr	r0, [pc, r0]
   1ac00:	ldr	r4, [r0]
   1ac04:	cmp	r4, #0
   1ac08:	beq	1ac34 <__generate_code_for_binary_boolean_expression@@Base+0x2de4>
   1ac0c:	ldr	r5, [pc, #40]	; 1ac3c <__generate_code_for_binary_boolean_expression@@Base+0x2dec>
   1ac10:	add	r5, pc, r5
   1ac14:	ldr	r0, [r4]
   1ac18:	cmp	r0, r5
   1ac1c:	bne	1ac28 <__generate_code_for_binary_boolean_expression@@Base+0x2dd8>
   1ac20:	ldr	r0, [r4, #4]
   1ac24:	blx	r0
   1ac28:	ldr	r4, [r4, #8]
   1ac2c:	cmp	r4, #0
   1ac30:	bne	1ac14 <__generate_code_for_binary_boolean_expression@@Base+0x2dc4>
   1ac34:	pop	{r4, r5, fp, pc}
   1ac38:			; <UNDEFINED> instruction: 0x000124b4
   1ac3c:	andeq	r3, r1, r4, ror #9
   1ac40:	push	{r4, r5, r6, r7, fp, lr}
   1ac44:	add	fp, sp, #16
   1ac48:	ldr	r4, [pc, #100]	; 1acb4 <__generate_code_for_binary_boolean_expression@@Base+0x2e64>
   1ac4c:	ldr	r4, [pc, r4]
   1ac50:	ldr	r0, [r4]
   1ac54:	cmp	r0, #0
   1ac58:	beq	1acb0 <__generate_code_for_binary_boolean_expression@@Base+0x2e60>
   1ac5c:	ldr	r5, [pc, #84]	; 1acb8 <__generate_code_for_binary_boolean_expression@@Base+0x2e68>
   1ac60:	mov	r6, #0
   1ac64:	add	r5, pc, r5
   1ac68:	ldr	r1, [r0]
   1ac6c:	ldr	r7, [r0, #8]
   1ac70:	cmp	r1, r5
   1ac74:	beq	1ac80 <__generate_code_for_binary_boolean_expression@@Base+0x2e30>
   1ac78:	mov	r6, r0
   1ac7c:	b	1aca4 <__generate_code_for_binary_boolean_expression@@Base+0x2e54>
   1ac80:	ldr	r1, [r4]
   1ac84:	cmp	r0, r1
   1ac88:	streq	r7, [r4]
   1ac8c:	ldr	r1, [r4, #4]
   1ac90:	cmp	r0, r1
   1ac94:	streq	r6, [r4, #4]
   1ac98:	cmp	r6, #0
   1ac9c:	strne	r7, [r6, #8]
   1aca0:	bl	11ef0 <free@plt>
   1aca4:	mov	r0, r7
   1aca8:	cmp	r7, #0
   1acac:	bne	1ac68 <__generate_code_for_binary_boolean_expression@@Base+0x2e18>
   1acb0:	pop	{r4, r5, r6, r7, fp, pc}
   1acb4:	andeq	r2, r1, r4, ror #8
   1acb8:	muleq	r1, r0, r4
   1acbc:	push	{r4, sl, fp, lr}
   1acc0:	add	fp, sp, #8
   1acc4:	mov	r4, r0
   1acc8:	mov	r0, #12
   1accc:	bl	11f68 <malloc@plt>
   1acd0:	ldr	r1, [pc, #60]	; 1ad14 <__generate_code_for_binary_boolean_expression@@Base+0x2ec4>
   1acd4:	mov	r2, #0
   1acd8:	add	r1, pc, r1
   1acdc:	stm	r0, {r1, r4}
   1ace0:	str	r2, [r0, #8]
   1ace4:	ldr	r1, [pc, #44]	; 1ad18 <__generate_code_for_binary_boolean_expression@@Base+0x2ec8>
   1ace8:	ldr	r1, [pc, r1]
   1acec:	mov	r2, r1
   1acf0:	ldr	r3, [r2], #4
   1acf4:	ldr	r4, [r2]
   1acf8:	cmp	r3, #0
   1acfc:	mov	r3, r2
   1ad00:	addne	r3, r4, #8
   1ad04:	moveq	r2, r1
   1ad08:	str	r0, [r3]
   1ad0c:	str	r0, [r2]
   1ad10:	pop	{r4, sl, fp, pc}
   1ad14:	andeq	r3, r1, ip, lsl r4
   1ad18:	andeq	r2, r1, r4, asr #7

0001ad1c <__gcov_flush@@Base>:
   1ad1c:	push	{r4, sl, fp, lr}
   1ad20:	add	fp, sp, #8
   1ad24:	ldr	r0, [pc, #36]	; 1ad50 <__gcov_flush@@Base+0x34>
   1ad28:	ldr	r0, [pc, r0]
   1ad2c:	ldr	r4, [r0]
   1ad30:	cmp	r4, #0
   1ad34:	beq	1ad4c <__gcov_flush@@Base+0x30>
   1ad38:	ldr	r0, [r4, #4]
   1ad3c:	blx	r0
   1ad40:	ldr	r4, [r4, #8]
   1ad44:	cmp	r4, #0
   1ad48:	bne	1ad38 <__gcov_flush@@Base+0x1c>
   1ad4c:	pop	{r4, sl, fp, pc}
   1ad50:	andeq	r2, r1, r4, lsl #7
   1ad54:	push	{r4, r5, r6, r7, fp, lr}
   1ad58:	add	fp, sp, #16
   1ad5c:	ldr	r4, [pc, #100]	; 1adc8 <__gcov_flush@@Base+0xac>
   1ad60:	ldr	r4, [pc, r4]
   1ad64:	ldr	r0, [r4]
   1ad68:	cmp	r0, #0
   1ad6c:	beq	1adc4 <__gcov_flush@@Base+0xa8>
   1ad70:	ldr	r5, [pc, #84]	; 1adcc <__gcov_flush@@Base+0xb0>
   1ad74:	mov	r6, #0
   1ad78:	add	r5, pc, r5
   1ad7c:	ldr	r1, [r0]
   1ad80:	ldr	r7, [r0, #8]
   1ad84:	cmp	r1, r5
   1ad88:	beq	1ad94 <__gcov_flush@@Base+0x78>
   1ad8c:	mov	r6, r0
   1ad90:	b	1adb8 <__gcov_flush@@Base+0x9c>
   1ad94:	ldr	r1, [r4]
   1ad98:	cmp	r0, r1
   1ad9c:	streq	r7, [r4]
   1ada0:	ldr	r1, [r4, #4]
   1ada4:	cmp	r0, r1
   1ada8:	streq	r6, [r4, #4]
   1adac:	cmp	r6, #0
   1adb0:	strne	r7, [r6, #8]
   1adb4:	bl	11ef0 <free@plt>
   1adb8:	mov	r0, r7
   1adbc:	cmp	r7, #0
   1adc0:	bne	1ad7c <__gcov_flush@@Base+0x60>
   1adc4:	pop	{r4, r5, r6, r7, fp, pc}
   1adc8:	andeq	r2, r1, ip, asr #6
   1adcc:	andeq	r3, r1, ip, ror r3
   1add0:	push	{r4, r5, fp, lr}
   1add4:	add	fp, sp, #8
   1add8:	mov	r4, r1
   1addc:	cmp	r0, #0
   1ade0:	beq	1ae30 <__gcov_flush@@Base+0x114>
   1ade4:	mov	r5, r0
   1ade8:	mov	r0, #12
   1adec:	bl	11f68 <malloc@plt>
   1adf0:	ldr	r1, [pc, #204]	; 1aec4 <__gcov_flush@@Base+0x1a8>
   1adf4:	mov	r2, #0
   1adf8:	add	r1, pc, r1
   1adfc:	stm	r0, {r1, r5}
   1ae00:	str	r2, [r0, #8]
   1ae04:	ldr	r1, [pc, #188]	; 1aec8 <__gcov_flush@@Base+0x1ac>
   1ae08:	ldr	r1, [pc, r1]
   1ae0c:	mov	r2, r1
   1ae10:	ldr	r3, [r2], #4
   1ae14:	ldr	r5, [r2]
   1ae18:	cmp	r3, #0
   1ae1c:	mov	r3, r2
   1ae20:	addne	r3, r5, #8
   1ae24:	moveq	r2, r1
   1ae28:	str	r0, [r3]
   1ae2c:	str	r0, [r2]
   1ae30:	cmp	r4, #0
   1ae34:	beq	1ae80 <__gcov_flush@@Base+0x164>
   1ae38:	mov	r0, #12
   1ae3c:	bl	11f68 <malloc@plt>
   1ae40:	ldr	r1, [pc, #132]	; 1aecc <__gcov_flush@@Base+0x1b0>
   1ae44:	mov	r2, #0
   1ae48:	add	r1, pc, r1
   1ae4c:	stm	r0, {r1, r4}
   1ae50:	str	r2, [r0, #8]
   1ae54:	ldr	r1, [pc, #116]	; 1aed0 <__gcov_flush@@Base+0x1b4>
   1ae58:	ldr	r1, [pc, r1]
   1ae5c:	mov	r2, r1
   1ae60:	ldr	r3, [r2], #4
   1ae64:	ldr	r5, [r2]
   1ae68:	cmp	r3, #0
   1ae6c:	mov	r3, r2
   1ae70:	addne	r3, r5, #8
   1ae74:	moveq	r2, r1
   1ae78:	str	r0, [r3]
   1ae7c:	str	r0, [r2]
   1ae80:	ldr	r1, [pc, #76]	; 1aed4 <__gcov_flush@@Base+0x1b8>
   1ae84:	add	r1, pc, r1
   1ae88:	ldrb	r0, [r1]
   1ae8c:	cmp	r0, #0
   1ae90:	popne	{r4, r5, fp, pc}
   1ae94:	ldr	r0, [pc, #60]	; 1aed8 <__gcov_flush@@Base+0x1bc>
   1ae98:	mov	r2, #1
   1ae9c:	strb	r2, [r1]
   1aea0:	add	r0, pc, r0
   1aea4:	bl	1b384 <__libc_csu_fini@@Base+0x4>
   1aea8:	ldr	r0, [pc, #44]	; 1aedc <__gcov_flush@@Base+0x1c0>
   1aeac:	add	r0, pc, r0
   1aeb0:	bl	1b384 <__libc_csu_fini@@Base+0x4>
   1aeb4:	ldr	r0, [pc, #36]	; 1aee0 <__gcov_flush@@Base+0x1c4>
   1aeb8:	add	r0, pc, r0
   1aebc:	pop	{r4, r5, fp, lr}
   1aec0:	b	1b384 <__libc_csu_fini@@Base+0x4>
   1aec4:	strdeq	r3, [r1], -ip
   1aec8:	andeq	r2, r1, r8, lsr #5
   1aecc:	andeq	r3, r1, ip, lsr #5
   1aed0:	andeq	r2, r1, r4, asr r2
   1aed4:	andeq	r3, r1, r4, ror r2
   1aed8:			; <UNDEFINED> instruction: 0xfffffeac
   1aedc:			; <UNDEFINED> instruction: 0xfffffd8c
   1aee0:			; <UNDEFINED> instruction: 0xfffffd30
   1aee4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1aee8:	add	fp, sp, #24
   1aeec:	ldr	r7, [pc, #76]	; 1af40 <__gcov_flush@@Base+0x224>
   1aef0:	mov	r4, r0
   1aef4:	mov	r5, #1
   1aef8:	mov	r8, #0
   1aefc:	ldr	r7, [pc, r7]
   1af00:	mov	r6, #47	; 0x2f
   1af04:	b	1af0c <__gcov_flush@@Base+0x1f0>
   1af08:	add	r5, r5, #1
   1af0c:	ldrb	r0, [r4, r5]
   1af10:	cmp	r0, #47	; 0x2f
   1af14:	beq	1af24 <__gcov_flush@@Base+0x208>
   1af18:	cmp	r0, #0
   1af1c:	bne	1af08 <__gcov_flush@@Base+0x1ec>
   1af20:	b	1af3c <__gcov_flush@@Base+0x220>
   1af24:	strb	r8, [r4, r5]
   1af28:	ldr	r1, [r7]
   1af2c:	mov	r0, r4
   1af30:	bl	11ff8 <mkdir@plt>
   1af34:	strb	r6, [r4, r5]
   1af38:	b	1af08 <__gcov_flush@@Base+0x1ec>
   1af3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1af40:	andeq	r2, r1, ip, lsr #3
   1af44:	ldr	r0, [pc, #8]	; 1af54 <__gcov_flush@@Base+0x238>
   1af48:	ldr	r0, [pc, r0]
   1af4c:	ldr	r0, [r0]
   1af50:	bx	lr
   1af54:	andeq	r2, r1, r0, ror #2
   1af58:	ldr	r1, [pc, #8]	; 1af68 <__gcov_flush@@Base+0x24c>
   1af5c:	ldr	r1, [pc, r1]
   1af60:	str	r0, [r1]
   1af64:	bx	lr
   1af68:	andeq	r2, r1, ip, asr #2
   1af6c:	push	{r4, r5, r6, sl, fp, lr}
   1af70:	add	fp, sp, #16
   1af74:	sub	sp, sp, #392	; 0x188
   1af78:	mov	r6, sp
   1af7c:	mov	r5, r0
   1af80:	mov	r0, r6
   1af84:	mov	r4, r1
   1af88:	bl	11f20 <uname@plt>
   1af8c:	cmp	r0, #0
   1af90:	blt	1afa8 <__gcov_flush@@Base+0x28c>
   1af94:	add	r1, r6, #65	; 0x41
   1af98:	mov	r0, r5
   1af9c:	mov	r2, r4
   1afa0:	bl	12010 <strncpy@plt>
   1afa4:	mov	r0, #0
   1afa8:	sub	sp, fp, #16
   1afac:	pop	{r4, r5, r6, sl, fp, pc}
   1afb0:	push	{r4, r5, r6, sl, fp, lr}
   1afb4:	add	fp, sp, #16
   1afb8:	sub	sp, sp, #32
   1afbc:	mov	r4, #0
   1afc0:	mov	r5, r0
   1afc4:	str	r4, [sp, #20]
   1afc8:	str	r4, [sp, #16]
   1afcc:	str	r4, [sp, #12]
   1afd0:	str	r4, [sp, #8]
   1afd4:	strh	r4, [sp, #2]
   1afd8:	bl	11f98 <getpid@plt>
   1afdc:	mov	r6, sp
   1afe0:	str	r0, [sp, #24]
   1afe4:	mov	r0, #1
   1afe8:	strh	r0, [sp]
   1afec:	mov	r0, r5
   1aff0:	mov	r1, #14
   1aff4:	mov	r2, r6
   1aff8:	bl	1204c <fcntl64@plt>
   1affc:	cmn	r0, #1
   1b000:	bne	1b01c <__gcov_flush@@Base+0x300>
   1b004:	bl	11fe0 <__errno_location@plt>
   1b008:	ldr	r0, [r0]
   1b00c:	cmp	r0, #4
   1b010:	beq	1afec <__gcov_flush@@Base+0x2d0>
   1b014:	cmp	r0, #37	; 0x25
   1b018:	mvneq	r4, #0
   1b01c:	mov	r0, r4
   1b020:	sub	sp, fp, #16
   1b024:	pop	{r4, r5, r6, sl, fp, pc}
   1b028:	push	{r4, r5, r6, sl, fp, lr}
   1b02c:	add	fp, sp, #16
   1b030:	sub	sp, sp, #32
   1b034:	mov	r4, #0
   1b038:	mov	r5, r0
   1b03c:	str	r4, [sp, #20]
   1b040:	str	r4, [sp, #16]
   1b044:	str	r4, [sp, #12]
   1b048:	str	r4, [sp, #8]
   1b04c:	strh	r4, [sp, #2]
   1b050:	bl	11f98 <getpid@plt>
   1b054:	mov	r6, sp
   1b058:	str	r0, [sp, #24]
   1b05c:	mov	r0, #2
   1b060:	strh	r0, [sp]
   1b064:	mov	r0, r5
   1b068:	mov	r1, #14
   1b06c:	mov	r2, r6
   1b070:	bl	1204c <fcntl64@plt>
   1b074:	cmn	r0, #1
   1b078:	bne	1b094 <__gcov_flush@@Base+0x378>
   1b07c:	bl	11fe0 <__errno_location@plt>
   1b080:	ldr	r0, [r0]
   1b084:	cmp	r0, #4
   1b088:	beq	1b064 <__gcov_flush@@Base+0x348>
   1b08c:	cmp	r0, #37	; 0x25
   1b090:	mvneq	r4, #0
   1b094:	mov	r0, r4
   1b098:	sub	sp, fp, #16
   1b09c:	pop	{r4, r5, r6, sl, fp, pc}
   1b0a0:	push	{r4, r5, fp, lr}
   1b0a4:	add	fp, sp, #8
   1b0a8:	sub	sp, sp, #32
   1b0ac:	mov	r2, #182	; 0xb6
   1b0b0:	orr	r2, r2, #256	; 0x100
   1b0b4:	mov	r1, #66	; 0x42
   1b0b8:	bl	11f50 <open64@plt>
   1b0bc:	cmp	r0, #0
   1b0c0:	blt	1b13c <__gcov_flush@@Base+0x420>
   1b0c4:	mov	r4, r0
   1b0c8:	mov	r0, #0
   1b0cc:	str	r0, [sp, #20]
   1b0d0:	str	r0, [sp, #16]
   1b0d4:	str	r0, [sp, #12]
   1b0d8:	str	r0, [sp, #8]
   1b0dc:	strh	r0, [sp, #2]
   1b0e0:	bl	11f98 <getpid@plt>
   1b0e4:	mov	r5, sp
   1b0e8:	str	r0, [sp, #24]
   1b0ec:	mov	r0, #1
   1b0f0:	strh	r0, [sp]
   1b0f4:	mov	r0, r4
   1b0f8:	mov	r1, #14
   1b0fc:	mov	r2, r5
   1b100:	bl	1204c <fcntl64@plt>
   1b104:	cmn	r0, #1
   1b108:	bne	1b124 <__gcov_flush@@Base+0x408>
   1b10c:	bl	11fe0 <__errno_location@plt>
   1b110:	ldr	r0, [r0]
   1b114:	cmp	r0, #4
   1b118:	beq	1b0f4 <__gcov_flush@@Base+0x3d8>
   1b11c:	cmp	r0, #37	; 0x25
   1b120:	beq	1b148 <__gcov_flush@@Base+0x42c>
   1b124:	ldr	r1, [pc, #76]	; 1b178 <__gcov_flush@@Base+0x45c>
   1b128:	mov	r0, r4
   1b12c:	add	r1, pc, r1
   1b130:	bl	11ec0 <fdopen@plt>
   1b134:	sub	sp, fp, #8
   1b138:	pop	{r4, r5, fp, pc}
   1b13c:	mov	r0, #0
   1b140:	sub	sp, fp, #8
   1b144:	pop	{r4, r5, fp, pc}
   1b148:	ldr	r1, [pc, #28]	; 1b16c <__gcov_flush@@Base+0x450>
   1b14c:	ldr	r2, [pc, #28]	; 1b170 <__gcov_flush@@Base+0x454>
   1b150:	ldr	r0, [pc, #28]	; 1b174 <__gcov_flush@@Base+0x458>
   1b154:	add	r1, pc, r1
   1b158:	add	r2, pc, r2
   1b15c:	ldr	r0, [pc, r0]
   1b160:	ldr	r0, [r0]
   1b164:	bl	11fd4 <fprintf@plt>
   1b168:	b	1b124 <__gcov_flush@@Base+0x408>
   1b16c:	strheq	r1, [r0], -r6
   1b170:	strdeq	r1, [r0], -fp
   1b174:	andeq	r1, r1, ip, asr pc
   1b178:	andeq	r0, r0, ip, lsr pc
   1b17c:	push	{r4, r5, r6, sl, fp, lr}
   1b180:	add	fp, sp, #16
   1b184:	mov	r6, r0
   1b188:	ldr	r0, [pc, #120]	; 1b208 <__gcov_flush@@Base+0x4ec>
   1b18c:	mov	r4, r1
   1b190:	add	r0, pc, r0
   1b194:	bl	11f5c <getenv@plt>
   1b198:	mov	r5, r0
   1b19c:	ldr	r0, [pc, #104]	; 1b20c <__gcov_flush@@Base+0x4f0>
   1b1a0:	add	r0, pc, r0
   1b1a4:	bl	11f5c <getenv@plt>
   1b1a8:	mov	r1, #0
   1b1ac:	str	r1, [r4]
   1b1b0:	str	r1, [r6]
   1b1b4:	cmp	r5, #0
   1b1b8:	ldrbne	r2, [r5]
   1b1bc:	cmpne	r2, #0
   1b1c0:	bne	1b1cc <__gcov_flush@@Base+0x4b0>
   1b1c4:	mov	r0, r1
   1b1c8:	pop	{r4, r5, r6, sl, fp, pc}
   1b1cc:	cmp	r0, #0
   1b1d0:	beq	1b1e8 <__gcov_flush@@Base+0x4cc>
   1b1d4:	mov	r1, #0
   1b1d8:	mov	r2, #10
   1b1dc:	bl	11ecc <strtol@plt>
   1b1e0:	bic	r0, r0, r0, asr #31
   1b1e4:	b	1b1ec <__gcov_flush@@Base+0x4d0>
   1b1e8:	mov	r0, #0
   1b1ec:	str	r0, [r6]
   1b1f0:	mov	r0, r5
   1b1f4:	bl	11fb0 <strlen@plt>
   1b1f8:	mov	r1, r5
   1b1fc:	str	r0, [r4]
   1b200:	mov	r0, r1
   1b204:	pop	{r4, r5, r6, sl, fp, pc}
   1b208:	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   1b20c:	andeq	r1, r0, sp, ror #1
   1b210:	push	{r4, r5, r6, r7, fp, lr}
   1b214:	add	fp, sp, #16
   1b218:	mov	r6, r0
   1b21c:	ldr	r0, [fp, #8]
   1b220:	mov	r5, r3
   1b224:	mov	r7, r2
   1b228:	mov	r4, r1
   1b22c:	cmp	r0, #1
   1b230:	blt	1b268 <__gcov_flush@@Base+0x54c>
   1b234:	add	r1, r4, #1
   1b238:	mov	r2, #0
   1b23c:	ldrb	r3, [r1]
   1b240:	cmp	r3, #47	; 0x2f
   1b244:	beq	1b254 <__gcov_flush@@Base+0x538>
   1b248:	cmp	r3, #0
   1b24c:	bne	1b25c <__gcov_flush@@Base+0x540>
   1b250:	b	1b268 <__gcov_flush@@Base+0x54c>
   1b254:	add	r2, r2, #1
   1b258:	mov	r4, r1
   1b25c:	add	r1, r1, #1
   1b260:	cmp	r2, r0
   1b264:	blt	1b23c <__gcov_flush@@Base+0x520>
   1b268:	mov	r0, r6
   1b26c:	mov	r1, r7
   1b270:	mov	r2, r5
   1b274:	bl	11efc <memcpy@plt>
   1b278:	add	r0, r7, r5
   1b27c:	ldrb	r0, [r0, #-1]
   1b280:	cmp	r0, #47	; 0x2f
   1b284:	movne	r0, #47	; 0x2f
   1b288:	strbne	r0, [r6, r5]
   1b28c:	mov	r0, r4
   1b290:	addne	r5, r5, #1
   1b294:	add	r5, r6, r5
   1b298:	bl	11fb0 <strlen@plt>
   1b29c:	add	r2, r0, #1
   1b2a0:	mov	r0, r5
   1b2a4:	mov	r1, r4
   1b2a8:	pop	{r4, r5, r6, r7, fp, lr}
   1b2ac:	b	11efc <memcpy@plt>
   1b2b0:	mov	r1, #47	; 0x2f
   1b2b4:	b	11fbc <strchr@plt>
   1b2b8:	mov	r1, #47	; 0x2f
   1b2bc:	b	12058 <strrchr@plt>
   1b2c0:	push	{fp, lr}
   1b2c4:	mov	fp, sp
   1b2c8:	sub	sp, sp, #8
   1b2cc:	mov	r0, #0
   1b2d0:	str	r0, [sp, #4]
   1b2d4:	add	r1, sp, #4
   1b2d8:	mov	r0, #2
   1b2dc:	bl	1201c <prctl@plt>
   1b2e0:	ldr	r1, [sp, #4]
   1b2e4:	cmp	r0, #0
   1b2e8:	cmpeq	r1, #9
   1b2ec:	bne	1b300 <__gcov_flush@@Base+0x5e4>
   1b2f0:	mov	r0, #1
   1b2f4:	mov	r1, #0
   1b2f8:	bl	1201c <prctl@plt>
   1b2fc:	ldr	r1, [sp, #4]
   1b300:	sub	r0, r1, #9
   1b304:	clz	r0, r0
   1b308:	lsr	r0, r0, #5
   1b30c:	mov	sp, fp
   1b310:	pop	{fp, pc}
   1b314:	mov	r0, #1
   1b318:	mov	r1, #9
   1b31c:	b	1201c <prctl@plt>

0001b320 <__libc_csu_init@@Base>:
   1b320:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b324:	mov	r7, r0
   1b328:	ldr	r6, [pc, #72]	; 1b378 <__libc_csu_init@@Base+0x58>
   1b32c:	ldr	r5, [pc, #72]	; 1b37c <__libc_csu_init@@Base+0x5c>
   1b330:	add	r6, pc, r6
   1b334:	add	r5, pc, r5
   1b338:	sub	r6, r6, r5
   1b33c:	mov	r8, r1
   1b340:	mov	r9, r2
   1b344:	bl	11ea0 <fdopen@plt-0x20>
   1b348:	asrs	r6, r6, #2
   1b34c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b350:	mov	r4, #0
   1b354:	add	r4, r4, #1
   1b358:	ldr	r3, [r5], #4
   1b35c:	mov	r2, r9
   1b360:	mov	r1, r8
   1b364:	mov	r0, r7
   1b368:	blx	r3
   1b36c:	cmp	r6, r4
   1b370:	bne	1b354 <__libc_csu_init@@Base+0x34>
   1b374:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b378:	muleq	r1, r4, r2
   1b37c:	andeq	r1, r1, r4, ror r2

0001b380 <__libc_csu_fini@@Base>:
   1b380:	bx	lr
   1b384:	ldr	r3, [pc, #12]	; 1b398 <__libc_csu_fini@@Base+0x18>
   1b388:	mov	r1, #0
   1b38c:	add	r3, pc, r3
   1b390:	ldr	r2, [r3]
   1b394:	b	11fec <__cxa_atexit@plt>
   1b398:	andeq	r1, r1, ip, lsr sp

Disassembly of section .fini:

0001b39c <.fini>:
   1b39c:	push	{r3, lr}
   1b3a0:	pop	{r3, pc}
