
../repos/prog2/0.7:     file format elf32-littlearm


Disassembly of section .init:

000105b4 <.init>:
   105b4:	push	{r3, lr}
   105b8:	bl	1065c <_start@@Base+0x3c>
   105bc:	pop	{r3, pc}

Disassembly of section .plt:

000105c0 <printf@plt-0x14>:
   105c0:	push	{lr}		; (str lr, [sp, #-4]!)
   105c4:	ldr	lr, [pc, #4]	; 105d0 <printf@plt-0x4>
   105c8:	add	lr, pc, lr
   105cc:	ldr	pc, [lr, #8]!
   105d0:	andeq	r0, r1, r0, lsr sl

000105d4 <printf@plt>:
   105d4:	add	ip, pc, #0, 12
   105d8:	add	ip, ip, #16, 20	; 0x10000
   105dc:	ldr	pc, [ip, #2608]!	; 0xa30

000105e0 <__libc_start_main@plt>:
   105e0:	add	ip, pc, #0, 12
   105e4:	add	ip, ip, #16, 20	; 0x10000
   105e8:	ldr	pc, [ip, #2600]!	; 0xa28

000105ec <__gmon_start__@plt>:
   105ec:	add	ip, pc, #0, 12
   105f0:	add	ip, ip, #16, 20	; 0x10000
   105f4:	ldr	pc, [ip, #2592]!	; 0xa20

000105f8 <memset@plt>:
   105f8:	add	ip, pc, #0, 12
   105fc:	add	ip, ip, #16, 20	; 0x10000
   10600:	ldr	pc, [ip, #2584]!	; 0xa18

00010604 <__isoc99_scanf@plt>:
   10604:	add	ip, pc, #0, 12
   10608:	add	ip, ip, #16, 20	; 0x10000
   1060c:	ldr	pc, [ip, #2576]!	; 0xa10

00010610 <abort@plt>:
   10610:	add	ip, pc, #0, 12
   10614:	add	ip, ip, #16, 20	; 0x10000
   10618:	ldr	pc, [ip, #2568]!	; 0xa08

Disassembly of section .text:

00010620 <_start@@Base>:
   10620:	mov	fp, #0
   10624:	mov	lr, #0
   10628:	pop	{r1}		; (ldr r1, [sp], #4)
   1062c:	mov	r2, sp
   10630:	push	{r2}		; (str r2, [sp, #-4]!)
   10634:	push	{r0}		; (str r0, [sp, #-4]!)
   10638:	ldr	ip, [pc, #16]	; 10650 <_start@@Base+0x30>
   1063c:	push	{ip}		; (str ip, [sp, #-4]!)
   10640:	ldr	r0, [pc, #12]	; 10654 <_start@@Base+0x34>
   10644:	ldr	r3, [pc, #12]	; 10658 <_start@@Base+0x38>
   10648:	bl	105e0 <__libc_start_main@plt>
   1064c:	bl	10610 <abort@plt>
   10650:	andeq	r0, r1, r8, lsr #19
   10654:	andeq	r0, r1, ip, asr #17
   10658:	andeq	r0, r1, r8, asr #18
   1065c:	ldr	r3, [pc, #20]	; 10678 <_start@@Base+0x58>
   10660:	ldr	r2, [pc, #20]	; 1067c <_start@@Base+0x5c>
   10664:	add	r3, pc, r3
   10668:	ldr	r2, [r3, r2]
   1066c:	cmp	r2, #0
   10670:	bxeq	lr
   10674:	b	105ec <__gmon_start__@plt>
   10678:	muleq	r1, r4, r9
   1067c:	andeq	r0, r0, r4, lsr #32
   10680:	ldr	r0, [pc, #24]	; 106a0 <_start@@Base+0x80>
   10684:	ldr	r3, [pc, #24]	; 106a4 <_start@@Base+0x84>
   10688:	cmp	r3, r0
   1068c:	bxeq	lr
   10690:	ldr	r3, [pc, #16]	; 106a8 <_start@@Base+0x88>
   10694:	cmp	r3, #0
   10698:	bxeq	lr
   1069c:	bx	r3
   106a0:	andeq	r1, r2, r0, lsr r0
   106a4:	andeq	r1, r2, r0, lsr r0
   106a8:	andeq	r0, r0, r0
   106ac:	ldr	r0, [pc, #36]	; 106d8 <_start@@Base+0xb8>
   106b0:	ldr	r1, [pc, #36]	; 106dc <_start@@Base+0xbc>
   106b4:	sub	r1, r1, r0
   106b8:	asr	r1, r1, #2
   106bc:	add	r1, r1, r1, lsr #31
   106c0:	asrs	r1, r1, #1
   106c4:	bxeq	lr
   106c8:	ldr	r3, [pc, #16]	; 106e0 <_start@@Base+0xc0>
   106cc:	cmp	r3, #0
   106d0:	bxeq	lr
   106d4:	bx	r3
   106d8:	andeq	r1, r2, r0, lsr r0
   106dc:	andeq	r1, r2, r0, lsr r0
   106e0:	andeq	r0, r0, r0
   106e4:	push	{r4, lr}
   106e8:	ldr	r4, [pc, #24]	; 10708 <_start@@Base+0xe8>
   106ec:	ldrb	r3, [r4]
   106f0:	cmp	r3, #0
   106f4:	popne	{r4, pc}
   106f8:	bl	10680 <_start@@Base+0x60>
   106fc:	mov	r3, #1
   10700:	strb	r3, [r4]
   10704:	pop	{r4, pc}
   10708:	andeq	r1, r2, r0, lsr r0
   1070c:	b	106ac <_start@@Base+0x8c>

00010710 <media@@Base>:
   10710:	push	{fp}		; (str fp, [sp, #-4]!)
   10714:	add	fp, sp, #0
   10718:	sub	sp, sp, #20
   1071c:	str	r0, [fp, #-16]
   10720:	str	r1, [fp, #-20]	; 0xffffffec
   10724:	mov	r3, #0
   10728:	str	r3, [fp, #-12]
   1072c:	mov	r3, #0
   10730:	str	r3, [fp, #-8]
   10734:	b	107c4 <media@@Base+0xb4>
   10738:	ldr	r3, [fp, #-8]
   1073c:	lsl	r3, r3, #2
   10740:	ldr	r2, [fp, #-16]
   10744:	add	r3, r2, r3
   10748:	vldr	s15, [r3]
   1074c:	vcvt.f64.f32	d7, s15
   10750:	vldr	d6, [pc, #168]	; 10800 <media@@Base+0xf0>
   10754:	vcmpe.f64	d7, d6
   10758:	vmrs	APSR_nzcv, fpscr
   1075c:	blt	10798 <media@@Base+0x88>
   10760:	ldr	r3, [fp, #-8]
   10764:	lsl	r3, r3, #2
   10768:	ldr	r2, [fp, #-16]
   1076c:	add	r3, r2, r3
   10770:	vldr	s15, [r3]
   10774:	vldr	s14, [pc, #140]	; 10808 <media@@Base+0xf8>
   10778:	vcmpe.f32	s15, s14
   1077c:	vmrs	APSR_nzcv, fpscr
   10780:	bpl	10798 <media@@Base+0x88>
   10784:	vldr	s15, [fp, #-12]
   10788:	vldr	s14, [pc, #120]	; 10808 <media@@Base+0xf8>
   1078c:	vadd.f32	s15, s15, s14
   10790:	vstr	s15, [fp, #-12]
   10794:	b	107b8 <media@@Base+0xa8>
   10798:	ldr	r3, [fp, #-8]
   1079c:	lsl	r3, r3, #2
   107a0:	ldr	r2, [fp, #-16]
   107a4:	add	r3, r2, r3
   107a8:	vldr	s15, [r3]
   107ac:	vldr	s14, [fp, #-12]
   107b0:	vadd.f32	s15, s14, s15
   107b4:	vstr	s15, [fp, #-12]
   107b8:	ldr	r3, [fp, #-8]
   107bc:	add	r3, r3, #1
   107c0:	str	r3, [fp, #-8]
   107c4:	ldr	r2, [fp, #-8]
   107c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   107cc:	cmp	r2, r3
   107d0:	blt	10738 <media@@Base+0x28>
   107d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   107d8:	vmov	s15, r3
   107dc:	vcvt.f32.s32	s15, s15
   107e0:	vldr	s14, [fp, #-12]
   107e4:	vdiv.f32	s13, s14, s15
   107e8:	vmov.f32	s15, s13
   107ec:	vmov.f32	s0, s15
   107f0:	add	sp, fp, #0
   107f4:	pop	{fp}		; (ldr fp, [sp], #4)
   107f8:	bx	lr
   107fc:	nop	{0}
   10800:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   10804:	mlami	r2, r9, r9, r9
   10808:	tstmi	r8, r0

0001080c <lernotas@@Base>:
   1080c:	str	fp, [sp, #-8]!
   10810:	str	lr, [sp, #4]
   10814:	add	fp, sp, #4
   10818:	sub	sp, sp, #24
   1081c:	str	r0, [fp, #-24]	; 0xffffffe8
   10820:	mov	r3, #0
   10824:	str	r3, [fp, #-8]
   10828:	b	10874 <lernotas@@Base+0x68>
   1082c:	vldr	s15, [fp, #-12]
   10830:	vcvt.f64.f32	d7, s15
   10834:	vldr	d6, [pc, #124]	; 108b8 <lernotas@@Base+0xac>
   10838:	vmul.f64	d6, d7, d6
   1083c:	vldr	s15, [fp, #-16]
   10840:	vcvt.f64.f32	d7, s15
   10844:	vldr	d5, [pc, #116]	; 108c0 <lernotas@@Base+0xb4>
   10848:	vmul.f64	d7, d7, d5
   1084c:	vadd.f64	d7, d6, d7
   10850:	ldr	r3, [fp, #-8]
   10854:	lsl	r3, r3, #2
   10858:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1085c:	add	r3, r2, r3
   10860:	vcvt.f32.f64	s15, d7
   10864:	vstr	s15, [r3]
   10868:	ldr	r3, [fp, #-8]
   1086c:	add	r3, r3, #1
   10870:	str	r3, [fp, #-8]
   10874:	sub	r2, fp, #16
   10878:	sub	r3, fp, #12
   1087c:	mov	r1, r3
   10880:	ldr	r3, [pc, #64]	; 108c8 <lernotas@@Base+0xbc>
   10884:	add	r3, pc, r3
   10888:	mov	r0, r3
   1088c:	bl	10604 <__isoc99_scanf@plt>
   10890:	mov	r3, r0
   10894:	cmp	r3, #2
   10898:	beq	1082c <lernotas@@Base+0x20>
   1089c:	ldr	r3, [fp, #-8]
   108a0:	mov	r0, r3
   108a4:	sub	sp, fp, #4
   108a8:	ldr	fp, [sp]
   108ac:	add	sp, sp, #4
   108b0:	pop	{pc}		; (ldr pc, [sp], #4)
   108b4:	nop	{0}
   108b8:	teqcc	r3, #-872415232	; 0xcc000000
   108bc:	svccc	0x00e33333
   108c0:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   108c4:	svccc	0x00d99999
   108c8:	andeq	r0, r0, ip, lsr #2

000108cc <main@@Base>:
   108cc:	str	fp, [sp, #-8]!
   108d0:	str	lr, [sp, #4]
   108d4:	add	fp, sp, #4
   108d8:	sub	sp, sp, #408	; 0x198
   108dc:	sub	r3, fp, #408	; 0x198
   108e0:	mov	r2, #400	; 0x190
   108e4:	mov	r1, #0
   108e8:	mov	r0, r3
   108ec:	bl	105f8 <memset@plt>
   108f0:	sub	r3, fp, #408	; 0x198
   108f4:	mov	r0, r3
   108f8:	bl	1080c <lernotas@@Base>
   108fc:	str	r0, [fp, #-8]
   10900:	sub	r3, fp, #408	; 0x198
   10904:	ldr	r1, [fp, #-8]
   10908:	mov	r0, r3
   1090c:	bl	10710 <media@@Base>
   10910:	vmov.f32	s15, s0
   10914:	vcvt.f64.f32	d7, s15
   10918:	vmov	r2, r3, d7
   1091c:	ldr	r1, [pc, #32]	; 10944 <main@@Base+0x78>
   10920:	add	r1, pc, r1
   10924:	mov	r0, r1
   10928:	bl	105d4 <printf@plt>
   1092c:	mov	r3, #0
   10930:	mov	r0, r3
   10934:	sub	sp, fp, #4
   10938:	ldr	fp, [sp]
   1093c:	add	sp, sp, #4
   10940:	pop	{pc}		; (ldr pc, [sp], #4)
   10944:	muleq	r0, r8, r0

00010948 <__libc_csu_init@@Base>:
   10948:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1094c:	mov	r7, r0
   10950:	ldr	r6, [pc, #72]	; 109a0 <__libc_csu_init@@Base+0x58>
   10954:	ldr	r5, [pc, #72]	; 109a4 <__libc_csu_init@@Base+0x5c>
   10958:	add	r6, pc, r6
   1095c:	add	r5, pc, r5
   10960:	sub	r6, r6, r5
   10964:	mov	r8, r1
   10968:	mov	r9, r2
   1096c:	bl	105b4 <printf@plt-0x20>
   10970:	asrs	r6, r6, #2
   10974:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10978:	mov	r4, #0
   1097c:	add	r4, r4, #1
   10980:	ldr	r3, [r5], #4
   10984:	mov	r2, r9
   10988:	mov	r1, r8
   1098c:	mov	r0, r7
   10990:	blx	r3
   10994:	cmp	r6, r4
   10998:	bne	1097c <__libc_csu_init@@Base+0x34>
   1099c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109a0:			; <UNDEFINED> instruction: 0x000105b4
   109a4:	andeq	r0, r1, ip, lsr #11

000109a8 <__libc_csu_fini@@Base>:
   109a8:	bx	lr

Disassembly of section .fini:

000109ac <.fini>:
   109ac:	push	{r3, lr}
   109b0:	pop	{r3, pc}
