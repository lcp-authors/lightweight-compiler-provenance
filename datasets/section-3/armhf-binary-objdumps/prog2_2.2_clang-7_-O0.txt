
../repos/prog2/2.2:     file format elf32-littlearm


Disassembly of section .init:

0001074c <.init>:
   1074c:	push	{r3, lr}
   10750:	bl	10838 <_start@@Base+0x3c>
   10754:	pop	{r3, pc}

Disassembly of section .plt:

00010758 <printf@plt-0x14>:
   10758:	push	{lr}		; (str lr, [sp, #-4]!)
   1075c:	ldr	lr, [pc, #4]	; 10768 <printf@plt-0x4>
   10760:	add	lr, pc, lr
   10764:	ldr	pc, [lr, #8]!
   10768:	muleq	r1, r8, r8

0001076c <printf@plt>:
   1076c:	add	ip, pc, #0, 12
   10770:	add	ip, ip, #16, 20	; 0x10000
   10774:	ldr	pc, [ip, #2200]!	; 0x898

00010778 <free@plt>:
   10778:	add	ip, pc, #0, 12
   1077c:	add	ip, ip, #16, 20	; 0x10000
   10780:	ldr	pc, [ip, #2192]!	; 0x890

00010784 <fgets@plt>:
   10784:	add	ip, pc, #0, 12
   10788:	add	ip, ip, #16, 20	; 0x10000
   1078c:	ldr	pc, [ip, #2184]!	; 0x888

00010790 <getchar@plt>:
   10790:	add	ip, pc, #0, 12
   10794:	add	ip, ip, #16, 20	; 0x10000
   10798:	ldr	pc, [ip, #2176]!	; 0x880

0001079c <realloc@plt>:
   1079c:	add	ip, pc, #0, 12
   107a0:	add	ip, ip, #16, 20	; 0x10000
   107a4:	ldr	pc, [ip, #2168]!	; 0x878

000107a8 <strcpy@plt>:
   107a8:	add	ip, pc, #0, 12
   107ac:	add	ip, ip, #16, 20	; 0x10000
   107b0:	ldr	pc, [ip, #2160]!	; 0x870

000107b4 <malloc@plt>:
   107b4:	add	ip, pc, #0, 12
   107b8:	add	ip, ip, #16, 20	; 0x10000
   107bc:	ldr	pc, [ip, #2152]!	; 0x868

000107c0 <__libc_start_main@plt>:
   107c0:	add	ip, pc, #0, 12
   107c4:	add	ip, ip, #16, 20	; 0x10000
   107c8:	ldr	pc, [ip, #2144]!	; 0x860

000107cc <__gmon_start__@plt>:
   107cc:	add	ip, pc, #0, 12
   107d0:	add	ip, ip, #16, 20	; 0x10000
   107d4:	ldr	pc, [ip, #2136]!	; 0x858

000107d8 <strlen@plt>:
   107d8:	add	ip, pc, #0, 12
   107dc:	add	ip, ip, #16, 20	; 0x10000
   107e0:	ldr	pc, [ip, #2128]!	; 0x850

000107e4 <__isoc99_scanf@plt>:
   107e4:	add	ip, pc, #0, 12
   107e8:	add	ip, ip, #16, 20	; 0x10000
   107ec:	ldr	pc, [ip, #2120]!	; 0x848

000107f0 <abort@plt>:
   107f0:	add	ip, pc, #0, 12
   107f4:	add	ip, ip, #16, 20	; 0x10000
   107f8:	ldr	pc, [ip, #2112]!	; 0x840

Disassembly of section .text:

000107fc <_start@@Base>:
   107fc:	mov	fp, #0
   10800:	mov	lr, #0
   10804:	pop	{r1}		; (ldr r1, [sp], #4)
   10808:	mov	r2, sp
   1080c:	push	{r2}		; (str r2, [sp, #-4]!)
   10810:	push	{r0}		; (str r0, [sp, #-4]!)
   10814:	ldr	ip, [pc, #16]	; 1082c <_start@@Base+0x30>
   10818:	push	{ip}		; (str ip, [sp, #-4]!)
   1081c:	ldr	r0, [pc, #12]	; 10830 <_start@@Base+0x34>
   10820:	ldr	r3, [pc, #12]	; 10834 <_start@@Base+0x38>
   10824:	bl	107c0 <__libc_start_main@plt>
   10828:	bl	107f0 <abort@plt>
   1082c:	ldrdeq	r0, [r1], -r4
   10830:	andeq	r0, r1, ip, ror #17
   10834:	andeq	r0, r1, r4, ror fp
   10838:	ldr	r3, [pc, #20]	; 10854 <_start@@Base+0x58>
   1083c:	ldr	r2, [pc, #20]	; 10858 <_start@@Base+0x5c>
   10840:	add	r3, pc, r3
   10844:	ldr	r2, [r3, r2]
   10848:	cmp	r2, #0
   1084c:	bxeq	lr
   10850:	b	107cc <__gmon_start__@plt>
   10854:			; <UNDEFINED> instruction: 0x000107b8
   10858:	andeq	r0, r0, ip, lsr r0
   1085c:	ldr	r0, [pc, #24]	; 1087c <_start@@Base+0x80>
   10860:	ldr	r3, [pc, #24]	; 10880 <_start@@Base+0x84>
   10864:	cmp	r3, r0
   10868:	bxeq	lr
   1086c:	ldr	r3, [pc, #16]	; 10884 <_start@@Base+0x88>
   10870:	cmp	r3, #0
   10874:	bxeq	lr
   10878:	bx	r3
   1087c:	andeq	r1, r2, ip, asr #32
   10880:	andeq	r1, r2, ip, asr #32
   10884:	andeq	r0, r0, r0
   10888:	ldr	r0, [pc, #36]	; 108b4 <_start@@Base+0xb8>
   1088c:	ldr	r1, [pc, #36]	; 108b8 <_start@@Base+0xbc>
   10890:	sub	r1, r1, r0
   10894:	asr	r1, r1, #2
   10898:	add	r1, r1, r1, lsr #31
   1089c:	asrs	r1, r1, #1
   108a0:	bxeq	lr
   108a4:	ldr	r3, [pc, #16]	; 108bc <_start@@Base+0xc0>
   108a8:	cmp	r3, #0
   108ac:	bxeq	lr
   108b0:	bx	r3
   108b4:	andeq	r1, r2, ip, asr #32
   108b8:	andeq	r1, r2, ip, asr #32
   108bc:	andeq	r0, r0, r0
   108c0:	push	{r4, lr}
   108c4:	ldr	r4, [pc, #24]	; 108e4 <_start@@Base+0xe8>
   108c8:	ldrb	r3, [r4]
   108cc:	cmp	r3, #0
   108d0:	popne	{r4, pc}
   108d4:	bl	1085c <_start@@Base+0x60>
   108d8:	mov	r3, #1
   108dc:	strb	r3, [r4]
   108e0:	pop	{r4, pc}
   108e4:	andeq	r1, r2, ip, asr #32
   108e8:	b	10888 <_start@@Base+0x8c>

000108ec <main@@Base>:
   108ec:	push	{fp, lr}
   108f0:	mov	fp, sp
   108f4:	sub	sp, sp, #152	; 0x98
   108f8:	movw	r0, #0
   108fc:	str	r0, [fp, #-4]
   10900:	movw	r0, #12
   10904:	bl	107b4 <malloc@plt>
   10908:	str	r0, [fp, #-8]
   1090c:	movw	r0, #0
   10910:	str	r0, [sp, #60]	; 0x3c
   10914:	ldr	r0, [sp, #60]	; 0x3c
   10918:	cmp	r0, #3
   1091c:	bge	10944 <main@@Base+0x58>
   10920:	ldr	r0, [fp, #-8]
   10924:	ldr	r1, [sp, #60]	; 0x3c
   10928:	add	r0, r0, r1, lsl #2
   1092c:	movw	r1, #0
   10930:	str	r1, [r0]
   10934:	ldr	r0, [sp, #60]	; 0x3c
   10938:	add	r0, r0, #1
   1093c:	str	r0, [sp, #60]	; 0x3c
   10940:	b	10914 <main@@Base+0x28>
   10944:	b	10948 <main@@Base+0x5c>
   10948:	movw	r0, #0
   1094c:	str	r0, [sp, #60]	; 0x3c
   10950:	ldr	r0, [sp, #60]	; 0x3c
   10954:	cmp	r0, #3
   10958:	bge	109d8 <main@@Base+0xec>
   1095c:	ldr	r0, [sp, #60]	; 0x3c
   10960:	add	r1, r0, #1
   10964:	ldr	r0, [pc, #508]	; 10b68 <main@@Base+0x27c>
   10968:	add	r0, pc, r0
   1096c:	bl	1076c <printf@plt>
   10970:	ldr	r1, [fp, #-8]
   10974:	ldr	lr, [sp, #60]	; 0x3c
   10978:	add	r1, r1, lr, lsl #2
   1097c:	ldr	r1, [r1]
   10980:	movw	lr, #0
   10984:	cmp	r1, lr
   10988:	str	r0, [sp, #52]	; 0x34
   1098c:	bne	109a4 <main@@Base+0xb8>
   10990:	ldr	r0, [pc, #460]	; 10b64 <main@@Base+0x278>
   10994:	add	r0, pc, r0
   10998:	bl	1076c <printf@plt>
   1099c:	str	r0, [sp, #48]	; 0x30
   109a0:	b	109c4 <main@@Base+0xd8>
   109a4:	ldr	r0, [pc, #436]	; 10b60 <main@@Base+0x274>
   109a8:	add	r0, pc, r0
   109ac:	ldr	r1, [fp, #-8]
   109b0:	ldr	r2, [sp, #60]	; 0x3c
   109b4:	add	r1, r1, r2, lsl #2
   109b8:	ldr	r1, [r1]
   109bc:	bl	1076c <printf@plt>
   109c0:	str	r0, [sp, #44]	; 0x2c
   109c4:	b	109c8 <main@@Base+0xdc>
   109c8:	ldr	r0, [sp, #60]	; 0x3c
   109cc:	add	r0, r0, #1
   109d0:	str	r0, [sp, #60]	; 0x3c
   109d4:	b	10950 <main@@Base+0x64>
   109d8:	b	109dc <main@@Base+0xf0>
   109dc:	ldr	r0, [pc, #376]	; 10b5c <main@@Base+0x270>
   109e0:	add	r0, pc, r0
   109e4:	movw	r1, #3
   109e8:	bl	1076c <printf@plt>
   109ec:	ldr	r1, [pc, #356]	; 10b58 <main@@Base+0x26c>
   109f0:	add	r1, pc, r1
   109f4:	str	r0, [sp, #40]	; 0x28
   109f8:	mov	r0, r1
   109fc:	add	r1, sp, #56	; 0x38
   10a00:	bl	107e4 <__isoc99_scanf@plt>
   10a04:	str	r0, [sp, #36]	; 0x24
   10a08:	bl	10790 <getchar@plt>
   10a0c:	str	r0, [sp, #32]
   10a10:	ldr	r0, [sp, #56]	; 0x38
   10a14:	cmp	r0, #0
   10a18:	movw	r0, #1
   10a1c:	str	r0, [sp, #28]
   10a20:	blt	10a38 <main@@Base+0x14c>
   10a24:	ldr	r0, [sp, #56]	; 0x38
   10a28:	cmp	r0, #3
   10a2c:	movw	r0, #0
   10a30:	movgt	r0, #1
   10a34:	str	r0, [sp, #28]
   10a38:	ldr	r0, [sp, #28]
   10a3c:	tst	r0, #1
   10a40:	bne	109dc <main@@Base+0xf0>
   10a44:	ldr	r0, [sp, #56]	; 0x38
   10a48:	cmp	r0, #0
   10a4c:	bne	10a54 <main@@Base+0x168>
   10a50:	b	10b0c <main@@Base+0x220>
   10a54:	add	r1, sp, #64	; 0x40
   10a58:	ldr	r0, [pc, #268]	; 10b6c <main@@Base+0x280>
   10a5c:	add	r0, pc, r0
   10a60:	str	r1, [sp, #24]
   10a64:	bl	1076c <printf@plt>
   10a68:	ldr	r1, [pc, #256]	; 10b70 <main@@Base+0x284>
   10a6c:	ldr	r1, [pc, r1]
   10a70:	ldr	r2, [r1]
   10a74:	add	r1, sp, #64	; 0x40
   10a78:	mov	lr, #80	; 0x50
   10a7c:	str	r0, [sp, #20]
   10a80:	mov	r0, r1
   10a84:	str	r1, [sp, #16]
   10a88:	mov	r1, lr
   10a8c:	bl	10784 <fgets@plt>
   10a90:	ldr	r1, [sp, #16]
   10a94:	str	r0, [sp, #12]
   10a98:	mov	r0, r1
   10a9c:	bl	107d8 <strlen@plt>
   10aa0:	ldr	r1, [sp, #16]
   10aa4:	add	r0, r1, r0
   10aa8:	mov	r2, #0
   10aac:	strb	r2, [r0, #-1]
   10ab0:	ldr	r0, [fp, #-8]
   10ab4:	ldr	r2, [sp, #56]	; 0x38
   10ab8:	add	r0, r0, r2, lsl #2
   10abc:	ldr	r0, [r0, #-4]
   10ac0:	str	r0, [sp, #8]
   10ac4:	mov	r0, r1
   10ac8:	bl	107d8 <strlen@plt>
   10acc:	add	r1, r0, #1
   10ad0:	ldr	r0, [sp, #8]
   10ad4:	bl	1079c <realloc@plt>
   10ad8:	ldr	r1, [fp, #-8]
   10adc:	ldr	r2, [sp, #56]	; 0x38
   10ae0:	add	r1, r1, r2, lsl #2
   10ae4:	str	r0, [r1, #-4]
   10ae8:	ldr	r0, [fp, #-8]
   10aec:	ldr	r1, [sp, #56]	; 0x38
   10af0:	sub	r1, r1, #1
   10af4:	add	r0, r0, r1, lsl #2
   10af8:	ldr	r0, [r0]
   10afc:	ldr	r1, [sp, #24]
   10b00:	bl	107a8 <strcpy@plt>
   10b04:	str	r0, [sp, #4]
   10b08:	b	10948 <main@@Base+0x5c>
   10b0c:	movw	r0, #0
   10b10:	str	r0, [sp, #60]	; 0x3c
   10b14:	ldr	r0, [sp, #60]	; 0x3c
   10b18:	cmp	r0, #3
   10b1c:	bge	10b44 <main@@Base+0x258>
   10b20:	ldr	r0, [fp, #-8]
   10b24:	ldr	r1, [sp, #60]	; 0x3c
   10b28:	add	r0, r0, r1, lsl #2
   10b2c:	ldr	r0, [r0]
   10b30:	bl	10778 <free@plt>
   10b34:	ldr	r0, [sp, #60]	; 0x3c
   10b38:	add	r0, r0, #1
   10b3c:	str	r0, [sp, #60]	; 0x3c
   10b40:	b	10b14 <main@@Base+0x228>
   10b44:	ldr	r0, [fp, #-8]
   10b48:	bl	10778 <free@plt>
   10b4c:	movw	r0, #0
   10b50:	mov	sp, fp
   10b54:	pop	{fp, pc}
   10b58:	andeq	r0, r0, r3, lsr #4
   10b5c:	andeq	r0, r0, pc, lsl #4
   10b60:	andeq	r0, r0, r3, asr #4
   10b64:	andeq	r0, r0, lr, asr #4
   10b68:	andeq	r0, r0, r4, ror r2
   10b6c:			; <UNDEFINED> instruction: 0x000001ba
   10b70:	andeq	r0, r1, ip, asr #11

00010b74 <__libc_csu_init@@Base>:
   10b74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10b78:	mov	r7, r0
   10b7c:	ldr	r6, [pc, #72]	; 10bcc <__libc_csu_init@@Base+0x58>
   10b80:	ldr	r5, [pc, #72]	; 10bd0 <__libc_csu_init@@Base+0x5c>
   10b84:	add	r6, pc, r6
   10b88:	add	r5, pc, r5
   10b8c:	sub	r6, r6, r5
   10b90:	mov	r8, r1
   10b94:	mov	r9, r2
   10b98:	bl	1074c <printf@plt-0x20>
   10b9c:	asrs	r6, r6, #2
   10ba0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ba4:	mov	r4, #0
   10ba8:	add	r4, r4, #1
   10bac:	ldr	r3, [r5], #4
   10bb0:	mov	r2, r9
   10bb4:	mov	r1, r8
   10bb8:	mov	r0, r7
   10bbc:	blx	r3
   10bc0:	cmp	r6, r4
   10bc4:	bne	10ba8 <__libc_csu_init@@Base+0x34>
   10bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10bcc:	andeq	r0, r1, r0, lsl #7
   10bd0:	andeq	r0, r1, r8, ror r3

00010bd4 <__libc_csu_fini@@Base>:
   10bd4:	bx	lr

Disassembly of section .fini:

00010bd8 <.fini>:
   10bd8:	push	{r3, lr}
   10bdc:	pop	{r3, pc}
