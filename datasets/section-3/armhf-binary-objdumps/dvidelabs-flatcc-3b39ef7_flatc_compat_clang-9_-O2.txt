
../repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/flatc_compat:     file format elf32-littlearm


Disassembly of section .init:

00010e30 <.init>:
   10e30:	push	{r3, lr}
   10e34:	bl	10f94 <_start@@Base+0x3c>
   10e38:	pop	{r3, pc}

Disassembly of section .plt:

00010e3c <strcmp@plt-0x14>:
   10e3c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e40:	ldr	lr, [pc, #4]	; 10e4c <strcmp@plt-0x4>
   10e44:	add	lr, pc, lr
   10e48:	ldr	pc, [lr, #8]!
   10e4c:			; <UNDEFINED> instruction: 0x000141b4

00010e50 <strcmp@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #20, 20	; 0x14000
   10e58:	ldr	pc, [ip, #436]!	; 0x1b4

00010e5c <printf@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #20, 20	; 0x14000
   10e64:	ldr	pc, [ip, #428]!	; 0x1ac

00010e68 <fopen@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #20, 20	; 0x14000
   10e70:	ldr	pc, [ip, #420]!	; 0x1a4

00010e74 <free@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #20, 20	; 0x14000
   10e7c:	ldr	pc, [ip, #412]!	; 0x19c

00010e80 <memcpy@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #20, 20	; 0x14000
   10e88:	ldr	pc, [ip, #404]!	; 0x194

00010e8c <ftell@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #20, 20	; 0x14000
   10e94:	ldr	pc, [ip, #396]!	; 0x18c

00010e98 <rewind@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #20, 20	; 0x14000
   10ea0:	ldr	pc, [ip, #388]!	; 0x184

00010ea4 <fwrite@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #20, 20	; 0x14000
   10eac:	ldr	pc, [ip, #380]!	; 0x17c

00010eb0 <puts@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #20, 20	; 0x14000
   10eb8:	ldr	pc, [ip, #372]!	; 0x174

00010ebc <malloc@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #20, 20	; 0x14000
   10ec4:	ldr	pc, [ip, #364]!	; 0x16c

00010ec8 <__libc_start_main@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #20, 20	; 0x14000
   10ed0:	ldr	pc, [ip, #356]!	; 0x164

00010ed4 <__gmon_start__@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #20, 20	; 0x14000
   10edc:	ldr	pc, [ip, #348]!	; 0x15c

00010ee0 <exit@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #20, 20	; 0x14000
   10ee8:	ldr	pc, [ip, #340]!	; 0x154

00010eec <fprintf@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #20, 20	; 0x14000
   10ef4:	ldr	pc, [ip, #332]!	; 0x14c

00010ef8 <posix_memalign@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #20, 20	; 0x14000
   10f00:	ldr	pc, [ip, #324]!	; 0x144

00010f04 <strncpy@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #20, 20	; 0x14000
   10f0c:	ldr	pc, [ip, #316]!	; 0x13c

00010f10 <fclose@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #20, 20	; 0x14000
   10f18:	ldr	pc, [ip, #308]!	; 0x134

00010f1c <fputc@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #20, 20	; 0x14000
   10f24:	ldr	pc, [ip, #300]!	; 0x12c

00010f28 <fread_unlocked@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #20, 20	; 0x14000
   10f30:	ldr	pc, [ip, #292]!	; 0x124

00010f34 <fseek@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #20, 20	; 0x14000
   10f3c:	ldr	pc, [ip, #284]!	; 0x11c

00010f40 <abort@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #20, 20	; 0x14000
   10f48:	ldr	pc, [ip, #276]!	; 0x114

00010f4c <__assert_fail@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #20, 20	; 0x14000
   10f54:	ldr	pc, [ip, #268]!	; 0x10c

Disassembly of section .text:

00010f58 <_start@@Base>:
   10f58:	mov	fp, #0
   10f5c:	mov	lr, #0
   10f60:	pop	{r1}		; (ldr r1, [sp], #4)
   10f64:	mov	r2, sp
   10f68:	push	{r2}		; (str r2, [sp, #-4]!)
   10f6c:	push	{r0}		; (str r0, [sp, #-4]!)
   10f70:	ldr	ip, [pc, #16]	; 10f88 <_start@@Base+0x30>
   10f74:	push	{ip}		; (str ip, [sp, #-4]!)
   10f78:	ldr	r0, [pc, #12]	; 10f8c <_start@@Base+0x34>
   10f7c:	ldr	r3, [pc, #12]	; 10f90 <_start@@Base+0x38>
   10f80:	bl	10ec8 <__libc_start_main@plt>
   10f84:	bl	10f40 <abort@plt>
   10f88:	andeq	r3, r1, r4, lsr #28
   10f8c:	ldrdeq	r1, [r1], -r8
   10f90:	andeq	r3, r1, r4, asr #27
   10f94:	ldr	r3, [pc, #20]	; 10fb0 <_start@@Base+0x58>
   10f98:	ldr	r2, [pc, #20]	; 10fb4 <_start@@Base+0x5c>
   10f9c:	add	r3, pc, r3
   10fa0:	ldr	r2, [r3, r2]
   10fa4:	cmp	r2, #0
   10fa8:	bxeq	lr
   10fac:	b	10ed4 <__gmon_start__@plt>
   10fb0:	andeq	r4, r1, ip, asr r0
   10fb4:	andeq	r0, r0, r8, rrx
   10fb8:	ldr	r0, [pc, #24]	; 10fd8 <_start@@Base+0x80>
   10fbc:	ldr	r3, [pc, #24]	; 10fdc <_start@@Base+0x84>
   10fc0:	cmp	r3, r0
   10fc4:	bxeq	lr
   10fc8:	ldr	r3, [pc, #16]	; 10fe0 <_start@@Base+0x88>
   10fcc:	cmp	r3, #0
   10fd0:	bxeq	lr
   10fd4:	bx	r3
   10fd8:	andeq	r5, r2, ip, ror r0
   10fdc:	andeq	r5, r2, ip, ror r0
   10fe0:	andeq	r0, r0, r0
   10fe4:	ldr	r0, [pc, #36]	; 11010 <_start@@Base+0xb8>
   10fe8:	ldr	r1, [pc, #36]	; 11014 <_start@@Base+0xbc>
   10fec:	sub	r1, r1, r0
   10ff0:	asr	r1, r1, #2
   10ff4:	add	r1, r1, r1, lsr #31
   10ff8:	asrs	r1, r1, #1
   10ffc:	bxeq	lr
   11000:	ldr	r3, [pc, #16]	; 11018 <_start@@Base+0xc0>
   11004:	cmp	r3, #0
   11008:	bxeq	lr
   1100c:	bx	r3
   11010:	andeq	r5, r2, ip, ror r0
   11014:	andeq	r5, r2, ip, ror r0
   11018:	andeq	r0, r0, r0
   1101c:	push	{r4, lr}
   11020:	ldr	r4, [pc, #24]	; 11040 <_start@@Base+0xe8>
   11024:	ldrb	r3, [r4]
   11028:	cmp	r3, #0
   1102c:	popne	{r4, pc}
   11030:	bl	10fb8 <_start@@Base+0x60>
   11034:	mov	r3, #1
   11038:	strb	r3, [r4]
   1103c:	pop	{r4, pc}
   11040:	andeq	r5, r2, ip, ror r0
   11044:	b	10fe4 <_start@@Base+0x8c>

00011048 <verify_monster@@Base>:
   11048:	push	{r4, r5, r6, r7, fp, lr}
   1104c:	add	fp, sp, #16
   11050:	cmp	r0, #0
   11054:	beq	110cc <verify_monster@@Base+0x84>
   11058:	ldr	r1, [r0, #4]
   1105c:	movw	r2, #20301	; 0x4f4d
   11060:	movt	r2, #21326	; 0x534e
   11064:	cmp	r1, r2
   11068:	bne	110cc <verify_monster@@Base+0x84>
   1106c:	ldr	r1, [r0]
   11070:	mov	r4, r0
   11074:	ldr	r1, [r4, r1]!
   11078:	mov	r5, r4
   1107c:	ldrh	r6, [r5, -r1]!
   11080:	cmp	r6, #9
   11084:	bls	110d8 <verify_monster@@Base+0x90>
   11088:	ldrh	r1, [r5, #8]
   1108c:	cmp	r1, #0
   11090:	beq	110d8 <verify_monster@@Base+0x90>
   11094:	add	r1, r4, r1
   11098:	ldrh	r1, [r1]
   1109c:	cmp	r1, #80	; 0x50
   110a0:	bne	110d8 <verify_monster@@Base+0x90>
   110a4:	ldrh	r1, [r5, #4]
   110a8:	cmp	r1, #0
   110ac:	beq	110ec <verify_monster@@Base+0xa4>
   110b0:	add	r1, r4, r1
   110b4:	sub	r0, r1, r0
   110b8:	tst	r0, #15
   110bc:	beq	110f8 <verify_monster@@Base+0xb0>
   110c0:	ldr	r0, [pc, #1592]	; 11700 <verify_monster@@Base+0x6b8>
   110c4:	add	r0, pc, r0
   110c8:	b	110e0 <verify_monster@@Base+0x98>
   110cc:	ldr	r0, [pc, #1572]	; 116f8 <verify_monster@@Base+0x6b0>
   110d0:	add	r0, pc, r0
   110d4:	b	110e0 <verify_monster@@Base+0x98>
   110d8:	ldr	r0, [pc, #1556]	; 116f4 <verify_monster@@Base+0x6ac>
   110dc:	add	r0, pc, r0
   110e0:	bl	10eb0 <puts@plt>
   110e4:	mvn	r0, #0
   110e8:	pop	{r4, r5, r6, r7, fp, pc}
   110ec:	ldr	r0, [pc, #1544]	; 116fc <verify_monster@@Base+0x6b4>
   110f0:	add	r0, pc, r0
   110f4:	b	110e0 <verify_monster@@Base+0x98>
   110f8:	vldr	s0, [r1]
   110fc:	vmov.f32	s2, #112	; 0x3f800000  1.0
   11100:	vcmp.f32	s0, s2
   11104:	vmrs	APSR_nzcv, fpscr
   11108:	beq	11118 <verify_monster@@Base+0xd0>
   1110c:	ldr	r0, [pc, #1520]	; 11704 <verify_monster@@Base+0x6bc>
   11110:	add	r0, pc, r0
   11114:	b	110e0 <verify_monster@@Base+0x98>
   11118:	vldr	s0, [r1, #4]
   1111c:	vmov.f32	s2, #0	; 0x40000000  2.0
   11120:	vcmp.f32	s0, s2
   11124:	vmrs	APSR_nzcv, fpscr
   11128:	beq	11138 <verify_monster@@Base+0xf0>
   1112c:	ldr	r0, [pc, #1492]	; 11708 <verify_monster@@Base+0x6c0>
   11130:	add	r0, pc, r0
   11134:	b	110e0 <verify_monster@@Base+0x98>
   11138:	vldr	s0, [r1, #8]
   1113c:	vmov.f32	s2, #8	; 0x40400000  3.0
   11140:	vcmp.f32	s0, s2
   11144:	vmrs	APSR_nzcv, fpscr
   11148:	beq	11158 <verify_monster@@Base+0x110>
   1114c:	ldr	r0, [pc, #1464]	; 1170c <verify_monster@@Base+0x6c4>
   11150:	add	r0, pc, r0
   11154:	b	110e0 <verify_monster@@Base+0x98>
   11158:	vldr	d16, [r1, #16]
   1115c:	vmov.f64	d17, #8	; 0x40400000  3.0
   11160:	vcmp.f64	d16, d17
   11164:	vmrs	APSR_nzcv, fpscr
   11168:	beq	11178 <verify_monster@@Base+0x130>
   1116c:	ldr	r0, [pc, #1436]	; 11710 <verify_monster@@Base+0x6c8>
   11170:	add	r0, pc, r0
   11174:	b	110e0 <verify_monster@@Base+0x98>
   11178:	ldrb	r0, [r1, #24]
   1117c:	cmp	r0, #2
   11180:	bne	111e8 <verify_monster@@Base+0x1a0>
   11184:	ldrh	r0, [r1, #26]
   11188:	cmp	r0, #5
   1118c:	bne	111f4 <verify_monster@@Base+0x1ac>
   11190:	ldrb	r0, [r1, #28]
   11194:	cmp	r0, #6
   11198:	bne	111f4 <verify_monster@@Base+0x1ac>
   1119c:	cmp	r6, #12
   111a0:	bcc	115f4 <verify_monster@@Base+0x5ac>
   111a4:	ldrh	r1, [r5, #10]
   111a8:	cmp	r1, #0
   111ac:	beq	115f4 <verify_monster@@Base+0x5ac>
   111b0:	mov	r0, r4
   111b4:	ldr	r1, [r0, r1]!
   111b8:	ldr	r1, [r0, r1]!
   111bc:	cmp	r1, #9
   111c0:	bne	11200 <verify_monster@@Base+0x1b8>
   111c4:	ldr	r1, [pc, #1364]	; 11720 <verify_monster@@Base+0x6d8>
   111c8:	add	r0, r0, #4
   111cc:	add	r1, pc, r1
   111d0:	bl	10e50 <strcmp@plt>
   111d4:	cmp	r0, #0
   111d8:	beq	1120c <verify_monster@@Base+0x1c4>
   111dc:	ldr	r0, [pc, #1344]	; 11724 <verify_monster@@Base+0x6dc>
   111e0:	add	r0, pc, r0
   111e4:	b	110e0 <verify_monster@@Base+0x98>
   111e8:	ldr	r0, [pc, #1316]	; 11714 <verify_monster@@Base+0x6cc>
   111ec:	add	r0, pc, r0
   111f0:	b	110e0 <verify_monster@@Base+0x98>
   111f4:	ldr	r0, [pc, #1308]	; 11718 <verify_monster@@Base+0x6d0>
   111f8:	add	r0, pc, r0
   111fc:	b	110e0 <verify_monster@@Base+0x98>
   11200:	ldr	r0, [pc, #1300]	; 1171c <verify_monster@@Base+0x6d4>
   11204:	add	r0, pc, r0
   11208:	b	110e0 <verify_monster@@Base+0x98>
   1120c:	cmp	r6, #16
   11210:	bcc	112e0 <verify_monster@@Base+0x298>
   11214:	ldrh	r1, [r5, #14]
   11218:	cmp	r1, #0
   1121c:	beq	112e0 <verify_monster@@Base+0x298>
   11220:	mov	r0, r4
   11224:	ldr	r1, [r0, r1]!
   11228:	ldr	r1, [r0, r1]!
   1122c:	cmp	r1, #5
   11230:	bne	112e0 <verify_monster@@Base+0x298>
   11234:	add	r0, r0, #4
   11238:	mov	r1, #0
   1123c:	ldrb	r2, [r0]
   11240:	cmp	r2, #0
   11244:	bne	112ec <verify_monster@@Base+0x2a4>
   11248:	ldrb	r2, [r0, #1]
   1124c:	mov	r1, #1
   11250:	cmp	r2, #1
   11254:	bne	112ec <verify_monster@@Base+0x2a4>
   11258:	ldrb	r2, [r0, #2]
   1125c:	mov	r1, #2
   11260:	cmp	r2, #2
   11264:	bne	112ec <verify_monster@@Base+0x2a4>
   11268:	ldrb	r2, [r0, #3]
   1126c:	mov	r1, #3
   11270:	cmp	r2, #3
   11274:	bne	112ec <verify_monster@@Base+0x2a4>
   11278:	ldrb	r0, [r0, #4]
   1127c:	mov	r1, #4
   11280:	cmp	r0, #4
   11284:	bne	112ec <verify_monster@@Base+0x2a4>
   11288:	cmp	r6, #25
   1128c:	bls	11300 <verify_monster@@Base+0x2b8>
   11290:	ldrh	r1, [r5, #24]
   11294:	cmp	r1, #0
   11298:	beq	11300 <verify_monster@@Base+0x2b8>
   1129c:	mov	r0, r4
   112a0:	ldr	r1, [r0, r1]!
   112a4:	ldr	r1, [r0, r1]!
   112a8:	cmp	r1, #2
   112ac:	bne	1130c <verify_monster@@Base+0x2c4>
   112b0:	add	r7, r0, #4
   112b4:	ldr	r0, [r7]
   112b8:	ldr	r1, [pc, #1144]	; 11738 <verify_monster@@Base+0x6f0>
   112bc:	add	r0, r7, r0
   112c0:	add	r1, pc, r1
   112c4:	add	r0, r0, #4
   112c8:	bl	10e50 <strcmp@plt>
   112cc:	cmp	r0, #0
   112d0:	beq	11318 <verify_monster@@Base+0x2d0>
   112d4:	ldr	r0, [pc, #1120]	; 1173c <verify_monster@@Base+0x6f4>
   112d8:	add	r0, pc, r0
   112dc:	b	110e0 <verify_monster@@Base+0x98>
   112e0:	ldr	r0, [pc, #1088]	; 11728 <verify_monster@@Base+0x6e0>
   112e4:	add	r0, pc, r0
   112e8:	b	110e0 <verify_monster@@Base+0x98>
   112ec:	ldr	r0, [pc, #1080]	; 1172c <verify_monster@@Base+0x6e4>
   112f0:	add	r0, pc, r0
   112f4:	bl	10e5c <printf@plt>
   112f8:	mvn	r0, #0
   112fc:	pop	{r4, r5, r6, r7, fp, pc}
   11300:	ldr	r0, [pc, #1064]	; 11730 <verify_monster@@Base+0x6e8>
   11304:	add	r0, pc, r0
   11308:	b	110e0 <verify_monster@@Base+0x98>
   1130c:	ldr	r0, [pc, #1056]	; 11734 <verify_monster@@Base+0x6ec>
   11310:	add	r0, pc, r0
   11314:	b	110e0 <verify_monster@@Base+0x98>
   11318:	ldr	r0, [r7, #4]!
   1131c:	ldr	r1, [pc, #1052]	; 11740 <verify_monster@@Base+0x6f8>
   11320:	add	r0, r7, r0
   11324:	add	r1, pc, r1
   11328:	add	r0, r0, #4
   1132c:	bl	10e50 <strcmp@plt>
   11330:	cmp	r0, #0
   11334:	beq	11344 <verify_monster@@Base+0x2fc>
   11338:	ldr	r0, [pc, #1028]	; 11744 <verify_monster@@Base+0x6fc>
   1133c:	add	r0, pc, r0
   11340:	b	110e0 <verify_monster@@Base+0x98>
   11344:	ldrh	r0, [r5, #18]
   11348:	cmp	r0, #0
   1134c:	beq	113bc <verify_monster@@Base+0x374>
   11350:	ldrb	r0, [r4, r0]
   11354:	cmp	r0, #1
   11358:	bne	113bc <verify_monster@@Base+0x374>
   1135c:	ldrh	r1, [r5, #20]
   11360:	cmp	r1, #0
   11364:	beq	113c8 <verify_monster@@Base+0x380>
   11368:	mov	r0, r4
   1136c:	ldr	r1, [r0, r1]!
   11370:	ldr	r2, [r0, r1]!
   11374:	mov	r1, r0
   11378:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1137c:	cmp	r2, #11
   11380:	bls	115f4 <verify_monster@@Base+0x5ac>
   11384:	ldrh	r1, [r1, #10]
   11388:	cmp	r1, #0
   1138c:	beq	115f4 <verify_monster@@Base+0x5ac>
   11390:	ldr	r1, [r0, r1]!
   11394:	add	r0, r0, r1
   11398:	ldr	r1, [pc, #940]	; 1174c <verify_monster@@Base+0x704>
   1139c:	add	r0, r0, #4
   113a0:	add	r1, pc, r1
   113a4:	bl	10e50 <strcmp@plt>
   113a8:	cmp	r0, #0
   113ac:	beq	113d4 <verify_monster@@Base+0x38c>
   113b0:	ldr	r0, [pc, #920]	; 11750 <verify_monster@@Base+0x708>
   113b4:	add	r0, pc, r0
   113b8:	b	110e0 <verify_monster@@Base+0x98>
   113bc:	ldr	r0, [pc, #900]	; 11748 <verify_monster@@Base+0x700>
   113c0:	add	r0, pc, r0
   113c4:	b	110e0 <verify_monster@@Base+0x98>
   113c8:	ldr	r0, [pc, #932]	; 11774 <verify_monster@@Base+0x72c>
   113cc:	add	r0, pc, r0
   113d0:	b	110e0 <verify_monster@@Base+0x98>
   113d4:	ldrh	r1, [r5, #22]
   113d8:	cmp	r1, #0
   113dc:	beq	115b8 <verify_monster@@Base+0x570>
   113e0:	mov	r0, r4
   113e4:	ldr	r1, [r0, r1]!
   113e8:	ldr	r1, [r0, r1]!
   113ec:	cmp	r1, #2
   113f0:	bne	115b8 <verify_monster@@Base+0x570>
   113f4:	add	r0, r0, #4
   113f8:	ldrh	r1, [r0]
   113fc:	cmp	r1, #10
   11400:	bne	115c4 <verify_monster@@Base+0x57c>
   11404:	ldrb	r1, [r0, #2]
   11408:	cmp	r1, #20
   1140c:	bne	115d0 <verify_monster@@Base+0x588>
   11410:	ldrh	r1, [r0, #4]
   11414:	cmp	r1, #30
   11418:	bne	115dc <verify_monster@@Base+0x594>
   1141c:	ldrb	r0, [r0, #6]
   11420:	cmp	r0, #40	; 0x28
   11424:	bne	115e8 <verify_monster@@Base+0x5a0>
   11428:	cmp	r6, #38	; 0x26
   1142c:	bcc	11614 <verify_monster@@Base+0x5cc>
   11430:	ldrh	r0, [r5, #36]	; 0x24
   11434:	cmp	r0, #0
   11438:	beq	11614 <verify_monster@@Base+0x5cc>
   1143c:	ldr	r1, [r4, r0]
   11440:	movw	r0, #51521	; 0xc941
   11444:	movt	r0, #56697	; 0xdd79
   11448:	cmp	r1, r0
   1144c:	bne	11614 <verify_monster@@Base+0x5cc>
   11450:	cmp	r6, #40	; 0x28
   11454:	bcc	11634 <verify_monster@@Base+0x5ec>
   11458:	ldrh	r1, [r5, #38]	; 0x26
   1145c:	cmp	r1, #0
   11460:	beq	11634 <verify_monster@@Base+0x5ec>
   11464:	ldr	r1, [r4, r1]
   11468:	cmp	r1, r0
   1146c:	bne	11634 <verify_monster@@Base+0x5ec>
   11470:	cmp	r6, #42	; 0x2a
   11474:	bcc	11654 <verify_monster@@Base+0x60c>
   11478:	ldrh	r0, [r5, #40]	; 0x28
   1147c:	cmp	r0, #0
   11480:	beq	11654 <verify_monster@@Base+0x60c>
   11484:	mov	r1, r4
   11488:	ldr	r2, [r1, r0]!
   1148c:	movw	r0, #37249	; 0x9181
   11490:	movt	r0, #62075	; 0xf27b
   11494:	ldr	r3, [r1, #4]
   11498:	movw	r1, #32973	; 0x80cd
   1149c:	movt	r1, #28175	; 0x6e0f
   114a0:	eor	r2, r2, r0
   114a4:	eor	r3, r3, r1
   114a8:	orrs	r2, r2, r3
   114ac:	bne	11654 <verify_monster@@Base+0x60c>
   114b0:	cmp	r6, #44	; 0x2c
   114b4:	bcc	11674 <verify_monster@@Base+0x62c>
   114b8:	ldrh	r2, [r5, #42]	; 0x2a
   114bc:	cmp	r2, #0
   114c0:	beq	11674 <verify_monster@@Base+0x62c>
   114c4:	mov	r3, r4
   114c8:	ldr	r2, [r3, r2]!
   114cc:	eor	r0, r2, r0
   114d0:	ldr	r2, [r3, #4]
   114d4:	eor	r1, r2, r1
   114d8:	orrs	r0, r0, r1
   114dc:	bne	11674 <verify_monster@@Base+0x62c>
   114e0:	cmp	r6, #46	; 0x2e
   114e4:	bcc	11694 <verify_monster@@Base+0x64c>
   114e8:	ldrh	r0, [r5, #44]	; 0x2c
   114ec:	cmp	r0, #0
   114f0:	beq	11694 <verify_monster@@Base+0x64c>
   114f4:	ldr	r1, [r4, r0]
   114f8:	movw	r0, #42097	; 0xa471
   114fc:	movt	r0, #36481	; 0x8e81
   11500:	cmp	r1, r0
   11504:	bne	11694 <verify_monster@@Base+0x64c>
   11508:	cmp	r6, #48	; 0x30
   1150c:	bcc	116b4 <verify_monster@@Base+0x66c>
   11510:	ldrh	r1, [r5, #46]	; 0x2e
   11514:	cmp	r1, #0
   11518:	beq	116b4 <verify_monster@@Base+0x66c>
   1151c:	ldr	r1, [r4, r1]
   11520:	cmp	r1, r0
   11524:	bne	116b4 <verify_monster@@Base+0x66c>
   11528:	cmp	r6, #50	; 0x32
   1152c:	bcc	116d4 <verify_monster@@Base+0x68c>
   11530:	ldrh	r0, [r5, #48]	; 0x30
   11534:	cmp	r0, #0
   11538:	beq	116d4 <verify_monster@@Base+0x68c>
   1153c:	mov	r1, r4
   11540:	ldr	r2, [r1, r0]!
   11544:	movw	r0, #56817	; 0xddf1
   11548:	movt	r0, #51047	; 0xc767
   1154c:	ldr	r3, [r1, #4]
   11550:	movw	r1, #18652	; 0x48dc
   11554:	movt	r1, #17401	; 0x43f9
   11558:	eor	r2, r2, r0
   1155c:	eor	r3, r3, r1
   11560:	orrs	r2, r2, r3
   11564:	bne	116d4 <verify_monster@@Base+0x68c>
   11568:	cmp	r6, #52	; 0x34
   1156c:	bcc	11598 <verify_monster@@Base+0x550>
   11570:	ldrh	r2, [r5, #50]	; 0x32
   11574:	cmp	r2, #0
   11578:	beq	11598 <verify_monster@@Base+0x550>
   1157c:	ldr	r2, [r4, r2]!
   11580:	eor	r0, r2, r0
   11584:	ldr	r2, [r4, #4]
   11588:	eor	r1, r2, r1
   1158c:	orrs	r0, r0, r1
   11590:	mov	r0, #0
   11594:	popeq	{r4, r5, r6, r7, fp, pc}
   11598:	ldr	r0, [pc, #556]	; 117cc <verify_monster@@Base+0x784>
   1159c:	ldr	r1, [pc, #556]	; 117d0 <verify_monster@@Base+0x788>
   115a0:	ldr	r3, [pc, #556]	; 117d4 <verify_monster@@Base+0x78c>
   115a4:	mov	r2, #155	; 0x9b
   115a8:	add	r0, pc, r0
   115ac:	add	r1, pc, r1
   115b0:	add	r3, pc, r3
   115b4:	bl	10f4c <__assert_fail@plt>
   115b8:	ldr	r0, [pc, #404]	; 11754 <verify_monster@@Base+0x70c>
   115bc:	add	r0, pc, r0
   115c0:	b	110e0 <verify_monster@@Base+0x98>
   115c4:	ldr	r0, [pc, #396]	; 11758 <verify_monster@@Base+0x710>
   115c8:	add	r0, pc, r0
   115cc:	b	110e0 <verify_monster@@Base+0x98>
   115d0:	ldr	r0, [pc, #388]	; 1175c <verify_monster@@Base+0x714>
   115d4:	add	r0, pc, r0
   115d8:	b	110e0 <verify_monster@@Base+0x98>
   115dc:	ldr	r0, [pc, #380]	; 11760 <verify_monster@@Base+0x718>
   115e0:	add	r0, pc, r0
   115e4:	b	110e0 <verify_monster@@Base+0x98>
   115e8:	ldr	r0, [pc, #372]	; 11764 <verify_monster@@Base+0x71c>
   115ec:	add	r0, pc, r0
   115f0:	b	110e0 <verify_monster@@Base+0x98>
   115f4:	ldr	r0, [pc, #364]	; 11768 <verify_monster@@Base+0x720>
   115f8:	ldr	r1, [pc, #364]	; 1176c <verify_monster@@Base+0x724>
   115fc:	ldr	r3, [pc, #364]	; 11770 <verify_monster@@Base+0x728>
   11600:	movw	r2, #699	; 0x2bb
   11604:	add	r0, pc, r0
   11608:	add	r1, pc, r1
   1160c:	add	r3, pc, r3
   11610:	bl	10f4c <__assert_fail@plt>
   11614:	ldr	r0, [pc, #348]	; 11778 <verify_monster@@Base+0x730>
   11618:	ldr	r1, [pc, #348]	; 1177c <verify_monster@@Base+0x734>
   1161c:	ldr	r3, [pc, #348]	; 11780 <verify_monster@@Base+0x738>
   11620:	mov	r2, #148	; 0x94
   11624:	add	r0, pc, r0
   11628:	add	r1, pc, r1
   1162c:	add	r3, pc, r3
   11630:	bl	10f4c <__assert_fail@plt>
   11634:	ldr	r0, [pc, #328]	; 11784 <verify_monster@@Base+0x73c>
   11638:	ldr	r1, [pc, #328]	; 11788 <verify_monster@@Base+0x740>
   1163c:	ldr	r3, [pc, #328]	; 1178c <verify_monster@@Base+0x744>
   11640:	mov	r2, #149	; 0x95
   11644:	add	r0, pc, r0
   11648:	add	r1, pc, r1
   1164c:	add	r3, pc, r3
   11650:	bl	10f4c <__assert_fail@plt>
   11654:	ldr	r0, [pc, #308]	; 11790 <verify_monster@@Base+0x748>
   11658:	ldr	r1, [pc, #308]	; 11794 <verify_monster@@Base+0x74c>
   1165c:	ldr	r3, [pc, #308]	; 11798 <verify_monster@@Base+0x750>
   11660:	mov	r2, #150	; 0x96
   11664:	add	r0, pc, r0
   11668:	add	r1, pc, r1
   1166c:	add	r3, pc, r3
   11670:	bl	10f4c <__assert_fail@plt>
   11674:	ldr	r0, [pc, #288]	; 1179c <verify_monster@@Base+0x754>
   11678:	ldr	r1, [pc, #288]	; 117a0 <verify_monster@@Base+0x758>
   1167c:	ldr	r3, [pc, #288]	; 117a4 <verify_monster@@Base+0x75c>
   11680:	mov	r2, #151	; 0x97
   11684:	add	r0, pc, r0
   11688:	add	r1, pc, r1
   1168c:	add	r3, pc, r3
   11690:	bl	10f4c <__assert_fail@plt>
   11694:	ldr	r0, [pc, #268]	; 117a8 <verify_monster@@Base+0x760>
   11698:	ldr	r1, [pc, #268]	; 117ac <verify_monster@@Base+0x764>
   1169c:	ldr	r3, [pc, #268]	; 117b0 <verify_monster@@Base+0x768>
   116a0:	mov	r2, #152	; 0x98
   116a4:	add	r0, pc, r0
   116a8:	add	r1, pc, r1
   116ac:	add	r3, pc, r3
   116b0:	bl	10f4c <__assert_fail@plt>
   116b4:	ldr	r0, [pc, #248]	; 117b4 <verify_monster@@Base+0x76c>
   116b8:	ldr	r1, [pc, #248]	; 117b8 <verify_monster@@Base+0x770>
   116bc:	ldr	r3, [pc, #248]	; 117bc <verify_monster@@Base+0x774>
   116c0:	mov	r2, #153	; 0x99
   116c4:	add	r0, pc, r0
   116c8:	add	r1, pc, r1
   116cc:	add	r3, pc, r3
   116d0:	bl	10f4c <__assert_fail@plt>
   116d4:	ldr	r0, [pc, #228]	; 117c0 <verify_monster@@Base+0x778>
   116d8:	ldr	r1, [pc, #228]	; 117c4 <verify_monster@@Base+0x77c>
   116dc:	ldr	r3, [pc, #228]	; 117c8 <verify_monster@@Base+0x780>
   116e0:	mov	r2, #154	; 0x9a
   116e4:	add	r0, pc, r0
   116e8:	add	r1, pc, r1
   116ec:	add	r3, pc, r3
   116f0:	bl	10f4c <__assert_fail@plt>
   116f4:	andeq	r3, r0, r1, asr r4
   116f8:	ldrdeq	r3, [r0], -r7
   116fc:	andeq	r3, r0, sp, asr #3
   11700:	andeq	r3, r0, r2, asr #8
   11704:	ldrdeq	r3, [r0], -r5
   11708:	muleq	r0, r4, r3
   1170c:	andeq	r3, r0, r3, asr r3
   11710:	andeq	r3, r0, pc, lsl r3
   11714:	andeq	r3, r0, lr, lsl #5
   11718:	andeq	r3, r0, sl, ror #4
   1171c:	andeq	r3, r0, r3, asr #4
   11720:	andeq	r2, r0, r5, ror ip
   11724:	strdeq	r3, [r0], -r0
   11728:	andeq	r3, r0, r8, asr #2
   1172c:	andeq	r2, r0, fp, asr fp
   11730:	andeq	r2, r0, r0, ror #31
   11734:	strdeq	r3, [r0], -r4
   11738:	andeq	r2, r0, r8, lsr #23
   1173c:	andeq	r3, r0, r8, lsl #2
   11740:	andeq	r2, r0, sl, asr #22
   11744:	andeq	r3, r0, pc, ror r0
   11748:	andeq	r2, r0, fp, ror #31
   1174c:	andeq	r3, r0, r6
   11750:	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
   11754:			; <UNDEFINED> instruction: 0x00002db3
   11758:	muleq	r0, r1, sp
   1175c:	andeq	r2, r0, pc, ror #26
   11760:	andeq	r2, r0, sp, asr #26
   11764:	andeq	r2, r0, fp, lsr #26
   11768:	andeq	r2, r0, r2, ror #24
   1176c:	muleq	r0, r4, fp
   11770:	andeq	r2, r0, r9, lsl #24
   11774:	andeq	r2, r0, r4, lsr pc
   11778:	andeq	r2, r0, r0, asr r8
   1177c:	andeq	r2, r0, r1, lsl #17
   11780:	andeq	r2, r0, r5, ror #17
   11784:	andeq	r2, r0, r8, ror #17
   11788:	andeq	r2, r0, r1, ror #16
   1178c:	andeq	r2, r0, r5, asr #17
   11790:	strdeq	r2, [r0], -sp
   11794:	andeq	r2, r0, r1, asr #16
   11798:	andeq	r2, r0, r5, lsr #17
   1179c:	andeq	r2, r0, ip, lsl r9
   117a0:	andeq	r2, r0, r1, lsr #16
   117a4:	andeq	r2, r0, r5, lsl #17
   117a8:	andeq	r2, r0, fp, lsr r9
   117ac:	andeq	r2, r0, r1, lsl #16
   117b0:	andeq	r2, r0, r5, ror #16
   117b4:	andeq	r2, r0, r2, asr r9
   117b8:	andeq	r2, r0, r1, ror #15
   117bc:	andeq	r2, r0, r5, asr #16
   117c0:	andeq	r2, r0, r8, ror #18
   117c4:	andeq	r2, r0, r1, asr #15
   117c8:	andeq	r2, r0, r5, lsr #16
   117cc:	andeq	r2, r0, r4, ror #21
   117d0:	strdeq	r2, [r0], -sp
   117d4:	andeq	r2, r0, r1, ror #18

000117d8 <main@@Base>:
   117d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117dc:	add	fp, sp, #28
   117e0:	sub	sp, sp, #20
   117e4:	sub	r2, r0, #1
   117e8:	cmp	r2, #2
   117ec:	bcs	11b24 <main@@Base+0x34c>
   117f0:	cmp	r0, #2
   117f4:	bne	1180c <main@@Base+0x34>
   117f8:	ldr	r0, [r1, #4]
   117fc:	ldr	r1, [pc, #844]	; 11b50 <main@@Base+0x378>
   11800:	ldr	r1, [pc, r1]
   11804:	str	r0, [r1]
   11808:	b	11818 <main@@Base+0x40>
   1180c:	ldr	r0, [pc, #824]	; 11b4c <main@@Base+0x374>
   11810:	ldr	r0, [pc, r0]
   11814:	ldr	r0, [r0]
   11818:	ldr	r1, [pc, #820]	; 11b54 <main@@Base+0x37c>
   1181c:	add	r1, pc, r1
   11820:	bl	10e68 <fopen@plt>
   11824:	mov	r8, #0
   11828:	cmp	r0, #0
   1182c:	beq	11ae8 <main@@Base+0x310>
   11830:	mov	r1, #0
   11834:	mov	r2, #2
   11838:	mov	r5, r0
   1183c:	mov	r7, #0
   11840:	bl	10f34 <fseek@plt>
   11844:	mov	r0, r5
   11848:	bl	10e8c <ftell@plt>
   1184c:	mov	r4, r0
   11850:	cmp	r0, #1024	; 0x400
   11854:	bhi	11adc <main@@Base+0x304>
   11858:	mov	r0, r5
   1185c:	bl	10e98 <rewind@plt>
   11860:	cmp	r4, #0
   11864:	mov	r0, r4
   11868:	movweq	r0, #1
   1186c:	bl	10ebc <malloc@plt>
   11870:	cmp	r0, #0
   11874:	beq	11adc <main@@Base+0x304>
   11878:	mov	r6, r0
   1187c:	mov	r1, #0
   11880:	mov	r7, r1
   11884:	add	r0, r6, r1
   11888:	sub	r2, r4, r1
   1188c:	mov	r1, #1
   11890:	mov	r3, r5
   11894:	bl	10f28 <fread_unlocked@plt>
   11898:	add	r1, r0, r7
   1189c:	cmp	r0, #0
   118a0:	bne	11880 <main@@Base+0xa8>
   118a4:	mov	r0, r5
   118a8:	bl	10f10 <fclose@plt>
   118ac:	cmp	r4, r7
   118b0:	bne	118bc <main@@Base+0xe4>
   118b4:	mov	r7, r6
   118b8:	b	118c8 <main@@Base+0xf0>
   118bc:	mov	r0, r6
   118c0:	bl	10e74 <free@plt>
   118c4:	mov	r7, #0
   118c8:	add	r0, r4, #255	; 0xff
   118cc:	mov	r6, sp
   118d0:	mov	r1, #256	; 0x100
   118d4:	str	r8, [sp]
   118d8:	bic	r2, r0, #255	; 0xff
   118dc:	mov	r0, r6
   118e0:	bl	10ef8 <posix_memalign@plt>
   118e4:	ldr	r5, [sp]
   118e8:	cmp	r0, #0
   118ec:	cmpne	r5, #0
   118f0:	beq	11904 <main@@Base+0x12c>
   118f4:	mov	r0, r5
   118f8:	bl	10e74 <free@plt>
   118fc:	mov	r5, #0
   11900:	str	r5, [sp]
   11904:	mov	r0, r5
   11908:	mov	r1, r7
   1190c:	mov	r2, r4
   11910:	bl	10e80 <memcpy@plt>
   11914:	mov	r0, r7
   11918:	bl	10e74 <free@plt>
   1191c:	ldr	r9, [pc, #564]	; 11b58 <main@@Base+0x380>
   11920:	cmp	r5, #0
   11924:	ldr	r9, [pc, r9]
   11928:	ldr	r7, [r9]
   1192c:	bne	11954 <main@@Base+0x17c>
   11930:	ldr	r0, [pc, #548]	; 11b5c <main@@Base+0x384>
   11934:	ldr	r0, [pc, r0]
   11938:	ldr	r2, [r0]
   1193c:	ldr	r1, [pc, #540]	; 11b60 <main@@Base+0x388>
   11940:	mov	r0, r7
   11944:	add	r1, pc, r1
   11948:	bl	10eec <fprintf@plt>
   1194c:	mvn	r4, #0
   11950:	b	11ad0 <main@@Base+0x2f8>
   11954:	ldr	r1, [pc, #520]	; 11b64 <main@@Base+0x38c>
   11958:	ldr	r2, [pc, #520]	; 11b68 <main@@Base+0x390>
   1195c:	mov	r0, r7
   11960:	add	r1, pc, r1
   11964:	add	r2, pc, r2
   11968:	bl	10eec <fprintf@plt>
   1196c:	cmp	r4, #0
   11970:	beq	11a60 <main@@Base+0x288>
   11974:	ldr	sl, [pc, #496]	; 11b6c <main@@Base+0x394>
   11978:	mov	r9, #0
   1197c:	add	sl, pc, sl
   11980:	ands	r8, r9, #15
   11984:	bne	11a08 <main@@Base+0x230>
   11988:	b	119e8 <main@@Base+0x210>
   1198c:	ldr	r1, [pc, #480]	; 11b74 <main@@Base+0x39c>
   11990:	mov	r0, r7
   11994:	mov	r2, r9
   11998:	add	r1, pc, r1
   1199c:	bl	10eec <fprintf@plt>
   119a0:	ldrb	r2, [r5, r9]
   119a4:	mov	r0, r7
   119a8:	mov	r1, sl
   119ac:	bl	10eec <fprintf@plt>
   119b0:	ldrb	r0, [r5, r9]
   119b4:	add	r9, r9, #1
   119b8:	sub	r1, r0, #32
   119bc:	uxtb	r1, r1
   119c0:	cmp	r1, #94	; 0x5e
   119c4:	mov	r1, #0
   119c8:	movwhi	r0, #46	; 0x2e
   119cc:	cmp	r4, r9
   119d0:	strb	r0, [r6, r8]
   119d4:	add	r0, r6, r8
   119d8:	strb	r1, [r0, #1]
   119dc:	beq	11a20 <main@@Base+0x248>
   119e0:	ands	r8, r9, #15
   119e4:	bne	11a08 <main@@Base+0x230>
   119e8:	cmp	r9, #0
   119ec:	beq	1198c <main@@Base+0x1b4>
   119f0:	ldr	r1, [pc, #376]	; 11b70 <main@@Base+0x398>
   119f4:	mov	r0, r7
   119f8:	mov	r2, r6
   119fc:	add	r1, pc, r1
   11a00:	bl	10eec <fprintf@plt>
   11a04:	b	1198c <main@@Base+0x1b4>
   11a08:	tst	r9, #7
   11a0c:	bne	119a0 <main@@Base+0x1c8>
   11a10:	mov	r0, #32
   11a14:	mov	r1, r7
   11a18:	bl	10f1c <fputc@plt>
   11a1c:	b	119a0 <main@@Base+0x1c8>
   11a20:	ldr	r9, [pc, #336]	; 11b78 <main@@Base+0x3a0>
   11a24:	tst	r4, #15
   11a28:	ldr	r9, [pc, r9]
   11a2c:	beq	11a60 <main@@Base+0x288>
   11a30:	ldr	r8, [pc, #324]	; 11b7c <main@@Base+0x3a4>
   11a34:	add	r6, r4, #1
   11a38:	add	r8, pc, r8
   11a3c:	mov	r0, r8
   11a40:	mov	r1, #3
   11a44:	mov	r2, #1
   11a48:	mov	r3, r7
   11a4c:	bl	10ea4 <fwrite@plt>
   11a50:	add	r0, r6, #1
   11a54:	tst	r6, #15
   11a58:	mov	r6, r0
   11a5c:	bne	11a3c <main@@Base+0x264>
   11a60:	ldr	r1, [pc, #280]	; 11b80 <main@@Base+0x3a8>
   11a64:	mov	r2, sp
   11a68:	mov	r0, r7
   11a6c:	add	r1, pc, r1
   11a70:	bl	10eec <fprintf@plt>
   11a74:	ldr	r2, [pc, #264]	; 11b84 <main@@Base+0x3ac>
   11a78:	ldr	r3, [pc, #264]	; 11b88 <main@@Base+0x3b0>
   11a7c:	mov	r0, r5
   11a80:	mov	r1, r4
   11a84:	add	r2, pc, r2
   11a88:	add	r3, pc, r3
   11a8c:	bl	131a0 <flatcc_verify_table_as_root@@Base>
   11a90:	cmp	r0, #0
   11a94:	bne	11af0 <main@@Base+0x318>
   11a98:	ldr	r2, [pc, #240]	; 11b90 <main@@Base+0x3b8>
   11a9c:	ldr	r3, [pc, #240]	; 11b94 <main@@Base+0x3bc>
   11aa0:	mov	r0, r5
   11aa4:	mov	r1, r4
   11aa8:	add	r2, pc, r2
   11aac:	add	r3, pc, r3
   11ab0:	bl	131a0 <flatcc_verify_table_as_root@@Base>
   11ab4:	cmp	r0, #0
   11ab8:	bne	11b04 <main@@Base+0x32c>
   11abc:	mov	r0, r5
   11ac0:	bl	11048 <verify_monster@@Base>
   11ac4:	mov	r4, r0
   11ac8:	mov	r0, r5
   11acc:	bl	10e74 <free@plt>
   11ad0:	mov	r0, r4
   11ad4:	sub	sp, fp, #28
   11ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11adc:	mov	r0, r5
   11ae0:	bl	10f10 <fclose@plt>
   11ae4:	b	118c8 <main@@Base+0xf0>
   11ae8:	mov	r4, #0
   11aec:	b	118c4 <main@@Base+0xec>
   11af0:	ldr	r3, [r9]
   11af4:	ldr	r0, [pc, #144]	; 11b8c <main@@Base+0x3b4>
   11af8:	mov	r1, #38	; 0x26
   11afc:	add	r0, pc, r0
   11b00:	b	11b14 <main@@Base+0x33c>
   11b04:	ldr	r3, [r9]
   11b08:	ldr	r0, [pc, #136]	; 11b98 <main@@Base+0x3c0>
   11b0c:	mov	r1, #62	; 0x3e
   11b10:	add	r0, pc, r0
   11b14:	mov	r2, #1
   11b18:	bl	10ea4 <fwrite@plt>
   11b1c:	mvn	r4, #0
   11b20:	b	11ac8 <main@@Base+0x2f0>
   11b24:	ldr	r0, [pc, #112]	; 11b9c <main@@Base+0x3c4>
   11b28:	mov	r1, #63	; 0x3f
   11b2c:	mov	r2, #1
   11b30:	ldr	r0, [pc, r0]
   11b34:	ldr	r3, [r0]
   11b38:	ldr	r0, [pc, #96]	; 11ba0 <main@@Base+0x3c8>
   11b3c:	add	r0, pc, r0
   11b40:	bl	10ea4 <fwrite@plt>
   11b44:	mov	r0, #1
   11b48:	bl	10ee0 <exit@plt>
   11b4c:	andeq	r3, r1, r4, asr r8
   11b50:	andeq	r3, r1, r4, ror #16
   11b54:	andeq	r2, r0, fp, ror #20
   11b58:	andeq	r3, r1, r8, lsr r7
   11b5c:	andeq	r3, r1, r0, lsr r7
   11b60:	andeq	r2, r0, r8, asr #15
   11b64:	andeq	r2, r0, sl, lsr #18
   11b68:	andeq	r2, r0, r8, asr #9
   11b6c:	andeq	r2, r0, r1, lsr #18
   11b70:	muleq	r0, r3, r8
   11b74:	strdeq	r2, [r0], -sp
   11b78:	andeq	r3, r1, r4, lsr r6
   11b7c:	andeq	r2, r0, fp, ror #16
   11b80:	andeq	r2, r0, r3, lsr #16
   11b84:	andeq	r2, r0, sp, lsr #13
   11b88:	andeq	r0, r0, r4, lsl r1
   11b8c:	andeq	r2, r0, sl, lsr r6
   11b90:	andeq	r2, r0, r9, lsl #13
   11b94:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11b98:	andeq	r2, r0, sp, asr #12
   11b9c:	andeq	r3, r1, ip, lsr #10
   11ba0:	muleq	r0, r0, r5
   11ba4:	push	{r4, r5, r6, r7, fp, lr}
   11ba8:	add	fp, sp, #16
   11bac:	sub	sp, sp, #8
   11bb0:	mov	r1, #0
   11bb4:	mov	r2, #32
   11bb8:	mov	r3, #16
   11bbc:	mov	r4, r0
   11bc0:	bl	12588 <flatcc_verify_field@@Base>
   11bc4:	cmp	r0, #0
   11bc8:	bne	11fd0 <main@@Base+0x7f8>
   11bcc:	mov	r0, r4
   11bd0:	mov	r1, #2
   11bd4:	mov	r2, #2
   11bd8:	mov	r3, #2
   11bdc:	bl	12588 <flatcc_verify_field@@Base>
   11be0:	cmp	r0, #0
   11be4:	bne	11fd0 <main@@Base+0x7f8>
   11be8:	mov	r0, r4
   11bec:	mov	r1, #1
   11bf0:	mov	r2, #2
   11bf4:	mov	r3, #2
   11bf8:	bl	12588 <flatcc_verify_field@@Base>
   11bfc:	cmp	r0, #0
   11c00:	bne	11fd0 <main@@Base+0x7f8>
   11c04:	mov	r0, r4
   11c08:	mov	r1, #3
   11c0c:	mov	r2, #1
   11c10:	bl	1260c <flatcc_verify_string_field@@Base>
   11c14:	cmp	r0, #0
   11c18:	bne	11fd0 <main@@Base+0x7f8>
   11c1c:	mov	r0, r4
   11c20:	mov	r1, #6
   11c24:	mov	r2, #1
   11c28:	mov	r3, #1
   11c2c:	mov	r5, #1
   11c30:	bl	12588 <flatcc_verify_field@@Base>
   11c34:	cmp	r0, #0
   11c38:	bne	11fd0 <main@@Base+0x7f8>
   11c3c:	mvn	r0, #0
   11c40:	mov	r1, #5
   11c44:	mov	r2, #0
   11c48:	mov	r3, #1
   11c4c:	str	r5, [sp]
   11c50:	str	r0, [sp, #4]
   11c54:	mov	r0, r4
   11c58:	bl	126ec <flatcc_verify_vector_field@@Base>
   11c5c:	cmp	r0, #0
   11c60:	bne	11fd0 <main@@Base+0x7f8>
   11c64:	ldr	r3, [pc, #908]	; 11ff8 <main@@Base+0x820>
   11c68:	mov	r0, r4
   11c6c:	mov	r1, #11
   11c70:	mov	r2, #0
   11c74:	add	r3, pc, r3
   11c78:	bl	12ad4 <flatcc_verify_table_vector_field@@Base>
   11c7c:	cmp	r0, #0
   11c80:	bne	11fd0 <main@@Base+0x7f8>
   11c84:	mov	r0, r4
   11c88:	mov	r1, #10
   11c8c:	mov	r2, #0
   11c90:	bl	127e4 <flatcc_verify_string_vector_field@@Base>
   11c94:	cmp	r0, #0
   11c98:	bne	11fd0 <main@@Base+0x7f8>
   11c9c:	mov	r0, r4
   11ca0:	mov	r1, #28
   11ca4:	mov	r2, #0
   11ca8:	bl	127e4 <flatcc_verify_string_vector_field@@Base>
   11cac:	cmp	r0, #0
   11cb0:	bne	11fd0 <main@@Base+0x7f8>
   11cb4:	mvn	r0, #0
   11cb8:	mov	r1, #1
   11cbc:	mov	r2, #0
   11cc0:	mov	r3, #1
   11cc4:	str	r1, [sp]
   11cc8:	str	r0, [sp, #4]
   11ccc:	mov	r0, r4
   11cd0:	mov	r1, #24
   11cd4:	bl	126ec <flatcc_verify_vector_field@@Base>
   11cd8:	cmp	r0, #0
   11cdc:	bne	11fd0 <main@@Base+0x7f8>
   11ce0:	mvn	r0, #-536870912	; 0xe0000000
   11ce4:	mov	r1, #4
   11ce8:	mov	r2, #0
   11cec:	mov	r3, #8
   11cf0:	str	r1, [sp]
   11cf4:	str	r0, [sp, #4]
   11cf8:	mov	r0, r4
   11cfc:	mov	r1, #29
   11d00:	bl	126ec <flatcc_verify_vector_field@@Base>
   11d04:	cmp	r0, #0
   11d08:	bne	11fd0 <main@@Base+0x7f8>
   11d0c:	ldr	r5, [pc, #744]	; 11ffc <main@@Base+0x824>
   11d10:	mov	r0, r4
   11d14:	mov	r1, #12
   11d18:	mov	r2, #0
   11d1c:	add	r5, pc, r5
   11d20:	mov	r3, r5
   11d24:	bl	1296c <flatcc_verify_table_field@@Base>
   11d28:	cmp	r0, #0
   11d2c:	bne	11fd0 <main@@Base+0x7f8>
   11d30:	ldr	r3, [pc, #712]	; 12000 <main@@Base+0x828>
   11d34:	mov	r0, r4
   11d38:	mov	r1, #8
   11d3c:	mov	r2, #0
   11d40:	add	r3, pc, r3
   11d44:	bl	138fc <flatcc_verify_union_field@@Base>
   11d48:	cmp	r0, #0
   11d4c:	bne	11fd0 <main@@Base+0x7f8>
   11d50:	mvn	r6, #-1073741824	; 0xc0000000
   11d54:	mov	r7, #2
   11d58:	mov	r0, r4
   11d5c:	mov	r1, #9
   11d60:	mov	r2, #0
   11d64:	mov	r3, #4
   11d68:	str	r7, [sp]
   11d6c:	str	r6, [sp, #4]
   11d70:	bl	126ec <flatcc_verify_vector_field@@Base>
   11d74:	cmp	r0, #0
   11d78:	bne	11fd0 <main@@Base+0x7f8>
   11d7c:	mov	r0, r4
   11d80:	mov	r1, #31
   11d84:	mov	r2, #0
   11d88:	mov	r3, #4
   11d8c:	str	r7, [sp]
   11d90:	str	r6, [sp, #4]
   11d94:	bl	126ec <flatcc_verify_vector_field@@Base>
   11d98:	cmp	r0, #0
   11d9c:	bne	11fd0 <main@@Base+0x7f8>
   11da0:	mov	r0, #1
   11da4:	mov	r1, #13
   11da8:	mov	r2, #0
   11dac:	mov	r3, #0
   11db0:	stm	sp, {r0, r5}
   11db4:	mov	r0, r4
   11db8:	bl	135dc <flatcc_verify_table_as_nested_root@@Base>
   11dbc:	cmp	r0, #0
   11dc0:	bne	11fd0 <main@@Base+0x7f8>
   11dc4:	ldr	r3, [pc, #568]	; 12004 <main@@Base+0x82c>
   11dc8:	mov	r0, r4
   11dcc:	mov	r1, #14
   11dd0:	mov	r2, #0
   11dd4:	add	r3, pc, r3
   11dd8:	bl	1296c <flatcc_verify_table_field@@Base>
   11ddc:	cmp	r0, #0
   11de0:	bne	11fd0 <main@@Base+0x7f8>
   11de4:	mov	r0, r4
   11de8:	mov	r1, #15
   11dec:	mov	r2, #1
   11df0:	mov	r3, #1
   11df4:	bl	12588 <flatcc_verify_field@@Base>
   11df8:	cmp	r0, #0
   11dfc:	bne	11fd0 <main@@Base+0x7f8>
   11e00:	mov	r0, r4
   11e04:	mov	r1, #16
   11e08:	mov	r2, #4
   11e0c:	mov	r3, #4
   11e10:	bl	12588 <flatcc_verify_field@@Base>
   11e14:	cmp	r0, #0
   11e18:	bne	11fd0 <main@@Base+0x7f8>
   11e1c:	mov	r0, r4
   11e20:	mov	r1, #17
   11e24:	mov	r2, #4
   11e28:	mov	r3, #4
   11e2c:	bl	12588 <flatcc_verify_field@@Base>
   11e30:	cmp	r0, #0
   11e34:	bne	11fd0 <main@@Base+0x7f8>
   11e38:	mov	r0, r4
   11e3c:	mov	r1, #18
   11e40:	mov	r2, #8
   11e44:	mov	r3, #8
   11e48:	bl	12588 <flatcc_verify_field@@Base>
   11e4c:	cmp	r0, #0
   11e50:	bne	11fd0 <main@@Base+0x7f8>
   11e54:	mov	r0, r4
   11e58:	mov	r1, #19
   11e5c:	mov	r2, #8
   11e60:	mov	r3, #8
   11e64:	bl	12588 <flatcc_verify_field@@Base>
   11e68:	cmp	r0, #0
   11e6c:	bne	11fd0 <main@@Base+0x7f8>
   11e70:	mov	r0, r4
   11e74:	mov	r1, #20
   11e78:	mov	r2, #4
   11e7c:	mov	r3, #4
   11e80:	bl	12588 <flatcc_verify_field@@Base>
   11e84:	cmp	r0, #0
   11e88:	bne	11fd0 <main@@Base+0x7f8>
   11e8c:	mov	r0, r4
   11e90:	mov	r1, #21
   11e94:	mov	r2, #4
   11e98:	mov	r3, #4
   11e9c:	bl	12588 <flatcc_verify_field@@Base>
   11ea0:	cmp	r0, #0
   11ea4:	bne	11fd0 <main@@Base+0x7f8>
   11ea8:	mov	r0, r4
   11eac:	mov	r1, #22
   11eb0:	mov	r2, #8
   11eb4:	mov	r3, #8
   11eb8:	bl	12588 <flatcc_verify_field@@Base>
   11ebc:	cmp	r0, #0
   11ec0:	bne	11fd0 <main@@Base+0x7f8>
   11ec4:	mov	r0, r4
   11ec8:	mov	r1, #23
   11ecc:	mov	r2, #8
   11ed0:	mov	r3, #8
   11ed4:	bl	12588 <flatcc_verify_field@@Base>
   11ed8:	cmp	r0, #0
   11edc:	bne	11fd0 <main@@Base+0x7f8>
   11ee0:	mov	r0, r4
   11ee4:	mov	r1, #25
   11ee8:	mov	r2, #4
   11eec:	mov	r3, #4
   11ef0:	bl	12588 <flatcc_verify_field@@Base>
   11ef4:	cmp	r0, #0
   11ef8:	bne	11fd0 <main@@Base+0x7f8>
   11efc:	mov	r0, r4
   11f00:	mov	r1, #26
   11f04:	mov	r2, #4
   11f08:	mov	r3, #4
   11f0c:	bl	12588 <flatcc_verify_field@@Base>
   11f10:	cmp	r0, #0
   11f14:	bne	11fd0 <main@@Base+0x7f8>
   11f18:	mov	r0, r4
   11f1c:	mov	r1, #27
   11f20:	mov	r2, #4
   11f24:	mov	r3, #4
   11f28:	bl	12588 <flatcc_verify_field@@Base>
   11f2c:	cmp	r0, #0
   11f30:	bne	11fd0 <main@@Base+0x7f8>
   11f34:	mvn	r0, #0
   11f38:	mov	r1, #1
   11f3c:	mov	r2, #0
   11f40:	mov	r3, #1
   11f44:	str	r1, [sp]
   11f48:	str	r0, [sp, #4]
   11f4c:	mov	r0, r4
   11f50:	mov	r1, #30
   11f54:	bl	126ec <flatcc_verify_vector_field@@Base>
   11f58:	cmp	r0, #0
   11f5c:	bne	11fd0 <main@@Base+0x7f8>
   11f60:	mvn	r5, #-536870912	; 0xe0000000
   11f64:	mov	r6, #8
   11f68:	mov	r0, r4
   11f6c:	mov	r1, #32
   11f70:	mov	r2, #0
   11f74:	mov	r3, #8
   11f78:	str	r6, [sp]
   11f7c:	str	r5, [sp, #4]
   11f80:	bl	126ec <flatcc_verify_vector_field@@Base>
   11f84:	cmp	r0, #0
   11f88:	bne	11fd0 <main@@Base+0x7f8>
   11f8c:	mov	r0, r4
   11f90:	mov	r1, #33	; 0x21
   11f94:	mov	r2, #0
   11f98:	mov	r3, #8
   11f9c:	str	r6, [sp]
   11fa0:	str	r5, [sp, #4]
   11fa4:	bl	126ec <flatcc_verify_vector_field@@Base>
   11fa8:	cmp	r0, #0
   11fac:	bne	11fd0 <main@@Base+0x7f8>
   11fb0:	ldr	r3, [pc, #80]	; 12008 <main@@Base+0x830>
   11fb4:	mov	r0, r4
   11fb8:	mov	r1, #34	; 0x22
   11fbc:	mov	r2, #0
   11fc0:	add	r3, pc, r3
   11fc4:	bl	1296c <flatcc_verify_table_field@@Base>
   11fc8:	cmp	r0, #0
   11fcc:	beq	11fd8 <main@@Base+0x800>
   11fd0:	sub	sp, fp, #16
   11fd4:	pop	{r4, r5, r6, r7, fp, pc}
   11fd8:	ldr	r3, [pc, #44]	; 1200c <main@@Base+0x834>
   11fdc:	mov	r0, r4
   11fe0:	mov	r1, #35	; 0x23
   11fe4:	mov	r2, #0
   11fe8:	add	r3, pc, r3
   11fec:	sub	sp, fp, #16
   11ff0:	pop	{r4, r5, r6, r7, fp, lr}
   11ff4:	b	1296c <flatcc_verify_table_field@@Base>
   11ff8:			; <UNDEFINED> instruction: 0xffffff28
   11ffc:			; <UNDEFINED> instruction: 0xfffffe80
   12000:	andeq	r0, r0, r8, asr #5
   12004:	andeq	r0, r0, r4, ror #4
   12008:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1200c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   12010:	ldrb	r1, [r0, #12]
   12014:	sub	r1, r1, #1
   12018:	uxtb	r2, r1
   1201c:	cmp	r2, #3
   12020:	movhi	r0, #0
   12024:	bxhi	lr
   12028:	ldr	r2, [pc, #12]	; 1203c <main@@Base+0x864>
   1202c:	sxtb	r1, r1
   12030:	add	r2, pc, r2
   12034:	ldr	r1, [r2, r1, lsl #2]
   12038:	b	12dac <flatcc_verify_union_table@@Base>
   1203c:	andeq	r2, r1, r4, lsr lr
   12040:	push	{r4, sl, fp, lr}
   12044:	add	fp, sp, #8
   12048:	mov	r1, #0
   1204c:	mov	r2, #0
   12050:	mov	r4, r0
   12054:	bl	1260c <flatcc_verify_string_field@@Base>
   12058:	cmp	r0, #0
   1205c:	popne	{r4, sl, fp, pc}
   12060:	mov	r0, r4
   12064:	mov	r1, #1
   12068:	mov	r2, #8
   1206c:	mov	r3, #8
   12070:	bl	12588 <flatcc_verify_field@@Base>
   12074:	cmp	r0, #0
   12078:	beq	12080 <main@@Base+0x8a8>
   1207c:	pop	{r4, sl, fp, pc}
   12080:	mov	r0, r4
   12084:	mov	r1, #2
   12088:	mov	r2, #2
   1208c:	mov	r3, #2
   12090:	pop	{r4, sl, fp, lr}
   12094:	b	12588 <flatcc_verify_field@@Base>
   12098:	mov	r0, #0
   1209c:	bx	lr
   120a0:	push	{r4, r5, r6, sl, fp, lr}
   120a4:	add	fp, sp, #16
   120a8:	sub	sp, sp, #8
   120ac:	mvn	r5, #0
   120b0:	mov	r6, #1
   120b4:	mov	r1, #0
   120b8:	mov	r2, #0
   120bc:	mov	r3, #1
   120c0:	mov	r4, r0
   120c4:	str	r6, [sp]
   120c8:	str	r5, [sp, #4]
   120cc:	bl	126ec <flatcc_verify_vector_field@@Base>
   120d0:	cmp	r0, #0
   120d4:	bne	120fc <main@@Base+0x924>
   120d8:	mov	r0, r4
   120dc:	mov	r1, #1
   120e0:	mov	r2, #0
   120e4:	mov	r3, #1
   120e8:	str	r6, [sp]
   120ec:	str	r5, [sp, #4]
   120f0:	bl	126ec <flatcc_verify_vector_field@@Base>
   120f4:	cmp	r0, #0
   120f8:	beq	12104 <main@@Base+0x92c>
   120fc:	sub	sp, fp, #16
   12100:	pop	{r4, r5, r6, sl, fp, pc}
   12104:	ldr	r0, [pc, #40]	; 12134 <main@@Base+0x95c>
   12108:	mov	r1, #1
   1210c:	mov	r2, #0
   12110:	mov	r3, #0
   12114:	str	r1, [sp]
   12118:	mov	r1, #2
   1211c:	add	r0, pc, r0
   12120:	str	r0, [sp, #4]
   12124:	mov	r0, r4
   12128:	bl	135dc <flatcc_verify_table_as_nested_root@@Base>
   1212c:	sub	sp, fp, #16
   12130:	pop	{r4, r5, r6, sl, fp, pc}
   12134:			; <UNDEFINED> instruction: 0xfffffa80
   12138:	push	{r4, sl, fp, lr}
   1213c:	add	fp, sp, #8
   12140:	mov	r1, #0
   12144:	mov	r2, #1
   12148:	mov	r3, #1
   1214c:	mov	r4, r0
   12150:	bl	12588 <flatcc_verify_field@@Base>
   12154:	cmp	r0, #0
   12158:	bne	12194 <main@@Base+0x9bc>
   1215c:	mov	r0, r4
   12160:	mov	r1, #1
   12164:	mov	r2, #1
   12168:	mov	r3, #1
   1216c:	bl	12588 <flatcc_verify_field@@Base>
   12170:	cmp	r0, #0
   12174:	popne	{r4, sl, fp, pc}
   12178:	mov	r0, r4
   1217c:	mov	r1, #2
   12180:	mov	r2, #1
   12184:	mov	r3, #1
   12188:	bl	12588 <flatcc_verify_field@@Base>
   1218c:	cmp	r0, #0
   12190:	beq	12198 <main@@Base+0x9c0>
   12194:	pop	{r4, sl, fp, pc}
   12198:	mov	r0, r4
   1219c:	mov	r1, #3
   121a0:	mov	r2, #1
   121a4:	mov	r3, #1
   121a8:	pop	{r4, sl, fp, lr}
   121ac:	b	12588 <flatcc_verify_field@@Base>
   121b0:	mov	r0, #0
   121b4:	bx	lr
   121b8:	push	{r4, sl, fp, lr}
   121bc:	add	fp, sp, #8
   121c0:	ldr	r3, [pc, #88]	; 12220 <main@@Base+0xa48>
   121c4:	mov	r1, #0
   121c8:	mov	r2, #0
   121cc:	mov	r4, r0
   121d0:	add	r3, pc, r3
   121d4:	bl	1296c <flatcc_verify_table_field@@Base>
   121d8:	cmp	r0, #0
   121dc:	popne	{r4, sl, fp, pc}
   121e0:	ldr	r3, [pc, #60]	; 12224 <main@@Base+0xa4c>
   121e4:	mov	r0, r4
   121e8:	mov	r1, #1
   121ec:	mov	r2, #0
   121f0:	add	r3, pc, r3
   121f4:	bl	1296c <flatcc_verify_table_field@@Base>
   121f8:	cmp	r0, #0
   121fc:	beq	12204 <main@@Base+0xa2c>
   12200:	pop	{r4, sl, fp, pc}
   12204:	ldr	r3, [pc, #28]	; 12228 <main@@Base+0xa50>
   12208:	mov	r0, r4
   1220c:	mov	r1, #3
   12210:	mov	r2, #0
   12214:	add	r3, pc, r3
   12218:	pop	{r4, sl, fp, lr}
   1221c:	b	13a68 <flatcc_verify_union_vector_field@@Base>
   12220:	andeq	r0, r0, r4, asr r0
   12224:	andeq	r0, r0, r8, lsr #1
   12228:			; <UNDEFINED> instruction: 0xfffffdf4
   1222c:	push	{r4, sl, fp, lr}
   12230:	add	fp, sp, #8
   12234:	ldr	r3, [pc, #88]	; 12294 <main@@Base+0xabc>
   12238:	mov	r1, #0
   1223c:	mov	r2, #0
   12240:	mov	r4, r0
   12244:	add	r3, pc, r3
   12248:	bl	1296c <flatcc_verify_table_field@@Base>
   1224c:	cmp	r0, #0
   12250:	popne	{r4, sl, fp, pc}
   12254:	ldr	r3, [pc, #60]	; 12298 <main@@Base+0xac0>
   12258:	mov	r0, r4
   1225c:	mov	r1, #1
   12260:	mov	r2, #0
   12264:	add	r3, pc, r3
   12268:	bl	1296c <flatcc_verify_table_field@@Base>
   1226c:	cmp	r0, #0
   12270:	beq	12278 <main@@Base+0xaa0>
   12274:	pop	{r4, sl, fp, pc}
   12278:	ldr	r3, [pc, #28]	; 1229c <main@@Base+0xac4>
   1227c:	mov	r0, r4
   12280:	mov	r1, #2
   12284:	mov	r2, #0
   12288:	add	r3, pc, r3
   1228c:	pop	{r4, sl, fp, lr}
   12290:	b	1296c <flatcc_verify_table_field@@Base>
   12294:	andeq	r0, r0, r0, lsl r1
   12298:	andeq	r0, r0, r8, ror #3
   1229c:	andeq	r0, r0, r0, lsl #4
   122a0:	push	{r4, sl, fp, lr}
   122a4:	add	fp, sp, #8
   122a8:	ldr	r3, [pc, #152]	; 12348 <main@@Base+0xb70>
   122ac:	mov	r1, #1
   122b0:	mov	r2, #0
   122b4:	mov	r4, r0
   122b8:	add	r3, pc, r3
   122bc:	bl	138fc <flatcc_verify_union_field@@Base>
   122c0:	cmp	r0, #0
   122c4:	bne	12328 <main@@Base+0xb50>
   122c8:	ldr	r3, [pc, #124]	; 1234c <main@@Base+0xb74>
   122cc:	mov	r0, r4
   122d0:	mov	r1, #3
   122d4:	mov	r2, #0
   122d8:	add	r3, pc, r3
   122dc:	bl	138fc <flatcc_verify_union_field@@Base>
   122e0:	cmp	r0, #0
   122e4:	bne	12328 <main@@Base+0xb50>
   122e8:	ldr	r3, [pc, #96]	; 12350 <main@@Base+0xb78>
   122ec:	mov	r0, r4
   122f0:	mov	r1, #5
   122f4:	mov	r2, #0
   122f8:	add	r3, pc, r3
   122fc:	bl	138fc <flatcc_verify_union_field@@Base>
   12300:	cmp	r0, #0
   12304:	popne	{r4, sl, fp, pc}
   12308:	ldr	r3, [pc, #68]	; 12354 <main@@Base+0xb7c>
   1230c:	mov	r0, r4
   12310:	mov	r1, #7
   12314:	mov	r2, #0
   12318:	add	r3, pc, r3
   1231c:	bl	138fc <flatcc_verify_union_field@@Base>
   12320:	cmp	r0, #0
   12324:	beq	1232c <main@@Base+0xb54>
   12328:	pop	{r4, sl, fp, pc}
   1232c:	ldr	r3, [pc, #36]	; 12358 <main@@Base+0xb80>
   12330:	mov	r0, r4
   12334:	mov	r1, #9
   12338:	mov	r2, #0
   1233c:	add	r3, pc, r3
   12340:	pop	{r4, sl, fp, lr}
   12344:	b	13a68 <flatcc_verify_union_vector_field@@Base>
   12348:	andeq	r0, r0, ip, lsl #4
   1234c:	andeq	r0, r0, ip, ror #3
   12350:	andeq	r0, r0, ip, asr #3
   12354:	andeq	r0, r0, ip, lsr #3
   12358:	andeq	r0, r0, r8, lsl #3
   1235c:	push	{r4, sl, fp, lr}
   12360:	add	fp, sp, #8
   12364:	mov	r1, #0
   12368:	mov	r2, #0
   1236c:	mov	r4, r0
   12370:	bl	1260c <flatcc_verify_string_field@@Base>
   12374:	cmp	r0, #0
   12378:	bne	12438 <main@@Base+0xc60>
   1237c:	mov	r0, r4
   12380:	mov	r1, #1
   12384:	mov	r2, #4
   12388:	mov	r3, #4
   1238c:	bl	12588 <flatcc_verify_field@@Base>
   12390:	cmp	r0, #0
   12394:	bne	12438 <main@@Base+0xc60>
   12398:	mov	r0, r4
   1239c:	mov	r1, #2
   123a0:	mov	r2, #0
   123a4:	bl	1260c <flatcc_verify_string_field@@Base>
   123a8:	cmp	r0, #0
   123ac:	bne	12438 <main@@Base+0xc60>
   123b0:	mov	r0, r4
   123b4:	mov	r1, #3
   123b8:	mov	r2, #8
   123bc:	mov	r3, #8
   123c0:	bl	12588 <flatcc_verify_field@@Base>
   123c4:	cmp	r0, #0
   123c8:	bne	12438 <main@@Base+0xc60>
   123cc:	mov	r0, r4
   123d0:	mov	r1, #4
   123d4:	mov	r2, #0
   123d8:	bl	1260c <flatcc_verify_string_field@@Base>
   123dc:	cmp	r0, #0
   123e0:	bne	12438 <main@@Base+0xc60>
   123e4:	mov	r0, r4
   123e8:	mov	r1, #5
   123ec:	mov	r2, #8
   123f0:	mov	r3, #8
   123f4:	bl	12588 <flatcc_verify_field@@Base>
   123f8:	cmp	r0, #0
   123fc:	bne	12438 <main@@Base+0xc60>
   12400:	mov	r0, r4
   12404:	mov	r1, #6
   12408:	mov	r2, #4
   1240c:	mov	r3, #4
   12410:	bl	12588 <flatcc_verify_field@@Base>
   12414:	cmp	r0, #0
   12418:	popne	{r4, sl, fp, pc}
   1241c:	mov	r0, r4
   12420:	mov	r1, #7
   12424:	mov	r2, #8
   12428:	mov	r3, #8
   1242c:	bl	12588 <flatcc_verify_field@@Base>
   12430:	cmp	r0, #0
   12434:	beq	1243c <main@@Base+0xc64>
   12438:	pop	{r4, sl, fp, pc}
   1243c:	mov	r0, r4
   12440:	mov	r1, #8
   12444:	mov	r2, #4
   12448:	mov	r3, #4
   1244c:	pop	{r4, sl, fp, lr}
   12450:	b	12588 <flatcc_verify_field@@Base>
   12454:	push	{r4, sl, fp, lr}
   12458:	add	fp, sp, #8
   1245c:	mov	r1, #0
   12460:	mov	r2, #8
   12464:	mov	r3, #8
   12468:	mov	r4, r0
   1246c:	bl	12588 <flatcc_verify_field@@Base>
   12470:	cmp	r0, #0
   12474:	popne	{r4, sl, fp, pc}
   12478:	mov	r0, r4
   1247c:	mov	r1, #1
   12480:	mov	r2, #4
   12484:	mov	r3, #4
   12488:	pop	{r4, sl, fp, lr}
   1248c:	b	12588 <flatcc_verify_field@@Base>
   12490:	push	{r4, sl, fp, lr}
   12494:	add	fp, sp, #8
   12498:	mov	r1, #0
   1249c:	mov	r2, #8
   124a0:	mov	r3, #8
   124a4:	mov	r4, r0
   124a8:	bl	12588 <flatcc_verify_field@@Base>
   124ac:	cmp	r0, #0
   124b0:	popne	{r4, sl, fp, pc}
   124b4:	mov	r0, r4
   124b8:	mov	r1, #1
   124bc:	mov	r2, #4
   124c0:	mov	r3, #4
   124c4:	pop	{r4, sl, fp, lr}
   124c8:	b	12588 <flatcc_verify_field@@Base>
   124cc:	ldrb	r2, [r0, #12]
   124d0:	sub	r1, r2, #2
   124d4:	cmp	r1, #9
   124d8:	bhi	1251c <main@@Base+0xd44>
   124dc:	add	r2, pc, #4
   124e0:	ldr	r1, [r2, r1, lsl #2]
   124e4:	add	pc, r2, r1
   124e8:	andeq	r0, r0, r8, asr #32
   124ec:	andeq	r0, r0, r0, asr #32
   124f0:	andeq	r0, r0, r0, asr #32
   124f4:	andeq	r0, r0, r0, asr #32
   124f8:	andeq	r0, r0, r0, asr #32
   124fc:	andeq	r0, r0, r0, asr #32
   12500:	andeq	r0, r0, r4, asr r0
   12504:	andeq	r0, r0, r8, lsr #32
   12508:	andeq	r0, r0, r8, lsr #32
   1250c:	andeq	r0, r0, ip, lsr r0
   12510:	mov	r1, #4
   12514:	mov	r2, #4
   12518:	b	12e98 <flatcc_verify_union_struct@@Base>
   1251c:	cmp	r2, #255	; 0xff
   12520:	bne	12528 <main@@Base+0xd50>
   12524:	b	12ef0 <flatcc_verify_union_string@@Base>
   12528:	mov	r0, #0
   1252c:	bx	lr
   12530:	ldr	r1, [pc, #16]	; 12548 <main@@Base+0xd70>
   12534:	add	r1, pc, r1
   12538:	b	12dac <flatcc_verify_union_table@@Base>
   1253c:	mov	r1, #2
   12540:	mov	r2, #2
   12544:	b	12e98 <flatcc_verify_union_struct@@Base>
   12548:	andeq	r0, r0, r0, lsl r0
   1254c:	mov	r1, #0
   12550:	mov	r2, #4
   12554:	mov	r3, #4
   12558:	b	12588 <flatcc_verify_field@@Base>

0001255c <flatcc_verify_error_string@@Base>:
   1255c:	cmp	r0, #36	; 0x24
   12560:	bhi	12574 <flatcc_verify_error_string@@Base+0x18>
   12564:	ldr	r1, [pc, #20]	; 12580 <flatcc_verify_error_string@@Base+0x24>
   12568:	add	r1, pc, r1
   1256c:	ldr	r0, [r1, r0, lsl #2]
   12570:	bx	lr
   12574:	ldr	r0, [pc, #8]	; 12584 <flatcc_verify_error_string@@Base+0x28>
   12578:	add	r0, pc, r0
   1257c:	bx	lr
   12580:	andeq	r2, r1, ip, lsl #18
   12584:	andeq	r2, r0, r2, lsl #8

00012588 <flatcc_verify_field@@Base>:
   12588:	push	{r4, sl, fp, lr}
   1258c:	add	fp, sp, #8
   12590:	mov	ip, #4
   12594:	ldrh	r4, [r0, #22]
   12598:	mov	lr, #0
   1259c:	add	r1, ip, r1, lsl #1
   125a0:	uxth	ip, r1
   125a4:	cmp	ip, r4
   125a8:	bcs	12604 <flatcc_verify_field@@Base+0x7c>
   125ac:	ldr	r4, [r0, #12]
   125b0:	uxtah	r1, r4, r1
   125b4:	ldrh	ip, [r1]
   125b8:	cmp	ip, #0
   125bc:	beq	12604 <flatcc_verify_field@@Base+0x7c>
   125c0:	add	r1, ip, r2
   125c4:	ldrh	r2, [r0, #20]
   125c8:	mov	lr, #13
   125cc:	cmp	r1, r2
   125d0:	bhi	12604 <flatcc_verify_field@@Base+0x7c>
   125d4:	ldr	r1, [r0]
   125d8:	mov	lr, #0
   125dc:	add	r2, r1, ip
   125e0:	ldr	r1, [r0, #16]
   125e4:	add	r4, r2, r1
   125e8:	sub	r1, r3, #1
   125ec:	tst	r4, r1
   125f0:	beq	12604 <flatcc_verify_field@@Base+0x7c>
   125f4:	ldr	r0, [r0, #16]
   125f8:	add	r0, r2, r0
   125fc:	ands	lr, r0, r1
   12600:	movwne	lr, #12
   12604:	mov	r0, lr
   12608:	pop	{r4, sl, fp, pc}

0001260c <flatcc_verify_string_field@@Base>:
   1260c:	push	{fp, lr}
   12610:	mov	fp, sp
   12614:	mov	lr, r0
   12618:	mov	r0, #4
   1261c:	add	r0, r0, r1, lsl #1
   12620:	ldrh	r3, [lr, #22]
   12624:	uxth	r1, r0
   12628:	cmp	r1, r3
   1262c:	bcs	12670 <flatcc_verify_string_field@@Base+0x64>
   12630:	ldr	r1, [lr, #12]
   12634:	uxtah	r0, r1, r0
   12638:	ldrh	r1, [r0]
   1263c:	cmp	r1, #0
   12640:	beq	12670 <flatcc_verify_string_field@@Base+0x64>
   12644:	ldrh	r2, [lr, #20]
   12648:	add	r3, r1, #4
   1264c:	mov	r0, #13
   12650:	cmp	r3, r2
   12654:	bhi	1266c <flatcc_verify_string_field@@Base+0x60>
   12658:	ldr	r0, [lr, #16]
   1265c:	add	r2, r0, r1
   12660:	mov	r0, #12
   12664:	tst	r2, #3
   12668:	beq	12680 <flatcc_verify_string_field@@Base+0x74>
   1266c:	pop	{fp, pc}
   12670:	cmp	r2, #0
   12674:	movwne	r2, #1
   12678:	lsl	r0, r2, #2
   1267c:	pop	{fp, pc}
   12680:	cmp	r2, #0
   12684:	beq	126e4 <flatcc_verify_string_field@@Base+0xd8>
   12688:	ldr	ip, [lr]
   1268c:	ldr	r0, [ip, r2]
   12690:	add	r1, r0, r2
   12694:	mov	r0, #17
   12698:	tst	r1, #3
   1269c:	bne	1266c <flatcc_verify_string_field@@Base+0x60>
   126a0:	cmp	r1, r2
   126a4:	bls	1266c <flatcc_verify_string_field@@Base+0x60>
   126a8:	ldr	r3, [lr, #4]
   126ac:	add	r2, r1, #4
   126b0:	cmp	r3, r2
   126b4:	bcc	1266c <flatcc_verify_string_field@@Base+0x60>
   126b8:	ldr	r1, [ip, r1]
   126bc:	sub	lr, r3, r2
   126c0:	mov	r0, #8
   126c4:	add	r3, r1, #1
   126c8:	cmp	lr, r3
   126cc:	popcc	{fp, pc}
   126d0:	add	r0, ip, r2
   126d4:	ldrb	r0, [r0, r1]
   126d8:	cmp	r0, #0
   126dc:	movwne	r0, #7
   126e0:	pop	{fp, pc}
   126e4:	mov	r0, #0
   126e8:	pop	{fp, pc}

000126ec <flatcc_verify_vector_field@@Base>:
   126ec:	push	{r4, sl, fp, lr}
   126f0:	add	fp, sp, #8
   126f4:	mov	ip, r0
   126f8:	mov	r0, #4
   126fc:	add	r0, r0, r1, lsl #1
   12700:	ldrh	r4, [ip, #22]
   12704:	uxth	r1, r0
   12708:	cmp	r1, r4
   1270c:	bcs	12750 <flatcc_verify_vector_field@@Base+0x64>
   12710:	ldr	r1, [ip, #12]
   12714:	uxtah	r0, r1, r0
   12718:	ldrh	r1, [r0]
   1271c:	cmp	r1, #0
   12720:	beq	12750 <flatcc_verify_vector_field@@Base+0x64>
   12724:	ldrh	r2, [ip, #20]
   12728:	add	r4, r1, #4
   1272c:	mov	r0, #13
   12730:	cmp	r4, r2
   12734:	bhi	1274c <flatcc_verify_vector_field@@Base+0x60>
   12738:	ldr	r0, [ip, #16]
   1273c:	add	r2, r0, r1
   12740:	mov	r0, #12
   12744:	tst	r2, #3
   12748:	beq	12760 <flatcc_verify_vector_field@@Base+0x74>
   1274c:	pop	{r4, sl, fp, pc}
   12750:	cmp	r2, #0
   12754:	movwne	r2, #1
   12758:	lsl	r0, r2, #2
   1275c:	pop	{r4, sl, fp, pc}
   12760:	cmp	r2, #0
   12764:	beq	127dc <flatcc_verify_vector_field@@Base+0xf0>
   12768:	ldr	lr, [ip]
   1276c:	ldr	r4, [fp, #8]
   12770:	ldr	r0, [lr, r2]
   12774:	cmp	r4, #4
   12778:	movls	r4, #4
   1277c:	add	r1, r0, r2
   12780:	mov	r0, #16
   12784:	cmp	r1, r2
   12788:	bls	1274c <flatcc_verify_vector_field@@Base+0x60>
   1278c:	ldr	ip, [ip, #4]
   12790:	add	r2, r1, #4
   12794:	cmp	r2, ip
   12798:	bhi	1274c <flatcc_verify_vector_field@@Base+0x60>
   1279c:	sub	r4, r4, #1
   127a0:	orr	r4, r4, #3
   127a4:	tst	r2, r4
   127a8:	bne	1274c <flatcc_verify_vector_field@@Base+0x60>
   127ac:	ldr	r4, [fp, #12]
   127b0:	ldr	r2, [lr, r1]
   127b4:	mov	r0, #25
   127b8:	cmp	r2, r4
   127bc:	pophi	{r4, sl, fp, pc}
   127c0:	mul	r2, r2, r3
   127c4:	sub	r0, ip, r1
   127c8:	sub	r1, r0, #4
   127cc:	mov	r0, #0
   127d0:	cmp	r1, r2
   127d4:	movwcc	r0, #26
   127d8:	pop	{r4, sl, fp, pc}
   127dc:	mov	r0, #0
   127e0:	pop	{r4, sl, fp, pc}

000127e4 <flatcc_verify_string_vector_field@@Base>:
   127e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   127e8:	add	fp, sp, #24
   127ec:	mov	r3, r0
   127f0:	mov	r0, #4
   127f4:	add	r0, r0, r1, lsl #1
   127f8:	ldrh	r7, [r3, #22]
   127fc:	uxth	r1, r0
   12800:	cmp	r1, r7
   12804:	bcs	12848 <flatcc_verify_string_vector_field@@Base+0x64>
   12808:	ldr	r1, [r3, #12]
   1280c:	uxtah	r0, r1, r0
   12810:	ldrh	r1, [r0]
   12814:	cmp	r1, #0
   12818:	beq	12848 <flatcc_verify_string_vector_field@@Base+0x64>
   1281c:	ldrh	r2, [r3, #20]
   12820:	add	r7, r1, #4
   12824:	mov	r0, #13
   12828:	cmp	r7, r2
   1282c:	bhi	12844 <flatcc_verify_string_vector_field@@Base+0x60>
   12830:	ldr	r4, [r3, #16]
   12834:	mov	r0, #12
   12838:	add	r6, r4, r1
   1283c:	tst	r6, #3
   12840:	beq	12858 <flatcc_verify_string_vector_field@@Base+0x74>
   12844:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12848:	cmp	r2, #0
   1284c:	movwne	r2, #1
   12850:	lsl	r0, r2, #2
   12854:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12858:	cmp	r6, #0
   1285c:	beq	12954 <flatcc_verify_string_vector_field@@Base+0x170>
   12860:	ldr	r5, [r3]
   12864:	mov	r0, #16
   12868:	ldr	r7, [r5, r6]
   1286c:	add	r2, r7, r6
   12870:	cmp	r2, r6
   12874:	bls	12844 <flatcc_verify_string_vector_field@@Base+0x60>
   12878:	ldr	ip, [r3, #4]
   1287c:	add	r3, r2, #4
   12880:	cmp	r3, ip
   12884:	bhi	12844 <flatcc_verify_string_vector_field@@Base+0x60>
   12888:	ands	r3, r3, #3
   1288c:	bne	12844 <flatcc_verify_string_vector_field@@Base+0x60>
   12890:	ldr	lr, [r5, r2]
   12894:	mov	r0, #25
   12898:	cmn	lr, #-1073741823	; 0xc0000001
   1289c:	bhi	12844 <flatcc_verify_string_vector_field@@Base+0x60>
   128a0:	sub	r0, ip, r2
   128a4:	sub	r2, r0, #4
   128a8:	mov	r0, #26
   128ac:	cmp	r2, lr, lsl #2
   128b0:	bcc	12844 <flatcc_verify_string_vector_field@@Base+0x60>
   128b4:	cmp	lr, #0
   128b8:	beq	12954 <flatcc_verify_string_vector_field@@Base+0x170>
   128bc:	sub	r0, ip, r7
   128c0:	add	r8, r7, r4
   128c4:	sub	r0, r0, r4
   128c8:	add	r3, r5, r8
   128cc:	sub	r0, r0, r1
   128d0:	sub	r4, r0, #8
   128d4:	add	r0, r3, r1
   128d8:	add	r7, r1, r8
   128dc:	ldr	r5, [r0, #4]
   128e0:	mov	r0, #17
   128e4:	add	r6, r7, r5
   128e8:	add	r2, r6, #4
   128ec:	tst	r2, #3
   128f0:	bne	12844 <flatcc_verify_string_vector_field@@Base+0x60>
   128f4:	add	r7, r7, #4
   128f8:	cmp	r2, r7
   128fc:	bls	12844 <flatcc_verify_string_vector_field@@Base+0x60>
   12900:	add	r2, r6, #8
   12904:	cmp	ip, r2
   12908:	bcc	12844 <flatcc_verify_string_vector_field@@Base+0x60>
   1290c:	add	r0, r1, r5
   12910:	sub	r2, r4, r5
   12914:	add	r0, r3, r0
   12918:	ldr	r0, [r0, #4]
   1291c:	add	r6, r0, #1
   12920:	cmp	r2, r6
   12924:	bcc	1295c <flatcc_verify_string_vector_field@@Base+0x178>
   12928:	add	r0, r5, r0
   1292c:	add	r0, r1, r0
   12930:	add	r0, r3, r0
   12934:	ldrb	r0, [r0, #8]
   12938:	cmp	r0, #0
   1293c:	bne	12964 <flatcc_verify_string_vector_field@@Base+0x180>
   12940:	subs	lr, lr, #1
   12944:	sub	r4, r4, #4
   12948:	add	r8, r8, #4
   1294c:	add	r3, r3, #4
   12950:	bne	128d4 <flatcc_verify_string_vector_field@@Base+0xf0>
   12954:	mov	r0, #0
   12958:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1295c:	mov	r0, #8
   12960:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12964:	mov	r0, #7
   12968:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0001296c <flatcc_verify_table_field@@Base>:
   1296c:	push	{r4, r5, r6, sl, fp, lr}
   12970:	add	fp, sp, #16
   12974:	sub	sp, sp, #24
   12978:	mov	ip, r0
   1297c:	mov	r0, #4
   12980:	add	r0, r0, r1, lsl #1
   12984:	ldrh	r6, [ip, #22]
   12988:	uxth	r1, r0
   1298c:	cmp	r1, r6
   12990:	bcs	129d8 <flatcc_verify_table_field@@Base+0x6c>
   12994:	ldr	r1, [ip, #12]
   12998:	uxtah	r0, r1, r0
   1299c:	ldrh	r1, [r0]
   129a0:	cmp	r1, #0
   129a4:	beq	129d8 <flatcc_verify_table_field@@Base+0x6c>
   129a8:	ldrh	r2, [ip, #20]
   129ac:	add	r6, r1, #4
   129b0:	mov	r0, #13
   129b4:	cmp	r6, r2
   129b8:	bhi	129d0 <flatcc_verify_table_field@@Base+0x64>
   129bc:	ldr	r0, [ip, #16]
   129c0:	add	r4, r0, r1
   129c4:	mov	r0, #12
   129c8:	tst	r4, #3
   129cc:	beq	129ec <flatcc_verify_table_field@@Base+0x80>
   129d0:	sub	sp, fp, #16
   129d4:	pop	{r4, r5, r6, sl, fp, pc}
   129d8:	cmp	r2, #0
   129dc:	movwne	r2, #1
   129e0:	lsl	r0, r2, #2
   129e4:	sub	sp, fp, #16
   129e8:	pop	{r4, r5, r6, sl, fp, pc}
   129ec:	cmp	r4, #0
   129f0:	beq	12abc <flatcc_verify_table_field@@Base+0x150>
   129f4:	ldm	ip, {r1, lr}
   129f8:	ldr	r2, [ip, #8]
   129fc:	ldr	r0, [r1, r4]
   12a00:	subs	r2, r2, #1
   12a04:	str	r2, [sp, #8]
   12a08:	beq	12ac8 <flatcc_verify_table_field@@Base+0x15c>
   12a0c:	add	r2, r0, r4
   12a10:	mov	r0, #15
   12a14:	tst	r2, #3
   12a18:	bne	129d0 <flatcc_verify_table_field@@Base+0x64>
   12a1c:	cmp	r2, r4
   12a20:	bls	129d0 <flatcc_verify_table_field@@Base+0x64>
   12a24:	add	r6, r2, #4
   12a28:	cmp	r6, lr
   12a2c:	bhi	129d0 <flatcc_verify_table_field@@Base+0x64>
   12a30:	str	r2, [sp, #16]
   12a34:	ldr	r0, [r1, r2]
   12a38:	sub	r5, r2, r0
   12a3c:	mov	r0, #29
   12a40:	tst	r5, #-2147483647	; 0x80000001
   12a44:	bne	129d0 <flatcc_verify_table_field@@Base+0x64>
   12a48:	add	r4, r5, #2
   12a4c:	mov	r0, #27
   12a50:	cmp	r4, lr
   12a54:	bhi	129d0 <flatcc_verify_table_field@@Base+0x64>
   12a58:	mov	ip, r1
   12a5c:	mov	r0, #30
   12a60:	ldrh	r6, [ip, r5]!
   12a64:	tst	r6, #1
   12a68:	strh	r6, [sp, #22]
   12a6c:	bne	129d0 <flatcc_verify_table_field@@Base+0x64>
   12a70:	add	r5, r5, r6
   12a74:	cmp	r5, lr
   12a78:	bhi	129d0 <flatcc_verify_table_field@@Base+0x64>
   12a7c:	mov	r0, #28
   12a80:	cmp	r6, #4
   12a84:	bcc	129d0 <flatcc_verify_table_field@@Base+0x64>
   12a88:	add	r0, r1, r4
   12a8c:	sub	r2, lr, r2
   12a90:	ldrh	r4, [r0]
   12a94:	mov	r0, #20
   12a98:	cmp	r2, r4
   12a9c:	strh	r4, [sp, #20]
   12aa0:	bcc	129d0 <flatcc_verify_table_field@@Base+0x64>
   12aa4:	mov	r0, sp
   12aa8:	stm	sp, {r1, lr}
   12aac:	str	ip, [sp, #12]
   12ab0:	blx	r3
   12ab4:	sub	sp, fp, #16
   12ab8:	pop	{r4, r5, r6, sl, fp, pc}
   12abc:	mov	r0, #0
   12ac0:	sub	sp, fp, #16
   12ac4:	pop	{r4, r5, r6, sl, fp, pc}
   12ac8:	mov	r0, #3
   12acc:	sub	sp, fp, #16
   12ad0:	pop	{r4, r5, r6, sl, fp, pc}

00012ad4 <flatcc_verify_table_vector_field@@Base>:
   12ad4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ad8:	add	fp, sp, #28
   12adc:	sub	sp, sp, #28
   12ae0:	mov	r4, r3
   12ae4:	mov	r3, r0
   12ae8:	mov	r0, #4
   12aec:	add	r0, r0, r1, lsl #1
   12af0:	ldrh	r7, [r3, #22]
   12af4:	uxth	r1, r0
   12af8:	cmp	r1, r7
   12afc:	bcs	12b44 <flatcc_verify_table_vector_field@@Base+0x70>
   12b00:	ldr	r1, [r3, #12]
   12b04:	uxtah	r0, r1, r0
   12b08:	ldrh	r1, [r0]
   12b0c:	cmp	r1, #0
   12b10:	beq	12b44 <flatcc_verify_table_vector_field@@Base+0x70>
   12b14:	ldrh	r2, [r3, #20]
   12b18:	add	r7, r1, #4
   12b1c:	mov	r0, #13
   12b20:	cmp	r7, r2
   12b24:	bhi	12b3c <flatcc_verify_table_vector_field@@Base+0x68>
   12b28:	ldr	r2, [r3, #16]
   12b2c:	mov	r0, #12
   12b30:	add	r6, r2, r1
   12b34:	tst	r6, #3
   12b38:	beq	12b58 <flatcc_verify_table_vector_field@@Base+0x84>
   12b3c:	sub	sp, fp, #28
   12b40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b44:	cmp	r2, #0
   12b48:	movwne	r2, #1
   12b4c:	lsl	r0, r2, #2
   12b50:	sub	sp, fp, #28
   12b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b58:	cmp	r6, #0
   12b5c:	beq	12cb8 <flatcc_verify_table_vector_field@@Base+0x1e4>
   12b60:	ldr	r7, [r3, #8]
   12b64:	cmp	r7, #1
   12b68:	blt	12d84 <flatcc_verify_table_vector_field@@Base+0x2b0>
   12b6c:	ldr	r9, [r3]
   12b70:	mov	r0, #16
   12b74:	ldr	ip, [r9, r6]
   12b78:	add	r5, ip, r6
   12b7c:	cmp	r5, r6
   12b80:	bls	12b3c <flatcc_verify_table_vector_field@@Base+0x68>
   12b84:	ldr	lr, [r3, #4]
   12b88:	add	r8, r5, #4
   12b8c:	cmp	r8, lr
   12b90:	bhi	12b3c <flatcc_verify_table_vector_field@@Base+0x68>
   12b94:	ands	r3, r8, #3
   12b98:	bne	12b3c <flatcc_verify_table_vector_field@@Base+0x68>
   12b9c:	ldr	sl, [r9, r5]
   12ba0:	mov	r0, #25
   12ba4:	cmn	sl, #-1073741823	; 0xc0000001
   12ba8:	bhi	12b3c <flatcc_verify_table_vector_field@@Base+0x68>
   12bac:	sub	r0, lr, r5
   12bb0:	sub	r3, r0, #4
   12bb4:	mov	r0, #26
   12bb8:	cmp	r3, sl, lsl #2
   12bbc:	bcc	12b3c <flatcc_verify_table_vector_field@@Base+0x68>
   12bc0:	cmp	sl, #0
   12bc4:	beq	12cb8 <flatcc_verify_table_vector_field@@Base+0x1e4>
   12bc8:	sub	r0, lr, ip
   12bcc:	sub	r0, r0, r2
   12bd0:	sub	r0, r0, r1
   12bd4:	sub	r5, r0, #4
   12bd8:	sub	r0, r7, #2
   12bdc:	str	r0, [sp]
   12be0:	ldr	r1, [sp]
   12be4:	ldr	r0, [r9, r8]
   12be8:	cmp	r1, #0
   12bec:	str	r1, [sp, #12]
   12bf0:	beq	12d7c <flatcc_verify_table_vector_field@@Base+0x2a8>
   12bf4:	add	r1, r8, r0
   12bf8:	add	ip, r1, #4
   12bfc:	tst	r1, #3
   12c00:	bne	12cc4 <flatcc_verify_table_vector_field@@Base+0x1f0>
   12c04:	cmp	r1, r8
   12c08:	bls	12cc4 <flatcc_verify_table_vector_field@@Base+0x1f0>
   12c0c:	cmp	ip, lr
   12c10:	bhi	12cc4 <flatcc_verify_table_vector_field@@Base+0x1f0>
   12c14:	str	r1, [sp, #20]
   12c18:	add	r3, r9, r0
   12c1c:	ldr	r6, [r3, r8]
   12c20:	sub	r7, r0, r6
   12c24:	add	r3, r8, r7
   12c28:	tst	r3, #-2147483647	; 0x80000001
   12c2c:	bne	12cc4 <flatcc_verify_table_vector_field@@Base+0x1f0>
   12c30:	add	r2, r3, #2
   12c34:	cmp	r2, lr
   12c38:	bhi	12cc4 <flatcc_verify_table_vector_field@@Base+0x1f0>
   12c3c:	add	r2, r9, r7
   12c40:	add	r2, r2, r8
   12c44:	ldrh	r7, [r2]
   12c48:	cmp	r7, #4
   12c4c:	strh	r7, [sp, #26]
   12c50:	bcc	12cc4 <flatcc_verify_table_vector_field@@Base+0x1f0>
   12c54:	ands	r2, r7, #1
   12c58:	bne	12cc4 <flatcc_verify_table_vector_field@@Base+0x1f0>
   12c5c:	add	r2, r0, r7
   12c60:	sub	r2, r2, r6
   12c64:	add	r2, r8, r2
   12c68:	cmp	r2, lr
   12c6c:	bhi	12cc4 <flatcc_verify_table_vector_field@@Base+0x1f0>
   12c70:	add	r3, r9, r3
   12c74:	sub	r0, r5, r0
   12c78:	ldrh	r2, [r3, #2]
   12c7c:	cmp	r0, r2
   12c80:	strh	r2, [sp, #24]
   12c84:	bcc	12cc4 <flatcc_verify_table_vector_field@@Base+0x1f0>
   12c88:	add	r0, sp, #4
   12c8c:	stmib	sp, {r9, lr}
   12c90:	mov	r6, lr
   12c94:	str	r3, [sp, #16]
   12c98:	blx	r4
   12c9c:	cmp	r0, #0
   12ca0:	bne	12d90 <flatcc_verify_table_vector_field@@Base+0x2bc>
   12ca4:	subs	sl, sl, #1
   12ca8:	sub	r5, r5, #4
   12cac:	add	r8, r8, #4
   12cb0:	mov	lr, r6
   12cb4:	bne	12be0 <flatcc_verify_table_vector_field@@Base+0x10c>
   12cb8:	mov	r0, #0
   12cbc:	sub	sp, fp, #28
   12cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cc4:	ldr	r0, [sp]
   12cc8:	str	r0, [sp, #12]
   12ccc:	mov	r0, #15
   12cd0:	tst	r1, #3
   12cd4:	bne	12b3c <flatcc_verify_table_vector_field@@Base+0x68>
   12cd8:	cmp	r1, r8
   12cdc:	bls	12b3c <flatcc_verify_table_vector_field@@Base+0x68>
   12ce0:	cmp	ip, lr
   12ce4:	bhi	12b3c <flatcc_verify_table_vector_field@@Base+0x68>
   12ce8:	str	r1, [sp, #20]
   12cec:	ldr	r0, [r9, r1]
   12cf0:	sub	r7, r1, r0
   12cf4:	mov	r0, #29
   12cf8:	tst	r7, #-2147483647	; 0x80000001
   12cfc:	bne	12b3c <flatcc_verify_table_vector_field@@Base+0x68>
   12d00:	add	r3, r7, #2
   12d04:	mov	r0, #27
   12d08:	cmp	r3, lr
   12d0c:	bhi	12b3c <flatcc_verify_table_vector_field@@Base+0x68>
   12d10:	mov	r2, r9
   12d14:	mov	r0, #30
   12d18:	ldrh	r6, [r2, r7]!
   12d1c:	tst	r6, #1
   12d20:	strh	r6, [sp, #26]
   12d24:	bne	12b3c <flatcc_verify_table_vector_field@@Base+0x68>
   12d28:	add	r7, r7, r6
   12d2c:	cmp	r7, lr
   12d30:	bhi	12b3c <flatcc_verify_table_vector_field@@Base+0x68>
   12d34:	mov	r0, #28
   12d38:	cmp	r6, #4
   12d3c:	bcc	12b3c <flatcc_verify_table_vector_field@@Base+0x68>
   12d40:	add	r0, r9, r3
   12d44:	sub	r1, lr, r1
   12d48:	mov	r5, lr
   12d4c:	ldrh	r3, [r0]
   12d50:	mov	r0, #20
   12d54:	cmp	r1, r3
   12d58:	strh	r3, [sp, #24]
   12d5c:	bcc	12b3c <flatcc_verify_table_vector_field@@Base+0x68>
   12d60:	add	r0, sp, #4
   12d64:	str	r5, [sp, #8]
   12d68:	str	r9, [sp, #4]
   12d6c:	str	r2, [sp, #16]
   12d70:	blx	r4
   12d74:	sub	sp, fp, #28
   12d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d7c:	mov	r0, #0
   12d80:	str	r0, [sp, #12]
   12d84:	mov	r0, #3
   12d88:	sub	sp, fp, #28
   12d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d90:	ldr	r0, [r9, r8]
   12d94:	ldr	r1, [sp]
   12d98:	mov	lr, r6
   12d9c:	str	r1, [sp, #12]
   12da0:	add	r1, r0, r8
   12da4:	add	ip, r1, #4
   12da8:	b	12ccc <flatcc_verify_table_vector_field@@Base+0x1f8>

00012dac <flatcc_verify_union_table@@Base>:
   12dac:	push	{r4, r5, r6, sl, fp, lr}
   12db0:	add	fp, sp, #16
   12db4:	sub	sp, sp, #24
   12db8:	ldr	r5, [r0, #16]
   12dbc:	ldr	r2, [r0, #20]
   12dc0:	ldr	ip, [r0]
   12dc4:	ldr	r3, [r0, #4]
   12dc8:	ldr	r0, [r0, #8]
   12dcc:	subs	r0, r0, #1
   12dd0:	str	r0, [sp, #8]
   12dd4:	beq	12e8c <flatcc_verify_union_table@@Base+0xe0>
   12dd8:	add	r2, r2, r5
   12ddc:	mov	r0, #15
   12de0:	tst	r2, #3
   12de4:	bne	12e84 <flatcc_verify_union_table@@Base+0xd8>
   12de8:	cmp	r2, r5
   12dec:	bls	12e84 <flatcc_verify_union_table@@Base+0xd8>
   12df0:	add	r6, r2, #4
   12df4:	cmp	r6, r3
   12df8:	bhi	12e84 <flatcc_verify_union_table@@Base+0xd8>
   12dfc:	str	r2, [sp, #16]
   12e00:	ldr	r0, [ip, r2]
   12e04:	sub	r5, r2, r0
   12e08:	mov	r0, #29
   12e0c:	tst	r5, #-2147483647	; 0x80000001
   12e10:	bne	12e84 <flatcc_verify_union_table@@Base+0xd8>
   12e14:	add	r4, r5, #2
   12e18:	mov	r0, #27
   12e1c:	cmp	r4, r3
   12e20:	bhi	12e84 <flatcc_verify_union_table@@Base+0xd8>
   12e24:	mov	lr, ip
   12e28:	mov	r0, #30
   12e2c:	ldrh	r6, [lr, r5]!
   12e30:	tst	r6, #1
   12e34:	strh	r6, [sp, #22]
   12e38:	bne	12e84 <flatcc_verify_union_table@@Base+0xd8>
   12e3c:	add	r5, r5, r6
   12e40:	cmp	r5, r3
   12e44:	bhi	12e84 <flatcc_verify_union_table@@Base+0xd8>
   12e48:	mov	r0, #28
   12e4c:	cmp	r6, #4
   12e50:	bcc	12e84 <flatcc_verify_union_table@@Base+0xd8>
   12e54:	add	r0, ip, r4
   12e58:	sub	r2, r3, r2
   12e5c:	ldrh	r4, [r0]
   12e60:	mov	r0, #20
   12e64:	cmp	r2, r4
   12e68:	strh	r4, [sp, #20]
   12e6c:	bcc	12e84 <flatcc_verify_union_table@@Base+0xd8>
   12e70:	mov	r0, sp
   12e74:	str	r3, [sp, #4]
   12e78:	str	ip, [sp]
   12e7c:	str	lr, [sp, #12]
   12e80:	blx	r1
   12e84:	sub	sp, fp, #16
   12e88:	pop	{r4, r5, r6, sl, fp, pc}
   12e8c:	mov	r0, #3
   12e90:	sub	sp, fp, #16
   12e94:	pop	{r4, r5, r6, sl, fp, pc}

00012e98 <flatcc_verify_union_struct@@Base>:
   12e98:	push	{fp, lr}
   12e9c:	mov	fp, sp
   12ea0:	ldr	lr, [r0, #20]
   12ea4:	mov	r3, r0
   12ea8:	mov	r0, #18
   12eac:	cmp	lr, #0
   12eb0:	beq	12eec <flatcc_verify_union_struct@@Base+0x54>
   12eb4:	ldr	ip, [r3, #4]
   12eb8:	ldr	r3, [r3, #16]
   12ebc:	add	r3, r3, lr
   12ec0:	cmp	r3, ip
   12ec4:	bhi	12eec <flatcc_verify_union_struct@@Base+0x54>
   12ec8:	adds	r1, r3, r1
   12ecc:	mov	r0, #10
   12ed0:	bcs	12eec <flatcc_verify_union_struct@@Base+0x54>
   12ed4:	mov	r0, #9
   12ed8:	cmp	r1, ip
   12edc:	pophi	{fp, pc}
   12ee0:	sub	r0, r2, #1
   12ee4:	ands	r0, r3, r0
   12ee8:	movwne	r0, #11
   12eec:	pop	{fp, pc}

00012ef0 <flatcc_verify_union_string@@Base>:
   12ef0:	push	{fp, lr}
   12ef4:	mov	fp, sp
   12ef8:	mov	r1, r0
   12efc:	ldr	r3, [r0, #16]
   12f00:	ldr	r0, [r0, #20]
   12f04:	add	r2, r0, r3
   12f08:	mov	r0, #17
   12f0c:	tst	r2, #3
   12f10:	bne	12f58 <flatcc_verify_union_string@@Base+0x68>
   12f14:	cmp	r2, r3
   12f18:	bls	12f58 <flatcc_verify_union_string@@Base+0x68>
   12f1c:	ldr	r3, [r1, #4]
   12f20:	add	ip, r2, #4
   12f24:	cmp	r3, ip
   12f28:	bcc	12f58 <flatcc_verify_union_string@@Base+0x68>
   12f2c:	ldr	r1, [r1]
   12f30:	sub	lr, r3, ip
   12f34:	mov	r0, #8
   12f38:	ldr	r2, [r1, r2]
   12f3c:	add	r3, r2, #1
   12f40:	cmp	lr, r3
   12f44:	popcc	{fp, pc}
   12f48:	add	r0, r1, ip
   12f4c:	ldrb	r0, [r0, r2]
   12f50:	cmp	r0, #0
   12f54:	movwne	r0, #7
   12f58:	pop	{fp, pc}

00012f5c <flatcc_verify_buffer_header@@Base>:
   12f5c:	push	{r4, sl, fp, lr}
   12f60:	add	fp, sp, #8
   12f64:	sub	sp, sp, #8
   12f68:	mov	r4, r0
   12f6c:	mov	r0, #5
   12f70:	tst	r4, #3
   12f74:	bne	12fc8 <flatcc_verify_buffer_header@@Base+0x6c>
   12f78:	mov	r0, #6
   12f7c:	cmn	r1, #9
   12f80:	bhi	12fc8 <flatcc_verify_buffer_header@@Base+0x6c>
   12f84:	mov	r0, #1
   12f88:	cmp	r1, #8
   12f8c:	bcc	12fc8 <flatcc_verify_buffer_header@@Base+0x6c>
   12f90:	cmp	r2, #0
   12f94:	beq	12fd0 <flatcc_verify_buffer_header@@Base+0x74>
   12f98:	mov	r0, #0
   12f9c:	mov	r1, r2
   12fa0:	mov	r2, #4
   12fa4:	str	r0, [sp, #4]
   12fa8:	add	r0, sp, #4
   12fac:	bl	10f04 <strncpy@plt>
   12fb0:	ldr	r1, [sp, #4]
   12fb4:	cmp	r1, #0
   12fb8:	ldrne	r2, [r4, #4]
   12fbc:	movne	r0, #2
   12fc0:	cmpne	r2, r1
   12fc4:	moveq	r0, #0
   12fc8:	sub	sp, fp, #8
   12fcc:	pop	{r4, sl, fp, pc}
   12fd0:	mov	r0, #0
   12fd4:	sub	sp, fp, #8
   12fd8:	pop	{r4, sl, fp, pc}

00012fdc <flatcc_verify_typed_buffer_header@@Base>:
   12fdc:	mov	r3, r0
   12fe0:	mov	r0, #5
   12fe4:	tst	r3, #3
   12fe8:	bne	1301c <flatcc_verify_typed_buffer_header@@Base+0x40>
   12fec:	mov	r0, #6
   12ff0:	cmn	r1, #9
   12ff4:	bhi	1301c <flatcc_verify_typed_buffer_header@@Base+0x40>
   12ff8:	mov	r0, #1
   12ffc:	cmp	r1, #8
   13000:	bxcc	lr
   13004:	cmp	r2, #0
   13008:	beq	13020 <flatcc_verify_typed_buffer_header@@Base+0x44>
   1300c:	ldr	r1, [r3, #4]
   13010:	mov	r0, #2
   13014:	cmp	r1, r2
   13018:	moveq	r0, #0
   1301c:	bx	lr
   13020:	mov	r0, #0
   13024:	bx	lr

00013028 <flatcc_verify_struct_as_root@@Base>:
   13028:	push	{r4, r5, r6, r7, fp, lr}
   1302c:	add	fp, sp, #16
   13030:	sub	sp, sp, #8
   13034:	mov	r5, r0
   13038:	mov	r0, #5
   1303c:	tst	r5, #3
   13040:	bne	130d8 <flatcc_verify_struct_as_root@@Base+0xb0>
   13044:	mov	r4, r1
   13048:	mov	r0, #6
   1304c:	cmn	r1, #9
   13050:	bhi	130d8 <flatcc_verify_struct_as_root@@Base+0xb0>
   13054:	mov	r0, #1
   13058:	cmp	r4, #8
   1305c:	bcc	130d8 <flatcc_verify_struct_as_root@@Base+0xb0>
   13060:	mov	r6, r3
   13064:	mov	r7, r2
   13068:	cmp	r2, #0
   1306c:	beq	1309c <flatcc_verify_struct_as_root@@Base+0x74>
   13070:	mov	r0, #0
   13074:	mov	r1, r7
   13078:	mov	r2, #4
   1307c:	str	r0, [sp]
   13080:	mov	r0, sp
   13084:	bl	10f04 <strncpy@plt>
   13088:	ldr	r0, [sp]
   1308c:	cmp	r0, #0
   13090:	ldrne	r1, [r5, #4]
   13094:	cmpne	r1, r0
   13098:	bne	130e0 <flatcc_verify_struct_as_root@@Base+0xb8>
   1309c:	ldr	r1, [r5]
   130a0:	mov	r0, #18
   130a4:	sub	r2, r1, #1
   130a8:	cmp	r2, r4
   130ac:	bcs	130d8 <flatcc_verify_struct_as_root@@Base+0xb0>
   130b0:	adds	r2, r1, r6
   130b4:	mov	r0, #10
   130b8:	bcs	130d8 <flatcc_verify_struct_as_root@@Base+0xb0>
   130bc:	mov	r0, #9
   130c0:	cmp	r2, r4
   130c4:	bhi	130d8 <flatcc_verify_struct_as_root@@Base+0xb0>
   130c8:	ldr	r0, [fp, #8]
   130cc:	sub	r0, r0, #1
   130d0:	ands	r0, r1, r0
   130d4:	movwne	r0, #11
   130d8:	sub	sp, fp, #16
   130dc:	pop	{r4, r5, r6, r7, fp, pc}
   130e0:	mov	r0, #0
   130e4:	mov	r1, r7
   130e8:	mov	r2, #4
   130ec:	str	r0, [sp, #4]
   130f0:	add	r0, sp, #4
   130f4:	bl	10f04 <strncpy@plt>
   130f8:	ldr	r0, [sp, #4]
   130fc:	ldr	r1, [r5, #4]
   13100:	subs	r1, r1, r0
   13104:	movwne	r1, #1
   13108:	cmp	r0, #0
   1310c:	lslne	r0, r1, #1
   13110:	sub	sp, fp, #16
   13114:	pop	{r4, r5, r6, r7, fp, pc}

00013118 <flatcc_verify_struct_as_typed_root@@Base>:
   13118:	push	{fp, lr}
   1311c:	mov	fp, sp
   13120:	mov	ip, r0
   13124:	mov	r0, #5
   13128:	tst	ip, #3
   1312c:	bne	1319c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   13130:	mov	r0, #6
   13134:	cmn	r1, #9
   13138:	bhi	1319c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   1313c:	mov	r0, #1
   13140:	cmp	r1, #8
   13144:	bcc	1319c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   13148:	cmp	r2, #0
   1314c:	beq	13160 <flatcc_verify_struct_as_typed_root@@Base+0x48>
   13150:	ldr	lr, [ip, #4]
   13154:	mov	r0, #2
   13158:	cmp	lr, r2
   1315c:	bne	1319c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   13160:	ldr	ip, [ip]
   13164:	mov	r0, #18
   13168:	sub	r2, ip, #1
   1316c:	cmp	r2, r1
   13170:	bcs	1319c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   13174:	adds	r3, ip, r3
   13178:	mov	r0, #10
   1317c:	bcs	1319c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   13180:	mov	r0, #9
   13184:	cmp	r3, r1
   13188:	pophi	{fp, pc}
   1318c:	ldr	r0, [fp, #8]
   13190:	sub	r0, r0, #1
   13194:	ands	r0, ip, r0
   13198:	movwne	r0, #11
   1319c:	pop	{fp, pc}

000131a0 <flatcc_verify_table_as_root@@Base>:
   131a0:	push	{r4, r5, r6, r7, fp, lr}
   131a4:	add	fp, sp, #16
   131a8:	sub	sp, sp, #24
   131ac:	mov	r4, r0
   131b0:	mov	r0, #5
   131b4:	tst	r4, #3
   131b8:	bne	132c4 <flatcc_verify_table_as_root@@Base+0x124>
   131bc:	mov	r6, r1
   131c0:	mov	r0, #6
   131c4:	cmn	r1, #9
   131c8:	bhi	132c4 <flatcc_verify_table_as_root@@Base+0x124>
   131cc:	mov	r0, #1
   131d0:	cmp	r6, #8
   131d4:	bcc	132c4 <flatcc_verify_table_as_root@@Base+0x124>
   131d8:	mov	r5, r3
   131dc:	mov	r7, r2
   131e0:	cmp	r2, #0
   131e4:	beq	13214 <flatcc_verify_table_as_root@@Base+0x74>
   131e8:	mov	r0, #0
   131ec:	mov	r1, r7
   131f0:	mov	r2, #4
   131f4:	str	r0, [sp]
   131f8:	mov	r0, sp
   131fc:	bl	10f04 <strncpy@plt>
   13200:	ldr	r0, [sp]
   13204:	cmp	r0, #0
   13208:	ldrne	r1, [r4, #4]
   1320c:	cmpne	r1, r0
   13210:	bne	132cc <flatcc_verify_table_as_root@@Base+0x12c>
   13214:	ldr	r1, [r4]
   13218:	mov	r0, #99	; 0x63
   1321c:	str	r0, [sp, #8]
   13220:	mov	r0, #15
   13224:	tst	r1, #3
   13228:	bne	132c4 <flatcc_verify_table_as_root@@Base+0x124>
   1322c:	cmp	r1, #0
   13230:	beq	132c4 <flatcc_verify_table_as_root@@Base+0x124>
   13234:	add	r2, r1, #4
   13238:	cmp	r2, r6
   1323c:	bhi	132c4 <flatcc_verify_table_as_root@@Base+0x124>
   13240:	str	r1, [sp, #16]
   13244:	ldr	r0, [r4, r1]
   13248:	sub	r7, r1, r0
   1324c:	mov	r0, #29
   13250:	tst	r7, #-2147483647	; 0x80000001
   13254:	bne	132c4 <flatcc_verify_table_as_root@@Base+0x124>
   13258:	add	r3, r7, #2
   1325c:	mov	r0, #27
   13260:	cmp	r3, r6
   13264:	bhi	132c4 <flatcc_verify_table_as_root@@Base+0x124>
   13268:	mov	ip, r4
   1326c:	mov	r0, #30
   13270:	ldrh	r2, [ip, r7]!
   13274:	tst	r2, #1
   13278:	strh	r2, [sp, #22]
   1327c:	bne	132c4 <flatcc_verify_table_as_root@@Base+0x124>
   13280:	add	r7, r7, r2
   13284:	cmp	r7, r6
   13288:	bhi	132c4 <flatcc_verify_table_as_root@@Base+0x124>
   1328c:	mov	r0, #28
   13290:	cmp	r2, #4
   13294:	bcc	132c4 <flatcc_verify_table_as_root@@Base+0x124>
   13298:	add	r0, r4, r3
   1329c:	sub	r1, r6, r1
   132a0:	ldrh	r2, [r0]
   132a4:	mov	r0, #20
   132a8:	cmp	r1, r2
   132ac:	strh	r2, [sp, #20]
   132b0:	bcc	132c4 <flatcc_verify_table_as_root@@Base+0x124>
   132b4:	mov	r0, sp
   132b8:	stm	sp, {r4, r6}
   132bc:	str	ip, [sp, #12]
   132c0:	blx	r5
   132c4:	sub	sp, fp, #16
   132c8:	pop	{r4, r5, r6, r7, fp, pc}
   132cc:	mov	r0, #0
   132d0:	mov	r1, r7
   132d4:	mov	r2, #4
   132d8:	str	r0, [sp]
   132dc:	mov	r0, sp
   132e0:	bl	10f04 <strncpy@plt>
   132e4:	ldr	r0, [sp]
   132e8:	ldr	r1, [r4, #4]
   132ec:	subs	r1, r1, r0
   132f0:	movwne	r1, #1
   132f4:	cmp	r0, #0
   132f8:	lslne	r0, r1, #1
   132fc:	sub	sp, fp, #16
   13300:	pop	{r4, r5, r6, r7, fp, pc}

00013304 <flatcc_verify_table_as_typed_root@@Base>:
   13304:	push	{r4, r5, r6, sl, fp, lr}
   13308:	add	fp, sp, #16
   1330c:	sub	sp, sp, #24
   13310:	mov	ip, #5
   13314:	tst	r0, #3
   13318:	bne	13400 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1331c:	mov	ip, #6
   13320:	cmn	r1, #9
   13324:	bhi	13400 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13328:	mov	ip, #1
   1332c:	cmp	r1, #8
   13330:	bcc	13400 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13334:	cmp	r2, #0
   13338:	beq	1334c <flatcc_verify_table_as_typed_root@@Base+0x48>
   1333c:	ldr	r6, [r0, #4]
   13340:	mov	ip, #2
   13344:	cmp	r6, r2
   13348:	bne	13400 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1334c:	ldr	r2, [r0]
   13350:	mov	r6, #99	; 0x63
   13354:	mov	ip, #15
   13358:	str	r6, [sp, #8]
   1335c:	tst	r2, #3
   13360:	bne	13400 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13364:	cmp	r2, #0
   13368:	beq	13400 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1336c:	add	r6, r2, #4
   13370:	cmp	r6, r1
   13374:	bhi	13400 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13378:	str	r2, [sp, #16]
   1337c:	mov	ip, #29
   13380:	ldr	r6, [r0, r2]
   13384:	sub	r5, r2, r6
   13388:	tst	r5, #-2147483647	; 0x80000001
   1338c:	bne	13400 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13390:	add	r4, r5, #2
   13394:	mov	ip, #27
   13398:	cmp	r4, r1
   1339c:	bhi	13400 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   133a0:	mov	lr, r0
   133a4:	mov	ip, #30
   133a8:	ldrh	r6, [lr, r5]!
   133ac:	tst	r6, #1
   133b0:	strh	r6, [sp, #22]
   133b4:	bne	13400 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   133b8:	add	r5, r5, r6
   133bc:	cmp	r5, r1
   133c0:	bhi	13400 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   133c4:	mov	ip, #28
   133c8:	cmp	r6, #4
   133cc:	bcc	13400 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   133d0:	add	r6, r0, r4
   133d4:	sub	r2, r1, r2
   133d8:	mov	ip, #20
   133dc:	ldrh	r4, [r6]
   133e0:	cmp	r2, r4
   133e4:	strh	r4, [sp, #20]
   133e8:	bcc	13400 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   133ec:	stm	sp, {r0, r1}
   133f0:	mov	r0, sp
   133f4:	str	lr, [sp, #12]
   133f8:	blx	r3
   133fc:	mov	ip, r0
   13400:	mov	r0, ip
   13404:	sub	sp, fp, #16
   13408:	pop	{r4, r5, r6, sl, fp, pc}

0001340c <flatcc_verify_struct_as_nested_root@@Base>:
   1340c:	push	{r4, r5, r6, r7, fp, lr}
   13410:	add	fp, sp, #16
   13414:	sub	sp, sp, #8
   13418:	mov	r7, #4
   1341c:	ldrh	r4, [r0, #22]
   13420:	ldr	lr, [fp, #12]
   13424:	add	r5, r7, r1, lsl #1
   13428:	uxth	ip, r5
   1342c:	cmp	ip, r4
   13430:	bcs	134b8 <flatcc_verify_struct_as_nested_root@@Base+0xac>
   13434:	ldr	r1, [r0, #12]
   13438:	uxtah	r5, r1, r5
   1343c:	ldrh	r5, [r5]
   13440:	cmp	r5, #0
   13444:	beq	134b8 <flatcc_verify_struct_as_nested_root@@Base+0xac>
   13448:	ldrh	r4, [r0, #20]
   1344c:	add	r6, r5, #4
   13450:	cmp	r6, r4
   13454:	bhi	134cc <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   13458:	ldr	r4, [r0, #16]
   1345c:	add	r6, r4, r5
   13460:	tst	r6, #3
   13464:	bne	134cc <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   13468:	cmp	r6, #0
   1346c:	beq	1357c <flatcc_verify_struct_as_nested_root@@Base+0x170>
   13470:	ldr	r4, [r0]
   13474:	ldr	r5, [r4, r6]
   13478:	add	r5, r5, r6
   1347c:	cmp	r5, r6
   13480:	bls	134cc <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   13484:	ldr	r6, [r0, #4]
   13488:	add	r7, r5, #4
   1348c:	cmp	r7, r6
   13490:	bhi	134cc <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   13494:	ands	r7, r7, #3
   13498:	bne	134cc <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   1349c:	ldr	r4, [r4, r5]
   134a0:	sub	r5, r6, r5
   134a4:	sub	r5, r5, #4
   134a8:	mul	r4, r4, lr
   134ac:	cmp	r5, r4
   134b0:	bcc	134cc <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   134b4:	b	1357c <flatcc_verify_struct_as_nested_root@@Base+0x170>
   134b8:	cmp	r2, #0
   134bc:	beq	1356c <flatcc_verify_struct_as_nested_root@@Base+0x160>
   134c0:	cmp	ip, r4
   134c4:	bcs	1355c <flatcc_verify_struct_as_nested_root@@Base+0x150>
   134c8:	ldr	r1, [r0, #12]
   134cc:	add	r1, r1, ip
   134d0:	ldrh	r3, [r1]
   134d4:	cmp	r3, #0
   134d8:	beq	1355c <flatcc_verify_struct_as_nested_root@@Base+0x150>
   134dc:	ldrh	r2, [r0, #20]
   134e0:	add	r7, r3, #4
   134e4:	mov	r1, #13
   134e8:	cmp	r7, r2
   134ec:	bhi	135d0 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   134f0:	ldr	r1, [r0, #16]
   134f4:	add	r5, r1, r3
   134f8:	mov	r1, #12
   134fc:	tst	r5, #3
   13500:	bne	135d0 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   13504:	cmp	r5, #0
   13508:	beq	135cc <flatcc_verify_struct_as_nested_root@@Base+0x1c0>
   1350c:	ldr	r2, [r0]
   13510:	ldr	r1, [r2, r5]
   13514:	add	r3, r1, r5
   13518:	mov	r1, #16
   1351c:	cmp	r3, r5
   13520:	bls	135d0 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   13524:	ldr	r0, [r0, #4]
   13528:	add	r7, r3, #4
   1352c:	cmp	r7, r0
   13530:	bhi	135d0 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   13534:	ands	r7, r7, #3
   13538:	bne	135d0 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   1353c:	ldr	r1, [r2, r3]
   13540:	sub	r0, r0, r3
   13544:	sub	r0, r0, #4
   13548:	mul	r2, r1, lr
   1354c:	mov	r1, #0
   13550:	cmp	r0, r2
   13554:	movwcc	r1, #26
   13558:	b	135d0 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   1355c:	cmp	r2, #0
   13560:	movwne	r2, #1
   13564:	lsl	r1, r2, #2
   13568:	b	135d0 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   1356c:	mov	r1, #0
   13570:	cmp	ip, r4
   13574:	bcs	135d0 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   13578:	ldr	r1, [r0, #12]
   1357c:	add	r1, r1, ip
   13580:	ldrh	r2, [r1]
   13584:	mov	r1, #0
   13588:	cmp	r2, #0
   1358c:	beq	135d0 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   13590:	ldr	r7, [r0]
   13594:	ldr	r0, [r0, #16]
   13598:	add	r0, r7, r0
   1359c:	adds	r0, r0, r2
   135a0:	beq	135d0 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   135a4:	ldr	r2, [r0]
   135a8:	ldr	ip, [fp, #8]
   135ac:	ldr	r1, [r2, r0]!
   135b0:	str	lr, [sp]
   135b4:	add	r0, r2, #4
   135b8:	mov	r2, r3
   135bc:	mov	r3, ip
   135c0:	bl	13028 <flatcc_verify_struct_as_root@@Base>
   135c4:	sub	sp, fp, #16
   135c8:	pop	{r4, r5, r6, r7, fp, pc}
   135cc:	mov	r1, #0
   135d0:	mov	r0, r1
   135d4:	sub	sp, fp, #16
   135d8:	pop	{r4, r5, r6, r7, fp, pc}

000135dc <flatcc_verify_table_as_nested_root@@Base>:
   135dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   135e0:	add	fp, sp, #24
   135e4:	sub	sp, sp, #24
   135e8:	mov	r4, r0
   135ec:	mov	r0, #4
   135f0:	ldr	r8, [fp, #8]
   135f4:	mov	r5, r3
   135f8:	add	r6, r0, r1, lsl #1
   135fc:	ldrh	r7, [r4, #22]
   13600:	uxth	r3, r6
   13604:	cmp	r3, r7
   13608:	bcs	13690 <flatcc_verify_table_as_nested_root@@Base+0xb4>
   1360c:	ldr	r0, [r4, #12]
   13610:	uxtah	r6, r0, r6
   13614:	ldrh	r6, [r6]
   13618:	cmp	r6, #0
   1361c:	beq	13690 <flatcc_verify_table_as_nested_root@@Base+0xb4>
   13620:	ldrh	r7, [r4, #20]
   13624:	add	r1, r6, #4
   13628:	cmp	r1, r7
   1362c:	bhi	136a4 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   13630:	ldr	r1, [r4, #16]
   13634:	add	r7, r1, r6
   13638:	tst	r7, #3
   1363c:	bne	136a4 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   13640:	cmp	r7, #0
   13644:	beq	1375c <flatcc_verify_table_as_nested_root@@Base+0x180>
   13648:	ldr	ip, [r4]
   1364c:	ldr	r1, [ip, r7]
   13650:	add	r6, r1, r7
   13654:	cmp	r6, r7
   13658:	bls	136a4 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   1365c:	ldr	lr, [r4, #4]
   13660:	add	r7, r6, #4
   13664:	cmp	r7, lr
   13668:	bhi	136a4 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   1366c:	ands	r1, r7, #3
   13670:	bne	136a4 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   13674:	ldr	r1, [ip, r6]
   13678:	sub	r7, lr, r6
   1367c:	sub	r7, r7, #4
   13680:	mul	r1, r1, r8
   13684:	cmp	r7, r1
   13688:	bcc	136a4 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   1368c:	b	1375c <flatcc_verify_table_as_nested_root@@Base+0x180>
   13690:	cmp	r2, #0
   13694:	beq	1374c <flatcc_verify_table_as_nested_root@@Base+0x170>
   13698:	cmp	r3, r7
   1369c:	bcs	13738 <flatcc_verify_table_as_nested_root@@Base+0x15c>
   136a0:	ldr	r0, [r4, #12]
   136a4:	add	r0, r0, r3
   136a8:	ldrh	r3, [r0]
   136ac:	cmp	r3, #0
   136b0:	beq	13738 <flatcc_verify_table_as_nested_root@@Base+0x15c>
   136b4:	ldrh	r1, [r4, #20]
   136b8:	add	r2, r3, #4
   136bc:	mov	r0, #13
   136c0:	cmp	r2, r1
   136c4:	bhi	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   136c8:	ldr	r0, [r4, #16]
   136cc:	add	r7, r0, r3
   136d0:	mov	r0, #12
   136d4:	tst	r7, #3
   136d8:	bne	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   136dc:	cmp	r7, #0
   136e0:	beq	138ac <flatcc_verify_table_as_nested_root@@Base+0x2d0>
   136e4:	ldr	r2, [r4]
   136e8:	ldr	r0, [r2, r7]
   136ec:	add	r3, r0, r7
   136f0:	mov	r0, #16
   136f4:	cmp	r3, r7
   136f8:	bls	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   136fc:	ldr	r7, [r4, #4]
   13700:	add	r6, r3, #4
   13704:	cmp	r6, r7
   13708:	bhi	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   1370c:	ands	r1, r6, #3
   13710:	bne	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   13714:	ldr	r0, [r2, r3]
   13718:	mul	r1, r0, r8
   1371c:	sub	r0, r7, r3
   13720:	sub	r2, r0, #4
   13724:	mov	r0, #0
   13728:	cmp	r2, r1
   1372c:	movwcc	r0, #26
   13730:	sub	sp, fp, #24
   13734:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13738:	cmp	r2, #0
   1373c:	movwne	r2, #1
   13740:	lsl	r0, r2, #2
   13744:	sub	sp, fp, #24
   13748:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1374c:	mov	r0, #0
   13750:	cmp	r3, r7
   13754:	bcs	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   13758:	ldr	r0, [r4, #12]
   1375c:	add	r0, r0, r3
   13760:	ldrh	r1, [r0]
   13764:	mov	r0, #0
   13768:	cmp	r1, #0
   1376c:	beq	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   13770:	ldr	r2, [r4]
   13774:	ldr	r3, [r4, #16]
   13778:	add	r2, r2, r3
   1377c:	adds	r1, r2, r1
   13780:	beq	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   13784:	ldr	r6, [r1]
   13788:	mov	r0, #5
   1378c:	ldr	r8, [r6, r1]!
   13790:	add	r7, r6, #4
   13794:	tst	r7, #3
   13798:	bne	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   1379c:	mov	r0, #6
   137a0:	cmn	r8, #9
   137a4:	bhi	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   137a8:	mov	r0, #1
   137ac:	cmp	r8, #8
   137b0:	bcc	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   137b4:	cmp	r5, #0
   137b8:	beq	137e8 <flatcc_verify_table_as_nested_root@@Base+0x20c>
   137bc:	mov	r0, #0
   137c0:	mov	r1, r5
   137c4:	mov	r2, #4
   137c8:	str	r0, [sp]
   137cc:	mov	r0, sp
   137d0:	bl	10f04 <strncpy@plt>
   137d4:	ldr	r0, [sp]
   137d8:	cmp	r0, #0
   137dc:	ldrne	r1, [r6, #8]
   137e0:	cmpne	r1, r0
   137e4:	bne	138b8 <flatcc_verify_table_as_nested_root@@Base+0x2dc>
   137e8:	ldr	r0, [r4, #8]
   137ec:	ldr	r1, [r7]
   137f0:	subs	r0, r0, #1
   137f4:	str	r0, [sp, #8]
   137f8:	beq	138f0 <flatcc_verify_table_as_nested_root@@Base+0x314>
   137fc:	mov	r0, #15
   13800:	tst	r1, #3
   13804:	bne	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   13808:	cmp	r1, #0
   1380c:	beq	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   13810:	add	r2, r1, #4
   13814:	cmp	r2, r8
   13818:	bhi	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   1381c:	str	r1, [sp, #16]
   13820:	ldr	r0, [r7, r1]
   13824:	sub	r6, r1, r0
   13828:	mov	r0, #29
   1382c:	tst	r6, #-2147483647	; 0x80000001
   13830:	bne	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   13834:	add	r3, r6, #2
   13838:	mov	r0, #27
   1383c:	cmp	r3, r8
   13840:	bhi	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   13844:	mov	r2, r7
   13848:	mov	r0, #30
   1384c:	ldrh	r5, [r2, r6]!
   13850:	tst	r5, #1
   13854:	strh	r5, [sp, #22]
   13858:	bne	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   1385c:	add	r6, r6, r5
   13860:	cmp	r6, r8
   13864:	bhi	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   13868:	mov	r0, #28
   1386c:	cmp	r5, #4
   13870:	bcc	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   13874:	add	r0, r7, r3
   13878:	sub	r1, r8, r1
   1387c:	ldrh	r3, [r0]
   13880:	mov	r0, #20
   13884:	cmp	r1, r3
   13888:	strh	r3, [sp, #20]
   1388c:	bcc	138a4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   13890:	ldr	r1, [fp, #12]
   13894:	mov	r0, sp
   13898:	stm	sp, {r7, r8}
   1389c:	str	r2, [sp, #12]
   138a0:	blx	r1
   138a4:	sub	sp, fp, #24
   138a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   138ac:	mov	r0, #0
   138b0:	sub	sp, fp, #24
   138b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   138b8:	mov	r0, #0
   138bc:	mov	r1, r5
   138c0:	mov	r2, #4
   138c4:	str	r0, [sp]
   138c8:	mov	r0, sp
   138cc:	bl	10f04 <strncpy@plt>
   138d0:	ldr	r0, [sp]
   138d4:	ldr	r1, [r6, #8]
   138d8:	subs	r1, r1, r0
   138dc:	movwne	r1, #1
   138e0:	cmp	r0, #0
   138e4:	lslne	r0, r1, #1
   138e8:	sub	sp, fp, #24
   138ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   138f0:	mov	r0, #3
   138f4:	sub	sp, fp, #24
   138f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000138fc <flatcc_verify_union_field@@Base>:
   138fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13900:	add	fp, sp, #28
   13904:	sub	sp, sp, #28
   13908:	mov	r7, #2
   1390c:	ldrh	r4, [r0, #22]
   13910:	lsl	r5, r1, #1
   13914:	add	r7, r7, r1, lsl #1
   13918:	uxth	r6, r7
   1391c:	cmp	r6, r4
   13920:	bcs	13a18 <flatcc_verify_union_field@@Base+0x11c>
   13924:	ldr	r6, [r0, #12]
   13928:	uxtah	r1, r6, r7
   1392c:	ldrh	ip, [r1]
   13930:	cmp	ip, #0
   13934:	beq	13a18 <flatcc_verify_union_field@@Base+0x11c>
   13938:	ldrh	r7, [r0, #20]
   1393c:	mov	r1, #13
   13940:	cmp	ip, r7
   13944:	bcs	13a4c <flatcc_verify_union_field@@Base+0x150>
   13948:	add	r7, r5, #4
   1394c:	ldr	lr, [r0]
   13950:	mov	r1, #1
   13954:	uxth	sl, r7
   13958:	cmp	sl, r4
   1395c:	bcs	13970 <flatcc_verify_union_field@@Base+0x74>
   13960:	uxtah	r1, r6, r7
   13964:	ldrh	r1, [r1]
   13968:	clz	r1, r1
   1396c:	lsr	r1, r1, #5
   13970:	ldr	r9, [r0, #16]
   13974:	cmp	r1, #0
   13978:	moveq	r1, #24
   1397c:	add	r8, lr, r9
   13980:	ldrb	r5, [r8, ip]
   13984:	cmpeq	r5, #0
   13988:	beq	13a4c <flatcc_verify_union_field@@Base+0x150>
   1398c:	mov	r1, #0
   13990:	cmp	r5, #0
   13994:	beq	13a4c <flatcc_verify_union_field@@Base+0x150>
   13998:	cmp	sl, r4
   1399c:	bcs	13a58 <flatcc_verify_union_field@@Base+0x15c>
   139a0:	uxtah	r1, r6, r7
   139a4:	ldrh	r4, [r1]
   139a8:	cmp	r4, #0
   139ac:	beq	13a58 <flatcc_verify_union_field@@Base+0x15c>
   139b0:	ldrh	r1, [r0, #20]
   139b4:	add	r2, r4, #4
   139b8:	cmp	r2, r1
   139bc:	mov	r1, #13
   139c0:	bhi	13a4c <flatcc_verify_union_field@@Base+0x150>
   139c4:	add	r2, r9, r4
   139c8:	mov	r1, #12
   139cc:	tst	r2, #3
   139d0:	bne	13a4c <flatcc_verify_union_field@@Base+0x150>
   139d4:	cmp	r2, #0
   139d8:	mov	r1, #0
   139dc:	beq	13a4c <flatcc_verify_union_field@@Base+0x150>
   139e0:	str	lr, [sp, #4]
   139e4:	ldr	r1, [r0, #4]
   139e8:	ldr	r0, [r0, #8]
   139ec:	str	r1, [sp, #8]
   139f0:	str	r2, [sp, #20]
   139f4:	str	r0, [sp, #12]
   139f8:	ldr	r0, [lr, r2]
   139fc:	str	r0, [sp, #24]
   13a00:	ldrb	r0, [r8, ip]
   13a04:	strb	r0, [sp, #16]
   13a08:	add	r0, sp, #4
   13a0c:	blx	r3
   13a10:	mov	r1, r0
   13a14:	b	13a4c <flatcc_verify_union_field@@Base+0x150>
   13a18:	add	r1, r5, #4
   13a1c:	uxth	r3, r1
   13a20:	cmp	r3, r4
   13a24:	bcs	13a40 <flatcc_verify_union_field@@Base+0x144>
   13a28:	ldr	r0, [r0, #12]
   13a2c:	uxtah	r0, r0, r1
   13a30:	mov	r1, #23
   13a34:	ldrh	r0, [r0]
   13a38:	cmp	r0, #0
   13a3c:	bne	13a4c <flatcc_verify_union_field@@Base+0x150>
   13a40:	cmp	r2, #0
   13a44:	movwne	r2, #21
   13a48:	mov	r1, r2
   13a4c:	mov	r0, r1
   13a50:	sub	sp, fp, #28
   13a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a58:	cmp	r2, #0
   13a5c:	movwne	r2, #1
   13a60:	lsl	r1, r2, #2
   13a64:	b	13a4c <flatcc_verify_union_field@@Base+0x150>

00013a68 <flatcc_verify_union_vector_field@@Base>:
   13a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a6c:	add	fp, sp, #28
   13a70:	sub	sp, sp, #28
   13a74:	mov	r9, r3
   13a78:	mov	r3, #2
   13a7c:	lsl	sl, r1, #1
   13a80:	add	r5, r3, r1, lsl #1
   13a84:	ldrh	r1, [r0, #22]
   13a88:	uxth	r3, r5
   13a8c:	cmp	r3, r1
   13a90:	bcs	13aa8 <flatcc_verify_union_vector_field@@Base+0x40>
   13a94:	ldr	r7, [r0, #12]
   13a98:	uxtah	r5, r7, r5
   13a9c:	ldrh	r5, [r5]
   13aa0:	cmp	r5, #0
   13aa4:	bne	13ae4 <flatcc_verify_union_vector_field@@Base+0x7c>
   13aa8:	add	r7, sl, #4
   13aac:	uxth	r5, r7
   13ab0:	cmp	r5, r1
   13ab4:	bcs	13b60 <flatcc_verify_union_vector_field@@Base+0xf8>
   13ab8:	cmp	r2, #0
   13abc:	beq	13ad8 <flatcc_verify_union_vector_field@@Base+0x70>
   13ac0:	ldr	r5, [r0, #12]
   13ac4:	uxtah	r7, r5, r7
   13ac8:	mov	r5, #22
   13acc:	ldrh	r7, [r7]
   13ad0:	cmp	r7, #0
   13ad4:	beq	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13ad8:	cmp	r3, r1
   13adc:	bcs	13b70 <flatcc_verify_union_vector_field@@Base+0x108>
   13ae0:	ldr	r7, [r0, #12]
   13ae4:	add	r5, r7, r3
   13ae8:	ldrh	r5, [r5]
   13aec:	cmp	r5, #0
   13af0:	beq	13b70 <flatcc_verify_union_vector_field@@Base+0x108>
   13af4:	ldrh	r4, [r0, #20]
   13af8:	add	r6, r5, #4
   13afc:	cmp	r6, r4
   13b00:	bhi	13b84 <flatcc_verify_union_vector_field@@Base+0x11c>
   13b04:	ldr	r6, [r0, #16]
   13b08:	add	r5, r6, r5
   13b0c:	tst	r5, #3
   13b10:	bne	13b84 <flatcc_verify_union_vector_field@@Base+0x11c>
   13b14:	cmp	r5, #0
   13b18:	beq	13c20 <flatcc_verify_union_vector_field@@Base+0x1b8>
   13b1c:	ldr	ip, [r0]
   13b20:	ldr	r6, [ip, r5]
   13b24:	add	lr, r6, r5
   13b28:	cmp	lr, r5
   13b2c:	bls	13b84 <flatcc_verify_union_vector_field@@Base+0x11c>
   13b30:	ldr	r8, [r0, #4]
   13b34:	add	r5, lr, #4
   13b38:	cmp	r5, r8
   13b3c:	bhi	13b84 <flatcc_verify_union_vector_field@@Base+0x11c>
   13b40:	ands	r4, r5, #3
   13b44:	bne	13b84 <flatcc_verify_union_vector_field@@Base+0x11c>
   13b48:	ldr	r6, [ip, lr]
   13b4c:	sub	r5, r8, lr
   13b50:	sub	r5, r5, #4
   13b54:	cmp	r5, r6
   13b58:	bcc	13b84 <flatcc_verify_union_vector_field@@Base+0x11c>
   13b5c:	b	13c20 <flatcc_verify_union_vector_field@@Base+0x1b8>
   13b60:	mov	r5, #22
   13b64:	cmp	r2, #0
   13b68:	bne	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13b6c:	b	13ad8 <flatcc_verify_union_vector_field@@Base+0x70>
   13b70:	cmp	r2, #0
   13b74:	beq	13c10 <flatcc_verify_union_vector_field@@Base+0x1a8>
   13b78:	cmp	r3, r1
   13b7c:	bcs	13d30 <flatcc_verify_union_vector_field@@Base+0x2c8>
   13b80:	ldr	r7, [r0, #12]
   13b84:	add	r1, r7, r3
   13b88:	ldrh	r1, [r1]
   13b8c:	cmp	r1, #0
   13b90:	beq	13d30 <flatcc_verify_union_vector_field@@Base+0x2c8>
   13b94:	ldrh	r2, [r0, #20]
   13b98:	add	r3, r1, #4
   13b9c:	mov	r5, #13
   13ba0:	cmp	r3, r2
   13ba4:	bhi	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13ba8:	ldr	r2, [r0, #16]
   13bac:	mov	r5, #12
   13bb0:	add	r3, r2, r1
   13bb4:	tst	r3, #3
   13bb8:	bne	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13bbc:	cmp	r3, #0
   13bc0:	beq	13d48 <flatcc_verify_union_vector_field@@Base+0x2e0>
   13bc4:	ldr	r1, [r0]
   13bc8:	mov	r5, #16
   13bcc:	ldr	r2, [r1, r3]
   13bd0:	add	r2, r2, r3
   13bd4:	cmp	r2, r3
   13bd8:	bls	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13bdc:	ldr	r0, [r0, #4]
   13be0:	add	r3, r2, #4
   13be4:	cmp	r3, r0
   13be8:	bhi	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13bec:	ands	r3, r3, #3
   13bf0:	bne	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13bf4:	ldr	r1, [r1, r2]
   13bf8:	sub	r0, r0, r2
   13bfc:	mov	r5, #0
   13c00:	sub	r0, r0, #4
   13c04:	cmp	r0, r1
   13c08:	movwcc	r5, #26
   13c0c:	b	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13c10:	mov	r5, #0
   13c14:	cmp	r3, r1
   13c18:	bcs	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13c1c:	ldr	r7, [r0, #12]
   13c20:	add	r3, r7, r3
   13c24:	mov	r5, #0
   13c28:	ldrh	r3, [r3]
   13c2c:	cmp	r3, #0
   13c30:	beq	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13c34:	ldr	r8, [r0]
   13c38:	ldr	lr, [r0, #16]
   13c3c:	add	r6, r8, lr
   13c40:	adds	ip, r6, r3
   13c44:	beq	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13c48:	add	r3, sl, #4
   13c4c:	uxth	r4, r3
   13c50:	cmp	r4, r1
   13c54:	bcs	13d30 <flatcc_verify_union_vector_field@@Base+0x2c8>
   13c58:	uxtah	r1, r7, r3
   13c5c:	ldrh	r1, [r1]
   13c60:	cmp	r1, #0
   13c64:	beq	13d30 <flatcc_verify_union_vector_field@@Base+0x2c8>
   13c68:	ldrh	r2, [r0, #20]
   13c6c:	add	r3, r1, #4
   13c70:	mov	r5, #13
   13c74:	cmp	r3, r2
   13c78:	bhi	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13c7c:	add	r3, lr, r1
   13c80:	mov	r5, #12
   13c84:	tst	r3, #3
   13c88:	bne	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13c8c:	cmp	r3, #0
   13c90:	mov	r5, #0
   13c94:	beq	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13c98:	ldr	r1, [r0, #8]
   13c9c:	cmp	r1, #1
   13ca0:	blt	13d50 <flatcc_verify_union_vector_field@@Base+0x2e8>
   13ca4:	ldr	r2, [r8, r3]
   13ca8:	mov	r5, #16
   13cac:	add	r2, r2, r3
   13cb0:	cmp	r2, r3
   13cb4:	bls	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13cb8:	ldr	r0, [r0, #4]
   13cbc:	add	r7, r2, #4
   13cc0:	cmp	r7, r0
   13cc4:	bhi	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13cc8:	ands	r3, r7, #3
   13ccc:	bne	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13cd0:	ldr	r3, [r8, r2]
   13cd4:	mov	r5, #25
   13cd8:	cmn	r3, #-1073741823	; 0xc0000001
   13cdc:	bhi	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13ce0:	sub	r2, r0, r2
   13ce4:	mov	r5, #26
   13ce8:	sub	r2, r2, #4
   13cec:	cmp	r2, r3, lsl #2
   13cf0:	bcc	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13cf4:	ldr	r2, [ip]
   13cf8:	mov	r5, #34	; 0x22
   13cfc:	ldr	sl, [r2, ip]!
   13d00:	cmp	r3, sl
   13d04:	bne	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13d08:	sub	r1, r1, #1
   13d0c:	mov	r5, #0
   13d10:	cmp	sl, #0
   13d14:	str	r1, [sp, #12]
   13d18:	str	r0, [sp, #8]
   13d1c:	str	r8, [sp, #4]
   13d20:	beq	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13d24:	add	r6, r2, #4
   13d28:	add	r4, sp, #4
   13d2c:	b	13d70 <flatcc_verify_union_vector_field@@Base+0x308>
   13d30:	cmp	r2, #0
   13d34:	movwne	r2, #1
   13d38:	lsl	r5, r2, #2
   13d3c:	mov	r0, r5
   13d40:	sub	sp, fp, #28
   13d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d48:	mov	r5, #0
   13d4c:	b	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13d50:	mov	r5, #3
   13d54:	b	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13d58:	cmp	r0, #0
   13d5c:	bne	13dbc <flatcc_verify_union_vector_field@@Base+0x354>
   13d60:	add	r6, r6, #1
   13d64:	subs	sl, sl, #1
   13d68:	add	r7, r7, #4
   13d6c:	beq	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13d70:	ldr	r1, [r8, r7]
   13d74:	ldrb	r0, [r6]
   13d78:	cmp	r1, #0
   13d7c:	beq	13d58 <flatcc_verify_union_vector_field@@Base+0x2f0>
   13d80:	cmp	r0, #0
   13d84:	beq	13db4 <flatcc_verify_union_vector_field@@Base+0x34c>
   13d88:	str	r1, [sp, #24]
   13d8c:	str	r7, [sp, #20]
   13d90:	strb	r0, [sp, #16]
   13d94:	mov	r0, r4
   13d98:	blx	r9
   13d9c:	cmp	r0, #0
   13da0:	beq	13d60 <flatcc_verify_union_vector_field@@Base+0x2f8>
   13da4:	add	r0, sp, #4
   13da8:	blx	r9
   13dac:	mov	r5, r0
   13db0:	b	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13db4:	mov	r5, #33	; 0x21
   13db8:	b	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>
   13dbc:	mov	r5, #32
   13dc0:	b	13d3c <flatcc_verify_union_vector_field@@Base+0x2d4>

00013dc4 <__libc_csu_init@@Base>:
   13dc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13dc8:	mov	r7, r0
   13dcc:	ldr	r6, [pc, #72]	; 13e1c <__libc_csu_init@@Base+0x58>
   13dd0:	ldr	r5, [pc, #72]	; 13e20 <__libc_csu_init@@Base+0x5c>
   13dd4:	add	r6, pc, r6
   13dd8:	add	r5, pc, r5
   13ddc:	sub	r6, r6, r5
   13de0:	mov	r8, r1
   13de4:	mov	r9, r2
   13de8:	bl	10e30 <strcmp@plt-0x20>
   13dec:	asrs	r6, r6, #2
   13df0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13df4:	mov	r4, #0
   13df8:	add	r4, r4, #1
   13dfc:	ldr	r3, [r5], #4
   13e00:	mov	r2, r9
   13e04:	mov	r1, r8
   13e08:	mov	r0, r7
   13e0c:	blx	r3
   13e10:	cmp	r6, r4
   13e14:	bne	13df8 <__libc_csu_init@@Base+0x34>
   13e18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e1c:	andeq	r1, r1, ip, lsl #1
   13e20:	andeq	r1, r1, r4, lsl #1

00013e24 <__libc_csu_fini@@Base>:
   13e24:	bx	lr

Disassembly of section .fini:

00013e28 <.fini>:
   13e28:	push	{r3, lr}
   13e2c:	pop	{r3, pc}
