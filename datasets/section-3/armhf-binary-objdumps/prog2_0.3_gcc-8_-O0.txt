
../repos/prog2/0.3:     file format elf32-littlearm


Disassembly of section .init:

000105c8 <.init>:
   105c8:	push	{r3, lr}
   105cc:	bl	1066c <_start@@Base+0x3c>
   105d0:	pop	{r3, pc}

Disassembly of section .plt:

000105d4 <printf@plt-0x14>:
   105d4:	push	{lr}		; (str lr, [sp, #-4]!)
   105d8:	ldr	lr, [pc, #4]	; 105e4 <printf@plt-0x4>
   105dc:	add	lr, pc, lr
   105e0:	ldr	pc, [lr, #8]!
   105e4:	andeq	r0, r1, ip, lsl sl

000105e8 <printf@plt>:
   105e8:	add	ip, pc, #0, 12
   105ec:	add	ip, ip, #16, 20	; 0x10000
   105f0:	ldr	pc, [ip, #2588]!	; 0xa1c

000105f4 <__libc_start_main@plt>:
   105f4:	add	ip, pc, #0, 12
   105f8:	add	ip, ip, #16, 20	; 0x10000
   105fc:	ldr	pc, [ip, #2580]!	; 0xa14

00010600 <__gmon_start__@plt>:
   10600:	add	ip, pc, #0, 12
   10604:	add	ip, ip, #16, 20	; 0x10000
   10608:	ldr	pc, [ip, #2572]!	; 0xa0c

0001060c <putchar@plt>:
   1060c:	add	ip, pc, #0, 12
   10610:	add	ip, ip, #16, 20	; 0x10000
   10614:	ldr	pc, [ip, #2564]!	; 0xa04

00010618 <__isoc99_scanf@plt>:
   10618:	add	ip, pc, #0, 12
   1061c:	add	ip, ip, #16, 20	; 0x10000
   10620:	ldr	pc, [ip, #2556]!	; 0x9fc

00010624 <abort@plt>:
   10624:	add	ip, pc, #0, 12
   10628:	add	ip, ip, #16, 20	; 0x10000
   1062c:	ldr	pc, [ip, #2548]!	; 0x9f4

Disassembly of section .text:

00010630 <_start@@Base>:
   10630:	mov	fp, #0
   10634:	mov	lr, #0
   10638:	pop	{r1}		; (ldr r1, [sp], #4)
   1063c:	mov	r2, sp
   10640:	push	{r2}		; (str r2, [sp, #-4]!)
   10644:	push	{r0}		; (str r0, [sp, #-4]!)
   10648:	ldr	ip, [pc, #16]	; 10660 <_start@@Base+0x30>
   1064c:	push	{ip}		; (str ip, [sp, #-4]!)
   10650:	ldr	r0, [pc, #12]	; 10664 <_start@@Base+0x34>
   10654:	ldr	r3, [pc, #12]	; 10668 <_start@@Base+0x38>
   10658:	bl	105f4 <__libc_start_main@plt>
   1065c:	bl	10624 <abort@plt>
   10660:			; <UNDEFINED> instruction: 0x00010ab4
   10664:	andeq	r0, r1, r8, asr #17
   10668:	andeq	r0, r1, r4, asr sl
   1066c:	ldr	r3, [pc, #20]	; 10688 <_start@@Base+0x58>
   10670:	ldr	r2, [pc, #20]	; 1068c <_start@@Base+0x5c>
   10674:	add	r3, pc, r3
   10678:	ldr	r2, [r3, r2]
   1067c:	cmp	r2, #0
   10680:	bxeq	lr
   10684:	b	10600 <__gmon_start__@plt>
   10688:	andeq	r0, r1, r4, lsl #19
   1068c:	andeq	r0, r0, r4, lsr #32
   10690:	ldr	r0, [pc, #24]	; 106b0 <_start@@Base+0x80>
   10694:	ldr	r3, [pc, #24]	; 106b4 <_start@@Base+0x84>
   10698:	cmp	r3, r0
   1069c:	bxeq	lr
   106a0:	ldr	r3, [pc, #16]	; 106b8 <_start@@Base+0x88>
   106a4:	cmp	r3, #0
   106a8:	bxeq	lr
   106ac:	bx	r3
   106b0:	andeq	r1, r2, r0, lsr r0
   106b4:	andeq	r1, r2, r0, lsr r0
   106b8:	andeq	r0, r0, r0
   106bc:	ldr	r0, [pc, #36]	; 106e8 <_start@@Base+0xb8>
   106c0:	ldr	r1, [pc, #36]	; 106ec <_start@@Base+0xbc>
   106c4:	sub	r1, r1, r0
   106c8:	asr	r1, r1, #2
   106cc:	add	r1, r1, r1, lsr #31
   106d0:	asrs	r1, r1, #1
   106d4:	bxeq	lr
   106d8:	ldr	r3, [pc, #16]	; 106f0 <_start@@Base+0xc0>
   106dc:	cmp	r3, #0
   106e0:	bxeq	lr
   106e4:	bx	r3
   106e8:	andeq	r1, r2, r0, lsr r0
   106ec:	andeq	r1, r2, r0, lsr r0
   106f0:	andeq	r0, r0, r0
   106f4:	push	{r4, lr}
   106f8:	ldr	r4, [pc, #24]	; 10718 <_start@@Base+0xe8>
   106fc:	ldrb	r3, [r4]
   10700:	cmp	r3, #0
   10704:	popne	{r4, pc}
   10708:	bl	10690 <_start@@Base+0x60>
   1070c:	mov	r3, #1
   10710:	strb	r3, [r4]
   10714:	pop	{r4, pc}
   10718:	andeq	r1, r2, r0, lsr r0
   1071c:	b	106bc <_start@@Base+0x8c>

00010720 <avg@@Base>:
   10720:	push	{fp}		; (str fp, [sp, #-4]!)
   10724:	add	fp, sp, #0
   10728:	sub	sp, sp, #20
   1072c:	str	r0, [fp, #-16]
   10730:	mov	r3, #0
   10734:	str	r3, [fp, #-12]
   10738:	mov	r3, #0
   1073c:	str	r3, [fp, #-8]
   10740:	b	10770 <avg@@Base+0x50>
   10744:	ldr	r3, [fp, #-8]
   10748:	lsl	r3, r3, #2
   1074c:	ldr	r2, [fp, #-16]
   10750:	add	r3, r2, r3
   10754:	vldr	s15, [r3]
   10758:	vldr	s14, [fp, #-12]
   1075c:	vadd.f32	s15, s14, s15
   10760:	vstr	s15, [fp, #-12]
   10764:	ldr	r3, [fp, #-8]
   10768:	add	r3, r3, #1
   1076c:	str	r3, [fp, #-8]
   10770:	ldr	r3, [fp, #-8]
   10774:	cmp	r3, #9
   10778:	ble	10744 <avg@@Base+0x24>
   1077c:	vldr	s15, [fp, #-12]
   10780:	vldr	s14, [pc, #20]	; 1079c <avg@@Base+0x7c>
   10784:	vdiv.f32	s13, s15, s14
   10788:	vmov.f32	s15, s13
   1078c:	vmov.f32	s0, s15
   10790:	add	sp, fp, #0
   10794:	pop	{fp}		; (ldr fp, [sp], #4)
   10798:	bx	lr
   1079c:			; <UNDEFINED> instruction: 0x41200000

000107a0 <max@@Base>:
   107a0:	push	{fp}		; (str fp, [sp, #-4]!)
   107a4:	add	fp, sp, #0
   107a8:	sub	sp, sp, #20
   107ac:	str	r0, [fp, #-16]
   107b0:	ldr	r3, [fp, #-16]
   107b4:	ldr	r3, [r3]
   107b8:	str	r3, [fp, #-12]
   107bc:	mov	r3, #1
   107c0:	str	r3, [fp, #-8]
   107c4:	b	10810 <max@@Base+0x70>
   107c8:	ldr	r3, [fp, #-8]
   107cc:	lsl	r3, r3, #2
   107d0:	ldr	r2, [fp, #-16]
   107d4:	add	r3, r2, r3
   107d8:	vldr	s15, [r3]
   107dc:	vldr	s14, [fp, #-12]
   107e0:	vcmpe.f32	s14, s15
   107e4:	vmrs	APSR_nzcv, fpscr
   107e8:	bpl	10804 <max@@Base+0x64>
   107ec:	ldr	r3, [fp, #-8]
   107f0:	lsl	r3, r3, #2
   107f4:	ldr	r2, [fp, #-16]
   107f8:	add	r3, r2, r3
   107fc:	ldr	r3, [r3]
   10800:	str	r3, [fp, #-12]
   10804:	ldr	r3, [fp, #-8]
   10808:	add	r3, r3, #1
   1080c:	str	r3, [fp, #-8]
   10810:	ldr	r3, [fp, #-8]
   10814:	cmp	r3, #9
   10818:	ble	107c8 <max@@Base+0x28>
   1081c:	ldr	r3, [fp, #-12]
   10820:	vmov	s15, r3
   10824:	vmov.f32	s0, s15
   10828:	add	sp, fp, #0
   1082c:	pop	{fp}		; (ldr fp, [sp], #4)
   10830:	bx	lr

00010834 <min@@Base>:
   10834:	push	{fp}		; (str fp, [sp, #-4]!)
   10838:	add	fp, sp, #0
   1083c:	sub	sp, sp, #20
   10840:	str	r0, [fp, #-16]
   10844:	ldr	r3, [fp, #-16]
   10848:	ldr	r3, [r3]
   1084c:	str	r3, [fp, #-12]
   10850:	mov	r3, #1
   10854:	str	r3, [fp, #-8]
   10858:	b	108a4 <min@@Base+0x70>
   1085c:	ldr	r3, [fp, #-8]
   10860:	lsl	r3, r3, #2
   10864:	ldr	r2, [fp, #-16]
   10868:	add	r3, r2, r3
   1086c:	vldr	s15, [r3]
   10870:	vldr	s14, [fp, #-12]
   10874:	vcmpe.f32	s14, s15
   10878:	vmrs	APSR_nzcv, fpscr
   1087c:	ble	10898 <min@@Base+0x64>
   10880:	ldr	r3, [fp, #-8]
   10884:	lsl	r3, r3, #2
   10888:	ldr	r2, [fp, #-16]
   1088c:	add	r3, r2, r3
   10890:	ldr	r3, [r3]
   10894:	str	r3, [fp, #-12]
   10898:	ldr	r3, [fp, #-8]
   1089c:	add	r3, r3, #1
   108a0:	str	r3, [fp, #-8]
   108a4:	ldr	r3, [fp, #-8]
   108a8:	cmp	r3, #9
   108ac:	ble	1085c <min@@Base+0x28>
   108b0:	ldr	r3, [fp, #-12]
   108b4:	vmov	s15, r3
   108b8:	vmov.f32	s0, s15
   108bc:	add	sp, fp, #0
   108c0:	pop	{fp}		; (ldr fp, [sp], #4)
   108c4:	bx	lr

000108c8 <main@@Base>:
   108c8:	str	fp, [sp, #-8]!
   108cc:	str	lr, [sp, #4]
   108d0:	add	fp, sp, #4
   108d4:	sub	sp, sp, #48	; 0x30
   108d8:	mov	r3, #0
   108dc:	str	r3, [fp, #-8]
   108e0:	b	10930 <main@@Base+0x68>
   108e4:	ldr	r3, [fp, #-8]
   108e8:	add	r3, r3, #1
   108ec:	mov	r1, r3
   108f0:	ldr	r3, [pc, #320]	; 10a38 <main@@Base+0x170>
   108f4:	add	r3, pc, r3
   108f8:	mov	r0, r3
   108fc:	bl	105e8 <printf@plt>
   10900:	sub	r2, fp, #48	; 0x30
   10904:	ldr	r3, [fp, #-8]
   10908:	lsl	r3, r3, #2
   1090c:	add	r3, r2, r3
   10910:	mov	r1, r3
   10914:	ldr	r3, [pc, #288]	; 10a3c <main@@Base+0x174>
   10918:	add	r3, pc, r3
   1091c:	mov	r0, r3
   10920:	bl	10618 <__isoc99_scanf@plt>
   10924:	ldr	r3, [fp, #-8]
   10928:	add	r3, r3, #1
   1092c:	str	r3, [fp, #-8]
   10930:	ldr	r3, [fp, #-8]
   10934:	cmp	r3, #9
   10938:	ble	108e4 <main@@Base+0x1c>
   1093c:	sub	r3, fp, #48	; 0x30
   10940:	mov	r0, r3
   10944:	bl	10720 <avg@@Base>
   10948:	vmov.f32	s15, s0
   1094c:	vcvt.f64.f32	d7, s15
   10950:	vmov	r2, r3, d7
   10954:	ldr	r1, [pc, #228]	; 10a40 <main@@Base+0x178>
   10958:	add	r1, pc, r1
   1095c:	mov	r0, r1
   10960:	bl	105e8 <printf@plt>
   10964:	sub	r3, fp, #48	; 0x30
   10968:	mov	r0, r3
   1096c:	bl	107a0 <max@@Base>
   10970:	vmov.f32	s15, s0
   10974:	vcvt.f64.f32	d7, s15
   10978:	vmov	r2, r3, d7
   1097c:	ldr	r1, [pc, #192]	; 10a44 <main@@Base+0x17c>
   10980:	add	r1, pc, r1
   10984:	mov	r0, r1
   10988:	bl	105e8 <printf@plt>
   1098c:	sub	r3, fp, #48	; 0x30
   10990:	mov	r0, r3
   10994:	bl	10834 <min@@Base>
   10998:	vmov.f32	s15, s0
   1099c:	vcvt.f64.f32	d7, s15
   109a0:	vmov	r2, r3, d7
   109a4:	ldr	r1, [pc, #156]	; 10a48 <main@@Base+0x180>
   109a8:	add	r1, pc, r1
   109ac:	mov	r0, r1
   109b0:	bl	105e8 <printf@plt>
   109b4:	ldr	r3, [pc, #144]	; 10a4c <main@@Base+0x184>
   109b8:	add	r3, pc, r3
   109bc:	mov	r0, r3
   109c0:	bl	105e8 <printf@plt>
   109c4:	mov	r3, #0
   109c8:	str	r3, [fp, #-8]
   109cc:	b	10a0c <main@@Base+0x144>
   109d0:	ldr	r3, [fp, #-8]
   109d4:	lsl	r3, r3, #2
   109d8:	sub	r2, fp, #4
   109dc:	add	r3, r2, r3
   109e0:	sub	r3, r3, #44	; 0x2c
   109e4:	vldr	s15, [r3]
   109e8:	vcvt.f64.f32	d7, s15
   109ec:	vmov	r2, r3, d7
   109f0:	ldr	r1, [pc, #88]	; 10a50 <main@@Base+0x188>
   109f4:	add	r1, pc, r1
   109f8:	mov	r0, r1
   109fc:	bl	105e8 <printf@plt>
   10a00:	ldr	r3, [fp, #-8]
   10a04:	add	r3, r3, #1
   10a08:	str	r3, [fp, #-8]
   10a0c:	ldr	r3, [fp, #-8]
   10a10:	cmp	r3, #9
   10a14:	ble	109d0 <main@@Base+0x108>
   10a18:	mov	r0, #10
   10a1c:	bl	1060c <putchar@plt>
   10a20:	mov	r3, #0
   10a24:	mov	r0, r3
   10a28:	sub	sp, fp, #4
   10a2c:	ldr	fp, [sp]
   10a30:	add	sp, sp, #4
   10a34:	pop	{pc}		; (ldr pc, [sp], #4)
   10a38:	andeq	r0, r0, r8, asr #3
   10a3c:			; <UNDEFINED> instruction: 0x000001bc
   10a40:	andeq	r0, r0, r0, lsl #3
   10a44:	andeq	r0, r0, r8, ror #2
   10a48:	andeq	r0, r0, r0, asr r1
   10a4c:	andeq	r0, r0, r0, asr r1
   10a50:	andeq	r0, r0, ip, lsl r1

00010a54 <__libc_csu_init@@Base>:
   10a54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a58:	mov	r7, r0
   10a5c:	ldr	r6, [pc, #72]	; 10aac <__libc_csu_init@@Base+0x58>
   10a60:	ldr	r5, [pc, #72]	; 10ab0 <__libc_csu_init@@Base+0x5c>
   10a64:	add	r6, pc, r6
   10a68:	add	r5, pc, r5
   10a6c:	sub	r6, r6, r5
   10a70:	mov	r8, r1
   10a74:	mov	r9, r2
   10a78:	bl	105c8 <printf@plt-0x20>
   10a7c:	asrs	r6, r6, #2
   10a80:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a84:	mov	r4, #0
   10a88:	add	r4, r4, #1
   10a8c:	ldr	r3, [r5], #4
   10a90:	mov	r2, r9
   10a94:	mov	r1, r8
   10a98:	mov	r0, r7
   10a9c:	blx	r3
   10aa0:	cmp	r6, r4
   10aa4:	bne	10a88 <__libc_csu_init@@Base+0x34>
   10aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10aac:	andeq	r0, r1, r8, lsr #9
   10ab0:	andeq	r0, r1, r0, lsr #9

00010ab4 <__libc_csu_fini@@Base>:
   10ab4:	bx	lr

Disassembly of section .fini:

00010ab8 <.fini>:
   10ab8:	push	{r3, lr}
   10abc:	pop	{r3, pc}
