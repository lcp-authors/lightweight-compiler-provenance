
../repos/prog2/0.4:     file format elf32-littlearm


Disassembly of section .init:

000105bc <.init>:
   105bc:	push	{r3, lr}
   105c0:	bl	1066c <_start@@Base+0x3c>
   105c4:	pop	{r3, pc}

Disassembly of section .plt:

000105c8 <printf@plt-0x14>:
   105c8:	push	{lr}		; (str lr, [sp, #-4]!)
   105cc:	ldr	lr, [pc, #4]	; 105d8 <printf@plt-0x4>
   105d0:	add	lr, pc, lr
   105d4:	ldr	pc, [lr, #8]!
   105d8:	andeq	r0, r1, r8, lsr #20

000105dc <printf@plt>:
   105dc:	add	ip, pc, #0, 12
   105e0:	add	ip, ip, #16, 20	; 0x10000
   105e4:	ldr	pc, [ip, #2600]!	; 0xa28

000105e8 <puts@plt>:
   105e8:	add	ip, pc, #0, 12
   105ec:	add	ip, ip, #16, 20	; 0x10000
   105f0:	ldr	pc, [ip, #2592]!	; 0xa20

000105f4 <malloc@plt>:
   105f4:	add	ip, pc, #0, 12
   105f8:	add	ip, ip, #16, 20	; 0x10000
   105fc:	ldr	pc, [ip, #2584]!	; 0xa18

00010600 <__libc_start_main@plt>:
   10600:	add	ip, pc, #0, 12
   10604:	add	ip, ip, #16, 20	; 0x10000
   10608:	ldr	pc, [ip, #2576]!	; 0xa10

0001060c <__gmon_start__@plt>:
   1060c:	add	ip, pc, #0, 12
   10610:	add	ip, ip, #16, 20	; 0x10000
   10614:	ldr	pc, [ip, #2568]!	; 0xa08

00010618 <__isoc99_scanf@plt>:
   10618:	add	ip, pc, #0, 12
   1061c:	add	ip, ip, #16, 20	; 0x10000
   10620:	ldr	pc, [ip, #2560]!	; 0xa00

00010624 <abort@plt>:
   10624:	add	ip, pc, #0, 12
   10628:	add	ip, ip, #16, 20	; 0x10000
   1062c:	ldr	pc, [ip, #2552]!	; 0x9f8

Disassembly of section .text:

00010630 <_start@@Base>:
   10630:	mov	fp, #0
   10634:	mov	lr, #0
   10638:	pop	{r1}		; (ldr r1, [sp], #4)
   1063c:	mov	r2, sp
   10640:	push	{r2}		; (str r2, [sp, #-4]!)
   10644:	push	{r0}		; (str r0, [sp, #-4]!)
   10648:	ldr	ip, [pc, #16]	; 10660 <_start@@Base+0x30>
   1064c:	push	{ip}		; (str ip, [sp, #-4]!)
   10650:	ldr	r0, [pc, #12]	; 10664 <_start@@Base+0x34>
   10654:	ldr	r3, [pc, #12]	; 10668 <_start@@Base+0x38>
   10658:	bl	10600 <__libc_start_main@plt>
   1065c:	bl	10624 <abort@plt>
   10660:	andeq	r0, r1, ip, ror #19
   10664:			; <UNDEFINED> instruction: 0x000107bc
   10668:	andeq	r0, r1, ip, lsl #19
   1066c:	ldr	r3, [pc, #20]	; 10688 <_start@@Base+0x58>
   10670:	ldr	r2, [pc, #20]	; 1068c <_start@@Base+0x5c>
   10674:	add	r3, pc, r3
   10678:	ldr	r2, [r3, r2]
   1067c:	cmp	r2, #0
   10680:	bxeq	lr
   10684:	b	1060c <__gmon_start__@plt>
   10688:	andeq	r0, r1, r4, lsl #19
   1068c:	andeq	r0, r0, r8, lsr #32
   10690:	ldr	r0, [pc, #24]	; 106b0 <_start@@Base+0x80>
   10694:	ldr	r3, [pc, #24]	; 106b4 <_start@@Base+0x84>
   10698:	cmp	r3, r0
   1069c:	bxeq	lr
   106a0:	ldr	r3, [pc, #16]	; 106b8 <_start@@Base+0x88>
   106a4:	cmp	r3, #0
   106a8:	bxeq	lr
   106ac:	bx	r3
   106b0:	andeq	r1, r2, r4, lsr r0
   106b4:	andeq	r1, r2, r4, lsr r0
   106b8:	andeq	r0, r0, r0
   106bc:	ldr	r0, [pc, #36]	; 106e8 <_start@@Base+0xb8>
   106c0:	ldr	r1, [pc, #36]	; 106ec <_start@@Base+0xbc>
   106c4:	sub	r1, r1, r0
   106c8:	asr	r1, r1, #2
   106cc:	add	r1, r1, r1, lsr #31
   106d0:	asrs	r1, r1, #1
   106d4:	bxeq	lr
   106d8:	ldr	r3, [pc, #16]	; 106f0 <_start@@Base+0xc0>
   106dc:	cmp	r3, #0
   106e0:	bxeq	lr
   106e4:	bx	r3
   106e8:	andeq	r1, r2, r4, lsr r0
   106ec:	andeq	r1, r2, r4, lsr r0
   106f0:	andeq	r0, r0, r0
   106f4:	push	{r4, lr}
   106f8:	ldr	r4, [pc, #24]	; 10718 <_start@@Base+0xe8>
   106fc:	ldrb	r3, [r4]
   10700:	cmp	r3, #0
   10704:	popne	{r4, pc}
   10708:	bl	10690 <_start@@Base+0x60>
   1070c:	mov	r3, #1
   10710:	strb	r3, [r4]
   10714:	pop	{r4, pc}
   10718:	andeq	r1, r2, r4, lsr r0
   1071c:	b	106bc <_start@@Base+0x8c>

00010720 <ordenado@@Base>:
   10720:	push	{fp}		; (str fp, [sp, #-4]!)
   10724:	add	fp, sp, #0
   10728:	sub	sp, sp, #20
   1072c:	str	r0, [fp, #-16]
   10730:	str	r1, [fp, #-20]	; 0xffffffec
   10734:	ldr	r3, [fp, #-16]
   10738:	ldr	r3, [r3]
   1073c:	str	r3, [fp, #-12]
   10740:	mov	r3, #1
   10744:	str	r3, [fp, #-8]
   10748:	b	10798 <ordenado@@Base+0x78>
   1074c:	ldr	r3, [fp, #-8]
   10750:	lsl	r3, r3, #2
   10754:	ldr	r2, [fp, #-16]
   10758:	add	r3, r2, r3
   1075c:	ldr	r3, [r3]
   10760:	ldr	r2, [fp, #-12]
   10764:	cmp	r2, r3
   10768:	ble	10774 <ordenado@@Base+0x54>
   1076c:	mov	r3, #0
   10770:	b	107ac <ordenado@@Base+0x8c>
   10774:	ldr	r3, [fp, #-8]
   10778:	lsl	r3, r3, #2
   1077c:	ldr	r2, [fp, #-16]
   10780:	add	r3, r2, r3
   10784:	ldr	r3, [r3]
   10788:	str	r3, [fp, #-12]
   1078c:	ldr	r3, [fp, #-8]
   10790:	add	r3, r3, #1
   10794:	str	r3, [fp, #-8]
   10798:	ldr	r2, [fp, #-8]
   1079c:	ldr	r3, [fp, #-20]	; 0xffffffec
   107a0:	cmp	r2, r3
   107a4:	blt	1074c <ordenado@@Base+0x2c>
   107a8:	mov	r3, #1
   107ac:	mov	r0, r3
   107b0:	add	sp, fp, #0
   107b4:	pop	{fp}		; (ldr fp, [sp], #4)
   107b8:	bx	lr

000107bc <main@@Base>:
   107bc:	str	fp, [sp, #-8]!
   107c0:	str	lr, [sp, #4]
   107c4:	add	fp, sp, #4
   107c8:	sub	sp, sp, #16
   107cc:	ldr	r3, [pc, #404]	; 10968 <main@@Base+0x1ac>
   107d0:	add	r3, pc, r3
   107d4:	mov	r0, r3
   107d8:	bl	105dc <printf@plt>
   107dc:	sub	r3, fp, #16
   107e0:	mov	r1, r3
   107e4:	ldr	r3, [pc, #384]	; 1096c <main@@Base+0x1b0>
   107e8:	add	r3, pc, r3
   107ec:	mov	r0, r3
   107f0:	bl	10618 <__isoc99_scanf@plt>
   107f4:	ldr	r3, [fp, #-16]
   107f8:	cmp	r3, #100	; 0x64
   107fc:	ble	10818 <main@@Base+0x5c>
   10800:	ldr	r3, [pc, #360]	; 10970 <main@@Base+0x1b4>
   10804:	add	r3, pc, r3
   10808:	mov	r0, r3
   1080c:	bl	105dc <printf@plt>
   10810:	mov	r3, #100	; 0x64
   10814:	str	r3, [fp, #-16]
   10818:	ldr	r3, [fp, #-16]
   1081c:	lsl	r3, r3, #2
   10820:	mov	r0, r3
   10824:	bl	105f4 <malloc@plt>
   10828:	mov	r3, r0
   1082c:	str	r3, [fp, #-12]
   10830:	mov	r3, #0
   10834:	str	r3, [fp, #-8]
   10838:	b	10888 <main@@Base+0xcc>
   1083c:	ldr	r3, [fp, #-8]
   10840:	add	r3, r3, #1
   10844:	mov	r1, r3
   10848:	ldr	r3, [pc, #292]	; 10974 <main@@Base+0x1b8>
   1084c:	add	r3, pc, r3
   10850:	mov	r0, r3
   10854:	bl	105dc <printf@plt>
   10858:	ldr	r3, [fp, #-8]
   1085c:	lsl	r3, r3, #2
   10860:	ldr	r2, [fp, #-12]
   10864:	add	r3, r2, r3
   10868:	mov	r1, r3
   1086c:	ldr	r3, [pc, #260]	; 10978 <main@@Base+0x1bc>
   10870:	add	r3, pc, r3
   10874:	mov	r0, r3
   10878:	bl	10618 <__isoc99_scanf@plt>
   1087c:	ldr	r3, [fp, #-8]
   10880:	add	r3, r3, #1
   10884:	str	r3, [fp, #-8]
   10888:	ldr	r3, [fp, #-16]
   1088c:	ldr	r2, [fp, #-8]
   10890:	cmp	r2, r3
   10894:	blt	1083c <main@@Base+0x80>
   10898:	ldr	r3, [fp, #-16]
   1089c:	mov	r1, r3
   108a0:	ldr	r0, [fp, #-12]
   108a4:	bl	10720 <ordenado@@Base>
   108a8:	mov	r3, r0
   108ac:	cmp	r3, #0
   108b0:	beq	10940 <main@@Base+0x184>
   108b4:	ldr	r3, [pc, #192]	; 1097c <main@@Base+0x1c0>
   108b8:	add	r3, pc, r3
   108bc:	mov	r0, r3
   108c0:	bl	105dc <printf@plt>
   108c4:	ldr	r3, [fp, #-16]
   108c8:	sub	r3, r3, #1
   108cc:	str	r3, [fp, #-8]
   108d0:	b	10908 <main@@Base+0x14c>
   108d4:	ldr	r3, [fp, #-8]
   108d8:	lsl	r3, r3, #2
   108dc:	ldr	r2, [fp, #-12]
   108e0:	add	r3, r2, r3
   108e4:	ldr	r3, [r3]
   108e8:	mov	r1, r3
   108ec:	ldr	r3, [pc, #140]	; 10980 <main@@Base+0x1c4>
   108f0:	add	r3, pc, r3
   108f4:	mov	r0, r3
   108f8:	bl	105dc <printf@plt>
   108fc:	ldr	r3, [fp, #-8]
   10900:	sub	r3, r3, #1
   10904:	str	r3, [fp, #-8]
   10908:	ldr	r3, [fp, #-8]
   1090c:	cmp	r3, #0
   10910:	bgt	108d4 <main@@Base+0x118>
   10914:	ldr	r3, [fp, #-8]
   10918:	lsl	r3, r3, #2
   1091c:	ldr	r2, [fp, #-12]
   10920:	add	r3, r2, r3
   10924:	ldr	r3, [r3]
   10928:	mov	r1, r3
   1092c:	ldr	r3, [pc, #80]	; 10984 <main@@Base+0x1c8>
   10930:	add	r3, pc, r3
   10934:	mov	r0, r3
   10938:	bl	105dc <printf@plt>
   1093c:	b	10950 <main@@Base+0x194>
   10940:	ldr	r3, [pc, #64]	; 10988 <main@@Base+0x1cc>
   10944:	add	r3, pc, r3
   10948:	mov	r0, r3
   1094c:	bl	105e8 <puts@plt>
   10950:	mov	r3, #0
   10954:	mov	r0, r3
   10958:	sub	sp, fp, #4
   1095c:	ldr	fp, [sp]
   10960:	add	sp, sp, #4
   10964:	pop	{pc}		; (ldr pc, [sp], #4)
   10968:	andeq	r0, r0, r4, lsr #4
   1096c:	andeq	r0, r0, r0, lsr r2
   10970:	andeq	r0, r0, r8, lsl r2
   10974:	andeq	r0, r0, r0, lsl #4
   10978:	andeq	r0, r0, r8, lsr #3
   1097c:	andeq	r0, r0, ip, lsr #3
   10980:			; <UNDEFINED> instruction: 0x000001b8
   10984:	andeq	r0, r0, ip, ror r1
   10988:	andeq	r0, r0, r0, ror r1

0001098c <__libc_csu_init@@Base>:
   1098c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10990:	mov	r7, r0
   10994:	ldr	r6, [pc, #72]	; 109e4 <__libc_csu_init@@Base+0x58>
   10998:	ldr	r5, [pc, #72]	; 109e8 <__libc_csu_init@@Base+0x5c>
   1099c:	add	r6, pc, r6
   109a0:	add	r5, pc, r5
   109a4:	sub	r6, r6, r5
   109a8:	mov	r8, r1
   109ac:	mov	r9, r2
   109b0:	bl	105bc <printf@plt-0x20>
   109b4:	asrs	r6, r6, #2
   109b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   109bc:	mov	r4, #0
   109c0:	add	r4, r4, #1
   109c4:	ldr	r3, [r5], #4
   109c8:	mov	r2, r9
   109cc:	mov	r1, r8
   109d0:	mov	r0, r7
   109d4:	blx	r3
   109d8:	cmp	r6, r4
   109dc:	bne	109c0 <__libc_csu_init@@Base+0x34>
   109e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109e4:	andeq	r0, r1, r0, ror r5
   109e8:	andeq	r0, r1, r8, ror #10

000109ec <__libc_csu_fini@@Base>:
   109ec:	bx	lr

Disassembly of section .fini:

000109f0 <.fini>:
   109f0:	push	{r3, lr}
   109f4:	pop	{r3, pc}
