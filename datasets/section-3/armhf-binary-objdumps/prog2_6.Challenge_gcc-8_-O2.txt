
../repos/prog2/6.Challenge:     file format elf32-littlearm


Disassembly of section .init:

0001059c <.init>:
   1059c:	push	{r3, lr}
   105a0:	bl	107a4 <_start@@Base+0x3c>
   105a4:	pop	{r3, pc}

Disassembly of section .plt:

000105a8 <printf@plt-0x14>:
   105a8:	push	{lr}		; (str lr, [sp, #-4]!)
   105ac:	ldr	lr, [pc, #4]	; 105b8 <printf@plt-0x4>
   105b0:	add	lr, pc, lr
   105b4:	ldr	pc, [lr, #8]!
   105b8:	andeq	r0, r1, r8, asr #20

000105bc <printf@plt>:
   105bc:	add	ip, pc, #0, 12
   105c0:	add	ip, ip, #16, 20	; 0x10000
   105c4:	ldr	pc, [ip, #2632]!	; 0xa48

000105c8 <malloc@plt>:
   105c8:	add	ip, pc, #0, 12
   105cc:	add	ip, ip, #16, 20	; 0x10000
   105d0:	ldr	pc, [ip, #2624]!	; 0xa40

000105d4 <__libc_start_main@plt>:
   105d4:	add	ip, pc, #0, 12
   105d8:	add	ip, ip, #16, 20	; 0x10000
   105dc:	ldr	pc, [ip, #2616]!	; 0xa38

000105e0 <__gmon_start__@plt>:
   105e0:	add	ip, pc, #0, 12
   105e4:	add	ip, ip, #16, 20	; 0x10000
   105e8:	ldr	pc, [ip, #2608]!	; 0xa30

000105ec <exit@plt>:
   105ec:	add	ip, pc, #0, 12
   105f0:	add	ip, ip, #16, 20	; 0x10000
   105f4:	ldr	pc, [ip, #2600]!	; 0xa28

000105f8 <__isoc99_scanf@plt>:
   105f8:	add	ip, pc, #0, 12
   105fc:	add	ip, ip, #16, 20	; 0x10000
   10600:	ldr	pc, [ip, #2592]!	; 0xa20

00010604 <abort@plt>:
   10604:	add	ip, pc, #0, 12
   10608:	add	ip, ip, #16, 20	; 0x10000
   1060c:	ldr	pc, [ip, #2584]!	; 0xa18

Disassembly of section .text:

00010610 <main@@Base>:
   10610:	ldr	r3, [pc, #308]	; 1074c <main@@Base+0x13c>
   10614:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10618:	strd	r6, [sp, #8]
   1061c:	strd	r8, [sp, #16]
   10620:	strd	sl, [sp, #24]
   10624:	add	r3, pc, r3
   10628:	str	lr, [sp, #32]
   1062c:	sub	sp, sp, #28
   10630:	add	r9, sp, #20
   10634:	str	r3, [sp, #4]
   10638:	ldr	r3, [pc, #272]	; 10750 <main@@Base+0x140>
   1063c:	add	r3, pc, r3
   10640:	str	r3, [sp, #12]
   10644:	ldr	r3, [pc, #264]	; 10754 <main@@Base+0x144>
   10648:	add	r3, pc, r3
   1064c:	str	r3, [sp, #8]
   10650:	mov	r1, r9
   10654:	ldr	r0, [sp, #4]
   10658:	bl	105f8 <__isoc99_scanf@plt>
   1065c:	ldr	r0, [sp, #20]
   10660:	cmp	r0, #0
   10664:	beq	10734 <main@@Base+0x124>
   10668:	lsl	r0, r0, #3
   1066c:	bl	105c8 <malloc@plt>
   10670:	ldr	r4, [sp, #20]
   10674:	mov	r8, r0
   10678:	cmp	r4, #0
   1067c:	subgt	r2, r0, #4
   10680:	movgt	r3, #0
   10684:	ble	10738 <main@@Base+0x128>
   10688:	add	r3, r3, #1
   1068c:	cmp	r4, r3
   10690:	str	r3, [r2, #4]!
   10694:	bne	10688 <main@@Base+0x78>
   10698:	ldr	r0, [sp, #8]
   1069c:	bl	105bc <printf@plt>
   106a0:	cmp	r4, #2
   106a4:	movle	r3, r8
   106a8:	movle	r4, #4
   106ac:	ble	10704 <main@@Base+0xf4>
   106b0:	ldr	r7, [pc, #160]	; 10758 <main@@Base+0x148>
   106b4:	lsl	r5, r4, #3
   106b8:	add	sl, r8, r4, lsl #2
   106bc:	rsb	r6, r5, #0
   106c0:	sub	r5, r5, #8
   106c4:	add	r2, r6, #4
   106c8:	add	r5, r5, r8
   106cc:	sub	fp, r2, r8
   106d0:	sub	r6, r6, r8
   106d4:	add	r7, pc, r7
   106d8:	mov	r0, r7
   106dc:	ldr	r1, [r6, sl, lsl #1]
   106e0:	bl	105bc <printf@plt>
   106e4:	ldr	r3, [fp, sl, lsl #1]
   106e8:	str	r3, [sl], #4
   106ec:	cmp	r5, sl
   106f0:	bne	106d8 <main@@Base+0xc8>
   106f4:	lsl	r4, r4, #3
   106f8:	sub	r4, r4, #16
   106fc:	add	r3, r8, r4
   10700:	add	r4, r4, #4
   10704:	ldr	r0, [pc, #80]	; 1075c <main@@Base+0x14c>
   10708:	ldr	r1, [r3]
   1070c:	add	r0, pc, r0
   10710:	bl	105bc <printf@plt>
   10714:	ldr	r0, [pc, #68]	; 10760 <main@@Base+0x150>
   10718:	add	r0, pc, r0
   1071c:	bl	105bc <printf@plt>
   10720:	ldr	r0, [pc, #60]	; 10764 <main@@Base+0x154>
   10724:	ldr	r1, [r8, r4]
   10728:	add	r0, pc, r0
   1072c:	bl	105bc <printf@plt>
   10730:	b	10650 <main@@Base+0x40>
   10734:	bl	105ec <exit@plt>
   10738:	ldr	r0, [sp, #12]
   1073c:	mov	r4, #4
   10740:	bl	105bc <printf@plt>
   10744:	mov	r3, r8
   10748:	b	10704 <main@@Base+0xf4>
   1074c:	muleq	r0, ip, r2
   10750:	andeq	r0, r0, r8, lsl #5
   10754:	andeq	r0, r0, ip, ror r2
   10758:	andeq	r0, r0, r4, lsl #4
   1075c:			; <UNDEFINED> instruction: 0x000001b4
   10760:	andeq	r0, r0, r8, asr #3
   10764:	andeq	r0, r0, ip, asr #3

00010768 <_start@@Base>:
   10768:	mov	fp, #0
   1076c:	mov	lr, #0
   10770:	pop	{r1}		; (ldr r1, [sp], #4)
   10774:	mov	r2, sp
   10778:	push	{r2}		; (str r2, [sp, #-4]!)
   1077c:	push	{r0}		; (str r0, [sp, #-4]!)
   10780:	ldr	ip, [pc, #16]	; 10798 <_start@@Base+0x30>
   10784:	push	{ip}		; (str ip, [sp, #-4]!)
   10788:	ldr	r0, [pc, #12]	; 1079c <_start@@Base+0x34>
   1078c:	ldr	r3, [pc, #12]	; 107a0 <_start@@Base+0x38>
   10790:	bl	105d4 <__libc_start_main@plt>
   10794:	bl	10604 <abort@plt>
   10798:			; <UNDEFINED> instruction: 0x000108b8
   1079c:	andeq	r0, r1, r0, lsl r6
   107a0:	andeq	r0, r1, r8, asr r8
   107a4:	ldr	r3, [pc, #20]	; 107c0 <_start@@Base+0x58>
   107a8:	ldr	r2, [pc, #20]	; 107c4 <_start@@Base+0x5c>
   107ac:	add	r3, pc, r3
   107b0:	ldr	r2, [r3, r2]
   107b4:	cmp	r2, #0
   107b8:	bxeq	lr
   107bc:	b	105e0 <__gmon_start__@plt>
   107c0:	andeq	r0, r1, ip, asr #16
   107c4:	andeq	r0, r0, r8, lsr #32
   107c8:	ldr	r0, [pc, #24]	; 107e8 <_start@@Base+0x80>
   107cc:	ldr	r3, [pc, #24]	; 107ec <_start@@Base+0x84>
   107d0:	cmp	r3, r0
   107d4:	bxeq	lr
   107d8:	ldr	r3, [pc, #16]	; 107f0 <_start@@Base+0x88>
   107dc:	cmp	r3, #0
   107e0:	bxeq	lr
   107e4:	bx	r3
   107e8:	andeq	r1, r2, r4, lsr r0
   107ec:	andeq	r1, r2, r4, lsr r0
   107f0:	andeq	r0, r0, r0
   107f4:	ldr	r0, [pc, #36]	; 10820 <_start@@Base+0xb8>
   107f8:	ldr	r1, [pc, #36]	; 10824 <_start@@Base+0xbc>
   107fc:	sub	r1, r1, r0
   10800:	asr	r1, r1, #2
   10804:	add	r1, r1, r1, lsr #31
   10808:	asrs	r1, r1, #1
   1080c:	bxeq	lr
   10810:	ldr	r3, [pc, #16]	; 10828 <_start@@Base+0xc0>
   10814:	cmp	r3, #0
   10818:	bxeq	lr
   1081c:	bx	r3
   10820:	andeq	r1, r2, r4, lsr r0
   10824:	andeq	r1, r2, r4, lsr r0
   10828:	andeq	r0, r0, r0
   1082c:	push	{r4, lr}
   10830:	ldr	r4, [pc, #24]	; 10850 <_start@@Base+0xe8>
   10834:	ldrb	r3, [r4]
   10838:	cmp	r3, #0
   1083c:	popne	{r4, pc}
   10840:	bl	107c8 <_start@@Base+0x60>
   10844:	mov	r3, #1
   10848:	strb	r3, [r4]
   1084c:	pop	{r4, pc}
   10850:	andeq	r1, r2, r4, lsr r0
   10854:	b	107f4 <_start@@Base+0x8c>

00010858 <__libc_csu_init@@Base>:
   10858:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1085c:	mov	r7, r0
   10860:	ldr	r6, [pc, #72]	; 108b0 <__libc_csu_init@@Base+0x58>
   10864:	ldr	r5, [pc, #72]	; 108b4 <__libc_csu_init@@Base+0x5c>
   10868:	add	r6, pc, r6
   1086c:	add	r5, pc, r5
   10870:	sub	r6, r6, r5
   10874:	mov	r8, r1
   10878:	mov	r9, r2
   1087c:	bl	1059c <printf@plt-0x20>
   10880:	asrs	r6, r6, #2
   10884:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10888:	mov	r4, #0
   1088c:	add	r4, r4, #1
   10890:	ldr	r3, [r5], #4
   10894:	mov	r2, r9
   10898:	mov	r1, r8
   1089c:	mov	r0, r7
   108a0:	blx	r3
   108a4:	cmp	r6, r4
   108a8:	bne	1088c <__libc_csu_init@@Base+0x34>
   108ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108b0:	andeq	r0, r1, r4, lsr #13
   108b4:	muleq	r1, ip, r6

000108b8 <__libc_csu_fini@@Base>:
   108b8:	bx	lr

Disassembly of section .fini:

000108bc <.fini>:
   108bc:	push	{r3, lr}
   108c0:	pop	{r3, pc}
