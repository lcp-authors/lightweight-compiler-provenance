
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

00011890 <.init>:
   11890:	push	{r3, lr}
   11894:	bl	11d18 <_start@@Base+0x3c>
   11898:	pop	{r3, pc}

Disassembly of section .plt:

0001189c <fdopen@plt-0x14>:
   1189c:	push	{lr}		; (str lr, [sp, #-4]!)
   118a0:	ldr	lr, [pc, #4]	; 118ac <fdopen@plt-0x4>
   118a4:	add	lr, pc, lr
   118a8:	ldr	pc, [lr, #8]!
   118ac:	andeq	r8, r1, r4, asr r7

000118b0 <fdopen@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #24, 20	; 0x18000
   118b8:	ldr	pc, [ip, #1876]!	; 0x754

000118bc <raise@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #24, 20	; 0x18000
   118c4:	ldr	pc, [ip, #1868]!	; 0x74c

000118c8 <setbuf@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #24, 20	; 0x18000
   118d0:	ldr	pc, [ip, #1860]!	; 0x744

000118d4 <strtol@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #24, 20	; 0x18000
   118dc:	ldr	pc, [ip, #1852]!	; 0x73c

000118e0 <fopen@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #24, 20	; 0x18000
   118e8:	ldr	pc, [ip, #1844]!	; 0x734

000118ec <free@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #24, 20	; 0x18000
   118f4:	ldr	pc, [ip, #1836]!	; 0x72c

000118f8 <memcpy@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #24, 20	; 0x18000
   11900:	ldr	pc, [ip, #1828]!	; 0x724

00011904 <ftell@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #24, 20	; 0x18000
   1190c:	ldr	pc, [ip, #1820]!	; 0x71c

00011910 <fwrite@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #24, 20	; 0x18000
   11918:	ldr	pc, [ip, #1812]!	; 0x714

0001191c <strcpy@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #24, 20	; 0x18000
   11924:	ldr	pc, [ip, #1804]!	; 0x70c

00011928 <fread@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #24, 20	; 0x18000
   11930:	ldr	pc, [ip, #1796]!	; 0x704

00011934 <open64@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #24, 20	; 0x18000
   1193c:	ldr	pc, [ip, #1788]!	; 0x6fc

00011940 <getenv@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #24, 20	; 0x18000
   11948:	ldr	pc, [ip, #1780]!	; 0x6f4

0001194c <malloc@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #24, 20	; 0x18000
   11954:	ldr	pc, [ip, #1772]!	; 0x6ec

00011958 <__libc_start_main@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #24, 20	; 0x18000
   11960:	ldr	pc, [ip, #1764]!	; 0x6e4

00011964 <__gmon_start__@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #24, 20	; 0x18000
   1196c:	ldr	pc, [ip, #1756]!	; 0x6dc

00011970 <getpid@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #24, 20	; 0x18000
   11978:	ldr	pc, [ip, #1748]!	; 0x6d4

0001197c <exit@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #24, 20	; 0x18000
   11984:	ldr	pc, [ip, #1740]!	; 0x6cc

00011988 <strlen@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #24, 20	; 0x18000
   11990:	ldr	pc, [ip, #1732]!	; 0x6c4

00011994 <getopt@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #24, 20	; 0x18000
   1199c:	ldr	pc, [ip, #1724]!	; 0x6bc

000119a0 <fprintf@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #24, 20	; 0x18000
   119a8:	ldr	pc, [ip, #1716]!	; 0x6b4

000119ac <__errno_location@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #24, 20	; 0x18000
   119b4:	ldr	pc, [ip, #1708]!	; 0x6ac

000119b8 <mkdir@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #24, 20	; 0x18000
   119c0:	ldr	pc, [ip, #1700]!	; 0x6a4

000119c4 <memset@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #24, 20	; 0x18000
   119cc:	ldr	pc, [ip, #1692]!	; 0x69c

000119d0 <strncpy@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #24, 20	; 0x18000
   119d8:	ldr	pc, [ip, #1684]!	; 0x694

000119dc <access@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #24, 20	; 0x18000
   119e4:	ldr	pc, [ip, #1676]!	; 0x68c

000119e8 <fclose@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #24, 20	; 0x18000
   119f0:	ldr	pc, [ip, #1668]!	; 0x684

000119f4 <strnlen@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #24, 20	; 0x18000
   119fc:	ldr	pc, [ip, #1660]!	; 0x67c

00011a00 <fcntl64@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #24, 20	; 0x18000
   11a08:	ldr	pc, [ip, #1652]!	; 0x674

00011a0c <vfprintf@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #24, 20	; 0x18000
   11a14:	ldr	pc, [ip, #1644]!	; 0x66c

00011a18 <fputc@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #24, 20	; 0x18000
   11a20:	ldr	pc, [ip, #1636]!	; 0x664

00011a24 <atoi@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #24, 20	; 0x18000
   11a2c:	ldr	pc, [ip, #1628]!	; 0x65c

00011a30 <fopen64@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #24, 20	; 0x18000
   11a38:	ldr	pc, [ip, #1620]!	; 0x654

00011a3c <fseek@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #24, 20	; 0x18000
   11a44:	ldr	pc, [ip, #1612]!	; 0x64c

00011a48 <strncmp@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #24, 20	; 0x18000
   11a50:	ldr	pc, [ip, #1604]!	; 0x644

00011a54 <abort@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #24, 20	; 0x18000
   11a5c:	ldr	pc, [ip, #1596]!	; 0x63c

00011a60 <close@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #24, 20	; 0x18000
   11a68:	ldr	pc, [ip, #1588]!	; 0x634

Disassembly of section .text:

00011a6c <main@@Base-0x18>:
   11a6c:	b	187dc <__gcov_sort_n_vals@@Base+0x430>
   11a70:	b	187dc <__gcov_sort_n_vals@@Base+0x430>
   11a74:	b	187dc <__gcov_sort_n_vals@@Base+0x430>
   11a78:	b	187dc <__gcov_sort_n_vals@@Base+0x430>
   11a7c:	b	187dc <__gcov_sort_n_vals@@Base+0x430>
   11a80:	b	187dc <__gcov_sort_n_vals@@Base+0x430>

00011a84 <main@@Base>:
   11a84:	ldr	r2, [pc, #444]	; 11c48 <main@@Base+0x1c4>
   11a88:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11a8c:	mov	r5, r1
   11a90:	ldr	r4, [pc, #436]	; 11c4c <main@@Base+0x1c8>
   11a94:	add	r2, pc, r2
   11a98:	ldr	r3, [r2, #192]	; 0xc0
   11a9c:	add	r4, pc, r4
   11aa0:	ldr	r1, [r2, #196]	; 0xc4
   11aa4:	strd	r6, [sp, #8]
   11aa8:	mov	r6, r0
   11aac:	ldr	r7, [pc, #412]	; 11c50 <main@@Base+0x1cc>
   11ab0:	strd	r8, [sp, #16]
   11ab4:	adds	r3, r3, #1
   11ab8:	mov	r8, #0
   11abc:	ldr	r9, [pc, #400]	; 11c54 <main@@Base+0x1d0>
   11ac0:	str	sl, [sp, #24]
   11ac4:	adc	r1, r1, r8
   11ac8:	ldr	sl, [pc, #392]	; 11c58 <main@@Base+0x1d4>
   11acc:	add	r7, pc, r7
   11ad0:	str	lr, [sp, #28]
   11ad4:	str	r3, [r2, #192]	; 0xc0
   11ad8:	add	r9, pc, r9
   11adc:	str	r1, [r2, #196]	; 0xc4
   11ae0:	add	sl, pc, sl
   11ae4:	b	11b2c <main@@Base+0xa8>
   11ae8:	cmp	r0, #111	; 0x6f
   11aec:	bne	11b14 <main@@Base+0x90>
   11af0:	ldr	r3, [r4, #200]	; 0xc8
   11af4:	ldr	r1, [r4, #204]	; 0xcc
   11af8:	ldr	r2, [pc, #348]	; 11c5c <main@@Base+0x1d8>
   11afc:	adds	r3, r3, #1
   11b00:	adc	r1, r1, #0
   11b04:	str	r3, [r4, #200]	; 0xc8
   11b08:	str	r1, [r4, #204]	; 0xcc
   11b0c:	ldr	r3, [r9, r2]
   11b10:	ldr	r8, [r3]
   11b14:	ldr	r3, [sl, #208]	; 0xd0
   11b18:	ldr	r2, [sl, #212]	; 0xd4
   11b1c:	adds	r3, r3, #1
   11b20:	adc	r2, r2, #0
   11b24:	str	r3, [sl, #208]	; 0xd0
   11b28:	str	r2, [sl, #212]	; 0xd4
   11b2c:	mov	r2, r7
   11b30:	mov	r1, r5
   11b34:	mov	r0, r6
   11b38:	bl	11994 <getopt@plt>
   11b3c:	cmn	r0, #1
   11b40:	bne	11ae8 <main@@Base+0x64>
   11b44:	ldr	r3, [pc, #276]	; 11c60 <main@@Base+0x1dc>
   11b48:	ldr	r3, [r9, r3]
   11b4c:	ldr	r2, [r3]
   11b50:	cmp	r2, r6
   11b54:	bge	11be8 <main@@Base+0x164>
   11b58:	ldr	r3, [pc, #260]	; 11c64 <main@@Base+0x1e0>
   11b5c:	ldr	r0, [r5, r2, lsl #2]
   11b60:	add	r3, pc, r3
   11b64:	ldr	r2, [r3, #216]	; 0xd8
   11b68:	ldr	r1, [r3, #220]	; 0xdc
   11b6c:	adds	r2, r2, #1
   11b70:	adc	r1, r1, #0
   11b74:	cmp	r8, #0
   11b78:	str	r2, [r3, #216]	; 0xd8
   11b7c:	str	r1, [r3, #220]	; 0xdc
   11b80:	beq	11bc4 <main@@Base+0x140>
   11b84:	mov	r1, r8
   11b88:	bl	120ac <my_main@@Base>
   11b8c:	ldr	r2, [pc, #212]	; 11c68 <main@@Base+0x1e4>
   11b90:	ldrd	r4, [sp]
   11b94:	ldrd	r6, [sp, #8]
   11b98:	add	r2, pc, r2
   11b9c:	ldr	r3, [r2, #240]	; 0xf0
   11ba0:	ldr	r1, [r2, #244]	; 0xf4
   11ba4:	ldrd	r8, [sp, #16]
   11ba8:	adds	r3, r3, #1
   11bac:	ldr	sl, [sp, #24]
   11bb0:	add	sp, sp, #28
   11bb4:	adc	r1, r1, #0
   11bb8:	str	r3, [r2, #240]	; 0xf0
   11bbc:	str	r1, [r2, #244]	; 0xf4
   11bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   11bc4:	ldr	r2, [r3, #232]	; 0xe8
   11bc8:	ldr	r1, [r3, #236]	; 0xec
   11bcc:	ldr	r8, [pc, #152]	; 11c6c <main@@Base+0x1e8>
   11bd0:	adds	r2, r2, #1
   11bd4:	adc	r1, r1, #0
   11bd8:	str	r2, [r3, #232]	; 0xe8
   11bdc:	add	r8, pc, r8
   11be0:	str	r1, [r3, #236]	; 0xec
   11be4:	b	11b84 <main@@Base+0x100>
   11be8:	ldr	r4, [pc, #128]	; 11c70 <main@@Base+0x1ec>
   11bec:	mov	r1, #1
   11bf0:	mov	r2, #45	; 0x2d
   11bf4:	ldr	r0, [pc, #120]	; 11c74 <main@@Base+0x1f0>
   11bf8:	add	r4, pc, r4
   11bfc:	ldr	r3, [r4, #224]	; 0xe0
   11c00:	ldr	ip, [r4, #228]	; 0xe4
   11c04:	adds	r3, r3, r1
   11c08:	adc	ip, ip, #0
   11c0c:	str	r3, [r4, #224]	; 0xe0
   11c10:	str	ip, [r4, #228]	; 0xe4
   11c14:	ldr	r3, [r9, r0]
   11c18:	ldr	r0, [pc, #88]	; 11c78 <main@@Base+0x1f4>
   11c1c:	ldr	r3, [r3]
   11c20:	add	r0, pc, r0
   11c24:	bl	11910 <fwrite@plt>
   11c28:	ldr	r3, [r4, #248]	; 0xf8
   11c2c:	mov	r0, #1
   11c30:	ldr	r2, [r4, #252]	; 0xfc
   11c34:	adds	r3, r3, r0
   11c38:	adc	r2, r2, #0
   11c3c:	str	r3, [r4, #248]	; 0xf8
   11c40:	str	r2, [r4, #252]	; 0xfc
   11c44:	bl	1197c <exit@plt>
   11c48:	andeq	r9, r1, ip
   11c4c:	andeq	r9, r1, r4
   11c50:	andeq	r7, r0, r4, lsl #3
   11c54:	andeq	r8, r1, r0, lsr #10
   11c58:	andeq	r8, r1, r0, asr #31
   11c5c:	strheq	r0, [r0], -r8
   11c60:	andeq	r0, r0, r0, lsr #1
   11c64:	andeq	r8, r1, r0, asr #30
   11c68:	andeq	r8, r1, r8, lsl #30
   11c6c:	andeq	r7, r0, r0, ror r0
   11c70:	andeq	r8, r1, r8, lsr #29
   11c74:	andeq	r0, r0, r4, lsr #1
   11c78:	andeq	r7, r0, r4, lsr r0
   11c7c:	ldr	r0, [pc, #4]	; 11c88 <main@@Base+0x204>
   11c80:	add	r0, pc, r0
   11c84:	b	1884c <__gcov_sort_n_vals@@Base+0x4a0>
   11c88:	andeq	r8, r1, ip, lsr r4
   11c8c:	ldr	r0, [pc, #4]	; 11c98 <main@@Base+0x214>
   11c90:	add	r0, pc, r0
   11c94:	b	1884c <__gcov_sort_n_vals@@Base+0x4a0>
   11c98:			; <UNDEFINED> instruction: 0x000184bc
   11c9c:	ldr	r0, [pc, #4]	; 11ca8 <main@@Base+0x224>
   11ca0:	add	r0, pc, r0
   11ca4:	b	1884c <__gcov_sort_n_vals@@Base+0x4a0>
   11ca8:	andeq	r8, r1, r0, asr #15
   11cac:	ldr	r0, [pc, #4]	; 11cb8 <main@@Base+0x234>
   11cb0:	add	r0, pc, r0
   11cb4:	b	1884c <__gcov_sort_n_vals@@Base+0x4a0>
   11cb8:	andeq	r8, r1, ip, asr #17
   11cbc:	ldr	r0, [pc, #4]	; 11cc8 <main@@Base+0x244>
   11cc0:	add	r0, pc, r0
   11cc4:	b	1884c <__gcov_sort_n_vals@@Base+0x4a0>
   11cc8:			; <UNDEFINED> instruction: 0x00018ab8
   11ccc:	ldr	r0, [pc, #4]	; 11cd8 <main@@Base+0x254>
   11cd0:	add	r0, pc, r0
   11cd4:	b	1884c <__gcov_sort_n_vals@@Base+0x4a0>
   11cd8:	andeq	r8, r1, r8, lsl ip

00011cdc <_start@@Base>:
   11cdc:	mov	fp, #0
   11ce0:	mov	lr, #0
   11ce4:	pop	{r1}		; (ldr r1, [sp], #4)
   11ce8:	mov	r2, sp
   11cec:	push	{r2}		; (str r2, [sp, #-4]!)
   11cf0:	push	{r0}		; (str r0, [sp, #-4]!)
   11cf4:	ldr	ip, [pc, #16]	; 11d0c <_start@@Base+0x30>
   11cf8:	push	{ip}		; (str ip, [sp, #-4]!)
   11cfc:	ldr	r0, [pc, #12]	; 11d10 <_start@@Base+0x34>
   11d00:	ldr	r3, [pc, #12]	; 11d14 <_start@@Base+0x38>
   11d04:	bl	11958 <__libc_start_main@plt>
   11d08:	bl	11a54 <abort@plt>
   11d0c:	andeq	r8, r1, r4, asr #23
   11d10:	andeq	r1, r1, r4, lsl #21
   11d14:	andeq	r8, r1, r4, ror #22
   11d18:	ldr	r3, [pc, #20]	; 11d34 <_start@@Base+0x58>
   11d1c:	ldr	r2, [pc, #20]	; 11d38 <_start@@Base+0x5c>
   11d20:	add	r3, pc, r3
   11d24:	ldr	r2, [r3, r2]
   11d28:	cmp	r2, #0
   11d2c:	bxeq	lr
   11d30:	b	11964 <__gmon_start__@plt>
   11d34:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11d38:	andeq	r0, r0, r8, lsr #1
   11d3c:	ldr	r0, [pc, #24]	; 11d5c <_start@@Base+0x80>
   11d40:	ldr	r3, [pc, #24]	; 11d60 <_start@@Base+0x84>
   11d44:	cmp	r3, r0
   11d48:	bxeq	lr
   11d4c:	ldr	r3, [pc, #16]	; 11d64 <_start@@Base+0x88>
   11d50:	cmp	r3, #0
   11d54:	bxeq	lr
   11d58:	bx	r3
   11d5c:	andeq	sl, r2, r0, lsr #21
   11d60:	andeq	sl, r2, r0, lsr #21
   11d64:	andeq	r0, r0, r0
   11d68:	ldr	r0, [pc, #36]	; 11d94 <_start@@Base+0xb8>
   11d6c:	ldr	r1, [pc, #36]	; 11d98 <_start@@Base+0xbc>
   11d70:	sub	r1, r1, r0
   11d74:	asr	r1, r1, #2
   11d78:	add	r1, r1, r1, lsr #31
   11d7c:	asrs	r1, r1, #1
   11d80:	bxeq	lr
   11d84:	ldr	r3, [pc, #16]	; 11d9c <_start@@Base+0xc0>
   11d88:	cmp	r3, #0
   11d8c:	bxeq	lr
   11d90:	bx	r3
   11d94:	andeq	sl, r2, r0, lsr #21
   11d98:	andeq	sl, r2, r0, lsr #21
   11d9c:	andeq	r0, r0, r0
   11da0:	push	{r4, lr}
   11da4:	ldr	r4, [pc, #24]	; 11dc4 <_start@@Base+0xe8>
   11da8:	ldrb	r3, [r4]
   11dac:	cmp	r3, #0
   11db0:	popne	{r4, pc}
   11db4:	bl	11d3c <_start@@Base+0x60>
   11db8:	mov	r3, #1
   11dbc:	strb	r3, [r4]
   11dc0:	pop	{r4, pc}
   11dc4:	andeq	sl, r2, r0, lsr #21
   11dc8:	b	11d68 <_start@@Base+0x8c>

00011dcc <load_file@@Base>:
   11dcc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11dd0:	ldr	r4, [pc, #692]	; 1208c <load_file@@Base+0x2c0>
   11dd4:	ldr	r1, [pc, #692]	; 12090 <load_file@@Base+0x2c4>
   11dd8:	ldr	r5, [pc, #692]	; 12094 <load_file@@Base+0x2c8>
   11ddc:	add	r4, pc, r4
   11de0:	ldr	r3, [r4]
   11de4:	add	r1, pc, r1
   11de8:	ldr	r2, [r4, #4]
   11dec:	strd	r6, [sp, #8]
   11df0:	mov	r6, r0
   11df4:	add	r5, pc, r5
   11df8:	strd	r8, [sp, #16]
   11dfc:	adds	r3, r3, #1
   11e00:	str	sl, [sp, #24]
   11e04:	str	lr, [sp, #28]
   11e08:	adc	r2, r2, #0
   11e0c:	str	r3, [r4]
   11e10:	str	r2, [r4, #4]
   11e14:	bl	118e0 <fopen@plt>
   11e18:	subs	r7, r0, #0
   11e1c:	beq	11f68 <load_file@@Base+0x19c>
   11e20:	ldr	r3, [r4, #8]
   11e24:	mov	r1, #0
   11e28:	mov	r2, #2
   11e2c:	ldr	ip, [r4, #12]
   11e30:	adds	r3, r3, #1
   11e34:	adc	ip, ip, r1
   11e38:	str	r3, [r4, #8]
   11e3c:	str	ip, [r4, #12]
   11e40:	bl	11a3c <fseek@plt>
   11e44:	ldr	r3, [r4, #24]
   11e48:	ldr	r2, [r4, #28]
   11e4c:	adds	r3, r3, #1
   11e50:	adc	r2, r2, #0
   11e54:	subs	r9, r0, #0
   11e58:	str	r3, [r4, #24]
   11e5c:	str	r2, [r4, #28]
   11e60:	bne	11f20 <load_file@@Base+0x154>
   11e64:	ldr	r3, [r4, #32]
   11e68:	mov	r0, r7
   11e6c:	ldr	r2, [r4, #36]	; 0x24
   11e70:	adds	r3, r3, #1
   11e74:	adc	r2, r2, #0
   11e78:	str	r3, [r4, #32]
   11e7c:	str	r2, [r4, #36]	; 0x24
   11e80:	bl	11904 <ftell@plt>
   11e84:	cmn	r0, #1
   11e88:	mov	sl, r0
   11e8c:	beq	11f88 <load_file@@Base+0x1bc>
   11e90:	ldr	r3, [r4, #48]	; 0x30
   11e94:	add	r0, r0, #1
   11e98:	ldr	r2, [r4, #52]	; 0x34
   11e9c:	adds	r3, r3, #1
   11ea0:	adc	r2, r2, #0
   11ea4:	str	r3, [r4, #48]	; 0x30
   11ea8:	str	r2, [r4, #52]	; 0x34
   11eac:	bl	1194c <malloc@plt>
   11eb0:	mov	r8, r0
   11eb4:	mov	r2, r9
   11eb8:	mov	r1, r9
   11ebc:	mov	r0, r7
   11ec0:	bl	11a3c <fseek@plt>
   11ec4:	subs	r9, r0, #0
   11ec8:	bne	11fe0 <load_file@@Base+0x214>
   11ecc:	ldr	ip, [r4, #72]	; 0x48
   11ed0:	mov	r1, #1
   11ed4:	mov	r2, sl
   11ed8:	mov	r3, r7
   11edc:	mov	r0, r8
   11ee0:	ldr	lr, [r4, #76]	; 0x4c
   11ee4:	adds	ip, ip, r1
   11ee8:	adc	lr, lr, #0
   11eec:	str	ip, [r4, #72]	; 0x48
   11ef0:	str	lr, [r4, #76]	; 0x4c
   11ef4:	bl	11928 <fread@plt>
   11ef8:	cmp	r0, #0
   11efc:	beq	12038 <load_file@@Base+0x26c>
   11f00:	ldr	r3, [r4, #104]	; 0x68
   11f04:	strb	r9, [r8, r0]
   11f08:	ldr	r2, [r4, #108]	; 0x6c
   11f0c:	adds	r3, r3, #1
   11f10:	adc	r2, r2, #0
   11f14:	str	r3, [r4, #104]	; 0x68
   11f18:	str	r2, [r4, #108]	; 0x6c
   11f1c:	b	11f24 <load_file@@Base+0x158>
   11f20:	mov	r8, #0
   11f24:	mov	r0, r7
   11f28:	bl	119e8 <fclose@plt>
   11f2c:	ldr	r2, [pc, #356]	; 12098 <load_file@@Base+0x2cc>
   11f30:	add	r2, pc, r2
   11f34:	ldr	r3, [r2, #112]	; 0x70
   11f38:	ldr	r1, [r2, #116]	; 0x74
   11f3c:	adds	r3, r3, #1
   11f40:	adc	r1, r1, #0
   11f44:	str	r3, [r2, #112]	; 0x70
   11f48:	str	r1, [r2, #116]	; 0x74
   11f4c:	mov	r0, r8
   11f50:	ldrd	r4, [sp]
   11f54:	ldrd	r6, [sp, #8]
   11f58:	ldrd	r8, [sp, #16]
   11f5c:	ldr	sl, [sp, #24]
   11f60:	add	sp, sp, #28
   11f64:	pop	{pc}		; (ldr pc, [sp], #4)
   11f68:	ldr	r3, [r4, #16]
   11f6c:	mov	r8, r7
   11f70:	ldr	r2, [r4, #20]
   11f74:	adds	r3, r3, #1
   11f78:	adc	r2, r2, #0
   11f7c:	str	r3, [r4, #16]
   11f80:	str	r2, [r4, #20]
   11f84:	b	11f4c <load_file@@Base+0x180>
   11f88:	ldr	r3, [r4, #40]	; 0x28
   11f8c:	mov	r1, #1
   11f90:	mov	r2, #51	; 0x33
   11f94:	ldr	ip, [r4, #44]	; 0x2c
   11f98:	ldr	r0, [pc, #252]	; 1209c <load_file@@Base+0x2d0>
   11f9c:	adds	r3, r3, r1
   11fa0:	adc	ip, ip, #0
   11fa4:	str	r3, [r4, #40]	; 0x28
   11fa8:	str	ip, [r4, #44]	; 0x2c
   11fac:	ldr	r3, [r5, r0]
   11fb0:	ldr	r0, [pc, #232]	; 120a0 <load_file@@Base+0x2d4>
   11fb4:	ldr	r3, [r3]
   11fb8:	add	r0, pc, r0
   11fbc:	bl	11910 <fwrite@plt>
   11fc0:	ldr	r3, [r4, #56]	; 0x38
   11fc4:	mov	r0, #1
   11fc8:	ldr	r2, [r4, #60]	; 0x3c
   11fcc:	adds	r3, r3, r0
   11fd0:	adc	r2, r2, #0
   11fd4:	str	r3, [r4, #56]	; 0x38
   11fd8:	str	r2, [r4, #60]	; 0x3c
   11fdc:	bl	1197c <exit@plt>
   11fe0:	ldr	r3, [r4, #64]	; 0x40
   11fe4:	mov	r1, #1
   11fe8:	mov	r2, #49	; 0x31
   11fec:	ldr	ip, [r4, #68]	; 0x44
   11ff0:	ldr	r0, [pc, #164]	; 1209c <load_file@@Base+0x2d0>
   11ff4:	adds	r3, r3, r1
   11ff8:	adc	ip, ip, #0
   11ffc:	str	r3, [r4, #64]	; 0x40
   12000:	str	ip, [r4, #68]	; 0x44
   12004:	ldr	r3, [r5, r0]
   12008:	ldr	r0, [pc, #148]	; 120a4 <load_file@@Base+0x2d8>
   1200c:	ldr	r3, [r3]
   12010:	add	r0, pc, r0
   12014:	bl	11910 <fwrite@plt>
   12018:	ldr	r3, [r4, #80]	; 0x50
   1201c:	mov	r0, #1
   12020:	ldr	r2, [r4, #84]	; 0x54
   12024:	adds	r3, r3, r0
   12028:	adc	r2, r2, #0
   1202c:	str	r3, [r4, #80]	; 0x50
   12030:	str	r2, [r4, #84]	; 0x54
   12034:	bl	1197c <exit@plt>
   12038:	ldr	r3, [r4, #88]	; 0x58
   1203c:	mov	r2, r6
   12040:	ldr	ip, [r4, #92]	; 0x5c
   12044:	ldr	r0, [pc, #80]	; 1209c <load_file@@Base+0x2d0>
   12048:	adds	r3, r3, #1
   1204c:	ldr	r1, [pc, #84]	; 120a8 <load_file@@Base+0x2dc>
   12050:	adc	ip, ip, #0
   12054:	str	r3, [r4, #88]	; 0x58
   12058:	str	ip, [r4, #92]	; 0x5c
   1205c:	ldr	r3, [r5, r0]
   12060:	add	r1, pc, r1
   12064:	ldr	r0, [r3]
   12068:	bl	119a0 <fprintf@plt>
   1206c:	ldr	r3, [r4, #96]	; 0x60
   12070:	mov	r0, #1
   12074:	ldr	r2, [r4, #100]	; 0x64
   12078:	adds	r3, r3, r0
   1207c:	adc	r2, r2, #0
   12080:	str	r3, [r4, #96]	; 0x60
   12084:	str	r2, [r4, #100]	; 0x64
   12088:	bl	1197c <exit@plt>
   1208c:	andeq	r8, r1, r4, asr #25
   12090:	andeq	r7, r0, r4, ror #10
   12094:	andeq	r8, r1, r4, lsl #4
   12098:	andeq	r8, r1, r0, ror fp
   1209c:	andeq	r0, r0, r4, lsr #1
   120a0:	andeq	r6, r0, r4, lsl ip
   120a4:	strdeq	r6, [r0], -r0
   120a8:	ldrdeq	r6, [r0], -r4

000120ac <my_main@@Base>:
   120ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   120b0:	ldr	r4, [pc, #364]	; 12224 <my_main@@Base+0x178>
   120b4:	add	r4, pc, r4
   120b8:	ldr	r3, [r4, #120]	; 0x78
   120bc:	ldr	r2, [r4, #124]	; 0x7c
   120c0:	strd	r6, [sp, #8]
   120c4:	str	r8, [sp, #16]
   120c8:	mov	r8, r1
   120cc:	adds	r3, r3, #1
   120d0:	str	lr, [sp, #20]
   120d4:	sub	sp, sp, #32
   120d8:	add	r5, sp, #4
   120dc:	mov	r6, sp
   120e0:	adc	r2, r2, #0
   120e4:	str	r3, [r4, #120]	; 0x78
   120e8:	str	r2, [r4, #124]	; 0x7c
   120ec:	bl	11dcc <load_file@@Base>
   120f0:	ldr	r3, [r4, #128]	; 0x80
   120f4:	mov	r7, r0
   120f8:	mov	r0, r5
   120fc:	mov	r1, r7
   12100:	ldr	r2, [r4, #132]	; 0x84
   12104:	adds	r3, r3, #1
   12108:	adc	r2, r2, #0
   1210c:	str	r3, [r4, #128]	; 0x80
   12110:	str	r2, [r4, #132]	; 0x84
   12114:	bl	12700 <init_lexer@@Base>
   12118:	ldr	r3, [r4, #136]	; 0x88
   1211c:	mov	r1, r5
   12120:	mov	r0, r6
   12124:	ldr	r2, [r4, #140]	; 0x8c
   12128:	adds	r3, r3, #1
   1212c:	adc	r2, r2, #0
   12130:	str	r3, [r4, #136]	; 0x88
   12134:	str	r2, [r4, #140]	; 0x8c
   12138:	bl	1472c <init_grammar@@Base>
   1213c:	ldr	r3, [r4, #144]	; 0x90
   12140:	mov	r2, r8
   12144:	add	r8, sp, #16
   12148:	mov	r1, r6
   1214c:	mov	r0, r8
   12150:	ldr	ip, [r4, #148]	; 0x94
   12154:	adds	r3, r3, #1
   12158:	adc	ip, ip, #0
   1215c:	str	r3, [r4, #144]	; 0x90
   12160:	str	ip, [r4, #148]	; 0x94
   12164:	bl	15958 <init_generator@@Base>
   12168:	ldr	r3, [r4, #152]	; 0x98
   1216c:	mov	r0, r8
   12170:	ldr	r2, [r4, #156]	; 0x9c
   12174:	adds	r3, r3, #1
   12178:	adc	r2, r2, #0
   1217c:	str	r3, [r4, #152]	; 0x98
   12180:	str	r2, [r4, #156]	; 0x9c
   12184:	bl	16780 <generate_code@@Base>
   12188:	ldr	r3, [r4, #160]	; 0xa0
   1218c:	mov	r0, r8
   12190:	ldr	r2, [r4, #164]	; 0xa4
   12194:	adds	r3, r3, #1
   12198:	adc	r2, r2, #0
   1219c:	str	r3, [r4, #160]	; 0xa0
   121a0:	str	r2, [r4, #164]	; 0xa4
   121a4:	bl	159e4 <destroy_generator@@Base>
   121a8:	ldr	r3, [r4, #168]	; 0xa8
   121ac:	mov	r0, r6
   121b0:	ldr	r2, [r4, #172]	; 0xac
   121b4:	adds	r3, r3, #1
   121b8:	adc	r2, r2, #0
   121bc:	str	r3, [r4, #168]	; 0xa8
   121c0:	str	r2, [r4, #172]	; 0xac
   121c4:	bl	14758 <destroy_grammar@@Base>
   121c8:	ldr	r3, [r4, #176]	; 0xb0
   121cc:	mov	r0, r5
   121d0:	ldr	r2, [r4, #180]	; 0xb4
   121d4:	adds	r3, r3, #1
   121d8:	adc	r2, r2, #0
   121dc:	str	r3, [r4, #176]	; 0xb0
   121e0:	str	r2, [r4, #180]	; 0xb4
   121e4:	bl	1275c <destroy_lexer@@Base>
   121e8:	ldr	r3, [r4, #184]	; 0xb8
   121ec:	mov	r0, r7
   121f0:	ldr	r2, [r4, #188]	; 0xbc
   121f4:	adds	r3, r3, #1
   121f8:	adc	r2, r2, #0
   121fc:	str	r3, [r4, #184]	; 0xb8
   12200:	str	r2, [r4, #188]	; 0xbc
   12204:	bl	118ec <free@plt>
   12208:	mov	r0, #0
   1220c:	add	sp, sp, #32
   12210:	ldrd	r4, [sp]
   12214:	ldrd	r6, [sp, #8]
   12218:	ldr	r8, [sp, #16]
   1221c:	add	sp, sp, #20
   12220:	pop	{pc}		; (ldr pc, [sp], #4)
   12224:	andeq	r8, r1, ip, ror #19

00012228 <init_token_int_type@@Base>:
   12228:	ldr	r2, [pc, #36]	; 12254 <init_token_int_type@@Base+0x2c>
   1222c:	mov	r3, #0
   12230:	str	r3, [r0]
   12234:	add	r2, pc, r2
   12238:	ldr	r3, [r2]
   1223c:	ldr	r1, [r2, #4]
   12240:	adds	r3, r3, #1
   12244:	adc	r1, r1, #0
   12248:	str	r3, [r2]
   1224c:	str	r1, [r2, #4]
   12250:	bx	lr
   12254:	andeq	r8, r1, ip, ror #18

00012258 <init_token_int_value@@Base>:
   12258:	ldr	r2, [pc, #40]	; 12288 <init_token_int_value@@Base+0x30>
   1225c:	mov	r3, #1
   12260:	str	r3, [r0]
   12264:	str	r1, [r0, #4]
   12268:	add	r2, pc, r2
   1226c:	ldr	r3, [r2, #8]
   12270:	ldr	r1, [r2, #12]
   12274:	adds	r3, r3, #1
   12278:	adc	r1, r1, #0
   1227c:	str	r3, [r2, #8]
   12280:	str	r1, [r2, #12]
   12284:	bx	lr
   12288:	andeq	r8, r1, r8, lsr r9

0001228c <init_token_function@@Base>:
   1228c:	ldr	r2, [pc, #40]	; 122bc <init_token_function@@Base+0x30>
   12290:	mov	r3, #2
   12294:	str	r3, [r0]
   12298:	str	r1, [r0, #4]
   1229c:	add	r2, pc, r2
   122a0:	ldr	r3, [r2, #16]
   122a4:	ldr	r1, [r2, #20]
   122a8:	adds	r3, r3, #1
   122ac:	adc	r1, r1, #0
   122b0:	str	r3, [r2, #16]
   122b4:	str	r1, [r2, #20]
   122b8:	bx	lr
   122bc:	andeq	r8, r1, r4, lsl #18

000122c0 <init_token_opar@@Base>:
   122c0:	ldr	r2, [pc, #36]	; 122ec <init_token_opar@@Base+0x2c>
   122c4:	mov	r3, #3
   122c8:	str	r3, [r0]
   122cc:	add	r2, pc, r2
   122d0:	ldr	r3, [r2, #24]
   122d4:	ldr	r1, [r2, #28]
   122d8:	adds	r3, r3, #1
   122dc:	adc	r1, r1, #0
   122e0:	str	r3, [r2, #24]
   122e4:	str	r1, [r2, #28]
   122e8:	bx	lr
   122ec:	ldrdeq	r8, [r1], -r4

000122f0 <init_token_cpar@@Base>:
   122f0:	ldr	r2, [pc, #36]	; 1231c <init_token_cpar@@Base+0x2c>
   122f4:	mov	r3, #4
   122f8:	str	r3, [r0]
   122fc:	add	r2, pc, r2
   12300:	ldr	r3, [r2, #32]
   12304:	ldr	r1, [r2, #36]	; 0x24
   12308:	adds	r3, r3, #1
   1230c:	adc	r1, r1, #0
   12310:	str	r3, [r2, #32]
   12314:	str	r1, [r2, #36]	; 0x24
   12318:	bx	lr
   1231c:	andeq	r8, r1, r4, lsr #17

00012320 <init_token_obra@@Base>:
   12320:	ldr	r2, [pc, #36]	; 1234c <init_token_obra@@Base+0x2c>
   12324:	mov	r3, #5
   12328:	str	r3, [r0]
   1232c:	add	r2, pc, r2
   12330:	ldr	r3, [r2, #40]	; 0x28
   12334:	ldr	r1, [r2, #44]	; 0x2c
   12338:	adds	r3, r3, #1
   1233c:	adc	r1, r1, #0
   12340:	str	r3, [r2, #40]	; 0x28
   12344:	str	r1, [r2, #44]	; 0x2c
   12348:	bx	lr
   1234c:	andeq	r8, r1, r4, ror r8

00012350 <init_token_cbra@@Base>:
   12350:	ldr	r2, [pc, #36]	; 1237c <init_token_cbra@@Base+0x2c>
   12354:	mov	r3, #6
   12358:	str	r3, [r0]
   1235c:	add	r2, pc, r2
   12360:	ldr	r3, [r2, #48]	; 0x30
   12364:	ldr	r1, [r2, #52]	; 0x34
   12368:	adds	r3, r3, #1
   1236c:	adc	r1, r1, #0
   12370:	str	r3, [r2, #48]	; 0x30
   12374:	str	r1, [r2, #52]	; 0x34
   12378:	bx	lr
   1237c:	andeq	r8, r1, r4, asr #16

00012380 <init_token_return@@Base>:
   12380:	ldr	r2, [pc, #36]	; 123ac <init_token_return@@Base+0x2c>
   12384:	mov	r3, #7
   12388:	str	r3, [r0]
   1238c:	add	r2, pc, r2
   12390:	ldr	r3, [r2, #56]	; 0x38
   12394:	ldr	r1, [r2, #60]	; 0x3c
   12398:	adds	r3, r3, #1
   1239c:	adc	r1, r1, #0
   123a0:	str	r3, [r2, #56]	; 0x38
   123a4:	str	r1, [r2, #60]	; 0x3c
   123a8:	bx	lr
   123ac:	andeq	r8, r1, r4, lsl r8

000123b0 <init_token_semicolon@@Base>:
   123b0:	ldr	r2, [pc, #36]	; 123dc <init_token_semicolon@@Base+0x2c>
   123b4:	mov	r3, #8
   123b8:	str	r3, [r0]
   123bc:	add	r2, pc, r2
   123c0:	ldr	r3, [r2, #64]	; 0x40
   123c4:	ldr	r1, [r2, #68]	; 0x44
   123c8:	adds	r3, r3, #1
   123cc:	adc	r1, r1, #0
   123d0:	str	r3, [r2, #64]	; 0x40
   123d4:	str	r1, [r2, #68]	; 0x44
   123d8:	bx	lr
   123dc:	andeq	r8, r1, r4, ror #15

000123e0 <init_token_eof@@Base>:
   123e0:	ldr	r2, [pc, #36]	; 1240c <init_token_eof@@Base+0x2c>
   123e4:	mov	r3, #9
   123e8:	str	r3, [r0]
   123ec:	add	r2, pc, r2
   123f0:	ldr	r3, [r2, #72]	; 0x48
   123f4:	ldr	r1, [r2, #76]	; 0x4c
   123f8:	adds	r3, r3, #1
   123fc:	adc	r1, r1, #0
   12400:	str	r3, [r2, #72]	; 0x48
   12404:	str	r1, [r2, #76]	; 0x4c
   12408:	bx	lr
   1240c:			; <UNDEFINED> instruction: 0x000187b4

00012410 <init_token_if@@Base>:
   12410:	ldr	r2, [pc, #36]	; 1243c <init_token_if@@Base+0x2c>
   12414:	mov	r3, #10
   12418:	str	r3, [r0]
   1241c:	add	r2, pc, r2
   12420:	ldr	r3, [r2, #80]	; 0x50
   12424:	ldr	r1, [r2, #84]	; 0x54
   12428:	adds	r3, r3, #1
   1242c:	adc	r1, r1, #0
   12430:	str	r3, [r2, #80]	; 0x50
   12434:	str	r1, [r2, #84]	; 0x54
   12438:	bx	lr
   1243c:	andeq	r8, r1, r4, lsl #15

00012440 <init_token_else@@Base>:
   12440:	ldr	r2, [pc, #36]	; 1246c <init_token_else@@Base+0x2c>
   12444:	mov	r3, #11
   12448:	str	r3, [r0]
   1244c:	add	r2, pc, r2
   12450:	ldr	r3, [r2, #88]	; 0x58
   12454:	ldr	r1, [r2, #92]	; 0x5c
   12458:	adds	r3, r3, #1
   1245c:	adc	r1, r1, #0
   12460:	str	r3, [r2, #88]	; 0x58
   12464:	str	r1, [r2, #92]	; 0x5c
   12468:	bx	lr
   1246c:	andeq	r8, r1, r4, asr r7

00012470 <init_token_boolean_op@@Base>:
   12470:	ldr	r2, [pc, #40]	; 124a0 <init_token_boolean_op@@Base+0x30>
   12474:	mov	r3, #12
   12478:	str	r3, [r0]
   1247c:	str	r1, [r0, #4]
   12480:	add	r2, pc, r2
   12484:	ldr	r3, [r2, #96]	; 0x60
   12488:	ldr	r1, [r2, #100]	; 0x64
   1248c:	adds	r3, r3, #1
   12490:	adc	r1, r1, #0
   12494:	str	r3, [r2, #96]	; 0x60
   12498:	str	r1, [r2, #100]	; 0x64
   1249c:	bx	lr
   124a0:	andeq	r8, r1, r0, lsr #14

000124a4 <free_token_int_type@@Base>:
   124a4:	ldr	r2, [pc, #28]	; 124c8 <free_token_int_type@@Base+0x24>
   124a8:	add	r2, pc, r2
   124ac:	ldr	r3, [r2, #104]	; 0x68
   124b0:	ldr	r1, [r2, #108]	; 0x6c
   124b4:	adds	r3, r3, #1
   124b8:	adc	r1, r1, #0
   124bc:	str	r3, [r2, #104]	; 0x68
   124c0:	str	r1, [r2, #108]	; 0x6c
   124c4:	b	118ec <free@plt>
   124c8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>

000124cc <free_token_int_value@@Base>:
   124cc:	ldr	r2, [pc, #28]	; 124f0 <free_token_int_value@@Base+0x24>
   124d0:	add	r2, pc, r2
   124d4:	ldr	r3, [r2, #112]	; 0x70
   124d8:	ldr	r1, [r2, #116]	; 0x74
   124dc:	adds	r3, r3, #1
   124e0:	adc	r1, r1, #0
   124e4:	str	r3, [r2, #112]	; 0x70
   124e8:	str	r1, [r2, #116]	; 0x74
   124ec:	b	118ec <free@plt>
   124f0:	ldrdeq	r8, [r1], -r0

000124f4 <free_token_function@@Base>:
   124f4:	ldr	r2, [pc, #28]	; 12518 <free_token_function@@Base+0x24>
   124f8:	add	r2, pc, r2
   124fc:	ldr	r3, [r2, #120]	; 0x78
   12500:	ldr	r1, [r2, #124]	; 0x7c
   12504:	adds	r3, r3, #1
   12508:	adc	r1, r1, #0
   1250c:	str	r3, [r2, #120]	; 0x78
   12510:	str	r1, [r2, #124]	; 0x7c
   12514:	b	118ec <free@plt>
   12518:	andeq	r8, r1, r8, lsr #13

0001251c <free_token_opar@@Base>:
   1251c:	ldr	r2, [pc, #28]	; 12540 <free_token_opar@@Base+0x24>
   12520:	add	r2, pc, r2
   12524:	ldr	r3, [r2, #128]	; 0x80
   12528:	ldr	r1, [r2, #132]	; 0x84
   1252c:	adds	r3, r3, #1
   12530:	adc	r1, r1, #0
   12534:	str	r3, [r2, #128]	; 0x80
   12538:	str	r1, [r2, #132]	; 0x84
   1253c:	b	118ec <free@plt>
   12540:	andeq	r8, r1, r0, lsl #13

00012544 <free_token_cpar@@Base>:
   12544:	ldr	r2, [pc, #28]	; 12568 <free_token_cpar@@Base+0x24>
   12548:	add	r2, pc, r2
   1254c:	ldr	r3, [r2, #136]	; 0x88
   12550:	ldr	r1, [r2, #140]	; 0x8c
   12554:	adds	r3, r3, #1
   12558:	adc	r1, r1, #0
   1255c:	str	r3, [r2, #136]	; 0x88
   12560:	str	r1, [r2, #140]	; 0x8c
   12564:	b	118ec <free@plt>
   12568:	andeq	r8, r1, r8, asr r6

0001256c <free_token_obra@@Base>:
   1256c:	ldr	r2, [pc, #28]	; 12590 <free_token_obra@@Base+0x24>
   12570:	add	r2, pc, r2
   12574:	ldr	r3, [r2, #144]	; 0x90
   12578:	ldr	r1, [r2, #148]	; 0x94
   1257c:	adds	r3, r3, #1
   12580:	adc	r1, r1, #0
   12584:	str	r3, [r2, #144]	; 0x90
   12588:	str	r1, [r2, #148]	; 0x94
   1258c:	b	118ec <free@plt>
   12590:	andeq	r8, r1, r0, lsr r6

00012594 <free_token_cbra@@Base>:
   12594:	ldr	r2, [pc, #28]	; 125b8 <free_token_cbra@@Base+0x24>
   12598:	add	r2, pc, r2
   1259c:	ldr	r3, [r2, #152]	; 0x98
   125a0:	ldr	r1, [r2, #156]	; 0x9c
   125a4:	adds	r3, r3, #1
   125a8:	adc	r1, r1, #0
   125ac:	str	r3, [r2, #152]	; 0x98
   125b0:	str	r1, [r2, #156]	; 0x9c
   125b4:	b	118ec <free@plt>
   125b8:	andeq	r8, r1, r8, lsl #12

000125bc <free_token_return@@Base>:
   125bc:	ldr	r2, [pc, #28]	; 125e0 <free_token_return@@Base+0x24>
   125c0:	add	r2, pc, r2
   125c4:	ldr	r3, [r2, #160]	; 0xa0
   125c8:	ldr	r1, [r2, #164]	; 0xa4
   125cc:	adds	r3, r3, #1
   125d0:	adc	r1, r1, #0
   125d4:	str	r3, [r2, #160]	; 0xa0
   125d8:	str	r1, [r2, #164]	; 0xa4
   125dc:	b	118ec <free@plt>
   125e0:	andeq	r8, r1, r0, ror #11

000125e4 <free_token_semicolon@@Base>:
   125e4:	ldr	r2, [pc, #28]	; 12608 <free_token_semicolon@@Base+0x24>
   125e8:	add	r2, pc, r2
   125ec:	ldr	r3, [r2, #168]	; 0xa8
   125f0:	ldr	r1, [r2, #172]	; 0xac
   125f4:	adds	r3, r3, #1
   125f8:	adc	r1, r1, #0
   125fc:	str	r3, [r2, #168]	; 0xa8
   12600:	str	r1, [r2, #172]	; 0xac
   12604:	b	118ec <free@plt>
   12608:			; <UNDEFINED> instruction: 0x000185b8

0001260c <free_token_eof@@Base>:
   1260c:	ldr	r2, [pc, #28]	; 12630 <free_token_eof@@Base+0x24>
   12610:	add	r2, pc, r2
   12614:	ldr	r3, [r2, #176]	; 0xb0
   12618:	ldr	r1, [r2, #180]	; 0xb4
   1261c:	adds	r3, r3, #1
   12620:	adc	r1, r1, #0
   12624:	str	r3, [r2, #176]	; 0xb0
   12628:	str	r1, [r2, #180]	; 0xb4
   1262c:	b	118ec <free@plt>
   12630:	muleq	r1, r0, r5

00012634 <free_token_if@@Base>:
   12634:	ldr	r2, [pc, #28]	; 12658 <free_token_if@@Base+0x24>
   12638:	add	r2, pc, r2
   1263c:	ldr	r3, [r2, #184]	; 0xb8
   12640:	ldr	r1, [r2, #188]	; 0xbc
   12644:	adds	r3, r3, #1
   12648:	adc	r1, r1, #0
   1264c:	str	r3, [r2, #184]	; 0xb8
   12650:	str	r1, [r2, #188]	; 0xbc
   12654:	b	118ec <free@plt>
   12658:	andeq	r8, r1, r8, ror #10

0001265c <free_token_else@@Base>:
   1265c:	ldr	r2, [pc, #28]	; 12680 <free_token_else@@Base+0x24>
   12660:	add	r2, pc, r2
   12664:	ldr	r3, [r2, #192]	; 0xc0
   12668:	ldr	r1, [r2, #196]	; 0xc4
   1266c:	adds	r3, r3, #1
   12670:	adc	r1, r1, #0
   12674:	str	r3, [r2, #192]	; 0xc0
   12678:	str	r1, [r2, #196]	; 0xc4
   1267c:	b	118ec <free@plt>
   12680:	andeq	r8, r1, r0, asr #10

00012684 <free_token_boolean_op@@Base>:
   12684:	str	r4, [sp, #-8]!
   12688:	mov	r4, r0
   1268c:	ldr	r0, [r0, #4]
   12690:	str	lr, [sp, #4]
   12694:	cmp	r0, #0
   12698:	beq	126d4 <free_token_boolean_op@@Base+0x50>
   1269c:	ldr	r2, [pc, #84]	; 126f8 <free_token_boolean_op@@Base+0x74>
   126a0:	add	r2, pc, r2
   126a4:	ldr	r3, [r2, #200]	; 0xc8
   126a8:	ldr	r1, [r2, #204]	; 0xcc
   126ac:	adds	r3, r3, #1
   126b0:	adc	r1, r1, #0
   126b4:	str	r3, [r2, #200]	; 0xc8
   126b8:	str	r1, [r2, #204]	; 0xcc
   126bc:	bl	118ec <free@plt>
   126c0:	mov	r0, r4
   126c4:	ldr	r4, [sp]
   126c8:	ldr	lr, [sp, #4]
   126cc:	add	sp, sp, #8
   126d0:	b	118ec <free@plt>
   126d4:	ldr	r2, [pc, #32]	; 126fc <free_token_boolean_op@@Base+0x78>
   126d8:	add	r2, pc, r2
   126dc:	ldr	r3, [r2, #208]	; 0xd0
   126e0:	ldr	r1, [r2, #212]	; 0xd4
   126e4:	adds	r3, r3, #1
   126e8:	adc	r1, r1, #0
   126ec:	str	r3, [r2, #208]	; 0xd0
   126f0:	str	r1, [r2, #212]	; 0xd4
   126f4:	b	126c0 <free_token_boolean_op@@Base+0x3c>
   126f8:	andeq	r8, r1, r0, lsl #10
   126fc:	andeq	r8, r1, r8, asr #9

00012700 <init_lexer@@Base>:
   12700:	ldr	r2, [pc, #40]	; 12730 <init_lexer@@Base+0x30>
   12704:	mov	r3, #0
   12708:	stm	r0, {r1, r3}
   1270c:	str	r3, [r0, #8]
   12710:	add	r2, pc, r2
   12714:	ldr	r3, [r2]
   12718:	ldr	r1, [r2, #4]
   1271c:	adds	r3, r3, #1
   12720:	adc	r1, r1, #0
   12724:	str	r3, [r2]
   12728:	str	r1, [r2, #4]
   1272c:	bx	lr
   12730:	andeq	r8, r1, r8, ror #10

00012734 <free_stack_base@@Base>:
   12734:	ldr	r2, [pc, #28]	; 12758 <free_stack_base@@Base+0x24>
   12738:	add	r2, pc, r2
   1273c:	ldr	r3, [r2, #8]
   12740:	ldr	r1, [r2, #12]
   12744:	adds	r3, r3, #1
   12748:	adc	r1, r1, #0
   1274c:	str	r3, [r2, #8]
   12750:	str	r1, [r2, #12]
   12754:	b	118ec <free@plt>
   12758:	andeq	r8, r1, r0, asr #10

0001275c <destroy_lexer@@Base>:
   1275c:	ldr	r0, [r0, #4]
   12760:	cmp	r0, #0
   12764:	beq	127b8 <destroy_lexer@@Base+0x5c>
   12768:	str	r4, [sp, #-8]!
   1276c:	ldr	r4, [pc, #104]	; 127dc <destroy_lexer@@Base+0x80>
   12770:	add	r4, pc, r4
   12774:	ldr	r3, [r4, #16]
   12778:	ldr	r2, [r4, #20]
   1277c:	str	lr, [sp, #4]
   12780:	adds	r3, r3, #1
   12784:	adc	r2, r2, #0
   12788:	str	r3, [r4, #16]
   1278c:	str	r2, [r4, #20]
   12790:	bl	12734 <free_stack_base@@Base>
   12794:	ldr	r3, [r4, #32]
   12798:	ldr	r2, [r4, #36]	; 0x24
   1279c:	adds	r3, r3, #1
   127a0:	adc	r2, r2, #0
   127a4:	str	r3, [r4, #32]
   127a8:	str	r2, [r4, #36]	; 0x24
   127ac:	ldr	r4, [sp]
   127b0:	add	sp, sp, #4
   127b4:	pop	{pc}		; (ldr pc, [sp], #4)
   127b8:	ldr	r2, [pc, #32]	; 127e0 <destroy_lexer@@Base+0x84>
   127bc:	add	r2, pc, r2
   127c0:	ldr	r3, [r2, #24]
   127c4:	ldr	r1, [r2, #28]
   127c8:	adds	r3, r3, #1
   127cc:	adc	r1, r1, #0
   127d0:	str	r3, [r2, #24]
   127d4:	str	r1, [r2, #28]
   127d8:	bx	lr
   127dc:	andeq	r8, r1, r8, lsl #10
   127e0:			; <UNDEFINED> instruction: 0x000184bc

000127e4 <push_back@@Base>:
   127e4:	ldr	r2, [pc, #80]	; 1283c <push_back@@Base+0x58>
   127e8:	strd	r4, [sp, #-16]!
   127ec:	mov	r4, r0
   127f0:	mov	r0, #8
   127f4:	mov	r5, r1
   127f8:	add	r2, pc, r2
   127fc:	ldr	r3, [r2, #40]	; 0x28
   12800:	ldr	ip, [r2, #44]	; 0x2c
   12804:	str	r6, [sp, #8]
   12808:	str	lr, [sp, #12]
   1280c:	adds	r3, r3, #1
   12810:	adc	ip, ip, #0
   12814:	str	r3, [r2, #40]	; 0x28
   12818:	str	ip, [r2, #44]	; 0x2c
   1281c:	bl	1194c <malloc@plt>
   12820:	ldr	r3, [r4, #4]
   12824:	ldr	r6, [sp, #8]
   12828:	str	r0, [r4, #4]
   1282c:	stm	r0, {r3, r5}
   12830:	ldrd	r4, [sp]
   12834:	add	sp, sp, #12
   12838:	pop	{pc}		; (ldr pc, [sp], #4)
   1283c:	andeq	r8, r1, r0, lsl #9

00012840 <get_char@@Base>:
   12840:	ldr	r2, [pc, #64]	; 12888 <get_char@@Base+0x48>
   12844:	str	r4, [sp, #-8]!
   12848:	ldr	ip, [r0, #8]
   1284c:	add	r2, pc, r2
   12850:	ldr	r3, [r2, #48]	; 0x30
   12854:	add	r4, ip, #1
   12858:	ldr	r1, [r2, #52]	; 0x34
   1285c:	str	lr, [sp, #4]
   12860:	ldr	lr, [r0]
   12864:	adds	r3, r3, #1
   12868:	str	r4, [r0, #8]
   1286c:	ldr	r4, [sp]
   12870:	add	sp, sp, #4
   12874:	adc	r1, r1, #0
   12878:	str	r3, [r2, #48]	; 0x30
   1287c:	ldrb	r0, [lr, ip]
   12880:	str	r1, [r2, #52]	; 0x34
   12884:	pop	{pc}		; (ldr pc, [sp], #4)
   12888:	andeq	r8, r1, ip, lsr #8

0001288c <push_back_chars@@Base>:
   1288c:	ldr	r3, [r0, #8]
   12890:	ldr	ip, [pc, #160]	; 12938 <push_back_chars@@Base+0xac>
   12894:	cmp	r3, r1
   12898:	add	ip, pc, ip
   1289c:	bcc	128cc <push_back_chars@@Base+0x40>
   128a0:	ldr	r2, [pc, #148]	; 1293c <push_back_chars@@Base+0xb0>
   128a4:	sub	r3, r3, r1
   128a8:	str	r3, [r0, #8]
   128ac:	add	r2, pc, r2
   128b0:	ldr	r3, [r2, #56]	; 0x38
   128b4:	ldr	r1, [r2, #60]	; 0x3c
   128b8:	adds	r3, r3, #1
   128bc:	adc	r1, r1, #0
   128c0:	str	r3, [r2, #56]	; 0x38
   128c4:	str	r1, [r2, #60]	; 0x3c
   128c8:	bx	lr
   128cc:	str	r4, [sp, #-8]!
   128d0:	mov	r1, #1
   128d4:	mov	r2, #32
   128d8:	ldr	r4, [pc, #96]	; 12940 <push_back_chars@@Base+0xb4>
   128dc:	ldr	r0, [pc, #96]	; 12944 <push_back_chars@@Base+0xb8>
   128e0:	add	r4, pc, r4
   128e4:	ldr	r3, [r4, #64]	; 0x40
   128e8:	str	lr, [sp, #4]
   128ec:	ldr	lr, [r4, #68]	; 0x44
   128f0:	adds	r3, r3, r1
   128f4:	adc	lr, lr, #0
   128f8:	str	r3, [r4, #64]	; 0x40
   128fc:	mov	r3, r0
   12900:	ldr	r0, [pc, #64]	; 12948 <push_back_chars@@Base+0xbc>
   12904:	str	lr, [r4, #68]	; 0x44
   12908:	ldr	r3, [ip, r3]
   1290c:	add	r0, pc, r0
   12910:	ldr	r3, [r3]
   12914:	bl	11910 <fwrite@plt>
   12918:	ldr	r3, [r4, #72]	; 0x48
   1291c:	mov	r0, #1
   12920:	ldr	r2, [r4, #76]	; 0x4c
   12924:	adds	r3, r3, r0
   12928:	adc	r2, r2, #0
   1292c:	str	r3, [r4, #72]	; 0x48
   12930:	str	r2, [r4, #76]	; 0x4c
   12934:	bl	1197c <exit@plt>
   12938:	andeq	r7, r1, r0, ror #14
   1293c:	andeq	r8, r1, ip, asr #7
   12940:	muleq	r1, r8, r3
   12944:	andeq	r0, r0, r4, lsr #1
   12948:	andeq	r6, r0, r8, asr #8

0001294c <push_back_one_char@@Base>:
   1294c:	str	r4, [sp, #-8]!
   12950:	mov	r1, #1
   12954:	ldr	r4, [pc, #68]	; 129a0 <push_back_one_char@@Base+0x54>
   12958:	add	r4, pc, r4
   1295c:	ldr	r3, [r4, #80]	; 0x50
   12960:	ldr	r2, [r4, #84]	; 0x54
   12964:	str	lr, [sp, #4]
   12968:	adds	r3, r3, r1
   1296c:	adc	r2, r2, #0
   12970:	str	r3, [r4, #80]	; 0x50
   12974:	str	r2, [r4, #84]	; 0x54
   12978:	bl	1288c <push_back_chars@@Base>
   1297c:	ldr	r3, [r4, #88]	; 0x58
   12980:	ldr	r2, [r4, #92]	; 0x5c
   12984:	adds	r3, r3, #1
   12988:	adc	r2, r2, #0
   1298c:	str	r3, [r4, #88]	; 0x58
   12990:	str	r2, [r4, #92]	; 0x5c
   12994:	ldr	r4, [sp]
   12998:	add	sp, sp, #4
   1299c:	pop	{pc}		; (ldr pc, [sp], #4)
   129a0:	andeq	r8, r1, r0, lsr #6

000129a4 <next@@Base>:
   129a4:	ldr	r3, [r0, #4]
   129a8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   129ac:	mov	r5, r0
   129b0:	ldr	r4, [pc, #3952]	; 13928 <next@@Base+0xf84>
   129b4:	strd	r6, [sp, #8]
   129b8:	strd	r8, [sp, #16]
   129bc:	cmp	r3, #0
   129c0:	str	lr, [sp, #24]
   129c4:	sub	sp, sp, #516	; 0x204
   129c8:	add	r4, pc, r4
   129cc:	beq	12a40 <next@@Base+0x9c>
   129d0:	ldr	r4, [pc, #3924]	; 1392c <next@@Base+0xf88>
   129d4:	mov	ip, #0
   129d8:	mov	r0, r3
   129dc:	ldr	lr, [r3]
   129e0:	ldr	r7, [r3, #4]
   129e4:	add	r4, pc, r4
   129e8:	ldr	r2, [r4, #96]	; 0x60
   129ec:	str	lr, [r5, #4]
   129f0:	ldr	r1, [r4, #100]	; 0x64
   129f4:	str	ip, [r3, #4]
   129f8:	adds	r2, r2, #1
   129fc:	adc	r3, r1, ip
   12a00:	str	r2, [r4, #96]	; 0x60
   12a04:	str	r3, [r4, #100]	; 0x64
   12a08:	bl	12734 <free_stack_base@@Base>
   12a0c:	ldr	r3, [r4, #112]	; 0x70
   12a10:	ldr	r2, [r4, #116]	; 0x74
   12a14:	adds	r3, r3, #1
   12a18:	adc	r2, r2, #0
   12a1c:	str	r3, [r4, #112]	; 0x70
   12a20:	str	r2, [r4, #116]	; 0x74
   12a24:	mov	r0, r7
   12a28:	add	sp, sp, #516	; 0x204
   12a2c:	ldrd	r4, [sp]
   12a30:	ldrd	r6, [sp, #8]
   12a34:	ldrd	r8, [sp, #16]
   12a38:	add	sp, sp, #24
   12a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   12a40:	ldr	r2, [pc, #3816]	; 13930 <next@@Base+0xf8c>
   12a44:	add	r2, pc, r2
   12a48:	ldr	r3, [r2, #104]	; 0x68
   12a4c:	ldr	r1, [r2, #108]	; 0x6c
   12a50:	adds	r3, r3, #1
   12a54:	adc	r1, r1, #0
   12a58:	str	r3, [r2, #104]	; 0x68
   12a5c:	str	r1, [r2, #108]	; 0x6c
   12a60:	bl	12840 <get_char@@Base>
   12a64:	subs	r8, r0, #0
   12a68:	beq	12cbc <next@@Base+0x318>
   12a6c:	ldr	r3, [pc, #3776]	; 13934 <next@@Base+0xf90>
   12a70:	ldr	r7, [pc, #3776]	; 13938 <next@@Base+0xf94>
   12a74:	add	r3, pc, r3
   12a78:	add	r6, r3, #816	; 0x330
   12a7c:	add	r7, pc, r7
   12a80:	cmp	r8, #32
   12a84:	cmpne	r8, #9
   12a88:	moveq	r9, #1
   12a8c:	movne	r9, #0
   12a90:	beq	12c74 <next@@Base+0x2d0>
   12a94:	cmp	r8, #10
   12a98:	beq	12d08 <next@@Base+0x364>
   12a9c:	cmp	r8, #48	; 0x30
   12aa0:	beq	13244 <next@@Base+0x8a0>
   12aa4:	sub	r3, r8, #49	; 0x31
   12aa8:	uxtb	r3, r3
   12aac:	cmp	r3, #8
   12ab0:	bls	12d24 <next@@Base+0x380>
   12ab4:	cmp	r8, #40	; 0x28
   12ab8:	beq	132e0 <next@@Base+0x93c>
   12abc:	cmp	r8, #41	; 0x29
   12ac0:	beq	13294 <next@@Base+0x8f0>
   12ac4:	cmp	r8, #123	; 0x7b
   12ac8:	beq	1337c <next@@Base+0x9d8>
   12acc:	cmp	r8, #125	; 0x7d
   12ad0:	beq	1332c <next@@Base+0x988>
   12ad4:	cmp	r8, #59	; 0x3b
   12ad8:	beq	133c8 <next@@Base+0xa24>
   12adc:	cmp	r8, #101	; 0x65
   12ae0:	beq	12eb0 <next@@Base+0x50c>
   12ae4:	cmp	r8, #105	; 0x69
   12ae8:	beq	12fc8 <next@@Base+0x624>
   12aec:	cmp	r8, #109	; 0x6d
   12af0:	beq	13100 <next@@Base+0x75c>
   12af4:	cmp	r8, #114	; 0x72
   12af8:	bne	13418 <next@@Base+0xa74>
   12afc:	ldr	r4, [pc, #3640]	; 1393c <next@@Base+0xf98>
   12b00:	mov	r0, r5
   12b04:	strb	r8, [sp]
   12b08:	add	r4, pc, r4
   12b0c:	ldr	r3, [r4, #336]	; 0x150
   12b10:	ldr	r1, [r4, #340]	; 0x154
   12b14:	adds	r3, r3, #1
   12b18:	adc	r1, r1, #0
   12b1c:	str	r3, [r4, #336]	; 0x150
   12b20:	str	r1, [r4, #340]	; 0x154
   12b24:	bl	12840 <get_char@@Base>
   12b28:	ldr	r2, [r4, #344]	; 0x158
   12b2c:	ldr	r6, [r4, #348]	; 0x15c
   12b30:	ldr	r3, [r4, #816]	; 0x330
   12b34:	adds	r2, r2, #1
   12b38:	ldr	lr, [r4, #820]	; 0x334
   12b3c:	adc	r6, r6, #0
   12b40:	str	r2, [r4, #344]	; 0x158
   12b44:	adds	r3, r3, #1
   12b48:	str	r6, [r4, #348]	; 0x15c
   12b4c:	adc	r2, lr, #0
   12b50:	subs	r1, r0, #0
   12b54:	str	r3, [r4, #816]	; 0x330
   12b58:	str	r2, [r4, #820]	; 0x334
   12b5c:	beq	12cbc <next@@Base+0x318>
   12b60:	ldr	r3, [r4, #144]	; 0x90
   12b64:	ldr	r2, [r4, #148]	; 0x94
   12b68:	adds	r3, r3, #1
   12b6c:	adc	r2, r2, #0
   12b70:	cmp	r1, #101	; 0x65
   12b74:	str	r3, [r4, #144]	; 0x90
   12b78:	str	r2, [r4, #148]	; 0x94
   12b7c:	bne	13550 <next@@Base+0xbac>
   12b80:	mov	r0, r5
   12b84:	strb	r1, [sp, #1]
   12b88:	bl	12840 <get_char@@Base>
   12b8c:	add	r2, r4, #704	; 0x2c0
   12b90:	ldr	r3, [r2, #-8]
   12b94:	mov	ip, r0
   12b98:	ldr	r1, [r2, #-4]
   12b9c:	adds	r3, r3, #1
   12ba0:	adc	r1, r1, #0
   12ba4:	cmp	r0, #116	; 0x74
   12ba8:	str	r3, [r2, #-8]
   12bac:	str	r1, [r2, #-4]
   12bb0:	bne	134e8 <next@@Base+0xb44>
   12bb4:	mov	r0, r5
   12bb8:	strb	ip, [sp, #2]
   12bbc:	bl	12840 <get_char@@Base>
   12bc0:	add	r2, r4, #720	; 0x2d0
   12bc4:	ldr	r3, [r2, #-8]
   12bc8:	mov	ip, r0
   12bcc:	ldr	r1, [r2, #-4]
   12bd0:	adds	r3, r3, #1
   12bd4:	adc	r1, r1, #0
   12bd8:	cmp	r0, #117	; 0x75
   12bdc:	str	r3, [r2, #-8]
   12be0:	str	r1, [r2, #-4]
   12be4:	bne	134e8 <next@@Base+0xb44>
   12be8:	mov	r0, r5
   12bec:	strb	ip, [sp, #3]
   12bf0:	bl	12840 <get_char@@Base>
   12bf4:	cmp	r0, #114	; 0x72
   12bf8:	addne	r4, r4, #736	; 0x2e0
   12bfc:	bne	1350c <next@@Base+0xb68>
   12c00:	ldr	r3, [r4, #736]	; 0x2e0
   12c04:	mov	r0, r5
   12c08:	strb	r8, [sp, #4]
   12c0c:	ldr	r1, [r4, #740]	; 0x2e4
   12c10:	adds	r3, r3, #1
   12c14:	adc	r1, r1, #0
   12c18:	str	r3, [r4, #736]	; 0x2e0
   12c1c:	str	r1, [r4, #740]	; 0x2e4
   12c20:	bl	12840 <get_char@@Base>
   12c24:	add	r2, r4, #752	; 0x2f0
   12c28:	ldr	r3, [r2, #-8]
   12c2c:	ldr	r1, [r2, #-4]
   12c30:	adds	r3, r3, #1
   12c34:	adc	r1, r1, #0
   12c38:	cmp	r0, #110	; 0x6e
   12c3c:	str	r3, [r2, #-8]
   12c40:	str	r1, [r2, #-4]
   12c44:	bne	134e8 <next@@Base+0xb44>
   12c48:	mov	r0, #4
   12c4c:	bl	1194c <malloc@plt>
   12c50:	mov	r7, r0
   12c54:	bl	12380 <init_token_return@@Base>
   12c58:	ldr	r3, [r4, #760]	; 0x2f8
   12c5c:	ldr	r2, [r4, #764]	; 0x2fc
   12c60:	adds	r3, r3, #1
   12c64:	adc	r2, r2, #0
   12c68:	str	r3, [r4, #760]	; 0x2f8
   12c6c:	str	r2, [r4, #764]	; 0x2fc
   12c70:	b	12a24 <next@@Base+0x80>
   12c74:	ldr	r2, [pc, #3268]	; 13940 <next@@Base+0xf9c>
   12c78:	add	r2, pc, r2
   12c7c:	ldr	r3, [r2, #160]	; 0xa0
   12c80:	ldr	r1, [r2, #164]	; 0xa4
   12c84:	adds	r3, r3, #1
   12c88:	adc	r1, r1, #0
   12c8c:	str	r3, [r2, #160]	; 0xa0
   12c90:	str	r1, [r2, #164]	; 0xa4
   12c94:	mov	r0, r5
   12c98:	bl	12840 <get_char@@Base>
   12c9c:	ldr	r3, [r6]
   12ca0:	ldr	r2, [r6, #4]
   12ca4:	adds	r3, r3, #1
   12ca8:	adc	r2, r2, #0
   12cac:	subs	r8, r0, #0
   12cb0:	str	r3, [r6]
   12cb4:	str	r2, [r6, #4]
   12cb8:	bne	12a80 <next@@Base+0xdc>
   12cbc:	ldr	r4, [pc, #3200]	; 13944 <next@@Base+0xfa0>
   12cc0:	mov	r0, #4
   12cc4:	add	r4, pc, r4
   12cc8:	ldr	r3, [r4, #824]	; 0x338
   12ccc:	ldr	r2, [r4, #828]	; 0x33c
   12cd0:	adds	r3, r3, #1
   12cd4:	adc	r2, r2, #0
   12cd8:	str	r3, [r4, #824]	; 0x338
   12cdc:	str	r2, [r4, #828]	; 0x33c
   12ce0:	bl	1194c <malloc@plt>
   12ce4:	mov	r7, r0
   12ce8:	bl	123e0 <init_token_eof@@Base>
   12cec:	ldr	r3, [r4, #832]	; 0x340
   12cf0:	ldr	r2, [r4, #836]	; 0x344
   12cf4:	adds	r3, r3, #1
   12cf8:	adc	r2, r2, #0
   12cfc:	str	r3, [r4, #832]	; 0x340
   12d00:	str	r2, [r4, #836]	; 0x344
   12d04:	b	12a24 <next@@Base+0x80>
   12d08:	ldr	r3, [r7, #168]	; 0xa8
   12d0c:	ldr	r2, [r7, #172]	; 0xac
   12d10:	adds	r3, r3, #1
   12d14:	adc	r2, r2, #0
   12d18:	str	r3, [r7, #168]	; 0xa8
   12d1c:	str	r2, [r7, #172]	; 0xac
   12d20:	b	12c94 <next@@Base+0x2f0>
   12d24:	ldr	r4, [pc, #3100]	; 13948 <next@@Base+0xfa4>
   12d28:	mov	r0, r5
   12d2c:	strb	r8, [sp]
   12d30:	add	r4, pc, r4
   12d34:	ldr	r3, [r4, #192]	; 0xc0
   12d38:	ldr	r2, [r4, #196]	; 0xc4
   12d3c:	adds	r3, r3, #1
   12d40:	adc	r2, r2, #0
   12d44:	str	r3, [r4, #192]	; 0xc0
   12d48:	str	r2, [r4, #196]	; 0xc4
   12d4c:	bl	12840 <get_char@@Base>
   12d50:	ldr	r2, [r4, #200]	; 0xc8
   12d54:	ldr	lr, [r4, #204]	; 0xcc
   12d58:	ldr	r3, [r4, #816]	; 0x330
   12d5c:	adds	r2, r2, #1
   12d60:	ldr	ip, [r4, #820]	; 0x334
   12d64:	adc	lr, lr, #0
   12d68:	str	r2, [r4, #200]	; 0xc8
   12d6c:	adds	r3, r3, #1
   12d70:	str	lr, [r4, #204]	; 0xcc
   12d74:	adc	ip, ip, #0
   12d78:	subs	r2, r0, #0
   12d7c:	str	r3, [r4, #816]	; 0x330
   12d80:	str	ip, [r4, #820]	; 0x334
   12d84:	beq	12cbc <next@@Base+0x318>
   12d88:	ldr	r3, [r4, #128]	; 0x80
   12d8c:	sub	r0, r2, #48	; 0x30
   12d90:	uxtb	r0, r0
   12d94:	ldr	r1, [r4, #132]	; 0x84
   12d98:	adds	r3, r3, #1
   12d9c:	adc	r1, r1, #0
   12da0:	cmp	r0, #9
   12da4:	str	r3, [r4, #128]	; 0x80
   12da8:	movhi	r7, #1
   12dac:	movhi	r6, sp
   12db0:	str	r1, [r4, #132]	; 0x84
   12db4:	bhi	12e04 <next@@Base+0x460>
   12db8:	mov	r6, sp
   12dbc:	add	r4, r4, #544	; 0x220
   12dc0:	mov	r8, r6
   12dc4:	mov	r7, #1
   12dc8:	ldr	r3, [r4]
   12dcc:	mov	r0, r5
   12dd0:	add	r7, r7, #1
   12dd4:	strb	r2, [r8, #1]!
   12dd8:	ldr	r2, [r4, #4]
   12ddc:	adds	r3, r3, #1
   12de0:	adc	r2, r2, #0
   12de4:	str	r3, [r4]
   12de8:	str	r2, [r4, #4]
   12dec:	bl	12840 <get_char@@Base>
   12df0:	sub	r3, r0, #48	; 0x30
   12df4:	mov	r2, r0
   12df8:	uxtb	r3, r3
   12dfc:	cmp	r3, #9
   12e00:	bls	12dc8 <next@@Base+0x424>
   12e04:	ldr	r4, [pc, #2880]	; 1394c <next@@Base+0xfa8>
   12e08:	mov	r8, #0
   12e0c:	mov	r0, r5
   12e10:	add	r4, pc, r4
   12e14:	ldr	r3, [r4, #552]	; 0x228
   12e18:	ldr	r2, [r4, #556]	; 0x22c
   12e1c:	adds	r3, r3, #1
   12e20:	adc	r2, r2, r8
   12e24:	str	r3, [r4, #552]	; 0x228
   12e28:	str	r2, [r4, #556]	; 0x22c
   12e2c:	bl	1294c <push_back_one_char@@Base>
   12e30:	add	r2, sp, #512	; 0x200
   12e34:	ldr	r3, [r4, #560]	; 0x230
   12e38:	mov	r0, #8
   12e3c:	add	r7, r2, r7
   12e40:	ldr	r2, [r4, #564]	; 0x234
   12e44:	strb	r8, [r7, #-512]	; 0xfffffe00
   12e48:	adds	r3, r3, #1
   12e4c:	adc	r2, r2, r8
   12e50:	str	r3, [r4, #560]	; 0x230
   12e54:	str	r2, [r4, #564]	; 0x234
   12e58:	bl	1194c <malloc@plt>
   12e5c:	mov	r7, r0
   12e60:	mov	r1, r8
   12e64:	mov	r2, #10
   12e68:	mov	r0, r6
   12e6c:	bl	118d4 <strtol@plt>
   12e70:	ldr	r3, [r4, #568]	; 0x238
   12e74:	mov	r1, r0
   12e78:	mov	r0, r7
   12e7c:	ldr	r2, [r4, #572]	; 0x23c
   12e80:	adds	r3, r3, #1
   12e84:	adc	r2, r2, r8
   12e88:	str	r3, [r4, #568]	; 0x238
   12e8c:	str	r2, [r4, #572]	; 0x23c
   12e90:	bl	12258 <init_token_int_value@@Base>
   12e94:	ldr	r3, [r4, #576]	; 0x240
   12e98:	ldr	r2, [r4, #580]	; 0x244
   12e9c:	adds	r3, r3, #1
   12ea0:	adc	r2, r2, r8
   12ea4:	str	r3, [r4, #576]	; 0x240
   12ea8:	str	r2, [r4, #580]	; 0x244
   12eac:	b	12a24 <next@@Base+0x80>
   12eb0:	ldr	r4, [pc, #2712]	; 13950 <next@@Base+0xfac>
   12eb4:	mov	r3, #101	; 0x65
   12eb8:	mov	r0, r5
   12ebc:	strb	r3, [sp]
   12ec0:	add	r4, pc, r4
   12ec4:	ldr	r3, [r4, #288]	; 0x120
   12ec8:	add	r6, r4, #816	; 0x330
   12ecc:	ldr	r1, [r4, #292]	; 0x124
   12ed0:	adds	r3, r3, #1
   12ed4:	adc	r1, r1, #0
   12ed8:	str	r3, [r4, #288]	; 0x120
   12edc:	str	r1, [r4, #292]	; 0x124
   12ee0:	bl	12840 <get_char@@Base>
   12ee4:	ldr	r2, [r4, #296]	; 0x128
   12ee8:	ldm	r6, {r3, ip}
   12eec:	ldr	lr, [r4, #300]	; 0x12c
   12ef0:	adds	r2, r2, #1
   12ef4:	str	r2, [r4, #296]	; 0x128
   12ef8:	adc	lr, lr, #0
   12efc:	adds	r3, r3, #1
   12f00:	adc	r2, ip, #0
   12f04:	subs	r1, r0, #0
   12f08:	str	r3, [r6]
   12f0c:	str	r2, [r6, #4]
   12f10:	str	lr, [r4, #300]	; 0x12c
   12f14:	beq	12cbc <next@@Base+0x318>
   12f18:	ldr	r3, [r4, #152]	; 0x98
   12f1c:	ldr	r2, [r4, #156]	; 0x9c
   12f20:	adds	r3, r3, #1
   12f24:	adc	r2, r2, #0
   12f28:	cmp	r1, #108	; 0x6c
   12f2c:	str	r3, [r4, #152]	; 0x98
   12f30:	str	r2, [r4, #156]	; 0x9c
   12f34:	bne	1356c <next@@Base+0xbc8>
   12f38:	mov	r0, r5
   12f3c:	strb	r1, [sp, #1]
   12f40:	bl	12840 <get_char@@Base>
   12f44:	add	r2, r4, #784	; 0x310
   12f48:	ldr	r3, [r2, #-8]
   12f4c:	mov	ip, r0
   12f50:	ldr	r1, [r2, #-4]
   12f54:	adds	r3, r3, #1
   12f58:	adc	r1, r1, #0
   12f5c:	cmp	r0, #115	; 0x73
   12f60:	str	r3, [r2, #-8]
   12f64:	str	r1, [r2, #-4]
   12f68:	bne	134e8 <next@@Base+0xb44>
   12f6c:	add	r4, r4, #800	; 0x320
   12f70:	mov	r0, r5
   12f74:	strb	ip, [sp, #2]
   12f78:	bl	12840 <get_char@@Base>
   12f7c:	ldr	r3, [r4, #-8]
   12f80:	ldr	r2, [r4, #-4]
   12f84:	adds	r3, r3, #1
   12f88:	adc	r2, r2, #0
   12f8c:	cmp	r0, #101	; 0x65
   12f90:	str	r3, [r4, #-8]
   12f94:	str	r2, [r4, #-4]
   12f98:	bne	13560 <next@@Base+0xbbc>
   12f9c:	mov	r0, #4
   12fa0:	bl	1194c <malloc@plt>
   12fa4:	mov	r7, r0
   12fa8:	bl	12440 <init_token_else@@Base>
   12fac:	ldr	r3, [r6, #-8]
   12fb0:	ldr	r2, [r6, #-4]
   12fb4:	adds	r3, r3, #1
   12fb8:	adc	r2, r2, #0
   12fbc:	str	r3, [r6, #-8]
   12fc0:	str	r2, [r6, #-4]
   12fc4:	b	12a24 <next@@Base+0x80>
   12fc8:	ldr	r4, [pc, #2436]	; 13954 <next@@Base+0xfb0>
   12fcc:	mov	r0, r5
   12fd0:	strb	r8, [sp]
   12fd4:	add	r4, pc, r4
   12fd8:	ldr	r3, [r4, #304]	; 0x130
   12fdc:	ldr	r1, [r4, #308]	; 0x134
   12fe0:	adds	r3, r3, #1
   12fe4:	adc	r1, r1, #0
   12fe8:	str	r3, [r4, #304]	; 0x130
   12fec:	str	r1, [r4, #308]	; 0x134
   12ff0:	bl	12840 <get_char@@Base>
   12ff4:	ldr	r2, [r4, #312]	; 0x138
   12ff8:	ldr	r6, [r4, #316]	; 0x13c
   12ffc:	ldr	r3, [r4, #816]	; 0x330
   13000:	adds	r2, r2, #1
   13004:	ldr	lr, [r4, #820]	; 0x334
   13008:	adc	r6, r6, #0
   1300c:	str	r2, [r4, #312]	; 0x138
   13010:	adds	r2, r3, #1
   13014:	str	r6, [r4, #316]	; 0x13c
   13018:	adc	ip, lr, #0
   1301c:	subs	r3, r0, #0
   13020:	str	r2, [r4, #816]	; 0x330
   13024:	str	ip, [r4, #820]	; 0x334
   13028:	beq	12cbc <next@@Base+0x318>
   1302c:	cmp	r3, #102	; 0x66
   13030:	bne	13084 <next@@Base+0x6e0>
   13034:	mov	r1, #0
   13038:	strb	r3, [sp, #1]
   1303c:	mov	r0, #4
   13040:	ldr	r3, [r4, #592]	; 0x250
   13044:	strb	r1, [sp, #2]
   13048:	ldr	r1, [r4, #596]	; 0x254
   1304c:	adds	r3, r3, #1
   13050:	adc	r1, r1, #0
   13054:	str	r3, [r4, #592]	; 0x250
   13058:	str	r1, [r4, #596]	; 0x254
   1305c:	bl	1194c <malloc@plt>
   13060:	mov	r7, r0
   13064:	bl	12410 <init_token_if@@Base>
   13068:	ldr	r3, [r4, #632]	; 0x278
   1306c:	ldr	r2, [r4, #636]	; 0x27c
   13070:	adds	r3, r3, #1
   13074:	adc	r2, r2, #0
   13078:	str	r3, [r4, #632]	; 0x278
   1307c:	str	r2, [r4, #636]	; 0x27c
   13080:	b	12a24 <next@@Base+0x80>
   13084:	cmp	r3, #110	; 0x6e
   13088:	bne	1357c <next@@Base+0xbd8>
   1308c:	add	r6, r4, #608	; 0x260
   13090:	strb	r3, [sp, #1]
   13094:	mov	r0, r5
   13098:	ldr	r3, [r6, #-8]
   1309c:	ldr	r2, [r6, #-4]
   130a0:	adds	r3, r3, #1
   130a4:	adc	r2, r2, #0
   130a8:	str	r3, [r6, #-8]
   130ac:	str	r2, [r6, #-4]
   130b0:	bl	12840 <get_char@@Base>
   130b4:	ldr	r3, [r6]
   130b8:	ldr	r2, [r6, #4]
   130bc:	adds	r3, r3, #1
   130c0:	adc	r2, r2, #0
   130c4:	cmp	r0, #116	; 0x74
   130c8:	str	r3, [r6]
   130cc:	str	r2, [r6, #4]
   130d0:	bne	13508 <next@@Base+0xb64>
   130d4:	mov	r0, #4
   130d8:	bl	1194c <malloc@plt>
   130dc:	mov	r7, r0
   130e0:	bl	12228 <init_token_int_type@@Base>
   130e4:	ldr	r3, [r4, #624]	; 0x270
   130e8:	ldr	r2, [r4, #628]	; 0x274
   130ec:	adds	r3, r3, #1
   130f0:	adc	r2, r2, #0
   130f4:	str	r3, [r4, #624]	; 0x270
   130f8:	str	r2, [r4, #628]	; 0x274
   130fc:	b	12a24 <next@@Base+0x80>
   13100:	ldr	r4, [pc, #2128]	; 13958 <next@@Base+0xfb4>
   13104:	mov	r0, r5
   13108:	strb	r8, [sp]
   1310c:	add	r4, pc, r4
   13110:	ldr	r3, [r4, #320]	; 0x140
   13114:	ldr	r1, [r4, #324]	; 0x144
   13118:	adds	r3, r3, #1
   1311c:	adc	r1, r1, #0
   13120:	str	r3, [r4, #320]	; 0x140
   13124:	str	r1, [r4, #324]	; 0x144
   13128:	bl	12840 <get_char@@Base>
   1312c:	ldr	r2, [r4, #328]	; 0x148
   13130:	ldr	r6, [r4, #332]	; 0x14c
   13134:	ldr	r3, [r4, #816]	; 0x330
   13138:	adds	r2, r2, #1
   1313c:	ldr	lr, [r4, #820]	; 0x334
   13140:	adc	r6, r6, #0
   13144:	str	r2, [r4, #328]	; 0x148
   13148:	adds	r3, r3, #1
   1314c:	str	r6, [r4, #332]	; 0x14c
   13150:	adc	r2, lr, #0
   13154:	subs	r1, r0, #0
   13158:	str	r3, [r4, #816]	; 0x330
   1315c:	str	r2, [r4, #820]	; 0x334
   13160:	beq	12cbc <next@@Base+0x318>
   13164:	ldr	r3, [r4, #136]	; 0x88
   13168:	ldr	r2, [r4, #140]	; 0x8c
   1316c:	adds	r3, r3, #1
   13170:	adc	r2, r2, #0
   13174:	cmp	r1, #97	; 0x61
   13178:	str	r3, [r4, #136]	; 0x88
   1317c:	str	r2, [r4, #140]	; 0x8c
   13180:	bne	1352c <next@@Base+0xb88>
   13184:	mov	r0, r5
   13188:	strb	r1, [sp, #1]
   1318c:	bl	12840 <get_char@@Base>
   13190:	add	r2, r4, #656	; 0x290
   13194:	ldr	r3, [r2, #-8]
   13198:	mov	ip, r0
   1319c:	ldr	r1, [r2, #-4]
   131a0:	adds	r3, r3, #1
   131a4:	adc	r1, r1, #0
   131a8:	cmp	r0, #105	; 0x69
   131ac:	str	r3, [r2, #-8]
   131b0:	str	r1, [r2, #-4]
   131b4:	bne	134e8 <next@@Base+0xb44>
   131b8:	mov	r0, r5
   131bc:	strb	ip, [sp, #2]
   131c0:	bl	12840 <get_char@@Base>
   131c4:	add	r2, r4, #672	; 0x2a0
   131c8:	ldr	r3, [r2, #-8]
   131cc:	mov	ip, r0
   131d0:	ldr	r1, [r2, #-4]
   131d4:	adds	r3, r3, #1
   131d8:	adc	r1, r1, #0
   131dc:	cmp	r0, #110	; 0x6e
   131e0:	str	r3, [r2, #-8]
   131e4:	str	r1, [r2, #-4]
   131e8:	bne	134e8 <next@@Base+0xb44>
   131ec:	mov	r6, #0
   131f0:	mov	r0, #5
   131f4:	strb	ip, [sp, #3]
   131f8:	strb	r6, [sp, #4]
   131fc:	bl	1194c <malloc@plt>
   13200:	mov	r5, r0
   13204:	mov	r2, #4
   13208:	mov	r1, sp
   1320c:	bl	119d0 <strncpy@plt>
   13210:	mov	r0, #8
   13214:	strb	r6, [r5, #4]
   13218:	bl	1194c <malloc@plt>
   1321c:	mov	r1, r5
   13220:	mov	r7, r0
   13224:	bl	1228c <init_token_function@@Base>
   13228:	ldr	r3, [r4, #680]	; 0x2a8
   1322c:	ldr	r2, [r4, #684]	; 0x2ac
   13230:	adds	r3, r3, #1
   13234:	adc	r2, r2, r6
   13238:	str	r3, [r4, #680]	; 0x2a8
   1323c:	str	r2, [r4, #684]	; 0x2ac
   13240:	b	12a24 <next@@Base+0x80>
   13244:	ldr	r4, [pc, #1808]	; 1395c <next@@Base+0xfb8>
   13248:	mov	r0, #8
   1324c:	add	r4, pc, r4
   13250:	ldr	r3, [r4, #176]	; 0xb0
   13254:	ldr	r2, [r4, #180]	; 0xb4
   13258:	adds	r3, r3, #1
   1325c:	adc	r2, r2, #0
   13260:	str	r3, [r4, #176]	; 0xb0
   13264:	str	r2, [r4, #180]	; 0xb4
   13268:	bl	1194c <malloc@plt>
   1326c:	mov	r1, r9
   13270:	mov	r7, r0
   13274:	bl	12258 <init_token_int_value@@Base>
   13278:	ldr	r3, [r4, #184]	; 0xb8
   1327c:	ldr	r2, [r4, #188]	; 0xbc
   13280:	adds	r3, r3, #1
   13284:	adc	r2, r2, #0
   13288:	str	r3, [r4, #184]	; 0xb8
   1328c:	str	r2, [r4, #188]	; 0xbc
   13290:	b	12a24 <next@@Base+0x80>
   13294:	ldr	r4, [pc, #1732]	; 13960 <next@@Base+0xfbc>
   13298:	mov	r0, #4
   1329c:	add	r4, pc, r4
   132a0:	ldr	r3, [r4, #224]	; 0xe0
   132a4:	ldr	r2, [r4, #228]	; 0xe4
   132a8:	adds	r3, r3, #1
   132ac:	adc	r2, r2, #0
   132b0:	str	r3, [r4, #224]	; 0xe0
   132b4:	str	r2, [r4, #228]	; 0xe4
   132b8:	bl	1194c <malloc@plt>
   132bc:	mov	r7, r0
   132c0:	bl	122f0 <init_token_cpar@@Base>
   132c4:	ldr	r3, [r4, #232]	; 0xe8
   132c8:	ldr	r2, [r4, #236]	; 0xec
   132cc:	adds	r3, r3, #1
   132d0:	adc	r2, r2, #0
   132d4:	str	r3, [r4, #232]	; 0xe8
   132d8:	str	r2, [r4, #236]	; 0xec
   132dc:	b	12a24 <next@@Base+0x80>
   132e0:	ldr	r4, [pc, #1660]	; 13964 <next@@Base+0xfc0>
   132e4:	mov	r0, #4
   132e8:	add	r4, pc, r4
   132ec:	ldr	r3, [r4, #208]	; 0xd0
   132f0:	ldr	r2, [r4, #212]	; 0xd4
   132f4:	adds	r3, r3, #1
   132f8:	adc	r2, r2, #0
   132fc:	str	r3, [r4, #208]	; 0xd0
   13300:	str	r2, [r4, #212]	; 0xd4
   13304:	bl	1194c <malloc@plt>
   13308:	mov	r7, r0
   1330c:	bl	122c0 <init_token_opar@@Base>
   13310:	ldr	r3, [r4, #216]	; 0xd8
   13314:	ldr	r2, [r4, #220]	; 0xdc
   13318:	adds	r3, r3, #1
   1331c:	adc	r2, r2, #0
   13320:	str	r3, [r4, #216]	; 0xd8
   13324:	str	r2, [r4, #220]	; 0xdc
   13328:	b	12a24 <next@@Base+0x80>
   1332c:	ldr	r3, [pc, #1588]	; 13968 <next@@Base+0xfc4>
   13330:	mov	r0, #4
   13334:	add	r3, pc, r3
   13338:	mov	r4, r3
   1333c:	ldr	r3, [r3, #256]	; 0x100
   13340:	ldr	r1, [r4, #260]	; 0x104
   13344:	adds	r3, r3, #1
   13348:	adc	r1, r1, #0
   1334c:	str	r3, [r4, #256]	; 0x100
   13350:	str	r1, [r4, #260]	; 0x104
   13354:	bl	1194c <malloc@plt>
   13358:	mov	r7, r0
   1335c:	bl	12350 <init_token_cbra@@Base>
   13360:	ldr	r2, [r4, #264]	; 0x108
   13364:	ldr	r1, [r4, #268]	; 0x10c
   13368:	adds	r2, r2, #1
   1336c:	adc	r1, r1, #0
   13370:	str	r2, [r4, #264]	; 0x108
   13374:	str	r1, [r4, #268]	; 0x10c
   13378:	b	12a24 <next@@Base+0x80>
   1337c:	ldr	r4, [pc, #1512]	; 1396c <next@@Base+0xfc8>
   13380:	mov	r0, #4
   13384:	add	r4, pc, r4
   13388:	ldr	r3, [r4, #240]	; 0xf0
   1338c:	ldr	r2, [r4, #244]	; 0xf4
   13390:	adds	r3, r3, #1
   13394:	adc	r2, r2, #0
   13398:	str	r3, [r4, #240]	; 0xf0
   1339c:	str	r2, [r4, #244]	; 0xf4
   133a0:	bl	1194c <malloc@plt>
   133a4:	mov	r7, r0
   133a8:	bl	12320 <init_token_obra@@Base>
   133ac:	ldr	r3, [r4, #248]	; 0xf8
   133b0:	ldr	r2, [r4, #252]	; 0xfc
   133b4:	adds	r3, r3, #1
   133b8:	adc	r2, r2, #0
   133bc:	str	r3, [r4, #248]	; 0xf8
   133c0:	str	r2, [r4, #252]	; 0xfc
   133c4:	b	12a24 <next@@Base+0x80>
   133c8:	ldr	r3, [pc, #1440]	; 13970 <next@@Base+0xfcc>
   133cc:	mov	r0, #4
   133d0:	add	r3, pc, r3
   133d4:	mov	r4, r3
   133d8:	ldr	r3, [r3, #272]	; 0x110
   133dc:	ldr	r1, [r4, #276]	; 0x114
   133e0:	adds	r3, r3, #1
   133e4:	adc	r1, r1, #0
   133e8:	str	r3, [r4, #272]	; 0x110
   133ec:	str	r1, [r4, #276]	; 0x114
   133f0:	bl	1194c <malloc@plt>
   133f4:	mov	r7, r0
   133f8:	bl	123b0 <init_token_semicolon@@Base>
   133fc:	ldr	r2, [r4, #280]	; 0x118
   13400:	ldr	r1, [r4, #284]	; 0x11c
   13404:	adds	r2, r2, #1
   13408:	adc	r1, r1, #0
   1340c:	str	r2, [r4, #280]	; 0x118
   13410:	str	r1, [r4, #284]	; 0x11c
   13414:	b	12a24 <next@@Base+0x80>
   13418:	cmp	r8, #33	; 0x21
   1341c:	beq	137f4 <next@@Base+0xe50>
   13420:	and	r3, r8, #253	; 0xfd
   13424:	cmp	r3, #60	; 0x3c
   13428:	beq	13730 <next@@Base+0xd8c>
   1342c:	cmp	r8, #61	; 0x3d
   13430:	beq	13688 <next@@Base+0xce4>
   13434:	ldr	r6, [pc, #1336]	; 13974 <next@@Base+0xfd0>
   13438:	add	r6, pc, r6
   1343c:	ldr	r3, [r6, #440]	; 0x1b8
   13440:	ldr	r1, [r6, #444]	; 0x1bc
   13444:	adds	r3, r3, #1
   13448:	adc	r1, r1, #0
   1344c:	cmp	r8, #124	; 0x7c
   13450:	str	r3, [r6, #440]	; 0x1b8
   13454:	str	r1, [r6, #444]	; 0x1bc
   13458:	beq	135e4 <next@@Base+0xc40>
   1345c:	cmp	r8, #38	; 0x26
   13460:	bne	135a8 <next@@Base+0xc04>
   13464:	mov	r0, r5
   13468:	strb	r8, [sp]
   1346c:	bl	12840 <get_char@@Base>
   13470:	ldr	r3, [r6, #512]	; 0x200
   13474:	mov	r4, r0
   13478:	mov	r0, #8
   1347c:	ldr	r1, [r6, #516]	; 0x204
   13480:	adds	r3, r3, #1
   13484:	adc	r1, r1, #0
   13488:	str	r3, [r6, #512]	; 0x200
   1348c:	str	r1, [r6, #516]	; 0x204
   13490:	bl	1194c <malloc@plt>
   13494:	cmp	r4, #38	; 0x26
   13498:	mov	r7, r0
   1349c:	bne	13584 <next@@Base+0xbe0>
   134a0:	mov	r0, #3
   134a4:	bl	1194c <malloc@plt>
   134a8:	ldrb	r2, [sp]
   134ac:	mov	r3, r0
   134b0:	mov	ip, #0
   134b4:	mov	r1, r0
   134b8:	mov	r0, r7
   134bc:	strb	r2, [r3]
   134c0:	strb	r8, [r3, #1]
   134c4:	strb	ip, [r3, #2]
   134c8:	bl	12470 <init_token_boolean_op@@Base>
   134cc:	ldr	r3, [r6, #528]	; 0x210
   134d0:	ldr	r2, [r6, #532]	; 0x214
   134d4:	adds	r3, r3, #1
   134d8:	adc	r2, r2, #0
   134dc:	str	r3, [r6, #528]	; 0x210
   134e0:	str	r2, [r6, #532]	; 0x214
   134e4:	b	12a24 <next@@Base+0x80>
   134e8:	ldr	r3, [r2]
   134ec:	mov	r0, #1
   134f0:	ldr	r1, [r2, #4]
   134f4:	adds	r3, r3, r0
   134f8:	adc	r1, r1, #0
   134fc:	str	r3, [r2]
   13500:	str	r1, [r2, #4]
   13504:	bl	1197c <exit@plt>
   13508:	add	r4, r4, #624	; 0x270
   1350c:	ldr	r3, [r4, #-8]
   13510:	mov	r0, #1
   13514:	ldr	r2, [r4, #-4]
   13518:	adds	r3, r3, r0
   1351c:	adc	r2, r2, #0
   13520:	str	r3, [r4, #-8]
   13524:	str	r2, [r4, #-4]
   13528:	bl	1197c <exit@plt>
   1352c:	add	r4, r4, #640	; 0x280
   13530:	ldr	r3, [r4]
   13534:	mov	r0, #1
   13538:	adds	r3, r3, r0
   1353c:	ldr	r2, [r4, #4]
   13540:	str	r3, [r4]
   13544:	adc	r2, r2, #0
   13548:	str	r2, [r4, #4]
   1354c:	bl	1197c <exit@plt>
   13550:	add	r4, r4, #688	; 0x2b0
   13554:	mov	r0, #1
   13558:	ldr	r3, [r4]
   1355c:	b	13538 <next@@Base+0xb94>
   13560:	mov	r0, #1
   13564:	ldr	r3, [r4]
   13568:	b	13538 <next@@Base+0xb94>
   1356c:	add	r4, r4, #768	; 0x300
   13570:	mov	r0, #1
   13574:	ldr	r3, [r4]
   13578:	b	13538 <next@@Base+0xb94>
   1357c:	add	r4, r4, #592	; 0x250
   13580:	b	1350c <next@@Base+0xb68>
   13584:	add	r6, r6, #528	; 0x210
   13588:	ldr	r3, [r6, #-8]
   1358c:	mov	r0, #1
   13590:	ldr	r2, [r6, #-4]
   13594:	adds	r3, r3, r0
   13598:	adc	r2, r2, #0
   1359c:	str	r3, [r6, #-8]
   135a0:	str	r2, [r6, #-4]
   135a4:	bl	1197c <exit@plt>
   135a8:	ldr	r3, [r6, #504]	; 0x1f8
   135ac:	mov	r2, r8
   135b0:	add	r6, r6, #544	; 0x220
   135b4:	ldr	ip, [r6, #-36]	; 0xffffffdc
   135b8:	ldr	r0, [pc, #952]	; 13978 <next@@Base+0xfd4>
   135bc:	adds	r3, r3, #1
   135c0:	ldr	r1, [pc, #948]	; 1397c <next@@Base+0xfd8>
   135c4:	adc	ip, ip, #0
   135c8:	str	r3, [r6, #-40]	; 0xffffffd8
   135cc:	str	ip, [r6, #-36]	; 0xffffffdc
   135d0:	ldr	r3, [r4, r0]
   135d4:	add	r1, pc, r1
   135d8:	ldr	r0, [r3]
   135dc:	bl	119a0 <fprintf@plt>
   135e0:	b	13588 <next@@Base+0xbe4>
   135e4:	add	r4, r6, #480	; 0x1e0
   135e8:	ldr	r3, [r4, #-8]
   135ec:	mov	r0, r5
   135f0:	strb	r8, [sp]
   135f4:	ldr	r2, [r4, #-4]
   135f8:	adds	r3, r3, #1
   135fc:	adc	r2, r2, #0
   13600:	str	r3, [r4, #-8]
   13604:	str	r2, [r4, #-4]
   13608:	bl	12840 <get_char@@Base>
   1360c:	ldr	r3, [r4]
   13610:	mov	r5, r0
   13614:	mov	r0, #8
   13618:	ldr	r2, [r4, #4]
   1361c:	adds	r3, r3, #1
   13620:	adc	r2, r2, #0
   13624:	str	r3, [r4]
   13628:	str	r2, [r4, #4]
   1362c:	bl	1194c <malloc@plt>
   13630:	cmp	r5, #124	; 0x7c
   13634:	mov	r7, r0
   13638:	addne	r6, r6, #496	; 0x1f0
   1363c:	bne	13588 <next@@Base+0xbe4>
   13640:	mov	r0, #3
   13644:	bl	1194c <malloc@plt>
   13648:	ldrb	r2, [sp]
   1364c:	mov	r3, r0
   13650:	mov	ip, #0
   13654:	mov	r1, r0
   13658:	mov	r0, r7
   1365c:	strb	r2, [r3]
   13660:	strb	r8, [r3, #1]
   13664:	strb	ip, [r3, #2]
   13668:	bl	12470 <init_token_boolean_op@@Base>
   1366c:	ldr	r3, [r6, #496]	; 0x1f0
   13670:	ldr	r2, [r6, #500]	; 0x1f4
   13674:	adds	r3, r3, #1
   13678:	adc	r2, r2, #0
   1367c:	str	r3, [r6, #496]	; 0x1f0
   13680:	str	r2, [r6, #500]	; 0x1f4
   13684:	b	12a24 <next@@Base+0x80>
   13688:	ldr	r4, [pc, #752]	; 13980 <next@@Base+0xfdc>
   1368c:	mov	r0, r5
   13690:	strb	r8, [sp]
   13694:	add	r4, pc, r4
   13698:	ldr	r3, [r4, #432]	; 0x1b0
   1369c:	ldr	r1, [r4, #436]	; 0x1b4
   136a0:	adds	r3, r3, #1
   136a4:	adc	r1, r1, #0
   136a8:	str	r3, [r4, #432]	; 0x1b0
   136ac:	str	r1, [r4, #436]	; 0x1b4
   136b0:	bl	12840 <get_char@@Base>
   136b4:	ldr	r3, [r4, #448]	; 0x1c0
   136b8:	mov	r5, r0
   136bc:	mov	r0, #8
   136c0:	ldr	r1, [r4, #452]	; 0x1c4
   136c4:	adds	r3, r3, #1
   136c8:	adc	r1, r1, #0
   136cc:	str	r3, [r4, #448]	; 0x1c0
   136d0:	str	r1, [r4, #452]	; 0x1c4
   136d4:	bl	1194c <malloc@plt>
   136d8:	cmp	r5, #61	; 0x3d
   136dc:	mov	r7, r0
   136e0:	addne	r4, r4, #464	; 0x1d0
   136e4:	bne	1350c <next@@Base+0xb68>
   136e8:	mov	r0, #3
   136ec:	bl	1194c <malloc@plt>
   136f0:	ldrb	r2, [sp]
   136f4:	mov	r3, r0
   136f8:	mov	ip, #0
   136fc:	mov	r1, r0
   13700:	mov	r0, r7
   13704:	strb	r2, [r3]
   13708:	strb	r8, [r3, #1]
   1370c:	strb	ip, [r3, #2]
   13710:	bl	12470 <init_token_boolean_op@@Base>
   13714:	ldr	r3, [r4, #464]	; 0x1d0
   13718:	ldr	r2, [r4, #468]	; 0x1d4
   1371c:	adds	r3, r3, #1
   13720:	adc	r2, r2, #0
   13724:	str	r3, [r4, #464]	; 0x1d0
   13728:	str	r2, [r4, #468]	; 0x1d4
   1372c:	b	12a24 <next@@Base+0x80>
   13730:	ldr	r4, [pc, #588]	; 13984 <next@@Base+0xfe0>
   13734:	mov	r0, r5
   13738:	strb	r8, [sp]
   1373c:	add	r4, pc, r4
   13740:	ldr	r3, [r4, #392]	; 0x188
   13744:	ldr	r2, [r4, #396]	; 0x18c
   13748:	adds	r3, r3, #1
   1374c:	adc	r2, r2, #0
   13750:	str	r3, [r4, #392]	; 0x188
   13754:	str	r2, [r4, #396]	; 0x18c
   13758:	bl	12840 <get_char@@Base>
   1375c:	ldr	r3, [r4, #400]	; 0x190
   13760:	mov	r8, r0
   13764:	mov	r0, #8
   13768:	ldr	r2, [r4, #404]	; 0x194
   1376c:	adds	r3, r3, #1
   13770:	adc	r2, r2, #0
   13774:	str	r3, [r4, #400]	; 0x190
   13778:	str	r2, [r4, #404]	; 0x194
   1377c:	bl	1194c <malloc@plt>
   13780:	cmp	r8, #61	; 0x3d
   13784:	mov	r7, r0
   13788:	beq	138b8 <next@@Base+0xf14>
   1378c:	mov	r0, r5
   13790:	bl	1294c <push_back_one_char@@Base>
   13794:	ldr	r2, [r4, #408]	; 0x198
   13798:	mov	r0, #2
   1379c:	ldr	r1, [r4, #412]	; 0x19c
   137a0:	adds	r2, r2, #1
   137a4:	adc	r1, r1, #0
   137a8:	str	r2, [r4, #408]	; 0x198
   137ac:	str	r1, [r4, #412]	; 0x19c
   137b0:	bl	1194c <malloc@plt>
   137b4:	ldrb	r3, [sp]
   137b8:	mov	r2, #0
   137bc:	strb	r3, [r0]
   137c0:	strb	r2, [r0, #1]
   137c4:	mov	r1, r0
   137c8:	mov	r0, r7
   137cc:	bl	12470 <init_token_boolean_op@@Base>
   137d0:	ldr	r3, [pc, #432]	; 13988 <next@@Base+0xfe4>
   137d4:	add	r3, pc, r3
   137d8:	ldr	r2, [r3, #424]	; 0x1a8
   137dc:	ldr	r1, [r3, #428]	; 0x1ac
   137e0:	adds	r2, r2, #1
   137e4:	adc	r1, r1, #0
   137e8:	str	r2, [r3, #424]	; 0x1a8
   137ec:	str	r1, [r3, #428]	; 0x1ac
   137f0:	b	12a24 <next@@Base+0x80>
   137f4:	ldr	r4, [pc, #400]	; 1398c <next@@Base+0xfe8>
   137f8:	mov	r0, r5
   137fc:	strb	r8, [sp]
   13800:	add	r4, pc, r4
   13804:	ldr	r3, [r4, #352]	; 0x160
   13808:	ldr	r1, [r4, #356]	; 0x164
   1380c:	adds	r3, r3, #1
   13810:	adc	r1, r1, #0
   13814:	str	r3, [r4, #352]	; 0x160
   13818:	str	r1, [r4, #356]	; 0x164
   1381c:	bl	12840 <get_char@@Base>
   13820:	ldr	r3, [r4, #360]	; 0x168
   13824:	mov	r8, r0
   13828:	mov	r0, #8
   1382c:	ldr	r2, [r4, #364]	; 0x16c
   13830:	adds	r3, r3, #1
   13834:	adc	r2, r2, #0
   13838:	str	r3, [r4, #360]	; 0x168
   1383c:	str	r2, [r4, #364]	; 0x16c
   13840:	bl	1194c <malloc@plt>
   13844:	cmp	r8, #61	; 0x3d
   13848:	mov	r7, r0
   1384c:	beq	138f0 <next@@Base+0xf4c>
   13850:	mov	r0, r5
   13854:	bl	1294c <push_back_one_char@@Base>
   13858:	ldr	r3, [r4, #368]	; 0x170
   1385c:	mov	r0, #2
   13860:	ldr	r2, [r4, #372]	; 0x174
   13864:	adds	r3, r3, #1
   13868:	adc	r2, r2, #0
   1386c:	str	r3, [r4, #368]	; 0x170
   13870:	str	r2, [r4, #372]	; 0x174
   13874:	bl	1194c <malloc@plt>
   13878:	ldrb	r3, [sp]
   1387c:	mov	r2, #0
   13880:	strb	r3, [r0]
   13884:	strb	r2, [r0, #1]
   13888:	mov	r1, r0
   1388c:	mov	r0, r7
   13890:	bl	12470 <init_token_boolean_op@@Base>
   13894:	ldr	r3, [pc, #244]	; 13990 <next@@Base+0xfec>
   13898:	add	r3, pc, r3
   1389c:	ldr	r2, [r3, #384]	; 0x180
   138a0:	ldr	r1, [r3, #388]	; 0x184
   138a4:	adds	r2, r2, #1
   138a8:	adc	r1, r1, #0
   138ac:	str	r2, [r3, #384]	; 0x180
   138b0:	str	r1, [r3, #388]	; 0x184
   138b4:	b	12a24 <next@@Base+0x80>
   138b8:	mov	r0, #3
   138bc:	bl	1194c <malloc@plt>
   138c0:	ldr	r2, [r4, #416]	; 0x1a0
   138c4:	mov	ip, #0
   138c8:	strb	r8, [r0, #1]
   138cc:	ldr	r1, [r4, #420]	; 0x1a4
   138d0:	strb	ip, [r0, #2]
   138d4:	ldrb	lr, [sp]
   138d8:	adds	r2, r2, #1
   138dc:	adc	r1, r1, ip
   138e0:	str	r2, [r4, #416]	; 0x1a0
   138e4:	strb	lr, [r0]
   138e8:	str	r1, [r4, #420]	; 0x1a4
   138ec:	b	137c4 <next@@Base+0xe20>
   138f0:	mov	r0, #3
   138f4:	bl	1194c <malloc@plt>
   138f8:	ldr	r2, [r4, #376]	; 0x178
   138fc:	mov	ip, #0
   13900:	strb	r8, [r0, #1]
   13904:	ldr	r1, [r4, #380]	; 0x17c
   13908:	strb	ip, [r0, #2]
   1390c:	ldrb	lr, [sp]
   13910:	adds	r2, r2, #1
   13914:	adc	r1, r1, ip
   13918:	str	r2, [r4, #376]	; 0x178
   1391c:	strb	lr, [r0]
   13920:	str	r1, [r4, #380]	; 0x17c
   13924:	b	13888 <next@@Base+0xee4>
   13928:	andeq	r7, r1, r0, lsr r6
   1392c:	muleq	r1, r4, r2
   13930:	andeq	r8, r1, r4, lsr r2
   13934:	andeq	r8, r1, r4, lsl #4
   13938:	strdeq	r8, [r1], -ip
   1393c:	andeq	r8, r1, r0, ror r1
   13940:	andeq	r8, r1, r0
   13944:			; <UNDEFINED> instruction: 0x00017fb4
   13948:	andeq	r7, r1, r8, asr #30
   1394c:	andeq	r7, r1, r8, ror #28
   13950:			; <UNDEFINED> instruction: 0x00017db8
   13954:	andeq	r7, r1, r4, lsr #25
   13958:	andeq	r7, r1, ip, ror #22
   1395c:	andeq	r7, r1, ip, lsr #20
   13960:	ldrdeq	r7, [r1], -ip
   13964:	muleq	r1, r0, r9
   13968:	andeq	r7, r1, r4, asr #18
   1396c:	strdeq	r7, [r1], -r4
   13970:	andeq	r7, r1, r8, lsr #17
   13974:	andeq	r7, r1, r0, asr #16
   13978:	andeq	r0, r0, r4, lsr #1
   1397c:	andeq	r5, r0, r4, lsr #15
   13980:	andeq	r7, r1, r4, ror #11
   13984:	andeq	r7, r1, ip, lsr r5
   13988:	andeq	r7, r1, r4, lsr #9
   1398c:	andeq	r7, r1, r8, ror r4
   13990:	andeq	r7, r1, r0, ror #7

00013994 <init_ast_base@@Base>:
   13994:	ldr	ip, [pc, #32]	; 139bc <init_ast_base@@Base+0x28>
   13998:	stm	r0, {r1, r2}
   1399c:	add	ip, pc, ip
   139a0:	ldr	r3, [ip]
   139a4:	ldr	r2, [ip, #4]
   139a8:	adds	r3, r3, #1
   139ac:	adc	r2, r2, #0
   139b0:	str	r3, [ip]
   139b4:	str	r2, [ip, #4]
   139b8:	bx	lr
   139bc:	andeq	r7, r1, r4, lsr #12

000139c0 <init_ast_base_single@@Base>:
   139c0:	str	r4, [sp, #-8]!
   139c4:	mov	r2, #0
   139c8:	ldr	r4, [pc, #68]	; 13a14 <init_ast_base_single@@Base+0x54>
   139cc:	add	r4, pc, r4
   139d0:	ldr	r3, [r4, #8]
   139d4:	ldr	ip, [r4, #12]
   139d8:	str	lr, [sp, #4]
   139dc:	adds	r3, r3, #1
   139e0:	adc	ip, ip, r2
   139e4:	str	r3, [r4, #8]
   139e8:	str	ip, [r4, #12]
   139ec:	bl	13994 <init_ast_base@@Base>
   139f0:	ldr	r3, [r4, #16]
   139f4:	ldr	r2, [r4, #20]
   139f8:	adds	r3, r3, #1
   139fc:	adc	r2, r2, #0
   13a00:	str	r3, [r4, #16]
   13a04:	str	r2, [r4, #20]
   13a08:	ldr	r4, [sp]
   13a0c:	add	sp, sp, #4
   13a10:	pop	{pc}		; (ldr pc, [sp], #4)
   13a14:	strdeq	r7, [r1], -r4

00013a18 <init_node_id@@Base>:
   13a18:	strd	r4, [sp, #-16]!
   13a1c:	mov	r5, r0
   13a20:	ldr	r4, [pc, #88]	; 13a80 <init_node_id@@Base+0x68>
   13a24:	add	r4, pc, r4
   13a28:	ldr	r3, [r4, #24]
   13a2c:	ldr	r2, [r4, #28]
   13a30:	str	r6, [sp, #8]
   13a34:	mov	r6, r1
   13a38:	mov	r1, #0
   13a3c:	str	lr, [sp, #12]
   13a40:	adds	r3, r3, #1
   13a44:	adc	r2, r2, r1
   13a48:	str	r3, [r4, #24]
   13a4c:	str	r2, [r4, #28]
   13a50:	bl	139c0 <init_ast_base_single@@Base>
   13a54:	ldr	r3, [r4, #32]
   13a58:	str	r6, [r5, #8]
   13a5c:	ldr	r2, [r4, #36]	; 0x24
   13a60:	ldr	r6, [sp, #8]
   13a64:	adds	r3, r3, #1
   13a68:	adc	r2, r2, #0
   13a6c:	str	r3, [r4, #32]
   13a70:	str	r2, [r4, #36]	; 0x24
   13a74:	ldrd	r4, [sp]
   13a78:	add	sp, sp, #12
   13a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a80:	muleq	r1, ip, r5

00013a84 <init_node_int@@Base>:
   13a84:	strd	r4, [sp, #-16]!
   13a88:	mov	r5, r0
   13a8c:	ldr	r4, [pc, #88]	; 13aec <init_node_int@@Base+0x68>
   13a90:	add	r4, pc, r4
   13a94:	ldr	r3, [r4, #40]	; 0x28
   13a98:	ldr	r2, [r4, #44]	; 0x2c
   13a9c:	str	r6, [sp, #8]
   13aa0:	mov	r6, r1
   13aa4:	mov	r1, #1
   13aa8:	str	lr, [sp, #12]
   13aac:	adds	r3, r3, r1
   13ab0:	adc	r2, r2, #0
   13ab4:	str	r3, [r4, #40]	; 0x28
   13ab8:	str	r2, [r4, #44]	; 0x2c
   13abc:	bl	139c0 <init_ast_base_single@@Base>
   13ac0:	ldr	r3, [r4, #48]	; 0x30
   13ac4:	str	r6, [r5, #8]
   13ac8:	ldr	r2, [r4, #52]	; 0x34
   13acc:	ldr	r6, [sp, #8]
   13ad0:	adds	r3, r3, #1
   13ad4:	adc	r2, r2, #0
   13ad8:	str	r3, [r4, #48]	; 0x30
   13adc:	str	r2, [r4, #52]	; 0x34
   13ae0:	ldrd	r4, [sp]
   13ae4:	add	sp, sp, #12
   13ae8:	pop	{pc}		; (ldr pc, [sp], #4)
   13aec:	andeq	r7, r1, r0, lsr r5

00013af0 <init_node_function@@Base>:
   13af0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13af4:	mov	r5, r0
   13af8:	ldr	r4, [pc, #104]	; 13b68 <init_node_function@@Base+0x78>
   13afc:	add	r4, pc, r4
   13b00:	ldr	r3, [r4, #56]	; 0x38
   13b04:	ldr	ip, [r4, #60]	; 0x3c
   13b08:	strd	r6, [sp, #8]
   13b0c:	mov	r7, r1
   13b10:	mov	r1, #2
   13b14:	mov	r6, r2
   13b18:	str	r8, [sp, #16]
   13b1c:	adds	r3, r3, #1
   13b20:	str	lr, [sp, #20]
   13b24:	adc	ip, ip, #0
   13b28:	str	r3, [r4, #56]	; 0x38
   13b2c:	str	ip, [r4, #60]	; 0x3c
   13b30:	bl	139c0 <init_ast_base_single@@Base>
   13b34:	ldr	r3, [r4, #64]	; 0x40
   13b38:	ldr	r1, [r4, #68]	; 0x44
   13b3c:	ldr	r8, [sp, #16]
   13b40:	adds	r3, r3, #1
   13b44:	str	r7, [r5, #8]
   13b48:	str	r6, [r5, #12]
   13b4c:	adc	r1, r1, #0
   13b50:	str	r3, [r4, #64]	; 0x40
   13b54:	ldrd	r6, [sp, #8]
   13b58:	str	r1, [r4, #68]	; 0x44
   13b5c:	ldrd	r4, [sp]
   13b60:	add	sp, sp, #20
   13b64:	pop	{pc}		; (ldr pc, [sp], #4)
   13b68:	andeq	r7, r1, r4, asr #9

00013b6c <init_node_return@@Base>:
   13b6c:	strd	r4, [sp, #-16]!
   13b70:	mov	r5, r0
   13b74:	ldr	r4, [pc, #88]	; 13bd4 <init_node_return@@Base+0x68>
   13b78:	add	r4, pc, r4
   13b7c:	ldr	r3, [r4, #72]	; 0x48
   13b80:	ldr	r2, [r4, #76]	; 0x4c
   13b84:	str	r6, [sp, #8]
   13b88:	mov	r6, r1
   13b8c:	mov	r1, #3
   13b90:	str	lr, [sp, #12]
   13b94:	adds	r3, r3, #1
   13b98:	adc	r2, r2, #0
   13b9c:	str	r3, [r4, #72]	; 0x48
   13ba0:	str	r2, [r4, #76]	; 0x4c
   13ba4:	bl	139c0 <init_ast_base_single@@Base>
   13ba8:	ldr	r3, [r4, #80]	; 0x50
   13bac:	str	r6, [r5, #8]
   13bb0:	ldr	r2, [r4, #84]	; 0x54
   13bb4:	ldr	r6, [sp, #8]
   13bb8:	adds	r3, r3, #1
   13bbc:	adc	r2, r2, #0
   13bc0:	str	r3, [r4, #80]	; 0x50
   13bc4:	str	r2, [r4, #84]	; 0x54
   13bc8:	ldrd	r4, [sp]
   13bcc:	add	sp, sp, #12
   13bd0:	pop	{pc}		; (ldr pc, [sp], #4)
   13bd4:	andeq	r7, r1, r8, asr #8

00013bd8 <init_node_if@@Base>:
   13bd8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13bdc:	mov	r5, r0
   13be0:	ldr	r4, [pc, #112]	; 13c58 <init_node_if@@Base+0x80>
   13be4:	add	r4, pc, r4
   13be8:	ldr	ip, [r4, #88]	; 0x58
   13bec:	strd	r6, [sp, #8]
   13bf0:	mov	r7, r1
   13bf4:	mov	r1, #4
   13bf8:	str	lr, [sp, #20]
   13bfc:	mov	r6, r2
   13c00:	ldr	lr, [r4, #92]	; 0x5c
   13c04:	str	r8, [sp, #16]
   13c08:	mov	r8, r3
   13c0c:	adds	ip, ip, #1
   13c10:	str	ip, [r4, #88]	; 0x58
   13c14:	adc	lr, lr, #0
   13c18:	str	lr, [r4, #92]	; 0x5c
   13c1c:	bl	139c0 <init_ast_base_single@@Base>
   13c20:	ldr	r1, [r4, #96]	; 0x60
   13c24:	str	r7, [r5, #8]
   13c28:	ldr	r0, [r4, #100]	; 0x64
   13c2c:	str	r6, [r5, #12]
   13c30:	str	r8, [r5, #16]
   13c34:	adds	r1, r1, #1
   13c38:	ldrd	r6, [sp, #8]
   13c3c:	adc	r0, r0, #0
   13c40:	str	r1, [r4, #96]	; 0x60
   13c44:	ldr	r8, [sp, #16]
   13c48:	str	r0, [r4, #100]	; 0x64
   13c4c:	ldrd	r4, [sp]
   13c50:	add	sp, sp, #20
   13c54:	pop	{pc}		; (ldr pc, [sp], #4)
   13c58:	ldrdeq	r7, [r1], -ip

00013c5c <init_node_boolean_operator@@Base>:
   13c5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13c60:	mov	r5, r0
   13c64:	ldr	r4, [pc, #120]	; 13ce4 <init_node_boolean_operator@@Base+0x88>
   13c68:	add	r4, pc, r4
   13c6c:	ldr	ip, [r4, #104]	; 0x68
   13c70:	strd	r6, [sp, #8]
   13c74:	mov	r6, r1
   13c78:	mov	r1, #0
   13c7c:	str	lr, [sp, #20]
   13c80:	mov	r7, r3
   13c84:	ldr	lr, [r4, #108]	; 0x6c
   13c88:	str	r8, [sp, #16]
   13c8c:	mov	r8, r2
   13c90:	adds	ip, ip, #1
   13c94:	str	ip, [r4, #104]	; 0x68
   13c98:	adc	lr, lr, r1
   13c9c:	str	lr, [r4, #108]	; 0x6c
   13ca0:	bl	139c0 <init_ast_base_single@@Base>
   13ca4:	ldr	r1, [r4, #112]	; 0x70
   13ca8:	mov	r3, #5
   13cac:	ldr	r2, [r4, #116]	; 0x74
   13cb0:	str	r3, [r5]
   13cb4:	str	r8, [r5, #8]
   13cb8:	adds	r1, r1, #1
   13cbc:	str	r7, [r5, #12]
   13cc0:	str	r6, [r5, #16]
   13cc4:	adc	r2, r2, #0
   13cc8:	str	r1, [r4, #112]	; 0x70
   13ccc:	ldrd	r6, [sp, #8]
   13cd0:	str	r2, [r4, #116]	; 0x74
   13cd4:	ldrd	r4, [sp]
   13cd8:	ldr	r8, [sp, #16]
   13cdc:	add	sp, sp, #20
   13ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ce4:	andeq	r7, r1, r8, asr r3

00013ce8 <free_node_boolean_operator@@Base>:
   13ce8:	strd	r4, [sp, #-16]!
   13cec:	mov	r5, r0
   13cf0:	ldr	r0, [r0, #4]
   13cf4:	str	r6, [sp, #8]
   13cf8:	str	lr, [sp, #12]
   13cfc:	cmp	r0, #0
   13d00:	beq	13da0 <free_node_boolean_operator@@Base+0xb8>
   13d04:	ldr	r4, [pc, #184]	; 13dc4 <free_node_boolean_operator@@Base+0xdc>
   13d08:	add	r4, pc, r4
   13d0c:	ldr	r3, [r4, #120]	; 0x78
   13d10:	ldr	r2, [r4, #124]	; 0x7c
   13d14:	adds	r3, r3, #1
   13d18:	adc	r2, r2, #0
   13d1c:	str	r3, [r4, #120]	; 0x78
   13d20:	str	r2, [r4, #124]	; 0x7c
   13d24:	bl	13dd0 <free_node@@Base>
   13d28:	ldr	r3, [r4, #136]	; 0x88
   13d2c:	ldr	r2, [r4, #140]	; 0x8c
   13d30:	adds	r3, r3, #1
   13d34:	adc	r2, r2, #0
   13d38:	str	r3, [r4, #136]	; 0x88
   13d3c:	str	r2, [r4, #140]	; 0x8c
   13d40:	ldr	r4, [pc, #128]	; 13dc8 <free_node_boolean_operator@@Base+0xe0>
   13d44:	ldr	r0, [r5, #8]
   13d48:	bl	13dd0 <free_node@@Base>
   13d4c:	ldr	r0, [r5, #12]
   13d50:	add	r4, pc, r4
   13d54:	ldr	r3, [r4, #144]	; 0x90
   13d58:	ldr	r2, [r4, #148]	; 0x94
   13d5c:	adds	r3, r3, #1
   13d60:	adc	r2, r2, #0
   13d64:	str	r3, [r4, #144]	; 0x90
   13d68:	str	r2, [r4, #148]	; 0x94
   13d6c:	bl	13dd0 <free_node@@Base>
   13d70:	ldr	r3, [r4, #152]	; 0x98
   13d74:	mov	r0, r5
   13d78:	ldr	r2, [r4, #156]	; 0x9c
   13d7c:	ldr	r6, [sp, #8]
   13d80:	adds	r3, r3, #1
   13d84:	ldr	lr, [sp, #12]
   13d88:	adc	r2, r2, #0
   13d8c:	str	r3, [r4, #152]	; 0x98
   13d90:	str	r2, [r4, #156]	; 0x9c
   13d94:	ldrd	r4, [sp]
   13d98:	add	sp, sp, #16
   13d9c:	b	118ec <free@plt>
   13da0:	ldr	r2, [pc, #36]	; 13dcc <free_node_boolean_operator@@Base+0xe4>
   13da4:	add	r2, pc, r2
   13da8:	ldr	r3, [r2, #128]	; 0x80
   13dac:	ldr	r1, [r2, #132]	; 0x84
   13db0:	adds	r3, r3, #1
   13db4:	adc	r1, r1, #0
   13db8:	str	r3, [r2, #128]	; 0x80
   13dbc:	str	r1, [r2, #132]	; 0x84
   13dc0:	b	13d40 <free_node_boolean_operator@@Base+0x58>
   13dc4:			; <UNDEFINED> instruction: 0x000172b8
   13dc8:	andeq	r7, r1, r0, ror r2
   13dcc:	andeq	r7, r1, ip, lsl r2

00013dd0 <free_node@@Base>:
   13dd0:	ldr	ip, [pc, #576]	; 14018 <free_node@@Base+0x248>
   13dd4:	str	r4, [sp, #-8]!
   13dd8:	ldr	r3, [r0]
   13ddc:	str	lr, [sp, #4]
   13de0:	add	ip, pc, ip
   13de4:	cmp	r3, #5
   13de8:	addls	pc, pc, r3, lsl #2
   13dec:	b	13fb8 <free_node@@Base+0x1e8>
   13df0:	b	13e50 <free_node@@Base+0x80>
   13df4:	b	13e98 <free_node@@Base+0xc8>
   13df8:	b	13ee0 <free_node@@Base+0x110>
   13dfc:	b	13f28 <free_node@@Base+0x158>
   13e00:	b	13f70 <free_node@@Base+0x1a0>
   13e04:	b	13e08 <free_node@@Base+0x38>
   13e08:	ldr	r4, [pc, #524]	; 1401c <free_node@@Base+0x24c>
   13e0c:	add	r4, pc, r4
   13e10:	ldr	r3, [r4, #208]	; 0xd0
   13e14:	ldr	r2, [r4, #212]	; 0xd4
   13e18:	adds	r3, r3, #1
   13e1c:	adc	r2, r2, #0
   13e20:	str	r3, [r4, #208]	; 0xd0
   13e24:	str	r2, [r4, #212]	; 0xd4
   13e28:	bl	13ce8 <free_node_boolean_operator@@Base>
   13e2c:	ldr	r3, [r4, #256]	; 0x100
   13e30:	ldr	r2, [r4, #260]	; 0x104
   13e34:	adds	r3, r3, #1
   13e38:	adc	r2, r2, #0
   13e3c:	str	r3, [r4, #256]	; 0x100
   13e40:	str	r2, [r4, #260]	; 0x104
   13e44:	ldr	r4, [sp]
   13e48:	add	sp, sp, #4
   13e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   13e50:	ldr	r4, [pc, #456]	; 14020 <free_node@@Base+0x250>
   13e54:	add	r4, pc, r4
   13e58:	ldr	r3, [r4, #168]	; 0xa8
   13e5c:	ldr	r2, [r4, #172]	; 0xac
   13e60:	adds	r3, r3, #1
   13e64:	adc	r2, r2, #0
   13e68:	str	r3, [r4, #168]	; 0xa8
   13e6c:	str	r2, [r4, #172]	; 0xac
   13e70:	bl	14324 <free_node_id@@Base>
   13e74:	ldr	r3, [r4, #216]	; 0xd8
   13e78:	ldr	r2, [r4, #220]	; 0xdc
   13e7c:	adds	r3, r3, #1
   13e80:	adc	r2, r2, #0
   13e84:	str	r3, [r4, #216]	; 0xd8
   13e88:	str	r2, [r4, #220]	; 0xdc
   13e8c:	ldr	r4, [sp]
   13e90:	add	sp, sp, #4
   13e94:	pop	{pc}		; (ldr pc, [sp], #4)
   13e98:	ldr	r4, [pc, #388]	; 14024 <free_node@@Base+0x254>
   13e9c:	add	r4, pc, r4
   13ea0:	ldr	r3, [r4, #176]	; 0xb0
   13ea4:	ldr	r2, [r4, #180]	; 0xb4
   13ea8:	adds	r3, r3, #1
   13eac:	adc	r2, r2, #0
   13eb0:	str	r3, [r4, #176]	; 0xb0
   13eb4:	str	r2, [r4, #180]	; 0xb4
   13eb8:	bl	14288 <free_node_int@@Base>
   13ebc:	ldr	r3, [r4, #224]	; 0xe0
   13ec0:	ldr	r2, [r4, #228]	; 0xe4
   13ec4:	adds	r3, r3, #1
   13ec8:	adc	r2, r2, #0
   13ecc:	str	r3, [r4, #224]	; 0xe0
   13ed0:	str	r2, [r4, #228]	; 0xe4
   13ed4:	ldr	r4, [sp]
   13ed8:	add	sp, sp, #4
   13edc:	pop	{pc}		; (ldr pc, [sp], #4)
   13ee0:	ldr	r4, [pc, #320]	; 14028 <free_node@@Base+0x258>
   13ee4:	add	r4, pc, r4
   13ee8:	ldr	r3, [r4, #184]	; 0xb8
   13eec:	ldr	r2, [r4, #188]	; 0xbc
   13ef0:	adds	r3, r3, #1
   13ef4:	adc	r2, r2, #0
   13ef8:	str	r3, [r4, #184]	; 0xb8
   13efc:	str	r2, [r4, #188]	; 0xbc
   13f00:	bl	141e4 <free_node_function@@Base>
   13f04:	ldr	r3, [r4, #232]	; 0xe8
   13f08:	ldr	r2, [r4, #236]	; 0xec
   13f0c:	adds	r3, r3, #1
   13f10:	adc	r2, r2, #0
   13f14:	str	r3, [r4, #232]	; 0xe8
   13f18:	str	r2, [r4, #236]	; 0xec
   13f1c:	ldr	r4, [sp]
   13f20:	add	sp, sp, #4
   13f24:	pop	{pc}		; (ldr pc, [sp], #4)
   13f28:	ldr	r4, [pc, #252]	; 1402c <free_node@@Base+0x25c>
   13f2c:	add	r4, pc, r4
   13f30:	ldr	r3, [r4, #192]	; 0xc0
   13f34:	ldr	r2, [r4, #196]	; 0xc4
   13f38:	adds	r3, r3, #1
   13f3c:	adc	r2, r2, #0
   13f40:	str	r3, [r4, #192]	; 0xc0
   13f44:	str	r2, [r4, #196]	; 0xc4
   13f48:	bl	14148 <free_node_return@@Base>
   13f4c:	ldr	r3, [r4, #240]	; 0xf0
   13f50:	ldr	r2, [r4, #244]	; 0xf4
   13f54:	adds	r3, r3, #1
   13f58:	adc	r2, r2, #0
   13f5c:	str	r3, [r4, #240]	; 0xf0
   13f60:	str	r2, [r4, #244]	; 0xf4
   13f64:	ldr	r4, [sp]
   13f68:	add	sp, sp, #4
   13f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   13f70:	ldr	r4, [pc, #184]	; 14030 <free_node@@Base+0x260>
   13f74:	add	r4, pc, r4
   13f78:	ldr	r3, [r4, #200]	; 0xc8
   13f7c:	ldr	r2, [r4, #204]	; 0xcc
   13f80:	adds	r3, r3, #1
   13f84:	adc	r2, r2, #0
   13f88:	str	r3, [r4, #200]	; 0xc8
   13f8c:	str	r2, [r4, #204]	; 0xcc
   13f90:	bl	14040 <free_node_if@@Base>
   13f94:	ldr	r3, [r4, #248]	; 0xf8
   13f98:	ldr	r2, [r4, #252]	; 0xfc
   13f9c:	adds	r3, r3, #1
   13fa0:	adc	r2, r2, #0
   13fa4:	str	r3, [r4, #248]	; 0xf8
   13fa8:	str	r2, [r4, #252]	; 0xfc
   13fac:	ldr	r4, [sp]
   13fb0:	add	sp, sp, #4
   13fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   13fb8:	ldr	r4, [pc, #116]	; 14034 <free_node@@Base+0x264>
   13fbc:	mov	r1, #1
   13fc0:	mov	r2, #31
   13fc4:	ldr	r0, [pc, #108]	; 14038 <free_node@@Base+0x268>
   13fc8:	add	r4, pc, r4
   13fcc:	ldr	r3, [r4, #160]	; 0xa0
   13fd0:	ldr	lr, [r4, #164]	; 0xa4
   13fd4:	adds	r3, r3, r1
   13fd8:	adc	lr, lr, #0
   13fdc:	str	r3, [r4, #160]	; 0xa0
   13fe0:	str	lr, [r4, #164]	; 0xa4
   13fe4:	ldr	r3, [ip, r0]
   13fe8:	ldr	r0, [pc, #76]	; 1403c <free_node@@Base+0x26c>
   13fec:	ldr	r3, [r3]
   13ff0:	add	r0, pc, r0
   13ff4:	bl	11910 <fwrite@plt>
   13ff8:	ldr	r3, [r4, #264]	; 0x108
   13ffc:	mov	r0, #1
   14000:	ldr	r2, [r4, #268]	; 0x10c
   14004:	adds	r3, r3, r0
   14008:	adc	r2, r2, #0
   1400c:	str	r3, [r4, #264]	; 0x108
   14010:	str	r2, [r4, #268]	; 0x10c
   14014:	bl	1197c <exit@plt>
   14018:	andeq	r6, r1, r8, lsl r2
   1401c:			; <UNDEFINED> instruction: 0x000171b4
   14020:	andeq	r7, r1, ip, ror #2
   14024:	andeq	r7, r1, r4, lsr #2
   14028:	ldrdeq	r7, [r1], -ip
   1402c:	muleq	r1, r4, r0
   14030:	andeq	r7, r1, ip, asr #32
   14034:	strdeq	r6, [r1], -r8
   14038:	andeq	r0, r0, r4, lsr #1
   1403c:	andeq	r4, r0, r8, lsl lr

00014040 <free_node_if@@Base>:
   14040:	strd	r4, [sp, #-16]!
   14044:	mov	r5, r0
   14048:	ldr	r0, [r0, #4]
   1404c:	str	r6, [sp, #8]
   14050:	str	lr, [sp, #12]
   14054:	cmp	r0, #0
   14058:	beq	14118 <free_node_if@@Base+0xd8>
   1405c:	ldr	r4, [pc, #216]	; 1413c <free_node_if@@Base+0xfc>
   14060:	add	r4, pc, r4
   14064:	ldr	r3, [r4, #272]	; 0x110
   14068:	ldr	r2, [r4, #276]	; 0x114
   1406c:	adds	r3, r3, #1
   14070:	adc	r2, r2, #0
   14074:	str	r3, [r4, #272]	; 0x110
   14078:	str	r2, [r4, #276]	; 0x114
   1407c:	bl	13dd0 <free_node@@Base>
   14080:	ldr	r3, [r4, #288]	; 0x120
   14084:	ldr	r2, [r4, #292]	; 0x124
   14088:	adds	r3, r3, #1
   1408c:	adc	r2, r2, #0
   14090:	str	r3, [r4, #288]	; 0x120
   14094:	str	r2, [r4, #292]	; 0x124
   14098:	ldr	r4, [pc, #160]	; 14140 <free_node_if@@Base+0x100>
   1409c:	ldr	r0, [r5, #8]
   140a0:	bl	13dd0 <free_node@@Base>
   140a4:	ldr	r0, [r5, #12]
   140a8:	add	r4, pc, r4
   140ac:	ldr	r3, [r4, #296]	; 0x128
   140b0:	ldr	r2, [r4, #300]	; 0x12c
   140b4:	adds	r3, r3, #1
   140b8:	adc	r2, r2, #0
   140bc:	str	r3, [r4, #296]	; 0x128
   140c0:	str	r2, [r4, #300]	; 0x12c
   140c4:	bl	13dd0 <free_node@@Base>
   140c8:	ldr	r3, [r4, #304]	; 0x130
   140cc:	ldr	r2, [r4, #308]	; 0x134
   140d0:	ldr	r0, [r5, #16]
   140d4:	adds	r3, r3, #1
   140d8:	adc	r2, r2, #0
   140dc:	str	r3, [r4, #304]	; 0x130
   140e0:	str	r2, [r4, #308]	; 0x134
   140e4:	bl	13dd0 <free_node@@Base>
   140e8:	ldr	r3, [r4, #312]	; 0x138
   140ec:	mov	r0, r5
   140f0:	ldr	r2, [r4, #316]	; 0x13c
   140f4:	ldr	r6, [sp, #8]
   140f8:	adds	r3, r3, #1
   140fc:	ldr	lr, [sp, #12]
   14100:	adc	r2, r2, #0
   14104:	str	r3, [r4, #312]	; 0x138
   14108:	str	r2, [r4, #316]	; 0x13c
   1410c:	ldrd	r4, [sp]
   14110:	add	sp, sp, #16
   14114:	b	118ec <free@plt>
   14118:	ldr	r3, [pc, #36]	; 14144 <free_node_if@@Base+0x104>
   1411c:	add	r3, pc, r3
   14120:	ldr	r2, [r3, #280]	; 0x118
   14124:	ldr	r1, [r3, #284]	; 0x11c
   14128:	adds	r2, r2, #1
   1412c:	adc	r1, r1, #0
   14130:	str	r2, [r3, #280]	; 0x118
   14134:	str	r1, [r3, #284]	; 0x11c
   14138:	b	14098 <free_node_if@@Base+0x58>
   1413c:	andeq	r6, r1, r0, ror #30
   14140:	andeq	r6, r1, r8, lsl pc
   14144:	andeq	r6, r1, r4, lsr #29

00014148 <free_node_return@@Base>:
   14148:	strd	r4, [sp, #-16]!
   1414c:	mov	r5, r0
   14150:	ldr	r0, [r0, #4]
   14154:	str	r6, [sp, #8]
   14158:	str	lr, [sp, #12]
   1415c:	cmp	r0, #0
   14160:	beq	141b8 <free_node_return@@Base+0x70>
   14164:	ldr	r4, [pc, #112]	; 141dc <free_node_return@@Base+0x94>
   14168:	add	r4, pc, r4
   1416c:	ldr	r3, [r4, #320]	; 0x140
   14170:	ldr	r2, [r4, #324]	; 0x144
   14174:	adds	r3, r3, #1
   14178:	adc	r2, r2, #0
   1417c:	str	r3, [r4, #320]	; 0x140
   14180:	str	r2, [r4, #324]	; 0x144
   14184:	bl	13dd0 <free_node@@Base>
   14188:	ldr	r3, [r4, #336]	; 0x150
   1418c:	ldr	r2, [r4, #340]	; 0x154
   14190:	adds	r3, r3, #1
   14194:	adc	r2, r2, #0
   14198:	str	r3, [r4, #336]	; 0x150
   1419c:	str	r2, [r4, #340]	; 0x154
   141a0:	mov	r0, r5
   141a4:	ldrd	r4, [sp]
   141a8:	ldr	r6, [sp, #8]
   141ac:	ldr	lr, [sp, #12]
   141b0:	add	sp, sp, #16
   141b4:	b	118ec <free@plt>
   141b8:	ldr	r3, [pc, #32]	; 141e0 <free_node_return@@Base+0x98>
   141bc:	add	r3, pc, r3
   141c0:	ldr	r2, [r3, #328]	; 0x148
   141c4:	ldr	r1, [r3, #332]	; 0x14c
   141c8:	adds	r2, r2, #1
   141cc:	adc	r1, r1, #0
   141d0:	str	r2, [r3, #328]	; 0x148
   141d4:	str	r1, [r3, #332]	; 0x14c
   141d8:	b	141a0 <free_node_return@@Base+0x58>
   141dc:	andeq	r6, r1, r8, asr lr
   141e0:	andeq	r6, r1, r4, lsl #28

000141e4 <free_node_function@@Base>:
   141e4:	strd	r4, [sp, #-16]!
   141e8:	mov	r5, r0
   141ec:	ldr	r0, [r0, #4]
   141f0:	str	r6, [sp, #8]
   141f4:	str	lr, [sp, #12]
   141f8:	cmp	r0, #0
   141fc:	beq	1425c <free_node_function@@Base+0x78>
   14200:	ldr	r4, [pc, #120]	; 14280 <free_node_function@@Base+0x9c>
   14204:	add	r4, pc, r4
   14208:	ldr	r3, [r4, #344]	; 0x158
   1420c:	ldr	r2, [r4, #348]	; 0x15c
   14210:	adds	r3, r3, #1
   14214:	adc	r2, r2, #0
   14218:	str	r3, [r4, #344]	; 0x158
   1421c:	str	r2, [r4, #348]	; 0x15c
   14220:	bl	13dd0 <free_node@@Base>
   14224:	ldr	r3, [r4, #360]	; 0x168
   14228:	ldr	r2, [r4, #364]	; 0x16c
   1422c:	adds	r3, r3, #1
   14230:	adc	r2, r2, #0
   14234:	str	r3, [r4, #360]	; 0x168
   14238:	str	r2, [r4, #364]	; 0x16c
   1423c:	ldr	r0, [r5, #8]
   14240:	bl	118ec <free@plt>
   14244:	mov	r0, r5
   14248:	ldrd	r4, [sp]
   1424c:	ldr	r6, [sp, #8]
   14250:	ldr	lr, [sp, #12]
   14254:	add	sp, sp, #16
   14258:	b	118ec <free@plt>
   1425c:	ldr	r3, [pc, #32]	; 14284 <free_node_function@@Base+0xa0>
   14260:	add	r3, pc, r3
   14264:	ldr	r2, [r3, #352]	; 0x160
   14268:	ldr	r1, [r3, #356]	; 0x164
   1426c:	adds	r2, r2, #1
   14270:	adc	r1, r1, #0
   14274:	str	r2, [r3, #352]	; 0x160
   14278:	str	r1, [r3, #356]	; 0x164
   1427c:	b	1423c <free_node_function@@Base+0x58>
   14280:			; <UNDEFINED> instruction: 0x00016dbc
   14284:	andeq	r6, r1, r0, ror #26

00014288 <free_node_int@@Base>:
   14288:	strd	r4, [sp, #-16]!
   1428c:	mov	r5, r0
   14290:	ldr	r0, [r0, #4]
   14294:	str	r6, [sp, #8]
   14298:	str	lr, [sp, #12]
   1429c:	cmp	r0, #0
   142a0:	beq	142f8 <free_node_int@@Base+0x70>
   142a4:	ldr	r4, [pc, #112]	; 1431c <free_node_int@@Base+0x94>
   142a8:	add	r4, pc, r4
   142ac:	ldr	r3, [r4, #368]	; 0x170
   142b0:	ldr	r2, [r4, #372]	; 0x174
   142b4:	adds	r3, r3, #1
   142b8:	adc	r2, r2, #0
   142bc:	str	r3, [r4, #368]	; 0x170
   142c0:	str	r2, [r4, #372]	; 0x174
   142c4:	bl	13dd0 <free_node@@Base>
   142c8:	ldr	r3, [r4, #384]	; 0x180
   142cc:	ldr	r2, [r4, #388]	; 0x184
   142d0:	adds	r3, r3, #1
   142d4:	adc	r2, r2, #0
   142d8:	str	r3, [r4, #384]	; 0x180
   142dc:	str	r2, [r4, #388]	; 0x184
   142e0:	mov	r0, r5
   142e4:	ldrd	r4, [sp]
   142e8:	ldr	r6, [sp, #8]
   142ec:	ldr	lr, [sp, #12]
   142f0:	add	sp, sp, #16
   142f4:	b	118ec <free@plt>
   142f8:	ldr	r3, [pc, #32]	; 14320 <free_node_int@@Base+0x98>
   142fc:	add	r3, pc, r3
   14300:	ldr	r2, [r3, #376]	; 0x178
   14304:	ldr	r1, [r3, #380]	; 0x17c
   14308:	adds	r2, r2, #1
   1430c:	adc	r1, r1, #0
   14310:	str	r2, [r3, #376]	; 0x178
   14314:	str	r1, [r3, #380]	; 0x17c
   14318:	b	142e0 <free_node_int@@Base+0x58>
   1431c:	andeq	r6, r1, r8, lsl sp
   14320:	andeq	r6, r1, r4, asr #25

00014324 <free_node_id@@Base>:
   14324:	strd	r4, [sp, #-16]!
   14328:	mov	r5, r0
   1432c:	ldr	r0, [r0, #4]
   14330:	str	r6, [sp, #8]
   14334:	str	lr, [sp, #12]
   14338:	cmp	r0, #0
   1433c:	beq	14394 <free_node_id@@Base+0x70>
   14340:	ldr	r4, [pc, #112]	; 143b8 <free_node_id@@Base+0x94>
   14344:	add	r4, pc, r4
   14348:	ldr	r3, [r4, #392]	; 0x188
   1434c:	ldr	r2, [r4, #396]	; 0x18c
   14350:	adds	r3, r3, #1
   14354:	adc	r2, r2, #0
   14358:	str	r3, [r4, #392]	; 0x188
   1435c:	str	r2, [r4, #396]	; 0x18c
   14360:	bl	13dd0 <free_node@@Base>
   14364:	ldr	r3, [r4, #408]	; 0x198
   14368:	ldr	r2, [r4, #412]	; 0x19c
   1436c:	adds	r3, r3, #1
   14370:	adc	r2, r2, #0
   14374:	str	r3, [r4, #408]	; 0x198
   14378:	str	r2, [r4, #412]	; 0x19c
   1437c:	mov	r0, r5
   14380:	ldrd	r4, [sp]
   14384:	ldr	r6, [sp, #8]
   14388:	ldr	lr, [sp, #12]
   1438c:	add	sp, sp, #16
   14390:	b	118ec <free@plt>
   14394:	ldr	r3, [pc, #32]	; 143bc <free_node_id@@Base+0x98>
   14398:	add	r3, pc, r3
   1439c:	ldr	r2, [r3, #400]	; 0x190
   143a0:	ldr	r1, [r3, #404]	; 0x194
   143a4:	adds	r2, r2, #1
   143a8:	adc	r1, r1, #0
   143ac:	str	r2, [r3, #400]	; 0x190
   143b0:	str	r1, [r3, #404]	; 0x194
   143b4:	b	1437c <free_node_id@@Base+0x58>
   143b8:	andeq	r6, r1, ip, ror ip
   143bc:	andeq	r6, r1, r8, lsr #24

000143c0 <get_boolean_op_value@@Base>:
   143c0:	strd	r4, [sp, #-16]!
   143c4:	mov	r1, #2
   143c8:	ldr	r5, [r0, #4]
   143cc:	str	r6, [sp, #8]
   143d0:	ldr	r6, [pc, #772]	; 146dc <get_boolean_op_value@@Base+0x31c>
   143d4:	str	lr, [sp, #12]
   143d8:	mov	r0, r5
   143dc:	bl	119f4 <strnlen@plt>
   143e0:	cmp	r0, #2
   143e4:	add	r6, pc, r6
   143e8:	beq	144f0 <get_boolean_op_value@@Base+0x130>
   143ec:	ldrb	r3, [r5]
   143f0:	cmp	r3, #60	; 0x3c
   143f4:	beq	144c8 <get_boolean_op_value@@Base+0x108>
   143f8:	cmp	r3, #62	; 0x3e
   143fc:	beq	144a0 <get_boolean_op_value@@Base+0xe0>
   14400:	cmp	r3, #33	; 0x21
   14404:	beq	14468 <get_boolean_op_value@@Base+0xa8>
   14408:	ldr	r4, [pc, #720]	; 146e0 <get_boolean_op_value@@Base+0x320>
   1440c:	mov	r2, r5
   14410:	ldr	r0, [pc, #716]	; 146e4 <get_boolean_op_value@@Base+0x324>
   14414:	ldr	r1, [pc, #716]	; 146e8 <get_boolean_op_value@@Base+0x328>
   14418:	add	r4, pc, r4
   1441c:	add	r4, r4, #416	; 0x1a0
   14420:	ldr	r3, [r4, #64]	; 0x40
   14424:	ldr	ip, [r4, #68]	; 0x44
   14428:	add	r1, pc, r1
   1442c:	adds	r3, r3, #1
   14430:	adc	ip, ip, #0
   14434:	str	r3, [r4, #64]	; 0x40
   14438:	str	ip, [r4, #68]	; 0x44
   1443c:	ldr	r3, [r6, r0]
   14440:	ldr	r0, [r3]
   14444:	bl	119a0 <fprintf@plt>
   14448:	ldr	r3, [r4, #96]	; 0x60
   1444c:	mov	r0, #1
   14450:	ldr	r2, [r4, #100]	; 0x64
   14454:	adds	r3, r3, r0
   14458:	adc	r2, r2, #0
   1445c:	str	r3, [r4, #96]	; 0x60
   14460:	str	r2, [r4, #100]	; 0x64
   14464:	bl	1197c <exit@plt>
   14468:	ldr	r3, [pc, #636]	; 146ec <get_boolean_op_value@@Base+0x32c>
   1446c:	mov	r4, #8
   14470:	add	r3, pc, r3
   14474:	ldr	r2, [r3, #488]	; 0x1e8
   14478:	ldr	r1, [r3, #492]	; 0x1ec
   1447c:	adds	r2, r2, #1
   14480:	adc	r1, r1, #0
   14484:	str	r2, [r3, #488]	; 0x1e8
   14488:	str	r1, [r3, #492]	; 0x1ec
   1448c:	mov	r0, r4
   14490:	ldrd	r4, [sp]
   14494:	ldr	r6, [sp, #8]
   14498:	add	sp, sp, #12
   1449c:	pop	{pc}		; (ldr pc, [sp], #4)
   144a0:	ldr	r3, [pc, #584]	; 146f0 <get_boolean_op_value@@Base+0x330>
   144a4:	mov	r4, #7
   144a8:	add	r3, pc, r3
   144ac:	ldr	r2, [r3, #504]	; 0x1f8
   144b0:	ldr	r1, [r3, #508]	; 0x1fc
   144b4:	adds	r2, r2, #1
   144b8:	adc	r1, r1, #0
   144bc:	str	r2, [r3, #504]	; 0x1f8
   144c0:	str	r1, [r3, #508]	; 0x1fc
   144c4:	b	1448c <get_boolean_op_value@@Base+0xcc>
   144c8:	ldr	r3, [pc, #548]	; 146f4 <get_boolean_op_value@@Base+0x334>
   144cc:	mov	r4, #6
   144d0:	add	r3, pc, r3
   144d4:	ldr	r2, [r3, #496]	; 0x1f0
   144d8:	ldr	r1, [r3, #500]	; 0x1f4
   144dc:	adds	r2, r2, #1
   144e0:	adc	r1, r1, #0
   144e4:	str	r2, [r3, #496]	; 0x1f0
   144e8:	str	r1, [r3, #500]	; 0x1f4
   144ec:	b	1448c <get_boolean_op_value@@Base+0xcc>
   144f0:	ldr	r1, [pc, #512]	; 146f8 <get_boolean_op_value@@Base+0x338>
   144f4:	mov	r2, r0
   144f8:	mov	r4, r0
   144fc:	mov	r0, r5
   14500:	add	r1, pc, r1
   14504:	bl	11a48 <strncmp@plt>
   14508:	cmp	r0, #0
   1450c:	beq	14640 <get_boolean_op_value@@Base+0x280>
   14510:	ldr	r1, [pc, #484]	; 146fc <get_boolean_op_value@@Base+0x33c>
   14514:	mov	r2, r4
   14518:	mov	r0, r5
   1451c:	add	r1, pc, r1
   14520:	bl	11a48 <strncmp@plt>
   14524:	cmp	r0, #0
   14528:	beq	14618 <get_boolean_op_value@@Base+0x258>
   1452c:	ldr	r1, [pc, #460]	; 14700 <get_boolean_op_value@@Base+0x340>
   14530:	mov	r2, r4
   14534:	mov	r0, r5
   14538:	add	r1, pc, r1
   1453c:	bl	11a48 <strncmp@plt>
   14540:	cmp	r0, #0
   14544:	beq	14668 <get_boolean_op_value@@Base+0x2a8>
   14548:	ldr	r1, [pc, #436]	; 14704 <get_boolean_op_value@@Base+0x344>
   1454c:	mov	r2, r4
   14550:	mov	r0, r5
   14554:	add	r1, pc, r1
   14558:	bl	11a48 <strncmp@plt>
   1455c:	cmp	r0, #0
   14560:	beq	1468c <get_boolean_op_value@@Base+0x2cc>
   14564:	ldr	r1, [pc, #412]	; 14708 <get_boolean_op_value@@Base+0x348>
   14568:	mov	r2, r4
   1456c:	mov	r0, r5
   14570:	add	r1, pc, r1
   14574:	bl	11a48 <strncmp@plt>
   14578:	cmp	r0, #0
   1457c:	beq	146b4 <get_boolean_op_value@@Base+0x2f4>
   14580:	ldr	r3, [pc, #388]	; 1470c <get_boolean_op_value@@Base+0x34c>
   14584:	mov	r2, r4
   14588:	mov	r0, r5
   1458c:	ldr	r1, [pc, #380]	; 14710 <get_boolean_op_value@@Base+0x350>
   14590:	add	r3, pc, r3
   14594:	add	r4, r3, #416	; 0x1a0
   14598:	ldr	r3, [r4, #40]	; 0x28
   1459c:	add	r1, pc, r1
   145a0:	ldr	ip, [r4, #44]	; 0x2c
   145a4:	adds	r3, r3, #1
   145a8:	adc	ip, ip, #0
   145ac:	str	r3, [r4, #40]	; 0x28
   145b0:	str	ip, [r4, #44]	; 0x2c
   145b4:	bl	11a48 <strncmp@plt>
   145b8:	cmp	r0, #0
   145bc:	moveq	r4, #5
   145c0:	beq	1448c <get_boolean_op_value@@Base+0xcc>
   145c4:	ldr	r3, [r4, #48]	; 0x30
   145c8:	mov	r2, r5
   145cc:	ldr	ip, [r4, #52]	; 0x34
   145d0:	ldr	r0, [pc, #268]	; 146e4 <get_boolean_op_value@@Base+0x324>
   145d4:	adds	r3, r3, #1
   145d8:	ldr	r1, [pc, #308]	; 14714 <get_boolean_op_value@@Base+0x354>
   145dc:	adc	ip, ip, #0
   145e0:	str	r3, [r4, #48]	; 0x30
   145e4:	str	ip, [r4, #52]	; 0x34
   145e8:	ldr	r3, [r6, r0]
   145ec:	add	r1, pc, r1
   145f0:	ldr	r0, [r3]
   145f4:	bl	119a0 <fprintf@plt>
   145f8:	ldr	r3, [r4, #56]	; 0x38
   145fc:	mov	r0, #1
   14600:	ldr	r2, [r4, #60]	; 0x3c
   14604:	adds	r3, r3, r0
   14608:	adc	r2, r2, #0
   1460c:	str	r3, [r4, #56]	; 0x38
   14610:	str	r2, [r4, #60]	; 0x3c
   14614:	bl	1197c <exit@plt>
   14618:	ldr	r3, [pc, #248]	; 14718 <get_boolean_op_value@@Base+0x358>
   1461c:	mov	r4, #1
   14620:	add	r3, pc, r3
   14624:	ldr	r2, [r3, #424]	; 0x1a8
   14628:	ldr	r1, [r3, #428]	; 0x1ac
   1462c:	adds	r2, r2, r4
   14630:	adc	r1, r1, #0
   14634:	str	r2, [r3, #424]	; 0x1a8
   14638:	str	r1, [r3, #428]	; 0x1ac
   1463c:	b	1448c <get_boolean_op_value@@Base+0xcc>
   14640:	ldr	r3, [pc, #212]	; 1471c <get_boolean_op_value@@Base+0x35c>
   14644:	mov	r4, r0
   14648:	add	r3, pc, r3
   1464c:	ldr	r2, [r3, #416]	; 0x1a0
   14650:	ldr	r1, [r3, #420]	; 0x1a4
   14654:	adds	r2, r2, #1
   14658:	adc	r1, r1, #0
   1465c:	str	r2, [r3, #416]	; 0x1a0
   14660:	str	r1, [r3, #420]	; 0x1a4
   14664:	b	1448c <get_boolean_op_value@@Base+0xcc>
   14668:	ldr	r3, [pc, #176]	; 14720 <get_boolean_op_value@@Base+0x360>
   1466c:	add	r3, pc, r3
   14670:	ldr	r2, [r3, #432]	; 0x1b0
   14674:	ldr	r1, [r3, #436]	; 0x1b4
   14678:	adds	r2, r2, #1
   1467c:	adc	r1, r1, #0
   14680:	str	r2, [r3, #432]	; 0x1b0
   14684:	str	r1, [r3, #436]	; 0x1b4
   14688:	b	1448c <get_boolean_op_value@@Base+0xcc>
   1468c:	ldr	r3, [pc, #144]	; 14724 <get_boolean_op_value@@Base+0x364>
   14690:	mov	r4, #3
   14694:	add	r3, pc, r3
   14698:	ldr	r2, [r3, #440]	; 0x1b8
   1469c:	ldr	r1, [r3, #444]	; 0x1bc
   146a0:	adds	r2, r2, #1
   146a4:	adc	r1, r1, #0
   146a8:	str	r2, [r3, #440]	; 0x1b8
   146ac:	str	r1, [r3, #444]	; 0x1bc
   146b0:	b	1448c <get_boolean_op_value@@Base+0xcc>
   146b4:	ldr	r3, [pc, #108]	; 14728 <get_boolean_op_value@@Base+0x368>
   146b8:	mov	r4, #4
   146bc:	add	r3, pc, r3
   146c0:	ldr	r2, [r3, #448]	; 0x1c0
   146c4:	ldr	r1, [r3, #452]	; 0x1c4
   146c8:	adds	r2, r2, #1
   146cc:	adc	r1, r1, #0
   146d0:	str	r2, [r3, #448]	; 0x1c0
   146d4:	str	r1, [r3, #452]	; 0x1c4
   146d8:	b	1448c <get_boolean_op_value@@Base+0xcc>
   146dc:	andeq	r5, r1, r4, lsl ip
   146e0:	andeq	r6, r1, r8, lsr #23
   146e4:	andeq	r0, r0, r4, lsr #1
   146e8:	andeq	r4, r0, r8, lsl sl
   146ec:	andeq	r6, r1, r0, asr fp
   146f0:	andeq	r6, r1, r8, lsl fp
   146f4:	strdeq	r6, [r1], -r0
   146f8:	andeq	r4, r0, r8, lsr #18
   146fc:	andeq	r4, r0, r0, lsl r9
   14700:	strdeq	r4, [r0], -r8
   14704:	andeq	r4, r0, r0, ror #17
   14708:	andeq	r4, r0, r8, asr #17
   1470c:	andeq	r6, r1, r0, lsr sl
   14710:	andeq	r4, r0, r0, lsr #17
   14714:	andeq	r4, r0, r4, asr r8
   14718:	andeq	r6, r1, r0, lsr #19
   1471c:	andeq	r6, r1, r8, ror r9
   14720:	andeq	r6, r1, r4, asr r9
   14724:	andeq	r6, r1, ip, lsr #18
   14728:	andeq	r6, r1, r4, lsl #18

0001472c <init_grammar@@Base>:
   1472c:	ldr	r2, [pc, #32]	; 14754 <init_grammar@@Base+0x28>
   14730:	str	r1, [r0]
   14734:	add	r2, pc, r2
   14738:	ldr	r3, [r2]
   1473c:	ldr	r1, [r2, #4]
   14740:	adds	r3, r3, #1
   14744:	adc	r1, r1, #0
   14748:	str	r3, [r2]
   1474c:	str	r1, [r2, #4]
   14750:	bx	lr
   14754:	muleq	r1, r4, sl

00014758 <destroy_grammar@@Base>:
   14758:	ldr	r2, [pc, #28]	; 1477c <destroy_grammar@@Base+0x24>
   1475c:	add	r2, pc, r2
   14760:	ldr	r3, [r2, #8]
   14764:	ldr	r1, [r2, #12]
   14768:	adds	r3, r3, #1
   1476c:	adc	r1, r1, #0
   14770:	str	r3, [r2, #8]
   14774:	str	r1, [r2, #12]
   14778:	bx	lr
   1477c:	andeq	r6, r1, ip, ror #20

00014780 <read_return_expression@@Base>:
   14780:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14784:	mov	r5, r0
   14788:	ldr	r4, [pc, #364]	; 148fc <read_return_expression@@Base+0x17c>
   1478c:	ldr	r0, [r0]
   14790:	add	r4, pc, r4
   14794:	ldr	r3, [r4, #16]
   14798:	ldr	r2, [r4, #20]
   1479c:	strd	r6, [sp, #8]
   147a0:	str	r8, [sp, #16]
   147a4:	adds	r3, r3, #1
   147a8:	str	lr, [sp, #20]
   147ac:	adc	r2, r2, #0
   147b0:	str	r3, [r4, #16]
   147b4:	str	r2, [r4, #20]
   147b8:	bl	129a4 <next@@Base>
   147bc:	ldr	r3, [r0]
   147c0:	cmp	r3, #1
   147c4:	bne	148dc <read_return_expression@@Base+0x15c>
   147c8:	ldr	r3, [r4, #32]
   147cc:	mov	r6, r0
   147d0:	mov	r0, #12
   147d4:	ldr	r2, [r4, #36]	; 0x24
   147d8:	adds	r3, r3, #1
   147dc:	adc	r2, r2, #0
   147e0:	str	r3, [r4, #32]
   147e4:	str	r2, [r4, #36]	; 0x24
   147e8:	bl	1194c <malloc@plt>
   147ec:	ldr	r1, [r6, #4]
   147f0:	mov	r7, r0
   147f4:	bl	13a84 <init_node_int@@Base>
   147f8:	ldr	r3, [r4, #40]	; 0x28
   147fc:	mov	r0, r6
   14800:	ldr	r2, [r4, #44]	; 0x2c
   14804:	adds	r3, r3, #1
   14808:	adc	r2, r2, #0
   1480c:	str	r3, [r4, #40]	; 0x28
   14810:	str	r2, [r4, #44]	; 0x2c
   14814:	bl	124cc <free_token_int_value@@Base>
   14818:	ldr	r3, [r4, #48]	; 0x30
   1481c:	mov	r0, #12
   14820:	ldr	r2, [r4, #52]	; 0x34
   14824:	adds	r3, r3, #1
   14828:	adc	r2, r2, #0
   1482c:	str	r3, [r4, #48]	; 0x30
   14830:	str	r2, [r4, #52]	; 0x34
   14834:	bl	1194c <malloc@plt>
   14838:	mov	r1, r7
   1483c:	mov	r6, r0
   14840:	bl	13b6c <init_node_return@@Base>
   14844:	ldr	r3, [r4, #56]	; 0x38
   14848:	ldr	r2, [r4, #60]	; 0x3c
   1484c:	ldr	r0, [r5]
   14850:	adds	r3, r3, #1
   14854:	adc	r2, r2, #0
   14858:	str	r3, [r4, #56]	; 0x38
   1485c:	str	r2, [r4, #60]	; 0x3c
   14860:	bl	129a4 <next@@Base>
   14864:	ldr	r3, [r0]
   14868:	cmp	r3, #8
   1486c:	bne	148bc <read_return_expression@@Base+0x13c>
   14870:	ldr	r3, [r4, #72]	; 0x48
   14874:	ldr	r2, [r4, #76]	; 0x4c
   14878:	adds	r3, r3, #1
   1487c:	adc	r2, r2, #0
   14880:	str	r3, [r4, #72]	; 0x48
   14884:	str	r2, [r4, #76]	; 0x4c
   14888:	bl	125e4 <free_token_semicolon@@Base>
   1488c:	ldr	r3, [r4, #80]	; 0x50
   14890:	ldr	r2, [r4, #84]	; 0x54
   14894:	adds	r3, r3, #1
   14898:	adc	r2, r2, #0
   1489c:	str	r3, [r4, #80]	; 0x50
   148a0:	str	r2, [r4, #84]	; 0x54
   148a4:	mov	r0, r6
   148a8:	ldrd	r4, [sp]
   148ac:	ldrd	r6, [sp, #8]
   148b0:	ldr	r8, [sp, #16]
   148b4:	add	sp, sp, #20
   148b8:	pop	{pc}		; (ldr pc, [sp], #4)
   148bc:	ldr	r3, [r4, #64]	; 0x40
   148c0:	mov	r6, #0
   148c4:	ldr	r2, [r4, #68]	; 0x44
   148c8:	adds	r3, r3, #1
   148cc:	adc	r2, r2, r6
   148d0:	str	r3, [r4, #64]	; 0x40
   148d4:	str	r2, [r4, #68]	; 0x44
   148d8:	b	148a4 <read_return_expression@@Base+0x124>
   148dc:	ldr	r3, [r4, #24]
   148e0:	mov	r6, #0
   148e4:	ldr	r2, [r4, #28]
   148e8:	adds	r3, r3, #1
   148ec:	adc	r2, r2, r6
   148f0:	str	r3, [r4, #24]
   148f4:	str	r2, [r4, #28]
   148f8:	b	148a4 <read_return_expression@@Base+0x124>
   148fc:	andeq	r6, r1, r8, lsr sl

00014900 <read_boolean_unary_expression@@Base>:
   14900:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14904:	mov	r5, r0
   14908:	mov	r0, #20
   1490c:	ldr	r4, [pc, #484]	; 14af8 <read_boolean_unary_expression@@Base+0x1f8>
   14910:	add	r4, pc, r4
   14914:	ldr	r3, [r4, #88]	; 0x58
   14918:	ldr	r2, [r4, #92]	; 0x5c
   1491c:	strd	r6, [sp, #8]
   14920:	strd	r8, [sp, #16]
   14924:	adds	r3, r3, #1
   14928:	str	sl, [sp, #24]
   1492c:	str	lr, [sp, #28]
   14930:	adc	r2, r2, #0
   14934:	str	r3, [r4, #88]	; 0x58
   14938:	str	r2, [r4, #92]	; 0x5c
   1493c:	bl	1194c <malloc@plt>
   14940:	mov	r6, r0
   14944:	ldr	r0, [r5]
   14948:	bl	129a4 <next@@Base>
   1494c:	ldr	r8, [r0]
   14950:	cmp	r8, #12
   14954:	bne	14a78 <read_boolean_unary_expression@@Base+0x178>
   14958:	ldr	r3, [r4, #104]	; 0x68
   1495c:	mov	r9, r0
   14960:	ldr	r2, [r4, #108]	; 0x6c
   14964:	adds	r3, r3, #1
   14968:	adc	r2, r2, #0
   1496c:	str	r3, [r4, #104]	; 0x68
   14970:	str	r2, [r4, #108]	; 0x6c
   14974:	bl	143c0 <get_boolean_op_value@@Base>
   14978:	ldr	r3, [r4, #120]	; 0x78
   1497c:	mov	r7, r0
   14980:	mov	r0, r9
   14984:	ldr	r2, [r4, #124]	; 0x7c
   14988:	adds	r3, r3, #1
   1498c:	adc	r2, r2, #0
   14990:	str	r3, [r4, #120]	; 0x78
   14994:	str	r2, [r4, #124]	; 0x7c
   14998:	bl	12684 <free_token_boolean_op@@Base>
   1499c:	ldr	r3, [r4, #128]	; 0x80
   149a0:	ldr	r2, [r4, #132]	; 0x84
   149a4:	ldr	r0, [r5]
   149a8:	adds	r3, r3, #1
   149ac:	adc	r2, r2, #0
   149b0:	str	r3, [r4, #128]	; 0x80
   149b4:	str	r2, [r4, #132]	; 0x84
   149b8:	bl	129a4 <next@@Base>
   149bc:	ldr	r3, [r0]
   149c0:	mov	r5, r0
   149c4:	cmp	r3, #1
   149c8:	bne	14ab8 <read_boolean_unary_expression@@Base+0x1b8>
   149cc:	ldr	r3, [r4, #144]	; 0x90
   149d0:	mov	r0, r8
   149d4:	ldr	r2, [r4, #148]	; 0x94
   149d8:	adds	r3, r3, #1
   149dc:	adc	r2, r2, #0
   149e0:	str	r3, [r4, #144]	; 0x90
   149e4:	str	r2, [r4, #148]	; 0x94
   149e8:	bl	1194c <malloc@plt>
   149ec:	ldr	r1, [r5, #4]
   149f0:	mov	r8, r0
   149f4:	bl	13a84 <init_node_int@@Base>
   149f8:	ldr	r3, [r4, #160]	; 0xa0
   149fc:	mov	r0, r5
   14a00:	ldr	r1, [r4, #164]	; 0xa4
   14a04:	adds	r3, r3, #1
   14a08:	adc	r1, r1, #0
   14a0c:	str	r3, [r4, #160]	; 0xa0
   14a10:	str	r1, [r4, #164]	; 0xa4
   14a14:	bl	124cc <free_token_int_value@@Base>
   14a18:	ldr	ip, [r4, #168]	; 0xa8
   14a1c:	mov	r3, #0
   14a20:	mov	r2, r8
   14a24:	mov	r1, r7
   14a28:	mov	r0, r6
   14a2c:	ldr	lr, [r4, #172]	; 0xac
   14a30:	adds	ip, ip, #1
   14a34:	adc	lr, lr, r3
   14a38:	str	ip, [r4, #168]	; 0xa8
   14a3c:	str	lr, [r4, #172]	; 0xac
   14a40:	bl	13c5c <init_node_boolean_operator@@Base>
   14a44:	ldr	r3, [r4, #176]	; 0xb0
   14a48:	ldr	r2, [r4, #180]	; 0xb4
   14a4c:	adds	r3, r3, #1
   14a50:	adc	r2, r2, #0
   14a54:	str	r3, [r4, #176]	; 0xb0
   14a58:	str	r2, [r4, #180]	; 0xb4
   14a5c:	mov	r0, r6
   14a60:	ldrd	r4, [sp]
   14a64:	ldrd	r6, [sp, #8]
   14a68:	ldrd	r8, [sp, #16]
   14a6c:	ldr	sl, [sp, #24]
   14a70:	add	sp, sp, #28
   14a74:	pop	{pc}		; (ldr pc, [sp], #4)
   14a78:	ldr	r3, [r4, #96]	; 0x60
   14a7c:	mov	r0, r6
   14a80:	mov	r6, #0
   14a84:	ldr	r2, [r4, #100]	; 0x64
   14a88:	adds	r3, r3, #1
   14a8c:	adc	r2, r2, r6
   14a90:	str	r3, [r4, #96]	; 0x60
   14a94:	str	r2, [r4, #100]	; 0x64
   14a98:	bl	13ce8 <free_node_boolean_operator@@Base>
   14a9c:	ldr	r3, [r4, #112]	; 0x70
   14aa0:	ldr	r2, [r4, #116]	; 0x74
   14aa4:	adds	r3, r3, #1
   14aa8:	adc	r2, r2, r6
   14aac:	str	r3, [r4, #112]	; 0x70
   14ab0:	str	r2, [r4, #116]	; 0x74
   14ab4:	b	14a5c <read_boolean_unary_expression@@Base+0x15c>
   14ab8:	ldr	r3, [r4, #136]	; 0x88
   14abc:	mov	r0, r6
   14ac0:	mov	r6, #0
   14ac4:	ldr	r2, [r4, #140]	; 0x8c
   14ac8:	adds	r3, r3, #1
   14acc:	adc	r2, r2, r6
   14ad0:	str	r3, [r4, #136]	; 0x88
   14ad4:	str	r2, [r4, #140]	; 0x8c
   14ad8:	bl	13ce8 <free_node_boolean_operator@@Base>
   14adc:	ldr	r3, [r4, #152]	; 0x98
   14ae0:	ldr	r2, [r4, #156]	; 0x9c
   14ae4:	adds	r3, r3, #1
   14ae8:	adc	r2, r2, r6
   14aec:	str	r3, [r4, #152]	; 0x98
   14af0:	str	r2, [r4, #156]	; 0x9c
   14af4:	b	14a5c <read_boolean_unary_expression@@Base+0x15c>
   14af8:			; <UNDEFINED> instruction: 0x000168b8

00014afc <read_boolean_binary_expression@@Base>:
   14afc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14b00:	mov	r5, r0
   14b04:	ldr	r4, [pc, #748]	; 14df8 <read_boolean_binary_expression@@Base+0x2fc>
   14b08:	ldr	r0, [r0]
   14b0c:	add	r4, pc, r4
   14b10:	ldr	r3, [r4, #184]	; 0xb8
   14b14:	ldr	r2, [r4, #188]	; 0xbc
   14b18:	strd	r6, [sp, #8]
   14b1c:	strd	r8, [sp, #16]
   14b20:	adds	r3, r3, #1
   14b24:	str	sl, [sp, #24]
   14b28:	str	lr, [sp, #28]
   14b2c:	adc	r2, r2, #0
   14b30:	str	r3, [r4, #184]	; 0xb8
   14b34:	str	r2, [r4, #188]	; 0xbc
   14b38:	bl	129a4 <next@@Base>
   14b3c:	ldr	r1, [r0]
   14b40:	mov	r6, r0
   14b44:	cmp	r1, #1
   14b48:	beq	14bf0 <read_boolean_binary_expression@@Base+0xf4>
   14b4c:	ldr	r3, [r4, #192]	; 0xc0
   14b50:	ldr	r2, [r4, #196]	; 0xc4
   14b54:	adds	r3, r3, #1
   14b58:	adc	r2, r2, #0
   14b5c:	cmp	r1, #12
   14b60:	str	r3, [r4, #192]	; 0xc0
   14b64:	movne	r5, #0
   14b68:	str	r2, [r4, #196]	; 0xc4
   14b6c:	beq	14b8c <read_boolean_binary_expression@@Base+0x90>
   14b70:	mov	r0, r5
   14b74:	ldrd	r4, [sp]
   14b78:	ldrd	r6, [sp, #8]
   14b7c:	ldrd	r8, [sp, #16]
   14b80:	ldr	sl, [sp, #24]
   14b84:	add	sp, sp, #28
   14b88:	pop	{pc}		; (ldr pc, [sp], #4)
   14b8c:	ldr	r3, [r4, #208]	; 0xd0
   14b90:	mov	r1, r0
   14b94:	ldr	r2, [r4, #212]	; 0xd4
   14b98:	ldr	r0, [r5]
   14b9c:	adds	r3, r3, #1
   14ba0:	adc	r2, r2, #0
   14ba4:	str	r3, [r4, #208]	; 0xd0
   14ba8:	str	r2, [r4, #212]	; 0xd4
   14bac:	bl	127e4 <push_back@@Base>
   14bb0:	ldr	r3, [r4, #216]	; 0xd8
   14bb4:	mov	r0, r5
   14bb8:	ldr	r2, [r4, #220]	; 0xdc
   14bbc:	adds	r3, r3, #1
   14bc0:	adc	r2, r2, #0
   14bc4:	str	r3, [r4, #216]	; 0xd8
   14bc8:	str	r2, [r4, #220]	; 0xdc
   14bcc:	bl	14900 <read_boolean_unary_expression@@Base>
   14bd0:	ldr	r3, [r4, #224]	; 0xe0
   14bd4:	mov	r5, r0
   14bd8:	ldr	r2, [r4, #228]	; 0xe4
   14bdc:	adds	r3, r3, #1
   14be0:	adc	r2, r2, #0
   14be4:	str	r3, [r4, #224]	; 0xe0
   14be8:	str	r2, [r4, #228]	; 0xe4
   14bec:	b	14b70 <read_boolean_binary_expression@@Base+0x74>
   14bf0:	ldr	r3, [r4, #200]	; 0xc8
   14bf4:	mov	r0, #12
   14bf8:	ldr	r2, [r4, #204]	; 0xcc
   14bfc:	adds	r3, r3, #1
   14c00:	adc	r2, r2, #0
   14c04:	str	r3, [r4, #200]	; 0xc8
   14c08:	str	r2, [r4, #204]	; 0xcc
   14c0c:	bl	1194c <malloc@plt>
   14c10:	ldr	r1, [r6, #4]
   14c14:	mov	r7, r0
   14c18:	bl	13a84 <init_node_int@@Base>
   14c1c:	ldr	r3, [r4, #232]	; 0xe8
   14c20:	mov	r0, r6
   14c24:	ldr	r2, [r4, #236]	; 0xec
   14c28:	adds	r3, r3, #1
   14c2c:	adc	r2, r2, #0
   14c30:	str	r3, [r4, #232]	; 0xe8
   14c34:	str	r2, [r4, #236]	; 0xec
   14c38:	bl	124cc <free_token_int_value@@Base>
   14c3c:	ldr	r3, [r4, #240]	; 0xf0
   14c40:	ldr	r2, [r4, #244]	; 0xf4
   14c44:	ldr	r0, [r5]
   14c48:	adds	r3, r3, #1
   14c4c:	adc	r2, r2, #0
   14c50:	str	r3, [r4, #240]	; 0xf0
   14c54:	str	r2, [r4, #244]	; 0xf4
   14c58:	bl	129a4 <next@@Base>
   14c5c:	ldr	r9, [r0]
   14c60:	mov	sl, r0
   14c64:	cmp	r9, #12
   14c68:	bne	14d78 <read_boolean_binary_expression@@Base+0x27c>
   14c6c:	ldr	r3, [r4, #256]	; 0x100
   14c70:	ldr	r1, [r4, #260]	; 0x104
   14c74:	adds	r3, r3, #1
   14c78:	adc	r1, r1, #0
   14c7c:	str	r3, [r4, #256]	; 0x100
   14c80:	str	r1, [r4, #260]	; 0x104
   14c84:	bl	143c0 <get_boolean_op_value@@Base>
   14c88:	ldr	r3, [r4, #272]	; 0x110
   14c8c:	mov	r8, r0
   14c90:	mov	r0, sl
   14c94:	ldr	r1, [r4, #276]	; 0x114
   14c98:	adds	r3, r3, #1
   14c9c:	adc	r1, r1, #0
   14ca0:	str	r3, [r4, #272]	; 0x110
   14ca4:	str	r1, [r4, #276]	; 0x114
   14ca8:	bl	12684 <free_token_boolean_op@@Base>
   14cac:	ldr	r3, [r4, #280]	; 0x118
   14cb0:	ldr	r2, [r4, #284]	; 0x11c
   14cb4:	ldr	r0, [r5]
   14cb8:	adds	r3, r3, #1
   14cbc:	adc	r2, r2, #0
   14cc0:	str	r3, [r4, #280]	; 0x118
   14cc4:	str	r2, [r4, #284]	; 0x11c
   14cc8:	bl	129a4 <next@@Base>
   14ccc:	ldr	r3, [r0]
   14cd0:	mov	sl, r0
   14cd4:	cmp	r3, #1
   14cd8:	bne	14db8 <read_boolean_binary_expression@@Base+0x2bc>
   14cdc:	ldr	r3, [r4, #296]	; 0x128
   14ce0:	mov	r0, r9
   14ce4:	ldr	r1, [r4, #300]	; 0x12c
   14ce8:	adds	r3, r3, #1
   14cec:	adc	r1, r1, #0
   14cf0:	str	r3, [r4, #296]	; 0x128
   14cf4:	str	r1, [r4, #300]	; 0x12c
   14cf8:	bl	1194c <malloc@plt>
   14cfc:	ldr	r1, [sl, #4]
   14d00:	mov	r6, r0
   14d04:	bl	13a84 <init_node_int@@Base>
   14d08:	ldr	r2, [r4, #312]	; 0x138
   14d0c:	mov	r0, sl
   14d10:	ldr	r3, [r4, #316]	; 0x13c
   14d14:	adds	r2, r2, #1
   14d18:	adc	r3, r3, #0
   14d1c:	str	r2, [r4, #312]	; 0x138
   14d20:	str	r3, [r4, #316]	; 0x13c
   14d24:	bl	124cc <free_token_int_value@@Base>
   14d28:	ldr	r2, [r4, #320]	; 0x140
   14d2c:	mov	r0, #20
   14d30:	ldr	r3, [r4, #324]	; 0x144
   14d34:	adds	r2, r2, #1
   14d38:	adc	r3, r3, #0
   14d3c:	str	r2, [r4, #320]	; 0x140
   14d40:	str	r3, [r4, #324]	; 0x144
   14d44:	bl	1194c <malloc@plt>
   14d48:	mov	r3, r6
   14d4c:	mov	r2, r7
   14d50:	mov	r1, r8
   14d54:	mov	r5, r0
   14d58:	bl	13c5c <init_node_boolean_operator@@Base>
   14d5c:	ldr	r3, [r4, #328]	; 0x148
   14d60:	ldr	r2, [r4, #332]	; 0x14c
   14d64:	adds	r3, r3, #1
   14d68:	adc	r2, r2, #0
   14d6c:	str	r3, [r4, #328]	; 0x148
   14d70:	str	r2, [r4, #332]	; 0x14c
   14d74:	b	14b70 <read_boolean_binary_expression@@Base+0x74>
   14d78:	ldr	r3, [r4, #248]	; 0xf8
   14d7c:	mov	r5, #0
   14d80:	mov	r0, r7
   14d84:	ldr	r2, [r4, #252]	; 0xfc
   14d88:	adds	r3, r3, #1
   14d8c:	adc	r2, r2, r5
   14d90:	str	r3, [r4, #248]	; 0xf8
   14d94:	str	r2, [r4, #252]	; 0xfc
   14d98:	bl	13dd0 <free_node@@Base>
   14d9c:	ldr	r3, [r4, #264]	; 0x108
   14da0:	ldr	r2, [r4, #268]	; 0x10c
   14da4:	adds	r3, r3, #1
   14da8:	adc	r2, r2, r5
   14dac:	str	r3, [r4, #264]	; 0x108
   14db0:	str	r2, [r4, #268]	; 0x10c
   14db4:	b	14b70 <read_boolean_binary_expression@@Base+0x74>
   14db8:	ldr	r3, [r4, #288]	; 0x120
   14dbc:	mov	r5, #0
   14dc0:	mov	r0, r7
   14dc4:	ldr	r2, [r4, #292]	; 0x124
   14dc8:	adds	r3, r3, #1
   14dcc:	adc	r2, r2, r5
   14dd0:	str	r3, [r4, #288]	; 0x120
   14dd4:	str	r2, [r4, #292]	; 0x124
   14dd8:	bl	13dd0 <free_node@@Base>
   14ddc:	ldr	r3, [r4, #304]	; 0x130
   14de0:	ldr	r2, [r4, #308]	; 0x134
   14de4:	adds	r3, r3, #1
   14de8:	adc	r2, r2, r5
   14dec:	str	r3, [r4, #304]	; 0x130
   14df0:	str	r2, [r4, #308]	; 0x134
   14df4:	b	14b70 <read_boolean_binary_expression@@Base+0x74>
   14df8:			; <UNDEFINED> instruction: 0x000166bc

00014dfc <read_single_boolean_expression@@Base>:
   14dfc:	cmp	r1, #0
   14e00:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14e04:	strd	r6, [sp, #8]
   14e08:	str	r8, [sp, #16]
   14e0c:	str	lr, [sp, #20]
   14e10:	beq	14ebc <read_single_boolean_expression@@Base+0xc0>
   14e14:	mov	r6, r3
   14e18:	ldr	r3, [r2]
   14e1c:	mov	r5, r2
   14e20:	cmp	r3, #0
   14e24:	beq	14f00 <read_single_boolean_expression@@Base+0x104>
   14e28:	ldr	r4, [pc, #252]	; 14f2c <read_single_boolean_expression@@Base+0x130>
   14e2c:	add	r4, pc, r4
   14e30:	ldr	r3, [r4, #352]	; 0x160
   14e34:	ldr	r2, [r4, #356]	; 0x164
   14e38:	adds	r3, r3, #1
   14e3c:	adc	r2, r2, #0
   14e40:	str	r3, [r4, #352]	; 0x160
   14e44:	str	r2, [r4, #356]	; 0x164
   14e48:	bl	14afc <read_boolean_binary_expression@@Base>
   14e4c:	ldr	r2, [r4, #368]	; 0x170
   14e50:	mov	r8, r0
   14e54:	mov	r0, #20
   14e58:	ldr	ip, [r4, #372]	; 0x174
   14e5c:	adds	r2, r2, #1
   14e60:	adc	ip, ip, #0
   14e64:	str	r2, [r4, #368]	; 0x170
   14e68:	str	ip, [r4, #372]	; 0x174
   14e6c:	bl	1194c <malloc@plt>
   14e70:	mov	r3, r8
   14e74:	mov	r1, r6
   14e78:	mov	r2, #0
   14e7c:	mov	r7, r0
   14e80:	bl	13c5c <init_node_boolean_operator@@Base>
   14e84:	ldr	r3, [r4, #376]	; 0x178
   14e88:	mov	r1, #0
   14e8c:	ldr	r2, [r4, #380]	; 0x17c
   14e90:	str	r1, [r5]
   14e94:	adds	r3, r3, #1
   14e98:	adc	r2, r2, r1
   14e9c:	str	r3, [r4, #376]	; 0x178
   14ea0:	str	r2, [r4, #380]	; 0x17c
   14ea4:	mov	r0, r7
   14ea8:	ldrd	r4, [sp]
   14eac:	ldrd	r6, [sp, #8]
   14eb0:	ldr	r8, [sp, #16]
   14eb4:	add	sp, sp, #20
   14eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ebc:	ldr	r4, [pc, #108]	; 14f30 <read_single_boolean_expression@@Base+0x134>
   14ec0:	add	r4, pc, r4
   14ec4:	ldr	r3, [r4, #336]	; 0x150
   14ec8:	ldr	r2, [r4, #340]	; 0x154
   14ecc:	adds	r3, r3, #1
   14ed0:	adc	r2, r2, #0
   14ed4:	str	r3, [r4, #336]	; 0x150
   14ed8:	str	r2, [r4, #340]	; 0x154
   14edc:	bl	14afc <read_boolean_binary_expression@@Base>
   14ee0:	ldr	r3, [r4, #344]	; 0x158
   14ee4:	mov	r7, r0
   14ee8:	ldr	r2, [r4, #348]	; 0x15c
   14eec:	adds	r3, r3, #1
   14ef0:	adc	r2, r2, #0
   14ef4:	str	r3, [r4, #344]	; 0x158
   14ef8:	str	r2, [r4, #348]	; 0x15c
   14efc:	b	14ea4 <read_single_boolean_expression@@Base+0xa8>
   14f00:	ldr	r2, [pc, #44]	; 14f34 <read_single_boolean_expression@@Base+0x138>
   14f04:	ldr	r3, [r3, #4]
   14f08:	add	r2, pc, r2
   14f0c:	add	r3, r2, #336	; 0x150
   14f10:	ldr	r2, [r3, #24]
   14f14:	ldr	r1, [r3, #28]
   14f18:	adds	r2, r2, #1
   14f1c:	adc	r1, r1, #0
   14f20:	str	r2, [r3, #24]
   14f24:	str	r1, [r3, #28]
   14f28:	udf	#0
   14f2c:	muleq	r1, ip, r3
   14f30:	andeq	r6, r1, r8, lsl #6
   14f34:	andeq	r6, r1, r0, asr #5

00014f38 <read_boolean_expression@@Base>:
   14f38:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14f3c:	ldr	r4, [pc, #648]	; 151cc <read_boolean_expression@@Base+0x294>
   14f40:	ldr	r3, [pc, #648]	; 151d0 <read_boolean_expression@@Base+0x298>
   14f44:	add	r4, pc, r4
   14f48:	ldr	r2, [r4, #396]	; 0x18c
   14f4c:	add	r3, pc, r3
   14f50:	strd	r6, [sp, #8]
   14f54:	mov	r7, #0
   14f58:	strd	r8, [sp, #16]
   14f5c:	mov	r6, r0
   14f60:	strd	sl, [sp, #24]
   14f64:	str	lr, [sp, #32]
   14f68:	sub	sp, sp, #20
   14f6c:	ldr	r0, [r0]
   14f70:	str	r3, [sp, #4]
   14f74:	ldr	r3, [r4, #392]	; 0x188
   14f78:	str	r7, [sp, #12]
   14f7c:	adds	r3, r3, #1
   14f80:	adc	r2, r2, r7
   14f84:	str	r3, [r4, #392]	; 0x188
   14f88:	str	r2, [r4, #396]	; 0x18c
   14f8c:	bl	129a4 <next@@Base>
   14f90:	ldr	r2, [r4, #400]	; 0x190
   14f94:	ldr	r1, [r4, #404]	; 0x194
   14f98:	ldr	r3, [r0]
   14f9c:	adds	r2, r2, #1
   14fa0:	adc	r1, r1, r7
   14fa4:	str	r2, [r4, #400]	; 0x190
   14fa8:	cmp	r3, #4
   14fac:	str	r1, [r4, #404]	; 0x194
   14fb0:	beq	15170 <read_boolean_expression@@Base+0x238>
   14fb4:	ldr	r5, [pc, #536]	; 151d4 <read_boolean_expression@@Base+0x29c>
   14fb8:	add	r9, sp, #12
   14fbc:	ldr	r4, [pc, #532]	; 151d8 <read_boolean_expression@@Base+0x2a0>
   14fc0:	ldr	sl, [pc, #532]	; 151dc <read_boolean_expression@@Base+0x2a4>
   14fc4:	add	r5, pc, r5
   14fc8:	add	r5, r5, #400	; 0x190
   14fcc:	add	r4, pc, r4
   14fd0:	add	r4, r4, #400	; 0x190
   14fd4:	add	sl, pc, sl
   14fd8:	b	15030 <read_boolean_expression@@Base+0xf8>
   14fdc:	ldr	r2, [sl, #432]	; 0x1b0
   14fe0:	ldr	r1, [sl, #436]	; 0x1b4
   14fe4:	adds	r2, r2, #1
   14fe8:	adc	r1, r1, #0
   14fec:	str	r2, [sl, #432]	; 0x1b0
   14ff0:	str	r1, [sl, #436]	; 0x1b4
   14ff4:	bl	143c0 <get_boolean_op_value@@Base>
   14ff8:	ldr	r2, [sl, #456]	; 0x1c8
   14ffc:	mov	r8, r0
   15000:	mov	r0, #1
   15004:	ldr	r1, [sl, #460]	; 0x1cc
   15008:	str	r0, [sp, #12]
   1500c:	adds	r2, r2, r0
   15010:	adc	r1, r1, #0
   15014:	str	r2, [sl, #456]	; 0x1c8
   15018:	str	r1, [sl, #460]	; 0x1cc
   1501c:	ldr	r0, [r6]
   15020:	bl	129a4 <next@@Base>
   15024:	ldr	r3, [r0]
   15028:	cmp	r3, #4
   1502c:	beq	15170 <read_boolean_expression@@Base+0x238>
   15030:	cmp	r3, #3
   15034:	beq	150b4 <read_boolean_expression@@Base+0x17c>
   15038:	cmp	r3, #12
   1503c:	beq	14fdc <read_boolean_expression@@Base+0xa4>
   15040:	cmp	r3, #1
   15044:	beq	15100 <read_boolean_expression@@Base+0x1c8>
   15048:	ldr	r4, [pc, #400]	; 151e0 <read_boolean_expression@@Base+0x2a8>
   1504c:	mov	r1, #1
   15050:	mov	r2, #33	; 0x21
   15054:	ldr	r0, [pc, #392]	; 151e4 <read_boolean_expression@@Base+0x2ac>
   15058:	add	r4, pc, r4
   1505c:	add	r4, r4, #400	; 0x190
   15060:	ldr	r3, [r4, #8]
   15064:	ldr	ip, [r4, #12]
   15068:	adds	r3, r3, r1
   1506c:	str	r3, [r4, #8]
   15070:	mov	r3, r0
   15074:	adc	ip, ip, #0
   15078:	ldr	r0, [sp, #4]
   1507c:	str	ip, [r4, #12]
   15080:	ldr	r3, [r0, r3]
   15084:	ldr	r0, [pc, #348]	; 151e8 <read_boolean_expression@@Base+0x2b0>
   15088:	ldr	r3, [r3]
   1508c:	add	r0, pc, r0
   15090:	bl	11910 <fwrite@plt>
   15094:	ldr	r3, [r4, #72]	; 0x48
   15098:	mov	r0, #1
   1509c:	ldr	r2, [r4, #76]	; 0x4c
   150a0:	adds	r3, r3, r0
   150a4:	adc	r2, r2, #0
   150a8:	str	r3, [r4, #72]	; 0x48
   150ac:	str	r2, [r4, #76]	; 0x4c
   150b0:	bl	1197c <exit@plt>
   150b4:	ldr	ip, [r5, #24]
   150b8:	mov	r1, r7
   150bc:	mov	r3, r8
   150c0:	mov	r2, r9
   150c4:	mov	r0, r6
   150c8:	ldr	lr, [r5, #28]
   150cc:	adds	ip, ip, #1
   150d0:	adc	lr, lr, #0
   150d4:	str	ip, [r5, #24]
   150d8:	str	lr, [r5, #28]
   150dc:	bl	14dfc <read_single_boolean_expression@@Base>
   150e0:	ldr	r3, [r5, #64]	; 0x40
   150e4:	mov	r7, r0
   150e8:	ldr	r2, [r5, #68]	; 0x44
   150ec:	adds	r3, r3, #1
   150f0:	adc	r2, r2, #0
   150f4:	str	r3, [r5, #64]	; 0x40
   150f8:	str	r2, [r5, #68]	; 0x44
   150fc:	b	1501c <read_boolean_expression@@Base+0xe4>
   15100:	ldr	r3, [r4, #16]
   15104:	mov	r1, r0
   15108:	ldr	r2, [r4, #20]
   1510c:	ldr	r0, [r6]
   15110:	adds	r3, r3, #1
   15114:	adc	r2, r2, #0
   15118:	str	r3, [r4, #16]
   1511c:	str	r2, [r4, #20]
   15120:	bl	127e4 <push_back@@Base>
   15124:	ldr	ip, [r4, #40]	; 0x28
   15128:	mov	r1, r7
   1512c:	mov	r3, r8
   15130:	mov	r2, r9
   15134:	mov	r0, r6
   15138:	ldr	lr, [r4, #44]	; 0x2c
   1513c:	adds	ip, ip, #1
   15140:	adc	lr, lr, #0
   15144:	str	ip, [r4, #40]	; 0x28
   15148:	str	lr, [r4, #44]	; 0x2c
   1514c:	bl	14dfc <read_single_boolean_expression@@Base>
   15150:	ldr	r3, [r4, #48]	; 0x30
   15154:	mov	r7, r0
   15158:	ldr	r2, [r4, #52]	; 0x34
   1515c:	adds	r3, r3, #1
   15160:	adc	r2, r2, #0
   15164:	str	r3, [r4, #48]	; 0x30
   15168:	str	r2, [r4, #52]	; 0x34
   1516c:	b	1501c <read_boolean_expression@@Base+0xe4>
   15170:	ldr	r4, [pc, #116]	; 151ec <read_boolean_expression@@Base+0x2b4>
   15174:	add	r4, pc, r4
   15178:	ldr	r3, [r4, #480]	; 0x1e0
   1517c:	ldr	r2, [r4, #484]	; 0x1e4
   15180:	adds	r3, r3, #1
   15184:	adc	r2, r2, #0
   15188:	str	r3, [r4, #480]	; 0x1e0
   1518c:	str	r2, [r4, #484]	; 0x1e4
   15190:	bl	12544 <free_token_cpar@@Base>
   15194:	ldr	r3, [r4, #488]	; 0x1e8
   15198:	mov	r0, r7
   1519c:	ldr	r2, [r4, #492]	; 0x1ec
   151a0:	adds	r3, r3, #1
   151a4:	adc	r2, r2, #0
   151a8:	str	r3, [r4, #488]	; 0x1e8
   151ac:	str	r2, [r4, #492]	; 0x1ec
   151b0:	add	sp, sp, #20
   151b4:	ldrd	r4, [sp]
   151b8:	ldrd	r6, [sp, #8]
   151bc:	ldrd	r8, [sp, #16]
   151c0:	ldrd	sl, [sp, #24]
   151c4:	add	sp, sp, #32
   151c8:	pop	{pc}		; (ldr pc, [sp], #4)
   151cc:	andeq	r6, r1, r4, lsl #5
   151d0:	andeq	r5, r1, ip, lsr #1
   151d4:	andeq	r6, r1, r4, lsl #4
   151d8:	strdeq	r6, [r1], -ip
   151dc:	strdeq	r6, [r1], -r4
   151e0:	andeq	r6, r1, r0, ror r1
   151e4:	andeq	r0, r0, r4, lsr #1
   151e8:	andeq	r3, r0, r4, asr lr
   151ec:	andeq	r6, r1, r4, asr r0

000151f0 <read_if_statement@@Base>:
   151f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   151f4:	mov	r5, r0
   151f8:	ldr	r4, [pc, #476]	; 153dc <read_if_statement@@Base+0x1ec>
   151fc:	ldr	r0, [r0]
   15200:	add	r4, pc, r4
   15204:	add	r4, r4, #496	; 0x1f0
   15208:	ldr	r3, [r4]
   1520c:	ldr	r2, [r4, #4]
   15210:	strd	r6, [sp, #8]
   15214:	str	r8, [sp, #16]
   15218:	adds	r3, r3, #1
   1521c:	str	lr, [sp, #20]
   15220:	adc	r2, r2, #0
   15224:	str	r3, [r4]
   15228:	str	r2, [r4, #4]
   1522c:	bl	129a4 <next@@Base>
   15230:	ldr	r3, [r0]
   15234:	cmp	r3, #3
   15238:	bne	15360 <read_if_statement@@Base+0x170>
   1523c:	ldr	r3, [r4, #16]
   15240:	ldr	r2, [r4, #20]
   15244:	adds	r3, r3, #1
   15248:	adc	r2, r2, #0
   1524c:	str	r3, [r4, #16]
   15250:	str	r2, [r4, #20]
   15254:	bl	1251c <free_token_opar@@Base>
   15258:	ldr	r3, [r4, #24]
   1525c:	mov	r0, r5
   15260:	ldr	r2, [r4, #28]
   15264:	adds	r3, r3, #1
   15268:	adc	r2, r2, #0
   1526c:	str	r3, [r4, #24]
   15270:	str	r2, [r4, #28]
   15274:	bl	14f38 <read_boolean_expression@@Base>
   15278:	ldr	r3, [r4, #32]
   1527c:	mov	r6, r0
   15280:	mov	r0, r5
   15284:	ldr	r2, [r4, #36]	; 0x24
   15288:	adds	r3, r3, #1
   1528c:	adc	r2, r2, #0
   15290:	str	r3, [r4, #32]
   15294:	str	r2, [r4, #36]	; 0x24
   15298:	bl	153e4 <read_body@@Base>
   1529c:	ldr	r3, [r4, #40]	; 0x28
   152a0:	mov	r7, r0
   152a4:	ldr	r2, [r4, #44]	; 0x2c
   152a8:	ldr	r0, [r5]
   152ac:	adds	r3, r3, #1
   152b0:	adc	r2, r2, #0
   152b4:	str	r3, [r4, #40]	; 0x28
   152b8:	str	r2, [r4, #44]	; 0x2c
   152bc:	bl	129a4 <next@@Base>
   152c0:	ldr	r3, [r0]
   152c4:	mov	r1, r0
   152c8:	cmp	r3, #11
   152cc:	beq	15380 <read_if_statement@@Base+0x190>
   152d0:	ldr	r3, [r4, #56]	; 0x38
   152d4:	mov	r8, #0
   152d8:	ldr	r2, [r4, #60]	; 0x3c
   152dc:	ldr	r0, [r5]
   152e0:	adds	r3, r3, #1
   152e4:	adc	r2, r2, r8
   152e8:	str	r3, [r4, #56]	; 0x38
   152ec:	str	r2, [r4, #60]	; 0x3c
   152f0:	bl	127e4 <push_back@@Base>
   152f4:	ldr	r3, [r4, #80]	; 0x50
   152f8:	ldr	r2, [r4, #84]	; 0x54
   152fc:	adds	r3, r3, #1
   15300:	adc	r2, r2, r8
   15304:	str	r3, [r4, #80]	; 0x50
   15308:	str	r2, [r4, #84]	; 0x54
   1530c:	mov	r0, #20
   15310:	bl	1194c <malloc@plt>
   15314:	mov	r3, r8
   15318:	mov	r2, r7
   1531c:	mov	r1, r6
   15320:	mov	r5, r0
   15324:	bl	13bd8 <init_node_if@@Base>
   15328:	ldr	r3, [pc, #176]	; 153e0 <read_if_statement@@Base+0x1f0>
   1532c:	add	r3, pc, r3
   15330:	ldr	r2, [r3, #584]	; 0x248
   15334:	ldr	r1, [r3, #588]	; 0x24c
   15338:	adds	r2, r2, #1
   1533c:	adc	r1, r1, #0
   15340:	str	r2, [r3, #584]	; 0x248
   15344:	str	r1, [r3, #588]	; 0x24c
   15348:	mov	r0, r5
   1534c:	ldrd	r4, [sp]
   15350:	ldrd	r6, [sp, #8]
   15354:	ldr	r8, [sp, #16]
   15358:	add	sp, sp, #20
   1535c:	pop	{pc}		; (ldr pc, [sp], #4)
   15360:	ldr	r3, [r4, #8]
   15364:	mov	r5, #0
   15368:	ldr	r2, [r4, #12]
   1536c:	adds	r3, r3, #1
   15370:	adc	r2, r2, r5
   15374:	str	r3, [r4, #8]
   15378:	str	r2, [r4, #12]
   1537c:	b	15348 <read_if_statement@@Base+0x158>
   15380:	ldr	r3, [r4, #48]	; 0x30
   15384:	ldr	r2, [r4, #52]	; 0x34
   15388:	adds	r3, r3, #1
   1538c:	adc	r2, r2, #0
   15390:	str	r3, [r4, #48]	; 0x30
   15394:	str	r2, [r4, #52]	; 0x34
   15398:	bl	1265c <free_token_else@@Base>
   1539c:	ldr	r3, [r4, #64]	; 0x40
   153a0:	mov	r0, r5
   153a4:	ldr	r2, [r4, #68]	; 0x44
   153a8:	adds	r3, r3, #1
   153ac:	adc	r2, r2, #0
   153b0:	str	r3, [r4, #64]	; 0x40
   153b4:	str	r2, [r4, #68]	; 0x44
   153b8:	bl	153e4 <read_body@@Base>
   153bc:	ldr	r3, [r4, #72]	; 0x48
   153c0:	mov	r8, r0
   153c4:	ldr	r2, [r4, #76]	; 0x4c
   153c8:	adds	r3, r3, #1
   153cc:	adc	r2, r2, #0
   153d0:	str	r3, [r4, #72]	; 0x48
   153d4:	str	r2, [r4, #76]	; 0x4c
   153d8:	b	1530c <read_if_statement@@Base+0x11c>
   153dc:	andeq	r5, r1, r8, asr #31
   153e0:	muleq	r1, ip, lr

000153e4 <read_body@@Base>:
   153e4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   153e8:	ldr	r4, [pc, #696]	; 156a8 <read_body@@Base+0x2c4>
   153ec:	add	r4, pc, r4
   153f0:	add	r4, r4, #592	; 0x250
   153f4:	ldr	r3, [r4]
   153f8:	ldr	r2, [r4, #4]
   153fc:	strd	r6, [sp, #8]
   15400:	mov	r6, r0
   15404:	ldr	r0, [r0]
   15408:	adds	r3, r3, #1
   1540c:	strd	r8, [sp, #16]
   15410:	str	sl, [sp, #24]
   15414:	adc	r2, r2, #0
   15418:	str	lr, [sp, #28]
   1541c:	str	r3, [r4]
   15420:	str	r2, [r4, #4]
   15424:	bl	129a4 <next@@Base>
   15428:	ldr	r3, [r0]
   1542c:	cmp	r3, #5
   15430:	bne	15680 <read_body@@Base+0x29c>
   15434:	ldr	r3, [r4, #16]
   15438:	ldr	r2, [r4, #20]
   1543c:	adds	r3, r3, #1
   15440:	adc	r2, r2, #0
   15444:	str	r3, [r4, #16]
   15448:	str	r2, [r4, #20]
   1544c:	bl	1256c <free_token_obra@@Base>
   15450:	ldr	r3, [r4, #24]
   15454:	ldr	r2, [r4, #28]
   15458:	ldr	r0, [r6]
   1545c:	adds	r3, r3, #1
   15460:	adc	r2, r2, #0
   15464:	str	r3, [r4, #24]
   15468:	str	r2, [r4, #28]
   1546c:	bl	129a4 <next@@Base>
   15470:	ldr	r2, [r4, #32]
   15474:	mov	r1, r0
   15478:	ldr	r3, [r0]
   1547c:	ldr	r0, [r4, #36]	; 0x24
   15480:	adds	r2, r2, #1
   15484:	str	r2, [r4, #32]
   15488:	adc	r0, r0, #0
   1548c:	cmp	r3, #6
   15490:	str	r0, [r4, #36]	; 0x24
   15494:	beq	156a0 <read_body@@Base+0x2bc>
   15498:	ldr	r5, [pc, #524]	; 156ac <read_body@@Base+0x2c8>
   1549c:	mov	r9, #0
   154a0:	mov	r7, r9
   154a4:	ldr	r4, [pc, #516]	; 156b0 <read_body@@Base+0x2cc>
   154a8:	ldr	r8, [pc, #516]	; 156b4 <read_body@@Base+0x2d0>
   154ac:	add	r5, pc, r5
   154b0:	add	r5, r5, #592	; 0x250
   154b4:	add	r4, pc, r4
   154b8:	add	r4, r4, #592	; 0x250
   154bc:	add	r8, pc, r8
   154c0:	add	r8, r8, #592	; 0x250
   154c4:	cmp	r3, #7
   154c8:	beq	15534 <read_body@@Base+0x150>
   154cc:	cmp	r3, #10
   154d0:	mov	r0, r1
   154d4:	beq	155fc <read_body@@Base+0x218>
   154d8:	ldr	r4, [pc, #472]	; 156b8 <read_body@@Base+0x2d4>
   154dc:	ldr	r0, [r6]
   154e0:	add	r4, pc, r4
   154e4:	ldr	r3, [r4, #632]	; 0x278
   154e8:	ldr	r2, [r4, #636]	; 0x27c
   154ec:	adds	r3, r3, #1
   154f0:	adc	r2, r2, #0
   154f4:	str	r3, [r4, #632]	; 0x278
   154f8:	str	r2, [r4, #636]	; 0x27c
   154fc:	bl	127e4 <push_back@@Base>
   15500:	ldr	r3, [r4, #688]	; 0x2b0
   15504:	ldr	r2, [r4, #692]	; 0x2b4
   15508:	adds	r3, r3, #1
   1550c:	adc	r2, r2, #0
   15510:	str	r3, [r4, #688]	; 0x2b0
   15514:	str	r2, [r4, #692]	; 0x2b4
   15518:	mov	r0, r7
   1551c:	ldrd	r4, [sp]
   15520:	ldrd	r6, [sp, #8]
   15524:	ldrd	r8, [sp, #16]
   15528:	ldr	sl, [sp, #24]
   1552c:	add	sp, sp, #28
   15530:	pop	{pc}		; (ldr pc, [sp], #4)
   15534:	ldr	r3, [r5, #48]	; 0x30
   15538:	mov	r0, r1
   1553c:	ldr	r2, [r5, #52]	; 0x34
   15540:	adds	r3, r3, #1
   15544:	adc	r2, r2, #0
   15548:	str	r3, [r5, #48]	; 0x30
   1554c:	str	r2, [r5, #52]	; 0x34
   15550:	bl	125bc <free_token_return@@Base>
   15554:	ldr	r3, [r5, #64]	; 0x40
   15558:	mov	r0, r6
   1555c:	ldr	r2, [r5, #68]	; 0x44
   15560:	adds	r3, r3, #1
   15564:	adc	r2, r2, #0
   15568:	str	r3, [r5, #64]	; 0x40
   1556c:	str	r2, [r5, #68]	; 0x44
   15570:	bl	14780 <read_return_expression@@Base>
   15574:	ldr	r3, [r5, #72]	; 0x48
   15578:	mov	r2, r0
   1557c:	ldr	r1, [r5, #76]	; 0x4c
   15580:	adds	r3, r3, #1
   15584:	adc	r1, r1, #0
   15588:	cmp	r7, #0
   1558c:	str	r3, [r5, #72]	; 0x48
   15590:	strne	r2, [r9, #4]
   15594:	str	r1, [r5, #76]	; 0x4c
   15598:	beq	15660 <read_body@@Base+0x27c>
   1559c:	ldr	r0, [r6]
   155a0:	mov	r9, r2
   155a4:	bl	129a4 <next@@Base>
   155a8:	ldr	r3, [r0]
   155ac:	mov	r1, r0
   155b0:	cmp	r3, #6
   155b4:	bne	154c4 <read_body@@Base+0xe0>
   155b8:	ldr	r4, [pc, #252]	; 156bc <read_body@@Base+0x2d8>
   155bc:	mov	r0, r1
   155c0:	add	r4, pc, r4
   155c4:	ldr	r3, [r4, #704]	; 0x2c0
   155c8:	ldr	r2, [r4, #708]	; 0x2c4
   155cc:	adds	r3, r3, #1
   155d0:	adc	r2, r2, #0
   155d4:	str	r3, [r4, #704]	; 0x2c0
   155d8:	str	r2, [r4, #708]	; 0x2c4
   155dc:	bl	12594 <free_token_cbra@@Base>
   155e0:	ldr	r3, [r4, #712]	; 0x2c8
   155e4:	ldr	r2, [r4, #716]	; 0x2cc
   155e8:	adds	r3, r3, #1
   155ec:	adc	r2, r2, #0
   155f0:	str	r3, [r4, #712]	; 0x2c8
   155f4:	str	r2, [r4, #716]	; 0x2cc
   155f8:	b	15518 <read_body@@Base+0x134>
   155fc:	ldr	r3, [r4, #56]	; 0x38
   15600:	ldr	r2, [r4, #60]	; 0x3c
   15604:	adds	r3, r3, #1
   15608:	adc	r2, r2, #0
   1560c:	str	r3, [r4, #56]	; 0x38
   15610:	str	r2, [r4, #60]	; 0x3c
   15614:	bl	12634 <free_token_if@@Base>
   15618:	ldr	r3, [r4, #80]	; 0x50
   1561c:	mov	r0, r6
   15620:	ldr	r2, [r4, #84]	; 0x54
   15624:	adds	r3, r3, #1
   15628:	adc	r2, r2, #0
   1562c:	str	r3, [r4, #80]	; 0x50
   15630:	str	r2, [r4, #84]	; 0x54
   15634:	bl	151f0 <read_if_statement@@Base>
   15638:	ldr	r3, [r4, #88]	; 0x58
   1563c:	mov	r2, r0
   15640:	ldr	r1, [r4, #92]	; 0x5c
   15644:	adds	r3, r3, #1
   15648:	adc	r1, r1, #0
   1564c:	cmp	r7, #0
   15650:	str	r3, [r4, #88]	; 0x58
   15654:	strne	r2, [r9, #4]
   15658:	str	r1, [r4, #92]	; 0x5c
   1565c:	bne	1559c <read_body@@Base+0x1b8>
   15660:	ldr	r3, [r8, #104]	; 0x68
   15664:	mov	r7, r2
   15668:	ldr	r1, [r8, #108]	; 0x6c
   1566c:	adds	r3, r3, #1
   15670:	adc	r1, r1, #0
   15674:	str	r3, [r8, #104]	; 0x68
   15678:	str	r1, [r8, #108]	; 0x6c
   1567c:	b	1559c <read_body@@Base+0x1b8>
   15680:	ldr	r3, [r4, #8]
   15684:	mov	r7, #0
   15688:	ldr	r2, [r4, #12]
   1568c:	adds	r3, r3, #1
   15690:	adc	r2, r2, r7
   15694:	str	r3, [r4, #8]
   15698:	str	r2, [r4, #12]
   1569c:	b	15518 <read_body@@Base+0x134>
   156a0:	mov	r7, #0
   156a4:	b	155b8 <read_body@@Base+0x1d4>
   156a8:	ldrdeq	r5, [r1], -ip
   156ac:	andeq	r5, r1, ip, lsl sp
   156b0:	andeq	r5, r1, r4, lsl sp
   156b4:	andeq	r5, r1, ip, lsl #26
   156b8:	andeq	r5, r1, r8, ror #25
   156bc:	andeq	r5, r1, r8, lsl #24

000156c0 <read_function_ast_node@@Base>:
   156c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   156c4:	ldr	r4, [pc, #564]	; 15900 <read_function_ast_node@@Base+0x240>
   156c8:	add	r4, pc, r4
   156cc:	add	r4, r4, #720	; 0x2d0
   156d0:	ldr	r3, [r4]
   156d4:	ldr	r2, [r4, #4]
   156d8:	strd	r6, [sp, #8]
   156dc:	mov	r6, r0
   156e0:	ldr	r0, [r0]
   156e4:	adds	r3, r3, #1
   156e8:	str	r8, [sp, #16]
   156ec:	str	lr, [sp, #20]
   156f0:	adc	r2, r2, #0
   156f4:	str	r3, [r4]
   156f8:	str	r2, [r4, #4]
   156fc:	bl	129a4 <next@@Base>
   15700:	ldr	r5, [r0]
   15704:	cmp	r5, #0
   15708:	bne	158a8 <read_function_ast_node@@Base+0x1e8>
   1570c:	ldr	r3, [r4, #16]
   15710:	ldr	r2, [r4, #20]
   15714:	adds	r3, r3, #1
   15718:	adc	r2, r2, #0
   1571c:	str	r3, [r4, #16]
   15720:	str	r2, [r4, #20]
   15724:	bl	124a4 <free_token_int_type@@Base>
   15728:	ldr	r3, [r4, #24]
   1572c:	ldr	r2, [r4, #28]
   15730:	ldr	r0, [r6]
   15734:	adds	r3, r3, #1
   15738:	adc	r2, r2, #0
   1573c:	str	r3, [r4, #24]
   15740:	str	r2, [r4, #28]
   15744:	bl	129a4 <next@@Base>
   15748:	ldr	r3, [r0]
   1574c:	mov	r7, r0
   15750:	cmp	r3, #2
   15754:	bne	15878 <read_function_ast_node@@Base+0x1b8>
   15758:	ldr	r3, [r4, #40]	; 0x28
   1575c:	ldr	r2, [r4, #44]	; 0x2c
   15760:	ldr	r0, [r6]
   15764:	adds	r3, r3, #1
   15768:	adc	r2, r2, #0
   1576c:	str	r3, [r4, #40]	; 0x28
   15770:	str	r2, [r4, #44]	; 0x2c
   15774:	bl	129a4 <next@@Base>
   15778:	ldr	r3, [r0]
   1577c:	cmp	r3, #3
   15780:	bne	158e4 <read_function_ast_node@@Base+0x224>
   15784:	ldr	r3, [r4, #56]	; 0x38
   15788:	ldr	r2, [r4, #60]	; 0x3c
   1578c:	adds	r3, r3, #1
   15790:	adc	r2, r2, #0
   15794:	str	r3, [r4, #56]	; 0x38
   15798:	str	r2, [r4, #60]	; 0x3c
   1579c:	bl	1251c <free_token_opar@@Base>
   157a0:	ldr	r3, [r4, #64]	; 0x40
   157a4:	ldr	r2, [r4, #68]	; 0x44
   157a8:	ldr	r0, [r6]
   157ac:	adds	r3, r3, #1
   157b0:	adc	r2, r2, #0
   157b4:	str	r3, [r4, #64]	; 0x40
   157b8:	str	r2, [r4, #68]	; 0x44
   157bc:	bl	129a4 <next@@Base>
   157c0:	ldr	r3, [r0]
   157c4:	cmp	r3, #4
   157c8:	bne	158c8 <read_function_ast_node@@Base+0x208>
   157cc:	ldr	r3, [r4, #80]	; 0x50
   157d0:	ldr	r2, [r4, #84]	; 0x54
   157d4:	adds	r3, r3, #1
   157d8:	adc	r2, r2, #0
   157dc:	str	r3, [r4, #80]	; 0x50
   157e0:	str	r2, [r4, #84]	; 0x54
   157e4:	bl	12544 <free_token_cpar@@Base>
   157e8:	ldr	r3, [r4, #88]	; 0x58
   157ec:	mov	r0, r6
   157f0:	ldr	r2, [r4, #92]	; 0x5c
   157f4:	adds	r3, r3, #1
   157f8:	adc	r2, r2, #0
   157fc:	str	r3, [r4, #88]	; 0x58
   15800:	str	r2, [r4, #92]	; 0x5c
   15804:	bl	153e4 <read_body@@Base>
   15808:	ldr	r3, [r4, #96]	; 0x60
   1580c:	mov	r6, r0
   15810:	mov	r0, #16
   15814:	ldr	r1, [r4, #100]	; 0x64
   15818:	adds	r3, r3, #1
   1581c:	adc	r1, r1, #0
   15820:	str	r3, [r4, #96]	; 0x60
   15824:	str	r1, [r4, #100]	; 0x64
   15828:	bl	1194c <malloc@plt>
   1582c:	mov	r2, r6
   15830:	ldr	r1, [r7, #4]
   15834:	mov	r5, r0
   15838:	bl	13af0 <init_node_function@@Base>
   1583c:	ldr	r3, [r4, #104]	; 0x68
   15840:	mov	r0, r7
   15844:	ldr	r2, [r4, #108]	; 0x6c
   15848:	adds	r3, r3, #1
   1584c:	adc	r2, r2, #0
   15850:	str	r3, [r4, #104]	; 0x68
   15854:	str	r2, [r4, #108]	; 0x6c
   15858:	bl	124f4 <free_token_function@@Base>
   1585c:	ldr	r3, [r4, #112]	; 0x70
   15860:	ldr	r2, [r4, #116]	; 0x74
   15864:	adds	r3, r3, #1
   15868:	adc	r2, r2, #0
   1586c:	str	r3, [r4, #112]	; 0x70
   15870:	str	r2, [r4, #116]	; 0x74
   15874:	b	15890 <read_function_ast_node@@Base+0x1d0>
   15878:	ldr	r3, [r4, #32]
   1587c:	ldr	r2, [r4, #36]	; 0x24
   15880:	adds	r3, r3, #1
   15884:	adc	r2, r2, #0
   15888:	str	r3, [r4, #32]
   1588c:	str	r2, [r4, #36]	; 0x24
   15890:	mov	r0, r5
   15894:	ldrd	r4, [sp]
   15898:	ldrd	r6, [sp, #8]
   1589c:	ldr	r8, [sp, #16]
   158a0:	add	sp, sp, #20
   158a4:	pop	{pc}		; (ldr pc, [sp], #4)
   158a8:	ldr	r3, [r4, #8]
   158ac:	mov	r5, #0
   158b0:	ldr	r2, [r4, #12]
   158b4:	adds	r3, r3, #1
   158b8:	adc	r2, r2, r5
   158bc:	str	r3, [r4, #8]
   158c0:	str	r2, [r4, #12]
   158c4:	b	15890 <read_function_ast_node@@Base+0x1d0>
   158c8:	ldr	r3, [r4, #72]	; 0x48
   158cc:	ldr	r2, [r4, #76]	; 0x4c
   158d0:	adds	r3, r3, #1
   158d4:	adc	r2, r2, #0
   158d8:	str	r3, [r4, #72]	; 0x48
   158dc:	str	r2, [r4, #76]	; 0x4c
   158e0:	b	15890 <read_function_ast_node@@Base+0x1d0>
   158e4:	ldr	r3, [r4, #48]	; 0x30
   158e8:	ldr	r2, [r4, #52]	; 0x34
   158ec:	adds	r3, r3, #1
   158f0:	adc	r2, r2, #0
   158f4:	str	r3, [r4, #48]	; 0x30
   158f8:	str	r2, [r4, #52]	; 0x34
   158fc:	b	15890 <read_function_ast_node@@Base+0x1d0>
   15900:	andeq	r5, r1, r0, lsl #22

00015904 <build_ast@@Base>:
   15904:	str	r4, [sp, #-8]!
   15908:	ldr	r4, [pc, #68]	; 15954 <build_ast@@Base+0x50>
   1590c:	add	r4, pc, r4
   15910:	ldr	r3, [r4, #840]	; 0x348
   15914:	ldr	r2, [r4, #844]	; 0x34c
   15918:	str	lr, [sp, #4]
   1591c:	adds	r3, r3, #1
   15920:	adc	r2, r2, #0
   15924:	str	r3, [r4, #840]	; 0x348
   15928:	str	r2, [r4, #844]	; 0x34c
   1592c:	bl	156c0 <read_function_ast_node@@Base>
   15930:	ldr	r3, [r4, #848]	; 0x350
   15934:	ldr	r2, [r4, #852]	; 0x354
   15938:	adds	r3, r3, #1
   1593c:	adc	r2, r2, #0
   15940:	str	r3, [r4, #848]	; 0x350
   15944:	str	r2, [r4, #852]	; 0x354
   15948:	ldr	r4, [sp]
   1594c:	add	sp, sp, #4
   15950:	pop	{pc}		; (ldr pc, [sp], #4)
   15954:			; <UNDEFINED> instruction: 0x000158bc

00015958 <init_generator@@Base>:
   15958:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1595c:	mov	r5, r0
   15960:	mov	r0, r2
   15964:	ldr	r4, [pc, #112]	; 159dc <init_generator@@Base+0x84>
   15968:	add	r4, pc, r4
   1596c:	ldr	r3, [r4]
   15970:	ldr	r2, [r4, #4]
   15974:	strd	r6, [sp, #8]
   15978:	mov	r6, #0
   1597c:	mov	r7, #0
   15980:	str	r8, [sp, #16]
   15984:	str	lr, [sp, #20]
   15988:	adds	r3, r3, #1
   1598c:	str	r1, [r5]
   15990:	ldr	r1, [pc, #72]	; 159e0 <init_generator@@Base+0x88>
   15994:	adc	r2, r2, #0
   15998:	str	r3, [r4]
   1599c:	str	r2, [r4, #4]
   159a0:	add	r1, pc, r1
   159a4:	bl	118e0 <fopen@plt>
   159a8:	ldr	r3, [r4, #8]
   159ac:	ldr	r2, [r4, #12]
   159b0:	ldr	r8, [sp, #16]
   159b4:	adds	r3, r3, #1
   159b8:	str	r0, [r5, #4]
   159bc:	strd	r6, [r5, #8]
   159c0:	adc	r2, r2, #0
   159c4:	str	r3, [r4, #8]
   159c8:	ldrd	r6, [sp, #8]
   159cc:	str	r2, [r4, #12]
   159d0:	ldrd	r4, [sp]
   159d4:	add	sp, sp, #20
   159d8:	pop	{pc}		; (ldr pc, [sp], #4)
   159dc:			; <UNDEFINED> instruction: 0x00015bb8
   159e0:	ldrdeq	r3, [r0], -r0

000159e4 <destroy_generator@@Base>:
   159e4:	str	r4, [sp, #-8]!
   159e8:	ldr	r4, [pc, #72]	; 15a38 <destroy_generator@@Base+0x54>
   159ec:	ldr	r0, [r0, #4]
   159f0:	add	r4, pc, r4
   159f4:	ldr	r3, [r4, #16]
   159f8:	ldr	r2, [r4, #20]
   159fc:	str	lr, [sp, #4]
   15a00:	adds	r3, r3, #1
   15a04:	adc	r2, r2, #0
   15a08:	str	r3, [r4, #16]
   15a0c:	str	r2, [r4, #20]
   15a10:	bl	119e8 <fclose@plt>
   15a14:	ldr	r3, [r4, #24]
   15a18:	ldr	r2, [r4, #28]
   15a1c:	adds	r3, r3, #1
   15a20:	adc	r2, r2, #0
   15a24:	str	r3, [r4, #24]
   15a28:	str	r2, [r4, #28]
   15a2c:	ldr	r4, [sp]
   15a30:	add	sp, sp, #4
   15a34:	pop	{pc}		; (ldr pc, [sp], #4)
   15a38:	andeq	r5, r1, r0, lsr fp

00015a3c <__generate_code_for_int@@Base>:
   15a3c:	str	r4, [sp, #-8]!
   15a40:	ldr	r4, [pc, #84]	; 15a9c <__generate_code_for_int@@Base+0x60>
   15a44:	ldr	r2, [r1, #8]
   15a48:	ldr	r1, [pc, #80]	; 15aa0 <__generate_code_for_int@@Base+0x64>
   15a4c:	add	r4, pc, r4
   15a50:	ldr	r3, [r4, #32]
   15a54:	ldr	ip, [r4, #36]	; 0x24
   15a58:	add	r1, pc, r1
   15a5c:	ldr	r0, [r0, #4]
   15a60:	adds	r3, r3, #1
   15a64:	str	lr, [sp, #4]
   15a68:	adc	ip, ip, #0
   15a6c:	str	r3, [r4, #32]
   15a70:	str	ip, [r4, #36]	; 0x24
   15a74:	bl	119a0 <fprintf@plt>
   15a78:	ldr	r3, [r4, #40]	; 0x28
   15a7c:	ldr	r2, [r4, #44]	; 0x2c
   15a80:	adds	r3, r3, #1
   15a84:	adc	r2, r2, #0
   15a88:	str	r3, [r4, #40]	; 0x28
   15a8c:	str	r2, [r4, #44]	; 0x2c
   15a90:	ldr	r4, [sp]
   15a94:	add	sp, sp, #4
   15a98:	pop	{pc}		; (ldr pc, [sp], #4)
   15a9c:	ldrdeq	r5, [r1], -r4
   15aa0:	andeq	r3, r0, ip, lsl r5

00015aa4 <__generate_code_for_return@@Base>:
   15aa4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15aa8:	mov	r5, r0
   15aac:	mov	r2, #9
   15ab0:	ldr	r4, [pc, #296]	; 15be0 <__generate_code_for_return@@Base+0x13c>
   15ab4:	ldr	r0, [pc, #296]	; 15be4 <__generate_code_for_return@@Base+0x140>
   15ab8:	add	r4, pc, r4
   15abc:	ldr	r3, [r4, #48]	; 0x30
   15ac0:	strd	r6, [sp, #8]
   15ac4:	add	r0, pc, r0
   15ac8:	str	lr, [sp, #20]
   15acc:	ldr	lr, [r4, #52]	; 0x34
   15ad0:	str	r8, [sp, #16]
   15ad4:	ldr	r6, [r1, #8]
   15ad8:	mov	r1, #1
   15adc:	adds	ip, r3, r1
   15ae0:	ldr	r3, [r5, #4]
   15ae4:	adc	lr, lr, #0
   15ae8:	str	ip, [r4, #48]	; 0x30
   15aec:	str	lr, [r4, #52]	; 0x34
   15af0:	bl	11910 <fwrite@plt>
   15af4:	ldr	r7, [r6]
   15af8:	ldr	r3, [pc, #232]	; 15be8 <__generate_code_for_return@@Base+0x144>
   15afc:	cmp	r7, #1
   15b00:	add	r3, pc, r3
   15b04:	bne	15b88 <__generate_code_for_return@@Base+0xe4>
   15b08:	ldr	r3, [r4, #64]	; 0x40
   15b0c:	mov	r1, r6
   15b10:	mov	r0, r5
   15b14:	ldr	r2, [r4, #68]	; 0x44
   15b18:	adds	r3, r3, #1
   15b1c:	adc	r2, r2, #0
   15b20:	str	r3, [r4, #64]	; 0x40
   15b24:	str	r2, [r4, #68]	; 0x44
   15b28:	bl	15a3c <__generate_code_for_int@@Base>
   15b2c:	ldr	r0, [r4, #72]	; 0x48
   15b30:	mov	r1, r7
   15b34:	mov	r2, #8
   15b38:	ldr	ip, [r4, #76]	; 0x4c
   15b3c:	ldr	r3, [r5, #4]
   15b40:	adds	r0, r0, #1
   15b44:	str	r0, [r4, #72]	; 0x48
   15b48:	adc	ip, ip, #0
   15b4c:	ldr	r0, [pc, #152]	; 15bec <__generate_code_for_return@@Base+0x148>
   15b50:	str	ip, [r4, #76]	; 0x4c
   15b54:	add	r0, pc, r0
   15b58:	bl	11910 <fwrite@plt>
   15b5c:	ldr	r3, [r4, #80]	; 0x50
   15b60:	ldr	r2, [r4, #84]	; 0x54
   15b64:	ldrd	r6, [sp, #8]
   15b68:	adds	r3, r3, #1
   15b6c:	ldr	r8, [sp, #16]
   15b70:	adc	r2, r2, #0
   15b74:	str	r3, [r4, #80]	; 0x50
   15b78:	str	r2, [r4, #84]	; 0x54
   15b7c:	ldrd	r4, [sp]
   15b80:	add	sp, sp, #20
   15b84:	pop	{pc}		; (ldr pc, [sp], #4)
   15b88:	ldr	r0, [r4, #56]	; 0x38
   15b8c:	mov	r1, #1
   15b90:	mov	r2, #37	; 0x25
   15b94:	ldr	lr, [r4, #60]	; 0x3c
   15b98:	ldr	ip, [pc, #80]	; 15bf0 <__generate_code_for_return@@Base+0x14c>
   15b9c:	adds	r0, r0, r1
   15ba0:	adc	lr, lr, #0
   15ba4:	str	r0, [r4, #56]	; 0x38
   15ba8:	ldr	r0, [pc, #68]	; 15bf4 <__generate_code_for_return@@Base+0x150>
   15bac:	str	lr, [r4, #60]	; 0x3c
   15bb0:	ldr	r3, [r3, ip]
   15bb4:	add	r0, pc, r0
   15bb8:	ldr	r3, [r3]
   15bbc:	bl	11910 <fwrite@plt>
   15bc0:	ldr	r3, [r4, #88]	; 0x58
   15bc4:	mov	r0, #1
   15bc8:	ldr	r2, [r4, #92]	; 0x5c
   15bcc:	adds	r3, r3, r0
   15bd0:	adc	r2, r2, #0
   15bd4:	str	r3, [r4, #88]	; 0x58
   15bd8:	str	r2, [r4, #92]	; 0x5c
   15bdc:	bl	1197c <exit@plt>
   15be0:	andeq	r5, r1, r8, ror #20
   15be4:			; <UNDEFINED> instruction: 0x000034b4
   15be8:	strdeq	r4, [r1], -r8
   15bec:	andeq	r3, r0, r0, lsr r4
   15bf0:	andeq	r0, r0, r4, lsr #1
   15bf4:	ldrdeq	r3, [r0], -ip

00015bf8 <__generate_code_for_binary_boolean_expression@@Base>:
   15bf8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15bfc:	mov	r5, r0
   15c00:	ldr	r4, [pc, #1036]	; 16014 <__generate_code_for_binary_boolean_expression@@Base+0x41c>
   15c04:	ldr	r0, [pc, #1036]	; 16018 <__generate_code_for_binary_boolean_expression@@Base+0x420>
   15c08:	add	r4, pc, r4
   15c0c:	ldr	ip, [r4, #96]	; 0x60
   15c10:	add	r0, pc, r0
   15c14:	strd	r6, [sp, #8]
   15c18:	mov	r6, r2
   15c1c:	str	lr, [sp, #28]
   15c20:	mov	r2, #9
   15c24:	mov	r7, r3
   15c28:	ldr	lr, [r4, #100]	; 0x64
   15c2c:	strd	r8, [sp, #16]
   15c30:	mov	r8, r1
   15c34:	mov	r1, #1
   15c38:	adds	ip, ip, r1
   15c3c:	ldr	r3, [r5, #4]
   15c40:	str	sl, [sp, #24]
   15c44:	str	ip, [r4, #96]	; 0x60
   15c48:	adc	lr, lr, #0
   15c4c:	ldr	r9, [r8, #8]
   15c50:	str	lr, [r4, #100]	; 0x64
   15c54:	ldr	sl, [r8, #12]
   15c58:	bl	11910 <fwrite@plt>
   15c5c:	ldr	r3, [r4, #104]	; 0x68
   15c60:	mov	r1, r9
   15c64:	mov	r0, r5
   15c68:	ldr	r2, [r4, #108]	; 0x6c
   15c6c:	ldr	r9, [pc, #936]	; 1601c <__generate_code_for_binary_boolean_expression@@Base+0x424>
   15c70:	adds	r3, r3, #1
   15c74:	adc	r2, r2, #0
   15c78:	str	r3, [r4, #104]	; 0x68
   15c7c:	str	r2, [r4, #108]	; 0x6c
   15c80:	add	r9, pc, r9
   15c84:	bl	15a3c <__generate_code_for_int@@Base>
   15c88:	ldr	r3, [r4, #112]	; 0x70
   15c8c:	mov	r0, #10
   15c90:	ldr	r2, [r4, #116]	; 0x74
   15c94:	ldr	r1, [r5, #4]
   15c98:	adds	r3, r3, #1
   15c9c:	adc	r2, r2, #0
   15ca0:	str	r3, [r4, #112]	; 0x70
   15ca4:	str	r2, [r4, #116]	; 0x74
   15ca8:	bl	11a18 <fputc@plt>
   15cac:	ldr	r3, [r4, #120]	; 0x78
   15cb0:	mov	r1, #1
   15cb4:	mov	r2, #9
   15cb8:	ldr	ip, [r4, #124]	; 0x7c
   15cbc:	ldr	r0, [pc, #860]	; 16020 <__generate_code_for_binary_boolean_expression@@Base+0x428>
   15cc0:	adds	r3, r3, r1
   15cc4:	adc	ip, ip, #0
   15cc8:	str	r3, [r4, #120]	; 0x78
   15ccc:	ldr	r3, [r5, #4]
   15cd0:	add	r0, pc, r0
   15cd4:	str	ip, [r4, #124]	; 0x7c
   15cd8:	bl	11910 <fwrite@plt>
   15cdc:	ldr	r3, [r4, #128]	; 0x80
   15ce0:	mov	r1, sl
   15ce4:	mov	r0, r5
   15ce8:	ldr	r2, [r4, #132]	; 0x84
   15cec:	adds	r3, r3, #1
   15cf0:	adc	r2, r2, #0
   15cf4:	str	r3, [r4, #128]	; 0x80
   15cf8:	str	r2, [r4, #132]	; 0x84
   15cfc:	bl	15a3c <__generate_code_for_int@@Base>
   15d00:	ldr	r3, [r4, #136]	; 0x88
   15d04:	mov	r0, #10
   15d08:	ldr	r2, [r4, #140]	; 0x8c
   15d0c:	ldr	r1, [r5, #4]
   15d10:	adds	r3, r3, #1
   15d14:	adc	r2, r2, #0
   15d18:	str	r3, [r4, #136]	; 0x88
   15d1c:	str	r2, [r4, #140]	; 0x8c
   15d20:	bl	11a18 <fputc@plt>
   15d24:	ldr	r3, [r4, #144]	; 0x90
   15d28:	mov	r1, #1
   15d2c:	mov	r2, #12
   15d30:	ldr	lr, [r4, #148]	; 0x94
   15d34:	ldr	r0, [pc, #744]	; 16024 <__generate_code_for_binary_boolean_expression@@Base+0x42c>
   15d38:	adds	ip, r3, r1
   15d3c:	ldr	r3, [r5, #4]
   15d40:	adc	lr, lr, #0
   15d44:	str	ip, [r4, #144]	; 0x90
   15d48:	add	r0, pc, r0
   15d4c:	str	lr, [r4, #148]	; 0x94
   15d50:	bl	11910 <fwrite@plt>
   15d54:	ldr	r3, [r8, #16]
   15d58:	cmp	r3, #7
   15d5c:	addls	pc, pc, r3, lsl #2
   15d60:	b	15fb4 <__generate_code_for_binary_boolean_expression@@Base+0x3bc>
   15d64:	b	15dec <__generate_code_for_binary_boolean_expression@@Base+0x1f4>
   15d68:	b	15e40 <__generate_code_for_binary_boolean_expression@@Base+0x248>
   15d6c:	b	15e94 <__generate_code_for_binary_boolean_expression@@Base+0x29c>
   15d70:	b	15ee8 <__generate_code_for_binary_boolean_expression@@Base+0x2f0>
   15d74:	b	15f3c <__generate_code_for_binary_boolean_expression@@Base+0x344>
   15d78:	b	15f3c <__generate_code_for_binary_boolean_expression@@Base+0x344>
   15d7c:	b	15d84 <__generate_code_for_binary_boolean_expression@@Base+0x18c>
   15d80:	b	15f60 <__generate_code_for_binary_boolean_expression@@Base+0x368>
   15d84:	ldr	r4, [pc, #668]	; 16028 <__generate_code_for_binary_boolean_expression@@Base+0x430>
   15d88:	mov	r2, r6
   15d8c:	mov	r3, r7
   15d90:	ldr	r1, [pc, #660]	; 1602c <__generate_code_for_binary_boolean_expression@@Base+0x434>
   15d94:	ldr	r0, [r5, #4]
   15d98:	add	r4, pc, r4
   15d9c:	ldr	ip, [r4, #208]	; 0xd0
   15da0:	add	r1, pc, r1
   15da4:	ldr	lr, [r4, #212]	; 0xd4
   15da8:	adds	ip, ip, #1
   15dac:	adc	lr, lr, #0
   15db0:	str	ip, [r4, #208]	; 0xd0
   15db4:	str	lr, [r4, #212]	; 0xd4
   15db8:	bl	119a0 <fprintf@plt>
   15dbc:	ldr	r3, [r4, #248]	; 0xf8
   15dc0:	ldr	r2, [r4, #252]	; 0xfc
   15dc4:	adds	r3, r3, #1
   15dc8:	adc	r2, r2, #0
   15dcc:	str	r3, [r4, #248]	; 0xf8
   15dd0:	str	r2, [r4, #252]	; 0xfc
   15dd4:	ldrd	r4, [sp]
   15dd8:	ldrd	r6, [sp, #8]
   15ddc:	ldrd	r8, [sp, #16]
   15de0:	ldr	sl, [sp, #24]
   15de4:	add	sp, sp, #28
   15de8:	pop	{pc}		; (ldr pc, [sp], #4)
   15dec:	ldr	r4, [pc, #572]	; 16030 <__generate_code_for_binary_boolean_expression@@Base+0x438>
   15df0:	mov	r2, r6
   15df4:	mov	r3, r7
   15df8:	ldr	r1, [pc, #564]	; 16034 <__generate_code_for_binary_boolean_expression@@Base+0x43c>
   15dfc:	ldr	r0, [r5, #4]
   15e00:	add	r4, pc, r4
   15e04:	ldr	ip, [r4, #160]	; 0xa0
   15e08:	add	r1, pc, r1
   15e0c:	ldr	lr, [r4, #164]	; 0xa4
   15e10:	adds	ip, ip, #1
   15e14:	adc	lr, lr, #0
   15e18:	str	ip, [r4, #160]	; 0xa0
   15e1c:	str	lr, [r4, #164]	; 0xa4
   15e20:	bl	119a0 <fprintf@plt>
   15e24:	ldr	r3, [r4, #216]	; 0xd8
   15e28:	ldr	r2, [r4, #220]	; 0xdc
   15e2c:	adds	r3, r3, #1
   15e30:	adc	r2, r2, #0
   15e34:	str	r3, [r4, #216]	; 0xd8
   15e38:	str	r2, [r4, #220]	; 0xdc
   15e3c:	b	15dd4 <__generate_code_for_binary_boolean_expression@@Base+0x1dc>
   15e40:	ldr	r4, [pc, #496]	; 16038 <__generate_code_for_binary_boolean_expression@@Base+0x440>
   15e44:	mov	r2, r6
   15e48:	mov	r3, r7
   15e4c:	ldr	r1, [pc, #488]	; 1603c <__generate_code_for_binary_boolean_expression@@Base+0x444>
   15e50:	ldr	r0, [r5, #4]
   15e54:	add	r4, pc, r4
   15e58:	ldr	ip, [r4, #168]	; 0xa8
   15e5c:	add	r1, pc, r1
   15e60:	ldr	lr, [r4, #172]	; 0xac
   15e64:	adds	ip, ip, #1
   15e68:	adc	lr, lr, #0
   15e6c:	str	ip, [r4, #168]	; 0xa8
   15e70:	str	lr, [r4, #172]	; 0xac
   15e74:	bl	119a0 <fprintf@plt>
   15e78:	ldr	r3, [r4, #224]	; 0xe0
   15e7c:	ldr	r2, [r4, #228]	; 0xe4
   15e80:	adds	r3, r3, #1
   15e84:	adc	r2, r2, #0
   15e88:	str	r3, [r4, #224]	; 0xe0
   15e8c:	str	r2, [r4, #228]	; 0xe4
   15e90:	b	15dd4 <__generate_code_for_binary_boolean_expression@@Base+0x1dc>
   15e94:	ldr	r4, [pc, #420]	; 16040 <__generate_code_for_binary_boolean_expression@@Base+0x448>
   15e98:	mov	r2, r6
   15e9c:	mov	r3, r7
   15ea0:	ldr	r1, [pc, #412]	; 16044 <__generate_code_for_binary_boolean_expression@@Base+0x44c>
   15ea4:	ldr	r0, [r5, #4]
   15ea8:	add	r4, pc, r4
   15eac:	ldr	ip, [r4, #176]	; 0xb0
   15eb0:	add	r1, pc, r1
   15eb4:	ldr	lr, [r4, #180]	; 0xb4
   15eb8:	adds	ip, ip, #1
   15ebc:	adc	lr, lr, #0
   15ec0:	str	ip, [r4, #176]	; 0xb0
   15ec4:	str	lr, [r4, #180]	; 0xb4
   15ec8:	bl	119a0 <fprintf@plt>
   15ecc:	ldr	r3, [r4, #232]	; 0xe8
   15ed0:	ldr	r2, [r4, #236]	; 0xec
   15ed4:	adds	r3, r3, #1
   15ed8:	adc	r2, r2, #0
   15edc:	str	r3, [r4, #232]	; 0xe8
   15ee0:	str	r2, [r4, #236]	; 0xec
   15ee4:	b	15dd4 <__generate_code_for_binary_boolean_expression@@Base+0x1dc>
   15ee8:	ldr	r4, [pc, #344]	; 16048 <__generate_code_for_binary_boolean_expression@@Base+0x450>
   15eec:	mov	r2, r6
   15ef0:	mov	r3, r7
   15ef4:	ldr	r1, [pc, #336]	; 1604c <__generate_code_for_binary_boolean_expression@@Base+0x454>
   15ef8:	ldr	r0, [r5, #4]
   15efc:	add	r4, pc, r4
   15f00:	ldr	ip, [r4, #184]	; 0xb8
   15f04:	add	r1, pc, r1
   15f08:	ldr	lr, [r4, #188]	; 0xbc
   15f0c:	adds	ip, ip, #1
   15f10:	adc	lr, lr, #0
   15f14:	str	ip, [r4, #184]	; 0xb8
   15f18:	str	lr, [r4, #188]	; 0xbc
   15f1c:	bl	119a0 <fprintf@plt>
   15f20:	ldr	r3, [r4, #240]	; 0xf0
   15f24:	ldr	r2, [r4, #244]	; 0xf4
   15f28:	adds	r3, r3, #1
   15f2c:	adc	r2, r2, #0
   15f30:	str	r3, [r4, #240]	; 0xf0
   15f34:	str	r2, [r4, #244]	; 0xf4
   15f38:	b	15dd4 <__generate_code_for_binary_boolean_expression@@Base+0x1dc>
   15f3c:	ldr	r2, [pc, #268]	; 16050 <__generate_code_for_binary_boolean_expression@@Base+0x458>
   15f40:	add	r2, pc, r2
   15f44:	ldr	r3, [r2, #192]	; 0xc0
   15f48:	ldr	r1, [r2, #196]	; 0xc4
   15f4c:	adds	r3, r3, #1
   15f50:	adc	r1, r1, #0
   15f54:	str	r3, [r2, #192]	; 0xc0
   15f58:	str	r1, [r2, #196]	; 0xc4
   15f5c:	b	15dd4 <__generate_code_for_binary_boolean_expression@@Base+0x1dc>
   15f60:	ldr	r4, [pc, #236]	; 16054 <__generate_code_for_binary_boolean_expression@@Base+0x45c>
   15f64:	mov	r2, r6
   15f68:	mov	r3, r7
   15f6c:	ldr	r1, [pc, #228]	; 16058 <__generate_code_for_binary_boolean_expression@@Base+0x460>
   15f70:	ldr	r0, [r5, #4]
   15f74:	add	r4, pc, r4
   15f78:	ldr	ip, [r4, #200]	; 0xc8
   15f7c:	add	r1, pc, r1
   15f80:	ldr	lr, [r4, #204]	; 0xcc
   15f84:	adds	ip, ip, #1
   15f88:	adc	lr, lr, #0
   15f8c:	str	ip, [r4, #200]	; 0xc8
   15f90:	str	lr, [r4, #204]	; 0xcc
   15f94:	bl	119a0 <fprintf@plt>
   15f98:	ldr	r3, [r4, #256]	; 0x100
   15f9c:	ldr	r2, [r4, #260]	; 0x104
   15fa0:	adds	r3, r3, #1
   15fa4:	adc	r2, r2, #0
   15fa8:	str	r3, [r4, #256]	; 0x100
   15fac:	str	r2, [r4, #260]	; 0x104
   15fb0:	b	15dd4 <__generate_code_for_binary_boolean_expression@@Base+0x1dc>
   15fb4:	ldr	r4, [pc, #160]	; 1605c <__generate_code_for_binary_boolean_expression@@Base+0x464>
   15fb8:	mov	r1, #1
   15fbc:	mov	r2, #31
   15fc0:	ldr	r0, [pc, #152]	; 16060 <__generate_code_for_binary_boolean_expression@@Base+0x468>
   15fc4:	add	r4, pc, r4
   15fc8:	ldr	r3, [r4, #152]	; 0x98
   15fcc:	ldr	ip, [r4, #156]	; 0x9c
   15fd0:	adds	r3, r3, r1
   15fd4:	adc	ip, ip, #0
   15fd8:	str	r3, [r4, #152]	; 0x98
   15fdc:	str	ip, [r4, #156]	; 0x9c
   15fe0:	ldr	r3, [r9, r0]
   15fe4:	ldr	r0, [pc, #120]	; 16064 <__generate_code_for_binary_boolean_expression@@Base+0x46c>
   15fe8:	ldr	r3, [r3]
   15fec:	add	r0, pc, r0
   15ff0:	bl	11910 <fwrite@plt>
   15ff4:	ldr	r3, [r4, #264]	; 0x108
   15ff8:	mov	r0, #1
   15ffc:	ldr	r2, [r4, #268]	; 0x10c
   16000:	adds	r3, r3, r0
   16004:	adc	r2, r2, #0
   16008:	str	r3, [r4, #264]	; 0x108
   1600c:	str	r2, [r4, #268]	; 0x10c
   16010:	bl	1197c <exit@plt>
   16014:	andeq	r5, r1, r8, lsl r9
   16018:	andeq	r3, r0, r8, ror #6
   1601c:	andeq	r4, r1, r8, ror r3
   16020:	andeq	r3, r0, r8, ror #5
   16024:	andeq	r3, r0, ip, ror r2
   16028:	andeq	r5, r1, r8, lsl #15
   1602c:	andeq	r3, r0, r4, lsl #5
   16030:	andeq	r5, r1, r0, lsr #14
   16034:	andeq	r3, r0, ip, asr #3
   16038:	andeq	r5, r1, ip, asr #13
   1603c:	andeq	r3, r0, ip, lsl #3
   16040:	andeq	r5, r1, r8, ror r6
   16044:	andeq	r3, r0, ip, asr #2
   16048:	andeq	r5, r1, r4, lsr #12
   1604c:	andeq	r3, r0, ip, lsl #2
   16050:	andeq	r5, r1, r0, ror #11
   16054:	andeq	r5, r1, ip, lsr #11
   16058:	strheq	r3, [r0], -ip
   1605c:	andeq	r5, r1, ip, asr r5
   16060:	andeq	r0, r0, r4, lsr #1
   16064:	andeq	r3, r0, r0, rrx

00016068 <__generate_code_for_unary_boolean_expression@@Base>:
   16068:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1606c:	mov	r5, r0
   16070:	ldr	r4, [pc, #368]	; 161e8 <__generate_code_for_unary_boolean_expression@@Base+0x180>
   16074:	ldr	r0, [pc, #368]	; 161ec <__generate_code_for_unary_boolean_expression@@Base+0x184>
   16078:	add	r4, pc, r4
   1607c:	add	r4, r4, #272	; 0x110
   16080:	ldr	ip, [r4]
   16084:	add	r0, pc, r0
   16088:	strd	r6, [sp, #8]
   1608c:	mov	r6, r2
   16090:	str	lr, [sp, #28]
   16094:	mov	r2, #11
   16098:	mov	r7, r3
   1609c:	ldr	lr, [r4, #4]
   160a0:	strd	r8, [sp, #16]
   160a4:	mov	r8, r1
   160a8:	mov	r1, #1
   160ac:	adds	ip, ip, r1
   160b0:	ldr	r3, [r5, #4]
   160b4:	str	sl, [sp, #24]
   160b8:	ldr	r9, [r8, #8]
   160bc:	adc	lr, lr, #0
   160c0:	stm	r4, {ip, lr}
   160c4:	bl	11910 <fwrite@plt>
   160c8:	ldr	r3, [r4, #8]
   160cc:	mov	r1, #1
   160d0:	mov	r2, #9
   160d4:	ldr	ip, [r4, #12]
   160d8:	ldr	r0, [pc, #272]	; 161f0 <__generate_code_for_unary_boolean_expression@@Base+0x188>
   160dc:	adds	r3, r3, r1
   160e0:	adc	ip, ip, #0
   160e4:	str	r3, [r4, #8]
   160e8:	ldr	r3, [r5, #4]
   160ec:	add	r0, pc, r0
   160f0:	str	ip, [r4, #12]
   160f4:	bl	11910 <fwrite@plt>
   160f8:	ldr	r3, [r4, #16]
   160fc:	mov	r1, r9
   16100:	mov	r0, r5
   16104:	ldr	r2, [r4, #20]
   16108:	ldr	r9, [pc, #228]	; 161f4 <__generate_code_for_unary_boolean_expression@@Base+0x18c>
   1610c:	adds	r3, r3, #1
   16110:	adc	r2, r2, #0
   16114:	str	r3, [r4, #16]
   16118:	str	r2, [r4, #20]
   1611c:	add	r9, pc, r9
   16120:	bl	15a3c <__generate_code_for_int@@Base>
   16124:	ldr	r3, [r8, #16]
   16128:	cmp	r3, #8
   1612c:	bne	16190 <__generate_code_for_unary_boolean_expression@@Base+0x128>
   16130:	ldr	r1, [r4, #32]
   16134:	mov	r2, r6
   16138:	mov	r3, r7
   1613c:	ldr	ip, [r4, #36]	; 0x24
   16140:	ldr	r0, [r5, #4]
   16144:	adds	r1, r1, #1
   16148:	str	r1, [r4, #32]
   1614c:	adc	ip, ip, #0
   16150:	ldr	r1, [pc, #160]	; 161f8 <__generate_code_for_unary_boolean_expression@@Base+0x190>
   16154:	str	ip, [r4, #36]	; 0x24
   16158:	add	r1, pc, r1
   1615c:	bl	119a0 <fprintf@plt>
   16160:	ldr	r3, [r4, #40]	; 0x28
   16164:	ldr	r2, [r4, #44]	; 0x2c
   16168:	ldrd	r6, [sp, #8]
   1616c:	adds	r3, r3, #1
   16170:	ldrd	r8, [sp, #16]
   16174:	adc	r2, r2, #0
   16178:	ldr	sl, [sp, #24]
   1617c:	str	r3, [r4, #40]	; 0x28
   16180:	str	r2, [r4, #44]	; 0x2c
   16184:	ldrd	r4, [sp]
   16188:	add	sp, sp, #28
   1618c:	pop	{pc}		; (ldr pc, [sp], #4)
   16190:	ldr	r3, [r4, #24]
   16194:	mov	r1, #1
   16198:	mov	r2, #31
   1619c:	ldr	ip, [r4, #28]
   161a0:	ldr	r0, [pc, #84]	; 161fc <__generate_code_for_unary_boolean_expression@@Base+0x194>
   161a4:	adds	r3, r3, r1
   161a8:	adc	ip, ip, #0
   161ac:	str	r3, [r4, #24]
   161b0:	str	ip, [r4, #28]
   161b4:	ldr	r3, [r9, r0]
   161b8:	ldr	r0, [pc, #64]	; 16200 <__generate_code_for_unary_boolean_expression@@Base+0x198>
   161bc:	ldr	r3, [r3]
   161c0:	add	r0, pc, r0
   161c4:	bl	11910 <fwrite@plt>
   161c8:	ldr	r3, [r4, #48]	; 0x30
   161cc:	mov	r0, #1
   161d0:	ldr	r2, [r4, #52]	; 0x34
   161d4:	adds	r3, r3, r0
   161d8:	adc	r2, r2, #0
   161dc:	str	r3, [r4, #48]	; 0x30
   161e0:	str	r2, [r4, #52]	; 0x34
   161e4:	bl	1197c <exit@plt>
   161e8:	andeq	r5, r1, r8, lsr #9
   161ec:	andeq	r2, r0, r8, ror #31
   161f0:	andeq	r2, r0, ip, asr #29
   161f4:	ldrdeq	r3, [r1], -ip
   161f8:	muleq	r0, r0, lr
   161fc:	andeq	r0, r0, r4, lsr #1
   16200:	andeq	r2, r0, ip, lsl #29

00016204 <__generate_code_for_if_expression@@Base>:
   16204:	ldr	ip, [r1, #16]
   16208:	str	r4, [sp, #-8]!
   1620c:	str	lr, [sp, #4]
   16210:	cmp	ip, #8
   16214:	beq	16260 <__generate_code_for_if_expression@@Base+0x5c>
   16218:	ldr	r4, [pc, #136]	; 162a8 <__generate_code_for_if_expression@@Base+0xa4>
   1621c:	add	r4, pc, r4
   16220:	ldr	ip, [r4, #328]	; 0x148
   16224:	ldr	lr, [r4, #332]	; 0x14c
   16228:	adds	ip, ip, #1
   1622c:	adc	lr, lr, #0
   16230:	str	ip, [r4, #328]	; 0x148
   16234:	str	lr, [r4, #332]	; 0x14c
   16238:	bl	15bf8 <__generate_code_for_binary_boolean_expression@@Base>
   1623c:	ldr	r3, [r4, #352]	; 0x160
   16240:	ldr	r2, [r4, #356]	; 0x164
   16244:	adds	r3, r3, #1
   16248:	adc	r2, r2, #0
   1624c:	str	r3, [r4, #352]	; 0x160
   16250:	str	r2, [r4, #356]	; 0x164
   16254:	ldr	r4, [sp]
   16258:	add	sp, sp, #4
   1625c:	pop	{pc}		; (ldr pc, [sp], #4)
   16260:	ldr	r4, [pc, #68]	; 162ac <__generate_code_for_if_expression@@Base+0xa8>
   16264:	add	r4, pc, r4
   16268:	ldr	ip, [r4, #336]	; 0x150
   1626c:	ldr	lr, [r4, #340]	; 0x154
   16270:	adds	ip, ip, #1
   16274:	adc	lr, lr, #0
   16278:	str	ip, [r4, #336]	; 0x150
   1627c:	str	lr, [r4, #340]	; 0x154
   16280:	bl	16068 <__generate_code_for_unary_boolean_expression@@Base>
   16284:	ldr	r3, [r4, #344]	; 0x158
   16288:	ldr	r2, [r4, #348]	; 0x15c
   1628c:	adds	r3, r3, #1
   16290:	adc	r2, r2, #0
   16294:	str	r3, [r4, #344]	; 0x158
   16298:	str	r2, [r4, #348]	; 0x15c
   1629c:	ldr	r4, [sp]
   162a0:	add	sp, sp, #4
   162a4:	pop	{pc}		; (ldr pc, [sp], #4)
   162a8:	andeq	r5, r1, r4, lsl #6
   162ac:			; <UNDEFINED> instruction: 0x000152bc

000162b0 <__generate_code_for_body@@Base>:
   162b0:	ldr	r3, [pc, #352]	; 16418 <__generate_code_for_body@@Base+0x168>
   162b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   162b8:	add	r3, pc, r3
   162bc:	ldr	r2, [r3, #360]	; 0x168
   162c0:	strd	r6, [sp, #8]
   162c4:	mov	r6, r0
   162c8:	ldr	r0, [r3, #364]	; 0x16c
   162cc:	str	r8, [sp, #16]
   162d0:	ldr	r8, [pc, #324]	; 1641c <__generate_code_for_body@@Base+0x16c>
   162d4:	adds	r2, r2, #1
   162d8:	str	lr, [sp, #20]
   162dc:	adc	r0, r0, #0
   162e0:	cmp	r1, #0
   162e4:	str	r2, [r3, #360]	; 0x168
   162e8:	add	r8, pc, r8
   162ec:	str	r0, [r3, #364]	; 0x16c
   162f0:	beq	16388 <__generate_code_for_body@@Base+0xd8>
   162f4:	ldr	r4, [pc, #292]	; 16420 <__generate_code_for_body@@Base+0x170>
   162f8:	ldr	r7, [pc, #292]	; 16424 <__generate_code_for_body@@Base+0x174>
   162fc:	add	r4, pc, r4
   16300:	add	r4, r4, #368	; 0x170
   16304:	add	r7, pc, r7
   16308:	b	1634c <__generate_code_for_body@@Base+0x9c>
   1630c:	ldr	r3, [r4, #8]
   16310:	mov	r0, r6
   16314:	ldr	r2, [r4, #12]
   16318:	adds	r3, r3, #1
   1631c:	adc	r2, r2, #0
   16320:	str	r3, [r4, #8]
   16324:	str	r2, [r4, #12]
   16328:	bl	15aa4 <__generate_code_for_return@@Base>
   1632c:	ldr	r3, [r4, #24]
   16330:	ldr	r2, [r4, #28]
   16334:	adds	r3, r3, #1
   16338:	adc	r2, r2, #0
   1633c:	subs	r1, r5, #0
   16340:	str	r3, [r4, #24]
   16344:	str	r2, [r4, #28]
   16348:	beq	16388 <__generate_code_for_body@@Base+0xd8>
   1634c:	ldm	r1, {r3, r5}
   16350:	cmp	r3, #3
   16354:	beq	1630c <__generate_code_for_body@@Base+0x5c>
   16358:	cmp	r3, #4
   1635c:	bne	163bc <__generate_code_for_body@@Base+0x10c>
   16360:	ldr	r3, [r7, #384]	; 0x180
   16364:	mov	r0, r6
   16368:	ldr	ip, [r7, #388]	; 0x184
   1636c:	adds	r3, r3, #1
   16370:	adc	ip, ip, #0
   16374:	str	r3, [r7, #384]	; 0x180
   16378:	str	ip, [r7, #388]	; 0x184
   1637c:	bl	16438 <__generate_code_for_if@@Base>
   16380:	subs	r1, r5, #0
   16384:	bne	1634c <__generate_code_for_body@@Base+0x9c>
   16388:	ldr	r3, [pc, #152]	; 16428 <__generate_code_for_body@@Base+0x178>
   1638c:	ldrd	r4, [sp]
   16390:	ldrd	r6, [sp, #8]
   16394:	add	r3, pc, r3
   16398:	ldr	r2, [r3, #408]	; 0x198
   1639c:	ldr	r1, [r3, #412]	; 0x19c
   163a0:	ldr	r8, [sp, #16]
   163a4:	add	sp, sp, #20
   163a8:	adds	r2, r2, #1
   163ac:	adc	r1, r1, #0
   163b0:	str	r2, [r3, #408]	; 0x198
   163b4:	str	r1, [r3, #412]	; 0x19c
   163b8:	pop	{pc}		; (ldr pc, [sp], #4)
   163bc:	ldr	r4, [pc, #104]	; 1642c <__generate_code_for_body@@Base+0x17c>
   163c0:	mov	r1, #1
   163c4:	mov	r2, #52	; 0x34
   163c8:	ldr	r0, [pc, #96]	; 16430 <__generate_code_for_body@@Base+0x180>
   163cc:	add	r4, pc, r4
   163d0:	add	r4, r4, #368	; 0x170
   163d4:	ldm	r4, {r3, ip}
   163d8:	adds	r3, r3, r1
   163dc:	adc	ip, ip, #0
   163e0:	stm	r4, {r3, ip}
   163e4:	ldr	r3, [r8, r0]
   163e8:	ldr	r0, [pc, #68]	; 16434 <__generate_code_for_body@@Base+0x184>
   163ec:	ldr	r3, [r3]
   163f0:	add	r0, pc, r0
   163f4:	bl	11910 <fwrite@plt>
   163f8:	ldr	r3, [r4, #32]
   163fc:	mov	r0, #1
   16400:	ldr	r2, [r4, #36]	; 0x24
   16404:	adds	r3, r3, r0
   16408:	adc	r2, r2, #0
   1640c:	str	r3, [r4, #32]
   16410:	str	r2, [r4, #36]	; 0x24
   16414:	bl	1197c <exit@plt>
   16418:	andeq	r5, r1, r8, ror #4
   1641c:	andeq	r3, r1, r0, lsl sp
   16420:	andeq	r5, r1, r4, lsr #4
   16424:	andeq	r5, r1, ip, lsl r2
   16428:	andeq	r5, r1, ip, lsl #3
   1642c:	andeq	r5, r1, r4, asr r1
   16430:	andeq	r0, r0, r4, lsr #1
   16434:	andeq	r2, r0, r8, lsl #25

00016438 <__generate_code_for_if@@Base>:
   16438:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1643c:	mov	r5, r0
   16440:	ldr	r4, [pc, #284]	; 16564 <__generate_code_for_if@@Base+0x12c>
   16444:	strd	r6, [sp, #8]
   16448:	mov	r7, r1
   1644c:	ldr	r6, [r0, #8]
   16450:	str	lr, [sp, #28]
   16454:	strd	r8, [sp, #16]
   16458:	add	r4, pc, r4
   1645c:	ldr	r8, [r0, #12]
   16460:	add	r4, r4, #416	; 0x1a0
   16464:	str	sl, [sp, #24]
   16468:	ldm	r4, {r1, lr}
   1646c:	mov	r2, r6
   16470:	mov	r3, r8
   16474:	adds	ip, r1, #1
   16478:	ldr	r1, [r7, #8]
   1647c:	adc	lr, lr, #0
   16480:	adds	r9, r6, #1
   16484:	stm	r4, {ip, lr}
   16488:	adc	ip, r8, #0
   1648c:	str	r9, [r0, #8]
   16490:	str	ip, [r0, #12]
   16494:	bl	16204 <__generate_code_for_if_expression@@Base>
   16498:	ldr	r3, [r4, #8]
   1649c:	mov	r0, r5
   164a0:	ldr	r2, [r4, #12]
   164a4:	ldr	r1, [r7, #12]
   164a8:	adds	r3, r3, #1
   164ac:	adc	r2, r2, #0
   164b0:	str	r3, [r4, #8]
   164b4:	str	r2, [r4, #12]
   164b8:	bl	162b0 <__generate_code_for_body@@Base>
   164bc:	ldr	r0, [r4, #16]
   164c0:	mov	r2, r6
   164c4:	mov	r3, r8
   164c8:	ldr	lr, [r4, #20]
   164cc:	ldr	r1, [pc, #148]	; 16568 <__generate_code_for_if@@Base+0x130>
   164d0:	adds	ip, r0, #1
   164d4:	ldr	r0, [r5, #4]
   164d8:	adc	lr, lr, #0
   164dc:	str	ip, [r4, #16]
   164e0:	add	r1, pc, r1
   164e4:	str	lr, [r4, #20]
   164e8:	bl	119a0 <fprintf@plt>
   164ec:	ldr	r1, [r7, #16]
   164f0:	cmp	r1, #0
   164f4:	beq	16548 <__generate_code_for_if@@Base+0x110>
   164f8:	ldr	r3, [r4, #24]
   164fc:	mov	r0, r5
   16500:	ldr	r2, [r4, #28]
   16504:	adds	r3, r3, #1
   16508:	adc	r2, r2, #0
   1650c:	str	r3, [r4, #24]
   16510:	str	r2, [r4, #28]
   16514:	bl	162b0 <__generate_code_for_body@@Base>
   16518:	ldr	r3, [r4, #40]	; 0x28
   1651c:	ldr	r2, [r4, #44]	; 0x2c
   16520:	adds	r3, r3, #1
   16524:	adc	r2, r2, #0
   16528:	str	r3, [r4, #40]	; 0x28
   1652c:	str	r2, [r4, #44]	; 0x2c
   16530:	ldrd	r4, [sp]
   16534:	ldrd	r6, [sp, #8]
   16538:	ldrd	r8, [sp, #16]
   1653c:	ldr	sl, [sp, #24]
   16540:	add	sp, sp, #28
   16544:	pop	{pc}		; (ldr pc, [sp], #4)
   16548:	ldr	r3, [r4, #32]
   1654c:	ldr	r2, [r4, #36]	; 0x24
   16550:	adds	r3, r3, #1
   16554:	adc	r2, r2, #0
   16558:	str	r3, [r4, #32]
   1655c:	str	r2, [r4, #36]	; 0x24
   16560:	b	16530 <__generate_code_for_if@@Base+0xf8>
   16564:	andeq	r5, r1, r8, asr #1
   16568:	ldrdeq	r2, [r0], -r0

0001656c <__generate_code_for_function@@Base>:
   1656c:	strd	r4, [sp, #-16]!
   16570:	mov	r5, r1
   16574:	ldr	r4, [pc, #132]	; 16600 <__generate_code_for_function@@Base+0x94>
   16578:	ldr	r1, [pc, #132]	; 16604 <__generate_code_for_function@@Base+0x98>
   1657c:	ldr	r2, [r5, #8]
   16580:	add	r4, pc, r4
   16584:	ldr	r3, [r4, #464]	; 0x1d0
   16588:	add	r1, pc, r1
   1658c:	ldr	ip, [r4, #468]	; 0x1d4
   16590:	str	r6, [sp, #8]
   16594:	mov	r6, r0
   16598:	ldr	r0, [r0, #4]
   1659c:	adds	r3, r3, #1
   165a0:	str	lr, [sp, #12]
   165a4:	adc	ip, ip, #0
   165a8:	str	r3, [r4, #464]	; 0x1d0
   165ac:	str	ip, [r4, #468]	; 0x1d4
   165b0:	bl	119a0 <fprintf@plt>
   165b4:	ldr	r3, [r4, #472]	; 0x1d8
   165b8:	mov	r0, r6
   165bc:	ldr	r2, [r4, #476]	; 0x1dc
   165c0:	ldr	r1, [r5, #12]
   165c4:	adds	r3, r3, #1
   165c8:	adc	r2, r2, #0
   165cc:	str	r3, [r4, #472]	; 0x1d8
   165d0:	str	r2, [r4, #476]	; 0x1dc
   165d4:	bl	162b0 <__generate_code_for_body@@Base>
   165d8:	ldr	r3, [r4, #480]	; 0x1e0
   165dc:	ldr	r2, [r4, #484]	; 0x1e4
   165e0:	ldr	r6, [sp, #8]
   165e4:	adds	r3, r3, #1
   165e8:	adc	r2, r2, #0
   165ec:	str	r3, [r4, #480]	; 0x1e0
   165f0:	str	r2, [r4, #484]	; 0x1e4
   165f4:	ldrd	r4, [sp]
   165f8:	add	sp, sp, #12
   165fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16600:	andeq	r4, r1, r0, lsr #31
   16604:	andeq	r2, r0, r8, lsr fp

00016608 <__generate_code_for_main@@Base>:
   16608:	ldr	r2, [r1]
   1660c:	str	r4, [sp, #-8]!
   16610:	ldr	r3, [pc, #180]	; 166cc <__generate_code_for_main@@Base+0xc4>
   16614:	str	lr, [sp, #4]
   16618:	cmp	r2, #2
   1661c:	add	r3, pc, r3
   16620:	bne	1666c <__generate_code_for_main@@Base+0x64>
   16624:	ldr	r4, [pc, #164]	; 166d0 <__generate_code_for_main@@Base+0xc8>
   16628:	add	r4, pc, r4
   1662c:	ldr	r3, [r4, #496]	; 0x1f0
   16630:	ldr	r2, [r4, #500]	; 0x1f4
   16634:	adds	r3, r3, #1
   16638:	adc	r2, r2, #0
   1663c:	str	r3, [r4, #496]	; 0x1f0
   16640:	str	r2, [r4, #500]	; 0x1f4
   16644:	bl	1656c <__generate_code_for_function@@Base>
   16648:	ldr	r3, [r4, #504]	; 0x1f8
   1664c:	ldr	r2, [r4, #508]	; 0x1fc
   16650:	adds	r3, r3, #1
   16654:	adc	r2, r2, #0
   16658:	str	r3, [r4, #504]	; 0x1f8
   1665c:	str	r2, [r4, #508]	; 0x1fc
   16660:	ldr	r4, [sp]
   16664:	add	sp, sp, #4
   16668:	pop	{pc}		; (ldr pc, [sp], #4)
   1666c:	ldr	r4, [pc, #96]	; 166d4 <__generate_code_for_main@@Base+0xcc>
   16670:	mov	r1, #1
   16674:	mov	r2, #46	; 0x2e
   16678:	ldr	ip, [pc, #88]	; 166d8 <__generate_code_for_main@@Base+0xd0>
   1667c:	add	r4, pc, r4
   16680:	ldr	r0, [r4, #488]	; 0x1e8
   16684:	ldr	lr, [r4, #492]	; 0x1ec
   16688:	adds	r0, r0, r1
   1668c:	adc	lr, lr, #0
   16690:	str	r0, [r4, #488]	; 0x1e8
   16694:	ldr	r0, [pc, #64]	; 166dc <__generate_code_for_main@@Base+0xd4>
   16698:	str	lr, [r4, #492]	; 0x1ec
   1669c:	ldr	r3, [r3, ip]
   166a0:	add	r0, pc, r0
   166a4:	ldr	r3, [r3]
   166a8:	bl	11910 <fwrite@plt>
   166ac:	ldr	r3, [r4, #512]	; 0x200
   166b0:	mov	r0, #1
   166b4:	ldr	r2, [r4, #516]	; 0x204
   166b8:	adds	r3, r3, r0
   166bc:	adc	r2, r2, #0
   166c0:	str	r3, [r4, #512]	; 0x200
   166c4:	str	r2, [r4, #516]	; 0x204
   166c8:	bl	1197c <exit@plt>
   166cc:	ldrdeq	r3, [r1], -ip
   166d0:	strdeq	r4, [r1], -r8
   166d4:	andeq	r4, r1, r4, lsr #29
   166d8:	andeq	r0, r0, r4, lsr #1
   166dc:	andeq	r2, r0, r8, lsr #20

000166e0 <__generate_code@@Base>:
   166e0:	strd	r4, [sp, #-16]!
   166e4:	mov	r5, r0
   166e8:	mov	r2, #21
   166ec:	ldr	r4, [pc, #132]	; 16778 <__generate_code@@Base+0x98>
   166f0:	ldr	r3, [r5, #4]
   166f4:	ldr	r0, [pc, #128]	; 1677c <__generate_code@@Base+0x9c>
   166f8:	add	r4, pc, r4
   166fc:	ldr	ip, [r4, #520]	; 0x208
   16700:	str	r6, [sp, #8]
   16704:	mov	r6, r1
   16708:	mov	r1, #1
   1670c:	str	lr, [sp, #12]
   16710:	ldr	lr, [r4, #524]	; 0x20c
   16714:	add	r0, pc, r0
   16718:	adds	ip, ip, r1
   1671c:	str	ip, [r4, #520]	; 0x208
   16720:	adc	lr, lr, #0
   16724:	str	lr, [r4, #524]	; 0x20c
   16728:	bl	11910 <fwrite@plt>
   1672c:	ldr	r3, [r4, #528]	; 0x210
   16730:	mov	r1, r6
   16734:	mov	r0, r5
   16738:	ldr	r2, [r4, #532]	; 0x214
   1673c:	adds	r3, r3, #1
   16740:	adc	r2, r2, #0
   16744:	str	r3, [r4, #528]	; 0x210
   16748:	str	r2, [r4, #532]	; 0x214
   1674c:	bl	16608 <__generate_code_for_main@@Base>
   16750:	ldr	r3, [r4, #536]	; 0x218
   16754:	ldr	r2, [r4, #540]	; 0x21c
   16758:	ldr	r6, [sp, #8]
   1675c:	adds	r3, r3, #1
   16760:	adc	r2, r2, #0
   16764:	str	r3, [r4, #536]	; 0x218
   16768:	str	r2, [r4, #540]	; 0x21c
   1676c:	ldrd	r4, [sp]
   16770:	add	sp, sp, #12
   16774:	pop	{pc}		; (ldr pc, [sp], #4)
   16778:	andeq	r4, r1, r8, lsr #28
   1677c:	andeq	r2, r0, r4, ror #19

00016780 <generate_code@@Base>:
   16780:	strd	r4, [sp, #-16]!
   16784:	ldr	r4, [pc, #156]	; 16828 <generate_code@@Base+0xa8>
   16788:	add	r4, pc, r4
   1678c:	ldr	r3, [r4, #544]	; 0x220
   16790:	ldr	r2, [r4, #548]	; 0x224
   16794:	str	r6, [sp, #8]
   16798:	mov	r6, r0
   1679c:	ldr	r0, [r0]
   167a0:	adds	r3, r3, #1
   167a4:	str	lr, [sp, #12]
   167a8:	adc	r2, r2, #0
   167ac:	str	r3, [r4, #544]	; 0x220
   167b0:	str	r2, [r4, #548]	; 0x224
   167b4:	bl	15904 <build_ast@@Base>
   167b8:	ldr	r3, [r4, #552]	; 0x228
   167bc:	mov	r5, r0
   167c0:	mov	r0, r6
   167c4:	mov	r1, r5
   167c8:	ldr	r2, [r4, #556]	; 0x22c
   167cc:	adds	r3, r3, #1
   167d0:	adc	r2, r2, #0
   167d4:	str	r3, [r4, #552]	; 0x228
   167d8:	str	r2, [r4, #556]	; 0x22c
   167dc:	bl	166e0 <__generate_code@@Base>
   167e0:	ldr	r3, [r4, #560]	; 0x230
   167e4:	mov	r0, r5
   167e8:	ldr	r2, [r4, #564]	; 0x234
   167ec:	adds	r3, r3, #1
   167f0:	adc	r2, r2, #0
   167f4:	str	r3, [r4, #560]	; 0x230
   167f8:	str	r2, [r4, #564]	; 0x234
   167fc:	bl	13dd0 <free_node@@Base>
   16800:	ldr	r3, [r4, #568]	; 0x238
   16804:	ldr	r2, [r4, #572]	; 0x23c
   16808:	ldr	r6, [sp, #8]
   1680c:	adds	r3, r3, #1
   16810:	adc	r2, r2, #0
   16814:	str	r3, [r4, #568]	; 0x238
   16818:	str	r2, [r4, #572]	; 0x23c
   1681c:	ldrd	r4, [sp]
   16820:	add	sp, sp, #12
   16824:	pop	{pc}		; (ldr pc, [sp], #4)
   16828:	muleq	r1, r8, sp
   1682c:	b	17ad0 <generate_code@@Base+0x1350>
   16830:	push	{r4, r5, r6, r7, r8, lr}
   16834:	subs	r5, r1, #0
   16838:	popeq	{r4, r5, r6, r7, r8, pc}
   1683c:	mov	r4, r0
   16840:	bl	1682c <generate_code@@Base+0xac>
   16844:	ldr	r3, [r4]
   16848:	ldr	r2, [r4, #4]
   1684c:	adds	r6, r3, r0
   16850:	adc	r7, r2, r1
   16854:	subs	r5, r5, #1
   16858:	strd	r6, [r4], #8
   1685c:	bne	16840 <generate_code@@Base+0xc0>
   16860:	pop	{r4, r5, r6, r7, r8, pc}
   16864:	ldr	r3, [pc, #20]	; 16880 <generate_code@@Base+0x100>
   16868:	ldr	r2, [pc, #20]	; 16884 <generate_code@@Base+0x104>
   1686c:	add	r3, pc, r3
   16870:	ldr	r3, [r3, r2]
   16874:	ldmib	r3, {r0, r3}
   16878:	add	r0, r0, r3
   1687c:	bx	lr
   16880:	andeq	r3, r1, ip, lsl #15
   16884:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   16888:	ldr	r3, [pc, #28]	; 168ac <generate_code@@Base+0x12c>
   1688c:	ldr	r2, [pc, #28]	; 168b0 <generate_code@@Base+0x130>
   16890:	add	r3, pc, r3
   16894:	ldr	r3, [r3, r2]
   16898:	ldr	r2, [r3]
   1689c:	cmp	r2, #0
   168a0:	ldrne	r0, [r3, #20]
   168a4:	moveq	r0, #1
   168a8:	bx	lr
   168ac:	andeq	r3, r1, r8, ror #14
   168b0:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   168b4:	bx	lr
   168b8:	ldr	ip, [pc, #32]	; 168e0 <generate_code@@Base+0x160>
   168bc:	mov	r3, #32
   168c0:	teq	r0, r1
   168c4:	movmi	r2, ip
   168c8:	movpl	r2, #0
   168cc:	subs	r3, r3, #1
   168d0:	lsl	r1, r1, #1
   168d4:	eor	r0, r2, r0, lsl #1
   168d8:	bne	168c0 <generate_code@@Base+0x140>
   168dc:	bx	lr
   168e0:	strbeq	r1, [r1], #3511	; 0xdb7
   168e4:	ldr	r2, [pc, #60]	; 16928 <generate_code@@Base+0x1a8>
   168e8:	ldr	r3, [pc, #60]	; 1692c <generate_code@@Base+0x1ac>
   168ec:	add	r2, pc, r2
   168f0:	push	{r4, lr}
   168f4:	ldr	r4, [r2, r3]
   168f8:	ldr	r0, [r4]
   168fc:	cmp	r0, #0
   16900:	popeq	{r4, pc}
   16904:	ldr	r3, [pc, #36]	; 16930 <generate_code@@Base+0x1b0>
   16908:	ldr	r3, [r2, r3]
   1690c:	ldr	r3, [r3]
   16910:	cmp	r0, r3
   16914:	popeq	{r4, pc}
   16918:	bl	119e8 <fclose@plt>
   1691c:	mov	r3, #0
   16920:	str	r3, [r4]
   16924:	pop	{r4, pc}
   16928:	andeq	r3, r1, ip, lsl #14
   1692c:	strheq	r0, [r0], -r4
   16930:	andeq	r0, r0, r4, lsr #1
   16934:	ldr	r3, [pc, #76]	; 16988 <generate_code@@Base+0x208>
   16938:	ldr	r1, [pc, #76]	; 1698c <generate_code@@Base+0x20c>
   1693c:	add	r3, pc, r3
   16940:	push	{r4, r5, r6, lr}
   16944:	mov	r5, r0
   16948:	ldr	r4, [r3, r1]
   1694c:	lsl	r1, r0, #2
   16950:	mov	r0, r4
   16954:	mov	r2, #1
   16958:	ldr	r3, [r0], #28
   1695c:	bl	11910 <fwrite@plt>
   16960:	cmp	r0, #1
   16964:	movne	r3, #1
   16968:	ldr	r0, [r4, #8]
   1696c:	strne	r3, [r4, #20]
   16970:	ldr	r3, [r4, #4]
   16974:	sub	r0, r0, r5
   16978:	add	r3, r3, r5
   1697c:	str	r3, [r4, #4]
   16980:	str	r0, [r4, #8]
   16984:	pop	{r4, r5, r6, pc}
   16988:			; <UNDEFINED> instruction: 0x000136bc
   1698c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   16990:	ldr	r3, [pc, #80]	; 169e8 <generate_code@@Base+0x268>
   16994:	ldr	r2, [pc, #80]	; 169ec <generate_code@@Base+0x26c>
   16998:	add	r3, pc, r3
   1699c:	push	{r4, r5, r6, lr}
   169a0:	mov	r5, r0
   169a4:	ldr	r4, [r3, r2]
   169a8:	ldr	r3, [r4, #8]
   169ac:	cmp	r3, #1024	; 0x400
   169b0:	bcs	169c8 <generate_code@@Base+0x248>
   169b4:	add	r0, r3, #7
   169b8:	add	r3, r5, r3
   169bc:	str	r3, [r4, #8]
   169c0:	add	r0, r4, r0, lsl #2
   169c4:	pop	{r4, r5, r6, pc}
   169c8:	mov	r0, #1024	; 0x400
   169cc:	bl	16934 <generate_code@@Base+0x1b4>
   169d0:	ldr	r3, [r4, #8]
   169d4:	cmp	r3, #0
   169d8:	addne	r2, r4, #4096	; 0x1000
   169dc:	ldrne	r2, [r2, #28]
   169e0:	strne	r2, [r4, #28]
   169e4:	b	169b4 <generate_code@@Base+0x234>
   169e8:	andeq	r3, r1, r0, ror #12
   169ec:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   169f0:	ldr	r3, [pc, #192]	; 16ab8 <generate_code@@Base+0x338>
   169f4:	ldr	r2, [pc, #192]	; 16abc <generate_code@@Base+0x33c>
   169f8:	add	r3, pc, r3
   169fc:	push	{r4, r5, r6, lr}
   16a00:	ldr	r4, [r3, r2]
   16a04:	ldr	r2, [r4, #24]
   16a08:	ldr	r3, [r4, #8]
   16a0c:	ldr	ip, [r4, #12]
   16a10:	cmp	r2, #0
   16a14:	sub	ip, ip, r3
   16a18:	ble	16a94 <generate_code@@Base+0x314>
   16a1c:	cmp	ip, r0
   16a20:	mov	r5, r0
   16a24:	bcs	16a80 <generate_code@@Base+0x300>
   16a28:	ldr	r2, [r4, #4]
   16a2c:	cmp	ip, #0
   16a30:	add	r2, r2, r3
   16a34:	str	r2, [r4, #4]
   16a38:	addne	r2, r4, #28
   16a3c:	mov	r0, r4
   16a40:	ldrne	r3, [r2, r3, lsl #2]
   16a44:	mov	r6, #0
   16a48:	strne	r3, [r4, #28]
   16a4c:	ldr	r3, [r0], #28
   16a50:	mov	r2, #4096	; 0x1000
   16a54:	add	r0, r0, ip, lsl #2
   16a58:	mov	r1, #1
   16a5c:	str	ip, [r4, #12]
   16a60:	str	r6, [r4, #8]
   16a64:	bl	11928 <fread@plt>
   16a68:	ldr	r3, [r4, #12]
   16a6c:	add	r0, r3, r0, lsr #2
   16a70:	cmp	r0, r5
   16a74:	str	r0, [r4, #12]
   16a78:	bcc	16a9c <generate_code@@Base+0x31c>
   16a7c:	ldr	r3, [r4, #8]
   16a80:	add	r0, r3, #7
   16a84:	add	r5, r5, r3
   16a88:	str	r5, [r4, #8]
   16a8c:	add	r0, r4, r0, lsl #2
   16a90:	pop	{r4, r5, r6, pc}
   16a94:	mov	r0, #0
   16a98:	pop	{r4, r5, r6, pc}
   16a9c:	ldr	r3, [r4, #16]
   16aa0:	str	r6, [r4, #12]
   16aa4:	add	r5, r5, r3
   16aa8:	sub	r5, r5, r0
   16aac:	str	r5, [r4, #16]
   16ab0:	mov	r0, r6
   16ab4:	pop	{r4, r5, r6, pc}
   16ab8:	andeq	r3, r1, r0, lsl #12
   16abc:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   16ac0:	push	{r4, r5, r6, lr}
   16ac4:	ldr	r4, [pc, #92]	; 16b28 <generate_code@@Base+0x3a8>
   16ac8:	ldr	r3, [pc, #92]	; 16b2c <generate_code@@Base+0x3ac>
   16acc:	add	r4, pc, r4
   16ad0:	ldr	r5, [r4, r3]
   16ad4:	ldr	r0, [r5]
   16ad8:	cmp	r0, #0
   16adc:	popne	{r4, r5, r6, pc}
   16ae0:	ldr	r0, [pc, #72]	; 16b30 <generate_code@@Base+0x3b0>
   16ae4:	add	r0, pc, r0
   16ae8:	bl	11940 <getenv@plt>
   16aec:	cmp	r0, #0
   16af0:	beq	16b20 <generate_code@@Base+0x3a0>
   16af4:	ldr	r1, [pc, #56]	; 16b34 <generate_code@@Base+0x3b4>
   16af8:	add	r1, pc, r1
   16afc:	bl	11a30 <fopen64@plt>
   16b00:	str	r0, [r5]
   16b04:	cmp	r0, #0
   16b08:	popne	{r4, r5, r6, pc}
   16b0c:	ldr	r3, [pc, #36]	; 16b38 <generate_code@@Base+0x3b8>
   16b10:	ldr	r3, [r4, r3]
   16b14:	ldr	r0, [r3]
   16b18:	str	r0, [r5]
   16b1c:	pop	{r4, r5, r6, pc}
   16b20:	ldr	r0, [r5]
   16b24:	b	16b04 <generate_code@@Base+0x384>
   16b28:	andeq	r3, r1, ip, lsr #10
   16b2c:	strheq	r0, [r0], -r4
   16b30:	muleq	r0, r8, r6
   16b34:	muleq	r0, r4, r6
   16b38:	andeq	r0, r0, r4, lsr #1
   16b3c:	push	{r0, r1, r2, r3}
   16b40:	push	{lr}		; (str lr, [sp, #-4]!)
   16b44:	sub	sp, sp, #12
   16b48:	add	r3, sp, #20
   16b4c:	str	r3, [sp, #4]
   16b50:	bl	16ac0 <generate_code@@Base+0x340>
   16b54:	ldr	r1, [sp, #16]
   16b58:	ldr	r2, [sp, #4]
   16b5c:	bl	11a0c <vfprintf@plt>
   16b60:	add	sp, sp, #12
   16b64:	pop	{lr}		; (ldr lr, [sp], #4)
   16b68:	add	sp, sp, #16
   16b6c:	bx	lr
   16b70:	push	{r4, r5, r6, r7, r8, lr}
   16b74:	subs	r6, r1, #0
   16b78:	beq	16bcc <generate_code@@Base+0x44c>
   16b7c:	cmp	r2, #0
   16b80:	ldr	r7, [r6]
   16b84:	beq	16bbc <generate_code@@Base+0x43c>
   16b88:	add	r4, r0, #12
   16b8c:	add	r5, r4, r2, lsl #2
   16b90:	mov	r3, #0
   16b94:	ldr	r2, [r4, #4]!
   16b98:	add	r1, r6, r3, lsl #3
   16b9c:	cmp	r2, #0
   16ba0:	add	r8, r3, #1
   16ba4:	beq	16bb4 <generate_code@@Base+0x434>
   16ba8:	ldr	r0, [r1, #28]
   16bac:	bl	118ec <free@plt>
   16bb0:	mov	r3, r8
   16bb4:	cmp	r4, r5
   16bb8:	bne	16b94 <generate_code@@Base+0x414>
   16bbc:	mov	r0, r6
   16bc0:	bl	118ec <free@plt>
   16bc4:	mov	r0, r7
   16bc8:	pop	{r4, r5, r6, r7, r8, pc}
   16bcc:	mov	r7, r6
   16bd0:	b	16bc4 <generate_code@@Base+0x444>
   16bd4:	push	{r4, r5}
   16bd8:	mov	r4, r0
   16bdc:	mov	r5, r1
   16be0:	orrs	r3, r4, r5
   16be4:	beq	16c28 <generate_code@@Base+0x4a8>
   16be8:	cmp	r1, #0
   16bec:	clzeq	r2, r0
   16bf0:	addeq	r2, r2, #32
   16bf4:	clzne	r2, r1
   16bf8:	rsb	r3, r2, #63	; 0x3f
   16bfc:	cmp	r3, #1
   16c00:	bls	16c28 <generate_code@@Base+0x4a8>
   16c04:	rsb	r1, r2, #61	; 0x3d
   16c08:	rsb	r0, r1, #32
   16c0c:	lsr	r3, r4, r1
   16c10:	sub	r1, r1, #32
   16c14:	orr	r3, r3, r5, lsl r0
   16c18:	orr	r3, r3, r5, lsr r1
   16c1c:	rsb	r2, r2, #1073741886	; 0x4000003e
   16c20:	and	r0, r3, #3
   16c24:	add	r0, r0, r2, lsl #2
   16c28:	pop	{r4, r5}
   16c2c:	bx	lr
   16c30:	push	{r4, r5, r6, lr}
   16c34:	mov	r1, r3
   16c38:	mov	r6, r0
   16c3c:	mov	r0, r2
   16c40:	mov	r4, r2
   16c44:	mov	r5, r3
   16c48:	bl	16bd4 <generate_code@@Base+0x454>
   16c4c:	add	r0, r0, r0, lsl #1
   16c50:	lsl	r0, r0, #3
   16c54:	add	r3, r6, r0
   16c58:	ldr	r1, [r6, r0]
   16c5c:	ldr	r2, [r3, #16]
   16c60:	add	r1, r1, #1
   16c64:	str	r1, [r6, r0]
   16c68:	ldrd	r0, [r3, #8]
   16c6c:	ldr	ip, [r3, #20]
   16c70:	adds	r2, r2, r4
   16c74:	str	r2, [r3, #16]
   16c78:	adc	r2, ip, r5
   16c7c:	cmp	r4, r0
   16c80:	sbcs	r1, r5, r1
   16c84:	str	r2, [r3, #20]
   16c88:	strdlt	r4, [r3, #8]
   16c8c:	pop	{r4, r5, r6, pc}
   16c90:	ldr	r3, [r1, #8]
   16c94:	cmp	r3, #0
   16c98:	bxeq	lr
   16c9c:	add	r2, r1, #6016	; 0x1780
   16ca0:	push	{r4, r5, r6, r7, r8, lr}
   16ca4:	mov	r3, r1
   16ca8:	mov	r8, r1
   16cac:	mov	r7, r0
   16cb0:	ldrd	r4, [r1, #24]
   16cb4:	add	r2, r2, #32
   16cb8:	mov	ip, #0
   16cbc:	mov	r0, #0
   16cc0:	mov	r1, #0
   16cc4:	str	ip, [r3, #40]	; 0x28
   16cc8:	strd	r4, [r3, #48]	; 0x30
   16ccc:	strd	r0, [r3, #56]	; 0x38
   16cd0:	add	r3, r3, #24
   16cd4:	cmp	r3, r2
   16cd8:	bne	16cc4 <generate_code@@Base+0x544>
   16cdc:	cmp	r7, #0
   16ce0:	popeq	{r4, r5, r6, r7, r8, pc}
   16ce4:	add	r8, r8, #40	; 0x28
   16ce8:	ldr	r3, [r7, #16]
   16cec:	cmp	r3, #0
   16cf0:	beq	16d78 <generate_code@@Base+0x5f8>
   16cf4:	ldr	r2, [r7, #52]	; 0x34
   16cf8:	cmp	r2, #0
   16cfc:	beq	16d78 <generate_code@@Base+0x5f8>
   16d00:	mov	r6, #0
   16d04:	b	16d14 <generate_code@@Base+0x594>
   16d08:	add	r6, r6, #1
   16d0c:	cmp	r2, r6
   16d10:	beq	16d78 <generate_code@@Base+0x5f8>
   16d14:	ldr	r3, [r7, #56]	; 0x38
   16d18:	ldr	r5, [r3, r6, lsl #2]
   16d1c:	cmp	r5, #0
   16d20:	beq	16d08 <generate_code@@Base+0x588>
   16d24:	ldr	r3, [r5]
   16d28:	cmp	r3, r7
   16d2c:	bne	16d08 <generate_code@@Base+0x588>
   16d30:	ldr	r3, [r5, #16]
   16d34:	cmp	r3, #0
   16d38:	beq	16d08 <generate_code@@Base+0x588>
   16d3c:	mov	r4, #0
   16d40:	ldr	r2, [r5, #20]
   16d44:	lsl	r3, r4, #3
   16d48:	add	r2, r2, r3
   16d4c:	mov	r0, r8
   16d50:	ldrd	r2, [r2]
   16d54:	bl	16c30 <generate_code@@Base+0x4b0>
   16d58:	ldr	r3, [r5, #16]
   16d5c:	add	r4, r4, #1
   16d60:	cmp	r3, r4
   16d64:	bhi	16d40 <generate_code@@Base+0x5c0>
   16d68:	ldr	r2, [r7, #52]	; 0x34
   16d6c:	add	r6, r6, #1
   16d70:	cmp	r2, r6
   16d74:	bne	16d14 <generate_code@@Base+0x594>
   16d78:	ldr	r7, [r7, #4]
   16d7c:	cmp	r7, #0
   16d80:	bne	16ce8 <generate_code@@Base+0x568>
   16d84:	pop	{r4, r5, r6, r7, r8, pc}
   16d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d8c:	sub	sp, sp, #12
   16d90:	mov	r6, r0
   16d94:	str	r0, [sp, #4]
   16d98:	mov	r8, r2
   16d9c:	mov	r0, r1
   16da0:	mov	r4, r1
   16da4:	ldr	r2, [pc, #364]	; 16f18 <generate_code@@Base+0x798>
   16da8:	mov	r1, #0
   16dac:	bl	119c4 <memset@plt>
   16db0:	mov	r5, #0
   16db4:	cmp	r6, #0
   16db8:	str	r5, [r8]
   16dbc:	beq	16efc <generate_code@@Base+0x77c>
   16dc0:	mov	r9, r5
   16dc4:	ldr	r0, [r6, #12]
   16dc8:	bl	11988 <strlen@plt>
   16dcc:	cmp	r5, r0
   16dd0:	strcc	r0, [r8]
   16dd4:	mov	r0, r9
   16dd8:	ldr	r1, [r6, #8]
   16ddc:	bl	168b8 <generate_code@@Base+0x138>
   16de0:	ldr	r7, [r6, #52]	; 0x34
   16de4:	mov	r1, r7
   16de8:	bl	168b8 <generate_code@@Base+0x138>
   16dec:	cmp	r7, #0
   16df0:	mov	r9, r0
   16df4:	beq	16ee8 <generate_code@@Base+0x768>
   16df8:	ldr	r5, [r6, #56]	; 0x38
   16dfc:	add	r7, r5, r7, lsl #2
   16e00:	sub	r7, r7, #4
   16e04:	sub	r5, r5, #4
   16e08:	b	16e38 <generate_code@@Base+0x6b8>
   16e0c:	ldr	r3, [sl]
   16e10:	mov	r0, r9
   16e14:	cmp	r3, r6
   16e18:	beq	16e54 <generate_code@@Base+0x6d4>
   16e1c:	mov	r1, #0
   16e20:	bl	168b8 <generate_code@@Base+0x138>
   16e24:	mov	r1, #0
   16e28:	bl	168b8 <generate_code@@Base+0x138>
   16e2c:	mov	r9, r0
   16e30:	cmp	r5, r7
   16e34:	beq	16ee8 <generate_code@@Base+0x768>
   16e38:	ldr	sl, [r5, #4]!
   16e3c:	cmp	sl, #0
   16e40:	bne	16e0c <generate_code@@Base+0x68c>
   16e44:	mov	r1, sl
   16e48:	mov	r0, r9
   16e4c:	bl	168b8 <generate_code@@Base+0x138>
   16e50:	b	16e24 <generate_code@@Base+0x6a4>
   16e54:	ldr	r1, [sl, #12]
   16e58:	bl	168b8 <generate_code@@Base+0x138>
   16e5c:	ldr	r1, [sl, #8]
   16e60:	bl	168b8 <generate_code@@Base+0x138>
   16e64:	ldr	r3, [r6, #16]
   16e68:	cmp	r3, #0
   16e6c:	mov	r9, r0
   16e70:	beq	16e30 <generate_code@@Base+0x6b0>
   16e74:	ldr	fp, [sl, #16]
   16e78:	ldr	r3, [r4, #8]
   16e7c:	mov	r1, fp
   16e80:	add	r3, r3, fp
   16e84:	str	r3, [r4, #8]
   16e88:	bl	168b8 <generate_code@@Base+0x138>
   16e8c:	cmp	fp, #0
   16e90:	mov	r9, r0
   16e94:	beq	16e30 <generate_code@@Base+0x6b0>
   16e98:	ldr	r2, [sl, #20]
   16e9c:	ldr	r3, [r4, #16]
   16ea0:	add	lr, r2, fp, lsl #3
   16ea4:	ldr	ip, [r4, #20]
   16ea8:	sub	lr, lr, #8
   16eac:	sub	r2, r2, #8
   16eb0:	ldrd	r0, [r2, #8]!
   16eb4:	ldrd	sl, [r4, #24]
   16eb8:	adds	r3, r3, r0
   16ebc:	adc	ip, ip, r1
   16ec0:	str	ip, [r4, #20]
   16ec4:	str	r3, [r4, #16]
   16ec8:	ldrd	r0, [r2]
   16ecc:	cmp	sl, r0
   16ed0:	sbcs	sl, fp, r1
   16ed4:	strdlt	r0, [r4, #24]
   16ed8:	cmp	lr, r2
   16edc:	bne	16eb0 <generate_code@@Base+0x730>
   16ee0:	cmp	r5, r7
   16ee4:	bne	16e38 <generate_code@@Base+0x6b8>
   16ee8:	ldr	r6, [r6, #4]
   16eec:	cmp	r6, #0
   16ef0:	beq	16f00 <generate_code@@Base+0x780>
   16ef4:	ldr	r5, [r8]
   16ef8:	b	16dc4 <generate_code@@Base+0x644>
   16efc:	ldr	r9, [sp, #4]
   16f00:	ldr	r0, [sp, #4]
   16f04:	mov	r1, r4
   16f08:	bl	16c90 <generate_code@@Base+0x510>
   16f0c:	mov	r0, r9
   16f10:	add	sp, sp, #12
   16f14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f18:	andeq	r1, r0, r8, asr #15
   16f1c:	push	{r4, r5, r6, lr}
   16f20:	mov	r4, r0
   16f24:	ldr	r0, [pc, #192]	; 16fec <generate_code@@Base+0x86c>
   16f28:	add	r0, pc, r0
   16f2c:	bl	11940 <getenv@plt>
   16f30:	subs	r3, r0, #0
   16f34:	beq	16f40 <generate_code@@Base+0x7c0>
   16f38:	bl	11a24 <atoi@plt>
   16f3c:	bic	r3, r0, r0, asr #31
   16f40:	ldr	r0, [pc, #168]	; 16ff0 <generate_code@@Base+0x870>
   16f44:	str	r3, [r4, #8]
   16f48:	add	r0, pc, r0
   16f4c:	bl	11940 <getenv@plt>
   16f50:	subs	r6, r0, #0
   16f54:	beq	16fc4 <generate_code@@Base+0x844>
   16f58:	bl	11988 <strlen@plt>
   16f5c:	ldr	r3, [r4, #4]
   16f60:	add	r3, r3, #2
   16f64:	cmp	r0, #0
   16f68:	bne	16fa4 <generate_code@@Base+0x824>
   16f6c:	ldr	r2, [r4, #8]
   16f70:	cmp	r2, #0
   16f74:	beq	16fd8 <generate_code@@Base+0x858>
   16f78:	ldr	r6, [pc, #116]	; 16ff4 <generate_code@@Base+0x874>
   16f7c:	mov	r5, #1
   16f80:	add	r6, pc, r6
   16f84:	str	r5, [r4, #12]
   16f88:	add	r0, r3, r5
   16f8c:	bl	1194c <malloc@plt>
   16f90:	mov	r2, r5
   16f94:	mov	r1, r6
   16f98:	str	r0, [r4]
   16f9c:	pop	{r4, r5, r6, lr}
   16fa0:	b	118f8 <memcpy@plt>
   16fa4:	sub	r5, r0, #1
   16fa8:	ldrb	r2, [r6, r5]
   16fac:	cmp	r2, #47	; 0x2f
   16fb0:	movne	r5, r0
   16fb4:	bne	16f84 <generate_code@@Base+0x804>
   16fb8:	cmp	r5, #0
   16fbc:	bne	16f84 <generate_code@@Base+0x804>
   16fc0:	b	16f6c <generate_code@@Base+0x7ec>
   16fc4:	ldr	r2, [r4, #8]
   16fc8:	ldr	r3, [r4, #4]
   16fcc:	cmp	r2, #0
   16fd0:	add	r3, r3, #2
   16fd4:	bne	16f78 <generate_code@@Base+0x7f8>
   16fd8:	str	r2, [r4, #12]
   16fdc:	mov	r0, r3
   16fe0:	bl	1194c <malloc@plt>
   16fe4:	str	r0, [r4]
   16fe8:	pop	{r4, r5, r6, pc}
   16fec:	andeq	r2, r0, ip, ror #4
   16ff0:	andeq	r2, r0, r0, ror #4
   16ff4:	andeq	r2, r0, r0, lsl r2
   16ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ffc:	sub	sp, sp, #6080	; 0x17c0
   17000:	sub	sp, sp, #36	; 0x24
   17004:	mov	r3, r0
   17008:	str	r1, [sp, #40]	; 0x28
   1700c:	mov	r1, #0
   17010:	mov	r4, r1
   17014:	str	r0, [sp, #56]	; 0x38
   17018:	add	r7, r3, #6016	; 0x1780
   1701c:	add	r0, sp, #64	; 0x40
   17020:	add	r6, sp, #2016	; 0x7e0
   17024:	ldr	r2, [pc, #984]	; 17404 <generate_code@@Base+0xc84>
   17028:	mov	r5, #251	; 0xfb
   1702c:	str	r0, [sp, #60]	; 0x3c
   17030:	str	r5, [sp, #52]	; 0x34
   17034:	str	r6, [sp, #36]	; 0x24
   17038:	mov	r9, r4
   1703c:	bl	119c4 <memset@plt>
   17040:	mov	sl, r4
   17044:	add	r3, r7, #8
   17048:	mov	r0, r4
   1704c:	str	r3, [sp, #48]	; 0x30
   17050:	sub	r3, r6, #1952	; 0x7a0
   17054:	str	r3, [sp, #44]	; 0x2c
   17058:	ldr	r3, [sp, #48]	; 0x30
   1705c:	ldr	r2, [r3, #16]
   17060:	ldr	r7, [r3]
   17064:	str	r2, [sp, #16]
   17068:	ldr	r2, [r3, #20]
   1706c:	cmp	r7, #0
   17070:	str	r2, [sp, #20]
   17074:	beq	17394 <generate_code@@Base+0xc14>
   17078:	ldrd	r2, [r3, #8]
   1707c:	str	r9, [sp, #12]
   17080:	strd	r2, [sp, #24]
   17084:	b	17164 <generate_code@@Base+0x9e4>
   17088:	bls	173f8 <generate_code@@Base+0xc78>
   1708c:	ldr	r3, [sp, #12]
   17090:	mov	r2, r4
   17094:	umull	r0, r1, r7, r3
   17098:	mov	r3, #0
   1709c:	mla	r1, r7, sl, r1
   170a0:	bl	18914 <__gcov_sort_n_vals@@Base+0x568>
   170a4:	mov	r6, r0
   170a8:	mov	r8, r1
   170ac:	ldr	r3, [sp, #12]
   170b0:	sub	r4, r4, r7
   170b4:	subs	r3, r3, r6
   170b8:	sbc	sl, sl, r8
   170bc:	mov	fp, r7
   170c0:	mov	r7, #0
   170c4:	str	r3, [sp, #12]
   170c8:	ldr	r0, [sp, #16]
   170cc:	ldr	r3, [sp, #20]
   170d0:	str	r7, [sp, #16]
   170d4:	str	r7, [sp, #20]
   170d8:	adds	r6, r6, r0
   170dc:	ldrd	r0, [sp]
   170e0:	adc	r8, r8, r3
   170e4:	bl	16bd4 <generate_code@@Base+0x454>
   170e8:	ldr	r3, [sp, #44]	; 0x2c
   170ec:	add	r1, r0, r0, lsl #1
   170f0:	lsl	r1, r1, #3
   170f4:	add	ip, r3, r1
   170f8:	ldr	r3, [sp, #36]	; 0x24
   170fc:	ldr	lr, [ip, #16]
   17100:	add	r1, r3, r1
   17104:	adds	r6, lr, r6
   17108:	ldr	lr, [ip, #20]
   1710c:	ldrd	r2, [ip, #8]
   17110:	adc	lr, lr, r8
   17114:	ldrd	r8, [sp]
   17118:	str	lr, [sp, #32]
   1711c:	orrs	lr, r2, r3
   17120:	moveq	lr, #1
   17124:	movne	lr, #0
   17128:	cmp	r8, r2
   1712c:	sbcs	r3, r9, r3
   17130:	orrlt	lr, lr, #1
   17134:	cmp	lr, #0
   17138:	str	r6, [ip, #16]
   1713c:	ldr	r6, [r1, #-1952]	; 0xfffff860
   17140:	ldr	r3, [sp, #32]
   17144:	strdne	r8, [ip, #8]
   17148:	cmp	r4, #0
   1714c:	add	fp, r6, fp
   17150:	subeq	r5, r5, #1
   17154:	cmp	r7, #0
   17158:	str	r3, [ip, #20]
   1715c:	str	fp, [r1, #-1952]	; 0xfffff860
   17160:	beq	17390 <generate_code@@Base+0xc10>
   17164:	cmp	r4, #0
   17168:	beq	171ec <generate_code@@Base+0xa6c>
   1716c:	add	r2, r5, r5, lsl #1
   17170:	ldr	r3, [sp, #40]	; 0x28
   17174:	add	r2, r3, r2, lsl #3
   17178:	ldrd	r0, [sp, #24]
   1717c:	ldr	r3, [r2, #8]
   17180:	ldr	r2, [r2, #12]
   17184:	adds	r3, r0, r3
   17188:	str	r3, [sp]
   1718c:	adc	r3, r1, r2
   17190:	cmp	r4, r7
   17194:	str	r3, [sp, #4]
   17198:	bcs	17088 <generate_code@@Base+0x908>
   1719c:	ldr	r6, [sp, #16]
   171a0:	ldr	r8, [sp, #20]
   171a4:	mov	r2, r7
   171a8:	umull	r0, r1, r4, r6
   171ac:	mov	r3, #0
   171b0:	mla	r1, r4, r8, r1
   171b4:	bl	18914 <__gcov_sort_n_vals@@Base+0x568>
   171b8:	sub	r7, r7, r4
   171bc:	mov	fp, r4
   171c0:	mov	r4, #0
   171c4:	subs	r2, r6, r0
   171c8:	str	r2, [sp, #16]
   171cc:	sbc	r2, r8, r1
   171d0:	ldr	r6, [sp, #12]
   171d4:	mov	r8, sl
   171d8:	mov	r3, r1
   171dc:	str	r2, [sp, #20]
   171e0:	str	r4, [sp, #12]
   171e4:	mov	sl, r4
   171e8:	b	170d8 <generate_code@@Base+0x958>
   171ec:	cmp	r5, #0
   171f0:	blt	173f0 <generate_code@@Base+0xc70>
   171f4:	ldr	r3, [sp, #40]	; 0x28
   171f8:	add	r2, r5, r5, lsl #1
   171fc:	ldr	r4, [r3, r2, lsl #3]
   17200:	add	r2, r3, r2, lsl #3
   17204:	cmp	r4, #0
   17208:	bne	17380 <generate_code@@Base+0xc00>
   1720c:	mov	r3, r2
   17210:	ldr	r9, [sp, #12]
   17214:	b	17228 <generate_code@@Base+0xaa8>
   17218:	ldr	r4, [r3]
   1721c:	mov	r2, r3
   17220:	cmp	r4, #0
   17224:	bne	17380 <generate_code@@Base+0xc00>
   17228:	subs	r5, r5, #1
   1722c:	sub	r3, r3, #24
   17230:	bcs	17218 <generate_code@@Base+0xa98>
   17234:	ldr	r2, [sp, #52]	; 0x34
   17238:	ldr	ip, [sp, #36]	; 0x24
   1723c:	ldr	r4, [sp, #16]
   17240:	lsl	r3, r2, #1
   17244:	add	r1, r3, r2
   17248:	sub	r2, ip, #1952	; 0x7a0
   1724c:	lsl	r1, r1, #3
   17250:	add	r2, r2, r1
   17254:	add	r1, ip, r1
   17258:	ldr	ip, [r2, #16]
   1725c:	ldr	lr, [r1, #-1952]	; 0xfffff860
   17260:	adds	ip, ip, r4
   17264:	add	r7, lr, r7
   17268:	ldrd	r4, [r2, #8]
   1726c:	ldr	lr, [r2, #20]
   17270:	str	r7, [r1, #-1952]	; 0xfffff860
   17274:	ldr	r1, [sp, #20]
   17278:	str	ip, [r2, #16]
   1727c:	adc	lr, lr, r1
   17280:	orrs	r1, r4, r5
   17284:	str	lr, [r2, #20]
   17288:	beq	17360 <generate_code@@Base+0xbe0>
   1728c:	ldrd	r6, [sp, #24]
   17290:	cmp	r6, r4
   17294:	sbcs	r2, r7, r5
   17298:	blt	17360 <generate_code@@Base+0xbe0>
   1729c:	ldr	r2, [sp, #52]	; 0x34
   172a0:	ldr	lr, [sp, #60]	; 0x3c
   172a4:	add	ip, r3, r2
   172a8:	ldr	r3, [sp, #56]	; 0x38
   172ac:	lsl	ip, ip, #3
   172b0:	add	r1, lr, ip
   172b4:	add	ip, r3, ip
   172b8:	b	17314 <generate_code@@Base+0xb94>
   172bc:	ldr	r3, [r1, #-8]
   172c0:	ldr	r6, [ip, #-8]
   172c4:	ldr	r7, [ip, #-4]
   172c8:	ldr	r2, [r1, #-4]
   172cc:	adds	r6, r3, r6
   172d0:	ldrd	r4, [r1, #-16]
   172d4:	adc	r2, r2, r7
   172d8:	ldr	r3, [r1, #-24]	; 0xffffffe8
   172dc:	ldr	r7, [ip, #-24]	; 0xffffffe8
   172e0:	orrs	r8, r4, r5
   172e4:	add	r3, r3, r7
   172e8:	str	r2, [r1, #-4]
   172ec:	str	r3, [r1, #-24]	; 0xffffffe8
   172f0:	str	r6, [r1, #-8]
   172f4:	ldrd	r2, [ip, #-16]
   172f8:	sub	ip, ip, #24
   172fc:	beq	1730c <generate_code@@Base+0xb8c>
   17300:	cmp	r2, r4
   17304:	sbcs	r4, r3, r5
   17308:	bge	17310 <generate_code@@Base+0xb90>
   1730c:	strd	r2, [r1, #-16]
   17310:	sub	r1, r1, #24
   17314:	cmp	r1, lr
   17318:	bne	172bc <generate_code@@Base+0xb3c>
   1731c:	ldr	r3, [sp, #36]	; 0x24
   17320:	add	r0, r0, r0, lsl #1
   17324:	sub	r3, r3, #1952	; 0x7a0
   17328:	add	r3, r3, r0, lsl #3
   1732c:	ldr	r1, [sp, #60]	; 0x3c
   17330:	ldr	r2, [r3, #16]
   17334:	ldr	ip, [r3, #20]
   17338:	adds	r9, r2, r9
   1733c:	adc	sl, ip, sl
   17340:	ldr	r0, [sp, #56]	; 0x38
   17344:	ldr	r2, [pc, #184]	; 17404 <generate_code@@Base+0xc84>
   17348:	str	r9, [r3, #16]
   1734c:	str	sl, [r3, #20]
   17350:	bl	118f8 <memcpy@plt>
   17354:	add	sp, sp, #6080	; 0x17c0
   17358:	add	sp, sp, #36	; 0x24
   1735c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17360:	ldr	r2, [sp, #52]	; 0x34
   17364:	ldrd	r4, [sp, #24]
   17368:	add	r1, r3, r2
   1736c:	ldr	r2, [sp, #36]	; 0x24
   17370:	sub	r2, r2, #1952	; 0x7a0
   17374:	add	r2, r2, r1, lsl #3
   17378:	strd	r4, [r2, #8]
   1737c:	b	1729c <generate_code@@Base+0xb1c>
   17380:	ldr	r3, [r2, #16]
   17384:	ldr	sl, [r2, #20]
   17388:	str	r3, [sp, #12]
   1738c:	b	17178 <generate_code@@Base+0x9f8>
   17390:	ldr	r9, [sp, #12]
   17394:	ldr	r3, [sp, #52]	; 0x34
   17398:	sub	r3, r3, #1
   1739c:	str	r3, [sp, #52]	; 0x34
   173a0:	cmn	r3, #1
   173a4:	ldr	r3, [sp, #48]	; 0x30
   173a8:	sub	r3, r3, #24
   173ac:	str	r3, [sp, #48]	; 0x30
   173b0:	bne	17058 <generate_code@@Base+0x8d8>
   173b4:	cmp	r4, #0
   173b8:	subne	r5, r5, #1
   173bc:	cmp	r5, #0
   173c0:	blt	1731c <generate_code@@Base+0xb9c>
   173c4:	add	r5, r5, r5, lsl #1
   173c8:	ldr	ip, [sp, #40]	; 0x28
   173cc:	add	r3, ip, r5, lsl #3
   173d0:	ldr	r2, [r3, #16]
   173d4:	ldr	r1, [r3, #20]
   173d8:	adds	r9, r9, r2
   173dc:	adc	sl, sl, r1
   173e0:	cmp	ip, r3
   173e4:	sub	r3, r3, #24
   173e8:	bne	173d0 <generate_code@@Base+0xc50>
   173ec:	b	1731c <generate_code@@Base+0xb9c>
   173f0:	ldr	r9, [sp, #12]
   173f4:	b	17234 <generate_code@@Base+0xab4>
   173f8:	ldr	r6, [sp, #12]
   173fc:	mov	r8, sl
   17400:	b	170ac <generate_code@@Base+0x92c>
   17404:	andeq	r1, r0, r0, lsr #15
   17408:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1740c:	ldrb	r4, [r0]
   17410:	cmp	r4, #47	; 0x2f
   17414:	addeq	r5, r0, #1
   17418:	ldrbeq	r4, [r0, #1]
   1741c:	movne	r5, r0
   17420:	cmp	r4, #0
   17424:	beq	17478 <generate_code@@Base+0xcf8>
   17428:	mov	r6, r0
   1742c:	mov	r7, #0
   17430:	mov	r8, #47	; 0x2f
   17434:	ldr	sl, [pc, #136]	; 174c4 <generate_code@@Base+0xd44>
   17438:	b	17448 <generate_code@@Base+0xcc8>
   1743c:	ldrb	r4, [r5, #1]!
   17440:	cmp	r4, #0
   17444:	beq	17478 <generate_code@@Base+0xcf8>
   17448:	cmp	r4, #47	; 0x2f
   1744c:	bne	1743c <generate_code@@Base+0xcbc>
   17450:	strb	r7, [r5]
   17454:	mov	r1, #0
   17458:	mov	r0, r6
   1745c:	bl	119dc <access@plt>
   17460:	cmn	r0, #1
   17464:	beq	17484 <generate_code@@Base+0xd04>
   17468:	strb	r8, [r5]
   1746c:	ldrb	r4, [r5, #1]!
   17470:	cmp	r4, #0
   17474:	bne	17448 <generate_code@@Base+0xcc8>
   17478:	mov	r9, #0
   1747c:	mov	r0, r9
   17480:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17484:	mov	r1, sl
   17488:	mov	r0, r6
   1748c:	bl	119b8 <mkdir@plt>
   17490:	cmn	r0, #1
   17494:	mov	r9, r0
   17498:	bne	17468 <generate_code@@Base+0xce8>
   1749c:	bl	119ac <__errno_location@plt>
   174a0:	ldr	r3, [r0]
   174a4:	cmp	r3, #17
   174a8:	beq	17468 <generate_code@@Base+0xce8>
   174ac:	ldr	r0, [pc, #20]	; 174c8 <generate_code@@Base+0xd48>
   174b0:	mov	r1, r6
   174b4:	add	r0, pc, r0
   174b8:	bl	16b3c <generate_code@@Base+0x3bc>
   174bc:	strb	r4, [r5]
   174c0:	b	1747c <generate_code@@Base+0xcfc>
   174c4:	andeq	r0, r0, sp, ror #3
   174c8:	andeq	r1, r0, r0, lsl #26
   174cc:	ldr	r3, [pc, #76]	; 17520 <generate_code@@Base+0xda0>
   174d0:	cmp	r1, r3
   174d4:	beq	17518 <generate_code@@Base+0xd98>
   174d8:	cmp	r2, #0
   174dc:	ldr	ip, [pc, #64]	; 17524 <generate_code@@Base+0xda4>
   174e0:	push	{lr}		; (str lr, [sp, #-4]!)
   174e4:	rev	r3, r1
   174e8:	sub	sp, sp, #12
   174ec:	ldreq	r2, [r0]
   174f0:	ldr	r0, [pc, #48]	; 17528 <generate_code@@Base+0xda8>
   174f4:	stm	sp, {r3, ip}
   174f8:	mov	r1, r2
   174fc:	mov	r3, sp
   17500:	add	r2, sp, #4
   17504:	add	r0, pc, r0
   17508:	bl	16b3c <generate_code@@Base+0x3bc>
   1750c:	mov	r0, #0
   17510:	add	sp, sp, #12
   17514:	pop	{pc}		; (ldr pc, [sp], #4)
   17518:	mov	r0, #1
   1751c:	bx	lr
   17520:	teqmi	r8, sl, lsr #6
   17524:	bcs	ce5630 <__bss_end__@@Base+0xcb8e8c>
   17528:	ldrdeq	r1, [r0], -r8
   1752c:	ldr	r2, [r2]
   17530:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17534:	cmp	r2, #0
   17538:	mov	r4, r3
   1753c:	ldr	r2, [r3, #12]
   17540:	ldr	r3, [sp, #32]
   17544:	beq	17630 <generate_code@@Base+0xeb0>
   17548:	cmp	r1, #0
   1754c:	addeq	r1, r2, #1
   17550:	streq	r1, [r4, #12]
   17554:	cmp	r2, #0
   17558:	ldr	r0, [r4, #16]
   1755c:	ldr	lr, [r4, #20]
   17560:	ldrd	r6, [r4, #24]
   17564:	ldr	r2, [r4, #32]
   17568:	ldr	r1, [r4, #36]	; 0x24
   1756c:	bne	175dc <generate_code@@Base+0xe5c>
   17570:	ldr	ip, [r3, #8]
   17574:	str	ip, [r4, #8]
   17578:	ldr	ip, [r3, #16]
   1757c:	ldr	r5, [r3, #20]
   17580:	adds	r0, ip, r0
   17584:	adc	lr, r5, lr
   17588:	str	r0, [r4, #16]
   1758c:	str	lr, [r4, #20]
   17590:	ldrd	r8, [r3, #24]
   17594:	cmp	r6, r8
   17598:	sbcs	r0, r7, r9
   1759c:	bge	17650 <generate_code@@Base+0xed0>
   175a0:	strd	r8, [r4, #24]
   175a4:	ldr	r0, [r3, #24]
   175a8:	ldr	ip, [r3, #28]
   175ac:	adds	r2, r0, r2
   175b0:	adc	r1, ip, r1
   175b4:	str	r1, [r4, #36]	; 0x24
   175b8:	str	r2, [r4, #32]
   175bc:	add	r1, r3, #40	; 0x28
   175c0:	ldr	r2, [pc, #176]	; 17678 <generate_code@@Base+0xef8>
   175c4:	add	r0, r4, #40	; 0x28
   175c8:	bl	118f8 <memcpy@plt>
   175cc:	ldr	r3, [sp, #36]	; 0x24
   175d0:	mov	r0, #0
   175d4:	str	r3, [r4]
   175d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   175dc:	ldr	ip, [r3, #16]
   175e0:	ldr	r5, [r3, #20]
   175e4:	adds	r0, ip, r0
   175e8:	adc	lr, r5, lr
   175ec:	str	r0, [r4, #16]
   175f0:	str	lr, [r4, #20]
   175f4:	ldrd	r8, [r3, #24]
   175f8:	cmp	r6, r8
   175fc:	sbcs	r0, r7, r9
   17600:	bge	17664 <generate_code@@Base+0xee4>
   17604:	strd	r8, [r4, #24]
   17608:	ldr	r0, [r3, #24]
   1760c:	ldr	ip, [r3, #28]
   17610:	adds	r2, r0, r2
   17614:	adc	r1, ip, r1
   17618:	str	r1, [r4, #36]	; 0x24
   1761c:	str	r2, [r4, #32]
   17620:	add	r1, r3, #40	; 0x28
   17624:	add	r0, r4, #40	; 0x28
   17628:	bl	16ff8 <generate_code@@Base+0x878>
   1762c:	b	175cc <generate_code@@Base+0xe4c>
   17630:	cmp	r2, #0
   17634:	beq	175cc <generate_code@@Base+0xe4c>
   17638:	mov	r1, r0
   1763c:	ldr	r0, [pc, #56]	; 1767c <generate_code@@Base+0xefc>
   17640:	add	r0, pc, r0
   17644:	bl	16b3c <generate_code@@Base+0x3bc>
   17648:	mvn	r0, #0
   1764c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17650:	adds	r2, r2, r8
   17654:	adc	r1, r1, r9
   17658:	str	r1, [r4, #36]	; 0x24
   1765c:	str	r2, [r4, #32]
   17660:	b	175bc <generate_code@@Base+0xe3c>
   17664:	adds	r2, r2, r8
   17668:	adc	r1, r1, r9
   1766c:	str	r1, [r4, #36]	; 0x24
   17670:	str	r2, [r4, #32]
   17674:	b	17620 <generate_code@@Base+0xea0>
   17678:	andeq	r1, r0, r0, lsr #15
   1767c:	ldrdeq	r1, [r0], -r4
   17680:	ldr	r0, [pc, #52]	; 176bc <generate_code@@Base+0xf3c>
   17684:	ldr	r3, [pc, #52]	; 176c0 <generate_code@@Base+0xf40>
   17688:	add	r0, pc, r0
   1768c:	push	{lr}		; (str lr, [sp, #-4]!)
   17690:	mov	ip, #0
   17694:	ldr	r3, [r0, r3]
   17698:	mvn	lr, #0
   1769c:	mov	r2, ip
   176a0:	str	lr, [r3, #24]
   176a4:	mov	r1, ip
   176a8:	ldr	r0, [r3]
   176ac:	pop	{lr}		; (ldr lr, [sp], #4)
   176b0:	str	ip, [r3, #4]
   176b4:	str	ip, [r3, #8]
   176b8:	b	11a3c <fseek@plt>
   176bc:	andeq	r2, r1, r0, ror r9
   176c0:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   176c4:	push	{r4, r5, r6, r7, lr}
   176c8:	mov	r2, #0
   176cc:	sub	sp, sp, #36	; 0x24
   176d0:	mov	r3, #0
   176d4:	mov	r4, #0
   176d8:	mov	r6, r0
   176dc:	strd	r2, [sp, #8]
   176e0:	strd	r2, [sp, #16]
   176e4:	strh	r4, [sp, #2]
   176e8:	bl	11970 <getpid@plt>
   176ec:	ldr	r3, [pc, #196]	; 177b8 <generate_code@@Base+0x1038>
   176f0:	ldr	ip, [pc, #196]	; 177bc <generate_code@@Base+0x103c>
   176f4:	add	r3, pc, r3
   176f8:	mvn	lr, #0
   176fc:	mov	r7, #1
   17700:	ldr	r2, [pc, #184]	; 177c0 <generate_code@@Base+0x1040>
   17704:	mov	r1, #66	; 0x42
   17708:	str	r0, [sp, #24]
   1770c:	ldr	r5, [r3, ip]
   17710:	mov	r0, r6
   17714:	strh	r7, [sp]
   17718:	str	r4, [r5, #4]
   1771c:	str	r4, [r5, #12]
   17720:	str	r4, [r5, #8]
   17724:	str	r4, [r5, #20]
   17728:	str	lr, [r5, #16]
   1772c:	bl	11934 <open64@plt>
   17730:	subs	r6, r0, #0
   17734:	movlt	r0, r4
   17738:	blt	1779c <generate_code@@Base+0x101c>
   1773c:	mov	r4, sp
   17740:	mov	r2, r4
   17744:	mov	r1, #14
   17748:	mov	r0, r6
   1774c:	bl	11a00 <fcntl64@plt>
   17750:	cmp	r0, #0
   17754:	beq	17768 <generate_code@@Base+0xfe8>
   17758:	bl	119ac <__errno_location@plt>
   1775c:	ldr	r3, [r0]
   17760:	cmp	r3, #4
   17764:	beq	17740 <generate_code@@Base+0xfc0>
   17768:	ldr	r1, [pc, #84]	; 177c4 <generate_code@@Base+0x1044>
   1776c:	mov	r0, r6
   17770:	add	r1, pc, r1
   17774:	bl	118b0 <fdopen@plt>
   17778:	cmp	r0, #0
   1777c:	mov	r4, r0
   17780:	str	r0, [r5]
   17784:	beq	177a4 <generate_code@@Base+0x1024>
   17788:	mov	r4, #1
   1778c:	mov	r1, #0
   17790:	str	r4, [r5, #24]
   17794:	bl	118c8 <setbuf@plt>
   17798:	mov	r0, r4
   1779c:	add	sp, sp, #36	; 0x24
   177a0:	pop	{r4, r5, r6, r7, pc}
   177a4:	mov	r0, r6
   177a8:	bl	11a60 <close@plt>
   177ac:	mov	r0, r4
   177b0:	add	sp, sp, #36	; 0x24
   177b4:	pop	{r4, r5, r6, r7, pc}
   177b8:	andeq	r2, r1, r4, lsl #18
   177bc:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   177c0:			; <UNDEFINED> instruction: 0x000001b6
   177c4:	ldrdeq	r1, [r0], -r0
   177c8:	push	{r4, r5, r6, lr}
   177cc:	mov	r4, r1
   177d0:	ldr	r5, [pc, #248]	; 178d0 <generate_code@@Base+0x1150>
   177d4:	ldr	ip, [r4, #8]
   177d8:	ldr	lr, [r4, #12]
   177dc:	ldr	r6, [r4]
   177e0:	cmp	ip, #0
   177e4:	mov	r1, r0
   177e8:	add	r5, pc, r5
   177ec:	add	r0, r6, lr
   177f0:	ble	1782c <generate_code@@Base+0x10ac>
   177f4:	ldrb	r3, [r1]
   177f8:	cmp	r3, #47	; 0x2f
   177fc:	addeq	r2, r1, #1
   17800:	ldrbeq	r3, [r1, #1]
   17804:	movne	r2, r1
   17808:	cmp	r3, #0
   1780c:	beq	1782c <generate_code@@Base+0x10ac>
   17810:	cmp	r3, #47	; 0x2f
   17814:	moveq	r1, r2
   17818:	ldrb	r3, [r2, #1]!
   1781c:	subeq	ip, ip, #1
   17820:	cmp	r3, #0
   17824:	cmpne	ip, #0
   17828:	bne	17810 <generate_code@@Base+0x1090>
   1782c:	cmp	lr, #0
   17830:	bne	17850 <generate_code@@Base+0x10d0>
   17834:	bl	1191c <strcpy@plt>
   17838:	ldr	r0, [r4]
   1783c:	bl	176c4 <generate_code@@Base+0xf44>
   17840:	cmp	r0, #0
   17844:	beq	17868 <generate_code@@Base+0x10e8>
   17848:	mov	r0, #0
   1784c:	pop	{r4, r5, r6, pc}
   17850:	ldrb	r3, [r1]
   17854:	cmp	r3, #47	; 0x2f
   17858:	movne	r3, #47	; 0x2f
   1785c:	addne	r0, r0, #1
   17860:	strbne	r3, [r6, lr]
   17864:	b	17834 <generate_code@@Base+0x10b4>
   17868:	ldr	r0, [r4]
   1786c:	bl	17408 <generate_code@@Base+0xc88>
   17870:	cmp	r0, #0
   17874:	bne	178ac <generate_code@@Base+0x112c>
   17878:	ldr	r0, [r4]
   1787c:	bl	176c4 <generate_code@@Base+0xf44>
   17880:	cmp	r0, #0
   17884:	bne	17848 <generate_code@@Base+0x10c8>
   17888:	ldr	r3, [pc, #68]	; 178d4 <generate_code@@Base+0x1154>
   1788c:	ldr	r1, [pc, #68]	; 178d8 <generate_code@@Base+0x1158>
   17890:	ldr	r2, [r4]
   17894:	ldr	r3, [r5, r3]
   17898:	add	r1, pc, r1
   1789c:	ldr	r0, [r3]
   178a0:	bl	119a0 <fprintf@plt>
   178a4:	mvn	r0, #0
   178a8:	pop	{r4, r5, r6, pc}
   178ac:	ldr	r3, [pc, #32]	; 178d4 <generate_code@@Base+0x1154>
   178b0:	ldr	r1, [pc, #36]	; 178dc <generate_code@@Base+0x115c>
   178b4:	ldr	r2, [r4]
   178b8:	ldr	r3, [r5, r3]
   178bc:	add	r1, pc, r1
   178c0:	ldr	r0, [r3]
   178c4:	bl	119a0 <fprintf@plt>
   178c8:	mvn	r0, #0
   178cc:	pop	{r4, r5, r6, pc}
   178d0:	andeq	r2, r1, r0, lsl r8
   178d4:	andeq	r0, r0, r4, lsr #1
   178d8:	andeq	r1, r0, r0, asr #19
   178dc:	andeq	r1, r0, r8, lsl #19
   178e0:	ldr	r3, [pc, #96]	; 17948 <generate_code@@Base+0x11c8>
   178e4:	ldr	r2, [pc, #96]	; 1794c <generate_code@@Base+0x11cc>
   178e8:	add	r3, pc, r3
   178ec:	push	{r4, lr}
   178f0:	ldr	r4, [r3, r2]
   178f4:	ldr	r0, [r4]
   178f8:	cmp	r0, #0
   178fc:	beq	1791c <generate_code@@Base+0x119c>
   17900:	ldr	r3, [r4, #8]
   17904:	cmp	r3, #0
   17908:	bne	1792c <generate_code@@Base+0x11ac>
   1790c:	bl	119e8 <fclose@plt>
   17910:	mov	r3, #0
   17914:	str	r3, [r4]
   17918:	str	r3, [r4, #12]
   1791c:	mov	r3, #0
   17920:	str	r3, [r4, #24]
   17924:	ldr	r0, [r4, #20]
   17928:	pop	{r4, pc}
   1792c:	ldr	r2, [r4, #24]
   17930:	cmp	r2, #0
   17934:	bge	1790c <generate_code@@Base+0x118c>
   17938:	mov	r0, r3
   1793c:	bl	16934 <generate_code@@Base+0x1b4>
   17940:	ldr	r0, [r4]
   17944:	b	1790c <generate_code@@Base+0x118c>
   17948:	andeq	r2, r1, r0, lsl r7
   1794c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   17950:	push	{r4, lr}
   17954:	mov	r4, r0
   17958:	mov	r0, #1
   1795c:	bl	16990 <generate_code@@Base+0x210>
   17960:	str	r4, [r0]
   17964:	pop	{r4, pc}
   17968:	push	{r4, r5, r6, lr}
   1796c:	mov	r5, r0
   17970:	mov	r0, #2
   17974:	mov	r4, r1
   17978:	bl	16990 <generate_code@@Base+0x210>
   1797c:	str	r5, [r0]
   17980:	str	r4, [r0, #4]
   17984:	pop	{r4, r5, r6, pc}
   17988:	push	{r4, r5, r6, lr}
   1798c:	mov	r5, r0
   17990:	mov	r0, #2
   17994:	mov	r4, r1
   17998:	bl	16990 <generate_code@@Base+0x210>
   1799c:	str	r5, [r0]
   179a0:	str	r4, [r0, #4]
   179a4:	pop	{r4, r5, r6, pc}
   179a8:	mov	r2, #0
   179ac:	push	{r4, r5, r6, r7, r8, lr}
   179b0:	mov	r3, r2
   179b4:	sub	sp, sp, #32
   179b8:	mov	r5, r1
   179bc:	mov	r7, r2
   179c0:	mov	r4, r1
   179c4:	mov	r8, #1
   179c8:	str	r2, [sp]
   179cc:	str	r2, [sp, #4]
   179d0:	str	r2, [sp, #8]
   179d4:	str	r2, [sp, #12]
   179d8:	str	r2, [sp, #16]
   179dc:	str	r2, [sp, #20]
   179e0:	str	r2, [sp, #24]
   179e4:	str	r2, [sp, #28]
   179e8:	lsr	r2, r3, #5
   179ec:	ldr	lr, [r1, #40]	; 0x28
   179f0:	add	ip, sp, #32
   179f4:	cmp	lr, #0
   179f8:	add	r2, ip, r2, lsl #2
   179fc:	and	r6, r3, #31
   17a00:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   17a04:	add	r3, r3, #1
   17a08:	orrne	ip, ip, r8, lsl r6
   17a0c:	addne	r7, r7, #1
   17a10:	strne	ip, [r2, #-32]	; 0xffffffe0
   17a14:	cmp	r3, #252	; 0xfc
   17a18:	add	r1, r1, #24
   17a1c:	bne	179e8 <generate_code@@Base+0x1268>
   17a20:	add	r7, r7, r7, lsl #2
   17a24:	add	r1, r7, #17
   17a28:	bl	17988 <generate_code@@Base+0x1208>
   17a2c:	ldr	r0, [r5]
   17a30:	bl	17950 <generate_code@@Base+0x11d0>
   17a34:	ldr	r0, [r5, #8]
   17a38:	bl	17950 <generate_code@@Base+0x11d0>
   17a3c:	ldr	r0, [r5, #12]
   17a40:	bl	17950 <generate_code@@Base+0x11d0>
   17a44:	ldrd	r0, [r5, #16]
   17a48:	bl	17968 <generate_code@@Base+0x11e8>
   17a4c:	ldrd	r0, [r5, #24]
   17a50:	bl	17968 <generate_code@@Base+0x11e8>
   17a54:	ldrd	r0, [r5, #32]
   17a58:	bl	17968 <generate_code@@Base+0x11e8>
   17a5c:	sub	r6, sp, #4
   17a60:	add	r7, sp, #28
   17a64:	ldr	r0, [r6, #4]!
   17a68:	bl	17950 <generate_code@@Base+0x11d0>
   17a6c:	cmp	r7, r6
   17a70:	bne	17a64 <generate_code@@Base+0x12e4>
   17a74:	add	r5, r5, #6016	; 0x1780
   17a78:	add	r5, r5, #32
   17a7c:	ldr	r3, [r4, #40]	; 0x28
   17a80:	subs	r0, r3, #0
   17a84:	beq	17a9c <generate_code@@Base+0x131c>
   17a88:	bl	17950 <generate_code@@Base+0x11d0>
   17a8c:	ldrd	r0, [r4, #48]	; 0x30
   17a90:	bl	17968 <generate_code@@Base+0x11e8>
   17a94:	ldrd	r0, [r4, #56]	; 0x38
   17a98:	bl	17968 <generate_code@@Base+0x11e8>
   17a9c:	add	r4, r4, #24
   17aa0:	cmp	r4, r5
   17aa4:	bne	17a7c <generate_code@@Base+0x12fc>
   17aa8:	add	sp, sp, #32
   17aac:	pop	{r4, r5, r6, r7, r8, pc}
   17ab0:	push	{r4, lr}
   17ab4:	mov	r0, #1
   17ab8:	bl	169f0 <generate_code@@Base+0x270>
   17abc:	subs	r3, r0, #0
   17ac0:	popeq	{r4, pc}
   17ac4:	ldr	r0, [r3]
   17ac8:	pop	{r4, lr}
   17acc:	b	168b4 <generate_code@@Base+0x134>
   17ad0:	push	{r4, lr}
   17ad4:	mov	r0, #2
   17ad8:	bl	169f0 <generate_code@@Base+0x270>
   17adc:	subs	r2, r0, #0
   17ae0:	beq	17b04 <generate_code@@Base+0x1384>
   17ae4:	ldr	r0, [r2]
   17ae8:	bl	168b4 <generate_code@@Base+0x134>
   17aec:	mov	r3, r0
   17af0:	ldr	r0, [r2, #4]
   17af4:	bl	168b4 <generate_code@@Base+0x134>
   17af8:	mov	r1, r0
   17afc:	mov	r0, r3
   17b00:	pop	{r4, pc}
   17b04:	mov	r3, r2
   17b08:	mov	r1, r2
   17b0c:	mov	r0, r3
   17b10:	pop	{r4, pc}
   17b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b18:	sub	sp, sp, #28
   17b1c:	mov	r8, r1
   17b20:	str	r3, [sp, #12]
   17b24:	mov	r4, #0
   17b28:	add	r3, r1, #52	; 0x34
   17b2c:	add	r1, r1, #16
   17b30:	str	r0, [sp, #20]
   17b34:	str	r2, [sp, #16]
   17b38:	ldr	r2, [r3, #-4]!
   17b3c:	cmp	r2, #0
   17b40:	addne	r4, r4, #1
   17b44:	cmp	r1, r3
   17b48:	bne	17b38 <generate_code@@Base+0x13b8>
   17b4c:	add	r4, r4, #4
   17b50:	lsl	r4, r4, #3
   17b54:	mov	r0, r4
   17b58:	bl	1194c <malloc@plt>
   17b5c:	subs	r6, r0, #0
   17b60:	beq	17c34 <generate_code@@Base+0x14b4>
   17b64:	ldr	r3, [sp, #12]
   17b68:	mov	r4, #0
   17b6c:	str	r3, [r6, #4]
   17b70:	str	r4, [r6]
   17b74:	bl	17ab0 <generate_code@@Base+0x1330>
   17b78:	mov	r7, r4
   17b7c:	add	r5, r8, #12
   17b80:	str	r0, [r6, #12]
   17b84:	bl	17ab0 <generate_code@@Base+0x1330>
   17b88:	str	r0, [r6, #16]
   17b8c:	bl	17ab0 <generate_code@@Base+0x1330>
   17b90:	str	r0, [r6, #20]
   17b94:	b	17ba4 <generate_code@@Base+0x1424>
   17b98:	add	r4, r4, #1
   17b9c:	cmp	r4, #9
   17ba0:	beq	17c20 <generate_code@@Base+0x14a0>
   17ba4:	ldr	r3, [r5, #4]!
   17ba8:	cmp	r3, #0
   17bac:	beq	17b98 <generate_code@@Base+0x1418>
   17bb0:	bl	17ab0 <generate_code@@Base+0x1330>
   17bb4:	lsl	r3, r4, #17
   17bb8:	add	r3, r3, #27262976	; 0x1a00000
   17bbc:	add	r3, r3, #65536	; 0x10000
   17bc0:	cmp	r0, r3
   17bc4:	bne	17c88 <generate_code@@Base+0x1508>
   17bc8:	bl	17ab0 <generate_code@@Base+0x1330>
   17bcc:	lsr	sl, r0, #1
   17bd0:	lsl	fp, sl, #3
   17bd4:	mov	r0, fp
   17bd8:	bl	1194c <malloc@plt>
   17bdc:	subs	r9, r0, #0
   17be0:	beq	17c98 <generate_code@@Base+0x1518>
   17be4:	add	r1, r6, r7, lsl #3
   17be8:	cmp	sl, #0
   17bec:	str	sl, [r1, #24]
   17bf0:	str	r9, [r1, #28]
   17bf4:	sub	fp, sl, #1
   17bf8:	beq	17c10 <generate_code@@Base+0x1490>
   17bfc:	bl	17ad0 <generate_code@@Base+0x1350>
   17c00:	sub	fp, fp, #1
   17c04:	cmn	fp, #1
   17c08:	strd	r0, [r9], #8
   17c0c:	bne	17bfc <generate_code@@Base+0x147c>
   17c10:	add	r4, r4, #1
   17c14:	cmp	r4, #9
   17c18:	add	r7, r7, #1
   17c1c:	bne	17ba4 <generate_code@@Base+0x1424>
   17c20:	ldr	r3, [sp, #16]
   17c24:	mov	r0, r6
   17c28:	str	r6, [r3]
   17c2c:	add	sp, sp, #28
   17c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c34:	mvn	r5, #0
   17c38:	cmp	r4, #0
   17c3c:	bne	17c7c <generate_code@@Base+0x14fc>
   17c40:	ldr	r3, [pc, #92]	; 17ca4 <generate_code@@Base+0x1524>
   17c44:	mov	r4, r5
   17c48:	add	r3, pc, r3
   17c4c:	ldr	r0, [pc, #84]	; 17ca8 <generate_code@@Base+0x1528>
   17c50:	ldr	r2, [sp, #12]
   17c54:	ldr	r1, [sp, #20]
   17c58:	str	r4, [sp]
   17c5c:	add	r0, pc, r0
   17c60:	bl	16b3c <generate_code@@Base+0x3bc>
   17c64:	mov	r2, r5
   17c68:	mov	r1, r6
   17c6c:	mov	r0, r8
   17c70:	add	sp, sp, #28
   17c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c78:	b	16b70 <generate_code@@Base+0x3f0>
   17c7c:	ldr	r3, [pc, #40]	; 17cac <generate_code@@Base+0x152c>
   17c80:	add	r3, pc, r3
   17c84:	b	17c4c <generate_code@@Base+0x14cc>
   17c88:	ldr	r3, [pc, #32]	; 17cb0 <generate_code@@Base+0x1530>
   17c8c:	mov	r5, r4
   17c90:	add	r3, pc, r3
   17c94:	b	17c4c <generate_code@@Base+0x14cc>
   17c98:	mov	r5, r4
   17c9c:	mov	r4, fp
   17ca0:	b	17c38 <generate_code@@Base+0x14b8>
   17ca4:	andeq	r1, r0, ip, lsr #12
   17ca8:	andeq	r1, r0, ip, lsr r6
   17cac:	andeq	r1, r0, r8, lsl #12
   17cb0:	andeq	r1, r0, r4, ror #11
   17cb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cb8:	sub	sp, sp, #36	; 0x24
   17cbc:	mov	r9, r0
   17cc0:	bl	17ab0 <generate_code@@Base+0x1330>
   17cc4:	mov	r7, #0
   17cc8:	sub	r4, sp, #4
   17ccc:	add	r5, sp, #28
   17cd0:	str	r0, [r9]
   17cd4:	bl	17ab0 <generate_code@@Base+0x1330>
   17cd8:	str	r0, [r9, #8]
   17cdc:	bl	17ab0 <generate_code@@Base+0x1330>
   17ce0:	str	r0, [r9, #12]
   17ce4:	bl	17ad0 <generate_code@@Base+0x1350>
   17ce8:	strd	r0, [r9, #16]
   17cec:	bl	17ad0 <generate_code@@Base+0x1350>
   17cf0:	strd	r0, [r9, #24]
   17cf4:	bl	17ad0 <generate_code@@Base+0x1350>
   17cf8:	ldr	r2, [pc, #264]	; 17e08 <generate_code@@Base+0x1688>
   17cfc:	strd	r0, [r9, #32]
   17d00:	add	r0, r9, #40	; 0x28
   17d04:	mov	r1, r7
   17d08:	bl	119c4 <memset@plt>
   17d0c:	bl	17ab0 <generate_code@@Base+0x1330>
   17d10:	str	r0, [r4, #4]!
   17d14:	bl	189f8 <__gcov_sort_n_vals@@Base+0x64c>
   17d18:	cmp	r4, r5
   17d1c:	add	r7, r7, r0
   17d20:	bne	17d0c <generate_code@@Base+0x158c>
   17d24:	cmp	r7, #0
   17d28:	sub	r7, r7, #1
   17d2c:	beq	17df4 <generate_code@@Base+0x1674>
   17d30:	ldr	r8, [pc, #212]	; 17e0c <generate_code@@Base+0x168c>
   17d34:	ldr	sl, [pc, #212]	; 17e10 <generate_code@@Base+0x1690>
   17d38:	mov	r4, #0
   17d3c:	add	r8, pc, r8
   17d40:	add	sl, pc, sl
   17d44:	mov	r5, r4
   17d48:	mov	r6, r4
   17d4c:	cmp	r4, #0
   17d50:	addeq	r3, sp, #32
   17d54:	addeq	r6, r3, r5, lsl #2
   17d58:	subeq	r6, r6, #36	; 0x24
   17d5c:	beq	17d78 <generate_code@@Base+0x15f8>
   17d60:	b	17da0 <generate_code@@Base+0x1620>
   17d64:	ldr	r4, [r6, #4]!
   17d68:	add	r3, r5, #1
   17d6c:	cmp	r4, #0
   17d70:	bne	17d98 <generate_code@@Base+0x1618>
   17d74:	mov	r5, r3
   17d78:	cmp	r5, #7
   17d7c:	bls	17d64 <generate_code@@Base+0x15e4>
   17d80:	mov	r0, r8
   17d84:	bl	16b3c <generate_code@@Base+0x3bc>
   17d88:	ldr	r4, [r6, #4]!
   17d8c:	add	r3, r5, #1
   17d90:	cmp	r4, #0
   17d94:	beq	17d74 <generate_code@@Base+0x15f4>
   17d98:	lsl	r6, r5, #5
   17d9c:	mov	r5, r3
   17da0:	tst	r4, #1
   17da4:	bne	17db8 <generate_code@@Base+0x1638>
   17da8:	lsr	r4, r4, #1
   17dac:	tst	r4, #1
   17db0:	add	r6, r6, #1
   17db4:	beq	17da8 <generate_code@@Base+0x1628>
   17db8:	cmp	r6, #251	; 0xfb
   17dbc:	bhi	17dfc <generate_code@@Base+0x167c>
   17dc0:	bl	17ab0 <generate_code@@Base+0x1330>
   17dc4:	add	fp, r6, r6, lsl #1
   17dc8:	sub	r7, r7, #1
   17dcc:	add	fp, r9, fp, lsl #3
   17dd0:	lsr	r4, r4, #1
   17dd4:	add	r6, r6, #1
   17dd8:	str	r0, [fp, #40]	; 0x28
   17ddc:	bl	17ad0 <generate_code@@Base+0x1350>
   17de0:	strd	r0, [fp, #48]	; 0x30
   17de4:	bl	17ad0 <generate_code@@Base+0x1350>
   17de8:	cmn	r7, #1
   17dec:	strd	r0, [fp, #56]	; 0x38
   17df0:	bne	17d4c <generate_code@@Base+0x15cc>
   17df4:	add	sp, sp, #36	; 0x24
   17df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17dfc:	mov	r0, sl
   17e00:	bl	16b3c <generate_code@@Base+0x3bc>
   17e04:	b	17dc0 <generate_code@@Base+0x1640>
   17e08:	andeq	r1, r0, r0, lsr #15
   17e0c:	andeq	r1, r0, r0, lsl #11
   17e10:			; <UNDEFINED> instruction: 0x000015bc
   17e14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e18:	sub	sp, sp, #6080	; 0x17c0
   17e1c:	sub	sp, sp, #28
   17e20:	mov	r4, r1
   17e24:	strd	r2, [sp, #4]
   17e28:	add	r3, sp, #6144	; 0x1800
   17e2c:	mov	r9, r0
   17e30:	ldr	r7, [r3]
   17e34:	add	r3, sp, #6144	; 0x1800
   17e38:	add	r3, r3, #4
   17e3c:	ldr	r6, [r3]
   17e40:	add	r3, sp, #6144	; 0x1800
   17e44:	add	r3, r3, #8
   17e48:	ldr	sl, [r3]
   17e4c:	bl	17ab0 <generate_code@@Base+0x1330>
   17e50:	add	r3, r4, #12
   17e54:	mov	r2, r9
   17e58:	str	r3, [sp, #12]
   17e5c:	mov	r1, r0
   17e60:	mov	r0, r3
   17e64:	bl	174cc <generate_code@@Base+0xd4c>
   17e68:	cmp	r0, #0
   17e6c:	beq	180f4 <generate_code@@Base+0x1974>
   17e70:	bl	17ab0 <generate_code@@Base+0x1330>
   17e74:	ldr	r3, [r4, #8]
   17e78:	cmp	r0, r3
   17e7c:	bne	17f10 <generate_code@@Base+0x1790>
   17e80:	ldr	fp, [pc, #628]	; 180fc <generate_code@@Base+0x197c>
   17e84:	add	r5, sp, #16
   17e88:	add	fp, pc, fp
   17e8c:	bl	16864 <generate_code@@Base+0xe4>
   17e90:	str	r0, [r6]
   17e94:	bl	17ab0 <generate_code@@Base+0x1330>
   17e98:	cmp	r0, #-1560281088	; 0xa3000000
   17e9c:	bne	17f54 <generate_code@@Base+0x17d4>
   17ea0:	bl	17ab0 <generate_code@@Base+0x1330>
   17ea4:	mov	r0, r5
   17ea8:	bl	17cb4 <generate_code@@Base+0x1534>
   17eac:	bl	16888 <generate_code@@Base+0x108>
   17eb0:	add	r2, sp, #2000	; 0x7d0
   17eb4:	add	r2, r2, #8
   17eb8:	subs	r8, r0, #0
   17ebc:	bne	18088 <generate_code@@Base+0x1908>
   17ec0:	ldr	r3, [r7]
   17ec4:	cmp	r3, #0
   17ec8:	bne	17f20 <generate_code@@Base+0x17a0>
   17ecc:	ldr	r3, [r2, #-1992]	; 0xfffff838
   17ed0:	cmp	r3, sl
   17ed4:	bne	17e8c <generate_code@@Base+0x170c>
   17ed8:	ldr	r3, [sp, #8]
   17edc:	ldr	r2, [r2, #-1984]	; 0xfffff840
   17ee0:	ldr	r3, [r3]
   17ee4:	cmp	r2, r3
   17ee8:	bne	17e8c <generate_code@@Base+0x170c>
   17eec:	ldr	r2, [pc, #524]	; 18100 <generate_code@@Base+0x1980>
   17ef0:	mov	r1, r5
   17ef4:	ldr	r0, [sp, #4]
   17ef8:	bl	118f8 <memcpy@plt>
   17efc:	ldr	r3, [r6]
   17f00:	str	r3, [r7]
   17f04:	b	17e8c <generate_code@@Base+0x170c>
   17f08:	cmp	r0, #0
   17f0c:	bne	180c8 <generate_code@@Base+0x1948>
   17f10:	mov	r0, #0
   17f14:	add	sp, sp, #6080	; 0x17c0
   17f18:	add	sp, sp, #28
   17f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f20:	ldr	r0, [pc, #476]	; 18104 <generate_code@@Base+0x1984>
   17f24:	bl	1194c <malloc@plt>
   17f28:	ldr	r2, [pc, #464]	; 18100 <generate_code@@Base+0x1980>
   17f2c:	mov	r1, r5
   17f30:	mov	r3, r0
   17f34:	str	r0, [fp]
   17f38:	add	r0, r0, #8
   17f3c:	str	r3, [sp]
   17f40:	bl	118f8 <memcpy@plt>
   17f44:	ldr	r3, [sp]
   17f48:	str	r8, [r3]
   17f4c:	ldr	fp, [fp]
   17f50:	b	17e8c <generate_code@@Base+0x170c>
   17f54:	ldr	r5, [r4, #52]	; 0x34
   17f58:	cmp	r5, #0
   17f5c:	beq	17f08 <generate_code@@Base+0x1788>
   17f60:	ldr	r3, [r4, #56]	; 0x38
   17f64:	cmp	r0, #16777216	; 0x1000000
   17f68:	ldr	r8, [r3]
   17f6c:	bne	180c4 <generate_code@@Base+0x1944>
   17f70:	ldr	r6, [pc, #400]	; 18108 <generate_code@@Base+0x1988>
   17f74:	mov	r5, #0
   17f78:	add	r6, pc, r6
   17f7c:	add	r6, r6, #4
   17f80:	b	17fc4 <generate_code@@Base+0x1844>
   17f84:	mov	r2, r6
   17f88:	mov	r3, r5
   17f8c:	mov	r1, r4
   17f90:	mov	r0, r9
   17f94:	bl	17b14 <generate_code@@Base+0x1394>
   17f98:	subs	r6, r0, #0
   17f9c:	beq	180c8 <generate_code@@Base+0x1948>
   17fa0:	bl	17ab0 <generate_code@@Base+0x1330>
   17fa4:	ldr	r3, [r4, #52]	; 0x34
   17fa8:	add	r5, r5, #1
   17fac:	cmp	r3, r5
   17fb0:	beq	17f08 <generate_code@@Base+0x1788>
   17fb4:	ldr	r3, [r4, #56]	; 0x38
   17fb8:	cmp	r0, #16777216	; 0x1000000
   17fbc:	ldr	r8, [r3, r5, lsl #2]
   17fc0:	bne	180c8 <generate_code@@Base+0x1948>
   17fc4:	bl	17ab0 <generate_code@@Base+0x1330>
   17fc8:	cmp	r0, #0
   17fcc:	beq	17fa0 <generate_code@@Base+0x1820>
   17fd0:	cmp	r0, #3
   17fd4:	bne	180c8 <generate_code@@Base+0x1948>
   17fd8:	cmp	r8, #0
   17fdc:	beq	17f84 <generate_code@@Base+0x1804>
   17fe0:	ldr	r3, [r8]
   17fe4:	cmp	r4, r3
   17fe8:	bne	17f84 <generate_code@@Base+0x1804>
   17fec:	bl	17ab0 <generate_code@@Base+0x1330>
   17ff0:	ldr	r3, [r8, #4]
   17ff4:	cmp	r0, r3
   17ff8:	bne	180c8 <generate_code@@Base+0x1948>
   17ffc:	bl	17ab0 <generate_code@@Base+0x1330>
   18000:	ldr	r3, [r8, #8]
   18004:	cmp	r0, r3
   18008:	bne	180c8 <generate_code@@Base+0x1948>
   1800c:	bl	17ab0 <generate_code@@Base+0x1330>
   18010:	ldr	r3, [r8, #12]
   18014:	cmp	r0, r3
   18018:	bne	180c8 <generate_code@@Base+0x1948>
   1801c:	ldr	r7, [pc, #232]	; 1810c <generate_code@@Base+0x198c>
   18020:	ldr	fp, [sp, #12]
   18024:	add	r8, r8, #16
   18028:	ldr	sl, [fp, #4]!
   1802c:	cmp	sl, #0
   18030:	beq	18068 <generate_code@@Base+0x18e8>
   18034:	bl	17ab0 <generate_code@@Base+0x1330>
   18038:	str	r0, [sp]
   1803c:	bl	17ab0 <generate_code@@Base+0x1330>
   18040:	ldr	r3, [sp]
   18044:	cmp	r3, r7
   18048:	bne	180c8 <generate_code@@Base+0x1948>
   1804c:	ldr	r3, [r8]
   18050:	mov	r1, r3
   18054:	cmp	r0, r3, lsl #1
   18058:	bne	180c8 <generate_code@@Base+0x1948>
   1805c:	ldr	r0, [r8, #4]
   18060:	blx	sl
   18064:	add	r8, r8, #8
   18068:	ldr	r3, [pc, #160]	; 18110 <generate_code@@Base+0x1990>
   1806c:	add	r7, r7, #131072	; 0x20000
   18070:	cmp	r7, r3
   18074:	bne	18028 <generate_code@@Base+0x18a8>
   18078:	bl	16888 <generate_code@@Base+0x108>
   1807c:	cmp	r0, #0
   18080:	beq	17fa0 <generate_code@@Base+0x1820>
   18084:	mov	r8, r0
   18088:	cmp	r8, #0
   1808c:	blt	180b8 <generate_code@@Base+0x1938>
   18090:	ldr	r2, [pc, #124]	; 18114 <generate_code@@Base+0x1994>
   18094:	add	r2, pc, r2
   18098:	ldr	r0, [pc, #120]	; 18118 <generate_code@@Base+0x1998>
   1809c:	mov	r1, r9
   180a0:	add	r0, pc, r0
   180a4:	bl	16b3c <generate_code@@Base+0x3bc>
   180a8:	mvn	r0, #0
   180ac:	add	sp, sp, #6080	; 0x17c0
   180b0:	add	sp, sp, #28
   180b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180b8:	ldr	r2, [pc, #92]	; 1811c <generate_code@@Base+0x199c>
   180bc:	add	r2, pc, r2
   180c0:	b	18098 <generate_code@@Base+0x1918>
   180c4:	mov	r5, #0
   180c8:	ldr	r2, [pc, #80]	; 18120 <generate_code@@Base+0x19a0>
   180cc:	ldr	r0, [pc, #80]	; 18124 <generate_code@@Base+0x19a4>
   180d0:	mov	r3, r5
   180d4:	mov	r1, r9
   180d8:	add	r2, pc, r2
   180dc:	add	r0, pc, r0
   180e0:	bl	16b3c <generate_code@@Base+0x3bc>
   180e4:	mvn	r0, #0
   180e8:	add	sp, sp, #6080	; 0x17c0
   180ec:	add	sp, sp, #28
   180f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180f4:	mvn	r0, #0
   180f8:	b	17f14 <generate_code@@Base+0x1794>
   180fc:	ldrdeq	r3, [r1], -r8
   18100:	andeq	r1, r0, r8, asr #15
   18104:	ldrdeq	r1, [r0], -r0
   18108:	andeq	r3, r1, r8, ror #15
   1810c:			; <UNDEFINED> instruction: 0x01a10000
   18110:			; <UNDEFINED> instruction: 0x01b30000
   18114:			; <UNDEFINED> instruction: 0x000012b0
   18118:	andeq	r1, r0, r0, ror #5
   1811c:	andeq	r1, r0, ip, ror r2
   18120:	andeq	r1, r0, r4, ror r2
   18124:	andeq	r1, r0, ip, ror r2
   18128:	ldr	r3, [pc, #72]	; 18178 <generate_code@@Base+0x19f8>
   1812c:	ldr	r2, [pc, #72]	; 1817c <generate_code@@Base+0x19fc>
   18130:	add	r3, pc, r3
   18134:	push	{r4, r5, r6, lr}
   18138:	mov	r5, r0
   1813c:	ldr	r4, [r3, r2]
   18140:	ldr	r0, [r4, #8]
   18144:	cmp	r0, #0
   18148:	bne	18170 <generate_code@@Base+0x19f0>
   1814c:	lsl	r1, r5, #2
   18150:	mov	r2, #0
   18154:	ldr	r0, [r4]
   18158:	bl	11a3c <fseek@plt>
   1815c:	ldr	r0, [r4]
   18160:	bl	11904 <ftell@plt>
   18164:	asr	r0, r0, #2
   18168:	str	r0, [r4, #4]
   1816c:	pop	{r4, r5, r6, pc}
   18170:	bl	16934 <generate_code@@Base+0x1b4>
   18174:	b	1814c <generate_code@@Base+0x19cc>
   18178:	andeq	r1, r1, r8, asr #29
   1817c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   18180:	cmp	r2, #0
   18184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18188:	mov	r8, r0
   1818c:	sub	sp, sp, #20
   18190:	mov	r5, r1
   18194:	mov	r4, r3
   18198:	beq	18368 <generate_code@@Base+0x1be8>
   1819c:	cmp	r4, #0
   181a0:	bne	18384 <generate_code@@Base+0x1c04>
   181a4:	mov	r1, r5
   181a8:	ldr	r5, [pc, #480]	; 18390 <generate_code@@Base+0x1c10>
   181ac:	mov	r0, #-1560281088	; 0xa3000000
   181b0:	add	r5, pc, r5
   181b4:	bl	179a8 <generate_code@@Base+0x1228>
   181b8:	ldr	r4, [r5]
   181bc:	cmp	r4, #0
   181c0:	beq	181ec <generate_code@@Base+0x1a6c>
   181c4:	add	r1, r4, #8
   181c8:	mov	r0, #-1560281088	; 0xa3000000
   181cc:	bl	179a8 <generate_code@@Base+0x1228>
   181d0:	ldr	r3, [r5]
   181d4:	mov	r0, r3
   181d8:	ldr	r4, [r3]
   181dc:	bl	118ec <free@plt>
   181e0:	cmp	r4, #0
   181e4:	str	r4, [r5]
   181e8:	bne	181c4 <generate_code@@Base+0x1a44>
   181ec:	ldr	r3, [r8, #52]	; 0x34
   181f0:	cmp	r3, #0
   181f4:	beq	18340 <generate_code@@Base+0x1bc0>
   181f8:	ldr	r3, [pc, #404]	; 18394 <generate_code@@Base+0x1c14>
   181fc:	ldr	r9, [pc, #404]	; 18398 <generate_code@@Base+0x1c18>
   18200:	add	r3, pc, r3
   18204:	str	r3, [sp, #4]
   18208:	ldr	r3, [pc, #396]	; 1839c <generate_code@@Base+0x1c1c>
   1820c:	mov	r7, #0
   18210:	add	r3, pc, r3
   18214:	str	r3, [sp, #12]
   18218:	b	18254 <generate_code@@Base+0x1ad4>
   1821c:	ldr	r3, [r8, #56]	; 0x38
   18220:	ldr	r4, [r3, r7, lsl #2]
   18224:	cmp	r4, #0
   18228:	beq	18238 <generate_code@@Base+0x1ab8>
   1822c:	ldr	r3, [r4]
   18230:	cmp	r3, r8
   18234:	beq	18350 <generate_code@@Base+0x1bd0>
   18238:	mov	r1, #0
   1823c:	mov	r0, #16777216	; 0x1000000
   18240:	bl	17988 <generate_code@@Base+0x1208>
   18244:	ldr	r3, [r8, #52]	; 0x34
   18248:	add	r7, r7, #1
   1824c:	cmp	r3, r7
   18250:	beq	18340 <generate_code@@Base+0x1bc0>
   18254:	ldr	r3, [sp, #4]
   18258:	ldr	r4, [r3, #4]
   1825c:	cmp	r4, #0
   18260:	beq	1821c <generate_code@@Base+0x1a9c>
   18264:	ldr	r3, [r4, #4]
   18268:	cmp	r3, r7
   1826c:	bne	1821c <generate_code@@Base+0x1a9c>
   18270:	mov	r3, #1
   18274:	mov	r1, #3
   18278:	mov	r0, #16777216	; 0x1000000
   1827c:	add	r4, r4, #8
   18280:	str	r3, [sp, #8]
   18284:	bl	17988 <generate_code@@Base+0x1208>
   18288:	ldr	r0, [r4, #4]
   1828c:	bl	17950 <generate_code@@Base+0x11d0>
   18290:	ldr	r0, [r4, #8]
   18294:	bl	17950 <generate_code@@Base+0x11d0>
   18298:	ldr	r0, [r4, #12]
   1829c:	bl	17950 <generate_code@@Base+0x11d0>
   182a0:	ldr	r5, [pc, #248]	; 183a0 <generate_code@@Base+0x1c20>
   182a4:	add	r4, r4, #16
   182a8:	add	r6, r8, #12
   182ac:	b	182bc <generate_code@@Base+0x1b3c>
   182b0:	add	r5, r5, #131072	; 0x20000
   182b4:	cmp	r5, r9
   182b8:	beq	1830c <generate_code@@Base+0x1b8c>
   182bc:	ldr	r3, [r6, #4]!
   182c0:	cmp	r3, #0
   182c4:	beq	182b0 <generate_code@@Base+0x1b30>
   182c8:	ldr	fp, [r4]
   182cc:	mov	r0, r5
   182d0:	sub	sl, fp, #1
   182d4:	lsl	r1, fp, #1
   182d8:	bl	17988 <generate_code@@Base+0x1208>
   182dc:	cmp	fp, #0
   182e0:	ldr	fp, [r4, #4]
   182e4:	beq	182fc <generate_code@@Base+0x1b7c>
   182e8:	sub	sl, sl, #1
   182ec:	ldrd	r0, [fp], #8
   182f0:	bl	17968 <generate_code@@Base+0x11e8>
   182f4:	cmn	sl, #1
   182f8:	bne	182e8 <generate_code@@Base+0x1b68>
   182fc:	add	r5, r5, #131072	; 0x20000
   18300:	cmp	r5, r9
   18304:	add	r4, r4, #8
   18308:	bne	182bc <generate_code@@Base+0x1b3c>
   1830c:	ldr	r3, [sp, #8]
   18310:	cmp	r3, #0
   18314:	beq	18244 <generate_code@@Base+0x1ac4>
   18318:	ldr	r4, [sp, #12]
   1831c:	mov	r2, #9
   18320:	mov	r0, r8
   18324:	ldr	r1, [r4, #4]
   18328:	bl	16b70 <generate_code@@Base+0x3f0>
   1832c:	ldr	r3, [r8, #52]	; 0x34
   18330:	add	r7, r7, #1
   18334:	cmp	r3, r7
   18338:	str	r0, [r4, #4]
   1833c:	bne	18254 <generate_code@@Base+0x1ad4>
   18340:	mov	r0, #0
   18344:	add	sp, sp, #20
   18348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1834c:	b	17950 <generate_code@@Base+0x11d0>
   18350:	mov	r1, #3
   18354:	mov	r0, #16777216	; 0x1000000
   18358:	bl	17988 <generate_code@@Base+0x1208>
   1835c:	mov	r3, #0
   18360:	str	r3, [sp, #8]
   18364:	b	18288 <generate_code@@Base+0x1b08>
   18368:	ldr	r1, [pc, #52]	; 183a4 <generate_code@@Base+0x1c24>
   1836c:	ldr	r0, [pc, #52]	; 183a8 <generate_code@@Base+0x1c28>
   18370:	bl	17988 <generate_code@@Base+0x1208>
   18374:	ldr	r0, [r8, #8]
   18378:	bl	17950 <generate_code@@Base+0x11d0>
   1837c:	cmp	r4, #0
   18380:	beq	181a4 <generate_code@@Base+0x1a24>
   18384:	mov	r0, r4
   18388:	bl	18128 <generate_code@@Base+0x19a8>
   1838c:	b	181a4 <generate_code@@Base+0x1a24>
   18390:			; <UNDEFINED> instruction: 0x000135b0
   18394:	andeq	r3, r1, r0, ror #10
   18398:			; <UNDEFINED> instruction: 0x01b30000
   1839c:	andeq	r3, r1, r0, asr r5
   183a0:			; <UNDEFINED> instruction: 0x01a10000
   183a4:	teqmi	r8, sl, lsr #6
   183a8:	strbvs	r6, [r3, -r1, ror #8]!

000183ac <__gcov_sort_n_vals@@Base>:
   183ac:	cmp	r1, #2
   183b0:	bxle	lr
   183b4:	sub	r1, r1, #3
   183b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183bc:	add	r2, r0, #8
   183c0:	sub	sp, sp, #20
   183c4:	mov	r6, r0
   183c8:	bic	r7, r1, #1
   183cc:	mvn	r8, #15
   183d0:	mov	lr, #0
   183d4:	ldrd	r0, [r2]
   183d8:	ldrd	r4, [r2, #16]
   183dc:	ldrd	sl, [r2, #8]
   183e0:	add	r9, r2, #16
   183e4:	cmp	r0, r4
   183e8:	sbcs	r3, r1, r5
   183ec:	mov	ip, r9
   183f0:	sub	r1, r6, r8
   183f4:	strd	sl, [sp]
   183f8:	mov	r3, lr
   183fc:	bge	18464 <__gcov_sort_n_vals@@Base+0xb8>
   18400:	add	sl, r8, #16
   18404:	mvn	fp, #1
   18408:	add	sl, r2, sl
   1840c:	orr	fp, lr, fp
   18410:	str	r7, [sp, #8]
   18414:	str	r6, [sp, #12]
   18418:	b	18430 <__gcov_sort_n_vals@@Base+0x84>
   1841c:	ldrd	r6, [ip, #-16]
   18420:	sub	r2, r2, #16
   18424:	cmp	r6, r4
   18428:	sbcs	r1, r7, r5
   1842c:	bge	1848c <__gcov_sort_n_vals@@Base+0xe0>
   18430:	ldrd	r6, [r2, #-8]
   18434:	lsl	r1, r3, #3
   18438:	mov	r0, r3
   1843c:	strd	r6, [r2, #8]
   18440:	ldrd	r6, [sl, r1]
   18444:	sub	r3, r3, #2
   18448:	cmp	r3, fp
   1844c:	strd	r6, [r2, #16]
   18450:	mov	ip, r2
   18454:	bne	1841c <__gcov_sort_n_vals@@Base+0x70>
   18458:	ldr	r6, [sp, #12]
   1845c:	ldr	r7, [sp, #8]
   18460:	add	r1, r6, r1
   18464:	ldrd	r2, [sp]
   18468:	cmp	lr, r7
   1846c:	sub	r8, r8, #16
   18470:	strd	r2, [r1]
   18474:	add	lr, lr, #2
   18478:	strd	r4, [ip]
   1847c:	mov	r2, r9
   18480:	bne	183d4 <__gcov_sort_n_vals@@Base+0x28>
   18484:	add	sp, sp, #20
   18488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1848c:	ldr	r6, [sp, #12]
   18490:	ldr	r7, [sp, #8]
   18494:	add	r1, r6, r0, lsl #3
   18498:	b	18464 <__gcov_sort_n_vals@@Base+0xb8>
   1849c:	push	{r4, r5, r6, lr}
   184a0:	ldr	r4, [pc, #76]	; 184f4 <__gcov_sort_n_vals@@Base+0x148>
   184a4:	smull	r2, r3, r4, r0
   184a8:	asr	r4, r0, #31
   184ac:	rsb	r4, r4, r3, asr #1
   184b0:	add	r4, r4, r4, lsl #3
   184b4:	subs	r4, r0, r4
   184b8:	bne	184f0 <__gcov_sort_n_vals@@Base+0x144>
   184bc:	cmp	r0, #0
   184c0:	mov	r6, r0
   184c4:	ldr	r5, [r1]
   184c8:	pople	{r4, r5, r6, pc}
   184cc:	add	r5, r5, #8
   184d0:	mov	r0, r5
   184d4:	add	r4, r4, #9
   184d8:	mov	r1, #8
   184dc:	bl	183ac <__gcov_sort_n_vals@@Base>
   184e0:	cmp	r6, r4
   184e4:	add	r5, r5, #72	; 0x48
   184e8:	bgt	184d0 <__gcov_sort_n_vals@@Base+0x124>
   184ec:	pop	{r4, r5, r6, pc}
   184f0:	bl	11a54 <abort@plt>
   184f4:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   184f8:	ldr	r3, [r0, #48]	; 0x30
   184fc:	cmp	r3, #0
   18500:	bxeq	lr
   18504:	push	{r4, r5, r6, lr}
   18508:	ldr	lr, [r0, #52]	; 0x34
   1850c:	cmp	lr, #0
   18510:	popeq	{r4, r5, r6, pc}
   18514:	mov	r5, r0
   18518:	mov	r4, #0
   1851c:	add	r6, r0, #12
   18520:	ldr	r1, [r5, #56]	; 0x38
   18524:	mov	r2, r6
   18528:	mov	r3, #0
   1852c:	ldr	r1, [r1, r4, lsl #2]
   18530:	add	r1, r1, #16
   18534:	ldr	ip, [r2, #4]!
   18538:	cmp	ip, #0
   1853c:	beq	1854c <__gcov_sort_n_vals@@Base+0x1a0>
   18540:	cmp	r3, #8
   18544:	beq	18568 <__gcov_sort_n_vals@@Base+0x1bc>
   18548:	add	r1, r1, #8
   1854c:	add	r3, r3, #1
   18550:	cmp	r3, #9
   18554:	bne	18534 <__gcov_sort_n_vals@@Base+0x188>
   18558:	add	r4, r4, #1
   1855c:	cmp	lr, r4
   18560:	bne	18520 <__gcov_sort_n_vals@@Base+0x174>
   18564:	pop	{r4, r5, r6, pc}
   18568:	ldr	r0, [r1], #4
   1856c:	bl	1849c <__gcov_sort_n_vals@@Base+0xf0>
   18570:	ldr	lr, [r5, #52]	; 0x34
   18574:	b	18558 <__gcov_sort_n_vals@@Base+0x1ac>
   18578:	push	{r4, r5, r6, r7, r8, r9, lr}
   1857c:	sub	sp, sp, #6080	; 0x17c0
   18580:	ldr	ip, [pc, #396]	; 18714 <__gcov_sort_n_vals@@Base+0x368>
   18584:	sub	sp, sp, #36	; 0x24
   18588:	add	ip, pc, ip
   1858c:	add	r5, sp, #2016	; 0x7e0
   18590:	mov	r4, r0
   18594:	mov	r6, r1
   18598:	mov	r1, #0
   1859c:	str	r1, [ip, #4]
   185a0:	str	r1, [ip]
   185a4:	mov	r8, r2
   185a8:	mov	r7, r3
   185ac:	str	r1, [r5, #-2000]	; 0xfffff830
   185b0:	str	r1, [r5, #-1996]	; 0xfffff834
   185b4:	bl	184f8 <__gcov_sort_n_vals@@Base+0x14c>
   185b8:	mov	r1, r6
   185bc:	ldr	r0, [r4, #12]
   185c0:	bl	177c8 <generate_code@@Base+0x1048>
   185c4:	cmn	r0, #1
   185c8:	beq	18644 <__gcov_sort_n_vals@@Base+0x298>
   185cc:	bl	17ab0 <generate_code@@Base+0x1330>
   185d0:	cmp	r0, #0
   185d4:	beq	18650 <__gcov_sort_n_vals@@Base+0x2a4>
   185d8:	ldr	r2, [pc, #312]	; 18718 <__gcov_sort_n_vals@@Base+0x36c>
   185dc:	ldr	r1, [r6]
   185e0:	cmp	r0, r2
   185e4:	beq	186a8 <__gcov_sort_n_vals@@Base+0x2fc>
   185e8:	ldr	r0, [pc, #300]	; 1871c <__gcov_sort_n_vals@@Base+0x370>
   185ec:	add	r0, pc, r0
   185f0:	bl	16b3c <generate_code@@Base+0x3bc>
   185f4:	ldr	r5, [pc, #292]	; 18720 <__gcov_sort_n_vals@@Base+0x374>
   185f8:	add	r5, pc, r5
   185fc:	ldr	r1, [r5, #4]
   18600:	cmp	r1, #0
   18604:	beq	18624 <__gcov_sort_n_vals@@Base+0x278>
   18608:	mov	r2, #9
   1860c:	mov	r0, r4
   18610:	bl	16b70 <generate_code@@Base+0x3f0>
   18614:	cmp	r0, #0
   18618:	mov	r1, r0
   1861c:	str	r0, [r5, #4]
   18620:	bne	18608 <__gcov_sort_n_vals@@Base+0x25c>
   18624:	bl	178e0 <generate_code@@Base+0x1160>
   18628:	cmp	r0, #0
   1862c:	beq	18644 <__gcov_sort_n_vals@@Base+0x298>
   18630:	blt	18708 <__gcov_sort_n_vals@@Base+0x35c>
   18634:	ldr	r0, [pc, #232]	; 18724 <__gcov_sort_n_vals@@Base+0x378>
   18638:	add	r0, pc, r0
   1863c:	ldr	r1, [r6]
   18640:	bl	16b3c <generate_code@@Base+0x3bc>
   18644:	add	sp, sp, #6080	; 0x17c0
   18648:	add	sp, sp, #36	; 0x24
   1864c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18650:	bl	17680 <generate_code@@Base+0xf00>
   18654:	ldr	r1, [r5, #-2000]	; 0xfffff830
   18658:	add	r9, sp, #24
   1865c:	cmp	r1, #0
   18660:	beq	186f0 <__gcov_sort_n_vals@@Base+0x344>
   18664:	add	r3, sp, #6144	; 0x1800
   18668:	str	r7, [sp, #4]
   1866c:	ldr	r3, [r3]
   18670:	mov	r1, r8
   18674:	str	r3, [sp]
   18678:	add	r2, r4, #16
   1867c:	mov	r3, r9
   18680:	ldr	r0, [r6]
   18684:	bl	1752c <generate_code@@Base+0xdac>
   18688:	cmn	r0, #1
   1868c:	beq	185f4 <__gcov_sort_n_vals@@Base+0x248>
   18690:	mov	r1, r9
   18694:	ldr	r3, [r5, #-2000]	; 0xfffff830
   18698:	ldr	r2, [r5, #-1996]	; 0xfffff834
   1869c:	mov	r0, r4
   186a0:	bl	18180 <generate_code@@Base+0x1a00>
   186a4:	b	185f4 <__gcov_sort_n_vals@@Base+0x248>
   186a8:	add	ip, sp, #20
   186ac:	add	r3, sp, #16
   186b0:	str	r7, [sp, #8]
   186b4:	stm	sp, {r3, ip}
   186b8:	add	r3, sp, #6144	; 0x1800
   186bc:	add	r9, sp, #24
   186c0:	ldr	r3, [r3]
   186c4:	mov	r0, r1
   186c8:	mov	r2, r9
   186cc:	add	r3, r3, #8
   186d0:	mov	r1, r4
   186d4:	bl	17e14 <generate_code@@Base+0x1694>
   186d8:	cmn	r0, #1
   186dc:	beq	185f4 <__gcov_sort_n_vals@@Base+0x248>
   186e0:	bl	17680 <generate_code@@Base+0xf00>
   186e4:	ldr	r1, [r5, #-2000]	; 0xfffff830
   186e8:	cmp	r1, #0
   186ec:	bne	18664 <__gcov_sort_n_vals@@Base+0x2b8>
   186f0:	ldr	r2, [pc, #48]	; 18728 <__gcov_sort_n_vals@@Base+0x37c>
   186f4:	mov	r0, r9
   186f8:	bl	119c4 <memset@plt>
   186fc:	ldr	r3, [r5, #-1996]	; 0xfffff834
   18700:	str	r3, [r5, #-2000]	; 0xfffff830
   18704:	b	18664 <__gcov_sort_n_vals@@Base+0x2b8>
   18708:	ldr	r0, [pc, #28]	; 1872c <__gcov_sort_n_vals@@Base+0x380>
   1870c:	add	r0, pc, r0
   18710:	b	1863c <__gcov_sort_n_vals@@Base+0x290>
   18714:	ldrdeq	r3, [r1], -r8
   18718:	strbvs	r6, [r3, -r1, ror #8]!
   1871c:	andeq	r0, r0, ip, ror #27
   18720:	andeq	r3, r1, r8, ror #2
   18724:	andeq	r0, r0, r4, lsl #27
   18728:	andeq	r1, r0, r8, asr #15
   1872c:	muleq	r0, r0, ip
   18730:	push	{r4, r5, r6, r7, r8, lr}
   18734:	sub	sp, sp, #6080	; 0x17c0
   18738:	sub	sp, sp, #32
   1873c:	add	r6, sp, #24
   18740:	add	r2, sp, #12
   18744:	mov	r8, r1
   18748:	mov	r1, r6
   1874c:	mov	r4, r0
   18750:	bl	16d88 <generate_code@@Base+0x608>
   18754:	add	r5, sp, #8
   18758:	mov	r7, r0
   1875c:	mov	r0, r5
   18760:	bl	16f1c <generate_code@@Base+0x79c>
   18764:	cmp	r4, #0
   18768:	beq	18790 <__gcov_sort_n_vals@@Base+0x3e4>
   1876c:	mov	r0, r4
   18770:	str	r6, [sp]
   18774:	mov	r3, r7
   18778:	mov	r2, r8
   1877c:	mov	r1, r5
   18780:	bl	18578 <__gcov_sort_n_vals@@Base+0x1cc>
   18784:	ldr	r4, [r4, #4]
   18788:	cmp	r4, #0
   1878c:	bne	1876c <__gcov_sort_n_vals@@Base+0x3c0>
   18790:	ldr	r0, [sp, #8]
   18794:	bl	118ec <free@plt>
   18798:	add	sp, sp, #6080	; 0x17c0
   1879c:	add	sp, sp, #32
   187a0:	pop	{r4, r5, r6, r7, r8, pc}
   187a4:	ldrb	r1, [r0, #4]
   187a8:	tst	r1, #1
   187ac:	bxne	lr
   187b0:	push	{r4, lr}
   187b4:	lsr	r1, r1, #1
   187b8:	mov	r4, r0
   187bc:	and	r1, r1, #1
   187c0:	ldr	r0, [r0]
   187c4:	bl	18730 <__gcov_sort_n_vals@@Base+0x384>
   187c8:	ldrb	r3, [r4, #4]
   187cc:	bic	r3, r3, #3
   187d0:	orr	r3, r3, #3
   187d4:	strb	r3, [r4, #4]
   187d8:	pop	{r4, pc}
   187dc:	push	{r4, r5, r6, lr}
   187e0:	ldr	r4, [pc, #84]	; 1883c <__gcov_sort_n_vals@@Base+0x490>
   187e4:	ldr	r5, [pc, #84]	; 18840 <__gcov_sort_n_vals@@Base+0x494>
   187e8:	add	r4, pc, r4
   187ec:	mov	r0, r4
   187f0:	bl	187a4 <__gcov_sort_n_vals@@Base+0x3f8>
   187f4:	ldr	r3, [r4, #8]
   187f8:	add	r5, pc, r5
   187fc:	cmp	r3, #0
   18800:	ldrne	r2, [r4, #12]
   18804:	strne	r2, [r3, #12]
   18808:	ldr	r2, [pc, #52]	; 18844 <__gcov_sort_n_vals@@Base+0x498>
   1880c:	add	r2, pc, r2
   18810:	ldr	r2, [r2, #12]
   18814:	cmp	r2, #0
   18818:	strne	r3, [r2, #8]
   1881c:	beq	18828 <__gcov_sort_n_vals@@Base+0x47c>
   18820:	pop	{r4, r5, r6, lr}
   18824:	b	168e4 <generate_code@@Base+0x164>
   18828:	ldr	r2, [pc, #24]	; 18848 <__gcov_sort_n_vals@@Base+0x49c>
   1882c:	ldr	r2, [r5, r2]
   18830:	pop	{r4, r5, r6, lr}
   18834:	str	r3, [r2, #4]
   18838:	b	168e4 <generate_code@@Base+0x164>
   1883c:	andeq	r2, r1, r4, lsl #31
   18840:	andeq	r1, r1, r0, lsl #16
   18844:	andeq	r2, r1, r0, ror #30
   18848:	andeq	r0, r0, ip, lsr #1
   1884c:	ldr	r1, [r0]
   18850:	push	{r4, r5, r6, lr}
   18854:	cmp	r1, #0
   18858:	ldr	r5, [pc, #156]	; 188fc <__gcov_sort_n_vals@@Base+0x550>
   1885c:	add	r5, pc, r5
   18860:	popeq	{r4, r5, r6, pc}
   18864:	ldr	r3, [r0, #52]	; 0x34
   18868:	cmp	r3, #0
   1886c:	popeq	{r4, r5, r6, pc}
   18870:	mov	r4, r0
   18874:	mov	r2, #0
   18878:	add	r0, r0, #12
   1887c:	bl	174cc <generate_code@@Base+0xd4c>
   18880:	cmp	r0, #0
   18884:	popeq	{r4, r5, r6, pc}
   18888:	ldr	r6, [pc, #112]	; 18900 <__gcov_sort_n_vals@@Base+0x554>
   1888c:	add	r6, pc, r6
   18890:	ldr	r2, [r6]
   18894:	cmp	r2, #0
   18898:	beq	188b0 <__gcov_sort_n_vals@@Base+0x504>
   1889c:	ldr	r3, [pc, #96]	; 18904 <__gcov_sort_n_vals@@Base+0x558>
   188a0:	str	r2, [r4, #4]
   188a4:	add	r3, pc, r3
   188a8:	str	r4, [r3]
   188ac:	pop	{r4, r5, r6, pc}
   188b0:	ldr	r3, [pc, #80]	; 18908 <__gcov_sort_n_vals@@Base+0x55c>
   188b4:	ldr	r2, [pc, #80]	; 1890c <__gcov_sort_n_vals@@Base+0x560>
   188b8:	mov	r0, #12
   188bc:	ldr	r5, [r5, r3]
   188c0:	add	r2, pc, r2
   188c4:	ldr	r1, [r5]
   188c8:	bl	174cc <generate_code@@Base+0xd4c>
   188cc:	cmp	r0, #0
   188d0:	ldreq	r2, [r6]
   188d4:	beq	1889c <__gcov_sort_n_vals@@Base+0x4f0>
   188d8:	ldr	r3, [r5, #4]
   188dc:	cmp	r3, #0
   188e0:	str	r3, [r6, #8]
   188e4:	strne	r6, [r3, #12]
   188e8:	ldr	r3, [pc, #32]	; 18910 <__gcov_sort_n_vals@@Base+0x564>
   188ec:	add	r3, pc, r3
   188f0:	str	r3, [r5, #4]
   188f4:	ldr	r2, [r3]
   188f8:	b	1889c <__gcov_sort_n_vals@@Base+0x4f0>
   188fc:	muleq	r1, ip, r7
   18900:	andeq	r2, r1, r0, ror #29
   18904:	andeq	r2, r1, r8, asr #29
   18908:	andeq	r0, r0, ip, lsr #1
   1890c:	andeq	r0, r0, ip, lsr fp
   18910:	andeq	r2, r1, r0, lsl #29
   18914:	cmp	r3, #0
   18918:	cmpeq	r2, #0
   1891c:	bne	18940 <__gcov_sort_n_vals@@Base+0x594>
   18920:	cmp	r1, #0
   18924:	movlt	r1, #-2147483648	; 0x80000000
   18928:	movlt	r0, #0
   1892c:	blt	1893c <__gcov_sort_n_vals@@Base+0x590>
   18930:	cmpeq	r0, #0
   18934:	mvnne	r1, #-2147483648	; 0x80000000
   18938:	mvnne	r0, #0
   1893c:	b	189e8 <__gcov_sort_n_vals@@Base+0x63c>
   18940:	sub	sp, sp, #8
   18944:	push	{sp, lr}
   18948:	cmp	r1, #0
   1894c:	blt	1896c <__gcov_sort_n_vals@@Base+0x5c0>
   18950:	cmp	r3, #0
   18954:	blt	189a0 <__gcov_sort_n_vals@@Base+0x5f4>
   18958:	bl	18a3c <__gcov_sort_n_vals@@Base+0x690>
   1895c:	ldr	lr, [sp, #4]
   18960:	add	sp, sp, #8
   18964:	pop	{r2, r3}
   18968:	bx	lr
   1896c:	rsbs	r0, r0, #0
   18970:	sbc	r1, r1, r1, lsl #1
   18974:	cmp	r3, #0
   18978:	blt	189c4 <__gcov_sort_n_vals@@Base+0x618>
   1897c:	bl	18a3c <__gcov_sort_n_vals@@Base+0x690>
   18980:	ldr	lr, [sp, #4]
   18984:	add	sp, sp, #8
   18988:	pop	{r2, r3}
   1898c:	rsbs	r0, r0, #0
   18990:	sbc	r1, r1, r1, lsl #1
   18994:	rsbs	r2, r2, #0
   18998:	sbc	r3, r3, r3, lsl #1
   1899c:	bx	lr
   189a0:	rsbs	r2, r2, #0
   189a4:	sbc	r3, r3, r3, lsl #1
   189a8:	bl	18a3c <__gcov_sort_n_vals@@Base+0x690>
   189ac:	ldr	lr, [sp, #4]
   189b0:	add	sp, sp, #8
   189b4:	pop	{r2, r3}
   189b8:	rsbs	r0, r0, #0
   189bc:	sbc	r1, r1, r1, lsl #1
   189c0:	bx	lr
   189c4:	rsbs	r2, r2, #0
   189c8:	sbc	r3, r3, r3, lsl #1
   189cc:	bl	18a3c <__gcov_sort_n_vals@@Base+0x690>
   189d0:	ldr	lr, [sp, #4]
   189d4:	add	sp, sp, #8
   189d8:	pop	{r2, r3}
   189dc:	rsbs	r2, r2, #0
   189e0:	sbc	r3, r3, r3, lsl #1
   189e4:	bx	lr
   189e8:	push	{r1, lr}
   189ec:	mov	r0, #8
   189f0:	bl	118bc <raise@plt>
   189f4:	pop	{r1, pc}
   189f8:	ldr	r3, [pc, #48]	; 18a30 <__gcov_sort_n_vals@@Base+0x684>
   189fc:	ldr	r2, [pc, #48]	; 18a34 <__gcov_sort_n_vals@@Base+0x688>
   18a00:	and	r3, r3, r0, lsr #1
   18a04:	sub	r0, r0, r3
   18a08:	and	r3, r0, r2
   18a0c:	and	r0, r2, r0, lsr #2
   18a10:	add	r3, r3, r0
   18a14:	ldr	r0, [pc, #28]	; 18a38 <__gcov_sort_n_vals@@Base+0x68c>
   18a18:	add	r3, r3, r3, lsr #4
   18a1c:	and	r0, r0, r3
   18a20:	add	r0, r0, r0, lsl #8
   18a24:	add	r0, r0, r0, lsl #16
   18a28:	lsr	r0, r0, #24
   18a2c:	bx	lr
   18a30:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   18a34:	teqcc	r3, #-872415232	; 0xcc000000
   18a38:	svceq	0x000f0f0f
   18a3c:	cmp	r1, r3
   18a40:	cmpeq	r0, r2
   18a44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a48:	mov	r4, r0
   18a4c:	movcc	r0, #0
   18a50:	mov	r5, r1
   18a54:	ldr	lr, [sp, #36]	; 0x24
   18a58:	movcc	r1, r0
   18a5c:	bcc	18b58 <__gcov_sort_n_vals@@Base+0x7ac>
   18a60:	cmp	r3, #0
   18a64:	clzeq	ip, r2
   18a68:	clzne	ip, r3
   18a6c:	addeq	ip, ip, #32
   18a70:	cmp	r5, #0
   18a74:	clzeq	r1, r4
   18a78:	addeq	r1, r1, #32
   18a7c:	clzne	r1, r5
   18a80:	sub	ip, ip, r1
   18a84:	sub	sl, ip, #32
   18a88:	lsl	r9, r3, ip
   18a8c:	rsb	fp, ip, #32
   18a90:	orr	r9, r9, r2, lsl sl
   18a94:	orr	r9, r9, r2, lsr fp
   18a98:	lsl	r8, r2, ip
   18a9c:	cmp	r5, r9
   18aa0:	cmpeq	r4, r8
   18aa4:	movcc	r0, #0
   18aa8:	movcc	r1, r0
   18aac:	bcc	18ac8 <__gcov_sort_n_vals@@Base+0x71c>
   18ab0:	mov	r0, #1
   18ab4:	subs	r4, r4, r8
   18ab8:	lsl	r1, r0, sl
   18abc:	orr	r1, r1, r0, lsr fp
   18ac0:	lsl	r0, r0, ip
   18ac4:	sbc	r5, r5, r9
   18ac8:	cmp	ip, #0
   18acc:	beq	18b58 <__gcov_sort_n_vals@@Base+0x7ac>
   18ad0:	lsr	r6, r8, #1
   18ad4:	orr	r6, r6, r9, lsl #31
   18ad8:	lsr	r7, r9, #1
   18adc:	mov	r2, ip
   18ae0:	b	18b04 <__gcov_sort_n_vals@@Base+0x758>
   18ae4:	subs	r3, r4, r6
   18ae8:	sbc	r8, r5, r7
   18aec:	adds	r3, r3, r3
   18af0:	adc	r8, r8, r8
   18af4:	adds	r4, r3, #1
   18af8:	adc	r5, r8, #0
   18afc:	subs	r2, r2, #1
   18b00:	beq	18b20 <__gcov_sort_n_vals@@Base+0x774>
   18b04:	cmp	r5, r7
   18b08:	cmpeq	r4, r6
   18b0c:	bcs	18ae4 <__gcov_sort_n_vals@@Base+0x738>
   18b10:	adds	r4, r4, r4
   18b14:	adc	r5, r5, r5
   18b18:	subs	r2, r2, #1
   18b1c:	bne	18b04 <__gcov_sort_n_vals@@Base+0x758>
   18b20:	lsr	r3, r4, ip
   18b24:	orr	r3, r3, r5, lsl fp
   18b28:	lsr	r2, r5, ip
   18b2c:	orr	r3, r3, r5, lsr sl
   18b30:	adds	r0, r0, r4
   18b34:	mov	r4, r3
   18b38:	lsl	r3, r2, ip
   18b3c:	orr	r3, r3, r4, lsl sl
   18b40:	lsl	ip, r4, ip
   18b44:	orr	r3, r3, r4, lsr fp
   18b48:	adc	r1, r1, r5
   18b4c:	subs	r0, r0, ip
   18b50:	mov	r5, r2
   18b54:	sbc	r1, r1, r3
   18b58:	cmp	lr, #0
   18b5c:	strdne	r4, [lr]
   18b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018b64 <__libc_csu_init@@Base>:
   18b64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18b68:	mov	r7, r0
   18b6c:	ldr	r6, [pc, #72]	; 18bbc <__libc_csu_init@@Base+0x58>
   18b70:	ldr	r5, [pc, #72]	; 18bc0 <__libc_csu_init@@Base+0x5c>
   18b74:	add	r6, pc, r6
   18b78:	add	r5, pc, r5
   18b7c:	sub	r6, r6, r5
   18b80:	mov	r8, r1
   18b84:	mov	r9, r2
   18b88:	bl	11890 <fdopen@plt-0x20>
   18b8c:	asrs	r6, r6, #2
   18b90:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b94:	mov	r4, #0
   18b98:	add	r4, r4, #1
   18b9c:	ldr	r3, [r5], #4
   18ba0:	mov	r2, r9
   18ba4:	mov	r1, r8
   18ba8:	mov	r0, r7
   18bac:	blx	r3
   18bb0:	cmp	r6, r4
   18bb4:	bne	18b98 <__libc_csu_init@@Base+0x34>
   18bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18bbc:	andeq	r1, r1, r0, lsl #7
   18bc0:	andeq	r1, r1, r0, ror #6

00018bc4 <__libc_csu_fini@@Base>:
   18bc4:	bx	lr

Disassembly of section .fini:

00018bc8 <.fini>:
   18bc8:	push	{r3, lr}
   18bcc:	pop	{r3, pc}
