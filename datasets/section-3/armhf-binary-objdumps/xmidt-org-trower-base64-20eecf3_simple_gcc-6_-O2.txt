
../repos/xmidt-org-trower-base64-20eecf3/tests/simple:     file format elf32-littlearm


Disassembly of section .init:

00010ea4 <.init>:
   10ea4:	push	{r3, lr}
   10ea8:	bl	11104 <_start@@Base+0x3c>
   10eac:	pop	{r3, pc}

Disassembly of section .plt:

00010eb0 <fdopen@plt-0x14>:
   10eb0:	push	{lr}		; (str lr, [sp, #-4]!)
   10eb4:	ldr	lr, [pc, #4]	; 10ec0 <fdopen@plt-0x4>
   10eb8:	add	lr, pc, lr
   10ebc:	ldr	pc, [lr, #8]!
   10ec0:	andeq	r6, r1, r0, asr #2

00010ec4 <fdopen@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #320]!	; 0x140

00010ed0 <CU_basic_set_mode@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #312]!	; 0x138

00010edc <raise@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #304]!	; 0x130

00010ee8 <CU_initialize_registry@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #296]!	; 0x128

00010ef4 <setbuf@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #288]!	; 0x120

00010f00 <printf@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #280]!	; 0x118

00010f0c <CU_get_number_of_tests_failed@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #272]!	; 0x110

00010f18 <CU_cleanup_registry@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #264]!	; 0x108

00010f24 <free@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #256]!	; 0x100

00010f30 <CU_add_suite@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #248]!	; 0xf8

00010f3c <memcpy@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #240]!	; 0xf0

00010f48 <CU_basic_run_tests@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #232]!	; 0xe8

00010f54 <CU_basic_show_failures@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #224]!	; 0xe0

00010f60 <ftell@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #216]!	; 0xd8

00010f6c <fwrite@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #208]!	; 0xd0

00010f78 <strcpy@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #200]!	; 0xc8

00010f84 <fread@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #192]!	; 0xc0

00010f90 <getenv@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #184]!	; 0xb8

00010f9c <puts@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #176]!	; 0xb0

00010fa8 <malloc@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #168]!	; 0xa8

00010fb4 <__libc_start_main@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #160]!	; 0xa0

00010fc0 <__fxstat@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #152]!	; 0x98

00010fcc <__gmon_start__@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #144]!	; 0x90

00010fd8 <CU_assertImplementation@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #136]!	; 0x88

00010fe4 <open@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #90112	; 0x16000
   10fec:	ldr	pc, [ip, #128]!	; 0x80

00010ff0 <getpid@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #90112	; 0x16000
   10ff8:	ldr	pc, [ip, #120]!	; 0x78

00010ffc <strlen@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #90112	; 0x16000
   11004:	ldr	pc, [ip, #112]!	; 0x70

00011008 <fprintf@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #90112	; 0x16000
   11010:	ldr	pc, [ip, #104]!	; 0x68

00011014 <__errno_location@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #90112	; 0x16000
   1101c:	ldr	pc, [ip, #96]!	; 0x60

00011020 <__cxa_atexit@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #90112	; 0x16000
   11028:	ldr	pc, [ip, #88]!	; 0x58

0001102c <mkdir@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #90112	; 0x16000
   11034:	ldr	pc, [ip, #80]!	; 0x50

00011038 <fcntl@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #90112	; 0x16000
   11040:	ldr	pc, [ip, #72]!	; 0x48

00011044 <memset@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #90112	; 0x16000
   1104c:	ldr	pc, [ip, #64]!	; 0x40

00011050 <putchar@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #90112	; 0x16000
   11058:	ldr	pc, [ip, #56]!	; 0x38

0001105c <CU_add_test@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #90112	; 0x16000
   11064:	ldr	pc, [ip, #48]!	; 0x30

00011068 <access@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #90112	; 0x16000
   11070:	ldr	pc, [ip, #40]!	; 0x28

00011074 <fclose@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #90112	; 0x16000
   1107c:	ldr	pc, [ip, #32]!

00011080 <vfprintf@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #90112	; 0x16000
   11088:	ldr	pc, [ip, #24]!

0001108c <atoi@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #90112	; 0x16000
   11094:	ldr	pc, [ip, #16]!

00011098 <CU_get_failure_list@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #90112	; 0x16000
   110a0:	ldr	pc, [ip, #8]!

000110a4 <fseek@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #0]!

000110b0 <abort@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #86016	; 0x15000
   110b8:	ldr	pc, [ip, #4088]!	; 0xff8

000110bc <close@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #86016	; 0x15000
   110c4:	ldr	pc, [ip, #4080]!	; 0xff0

Disassembly of section .text:

000110c8 <_start@@Base>:
   110c8:	mov	fp, #0
   110cc:	mov	lr, #0
   110d0:	pop	{r1}		; (ldr r1, [sp], #4)
   110d4:	mov	r2, sp
   110d8:	push	{r2}		; (str r2, [sp, #-4]!)
   110dc:	push	{r0}		; (str r0, [sp, #-4]!)
   110e0:	ldr	ip, [pc, #16]	; 110f8 <_start@@Base+0x30>
   110e4:	push	{ip}		; (str ip, [sp, #-4]!)
   110e8:	ldr	r0, [pc, #12]	; 110fc <_start@@Base+0x34>
   110ec:	ldr	r3, [pc, #12]	; 11100 <_start@@Base+0x38>
   110f0:	bl	10fb4 <__libc_start_main@plt>
   110f4:	bl	110b0 <abort@plt>
   110f8:	andeq	r5, r1, r0, lsr r9
   110fc:	andeq	r2, r1, ip, asr #19
   11100:	ldrdeq	r5, [r1], -r0
   11104:	ldr	r3, [pc, #20]	; 11120 <_start@@Base+0x58>
   11108:	ldr	r2, [pc, #20]	; 11124 <_start@@Base+0x5c>
   1110c:	add	r3, pc, r3
   11110:	ldr	r2, [r3, r2]
   11114:	cmp	r2, #0
   11118:	bxeq	lr
   1111c:	b	10fcc <__gmon_start__@plt>
   11120:	andeq	r5, r1, ip, ror #29
   11124:	andeq	r0, r0, r4, asr #1
   11128:	ldr	r3, [pc, #28]	; 1114c <_start@@Base+0x84>
   1112c:	ldr	r0, [pc, #28]	; 11150 <_start@@Base+0x88>
   11130:	sub	r3, r3, r0
   11134:	cmp	r3, #6
   11138:	bxls	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <_start@@Base+0x8c>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	andeq	r7, r2, r7, lsl r3
   11150:	andeq	r7, r2, r4, lsl r3
   11154:	andeq	r0, r0, r0
   11158:	ldr	r1, [pc, #36]	; 11184 <_start@@Base+0xbc>
   1115c:	ldr	r0, [pc, #36]	; 11188 <_start@@Base+0xc0>
   11160:	sub	r1, r1, r0
   11164:	asr	r1, r1, #2
   11168:	add	r1, r1, r1, lsr #31
   1116c:	asrs	r1, r1, #1
   11170:	bxeq	lr
   11174:	ldr	r3, [pc, #16]	; 1118c <_start@@Base+0xc4>
   11178:	cmp	r3, #0
   1117c:	bxeq	lr
   11180:	bx	r3
   11184:	andeq	r7, r2, r4, lsl r3
   11188:	andeq	r7, r2, r4, lsl r3
   1118c:	andeq	r0, r0, r0
   11190:	push	{r4, lr}
   11194:	ldr	r4, [pc, #24]	; 111b4 <_start@@Base+0xec>
   11198:	ldrb	r3, [r4]
   1119c:	cmp	r3, #0
   111a0:	popne	{r4, pc}
   111a4:	bl	11128 <_start@@Base+0x60>
   111a8:	mov	r3, #1
   111ac:	strb	r3, [r4]
   111b0:	pop	{r4, pc}
   111b4:	andeq	r7, r2, r8, lsl r3
   111b8:	ldr	r0, [pc, #40]	; 111e8 <_start@@Base+0x120>
   111bc:	ldr	r3, [r0]
   111c0:	cmp	r3, #0
   111c4:	bne	111cc <_start@@Base+0x104>
   111c8:	b	11158 <_start@@Base+0x90>
   111cc:	ldr	r3, [pc, #24]	; 111ec <_start@@Base+0x124>
   111d0:	cmp	r3, #0
   111d4:	beq	111c8 <_start@@Base+0x100>
   111d8:	push	{r4, lr}
   111dc:	blx	r3
   111e0:	pop	{r4, lr}
   111e4:	b	11158 <_start@@Base+0x90>
   111e8:	andeq	r6, r2, ip, lsl #30
   111ec:	andeq	r0, r0, r0

000111f0 <test_encoded_size@@Base>:
   111f0:	push	{fp, lr}
   111f4:	add	fp, sp, #4
   111f8:	sub	sp, sp, #8
   111fc:	ldr	r3, [pc, #852]	; 11558 <test_encoded_size@@Base+0x368>
   11200:	add	r3, pc, r3
   11204:	ldrd	r2, [r3]
   11208:	adds	r2, r2, #1
   1120c:	adc	r3, r3, #0
   11210:	ldr	r1, [pc, #836]	; 1155c <test_encoded_size@@Base+0x36c>
   11214:	add	r1, pc, r1
   11218:	strd	r2, [r1]
   1121c:	mov	r0, #0
   11220:	bl	12cc0 <b64_get_encoded_buffer_size@@Base>
   11224:	ldr	r3, [pc, #820]	; 11560 <test_encoded_size@@Base+0x370>
   11228:	add	r3, pc, r3
   1122c:	ldrd	r2, [r3, #8]
   11230:	adds	r2, r2, #1
   11234:	adc	r3, r3, #0
   11238:	ldr	r1, [pc, #804]	; 11564 <test_encoded_size@@Base+0x374>
   1123c:	add	r1, pc, r1
   11240:	strd	r2, [r1, #8]
   11244:	cmp	r0, #0
   11248:	moveq	r3, #1
   1124c:	movne	r3, #0
   11250:	uxtb	r3, r3
   11254:	mov	r0, r3
   11258:	mov	r3, #0
   1125c:	str	r3, [sp, #4]
   11260:	ldr	r3, [pc, #768]	; 11568 <test_encoded_size@@Base+0x378>
   11264:	add	r3, pc, r3
   11268:	str	r3, [sp]
   1126c:	ldr	r3, [pc, #760]	; 1156c <test_encoded_size@@Base+0x37c>
   11270:	add	r3, pc, r3
   11274:	ldr	r2, [pc, #756]	; 11570 <test_encoded_size@@Base+0x380>
   11278:	add	r2, pc, r2
   1127c:	mov	r1, #29
   11280:	bl	10fd8 <CU_assertImplementation@plt>
   11284:	ldr	r3, [pc, #744]	; 11574 <test_encoded_size@@Base+0x384>
   11288:	add	r3, pc, r3
   1128c:	ldrd	r2, [r3, #16]
   11290:	adds	r2, r2, #1
   11294:	adc	r3, r3, #0
   11298:	ldr	r1, [pc, #728]	; 11578 <test_encoded_size@@Base+0x388>
   1129c:	add	r1, pc, r1
   112a0:	strd	r2, [r1, #16]
   112a4:	mov	r0, #1
   112a8:	bl	12cc0 <b64_get_encoded_buffer_size@@Base>
   112ac:	ldr	r3, [pc, #712]	; 1157c <test_encoded_size@@Base+0x38c>
   112b0:	add	r3, pc, r3
   112b4:	ldrd	r2, [r3, #24]
   112b8:	adds	r2, r2, #1
   112bc:	adc	r3, r3, #0
   112c0:	ldr	r1, [pc, #696]	; 11580 <test_encoded_size@@Base+0x390>
   112c4:	add	r1, pc, r1
   112c8:	strd	r2, [r1, #24]
   112cc:	cmp	r0, #4
   112d0:	moveq	r3, #1
   112d4:	movne	r3, #0
   112d8:	uxtb	r3, r3
   112dc:	mov	r0, r3
   112e0:	mov	r3, #0
   112e4:	str	r3, [sp, #4]
   112e8:	ldr	r3, [pc, #660]	; 11584 <test_encoded_size@@Base+0x394>
   112ec:	add	r3, pc, r3
   112f0:	str	r3, [sp]
   112f4:	ldr	r3, [pc, #652]	; 11588 <test_encoded_size@@Base+0x398>
   112f8:	add	r3, pc, r3
   112fc:	ldr	r2, [pc, #648]	; 1158c <test_encoded_size@@Base+0x39c>
   11300:	add	r2, pc, r2
   11304:	mov	r1, #30
   11308:	bl	10fd8 <CU_assertImplementation@plt>
   1130c:	ldr	r3, [pc, #636]	; 11590 <test_encoded_size@@Base+0x3a0>
   11310:	add	r3, pc, r3
   11314:	ldrd	r2, [r3, #32]
   11318:	adds	r2, r2, #1
   1131c:	adc	r3, r3, #0
   11320:	ldr	r1, [pc, #620]	; 11594 <test_encoded_size@@Base+0x3a4>
   11324:	add	r1, pc, r1
   11328:	strd	r2, [r1, #32]
   1132c:	mov	r0, #2
   11330:	bl	12cc0 <b64_get_encoded_buffer_size@@Base>
   11334:	ldr	r3, [pc, #604]	; 11598 <test_encoded_size@@Base+0x3a8>
   11338:	add	r3, pc, r3
   1133c:	ldrd	r2, [r3, #40]	; 0x28
   11340:	adds	r2, r2, #1
   11344:	adc	r3, r3, #0
   11348:	ldr	r1, [pc, #588]	; 1159c <test_encoded_size@@Base+0x3ac>
   1134c:	add	r1, pc, r1
   11350:	strd	r2, [r1, #40]	; 0x28
   11354:	cmp	r0, #4
   11358:	moveq	r3, #1
   1135c:	movne	r3, #0
   11360:	uxtb	r3, r3
   11364:	mov	r0, r3
   11368:	mov	r3, #0
   1136c:	str	r3, [sp, #4]
   11370:	ldr	r3, [pc, #552]	; 115a0 <test_encoded_size@@Base+0x3b0>
   11374:	add	r3, pc, r3
   11378:	str	r3, [sp]
   1137c:	ldr	r3, [pc, #544]	; 115a4 <test_encoded_size@@Base+0x3b4>
   11380:	add	r3, pc, r3
   11384:	ldr	r2, [pc, #540]	; 115a8 <test_encoded_size@@Base+0x3b8>
   11388:	add	r2, pc, r2
   1138c:	mov	r1, #31
   11390:	bl	10fd8 <CU_assertImplementation@plt>
   11394:	ldr	r3, [pc, #528]	; 115ac <test_encoded_size@@Base+0x3bc>
   11398:	add	r3, pc, r3
   1139c:	ldrd	r2, [r3, #48]	; 0x30
   113a0:	adds	r2, r2, #1
   113a4:	adc	r3, r3, #0
   113a8:	ldr	r1, [pc, #512]	; 115b0 <test_encoded_size@@Base+0x3c0>
   113ac:	add	r1, pc, r1
   113b0:	strd	r2, [r1, #48]	; 0x30
   113b4:	mov	r0, #3
   113b8:	bl	12cc0 <b64_get_encoded_buffer_size@@Base>
   113bc:	ldr	r3, [pc, #496]	; 115b4 <test_encoded_size@@Base+0x3c4>
   113c0:	add	r3, pc, r3
   113c4:	ldrd	r2, [r3, #56]	; 0x38
   113c8:	adds	r2, r2, #1
   113cc:	adc	r3, r3, #0
   113d0:	ldr	r1, [pc, #480]	; 115b8 <test_encoded_size@@Base+0x3c8>
   113d4:	add	r1, pc, r1
   113d8:	strd	r2, [r1, #56]	; 0x38
   113dc:	cmp	r0, #4
   113e0:	moveq	r3, #1
   113e4:	movne	r3, #0
   113e8:	uxtb	r3, r3
   113ec:	mov	r0, r3
   113f0:	mov	r3, #0
   113f4:	str	r3, [sp, #4]
   113f8:	ldr	r3, [pc, #444]	; 115bc <test_encoded_size@@Base+0x3cc>
   113fc:	add	r3, pc, r3
   11400:	str	r3, [sp]
   11404:	ldr	r3, [pc, #436]	; 115c0 <test_encoded_size@@Base+0x3d0>
   11408:	add	r3, pc, r3
   1140c:	ldr	r2, [pc, #432]	; 115c4 <test_encoded_size@@Base+0x3d4>
   11410:	add	r2, pc, r2
   11414:	mov	r1, #32
   11418:	bl	10fd8 <CU_assertImplementation@plt>
   1141c:	ldr	r3, [pc, #420]	; 115c8 <test_encoded_size@@Base+0x3d8>
   11420:	add	r3, pc, r3
   11424:	ldrd	r2, [r3, #64]	; 0x40
   11428:	adds	r2, r2, #1
   1142c:	adc	r3, r3, #0
   11430:	ldr	r1, [pc, #404]	; 115cc <test_encoded_size@@Base+0x3dc>
   11434:	add	r1, pc, r1
   11438:	strd	r2, [r1, #64]	; 0x40
   1143c:	mov	r0, #4
   11440:	bl	12cc0 <b64_get_encoded_buffer_size@@Base>
   11444:	ldr	r3, [pc, #388]	; 115d0 <test_encoded_size@@Base+0x3e0>
   11448:	add	r3, pc, r3
   1144c:	ldrd	r2, [r3, #72]	; 0x48
   11450:	adds	r2, r2, #1
   11454:	adc	r3, r3, #0
   11458:	ldr	r1, [pc, #372]	; 115d4 <test_encoded_size@@Base+0x3e4>
   1145c:	add	r1, pc, r1
   11460:	strd	r2, [r1, #72]	; 0x48
   11464:	cmp	r0, #8
   11468:	moveq	r3, #1
   1146c:	movne	r3, #0
   11470:	uxtb	r3, r3
   11474:	mov	r0, r3
   11478:	mov	r3, #0
   1147c:	str	r3, [sp, #4]
   11480:	ldr	r3, [pc, #336]	; 115d8 <test_encoded_size@@Base+0x3e8>
   11484:	add	r3, pc, r3
   11488:	str	r3, [sp]
   1148c:	ldr	r3, [pc, #328]	; 115dc <test_encoded_size@@Base+0x3ec>
   11490:	add	r3, pc, r3
   11494:	ldr	r2, [pc, #324]	; 115e0 <test_encoded_size@@Base+0x3f0>
   11498:	add	r2, pc, r2
   1149c:	mov	r1, #33	; 0x21
   114a0:	bl	10fd8 <CU_assertImplementation@plt>
   114a4:	ldr	r3, [pc, #312]	; 115e4 <test_encoded_size@@Base+0x3f4>
   114a8:	add	r3, pc, r3
   114ac:	ldrd	r2, [r3, #80]	; 0x50
   114b0:	adds	r2, r2, #1
   114b4:	adc	r3, r3, #0
   114b8:	ldr	r1, [pc, #296]	; 115e8 <test_encoded_size@@Base+0x3f8>
   114bc:	add	r1, pc, r1
   114c0:	strd	r2, [r1, #80]	; 0x50
   114c4:	mov	r0, #300	; 0x12c
   114c8:	bl	12cc0 <b64_get_encoded_buffer_size@@Base>
   114cc:	ldr	r3, [pc, #280]	; 115ec <test_encoded_size@@Base+0x3fc>
   114d0:	add	r3, pc, r3
   114d4:	ldrd	r2, [r3, #88]	; 0x58
   114d8:	adds	r2, r2, #1
   114dc:	adc	r3, r3, #0
   114e0:	ldr	r1, [pc, #264]	; 115f0 <test_encoded_size@@Base+0x400>
   114e4:	add	r1, pc, r1
   114e8:	strd	r2, [r1, #88]	; 0x58
   114ec:	cmp	r0, #400	; 0x190
   114f0:	moveq	r3, #1
   114f4:	movne	r3, #0
   114f8:	uxtb	r3, r3
   114fc:	mov	r0, r3
   11500:	mov	r3, #0
   11504:	str	r3, [sp, #4]
   11508:	ldr	r3, [pc, #228]	; 115f4 <test_encoded_size@@Base+0x404>
   1150c:	add	r3, pc, r3
   11510:	str	r3, [sp]
   11514:	ldr	r3, [pc, #220]	; 115f8 <test_encoded_size@@Base+0x408>
   11518:	add	r3, pc, r3
   1151c:	ldr	r2, [pc, #216]	; 115fc <test_encoded_size@@Base+0x40c>
   11520:	add	r2, pc, r2
   11524:	mov	r1, #34	; 0x22
   11528:	bl	10fd8 <CU_assertImplementation@plt>
   1152c:	ldr	r3, [pc, #204]	; 11600 <test_encoded_size@@Base+0x410>
   11530:	add	r3, pc, r3
   11534:	ldrd	r2, [r3, #96]	; 0x60
   11538:	adds	r2, r2, #1
   1153c:	adc	r3, r3, #0
   11540:	ldr	r1, [pc, #188]	; 11604 <test_encoded_size@@Base+0x414>
   11544:	add	r1, pc, r1
   11548:	strd	r2, [r1, #96]	; 0x60
   1154c:	nop			; (mov r0, r0)
   11550:	sub	sp, fp, #4
   11554:	pop	{fp, pc}
   11558:	andeq	r6, r1, r0, asr #6
   1155c:	andeq	r6, r1, ip, lsr #6
   11560:	andeq	r6, r1, r8, lsl r3
   11564:	andeq	r6, r1, r4, lsl #6
   11568:	muleq	r0, r0, r7
   1156c:	strdeq	r4, [r0], -r0
   11570:	andeq	r4, r0, r8, asr #14
   11574:			; <UNDEFINED> instruction: 0x000162b8
   11578:	andeq	r6, r1, r4, lsr #5
   1157c:	muleq	r1, r0, r2
   11580:	andeq	r6, r1, ip, ror r2
   11584:	andeq	r4, r0, r8, lsl #14
   11588:	andeq	r4, r0, r8, ror #12
   1158c:	strdeq	r4, [r0], -r8
   11590:	andeq	r6, r1, r0, lsr r2
   11594:	andeq	r6, r1, ip, lsl r2
   11598:	andeq	r6, r1, r8, lsl #4
   1159c:	strdeq	r6, [r1], -r4
   115a0:	andeq	r4, r0, r0, lsl #13
   115a4:	andeq	r4, r0, r0, ror #11
   115a8:	andeq	r4, r0, r4, lsr #13
   115ac:	andeq	r6, r1, r8, lsr #3
   115b0:	muleq	r1, r4, r1
   115b4:	andeq	r6, r1, r0, lsl #3
   115b8:	andeq	r6, r1, ip, ror #2
   115bc:	strdeq	r4, [r0], -r8
   115c0:	andeq	r4, r0, r8, asr r5
   115c4:	andeq	r4, r0, r0, asr r6
   115c8:	andeq	r6, r1, r0, lsr #2
   115cc:	andeq	r6, r1, ip, lsl #2
   115d0:	strdeq	r6, [r1], -r8
   115d4:	andeq	r6, r1, r4, ror #1
   115d8:	andeq	r4, r0, r0, ror r5
   115dc:	ldrdeq	r4, [r0], -r0
   115e0:	strdeq	r4, [r0], -ip
   115e4:	muleq	r1, r8, r0
   115e8:	andeq	r6, r1, r4, lsl #1
   115ec:	andeq	r6, r1, r0, ror r0
   115f0:	andeq	r6, r1, ip, asr r0
   115f4:	andeq	r4, r0, r8, ror #9
   115f8:	andeq	r4, r0, r8, asr #8
   115fc:	andeq	r4, r0, r8, lsr #11
   11600:	andeq	r6, r1, r0, lsl r0
   11604:	strdeq	r5, [r1], -ip

00011608 <test_decoded_size@@Base>:
   11608:	push	{fp, lr}
   1160c:	add	fp, sp, #4
   11610:	sub	sp, sp, #8
   11614:	ldr	r3, [pc, #852]	; 11970 <test_decoded_size@@Base+0x368>
   11618:	add	r3, pc, r3
   1161c:	ldrd	r2, [r3]
   11620:	adds	r2, r2, #1
   11624:	adc	r3, r3, #0
   11628:	ldr	r1, [pc, #836]	; 11974 <test_decoded_size@@Base+0x36c>
   1162c:	add	r1, pc, r1
   11630:	strd	r2, [r1]
   11634:	mov	r0, #0
   11638:	bl	13158 <b64_get_decoded_buffer_size@@Base>
   1163c:	ldr	r3, [pc, #820]	; 11978 <test_decoded_size@@Base+0x370>
   11640:	add	r3, pc, r3
   11644:	ldrd	r2, [r3, #8]
   11648:	adds	r2, r2, #1
   1164c:	adc	r3, r3, #0
   11650:	ldr	r1, [pc, #804]	; 1197c <test_decoded_size@@Base+0x374>
   11654:	add	r1, pc, r1
   11658:	strd	r2, [r1, #8]
   1165c:	cmp	r0, #0
   11660:	moveq	r3, #1
   11664:	movne	r3, #0
   11668:	uxtb	r3, r3
   1166c:	mov	r0, r3
   11670:	mov	r3, #0
   11674:	str	r3, [sp, #4]
   11678:	ldr	r3, [pc, #768]	; 11980 <test_decoded_size@@Base+0x378>
   1167c:	add	r3, pc, r3
   11680:	str	r3, [sp]
   11684:	ldr	r3, [pc, #760]	; 11984 <test_decoded_size@@Base+0x37c>
   11688:	add	r3, pc, r3
   1168c:	ldr	r2, [pc, #756]	; 11988 <test_decoded_size@@Base+0x380>
   11690:	add	r2, pc, r2
   11694:	mov	r1, #38	; 0x26
   11698:	bl	10fd8 <CU_assertImplementation@plt>
   1169c:	ldr	r3, [pc, #744]	; 1198c <test_decoded_size@@Base+0x384>
   116a0:	add	r3, pc, r3
   116a4:	ldrd	r2, [r3, #16]
   116a8:	adds	r2, r2, #1
   116ac:	adc	r3, r3, #0
   116b0:	ldr	r1, [pc, #728]	; 11990 <test_decoded_size@@Base+0x388>
   116b4:	add	r1, pc, r1
   116b8:	strd	r2, [r1, #16]
   116bc:	mov	r0, #1
   116c0:	bl	13158 <b64_get_decoded_buffer_size@@Base>
   116c4:	ldr	r3, [pc, #712]	; 11994 <test_decoded_size@@Base+0x38c>
   116c8:	add	r3, pc, r3
   116cc:	ldrd	r2, [r3, #24]
   116d0:	adds	r2, r2, #1
   116d4:	adc	r3, r3, #0
   116d8:	ldr	r1, [pc, #696]	; 11998 <test_decoded_size@@Base+0x390>
   116dc:	add	r1, pc, r1
   116e0:	strd	r2, [r1, #24]
   116e4:	cmp	r0, #0
   116e8:	moveq	r3, #1
   116ec:	movne	r3, #0
   116f0:	uxtb	r3, r3
   116f4:	mov	r0, r3
   116f8:	mov	r3, #0
   116fc:	str	r3, [sp, #4]
   11700:	ldr	r3, [pc, #660]	; 1199c <test_decoded_size@@Base+0x394>
   11704:	add	r3, pc, r3
   11708:	str	r3, [sp]
   1170c:	ldr	r3, [pc, #652]	; 119a0 <test_decoded_size@@Base+0x398>
   11710:	add	r3, pc, r3
   11714:	ldr	r2, [pc, #648]	; 119a4 <test_decoded_size@@Base+0x39c>
   11718:	add	r2, pc, r2
   1171c:	mov	r1, #39	; 0x27
   11720:	bl	10fd8 <CU_assertImplementation@plt>
   11724:	ldr	r3, [pc, #636]	; 119a8 <test_decoded_size@@Base+0x3a0>
   11728:	add	r3, pc, r3
   1172c:	ldrd	r2, [r3, #32]
   11730:	adds	r2, r2, #1
   11734:	adc	r3, r3, #0
   11738:	ldr	r1, [pc, #620]	; 119ac <test_decoded_size@@Base+0x3a4>
   1173c:	add	r1, pc, r1
   11740:	strd	r2, [r1, #32]
   11744:	mov	r0, #2
   11748:	bl	13158 <b64_get_decoded_buffer_size@@Base>
   1174c:	ldr	r3, [pc, #604]	; 119b0 <test_decoded_size@@Base+0x3a8>
   11750:	add	r3, pc, r3
   11754:	ldrd	r2, [r3, #40]	; 0x28
   11758:	adds	r2, r2, #1
   1175c:	adc	r3, r3, #0
   11760:	ldr	r1, [pc, #588]	; 119b4 <test_decoded_size@@Base+0x3ac>
   11764:	add	r1, pc, r1
   11768:	strd	r2, [r1, #40]	; 0x28
   1176c:	cmp	r0, #0
   11770:	moveq	r3, #1
   11774:	movne	r3, #0
   11778:	uxtb	r3, r3
   1177c:	mov	r0, r3
   11780:	mov	r3, #0
   11784:	str	r3, [sp, #4]
   11788:	ldr	r3, [pc, #552]	; 119b8 <test_decoded_size@@Base+0x3b0>
   1178c:	add	r3, pc, r3
   11790:	str	r3, [sp]
   11794:	ldr	r3, [pc, #544]	; 119bc <test_decoded_size@@Base+0x3b4>
   11798:	add	r3, pc, r3
   1179c:	ldr	r2, [pc, #540]	; 119c0 <test_decoded_size@@Base+0x3b8>
   117a0:	add	r2, pc, r2
   117a4:	mov	r1, #40	; 0x28
   117a8:	bl	10fd8 <CU_assertImplementation@plt>
   117ac:	ldr	r3, [pc, #528]	; 119c4 <test_decoded_size@@Base+0x3bc>
   117b0:	add	r3, pc, r3
   117b4:	ldrd	r2, [r3, #48]	; 0x30
   117b8:	adds	r2, r2, #1
   117bc:	adc	r3, r3, #0
   117c0:	ldr	r1, [pc, #512]	; 119c8 <test_decoded_size@@Base+0x3c0>
   117c4:	add	r1, pc, r1
   117c8:	strd	r2, [r1, #48]	; 0x30
   117cc:	mov	r0, #3
   117d0:	bl	13158 <b64_get_decoded_buffer_size@@Base>
   117d4:	ldr	r3, [pc, #496]	; 119cc <test_decoded_size@@Base+0x3c4>
   117d8:	add	r3, pc, r3
   117dc:	ldrd	r2, [r3, #56]	; 0x38
   117e0:	adds	r2, r2, #1
   117e4:	adc	r3, r3, #0
   117e8:	ldr	r1, [pc, #480]	; 119d0 <test_decoded_size@@Base+0x3c8>
   117ec:	add	r1, pc, r1
   117f0:	strd	r2, [r1, #56]	; 0x38
   117f4:	cmp	r0, #0
   117f8:	moveq	r3, #1
   117fc:	movne	r3, #0
   11800:	uxtb	r3, r3
   11804:	mov	r0, r3
   11808:	mov	r3, #0
   1180c:	str	r3, [sp, #4]
   11810:	ldr	r3, [pc, #444]	; 119d4 <test_decoded_size@@Base+0x3cc>
   11814:	add	r3, pc, r3
   11818:	str	r3, [sp]
   1181c:	ldr	r3, [pc, #436]	; 119d8 <test_decoded_size@@Base+0x3d0>
   11820:	add	r3, pc, r3
   11824:	ldr	r2, [pc, #432]	; 119dc <test_decoded_size@@Base+0x3d4>
   11828:	add	r2, pc, r2
   1182c:	mov	r1, #41	; 0x29
   11830:	bl	10fd8 <CU_assertImplementation@plt>
   11834:	ldr	r3, [pc, #420]	; 119e0 <test_decoded_size@@Base+0x3d8>
   11838:	add	r3, pc, r3
   1183c:	ldrd	r2, [r3, #64]	; 0x40
   11840:	adds	r2, r2, #1
   11844:	adc	r3, r3, #0
   11848:	ldr	r1, [pc, #404]	; 119e4 <test_decoded_size@@Base+0x3dc>
   1184c:	add	r1, pc, r1
   11850:	strd	r2, [r1, #64]	; 0x40
   11854:	mov	r0, #4
   11858:	bl	13158 <b64_get_decoded_buffer_size@@Base>
   1185c:	ldr	r3, [pc, #388]	; 119e8 <test_decoded_size@@Base+0x3e0>
   11860:	add	r3, pc, r3
   11864:	ldrd	r2, [r3, #72]	; 0x48
   11868:	adds	r2, r2, #1
   1186c:	adc	r3, r3, #0
   11870:	ldr	r1, [pc, #372]	; 119ec <test_decoded_size@@Base+0x3e4>
   11874:	add	r1, pc, r1
   11878:	strd	r2, [r1, #72]	; 0x48
   1187c:	cmp	r0, #3
   11880:	moveq	r3, #1
   11884:	movne	r3, #0
   11888:	uxtb	r3, r3
   1188c:	mov	r0, r3
   11890:	mov	r3, #0
   11894:	str	r3, [sp, #4]
   11898:	ldr	r3, [pc, #336]	; 119f0 <test_decoded_size@@Base+0x3e8>
   1189c:	add	r3, pc, r3
   118a0:	str	r3, [sp]
   118a4:	ldr	r3, [pc, #328]	; 119f4 <test_decoded_size@@Base+0x3ec>
   118a8:	add	r3, pc, r3
   118ac:	ldr	r2, [pc, #324]	; 119f8 <test_decoded_size@@Base+0x3f0>
   118b0:	add	r2, pc, r2
   118b4:	mov	r1, #42	; 0x2a
   118b8:	bl	10fd8 <CU_assertImplementation@plt>
   118bc:	ldr	r3, [pc, #312]	; 119fc <test_decoded_size@@Base+0x3f4>
   118c0:	add	r3, pc, r3
   118c4:	ldrd	r2, [r3, #80]	; 0x50
   118c8:	adds	r2, r2, #1
   118cc:	adc	r3, r3, #0
   118d0:	ldr	r1, [pc, #296]	; 11a00 <test_decoded_size@@Base+0x3f8>
   118d4:	add	r1, pc, r1
   118d8:	strd	r2, [r1, #80]	; 0x50
   118dc:	mov	r0, #8
   118e0:	bl	13158 <b64_get_decoded_buffer_size@@Base>
   118e4:	ldr	r3, [pc, #280]	; 11a04 <test_decoded_size@@Base+0x3fc>
   118e8:	add	r3, pc, r3
   118ec:	ldrd	r2, [r3, #88]	; 0x58
   118f0:	adds	r2, r2, #1
   118f4:	adc	r3, r3, #0
   118f8:	ldr	r1, [pc, #264]	; 11a08 <test_decoded_size@@Base+0x400>
   118fc:	add	r1, pc, r1
   11900:	strd	r2, [r1, #88]	; 0x58
   11904:	cmp	r0, #6
   11908:	moveq	r3, #1
   1190c:	movne	r3, #0
   11910:	uxtb	r3, r3
   11914:	mov	r0, r3
   11918:	mov	r3, #0
   1191c:	str	r3, [sp, #4]
   11920:	ldr	r3, [pc, #228]	; 11a0c <test_decoded_size@@Base+0x404>
   11924:	add	r3, pc, r3
   11928:	str	r3, [sp]
   1192c:	ldr	r3, [pc, #220]	; 11a10 <test_decoded_size@@Base+0x408>
   11930:	add	r3, pc, r3
   11934:	ldr	r2, [pc, #216]	; 11a14 <test_decoded_size@@Base+0x40c>
   11938:	add	r2, pc, r2
   1193c:	mov	r1, #43	; 0x2b
   11940:	bl	10fd8 <CU_assertImplementation@plt>
   11944:	ldr	r3, [pc, #204]	; 11a18 <test_decoded_size@@Base+0x410>
   11948:	add	r3, pc, r3
   1194c:	ldrd	r2, [r3, #96]	; 0x60
   11950:	adds	r2, r2, #1
   11954:	adc	r3, r3, #0
   11958:	ldr	r1, [pc, #188]	; 11a1c <test_decoded_size@@Base+0x414>
   1195c:	add	r1, pc, r1
   11960:	strd	r2, [r1, #96]	; 0x60
   11964:	nop			; (mov r0, r0)
   11968:	sub	sp, fp, #4
   1196c:	pop	{fp, pc}
   11970:	andeq	r5, r1, r0, asr #29
   11974:	andeq	r5, r1, ip, lsr #29
   11978:	muleq	r1, r8, lr
   1197c:	andeq	r5, r1, r4, lsl #29
   11980:	andeq	r4, r0, r8, ror r3
   11984:	ldrdeq	r4, [r0], -r8
   11988:	andeq	r4, r0, r0, ror r4
   1198c:	andeq	r5, r1, r8, lsr lr
   11990:	andeq	r5, r1, r4, lsr #28
   11994:	andeq	r5, r1, r0, lsl lr
   11998:	strdeq	r5, [r1], -ip
   1199c:	strdeq	r4, [r0], -r0
   119a0:	andeq	r4, r0, r0, asr r2
   119a4:	andeq	r4, r0, ip, lsl r4
   119a8:			; <UNDEFINED> instruction: 0x00015db0
   119ac:	muleq	r1, ip, sp
   119b0:	andeq	r5, r1, r8, lsl #27
   119b4:	andeq	r5, r1, r4, ror sp
   119b8:	andeq	r4, r0, r8, ror #4
   119bc:	andeq	r4, r0, r8, asr #3
   119c0:	andeq	r4, r0, r8, asr #7
   119c4:	andeq	r5, r1, r8, lsr #26
   119c8:	andeq	r5, r1, r4, lsl sp
   119cc:	andeq	r5, r1, r0, lsl #26
   119d0:	andeq	r5, r1, ip, ror #25
   119d4:	andeq	r4, r0, r0, ror #3
   119d8:	andeq	r4, r0, r0, asr #2
   119dc:	andeq	r4, r0, r4, ror r3
   119e0:	andeq	r5, r1, r0, lsr #25
   119e4:	andeq	r5, r1, ip, lsl #25
   119e8:	andeq	r5, r1, r8, ror ip
   119ec:	andeq	r5, r1, r4, ror #24
   119f0:	andeq	r4, r0, r8, asr r1
   119f4:	strheq	r4, [r0], -r8
   119f8:	andeq	r4, r0, r0, lsr #6
   119fc:	andeq	r5, r1, r8, lsl ip
   11a00:	andeq	r5, r1, r4, lsl #24
   11a04:	strdeq	r5, [r1], -r0
   11a08:	ldrdeq	r5, [r1], -ip
   11a0c:	ldrdeq	r4, [r0], -r0
   11a10:	andeq	r4, r0, r0, lsr r0
   11a14:	andeq	r4, r0, ip, asr #5
   11a18:	muleq	r1, r0, fp
   11a1c:	andeq	r5, r1, ip, ror fp

00011a20 <test_encode@@Base>:
   11a20:	push	{fp, lr}
   11a24:	add	fp, sp, #4
   11a28:	sub	sp, sp, #8
   11a2c:	ldr	r3, [pc, #660]	; 11cc8 <test_encode@@Base+0x2a8>
   11a30:	add	r3, pc, r3
   11a34:	ldrd	r2, [r3]
   11a38:	adds	r2, r2, #1
   11a3c:	adc	r3, r3, #0
   11a40:	ldr	r1, [pc, #644]	; 11ccc <test_encode@@Base+0x2ac>
   11a44:	add	r1, pc, r1
   11a48:	strd	r2, [r1]
   11a4c:	mov	r3, #12
   11a50:	ldr	r2, [pc, #632]	; 11cd0 <test_encode@@Base+0x2b0>
   11a54:	add	r2, pc, r2
   11a58:	mov	r1, #8
   11a5c:	ldr	r0, [pc, #624]	; 11cd4 <test_encode@@Base+0x2b4>
   11a60:	add	r0, pc, r0
   11a64:	bl	11d60 <test_encoded_stuff@@Base>
   11a68:	mov	r3, r0
   11a6c:	mov	r0, r3
   11a70:	ldr	r3, [pc, #608]	; 11cd8 <test_encode@@Base+0x2b8>
   11a74:	add	r3, pc, r3
   11a78:	ldrd	r2, [r3, #8]
   11a7c:	adds	r2, r2, #1
   11a80:	adc	r3, r3, #0
   11a84:	ldr	r1, [pc, #592]	; 11cdc <test_encode@@Base+0x2bc>
   11a88:	add	r1, pc, r1
   11a8c:	strd	r2, [r1, #8]
   11a90:	eor	r3, r0, #1
   11a94:	uxtb	r3, r3
   11a98:	mov	r0, r3
   11a9c:	mov	r3, #0
   11aa0:	str	r3, [sp, #4]
   11aa4:	ldr	r3, [pc, #564]	; 11ce0 <test_encode@@Base+0x2c0>
   11aa8:	add	r3, pc, r3
   11aac:	str	r3, [sp]
   11ab0:	ldr	r3, [pc, #556]	; 11ce4 <test_encode@@Base+0x2c4>
   11ab4:	add	r3, pc, r3
   11ab8:	ldr	r2, [pc, #552]	; 11ce8 <test_encode@@Base+0x2c8>
   11abc:	add	r2, pc, r2
   11ac0:	mov	r1, #47	; 0x2f
   11ac4:	bl	10fd8 <CU_assertImplementation@plt>
   11ac8:	ldr	r3, [pc, #540]	; 11cec <test_encode@@Base+0x2cc>
   11acc:	add	r3, pc, r3
   11ad0:	ldrd	r2, [r3, #16]
   11ad4:	adds	r2, r2, #1
   11ad8:	adc	r3, r3, #0
   11adc:	ldr	r1, [pc, #524]	; 11cf0 <test_encode@@Base+0x2d0>
   11ae0:	add	r1, pc, r1
   11ae4:	strd	r2, [r1, #16]
   11ae8:	mov	r3, #12
   11aec:	ldr	r2, [pc, #512]	; 11cf4 <test_encode@@Base+0x2d4>
   11af0:	add	r2, pc, r2
   11af4:	mov	r1, #7
   11af8:	ldr	r0, [pc, #504]	; 11cf8 <test_encode@@Base+0x2d8>
   11afc:	add	r0, pc, r0
   11b00:	bl	11d60 <test_encoded_stuff@@Base>
   11b04:	mov	r3, r0
   11b08:	mov	r0, r3
   11b0c:	ldr	r3, [pc, #488]	; 11cfc <test_encode@@Base+0x2dc>
   11b10:	add	r3, pc, r3
   11b14:	ldrd	r2, [r3, #24]
   11b18:	adds	r2, r2, #1
   11b1c:	adc	r3, r3, #0
   11b20:	ldr	r1, [pc, #472]	; 11d00 <test_encode@@Base+0x2e0>
   11b24:	add	r1, pc, r1
   11b28:	strd	r2, [r1, #24]
   11b2c:	eor	r3, r0, #1
   11b30:	uxtb	r3, r3
   11b34:	mov	r0, r3
   11b38:	mov	r3, #0
   11b3c:	str	r3, [sp, #4]
   11b40:	ldr	r3, [pc, #444]	; 11d04 <test_encode@@Base+0x2e4>
   11b44:	add	r3, pc, r3
   11b48:	str	r3, [sp]
   11b4c:	ldr	r3, [pc, #436]	; 11d08 <test_encode@@Base+0x2e8>
   11b50:	add	r3, pc, r3
   11b54:	ldr	r2, [pc, #432]	; 11d0c <test_encode@@Base+0x2ec>
   11b58:	add	r2, pc, r2
   11b5c:	mov	r1, #48	; 0x30
   11b60:	bl	10fd8 <CU_assertImplementation@plt>
   11b64:	ldr	r3, [pc, #420]	; 11d10 <test_encode@@Base+0x2f0>
   11b68:	add	r3, pc, r3
   11b6c:	ldrd	r2, [r3, #32]
   11b70:	adds	r2, r2, #1
   11b74:	adc	r3, r3, #0
   11b78:	ldr	r1, [pc, #404]	; 11d14 <test_encode@@Base+0x2f4>
   11b7c:	add	r1, pc, r1
   11b80:	strd	r2, [r1, #32]
   11b84:	mov	r3, #8
   11b88:	ldr	r2, [pc, #392]	; 11d18 <test_encode@@Base+0x2f8>
   11b8c:	add	r2, pc, r2
   11b90:	mov	r1, #6
   11b94:	ldr	r0, [pc, #384]	; 11d1c <test_encode@@Base+0x2fc>
   11b98:	add	r0, pc, r0
   11b9c:	bl	11d60 <test_encoded_stuff@@Base>
   11ba0:	mov	r3, r0
   11ba4:	mov	r0, r3
   11ba8:	ldr	r3, [pc, #368]	; 11d20 <test_encode@@Base+0x300>
   11bac:	add	r3, pc, r3
   11bb0:	ldrd	r2, [r3, #40]	; 0x28
   11bb4:	adds	r2, r2, #1
   11bb8:	adc	r3, r3, #0
   11bbc:	ldr	r1, [pc, #352]	; 11d24 <test_encode@@Base+0x304>
   11bc0:	add	r1, pc, r1
   11bc4:	strd	r2, [r1, #40]	; 0x28
   11bc8:	eor	r3, r0, #1
   11bcc:	uxtb	r3, r3
   11bd0:	mov	r0, r3
   11bd4:	mov	r3, #0
   11bd8:	str	r3, [sp, #4]
   11bdc:	ldr	r3, [pc, #324]	; 11d28 <test_encode@@Base+0x308>
   11be0:	add	r3, pc, r3
   11be4:	str	r3, [sp]
   11be8:	ldr	r3, [pc, #316]	; 11d2c <test_encode@@Base+0x30c>
   11bec:	add	r3, pc, r3
   11bf0:	ldr	r2, [pc, #312]	; 11d30 <test_encode@@Base+0x310>
   11bf4:	add	r2, pc, r2
   11bf8:	mov	r1, #49	; 0x31
   11bfc:	bl	10fd8 <CU_assertImplementation@plt>
   11c00:	ldr	r3, [pc, #300]	; 11d34 <test_encode@@Base+0x314>
   11c04:	add	r3, pc, r3
   11c08:	ldrd	r2, [r3, #48]	; 0x30
   11c0c:	adds	r2, r2, #1
   11c10:	adc	r3, r3, #0
   11c14:	ldr	r1, [pc, #284]	; 11d38 <test_encode@@Base+0x318>
   11c18:	add	r1, pc, r1
   11c1c:	strd	r2, [r1, #48]	; 0x30
   11c20:	mov	r3, #8
   11c24:	ldr	r2, [pc, #272]	; 11d3c <test_encode@@Base+0x31c>
   11c28:	add	r2, pc, r2
   11c2c:	mov	r1, #5
   11c30:	ldr	r0, [pc, #264]	; 11d40 <test_encode@@Base+0x320>
   11c34:	add	r0, pc, r0
   11c38:	bl	11d60 <test_encoded_stuff@@Base>
   11c3c:	mov	r3, r0
   11c40:	mov	r0, r3
   11c44:	ldr	r3, [pc, #248]	; 11d44 <test_encode@@Base+0x324>
   11c48:	add	r3, pc, r3
   11c4c:	ldrd	r2, [r3, #56]	; 0x38
   11c50:	adds	r2, r2, #1
   11c54:	adc	r3, r3, #0
   11c58:	ldr	r1, [pc, #232]	; 11d48 <test_encode@@Base+0x328>
   11c5c:	add	r1, pc, r1
   11c60:	strd	r2, [r1, #56]	; 0x38
   11c64:	eor	r3, r0, #1
   11c68:	uxtb	r3, r3
   11c6c:	mov	r0, r3
   11c70:	mov	r3, #0
   11c74:	str	r3, [sp, #4]
   11c78:	ldr	r3, [pc, #204]	; 11d4c <test_encode@@Base+0x32c>
   11c7c:	add	r3, pc, r3
   11c80:	str	r3, [sp]
   11c84:	ldr	r3, [pc, #196]	; 11d50 <test_encode@@Base+0x330>
   11c88:	add	r3, pc, r3
   11c8c:	ldr	r2, [pc, #192]	; 11d54 <test_encode@@Base+0x334>
   11c90:	add	r2, pc, r2
   11c94:	mov	r1, #50	; 0x32
   11c98:	bl	10fd8 <CU_assertImplementation@plt>
   11c9c:	ldr	r3, [pc, #180]	; 11d58 <test_encode@@Base+0x338>
   11ca0:	add	r3, pc, r3
   11ca4:	ldrd	r2, [r3, #64]	; 0x40
   11ca8:	adds	r2, r2, #1
   11cac:	adc	r3, r3, #0
   11cb0:	ldr	r1, [pc, #164]	; 11d5c <test_encode@@Base+0x33c>
   11cb4:	add	r1, pc, r1
   11cb8:	strd	r2, [r1, #64]	; 0x40
   11cbc:	nop			; (mov r0, r0)
   11cc0:	sub	sp, fp, #4
   11cc4:	pop	{fp, pc}
   11cc8:	andeq	r5, r1, r0, ror #20
   11ccc:	andeq	r5, r1, ip, asr #20
   11cd0:	andeq	r4, r0, r4, ror #3
   11cd4:	andeq	r4, r0, r8, ror #3
   11cd8:	andeq	r5, r1, ip, lsl sl
   11cdc:	andeq	r5, r1, r8, lsl #20
   11ce0:	andeq	r3, r0, ip, asr #30
   11ce4:	andeq	r3, r0, ip, lsr #29
   11ce8:	muleq	r0, r8, r1
   11cec:	andeq	r5, r1, r4, asr #19
   11cf0:			; <UNDEFINED> instruction: 0x000159b0
   11cf4:	andeq	r4, r0, r4, asr #3
   11cf8:	andeq	r4, r0, r8, asr #3
   11cfc:	andeq	r5, r1, r0, lsl #19
   11d00:	andeq	r5, r1, ip, ror #18
   11d04:			; <UNDEFINED> instruction: 0x00003eb0
   11d08:	andeq	r3, r0, r0, lsl lr
   11d0c:	andeq	r4, r0, r4, ror r1
   11d10:	andeq	r5, r1, r8, lsr #18
   11d14:	andeq	r5, r1, r4, lsl r9
   11d18:	muleq	r0, ip, r1
   11d1c:	muleq	r0, ip, r1
   11d20:	andeq	r5, r1, r4, ror #17
   11d24:	ldrdeq	r5, [r1], -r0
   11d28:	andeq	r3, r0, r4, lsl lr
   11d2c:	andeq	r3, r0, r4, ror sp
   11d30:	andeq	r4, r0, r8, asr #2
   11d34:	andeq	r5, r1, ip, lsl #17
   11d38:	andeq	r5, r1, r8, ror r8
   11d3c:	andeq	r4, r0, ip, ror #2
   11d40:	andeq	r4, r0, ip, ror #2
   11d44:	andeq	r5, r1, r8, asr #16
   11d48:	andeq	r5, r1, r4, lsr r8
   11d4c:	andeq	r3, r0, r8, ror sp
   11d50:	ldrdeq	r3, [r0], -r8
   11d54:	andeq	r4, r0, r8, lsl r1
   11d58:	strdeq	r5, [r1], -r0
   11d5c:	ldrdeq	r5, [r1], -ip

00011d60 <test_encoded_stuff@@Base>:
   11d60:	push	{fp, lr}
   11d64:	add	fp, sp, #4
   11d68:	sub	sp, sp, #56	; 0x38
   11d6c:	str	r0, [fp, #-24]	; 0xffffffe8
   11d70:	str	r1, [fp, #-28]	; 0xffffffe4
   11d74:	str	r2, [fp, #-32]	; 0xffffffe0
   11d78:	str	r3, [fp, #-36]	; 0xffffffdc
   11d7c:	ldr	r3, [pc, #736]	; 12064 <test_encoded_stuff@@Base+0x304>
   11d80:	add	r3, pc, r3
   11d84:	ldrd	r2, [r3]
   11d88:	adds	r2, r2, #1
   11d8c:	adc	r3, r3, #0
   11d90:	ldr	r1, [pc, #720]	; 12068 <test_encoded_stuff@@Base+0x308>
   11d94:	add	r1, pc, r1
   11d98:	strd	r2, [r1]
   11d9c:	mov	r3, #0
   11da0:	strb	r3, [fp, #-9]
   11da4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11da8:	bl	12cc0 <b64_get_encoded_buffer_size@@Base>
   11dac:	str	r0, [fp, #-16]
   11db0:	ldr	r3, [pc, #692]	; 1206c <test_encoded_stuff@@Base+0x30c>
   11db4:	add	r3, pc, r3
   11db8:	ldrd	r2, [r3, #8]
   11dbc:	adds	r2, r2, #1
   11dc0:	adc	r3, r3, #0
   11dc4:	ldr	r1, [pc, #676]	; 12070 <test_encoded_stuff@@Base+0x310>
   11dc8:	add	r1, pc, r1
   11dcc:	strd	r2, [r1, #8]
   11dd0:	ldr	r0, [fp, #-16]
   11dd4:	bl	10fa8 <malloc@plt>
   11dd8:	mov	r3, r0
   11ddc:	str	r3, [fp, #-20]	; 0xffffffec
   11de0:	ldr	r2, [fp, #-20]	; 0xffffffec
   11de4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   11de8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11dec:	bl	12d28 <b64_encode@@Base>
   11df0:	ldr	r3, [pc, #636]	; 12074 <test_encoded_stuff@@Base+0x314>
   11df4:	add	r3, pc, r3
   11df8:	ldrd	r2, [r3, #16]
   11dfc:	adds	r2, r2, #1
   11e00:	adc	r3, r3, #0
   11e04:	ldr	r1, [pc, #620]	; 12078 <test_encoded_stuff@@Base+0x318>
   11e08:	add	r1, pc, r1
   11e0c:	strd	r2, [r1, #16]
   11e10:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11e14:	ldr	r3, [fp, #-16]
   11e18:	cmp	r2, r3
   11e1c:	moveq	r3, #1
   11e20:	movne	r3, #0
   11e24:	uxtb	r3, r3
   11e28:	mov	r0, r3
   11e2c:	mov	r3, #0
   11e30:	str	r3, [sp, #4]
   11e34:	ldr	r3, [pc, #576]	; 1207c <test_encoded_stuff@@Base+0x31c>
   11e38:	add	r3, pc, r3
   11e3c:	str	r3, [sp]
   11e40:	ldr	r3, [pc, #568]	; 12080 <test_encoded_stuff@@Base+0x320>
   11e44:	add	r3, pc, r3
   11e48:	ldr	r2, [pc, #564]	; 12084 <test_encoded_stuff@@Base+0x324>
   11e4c:	add	r2, pc, r2
   11e50:	mov	r1, #62	; 0x3e
   11e54:	bl	10fd8 <CU_assertImplementation@plt>
   11e58:	ldrb	r3, [fp, #-9]
   11e5c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11e60:	ldr	r2, [fp, #-16]
   11e64:	cmp	r1, r2
   11e68:	movne	r2, #1
   11e6c:	moveq	r2, #0
   11e70:	uxtb	r2, r2
   11e74:	orr	r3, r3, r2
   11e78:	cmp	r3, #0
   11e7c:	movne	r3, #1
   11e80:	moveq	r3, #0
   11e84:	strb	r3, [fp, #-9]
   11e88:	mov	r3, #0
   11e8c:	str	r3, [fp, #-8]
   11e90:	b	12018 <test_encoded_stuff@@Base+0x2b8>
   11e94:	ldr	r3, [pc, #492]	; 12088 <test_encoded_stuff@@Base+0x328>
   11e98:	add	r3, pc, r3
   11e9c:	ldrd	r2, [r3, #48]	; 0x30
   11ea0:	adds	r2, r2, #1
   11ea4:	adc	r3, r3, #0
   11ea8:	ldr	r1, [pc, #476]	; 1208c <test_encoded_stuff@@Base+0x32c>
   11eac:	add	r1, pc, r1
   11eb0:	strd	r2, [r1, #48]	; 0x30
   11eb4:	ldr	r2, [fp, #-20]	; 0xffffffec
   11eb8:	ldr	r3, [fp, #-8]
   11ebc:	add	r3, r2, r3
   11ec0:	ldrb	r2, [r3]
   11ec4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11ec8:	ldr	r3, [fp, #-8]
   11ecc:	add	r3, r1, r3
   11ed0:	ldrb	r3, [r3]
   11ed4:	cmp	r2, r3
   11ed8:	moveq	r3, #1
   11edc:	movne	r3, #0
   11ee0:	uxtb	r3, r3
   11ee4:	mov	r0, r3
   11ee8:	mov	r3, #0
   11eec:	str	r3, [sp, #4]
   11ef0:	ldr	r3, [pc, #408]	; 12090 <test_encoded_stuff@@Base+0x330>
   11ef4:	add	r3, pc, r3
   11ef8:	str	r3, [sp]
   11efc:	ldr	r3, [pc, #400]	; 12094 <test_encoded_stuff@@Base+0x334>
   11f00:	add	r3, pc, r3
   11f04:	ldr	r2, [pc, #396]	; 12098 <test_encoded_stuff@@Base+0x338>
   11f08:	add	r2, pc, r2
   11f0c:	mov	r1, #65	; 0x41
   11f10:	bl	10fd8 <CU_assertImplementation@plt>
   11f14:	ldr	r3, [pc, #384]	; 1209c <test_encoded_stuff@@Base+0x33c>
   11f18:	add	r3, pc, r3
   11f1c:	ldrd	r2, [r3, #24]
   11f20:	adds	r2, r2, #1
   11f24:	adc	r3, r3, #0
   11f28:	ldr	r1, [pc, #368]	; 120a0 <test_encoded_stuff@@Base+0x340>
   11f2c:	add	r1, pc, r1
   11f30:	strd	r2, [r1, #24]
   11f34:	ldr	r2, [fp, #-20]	; 0xffffffec
   11f38:	ldr	r3, [fp, #-8]
   11f3c:	add	r3, r2, r3
   11f40:	ldrb	r2, [r3]
   11f44:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11f48:	ldr	r3, [fp, #-8]
   11f4c:	add	r3, r1, r3
   11f50:	ldrb	r3, [r3]
   11f54:	cmp	r2, r3
   11f58:	beq	11fec <test_encoded_stuff@@Base+0x28c>
   11f5c:	ldr	r3, [pc, #320]	; 120a4 <test_encoded_stuff@@Base+0x344>
   11f60:	add	r3, pc, r3
   11f64:	ldrd	r2, [r3, #32]
   11f68:	adds	r2, r2, #1
   11f6c:	adc	r3, r3, #0
   11f70:	ldr	r1, [pc, #304]	; 120a8 <test_encoded_stuff@@Base+0x348>
   11f74:	add	r1, pc, r1
   11f78:	strd	r2, [r1, #32]
   11f7c:	mov	r3, #1
   11f80:	strb	r3, [fp, #-9]
   11f84:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11f88:	ldr	r3, [fp, #-8]
   11f8c:	add	r3, r2, r3
   11f90:	ldrb	r3, [r3]
   11f94:	mov	ip, r3
   11f98:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11f9c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11fa0:	ldr	r3, [fp, #-8]
   11fa4:	add	r3, r2, r3
   11fa8:	ldrb	r3, [r3]
   11fac:	mov	r0, r3
   11fb0:	ldr	r3, [fp, #-16]
   11fb4:	ldr	r2, [fp, #-20]	; 0xffffffec
   11fb8:	str	r2, [sp, #16]
   11fbc:	str	r3, [sp, #12]
   11fc0:	str	r0, [sp, #8]
   11fc4:	ldr	r3, [fp, #-8]
   11fc8:	str	r3, [sp, #4]
   11fcc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11fd0:	str	r3, [sp]
   11fd4:	mov	r3, r1
   11fd8:	mov	r2, ip
   11fdc:	ldr	r1, [fp, #-8]
   11fe0:	ldr	r0, [pc, #196]	; 120ac <test_encoded_stuff@@Base+0x34c>
   11fe4:	add	r0, pc, r0
   11fe8:	bl	10f00 <printf@plt>
   11fec:	ldr	r3, [fp, #-8]
   11ff0:	add	r3, r3, #1
   11ff4:	str	r3, [fp, #-8]
   11ff8:	ldr	r3, [pc, #176]	; 120b0 <test_encoded_stuff@@Base+0x350>
   11ffc:	add	r3, pc, r3
   12000:	ldrd	r2, [r3, #40]	; 0x28
   12004:	adds	r2, r2, #1
   12008:	adc	r3, r3, #0
   1200c:	ldr	r1, [pc, #160]	; 120b4 <test_encoded_stuff@@Base+0x354>
   12010:	add	r1, pc, r1
   12014:	strd	r2, [r1, #40]	; 0x28
   12018:	ldr	r2, [fp, #-8]
   1201c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12020:	cmp	r2, r3
   12024:	bcc	11e94 <test_encoded_stuff@@Base+0x134>
   12028:	ldr	r0, [fp, #-20]	; 0xffffffec
   1202c:	bl	10f24 <free@plt>
   12030:	ldrb	r0, [fp, #-9]
   12034:	ldr	r3, [pc, #124]	; 120b8 <test_encoded_stuff@@Base+0x358>
   12038:	add	r3, pc, r3
   1203c:	ldrd	r2, [r3, #56]	; 0x38
   12040:	adds	r2, r2, #1
   12044:	adc	r3, r3, #0
   12048:	ldr	r1, [pc, #108]	; 120bc <test_encoded_stuff@@Base+0x35c>
   1204c:	add	r1, pc, r1
   12050:	strd	r2, [r1, #56]	; 0x38
   12054:	mov	r3, r0
   12058:	mov	r0, r3
   1205c:	sub	sp, fp, #4
   12060:	pop	{fp, pc}
   12064:	ldrdeq	r5, [r1], -r0
   12068:			; <UNDEFINED> instruction: 0x000156bc
   1206c:	muleq	r1, ip, r6
   12070:	andeq	r5, r1, r8, lsl #13
   12074:	andeq	r5, r1, ip, asr r6
   12078:	andeq	r5, r1, r8, asr #12
   1207c:			; <UNDEFINED> instruction: 0x00003bbc
   12080:	andeq	r3, r0, ip, lsl fp
   12084:			; <UNDEFINED> instruction: 0x00003fb4
   12088:			; <UNDEFINED> instruction: 0x000155b8
   1208c:	andeq	r5, r1, r4, lsr #11
   12090:	andeq	r3, r0, r0, lsl #22
   12094:	andeq	r3, r0, r0, ror #20
   12098:	andeq	r3, r0, r8, lsr #30
   1209c:	andeq	r5, r1, r8, lsr r5
   120a0:	andeq	r5, r1, r4, lsr #10
   120a4:	strdeq	r5, [r1], -r0
   120a8:	ldrdeq	r5, [r1], -ip
   120ac:	andeq	r3, r0, r8, ror lr
   120b0:	andeq	r5, r1, r4, asr r4
   120b4:	andeq	r5, r1, r0, asr #8
   120b8:	andeq	r5, r1, r8, lsl r4
   120bc:	andeq	r5, r1, r4, lsl #8

000120c0 <test_decode@@Base>:
   120c0:	push	{fp, lr}
   120c4:	add	fp, sp, #4
   120c8:	sub	sp, sp, #8
   120cc:	ldr	r3, [pc, #660]	; 12368 <test_decode@@Base+0x2a8>
   120d0:	add	r3, pc, r3
   120d4:	ldrd	r2, [r3]
   120d8:	adds	r2, r2, #1
   120dc:	adc	r3, r3, #0
   120e0:	ldr	r1, [pc, #644]	; 1236c <test_decode@@Base+0x2ac>
   120e4:	add	r1, pc, r1
   120e8:	strd	r2, [r1]
   120ec:	mov	r3, #8
   120f0:	ldr	r2, [pc, #632]	; 12370 <test_decode@@Base+0x2b0>
   120f4:	add	r2, pc, r2
   120f8:	mov	r1, #12
   120fc:	ldr	r0, [pc, #624]	; 12374 <test_decode@@Base+0x2b4>
   12100:	add	r0, pc, r0
   12104:	bl	12400 <test_decoded_stuff@@Base>
   12108:	mov	r3, r0
   1210c:	mov	r0, r3
   12110:	ldr	r3, [pc, #608]	; 12378 <test_decode@@Base+0x2b8>
   12114:	add	r3, pc, r3
   12118:	ldrd	r2, [r3, #8]
   1211c:	adds	r2, r2, #1
   12120:	adc	r3, r3, #0
   12124:	ldr	r1, [pc, #592]	; 1237c <test_decode@@Base+0x2bc>
   12128:	add	r1, pc, r1
   1212c:	strd	r2, [r1, #8]
   12130:	eor	r3, r0, #1
   12134:	uxtb	r3, r3
   12138:	mov	r0, r3
   1213c:	mov	r3, #0
   12140:	str	r3, [sp, #4]
   12144:	ldr	r3, [pc, #564]	; 12380 <test_decode@@Base+0x2c0>
   12148:	add	r3, pc, r3
   1214c:	str	r3, [sp]
   12150:	ldr	r3, [pc, #556]	; 12384 <test_decode@@Base+0x2c4>
   12154:	add	r3, pc, r3
   12158:	ldr	r2, [pc, #552]	; 12388 <test_decode@@Base+0x2c8>
   1215c:	add	r2, pc, r2
   12160:	mov	r1, #78	; 0x4e
   12164:	bl	10fd8 <CU_assertImplementation@plt>
   12168:	ldr	r3, [pc, #540]	; 1238c <test_decode@@Base+0x2cc>
   1216c:	add	r3, pc, r3
   12170:	ldrd	r2, [r3, #16]
   12174:	adds	r2, r2, #1
   12178:	adc	r3, r3, #0
   1217c:	ldr	r1, [pc, #524]	; 12390 <test_decode@@Base+0x2d0>
   12180:	add	r1, pc, r1
   12184:	strd	r2, [r1, #16]
   12188:	mov	r3, #7
   1218c:	ldr	r2, [pc, #512]	; 12394 <test_decode@@Base+0x2d4>
   12190:	add	r2, pc, r2
   12194:	mov	r1, #12
   12198:	ldr	r0, [pc, #504]	; 12398 <test_decode@@Base+0x2d8>
   1219c:	add	r0, pc, r0
   121a0:	bl	12400 <test_decoded_stuff@@Base>
   121a4:	mov	r3, r0
   121a8:	mov	r0, r3
   121ac:	ldr	r3, [pc, #488]	; 1239c <test_decode@@Base+0x2dc>
   121b0:	add	r3, pc, r3
   121b4:	ldrd	r2, [r3, #24]
   121b8:	adds	r2, r2, #1
   121bc:	adc	r3, r3, #0
   121c0:	ldr	r1, [pc, #472]	; 123a0 <test_decode@@Base+0x2e0>
   121c4:	add	r1, pc, r1
   121c8:	strd	r2, [r1, #24]
   121cc:	eor	r3, r0, #1
   121d0:	uxtb	r3, r3
   121d4:	mov	r0, r3
   121d8:	mov	r3, #0
   121dc:	str	r3, [sp, #4]
   121e0:	ldr	r3, [pc, #444]	; 123a4 <test_decode@@Base+0x2e4>
   121e4:	add	r3, pc, r3
   121e8:	str	r3, [sp]
   121ec:	ldr	r3, [pc, #436]	; 123a8 <test_decode@@Base+0x2e8>
   121f0:	add	r3, pc, r3
   121f4:	ldr	r2, [pc, #432]	; 123ac <test_decode@@Base+0x2ec>
   121f8:	add	r2, pc, r2
   121fc:	mov	r1, #79	; 0x4f
   12200:	bl	10fd8 <CU_assertImplementation@plt>
   12204:	ldr	r3, [pc, #420]	; 123b0 <test_decode@@Base+0x2f0>
   12208:	add	r3, pc, r3
   1220c:	ldrd	r2, [r3, #32]
   12210:	adds	r2, r2, #1
   12214:	adc	r3, r3, #0
   12218:	ldr	r1, [pc, #404]	; 123b4 <test_decode@@Base+0x2f4>
   1221c:	add	r1, pc, r1
   12220:	strd	r2, [r1, #32]
   12224:	mov	r3, #6
   12228:	ldr	r2, [pc, #392]	; 123b8 <test_decode@@Base+0x2f8>
   1222c:	add	r2, pc, r2
   12230:	mov	r1, #8
   12234:	ldr	r0, [pc, #384]	; 123bc <test_decode@@Base+0x2fc>
   12238:	add	r0, pc, r0
   1223c:	bl	12400 <test_decoded_stuff@@Base>
   12240:	mov	r3, r0
   12244:	mov	r0, r3
   12248:	ldr	r3, [pc, #368]	; 123c0 <test_decode@@Base+0x300>
   1224c:	add	r3, pc, r3
   12250:	ldrd	r2, [r3, #40]	; 0x28
   12254:	adds	r2, r2, #1
   12258:	adc	r3, r3, #0
   1225c:	ldr	r1, [pc, #352]	; 123c4 <test_decode@@Base+0x304>
   12260:	add	r1, pc, r1
   12264:	strd	r2, [r1, #40]	; 0x28
   12268:	eor	r3, r0, #1
   1226c:	uxtb	r3, r3
   12270:	mov	r0, r3
   12274:	mov	r3, #0
   12278:	str	r3, [sp, #4]
   1227c:	ldr	r3, [pc, #324]	; 123c8 <test_decode@@Base+0x308>
   12280:	add	r3, pc, r3
   12284:	str	r3, [sp]
   12288:	ldr	r3, [pc, #316]	; 123cc <test_decode@@Base+0x30c>
   1228c:	add	r3, pc, r3
   12290:	ldr	r2, [pc, #312]	; 123d0 <test_decode@@Base+0x310>
   12294:	add	r2, pc, r2
   12298:	mov	r1, #80	; 0x50
   1229c:	bl	10fd8 <CU_assertImplementation@plt>
   122a0:	ldr	r3, [pc, #300]	; 123d4 <test_decode@@Base+0x314>
   122a4:	add	r3, pc, r3
   122a8:	ldrd	r2, [r3, #48]	; 0x30
   122ac:	adds	r2, r2, #1
   122b0:	adc	r3, r3, #0
   122b4:	ldr	r1, [pc, #284]	; 123d8 <test_decode@@Base+0x318>
   122b8:	add	r1, pc, r1
   122bc:	strd	r2, [r1, #48]	; 0x30
   122c0:	mov	r3, #5
   122c4:	ldr	r2, [pc, #272]	; 123dc <test_decode@@Base+0x31c>
   122c8:	add	r2, pc, r2
   122cc:	mov	r1, #8
   122d0:	ldr	r0, [pc, #264]	; 123e0 <test_decode@@Base+0x320>
   122d4:	add	r0, pc, r0
   122d8:	bl	12400 <test_decoded_stuff@@Base>
   122dc:	mov	r3, r0
   122e0:	mov	r0, r3
   122e4:	ldr	r3, [pc, #248]	; 123e4 <test_decode@@Base+0x324>
   122e8:	add	r3, pc, r3
   122ec:	ldrd	r2, [r3, #56]	; 0x38
   122f0:	adds	r2, r2, #1
   122f4:	adc	r3, r3, #0
   122f8:	ldr	r1, [pc, #232]	; 123e8 <test_decode@@Base+0x328>
   122fc:	add	r1, pc, r1
   12300:	strd	r2, [r1, #56]	; 0x38
   12304:	eor	r3, r0, #1
   12308:	uxtb	r3, r3
   1230c:	mov	r0, r3
   12310:	mov	r3, #0
   12314:	str	r3, [sp, #4]
   12318:	ldr	r3, [pc, #204]	; 123ec <test_decode@@Base+0x32c>
   1231c:	add	r3, pc, r3
   12320:	str	r3, [sp]
   12324:	ldr	r3, [pc, #196]	; 123f0 <test_decode@@Base+0x330>
   12328:	add	r3, pc, r3
   1232c:	ldr	r2, [pc, #192]	; 123f4 <test_decode@@Base+0x334>
   12330:	add	r2, pc, r2
   12334:	mov	r1, #81	; 0x51
   12338:	bl	10fd8 <CU_assertImplementation@plt>
   1233c:	ldr	r3, [pc, #180]	; 123f8 <test_decode@@Base+0x338>
   12340:	add	r3, pc, r3
   12344:	ldrd	r2, [r3, #64]	; 0x40
   12348:	adds	r2, r2, #1
   1234c:	adc	r3, r3, #0
   12350:	ldr	r1, [pc, #164]	; 123fc <test_decode@@Base+0x33c>
   12354:	add	r1, pc, r1
   12358:	strd	r2, [r1, #64]	; 0x40
   1235c:	nop			; (mov r0, r0)
   12360:	sub	sp, fp, #4
   12364:	pop	{fp, pc}
   12368:	andeq	r5, r1, r8, lsr r3
   1236c:	andeq	r5, r1, r4, lsr #6
   12370:	andeq	r3, r0, r4, asr fp
   12374:	andeq	r3, r0, r8, lsr fp
   12378:	strdeq	r5, [r1], -r4
   1237c:	andeq	r5, r1, r0, ror #5
   12380:	andeq	r3, r0, ip, lsr #17
   12384:	andeq	r3, r0, ip, lsl #16
   12388:	andeq	r3, r0, ip, lsr #26
   1238c:	muleq	r1, ip, r2
   12390:	andeq	r5, r1, r8, lsl #5
   12394:	andeq	r3, r0, r4, lsr fp
   12398:	andeq	r3, r0, r8, lsl fp
   1239c:	andeq	r5, r1, r8, asr r2
   123a0:	andeq	r5, r1, r4, asr #4
   123a4:	andeq	r3, r0, r0, lsl r8
   123a8:	andeq	r3, r0, r0, ror r7
   123ac:	strdeq	r3, [r0], -r0
   123b0:	andeq	r5, r1, r0, lsl #4
   123b4:	andeq	r5, r1, ip, ror #3
   123b8:	andeq	r3, r0, r8, lsl #22
   123bc:	strdeq	r3, [r0], -r0
   123c0:			; <UNDEFINED> instruction: 0x000151bc
   123c4:	andeq	r5, r1, r8, lsr #3
   123c8:	andeq	r3, r0, r4, ror r7
   123cc:	ldrdeq	r3, [r0], -r4
   123d0:			; <UNDEFINED> instruction: 0x00003cb0
   123d4:	andeq	r5, r1, r4, ror #2
   123d8:	andeq	r5, r1, r0, asr r1
   123dc:	ldrdeq	r3, [r0], -r8
   123e0:	andeq	r3, r0, r0, asr #21
   123e4:	andeq	r5, r1, r0, lsr #2
   123e8:	andeq	r5, r1, ip, lsl #2
   123ec:	ldrdeq	r3, [r0], -r8
   123f0:	andeq	r3, r0, r8, lsr r6
   123f4:	andeq	r3, r0, ip, ror #24
   123f8:	andeq	r5, r1, r8, asr #1
   123fc:	strheq	r5, [r1], -r4

00012400 <test_decoded_stuff@@Base>:
   12400:	push	{r4, fp, lr}
   12404:	add	fp, sp, #8
   12408:	sub	sp, sp, #68	; 0x44
   1240c:	str	r0, [fp, #-40]	; 0xffffffd8
   12410:	str	r1, [fp, #-44]	; 0xffffffd4
   12414:	str	r2, [fp, #-48]	; 0xffffffd0
   12418:	str	r3, [fp, #-52]	; 0xffffffcc
   1241c:	ldr	r3, [pc, #844]	; 12770 <test_decoded_stuff@@Base+0x370>
   12420:	add	r3, pc, r3
   12424:	ldrd	r2, [r3]
   12428:	adds	r2, r2, #1
   1242c:	adc	r3, r3, #0
   12430:	ldr	r1, [pc, #828]	; 12774 <test_decoded_stuff@@Base+0x374>
   12434:	add	r1, pc, r1
   12438:	strd	r2, [r1]
   1243c:	mov	r3, #0
   12440:	strb	r3, [fp, #-17]	; 0xffffffef
   12444:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12448:	bl	13158 <b64_get_decoded_buffer_size@@Base>
   1244c:	str	r0, [fp, #-24]	; 0xffffffe8
   12450:	ldr	r3, [pc, #800]	; 12778 <test_decoded_stuff@@Base+0x378>
   12454:	add	r3, pc, r3
   12458:	ldrd	r2, [r3, #8]
   1245c:	adds	r2, r2, #1
   12460:	adc	r3, r3, #0
   12464:	ldr	r1, [pc, #784]	; 1277c <test_decoded_stuff@@Base+0x37c>
   12468:	add	r1, pc, r1
   1246c:	strd	r2, [r1, #8]
   12470:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12474:	bl	10fa8 <malloc@plt>
   12478:	mov	r3, r0
   1247c:	str	r3, [fp, #-28]	; 0xffffffe4
   12480:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12484:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12488:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1248c:	bl	13234 <b64_decode@@Base>
   12490:	str	r0, [fp, #-32]	; 0xffffffe0
   12494:	ldr	r3, [pc, #740]	; 12780 <test_decoded_stuff@@Base+0x380>
   12498:	add	r3, pc, r3
   1249c:	ldrd	r2, [r3, #16]
   124a0:	adds	r2, r2, #1
   124a4:	adc	r3, r3, #0
   124a8:	ldr	r1, [pc, #724]	; 12784 <test_decoded_stuff@@Base+0x384>
   124ac:	add	r1, pc, r1
   124b0:	strd	r2, [r1, #16]
   124b4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   124b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   124bc:	cmp	r2, r3
   124c0:	moveq	r3, #1
   124c4:	movne	r3, #0
   124c8:	uxtb	r3, r3
   124cc:	mov	r0, r3
   124d0:	mov	r3, #0
   124d4:	str	r3, [sp, #4]
   124d8:	ldr	r3, [pc, #680]	; 12788 <test_decoded_stuff@@Base+0x388>
   124dc:	add	r3, pc, r3
   124e0:	str	r3, [sp]
   124e4:	ldr	r3, [pc, #672]	; 1278c <test_decoded_stuff@@Base+0x38c>
   124e8:	add	r3, pc, r3
   124ec:	ldr	r2, [pc, #668]	; 12790 <test_decoded_stuff@@Base+0x390>
   124f0:	add	r2, pc, r2
   124f4:	mov	r1, #92	; 0x5c
   124f8:	bl	10fd8 <CU_assertImplementation@plt>
   124fc:	ldr	r3, [pc, #656]	; 12794 <test_decoded_stuff@@Base+0x394>
   12500:	add	r3, pc, r3
   12504:	ldrd	r2, [r3, #24]
   12508:	adds	r2, r2, #1
   1250c:	adc	r3, r3, #0
   12510:	ldr	r1, [pc, #640]	; 12798 <test_decoded_stuff@@Base+0x398>
   12514:	add	r1, pc, r1
   12518:	strd	r2, [r1, #24]
   1251c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12520:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12524:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12528:	cmp	r1, r2
   1252c:	movne	r2, #1
   12530:	moveq	r2, #0
   12534:	uxtb	r2, r2
   12538:	orr	r3, r3, r2
   1253c:	cmp	r3, #0
   12540:	movne	r3, #1
   12544:	moveq	r3, #0
   12548:	strb	r3, [fp, #-17]	; 0xffffffef
   1254c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12550:	cmp	r3, #0
   12554:	beq	12590 <test_decoded_stuff@@Base+0x190>
   12558:	ldr	r3, [pc, #572]	; 1279c <test_decoded_stuff@@Base+0x39c>
   1255c:	add	r3, pc, r3
   12560:	ldrd	r2, [r3, #32]
   12564:	adds	r2, r2, #1
   12568:	adc	r3, r3, #0
   1256c:	ldr	r1, [pc, #556]	; 127a0 <test_decoded_stuff@@Base+0x3a0>
   12570:	add	r1, pc, r1
   12574:	strd	r2, [r1, #32]
   12578:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1257c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12580:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12584:	ldr	r0, [pc, #536]	; 127a4 <test_decoded_stuff@@Base+0x3a4>
   12588:	add	r0, pc, r0
   1258c:	bl	10f00 <printf@plt>
   12590:	mov	r3, #0
   12594:	str	r3, [fp, #-16]
   12598:	b	12724 <test_decoded_stuff@@Base+0x324>
   1259c:	ldr	r3, [pc, #516]	; 127a8 <test_decoded_stuff@@Base+0x3a8>
   125a0:	add	r3, pc, r3
   125a4:	ldrd	r2, [r3, #64]	; 0x40
   125a8:	adds	r2, r2, #1
   125ac:	adc	r3, r3, #0
   125b0:	ldr	r1, [pc, #500]	; 127ac <test_decoded_stuff@@Base+0x3ac>
   125b4:	add	r1, pc, r1
   125b8:	strd	r2, [r1, #64]	; 0x40
   125bc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   125c0:	ldr	r3, [fp, #-16]
   125c4:	add	r3, r2, r3
   125c8:	ldrb	r2, [r3]
   125cc:	ldr	r1, [fp, #-48]	; 0xffffffd0
   125d0:	ldr	r3, [fp, #-16]
   125d4:	add	r3, r1, r3
   125d8:	ldrb	r3, [r3]
   125dc:	cmp	r2, r3
   125e0:	moveq	r3, #1
   125e4:	movne	r3, #0
   125e8:	uxtb	r3, r3
   125ec:	mov	r0, r3
   125f0:	mov	r3, #0
   125f4:	str	r3, [sp, #4]
   125f8:	ldr	r3, [pc, #432]	; 127b0 <test_decoded_stuff@@Base+0x3b0>
   125fc:	add	r3, pc, r3
   12600:	str	r3, [sp]
   12604:	ldr	r3, [pc, #424]	; 127b4 <test_decoded_stuff@@Base+0x3b4>
   12608:	add	r3, pc, r3
   1260c:	ldr	r2, [pc, #420]	; 127b8 <test_decoded_stuff@@Base+0x3b8>
   12610:	add	r2, pc, r2
   12614:	mov	r1, #99	; 0x63
   12618:	bl	10fd8 <CU_assertImplementation@plt>
   1261c:	ldr	r3, [pc, #408]	; 127bc <test_decoded_stuff@@Base+0x3bc>
   12620:	add	r3, pc, r3
   12624:	ldrd	r2, [r3, #40]	; 0x28
   12628:	adds	r2, r2, #1
   1262c:	adc	r3, r3, #0
   12630:	ldr	r1, [pc, #392]	; 127c0 <test_decoded_stuff@@Base+0x3c0>
   12634:	add	r1, pc, r1
   12638:	strd	r2, [r1, #40]	; 0x28
   1263c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12640:	ldr	r3, [fp, #-16]
   12644:	add	r3, r2, r3
   12648:	ldrb	r2, [r3]
   1264c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12650:	ldr	r3, [fp, #-16]
   12654:	add	r3, r1, r3
   12658:	ldrb	r3, [r3]
   1265c:	cmp	r2, r3
   12660:	beq	126f8 <test_decoded_stuff@@Base+0x2f8>
   12664:	ldr	r3, [pc, #344]	; 127c4 <test_decoded_stuff@@Base+0x3c4>
   12668:	add	r3, pc, r3
   1266c:	ldrd	r2, [r3, #48]	; 0x30
   12670:	adds	r2, r2, #1
   12674:	adc	r3, r3, #0
   12678:	ldr	r1, [pc, #328]	; 127c8 <test_decoded_stuff@@Base+0x3c8>
   1267c:	add	r1, pc, r1
   12680:	strd	r2, [r1, #48]	; 0x30
   12684:	mov	r3, #1
   12688:	strb	r3, [fp, #-17]	; 0xffffffef
   1268c:	ldr	r0, [fp, #-16]
   12690:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12694:	ldr	r3, [fp, #-16]
   12698:	add	r3, r2, r3
   1269c:	ldrb	r3, [r3]
   126a0:	mov	r4, r3
   126a4:	ldr	ip, [fp, #-52]	; 0xffffffcc
   126a8:	ldr	r3, [fp, #-16]
   126ac:	ldr	r1, [fp, #-28]	; 0xffffffe4
   126b0:	ldr	r2, [fp, #-16]
   126b4:	add	r2, r1, r2
   126b8:	ldrb	r2, [r2]
   126bc:	mov	lr, r2
   126c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   126c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   126c8:	str	r1, [sp, #16]
   126cc:	str	r2, [sp, #12]
   126d0:	str	lr, [sp, #8]
   126d4:	str	r3, [sp, #4]
   126d8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   126dc:	str	r3, [sp]
   126e0:	mov	r3, ip
   126e4:	mov	r2, r4
   126e8:	mov	r1, r0
   126ec:	ldr	r0, [pc, #216]	; 127cc <test_decoded_stuff@@Base+0x3cc>
   126f0:	add	r0, pc, r0
   126f4:	bl	10f00 <printf@plt>
   126f8:	ldr	r3, [fp, #-16]
   126fc:	add	r3, r3, #1
   12700:	str	r3, [fp, #-16]
   12704:	ldr	r3, [pc, #196]	; 127d0 <test_decoded_stuff@@Base+0x3d0>
   12708:	add	r3, pc, r3
   1270c:	ldrd	r2, [r3, #56]	; 0x38
   12710:	adds	r2, r2, #1
   12714:	adc	r3, r3, #0
   12718:	ldr	r1, [pc, #180]	; 127d4 <test_decoded_stuff@@Base+0x3d4>
   1271c:	add	r1, pc, r1
   12720:	strd	r2, [r1, #56]	; 0x38
   12724:	ldr	r2, [fp, #-16]
   12728:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1272c:	cmp	r2, r3
   12730:	bcc	1259c <test_decoded_stuff@@Base+0x19c>
   12734:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12738:	bl	10f24 <free@plt>
   1273c:	ldrb	r0, [fp, #-17]	; 0xffffffef
   12740:	ldr	r3, [pc, #144]	; 127d8 <test_decoded_stuff@@Base+0x3d8>
   12744:	add	r3, pc, r3
   12748:	ldrd	r2, [r3, #72]	; 0x48
   1274c:	adds	r2, r2, #1
   12750:	adc	r3, r3, #0
   12754:	ldr	r1, [pc, #128]	; 127dc <test_decoded_stuff@@Base+0x3dc>
   12758:	add	r1, pc, r1
   1275c:	strd	r2, [r1, #72]	; 0x48
   12760:	mov	r3, r0
   12764:	mov	r0, r3
   12768:	sub	sp, fp, #8
   1276c:	pop	{r4, fp, pc}
   12770:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12774:	andeq	r4, r1, r4, lsl #31
   12778:	andeq	r4, r1, r4, ror #30
   1277c:	andeq	r4, r1, r0, asr pc
   12780:	andeq	r4, r1, r0, lsr #30
   12784:	andeq	r4, r1, ip, lsl #30
   12788:	andeq	r3, r0, r8, lsl r5
   1278c:	andeq	r3, r0, r8, ror r4
   12790:	andeq	r3, r0, r4, lsl #22
   12794:			; <UNDEFINED> instruction: 0x00014eb8
   12798:	andeq	r4, r1, r4, lsr #29
   1279c:	andeq	r4, r1, ip, asr lr
   127a0:	andeq	r4, r1, r8, asr #28
   127a4:	muleq	r0, r8, sl
   127a8:	andeq	r4, r1, r8, lsl lr
   127ac:	andeq	r4, r1, r4, lsl #28
   127b0:	strdeq	r3, [r0], -r8
   127b4:	andeq	r3, r0, r8, asr r3
   127b8:	andeq	r3, r0, r0, lsr #16
   127bc:	muleq	r1, r8, sp
   127c0:	andeq	r4, r1, r4, lsl #27
   127c4:	andeq	r4, r1, r0, asr sp
   127c8:	andeq	r4, r1, ip, lsr sp
   127cc:	andeq	r3, r0, r8, asr #18
   127d0:			; <UNDEFINED> instruction: 0x00014cb0
   127d4:	muleq	r1, ip, ip
   127d8:	andeq	r4, r1, r4, ror ip
   127dc:	andeq	r4, r1, r0, ror #24

000127e0 <add_suites@@Base>:
   127e0:	push	{r4, fp, lr}
   127e4:	add	fp, sp, #8
   127e8:	sub	sp, sp, #12
   127ec:	str	r0, [fp, #-16]
   127f0:	ldr	r4, [pc, #380]	; 12974 <add_suites@@Base+0x194>
   127f4:	add	r4, pc, r4
   127f8:	ldr	r3, [pc, #376]	; 12978 <add_suites@@Base+0x198>
   127fc:	add	r3, pc, r3
   12800:	ldrd	r2, [r3]
   12804:	adds	r2, r2, #1
   12808:	adc	r3, r3, #0
   1280c:	ldr	r1, [pc, #360]	; 1297c <add_suites@@Base+0x19c>
   12810:	add	r1, pc, r1
   12814:	strd	r2, [r1]
   12818:	mov	r2, #0
   1281c:	mov	r1, #0
   12820:	ldr	r3, [pc, #344]	; 12980 <add_suites@@Base+0x1a0>
   12824:	add	r3, pc, r3
   12828:	mov	r0, r3
   1282c:	bl	10f30 <CU_add_suite@plt>
   12830:	ldr	r3, [pc, #332]	; 12984 <add_suites@@Base+0x1a4>
   12834:	add	r3, pc, r3
   12838:	ldrd	r2, [r3, #8]
   1283c:	adds	r2, r2, #1
   12840:	adc	r3, r3, #0
   12844:	ldr	r1, [pc, #316]	; 12988 <add_suites@@Base+0x1a8>
   12848:	add	r1, pc, r1
   1284c:	strd	r2, [r1, #8]
   12850:	ldr	r3, [fp, #-16]
   12854:	str	r0, [r3]
   12858:	ldr	r3, [fp, #-16]
   1285c:	ldr	r0, [r3]
   12860:	ldr	r3, [pc, #292]	; 1298c <add_suites@@Base+0x1ac>
   12864:	ldr	r3, [r4, r3]
   12868:	mov	r2, r3
   1286c:	ldr	r3, [pc, #284]	; 12990 <add_suites@@Base+0x1b0>
   12870:	add	r3, pc, r3
   12874:	mov	r1, r3
   12878:	bl	1105c <CU_add_test@plt>
   1287c:	ldr	r3, [pc, #272]	; 12994 <add_suites@@Base+0x1b4>
   12880:	add	r3, pc, r3
   12884:	ldrd	r2, [r3, #16]
   12888:	adds	r2, r2, #1
   1288c:	adc	r3, r3, #0
   12890:	ldr	r1, [pc, #256]	; 12998 <add_suites@@Base+0x1b8>
   12894:	add	r1, pc, r1
   12898:	strd	r2, [r1, #16]
   1289c:	ldr	r3, [fp, #-16]
   128a0:	ldr	r0, [r3]
   128a4:	ldr	r3, [pc, #240]	; 1299c <add_suites@@Base+0x1bc>
   128a8:	ldr	r3, [r4, r3]
   128ac:	mov	r2, r3
   128b0:	ldr	r3, [pc, #232]	; 129a0 <add_suites@@Base+0x1c0>
   128b4:	add	r3, pc, r3
   128b8:	mov	r1, r3
   128bc:	bl	1105c <CU_add_test@plt>
   128c0:	ldr	r3, [pc, #220]	; 129a4 <add_suites@@Base+0x1c4>
   128c4:	add	r3, pc, r3
   128c8:	ldrd	r2, [r3, #24]
   128cc:	adds	r2, r2, #1
   128d0:	adc	r3, r3, #0
   128d4:	ldr	r1, [pc, #204]	; 129a8 <add_suites@@Base+0x1c8>
   128d8:	add	r1, pc, r1
   128dc:	strd	r2, [r1, #24]
   128e0:	ldr	r3, [fp, #-16]
   128e4:	ldr	r0, [r3]
   128e8:	ldr	r3, [pc, #188]	; 129ac <add_suites@@Base+0x1cc>
   128ec:	ldr	r3, [r4, r3]
   128f0:	mov	r2, r3
   128f4:	ldr	r3, [pc, #180]	; 129b0 <add_suites@@Base+0x1d0>
   128f8:	add	r3, pc, r3
   128fc:	mov	r1, r3
   12900:	bl	1105c <CU_add_test@plt>
   12904:	ldr	r3, [pc, #168]	; 129b4 <add_suites@@Base+0x1d4>
   12908:	add	r3, pc, r3
   1290c:	ldrd	r2, [r3, #32]
   12910:	adds	r2, r2, #1
   12914:	adc	r3, r3, #0
   12918:	ldr	r1, [pc, #152]	; 129b8 <add_suites@@Base+0x1d8>
   1291c:	add	r1, pc, r1
   12920:	strd	r2, [r1, #32]
   12924:	ldr	r3, [fp, #-16]
   12928:	ldr	r0, [r3]
   1292c:	ldr	r3, [pc, #136]	; 129bc <add_suites@@Base+0x1dc>
   12930:	ldr	r3, [r4, r3]
   12934:	mov	r2, r3
   12938:	ldr	r3, [pc, #128]	; 129c0 <add_suites@@Base+0x1e0>
   1293c:	add	r3, pc, r3
   12940:	mov	r1, r3
   12944:	bl	1105c <CU_add_test@plt>
   12948:	ldr	r3, [pc, #116]	; 129c4 <add_suites@@Base+0x1e4>
   1294c:	add	r3, pc, r3
   12950:	ldrd	r2, [r3, #40]	; 0x28
   12954:	adds	r2, r2, #1
   12958:	adc	r3, r3, #0
   1295c:	ldr	r1, [pc, #100]	; 129c8 <add_suites@@Base+0x1e8>
   12960:	add	r1, pc, r1
   12964:	strd	r2, [r1, #40]	; 0x28
   12968:	nop			; (mov r0, r0)
   1296c:	sub	sp, fp, #8
   12970:	pop	{r4, fp, pc}
   12974:	andeq	r4, r1, r4, lsl #16
   12978:	andeq	r4, r1, ip, lsl #23
   1297c:	andeq	r4, r1, r8, ror fp
   12980:	andeq	r3, r0, r0, asr #16
   12984:	andeq	r4, r1, r4, asr fp
   12988:	andeq	r4, r1, r0, asr #22
   1298c:	ldrdeq	r0, [r0], -r4
   12990:	andeq	r3, r0, ip, lsl #16
   12994:	andeq	r4, r1, r8, lsl #22
   12998:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1299c:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   129a0:	andeq	r3, r0, r4, ror #15
   129a4:	andeq	r4, r1, r4, asr #21
   129a8:			; <UNDEFINED> instruction: 0x00014ab0
   129ac:	strheq	r0, [r0], -r8
   129b0:			; <UNDEFINED> instruction: 0x000037bc
   129b4:	andeq	r4, r1, r0, lsl #21
   129b8:	andeq	r4, r1, ip, ror #20
   129bc:	andeq	r0, r0, r0, asr #1
   129c0:	muleq	r0, r4, r7
   129c4:	andeq	r4, r1, ip, lsr sl
   129c8:	andeq	r4, r1, r8, lsr #20

000129cc <main@@Base>:
   129cc:	push	{fp, lr}
   129d0:	add	fp, sp, #4
   129d4:	sub	sp, sp, #8
   129d8:	ldr	r3, [pc, #588]	; 12c2c <main@@Base+0x260>
   129dc:	add	r3, pc, r3
   129e0:	ldrd	r2, [r3]
   129e4:	adds	r2, r2, #1
   129e8:	adc	r3, r3, #0
   129ec:	ldr	r1, [pc, #572]	; 12c30 <main@@Base+0x264>
   129f0:	add	r1, pc, r1
   129f4:	strd	r2, [r1]
   129f8:	mov	r3, #1
   129fc:	str	r3, [fp, #-8]
   12a00:	mov	r3, #0
   12a04:	str	r3, [fp, #-12]
   12a08:	bl	10ee8 <CU_initialize_registry@plt>
   12a0c:	ldr	r3, [pc, #544]	; 12c34 <main@@Base+0x268>
   12a10:	add	r3, pc, r3
   12a14:	ldrd	r2, [r3, #8]
   12a18:	adds	r2, r2, #1
   12a1c:	adc	r3, r3, #0
   12a20:	ldr	r1, [pc, #528]	; 12c38 <main@@Base+0x26c>
   12a24:	add	r1, pc, r1
   12a28:	strd	r2, [r1, #8]
   12a2c:	cmp	r0, #0
   12a30:	bne	12bc4 <main@@Base+0x1f8>
   12a34:	ldr	r3, [pc, #512]	; 12c3c <main@@Base+0x270>
   12a38:	add	r3, pc, r3
   12a3c:	ldrd	r2, [r3, #16]
   12a40:	adds	r2, r2, #1
   12a44:	adc	r3, r3, #0
   12a48:	ldr	r1, [pc, #496]	; 12c40 <main@@Base+0x274>
   12a4c:	add	r1, pc, r1
   12a50:	strd	r2, [r1, #16]
   12a54:	sub	r3, fp, #12
   12a58:	mov	r0, r3
   12a5c:	bl	127e0 <add_suites@@Base>
   12a60:	ldr	r3, [pc, #476]	; 12c44 <main@@Base+0x278>
   12a64:	add	r3, pc, r3
   12a68:	ldrd	r2, [r3, #24]
   12a6c:	adds	r2, r2, #1
   12a70:	adc	r3, r3, #0
   12a74:	ldr	r1, [pc, #460]	; 12c48 <main@@Base+0x27c>
   12a78:	add	r1, pc, r1
   12a7c:	strd	r2, [r1, #24]
   12a80:	ldr	r3, [fp, #-12]
   12a84:	cmp	r3, #0
   12a88:	beq	12bc0 <main@@Base+0x1f4>
   12a8c:	ldr	r3, [pc, #440]	; 12c4c <main@@Base+0x280>
   12a90:	add	r3, pc, r3
   12a94:	ldrd	r2, [r3, #32]
   12a98:	adds	r2, r2, #1
   12a9c:	adc	r3, r3, #0
   12aa0:	ldr	r1, [pc, #424]	; 12c50 <main@@Base+0x284>
   12aa4:	add	r1, pc, r1
   12aa8:	strd	r2, [r1, #32]
   12aac:	mov	r0, #2
   12ab0:	bl	10ed0 <CU_basic_set_mode@plt>
   12ab4:	ldr	r3, [pc, #408]	; 12c54 <main@@Base+0x288>
   12ab8:	add	r3, pc, r3
   12abc:	ldrd	r2, [r3, #40]	; 0x28
   12ac0:	adds	r2, r2, #1
   12ac4:	adc	r3, r3, #0
   12ac8:	ldr	r1, [pc, #392]	; 12c58 <main@@Base+0x28c>
   12acc:	add	r1, pc, r1
   12ad0:	strd	r2, [r1, #40]	; 0x28
   12ad4:	bl	10f48 <CU_basic_run_tests@plt>
   12ad8:	ldr	r3, [pc, #380]	; 12c5c <main@@Base+0x290>
   12adc:	add	r3, pc, r3
   12ae0:	ldrd	r2, [r3, #48]	; 0x30
   12ae4:	adds	r2, r2, #1
   12ae8:	adc	r3, r3, #0
   12aec:	ldr	r1, [pc, #364]	; 12c60 <main@@Base+0x294>
   12af0:	add	r1, pc, r1
   12af4:	strd	r2, [r1, #48]	; 0x30
   12af8:	mov	r0, #10
   12afc:	bl	11050 <putchar@plt>
   12b00:	ldr	r3, [pc, #348]	; 12c64 <main@@Base+0x298>
   12b04:	add	r3, pc, r3
   12b08:	ldrd	r2, [r3, #56]	; 0x38
   12b0c:	adds	r2, r2, #1
   12b10:	adc	r3, r3, #0
   12b14:	ldr	r1, [pc, #332]	; 12c68 <main@@Base+0x29c>
   12b18:	add	r1, pc, r1
   12b1c:	strd	r2, [r1, #56]	; 0x38
   12b20:	bl	11098 <CU_get_failure_list@plt>
   12b24:	ldr	r3, [pc, #320]	; 12c6c <main@@Base+0x2a0>
   12b28:	add	r3, pc, r3
   12b2c:	ldrd	r2, [r3, #64]	; 0x40
   12b30:	adds	r2, r2, #1
   12b34:	adc	r3, r3, #0
   12b38:	ldr	r1, [pc, #304]	; 12c70 <main@@Base+0x2a4>
   12b3c:	add	r1, pc, r1
   12b40:	strd	r2, [r1, #64]	; 0x40
   12b44:	bl	10f54 <CU_basic_show_failures@plt>
   12b48:	ldr	r3, [pc, #292]	; 12c74 <main@@Base+0x2a8>
   12b4c:	add	r3, pc, r3
   12b50:	ldrd	r2, [r3, #72]	; 0x48
   12b54:	adds	r2, r2, #1
   12b58:	adc	r3, r3, #0
   12b5c:	ldr	r1, [pc, #276]	; 12c78 <main@@Base+0x2ac>
   12b60:	add	r1, pc, r1
   12b64:	strd	r2, [r1, #72]	; 0x48
   12b68:	ldr	r3, [pc, #268]	; 12c7c <main@@Base+0x2b0>
   12b6c:	add	r3, pc, r3
   12b70:	mov	r0, r3
   12b74:	bl	10f9c <puts@plt>
   12b78:	ldr	r3, [pc, #256]	; 12c80 <main@@Base+0x2b4>
   12b7c:	add	r3, pc, r3
   12b80:	ldrd	r2, [r3, #80]	; 0x50
   12b84:	adds	r2, r2, #1
   12b88:	adc	r3, r3, #0
   12b8c:	ldr	r1, [pc, #240]	; 12c84 <main@@Base+0x2b8>
   12b90:	add	r1, pc, r1
   12b94:	strd	r2, [r1, #80]	; 0x50
   12b98:	bl	10f0c <CU_get_number_of_tests_failed@plt>
   12b9c:	str	r0, [fp, #-8]
   12ba0:	ldr	r3, [pc, #224]	; 12c88 <main@@Base+0x2bc>
   12ba4:	add	r3, pc, r3
   12ba8:	ldrd	r2, [r3, #88]	; 0x58
   12bac:	adds	r2, r2, #1
   12bb0:	adc	r3, r3, #0
   12bb4:	ldr	r1, [pc, #208]	; 12c8c <main@@Base+0x2c0>
   12bb8:	add	r1, pc, r1
   12bbc:	strd	r2, [r1, #88]	; 0x58
   12bc0:	bl	10f18 <CU_cleanup_registry@plt>
   12bc4:	ldr	r3, [fp, #-8]
   12bc8:	cmp	r3, #0
   12bcc:	beq	12bd8 <main@@Base+0x20c>
   12bd0:	mov	r0, #1
   12bd4:	b	12bfc <main@@Base+0x230>
   12bd8:	mov	r0, #0
   12bdc:	ldr	r3, [pc, #172]	; 12c90 <main@@Base+0x2c4>
   12be0:	add	r3, pc, r3
   12be4:	ldrd	r2, [r3, #96]	; 0x60
   12be8:	adds	r2, r2, #1
   12bec:	adc	r3, r3, #0
   12bf0:	ldr	r1, [pc, #156]	; 12c94 <main@@Base+0x2c8>
   12bf4:	add	r1, pc, r1
   12bf8:	strd	r2, [r1, #96]	; 0x60
   12bfc:	ldr	r3, [pc, #148]	; 12c98 <main@@Base+0x2cc>
   12c00:	add	r3, pc, r3
   12c04:	ldrd	r2, [r3, #104]	; 0x68
   12c08:	adds	r2, r2, #1
   12c0c:	adc	r3, r3, #0
   12c10:	ldr	r1, [pc, #132]	; 12c9c <main@@Base+0x2d0>
   12c14:	add	r1, pc, r1
   12c18:	strd	r2, [r1, #104]	; 0x68
   12c1c:	mov	r3, r0
   12c20:	mov	r0, r3
   12c24:	sub	sp, fp, #4
   12c28:	pop	{fp, pc}
   12c2c:	andeq	r4, r1, ip, lsr r9
   12c30:	andeq	r4, r1, r8, lsr #18
   12c34:	andeq	r4, r1, r8, lsl #18
   12c38:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12c3c:	andeq	r4, r1, r0, ror #17
   12c40:	andeq	r4, r1, ip, asr #17
   12c44:			; <UNDEFINED> instruction: 0x000148b4
   12c48:	andeq	r4, r1, r0, lsr #17
   12c4c:	andeq	r4, r1, r8, lsl #17
   12c50:	andeq	r4, r1, r4, ror r8
   12c54:	andeq	r4, r1, r0, ror #16
   12c58:	andeq	r4, r1, ip, asr #16
   12c5c:	andeq	r4, r1, ip, lsr r8
   12c60:	andeq	r4, r1, r8, lsr #16
   12c64:	andeq	r4, r1, r4, lsl r8
   12c68:	andeq	r4, r1, r0, lsl #16
   12c6c:	strdeq	r4, [r1], -r0
   12c70:	ldrdeq	r4, [r1], -ip
   12c74:	andeq	r4, r1, ip, asr #15
   12c78:			; <UNDEFINED> instruction: 0x000147b8
   12c7c:	andeq	r3, r0, r0, lsl #11
   12c80:	muleq	r1, ip, r7
   12c84:	andeq	r4, r1, r8, lsl #15
   12c88:	andeq	r4, r1, r4, ror r7
   12c8c:	andeq	r4, r1, r0, ror #14
   12c90:	andeq	r4, r1, r8, lsr r7
   12c94:	andeq	r4, r1, r4, lsr #14
   12c98:	andeq	r4, r1, r8, lsl r7
   12c9c:	andeq	r4, r1, r4, lsl #14
   12ca0:	push	{fp, lr}
   12ca4:	add	fp, sp, #4
   12ca8:	ldr	r3, [pc, #12]	; 12cbc <main@@Base+0x2f0>
   12cac:	add	r3, pc, r3
   12cb0:	mov	r0, r3
   12cb4:	bl	155a4 <__gcov_sort_n_vals@@Base+0x458>
   12cb8:	pop	{fp, pc}
   12cbc:	andeq	r4, r1, ip, lsl #10

00012cc0 <b64_get_encoded_buffer_size@@Base>:
   12cc0:	push	{fp}		; (str fp, [sp, #-4]!)
   12cc4:	add	fp, sp, #0
   12cc8:	sub	sp, sp, #12
   12ccc:	str	r0, [fp, #-8]
   12cd0:	ldr	r3, [fp, #-8]
   12cd4:	add	r3, r3, #2
   12cd8:	ldr	r2, [pc, #60]	; 12d1c <b64_get_encoded_buffer_size@@Base+0x5c>
   12cdc:	umull	r2, r3, r2, r3
   12ce0:	lsr	r3, r3, #1
   12ce4:	lsl	r0, r3, #2
   12ce8:	ldr	r3, [pc, #48]	; 12d20 <b64_get_encoded_buffer_size@@Base+0x60>
   12cec:	add	r3, pc, r3
   12cf0:	ldrd	r2, [r3]
   12cf4:	adds	r2, r2, #1
   12cf8:	adc	r3, r3, #0
   12cfc:	ldr	r1, [pc, #32]	; 12d24 <b64_get_encoded_buffer_size@@Base+0x64>
   12d00:	add	r1, pc, r1
   12d04:	strd	r2, [r1]
   12d08:	mov	r3, r0
   12d0c:	mov	r0, r3
   12d10:	add	sp, fp, #0
   12d14:	pop	{fp}		; (ldr fp, [sp], #4)
   12d18:	bx	lr
   12d1c:	bge	feabd7d0 <__bss_end__@@Base+0xfea95108>
   12d20:	andeq	r4, r1, r4, lsl #18
   12d24:	strdeq	r4, [r1], -r0

00012d28 <b64_encode@@Base>:
   12d28:	push	{fp}		; (str fp, [sp, #-4]!)
   12d2c:	add	fp, sp, #0
   12d30:	sub	sp, sp, #44	; 0x2c
   12d34:	str	r0, [fp, #-32]	; 0xffffffe0
   12d38:	str	r1, [fp, #-36]	; 0xffffffdc
   12d3c:	str	r2, [fp, #-40]	; 0xffffffd8
   12d40:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12d44:	str	r3, [fp, #-8]
   12d48:	b	12fa4 <b64_encode@@Base+0x27c>
   12d4c:	ldr	r3, [pc, #652]	; 12fe0 <b64_encode@@Base+0x2b8>
   12d50:	add	r3, pc, r3
   12d54:	ldrd	r2, [r3, #56]	; 0x38
   12d58:	adds	r2, r2, #1
   12d5c:	adc	r3, r3, #0
   12d60:	ldr	r1, [pc, #636]	; 12fe4 <b64_encode@@Base+0x2bc>
   12d64:	add	r1, pc, r1
   12d68:	strd	r2, [r1, #56]	; 0x38
   12d6c:	ldr	r3, [fp, #-8]
   12d70:	cmp	r3, #3
   12d74:	movcc	r3, r3
   12d78:	movcs	r3, #3
   12d7c:	str	r3, [fp, #-20]	; 0xffffffec
   12d80:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d84:	ldr	r2, [fp, #-8]
   12d88:	sub	r3, r2, r3
   12d8c:	str	r3, [fp, #-8]
   12d90:	mov	r3, #0
   12d94:	str	r3, [fp, #-16]
   12d98:	mov	r3, #0
   12d9c:	str	r3, [fp, #-12]
   12da0:	b	12df0 <b64_encode@@Base+0xc8>
   12da4:	ldr	r3, [pc, #572]	; 12fe8 <b64_encode@@Base+0x2c0>
   12da8:	add	r3, pc, r3
   12dac:	ldrd	r2, [r3]
   12db0:	adds	r2, r2, #1
   12db4:	adc	r3, r3, #0
   12db8:	ldr	r1, [pc, #556]	; 12fec <b64_encode@@Base+0x2c4>
   12dbc:	add	r1, pc, r1
   12dc0:	strd	r2, [r1]
   12dc4:	ldr	r3, [fp, #-16]
   12dc8:	lsl	r2, r3, #8
   12dcc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12dd0:	add	r1, r3, #1
   12dd4:	str	r1, [fp, #-32]	; 0xffffffe0
   12dd8:	ldrb	r3, [r3]
   12ddc:	orr	r3, r2, r3
   12de0:	str	r3, [fp, #-16]
   12de4:	ldr	r3, [fp, #-12]
   12de8:	add	r3, r3, #1
   12dec:	str	r3, [fp, #-12]
   12df0:	ldr	r3, [fp, #-12]
   12df4:	cmp	r3, #2
   12df8:	ble	12da4 <b64_encode@@Base+0x7c>
   12dfc:	mov	r3, #4
   12e00:	str	r3, [fp, #-12]
   12e04:	b	12f80 <b64_encode@@Base+0x258>
   12e08:	ldr	r3, [pc, #480]	; 12ff0 <b64_encode@@Base+0x2c8>
   12e0c:	add	r3, pc, r3
   12e10:	ldrd	r2, [r3, #48]	; 0x30
   12e14:	adds	r2, r2, #1
   12e18:	adc	r3, r3, #0
   12e1c:	ldr	r1, [pc, #464]	; 12ff4 <b64_encode@@Base+0x2cc>
   12e20:	add	r1, pc, r1
   12e24:	strd	r2, [r1, #48]	; 0x30
   12e28:	ldr	r3, [fp, #-16]
   12e2c:	and	r3, r3, #63	; 0x3f
   12e30:	str	r3, [fp, #-24]	; 0xffffffe8
   12e34:	ldr	r3, [fp, #-12]
   12e38:	ldr	r2, [fp, #-40]	; 0xffffffd8
   12e3c:	add	r2, r2, r3
   12e40:	ldr	r1, [fp, #-12]
   12e44:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e48:	cmp	r1, r3
   12e4c:	bgt	12f4c <b64_encode@@Base+0x224>
   12e50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e54:	cmp	r3, #25
   12e58:	bgt	12e70 <b64_encode@@Base+0x148>
   12e5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e60:	uxtb	r3, r3
   12e64:	add	r3, r3, #65	; 0x41
   12e68:	uxtb	r3, r3
   12e6c:	b	12f70 <b64_encode@@Base+0x248>
   12e70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e74:	cmp	r3, #51	; 0x33
   12e78:	bgt	12e90 <b64_encode@@Base+0x168>
   12e7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e80:	uxtb	r3, r3
   12e84:	add	r3, r3, #71	; 0x47
   12e88:	uxtb	r3, r3
   12e8c:	b	12f28 <b64_encode@@Base+0x200>
   12e90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e94:	cmp	r3, #61	; 0x3d
   12e98:	bgt	12eb0 <b64_encode@@Base+0x188>
   12e9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ea0:	uxtb	r3, r3
   12ea4:	sub	r3, r3, #4
   12ea8:	uxtb	r3, r3
   12eac:	b	12f08 <b64_encode@@Base+0x1e0>
   12eb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12eb4:	cmp	r3, #62	; 0x3e
   12eb8:	bne	12ec4 <b64_encode@@Base+0x19c>
   12ebc:	mov	r3, #43	; 0x2b
   12ec0:	b	12ee8 <b64_encode@@Base+0x1c0>
   12ec4:	mov	r3, #47	; 0x2f
   12ec8:	ldr	r1, [pc, #296]	; 12ff8 <b64_encode@@Base+0x2d0>
   12ecc:	add	r1, pc, r1
   12ed0:	ldrd	r0, [r1, #8]
   12ed4:	adds	r0, r0, #1
   12ed8:	adc	r1, r1, #0
   12edc:	ldr	ip, [pc, #280]	; 12ffc <b64_encode@@Base+0x2d4>
   12ee0:	add	ip, pc, ip
   12ee4:	strd	r0, [ip, #8]
   12ee8:	ldr	r1, [pc, #272]	; 13000 <b64_encode@@Base+0x2d8>
   12eec:	add	r1, pc, r1
   12ef0:	ldrd	r0, [r1, #16]
   12ef4:	adds	r0, r0, #1
   12ef8:	adc	r1, r1, #0
   12efc:	ldr	ip, [pc, #256]	; 13004 <b64_encode@@Base+0x2dc>
   12f00:	add	ip, pc, ip
   12f04:	strd	r0, [ip, #16]
   12f08:	ldr	r1, [pc, #248]	; 13008 <b64_encode@@Base+0x2e0>
   12f0c:	add	r1, pc, r1
   12f10:	ldrd	r0, [r1, #24]
   12f14:	adds	r0, r0, #1
   12f18:	adc	r1, r1, #0
   12f1c:	ldr	ip, [pc, #232]	; 1300c <b64_encode@@Base+0x2e4>
   12f20:	add	ip, pc, ip
   12f24:	strd	r0, [ip, #24]
   12f28:	ldr	r1, [pc, #224]	; 13010 <b64_encode@@Base+0x2e8>
   12f2c:	add	r1, pc, r1
   12f30:	ldrd	r0, [r1, #32]
   12f34:	adds	r0, r0, #1
   12f38:	adc	r1, r1, #0
   12f3c:	ldr	ip, [pc, #208]	; 13014 <b64_encode@@Base+0x2ec>
   12f40:	add	ip, pc, ip
   12f44:	strd	r0, [ip, #32]
   12f48:	b	12f70 <b64_encode@@Base+0x248>
   12f4c:	mov	r3, #61	; 0x3d
   12f50:	ldr	r1, [pc, #192]	; 13018 <b64_encode@@Base+0x2f0>
   12f54:	add	r1, pc, r1
   12f58:	ldrd	r0, [r1, #40]	; 0x28
   12f5c:	adds	r0, r0, #1
   12f60:	adc	r1, r1, #0
   12f64:	ldr	ip, [pc, #176]	; 1301c <b64_encode@@Base+0x2f4>
   12f68:	add	ip, pc, ip
   12f6c:	strd	r0, [ip, #40]	; 0x28
   12f70:	strb	r3, [r2]
   12f74:	ldr	r3, [fp, #-16]
   12f78:	lsr	r3, r3, #6
   12f7c:	str	r3, [fp, #-16]
   12f80:	ldr	r3, [fp, #-12]
   12f84:	sub	r3, r3, #1
   12f88:	str	r3, [fp, #-12]
   12f8c:	ldr	r3, [fp, #-12]
   12f90:	cmp	r3, #0
   12f94:	bge	12e08 <b64_encode@@Base+0xe0>
   12f98:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12f9c:	add	r3, r3, #4
   12fa0:	str	r3, [fp, #-40]	; 0xffffffd8
   12fa4:	ldr	r3, [fp, #-8]
   12fa8:	cmp	r3, #0
   12fac:	bne	12d4c <b64_encode@@Base+0x24>
   12fb0:	ldr	r3, [pc, #104]	; 13020 <b64_encode@@Base+0x2f8>
   12fb4:	add	r3, pc, r3
   12fb8:	ldrd	r2, [r3, #64]	; 0x40
   12fbc:	adds	r2, r2, #1
   12fc0:	adc	r3, r3, #0
   12fc4:	ldr	r1, [pc, #88]	; 13024 <b64_encode@@Base+0x2fc>
   12fc8:	add	r1, pc, r1
   12fcc:	strd	r2, [r1, #64]	; 0x40
   12fd0:	nop			; (mov r0, r0)
   12fd4:	add	sp, fp, #0
   12fd8:	pop	{fp}		; (ldr fp, [sp], #4)
   12fdc:	bx	lr
   12fe0:	andeq	r4, r1, r8, asr r8
   12fe4:	andeq	r4, r1, r4, asr #16
   12fe8:	andeq	r4, r1, r0, lsl #16
   12fec:	andeq	r4, r1, ip, ror #15
   12ff0:	muleq	r1, ip, r7
   12ff4:	andeq	r4, r1, r8, lsl #15
   12ff8:	ldrdeq	r4, [r1], -ip
   12ffc:	andeq	r4, r1, r8, asr #13
   13000:			; <UNDEFINED> instruction: 0x000146bc
   13004:	andeq	r4, r1, r8, lsr #13
   13008:	muleq	r1, ip, r6
   1300c:	andeq	r4, r1, r8, lsl #13
   13010:	andeq	r4, r1, ip, ror r6
   13014:	andeq	r4, r1, r8, ror #12
   13018:	andeq	r4, r1, r4, asr r6
   1301c:	andeq	r4, r1, r0, asr #12
   13020:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13024:	andeq	r4, r1, r0, ror #11
   13028:	push	{fp, lr}
   1302c:	add	fp, sp, #4
   13030:	ldr	r3, [pc, #12]	; 13044 <b64_encode@@Base+0x31c>
   13034:	add	r3, pc, r3
   13038:	mov	r0, r3
   1303c:	bl	155a4 <__gcov_sort_n_vals@@Base+0x458>
   13040:	pop	{fp, pc}
   13044:	strdeq	r4, [r1], -ip
   13048:	push	{fp}		; (str fp, [sp, #-4]!)
   1304c:	add	fp, sp, #0
   13050:	sub	sp, sp, #12
   13054:	str	r0, [fp, #-8]
   13058:	str	r1, [fp, #-12]
   1305c:	ldr	r3, [pc, #236]	; 13150 <b64_encode@@Base+0x428>
   13060:	add	r3, pc, r3
   13064:	ldrd	r2, [r3]
   13068:	adds	r2, r2, #1
   1306c:	adc	r3, r3, #0
   13070:	ldr	r1, [pc, #220]	; 13154 <b64_encode@@Base+0x42c>
   13074:	add	r1, pc, r1
   13078:	strd	r2, [r1]
   1307c:	ldr	r3, [fp, #-8]
   13080:	ldrb	r3, [r3]
   13084:	lsl	r3, r3, #2
   13088:	sxtb	r2, r3
   1308c:	ldr	r3, [fp, #-8]
   13090:	add	r3, r3, #1
   13094:	ldrb	r3, [r3]
   13098:	lsr	r3, r3, #4
   1309c:	uxtb	r3, r3
   130a0:	sxtb	r3, r3
   130a4:	orr	r3, r2, r3
   130a8:	sxtb	r3, r3
   130ac:	uxtb	r2, r3
   130b0:	ldr	r3, [fp, #-12]
   130b4:	strb	r2, [r3]
   130b8:	ldr	r3, [fp, #-12]
   130bc:	add	r3, r3, #1
   130c0:	ldr	r2, [fp, #-8]
   130c4:	add	r2, r2, #1
   130c8:	ldrb	r2, [r2]
   130cc:	lsl	r2, r2, #4
   130d0:	sxtb	r1, r2
   130d4:	ldr	r2, [fp, #-8]
   130d8:	add	r2, r2, #2
   130dc:	ldrb	r2, [r2]
   130e0:	lsr	r2, r2, #2
   130e4:	uxtb	r2, r2
   130e8:	sxtb	r2, r2
   130ec:	orr	r2, r1, r2
   130f0:	sxtb	r2, r2
   130f4:	uxtb	r2, r2
   130f8:	strb	r2, [r3]
   130fc:	ldr	r3, [fp, #-12]
   13100:	add	r3, r3, #2
   13104:	ldr	r2, [fp, #-8]
   13108:	add	r2, r2, #2
   1310c:	ldrb	r2, [r2]
   13110:	lsl	r2, r2, #6
   13114:	sxtb	r2, r2
   13118:	bic	r2, r2, #63	; 0x3f
   1311c:	sxtb	r1, r2
   13120:	ldr	r2, [fp, #-8]
   13124:	add	r2, r2, #3
   13128:	ldrb	r2, [r2]
   1312c:	sxtb	r2, r2
   13130:	orr	r2, r1, r2
   13134:	sxtb	r2, r2
   13138:	uxtb	r2, r2
   1313c:	strb	r2, [r3]
   13140:	nop			; (mov r0, r0)
   13144:	add	sp, fp, #0
   13148:	pop	{fp}		; (ldr fp, [sp], #4)
   1314c:	bx	lr
   13150:	andeq	r4, r1, r0, lsr #12
   13154:	andeq	r4, r1, ip, lsl #12

00013158 <b64_get_decoded_buffer_size@@Base>:
   13158:	push	{fp}		; (str fp, [sp, #-4]!)
   1315c:	add	fp, sp, #0
   13160:	sub	sp, sp, #20
   13164:	str	r0, [fp, #-16]
   13168:	ldr	r3, [fp, #-16]
   1316c:	cmp	r3, #0
   13170:	beq	131a4 <b64_get_decoded_buffer_size@@Base+0x4c>
   13174:	ldr	r3, [pc, #160]	; 1321c <b64_get_decoded_buffer_size@@Base+0xc4>
   13178:	add	r3, pc, r3
   1317c:	ldrd	r2, [r3]
   13180:	adds	r2, r2, #1
   13184:	adc	r3, r3, #0
   13188:	ldr	r1, [pc, #144]	; 13220 <b64_get_decoded_buffer_size@@Base+0xc8>
   1318c:	add	r1, pc, r1
   13190:	strd	r2, [r1]
   13194:	ldr	r3, [fp, #-16]
   13198:	lsr	r3, r3, #2
   1319c:	cmp	r3, #0
   131a0:	bne	131cc <b64_get_decoded_buffer_size@@Base+0x74>
   131a4:	mov	r0, #0
   131a8:	ldr	r3, [pc, #116]	; 13224 <b64_get_decoded_buffer_size@@Base+0xcc>
   131ac:	add	r3, pc, r3
   131b0:	ldrd	r2, [r3, #8]
   131b4:	adds	r2, r2, #1
   131b8:	adc	r3, r3, #0
   131bc:	ldr	r1, [pc, #100]	; 13228 <b64_get_decoded_buffer_size@@Base+0xd0>
   131c0:	add	r1, pc, r1
   131c4:	strd	r2, [r1, #8]
   131c8:	b	13208 <b64_get_decoded_buffer_size@@Base+0xb0>
   131cc:	ldr	r3, [fp, #-16]
   131d0:	lsr	r2, r3, #2
   131d4:	mov	r3, r2
   131d8:	lsl	r3, r3, #1
   131dc:	add	r3, r3, r2
   131e0:	str	r3, [fp, #-8]
   131e4:	ldr	r0, [fp, #-8]
   131e8:	ldr	r3, [pc, #60]	; 1322c <b64_get_decoded_buffer_size@@Base+0xd4>
   131ec:	add	r3, pc, r3
   131f0:	ldrd	r2, [r3, #16]
   131f4:	adds	r2, r2, #1
   131f8:	adc	r3, r3, #0
   131fc:	ldr	r1, [pc, #44]	; 13230 <b64_get_decoded_buffer_size@@Base+0xd8>
   13200:	add	r1, pc, r1
   13204:	strd	r2, [r1, #16]
   13208:	mov	r3, r0
   1320c:	mov	r0, r3
   13210:	add	sp, fp, #0
   13214:	pop	{fp}		; (ldr fp, [sp], #4)
   13218:	bx	lr
   1321c:	strdeq	r4, [r1], -r0
   13220:	ldrdeq	r4, [r1], -ip
   13224:			; <UNDEFINED> instruction: 0x000144bc
   13228:	andeq	r4, r1, r8, lsr #9
   1322c:	andeq	r4, r1, ip, ror r4
   13230:	andeq	r4, r1, r8, ror #8

00013234 <b64_decode@@Base>:
   13234:	push	{fp, lr}
   13238:	add	fp, sp, #4
   1323c:	sub	sp, sp, #48	; 0x30
   13240:	str	r0, [fp, #-40]	; 0xffffffd8
   13244:	str	r1, [fp, #-44]	; 0xffffffd4
   13248:	str	r2, [fp, #-48]	; 0xffffffd0
   1324c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13250:	str	r3, [fp, #-12]
   13254:	mov	r3, #0
   13258:	str	r3, [fp, #-24]	; 0xffffffe8
   1325c:	b	1358c <b64_decode@@Base+0x358>
   13260:	ldr	r3, [pc, #884]	; 135dc <b64_decode@@Base+0x3a8>
   13264:	add	r3, pc, r3
   13268:	ldrd	r2, [r3, #96]	; 0x60
   1326c:	adds	r2, r2, #1
   13270:	adc	r3, r3, #0
   13274:	ldr	r1, [pc, #868]	; 135e0 <b64_decode@@Base+0x3ac>
   13278:	add	r1, pc, r1
   1327c:	strd	r2, [r1, #96]	; 0x60
   13280:	mov	r3, #0
   13284:	str	r3, [fp, #-20]	; 0xffffffec
   13288:	mov	r3, #0
   1328c:	str	r3, [fp, #-16]
   13290:	b	134e0 <b64_decode@@Base+0x2ac>
   13294:	ldr	r3, [pc, #840]	; 135e4 <b64_decode@@Base+0x3b0>
   13298:	add	r3, pc, r3
   1329c:	ldrd	r2, [r3, #72]	; 0x48
   132a0:	adds	r2, r2, #1
   132a4:	adc	r3, r3, #0
   132a8:	ldr	r1, [pc, #824]	; 135e8 <b64_decode@@Base+0x3b4>
   132ac:	add	r1, pc, r1
   132b0:	strd	r2, [r1, #72]	; 0x48
   132b4:	mov	r3, #0
   132b8:	strb	r3, [fp, #-5]
   132bc:	b	133cc <b64_decode@@Base+0x198>
   132c0:	ldr	r3, [pc, #804]	; 135ec <b64_decode@@Base+0x3b8>
   132c4:	add	r3, pc, r3
   132c8:	ldrd	r2, [r3, #32]
   132cc:	adds	r2, r2, #1
   132d0:	adc	r3, r3, #0
   132d4:	ldr	r1, [pc, #788]	; 135f0 <b64_decode@@Base+0x3bc>
   132d8:	add	r1, pc, r1
   132dc:	strd	r2, [r1, #32]
   132e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   132e4:	add	r2, r3, #1
   132e8:	str	r2, [fp, #-24]	; 0xffffffe8
   132ec:	ldr	r2, [fp, #-40]	; 0xffffffd8
   132f0:	add	r3, r2, r3
   132f4:	ldrb	r3, [r3]
   132f8:	strb	r3, [fp, #-5]
   132fc:	ldrb	r3, [fp, #-5]
   13300:	sub	r3, r3, #43	; 0x2b
   13304:	str	r3, [fp, #-28]	; 0xffffffe4
   13308:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1330c:	cmp	r3, #79	; 0x4f
   13310:	bhi	1332c <b64_decode@@Base+0xf8>
   13314:	ldr	r2, [pc, #728]	; 135f4 <b64_decode@@Base+0x3c0>
   13318:	add	r2, pc, r2
   1331c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13320:	add	r3, r2, r3
   13324:	ldrb	r0, [r3]
   13328:	b	13350 <b64_decode@@Base+0x11c>
   1332c:	mov	r0, #0
   13330:	ldr	r3, [pc, #704]	; 135f8 <b64_decode@@Base+0x3c4>
   13334:	add	r3, pc, r3
   13338:	ldrd	r2, [r3]
   1333c:	adds	r2, r2, #1
   13340:	adc	r3, r3, #0
   13344:	ldr	r1, [pc, #688]	; 135fc <b64_decode@@Base+0x3c8>
   13348:	add	r1, pc, r1
   1334c:	strd	r2, [r1]
   13350:	mov	r3, r0
   13354:	strb	r3, [fp, #-5]
   13358:	ldrb	r3, [fp, #-5]
   1335c:	cmp	r3, #0
   13360:	beq	133cc <b64_decode@@Base+0x198>
   13364:	ldrb	r3, [fp, #-5]
   13368:	cmp	r3, #36	; 0x24
   1336c:	beq	13380 <b64_decode@@Base+0x14c>
   13370:	ldrb	r3, [fp, #-5]
   13374:	sub	r3, r3, #61	; 0x3d
   13378:	uxtb	r0, r3
   1337c:	b	133a4 <b64_decode@@Base+0x170>
   13380:	mov	r0, #0
   13384:	ldr	r3, [pc, #628]	; 13600 <b64_decode@@Base+0x3cc>
   13388:	add	r3, pc, r3
   1338c:	ldrd	r2, [r3, #8]
   13390:	adds	r2, r2, #1
   13394:	adc	r3, r3, #0
   13398:	ldr	r1, [pc, #612]	; 13604 <b64_decode@@Base+0x3d0>
   1339c:	add	r1, pc, r1
   133a0:	strd	r2, [r1, #8]
   133a4:	mov	r3, r0
   133a8:	strb	r3, [fp, #-5]
   133ac:	ldr	r3, [pc, #596]	; 13608 <b64_decode@@Base+0x3d4>
   133b0:	add	r3, pc, r3
   133b4:	ldrd	r2, [r3, #16]
   133b8:	adds	r2, r2, #1
   133bc:	adc	r3, r3, #0
   133c0:	ldr	r1, [pc, #580]	; 1360c <b64_decode@@Base+0x3d8>
   133c4:	add	r1, pc, r1
   133c8:	strd	r2, [r1, #16]
   133cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   133d0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   133d4:	cmp	r2, r3
   133d8:	bcs	13408 <b64_decode@@Base+0x1d4>
   133dc:	ldr	r3, [pc, #556]	; 13610 <b64_decode@@Base+0x3dc>
   133e0:	add	r3, pc, r3
   133e4:	ldrd	r2, [r3, #24]
   133e8:	adds	r2, r2, #1
   133ec:	adc	r3, r3, #0
   133f0:	ldr	r1, [pc, #540]	; 13614 <b64_decode@@Base+0x3e0>
   133f4:	add	r1, pc, r1
   133f8:	strd	r2, [r1, #24]
   133fc:	ldrb	r3, [fp, #-5]
   13400:	cmp	r3, #0
   13404:	beq	132c0 <b64_decode@@Base+0x8c>
   13408:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1340c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13410:	cmp	r2, r3
   13414:	bcc	13444 <b64_decode@@Base+0x210>
   13418:	ldr	r3, [pc, #504]	; 13618 <b64_decode@@Base+0x3e4>
   1341c:	add	r3, pc, r3
   13420:	ldrd	r2, [r3, #40]	; 0x28
   13424:	adds	r2, r2, #1
   13428:	adc	r3, r3, #0
   1342c:	ldr	r1, [pc, #488]	; 1361c <b64_decode@@Base+0x3e8>
   13430:	add	r1, pc, r1
   13434:	strd	r2, [r1, #40]	; 0x28
   13438:	ldrb	r3, [fp, #-5]
   1343c:	cmp	r3, #0
   13440:	beq	134a0 <b64_decode@@Base+0x26c>
   13444:	ldr	r3, [fp, #-20]	; 0xffffffec
   13448:	add	r3, r3, #1
   1344c:	str	r3, [fp, #-20]	; 0xffffffec
   13450:	ldrb	r3, [fp, #-5]
   13454:	cmp	r3, #0
   13458:	beq	134d4 <b64_decode@@Base+0x2a0>
   1345c:	ldrb	r3, [fp, #-5]
   13460:	sub	r3, r3, #1
   13464:	uxtb	r1, r3
   13468:	sub	r2, fp, #32
   1346c:	ldr	r3, [fp, #-16]
   13470:	add	r3, r2, r3
   13474:	mov	r2, r1
   13478:	strb	r2, [r3]
   1347c:	ldr	r3, [pc, #412]	; 13620 <b64_decode@@Base+0x3ec>
   13480:	add	r3, pc, r3
   13484:	ldrd	r2, [r3, #48]	; 0x30
   13488:	adds	r2, r2, #1
   1348c:	adc	r3, r3, #0
   13490:	ldr	r1, [pc, #396]	; 13624 <b64_decode@@Base+0x3f0>
   13494:	add	r1, pc, r1
   13498:	strd	r2, [r1, #48]	; 0x30
   1349c:	b	134d4 <b64_decode@@Base+0x2a0>
   134a0:	sub	r2, fp, #32
   134a4:	ldr	r3, [fp, #-16]
   134a8:	add	r3, r2, r3
   134ac:	mov	r2, #0
   134b0:	strb	r2, [r3]
   134b4:	ldr	r3, [pc, #364]	; 13628 <b64_decode@@Base+0x3f4>
   134b8:	add	r3, pc, r3
   134bc:	ldrd	r2, [r3, #56]	; 0x38
   134c0:	adds	r2, r2, #1
   134c4:	adc	r3, r3, #0
   134c8:	ldr	r1, [pc, #348]	; 1362c <b64_decode@@Base+0x3f8>
   134cc:	add	r1, pc, r1
   134d0:	strd	r2, [r1, #56]	; 0x38
   134d4:	ldr	r3, [fp, #-16]
   134d8:	add	r3, r3, #1
   134dc:	str	r3, [fp, #-16]
   134e0:	ldr	r3, [fp, #-16]
   134e4:	cmp	r3, #3
   134e8:	bgt	1351c <b64_decode@@Base+0x2e8>
   134ec:	ldr	r3, [pc, #316]	; 13630 <b64_decode@@Base+0x3fc>
   134f0:	add	r3, pc, r3
   134f4:	ldrd	r2, [r3, #64]	; 0x40
   134f8:	adds	r2, r2, #1
   134fc:	adc	r3, r3, #0
   13500:	ldr	r1, [pc, #300]	; 13634 <b64_decode@@Base+0x400>
   13504:	add	r1, pc, r1
   13508:	strd	r2, [r1, #64]	; 0x40
   1350c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13510:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13514:	cmp	r2, r3
   13518:	bcc	13294 <b64_decode@@Base+0x60>
   1351c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13520:	cmp	r3, #0
   13524:	beq	1358c <b64_decode@@Base+0x358>
   13528:	ldr	r3, [pc, #264]	; 13638 <b64_decode@@Base+0x404>
   1352c:	add	r3, pc, r3
   13530:	ldrd	r2, [r3, #80]	; 0x50
   13534:	adds	r2, r2, #1
   13538:	adc	r3, r3, #0
   1353c:	ldr	r1, [pc, #248]	; 1363c <b64_decode@@Base+0x408>
   13540:	add	r1, pc, r1
   13544:	strd	r2, [r1, #80]	; 0x50
   13548:	sub	r3, fp, #32
   1354c:	ldr	r1, [fp, #-12]
   13550:	mov	r0, r3
   13554:	bl	13048 <b64_encode@@Base+0x320>
   13558:	ldr	r3, [fp, #-20]	; 0xffffffec
   1355c:	sub	r3, r3, #1
   13560:	ldr	r2, [fp, #-12]
   13564:	add	r3, r2, r3
   13568:	str	r3, [fp, #-12]
   1356c:	ldr	r3, [pc, #204]	; 13640 <b64_decode@@Base+0x40c>
   13570:	add	r3, pc, r3
   13574:	ldrd	r2, [r3, #88]	; 0x58
   13578:	adds	r2, r2, #1
   1357c:	adc	r3, r3, #0
   13580:	ldr	r1, [pc, #188]	; 13644 <b64_decode@@Base+0x410>
   13584:	add	r1, pc, r1
   13588:	strd	r2, [r1, #88]	; 0x58
   1358c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13590:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13594:	cmp	r2, r3
   13598:	bcc	13260 <b64_decode@@Base+0x2c>
   1359c:	ldr	r2, [fp, #-12]
   135a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   135a4:	sub	r3, r2, r3
   135a8:	mov	r0, r3
   135ac:	ldr	r3, [pc, #148]	; 13648 <b64_decode@@Base+0x414>
   135b0:	add	r3, pc, r3
   135b4:	ldrd	r2, [r3, #104]	; 0x68
   135b8:	adds	r2, r2, #1
   135bc:	adc	r3, r3, #0
   135c0:	ldr	r1, [pc, #132]	; 1364c <b64_decode@@Base+0x418>
   135c4:	add	r1, pc, r1
   135c8:	strd	r2, [r1, #104]	; 0x68
   135cc:	mov	r3, r0
   135d0:	mov	r0, r3
   135d4:	sub	sp, fp, #4
   135d8:	pop	{fp, pc}
   135dc:	muleq	r1, r4, r3
   135e0:	andeq	r4, r1, r0, lsl #7
   135e4:	andeq	r4, r1, r0, ror #6
   135e8:	andeq	r4, r1, ip, asr #6
   135ec:	andeq	r4, r1, r4, lsr r3
   135f0:	andeq	r4, r1, r0, lsr #6
   135f4:	andeq	r2, r0, ip, asr #29
   135f8:	andeq	r4, r1, r4, asr #5
   135fc:			; <UNDEFINED> instruction: 0x000142b0
   13600:	andeq	r4, r1, r0, ror r2
   13604:	andeq	r4, r1, ip, asr r2
   13608:	andeq	r4, r1, r8, asr #4
   1360c:	andeq	r4, r1, r4, lsr r2
   13610:	andeq	r4, r1, r8, lsl r2
   13614:	andeq	r4, r1, r4, lsl #4
   13618:	ldrdeq	r4, [r1], -ip
   1361c:	andeq	r4, r1, r8, asr #3
   13620:	andeq	r4, r1, r8, ror r1
   13624:	andeq	r4, r1, r4, ror #2
   13628:	andeq	r4, r1, r0, asr #2
   1362c:	andeq	r4, r1, ip, lsr #2
   13630:	andeq	r4, r1, r8, lsl #2
   13634:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13638:	andeq	r4, r1, ip, asr #1
   1363c:	strheq	r4, [r1], -r8
   13640:	andeq	r4, r1, r8, lsl #1
   13644:	andeq	r4, r1, r4, ror r0
   13648:	andeq	r4, r1, r8, asr #32
   1364c:	andeq	r4, r1, r4, lsr r0
   13650:	push	{fp, lr}
   13654:	add	fp, sp, #4
   13658:	ldr	r3, [pc, #12]	; 1366c <b64_decode@@Base+0x438>
   1365c:	add	r3, pc, r3
   13660:	mov	r0, r3
   13664:	bl	155a4 <__gcov_sort_n_vals@@Base+0x458>
   13668:	pop	{fp, pc}
   1366c:	andeq	r3, r1, r8, ror #24
   13670:	b	1489c <b64_decode@@Base+0x1668>
   13674:	push	{r4, r5, r6, lr}
   13678:	subs	r5, r1, #0
   1367c:	popeq	{r4, r5, r6, pc}
   13680:	mov	r4, r0
   13684:	bl	13670 <b64_decode@@Base+0x43c>
   13688:	ldrd	r2, [r4]
   1368c:	adds	r0, r0, r2
   13690:	adc	r1, r1, r3
   13694:	subs	r5, r5, #1
   13698:	strd	r0, [r4], #8
   1369c:	bne	13684 <b64_decode@@Base+0x450>
   136a0:	pop	{r4, r5, r6, pc}
   136a4:	ldr	r3, [pc, #20]	; 136c0 <b64_decode@@Base+0x48c>
   136a8:	ldr	r2, [pc, #20]	; 136c4 <b64_decode@@Base+0x490>
   136ac:	add	r3, pc, r3
   136b0:	ldr	r3, [r3, r2]
   136b4:	ldmib	r3, {r0, r3}
   136b8:	add	r0, r0, r3
   136bc:	bx	lr
   136c0:	andeq	r3, r1, ip, asr #18
   136c4:	andeq	r0, r0, ip, asr #1
   136c8:	ldr	r3, [pc, #28]	; 136ec <b64_decode@@Base+0x4b8>
   136cc:	ldr	r2, [pc, #28]	; 136f0 <b64_decode@@Base+0x4bc>
   136d0:	add	r3, pc, r3
   136d4:	ldr	r3, [r3, r2]
   136d8:	ldr	r2, [r3]
   136dc:	cmp	r2, #0
   136e0:	ldrne	r0, [r3, #20]
   136e4:	moveq	r0, #1
   136e8:	bx	lr
   136ec:	andeq	r3, r1, r8, lsr #18
   136f0:	andeq	r0, r0, ip, asr #1
   136f4:	bx	lr
   136f8:	ldr	ip, [pc, #32]	; 13720 <b64_decode@@Base+0x4ec>
   136fc:	mov	r3, #32
   13700:	teq	r0, r1
   13704:	movmi	r2, ip
   13708:	movpl	r2, #0
   1370c:	subs	r3, r3, #1
   13710:	lsl	r1, r1, #1
   13714:	eor	r0, r2, r0, lsl #1
   13718:	bne	13700 <b64_decode@@Base+0x4cc>
   1371c:	bx	lr
   13720:	strbeq	r1, [r1], #3511	; 0xdb7
   13724:	ldr	r3, [pc, #76]	; 13778 <b64_decode@@Base+0x544>
   13728:	ldr	r1, [pc, #76]	; 1377c <b64_decode@@Base+0x548>
   1372c:	add	r3, pc, r3
   13730:	push	{r4, r5, r6, lr}
   13734:	mov	r5, r0
   13738:	ldr	r4, [r3, r1]
   1373c:	lsl	r1, r0, #2
   13740:	mov	r0, r4
   13744:	mov	r2, #1
   13748:	ldr	r3, [r0], #28
   1374c:	bl	10f6c <fwrite@plt>
   13750:	cmp	r0, #1
   13754:	movne	r3, #1
   13758:	ldr	r0, [r4, #8]
   1375c:	strne	r3, [r4, #20]
   13760:	ldr	r3, [r4, #4]
   13764:	sub	r0, r0, r5
   13768:	add	r3, r3, r5
   1376c:	str	r3, [r4, #4]
   13770:	str	r0, [r4, #8]
   13774:	pop	{r4, r5, r6, pc}
   13778:	andeq	r3, r1, ip, asr #17
   1377c:	andeq	r0, r0, ip, asr #1
   13780:	ldr	r3, [pc, #76]	; 137d4 <b64_decode@@Base+0x5a0>
   13784:	ldr	r2, [pc, #76]	; 137d8 <b64_decode@@Base+0x5a4>
   13788:	add	r3, pc, r3
   1378c:	push	{r4, r5, r6, lr}
   13790:	mov	r5, r0
   13794:	ldr	r4, [r3, r2]
   13798:	ldr	r3, [r4, #8]
   1379c:	cmp	r3, #1024	; 0x400
   137a0:	bcc	137c0 <b64_decode@@Base+0x58c>
   137a4:	mov	r0, #1024	; 0x400
   137a8:	bl	13724 <b64_decode@@Base+0x4f0>
   137ac:	ldr	r3, [r4, #8]
   137b0:	cmp	r3, #0
   137b4:	addne	r2, r4, #4096	; 0x1000
   137b8:	ldrne	r2, [r2, #28]
   137bc:	strne	r2, [r4, #28]
   137c0:	add	r0, r3, #7
   137c4:	add	r3, r5, r3
   137c8:	str	r3, [r4, #8]
   137cc:	add	r0, r4, r0, lsl #2
   137d0:	pop	{r4, r5, r6, pc}
   137d4:	andeq	r3, r1, r0, ror r8
   137d8:	andeq	r0, r0, ip, asr #1
   137dc:	ldr	r3, [pc, #172]	; 13890 <b64_decode@@Base+0x65c>
   137e0:	ldr	r2, [pc, #172]	; 13894 <b64_decode@@Base+0x660>
   137e4:	add	r3, pc, r3
   137e8:	push	{r4, r5, r6, lr}
   137ec:	mov	r5, r0
   137f0:	ldr	r4, [r3, r2]
   137f4:	ldr	r3, [r4, #8]
   137f8:	ldr	ip, [r4, #12]
   137fc:	sub	ip, ip, r3
   13800:	cmp	ip, r0
   13804:	bcs	13860 <b64_decode@@Base+0x62c>
   13808:	ldr	r2, [r4, #4]
   1380c:	cmp	ip, #0
   13810:	add	r2, r2, r3
   13814:	str	r2, [r4, #4]
   13818:	addne	r2, r4, #28
   1381c:	mov	r0, r4
   13820:	ldrne	r3, [r2, r3, lsl #2]
   13824:	mov	r6, #0
   13828:	strne	r3, [r4, #28]
   1382c:	ldr	r3, [r0], #28
   13830:	mov	r2, #4096	; 0x1000
   13834:	add	r0, r0, ip, lsl #2
   13838:	mov	r1, #1
   1383c:	str	ip, [r4, #12]
   13840:	str	r6, [r4, #8]
   13844:	bl	10f84 <fread@plt>
   13848:	ldr	r3, [r4, #12]
   1384c:	add	r0, r3, r0, lsr #2
   13850:	cmp	r5, r0
   13854:	str	r0, [r4, #12]
   13858:	bhi	13874 <b64_decode@@Base+0x640>
   1385c:	ldr	r3, [r4, #8]
   13860:	add	r0, r3, #7
   13864:	add	r5, r5, r3
   13868:	add	r0, r4, r0, lsl #2
   1386c:	str	r5, [r4, #8]
   13870:	pop	{r4, r5, r6, pc}
   13874:	ldr	r3, [r4, #16]
   13878:	str	r6, [r4, #12]
   1387c:	add	r5, r5, r3
   13880:	sub	r5, r5, r0
   13884:	str	r5, [r4, #16]
   13888:	mov	r0, r6
   1388c:	pop	{r4, r5, r6, pc}
   13890:	andeq	r3, r1, r4, lsl r8
   13894:	andeq	r0, r0, ip, asr #1
   13898:	push	{r0, r1, r2, r3}
   1389c:	ldr	r3, [pc, #52]	; 138d8 <b64_decode@@Base+0x6a4>
   138a0:	ldr	r1, [pc, #52]	; 138dc <b64_decode@@Base+0x6a8>
   138a4:	push	{lr}		; (str lr, [sp, #-4]!)
   138a8:	add	r3, pc, r3
   138ac:	sub	sp, sp, #12
   138b0:	add	r2, sp, #20
   138b4:	str	r2, [sp, #4]
   138b8:	ldr	r0, [r3, r1]
   138bc:	ldr	r1, [sp, #16]
   138c0:	ldr	r0, [r0]
   138c4:	bl	11080 <vfprintf@plt>
   138c8:	add	sp, sp, #12
   138cc:	pop	{lr}		; (ldr lr, [sp], #4)
   138d0:	add	sp, sp, #16
   138d4:	bx	lr
   138d8:	andeq	r3, r1, r0, asr r7
   138dc:	strheq	r0, [r0], -ip
   138e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   138e4:	subs	r6, r1, #0
   138e8:	beq	13944 <b64_decode@@Base+0x710>
   138ec:	cmp	r2, #0
   138f0:	movne	r3, #0
   138f4:	mov	r7, r2
   138f8:	ldr	r8, [r6]
   138fc:	addne	r5, r0, #12
   13900:	movne	r4, r3
   13904:	beq	13934 <b64_decode@@Base+0x700>
   13908:	ldr	r0, [r5, #4]!
   1390c:	add	r2, r6, r3, lsl #3
   13910:	cmp	r0, #0
   13914:	add	r9, r3, #1
   13918:	add	r4, r4, #1
   1391c:	beq	1392c <b64_decode@@Base+0x6f8>
   13920:	ldr	r0, [r2, #28]
   13924:	bl	10f24 <free@plt>
   13928:	mov	r3, r9
   1392c:	cmp	r7, r4
   13930:	bne	13908 <b64_decode@@Base+0x6d4>
   13934:	mov	r0, r6
   13938:	bl	10f24 <free@plt>
   1393c:	mov	r0, r8
   13940:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13944:	mov	r8, r6
   13948:	b	1393c <b64_decode@@Base+0x708>
   1394c:	push	{r4, r5}
   13950:	mov	r4, r0
   13954:	mov	r5, r1
   13958:	orrs	r3, r4, r5
   1395c:	beq	139a0 <b64_decode@@Base+0x76c>
   13960:	cmp	r1, #0
   13964:	clzeq	r1, r0
   13968:	addeq	r1, r1, #32
   1396c:	clzne	r1, r1
   13970:	rsb	r3, r1, #63	; 0x3f
   13974:	cmp	r3, #1
   13978:	bls	139a0 <b64_decode@@Base+0x76c>
   1397c:	rsb	r2, r1, #61	; 0x3d
   13980:	rsb	r0, r2, #32
   13984:	lsr	r3, r4, r2
   13988:	sub	r2, r2, #32
   1398c:	orr	r3, r3, r5, lsl r0
   13990:	orr	r3, r3, r5, lsr r2
   13994:	rsb	r1, r1, #1073741886	; 0x4000003e
   13998:	and	r0, r3, #3
   1399c:	add	r0, r0, r1, lsl #2
   139a0:	pop	{r4, r5}
   139a4:	bx	lr
   139a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   139ac:	mov	r1, r3
   139b0:	mov	sl, r0
   139b4:	mov	r0, r2
   139b8:	mov	r8, r2
   139bc:	mov	r9, r3
   139c0:	bl	1394c <b64_decode@@Base+0x718>
   139c4:	add	r0, r0, r0, lsl #1
   139c8:	lsl	r0, r0, #3
   139cc:	add	r3, sl, r0
   139d0:	ldr	r2, [sl, r0]
   139d4:	ldrd	r4, [r3, #16]
   139d8:	ldrd	r6, [r3, #8]
   139dc:	add	r2, r2, #1
   139e0:	adds	r4, r4, r8
   139e4:	adc	r5, r5, r9
   139e8:	cmp	r8, r6
   139ec:	sbcs	r1, r9, r7
   139f0:	str	r2, [sl, r0]
   139f4:	strd	r4, [r3, #16]
   139f8:	strdlt	r8, [r3, #8]
   139fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a00:	ldr	r3, [r1, #8]
   13a04:	cmp	r3, #0
   13a08:	bxeq	lr
   13a0c:	push	{r4, r5, r6, r7, r8, lr}
   13a10:	add	r2, r1, #6016	; 0x1780
   13a14:	mov	r8, r1
   13a18:	mov	r7, r0
   13a1c:	ldrd	r0, [r1, #24]
   13a20:	add	r2, r2, #32
   13a24:	mov	r3, r8
   13a28:	mov	ip, #0
   13a2c:	mov	r4, #0
   13a30:	mov	r5, #0
   13a34:	str	ip, [r3, #40]	; 0x28
   13a38:	strd	r0, [r3, #48]	; 0x30
   13a3c:	strd	r4, [r3, #56]	; 0x38
   13a40:	add	r3, r3, #24
   13a44:	cmp	r2, r3
   13a48:	bne	13a34 <b64_decode@@Base+0x800>
   13a4c:	cmp	r7, #0
   13a50:	popeq	{r4, r5, r6, r7, r8, pc}
   13a54:	add	r8, r8, #40	; 0x28
   13a58:	ldr	r3, [r7, #16]
   13a5c:	cmp	r3, #0
   13a60:	beq	13ae8 <b64_decode@@Base+0x8b4>
   13a64:	ldr	r2, [r7, #56]	; 0x38
   13a68:	cmp	r2, #0
   13a6c:	beq	13ae8 <b64_decode@@Base+0x8b4>
   13a70:	mov	r6, #0
   13a74:	b	13a84 <b64_decode@@Base+0x850>
   13a78:	add	r6, r6, #1
   13a7c:	cmp	r2, r6
   13a80:	beq	13ae8 <b64_decode@@Base+0x8b4>
   13a84:	ldr	r3, [r7, #60]	; 0x3c
   13a88:	ldr	r4, [r3, r6, lsl #2]
   13a8c:	cmp	r4, #0
   13a90:	beq	13a78 <b64_decode@@Base+0x844>
   13a94:	ldr	r3, [r4]
   13a98:	cmp	r3, r7
   13a9c:	bne	13a78 <b64_decode@@Base+0x844>
   13aa0:	ldr	r3, [r4, #16]
   13aa4:	cmp	r3, #0
   13aa8:	beq	13a78 <b64_decode@@Base+0x844>
   13aac:	mov	r5, #0
   13ab0:	ldr	r2, [r4, #20]
   13ab4:	lsl	r3, r5, #3
   13ab8:	add	r2, r2, r3
   13abc:	mov	r0, r8
   13ac0:	ldrd	r2, [r2]
   13ac4:	bl	139a8 <b64_decode@@Base+0x774>
   13ac8:	ldr	r3, [r4, #16]
   13acc:	add	r5, r5, #1
   13ad0:	cmp	r3, r5
   13ad4:	bhi	13ab0 <b64_decode@@Base+0x87c>
   13ad8:	ldr	r2, [r7, #56]	; 0x38
   13adc:	add	r6, r6, #1
   13ae0:	cmp	r2, r6
   13ae4:	bne	13a84 <b64_decode@@Base+0x850>
   13ae8:	ldr	r7, [r7, #4]
   13aec:	cmp	r7, #0
   13af0:	bne	13a58 <b64_decode@@Base+0x824>
   13af4:	pop	{r4, r5, r6, r7, r8, pc}
   13af8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13afc:	sub	sp, sp, #12
   13b00:	mov	r5, r0
   13b04:	str	r0, [sp, #4]
   13b08:	mov	r6, r2
   13b0c:	str	r2, [sp]
   13b10:	mov	r0, r1
   13b14:	mov	r4, r1
   13b18:	ldr	r2, [pc, #344]	; 13c78 <b64_decode@@Base+0xa44>
   13b1c:	mov	r1, #0
   13b20:	bl	11044 <memset@plt>
   13b24:	subs	r3, r5, #0
   13b28:	mov	r5, #0
   13b2c:	str	r5, [r6]
   13b30:	beq	13c5c <b64_decode@@Base+0xa28>
   13b34:	mov	r7, r5
   13b38:	mov	r9, r5
   13b3c:	mov	r8, r3
   13b40:	ldr	r0, [r8, #12]
   13b44:	bl	10ffc <strlen@plt>
   13b48:	cmp	r5, r0
   13b4c:	ldrcc	r3, [sp]
   13b50:	strcc	r0, [r3]
   13b54:	mov	r0, r7
   13b58:	ldr	r1, [r8, #8]
   13b5c:	bl	136f8 <b64_decode@@Base+0x4c4>
   13b60:	ldr	r6, [r8, #56]	; 0x38
   13b64:	mov	r1, r6
   13b68:	bl	136f8 <b64_decode@@Base+0x4c4>
   13b6c:	cmp	r6, #0
   13b70:	mov	r7, r0
   13b74:	beq	13c44 <b64_decode@@Base+0xa10>
   13b78:	ldr	r5, [r8, #60]	; 0x3c
   13b7c:	add	r6, r5, r6, lsl #2
   13b80:	b	13ba4 <b64_decode@@Base+0x970>
   13b84:	mov	r0, r7
   13b88:	mov	r1, r9
   13b8c:	bl	136f8 <b64_decode@@Base+0x4c4>
   13b90:	mov	r1, r9
   13b94:	bl	136f8 <b64_decode@@Base+0x4c4>
   13b98:	mov	r7, r0
   13b9c:	cmp	r6, r5
   13ba0:	beq	13c44 <b64_decode@@Base+0xa10>
   13ba4:	ldr	fp, [r5], #4
   13ba8:	cmp	fp, #0
   13bac:	beq	13b84 <b64_decode@@Base+0x950>
   13bb0:	ldr	r3, [fp]
   13bb4:	cmp	r3, r8
   13bb8:	bne	13b84 <b64_decode@@Base+0x950>
   13bbc:	mov	r0, r7
   13bc0:	ldr	r1, [fp, #12]
   13bc4:	bl	136f8 <b64_decode@@Base+0x4c4>
   13bc8:	ldr	r1, [fp, #8]
   13bcc:	bl	136f8 <b64_decode@@Base+0x4c4>
   13bd0:	ldr	r3, [r8, #16]
   13bd4:	cmp	r3, #0
   13bd8:	mov	r7, r0
   13bdc:	beq	13b9c <b64_decode@@Base+0x968>
   13be0:	ldr	sl, [fp, #16]
   13be4:	ldr	r3, [r4, #8]
   13be8:	mov	r1, sl
   13bec:	add	r3, r3, sl
   13bf0:	str	r3, [r4, #8]
   13bf4:	bl	136f8 <b64_decode@@Base+0x4c4>
   13bf8:	cmp	sl, #0
   13bfc:	mov	r7, r0
   13c00:	beq	13b9c <b64_decode@@Base+0x968>
   13c04:	ldr	ip, [fp, #20]
   13c08:	ldrd	r2, [r4, #16]
   13c0c:	add	lr, ip, sl, lsl #3
   13c10:	ldrd	r0, [ip]
   13c14:	ldrd	sl, [r4, #24]
   13c18:	adds	r2, r2, r0
   13c1c:	adc	r3, r3, r1
   13c20:	strd	r2, [r4, #16]
   13c24:	ldrd	r0, [ip], #8
   13c28:	cmp	sl, r0
   13c2c:	sbcs	sl, fp, r1
   13c30:	strdlt	r0, [r4, #24]
   13c34:	cmp	lr, ip
   13c38:	bne	13c10 <b64_decode@@Base+0x9dc>
   13c3c:	cmp	r6, r5
   13c40:	bne	13ba4 <b64_decode@@Base+0x970>
   13c44:	ldr	r8, [r8, #4]
   13c48:	cmp	r8, #0
   13c4c:	beq	13c60 <b64_decode@@Base+0xa2c>
   13c50:	ldr	r3, [sp]
   13c54:	ldr	r5, [r3]
   13c58:	b	13b40 <b64_decode@@Base+0x90c>
   13c5c:	ldr	r7, [sp, #4]
   13c60:	ldr	r0, [sp, #4]
   13c64:	mov	r1, r4
   13c68:	bl	13a00 <b64_decode@@Base+0x7cc>
   13c6c:	mov	r0, r7
   13c70:	add	sp, sp, #12
   13c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c78:	andeq	r1, r0, r8, asr #15
   13c7c:	push	{r4, r5, r6, lr}
   13c80:	mov	r4, r0
   13c84:	ldr	r0, [pc, #172]	; 13d38 <b64_decode@@Base+0xb04>
   13c88:	add	r0, pc, r0
   13c8c:	bl	10f90 <getenv@plt>
   13c90:	subs	r3, r0, #0
   13c94:	beq	13ca0 <b64_decode@@Base+0xa6c>
   13c98:	bl	1108c <atoi@plt>
   13c9c:	bic	r3, r0, r0, asr #31
   13ca0:	ldr	r0, [pc, #148]	; 13d3c <b64_decode@@Base+0xb08>
   13ca4:	str	r3, [r4, #8]
   13ca8:	add	r0, pc, r0
   13cac:	bl	10f90 <getenv@plt>
   13cb0:	subs	r6, r0, #0
   13cb4:	beq	13d08 <b64_decode@@Base+0xad4>
   13cb8:	bl	10ffc <strlen@plt>
   13cbc:	subs	r5, r0, #0
   13cc0:	beq	13d08 <b64_decode@@Base+0xad4>
   13cc4:	sub	r3, r5, #1
   13cc8:	ldrb	r2, [r6, r3]
   13ccc:	cmp	r2, #47	; 0x2f
   13cd0:	beq	13cfc <b64_decode@@Base+0xac8>
   13cd4:	ldr	r0, [r4, #4]
   13cd8:	str	r5, [r4, #12]
   13cdc:	add	r0, r0, #2
   13ce0:	add	r0, r0, r5
   13ce4:	bl	10fa8 <malloc@plt>
   13ce8:	mov	r2, r5
   13cec:	mov	r1, r6
   13cf0:	str	r0, [r4]
   13cf4:	pop	{r4, r5, r6, lr}
   13cf8:	b	10f3c <memcpy@plt>
   13cfc:	cmp	r3, #0
   13d00:	movne	r5, r3
   13d04:	bne	13cd4 <b64_decode@@Base+0xaa0>
   13d08:	ldr	r3, [r4, #8]
   13d0c:	cmp	r3, #0
   13d10:	ldrne	r6, [pc, #40]	; 13d40 <b64_decode@@Base+0xb0c>
   13d14:	movne	r5, #1
   13d18:	addne	r6, pc, r6
   13d1c:	bne	13cd4 <b64_decode@@Base+0xaa0>
   13d20:	ldr	r0, [r4, #4]
   13d24:	str	r3, [r4, #12]
   13d28:	add	r0, r0, #2
   13d2c:	bl	10fa8 <malloc@plt>
   13d30:	str	r0, [r4]
   13d34:	pop	{r4, r5, r6, pc}
   13d38:	andeq	r2, r0, r8, lsr r6
   13d3c:	andeq	r2, r0, ip, lsr #12
   13d40:	andeq	r2, r0, r4, lsr #11
   13d44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d48:	sub	sp, sp, #6080	; 0x17c0
   13d4c:	sub	sp, sp, #44	; 0x2c
   13d50:	add	r3, sp, #72	; 0x48
   13d54:	mov	r4, r0
   13d58:	str	r0, [sp, #64]	; 0x40
   13d5c:	str	r1, [sp, #60]	; 0x3c
   13d60:	mov	r0, r3
   13d64:	ldr	r2, [pc, #1068]	; 14198 <b64_decode@@Base+0xf64>
   13d68:	mov	r1, #0
   13d6c:	str	r3, [sp, #68]	; 0x44
   13d70:	bl	11044 <memset@plt>
   13d74:	add	r3, r4, #6016	; 0x1780
   13d78:	add	r3, r3, #8
   13d7c:	add	r2, sp, #2016	; 0x7e0
   13d80:	mov	sl, #251	; 0xfb
   13d84:	add	r2, r2, #8
   13d88:	mov	fp, #0
   13d8c:	str	r3, [sp, #56]	; 0x38
   13d90:	add	r3, sp, #72	; 0x48
   13d94:	str	r2, [sp, #44]	; 0x2c
   13d98:	str	r3, [sp, #48]	; 0x30
   13d9c:	mov	r2, #0
   13da0:	mov	r3, #0
   13da4:	mov	r5, sl
   13da8:	mov	r0, fp
   13dac:	strd	r2, [sp, #24]
   13db0:	str	sl, [sp, #52]	; 0x34
   13db4:	ldr	r9, [sp, #56]	; 0x38
   13db8:	str	r5, [sp, #40]	; 0x28
   13dbc:	ldr	sl, [sp, #60]	; 0x3c
   13dc0:	ldrd	r2, [r9, #16]
   13dc4:	ldr	r4, [r9]
   13dc8:	str	r4, [sp, #4]
   13dcc:	strd	r2, [sp, #8]
   13dd0:	ldr	r3, [sp, #4]
   13dd4:	cmp	r3, #0
   13dd8:	beq	14084 <b64_decode@@Base+0xe50>
   13ddc:	cmp	fp, #0
   13de0:	bne	13f68 <b64_decode@@Base+0xd34>
   13de4:	ldr	r5, [sp, #40]	; 0x28
   13de8:	cmp	r5, #0
   13dec:	blt	14174 <b64_decode@@Base+0xf40>
   13df0:	add	ip, r5, r5, lsl #1
   13df4:	ldr	fp, [sl, ip, lsl #3]
   13df8:	add	ip, sl, ip, lsl #3
   13dfc:	cmp	fp, #0
   13e00:	bne	14168 <b64_decode@@Base+0xf34>
   13e04:	mov	r3, ip
   13e08:	ldr	r4, [sp, #4]
   13e0c:	b	13e20 <b64_decode@@Base+0xbec>
   13e10:	ldr	fp, [r3]
   13e14:	mov	ip, r3
   13e18:	cmp	fp, #0
   13e1c:	bne	14160 <b64_decode@@Base+0xf2c>
   13e20:	subs	r5, r5, #1
   13e24:	sub	r3, r3, #24
   13e28:	bcs	13e10 <b64_decode@@Base+0xbdc>
   13e2c:	ldr	sl, [sp, #52]	; 0x34
   13e30:	mov	r8, r0
   13e34:	mov	r5, r4
   13e38:	lsl	r4, sl, #1
   13e3c:	ldr	r3, [sp, #44]	; 0x2c
   13e40:	add	lr, r4, sl
   13e44:	sub	ip, r3, #1952	; 0x7a0
   13e48:	lsl	lr, lr, #3
   13e4c:	add	ip, ip, lr
   13e50:	ldrd	r0, [sp, #8]
   13e54:	add	lr, r3, lr
   13e58:	ldrd	r2, [ip, #16]
   13e5c:	ldr	r6, [lr, #-1952]	; 0xfffff860
   13e60:	adds	r0, r0, r2
   13e64:	adc	r1, r1, r3
   13e68:	mov	r2, r0
   13e6c:	mov	r3, r1
   13e70:	ldrd	r0, [ip, #8]
   13e74:	strd	r2, [ip, #16]
   13e78:	ldr	r3, [sp, #56]	; 0x38
   13e7c:	add	r5, r6, r5
   13e80:	str	r5, [lr, #-1952]	; 0xfffff860
   13e84:	orrs	lr, r0, r1
   13e88:	ldrd	r2, [r3, #8]
   13e8c:	beq	13e9c <b64_decode@@Base+0xc68>
   13e90:	cmp	r2, r0
   13e94:	sbcs	r1, r3, r1
   13e98:	bge	13eb0 <b64_decode@@Base+0xc7c>
   13e9c:	ldr	r1, [sp, #44]	; 0x2c
   13ea0:	add	r0, r4, sl
   13ea4:	sub	r1, r1, #1952	; 0x7a0
   13ea8:	add	r1, r1, r0, lsl #3
   13eac:	strd	r2, [r1, #8]
   13eb0:	add	lr, r4, sl
   13eb4:	ldr	r3, [sp, #68]	; 0x44
   13eb8:	lsl	lr, lr, #3
   13ebc:	add	ip, r3, lr
   13ec0:	ldr	r3, [sp, #64]	; 0x40
   13ec4:	add	lr, r3, lr
   13ec8:	b	13f18 <b64_decode@@Base+0xce4>
   13ecc:	ldrd	r0, [ip, #-8]
   13ed0:	ldrd	r2, [lr, #-8]
   13ed4:	ldrd	r4, [ip, #-16]
   13ed8:	adds	r6, r0, r2
   13edc:	adc	r7, r1, r3
   13ee0:	ldr	r2, [lr, #-24]	; 0xffffffe8
   13ee4:	ldr	r3, [ip, #-24]	; 0xffffffe8
   13ee8:	orrs	r1, r4, r5
   13eec:	add	r3, r3, r2
   13ef0:	str	r3, [ip, #-24]	; 0xffffffe8
   13ef4:	strd	r6, [ip, #-8]
   13ef8:	ldrd	r2, [lr, #-16]
   13efc:	beq	13f0c <b64_decode@@Base+0xcd8>
   13f00:	cmp	r2, r4
   13f04:	sbcs	r1, r3, r5
   13f08:	bge	13f10 <b64_decode@@Base+0xcdc>
   13f0c:	strd	r2, [ip, #-16]
   13f10:	sub	ip, ip, #24
   13f14:	sub	lr, lr, #24
   13f18:	subs	sl, sl, #1
   13f1c:	bpl	13ecc <b64_decode@@Base+0xc98>
   13f20:	ldr	r3, [sp, #44]	; 0x2c
   13f24:	add	r0, r8, r8, lsl #1
   13f28:	sub	r3, r3, #1952	; 0x7a0
   13f2c:	add	r3, r3, r0, lsl #3
   13f30:	ldrd	r6, [sp, #24]
   13f34:	ldrd	r4, [r3, #16]
   13f38:	ldr	r1, [sp, #68]	; 0x44
   13f3c:	ldr	r0, [sp, #64]	; 0x40
   13f40:	adds	r6, r6, r4
   13f44:	adc	r7, r7, r5
   13f48:	mov	r4, r6
   13f4c:	mov	r5, r7
   13f50:	ldr	r2, [pc, #576]	; 14198 <b64_decode@@Base+0xf64>
   13f54:	strd	r4, [r3, #16]
   13f58:	bl	10f3c <memcpy@plt>
   13f5c:	add	sp, sp, #6080	; 0x17c0
   13f60:	add	sp, sp, #44	; 0x2c
   13f64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f68:	ldr	r3, [sp, #40]	; 0x28
   13f6c:	add	ip, r3, r3, lsl #1
   13f70:	add	ip, sl, ip, lsl #3
   13f74:	ldr	lr, [sp, #4]
   13f78:	cmp	fp, lr
   13f7c:	bcc	140f4 <b64_decode@@Base+0xec0>
   13f80:	ldrd	r2, [r9, #8]
   13f84:	ldrd	r0, [ip, #8]
   13f88:	adds	r4, r2, r0
   13f8c:	adc	r5, r3, r1
   13f90:	cmp	fp, lr
   13f94:	strd	r4, [sp, #16]
   13f98:	bls	14184 <b64_decode@@Base+0xf50>
   13f9c:	ldrd	r6, [sp, #24]
   13fa0:	mov	r2, fp
   13fa4:	mov	r3, #0
   13fa8:	umull	r0, r1, lr, r6
   13fac:	mla	r1, lr, r7, r1
   13fb0:	bl	15680 <__gcov_sort_n_vals@@Base+0x534>
   13fb4:	mov	r2, r0
   13fb8:	subs	r0, r6, r2
   13fbc:	mov	r3, r1
   13fc0:	sbc	r1, r7, r3
   13fc4:	strd	r0, [sp, #24]
   13fc8:	ldr	r1, [sp, #4]
   13fcc:	mov	r0, #0
   13fd0:	sub	fp, fp, r1
   13fd4:	mov	r8, r1
   13fd8:	mov	r1, #0
   13fdc:	str	r1, [sp, #4]
   13fe0:	mov	r1, #0
   13fe4:	ldrd	r6, [sp, #8]
   13fe8:	strd	r0, [sp, #8]
   13fec:	adds	r4, r2, r6
   13ff0:	adc	r5, r3, r7
   13ff4:	ldrd	r0, [sp, #16]
   13ff8:	strd	r4, [sp, #32]
   13ffc:	bl	1394c <b64_decode@@Base+0x718>
   14000:	ldr	r3, [sp, #48]	; 0x30
   14004:	ldrd	r4, [sp, #32]
   14008:	add	r1, r0, r0, lsl #1
   1400c:	lsl	r1, r1, #3
   14010:	add	ip, r3, r1
   14014:	ldr	r3, [sp, #44]	; 0x2c
   14018:	ldrd	r6, [ip, #8]
   1401c:	add	r1, r3, r1
   14020:	ldrd	r2, [ip, #16]
   14024:	adds	r2, r2, r4
   14028:	adc	r3, r3, r5
   1402c:	strd	r2, [sp, #32]
   14030:	ldrd	r2, [sp, #16]
   14034:	cmp	r2, r6
   14038:	sbcs	lr, r3, r7
   1403c:	movlt	lr, #1
   14040:	movge	lr, #0
   14044:	orrs	r4, r6, r7
   14048:	ldr	r4, [r1, #-1952]	; 0xfffff860
   1404c:	orreq	lr, lr, #1
   14050:	add	r8, r4, r8
   14054:	ldrd	r4, [sp, #32]
   14058:	cmp	lr, #0
   1405c:	str	r8, [r1, #-1952]	; 0xfffff860
   14060:	strd	r4, [ip, #16]
   14064:	strdne	r2, [ip, #8]
   14068:	cmp	fp, #0
   1406c:	ldreq	r3, [sp, #40]	; 0x28
   14070:	subeq	r3, r3, #1
   14074:	streq	r3, [sp, #40]	; 0x28
   14078:	ldr	r3, [sp, #4]
   1407c:	cmp	r3, #0
   14080:	bne	13ddc <b64_decode@@Base+0xba8>
   14084:	ldr	r3, [sp, #52]	; 0x34
   14088:	ldr	r5, [sp, #40]	; 0x28
   1408c:	sub	r3, r3, #1
   14090:	str	r3, [sp, #52]	; 0x34
   14094:	cmn	r3, #1
   14098:	ldr	r3, [sp, #56]	; 0x38
   1409c:	sub	r3, r3, #24
   140a0:	str	r3, [sp, #56]	; 0x38
   140a4:	bne	13db4 <b64_decode@@Base+0xb80>
   140a8:	cmp	fp, #0
   140ac:	mov	r9, r5
   140b0:	subne	r9, r5, #1
   140b4:	cmp	r9, #0
   140b8:	mov	r8, r0
   140bc:	blt	13f20 <b64_decode@@Base+0xcec>
   140c0:	ldr	r2, [sp, #60]	; 0x3c
   140c4:	add	r3, r9, r9, lsl #1
   140c8:	sub	r0, r2, #24
   140cc:	add	r1, r2, r3, lsl #3
   140d0:	ldrd	r2, [sp, #24]
   140d4:	ldrd	r4, [r1, #16]
   140d8:	sub	r1, r1, #24
   140dc:	adds	r2, r2, r4
   140e0:	adc	r3, r3, r5
   140e4:	cmp	r0, r1
   140e8:	bne	140d4 <b64_decode@@Base+0xea0>
   140ec:	strd	r2, [sp, #24]
   140f0:	b	13f20 <b64_decode@@Base+0xcec>
   140f4:	ldrd	r2, [sp, #8]
   140f8:	ldrd	r6, [ip, #8]
   140fc:	ldrd	r4, [r9, #8]
   14100:	umull	r0, r1, fp, r2
   14104:	ldr	r8, [sp, #4]
   14108:	adds	r4, r4, r6
   1410c:	adc	r5, r5, r7
   14110:	mla	r1, fp, r3, r1
   14114:	mov	r2, r8
   14118:	mov	r3, #0
   1411c:	strd	r4, [sp, #16]
   14120:	bl	15680 <__gcov_sort_n_vals@@Base+0x534>
   14124:	sub	r3, r8, fp
   14128:	str	r3, [sp, #4]
   1412c:	ldrd	r2, [sp, #8]
   14130:	mov	r8, fp
   14134:	mov	fp, #0
   14138:	subs	r2, r2, r0
   1413c:	sbc	r3, r3, r1
   14140:	mov	r6, r0
   14144:	mov	r7, r1
   14148:	mov	r0, #0
   1414c:	mov	r1, #0
   14150:	strd	r2, [sp, #8]
   14154:	ldrd	r2, [sp, #24]
   14158:	strd	r0, [sp, #24]
   1415c:	b	13fec <b64_decode@@Base+0xdb8>
   14160:	str	r5, [sp, #40]	; 0x28
   14164:	str	r4, [sp, #4]
   14168:	ldrd	r2, [ip, #16]
   1416c:	strd	r2, [sp, #24]
   14170:	b	13f74 <b64_decode@@Base+0xd40>
   14174:	ldr	sl, [sp, #52]	; 0x34
   14178:	mov	r8, r0
   1417c:	ldr	r5, [sp, #4]
   14180:	b	13e38 <b64_decode@@Base+0xc04>
   14184:	mov	r0, #0
   14188:	mov	r1, #0
   1418c:	ldrd	r2, [sp, #24]
   14190:	strd	r0, [sp, #24]
   14194:	b	13fc8 <b64_decode@@Base+0xd94>
   14198:	andeq	r1, r0, r0, lsr #15
   1419c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   141a0:	ldrb	r4, [r0]
   141a4:	cmp	r4, #47	; 0x2f
   141a8:	addeq	r5, r0, #1
   141ac:	ldrbeq	r4, [r0, #1]
   141b0:	movne	r5, r0
   141b4:	cmp	r4, #0
   141b8:	beq	1420c <b64_decode@@Base+0xfd8>
   141bc:	mov	r6, r0
   141c0:	ldr	sl, [pc, #144]	; 14258 <b64_decode@@Base+0x1024>
   141c4:	mov	r8, #0
   141c8:	mov	r7, #47	; 0x2f
   141cc:	b	141dc <b64_decode@@Base+0xfa8>
   141d0:	ldrb	r4, [r5, #1]!
   141d4:	cmp	r4, #0
   141d8:	beq	1420c <b64_decode@@Base+0xfd8>
   141dc:	cmp	r4, #47	; 0x2f
   141e0:	bne	141d0 <b64_decode@@Base+0xf9c>
   141e4:	strb	r8, [r5]
   141e8:	mov	r1, #0
   141ec:	mov	r0, r6
   141f0:	bl	11068 <access@plt>
   141f4:	cmn	r0, #1
   141f8:	beq	14218 <b64_decode@@Base+0xfe4>
   141fc:	strb	r7, [r5]
   14200:	ldrb	r4, [r5, #1]!
   14204:	cmp	r4, #0
   14208:	bne	141dc <b64_decode@@Base+0xfa8>
   1420c:	mov	r9, #0
   14210:	mov	r0, r9
   14214:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14218:	mov	r1, sl
   1421c:	mov	r0, r6
   14220:	bl	1102c <mkdir@plt>
   14224:	cmn	r0, #1
   14228:	mov	r9, r0
   1422c:	bne	141fc <b64_decode@@Base+0xfc8>
   14230:	bl	11014 <__errno_location@plt>
   14234:	ldr	r3, [r0]
   14238:	cmp	r3, #17
   1423c:	beq	141fc <b64_decode@@Base+0xfc8>
   14240:	ldr	r0, [pc, #20]	; 1425c <b64_decode@@Base+0x1028>
   14244:	mov	r1, r6
   14248:	add	r0, pc, r0
   1424c:	bl	13898 <b64_decode@@Base+0x664>
   14250:	strb	r4, [r5]
   14254:	b	14210 <b64_decode@@Base+0xfdc>
   14258:	andeq	r0, r0, sp, ror #3
   1425c:	muleq	r0, r8, r0
   14260:	ldr	r3, [pc, #124]	; 142e4 <b64_decode@@Base+0x10b0>
   14264:	cmp	r1, r3
   14268:	beq	142dc <b64_decode@@Base+0x10a8>
   1426c:	cmp	r2, #0
   14270:	push	{r4, r5, lr}
   14274:	sub	sp, sp, #12
   14278:	ldreq	r2, [r0]
   1427c:	lsr	r3, r1, #24
   14280:	ldr	r0, [pc, #96]	; 142e8 <b64_decode@@Base+0x10b4>
   14284:	lsr	r5, r1, #16
   14288:	lsr	r4, r1, #8
   1428c:	strb	r1, [sp, #3]
   14290:	strb	r3, [sp]
   14294:	mov	r1, #53	; 0x35
   14298:	mov	r3, #42	; 0x2a
   1429c:	mov	lr, #54	; 0x36
   142a0:	mov	ip, #48	; 0x30
   142a4:	strb	r1, [sp, #6]
   142a8:	strb	r3, [sp, #7]
   142ac:	mov	r1, r2
   142b0:	mov	r3, sp
   142b4:	add	r2, sp, #4
   142b8:	add	r0, pc, r0
   142bc:	strb	r5, [sp, #1]
   142c0:	strb	r4, [sp, #2]
   142c4:	strb	lr, [sp, #4]
   142c8:	strb	ip, [sp, #5]
   142cc:	bl	13898 <b64_decode@@Base+0x664>
   142d0:	mov	r0, #0
   142d4:	add	sp, sp, #12
   142d8:	pop	{r4, r5, pc}
   142dc:	mov	r0, #1
   142e0:	bx	lr
   142e4:	ldrtcc	r3, [r0], -sl, lsr #10
   142e8:	andeq	r2, r0, r0, asr r0
   142ec:	ldr	r2, [r2, #16]
   142f0:	push	{r4, r5, r6, lr}
   142f4:	cmp	r2, #0
   142f8:	mov	r6, r3
   142fc:	ldr	ip, [sp, #16]
   14300:	beq	143cc <b64_decode@@Base+0x1198>
   14304:	ldr	r3, [r3, #12]
   14308:	cmp	r1, #0
   1430c:	addeq	r2, r3, #1
   14310:	streq	r2, [r6, #12]
   14314:	cmp	r3, #0
   14318:	beq	14370 <b64_decode@@Base+0x113c>
   1431c:	ldrd	r0, [ip, #16]
   14320:	ldrd	r2, [r6, #16]
   14324:	ldrd	r4, [r6, #24]
   14328:	adds	r2, r2, r0
   1432c:	adc	r3, r3, r1
   14330:	strd	r2, [r6, #16]
   14334:	ldrd	r0, [ip, #24]
   14338:	cmp	r4, r0
   1433c:	sbcs	r3, r5, r1
   14340:	blt	143f0 <b64_decode@@Base+0x11bc>
   14344:	ldrd	r2, [r6, #32]
   14348:	adds	r2, r2, r0
   1434c:	adc	r3, r3, r1
   14350:	strd	r2, [r6, #32]
   14354:	add	r1, ip, #40	; 0x28
   14358:	add	r0, r6, #40	; 0x28
   1435c:	bl	13d44 <b64_decode@@Base+0xb10>
   14360:	ldr	r3, [sp, #20]
   14364:	mov	r0, #0
   14368:	str	r3, [r6]
   1436c:	pop	{r4, r5, r6, pc}
   14370:	ldr	r1, [ip, #8]
   14374:	ldrd	r2, [r6, #16]
   14378:	str	r1, [r6, #8]
   1437c:	ldrd	r0, [ip, #16]
   14380:	ldrd	r4, [r6, #24]
   14384:	adds	r2, r2, r0
   14388:	adc	r3, r3, r1
   1438c:	strd	r2, [r6, #16]
   14390:	ldrd	r0, [ip, #24]
   14394:	cmp	r4, r0
   14398:	sbcs	r3, r5, r1
   1439c:	bge	1440c <b64_decode@@Base+0x11d8>
   143a0:	ldrd	r2, [r6, #32]
   143a4:	strd	r0, [r6, #24]
   143a8:	ldrd	r0, [ip, #24]
   143ac:	adds	r2, r2, r0
   143b0:	adc	r3, r3, r1
   143b4:	strd	r2, [r6, #32]
   143b8:	add	r1, ip, #40	; 0x28
   143bc:	ldr	r2, [pc, #92]	; 14420 <b64_decode@@Base+0x11ec>
   143c0:	add	r0, r6, #40	; 0x28
   143c4:	bl	10f3c <memcpy@plt>
   143c8:	b	14360 <b64_decode@@Base+0x112c>
   143cc:	ldr	r3, [r3, #12]
   143d0:	cmp	r3, #0
   143d4:	beq	14360 <b64_decode@@Base+0x112c>
   143d8:	mov	r1, r0
   143dc:	ldr	r0, [pc, #64]	; 14424 <b64_decode@@Base+0x11f0>
   143e0:	add	r0, pc, r0
   143e4:	bl	13898 <b64_decode@@Base+0x664>
   143e8:	mvn	r0, #0
   143ec:	pop	{r4, r5, r6, pc}
   143f0:	ldrd	r2, [r6, #32]
   143f4:	strd	r0, [r6, #24]
   143f8:	ldrd	r0, [ip, #24]
   143fc:	adds	r2, r2, r0
   14400:	adc	r3, r3, r1
   14404:	strd	r2, [r6, #32]
   14408:	b	14354 <b64_decode@@Base+0x1120>
   1440c:	ldrd	r2, [r6, #32]
   14410:	adds	r2, r2, r0
   14414:	adc	r3, r3, r1
   14418:	strd	r2, [r6, #32]
   1441c:	b	143b8 <b64_decode@@Base+0x1184>
   14420:	andeq	r1, r0, r0, lsr #15
   14424:	andeq	r1, r0, r0, ror #30
   14428:	ldr	ip, [pc, #52]	; 14464 <b64_decode@@Base+0x1230>
   1442c:	ldr	r3, [pc, #52]	; 14468 <b64_decode@@Base+0x1234>
   14430:	add	ip, pc, ip
   14434:	push	{r4, lr}
   14438:	mov	lr, #0
   1443c:	ldr	r3, [ip, r3]
   14440:	mvn	r4, #0
   14444:	mov	r2, lr
   14448:	mov	r1, lr
   1444c:	str	r4, [r3, #24]
   14450:	str	lr, [r3, #4]
   14454:	str	lr, [r3, #8]
   14458:	ldr	r0, [r3]
   1445c:	pop	{r4, lr}
   14460:	b	110a4 <fseek@plt>
   14464:	andeq	r2, r1, r8, asr #23
   14468:	andeq	r0, r0, ip, asr #1
   1446c:	push	{r4, r5, r6, r7, lr}
   14470:	sub	sp, sp, #108	; 0x6c
   14474:	mov	r4, #0
   14478:	mov	r7, r0
   1447c:	strh	r4, [sp, #2]
   14480:	str	r4, [sp, #4]
   14484:	str	r4, [sp, #8]
   14488:	bl	10ff0 <getpid@plt>
   1448c:	ldr	r3, [pc, #240]	; 14584 <b64_decode@@Base+0x1350>
   14490:	ldr	ip, [pc, #240]	; 14588 <b64_decode@@Base+0x1354>
   14494:	add	r3, pc, r3
   14498:	mvn	lr, #0
   1449c:	mov	r6, #1
   144a0:	ldr	r2, [pc, #228]	; 1458c <b64_decode@@Base+0x1358>
   144a4:	mov	r1, #66	; 0x42
   144a8:	str	r0, [sp, #12]
   144ac:	ldr	r5, [r3, ip]
   144b0:	mov	r0, r7
   144b4:	strh	r6, [sp]
   144b8:	str	r4, [r5, #4]
   144bc:	str	r4, [r5, #12]
   144c0:	str	r4, [r5, #8]
   144c4:	str	r4, [r5, #20]
   144c8:	str	lr, [r5, #16]
   144cc:	bl	10fe4 <open@plt>
   144d0:	subs	r6, r0, #0
   144d4:	movlt	r0, r4
   144d8:	blt	14558 <b64_decode@@Base+0x1324>
   144dc:	mov	r7, sp
   144e0:	mov	r4, #7
   144e4:	mov	r2, r7
   144e8:	mov	r1, r4
   144ec:	mov	r0, r6
   144f0:	bl	11038 <fcntl@plt>
   144f4:	cmp	r0, #0
   144f8:	beq	1450c <b64_decode@@Base+0x12d8>
   144fc:	bl	11014 <__errno_location@plt>
   14500:	ldr	r3, [r0]
   14504:	cmp	r3, #4
   14508:	beq	144e4 <b64_decode@@Base+0x12b0>
   1450c:	ldr	r1, [pc, #124]	; 14590 <b64_decode@@Base+0x135c>
   14510:	mov	r0, r6
   14514:	add	r1, pc, r1
   14518:	bl	10ec4 <fdopen@plt>
   1451c:	mov	r4, r0
   14520:	cmp	r4, #0
   14524:	mov	r0, r6
   14528:	str	r4, [r5]
   1452c:	beq	14560 <b64_decode@@Base+0x132c>
   14530:	add	r1, sp, #16
   14534:	bl	1594c <__libc_csu_fini@@Base+0x1c>
   14538:	cmp	r0, #0
   1453c:	blt	1456c <b64_decode@@Base+0x1338>
   14540:	mov	r4, #1
   14544:	ldr	r0, [r5]
   14548:	mov	r1, #0
   1454c:	str	r4, [r5, #24]
   14550:	bl	10ef4 <setbuf@plt>
   14554:	mov	r0, r4
   14558:	add	sp, sp, #108	; 0x6c
   1455c:	pop	{r4, r5, r6, r7, pc}
   14560:	bl	110bc <close@plt>
   14564:	mov	r0, r4
   14568:	b	14558 <b64_decode@@Base+0x1324>
   1456c:	mov	r4, #0
   14570:	ldr	r0, [r5]
   14574:	bl	11074 <fclose@plt>
   14578:	str	r4, [r5]
   1457c:	mov	r0, r4
   14580:	b	14558 <b64_decode@@Base+0x1324>
   14584:	andeq	r2, r1, r4, ror #22
   14588:	andeq	r0, r0, ip, asr #1
   1458c:			; <UNDEFINED> instruction: 0x000001b6
   14590:	andeq	r1, r0, r8, asr lr
   14594:	push	{r4, r5, r6, lr}
   14598:	mov	r4, r1
   1459c:	ldr	r5, [pc, #244]	; 14698 <b64_decode@@Base+0x1464>
   145a0:	ldr	ip, [r4, #8]
   145a4:	ldr	lr, [r4, #12]
   145a8:	ldr	r6, [r4]
   145ac:	cmp	ip, #0
   145b0:	mov	r1, r0
   145b4:	add	r5, pc, r5
   145b8:	add	r0, r6, lr
   145bc:	ble	145f8 <b64_decode@@Base+0x13c4>
   145c0:	ldrb	r3, [r1]
   145c4:	cmp	r3, #47	; 0x2f
   145c8:	addeq	r2, r1, #1
   145cc:	ldrbeq	r3, [r1, #1]
   145d0:	movne	r2, r1
   145d4:	cmp	r3, #0
   145d8:	beq	145f8 <b64_decode@@Base+0x13c4>
   145dc:	cmp	r3, #47	; 0x2f
   145e0:	moveq	r1, r2
   145e4:	ldrb	r3, [r2, #1]!
   145e8:	subeq	ip, ip, #1
   145ec:	cmp	r3, #0
   145f0:	cmpne	ip, #0
   145f4:	bne	145dc <b64_decode@@Base+0x13a8>
   145f8:	cmp	lr, #0
   145fc:	beq	14614 <b64_decode@@Base+0x13e0>
   14600:	ldrb	r3, [r1]
   14604:	cmp	r3, #47	; 0x2f
   14608:	addne	r0, r0, #1
   1460c:	movne	r3, #47	; 0x2f
   14610:	strbne	r3, [r6, lr]
   14614:	bl	10f78 <strcpy@plt>
   14618:	ldr	r0, [r4]
   1461c:	bl	1446c <b64_decode@@Base+0x1238>
   14620:	cmp	r0, #0
   14624:	beq	14630 <b64_decode@@Base+0x13fc>
   14628:	mov	r0, #0
   1462c:	pop	{r4, r5, r6, pc}
   14630:	ldr	r0, [r4]
   14634:	bl	1419c <b64_decode@@Base+0xf68>
   14638:	cmp	r0, #0
   1463c:	bne	14674 <b64_decode@@Base+0x1440>
   14640:	ldr	r0, [r4]
   14644:	bl	1446c <b64_decode@@Base+0x1238>
   14648:	cmp	r0, #0
   1464c:	bne	14628 <b64_decode@@Base+0x13f4>
   14650:	ldr	r3, [pc, #68]	; 1469c <b64_decode@@Base+0x1468>
   14654:	ldr	r1, [pc, #68]	; 146a0 <b64_decode@@Base+0x146c>
   14658:	ldr	r2, [r4]
   1465c:	ldr	r3, [r5, r3]
   14660:	add	r1, pc, r1
   14664:	ldr	r0, [r3]
   14668:	bl	11008 <fprintf@plt>
   1466c:	mvn	r0, #0
   14670:	pop	{r4, r5, r6, pc}
   14674:	ldr	r3, [pc, #32]	; 1469c <b64_decode@@Base+0x1468>
   14678:	ldr	r1, [pc, #36]	; 146a4 <b64_decode@@Base+0x1470>
   1467c:	ldr	r2, [r4]
   14680:	ldr	r3, [r5, r3]
   14684:	add	r1, pc, r1
   14688:	ldr	r0, [r3]
   1468c:	bl	11008 <fprintf@plt>
   14690:	mvn	r0, #0
   14694:	pop	{r4, r5, r6, pc}
   14698:	andeq	r2, r1, r4, asr #20
   1469c:	strheq	r0, [r0], -ip
   146a0:	andeq	r1, r0, r4, lsr #26
   146a4:	andeq	r1, r0, ip, ror #25
   146a8:	ldr	r3, [pc, #96]	; 14710 <b64_decode@@Base+0x14dc>
   146ac:	ldr	r2, [pc, #96]	; 14714 <b64_decode@@Base+0x14e0>
   146b0:	add	r3, pc, r3
   146b4:	push	{r4, lr}
   146b8:	ldr	r4, [r3, r2]
   146bc:	ldr	r0, [r4]
   146c0:	cmp	r0, #0
   146c4:	beq	146e4 <b64_decode@@Base+0x14b0>
   146c8:	ldr	r3, [r4, #8]
   146cc:	cmp	r3, #0
   146d0:	bne	146f4 <b64_decode@@Base+0x14c0>
   146d4:	bl	11074 <fclose@plt>
   146d8:	mov	r3, #0
   146dc:	str	r3, [r4]
   146e0:	str	r3, [r4, #12]
   146e4:	mov	r3, #0
   146e8:	str	r3, [r4, #24]
   146ec:	ldr	r0, [r4, #20]
   146f0:	pop	{r4, pc}
   146f4:	ldr	r2, [r4, #24]
   146f8:	cmp	r2, #0
   146fc:	bge	146d4 <b64_decode@@Base+0x14a0>
   14700:	mov	r0, r3
   14704:	bl	13724 <b64_decode@@Base+0x4f0>
   14708:	ldr	r0, [r4]
   1470c:	b	146d4 <b64_decode@@Base+0x14a0>
   14710:	andeq	r2, r1, r8, asr #18
   14714:	andeq	r0, r0, ip, asr #1
   14718:	push	{r4, lr}
   1471c:	mov	r4, r0
   14720:	mov	r0, #1
   14724:	bl	13780 <b64_decode@@Base+0x54c>
   14728:	str	r4, [r0]
   1472c:	pop	{r4, pc}
   14730:	push	{r4, r5, r6, lr}
   14734:	mov	r5, r0
   14738:	mov	r0, #2
   1473c:	mov	r4, r1
   14740:	bl	13780 <b64_decode@@Base+0x54c>
   14744:	str	r5, [r0]
   14748:	str	r4, [r0, #4]
   1474c:	pop	{r4, r5, r6, pc}
   14750:	push	{r4, r5, r6, lr}
   14754:	mov	r5, r0
   14758:	mov	r0, #2
   1475c:	mov	r4, r1
   14760:	bl	13780 <b64_decode@@Base+0x54c>
   14764:	str	r5, [r0]
   14768:	str	r4, [r0, #4]
   1476c:	pop	{r4, r5, r6, pc}
   14770:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14774:	sub	sp, sp, #32
   14778:	mov	r7, sp
   1477c:	mov	r5, r1
   14780:	mov	r6, sp
   14784:	add	r2, sp, #32
   14788:	mov	r3, #0
   1478c:	str	r3, [r6], #4
   14790:	cmp	r2, r6
   14794:	bne	1478c <b64_decode@@Base+0x1558>
   14798:	mov	r8, #0
   1479c:	mov	r3, r8
   147a0:	mov	r4, r5
   147a4:	mov	r1, r5
   147a8:	mov	r9, #1
   147ac:	lsr	r2, r3, #5
   147b0:	ldr	lr, [r1, #40]	; 0x28
   147b4:	add	ip, sp, #32
   147b8:	cmp	lr, #0
   147bc:	add	r2, ip, r2, lsl #2
   147c0:	and	sl, r3, #31
   147c4:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   147c8:	add	r3, r3, #1
   147cc:	orrne	ip, ip, r9, lsl sl
   147d0:	addne	r8, r8, #1
   147d4:	strne	ip, [r2, #-32]	; 0xffffffe0
   147d8:	cmp	r3, #252	; 0xfc
   147dc:	add	r1, r1, #24
   147e0:	bne	147ac <b64_decode@@Base+0x1578>
   147e4:	add	r8, r8, r8, lsl #2
   147e8:	add	r1, r8, #17
   147ec:	bl	14750 <b64_decode@@Base+0x151c>
   147f0:	ldr	r0, [r5]
   147f4:	bl	14718 <b64_decode@@Base+0x14e4>
   147f8:	ldr	r0, [r5, #8]
   147fc:	bl	14718 <b64_decode@@Base+0x14e4>
   14800:	ldr	r0, [r5, #12]
   14804:	bl	14718 <b64_decode@@Base+0x14e4>
   14808:	ldrd	r0, [r5, #16]
   1480c:	bl	14730 <b64_decode@@Base+0x14fc>
   14810:	ldrd	r0, [r5, #24]
   14814:	bl	14730 <b64_decode@@Base+0x14fc>
   14818:	ldrd	r0, [r5, #32]
   1481c:	bl	14730 <b64_decode@@Base+0x14fc>
   14820:	ldr	r0, [r7], #4
   14824:	bl	14718 <b64_decode@@Base+0x14e4>
   14828:	cmp	r7, r6
   1482c:	bne	14820 <b64_decode@@Base+0x15ec>
   14830:	add	r5, r5, #6016	; 0x1780
   14834:	add	r5, r5, #32
   14838:	b	14848 <b64_decode@@Base+0x1614>
   1483c:	add	r4, r4, #24
   14840:	cmp	r4, r5
   14844:	beq	14874 <b64_decode@@Base+0x1640>
   14848:	ldr	r0, [r4, #40]	; 0x28
   1484c:	cmp	r0, #0
   14850:	beq	1483c <b64_decode@@Base+0x1608>
   14854:	bl	14718 <b64_decode@@Base+0x14e4>
   14858:	ldrd	r0, [r4, #48]	; 0x30
   1485c:	bl	14730 <b64_decode@@Base+0x14fc>
   14860:	add	r4, r4, #24
   14864:	ldrd	r0, [r4, #32]
   14868:	bl	14730 <b64_decode@@Base+0x14fc>
   1486c:	cmp	r4, r5
   14870:	bne	14848 <b64_decode@@Base+0x1614>
   14874:	add	sp, sp, #32
   14878:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1487c:	push	{r4, lr}
   14880:	mov	r0, #1
   14884:	bl	137dc <b64_decode@@Base+0x5a8>
   14888:	subs	r3, r0, #0
   1488c:	popeq	{r4, pc}
   14890:	ldr	r0, [r3]
   14894:	pop	{r4, lr}
   14898:	b	136f4 <b64_decode@@Base+0x4c0>
   1489c:	push	{r4, r5, r6, lr}
   148a0:	mov	r0, #2
   148a4:	bl	137dc <b64_decode@@Base+0x5a8>
   148a8:	subs	r3, r0, #0
   148ac:	beq	148dc <b64_decode@@Base+0x16a8>
   148b0:	ldr	r0, [r3]
   148b4:	bl	136f4 <b64_decode@@Base+0x4c0>
   148b8:	mov	r5, #0
   148bc:	mov	r4, r0
   148c0:	ldr	r0, [r3, #4]
   148c4:	bl	136f4 <b64_decode@@Base+0x4c0>
   148c8:	mov	r2, #0
   148cc:	mov	r3, r0
   148d0:	orr	r1, r3, r5
   148d4:	orr	r0, r2, r4
   148d8:	pop	{r4, r5, r6, pc}
   148dc:	mov	r0, #0
   148e0:	mov	r1, #0
   148e4:	pop	{r4, r5, r6, pc}
   148e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148ec:	sub	sp, sp, #28
   148f0:	mov	r4, #0
   148f4:	str	r1, [sp, #8]
   148f8:	str	r3, [sp, #12]
   148fc:	add	r3, r1, #56	; 0x38
   14900:	add	r1, r1, #16
   14904:	str	r0, [sp, #16]
   14908:	str	r2, [sp, #20]
   1490c:	ldr	r2, [r3, #-4]!
   14910:	cmp	r2, #0
   14914:	addne	r4, r4, #1
   14918:	cmp	r3, r1
   1491c:	bne	1490c <b64_decode@@Base+0x16d8>
   14920:	add	r4, r4, #4
   14924:	lsl	r4, r4, #3
   14928:	mov	r0, r4
   1492c:	bl	10fa8 <malloc@plt>
   14930:	subs	r8, r0, #0
   14934:	beq	149f8 <b64_decode@@Base+0x17c4>
   14938:	ldr	r3, [sp, #12]
   1493c:	mov	r4, #0
   14940:	str	r3, [r8, #4]
   14944:	str	r4, [r8]
   14948:	bl	1487c <b64_decode@@Base+0x1648>
   1494c:	ldr	r3, [sp, #8]
   14950:	ldr	r5, [pc, #272]	; 14a68 <b64_decode@@Base+0x1834>
   14954:	add	r6, r3, #12
   14958:	mov	r7, r4
   1495c:	str	r0, [r8, #12]
   14960:	bl	1487c <b64_decode@@Base+0x1648>
   14964:	str	r0, [r8, #16]
   14968:	bl	1487c <b64_decode@@Base+0x1648>
   1496c:	str	r0, [r8, #20]
   14970:	ldr	r3, [r6, #4]!
   14974:	cmp	r3, #0
   14978:	beq	149d4 <b64_decode@@Base+0x17a0>
   1497c:	bl	1487c <b64_decode@@Base+0x1648>
   14980:	cmp	r5, r0
   14984:	bne	14a4c <b64_decode@@Base+0x1818>
   14988:	bl	1487c <b64_decode@@Base+0x1648>
   1498c:	lsr	r9, r0, #1
   14990:	lsl	fp, r9, #3
   14994:	mov	r0, fp
   14998:	bl	10fa8 <malloc@plt>
   1499c:	subs	sl, r0, #0
   149a0:	beq	14a5c <b64_decode@@Base+0x1828>
   149a4:	add	r3, r8, r7, lsl #3
   149a8:	cmp	r9, #0
   149ac:	str	r9, [r3, #24]
   149b0:	str	sl, [r3, #28]
   149b4:	sub	r9, r9, #1
   149b8:	beq	149d0 <b64_decode@@Base+0x179c>
   149bc:	bl	1489c <b64_decode@@Base+0x1668>
   149c0:	sub	r9, r9, #1
   149c4:	cmn	r9, #1
   149c8:	strd	r0, [sl], #8
   149cc:	bne	149bc <b64_decode@@Base+0x1788>
   149d0:	add	r7, r7, #1
   149d4:	add	r4, r4, #1
   149d8:	cmp	r4, #10
   149dc:	add	r5, r5, #131072	; 0x20000
   149e0:	bne	14970 <b64_decode@@Base+0x173c>
   149e4:	ldr	r3, [sp, #20]
   149e8:	mov	r0, r8
   149ec:	str	r8, [r3]
   149f0:	add	sp, sp, #28
   149f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149f8:	mvn	r5, #0
   149fc:	cmp	r4, #0
   14a00:	beq	14a3c <b64_decode@@Base+0x1808>
   14a04:	ldr	r3, [pc, #96]	; 14a6c <b64_decode@@Base+0x1838>
   14a08:	add	r3, pc, r3
   14a0c:	ldr	r0, [pc, #92]	; 14a70 <b64_decode@@Base+0x183c>
   14a10:	ldr	r2, [sp, #12]
   14a14:	ldr	r1, [sp, #16]
   14a18:	str	r4, [sp]
   14a1c:	add	r0, pc, r0
   14a20:	bl	13898 <b64_decode@@Base+0x664>
   14a24:	mov	r2, r5
   14a28:	mov	r1, r8
   14a2c:	ldr	r0, [sp, #8]
   14a30:	add	sp, sp, #28
   14a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a38:	b	138e0 <b64_decode@@Base+0x6ac>
   14a3c:	ldr	r3, [pc, #48]	; 14a74 <b64_decode@@Base+0x1840>
   14a40:	mov	r4, r5
   14a44:	add	r3, pc, r3
   14a48:	b	14a0c <b64_decode@@Base+0x17d8>
   14a4c:	ldr	r3, [pc, #36]	; 14a78 <b64_decode@@Base+0x1844>
   14a50:	mov	r5, r4
   14a54:	add	r3, pc, r3
   14a58:	b	14a0c <b64_decode@@Base+0x17d8>
   14a5c:	mov	r5, r4
   14a60:	mov	r4, fp
   14a64:	b	149fc <b64_decode@@Base+0x17c8>
   14a68:			; <UNDEFINED> instruction: 0x01a10000
   14a6c:	muleq	r0, r8, r9
   14a70:	andeq	r1, r0, r8, lsr #19
   14a74:	andeq	r1, r0, ip, ror #18
   14a78:	andeq	r1, r0, ip, asr r9
   14a7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a80:	sub	sp, sp, #44	; 0x2c
   14a84:	mov	r9, r0
   14a88:	bl	1487c <b64_decode@@Base+0x1648>
   14a8c:	mov	r7, #0
   14a90:	add	sl, sp, #8
   14a94:	mov	r4, sl
   14a98:	add	r5, sp, #40	; 0x28
   14a9c:	str	r0, [r9]
   14aa0:	bl	1487c <b64_decode@@Base+0x1648>
   14aa4:	str	r0, [r9, #8]
   14aa8:	bl	1487c <b64_decode@@Base+0x1648>
   14aac:	str	r0, [r9, #12]
   14ab0:	bl	1489c <b64_decode@@Base+0x1668>
   14ab4:	strd	r0, [r9, #16]
   14ab8:	bl	1489c <b64_decode@@Base+0x1668>
   14abc:	strd	r0, [r9, #24]
   14ac0:	bl	1489c <b64_decode@@Base+0x1668>
   14ac4:	ldr	r2, [pc, #244]	; 14bc0 <b64_decode@@Base+0x198c>
   14ac8:	strd	r0, [r9, #32]
   14acc:	add	r0, r9, #40	; 0x28
   14ad0:	mov	r1, r7
   14ad4:	bl	11044 <memset@plt>
   14ad8:	bl	1487c <b64_decode@@Base+0x1648>
   14adc:	str	r0, [r4], #4
   14ae0:	bl	15764 <__gcov_sort_n_vals@@Base+0x618>
   14ae4:	cmp	r5, r4
   14ae8:	add	r7, r7, r0
   14aec:	bne	14ad8 <b64_decode@@Base+0x18a4>
   14af0:	cmp	r7, #0
   14af4:	sub	r7, r7, #1
   14af8:	beq	14bac <b64_decode@@Base+0x1978>
   14afc:	ldr	r8, [pc, #192]	; 14bc4 <b64_decode@@Base+0x1990>
   14b00:	mov	r4, #0
   14b04:	ldr	r3, [pc, #188]	; 14bc8 <b64_decode@@Base+0x1994>
   14b08:	add	r8, pc, r8
   14b0c:	mov	r5, r4
   14b10:	mov	r6, r4
   14b14:	add	r3, pc, r3
   14b18:	str	r3, [sp, #4]
   14b1c:	cmp	r4, #0
   14b20:	addeq	r6, sl, r5, lsl #2
   14b24:	beq	14b30 <b64_decode@@Base+0x18fc>
   14b28:	b	14b58 <b64_decode@@Base+0x1924>
   14b2c:	mov	r5, r3
   14b30:	cmp	r5, #7
   14b34:	bls	14b40 <b64_decode@@Base+0x190c>
   14b38:	mov	r0, r8
   14b3c:	bl	13898 <b64_decode@@Base+0x664>
   14b40:	ldr	r4, [r6], #4
   14b44:	add	r3, r5, #1
   14b48:	cmp	r4, #0
   14b4c:	beq	14b2c <b64_decode@@Base+0x18f8>
   14b50:	lsl	r6, r5, #5
   14b54:	mov	r5, r3
   14b58:	tst	r4, #1
   14b5c:	bne	14b70 <b64_decode@@Base+0x193c>
   14b60:	lsr	r4, r4, #1
   14b64:	tst	r4, #1
   14b68:	add	r6, r6, #1
   14b6c:	beq	14b60 <b64_decode@@Base+0x192c>
   14b70:	cmp	r6, #251	; 0xfb
   14b74:	bhi	14bb4 <b64_decode@@Base+0x1980>
   14b78:	bl	1487c <b64_decode@@Base+0x1648>
   14b7c:	add	r3, r6, r6, lsl #1
   14b80:	sub	r7, r7, #1
   14b84:	add	fp, r9, r3, lsl #3
   14b88:	lsr	r4, r4, #1
   14b8c:	add	r6, r6, #1
   14b90:	str	r0, [fp, #40]	; 0x28
   14b94:	bl	1489c <b64_decode@@Base+0x1668>
   14b98:	strd	r0, [fp, #48]	; 0x30
   14b9c:	bl	1489c <b64_decode@@Base+0x1668>
   14ba0:	cmn	r7, #1
   14ba4:	strd	r0, [fp, #56]	; 0x38
   14ba8:	bne	14b1c <b64_decode@@Base+0x18e8>
   14bac:	add	sp, sp, #44	; 0x2c
   14bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bb4:	ldr	r0, [sp, #4]
   14bb8:	bl	13898 <b64_decode@@Base+0x664>
   14bbc:	b	14b78 <b64_decode@@Base+0x1944>
   14bc0:	andeq	r1, r0, r0, lsr #15
   14bc4:	andeq	r1, r0, ip, lsl r9
   14bc8:	ldrdeq	r1, [r0], -r4
   14bcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bd0:	sub	sp, sp, #6080	; 0x17c0
   14bd4:	sub	sp, sp, #28
   14bd8:	mov	r4, r1
   14bdc:	stmib	sp, {r2, r3}
   14be0:	add	r3, sp, #6144	; 0x1800
   14be4:	mov	sl, r0
   14be8:	ldr	r7, [r3]
   14bec:	add	r3, sp, #6144	; 0x1800
   14bf0:	add	r3, r3, #4
   14bf4:	ldr	r6, [r3]
   14bf8:	bl	1487c <b64_decode@@Base+0x1648>
   14bfc:	add	r3, r4, #12
   14c00:	mov	r2, sl
   14c04:	str	r3, [sp, #12]
   14c08:	mov	r1, r0
   14c0c:	mov	r0, r3
   14c10:	bl	14260 <b64_decode@@Base+0x102c>
   14c14:	cmp	r0, #0
   14c18:	beq	14e98 <b64_decode@@Base+0x1c64>
   14c1c:	bl	1487c <b64_decode@@Base+0x1648>
   14c20:	ldr	r3, [r4, #8]
   14c24:	cmp	r0, r3
   14c28:	beq	14c3c <b64_decode@@Base+0x1a08>
   14c2c:	mov	r0, #0
   14c30:	add	sp, sp, #6080	; 0x17c0
   14c34:	add	sp, sp, #28
   14c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c3c:	ldr	fp, [pc, #628]	; 14eb8 <b64_decode@@Base+0x1c84>
   14c40:	add	r9, sp, #2000	; 0x7d0
   14c44:	add	r5, sp, #16
   14c48:	add	fp, pc, fp
   14c4c:	add	r9, r9, #8
   14c50:	bl	136a4 <b64_decode@@Base+0x470>
   14c54:	str	r0, [r6]
   14c58:	bl	1487c <b64_decode@@Base+0x1648>
   14c5c:	cmp	r0, #-1560281088	; 0xa3000000
   14c60:	bne	14d04 <b64_decode@@Base+0x1ad0>
   14c64:	bl	1487c <b64_decode@@Base+0x1648>
   14c68:	mov	r0, r5
   14c6c:	bl	14a7c <b64_decode@@Base+0x1848>
   14c70:	bl	136c8 <b64_decode@@Base+0x494>
   14c74:	subs	r8, r0, #0
   14c78:	bne	14e38 <b64_decode@@Base+0x1c04>
   14c7c:	ldr	r3, [r7]
   14c80:	cmp	r3, #0
   14c84:	bne	14cd0 <b64_decode@@Base+0x1a9c>
   14c88:	add	r2, sp, #6144	; 0x1800
   14c8c:	add	r2, r2, #8
   14c90:	ldr	r3, [r9, #-1992]	; 0xfffff838
   14c94:	ldr	r2, [r2]
   14c98:	cmp	r3, r2
   14c9c:	bne	14c50 <b64_decode@@Base+0x1a1c>
   14ca0:	ldr	r3, [sp, #8]
   14ca4:	ldr	ip, [r9, #-1984]	; 0xfffff840
   14ca8:	ldr	r2, [pc, #524]	; 14ebc <b64_decode@@Base+0x1c88>
   14cac:	ldr	r3, [r3, #8]
   14cb0:	mov	r1, r5
   14cb4:	cmp	ip, r3
   14cb8:	ldr	r0, [sp, #4]
   14cbc:	bne	14c50 <b64_decode@@Base+0x1a1c>
   14cc0:	bl	10f3c <memcpy@plt>
   14cc4:	ldr	r3, [r6]
   14cc8:	str	r3, [r7]
   14ccc:	b	14c50 <b64_decode@@Base+0x1a1c>
   14cd0:	ldr	r0, [pc, #488]	; 14ec0 <b64_decode@@Base+0x1c8c>
   14cd4:	bl	10fa8 <malloc@plt>
   14cd8:	ldr	r2, [pc, #476]	; 14ebc <b64_decode@@Base+0x1c88>
   14cdc:	mov	r1, r5
   14ce0:	mov	r3, r0
   14ce4:	str	r0, [fp]
   14ce8:	add	r0, r0, #8
   14cec:	str	r3, [sp]
   14cf0:	bl	10f3c <memcpy@plt>
   14cf4:	ldr	r3, [sp]
   14cf8:	str	r8, [r3]
   14cfc:	ldr	fp, [fp]
   14d00:	b	14c50 <b64_decode@@Base+0x1a1c>
   14d04:	ldr	r5, [r4, #56]	; 0x38
   14d08:	cmp	r5, #0
   14d0c:	beq	14ea0 <b64_decode@@Base+0x1c6c>
   14d10:	ldr	r3, [r4, #60]	; 0x3c
   14d14:	cmp	r0, #16777216	; 0x1000000
   14d18:	ldr	r8, [r3]
   14d1c:	bne	14e68 <b64_decode@@Base+0x1c34>
   14d20:	ldr	r6, [pc, #412]	; 14ec4 <b64_decode@@Base+0x1c90>
   14d24:	mov	r5, #0
   14d28:	add	r6, pc, r6
   14d2c:	add	r6, r6, #4
   14d30:	b	14d74 <b64_decode@@Base+0x1b40>
   14d34:	mov	r2, r6
   14d38:	mov	r3, r5
   14d3c:	mov	r1, r4
   14d40:	mov	r0, sl
   14d44:	bl	148e8 <b64_decode@@Base+0x16b4>
   14d48:	subs	r6, r0, #0
   14d4c:	beq	14e6c <b64_decode@@Base+0x1c38>
   14d50:	bl	1487c <b64_decode@@Base+0x1648>
   14d54:	ldr	r3, [r4, #56]	; 0x38
   14d58:	add	r5, r5, #1
   14d5c:	cmp	r3, r5
   14d60:	beq	14ea0 <b64_decode@@Base+0x1c6c>
   14d64:	ldr	r3, [r4, #60]	; 0x3c
   14d68:	cmp	r0, #16777216	; 0x1000000
   14d6c:	ldr	r8, [r3, r5, lsl #2]
   14d70:	bne	14e6c <b64_decode@@Base+0x1c38>
   14d74:	bl	1487c <b64_decode@@Base+0x1648>
   14d78:	cmp	r0, #0
   14d7c:	beq	14d50 <b64_decode@@Base+0x1b1c>
   14d80:	cmp	r0, #3
   14d84:	bne	14e6c <b64_decode@@Base+0x1c38>
   14d88:	cmp	r8, #0
   14d8c:	beq	14d34 <b64_decode@@Base+0x1b00>
   14d90:	ldr	r3, [r8]
   14d94:	cmp	r4, r3
   14d98:	bne	14d34 <b64_decode@@Base+0x1b00>
   14d9c:	bl	1487c <b64_decode@@Base+0x1648>
   14da0:	ldr	r3, [r8, #4]
   14da4:	cmp	r0, r3
   14da8:	bne	14e6c <b64_decode@@Base+0x1c38>
   14dac:	bl	1487c <b64_decode@@Base+0x1648>
   14db0:	ldr	r3, [r8, #8]
   14db4:	cmp	r0, r3
   14db8:	bne	14e6c <b64_decode@@Base+0x1c38>
   14dbc:	bl	1487c <b64_decode@@Base+0x1648>
   14dc0:	ldr	r3, [r8, #12]
   14dc4:	cmp	r0, r3
   14dc8:	bne	14e6c <b64_decode@@Base+0x1c38>
   14dcc:	ldr	r7, [pc, #244]	; 14ec8 <b64_decode@@Base+0x1c94>
   14dd0:	ldr	fp, [sp, #12]
   14dd4:	add	r8, r8, #16
   14dd8:	ldr	r9, [fp, #4]!
   14ddc:	cmp	r9, #0
   14de0:	beq	14e18 <b64_decode@@Base+0x1be4>
   14de4:	bl	1487c <b64_decode@@Base+0x1648>
   14de8:	str	r0, [sp]
   14dec:	bl	1487c <b64_decode@@Base+0x1648>
   14df0:	ldr	r3, [sp]
   14df4:	cmp	r3, r7
   14df8:	bne	14e6c <b64_decode@@Base+0x1c38>
   14dfc:	ldr	r3, [r8]
   14e00:	mov	r1, r3
   14e04:	cmp	r0, r3, lsl #1
   14e08:	bne	14e6c <b64_decode@@Base+0x1c38>
   14e0c:	ldr	r0, [r8, #4]
   14e10:	blx	r9
   14e14:	add	r8, r8, #8
   14e18:	ldr	r3, [pc, #172]	; 14ecc <b64_decode@@Base+0x1c98>
   14e1c:	add	r7, r7, #131072	; 0x20000
   14e20:	cmp	r7, r3
   14e24:	bne	14dd8 <b64_decode@@Base+0x1ba4>
   14e28:	bl	136c8 <b64_decode@@Base+0x494>
   14e2c:	cmp	r0, #0
   14e30:	beq	14d50 <b64_decode@@Base+0x1b1c>
   14e34:	mov	r8, r0
   14e38:	cmp	r8, #0
   14e3c:	blt	14eac <b64_decode@@Base+0x1c78>
   14e40:	ldr	r2, [pc, #136]	; 14ed0 <b64_decode@@Base+0x1c9c>
   14e44:	add	r2, pc, r2
   14e48:	ldr	r0, [pc, #132]	; 14ed4 <b64_decode@@Base+0x1ca0>
   14e4c:	mov	r1, sl
   14e50:	add	r0, pc, r0
   14e54:	bl	13898 <b64_decode@@Base+0x664>
   14e58:	mvn	r0, #0
   14e5c:	add	sp, sp, #6080	; 0x17c0
   14e60:	add	sp, sp, #28
   14e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e68:	mov	r5, #0
   14e6c:	ldr	r2, [pc, #100]	; 14ed8 <b64_decode@@Base+0x1ca4>
   14e70:	ldr	r0, [pc, #100]	; 14edc <b64_decode@@Base+0x1ca8>
   14e74:	mov	r3, r5
   14e78:	mov	r1, sl
   14e7c:	add	r2, pc, r2
   14e80:	add	r0, pc, r0
   14e84:	bl	13898 <b64_decode@@Base+0x664>
   14e88:	mvn	r0, #0
   14e8c:	add	sp, sp, #6080	; 0x17c0
   14e90:	add	sp, sp, #28
   14e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e98:	mvn	r0, #0
   14e9c:	b	14c30 <b64_decode@@Base+0x19fc>
   14ea0:	cmp	r0, #0
   14ea4:	beq	14c2c <b64_decode@@Base+0x19f8>
   14ea8:	b	14e6c <b64_decode@@Base+0x1c38>
   14eac:	ldr	r2, [pc, #44]	; 14ee0 <b64_decode@@Base+0x1cac>
   14eb0:	add	r2, pc, r2
   14eb4:	b	14e48 <b64_decode@@Base+0x1c14>
   14eb8:	andeq	r2, r1, r0, asr #20
   14ebc:	andeq	r1, r0, r8, asr #15
   14ec0:	ldrdeq	r1, [r0], -r0
   14ec4:	andeq	r2, r1, r0, ror #18
   14ec8:			; <UNDEFINED> instruction: 0x01a10000
   14ecc:			; <UNDEFINED> instruction: 0x01b50000
   14ed0:	andeq	r1, r0, ip, lsr #12
   14ed4:	andeq	r1, r0, ip, asr r6
   14ed8:	strdeq	r1, [r0], -ip
   14edc:	andeq	r1, r0, r4, lsl #12
   14ee0:			; <UNDEFINED> instruction: 0x000015b4
   14ee4:	ldr	r3, [pc, #68]	; 14f30 <b64_decode@@Base+0x1cfc>
   14ee8:	ldr	r2, [pc, #68]	; 14f34 <b64_decode@@Base+0x1d00>
   14eec:	add	r3, pc, r3
   14ef0:	push	{r4, r5, r6, lr}
   14ef4:	mov	r5, r0
   14ef8:	ldr	r4, [r3, r2]
   14efc:	ldr	r0, [r4, #8]
   14f00:	cmp	r0, #0
   14f04:	beq	14f0c <b64_decode@@Base+0x1cd8>
   14f08:	bl	13724 <b64_decode@@Base+0x4f0>
   14f0c:	lsl	r1, r5, #2
   14f10:	mov	r2, #0
   14f14:	ldr	r0, [r4]
   14f18:	bl	110a4 <fseek@plt>
   14f1c:	ldr	r0, [r4]
   14f20:	bl	10f60 <ftell@plt>
   14f24:	asr	r0, r0, #2
   14f28:	str	r0, [r4, #4]
   14f2c:	pop	{r4, r5, r6, pc}
   14f30:	andeq	r2, r1, ip, lsl #2
   14f34:	andeq	r0, r0, ip, asr #1
   14f38:	cmp	r2, #0
   14f3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f40:	mov	r9, r0
   14f44:	sub	sp, sp, #20
   14f48:	mov	r5, r1
   14f4c:	mov	r4, r3
   14f50:	beq	15108 <b64_decode@@Base+0x1ed4>
   14f54:	cmp	r4, #0
   14f58:	bne	15124 <b64_decode@@Base+0x1ef0>
   14f5c:	mov	r1, r5
   14f60:	ldr	r5, [pc, #456]	; 15130 <b64_decode@@Base+0x1efc>
   14f64:	mov	r0, #-1560281088	; 0xa3000000
   14f68:	add	r5, pc, r5
   14f6c:	bl	14770 <b64_decode@@Base+0x153c>
   14f70:	ldr	r4, [r5]
   14f74:	cmp	r4, #0
   14f78:	movne	r6, #-1560281088	; 0xa3000000
   14f7c:	beq	14fa8 <b64_decode@@Base+0x1d74>
   14f80:	add	r1, r4, #8
   14f84:	mov	r0, r6
   14f88:	bl	14770 <b64_decode@@Base+0x153c>
   14f8c:	ldr	r3, [r5]
   14f90:	mov	r0, r3
   14f94:	ldr	r4, [r3]
   14f98:	bl	10f24 <free@plt>
   14f9c:	cmp	r4, #0
   14fa0:	str	r4, [r5]
   14fa4:	bne	14f80 <b64_decode@@Base+0x1d4c>
   14fa8:	ldr	r3, [r9, #56]	; 0x38
   14fac:	cmp	r3, #0
   14fb0:	beq	150ec <b64_decode@@Base+0x1eb8>
   14fb4:	ldr	r3, [pc, #376]	; 15134 <b64_decode@@Base+0x1f00>
   14fb8:	ldr	r8, [pc, #376]	; 15138 <b64_decode@@Base+0x1f04>
   14fbc:	add	r3, pc, r3
   14fc0:	str	r3, [sp, #4]
   14fc4:	ldr	r3, [pc, #368]	; 1513c <b64_decode@@Base+0x1f08>
   14fc8:	mov	r7, #0
   14fcc:	add	r3, pc, r3
   14fd0:	str	r3, [sp, #12]
   14fd4:	b	15010 <b64_decode@@Base+0x1ddc>
   14fd8:	ldr	r3, [r9, #60]	; 0x3c
   14fdc:	ldr	r4, [r3, r7, lsl #2]
   14fe0:	cmp	r4, #0
   14fe4:	beq	14ff4 <b64_decode@@Base+0x1dc0>
   14fe8:	ldr	r3, [r4]
   14fec:	cmp	r9, r3
   14ff0:	beq	150fc <b64_decode@@Base+0x1ec8>
   14ff4:	mov	r1, #0
   14ff8:	mov	r0, #16777216	; 0x1000000
   14ffc:	bl	14750 <b64_decode@@Base+0x151c>
   15000:	ldr	r3, [r9, #56]	; 0x38
   15004:	add	r7, r7, #1
   15008:	cmp	r3, r7
   1500c:	beq	150ec <b64_decode@@Base+0x1eb8>
   15010:	ldr	r3, [sp, #4]
   15014:	ldr	r4, [r3, #4]
   15018:	cmp	r4, #0
   1501c:	beq	14fd8 <b64_decode@@Base+0x1da4>
   15020:	ldr	r3, [r4, #4]
   15024:	cmp	r3, r7
   15028:	moveq	r3, #1
   1502c:	addeq	r4, r4, #8
   15030:	streq	r3, [sp, #8]
   15034:	bne	14fd8 <b64_decode@@Base+0x1da4>
   15038:	mov	r1, #3
   1503c:	mov	r0, #16777216	; 0x1000000
   15040:	bl	14750 <b64_decode@@Base+0x151c>
   15044:	ldr	r0, [r4, #4]
   15048:	bl	14718 <b64_decode@@Base+0x14e4>
   1504c:	ldr	r0, [r4, #8]
   15050:	bl	14718 <b64_decode@@Base+0x14e4>
   15054:	ldr	r0, [r4, #12]
   15058:	bl	14718 <b64_decode@@Base+0x14e4>
   1505c:	ldr	r5, [pc, #220]	; 15140 <b64_decode@@Base+0x1f0c>
   15060:	add	r4, r4, #16
   15064:	add	r6, r9, #12
   15068:	ldr	r3, [r6, #4]!
   1506c:	cmp	r3, #0
   15070:	beq	150ac <b64_decode@@Base+0x1e78>
   15074:	ldr	fp, [r4]
   15078:	mov	r0, r5
   1507c:	sub	sl, fp, #1
   15080:	lsl	r1, fp, #1
   15084:	bl	14750 <b64_decode@@Base+0x151c>
   15088:	cmp	fp, #0
   1508c:	ldr	fp, [r4, #4]
   15090:	beq	150a8 <b64_decode@@Base+0x1e74>
   15094:	sub	sl, sl, #1
   15098:	ldrd	r0, [fp], #8
   1509c:	bl	14730 <b64_decode@@Base+0x14fc>
   150a0:	cmn	sl, #1
   150a4:	bne	15094 <b64_decode@@Base+0x1e60>
   150a8:	add	r4, r4, #8
   150ac:	add	r5, r5, #131072	; 0x20000
   150b0:	cmp	r5, r8
   150b4:	bne	15068 <b64_decode@@Base+0x1e34>
   150b8:	ldr	r3, [sp, #8]
   150bc:	cmp	r3, #0
   150c0:	beq	15000 <b64_decode@@Base+0x1dcc>
   150c4:	ldr	r4, [sp, #12]
   150c8:	mov	r2, #10
   150cc:	mov	r0, r9
   150d0:	ldr	r1, [r4, #4]
   150d4:	bl	138e0 <b64_decode@@Base+0x6ac>
   150d8:	ldr	r3, [r9, #56]	; 0x38
   150dc:	add	r7, r7, #1
   150e0:	cmp	r3, r7
   150e4:	str	r0, [r4, #4]
   150e8:	bne	15010 <b64_decode@@Base+0x1ddc>
   150ec:	mov	r0, #0
   150f0:	add	sp, sp, #20
   150f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150f8:	b	14718 <b64_decode@@Base+0x14e4>
   150fc:	mov	r3, #0
   15100:	str	r3, [sp, #8]
   15104:	b	15038 <b64_decode@@Base+0x1e04>
   15108:	ldr	r1, [pc, #52]	; 15144 <b64_decode@@Base+0x1f10>
   1510c:	ldr	r0, [pc, #52]	; 15148 <b64_decode@@Base+0x1f14>
   15110:	bl	14750 <b64_decode@@Base+0x151c>
   15114:	ldr	r0, [r9, #8]
   15118:	bl	14718 <b64_decode@@Base+0x14e4>
   1511c:	cmp	r4, #0
   15120:	beq	14f5c <b64_decode@@Base+0x1d28>
   15124:	mov	r0, r4
   15128:	bl	14ee4 <b64_decode@@Base+0x1cb0>
   1512c:	b	14f5c <b64_decode@@Base+0x1d28>
   15130:	andeq	r2, r1, r0, lsr #14
   15134:	andeq	r2, r1, ip, asr #13
   15138:			; <UNDEFINED> instruction: 0x01b50000
   1513c:			; <UNDEFINED> instruction: 0x000126bc
   15140:			; <UNDEFINED> instruction: 0x01a10000
   15144:	ldrtcc	r3, [r0], -sl, lsr #10
   15148:	strbvs	r6, [r3, -r1, ror #8]!

0001514c <__gcov_sort_n_vals@@Base>:
   1514c:	cmp	r1, #2
   15150:	bxle	lr
   15154:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15158:	sub	lr, r1, #3
   1515c:	mov	ip, #0
   15160:	lsr	lr, lr, #1
   15164:	add	r1, r0, #8
   15168:	add	lr, r0, lr, lsl #4
   1516c:	add	lr, lr, #24
   15170:	ldrd	r4, [r1, #16]
   15174:	ldrd	r6, [r1]
   15178:	ldrd	r8, [r1, #8]
   1517c:	mov	r2, ip
   15180:	cmp	r6, r4
   15184:	sbcs	r3, r7, r5
   15188:	mov	fp, ip
   1518c:	bge	151d4 <__gcov_sort_n_vals@@Base+0x88>
   15190:	add	r3, r1, #8
   15194:	mov	sl, #0
   15198:	b	151b0 <__gcov_sort_n_vals@@Base+0x64>
   1519c:	ldrd	r6, [r3, #-24]	; 0xffffffe8
   151a0:	sub	r3, r3, #16
   151a4:	cmp	r6, r4
   151a8:	sbcs	r6, r7, r5
   151ac:	bge	151d4 <__gcov_sort_n_vals@@Base+0x88>
   151b0:	ldrd	r6, [r3, #-16]
   151b4:	subs	r2, r2, #2
   151b8:	mov	fp, r2
   151bc:	strd	r6, [r3]
   151c0:	ldrd	r6, [r1, sl]
   151c4:	sub	sl, sl, #16
   151c8:	strd	r6, [r3, #8]
   151cc:	mov	r6, r3
   151d0:	bpl	1519c <__gcov_sort_n_vals@@Base+0x50>
   151d4:	add	fp, fp, #2
   151d8:	mov	r3, r0
   151dc:	add	r1, r1, #16
   151e0:	lsl	fp, fp, #3
   151e4:	cmp	lr, r1
   151e8:	strd	r8, [r3, fp]!
   151ec:	add	ip, ip, #2
   151f0:	strd	r4, [r3, #8]
   151f4:	bne	15170 <__gcov_sort_n_vals@@Base+0x24>
   151f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151fc:	push	{r4, r5, r6, r7, r8, lr}
   15200:	ldr	r6, [r0]
   15204:	ldr	r4, [pc, #76]	; 15258 <__gcov_sort_n_vals@@Base+0x10c>
   15208:	smull	r2, r3, r4, r6
   1520c:	asr	r4, r6, #31
   15210:	rsb	r4, r4, r3, asr #1
   15214:	add	r4, r4, r4, lsl #3
   15218:	subs	r4, r6, r4
   1521c:	bne	15254 <__gcov_sort_n_vals@@Base+0x108>
   15220:	cmp	r6, #0
   15224:	ldr	r5, [r0, #4]
   15228:	pople	{r4, r5, r6, r7, r8, pc}
   1522c:	add	r5, r5, #8
   15230:	mov	r7, #8
   15234:	mov	r0, r5
   15238:	add	r4, r4, #9
   1523c:	mov	r1, r7
   15240:	bl	1514c <__gcov_sort_n_vals@@Base>
   15244:	cmp	r6, r4
   15248:	add	r5, r5, #72	; 0x48
   1524c:	bgt	15234 <__gcov_sort_n_vals@@Base+0xe8>
   15250:	pop	{r4, r5, r6, r7, r8, pc}
   15254:	bl	110b0 <abort@plt>
   15258:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   1525c:	ldr	r3, [r0, #52]	; 0x34
   15260:	cmp	r3, #0
   15264:	bxeq	lr
   15268:	ldr	ip, [r0, #56]	; 0x38
   1526c:	cmp	ip, #0
   15270:	bxeq	lr
   15274:	push	{r4, r5, r6, lr}
   15278:	mov	r5, r0
   1527c:	mov	r4, #0
   15280:	add	r6, r0, #12
   15284:	ldr	r1, [r5, #60]	; 0x3c
   15288:	mov	r2, r6
   1528c:	mov	r3, #0
   15290:	ldr	r0, [r1, r4, lsl #2]
   15294:	add	r0, r0, #16
   15298:	ldr	r1, [r2, #4]!
   1529c:	cmp	r1, #0
   152a0:	beq	152b0 <__gcov_sort_n_vals@@Base+0x164>
   152a4:	cmp	r3, #9
   152a8:	beq	152cc <__gcov_sort_n_vals@@Base+0x180>
   152ac:	add	r0, r0, #8
   152b0:	add	r3, r3, #1
   152b4:	cmp	r3, #10
   152b8:	bne	15298 <__gcov_sort_n_vals@@Base+0x14c>
   152bc:	add	r4, r4, #1
   152c0:	cmp	ip, r4
   152c4:	bne	15284 <__gcov_sort_n_vals@@Base+0x138>
   152c8:	pop	{r4, r5, r6, pc}
   152cc:	bl	151fc <__gcov_sort_n_vals@@Base+0xb0>
   152d0:	ldr	ip, [r5, #56]	; 0x38
   152d4:	add	r4, r4, #1
   152d8:	cmp	ip, r4
   152dc:	bne	15284 <__gcov_sort_n_vals@@Base+0x138>
   152e0:	b	152c8 <__gcov_sort_n_vals@@Base+0x17c>
   152e4:	push	{r4, r5, r6, r7, r8, r9, lr}
   152e8:	sub	sp, sp, #6080	; 0x17c0
   152ec:	ldr	ip, [pc, #388]	; 15478 <__gcov_sort_n_vals@@Base+0x32c>
   152f0:	sub	sp, sp, #36	; 0x24
   152f4:	add	ip, pc, ip
   152f8:	add	r5, sp, #2016	; 0x7e0
   152fc:	mov	r4, r0
   15300:	mov	r7, r1
   15304:	mov	r1, #0
   15308:	str	r1, [ip, #4]
   1530c:	str	r1, [ip]
   15310:	mov	r8, r2
   15314:	mov	r6, r3
   15318:	str	r1, [r5, #-2000]	; 0xfffff830
   1531c:	str	r1, [r5, #-1996]	; 0xfffff834
   15320:	bl	1525c <__gcov_sort_n_vals@@Base+0x110>
   15324:	mov	r1, r7
   15328:	ldr	r0, [r4, #12]
   1532c:	bl	14594 <b64_decode@@Base+0x1360>
   15330:	cmn	r0, #1
   15334:	beq	153b4 <__gcov_sort_n_vals@@Base+0x268>
   15338:	bl	1487c <b64_decode@@Base+0x1648>
   1533c:	cmp	r0, #0
   15340:	beq	153c0 <__gcov_sort_n_vals@@Base+0x274>
   15344:	ldr	r3, [pc, #304]	; 1547c <__gcov_sort_n_vals@@Base+0x330>
   15348:	cmp	r0, r3
   1534c:	beq	15418 <__gcov_sort_n_vals@@Base+0x2cc>
   15350:	ldr	r0, [pc, #296]	; 15480 <__gcov_sort_n_vals@@Base+0x334>
   15354:	ldr	r1, [r7]
   15358:	add	r0, pc, r0
   1535c:	bl	13898 <b64_decode@@Base+0x664>
   15360:	ldr	r5, [pc, #284]	; 15484 <__gcov_sort_n_vals@@Base+0x338>
   15364:	add	r5, pc, r5
   15368:	ldr	r1, [r5, #4]
   1536c:	cmp	r1, #0
   15370:	movne	r6, #10
   15374:	beq	15394 <__gcov_sort_n_vals@@Base+0x248>
   15378:	mov	r2, r6
   1537c:	mov	r0, r4
   15380:	bl	138e0 <b64_decode@@Base+0x6ac>
   15384:	cmp	r0, #0
   15388:	mov	r1, r0
   1538c:	str	r0, [r5, #4]
   15390:	bne	15378 <__gcov_sort_n_vals@@Base+0x22c>
   15394:	bl	146a8 <b64_decode@@Base+0x1474>
   15398:	cmp	r0, #0
   1539c:	beq	153b4 <__gcov_sort_n_vals@@Base+0x268>
   153a0:	blt	15454 <__gcov_sort_n_vals@@Base+0x308>
   153a4:	ldr	r0, [pc, #220]	; 15488 <__gcov_sort_n_vals@@Base+0x33c>
   153a8:	add	r0, pc, r0
   153ac:	ldr	r1, [r7]
   153b0:	bl	13898 <b64_decode@@Base+0x664>
   153b4:	add	sp, sp, #6080	; 0x17c0
   153b8:	add	sp, sp, #36	; 0x24
   153bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   153c0:	add	r9, sp, #24
   153c4:	bl	14428 <b64_decode@@Base+0x11f4>
   153c8:	ldr	r1, [r5, #-2000]	; 0xfffff830
   153cc:	cmp	r1, #0
   153d0:	beq	15460 <__gcov_sort_n_vals@@Base+0x314>
   153d4:	add	r3, sp, #6144	; 0x1800
   153d8:	ldr	r0, [r7]
   153dc:	str	r6, [sp, #4]
   153e0:	ldr	r3, [r3]
   153e4:	mov	r1, r8
   153e8:	str	r3, [sp]
   153ec:	mov	r2, r4
   153f0:	mov	r3, r9
   153f4:	bl	142ec <b64_decode@@Base+0x10b8>
   153f8:	cmn	r0, #1
   153fc:	beq	15360 <__gcov_sort_n_vals@@Base+0x214>
   15400:	mov	r1, r9
   15404:	ldr	r3, [r5, #-2000]	; 0xfffff830
   15408:	ldr	r2, [r5, #-1996]	; 0xfffff834
   1540c:	mov	r0, r4
   15410:	bl	14f38 <b64_decode@@Base+0x1d04>
   15414:	b	15360 <__gcov_sort_n_vals@@Base+0x214>
   15418:	add	r3, sp, #16
   1541c:	ldr	r0, [r7]
   15420:	str	r3, [sp]
   15424:	add	r3, sp, #6144	; 0x1800
   15428:	add	r1, sp, #20
   1542c:	add	r9, sp, #24
   15430:	str	r1, [sp, #4]
   15434:	str	r6, [sp, #8]
   15438:	mov	r2, r9
   1543c:	ldr	r3, [r3]
   15440:	mov	r1, r4
   15444:	bl	14bcc <b64_decode@@Base+0x1998>
   15448:	cmn	r0, #1
   1544c:	bne	153c4 <__gcov_sort_n_vals@@Base+0x278>
   15450:	b	15360 <__gcov_sort_n_vals@@Base+0x214>
   15454:	ldr	r0, [pc, #48]	; 1548c <__gcov_sort_n_vals@@Base+0x340>
   15458:	add	r0, pc, r0
   1545c:	b	153ac <__gcov_sort_n_vals@@Base+0x260>
   15460:	ldr	r2, [pc, #40]	; 15490 <__gcov_sort_n_vals@@Base+0x344>
   15464:	mov	r0, r9
   15468:	bl	11044 <memset@plt>
   1546c:	ldr	r3, [r5, #-1996]	; 0xfffff834
   15470:	str	r3, [r5, #-2000]	; 0xfffff830
   15474:	b	153d4 <__gcov_sort_n_vals@@Base+0x288>
   15478:	muleq	r1, r4, r3
   1547c:	strbvs	r6, [r3, -r1, ror #8]!
   15480:	andeq	r1, r0, ip, lsr #3
   15484:	andeq	r2, r1, r4, lsr #6
   15488:	andeq	r1, r0, r0, asr #2
   1548c:	andeq	r1, r0, r0, ror r0
   15490:	andeq	r1, r0, r8, asr #15
   15494:	push	{r4, r5, r6, r7, r8, lr}
   15498:	sub	sp, sp, #6080	; 0x17c0
   1549c:	sub	sp, sp, #32
   154a0:	add	r6, sp, #24
   154a4:	add	r2, sp, #12
   154a8:	mov	r8, r1
   154ac:	mov	r1, r6
   154b0:	mov	r4, r0
   154b4:	bl	13af8 <b64_decode@@Base+0x8c4>
   154b8:	add	r5, sp, #8
   154bc:	mov	r7, r0
   154c0:	mov	r0, r5
   154c4:	bl	13c7c <b64_decode@@Base+0xa48>
   154c8:	cmp	r4, #0
   154cc:	beq	154f4 <__gcov_sort_n_vals@@Base+0x3a8>
   154d0:	mov	r0, r4
   154d4:	str	r6, [sp]
   154d8:	mov	r3, r7
   154dc:	mov	r2, r8
   154e0:	mov	r1, r5
   154e4:	bl	152e4 <__gcov_sort_n_vals@@Base+0x198>
   154e8:	ldr	r4, [r4, #4]
   154ec:	cmp	r4, #0
   154f0:	bne	154d0 <__gcov_sort_n_vals@@Base+0x384>
   154f4:	ldr	r0, [sp, #8]
   154f8:	bl	10f24 <free@plt>
   154fc:	add	sp, sp, #6080	; 0x17c0
   15500:	add	sp, sp, #32
   15504:	pop	{r4, r5, r6, r7, r8, pc}
   15508:	ldrb	r1, [r0, #4]
   1550c:	tst	r1, #1
   15510:	bxne	lr
   15514:	push	{r4, lr}
   15518:	lsr	r1, r1, #1
   1551c:	mov	r4, r0
   15520:	and	r1, r1, #1
   15524:	ldr	r0, [r0]
   15528:	bl	15494 <__gcov_sort_n_vals@@Base+0x348>
   1552c:	ldrb	r3, [r4, #4]
   15530:	orr	r3, r3, #3
   15534:	strb	r3, [r4, #4]
   15538:	pop	{r4, pc}
   1553c:	push	{r4, r5, r6, lr}
   15540:	ldr	r4, [pc, #76]	; 15594 <__gcov_sort_n_vals@@Base+0x448>
   15544:	ldr	r5, [pc, #76]	; 15598 <__gcov_sort_n_vals@@Base+0x44c>
   15548:	add	r4, pc, r4
   1554c:	mov	r0, r4
   15550:	bl	15508 <__gcov_sort_n_vals@@Base+0x3bc>
   15554:	ldr	r3, [r4, #8]
   15558:	add	r5, pc, r5
   1555c:	cmp	r3, #0
   15560:	ldrne	r2, [r4, #12]
   15564:	strne	r2, [r3, #12]
   15568:	ldr	r2, [pc, #44]	; 1559c <__gcov_sort_n_vals@@Base+0x450>
   1556c:	add	r2, pc, r2
   15570:	ldr	r2, [r2, #12]
   15574:	cmp	r2, #0
   15578:	beq	15584 <__gcov_sort_n_vals@@Base+0x438>
   1557c:	str	r3, [r2, #8]
   15580:	pop	{r4, r5, r6, pc}
   15584:	ldr	r2, [pc, #20]	; 155a0 <__gcov_sort_n_vals@@Base+0x454>
   15588:	ldr	r2, [r5, r2]
   1558c:	str	r3, [r2, #4]
   15590:	pop	{r4, r5, r6, pc}
   15594:	andeq	r2, r1, r8, asr #2
   15598:	andeq	r1, r1, r0, lsr #21
   1559c:	andeq	r2, r1, r4, lsr #2
   155a0:	andeq	r0, r0, r8, asr #1
   155a4:	ldr	r1, [r0]
   155a8:	push	{r4, r5, r6, lr}
   155ac:	cmp	r1, #0
   155b0:	ldr	r5, [pc, #168]	; 15660 <__gcov_sort_n_vals@@Base+0x514>
   155b4:	add	r5, pc, r5
   155b8:	popeq	{r4, r5, r6, pc}
   155bc:	ldr	r3, [r0, #56]	; 0x38
   155c0:	cmp	r3, #0
   155c4:	popeq	{r4, r5, r6, pc}
   155c8:	mov	r4, r0
   155cc:	mov	r2, #0
   155d0:	add	r0, r0, #12
   155d4:	bl	14260 <b64_decode@@Base+0x102c>
   155d8:	cmp	r0, #0
   155dc:	popeq	{r4, r5, r6, pc}
   155e0:	ldr	r6, [pc, #124]	; 15664 <__gcov_sort_n_vals@@Base+0x518>
   155e4:	add	r6, pc, r6
   155e8:	ldr	r2, [r6]
   155ec:	cmp	r2, #0
   155f0:	beq	15608 <__gcov_sort_n_vals@@Base+0x4bc>
   155f4:	ldr	r3, [pc, #108]	; 15668 <__gcov_sort_n_vals@@Base+0x51c>
   155f8:	str	r2, [r4, #4]
   155fc:	add	r3, pc, r3
   15600:	str	r4, [r3]
   15604:	pop	{r4, r5, r6, pc}
   15608:	ldr	r3, [pc, #92]	; 1566c <__gcov_sort_n_vals@@Base+0x520>
   1560c:	ldr	r2, [pc, #92]	; 15670 <__gcov_sort_n_vals@@Base+0x524>
   15610:	mov	r0, #12
   15614:	ldr	r5, [r5, r3]
   15618:	add	r2, pc, r2
   1561c:	ldr	r1, [r5]
   15620:	bl	14260 <b64_decode@@Base+0x102c>
   15624:	cmp	r0, #0
   15628:	beq	15648 <__gcov_sort_n_vals@@Base+0x4fc>
   1562c:	ldr	r3, [r5, #4]
   15630:	cmp	r3, #0
   15634:	str	r3, [r6, #8]
   15638:	strne	r6, [r3, #12]
   1563c:	ldr	r3, [pc, #48]	; 15674 <__gcov_sort_n_vals@@Base+0x528>
   15640:	add	r3, pc, r3
   15644:	str	r3, [r5, #4]
   15648:	ldr	r0, [pc, #40]	; 15678 <__gcov_sort_n_vals@@Base+0x52c>
   1564c:	add	r0, pc, r0
   15650:	bl	15934 <__libc_csu_fini@@Base+0x4>
   15654:	ldr	r3, [pc, #32]	; 1567c <__gcov_sort_n_vals@@Base+0x530>
   15658:	ldr	r2, [pc, r3]
   1565c:	b	155f4 <__gcov_sort_n_vals@@Base+0x4a8>
   15660:	andeq	r1, r1, r4, asr #20
   15664:	andeq	r2, r1, ip, lsr #1
   15668:	muleq	r1, r4, r0
   1566c:	andeq	r0, r0, r8, asr #1
   15670:	andeq	r0, r0, r0, lsl pc
   15674:	andeq	r2, r1, r0, asr r0
   15678:			; <UNDEFINED> instruction: 0xfffffee8
   1567c:	andeq	r2, r1, r8, lsr r0
   15680:	cmp	r3, #0
   15684:	cmpeq	r2, #0
   15688:	bne	156ac <__gcov_sort_n_vals@@Base+0x560>
   1568c:	cmp	r1, #0
   15690:	movlt	r1, #-2147483648	; 0x80000000
   15694:	movlt	r0, #0
   15698:	blt	156a8 <__gcov_sort_n_vals@@Base+0x55c>
   1569c:	cmpeq	r0, #0
   156a0:	mvnne	r1, #-2147483648	; 0x80000000
   156a4:	mvnne	r0, #0
   156a8:	b	15754 <__gcov_sort_n_vals@@Base+0x608>
   156ac:	sub	sp, sp, #8
   156b0:	push	{sp, lr}
   156b4:	cmp	r1, #0
   156b8:	blt	156d8 <__gcov_sort_n_vals@@Base+0x58c>
   156bc:	cmp	r3, #0
   156c0:	blt	1570c <__gcov_sort_n_vals@@Base+0x5c0>
   156c4:	bl	157a8 <__gcov_sort_n_vals@@Base+0x65c>
   156c8:	ldr	lr, [sp, #4]
   156cc:	add	sp, sp, #8
   156d0:	pop	{r2, r3}
   156d4:	bx	lr
   156d8:	rsbs	r0, r0, #0
   156dc:	sbc	r1, r1, r1, lsl #1
   156e0:	cmp	r3, #0
   156e4:	blt	15730 <__gcov_sort_n_vals@@Base+0x5e4>
   156e8:	bl	157a8 <__gcov_sort_n_vals@@Base+0x65c>
   156ec:	ldr	lr, [sp, #4]
   156f0:	add	sp, sp, #8
   156f4:	pop	{r2, r3}
   156f8:	rsbs	r0, r0, #0
   156fc:	sbc	r1, r1, r1, lsl #1
   15700:	rsbs	r2, r2, #0
   15704:	sbc	r3, r3, r3, lsl #1
   15708:	bx	lr
   1570c:	rsbs	r2, r2, #0
   15710:	sbc	r3, r3, r3, lsl #1
   15714:	bl	157a8 <__gcov_sort_n_vals@@Base+0x65c>
   15718:	ldr	lr, [sp, #4]
   1571c:	add	sp, sp, #8
   15720:	pop	{r2, r3}
   15724:	rsbs	r0, r0, #0
   15728:	sbc	r1, r1, r1, lsl #1
   1572c:	bx	lr
   15730:	rsbs	r2, r2, #0
   15734:	sbc	r3, r3, r3, lsl #1
   15738:	bl	157a8 <__gcov_sort_n_vals@@Base+0x65c>
   1573c:	ldr	lr, [sp, #4]
   15740:	add	sp, sp, #8
   15744:	pop	{r2, r3}
   15748:	rsbs	r2, r2, #0
   1574c:	sbc	r3, r3, r3, lsl #1
   15750:	bx	lr
   15754:	push	{r1, lr}
   15758:	mov	r0, #8
   1575c:	bl	10edc <raise@plt>
   15760:	pop	{r1, pc}
   15764:	ldr	r3, [pc, #48]	; 1579c <__gcov_sort_n_vals@@Base+0x650>
   15768:	ldr	r2, [pc, #48]	; 157a0 <__gcov_sort_n_vals@@Base+0x654>
   1576c:	and	r3, r3, r0, lsr #1
   15770:	sub	r0, r0, r3
   15774:	and	r3, r0, r2
   15778:	and	r0, r2, r0, lsr #2
   1577c:	add	r3, r3, r0
   15780:	ldr	r0, [pc, #28]	; 157a4 <__gcov_sort_n_vals@@Base+0x658>
   15784:	add	r3, r3, r3, lsr #4
   15788:	and	r0, r0, r3
   1578c:	add	r0, r0, r0, lsl #8
   15790:	add	r0, r0, r0, lsl #16
   15794:	lsr	r0, r0, #24
   15798:	bx	lr
   1579c:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   157a0:	teqcc	r3, #-872415232	; 0xcc000000
   157a4:	svceq	0x000f0f0f
   157a8:	cmp	r1, r3
   157ac:	push	{r4, r5, r6, r7, r8, r9, lr}
   157b0:	cmpeq	r0, r2
   157b4:	mov	r4, r0
   157b8:	mov	r5, r1
   157bc:	ldr	r9, [sp, #28]
   157c0:	movcc	r0, #0
   157c4:	movcc	r1, #0
   157c8:	bcc	158c0 <__gcov_sort_n_vals@@Base+0x774>
   157cc:	cmp	r3, #0
   157d0:	clzeq	ip, r2
   157d4:	clzne	ip, r3
   157d8:	addeq	ip, ip, #32
   157dc:	cmp	r5, #0
   157e0:	clzeq	r1, r4
   157e4:	addeq	r1, r1, #32
   157e8:	clzne	r1, r5
   157ec:	sub	ip, ip, r1
   157f0:	sub	lr, ip, #32
   157f4:	lsl	r7, r3, ip
   157f8:	rsb	r8, ip, #32
   157fc:	orr	r7, r7, r2, lsl lr
   15800:	orr	r7, r7, r2, lsr r8
   15804:	lsl	r6, r2, ip
   15808:	cmp	r5, r7
   1580c:	cmpeq	r4, r6
   15810:	movcc	r0, #0
   15814:	movcc	r1, #0
   15818:	bcc	15834 <__gcov_sort_n_vals@@Base+0x6e8>
   1581c:	mov	r3, #1
   15820:	subs	r4, r4, r6
   15824:	lsl	r1, r3, lr
   15828:	lsl	r0, r3, ip
   1582c:	orr	r1, r1, r3, lsr r8
   15830:	sbc	r5, r5, r7
   15834:	cmp	ip, #0
   15838:	beq	158c0 <__gcov_sort_n_vals@@Base+0x774>
   1583c:	lsrs	r3, r7, #1
   15840:	rrx	r2, r6
   15844:	mov	r6, ip
   15848:	b	1586c <__gcov_sort_n_vals@@Base+0x720>
   1584c:	subs	r4, r4, r2
   15850:	sbc	r5, r5, r3
   15854:	adds	r4, r4, r4
   15858:	adc	r5, r5, r5
   1585c:	adds	r4, r4, #1
   15860:	adc	r5, r5, #0
   15864:	subs	r6, r6, #1
   15868:	beq	15888 <__gcov_sort_n_vals@@Base+0x73c>
   1586c:	cmp	r5, r3
   15870:	cmpeq	r4, r2
   15874:	bcs	1584c <__gcov_sort_n_vals@@Base+0x700>
   15878:	adds	r4, r4, r4
   1587c:	adc	r5, r5, r5
   15880:	subs	r6, r6, #1
   15884:	bne	1586c <__gcov_sort_n_vals@@Base+0x720>
   15888:	lsr	r6, r4, ip
   1588c:	lsr	r7, r5, ip
   15890:	orr	r6, r6, r5, lsl r8
   15894:	adds	r2, r0, r4
   15898:	orr	r6, r6, r5, lsr lr
   1589c:	adc	r3, r1, r5
   158a0:	lsl	r1, r7, ip
   158a4:	orr	r1, r1, r6, lsl lr
   158a8:	lsl	r0, r6, ip
   158ac:	orr	r1, r1, r6, lsr r8
   158b0:	subs	r0, r2, r0
   158b4:	mov	r4, r6
   158b8:	mov	r5, r7
   158bc:	sbc	r1, r3, r1
   158c0:	cmp	r9, #0
   158c4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   158c8:	strd	r4, [r9]
   158cc:	pop	{r4, r5, r6, r7, r8, r9, pc}

000158d0 <__libc_csu_init@@Base>:
   158d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   158d4:	mov	r7, r0
   158d8:	ldr	r6, [pc, #72]	; 15928 <__libc_csu_init@@Base+0x58>
   158dc:	ldr	r5, [pc, #72]	; 1592c <__libc_csu_init@@Base+0x5c>
   158e0:	add	r6, pc, r6
   158e4:	add	r5, pc, r5
   158e8:	sub	r6, r6, r5
   158ec:	mov	r8, r1
   158f0:	mov	r9, r2
   158f4:	bl	10ea4 <fdopen@plt-0x20>
   158f8:	asrs	r6, r6, #2
   158fc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15900:	mov	r4, #0
   15904:	add	r4, r4, #1
   15908:	ldr	r3, [r5], #4
   1590c:	mov	r2, r9
   15910:	mov	r1, r8
   15914:	mov	r0, r7
   15918:	blx	r3
   1591c:	cmp	r6, r4
   15920:	bne	15904 <__libc_csu_init@@Base+0x34>
   15924:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15928:	andeq	r1, r1, r0, lsr #12
   1592c:	andeq	r1, r1, ip, lsl #12

00015930 <__libc_csu_fini@@Base>:
   15930:	bx	lr
   15934:	ldr	r3, [pc, #12]	; 15948 <__libc_csu_fini@@Base+0x18>
   15938:	mov	r1, #0
   1593c:	add	r3, pc, r3
   15940:	ldr	r2, [r3]
   15944:	b	11020 <__cxa_atexit@plt>
   15948:	muleq	r1, r8, r7
   1594c:	mov	r2, r1
   15950:	mov	r1, r0
   15954:	mov	r0, #3
   15958:	b	10fc0 <__fxstat@plt>

Disassembly of section .fini:

0001595c <.fini>:
   1595c:	push	{r3, lr}
   15960:	pop	{r3, pc}
