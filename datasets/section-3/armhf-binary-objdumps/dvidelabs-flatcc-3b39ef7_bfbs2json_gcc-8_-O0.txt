
../repos/dvidelabs-flatcc-3b39ef7/samples/reflection/bfbs2json:     file format elf32-littlearm


Disassembly of section .init:

00010868 <.init>:
   10868:	push	{r3, lr}
   1086c:	bl	109ac <_start@@Base+0x3c>
   10870:	pop	{r3, pc}

Disassembly of section .plt:

00010874 <printf@plt-0x14>:
   10874:	push	{lr}		; (str lr, [sp, #-4]!)
   10878:	ldr	lr, [pc, #4]	; 10884 <printf@plt-0x4>
   1087c:	add	lr, pc, lr
   10880:	ldr	pc, [lr, #8]!
   10884:	andeq	r5, r1, ip, ror r7

00010888 <printf@plt>:
   10888:	add	ip, pc, #0, 12
   1088c:	add	ip, ip, #86016	; 0x15000
   10890:	ldr	pc, [ip, #1916]!	; 0x77c

00010894 <fopen@plt>:
   10894:	add	ip, pc, #0, 12
   10898:	add	ip, ip, #86016	; 0x15000
   1089c:	ldr	pc, [ip, #1908]!	; 0x774

000108a0 <free@plt>:
   108a0:	add	ip, pc, #0, 12
   108a4:	add	ip, ip, #86016	; 0x15000
   108a8:	ldr	pc, [ip, #1900]!	; 0x76c

000108ac <ftell@plt>:
   108ac:	add	ip, pc, #0, 12
   108b0:	add	ip, ip, #86016	; 0x15000
   108b4:	ldr	pc, [ip, #1892]!	; 0x764

000108b8 <rewind@plt>:
   108b8:	add	ip, pc, #0, 12
   108bc:	add	ip, ip, #86016	; 0x15000
   108c0:	ldr	pc, [ip, #1884]!	; 0x75c

000108c4 <fwrite@plt>:
   108c4:	add	ip, pc, #0, 12
   108c8:	add	ip, ip, #86016	; 0x15000
   108cc:	ldr	pc, [ip, #1876]!	; 0x754

000108d0 <fread@plt>:
   108d0:	add	ip, pc, #0, 12
   108d4:	add	ip, ip, #86016	; 0x15000
   108d8:	ldr	pc, [ip, #1868]!	; 0x74c

000108dc <puts@plt>:
   108dc:	add	ip, pc, #0, 12
   108e0:	add	ip, ip, #86016	; 0x15000
   108e4:	ldr	pc, [ip, #1860]!	; 0x744

000108e8 <malloc@plt>:
   108e8:	add	ip, pc, #0, 12
   108ec:	add	ip, ip, #86016	; 0x15000
   108f0:	ldr	pc, [ip, #1852]!	; 0x73c

000108f4 <__libc_start_main@plt>:
   108f4:	add	ip, pc, #0, 12
   108f8:	add	ip, ip, #86016	; 0x15000
   108fc:	ldr	pc, [ip, #1844]!	; 0x734

00010900 <__gmon_start__@plt>:
   10900:	add	ip, pc, #0, 12
   10904:	add	ip, ip, #86016	; 0x15000
   10908:	ldr	pc, [ip, #1836]!	; 0x72c

0001090c <exit@plt>:
   1090c:	add	ip, pc, #0, 12
   10910:	add	ip, ip, #86016	; 0x15000
   10914:	ldr	pc, [ip, #1828]!	; 0x724

00010918 <fprintf@plt>:
   10918:	add	ip, pc, #0, 12
   1091c:	add	ip, ip, #86016	; 0x15000
   10920:	ldr	pc, [ip, #1820]!	; 0x71c

00010924 <putchar@plt>:
   10924:	add	ip, pc, #0, 12
   10928:	add	ip, ip, #86016	; 0x15000
   1092c:	ldr	pc, [ip, #1812]!	; 0x714

00010930 <strncpy@plt>:
   10930:	add	ip, pc, #0, 12
   10934:	add	ip, ip, #86016	; 0x15000
   10938:	ldr	pc, [ip, #1804]!	; 0x70c

0001093c <fclose@plt>:
   1093c:	add	ip, pc, #0, 12
   10940:	add	ip, ip, #86016	; 0x15000
   10944:	ldr	pc, [ip, #1796]!	; 0x704

00010948 <fseek@plt>:
   10948:	add	ip, pc, #0, 12
   1094c:	add	ip, ip, #86016	; 0x15000
   10950:	ldr	pc, [ip, #1788]!	; 0x6fc

00010954 <abort@plt>:
   10954:	add	ip, pc, #0, 12
   10958:	add	ip, ip, #86016	; 0x15000
   1095c:	ldr	pc, [ip, #1780]!	; 0x6f4

00010960 <__assert_fail@plt>:
   10960:	add	ip, pc, #0, 12
   10964:	add	ip, ip, #86016	; 0x15000
   10968:	ldr	pc, [ip, #1772]!	; 0x6ec

Disassembly of section .text:

00010970 <_start@@Base>:
   10970:	mov	fp, #0
   10974:	mov	lr, #0
   10978:	pop	{r1}		; (ldr r1, [sp], #4)
   1097c:	mov	r2, sp
   10980:	push	{r2}		; (str r2, [sp, #-4]!)
   10984:	push	{r0}		; (str r0, [sp, #-4]!)
   10988:	ldr	ip, [pc, #16]	; 109a0 <_start@@Base+0x30>
   1098c:	push	{ip}		; (str ip, [sp, #-4]!)
   10990:	ldr	r0, [pc, #12]	; 109a4 <_start@@Base+0x34>
   10994:	ldr	r3, [pc, #12]	; 109a8 <_start@@Base+0x38>
   10998:	bl	108f4 <__libc_start_main@plt>
   1099c:	bl	10954 <abort@plt>
   109a0:	andeq	r4, r1, r4, asr #27
   109a4:	andeq	r4, r1, r8, lsl #25
   109a8:	andeq	r4, r1, r4, ror #26
   109ac:	ldr	r3, [pc, #20]	; 109c8 <_start@@Base+0x58>
   109b0:	ldr	r2, [pc, #20]	; 109cc <_start@@Base+0x5c>
   109b4:	add	r3, pc, r3
   109b8:	ldr	r2, [r3, r2]
   109bc:	cmp	r2, #0
   109c0:	bxeq	lr
   109c4:	b	10900 <__gmon_start__@plt>
   109c8:	andeq	r5, r1, r4, asr #12
   109cc:	andeq	r0, r0, ip, asr r0
   109d0:	ldr	r0, [pc, #24]	; 109f0 <_start@@Base+0x80>
   109d4:	ldr	r3, [pc, #24]	; 109f4 <_start@@Base+0x84>
   109d8:	cmp	r3, r0
   109dc:	bxeq	lr
   109e0:	ldr	r3, [pc, #16]	; 109f8 <_start@@Base+0x88>
   109e4:	cmp	r3, #0
   109e8:	bxeq	lr
   109ec:	bx	r3
   109f0:	andeq	r6, r2, r0, ror r0
   109f4:	andeq	r6, r2, r0, ror r0
   109f8:	andeq	r0, r0, r0
   109fc:	ldr	r0, [pc, #36]	; 10a28 <_start@@Base+0xb8>
   10a00:	ldr	r1, [pc, #36]	; 10a2c <_start@@Base+0xbc>
   10a04:	sub	r1, r1, r0
   10a08:	asr	r1, r1, #2
   10a0c:	add	r1, r1, r1, lsr #31
   10a10:	asrs	r1, r1, #1
   10a14:	bxeq	lr
   10a18:	ldr	r3, [pc, #16]	; 10a30 <_start@@Base+0xc0>
   10a1c:	cmp	r3, #0
   10a20:	bxeq	lr
   10a24:	bx	r3
   10a28:	andeq	r6, r2, r0, ror r0
   10a2c:	andeq	r6, r2, r0, ror r0
   10a30:	andeq	r0, r0, r0
   10a34:	push	{r4, lr}
   10a38:	ldr	r4, [pc, #24]	; 10a58 <_start@@Base+0xe8>
   10a3c:	ldrb	r3, [r4]
   10a40:	cmp	r3, #0
   10a44:	popne	{r4, pc}
   10a48:	bl	109d0 <_start@@Base+0x60>
   10a4c:	mov	r3, #1
   10a50:	strb	r3, [r4]
   10a54:	pop	{r4, pc}
   10a58:	andeq	r6, r2, r0, ror r0
   10a5c:	b	109fc <_start@@Base+0x8c>
   10a60:	str	fp, [sp, #-8]!
   10a64:	str	lr, [sp, #4]
   10a68:	add	fp, sp, #4
   10a6c:	sub	sp, sp, #40	; 0x28
   10a70:	str	r0, [fp, #-32]	; 0xffffffe0
   10a74:	str	r1, [fp, #-36]	; 0xffffffdc
   10a78:	str	r2, [fp, #-40]	; 0xffffffd8
   10a7c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   10a80:	cmp	r3, #0
   10a84:	bne	10a90 <_start@@Base+0x120>
   10a88:	sub	r3, fp, #28
   10a8c:	b	10a94 <_start@@Base+0x124>
   10a90:	ldr	r3, [fp, #-40]	; 0xffffffd8
   10a94:	str	r3, [fp, #-40]	; 0xffffffd8
   10a98:	ldr	r3, [pc, #404]	; 10c34 <_start@@Base+0x2c4>
   10a9c:	add	r3, pc, r3
   10aa0:	mov	r1, r3
   10aa4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   10aa8:	bl	10894 <fopen@plt>
   10aac:	str	r0, [fp, #-20]	; 0xffffffec
   10ab0:	mov	r3, #0
   10ab4:	str	r3, [fp, #-8]
   10ab8:	mov	r3, #0
   10abc:	str	r3, [fp, #-16]
   10ac0:	ldr	r3, [fp, #-20]	; 0xffffffec
   10ac4:	cmp	r3, #0
   10ac8:	beq	10bcc <_start@@Base+0x25c>
   10acc:	mov	r2, #2
   10ad0:	mov	r1, #0
   10ad4:	ldr	r0, [fp, #-20]	; 0xffffffec
   10ad8:	bl	10948 <fseek@plt>
   10adc:	ldr	r0, [fp, #-20]	; 0xffffffec
   10ae0:	bl	108ac <ftell@plt>
   10ae4:	mov	r3, r0
   10ae8:	str	r3, [fp, #-8]
   10aec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   10af0:	ldr	r2, [fp, #-8]
   10af4:	str	r2, [r3]
   10af8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10afc:	cmp	r3, #0
   10b00:	beq	10b14 <_start@@Base+0x1a4>
   10b04:	ldr	r2, [fp, #-8]
   10b08:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10b0c:	cmp	r2, r3
   10b10:	bhi	10bd4 <_start@@Base+0x264>
   10b14:	ldr	r0, [fp, #-20]	; 0xffffffec
   10b18:	bl	108b8 <rewind@plt>
   10b1c:	ldr	r3, [fp, #-8]
   10b20:	cmp	r3, #0
   10b24:	beq	10b30 <_start@@Base+0x1c0>
   10b28:	ldr	r3, [fp, #-8]
   10b2c:	b	10b34 <_start@@Base+0x1c4>
   10b30:	mov	r3, #1
   10b34:	mov	r0, r3
   10b38:	bl	108e8 <malloc@plt>
   10b3c:	mov	r3, r0
   10b40:	str	r3, [fp, #-16]
   10b44:	ldr	r3, [fp, #-16]
   10b48:	cmp	r3, #0
   10b4c:	beq	10bdc <_start@@Base+0x26c>
   10b50:	mov	r3, #0
   10b54:	str	r3, [fp, #-12]
   10b58:	b	10b6c <_start@@Base+0x1fc>
   10b5c:	ldr	r2, [fp, #-12]
   10b60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10b64:	add	r3, r2, r3
   10b68:	str	r3, [fp, #-12]
   10b6c:	ldr	r2, [fp, #-16]
   10b70:	ldr	r3, [fp, #-12]
   10b74:	add	r0, r2, r3
   10b78:	ldr	r2, [fp, #-8]
   10b7c:	ldr	r3, [fp, #-12]
   10b80:	sub	r2, r2, r3
   10b84:	ldr	r3, [fp, #-20]	; 0xffffffec
   10b88:	mov	r1, #1
   10b8c:	bl	108d0 <fread@plt>
   10b90:	str	r0, [fp, #-24]	; 0xffffffe8
   10b94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10b98:	cmp	r3, #0
   10b9c:	bne	10b5c <_start@@Base+0x1ec>
   10ba0:	ldr	r2, [fp, #-12]
   10ba4:	ldr	r3, [fp, #-8]
   10ba8:	cmp	r2, r3
   10bac:	bne	10be4 <_start@@Base+0x274>
   10bb0:	ldr	r0, [fp, #-20]	; 0xffffffec
   10bb4:	bl	1093c <fclose@plt>
   10bb8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   10bbc:	ldr	r2, [fp, #-8]
   10bc0:	str	r2, [r3]
   10bc4:	ldr	r3, [fp, #-16]
   10bc8:	b	10c20 <_start@@Base+0x2b0>
   10bcc:	nop	{0}
   10bd0:	b	10be8 <_start@@Base+0x278>
   10bd4:	nop	{0}
   10bd8:	b	10be8 <_start@@Base+0x278>
   10bdc:	nop	{0}
   10be0:	b	10be8 <_start@@Base+0x278>
   10be4:	nop	{0}
   10be8:	ldr	r3, [fp, #-20]	; 0xffffffec
   10bec:	cmp	r3, #0
   10bf0:	beq	10bfc <_start@@Base+0x28c>
   10bf4:	ldr	r0, [fp, #-20]	; 0xffffffec
   10bf8:	bl	1093c <fclose@plt>
   10bfc:	ldr	r3, [fp, #-16]
   10c00:	cmp	r3, #0
   10c04:	beq	10c10 <_start@@Base+0x2a0>
   10c08:	ldr	r0, [fp, #-16]
   10c0c:	bl	108a0 <free@plt>
   10c10:	ldr	r3, [fp, #-40]	; 0xffffffd8
   10c14:	ldr	r2, [fp, #-8]
   10c18:	str	r2, [r3]
   10c1c:	mov	r3, #0
   10c20:	mov	r0, r3
   10c24:	sub	sp, fp, #4
   10c28:	ldr	fp, [sp]
   10c2c:	add	sp, sp, #4
   10c30:	pop	{pc}		; (ldr pc, [sp], #4)
   10c34:	andeq	r4, r0, r0, lsr r3
   10c38:	push	{fp}		; (str fp, [sp, #-4]!)
   10c3c:	add	fp, sp, #0
   10c40:	sub	sp, sp, #12
   10c44:	mov	r3, r0
   10c48:	strh	r3, [fp, #-6]
   10c4c:	ldrh	r3, [fp, #-6]
   10c50:	mov	r0, r3
   10c54:	add	sp, fp, #0
   10c58:	pop	{fp}		; (ldr fp, [sp], #4)
   10c5c:	bx	lr
   10c60:	str	fp, [sp, #-8]!
   10c64:	str	lr, [sp, #4]
   10c68:	add	fp, sp, #4
   10c6c:	sub	sp, sp, #8
   10c70:	str	r0, [fp, #-8]
   10c74:	ldr	r3, [fp, #-8]
   10c78:	ldrh	r3, [r3]
   10c7c:	mov	r0, r3
   10c80:	bl	10c38 <_start@@Base+0x2c8>
   10c84:	mov	r3, r0
   10c88:	mov	r0, r3
   10c8c:	sub	sp, fp, #4
   10c90:	ldr	fp, [sp]
   10c94:	add	sp, sp, #4
   10c98:	pop	{pc}		; (ldr pc, [sp], #4)
   10c9c:	push	{fp}		; (str fp, [sp, #-4]!)
   10ca0:	add	fp, sp, #0
   10ca4:	sub	sp, sp, #12
   10ca8:	str	r0, [fp, #-8]
   10cac:	ldr	r3, [fp, #-8]
   10cb0:	mov	r0, r3
   10cb4:	add	sp, fp, #0
   10cb8:	pop	{fp}		; (ldr fp, [sp], #4)
   10cbc:	bx	lr
   10cc0:	str	fp, [sp, #-8]!
   10cc4:	str	lr, [sp, #4]
   10cc8:	add	fp, sp, #4
   10ccc:	sub	sp, sp, #8
   10cd0:	str	r0, [fp, #-8]
   10cd4:	ldr	r3, [fp, #-8]
   10cd8:	ldr	r3, [r3]
   10cdc:	mov	r0, r3
   10ce0:	bl	10c9c <_start@@Base+0x32c>
   10ce4:	mov	r3, r0
   10ce8:	mov	r0, r3
   10cec:	sub	sp, fp, #4
   10cf0:	ldr	fp, [sp]
   10cf4:	add	sp, sp, #4
   10cf8:	pop	{pc}		; (ldr pc, [sp], #4)
   10cfc:	push	{fp}		; (str fp, [sp, #-4]!)
   10d00:	add	fp, sp, #0
   10d04:	sub	sp, sp, #12
   10d08:	strd	r0, [fp, #-12]
   10d0c:	ldrd	r2, [fp, #-12]
   10d10:	mov	r0, r2
   10d14:	mov	r1, r3
   10d18:	add	sp, fp, #0
   10d1c:	pop	{fp}		; (ldr fp, [sp], #4)
   10d20:	bx	lr
   10d24:	str	fp, [sp, #-8]!
   10d28:	str	lr, [sp, #4]
   10d2c:	add	fp, sp, #4
   10d30:	sub	sp, sp, #8
   10d34:	str	r0, [fp, #-8]
   10d38:	ldr	r3, [fp, #-8]
   10d3c:	ldrd	r2, [r3]
   10d40:	mov	r0, r2
   10d44:	mov	r1, r3
   10d48:	bl	10cfc <_start@@Base+0x38c>
   10d4c:	mov	r2, r0
   10d50:	mov	r3, r1
   10d54:	mov	r0, r2
   10d58:	mov	r1, r3
   10d5c:	sub	sp, fp, #4
   10d60:	ldr	fp, [sp]
   10d64:	add	sp, sp, #4
   10d68:	pop	{pc}		; (ldr pc, [sp], #4)
   10d6c:	push	{fp}		; (str fp, [sp, #-4]!)
   10d70:	add	fp, sp, #0
   10d74:	sub	sp, sp, #20
   10d78:	vstr	d0, [fp, #-20]	; 0xffffffec
   10d7c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   10d80:	strd	r2, [fp, #-12]
   10d84:	ldrd	r2, [fp, #-12]
   10d88:	strd	r2, [fp, #-12]
   10d8c:	ldrd	r2, [fp, #-12]
   10d90:	vmov	d7, r2, r3
   10d94:	vmov.f64	d0, d7
   10d98:	add	sp, fp, #0
   10d9c:	pop	{fp}		; (ldr fp, [sp], #4)
   10da0:	bx	lr
   10da4:	str	fp, [sp, #-8]!
   10da8:	str	lr, [sp, #4]
   10dac:	add	fp, sp, #4
   10db0:	sub	sp, sp, #8
   10db4:	str	r0, [fp, #-8]
   10db8:	ldr	r3, [fp, #-8]
   10dbc:	vldr	d7, [r3]
   10dc0:	vmov.f64	d0, d7
   10dc4:	bl	10d6c <_start@@Base+0x3fc>
   10dc8:	vmov.f64	d7, d0
   10dcc:	vmov.f64	d0, d7
   10dd0:	sub	sp, fp, #4
   10dd4:	ldr	fp, [sp]
   10dd8:	add	sp, sp, #4
   10ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   10de0:	push	{fp}		; (str fp, [sp, #-4]!)
   10de4:	add	fp, sp, #0
   10de8:	sub	sp, sp, #12
   10dec:	mov	r3, r0
   10df0:	strb	r3, [fp, #-5]
   10df4:	ldrb	r3, [fp, #-5]
   10df8:	mov	r0, r3
   10dfc:	add	sp, fp, #0
   10e00:	pop	{fp}		; (ldr fp, [sp], #4)
   10e04:	bx	lr
   10e08:	str	fp, [sp, #-8]!
   10e0c:	str	lr, [sp, #4]
   10e10:	add	fp, sp, #4
   10e14:	sub	sp, sp, #8
   10e18:	str	r0, [fp, #-8]
   10e1c:	ldr	r3, [fp, #-8]
   10e20:	ldrb	r3, [r3]
   10e24:	mov	r0, r3
   10e28:	bl	10de0 <_start@@Base+0x470>
   10e2c:	mov	r3, r0
   10e30:	mov	r0, r3
   10e34:	sub	sp, fp, #4
   10e38:	ldr	fp, [sp]
   10e3c:	add	sp, sp, #4
   10e40:	pop	{pc}		; (ldr pc, [sp], #4)
   10e44:	push	{fp}		; (str fp, [sp, #-4]!)
   10e48:	add	fp, sp, #0
   10e4c:	sub	sp, sp, #12
   10e50:	str	r0, [fp, #-8]
   10e54:	ldr	r3, [fp, #-8]
   10e58:	mov	r0, r3
   10e5c:	add	sp, fp, #0
   10e60:	pop	{fp}		; (ldr fp, [sp], #4)
   10e64:	bx	lr
   10e68:	str	fp, [sp, #-8]!
   10e6c:	str	lr, [sp, #4]
   10e70:	add	fp, sp, #4
   10e74:	sub	sp, sp, #8
   10e78:	str	r0, [fp, #-8]
   10e7c:	ldr	r3, [fp, #-8]
   10e80:	ldr	r3, [r3]
   10e84:	mov	r0, r3
   10e88:	bl	10e44 <_start@@Base+0x4d4>
   10e8c:	mov	r3, r0
   10e90:	mov	r0, r3
   10e94:	sub	sp, fp, #4
   10e98:	ldr	fp, [sp]
   10e9c:	add	sp, sp, #4
   10ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   10ea4:	push	{fp}		; (str fp, [sp, #-4]!)
   10ea8:	add	fp, sp, #0
   10eac:	sub	sp, sp, #12
   10eb0:	str	r0, [fp, #-8]
   10eb4:	ldr	r3, [fp, #-8]
   10eb8:	mov	r0, r3
   10ebc:	add	sp, fp, #0
   10ec0:	pop	{fp}		; (ldr fp, [sp], #4)
   10ec4:	bx	lr
   10ec8:	str	fp, [sp, #-8]!
   10ecc:	str	lr, [sp, #4]
   10ed0:	add	fp, sp, #4
   10ed4:	sub	sp, sp, #8
   10ed8:	str	r0, [fp, #-8]
   10edc:	ldr	r3, [fp, #-8]
   10ee0:	ldr	r3, [r3]
   10ee4:	mov	r0, r3
   10ee8:	bl	10ea4 <_start@@Base+0x534>
   10eec:	mov	r3, r0
   10ef0:	mov	r0, r3
   10ef4:	sub	sp, fp, #4
   10ef8:	ldr	fp, [sp]
   10efc:	add	sp, sp, #4
   10f00:	pop	{pc}		; (ldr pc, [sp], #4)
   10f04:	push	{fp}		; (str fp, [sp, #-4]!)
   10f08:	add	fp, sp, #0
   10f0c:	sub	sp, sp, #12
   10f10:	mov	r3, r0
   10f14:	strh	r3, [fp, #-6]
   10f18:	ldrh	r3, [fp, #-6]
   10f1c:	mov	r0, r3
   10f20:	add	sp, fp, #0
   10f24:	pop	{fp}		; (ldr fp, [sp], #4)
   10f28:	bx	lr
   10f2c:	str	fp, [sp, #-8]!
   10f30:	str	lr, [sp, #4]
   10f34:	add	fp, sp, #4
   10f38:	sub	sp, sp, #8
   10f3c:	str	r0, [fp, #-8]
   10f40:	ldr	r3, [fp, #-8]
   10f44:	ldrh	r3, [r3]
   10f48:	mov	r0, r3
   10f4c:	bl	10f04 <_start@@Base+0x594>
   10f50:	mov	r3, r0
   10f54:	mov	r0, r3
   10f58:	sub	sp, fp, #4
   10f5c:	ldr	fp, [sp]
   10f60:	add	sp, sp, #4
   10f64:	pop	{pc}		; (ldr pc, [sp], #4)
   10f68:	push	{fp}		; (str fp, [sp, #-4]!)
   10f6c:	add	fp, sp, #0
   10f70:	sub	sp, sp, #12
   10f74:	str	r0, [fp, #-8]
   10f78:	ldr	r3, [fp, #-8]
   10f7c:	mov	r0, r3
   10f80:	add	sp, fp, #0
   10f84:	pop	{fp}		; (ldr fp, [sp], #4)
   10f88:	bx	lr
   10f8c:	push	{fp}		; (str fp, [sp, #-4]!)
   10f90:	add	fp, sp, #0
   10f94:	sub	sp, sp, #12
   10f98:	str	r0, [fp, #-8]
   10f9c:	ldr	r3, [fp, #-8]
   10fa0:	mov	r0, r3
   10fa4:	add	sp, fp, #0
   10fa8:	pop	{fp}		; (ldr fp, [sp], #4)
   10fac:	bx	lr
   10fb0:	str	fp, [sp, #-8]!
   10fb4:	str	lr, [sp, #4]
   10fb8:	add	fp, sp, #4
   10fbc:	sub	sp, sp, #8
   10fc0:	str	r0, [fp, #-8]
   10fc4:	ldr	r3, [fp, #-8]
   10fc8:	ldr	r3, [r3]
   10fcc:	mov	r0, r3
   10fd0:	bl	10f68 <_start@@Base+0x5f8>
   10fd4:	mov	r3, r0
   10fd8:	mov	r0, r3
   10fdc:	sub	sp, fp, #4
   10fe0:	ldr	fp, [sp]
   10fe4:	add	sp, sp, #4
   10fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   10fec:	str	fp, [sp, #-8]!
   10ff0:	str	lr, [sp, #4]
   10ff4:	add	fp, sp, #4
   10ff8:	sub	sp, sp, #8
   10ffc:	str	r0, [fp, #-8]
   11000:	ldr	r3, [fp, #-8]
   11004:	cmp	r3, #0
   11008:	beq	11024 <_start@@Base+0x6b4>
   1100c:	ldr	r3, [fp, #-8]
   11010:	sub	r3, r3, #4
   11014:	mov	r0, r3
   11018:	bl	10e68 <_start@@Base+0x4f8>
   1101c:	mov	r3, r0
   11020:	b	11028 <_start@@Base+0x6b8>
   11024:	mov	r3, #0
   11028:	mov	r0, r3
   1102c:	sub	sp, fp, #4
   11030:	ldr	fp, [sp]
   11034:	add	sp, sp, #4
   11038:	pop	{pc}		; (ldr pc, [sp], #4)
   1103c:	str	fp, [sp, #-8]!
   11040:	str	lr, [sp, #4]
   11044:	add	fp, sp, #4
   11048:	sub	sp, sp, #16
   1104c:	str	r0, [fp, #-16]
   11050:	str	r1, [fp, #-20]	; 0xffffffec
   11054:	mov	r3, #0
   11058:	str	r3, [fp, #-12]
   1105c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11060:	cmp	r3, #0
   11064:	bne	11070 <_start@@Base+0x700>
   11068:	mov	r3, #1
   1106c:	b	110d4 <_start@@Base+0x764>
   11070:	sub	r3, fp, #12
   11074:	mov	r2, #4
   11078:	ldr	r1, [fp, #-20]	; 0xffffffec
   1107c:	mov	r0, r3
   11080:	bl	10930 <strncpy@plt>
   11084:	ldr	r3, [fp, #-12]
   11088:	mov	r0, r3
   1108c:	bl	10f8c <_start@@Base+0x61c>
   11090:	mov	r3, r0
   11094:	str	r3, [fp, #-12]
   11098:	ldr	r3, [fp, #-16]
   1109c:	add	r3, r3, #4
   110a0:	mov	r0, r3
   110a4:	bl	10fb0 <_start@@Base+0x640>
   110a8:	str	r0, [fp, #-8]
   110ac:	ldr	r3, [fp, #-12]
   110b0:	cmp	r3, #0
   110b4:	beq	110c8 <_start@@Base+0x758>
   110b8:	ldr	r3, [fp, #-12]
   110bc:	ldr	r2, [fp, #-8]
   110c0:	cmp	r2, r3
   110c4:	bne	110d0 <_start@@Base+0x760>
   110c8:	mov	r3, #1
   110cc:	b	110d4 <_start@@Base+0x764>
   110d0:	mov	r3, #0
   110d4:	mov	r0, r3
   110d8:	sub	sp, fp, #4
   110dc:	ldr	fp, [sp]
   110e0:	add	sp, sp, #4
   110e4:	pop	{pc}		; (ldr pc, [sp], #4)
   110e8:	push	{fp}		; (str fp, [sp, #-4]!)
   110ec:	add	fp, sp, #0
   110f0:	sub	sp, sp, #12
   110f4:	mov	r3, r0
   110f8:	strb	r3, [fp, #-5]
   110fc:	ldrsb	r3, [fp, #-5]
   11100:	mov	r0, r3
   11104:	add	sp, fp, #0
   11108:	pop	{fp}		; (ldr fp, [sp], #4)
   1110c:	bx	lr
   11110:	str	fp, [sp, #-8]!
   11114:	str	lr, [sp, #4]
   11118:	add	fp, sp, #4
   1111c:	sub	sp, sp, #8
   11120:	str	r0, [fp, #-8]
   11124:	ldr	r3, [fp, #-8]
   11128:	ldrsb	r3, [r3]
   1112c:	mov	r0, r3
   11130:	bl	110e8 <_start@@Base+0x778>
   11134:	mov	r3, r0
   11138:	mov	r0, r3
   1113c:	sub	sp, fp, #4
   11140:	ldr	fp, [sp]
   11144:	add	sp, sp, #4
   11148:	pop	{pc}		; (ldr pc, [sp], #4)
   1114c:	push	{fp}		; (str fp, [sp, #-4]!)
   11150:	add	fp, sp, #0
   11154:	sub	sp, sp, #12
   11158:	mov	r3, r0
   1115c:	strb	r3, [fp, #-5]
   11160:	ldrsb	r3, [fp, #-5]
   11164:	cmp	r3, #16
   11168:	addls	pc, pc, r3, lsl #2
   1116c:	b	11280 <_start@@Base+0x910>
   11170:	b	111b4 <_start@@Base+0x844>
   11174:	b	111c0 <_start@@Base+0x850>
   11178:	b	111cc <_start@@Base+0x85c>
   1117c:	b	111d8 <_start@@Base+0x868>
   11180:	b	111e4 <_start@@Base+0x874>
   11184:	b	111f0 <_start@@Base+0x880>
   11188:	b	111fc <_start@@Base+0x88c>
   1118c:	b	11208 <_start@@Base+0x898>
   11190:	b	11214 <_start@@Base+0x8a4>
   11194:	b	11220 <_start@@Base+0x8b0>
   11198:	b	1122c <_start@@Base+0x8bc>
   1119c:	b	11238 <_start@@Base+0x8c8>
   111a0:	b	11244 <_start@@Base+0x8d4>
   111a4:	b	11250 <_start@@Base+0x8e0>
   111a8:	b	1125c <_start@@Base+0x8ec>
   111ac:	b	11268 <_start@@Base+0x8f8>
   111b0:	b	11274 <_start@@Base+0x904>
   111b4:	ldr	r3, [pc, #220]	; 11298 <_start@@Base+0x928>
   111b8:	add	r3, pc, r3
   111bc:	b	11288 <_start@@Base+0x918>
   111c0:	ldr	r3, [pc, #212]	; 1129c <_start@@Base+0x92c>
   111c4:	add	r3, pc, r3
   111c8:	b	11288 <_start@@Base+0x918>
   111cc:	ldr	r3, [pc, #204]	; 112a0 <_start@@Base+0x930>
   111d0:	add	r3, pc, r3
   111d4:	b	11288 <_start@@Base+0x918>
   111d8:	ldr	r3, [pc, #196]	; 112a4 <_start@@Base+0x934>
   111dc:	add	r3, pc, r3
   111e0:	b	11288 <_start@@Base+0x918>
   111e4:	ldr	r3, [pc, #188]	; 112a8 <_start@@Base+0x938>
   111e8:	add	r3, pc, r3
   111ec:	b	11288 <_start@@Base+0x918>
   111f0:	ldr	r3, [pc, #180]	; 112ac <_start@@Base+0x93c>
   111f4:	add	r3, pc, r3
   111f8:	b	11288 <_start@@Base+0x918>
   111fc:	ldr	r3, [pc, #172]	; 112b0 <_start@@Base+0x940>
   11200:	add	r3, pc, r3
   11204:	b	11288 <_start@@Base+0x918>
   11208:	ldr	r3, [pc, #164]	; 112b4 <_start@@Base+0x944>
   1120c:	add	r3, pc, r3
   11210:	b	11288 <_start@@Base+0x918>
   11214:	ldr	r3, [pc, #156]	; 112b8 <_start@@Base+0x948>
   11218:	add	r3, pc, r3
   1121c:	b	11288 <_start@@Base+0x918>
   11220:	ldr	r3, [pc, #148]	; 112bc <_start@@Base+0x94c>
   11224:	add	r3, pc, r3
   11228:	b	11288 <_start@@Base+0x918>
   1122c:	ldr	r3, [pc, #140]	; 112c0 <_start@@Base+0x950>
   11230:	add	r3, pc, r3
   11234:	b	11288 <_start@@Base+0x918>
   11238:	ldr	r3, [pc, #132]	; 112c4 <_start@@Base+0x954>
   1123c:	add	r3, pc, r3
   11240:	b	11288 <_start@@Base+0x918>
   11244:	ldr	r3, [pc, #124]	; 112c8 <_start@@Base+0x958>
   11248:	add	r3, pc, r3
   1124c:	b	11288 <_start@@Base+0x918>
   11250:	ldr	r3, [pc, #116]	; 112cc <_start@@Base+0x95c>
   11254:	add	r3, pc, r3
   11258:	b	11288 <_start@@Base+0x918>
   1125c:	ldr	r3, [pc, #108]	; 112d0 <_start@@Base+0x960>
   11260:	add	r3, pc, r3
   11264:	b	11288 <_start@@Base+0x918>
   11268:	ldr	r3, [pc, #100]	; 112d4 <_start@@Base+0x964>
   1126c:	add	r3, pc, r3
   11270:	b	11288 <_start@@Base+0x918>
   11274:	ldr	r3, [pc, #92]	; 112d8 <_start@@Base+0x968>
   11278:	add	r3, pc, r3
   1127c:	b	11288 <_start@@Base+0x918>
   11280:	ldr	r3, [pc, #84]	; 112dc <_start@@Base+0x96c>
   11284:	add	r3, pc, r3
   11288:	mov	r0, r3
   1128c:	add	sp, fp, #0
   11290:	pop	{fp}		; (ldr fp, [sp], #4)
   11294:	bx	lr
   11298:	andeq	r3, r0, ip, lsl ip
   1129c:	andeq	r3, r0, r8, lsl ip
   112a0:	andeq	r3, r0, r4, lsl ip
   112a4:	andeq	r3, r0, r0, lsl ip
   112a8:	andeq	r3, r0, ip, lsl #24
   112ac:	andeq	r3, r0, r8, lsl #24
   112b0:	andeq	r3, r0, r4, lsl #24
   112b4:	andeq	r3, r0, r0, lsl #24
   112b8:	strdeq	r3, [r0], -r8
   112bc:	strdeq	r3, [r0], -r4
   112c0:	strdeq	r3, [r0], -r0
   112c4:	andeq	r3, r0, ip, ror #23
   112c8:	andeq	r3, r0, r8, ror #23
   112cc:	andeq	r3, r0, r4, ror #23
   112d0:	andeq	r3, r0, r0, ror #23
   112d4:	ldrdeq	r3, [r0], -ip
   112d8:	ldrdeq	r3, [r0], -r4
   112dc:	ldrdeq	r3, [r0], -r0
   112e0:	str	fp, [sp, #-8]!
   112e4:	str	lr, [sp, #4]
   112e8:	add	fp, sp, #4
   112ec:	sub	sp, sp, #16
   112f0:	str	r0, [fp, #-16]
   112f4:	mov	r3, #0
   112f8:	strh	r3, [fp, #-6]
   112fc:	ldr	r3, [fp, #-16]
   11300:	cmp	r3, #0
   11304:	bne	11328 <_start@@Base+0x9b8>
   11308:	ldr	r3, [pc, #196]	; 113d4 <_start@@Base+0xa64>
   1130c:	add	r3, pc, r3
   11310:	mov	r2, #147	; 0x93
   11314:	ldr	r1, [pc, #188]	; 113d8 <_start@@Base+0xa68>
   11318:	add	r1, pc, r1
   1131c:	ldr	r0, [pc, #184]	; 113dc <_start@@Base+0xa6c>
   11320:	add	r0, pc, r0
   11324:	bl	10960 <__assert_fail@plt>
   11328:	mov	r3, #0
   1132c:	strh	r3, [fp, #-8]
   11330:	ldr	r0, [fp, #-16]
   11334:	bl	10ec8 <_start@@Base+0x558>
   11338:	mov	r3, r0
   1133c:	rsb	r3, r3, #0
   11340:	ldr	r2, [fp, #-16]
   11344:	add	r3, r2, r3
   11348:	str	r3, [fp, #-12]
   1134c:	ldr	r0, [fp, #-12]
   11350:	bl	10f2c <_start@@Base+0x5bc>
   11354:	mov	r3, r0
   11358:	mov	r2, r3
   1135c:	ldrh	r3, [fp, #-8]
   11360:	add	r3, r3, #3
   11364:	lsl	r3, r3, #1
   11368:	cmp	r2, r3
   1136c:	bcc	11394 <_start@@Base+0xa24>
   11370:	ldrh	r3, [fp, #-8]
   11374:	add	r3, r3, #2
   11378:	lsl	r3, r3, #1
   1137c:	ldr	r2, [fp, #-12]
   11380:	add	r3, r2, r3
   11384:	mov	r0, r3
   11388:	bl	10f2c <_start@@Base+0x5bc>
   1138c:	mov	r3, r0
   11390:	strh	r3, [fp, #-6]
   11394:	ldrh	r3, [fp, #-6]
   11398:	cmp	r3, #0
   1139c:	beq	113bc <_start@@Base+0xa4c>
   113a0:	ldrh	r3, [fp, #-6]
   113a4:	ldr	r2, [fp, #-16]
   113a8:	add	r3, r2, r3
   113ac:	mov	r0, r3
   113b0:	bl	11110 <_start@@Base+0x7a0>
   113b4:	mov	r3, r0
   113b8:	b	113c0 <_start@@Base+0xa50>
   113bc:	mov	r3, #0
   113c0:	mov	r0, r3
   113c4:	sub	sp, fp, #4
   113c8:	ldr	fp, [sp]
   113cc:	add	sp, sp, #4
   113d0:	pop	{pc}		; (ldr pc, [sp], #4)
   113d4:	strdeq	r3, [r0], -r0
   113d8:	andeq	r3, r0, r0, asr #22
   113dc:			; <UNDEFINED> instruction: 0x00003bb0
   113e0:	str	fp, [sp, #-8]!
   113e4:	str	lr, [sp, #4]
   113e8:	add	fp, sp, #4
   113ec:	sub	sp, sp, #16
   113f0:	str	r0, [fp, #-16]
   113f4:	mov	r3, #0
   113f8:	strh	r3, [fp, #-6]
   113fc:	ldr	r3, [fp, #-16]
   11400:	cmp	r3, #0
   11404:	bne	11428 <_start@@Base+0xab8>
   11408:	ldr	r3, [pc, #172]	; 114bc <_start@@Base+0xb4c>
   1140c:	add	r3, pc, r3
   11410:	mov	r2, #147	; 0x93
   11414:	ldr	r1, [pc, #164]	; 114c0 <_start@@Base+0xb50>
   11418:	add	r1, pc, r1
   1141c:	ldr	r0, [pc, #160]	; 114c4 <_start@@Base+0xb54>
   11420:	add	r0, pc, r0
   11424:	bl	10960 <__assert_fail@plt>
   11428:	mov	r3, #0
   1142c:	strh	r3, [fp, #-8]
   11430:	ldr	r0, [fp, #-16]
   11434:	bl	10ec8 <_start@@Base+0x558>
   11438:	mov	r3, r0
   1143c:	rsb	r3, r3, #0
   11440:	ldr	r2, [fp, #-16]
   11444:	add	r3, r2, r3
   11448:	str	r3, [fp, #-12]
   1144c:	ldr	r0, [fp, #-12]
   11450:	bl	10f2c <_start@@Base+0x5bc>
   11454:	mov	r3, r0
   11458:	mov	r2, r3
   1145c:	ldrh	r3, [fp, #-8]
   11460:	add	r3, r3, #3
   11464:	lsl	r3, r3, #1
   11468:	cmp	r2, r3
   1146c:	bcc	11494 <_start@@Base+0xb24>
   11470:	ldrh	r3, [fp, #-8]
   11474:	add	r3, r3, #2
   11478:	lsl	r3, r3, #1
   1147c:	ldr	r2, [fp, #-12]
   11480:	add	r3, r2, r3
   11484:	mov	r0, r3
   11488:	bl	10f2c <_start@@Base+0x5bc>
   1148c:	mov	r3, r0
   11490:	strh	r3, [fp, #-6]
   11494:	ldrh	r3, [fp, #-6]
   11498:	cmp	r3, #0
   1149c:	movne	r3, #1
   114a0:	moveq	r3, #0
   114a4:	uxtb	r3, r3
   114a8:	mov	r0, r3
   114ac:	sub	sp, fp, #4
   114b0:	ldr	fp, [sp]
   114b4:	add	sp, sp, #4
   114b8:	pop	{pc}		; (ldr pc, [sp], #4)
   114bc:	andeq	r3, r0, r4, lsr #29
   114c0:	andeq	r3, r0, r0, asr #20
   114c4:			; <UNDEFINED> instruction: 0x00003ab0
   114c8:	str	fp, [sp, #-8]!
   114cc:	str	lr, [sp, #4]
   114d0:	add	fp, sp, #4
   114d4:	sub	sp, sp, #16
   114d8:	str	r0, [fp, #-16]
   114dc:	mov	r3, #0
   114e0:	strh	r3, [fp, #-6]
   114e4:	ldr	r3, [fp, #-16]
   114e8:	cmp	r3, #0
   114ec:	bne	11510 <_start@@Base+0xba0>
   114f0:	ldr	r3, [pc, #172]	; 115a4 <_start@@Base+0xc34>
   114f4:	add	r3, pc, r3
   114f8:	mov	r2, #148	; 0x94
   114fc:	ldr	r1, [pc, #164]	; 115a8 <_start@@Base+0xc38>
   11500:	add	r1, pc, r1
   11504:	ldr	r0, [pc, #160]	; 115ac <_start@@Base+0xc3c>
   11508:	add	r0, pc, r0
   1150c:	bl	10960 <__assert_fail@plt>
   11510:	mov	r3, #1
   11514:	strh	r3, [fp, #-8]
   11518:	ldr	r0, [fp, #-16]
   1151c:	bl	10ec8 <_start@@Base+0x558>
   11520:	mov	r3, r0
   11524:	rsb	r3, r3, #0
   11528:	ldr	r2, [fp, #-16]
   1152c:	add	r3, r2, r3
   11530:	str	r3, [fp, #-12]
   11534:	ldr	r0, [fp, #-12]
   11538:	bl	10f2c <_start@@Base+0x5bc>
   1153c:	mov	r3, r0
   11540:	mov	r2, r3
   11544:	ldrh	r3, [fp, #-8]
   11548:	add	r3, r3, #3
   1154c:	lsl	r3, r3, #1
   11550:	cmp	r2, r3
   11554:	bcc	1157c <_start@@Base+0xc0c>
   11558:	ldrh	r3, [fp, #-8]
   1155c:	add	r3, r3, #2
   11560:	lsl	r3, r3, #1
   11564:	ldr	r2, [fp, #-12]
   11568:	add	r3, r2, r3
   1156c:	mov	r0, r3
   11570:	bl	10f2c <_start@@Base+0x5bc>
   11574:	mov	r3, r0
   11578:	strh	r3, [fp, #-6]
   1157c:	ldrh	r3, [fp, #-6]
   11580:	cmp	r3, #0
   11584:	movne	r3, #1
   11588:	moveq	r3, #0
   1158c:	uxtb	r3, r3
   11590:	mov	r0, r3
   11594:	sub	sp, fp, #4
   11598:	ldr	fp, [sp]
   1159c:	add	sp, sp, #4
   115a0:	pop	{pc}		; (ldr pc, [sp], #4)
   115a4:	andeq	r3, r0, r4, ror #27
   115a8:	andeq	r3, r0, r8, asr r9
   115ac:	andeq	r3, r0, r8, asr #19
   115b0:	str	fp, [sp, #-8]!
   115b4:	str	lr, [sp, #4]
   115b8:	add	fp, sp, #4
   115bc:	sub	sp, sp, #16
   115c0:	str	r0, [fp, #-16]
   115c4:	mov	r3, #0
   115c8:	strh	r3, [fp, #-6]
   115cc:	ldr	r3, [fp, #-16]
   115d0:	cmp	r3, #0
   115d4:	bne	115f8 <_start@@Base+0xc88>
   115d8:	ldr	r3, [pc, #196]	; 116a4 <_start@@Base+0xd34>
   115dc:	add	r3, pc, r3
   115e0:	mov	r2, #149	; 0x95
   115e4:	ldr	r1, [pc, #188]	; 116a8 <_start@@Base+0xd38>
   115e8:	add	r1, pc, r1
   115ec:	ldr	r0, [pc, #184]	; 116ac <_start@@Base+0xd3c>
   115f0:	add	r0, pc, r0
   115f4:	bl	10960 <__assert_fail@plt>
   115f8:	mov	r3, #2
   115fc:	strh	r3, [fp, #-8]
   11600:	ldr	r0, [fp, #-16]
   11604:	bl	10ec8 <_start@@Base+0x558>
   11608:	mov	r3, r0
   1160c:	rsb	r3, r3, #0
   11610:	ldr	r2, [fp, #-16]
   11614:	add	r3, r2, r3
   11618:	str	r3, [fp, #-12]
   1161c:	ldr	r0, [fp, #-12]
   11620:	bl	10f2c <_start@@Base+0x5bc>
   11624:	mov	r3, r0
   11628:	mov	r2, r3
   1162c:	ldrh	r3, [fp, #-8]
   11630:	add	r3, r3, #3
   11634:	lsl	r3, r3, #1
   11638:	cmp	r2, r3
   1163c:	bcc	11664 <_start@@Base+0xcf4>
   11640:	ldrh	r3, [fp, #-8]
   11644:	add	r3, r3, #2
   11648:	lsl	r3, r3, #1
   1164c:	ldr	r2, [fp, #-12]
   11650:	add	r3, r2, r3
   11654:	mov	r0, r3
   11658:	bl	10f2c <_start@@Base+0x5bc>
   1165c:	mov	r3, r0
   11660:	strh	r3, [fp, #-6]
   11664:	ldrh	r3, [fp, #-6]
   11668:	cmp	r3, #0
   1166c:	beq	1168c <_start@@Base+0xd1c>
   11670:	ldrh	r3, [fp, #-6]
   11674:	ldr	r2, [fp, #-16]
   11678:	add	r3, r2, r3
   1167c:	mov	r0, r3
   11680:	bl	10cc0 <_start@@Base+0x350>
   11684:	mov	r3, r0
   11688:	b	11690 <_start@@Base+0xd20>
   1168c:	mvn	r3, #0
   11690:	mov	r0, r3
   11694:	sub	sp, fp, #4
   11698:	ldr	fp, [sp]
   1169c:	add	sp, sp, #4
   116a0:	pop	{pc}		; (ldr pc, [sp], #4)
   116a4:	andeq	r3, r0, r0, ror #26
   116a8:	andeq	r3, r0, r0, ror r8
   116ac:	andeq	r3, r0, r0, ror #17
   116b0:	str	fp, [sp, #-8]!
   116b4:	str	lr, [sp, #4]
   116b8:	add	fp, sp, #4
   116bc:	sub	sp, sp, #16
   116c0:	str	r0, [fp, #-16]
   116c4:	mov	r3, #0
   116c8:	strh	r3, [fp, #-6]
   116cc:	ldr	r3, [fp, #-16]
   116d0:	cmp	r3, #0
   116d4:	bne	116f8 <_start@@Base+0xd88>
   116d8:	ldr	r3, [pc, #172]	; 1178c <_start@@Base+0xe1c>
   116dc:	add	r3, pc, r3
   116e0:	mov	r2, #149	; 0x95
   116e4:	ldr	r1, [pc, #164]	; 11790 <_start@@Base+0xe20>
   116e8:	add	r1, pc, r1
   116ec:	ldr	r0, [pc, #160]	; 11794 <_start@@Base+0xe24>
   116f0:	add	r0, pc, r0
   116f4:	bl	10960 <__assert_fail@plt>
   116f8:	mov	r3, #2
   116fc:	strh	r3, [fp, #-8]
   11700:	ldr	r0, [fp, #-16]
   11704:	bl	10ec8 <_start@@Base+0x558>
   11708:	mov	r3, r0
   1170c:	rsb	r3, r3, #0
   11710:	ldr	r2, [fp, #-16]
   11714:	add	r3, r2, r3
   11718:	str	r3, [fp, #-12]
   1171c:	ldr	r0, [fp, #-12]
   11720:	bl	10f2c <_start@@Base+0x5bc>
   11724:	mov	r3, r0
   11728:	mov	r2, r3
   1172c:	ldrh	r3, [fp, #-8]
   11730:	add	r3, r3, #3
   11734:	lsl	r3, r3, #1
   11738:	cmp	r2, r3
   1173c:	bcc	11764 <_start@@Base+0xdf4>
   11740:	ldrh	r3, [fp, #-8]
   11744:	add	r3, r3, #2
   11748:	lsl	r3, r3, #1
   1174c:	ldr	r2, [fp, #-12]
   11750:	add	r3, r2, r3
   11754:	mov	r0, r3
   11758:	bl	10f2c <_start@@Base+0x5bc>
   1175c:	mov	r3, r0
   11760:	strh	r3, [fp, #-6]
   11764:	ldrh	r3, [fp, #-6]
   11768:	cmp	r3, #0
   1176c:	movne	r3, #1
   11770:	moveq	r3, #0
   11774:	uxtb	r3, r3
   11778:	mov	r0, r3
   1177c:	sub	sp, fp, #4
   11780:	ldr	fp, [sp]
   11784:	add	sp, sp, #4
   11788:	pop	{pc}		; (ldr pc, [sp], #4)
   1178c:	andeq	r3, r0, ip, lsr ip
   11790:	andeq	r3, r0, r0, ror r7
   11794:	andeq	r3, r0, r0, ror #15
   11798:	str	fp, [sp, #-8]!
   1179c:	str	lr, [sp, #4]
   117a0:	add	fp, sp, #4
   117a4:	sub	sp, sp, #16
   117a8:	str	r0, [fp, #-16]
   117ac:	str	r1, [fp, #-20]	; 0xffffffec
   117b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   117b4:	lsl	r3, r3, #2
   117b8:	ldr	r2, [fp, #-16]
   117bc:	add	r3, r2, r3
   117c0:	str	r3, [fp, #-8]
   117c4:	ldr	r0, [fp, #-16]
   117c8:	bl	10fec <_start@@Base+0x67c>
   117cc:	mov	r2, r0
   117d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   117d4:	cmp	r3, r2
   117d8:	bcc	117fc <_start@@Base+0xe8c>
   117dc:	ldr	r3, [pc, #64]	; 11824 <_start@@Base+0xeb4>
   117e0:	add	r3, pc, r3
   117e4:	mov	r2, #156	; 0x9c
   117e8:	ldr	r1, [pc, #56]	; 11828 <_start@@Base+0xeb8>
   117ec:	add	r1, pc, r1
   117f0:	ldr	r0, [pc, #52]	; 1182c <_start@@Base+0xebc>
   117f4:	add	r0, pc, r0
   117f8:	bl	10960 <__assert_fail@plt>
   117fc:	ldr	r0, [fp, #-8]
   11800:	bl	10e68 <_start@@Base+0x4f8>
   11804:	mov	r2, r0
   11808:	ldr	r3, [fp, #-8]
   1180c:	add	r3, r3, r2
   11810:	mov	r0, r3
   11814:	sub	sp, fp, #4
   11818:	ldr	fp, [sp]
   1181c:	add	sp, sp, #4
   11820:	pop	{pc}		; (ldr pc, [sp], #4)
   11824:	andeq	r3, r0, r8, lsr lr
   11828:	andeq	r3, r0, ip, ror #12
   1182c:	andeq	r3, r0, r4, lsl #14
   11830:	str	fp, [sp, #-8]!
   11834:	str	lr, [sp, #4]
   11838:	add	fp, sp, #4
   1183c:	sub	sp, sp, #24
   11840:	str	r0, [fp, #-24]	; 0xffffffe8
   11844:	mov	r3, #0
   11848:	strh	r3, [fp, #-6]
   1184c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11850:	cmp	r3, #0
   11854:	bne	11878 <_start@@Base+0xf08>
   11858:	ldr	r3, [pc, #240]	; 11950 <_start@@Base+0xfe0>
   1185c:	add	r3, pc, r3
   11860:	mov	r2, #159	; 0x9f
   11864:	ldr	r1, [pc, #232]	; 11954 <_start@@Base+0xfe4>
   11868:	add	r1, pc, r1
   1186c:	ldr	r0, [pc, #228]	; 11958 <_start@@Base+0xfe8>
   11870:	add	r0, pc, r0
   11874:	bl	10960 <__assert_fail@plt>
   11878:	mov	r3, #0
   1187c:	strh	r3, [fp, #-8]
   11880:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11884:	bl	10ec8 <_start@@Base+0x558>
   11888:	mov	r3, r0
   1188c:	rsb	r3, r3, #0
   11890:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11894:	add	r3, r2, r3
   11898:	str	r3, [fp, #-12]
   1189c:	ldr	r0, [fp, #-12]
   118a0:	bl	10f2c <_start@@Base+0x5bc>
   118a4:	mov	r3, r0
   118a8:	mov	r2, r3
   118ac:	ldrh	r3, [fp, #-8]
   118b0:	add	r3, r3, #3
   118b4:	lsl	r3, r3, #1
   118b8:	cmp	r2, r3
   118bc:	bcc	118e4 <_start@@Base+0xf74>
   118c0:	ldrh	r3, [fp, #-8]
   118c4:	add	r3, r3, #2
   118c8:	lsl	r3, r3, #1
   118cc:	ldr	r2, [fp, #-12]
   118d0:	add	r3, r2, r3
   118d4:	mov	r0, r3
   118d8:	bl	10f2c <_start@@Base+0x5bc>
   118dc:	mov	r3, r0
   118e0:	strh	r3, [fp, #-6]
   118e4:	ldrh	r3, [fp, #-6]
   118e8:	cmp	r3, #0
   118ec:	beq	1191c <_start@@Base+0xfac>
   118f0:	ldrh	r3, [fp, #-6]
   118f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   118f8:	add	r3, r2, r3
   118fc:	str	r3, [fp, #-16]
   11900:	ldr	r0, [fp, #-16]
   11904:	bl	10e68 <_start@@Base+0x4f8>
   11908:	mov	r3, r0
   1190c:	add	r3, r3, #4
   11910:	ldr	r2, [fp, #-16]
   11914:	add	r3, r2, r3
   11918:	b	1193c <_start@@Base+0xfcc>
   1191c:	ldr	r3, [pc, #56]	; 1195c <_start@@Base+0xfec>
   11920:	add	r3, pc, r3
   11924:	mov	r2, #159	; 0x9f
   11928:	ldr	r1, [pc, #48]	; 11960 <_start@@Base+0xff0>
   1192c:	add	r1, pc, r1
   11930:	ldr	r0, [pc, #44]	; 11964 <_start@@Base+0xff4>
   11934:	add	r0, pc, r0
   11938:	bl	10960 <__assert_fail@plt>
   1193c:	mov	r0, r3
   11940:	sub	sp, fp, #4
   11944:	ldr	fp, [sp]
   11948:	add	sp, sp, #4
   1194c:	pop	{pc}		; (ldr pc, [sp], #4)
   11950:	ldrdeq	r3, [r0], -r8
   11954:	strdeq	r3, [r0], -r0
   11958:	andeq	r3, r0, r0, ror #12
   1195c:	andeq	r3, r0, r4, lsl sp
   11960:	andeq	r3, r0, ip, lsr #10
   11964:	strdeq	r3, [r0], -ip
   11968:	str	fp, [sp, #-8]!
   1196c:	str	lr, [sp, #4]
   11970:	add	fp, sp, #4
   11974:	sub	sp, sp, #16
   11978:	str	r0, [fp, #-16]
   1197c:	mov	r3, #0
   11980:	strh	r3, [fp, #-6]
   11984:	ldr	r3, [fp, #-16]
   11988:	cmp	r3, #0
   1198c:	bne	119b0 <_start@@Base+0x1040>
   11990:	ldr	r3, [pc, #208]	; 11a68 <_start@@Base+0x10f8>
   11994:	add	r3, pc, r3
   11998:	mov	r2, #160	; 0xa0
   1199c:	ldr	r1, [pc, #200]	; 11a6c <_start@@Base+0x10fc>
   119a0:	add	r1, pc, r1
   119a4:	ldr	r0, [pc, #196]	; 11a70 <_start@@Base+0x1100>
   119a8:	add	r0, pc, r0
   119ac:	bl	10960 <__assert_fail@plt>
   119b0:	mov	r3, #1
   119b4:	strh	r3, [fp, #-8]
   119b8:	ldr	r0, [fp, #-16]
   119bc:	bl	10ec8 <_start@@Base+0x558>
   119c0:	mov	r3, r0
   119c4:	rsb	r3, r3, #0
   119c8:	ldr	r2, [fp, #-16]
   119cc:	add	r3, r2, r3
   119d0:	str	r3, [fp, #-12]
   119d4:	ldr	r0, [fp, #-12]
   119d8:	bl	10f2c <_start@@Base+0x5bc>
   119dc:	mov	r3, r0
   119e0:	mov	r2, r3
   119e4:	ldrh	r3, [fp, #-8]
   119e8:	add	r3, r3, #3
   119ec:	lsl	r3, r3, #1
   119f0:	cmp	r2, r3
   119f4:	bcc	11a1c <_start@@Base+0x10ac>
   119f8:	ldrh	r3, [fp, #-8]
   119fc:	add	r3, r3, #2
   11a00:	lsl	r3, r3, #1
   11a04:	ldr	r2, [fp, #-12]
   11a08:	add	r3, r2, r3
   11a0c:	mov	r0, r3
   11a10:	bl	10f2c <_start@@Base+0x5bc>
   11a14:	mov	r3, r0
   11a18:	strh	r3, [fp, #-6]
   11a1c:	ldrh	r3, [fp, #-6]
   11a20:	cmp	r3, #0
   11a24:	beq	11a48 <_start@@Base+0x10d8>
   11a28:	ldrh	r3, [fp, #-6]
   11a2c:	ldr	r2, [fp, #-16]
   11a30:	add	r3, r2, r3
   11a34:	mov	r0, r3
   11a38:	bl	10d24 <_start@@Base+0x3b4>
   11a3c:	mov	r2, r0
   11a40:	mov	r3, r1
   11a44:	b	11a50 <_start@@Base+0x10e0>
   11a48:	mov	r2, #0
   11a4c:	mov	r3, #0
   11a50:	mov	r0, r2
   11a54:	mov	r1, r3
   11a58:	sub	sp, fp, #4
   11a5c:	ldr	fp, [sp]
   11a60:	add	sp, sp, #4
   11a64:	pop	{pc}		; (ldr pc, [sp], #4)
   11a68:	ldrdeq	r3, [r0], -ip
   11a6c:			; <UNDEFINED> instruction: 0x000034b8
   11a70:	andeq	r3, r0, r8, lsr #10
   11a74:	str	fp, [sp, #-8]!
   11a78:	str	lr, [sp, #4]
   11a7c:	add	fp, sp, #4
   11a80:	sub	sp, sp, #16
   11a84:	str	r0, [fp, #-16]
   11a88:	mov	r3, #0
   11a8c:	strh	r3, [fp, #-6]
   11a90:	ldr	r3, [fp, #-16]
   11a94:	cmp	r3, #0
   11a98:	bne	11abc <_start@@Base+0x114c>
   11a9c:	ldr	r3, [pc, #172]	; 11b50 <_start@@Base+0x11e0>
   11aa0:	add	r3, pc, r3
   11aa4:	mov	r2, #160	; 0xa0
   11aa8:	ldr	r1, [pc, #164]	; 11b54 <_start@@Base+0x11e4>
   11aac:	add	r1, pc, r1
   11ab0:	ldr	r0, [pc, #160]	; 11b58 <_start@@Base+0x11e8>
   11ab4:	add	r0, pc, r0
   11ab8:	bl	10960 <__assert_fail@plt>
   11abc:	mov	r3, #1
   11ac0:	strh	r3, [fp, #-8]
   11ac4:	ldr	r0, [fp, #-16]
   11ac8:	bl	10ec8 <_start@@Base+0x558>
   11acc:	mov	r3, r0
   11ad0:	rsb	r3, r3, #0
   11ad4:	ldr	r2, [fp, #-16]
   11ad8:	add	r3, r2, r3
   11adc:	str	r3, [fp, #-12]
   11ae0:	ldr	r0, [fp, #-12]
   11ae4:	bl	10f2c <_start@@Base+0x5bc>
   11ae8:	mov	r3, r0
   11aec:	mov	r2, r3
   11af0:	ldrh	r3, [fp, #-8]
   11af4:	add	r3, r3, #3
   11af8:	lsl	r3, r3, #1
   11afc:	cmp	r2, r3
   11b00:	bcc	11b28 <_start@@Base+0x11b8>
   11b04:	ldrh	r3, [fp, #-8]
   11b08:	add	r3, r3, #2
   11b0c:	lsl	r3, r3, #1
   11b10:	ldr	r2, [fp, #-12]
   11b14:	add	r3, r2, r3
   11b18:	mov	r0, r3
   11b1c:	bl	10f2c <_start@@Base+0x5bc>
   11b20:	mov	r3, r0
   11b24:	strh	r3, [fp, #-6]
   11b28:	ldrh	r3, [fp, #-6]
   11b2c:	cmp	r3, #0
   11b30:	movne	r3, #1
   11b34:	moveq	r3, #0
   11b38:	uxtb	r3, r3
   11b3c:	mov	r0, r3
   11b40:	sub	sp, fp, #4
   11b44:	ldr	fp, [sp]
   11b48:	add	sp, sp, #4
   11b4c:	pop	{pc}		; (ldr pc, [sp], #4)
   11b50:	andeq	r3, r0, ip, lsr #23
   11b54:	andeq	r3, r0, ip, lsr #7
   11b58:	andeq	r3, r0, ip, lsl r4
   11b5c:	str	fp, [sp, #-8]!
   11b60:	str	lr, [sp, #4]
   11b64:	add	fp, sp, #4
   11b68:	sub	sp, sp, #24
   11b6c:	str	r0, [fp, #-24]	; 0xffffffe8
   11b70:	mov	r3, #0
   11b74:	strh	r3, [fp, #-6]
   11b78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b7c:	cmp	r3, #0
   11b80:	bne	11ba4 <_start@@Base+0x1234>
   11b84:	ldr	r3, [pc, #208]	; 11c5c <_start@@Base+0x12ec>
   11b88:	add	r3, pc, r3
   11b8c:	mov	r2, #167	; 0xa7
   11b90:	ldr	r1, [pc, #200]	; 11c60 <_start@@Base+0x12f0>
   11b94:	add	r1, pc, r1
   11b98:	ldr	r0, [pc, #196]	; 11c64 <_start@@Base+0x12f4>
   11b9c:	add	r0, pc, r0
   11ba0:	bl	10960 <__assert_fail@plt>
   11ba4:	mov	r3, #2
   11ba8:	strh	r3, [fp, #-8]
   11bac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11bb0:	bl	10ec8 <_start@@Base+0x558>
   11bb4:	mov	r3, r0
   11bb8:	rsb	r3, r3, #0
   11bbc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11bc0:	add	r3, r2, r3
   11bc4:	str	r3, [fp, #-12]
   11bc8:	ldr	r0, [fp, #-12]
   11bcc:	bl	10f2c <_start@@Base+0x5bc>
   11bd0:	mov	r3, r0
   11bd4:	mov	r2, r3
   11bd8:	ldrh	r3, [fp, #-8]
   11bdc:	add	r3, r3, #3
   11be0:	lsl	r3, r3, #1
   11be4:	cmp	r2, r3
   11be8:	bcc	11c10 <_start@@Base+0x12a0>
   11bec:	ldrh	r3, [fp, #-8]
   11bf0:	add	r3, r3, #2
   11bf4:	lsl	r3, r3, #1
   11bf8:	ldr	r2, [fp, #-12]
   11bfc:	add	r3, r2, r3
   11c00:	mov	r0, r3
   11c04:	bl	10f2c <_start@@Base+0x5bc>
   11c08:	mov	r3, r0
   11c0c:	strh	r3, [fp, #-6]
   11c10:	ldrh	r3, [fp, #-6]
   11c14:	cmp	r3, #0
   11c18:	beq	11c44 <_start@@Base+0x12d4>
   11c1c:	ldrh	r3, [fp, #-6]
   11c20:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11c24:	add	r3, r2, r3
   11c28:	str	r3, [fp, #-16]
   11c2c:	ldr	r0, [fp, #-16]
   11c30:	bl	10e68 <_start@@Base+0x4f8>
   11c34:	mov	r2, r0
   11c38:	ldr	r3, [fp, #-16]
   11c3c:	add	r3, r3, r2
   11c40:	b	11c48 <_start@@Base+0x12d8>
   11c44:	mov	r3, #0
   11c48:	mov	r0, r3
   11c4c:	sub	sp, fp, #4
   11c50:	ldr	fp, [sp]
   11c54:	add	sp, sp, #4
   11c58:	pop	{pc}		; (ldr pc, [sp], #4)
   11c5c:	andeq	r3, r0, ip, lsr #22
   11c60:	andeq	r3, r0, r4, asr #5
   11c64:	andeq	r3, r0, r4, lsr r3
   11c68:	str	fp, [sp, #-8]!
   11c6c:	str	lr, [sp, #4]
   11c70:	add	fp, sp, #4
   11c74:	sub	sp, sp, #16
   11c78:	str	r0, [fp, #-16]
   11c7c:	mov	r3, #0
   11c80:	strh	r3, [fp, #-6]
   11c84:	ldr	r3, [fp, #-16]
   11c88:	cmp	r3, #0
   11c8c:	bne	11cb0 <_start@@Base+0x1340>
   11c90:	ldr	r3, [pc, #172]	; 11d44 <_start@@Base+0x13d4>
   11c94:	add	r3, pc, r3
   11c98:	mov	r2, #167	; 0xa7
   11c9c:	ldr	r1, [pc, #164]	; 11d48 <_start@@Base+0x13d8>
   11ca0:	add	r1, pc, r1
   11ca4:	ldr	r0, [pc, #160]	; 11d4c <_start@@Base+0x13dc>
   11ca8:	add	r0, pc, r0
   11cac:	bl	10960 <__assert_fail@plt>
   11cb0:	mov	r3, #2
   11cb4:	strh	r3, [fp, #-8]
   11cb8:	ldr	r0, [fp, #-16]
   11cbc:	bl	10ec8 <_start@@Base+0x558>
   11cc0:	mov	r3, r0
   11cc4:	rsb	r3, r3, #0
   11cc8:	ldr	r2, [fp, #-16]
   11ccc:	add	r3, r2, r3
   11cd0:	str	r3, [fp, #-12]
   11cd4:	ldr	r0, [fp, #-12]
   11cd8:	bl	10f2c <_start@@Base+0x5bc>
   11cdc:	mov	r3, r0
   11ce0:	mov	r2, r3
   11ce4:	ldrh	r3, [fp, #-8]
   11ce8:	add	r3, r3, #3
   11cec:	lsl	r3, r3, #1
   11cf0:	cmp	r2, r3
   11cf4:	bcc	11d1c <_start@@Base+0x13ac>
   11cf8:	ldrh	r3, [fp, #-8]
   11cfc:	add	r3, r3, #2
   11d00:	lsl	r3, r3, #1
   11d04:	ldr	r2, [fp, #-12]
   11d08:	add	r3, r2, r3
   11d0c:	mov	r0, r3
   11d10:	bl	10f2c <_start@@Base+0x5bc>
   11d14:	mov	r3, r0
   11d18:	strh	r3, [fp, #-6]
   11d1c:	ldrh	r3, [fp, #-6]
   11d20:	cmp	r3, #0
   11d24:	movne	r3, #1
   11d28:	moveq	r3, #0
   11d2c:	uxtb	r3, r3
   11d30:	mov	r0, r3
   11d34:	sub	sp, fp, #4
   11d38:	ldr	fp, [sp]
   11d3c:	add	sp, sp, #4
   11d40:	pop	{pc}		; (ldr pc, [sp], #4)
   11d44:	strdeq	r3, [r0], -r8
   11d48:			; <UNDEFINED> instruction: 0x000031b8
   11d4c:	andeq	r3, r0, r8, lsr #4
   11d50:	str	fp, [sp, #-8]!
   11d54:	str	lr, [sp, #4]
   11d58:	add	fp, sp, #4
   11d5c:	sub	sp, sp, #8
   11d60:	str	r0, [fp, #-8]
   11d64:	ldr	r3, [fp, #-8]
   11d68:	cmp	r3, #0
   11d6c:	beq	11d88 <_start@@Base+0x1418>
   11d70:	ldr	r3, [fp, #-8]
   11d74:	sub	r3, r3, #4
   11d78:	mov	r0, r3
   11d7c:	bl	10e68 <_start@@Base+0x4f8>
   11d80:	mov	r3, r0
   11d84:	b	11d8c <_start@@Base+0x141c>
   11d88:	mov	r3, #0
   11d8c:	mov	r0, r3
   11d90:	sub	sp, fp, #4
   11d94:	ldr	fp, [sp]
   11d98:	add	sp, sp, #4
   11d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   11da0:	str	fp, [sp, #-8]!
   11da4:	str	lr, [sp, #4]
   11da8:	add	fp, sp, #4
   11dac:	sub	sp, sp, #16
   11db0:	str	r0, [fp, #-16]
   11db4:	str	r1, [fp, #-20]	; 0xffffffec
   11db8:	ldr	r3, [fp, #-20]	; 0xffffffec
   11dbc:	lsl	r3, r3, #2
   11dc0:	ldr	r2, [fp, #-16]
   11dc4:	add	r3, r2, r3
   11dc8:	str	r3, [fp, #-8]
   11dcc:	ldr	r0, [fp, #-16]
   11dd0:	bl	10fec <_start@@Base+0x67c>
   11dd4:	mov	r2, r0
   11dd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   11ddc:	cmp	r3, r2
   11de0:	bcc	11e04 <_start@@Base+0x1494>
   11de4:	ldr	r3, [pc, #64]	; 11e2c <_start@@Base+0x14bc>
   11de8:	add	r3, pc, r3
   11dec:	mov	r2, #174	; 0xae
   11df0:	ldr	r1, [pc, #56]	; 11e30 <_start@@Base+0x14c0>
   11df4:	add	r1, pc, r1
   11df8:	ldr	r0, [pc, #52]	; 11e34 <_start@@Base+0x14c4>
   11dfc:	add	r0, pc, r0
   11e00:	bl	10960 <__assert_fail@plt>
   11e04:	ldr	r0, [fp, #-8]
   11e08:	bl	10e68 <_start@@Base+0x4f8>
   11e0c:	mov	r2, r0
   11e10:	ldr	r3, [fp, #-8]
   11e14:	add	r3, r3, r2
   11e18:	mov	r0, r3
   11e1c:	sub	sp, fp, #4
   11e20:	ldr	fp, [sp]
   11e24:	add	sp, sp, #4
   11e28:	pop	{pc}		; (ldr pc, [sp], #4)
   11e2c:	muleq	r0, r8, r9
   11e30:	andeq	r3, r0, r4, rrx
   11e34:	strdeq	r3, [r0], -ip
   11e38:	str	fp, [sp, #-8]!
   11e3c:	str	lr, [sp, #4]
   11e40:	add	fp, sp, #4
   11e44:	sub	sp, sp, #24
   11e48:	str	r0, [fp, #-24]	; 0xffffffe8
   11e4c:	mov	r3, #0
   11e50:	strh	r3, [fp, #-6]
   11e54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e58:	cmp	r3, #0
   11e5c:	bne	11e80 <_start@@Base+0x1510>
   11e60:	ldr	r3, [pc, #240]	; 11f58 <_start@@Base+0x15e8>
   11e64:	add	r3, pc, r3
   11e68:	mov	r2, #177	; 0xb1
   11e6c:	ldr	r1, [pc, #232]	; 11f5c <_start@@Base+0x15ec>
   11e70:	add	r1, pc, r1
   11e74:	ldr	r0, [pc, #228]	; 11f60 <_start@@Base+0x15f0>
   11e78:	add	r0, pc, r0
   11e7c:	bl	10960 <__assert_fail@plt>
   11e80:	mov	r3, #0
   11e84:	strh	r3, [fp, #-8]
   11e88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11e8c:	bl	10ec8 <_start@@Base+0x558>
   11e90:	mov	r3, r0
   11e94:	rsb	r3, r3, #0
   11e98:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11e9c:	add	r3, r2, r3
   11ea0:	str	r3, [fp, #-12]
   11ea4:	ldr	r0, [fp, #-12]
   11ea8:	bl	10f2c <_start@@Base+0x5bc>
   11eac:	mov	r3, r0
   11eb0:	mov	r2, r3
   11eb4:	ldrh	r3, [fp, #-8]
   11eb8:	add	r3, r3, #3
   11ebc:	lsl	r3, r3, #1
   11ec0:	cmp	r2, r3
   11ec4:	bcc	11eec <_start@@Base+0x157c>
   11ec8:	ldrh	r3, [fp, #-8]
   11ecc:	add	r3, r3, #2
   11ed0:	lsl	r3, r3, #1
   11ed4:	ldr	r2, [fp, #-12]
   11ed8:	add	r3, r2, r3
   11edc:	mov	r0, r3
   11ee0:	bl	10f2c <_start@@Base+0x5bc>
   11ee4:	mov	r3, r0
   11ee8:	strh	r3, [fp, #-6]
   11eec:	ldrh	r3, [fp, #-6]
   11ef0:	cmp	r3, #0
   11ef4:	beq	11f24 <_start@@Base+0x15b4>
   11ef8:	ldrh	r3, [fp, #-6]
   11efc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11f00:	add	r3, r2, r3
   11f04:	str	r3, [fp, #-16]
   11f08:	ldr	r0, [fp, #-16]
   11f0c:	bl	10e68 <_start@@Base+0x4f8>
   11f10:	mov	r3, r0
   11f14:	add	r3, r3, #4
   11f18:	ldr	r2, [fp, #-16]
   11f1c:	add	r3, r2, r3
   11f20:	b	11f44 <_start@@Base+0x15d4>
   11f24:	ldr	r3, [pc, #56]	; 11f64 <_start@@Base+0x15f4>
   11f28:	add	r3, pc, r3
   11f2c:	mov	r2, #177	; 0xb1
   11f30:	ldr	r1, [pc, #48]	; 11f68 <_start@@Base+0x15f8>
   11f34:	add	r1, pc, r1
   11f38:	ldr	r0, [pc, #44]	; 11f6c <_start@@Base+0x15fc>
   11f3c:	add	r0, pc, r0
   11f40:	bl	10960 <__assert_fail@plt>
   11f44:	mov	r0, r3
   11f48:	sub	sp, fp, #4
   11f4c:	ldr	fp, [sp]
   11f50:	add	sp, sp, #4
   11f54:	pop	{pc}		; (ldr pc, [sp], #4)
   11f58:	andeq	r3, r0, r4, lsl #15
   11f5c:	andeq	r2, r0, r8, ror #31
   11f60:	andeq	r3, r0, r8, asr r0
   11f64:	andeq	r3, r0, r0, asr #13
   11f68:	andeq	r2, r0, r4, lsr #30
   11f6c:	strdeq	r2, [r0], -r4
   11f70:	str	fp, [sp, #-8]!
   11f74:	str	lr, [sp, #4]
   11f78:	add	fp, sp, #4
   11f7c:	sub	sp, sp, #24
   11f80:	str	r0, [fp, #-24]	; 0xffffffe8
   11f84:	mov	r3, #0
   11f88:	strh	r3, [fp, #-6]
   11f8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f90:	cmp	r3, #0
   11f94:	bne	11fb8 <_start@@Base+0x1648>
   11f98:	ldr	r3, [pc, #240]	; 12090 <_start@@Base+0x1720>
   11f9c:	add	r3, pc, r3
   11fa0:	mov	r2, #183	; 0xb7
   11fa4:	ldr	r1, [pc, #232]	; 12094 <_start@@Base+0x1724>
   11fa8:	add	r1, pc, r1
   11fac:	ldr	r0, [pc, #228]	; 12098 <_start@@Base+0x1728>
   11fb0:	add	r0, pc, r0
   11fb4:	bl	10960 <__assert_fail@plt>
   11fb8:	mov	r3, #1
   11fbc:	strh	r3, [fp, #-8]
   11fc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11fc4:	bl	10ec8 <_start@@Base+0x558>
   11fc8:	mov	r3, r0
   11fcc:	rsb	r3, r3, #0
   11fd0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11fd4:	add	r3, r2, r3
   11fd8:	str	r3, [fp, #-12]
   11fdc:	ldr	r0, [fp, #-12]
   11fe0:	bl	10f2c <_start@@Base+0x5bc>
   11fe4:	mov	r3, r0
   11fe8:	mov	r2, r3
   11fec:	ldrh	r3, [fp, #-8]
   11ff0:	add	r3, r3, #3
   11ff4:	lsl	r3, r3, #1
   11ff8:	cmp	r2, r3
   11ffc:	bcc	12024 <_start@@Base+0x16b4>
   12000:	ldrh	r3, [fp, #-8]
   12004:	add	r3, r3, #2
   12008:	lsl	r3, r3, #1
   1200c:	ldr	r2, [fp, #-12]
   12010:	add	r3, r2, r3
   12014:	mov	r0, r3
   12018:	bl	10f2c <_start@@Base+0x5bc>
   1201c:	mov	r3, r0
   12020:	strh	r3, [fp, #-6]
   12024:	ldrh	r3, [fp, #-6]
   12028:	cmp	r3, #0
   1202c:	beq	1205c <_start@@Base+0x16ec>
   12030:	ldrh	r3, [fp, #-6]
   12034:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12038:	add	r3, r2, r3
   1203c:	str	r3, [fp, #-16]
   12040:	ldr	r0, [fp, #-16]
   12044:	bl	10e68 <_start@@Base+0x4f8>
   12048:	mov	r3, r0
   1204c:	add	r3, r3, #4
   12050:	ldr	r2, [fp, #-16]
   12054:	add	r3, r2, r3
   12058:	b	1207c <_start@@Base+0x170c>
   1205c:	ldr	r3, [pc, #56]	; 1209c <_start@@Base+0x172c>
   12060:	add	r3, pc, r3
   12064:	mov	r2, #183	; 0xb7
   12068:	ldr	r1, [pc, #48]	; 120a0 <_start@@Base+0x1730>
   1206c:	add	r1, pc, r1
   12070:	ldr	r0, [pc, #44]	; 120a4 <_start@@Base+0x1734>
   12074:	add	r0, pc, r0
   12078:	bl	10960 <__assert_fail@plt>
   1207c:	mov	r0, r3
   12080:	sub	sp, fp, #4
   12084:	ldr	fp, [sp]
   12088:	add	sp, sp, #4
   1208c:	pop	{pc}		; (ldr pc, [sp], #4)
   12090:	andeq	r3, r0, r4, ror #12
   12094:			; <UNDEFINED> instruction: 0x00002eb0
   12098:	andeq	r2, r0, r0, lsr #30
   1209c:	andeq	r3, r0, r0, lsr #11
   120a0:	andeq	r2, r0, ip, ror #27
   120a4:			; <UNDEFINED> instruction: 0x00002ebc
   120a8:	str	fp, [sp, #-8]!
   120ac:	str	lr, [sp, #4]
   120b0:	add	fp, sp, #4
   120b4:	sub	sp, sp, #16
   120b8:	str	r0, [fp, #-16]
   120bc:	mov	r3, #0
   120c0:	strh	r3, [fp, #-6]
   120c4:	ldr	r3, [fp, #-16]
   120c8:	cmp	r3, #0
   120cc:	bne	120f0 <_start@@Base+0x1780>
   120d0:	ldr	r3, [pc, #196]	; 1219c <_start@@Base+0x182c>
   120d4:	add	r3, pc, r3
   120d8:	mov	r2, #184	; 0xb8
   120dc:	ldr	r1, [pc, #188]	; 121a0 <_start@@Base+0x1830>
   120e0:	add	r1, pc, r1
   120e4:	ldr	r0, [pc, #184]	; 121a4 <_start@@Base+0x1834>
   120e8:	add	r0, pc, r0
   120ec:	bl	10960 <__assert_fail@plt>
   120f0:	mov	r3, #2
   120f4:	strh	r3, [fp, #-8]
   120f8:	ldr	r0, [fp, #-16]
   120fc:	bl	10ec8 <_start@@Base+0x558>
   12100:	mov	r3, r0
   12104:	rsb	r3, r3, #0
   12108:	ldr	r2, [fp, #-16]
   1210c:	add	r3, r2, r3
   12110:	str	r3, [fp, #-12]
   12114:	ldr	r0, [fp, #-12]
   12118:	bl	10f2c <_start@@Base+0x5bc>
   1211c:	mov	r3, r0
   12120:	mov	r2, r3
   12124:	ldrh	r3, [fp, #-8]
   12128:	add	r3, r3, #3
   1212c:	lsl	r3, r3, #1
   12130:	cmp	r2, r3
   12134:	bcc	1215c <_start@@Base+0x17ec>
   12138:	ldrh	r3, [fp, #-8]
   1213c:	add	r3, r3, #2
   12140:	lsl	r3, r3, #1
   12144:	ldr	r2, [fp, #-12]
   12148:	add	r3, r2, r3
   1214c:	mov	r0, r3
   12150:	bl	10f2c <_start@@Base+0x5bc>
   12154:	mov	r3, r0
   12158:	strh	r3, [fp, #-6]
   1215c:	ldrh	r3, [fp, #-6]
   12160:	cmp	r3, #0
   12164:	beq	12184 <_start@@Base+0x1814>
   12168:	ldrh	r3, [fp, #-6]
   1216c:	ldr	r2, [fp, #-16]
   12170:	add	r3, r2, r3
   12174:	mov	r0, r3
   12178:	bl	10e08 <_start@@Base+0x498>
   1217c:	mov	r3, r0
   12180:	b	12188 <_start@@Base+0x1818>
   12184:	mov	r3, #0
   12188:	mov	r0, r3
   1218c:	sub	sp, fp, #4
   12190:	ldr	fp, [sp]
   12194:	add	sp, sp, #4
   12198:	pop	{pc}		; (ldr pc, [sp], #4)
   1219c:	andeq	r3, r0, r0, lsr #12
   121a0:	andeq	r2, r0, r8, ror sp
   121a4:	andeq	r2, r0, r8, ror #27
   121a8:	str	fp, [sp, #-8]!
   121ac:	str	lr, [sp, #4]
   121b0:	add	fp, sp, #4
   121b4:	sub	sp, sp, #16
   121b8:	str	r0, [fp, #-16]
   121bc:	mov	r3, #0
   121c0:	strh	r3, [fp, #-6]
   121c4:	ldr	r3, [fp, #-16]
   121c8:	cmp	r3, #0
   121cc:	bne	121f0 <_start@@Base+0x1880>
   121d0:	ldr	r3, [pc, #172]	; 12284 <_start@@Base+0x1914>
   121d4:	add	r3, pc, r3
   121d8:	mov	r2, #184	; 0xb8
   121dc:	ldr	r1, [pc, #164]	; 12288 <_start@@Base+0x1918>
   121e0:	add	r1, pc, r1
   121e4:	ldr	r0, [pc, #160]	; 1228c <_start@@Base+0x191c>
   121e8:	add	r0, pc, r0
   121ec:	bl	10960 <__assert_fail@plt>
   121f0:	mov	r3, #2
   121f4:	strh	r3, [fp, #-8]
   121f8:	ldr	r0, [fp, #-16]
   121fc:	bl	10ec8 <_start@@Base+0x558>
   12200:	mov	r3, r0
   12204:	rsb	r3, r3, #0
   12208:	ldr	r2, [fp, #-16]
   1220c:	add	r3, r2, r3
   12210:	str	r3, [fp, #-12]
   12214:	ldr	r0, [fp, #-12]
   12218:	bl	10f2c <_start@@Base+0x5bc>
   1221c:	mov	r3, r0
   12220:	mov	r2, r3
   12224:	ldrh	r3, [fp, #-8]
   12228:	add	r3, r3, #3
   1222c:	lsl	r3, r3, #1
   12230:	cmp	r2, r3
   12234:	bcc	1225c <_start@@Base+0x18ec>
   12238:	ldrh	r3, [fp, #-8]
   1223c:	add	r3, r3, #2
   12240:	lsl	r3, r3, #1
   12244:	ldr	r2, [fp, #-12]
   12248:	add	r3, r2, r3
   1224c:	mov	r0, r3
   12250:	bl	10f2c <_start@@Base+0x5bc>
   12254:	mov	r3, r0
   12258:	strh	r3, [fp, #-6]
   1225c:	ldrh	r3, [fp, #-6]
   12260:	cmp	r3, #0
   12264:	movne	r3, #1
   12268:	moveq	r3, #0
   1226c:	uxtb	r3, r3
   12270:	mov	r0, r3
   12274:	sub	sp, fp, #4
   12278:	ldr	fp, [sp]
   1227c:	add	sp, sp, #4
   12280:	pop	{pc}		; (ldr pc, [sp], #4)
   12284:	strdeq	r3, [r0], -ip
   12288:	andeq	r2, r0, r8, ror ip
   1228c:	andeq	r2, r0, r8, ror #25
   12290:	str	fp, [sp, #-8]!
   12294:	str	lr, [sp, #4]
   12298:	add	fp, sp, #4
   1229c:	sub	sp, sp, #24
   122a0:	str	r0, [fp, #-24]	; 0xffffffe8
   122a4:	mov	r3, #0
   122a8:	strh	r3, [fp, #-6]
   122ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   122b0:	cmp	r3, #0
   122b4:	bne	122d8 <_start@@Base+0x1968>
   122b8:	ldr	r3, [pc, #236]	; 123ac <_start@@Base+0x1a3c>
   122bc:	add	r3, pc, r3
   122c0:	mov	r2, #185	; 0xb9
   122c4:	ldr	r1, [pc, #228]	; 123b0 <_start@@Base+0x1a40>
   122c8:	add	r1, pc, r1
   122cc:	ldr	r0, [pc, #224]	; 123b4 <_start@@Base+0x1a44>
   122d0:	add	r0, pc, r0
   122d4:	bl	10960 <__assert_fail@plt>
   122d8:	mov	r3, #3
   122dc:	strh	r3, [fp, #-8]
   122e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   122e4:	bl	10ec8 <_start@@Base+0x558>
   122e8:	mov	r3, r0
   122ec:	rsb	r3, r3, #0
   122f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   122f4:	add	r3, r2, r3
   122f8:	str	r3, [fp, #-12]
   122fc:	ldr	r0, [fp, #-12]
   12300:	bl	10f2c <_start@@Base+0x5bc>
   12304:	mov	r3, r0
   12308:	mov	r2, r3
   1230c:	ldrh	r3, [fp, #-8]
   12310:	add	r3, r3, #3
   12314:	lsl	r3, r3, #1
   12318:	cmp	r2, r3
   1231c:	bcc	12344 <_start@@Base+0x19d4>
   12320:	ldrh	r3, [fp, #-8]
   12324:	add	r3, r3, #2
   12328:	lsl	r3, r3, #1
   1232c:	ldr	r2, [fp, #-12]
   12330:	add	r3, r2, r3
   12334:	mov	r0, r3
   12338:	bl	10f2c <_start@@Base+0x5bc>
   1233c:	mov	r3, r0
   12340:	strh	r3, [fp, #-6]
   12344:	ldrh	r3, [fp, #-6]
   12348:	cmp	r3, #0
   1234c:	beq	12378 <_start@@Base+0x1a08>
   12350:	ldrh	r3, [fp, #-6]
   12354:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12358:	add	r3, r2, r3
   1235c:	str	r3, [fp, #-16]
   12360:	ldr	r0, [fp, #-16]
   12364:	bl	10e68 <_start@@Base+0x4f8>
   12368:	mov	r2, r0
   1236c:	ldr	r3, [fp, #-16]
   12370:	add	r3, r3, r2
   12374:	b	12398 <_start@@Base+0x1a28>
   12378:	ldr	r3, [pc, #56]	; 123b8 <_start@@Base+0x1a48>
   1237c:	add	r3, pc, r3
   12380:	mov	r2, #185	; 0xb9
   12384:	ldr	r1, [pc, #48]	; 123bc <_start@@Base+0x1a4c>
   12388:	add	r1, pc, r1
   1238c:	ldr	r0, [pc, #44]	; 123c0 <_start@@Base+0x1a50>
   12390:	add	r0, pc, r0
   12394:	bl	10960 <__assert_fail@plt>
   12398:	mov	r0, r3
   1239c:	sub	sp, fp, #4
   123a0:	ldr	fp, [sp]
   123a4:	add	sp, sp, #4
   123a8:	pop	{pc}		; (ldr pc, [sp], #4)
   123ac:	andeq	r3, r0, r4, asr r4
   123b0:	muleq	r0, r0, fp
   123b4:	andeq	r2, r0, r0, lsl #24
   123b8:	muleq	r0, r4, r3
   123bc:	ldrdeq	r2, [r0], -r0
   123c0:	andeq	r2, r0, r0, lsr #23
   123c4:	str	fp, [sp, #-8]!
   123c8:	str	lr, [sp, #4]
   123cc:	add	fp, sp, #4
   123d0:	sub	sp, sp, #8
   123d4:	str	r0, [fp, #-8]
   123d8:	ldr	r3, [fp, #-8]
   123dc:	cmp	r3, #0
   123e0:	beq	123fc <_start@@Base+0x1a8c>
   123e4:	ldr	r3, [fp, #-8]
   123e8:	sub	r3, r3, #4
   123ec:	mov	r0, r3
   123f0:	bl	10e68 <_start@@Base+0x4f8>
   123f4:	mov	r3, r0
   123f8:	b	12400 <_start@@Base+0x1a90>
   123fc:	mov	r3, #0
   12400:	mov	r0, r3
   12404:	sub	sp, fp, #4
   12408:	ldr	fp, [sp]
   1240c:	add	sp, sp, #4
   12410:	pop	{pc}		; (ldr pc, [sp], #4)
   12414:	str	fp, [sp, #-8]!
   12418:	str	lr, [sp, #4]
   1241c:	add	fp, sp, #4
   12420:	sub	sp, sp, #16
   12424:	str	r0, [fp, #-16]
   12428:	str	r1, [fp, #-20]	; 0xffffffec
   1242c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12430:	lsl	r3, r3, #2
   12434:	ldr	r2, [fp, #-16]
   12438:	add	r3, r2, r3
   1243c:	str	r3, [fp, #-8]
   12440:	ldr	r0, [fp, #-16]
   12444:	bl	10fec <_start@@Base+0x67c>
   12448:	mov	r2, r0
   1244c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12450:	cmp	r3, r2
   12454:	bcc	12478 <_start@@Base+0x1b08>
   12458:	ldr	r3, [pc, #64]	; 124a0 <_start@@Base+0x1b30>
   1245c:	add	r3, pc, r3
   12460:	mov	r2, #192	; 0xc0
   12464:	ldr	r1, [pc, #56]	; 124a4 <_start@@Base+0x1b34>
   12468:	add	r1, pc, r1
   1246c:	ldr	r0, [pc, #52]	; 124a8 <_start@@Base+0x1b38>
   12470:	add	r0, pc, r0
   12474:	bl	10960 <__assert_fail@plt>
   12478:	ldr	r0, [fp, #-8]
   1247c:	bl	10e68 <_start@@Base+0x4f8>
   12480:	mov	r2, r0
   12484:	ldr	r3, [fp, #-8]
   12488:	add	r3, r3, r2
   1248c:	mov	r0, r3
   12490:	sub	sp, fp, #4
   12494:	ldr	fp, [sp]
   12498:	add	sp, sp, #4
   1249c:	pop	{pc}		; (ldr pc, [sp], #4)
   124a0:	andeq	r2, r0, ip, lsr #30
   124a4:	strdeq	r2, [r0], -r0
   124a8:	andeq	r2, r0, r8, lsl #21
   124ac:	str	fp, [sp, #-8]!
   124b0:	str	lr, [sp, #4]
   124b4:	add	fp, sp, #4
   124b8:	sub	sp, sp, #24
   124bc:	str	r0, [fp, #-24]	; 0xffffffe8
   124c0:	mov	r3, #0
   124c4:	strh	r3, [fp, #-6]
   124c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   124cc:	cmp	r3, #0
   124d0:	bne	124f4 <_start@@Base+0x1b84>
   124d4:	ldr	r3, [pc, #240]	; 125cc <_start@@Base+0x1c5c>
   124d8:	add	r3, pc, r3
   124dc:	mov	r2, #195	; 0xc3
   124e0:	ldr	r1, [pc, #232]	; 125d0 <_start@@Base+0x1c60>
   124e4:	add	r1, pc, r1
   124e8:	ldr	r0, [pc, #228]	; 125d4 <_start@@Base+0x1c64>
   124ec:	add	r0, pc, r0
   124f0:	bl	10960 <__assert_fail@plt>
   124f4:	mov	r3, #0
   124f8:	strh	r3, [fp, #-8]
   124fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12500:	bl	10ec8 <_start@@Base+0x558>
   12504:	mov	r3, r0
   12508:	rsb	r3, r3, #0
   1250c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12510:	add	r3, r2, r3
   12514:	str	r3, [fp, #-12]
   12518:	ldr	r0, [fp, #-12]
   1251c:	bl	10f2c <_start@@Base+0x5bc>
   12520:	mov	r3, r0
   12524:	mov	r2, r3
   12528:	ldrh	r3, [fp, #-8]
   1252c:	add	r3, r3, #3
   12530:	lsl	r3, r3, #1
   12534:	cmp	r2, r3
   12538:	bcc	12560 <_start@@Base+0x1bf0>
   1253c:	ldrh	r3, [fp, #-8]
   12540:	add	r3, r3, #2
   12544:	lsl	r3, r3, #1
   12548:	ldr	r2, [fp, #-12]
   1254c:	add	r3, r2, r3
   12550:	mov	r0, r3
   12554:	bl	10f2c <_start@@Base+0x5bc>
   12558:	mov	r3, r0
   1255c:	strh	r3, [fp, #-6]
   12560:	ldrh	r3, [fp, #-6]
   12564:	cmp	r3, #0
   12568:	beq	12598 <_start@@Base+0x1c28>
   1256c:	ldrh	r3, [fp, #-6]
   12570:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12574:	add	r3, r2, r3
   12578:	str	r3, [fp, #-16]
   1257c:	ldr	r0, [fp, #-16]
   12580:	bl	10e68 <_start@@Base+0x4f8>
   12584:	mov	r3, r0
   12588:	add	r3, r3, #4
   1258c:	ldr	r2, [fp, #-16]
   12590:	add	r3, r2, r3
   12594:	b	125b8 <_start@@Base+0x1c48>
   12598:	ldr	r3, [pc, #56]	; 125d8 <_start@@Base+0x1c68>
   1259c:	add	r3, pc, r3
   125a0:	mov	r2, #195	; 0xc3
   125a4:	ldr	r1, [pc, #48]	; 125dc <_start@@Base+0x1c6c>
   125a8:	add	r1, pc, r1
   125ac:	ldr	r0, [pc, #44]	; 125e0 <_start@@Base+0x1c70>
   125b0:	add	r0, pc, r0
   125b4:	bl	10960 <__assert_fail@plt>
   125b8:	mov	r0, r3
   125bc:	sub	sp, fp, #4
   125c0:	ldr	fp, [sp]
   125c4:	add	sp, sp, #4
   125c8:	pop	{pc}		; (ldr pc, [sp], #4)
   125cc:	andeq	r2, r0, r8, asr #29
   125d0:	andeq	r2, r0, r4, ror r9
   125d4:	andeq	r2, r0, r4, ror #19
   125d8:	andeq	r2, r0, r4, lsl #28
   125dc:			; <UNDEFINED> instruction: 0x000028b0
   125e0:	andeq	r2, r0, r0, lsl #19
   125e4:	str	fp, [sp, #-8]!
   125e8:	str	lr, [sp, #4]
   125ec:	add	fp, sp, #4
   125f0:	sub	sp, sp, #24
   125f4:	str	r0, [fp, #-24]	; 0xffffffe8
   125f8:	mov	r3, #0
   125fc:	strh	r3, [fp, #-6]
   12600:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12604:	cmp	r3, #0
   12608:	bne	1262c <_start@@Base+0x1cbc>
   1260c:	ldr	r3, [pc, #236]	; 12700 <_start@@Base+0x1d90>
   12610:	add	r3, pc, r3
   12614:	mov	r2, #201	; 0xc9
   12618:	ldr	r1, [pc, #228]	; 12704 <_start@@Base+0x1d94>
   1261c:	add	r1, pc, r1
   12620:	ldr	r0, [pc, #224]	; 12708 <_start@@Base+0x1d98>
   12624:	add	r0, pc, r0
   12628:	bl	10960 <__assert_fail@plt>
   1262c:	mov	r3, #1
   12630:	strh	r3, [fp, #-8]
   12634:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12638:	bl	10ec8 <_start@@Base+0x558>
   1263c:	mov	r3, r0
   12640:	rsb	r3, r3, #0
   12644:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12648:	add	r3, r2, r3
   1264c:	str	r3, [fp, #-12]
   12650:	ldr	r0, [fp, #-12]
   12654:	bl	10f2c <_start@@Base+0x5bc>
   12658:	mov	r3, r0
   1265c:	mov	r2, r3
   12660:	ldrh	r3, [fp, #-8]
   12664:	add	r3, r3, #3
   12668:	lsl	r3, r3, #1
   1266c:	cmp	r2, r3
   12670:	bcc	12698 <_start@@Base+0x1d28>
   12674:	ldrh	r3, [fp, #-8]
   12678:	add	r3, r3, #2
   1267c:	lsl	r3, r3, #1
   12680:	ldr	r2, [fp, #-12]
   12684:	add	r3, r2, r3
   12688:	mov	r0, r3
   1268c:	bl	10f2c <_start@@Base+0x5bc>
   12690:	mov	r3, r0
   12694:	strh	r3, [fp, #-6]
   12698:	ldrh	r3, [fp, #-6]
   1269c:	cmp	r3, #0
   126a0:	beq	126cc <_start@@Base+0x1d5c>
   126a4:	ldrh	r3, [fp, #-6]
   126a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   126ac:	add	r3, r2, r3
   126b0:	str	r3, [fp, #-16]
   126b4:	ldr	r0, [fp, #-16]
   126b8:	bl	10e68 <_start@@Base+0x4f8>
   126bc:	mov	r2, r0
   126c0:	ldr	r3, [fp, #-16]
   126c4:	add	r3, r3, r2
   126c8:	b	126ec <_start@@Base+0x1d7c>
   126cc:	ldr	r3, [pc, #56]	; 1270c <_start@@Base+0x1d9c>
   126d0:	add	r3, pc, r3
   126d4:	mov	r2, #201	; 0xc9
   126d8:	ldr	r1, [pc, #48]	; 12710 <_start@@Base+0x1da0>
   126dc:	add	r1, pc, r1
   126e0:	ldr	r0, [pc, #44]	; 12714 <_start@@Base+0x1da4>
   126e4:	add	r0, pc, r0
   126e8:	bl	10960 <__assert_fail@plt>
   126ec:	mov	r0, r3
   126f0:	sub	sp, fp, #4
   126f4:	ldr	fp, [sp]
   126f8:	add	sp, sp, #4
   126fc:	pop	{pc}		; (ldr pc, [sp], #4)
   12700:	andeq	r2, r0, r8, lsr #27
   12704:	andeq	r2, r0, ip, lsr r8
   12708:	andeq	r2, r0, ip, lsr #17
   1270c:	andeq	r2, r0, r8, ror #25
   12710:	andeq	r2, r0, ip, ror r7
   12714:	andeq	r2, r0, ip, asr #16
   12718:	str	fp, [sp, #-8]!
   1271c:	str	lr, [sp, #4]
   12720:	add	fp, sp, #4
   12724:	sub	sp, sp, #16
   12728:	str	r0, [fp, #-16]
   1272c:	mov	r3, #0
   12730:	strh	r3, [fp, #-6]
   12734:	ldr	r3, [fp, #-16]
   12738:	cmp	r3, #0
   1273c:	bne	12760 <_start@@Base+0x1df0>
   12740:	ldr	r3, [pc, #196]	; 1280c <_start@@Base+0x1e9c>
   12744:	add	r3, pc, r3
   12748:	mov	r2, #202	; 0xca
   1274c:	ldr	r1, [pc, #188]	; 12810 <_start@@Base+0x1ea0>
   12750:	add	r1, pc, r1
   12754:	ldr	r0, [pc, #184]	; 12814 <_start@@Base+0x1ea4>
   12758:	add	r0, pc, r0
   1275c:	bl	10960 <__assert_fail@plt>
   12760:	mov	r3, #2
   12764:	strh	r3, [fp, #-8]
   12768:	ldr	r0, [fp, #-16]
   1276c:	bl	10ec8 <_start@@Base+0x558>
   12770:	mov	r3, r0
   12774:	rsb	r3, r3, #0
   12778:	ldr	r2, [fp, #-16]
   1277c:	add	r3, r2, r3
   12780:	str	r3, [fp, #-12]
   12784:	ldr	r0, [fp, #-12]
   12788:	bl	10f2c <_start@@Base+0x5bc>
   1278c:	mov	r3, r0
   12790:	mov	r2, r3
   12794:	ldrh	r3, [fp, #-8]
   12798:	add	r3, r3, #3
   1279c:	lsl	r3, r3, #1
   127a0:	cmp	r2, r3
   127a4:	bcc	127cc <_start@@Base+0x1e5c>
   127a8:	ldrh	r3, [fp, #-8]
   127ac:	add	r3, r3, #2
   127b0:	lsl	r3, r3, #1
   127b4:	ldr	r2, [fp, #-12]
   127b8:	add	r3, r2, r3
   127bc:	mov	r0, r3
   127c0:	bl	10f2c <_start@@Base+0x5bc>
   127c4:	mov	r3, r0
   127c8:	strh	r3, [fp, #-6]
   127cc:	ldrh	r3, [fp, #-6]
   127d0:	cmp	r3, #0
   127d4:	beq	127f4 <_start@@Base+0x1e84>
   127d8:	ldrh	r3, [fp, #-6]
   127dc:	ldr	r2, [fp, #-16]
   127e0:	add	r3, r2, r3
   127e4:	mov	r0, r3
   127e8:	bl	10c60 <_start@@Base+0x2f0>
   127ec:	mov	r3, r0
   127f0:	b	127f8 <_start@@Base+0x1e88>
   127f4:	mov	r3, #0
   127f8:	mov	r0, r3
   127fc:	sub	sp, fp, #4
   12800:	ldr	fp, [sp]
   12804:	add	sp, sp, #4
   12808:	pop	{pc}		; (ldr pc, [sp], #4)
   1280c:	andeq	r2, r0, ip, lsr #25
   12810:	andeq	r2, r0, r8, lsl #14
   12814:	andeq	r2, r0, r8, ror r7
   12818:	str	fp, [sp, #-8]!
   1281c:	str	lr, [sp, #4]
   12820:	add	fp, sp, #4
   12824:	sub	sp, sp, #16
   12828:	str	r0, [fp, #-16]
   1282c:	mov	r3, #0
   12830:	strh	r3, [fp, #-6]
   12834:	ldr	r3, [fp, #-16]
   12838:	cmp	r3, #0
   1283c:	bne	12860 <_start@@Base+0x1ef0>
   12840:	ldr	r3, [pc, #172]	; 128f4 <_start@@Base+0x1f84>
   12844:	add	r3, pc, r3
   12848:	mov	r2, #202	; 0xca
   1284c:	ldr	r1, [pc, #164]	; 128f8 <_start@@Base+0x1f88>
   12850:	add	r1, pc, r1
   12854:	ldr	r0, [pc, #160]	; 128fc <_start@@Base+0x1f8c>
   12858:	add	r0, pc, r0
   1285c:	bl	10960 <__assert_fail@plt>
   12860:	mov	r3, #2
   12864:	strh	r3, [fp, #-8]
   12868:	ldr	r0, [fp, #-16]
   1286c:	bl	10ec8 <_start@@Base+0x558>
   12870:	mov	r3, r0
   12874:	rsb	r3, r3, #0
   12878:	ldr	r2, [fp, #-16]
   1287c:	add	r3, r2, r3
   12880:	str	r3, [fp, #-12]
   12884:	ldr	r0, [fp, #-12]
   12888:	bl	10f2c <_start@@Base+0x5bc>
   1288c:	mov	r3, r0
   12890:	mov	r2, r3
   12894:	ldrh	r3, [fp, #-8]
   12898:	add	r3, r3, #3
   1289c:	lsl	r3, r3, #1
   128a0:	cmp	r2, r3
   128a4:	bcc	128cc <_start@@Base+0x1f5c>
   128a8:	ldrh	r3, [fp, #-8]
   128ac:	add	r3, r3, #2
   128b0:	lsl	r3, r3, #1
   128b4:	ldr	r2, [fp, #-12]
   128b8:	add	r3, r2, r3
   128bc:	mov	r0, r3
   128c0:	bl	10f2c <_start@@Base+0x5bc>
   128c4:	mov	r3, r0
   128c8:	strh	r3, [fp, #-6]
   128cc:	ldrh	r3, [fp, #-6]
   128d0:	cmp	r3, #0
   128d4:	movne	r3, #1
   128d8:	moveq	r3, #0
   128dc:	uxtb	r3, r3
   128e0:	mov	r0, r3
   128e4:	sub	sp, fp, #4
   128e8:	ldr	fp, [sp]
   128ec:	add	sp, sp, #4
   128f0:	pop	{pc}		; (ldr pc, [sp], #4)
   128f4:	andeq	r2, r0, ip, lsl #23
   128f8:	andeq	r2, r0, r8, lsl #12
   128fc:	andeq	r2, r0, r8, ror r6
   12900:	str	fp, [sp, #-8]!
   12904:	str	lr, [sp, #4]
   12908:	add	fp, sp, #4
   1290c:	sub	sp, sp, #16
   12910:	str	r0, [fp, #-16]
   12914:	mov	r3, #0
   12918:	strh	r3, [fp, #-6]
   1291c:	ldr	r3, [fp, #-16]
   12920:	cmp	r3, #0
   12924:	bne	12948 <_start@@Base+0x1fd8>
   12928:	ldr	r3, [pc, #208]	; 12a00 <_start@@Base+0x2090>
   1292c:	add	r3, pc, r3
   12930:	mov	r2, #204	; 0xcc
   12934:	ldr	r1, [pc, #200]	; 12a04 <_start@@Base+0x2094>
   12938:	add	r1, pc, r1
   1293c:	ldr	r0, [pc, #196]	; 12a08 <_start@@Base+0x2098>
   12940:	add	r0, pc, r0
   12944:	bl	10960 <__assert_fail@plt>
   12948:	mov	r3, #4
   1294c:	strh	r3, [fp, #-8]
   12950:	ldr	r0, [fp, #-16]
   12954:	bl	10ec8 <_start@@Base+0x558>
   12958:	mov	r3, r0
   1295c:	rsb	r3, r3, #0
   12960:	ldr	r2, [fp, #-16]
   12964:	add	r3, r2, r3
   12968:	str	r3, [fp, #-12]
   1296c:	ldr	r0, [fp, #-12]
   12970:	bl	10f2c <_start@@Base+0x5bc>
   12974:	mov	r3, r0
   12978:	mov	r2, r3
   1297c:	ldrh	r3, [fp, #-8]
   12980:	add	r3, r3, #3
   12984:	lsl	r3, r3, #1
   12988:	cmp	r2, r3
   1298c:	bcc	129b4 <_start@@Base+0x2044>
   12990:	ldrh	r3, [fp, #-8]
   12994:	add	r3, r3, #2
   12998:	lsl	r3, r3, #1
   1299c:	ldr	r2, [fp, #-12]
   129a0:	add	r3, r2, r3
   129a4:	mov	r0, r3
   129a8:	bl	10f2c <_start@@Base+0x5bc>
   129ac:	mov	r3, r0
   129b0:	strh	r3, [fp, #-6]
   129b4:	ldrh	r3, [fp, #-6]
   129b8:	cmp	r3, #0
   129bc:	beq	129e0 <_start@@Base+0x2070>
   129c0:	ldrh	r3, [fp, #-6]
   129c4:	ldr	r2, [fp, #-16]
   129c8:	add	r3, r2, r3
   129cc:	mov	r0, r3
   129d0:	bl	10d24 <_start@@Base+0x3b4>
   129d4:	mov	r2, r0
   129d8:	mov	r3, r1
   129dc:	b	129e8 <_start@@Base+0x2078>
   129e0:	mov	r2, #0
   129e4:	mov	r3, #0
   129e8:	mov	r0, r2
   129ec:	mov	r1, r3
   129f0:	sub	sp, fp, #4
   129f4:	ldr	fp, [sp]
   129f8:	add	sp, sp, #4
   129fc:	pop	{pc}		; (ldr pc, [sp], #4)
   12a00:	andeq	r2, r0, r4, lsl #22
   12a04:	andeq	r2, r0, r0, lsr #10
   12a08:	muleq	r0, r0, r5
   12a0c:	str	fp, [sp, #-8]!
   12a10:	str	lr, [sp, #4]
   12a14:	add	fp, sp, #4
   12a18:	sub	sp, sp, #16
   12a1c:	str	r0, [fp, #-16]
   12a20:	mov	r3, #0
   12a24:	strh	r3, [fp, #-6]
   12a28:	ldr	r3, [fp, #-16]
   12a2c:	cmp	r3, #0
   12a30:	bne	12a54 <_start@@Base+0x20e4>
   12a34:	ldr	r3, [pc, #172]	; 12ae8 <_start@@Base+0x2178>
   12a38:	add	r3, pc, r3
   12a3c:	mov	r2, #204	; 0xcc
   12a40:	ldr	r1, [pc, #164]	; 12aec <_start@@Base+0x217c>
   12a44:	add	r1, pc, r1
   12a48:	ldr	r0, [pc, #160]	; 12af0 <_start@@Base+0x2180>
   12a4c:	add	r0, pc, r0
   12a50:	bl	10960 <__assert_fail@plt>
   12a54:	mov	r3, #4
   12a58:	strh	r3, [fp, #-8]
   12a5c:	ldr	r0, [fp, #-16]
   12a60:	bl	10ec8 <_start@@Base+0x558>
   12a64:	mov	r3, r0
   12a68:	rsb	r3, r3, #0
   12a6c:	ldr	r2, [fp, #-16]
   12a70:	add	r3, r2, r3
   12a74:	str	r3, [fp, #-12]
   12a78:	ldr	r0, [fp, #-12]
   12a7c:	bl	10f2c <_start@@Base+0x5bc>
   12a80:	mov	r3, r0
   12a84:	mov	r2, r3
   12a88:	ldrh	r3, [fp, #-8]
   12a8c:	add	r3, r3, #3
   12a90:	lsl	r3, r3, #1
   12a94:	cmp	r2, r3
   12a98:	bcc	12ac0 <_start@@Base+0x2150>
   12a9c:	ldrh	r3, [fp, #-8]
   12aa0:	add	r3, r3, #2
   12aa4:	lsl	r3, r3, #1
   12aa8:	ldr	r2, [fp, #-12]
   12aac:	add	r3, r2, r3
   12ab0:	mov	r0, r3
   12ab4:	bl	10f2c <_start@@Base+0x5bc>
   12ab8:	mov	r3, r0
   12abc:	strh	r3, [fp, #-6]
   12ac0:	ldrh	r3, [fp, #-6]
   12ac4:	cmp	r3, #0
   12ac8:	movne	r3, #1
   12acc:	moveq	r3, #0
   12ad0:	uxtb	r3, r3
   12ad4:	mov	r0, r3
   12ad8:	sub	sp, fp, #4
   12adc:	ldr	fp, [sp]
   12ae0:	add	sp, sp, #4
   12ae4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ae8:	andeq	r2, r0, ip, asr #19
   12aec:	andeq	r2, r0, r4, lsl r4
   12af0:	andeq	r2, r0, r4, lsl #9
   12af4:	str	fp, [sp, #-8]!
   12af8:	str	lr, [sp, #4]
   12afc:	add	fp, sp, #4
   12b00:	sub	sp, sp, #16
   12b04:	str	r0, [fp, #-16]
   12b08:	mov	r3, #0
   12b0c:	strh	r3, [fp, #-6]
   12b10:	ldr	r3, [fp, #-16]
   12b14:	cmp	r3, #0
   12b18:	bne	12b3c <_start@@Base+0x21cc>
   12b1c:	ldr	r3, [pc, #204]	; 12bf0 <_start@@Base+0x2280>
   12b20:	add	r3, pc, r3
   12b24:	mov	r2, #205	; 0xcd
   12b28:	ldr	r1, [pc, #196]	; 12bf4 <_start@@Base+0x2284>
   12b2c:	add	r1, pc, r1
   12b30:	ldr	r0, [pc, #192]	; 12bf8 <_start@@Base+0x2288>
   12b34:	add	r0, pc, r0
   12b38:	bl	10960 <__assert_fail@plt>
   12b3c:	mov	r3, #5
   12b40:	strh	r3, [fp, #-8]
   12b44:	ldr	r0, [fp, #-16]
   12b48:	bl	10ec8 <_start@@Base+0x558>
   12b4c:	mov	r3, r0
   12b50:	rsb	r3, r3, #0
   12b54:	ldr	r2, [fp, #-16]
   12b58:	add	r3, r2, r3
   12b5c:	str	r3, [fp, #-12]
   12b60:	ldr	r0, [fp, #-12]
   12b64:	bl	10f2c <_start@@Base+0x5bc>
   12b68:	mov	r3, r0
   12b6c:	mov	r2, r3
   12b70:	ldrh	r3, [fp, #-8]
   12b74:	add	r3, r3, #3
   12b78:	lsl	r3, r3, #1
   12b7c:	cmp	r2, r3
   12b80:	bcc	12ba8 <_start@@Base+0x2238>
   12b84:	ldrh	r3, [fp, #-8]
   12b88:	add	r3, r3, #2
   12b8c:	lsl	r3, r3, #1
   12b90:	ldr	r2, [fp, #-12]
   12b94:	add	r3, r2, r3
   12b98:	mov	r0, r3
   12b9c:	bl	10f2c <_start@@Base+0x5bc>
   12ba0:	mov	r3, r0
   12ba4:	strh	r3, [fp, #-6]
   12ba8:	ldrh	r3, [fp, #-6]
   12bac:	cmp	r3, #0
   12bb0:	beq	12bd0 <_start@@Base+0x2260>
   12bb4:	ldrh	r3, [fp, #-6]
   12bb8:	ldr	r2, [fp, #-16]
   12bbc:	add	r3, r2, r3
   12bc0:	mov	r0, r3
   12bc4:	bl	10da4 <_start@@Base+0x434>
   12bc8:	vmov.f64	d7, d0
   12bcc:	b	12bd4 <_start@@Base+0x2264>
   12bd0:	vldr	d7, [pc, #16]	; 12be8 <_start@@Base+0x2278>
   12bd4:	vmov.f64	d0, d7
   12bd8:	sub	sp, fp, #4
   12bdc:	ldr	fp, [sp]
   12be0:	add	sp, sp, #4
   12be4:	pop	{pc}		; (ldr pc, [sp], #4)
	...
   12bf0:	andeq	r2, r0, r0, ror #18
   12bf4:	andeq	r2, r0, ip, lsr #6
   12bf8:	muleq	r0, ip, r3
   12bfc:	str	fp, [sp, #-8]!
   12c00:	str	lr, [sp, #4]
   12c04:	add	fp, sp, #4
   12c08:	sub	sp, sp, #16
   12c0c:	str	r0, [fp, #-16]
   12c10:	mov	r3, #0
   12c14:	strh	r3, [fp, #-6]
   12c18:	ldr	r3, [fp, #-16]
   12c1c:	cmp	r3, #0
   12c20:	bne	12c44 <_start@@Base+0x22d4>
   12c24:	ldr	r3, [pc, #172]	; 12cd8 <_start@@Base+0x2368>
   12c28:	add	r3, pc, r3
   12c2c:	mov	r2, #205	; 0xcd
   12c30:	ldr	r1, [pc, #164]	; 12cdc <_start@@Base+0x236c>
   12c34:	add	r1, pc, r1
   12c38:	ldr	r0, [pc, #160]	; 12ce0 <_start@@Base+0x2370>
   12c3c:	add	r0, pc, r0
   12c40:	bl	10960 <__assert_fail@plt>
   12c44:	mov	r3, #5
   12c48:	strh	r3, [fp, #-8]
   12c4c:	ldr	r0, [fp, #-16]
   12c50:	bl	10ec8 <_start@@Base+0x558>
   12c54:	mov	r3, r0
   12c58:	rsb	r3, r3, #0
   12c5c:	ldr	r2, [fp, #-16]
   12c60:	add	r3, r2, r3
   12c64:	str	r3, [fp, #-12]
   12c68:	ldr	r0, [fp, #-12]
   12c6c:	bl	10f2c <_start@@Base+0x5bc>
   12c70:	mov	r3, r0
   12c74:	mov	r2, r3
   12c78:	ldrh	r3, [fp, #-8]
   12c7c:	add	r3, r3, #3
   12c80:	lsl	r3, r3, #1
   12c84:	cmp	r2, r3
   12c88:	bcc	12cb0 <_start@@Base+0x2340>
   12c8c:	ldrh	r3, [fp, #-8]
   12c90:	add	r3, r3, #2
   12c94:	lsl	r3, r3, #1
   12c98:	ldr	r2, [fp, #-12]
   12c9c:	add	r3, r2, r3
   12ca0:	mov	r0, r3
   12ca4:	bl	10f2c <_start@@Base+0x5bc>
   12ca8:	mov	r3, r0
   12cac:	strh	r3, [fp, #-6]
   12cb0:	ldrh	r3, [fp, #-6]
   12cb4:	cmp	r3, #0
   12cb8:	movne	r3, #1
   12cbc:	moveq	r3, #0
   12cc0:	uxtb	r3, r3
   12cc4:	mov	r0, r3
   12cc8:	sub	sp, fp, #4
   12ccc:	ldr	fp, [sp]
   12cd0:	add	sp, sp, #4
   12cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   12cd8:	andeq	r2, r0, ip, lsr #16
   12cdc:	andeq	r2, r0, r4, lsr #4
   12ce0:	muleq	r0, r4, r2
   12ce4:	str	fp, [sp, #-8]!
   12ce8:	str	lr, [sp, #4]
   12cec:	add	fp, sp, #4
   12cf0:	sub	sp, sp, #16
   12cf4:	str	r0, [fp, #-16]
   12cf8:	mov	r3, #0
   12cfc:	strh	r3, [fp, #-6]
   12d00:	ldr	r3, [fp, #-16]
   12d04:	cmp	r3, #0
   12d08:	bne	12d2c <_start@@Base+0x23bc>
   12d0c:	ldr	r3, [pc, #196]	; 12dd8 <_start@@Base+0x2468>
   12d10:	add	r3, pc, r3
   12d14:	mov	r2, #207	; 0xcf
   12d18:	ldr	r1, [pc, #188]	; 12ddc <_start@@Base+0x246c>
   12d1c:	add	r1, pc, r1
   12d20:	ldr	r0, [pc, #184]	; 12de0 <_start@@Base+0x2470>
   12d24:	add	r0, pc, r0
   12d28:	bl	10960 <__assert_fail@plt>
   12d2c:	mov	r3, #7
   12d30:	strh	r3, [fp, #-8]
   12d34:	ldr	r0, [fp, #-16]
   12d38:	bl	10ec8 <_start@@Base+0x558>
   12d3c:	mov	r3, r0
   12d40:	rsb	r3, r3, #0
   12d44:	ldr	r2, [fp, #-16]
   12d48:	add	r3, r2, r3
   12d4c:	str	r3, [fp, #-12]
   12d50:	ldr	r0, [fp, #-12]
   12d54:	bl	10f2c <_start@@Base+0x5bc>
   12d58:	mov	r3, r0
   12d5c:	mov	r2, r3
   12d60:	ldrh	r3, [fp, #-8]
   12d64:	add	r3, r3, #3
   12d68:	lsl	r3, r3, #1
   12d6c:	cmp	r2, r3
   12d70:	bcc	12d98 <_start@@Base+0x2428>
   12d74:	ldrh	r3, [fp, #-8]
   12d78:	add	r3, r3, #2
   12d7c:	lsl	r3, r3, #1
   12d80:	ldr	r2, [fp, #-12]
   12d84:	add	r3, r2, r3
   12d88:	mov	r0, r3
   12d8c:	bl	10f2c <_start@@Base+0x5bc>
   12d90:	mov	r3, r0
   12d94:	strh	r3, [fp, #-6]
   12d98:	ldrh	r3, [fp, #-6]
   12d9c:	cmp	r3, #0
   12da0:	beq	12dc0 <_start@@Base+0x2450>
   12da4:	ldrh	r3, [fp, #-6]
   12da8:	ldr	r2, [fp, #-16]
   12dac:	add	r3, r2, r3
   12db0:	mov	r0, r3
   12db4:	bl	10e08 <_start@@Base+0x498>
   12db8:	mov	r3, r0
   12dbc:	b	12dc4 <_start@@Base+0x2454>
   12dc0:	mov	r3, #0
   12dc4:	mov	r0, r3
   12dc8:	sub	sp, fp, #4
   12dcc:	ldr	fp, [sp]
   12dd0:	add	sp, sp, #4
   12dd4:	pop	{pc}		; (ldr pc, [sp], #4)
   12dd8:			; <UNDEFINED> instruction: 0x000027b8
   12ddc:	andeq	r2, r0, ip, lsr r1
   12de0:	andeq	r2, r0, ip, lsr #3
   12de4:	str	fp, [sp, #-8]!
   12de8:	str	lr, [sp, #4]
   12dec:	add	fp, sp, #4
   12df0:	sub	sp, sp, #16
   12df4:	str	r0, [fp, #-16]
   12df8:	mov	r3, #0
   12dfc:	strh	r3, [fp, #-6]
   12e00:	ldr	r3, [fp, #-16]
   12e04:	cmp	r3, #0
   12e08:	bne	12e2c <_start@@Base+0x24bc>
   12e0c:	ldr	r3, [pc, #172]	; 12ec0 <_start@@Base+0x2550>
   12e10:	add	r3, pc, r3
   12e14:	mov	r2, #207	; 0xcf
   12e18:	ldr	r1, [pc, #164]	; 12ec4 <_start@@Base+0x2554>
   12e1c:	add	r1, pc, r1
   12e20:	ldr	r0, [pc, #160]	; 12ec8 <_start@@Base+0x2558>
   12e24:	add	r0, pc, r0
   12e28:	bl	10960 <__assert_fail@plt>
   12e2c:	mov	r3, #7
   12e30:	strh	r3, [fp, #-8]
   12e34:	ldr	r0, [fp, #-16]
   12e38:	bl	10ec8 <_start@@Base+0x558>
   12e3c:	mov	r3, r0
   12e40:	rsb	r3, r3, #0
   12e44:	ldr	r2, [fp, #-16]
   12e48:	add	r3, r2, r3
   12e4c:	str	r3, [fp, #-12]
   12e50:	ldr	r0, [fp, #-12]
   12e54:	bl	10f2c <_start@@Base+0x5bc>
   12e58:	mov	r3, r0
   12e5c:	mov	r2, r3
   12e60:	ldrh	r3, [fp, #-8]
   12e64:	add	r3, r3, #3
   12e68:	lsl	r3, r3, #1
   12e6c:	cmp	r2, r3
   12e70:	bcc	12e98 <_start@@Base+0x2528>
   12e74:	ldrh	r3, [fp, #-8]
   12e78:	add	r3, r3, #2
   12e7c:	lsl	r3, r3, #1
   12e80:	ldr	r2, [fp, #-12]
   12e84:	add	r3, r2, r3
   12e88:	mov	r0, r3
   12e8c:	bl	10f2c <_start@@Base+0x5bc>
   12e90:	mov	r3, r0
   12e94:	strh	r3, [fp, #-6]
   12e98:	ldrh	r3, [fp, #-6]
   12e9c:	cmp	r3, #0
   12ea0:	movne	r3, #1
   12ea4:	moveq	r3, #0
   12ea8:	uxtb	r3, r3
   12eac:	mov	r0, r3
   12eb0:	sub	sp, fp, #4
   12eb4:	ldr	fp, [sp]
   12eb8:	add	sp, sp, #4
   12ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   12ec0:	muleq	r0, r0, r6
   12ec4:	andeq	r2, r0, ip, lsr r0
   12ec8:	andeq	r2, r0, ip, lsr #1
   12ecc:	str	fp, [sp, #-8]!
   12ed0:	str	lr, [sp, #4]
   12ed4:	add	fp, sp, #4
   12ed8:	sub	sp, sp, #16
   12edc:	str	r0, [fp, #-16]
   12ee0:	mov	r3, #0
   12ee4:	strh	r3, [fp, #-6]
   12ee8:	ldr	r3, [fp, #-16]
   12eec:	cmp	r3, #0
   12ef0:	bne	12f14 <_start@@Base+0x25a4>
   12ef4:	ldr	r3, [pc, #196]	; 12fc0 <_start@@Base+0x2650>
   12ef8:	add	r3, pc, r3
   12efc:	mov	r2, #208	; 0xd0
   12f00:	ldr	r1, [pc, #188]	; 12fc4 <_start@@Base+0x2654>
   12f04:	add	r1, pc, r1
   12f08:	ldr	r0, [pc, #184]	; 12fc8 <_start@@Base+0x2658>
   12f0c:	add	r0, pc, r0
   12f10:	bl	10960 <__assert_fail@plt>
   12f14:	mov	r3, #8
   12f18:	strh	r3, [fp, #-8]
   12f1c:	ldr	r0, [fp, #-16]
   12f20:	bl	10ec8 <_start@@Base+0x558>
   12f24:	mov	r3, r0
   12f28:	rsb	r3, r3, #0
   12f2c:	ldr	r2, [fp, #-16]
   12f30:	add	r3, r2, r3
   12f34:	str	r3, [fp, #-12]
   12f38:	ldr	r0, [fp, #-12]
   12f3c:	bl	10f2c <_start@@Base+0x5bc>
   12f40:	mov	r3, r0
   12f44:	mov	r2, r3
   12f48:	ldrh	r3, [fp, #-8]
   12f4c:	add	r3, r3, #3
   12f50:	lsl	r3, r3, #1
   12f54:	cmp	r2, r3
   12f58:	bcc	12f80 <_start@@Base+0x2610>
   12f5c:	ldrh	r3, [fp, #-8]
   12f60:	add	r3, r3, #2
   12f64:	lsl	r3, r3, #1
   12f68:	ldr	r2, [fp, #-12]
   12f6c:	add	r3, r2, r3
   12f70:	mov	r0, r3
   12f74:	bl	10f2c <_start@@Base+0x5bc>
   12f78:	mov	r3, r0
   12f7c:	strh	r3, [fp, #-6]
   12f80:	ldrh	r3, [fp, #-6]
   12f84:	cmp	r3, #0
   12f88:	beq	12fa8 <_start@@Base+0x2638>
   12f8c:	ldrh	r3, [fp, #-6]
   12f90:	ldr	r2, [fp, #-16]
   12f94:	add	r3, r2, r3
   12f98:	mov	r0, r3
   12f9c:	bl	10e08 <_start@@Base+0x498>
   12fa0:	mov	r3, r0
   12fa4:	b	12fac <_start@@Base+0x263c>
   12fa8:	mov	r3, #0
   12fac:	mov	r0, r3
   12fb0:	sub	sp, fp, #4
   12fb4:	ldr	fp, [sp]
   12fb8:	add	sp, sp, #4
   12fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   12fc0:	andeq	r2, r0, ip, lsl #12
   12fc4:	andeq	r1, r0, r4, asr pc
   12fc8:	andeq	r1, r0, r4, asr #31
   12fcc:	str	fp, [sp, #-8]!
   12fd0:	str	lr, [sp, #4]
   12fd4:	add	fp, sp, #4
   12fd8:	sub	sp, sp, #16
   12fdc:	str	r0, [fp, #-16]
   12fe0:	mov	r3, #0
   12fe4:	strh	r3, [fp, #-6]
   12fe8:	ldr	r3, [fp, #-16]
   12fec:	cmp	r3, #0
   12ff0:	bne	13014 <_start@@Base+0x26a4>
   12ff4:	ldr	r3, [pc, #172]	; 130a8 <_start@@Base+0x2738>
   12ff8:	add	r3, pc, r3
   12ffc:	mov	r2, #208	; 0xd0
   13000:	ldr	r1, [pc, #164]	; 130ac <_start@@Base+0x273c>
   13004:	add	r1, pc, r1
   13008:	ldr	r0, [pc, #160]	; 130b0 <_start@@Base+0x2740>
   1300c:	add	r0, pc, r0
   13010:	bl	10960 <__assert_fail@plt>
   13014:	mov	r3, #8
   13018:	strh	r3, [fp, #-8]
   1301c:	ldr	r0, [fp, #-16]
   13020:	bl	10ec8 <_start@@Base+0x558>
   13024:	mov	r3, r0
   13028:	rsb	r3, r3, #0
   1302c:	ldr	r2, [fp, #-16]
   13030:	add	r3, r2, r3
   13034:	str	r3, [fp, #-12]
   13038:	ldr	r0, [fp, #-12]
   1303c:	bl	10f2c <_start@@Base+0x5bc>
   13040:	mov	r3, r0
   13044:	mov	r2, r3
   13048:	ldrh	r3, [fp, #-8]
   1304c:	add	r3, r3, #3
   13050:	lsl	r3, r3, #1
   13054:	cmp	r2, r3
   13058:	bcc	13080 <_start@@Base+0x2710>
   1305c:	ldrh	r3, [fp, #-8]
   13060:	add	r3, r3, #2
   13064:	lsl	r3, r3, #1
   13068:	ldr	r2, [fp, #-12]
   1306c:	add	r3, r2, r3
   13070:	mov	r0, r3
   13074:	bl	10f2c <_start@@Base+0x5bc>
   13078:	mov	r3, r0
   1307c:	strh	r3, [fp, #-6]
   13080:	ldrh	r3, [fp, #-6]
   13084:	cmp	r3, #0
   13088:	movne	r3, #1
   1308c:	moveq	r3, #0
   13090:	uxtb	r3, r3
   13094:	mov	r0, r3
   13098:	sub	sp, fp, #4
   1309c:	ldr	fp, [sp]
   130a0:	add	sp, sp, #4
   130a4:	pop	{pc}		; (ldr pc, [sp], #4)
   130a8:	andeq	r2, r0, ip, ror #9
   130ac:	andeq	r1, r0, r4, asr lr
   130b0:	andeq	r1, r0, r4, asr #29
   130b4:	str	fp, [sp, #-8]!
   130b8:	str	lr, [sp, #4]
   130bc:	add	fp, sp, #4
   130c0:	sub	sp, sp, #8
   130c4:	str	r0, [fp, #-8]
   130c8:	ldr	r3, [fp, #-8]
   130cc:	cmp	r3, #0
   130d0:	beq	130ec <_start@@Base+0x277c>
   130d4:	ldr	r3, [fp, #-8]
   130d8:	sub	r3, r3, #4
   130dc:	mov	r0, r3
   130e0:	bl	10e68 <_start@@Base+0x4f8>
   130e4:	mov	r3, r0
   130e8:	b	130f0 <_start@@Base+0x2780>
   130ec:	mov	r3, #0
   130f0:	mov	r0, r3
   130f4:	sub	sp, fp, #4
   130f8:	ldr	fp, [sp]
   130fc:	add	sp, sp, #4
   13100:	pop	{pc}		; (ldr pc, [sp], #4)
   13104:	str	fp, [sp, #-8]!
   13108:	str	lr, [sp, #4]
   1310c:	add	fp, sp, #4
   13110:	sub	sp, sp, #16
   13114:	str	r0, [fp, #-16]
   13118:	str	r1, [fp, #-20]	; 0xffffffec
   1311c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13120:	lsl	r3, r3, #2
   13124:	ldr	r2, [fp, #-16]
   13128:	add	r3, r2, r3
   1312c:	str	r3, [fp, #-8]
   13130:	ldr	r0, [fp, #-16]
   13134:	bl	10fec <_start@@Base+0x67c>
   13138:	mov	r2, r0
   1313c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13140:	cmp	r3, r2
   13144:	bcc	13168 <_start@@Base+0x27f8>
   13148:	ldr	r3, [pc, #64]	; 13190 <_start@@Base+0x2820>
   1314c:	add	r3, pc, r3
   13150:	mov	r2, #215	; 0xd7
   13154:	ldr	r1, [pc, #56]	; 13194 <_start@@Base+0x2824>
   13158:	add	r1, pc, r1
   1315c:	ldr	r0, [pc, #52]	; 13198 <_start@@Base+0x2828>
   13160:	add	r0, pc, r0
   13164:	bl	10960 <__assert_fail@plt>
   13168:	ldr	r0, [fp, #-8]
   1316c:	bl	10e68 <_start@@Base+0x4f8>
   13170:	mov	r2, r0
   13174:	ldr	r3, [fp, #-8]
   13178:	add	r3, r3, r2
   1317c:	mov	r0, r3
   13180:	sub	sp, fp, #4
   13184:	ldr	fp, [sp]
   13188:	add	sp, sp, #4
   1318c:	pop	{pc}		; (ldr pc, [sp], #4)
   13190:	andeq	r2, r0, r0, lsl #12
   13194:	andeq	r1, r0, r0, lsl #26
   13198:	muleq	r0, r8, sp
   1319c:	str	fp, [sp, #-8]!
   131a0:	str	lr, [sp, #4]
   131a4:	add	fp, sp, #4
   131a8:	sub	sp, sp, #24
   131ac:	str	r0, [fp, #-24]	; 0xffffffe8
   131b0:	mov	r3, #0
   131b4:	strh	r3, [fp, #-6]
   131b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   131bc:	cmp	r3, #0
   131c0:	bne	131e4 <_start@@Base+0x2874>
   131c4:	ldr	r3, [pc, #240]	; 132bc <_start@@Base+0x294c>
   131c8:	add	r3, pc, r3
   131cc:	mov	r2, #218	; 0xda
   131d0:	ldr	r1, [pc, #232]	; 132c0 <_start@@Base+0x2950>
   131d4:	add	r1, pc, r1
   131d8:	ldr	r0, [pc, #228]	; 132c4 <_start@@Base+0x2954>
   131dc:	add	r0, pc, r0
   131e0:	bl	10960 <__assert_fail@plt>
   131e4:	mov	r3, #0
   131e8:	strh	r3, [fp, #-8]
   131ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   131f0:	bl	10ec8 <_start@@Base+0x558>
   131f4:	mov	r3, r0
   131f8:	rsb	r3, r3, #0
   131fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13200:	add	r3, r2, r3
   13204:	str	r3, [fp, #-12]
   13208:	ldr	r0, [fp, #-12]
   1320c:	bl	10f2c <_start@@Base+0x5bc>
   13210:	mov	r3, r0
   13214:	mov	r2, r3
   13218:	ldrh	r3, [fp, #-8]
   1321c:	add	r3, r3, #3
   13220:	lsl	r3, r3, #1
   13224:	cmp	r2, r3
   13228:	bcc	13250 <_start@@Base+0x28e0>
   1322c:	ldrh	r3, [fp, #-8]
   13230:	add	r3, r3, #2
   13234:	lsl	r3, r3, #1
   13238:	ldr	r2, [fp, #-12]
   1323c:	add	r3, r2, r3
   13240:	mov	r0, r3
   13244:	bl	10f2c <_start@@Base+0x5bc>
   13248:	mov	r3, r0
   1324c:	strh	r3, [fp, #-6]
   13250:	ldrh	r3, [fp, #-6]
   13254:	cmp	r3, #0
   13258:	beq	13288 <_start@@Base+0x2918>
   1325c:	ldrh	r3, [fp, #-6]
   13260:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13264:	add	r3, r2, r3
   13268:	str	r3, [fp, #-16]
   1326c:	ldr	r0, [fp, #-16]
   13270:	bl	10e68 <_start@@Base+0x4f8>
   13274:	mov	r3, r0
   13278:	add	r3, r3, #4
   1327c:	ldr	r2, [fp, #-16]
   13280:	add	r3, r2, r3
   13284:	b	132a8 <_start@@Base+0x2938>
   13288:	ldr	r3, [pc, #56]	; 132c8 <_start@@Base+0x2958>
   1328c:	add	r3, pc, r3
   13290:	mov	r2, #218	; 0xda
   13294:	ldr	r1, [pc, #48]	; 132cc <_start@@Base+0x295c>
   13298:	add	r1, pc, r1
   1329c:	ldr	r0, [pc, #44]	; 132d0 <_start@@Base+0x2960>
   132a0:	add	r0, pc, r0
   132a4:	bl	10960 <__assert_fail@plt>
   132a8:	mov	r0, r3
   132ac:	sub	sp, fp, #4
   132b0:	ldr	fp, [sp]
   132b4:	add	sp, sp, #4
   132b8:	pop	{pc}		; (ldr pc, [sp], #4)
   132bc:	andeq	r2, r0, r8, lsr #3
   132c0:	andeq	r1, r0, r4, lsl #25
   132c4:	strdeq	r1, [r0], -r4
   132c8:	andeq	r2, r0, r4, ror #1
   132cc:	andeq	r1, r0, r0, asr #23
   132d0:	muleq	r0, r0, ip
   132d4:	str	fp, [sp, #-8]!
   132d8:	str	lr, [sp, #4]
   132dc:	add	fp, sp, #4
   132e0:	sub	sp, sp, #24
   132e4:	str	r0, [fp, #-24]	; 0xffffffe8
   132e8:	mov	r3, #0
   132ec:	strh	r3, [fp, #-6]
   132f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   132f4:	cmp	r3, #0
   132f8:	bne	1331c <_start@@Base+0x29ac>
   132fc:	ldr	r3, [pc, #240]	; 133f4 <_start@@Base+0x2a84>
   13300:	add	r3, pc, r3
   13304:	mov	r2, #224	; 0xe0
   13308:	ldr	r1, [pc, #232]	; 133f8 <_start@@Base+0x2a88>
   1330c:	add	r1, pc, r1
   13310:	ldr	r0, [pc, #228]	; 133fc <_start@@Base+0x2a8c>
   13314:	add	r0, pc, r0
   13318:	bl	10960 <__assert_fail@plt>
   1331c:	mov	r3, #1
   13320:	strh	r3, [fp, #-8]
   13324:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13328:	bl	10ec8 <_start@@Base+0x558>
   1332c:	mov	r3, r0
   13330:	rsb	r3, r3, #0
   13334:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13338:	add	r3, r2, r3
   1333c:	str	r3, [fp, #-12]
   13340:	ldr	r0, [fp, #-12]
   13344:	bl	10f2c <_start@@Base+0x5bc>
   13348:	mov	r3, r0
   1334c:	mov	r2, r3
   13350:	ldrh	r3, [fp, #-8]
   13354:	add	r3, r3, #3
   13358:	lsl	r3, r3, #1
   1335c:	cmp	r2, r3
   13360:	bcc	13388 <_start@@Base+0x2a18>
   13364:	ldrh	r3, [fp, #-8]
   13368:	add	r3, r3, #2
   1336c:	lsl	r3, r3, #1
   13370:	ldr	r2, [fp, #-12]
   13374:	add	r3, r2, r3
   13378:	mov	r0, r3
   1337c:	bl	10f2c <_start@@Base+0x5bc>
   13380:	mov	r3, r0
   13384:	strh	r3, [fp, #-6]
   13388:	ldrh	r3, [fp, #-6]
   1338c:	cmp	r3, #0
   13390:	beq	133c0 <_start@@Base+0x2a50>
   13394:	ldrh	r3, [fp, #-6]
   13398:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1339c:	add	r3, r2, r3
   133a0:	str	r3, [fp, #-16]
   133a4:	ldr	r0, [fp, #-16]
   133a8:	bl	10e68 <_start@@Base+0x4f8>
   133ac:	mov	r3, r0
   133b0:	add	r3, r3, #4
   133b4:	ldr	r2, [fp, #-16]
   133b8:	add	r3, r2, r3
   133bc:	b	133e0 <_start@@Base+0x2a70>
   133c0:	ldr	r3, [pc, #56]	; 13400 <_start@@Base+0x2a90>
   133c4:	add	r3, pc, r3
   133c8:	mov	r2, #224	; 0xe0
   133cc:	ldr	r1, [pc, #48]	; 13404 <_start@@Base+0x2a94>
   133d0:	add	r1, pc, r1
   133d4:	ldr	r0, [pc, #44]	; 13408 <_start@@Base+0x2a98>
   133d8:	add	r0, pc, r0
   133dc:	bl	10960 <__assert_fail@plt>
   133e0:	mov	r0, r3
   133e4:	sub	sp, fp, #4
   133e8:	ldr	fp, [sp]
   133ec:	add	sp, sp, #4
   133f0:	pop	{pc}		; (ldr pc, [sp], #4)
   133f4:	andeq	r2, r0, r4, asr r0
   133f8:	andeq	r1, r0, ip, asr #22
   133fc:			; <UNDEFINED> instruction: 0x00001bbc
   13400:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   13404:	andeq	r1, r0, r8, lsl #21
   13408:	andeq	r1, r0, r8, asr fp
   1340c:	str	fp, [sp, #-8]!
   13410:	str	lr, [sp, #4]
   13414:	add	fp, sp, #4
   13418:	sub	sp, sp, #16
   1341c:	str	r0, [fp, #-16]
   13420:	mov	r3, #0
   13424:	strh	r3, [fp, #-6]
   13428:	ldr	r3, [fp, #-16]
   1342c:	cmp	r3, #0
   13430:	bne	13454 <_start@@Base+0x2ae4>
   13434:	ldr	r3, [pc, #196]	; 13500 <_start@@Base+0x2b90>
   13438:	add	r3, pc, r3
   1343c:	mov	r2, #225	; 0xe1
   13440:	ldr	r1, [pc, #188]	; 13504 <_start@@Base+0x2b94>
   13444:	add	r1, pc, r1
   13448:	ldr	r0, [pc, #184]	; 13508 <_start@@Base+0x2b98>
   1344c:	add	r0, pc, r0
   13450:	bl	10960 <__assert_fail@plt>
   13454:	mov	r3, #2
   13458:	strh	r3, [fp, #-8]
   1345c:	ldr	r0, [fp, #-16]
   13460:	bl	10ec8 <_start@@Base+0x558>
   13464:	mov	r3, r0
   13468:	rsb	r3, r3, #0
   1346c:	ldr	r2, [fp, #-16]
   13470:	add	r3, r2, r3
   13474:	str	r3, [fp, #-12]
   13478:	ldr	r0, [fp, #-12]
   1347c:	bl	10f2c <_start@@Base+0x5bc>
   13480:	mov	r3, r0
   13484:	mov	r2, r3
   13488:	ldrh	r3, [fp, #-8]
   1348c:	add	r3, r3, #3
   13490:	lsl	r3, r3, #1
   13494:	cmp	r2, r3
   13498:	bcc	134c0 <_start@@Base+0x2b50>
   1349c:	ldrh	r3, [fp, #-8]
   134a0:	add	r3, r3, #2
   134a4:	lsl	r3, r3, #1
   134a8:	ldr	r2, [fp, #-12]
   134ac:	add	r3, r2, r3
   134b0:	mov	r0, r3
   134b4:	bl	10f2c <_start@@Base+0x5bc>
   134b8:	mov	r3, r0
   134bc:	strh	r3, [fp, #-6]
   134c0:	ldrh	r3, [fp, #-6]
   134c4:	cmp	r3, #0
   134c8:	beq	134e8 <_start@@Base+0x2b78>
   134cc:	ldrh	r3, [fp, #-6]
   134d0:	ldr	r2, [fp, #-16]
   134d4:	add	r3, r2, r3
   134d8:	mov	r0, r3
   134dc:	bl	10e08 <_start@@Base+0x498>
   134e0:	mov	r3, r0
   134e4:	b	134ec <_start@@Base+0x2b7c>
   134e8:	mov	r3, #0
   134ec:	mov	r0, r3
   134f0:	sub	sp, fp, #4
   134f4:	ldr	fp, [sp]
   134f8:	add	sp, sp, #4
   134fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13500:	andeq	r2, r0, ip, lsl #2
   13504:	andeq	r1, r0, r4, lsl sl
   13508:	andeq	r1, r0, r4, lsl #21
   1350c:	str	fp, [sp, #-8]!
   13510:	str	lr, [sp, #4]
   13514:	add	fp, sp, #4
   13518:	sub	sp, sp, #16
   1351c:	str	r0, [fp, #-16]
   13520:	mov	r3, #0
   13524:	strh	r3, [fp, #-6]
   13528:	ldr	r3, [fp, #-16]
   1352c:	cmp	r3, #0
   13530:	bne	13554 <_start@@Base+0x2be4>
   13534:	ldr	r3, [pc, #172]	; 135e8 <_start@@Base+0x2c78>
   13538:	add	r3, pc, r3
   1353c:	mov	r2, #225	; 0xe1
   13540:	ldr	r1, [pc, #164]	; 135ec <_start@@Base+0x2c7c>
   13544:	add	r1, pc, r1
   13548:	ldr	r0, [pc, #160]	; 135f0 <_start@@Base+0x2c80>
   1354c:	add	r0, pc, r0
   13550:	bl	10960 <__assert_fail@plt>
   13554:	mov	r3, #2
   13558:	strh	r3, [fp, #-8]
   1355c:	ldr	r0, [fp, #-16]
   13560:	bl	10ec8 <_start@@Base+0x558>
   13564:	mov	r3, r0
   13568:	rsb	r3, r3, #0
   1356c:	ldr	r2, [fp, #-16]
   13570:	add	r3, r2, r3
   13574:	str	r3, [fp, #-12]
   13578:	ldr	r0, [fp, #-12]
   1357c:	bl	10f2c <_start@@Base+0x5bc>
   13580:	mov	r3, r0
   13584:	mov	r2, r3
   13588:	ldrh	r3, [fp, #-8]
   1358c:	add	r3, r3, #3
   13590:	lsl	r3, r3, #1
   13594:	cmp	r2, r3
   13598:	bcc	135c0 <_start@@Base+0x2c50>
   1359c:	ldrh	r3, [fp, #-8]
   135a0:	add	r3, r3, #2
   135a4:	lsl	r3, r3, #1
   135a8:	ldr	r2, [fp, #-12]
   135ac:	add	r3, r2, r3
   135b0:	mov	r0, r3
   135b4:	bl	10f2c <_start@@Base+0x5bc>
   135b8:	mov	r3, r0
   135bc:	strh	r3, [fp, #-6]
   135c0:	ldrh	r3, [fp, #-6]
   135c4:	cmp	r3, #0
   135c8:	movne	r3, #1
   135cc:	moveq	r3, #0
   135d0:	uxtb	r3, r3
   135d4:	mov	r0, r3
   135d8:	sub	sp, fp, #4
   135dc:	ldr	fp, [sp]
   135e0:	add	sp, sp, #4
   135e4:	pop	{pc}		; (ldr pc, [sp], #4)
   135e8:	andeq	r1, r0, r4, ror #31
   135ec:	andeq	r1, r0, r4, lsl r9
   135f0:	andeq	r1, r0, r4, lsl #19
   135f4:	str	fp, [sp, #-8]!
   135f8:	str	lr, [sp, #4]
   135fc:	add	fp, sp, #4
   13600:	sub	sp, sp, #16
   13604:	str	r0, [fp, #-16]
   13608:	mov	r3, #0
   1360c:	strh	r3, [fp, #-6]
   13610:	ldr	r3, [fp, #-16]
   13614:	cmp	r3, #0
   13618:	bne	1363c <_start@@Base+0x2ccc>
   1361c:	ldr	r3, [pc, #196]	; 136e8 <_start@@Base+0x2d78>
   13620:	add	r3, pc, r3
   13624:	mov	r2, #226	; 0xe2
   13628:	ldr	r1, [pc, #188]	; 136ec <_start@@Base+0x2d7c>
   1362c:	add	r1, pc, r1
   13630:	ldr	r0, [pc, #184]	; 136f0 <_start@@Base+0x2d80>
   13634:	add	r0, pc, r0
   13638:	bl	10960 <__assert_fail@plt>
   1363c:	mov	r3, #3
   13640:	strh	r3, [fp, #-8]
   13644:	ldr	r0, [fp, #-16]
   13648:	bl	10ec8 <_start@@Base+0x558>
   1364c:	mov	r3, r0
   13650:	rsb	r3, r3, #0
   13654:	ldr	r2, [fp, #-16]
   13658:	add	r3, r2, r3
   1365c:	str	r3, [fp, #-12]
   13660:	ldr	r0, [fp, #-12]
   13664:	bl	10f2c <_start@@Base+0x5bc>
   13668:	mov	r3, r0
   1366c:	mov	r2, r3
   13670:	ldrh	r3, [fp, #-8]
   13674:	add	r3, r3, #3
   13678:	lsl	r3, r3, #1
   1367c:	cmp	r2, r3
   13680:	bcc	136a8 <_start@@Base+0x2d38>
   13684:	ldrh	r3, [fp, #-8]
   13688:	add	r3, r3, #2
   1368c:	lsl	r3, r3, #1
   13690:	ldr	r2, [fp, #-12]
   13694:	add	r3, r2, r3
   13698:	mov	r0, r3
   1369c:	bl	10f2c <_start@@Base+0x5bc>
   136a0:	mov	r3, r0
   136a4:	strh	r3, [fp, #-6]
   136a8:	ldrh	r3, [fp, #-6]
   136ac:	cmp	r3, #0
   136b0:	beq	136d0 <_start@@Base+0x2d60>
   136b4:	ldrh	r3, [fp, #-6]
   136b8:	ldr	r2, [fp, #-16]
   136bc:	add	r3, r2, r3
   136c0:	mov	r0, r3
   136c4:	bl	10cc0 <_start@@Base+0x350>
   136c8:	mov	r3, r0
   136cc:	b	136d4 <_start@@Base+0x2d64>
   136d0:	mov	r3, #0
   136d4:	mov	r0, r3
   136d8:	sub	sp, fp, #4
   136dc:	ldr	fp, [sp]
   136e0:	add	sp, sp, #4
   136e4:	pop	{pc}		; (ldr pc, [sp], #4)
   136e8:	andeq	r1, r0, r8, ror #30
   136ec:	andeq	r1, r0, ip, lsr #16
   136f0:	muleq	r0, ip, r8
   136f4:	str	fp, [sp, #-8]!
   136f8:	str	lr, [sp, #4]
   136fc:	add	fp, sp, #4
   13700:	sub	sp, sp, #16
   13704:	str	r0, [fp, #-16]
   13708:	mov	r3, #0
   1370c:	strh	r3, [fp, #-6]
   13710:	ldr	r3, [fp, #-16]
   13714:	cmp	r3, #0
   13718:	bne	1373c <_start@@Base+0x2dcc>
   1371c:	ldr	r3, [pc, #172]	; 137d0 <_start@@Base+0x2e60>
   13720:	add	r3, pc, r3
   13724:	mov	r2, #226	; 0xe2
   13728:	ldr	r1, [pc, #164]	; 137d4 <_start@@Base+0x2e64>
   1372c:	add	r1, pc, r1
   13730:	ldr	r0, [pc, #160]	; 137d8 <_start@@Base+0x2e68>
   13734:	add	r0, pc, r0
   13738:	bl	10960 <__assert_fail@plt>
   1373c:	mov	r3, #3
   13740:	strh	r3, [fp, #-8]
   13744:	ldr	r0, [fp, #-16]
   13748:	bl	10ec8 <_start@@Base+0x558>
   1374c:	mov	r3, r0
   13750:	rsb	r3, r3, #0
   13754:	ldr	r2, [fp, #-16]
   13758:	add	r3, r2, r3
   1375c:	str	r3, [fp, #-12]
   13760:	ldr	r0, [fp, #-12]
   13764:	bl	10f2c <_start@@Base+0x5bc>
   13768:	mov	r3, r0
   1376c:	mov	r2, r3
   13770:	ldrh	r3, [fp, #-8]
   13774:	add	r3, r3, #3
   13778:	lsl	r3, r3, #1
   1377c:	cmp	r2, r3
   13780:	bcc	137a8 <_start@@Base+0x2e38>
   13784:	ldrh	r3, [fp, #-8]
   13788:	add	r3, r3, #2
   1378c:	lsl	r3, r3, #1
   13790:	ldr	r2, [fp, #-12]
   13794:	add	r3, r2, r3
   13798:	mov	r0, r3
   1379c:	bl	10f2c <_start@@Base+0x5bc>
   137a0:	mov	r3, r0
   137a4:	strh	r3, [fp, #-6]
   137a8:	ldrh	r3, [fp, #-6]
   137ac:	cmp	r3, #0
   137b0:	movne	r3, #1
   137b4:	moveq	r3, #0
   137b8:	uxtb	r3, r3
   137bc:	mov	r0, r3
   137c0:	sub	sp, fp, #4
   137c4:	ldr	fp, [sp]
   137c8:	add	sp, sp, #4
   137cc:	pop	{pc}		; (ldr pc, [sp], #4)
   137d0:	andeq	r1, r0, r0, asr #28
   137d4:	andeq	r1, r0, ip, lsr #14
   137d8:	muleq	r0, ip, r7
   137dc:	str	fp, [sp, #-8]!
   137e0:	str	lr, [sp, #4]
   137e4:	add	fp, sp, #4
   137e8:	sub	sp, sp, #16
   137ec:	str	r0, [fp, #-16]
   137f0:	mov	r3, #0
   137f4:	strh	r3, [fp, #-6]
   137f8:	ldr	r3, [fp, #-16]
   137fc:	cmp	r3, #0
   13800:	bne	13824 <_start@@Base+0x2eb4>
   13804:	ldr	r3, [pc, #196]	; 138d0 <_start@@Base+0x2f60>
   13808:	add	r3, pc, r3
   1380c:	mov	r2, #227	; 0xe3
   13810:	ldr	r1, [pc, #188]	; 138d4 <_start@@Base+0x2f64>
   13814:	add	r1, pc, r1
   13818:	ldr	r0, [pc, #184]	; 138d8 <_start@@Base+0x2f68>
   1381c:	add	r0, pc, r0
   13820:	bl	10960 <__assert_fail@plt>
   13824:	mov	r3, #4
   13828:	strh	r3, [fp, #-8]
   1382c:	ldr	r0, [fp, #-16]
   13830:	bl	10ec8 <_start@@Base+0x558>
   13834:	mov	r3, r0
   13838:	rsb	r3, r3, #0
   1383c:	ldr	r2, [fp, #-16]
   13840:	add	r3, r2, r3
   13844:	str	r3, [fp, #-12]
   13848:	ldr	r0, [fp, #-12]
   1384c:	bl	10f2c <_start@@Base+0x5bc>
   13850:	mov	r3, r0
   13854:	mov	r2, r3
   13858:	ldrh	r3, [fp, #-8]
   1385c:	add	r3, r3, #3
   13860:	lsl	r3, r3, #1
   13864:	cmp	r2, r3
   13868:	bcc	13890 <_start@@Base+0x2f20>
   1386c:	ldrh	r3, [fp, #-8]
   13870:	add	r3, r3, #2
   13874:	lsl	r3, r3, #1
   13878:	ldr	r2, [fp, #-12]
   1387c:	add	r3, r2, r3
   13880:	mov	r0, r3
   13884:	bl	10f2c <_start@@Base+0x5bc>
   13888:	mov	r3, r0
   1388c:	strh	r3, [fp, #-6]
   13890:	ldrh	r3, [fp, #-6]
   13894:	cmp	r3, #0
   13898:	beq	138b8 <_start@@Base+0x2f48>
   1389c:	ldrh	r3, [fp, #-6]
   138a0:	ldr	r2, [fp, #-16]
   138a4:	add	r3, r2, r3
   138a8:	mov	r0, r3
   138ac:	bl	10cc0 <_start@@Base+0x350>
   138b0:	mov	r3, r0
   138b4:	b	138bc <_start@@Base+0x2f4c>
   138b8:	mov	r3, #0
   138bc:	mov	r0, r3
   138c0:	sub	sp, fp, #4
   138c4:	ldr	fp, [sp]
   138c8:	add	sp, sp, #4
   138cc:	pop	{pc}		; (ldr pc, [sp], #4)
   138d0:	andeq	r1, r0, r4, asr #27
   138d4:	andeq	r1, r0, r4, asr #12
   138d8:			; <UNDEFINED> instruction: 0x000016b4
   138dc:	str	fp, [sp, #-8]!
   138e0:	str	lr, [sp, #4]
   138e4:	add	fp, sp, #4
   138e8:	sub	sp, sp, #16
   138ec:	str	r0, [fp, #-16]
   138f0:	mov	r3, #0
   138f4:	strh	r3, [fp, #-6]
   138f8:	ldr	r3, [fp, #-16]
   138fc:	cmp	r3, #0
   13900:	bne	13924 <_start@@Base+0x2fb4>
   13904:	ldr	r3, [pc, #172]	; 139b8 <_start@@Base+0x3048>
   13908:	add	r3, pc, r3
   1390c:	mov	r2, #227	; 0xe3
   13910:	ldr	r1, [pc, #164]	; 139bc <_start@@Base+0x304c>
   13914:	add	r1, pc, r1
   13918:	ldr	r0, [pc, #160]	; 139c0 <_start@@Base+0x3050>
   1391c:	add	r0, pc, r0
   13920:	bl	10960 <__assert_fail@plt>
   13924:	mov	r3, #4
   13928:	strh	r3, [fp, #-8]
   1392c:	ldr	r0, [fp, #-16]
   13930:	bl	10ec8 <_start@@Base+0x558>
   13934:	mov	r3, r0
   13938:	rsb	r3, r3, #0
   1393c:	ldr	r2, [fp, #-16]
   13940:	add	r3, r2, r3
   13944:	str	r3, [fp, #-12]
   13948:	ldr	r0, [fp, #-12]
   1394c:	bl	10f2c <_start@@Base+0x5bc>
   13950:	mov	r3, r0
   13954:	mov	r2, r3
   13958:	ldrh	r3, [fp, #-8]
   1395c:	add	r3, r3, #3
   13960:	lsl	r3, r3, #1
   13964:	cmp	r2, r3
   13968:	bcc	13990 <_start@@Base+0x3020>
   1396c:	ldrh	r3, [fp, #-8]
   13970:	add	r3, r3, #2
   13974:	lsl	r3, r3, #1
   13978:	ldr	r2, [fp, #-12]
   1397c:	add	r3, r2, r3
   13980:	mov	r0, r3
   13984:	bl	10f2c <_start@@Base+0x5bc>
   13988:	mov	r3, r0
   1398c:	strh	r3, [fp, #-6]
   13990:	ldrh	r3, [fp, #-6]
   13994:	cmp	r3, #0
   13998:	movne	r3, #1
   1399c:	moveq	r3, #0
   139a0:	uxtb	r3, r3
   139a4:	mov	r0, r3
   139a8:	sub	sp, fp, #4
   139ac:	ldr	fp, [sp]
   139b0:	add	sp, sp, #4
   139b4:	pop	{pc}		; (ldr pc, [sp], #4)
   139b8:	muleq	r0, ip, ip
   139bc:	andeq	r1, r0, r4, asr #10
   139c0:			; <UNDEFINED> instruction: 0x000015b4
   139c4:	str	fp, [sp, #-8]!
   139c8:	str	lr, [sp, #4]
   139cc:	add	fp, sp, #4
   139d0:	sub	sp, sp, #16
   139d4:	str	r0, [fp, #-16]
   139d8:	ldr	r3, [pc, #88]	; 13a38 <_start@@Base+0x30c8>
   139dc:	add	r3, pc, r3
   139e0:	str	r3, [fp, #-8]
   139e4:	ldr	r3, [fp, #-16]
   139e8:	cmp	r3, #0
   139ec:	beq	13a20 <_start@@Base+0x30b0>
   139f0:	ldr	r1, [fp, #-8]
   139f4:	ldr	r0, [fp, #-16]
   139f8:	bl	1103c <_start@@Base+0x6cc>
   139fc:	mov	r3, r0
   13a00:	cmp	r3, #0
   13a04:	beq	13a20 <_start@@Base+0x30b0>
   13a08:	ldr	r0, [fp, #-16]
   13a0c:	bl	10e68 <_start@@Base+0x4f8>
   13a10:	mov	r2, r0
   13a14:	ldr	r3, [fp, #-16]
   13a18:	add	r3, r3, r2
   13a1c:	b	13a24 <_start@@Base+0x30b4>
   13a20:	mov	r3, #0
   13a24:	mov	r0, r3
   13a28:	sub	sp, fp, #4
   13a2c:	ldr	fp, [sp]
   13a30:	add	sp, sp, #4
   13a34:	pop	{pc}		; (ldr pc, [sp], #4)
   13a38:	andeq	r1, r0, r8, ror r5
   13a3c:	str	fp, [sp, #-8]!
   13a40:	str	lr, [sp, #4]
   13a44:	add	fp, sp, #4
   13a48:	sub	sp, sp, #24
   13a4c:	str	r0, [fp, #-24]	; 0xffffffe8
   13a50:	mov	r3, #0
   13a54:	strh	r3, [fp, #-6]
   13a58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a5c:	cmp	r3, #0
   13a60:	bne	13a84 <_start@@Base+0x3114>
   13a64:	ldr	r3, [pc, #240]	; 13b5c <_start@@Base+0x31ec>
   13a68:	add	r3, pc, r3
   13a6c:	mov	r2, #237	; 0xed
   13a70:	ldr	r1, [pc, #232]	; 13b60 <_start@@Base+0x31f0>
   13a74:	add	r1, pc, r1
   13a78:	ldr	r0, [pc, #228]	; 13b64 <_start@@Base+0x31f4>
   13a7c:	add	r0, pc, r0
   13a80:	bl	10960 <__assert_fail@plt>
   13a84:	mov	r3, #0
   13a88:	strh	r3, [fp, #-8]
   13a8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13a90:	bl	10ec8 <_start@@Base+0x558>
   13a94:	mov	r3, r0
   13a98:	rsb	r3, r3, #0
   13a9c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13aa0:	add	r3, r2, r3
   13aa4:	str	r3, [fp, #-12]
   13aa8:	ldr	r0, [fp, #-12]
   13aac:	bl	10f2c <_start@@Base+0x5bc>
   13ab0:	mov	r3, r0
   13ab4:	mov	r2, r3
   13ab8:	ldrh	r3, [fp, #-8]
   13abc:	add	r3, r3, #3
   13ac0:	lsl	r3, r3, #1
   13ac4:	cmp	r2, r3
   13ac8:	bcc	13af0 <_start@@Base+0x3180>
   13acc:	ldrh	r3, [fp, #-8]
   13ad0:	add	r3, r3, #2
   13ad4:	lsl	r3, r3, #1
   13ad8:	ldr	r2, [fp, #-12]
   13adc:	add	r3, r2, r3
   13ae0:	mov	r0, r3
   13ae4:	bl	10f2c <_start@@Base+0x5bc>
   13ae8:	mov	r3, r0
   13aec:	strh	r3, [fp, #-6]
   13af0:	ldrh	r3, [fp, #-6]
   13af4:	cmp	r3, #0
   13af8:	beq	13b28 <_start@@Base+0x31b8>
   13afc:	ldrh	r3, [fp, #-6]
   13b00:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13b04:	add	r3, r2, r3
   13b08:	str	r3, [fp, #-16]
   13b0c:	ldr	r0, [fp, #-16]
   13b10:	bl	10e68 <_start@@Base+0x4f8>
   13b14:	mov	r3, r0
   13b18:	add	r3, r3, #4
   13b1c:	ldr	r2, [fp, #-16]
   13b20:	add	r3, r2, r3
   13b24:	b	13b48 <_start@@Base+0x31d8>
   13b28:	ldr	r3, [pc, #56]	; 13b68 <_start@@Base+0x31f8>
   13b2c:	add	r3, pc, r3
   13b30:	mov	r2, #237	; 0xed
   13b34:	ldr	r1, [pc, #48]	; 13b6c <_start@@Base+0x31fc>
   13b38:	add	r1, pc, r1
   13b3c:	ldr	r0, [pc, #44]	; 13b70 <_start@@Base+0x3200>
   13b40:	add	r0, pc, r0
   13b44:	bl	10960 <__assert_fail@plt>
   13b48:	mov	r0, r3
   13b4c:	sub	sp, fp, #4
   13b50:	ldr	fp, [sp]
   13b54:	add	sp, sp, #4
   13b58:	pop	{pc}		; (ldr pc, [sp], #4)
   13b5c:	andeq	r1, r0, r8, asr #25
   13b60:	andeq	r1, r0, r4, ror #7
   13b64:	andeq	r1, r0, r4, asr r4
   13b68:	andeq	r1, r0, r4, lsl #24
   13b6c:	andeq	r1, r0, r0, lsr #6
   13b70:	strdeq	r1, [r0], -r0
   13b74:	str	fp, [sp, #-8]!
   13b78:	str	lr, [sp, #4]
   13b7c:	add	fp, sp, #4
   13b80:	sub	sp, sp, #24
   13b84:	str	r0, [fp, #-24]	; 0xffffffe8
   13b88:	mov	r3, #0
   13b8c:	strh	r3, [fp, #-6]
   13b90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b94:	cmp	r3, #0
   13b98:	bne	13bbc <_start@@Base+0x324c>
   13b9c:	ldr	r3, [pc, #240]	; 13c94 <_start@@Base+0x3324>
   13ba0:	add	r3, pc, r3
   13ba4:	mov	r2, #238	; 0xee
   13ba8:	ldr	r1, [pc, #232]	; 13c98 <_start@@Base+0x3328>
   13bac:	add	r1, pc, r1
   13bb0:	ldr	r0, [pc, #228]	; 13c9c <_start@@Base+0x332c>
   13bb4:	add	r0, pc, r0
   13bb8:	bl	10960 <__assert_fail@plt>
   13bbc:	mov	r3, #1
   13bc0:	strh	r3, [fp, #-8]
   13bc4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13bc8:	bl	10ec8 <_start@@Base+0x558>
   13bcc:	mov	r3, r0
   13bd0:	rsb	r3, r3, #0
   13bd4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13bd8:	add	r3, r2, r3
   13bdc:	str	r3, [fp, #-12]
   13be0:	ldr	r0, [fp, #-12]
   13be4:	bl	10f2c <_start@@Base+0x5bc>
   13be8:	mov	r3, r0
   13bec:	mov	r2, r3
   13bf0:	ldrh	r3, [fp, #-8]
   13bf4:	add	r3, r3, #3
   13bf8:	lsl	r3, r3, #1
   13bfc:	cmp	r2, r3
   13c00:	bcc	13c28 <_start@@Base+0x32b8>
   13c04:	ldrh	r3, [fp, #-8]
   13c08:	add	r3, r3, #2
   13c0c:	lsl	r3, r3, #1
   13c10:	ldr	r2, [fp, #-12]
   13c14:	add	r3, r2, r3
   13c18:	mov	r0, r3
   13c1c:	bl	10f2c <_start@@Base+0x5bc>
   13c20:	mov	r3, r0
   13c24:	strh	r3, [fp, #-6]
   13c28:	ldrh	r3, [fp, #-6]
   13c2c:	cmp	r3, #0
   13c30:	beq	13c60 <_start@@Base+0x32f0>
   13c34:	ldrh	r3, [fp, #-6]
   13c38:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13c3c:	add	r3, r2, r3
   13c40:	str	r3, [fp, #-16]
   13c44:	ldr	r0, [fp, #-16]
   13c48:	bl	10e68 <_start@@Base+0x4f8>
   13c4c:	mov	r3, r0
   13c50:	add	r3, r3, #4
   13c54:	ldr	r2, [fp, #-16]
   13c58:	add	r3, r2, r3
   13c5c:	b	13c80 <_start@@Base+0x3310>
   13c60:	ldr	r3, [pc, #56]	; 13ca0 <_start@@Base+0x3330>
   13c64:	add	r3, pc, r3
   13c68:	mov	r2, #238	; 0xee
   13c6c:	ldr	r1, [pc, #48]	; 13ca4 <_start@@Base+0x3334>
   13c70:	add	r1, pc, r1
   13c74:	ldr	r0, [pc, #44]	; 13ca8 <_start@@Base+0x3338>
   13c78:	add	r0, pc, r0
   13c7c:	bl	10960 <__assert_fail@plt>
   13c80:	mov	r0, r3
   13c84:	sub	sp, fp, #4
   13c88:	ldr	fp, [sp]
   13c8c:	add	sp, sp, #4
   13c90:	pop	{pc}		; (ldr pc, [sp], #4)
   13c94:	andeq	r1, r0, r8, asr #23
   13c98:	andeq	r1, r0, ip, lsr #5
   13c9c:	andeq	r1, r0, ip, lsl r3
   13ca0:	andeq	r1, r0, r4, lsl #22
   13ca4:	andeq	r1, r0, r8, ror #3
   13ca8:			; <UNDEFINED> instruction: 0x000012b8
   13cac:	str	fp, [sp, #-8]!
   13cb0:	str	lr, [sp, #4]
   13cb4:	add	fp, sp, #4
   13cb8:	sub	sp, sp, #24
   13cbc:	str	r0, [fp, #-24]	; 0xffffffe8
   13cc0:	mov	r3, #0
   13cc4:	strh	r3, [fp, #-6]
   13cc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ccc:	cmp	r3, #0
   13cd0:	bne	13cf4 <_start@@Base+0x3384>
   13cd4:	ldr	r3, [pc, #212]	; 13db0 <_start@@Base+0x3440>
   13cd8:	add	r3, pc, r3
   13cdc:	mov	r2, #239	; 0xef
   13ce0:	ldr	r1, [pc, #204]	; 13db4 <_start@@Base+0x3444>
   13ce4:	add	r1, pc, r1
   13ce8:	ldr	r0, [pc, #200]	; 13db8 <_start@@Base+0x3448>
   13cec:	add	r0, pc, r0
   13cf0:	bl	10960 <__assert_fail@plt>
   13cf4:	mov	r3, #2
   13cf8:	strh	r3, [fp, #-8]
   13cfc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13d00:	bl	10ec8 <_start@@Base+0x558>
   13d04:	mov	r3, r0
   13d08:	rsb	r3, r3, #0
   13d0c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13d10:	add	r3, r2, r3
   13d14:	str	r3, [fp, #-12]
   13d18:	ldr	r0, [fp, #-12]
   13d1c:	bl	10f2c <_start@@Base+0x5bc>
   13d20:	mov	r3, r0
   13d24:	mov	r2, r3
   13d28:	ldrh	r3, [fp, #-8]
   13d2c:	add	r3, r3, #3
   13d30:	lsl	r3, r3, #1
   13d34:	cmp	r2, r3
   13d38:	bcc	13d60 <_start@@Base+0x33f0>
   13d3c:	ldrh	r3, [fp, #-8]
   13d40:	add	r3, r3, #2
   13d44:	lsl	r3, r3, #1
   13d48:	ldr	r2, [fp, #-12]
   13d4c:	add	r3, r2, r3
   13d50:	mov	r0, r3
   13d54:	bl	10f2c <_start@@Base+0x5bc>
   13d58:	mov	r3, r0
   13d5c:	strh	r3, [fp, #-6]
   13d60:	ldrh	r3, [fp, #-6]
   13d64:	cmp	r3, #0
   13d68:	beq	13d98 <_start@@Base+0x3428>
   13d6c:	ldrh	r3, [fp, #-6]
   13d70:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13d74:	add	r3, r2, r3
   13d78:	str	r3, [fp, #-16]
   13d7c:	ldr	r0, [fp, #-16]
   13d80:	bl	10e68 <_start@@Base+0x4f8>
   13d84:	mov	r3, r0
   13d88:	add	r3, r3, #4
   13d8c:	ldr	r2, [fp, #-16]
   13d90:	add	r3, r2, r3
   13d94:	b	13d9c <_start@@Base+0x342c>
   13d98:	mov	r3, #0
   13d9c:	mov	r0, r3
   13da0:	sub	sp, fp, #4
   13da4:	ldr	fp, [sp]
   13da8:	add	sp, sp, #4
   13dac:	pop	{pc}		; (ldr pc, [sp], #4)
   13db0:	andeq	r1, r0, r8, ror #21
   13db4:	andeq	r1, r0, r4, ror r1
   13db8:	andeq	r1, r0, r4, ror #3
   13dbc:	str	fp, [sp, #-8]!
   13dc0:	str	lr, [sp, #4]
   13dc4:	add	fp, sp, #4
   13dc8:	sub	sp, sp, #16
   13dcc:	str	r0, [fp, #-16]
   13dd0:	mov	r3, #0
   13dd4:	strh	r3, [fp, #-6]
   13dd8:	ldr	r3, [fp, #-16]
   13ddc:	cmp	r3, #0
   13de0:	bne	13e04 <_start@@Base+0x3494>
   13de4:	ldr	r3, [pc, #172]	; 13e98 <_start@@Base+0x3528>
   13de8:	add	r3, pc, r3
   13dec:	mov	r2, #239	; 0xef
   13df0:	ldr	r1, [pc, #164]	; 13e9c <_start@@Base+0x352c>
   13df4:	add	r1, pc, r1
   13df8:	ldr	r0, [pc, #160]	; 13ea0 <_start@@Base+0x3530>
   13dfc:	add	r0, pc, r0
   13e00:	bl	10960 <__assert_fail@plt>
   13e04:	mov	r3, #2
   13e08:	strh	r3, [fp, #-8]
   13e0c:	ldr	r0, [fp, #-16]
   13e10:	bl	10ec8 <_start@@Base+0x558>
   13e14:	mov	r3, r0
   13e18:	rsb	r3, r3, #0
   13e1c:	ldr	r2, [fp, #-16]
   13e20:	add	r3, r2, r3
   13e24:	str	r3, [fp, #-12]
   13e28:	ldr	r0, [fp, #-12]
   13e2c:	bl	10f2c <_start@@Base+0x5bc>
   13e30:	mov	r3, r0
   13e34:	mov	r2, r3
   13e38:	ldrh	r3, [fp, #-8]
   13e3c:	add	r3, r3, #3
   13e40:	lsl	r3, r3, #1
   13e44:	cmp	r2, r3
   13e48:	bcc	13e70 <_start@@Base+0x3500>
   13e4c:	ldrh	r3, [fp, #-8]
   13e50:	add	r3, r3, #2
   13e54:	lsl	r3, r3, #1
   13e58:	ldr	r2, [fp, #-12]
   13e5c:	add	r3, r2, r3
   13e60:	mov	r0, r3
   13e64:	bl	10f2c <_start@@Base+0x5bc>
   13e68:	mov	r3, r0
   13e6c:	strh	r3, [fp, #-6]
   13e70:	ldrh	r3, [fp, #-6]
   13e74:	cmp	r3, #0
   13e78:	movne	r3, #1
   13e7c:	moveq	r3, #0
   13e80:	uxtb	r3, r3
   13e84:	mov	r0, r3
   13e88:	sub	sp, fp, #4
   13e8c:	ldr	fp, [sp]
   13e90:	add	sp, sp, #4
   13e94:	pop	{pc}		; (ldr pc, [sp], #4)
   13e98:			; <UNDEFINED> instruction: 0x000019b0
   13e9c:	andeq	r1, r0, r4, rrx
   13ea0:	ldrdeq	r1, [r0], -r4
   13ea4:	str	fp, [sp, #-8]!
   13ea8:	str	lr, [sp, #4]
   13eac:	add	fp, sp, #4
   13eb0:	sub	sp, sp, #24
   13eb4:	str	r0, [fp, #-24]	; 0xffffffe8
   13eb8:	mov	r3, #0
   13ebc:	strh	r3, [fp, #-6]
   13ec0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ec4:	cmp	r3, #0
   13ec8:	bne	13eec <_start@@Base+0x357c>
   13ecc:	ldr	r3, [pc, #212]	; 13fa8 <_start@@Base+0x3638>
   13ed0:	add	r3, pc, r3
   13ed4:	mov	r2, #240	; 0xf0
   13ed8:	ldr	r1, [pc, #204]	; 13fac <_start@@Base+0x363c>
   13edc:	add	r1, pc, r1
   13ee0:	ldr	r0, [pc, #200]	; 13fb0 <_start@@Base+0x3640>
   13ee4:	add	r0, pc, r0
   13ee8:	bl	10960 <__assert_fail@plt>
   13eec:	mov	r3, #3
   13ef0:	strh	r3, [fp, #-8]
   13ef4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13ef8:	bl	10ec8 <_start@@Base+0x558>
   13efc:	mov	r3, r0
   13f00:	rsb	r3, r3, #0
   13f04:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13f08:	add	r3, r2, r3
   13f0c:	str	r3, [fp, #-12]
   13f10:	ldr	r0, [fp, #-12]
   13f14:	bl	10f2c <_start@@Base+0x5bc>
   13f18:	mov	r3, r0
   13f1c:	mov	r2, r3
   13f20:	ldrh	r3, [fp, #-8]
   13f24:	add	r3, r3, #3
   13f28:	lsl	r3, r3, #1
   13f2c:	cmp	r2, r3
   13f30:	bcc	13f58 <_start@@Base+0x35e8>
   13f34:	ldrh	r3, [fp, #-8]
   13f38:	add	r3, r3, #2
   13f3c:	lsl	r3, r3, #1
   13f40:	ldr	r2, [fp, #-12]
   13f44:	add	r3, r2, r3
   13f48:	mov	r0, r3
   13f4c:	bl	10f2c <_start@@Base+0x5bc>
   13f50:	mov	r3, r0
   13f54:	strh	r3, [fp, #-6]
   13f58:	ldrh	r3, [fp, #-6]
   13f5c:	cmp	r3, #0
   13f60:	beq	13f90 <_start@@Base+0x3620>
   13f64:	ldrh	r3, [fp, #-6]
   13f68:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13f6c:	add	r3, r2, r3
   13f70:	str	r3, [fp, #-16]
   13f74:	ldr	r0, [fp, #-16]
   13f78:	bl	10e68 <_start@@Base+0x4f8>
   13f7c:	mov	r3, r0
   13f80:	add	r3, r3, #4
   13f84:	ldr	r2, [fp, #-16]
   13f88:	add	r3, r2, r3
   13f8c:	b	13f94 <_start@@Base+0x3624>
   13f90:	mov	r3, #0
   13f94:	mov	r0, r3
   13f98:	sub	sp, fp, #4
   13f9c:	ldr	fp, [sp]
   13fa0:	add	sp, sp, #4
   13fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   13fa8:	andeq	r1, r0, r8, lsr r9
   13fac:	andeq	r0, r0, ip, ror pc
   13fb0:	andeq	r0, r0, ip, ror #31
   13fb4:	str	fp, [sp, #-8]!
   13fb8:	str	lr, [sp, #4]
   13fbc:	add	fp, sp, #4
   13fc0:	sub	sp, sp, #16
   13fc4:	str	r0, [fp, #-16]
   13fc8:	mov	r3, #0
   13fcc:	strh	r3, [fp, #-6]
   13fd0:	ldr	r3, [fp, #-16]
   13fd4:	cmp	r3, #0
   13fd8:	bne	13ffc <_start@@Base+0x368c>
   13fdc:	ldr	r3, [pc, #172]	; 14090 <_start@@Base+0x3720>
   13fe0:	add	r3, pc, r3
   13fe4:	mov	r2, #240	; 0xf0
   13fe8:	ldr	r1, [pc, #164]	; 14094 <_start@@Base+0x3724>
   13fec:	add	r1, pc, r1
   13ff0:	ldr	r0, [pc, #160]	; 14098 <_start@@Base+0x3728>
   13ff4:	add	r0, pc, r0
   13ff8:	bl	10960 <__assert_fail@plt>
   13ffc:	mov	r3, #3
   14000:	strh	r3, [fp, #-8]
   14004:	ldr	r0, [fp, #-16]
   14008:	bl	10ec8 <_start@@Base+0x558>
   1400c:	mov	r3, r0
   14010:	rsb	r3, r3, #0
   14014:	ldr	r2, [fp, #-16]
   14018:	add	r3, r2, r3
   1401c:	str	r3, [fp, #-12]
   14020:	ldr	r0, [fp, #-12]
   14024:	bl	10f2c <_start@@Base+0x5bc>
   14028:	mov	r3, r0
   1402c:	mov	r2, r3
   14030:	ldrh	r3, [fp, #-8]
   14034:	add	r3, r3, #3
   14038:	lsl	r3, r3, #1
   1403c:	cmp	r2, r3
   14040:	bcc	14068 <_start@@Base+0x36f8>
   14044:	ldrh	r3, [fp, #-8]
   14048:	add	r3, r3, #2
   1404c:	lsl	r3, r3, #1
   14050:	ldr	r2, [fp, #-12]
   14054:	add	r3, r2, r3
   14058:	mov	r0, r3
   1405c:	bl	10f2c <_start@@Base+0x5bc>
   14060:	mov	r3, r0
   14064:	strh	r3, [fp, #-6]
   14068:	ldrh	r3, [fp, #-6]
   1406c:	cmp	r3, #0
   14070:	movne	r3, #1
   14074:	moveq	r3, #0
   14078:	uxtb	r3, r3
   1407c:	mov	r0, r3
   14080:	sub	sp, fp, #4
   14084:	ldr	fp, [sp]
   14088:	add	sp, sp, #4
   1408c:	pop	{pc}		; (ldr pc, [sp], #4)
   14090:	andeq	r1, r0, r0, lsl #16
   14094:	andeq	r0, r0, ip, ror #28
   14098:	ldrdeq	r0, [r0], -ip
   1409c:	str	fp, [sp, #-8]!
   140a0:	str	lr, [sp, #4]
   140a4:	add	fp, sp, #4
   140a8:	sub	sp, sp, #24
   140ac:	str	r0, [fp, #-24]	; 0xffffffe8
   140b0:	mov	r3, #0
   140b4:	strh	r3, [fp, #-6]
   140b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   140bc:	cmp	r3, #0
   140c0:	bne	140e4 <_start@@Base+0x3774>
   140c4:	ldr	r3, [pc, #208]	; 1419c <_start@@Base+0x382c>
   140c8:	add	r3, pc, r3
   140cc:	mov	r2, #241	; 0xf1
   140d0:	ldr	r1, [pc, #200]	; 141a0 <_start@@Base+0x3830>
   140d4:	add	r1, pc, r1
   140d8:	ldr	r0, [pc, #196]	; 141a4 <_start@@Base+0x3834>
   140dc:	add	r0, pc, r0
   140e0:	bl	10960 <__assert_fail@plt>
   140e4:	mov	r3, #4
   140e8:	strh	r3, [fp, #-8]
   140ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   140f0:	bl	10ec8 <_start@@Base+0x558>
   140f4:	mov	r3, r0
   140f8:	rsb	r3, r3, #0
   140fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14100:	add	r3, r2, r3
   14104:	str	r3, [fp, #-12]
   14108:	ldr	r0, [fp, #-12]
   1410c:	bl	10f2c <_start@@Base+0x5bc>
   14110:	mov	r3, r0
   14114:	mov	r2, r3
   14118:	ldrh	r3, [fp, #-8]
   1411c:	add	r3, r3, #3
   14120:	lsl	r3, r3, #1
   14124:	cmp	r2, r3
   14128:	bcc	14150 <_start@@Base+0x37e0>
   1412c:	ldrh	r3, [fp, #-8]
   14130:	add	r3, r3, #2
   14134:	lsl	r3, r3, #1
   14138:	ldr	r2, [fp, #-12]
   1413c:	add	r3, r2, r3
   14140:	mov	r0, r3
   14144:	bl	10f2c <_start@@Base+0x5bc>
   14148:	mov	r3, r0
   1414c:	strh	r3, [fp, #-6]
   14150:	ldrh	r3, [fp, #-6]
   14154:	cmp	r3, #0
   14158:	beq	14184 <_start@@Base+0x3814>
   1415c:	ldrh	r3, [fp, #-6]
   14160:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14164:	add	r3, r2, r3
   14168:	str	r3, [fp, #-16]
   1416c:	ldr	r0, [fp, #-16]
   14170:	bl	10e68 <_start@@Base+0x4f8>
   14174:	mov	r2, r0
   14178:	ldr	r3, [fp, #-16]
   1417c:	add	r3, r3, r2
   14180:	b	14188 <_start@@Base+0x3818>
   14184:	mov	r3, #0
   14188:	mov	r0, r3
   1418c:	sub	sp, fp, #4
   14190:	ldr	fp, [sp]
   14194:	add	sp, sp, #4
   14198:	pop	{pc}		; (ldr pc, [sp], #4)
   1419c:	andeq	r1, r0, r4, lsl #15
   141a0:	andeq	r0, r0, r4, lsl #27
   141a4:	strdeq	r0, [r0], -r4
   141a8:	str	fp, [sp, #-8]!
   141ac:	str	lr, [sp, #4]
   141b0:	add	fp, sp, #4
   141b4:	sub	sp, sp, #16
   141b8:	str	r0, [fp, #-16]
   141bc:	mov	r3, #0
   141c0:	strh	r3, [fp, #-6]
   141c4:	ldr	r3, [fp, #-16]
   141c8:	cmp	r3, #0
   141cc:	bne	141f0 <_start@@Base+0x3880>
   141d0:	ldr	r3, [pc, #172]	; 14284 <_start@@Base+0x3914>
   141d4:	add	r3, pc, r3
   141d8:	mov	r2, #241	; 0xf1
   141dc:	ldr	r1, [pc, #164]	; 14288 <_start@@Base+0x3918>
   141e0:	add	r1, pc, r1
   141e4:	ldr	r0, [pc, #160]	; 1428c <_start@@Base+0x391c>
   141e8:	add	r0, pc, r0
   141ec:	bl	10960 <__assert_fail@plt>
   141f0:	mov	r3, #4
   141f4:	strh	r3, [fp, #-8]
   141f8:	ldr	r0, [fp, #-16]
   141fc:	bl	10ec8 <_start@@Base+0x558>
   14200:	mov	r3, r0
   14204:	rsb	r3, r3, #0
   14208:	ldr	r2, [fp, #-16]
   1420c:	add	r3, r2, r3
   14210:	str	r3, [fp, #-12]
   14214:	ldr	r0, [fp, #-12]
   14218:	bl	10f2c <_start@@Base+0x5bc>
   1421c:	mov	r3, r0
   14220:	mov	r2, r3
   14224:	ldrh	r3, [fp, #-8]
   14228:	add	r3, r3, #3
   1422c:	lsl	r3, r3, #1
   14230:	cmp	r2, r3
   14234:	bcc	1425c <_start@@Base+0x38ec>
   14238:	ldrh	r3, [fp, #-8]
   1423c:	add	r3, r3, #2
   14240:	lsl	r3, r3, #1
   14244:	ldr	r2, [fp, #-12]
   14248:	add	r3, r2, r3
   1424c:	mov	r0, r3
   14250:	bl	10f2c <_start@@Base+0x5bc>
   14254:	mov	r3, r0
   14258:	strh	r3, [fp, #-6]
   1425c:	ldrh	r3, [fp, #-6]
   14260:	cmp	r3, #0
   14264:	movne	r3, #1
   14268:	moveq	r3, #0
   1426c:	uxtb	r3, r3
   14270:	mov	r0, r3
   14274:	sub	sp, fp, #4
   14278:	ldr	fp, [sp]
   1427c:	add	sp, sp, #4
   14280:	pop	{pc}		; (ldr pc, [sp], #4)
   14284:	andeq	r1, r0, r0, asr r6
   14288:	andeq	r0, r0, r8, ror ip
   1428c:	andeq	r0, r0, r8, ror #25

00014290 <print_type@@Base>:
   14290:	str	fp, [sp, #-8]!
   14294:	str	lr, [sp, #4]
   14298:	add	fp, sp, #4
   1429c:	sub	sp, sp, #16
   142a0:	str	r0, [fp, #-16]
   142a4:	mov	r3, #1
   142a8:	str	r3, [fp, #-8]
   142ac:	mov	r0, #123	; 0x7b
   142b0:	bl	10924 <putchar@plt>
   142b4:	ldr	r0, [fp, #-16]
   142b8:	bl	113e0 <_start@@Base+0xa70>
   142bc:	mov	r3, r0
   142c0:	cmp	r3, #0
   142c4:	beq	14310 <print_type@@Base+0x80>
   142c8:	ldr	r3, [fp, #-8]
   142cc:	cmp	r3, #0
   142d0:	bne	142dc <print_type@@Base+0x4c>
   142d4:	mov	r0, #44	; 0x2c
   142d8:	bl	10924 <putchar@plt>
   142dc:	ldr	r0, [fp, #-16]
   142e0:	bl	112e0 <_start@@Base+0x970>
   142e4:	mov	r3, r0
   142e8:	mov	r0, r3
   142ec:	bl	1114c <_start@@Base+0x7dc>
   142f0:	mov	r3, r0
   142f4:	mov	r1, r3
   142f8:	ldr	r3, [pc, #216]	; 143d8 <print_type@@Base+0x148>
   142fc:	add	r3, pc, r3
   14300:	mov	r0, r3
   14304:	bl	10888 <printf@plt>
   14308:	mov	r3, #0
   1430c:	str	r3, [fp, #-8]
   14310:	ldr	r0, [fp, #-16]
   14314:	bl	114c8 <_start@@Base+0xb58>
   14318:	mov	r3, r0
   1431c:	cmp	r3, #0
   14320:	beq	1436c <print_type@@Base+0xdc>
   14324:	ldr	r3, [fp, #-8]
   14328:	cmp	r3, #0
   1432c:	bne	14338 <print_type@@Base+0xa8>
   14330:	mov	r0, #44	; 0x2c
   14334:	bl	10924 <putchar@plt>
   14338:	ldr	r0, [fp, #-16]
   1433c:	bl	112e0 <_start@@Base+0x970>
   14340:	mov	r3, r0
   14344:	mov	r0, r3
   14348:	bl	1114c <_start@@Base+0x7dc>
   1434c:	mov	r3, r0
   14350:	mov	r1, r3
   14354:	ldr	r3, [pc, #128]	; 143dc <print_type@@Base+0x14c>
   14358:	add	r3, pc, r3
   1435c:	mov	r0, r3
   14360:	bl	10888 <printf@plt>
   14364:	mov	r3, #0
   14368:	str	r3, [fp, #-8]
   1436c:	ldr	r0, [fp, #-16]
   14370:	bl	116b0 <_start@@Base+0xd40>
   14374:	mov	r3, r0
   14378:	cmp	r3, #0
   1437c:	beq	143bc <print_type@@Base+0x12c>
   14380:	ldr	r3, [fp, #-8]
   14384:	cmp	r3, #0
   14388:	bne	14394 <print_type@@Base+0x104>
   1438c:	mov	r0, #44	; 0x2c
   14390:	bl	10924 <putchar@plt>
   14394:	ldr	r0, [fp, #-16]
   14398:	bl	115b0 <_start@@Base+0xc40>
   1439c:	mov	r3, r0
   143a0:	mov	r1, r3
   143a4:	ldr	r3, [pc, #52]	; 143e0 <print_type@@Base+0x150>
   143a8:	add	r3, pc, r3
   143ac:	mov	r0, r3
   143b0:	bl	10888 <printf@plt>
   143b4:	mov	r3, #0
   143b8:	str	r3, [fp, #-8]
   143bc:	mov	r0, #125	; 0x7d
   143c0:	bl	10924 <putchar@plt>
   143c4:	nop	{0}
   143c8:	sub	sp, fp, #4
   143cc:	ldr	fp, [sp]
   143d0:	add	sp, sp, #4
   143d4:	pop	{pc}		; (ldr pc, [sp], #4)
   143d8:	andeq	r0, r0, r0, ror #24
   143dc:	andeq	r0, r0, r8, lsl ip
   143e0:	ldrdeq	r0, [r0], -r8

000143e4 <print_object@@Base>:
   143e4:	str	fp, [sp, #-8]!
   143e8:	str	lr, [sp, #4]
   143ec:	add	fp, sp, #4
   143f0:	sub	sp, sp, #24
   143f4:	str	r0, [fp, #-24]	; 0xffffffe8
   143f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   143fc:	bl	132d4 <_start@@Base+0x2964>
   14400:	str	r0, [fp, #-12]
   14404:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14408:	bl	1319c <_start@@Base+0x282c>
   1440c:	mov	r3, r0
   14410:	mov	r1, r3
   14414:	ldr	r3, [pc, #700]	; 146d8 <print_object@@Base+0x2f4>
   14418:	add	r3, pc, r3
   1441c:	mov	r0, r3
   14420:	bl	10888 <printf@plt>
   14424:	ldr	r3, [pc, #688]	; 146dc <print_object@@Base+0x2f8>
   14428:	add	r3, pc, r3
   1442c:	mov	r0, r3
   14430:	bl	10888 <printf@plt>
   14434:	mov	r3, #0
   14438:	str	r3, [fp, #-8]
   1443c:	b	145e4 <print_object@@Base+0x200>
   14440:	ldr	r3, [fp, #-8]
   14444:	cmp	r3, #0
   14448:	beq	14454 <print_object@@Base+0x70>
   1444c:	mov	r0, #44	; 0x2c
   14450:	bl	10924 <putchar@plt>
   14454:	ldr	r1, [fp, #-8]
   14458:	ldr	r0, [fp, #-12]
   1445c:	bl	12414 <_start@@Base+0x1aa4>
   14460:	str	r0, [fp, #-16]
   14464:	ldr	r0, [fp, #-16]
   14468:	bl	124ac <_start@@Base+0x1b3c>
   1446c:	mov	r3, r0
   14470:	mov	r1, r3
   14474:	ldr	r3, [pc, #612]	; 146e0 <print_object@@Base+0x2fc>
   14478:	add	r3, pc, r3
   1447c:	mov	r0, r3
   14480:	bl	10888 <printf@plt>
   14484:	ldr	r0, [fp, #-16]
   14488:	bl	125e4 <_start@@Base+0x1c74>
   1448c:	mov	r3, r0
   14490:	mov	r0, r3
   14494:	bl	14290 <print_type@@Base>
   14498:	ldr	r0, [fp, #-16]
   1449c:	bl	12818 <_start@@Base+0x1ea8>
   144a0:	mov	r3, r0
   144a4:	cmp	r3, #0
   144a8:	beq	144cc <print_object@@Base+0xe8>
   144ac:	ldr	r0, [fp, #-16]
   144b0:	bl	12718 <_start@@Base+0x1da8>
   144b4:	mov	r3, r0
   144b8:	mov	r1, r3
   144bc:	ldr	r3, [pc, #544]	; 146e4 <print_object@@Base+0x300>
   144c0:	add	r3, pc, r3
   144c4:	mov	r0, r3
   144c8:	bl	10888 <printf@plt>
   144cc:	ldr	r0, [fp, #-16]
   144d0:	bl	12a0c <_start@@Base+0x209c>
   144d4:	mov	r3, r0
   144d8:	cmp	r3, #0
   144dc:	beq	14500 <print_object@@Base+0x11c>
   144e0:	ldr	r0, [fp, #-16]
   144e4:	bl	12900 <_start@@Base+0x1f90>
   144e8:	mov	r2, r0
   144ec:	mov	r3, r1
   144f0:	ldr	r1, [pc, #496]	; 146e8 <print_object@@Base+0x304>
   144f4:	add	r1, pc, r1
   144f8:	mov	r0, r1
   144fc:	bl	10888 <printf@plt>
   14500:	ldr	r0, [fp, #-16]
   14504:	bl	12bfc <_start@@Base+0x228c>
   14508:	mov	r3, r0
   1450c:	cmp	r3, #0
   14510:	beq	14530 <print_object@@Base+0x14c>
   14514:	ldr	r0, [fp, #-16]
   14518:	bl	12af4 <_start@@Base+0x2184>
   1451c:	vmov	r2, r3, d0
   14520:	ldr	r1, [pc, #452]	; 146ec <print_object@@Base+0x308>
   14524:	add	r1, pc, r1
   14528:	mov	r0, r1
   1452c:	bl	10888 <printf@plt>
   14530:	ldr	r0, [fp, #-16]
   14534:	bl	12de4 <_start@@Base+0x2474>
   14538:	mov	r3, r0
   1453c:	cmp	r3, #0
   14540:	beq	14580 <print_object@@Base+0x19c>
   14544:	ldr	r0, [fp, #-16]
   14548:	bl	12ce4 <_start@@Base+0x2374>
   1454c:	mov	r3, r0
   14550:	cmp	r3, #0
   14554:	beq	14564 <print_object@@Base+0x180>
   14558:	ldr	r3, [pc, #400]	; 146f0 <print_object@@Base+0x30c>
   1455c:	add	r3, pc, r3
   14560:	b	1456c <print_object@@Base+0x188>
   14564:	ldr	r3, [pc, #392]	; 146f4 <print_object@@Base+0x310>
   14568:	add	r3, pc, r3
   1456c:	mov	r1, r3
   14570:	ldr	r3, [pc, #384]	; 146f8 <print_object@@Base+0x314>
   14574:	add	r3, pc, r3
   14578:	mov	r0, r3
   1457c:	bl	10888 <printf@plt>
   14580:	ldr	r0, [fp, #-16]
   14584:	bl	12fcc <_start@@Base+0x265c>
   14588:	mov	r3, r0
   1458c:	cmp	r3, #0
   14590:	beq	145d0 <print_object@@Base+0x1ec>
   14594:	ldr	r0, [fp, #-16]
   14598:	bl	12ecc <_start@@Base+0x255c>
   1459c:	mov	r3, r0
   145a0:	cmp	r3, #0
   145a4:	beq	145b4 <print_object@@Base+0x1d0>
   145a8:	ldr	r3, [pc, #332]	; 146fc <print_object@@Base+0x318>
   145ac:	add	r3, pc, r3
   145b0:	b	145bc <print_object@@Base+0x1d8>
   145b4:	ldr	r3, [pc, #324]	; 14700 <print_object@@Base+0x31c>
   145b8:	add	r3, pc, r3
   145bc:	mov	r1, r3
   145c0:	ldr	r3, [pc, #316]	; 14704 <print_object@@Base+0x320>
   145c4:	add	r3, pc, r3
   145c8:	mov	r0, r3
   145cc:	bl	10888 <printf@plt>
   145d0:	mov	r0, #125	; 0x7d
   145d4:	bl	10924 <putchar@plt>
   145d8:	ldr	r3, [fp, #-8]
   145dc:	add	r3, r3, #1
   145e0:	str	r3, [fp, #-8]
   145e4:	ldr	r0, [fp, #-12]
   145e8:	bl	123c4 <_start@@Base+0x1a54>
   145ec:	mov	r2, r0
   145f0:	ldr	r3, [fp, #-8]
   145f4:	cmp	r3, r2
   145f8:	bcc	14440 <print_object@@Base+0x5c>
   145fc:	mov	r0, #93	; 0x5d
   14600:	bl	10924 <putchar@plt>
   14604:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14608:	bl	1350c <_start@@Base+0x2b9c>
   1460c:	mov	r3, r0
   14610:	cmp	r3, #0
   14614:	beq	14654 <print_object@@Base+0x270>
   14618:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1461c:	bl	1340c <_start@@Base+0x2a9c>
   14620:	mov	r3, r0
   14624:	cmp	r3, #0
   14628:	beq	14638 <print_object@@Base+0x254>
   1462c:	ldr	r3, [pc, #212]	; 14708 <print_object@@Base+0x324>
   14630:	add	r3, pc, r3
   14634:	b	14640 <print_object@@Base+0x25c>
   14638:	ldr	r3, [pc, #204]	; 1470c <print_object@@Base+0x328>
   1463c:	add	r3, pc, r3
   14640:	mov	r1, r3
   14644:	ldr	r3, [pc, #196]	; 14710 <print_object@@Base+0x32c>
   14648:	add	r3, pc, r3
   1464c:	mov	r0, r3
   14650:	bl	10888 <printf@plt>
   14654:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14658:	bl	136f4 <_start@@Base+0x2d84>
   1465c:	mov	r3, r0
   14660:	cmp	r3, #0
   14664:	beq	14688 <print_object@@Base+0x2a4>
   14668:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1466c:	bl	135f4 <_start@@Base+0x2c84>
   14670:	mov	r3, r0
   14674:	mov	r1, r3
   14678:	ldr	r3, [pc, #148]	; 14714 <print_object@@Base+0x330>
   1467c:	add	r3, pc, r3
   14680:	mov	r0, r3
   14684:	bl	10888 <printf@plt>
   14688:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1468c:	bl	138dc <_start@@Base+0x2f6c>
   14690:	mov	r3, r0
   14694:	cmp	r3, #0
   14698:	beq	146bc <print_object@@Base+0x2d8>
   1469c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   146a0:	bl	137dc <_start@@Base+0x2e6c>
   146a4:	mov	r3, r0
   146a8:	mov	r1, r3
   146ac:	ldr	r3, [pc, #100]	; 14718 <print_object@@Base+0x334>
   146b0:	add	r3, pc, r3
   146b4:	mov	r0, r3
   146b8:	bl	10888 <printf@plt>
   146bc:	mov	r0, #125	; 0x7d
   146c0:	bl	10924 <putchar@plt>
   146c4:	nop	{0}
   146c8:	sub	sp, fp, #4
   146cc:	ldr	fp, [sp]
   146d0:	add	sp, sp, #4
   146d4:	pop	{pc}		; (ldr pc, [sp], #4)
   146d8:	andeq	r0, r0, r4, ror fp
   146dc:	andeq	r0, r0, r4, ror fp
   146e0:	andeq	r0, r0, r0, lsr fp
   146e4:	andeq	r0, r0, r0, lsl #22
   146e8:	ldrdeq	r0, [r0], -r8
   146ec:	andeq	r0, r0, r0, asr #21
   146f0:	andeq	r0, r0, r0, lsr #21
   146f4:	muleq	r0, ip, sl
   146f8:	muleq	r0, r8, sl
   146fc:	andeq	r0, r0, r0, asr sl
   14700:	andeq	r0, r0, ip, asr #20
   14704:	andeq	r0, r0, r8, asr sl
   14708:	andeq	r0, r0, ip, asr #19
   1470c:	andeq	r0, r0, r8, asr #19
   14710:	andeq	r0, r0, r0, ror #19
   14714:			; <UNDEFINED> instruction: 0x000009bc
   14718:	muleq	r0, r8, r9

0001471c <print_enum@@Base>:
   1471c:	str	fp, [sp, #-8]!
   14720:	str	lr, [sp, #4]
   14724:	add	fp, sp, #4
   14728:	sub	sp, sp, #24
   1472c:	str	r0, [fp, #-24]	; 0xffffffe8
   14730:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14734:	bl	11e38 <_start@@Base+0x14c8>
   14738:	mov	r3, r0
   1473c:	mov	r1, r3
   14740:	ldr	r3, [pc, #420]	; 148ec <print_enum@@Base+0x1d0>
   14744:	add	r3, pc, r3
   14748:	mov	r0, r3
   1474c:	bl	10888 <printf@plt>
   14750:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14754:	bl	11f70 <_start@@Base+0x1600>
   14758:	str	r0, [fp, #-12]
   1475c:	ldr	r3, [pc, #396]	; 148f0 <print_enum@@Base+0x1d4>
   14760:	add	r3, pc, r3
   14764:	mov	r0, r3
   14768:	bl	10888 <printf@plt>
   1476c:	mov	r3, #0
   14770:	str	r3, [fp, #-8]
   14774:	b	1483c <print_enum@@Base+0x120>
   14778:	ldr	r1, [fp, #-8]
   1477c:	ldr	r0, [fp, #-12]
   14780:	bl	11798 <_start@@Base+0xe28>
   14784:	str	r0, [fp, #-16]
   14788:	ldr	r3, [fp, #-8]
   1478c:	cmp	r3, #0
   14790:	beq	1479c <print_enum@@Base+0x80>
   14794:	mov	r0, #44	; 0x2c
   14798:	bl	10924 <putchar@plt>
   1479c:	ldr	r0, [fp, #-16]
   147a0:	bl	11830 <_start@@Base+0xec0>
   147a4:	mov	r3, r0
   147a8:	mov	r1, r3
   147ac:	ldr	r3, [pc, #320]	; 148f4 <print_enum@@Base+0x1d8>
   147b0:	add	r3, pc, r3
   147b4:	mov	r0, r3
   147b8:	bl	10888 <printf@plt>
   147bc:	ldr	r0, [fp, #-16]
   147c0:	bl	11a74 <_start@@Base+0x1104>
   147c4:	mov	r3, r0
   147c8:	cmp	r3, #0
   147cc:	beq	147f0 <print_enum@@Base+0xd4>
   147d0:	ldr	r0, [fp, #-16]
   147d4:	bl	11968 <_start@@Base+0xff8>
   147d8:	mov	r2, r0
   147dc:	mov	r3, r1
   147e0:	ldr	r1, [pc, #272]	; 148f8 <print_enum@@Base+0x1dc>
   147e4:	add	r1, pc, r1
   147e8:	mov	r0, r1
   147ec:	bl	10888 <printf@plt>
   147f0:	ldr	r0, [fp, #-16]
   147f4:	bl	11c68 <_start@@Base+0x12f8>
   147f8:	mov	r3, r0
   147fc:	cmp	r3, #0
   14800:	beq	14828 <print_enum@@Base+0x10c>
   14804:	ldr	r3, [pc, #240]	; 148fc <print_enum@@Base+0x1e0>
   14808:	add	r3, pc, r3
   1480c:	mov	r0, r3
   14810:	bl	10888 <printf@plt>
   14814:	ldr	r0, [fp, #-16]
   14818:	bl	11b5c <_start@@Base+0x11ec>
   1481c:	mov	r3, r0
   14820:	mov	r0, r3
   14824:	bl	143e4 <print_object@@Base>
   14828:	mov	r0, #125	; 0x7d
   1482c:	bl	10924 <putchar@plt>
   14830:	ldr	r3, [fp, #-8]
   14834:	add	r3, r3, #1
   14838:	str	r3, [fp, #-8]
   1483c:	ldr	r0, [fp, #-12]
   14840:	bl	11d50 <_start@@Base+0x13e0>
   14844:	mov	r2, r0
   14848:	ldr	r3, [fp, #-8]
   1484c:	cmp	r3, r2
   14850:	bcc	14778 <print_enum@@Base+0x5c>
   14854:	mov	r0, #93	; 0x5d
   14858:	bl	10924 <putchar@plt>
   1485c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14860:	bl	121a8 <_start@@Base+0x1838>
   14864:	mov	r3, r0
   14868:	cmp	r3, #0
   1486c:	beq	148ac <print_enum@@Base+0x190>
   14870:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14874:	bl	120a8 <_start@@Base+0x1738>
   14878:	mov	r3, r0
   1487c:	cmp	r3, #0
   14880:	beq	14890 <print_enum@@Base+0x174>
   14884:	ldr	r3, [pc, #116]	; 14900 <print_enum@@Base+0x1e4>
   14888:	add	r3, pc, r3
   1488c:	b	14898 <print_enum@@Base+0x17c>
   14890:	ldr	r3, [pc, #108]	; 14904 <print_enum@@Base+0x1e8>
   14894:	add	r3, pc, r3
   14898:	mov	r1, r3
   1489c:	ldr	r3, [pc, #100]	; 14908 <print_enum@@Base+0x1ec>
   148a0:	add	r3, pc, r3
   148a4:	mov	r0, r3
   148a8:	bl	10888 <printf@plt>
   148ac:	ldr	r3, [pc, #88]	; 1490c <print_enum@@Base+0x1f0>
   148b0:	add	r3, pc, r3
   148b4:	mov	r0, r3
   148b8:	bl	10888 <printf@plt>
   148bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   148c0:	bl	12290 <_start@@Base+0x1920>
   148c4:	mov	r3, r0
   148c8:	mov	r0, r3
   148cc:	bl	14290 <print_type@@Base>
   148d0:	mov	r0, #125	; 0x7d
   148d4:	bl	10924 <putchar@plt>
   148d8:	nop	{0}
   148dc:	sub	sp, fp, #4
   148e0:	ldr	fp, [sp]
   148e4:	add	sp, sp, #4
   148e8:	pop	{pc}		; (ldr pc, [sp], #4)
   148ec:	andeq	r0, r0, r8, asr #16
   148f0:	strdeq	r0, [r0], -r8
   148f4:	ldrdeq	r0, [r0], -ip
   148f8:	andeq	r0, r0, r0, lsl #17
   148fc:	andeq	r0, r0, ip, ror #16
   14900:	andeq	r0, r0, r4, ror r7
   14904:	andeq	r0, r0, r0, ror r7
   14908:	andeq	r0, r0, r0, ror #15
   1490c:	andeq	r0, r0, r0, ror #15

00014910 <print_schema@@Base>:
   14910:	str	fp, [sp, #-8]!
   14914:	str	lr, [sp, #4]
   14918:	add	fp, sp, #4
   1491c:	sub	sp, sp, #24
   14920:	str	r0, [fp, #-24]	; 0xffffffe8
   14924:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14928:	bl	13a3c <_start@@Base+0x30cc>
   1492c:	str	r0, [fp, #-12]
   14930:	mov	r0, #123	; 0x7b
   14934:	bl	10924 <putchar@plt>
   14938:	ldr	r3, [pc, #432]	; 14af0 <print_schema@@Base+0x1e0>
   1493c:	add	r3, pc, r3
   14940:	mov	r0, r3
   14944:	bl	10888 <printf@plt>
   14948:	mov	r3, #0
   1494c:	str	r3, [fp, #-8]
   14950:	b	1498c <print_schema@@Base+0x7c>
   14954:	ldr	r3, [fp, #-8]
   14958:	cmp	r3, #0
   1495c:	beq	14968 <print_schema@@Base+0x58>
   14960:	mov	r0, #44	; 0x2c
   14964:	bl	10924 <putchar@plt>
   14968:	ldr	r1, [fp, #-8]
   1496c:	ldr	r0, [fp, #-12]
   14970:	bl	13104 <_start@@Base+0x2794>
   14974:	mov	r3, r0
   14978:	mov	r0, r3
   1497c:	bl	143e4 <print_object@@Base>
   14980:	ldr	r3, [fp, #-8]
   14984:	add	r3, r3, #1
   14988:	str	r3, [fp, #-8]
   1498c:	ldr	r0, [fp, #-12]
   14990:	bl	130b4 <_start@@Base+0x2744>
   14994:	mov	r2, r0
   14998:	ldr	r3, [fp, #-8]
   1499c:	cmp	r3, r2
   149a0:	bcc	14954 <print_schema@@Base+0x44>
   149a4:	mov	r0, #93	; 0x5d
   149a8:	bl	10924 <putchar@plt>
   149ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   149b0:	bl	13b74 <_start@@Base+0x3204>
   149b4:	str	r0, [fp, #-16]
   149b8:	ldr	r3, [pc, #308]	; 14af4 <print_schema@@Base+0x1e4>
   149bc:	add	r3, pc, r3
   149c0:	mov	r0, r3
   149c4:	bl	10888 <printf@plt>
   149c8:	mov	r3, #0
   149cc:	str	r3, [fp, #-8]
   149d0:	b	14a0c <print_schema@@Base+0xfc>
   149d4:	ldr	r3, [fp, #-8]
   149d8:	cmp	r3, #0
   149dc:	beq	149e8 <print_schema@@Base+0xd8>
   149e0:	mov	r0, #44	; 0x2c
   149e4:	bl	10924 <putchar@plt>
   149e8:	ldr	r1, [fp, #-8]
   149ec:	ldr	r0, [fp, #-16]
   149f0:	bl	11da0 <_start@@Base+0x1430>
   149f4:	mov	r3, r0
   149f8:	mov	r0, r3
   149fc:	bl	1471c <print_enum@@Base>
   14a00:	ldr	r3, [fp, #-8]
   14a04:	add	r3, r3, #1
   14a08:	str	r3, [fp, #-8]
   14a0c:	ldr	r0, [fp, #-16]
   14a10:	bl	11d50 <_start@@Base+0x13e0>
   14a14:	mov	r2, r0
   14a18:	ldr	r3, [fp, #-8]
   14a1c:	cmp	r3, r2
   14a20:	bcc	149d4 <print_schema@@Base+0xc4>
   14a24:	mov	r0, #93	; 0x5d
   14a28:	bl	10924 <putchar@plt>
   14a2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14a30:	bl	13dbc <_start@@Base+0x344c>
   14a34:	mov	r3, r0
   14a38:	cmp	r3, #0
   14a3c:	beq	14a60 <print_schema@@Base+0x150>
   14a40:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14a44:	bl	13cac <_start@@Base+0x333c>
   14a48:	mov	r3, r0
   14a4c:	mov	r1, r3
   14a50:	ldr	r3, [pc, #160]	; 14af8 <print_schema@@Base+0x1e8>
   14a54:	add	r3, pc, r3
   14a58:	mov	r0, r3
   14a5c:	bl	10888 <printf@plt>
   14a60:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14a64:	bl	13fb4 <_start@@Base+0x3644>
   14a68:	mov	r3, r0
   14a6c:	cmp	r3, #0
   14a70:	beq	14a94 <print_schema@@Base+0x184>
   14a74:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14a78:	bl	13ea4 <_start@@Base+0x3534>
   14a7c:	mov	r3, r0
   14a80:	mov	r1, r3
   14a84:	ldr	r3, [pc, #112]	; 14afc <print_schema@@Base+0x1ec>
   14a88:	add	r3, pc, r3
   14a8c:	mov	r0, r3
   14a90:	bl	10888 <printf@plt>
   14a94:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14a98:	bl	141a8 <_start@@Base+0x3838>
   14a9c:	mov	r3, r0
   14aa0:	cmp	r3, #0
   14aa4:	beq	14acc <print_schema@@Base+0x1bc>
   14aa8:	ldr	r3, [pc, #80]	; 14b00 <print_schema@@Base+0x1f0>
   14aac:	add	r3, pc, r3
   14ab0:	mov	r0, r3
   14ab4:	bl	10888 <printf@plt>
   14ab8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14abc:	bl	1409c <_start@@Base+0x372c>
   14ac0:	mov	r3, r0
   14ac4:	mov	r0, r3
   14ac8:	bl	143e4 <print_object@@Base>
   14acc:	ldr	r3, [pc, #48]	; 14b04 <print_schema@@Base+0x1f4>
   14ad0:	add	r3, pc, r3
   14ad4:	mov	r0, r3
   14ad8:	bl	108dc <puts@plt>
   14adc:	nop	{0}
   14ae0:	sub	sp, fp, #4
   14ae4:	ldr	fp, [sp]
   14ae8:	add	sp, sp, #4
   14aec:	pop	{pc}		; (ldr pc, [sp], #4)
   14af0:	andeq	r0, r0, r8, ror #14
   14af4:	strdeq	r0, [r0], -r4
   14af8:	andeq	r0, r0, r8, ror #12
   14afc:	andeq	r0, r0, r8, asr #12
   14b00:	andeq	r0, r0, r8, lsr r6
   14b04:	andeq	r0, r0, r4, lsr #12

00014b08 <load_and_dump_schema@@Base>:
   14b08:	str	r4, [sp, #-12]!
   14b0c:	str	fp, [sp, #4]
   14b10:	str	lr, [sp, #8]
   14b14:	add	fp, sp, #8
   14b18:	sub	sp, sp, #28
   14b1c:	str	r0, [fp, #-32]	; 0xffffffe0
   14b20:	ldr	r4, [pc, #328]	; 14c70 <load_and_dump_schema@@Base+0x168>
   14b24:	add	r4, pc, r4
   14b28:	mvn	r3, #0
   14b2c:	str	r3, [fp, #-16]
   14b30:	sub	r3, fp, #28
   14b34:	mov	r2, r3
   14b38:	movw	r1, #10000	; 0x2710
   14b3c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14b40:	bl	10a60 <_start@@Base+0xf0>
   14b44:	str	r0, [fp, #-24]	; 0xffffffe8
   14b48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b4c:	cmp	r3, #0
   14b50:	bne	14b78 <load_and_dump_schema@@Base+0x70>
   14b54:	ldr	r3, [pc, #280]	; 14c74 <load_and_dump_schema@@Base+0x16c>
   14b58:	ldr	r3, [r4, r3]
   14b5c:	ldr	r3, [r3]
   14b60:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14b64:	ldr	r1, [pc, #268]	; 14c78 <load_and_dump_schema@@Base+0x170>
   14b68:	add	r1, pc, r1
   14b6c:	mov	r0, r3
   14b70:	bl	10918 <fprintf@plt>
   14b74:	b	14c40 <load_and_dump_schema@@Base+0x138>
   14b78:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14b7c:	cmp	r3, #11
   14b80:	bhi	14ba8 <load_and_dump_schema@@Base+0xa0>
   14b84:	ldr	r3, [pc, #232]	; 14c74 <load_and_dump_schema@@Base+0x16c>
   14b88:	ldr	r3, [r4, r3]
   14b8c:	ldr	r3, [r3]
   14b90:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14b94:	ldr	r1, [pc, #224]	; 14c7c <load_and_dump_schema@@Base+0x174>
   14b98:	add	r1, pc, r1
   14b9c:	mov	r0, r3
   14ba0:	bl	10918 <fprintf@plt>
   14ba4:	b	14c40 <load_and_dump_schema@@Base+0x138>
   14ba8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14bac:	bl	139c4 <_start@@Base+0x3054>
   14bb0:	str	r0, [fp, #-20]	; 0xffffffec
   14bb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14bb8:	cmp	r3, #0
   14bbc:	bne	14c00 <load_and_dump_schema@@Base+0xf8>
   14bc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14bc4:	add	r3, r3, #4
   14bc8:	mov	r0, r3
   14bcc:	bl	139c4 <_start@@Base+0x3054>
   14bd0:	str	r0, [fp, #-20]	; 0xffffffec
   14bd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14bd8:	cmp	r3, #0
   14bdc:	beq	14c00 <load_and_dump_schema@@Base+0xf8>
   14be0:	ldr	r3, [pc, #140]	; 14c74 <load_and_dump_schema@@Base+0x16c>
   14be4:	ldr	r3, [r4, r3]
   14be8:	ldr	r3, [r3]
   14bec:	mov	r2, #40	; 0x28
   14bf0:	mov	r1, #1
   14bf4:	ldr	r0, [pc, #132]	; 14c80 <load_and_dump_schema@@Base+0x178>
   14bf8:	add	r0, pc, r0
   14bfc:	bl	108c4 <fwrite@plt>
   14c00:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c04:	cmp	r3, #0
   14c08:	bne	14c30 <load_and_dump_schema@@Base+0x128>
   14c0c:	ldr	r3, [pc, #96]	; 14c74 <load_and_dump_schema@@Base+0x16c>
   14c10:	ldr	r3, [r4, r3]
   14c14:	ldr	r3, [r3]
   14c18:	mov	r2, #27
   14c1c:	mov	r1, #1
   14c20:	ldr	r0, [pc, #92]	; 14c84 <load_and_dump_schema@@Base+0x17c>
   14c24:	add	r0, pc, r0
   14c28:	bl	108c4 <fwrite@plt>
   14c2c:	b	14c40 <load_and_dump_schema@@Base+0x138>
   14c30:	ldr	r0, [fp, #-20]	; 0xffffffec
   14c34:	bl	14910 <print_schema@@Base>
   14c38:	mov	r3, #0
   14c3c:	str	r3, [fp, #-16]
   14c40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c44:	cmp	r3, #0
   14c48:	beq	14c54 <load_and_dump_schema@@Base+0x14c>
   14c4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14c50:	bl	108a0 <free@plt>
   14c54:	ldr	r3, [fp, #-16]
   14c58:	mov	r0, r3
   14c5c:	sub	sp, fp, #8
   14c60:	ldr	r4, [sp]
   14c64:	ldr	fp, [sp, #4]
   14c68:	add	sp, sp, #8
   14c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c70:	ldrdeq	r1, [r1], -r4
   14c74:	andeq	r0, r0, r8, asr r0
   14c78:	muleq	r0, r0, r5
   14c7c:	andeq	r0, r0, ip, lsl #11
   14c80:	andeq	r0, r0, ip, asr #10
   14c84:	andeq	r0, r0, ip, asr #10

00014c88 <main@@Base>:
   14c88:	str	r4, [sp, #-12]!
   14c8c:	str	fp, [sp, #4]
   14c90:	str	lr, [sp, #8]
   14c94:	add	fp, sp, #8
   14c98:	sub	sp, sp, #12
   14c9c:	str	r0, [fp, #-16]
   14ca0:	str	r1, [fp, #-20]	; 0xffffffec
   14ca4:	ldr	r4, [pc, #164]	; 14d50 <main@@Base+0xc8>
   14ca8:	add	r4, pc, r4
   14cac:	ldr	r3, [fp, #-16]
   14cb0:	cmp	r3, #2
   14cb4:	beq	14d20 <main@@Base+0x98>
   14cb8:	ldr	r3, [pc, #148]	; 14d54 <main@@Base+0xcc>
   14cbc:	ldr	r3, [r4, r3]
   14cc0:	ldr	r3, [r3]
   14cc4:	mov	r2, #28
   14cc8:	mov	r1, #1
   14ccc:	ldr	r0, [pc, #132]	; 14d58 <main@@Base+0xd0>
   14cd0:	add	r0, pc, r0
   14cd4:	bl	108c4 <fwrite@plt>
   14cd8:	ldr	r3, [pc, #116]	; 14d54 <main@@Base+0xcc>
   14cdc:	ldr	r3, [r4, r3]
   14ce0:	ldr	r3, [r3]
   14ce4:	mov	r2, #74	; 0x4a
   14ce8:	mov	r1, #1
   14cec:	ldr	r0, [pc, #104]	; 14d5c <main@@Base+0xd4>
   14cf0:	add	r0, pc, r0
   14cf4:	bl	108c4 <fwrite@plt>
   14cf8:	ldr	r3, [pc, #84]	; 14d54 <main@@Base+0xcc>
   14cfc:	ldr	r3, [r4, r3]
   14d00:	ldr	r3, [r3]
   14d04:	mov	r2, #180	; 0xb4
   14d08:	mov	r1, #1
   14d0c:	ldr	r0, [pc, #76]	; 14d60 <main@@Base+0xd8>
   14d10:	add	r0, pc, r0
   14d14:	bl	108c4 <fwrite@plt>
   14d18:	mvn	r0, #0
   14d1c:	bl	1090c <exit@plt>
   14d20:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d24:	add	r3, r3, #4
   14d28:	ldr	r3, [r3]
   14d2c:	mov	r0, r3
   14d30:	bl	14b08 <load_and_dump_schema@@Base>
   14d34:	mov	r3, r0
   14d38:	mov	r0, r3
   14d3c:	sub	sp, fp, #8
   14d40:	ldr	r4, [sp]
   14d44:	ldr	fp, [sp, #4]
   14d48:	add	sp, sp, #8
   14d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d50:	andeq	r1, r1, r0, asr r3
   14d54:	andeq	r0, r0, r8, asr r0
   14d58:			; <UNDEFINED> instruction: 0x000004bc
   14d5c:			; <UNDEFINED> instruction: 0x000004bc
   14d60:	andeq	r0, r0, r8, ror #9

00014d64 <__libc_csu_init@@Base>:
   14d64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14d68:	mov	r7, r0
   14d6c:	ldr	r6, [pc, #72]	; 14dbc <__libc_csu_init@@Base+0x58>
   14d70:	ldr	r5, [pc, #72]	; 14dc0 <__libc_csu_init@@Base+0x5c>
   14d74:	add	r6, pc, r6
   14d78:	add	r5, pc, r5
   14d7c:	sub	r6, r6, r5
   14d80:	mov	r8, r1
   14d84:	mov	r9, r2
   14d88:	bl	10868 <printf@plt-0x20>
   14d8c:	asrs	r6, r6, #2
   14d90:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d94:	mov	r4, #0
   14d98:	add	r4, r4, #1
   14d9c:	ldr	r3, [r5], #4
   14da0:	mov	r2, r9
   14da4:	mov	r1, r8
   14da8:	mov	r0, r7
   14dac:	blx	r3
   14db0:	cmp	r6, r4
   14db4:	bne	14d98 <__libc_csu_init@@Base+0x34>
   14db8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14dbc:	muleq	r1, r8, r1
   14dc0:	muleq	r1, r0, r1

00014dc4 <__libc_csu_fini@@Base>:
   14dc4:	bx	lr

Disassembly of section .fini:

00014dc8 <.fini>:
   14dc8:	push	{r3, lr}
   14dcc:	pop	{r3, pc}
