
../repos/prog2/4:     file format elf32-littlearm


Disassembly of section .init:

00010a94 <.init>:
   10a94:	push	{r3, lr}
   10a98:	bl	10b8c <_start@@Base+0x3c>
   10a9c:	pop	{r3, pc}

Disassembly of section .plt:

00010aa0 <strcmp@plt-0x14>:
   10aa0:	push	{lr}		; (str lr, [sp, #-4]!)
   10aa4:	ldr	lr, [pc, #4]	; 10ab0 <strcmp@plt-0x4>
   10aa8:	add	lr, pc, lr
   10aac:	ldr	pc, [lr, #8]!
   10ab0:	andeq	r2, r1, r0, asr r5

00010ab4 <strcmp@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #73728	; 0x12000
   10abc:	ldr	pc, [ip, #1360]!	; 0x550

00010ac0 <printf@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #73728	; 0x12000
   10ac8:	ldr	pc, [ip, #1352]!	; 0x548

00010acc <free@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #73728	; 0x12000
   10ad4:	ldr	pc, [ip, #1344]!	; 0x540

00010ad8 <strdup@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #73728	; 0x12000
   10ae0:	ldr	pc, [ip, #1336]!	; 0x538

00010ae4 <strcpy@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #73728	; 0x12000
   10aec:	ldr	pc, [ip, #1328]!	; 0x530

00010af0 <puts@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #73728	; 0x12000
   10af8:	ldr	pc, [ip, #1320]!	; 0x528

00010afc <malloc@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #73728	; 0x12000
   10b04:	ldr	pc, [ip, #1312]!	; 0x520

00010b08 <__libc_start_main@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #73728	; 0x12000
   10b10:	ldr	pc, [ip, #1304]!	; 0x518

00010b14 <__gmon_start__@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #73728	; 0x12000
   10b1c:	ldr	pc, [ip, #1296]!	; 0x510

00010b20 <strlen@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #73728	; 0x12000
   10b28:	ldr	pc, [ip, #1288]!	; 0x508

00010b2c <setvbuf@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #73728	; 0x12000
   10b34:	ldr	pc, [ip, #1280]!	; 0x500

00010b38 <putchar@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #73728	; 0x12000
   10b40:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b44 <abort@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #73728	; 0x12000
   10b4c:	ldr	pc, [ip, #1264]!	; 0x4f0

Disassembly of section .text:

00010b50 <_start@@Base>:
   10b50:	mov	fp, #0
   10b54:	mov	lr, #0
   10b58:	pop	{r1}		; (ldr r1, [sp], #4)
   10b5c:	mov	r2, sp
   10b60:	push	{r2}		; (str r2, [sp, #-4]!)
   10b64:	push	{r0}		; (str r0, [sp, #-4]!)
   10b68:	ldr	ip, [pc, #16]	; 10b80 <_start@@Base+0x30>
   10b6c:	push	{ip}		; (str ip, [sp, #-4]!)
   10b70:	ldr	r0, [pc, #12]	; 10b84 <_start@@Base+0x34>
   10b74:	ldr	r3, [pc, #12]	; 10b88 <_start@@Base+0x38>
   10b78:	bl	10b08 <__libc_start_main@plt>
   10b7c:	bl	10b44 <abort@plt>
   10b80:			; <UNDEFINED> instruction: 0x00011eb4
   10b84:	andeq	r1, r1, r8, ror r9
   10b88:	andeq	r1, r1, r4, asr lr
   10b8c:	ldr	r3, [pc, #20]	; 10ba8 <_start@@Base+0x58>
   10b90:	ldr	r2, [pc, #20]	; 10bac <_start@@Base+0x5c>
   10b94:	add	r3, pc, r3
   10b98:	ldr	r2, [r3, r2]
   10b9c:	cmp	r2, #0
   10ba0:	bxeq	lr
   10ba4:	b	10b14 <__gmon_start__@plt>
   10ba8:	andeq	r2, r1, r4, ror #8
   10bac:	andeq	r0, r0, r4, asr #32
   10bb0:	ldr	r0, [pc, #24]	; 10bd0 <_start@@Base+0x80>
   10bb4:	ldr	r3, [pc, #24]	; 10bd4 <_start@@Base+0x84>
   10bb8:	cmp	r3, r0
   10bbc:	bxeq	lr
   10bc0:	ldr	r3, [pc, #16]	; 10bd8 <_start@@Base+0x88>
   10bc4:	cmp	r3, #0
   10bc8:	bxeq	lr
   10bcc:	bx	r3
   10bd0:	andeq	r3, r2, r4, asr r0
   10bd4:	andeq	r3, r2, r4, asr r0
   10bd8:	andeq	r0, r0, r0
   10bdc:	ldr	r0, [pc, #36]	; 10c08 <_start@@Base+0xb8>
   10be0:	ldr	r1, [pc, #36]	; 10c0c <_start@@Base+0xbc>
   10be4:	sub	r1, r1, r0
   10be8:	asr	r1, r1, #2
   10bec:	add	r1, r1, r1, lsr #31
   10bf0:	asrs	r1, r1, #1
   10bf4:	bxeq	lr
   10bf8:	ldr	r3, [pc, #16]	; 10c10 <_start@@Base+0xc0>
   10bfc:	cmp	r3, #0
   10c00:	bxeq	lr
   10c04:	bx	r3
   10c08:	andeq	r3, r2, r4, asr r0
   10c0c:	andeq	r3, r2, r4, asr r0
   10c10:	andeq	r0, r0, r0
   10c14:	push	{r4, lr}
   10c18:	ldr	r4, [pc, #24]	; 10c38 <_start@@Base+0xe8>
   10c1c:	ldrb	r3, [r4]
   10c20:	cmp	r3, #0
   10c24:	popne	{r4, pc}
   10c28:	bl	10bb0 <_start@@Base+0x60>
   10c2c:	mov	r3, #1
   10c30:	strb	r3, [r4]
   10c34:	pop	{r4, pc}
   10c38:	andeq	r3, r2, r4, asr r0
   10c3c:	b	10bdc <_start@@Base+0x8c>

00010c40 <_l@@Base>:
   10c40:	sub	sp, sp, #12
   10c44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c48:	add	fp, sp, #28
   10c4c:	sub	sp, sp, #8
   10c50:	mov	r9, r0
   10c54:	add	r0, fp, #8
   10c58:	stm	r0, {r1, r2, r3}
   10c5c:	mov	r0, #12
   10c60:	bl	10afc <malloc@plt>
   10c64:	mov	r1, #0
   10c68:	mov	r8, r0
   10c6c:	cmp	r9, #1
   10c70:	str	r1, [r0]
   10c74:	stmib	r0, {r1, r9}
   10c78:	add	r0, fp, #8
   10c7c:	str	r0, [sp, #4]
   10c80:	blt	10cf4 <_l@@Base+0xb4>
   10c84:	mov	r5, #0
   10c88:	ldr	r0, [sp, #4]
   10c8c:	cmp	r5, #0
   10c90:	mov	sl, r8
   10c94:	addne	sl, r6, #4
   10c98:	add	r1, r0, #4
   10c9c:	str	r1, [sp, #4]
   10ca0:	ldr	r7, [r0]
   10ca4:	mov	r0, #12
   10ca8:	bl	10afc <malloc@plt>
   10cac:	cmp	r5, #0
   10cb0:	mov	r4, r0
   10cb4:	str	r0, [sl]
   10cb8:	moveq	r6, r5
   10cbc:	str	r6, [r0, #8]
   10cc0:	mov	r0, r7
   10cc4:	bl	10b20 <strlen@plt>
   10cc8:	add	r0, r0, #1
   10ccc:	bl	10afc <malloc@plt>
   10cd0:	mov	r1, r7
   10cd4:	str	r0, [r4]
   10cd8:	bl	10ae4 <strcpy@plt>
   10cdc:	add	r5, r5, #1
   10ce0:	mov	r6, r4
   10ce4:	cmp	r9, r5
   10ce8:	bne	10c88 <_l@@Base+0x48>
   10cec:	mov	r1, #0
   10cf0:	b	10cf4 <_l@@Base+0xb4>
   10cf4:	str	r1, [r4, #4]
   10cf8:	str	r4, [r8, #4]
   10cfc:	mov	r0, r8
   10d00:	sub	sp, fp, #28
   10d04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d08:	add	sp, sp, #12
   10d0c:	bx	lr

00010d10 <_f@@Base>:
   10d10:	cmp	r0, #0
   10d14:	moveq	r0, #0
   10d18:	bxeq	lr
   10d1c:	ldr	r0, [r0]
   10d20:	mov	r2, #0
   10d24:	cmp	r1, #1
   10d28:	blt	10d50 <_f@@Base+0x40>
   10d2c:	cmp	r0, #0
   10d30:	beq	10d50 <_f@@Base+0x40>
   10d34:	mov	r2, #0
   10d38:	ldr	r0, [r0, #4]
   10d3c:	add	r2, r2, #1
   10d40:	cmp	r2, r1
   10d44:	bge	10d50 <_f@@Base+0x40>
   10d48:	cmp	r0, #0
   10d4c:	bne	10d38 <_f@@Base+0x28>
   10d50:	cmp	r2, r1
   10d54:	ldreq	r0, [r0]
   10d58:	bxeq	lr
   10d5c:	ldr	r0, [pc, #4]	; 10d68 <_f@@Base+0x58>
   10d60:	add	r0, pc, r0
   10d64:	bx	lr
   10d68:	andeq	r1, r0, sl, asr #12

00010d6c <teste_lista_nova@@Base>:
   10d6c:	push	{r4, sl, fp, lr}
   10d70:	add	fp, sp, #8
   10d74:	ldr	r0, [pc, #112]	; 10dec <teste_lista_nova@@Base+0x80>
   10d78:	add	r0, pc, r0
   10d7c:	bl	10ac0 <printf@plt>
   10d80:	bl	11a24 <lista_nova@@Base>
   10d84:	cmp	r0, #0
   10d88:	beq	10db4 <teste_lista_nova@@Base+0x48>
   10d8c:	mov	r4, r0
   10d90:	ldr	r0, [r0, #8]
   10d94:	cmp	r0, #0
   10d98:	beq	10dd0 <teste_lista_nova@@Base+0x64>
   10d9c:	ldr	r0, [pc, #84]	; 10df8 <teste_lista_nova@@Base+0x8c>
   10da0:	add	r0, pc, r0
   10da4:	bl	10ac0 <printf@plt>
   10da8:	mov	r0, r4
   10dac:	bl	11a48 <lista_apaga@@Base>
   10db0:	b	10dc0 <teste_lista_nova@@Base+0x54>
   10db4:	ldr	r0, [pc, #52]	; 10df0 <teste_lista_nova@@Base+0x84>
   10db8:	add	r0, pc, r0
   10dbc:	bl	10ac0 <printf@plt>
   10dc0:	mov	r0, #10
   10dc4:	bl	10b38 <putchar@plt>
   10dc8:	mov	r0, #1
   10dcc:	pop	{r4, sl, fp, pc}
   10dd0:	mov	r0, r4
   10dd4:	bl	11a48 <lista_apaga@@Base>
   10dd8:	ldr	r0, [pc, #20]	; 10df4 <teste_lista_nova@@Base+0x88>
   10ddc:	add	r0, pc, r0
   10de0:	bl	10af0 <puts@plt>
   10de4:	mov	r0, #0
   10de8:	pop	{r4, sl, fp, pc}
   10dec:	andeq	r1, r0, r4, asr #2
   10df0:	andeq	r1, r0, r3, lsl r1
   10df4:	andeq	r1, r0, pc, asr #11
   10df8:	andeq	r1, r0, r1, asr #2

00010dfc <teste_lista_insere@@Base>:
   10dfc:	push	{r4, r5, r6, r7, fp, lr}
   10e00:	add	fp, sp, #16
   10e04:	ldr	r1, [pc, #748]	; 110f8 <teste_lista_insere@@Base+0x2fc>
   10e08:	mov	r0, #2
   10e0c:	add	r1, pc, r1
   10e10:	mov	r2, r1
   10e14:	bl	10c40 <_l@@Base>
   10e18:	mov	r5, r0
   10e1c:	ldr	r0, [pc, #728]	; 110fc <teste_lista_insere@@Base+0x300>
   10e20:	add	r0, pc, r0
   10e24:	bl	10ac0 <printf@plt>
   10e28:	ldr	r0, [r5]
   10e2c:	ldr	r2, [r0, #4]
   10e30:	ldr	r1, [pc, #712]	; 11100 <teste_lista_insere@@Base+0x304>
   10e34:	mov	r0, r5
   10e38:	add	r1, pc, r1
   10e3c:	bl	11ae8 <lista_insere@@Base>
   10e40:	mov	r4, #0
   10e44:	cmp	r0, #0
   10e48:	bne	10e5c <teste_lista_insere@@Base+0x60>
   10e4c:	ldr	r0, [pc, #688]	; 11104 <teste_lista_insere@@Base+0x308>
   10e50:	add	r0, pc, r0
   10e54:	bl	10ac0 <printf@plt>
   10e58:	mov	r4, #1
   10e5c:	ldr	r0, [r5, #8]
   10e60:	cmp	r0, #3
   10e64:	beq	10e84 <teste_lista_insere@@Base+0x88>
   10e68:	ldr	r0, [pc, #664]	; 11108 <teste_lista_insere@@Base+0x30c>
   10e6c:	add	r0, pc, r0
   10e70:	bl	10ac0 <printf@plt>
   10e74:	ldr	r0, [r5, #8]
   10e78:	add	r4, r4, #1
   10e7c:	cmp	r0, #3
   10e80:	bne	110d0 <teste_lista_insere@@Base+0x2d4>
   10e84:	ldr	r6, [r5]
   10e88:	ldr	r0, [r6]
   10e8c:	ldr	r1, [pc, #632]	; 1110c <teste_lista_insere@@Base+0x310>
   10e90:	add	r1, pc, r1
   10e94:	bl	10ab4 <strcmp@plt>
   10e98:	cmp	r0, #0
   10e9c:	bne	10ed8 <teste_lista_insere@@Base+0xdc>
   10ea0:	ldr	r7, [r6, #4]
   10ea4:	ldr	r0, [r7]
   10ea8:	ldr	r1, [pc, #608]	; 11110 <teste_lista_insere@@Base+0x314>
   10eac:	add	r1, pc, r1
   10eb0:	bl	10ab4 <strcmp@plt>
   10eb4:	cmp	r0, #0
   10eb8:	bne	10ed8 <teste_lista_insere@@Base+0xdc>
   10ebc:	ldr	r0, [r7, #4]
   10ec0:	ldr	r0, [r0]
   10ec4:	ldr	r1, [pc, #584]	; 11114 <teste_lista_insere@@Base+0x318>
   10ec8:	add	r1, pc, r1
   10ecc:	bl	10ab4 <strcmp@plt>
   10ed0:	cmp	r0, #0
   10ed4:	beq	10eec <teste_lista_insere@@Base+0xf0>
   10ed8:	ldr	r0, [pc, #568]	; 11118 <teste_lista_insere@@Base+0x31c>
   10edc:	add	r0, pc, r0
   10ee0:	bl	10ac0 <printf@plt>
   10ee4:	ldr	r6, [r5]
   10ee8:	add	r4, r4, #1
   10eec:	ldr	r1, [pc, #552]	; 1111c <teste_lista_insere@@Base+0x320>
   10ef0:	mov	r0, r5
   10ef4:	mov	r2, r6
   10ef8:	add	r1, pc, r1
   10efc:	bl	11ae8 <lista_insere@@Base>
   10f00:	ldr	r1, [r5]
   10f04:	cmp	r0, r1
   10f08:	beq	10f1c <teste_lista_insere@@Base+0x120>
   10f0c:	ldr	r0, [pc, #524]	; 11120 <teste_lista_insere@@Base+0x324>
   10f10:	add	r0, pc, r0
   10f14:	bl	10ac0 <printf@plt>
   10f18:	add	r4, r4, #1
   10f1c:	ldr	r0, [r5, #8]
   10f20:	cmp	r0, #4
   10f24:	beq	10f44 <teste_lista_insere@@Base+0x148>
   10f28:	ldr	r0, [pc, #500]	; 11124 <teste_lista_insere@@Base+0x328>
   10f2c:	add	r0, pc, r0
   10f30:	bl	10ac0 <printf@plt>
   10f34:	ldr	r0, [r5, #8]
   10f38:	add	r4, r4, #1
   10f3c:	cmp	r0, #4
   10f40:	bne	110d0 <teste_lista_insere@@Base+0x2d4>
   10f44:	ldr	r6, [r5]
   10f48:	ldr	r0, [r6]
   10f4c:	ldr	r1, [pc, #468]	; 11128 <teste_lista_insere@@Base+0x32c>
   10f50:	add	r1, pc, r1
   10f54:	bl	10ab4 <strcmp@plt>
   10f58:	cmp	r0, #0
   10f5c:	bne	10fb4 <teste_lista_insere@@Base+0x1b8>
   10f60:	ldr	r6, [r6, #4]
   10f64:	ldr	r0, [r6]
   10f68:	ldr	r1, [pc, #444]	; 1112c <teste_lista_insere@@Base+0x330>
   10f6c:	add	r1, pc, r1
   10f70:	bl	10ab4 <strcmp@plt>
   10f74:	cmp	r0, #0
   10f78:	bne	10fb4 <teste_lista_insere@@Base+0x1b8>
   10f7c:	ldr	r6, [r6, #4]
   10f80:	ldr	r0, [r6]
   10f84:	ldr	r1, [pc, #420]	; 11130 <teste_lista_insere@@Base+0x334>
   10f88:	add	r1, pc, r1
   10f8c:	bl	10ab4 <strcmp@plt>
   10f90:	cmp	r0, #0
   10f94:	bne	10fb4 <teste_lista_insere@@Base+0x1b8>
   10f98:	ldr	r0, [r6, #4]
   10f9c:	ldr	r0, [r0]
   10fa0:	ldr	r1, [pc, #396]	; 11134 <teste_lista_insere@@Base+0x338>
   10fa4:	add	r1, pc, r1
   10fa8:	bl	10ab4 <strcmp@plt>
   10fac:	cmp	r0, #0
   10fb0:	beq	10fc4 <teste_lista_insere@@Base+0x1c8>
   10fb4:	ldr	r0, [pc, #380]	; 11138 <teste_lista_insere@@Base+0x33c>
   10fb8:	add	r0, pc, r0
   10fbc:	bl	10ac0 <printf@plt>
   10fc0:	add	r4, r4, #1
   10fc4:	ldr	r1, [pc, #368]	; 1113c <teste_lista_insere@@Base+0x340>
   10fc8:	mov	r0, r5
   10fcc:	mov	r2, #0
   10fd0:	add	r1, pc, r1
   10fd4:	bl	11ae8 <lista_insere@@Base>
   10fd8:	ldr	r0, [r5, #8]
   10fdc:	cmp	r0, #5
   10fe0:	beq	11000 <teste_lista_insere@@Base+0x204>
   10fe4:	ldr	r0, [pc, #340]	; 11140 <teste_lista_insere@@Base+0x344>
   10fe8:	add	r0, pc, r0
   10fec:	bl	10ac0 <printf@plt>
   10ff0:	ldr	r0, [r5, #8]
   10ff4:	add	r4, r4, #1
   10ff8:	cmp	r0, #5
   10ffc:	bne	110d0 <teste_lista_insere@@Base+0x2d4>
   11000:	ldr	r0, [r5]
   11004:	ldr	r0, [r0, #4]
   11008:	ldr	r0, [r0, #4]
   1100c:	ldr	r0, [r0, #4]
   11010:	ldr	r0, [r0, #4]
   11014:	ldr	r0, [r0]
   11018:	ldr	r1, [pc, #292]	; 11144 <teste_lista_insere@@Base+0x348>
   1101c:	add	r1, pc, r1
   11020:	bl	10ab4 <strcmp@plt>
   11024:	cmp	r0, #0
   11028:	beq	1103c <teste_lista_insere@@Base+0x240>
   1102c:	ldr	r0, [pc, #276]	; 11148 <teste_lista_insere@@Base+0x34c>
   11030:	add	r0, pc, r0
   11034:	bl	10ac0 <printf@plt>
   11038:	add	r4, r4, #1
   1103c:	mov	r0, r5
   11040:	bl	11a48 <lista_apaga@@Base>
   11044:	bl	11a24 <lista_nova@@Base>
   11048:	ldr	r1, [pc, #252]	; 1114c <teste_lista_insere@@Base+0x350>
   1104c:	mov	r2, #0
   11050:	mov	r5, r0
   11054:	add	r1, pc, r1
   11058:	bl	11ae8 <lista_insere@@Base>
   1105c:	ldr	r0, [r5, #8]
   11060:	cmp	r0, #1
   11064:	beq	11078 <teste_lista_insere@@Base+0x27c>
   11068:	ldr	r0, [pc, #224]	; 11150 <teste_lista_insere@@Base+0x354>
   1106c:	add	r0, pc, r0
   11070:	bl	10ac0 <printf@plt>
   11074:	add	r4, r4, #1
   11078:	mov	r0, r5
   1107c:	bl	11ab8 <lista_tamanho@@Base>
   11080:	cmp	r0, #1
   11084:	bne	110c8 <teste_lista_insere@@Base+0x2cc>
   11088:	ldr	r0, [r5]
   1108c:	ldr	r0, [r0]
   11090:	ldr	r1, [pc, #192]	; 11158 <teste_lista_insere@@Base+0x35c>
   11094:	add	r1, pc, r1
   11098:	bl	10ab4 <strcmp@plt>
   1109c:	cmp	r0, #0
   110a0:	beq	110c0 <teste_lista_insere@@Base+0x2c4>
   110a4:	ldr	r0, [pc, #176]	; 1115c <teste_lista_insere@@Base+0x360>
   110a8:	add	r0, pc, r0
   110ac:	bl	10ac0 <printf@plt>
   110b0:	mov	r0, r5
   110b4:	bl	11a48 <lista_apaga@@Base>
   110b8:	add	r4, r4, #1
   110bc:	b	110d0 <teste_lista_insere@@Base+0x2d4>
   110c0:	mov	r0, r5
   110c4:	bl	11a48 <lista_apaga@@Base>
   110c8:	cmp	r4, #0
   110cc:	beq	110e0 <teste_lista_insere@@Base+0x2e4>
   110d0:	mov	r0, #10
   110d4:	bl	10b38 <putchar@plt>
   110d8:	mov	r0, r4
   110dc:	pop	{r4, r5, r6, r7, fp, pc}
   110e0:	ldr	r0, [pc, #108]	; 11154 <teste_lista_insere@@Base+0x358>
   110e4:	add	r0, pc, r0
   110e8:	bl	10af0 <puts@plt>
   110ec:	mov	r4, #0
   110f0:	mov	r0, r4
   110f4:	pop	{r4, r5, r6, r7, fp, pc}
   110f8:	strdeq	r1, [r0], -r8
   110fc:	andeq	r1, r0, lr, ror #1
   11100:	ldrdeq	r1, [r0], -r0
   11104:	andeq	r1, r0, pc, asr #1
   11108:	ldrdeq	r1, [r0], -sp
   1110c:	andeq	r1, r0, r4, ror r0
   11110:	andeq	r1, r0, ip, asr r0
   11114:	andeq	r1, r0, ip, lsr r0
   11118:	andeq	r1, r0, r9, lsr #1
   1111c:	andeq	r1, r0, r0, lsl r0
   11120:	andeq	r1, r0, fp, lsr #1
   11124:	strheq	r1, [r0], -pc	; <UNPREDICTABLE>
   11128:			; <UNDEFINED> instruction: 0x00000fb8
   1112c:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   11130:	andeq	r0, r0, r0, lsl #31
   11134:	andeq	r0, r0, r0, ror #30
   11138:	andeq	r0, r0, sp, asr #31
   1113c:	andeq	r0, r0, r8, lsr pc
   11140:	andeq	r1, r0, pc, lsr r0
   11144:	andeq	r0, r0, ip, ror #29
   11148:	andeq	r0, r0, r5, asr pc
   1114c:			; <UNDEFINED> instruction: 0x00000eb4
   11150:	strdeq	r0, [r0], -r7
   11154:	andeq	r1, r0, r7, asr #5
   11158:	andeq	r0, r0, r4, ror lr
   1115c:	ldrdeq	r0, [r0], -sp

00011160 <teste_lista_remove@@Base>:
   11160:	push	{r4, r5, r6, sl, fp, lr}
   11164:	add	fp, sp, #16
   11168:	sub	sp, sp, #8
   1116c:	ldr	r0, [pc, #384]	; 112f4 <teste_lista_remove@@Base+0x194>
   11170:	ldr	r1, [pc, #384]	; 112f8 <teste_lista_remove@@Base+0x198>
   11174:	add	r0, pc, r0
   11178:	add	r1, pc, r1
   1117c:	str	r0, [sp, #4]
   11180:	str	r1, [sp]
   11184:	mov	r0, #5
   11188:	ldr	r1, [pc, #364]	; 112fc <teste_lista_remove@@Base+0x19c>
   1118c:	ldr	r2, [pc, #364]	; 11300 <teste_lista_remove@@Base+0x1a0>
   11190:	ldr	r3, [pc, #364]	; 11304 <teste_lista_remove@@Base+0x1a4>
   11194:	add	r1, pc, r1
   11198:	add	r2, pc, r2
   1119c:	add	r3, pc, r3
   111a0:	bl	10c40 <_l@@Base>
   111a4:	mov	r4, r0
   111a8:	ldr	r0, [pc, #344]	; 11308 <teste_lista_remove@@Base+0x1a8>
   111ac:	add	r0, pc, r0
   111b0:	bl	10ac0 <printf@plt>
   111b4:	ldr	r0, [r4]
   111b8:	ldr	r0, [r0, #4]
   111bc:	ldr	r0, [r0, #4]
   111c0:	ldr	r1, [r0, #4]
   111c4:	mov	r0, r4
   111c8:	bl	11bc0 <lista_remove@@Base>
   111cc:	ldr	r1, [r4, #4]
   111d0:	cmp	r0, r1
   111d4:	beq	111ec <teste_lista_remove@@Base+0x8c>
   111d8:	ldr	r0, [pc, #300]	; 1130c <teste_lista_remove@@Base+0x1ac>
   111dc:	add	r0, pc, r0
   111e0:	bl	10ac0 <printf@plt>
   111e4:	mov	r5, #1
   111e8:	b	111f0 <teste_lista_remove@@Base+0x90>
   111ec:	mov	r5, #0
   111f0:	ldr	r0, [r4, #8]
   111f4:	cmp	r0, #4
   111f8:	beq	1120c <teste_lista_remove@@Base+0xac>
   111fc:	ldr	r0, [pc, #268]	; 11310 <teste_lista_remove@@Base+0x1b0>
   11200:	add	r0, pc, r0
   11204:	bl	10ac0 <printf@plt>
   11208:	add	r5, r5, #1
   1120c:	ldr	r6, [r4]
   11210:	ldr	r0, [r6]
   11214:	ldr	r1, [pc, #248]	; 11314 <teste_lista_remove@@Base+0x1b4>
   11218:	add	r1, pc, r1
   1121c:	bl	10ab4 <strcmp@plt>
   11220:	cmp	r0, #0
   11224:	bne	1127c <teste_lista_remove@@Base+0x11c>
   11228:	ldr	r6, [r6, #4]
   1122c:	ldr	r0, [r6]
   11230:	ldr	r1, [pc, #224]	; 11318 <teste_lista_remove@@Base+0x1b8>
   11234:	add	r1, pc, r1
   11238:	bl	10ab4 <strcmp@plt>
   1123c:	cmp	r0, #0
   11240:	bne	1127c <teste_lista_remove@@Base+0x11c>
   11244:	ldr	r6, [r6, #4]
   11248:	ldr	r0, [r6]
   1124c:	ldr	r1, [pc, #200]	; 1131c <teste_lista_remove@@Base+0x1bc>
   11250:	add	r1, pc, r1
   11254:	bl	10ab4 <strcmp@plt>
   11258:	cmp	r0, #0
   1125c:	bne	1127c <teste_lista_remove@@Base+0x11c>
   11260:	ldr	r0, [r6, #4]
   11264:	ldr	r0, [r0]
   11268:	ldr	r1, [pc, #176]	; 11320 <teste_lista_remove@@Base+0x1c0>
   1126c:	add	r1, pc, r1
   11270:	bl	10ab4 <strcmp@plt>
   11274:	cmp	r0, #0
   11278:	beq	1128c <teste_lista_remove@@Base+0x12c>
   1127c:	ldr	r0, [pc, #160]	; 11324 <teste_lista_remove@@Base+0x1c4>
   11280:	add	r0, pc, r0
   11284:	bl	10ac0 <printf@plt>
   11288:	add	r5, r5, #1
   1128c:	mov	r0, r4
   11290:	mov	r1, #0
   11294:	bl	11bc0 <lista_remove@@Base>
   11298:	cmp	r0, #0
   1129c:	beq	112bc <teste_lista_remove@@Base+0x15c>
   112a0:	ldr	r0, [pc, #128]	; 11328 <teste_lista_remove@@Base+0x1c8>
   112a4:	add	r0, pc, r0
   112a8:	bl	10ac0 <printf@plt>
   112ac:	mov	r0, r4
   112b0:	bl	11a48 <lista_apaga@@Base>
   112b4:	add	r5, r5, #1
   112b8:	b	112cc <teste_lista_remove@@Base+0x16c>
   112bc:	mov	r0, r4
   112c0:	bl	11a48 <lista_apaga@@Base>
   112c4:	cmp	r5, #0
   112c8:	beq	112e0 <teste_lista_remove@@Base+0x180>
   112cc:	mov	r0, #10
   112d0:	bl	10b38 <putchar@plt>
   112d4:	mov	r0, r5
   112d8:	sub	sp, fp, #16
   112dc:	pop	{r4, r5, r6, sl, fp, pc}
   112e0:	ldr	r0, [pc, #68]	; 1132c <teste_lista_remove@@Base+0x1cc>
   112e4:	add	r0, pc, r0
   112e8:	bl	10af0 <puts@plt>
   112ec:	mov	r5, #0
   112f0:	b	112d4 <teste_lista_remove@@Base+0x174>
   112f4:	andeq	r0, r0, r7, lsr pc
   112f8:	andeq	r0, r0, r0, lsr pc
   112fc:	andeq	r0, r0, fp, lsl #30
   11300:	andeq	r0, r0, sl, lsl #30
   11304:	andeq	r0, r0, r9, lsl #30
   11308:	andeq	r0, r0, r2, lsl #30
   1130c:	andeq	r0, r0, r3, ror #29
   11310:	strdeq	r0, [r0], -r8
   11314:	andeq	r0, r0, r7, lsl #29
   11318:	andeq	r0, r0, lr, ror #28
   1131c:	andeq	r0, r0, r5, asr lr
   11320:	andeq	r0, r0, pc, lsr lr
   11324:			; <UNDEFINED> instruction: 0x00000eb4
   11328:	andeq	r0, r0, r6, asr #29
   1132c:	andeq	r1, r0, r7, asr #1

00011330 <teste_lista_pesquisa@@Base>:
   11330:	push	{r4, r5, r6, sl, fp, lr}
   11334:	add	fp, sp, #16
   11338:	sub	sp, sp, #16
   1133c:	ldr	r1, [pc, #344]	; 1149c <teste_lista_pesquisa@@Base+0x16c>
   11340:	ldr	r6, [pc, #344]	; 114a0 <teste_lista_pesquisa@@Base+0x170>
   11344:	mov	r0, #7
   11348:	add	r1, pc, r1
   1134c:	add	r6, pc, r6
   11350:	mov	r2, r1
   11354:	mov	r3, r1
   11358:	stm	sp, {r1, r6}
   1135c:	str	r1, [sp, #8]
   11360:	str	r1, [sp, #12]
   11364:	bl	10c40 <_l@@Base>
   11368:	mov	r5, r0
   1136c:	ldr	r0, [pc, #304]	; 114a4 <teste_lista_pesquisa@@Base+0x174>
   11370:	add	r0, pc, r0
   11374:	bl	10ac0 <printf@plt>
   11378:	mov	r0, r5
   1137c:	mov	r1, r6
   11380:	mov	r2, #0
   11384:	mov	r4, #0
   11388:	bl	11c54 <lista_pesquisa@@Base>
   1138c:	ldr	r1, [r5]
   11390:	ldr	r1, [r1, #4]
   11394:	ldr	r1, [r1, #4]
   11398:	ldr	r1, [r1, #4]
   1139c:	ldr	r1, [r1, #4]
   113a0:	cmp	r0, r1
   113a4:	beq	113b8 <teste_lista_pesquisa@@Base+0x88>
   113a8:	ldr	r0, [pc, #248]	; 114a8 <teste_lista_pesquisa@@Base+0x178>
   113ac:	add	r0, pc, r0
   113b0:	bl	10ac0 <printf@plt>
   113b4:	mov	r4, #1
   113b8:	ldr	r1, [pc, #236]	; 114ac <teste_lista_pesquisa@@Base+0x17c>
   113bc:	mov	r0, r5
   113c0:	mov	r2, #0
   113c4:	add	r1, pc, r1
   113c8:	bl	11c54 <lista_pesquisa@@Base>
   113cc:	cmp	r0, #0
   113d0:	beq	113e4 <teste_lista_pesquisa@@Base+0xb4>
   113d4:	ldr	r0, [pc, #212]	; 114b0 <teste_lista_pesquisa@@Base+0x180>
   113d8:	add	r0, pc, r0
   113dc:	bl	10ac0 <printf@plt>
   113e0:	add	r4, r4, #1
   113e4:	ldr	r1, [pc, #200]	; 114b4 <teste_lista_pesquisa@@Base+0x184>
   113e8:	mov	r0, r5
   113ec:	mov	r2, #1
   113f0:	add	r1, pc, r1
   113f4:	bl	11c54 <lista_pesquisa@@Base>
   113f8:	ldr	r1, [r5]
   113fc:	ldr	r1, [r1, #4]
   11400:	ldr	r1, [r1, #4]
   11404:	ldr	r1, [r1, #4]
   11408:	ldr	r1, [r1, #4]
   1140c:	ldr	r1, [r1, #4]
   11410:	ldr	r1, [r1, #4]
   11414:	cmp	r0, r1
   11418:	beq	1142c <teste_lista_pesquisa@@Base+0xfc>
   1141c:	ldr	r0, [pc, #148]	; 114b8 <teste_lista_pesquisa@@Base+0x188>
   11420:	add	r0, pc, r0
   11424:	bl	10ac0 <printf@plt>
   11428:	add	r4, r4, #1
   1142c:	ldr	r1, [pc, #136]	; 114bc <teste_lista_pesquisa@@Base+0x18c>
   11430:	mov	r0, r5
   11434:	mov	r2, #1
   11438:	add	r1, pc, r1
   1143c:	bl	11c54 <lista_pesquisa@@Base>
   11440:	cmp	r0, #0
   11444:	beq	11464 <teste_lista_pesquisa@@Base+0x134>
   11448:	ldr	r0, [pc, #112]	; 114c0 <teste_lista_pesquisa@@Base+0x190>
   1144c:	add	r0, pc, r0
   11450:	bl	10ac0 <printf@plt>
   11454:	mov	r0, r5
   11458:	bl	11a48 <lista_apaga@@Base>
   1145c:	add	r4, r4, #1
   11460:	b	11474 <teste_lista_pesquisa@@Base+0x144>
   11464:	mov	r0, r5
   11468:	bl	11a48 <lista_apaga@@Base>
   1146c:	cmp	r4, #0
   11470:	beq	11488 <teste_lista_pesquisa@@Base+0x158>
   11474:	mov	r0, #10
   11478:	bl	10b38 <putchar@plt>
   1147c:	mov	r0, r4
   11480:	sub	sp, fp, #16
   11484:	pop	{r4, r5, r6, sl, fp, pc}
   11488:	ldr	r0, [pc, #52]	; 114c4 <teste_lista_pesquisa@@Base+0x194>
   1148c:	add	r0, pc, r0
   11490:	bl	10af0 <puts@plt>
   11494:	mov	r4, #0
   11498:	b	1147c <teste_lista_pesquisa@@Base+0x14c>
   1149c:			; <UNDEFINED> instruction: 0x00000bbc
   114a0:	andeq	r0, r0, r0, asr lr
   114a4:	andeq	r0, r0, pc, lsr #28
   114a8:	andeq	r0, r0, r6, lsl #28
   114ac:	andeq	r0, r0, r5, lsr lr
   114b0:	andeq	r0, r0, r8, lsr #28
   114b4:	andeq	r0, r0, r4, lsl fp
   114b8:	muleq	r0, r2, sp
   114bc:	andeq	r0, r0, r1, asr #27
   114c0:			; <UNDEFINED> instruction: 0x00000db4
   114c4:	andeq	r0, r0, pc, lsl pc

000114c8 <teste_lista_ordena@@Base>:
   114c8:	push	{r4, r5, r6, sl, fp, lr}
   114cc:	add	fp, sp, #16
   114d0:	sub	sp, sp, #8
   114d4:	ldr	r0, [pc, #484]	; 116c0 <teste_lista_ordena@@Base+0x1f8>
   114d8:	ldr	r1, [pc, #484]	; 116c4 <teste_lista_ordena@@Base+0x1fc>
   114dc:	add	r0, pc, r0
   114e0:	add	r1, pc, r1
   114e4:	str	r0, [sp, #4]
   114e8:	str	r1, [sp]
   114ec:	mov	r0, #5
   114f0:	ldr	r1, [pc, #464]	; 116c8 <teste_lista_ordena@@Base+0x200>
   114f4:	ldr	r2, [pc, #464]	; 116cc <teste_lista_ordena@@Base+0x204>
   114f8:	ldr	r3, [pc, #464]	; 116d0 <teste_lista_ordena@@Base+0x208>
   114fc:	add	r1, pc, r1
   11500:	add	r2, pc, r2
   11504:	add	r3, pc, r3
   11508:	bl	10c40 <_l@@Base>
   1150c:	mov	r5, r0
   11510:	ldr	r0, [pc, #444]	; 116d4 <teste_lista_ordena@@Base+0x20c>
   11514:	add	r0, pc, r0
   11518:	bl	10ac0 <printf@plt>
   1151c:	mov	r0, #0
   11520:	mov	r4, #0
   11524:	bl	11d00 <lista_ordena@@Base>
   11528:	cmn	r0, #1
   1152c:	beq	11540 <teste_lista_ordena@@Base+0x78>
   11530:	ldr	r0, [pc, #416]	; 116d8 <teste_lista_ordena@@Base+0x210>
   11534:	add	r0, pc, r0
   11538:	bl	10ac0 <printf@plt>
   1153c:	mov	r4, #1
   11540:	mov	r0, r5
   11544:	bl	11d00 <lista_ordena@@Base>
   11548:	ldr	r6, [r5]
   1154c:	ldr	r0, [r6]
   11550:	ldr	r1, [pc, #388]	; 116dc <teste_lista_ordena@@Base+0x214>
   11554:	add	r1, pc, r1
   11558:	bl	10ab4 <strcmp@plt>
   1155c:	cmp	r0, #0
   11560:	bne	115d4 <teste_lista_ordena@@Base+0x10c>
   11564:	ldr	r6, [r6, #4]
   11568:	ldr	r0, [r6]
   1156c:	ldr	r1, [pc, #364]	; 116e0 <teste_lista_ordena@@Base+0x218>
   11570:	add	r1, pc, r1
   11574:	bl	10ab4 <strcmp@plt>
   11578:	cmp	r0, #0
   1157c:	bne	115d4 <teste_lista_ordena@@Base+0x10c>
   11580:	ldr	r6, [r6, #4]
   11584:	ldr	r0, [r6]
   11588:	ldr	r1, [pc, #340]	; 116e4 <teste_lista_ordena@@Base+0x21c>
   1158c:	add	r1, pc, r1
   11590:	bl	10ab4 <strcmp@plt>
   11594:	cmp	r0, #0
   11598:	bne	115d4 <teste_lista_ordena@@Base+0x10c>
   1159c:	ldr	r6, [r6, #4]
   115a0:	ldr	r0, [r6]
   115a4:	ldr	r1, [pc, #316]	; 116e8 <teste_lista_ordena@@Base+0x220>
   115a8:	add	r1, pc, r1
   115ac:	bl	10ab4 <strcmp@plt>
   115b0:	cmp	r0, #0
   115b4:	bne	115d4 <teste_lista_ordena@@Base+0x10c>
   115b8:	ldr	r0, [r6, #4]
   115bc:	ldr	r0, [r0]
   115c0:	ldr	r1, [pc, #292]	; 116ec <teste_lista_ordena@@Base+0x224>
   115c4:	add	r1, pc, r1
   115c8:	bl	10ab4 <strcmp@plt>
   115cc:	cmp	r0, #0
   115d0:	beq	115e4 <teste_lista_ordena@@Base+0x11c>
   115d4:	ldr	r0, [pc, #276]	; 116f0 <teste_lista_ordena@@Base+0x228>
   115d8:	add	r0, pc, r0
   115dc:	bl	10ac0 <printf@plt>
   115e0:	add	r4, r4, #1
   115e4:	ldr	r6, [r5, #4]
   115e8:	ldr	r0, [r6]
   115ec:	ldr	r1, [pc, #256]	; 116f4 <teste_lista_ordena@@Base+0x22c>
   115f0:	add	r1, pc, r1
   115f4:	bl	10ab4 <strcmp@plt>
   115f8:	cmp	r0, #0
   115fc:	bne	11670 <teste_lista_ordena@@Base+0x1a8>
   11600:	ldr	r6, [r6, #8]
   11604:	ldr	r0, [r6]
   11608:	ldr	r1, [pc, #232]	; 116f8 <teste_lista_ordena@@Base+0x230>
   1160c:	add	r1, pc, r1
   11610:	bl	10ab4 <strcmp@plt>
   11614:	cmp	r0, #0
   11618:	bne	11670 <teste_lista_ordena@@Base+0x1a8>
   1161c:	ldr	r6, [r6, #8]
   11620:	ldr	r0, [r6]
   11624:	ldr	r1, [pc, #208]	; 116fc <teste_lista_ordena@@Base+0x234>
   11628:	add	r1, pc, r1
   1162c:	bl	10ab4 <strcmp@plt>
   11630:	cmp	r0, #0
   11634:	bne	11670 <teste_lista_ordena@@Base+0x1a8>
   11638:	ldr	r6, [r6, #8]
   1163c:	ldr	r0, [r6]
   11640:	ldr	r1, [pc, #184]	; 11700 <teste_lista_ordena@@Base+0x238>
   11644:	add	r1, pc, r1
   11648:	bl	10ab4 <strcmp@plt>
   1164c:	cmp	r0, #0
   11650:	bne	11670 <teste_lista_ordena@@Base+0x1a8>
   11654:	ldr	r0, [r6, #8]
   11658:	ldr	r0, [r0]
   1165c:	ldr	r1, [pc, #160]	; 11704 <teste_lista_ordena@@Base+0x23c>
   11660:	add	r1, pc, r1
   11664:	bl	10ab4 <strcmp@plt>
   11668:	cmp	r0, #0
   1166c:	beq	1169c <teste_lista_ordena@@Base+0x1d4>
   11670:	ldr	r0, [pc, #144]	; 11708 <teste_lista_ordena@@Base+0x240>
   11674:	add	r0, pc, r0
   11678:	bl	10ac0 <printf@plt>
   1167c:	mov	r0, r5
   11680:	bl	11a48 <lista_apaga@@Base>
   11684:	add	r4, r4, #1
   11688:	mov	r0, #10
   1168c:	bl	10b38 <putchar@plt>
   11690:	mov	r0, r4
   11694:	sub	sp, fp, #16
   11698:	pop	{r4, r5, r6, sl, fp, pc}
   1169c:	mov	r0, r5
   116a0:	bl	11a48 <lista_apaga@@Base>
   116a4:	cmp	r4, #0
   116a8:	bne	11688 <teste_lista_ordena@@Base+0x1c0>
   116ac:	ldr	r0, [pc, #88]	; 1170c <teste_lista_ordena@@Base+0x244>
   116b0:	add	r0, pc, r0
   116b4:	bl	10af0 <puts@plt>
   116b8:	mov	r4, #0
   116bc:	b	11690 <teste_lista_ordena@@Base+0x1c8>
   116c0:	andeq	r0, r0, r0, ror sp
   116c4:	andeq	r0, r0, r9, ror #26
   116c8:	andeq	r0, r0, r4, asr #26
   116cc:	andeq	r0, r0, r3, asr #26
   116d0:	andeq	r0, r0, r2, asr #26
   116d4:	andeq	r0, r0, fp, lsr sp
   116d8:	andeq	r0, r0, ip, lsr #26
   116dc:	andeq	r0, r0, ip, ror #25
   116e0:	ldrdeq	r0, [r0], -r3
   116e4:			; <UNDEFINED> instruction: 0x00000cbd
   116e8:	andeq	r0, r0, r4, lsr #25
   116ec:	andeq	r0, r0, r2, lsl #25
   116f0:			; <UNDEFINED> instruction: 0x00000cb6
   116f4:	andeq	r0, r0, r6, asr ip
   116f8:	andeq	r0, r0, r0, asr #24
   116fc:	andeq	r0, r0, r1, lsr #24
   11700:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11704:	andeq	r0, r0, r0, ror #23
   11708:	andeq	r0, r0, r7, asr ip
   1170c:	strdeq	r0, [r0], -fp

00011710 <teste_lista_inverte@@Base>:
   11710:	push	{r4, r5, r6, sl, fp, lr}
   11714:	add	fp, sp, #16
   11718:	sub	sp, sp, #8
   1171c:	ldr	r0, [pc, #512]	; 11924 <teste_lista_inverte@@Base+0x214>
   11720:	ldr	r1, [pc, #512]	; 11928 <teste_lista_inverte@@Base+0x218>
   11724:	add	r0, pc, r0
   11728:	add	r1, pc, r1
   1172c:	str	r0, [sp, #4]
   11730:	str	r1, [sp]
   11734:	mov	r0, #5
   11738:	ldr	r1, [pc, #492]	; 1192c <teste_lista_inverte@@Base+0x21c>
   1173c:	ldr	r2, [pc, #492]	; 11930 <teste_lista_inverte@@Base+0x220>
   11740:	ldr	r3, [pc, #492]	; 11934 <teste_lista_inverte@@Base+0x224>
   11744:	add	r1, pc, r1
   11748:	add	r2, pc, r2
   1174c:	add	r3, pc, r3
   11750:	bl	10c40 <_l@@Base>
   11754:	mov	r5, r0
   11758:	ldr	r0, [pc, #472]	; 11938 <teste_lista_inverte@@Base+0x228>
   1175c:	add	r0, pc, r0
   11760:	bl	10ac0 <printf@plt>
   11764:	mov	r0, #0
   11768:	mov	r4, #0
   1176c:	bl	11dcc <lista_inverte@@Base>
   11770:	cmn	r0, #1
   11774:	beq	11788 <teste_lista_inverte@@Base+0x78>
   11778:	ldr	r0, [pc, #444]	; 1193c <teste_lista_inverte@@Base+0x22c>
   1177c:	add	r0, pc, r0
   11780:	bl	10ac0 <printf@plt>
   11784:	mov	r4, #1
   11788:	mov	r0, r5
   1178c:	bl	11dcc <lista_inverte@@Base>
   11790:	ldr	r0, [r5, #8]
   11794:	cmp	r0, #5
   11798:	beq	117ac <teste_lista_inverte@@Base+0x9c>
   1179c:	ldr	r0, [pc, #412]	; 11940 <teste_lista_inverte@@Base+0x230>
   117a0:	add	r0, pc, r0
   117a4:	bl	10ac0 <printf@plt>
   117a8:	add	r4, r4, #1
   117ac:	ldr	r6, [r5]
   117b0:	ldr	r0, [r6]
   117b4:	ldr	r1, [pc, #392]	; 11944 <teste_lista_inverte@@Base+0x234>
   117b8:	add	r1, pc, r1
   117bc:	bl	10ab4 <strcmp@plt>
   117c0:	cmp	r0, #0
   117c4:	bne	11838 <teste_lista_inverte@@Base+0x128>
   117c8:	ldr	r6, [r6, #4]
   117cc:	ldr	r0, [r6]
   117d0:	ldr	r1, [pc, #368]	; 11948 <teste_lista_inverte@@Base+0x238>
   117d4:	add	r1, pc, r1
   117d8:	bl	10ab4 <strcmp@plt>
   117dc:	cmp	r0, #0
   117e0:	bne	11838 <teste_lista_inverte@@Base+0x128>
   117e4:	ldr	r6, [r6, #4]
   117e8:	ldr	r0, [r6]
   117ec:	ldr	r1, [pc, #344]	; 1194c <teste_lista_inverte@@Base+0x23c>
   117f0:	add	r1, pc, r1
   117f4:	bl	10ab4 <strcmp@plt>
   117f8:	cmp	r0, #0
   117fc:	bne	11838 <teste_lista_inverte@@Base+0x128>
   11800:	ldr	r6, [r6, #4]
   11804:	ldr	r0, [r6]
   11808:	ldr	r1, [pc, #320]	; 11950 <teste_lista_inverte@@Base+0x240>
   1180c:	add	r1, pc, r1
   11810:	bl	10ab4 <strcmp@plt>
   11814:	cmp	r0, #0
   11818:	bne	11838 <teste_lista_inverte@@Base+0x128>
   1181c:	ldr	r0, [r6, #4]
   11820:	ldr	r0, [r0]
   11824:	ldr	r1, [pc, #296]	; 11954 <teste_lista_inverte@@Base+0x244>
   11828:	add	r1, pc, r1
   1182c:	bl	10ab4 <strcmp@plt>
   11830:	cmp	r0, #0
   11834:	beq	11848 <teste_lista_inverte@@Base+0x138>
   11838:	ldr	r0, [pc, #280]	; 11958 <teste_lista_inverte@@Base+0x248>
   1183c:	add	r0, pc, r0
   11840:	bl	10ac0 <printf@plt>
   11844:	add	r4, r4, #1
   11848:	ldr	r6, [r5, #4]
   1184c:	ldr	r0, [r6]
   11850:	ldr	r1, [pc, #260]	; 1195c <teste_lista_inverte@@Base+0x24c>
   11854:	add	r1, pc, r1
   11858:	bl	10ab4 <strcmp@plt>
   1185c:	cmp	r0, #0
   11860:	bne	118d4 <teste_lista_inverte@@Base+0x1c4>
   11864:	ldr	r6, [r6, #8]
   11868:	ldr	r0, [r6]
   1186c:	ldr	r1, [pc, #236]	; 11960 <teste_lista_inverte@@Base+0x250>
   11870:	add	r1, pc, r1
   11874:	bl	10ab4 <strcmp@plt>
   11878:	cmp	r0, #0
   1187c:	bne	118d4 <teste_lista_inverte@@Base+0x1c4>
   11880:	ldr	r6, [r6, #8]
   11884:	ldr	r0, [r6]
   11888:	ldr	r1, [pc, #212]	; 11964 <teste_lista_inverte@@Base+0x254>
   1188c:	add	r1, pc, r1
   11890:	bl	10ab4 <strcmp@plt>
   11894:	cmp	r0, #0
   11898:	bne	118d4 <teste_lista_inverte@@Base+0x1c4>
   1189c:	ldr	r6, [r6, #8]
   118a0:	ldr	r0, [r6]
   118a4:	ldr	r1, [pc, #188]	; 11968 <teste_lista_inverte@@Base+0x258>
   118a8:	add	r1, pc, r1
   118ac:	bl	10ab4 <strcmp@plt>
   118b0:	cmp	r0, #0
   118b4:	bne	118d4 <teste_lista_inverte@@Base+0x1c4>
   118b8:	ldr	r0, [r6, #8]
   118bc:	ldr	r0, [r0]
   118c0:	ldr	r1, [pc, #164]	; 1196c <teste_lista_inverte@@Base+0x25c>
   118c4:	add	r1, pc, r1
   118c8:	bl	10ab4 <strcmp@plt>
   118cc:	cmp	r0, #0
   118d0:	beq	11900 <teste_lista_inverte@@Base+0x1f0>
   118d4:	ldr	r0, [pc, #148]	; 11970 <teste_lista_inverte@@Base+0x260>
   118d8:	add	r0, pc, r0
   118dc:	bl	10ac0 <printf@plt>
   118e0:	mov	r0, r5
   118e4:	bl	11a48 <lista_apaga@@Base>
   118e8:	add	r4, r4, #1
   118ec:	mov	r0, #10
   118f0:	bl	10b38 <putchar@plt>
   118f4:	mov	r0, r4
   118f8:	sub	sp, fp, #16
   118fc:	pop	{r4, r5, r6, sl, fp, pc}
   11900:	mov	r0, r5
   11904:	bl	11a48 <lista_apaga@@Base>
   11908:	cmp	r4, #0
   1190c:	bne	118ec <teste_lista_inverte@@Base+0x1dc>
   11910:	ldr	r0, [pc, #92]	; 11974 <teste_lista_inverte@@Base+0x264>
   11914:	add	r0, pc, r0
   11918:	bl	10af0 <puts@plt>
   1191c:	mov	r4, #0
   11920:	b	118f4 <teste_lista_inverte@@Base+0x1e4>
   11924:	andeq	r0, r0, r8, lsr #22
   11928:	andeq	r0, r0, r1, lsr #22
   1192c:	strdeq	r0, [r0], -ip
   11930:	strdeq	r0, [r0], -fp
   11934:	strdeq	r0, [r0], -sl
   11938:	andeq	r0, r0, sp, lsr #23
   1193c:	andeq	r0, r0, r4, ror #21
   11940:	andeq	r0, r0, fp, ror fp
   11944:	muleq	r0, r4, sl
   11948:	andeq	r0, r0, r5, ror sl
   1194c:	andeq	r0, r0, r6, asr sl
   11950:	andeq	r0, r0, r7, lsr sl
   11954:	andeq	r0, r0, r8, lsl sl
   11958:	andeq	r0, r0, fp, lsl #22
   1195c:	andeq	r0, r0, ip, ror #19
   11960:	ldrdeq	r0, [r0], -r3
   11964:			; <UNDEFINED> instruction: 0x000009ba
   11968:	andeq	r0, r0, r1, lsr #19
   1196c:	andeq	r0, r0, r8, lsl #19
   11970:	strdeq	r0, [r0], -r3
   11974:	muleq	r0, r7, sl

00011978 <main@@Base>:
   11978:	push	{r4, sl, fp, lr}
   1197c:	add	fp, sp, #8
   11980:	ldr	r0, [pc, #140]	; 11a14 <main@@Base+0x9c>
   11984:	mov	r1, #0
   11988:	mov	r2, #2
   1198c:	mov	r3, #0
   11990:	ldr	r0, [pc, r0]
   11994:	ldr	r0, [r0]
   11998:	bl	10b2c <setvbuf@plt>
   1199c:	ldr	r0, [pc, #116]	; 11a18 <main@@Base+0xa0>
   119a0:	mov	r1, #0
   119a4:	mov	r2, #2
   119a8:	mov	r3, #0
   119ac:	ldr	r0, [pc, r0]
   119b0:	ldr	r0, [r0]
   119b4:	bl	10b2c <setvbuf@plt>
   119b8:	bl	10d6c <teste_lista_nova@@Base>
   119bc:	mov	r4, r0
   119c0:	bl	10dfc <teste_lista_insere@@Base>
   119c4:	add	r4, r0, r4
   119c8:	bl	11160 <teste_lista_remove@@Base>
   119cc:	add	r4, r4, r0
   119d0:	bl	11330 <teste_lista_pesquisa@@Base>
   119d4:	add	r4, r4, r0
   119d8:	bl	114c8 <teste_lista_ordena@@Base>
   119dc:	add	r4, r4, r0
   119e0:	bl	11710 <teste_lista_inverte@@Base>
   119e4:	adds	r1, r4, r0
   119e8:	beq	11a00 <main@@Base+0x88>
   119ec:	ldr	r0, [pc, #44]	; 11a20 <main@@Base+0xa8>
   119f0:	add	r0, pc, r0
   119f4:	bl	10ac0 <printf@plt>
   119f8:	mov	r0, #0
   119fc:	pop	{r4, sl, fp, pc}
   11a00:	ldr	r0, [pc, #20]	; 11a1c <main@@Base+0xa4>
   11a04:	add	r0, pc, r0
   11a08:	bl	10af0 <puts@plt>
   11a0c:	mov	r0, #0
   11a10:	pop	{r4, sl, fp, pc}
   11a14:			; <UNDEFINED> instruction: 0x000116b0
   11a18:	andeq	r1, r1, ip, lsl #13
   11a1c:	andeq	r0, r0, sl, lsr #19
   11a20:	muleq	r0, r5, r9

00011a24 <lista_nova@@Base>:
   11a24:	push	{fp, lr}
   11a28:	mov	fp, sp
   11a2c:	mov	r0, #12
   11a30:	bl	10afc <malloc@plt>
   11a34:	cmp	r0, #0
   11a38:	moveq	r0, #0
   11a3c:	movne	r1, #0
   11a40:	strne	r1, [r0, #8]
   11a44:	pop	{fp, pc}

00011a48 <lista_apaga@@Base>:
   11a48:	cmp	r0, #0
   11a4c:	bxeq	lr
   11a50:	push	{r4, r5, r6, sl, fp, lr}
   11a54:	add	fp, sp, #16
   11a58:	mov	r4, r0
   11a5c:	ldr	r0, [r0, #8]
   11a60:	cmp	r0, #0
   11a64:	beq	11aac <lista_apaga@@Base+0x64>
   11a68:	ldr	r6, [r4]
   11a6c:	cmp	r6, #0
   11a70:	beq	11aac <lista_apaga@@Base+0x64>
   11a74:	ldr	r5, [r6, #4]
   11a78:	cmp	r5, #0
   11a7c:	beq	11aac <lista_apaga@@Base+0x64>
   11a80:	ldr	r0, [r6]
   11a84:	bl	10acc <free@plt>
   11a88:	mov	r0, r6
   11a8c:	bl	10acc <free@plt>
   11a90:	ldm	r5, {r0, r6}
   11a94:	bl	10acc <free@plt>
   11a98:	mov	r0, r5
   11a9c:	bl	10acc <free@plt>
   11aa0:	cmp	r6, #0
   11aa4:	mov	r5, r6
   11aa8:	bne	11a90 <lista_apaga@@Base+0x48>
   11aac:	mov	r0, r4
   11ab0:	pop	{r4, r5, r6, sl, fp, lr}
   11ab4:	b	10acc <free@plt>

00011ab8 <lista_tamanho@@Base>:
   11ab8:	cmp	r0, #0
   11abc:	ldrne	r0, [r0, #8]
   11ac0:	mvneq	r0, #0
   11ac4:	bx	lr

00011ac8 <lista_inicio@@Base>:
   11ac8:	cmp	r0, #0
   11acc:	ldrne	r0, [r0]
   11ad0:	moveq	r0, #0
   11ad4:	bx	lr

00011ad8 <lista_fim@@Base>:
   11ad8:	cmp	r0, #0
   11adc:	ldrne	r0, [r0, #4]
   11ae0:	moveq	r0, #0
   11ae4:	bx	lr

00011ae8 <lista_insere@@Base>:
   11ae8:	push	{r4, r5, r6, r7, fp, lr}
   11aec:	add	fp, sp, #16
   11af0:	cmp	r0, #0
   11af4:	beq	11b64 <lista_insere@@Base+0x7c>
   11af8:	mov	r4, r0
   11afc:	mov	r0, #12
   11b00:	mov	r6, r2
   11b04:	mov	r7, r1
   11b08:	bl	10afc <malloc@plt>
   11b0c:	mov	r5, r0
   11b10:	mov	r0, r7
   11b14:	bl	10b20 <strlen@plt>
   11b18:	add	r0, r0, #1
   11b1c:	bl	10afc <malloc@plt>
   11b20:	mov	r1, r7
   11b24:	str	r0, [r5]
   11b28:	bl	10ae4 <strcpy@plt>
   11b2c:	ldr	r0, [r4, #8]
   11b30:	cmp	r0, #0
   11b34:	beq	11b70 <lista_insere@@Base+0x88>
   11b38:	cmp	r6, #0
   11b3c:	beq	11b88 <lista_insere@@Base+0xa0>
   11b40:	ldr	r1, [r4]
   11b44:	cmp	r1, r6
   11b48:	beq	11ba0 <lista_insere@@Base+0xb8>
   11b4c:	mov	r1, r6
   11b50:	ldr	r2, [r1, #8]!
   11b54:	str	r5, [r2, #4]
   11b58:	str	r6, [r5, #4]
   11b5c:	str	r2, [r5, #8]
   11b60:	b	11bac <lista_insere@@Base+0xc4>
   11b64:	mov	r5, #0
   11b68:	mov	r0, r5
   11b6c:	pop	{r4, r5, r6, r7, fp, pc}
   11b70:	mov	r1, #0
   11b74:	str	r1, [r5, #4]
   11b78:	str	r1, [r5, #8]
   11b7c:	mov	r1, r4
   11b80:	str	r5, [r1], #4
   11b84:	b	11bac <lista_insere@@Base+0xc4>
   11b88:	mov	r1, r4
   11b8c:	mov	r2, #0
   11b90:	ldr	r3, [r1, #4]!
   11b94:	stmib	r5, {r2, r3}
   11b98:	str	r5, [r3, #4]
   11b9c:	b	11bac <lista_insere@@Base+0xc4>
   11ba0:	str	r1, [r5, #4]
   11ba4:	str	r5, [r4]
   11ba8:	add	r1, r5, #8
   11bac:	add	r0, r0, #1
   11bb0:	str	r5, [r1]
   11bb4:	str	r0, [r4, #8]
   11bb8:	mov	r0, r5
   11bbc:	pop	{r4, r5, r6, r7, fp, pc}

00011bc0 <lista_remove@@Base>:
   11bc0:	push	{r4, r5, r6, sl, fp, lr}
   11bc4:	add	fp, sp, #16
   11bc8:	cmp	r1, #0
   11bcc:	beq	11c08 <lista_remove@@Base+0x48>
   11bd0:	mov	r5, r0
   11bd4:	ldr	r0, [r0]
   11bd8:	ldr	r4, [r1, #4]
   11bdc:	mov	r6, r1
   11be0:	cmp	r0, r1
   11be4:	beq	11c14 <lista_remove@@Base+0x54>
   11be8:	ldr	r1, [r5, #4]
   11bec:	ldr	r0, [r6, #8]
   11bf0:	cmp	r1, r6
   11bf4:	beq	11c24 <lista_remove@@Base+0x64>
   11bf8:	str	r4, [r0, #4]
   11bfc:	ldr	r1, [r6, #4]
   11c00:	str	r0, [r1, #8]
   11c04:	b	11c30 <lista_remove@@Base+0x70>
   11c08:	mov	r4, #0
   11c0c:	mov	r0, r4
   11c10:	pop	{r4, r5, r6, sl, fp, pc}
   11c14:	mov	r0, #0
   11c18:	str	r0, [r4, #8]
   11c1c:	str	r4, [r5]
   11c20:	b	11c30 <lista_remove@@Base+0x70>
   11c24:	mov	r1, #0
   11c28:	str	r1, [r0, #4]
   11c2c:	str	r0, [r5, #4]
   11c30:	ldr	r0, [r6]
   11c34:	bl	10acc <free@plt>
   11c38:	mov	r0, r6
   11c3c:	bl	10acc <free@plt>
   11c40:	ldr	r0, [r5, #8]
   11c44:	sub	r0, r0, #1
   11c48:	str	r0, [r5, #8]
   11c4c:	mov	r0, r4
   11c50:	pop	{r4, r5, r6, sl, fp, pc}

00011c54 <lista_pesquisa@@Base>:
   11c54:	push	{r4, r5, r6, r7, fp, lr}
   11c58:	add	fp, sp, #16
   11c5c:	mov	r5, #0
   11c60:	cmp	r0, #0
   11c64:	beq	11cf8 <lista_pesquisa@@Base+0xa4>
   11c68:	mov	r4, r1
   11c6c:	cmp	r2, #1
   11c70:	beq	11cb8 <lista_pesquisa@@Base+0x64>
   11c74:	cmp	r2, #0
   11c78:	bne	11cf8 <lista_pesquisa@@Base+0xa4>
   11c7c:	ldr	r6, [r0, #8]
   11c80:	cmp	r6, #1
   11c84:	blt	11cf8 <lista_pesquisa@@Base+0xa4>
   11c88:	mov	r7, #0
   11c8c:	ldr	r5, [r0]
   11c90:	mov	r1, r4
   11c94:	ldr	r0, [r5]
   11c98:	bl	10ab4 <strcmp@plt>
   11c9c:	cmp	r0, #0
   11ca0:	beq	11cf8 <lista_pesquisa@@Base+0xa4>
   11ca4:	add	r7, r7, #1
   11ca8:	add	r0, r5, #4
   11cac:	cmp	r7, r6
   11cb0:	blt	11c8c <lista_pesquisa@@Base+0x38>
   11cb4:	b	11cf4 <lista_pesquisa@@Base+0xa0>
   11cb8:	ldr	r6, [r0, #8]
   11cbc:	cmp	r6, #1
   11cc0:	blt	11cf8 <lista_pesquisa@@Base+0xa4>
   11cc4:	add	r0, r0, #4
   11cc8:	mov	r7, #0
   11ccc:	ldr	r5, [r0]
   11cd0:	mov	r1, r4
   11cd4:	ldr	r0, [r5]
   11cd8:	bl	10ab4 <strcmp@plt>
   11cdc:	cmp	r0, #0
   11ce0:	beq	11cf8 <lista_pesquisa@@Base+0xa4>
   11ce4:	add	r7, r7, #1
   11ce8:	add	r0, r5, #8
   11cec:	cmp	r7, r6
   11cf0:	blt	11ccc <lista_pesquisa@@Base+0x78>
   11cf4:	mov	r5, #0
   11cf8:	mov	r0, r5
   11cfc:	pop	{r4, r5, r6, r7, fp, pc}

00011d00 <lista_ordena@@Base>:
   11d00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d04:	add	fp, sp, #28
   11d08:	sub	sp, sp, #4
   11d0c:	cmp	r0, #0
   11d10:	beq	11dbc <lista_ordena@@Base+0xbc>
   11d14:	ldr	r1, [r0, #8]
   11d18:	mov	r2, #0
   11d1c:	cmp	r1, #0
   11d20:	beq	11dc0 <lista_ordena@@Base+0xc0>
   11d24:	ldr	sl, [r0]
   11d28:	ldr	r9, [r0, #4]
   11d2c:	cmp	sl, r9
   11d30:	beq	11dc0 <lista_ordena@@Base+0xc0>
   11d34:	mov	r8, sl
   11d38:	b	11d48 <lista_ordena@@Base+0x48>
   11d3c:	mov	r8, r4
   11d40:	cmp	r8, r9
   11d44:	beq	11db4 <lista_ordena@@Base+0xb4>
   11d48:	ldr	r4, [r8, #4]
   11d4c:	ldr	r5, [r8]
   11d50:	ldr	r6, [r4]
   11d54:	mov	r0, r5
   11d58:	mov	r1, r6
   11d5c:	bl	10ab4 <strcmp@plt>
   11d60:	cmp	r0, #1
   11d64:	blt	11d3c <lista_ordena@@Base+0x3c>
   11d68:	mov	r7, r8
   11d6c:	mov	r0, r8
   11d70:	str	r6, [r7]
   11d74:	str	r5, [r4]
   11d78:	cmp	r0, sl
   11d7c:	mov	r7, sl
   11d80:	ldrne	r7, [r0, #8]
   11d84:	ldr	r4, [r7, #4]
   11d88:	ldr	r5, [r7]
   11d8c:	ldr	r6, [r4]
   11d90:	mov	r0, r5
   11d94:	mov	r1, r6
   11d98:	bl	10ab4 <strcmp@plt>
   11d9c:	cmp	r0, #0
   11da0:	mov	r0, r7
   11da4:	bgt	11d70 <lista_ordena@@Base+0x70>
   11da8:	ldr	r8, [r8, #4]
   11dac:	cmp	r8, r9
   11db0:	bne	11d48 <lista_ordena@@Base+0x48>
   11db4:	mov	r2, #0
   11db8:	b	11dc0 <lista_ordena@@Base+0xc0>
   11dbc:	mvn	r2, #0
   11dc0:	mov	r0, r2
   11dc4:	sub	sp, fp, #28
   11dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011dcc <lista_inverte@@Base>:
   11dcc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11dd0:	add	fp, sp, #24
   11dd4:	cmp	r0, #0
   11dd8:	beq	11e48 <lista_inverte@@Base+0x7c>
   11ddc:	mov	r9, r0
   11de0:	ldr	r0, [r0, #8]
   11de4:	mov	r8, #0
   11de8:	cmp	r0, #2
   11dec:	blt	11e40 <lista_inverte@@Base+0x74>
   11df0:	add	r7, r9, #4
   11df4:	mov	r8, #0
   11df8:	mov	r4, r9
   11dfc:	mov	r5, #0
   11e00:	ldr	r4, [r4]
   11e04:	ldr	r7, [r7]
   11e08:	ldr	r0, [r4]
   11e0c:	bl	10ad8 <strdup@plt>
   11e10:	mov	r6, r0
   11e14:	ldr	r0, [r7]
   11e18:	bl	10ad8 <strdup@plt>
   11e1c:	str	r0, [r4], #4
   11e20:	mov	r0, r6
   11e24:	bl	10ad8 <strdup@plt>
   11e28:	str	r0, [r7], #8
   11e2c:	add	r5, r5, #1
   11e30:	ldr	r0, [r9, #8]
   11e34:	add	r0, r0, r0, lsr #31
   11e38:	cmp	r5, r0, asr #1
   11e3c:	blt	11e00 <lista_inverte@@Base+0x34>
   11e40:	mov	r0, r8
   11e44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11e48:	mvn	r8, #0
   11e4c:	mov	r0, r8
   11e50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00011e54 <__libc_csu_init@@Base>:
   11e54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11e58:	mov	r7, r0
   11e5c:	ldr	r6, [pc, #72]	; 11eac <__libc_csu_init@@Base+0x58>
   11e60:	ldr	r5, [pc, #72]	; 11eb0 <__libc_csu_init@@Base+0x5c>
   11e64:	add	r6, pc, r6
   11e68:	add	r5, pc, r5
   11e6c:	sub	r6, r6, r5
   11e70:	mov	r8, r1
   11e74:	mov	r9, r2
   11e78:	bl	10a94 <strcmp@plt-0x20>
   11e7c:	asrs	r6, r6, #2
   11e80:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e84:	mov	r4, #0
   11e88:	add	r4, r4, #1
   11e8c:	ldr	r3, [r5], #4
   11e90:	mov	r2, r9
   11e94:	mov	r1, r8
   11e98:	mov	r0, r7
   11e9c:	blx	r3
   11ea0:	cmp	r6, r4
   11ea4:	bne	11e88 <__libc_csu_init@@Base+0x34>
   11ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11eac:	andeq	r1, r1, r0, lsr #1
   11eb0:	muleq	r1, r8, r0

00011eb4 <__libc_csu_fini@@Base>:
   11eb4:	bx	lr

Disassembly of section .fini:

00011eb8 <.fini>:
   11eb8:	push	{r3, lr}
   11ebc:	pop	{r3, pc}
